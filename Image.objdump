
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000024f1 	strdeq	r2, [r0], -r1
		// Called to issue a wait request
		if (st == WNONE)
       8:	000024eb 	andeq	r2, r0, fp, ror #9
       c:	000024ed 	andeq	r2, r0, sp, ror #9
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	000024ef 	andeq	r2, r0, pc, ror #9
      14:	000024ef 	andeq	r2, r0, pc, ror #9
		when (&__input_pins, st);
      18:	000024ef 	andeq	r2, r0, pc, ror #9
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	000024ef 	andeq	r2, r0, pc, ror #9
      30:	000024ef 	andeq	r2, r0, pc, ror #9
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	000024ef 	andeq	r2, r0, pc, ror #9
      3c:	000024ef 	andeq	r2, r0, pc, ror #9
      40:	00001211 	andeq	r1, r0, r1, lsl r2
      44:	000024ef 	andeq	r2, r0, pc, ror #9
      48:	000024ef 	andeq	r2, r0, pc, ror #9
}
      4c:	000024ef 	andeq	r2, r0, pc, ror #9
      50:	00000dd1 	ldrdeq	r0, [r0], -r1
      54:	000010d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	000024ef 	andeq	r2, r0, pc, ror #9
	    pbutton++) {
      5c:	000024ef 	andeq	r2, r0, pc, ror #9
      60:	000024ef 	andeq	r2, r0, pc, ror #9
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00002f21 	andeq	r2, r0, r1, lsr #30
      68:	000024ef 	andeq	r2, r0, pc, ror #9
      6c:	000024ef 	andeq	r2, r0, pc, ror #9
      70:	000024ef 	andeq	r2, r0, pc, ror #9
      74:	000024ef 	andeq	r2, r0, pc, ror #9
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	000024ef 	andeq	r2, r0, pc, ror #9
      7c:	000024ef 	andeq	r2, r0, pc, ror #9
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	000024ef 	andeq	r2, r0, pc, ror #9
      84:	000024ef 	andeq	r2, r0, pc, ror #9
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	000024ef 	andeq	r2, r0, pc, ror #9
      8c:	000024ef 	andeq	r2, r0, pc, ror #9
      90:	000024ef 	andeq	r2, r0, pc, ror #9
      94:	000024ef 	andeq	r2, r0, pc, ror #9
      98:	000024ef 	andeq	r2, r0, pc, ror #9
		goto Done;

	if (baction == NULL)
      9c:	000024ef 	andeq	r2, r0, pc, ror #9
      a0:	000024ef 	andeq	r2, r0, pc, ror #9
		goto Term;

	(*baction) (pbutton);
      a4:	000024ef 	andeq	r2, r0, pc, ror #9

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	000024ef 	andeq	r2, r0, pc, ror #9
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000024ef 	andeq	r2, r0, pc, ror #9
      b0:	000024ef 	andeq	r2, r0, pc, ror #9
endthread
      b4:	000024ef 	andeq	r2, r0, pc, ror #9
      b8:	000024ef 	andeq	r2, r0, pc, ror #9
      bc:	000024ef 	andeq	r2, r0, pc, ror #9
      c0:	000024ef 	andeq	r2, r0, pc, ror #9
      c4:	000024ef 	andeq	r2, r0, pc, ror #9

000000c8 <sender>:
	return response_message;

};

// sends packet information to other nodes
fsm sender(struct ResponseMessage *message) {
      c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      ca:	4606      	mov	r6, r0
      cc:	b128      	cbz	r0, da <sender+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d02a      	beq.n	128 <_Min_Stack_Size+0x28>
	state CONFIRM_message:
		// Display message was sent
		ser_out(CONFIRM_message, "Message sent\r\n");
		// Exit out of fsm
		finish;
}
      d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      d6:	f001 bbb9 	b.w	184c <__pi_badstate>
fsm sender(struct ResponseMessage *message) {
      da:	4b24      	ldr	r3, [pc, #144]	; (16c <_Min_Stack_Size+0x6c>)
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	4924      	ldr	r1, [pc, #144]	; (170 <_Min_Stack_Size+0x70>)
fsm sender(struct ResponseMessage *message) {
      de:	681b      	ldr	r3, [r3, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	2222      	movs	r2, #34	; 0x22
fsm sender(struct ResponseMessage *message) {
      e2:	689d      	ldr	r5, [r3, #8]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f002 f858 	bl	219c <tcv_wnps>
      ec:	4604      	mov	r4, r0
		packet[0] = 0;
      ee:	8006      	strh	r6, [r0, #0]
		packet[1] = message->gid;
      f0:	882b      	ldrh	r3, [r5, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f2:	4f20      	ldr	r7, [pc, #128]	; (174 <_Min_Stack_Size+0x74>)
		packet[1] = message->gid;
      f4:	8043      	strh	r3, [r0, #2]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f6:	6038      	str	r0, [r7, #0]
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	481f      	ldr	r0, [pc, #124]	; (178 <_Min_Stack_Size+0x78>)
      fa:	f001 fe29 	bl	1d50 <diag>
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
      fe:	7969      	ldrb	r1, [r5, #5]
     100:	481e      	ldr	r0, [pc, #120]	; (17c <_Min_Stack_Size+0x7c>)
     102:	f001 fe25 	bl	1d50 <diag>
		*p = message->tpe;p++;
     106:	78ab      	ldrb	r3, [r5, #2]
     108:	7123      	strb	r3, [r4, #4]
		*p = message->request_number;p++;
     10a:	78eb      	ldrb	r3, [r5, #3]
     10c:	7163      	strb	r3, [r4, #5]
		*p = message->sender_id;p++;
     10e:	792b      	ldrb	r3, [r5, #4]
     110:	71a3      	strb	r3, [r4, #6]
		*p = message->receiver_id;p++;
     112:	796b      	ldrb	r3, [r5, #5]
     114:	71e3      	strb	r3, [r4, #7]
		switch(message->tpe) {
     116:	78ab      	ldrb	r3, [r5, #2]
     118:	2b04      	cmp	r3, #4
     11a:	d80e      	bhi.n	13a <_Min_Stack_Size+0x3a>
     11c:	2b02      	cmp	r3, #2
     11e:	d820      	bhi.n	162 <_Min_Stack_Size+0x62>
     120:	d017      	beq.n	152 <_Min_Stack_Size+0x52>
		tcv_endp(packet);
     122:	6838      	ldr	r0, [r7, #0]
     124:	f001 ff50 	bl	1fc8 <tcv_endp>
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2001      	movs	r0, #1
     12a:	4915      	ldr	r1, [pc, #84]	; (180 <_Min_Stack_Size+0x80>)
     12c:	f002 fab4 	bl	2698 <ser_out>
}
     130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		finish;
     134:	2000      	movs	r0, #0
     136:	f001 bd69 	b.w	1c0c <kill>
     13a:	2b05      	cmp	r3, #5
     13c:	d1f1      	bne.n	122 <_Min_Stack_Size+0x22>
				*p = message->status;p++;
     13e:	79ab      	ldrb	r3, [r5, #6]
				strncpy(p, message->record, sizeof(message->record));
     140:	2214      	movs	r2, #20
				*p = message->status;p++;
     142:	7223      	strb	r3, [r4, #8]
				*p = message->padding;p++;
     144:	79eb      	ldrb	r3, [r5, #7]
				strncpy(p, message->record, sizeof(message->record));
     146:	f105 0108 	add.w	r1, r5, #8
				*p = message->padding;p++;
     14a:	7263      	strb	r3, [r4, #9]
				strncpy(p, message->record, sizeof(message->record));
     14c:	f104 000a 	add.w	r0, r4, #10
     150:	e004      	b.n	15c <_Min_Stack_Size+0x5c>
				strncpy(p, message->record, sizeof(message->record));
     152:	2214      	movs	r2, #20
     154:	f105 0108 	add.w	r1, r5, #8
     158:	f104 0008 	add.w	r0, r4, #8
				strncpy(p, message->record, sizeof(message->record));
     15c:	f001 fc8b 	bl	1a76 <__pi_strncpy>
				break;
     160:	e7df      	b.n	122 <_Min_Stack_Size+0x22>
				*p = message->record_index;p++;
     162:	7f2b      	ldrb	r3, [r5, #28]
     164:	7223      	strb	r3, [r4, #8]
				*p = message->padding;
     166:	79eb      	ldrb	r3, [r5, #7]
     168:	7263      	strb	r3, [r4, #9]
				break;
     16a:	e7da      	b.n	122 <_Min_Stack_Size+0x22>
     16c:	200006d4 	ldrdcs	r0, [r0], -r4
     170:	20000000 	andcs	r0, r0, r0
     174:	20000544 	andcs	r0, r0, r4, asr #10
     178:	00004a80 	andeq	r4, r0, r0, lsl #21
     17c:	00004a92 	muleq	r0, r2, sl
     180:	00004aa9 	andeq	r4, r0, r9, lsr #21

00000184 <reset_array>:
		node->nnodes[i] = 0;
     184:	2200      	movs	r2, #0
     186:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     18a:	f200 4081 	addw	r0, r0, #1153	; 0x481
     18e:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     192:	4283      	cmp	r3, r0
     194:	d1fb      	bne.n	18e <reset_array+0xa>
}
     196:	4770      	bx	lr

00000198 <init_node>:
bool init_node(struct Node* node){
     198:	b510      	push	{r4, lr}
    node->id  = 0;                  // default id value 0
     19a:	2400      	movs	r4, #0
     19c:	7004      	strb	r4, [r0, #0]
    node->gid = 0;                  // default gid value 0
     19e:	8044      	strh	r4, [r0, #2]
    node->index = 0;                // default entry count 0
     1a0:	f880 4481 	strb.w	r4, [r0, #1153]	; 0x481
    node->data_base.item_count = 0; // default no items in array
     1a4:	f880 4464 	strb.w	r4, [r0, #1124]	; 0x464
	reset_array(node);
     1a8:	f7ff ffec 	bl	184 <reset_array>
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	4802      	ldr	r0, [pc, #8]	; (1b8 <init_node+0x20>)
     1ae:	f001 fdcf 	bl	1d50 <diag>
};
     1b2:	4620      	mov	r0, r4
     1b4:	bd10      	pop	{r4, pc}
     1b6:	bf00      	nop
     1b8:	00004ab8 			; <UNDEFINED> instruction: 0x00004ab8

000001bc <generate_request_num>:
uint8_t generate_request_num(void){
     1bc:	b508      	push	{r3, lr}
    return (uint8_t) (rand() % 255);
     1be:	f004 fc19 	bl	49f4 <rand>
     1c2:	23ff      	movs	r3, #255	; 0xff
     1c4:	fb90 f3f3 	sdiv	r3, r0, r3
     1c8:	4418      	add	r0, r3
}
     1ca:	b2c0      	uxtb	r0, r0
     1cc:	bd08      	pop	{r3, pc}

000001ce <clear_node_neighbour_array>:
            node->nnodes[i] = 0; // set to null byte
     1ce:	2200      	movs	r2, #0
     1d0:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     1d4:	f200 4081 	addw	r0, r0, #1153	; 0x481
     1d8:	f803 2b01 	strb.w	r2, [r3], #1
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	4283      	cmp	r3, r0
     1de:	d1fb      	bne.n	1d8 <clear_node_neighbour_array+0xa>
};
     1e0:	2001      	movs	r0, #1
     1e2:	4770      	bx	lr

000001e4 <delete_record>:
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	f890 3464 	ldrb.w	r3, [r0, #1124]	; 0x464
     1e8:	b143      	cbz	r3, 1fc <delete_record+0x18>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ea:	221c      	movs	r2, #28
     1ec:	fb02 0101 	mla	r1, r2, r1, r0
     1f0:	2200      	movs	r2, #0
        node->data_base.item_count -= 1;
     1f2:	3b01      	subs	r3, #1
        node->data_base.item_array[index].data_entry[0] = '\0';
     1f4:	714a      	strb	r2, [r1, #5]
        node->data_base.item_array[index].timestamp = 0;
     1f6:	61ca      	str	r2, [r1, #28]
        node->data_base.item_count -= 1;
     1f8:	f880 3464 	strb.w	r3, [r0, #1124]	; 0x464
};
     1fc:	2000      	movs	r0, #0
     1fe:	4770      	bx	lr

00000200 <delete_all>:
bool delete_all(struct Node *node){
     200:	b510      	push	{r4, lr}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     202:	f890 4464 	ldrb.w	r4, [r0, #1124]	; 0x464
     206:	b164      	cbz	r4, 222 <delete_all+0x22>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	2300      	movs	r3, #0
     20a:	4601      	mov	r1, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	461a      	mov	r2, r3
        for(int i = 0; i <= node->data_base.item_count; i++){
     20e:	3301      	adds	r3, #1
     210:	429c      	cmp	r4, r3
            node->data_base.item_array[i].data_entry[0] = '\0';
     212:	714a      	strb	r2, [r1, #5]
            node->data_base.item_array[i].timestamp = 0;
     214:	f841 2f1c 	str.w	r2, [r1, #28]!
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	daf9      	bge.n	20e <delete_all+0xe>
    node->data_base.item_count = 0;
     21a:	f880 2464 	strb.w	r2, [r0, #1124]	; 0x464
    	return false;
     21e:	2000      	movs	r0, #0
}
     220:	bd10      	pop	{r4, pc}
        return true;
     222:	2001      	movs	r0, #1
     224:	e7fc      	b.n	220 <delete_all+0x20>

00000226 <assemble_response_message>:
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     22a:	4680      	mov	r8, r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	201e      	movs	r0, #30
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     22e:	461d      	mov	r5, r3
     230:	460f      	mov	r7, r1
     232:	4616      	mov	r6, r2
     234:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
     238:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	f001 fd0e 	bl	1c5c <__pi_malloc>
	response_message->tpe = RESPONSE;
     240:	2305      	movs	r3, #5
     242:	7083      	strb	r3, [r0, #2]
	response_message->status = status;
     244:	f89d 3020 	ldrb.w	r3, [sp, #32]
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	4604      	mov	r4, r0
	response_message->gid = gid;
     24a:	f8a0 8000 	strh.w	r8, [r0]
	response_message->request_number = request_number;
     24e:	70c7      	strb	r7, [r0, #3]
	response_message->sender_id = sender_id;
     250:	7106      	strb	r6, [r0, #4]
	response_message->receiver_id = receiver_id;
     252:	7145      	strb	r5, [r0, #5]
	response_message->status = status;
     254:	7183      	strb	r3, [r0, #6]
	if (!padding){
     256:	f1ba 0f00 	cmp.w	sl, #0
     25a:	d101      	bne.n	260 <assemble_response_message+0x3a>
		response_message->padding = padding;
     25c:	f880 a007 	strb.w	sl, [r0, #7]
	if (rec != NULL){
     260:	f1b9 0f00 	cmp.w	r9, #0
     264:	d005      	beq.n	272 <assemble_response_message+0x4c>
		strncpy(response_message->record, rec, 20);
     266:	2214      	movs	r2, #20
     268:	4649      	mov	r1, r9
     26a:	f104 0008 	add.w	r0, r4, #8
     26e:	f001 fc02 	bl	1a76 <__pi_strncpy>
};
     272:	4620      	mov	r0, r4
     274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00000278 <receiver>:

// receives packet information from wireless connected nodes
fsm receiver(struct Node* node_db) {
     278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     27c:	4b99      	ldr	r3, [pc, #612]	; (4e4 <receiver+0x26c>)
     27e:	b092      	sub	sp, #72	; 0x48
     280:	681b      	ldr	r3, [r3, #0]
     282:	689c      	ldr	r4, [r3, #8]
     284:	2809      	cmp	r0, #9
     286:	f200 81ee 	bhi.w	666 <receiver+0x3ee>
     28a:	e8df f000 	tbb	[pc, r0]
     28e:	75681205 	strbvc	r1, [r8, #-517]!	; 0xfffffdfb
     292:	998f837c 	stmibls	pc, {r2, r3, r4, r5, r6, r8, r9, pc}	; <UNPREDICTABLE>
     296:	4893ada3 	ldmmi	r3, {r0, r1, r5, r7, r8, sl, fp, sp, pc}
	
	//address incoming_packet;
	//char array[20];

	state receiving:
		DEBUG_PRINT("\r\nreceiving 0");
     29a:	f001 fd59 	bl	1d50 <diag>
		// Get the next packet queued for input at the session (sfd)
		incoming_packet = tcv_rnp(receiving, sfd);
     29e:	4b93      	ldr	r3, [pc, #588]	; (4ec <receiver+0x274>)
     2a0:	2000      	movs	r0, #0
     2a2:	6819      	ldr	r1, [r3, #0]
     2a4:	f001 ff3a 	bl	211c <tcv_rnp>
     2a8:	4b91      	ldr	r3, [pc, #580]	; (4f0 <receiver+0x278>)
     2aa:	6018      	str	r0, [r3, #0]
		DEBUG_PRINT("\r\nreceiving 1");
     2ac:	4891      	ldr	r0, [pc, #580]	; (4f4 <receiver+0x27c>)
     2ae:	f001 fd4f 	bl	1d50 <diag>
	state ok:
		//uint8_t tpe;
		//uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
		DEBUG_PRINT("\r\nreceiving 2");
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2b2:	4d8f      	ldr	r5, [pc, #572]	; (4f0 <receiver+0x278>)
		DEBUG_PRINT("\r\nreceiving 2");
     2b4:	4890      	ldr	r0, [pc, #576]	; (4f8 <receiver+0x280>)
     2b6:	f001 fd4b 	bl	1d50 <diag>
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2ba:	682b      	ldr	r3, [r5, #0]
     2bc:	4f8f      	ldr	r7, [pc, #572]	; (4fc <receiver+0x284>)
     2be:	1c9a      	adds	r2, r3, #2
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c0:	7919      	ldrb	r1, [r3, #4]
     2c2:	488f      	ldr	r0, [pc, #572]	; (500 <receiver+0x288>)
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2c4:	603a      	str	r2, [r7, #0]
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c6:	f001 fd43 	bl	1d50 <diag>
		DEBUG_PRINT("\r\nreceiving 3");
     2ca:	488e      	ldr	r0, [pc, #568]	; (504 <receiver+0x28c>)
     2cc:	f001 fd40 	bl	1d50 <diag>
		//if (bytes_read != 1){
			//proceed error; //NOTE: NO ERROR STATE
		//};
		// in each switch case where we send a response using call (), we may be able to remove the return state...
		switch (response_message_5->tpe){
     2d0:	683b      	ldr	r3, [r7, #0]
     2d2:	789e      	ldrb	r6, [r3, #2]
     2d4:	2e05      	cmp	r6, #5
     2d6:	f200 81c1 	bhi.w	65c <receiver+0x3e4>
     2da:	e8df f016 	tbh	[pc, r6, lsl #1]
     2de:	00290006 	eoreq	r0, r9, r6
     2e2:	00c5008e 	sbceq	r0, r5, lr, lsl #1
     2e6:	01810147 	orreq	r0, r1, r7, asr #2
			
			Because this is one of the scenarios where the packets are the same we can send back the packet with any required modifications
			*/
			case DISCOVERY_REQUEST: ;
				// respondng with this
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2ea:	201e      	movs	r0, #30
     2ec:	f001 fcb6 	bl	1c5c <__pi_malloc>
				// receiving this
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2f0:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
				DEBUG_PRINT("\r\ndiscover gid: %u\r\nNode gid:%u", discovery_request_message->gid, node_db->gid);*/
				// if the group_ids match
				if (discovery_request_message->gid == node_db->gid){
     2f2:	8863      	ldrh	r3, [r4, #2]
     2f4:	886a      	ldrh	r2, [r5, #2]
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2f6:	4606      	mov	r6, r0
				if (discovery_request_message->gid == node_db->gid){
     2f8:	429a      	cmp	r2, r3
     2fa:	d130      	bne.n	35e <receiver+0xe6>
					DEBUG_PRINT("\r\nSending to sender");
     2fc:	4882      	ldr	r0, [pc, #520]	; (508 <receiver+0x290>)
     2fe:	f001 fd27 	bl	1d50 <diag>
					response_message_0->gid = discovery_request_message->gid;
     302:	886b      	ldrh	r3, [r5, #2]
					response_message_0->request_number = discovery_request_message->request_number;
					response_message_0->sender_id = node_db->id;
					response_message_0->receiver_id = discovery_request_message->sender_id;

					// NOTE: return_from_sender might be optional, in which case it should just return to here and then break
					DEBUG_PRINT("\r\nSending to sender");
     304:	4880      	ldr	r0, [pc, #512]	; (508 <receiver+0x290>)
					response_message_0->gid = discovery_request_message->gid;
     306:	8033      	strh	r3, [r6, #0]
					response_message_0->tpe = DISCOVERY_RESPONSE;
     308:	2301      	movs	r3, #1
     30a:	70b3      	strb	r3, [r6, #2]
					response_message_0->request_number = discovery_request_message->request_number;
     30c:	796b      	ldrb	r3, [r5, #5]
     30e:	70f3      	strb	r3, [r6, #3]
					response_message_0->sender_id = node_db->id;
     310:	7823      	ldrb	r3, [r4, #0]
     312:	7133      	strb	r3, [r6, #4]
					response_message_0->receiver_id = discovery_request_message->sender_id;
     314:	79ab      	ldrb	r3, [r5, #6]
     316:	7173      	strb	r3, [r6, #5]
					DEBUG_PRINT("\r\nSending to sender");
     318:	f001 fd1a 	bl	1d50 <diag>
					call sender(response_message_0, done_case);
     31c:	4631      	mov	r1, r6
     31e:	487b      	ldr	r0, [pc, #492]	; (50c <receiver+0x294>)
     320:	f001 fcf0 	bl	1d04 <__pi_fork>
     324:	2102      	movs	r1, #2
     326:	f001 fb57 	bl	19d8 <__pi_join>
     32a:	b1c0      	cbz	r0, 35e <receiver+0xe6>
     32c:	f001 f8b0 	bl	1490 <__pi_release>

			Based on the specifications, there is no response when this kind of message is received.
			*/
			case DISCOVERY_RESPONSE: ;
				// receiving this, no response.
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     330:	6829      	ldr	r1, [r5, #0]
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
*/
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     332:	8862      	ldrh	r2, [r4, #2]
     334:	884b      	ldrh	r3, [r1, #2]
     336:	429a      	cmp	r2, r3
     338:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
     33c:	d103      	bne.n	346 <receiver+0xce>
     33e:	798a      	ldrb	r2, [r1, #6]
     340:	1e50      	subs	r0, r2, #1
     342:	2817      	cmp	r0, #23
     344:	d902      	bls.n	34c <receiver+0xd4>
     346:	18e2      	adds	r2, r4, r3
     348:	f892 2468 	ldrb.w	r2, [r2, #1128]	; 0x468
     34c:	18e0      	adds	r0, r4, r3
     34e:	f880 2468 	strb.w	r2, [r0, #1128]	; 0x468
				// increment the index if the insertion succeeded.
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     352:	7989      	ldrb	r1, [r1, #6]
     354:	4291      	cmp	r1, r2
     356:	d102      	bne.n	35e <receiver+0xe6>
					node_db->index+=1;
     358:	3301      	adds	r3, #1
     35a:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
				break;

		};
	state done_case:
		DEBUG_PRINT("\r\nIn done_case");
     35e:	486c      	ldr	r0, [pc, #432]	; (510 <receiver+0x298>)
     360:	f001 fcf6 	bl	1d50 <diag>
		tcv_endp(incoming_packet);
     364:	4b62      	ldr	r3, [pc, #392]	; (4f0 <receiver+0x278>)
     366:	6818      	ldr	r0, [r3, #0]
     368:	f001 fe2e 	bl	1fc8 <tcv_endp>
		DEBUG_PRINT("\r\nIn done_case");
     36c:	4868      	ldr	r0, [pc, #416]	; (510 <receiver+0x298>)
     36e:	f001 fcef 	bl	1d50 <diag>
		proceed receiving;
     372:	2000      	movs	r0, #0
     374:	f001 faf2 	bl	195c <proceed>
	
	// Succeeded in performing requested action
	state response_1_create:
		ser_out(response_1_create, "\r\nData Saved");
     378:	2003      	movs	r0, #3
     37a:	4966      	ldr	r1, [pc, #408]	; (514 <receiver+0x29c>)
     37c:	f002 f98c 	bl	2698 <ser_out>
		proceed receiving;
     380:	2000      	movs	r0, #0
     382:	f001 faeb 	bl	195c <proceed>
	state response_1_delete:
		ser_out(response_1_delete, "\r\nRecord Deleted");
     386:	2004      	movs	r0, #4
     388:	4963      	ldr	r1, [pc, #396]	; (518 <receiver+0x2a0>)
     38a:	f002 f985 	bl	2698 <ser_out>
		proceed receiving;
     38e:	2000      	movs	r0, #0
     390:	f001 fae4 	bl	195c <proceed>
	state response_1_retrieve:
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     394:	4b59      	ldr	r3, [pc, #356]	; (4fc <receiver+0x284>)
     396:	2005      	movs	r0, #5
     398:	681a      	ldr	r2, [r3, #0]
     39a:	4960      	ldr	r1, [pc, #384]	; (51c <receiver+0x2a4>)
     39c:	f102 0308 	add.w	r3, r2, #8
     3a0:	7912      	ldrb	r2, [r2, #4]
     3a2:	f002 f9eb 	bl	277c <ser_outf>
		proceed receiving;
     3a6:	2000      	movs	r0, #0
     3a8:	f001 fad8 	bl	195c <proceed>
	
	// Failed to perform requests action
	state response_2:
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     3ac:	4b53      	ldr	r3, [pc, #332]	; (4fc <receiver+0x284>)
     3ae:	2006      	movs	r0, #6
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	495b      	ldr	r1, [pc, #364]	; (520 <receiver+0x2a8>)
     3b4:	791a      	ldrb	r2, [r3, #4]
     3b6:	f002 f9e1 	bl	277c <ser_outf>
		proceed receiving;
     3ba:	2000      	movs	r0, #0
     3bc:	f001 face 	bl	195c <proceed>
	state response_3:
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3c0:	4b4e      	ldr	r3, [pc, #312]	; (4fc <receiver+0x284>)
     3c2:	2007      	movs	r0, #7
     3c4:	681b      	ldr	r3, [r3, #0]
     3c6:	4957      	ldr	r1, [pc, #348]	; (524 <receiver+0x2ac>)
     3c8:	791a      	ldrb	r2, [r3, #4]
     3ca:	f002 f9d7 	bl	277c <ser_outf>
		proceed receiving;
     3ce:	2000      	movs	r0, #0
     3d0:	f001 fac4 	bl	195c <proceed>
	state response_4:
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3d4:	4b49      	ldr	r3, [pc, #292]	; (4fc <receiver+0x284>)
     3d6:	2008      	movs	r0, #8
     3d8:	681b      	ldr	r3, [r3, #0]
     3da:	4953      	ldr	r1, [pc, #332]	; (528 <receiver+0x2b0>)
     3dc:	791a      	ldrb	r2, [r3, #4]
     3de:	f002 f9cd 	bl	277c <ser_outf>
		proceed receiving;
     3e2:	2000      	movs	r0, #0
     3e4:	f001 faba 	bl	195c <proceed>

	// likely want to respond with error message
	state error:
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3e8:	4850      	ldr	r0, [pc, #320]	; (52c <receiver+0x2b4>)
     3ea:	f001 fcb1 	bl	1d50 <diag>
		// handle error
		// retry?
		proceed receiving;
     3ee:	2000      	movs	r0, #0
     3f0:	f001 fab4 	bl	195c <proceed>
		
}
     3f4:	b012      	add	sp, #72	; 0x48
     3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3fa:	201e      	movs	r0, #30
     3fc:	f001 fc2e 	bl	1c5c <__pi_malloc>
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     400:	682d      	ldr	r5, [r5, #0]
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     402:	7823      	ldrb	r3, [r4, #0]
     404:	79ea      	ldrb	r2, [r5, #7]
     406:	429a      	cmp	r2, r3
     408:	d103      	bne.n	412 <receiver+0x19a>
     40a:	886a      	ldrh	r2, [r5, #2]
     40c:	8863      	ldrh	r3, [r4, #2]
     40e:	429a      	cmp	r2, r3
     410:	d003      	beq.n	41a <receiver+0x1a2>
					DEBUG_PRINT("\r\nCreate rec we broke");
     412:	4847      	ldr	r0, [pc, #284]	; (530 <receiver+0x2b8>)
					DEBUG_PRINT("\r\nDelete rec first if");
     414:	f001 fc9c 	bl	1d50 <diag>
					break;
     418:	e7a1      	b.n	35e <receiver+0xe6>
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     41a:	2114      	movs	r1, #20
     41c:	4845      	ldr	r0, [pc, #276]	; (534 <receiver+0x2bc>)
     41e:	f001 fc97 	bl	1d50 <diag>
					DEBUG_PRINT("\r\nCreate rec second if");
     422:	4845      	ldr	r0, [pc, #276]	; (538 <receiver+0x2c0>)
     424:	f001 fc94 	bl	1d50 <diag>
    if (node->data_base.item_count == NUMB_OF_ENT){
     428:	f894 3464 	ldrb.w	r3, [r4, #1124]	; 0x464
     42c:	2b28      	cmp	r3, #40	; 0x28
     42e:	d017      	beq.n	460 <receiver+0x1e8>
						DEBUG_PRINT("\r\nCreate rec third if");
     430:	4842      	ldr	r0, [pc, #264]	; (53c <receiver+0x2c4>)
     432:	f001 fc8d 	bl	1d50 <diag>
						status = (uint8_t) SUCCESS;
     436:	2601      	movs	r6, #1
					DEBUG_PRINT("\r\nCreate rec out if");
     438:	4841      	ldr	r0, [pc, #260]	; (540 <receiver+0x2c8>)
     43a:	f001 fc89 	bl	1d50 <diag>
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     43e:	7822      	ldrb	r2, [r4, #0]
     440:	8860      	ldrh	r0, [r4, #2]
     442:	4c40      	ldr	r4, [pc, #256]	; (544 <receiver+0x2cc>)
     444:	7969      	ldrb	r1, [r5, #5]
     446:	79eb      	ldrb	r3, [r5, #7]
     448:	9402      	str	r4, [sp, #8]
     44a:	2400      	movs	r4, #0
     44c:	e9cd 6400 	strd	r6, r4, [sp]
     450:	f7ff fee9 	bl	226 <assemble_response_message>
     454:	4604      	mov	r4, r0
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     456:	483c      	ldr	r0, [pc, #240]	; (548 <receiver+0x2d0>)
     458:	f001 fc7a 	bl	1d50 <diag>
					call sender(response_message_2, done_case);
     45c:	4621      	mov	r1, r4
     45e:	e75e      	b.n	31e <receiver+0xa6>
						DEBUG_PRINT("\r\nCreate rec third else");
     460:	483a      	ldr	r0, [pc, #232]	; (54c <receiver+0x2d4>)
     462:	f001 fc75 	bl	1d50 <diag>
						status = (uint8_t) DB_FULL;
     466:	e7e7      	b.n	438 <receiver+0x1c0>
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     468:	201e      	movs	r0, #30
     46a:	f001 fbf7 	bl	1c5c <__pi_malloc>
				DEBUG_PRINT("\r\nDelete rec");/*
     46e:	4838      	ldr	r0, [pc, #224]	; (550 <receiver+0x2d8>)
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     470:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("\r\nDelete rec");/*
     472:	f001 fc6d 	bl	1d50 <diag>
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     476:	7820      	ldrb	r0, [r4, #0]
     478:	79eb      	ldrb	r3, [r5, #7]
     47a:	8862      	ldrh	r2, [r4, #2]
     47c:	8869      	ldrh	r1, [r5, #2]
     47e:	9000      	str	r0, [sp, #0]
     480:	4834      	ldr	r0, [pc, #208]	; (554 <receiver+0x2dc>)
     482:	f001 fc65 	bl	1d50 <diag>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     486:	886a      	ldrh	r2, [r5, #2]
     488:	8863      	ldrh	r3, [r4, #2]
     48a:	429a      	cmp	r2, r3
     48c:	d103      	bne.n	496 <receiver+0x21e>
     48e:	79ea      	ldrb	r2, [r5, #7]
     490:	7823      	ldrb	r3, [r4, #0]
     492:	429a      	cmp	r2, r3
     494:	d001      	beq.n	49a <receiver+0x222>
					DEBUG_PRINT("\r\nDelete rec first if");
     496:	4830      	ldr	r0, [pc, #192]	; (558 <receiver+0x2e0>)
     498:	e7bc      	b.n	414 <receiver+0x19c>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     49a:	7a2b      	ldrb	r3, [r5, #8]
     49c:	2b28      	cmp	r3, #40	; 0x28
     49e:	f63f af5e 	bhi.w	35e <receiver+0xe6>
					DEBUG_PRINT("\r\nDelete rec second if");
     4a2:	482e      	ldr	r0, [pc, #184]	; (55c <receiver+0x2e4>)
     4a4:	f001 fc54 	bl	1d50 <diag>
					if (delete_record(node_db, delete_record_message->record_index)){
     4a8:	4620      	mov	r0, r4
     4aa:	7a29      	ldrb	r1, [r5, #8]
     4ac:	f7ff fe9a 	bl	1e4 <delete_record>
     4b0:	b198      	cbz	r0, 4da <receiver+0x262>
						DEBUG_PRINT("\r\nDelete rec third if");
     4b2:	482b      	ldr	r0, [pc, #172]	; (560 <receiver+0x2e8>)
     4b4:	f001 fc4c 	bl	1d50 <diag>
						status = (uint8_t) SUCCESS;
     4b8:	2601      	movs	r6, #1
					DEBUG_PRINT("\r\nDelete assemble le response");
     4ba:	482a      	ldr	r0, [pc, #168]	; (564 <receiver+0x2ec>)
     4bc:	f001 fc48 	bl	1d50 <diag>
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4c0:	7822      	ldrb	r2, [r4, #0]
     4c2:	8860      	ldrh	r0, [r4, #2]
     4c4:	4c1f      	ldr	r4, [pc, #124]	; (544 <receiver+0x2cc>)
     4c6:	79eb      	ldrb	r3, [r5, #7]
     4c8:	7969      	ldrb	r1, [r5, #5]
     4ca:	9402      	str	r4, [sp, #8]
     4cc:	2400      	movs	r4, #0
     4ce:	e9cd 6400 	strd	r6, r4, [sp]
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4d2:	f7ff fea8 	bl	226 <assemble_response_message>
     4d6:	4601      	mov	r1, r0
     4d8:	e721      	b.n	31e <receiver+0xa6>
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4da:	4823      	ldr	r0, [pc, #140]	; (568 <receiver+0x2f0>)
     4dc:	f001 fc38 	bl	1d50 <diag>
     4e0:	e7eb      	b.n	4ba <receiver+0x242>
     4e2:	bf00      	nop
     4e4:	200006d4 	ldrdcs	r0, [r0], -r4
     4e8:	00004ad4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
     4ec:	20000000 	andcs	r0, r0, r0
     4f0:	2000064c 	andcs	r0, r0, ip, asr #12
     4f4:	00004ae2 	andeq	r4, r0, r2, ror #21
     4f8:	00004af0 	strdeq	r4, [r0], -r0
     4fc:	20000650 	andcs	r0, r0, r0, asr r6
     500:	00004afe 	strdeq	r4, [r0], -lr
     504:	00004b08 	andeq	r4, r0, r8, lsl #22
     508:	00004b16 	andeq	r4, r0, r6, lsl fp
     50c:	000000c9 	andeq	r0, r0, r9, asr #1
     510:	00004d08 	andeq	r4, r0, r8, lsl #26
     514:	00004d17 	andeq	r4, r0, r7, lsl sp
     518:	00004d24 	andeq	r4, r0, r4, lsr #26
     51c:	00004d35 	andeq	r4, r0, r5, lsr sp
     520:	00004d53 	andeq	r4, r0, r3, asr sp
     524:	00004d7a 	andeq	r4, r0, sl, ror sp
     528:	00004da2 	andeq	r4, r0, r2, lsr #27
     52c:	00004dc9 	andeq	r4, r0, r9, asr #27
     530:	00004b2a 	andeq	r4, r0, sl, lsr #22
     534:	00004b40 	andeq	r4, r0, r0, asr #22
     538:	00004b6c 	andeq	r4, r0, ip, ror #22
     53c:	00004b83 	andeq	r4, r0, r3, lsl #23
     540:	00004bb1 			; <UNDEFINED> instruction: 0x00004bb1
     544:	20000689 	andcs	r0, r0, r9, lsl #13
     548:	00004bc5 	andeq	r4, r0, r5, asr #23
     54c:	00004b99 	muleq	r0, r9, fp
     550:	00004be4 	andeq	r4, r0, r4, ror #23
     554:	00004bf1 	strdeq	r4, [r0], -r1
     558:	00004c43 	andeq	r4, r0, r3, asr #24
     55c:	00004c59 	andeq	r4, r0, r9, asr ip
     560:	00004c70 	andeq	r4, r0, r0, ror ip
     564:	00004c9d 	muleq	r0, sp, ip
     568:	00004c86 	andeq	r4, r0, r6, lsl #25
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     56c:	201e      	movs	r0, #30
     56e:	f001 fb75 	bl	1c5c <__pi_malloc>
				DEBUG_PRINT("\r\nretrieve rec");
     572:	483e      	ldr	r0, [pc, #248]	; (66c <receiver+0x3f4>)
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     574:	f8d5 8000 	ldr.w	r8, [r5]
				DEBUG_PRINT("\r\nretrieve rec");
     578:	f001 fbea 	bl	1d50 <diag>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     57c:	2300      	movs	r3, #0
     57e:	881a      	ldrh	r2, [r3, #0]
     580:	8863      	ldrh	r3, [r4, #2]
     582:	429a      	cmp	r2, r3
     584:	f47f aeeb 	bne.w	35e <receiver+0xe6>
     588:	2300      	movs	r3, #0
     58a:	795a      	ldrb	r2, [r3, #5]
     58c:	7823      	ldrb	r3, [r4, #0]
     58e:	429a      	cmp	r2, r3
     590:	f47f aee5 	bne.w	35e <receiver+0xe6>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     594:	f898 5008 	ldrb.w	r5, [r8, #8]
     598:	2d28      	cmp	r5, #40	; 0x28
     59a:	f63f aee0 	bhi.w	35e <receiver+0xe6>
    return node->data_base.item_array[index];
     59e:	231c      	movs	r3, #28
     5a0:	fb03 4505 	mla	r5, r3, r5, r4
     5a4:	ae0b      	add	r6, sp, #44	; 0x2c
     5a6:	3504      	adds	r5, #4
     5a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     5aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     5ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b0:	af0b      	add	r7, sp, #44	; 0x2c
     5b2:	ad04      	add	r5, sp, #16
    return node->data_base.item_array[index];
     5b4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     5ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     5bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     5c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     5c4:	7822      	ldrb	r2, [r4, #0]
     5c6:	8860      	ldrh	r0, [r4, #2]
     5c8:	f10d 0411 	add.w	r4, sp, #17
     5cc:	2500      	movs	r5, #0
     5ce:	f898 3007 	ldrb.w	r3, [r8, #7]
     5d2:	f898 1005 	ldrb.w	r1, [r8, #5]
     5d6:	9402      	str	r4, [sp, #8]
     5d8:	2401      	movs	r4, #1
     5da:	e9cd 4500 	strd	r4, r5, [sp]
     5de:	e778      	b.n	4d2 <receiver+0x25a>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5e0:	682b      	ldr	r3, [r5, #0]
				DEBUG_PRINT("\r\nResponse");
     5e2:	4823      	ldr	r0, [pc, #140]	; (670 <receiver+0x3f8>)
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5e4:	3302      	adds	r3, #2
     5e6:	603b      	str	r3, [r7, #0]
				DEBUG_PRINT("\r\nResponse");
     5e8:	f001 fbb2 	bl	1d50 <diag>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5ec:	683b      	ldr	r3, [r7, #0]
     5ee:	8862      	ldrh	r2, [r4, #2]
     5f0:	8819      	ldrh	r1, [r3, #0]
     5f2:	4291      	cmp	r1, r2
     5f4:	f47f aeb3 	bne.w	35e <receiver+0xe6>
     5f8:	795a      	ldrb	r2, [r3, #5]
     5fa:	7823      	ldrb	r3, [r4, #0]
     5fc:	429a      	cmp	r2, r3
     5fe:	f47f aeae 	bne.w	35e <receiver+0xe6>
				if(!response_flag){
     602:	481c      	ldr	r0, [pc, #112]	; (674 <receiver+0x3fc>)
     604:	8803      	ldrh	r3, [r0, #0]
     606:	b91b      	cbnz	r3, 610 <receiver+0x398>
					response_flag=1;
     608:	2301      	movs	r3, #1
     60a:	8003      	strh	r3, [r0, #0]
					trigger(&response_flag);
     60c:	f001 f9ca 	bl	19a4 <__pi_trigger>
				switch(response_message_5->status){
     610:	683a      	ldr	r2, [r7, #0]
     612:	7993      	ldrb	r3, [r2, #6]
     614:	3b01      	subs	r3, #1
     616:	2b03      	cmp	r3, #3
     618:	f63f aea1 	bhi.w	35e <receiver+0xe6>
     61c:	e8df f003 	tbb	[pc, r3]
     620:	1c1a1802 	ldcne	8, cr1, [sl], {2}
						if (response_checker[0] == response_message_5->request_number){
     624:	4b14      	ldr	r3, [pc, #80]	; (678 <receiver+0x400>)
     626:	78d2      	ldrb	r2, [r2, #3]
     628:	6819      	ldr	r1, [r3, #0]
     62a:	4291      	cmp	r1, r2
     62c:	f47f ae97 	bne.w	35e <receiver+0xe6>
							switch(response_checker[1]){
     630:	685b      	ldr	r3, [r3, #4]
     632:	2b03      	cmp	r3, #3
     634:	d008      	beq.n	648 <receiver+0x3d0>
     636:	2b04      	cmp	r3, #4
     638:	d008      	beq.n	64c <receiver+0x3d4>
     63a:	2b02      	cmp	r3, #2
     63c:	f47f ae8f 	bne.w	35e <receiver+0xe6>
									proceed response_1_create;
     640:	2003      	movs	r0, #3
						proceed response_2;
     642:	f001 f98b 	bl	195c <proceed>
						break;
     646:	e68a      	b.n	35e <receiver+0xe6>
									proceed response_1_delete;
     648:	2004      	movs	r0, #4
     64a:	e7fa      	b.n	642 <receiver+0x3ca>
									proceed response_1_retrieve;
     64c:	2005      	movs	r0, #5
     64e:	e7f8      	b.n	642 <receiver+0x3ca>
						proceed response_2;
     650:	2006      	movs	r0, #6
     652:	e7f6      	b.n	642 <receiver+0x3ca>
						proceed response_3;
     654:	2007      	movs	r0, #7
     656:	e7f4      	b.n	642 <receiver+0x3ca>
						proceed response_4;
     658:	2008      	movs	r0, #8
     65a:	e7f2      	b.n	642 <receiver+0x3ca>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     65c:	4631      	mov	r1, r6
     65e:	4807      	ldr	r0, [pc, #28]	; (67c <receiver+0x404>)
     660:	f001 fb76 	bl	1d50 <diag>
				break;
     664:	e67b      	b.n	35e <receiver+0xe6>
}
     666:	f001 f8f1 	bl	184c <__pi_badstate>
     66a:	e6c3      	b.n	3f4 <receiver+0x17c>
     66c:	00004cbb 			; <UNDEFINED> instruction: 0x00004cbb
     670:	00004cca 	andeq	r4, r0, sl, asr #25
     674:	20000548 	andcs	r0, r0, r8, asr #10
     678:	20000644 	andcs	r0, r0, r4, asr #12
     67c:	00004cd5 	ldrdeq	r4, [r0], -r5

00000680 <root>:

fsm root {
     680:	b5f0      	push	{r4, r5, r6, r7, lr}
     682:	b085      	sub	sp, #20
     684:	2820      	cmp	r0, #32
     686:	f200 829d 	bhi.w	bc4 <root+0x544>
     68a:	e8df f010 	tbh	[pc, r0, lsl #1]
     68e:	00480021 	subeq	r0, r8, r1, lsr #32
     692:	00770055 	rsbseq	r0, r7, r5, asr r0
     696:	008c007b 	addeq	r0, ip, fp, ror r0
     69a:	00b30090 	umlalseq	r0, r3, r0, r0
     69e:	00cb00be 	strheq	r0, [fp], #14
     6a2:	013b0104 	teqeq	fp, r4, lsl #2
     6a6:	0153014f 	cmpeq	r3, pc, asr #2
     6aa:	01690165 	cmneq	r9, r5, ror #2
     6ae:	0196016e 	orrseq	r0, r6, lr, ror #2
     6b2:	01ac019a 			; <UNDEFINED> instruction: 0x01ac019a
     6b6:	01c101b0 	strheq	r0, [r1, #16]
     6ba:	01e901e5 	mvneq	r0, r5, ror #3
     6be:	01ff01fb 	ldrsheq	r0, [pc, #27]	; 6e1 <root+0x61>
     6c2:	02400210 	subeq	r0, r0, #16, 4
     6c6:	02510244 	subseq	r0, r1, #68, 4	; 0x40000004
     6ca:	028a0258 	addeq	r0, sl, #88, 4	; 0x80000005
     6ce:	f2400291 	vqsub.s8	d16, d16, d1

	
	state initialize_node:
		// cast node_db to struct node * and malloc to it the size of a struct node
		// setup node structure
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     6d2:	4084      	lsls	r4, r0
     6d4:	f001 fac2 	bl	1c5c <__pi_malloc>
     6d8:	4c77      	ldr	r4, [pc, #476]	; (8b8 <root+0x238>)
     6da:	6020      	str	r0, [r4, #0]

		// Bool condition, check for failure
		init_node(node_db);
     6dc:	f7ff fd5c 	bl	198 <init_node>

		phys_cc1350(0, MAX_PKT_LEN);
     6e0:	21fa      	movs	r1, #250	; 0xfa
     6e2:	2000      	movs	r0, #0
     6e4:	f002 fc54 	bl	2f90 <phys_cc1350>
				  the null plugin offers only a single session per physical interface. This session is explicitly 
				  setup (opened) through tcv_open().

			See docs section 3 pg11/20 for the struct of this plugin
		*/
		tcv_plug (0, &plug_null);
     6e8:	4974      	ldr	r1, [pc, #464]	; (8bc <root+0x23c>)
     6ea:	2000      	movs	r0, #0
     6ec:	f001 fd04 	bl	20f8 <tcv_plug>
		   the abbreviation "sfd"). A return of -1 means an Error has occured.

		   NOTE: the maxmium number of sessions that can be open at any time is default 8. We can redfine this in
		   options.h by setting TCV_MAX_DESC to something higher.
		*/
		sfd = tcv_open (WNONE, 0, 0);
     6f0:	2200      	movs	r2, #0
     6f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
     6f6:	4611      	mov	r1, r2
     6f8:	f001 fc9e 	bl	2038 <tcv_open>
     6fc:	4a70      	ldr	r2, [pc, #448]	; (8c0 <root+0x240>)

		if (sfd < 0) {
     6fe:	2800      	cmp	r0, #0
		sfd = tcv_open (WNONE, 0, 0);
     700:	6010      	str	r0, [r2, #0]
		if (sfd < 0) {
     702:	da04      	bge.n	70e <root+0x8e>
			diag("Cannot open tcv interface");
     704:	486f      	ldr	r0, [pc, #444]	; (8c4 <root+0x244>)
     706:	f001 fb23 	bl	1d50 <diag>
			halt();
     70a:	f000 ffed 	bl	16e8 <halt>

		  This function is referenced only twice in the docs. To my understainding, it determines if the
		  sfd is interpreted as a plugin id or a physical module. 
		
		*/
		tcv_control(sfd, PHYSOPT_ON, NULL);
     70e:	2104      	movs	r1, #4
     710:	2200      	movs	r2, #0
     712:	f001 fdb7 	bl	2284 <tcv_control>

		runfsm receiver(node_db);
     716:	6821      	ldr	r1, [r4, #0]
     718:	486b      	ldr	r0, [pc, #428]	; (8c8 <root+0x248>)
     71a:	f001 faf3 	bl	1d04 <__pi_fork>

	state menu:
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     71e:	2028      	movs	r0, #40	; 0x28
     720:	4b65      	ldr	r3, [pc, #404]	; (8b8 <root+0x238>)
     722:	6819      	ldr	r1, [r3, #0]
     724:	780b      	ldrb	r3, [r1, #0]
     726:	884a      	ldrh	r2, [r1, #2]
     728:	9001      	str	r0, [sp, #4]
     72a:	f891 1481 	ldrb.w	r1, [r1, #1153]	; 0x481
     72e:	2001      	movs	r0, #1
     730:	9100      	str	r1, [sp, #0]
     732:	4966      	ldr	r1, [pc, #408]	; (8cc <root+0x24c>)
     734:	f002 f822 	bl	277c <ser_outf>

	state get_choice:
		ser_inf(get_choice, "%c", &CHOICE);
     738:	4c65      	ldr	r4, [pc, #404]	; (8d0 <root+0x250>)
     73a:	2002      	movs	r0, #2
     73c:	4622      	mov	r2, r4
     73e:	4965      	ldr	r1, [pc, #404]	; (8d4 <root+0x254>)
     740:	f002 f846 	bl	27d0 <ser_inf>
		switch(CHOICE) {
     744:	7823      	ldrb	r3, [r4, #0]
     746:	2b53      	cmp	r3, #83	; 0x53
     748:	d80f      	bhi.n	76a <root+0xea>
     74a:	2b42      	cmp	r3, #66	; 0x42
     74c:	d911      	bls.n	772 <root+0xf2>
     74e:	3b43      	subs	r3, #67	; 0x43
     750:	2b10      	cmp	r3, #16
     752:	d80e      	bhi.n	772 <root+0xf2>
     754:	e8df f003 	tbb	[pc, r3]
     758:	838d8785 	orrhi	r8, sp, #34865152	; 0x2140000
     75c:	0d0d0d0f 	stceq	13, cr0, [sp, #-60]	; 0xffffffc4
     760:	810d0d0d 	tsthi	sp, sp, lsl #26
     764:	890d0d0d 	stmdbhi	sp, {r0, r2, r3, r8, sl, fp}
     768:	3b63008b 	blcc	18c099c <__ccfg+0x18a09f4>
     76c:	b2da      	uxtb	r2, r3
     76e:	2a10      	cmp	r2, #16
     770:	d9ee      	bls.n	750 <root+0xd0>
			case 'e':
			case 'E':
				proceed del_local;
				break;
			default:
				proceed menu;
     772:	2001      	movs	r0, #1
     774:	e000      	b.n	778 <root+0xf8>
				proceed get_new_group_id;
     776:	2003      	movs	r0, #3
				proceed menu;
     778:	f001 f8f0 	bl	195c <proceed>
				break;
		}

	state get_new_group_id:
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     77c:	2003      	movs	r0, #3
     77e:	4956      	ldr	r1, [pc, #344]	; (8d8 <root+0x258>)
     780:	f001 ff8a 	bl	2698 <ser_out>

	/*NOTE: Do we need to add new checks here? what are the limitations on group IDs*/
	state new_group_id:
		uint16_t NEW_NODE_GID;
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     784:	f10d 020e 	add.w	r2, sp, #14
     788:	4954      	ldr	r1, [pc, #336]	; (8dc <root+0x25c>)
     78a:	2004      	movs	r0, #4
     78c:	f002 f820 	bl	27d0 <ser_inf>
		
		DEBUG_PRINT("setting node group ID");
     790:	4853      	ldr	r0, [pc, #332]	; (8e0 <root+0x260>)
     792:	f001 fadd 	bl	1d50 <diag>

		if (!set_node_gid(node_db, NEW_NODE_GID)){
     796:	4b48      	ldr	r3, [pc, #288]	; (8b8 <root+0x238>)
    node->gid = gid; 
     798:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     79c:	681b      	ldr	r3, [r3, #0]
			DEBUG_PRINT("setting node group ID failed");
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};

		proceed menu;
     79e:	2001      	movs	r0, #1
    node->gid = gid; 
     7a0:	805a      	strh	r2, [r3, #2]
		proceed menu;
     7a2:	f001 f8db 	bl	195c <proceed>

	state get_new_node_id:
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     7a6:	2005      	movs	r0, #5
     7a8:	494e      	ldr	r1, [pc, #312]	; (8e4 <root+0x264>)
     7aa:	f001 ff75 	bl	2698 <ser_out>
	state new_node_id:
		uint8_t NEW_NODE_ID;
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);

		// Bool condition, check for failure
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7ae:	4d42      	ldr	r5, [pc, #264]	; (8b8 <root+0x238>)
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     7b0:	494a      	ldr	r1, [pc, #296]	; (8dc <root+0x25c>)
     7b2:	f10d 020e 	add.w	r2, sp, #14
     7b6:	2006      	movs	r0, #6
     7b8:	f002 f80a 	bl	27d0 <ser_inf>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7bc:	682a      	ldr	r2, [r5, #0]
     7be:	f89d 100e 	ldrb.w	r1, [sp, #14]
    node->id = id;
     7c2:	7011      	strb	r1, [r2, #0]
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};
		
		// Check to see if the number given is within range.
		if((node_db->id < 1) || (node_db->id > 25)){
     7c4:	682a      	ldr	r2, [r5, #0]
     7c6:	7812      	ldrb	r2, [r2, #0]
     7c8:	3a01      	subs	r2, #1
     7ca:	2a18      	cmp	r2, #24
     7cc:	d907      	bls.n	7de <root+0x15e>
			strncpy(reason, "Out of Range", 50);
     7ce:	4846      	ldr	r0, [pc, #280]	; (8e8 <root+0x268>)
     7d0:	2232      	movs	r2, #50	; 0x32
     7d2:	4946      	ldr	r1, [pc, #280]	; (8ec <root+0x26c>)
     7d4:	f001 f94f 	bl	1a76 <__pi_strncpy>
			proceed invalid_node_id;
     7d8:	2007      	movs	r0, #7
     7da:	f001 f8bf 	bl	195c <proceed>
fsm root {
     7de:	2400      	movs	r4, #0
		};
		
		// Check to see if the number give is unique
		for(int i = 0; i < node_db->index; i++){
			if(node_db->id == node_db->nnodes[i]){
				strncpy(reason, "ID is already in use", 50);
     7e0:	4e43      	ldr	r6, [pc, #268]	; (8f0 <root+0x270>)
     7e2:	4f41      	ldr	r7, [pc, #260]	; (8e8 <root+0x268>)
		for(int i = 0; i < node_db->index; i++){
     7e4:	682b      	ldr	r3, [r5, #0]
     7e6:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
     7ea:	42a2      	cmp	r2, r4
     7ec:	dc43      	bgt.n	876 <root+0x1f6>
				proceed invalid_node_id;
			};
		};
		
		proceed menu;
     7ee:	2001      	movs	r0, #1
     7f0:	f001 f8b4 	bl	195c <proceed>

	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state invalid_node_id:
		// NOTE: node_db->id will not be set if they provide an invalid reason, so we can't do this like this
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7f4:	4b30      	ldr	r3, [pc, #192]	; (8b8 <root+0x238>)
     7f6:	2007      	movs	r0, #7
     7f8:	681a      	ldr	r2, [r3, #0]
     7fa:	493e      	ldr	r1, [pc, #248]	; (8f4 <root+0x274>)
     7fc:	4b3a      	ldr	r3, [pc, #232]	; (8e8 <root+0x268>)
     7fe:	7812      	ldrb	r2, [r2, #0]
     800:	f001 ffbc 	bl	277c <ser_outf>
		proceed get_new_node_id;
     804:	2005      	movs	r0, #5
     806:	f001 f8a9 	bl	195c <proceed>
		   
	  Then prints the list of neighbours
	
	*/
	state clear_neighbour_array:
		if (!clear_node_neighbour_array(node_db)){
     80a:	4b2b      	ldr	r3, [pc, #172]	; (8b8 <root+0x238>)
     80c:	6818      	ldr	r0, [r3, #0]
     80e:	f7ff fcde 	bl	1ce <clear_node_neighbour_array>
     812:	b938      	cbnz	r0, 824 <root+0x1a4>
			strncpy(reason, "Error Clearing Node Array", 50);
     814:	4834      	ldr	r0, [pc, #208]	; (8e8 <root+0x268>)
     816:	2232      	movs	r2, #50	; 0x32
     818:	4937      	ldr	r1, [pc, #220]	; (8f8 <root+0x278>)
     81a:	f001 f92c 	bl	1a76 <__pi_strncpy>
			proceed error;
     81e:	2020      	movs	r0, #32
     820:	f001 f89c 	bl	195c <proceed>
		};

	state find_proto_start:

		struct ResponseMessage *request_packet;
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     824:	201e      	movs	r0, #30
     826:	f001 fa19 	bl	1c5c <__pi_malloc>

		request_packet->gid = node_db->gid;
		request_packet->tpe = DISCOVERY_REQUEST;
     82a:	2500      	movs	r5, #0
		request_packet->gid = node_db->gid;
     82c:	4e22      	ldr	r6, [pc, #136]	; (8b8 <root+0x238>)
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     82e:	4604      	mov	r4, r0
		request_packet->gid = node_db->gid;
     830:	6833      	ldr	r3, [r6, #0]
     832:	885b      	ldrh	r3, [r3, #2]
		request_packet->tpe = DISCOVERY_REQUEST;
     834:	7085      	strb	r5, [r0, #2]
		request_packet->gid = node_db->gid;
     836:	8003      	strh	r3, [r0, #0]
		request_packet->request_number = generate_request_num();
     838:	f7ff fcc0 	bl	1bc <generate_request_num>
     83c:	70e0      	strb	r0, [r4, #3]
		request_packet->sender_id = node_db->id;
     83e:	6833      	ldr	r3, [r6, #0]
		request_packet->receiver_id=0;

		call sender(request_packet, wait_discovery);
     840:	4621      	mov	r1, r4
		request_packet->sender_id = node_db->id;
     842:	781b      	ldrb	r3, [r3, #0]
		call sender(request_packet, wait_discovery);
     844:	482d      	ldr	r0, [pc, #180]	; (8fc <root+0x27c>)
		request_packet->sender_id = node_db->id;
     846:	7123      	strb	r3, [r4, #4]
		request_packet->receiver_id=0;
     848:	7165      	strb	r5, [r4, #5]
		call sender(request_packet, wait_discovery);
     84a:	f001 fa5b 	bl	1d04 <__pi_fork>
     84e:	210a      	movs	r1, #10
     850:	f001 f8c2 	bl	19d8 <__pi_join>
     854:	b1f8      	cbz	r0, 896 <root+0x216>
	
	state wait_discovery:
		if (discovery_wait_flag == 0){
			discovery_wait_flag=1;
			delay(3000, find_proto_start);
			release;
     856:	f000 fe1b 	bl	1490 <__pi_release>
				proceed get_new_node_id;
     85a:	2005      	movs	r0, #5
     85c:	e78c      	b.n	778 <root+0xf8>
				proceed clear_neighbour_array;
     85e:	2008      	movs	r0, #8
     860:	e78a      	b.n	778 <root+0xf8>
				proceed create_proto_start;
     862:	200c      	movs	r0, #12
     864:	e788      	b.n	778 <root+0xf8>
				proceed start_delete_proto;
     866:	2011      	movs	r0, #17
     868:	e786      	b.n	778 <root+0xf8>
				proceed start_retrieve_proto;
     86a:	2016      	movs	r0, #22
     86c:	e784      	b.n	778 <root+0xf8>
				proceed display_db;
     86e:	201b      	movs	r0, #27
     870:	e782      	b.n	778 <root+0xf8>
				proceed del_local;
     872:	201d      	movs	r0, #29
     874:	e780      	b.n	778 <root+0xf8>
			if(node_db->id == node_db->nnodes[i]){
     876:	1919      	adds	r1, r3, r4
     878:	781a      	ldrb	r2, [r3, #0]
     87a:	f891 3468 	ldrb.w	r3, [r1, #1128]	; 0x468
     87e:	429a      	cmp	r2, r3
     880:	d107      	bne.n	892 <root+0x212>
				strncpy(reason, "ID is already in use", 50);
     882:	4638      	mov	r0, r7
     884:	2232      	movs	r2, #50	; 0x32
     886:	4631      	mov	r1, r6
     888:	f001 f8f5 	bl	1a76 <__pi_strncpy>
				proceed invalid_node_id;
     88c:	2007      	movs	r0, #7
     88e:	f001 f865 	bl	195c <proceed>
		for(int i = 0; i < node_db->index; i++){
     892:	3401      	adds	r4, #1
     894:	e7a6      	b.n	7e4 <root+0x164>
		if (discovery_wait_flag == 0){
     896:	4b1a      	ldr	r3, [pc, #104]	; (900 <root+0x280>)
     898:	681a      	ldr	r2, [r3, #0]
     89a:	b93a      	cbnz	r2, 8ac <root+0x22c>
			discovery_wait_flag=1;
     89c:	2201      	movs	r2, #1
			delay(3000, find_proto_start);
     89e:	2109      	movs	r1, #9
			discovery_wait_flag=1;
     8a0:	601a      	str	r2, [r3, #0]
			delay(3000, find_proto_start);
     8a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
     8a6:	f001 f8a9 	bl	19fc <delay>
     8aa:	e7d4      	b.n	856 <root+0x1d6>
		}
		if (discovery_wait_flag == 1){
     8ac:	2a01      	cmp	r2, #1
     8ae:	d129      	bne.n	904 <root+0x284>
			discovery_wait_flag=0;
     8b0:	2200      	movs	r2, #0
			delay(3000, display_neighbour_nodes);
     8b2:	210b      	movs	r1, #11
			discovery_wait_flag=0;
     8b4:	601a      	str	r2, [r3, #0]
			delay(3000, display_neighbour_nodes);
     8b6:	e7f4      	b.n	8a2 <root+0x222>
     8b8:	200006a0 	andcs	r0, r0, r0, lsr #13
     8bc:	00005ca0 	andeq	r5, r0, r0, lsr #25
     8c0:	20000000 	andcs	r0, r0, r0
     8c4:	00004dfe 	strdeq	r4, [r0], -lr
     8c8:	00000279 	andeq	r0, r0, r9, ror r2
     8cc:	00004e18 	andeq	r4, r0, r8, lsl lr
     8d0:	2000069d 	mulcs	r0, sp, r6
     8d4:	00004f04 	andeq	r4, r0, r4, lsl #30
     8d8:	00004f07 	andeq	r4, r0, r7, lsl #30
     8dc:	00004f28 	andeq	r4, r0, r8, lsr #30
     8e0:	00004f2b 	andeq	r4, r0, fp, lsr #30
     8e4:	00004f41 	andeq	r4, r0, r1, asr #30
     8e8:	20000654 	andcs	r0, r0, r4, asr r6
     8ec:	00004f74 	andeq	r4, r0, r4, ror pc
     8f0:	00004f81 	andeq	r4, r0, r1, lsl #31
     8f4:	00004f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
     8f8:	00004fc3 	andeq	r4, r0, r3, asr #31
     8fc:	000000c9 	andeq	r0, r0, r9, asr #1
     900:	20000540 	andcs	r0, r0, r0, asr #10
			release;
		}
	
	state display_neighbour_nodes:
		if(node_db->index == 0){
     904:	4db1      	ldr	r5, [pc, #708]	; (bcc <root+0x54c>)
     906:	682b      	ldr	r3, [r5, #0]
     908:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
     90c:	b913      	cbnz	r3, 914 <root+0x294>
			proceed menu;
     90e:	2001      	movs	r0, #1
     910:	f001 f824 	bl	195c <proceed>
fsm root {
     914:	2400      	movs	r4, #0
		}
		for (int i=0; i<node_db->index; i++) {
			if(i == 0){
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     916:	4eae      	ldr	r6, [pc, #696]	; (bd0 <root+0x550>)
			}
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     918:	4fae      	ldr	r7, [pc, #696]	; (bd4 <root+0x554>)
		for (int i=0; i<node_db->index; i++) {
     91a:	682b      	ldr	r3, [r5, #0]
     91c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
     920:	42a3      	cmp	r3, r4
     922:	f300 8116 	bgt.w	b52 <root+0x4d2>
		}
		proceed menu;
     926:	2001      	movs	r0, #1
     928:	f001 f818 	bl	195c <proceed>
		4) if no repsone is received, the node indicates this to the user through UART
		5) if a response is received, the node sends through UART the appropriate response message
	
	*/
	state create_proto_start:
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     92c:	200c      	movs	r0, #12
     92e:	49aa      	ldr	r1, [pc, #680]	; (bd8 <root+0x558>)
     930:	f001 feb2 	bl	2698 <ser_out>

	state get_id_for_create:
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     934:	4ca9      	ldr	r4, [pc, #676]	; (bdc <root+0x55c>)
     936:	200d      	movs	r0, #13
     938:	4622      	mov	r2, r4
     93a:	49a9      	ldr	r1, [pc, #676]	; (be0 <root+0x560>)
     93c:	f001 ff48 	bl	27d0 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     940:	7823      	ldrb	r3, [r4, #0]
     942:	3b01      	subs	r3, #1
     944:	2b18      	cmp	r3, #24
     946:	d907      	bls.n	958 <root+0x2d8>
			strncpy(reason, "Error: improper ID", 50);
     948:	48a6      	ldr	r0, [pc, #664]	; (be4 <root+0x564>)
     94a:	2232      	movs	r2, #50	; 0x32
     94c:	49a6      	ldr	r1, [pc, #664]	; (be8 <root+0x568>)
     94e:	f001 f892 	bl	1a76 <__pi_strncpy>
			proceed error;
     952:	2020      	movs	r0, #32
     954:	f001 f802 	bl	195c <proceed>
		};

	state ask_for_record_to_create:
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     958:	200e      	movs	r0, #14
     95a:	49a4      	ldr	r1, [pc, #656]	; (bec <root+0x56c>)
     95c:	f001 fe9c 	bl	2698 <ser_out>

	state get_record_to_create:
		ser_in(get_record_to_create, user_provided_record, 20);
     960:	2214      	movs	r2, #20
     962:	200f      	movs	r0, #15
     964:	49a2      	ldr	r1, [pc, #648]	; (bf0 <root+0x570>)
     966:	f001 fecd 	bl	2704 <ser_in>

	state init_create_record_message:

		struct ResponseMessage *create_message;
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     96a:	201e      	movs	r0, #30
     96c:	f001 f976 	bl	1c5c <__pi_malloc>
		create_message->gid = node_db->gid;
     970:	4d96      	ldr	r5, [pc, #600]	; (bcc <root+0x54c>)
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     972:	4604      	mov	r4, r0
		create_message->gid = node_db->gid;
     974:	682b      	ldr	r3, [r5, #0]
     976:	885b      	ldrh	r3, [r3, #2]
     978:	8003      	strh	r3, [r0, #0]
		create_message->tpe = CREATE_RECORD;
     97a:	2302      	movs	r3, #2
     97c:	7083      	strb	r3, [r0, #2]
		create_message->request_number = generate_request_num();
     97e:	f7ff fc1d 	bl	1bc <generate_request_num>
     982:	70e0      	strb	r0, [r4, #3]
		create_message->sender_id = node_db->id;
     984:	682b      	ldr	r3, [r5, #0]
		create_message->receiver_id = user_provided_receiver_id;
		strncpy(create_message->record, user_provided_record, 20);
     986:	2214      	movs	r2, #20
		create_message->sender_id = node_db->id;
     988:	781b      	ldrb	r3, [r3, #0]
		strncpy(create_message->record, user_provided_record, 20);
     98a:	4999      	ldr	r1, [pc, #612]	; (bf0 <root+0x570>)
		create_message->sender_id = node_db->id;
     98c:	7123      	strb	r3, [r4, #4]
		create_message->receiver_id = user_provided_receiver_id;
     98e:	4b93      	ldr	r3, [pc, #588]	; (bdc <root+0x55c>)
		strncpy(create_message->record, user_provided_record, 20);
     990:	f104 0008 	add.w	r0, r4, #8
		create_message->receiver_id = user_provided_receiver_id;
     994:	781b      	ldrb	r3, [r3, #0]
     996:	7163      	strb	r3, [r4, #5]
		strncpy(create_message->record, user_provided_record, 20);
     998:	f001 f86d 	bl	1a76 <__pi_strncpy>
		
		// Store create message type & request number for response message parsing
		response_checker[0] = create_message->request_number;
     99c:	78e2      	ldrb	r2, [r4, #3]
     99e:	4b95      	ldr	r3, [pc, #596]	; (bf4 <root+0x574>)
		response_checker[1] = create_message->tpe;

		call sender(create_message, wait);
     9a0:	4621      	mov	r1, r4
		response_checker[0] = create_message->request_number;
     9a2:	601a      	str	r2, [r3, #0]
		response_checker[1] = create_message->tpe;
     9a4:	78a2      	ldrb	r2, [r4, #2]
		call sender(create_message, wait);
     9a6:	4894      	ldr	r0, [pc, #592]	; (bf8 <root+0x578>)
		response_checker[1] = create_message->tpe;
     9a8:	605a      	str	r2, [r3, #4]
		call sender(create_message, wait);
     9aa:	f001 f9ab 	bl	1d04 <__pi_fork>
     9ae:	211e      	movs	r1, #30
     9b0:	f001 f812 	bl	19d8 <__pi_join>
     9b4:	2800      	cmp	r0, #0
     9b6:	f47f af4e 	bne.w	856 <root+0x1d6>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_delete_proto:
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     9ba:	2011      	movs	r0, #17
     9bc:	4986      	ldr	r1, [pc, #536]	; (bd8 <root+0x558>)
     9be:	f001 fe6b 	bl	2698 <ser_out>

	state get_id_for_delete:
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     9c2:	4c86      	ldr	r4, [pc, #536]	; (bdc <root+0x55c>)
     9c4:	2012      	movs	r0, #18
     9c6:	4622      	mov	r2, r4
     9c8:	4985      	ldr	r1, [pc, #532]	; (be0 <root+0x560>)
     9ca:	f001 ff01 	bl	27d0 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9ce:	7823      	ldrb	r3, [r4, #0]
     9d0:	3b01      	subs	r3, #1
     9d2:	2b18      	cmp	r3, #24
     9d4:	d907      	bls.n	9e6 <root+0x366>
			strncpy(reason, "Error: improper node ID", 50);
     9d6:	4883      	ldr	r0, [pc, #524]	; (be4 <root+0x564>)
     9d8:	2232      	movs	r2, #50	; 0x32
     9da:	4988      	ldr	r1, [pc, #544]	; (bfc <root+0x57c>)
     9dc:	f001 f84b 	bl	1a76 <__pi_strncpy>
			proceed error;
     9e0:	2020      	movs	r0, #32
     9e2:	f000 ffbb 	bl	195c <proceed>
		};

	state ask_for_record_index:
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9e6:	2013      	movs	r0, #19
     9e8:	4985      	ldr	r1, [pc, #532]	; (c00 <root+0x580>)
     9ea:	f001 fe55 	bl	2698 <ser_out>

	state get_index_for_delete:
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9ee:	4c85      	ldr	r4, [pc, #532]	; (c04 <root+0x584>)
     9f0:	2014      	movs	r0, #20
     9f2:	4622      	mov	r2, r4
     9f4:	497a      	ldr	r1, [pc, #488]	; (be0 <root+0x560>)
     9f6:	f001 feeb 	bl	27d0 <ser_inf>

		if (us_pr_in < 0 || us_pr_in > 40){
     9fa:	7823      	ldrb	r3, [r4, #0]
     9fc:	2b28      	cmp	r3, #40	; 0x28
     9fe:	d907      	bls.n	a10 <root+0x390>
			strncpy(reason, "Error: invalid index", 50);
     a00:	4878      	ldr	r0, [pc, #480]	; (be4 <root+0x564>)
     a02:	2232      	movs	r2, #50	; 0x32
     a04:	4980      	ldr	r1, [pc, #512]	; (c08 <root+0x588>)
     a06:	f001 f836 	bl	1a76 <__pi_strncpy>
			proceed error;
     a0a:	2020      	movs	r0, #32
     a0c:	f000 ffa6 	bl	195c <proceed>
		};

	state init_delete_record_message:

		struct ResponseMessage *delete_record;
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a10:	201e      	movs	r0, #30
     a12:	f001 f923 	bl	1c5c <__pi_malloc>
		delete_record->gid = node_db->gid;
     a16:	4d6d      	ldr	r5, [pc, #436]	; (bcc <root+0x54c>)
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a18:	4604      	mov	r4, r0
		delete_record->gid = node_db->gid;
     a1a:	682b      	ldr	r3, [r5, #0]
     a1c:	885b      	ldrh	r3, [r3, #2]
     a1e:	8003      	strh	r3, [r0, #0]
		delete_record->tpe = DELETE_RECORD;
     a20:	2303      	movs	r3, #3
     a22:	7083      	strb	r3, [r0, #2]
		delete_record->request_number = generate_request_num();
     a24:	f7ff fbca 	bl	1bc <generate_request_num>
     a28:	70e0      	strb	r0, [r4, #3]
		delete_record->sender_id = node_db->id;
     a2a:	682b      	ldr	r3, [r5, #0]

		// Store delete record message type & request number for response message parsing
		response_checker[0] = delete_record->request_number;
		response_checker[1] = delete_record->tpe;

		call sender(delete_record, wait);
     a2c:	4621      	mov	r1, r4
		delete_record->sender_id = node_db->id;
     a2e:	781b      	ldrb	r3, [r3, #0]
     a30:	7123      	strb	r3, [r4, #4]
		delete_record->receiver_id = user_provided_receiver_id;
     a32:	4b6a      	ldr	r3, [pc, #424]	; (bdc <root+0x55c>)
     a34:	781b      	ldrb	r3, [r3, #0]
     a36:	7163      	strb	r3, [r4, #5]
		delete_record->record_index = us_pr_in;
     a38:	4b72      	ldr	r3, [pc, #456]	; (c04 <root+0x584>)
     a3a:	781b      	ldrb	r3, [r3, #0]
     a3c:	7723      	strb	r3, [r4, #28]
		response_checker[0] = delete_record->request_number;
     a3e:	4b6d      	ldr	r3, [pc, #436]	; (bf4 <root+0x574>)
     a40:	6018      	str	r0, [r3, #0]
		response_checker[1] = delete_record->tpe;
     a42:	78a2      	ldrb	r2, [r4, #2]
		call sender(delete_record, wait);
     a44:	486c      	ldr	r0, [pc, #432]	; (bf8 <root+0x578>)
		response_checker[1] = delete_record->tpe;
     a46:	605a      	str	r2, [r3, #4]
		call sender(delete_record, wait);
     a48:	f001 f95c 	bl	1d04 <__pi_fork>
     a4c:	211e      	movs	r1, #30
     a4e:	f000 ffc3 	bl	19d8 <__pi_join>
     a52:	2800      	cmp	r0, #0
     a54:	f47f aeff 	bne.w	856 <root+0x1d6>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_retrieve_proto:
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a58:	2016      	movs	r0, #22
     a5a:	495f      	ldr	r1, [pc, #380]	; (bd8 <root+0x558>)
     a5c:	f001 fe1c 	bl	2698 <ser_out>

	state get_id_for_retrieve:
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a60:	4c6a      	ldr	r4, [pc, #424]	; (c0c <root+0x58c>)
     a62:	2017      	movs	r0, #23
     a64:	4622      	mov	r2, r4
     a66:	495e      	ldr	r1, [pc, #376]	; (be0 <root+0x560>)
     a68:	f001 feb2 	bl	27d0 <ser_inf>

		if (get_id < 1 || get_id > 25){
     a6c:	7823      	ldrb	r3, [r4, #0]
     a6e:	3b01      	subs	r3, #1
     a70:	2b18      	cmp	r3, #24
     a72:	d907      	bls.n	a84 <root+0x404>
			strncpy(reason, "Error: improper node ID", 50);
     a74:	485b      	ldr	r0, [pc, #364]	; (be4 <root+0x564>)
     a76:	2232      	movs	r2, #50	; 0x32
     a78:	4960      	ldr	r1, [pc, #384]	; (bfc <root+0x57c>)
     a7a:	f000 fffc 	bl	1a76 <__pi_strncpy>
			proceed error;
     a7e:	2020      	movs	r0, #32
     a80:	f000 ff6c 	bl	195c <proceed>
		};

	state ask_for_record_retrieve_index:
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a84:	2018      	movs	r0, #24
     a86:	495e      	ldr	r1, [pc, #376]	; (c00 <root+0x580>)
     a88:	f001 fe06 	bl	2698 <ser_out>

	state get_index_for_retrieve:
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a8c:	4c60      	ldr	r4, [pc, #384]	; (c10 <root+0x590>)
     a8e:	2019      	movs	r0, #25
     a90:	4622      	mov	r2, r4
     a92:	4960      	ldr	r1, [pc, #384]	; (c14 <root+0x594>)
     a94:	f001 fe9c 	bl	27d0 <ser_inf>

		if (beg_for_index < 0 || beg_for_index > 40){
     a98:	7823      	ldrb	r3, [r4, #0]
     a9a:	2b28      	cmp	r3, #40	; 0x28
     a9c:	d907      	bls.n	aae <root+0x42e>
			strncpy(reason, "Error: invalid index", 50);
     a9e:	4851      	ldr	r0, [pc, #324]	; (be4 <root+0x564>)
     aa0:	2232      	movs	r2, #50	; 0x32
     aa2:	4959      	ldr	r1, [pc, #356]	; (c08 <root+0x588>)
     aa4:	f000 ffe7 	bl	1a76 <__pi_strncpy>
			proceed error;
     aa8:	2020      	movs	r0, #32
     aaa:	f000 ff57 	bl	195c <proceed>
		};

	state retrieve_proto:

		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aae:	4d57      	ldr	r5, [pc, #348]	; (c0c <root+0x58c>)
     ab0:	4859      	ldr	r0, [pc, #356]	; (c18 <root+0x598>)
     ab2:	7829      	ldrb	r1, [r5, #0]
     ab4:	f001 f94c 	bl	1d50 <diag>

		struct ResponseMessage *retrieve_record;
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	201e      	movs	r0, #30
     aba:	f001 f8cf 	bl	1c5c <__pi_malloc>
		retrieve_record->gid = node_db->gid;
     abe:	4e43      	ldr	r6, [pc, #268]	; (bcc <root+0x54c>)
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ac0:	4604      	mov	r4, r0
		retrieve_record->gid = node_db->gid;
     ac2:	6833      	ldr	r3, [r6, #0]
     ac4:	885b      	ldrh	r3, [r3, #2]
     ac6:	8003      	strh	r3, [r0, #0]
		retrieve_record->tpe = RETRIEVE_RECORD;
     ac8:	2304      	movs	r3, #4
     aca:	7083      	strb	r3, [r0, #2]
		retrieve_record->request_number = generate_request_num();
     acc:	f7ff fb76 	bl	1bc <generate_request_num>
     ad0:	70e0      	strb	r0, [r4, #3]
		retrieve_record->sender_id = node_db->id;
     ad2:	6833      	ldr	r3, [r6, #0]
		retrieve_record->receiver_id = get_id;
     ad4:	7829      	ldrb	r1, [r5, #0]
		retrieve_record->sender_id = node_db->id;
     ad6:	781b      	ldrb	r3, [r3, #0]
		retrieve_record->record_index = beg_for_index;
		// NOTE: something to do with padding here?
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ad8:	484f      	ldr	r0, [pc, #316]	; (c18 <root+0x598>)
		retrieve_record->sender_id = node_db->id;
     ada:	7123      	strb	r3, [r4, #4]
		retrieve_record->record_index = beg_for_index;
     adc:	4b4c      	ldr	r3, [pc, #304]	; (c10 <root+0x590>)
		retrieve_record->receiver_id = get_id;
     ade:	7161      	strb	r1, [r4, #5]
		retrieve_record->record_index = beg_for_index;
     ae0:	781b      	ldrb	r3, [r3, #0]
     ae2:	7723      	strb	r3, [r4, #28]
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ae4:	f001 f934 	bl	1d50 <diag>
		// Store retrieve record message type & request number for response message parsing
		response_checker[0] = retrieve_record->request_number;
     ae8:	4b42      	ldr	r3, [pc, #264]	; (bf4 <root+0x574>)
     aea:	78e2      	ldrb	r2, [r4, #3]
		response_checker[1] = retrieve_record->tpe;
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     aec:	484a      	ldr	r0, [pc, #296]	; (c18 <root+0x598>)
		response_checker[0] = retrieve_record->request_number;
     aee:	601a      	str	r2, [r3, #0]
		response_checker[1] = retrieve_record->tpe;
     af0:	78a2      	ldrb	r2, [r4, #2]
     af2:	605a      	str	r2, [r3, #4]
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     af4:	7961      	ldrb	r1, [r4, #5]
     af6:	f001 f92b 	bl	1d50 <diag>
		
		call sender(retrieve_record, wait);
     afa:	4621      	mov	r1, r4
     afc:	483e      	ldr	r0, [pc, #248]	; (bf8 <root+0x578>)
     afe:	f001 f901 	bl	1d04 <__pi_fork>
     b02:	211e      	movs	r1, #30
     b04:	f000 ff68 	bl	19d8 <__pi_join>
     b08:	2800      	cmp	r0, #0
     b0a:	f47f aea4 	bne.w	856 <root+0x1d6>
		
	state display_db:
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     b0e:	201b      	movs	r0, #27
     b10:	4942      	ldr	r1, [pc, #264]	; (c1c <root+0x59c>)
     b12:	f001 fdc1 	bl	2698 <ser_out>
		
	state loop_through_data:
		if(node_db->data_base.item_count != 0){
     b16:	4d2d      	ldr	r5, [pc, #180]	; (bcc <root+0x54c>)
     b18:	682a      	ldr	r2, [r5, #0]
     b1a:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
     b1e:	2a00      	cmp	r2, #0
     b20:	d13b      	bne.n	b9a <root+0x51a>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
			}
		}
		ser_out(loop_through_data, "\r\n");
     b22:	201c      	movs	r0, #28
     b24:	493e      	ldr	r1, [pc, #248]	; (c20 <root+0x5a0>)
     b26:	f001 fdb7 	bl	2698 <ser_out>
		proceed menu;
     b2a:	2001      	movs	r0, #1
     b2c:	f000 ff16 	bl	195c <proceed>

	state del_local:
		delete_all(node_db);
     b30:	4b26      	ldr	r3, [pc, #152]	; (bcc <root+0x54c>)
     b32:	6818      	ldr	r0, [r3, #0]
     b34:	f7ff fb64 	bl	200 <delete_all>
		proceed menu;
     b38:	2001      	movs	r0, #1
     b3a:	f000 ff0f 	bl	195c <proceed>

	state wait:
		delay(3000, timeout);
     b3e:	211f      	movs	r1, #31
     b40:	f640 30b8 	movw	r0, #3000	; 0xbb8
     b44:	f000 ff5a 	bl	19fc <delay>
		when(&response_flag, menu);
     b48:	2101      	movs	r1, #1
     b4a:	4836      	ldr	r0, [pc, #216]	; (c24 <root+0x5a4>)
     b4c:	f000 ff10 	bl	1970 <__pi_wait>
		release;
     b50:	e681      	b.n	856 <root+0x1d6>
			if(i == 0){
     b52:	b91c      	cbnz	r4, b5c <root+0x4dc>
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b54:	4631      	mov	r1, r6
     b56:	200b      	movs	r0, #11
     b58:	f001 fd9e 	bl	2698 <ser_out>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b5c:	682b      	ldr	r3, [r5, #0]
     b5e:	4639      	mov	r1, r7
     b60:	4423      	add	r3, r4
     b62:	200b      	movs	r0, #11
     b64:	f893 2468 	ldrb.w	r2, [r3, #1128]	; 0x468
     b68:	f001 fe08 	bl	277c <ser_outf>
		for (int i=0; i<node_db->index; i++) {
     b6c:	3401      	adds	r4, #1
     b6e:	e6d4      	b.n	91a <root+0x29a>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b70:	fb06 f204 	mul.w	r2, r6, r4
     b74:	1898      	adds	r0, r3, r2
     b76:	3205      	adds	r2, #5
     b78:	4413      	add	r3, r2
     b7a:	9301      	str	r3, [sp, #4]
     b7c:	7903      	ldrb	r3, [r0, #4]
     b7e:	4622      	mov	r2, r4
     b80:	9300      	str	r3, [sp, #0]
     b82:	69c3      	ldr	r3, [r0, #28]
     b84:	4639      	mov	r1, r7
     b86:	201c      	movs	r0, #28
     b88:	f001 fdf8 	bl	277c <ser_outf>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b8c:	3401      	adds	r4, #1
     b8e:	682b      	ldr	r3, [r5, #0]
     b90:	f893 2464 	ldrb.w	r2, [r3, #1124]	; 0x464
     b94:	42a2      	cmp	r2, r4
     b96:	daeb      	bge.n	b70 <root+0x4f0>
     b98:	e7c3      	b.n	b22 <root+0x4a2>
     b9a:	2400      	movs	r4, #0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b9c:	261c      	movs	r6, #28
     b9e:	4f22      	ldr	r7, [pc, #136]	; (c28 <root+0x5a8>)
     ba0:	e7f5      	b.n	b8e <root+0x50e>
	
	state timeout:
		ser_out(timeout, "\r\nFailed to reach the destination");
     ba2:	201f      	movs	r0, #31
     ba4:	4921      	ldr	r1, [pc, #132]	; (c2c <root+0x5ac>)
     ba6:	f001 fd77 	bl	2698 <ser_out>
		proceed menu;
     baa:	2001      	movs	r0, #1
     bac:	f000 fed6 	bl	195c <proceed>
	
	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state error:
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     bb0:	2007      	movs	r0, #7
     bb2:	4a0c      	ldr	r2, [pc, #48]	; (be4 <root+0x564>)
     bb4:	491e      	ldr	r1, [pc, #120]	; (c30 <root+0x5b0>)
     bb6:	f001 fde1 	bl	277c <ser_outf>
		proceed menu;
     bba:	2001      	movs	r0, #1
     bbc:	f000 fece 	bl	195c <proceed>
}
     bc0:	b005      	add	sp, #20
     bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bc4:	f000 fe42 	bl	184c <__pi_badstate>
     bc8:	e7fa      	b.n	bc0 <root+0x540>
     bca:	bf00      	nop
     bcc:	200006a0 	andcs	r0, r0, r0, lsr #13
     bd0:	00004fdd 	ldrdeq	r4, [r0], -sp
     bd4:	00004feb 	andeq	r4, r0, fp, ror #31
     bd8:	00004ff0 	strdeq	r4, [r0], -r0
     bdc:	2000069e 	mulcs	r0, lr, r6
     be0:	00005327 	andeq	r5, r0, r7, lsr #6
     be4:	20000654 	andcs	r0, r0, r4, asr r6
     be8:	00005012 	andeq	r5, r0, r2, lsl r0
     bec:	00005025 	andeq	r5, r0, r5, lsr #32
     bf0:	2000062c 	andcs	r0, r0, ip, lsr #12
     bf4:	20000644 	andcs	r0, r0, r4, asr #12
     bf8:	000000c9 	andeq	r0, r0, r9, asr #1
     bfc:	0000504e 	andeq	r5, r0, lr, asr #32
     c00:	00005066 	andeq	r5, r0, r6, rrx
     c04:	20000640 	andcs	r0, r0, r0, asr #12
     c08:	0000508f 	andeq	r5, r0, pc, lsl #1
     c0c:	20000686 	andcs	r0, r0, r6, lsl #13
     c10:	20000687 	andcs	r0, r0, r7, lsl #13
     c14:	00004f28 	andeq	r4, r0, r8, lsr #30
     c18:	000050a4 	andeq	r5, r0, r4, lsr #1
     c1c:	000050b1 	strheq	r5, [r0], -r1
     c20:	00004ab5 			; <UNDEFINED> instruction: 0x00004ab5
     c24:	20000548 	andcs	r0, r0, r8, asr #10
     c28:	000050da 	ldrdeq	r5, [r0], -sl
     c2c:	000050ea 	andeq	r5, r0, sl, ror #1
     c30:	0000510c 	andeq	r5, r0, ip, lsl #2

00000c34 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     c34:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     c36:	4801      	ldr	r0, [pc, #4]	; (c3c <devinit_uart+0x8>)
     c38:	f000 bf3c 	b.w	1ab4 <adddevfunc>
     c3c:	00000fc1 	andeq	r0, r0, r1, asr #31

00000c40 <udelay>:
void udelay (volatile word n) {
     c40:	b082      	sub	sp, #8
     c42:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     c46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c4a:	b29b      	uxth	r3, r3
     c4c:	b90b      	cbnz	r3, c52 <udelay+0x12>
}
     c4e:	b002      	add	sp, #8
     c50:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     c52:	2304      	movs	r3, #4
	while (n--);
     c54:	461a      	mov	r2, r3
     c56:	3b01      	subs	r3, #1
     c58:	b29b      	uxth	r3, r3
     c5a:	2a00      	cmp	r2, #0
     c5c:	d1fa      	bne.n	c54 <udelay+0x14>
		n--;
     c5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c62:	3b01      	subs	r3, #1
     c64:	b29b      	uxth	r3, r3
     c66:	f8ad 3006 	strh.w	r3, [sp, #6]
     c6a:	e7ec      	b.n	c46 <udelay+0x6>

00000c6c <mdelay>:
void mdelay (volatile word n) {
     c6c:	b507      	push	{r0, r1, r2, lr}
     c6e:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     c72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c76:	b29b      	uxth	r3, r3
     c78:	b913      	cbnz	r3, c80 <mdelay+0x14>
}
     c7a:	b003      	add	sp, #12
     c7c:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     c80:	f240 30e7 	movw	r0, #999	; 0x3e7
     c84:	f7ff ffdc 	bl	c40 <udelay>
		n--;
     c88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c8c:	3b01      	subs	r3, #1
     c8e:	b29b      	uxth	r3, r3
     c90:	f8ad 3006 	strh.w	r3, [sp, #6]
     c94:	e7ed      	b.n	c72 <mdelay+0x6>
	...

00000c98 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     c98:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     c9a:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     c9c:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     c9e:	d505      	bpl.n	cac <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     ca0:	4b0a      	ldr	r3, [pc, #40]	; (ccc <__pi_ondomain+0x34>)
     ca2:	78da      	ldrb	r2, [r3, #3]
     ca4:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     ca6:	bf84      	itt	hi
     ca8:	2201      	movhi	r2, #1
     caa:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     cac:	4d08      	ldr	r5, [pc, #32]	; (cd0 <__pi_ondomain+0x38>)
     cae:	4620      	mov	r0, r4
     cb0:	682b      	ldr	r3, [r5, #0]
     cb2:	695b      	ldr	r3, [r3, #20]
     cb4:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     cb6:	682b      	ldr	r3, [r5, #0]
     cb8:	4620      	mov	r0, r4
     cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     cbc:	4798      	blx	r3
     cbe:	2801      	cmp	r0, #1
     cc0:	d1f9      	bne.n	cb6 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     cc2:	4b02      	ldr	r3, [pc, #8]	; (ccc <__pi_ondomain+0x34>)
     cc4:	6858      	ldr	r0, [r3, #4]
     cc6:	4304      	orrs	r4, r0
     cc8:	605c      	str	r4, [r3, #4]
}
     cca:	bd38      	pop	{r3, r4, r5, pc}
     ccc:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     cd0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000cd4 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     cd4:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     cd6:	4d0d      	ldr	r5, [pc, #52]	; (d0c <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     cd8:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     cda:	682b      	ldr	r3, [r5, #0]
     cdc:	699b      	ldr	r3, [r3, #24]
     cde:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ce0:	682b      	ldr	r3, [r5, #0]
     ce2:	4620      	mov	r0, r4
     ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ce6:	4798      	blx	r3
     ce8:	2802      	cmp	r0, #2
     cea:	d1f9      	bne.n	ce0 <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     cec:	f014 0f01 	tst.w	r4, #1
     cf0:	4b07      	ldr	r3, [pc, #28]	; (d10 <__pi_offdomain+0x3c>)
     cf2:	d006      	beq.n	d02 <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cf4:	7899      	ldrb	r1, [r3, #2]
     cf6:	78da      	ldrb	r2, [r3, #3]
     cf8:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cfa:	bf82      	ittt	hi
     cfc:	789a      	ldrbhi	r2, [r3, #2]
     cfe:	b2d2      	uxtbhi	r2, r2
     d00:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     d02:	6858      	ldr	r0, [r3, #4]
     d04:	ea20 0404 	bic.w	r4, r0, r4
     d08:	605c      	str	r4, [r3, #4]
}
     d0a:	bd38      	pop	{r3, r4, r5, pc}
     d0c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     d10:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00000d14 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     d14:	460a      	mov	r2, r1
     d16:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     d18:	4601      	mov	r1, r0
     d1a:	480f      	ldr	r0, [pc, #60]	; (d58 <__pi_syserror+0x44>)
     d1c:	f001 f818 	bl	1d50 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     d20:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     d22:	2540      	movs	r5, #64	; 0x40
     d24:	462f      	mov	r7, r5
     d26:	4e0d      	ldr	r6, [pc, #52]	; (d5c <__pi_syserror+0x48>)
     d28:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     d2a:	490d      	ldr	r1, [pc, #52]	; (d60 <__pi_syserror+0x4c>)
     d2c:	6037      	str	r7, [r6, #0]
     d2e:	6034      	str	r4, [r6, #0]
     d30:	780b      	ldrb	r3, [r1, #0]
     d32:	780b      	ldrb	r3, [r1, #0]
     d34:	20c8      	movs	r0, #200	; 0xc8
     d36:	f36f 1307 	bfc	r3, #4, #4
     d3a:	700b      	strb	r3, [r1, #0]
     d3c:	f7ff ff96 	bl	c6c <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d40:	4b08      	ldr	r3, [pc, #32]	; (d64 <__pi_syserror+0x50>)
     d42:	20c8      	movs	r0, #200	; 0xc8
     d44:	601d      	str	r5, [r3, #0]
     d46:	601c      	str	r4, [r3, #0]
     d48:	780b      	ldrb	r3, [r1, #0]
     d4a:	780b      	ldrb	r3, [r1, #0]
     d4c:	f36f 1307 	bfc	r3, #4, #4
     d50:	700b      	strb	r3, [r1, #0]
     d52:	f7ff ff8b 	bl	c6c <mdelay>
	while (1) {
     d56:	e7e7      	b.n	d28 <__pi_syserror+0x14>
     d58:	00005118 	andeq	r5, r0, r8, lsl r1
     d5c:	40022090 	mulmi	r2, r0, r0
     d60:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     d64:	400220a0 	andmi	r2, r2, r0, lsr #1

00000d68 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     d68:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     d6a:	4b0a      	ldr	r3, [pc, #40]	; (d94 <tci_run_delay_timer+0x2c>)
     d6c:	881c      	ldrh	r4, [r3, #0]
     d6e:	4b0a      	ldr	r3, [pc, #40]	; (d98 <tci_run_delay_timer+0x30>)
     d70:	8818      	ldrh	r0, [r3, #0]
     d72:	4b0a      	ldr	r3, [pc, #40]	; (d9c <tci_run_delay_timer+0x34>)
     d74:	1b00      	subs	r0, r0, r4
     d76:	b284      	uxth	r4, r0
     d78:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d7a:	f002 fe2d 	bl	39d8 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     d7e:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d80:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d82:	4b07      	ldr	r3, [pc, #28]	; (da0 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     d88:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d8c:	6018      	str	r0, [r3, #0]
	sti_tim;
     d8e:	4b05      	ldr	r3, [pc, #20]	; (da4 <tci_run_delay_timer+0x3c>)
     d90:	601a      	str	r2, [r3, #0]
}
     d92:	bd10      	pop	{r4, pc}
     d94:	200006b6 			; <UNDEFINED> instruction: 0x200006b6
     d98:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     d9c:	2000054a 	andcs	r0, r0, sl, asr #10
     da0:	40092018 	andmi	r2, r9, r8, lsl r0
     da4:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000da8 <tci_run_auxiliary_timer>:
	cli_aux;
     da8:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     daa:	b510      	push	{r4, lr}
	cli_aux;
     dac:	4c06      	ldr	r4, [pc, #24]	; (dc8 <tci_run_auxiliary_timer+0x20>)
     dae:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db0:	f002 fe12 	bl	39d8 <NOROM_AONRTCCurrent64BitValueGet>
     db4:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     db6:	4b05      	ldr	r3, [pc, #20]	; (dcc <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     dbc:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     dbe:	6018      	str	r0, [r3, #0]
	sti_aux;
     dc0:	2301      	movs	r3, #1
     dc2:	6023      	str	r3, [r4, #0]
}
     dc4:	bd10      	pop	{r4, pc}
     dc6:	bf00      	nop
     dc8:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     dcc:	40092020 	andmi	r2, r9, r0, lsr #32

00000dd0 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     dd0:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     dd2:	4b3b      	ldr	r3, [pc, #236]	; (ec0 <AONRTCIntHandler+0xf0>)
     dd4:	6818      	ldr	r0, [r3, #0]
     dd6:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     dda:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     ddc:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     dde:	d542      	bpl.n	e66 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     de0:	4b38      	ldr	r3, [pc, #224]	; (ec4 <AONRTCIntHandler+0xf4>)
     de2:	6819      	ldr	r1, [r3, #0]
     de4:	2900      	cmp	r1, #0
     de6:	d053      	beq.n	e90 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     de8:	880a      	ldrh	r2, [r1, #0]
     dea:	2a00      	cmp	r2, #0
     dec:	d04e      	beq.n	e8c <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     dee:	3a01      	subs	r2, #1
     df0:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     df2:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     df4:	685c      	ldr	r4, [r3, #4]
     df6:	b194      	cbz	r4, e1e <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     df8:	8821      	ldrh	r1, [r4, #0]
     dfa:	b111      	cbz	r1, e02 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     dfc:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     dfe:	3901      	subs	r1, #1
     e00:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     e02:	689c      	ldr	r4, [r3, #8]
     e04:	b15c      	cbz	r4, e1e <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     e06:	8821      	ldrh	r1, [r4, #0]
     e08:	b111      	cbz	r1, e10 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     e0a:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     e0c:	3901      	subs	r1, #1
     e0e:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     e10:	68d9      	ldr	r1, [r3, #12]
     e12:	b121      	cbz	r1, e1e <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     e14:	880b      	ldrh	r3, [r1, #0]
     e16:	b113      	cbz	r3, e1e <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     e18:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     e1a:	3b01      	subs	r3, #1
     e1c:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     e1e:	4b2a      	ldr	r3, [pc, #168]	; (ec8 <AONRTCIntHandler+0xf8>)
     e20:	7819      	ldrb	r1, [r3, #0]
     e22:	0909      	lsrs	r1, r1, #4
     e24:	d047      	beq.n	eb6 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     e26:	7859      	ldrb	r1, [r3, #1]
     e28:	1c4a      	adds	r2, r1, #1
     e2a:	b2d2      	uxtb	r2, r2
     e2c:	705a      	strb	r2, [r3, #1]
     e2e:	b9d1      	cbnz	r1, e66 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     e30:	781a      	ldrb	r2, [r3, #0]
     e32:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     e36:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     e38:	d02c      	beq.n	e94 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     e3a:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e3c:	bf42      	ittt	mi
     e3e:	2140      	movmi	r1, #64	; 0x40
     e40:	4a22      	ldrmi	r2, [pc, #136]	; (ecc <AONRTCIntHandler+0xfc>)
     e42:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     e44:	781a      	ldrb	r2, [r3, #0]
     e46:	0692      	lsls	r2, r2, #26
     e48:	bf42      	ittt	mi
     e4a:	2180      	movmi	r1, #128	; 0x80
     e4c:	4a1f      	ldrmi	r2, [pc, #124]	; (ecc <AONRTCIntHandler+0xfc>)
     e4e:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     e50:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     e52:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     e54:	781a      	ldrb	r2, [r3, #0]
     e56:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     e5a:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     e5c:	781a      	ldrb	r2, [r3, #0]
     e5e:	0752      	lsls	r2, r2, #29
     e60:	d501      	bpl.n	e66 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     e62:	22c8      	movs	r2, #200	; 0xc8
     e64:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     e66:	07c3      	lsls	r3, r0, #31
     e68:	d50f      	bpl.n	e8a <AONRTCIntHandler+0xba>
		cli_tim;
     e6a:	2100      	movs	r1, #0
     e6c:	4b18      	ldr	r3, [pc, #96]	; (ed0 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     e6e:	4a19      	ldr	r2, [pc, #100]	; (ed4 <AONRTCIntHandler+0x104>)
     e70:	4819      	ldr	r0, [pc, #100]	; (ed8 <AONRTCIntHandler+0x108>)
		cli_tim;
     e72:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     e74:	8803      	ldrh	r3, [r0, #0]
     e76:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     e78:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     e7a:	4423      	add	r3, r4
		RISE_N_SHINE;
     e7c:	4a12      	ldr	r2, [pc, #72]	; (ec8 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     e7e:	b29b      	uxth	r3, r3
     e80:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     e82:	7813      	ldrb	r3, [r2, #0]
     e84:	f043 0302 	orr.w	r3, r3, #2
     e88:	7013      	strb	r3, [r2, #0]
}
     e8a:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     e8c:	2201      	movs	r2, #1
     e8e:	e7b1      	b.n	df4 <AONRTCIntHandler+0x24>
     e90:	2201      	movs	r2, #1
     e92:	e7c4      	b.n	e1e <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     e94:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e96:	bf42      	ittt	mi
     e98:	2140      	movmi	r1, #64	; 0x40
     e9a:	4a10      	ldrmi	r2, [pc, #64]	; (edc <AONRTCIntHandler+0x10c>)
     e9c:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     e9e:	781a      	ldrb	r2, [r3, #0]
     ea0:	0691      	lsls	r1, r2, #26
     ea2:	bf42      	ittt	mi
     ea4:	2180      	movmi	r1, #128	; 0x80
     ea6:	4a0d      	ldrmi	r2, [pc, #52]	; (edc <AONRTCIntHandler+0x10c>)
     ea8:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     eaa:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     eac:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     eae:	781a      	ldrb	r2, [r3, #0]
     eb0:	f042 0208 	orr.w	r2, r2, #8
     eb4:	e7d1      	b.n	e5a <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     eb6:	2a00      	cmp	r2, #0
     eb8:	d0d5      	beq.n	e66 <AONRTCIntHandler+0x96>
			cli_aux;
     eba:	4b09      	ldr	r3, [pc, #36]	; (ee0 <AONRTCIntHandler+0x110>)
     ebc:	6019      	str	r1, [r3, #0]
     ebe:	e7d2      	b.n	e66 <AONRTCIntHandler+0x96>
     ec0:	40092004 	andmi	r2, r9, r4
     ec4:	200006c4 	andcs	r0, r0, r4, asr #13
     ec8:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     ecc:	40022090 	mulmi	r2, r0, r0
     ed0:	43240280 			; <UNDEFINED> instruction: 0x43240280
     ed4:	2000054a 	andcs	r0, r0, sl, asr #10
     ed8:	200006c0 	andcs	r0, r0, r0, asr #13
     edc:	400220a0 	andmi	r2, r2, r0, lsr #1
     ee0:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000ee4 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     ee6:	2600      	movs	r6, #0
     ee8:	4b0e      	ldr	r3, [pc, #56]	; (f24 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     eea:	4f0f      	ldr	r7, [pc, #60]	; (f28 <tci_update_delay_ticks+0x44>)
	cli_tim;
     eec:	601e      	str	r6, [r3, #0]
	if (setdel) {
     eee:	883d      	ldrh	r5, [r7, #0]
     ef0:	b19d      	cbz	r5, f1a <tci_update_delay_ticks+0x36>
		if (force) {
     ef2:	b1a0      	cbz	r0, f1e <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ef4:	4b0d      	ldr	r3, [pc, #52]	; (f2c <tci_update_delay_ticks+0x48>)
     ef6:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ef8:	f002 fd6e 	bl	39d8 <NOROM_AONRTCCurrent64BitValueGet>
     efc:	0d80      	lsrs	r0, r0, #22
     efe:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f02:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     f06:	b280      	uxth	r0, r0
     f08:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f0a:	1b2c      	subs	r4, r5, r4
	return NO;
     f0c:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f0e:	4b08      	ldr	r3, [pc, #32]	; (f30 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     f10:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f12:	881a      	ldrh	r2, [r3, #0]
     f14:	4414      	add	r4, r2
     f16:	b2a4      	uxth	r4, r4
     f18:	801c      	strh	r4, [r3, #0]
}
     f1a:	4628      	mov	r0, r5
     f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     f1e:	2501      	movs	r5, #1
     f20:	601d      	str	r5, [r3, #0]
		return YES;
     f22:	e7fa      	b.n	f1a <tci_update_delay_ticks+0x36>
     f24:	43240280 			; <UNDEFINED> instruction: 0x43240280
     f28:	2000054a 	andcs	r0, r0, sl, asr #10
     f2c:	40092018 	andmi	r2, r9, r8, lsl r0
     f30:	200006c0 	andcs	r0, r0, r0, asr #13

00000f34 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f34:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     f36:	4e0f      	ldr	r6, [pc, #60]	; (f74 <__pi_uart_setrate+0x40>)
     f38:	4d0f      	ldr	r5, [pc, #60]	; (f78 <__pi_uart_setrate+0x44>)
     f3a:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f3c:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     f3e:	68db      	ldr	r3, [r3, #12]
     f40:	4628      	mov	r0, r5
     f42:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     f44:	2264      	movs	r2, #100	; 0x64
     f46:	6833      	ldr	r3, [r6, #0]
     f48:	4628      	mov	r0, r5
     f4a:	4362      	muls	r2, r4
     f4c:	685e      	ldr	r6, [r3, #4]
     f4e:	490b      	ldr	r1, [pc, #44]	; (f7c <__pi_uart_setrate+0x48>)
     f50:	2360      	movs	r3, #96	; 0x60
     f52:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f54:	4a0a      	ldr	r2, [pc, #40]	; (f80 <__pi_uart_setrate+0x4c>)
}
     f56:	2001      	movs	r0, #1
     f58:	6813      	ldr	r3, [r2, #0]
     f5a:	f043 0310 	orr.w	r3, r3, #16
     f5e:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f60:	6853      	ldr	r3, [r2, #4]
     f62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     f66:	f043 0301 	orr.w	r3, r3, #1
     f6a:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     f6c:	4b05      	ldr	r3, [pc, #20]	; (f84 <__pi_uart_setrate+0x50>)
     f6e:	801c      	strh	r4, [r3, #0]
}
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	bf00      	nop
     f74:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     f78:	40001000 	andmi	r1, r0, r0
     f7c:	02dc6c00 	sbcseq	r6, ip, #0, 24
     f80:	4000102c 	andmi	r1, r0, ip, lsr #32
     f84:	2000054c 	andcs	r0, r0, ip, asr #10

00000f88 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f88:	4a08      	ldr	r2, [pc, #32]	; (fac <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     f8a:	4909      	ldr	r1, [pc, #36]	; (fb0 <reinit_uart+0x28>)
     f8c:	6813      	ldr	r3, [r2, #0]
     f8e:	f043 0310 	orr.w	r3, r3, #16
     f92:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f94:	2212      	movs	r2, #18
     f96:	4b07      	ldr	r3, [pc, #28]	; (fb4 <reinit_uart+0x2c>)
     f98:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f9a:	4a07      	ldr	r2, [pc, #28]	; (fb8 <reinit_uart+0x30>)
     f9c:	6813      	ldr	r3, [r2, #0]
     f9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     fa2:	6013      	str	r3, [r2, #0]
     fa4:	4b05      	ldr	r3, [pc, #20]	; (fbc <reinit_uart+0x34>)
     fa6:	8818      	ldrh	r0, [r3, #0]
     fa8:	f7ff bfc4 	b.w	f34 <__pi_uart_setrate>
     fac:	4000102c 	andmi	r1, r0, ip, lsr #32
     fb0:	200006a4 	andcs	r0, r0, r4, lsr #13
     fb4:	40001034 	andmi	r1, r0, r4, lsr r0
     fb8:	40001030 	andmi	r1, r0, r0, lsr r0
     fbc:	2000054c 	andcs	r0, r0, ip, asr #10

00000fc0 <ioreq_uart_a>:
	switch (operation) {
     fc0:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     fc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     fc6:	460d      	mov	r5, r1
     fc8:	4614      	mov	r4, r2
     fca:	2803      	cmp	r0, #3
     fcc:	d86e      	bhi.n	10ac <ioreq_uart_a+0xec>
     fce:	e8df f000 	tbb	[pc, r0]
     fd2:	5a471253 	bpl	11c5926 <__ccfg+0x11a597e>
				*buf++ = uart_a_read;
     fd6:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     fda:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     fdc:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     fe0:	b11e      	cbz	r6, fea <ioreq_uart_a+0x2a>
     fe2:	f8d8 3000 	ldr.w	r3, [r8]
     fe6:	06d8      	lsls	r0, r3, #27
     fe8:	d5f5      	bpl.n	fd6 <ioreq_uart_a+0x16>
			if (len != operation) {
     fea:	42a6      	cmp	r6, r4
     fec:	d00a      	beq.n	1004 <ioreq_uart_a+0x44>
				return operation - len;
     fee:	1ba4      	subs	r4, r4, r6
}
     ff0:	4620      	mov	r0, r4
     ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     ff6:	4616      	mov	r6, r2
			uart_a_disable_int;
     ff8:	4f2e      	ldr	r7, [pc, #184]	; (10b4 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     ffa:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 10c8 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     ffe:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 10cc <ioreq_uart_a+0x10c>
    1002:	e7ed      	b.n	fe0 <ioreq_uart_a+0x20>
			uart_a_disable_int;
    1004:	683b      	ldr	r3, [r7, #0]
    1006:	2015      	movs	r0, #21
    1008:	695b      	ldr	r3, [r3, #20]
    100a:	4798      	blx	r3
			if (uart_a_char_available) {
    100c:	f8d8 3000 	ldr.w	r3, [r8]
    1010:	06d9      	lsls	r1, r3, #27
    1012:	d404      	bmi.n	101e <ioreq_uart_a+0x5e>
				uart_a_enable_int;
    1014:	683b      	ldr	r3, [r7, #0]
    1016:	2015      	movs	r0, #21
    1018:	691b      	ldr	r3, [r3, #16]
    101a:	4798      	blx	r3
				goto Redo_rx;
    101c:	e7e0      	b.n	fe0 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    101e:	4a26      	ldr	r2, [pc, #152]	; (10b8 <ioreq_uart_a+0xf8>)
    1020:	7993      	ldrb	r3, [r2, #6]
    1022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
    1026:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    102a:	7193      	strb	r3, [r2, #6]
			return -2;
    102c:	e7e0      	b.n	ff0 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
    102e:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
    1032:	3e01      	subs	r6, #1
				uart_a_write (*buf);
    1034:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
    1038:	b11e      	cbz	r6, 1042 <ioreq_uart_a+0x82>
    103a:	f8d8 3000 	ldr.w	r3, [r8]
    103e:	069a      	lsls	r2, r3, #26
    1040:	d5f5      	bpl.n	102e <ioreq_uart_a+0x6e>
			if (len != operation) {
    1042:	42a6      	cmp	r6, r4
    1044:	d1d3      	bne.n	fee <ioreq_uart_a+0x2e>
			uart_a_disable_int;
    1046:	683b      	ldr	r3, [r7, #0]
    1048:	2015      	movs	r0, #21
    104a:	695b      	ldr	r3, [r3, #20]
    104c:	4798      	blx	r3
			if (uart_a_room_in_tx) {
    104e:	f8d8 3000 	ldr.w	r3, [r8]
    1052:	069b      	lsls	r3, r3, #26
    1054:	d40b      	bmi.n	106e <ioreq_uart_a+0xae>
				uart_a_enable_int;
    1056:	683b      	ldr	r3, [r7, #0]
    1058:	2015      	movs	r0, #21
    105a:	691b      	ldr	r3, [r3, #16]
    105c:	4798      	blx	r3
				goto Redo_tx;
    105e:	e7eb      	b.n	1038 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
    1060:	4616      	mov	r6, r2
			uart_a_disable_int;
    1062:	4f14      	ldr	r7, [pc, #80]	; (10b4 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
    1064:	f8df 8060 	ldr.w	r8, [pc, #96]	; 10c8 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
    1068:	f8df 9060 	ldr.w	r9, [pc, #96]	; 10cc <ioreq_uart_a+0x10c>
    106c:	e7e4      	b.n	1038 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    106e:	4a12      	ldr	r2, [pc, #72]	; (10b8 <ioreq_uart_a+0xf8>)
    1070:	7993      	ldrb	r3, [r2, #6]
    1072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1076:	e7d6      	b.n	1026 <ioreq_uart_a+0x66>
			uart_a_enable_int;
    1078:	4b0e      	ldr	r3, [pc, #56]	; (10b4 <ioreq_uart_a+0xf4>)
    107a:	2015      	movs	r0, #21
    107c:	681b      	ldr	r3, [r3, #0]
			return 0;
    107e:	2400      	movs	r4, #0
			uart_a_enable_int;
    1080:	691b      	ldr	r3, [r3, #16]
    1082:	4798      	blx	r3
			return 0;
    1084:	e7b4      	b.n	ff0 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
    1086:	2a01      	cmp	r2, #1
    1088:	d109      	bne.n	109e <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
    108a:	490b      	ldr	r1, [pc, #44]	; (10b8 <ioreq_uart_a+0xf8>)
    108c:	8828      	ldrh	r0, [r5, #0]
    108e:	f7ff ff51 	bl	f34 <__pi_uart_setrate>
    1092:	2800      	cmp	r0, #0
    1094:	d1ac      	bne.n	ff0 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
    1096:	2003      	movs	r0, #3
    1098:	4908      	ldr	r1, [pc, #32]	; (10bc <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
    109a:	f7ff fe3b 	bl	d14 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
    109e:	2a02      	cmp	r2, #2
    10a0:	d104      	bne.n	10ac <ioreq_uart_a+0xec>
	return urates [0];
    10a2:	4b07      	ldr	r3, [pc, #28]	; (10c0 <ioreq_uart_a+0x100>)
				return 1;
    10a4:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    10a6:	881b      	ldrh	r3, [r3, #0]
    10a8:	800b      	strh	r3, [r1, #0]
				return 1;
    10aa:	e7a1      	b.n	ff0 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
    10ac:	2002      	movs	r0, #2
    10ae:	4905      	ldr	r1, [pc, #20]	; (10c4 <ioreq_uart_a+0x104>)
    10b0:	e7f3      	b.n	109a <ioreq_uart_a+0xda>
    10b2:	bf00      	nop
    10b4:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    10b8:	200006a4 	andcs	r0, r0, r4, lsr #13
    10bc:	00005127 	andeq	r5, r0, r7, lsr #2
    10c0:	2000054c 	andcs	r0, r0, ip, asr #10
    10c4:	0000512b 	andeq	r5, r0, fp, lsr #2
    10c8:	40001018 	andmi	r1, r0, r8, lsl r0
    10cc:	40001000 	andmi	r1, r0, r0

000010d0 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    10d0:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
    10d4:	b530      	push	{r4, r5, lr}
    10d6:	4b29      	ldr	r3, [pc, #164]	; (117c <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10d8:	4c29      	ldr	r4, [pc, #164]	; (1180 <UART0IntHandler+0xb0>)
    10da:	601a      	str	r2, [r3, #0]
    10dc:	6822      	ldr	r2, [r4, #0]
    10de:	06d5      	lsls	r5, r2, #27
    10e0:	d423      	bmi.n	112a <UART0IntHandler+0x5a>
    10e2:	4b28      	ldr	r3, [pc, #160]	; (1184 <UART0IntHandler+0xb4>)
    10e4:	799a      	ldrb	r2, [r3, #6]
    10e6:	0610      	lsls	r0, r2, #24
    10e8:	d51f      	bpl.n	112a <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10ea:	799a      	ldrb	r2, [r3, #6]
    10ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    10f0:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    10f2:	4a25      	ldr	r2, [pc, #148]	; (1188 <UART0IntHandler+0xb8>)
    10f4:	7813      	ldrb	r3, [r2, #0]
    10f6:	f043 0302 	orr.w	r3, r3, #2
    10fa:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
    10fc:	4b23      	ldr	r3, [pc, #140]	; (118c <UART0IntHandler+0xbc>)
    10fe:	681a      	ldr	r2, [r3, #0]
    1100:	b19a      	cbz	r2, 112a <UART0IntHandler+0x5a>
    1102:	4610      	mov	r0, r2
    1104:	2300      	movs	r3, #0
    1106:	f830 1b10 	ldrh.w	r1, [r0], #16
    110a:	f001 0107 	and.w	r1, r1, #7
    110e:	4299      	cmp	r1, r3
    1110:	dd09      	ble.n	1126 <UART0IntHandler+0x56>
    1112:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    1116:	3301      	adds	r3, #1
    1118:	f515 7f81 	cmn.w	r5, #258	; 0x102
    111c:	d1f7      	bne.n	110e <UART0IntHandler+0x3e>
    111e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1122:	889b      	ldrh	r3, [r3, #4]
    1124:	8013      	strh	r3, [r2, #0]
    1126:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1128:	e7ea      	b.n	1100 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    112a:	6823      	ldr	r3, [r4, #0]
    112c:	0699      	lsls	r1, r3, #26
    112e:	d424      	bmi.n	117a <UART0IntHandler+0xaa>
    1130:	4b14      	ldr	r3, [pc, #80]	; (1184 <UART0IntHandler+0xb4>)
    1132:	799a      	ldrb	r2, [r3, #6]
    1134:	0652      	lsls	r2, r2, #25
    1136:	d520      	bpl.n	117a <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
    1138:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    113c:	799a      	ldrb	r2, [r3, #6]
    113e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    1142:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    1144:	4a10      	ldr	r2, [pc, #64]	; (1188 <UART0IntHandler+0xb8>)
    1146:	7813      	ldrb	r3, [r2, #0]
    1148:	f043 0302 	orr.w	r3, r3, #2
    114c:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
    114e:	4b0f      	ldr	r3, [pc, #60]	; (118c <UART0IntHandler+0xbc>)
    1150:	681a      	ldr	r2, [r3, #0]
    1152:	b192      	cbz	r2, 117a <UART0IntHandler+0xaa>
    1154:	4610      	mov	r0, r2
    1156:	2300      	movs	r3, #0
    1158:	f830 1b10 	ldrh.w	r1, [r0], #16
    115c:	f001 0107 	and.w	r1, r1, #7
    1160:	4299      	cmp	r1, r3
    1162:	dd08      	ble.n	1176 <UART0IntHandler+0xa6>
    1164:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    1168:	3301      	adds	r3, #1
    116a:	42a5      	cmp	r5, r4
    116c:	d1f8      	bne.n	1160 <UART0IntHandler+0x90>
    116e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1172:	889b      	ldrh	r3, [r3, #4]
    1174:	8013      	strh	r3, [r2, #0]
    1176:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1178:	e7eb      	b.n	1152 <UART0IntHandler+0x82>
	}

	RTNI;
}
    117a:	bd30      	pop	{r4, r5, pc}
    117c:	40001044 	andmi	r1, r0, r4, asr #32
    1180:	40001018 	andmi	r1, r0, r8, lsl r0
    1184:	200006a4 	andcs	r0, r0, r4, lsr #13
    1188:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    118c:	20000550 	andcs	r0, r0, r0, asr r5

00001190 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
    1190:	b570      	push	{r4, r5, r6, lr}
    1192:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1194:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
    1196:	4e0c      	ldr	r6, [pc, #48]	; (11c8 <__buttons_setirq+0x38>)
    1198:	4d0c      	ldr	r5, [pc, #48]	; (11cc <__buttons_setirq+0x3c>)
    119a:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    119c:	4c0c      	ldr	r4, [pc, #48]	; (11d0 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
    119e:	0a1b      	lsrs	r3, r3, #8
    11a0:	fa01 f203 	lsl.w	r2, r1, r3
    11a4:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a6:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
    11a8:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11aa:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
    11ae:	0a1b      	lsrs	r3, r3, #8
    11b0:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11b2:	01db      	lsls	r3, r3, #7
    11b4:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    11b8:	4322      	orrs	r2, r4
    11ba:	4323      	orrs	r3, r4
    11bc:	6010      	str	r0, [r2, #0]
    11be:	6029      	str	r1, [r5, #0]
    11c0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    11c2:	b662      	cpsie	i
			val;
	}
	sti;
}
    11c4:	bd70      	pop	{r4, r5, r6, pc}
    11c6:	bf00      	nop
    11c8:	000052c2 	andeq	r5, r0, r2, asr #5
    11cc:	400220e0 	andmi	r2, r2, r0, ror #1
    11d0:	42000048 	andmi	r0, r0, #72	; 0x48

000011d4 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
    11d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    11d6:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
    11d8:	2200      	movs	r2, #0
    11da:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11dc:	4f09      	ldr	r7, [pc, #36]	; (1204 <__pinlist_setirq+0x30>)
    11de:	4c0a      	ldr	r4, [pc, #40]	; (1208 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11e0:	490a      	ldr	r1, [pc, #40]	; (120c <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11e2:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
    11e4:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    11ea:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11ee:	01db      	lsls	r3, r3, #7
    11f0:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    11f4:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
    11f6:	2a04      	cmp	r2, #4
    11f8:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11fa:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
    11fc:	d1f1      	bne.n	11e2 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
    11fe:	b662      	cpsie	i
			val;
	}
	sti;
}
    1200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1202:	bf00      	nop
    1204:	000052bd 			; <UNDEFINED> instruction: 0x000052bd
    1208:	400220e0 	andmi	r2, r2, r0, ror #1
    120c:	42000048 	andmi	r0, r0, #72	; 0x48

00001210 <GPIOIntHandler>:
void GPIOIntHandler () {
    1210:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
    1212:	4c23      	ldr	r4, [pc, #140]	; (12a0 <GPIOIntHandler+0x90>)
    1214:	6822      	ldr	r2, [r4, #0]
    1216:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
    121a:	d01e      	beq.n	125a <GPIOIntHandler+0x4a>
	buttons_disable ();
    121c:	2000      	movs	r0, #0
    121e:	f7ff ffb7 	bl	1190 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
    1222:	4b20      	ldr	r3, [pc, #128]	; (12a4 <GPIOIntHandler+0x94>)
    1224:	4d20      	ldr	r5, [pc, #128]	; (12a8 <GPIOIntHandler+0x98>)
    1226:	681a      	ldr	r2, [r3, #0]
    1228:	b192      	cbz	r2, 1250 <GPIOIntHandler+0x40>
    122a:	4610      	mov	r0, r2
    122c:	2300      	movs	r3, #0
    122e:	f830 1b10 	ldrh.w	r1, [r0], #16
    1232:	f001 0107 	and.w	r1, r1, #7
    1236:	4299      	cmp	r1, r3
    1238:	dd08      	ble.n	124c <GPIOIntHandler+0x3c>
    123a:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
    123e:	3301      	adds	r3, #1
    1240:	42ae      	cmp	r6, r5
    1242:	d1f8      	bne.n	1236 <GPIOIntHandler+0x26>
    1244:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1248:	889b      	ldrh	r3, [r3, #4]
    124a:	8013      	strh	r3, [r2, #0]
    124c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    124e:	e7eb      	b.n	1228 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
    1250:	4a16      	ldr	r2, [pc, #88]	; (12ac <GPIOIntHandler+0x9c>)
    1252:	7813      	ldrb	r3, [r2, #0]
    1254:	f043 0302 	orr.w	r3, r3, #2
    1258:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
    125a:	6823      	ldr	r3, [r4, #0]
    125c:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
    1260:	d01d      	beq.n	129e <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
    1262:	4b10      	ldr	r3, [pc, #64]	; (12a4 <GPIOIntHandler+0x94>)
    1264:	4c12      	ldr	r4, [pc, #72]	; (12b0 <GPIOIntHandler+0xa0>)
    1266:	6818      	ldr	r0, [r3, #0]
    1268:	b190      	cbz	r0, 1290 <GPIOIntHandler+0x80>
    126a:	4601      	mov	r1, r0
    126c:	2300      	movs	r3, #0
    126e:	f831 2b10 	ldrh.w	r2, [r1], #16
    1272:	f002 0207 	and.w	r2, r2, #7
    1276:	429a      	cmp	r2, r3
    1278:	dd08      	ble.n	128c <GPIOIntHandler+0x7c>
    127a:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    127e:	3301      	adds	r3, #1
    1280:	42a5      	cmp	r5, r4
    1282:	d1f8      	bne.n	1276 <GPIOIntHandler+0x66>
    1284:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    1288:	889b      	ldrh	r3, [r3, #4]
    128a:	8003      	strh	r3, [r0, #0]
    128c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    128e:	e7eb      	b.n	1268 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
    1290:	f7ff ffa0 	bl	11d4 <__pinlist_setirq>
	RISE_N_SHINE;
    1294:	4a05      	ldr	r2, [pc, #20]	; (12ac <GPIOIntHandler+0x9c>)
    1296:	7813      	ldrb	r3, [r2, #0]
    1298:	f043 0302 	orr.w	r3, r3, #2
    129c:	7013      	strb	r3, [r2, #0]
}
    129e:	bd70      	pop	{r4, r5, r6, pc}
    12a0:	400220e0 	andmi	r2, r2, r0, ror #1
    12a4:	20000550 	andcs	r0, r0, r0, asr r5
    12a8:	000052c2 	andeq	r5, r0, r2, asr #5
    12ac:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    12b0:	000052bd 			; <UNDEFINED> instruction: 0x000052bd

000012b4 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
    12b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12b8:	4c58      	ldr	r4, [pc, #352]	; (141c <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    12ba:	2004      	movs	r0, #4
    12bc:	f7ff fcec 	bl	c98 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12c0:	6823      	ldr	r3, [r4, #0]
    12c2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    12c6:	69db      	ldr	r3, [r3, #28]
    12c8:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    12ca:	6823      	ldr	r3, [r4, #0]
    12cc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    12d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    12d2:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12d4:	6823      	ldr	r3, [r4, #0]
    12d6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    12da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    12dc:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12de:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12e0:	2600      	movs	r6, #0
    12e2:	4c4f      	ldr	r4, [pc, #316]	; (1420 <system_init+0x16c>)
    12e4:	4f4f      	ldr	r7, [pc, #316]	; (1424 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12e6:	f8df c17c 	ldr.w	ip, [pc, #380]	; 1464 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ea:	f8df e17c 	ldr.w	lr, [pc, #380]	; 1468 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12ee:	f8df 8140 	ldr.w	r8, [pc, #320]	; 1430 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12f2:	f8df 9134 	ldr.w	r9, [pc, #308]	; 1428 <system_init+0x174>
    12f6:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
    12f8:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12fc:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
    12fe:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1302:	0091      	lsls	r1, r2, #2
    1304:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
    1308:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
    130c:	ea05 0a0c 	and.w	sl, r5, ip
    1310:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
    1314:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1316:	bf44      	itt	mi
    1318:	ea41 010e 	orrmi.w	r1, r1, lr
    131c:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
    131e:	fa03 f202 	lsl.w	r2, r3, r2
    1322:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1324:	bf4c      	ite	mi
    1326:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    132a:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    132e:	2e11      	cmp	r6, #17
    1330:	d1e2      	bne.n	12f8 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1332:	2540      	movs	r5, #64	; 0x40
    1334:	2680      	movs	r6, #128	; 0x80
    1336:	4b3c      	ldr	r3, [pc, #240]	; (1428 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
    1338:	493c      	ldr	r1, [pc, #240]	; (142c <system_init+0x178>)
    133a:	601d      	str	r5, [r3, #0]
    133c:	601e      	str	r6, [r3, #0]
    133e:	780b      	ldrb	r3, [r1, #0]
    1340:	780b      	ldrb	r3, [r1, #0]
    1342:	20c8      	movs	r0, #200	; 0xc8
    1344:	f36f 1307 	bfc	r3, #4, #4
    1348:	700b      	strb	r3, [r1, #0]
    134a:	f7ff fc8f 	bl	c6c <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    134e:	4b38      	ldr	r3, [pc, #224]	; (1430 <system_init+0x17c>)
    1350:	20c8      	movs	r0, #200	; 0xc8
    1352:	601d      	str	r5, [r3, #0]
    1354:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1356:	2601      	movs	r6, #1
	all_leds_blink;
    1358:	780b      	ldrb	r3, [r1, #0]
    135a:	780b      	ldrb	r3, [r1, #0]
    135c:	f36f 1307 	bfc	r3, #4, #4
    1360:	700b      	strb	r3, [r1, #0]
    1362:	f7ff fc83 	bl	c6c <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
    1366:	4b33      	ldr	r3, [pc, #204]	; (1434 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1368:	4a33      	ldr	r2, [pc, #204]	; (1438 <system_init+0x184>)
    136a:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    136c:	4b33      	ldr	r3, [pc, #204]	; (143c <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
    136e:	4d34      	ldr	r5, [pc, #208]	; (1440 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1370:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1372:	4b34      	ldr	r3, [pc, #208]	; (1444 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
    1374:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1376:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
    1378:	682b      	ldr	r3, [r5, #0]
    137a:	691b      	ldr	r3, [r3, #16]
    137c:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
    137e:	f000 fbf9 	bl	1b74 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
    1382:	682b      	ldr	r3, [r5, #0]
    1384:	2010      	movs	r0, #16
    1386:	691b      	ldr	r3, [r3, #16]
    1388:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    138a:	2002      	movs	r0, #2
    138c:	f7ff fc84 	bl	c98 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1390:	68ab      	ldr	r3, [r5, #8]
    1392:	f44f 7000 	mov.w	r0, #512	; 0x200
    1396:	69db      	ldr	r3, [r3, #28]
    1398:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    139a:	68ab      	ldr	r3, [r5, #8]
    139c:	f44f 7000 	mov.w	r0, #512	; 0x200
    13a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13a2:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    13a4:	68ab      	ldr	r3, [r5, #8]
    13a6:	f44f 7000 	mov.w	r0, #512	; 0x200
    13aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    13ac:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
    13ae:	2260      	movs	r2, #96	; 0x60
    13b0:	4b25      	ldr	r3, [pc, #148]	; (1448 <system_init+0x194>)
    13b2:	6026      	str	r6, [r4, #0]
    13b4:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
    13b6:	f7ff fde7 	bl	f88 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
    13ba:	f001 f959 	bl	2670 <ee_open>
    13be:	f001 f961 	bl	2684 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    13c2:	f003 fa2b 	bl	481c <NOROM_SysCtrlResetSourceGet>
    13c6:	2808      	cmp	r0, #8
    13c8:	d11a      	bne.n	1400 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    13ca:	4b20      	ldr	r3, [pc, #128]	; (144c <system_init+0x198>)
    13cc:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    13ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    13d2:	3b04      	subs	r3, #4
    13d4:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    13da:	3324      	adds	r3, #36	; 0x24
    13dc:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
    13de:	2000      	movs	r0, #0
    13e0:	f7ff fc28 	bl	c34 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13e4:	4a1a      	ldr	r2, [pc, #104]	; (1450 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
    13e6:	2015      	movs	r0, #21
    13e8:	6813      	ldr	r3, [r2, #0]
    13ea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    13ee:	6013      	str	r3, [r2, #0]
    13f0:	4b13      	ldr	r3, [pc, #76]	; (1440 <system_init+0x18c>)
    13f2:	681b      	ldr	r3, [r3, #0]
    13f4:	691b      	ldr	r3, [r3, #16]
    13f6:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
    13f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
    13fc:	f7ff bcd4 	b.w	da8 <tci_run_auxiliary_timer>
		diag ("");
    1400:	4814      	ldr	r0, [pc, #80]	; (1454 <system_init+0x1a0>)
    1402:	f000 fca5 	bl	1d50 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1406:	4814      	ldr	r0, [pc, #80]	; (1458 <system_init+0x1a4>)
    1408:	f000 fca2 	bl	1d50 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    140c:	4913      	ldr	r1, [pc, #76]	; (145c <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
    140e:	4814      	ldr	r0, [pc, #80]	; (1460 <system_init+0x1ac>)
    1410:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
    1414:	b289      	uxth	r1, r1
    1416:	f000 fc9b 	bl	1d50 <diag>
    141a:	e7e0      	b.n	13de <system_init+0x12a>
    141c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    1420:	60082028 	andvs	r2, r8, r8, lsr #32
    1424:	000051a4 	andeq	r5, r0, r4, lsr #3
    1428:	40022090 	mulmi	r2, r0, r0
    142c:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1430:	400220a0 	andmi	r2, r2, r0, lsr #1
    1434:	40092024 	andmi	r2, r9, r4, lsr #32
    1438:	00050003 	andeq	r0, r5, r3
    143c:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
    1440:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1444:	40092000 	andmi	r2, r9, r0
    1448:	2000054c 	andcs	r0, r0, ip, asr #10
    144c:	4009400c 	andmi	r4, r9, ip
    1450:	40001038 	andmi	r1, r0, r8, lsr r0
    1454:	00004ab7 			; <UNDEFINED> instruction: 0x00004ab7
    1458:	0000512f 	andeq	r5, r0, pc, lsr #2
    145c:	200006d8 	ldrdcs	r0, [r0], -r8
    1460:	0000517b 	andeq	r5, r0, fp, ror r1
    1464:	7f077f3f 	svcvc	0x00077f3f
    1468:	42441a00 	submi	r1, r4, #0, 20

0000146c <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    146c:	2803      	cmp	r0, #3
    146e:	4603      	mov	r3, r0
    1470:	bf28      	it	cs
    1472:	2303      	movcs	r3, #3
    1474:	4a05      	ldr	r2, [pc, #20]	; (148c <setpowermode+0x20>)
    1476:	b2db      	uxtb	r3, r3
    1478:	2801      	cmp	r0, #1
    147a:	7093      	strb	r3, [r2, #2]
    147c:	d904      	bls.n	1488 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
    147e:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1480:	f011 0f01 	tst.w	r1, #1
    1484:	bf18      	it	ne
    1486:	2301      	movne	r3, #1
    1488:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
    148a:	4770      	bx	lr
    148c:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00001490 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
    1490:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    1494:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1496:	4b79      	ldr	r3, [pc, #484]	; (167c <__pi_release+0x1ec>)
    1498:	af00      	add	r7, sp, #0
    149a:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
    149e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
    14a2:	681a      	ldr	r2, [r3, #0]
    14a4:	4b76      	ldr	r3, [pc, #472]	; (1680 <__pi_release+0x1f0>)
    14a6:	429a      	cmp	r2, r3
    14a8:	d127      	bne.n	14fa <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    14aa:	4e76      	ldr	r6, [pc, #472]	; (1684 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
    14ac:	2100      	movs	r1, #0
    14ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    14b2:	f000 f9ed 	bl	1890 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
    14b6:	4a74      	ldr	r2, [pc, #464]	; (1688 <__pi_release+0x1f8>)
    14b8:	4b74      	ldr	r3, [pc, #464]	; (168c <__pi_release+0x1fc>)
    14ba:	6812      	ldr	r2, [r2, #0]
    14bc:	601a      	str	r2, [r3, #0]
    14be:	681a      	ldr	r2, [r3, #0]
    14c0:	b9fa      	cbnz	r2, 1502 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14c2:	4c73      	ldr	r4, [pc, #460]	; (1690 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
    14c4:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
    14c6:	4d73      	ldr	r5, [pc, #460]	; (1694 <__pi_release+0x204>)
    14c8:	782b      	ldrb	r3, [r5, #0]
    14ca:	f3c3 0240 	ubfx	r2, r3, #1, #1
    14ce:	0798      	lsls	r0, r3, #30
    14d0:	607a      	str	r2, [r7, #4]
    14d2:	f100 80cd 	bmi.w	1670 <__pi_release+0x1e0>
	system_event_count ++;
    14d6:	4a70      	ldr	r2, [pc, #448]	; (1698 <__pi_release+0x208>)
    14d8:	6813      	ldr	r3, [r2, #0]
    14da:	3301      	adds	r3, #1
    14dc:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
    14de:	78ea      	ldrb	r2, [r5, #3]
    14e0:	2a01      	cmp	r2, #1
    14e2:	b2d3      	uxtb	r3, r2
    14e4:	d017      	beq.n	1516 <__pi_release+0x86>
    14e6:	2b02      	cmp	r3, #2
    14e8:	d031      	beq.n	154e <__pi_release+0xbe>
    14ea:	2b00      	cmp	r3, #0
    14ec:	f040 8095 	bne.w	161a <__pi_release+0x18a>
			__WFI ();
    14f0:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
    14f2:	b662      	cpsie	i
    14f4:	bf00      	nop
    14f6:	bf00      	nop
    14f8:	e7e4      	b.n	14c4 <__pi_release+0x34>
	check_stack_overflow;
    14fa:	200b      	movs	r0, #11
    14fc:	4967      	ldr	r1, [pc, #412]	; (169c <__pi_release+0x20c>)
    14fe:	f7ff fc09 	bl	d14 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1502:	6851      	ldr	r1, [r2, #4]
    1504:	b129      	cbz	r1, 1512 <__pi_release+0x82>
    1506:	8810      	ldrh	r0, [r2, #0]
    1508:	0704      	lsls	r4, r0, #28
    150a:	d102      	bne.n	1512 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
    150c:	0900      	lsrs	r0, r0, #4
    150e:	4788      	blx	r1
			goto Redo;
    1510:	e7cc      	b.n	14ac <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
    1512:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1514:	e7d2      	b.n	14bc <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    1516:	4a62      	ldr	r2, [pc, #392]	; (16a0 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1518:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    151a:	6813      	ldr	r3, [r2, #0]
    151c:	f043 0301 	orr.w	r3, r3, #1
    1520:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1522:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    1526:	f043 0303 	orr.w	r3, r3, #3
    152a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    152e:	4b5d      	ldr	r3, [pc, #372]	; (16a4 <__pi_release+0x214>)
    1530:	681b      	ldr	r3, [r3, #0]
    1532:	699b      	ldr	r3, [r3, #24]
    1534:	4798      	blx	r3
    1536:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1538:	6823      	ldr	r3, [r4, #0]
    153a:	f043 0304 	orr.w	r3, r3, #4
    153e:	6023      	str	r3, [r4, #0]
			__WFI ();
    1540:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1542:	6823      	ldr	r3, [r4, #0]
    1544:	f023 0304 	bic.w	r3, r3, #4
    1548:	6023      	str	r3, [r4, #0]
    154a:	6833      	ldr	r3, [r6, #0]
}
    154c:	e7d1      	b.n	14f2 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    154e:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1552:	687a      	ldr	r2, [r7, #4]
    1554:	4b54      	ldr	r3, [pc, #336]	; (16a8 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1556:	f8df b188 	ldr.w	fp, [pc, #392]	; 16e0 <__pi_release+0x250>
    155a:	601a      	str	r2, [r3, #0]
    155c:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    155e:	f8df a144 	ldr.w	sl, [pc, #324]	; 16a4 <__pi_release+0x214>
    1562:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1566:	6833      	ldr	r3, [r6, #0]
    1568:	4b50      	ldr	r3, [pc, #320]	; (16ac <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    156a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 16e4 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    156e:	f8c3 8000 	str.w	r8, [r3]
    1572:	6868      	ldr	r0, [r5, #4]
    1574:	f8da 3000 	ldr.w	r3, [sl]
    1578:	f040 0020 	orr.w	r0, r0, #32
    157c:	699b      	ldr	r3, [r3, #24]
    157e:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1580:	4b4b      	ldr	r3, [pc, #300]	; (16b0 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1582:	2103      	movs	r1, #3
    1584:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1588:	f8d9 3000 	ldr.w	r3, [r9]
    158c:	4849      	ldr	r0, [pc, #292]	; (16b4 <__pi_release+0x224>)
    158e:	f023 0303 	bic.w	r3, r3, #3
    1592:	f8c9 3000 	str.w	r3, [r9]
    1596:	4b48      	ldr	r3, [pc, #288]	; (16b8 <__pi_release+0x228>)
    1598:	681a      	ldr	r2, [r3, #0]
    159a:	6852      	ldr	r2, [r2, #4]
    159c:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
    159e:	6878      	ldr	r0, [r7, #4]
    15a0:	f002 fffc 	bl	459c <NOROM_SysCtrlSetRechargeBeforePowerDown>
    15a4:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15a6:	6822      	ldr	r2, [r4, #0]
    15a8:	f042 0204 	orr.w	r2, r2, #4
    15ac:	6022      	str	r2, [r4, #0]
			__WFI ();
    15ae:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15b0:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    15b2:	4b41      	ldr	r3, [pc, #260]	; (16b8 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15b4:	f022 0204 	bic.w	r2, r2, #4
    15b8:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    15ba:	681b      	ldr	r3, [r3, #0]
    15bc:	4641      	mov	r1, r8
    15be:	685b      	ldr	r3, [r3, #4]
    15c0:	483c      	ldr	r0, [pc, #240]	; (16b4 <__pi_release+0x224>)
    15c2:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15c4:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15c8:	4a3c      	ldr	r2, [pc, #240]	; (16bc <__pi_release+0x22c>)
    15ca:	f043 0303 	orr.w	r3, r3, #3
    15ce:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    15d2:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15d6:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
    15d8:	0699      	lsls	r1, r3, #26
    15da:	d5fc      	bpl.n	15d6 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15dc:	f8da 3000 	ldr.w	r3, [sl]
    15e0:	6868      	ldr	r0, [r5, #4]
    15e2:	695b      	ldr	r3, [r3, #20]
    15e4:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15e6:	4d2f      	ldr	r5, [pc, #188]	; (16a4 <__pi_release+0x214>)
    15e8:	4b2a      	ldr	r3, [pc, #168]	; (1694 <__pi_release+0x204>)
    15ea:	6858      	ldr	r0, [r3, #4]
    15ec:	682b      	ldr	r3, [r5, #0]
    15ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    15f0:	4798      	blx	r3
    15f2:	2801      	cmp	r0, #1
    15f4:	d1f8      	bne.n	15e8 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    15f6:	4b2d      	ldr	r3, [pc, #180]	; (16ac <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15f8:	4a2d      	ldr	r2, [pc, #180]	; (16b0 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    15fa:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15fc:	2300      	movs	r3, #0
    15fe:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1600:	4b29      	ldr	r3, [pc, #164]	; (16a8 <__pi_release+0x218>)
    1602:	6018      	str	r0, [r3, #0]
    1604:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
    1606:	f003 f8d9 	bl	47bc <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
    160a:	f7ff fcbd 	bl	f88 <reinit_uart>
    160e:	4a2c      	ldr	r2, [pc, #176]	; (16c0 <__pi_release+0x230>)
    1610:	6813      	ldr	r3, [r2, #0]
    1612:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    1616:	6013      	str	r3, [r2, #0]
}
    1618:	e76b      	b.n	14f2 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    161a:	4b2a      	ldr	r3, [pc, #168]	; (16c4 <__pi_release+0x234>)
    161c:	2001      	movs	r0, #1
    161e:	681b      	ldr	r3, [r3, #0]
    1620:	68db      	ldr	r3, [r3, #12]
    1622:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1624:	4a28      	ldr	r2, [pc, #160]	; (16c8 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1626:	4929      	ldr	r1, [pc, #164]	; (16cc <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1628:	6813      	ldr	r3, [r2, #0]
    162a:	f023 0301 	bic.w	r3, r3, #1
    162e:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1630:	4b27      	ldr	r3, [pc, #156]	; (16d0 <__pi_release+0x240>)
    1632:	681a      	ldr	r2, [r3, #0]
    1634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1638:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    163a:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
    163e:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1640:	604a      	str	r2, [r1, #4]
    1642:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1644:	687a      	ldr	r2, [r7, #4]
    1646:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1648:	687a      	ldr	r2, [r7, #4]
    164a:	4b22      	ldr	r3, [pc, #136]	; (16d4 <__pi_release+0x244>)
    164c:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    164e:	2201      	movs	r2, #1
    1650:	4b21      	ldr	r3, [pc, #132]	; (16d8 <__pi_release+0x248>)
    1652:	601a      	str	r2, [r3, #0]
    1654:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1656:	4a19      	ldr	r2, [pc, #100]	; (16bc <__pi_release+0x22c>)
    1658:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    165a:	069b      	lsls	r3, r3, #26
    165c:	d4fc      	bmi.n	1658 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    165e:	2201      	movs	r2, #1
    1660:	4b1e      	ldr	r3, [pc, #120]	; (16dc <__pi_release+0x24c>)
			PRCMPowerDomainOff (
    1662:	2037      	movs	r0, #55	; 0x37
    1664:	601a      	str	r2, [r3, #0]
    1666:	4b0f      	ldr	r3, [pc, #60]	; (16a4 <__pi_release+0x214>)
    1668:	681b      	ldr	r3, [r3, #0]
    166a:	699b      	ldr	r3, [r3, #24]
    166c:	4798      	blx	r3
			goto DeepSleep;
    166e:	e763      	b.n	1538 <__pi_release+0xa8>
	__SLEEP;
    1670:	782b      	ldrb	r3, [r5, #0]
    1672:	f36f 0341 	bfc	r3, #1, #1
    1676:	702b      	strb	r3, [r5, #0]
    1678:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
    167a:	e717      	b.n	14ac <__pi_release+0x1c>
    167c:	20005000 	andcs	r5, r0, r0
    1680:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1684:	4009202c 	andmi	r2, r9, ip, lsr #32
    1688:	20000550 	andcs	r0, r0, r0, asr r5
    168c:	200006d4 	ldrdcs	r0, [r0], -r4
    1690:	e000ed10 	and	lr, r0, r0, lsl sp
    1694:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1698:	200006ac 	andcs	r0, r0, ip, lsr #13
    169c:	00005192 	muleq	r0, r2, r1
    16a0:	4008218c 	andmi	r2, r8, ip, lsl #3
    16a4:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    16a8:	4009400c 	andmi	r4, r9, ip
    16ac:	60082028 	andvs	r2, r8, r8, lsr #32
    16b0:	43040180 	movwmi	r0, #16768	; 0x4180
    16b4:	40034000 	andmi	r4, r3, r0
    16b8:	100001d8 	ldrdne	r0, [r0], -r8
    16bc:	40091014 	andmi	r1, r9, r4, lsl r0
    16c0:	40001038 	andmi	r1, r0, r8, lsr r0
    16c4:	100001a0 	andne	r0, r0, r0, lsr #3
    16c8:	40091010 	andmi	r1, r9, r0, lsl r0
    16cc:	40093000 	andmi	r3, r9, r0
    16d0:	40091040 	andmi	r1, r9, r0, asr #32
    16d4:	43220420 			; <UNDEFINED> instruction: 0x43220420
    16d8:	40091018 	andmi	r1, r9, r8, lsl r0
    16dc:	43040188 	movwmi	r0, #16776	; 0x4188
    16e0:	43220200 			; <UNDEFINED> instruction: 0x43220200
    16e4:	40082224 	andmi	r2, r8, r4, lsr #4

000016e8 <halt>:
	cli_tim;
    16e8:	2400      	movs	r4, #0
void halt (void) {
    16ea:	b508      	push	{r3, lr}
	cli_tim;
    16ec:	4b07      	ldr	r3, [pc, #28]	; (170c <halt+0x24>)
	diag ("PicOS halted");
    16ee:	4808      	ldr	r0, [pc, #32]	; (1710 <halt+0x28>)
	cli_tim;
    16f0:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
    16f2:	f000 fb2d 	bl	1d50 <diag>
	mdelay (500);
    16f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    16fa:	f7ff fab7 	bl	c6c <mdelay>
	setpowermode (2);
    16fe:	2002      	movs	r0, #2
    1700:	f7ff feb4 	bl	146c <setpowermode>
	__PCB = NULL;
    1704:	4b03      	ldr	r3, [pc, #12]	; (1714 <halt+0x2c>)
    1706:	601c      	str	r4, [r3, #0]
	release;
    1708:	f7ff fec2 	bl	1490 <__pi_release>
    170c:	43240280 			; <UNDEFINED> instruction: 0x43240280
    1710:	00005195 	muleq	r0, r5, r1
    1714:	20000550 	andcs	r0, r0, r0, asr r5

00001718 <main>:

#include "scheduler.h"

}

int main (void) {
    1718:	b510      	push	{r4, lr}
    171a:	4b11      	ldr	r3, [pc, #68]	; (1760 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    171c:	4911      	ldr	r1, [pc, #68]	; (1764 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    171e:	4a12      	ldr	r2, [pc, #72]	; (1768 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    1720:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1724:	4293      	cmp	r3, r2
    1726:	d1fb      	bne.n	1720 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1728:	4c10      	ldr	r4, [pc, #64]	; (176c <main+0x54>)
	system_init ();
    172a:	f7ff fdc3 	bl	12b4 <system_init>
	tcv_init ();
    172e:	f000 fedb 	bl	24e8 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1732:	6823      	ldr	r3, [r4, #0]
    1734:	2129      	movs	r1, #41	; 0x29
    1736:	2000      	movs	r0, #0
    1738:	681b      	ldr	r3, [r3, #0]
    173a:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    173c:	6823      	ldr	r3, [r4, #0]
    173e:	2120      	movs	r1, #32
    1740:	681b      	ldr	r3, [r3, #0]
    1742:	2001      	movs	r0, #1
    1744:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1746:	2100      	movs	r1, #0
    1748:	4809      	ldr	r0, [pc, #36]	; (1770 <main+0x58>)
    174a:	f000 fadb 	bl	1d04 <__pi_fork>
    174e:	4b09      	ldr	r3, [pc, #36]	; (1774 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
    1750:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1752:	6018      	str	r0, [r3, #0]
	delay (16, 0);
    1754:	2010      	movs	r0, #16
    1756:	f000 f951 	bl	19fc <delay>
    175a:	b662      	cpsie	i

	sti;

	__pi_release ();
    175c:	f7ff fe98 	bl	1490 <__pi_release>
    1760:	20004bfc 	strdcs	r4, [r0], -ip
    1764:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1768:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    176c:	10000184 	andne	r0, r0, r4, lsl #3
    1770:	00000681 	andeq	r0, r0, r1, lsl #13
    1774:	200006d4 	ldrdcs	r0, [r0], -r4

00001778 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
    1778:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
    177a:	4b0d      	ldr	r3, [pc, #52]	; (17b0 <killev+0x38>)
	wfun = (aword)(pid->code);
    177c:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
    177e:	681a      	ldr	r2, [r3, #0]
    1780:	b1aa      	cbz	r2, 17ae <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
    1782:	4614      	mov	r4, r2
    1784:	f834 1b10 	ldrh.w	r1, [r4], #16
    1788:	2300      	movs	r3, #0
    178a:	f001 0107 	and.w	r1, r1, #7
    178e:	e001      	b.n	1794 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
    1790:	42b5      	cmp	r5, r6
    1792:	d006      	beq.n	17a2 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
    1794:	4299      	cmp	r1, r3
    1796:	dd08      	ble.n	17aa <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
    1798:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    179c:	3301      	adds	r3, #1
    179e:	42a8      	cmp	r0, r5
    17a0:	d1f6      	bne.n	1790 <killev+0x18>
			    ) {
				wakeupev (i, j);
    17a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    17a6:	889b      	ldrh	r3, [r3, #4]
    17a8:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    17aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    17ac:	e7e8      	b.n	1780 <killev+0x8>
				break;
			}
		}
	}
}
    17ae:	bd70      	pop	{r4, r5, r6, pc}
    17b0:	20000550 	andcs	r0, r0, r0, asr r5

000017b4 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b4:	4a1d      	ldr	r2, [pc, #116]	; (182c <qfree+0x78>)
static void qfree (aword *ch) {
    17b6:	b530      	push	{r4, r5, lr}
    17b8:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17ba:	6813      	ldr	r3, [r2, #0]
    17bc:	b93b      	cbnz	r3, 17ce <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    17be:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
    17c0:	4a1a      	ldr	r2, [pc, #104]	; (182c <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    17c2:	bb53      	cbnz	r3, 181a <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
    17c4:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
    17c6:	4b1a      	ldr	r3, [pc, #104]	; (1830 <qfree+0x7c>)
	m_setnextp (cc, ch);
    17c8:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
    17ca:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
    17cc:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    17ce:	e953 1501 	ldrd	r1, r5, [r3, #-4]
    17d2:	3101      	adds	r1, #1
    17d4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    17d8:	4288      	cmp	r0, r1
    17da:	d10b      	bne.n	17f4 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
    17dc:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
    17de:	f850 0c04 	ldr.w	r0, [r0, #-4]
    17e2:	f853 1c04 	ldr.w	r1, [r3, #-4]
    17e6:	4401      	add	r1, r0
    17e8:	4618      	mov	r0, r3
    17ea:	3101      	adds	r1, #1
    17ec:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	e7e3      	b.n	17bc <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17f4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    17f8:	3101      	adds	r1, #1
    17fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    17fe:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
    1800:	bf03      	ittte	eq
    1802:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
    1804:	f850 1c04 	ldreq.w	r1, [r0, #-4]
    1808:	f853 5c04 	ldreq.w	r5, [r3, #-4]
    180c:	461a      	movne	r2, r3
    180e:	bf02      	ittt	eq
    1810:	1949      	addeq	r1, r1, r5
    1812:	3101      	addeq	r1, #1
    1814:	f840 1c04 	streq.w	r1, [r0, #-4]
    1818:	e7ea      	b.n	17f0 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
    181a:	f853 4c04 	ldr.w	r4, [r3, #-4]
    181e:	f850 1c04 	ldr.w	r1, [r0, #-4]
    1822:	428c      	cmp	r4, r1
    1824:	d2ce      	bcs.n	17c4 <qfree+0x10>
		chunk = m_nextp (chunk))
    1826:	461a      	mov	r2, r3
    1828:	681b      	ldr	r3, [r3, #0]
    182a:	e7ca      	b.n	17c2 <qfree+0xe>
    182c:	20000564 	andcs	r0, r0, r4, ror #10
    1830:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00001834 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1834:	4a03      	ldr	r2, [pc, #12]	; (1844 <dgout+0x10>)
    1836:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    1838:	071b      	lsls	r3, r3, #28
    183a:	d4fc      	bmi.n	1836 <dgout+0x2>
	diag_wchar (c, a);
    183c:	4b02      	ldr	r3, [pc, #8]	; (1848 <dgout+0x14>)
    183e:	b2c0      	uxtb	r0, r0
    1840:	6018      	str	r0, [r3, #0]
}
    1842:	4770      	bx	lr
    1844:	40001018 	andmi	r1, r0, r8, lsl r0
    1848:	40001000 	andmi	r1, r0, r0

0000184c <__pi_badstate>:
	syserror (ESTATE, "state");
    184c:	2007      	movs	r0, #7
void __pi_badstate (void) {
    184e:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    1850:	4901      	ldr	r1, [pc, #4]	; (1858 <__pi_badstate+0xc>)
    1852:	f7ff fa5f 	bl	d14 <__pi_syserror>
    1856:	bf00      	nop
    1858:	000051e8 	andeq	r5, r0, r8, ror #3

0000185c <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    185c:	4a08      	ldr	r2, [pc, #32]	; (1880 <utimer_add+0x24>)
void utimer_add (address ut) {
    185e:	4603      	mov	r3, r0
    1860:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    1862:	2000      	movs	r0, #0
void utimer_add (address ut) {
    1864:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    1866:	f852 4b04 	ldr.w	r4, [r2], #4
    186a:	b12c      	cbz	r4, 1878 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    186c:	3001      	adds	r0, #1
    186e:	2804      	cmp	r0, #4
    1870:	d1f9      	bne.n	1866 <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    1872:	4904      	ldr	r1, [pc, #16]	; (1884 <utimer_add+0x28>)
    1874:	f7ff fa4e 	bl	d14 <__pi_syserror>
	__pi_utims [i] = ut;
    1878:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    187c:	bd10      	pop	{r4, pc}
    187e:	bf00      	nop
    1880:	200006c4 	andcs	r0, r0, r4, asr #13
    1884:	000051ee 	andeq	r5, r0, lr, ror #3

00001888 <__pi_utimer_set>:
	*t = v;
    1888:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    188a:	f7ff ba8d 	b.w	da8 <tci_run_auxiliary_timer>
	...

00001890 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    1890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1892:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1894:	4608      	mov	r0, r1
    1896:	f7ff fb25 	bl	ee4 <tci_update_delay_ticks>
    189a:	2800      	cmp	r0, #0
    189c:	d154      	bne.n	1948 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    189e:	4b2b      	ldr	r3, [pc, #172]	; (194c <update_n_wake+0xbc>)
    18a0:	4d2b      	ldr	r5, [pc, #172]	; (1950 <update_n_wake+0xc0>)
    18a2:	8819      	ldrh	r1, [r3, #0]
    18a4:	882a      	ldrh	r2, [r5, #0]
    18a6:	b289      	uxth	r1, r1
    18a8:	428a      	cmp	r2, r1
    18aa:	492a      	ldr	r1, [pc, #168]	; (1954 <update_n_wake+0xc4>)
    18ac:	d803      	bhi.n	18b6 <update_n_wake+0x26>
    18ae:	8808      	ldrh	r0, [r1, #0]
    18b0:	b280      	uxth	r0, r0
    18b2:	4282      	cmp	r2, r0
    18b4:	d20d      	bcs.n	18d2 <update_n_wake+0x42>
    18b6:	881e      	ldrh	r6, [r3, #0]
    18b8:	8808      	ldrh	r0, [r1, #0]
    18ba:	b2b6      	uxth	r6, r6
    18bc:	b280      	uxth	r0, r0
    18be:	4286      	cmp	r6, r0
    18c0:	d236      	bcs.n	1930 <update_n_wake+0xa0>
    18c2:	8818      	ldrh	r0, [r3, #0]
    18c4:	b280      	uxth	r0, r0
    18c6:	4282      	cmp	r2, r0
    18c8:	d903      	bls.n	18d2 <update_n_wake+0x42>
    18ca:	8808      	ldrh	r0, [r1, #0]
    18cc:	b280      	uxth	r0, r0
    18ce:	4282      	cmp	r2, r0
    18d0:	d32e      	bcc.n	1930 <update_n_wake+0xa0>
		for_all_tasks (i) {
    18d2:	4a21      	ldr	r2, [pc, #132]	; (1958 <update_n_wake+0xc8>)
    18d4:	6810      	ldr	r0, [r2, #0]
    18d6:	b918      	cbnz	r0, 18e0 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    18d8:	8818      	ldrh	r0, [r3, #0]
    18da:	4404      	add	r4, r0
    18dc:	802c      	strh	r4, [r5, #0]
    18de:	e02c      	b.n	193a <update_n_wake+0xaa>
			if (!twaiting (i))
    18e0:	8806      	ldrh	r6, [r0, #0]
    18e2:	0732      	lsls	r2, r6, #28
    18e4:	d51b      	bpl.n	191e <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18e6:	881f      	ldrh	r7, [r3, #0]
    18e8:	8842      	ldrh	r2, [r0, #2]
    18ea:	b2bf      	uxth	r7, r7
    18ec:	42ba      	cmp	r2, r7
    18ee:	d803      	bhi.n	18f8 <update_n_wake+0x68>
    18f0:	880f      	ldrh	r7, [r1, #0]
    18f2:	b2bf      	uxth	r7, r7
    18f4:	42ba      	cmp	r2, r7
    18f6:	d20f      	bcs.n	1918 <update_n_wake+0x88>
    18f8:	f8b3 c000 	ldrh.w	ip, [r3]
    18fc:	880f      	ldrh	r7, [r1, #0]
    18fe:	fa1f fc8c 	uxth.w	ip, ip
    1902:	b2bf      	uxth	r7, r7
    1904:	45bc      	cmp	ip, r7
    1906:	d20c      	bcs.n	1922 <update_n_wake+0x92>
    1908:	881f      	ldrh	r7, [r3, #0]
    190a:	b2bf      	uxth	r7, r7
    190c:	42ba      	cmp	r2, r7
    190e:	d903      	bls.n	1918 <update_n_wake+0x88>
    1910:	880f      	ldrh	r7, [r1, #0]
    1912:	b2bf      	uxth	r7, r7
    1914:	42ba      	cmp	r2, r7
    1916:	d304      	bcc.n	1922 <update_n_wake+0x92>
				wakeuptm (i);
    1918:	f026 060f 	bic.w	r6, r6, #15
    191c:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    191e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1920:	e7d9      	b.n	18d6 <update_n_wake+0x46>
				d = i->Timer - znew;
    1922:	881e      	ldrh	r6, [r3, #0]
    1924:	1b92      	subs	r2, r2, r6
    1926:	b292      	uxth	r2, r2
    1928:	4294      	cmp	r4, r2
    192a:	bf28      	it	cs
    192c:	4614      	movcs	r4, r2
    192e:	e7f6      	b.n	191e <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    1930:	8818      	ldrh	r0, [r3, #0]
    1932:	1a12      	subs	r2, r2, r0
    1934:	b292      	uxth	r2, r2
    1936:	4294      	cmp	r4, r2
    1938:	d9ce      	bls.n	18d8 <update_n_wake+0x48>
	__pi_old = znew;
    193a:	881b      	ldrh	r3, [r3, #0]
    193c:	b29b      	uxth	r3, r3
    193e:	800b      	strh	r3, [r1, #0]
}
    1940:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    1944:	f7ff ba10 	b.w	d68 <tci_run_delay_timer>
}
    1948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    194a:	bf00      	nop
    194c:	200006c0 	andcs	r0, r0, r0, asr #13
    1950:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    1954:	200006b6 			; <UNDEFINED> instruction: 0x200006b6
    1958:	20000550 	andcs	r0, r0, r0, asr r5

0000195c <proceed>:
void proceed (word state) {
    195c:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    195e:	4b03      	ldr	r3, [pc, #12]	; (196c <proceed+0x10>)
    1960:	0100      	lsls	r0, r0, #4
    1962:	681b      	ldr	r3, [r3, #0]
    1964:	8018      	strh	r0, [r3, #0]
	release;
    1966:	f7ff fd93 	bl	1490 <__pi_release>
    196a:	bf00      	nop
    196c:	200006d4 	ldrdcs	r0, [r0], -r4

00001970 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1970:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    1972:	4b0a      	ldr	r3, [pc, #40]	; (199c <__pi_wait+0x2c>)
    1974:	681c      	ldr	r4, [r3, #0]
    1976:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1978:	f013 0f04 	tst.w	r3, #4
    197c:	f003 0207 	and.w	r2, r3, #7
    1980:	d003      	beq.n	198a <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    1982:	2005      	movs	r0, #5
    1984:	4906      	ldr	r1, [pc, #24]	; (19a0 <__pi_wait+0x30>)
    1986:	f7ff f9c5 	bl	d14 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    198a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    198e:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1990:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    1992:	8191      	strh	r1, [r2, #12]
    1994:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    1996:	8023      	strh	r3, [r4, #0]
}
    1998:	bd10      	pop	{r4, pc}
    199a:	bf00      	nop
    199c:	200006d4 	ldrdcs	r0, [r0], -r4
    19a0:	000051f3 	strdeq	r5, [r0], -r3

000019a4 <__pi_trigger>:
void __pi_trigger (aword event) {
    19a4:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    19a6:	4b0b      	ldr	r3, [pc, #44]	; (19d4 <__pi_trigger+0x30>)
    19a8:	681a      	ldr	r2, [r3, #0]
    19aa:	b192      	cbz	r2, 19d2 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    19ac:	4614      	mov	r4, r2
    19ae:	2300      	movs	r3, #0
    19b0:	f834 1b10 	ldrh.w	r1, [r4], #16
    19b4:	f001 0107 	and.w	r1, r1, #7
    19b8:	4299      	cmp	r1, r3
    19ba:	dd08      	ble.n	19ce <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    19bc:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    19c0:	3301      	adds	r3, #1
    19c2:	4285      	cmp	r5, r0
    19c4:	d1f8      	bne.n	19b8 <__pi_trigger+0x14>
				wakeupev (i, j);
    19c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    19ca:	889b      	ldrh	r3, [r3, #4]
    19cc:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    19ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    19d0:	e7eb      	b.n	19aa <__pi_trigger+0x6>
}
    19d2:	bd30      	pop	{r4, r5, pc}
    19d4:	20000550 	andcs	r0, r0, r0, asr r5

000019d8 <__pi_join>:
aword __pi_join (aword pid, word st) {
    19d8:	b510      	push	{r4, lr}
    19da:	4604      	mov	r4, r0
	for_all_tasks (i) {
    19dc:	4b06      	ldr	r3, [pc, #24]	; (19f8 <__pi_join+0x20>)
    19de:	681b      	ldr	r3, [r3, #0]
    19e0:	b90b      	cbnz	r3, 19e6 <__pi_join+0xe>
	return 0;
    19e2:	461c      	mov	r4, r3
    19e4:	e004      	b.n	19f0 <__pi_join+0x18>
		if ((aword)i == pid) {
    19e6:	42a3      	cmp	r3, r4
    19e8:	d104      	bne.n	19f4 <__pi_join+0x1c>
			__pi_wait (pid, st);
    19ea:	4620      	mov	r0, r4
    19ec:	f7ff ffc0 	bl	1970 <__pi_wait>
}
    19f0:	4620      	mov	r0, r4
    19f2:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    19f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    19f6:	e7f3      	b.n	19e0 <__pi_join+0x8>
    19f8:	20000550 	andcs	r0, r0, r0, asr r5

000019fc <delay>:
void delay (word d, word state) {
    19fc:	b538      	push	{r3, r4, r5, lr}
    19fe:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    1a00:	4d0a      	ldr	r5, [pc, #40]	; (1a2c <delay+0x30>)
    1a02:	682a      	ldr	r2, [r5, #0]
    1a04:	8813      	ldrh	r3, [r2, #0]
    1a06:	f003 0307 	and.w	r3, r3, #7
    1a0a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    1a0e:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    1a10:	2101      	movs	r1, #1
    1a12:	f7ff ff3d 	bl	1890 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    1a16:	4b06      	ldr	r3, [pc, #24]	; (1a30 <delay+0x34>)
    1a18:	8818      	ldrh	r0, [r3, #0]
    1a1a:	682b      	ldr	r3, [r5, #0]
    1a1c:	4404      	add	r4, r0
    1a1e:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    1a20:	682a      	ldr	r2, [r5, #0]
    1a22:	8813      	ldrh	r3, [r2, #0]
    1a24:	f043 0308 	orr.w	r3, r3, #8
    1a28:	8013      	strh	r3, [r2, #0]
}
    1a2a:	bd38      	pop	{r3, r4, r5, pc}
    1a2c:	200006d4 	ldrdcs	r0, [r0], -r4
    1a30:	200006b6 			; <UNDEFINED> instruction: 0x200006b6

00001a34 <running>:
	if (fun == NULL)
    1a34:	4603      	mov	r3, r0
    1a36:	b910      	cbnz	r0, 1a3e <running+0xa>
		return (int) __pi_curr;
    1a38:	4b05      	ldr	r3, [pc, #20]	; (1a50 <running+0x1c>)
    1a3a:	6818      	ldr	r0, [r3, #0]
    1a3c:	4770      	bx	lr
	for_all_tasks (i)
    1a3e:	4a05      	ldr	r2, [pc, #20]	; (1a54 <running+0x20>)
    1a40:	6810      	ldr	r0, [r2, #0]
    1a42:	b900      	cbnz	r0, 1a46 <running+0x12>
}
    1a44:	4770      	bx	lr
		if (i->code == fun)
    1a46:	6842      	ldr	r2, [r0, #4]
    1a48:	429a      	cmp	r2, r3
    1a4a:	d0fb      	beq.n	1a44 <running+0x10>
	for_all_tasks (i)
    1a4c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1a4e:	e7f8      	b.n	1a42 <running+0xe>
    1a50:	200006d4 	ldrdcs	r0, [r0], -r4
    1a54:	20000550 	andcs	r0, r0, r0, asr r5

00001a58 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1a58:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1a5a:	2000      	movs	r0, #0
    1a5c:	5c1a      	ldrb	r2, [r3, r0]
    1a5e:	b902      	cbnz	r2, 1a62 <__pi_strlen+0xa>
}
    1a60:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    1a62:	3001      	adds	r0, #1
    1a64:	e7fa      	b.n	1a5c <__pi_strlen+0x4>

00001a66 <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    1a66:	3801      	subs	r0, #1
    1a68:	f811 3b01 	ldrb.w	r3, [r1], #1
    1a6c:	f800 3f01 	strb.w	r3, [r0, #1]!
    1a70:	2b00      	cmp	r3, #0
    1a72:	d1f9      	bne.n	1a68 <__pi_strcpy+0x2>
}
    1a74:	4770      	bx	lr

00001a76 <__pi_strncpy>:
	while (n-- && (*s != '\0'))
    1a76:	3901      	subs	r1, #1
    1a78:	4402      	add	r2, r0
    1a7a:	4290      	cmp	r0, r2
    1a7c:	d102      	bne.n	1a84 <__pi_strncpy+0xe>
	*d = '\0';
    1a7e:	2300      	movs	r3, #0
    1a80:	7003      	strb	r3, [r0, #0]
}
    1a82:	4770      	bx	lr
	while (n-- && (*s != '\0'))
    1a84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d0f8      	beq.n	1a7e <__pi_strncpy+0x8>
		*d++ = *s++;
    1a8c:	f800 3b01 	strb.w	r3, [r0], #1
    1a90:	e7f3      	b.n	1a7a <__pi_strncpy+0x4>

00001a92 <__pi_memcpy>:
	while (n--)
    1a92:	3801      	subs	r0, #1
    1a94:	440a      	add	r2, r1
    1a96:	4291      	cmp	r1, r2
    1a98:	d100      	bne.n	1a9c <__pi_memcpy+0xa>
}
    1a9a:	4770      	bx	lr
		*dest++ = *src++;
    1a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1aa0:	f800 3f01 	strb.w	r3, [r0, #1]!
    1aa4:	e7f7      	b.n	1a96 <__pi_memcpy+0x4>

00001aa6 <__pi_memset>:
	while (n--)
    1aa6:	4402      	add	r2, r0
    1aa8:	4290      	cmp	r0, r2
    1aaa:	d100      	bne.n	1aae <__pi_memset+0x8>
}
    1aac:	4770      	bx	lr
		*dest++ = c;
    1aae:	f800 1b01 	strb.w	r1, [r0], #1
    1ab2:	e7f9      	b.n	1aa8 <__pi_memset+0x2>

00001ab4 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1ab4:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    1ab6:	b119      	cbz	r1, 1ac0 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1ab8:	2003      	movs	r0, #3
    1aba:	4905      	ldr	r1, [pc, #20]	; (1ad0 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1abc:	f7ff f92a 	bl	d14 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1ac0:	4b04      	ldr	r3, [pc, #16]	; (1ad4 <adddevfunc+0x20>)
    1ac2:	681a      	ldr	r2, [r3, #0]
    1ac4:	b112      	cbz	r2, 1acc <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1ac6:	2004      	movs	r0, #4
    1ac8:	4901      	ldr	r1, [pc, #4]	; (1ad0 <adddevfunc+0x1c>)
    1aca:	e7f7      	b.n	1abc <adddevfunc+0x8>
	ioreq [loc] = rf;
    1acc:	6018      	str	r0, [r3, #0]
}
    1ace:	bd08      	pop	{r3, pc}
    1ad0:	000051f6 	strdeq	r5, [r0], -r6
    1ad4:	20000554 	andcs	r0, r0, r4, asr r5

00001ad8 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1adc:	4604      	mov	r4, r0
    1ade:	4616      	mov	r6, r2
    1ae0:	461d      	mov	r5, r3
    1ae2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ae6:	b921      	cbnz	r1, 1af2 <io+0x1a>
    1ae8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1b70 <io+0x98>
    1aec:	f8d9 3000 	ldr.w	r3, [r9]
    1af0:	b91b      	cbnz	r3, 1afa <io+0x22>
		syserror (ENODEVICE, "io");
    1af2:	2001      	movs	r0, #1
    1af4:	491d      	ldr	r1, [pc, #116]	; (1b6c <io+0x94>)
    1af6:	f7ff f90d 	bl	d14 <__pi_syserror>
	if (len == 0)
    1afa:	f1b8 0f00 	cmp.w	r8, #0
    1afe:	d028      	beq.n	1b52 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1b00:	4642      	mov	r2, r8
    1b02:	4629      	mov	r1, r5
    1b04:	4630      	mov	r0, r6
    1b06:	4798      	blx	r3
	if (ret >= 0)
    1b08:	2800      	cmp	r0, #0
    1b0a:	da23      	bge.n	1b54 <io+0x7c>
	if (ret == -1) {
    1b0c:	1c41      	adds	r1, r0, #1
    1b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1b12:	d108      	bne.n	1b26 <io+0x4e>
		if (retry == WNONE)
    1b14:	429c      	cmp	r4, r3
    1b16:	d01c      	beq.n	1b52 <io+0x7a>
		iowait (dev, operation, retry);
    1b18:	4621      	mov	r1, r4
    1b1a:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1b1e:	f7ff ff27 	bl	1970 <__pi_wait>
			release;
    1b22:	f7ff fcb5 	bl	1490 <__pi_release>
	if (ret == -2) {
    1b26:	1c82      	adds	r2, r0, #2
    1b28:	d116      	bne.n	1b58 <io+0x80>
		if (retry != WNONE) {
    1b2a:	429c      	cmp	r4, r3
    1b2c:	f8d9 9000 	ldr.w	r9, [r9]
    1b30:	d00a      	beq.n	1b48 <io+0x70>
			iowait (dev, operation, retry);
    1b32:	4621      	mov	r1, r4
    1b34:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1b38:	f7ff ff1a 	bl	1970 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1b3c:	4642      	mov	r2, r8
    1b3e:	4629      	mov	r1, r5
    1b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b44:	47c8      	blx	r9
    1b46:	e7ec      	b.n	1b22 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1b48:	4642      	mov	r2, r8
    1b4a:	4629      	mov	r1, r5
    1b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b50:	47c8      	blx	r9
		return 0;
    1b52:	2000      	movs	r0, #0
}
    1b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1b58:	429c      	cmp	r4, r3
    1b5a:	d0fa      	beq.n	1b52 <io+0x7a>
		delay (-ret - 2, retry);
    1b5c:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1b60:	30fe      	adds	r0, #254	; 0xfe
    1b62:	4621      	mov	r1, r4
    1b64:	b280      	uxth	r0, r0
    1b66:	f7ff ff49 	bl	19fc <delay>
		release;
    1b6a:	e7da      	b.n	1b22 <io+0x4a>
    1b6c:	000051fb 	strdeq	r5, [r0], -fp
    1b70:	20000554 	andcs	r0, r0, r4, asr r5

00001b74 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b74:	4a0d      	ldr	r2, [pc, #52]	; (1bac <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1b76:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b78:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1b7c:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1b80:	089b      	lsrs	r3, r3, #2
    1b82:	1e59      	subs	r1, r3, #1
    1b84:	29ff      	cmp	r1, #255	; 0xff
    1b86:	d803      	bhi.n	1b90 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1b88:	2004      	movs	r0, #4
    1b8a:	4909      	ldr	r1, [pc, #36]	; (1bb0 <__pi_malloc_init+0x3c>)
    1b8c:	f7ff f8c2 	bl	d14 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b90:	4908      	ldr	r1, [pc, #32]	; (1bb4 <__pi_malloc_init+0x40>)
    1b92:	1d10      	adds	r0, r2, #4
    1b94:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b96:	2000      	movs	r0, #0
    1b98:	4907      	ldr	r1, [pc, #28]	; (1bb8 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b9a:	3b02      	subs	r3, #2
    1b9c:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b9e:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1ba2:	4a06      	ldr	r2, [pc, #24]	; (1bbc <__pi_malloc_init+0x48>)
    1ba4:	6013      	str	r3, [r2, #0]
    1ba6:	4a06      	ldr	r2, [pc, #24]	; (1bc0 <__pi_malloc_init+0x4c>)
    1ba8:	6013      	str	r3, [r2, #0]
}
    1baa:	bd08      	pop	{r3, pc}
    1bac:	200006d8 	ldrdcs	r0, [r0], -r8
    1bb0:	000051fe 	strdeq	r5, [r0], -lr
    1bb4:	20000564 	andcs	r0, r0, r4, ror #10
    1bb8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1bbc:	20000558 	andcs	r0, r0, r8, asr r5
    1bc0:	20000560 	andcs	r0, r0, r0, ror #10

00001bc4 <__pi_free>:
void __pi_free (aword *ch) {
    1bc4:	b508      	push	{r3, lr}
	if (ch == NULL)
    1bc6:	b1c8      	cbz	r0, 1bfc <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1bc8:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1bcc:	2b00      	cmp	r3, #0
    1bce:	db03      	blt.n	1bd8 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1bd0:	2006      	movs	r0, #6
    1bd2:	490b      	ldr	r1, [pc, #44]	; (1c00 <__pi_free+0x3c>)
    1bd4:	f7ff f89e 	bl	d14 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1bd8:	490a      	ldr	r1, [pc, #40]	; (1c04 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1bda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1bde:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1be0:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1be4:	4413      	add	r3, r2
    1be6:	600b      	str	r3, [r1, #0]
	QFREE;
    1be8:	f7ff fde4 	bl	17b4 <qfree>
	if (mevent [MA_NP] . nwait) {
    1bec:	4806      	ldr	r0, [pc, #24]	; (1c08 <__pi_free+0x44>)
    1bee:	7803      	ldrb	r3, [r0, #0]
    1bf0:	b123      	cbz	r3, 1bfc <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1bf2:	f7ff fed7 	bl	19a4 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1bf6:	7803      	ldrb	r3, [r0, #0]
    1bf8:	3b01      	subs	r3, #1
    1bfa:	7003      	strb	r3, [r0, #0]
}
    1bfc:	bd08      	pop	{r3, pc}
    1bfe:	bf00      	nop
    1c00:	00005203 	andeq	r5, r0, r3, lsl #4
    1c04:	20000558 	andcs	r0, r0, r8, asr r5
    1c08:	2000055c 	andcs	r0, r0, ip, asr r5

00001c0c <kill>:
void kill (aword pid) {
    1c0c:	b510      	push	{r4, lr}
	if (pid == 0)
    1c0e:	b908      	cbnz	r0, 1c14 <kill+0x8>
		pid = (aword) __pi_curr;
    1c10:	4b0f      	ldr	r3, [pc, #60]	; (1c50 <kill+0x44>)
    1c12:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1c14:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1c16:	4b0f      	ldr	r3, [pc, #60]	; (1c54 <kill+0x48>)
    1c18:	681c      	ldr	r4, [r3, #0]
    1c1a:	b91c      	cbnz	r4, 1c24 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1c1c:	2003      	movs	r0, #3
    1c1e:	490e      	ldr	r1, [pc, #56]	; (1c58 <kill+0x4c>)
    1c20:	f7ff f878 	bl	d14 <__pi_syserror>
		if ((aword)i == pid) {
    1c24:	4284      	cmp	r4, r0
    1c26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1c28:	d10e      	bne.n	1c48 <kill+0x3c>
			if (j == NULL)
    1c2a:	b95a      	cbnz	r2, 1c44 <kill+0x38>
				__PCB = i->Next;
    1c2c:	6019      	str	r1, [r3, #0]
			killev (i);
    1c2e:	4620      	mov	r0, r4
    1c30:	f7ff fda2 	bl	1778 <killev>
			ufree (i);
    1c34:	f7ff ffc6 	bl	1bc4 <__pi_free>
			if (i == __pi_curr)
    1c38:	4b05      	ldr	r3, [pc, #20]	; (1c50 <kill+0x44>)
    1c3a:	681b      	ldr	r3, [r3, #0]
    1c3c:	42a3      	cmp	r3, r4
    1c3e:	d106      	bne.n	1c4e <kill+0x42>
				release;
    1c40:	f7ff fc26 	bl	1490 <__pi_release>
				j->Next = i->Next;
    1c44:	62d1      	str	r1, [r2, #44]	; 0x2c
    1c46:	e7f2      	b.n	1c2e <kill+0x22>
    1c48:	4622      	mov	r2, r4
    1c4a:	460c      	mov	r4, r1
    1c4c:	e7e5      	b.n	1c1a <kill+0xe>
}
    1c4e:	bd10      	pop	{r4, pc}
    1c50:	200006d4 	ldrdcs	r0, [r0], -r4
    1c54:	20000550 	andcs	r0, r0, r0, asr r5
    1c58:	00005208 	andeq	r5, r0, r8, lsl #4

00001c5c <__pi_malloc>:
	if (size < 8)
    1c5c:	2807      	cmp	r0, #7
		_size = 2;
    1c5e:	bf98      	it	ls
    1c60:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    1c62:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c64:	4b21      	ldr	r3, [pc, #132]	; (1cec <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    1c66:	bf88      	it	hi
    1c68:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c6a:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c6c:	4920      	ldr	r1, [pc, #128]	; (1cf0 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1c6e:	bf88      	it	hi
    1c70:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c72:	b94c      	cbnz	r4, 1c88 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1c74:	4a1f      	ldr	r2, [pc, #124]	; (1cf4 <__pi_malloc+0x98>)
    1c76:	7853      	ldrb	r3, [r2, #1]
    1c78:	2bff      	cmp	r3, #255	; 0xff
    1c7a:	d001      	beq.n	1c80 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1c7c:	3301      	adds	r3, #1
    1c7e:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1c80:	2200      	movs	r2, #0
    1c82:	4b1d      	ldr	r3, [pc, #116]	; (1cf8 <__pi_malloc+0x9c>)
    1c84:	601a      	str	r2, [r3, #0]
	return chunk;
    1c86:	e02f      	b.n	1ce8 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c88:	6862      	ldr	r2, [r4, #4]
    1c8a:	428a      	cmp	r2, r1
    1c8c:	d003      	beq.n	1c96 <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1c8e:	2006      	movs	r0, #6
    1c90:	491a      	ldr	r1, [pc, #104]	; (1cfc <__pi_malloc+0xa0>)
    1c92:	f7ff f83f 	bl	d14 <__pi_syserror>
		if (m_size (chunk) >= _size)
    1c96:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1c9a:	4285      	cmp	r5, r0
    1c9c:	d202      	bcs.n	1ca4 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1c9e:	4623      	mov	r3, r4
    1ca0:	4614      	mov	r4, r2
    1ca2:	e7e6      	b.n	1c72 <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1ca4:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ca6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1caa:	1a1b      	subs	r3, r3, r0
    1cac:	2b08      	cmp	r3, #8
    1cae:	d909      	bls.n	1cc4 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1cb0:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1cb4:	3001      	adds	r0, #1
    1cb6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1cba:	3b01      	subs	r3, #1
    1cbc:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1cc0:	f7ff fd78 	bl	17b4 <qfree>
		mevent [MA_NP] . nfail = 0;
    1cc4:	2200      	movs	r2, #0
    1cc6:	4b0b      	ldr	r3, [pc, #44]	; (1cf4 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1cc8:	490d      	ldr	r1, [pc, #52]	; (1d00 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1cca:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1ccc:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1cd0:	680b      	ldr	r3, [r1, #0]
    1cd2:	1a9b      	subs	r3, r3, r2
    1cd4:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1cd6:	4908      	ldr	r1, [pc, #32]	; (1cf8 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1cd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1cdc:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1cde:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ce2:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1ce4:	bf38      	it	cc
    1ce6:	600b      	strcc	r3, [r1, #0]
}
    1ce8:	4620      	mov	r0, r4
    1cea:	bd38      	pop	{r3, r4, r5, pc}
    1cec:	20000564 	andcs	r0, r0, r4, ror #10
    1cf0:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1cf4:	2000055c 	andcs	r0, r0, ip, asr r5
    1cf8:	20000560 	andcs	r0, r0, r0, ror #10
    1cfc:	0000520c 	andeq	r5, r0, ip, lsl #4
    1d00:	20000558 	andcs	r0, r0, r8, asr r5

00001d04 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1d04:	b538      	push	{r3, r4, r5, lr}
    1d06:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1d08:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1d0a:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1d0c:	f7ff ffa6 	bl	1c5c <__pi_malloc>
    1d10:	2300      	movs	r3, #0
    1d12:	b138      	cbz	r0, 1d24 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1d14:	4a07      	ldr	r2, [pc, #28]	; (1d34 <__pi_fork+0x30>)
	i->Status = 0;
    1d16:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1d18:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1d1a:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1d1c:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1d20:	b90b      	cbnz	r3, 1d26 <__pi_fork+0x22>
			__PCB = i;
    1d22:	6010      	str	r0, [r2, #0]
}
    1d24:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1d26:	461a      	mov	r2, r3
    1d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d1fb      	bne.n	1d26 <__pi_fork+0x22>
			j->Next = i;
    1d2e:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1d30:	e7f8      	b.n	1d24 <__pi_fork+0x20>
    1d32:	bf00      	nop
    1d34:	20000550 	andcs	r0, r0, r0, asr r5

00001d38 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1d38:	4a04      	ldr	r2, [pc, #16]	; (1d4c <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1d3a:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1d3c:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1d3e:	4803      	ldr	r0, [pc, #12]	; (1d4c <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1d40:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1d42:	bf1c      	itt	ne
    1d44:	3301      	addne	r3, #1
    1d46:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1d48:	f7ff be12 	b.w	1970 <__pi_wait>
    1d4c:	2000055c 	andcs	r0, r0, ip, asr r5

00001d50 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1d50:	b40f      	push	{r0, r1, r2, r3}
    1d52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1d56:	ab0a      	add	r3, sp, #40	; 0x28
    1d58:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1d5c:	2015      	movs	r0, #21
	va_start (ap, mess);
    1d5e:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1d60:	4b46      	ldr	r3, [pc, #280]	; (1e7c <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1d62:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1d64:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    1d66:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1e84 <diag+0x134>
	diag_disable_int (a, is);
    1d6a:	695b      	ldr	r3, [r3, #20]
    1d6c:	4798      	blx	r3
	while (*mess != '\0') {
    1d6e:	7820      	ldrb	r0, [r4, #0]
    1d70:	b998      	cbnz	r0, 1d9a <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    1d72:	200d      	movs	r0, #13
    1d74:	f7ff fd5e 	bl	1834 <dgout>
	dgout ('\n');
    1d78:	200a      	movs	r0, #10
    1d7a:	f7ff fd5b 	bl	1834 <dgout>
    1d7e:	4a40      	ldr	r2, [pc, #256]	; (1e80 <diag+0x130>)
    1d80:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    1d82:	071b      	lsls	r3, r3, #28
    1d84:	d4fc      	bmi.n	1d80 <diag+0x30>
	diag_enable_int (a, is);
    1d86:	4b3d      	ldr	r3, [pc, #244]	; (1e7c <diag+0x12c>)
    1d88:	2015      	movs	r0, #21
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	691b      	ldr	r3, [r3, #16]
    1d8e:	4798      	blx	r3
}
    1d90:	b003      	add	sp, #12
    1d92:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d96:	b004      	add	sp, #16
    1d98:	4770      	bx	lr
		if (*mess == '%') {
    1d9a:	2825      	cmp	r0, #37	; 0x25
    1d9c:	f104 0601 	add.w	r6, r4, #1
    1da0:	d169      	bne.n	1e76 <diag+0x126>
			if (*mess == 'l') {
    1da2:	9b01      	ldr	r3, [sp, #4]
    1da4:	7862      	ldrb	r2, [r4, #1]
    1da6:	f853 1b04 	ldr.w	r1, [r3], #4
    1daa:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1dac:	bf08      	it	eq
    1dae:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1db0:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1db2:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1db4:	bf0c      	ite	eq
    1db6:	2520      	moveq	r5, #32
				bc = 16;
    1db8:	2510      	movne	r5, #16
			switch (*mess) {
    1dba:	2b75      	cmp	r3, #117	; 0x75
    1dbc:	d04e      	beq.n	1e5c <diag+0x10c>
    1dbe:	d80a      	bhi.n	1dd6 <diag+0x86>
    1dc0:	2b64      	cmp	r3, #100	; 0x64
    1dc2:	d01c      	beq.n	1dfe <diag+0xae>
    1dc4:	2b73      	cmp	r3, #115	; 0x73
    1dc6:	d052      	beq.n	1e6e <diag+0x11e>
				dgout ('%');
    1dc8:	2025      	movs	r0, #37	; 0x25
    1dca:	f7ff fd33 	bl	1834 <dgout>
				dgout (*mess);
    1dce:	7830      	ldrb	r0, [r6, #0]
    1dd0:	f7ff fd30 	bl	1834 <dgout>
    1dd4:	e010      	b.n	1df8 <diag+0xa8>
			switch (*mess) {
    1dd6:	2b78      	cmp	r3, #120	; 0x78
    1dd8:	d1f6      	bne.n	1dc8 <diag+0x78>
    1dda:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1ddc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1e88 <diag+0x138>
					i += 4;
    1de0:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1de2:	1b2b      	subs	r3, r5, r4
    1de4:	fa21 f303 	lsr.w	r3, r1, r3
    1de8:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1dec:	f819 0003 	ldrb.w	r0, [r9, r3]
    1df0:	f7ff fd20 	bl	1834 <dgout>
				while (i < bc) {
    1df4:	42a5      	cmp	r5, r4
    1df6:	dcf3      	bgt.n	1de0 <diag+0x90>
			mess++;
    1df8:	3601      	adds	r6, #1
					d /= 10;
    1dfa:	4634      	mov	r4, r6
    1dfc:	e7b7      	b.n	1d6e <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1dfe:	1e6b      	subs	r3, r5, #1
    1e00:	fa21 f303 	lsr.w	r3, r1, r3
    1e04:	07da      	lsls	r2, r3, #31
    1e06:	d509      	bpl.n	1e1c <diag+0xcc>
					dgout ('-');
    1e08:	202d      	movs	r0, #45	; 0x2d
    1e0a:	f7ff fd13 	bl	1834 <dgout>
					if (bc == 16)
    1e0e:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1e10:	bf04      	itt	eq
    1e12:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1e16:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1e1a:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1e1c:	f242 7410 	movw	r4, #10000	; 0x2710
    1e20:	2d10      	cmp	r5, #16
    1e22:	bf18      	it	ne
    1e24:	4644      	movne	r4, r8
					v = (word) (val / d);
    1e26:	fbb1 f5f4 	udiv	r5, r1, r4
    1e2a:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1e2c:	b935      	cbnz	r5, 1e3c <diag+0xec>
    1e2e:	2c01      	cmp	r4, #1
    1e30:	d004      	beq.n	1e3c <diag+0xec>
					d /= 10;
    1e32:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1e36:	e7f6      	b.n	1e26 <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1e38:	4c12      	ldr	r4, [pc, #72]	; (1e84 <diag+0x134>)
    1e3a:	e7f4      	b.n	1e26 <diag+0xd6>
					dgout (v + '0');
    1e3c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1e40:	b280      	uxth	r0, r0
    1e42:	f7ff fcf7 	bl	1834 <dgout>
					if (d == 0) break;
    1e46:	2c09      	cmp	r4, #9
					d /= 10;
    1e48:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1e4c:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1e50:	d9d2      	bls.n	1df8 <diag+0xa8>
					v = (word) (val / d);
    1e52:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1e56:	461c      	mov	r4, r3
					v = (word) (val / d);
    1e58:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1e5a:	e7ef      	b.n	1e3c <diag+0xec>
				if (bc == 16)
    1e5c:	2d10      	cmp	r5, #16
    1e5e:	d1eb      	bne.n	1e38 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1e60:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1e64:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1e66:	e7de      	b.n	1e26 <diag+0xd6>
					dgout (*s);
    1e68:	f7ff fce4 	bl	1834 <dgout>
					s++;
    1e6c:	3101      	adds	r1, #1
				while (*s != '\0') {
    1e6e:	7808      	ldrb	r0, [r1, #0]
    1e70:	2800      	cmp	r0, #0
    1e72:	d1f9      	bne.n	1e68 <diag+0x118>
    1e74:	e7c0      	b.n	1df8 <diag+0xa8>
			dgout (*mess++);
    1e76:	f7ff fcdd 	bl	1834 <dgout>
    1e7a:	e7be      	b.n	1dfa <diag+0xaa>
    1e7c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1e80:	40001018 	andmi	r1, r0, r8, lsl r0
    1e84:	3b9aca00 	blcc	fe6b468c <_estack+0xde6af68c>
    1e88:	00005211 	andeq	r5, r0, r1, lsl r2

00001e8c <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e8c:	f243 0039 	movw	r0, #12345	; 0x3039
    1e90:	4a04      	ldr	r2, [pc, #16]	; (1ea4 <lrnd+0x18>)
    1e92:	4905      	ldr	r1, [pc, #20]	; (1ea8 <lrnd+0x1c>)
    1e94:	6813      	ldr	r3, [r2, #0]
    1e96:	fb01 0303 	mla	r3, r1, r3, r0
    1e9a:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1e9c:	4a03      	ldr	r2, [pc, #12]	; (1eac <lrnd+0x20>)
    1e9e:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1ea0:	4058      	eors	r0, r3
    1ea2:	4770      	bx	lr
    1ea4:	20000004 	andcs	r0, r0, r4
    1ea8:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1eac:	200006b0 			; <UNDEFINED> instruction: 0x200006b0

00001eb0 <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1eb0:	b510      	push	{r4, lr}
    1eb2:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1eb4:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1eb6:	b280      	uxth	r0, r0
    1eb8:	f7ff fed0 	bl	1c5c <__pi_malloc>
    1ebc:	b110      	cbz	r0, 1ec4 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1ebe:	2300      	movs	r3, #0
	p -> length = size;
    1ec0:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1ec2:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1ec4:	bd10      	pop	{r4, pc}

00001ec6 <deq>:
	if (p->attributes.b.queued) {
    1ec6:	7a83      	ldrb	r3, [r0, #10]
    1ec8:	07db      	lsls	r3, r3, #31
    1eca:	d508      	bpl.n	1ede <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1ecc:	e9d0 2300 	ldrd	r2, r3, [r0]
    1ed0:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1ed2:	6802      	ldr	r2, [r0, #0]
    1ed4:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1ed6:	7a83      	ldrb	r3, [r0, #10]
    1ed8:	f36f 0300 	bfc	r3, #0, #1
    1edc:	7283      	strb	r3, [r0, #10]
}
    1ede:	4770      	bx	lr

00001ee0 <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ee0:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1ee2:	f7ff fff0 	bl	1ec6 <deq>
}
    1ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1eea:	f7ff be6b 	b.w	1bc4 <__pi_free>
	...

00001ef0 <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ef0:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ef2:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ef4:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ef6:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ef8:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1efa:	d503      	bpl.n	1f04 <enq+0x14>
    1efc:	200a      	movs	r0, #10
    1efe:	490e      	ldr	r1, [pc, #56]	; (1f38 <enq+0x48>)
    1f00:	f7fe ff08 	bl	d14 <__pi_syserror>
	if (q_empty (q))
    1f04:	6803      	ldr	r3, [r0, #0]
    1f06:	4283      	cmp	r3, r0
    1f08:	d101      	bne.n	1f0e <enq+0x1e>
		trigger (q);
    1f0a:	f7ff fd4b 	bl	19a4 <__pi_trigger>
	if (p->attributes.b.urgent) {
    1f0e:	7aa3      	ldrb	r3, [r4, #10]
    1f10:	075b      	lsls	r3, r3, #29
    1f12:	d50a      	bpl.n	1f2a <enq+0x3a>
		p->u.bqueue.next = q->next;
    1f14:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1f16:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    1f1a:	682b      	ldr	r3, [r5, #0]
    1f1c:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    1f1e:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    1f20:	7aa3      	ldrb	r3, [r4, #10]
    1f22:	f043 0301 	orr.w	r3, r3, #1
    1f26:	72a3      	strb	r3, [r4, #10]
}
    1f28:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    1f2a:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    1f2c:	686b      	ldr	r3, [r5, #4]
    1f2e:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1f30:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1f32:	606c      	str	r4, [r5, #4]
    1f34:	e7f4      	b.n	1f20 <enq+0x30>
    1f36:	bf00      	nop
    1f38:	00005221 	andeq	r5, r0, r1, lsr #4

00001f3c <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f3c:	b510      	push	{r4, lr}
    1f3e:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1f40:	f7ff ffc1 	bl	1ec6 <deq>
	switch (dv) {
    1f44:	3901      	subs	r1, #1
    1f46:	2904      	cmp	r1, #4
    1f48:	d832      	bhi.n	1fb0 <dispose+0x74>
    1f4a:	e8df f001 	tbb	[pc, r1]
    1f4e:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    1f52:	7a830019 	bvc	fe0c1fbe <_estack+0xde0bcfbe>
			p->attributes.b.urgent = 1;
    1f56:	f043 0304 	orr.w	r3, r3, #4
    1f5a:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1f5c:	8963      	ldrh	r3, [r4, #10]
    1f5e:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    1f62:	2b07      	cmp	r3, #7
    1f64:	d803      	bhi.n	1f6e <dispose+0x32>
    1f66:	4a13      	ldr	r2, [pc, #76]	; (1fb4 <dispose+0x78>)
    1f68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1f6c:	b918      	cbnz	r0, 1f76 <dispose+0x3a>
    1f6e:	4912      	ldr	r1, [pc, #72]	; (1fb8 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1f70:	200a      	movs	r0, #10
    1f72:	f7fe fecf 	bl	d14 <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    1f76:	4621      	mov	r1, r4
}
    1f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1f7c:	f7ff bfb8 	b.w	1ef0 <enq>
			p->attributes.b.urgent = 1;
    1f80:	7a83      	ldrb	r3, [r0, #10]
    1f82:	f043 0304 	orr.w	r3, r3, #4
    1f86:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    1f88:	7ae2      	ldrb	r2, [r4, #11]
    1f8a:	2a5f      	cmp	r2, #95	; 0x5f
    1f8c:	ea4f 1352 	mov.w	r3, r2, lsr #5
    1f90:	d803      	bhi.n	1f9a <dispose+0x5e>
    1f92:	4a0a      	ldr	r2, [pc, #40]	; (1fbc <dispose+0x80>)
    1f94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1f98:	b90a      	cbnz	r2, 1f9e <dispose+0x62>
    1f9a:	4909      	ldr	r1, [pc, #36]	; (1fc0 <dispose+0x84>)
    1f9c:	e7e8      	b.n	1f70 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    1f9e:	4a09      	ldr	r2, [pc, #36]	; (1fc4 <dispose+0x88>)
    1fa0:	4621      	mov	r1, r4
    1fa2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1fa6:	e7e7      	b.n	1f78 <dispose+0x3c>
}
    1fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    1fac:	f7ff bf98 	b.w	1ee0 <rlp>
}
    1fb0:	bd10      	pop	{r4, pc}
    1fb2:	bf00      	nop
    1fb4:	20000568 	andcs	r0, r0, r8, ror #10
    1fb8:	00005227 	andeq	r5, r0, r7, lsr #4
    1fbc:	20000594 	mulcs	r0, r4, r5
    1fc0:	00005233 	andeq	r5, r0, r3, lsr r2
    1fc4:	20000588 	andcs	r0, r0, r8, lsl #11

00001fc8 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1fc8:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    1fca:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    1fce:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    1fd2:	0792      	lsls	r2, r2, #30
    1fd4:	d522      	bpl.n	201c <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    1fd6:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    1fda:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    1fde:	2a07      	cmp	r2, #7
    1fe0:	d803      	bhi.n	1fea <tcv_endp+0x22>
    1fe2:	4911      	ldr	r1, [pc, #68]	; (2028 <tcv_endp+0x60>)
    1fe4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1fe8:	b91a      	cbnz	r2, 1ff2 <tcv_endp+0x2a>
    1fea:	4910      	ldr	r1, [pc, #64]	; (202c <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1fec:	200a      	movs	r0, #10
    1fee:	f7fe fe91 	bl	d14 <__pi_syserror>
    1ff2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1ff6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1ffa:	2b02      	cmp	r3, #2
    1ffc:	d805      	bhi.n	200a <tcv_endp+0x42>
    1ffe:	4a0c      	ldr	r2, [pc, #48]	; (2030 <tcv_endp+0x68>)
    2000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2004:	b10b      	cbz	r3, 200a <tcv_endp+0x42>
    2006:	691b      	ldr	r3, [r3, #16]
    2008:	b90b      	cbnz	r3, 200e <tcv_endp+0x46>
    200a:	490a      	ldr	r1, [pc, #40]	; (2034 <tcv_endp+0x6c>)
    200c:	e7ee      	b.n	1fec <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    200e:	4798      	blx	r3
    2010:	4601      	mov	r1, r0
    2012:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    2014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    2018:	f7ff bf90 	b.w	1f3c <dispose>
		rlp (b);
    201c:	4620      	mov	r0, r4
}
    201e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    2022:	f7ff bf5d 	b.w	1ee0 <rlp>
    2026:	bf00      	nop
    2028:	20000568 	andcs	r0, r0, r8, ror #10
    202c:	0000523f 	andeq	r5, r0, pc, lsr r2
    2030:	200005ac 	andcs	r0, r0, ip, lsr #11
    2034:	00005245 	andeq	r5, r0, r5, asr #4

00002038 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2038:	b40c      	push	{r2, r3}
    203a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    203e:	ab0a      	add	r3, sp, #40	; 0x28
    2040:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2044:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2046:	460f      	mov	r7, r1
	va_start (ap, plid);
    2048:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    204a:	d80b      	bhi.n	2064 <tcv_open+0x2c>
    204c:	4b24      	ldr	r3, [pc, #144]	; (20e0 <tcv_open+0xa8>)
    204e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    2052:	b13b      	cbz	r3, 2064 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2054:	f1b8 0f02 	cmp.w	r8, #2
    2058:	d804      	bhi.n	2064 <tcv_open+0x2c>
    205a:	4b22      	ldr	r3, [pc, #136]	; (20e4 <tcv_open+0xac>)
    205c:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    2060:	4699      	mov	r9, r3
    2062:	b91a      	cbnz	r2, 206c <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    2064:	2001      	movs	r0, #1
    2066:	4920      	ldr	r1, [pc, #128]	; (20e8 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    2068:	f7fe fe54 	bl	d14 <__pi_syserror>
	attp.b.outgoing = 1;
    206c:	f008 0307 	and.w	r3, r8, #7
    2070:	029b      	lsls	r3, r3, #10
    2072:	f043 0302 	orr.w	r3, r3, #2
    2076:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    207a:	4b1c      	ldr	r3, [pc, #112]	; (20ec <tcv_open+0xb4>)
    207c:	2600      	movs	r6, #0
    207e:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    2080:	f853 2b04 	ldr.w	r2, [r3], #4
    2084:	b312      	cbz	r2, 20cc <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2086:	3601      	adds	r6, #1
    2088:	2e08      	cmp	r6, #8
    208a:	d1f9      	bne.n	2080 <tcv_open+0x48>
		return ERROR;
    208c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    2090:	4630      	mov	r0, r6
    2092:	b002      	add	sp, #8
    2094:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2098:	b002      	add	sp, #8
    209a:	4770      	bx	lr
	s->attpattern.b.session = fd;
    209c:	462b      	mov	r3, r5
    209e:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    20a2:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    20a6:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    20a8:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    20ac:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    20b0:	681b      	ldr	r3, [r3, #0]
    20b2:	b913      	cbnz	r3, 20ba <tcv_open+0x82>
    20b4:	200a      	movs	r0, #10
    20b6:	490e      	ldr	r1, [pc, #56]	; (20f0 <tcv_open+0xb8>)
    20b8:	e7d6      	b.n	2068 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    20ba:	4631      	mov	r1, r6
    20bc:	4638      	mov	r0, r7
    20be:	9a01      	ldr	r2, [sp, #4]
    20c0:	4798      	blx	r3
    20c2:	2800      	cmp	r0, #0
    20c4:	d1e2      	bne.n	208c <tcv_open+0x54>
	descriptors [fd] = s;
    20c6:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    20ca:	e7e1      	b.n	2090 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    20cc:	200c      	movs	r0, #12
    20ce:	f7ff fdc5 	bl	1c5c <__pi_malloc>
	if (s == NULL)
    20d2:	4604      	mov	r4, r0
    20d4:	2800      	cmp	r0, #0
    20d6:	d1e1      	bne.n	209c <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    20d8:	2006      	movs	r0, #6
    20da:	4906      	ldr	r1, [pc, #24]	; (20f4 <tcv_open+0xbc>)
    20dc:	e7c4      	b.n	2068 <tcv_open+0x30>
    20de:	bf00      	nop
    20e0:	20000588 	andcs	r0, r0, r8, lsl #11
    20e4:	200005ac 	andcs	r0, r0, ip, lsr #11
    20e8:	0000524b 	andeq	r5, r0, fp, asr #4
    20ec:	20000568 	andcs	r0, r0, r8, ror #10
    20f0:	00005257 	andeq	r5, r0, r7, asr r2
    20f4:	00005251 	andeq	r5, r0, r1, asr r2

000020f8 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20f8:	2802      	cmp	r0, #2
    20fa:	d809      	bhi.n	2110 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20fc:	4b06      	ldr	r3, [pc, #24]	; (2118 <tcv_plug+0x20>)
    20fe:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    2102:	b10a      	cbz	r2, 2108 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    2104:	428a      	cmp	r2, r1
    2106:	d103      	bne.n	2110 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    2108:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    210c:	2000      	movs	r0, #0
    210e:	4770      	bx	lr
		return ERROR;
    2110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2114:	4770      	bx	lr
    2116:	bf00      	nop
    2118:	200005ac 	andcs	r0, r0, ip, lsr #11

0000211c <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    211c:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    211e:	b538      	push	{r3, r4, r5, lr}
    2120:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    2122:	d803      	bhi.n	212c <tcv_rnp+0x10>
    2124:	4a19      	ldr	r2, [pc, #100]	; (218c <tcv_rnp+0x70>)
    2126:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    212a:	b918      	cbnz	r0, 2134 <tcv_rnp+0x18>
    212c:	4918      	ldr	r1, [pc, #96]	; (2190 <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    212e:	200a      	movs	r0, #10
    2130:	f7fe fdf0 	bl	d14 <__pi_syserror>
	b = q_first (rq);
    2134:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    2136:	42a0      	cmp	r0, r4
    2138:	d108      	bne.n	214c <tcv_rnp+0x30>
		if (state != WNONE) {
    213a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    213e:	4293      	cmp	r3, r2
    2140:	d021      	beq.n	2186 <tcv_rnp+0x6a>
			when (rq, state);
    2142:	4619      	mov	r1, r3
    2144:	f7ff fc14 	bl	1970 <__pi_wait>
			release;
    2148:	f7ff f9a2 	bl	1490 <__pi_release>
	deq (b);	// Dequeue the packet ...
    214c:	4620      	mov	r0, r4
    214e:	f7ff feba 	bl	1ec6 <deq>
	verify_plg (b, tcv_frm, "tcv11");
    2152:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    2154:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    2158:	f3c3 0382 	ubfx	r3, r3, #2, #3
    215c:	2b02      	cmp	r3, #2
    215e:	d805      	bhi.n	216c <tcv_rnp+0x50>
    2160:	4a0c      	ldr	r2, [pc, #48]	; (2194 <tcv_rnp+0x78>)
    2162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2166:	b10b      	cbz	r3, 216c <tcv_rnp+0x50>
    2168:	68db      	ldr	r3, [r3, #12]
    216a:	b90b      	cbnz	r3, 2170 <tcv_rnp+0x54>
    216c:	490a      	ldr	r1, [pc, #40]	; (2198 <tcv_rnp+0x7c>)
    216e:	e7de      	b.n	212e <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2170:	4621      	mov	r1, r4
    2172:	4628      	mov	r0, r5
    2174:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2176:	8823      	ldrh	r3, [r4, #0]
    2178:	8862      	ldrh	r2, [r4, #2]
    217a:	441a      	add	r2, r3
    217c:	8923      	ldrh	r3, [r4, #8]
    217e:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    2180:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    2182:	4628      	mov	r0, r5
    2184:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    2186:	2500      	movs	r5, #0
    2188:	e7fb      	b.n	2182 <tcv_rnp+0x66>
    218a:	bf00      	nop
    218c:	20000568 	andcs	r0, r0, r8, ror #10
    2190:	0000525d 	andeq	r5, r0, sp, asr r2
    2194:	200005ac 	andcs	r0, r0, ip, lsr #11
    2198:	00005263 	andeq	r5, r0, r3, ror #4

0000219c <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    219c:	2908      	cmp	r1, #8
								Boolean urg) {
    219e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21a0:	4605      	mov	r5, r0
    21a2:	4614      	mov	r4, r2
    21a4:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    21a6:	d803      	bhi.n	21b0 <tcv_wnps+0x14>
    21a8:	4b26      	ldr	r3, [pc, #152]	; (2244 <tcv_wnps+0xa8>)
    21aa:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    21ae:	b91f      	cbnz	r7, 21b8 <tcv_wnps+0x1c>
    21b0:	4925      	ldr	r1, [pc, #148]	; (2248 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    21b2:	200a      	movs	r0, #10
    21b4:	f7fe fdae 	bl	d14 <__pi_syserror>
    21b8:	7a7b      	ldrb	r3, [r7, #9]
    21ba:	f3c3 0382 	ubfx	r3, r3, #2, #3
    21be:	2b02      	cmp	r3, #2
    21c0:	d805      	bhi.n	21ce <tcv_wnps+0x32>
    21c2:	4a22      	ldr	r2, [pc, #136]	; (224c <tcv_wnps+0xb0>)
    21c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21c8:	b10b      	cbz	r3, 21ce <tcv_wnps+0x32>
    21ca:	68db      	ldr	r3, [r3, #12]
    21cc:	b90b      	cbnz	r3, 21d2 <tcv_wnps+0x36>
    21ce:	4920      	ldr	r1, [pc, #128]	; (2250 <tcv_wnps+0xb4>)
    21d0:	e7ef      	b.n	21b2 <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    21d2:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21d6:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    21d8:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21dc:	a901      	add	r1, sp, #4
    21de:	4798      	blx	r3
    21e0:	b158      	cbz	r0, 21fa <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    21e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    21e6:	429d      	cmp	r5, r3
    21e8:	d102      	bne.n	21f0 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    21ea:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    21ec:	b003      	add	sp, #12
    21ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    21f0:	4629      	mov	r1, r5
    21f2:	f7ff fbbd 	bl	1970 <__pi_wait>
			release;
    21f6:	f7ff f94b 	bl	1490 <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21fa:	7a3b      	ldrb	r3, [r7, #8]
    21fc:	07db      	lsls	r3, r3, #31
    21fe:	d501      	bpl.n	2204 <tcv_wnps+0x68>
    2200:	4914      	ldr	r1, [pc, #80]	; (2254 <tcv_wnps+0xb8>)
    2202:	e7d6      	b.n	21b2 <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2204:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    2208:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    220c:	b2a4      	uxth	r4, r4
    220e:	4418      	add	r0, r3
    2210:	4420      	add	r0, r4
    2212:	b280      	uxth	r0, r0
    2214:	f7ff fe4c 	bl	1eb0 <apb>
    2218:	b938      	cbnz	r0, 222a <tcv_wnps+0x8e>
		if (state != WNONE) {
    221a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    221e:	429d      	cmp	r5, r3
    2220:	d0e3      	beq.n	21ea <tcv_wnps+0x4e>
			tmwait (state);
    2222:	4628      	mov	r0, r5
    2224:	f7ff fd88 	bl	1d38 <__pi_waitmem>
    2228:	e7e5      	b.n	21f6 <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    222a:	893b      	ldrh	r3, [r7, #8]
    222c:	8143      	strh	r3, [r0, #10]
	if (urg)
    222e:	b11e      	cbz	r6, 2238 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    2230:	7a83      	ldrb	r3, [r0, #10]
    2232:	f043 0304 	orr.w	r3, r3, #4
    2236:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    2238:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    223c:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    223e:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    2240:	300c      	adds	r0, #12
    2242:	e7d3      	b.n	21ec <tcv_wnps+0x50>
    2244:	20000568 	andcs	r0, r0, r8, ror #10
    2248:	00005269 	andeq	r5, r0, r9, ror #4
    224c:	200005ac 	andcs	r0, r0, ip, lsr #11
    2250:	0000526f 	andeq	r5, r0, pc, ror #4
    2254:	00005275 	andeq	r5, r0, r5, ror r2

00002258 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2258:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    225a:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    225c:	4608      	mov	r0, r1
    225e:	b510      	push	{r4, lr}
    2260:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    2262:	d803      	bhi.n	226c <tcvp_control+0x14>
    2264:	4a05      	ldr	r2, [pc, #20]	; (227c <tcvp_control+0x24>)
    2266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    226a:	b91b      	cbnz	r3, 2274 <tcvp_control+0x1c>
    226c:	200a      	movs	r0, #10
    226e:	4904      	ldr	r1, [pc, #16]	; (2280 <tcvp_control+0x28>)
    2270:	f7fe fd50 	bl	d14 <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    2274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    2278:	4718      	bx	r3
    227a:	bf00      	nop
    227c:	20000594 	mulcs	r0, r4, r5
    2280:	0000527b 	andeq	r5, r0, fp, ror r2

00002284 <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2284:	b508      	push	{r3, lr}
	if (opt < 0) {
    2286:	1e0b      	subs	r3, r1, #0
    2288:	da11      	bge.n	22ae <tcv_control+0x2a>
		if (fd < 0)
    228a:	2800      	cmp	r0, #0
    228c:	db1f      	blt.n	22ce <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    228e:	3301      	adds	r3, #1
    2290:	d107      	bne.n	22a2 <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    2292:	2802      	cmp	r0, #2
    2294:	dc1b      	bgt.n	22ce <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    2296:	4b0f      	ldr	r3, [pc, #60]	; (22d4 <tcv_control+0x50>)
    2298:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    229c:	b100      	cbz	r0, 22a0 <tcv_control+0x1c>
			return p->tcv_info;
    229e:	69c0      	ldr	r0, [r0, #28]
}
    22a0:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    22a2:	2802      	cmp	r0, #2
    22a4:	dc13      	bgt.n	22ce <tcv_control+0x4a>
		return physinfo [fd];
    22a6:	4b0c      	ldr	r3, [pc, #48]	; (22d8 <tcv_control+0x54>)
    22a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    22ac:	e7f8      	b.n	22a0 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    22ae:	2808      	cmp	r0, #8
    22b0:	d803      	bhi.n	22ba <tcv_control+0x36>
    22b2:	4b0a      	ldr	r3, [pc, #40]	; (22dc <tcv_control+0x58>)
    22b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    22b8:	b91b      	cbnz	r3, 22c2 <tcv_control+0x3e>
    22ba:	200a      	movs	r0, #10
    22bc:	4908      	ldr	r1, [pc, #32]	; (22e0 <tcv_control+0x5c>)
    22be:	f7fe fd29 	bl	d14 <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    22c2:	7a58      	ldrb	r0, [r3, #9]
}
    22c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    22c8:	0940      	lsrs	r0, r0, #5
    22ca:	f7ff bfc5 	b.w	2258 <tcvp_control>
			return 0;
    22ce:	2000      	movs	r0, #0
    22d0:	e7e6      	b.n	22a0 <tcv_control+0x1c>
    22d2:	bf00      	nop
    22d4:	200005ac 	andcs	r0, r0, ip, lsr #11
    22d8:	200005a0 	andcs	r0, r0, r0, lsr #11
    22dc:	20000568 	andcs	r0, r0, r8, ror #10
    22e0:	00005281 	andeq	r5, r0, r1, lsl #5

000022e4 <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e6:	b280      	uxth	r0, r0
    22e8:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    22ea:	460e      	mov	r6, r1
    22ec:	b309      	cbz	r1, 2332 <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    22ee:	1c53      	adds	r3, r2, #1
    22f0:	d103      	bne.n	22fa <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    22f2:	2003      	movs	r0, #3
    22f4:	4912      	ldr	r1, [pc, #72]	; (2340 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    22f6:	f7fe fd0d 	bl	d14 <__pi_syserror>
    22fa:	2a08      	cmp	r2, #8
    22fc:	d803      	bhi.n	2306 <tcvp_new+0x22>
    22fe:	4f11      	ldr	r7, [pc, #68]	; (2344 <tcvp_new+0x60>)
    2300:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    2304:	b913      	cbnz	r3, 230c <tcvp_new+0x28>
    2306:	200a      	movs	r0, #10
    2308:	490f      	ldr	r1, [pc, #60]	; (2348 <tcvp_new+0x64>)
    230a:	e7f4      	b.n	22f6 <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    230c:	f7ff fdd0 	bl	1eb0 <apb>
    2310:	4604      	mov	r4, r0
    2312:	b908      	cbnz	r0, 2318 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    2314:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    2316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    2318:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    231c:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    231e:	891b      	ldrh	r3, [r3, #8]
    2320:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    2322:	f36f 0341 	bfc	r3, #1, #1
    2326:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    2328:	f7ff fe08 	bl	1f3c <dispose>
			return (address)(p + 1);
    232c:	f104 000c 	add.w	r0, r4, #12
    2330:	e7f1      	b.n	2316 <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    2332:	f7ff fdbd 	bl	1eb0 <apb>
    2336:	2800      	cmp	r0, #0
    2338:	d0ec      	beq.n	2314 <tcvp_new+0x30>
		return (address)(p + 1);
    233a:	300c      	adds	r0, #12
    233c:	e7eb      	b.n	2316 <tcvp_new+0x32>
    233e:	bf00      	nop
    2340:	00005287 	andeq	r5, r0, r7, lsl #5
    2344:	20000568 	andcs	r0, r0, r8, ror #10
    2348:	0000528d 	andeq	r5, r0, sp, lsl #5

0000234c <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    234c:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    234e:	b510      	push	{r4, lr}
    2350:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2352:	d803      	bhi.n	235c <tcvphy_reg+0x10>
    2354:	4b0c      	ldr	r3, [pc, #48]	; (2388 <tcvphy_reg+0x3c>)
    2356:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    235a:	b118      	cbz	r0, 2364 <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    235c:	2003      	movs	r0, #3
    235e:	490b      	ldr	r1, [pc, #44]	; (238c <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    2360:	f7fe fcd8 	bl	d14 <__pi_syserror>
	physical [phy] = ps;
    2364:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    2368:	4b09      	ldr	r3, [pc, #36]	; (2390 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    236a:	2008      	movs	r0, #8
	physinfo [phy] = info;
    236c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2370:	f7ff fc74 	bl	1c5c <__pi_malloc>
    2374:	4a07      	ldr	r2, [pc, #28]	; (2394 <tcvphy_reg+0x48>)
    2376:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    237a:	b910      	cbnz	r0, 2382 <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    237c:	2006      	movs	r0, #6
    237e:	4906      	ldr	r1, [pc, #24]	; (2398 <tcvphy_reg+0x4c>)
    2380:	e7ee      	b.n	2360 <tcvphy_reg+0x14>
	q_init (q);
    2382:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    2386:	bd10      	pop	{r4, pc}
    2388:	20000594 	mulcs	r0, r4, r5
    238c:	00005293 	muleq	r0, r3, r2
    2390:	200005a0 	andcs	r0, r0, r0, lsr #11
    2394:	20000588 	andcs	r0, r0, r8, lsl #11
    2398:	00005299 	muleq	r0, r9, r2

0000239c <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    23a0:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    23a2:	4605      	mov	r5, r0
    23a4:	460f      	mov	r7, r1
    23a6:	4614      	mov	r4, r2
    23a8:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    23aa:	d803      	bhi.n	23b4 <tcvphy_rcv+0x18>
    23ac:	4b1e      	ldr	r3, [pc, #120]	; (2428 <tcvphy_rcv+0x8c>)
    23ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    23b2:	b91b      	cbnz	r3, 23bc <tcvphy_rcv+0x20>
    23b4:	491d      	ldr	r1, [pc, #116]	; (242c <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23b6:	200a      	movs	r0, #10
    23b8:	f7fe fcac 	bl	d14 <__pi_syserror>
    23bc:	4e1c      	ldr	r6, [pc, #112]	; (2430 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23be:	f10d 080c 	add.w	r8, sp, #12
    23c2:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    23c6:	6833      	ldr	r3, [r6, #0]
    23c8:	46b1      	mov	r9, r6
    23ca:	3e04      	subs	r6, #4
    23cc:	b92b      	cbnz	r3, 23da <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    23ce:	45ca      	cmp	sl, r9
    23d0:	d1f9      	bne.n	23c6 <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    23d2:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    23d4:	b005      	add	sp, #20
    23d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23da:	f8d3 b008 	ldr.w	fp, [r3, #8]
    23de:	f1bb 0f00 	cmp.w	fp, #0
    23e2:	d101      	bne.n	23e8 <tcvphy_rcv+0x4c>
    23e4:	4913      	ldr	r1, [pc, #76]	; (2434 <tcvphy_rcv+0x98>)
    23e6:	e7e6      	b.n	23b6 <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23e8:	4639      	mov	r1, r7
    23ea:	4622      	mov	r2, r4
    23ec:	4628      	mov	r0, r5
    23ee:	f8cd 8000 	str.w	r8, [sp]
    23f2:	ab02      	add	r3, sp, #8
    23f4:	47d8      	blx	fp
    23f6:	4601      	mov	r1, r0
    23f8:	2800      	cmp	r0, #0
    23fa:	d0e8      	beq.n	23ce <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23fc:	2801      	cmp	r0, #1
    23fe:	d0e8      	beq.n	23d2 <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    2400:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    2404:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    2408:	441a      	add	r2, r3
    240a:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    240c:	4620      	mov	r0, r4
    240e:	9a02      	ldr	r2, [sp, #8]
    2410:	f7ff ff68 	bl	22e4 <tcvp_new>
    2414:	2800      	cmp	r0, #0
    2416:	d0dc      	beq.n	23d2 <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2418:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    241c:	4622      	mov	r2, r4
    241e:	4439      	add	r1, r7
    2420:	f7ff fb37 	bl	1a92 <__pi_memcpy>
	return 1;
    2424:	2001      	movs	r0, #1
    2426:	e7d5      	b.n	23d4 <tcvphy_rcv+0x38>
    2428:	20000594 	mulcs	r0, r4, r5
    242c:	0000529f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    2430:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
    2434:	000052a5 	andeq	r5, r0, r5, lsr #5

00002438 <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    2438:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    243a:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    243c:	d803      	bhi.n	2446 <tcvphy_get+0xe>
    243e:	4b0b      	ldr	r3, [pc, #44]	; (246c <tcvphy_get+0x34>)
    2440:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2444:	b91b      	cbnz	r3, 244e <tcvphy_get+0x16>
    2446:	200a      	movs	r0, #10
    2448:	4909      	ldr	r1, [pc, #36]	; (2470 <tcvphy_get+0x38>)
    244a:	f7fe fc63 	bl	d14 <__pi_syserror>

	oq = oqueues [phy];
    244e:	4b09      	ldr	r3, [pc, #36]	; (2474 <tcvphy_get+0x3c>)
    2450:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    2454:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    2456:	4283      	cmp	r3, r0
    2458:	d005      	beq.n	2466 <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    245a:	8903      	ldrh	r3, [r0, #8]
    245c:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    245e:	f7ff fd32 	bl	1ec6 <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    2462:	300c      	adds	r0, #12
}
    2464:	bd08      	pop	{r3, pc}
		return NULL;
    2466:	2000      	movs	r0, #0
    2468:	e7fc      	b.n	2464 <tcvphy_get+0x2c>
    246a:	bf00      	nop
    246c:	20000594 	mulcs	r0, r4, r5
    2470:	000052ab 	andeq	r5, r0, fp, lsr #5
    2474:	20000588 	andcs	r0, r0, r8, lsl #11

00002478 <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    2478:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    247a:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    247c:	d803      	bhi.n	2486 <tcvphy_top+0xe>
    247e:	4b08      	ldr	r3, [pc, #32]	; (24a0 <tcvphy_top+0x28>)
    2480:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2484:	b91b      	cbnz	r3, 248e <tcvphy_top+0x16>
    2486:	200a      	movs	r0, #10
    2488:	4906      	ldr	r1, [pc, #24]	; (24a4 <tcvphy_top+0x2c>)
    248a:	f7fe fc43 	bl	d14 <__pi_syserror>

	oq = oqueues [phy];
    248e:	4b06      	ldr	r3, [pc, #24]	; (24a8 <tcvphy_top+0x30>)
    2490:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    2494:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    2496:	4283      	cmp	r3, r0
		return NULL;
    2498:	bf0c      	ite	eq
    249a:	2000      	moveq	r0, #0

	return (address)(b + 1);
    249c:	300c      	addne	r0, #12
}
    249e:	bd08      	pop	{r3, pc}
    24a0:	20000594 	mulcs	r0, r4, r5
    24a4:	000052b1 			; <UNDEFINED> instruction: 0x000052b1
    24a8:	20000588 	andcs	r0, r0, r8, lsl #11

000024ac <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    24ac:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    24ae:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    24b2:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    24b6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    24ba:	2b02      	cmp	r3, #2
    24bc:	d805      	bhi.n	24ca <tcvphy_end+0x1e>
    24be:	4a08      	ldr	r2, [pc, #32]	; (24e0 <tcvphy_end+0x34>)
    24c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24c4:	b10b      	cbz	r3, 24ca <tcvphy_end+0x1e>
    24c6:	695b      	ldr	r3, [r3, #20]
    24c8:	b91b      	cbnz	r3, 24d2 <tcvphy_end+0x26>
    24ca:	200a      	movs	r0, #10
    24cc:	4905      	ldr	r1, [pc, #20]	; (24e4 <tcvphy_end+0x38>)
    24ce:	f7fe fc21 	bl	d14 <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    24d2:	4798      	blx	r3
    24d4:	4601      	mov	r1, r0
    24d6:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    24d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    24dc:	f7ff bd2e 	b.w	1f3c <dispose>
    24e0:	200005ac 	andcs	r0, r0, ip, lsr #11
    24e4:	000052b7 			; <UNDEFINED> instruction: 0x000052b7

000024e8 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    24e8:	4770      	bx	lr

000024ea <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    24ea:	e7fe      	b.n	24ea <NmiSR>

000024ec <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    24ec:	e7fe      	b.n	24ec <FaultISR>

000024ee <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    24ee:	e7fe      	b.n	24ee <AONIntHandler>

000024f0 <ResetISR>:
{
    24f0:	b508      	push	{r3, lr}
    SetupTrimDevice();
    24f2:	f001 fd15 	bl	3f20 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24f6:	4b0c      	ldr	r3, [pc, #48]	; (2528 <zero_loop+0x20>)
    pui32Src = &_etext;
    24f8:	4a0c      	ldr	r2, [pc, #48]	; (252c <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24fa:	490d      	ldr	r1, [pc, #52]	; (2530 <zero_loop+0x28>)
    24fc:	428b      	cmp	r3, r1
    24fe:	d30d      	bcc.n	251c <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    2500:	480c      	ldr	r0, [pc, #48]	; (2534 <zero_loop+0x2c>)
    2502:	490d      	ldr	r1, [pc, #52]	; (2538 <zero_loop+0x30>)
    2504:	f04f 0200 	mov.w	r2, #0

00002508 <zero_loop>:
    2508:	4288      	cmp	r0, r1
    250a:	bfb8      	it	lt
    250c:	f840 2b04 	strlt.w	r2, [r0], #4
    2510:	dbfa      	blt.n	2508 <zero_loop>
   main();
    2512:	f7ff f901 	bl	1718 <main>
    FaultISR();
    2516:	f7ff ffe9 	bl	24ec <FaultISR>
}
    251a:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    251c:	f852 0b04 	ldr.w	r0, [r2], #4
    2520:	f843 0b04 	str.w	r0, [r3], #4
    2524:	e7ea      	b.n	24fc <ResetISR+0xc>
    2526:	bf00      	nop
    2528:	20000000 	andcs	r0, r0, r0
    252c:	00005cc0 	andeq	r5, r0, r0, asr #25
    2530:	20000540 	andcs	r0, r0, r0, asr #10
    2534:	20000540 	andcs	r0, r0, r0, asr #10
    2538:	200006d8 	ldrdcs	r0, [r0], -r8

0000253c <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    253c:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    253e:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2540:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    2544:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2546:	4907      	ldr	r1, [pc, #28]	; (2564 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2548:	4d07      	ldr	r5, [pc, #28]	; (2568 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    254a:	4c08      	ldr	r4, [pc, #32]	; (256c <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    254c:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    254e:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    2550:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    2552:	b2c0      	uxtb	r0, r0
			b |= 1;
    2554:	bf48      	it	mi
    2556:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    255a:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    255c:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    255e:	600a      	str	r2, [r1, #0]
    2560:	d1f4      	bne.n	254c <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    2562:	bd70      	pop	{r4, r5, r6, pc}
    2564:	400220a0 	andmi	r2, r2, r0, lsr #1
    2568:	400220c0 	andmi	r2, r2, r0, asr #1
    256c:	40022090 	mulmi	r2, r0, r0

00002570 <put_byte>:

static void put_byte (byte b) {
    2570:	b530      	push	{r4, r5, lr}
    2572:	2308      	movs	r3, #8
    2574:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2578:	f44f 6180 	mov.w	r1, #1024	; 0x400
    257c:	4c06      	ldr	r4, [pc, #24]	; (2598 <put_byte+0x28>)
    257e:	4a07      	ldr	r2, [pc, #28]	; (259c <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    2580:	f010 0f80 	tst.w	r0, #128	; 0x80
    2584:	bf14      	ite	ne
    2586:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2588:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    258a:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    258c:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    258e:	6021      	str	r1, [r4, #0]
		b <<= 1;
    2590:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2592:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    2594:	d1f4      	bne.n	2580 <put_byte+0x10>
	}
}
    2596:	bd30      	pop	{r4, r5, pc}
    2598:	40022090 	mulmi	r2, r0, r0
    259c:	400220a0 	andmi	r2, r2, r0, lsr #1

000025a0 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    25a0:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    25a2:	b510      	push	{r4, lr}
    25a4:	4c03      	ldr	r4, [pc, #12]	; (25b4 <cmd_0+0x14>)
    25a6:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    25a8:	f7ff ffe2 	bl	2570 <put_byte>
    25ac:	2300      	movs	r3, #0
    25ae:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    25b0:	bd10      	pop	{r4, pc}
    25b2:	bf00      	nop
    25b4:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000025b8 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    25b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25bc:	4604      	mov	r4, r0
    25be:	460d      	mov	r5, r1
    25c0:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    25c2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2608 <wwait+0x50>
    25c6:	4e0f      	ldr	r6, [pc, #60]	; (2604 <wwait+0x4c>)
    25c8:	f898 3000 	ldrb.w	r3, [r8]
    25cc:	b14b      	cbz	r3, 25e2 <wwait+0x2a>
	put_byte (CMD_RDSR);
    25ce:	2005      	movs	r0, #5
    25d0:	6037      	str	r7, [r6, #0]
    25d2:	f7ff ffcd 	bl	2570 <put_byte>
	r = get_byte ();
    25d6:	f7ff ffb1 	bl	253c <get_byte>
    25da:	2300      	movs	r3, #0
    25dc:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    25de:	07c3      	lsls	r3, r0, #31
    25e0:	d401      	bmi.n	25e6 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    25e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    25e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    25ea:	429c      	cmp	r4, r3
    25ec:	d103      	bne.n	25f6 <wwait+0x3e>
			mdelay (1);
    25ee:	2001      	movs	r0, #1
    25f0:	f7fe fb3c 	bl	c6c <mdelay>
    25f4:	e7e8      	b.n	25c8 <wwait+0x10>
			delay (del, st);
    25f6:	4621      	mov	r1, r4
    25f8:	4628      	mov	r0, r5
    25fa:	f7ff f9ff 	bl	19fc <delay>
			release;
    25fe:	f7fe ff47 	bl	1490 <__pi_release>
    2602:	bf00      	nop
    2604:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    2608:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

0000260c <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    260e:	4d0c      	ldr	r5, [pc, #48]	; (2640 <ready+0x34>)
    2610:	782f      	ldrb	r7, [r5, #0]
    2612:	b147      	cbz	r7, 2626 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    2614:	2101      	movs	r1, #1
    2616:	f64f 70ff 	movw	r0, #65535	; 0xffff
    261a:	f7ff ffcd 	bl	25b8 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    261e:	2200      	movs	r2, #0
    2620:	4b08      	ldr	r3, [pc, #32]	; (2644 <ready+0x38>)
    2622:	701a      	strb	r2, [r3, #0]
}
    2624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2626:	2401      	movs	r4, #1
    2628:	4e07      	ldr	r6, [pc, #28]	; (2648 <ready+0x3c>)
	udelay (1);
    262a:	4620      	mov	r0, r4
    262c:	6034      	str	r4, [r6, #0]
    262e:	f7fe fb07 	bl	c40 <udelay>
	udelay (1);
    2632:	4620      	mov	r0, r4
    2634:	6037      	str	r7, [r6, #0]
    2636:	f7fe fb03 	bl	c40 <udelay>
		dopen = DOPEN_TEMP;
    263a:	2302      	movs	r3, #2
    263c:	702b      	strb	r3, [r5, #0]
    263e:	e7ee      	b.n	261e <ready+0x12>
    2640:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    2644:	200005b9 			; <UNDEFINED> instruction: 0x200005b9
    2648:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

0000264c <cclose>:
static void cclose () {
    264c:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    264e:	4c07      	ldr	r4, [pc, #28]	; (266c <cclose+0x20>)
    2650:	7823      	ldrb	r3, [r4, #0]
    2652:	2b02      	cmp	r3, #2
    2654:	d109      	bne.n	266a <cclose+0x1e>
		wwait (WNONE, 1);
    2656:	2101      	movs	r1, #1
    2658:	f64f 70ff 	movw	r0, #65535	; 0xffff
    265c:	f7ff ffac 	bl	25b8 <wwait>
	cmd_0 (CMD_DP);
    2660:	20b9      	movs	r0, #185	; 0xb9
    2662:	f7ff ff9d 	bl	25a0 <cmd_0>
		dopen = 0;
    2666:	2300      	movs	r3, #0
    2668:	7023      	strb	r3, [r4, #0]
}
    266a:	bd10      	pop	{r4, pc}
    266c:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

00002670 <ee_open>:

// ============================================================================

word ee_open () {
    2670:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    2672:	f7ff ffcb 	bl	260c <ready>
	dopen = DOPEN_PERM;
    2676:	2201      	movs	r2, #1
    2678:	4b01      	ldr	r3, [pc, #4]	; (2680 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    267a:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    267c:	701a      	strb	r2, [r3, #0]
}
    267e:	bd08      	pop	{r3, pc}
    2680:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

00002684 <ee_close>:

void ee_close () {

	if (dopen) {
    2684:	4b03      	ldr	r3, [pc, #12]	; (2694 <ee_close+0x10>)
    2686:	781a      	ldrb	r2, [r3, #0]
    2688:	b11a      	cbz	r2, 2692 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    268a:	2202      	movs	r2, #2
    268c:	701a      	strb	r2, [r3, #0]
		cclose ();
    268e:	f7ff bfdd 	b.w	264c <cclose>
	}
}
    2692:	4770      	bx	lr
    2694:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

00002698 <ser_out>:

//+++ "__outserial.c"

procname (__outserial);

int ser_out (word st, const char *m) {
    2698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    269a:	4606      	mov	r6, r0

	int prcs;
	char *buf;

	if ((prcs = running (__outserial)) != 0) {
    269c:	4818      	ldr	r0, [pc, #96]	; (2700 <ser_out+0x68>)
int ser_out (word st, const char *m) {
    269e:	460c      	mov	r4, r1
	if ((prcs = running (__outserial)) != 0) {
    26a0:	f7ff f9c8 	bl	1a34 <running>
    26a4:	b120      	cbz	r0, 26b0 <ser_out+0x18>
		/* We have to wait */
		join (prcs, st);
    26a6:	4631      	mov	r1, r6
    26a8:	f7ff f996 	bl	19d8 <__pi_join>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
		/*
		 * We have to wait for memory
		 */
		umwait (st);
		release;
    26ac:	f7fe fef0 	bl	1490 <__pi_release>
	if (*m)
    26b0:	7823      	ldrb	r3, [r4, #0]
    26b2:	b163      	cbz	r3, 26ce <ser_out+0x36>
		prcs = strlen (m) +1;
    26b4:	4620      	mov	r0, r4
    26b6:	f7ff f9cf 	bl	1a58 <__pi_strlen>
    26ba:	1c45      	adds	r5, r0, #1
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    26bc:	b2a8      	uxth	r0, r5
    26be:	f7ff facd 	bl	1c5c <__pi_malloc>
    26c2:	4607      	mov	r7, r0
    26c4:	b930      	cbnz	r0, 26d4 <ser_out+0x3c>
		umwait (st);
    26c6:	4630      	mov	r0, r6
    26c8:	f7ff fb36 	bl	1d38 <__pi_waitmem>
    26cc:	e7ee      	b.n	26ac <ser_out+0x14>
		prcs =  m [1] + 3;
    26ce:	7865      	ldrb	r5, [r4, #1]
    26d0:	3503      	adds	r5, #3
    26d2:	e7f3      	b.n	26bc <ser_out+0x24>
	}

	if (*m)
    26d4:	7823      	ldrb	r3, [r4, #0]
    26d6:	b15b      	cbz	r3, 26f0 <ser_out+0x58>
		strcpy (buf, m);
    26d8:	4621      	mov	r1, r4
    26da:	f7ff f9c4 	bl	1a66 <__pi_strcpy>
	else
		memcpy (buf, m, prcs);

	if (runstrand (__outserial, buf) == 0) {
    26de:	4639      	mov	r1, r7
    26e0:	4807      	ldr	r0, [pc, #28]	; (2700 <ser_out+0x68>)
    26e2:	f7ff fb0f 	bl	1d04 <__pi_fork>
    26e6:	b940      	cbnz	r0, 26fa <ser_out+0x62>
		// fork has failed, deallocate buf
		ufree (buf);
    26e8:	4638      	mov	r0, r7
    26ea:	f7ff fa6b 	bl	1bc4 <__pi_free>
		// and wait for a process slot
		npwait (st);
    26ee:	e7ea      	b.n	26c6 <ser_out+0x2e>
		memcpy (buf, m, prcs);
    26f0:	462a      	mov	r2, r5
    26f2:	4621      	mov	r1, r4
    26f4:	f7ff f9cd 	bl	1a92 <__pi_memcpy>
    26f8:	e7f1      	b.n	26de <ser_out+0x46>
		release;
	}

	return 0;
}
    26fa:	2000      	movs	r0, #0
    26fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26fe:	bf00      	nop
    2700:	000031a5 	andeq	r3, r0, r5, lsr #3

00002704 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    2704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2706:	4604      	mov	r4, r0
    2708:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    270a:	4615      	mov	r5, r2
    270c:	b37a      	cbz	r2, 276e <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    270e:	4e19      	ldr	r6, [pc, #100]	; (2774 <ser_in+0x70>)
    2710:	6830      	ldr	r0, [r6, #0]
    2712:	b988      	cbnz	r0, 2738 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    2714:	4818      	ldr	r0, [pc, #96]	; (2778 <ser_in+0x74>)
    2716:	f7ff f98d 	bl	1a34 <running>
    271a:	b948      	cbnz	r0, 2730 <ser_in+0x2c>
			prcs = runthread (__inserial);
    271c:	4601      	mov	r1, r0
    271e:	4816      	ldr	r0, [pc, #88]	; (2778 <ser_in+0x74>)
    2720:	f7ff faf0 	bl	1d04 <__pi_fork>
			if (prcs == 0) {
    2724:	b920      	cbnz	r0, 2730 <ser_in+0x2c>
				npwait (st);
    2726:	4620      	mov	r0, r4
    2728:	f7ff fb06 	bl	1d38 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    272c:	f7fe feb0 	bl	1490 <__pi_release>
		join (prcs, st);
    2730:	4621      	mov	r1, r4
    2732:	f7ff f951 	bl	19d8 <__pi_join>
    2736:	e7f9      	b.n	272c <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    2738:	7803      	ldrb	r3, [r0, #0]
    273a:	b9a3      	cbnz	r3, 2766 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    273c:	7844      	ldrb	r4, [r0, #1]
    273e:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    2740:	42ac      	cmp	r4, r5
		prcs = len-1;
    2742:	bfa8      	it	ge
    2744:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    2748:	4622      	mov	r2, r4
    274a:	4638      	mov	r0, r7
    274c:	6831      	ldr	r1, [r6, #0]
    274e:	f7ff f9a0 	bl	1a92 <__pi_memcpy>
	ufree (__inpline);
    2752:	6830      	ldr	r0, [r6, #0]
    2754:	f7ff fa36 	bl	1bc4 <__pi_free>
	__inpline = NULL;
    2758:	2300      	movs	r3, #0
    275a:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    275c:	783a      	ldrb	r2, [r7, #0]
    275e:	b102      	cbz	r2, 2762 <ser_in+0x5e>
		buf [prcs] = '\0';
    2760:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    2762:	4620      	mov	r0, r4
    2764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    2766:	f7ff f977 	bl	1a58 <__pi_strlen>
    276a:	4604      	mov	r4, r0
    276c:	e7e8      	b.n	2740 <ser_in+0x3c>
		return 0;
    276e:	4614      	mov	r4, r2
    2770:	e7f7      	b.n	2762 <ser_in+0x5e>
    2772:	bf00      	nop
    2774:	20000604 	andcs	r0, r0, r4, lsl #12
    2778:	00003215 	andeq	r3, r0, r5, lsl r2

0000277c <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    277c:	b40e      	push	{r1, r2, r3}
    277e:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    2780:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    2782:	4812      	ldr	r0, [pc, #72]	; (27cc <ser_outf+0x50>)
    2784:	f7ff f956 	bl	1a34 <running>
    2788:	4606      	mov	r6, r0
    278a:	b120      	cbz	r0, 2796 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    278c:	4621      	mov	r1, r4
    278e:	f7ff f923 	bl	19d8 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    2792:	f7fe fe7d 	bl	1490 <__pi_release>
	va_start (ap, m);
    2796:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2798:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    279a:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    279c:	f000 fef0 	bl	3580 <vform>
    27a0:	4605      	mov	r5, r0
    27a2:	b918      	cbnz	r0, 27ac <ser_outf+0x30>
		umwait (st);
    27a4:	4620      	mov	r0, r4
    27a6:	f7ff fac7 	bl	1d38 <__pi_waitmem>
    27aa:	e7f2      	b.n	2792 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    27ac:	4601      	mov	r1, r0
    27ae:	4807      	ldr	r0, [pc, #28]	; (27cc <ser_outf+0x50>)
    27b0:	f7ff faa8 	bl	1d04 <__pi_fork>
    27b4:	b918      	cbnz	r0, 27be <ser_outf+0x42>
		ufree (buf);
    27b6:	4628      	mov	r0, r5
    27b8:	f7ff fa04 	bl	1bc4 <__pi_free>
		npwait (st);
    27bc:	e7f2      	b.n	27a4 <ser_outf+0x28>
		release;
	}

	return 0;
}
    27be:	4630      	mov	r0, r6
    27c0:	b003      	add	sp, #12
    27c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    27c6:	b003      	add	sp, #12
    27c8:	4770      	bx	lr
    27ca:	bf00      	nop
    27cc:	000031a5 	andeq	r3, r0, r5, lsr #3

000027d0 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    27d0:	b40e      	push	{r1, r2, r3}
    27d2:	b533      	push	{r0, r1, r4, r5, lr}
    27d4:	9905      	ldr	r1, [sp, #20]
    27d6:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    27d8:	b321      	cbz	r1, 2824 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    27da:	4d13      	ldr	r5, [pc, #76]	; (2828 <ser_inf+0x58>)
    27dc:	6828      	ldr	r0, [r5, #0]
    27de:	b988      	cbnz	r0, 2804 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    27e0:	4812      	ldr	r0, [pc, #72]	; (282c <ser_inf+0x5c>)
    27e2:	f7ff f927 	bl	1a34 <running>
    27e6:	b948      	cbnz	r0, 27fc <ser_inf+0x2c>
			prcs = runthread (__inserial);
    27e8:	4601      	mov	r1, r0
    27ea:	4810      	ldr	r0, [pc, #64]	; (282c <ser_inf+0x5c>)
    27ec:	f7ff fa8a 	bl	1d04 <__pi_fork>
			if (prcs == 0) {
    27f0:	b920      	cbnz	r0, 27fc <ser_inf+0x2c>
				npwait (st);
    27f2:	4620      	mov	r0, r4
    27f4:	f7ff faa0 	bl	1d38 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    27f8:	f7fe fe4a 	bl	1490 <__pi_release>
		join (prcs, st);
    27fc:	4621      	mov	r1, r4
    27fe:	f7ff f8eb 	bl	19d8 <__pi_join>
    2802:	e7f9      	b.n	27f8 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    2804:	aa06      	add	r2, sp, #24
    2806:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    2808:	f000 fee2 	bl	35d0 <vscan>
    280c:	4604      	mov	r4, r0

	ufree (__inpline);
    280e:	6828      	ldr	r0, [r5, #0]
    2810:	f7ff f9d8 	bl	1bc4 <__pi_free>
	__inpline = NULL;
    2814:	2300      	movs	r3, #0
    2816:	602b      	str	r3, [r5, #0]

	return prcs;
}
    2818:	4620      	mov	r0, r4
    281a:	b002      	add	sp, #8
    281c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2820:	b003      	add	sp, #12
    2822:	4770      	bx	lr
		return 0;
    2824:	460c      	mov	r4, r1
    2826:	e7f7      	b.n	2818 <ser_inf+0x48>
    2828:	20000604 	andcs	r0, r0, r4, lsl #12
    282c:	00003215 	andeq	r3, r0, r5, lsl r2

00002830 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2830:	4b04      	ldr	r3, [pc, #16]	; (2844 <plugch+0x14>)
    2832:	4a05      	ldr	r2, [pc, #20]	; (2848 <plugch+0x18>)
    2834:	781b      	ldrb	r3, [r3, #0]
    2836:	f503 7359 	add.w	r3, r3, #868	; 0x364
    283a:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    283c:	4a03      	ldr	r2, [pc, #12]	; (284c <plugch+0x1c>)
    283e:	81d3      	strh	r3, [r2, #14]
}
    2840:	4770      	bx	lr
    2842:	bf00      	nop
    2844:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2848:	20000054 	andcs	r0, r0, r4, asr r0
    284c:	2000003c 	andcs	r0, r0, ip, lsr r0

00002850 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    2850:	b570      	push	{r4, r5, r6, lr}
    2852:	460c      	mov	r4, r1
    2854:	281a      	cmp	r0, #26
    2856:	f200 80a4 	bhi.w	29a2 <option+0x152>
    285a:	e8df f000 	tbb	[pc, r0]
    285e:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    2862:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    2866:	3b35445b 	blcc	d539da <__ccfg+0xd33a32>
    286a:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    286e:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    2872:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    2876:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    287a:	4b4c      	ldr	r3, [pc, #304]	; (29ac <option+0x15c>)
    287c:	7818      	ldrb	r0, [r3, #0]
    287e:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    2882:	3002      	adds	r0, #2
			goto RVal;
    2884:	e028      	b.n	28d8 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    2886:	4a49      	ldr	r2, [pc, #292]	; (29ac <option+0x15c>)
    2888:	7813      	ldrb	r3, [r2, #0]
    288a:	f043 0301 	orr.w	r3, r3, #1
    288e:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    2890:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    2892:	4b47      	ldr	r3, [pc, #284]	; (29b0 <option+0x160>)
    2894:	6819      	ldr	r1, [r3, #0]
    2896:	4b47      	ldr	r3, [pc, #284]	; (29b4 <option+0x164>)
    2898:	460c      	mov	r4, r1
    289a:	681d      	ldr	r5, [r3, #0]
    289c:	2300      	movs	r3, #0
    289e:	f834 2b10 	ldrh.w	r2, [r4], #16
    28a2:	f002 0207 	and.w	r2, r2, #7
    28a6:	429a      	cmp	r2, r3
    28a8:	dd08      	ble.n	28bc <option+0x6c>
    28aa:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    28ae:	3301      	adds	r3, #1
    28b0:	42ae      	cmp	r6, r5
    28b2:	d1f8      	bne.n	28a6 <option+0x56>
    28b4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    28b8:	889b      	ldrh	r3, [r3, #4]
    28ba:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    28bc:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    28be:	4a3b      	ldr	r2, [pc, #236]	; (29ac <option+0x15c>)
    28c0:	7813      	ldrb	r3, [r2, #0]
    28c2:	f023 0301 	bic.w	r3, r3, #1
    28c6:	e7e2      	b.n	288e <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    28c8:	b101      	cbz	r1, 28cc <option+0x7c>
    28ca:	880c      	ldrh	r4, [r1, #0]
    28cc:	4b3a      	ldr	r3, [pc, #232]	; (29b8 <option+0x168>)
    28ce:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    28d0:	2000      	movs	r0, #0
    28d2:	e7f3      	b.n	28bc <option+0x6c>
			ret = (int) statid;
    28d4:	4b38      	ldr	r3, [pc, #224]	; (29b8 <option+0x168>)
    28d6:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    28d8:	2c00      	cmp	r4, #0
    28da:	d0ef      	beq.n	28bc <option+0x6c>
		*val = ret;
    28dc:	8020      	strh	r0, [r4, #0]
	return ret;
    28de:	e7ed      	b.n	28bc <option+0x6c>
			ret = rbuffl + 2;
    28e0:	4b36      	ldr	r3, [pc, #216]	; (29bc <option+0x16c>)
    28e2:	7818      	ldrb	r0, [r3, #0]
    28e4:	e7cd      	b.n	2882 <option+0x32>
				memcpy (val, &rxstat,
    28e6:	220c      	movs	r2, #12
			if (val != NULL) {
    28e8:	b121      	cbz	r1, 28f4 <option+0xa4>
				memcpy (val, &rxstat,
    28ea:	4620      	mov	r0, r4
    28ec:	4934      	ldr	r1, [pc, #208]	; (29c0 <option+0x170>)
    28ee:	f7ff f8d0 	bl	1a92 <__pi_memcpy>
    28f2:	e7ed      	b.n	28d0 <option+0x80>
				memset (&rxstat, 0, 
    28f4:	4832      	ldr	r0, [pc, #200]	; (29c0 <option+0x170>)
    28f6:	f7ff f8d6 	bl	1aa6 <__pi_memset>
    28fa:	e7e9      	b.n	28d0 <option+0x80>
			if (val == NULL)
    28fc:	b941      	cbnz	r1, 2910 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    28fe:	f7ff fac5 	bl	1e8c <lrnd>
    2902:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2906:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    2908:	482e      	ldr	r0, [pc, #184]	; (29c4 <option+0x174>)
    290a:	f7fe ffbd 	bl	1888 <__pi_utimer_set>
    290e:	e7bf      	b.n	2890 <option+0x40>
    2910:	8809      	ldrh	r1, [r1, #0]
    2912:	e7f9      	b.n	2908 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    2914:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    2916:	4b2c      	ldr	r3, [pc, #176]	; (29c8 <option+0x178>)
    2918:	8b5a      	ldrh	r2, [r3, #26]
    291a:	4b2c      	ldr	r3, [pc, #176]	; (29cc <option+0x17c>)
					== patable [ret])
    291c:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    2920:	428a      	cmp	r2, r1
    2922:	d0d9      	beq.n	28d8 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    2924:	3001      	adds	r0, #1
    2926:	2808      	cmp	r0, #8
    2928:	d1f8      	bne.n	291c <option+0xcc>
    292a:	e7d5      	b.n	28d8 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    292c:	b119      	cbz	r1, 2936 <option+0xe6>
				(*val > 7) ? 7 : *val;
    292e:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    2930:	2807      	cmp	r0, #7
    2932:	bf28      	it	cs
    2934:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2936:	4b25      	ldr	r3, [pc, #148]	; (29cc <option+0x17c>)
    2938:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    293c:	4b22      	ldr	r3, [pc, #136]	; (29c8 <option+0x178>)
    293e:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    2940:	4a1a      	ldr	r2, [pc, #104]	; (29ac <option+0x15c>)
    2942:	7813      	ldrb	r3, [r2, #0]
    2944:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2948:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    294a:	e7a2      	b.n	2892 <option+0x42>
			ret = (int) channel;
    294c:	4b20      	ldr	r3, [pc, #128]	; (29d0 <option+0x180>)
			ret = (int) vrate;
    294e:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2950:	e7c2      	b.n	28d8 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2952:	b121      	cbz	r1, 295e <option+0x10e>
				(*val > 7) ? 7 : *val;
    2954:	880c      	ldrh	r4, [r1, #0]
    2956:	2c07      	cmp	r4, #7
    2958:	bf28      	it	cs
    295a:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    295c:	b2e4      	uxtb	r4, r4
    295e:	4b1c      	ldr	r3, [pc, #112]	; (29d0 <option+0x180>)
    2960:	701c      	strb	r4, [r3, #0]
			plugch ();
    2962:	f7ff ff65 	bl	2830 <plugch>
			_BIS (dstate, DSTATE_IRST);
    2966:	4a11      	ldr	r2, [pc, #68]	; (29ac <option+0x15c>)
    2968:	7813      	ldrb	r3, [r2, #0]
    296a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    296e:	e78e      	b.n	288e <option+0x3e>
			ret = (int) vrate;
    2970:	4b18      	ldr	r3, [pc, #96]	; (29d4 <option+0x184>)
    2972:	e7ec      	b.n	294e <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2974:	b139      	cbz	r1, 2986 <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    2976:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2978:	2b03      	cmp	r3, #3
    297a:	d806      	bhi.n	298a <option+0x13a>
    297c:	b13b      	cbz	r3, 298e <option+0x13e>
    297e:	b2db      	uxtb	r3, r3
    2980:	4a14      	ldr	r2, [pc, #80]	; (29d4 <option+0x184>)
    2982:	7013      	strb	r3, [r2, #0]
    2984:	e7ed      	b.n	2962 <option+0x112>
    2986:	2302      	movs	r3, #2
    2988:	e7fa      	b.n	2980 <option+0x130>
    298a:	2303      	movs	r3, #3
    298c:	e7f8      	b.n	2980 <option+0x130>
    298e:	2301      	movs	r3, #1
    2990:	e7f6      	b.n	2980 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2992:	b119      	cbz	r1, 299c <option+0x14c>
    2994:	880b      	ldrh	r3, [r1, #0]
    2996:	4a10      	ldr	r2, [pc, #64]	; (29d8 <option+0x188>)
    2998:	8013      	strh	r3, [r2, #0]
			goto RRet;
    299a:	e799      	b.n	28d0 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    299c:	f44f 7380 	mov.w	r3, #256	; 0x100
    29a0:	e7f9      	b.n	2996 <option+0x146>
			syserror (EREQPAR, "cc13 op");
    29a2:	2003      	movs	r0, #3
    29a4:	490d      	ldr	r1, [pc, #52]	; (29dc <option+0x18c>)
    29a6:	f7fe f9b5 	bl	d14 <__pi_syserror>
    29aa:	bf00      	nop
    29ac:	200005c4 	andcs	r0, r0, r4, asr #11
    29b0:	200005c0 	andcs	r0, r0, r0, asr #11
    29b4:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    29b8:	200005f4 	strdcs	r0, [r0], -r4
    29bc:	200005d4 	ldrdcs	r0, [r0], -r4
    29c0:	200005e8 	andcs	r0, r0, r8, ror #11
    29c4:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
    29c8:	20000054 	andcs	r0, r0, r4, asr r0
    29cc:	0000532a 	andeq	r5, r0, sl, lsr #6
    29d0:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    29d4:	2000003a 	andcs	r0, r0, sl, lsr r0
    29d8:	20000038 	andcs	r0, r0, r8, lsr r0
    29dc:	000052c6 	andeq	r5, r0, r6, asr #5

000029e0 <issue_cmd>:
static void issue_cmd (lword cmd) {
    29e0:	b538      	push	{r3, r4, r5, lr}
    29e2:	4604      	mov	r4, r0
    29e4:	4d0c      	ldr	r5, [pc, #48]	; (2a18 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29e6:	4620      	mov	r0, r4
    29e8:	f001 f8a4 	bl	3b34 <NOROM_RFCDoorbellSendTo>
    29ec:	b2c2      	uxtb	r2, r0
    29ee:	2a01      	cmp	r2, #1
    29f0:	d011      	beq.n	2a16 <issue_cmd+0x36>
		if (res != 0x86)
    29f2:	2a86      	cmp	r2, #134	; 0x86
    29f4:	d003      	beq.n	29fe <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    29f6:	4909      	ldr	r1, [pc, #36]	; (2a1c <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    29f8:	2008      	movs	r0, #8
    29fa:	f7fe f98b 	bl	d14 <__pi_syserror>
		if (cnt-- == 0) {
    29fe:	3d01      	subs	r5, #1
    2a00:	d105      	bne.n	2a0e <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    2a02:	4621      	mov	r1, r4
    2a04:	4806      	ldr	r0, [pc, #24]	; (2a20 <issue_cmd+0x40>)
    2a06:	f7ff f9a3 	bl	1d50 <diag>
			syserror (EHARDWARE, "hang ic0");
    2a0a:	4906      	ldr	r1, [pc, #24]	; (2a24 <issue_cmd+0x44>)
    2a0c:	e7f4      	b.n	29f8 <issue_cmd+0x18>
		udelay (1);
    2a0e:	2001      	movs	r0, #1
    2a10:	f7fe f916 	bl	c40 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a14:	e7e7      	b.n	29e6 <issue_cmd+0x6>
}
    2a16:	bd38      	pop	{r3, r4, r5, pc}
    2a18:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    2a1c:	000052ce 	andeq	r5, r0, lr, asr #5
    2a20:	000052d2 	ldrdeq	r5, [r0], -r2
    2a24:	000052de 	ldrdeq	r5, [r0], -lr

00002a28 <rx_de>:
static void rx_de () {
    2a28:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    2a2a:	4c06      	ldr	r4, [pc, #24]	; (2a44 <rx_de+0x1c>)
    2a2c:	7823      	ldrb	r3, [r4, #0]
    2a2e:	079b      	lsls	r3, r3, #30
    2a30:	d506      	bpl.n	2a40 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2a32:	4805      	ldr	r0, [pc, #20]	; (2a48 <rx_de+0x20>)
    2a34:	f7ff ffd4 	bl	29e0 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    2a38:	7823      	ldrb	r3, [r4, #0]
    2a3a:	f023 0302 	bic.w	r3, r3, #2
    2a3e:	7023      	strb	r3, [r4, #0]
}
    2a40:	bd10      	pop	{r4, pc}
    2a42:	bf00      	nop
    2a44:	200005c4 	andcs	r0, r0, r4, asr #11
    2a48:	04010001 	streq	r0, [r1], #-1

00002a4c <rf_off>:
static void rf_off () {
    2a4c:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2a4e:	4c11      	ldr	r4, [pc, #68]	; (2a94 <rf_off+0x48>)
    2a50:	7823      	ldrb	r3, [r4, #0]
    2a52:	06db      	lsls	r3, r3, #27
    2a54:	d51d      	bpl.n	2a92 <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a56:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    2a58:	4b0f      	ldr	r3, [pc, #60]	; (2a98 <rf_off+0x4c>)
    2a5a:	2019      	movs	r0, #25
    2a5c:	681b      	ldr	r3, [r3, #0]
    2a5e:	695b      	ldr	r3, [r3, #20]
    2a60:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    2a62:	2000      	movs	r0, #0
    2a64:	f001 f9e4 	bl	3e30 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    2a68:	f001 f878 	bl	3b5c <NOROM_RFCSynthPowerDown>
    2a6c:	4b0b      	ldr	r3, [pc, #44]	; (2a9c <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a6e:	2001      	movs	r0, #1
    2a70:	601d      	str	r5, [r3, #0]
    2a72:	f7fe f92f 	bl	cd4 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a76:	4b0a      	ldr	r3, [pc, #40]	; (2aa0 <rf_off+0x54>)
    2a78:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a7a:	f001 f841 	bl	3b00 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a82:	4b08      	ldr	r3, [pc, #32]	; (2aa4 <rf_off+0x58>)
    2a84:	601a      	str	r2, [r3, #0]
    2a86:	2202      	movs	r2, #2
    2a88:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    2a8a:	7823      	ldrb	r3, [r4, #0]
    2a8c:	f023 0310 	bic.w	r3, r3, #16
    2a90:	7023      	strb	r3, [r4, #0]
}
    2a92:	bd38      	pop	{r3, r4, r5, pc}
    2a94:	200005c4 	andcs	r0, r0, r4, asr #11
    2a98:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    2a9c:	60040000 	andvs	r0, r4, r0
    2aa0:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2aa4:	400220a0 	andmi	r2, r2, r0, lsr #1

00002aa8 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2aa8:	b570      	push	{r4, r5, r6, lr}
    2aaa:	4604      	mov	r4, r0
    2aac:	460d      	mov	r5, r1
    2aae:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    2ab2:	8862      	ldrh	r2, [r4, #2]
    2ab4:	42aa      	cmp	r2, r5
    2ab6:	d00e      	beq.n	2ad6 <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    2ab8:	3e01      	subs	r6, #1
    2aba:	d108      	bne.n	2ace <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2abc:	8821      	ldrh	r1, [r4, #0]
    2abe:	4806      	ldr	r0, [pc, #24]	; (2ad8 <wait_cmd.constprop.0+0x30>)
    2ac0:	462b      	mov	r3, r5
    2ac2:	f7ff f945 	bl	1d50 <diag>
			syserror (EHARDWARE, "rt2");
    2ac6:	2008      	movs	r0, #8
    2ac8:	4904      	ldr	r1, [pc, #16]	; (2adc <wait_cmd.constprop.0+0x34>)
    2aca:	f7fe f923 	bl	d14 <__pi_syserror>
		udelay (1);
    2ace:	2001      	movs	r0, #1
    2ad0:	f7fe f8b6 	bl	c40 <udelay>
		if (cmd->status == tstat)
    2ad4:	e7ed      	b.n	2ab2 <wait_cmd.constprop.0+0xa>
}
    2ad6:	bd70      	pop	{r4, r5, r6, pc}
    2ad8:	000052e7 	andeq	r5, r0, r7, ror #5
    2adc:	000052f7 	strdeq	r5, [r0], -r7

00002ae0 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2ae0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ae4:	4b46      	ldr	r3, [pc, #280]	; (2c00 <rf_on.part.0+0x120>)
static void rf_on () {
    2ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aea:	601a      	str	r2, [r3, #0]
    2aec:	2202      	movs	r2, #2
    2aee:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    2af0:	f000 ffca 	bl	3a88 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2af4:	200a      	movs	r0, #10
    2af6:	f7fe f8a3 	bl	c40 <udelay>
    2afa:	f000 ffd1 	bl	3aa0 <NOROM_OSCHF_AttemptToSwitchToXosc>
    2afe:	2800      	cmp	r0, #0
    2b00:	d0f8      	beq.n	2af4 <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b02:	2401      	movs	r4, #1
    2b04:	4b3f      	ldr	r3, [pc, #252]	; (2c04 <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2b06:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b08:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2b0a:	f7fe f8c5 	bl	c98 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2b0e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2b12:	4b3d      	ldr	r3, [pc, #244]	; (2c08 <rf_on.part.0+0x128>)
	issue_cmd (
    2b14:	483d      	ldr	r0, [pc, #244]	; (2c0c <rf_on.part.0+0x12c>)
    2b16:	601a      	str	r2, [r3, #0]
    2b18:	f7ff ff62 	bl	29e0 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2b1c:	f44f 7223 	mov.w	r2, #652	; 0x28c
    2b20:	493b      	ldr	r1, [pc, #236]	; (2c10 <rf_on.part.0+0x130>)
    2b22:	483c      	ldr	r0, [pc, #240]	; (2c14 <rf_on.part.0+0x134>)
    2b24:	f001 ff06 	bl	4934 <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    2b28:	2200      	movs	r2, #0
    2b2a:	4b3b      	ldr	r3, [pc, #236]	; (2c18 <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    2b2c:	493b      	ldr	r1, [pc, #236]	; (2c1c <rf_on.part.0+0x13c>)
    2b2e:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2b30:	2202      	movs	r2, #2
    2b32:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    2b36:	2203      	movs	r2, #3
    2b38:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    2b3c:	2204      	movs	r2, #4
    2b3e:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2b40:	2205      	movs	r2, #5
    2b42:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2b44:	2206      	movs	r2, #6
    2b46:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2b4a:	4a35      	ldr	r2, [pc, #212]	; (2c20 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2b4c:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b50:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    2b52:	4b34      	ldr	r3, [pc, #208]	; (2c24 <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2b54:	4a34      	ldr	r2, [pc, #208]	; (2c28 <rf_on.part.0+0x148>)
      t7 = *pS++;
    2b56:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2b58:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2b5c:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2b60:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2b64:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    2b66:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    2b6a:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    2b6e:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    2b72:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    2b74:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    2b76:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    2b78:	6198      	str	r0, [r3, #24]
    2b7a:	4618      	mov	r0, r3
   } while (--nIterations);
    2b7c:	4288      	cmp	r0, r1
    2b7e:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    2b82:	f103 0320 	add.w	r3, r3, #32
    2b86:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    2b88:	d1e5      	bne.n	2b56 <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2b8a:	4b28      	ldr	r3, [pc, #160]	; (2c2c <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b8c:	4828      	ldr	r0, [pc, #160]	; (2c30 <rf_on.part.0+0x150>)
    2b8e:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    2b90:	4b28      	ldr	r3, [pc, #160]	; (2c34 <rf_on.part.0+0x154>)
    2b92:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    2b94:	4b28      	ldr	r3, [pc, #160]	; (2c38 <rf_on.part.0+0x158>)
    2b96:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    2b98:	4b28      	ldr	r3, [pc, #160]	; (2c3c <rf_on.part.0+0x15c>)
    2b9a:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2b9c:	4b28      	ldr	r3, [pc, #160]	; (2c40 <rf_on.part.0+0x160>)
    2b9e:	630b      	str	r3, [r1, #48]	; 0x30
    2ba0:	f7ff ff1e 	bl	29e0 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    2ba4:	2001      	movs	r0, #1
    2ba6:	f001 f943 	bl	3e30 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2baa:	4826      	ldr	r0, [pc, #152]	; (2c44 <rf_on.part.0+0x164>)
    2bac:	f001 f930 	bl	3e10 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2bb0:	4825      	ldr	r0, [pc, #148]	; (2c48 <rf_on.part.0+0x168>)
    2bb2:	f7ff ff15 	bl	29e0 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2bb6:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    2bba:	4823      	ldr	r0, [pc, #140]	; (2c48 <rf_on.part.0+0x168>)
    2bbc:	f7ff ff74 	bl	2aa8 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    2bc0:	4822      	ldr	r0, [pc, #136]	; (2c4c <rf_on.part.0+0x16c>)
    2bc2:	f7ff ff0d 	bl	29e0 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    2bc6:	4822      	ldr	r0, [pc, #136]	; (2c50 <rf_on.part.0+0x170>)
    2bc8:	f7ff ff0a 	bl	29e0 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2bcc:	4820      	ldr	r0, [pc, #128]	; (2c50 <rf_on.part.0+0x170>)
    2bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2bd2:	f7ff ff69 	bl	2aa8 <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2bd6:	4a1f      	ldr	r2, [pc, #124]	; (2c54 <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2bd8:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2bda:	7813      	ldrb	r3, [r2, #0]
    2bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2be0:	f043 0310 	orr.w	r3, r3, #16
    2be4:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2be6:	2300      	movs	r3, #0
    2be8:	4a1b      	ldr	r2, [pc, #108]	; (2c58 <rf_on.part.0+0x178>)
    2bea:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bec:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    2bf0:	4b1a      	ldr	r3, [pc, #104]	; (2c5c <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bf2:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    2bf4:	681b      	ldr	r3, [r3, #0]
}
    2bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    2bfa:	691b      	ldr	r3, [r3, #16]
    2bfc:	4718      	bx	r3
    2bfe:	bf00      	nop
    2c00:	40022090 	mulmi	r2, r0, r0
    2c04:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2c08:	60040000 	andvs	r0, r4, r0
    2c0c:	06070051 			; <UNDEFINED> instruction: 0x06070051
    2c10:	000059f0 	strdeq	r5, [r0], -r0
    2c14:	2100041c 	tstcs	r0, ip, lsl r4
    2c18:	21000390 			; <UNDEFINED> instruction: 0x21000390
    2c1c:	2100c680 	smlabbcs	r0, r0, r6, ip
    2c20:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2c24:	2100c000 	mrscs	ip, (UNDEF: 0)
    2c28:	0000533c 	andeq	r5, r0, ip, lsr r3
    2c2c:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2c30:	06070001 	streq	r0, [r7], -r1
    2c34:	1a101020 	bne	406cbc <__ccfg+0x3e6d14>
    2c38:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2c3c:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2c40:	70006b54 	andvc	r6, r0, r4, asr fp
    2c44:	200005d8 	ldrdcs	r0, [r0], -r8
    2c48:	20000054 	andcs	r0, r0, r4, asr r0
    2c4c:	20000024 	andcs	r0, r0, r4, lsr #32
    2c50:	2000003c 	andcs	r0, r0, ip, lsr r0
    2c54:	200005c4 	andcs	r0, r0, r4, asr #11
    2c58:	40041014 	andmi	r1, r4, r4, lsl r0
    2c5c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002c60 <rx_int_enable>:
static void rx_int_enable () {
    2c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c64:	4a2a      	ldr	r2, [pc, #168]	; (2d10 <rx_int_enable+0xb0>)
    2c66:	6813      	ldr	r3, [r2, #0]
    2c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2c70:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c72:	2200      	movs	r2, #0
    2c74:	4b27      	ldr	r3, [pc, #156]	; (2d14 <rx_int_enable+0xb4>)
    2c76:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c78:	681d      	ldr	r5, [r3, #0]
    2c7a:	2d00      	cmp	r5, #0
    2c7c:	d1fb      	bne.n	2c76 <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c7e:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c80:	4a25      	ldr	r2, [pc, #148]	; (2d18 <rx_int_enable+0xb8>)
				diag ("BAD RX");
    2c82:	4f26      	ldr	r7, [pc, #152]	; (2d1c <rx_int_enable+0xbc>)
    2c84:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c86:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2d28 <rx_int_enable+0xc8>
    2c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2c92:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c94:	4b22      	ldr	r3, [pc, #136]	; (2d20 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c96:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2d2c <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c9a:	69db      	ldr	r3, [r3, #28]
    2c9c:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2c9e:	7923      	ldrb	r3, [r4, #4]
    2ca0:	2b03      	cmp	r3, #3
    2ca2:	d11e      	bne.n	2ce2 <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ca4:	7a63      	ldrb	r3, [r4, #9]
    2ca6:	7a21      	ldrb	r1, [r4, #8]
    2ca8:	1cda      	adds	r2, r3, #3
    2caa:	4291      	cmp	r1, r2
			nr++;
    2cac:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2cb0:	d11c      	bne.n	2cec <rx_int_enable+0x8c>
    2cb2:	f898 2000 	ldrb.w	r2, [r8]
    2cb6:	429a      	cmp	r2, r3
    2cb8:	d318      	bcc.n	2cec <rx_int_enable+0x8c>
    2cba:	f013 0c01 	ands.w	ip, r3, #1
    2cbe:	d115      	bne.n	2cec <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2cc0:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2cc4:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    2cc6:	5c88      	ldrb	r0, [r1, r2]
    2cc8:	440b      	add	r3, r1
    2cca:	3880      	subs	r0, #128	; 0x80
    2ccc:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    2cce:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2cd2:	f8b9 0000 	ldrh.w	r0, [r9]
    2cd6:	f104 010a 	add.w	r1, r4, #10
    2cda:	f7ff fb5f 	bl	239c <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    2cde:	2300      	movs	r3, #0
    2ce0:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ce2:	2e01      	cmp	r6, #1
    2ce4:	d006      	beq.n	2cf4 <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2ce6:	2601      	movs	r6, #1
    2ce8:	6824      	ldr	r4, [r4, #0]
    2cea:	e7d8      	b.n	2c9e <rx_int_enable+0x3e>
				diag ("BAD RX");
    2cec:	4638      	mov	r0, r7
    2cee:	f7ff f82f 	bl	1d50 <diag>
    2cf2:	e7f4      	b.n	2cde <rx_int_enable+0x7e>
	if (nr) {
    2cf4:	b14d      	cbz	r5, 2d0a <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cf6:	f7ff f8c9 	bl	1e8c <lrnd>
}
    2cfa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cfe:	f3c0 4102 	ubfx	r1, r0, #16, #3
    2d02:	3102      	adds	r1, #2
    2d04:	4807      	ldr	r0, [pc, #28]	; (2d24 <rx_int_enable+0xc4>)
    2d06:	f7fe bdbf 	b.w	1888 <__pi_utimer_set>
}
    2d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d0e:	bf00      	nop
    2d10:	40041018 	andmi	r1, r4, r8, lsl r0
    2d14:	40041010 	andmi	r1, r4, r0, lsl r0
    2d18:	40041014 	andmi	r1, r4, r4, lsl r0
    2d1c:	000052fb 	strdeq	r5, [r0], -fp
    2d20:	2000007c 	andcs	r0, r0, ip, ror r0
    2d24:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
    2d28:	200005d4 	ldrdcs	r0, [r0], -r4
    2d2c:	200005cc 	andcs	r0, r0, ip, asr #11

00002d30 <cc1350_driver>:
thread (cc1350_driver)
    2d30:	2801      	cmp	r0, #1
    2d32:	b570      	push	{r4, r5, r6, lr}
    2d34:	f000 808b 	beq.w	2e4e <cc1350_driver+0x11e>
    2d38:	2802      	cmp	r0, #2
    2d3a:	f000 80bd 	beq.w	2eb8 <cc1350_driver+0x188>
    2d3e:	2800      	cmp	r0, #0
    2d40:	f040 80ce 	bne.w	2ee0 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2d44:	4c68      	ldr	r4, [pc, #416]	; (2ee8 <cc1350_driver+0x1b8>)
    2d46:	f994 3000 	ldrsb.w	r3, [r4]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	da05      	bge.n	2d5a <cc1350_driver+0x2a>
			rf_off ();
    2d4e:	f7ff fe7d 	bl	2a4c <rf_off>
			_BIC (dstate,
    2d52:	7823      	ldrb	r3, [r4, #0]
    2d54:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2d58:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2d5a:	7823      	ldrb	r3, [r4, #0]
    2d5c:	0798      	lsls	r0, r3, #30
    2d5e:	f003 0201 	and.w	r2, r3, #1
    2d62:	d51e      	bpl.n	2da2 <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2d64:	b90a      	cbnz	r2, 2d6a <cc1350_driver+0x3a>
				rx_de ();
    2d66:	f7ff fe5f 	bl	2a28 <rx_de>
		if (paylen == 0) {
    2d6a:	4d60      	ldr	r5, [pc, #384]	; (2eec <cc1350_driver+0x1bc>)
    2d6c:	4e60      	ldr	r6, [pc, #384]	; (2ef0 <cc1350_driver+0x1c0>)
    2d6e:	682b      	ldr	r3, [r5, #0]
    2d70:	2b00      	cmp	r3, #0
    2d72:	d14c      	bne.n	2e0e <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d74:	4b5f      	ldr	r3, [pc, #380]	; (2ef4 <cc1350_driver+0x1c4>)
    2d76:	4629      	mov	r1, r5
    2d78:	8818      	ldrh	r0, [r3, #0]
    2d7a:	f7ff fb5d 	bl	2438 <tcvphy_get>
    2d7e:	6170      	str	r0, [r6, #20]
    2d80:	2800      	cmp	r0, #0
    2d82:	d02f      	beq.n	2de4 <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d84:	4a5c      	ldr	r2, [pc, #368]	; (2ef8 <cc1350_driver+0x1c8>)
				paylen -= 2;
    2d86:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d88:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2d8a:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d8c:	4293      	cmp	r3, r2
				paylen -= 2;
    2d8e:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d90:	dc03      	bgt.n	2d9a <cc1350_driver+0x6a>
    2d92:	2b00      	cmp	r3, #0
    2d94:	dd01      	ble.n	2d9a <cc1350_driver+0x6a>
    2d96:	07db      	lsls	r3, r3, #31
    2d98:	d51b      	bpl.n	2dd2 <cc1350_driver+0xa2>
    2d9a:	200a      	movs	r0, #10
    2d9c:	4957      	ldr	r1, [pc, #348]	; (2efc <cc1350_driver+0x1cc>)
    2d9e:	f7fd ffb9 	bl	d14 <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2da2:	2a00      	cmp	r2, #0
    2da4:	d0e1      	beq.n	2d6a <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    2da6:	06d9      	lsls	r1, r3, #27
    2da8:	d50d      	bpl.n	2dc6 <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2daa:	4855      	ldr	r0, [pc, #340]	; (2f00 <cc1350_driver+0x1d0>)
    2dac:	69c3      	ldr	r3, [r0, #28]
    2dae:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2db0:	2300      	movs	r3, #0
    2db2:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2db4:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2db6:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2db8:	f7ff fe12 	bl	29e0 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2dbc:	7823      	ldrb	r3, [r4, #0]
    2dbe:	f043 0302 	orr.w	r3, r3, #2
    2dc2:	7023      	strb	r3, [r4, #0]
    2dc4:	e7d1      	b.n	2d6a <cc1350_driver+0x3a>
    2dc6:	f7ff fe8b 	bl	2ae0 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2dca:	7823      	ldrb	r3, [r4, #0]
    2dcc:	079a      	lsls	r2, r3, #30
    2dce:	d5ec      	bpl.n	2daa <cc1350_driver+0x7a>
    2dd0:	e7cb      	b.n	2d6a <cc1350_driver+0x3a>
				if (statid != 0xffff)
    2dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2dd6:	4b4b      	ldr	r3, [pc, #300]	; (2f04 <cc1350_driver+0x1d4>)
    2dd8:	881b      	ldrh	r3, [r3, #0]
    2dda:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2ddc:	bf18      	it	ne
    2dde:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2de0:	682b      	ldr	r3, [r5, #0]
    2de2:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    2de4:	6829      	ldr	r1, [r5, #0]
    2de6:	b991      	cbnz	r1, 2e0e <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    2de8:	4b47      	ldr	r3, [pc, #284]	; (2f08 <cc1350_driver+0x1d8>)
    2dea:	6818      	ldr	r0, [r3, #0]
    2dec:	f7fe fdc0 	bl	1970 <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    2df0:	7823      	ldrb	r3, [r4, #0]
    2df2:	079d      	lsls	r5, r3, #30
    2df4:	d503      	bpl.n	2dfe <cc1350_driver+0xce>
				rx_int_enable ();
    2df6:	f7ff ff33 	bl	2c60 <rx_int_enable>
			release;
    2dfa:	f7fe fb49 	bl	1490 <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    2dfe:	06dc      	lsls	r4, r3, #27
    2e00:	d5fb      	bpl.n	2dfa <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    2e02:	2102      	movs	r1, #2
    2e04:	4b41      	ldr	r3, [pc, #260]	; (2f0c <cc1350_driver+0x1dc>)
    2e06:	8818      	ldrh	r0, [r3, #0]
    2e08:	f7fe fdf8 	bl	19fc <delay>
    2e0c:	e7f5      	b.n	2dfa <cc1350_driver+0xca>
		if (bckf_timer) {
    2e0e:	4d40      	ldr	r5, [pc, #256]	; (2f10 <cc1350_driver+0x1e0>)
    2e10:	882b      	ldrh	r3, [r5, #0]
    2e12:	b163      	cbz	r3, 2e2e <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    2e14:	4b3c      	ldr	r3, [pc, #240]	; (2f08 <cc1350_driver+0x1d8>)
    2e16:	2100      	movs	r1, #0
    2e18:	6818      	ldr	r0, [r3, #0]
    2e1a:	f7fe fda9 	bl	1970 <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    2e1e:	8828      	ldrh	r0, [r5, #0]
    2e20:	2100      	movs	r1, #0
    2e22:	f7fe fdeb 	bl	19fc <delay>
			if (dstate & DSTATE_RXAC)
    2e26:	7823      	ldrb	r3, [r4, #0]
    2e28:	0798      	lsls	r0, r3, #30
    2e2a:	d5e6      	bpl.n	2dfa <cc1350_driver+0xca>
    2e2c:	e7e3      	b.n	2df6 <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    2e2e:	7823      	ldrb	r3, [r4, #0]
    2e30:	06d9      	lsls	r1, r3, #27
    2e32:	d401      	bmi.n	2e38 <cc1350_driver+0x108>
    2e34:	f7ff fe54 	bl	2ae0 <rf_on.part.0>
		rx_de ();
    2e38:	f7ff fdf6 	bl	2a28 <rx_de>
		RF_cmdPropTx . status = 0;
    2e3c:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e3e:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2e42:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e44:	4b33      	ldr	r3, [pc, #204]	; (2f14 <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2e46:	4834      	ldr	r0, [pc, #208]	; (2f18 <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e48:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2e4a:	f7ff fdc9 	bl	29e0 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2e4e:	4b26      	ldr	r3, [pc, #152]	; (2ee8 <cc1350_driver+0x1b8>)
    2e50:	f993 3000 	ldrsb.w	r3, [r3]
    2e54:	2b00      	cmp	r3, #0
    2e56:	f6ff af75 	blt.w	2d44 <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e5a:	4b2e      	ldr	r3, [pc, #184]	; (2f14 <cc1350_driver+0x1e4>)
    2e5c:	681a      	ldr	r2, [r3, #0]
    2e5e:	0792      	lsls	r2, r2, #30
    2e60:	d402      	bmi.n	2e68 <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2e62:	2101      	movs	r1, #1
    2e64:	4608      	mov	r0, r1
    2e66:	e7cf      	b.n	2e08 <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e68:	4821      	ldr	r0, [pc, #132]	; (2ef0 <cc1350_driver+0x1c0>)
    2e6a:	4c2c      	ldr	r4, [pc, #176]	; (2f1c <cc1350_driver+0x1ec>)
    2e6c:	8842      	ldrh	r2, [r0, #2]
    2e6e:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    2e72:	d018      	beq.n	2ea6 <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e74:	7822      	ldrb	r2, [r4, #0]
    2e76:	2a0f      	cmp	r2, #15
    2e78:	d909      	bls.n	2e8e <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2e7a:	2200      	movs	r2, #0
    2e7c:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e7e:	f06f 0202 	mvn.w	r2, #2
    2e82:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2e84:	f7ff fdac 	bl	29e0 <issue_cmd>
				proceed (DR_XMIT);
    2e88:	2001      	movs	r0, #1
    2e8a:	f7fe fd67 	bl	195c <proceed>
			txtries++;
    2e8e:	7823      	ldrb	r3, [r4, #0]
    2e90:	3301      	adds	r3, #1
    2e92:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e94:	f7fe fffa 	bl	1e8c <lrnd>
    2e98:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2e9c:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e9e:	481c      	ldr	r0, [pc, #112]	; (2f10 <cc1350_driver+0x1e0>)
    2ea0:	f7fe fcf2 	bl	1888 <__pi_utimer_set>
		goto DR_LOOP__;
    2ea4:	e74e      	b.n	2d44 <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ea6:	6940      	ldr	r0, [r0, #20]
    2ea8:	f7ff fb00 	bl	24ac <tcvphy_end>
		paylen = 0;
    2eac:	2300      	movs	r3, #0
    2eae:	4a0f      	ldr	r2, [pc, #60]	; (2eec <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2eb0:	2102      	movs	r1, #2
		paylen = 0;
    2eb2:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2eb4:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2eb6:	e7f2      	b.n	2e9e <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2eb8:	4b0b      	ldr	r3, [pc, #44]	; (2ee8 <cc1350_driver+0x1b8>)
    2eba:	781a      	ldrb	r2, [r3, #0]
    2ebc:	f993 3000 	ldrsb.w	r3, [r3]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	f6ff af3f 	blt.w	2d44 <cc1350_driver+0x14>
    2ec6:	07d3      	lsls	r3, r2, #31
    2ec8:	f53f af3c 	bmi.w	2d44 <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2ecc:	4b09      	ldr	r3, [pc, #36]	; (2ef4 <cc1350_driver+0x1c4>)
    2ece:	8818      	ldrh	r0, [r3, #0]
    2ed0:	f7ff fad2 	bl	2478 <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2ed4:	2800      	cmp	r0, #0
    2ed6:	f47f af35 	bne.w	2d44 <cc1350_driver+0x14>
			rf_off ();
    2eda:	f7ff fdb7 	bl	2a4c <rf_off>
    2ede:	e731      	b.n	2d44 <cc1350_driver+0x14>
endthread
    2ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2ee4:	f7fe bcb2 	b.w	184c <__pi_badstate>
    2ee8:	200005c4 	andcs	r0, r0, r4, asr #11
    2eec:	200005c8 	andcs	r0, r0, r8, asr #11
    2ef0:	200000a0 	andcs	r0, r0, r0, lsr #1
    2ef4:	200005cc 	andcs	r0, r0, ip, asr #11
    2ef8:	200005d4 	ldrdcs	r0, [r0], -r4
    2efc:	00005302 	andeq	r5, r0, r2, lsl #6
    2f00:	2000007c 	andcs	r0, r0, ip, ror r0
    2f04:	200005f4 	strdcs	r0, [r0], -r4
    2f08:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2f0c:	20000038 	andcs	r0, r0, r8, lsr r0
    2f10:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
    2f14:	40041010 	andmi	r1, r4, r0, lsl r0
    2f18:	20000008 	andcs	r0, r0, r8
    2f1c:	200005f6 	strdcs	r0, [r0], -r6

00002f20 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    2f20:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f22:	4a15      	ldr	r2, [pc, #84]	; (2f78 <RFCCPE0IntHandler+0x58>)
    2f24:	6813      	ldr	r3, [r2, #0]
    2f26:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    2f28:	bfbf      	itttt	lt
    2f2a:	4914      	ldrlt	r1, [pc, #80]	; (2f7c <RFCCPE0IntHandler+0x5c>)
    2f2c:	780b      	ldrblt	r3, [r1, #0]
    2f2e:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2f32:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2f34:	2100      	movs	r1, #0
    2f36:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f38:	6813      	ldr	r3, [r2, #0]
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d1fb      	bne.n	2f36 <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f3e:	4a10      	ldr	r2, [pc, #64]	; (2f80 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2f40:	4c10      	ldr	r4, [pc, #64]	; (2f84 <RFCCPE0IntHandler+0x64>)
    2f42:	6811      	ldr	r1, [r2, #0]
    2f44:	6013      	str	r3, [r2, #0]
    2f46:	4a10      	ldr	r2, [pc, #64]	; (2f88 <RFCCPE0IntHandler+0x68>)
    2f48:	6824      	ldr	r4, [r4, #0]
    2f4a:	6811      	ldr	r1, [r2, #0]
    2f4c:	4608      	mov	r0, r1
    2f4e:	f830 2b10 	ldrh.w	r2, [r0], #16
    2f52:	f002 0207 	and.w	r2, r2, #7
    2f56:	429a      	cmp	r2, r3
    2f58:	dd08      	ble.n	2f6c <RFCCPE0IntHandler+0x4c>
    2f5a:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2f5e:	3301      	adds	r3, #1
    2f60:	42a5      	cmp	r5, r4
    2f62:	d1f8      	bne.n	2f56 <RFCCPE0IntHandler+0x36>
    2f64:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2f68:	889b      	ldrh	r3, [r3, #4]
    2f6a:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2f6c:	4a07      	ldr	r2, [pc, #28]	; (2f8c <RFCCPE0IntHandler+0x6c>)
    2f6e:	7813      	ldrb	r3, [r2, #0]
    2f70:	f043 0302 	orr.w	r3, r3, #2
    2f74:	7013      	strb	r3, [r2, #0]
}
    2f76:	bd30      	pop	{r4, r5, pc}
    2f78:	40041010 	andmi	r1, r4, r0, lsl r0
    2f7c:	200005c4 	andcs	r0, r0, r4, asr #11
    2f80:	40041014 	andmi	r1, r4, r4, lsl r0
    2f84:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2f88:	200005c0 	andcs	r0, r0, r0, asr #11
    2f8c:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00002f90 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2f94:	4c49      	ldr	r4, [pc, #292]	; (30bc <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    2f96:	4606      	mov	r6, r0
	if (rbuffl != 0)
    2f98:	7822      	ldrb	r2, [r4, #0]
    2f9a:	b11a      	cbz	r2, 2fa4 <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2f9c:	2009      	movs	r0, #9
    2f9e:	4948      	ldr	r1, [pc, #288]	; (30c0 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2fa0:	f7fd feb8 	bl	d14 <__pi_syserror>
	if (mbs == 0)
    2fa4:	b129      	cbz	r1, 2fb2 <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2fa6:	1f8a      	subs	r2, r1, #6
    2fa8:	2af4      	cmp	r2, #244	; 0xf4
    2faa:	d903      	bls.n	2fb4 <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2fac:	2003      	movs	r0, #3
    2fae:	4945      	ldr	r1, [pc, #276]	; (30c4 <phys_cc1350+0x134>)
    2fb0:	e7f6      	b.n	2fa0 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    2fb2:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2fb4:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    2fb6:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    2fba:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2fbc:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2fc0:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2fc2:	7820      	ldrb	r0, [r4, #0]
    2fc4:	469b      	mov	fp, r3
    2fc6:	300d      	adds	r0, #13
    2fc8:	f7fe fe48 	bl	1c5c <__pi_malloc>
		if (db == NULL)
    2fcc:	4603      	mov	r3, r0
    2fce:	b920      	cbnz	r0, 2fda <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2fd0:	2006      	movs	r0, #6
    2fd2:	493b      	ldr	r1, [pc, #236]	; (30c0 <phys_cc1350+0x130>)
    2fd4:	e7e4      	b.n	2fa0 <phys_cc1350+0x10>
    2fd6:	46b8      	mov	r8, r7
    2fd8:	e7f3      	b.n	2fc2 <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    2fda:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    2fde:	2f00      	cmp	r7, #0
    2fe0:	d03e      	beq.n	3060 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    2fe2:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    2fe6:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    2fe8:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    2fea:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    2fec:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    2ff0:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    2ff4:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    2ff6:	d1ee      	bne.n	2fd6 <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    2ff8:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ffa:	2008      	movs	r0, #8
    2ffc:	f7fe fe2e 	bl	1c5c <__pi_malloc>
    3000:	4b31      	ldr	r3, [pc, #196]	; (30c8 <phys_cc1350+0x138>)
    3002:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    3004:	2800      	cmp	r0, #0
    3006:	d0e3      	beq.n	2fd0 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    3008:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    300a:	2500      	movs	r5, #0
    300c:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    300e:	492f      	ldr	r1, [pc, #188]	; (30cc <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    3010:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    3012:	4a2f      	ldr	r2, [pc, #188]	; (30d0 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3014:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    3016:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    3018:	89da      	ldrh	r2, [r3, #14]
    301a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    301e:	f042 0206 	orr.w	r2, r2, #6
    3022:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    3024:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3026:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    302a:	3b02      	subs	r3, #2
    302c:	7023      	strb	r3, [r4, #0]
	physid = phy;
    302e:	4b29      	ldr	r3, [pc, #164]	; (30d4 <phys_cc1350+0x144>)
    3030:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3032:	f7ff f98b 	bl	234c <tcvphy_reg>
    3036:	4b28      	ldr	r3, [pc, #160]	; (30d8 <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3038:	2207      	movs	r2, #7
    303a:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    303c:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    303e:	462b      	mov	r3, r5
    3040:	4826      	ldr	r0, [pc, #152]	; (30dc <phys_cc1350+0x14c>)
    3042:	f7fe fe85 	bl	1d50 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    3046:	4826      	ldr	r0, [pc, #152]	; (30e0 <phys_cc1350+0x150>)
    3048:	f7fe fc08 	bl	185c <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    304c:	4629      	mov	r1, r5
    304e:	4825      	ldr	r0, [pc, #148]	; (30e4 <phys_cc1350+0x154>)
    3050:	f7fe fe58 	bl	1d04 <__pi_fork>
    3054:	4b24      	ldr	r3, [pc, #144]	; (30e8 <phys_cc1350+0x158>)
    3056:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    3058:	b920      	cbnz	r0, 3064 <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    305a:	2004      	movs	r0, #4
    305c:	4918      	ldr	r1, [pc, #96]	; (30c0 <phys_cc1350+0x130>)
    305e:	e79f      	b.n	2fa0 <phys_cc1350+0x10>
    3060:	4605      	mov	r5, r0
    3062:	e7c0      	b.n	2fe6 <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3064:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    3068:	4c20      	ldr	r4, [pc, #128]	; (30ec <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    306a:	4921      	ldr	r1, [pc, #132]	; (30f0 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    306c:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    306e:	4b21      	ldr	r3, [pc, #132]	; (30f4 <phys_cc1350+0x164>)
    3070:	781a      	ldrb	r2, [r3, #0]
    3072:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3074:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3078:	8858      	ldrh	r0, [r3, #2]
    307a:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    307e:	6922      	ldr	r2, [r4, #16]
    3080:	f003 030f 	and.w	r3, r3, #15
    3084:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    3088:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    308c:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3090:	f022 020f 	bic.w	r2, r2, #15
    3094:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    3098:	4313      	orrs	r3, r2
    309a:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    309c:	f7ff fbc8 	bl	2830 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    30a0:	4b15      	ldr	r3, [pc, #84]	; (30f8 <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    30a2:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    30a4:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    30a6:	f000 fe27 	bl	3cf8 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    30aa:	4620      	mov	r0, r4
    30ac:	4913      	ldr	r1, [pc, #76]	; (30fc <phys_cc1350+0x16c>)
    30ae:	f000 fd7b 	bl	3ba8 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    30b2:	4b13      	ldr	r3, [pc, #76]	; (3100 <phys_cc1350+0x170>)
    30b4:	601d      	str	r5, [r3, #0]
}
    30b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30ba:	bf00      	nop
    30bc:	200005d4 	ldrdcs	r0, [r0], -r4
    30c0:	0000530a 	andeq	r5, r0, sl, lsl #6
    30c4:	0000530f 	andeq	r5, r0, pc, lsl #6
    30c8:	2000007c 	andcs	r0, r0, ip, ror r0
    30cc:	00002851 	andeq	r2, r0, r1, asr r8
    30d0:	200005e8 	andcs	r0, r0, r8, ror #11
    30d4:	200005cc 	andcs	r0, r0, ip, asr #11
    30d8:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    30dc:	00005317 	andeq	r5, r0, r7, lsl r3
    30e0:	200005ba 			; <UNDEFINED> instruction: 0x200005ba
    30e4:	00002d31 	andeq	r2, r0, r1, lsr sp
    30e8:	200005c0 	andcs	r0, r0, r0, asr #11
    30ec:	20000054 	andcs	r0, r0, r4, asr r0
    30f0:	00005c7c 	andeq	r5, r0, ip, ror ip
    30f4:	2000003a 	andcs	r0, r0, sl, lsr r0
    30f8:	400821d0 	ldrdmi	r2, [r8], -r0
    30fc:	200005d8 	ldrdcs	r0, [r0], -r8
    3100:	40041018 	andmi	r1, r4, r8, lsl r0

00003104 <tcv_clo_null>:
    3104:	b510      	push	{r4, lr}
    3106:	4a07      	ldr	r2, [pc, #28]	; (3124 <tcv_clo_null+0x20>)
    3108:	4603      	mov	r3, r0
    310a:	6812      	ldr	r2, [r2, #0]
    310c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3110:	b132      	cbz	r2, 3120 <tcv_clo_null+0x1c>
    3112:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    3116:	428c      	cmp	r4, r1
    3118:	bf04      	itt	eq
    311a:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    311e:	2000      	moveq	r0, #0
    3120:	bd10      	pop	{r4, pc}
    3122:	bf00      	nop
    3124:	200005f8 	strdcs	r0, [r0], -r8

00003128 <tcv_rcv_null>:
    3128:	4907      	ldr	r1, [pc, #28]	; (3148 <tcv_rcv_null+0x20>)
    312a:	9a00      	ldr	r2, [sp, #0]
    312c:	6809      	ldr	r1, [r1, #0]
    312e:	b909      	cbnz	r1, 3134 <tcv_rcv_null+0xc>
    3130:	2000      	movs	r0, #0
    3132:	4770      	bx	lr
    3134:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3138:	6019      	str	r1, [r3, #0]
    313a:	3101      	adds	r1, #1
    313c:	d0f8      	beq.n	3130 <tcv_rcv_null+0x8>
    313e:	2300      	movs	r3, #0
    3140:	2002      	movs	r0, #2
    3142:	8053      	strh	r3, [r2, #2]
    3144:	8013      	strh	r3, [r2, #0]
    3146:	4770      	bx	lr
    3148:	200005f8 	strdcs	r0, [r0], -r8

0000314c <tcv_frm_null>:
    314c:	2000      	movs	r0, #0
    314e:	8048      	strh	r0, [r1, #2]
    3150:	8008      	strh	r0, [r1, #0]
    3152:	4770      	bx	lr

00003154 <tcv_out_null>:
    3154:	2004      	movs	r0, #4
    3156:	4770      	bx	lr

00003158 <tcv_xmt_null>:
    3158:	2001      	movs	r0, #1
    315a:	4770      	bx	lr

0000315c <tcv_ope_null>:
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	4c0f      	ldr	r4, [pc, #60]	; (319c <tcv_ope_null+0x40>)
    3160:	4605      	mov	r5, r0
    3162:	6823      	ldr	r3, [r4, #0]
    3164:	460e      	mov	r6, r1
    3166:	b94b      	cbnz	r3, 317c <tcv_ope_null+0x20>
    3168:	200c      	movs	r0, #12
    316a:	f7fe fd77 	bl	1c5c <__pi_malloc>
    316e:	6020      	str	r0, [r4, #0]
    3170:	b178      	cbz	r0, 3192 <tcv_ope_null+0x36>
    3172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3176:	e9c0 3300 	strd	r3, r3, [r0]
    317a:	6083      	str	r3, [r0, #8]
    317c:	6823      	ldr	r3, [r4, #0]
    317e:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    3182:	3201      	adds	r2, #1
    3184:	bf06      	itte	eq
    3186:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    318a:	2000      	moveq	r0, #0
    318c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3190:	bd70      	pop	{r4, r5, r6, pc}
    3192:	2006      	movs	r0, #6
    3194:	4902      	ldr	r1, [pc, #8]	; (31a0 <tcv_ope_null+0x44>)
    3196:	f7fd fdbd 	bl	d14 <__pi_syserror>
    319a:	bf00      	nop
    319c:	200005f8 	strdcs	r0, [r0], -r8
    31a0:	00005c88 	andeq	r5, r0, r8, lsl #25

000031a4 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    31a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31a6:	4b18      	ldr	r3, [pc, #96]	; (3208 <__outserial+0x64>)
    31a8:	681b      	ldr	r3, [r3, #0]
    31aa:	689d      	ldr	r5, [r3, #8]
    31ac:	b130      	cbz	r0, 31bc <__outserial+0x18>
    31ae:	280a      	cmp	r0, #10
    31b0:	d00d      	beq.n	31ce <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    31b2:	b003      	add	sp, #12
    31b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    31b8:	f7fe bb48 	b.w	184c <__pi_badstate>
	ptr = data;
    31bc:	4b13      	ldr	r3, [pc, #76]	; (320c <__outserial+0x68>)
    31be:	4c14      	ldr	r4, [pc, #80]	; (3210 <__outserial+0x6c>)
    31c0:	601d      	str	r5, [r3, #0]
	if (*ptr)
    31c2:	782b      	ldrb	r3, [r5, #0]
    31c4:	b1e3      	cbz	r3, 3200 <__outserial+0x5c>
		len = strlen (ptr);
    31c6:	4628      	mov	r0, r5
    31c8:	f7fe fc46 	bl	1a58 <__pi_strlen>
    31cc:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    31ce:	4e0f      	ldr	r6, [pc, #60]	; (320c <__outserial+0x68>)
    31d0:	4f0f      	ldr	r7, [pc, #60]	; (3210 <__outserial+0x6c>)
    31d2:	883b      	ldrh	r3, [r7, #0]
    31d4:	2201      	movs	r2, #1
    31d6:	9300      	str	r3, [sp, #0]
    31d8:	2100      	movs	r1, #0
    31da:	6833      	ldr	r3, [r6, #0]
    31dc:	200a      	movs	r0, #10
    31de:	f7fe fc7b 	bl	1ad8 <io>
	ptr += quant;
    31e2:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    31e4:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    31e6:	4403      	add	r3, r0
	len -= quant;
    31e8:	1a24      	subs	r4, r4, r0
	ptr += quant;
    31ea:	6033      	str	r3, [r6, #0]
	len -= quant;
    31ec:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    31ee:	2c00      	cmp	r4, #0
    31f0:	d1ef      	bne.n	31d2 <__outserial+0x2e>
		ufree (data);
    31f2:	4628      	mov	r0, r5
    31f4:	f7fe fce6 	bl	1bc4 <__pi_free>
		finish;
    31f8:	4620      	mov	r0, r4
    31fa:	f7fe fd07 	bl	1c0c <kill>
    31fe:	e7e8      	b.n	31d2 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3200:	786b      	ldrb	r3, [r5, #1]
    3202:	3303      	adds	r3, #3
    3204:	6023      	str	r3, [r4, #0]
    3206:	e7e2      	b.n	31ce <__outserial+0x2a>
    3208:	200006d4 	ldrdcs	r0, [r0], -r4
    320c:	20000600 	andcs	r0, r0, r0, lsl #12
    3210:	200005fc 	strdcs	r0, [r0], -ip

00003214 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    3214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3216:	4d42      	ldr	r5, [pc, #264]	; (3320 <__inserial+0x10c>)
    3218:	682a      	ldr	r2, [r5, #0]
    321a:	6894      	ldr	r4, [r2, #8]
    321c:	2803      	cmp	r0, #3
    321e:	d87a      	bhi.n	3316 <__inserial+0x102>
    3220:	e8df f000 	tbb	[pc, r0]
    3224:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    3228:	4b3e      	ldr	r3, [pc, #248]	; (3324 <__inserial+0x110>)
    322a:	681b      	ldr	r3, [r3, #0]
    322c:	b113      	cbz	r3, 3234 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    322e:	2000      	movs	r0, #0
    3230:	f7fe fcec 	bl	1c0c <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3234:	2040      	movs	r0, #64	; 0x40
    3236:	f7fe fd11 	bl	1c5c <__pi_malloc>
    323a:	4b3b      	ldr	r3, [pc, #236]	; (3328 <__inserial+0x114>)
    323c:	4604      	mov	r4, r0
    323e:	6018      	str	r0, [r3, #0]
    3240:	b918      	cbnz	r0, 324a <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    3242:	f7fe fd79 	bl	1d38 <__pi_waitmem>
		release;
    3246:	f7fe f923 	bl	1490 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    324a:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    324c:	682b      	ldr	r3, [r5, #0]
    324e:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    3250:	4b36      	ldr	r3, [pc, #216]	; (332c <__inserial+0x118>)
    3252:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    3254:	2001      	movs	r0, #1
    3256:	2200      	movs	r2, #0
    3258:	4d33      	ldr	r5, [pc, #204]	; (3328 <__inserial+0x114>)
    325a:	9000      	str	r0, [sp, #0]
    325c:	682b      	ldr	r3, [r5, #0]
    325e:	4611      	mov	r1, r2
    3260:	f7fe fc3a 	bl	1ad8 <io>
	if (ptr == (char*) data) { // new line
    3264:	682b      	ldr	r3, [r5, #0]
    3266:	42a3      	cmp	r3, r4
    3268:	d10d      	bne.n	3286 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    326a:	7823      	ldrb	r3, [r4, #0]
    326c:	b923      	cbnz	r3, 3278 <__inserial+0x64>
			ptr++;
    326e:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    3270:	2002      	movs	r0, #2
			ptr++;
    3272:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    3274:	f7fe fb72 	bl	195c <proceed>
		}

		if (*ptr < 0x20)
    3278:	682b      	ldr	r3, [r5, #0]
    327a:	781b      	ldrb	r3, [r3, #0]
    327c:	2b1f      	cmp	r3, #31
    327e:	d802      	bhi.n	3286 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    3280:	2001      	movs	r0, #1
    3282:	f7fe fb6b 	bl	195c <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    3286:	682b      	ldr	r3, [r5, #0]
    3288:	781a      	ldrb	r2, [r3, #0]
    328a:	2a0a      	cmp	r2, #10
    328c:	d001      	beq.n	3292 <__inserial+0x7e>
    328e:	2a0d      	cmp	r2, #13
    3290:	d105      	bne.n	329e <__inserial+0x8a>
		*ptr = '\0';
    3292:	2000      	movs	r0, #0
    3294:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    3296:	4b23      	ldr	r3, [pc, #140]	; (3324 <__inserial+0x110>)
    3298:	601c      	str	r4, [r3, #0]
		finish;
    329a:	f7fe fcb7 	bl	1c0c <kill>
	}

	if (len) {
    329e:	4923      	ldr	r1, [pc, #140]	; (332c <__inserial+0x118>)
    32a0:	680b      	ldr	r3, [r1, #0]
    32a2:	b123      	cbz	r3, 32ae <__inserial+0x9a>
		ptr++;
    32a4:	682a      	ldr	r2, [r5, #0]
		len--;
    32a6:	3b01      	subs	r3, #1
		ptr++;
    32a8:	3201      	adds	r2, #1
    32aa:	602a      	str	r2, [r5, #0]
		len--;
    32ac:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    32ae:	2001      	movs	r0, #1
    32b0:	f7fe fb54 	bl	195c <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    32b4:	2301      	movs	r3, #1
    32b6:	2200      	movs	r2, #0
    32b8:	4d1b      	ldr	r5, [pc, #108]	; (3328 <__inserial+0x114>)
    32ba:	9300      	str	r3, [sp, #0]
    32bc:	4611      	mov	r1, r2
    32be:	682b      	ldr	r3, [r5, #0]
    32c0:	2002      	movs	r0, #2
    32c2:	f7fe fc09 	bl	1ad8 <io>
	len -= 2;
    32c6:	4819      	ldr	r0, [pc, #100]	; (332c <__inserial+0x118>)
    32c8:	6803      	ldr	r3, [r0, #0]
    32ca:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    32cc:	682b      	ldr	r3, [r5, #0]
    32ce:	f813 1b01 	ldrb.w	r1, [r3], #1
    32d2:	3101      	adds	r1, #1
		len = *ptr + 1;
    32d4:	4291      	cmp	r1, r2
    32d6:	bfd4      	ite	le
    32d8:	6001      	strle	r1, [r0, #0]
    32da:	6002      	strgt	r2, [r0, #0]
	ptr++;
    32dc:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    32de:	2200      	movs	r2, #0
    32e0:	4f12      	ldr	r7, [pc, #72]	; (332c <__inserial+0x118>)
    32e2:	4d11      	ldr	r5, [pc, #68]	; (3328 <__inserial+0x114>)
    32e4:	883b      	ldrh	r3, [r7, #0]
    32e6:	4611      	mov	r1, r2
    32e8:	9300      	str	r3, [sp, #0]
    32ea:	682b      	ldr	r3, [r5, #0]
    32ec:	2003      	movs	r0, #3
    32ee:	f7fe fbf3 	bl	1ad8 <io>
	len -= quant;
    32f2:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32f4:	4606      	mov	r6, r0
	len -= quant;
    32f6:	1a18      	subs	r0, r3, r0
    32f8:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    32fa:	b918      	cbnz	r0, 3304 <__inserial+0xf0>
		__inpline = (char*)data;
    32fc:	4b09      	ldr	r3, [pc, #36]	; (3324 <__inserial+0x110>)
    32fe:	601c      	str	r4, [r3, #0]
		finish;
    3300:	f7fe fc84 	bl	1c0c <kill>
	}
	ptr += quant;
    3304:	6828      	ldr	r0, [r5, #0]
    3306:	4430      	add	r0, r6
    3308:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    330a:	2003      	movs	r0, #3

endstrand
    330c:	b003      	add	sp, #12
    330e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    3312:	f7fe bb23 	b.w	195c <proceed>
endstrand
    3316:	b003      	add	sp, #12
    3318:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    331c:	f7fe ba96 	b.w	184c <__pi_badstate>
    3320:	200006d4 	ldrdcs	r0, [r0], -r4
    3324:	20000604 	andcs	r0, r0, r4, lsl #12
    3328:	2000060c 	andcs	r0, r0, ip, lsl #12
    332c:	20000608 	andcs	r0, r0, r8, lsl #12

00003330 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    3330:	f8dc 2000 	ldr.w	r2, [ip]
    3334:	b132      	cbz	r2, 3344 <outc.5724+0x14>
    3336:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    333a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    333e:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    3340:	bf88      	it	hi
    3342:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    3344:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    3348:	3301      	adds	r3, #1
    334a:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    334e:	4770      	bx	lr

00003350 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    3354:	461c      	mov	r4, r3
    3356:	ab0c      	add	r3, sp, #48	; 0x30
    3358:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    335a:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    335c:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    335e:	4f86      	ldr	r7, [pc, #536]	; (3578 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3360:	9001      	str	r0, [sp, #4]
    3362:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    3366:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    336a:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    336e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    3372:	d118      	bne.n	33a6 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    3374:	f892 9001 	ldrb.w	r9, [r2, #1]
    3378:	1c95      	adds	r5, r2, #2
				outc ('\\');
    337a:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    337e:	f1b9 0f00 	cmp.w	r9, #0
    3382:	d10b      	bne.n	339c <__pi_vfparse+0x4c>
				outc ('\\');
    3384:	205c      	movs	r0, #92	; 0x5c
    3386:	f7ff ffd3 	bl	3330 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    338a:	4648      	mov	r0, r9
    338c:	f10d 0c04 	add.w	ip, sp, #4
    3390:	f7ff ffce 	bl	3330 <outc.5724>
			if (c == '\0')
    3394:	f1b9 0f00 	cmp.w	r9, #0
    3398:	d103      	bne.n	33a2 <__pi_vfparse+0x52>
    339a:	e027      	b.n	33ec <__pi_vfparse+0x9c>
			outc (c);
    339c:	4648      	mov	r0, r9
				outc (val);
    339e:	f7ff ffc7 	bl	3330 <outc.5724>
				val = (word) va_arg (ap, aword);
    33a2:	462a      	mov	r2, r5
    33a4:	e7e1      	b.n	336a <__pi_vfparse+0x1a>
		if (c == '%') {
    33a6:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    33aa:	f040 80e2 	bne.w	3572 <__pi_vfparse+0x222>
			c = *fm++;
    33ae:	f892 8001 	ldrb.w	r8, [r2, #1]
    33b2:	1c95      	adds	r5, r2, #2
			switch (c) {
    33b4:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    33b8:	f000 80cd 	beq.w	3556 <__pi_vfparse+0x206>
    33bc:	d81b      	bhi.n	33f6 <__pi_vfparse+0xa6>
    33be:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    33c2:	d033      	beq.n	342c <__pi_vfparse+0xdc>
    33c4:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    33c8:	d067      	beq.n	349a <__pi_vfparse+0x14a>
    33ca:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    33ce:	f000 80bc 	beq.w	354a <__pi_vfparse+0x1fa>
				outc ('%');
    33d2:	2025      	movs	r0, #37	; 0x25
    33d4:	f10d 0c04 	add.w	ip, sp, #4
    33d8:	f7ff ffaa 	bl	3330 <outc.5724>
				outc (c);
    33dc:	4640      	mov	r0, r8
    33de:	f10d 0c04 	add.w	ip, sp, #4
    33e2:	f7ff ffa5 	bl	3330 <outc.5724>
				if (c == '\0')
    33e6:	f1b8 0f00 	cmp.w	r8, #0
    33ea:	d1da      	bne.n	33a2 <__pi_vfparse+0x52>
Ret:
				return d;
    33ec:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    33f0:	b004      	add	sp, #16
    33f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    33f6:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    33fa:	d017      	beq.n	342c <__pi_vfparse+0xdc>
    33fc:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    3400:	d1e7      	bne.n	33d2 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    3402:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    3406:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    340a:	fa1f f983 	uxth.w	r9, r3
    340e:	fa49 f308 	asr.w	r3, r9, r8
    3412:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    3416:	5cf8      	ldrb	r0, [r7, r3]
    3418:	f10d 0c04 	add.w	ip, sp, #4
    341c:	f7ff ff88 	bl	3330 <outc.5724>
					if (i == 0)
    3420:	f1b8 0f00 	cmp.w	r8, #0
    3424:	d0bd      	beq.n	33a2 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    3426:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    342a:	e7f0      	b.n	340e <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    342c:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    3430:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    3434:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    3438:	d10a      	bne.n	3450 <__pi_vfparse+0x100>
    343a:	041b      	lsls	r3, r3, #16
    343c:	d508      	bpl.n	3450 <__pi_vfparse+0x100>
					outc ('-');
    343e:	202d      	movs	r0, #45	; 0x2d
    3440:	f10d 0c04 	add.w	ip, sp, #4
    3444:	f7ff ff74 	bl	3330 <outc.5724>
					val = (~val) + 1;
    3448:	f1c9 0900 	rsb	r9, r9, #0
    344c:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    3450:	2305      	movs	r3, #5
				enci (10000);
    3452:	f242 7810 	movw	r8, #10000	; 0x2710
    3456:	fbb9 f0f8 	udiv	r0, r9, r8
    345a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    345e:	d103      	bne.n	3468 <__pi_vfparse+0x118>
    3460:	3b01      	subs	r3, #1
    3462:	d117      	bne.n	3494 <__pi_vfparse+0x144>
    3464:	f04f 0801 	mov.w	r8, #1
    3468:	fa1f fa80 	uxth.w	sl, r0
    346c:	f10d 0c04 	add.w	ip, sp, #4
    3470:	3030      	adds	r0, #48	; 0x30
    3472:	f7ff ff5d 	bl	3330 <outc.5724>
    3476:	fbb8 f3f6 	udiv	r3, r8, r6
    347a:	fb08 991a 	mls	r9, r8, sl, r9
    347e:	f1b8 0f09 	cmp.w	r8, #9
    3482:	fa1f f989 	uxth.w	r9, r9
    3486:	b29b      	uxth	r3, r3
    3488:	d98b      	bls.n	33a2 <__pi_vfparse+0x52>
    348a:	fbb9 f0f3 	udiv	r0, r9, r3
    348e:	4698      	mov	r8, r3
    3490:	b2c0      	uxtb	r0, r0
    3492:	e7e9      	b.n	3468 <__pi_vfparse+0x118>
    3494:	fbb8 f8f6 	udiv	r8, r8, r6
    3498:	e7dd      	b.n	3456 <__pi_vfparse+0x106>
				c = *fm;
    349a:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    349c:	2b64      	cmp	r3, #100	; 0x64
    349e:	d001      	beq.n	34a4 <__pi_vfparse+0x154>
    34a0:	2b75      	cmp	r3, #117	; 0x75
    34a2:	d132      	bne.n	350a <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    34a4:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    34a6:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    34aa:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    34ae:	d109      	bne.n	34c4 <__pi_vfparse+0x174>
    34b0:	f1ba 0f00 	cmp.w	sl, #0
    34b4:	da06      	bge.n	34c4 <__pi_vfparse+0x174>
						outc ('-');
    34b6:	202d      	movs	r0, #45	; 0x2d
    34b8:	f10d 0c04 	add.w	ip, sp, #4
    34bc:	f7ff ff38 	bl	3330 <outc.5724>
						val = (~val) + 1;
    34c0:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    34c4:	230a      	movs	r3, #10
					enci (1000000000UL);
    34c6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 357c <__pi_vfparse+0x22c>
    34ca:	fbba f9f8 	udiv	r9, sl, r8
    34ce:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    34d2:	d103      	bne.n	34dc <__pi_vfparse+0x18c>
    34d4:	3b01      	subs	r3, #1
    34d6:	d115      	bne.n	3504 <__pi_vfparse+0x1b4>
    34d8:	f04f 0801 	mov.w	r8, #1
    34dc:	f10d 0c04 	add.w	ip, sp, #4
    34e0:	f109 0030 	add.w	r0, r9, #48	; 0x30
    34e4:	f7ff ff24 	bl	3330 <outc.5724>
    34e8:	f1b8 0f09 	cmp.w	r8, #9
    34ec:	fbb8 f3f6 	udiv	r3, r8, r6
    34f0:	fb08 aa19 	mls	sl, r8, r9, sl
    34f4:	f67f af55 	bls.w	33a2 <__pi_vfparse+0x52>
    34f8:	fbba f9f3 	udiv	r9, sl, r3
    34fc:	4698      	mov	r8, r3
    34fe:	fa5f f989 	uxtb.w	r9, r9
    3502:	e7eb      	b.n	34dc <__pi_vfparse+0x18c>
    3504:	fbb8 f8f6 	udiv	r8, r8, r6
    3508:	e7df      	b.n	34ca <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    350a:	2b78      	cmp	r3, #120	; 0x78
    350c:	d114      	bne.n	3538 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    350e:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    3512:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    3516:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    3518:	fa29 f308 	lsr.w	r3, r9, r8
    351c:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    3520:	5cf8      	ldrb	r0, [r7, r3]
    3522:	f10d 0c04 	add.w	ip, sp, #4
    3526:	f7ff ff03 	bl	3330 <outc.5724>
						if (i == 0)
    352a:	f1b8 0f00 	cmp.w	r8, #0
    352e:	f43f af38 	beq.w	33a2 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    3532:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    3536:	e7ef      	b.n	3518 <__pi_vfparse+0x1c8>
					outc ('%');
    3538:	4648      	mov	r0, r9
    353a:	f10d 0c04 	add.w	ip, sp, #4
    353e:	f7ff fef7 	bl	3330 <outc.5724>
					outc ('l');
    3542:	4640      	mov	r0, r8
    3544:	f10d 0c04 	add.w	ip, sp, #4
    3548:	e729      	b.n	339e <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    354a:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    354e:	f10d 0c04 	add.w	ip, sp, #4
    3552:	b280      	uxth	r0, r0
    3554:	e723      	b.n	339e <__pi_vfparse+0x4e>
				while (*st != '\0') {
    3556:	f854 3b04 	ldr.w	r3, [r4], #4
    355a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    355e:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    3562:	2800      	cmp	r0, #0
    3564:	f43f af1d 	beq.w	33a2 <__pi_vfparse+0x52>
					outc (*st);
    3568:	f10d 0c04 	add.w	ip, sp, #4
    356c:	f7ff fee0 	bl	3330 <outc.5724>
					st++;
    3570:	e7f5      	b.n	355e <__pi_vfparse+0x20e>
		c = *fm++;
    3572:	1c55      	adds	r5, r2, #1
    3574:	e709      	b.n	338a <__pi_vfparse+0x3a>
    3576:	bf00      	nop
    3578:	00005211 	andeq	r5, r0, r1, lsl r2
    357c:	3b9aca00 	blcc	fe6b5d84 <_estack+0xde6b0d84>

00003580 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    3580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3584:	460e      	mov	r6, r1
    3586:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    3588:	4604      	mov	r4, r0
    358a:	b140      	cbz	r0, 359e <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    358c:	4613      	mov	r3, r2
    358e:	460a      	mov	r2, r1
    3590:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3594:	f7ff fedc 	bl	3350 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    3598:	4620      	mov	r0, r4
    359a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    359e:	4608      	mov	r0, r1
    35a0:	f7fe fa5a 	bl	1a58 <__pi_strlen>
    35a4:	f100 0511 	add.w	r5, r0, #17
    35a8:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    35aa:	4628      	mov	r0, r5
    35ac:	f7fe fb56 	bl	1c5c <__pi_malloc>
    35b0:	4604      	mov	r4, r0
    35b2:	2800      	cmp	r0, #0
    35b4:	d0f0      	beq.n	3598 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    35b6:	463b      	mov	r3, r7
    35b8:	4632      	mov	r2, r6
    35ba:	4629      	mov	r1, r5
    35bc:	f7ff fec8 	bl	3350 <__pi_vfparse>
    35c0:	4285      	cmp	r5, r0
    35c2:	4680      	mov	r8, r0
    35c4:	d2e8      	bcs.n	3598 <vform+0x18>
		ufree (res);
    35c6:	4620      	mov	r0, r4
    35c8:	f7fe fafc 	bl	1bc4 <__pi_free>
		goto Again;
    35cc:	4645      	mov	r5, r8
    35ce:	e7ec      	b.n	35aa <vform+0x2a>

000035d0 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    35d0:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    35d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    35d6:	2800      	cmp	r0, #0
    35d8:	f000 81b5 	beq.w	3946 <vscan+0x376>
    35dc:	2900      	cmp	r1, #0
    35de:	f000 81b4 	beq.w	394a <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    35e2:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    35e4:	270a      	movs	r7, #10
    35e6:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    35e8:	f8df c370 	ldr.w	ip, [pc, #880]	; 395c <vscan+0x38c>
    35ec:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    35ee:	f811 0b01 	ldrb.w	r0, [r1], #1
    35f2:	b170      	cbz	r0, 3612 <vscan+0x42>
		if (*fmt++ != '%')
    35f4:	2825      	cmp	r0, #37	; 0x25
    35f6:	d1f9      	bne.n	35ec <vscan+0x1c>
		switch (*fmt++) {
    35f8:	7870      	ldrb	r0, [r6, #1]
    35fa:	1cb1      	adds	r1, r6, #2
    35fc:	286c      	cmp	r0, #108	; 0x6c
    35fe:	f000 80e1 	beq.w	37c4 <vscan+0x1f4>
    3602:	d809      	bhi.n	3618 <vscan+0x48>
    3604:	2863      	cmp	r0, #99	; 0x63
    3606:	f000 8184 	beq.w	3912 <vscan+0x342>
    360a:	2864      	cmp	r0, #100	; 0x64
    360c:	d043      	beq.n	3696 <vscan+0xc6>
    360e:	2800      	cmp	r0, #0
    3610:	d1ec      	bne.n	35ec <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    3612:	4620      	mov	r0, r4
    3614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    3618:	2875      	cmp	r0, #117	; 0x75
    361a:	d074      	beq.n	3706 <vscan+0x136>
    361c:	2878      	cmp	r0, #120	; 0x78
    361e:	f000 8098 	beq.w	3752 <vscan+0x182>
    3622:	2873      	cmp	r0, #115	; 0x73
    3624:	d1e2      	bne.n	35ec <vscan+0x1c>
			while (isspace (*buf)) buf++;
    3626:	7818      	ldrb	r0, [r3, #0]
    3628:	461e      	mov	r6, r3
    362a:	f1a0 0e09 	sub.w	lr, r0, #9
    362e:	fa5f fe8e 	uxtb.w	lr, lr
    3632:	f1be 0f17 	cmp.w	lr, #23
    3636:	4698      	mov	r8, r3
    3638:	f103 0301 	add.w	r3, r3, #1
    363c:	f240 8173 	bls.w	3926 <vscan+0x356>
			if (*buf == '\0')
    3640:	2800      	cmp	r0, #0
    3642:	d0e6      	beq.n	3612 <vscan+0x42>
			if (*buf != ',') {
    3644:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    3646:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    364a:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    364e:	d00e      	beq.n	366e <vscan+0x9e>
    3650:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    3652:	f818 3b01 	ldrb.w	r3, [r8], #1
    3656:	f1a3 0009 	sub.w	r0, r3, #9
    365a:	2801      	cmp	r0, #1
    365c:	d907      	bls.n	366e <vscan+0x9e>
    365e:	2b0d      	cmp	r3, #13
    3660:	d005      	beq.n	366e <vscan+0x9e>
    3662:	2b2c      	cmp	r3, #44	; 0x2c
    3664:	d003      	beq.n	366e <vscan+0x9e>
    3666:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    366a:	f040 8163 	bne.w	3934 <vscan+0x364>
			while (isspace (*buf)) buf++;
    366e:	f896 8000 	ldrb.w	r8, [r6]
    3672:	4633      	mov	r3, r6
    3674:	f1a8 0009 	sub.w	r0, r8, #9
    3678:	b2c0      	uxtb	r0, r0
    367a:	2817      	cmp	r0, #23
    367c:	f106 0601 	add.w	r6, r6, #1
    3680:	f240 815b 	bls.w	393a <vscan+0x36a>
			if (*buf == ',') buf++;
    3684:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    3688:	bf08      	it	eq
    368a:	4633      	moveq	r3, r6
			*sap = '\0';
    368c:	f88e 5000 	strb.w	r5, [lr]
			break;
    3690:	e7ac      	b.n	35ec <vscan+0x1c>
		    case 'd': scani (word); break;
    3692:	2e00      	cmp	r6, #0
    3694:	d0bd      	beq.n	3612 <vscan+0x42>
    3696:	469e      	mov	lr, r3
    3698:	f813 6b01 	ldrb.w	r6, [r3], #1
    369c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    36a0:	2809      	cmp	r0, #9
    36a2:	d923      	bls.n	36ec <vscan+0x11c>
    36a4:	2e2d      	cmp	r6, #45	; 0x2d
    36a6:	d001      	beq.n	36ac <vscan+0xdc>
    36a8:	2e2b      	cmp	r6, #43	; 0x2b
    36aa:	d1f2      	bne.n	3692 <vscan+0xc2>
    36ac:	7818      	ldrb	r0, [r3, #0]
    36ae:	469e      	mov	lr, r3
    36b0:	3830      	subs	r0, #48	; 0x30
    36b2:	2809      	cmp	r0, #9
    36b4:	d8ef      	bhi.n	3696 <vscan+0xc6>
    36b6:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    36ba:	f1d9 0800 	rsbs	r8, r9, #0
    36be:	eb48 0809 	adc.w	r8, r8, r9
    36c2:	f852 6b04 	ldr.w	r6, [r2], #4
    36c6:	3401      	adds	r4, #1
    36c8:	8035      	strh	r5, [r6, #0]
    36ca:	f89e 0000 	ldrb.w	r0, [lr]
    36ce:	4673      	mov	r3, lr
    36d0:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    36d4:	f1b9 0f09 	cmp.w	r9, #9
    36d8:	f10e 0e01 	add.w	lr, lr, #1
    36dc:	d909      	bls.n	36f2 <vscan+0x122>
    36de:	f1b8 0f00 	cmp.w	r8, #0
    36e2:	d183      	bne.n	35ec <vscan+0x1c>
    36e4:	8830      	ldrh	r0, [r6, #0]
    36e6:	4240      	negs	r0, r0
    36e8:	8030      	strh	r0, [r6, #0]
    36ea:	e77f      	b.n	35ec <vscan+0x1c>
    36ec:	f04f 0800 	mov.w	r8, #0
    36f0:	e7e7      	b.n	36c2 <vscan+0xf2>
    36f2:	8833      	ldrh	r3, [r6, #0]
    36f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    36f8:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    36fc:	3030      	adds	r0, #48	; 0x30
    36fe:	8030      	strh	r0, [r6, #0]
    3700:	e7e3      	b.n	36ca <vscan+0xfa>
		    case 'u': scanu (word); break;
    3702:	2800      	cmp	r0, #0
    3704:	d085      	beq.n	3612 <vscan+0x42>
    3706:	7818      	ldrb	r0, [r3, #0]
    3708:	461e      	mov	r6, r3
    370a:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    370e:	f1be 0f09 	cmp.w	lr, #9
    3712:	f103 0301 	add.w	r3, r3, #1
    3716:	d8f4      	bhi.n	3702 <vscan+0x132>
    3718:	f852 eb04 	ldr.w	lr, [r2], #4
    371c:	3401      	adds	r4, #1
    371e:	f8ae 5000 	strh.w	r5, [lr]
    3722:	7830      	ldrb	r0, [r6, #0]
    3724:	4633      	mov	r3, r6
    3726:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    372a:	f1b8 0f09 	cmp.w	r8, #9
    372e:	f106 0601 	add.w	r6, r6, #1
    3732:	f63f af5b 	bhi.w	35ec <vscan+0x1c>
    3736:	f8be 3000 	ldrh.w	r3, [lr]
    373a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    373e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    3742:	3830      	subs	r0, #48	; 0x30
    3744:	f8ae 0000 	strh.w	r0, [lr]
    3748:	e7eb      	b.n	3722 <vscan+0x152>
		    case 'x': scanx (word); break;
    374a:	f1be 0f00 	cmp.w	lr, #0
    374e:	f43f af60 	beq.w	3612 <vscan+0x42>
    3752:	f893 e000 	ldrb.w	lr, [r3]
    3756:	461e      	mov	r6, r3
    3758:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    375c:	2809      	cmp	r0, #9
    375e:	f103 0301 	add.w	r3, r3, #1
    3762:	d904      	bls.n	376e <vscan+0x19e>
    3764:	f02e 0020 	bic.w	r0, lr, #32
    3768:	3841      	subs	r0, #65	; 0x41
    376a:	2805      	cmp	r0, #5
    376c:	d8ed      	bhi.n	374a <vscan+0x17a>
    376e:	f852 eb04 	ldr.w	lr, [r2], #4
    3772:	3401      	adds	r4, #1
    3774:	f8ae 5000 	strh.w	r5, [lr]
    3778:	f106 0805 	add.w	r8, r6, #5
    377c:	f896 9000 	ldrb.w	r9, [r6]
    3780:	4633      	mov	r3, r6
    3782:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    3786:	b2c0      	uxtb	r0, r0
    3788:	2809      	cmp	r0, #9
    378a:	f106 0601 	add.w	r6, r6, #1
    378e:	f240 80de 	bls.w	394e <vscan+0x37e>
    3792:	f029 0020 	bic.w	r0, r9, #32
    3796:	3841      	subs	r0, #65	; 0x41
    3798:	2805      	cmp	r0, #5
    379a:	f63f af27 	bhi.w	35ec <vscan+0x1c>
    379e:	4546      	cmp	r6, r8
    37a0:	f43f af24 	beq.w	35ec <vscan+0x1c>
    37a4:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    37a8:	2b05      	cmp	r3, #5
    37aa:	bf94      	ite	ls
    37ac:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    37b0:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    37b4:	b2c0      	uxtb	r0, r0
    37b6:	f8be 3000 	ldrh.w	r3, [lr]
    37ba:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    37be:	f8ae 0000 	strh.w	r0, [lr]
    37c2:	e7db      	b.n	377c <vscan+0x1ac>
			switch (*fmt++) {
    37c4:	78b0      	ldrb	r0, [r6, #2]
    37c6:	1cf1      	adds	r1, r6, #3
    37c8:	2875      	cmp	r0, #117	; 0x75
    37ca:	d07d      	beq.n	38c8 <vscan+0x2f8>
    37cc:	d831      	bhi.n	3832 <vscan+0x262>
    37ce:	2800      	cmp	r0, #0
    37d0:	f43f af1f 	beq.w	3612 <vscan+0x42>
    37d4:	2864      	cmp	r0, #100	; 0x64
    37d6:	f47f af09 	bne.w	35ec <vscan+0x1c>
    37da:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    37dc:	f813 6b01 	ldrb.w	r6, [r3], #1
    37e0:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    37e4:	2809      	cmp	r0, #9
    37e6:	d962      	bls.n	38ae <vscan+0x2de>
    37e8:	2e2d      	cmp	r6, #45	; 0x2d
    37ea:	d001      	beq.n	37f0 <vscan+0x220>
    37ec:	2e2b      	cmp	r6, #43	; 0x2b
    37ee:	d15b      	bne.n	38a8 <vscan+0x2d8>
    37f0:	7818      	ldrb	r0, [r3, #0]
    37f2:	4698      	mov	r8, r3
    37f4:	3830      	subs	r0, #48	; 0x30
    37f6:	2809      	cmp	r0, #9
    37f8:	d8ef      	bhi.n	37da <vscan+0x20a>
    37fa:	3e2d      	subs	r6, #45	; 0x2d
    37fc:	4270      	negs	r0, r6
    37fe:	4170      	adcs	r0, r6
    3800:	f852 eb04 	ldr.w	lr, [r2], #4
    3804:	3401      	adds	r4, #1
    3806:	f8ce 5000 	str.w	r5, [lr]
    380a:	f898 6000 	ldrb.w	r6, [r8]
    380e:	4643      	mov	r3, r8
    3810:	3e30      	subs	r6, #48	; 0x30
    3812:	fa5f f986 	uxtb.w	r9, r6
    3816:	f1b9 0f09 	cmp.w	r9, #9
    381a:	f108 0801 	add.w	r8, r8, #1
    381e:	d948      	bls.n	38b2 <vscan+0x2e2>
    3820:	2800      	cmp	r0, #0
    3822:	f47f aee3 	bne.w	35ec <vscan+0x1c>
    3826:	f8de 0000 	ldr.w	r0, [lr]
    382a:	4240      	negs	r0, r0
    382c:	f8ce 0000 	str.w	r0, [lr]
    3830:	e6dc      	b.n	35ec <vscan+0x1c>
    3832:	2878      	cmp	r0, #120	; 0x78
    3834:	f47f aeda 	bne.w	35ec <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3838:	f893 e000 	ldrb.w	lr, [r3]
    383c:	461e      	mov	r6, r3
    383e:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    3842:	2809      	cmp	r0, #9
    3844:	f103 0301 	add.w	r3, r3, #1
    3848:	d904      	bls.n	3854 <vscan+0x284>
    384a:	f02e 0020 	bic.w	r0, lr, #32
    384e:	3841      	subs	r0, #65	; 0x41
    3850:	2805      	cmp	r0, #5
    3852:	d85a      	bhi.n	390a <vscan+0x33a>
    3854:	f852 eb04 	ldr.w	lr, [r2], #4
    3858:	3401      	adds	r4, #1
    385a:	f8ce 5000 	str.w	r5, [lr]
    385e:	f106 0809 	add.w	r8, r6, #9
    3862:	f896 9000 	ldrb.w	r9, [r6]
    3866:	4633      	mov	r3, r6
    3868:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    386c:	b2c0      	uxtb	r0, r0
    386e:	2809      	cmp	r0, #9
    3870:	f106 0601 	add.w	r6, r6, #1
    3874:	d96f      	bls.n	3956 <vscan+0x386>
    3876:	f029 0020 	bic.w	r0, r9, #32
    387a:	3841      	subs	r0, #65	; 0x41
    387c:	2805      	cmp	r0, #5
    387e:	f63f aeb5 	bhi.w	35ec <vscan+0x1c>
    3882:	4546      	cmp	r6, r8
    3884:	f43f aeb2 	beq.w	35ec <vscan+0x1c>
    3888:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    388c:	2b05      	cmp	r3, #5
    388e:	bf94      	ite	ls
    3890:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    3894:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    3898:	b2c0      	uxtb	r0, r0
    389a:	f8de 3000 	ldr.w	r3, [lr]
    389e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    38a2:	f8ce 0000 	str.w	r0, [lr]
    38a6:	e7dc      	b.n	3862 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    38a8:	2e00      	cmp	r6, #0
    38aa:	d196      	bne.n	37da <vscan+0x20a>
    38ac:	e6b1      	b.n	3612 <vscan+0x42>
    38ae:	2000      	movs	r0, #0
    38b0:	e7a6      	b.n	3800 <vscan+0x230>
    38b2:	f8de 3000 	ldr.w	r3, [lr]
    38b6:	b2b6      	uxth	r6, r6
    38b8:	437b      	muls	r3, r7
    38ba:	1b9e      	subs	r6, r3, r6
    38bc:	f8ce 6000 	str.w	r6, [lr]
    38c0:	e7a3      	b.n	380a <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    38c2:	2800      	cmp	r0, #0
    38c4:	f43f aea5 	beq.w	3612 <vscan+0x42>
    38c8:	7818      	ldrb	r0, [r3, #0]
    38ca:	461e      	mov	r6, r3
    38cc:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    38d0:	f1be 0f09 	cmp.w	lr, #9
    38d4:	f103 0301 	add.w	r3, r3, #1
    38d8:	d8f3      	bhi.n	38c2 <vscan+0x2f2>
    38da:	f852 eb04 	ldr.w	lr, [r2], #4
    38de:	3401      	adds	r4, #1
    38e0:	f8ce 5000 	str.w	r5, [lr]
    38e4:	7830      	ldrb	r0, [r6, #0]
    38e6:	4633      	mov	r3, r6
    38e8:	3830      	subs	r0, #48	; 0x30
    38ea:	fa5f f880 	uxtb.w	r8, r0
    38ee:	f1b8 0f09 	cmp.w	r8, #9
    38f2:	f106 0601 	add.w	r6, r6, #1
    38f6:	f63f ae79 	bhi.w	35ec <vscan+0x1c>
    38fa:	f8de 3000 	ldr.w	r3, [lr]
    38fe:	b280      	uxth	r0, r0
    3900:	fb07 0003 	mla	r0, r7, r3, r0
    3904:	f8ce 0000 	str.w	r0, [lr]
    3908:	e7ec      	b.n	38e4 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    390a:	f1be 0f00 	cmp.w	lr, #0
    390e:	d193      	bne.n	3838 <vscan+0x268>
    3910:	e67f      	b.n	3612 <vscan+0x42>
			if ((c = *buf++) == '\0')
    3912:	f813 0b01 	ldrb.w	r0, [r3], #1
    3916:	2800      	cmp	r0, #0
    3918:	f43f ae7b 	beq.w	3612 <vscan+0x42>
			sap = va_arg (ap, char*);
    391c:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    3920:	3401      	adds	r4, #1
			*sap = c;
    3922:	7030      	strb	r0, [r6, #0]
			break;
    3924:	e662      	b.n	35ec <vscan+0x1c>
			while (isspace (*buf)) buf++;
    3926:	fa2c fe0e 	lsr.w	lr, ip, lr
    392a:	f01e 0f01 	tst.w	lr, #1
    392e:	f47f ae7a 	bne.w	3626 <vscan+0x56>
    3932:	e687      	b.n	3644 <vscan+0x74>
						*sap++ = *buf++;
    3934:	f80e 3b01 	strb.w	r3, [lr], #1
    3938:	e68a      	b.n	3650 <vscan+0x80>
			while (isspace (*buf)) buf++;
    393a:	fa2c f000 	lsr.w	r0, ip, r0
    393e:	07c0      	lsls	r0, r0, #31
    3940:	f53f ae95 	bmi.w	366e <vscan+0x9e>
    3944:	e6a2      	b.n	368c <vscan+0xbc>
		return 0;
    3946:	4604      	mov	r4, r0
    3948:	e663      	b.n	3612 <vscan+0x42>
    394a:	460c      	mov	r4, r1
    394c:	e661      	b.n	3612 <vscan+0x42>
		    case 'x': scanx (word); break;
    394e:	4546      	cmp	r6, r8
    3950:	f47f af31 	bne.w	37b6 <vscan+0x1e6>
    3954:	e64a      	b.n	35ec <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3956:	4546      	cmp	r6, r8
    3958:	d19f      	bne.n	389a <vscan+0x2ca>
    395a:	e647      	b.n	35ec <vscan+0x1c>
    395c:	00800013 	addeq	r0, r0, r3, lsl r0

00003960 <SafeHapiVoid>:
    3960:	b570      	push	{r4, r5, r6, lr}
    3962:	4606      	mov	r6, r0
    3964:	f000 f844 	bl	39f0 <NOROM_CPUcpsid>
    3968:	4605      	mov	r5, r0
    396a:	4c06      	ldr	r4, [pc, #24]	; (3984 <SafeHapiVoid+0x24>)
    396c:	6823      	ldr	r3, [r4, #0]
    396e:	2b00      	cmp	r3, #0
    3970:	d0fb      	beq.n	396a <SafeHapiVoid+0xa>
    3972:	47b0      	blx	r6
    3974:	2301      	movs	r3, #1
    3976:	6023      	str	r3, [r4, #0]
    3978:	b91d      	cbnz	r5, 3982 <SafeHapiVoid+0x22>
    397a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    397e:	f000 b83b 	b.w	39f8 <NOROM_CPUcpsie>
    3982:	bd70      	pop	{r4, r5, r6, pc}
    3984:	400c8000 	andmi	r8, ip, r0

00003988 <NOROM_AONBatMonTemperatureGetDegC>:
    3988:	4b08      	ldr	r3, [pc, #32]	; (39ac <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    398a:	6818      	ldr	r0, [r3, #0]
    398c:	4b08      	ldr	r3, [pc, #32]	; (39b0 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    398e:	7819      	ldrb	r1, [r3, #0]
    3990:	4b08      	ldr	r3, [pc, #32]	; (39b4 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    3992:	681a      	ldr	r2, [r3, #0]
    3994:	f340 0310 	sbfx	r3, r0, #0, #17
    3998:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    399c:	b248      	sxtb	r0, r1
    399e:	4350      	muls	r0, r2
    39a0:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    39a4:	3080      	adds	r0, #128	; 0x80
    39a6:	1200      	asrs	r0, r0, #8
    39a8:	4770      	bx	lr
    39aa:	bf00      	nop
    39ac:	40095030 	andmi	r5, r9, r0, lsr r0
    39b0:	5000130c 	andpl	r1, r0, ip, lsl #6
    39b4:	40095028 	andmi	r5, r9, r8, lsr #32

000039b8 <NOROM_AONRTCCurrentCompareValueGet>:
    39b8:	4a05      	ldr	r2, [pc, #20]	; (39d0 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    39ba:	4906      	ldr	r1, [pc, #24]	; (39d4 <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    39bc:	6813      	ldr	r3, [r2, #0]
    39be:	6808      	ldr	r0, [r1, #0]
    39c0:	6812      	ldr	r2, [r2, #0]
    39c2:	4293      	cmp	r3, r2
    39c4:	d1f8      	bne.n	39b8 <NOROM_AONRTCCurrentCompareValueGet>
    39c6:	041b      	lsls	r3, r3, #16
    39c8:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    39cc:	4770      	bx	lr
    39ce:	bf00      	nop
    39d0:	40092008 	andmi	r2, r9, r8
    39d4:	4009200c 	andmi	r2, r9, ip

000039d8 <NOROM_AONRTCCurrent64BitValueGet>:
    39d8:	4b03      	ldr	r3, [pc, #12]	; (39e8 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    39da:	4904      	ldr	r1, [pc, #16]	; (39ec <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    39dc:	681a      	ldr	r2, [r3, #0]
    39de:	6808      	ldr	r0, [r1, #0]
    39e0:	6819      	ldr	r1, [r3, #0]
    39e2:	4291      	cmp	r1, r2
    39e4:	d1f8      	bne.n	39d8 <NOROM_AONRTCCurrent64BitValueGet>
    39e6:	4770      	bx	lr
    39e8:	40092008 	andmi	r2, r9, r8
    39ec:	4009200c 	andmi	r2, r9, ip

000039f0 <NOROM_CPUcpsid>:
    39f0:	f3ef 8010 	mrs	r0, PRIMASK
    39f4:	b672      	cpsid	i
    39f6:	4770      	bx	lr

000039f8 <NOROM_CPUcpsie>:
    39f8:	f3ef 8010 	mrs	r0, PRIMASK
    39fc:	b662      	cpsie	i
    39fe:	4770      	bx	lr

00003a00 <NOROM_OSCClockSourceSet>:
    3a00:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3a02:	460c      	mov	r4, r1
    3a04:	07c1      	lsls	r1, r0, #31
    3a06:	4605      	mov	r5, r0
    3a08:	d509      	bpl.n	3a1e <NOROM_OSCClockSourceSet+0x1e>
    3a0a:	4b12      	ldr	r3, [pc, #72]	; (3a54 <NOROM_OSCClockSourceSet+0x54>)
    3a0c:	b2a2      	uxth	r2, r4
    3a0e:	681b      	ldr	r3, [r3, #0]
    3a10:	2100      	movs	r1, #0
    3a12:	9200      	str	r2, [sp, #0]
    3a14:	685e      	ldr	r6, [r3, #4]
    3a16:	4810      	ldr	r0, [pc, #64]	; (3a58 <NOROM_OSCClockSourceSet+0x58>)
    3a18:	2201      	movs	r2, #1
    3a1a:	460b      	mov	r3, r1
    3a1c:	47b0      	blx	r6
    3a1e:	07aa      	lsls	r2, r5, #30
    3a20:	d509      	bpl.n	3a36 <NOROM_OSCClockSourceSet+0x36>
    3a22:	4b0c      	ldr	r3, [pc, #48]	; (3a54 <NOROM_OSCClockSourceSet+0x54>)
    3a24:	b2a2      	uxth	r2, r4
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	9200      	str	r2, [sp, #0]
    3a2a:	685e      	ldr	r6, [r3, #4]
    3a2c:	480a      	ldr	r0, [pc, #40]	; (3a58 <NOROM_OSCClockSourceSet+0x58>)
    3a2e:	2100      	movs	r1, #0
    3a30:	2202      	movs	r2, #2
    3a32:	2301      	movs	r3, #1
    3a34:	47b0      	blx	r6
    3a36:	076b      	lsls	r3, r5, #29
    3a38:	d509      	bpl.n	3a4e <NOROM_OSCClockSourceSet+0x4e>
    3a3a:	4b06      	ldr	r3, [pc, #24]	; (3a54 <NOROM_OSCClockSourceSet+0x54>)
    3a3c:	b2a4      	uxth	r4, r4
    3a3e:	681b      	ldr	r3, [r3, #0]
    3a40:	9400      	str	r4, [sp, #0]
    3a42:	685c      	ldr	r4, [r3, #4]
    3a44:	4804      	ldr	r0, [pc, #16]	; (3a58 <NOROM_OSCClockSourceSet+0x58>)
    3a46:	2100      	movs	r1, #0
    3a48:	220c      	movs	r2, #12
    3a4a:	2302      	movs	r3, #2
    3a4c:	47a0      	blx	r4
    3a4e:	b002      	add	sp, #8
    3a50:	bd70      	pop	{r4, r5, r6, pc}
    3a52:	bf00      	nop
    3a54:	100001a4 	andne	r0, r0, r4, lsr #3
    3a58:	400ca000 	andmi	sl, ip, r0

00003a5c <NOROM_OSCClockSourceGet>:
    3a5c:	b510      	push	{r4, lr}
    3a5e:	4b08      	ldr	r3, [pc, #32]	; (3a80 <NOROM_OSCClockSourceGet+0x24>)
    3a60:	2804      	cmp	r0, #4
    3a62:	681b      	ldr	r3, [r3, #0]
    3a64:	f04f 0134 	mov.w	r1, #52	; 0x34
    3a68:	68dc      	ldr	r4, [r3, #12]
    3a6a:	bf07      	ittee	eq
    3a6c:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    3a70:	231d      	moveq	r3, #29
    3a72:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    3a76:	231c      	movne	r3, #28
    3a78:	4802      	ldr	r0, [pc, #8]	; (3a84 <NOROM_OSCClockSourceGet+0x28>)
    3a7a:	47a0      	blx	r4
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	bf00      	nop
    3a80:	100001a4 	andne	r0, r0, r4, lsr #3
    3a84:	400ca000 	andmi	sl, ip, r0

00003a88 <NOROM_OSCHF_TurnOnXosc>:
    3a88:	b508      	push	{r3, lr}
    3a8a:	2003      	movs	r0, #3
    3a8c:	2101      	movs	r1, #1
    3a8e:	f7ff ffb7 	bl	3a00 <NOROM_OSCClockSourceSet>
    3a92:	f7ff ff91 	bl	39b8 <NOROM_AONRTCCurrentCompareValueGet>
    3a96:	4b01      	ldr	r3, [pc, #4]	; (3a9c <NOROM_OSCHF_TurnOnXosc+0x14>)
    3a98:	6098      	str	r0, [r3, #8]
    3a9a:	bd08      	pop	{r3, pc}
    3a9c:	20000610 	andcs	r0, r0, r0, lsl r6

00003aa0 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    3aa0:	b510      	push	{r4, lr}
    3aa2:	2001      	movs	r0, #1
    3aa4:	f7ff ffda 	bl	3a5c <NOROM_OSCClockSourceGet>
    3aa8:	2801      	cmp	r0, #1
    3aaa:	d01c      	beq.n	3ae6 <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3aac:	4b0f      	ldr	r3, [pc, #60]	; (3aec <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    3aae:	4810      	ldr	r0, [pc, #64]	; (3af0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    3ab0:	681b      	ldr	r3, [r3, #0]
    3ab2:	2134      	movs	r1, #52	; 0x34
    3ab4:	68dc      	ldr	r4, [r3, #12]
    3ab6:	2201      	movs	r2, #1
    3ab8:	2300      	movs	r3, #0
    3aba:	47a0      	blx	r4
    3abc:	b1a0      	cbz	r0, 3ae8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    3abe:	4b0d      	ldr	r3, [pc, #52]	; (3af4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    3ac0:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3ac2:	f7ff ff4d 	bl	3960 <SafeHapiVoid>
    3ac6:	f7ff ff77 	bl	39b8 <NOROM_AONRTCCurrentCompareValueGet>
    3aca:	4a0b      	ldr	r2, [pc, #44]	; (3af8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3acc:	6893      	ldr	r3, [r2, #8]
    3ace:	60d0      	str	r0, [r2, #12]
    3ad0:	1ac0      	subs	r0, r0, r3
    3ad2:	4b0a      	ldr	r3, [pc, #40]	; (3afc <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    3ad4:	4358      	muls	r0, r3
    3ad6:	6813      	ldr	r3, [r2, #0]
    3ad8:	0c00      	lsrs	r0, r0, #16
    3ada:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    3ade:	4283      	cmp	r3, r0
    3ae0:	bf94      	ite	ls
    3ae2:	6010      	strls	r0, [r2, #0]
    3ae4:	6013      	strhi	r3, [r2, #0]
    3ae6:	2001      	movs	r0, #1
    3ae8:	bd10      	pop	{r4, pc}
    3aea:	bf00      	nop
    3aec:	100001a4 	andne	r0, r0, r4, lsr #3
    3af0:	400ca000 	andmi	sl, ip, r0
    3af4:	10000048 	andne	r0, r0, r8, asr #32
    3af8:	20000610 	andcs	r0, r0, r0, lsl r6
    3afc:	000f4240 	andeq	r4, pc, r0, asr #4

00003b00 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    3b00:	b510      	push	{r4, lr}
    3b02:	2003      	movs	r0, #3
    3b04:	2100      	movs	r1, #0
    3b06:	f7ff ff7b 	bl	3a00 <NOROM_OSCClockSourceSet>
    3b0a:	2001      	movs	r0, #1
    3b0c:	f7ff ffa6 	bl	3a5c <NOROM_OSCClockSourceGet>
    3b10:	b118      	cbz	r0, 3b1a <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    3b12:	4b06      	ldr	r3, [pc, #24]	; (3b2c <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    3b14:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3b16:	f7ff ff23 	bl	3960 <SafeHapiVoid>
    3b1a:	f7ff ff4d 	bl	39b8 <NOROM_AONRTCCurrentCompareValueGet>
    3b1e:	4c04      	ldr	r4, [pc, #16]	; (3b30 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    3b20:	6060      	str	r0, [r4, #4]
    3b22:	f7ff ff31 	bl	3988 <NOROM_AONBatMonTemperatureGetDegC>
    3b26:	6120      	str	r0, [r4, #16]
    3b28:	bd10      	pop	{r4, pc}
    3b2a:	bf00      	nop
    3b2c:	10000048 	andne	r0, r0, r8, asr #32
    3b30:	20000610 	andcs	r0, r0, r0, lsl r6

00003b34 <NOROM_RFCDoorbellSendTo>:
    3b34:	4a07      	ldr	r2, [pc, #28]	; (3b54 <NOROM_RFCDoorbellSendTo+0x20>)
    3b36:	6811      	ldr	r1, [r2, #0]
    3b38:	2900      	cmp	r1, #0
    3b3a:	d1fb      	bne.n	3b34 <NOROM_RFCDoorbellSendTo>
    3b3c:	4b06      	ldr	r3, [pc, #24]	; (3b58 <NOROM_RFCDoorbellSendTo+0x24>)
    3b3e:	6019      	str	r1, [r3, #0]
    3b40:	6010      	str	r0, [r2, #0]
    3b42:	681a      	ldr	r2, [r3, #0]
    3b44:	2a00      	cmp	r2, #0
    3b46:	d0fc      	beq.n	3b42 <NOROM_RFCDoorbellSendTo+0xe>
    3b48:	4b03      	ldr	r3, [pc, #12]	; (3b58 <NOROM_RFCDoorbellSendTo+0x24>)
    3b4a:	2200      	movs	r2, #0
    3b4c:	601a      	str	r2, [r3, #0]
    3b4e:	f853 0c18 	ldr.w	r0, [r3, #-24]
    3b52:	4770      	bx	lr
    3b54:	40041000 	andmi	r1, r4, r0
    3b58:	4004101c 	andmi	r1, r4, ip, lsl r0

00003b5c <NOROM_RFCSynthPowerDown>:
    3b5c:	4a0e      	ldr	r2, [pc, #56]	; (3b98 <NOROM_RFCSynthPowerDown+0x3c>)
    3b5e:	490f      	ldr	r1, [pc, #60]	; (3b9c <NOROM_RFCSynthPowerDown+0x40>)
    3b60:	6813      	ldr	r3, [r2, #0]
    3b62:	2050      	movs	r0, #80	; 0x50
    3b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3b68:	f023 0302 	bic.w	r3, r3, #2
    3b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3b70:	6013      	str	r3, [r2, #0]
    3b72:	4b0b      	ldr	r3, [pc, #44]	; (3ba0 <NOROM_RFCSynthPowerDown+0x44>)
    3b74:	2203      	movs	r2, #3
    3b76:	601a      	str	r2, [r3, #0]
    3b78:	f241 0330 	movw	r3, #4144	; 0x1030
    3b7c:	4a09      	ldr	r2, [pc, #36]	; (3ba4 <NOROM_RFCSynthPowerDown+0x48>)
    3b7e:	600b      	str	r3, [r1, #0]
    3b80:	2301      	movs	r3, #1
    3b82:	6013      	str	r3, [r2, #0]
    3b84:	6008      	str	r0, [r1, #0]
    3b86:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3b8a:	6013      	str	r3, [r2, #0]
    3b8c:	6008      	str	r0, [r1, #0]
    3b8e:	6013      	str	r3, [r2, #0]
    3b90:	f842 3c0c 	str.w	r3, [r2, #-12]
    3b94:	4770      	bx	lr
    3b96:	bf00      	nop
    3b98:	60040000 	andvs	r0, r4, r0
    3b9c:	40044114 	andmi	r4, r4, r4, lsl r1
    3ba0:	40044108 	andmi	r4, r4, r8, lsl #2
    3ba4:	4004410c 	andmi	r4, r4, ip, lsl #2

00003ba8 <NOROM_RFCRfTrimRead>:
    3ba8:	f640 0202 	movw	r2, #2050	; 0x802
    3bac:	8803      	ldrh	r3, [r0, #0]
    3bae:	4293      	cmp	r3, r2
    3bb0:	d006      	beq.n	3bc0 <NOROM_RFCRfTrimRead+0x18>
    3bb2:	f643 0207 	movw	r2, #14343	; 0x3807
    3bb6:	4293      	cmp	r3, r2
    3bb8:	d104      	bne.n	3bc4 <NOROM_RFCRfTrimRead+0x1c>
    3bba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3bbe:	e002      	b.n	3bc6 <NOROM_RFCRfTrimRead+0x1e>
    3bc0:	7bc3      	ldrb	r3, [r0, #15]
    3bc2:	e000      	b.n	3bc6 <NOROM_RFCRfTrimRead+0x1e>
    3bc4:	2300      	movs	r3, #0
    3bc6:	4a36      	ldr	r2, [pc, #216]	; (3ca0 <NOROM_RFCRfTrimRead+0xf8>)
    3bc8:	2b0a      	cmp	r3, #10
    3bca:	6812      	ldr	r2, [r2, #0]
    3bcc:	600a      	str	r2, [r1, #0]
    3bce:	d031      	beq.n	3c34 <NOROM_RFCRfTrimRead+0x8c>
    3bd0:	dc10      	bgt.n	3bf4 <NOROM_RFCRfTrimRead+0x4c>
    3bd2:	2b05      	cmp	r3, #5
    3bd4:	d021      	beq.n	3c1a <NOROM_RFCRfTrimRead+0x72>
    3bd6:	2b06      	cmp	r3, #6
    3bd8:	d153      	bne.n	3c82 <NOROM_RFCRfTrimRead+0xda>
    3bda:	4b32      	ldr	r3, [pc, #200]	; (3ca4 <NOROM_RFCRfTrimRead+0xfc>)
    3bdc:	681b      	ldr	r3, [r3, #0]
    3bde:	604b      	str	r3, [r1, #4]
    3be0:	4b31      	ldr	r3, [pc, #196]	; (3ca8 <NOROM_RFCRfTrimRead+0x100>)
    3be2:	681b      	ldr	r3, [r3, #0]
    3be4:	608b      	str	r3, [r1, #8]
    3be6:	4b31      	ldr	r3, [pc, #196]	; (3cac <NOROM_RFCRfTrimRead+0x104>)
    3be8:	681b      	ldr	r3, [r3, #0]
    3bea:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bee:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3bf2:	e052      	b.n	3c9a <NOROM_RFCRfTrimRead+0xf2>
    3bf4:	2b0f      	cmp	r3, #15
    3bf6:	d02a      	beq.n	3c4e <NOROM_RFCRfTrimRead+0xa6>
    3bf8:	2b1e      	cmp	r3, #30
    3bfa:	d035      	beq.n	3c68 <NOROM_RFCRfTrimRead+0xc0>
    3bfc:	2b0c      	cmp	r3, #12
    3bfe:	d140      	bne.n	3c82 <NOROM_RFCRfTrimRead+0xda>
    3c00:	4b2b      	ldr	r3, [pc, #172]	; (3cb0 <NOROM_RFCRfTrimRead+0x108>)
    3c02:	681b      	ldr	r3, [r3, #0]
    3c04:	604b      	str	r3, [r1, #4]
    3c06:	4b2b      	ldr	r3, [pc, #172]	; (3cb4 <NOROM_RFCRfTrimRead+0x10c>)
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	608b      	str	r3, [r1, #8]
    3c0c:	4b2a      	ldr	r3, [pc, #168]	; (3cb8 <NOROM_RFCRfTrimRead+0x110>)
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    3c18:	e03f      	b.n	3c9a <NOROM_RFCRfTrimRead+0xf2>
    3c1a:	4b28      	ldr	r3, [pc, #160]	; (3cbc <NOROM_RFCRfTrimRead+0x114>)
    3c1c:	681b      	ldr	r3, [r3, #0]
    3c1e:	604b      	str	r3, [r1, #4]
    3c20:	4b27      	ldr	r3, [pc, #156]	; (3cc0 <NOROM_RFCRfTrimRead+0x118>)
    3c22:	681b      	ldr	r3, [r3, #0]
    3c24:	608b      	str	r3, [r1, #8]
    3c26:	4b27      	ldr	r3, [pc, #156]	; (3cc4 <NOROM_RFCRfTrimRead+0x11c>)
    3c28:	681b      	ldr	r3, [r3, #0]
    3c2a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c2e:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3c32:	e032      	b.n	3c9a <NOROM_RFCRfTrimRead+0xf2>
    3c34:	4b24      	ldr	r3, [pc, #144]	; (3cc8 <NOROM_RFCRfTrimRead+0x120>)
    3c36:	681b      	ldr	r3, [r3, #0]
    3c38:	604b      	str	r3, [r1, #4]
    3c3a:	4b24      	ldr	r3, [pc, #144]	; (3ccc <NOROM_RFCRfTrimRead+0x124>)
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	608b      	str	r3, [r1, #8]
    3c40:	4b23      	ldr	r3, [pc, #140]	; (3cd0 <NOROM_RFCRfTrimRead+0x128>)
    3c42:	681b      	ldr	r3, [r3, #0]
    3c44:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c48:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3c4c:	e025      	b.n	3c9a <NOROM_RFCRfTrimRead+0xf2>
    3c4e:	4b21      	ldr	r3, [pc, #132]	; (3cd4 <NOROM_RFCRfTrimRead+0x12c>)
    3c50:	681b      	ldr	r3, [r3, #0]
    3c52:	604b      	str	r3, [r1, #4]
    3c54:	4b20      	ldr	r3, [pc, #128]	; (3cd8 <NOROM_RFCRfTrimRead+0x130>)
    3c56:	681b      	ldr	r3, [r3, #0]
    3c58:	608b      	str	r3, [r1, #8]
    3c5a:	4b20      	ldr	r3, [pc, #128]	; (3cdc <NOROM_RFCRfTrimRead+0x134>)
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c62:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3c66:	e018      	b.n	3c9a <NOROM_RFCRfTrimRead+0xf2>
    3c68:	4b1d      	ldr	r3, [pc, #116]	; (3ce0 <NOROM_RFCRfTrimRead+0x138>)
    3c6a:	681b      	ldr	r3, [r3, #0]
    3c6c:	604b      	str	r3, [r1, #4]
    3c6e:	4b1d      	ldr	r3, [pc, #116]	; (3ce4 <NOROM_RFCRfTrimRead+0x13c>)
    3c70:	681b      	ldr	r3, [r3, #0]
    3c72:	608b      	str	r3, [r1, #8]
    3c74:	4b1c      	ldr	r3, [pc, #112]	; (3ce8 <NOROM_RFCRfTrimRead+0x140>)
    3c76:	681b      	ldr	r3, [r3, #0]
    3c78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3c80:	e00b      	b.n	3c9a <NOROM_RFCRfTrimRead+0xf2>
    3c82:	4b1a      	ldr	r3, [pc, #104]	; (3cec <NOROM_RFCRfTrimRead+0x144>)
    3c84:	681b      	ldr	r3, [r3, #0]
    3c86:	604b      	str	r3, [r1, #4]
    3c88:	4b19      	ldr	r3, [pc, #100]	; (3cf0 <NOROM_RFCRfTrimRead+0x148>)
    3c8a:	681b      	ldr	r3, [r3, #0]
    3c8c:	608b      	str	r3, [r1, #8]
    3c8e:	4b19      	ldr	r3, [pc, #100]	; (3cf4 <NOROM_RFCRfTrimRead+0x14c>)
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c9a:	60cb      	str	r3, [r1, #12]
    3c9c:	4770      	bx	lr
    3c9e:	bf00      	nop
    3ca0:	5000134c 	andpl	r1, r0, ip, asr #6
    3ca4:	500010c8 	andpl	r1, r0, r8, asr #1
    3ca8:	500010e0 	andpl	r1, r0, r0, ror #1
    3cac:	500010f8 	strdpl	r1, [r0], -r8
    3cb0:	500010d0 	ldrdpl	r1, [r0], -r0
    3cb4:	500010e8 	andpl	r1, r0, r8, ror #1
    3cb8:	50001100 	andpl	r1, r0, r0, lsl #2
    3cbc:	500010c4 	andpl	r1, r0, r4, asr #1
    3cc0:	500010dc 	ldrdpl	r1, [r0], -ip
    3cc4:	500010f4 	strdpl	r1, [r0], -r4
    3cc8:	500010cc 	andpl	r1, r0, ip, asr #1
    3ccc:	500010e4 	andpl	r1, r0, r4, ror #1
    3cd0:	500010fc 	strdpl	r1, [r0], -ip
    3cd4:	500010d4 	ldrdpl	r1, [r0], -r4
    3cd8:	500010ec 	andpl	r1, r0, ip, ror #1
    3cdc:	50001104 	andpl	r1, r0, r4, lsl #2
    3ce0:	500010d8 	ldrdpl	r1, [r0], -r8
    3ce4:	500010f0 	strdpl	r1, [r0], -r0
    3ce8:	50001108 	andpl	r1, r0, r8, lsl #2
    3cec:	50001354 	andpl	r1, r0, r4, asr r3
    3cf0:	50001358 	andpl	r1, r0, r8, asr r3
    3cf4:	50001380 	andpl	r1, r0, r0, lsl #7

00003cf8 <NOROM_RFCRTrim>:
    3cf8:	f643 0206 	movw	r2, #14342	; 0x3806
    3cfc:	b570      	push	{r4, r5, r6, lr}
    3cfe:	8803      	ldrh	r3, [r0, #0]
    3d00:	4293      	cmp	r3, r2
    3d02:	d00a      	beq.n	3d1a <NOROM_RFCRTrim+0x22>
    3d04:	f643 0207 	movw	r2, #14343	; 0x3807
    3d08:	4293      	cmp	r3, r2
    3d0a:	d009      	beq.n	3d20 <NOROM_RFCRTrim+0x28>
    3d0c:	f640 0202 	movw	r2, #2050	; 0x802
    3d10:	4293      	cmp	r3, r2
    3d12:	d16b      	bne.n	3dec <NOROM_RFCRTrim+0xf4>
    3d14:	7bc1      	ldrb	r1, [r0, #15]
    3d16:	6943      	ldr	r3, [r0, #20]
    3d18:	e005      	b.n	3d26 <NOROM_RFCRTrim+0x2e>
    3d1a:	69c3      	ldr	r3, [r0, #28]
    3d1c:	2102      	movs	r1, #2
    3d1e:	e002      	b.n	3d26 <NOROM_RFCRTrim+0x2e>
    3d20:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    3d24:	69c3      	ldr	r3, [r0, #28]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d060      	beq.n	3dec <NOROM_RFCRTrim+0xf4>
    3d2a:	f103 0414 	add.w	r4, r3, #20
    3d2e:	f244 0538 	movw	r5, #16440	; 0x4038
    3d32:	681a      	ldr	r2, [r3, #0]
    3d34:	4618      	mov	r0, r3
    3d36:	b296      	uxth	r6, r2
    3d38:	42ae      	cmp	r6, r5
    3d3a:	f103 0304 	add.w	r3, r3, #4
    3d3e:	d103      	bne.n	3d48 <NOROM_RFCRTrim+0x50>
    3d40:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3d44:	b91c      	cbnz	r4, 3d4e <NOROM_RFCRTrim+0x56>
    3d46:	bd70      	pop	{r4, r5, r6, pc}
    3d48:	42a3      	cmp	r3, r4
    3d4a:	d1f0      	bne.n	3d2e <NOROM_RFCRTrim+0x36>
    3d4c:	bd70      	pop	{r4, r5, r6, pc}
    3d4e:	290a      	cmp	r1, #10
    3d50:	d01d      	beq.n	3d8e <NOROM_RFCRTrim+0x96>
    3d52:	dc06      	bgt.n	3d62 <NOROM_RFCRTrim+0x6a>
    3d54:	2905      	cmp	r1, #5
    3d56:	d013      	beq.n	3d80 <NOROM_RFCRTrim+0x88>
    3d58:	2906      	cmp	r1, #6
    3d5a:	d016      	beq.n	3d8a <NOROM_RFCRTrim+0x92>
    3d5c:	2902      	cmp	r1, #2
    3d5e:	d11f      	bne.n	3da0 <NOROM_RFCRTrim+0xa8>
    3d60:	e007      	b.n	3d72 <NOROM_RFCRTrim+0x7a>
    3d62:	290f      	cmp	r1, #15
    3d64:	d015      	beq.n	3d92 <NOROM_RFCRTrim+0x9a>
    3d66:	291e      	cmp	r1, #30
    3d68:	d015      	beq.n	3d96 <NOROM_RFCRTrim+0x9e>
    3d6a:	290c      	cmp	r1, #12
    3d6c:	d118      	bne.n	3da0 <NOROM_RFCRTrim+0xa8>
    3d6e:	4b20      	ldr	r3, [pc, #128]	; (3df0 <NOROM_RFCRTrim+0xf8>)
    3d70:	e012      	b.n	3d98 <NOROM_RFCRTrim+0xa0>
    3d72:	4b20      	ldr	r3, [pc, #128]	; (3df4 <NOROM_RFCRTrim+0xfc>)
    3d74:	681b      	ldr	r3, [r3, #0]
    3d76:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3d7a:	2b0f      	cmp	r3, #15
    3d7c:	d12a      	bne.n	3dd4 <NOROM_RFCRTrim+0xdc>
    3d7e:	e023      	b.n	3dc8 <NOROM_RFCRTrim+0xd0>
    3d80:	4b1d      	ldr	r3, [pc, #116]	; (3df8 <NOROM_RFCRTrim+0x100>)
    3d82:	681b      	ldr	r3, [r3, #0]
    3d84:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3d88:	e02c      	b.n	3de4 <NOROM_RFCRTrim+0xec>
    3d8a:	4b1c      	ldr	r3, [pc, #112]	; (3dfc <NOROM_RFCRTrim+0x104>)
    3d8c:	e004      	b.n	3d98 <NOROM_RFCRTrim+0xa0>
    3d8e:	4b1c      	ldr	r3, [pc, #112]	; (3e00 <NOROM_RFCRTrim+0x108>)
    3d90:	e002      	b.n	3d98 <NOROM_RFCRTrim+0xa0>
    3d92:	4b1c      	ldr	r3, [pc, #112]	; (3e04 <NOROM_RFCRTrim+0x10c>)
    3d94:	e000      	b.n	3d98 <NOROM_RFCRTrim+0xa0>
    3d96:	4b1c      	ldr	r3, [pc, #112]	; (3e08 <NOROM_RFCRTrim+0x110>)
    3d98:	681b      	ldr	r3, [r3, #0]
    3d9a:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3d9e:	e021      	b.n	3de4 <NOROM_RFCRTrim+0xec>
    3da0:	4b14      	ldr	r3, [pc, #80]	; (3df4 <NOROM_RFCRTrim+0xfc>)
    3da2:	681b      	ldr	r3, [r3, #0]
    3da4:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3da8:	2b0f      	cmp	r3, #15
    3daa:	d113      	bne.n	3dd4 <NOROM_RFCRTrim+0xdc>
    3dac:	3905      	subs	r1, #5
    3dae:	2919      	cmp	r1, #25
    3db0:	d80a      	bhi.n	3dc8 <NOROM_RFCRTrim+0xd0>
    3db2:	2301      	movs	r3, #1
    3db4:	fa03 f101 	lsl.w	r1, r3, r1
    3db8:	4b14      	ldr	r3, [pc, #80]	; (3e0c <NOROM_RFCRTrim+0x114>)
    3dba:	400b      	ands	r3, r1
    3dbc:	b123      	cbz	r3, 3dc8 <NOROM_RFCRTrim+0xd0>
    3dbe:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3dc2:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3dc6:	e003      	b.n	3dd0 <NOROM_RFCRTrim+0xd8>
    3dc8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3dcc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3dd0:	6002      	str	r2, [r0, #0]
    3dd2:	bd70      	pop	{r4, r5, r6, pc}
    3dd4:	429c      	cmp	r4, r3
    3dd6:	d209      	bcs.n	3dec <NOROM_RFCRTrim+0xf4>
    3dd8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3ddc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3de0:	6003      	str	r3, [r0, #0]
    3de2:	bd70      	pop	{r4, r5, r6, pc}
    3de4:	2b0f      	cmp	r3, #15
    3de6:	d1f5      	bne.n	3dd4 <NOROM_RFCRTrim+0xdc>
    3de8:	3905      	subs	r1, #5
    3dea:	e7e2      	b.n	3db2 <NOROM_RFCRTrim+0xba>
    3dec:	bd70      	pop	{r4, r5, r6, pc}
    3dee:	bf00      	nop
    3df0:	50001100 	andpl	r1, r0, r0, lsl #2
    3df4:	50001380 	andpl	r1, r0, r0, lsl #7
    3df8:	50001320 	andpl	r1, r0, r0, lsr #6
    3dfc:	500010f8 	strdpl	r1, [r0], -r8
    3e00:	500010fc 	strdpl	r1, [r0], -ip
    3e04:	50001104 	andpl	r1, r0, r4, lsl #2
    3e08:	50001108 	andpl	r1, r0, r8, lsl #2
    3e0c:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

00003e10 <NOROM_RFCRfTrimSet>:
    3e10:	4603      	mov	r3, r0
    3e12:	b530      	push	{r4, r5, lr}
    3e14:	4c05      	ldr	r4, [pc, #20]	; (3e2c <NOROM_RFCRfTrimSet+0x1c>)
    3e16:	f100 0510 	add.w	r5, r0, #16
    3e1a:	4622      	mov	r2, r4
    3e1c:	6818      	ldr	r0, [r3, #0]
    3e1e:	6859      	ldr	r1, [r3, #4]
    3e20:	3308      	adds	r3, #8
    3e22:	c203      	stmia	r2!, {r0, r1}
    3e24:	42ab      	cmp	r3, r5
    3e26:	4614      	mov	r4, r2
    3e28:	d1f7      	bne.n	3e1a <NOROM_RFCRfTrimSet+0xa>
    3e2a:	bd30      	pop	{r4, r5, pc}
    3e2c:	21000018 	tstcs	r0, r8, lsl r0

00003e30 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3e30:	4b04      	ldr	r3, [pc, #16]	; (3e44 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3e32:	b128      	cbz	r0, 3e40 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3e34:	4a04      	ldr	r2, [pc, #16]	; (3e48 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    3e36:	2100      	movs	r1, #0
    3e38:	7011      	strb	r1, [r2, #0]
    3e3a:	2220      	movs	r2, #32
    3e3c:	701a      	strb	r2, [r3, #0]
    3e3e:	4770      	bx	lr
    3e40:	7018      	strb	r0, [r3, #0]
    3e42:	4770      	bx	lr
    3e44:	40086202 	andmi	r6, r8, r2, lsl #4
    3e48:	40086200 	andmi	r6, r8, r0, lsl #4

00003e4c <TrimAfterColdResetWakeupFromShutDown>:
    3e4c:	b538      	push	{r3, r4, r5, lr}
    3e4e:	4605      	mov	r5, r0
    3e50:	4b26      	ldr	r3, [pc, #152]	; (3eec <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3e52:	2201      	movs	r2, #1
    3e54:	601a      	str	r2, [r3, #0]
    3e56:	4b26      	ldr	r3, [pc, #152]	; (3ef0 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3e58:	681b      	ldr	r3, [r3, #0]
    3e5a:	2b00      	cmp	r3, #0
    3e5c:	d0fb      	beq.n	3e56 <TrimAfterColdResetWakeupFromShutDown+0xa>
    3e5e:	4b25      	ldr	r3, [pc, #148]	; (3ef4 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3e60:	22c0      	movs	r2, #192	; 0xc0
    3e62:	601a      	str	r2, [r3, #0]
    3e64:	4b24      	ldr	r3, [pc, #144]	; (3ef8 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	079b      	lsls	r3, r3, #30
    3e6a:	bf5f      	itttt	pl
    3e6c:	4b23      	ldrpl	r3, [pc, #140]	; (3efc <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3e6e:	4a24      	ldrpl	r2, [pc, #144]	; (3f00 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3e70:	681b      	ldrpl	r3, [r3, #0]
    3e72:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3e76:	bf5c      	itt	pl
    3e78:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3e7c:	7013      	strbpl	r3, [r2, #0]
    3e7e:	4b21      	ldr	r3, [pc, #132]	; (3f04 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3e80:	2200      	movs	r2, #0
    3e82:	601a      	str	r2, [r3, #0]
    3e84:	4b20      	ldr	r3, [pc, #128]	; (3f08 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3e86:	681c      	ldr	r4, [r3, #0]
    3e88:	4620      	mov	r0, r4
    3e8a:	f000 f8d9 	bl	4040 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3e8e:	4628      	mov	r0, r5
    3e90:	4621      	mov	r1, r4
    3e92:	f000 fa0d 	bl	42b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3e96:	f240 221d 	movw	r2, #541	; 0x21d
    3e9a:	4b1c      	ldr	r3, [pc, #112]	; (3f0c <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	b29b      	uxth	r3, r3
    3ea0:	4293      	cmp	r3, r2
    3ea2:	d814      	bhi.n	3ece <TrimAfterColdResetWakeupFromShutDown+0x82>
    3ea4:	4a1a      	ldr	r2, [pc, #104]	; (3f10 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3ea6:	6813      	ldr	r3, [r2, #0]
    3ea8:	6812      	ldr	r2, [r2, #0]
    3eaa:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3eae:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3eb2:	b103      	cbz	r3, 3eb6 <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3eb4:	3b01      	subs	r3, #1
    3eb6:	1f91      	subs	r1, r2, #6
    3eb8:	2901      	cmp	r1, #1
    3eba:	bf86      	itte	hi
    3ebc:	3202      	addhi	r2, #2
    3ebe:	f002 020f 	andhi.w	r2, r2, #15
    3ec2:	2207      	movls	r2, #7
    3ec4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3ec8:	4a12      	ldr	r2, [pc, #72]	; (3f14 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3eca:	b2db      	uxtb	r3, r3
    3ecc:	7013      	strb	r3, [r2, #0]
    3ece:	4620      	mov	r0, r4
    3ed0:	f000 fabc 	bl	444c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3ed4:	4b10      	ldr	r3, [pc, #64]	; (3f18 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3ed6:	2002      	movs	r0, #2
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	68db      	ldr	r3, [r3, #12]
    3edc:	4798      	blx	r3
    3ede:	4b05      	ldr	r3, [pc, #20]	; (3ef4 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3ee0:	2240      	movs	r2, #64	; 0x40
    3ee2:	601a      	str	r2, [r3, #0]
    3ee4:	4b0d      	ldr	r3, [pc, #52]	; (3f1c <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    3ee6:	2201      	movs	r2, #1
    3ee8:	601a      	str	r2, [r3, #0]
    3eea:	bd38      	pop	{r3, r4, r5, pc}
    3eec:	40091010 	andmi	r1, r9, r0, lsl r0
    3ef0:	43220294 			; <UNDEFINED> instruction: 0x43220294
    3ef4:	400c6000 	andmi	r6, ip, r0
    3ef8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3efc:	50003fac 	andpl	r3, r0, ip, lsr #31
    3f00:	40086256 	andmi	r6, r8, r6, asr r2
    3f04:	40091040 	andmi	r1, r9, r0, asr #32
    3f08:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3f0c:	50001314 	andpl	r1, r0, r4, lsl r3
    3f10:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    3f14:	40086002 	andmi	r6, r8, r2
    3f18:	100001a0 	andne	r0, r0, r0, lsr #3
    3f1c:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00003f20 <NOROM_SetupTrimDevice>:
    3f20:	b510      	push	{r4, lr}
    3f22:	4b1f      	ldr	r3, [pc, #124]	; (3fa0 <NOROM_SetupTrimDevice+0x80>)
    3f24:	681c      	ldr	r4, [r3, #0]
    3f26:	1c63      	adds	r3, r4, #1
    3f28:	bf08      	it	eq
    3f2a:	2400      	moveq	r4, #0
    3f2c:	f000 fcde 	bl	48ec <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3f30:	4b1c      	ldr	r3, [pc, #112]	; (3fa4 <NOROM_SetupTrimDevice+0x84>)
    3f32:	2200      	movs	r2, #0
    3f34:	601a      	str	r2, [r3, #0]
    3f36:	4a1c      	ldr	r2, [pc, #112]	; (3fa8 <NOROM_SetupTrimDevice+0x88>)
    3f38:	2301      	movs	r3, #1
    3f3a:	6013      	str	r3, [r2, #0]
    3f3c:	4a1b      	ldr	r2, [pc, #108]	; (3fac <NOROM_SetupTrimDevice+0x8c>)
    3f3e:	6013      	str	r3, [r2, #0]
    3f40:	f000 fa3e 	bl	43c0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3f44:	4b1a      	ldr	r3, [pc, #104]	; (3fb0 <NOROM_SetupTrimDevice+0x90>)
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	b123      	cbz	r3, 3f54 <NOROM_SetupTrimDevice+0x34>
    3f4a:	4b1a      	ldr	r3, [pc, #104]	; (3fb4 <NOROM_SetupTrimDevice+0x94>)
    3f4c:	4620      	mov	r0, r4
    3f4e:	681b      	ldr	r3, [r3, #0]
    3f50:	f7ff ff7c 	bl	3e4c <TrimAfterColdResetWakeupFromShutDown>
    3f54:	4b18      	ldr	r3, [pc, #96]	; (3fb8 <NOROM_SetupTrimDevice+0x98>)
    3f56:	2200      	movs	r2, #0
    3f58:	601a      	str	r2, [r3, #0]
    3f5a:	4a18      	ldr	r2, [pc, #96]	; (3fbc <NOROM_SetupTrimDevice+0x9c>)
    3f5c:	6813      	ldr	r3, [r2, #0]
    3f5e:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    3f62:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3f66:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f6e:	6013      	str	r3, [r2, #0]
    3f70:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3f74:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3f78:	6813      	ldr	r3, [r2, #0]
    3f7a:	f3c3 3301 	ubfx	r3, r3, #12, #2
    3f7e:	2b01      	cmp	r3, #1
    3f80:	bf01      	itttt	eq
    3f82:	6813      	ldreq	r3, [r2, #0]
    3f84:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3f88:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3f8c:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    3f90:	bf04      	itt	eq
    3f92:	6011      	streq	r1, [r2, #0]
    3f94:	6013      	streq	r3, [r2, #0]
    3f96:	4b0a      	ldr	r3, [pc, #40]	; (3fc0 <NOROM_SetupTrimDevice+0xa0>)
    3f98:	681b      	ldr	r3, [r3, #0]
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d1fb      	bne.n	3f96 <NOROM_SetupTrimDevice+0x76>
    3f9e:	bd10      	pop	{r4, pc}
    3fa0:	5000131c 	andpl	r1, r0, ip, lsl r3
    3fa4:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3fa8:	400c605c 	andmi	r6, ip, ip, asr r0
    3fac:	43042208 	movwmi	r2, #16904	; 0x4208
    3fb0:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3fb4:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3fb8:	4008218c 	andmi	r2, r8, ip, lsl #3
    3fbc:	40032048 	andmi	r2, r3, r8, asr #32
    3fc0:	4268000c 	rsbmi	r0, r8, #12

00003fc4 <NOROM_SetupSetVddrLevel>:
    3fc4:	b530      	push	{r4, r5, lr}
    3fc6:	4b19      	ldr	r3, [pc, #100]	; (402c <NOROM_SetupSetVddrLevel+0x68>)
    3fc8:	681a      	ldr	r2, [r3, #0]
    3fca:	4b19      	ldr	r3, [pc, #100]	; (4030 <NOROM_SetupSetVddrLevel+0x6c>)
    3fcc:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3fd0:	781b      	ldrb	r3, [r3, #0]
    3fd2:	2a15      	cmp	r2, #21
    3fd4:	f003 031f 	and.w	r3, r3, #31
    3fd8:	bf88      	it	hi
    3fda:	3a20      	subhi	r2, #32
    3fdc:	2b15      	cmp	r3, #21
    3fde:	bf88      	it	hi
    3fe0:	3b20      	subhi	r3, #32
    3fe2:	4293      	cmp	r3, r2
    3fe4:	d020      	beq.n	4028 <NOROM_SetupSetVddrLevel+0x64>
    3fe6:	4913      	ldr	r1, [pc, #76]	; (4034 <NOROM_SetupSetVddrLevel+0x70>)
    3fe8:	2000      	movs	r0, #0
    3fea:	6008      	str	r0, [r1, #0]
    3fec:	4608      	mov	r0, r1
    3fee:	1ad1      	subs	r1, r2, r3
    3ff0:	2902      	cmp	r1, #2
    3ff2:	dc05      	bgt.n	4000 <NOROM_SetupSetVddrLevel+0x3c>
    3ff4:	f06f 0401 	mvn.w	r4, #1
    3ff8:	42a1      	cmp	r1, r4
    3ffa:	bfb8      	it	lt
    3ffc:	4621      	movlt	r1, r4
    3ffe:	e000      	b.n	4002 <NOROM_SetupSetVddrLevel+0x3e>
    4000:	2102      	movs	r1, #2
    4002:	440b      	add	r3, r1
    4004:	490c      	ldr	r1, [pc, #48]	; (4038 <NOROM_SetupSetVddrLevel+0x74>)
    4006:	4d0d      	ldr	r5, [pc, #52]	; (403c <NOROM_SetupSetVddrLevel+0x78>)
    4008:	680c      	ldr	r4, [r1, #0]
    400a:	f003 041f 	and.w	r4, r3, #31
    400e:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    4012:	802c      	strh	r4, [r5, #0]
    4014:	4293      	cmp	r3, r2
    4016:	f04f 0401 	mov.w	r4, #1
    401a:	600c      	str	r4, [r1, #0]
    401c:	d1e7      	bne.n	3fee <NOROM_SetupSetVddrLevel+0x2a>
    401e:	680b      	ldr	r3, [r1, #0]
    4020:	600c      	str	r4, [r1, #0]
    4022:	680b      	ldr	r3, [r1, #0]
    4024:	6004      	str	r4, [r0, #0]
    4026:	680b      	ldr	r3, [r1, #0]
    4028:	bd30      	pop	{r4, r5, pc}
    402a:	bf00      	nop
    402c:	50001388 	andpl	r1, r0, r8, lsl #7
    4030:	40086206 	andmi	r6, r8, r6, lsl #4
    4034:	43200098 			; <UNDEFINED> instruction: 0x43200098
    4038:	4009202c 	andmi	r2, r9, ip, lsr #32
    403c:	4008626c 	andmi	r6, r8, ip, ror #4

00004040 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    4040:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    4044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4048:	b510      	push	{r4, lr}
    404a:	4604      	mov	r4, r0
    404c:	d10f      	bne.n	406e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    404e:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    4052:	4a1e      	ldr	r2, [pc, #120]	; (40cc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    4054:	2380      	movs	r3, #128	; 0x80
    4056:	7013      	strb	r3, [r2, #0]
    4058:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    405c:	f802 3c10 	strb.w	r3, [r2, #-16]
    4060:	f7ff ffb0 	bl	3fc4 <NOROM_SetupSetVddrLevel>
    4064:	4b1a      	ldr	r3, [pc, #104]	; (40d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    4066:	681b      	ldr	r3, [r3, #0]
    4068:	f3c3 2304 	ubfx	r3, r3, #8, #5
    406c:	e003      	b.n	4076 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    406e:	4b19      	ldr	r3, [pc, #100]	; (40d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    4070:	681b      	ldr	r3, [r3, #0]
    4072:	f3c3 6304 	ubfx	r3, r3, #24, #5
    4076:	2b15      	cmp	r3, #21
    4078:	bf88      	it	hi
    407a:	3b20      	subhi	r3, #32
    407c:	eb03 7324 	add.w	r3, r3, r4, asr #28
    4080:	3301      	adds	r3, #1
    4082:	2b15      	cmp	r3, #21
    4084:	dc05      	bgt.n	4092 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    4086:	f06f 0209 	mvn.w	r2, #9
    408a:	4293      	cmp	r3, r2
    408c:	bfb8      	it	lt
    408e:	4613      	movlt	r3, r2
    4090:	e000      	b.n	4094 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    4092:	2315      	movs	r3, #21
    4094:	4a10      	ldr	r2, [pc, #64]	; (40d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    4096:	f003 031f 	and.w	r3, r3, #31
    409a:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    409e:	8013      	strh	r3, [r2, #0]
    40a0:	4b0e      	ldr	r3, [pc, #56]	; (40dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    40a2:	681b      	ldr	r3, [r3, #0]
    40a4:	f013 0302 	ands.w	r3, r3, #2
    40a8:	bf0a      	itet	eq
    40aa:	4a0d      	ldreq	r2, [pc, #52]	; (40e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    40ac:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    40b0:	6013      	streq	r3, [r2, #0]
    40b2:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    40b6:	4a0b      	ldr	r2, [pc, #44]	; (40e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    40b8:	f083 0301 	eor.w	r3, r3, #1
    40bc:	6013      	str	r3, [r2, #0]
    40be:	f3c4 6480 	ubfx	r4, r4, #26, #1
    40c2:	4b09      	ldr	r3, [pc, #36]	; (40e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    40c4:	f084 0401 	eor.w	r4, r4, #1
    40c8:	601c      	str	r4, [r3, #0]
    40ca:	bd10      	pop	{r4, pc}
    40cc:	40086225 	andmi	r6, r8, r5, lsr #4
    40d0:	50001388 	andpl	r1, r0, r8, lsl #7
    40d4:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    40d8:	4008626e 	andmi	r6, r8, lr, ror #4
    40dc:	40090000 	andmi	r0, r9, r0
    40e0:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    40e4:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    40e8:	43200008 			; <UNDEFINED> instruction: 0x43200008

000040ec <NOROM_SetupGetTrimForAnabypassValue1>:
    40ec:	4b15      	ldr	r3, [pc, #84]	; (4144 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    40ee:	0381      	lsls	r1, r0, #14
    40f0:	681b      	ldr	r3, [r3, #0]
    40f2:	f3c3 6283 	ubfx	r2, r3, #26, #4
    40f6:	f3c3 238f 	ubfx	r3, r3, #10, #16
    40fa:	d41f      	bmi.n	413c <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    40fc:	f340 2007 	sbfx	r0, r0, #8, #8
    4100:	2800      	cmp	r0, #0
    4102:	da19      	bge.n	4138 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    4104:	085b      	lsrs	r3, r3, #1
    4106:	d105      	bne.n	4114 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    4108:	0852      	lsrs	r2, r2, #1
    410a:	bf06      	itte	eq
    410c:	2301      	moveq	r3, #1
    410e:	461a      	moveq	r2, r3
    4110:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    4114:	3001      	adds	r0, #1
    4116:	e7f3      	b.n	4100 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    4118:	005b      	lsls	r3, r3, #1
    411a:	f043 0301 	orr.w	r3, r3, #1
    411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4122:	d308      	bcc.n	4136 <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    4124:	0052      	lsls	r2, r2, #1
    4126:	f042 0201 	orr.w	r2, r2, #1
    412a:	2a0f      	cmp	r2, #15
    412c:	bf86      	itte	hi
    412e:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    4132:	220f      	movhi	r2, #15
    4134:	2301      	movls	r3, #1
    4136:	3801      	subs	r0, #1
    4138:	2800      	cmp	r0, #0
    413a:	d1ed      	bne.n	4118 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    413c:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    4140:	4770      	bx	lr
    4142:	bf00      	nop
    4144:	50001350 	andpl	r1, r0, r0, asr r3

00004148 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    4148:	4a04      	ldr	r2, [pc, #16]	; (415c <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    414a:	6813      	ldr	r3, [r2, #0]
    414c:	6810      	ldr	r0, [r2, #0]
    414e:	f3c3 0387 	ubfx	r3, r3, #2, #8
    4152:	f000 0003 	and.w	r0, r0, #3
    4156:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    415a:	4770      	bx	lr
    415c:	50001350 	andpl	r1, r0, r0, asr r3

00004160 <NOROM_SetupGetTrimForAmpcompTh2>:
    4160:	4b02      	ldr	r3, [pc, #8]	; (416c <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    4162:	6818      	ldr	r0, [r3, #0]
    4164:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    4168:	4770      	bx	lr
    416a:	bf00      	nop
    416c:	50001374 	andpl	r1, r0, r4, ror r3

00004170 <NOROM_SetupGetTrimForAmpcompTh1>:
    4170:	4b03      	ldr	r3, [pc, #12]	; (4180 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    4172:	6818      	ldr	r0, [r3, #0]
    4174:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4178:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    417c:	4770      	bx	lr
    417e:	bf00      	nop
    4180:	50001370 	andpl	r1, r0, r0, ror r3

00004184 <NOROM_SetupGetTrimForAmpcompCtrl>:
    4184:	b570      	push	{r4, r5, r6, lr}
    4186:	4b15      	ldr	r3, [pc, #84]	; (41dc <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    4188:	4915      	ldr	r1, [pc, #84]	; (41e0 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    418a:	681c      	ldr	r4, [r3, #0]
    418c:	6809      	ldr	r1, [r1, #0]
    418e:	f3c4 5203 	ubfx	r2, r4, #20, #4
    4192:	f011 0501 	ands.w	r5, r1, #1
    4196:	f3c4 4303 	ubfx	r3, r4, #16, #4
    419a:	d113      	bne.n	41c4 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    419c:	4911      	ldr	r1, [pc, #68]	; (41e4 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    419e:	6809      	ldr	r1, [r1, #0]
    41a0:	f341 2603 	sbfx	r6, r1, #8, #4
    41a4:	18b2      	adds	r2, r6, r2
    41a6:	d403      	bmi.n	41b0 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    41a8:	2a0f      	cmp	r2, #15
    41aa:	bfa8      	it	ge
    41ac:	220f      	movge	r2, #15
    41ae:	e000      	b.n	41b2 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    41b0:	462a      	mov	r2, r5
    41b2:	f341 3103 	sbfx	r1, r1, #12, #4
    41b6:	18cb      	adds	r3, r1, r3
    41b8:	d403      	bmi.n	41c2 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    41ba:	2b0f      	cmp	r3, #15
    41bc:	bfa8      	it	ge
    41be:	230f      	movge	r3, #15
    41c0:	e000      	b.n	41c4 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    41c2:	2300      	movs	r3, #0
    41c4:	b2a1      	uxth	r1, r4
    41c6:	2821      	cmp	r0, #33	; 0x21
    41c8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    41cc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    41d0:	bf84      	itt	hi
    41d2:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    41d6:	4323      	orrhi	r3, r4
    41d8:	4618      	mov	r0, r3
    41da:	bd70      	pop	{r4, r5, r6, pc}
    41dc:	50001378 	andpl	r1, r0, r8, ror r3
    41e0:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    41e4:	50003fac 	andpl	r3, r0, ip, lsr #31

000041e8 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    41e8:	281f      	cmp	r0, #31
    41ea:	bf83      	ittte	hi
    41ec:	4b02      	ldrhi	r3, [pc, #8]	; (41f8 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    41ee:	6818      	ldrhi	r0, [r3, #0]
    41f0:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    41f4:	2000      	movls	r0, #0
    41f6:	4770      	bx	lr
    41f8:	50001398 	mulpl	r0, r8, r3

000041fc <NOROM_SetupGetTrimForAdcShModeEn>:
    41fc:	2821      	cmp	r0, #33	; 0x21
    41fe:	bf83      	ittte	hi
    4200:	4b02      	ldrhi	r3, [pc, #8]	; (420c <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    4202:	6818      	ldrhi	r0, [r3, #0]
    4204:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    4208:	2001      	movls	r0, #1
    420a:	4770      	bx	lr
    420c:	5000138c 	andpl	r1, r0, ip, lsl #7

00004210 <NOROM_SetupGetTrimForAdcShVbufEn>:
    4210:	2821      	cmp	r0, #33	; 0x21
    4212:	bf83      	ittte	hi
    4214:	4b02      	ldrhi	r3, [pc, #8]	; (4220 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    4216:	6818      	ldrhi	r0, [r3, #0]
    4218:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    421c:	2001      	movls	r0, #1
    421e:	4770      	bx	lr
    4220:	5000138c 	andpl	r1, r0, ip, lsl #7

00004224 <NOROM_SetupGetTrimForXoscHfCtl>:
    4224:	281f      	cmp	r0, #31
    4226:	bf81      	itttt	hi
    4228:	4b07      	ldrhi	r3, [pc, #28]	; (4248 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    422a:	681b      	ldrhi	r3, [r3, #0]
    422c:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    4230:	0080      	lslhi	r0, r0, #2
    4232:	bf81      	itttt	hi
    4234:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    4238:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    423c:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    4240:	4318      	orrhi	r0, r3
    4242:	bf98      	it	ls
    4244:	2000      	movls	r0, #0
    4246:	4770      	bx	lr
    4248:	50001398 	mulpl	r0, r8, r3

0000424c <NOROM_SetupGetTrimForXoscHfFastStart>:
    424c:	4b02      	ldr	r3, [pc, #8]	; (4258 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    424e:	6818      	ldr	r0, [r3, #0]
    4250:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    4254:	4770      	bx	lr
    4256:	bf00      	nop
    4258:	5000138c 	andpl	r1, r0, ip, lsl #7

0000425c <NOROM_SetupGetTrimForRadcExtCfg>:
    425c:	281f      	cmp	r0, #31
    425e:	bf81      	itttt	hi
    4260:	4b07      	ldrhi	r3, [pc, #28]	; (4280 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    4262:	681b      	ldrhi	r3, [r3, #0]
    4264:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    4268:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    426c:	bf81      	itttt	hi
    426e:	0400      	lslhi	r0, r0, #16
    4270:	031b      	lslhi	r3, r3, #12
    4272:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    4276:	b29b      	uxthhi	r3, r3
    4278:	bf8c      	ite	hi
    427a:	4318      	orrhi	r0, r3
    427c:	4801      	ldrls	r0, [pc, #4]	; (4284 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    427e:	4770      	bx	lr
    4280:	50001398 	mulpl	r0, r8, r3
    4284:	403f8000 	eorsmi	r8, pc, r0

00004288 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    4288:	2821      	cmp	r0, #33	; 0x21
    428a:	bf83      	ittte	hi
    428c:	4b02      	ldrhi	r3, [pc, #8]	; (4298 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    428e:	6818      	ldrhi	r0, [r3, #0]
    4290:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    4294:	2000      	movls	r0, #0
    4296:	4770      	bx	lr
    4298:	5000138c 	andpl	r1, r0, ip, lsl #7

0000429c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    429c:	2821      	cmp	r0, #33	; 0x21
    429e:	bf83      	ittte	hi
    42a0:	4b02      	ldrhi	r3, [pc, #8]	; (42ac <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    42a2:	6818      	ldrhi	r0, [r3, #0]
    42a4:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    42a8:	2000      	movls	r0, #0
    42aa:	4770      	bx	lr
    42ac:	5000138c 	andpl	r1, r0, ip, lsl #7

000042b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    42b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    42b2:	4605      	mov	r5, r0
    42b4:	4608      	mov	r0, r1
    42b6:	f7ff ff19 	bl	40ec <NOROM_SetupGetTrimForAnabypassValue1>
    42ba:	4c39      	ldr	r4, [pc, #228]	; (43a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    42bc:	4602      	mov	r2, r0
    42be:	2118      	movs	r1, #24
    42c0:	4620      	mov	r0, r4
    42c2:	f000 fb33 	bl	492c <NOROM_DDI32RegWrite>
    42c6:	f7ff ff3f 	bl	4148 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    42ca:	4b36      	ldr	r3, [pc, #216]	; (43a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    42cc:	b280      	uxth	r0, r0
    42ce:	681b      	ldr	r3, [r3, #0]
    42d0:	9000      	str	r0, [sp, #0]
    42d2:	685e      	ldr	r6, [r3, #4]
    42d4:	4620      	mov	r0, r4
    42d6:	212c      	movs	r1, #44	; 0x2c
    42d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
    42dc:	2300      	movs	r3, #0
    42de:	47b0      	blx	r6
    42e0:	4b31      	ldr	r3, [pc, #196]	; (43a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    42e2:	4620      	mov	r0, r4
    42e4:	681a      	ldr	r2, [r3, #0]
    42e6:	211c      	movs	r1, #28
    42e8:	f3c2 020d 	ubfx	r2, r2, #0, #14
    42ec:	f000 fb1e 	bl	492c <NOROM_DDI32RegWrite>
    42f0:	f7ff ff36 	bl	4160 <NOROM_SetupGetTrimForAmpcompTh2>
    42f4:	2114      	movs	r1, #20
    42f6:	4602      	mov	r2, r0
    42f8:	4620      	mov	r0, r4
    42fa:	f000 fb17 	bl	492c <NOROM_DDI32RegWrite>
    42fe:	f7ff ff37 	bl	4170 <NOROM_SetupGetTrimForAmpcompTh1>
    4302:	2110      	movs	r1, #16
    4304:	4602      	mov	r2, r0
    4306:	4620      	mov	r0, r4
    4308:	f000 fb10 	bl	492c <NOROM_DDI32RegWrite>
    430c:	4628      	mov	r0, r5
    430e:	f7ff ff39 	bl	4184 <NOROM_SetupGetTrimForAmpcompCtrl>
    4312:	210c      	movs	r1, #12
    4314:	4602      	mov	r2, r0
    4316:	4620      	mov	r0, r4
    4318:	f000 fb08 	bl	492c <NOROM_DDI32RegWrite>
    431c:	4628      	mov	r0, r5
    431e:	f7ff ff6d 	bl	41fc <NOROM_SetupGetTrimForAdcShModeEn>
    4322:	0040      	lsls	r0, r0, #1
    4324:	4e21      	ldr	r6, [pc, #132]	; (43ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    4326:	f040 0020 	orr.w	r0, r0, #32
    432a:	b2c0      	uxtb	r0, r0
    432c:	7030      	strb	r0, [r6, #0]
    432e:	4628      	mov	r0, r5
    4330:	f7ff ff6e 	bl	4210 <NOROM_SetupGetTrimForAdcShVbufEn>
    4334:	f040 0010 	orr.w	r0, r0, #16
    4338:	b2c0      	uxtb	r0, r0
    433a:	7030      	strb	r0, [r6, #0]
    433c:	4628      	mov	r0, r5
    433e:	f7ff ff71 	bl	4224 <NOROM_SetupGetTrimForXoscHfCtl>
    4342:	2128      	movs	r1, #40	; 0x28
    4344:	4602      	mov	r2, r0
    4346:	4620      	mov	r0, r4
    4348:	f000 faf0 	bl	492c <NOROM_DDI32RegWrite>
    434c:	4628      	mov	r0, r5
    434e:	f7ff ff4b 	bl	41e8 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    4352:	0040      	lsls	r0, r0, #1
    4354:	4b16      	ldr	r3, [pc, #88]	; (43b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    4356:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    435a:	b2c0      	uxtb	r0, r0
    435c:	7018      	strb	r0, [r3, #0]
    435e:	4628      	mov	r0, r5
    4360:	f7ff ff92 	bl	4288 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    4364:	00c0      	lsls	r0, r0, #3
    4366:	4b13      	ldr	r3, [pc, #76]	; (43b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    4368:	f060 007f 	orn	r0, r0, #127	; 0x7f
    436c:	b2c0      	uxtb	r0, r0
    436e:	7018      	strb	r0, [r3, #0]
    4370:	4628      	mov	r0, r5
    4372:	f7ff ff93 	bl	429c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    4376:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    437a:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    437e:	4b0e      	ldr	r3, [pc, #56]	; (43b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    4380:	b280      	uxth	r0, r0
    4382:	8018      	strh	r0, [r3, #0]
    4384:	4628      	mov	r0, r5
    4386:	f7ff ff69 	bl	425c <NOROM_SetupGetTrimForRadcExtCfg>
    438a:	2108      	movs	r1, #8
    438c:	4602      	mov	r2, r0
    438e:	4620      	mov	r0, r4
    4390:	f000 facc 	bl	492c <NOROM_DDI32RegWrite>
    4394:	4b09      	ldr	r3, [pc, #36]	; (43bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    4396:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    439a:	601a      	str	r2, [r3, #0]
    439c:	b002      	add	sp, #8
    439e:	bd70      	pop	{r4, r5, r6, pc}
    43a0:	400ca000 	andmi	sl, ip, r0
    43a4:	100001a4 	andne	r0, r0, r4, lsr #3
    43a8:	5000137c 	andpl	r1, r0, ip, ror r3
    43ac:	400ca149 	andmi	sl, ip, r9, asr #2
    43b0:	400ca14c 	andmi	sl, ip, ip, asr #2
    43b4:	400ca141 	andmi	sl, ip, r1, asr #2
    43b8:	400ca1dc 	ldrdmi	sl, [ip], -ip
    43bc:	400ca040 	andmi	sl, ip, r0, asr #32

000043c0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    43c0:	b530      	push	{r4, r5, lr}
    43c2:	4b14      	ldr	r3, [pc, #80]	; (4414 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    43c4:	681b      	ldr	r3, [r3, #0]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d1fb      	bne.n	43c2 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    43ca:	4a13      	ldr	r2, [pc, #76]	; (4418 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    43cc:	4913      	ldr	r1, [pc, #76]	; (441c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    43ce:	6813      	ldr	r3, [r2, #0]
    43d0:	6809      	ldr	r1, [r1, #0]
    43d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    43d6:	f023 0307 	bic.w	r3, r3, #7
    43da:	f011 0f04 	tst.w	r1, #4
    43de:	4614      	mov	r4, r2
    43e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    43e4:	d003      	beq.n	43ee <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    43e6:	f043 0305 	orr.w	r3, r3, #5
    43ea:	6013      	str	r3, [r2, #0]
    43ec:	bd30      	pop	{r4, r5, pc}
    43ee:	490c      	ldr	r1, [pc, #48]	; (4420 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    43f0:	f043 0004 	orr.w	r0, r3, #4
    43f4:	680d      	ldr	r5, [r1, #0]
    43f6:	07ad      	lsls	r5, r5, #30
    43f8:	d009      	beq.n	440e <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    43fa:	f043 0307 	orr.w	r3, r3, #7
    43fe:	6013      	str	r3, [r2, #0]
    4400:	680b      	ldr	r3, [r1, #0]
    4402:	f003 0303 	and.w	r3, r3, #3
    4406:	2b03      	cmp	r3, #3
    4408:	d1fa      	bne.n	4400 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    440a:	6020      	str	r0, [r4, #0]
    440c:	bd30      	pop	{r4, r5, pc}
    440e:	6010      	str	r0, [r2, #0]
    4410:	bd30      	pop	{r4, r5, pc}
    4412:	bf00      	nop
    4414:	4268000c 	rsbmi	r0, r8, #12
    4418:	40034004 	andmi	r4, r3, r4
    441c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4420:	40034000 	andmi	r4, r3, r0

00004424 <NOROM_SetupSetAonRtcSubSecInc>:
    4424:	4b07      	ldr	r3, [pc, #28]	; (4444 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    4426:	b282      	uxth	r2, r0
    4428:	f3c0 4007 	ubfx	r0, r0, #16, #8
    442c:	601a      	str	r2, [r3, #0]
    442e:	6058      	str	r0, [r3, #4]
    4430:	2201      	movs	r2, #1
    4432:	3308      	adds	r3, #8
    4434:	601a      	str	r2, [r3, #0]
    4436:	4a04      	ldr	r2, [pc, #16]	; (4448 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    4438:	6812      	ldr	r2, [r2, #0]
    443a:	2a00      	cmp	r2, #0
    443c:	d0fb      	beq.n	4436 <NOROM_SetupSetAonRtcSubSecInc+0x12>
    443e:	2200      	movs	r2, #0
    4440:	601a      	str	r2, [r3, #0]
    4442:	4770      	bx	lr
    4444:	400c603c 	andmi	r6, ip, ip, lsr r0
    4448:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

0000444c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    444c:	f3c0 4381 	ubfx	r3, r0, #18, #2
    4450:	2b01      	cmp	r3, #1
    4452:	b510      	push	{r4, lr}
    4454:	4604      	mov	r4, r0
    4456:	d002      	beq.n	445e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    4458:	2b02      	cmp	r3, #2
    445a:	d02f      	beq.n	44bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    445c:	e02a      	b.n	44b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    445e:	4b42      	ldr	r3, [pc, #264]	; (4568 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    4460:	681b      	ldr	r3, [r3, #0]
    4462:	039a      	lsls	r2, r3, #14
    4464:	d426      	bmi.n	44b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    4466:	4a41      	ldr	r2, [pc, #260]	; (456c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    4468:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    446c:	6011      	str	r1, [r2, #0]
    446e:	4940      	ldr	r1, [pc, #256]	; (4570 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    4470:	f3c3 3003 	ubfx	r0, r3, #12, #4
    4474:	680a      	ldr	r2, [r1, #0]
    4476:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    447a:	4302      	orrs	r2, r0
    447c:	f3c3 4000 	ubfx	r0, r3, #16, #1
    4480:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    4484:	600a      	str	r2, [r1, #0]
    4486:	f851 2c01 	ldr.w	r2, [r1, #-1]
    448a:	f3c3 2003 	ubfx	r0, r3, #8, #4
    448e:	f022 020f 	bic.w	r2, r2, #15
    4492:	4302      	orrs	r2, r0
    4494:	f851 0c01 	ldr.w	r0, [r1, #-1]
    4498:	f841 2c01 	str.w	r2, [r1, #-1]
    449c:	f851 2c02 	ldr.w	r2, [r1, #-2]
    44a0:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    44a4:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    44a8:	4313      	orrs	r3, r2
    44aa:	f851 2c02 	ldr.w	r2, [r1, #-2]
    44ae:	f841 3c02 	str.w	r3, [r1, #-2]
    44b2:	e003      	b.n	44bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    44b4:	4b2d      	ldr	r3, [pc, #180]	; (456c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    44b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    44ba:	601a      	str	r2, [r3, #0]
    44bc:	4b2d      	ldr	r3, [pc, #180]	; (4574 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    44be:	681b      	ldr	r3, [r3, #0]
    44c0:	071b      	lsls	r3, r3, #28
    44c2:	bf5e      	ittt	pl
    44c4:	4b2c      	ldrpl	r3, [pc, #176]	; (4578 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    44c6:	2240      	movpl	r2, #64	; 0x40
    44c8:	601a      	strpl	r2, [r3, #0]
    44ca:	4b2c      	ldr	r3, [pc, #176]	; (457c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    44cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    44d0:	601a      	str	r2, [r3, #0]
    44d2:	f7ff febb 	bl	424c <NOROM_SetupGetTrimForXoscHfFastStart>
    44d6:	4b2a      	ldr	r3, [pc, #168]	; (4580 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    44d8:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    44dc:	b2c0      	uxtb	r0, r0
    44de:	7018      	strb	r0, [r3, #0]
    44e0:	f3c4 5081 	ubfx	r0, r4, #22, #2
    44e4:	2801      	cmp	r0, #1
    44e6:	d00b      	beq.n	4500 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    44e8:	d302      	bcc.n	44f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    44ea:	2802      	cmp	r0, #2
    44ec:	d026      	beq.n	453c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    44ee:	e028      	b.n	4542 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    44f0:	2004      	movs	r0, #4
    44f2:	2101      	movs	r1, #1
    44f4:	f7ff fa84 	bl	3a00 <NOROM_OSCClockSourceSet>
    44f8:	4822      	ldr	r0, [pc, #136]	; (4584 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    44fa:	f7ff ff93 	bl	4424 <NOROM_SetupSetAonRtcSubSecInc>
    44fe:	e024      	b.n	454a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    4500:	f7ff faac 	bl	3a5c <NOROM_OSCClockSourceGet>
    4504:	4604      	mov	r4, r0
    4506:	2004      	movs	r0, #4
    4508:	4621      	mov	r1, r4
    450a:	f7ff fa79 	bl	3a00 <NOROM_OSCClockSourceSet>
    450e:	2004      	movs	r0, #4
    4510:	f7ff faa4 	bl	3a5c <NOROM_OSCClockSourceGet>
    4514:	42a0      	cmp	r0, r4
    4516:	d1fa      	bne.n	450e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    4518:	4b1b      	ldr	r3, [pc, #108]	; (4588 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    451a:	681c      	ldr	r4, [r3, #0]
    451c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4520:	f7ff ff80 	bl	4424 <NOROM_SetupSetAonRtcSubSecInc>
    4524:	4b19      	ldr	r3, [pc, #100]	; (458c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    4526:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	0e20      	lsrs	r0, r4, #24
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	2107      	movs	r1, #7
    4532:	4798      	blx	r3
    4534:	4b0d      	ldr	r3, [pc, #52]	; (456c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    4536:	f44f 6280 	mov.w	r2, #1024	; 0x400
    453a:	601a      	str	r2, [r3, #0]
    453c:	2004      	movs	r0, #4
    453e:	2103      	movs	r1, #3
    4540:	e001      	b.n	4546 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    4542:	2004      	movs	r0, #4
    4544:	2102      	movs	r1, #2
    4546:	f7ff fa5b 	bl	3a00 <NOROM_OSCClockSourceSet>
    454a:	4b11      	ldr	r3, [pc, #68]	; (4590 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    454c:	4a11      	ldr	r2, [pc, #68]	; (4594 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    454e:	681b      	ldr	r3, [r3, #0]
    4550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4554:	7013      	strb	r3, [r2, #0]
    4556:	f647 0218 	movw	r2, #30744	; 0x7818
    455a:	4b0f      	ldr	r3, [pc, #60]	; (4598 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    455c:	801a      	strh	r2, [r3, #0]
    455e:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    4562:	3b44      	subs	r3, #68	; 0x44
    4564:	681b      	ldr	r3, [r3, #0]
    4566:	bd10      	pop	{r4, pc}
    4568:	5000138c 	andpl	r1, r0, ip, lsl #7
    456c:	400ca040 	andmi	sl, ip, r0, asr #32
    4570:	4008600c 	andmi	r6, r8, ip
    4574:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4578:	400ca068 	andmi	sl, ip, r8, rrx
    457c:	400ca080 	andmi	sl, ip, r0, lsl #1
    4580:	400ca108 	andmi	sl, ip, r8, lsl #2
    4584:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    4588:	50003fa8 	andpl	r3, r0, r8, lsr #31
    458c:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    4590:	5000136c 	andpl	r1, r0, ip, ror #6
    4594:	400cb00b 	andmi	fp, ip, fp
    4598:	400cb070 	andmi	fp, ip, r0, ror r0

0000459c <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    459c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45a0:	4b77      	ldr	r3, [pc, #476]	; (4780 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    45a2:	4607      	mov	r7, r0
    45a4:	681b      	ldr	r3, [r3, #0]
    45a6:	4e77      	ldr	r6, [pc, #476]	; (4784 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    45a8:	f013 0f02 	tst.w	r3, #2
    45ac:	d004      	beq.n	45b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    45ae:	2308      	movs	r3, #8
    45b0:	71b3      	strb	r3, [r6, #6]
    45b2:	4a75      	ldr	r2, [pc, #468]	; (4788 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    45b4:	4b75      	ldr	r3, [pc, #468]	; (478c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    45b6:	e0df      	b.n	4778 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    45b8:	f7ff f9e6 	bl	3988 <NOROM_AONBatMonTemperatureGetDegC>
    45bc:	4b74      	ldr	r3, [pc, #464]	; (4790 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    45be:	681d      	ldr	r5, [r3, #0]
    45c0:	172a      	asrs	r2, r5, #28
    45c2:	02ac      	lsls	r4, r5, #10
    45c4:	f102 0101 	add.w	r1, r2, #1
    45c8:	d408      	bmi.n	45dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    45ca:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    45ce:	10db      	asrs	r3, r3, #3
    45d0:	2b08      	cmp	r3, #8
    45d2:	bfa8      	it	ge
    45d4:	2308      	movge	r3, #8
    45d6:	4299      	cmp	r1, r3
    45d8:	bfb8      	it	lt
    45da:	4619      	movlt	r1, r3
    45dc:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    45e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    45e4:	d10a      	bne.n	45fc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    45e6:	4b6b      	ldr	r3, [pc, #428]	; (4794 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    45e8:	681a      	ldr	r2, [r3, #0]
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	f3c2 2204 	ubfx	r2, r2, #8, #5
    45f0:	2a15      	cmp	r2, #21
    45f2:	bf88      	it	hi
    45f4:	3a20      	subhi	r2, #32
    45f6:	f3c3 6304 	ubfx	r3, r3, #24, #5
    45fa:	e00a      	b.n	4612 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    45fc:	4b66      	ldr	r3, [pc, #408]	; (4798 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    45fe:	681a      	ldr	r2, [r3, #0]
    4600:	4b66      	ldr	r3, [pc, #408]	; (479c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    4602:	f3c2 6204 	ubfx	r2, r2, #24, #5
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	2a15      	cmp	r2, #21
    460a:	bf88      	it	hi
    460c:	3a20      	subhi	r2, #32
    460e:	f3c3 4304 	ubfx	r3, r3, #16, #5
    4612:	2b15      	cmp	r3, #21
    4614:	440a      	add	r2, r1
    4616:	bf88      	it	hi
    4618:	3b20      	subhi	r3, #32
    461a:	2a15      	cmp	r2, #21
    461c:	dc05      	bgt.n	462a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    461e:	f06f 0109 	mvn.w	r1, #9
    4622:	428a      	cmp	r2, r1
    4624:	bfb8      	it	lt
    4626:	460a      	movlt	r2, r1
    4628:	e000      	b.n	462c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    462a:	2215      	movs	r2, #21
    462c:	4c5c      	ldr	r4, [pc, #368]	; (47a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    462e:	f002 011f 	and.w	r1, r2, #31
    4632:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    4636:	8021      	strh	r1, [r4, #0]
    4638:	495a      	ldr	r1, [pc, #360]	; (47a4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    463a:	6809      	ldr	r1, [r1, #0]
    463c:	f011 0403 	ands.w	r4, r1, #3
    4640:	bf18      	it	ne
    4642:	2401      	movne	r4, #1
    4644:	0749      	lsls	r1, r1, #29
    4646:	bf48      	it	mi
    4648:	f044 0402 	orrmi.w	r4, r4, #2
    464c:	b10f      	cbz	r7, 4652 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    464e:	f044 0404 	orr.w	r4, r4, #4
    4652:	f996 1007 	ldrsb.w	r1, [r6, #7]
    4656:	1a41      	subs	r1, r0, r1
    4658:	2904      	cmp	r1, #4
    465a:	dc03      	bgt.n	4664 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    465c:	4949      	ldr	r1, [pc, #292]	; (4784 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    465e:	7989      	ldrb	r1, [r1, #6]
    4660:	428c      	cmp	r4, r1
    4662:	d06f      	beq.n	4744 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    4664:	f1b0 010f 	subs.w	r1, r0, #15
    4668:	9101      	str	r1, [sp, #4]
    466a:	f004 0101 	and.w	r1, r4, #1
    466e:	f8df a144 	ldr.w	sl, [pc, #324]	; 47b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    4672:	f004 0904 	and.w	r9, r4, #4
    4676:	f004 0802 	and.w	r8, r4, #2
    467a:	460f      	mov	r7, r1
    467c:	d42a      	bmi.n	46d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    467e:	9901      	ldr	r1, [sp, #4]
    4680:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    4684:	ea4f 2e21 	mov.w	lr, r1, asr #8
    4688:	f1be 0f07 	cmp.w	lr, #7
    468c:	9101      	str	r1, [sp, #4]
    468e:	d801      	bhi.n	4694 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    4690:	d104      	bne.n	469c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    4692:	e001      	b.n	4698 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    4694:	f04f 0e07 	mov.w	lr, #7
    4698:	2106      	movs	r1, #6
    469a:	e000      	b.n	469e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    469c:	4671      	mov	r1, lr
    469e:	f8df b118 	ldr.w	fp, [pc, #280]	; 47b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    46a2:	3101      	adds	r1, #1
    46a4:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    46a8:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    46ac:	ebc1 0c0c 	rsb	ip, r1, ip
    46b0:	fa5f f18c 	uxtb.w	r1, ip
    46b4:	f1b9 0f00 	cmp.w	r9, #0
    46b8:	d002      	beq.n	46c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    46ba:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    46be:	4459      	add	r1, fp
    46c0:	f1b8 0f00 	cmp.w	r8, #0
    46c4:	d002      	beq.n	46cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    46c6:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    46ca:	4459      	add	r1, fp
    46cc:	b12f      	cbz	r7, 46da <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    46ce:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    46d2:	e002      	b.n	46da <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    46d4:	f04f 0e00 	mov.w	lr, #0
    46d8:	4671      	mov	r1, lr
    46da:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    46de:	fa5f fc8a 	uxtb.w	ip, sl
    46e2:	f1b9 0f00 	cmp.w	r9, #0
    46e6:	d002      	beq.n	46ee <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    46e8:	f3ca 2907 	ubfx	r9, sl, #8, #8
    46ec:	44cc      	add	ip, r9
    46ee:	f1b8 0f00 	cmp.w	r8, #0
    46f2:	d002      	beq.n	46fa <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    46f4:	f3ca 4807 	ubfx	r8, sl, #16, #8
    46f8:	44c4      	add	ip, r8
    46fa:	b10f      	cbz	r7, 4700 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    46fc:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    4700:	1a9b      	subs	r3, r3, r2
    4702:	2b01      	cmp	r3, #1
    4704:	bfb8      	it	lt
    4706:	2301      	movlt	r3, #1
    4708:	9f01      	ldr	r7, [sp, #4]
    470a:	2234      	movs	r2, #52	; 0x34
    470c:	4353      	muls	r3, r2
    470e:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    4712:	4379      	muls	r1, r7
    4714:	b2ed      	uxtb	r5, r5
    4716:	436b      	muls	r3, r5
    4718:	3180      	adds	r1, #128	; 0x80
    471a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    471e:	fbb3 f1f1 	udiv	r1, r3, r1
    4722:	f64f 7cff 	movw	ip, #65535	; 0xffff
    4726:	4561      	cmp	r1, ip
    4728:	bf28      	it	cs
    472a:	4661      	movcs	r1, ip
    472c:	287f      	cmp	r0, #127	; 0x7f
    472e:	80b1      	strh	r1, [r6, #4]
    4730:	dc05      	bgt.n	473e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    4732:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    4736:	4298      	cmp	r0, r3
    4738:	bfb8      	it	lt
    473a:	4618      	movlt	r0, r3
    473c:	e000      	b.n	4740 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    473e:	207f      	movs	r0, #127	; 0x7f
    4740:	71f0      	strb	r0, [r6, #7]
    4742:	71b4      	strb	r4, [r6, #6]
    4744:	4b18      	ldr	r3, [pc, #96]	; (47a8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    4746:	2100      	movs	r1, #0
    4748:	681b      	ldr	r3, [r3, #0]
    474a:	6033      	str	r3, [r6, #0]
    474c:	88b3      	ldrh	r3, [r6, #4]
    474e:	2b1e      	cmp	r3, #30
    4750:	bf9e      	ittt	ls
    4752:	4a0c      	ldrls	r2, [pc, #48]	; (4784 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4754:	231f      	movls	r3, #31
    4756:	8093      	strhls	r3, [r2, #4]
    4758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    475c:	d302      	bcc.n	4764 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    475e:	085b      	lsrs	r3, r3, #1
    4760:	3101      	adds	r1, #1
    4762:	e7f9      	b.n	4758 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    4764:	4a11      	ldr	r2, [pc, #68]	; (47ac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    4766:	3b0f      	subs	r3, #15
    4768:	430a      	orrs	r2, r1
    476a:	091b      	lsrs	r3, r3, #4
    476c:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    4770:	4a06      	ldr	r2, [pc, #24]	; (478c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    4772:	6013      	str	r3, [r2, #0]
    4774:	4b0e      	ldr	r3, [pc, #56]	; (47b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    4776:	2200      	movs	r2, #0
    4778:	601a      	str	r2, [r3, #0]
    477a:	b003      	add	sp, #12
    477c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4780:	40090000 	andmi	r0, r9, r0
    4784:	20000624 	andcs	r0, r0, r4, lsr #12
    4788:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    478c:	40091030 	andmi	r1, r9, r0, lsr r0
    4790:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    4794:	50001388 	andpl	r1, r0, r8, lsl #7
    4798:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    479c:	5000113c 	andpl	r1, r0, ip, lsr r1
    47a0:	4008626e 	andmi	r6, r8, lr, ror #4
    47a4:	40082224 	andmi	r2, r8, r4, lsr #4
    47a8:	40092008 	andmi	r2, r9, r8
    47ac:	80a4e700 	adchi	lr, r4, r0, lsl #14
    47b0:	40091034 	andmi	r1, r9, r4, lsr r0
    47b4:	5000139c 	mulpl	r0, ip, r3
    47b8:	50001398 	mulpl	r0, r8, r3

000047bc <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    47bc:	b510      	push	{r4, lr}
    47be:	4b14      	ldr	r3, [pc, #80]	; (4810 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    47c0:	681c      	ldr	r4, [r3, #0]
    47c2:	b2a4      	uxth	r4, r4
    47c4:	b314      	cbz	r4, 480c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    47c6:	f7ff f8df 	bl	3988 <NOROM_AONBatMonTemperatureGetDegC>
    47ca:	4b12      	ldr	r3, [pc, #72]	; (4814 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    47cc:	f993 2007 	ldrsb.w	r2, [r3, #7]
    47d0:	4290      	cmp	r0, r2
    47d2:	da05      	bge.n	47e0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    47d4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    47d8:	4290      	cmp	r0, r2
    47da:	bfb8      	it	lt
    47dc:	4610      	movlt	r0, r2
    47de:	71d8      	strb	r0, [r3, #7]
    47e0:	889a      	ldrh	r2, [r3, #4]
    47e2:	490c      	ldr	r1, [pc, #48]	; (4814 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    47e4:	4294      	cmp	r4, r2
    47e6:	d310      	bcc.n	480a <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    47e8:	4b0b      	ldr	r3, [pc, #44]	; (4818 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    47ea:	6808      	ldr	r0, [r1, #0]
    47ec:	681b      	ldr	r3, [r3, #0]
    47ee:	1aa4      	subs	r4, r4, r2
    47f0:	3302      	adds	r3, #2
    47f2:	1a1b      	subs	r3, r3, r0
    47f4:	2b1f      	cmp	r3, #31
    47f6:	bf28      	it	cs
    47f8:	231f      	movcs	r3, #31
    47fa:	085b      	lsrs	r3, r3, #1
    47fc:	40dc      	lsrs	r4, r3
    47fe:	4414      	add	r4, r2
    4800:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4804:	4294      	cmp	r4, r2
    4806:	bf28      	it	cs
    4808:	4614      	movcs	r4, r2
    480a:	808c      	strh	r4, [r1, #4]
    480c:	bd10      	pop	{r4, pc}
    480e:	bf00      	nop
    4810:	40091034 	andmi	r1, r9, r4, lsr r0
    4814:	20000624 	andcs	r0, r0, r4, lsr #12
    4818:	40092008 	andmi	r2, r9, r8

0000481c <NOROM_SysCtrlResetSourceGet>:
    481c:	4b04      	ldr	r3, [pc, #16]	; (4830 <NOROM_SysCtrlResetSourceGet+0x14>)
    481e:	681a      	ldr	r2, [r3, #0]
    4820:	0412      	lsls	r2, r2, #16
    4822:	bf5a      	itte	pl
    4824:	6818      	ldrpl	r0, [r3, #0]
    4826:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    482a:	2008      	movmi	r0, #8
    482c:	4770      	bx	lr
    482e:	bf00      	nop
    4830:	40090004 	andmi	r0, r9, r4

00004834 <NOROM_ChipInfo_GetChipFamily>:
    4834:	f64b 129a 	movw	r2, #47514	; 0xb99a
    4838:	4b10      	ldr	r3, [pc, #64]	; (487c <NOROM_ChipInfo_GetChipFamily+0x48>)
    483a:	6818      	ldr	r0, [r3, #0]
    483c:	f3c0 300f 	ubfx	r0, r0, #12, #16
    4840:	4290      	cmp	r0, r2
    4842:	d106      	bne.n	4852 <NOROM_ChipInfo_GetChipFamily+0x1e>
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	0f1b      	lsrs	r3, r3, #28
    4848:	2b0b      	cmp	r3, #11
    484a:	bf0c      	ite	eq
    484c:	2004      	moveq	r0, #4
    484e:	2000      	movne	r0, #0
    4850:	e011      	b.n	4876 <NOROM_ChipInfo_GetChipFamily+0x42>
    4852:	f64b 13be 	movw	r3, #47550	; 0xb9be
    4856:	4298      	cmp	r0, r3
    4858:	d00a      	beq.n	4870 <NOROM_ChipInfo_GetChipFamily+0x3c>
    485a:	f64b 3341 	movw	r3, #47937	; 0xbb41
    485e:	4298      	cmp	r0, r3
    4860:	d008      	beq.n	4874 <NOROM_ChipInfo_GetChipFamily+0x40>
    4862:	f64b 3320 	movw	r3, #47904	; 0xbb20
    4866:	4298      	cmp	r0, r3
    4868:	bf14      	ite	ne
    486a:	20ff      	movne	r0, #255	; 0xff
    486c:	2002      	moveq	r0, #2
    486e:	e002      	b.n	4876 <NOROM_ChipInfo_GetChipFamily+0x42>
    4870:	2001      	movs	r0, #1
    4872:	e000      	b.n	4876 <NOROM_ChipInfo_GetChipFamily+0x42>
    4874:	2003      	movs	r0, #3
    4876:	b240      	sxtb	r0, r0
    4878:	4770      	bx	lr
    487a:	bf00      	nop
    487c:	50001318 	andpl	r1, r0, r8, lsl r3

00004880 <NOROM_ChipInfo_GetHwRevision>:
    4880:	b538      	push	{r3, r4, r5, lr}
    4882:	4b19      	ldr	r3, [pc, #100]	; (48e8 <NOROM_ChipInfo_GetHwRevision+0x68>)
    4884:	681d      	ldr	r5, [r3, #0]
    4886:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    488a:	6818      	ldr	r0, [r3, #0]
    488c:	0f2d      	lsrs	r5, r5, #28
    488e:	b2c4      	uxtb	r4, r0
    4890:	2c80      	cmp	r4, #128	; 0x80
    4892:	bf28      	it	cs
    4894:	2400      	movcs	r4, #0
    4896:	f7ff ffcd 	bl	4834 <NOROM_ChipInfo_GetChipFamily>
    489a:	2804      	cmp	r0, #4
    489c:	d821      	bhi.n	48e2 <NOROM_ChipInfo_GetHwRevision+0x62>
    489e:	e8df f000 	tbb	[pc, r0]
    48a2:	1b1b1303 	blne	6c94b6 <__ccfg+0x6a950e>
    48a6:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    48aa:	2d07      	cmp	r5, #7
    48ac:	d819      	bhi.n	48e2 <NOROM_ChipInfo_GetHwRevision+0x62>
    48ae:	e8df f005 	tbb	[pc, r5]
    48b2:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    48b6:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    48ba:	2014      	movs	r0, #20
    48bc:	e012      	b.n	48e4 <NOROM_ChipInfo_GetHwRevision+0x64>
    48be:	2015      	movs	r0, #21
    48c0:	e010      	b.n	48e4 <NOROM_ChipInfo_GetHwRevision+0x64>
    48c2:	f104 0016 	add.w	r0, r4, #22
    48c6:	e00a      	b.n	48de <NOROM_ChipInfo_GetHwRevision+0x5e>
    48c8:	b125      	cbz	r5, 48d4 <NOROM_ChipInfo_GetHwRevision+0x54>
    48ca:	2d02      	cmp	r5, #2
    48cc:	d109      	bne.n	48e2 <NOROM_ChipInfo_GetHwRevision+0x62>
    48ce:	f104 0014 	add.w	r0, r4, #20
    48d2:	e004      	b.n	48de <NOROM_ChipInfo_GetHwRevision+0x5e>
    48d4:	200a      	movs	r0, #10
    48d6:	e005      	b.n	48e4 <NOROM_ChipInfo_GetHwRevision+0x64>
    48d8:	b91d      	cbnz	r5, 48e2 <NOROM_ChipInfo_GetHwRevision+0x62>
    48da:	f104 000a 	add.w	r0, r4, #10
    48de:	b2c0      	uxtb	r0, r0
    48e0:	e000      	b.n	48e4 <NOROM_ChipInfo_GetHwRevision+0x64>
    48e2:	20ff      	movs	r0, #255	; 0xff
    48e4:	b240      	sxtb	r0, r0
    48e6:	bd38      	pop	{r3, r4, r5, pc}
    48e8:	50001318 	andpl	r1, r0, r8, lsl r3

000048ec <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    48ec:	b508      	push	{r3, lr}
    48ee:	f7ff ffa1 	bl	4834 <NOROM_ChipInfo_GetChipFamily>
    48f2:	2801      	cmp	r0, #1
    48f4:	d103      	bne.n	48fe <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    48f6:	f7ff ffc3 	bl	4880 <NOROM_ChipInfo_GetHwRevision>
    48fa:	2813      	cmp	r0, #19
    48fc:	dc00      	bgt.n	4900 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    48fe:	e7fe      	b.n	48fe <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    4900:	bd08      	pop	{r3, pc}
	...

00004904 <AuxAdiDdiSafeWrite.constprop.1>:
    4904:	b538      	push	{r3, r4, r5, lr}
    4906:	4604      	mov	r4, r0
    4908:	460d      	mov	r5, r1
    490a:	f7ff f871 	bl	39f0 <NOROM_CPUcpsid>
    490e:	4b06      	ldr	r3, [pc, #24]	; (4928 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    4910:	681a      	ldr	r2, [r3, #0]
    4912:	2a00      	cmp	r2, #0
    4914:	d0fb      	beq.n	490e <AuxAdiDdiSafeWrite.constprop.1+0xa>
    4916:	2201      	movs	r2, #1
    4918:	6025      	str	r5, [r4, #0]
    491a:	601a      	str	r2, [r3, #0]
    491c:	b918      	cbnz	r0, 4926 <AuxAdiDdiSafeWrite.constprop.1+0x22>
    491e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4922:	f7ff b869 	b.w	39f8 <NOROM_CPUcpsie>
    4926:	bd38      	pop	{r3, r4, r5, pc}
    4928:	400c8000 	andmi	r8, ip, r0

0000492c <NOROM_DDI32RegWrite>:
    492c:	4408      	add	r0, r1
    492e:	4611      	mov	r1, r2
    4930:	f7ff bfe8 	b.w	4904 <AuxAdiDdiSafeWrite.constprop.1>

00004934 <memcpy>:
    4934:	b5f0      	push	{r4, r5, r6, r7, lr}
    4936:	46c6      	mov	lr, r8
    4938:	b500      	push	{lr}
    493a:	2a0f      	cmp	r2, #15
    493c:	d945      	bls.n	49ca <memcpy+0x96>
    493e:	000b      	movs	r3, r1
    4940:	2603      	movs	r6, #3
    4942:	4303      	orrs	r3, r0
    4944:	401e      	ands	r6, r3
    4946:	000c      	movs	r4, r1
    4948:	0003      	movs	r3, r0
    494a:	2e00      	cmp	r6, #0
    494c:	d142      	bne.n	49d4 <memcpy+0xa0>
    494e:	0015      	movs	r5, r2
    4950:	3d10      	subs	r5, #16
    4952:	092d      	lsrs	r5, r5, #4
    4954:	46ac      	mov	ip, r5
    4956:	012d      	lsls	r5, r5, #4
    4958:	46a8      	mov	r8, r5
    495a:	4480      	add	r8, r0
    495c:	e000      	b.n	4960 <memcpy+0x2c>
    495e:	003b      	movs	r3, r7
    4960:	6867      	ldr	r7, [r4, #4]
    4962:	605f      	str	r7, [r3, #4]
    4964:	68e7      	ldr	r7, [r4, #12]
    4966:	60df      	str	r7, [r3, #12]
    4968:	001f      	movs	r7, r3
    496a:	6825      	ldr	r5, [r4, #0]
    496c:	601d      	str	r5, [r3, #0]
    496e:	68a5      	ldr	r5, [r4, #8]
    4970:	3710      	adds	r7, #16
    4972:	609d      	str	r5, [r3, #8]
    4974:	3410      	adds	r4, #16
    4976:	4543      	cmp	r3, r8
    4978:	d1f1      	bne.n	495e <memcpy+0x2a>
    497a:	4665      	mov	r5, ip
    497c:	230f      	movs	r3, #15
    497e:	240c      	movs	r4, #12
    4980:	3501      	adds	r5, #1
    4982:	012d      	lsls	r5, r5, #4
    4984:	1949      	adds	r1, r1, r5
    4986:	4013      	ands	r3, r2
    4988:	1945      	adds	r5, r0, r5
    498a:	4214      	tst	r4, r2
    498c:	d025      	beq.n	49da <memcpy+0xa6>
    498e:	598c      	ldr	r4, [r1, r6]
    4990:	51ac      	str	r4, [r5, r6]
    4992:	3604      	adds	r6, #4
    4994:	1b9c      	subs	r4, r3, r6
    4996:	2c03      	cmp	r4, #3
    4998:	d8f9      	bhi.n	498e <memcpy+0x5a>
    499a:	2403      	movs	r4, #3
    499c:	3b04      	subs	r3, #4
    499e:	089b      	lsrs	r3, r3, #2
    49a0:	3301      	adds	r3, #1
    49a2:	009b      	lsls	r3, r3, #2
    49a4:	4022      	ands	r2, r4
    49a6:	18ed      	adds	r5, r5, r3
    49a8:	18c9      	adds	r1, r1, r3
    49aa:	1e56      	subs	r6, r2, #1
    49ac:	2a00      	cmp	r2, #0
    49ae:	d007      	beq.n	49c0 <memcpy+0x8c>
    49b0:	2300      	movs	r3, #0
    49b2:	e000      	b.n	49b6 <memcpy+0x82>
    49b4:	0023      	movs	r3, r4
    49b6:	5cca      	ldrb	r2, [r1, r3]
    49b8:	1c5c      	adds	r4, r3, #1
    49ba:	54ea      	strb	r2, [r5, r3]
    49bc:	429e      	cmp	r6, r3
    49be:	d1f9      	bne.n	49b4 <memcpy+0x80>
    49c0:	bc04      	pop	{r2}
    49c2:	4690      	mov	r8, r2
    49c4:	bcf0      	pop	{r4, r5, r6, r7}
    49c6:	bc02      	pop	{r1}
    49c8:	4708      	bx	r1
    49ca:	0005      	movs	r5, r0
    49cc:	1e56      	subs	r6, r2, #1
    49ce:	2a00      	cmp	r2, #0
    49d0:	d1ee      	bne.n	49b0 <memcpy+0x7c>
    49d2:	e7f5      	b.n	49c0 <memcpy+0x8c>
    49d4:	1e56      	subs	r6, r2, #1
    49d6:	0005      	movs	r5, r0
    49d8:	e7ea      	b.n	49b0 <memcpy+0x7c>
    49da:	001a      	movs	r2, r3
    49dc:	e7f6      	b.n	49cc <memcpy+0x98>
    49de:	46c0      	nop			; (mov r8, r8)

000049e0 <srand>:
    49e0:	2200      	movs	r2, #0
    49e2:	4b03      	ldr	r3, [pc, #12]	; (49f0 <srand+0x10>)
    49e4:	681b      	ldr	r3, [r3, #0]
    49e6:	33a8      	adds	r3, #168	; 0xa8
    49e8:	6018      	str	r0, [r3, #0]
    49ea:	605a      	str	r2, [r3, #4]
    49ec:	4770      	bx	lr
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	20000110 	andcs	r0, r0, r0, lsl r1

000049f4 <rand>:
    49f4:	4b0a      	ldr	r3, [pc, #40]	; (4a20 <rand+0x2c>)
    49f6:	b510      	push	{r4, lr}
    49f8:	681c      	ldr	r4, [r3, #0]
    49fa:	34a8      	adds	r4, #168	; 0xa8
    49fc:	6820      	ldr	r0, [r4, #0]
    49fe:	6861      	ldr	r1, [r4, #4]
    4a00:	4a08      	ldr	r2, [pc, #32]	; (4a24 <rand+0x30>)
    4a02:	4b09      	ldr	r3, [pc, #36]	; (4a28 <rand+0x34>)
    4a04:	f000 f812 	bl	4a2c <__aeabi_lmul>
    4a08:	2201      	movs	r2, #1
    4a0a:	2300      	movs	r3, #0
    4a0c:	1880      	adds	r0, r0, r2
    4a0e:	4159      	adcs	r1, r3
    4a10:	6020      	str	r0, [r4, #0]
    4a12:	6061      	str	r1, [r4, #4]
    4a14:	0048      	lsls	r0, r1, #1
    4a16:	0840      	lsrs	r0, r0, #1
    4a18:	bc10      	pop	{r4}
    4a1a:	bc02      	pop	{r1}
    4a1c:	4708      	bx	r1
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	20000110 	andcs	r0, r0, r0, lsl r1
    4a24:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    4a28:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

00004a2c <__aeabi_lmul>:
    4a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a2e:	000f      	movs	r7, r1
    4a30:	0001      	movs	r1, r0
    4a32:	46c6      	mov	lr, r8
    4a34:	4684      	mov	ip, r0
    4a36:	0415      	lsls	r5, r2, #16
    4a38:	0400      	lsls	r0, r0, #16
    4a3a:	0c14      	lsrs	r4, r2, #16
    4a3c:	0c00      	lsrs	r0, r0, #16
    4a3e:	0c09      	lsrs	r1, r1, #16
    4a40:	0c2d      	lsrs	r5, r5, #16
    4a42:	002e      	movs	r6, r5
    4a44:	4346      	muls	r6, r0
    4a46:	434d      	muls	r5, r1
    4a48:	4360      	muls	r0, r4
    4a4a:	4361      	muls	r1, r4
    4a4c:	1940      	adds	r0, r0, r5
    4a4e:	0c34      	lsrs	r4, r6, #16
    4a50:	1824      	adds	r4, r4, r0
    4a52:	b500      	push	{lr}
    4a54:	42a5      	cmp	r5, r4
    4a56:	d903      	bls.n	4a60 <__aeabi_lmul+0x34>
    4a58:	2080      	movs	r0, #128	; 0x80
    4a5a:	0240      	lsls	r0, r0, #9
    4a5c:	4680      	mov	r8, r0
    4a5e:	4441      	add	r1, r8
    4a60:	0c25      	lsrs	r5, r4, #16
    4a62:	186d      	adds	r5, r5, r1
    4a64:	4661      	mov	r1, ip
    4a66:	4359      	muls	r1, r3
    4a68:	437a      	muls	r2, r7
    4a6a:	0430      	lsls	r0, r6, #16
    4a6c:	1949      	adds	r1, r1, r5
    4a6e:	0424      	lsls	r4, r4, #16
    4a70:	0c00      	lsrs	r0, r0, #16
    4a72:	1820      	adds	r0, r4, r0
    4a74:	1889      	adds	r1, r1, r2
    4a76:	bc04      	pop	{r2}
    4a78:	4690      	mov	r8, r2
    4a7a:	bcf0      	pop	{r4, r5, r6, r7}
    4a7c:	bc04      	pop	{r2}
    4a7e:	4710      	bx	r2
    4a80:	444e4553 	strbmi	r4, [lr], #-1363	; 0xfffffaad
    4a84:	20474e49 	subcs	r4, r7, r9, asr #28
    4a88:	434f5250 	movtmi	r5, #62032	; 0xf250
    4a8c:	52554445 	subspl	r4, r5, #1157627904	; 0x45000000
    4a90:	20490045 	subcs	r0, r9, r5, asr #32
    4a94:	74206d61 	strtvc	r6, [r0], #-3425	; 0xfffff29f
    4a98:	656d2068 	strbvs	r2, [sp, #-104]!	; 0xffffff98
    4a9c:	67617373 			; <UNDEFINED> instruction: 0x67617373
    4aa0:	49472065 	stmdbmi	r7, {r0, r2, r5, r6, sp}^
    4aa4:	64252044 	strtvs	r2, [r5], #-68	; 0xffffffbc
    4aa8:	73654d00 	cmnvc	r5, #0, 26
    4aac:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4ab0:	6e657320 	cdpvs	3, 6, cr7, cr5, cr0, {1}
    4ab4:	000a0d74 	andeq	r0, sl, r4, ror sp
    4ab8:	6f727245 	svcvs	0x00727245
    4abc:	6e692072 	mcrvs	0, 3, r2, cr9, cr2, {3}
    4ac0:	61697469 	cmnvs	r9, r9, ror #8
    4ac4:	697a696c 	ldmdbvs	sl!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4ac8:	6e20676e 	cdpvs	7, 2, cr6, cr0, cr14, {3}
    4acc:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
    4ad0:	000a2e2e 	andeq	r2, sl, lr, lsr #28
    4ad4:	65720a0d 	ldrbvs	r0, [r2, #-2573]!	; 0xfffff5f3
    4ad8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4adc:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4ae0:	0a0d0030 	beq	344ba8 <__ccfg+0x324c00>
    4ae4:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4ae8:	6e697669 	cdpvs	6, 6, cr7, cr9, cr9, {3}
    4aec:	00312067 	eorseq	r2, r1, r7, rrx
    4af0:	65720a0d 	ldrbvs	r0, [r2, #-2573]!	; 0xfffff5f3
    4af4:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4af8:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4afc:	0a0d0032 	beq	344bcc <__ccfg+0x324c24>
    4b00:	3a455054 	bcc	1158c58 <__ccfg+0x1138cb0>
    4b04:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4b08:	65720a0d 	ldrbvs	r0, [r2, #-2573]!	; 0xfffff5f3
    4b0c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4b10:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4b14:	0a0d0033 	beq	344be8 <__ccfg+0x324c40>
    4b18:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    4b1c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4b20:	73206f74 			; <UNDEFINED> instruction: 0x73206f74
    4b24:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
    4b28:	0a0d0072 	beq	344cf8 <__ccfg+0x324d50>
    4b2c:	61657243 	cmnvs	r5, r3, asr #4
    4b30:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4b34:	77206365 	strvc	r6, [r0, -r5, ror #6]!
    4b38:	72622065 	rsbvc	r2, r2, #101	; 0x65
    4b3c:	00656b6f 	rsbeq	r6, r5, pc, ror #22
    4b40:	72430a0d 	subvc	r0, r3, #53248	; 0xd000
    4b44:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4b48:	63657220 	cmnvs	r5, #32, 4
    4b4c:	626e6920 	rsbvs	r6, lr, #32, 18	; 0x80000
    4b50:	65777465 	ldrbvs	r7, [r7, #-1125]!	; 0xfffffb9b
    4b54:	69206e65 	stmdbvs	r0!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
    4b58:	53203a66 			; <UNDEFINED> instruction: 0x53203a66
    4b5c:	20657a69 	rsbcs	r7, r5, r9, ror #20
    4b60:	7220666f 	eorvc	r6, r0, #116391936	; 0x6f00000
    4b64:	3d206365 	stccc	3, cr6, [r0, #-404]!	; 0xfffffe6c
    4b68:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4b6c:	72430a0d 	subvc	r0, r3, #53248	; 0xd000
    4b70:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4b74:	63657220 	cmnvs	r5, #32, 4
    4b78:	63657320 	cmnvs	r5, #32, 6	; 0x80000000
    4b7c:	20646e6f 	rsbcs	r6, r4, pc, ror #28
    4b80:	0d006669 	stceq	6, cr6, [r0, #-420]	; 0xfffffe5c
    4b84:	6572430a 	ldrbvs	r4, [r2, #-778]!	; 0xfffffcf6
    4b88:	20657461 	rsbcs	r7, r5, r1, ror #8
    4b8c:	20636572 	rsbcs	r6, r3, r2, ror r5
    4b90:	72696874 	rsbvc	r6, r9, #116, 16	; 0x740000
    4b94:	66692064 	strbtvs	r2, [r9], -r4, rrx
    4b98:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4b9c:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4ba0:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4ba4:	68742063 	ldmdavs	r4!, {r0, r1, r5, r6, sp}^
    4ba8:	20647269 	rsbcs	r7, r4, r9, ror #4
    4bac:	65736c65 	ldrbvs	r6, [r3, #-3173]!	; 0xfffff39b
    4bb0:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4bb4:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4bb8:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4bbc:	756f2063 	strbvc	r2, [pc, #-99]!	; 4b61 <__aeabi_lmul+0x135>
    4bc0:	66692074 			; <UNDEFINED> instruction: 0x66692074
    4bc4:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4bc8:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4bcc:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4bd0:	65732063 	ldrbvs	r2, [r3, #-99]!	; 0xffffff9d
    4bd4:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    4bd8:	6f742067 	svcvs	0x00742067
    4bdc:	6e657320 	cdpvs	3, 6, cr7, cr5, cr0, {1}
    4be0:	00726564 	rsbseq	r6, r2, r4, ror #10
    4be4:	65440a0d 	strbvs	r0, [r4, #-2573]	; 0xfffff5f3
    4be8:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4bec:	63657220 	cmnvs	r5, #32, 4
    4bf0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    4bf4:	20657465 	rsbcs	r7, r5, r5, ror #8
    4bf8:	6f636572 	svcvs	0x00636572
    4bfc:	67206472 			; <UNDEFINED> instruction: 0x67206472
    4c00:	25206469 	strcs	r6, [r0, #-1129]!	; 0xfffffb97
    4c04:	6f6e0a64 	svcvs	0x006e0a64
    4c08:	645f6564 	ldrbvs	r6, [pc], #-1380	; 4c10 <__aeabi_lmul+0x1e4>
    4c0c:	69672062 	stmdbvs	r7!, {r1, r5, r6, sp}^
    4c10:	64252064 	strtvs	r2, [r5], #-100	; 0xffffff9c
    4c14:	6564200a 	strbvs	r2, [r4, #-10]!
    4c18:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4c1c:	63657220 	cmnvs	r5, #32, 4
    4c20:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4c24:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4c28:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4c2c:	20646920 	rsbcs	r6, r4, r0, lsr #18
    4c30:	2c0a6425 	cfstrscs	mvf6, [sl], {37}	; 0x25
    4c34:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4c3c <__aeabi_lmul+0x210>
    4c38:	62642065 	rsbvs	r2, r4, #101	; 0x65
    4c3c:	20646920 	rsbcs	r6, r4, r0, lsr #18
    4c40:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4c44:	6c65440a 	cfstrdvs	mvd4, [r5], #-40	; 0xffffffd8
    4c48:	20657465 	rsbcs	r7, r5, r5, ror #8
    4c4c:	20636572 	rsbcs	r6, r3, r2, ror r5
    4c50:	73726966 	cmnvc	r2, #1671168	; 0x198000
    4c54:	66692074 			; <UNDEFINED> instruction: 0x66692074
    4c58:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4c5c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4c60:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4c64:	65732063 	ldrbvs	r2, [r3, #-99]!	; 0xffffff9d
    4c68:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    4c6c:	00666920 	rsbeq	r6, r6, r0, lsr #18
    4c70:	65440a0d 	strbvs	r0, [r4, #-2573]	; 0xfffff5f3
    4c74:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4c78:	63657220 	cmnvs	r5, #32, 4
    4c7c:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    4c80:	69206472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, sp, lr}
    4c84:	0a0d0066 	beq	344e24 <__ccfg+0x324e7c>
    4c88:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    4c8c:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4c90:	66206365 	strtvs	r6, [r0], -r5, ror #6
    4c94:	7472756f 	ldrbtvc	r7, [r2], #-1391	; 0xfffffa91
    4c98:	66692068 	strbtvs	r2, [r9], -r8, rrx
    4c9c:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4ca0:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4ca4:	73612065 	cmnvc	r1, #101	; 0x65
    4ca8:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
    4cac:	6c20656c 	cfstr32vs	mvfx6, [r0], #-432	; 0xfffffe50
    4cb0:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4cb4:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
    4cb8:	0d006573 	cfstr32eq	mvfx6, [r0, #-460]	; 0xfffffe34
    4cbc:	7465720a 	strbtvc	r7, [r5], #-522	; 0xfffffdf6
    4cc0:	76656972 			; <UNDEFINED> instruction: 0x76656972
    4cc4:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4cc8:	0a0d0063 	beq	344e5c <__ccfg+0x324eb4>
    4ccc:	70736552 	rsbsvc	r6, r3, r2, asr r5
    4cd0:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
    4cd4:	52524500 	subspl	r4, r2, #0, 10
    4cd8:	203a524f 	eorscs	r5, sl, pc, asr #4
    4cdc:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4ce0:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
    4ce4:	70797420 	rsbsvc	r7, r9, r0, lsr #8
    4ce8:	255b2065 	ldrbcs	r2, [fp, #-101]	; 0xffffff9b
    4cec:	69205d64 	stmdbvs	r0!, {r2, r5, r6, r8, sl, fp, ip, lr}
    4cf0:	6f6e2073 	svcvs	0x006e2073
    4cf4:	656c2074 	strbvs	r2, [ip, #-116]!	; 0xffffff8c
    4cf8:	206c6167 	rsbcs	r6, ip, r7, ror #2
    4cfc:	6b636170 	blvs	18dd2c4 <__ccfg+0x18bd31c>
    4d00:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
    4d04:	00657079 	rsbeq	r7, r5, r9, ror r0
    4d08:	6e490a0d 	vmlavs.f32	s1, s18, s26
    4d0c:	6e6f6420 	cdpvs	4, 6, cr6, cr15, cr0, {1}
    4d10:	61635f65 	cmnvs	r3, r5, ror #30
    4d14:	0d006573 	cfstr32eq	mvfx6, [r0, #-460]	; 0xfffffe34
    4d18:	7461440a 	strbtvc	r4, [r1], #-1034	; 0xfffffbf6
    4d1c:	61532061 	cmpvs	r3, r1, rrx
    4d20:	00646576 	rsbeq	r6, r4, r6, ror r5
    4d24:	65520a0d 	ldrbvs	r0, [r2, #-2573]	; 0xfffff5f3
    4d28:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4d2c:	6c654420 	cfstrdvs	mvd4, [r5], #-128	; 0xffffff80
    4d30:	64657465 	strbtvs	r7, [r5], #-1125	; 0xfffffb9b
    4d34:	520a0d00 	andpl	r0, sl, #0, 26
    4d38:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4d3c:	65522064 	ldrbvs	r2, [r2, #-100]	; 0xffffff9c
    4d40:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4d44:	66206465 	strtvs	r6, [r0], -r5, ror #8
    4d48:	206d6f72 	rsbcs	r6, sp, r2, ror pc
    4d4c:	203a6425 	eorscs	r6, sl, r5, lsr #8
    4d50:	0d007325 	stceq	3, cr7, [r0, #-148]	; 0xffffff6c
    4d54:	6568540a 	strbvs	r5, [r8, #-1034]!	; 0xfffffbf6
    4d58:	63657220 	cmnvs	r5, #32, 4
    4d5c:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4d60:	276e6163 	strbcs	r6, [lr, -r3, ror #2]!
    4d64:	65622074 	strbvs	r2, [r2, #-116]!	; 0xffffff8c
    4d68:	76617320 	strbtvc	r7, [r1], -r0, lsr #6
    4d6c:	6f206465 	svcvs	0x00206465
    4d70:	6f6e206e 	svcvs	0x006e206e
    4d74:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
    4d78:	0a0d0064 	beq	344f10 <__ccfg+0x324f68>
    4d7c:	20656854 	rsbcs	r6, r5, r4, asr r8
    4d80:	6f636572 	svcvs	0x00636572
    4d84:	64206472 	strtvs	r6, [r0], #-1138	; 0xfffffb8e
    4d88:	2073656f 	rsbscs	r6, r3, pc, ror #10
    4d8c:	20746f6e 	rsbscs	r6, r4, lr, ror #30
    4d90:	73697865 	cmnvc	r9, #6619136	; 0x650000
    4d94:	6f207374 	svcvs	0x00207374
    4d98:	6f6e206e 	svcvs	0x006e206e
    4d9c:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
    4da0:	0a0d0064 	beq	344f38 <__ccfg+0x324f90>
    4da4:	20656854 	rsbcs	r6, r5, r4, asr r8
    4da8:	6f636572 	svcvs	0x00636572
    4dac:	64206472 	strtvs	r6, [r0], #-1138	; 0xfffffb8e
    4db0:	2073656f 	rsbscs	r6, r3, pc, ror #10
    4db4:	20746f6e 	rsbscs	r6, r4, lr, ror #30
    4db8:	73697865 	cmnvc	r9, #6619136	; 0x650000
    4dbc:	6e6f2074 	mcrvs	0, 3, r2, cr15, cr4, {3}
    4dc0:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4dc8 <__aeabi_lmul+0x39c>
    4dc4:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
    4dc8:	52524500 	subspl	r4, r2, #0, 10
    4dcc:	203a524f 	eorscs	r5, sl, pc, asr #4
    4dd0:	656d6f73 	strbvs	r6, [sp, #-3955]!	; 0xfffff08d
    4dd4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    4dd8:	6e657720 	cdpvs	7, 6, cr7, cr5, cr0, {1}
    4ddc:	72772074 	rsbsvc	r2, r7, #116	; 0x74
    4de0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    4de4:	6e656877 	mcrvs	8, 3, r6, cr5, cr7, {3}
    4de8:	63657220 	cmnvs	r5, #32, 4
    4dec:	69766965 	ldmdbvs	r6!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4df0:	7420676e 	strtvc	r6, [r0], #-1902	; 0xfffff892
    4df4:	70206568 	eorvc	r6, r0, r8, ror #10
    4df8:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
    4dfc:	61430074 	hvcvs	12292	; 0x3004
    4e00:	746f6e6e 	strbtvc	r6, [pc], #-3694	; 4e08 <__aeabi_lmul+0x3dc>
    4e04:	65706f20 	ldrbvs	r6, [r0, #-3872]!	; 0xfffff0e0
    4e08:	6374206e 	cmnvs	r4, #110	; 0x6e
    4e0c:	6e692076 	mcrvs	0, 3, r2, cr9, cr6, {3}
    4e10:	66726574 			; <UNDEFINED> instruction: 0x66726574
    4e14:	00656361 	rsbeq	r6, r5, r1, ror #6
    4e18:	72470a0d 	subvc	r0, r7, #53248	; 0xd000
    4e1c:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4e20:	44206425 	strtmi	r6, [r0], #-1061	; 0xfffffbdb
    4e24:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4e28:	25232065 	strcs	r2, [r3, #-101]!	; 0xffffff9b
    4e2c:	25282064 	strcs	r2, [r8, #-100]!	; 0xffffff9c
    4e30:	64252f64 	strtvs	r2, [r5], #-3940	; 0xfffff09c
    4e34:	63657220 	cmnvs	r5, #32, 4
    4e38:	7364726f 	cmnvc	r4, #-268435450	; 0xf0000006
    4e3c:	280a0d29 	stmdacs	sl, {r0, r3, r5, r8, sl, fp}
    4e40:	6f722947 	svcvs	0x00722947
    4e44:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    4e48:	280a0d44 	stmdacs	sl, {r2, r6, r8, sl, fp}
    4e4c:	7765294e 	strbvc	r2, [r5, -lr, asr #18]!
    4e50:	76656420 	strbtvc	r6, [r5], -r0, lsr #8
    4e54:	20656369 	rsbcs	r6, r5, r9, ror #6
    4e58:	0a0d4449 	beq	355f84 <__ccfg+0x335fdc>
    4e5c:	69294628 	stmdbvs	r9!, {r3, r5, r9, sl, lr}
    4e60:	6e20646e 	cdpvs	4, 2, cr6, cr0, cr14, {3}
    4e64:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4e68:	73726f62 	cmnvc	r2, #392	; 0x188
    4e6c:	43280a0d 			; <UNDEFINED> instruction: 0x43280a0d
    4e70:	61657229 	cmnvs	r5, r9, lsr #4
    4e74:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4e78:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4e7c:	6e6f2064 	cdpvs	0, 6, cr2, cr15, cr4, {3}
    4e80:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4e84:	6f626867 	svcvs	0x00626867
    4e88:	280a0d72 	stmdacs	sl, {r1, r4, r5, r6, r8, sl, fp}
    4e8c:	6c652944 			; <UNDEFINED> instruction: 0x6c652944
    4e90:	20657465 	rsbcs	r7, r5, r5, ror #8
    4e94:	6f636572 	svcvs	0x00636572
    4e98:	6f206472 	svcvs	0x00206472
    4e9c:	656e206e 	strbvs	r2, [lr, #-110]!	; 0xffffff92
    4ea0:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    4ea4:	0a0d726f 	beq	361868 <__ccfg+0x3418c0>
    4ea8:	65295228 	strvs	r5, [r9, #-552]!	; 0xfffffdd8
    4eac:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
    4eb0:	72206576 	eorvc	r6, r0, #494927872	; 0x1d800000
    4eb4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4eb8:	72662064 	rsbvc	r2, r6, #100	; 0x64
    4ebc:	6e206d6f 	cdpvs	13, 2, cr6, cr0, cr15, {3}
    4ec0:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4ec4:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    4ec8:	2953280a 	ldmdbcs	r3, {r1, r3, fp, sp}^
    4ecc:	20776f68 	rsbscs	r6, r7, r8, ror #30
    4ed0:	61636f6c 	cmnvs	r3, ip, ror #30
    4ed4:	6572206c 	ldrbvs	r2, [r2, #-108]!	; 0xffffff94
    4ed8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4edc:	520a0d73 	andpl	r0, sl, #7360	; 0x1cc0
    4ee0:	73296528 			; <UNDEFINED> instruction: 0x73296528
    4ee4:	6c207465 	cfstrsvs	mvf7, [r0], #-404	; 0xfffffe6c
    4ee8:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4eec:	6f747320 	svcvs	0x00747320
    4ef0:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4ef4:	0a0d0a0d 	beq	347730 <__ccfg+0x327788>
    4ef8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    4efc:	6f697463 	svcvs	0x00697463
    4f00:	00203a6e 	eoreq	r3, r0, lr, ror #20
    4f04:	50006325 	andpl	r6, r0, r5, lsr #6
    4f08:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4f0c:	72702065 	rsbsvc	r2, r0, #101	; 0x65
    4f10:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
    4f14:	20612065 	rsbcs	r2, r1, r5, rrx
    4f18:	2077656e 	rsbscs	r6, r7, lr, ror #10
    4f1c:	756f7267 	strbvc	r7, [pc, #-615]!	; 4cbd <__aeabi_lmul+0x291>
    4f20:	44492070 	strbmi	r2, [r9], #-112	; 0xffffff90
    4f24:	00203a23 	eoreq	r3, r0, r3, lsr #20
    4f28:	73007525 	movwvc	r7, #1317	; 0x525
    4f2c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4f30:	6e20676e 	cdpvs	7, 2, cr6, cr0, cr14, {3}
    4f34:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4f38:	756f7267 	strbvc	r7, [pc, #-615]!	; 4cd9 <__aeabi_lmul+0x2ad>
    4f3c:	44492070 	strbmi	r2, [r9], #-112	; 0xffffff90
    4f40:	500a0d00 	andpl	r0, sl, r0, lsl #26
    4f44:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4f48:	72702065 	rsbsvc	r2, r0, #101	; 0x65
    4f4c:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
    4f50:	20612065 	rsbcs	r2, r1, r5, rrx
    4f54:	2077656e 	rsbscs	r6, r7, lr, ror #10
    4f58:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4f5c:	23444920 	movtcs	r4, #18720	; 0x4920
    4f60:	2d312820 	ldccs	8, cr2, [r1, #-128]!	; 0xffffff80
    4f64:	69203532 	stmdbvs	r0!, {r1, r4, r5, r8, sl, ip, sp}
    4f68:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4f6c:	65766973 	ldrbvs	r6, [r6, #-2419]!	; 0xfffff68d
    4f70:	00203a29 	eoreq	r3, r0, r9, lsr #20
    4f74:	2074754f 	rsbscs	r7, r4, pc, asr #10
    4f78:	5220666f 	eorpl	r6, r0, #116391936	; 0x6f00000
    4f7c:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
    4f80:	20444900 	subcs	r4, r4, r0, lsl #18
    4f84:	61207369 			; <UNDEFINED> instruction: 0x61207369
    4f88:	6165726c 	cmnvs	r5, ip, ror #4
    4f8c:	69207964 	stmdbvs	r0!, {r2, r5, r6, r8, fp, ip, sp, lr}
    4f90:	7375206e 	cmnvc	r5, #110	; 0x6e
    4f94:	0a0d0065 	beq	345130 <__ccfg+0x325188>
    4f98:	3a234449 	bcc	8d60c4 <__ccfg+0x8b611c>
    4f9c:	2c752520 	cfldr64cs	mvdx2, [r5], #-128	; 0xffffff80
    4fa0:	20736920 	rsbscs	r6, r3, r0, lsr #18
    4fa4:	69206e61 	stmdbvs	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
    4fa8:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    4fac:	63206469 			; <UNDEFINED> instruction: 0x63206469
    4fb0:	63696f68 	cmnvs	r9, #104, 30	; 0x1a0
    4fb4:	52202e65 	eorpl	r2, r0, #1616	; 0x650
    4fb8:	6f736165 	svcvs	0x00736165
    4fbc:	25203a6e 	strcs	r3, [r0, #-2670]!	; 0xfffff592
    4fc0:	45002e73 	strmi	r2, [r0, #-3699]	; 0xfffff18d
    4fc4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    4fc8:	656c4320 	strbvs	r4, [ip, #-800]!	; 0xfffffce0
    4fcc:	6e697261 	cdpvs	2, 6, cr7, cr9, cr1, {3}
    4fd0:	6f4e2067 	svcvs	0x004e2067
    4fd4:	41206564 			; <UNDEFINED> instruction: 0x41206564
    4fd8:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
    4fdc:	4e0a0d00 	cdpmi	13, 0, cr0, cr10, cr0, {0}
    4fe0:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4fe4:	73726f62 	cmnvc	r2, #392	; 0x188
    4fe8:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    4fec:	00202c75 	eoreq	r2, r0, r5, ror ip
    4ff0:	61656c50 	cmnvs	r5, r0, asr ip
    4ff4:	70206573 	eorvc	r6, r0, r3, ror r5
    4ff8:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4ffc:	61206564 			; <UNDEFINED> instruction: 0x61206564
    5000:	646f6e20 	strbtvs	r6, [pc], #-3616	; 5008 <__aeabi_lmul+0x5dc>
    5004:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    5008:	2d302820 	ldccs	8, cr2, [r0, #-128]!	; 0xffffff80
    500c:	3a293532 	bcc	a524dc <__ccfg+0xa32534>
    5010:	72450020 	subvc	r0, r5, #32
    5014:	3a726f72 	bcc	1ca0de4 <__ccfg+0x1c80e3c>
    5018:	706d6920 	rsbvc	r6, sp, r0, lsr #18
    501c:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xfffff08e
    5020:	44492072 	strbmi	r2, [r9], #-114	; 0xffffff8e
    5024:	656c5000 	strbvs	r5, [ip, #-0]!
    5028:	20657361 	rsbcs	r7, r5, r1, ror #6
    502c:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    5030:	20656469 	rsbcs	r6, r5, r9, ror #8
    5034:	65722061 	ldrbvs	r2, [r2, #-97]!	; 0xffffff9f
    5038:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    503c:	656c2820 	strbvs	r2, [ip, #-2080]!	; 0xfffff7e0
    5040:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    5044:	203d3c20 	eorscs	r3, sp, r0, lsr #24
    5048:	3a293032 	bcc	a51118 <__ccfg+0xa31170>
    504c:	72450020 	subvc	r0, r5, #32
    5050:	3a726f72 	bcc	1ca0e20 <__ccfg+0x1c80e78>
    5054:	706d6920 	rsbvc	r6, sp, r0, lsr #18
    5058:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xfffff08e
    505c:	6f6e2072 	svcvs	0x006e2072
    5060:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    5064:	6c500044 	mrrcvs	0, 4, r0, r0, cr4	; <UNPREDICTABLE>
    5068:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    506c:	6f727020 	svcvs	0x00727020
    5070:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    5074:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
    5078:	63657220 	cmnvs	r5, #32, 4
    507c:	2064726f 	rsbcs	r7, r4, pc, ror #4
    5080:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
    5084:	30282078 	eorcc	r2, r8, r8, ror r0
    5088:	2930342d 	ldmdbcs	r0!, {r0, r2, r3, r5, sl, ip, sp}
    508c:	4500203a 	strmi	r2, [r0, #-58]	; 0xffffffc6
    5090:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    5094:	6e69203a 	mcrvs	0, 3, r2, cr9, cr10, {1}
    5098:	696c6176 	stmdbvs	ip!, {r1, r2, r4, r5, r6, r8, sp, lr}^
    509c:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    50a0:	00786564 	rsbseq	r6, r8, r4, ror #10
    50a4:	65720a0d 	ldrbvs	r0, [r2, #-2573]!	; 0xfffff5f3
    50a8:	44492074 	strbmi	r2, [r9], #-116	; 0xffffff8c
    50ac:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    50b0:	490a0d00 	stmdbmi	sl, {r8, sl, fp}
    50b4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    50b8:	6d695409 	cfstrdvs	mvd5, [r9, #-36]!	; 0xffffffdc
    50bc:	74532065 	ldrbvc	r2, [r3], #-101	; 0xffffff9b
    50c0:	09706d61 	ldmdbeq	r0!, {r0, r5, r6, r8, sl, fp, sp, lr}^
    50c4:	6e774f09 	cdpvs	15, 7, cr4, cr7, cr9, {0}
    50c8:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
    50cc:	65520944 	ldrbvs	r0, [r2, #-2372]	; 0xfffff6bc
    50d0:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    50d4:	74614420 	strbtvc	r4, [r1], #-1056	; 0xfffffbe0
    50d8:	0a0d0061 	beq	345264 <__ccfg+0x3252bc>
    50dc:	25096425 	strcs	r6, [r9, #-1061]	; 0xfffffbdb
    50e0:	09090975 	stmdbeq	r9, {r0, r2, r4, r5, r6, r8, fp}
    50e4:	25097525 	strcs	r7, [r9, #-1317]	; 0xfffffadb
    50e8:	0a0d0073 	beq	3452bc <__ccfg+0x325314>
    50ec:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
    50f0:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
    50f4:	6572206f 	ldrbvs	r2, [r2, #-111]!	; 0xffffff91
    50f8:	20686361 	rsbcs	r6, r8, r1, ror #6
    50fc:	20656874 	rsbcs	r6, r5, r4, ror r8
    5100:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    5104:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
    5108:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    510c:	72450a0d 	subvc	r0, r5, #53248	; 0xd000
    5110:	3a726f72 	bcc	1ca0ee0 <__ccfg+0x1c80f38>
    5114:	00732520 	rsbseq	r2, r3, r0, lsr #10
    5118:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    511c:	203a5252 	eorscs	r5, sl, r2, asr r2
    5120:	202c7825 	eorcs	r7, ip, r5, lsr #16
    5124:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    5128:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    512c:	50006961 	andpl	r6, r0, r1, ror #18
    5130:	534f6369 	movtpl	r6, #62313	; 0xf369
    5134:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    5138:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    513c:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    5140:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    5144:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5148:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    514c:	434e5541 	movtmi	r5, #58689	; 0xe541
    5150:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    5154:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    5158:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    515c:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    5160:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 50e8 <__aeabi_lmul+0x6bc>
    5164:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    5168:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    516c:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    5170:	30303220 	eorscc	r3, r0, r0, lsr #4
    5174:	30322d32 	eorscc	r2, r2, r2, lsr sp
    5178:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    517c:	6f746665 	svcvs	0x00746665
    5180:	20726576 	rsbscs	r6, r2, r6, ror r5
    5184:	3a4d4152 	bcc	13556d4 <__ccfg+0x133572c>
    5188:	20642520 	rsbcs	r2, r4, r0, lsr #10
    518c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    5190:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    5194:	63695000 	cmnvs	r9, #0
    5198:	6820534f 	stmdavs	r0!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
    519c:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
    51a0:	00000064 	andeq	r0, r0, r4, rrx

000051a4 <port_confs>:
    51a4:	00306080 	eorseq	r6, r0, r0, lsl #1
    51a8:	00386080 	eorseq	r6, r8, r0, lsl #1
    51ac:	00186010 	andseq	r6, r8, r0, lsl r0
    51b0:	2010400f 	andscs	r4, r0, pc
    51b4:	30694000 	rsbcc	r4, r9, r0
    51b8:	30714000 	rsbscc	r4, r1, r0
    51bc:	00b86008 	adcseq	r6, r8, r8
    51c0:	60c94000 	sbcvs	r4, r9, r0
    51c4:	60d14000 	sbcsvs	r4, r1, r0
    51c8:	60d94000 	sbcsvs	r4, r9, r0
    51cc:	60e14000 	rscvs	r4, r1, r0
    51d0:	00096380 	andeq	r6, r9, r0, lsl #7
    51d4:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    51d8:	20402000 	subcs	r2, r0, r0
    51dc:	00486080 	subeq	r6, r8, r0, lsl #1
    51e0:	00506080 	subseq	r6, r0, r0, lsl #1
    51e4:	00a06000 	adceq	r6, r0, r0
    51e8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    51ec:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    51f0:	73006120 	movwvc	r6, #288	; 0x120
    51f4:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    51f8:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    51fc:	616d006f 	cmnvs	sp, pc, rrx
    5200:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    5204:	00676c61 	rsbeq	r6, r7, r1, ror #24
    5208:	0069706b 	rsbeq	r7, r9, fp, rrx
    520c:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

00005211 <__pi_hex_enc_table>:
    5211:	33323130 	teqcc	r2, #48, 2
    5215:	37363534 			; <UNDEFINED> instruction: 0x37363534
    5219:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    521d:	46454443 	strbmi	r4, [r5], -r3, asr #8
    5221:	30766374 	rsbscc	r6, r6, r4, ror r3
    5225:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    5229:	736f7073 	cmnvc	pc, #115	; 0x73
    522d:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    5231:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    5235:	736f7073 	cmnvc	pc, #115	; 0x73
    5239:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    523d:	63740079 	cmnvs	r4, #121	; 0x79
    5241:	00323076 	eorseq	r3, r2, r6, ror r0
    5245:	30766374 	rsbscc	r6, r6, r4, ror r3
    5249:	63740033 	cmnvs	r4, #51	; 0x33
    524d:	00343076 	eorseq	r3, r4, r6, ror r0
    5251:	30766374 	rsbscc	r6, r6, r4, ror r3
    5255:	63740035 	cmnvs	r4, #53	; 0x35
    5259:	00363076 	eorseq	r3, r6, r6, ror r0
    525d:	31766374 	cmncc	r6, r4, ror r3
    5261:	63740030 	cmnvs	r4, #48	; 0x30
    5265:	00313176 	eorseq	r3, r1, r6, ror r1
    5269:	31766374 	cmncc	r6, r4, ror r3
    526d:	63740036 	cmnvs	r4, #54	; 0x36
    5271:	00373176 	eorseq	r3, r7, r6, ror r1
    5275:	31766374 	cmncc	r6, r4, ror r3
    5279:	63740038 	cmnvs	r4, #56	; 0x38
    527d:	00333276 	eorseq	r3, r3, r6, ror r2
    5281:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    5285:	63740032 	cmnvs	r4, #50	; 0x32
    5289:	00363276 	eorseq	r3, r6, r6, ror r2
    528d:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    5291:	63740037 	cmnvs	r4, #55	; 0x37
    5295:	00383276 	eorseq	r3, r8, r6, ror r2
    5299:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    529d:	63740039 	cmnvs	r4, #57	; 0x39
    52a1:	00303376 	eorseq	r3, r0, r6, ror r3
    52a5:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    52a9:	63740031 	cmnvs	r4, #49	; 0x31
    52ad:	00323376 	eorseq	r3, r2, r6, ror r3
    52b1:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    52b5:	63740033 	cmnvs	r4, #51	; 0x33
    52b9:	00343376 	eorseq	r3, r4, r6, ror r3

000052bd <__input_pins>:
    52bd:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

000052c2 <__button_list>:
    52c2:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    52c6:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    52ca:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    52ce:	00317472 	eorseq	r7, r1, r2, ror r4
    52d2:	20505548 	subscs	r5, r0, r8, asr #10
    52d6:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    52da:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    52de:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    52e2:	30636920 	rsbcc	r6, r3, r0, lsr #18
    52e6:	50554800 	subspl	r4, r5, r0, lsl #16
    52ea:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    52ee:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    52f2:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    52f6:	32747200 	rsbscc	r7, r4, #0, 4
    52fa:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    52fe:	00585220 	subseq	r5, r8, r0, lsr #4
    5302:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    5306:	00797020 	rsbseq	r7, r9, r0, lsr #32
    530a:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    530e:	31636300 	cmncc	r3, r0, lsl #6
    5312:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    5316:	31434300 	mrscc	r4, (UNDEF: 115)
    531a:	3a303533 	bcc	c127ee <__ccfg+0xbf2846>
    531e:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    5322:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    5326:	00642520 	rsbeq	r2, r4, r0, lsr #10

0000532a <patable>:
    532a:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    532e:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    5332:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    5336:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

0000533c <patchGenfskRfe>:
    533c:	000061a3 	andeq	r6, r0, r3, lsr #3
    5340:	1307147f 	movwne	r1, #29823	; 0x747f
    5344:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    5348:	3f131f2e 	svccc	0x00131f2e
    534c:	003f0ab0 	ldrhteq	r0, [pc], -r0
    5350:	0000ff07 	andeq	pc, r0, r7, lsl #30
    5354:	40004030 	andmi	r4, r0, r0, lsr r0
    5358:	40034001 	andmi	r4, r3, r1
    535c:	400f4007 	andmi	r4, pc, r7
    5360:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    5364:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    5368:	4fcf47cf 	svcmi	0x00cf47cf
    536c:	2fcf3fcf 	svccs	0x00cf3fcf
    5370:	0fcf1fcf 	svceq	0x00cf1fcf
    5374:	00000000 	andeq	r0, r0, r0
    5378:	0008000f 	andeq	r0, r8, pc
    537c:	003f0000 	eorseq	r0, pc, r0
    5380:	00400000 	subeq	r0, r0, r0
    5384:	0000003f 	andeq	r0, r0, pc, lsr r0
    5388:	00680004 	rsbeq	r0, r8, r4
    538c:	00dc000e 	sbcseq	r0, ip, lr
    5390:	00430006 	subeq	r0, r3, r6
    5394:	0005001a 	andeq	r0, r5, sl, lsl r0
    5398:	00000000 	andeq	r0, r0, r0
    539c:	00000002 	andeq	r0, r0, r2
    53a0:	0000003f 	andeq	r0, r0, pc, lsr r0
    53a4:	00040000 	andeq	r0, r4, r0
    53a8:	000000c0 	andeq	r0, r0, r0, asr #1
    53ac:	00c00004 	sbceq	r0, r0, r4
    53b0:	00070000 	andeq	r0, r7, r0
    53b4:	9100c050 	qaddls	ip, r0, r0
    53b8:	c0707000 	rsbsgt	r7, r0, r0
    53bc:	70009100 	andvc	r9, r0, r0, lsl #2
    53c0:	00213182 	eoreq	r3, r1, r2, lsl #3
    53c4:	b1109131 	tstlt	r0, r1, lsr r1
    53c8:	81017000 	mrshi	r7, (UNDEF: 1)
    53cc:	a100b101 	tstge	r0, r1, lsl #2
    53d0:	91323182 	teqls	r2, r2, lsl #3
    53d4:	9101b110 	tstls	r1, r0, lsl r1
    53d8:	81411011 	cmphi	r1, r1, lsl r0
    53dc:	404f2241 	submi	r2, pc, r1, asr #4
    53e0:	700006f1 	strdvc	r0, [r0], -r1
    53e4:	9101c051 	qaddls	ip, r1, r1
    53e8:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    53ec:	d0083183 	andle	r3, r8, r3, lsl #3
    53f0:	6f413118 	svcvs	0x00413118
    53f4:	91310031 	teqls	r1, r1, lsr r0
    53f8:	1483b110 	strne	fp, [r3], #272	; 0x110
    53fc:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    5400:	10257000 	eorne	r7, r5, r0
    5404:	9100c050 	qaddls	ip, r0, r0
    5408:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    540c:	6f031420 	svcvs	0x00031420
    5410:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5414:	3182c022 	orrcc	ip, r2, r2, lsr #32
    5418:	91310021 	teqls	r1, r1, lsr #32
    541c:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    5420:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5424:	3182c082 	orrcc	ip, r2, r2, lsl #1
    5428:	91310021 	teqls	r1, r1, lsr #32
    542c:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    5430:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    5434:	00213182 	eoreq	r3, r1, r2, lsl #3
    5438:	b1109131 	tstlt	r0, r1, lsr r1
    543c:	31151050 	tstcc	r5, r0, asr r0
    5440:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    5444:	643f7000 	ldrtvs	r7, [pc], #-0	; 544c <patchGenfskRfe+0x110>
    5448:	1031c052 	eorsne	ip, r1, r2, asr r0
    544c:	31610631 	cmncc	r1, r1, lsr r6
    5450:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    5454:	1031c112 	eorsne	ip, r1, r2, lsl r1
    5458:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    545c:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    5460:	70006442 	andvc	r6, r0, r2, asr #8
    5464:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    5468:	8220c088 	eorhi	ip, r0, #136	; 0x88
    546c:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    5470:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    5474:	3001c041 	andcc	ip, r1, r1, asr #32
    5478:	1a181418 	bne	60a4e0 <__ccfg+0x5ea538>
    547c:	8230c089 	eorshi	ip, r0, #137	; 0x89
    5480:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    5484:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    5488:	3001c041 	andcc	ip, r1, r1, asr #32
    548c:	1a191419 	bne	64a4f8 <__ccfg+0x62a550>
    5490:	9136643c 	teqls	r6, ip, lsr r4
    5494:	9134b110 	teqls	r4, r0, lsl r1
    5498:	b054b110 	subslt	fp, r4, r0, lsl r1
    549c:	a0547100 	subsge	r7, r4, r0, lsl #2
    54a0:	80f0b064 	rscshi	fp, r0, r4, rrx
    54a4:	40af2200 	adcmi	r2, pc, r0, lsl #4
    54a8:	90b01240 	adcsls	r1, r0, r0, asr #4
    54ac:	8253b032 	subshi	fp, r3, #50	; 0x32
    54b0:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    54b4:	643f6485 	ldrtvs	r6, [pc], #-1157	; 54bc <patchGenfskRfe+0x180>
    54b8:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    54bc:	c1706442 	cmngt	r0, r2, asr #8
    54c0:	c11168c2 	tstgt	r1, r2, asr #17
    54c4:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    54c8:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    54cc:	9100c050 	qaddls	ip, r0, r0
    54d0:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    54d4:	16141615 			; <UNDEFINED> instruction: 0x16141615
    54d8:	10531042 	subsne	r1, r3, r2, asr #32
    54dc:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    54e0:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    54e4:	31313981 	teqcc	r1, r1, lsl #19
    54e8:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    54ec:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    54f0:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    54f4:	10731062 	rsbsne	r1, r3, r2, rrx
    54f8:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    54fc:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    5500:	101b3981 	andsne	r3, fp, r1, lsl #19
    5504:	c0e26572 	rscgt	r6, r2, r2, ror r5
    5508:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    550c:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    5510:	b0610002 	rsblt	r0, r1, r2
    5514:	91327100 	teqls	r2, r0, lsl #2
    5518:	a051b110 	subsge	fp, r1, r0, lsl r1
    551c:	7227b061 	eorvc	fp, r7, #97	; 0x61
    5520:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    5524:	12800000 	addne	r0, r0, #0
    5528:	b03290b0 	ldrhtlt	r9, [r2], -r0
    552c:	c0507000 	subsgt	r7, r0, r0
    5530:	72279100 	eorvc	r9, r7, #0, 2
    5534:	10629299 	mlsne	r2, r9, r2, r9
    5538:	c3f01073 	mvnsgt	r1, #115	; 0x73
    553c:	31218231 			; <UNDEFINED> instruction: 0x31218231
    5540:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    5544:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    5548:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    554c:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    5550:	10531042 	subsne	r1, r3, r2, asr #32
    5554:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    5558:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    555c:	31313981 	teqcc	r1, r1, lsl #19
    5560:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    5564:	b061a051 	rsblt	sl, r1, r1, asr r0
    5568:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    556c:	643f6918 	ldrtvs	r6, [pc], #-2328	; 5574 <patchGenfskRfe+0x238>
    5570:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    5574:	c1016442 	tstgt	r1, r2, asr #8
    5578:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    557c:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    5580:	b1109135 	tstlt	r0, r5, lsr r1
    5584:	64858253 	strvs	r8, [r5], #595	; 0x253
    5588:	90b012c0 	adcsls	r1, r0, r0, asr #5
    558c:	7000b032 	andvc	fp, r0, r2, lsr r0
    5590:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    5594:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    5598:	c111c122 	tstgt	r1, r2, lsr #2
    559c:	c0026442 	andgt	r6, r2, r2, asr #8
    55a0:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    55a4:	c331c062 	teqgt	r1, #98	; 0x62
    55a8:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    55ac:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    55b0:	c111c302 	tstgt	r1, r2, lsl #6
    55b4:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    55b8:	64853953 	strvs	r3, [r5], #2387	; 0x953
    55bc:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    55c0:	41402211 	cmpmi	r0, r1, lsl r2
    55c4:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    55c8:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    55cc:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    55d0:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    55d4:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    55d8:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    55dc:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    55e0:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    55e4:	70006954 	andvc	r6, r0, r4, asr r9
    55e8:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    55ec:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    55f0:	c011c252 	andsgt	ip, r1, r2, asr r2
    55f4:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    55f8:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    55fc:	c101c002 	tstgt	r1, r2
    5600:	c0626442 	rsbgt	r6, r2, r2, asr #8
    5604:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    5608:	c101c122 	tstgt	r1, r2, lsr #2
    560c:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    5610:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    5614:	c101c302 	tstgt	r1, r2, lsl #6
    5618:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    561c:	70006485 	andvc	r6, r0, r5, lsl #9
    5620:	7100b061 	tstvc	r0, r1, rrx
    5624:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    5628:	91334d7a 	teqls	r3, sl, ror sp
    562c:	7000b110 	andvc	fp, r0, r0, lsl r1
    5630:	b1109132 	tstlt	r0, r2, lsr r1
    5634:	70006972 	andvc	r6, r0, r2, ror r9
    5638:	7100b061 	tstvc	r0, r1, rrx
    563c:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    5640:	91324986 	teqls	r2, r6, lsl #19
    5644:	7000b110 	andvc	fp, r0, r0, lsl r1
    5648:	b1109133 	tstlt	r0, r3, lsr r1
    564c:	7000697e 	andvc	r6, r0, lr, ror r9
    5650:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    5654:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    5658:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    565c:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    5660:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    5664:	10541405 	subsne	r1, r4, r5, lsl #8
    5668:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    566c:	c0e67000 	rscgt	r7, r6, r0
    5670:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    5674:	10671416 	rsbne	r1, r7, r6, lsl r4
    5678:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    567c:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    5680:	73067000 	movwvc	r7, #24576	; 0x6000
    5684:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    5688:	b050720e 	subslt	r7, r0, lr, lsl #4
    568c:	80817100 	addhi	r7, r1, r0, lsl #2
    5690:	a050b060 	subsge	fp, r0, r0, rrx
    5694:	22418092 	subcs	r8, r1, #146	; 0x92
    5698:	808045c3 	addhi	r4, r0, r3, asr #11
    569c:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    56a0:	11011630 	tstne	r1, r0, lsr r6
    56a4:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    56a8:	61d761d6 	ldrsbvs	r6, [r7, #22]
    56ac:	61d961d8 	ldrsbvs	r6, [r9, #24]
    56b0:	61db61da 	ldrsbvs	r6, [fp, #26]
    56b4:	61de61dc 	ldrsbvs	r6, [lr, #28]
    56b8:	61e261e0 	mvnvs	r6, r0, ror #3
    56bc:	633661e4 	teqvs	r6, #228, 2	; 0x39
    56c0:	80916339 	addshi	r6, r1, r9, lsr r3
    56c4:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    56c8:	80823121 	addhi	r3, r2, r1, lsr #2
    56cc:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    56d0:	11011632 	tstne	r1, r2, lsr r6
    56d4:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    56d8:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    56dc:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    56e0:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    56e4:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    56e8:	61e661e6 	mvnvs	r6, r6, ror #3
    56ec:	61e661e6 	mvnvs	r6, r6, ror #3
    56f0:	61e661e6 	mvnvs	r6, r6, ror #3
    56f4:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    56f8:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    56fc:	61e6652a 	mvnvs	r6, sl, lsr #10
    5700:	61e66556 	mvnvs	r6, r6, asr r5
    5704:	61e66746 	mvnvs	r6, r6, asr #14
    5708:	90b01210 	adcsls	r1, r0, r0, lsl r2
    570c:	7306720e 	movwvc	r7, #25102	; 0x620e
    5710:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    5714:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    5718:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    571c:	c003c1d4 	ldrdgt	ip, [r3], -r4
    5720:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    5724:	91507840 	cmpls	r0, r0, asr #16
    5728:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    572c:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    5730:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    5734:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    5738:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    573c:	91907830 	orrsls	r7, r0, r0, lsr r8
    5740:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    5744:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    5748:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    574c:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    5750:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    5754:	a054a0e2 	subsge	sl, r4, r2, ror #1
    5758:	225080f0 	subscs	r8, r0, #240	; 0xf0
    575c:	80404615 	subhi	r4, r0, r5, lsl r6
    5760:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    5764:	a040620d 	subge	r6, r0, sp, lsl #4
    5768:	318d822d 	orrcc	r8, sp, sp, lsr #4
    576c:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    5770:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    5774:	821a1009 	andshi	r1, sl, #9
    5778:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    577c:	39808210 	stmibcc	r0, {r4, r9, pc}
    5780:	100e0410 	andne	r0, lr, r0, lsl r4
    5784:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    5788:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    578c:	cfe07229 	svcgt	0x00e07229
    5790:	b013673c 	andslt	r6, r3, ip, lsr r7
    5794:	66c8b003 	strbvs	fp, [r8], r3
    5798:	b050b053 	subslt	fp, r0, r3, asr r0
    579c:	b064b054 	rsblt	fp, r4, r4, asr r0
    57a0:	66a5b013 	ssatvs	fp, #6, r3
    57a4:	22e08210 	rsccs	r8, r0, #16, 4
    57a8:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    57ac:	80417100 	subhi	r7, r1, r0, lsl #2
    57b0:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    57b4:	221080f0 	andscs	r8, r0, #240	; 0xf0
    57b8:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    57bc:	b0644718 	rsblt	r4, r4, r8, lsl r7
    57c0:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    57c4:	66ceb063 	strbvs	fp, [lr], r3, rrx
    57c8:	22e08210 	rsccs	r8, r0, #16, 4
    57cc:	66704638 			; <UNDEFINED> instruction: 0x66704638
    57d0:	b0646238 	rsblt	r6, r4, r8, lsr r2
    57d4:	318f816f 	orrcc	r8, pc, pc, ror #2
    57d8:	dfd03d8f 	svcle	0x00d03d8f
    57dc:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    57e0:	80417100 	subhi	r7, r1, r0, lsl #2
    57e4:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    57e8:	80f0b064 	rscshi	fp, r0, r4, rrx
    57ec:	42652250 	rsbmi	r2, r5, #80, 4
    57f0:	8211b063 	andshi	fp, r1, #99	; 0x63
    57f4:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    57f8:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    57fc:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    5800:	66704652 			; <UNDEFINED> instruction: 0x66704652
    5804:	81616252 	cmnhi	r1, r2, asr r2
    5808:	31818172 	orrcc	r8, r1, r2, ror r1
    580c:	31823d81 	orrcc	r3, r2, r1, lsl #27
    5810:	efc03d82 	svc	0x00c03d82
    5814:	930292f1 	movwls	r9, #8945	; 0x22f1
    5818:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    581c:	91c081b0 	strhls	r8, [r0, #16]
    5820:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    5824:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    5828:	0bf34e7f 	bleq	ffcd922c <_estack+0xdfcd422c>
    582c:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    5830:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    5834:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    5838:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    583c:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    5840:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    5844:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    5848:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    584c:	1a1ba290 	bne	6ee294 <__ccfg+0x6ce2ec>
    5850:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    5854:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    5858:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    585c:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    5860:	4aa21c9b 	bmi	fe88cad4 <_estack+0xde887ad4>
    5864:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    5868:	821010b2 	andshi	r1, r0, #178	; 0xb2
    586c:	429d22d0 	addsmi	r2, sp, #208, 4
    5870:	221080f0 	andscs	r8, r0, #240	; 0xf0
    5874:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    5878:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    587c:	629410ab 	addsvs	r1, r4, #171	; 0xab
    5880:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    5884:	82307000 	eorshi	r7, r0, #0
    5888:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    588c:	7100b063 	tstvc	r0, r3, rrx
    5890:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    5894:	7000b0e0 	andvc	fp, r0, r0, ror #1
    5898:	91c281b2 	strhls	r8, [r2, #18]
    589c:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    58a0:	81511812 	cmphi	r1, r2, lsl r8
    58a4:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    58a8:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    58ac:	4abf1c12 	bmi	fefcc8fc <_estack+0xdefc78fc>
    58b0:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    58b4:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    58b8:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    58bc:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    58c0:	9162c812 	cmnls	r2, r2, lsl r8
    58c4:	b0319172 	eorslt	r9, r1, r2, ror r1
    58c8:	7000b0e1 	andvc	fp, r0, r1, ror #1
    58cc:	c006c008 	andgt	ip, r6, r8
    58d0:	9160c800 	cmnls	r0, r0, lsl #16
    58d4:	70009170 	andvc	r9, r0, r0, ror r1
    58d8:	81b08201 	lslshi	r8, r1, #4
    58dc:	81d091c0 	bicshi	r9, r0, r0, asr #3
    58e0:	81511810 	cmphi	r1, r0, lsl r8
    58e4:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    58e8:	824280e1 	subhi	r8, r2, #225	; 0xe1
    58ec:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    58f0:	4ae41c20 	bmi	ff90c978 <_estack+0xdf907978>
    58f4:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    58f8:	b03246e8 	eorslt	r4, r2, r8, ror #13
    58fc:	dfa01005 	svcle	0x00a01005
    5900:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    5904:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    5908:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    590c:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    5910:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    5914:	42f61e01 	rscsmi	r1, r6, #1, 28
    5918:	c0101618 	andsgt	r1, r0, r8, lsl r6
    591c:	1c083010 	stcne	0, cr3, [r8], {16}
    5920:	10604704 	rsbne	r4, r0, r4, lsl #14
    5924:	10063c10 	andne	r3, r6, r0, lsl ip
    5928:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    592c:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    5930:	81719166 	cmnhi	r1, r6, ror #2
    5934:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    5938:	4b011c16 	blmi	4c998 <__ccfg+0x2c9f0>
    593c:	b0319176 	eorslt	r9, r1, r6, ror r1
    5940:	c008c006 	andgt	ip, r8, r6
    5944:	81617000 	cmnhi	r1, r0
    5948:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    594c:	39808240 	stmibcc	r0, {r6, r9, pc}
    5950:	1cf11801 	ldclne	8, cr1, [r1], #4
    5954:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    5958:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    595c:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    5960:	ef90b033 	svc	0x0090b033
    5964:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    5968:	7000673c 	andvc	r6, r0, ip, lsr r7
    596c:	b063a003 	rsblt	sl, r3, r3
    5970:	b0efb064 	rsclt	fp, pc, r4, rrx
    5974:	71006556 	tstvc	r0, r6, asr r5
    5978:	22008040 	andcs	r8, r0, #64	; 0x40
    597c:	b064472b 	rsblt	r4, r4, fp, lsr #14
    5980:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    5984:	80407100 	subhi	r7, r0, r0, lsl #2
    5988:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    598c:	b003b064 	andlt	fp, r3, r4, rrx
    5990:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    5994:	31828162 	orrcc	r8, r2, r2, ror #2
    5998:	ef803d82 	svc	0x00803d82
    599c:	930292f1 	movwls	r9, #8945	; 0x22f1
    59a0:	a003673c 	andge	r6, r3, ip, lsr r7
    59a4:	61e66556 	mvnvs	r6, r6, asr r5
    59a8:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    59ac:	b05061e6 	subslt	r6, r0, r6, ror #3
    59b0:	61e67100 	mvnvs	r7, r0, lsl #2
    59b4:	82d092e0 	sbcshi	r9, r0, #224, 4
    59b8:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    59bc:	7000b2c0 	andvc	fp, r0, r0, asr #5
    59c0:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    59c4:	b0304359 	eorslt	r4, r0, r9, asr r3
    59c8:	3162c102 	cmncc	r2, r2, lsl #2
    59cc:	80a0c001 	adchi	ip, r0, r1
    59d0:	43521e00 	cmpmi	r2, #0, 28
    59d4:	435322f0 	cmpmi	r3, #240, 4
    59d8:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    59dc:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    59e0:	1a101020 	bne	409a68 <__ccfg+0x3e9ac0>
    59e4:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    59e8:	16121611 			; <UNDEFINED> instruction: 0x16121611
    59ec:	70006b54 	andvc	r6, r0, r4, asr fp

000059f0 <patchImageGenfsk>:
    59f0:	210004ad 	smlatbcs	r0, sp, r4, r0
    59f4:	21000449 	tstcs	r0, r9, asr #8
    59f8:	2100047d 	tstcs	r0, sp, ror r4
    59fc:	21000481 	smlabbcs	r0, r1, r4, r0
    5a00:	21000511 	tstcs	r0, r1, lsl r5
    5a04:	21000591 			; <UNDEFINED> instruction: 0x21000591
    5a08:	21000641 	tstcs	r0, r1, asr #12
    5a0c:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    5a10:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    5a14:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    5a18:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    5a1c:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    5a20:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    5a24:	d00b079b 	mulle	fp, fp, r7
    5a28:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    5a2c:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    5a30:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    5a34:	240f490e 	strcs	r4, [pc], #-2318	; 5a3c <patchImageGenfsk+0x4c>
    5a38:	43200224 			; <UNDEFINED> instruction: 0x43200224
    5a3c:	82c83160 	sbchi	r3, r8, #96, 2
    5a40:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    5a44:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    5a48:	2100026b 	tstcs	r0, fp, ror #4
    5a4c:	00004ce5 	andeq	r4, r0, r5, ror #25
    5a50:	e0014809 	and	r4, r1, r9, lsl #16
    5a54:	0c004808 	stceq	8, cr4, [r0], {8}
    5a58:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    5a5c:	2aff7822 	bcs	fffe3aec <_estack+0xdffdeaec>
    5a60:	7acad101 	bvc	ff2b9e6c <_estack+0xdf2b4e6c>
    5a64:	31607022 	cmncc	r0, r2, lsr #32
    5a68:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    5a6c:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    5a70:	40086200 	andmi	r6, r8, r0, lsl #4
    5a74:	210006a4 	smlatbcs	r0, r4, r6, r0
    5a78:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    5a7c:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    5a80:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    5a84:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    5a88:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    5a8c:	4a11d006 	bmi	479aac <__ccfg+0x459b04>
    5a90:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    5a94:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    5a98:	e000480f 	and	r4, r0, pc, lsl #16
    5a9c:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    5aa0:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    5aa4:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    5aa8:	dcf92c00 	ldclle	12, cr2, [r9]
    5aac:	200140e3 	andcs	r4, r1, r3, ror #1
    5ab0:	18180340 	ldmdane	r8, {r6, r8, r9}
    5ab4:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    5ab8:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    5abc:	31802300 	orrcc	r2, r0, r0, lsl #6
    5ac0:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    5ac4:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    5ac8:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    5acc:	316c4b04 	cmncc	ip, r4, lsl #22
    5ad0:	0000e7f6 	strdeq	lr, [r0], -r6
    5ad4:	00005c83 	andeq	r5, r0, r3, lsl #25
    5ad8:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    5adc:	230d8300 	movwcs	r8, #54016	; 0xd300
    5ae0:	21000674 	tstcs	r0, r4, ror r6
    5ae4:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    5ae8:	6b714605 	blvs	1c57304 <__ccfg+0x1c3735c>
    5aec:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    5af0:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    5af4:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    5af8:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    5afc:	7b00d00f 	blvc	39b40 <__ccfg+0x19b98>
    5b00:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    5b04:	4f152001 	svcmi	0x00152001
    5b08:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    5b0c:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    5b10:	09c18800 	stmibeq	r1, {fp, pc}^
    5b14:	d00407c9 	andle	r0, r4, r9, asr #15
    5b18:	7ac0e016 	bvc	ff03db78 <_estack+0xdf038b78>
    5b1c:	7b40e7f0 	blvc	103fae4 <__ccfg+0x101fb3c>
    5b20:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    5b24:	61cc6374 	bicvs	r6, ip, r4, ror r3
    5b28:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    5b2c:	2001d00c 	andcs	sp, r1, ip
    5b30:	6b310380 	blvs	c46938 <__ccfg+0xc26990>
    5b34:	d0012d00 	andle	r2, r1, r0, lsl #26
    5b38:	e0004301 	and	r4, r0, r1, lsl #6
    5b3c:	46084381 	strmi	r4, [r8], -r1, lsl #7
    5b40:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    5b44:	63483940 	movtvs	r3, #35136	; 0x8940
    5b48:	47b82000 	ldrmi	r2, [r8, r0]!
    5b4c:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    5b50:	21000280 	smlabbcs	r0, r0, r2, r0
    5b54:	21000088 	smlabbcs	r0, r8, r0, r0
    5b58:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    5b5c:	00003f7b 	andeq	r3, r0, fp, ror pc
    5b60:	40044040 	andmi	r4, r4, r0, asr #32
    5b64:	4a22b510 	bmi	8b2fac <__ccfg+0x893004>
    5b68:	61512100 	cmpvs	r1, r0, lsl #2
    5b6c:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    5b70:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    5b74:	4b204921 	blmi	818000 <__ccfg+0x7f8058>
    5b78:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    5b7c:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    5b80:	e0004313 	and	r4, r0, r3, lsl r3
    5b84:	634b4393 	movtvs	r4, #45971	; 0xb393
    5b88:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    5b8c:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    5b90:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    5b94:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    5b98:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    5b9c:	09c08800 	stmibeq	r0, {fp, pc}^
    5ba0:	d12207c0 	smlawtle	r2, r0, r7, r0
    5ba4:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    5ba8:	d11e2800 	tstle	lr, r0, lsl #16
    5bac:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    5bb0:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    5bb4:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    5bb8:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    5bbc:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    5bc0:	2008d213 	andcs	sp, r8, r3, lsl r2
    5bc4:	6a686160 	bvs	1a1e14c <__ccfg+0x19fe1a4>
    5bc8:	01400940 	cmpeq	r0, r0, asr #18
    5bcc:	4a0e6020 	bmi	39dc54 <__ccfg+0x37dcac>
    5bd0:	62d12100 	sbcsvs	r2, r1, #0, 2
    5bd4:	21024a0d 	tstcs	r2, sp, lsl #20
    5bd8:	21016011 	tstcs	r1, r1, lsl r0
    5bdc:	60204308 	eorvs	r4, r0, r8, lsl #6
    5be0:	43082103 	movwmi	r2, #33027	; 0x8103
    5be4:	60206268 	eorvs	r6, r0, r8, ror #4
    5be8:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    5bec:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    5bf0:	40044000 	andmi	r4, r4, r0
    5bf4:	21000018 	tstcs	r0, r8, lsl r0
    5bf8:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    5bfc:	21000280 	smlabbcs	r0, r0, r2, r0
    5c00:	000068cf 	andeq	r6, r0, pc, asr #17
    5c04:	21000068 	tstcs	r0, r8, rrx
    5c08:	40041100 	andmi	r1, r4, r0, lsl #2
    5c0c:	e000e280 	and	lr, r0, r0, lsl #5
    5c10:	00003bc3 	andeq	r3, r0, r3, asr #23
    5c14:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    5c18:	2004d000 	andcs	sp, r4, r0
    5c1c:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    5c20:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    5c24:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    5c28:	2080e000 	addcs	lr, r0, r0
    5c2c:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    5c30:	00004770 	andeq	r4, r0, r0, ror r7
    5c34:	2100026b 	tstcs	r0, fp, ror #4
    5c38:	40046058 	andmi	r6, r4, r8, asr r0
    5c3c:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    5c40:	bd019001 	stclt	0, cr9, [r1, #-4]
    5c44:	00006fa5 	andeq	r6, r0, r5, lsr #31
    5c48:	00000000 	andeq	r0, r0, r0
    5c4c:	00030001 	andeq	r0, r3, r1
    5c50:	001f000a 	andseq	r0, pc, sl
    5c54:	00eb0059 	rsceq	r0, fp, r9, asr r0
    5c58:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    5c5c:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    5c60:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    5c64:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    5c68:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    5c6c:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    5c70:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    5c74:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    5c78:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00005c7c <ratable>:
    5c7c:	12c5000b 	sbcne	r0, r5, #11
    5c80:	2de00007 	stclcs	0, cr0, [r0, #28]!
    5c84:	8000000f 	andhi	r0, r0, pc
    5c88:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    5c8c:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    5c90:	6374206c 	cmnvs	r4, #108	; 0x6c
    5c94:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    5c98:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    5c9c:	00006c6c 	andeq	r6, r0, ip, ror #24

00005ca0 <plug_null>:
    5ca0:	0000315d 	andeq	r3, r0, sp, asr r1
    5ca4:	00003105 	andeq	r3, r0, r5, lsl #2
    5ca8:	00003129 	andeq	r3, r0, r9, lsr #2
    5cac:	0000314d 	andeq	r3, r0, sp, asr #2
    5cb0:	00003155 	andeq	r3, r0, r5, asr r1
    5cb4:	00003159 	andeq	r3, r0, r9, asr r1
    5cb8:	00000000 	andeq	r0, r0, r0
    5cbc:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <discovery_wait_flag>:
20000540:	00000000 	andeq	r0, r0, r0

20000544 <packet.6511>:
20000544:	00000000 	andeq	r0, r0, r0

20000548 <response_flag>:
	...

2000054a <setdel>:
	...

2000054c <urates>:
static word urates [N_UARTS];
2000054c:	00000000 	andeq	r0, r0, r0

20000550 <__PCB>:
20000550:	00000000 	andeq	r0, r0, r0

20000554 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000554:	00000000 	andeq	r0, r0, r0

20000558 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000558:	00000000 	andeq	r0, r0, r0

2000055c <mevent>:
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <mnfree>:
20000560:	00000000 	andeq	r0, r0, r0

20000564 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000564:	00000000 	andeq	r0, r0, r0

20000568 <descriptors>:
	...

20000588 <oqueues>:
	...

20000594 <physical>:
	...

200005a0 <physinfo>:
	...

200005ac <plugins>:
	...

200005b8 <dopen>:
	...

200005b9 <dstat>:
	...

200005ba <bckf_timer>:
	...

200005bc <channel>:
200005bc:	00000000 	andeq	r0, r0, r0

200005c0 <drvprcs>:
static aword drvprcs, qevent;
200005c0:	00000000 	andeq	r0, r0, r0

200005c4 <dstate>:
200005c4:	00000000 	andeq	r0, r0, r0

200005c8 <paylen>:
static	int paylen = 0;			// Current TX payload length
200005c8:	00000000 	andeq	r0, r0, r0

200005cc <physid>:
static word	physid,
200005cc:	00000000 	andeq	r0, r0, r0

200005d0 <qevent>:
static aword drvprcs, qevent;
200005d0:	00000000 	andeq	r0, r0, r0

200005d4 <rbuffl>:
200005d4:	00000000 	andeq	r0, r0, r0

200005d8 <rfTrim>:
	...

200005e8 <rxstat>:
	...

200005f4 <statid>:
	...

200005f6 <txtries>:
	...

200005f8 <ndsc_null>:
200005f8:	00000000 	andeq	r0, r0, r0

200005fc <len.5699>:
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <ptr.5698>:
20000600:	00000000 	andeq	r0, r0, r0

20000604 <__inpline>:
char *__inpline = NULL;
20000604:	00000000 	andeq	r0, r0, r0

20000608 <len.5700>:
20000608:	00000000 	andeq	r0, r0, r0

2000060c <ptr.5699>:
2000060c:	00000000 	andeq	r0, r0, r0

20000610 <oscHfGlobals>:
	...

20000624 <powerQualGlobals>:
	...

2000062c <user_provided_record>:
	...

20000640 <us_pr_in>:
uint8_t us_pr_in;
20000640:	00000000 	andeq	r0, r0, r0

20000644 <response_checker>:
	...

2000064c <incoming_packet>:
address incoming_packet;
2000064c:	00000000 	andeq	r0, r0, r0

20000650 <response_message_5>:
struct ResponseMessage* response_message_5;
20000650:	00000000 	andeq	r0, r0, r0

20000654 <reason>:
	...

20000686 <get_id>:
	...

20000687 <beg_for_index>:
	...

20000688 <user_provided_index>:
	...

20000689 <array>:
	...

2000069d <CHOICE>:
	...

2000069e <user_provided_receiver_id>:
	...

200006a0 <node_db>:
struct Node *node_db; // globally defined struct, represents the node.
200006a0:	00000000 	andeq	r0, r0, r0

200006a4 <__pi_uart>:
	...

200006ac <system_event_count>:
200006ac:	00000000 	andeq	r0, r0, r0

200006b0 <entropy>:
200006b0:	00000000 	andeq	r0, r0, r0

200006b4 <__pi_mintk>:
	...

200006b6 <__pi_old>:
	...

200006b8 <__pi_systat>:
	...

200006c0 <__pi_new>:
200006c0:	00000000 	andeq	r0, r0, r0

200006c4 <__pi_utims>:
	...

200006d4 <__pi_curr>:
200006d4:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200006d8 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001c39 	andeq	r1, r0, r9, lsr ip
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000ac 	andeq	r0, r0, ip, lsr #1
    return node->data_base.item_array[index];
      10:	0008370c 	andeq	r3, r8, ip, lsl #14
      14:	000e0a00 	andeq	r0, lr, r0, lsl #20
      18:	00013000 	andeq	r3, r1, r0
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000042b 	andeq	r0, r0, fp, lsr #8
      2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
      30:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
      34:	00000bd5 	ldrdeq	r0, [r0], -r5
      38:	16015e02 	strne	r5, [r1], -r2, lsl #28
      3c:	00000025 	andeq	r0, r0, r5, lsr #32
			i = k;
      40:	5d060102 	stfpls	f0, [r6, #-8]
				j->Next = k;
      44:	0200000c 	andeq	r0, r0, #12
      48:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
}
      4c:	02020000 	andeq	r0, r2, #0
      50:	000a6b05 	andeq	r6, sl, r5, lsl #22
      54:	07020200 	streq	r0, [r2, -r0, lsl #4]
		release;
      58:	00000d66 	andeq	r0, r0, r6, ror #26
      5c:	fd050402 	stc2	4, cr0, [r5, #-8]
			nq++;
      60:	02000007 	andeq	r0, r0, #7
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
      68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      6c:	0007f805 	andeq	pc, r7, r5, lsl #16
      70:	07080200 	streq	r0, [r8, -r0, lsl #4]
      74:	00000421 	andeq	r0, r0, r1, lsr #8
      78:	000e4905 	andeq	r4, lr, r5, lsl #18
      7c:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
      80:	0000005c 	andeq	r0, r0, ip, asr r0
      84:	0002ff05 	andeq	pc, r2, r5, lsl #30
      88:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
      8c:	0000005c 	andeq	r0, r0, ip, asr r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	a5030406 	strge	r0, [r3, #-1030]	; 0xfffffbfa
      94:	0000b203 	andeq	fp, r0, r3, lsl #4
      98:	076c0700 	strbeq	r0, [ip, -r0, lsl #14]!
	if (baction == NULL)
      9c:	a7030000 	strge	r0, [r3, -r0]
      a0:	0000330c 	andeq	r3, r0, ip, lsl #6
	(*baction) (pbutton);
      a4:	0ab40700 	beq	fed01cac <_estack+0xdecfccac>
endthread
      a8:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000b213 	andeq	fp, r0, r3, lsl r2
      b0:	47080000 	strmi	r0, [r8, -r0]
endthread
      b4:	c2000000 	andgt	r0, r0, #0
      b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      bc:	00000025 	andeq	r0, r0, r5, lsr #32
      c0:	080a0003 	stmdaeq	sl, {r0, r1}
      c4:	e609a203 	str	sl, [r9], -r3, lsl #4
fsm sender(struct ResponseMessage *message) {
      c8:	0b000000 	bleq	d0 <sender+0x8>
      cc:	0000038e 	andeq	r0, r0, lr, lsl #7
      d0:	2c07a403 	cfstrscs	mvf10, [r7], {3}
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	0006010b 	andeq	r0, r6, fp, lsl #2
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	05a90300 	streq	r0, [r9, #768]!	; 0x300
      e0:	00000090 	muleq	r0, r0, r0
      e4:	b5050004 	strlt	r0, [r5, #-4]
      e8:	03000008 	movweq	r0, #8
      ec:	00c203aa 	sbceq	r0, r2, sl, lsr #7
		packet[1] = message->gid;
      f0:	040c0000 	streq	r0, [ip], #-0
      f4:	000b900d 	andeq	r9, fp, sp
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	00110400 	andseq	r0, r1, r0, lsl #8
      fc:	0000010c 	andeq	r0, r0, ip, lsl #2
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	00086d0e 	andeq	r6, r8, lr, lsl #26
     104:	0000f200 	andeq	pc, r0, r0, lsl #4
		*p = message->tpe;p++;
     108:	00010000 	andeq	r0, r1, r0
		*p = message->request_number;p++;
     10c:	00084205 	andeq	r4, r8, r5, lsl #4
		*p = message->sender_id;p++;
     110:	17160400 	ldrne	r0, [r6, -r0, lsl #8]
		*p = message->receiver_id;p++;
     114:	00000063 	andeq	r0, r0, r3, rrx
		switch(message->tpe) {
     118:	00025305 	andeq	r5, r2, r5, lsl #6
     11c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
     120:	0000002c 	andeq	r0, r0, ip, lsr #32
		tcv_endp(packet);
     124:	00072a05 	andeq	r2, r7, r5, lsl #20
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	1b230400 	blne	8c1130 <__ccfg+0x8a1188>
     12c:	00000118 	andeq	r0, r0, r8, lsl r1
}
     130:	0003320f 	andeq	r3, r3, pc, lsl #4
		finish;
     134:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
     138:	00018a08 	andeq	r8, r1, r8, lsl #20
     13c:	0ec40b00 	vdiveq.f64	d16, d4, d0
				strncpy(p, message->record, sizeof(message->record));
     140:	36040000 	strcc	r0, [r4], -r0
				*p = message->padding;p++;
     144:	00018a13 	andeq	r8, r1, r3, lsl sl
				strncpy(p, message->record, sizeof(message->record));
     148:	5f100000 	svcpl	0x00100000
     14c:	3704006b 	strcc	r0, [r4, -fp, rrx]
     150:	00002c07 	andeq	r2, r0, r7, lsl #24
				strncpy(p, message->record, sizeof(message->record));
     154:	620b0400 	andvs	r0, fp, #0, 8
     158:	0400000b 	streq	r0, [r0], #-11
				strncpy(p, message->record, sizeof(message->record));
     15c:	002c0b37 	eoreq	r0, ip, r7, lsr fp
				break;
     160:	0b080000 	bleq	200168 <__ccfg+0x1e01c0>
				*p = message->record_index;p++;
     164:	000043f5 	strdeq	r4, [r0], -r5
				*p = message->padding;
     168:	2c143704 	ldccs	7, cr3, [r4], {4}
				break;
     16c:	0c000000 	stceq	0, cr0, [r0], {-0}
     170:	0004550b 	andeq	r5, r4, fp, lsl #10
     174:	1b370400 	blne	dc117c <__ccfg+0xda11d4>
     178:	0000002c 	andeq	r0, r0, ip, lsr #32
     17c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
     180:	0b380400 	bleq	e01188 <__ccfg+0xde11e0>
		node->nnodes[i] = 0;
     184:	00000190 	muleq	r0, r0, r1
     188:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
     18c:	00000130 	andeq	r0, r0, r0, lsr r1
     190:	00010c08 	andeq	r0, r1, r8, lsl #24
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	0001a000 	andeq	sl, r1, r0
bool init_node(struct Node* node){
     198:	00250900 	eoreq	r0, r5, r0, lsl #18
    node->id  = 0;                  // default id value 0
     19c:	00000000 	andeq	r0, r0, r0
    node->index = 0;                // default entry count 0
     1a0:	000b7d0f 	andeq	r7, fp, pc, lsl #26
    node->data_base.item_count = 0; // default no items in array
     1a4:	3c042400 	cfstrscc	mvf2, [r4], {-0}
	reset_array(node);
     1a8:	00022308 	andeq	r2, r2, r8, lsl #6
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	056c0b00 	strbeq	r0, [ip, #-2816]!	; 0xfffff500
     1b0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
};
     1b4:	00002c07 	andeq	r2, r0, r7, lsl #24
     1b8:	b70b0000 	strlt	r0, [fp, -r0]
uint8_t generate_request_num(void){
     1bc:	04000003 	streq	r0, [r0], #-3
    return (uint8_t) (rand() % 255);
     1c0:	002c073f 	eoreq	r0, ip, pc, lsr r7
     1c4:	0b040000 	bleq	1001cc <__ccfg+0xe0224>
     1c8:	00000358 	andeq	r0, r0, r8, asr r3
}
     1cc:	2c074004 	stccs	0, cr4, [r7], {4}
            node->nnodes[i] = 0; // set to null byte
     1d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     1d4:	0006740b 	andeq	r7, r6, fp, lsl #8
     1d8:	07410400 	strbeq	r0, [r1, -r0, lsl #8]
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
};
     1e0:	09540b0c 	ldmdbeq	r4, {r2, r3, r8, r9, fp}^
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	42040000 	andmi	r0, r4, #0
     1e8:	00002c07 	andeq	r2, r0, r7, lsl #24
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	ce0b1000 	cdpgt	0, 0, cr1, cr11, cr0, {0}
     1f0:	0400000a 	streq	r0, [r0], #-10
     1f4:	002c0743 	eoreq	r0, ip, r3, asr #14
        node->data_base.item_count -= 1;
     1f8:	0b140000 	bleq	500200 <__ccfg+0x4e0258>
};
     1fc:	00000346 	andeq	r0, r0, r6, asr #6
bool delete_all(struct Node *node){
     200:	2c074404 	cfstrscs	mvf4, [r7], {4}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	0005750b 	andeq	r7, r5, fp, lsl #10
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	07450400 	strbeq	r0, [r5, -r0, lsl #8]
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	0000002c 	andeq	r0, r0, ip, lsr #32
            node->data_base.item_array[i].timestamp = 0;
     214:	08f00b1c 	ldmeq	r0!, {r2, r3, r4, r8, r9, fp}^
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	46040000 	strmi	r0, [r4], -r0
    node->data_base.item_count = 0;
     21c:	00002c07 	andeq	r2, r0, r7, lsl #24
}
     220:	12002000 	andne	r2, r0, #0
        return true;
     224:	0000003b 	andeq	r0, r0, fp, lsr r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	4f040108 	svcmi	0x00040108
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00026808 	andeq	r6, r2, r8, lsl #16
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	0d2d0b00 	vpusheq	{d0-d-1}
     234:	50040000 	andpl	r0, r4, r0
     238:	00026809 	andeq	r6, r2, r9, lsl #16
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	170b0000 	strne	r0, [fp, -r0]
	response_message->tpe = RESPONSE;
     240:	0400000c 	streq	r0, [r0], #-12
	response_message->status = status;
     244:	02680951 	rsbeq	r0, r8, #1327104	; 0x144000
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	13800000 	orrne	r0, r0, #0
	response_message->gid = gid;
     24c:	00000dc6 	andeq	r0, r0, r6, asr #27
	response_message->sender_id = sender_id;
     250:	0c0a5304 	stceq	3, cr5, [sl], {4}
	response_message->status = status;
     254:	00000001 	andeq	r0, r0, r1
	if (!padding){
     258:	0eb71301 	cdpeq	3, 11, cr1, cr7, cr1, {0}
		response_message->padding = padding;
     25c:	56040000 	strpl	r0, [r4], -r0
	if (rec != NULL){
     260:	00010c0a 	andeq	r0, r1, sl, lsl #24
     264:	00010400 	andeq	r0, r1, r0, lsl #8
		strncpy(response_message->record, rec, 20);
     268:	0000f208 	andeq	pc, r0, r8, lsl #4
     26c:	00027800 	andeq	r7, r2, r0, lsl #16
     270:	00250900 	eoreq	r0, r5, r0, lsl #18
};
     274:	001f0000 	andseq	r0, pc, r0
fsm receiver(struct Node* node_db) {
     278:	000a1612 	andeq	r1, sl, r2, lsl r6
     27c:	04019000 	streq	r9, [r1], #-0
     280:	02bb0862 	adcseq	r0, fp, #6422528	; 0x620000
     284:	c40b0000 	strgt	r0, [fp], #-0
     288:	0400000e 	streq	r0, [r0], #-14
     28c:	02bb1263 	adcseq	r1, fp, #805306374	; 0x30000006
     290:	0b000000 	bleq	298 <receiver+0x20>
     294:	00000584 	andeq	r0, r0, r4, lsl #11
		DEBUG_PRINT("\r\nreceiving 0");
     298:	2c066404 	cfstrscs	mvf6, [r6], {4}
     29c:	04000000 	streq	r0, [r0], #-0
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	0003070b 	andeq	r0, r3, fp, lsl #14
     2a4:	09660400 	stmdbeq	r6!, {sl}^
     2a8:	000002c1 	andeq	r0, r0, r1, asr #5
		DEBUG_PRINT("\r\nreceiving 1");
     2ac:	003b0b08 	eorseq	r0, fp, r8, lsl #22
     2b0:	67040000 	strvs	r0, [r4, -r0]
		DEBUG_PRINT("\r\nreceiving 2");
     2b4:	0002231e 	andeq	r2, r2, lr, lsl r3
     2b8:	11008800 	tstne	r0, r0, lsl #16
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2bc:	00027804 	andeq	r7, r2, r4, lsl #16
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c0:	02d10800 	sbcseq	r0, r1, #0, 16
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2c4:	02d10000 	sbcseq	r0, r1, #0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c8:	25090000 	strcs	r0, [r9, #-0]
		DEBUG_PRINT("\r\nreceiving 3");
     2cc:	1f000000 	svcne	0x00000000
		switch (response_message_5->tpe){
     2d0:	d7041100 	strle	r1, [r4, -r0, lsl #2]
     2d4:	14000002 	strne	r0, [r0], #-2
     2d8:	0cc50f01 	stcleq	15, cr0, [r5], {1}
     2dc:	04080000 	streq	r0, [r8], #-0
     2e0:	0301087a 	movweq	r0, #6266	; 0x187a
     2e4:	d70b0000 	strle	r0, [fp, -r0]
     2e8:	0400000c 	streq	r0, [r0], #-12
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2ec:	0301117b 	movweq	r1, #4475	; 0x117b
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2f0:	0b000000 	bleq	2f8 <receiver+0x80>
				if (discovery_request_message->gid == node_db->gid){
     2f4:	00001da0 	andeq	r1, r0, r0, lsr #27
     2f8:	2c067c04 	stccs	12, cr7, [r6], {4}
					DEBUG_PRINT("\r\nSending to sender");
     2fc:	04000000 	streq	r0, [r0], #-0
     300:	47041100 	strmi	r1, [r4, -r0, lsl #2]
					DEBUG_PRINT("\r\nSending to sender");
     304:	0f000000 	svceq	0x00000000
					response_message_0->tpe = DISCOVERY_RESPONSE;
     308:	0000044d 	andeq	r0, r0, sp, asr #8
					response_message_0->request_number = discovery_request_message->request_number;
     30c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
					response_message_0->sender_id = node_db->id;
     310:	0000044a 	andeq	r0, r0, sl, asr #8
					response_message_0->receiver_id = discovery_request_message->sender_id;
     314:	00705f10 	rsbseq	r5, r0, r0, lsl pc
					DEBUG_PRINT("\r\nSending to sender");
     318:	0112bb04 	tsteq	r2, r4, lsl #22
					call sender(response_message_0, done_case);
     31c:	00000003 	andeq	r0, r0, r3
     320:	00725f10 	rsbseq	r5, r2, r0, lsl pc
     324:	2c07bc04 	stccs	12, cr11, [r7], {4}
     328:	04000000 	streq	r0, [r0], #-0
     32c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     330:	2c07bd04 	stccs	13, cr11, [r7], {4}
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     334:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     338:	0001c40b 	andeq	ip, r1, fp, lsl #8
     33c:	09be0400 	ldmibeq	lr!, {sl}
     340:	0000004e 	andeq	r0, r0, lr, asr #32
     344:	08590b0c 	ldmdaeq	r9, {r2, r3, r8, r9, fp}^
     348:	bf040000 	svclt	0x00040000
     34c:	00004e09 	andeq	r4, r0, r9, lsl #28
     350:	5f100e00 	svcpl	0x00100e00
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     354:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
					node_db->index+=1;
     358:	02d911c0 	sbcseq	r1, r9, #192, 2	; 0x30
     35c:	0b100000 	bleq	400364 <__ccfg+0x3e03bc>
		DEBUG_PRINT("\r\nIn done_case");
     360:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
		tcv_endp(incoming_packet);
     364:	2c07c104 	stfcsd	f4, [r7], {4}
     368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
		DEBUG_PRINT("\r\nIn done_case");
     36c:	00030c0b 	andeq	r0, r3, fp, lsl #24
     370:	0ac80400 	beq	ff201378 <_estack+0xdf1fc378>
		proceed receiving;
     374:	000000f2 	strdeq	r0, [r0], -r2
		ser_out(response_1_create, "\r\nData Saved");
     378:	1d2f0b1c 	vstmdbne	pc!, {d0-d13}
     37c:	ca040000 	bgt	100384 <__ccfg+0xe03dc>
		proceed receiving;
     380:	0005cf09 	andeq	ip, r5, r9, lsl #30
     384:	f60b2000 			; <UNDEFINED> instruction: 0xf60b2000
		ser_out(response_1_delete, "\r\nRecord Deleted");
     388:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
     38c:	05fa09cc 	ldrbeq	r0, [sl, #2508]!	; 0x9cc
		proceed receiving;
     390:	0b240000 	bleq	900398 <__ccfg+0x8e03f0>
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     394:	00000ee4 	andeq	r0, r0, r4, ror #29
     398:	1f0dcf04 	svcne	0x000dcf04
     39c:	28000006 	stmdacs	r0, {r1, r2}
     3a0:	001ce40b 	andseq	lr, ip, fp, lsl #8
     3a4:	09d00400 	ldmibeq	r0, {sl}^
		proceed receiving;
     3a8:	0000063a 	andeq	r0, r0, sl, lsr r6
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     3ac:	755f102c 	ldrbvc	r1, [pc, #-44]	; 388 <receiver+0x110>
     3b0:	d3040062 	movwle	r0, #16482	; 0x4062
     3b4:	0002d911 	andeq	sp, r2, r1, lsl r9
     3b8:	5f103000 	svcpl	0x00103000
		proceed receiving;
     3bc:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3c0:	030112d4 	movweq	r1, #4820	; 0x12d4
     3c4:	10380000 	eorsne	r0, r8, r0
     3c8:	0072755f 	rsbseq	r7, r2, pc, asr r5
     3cc:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
		proceed receiving;
     3d0:	3c000000 	stccc	0, cr0, [r0], {-0}
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3d4:	000f1b0b 	andeq	r1, pc, fp, lsl #22
     3d8:	11d80400 	bicsne	r0, r8, r0, lsl #8
     3dc:	00000640 	andeq	r0, r0, r0, asr #12
     3e0:	0e640b40 	vnmuleq.f64	d16, d4, d0
		proceed receiving;
     3e4:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3e8:	00065011 	andeq	r5, r6, r1, lsl r0
     3ec:	5f104300 	svcpl	0x00104300
		proceed receiving;
     3f0:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
}
     3f4:	02d911dc 	sbcseq	r1, r9, #220, 2	; 0x37
     3f8:	0b440000 	bleq	1100400 <__ccfg+0x10e0458>
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3fc:	00000b74 	andeq	r0, r0, r4, ror fp
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     400:	2c07df04 	stccs	15, cr13, [r7], {4}
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     404:	4c000000 	stcmi	0, cr0, [r0], {-0}
     408:	00047c0b 	andeq	r7, r4, fp, lsl #24
     40c:	0ae00400 	beq	ff801414 <_estack+0xdf7fc414>
     410:	00000078 	andeq	r0, r0, r8, ror r0
					DEBUG_PRINT("\r\nDelete rec first if");
     414:	47530b50 			; <UNDEFINED> instruction: 0x47530b50
					break;
     418:	e3040000 	movw	r0, #16384	; 0x4000
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     41c:	00046912 	andeq	r6, r4, r2, lsl r9
     420:	9a0b5400 	bls	2d5428 <__ccfg+0x2b5480>
					DEBUG_PRINT("\r\nCreate rec second if");
     424:	0400000b 	streq	r0, [r0], #-11
    if (node->data_base.item_count == NUMB_OF_ENT){
     428:	01240ce7 	smulwteq	r4, r7, ip
     42c:	0b580000 	bleq	1600434 <__ccfg+0x15e048c>
						DEBUG_PRINT("\r\nCreate rec third if");
     430:	00000a1e 	andeq	r0, r0, lr, lsl sl
     434:	e60ee904 	str	lr, [lr], -r4, lsl #18
					DEBUG_PRINT("\r\nCreate rec out if");
     438:	5c000000 	stcpl	0, cr0, [r0], {-0}
     43c:	000e970b 	andeq	r9, lr, fp, lsl #14
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     440:	07ea0400 	strbeq	r0, [sl, r0, lsl #8]!
     444:	0000002c 	andeq	r0, r0, ip, lsr #32
     448:	01150064 	tsteq	r5, r4, rrx
     44c:	0000002c 	andeq	r0, r0, ip, lsr #32
     450:	00000469 	andeq	r0, r0, r9, ror #8
     454:	00046916 	andeq	r6, r4, r6, lsl r9
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     458:	00f21600 	rscseq	r1, r2, r0, lsl #12
					call sender(response_message_2, done_case);
     45c:	bd160000 	ldclt	0, cr0, [r6, #-0]
						DEBUG_PRINT("\r\nCreate rec third else");
     460:	16000005 	strne	r0, [r0], -r5
     464:	0000002c 	andeq	r0, r0, ip, lsr #32
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     468:	74041100 	strvc	r1, [r4], #-256	; 0xffffff00
     46c:	17000004 	strne	r0, [r0, -r4]
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     470:	00000469 	andeq	r0, r0, r9, ror #8
				DEBUG_PRINT("\r\nDelete rec");/*
     474:	000d5f18 	andeq	r5, sp, r8, lsl pc
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     478:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
     47c:	bd080265 	sfmlt	f0, 4, [r8, #-404]	; 0xfffffe6c
     480:	19000005 	stmdbne	r0, {r0, r2}
     484:	00000904 	andeq	r0, r0, r4, lsl #18
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     488:	07026704 	streq	r6, [r2, -r4, lsl #14]
     48c:	0000002c 	andeq	r0, r0, ip, lsr #32
     490:	07e21900 	strbeq	r1, [r2, r0, lsl #18]!
     494:	6c040000 	stcvs	0, cr0, [r4], {-0}
					DEBUG_PRINT("\r\nDelete rec first if");
     498:	06ac0b02 	strteq	r0, [ip], r2, lsl #22
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     49c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4a0:	000002f7 	strdeq	r0, [r0], -r7
					DEBUG_PRINT("\r\nDelete rec second if");
     4a4:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
					if (delete_record(node_db, delete_record_message->record_index)){
     4a8:	000006ac 	andeq	r0, r0, ip, lsr #13
     4ac:	0f0a1908 	svceq	0x000a1908
     4b0:	6c040000 	stcvs	0, cr0, [r4], {-0}
						DEBUG_PRINT("\r\nDelete rec third if");
     4b4:	06ac1e02 	strteq	r1, [ip], r2, lsl #28
						status = (uint8_t) SUCCESS;
     4b8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
					DEBUG_PRINT("\r\nDelete assemble le response");
     4bc:	0000057f 	andeq	r0, r0, pc, ror r5
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4c0:	07026e04 	streq	r6, [r2, -r4, lsl #28]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c8:	04d41910 	ldrbeq	r1, [r4], #2320	; 0x910
     4cc:	6f040000 	svcvs	0x00040000
     4d0:	08ac0802 	stmiaeq	ip!, {r1, fp}
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4d4:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     4d8:	00000e77 	andeq	r0, r0, r7, ror lr
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4dc:	07027204 	streq	r7, [r2, -r4, lsl #4]
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e4:	42a11930 	adcmi	r1, r1, #48, 18	; 0xc0000
     4e8:	73040000 	movwvc	r0, #16384	; 0x4000
     4ec:	08c21602 	stmiaeq	r2, {r1, r9, sl, ip}^
     4f0:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     4f4:	0000078a 	andeq	r0, r0, sl, lsl #15
     4f8:	07027504 	streq	r7, [r2, -r4, lsl #10]
     4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     500:	08841938 	stmeq	r4, {r3, r4, r5, r8, fp, ip}
     504:	77040000 	strvc	r0, [r4, -r0]
     508:	08d40a02 	ldmeq	r4, {r1, r9, fp}^
     50c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
     510:	00000350 	andeq	r0, r0, r0, asr r3
     514:	13027a04 	movwne	r7, #10756	; 0x2a04
     518:	0000018a 	andeq	r0, r0, sl, lsl #3
     51c:	040b1940 	streq	r1, [fp], #-2368	; 0xfffff6c0
     520:	7b040000 	blvc	100528 <__ccfg+0xe0580>
     524:	002c0702 	eoreq	r0, ip, r2, lsl #14
     528:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     52c:	00000609 	andeq	r0, r0, r9, lsl #12
     530:	13027c04 	movwne	r7, #11268	; 0x2c04
     534:	0000018a 	andeq	r0, r0, sl, lsl #3
     538:	081f1948 	ldmdaeq	pc, {r3, r6, r8, fp, ip}	; <UNPREDICTABLE>
     53c:	7d040000 	stcvc	0, cr0, [r4, #-0]
     540:	08da1402 	ldmeq	sl, {r1, sl, ip}^
     544:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
     548:	00000b5a 	andeq	r0, r0, sl, asr fp
     54c:	07028004 	streq	r8, [r2, -r4]
     550:	0000002c 	andeq	r0, r0, ip, lsr #32
     554:	0c531950 	mrrceq	9, 5, r1, r3, cr0	; <UNPREDICTABLE>
     558:	81040000 	mrshi	r0, (UNDEF: 4)
     55c:	05bd0902 	ldreq	r0, [sp, #2306]!	; 0x902
     560:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
     564:	00000c6d 	andeq	r0, r0, sp, ror #24
     568:	0702a404 	streq	sl, [r2, -r4, lsl #8]
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     56c:	00000887 	andeq	r0, r0, r7, lsl #17
     570:	0a161a58 	beq	586ed8 <__ccfg+0x566f30>
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     574:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
				DEBUG_PRINT("\r\nretrieve rec");
     578:	02bb1302 	adcseq	r1, fp, #134217728	; 0x8000000
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     57c:	01480000 	mrseq	r0, (UNDEF: 72)
     580:	0006ae1a 	andeq	sl, r6, sl, lsl lr
     584:	02a90400 	adceq	r0, r9, #0, 8
     588:	00027812 	andeq	r7, r2, r2, lsl r8
     58c:	1a014c00 	bne	53594 <__ccfg+0x335ec>
     590:	00000695 	muleq	r0, r5, r6
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     594:	0c02ad04 	stceq	13, cr10, [r2], {4}
     598:	000008ec 	andeq	r0, r0, ip, ror #17
     59c:	e31a02dc 	tst	sl, #220, 4	; 0xc000000d
    return node->data_base.item_array[index];
     5a0:	0400000c 	streq	r0, [r0], #-12
     5a4:	6d1002b2 	lfmvs	f0, 4, [r0, #-712]	; 0xfffffd38
     5a8:	e0000006 	and	r0, r0, r6
     5ac:	0aa61a02 	beq	fe986dbc <_estack+0xde981dbc>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b0:	b4040000 	strlt	r0, [r4], #-0
    return node->data_base.item_array[index];
     5b4:	08f80a02 	ldmeq	r8!, {r1, r9, fp}^
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b8:	02ec0000 	rsceq	r0, ip, #0
     5bc:	c3041100 	movwgt	r1, #16640	; 0x4100
     5c0:	02000005 	andeq	r0, r0, #5
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     5c4:	0c640801 	stcleq	8, cr0, [r4], #-4
     5c8:	c3170000 	tstgt	r7, #0
     5cc:	11000005 	tstne	r0, r5
     5d0:	00044a04 	andeq	r4, r4, r4, lsl #20
     5d4:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     5d8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5dc:	16000005 	strne	r0, [r0], -r5
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
     5e4:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
				DEBUG_PRINT("\r\nResponse");
     5e8:	05f41600 	ldrbeq	r1, [r4, #1536]!	; 0x600
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5ec:	2c160000 	ldccs	0, cr0, [r6], {-0}
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	05ca0411 	strbeq	r0, [sl, #1041]	; 0x411
     5f8:	04110000 	ldreq	r0, [r1], #-0
     5fc:	000005d5 	ldrdeq	r0, [r0], -r5
     600:	00840115 	addeq	r0, r4, r5, lsl r1
				if(!response_flag){
     604:	061f0000 	ldreq	r0, [pc], -r0
					response_flag=1;
     608:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
					trigger(&response_flag);
     60c:	16000004 	strne	r0, [r0], -r4
				switch(response_message_5->status){
     610:	000000f2 	strdeq	r0, [r0], -r2
     614:	00008416 	andeq	r8, r0, r6, lsl r4
     618:	002c1600 	eoreq	r1, ip, r0, lsl #12
     61c:	11000000 	mrsne	r0, (UNDEF: 0)
     620:	00060004 	andeq	r0, r6, r4
						if (response_checker[0] == response_message_5->request_number){
     624:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     628:	3a000000 	bcc	630 <receiver+0x3b8>
     62c:	16000006 	strne	r0, [r0], -r6
							switch(response_checker[1]){
     630:	00000469 	andeq	r0, r0, r9, ror #8
     634:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     638:	04110000 	ldreq	r0, [r1], #-0
     63c:	00000625 	andeq	r0, r0, r5, lsr #12
									proceed response_1_create;
     640:	00004708 	andeq	r4, r0, r8, lsl #14
						proceed response_2;
     644:	00065000 	andeq	r5, r6, r0
									proceed response_1_delete;
     648:	00250900 	eoreq	r0, r5, r0, lsl #18
									proceed response_1_retrieve;
     64c:	00020000 	andeq	r0, r2, r0
						proceed response_2;
     650:	00004708 	andeq	r4, r0, r8, lsl #14
						proceed response_3;
     654:	00066000 	andeq	r6, r6, r0
						proceed response_4;
     658:	00250900 	eoreq	r0, r5, r0, lsl #18
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     65c:	00000000 	andeq	r0, r0, r0
     660:	00046e04 	andeq	r6, r4, r4, lsl #28
				break;
     664:	01240400 			; <UNDEFINED> instruction: 0x01240400
}
     668:	00030718 	andeq	r0, r3, r8, lsl r7
     66c:	0cdd1b00 	vldmiaeq	sp, {d17-d16}
     670:	040c0000 	streq	r0, [ip], #-0
     674:	a6080128 	strge	r0, [r8], -r8, lsr #2
     678:	19000006 	stmdbne	r0, {r1, r2}
     67c:	00000ec4 	andeq	r0, r0, r4, asr #29
fsm root {
     680:	11012a04 	tstne	r1, r4, lsl #20
     684:	000006a6 	andeq	r0, r0, r6, lsr #13
     688:	0bce1900 	bleq	ff386a90 <_estack+0xdf381a90>
     68c:	2b040000 	blcs	100694 <__ccfg+0xe06ec>
     690:	002c0701 	eoreq	r0, ip, r1, lsl #14
     694:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     698:	00000772 	andeq	r0, r0, r2, ror r7
     69c:	0b012c04 	bleq	4b6b4 <__ccfg+0x2b70c>
     6a0:	000006ac 	andeq	r0, r0, ip, lsr #13
     6a4:	04110008 	ldreq	r0, [r1], #-8
     6a8:	0000066d 	andeq	r0, r0, sp, ror #12
     6ac:	06600411 			; <UNDEFINED> instruction: 0x06600411
     6b0:	da1b0000 	ble	6c06b8 <__ccfg+0x6a0710>
     6b4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     6b8:	08014404 	stmdaeq	r1, {r2, sl, lr}
     6bc:	000006eb 	andeq	r0, r0, fp, ror #13
     6c0:	00164b19 	andseq	r4, r6, r9, lsl fp
     6c4:	01450400 	cmpeq	r5, r0, lsl #8
     6c8:	0006eb12 	andeq	lr, r6, r2, lsl fp
     6cc:	31190000 	tstcc	r9, r0
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     6d0:	04000008 	streq	r0, [r0], #-8
     6d4:	eb120146 	bl	480bf4 <__ccfg+0x460c4c>
     6d8:	06000006 	streq	r0, [r0], -r6
		init_node(node_db);
     6dc:	0014fd19 	andseq	pc, r4, r9, lsl sp	; <UNPREDICTABLE>
		phys_cc1350(0, MAX_PKT_LEN);
     6e0:	01470400 	cmpeq	r7, r0, lsl #8
     6e4:	00005512 	andeq	r5, r0, r2, lsl r5
		tcv_plug (0, &plug_null);
     6e8:	08000c00 	stmdaeq	r0, {sl, fp}
     6ec:	00000055 	andeq	r0, r0, r5, asr r0
		sfd = tcv_open (WNONE, 0, 0);
     6f0:	000006fb 	strdeq	r0, [r0], -fp
     6f4:	00002509 	andeq	r2, r0, r9, lsl #10
     6f8:	1c000200 	sfmne	f0, 4, [r0], {-0}
     6fc:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
     700:	00081007 	andeq	r1, r8, r7
			diag("Cannot open tcv interface");
     704:	0e6a1900 	vmuleq.f16	s3, s20, s0	; <UNPREDICTABLE>
     708:	87040000 	strhi	r0, [r4, -r0]
			halt();
     70c:	00251802 	eoreq	r1, r5, r2, lsl #16
		tcv_control(sfd, PHYSOPT_ON, NULL);
     710:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     714:	00000ceb 	andeq	r0, r0, fp, ror #25
		runfsm receiver(node_db);
     718:	12028804 	andne	r8, r2, #4, 16	; 0x40000
     71c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     720:	04381904 	ldrteq	r1, [r8], #-2308	; 0xfffff6fc
     724:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
     728:	08101002 	ldmdaeq	r0, {r1, ip}
     72c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     730:	00000b43 	andeq	r0, r0, r3, asr #22
     734:	17028a04 	strne	r8, [r2, -r4, lsl #20]
		ser_inf(get_choice, "%c", &CHOICE);
     738:	000001a0 	andeq	r0, r0, r0, lsr #3
     73c:	07e91924 	strbeq	r1, [r9, r4, lsr #18]!
     740:	8b040000 	blhi	100748 <__ccfg+0xe07a0>
		switch(CHOICE) {
     744:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     748:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     74c:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
     750:	2c028c04 	stccs	12, cr8, [r2], {4}
     754:	00000071 	andeq	r0, r0, r1, ror r0
     758:	007f1950 	rsbseq	r1, pc, r0, asr r9	; <UNPREDICTABLE>
     75c:	8d040000 	stchi	0, cr0, [r4, #-0]
     760:	06b21a02 	ldrteq	r1, [r2], r2, lsl #20
     764:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     768:	00000639 	andeq	r0, r0, r9, lsr r6
     76c:	16028e04 	strne	r8, [r2], -r4, lsl #28
     770:	000000e6 	andeq	r0, r0, r6, ror #1
				proceed menu;
     774:	0cf81968 			; <UNDEFINED> instruction: 0x0cf81968
     778:	8f040000 	svchi	0x00040000
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     77c:	00e61602 	rsceq	r1, r6, r2, lsl #12
     780:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     784:	00000071 	andeq	r0, r0, r1, ror r0
     788:	16029004 	strne	r9, [r2], -r4
     78c:	000000e6 	andeq	r0, r0, r6, ror #1
		DEBUG_PRINT("setting node group ID");
     790:	0b6a1978 	bleq	1a86d78 <__ccfg+0x1a66dd0>
     794:	91040000 	mrsls	r0, (UNDEF: 4)
    node->gid = gid; 
     798:	08201002 	stmdaeq	r0!, {r1, ip}
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     79c:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
    node->gid = gid; 
     7a0:	00000415 	andeq	r0, r0, r5, lsl r4
		proceed menu;
     7a4:	10029204 	andne	r9, r2, r4, lsl #4
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     7a8:	00000830 	andeq	r0, r0, r0, lsr r8
     7ac:	0c8d1988 			; <UNDEFINED> instruction: 0x0c8d1988
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     7b0:	93040000 	movwls	r0, #16384	; 0x4000
     7b4:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     7b8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7bc:	000002ac 	andeq	r0, r0, ip, lsr #5
     7c0:	16029404 	strne	r9, [r2], -r4, lsl #8
		if((node_db->id < 1) || (node_db->id > 25)){
     7c4:	000000e6 	andeq	r0, r0, r6, ror #1
     7c8:	069f19a4 	ldreq	r1, [pc], r4, lsr #19
     7cc:	95040000 	strls	r0, [r4, #-0]
			strncpy(reason, "Out of Range", 50);
     7d0:	00e61602 	rsceq	r1, r6, r2, lsl #12
     7d4:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
			proceed invalid_node_id;
     7d8:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
     7dc:	16029604 	strne	r9, [r2], -r4, lsl #12
				strncpy(reason, "ID is already in use", 50);
     7e0:	000000e6 	andeq	r0, r0, r6, ror #1
		for(int i = 0; i < node_db->index; i++){
     7e4:	084a19b4 	stmdaeq	sl, {r2, r4, r5, r7, r8, fp, ip}^
     7e8:	97040000 	strls	r0, [r4, -r0]
     7ec:	00e61602 	rsceq	r1, r6, r2, lsl #12
		proceed menu;
     7f0:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7f4:	00000628 	andeq	r0, r0, r8, lsr #12
     7f8:	16029804 	strne	r9, [r2], -r4, lsl #16
     7fc:	000000e6 	andeq	r0, r0, r6, ror #1
     800:	090219c4 	stmdbeq	r2, {r2, r6, r7, r8, fp, ip}
		proceed get_new_node_id;
     804:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
     808:	002c0802 	eoreq	r0, ip, r2, lsl #16
		if (!clear_node_neighbour_array(node_db)){
     80c:	00cc0000 	sbceq	r0, ip, r0
     810:	0005c308 	andeq	ip, r5, r8, lsl #6
			strncpy(reason, "Error Clearing Node Array", 50);
     814:	00082000 	andeq	r2, r8, r0
     818:	00250900 	eoreq	r0, r5, r0, lsl #18
     81c:	00190000 	andseq	r0, r9, r0
			proceed error;
     820:	0005c308 	andeq	ip, r5, r8, lsl #6
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     824:	00083000 	andeq	r3, r8, r0
     828:	00250900 	eoreq	r0, r5, r0, lsl #18
		request_packet->gid = node_db->gid;
     82c:	00070000 	andeq	r0, r7, r0
     830:	0005c308 	andeq	ip, r5, r8, lsl #6
		request_packet->tpe = DISCOVERY_REQUEST;
     834:	00084000 	andeq	r4, r8, r0
		request_packet->request_number = generate_request_num();
     838:	00250900 	eoreq	r0, r5, r0, lsl #18
     83c:	00170000 	andseq	r0, r7, r0
		call sender(request_packet, wait_discovery);
     840:	9e04f01c 	mcrls	0, 0, pc, cr4, cr12, {0}	; <UNPREDICTABLE>
     844:	08670702 	stmdaeq	r7!, {r1, r8, r9, sl}^
		request_packet->receiver_id=0;
     848:	c0190000 	andsgt	r0, r9, r0
		call sender(request_packet, wait_discovery);
     84c:	04000003 	streq	r0, [r0], #-3
     850:	671b02a1 	ldrvs	r0, [fp, -r1, lsr #5]
     854:	00000008 	andeq	r0, r0, r8
			release;
     858:	000f1219 	andeq	r1, pc, r9, lsl r2	; <UNPREDICTABLE>
				proceed get_new_node_id;
     85c:	02a20400 	adceq	r0, r2, #0, 8
				proceed clear_neighbour_array;
     860:	00087718 	andeq	r7, r8, r8, lsl r7
				proceed create_proto_start;
     864:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
				proceed start_delete_proto;
     868:	00000301 	andeq	r0, r0, r1, lsl #6
				proceed start_retrieve_proto;
     86c:	00000877 	andeq	r0, r0, r7, ror r8
				proceed display_db;
     870:	00002509 	andeq	r2, r0, r9, lsl #10
				proceed del_local;
     874:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
			if(node_db->id == node_db->nnodes[i]){
     878:	00000025 	andeq	r0, r0, r5, lsr #32
     87c:	00000887 	andeq	r0, r0, r7, lsl #17
     880:	00002509 	andeq	r2, r0, r9, lsl #10
				strncpy(reason, "ID is already in use", 50);
     884:	1d001d00 	stcne	13, cr1, [r0, #-0]
     888:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
				proceed invalid_node_id;
     88c:	0008ac03 	andeq	sl, r8, r3, lsl #24
     890:	0d5f1e00 	ldcleq	14, cr1, [pc, #-0]	; 898 <root+0x218>
		for(int i = 0; i < node_db->index; i++){
     894:	9a040000 	bls	10089c <__ccfg+0xe08f4>
		if (discovery_wait_flag == 0){
     898:	06fb0b02 	ldrbteq	r0, [fp], r2, lsl #22
			discovery_wait_flag=1;
     89c:	521e0000 	andspl	r0, lr, #0
     8a0:	0400000b 	streq	r0, [r0], #-11
			delay(3000, find_proto_start);
     8a4:	400b02a3 	andmi	r0, fp, r3, lsr #5
     8a8:	00000008 	andeq	r0, r0, r8
		if (discovery_wait_flag == 1){
     8ac:	0005c308 	andeq	ip, r5, r8, lsl #6
			discovery_wait_flag=0;
     8b0:	0008bc00 	andeq	fp, r8, r0, lsl #24
     8b4:	00250900 	eoreq	r0, r5, r0, lsl #18
			delay(3000, display_neighbour_nodes);
     8b8:	00180000 	andseq	r0, r8, r0
     8bc:	000eca1f 	andeq	ip, lr, pc, lsl sl
     8c0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
     8c4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
     8c8:	08d40120 	ldmeq	r4, {r5, r8}^
     8cc:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
     8d0:	00000004 	andeq	r0, r0, r4
     8d4:	08c80411 	stmiaeq	r8, {r0, r4, sl}^
     8d8:	04110000 	ldreq	r0, [r1], #-0
     8dc:	0000018a 	andeq	r0, r0, sl, lsl #3
     8e0:	08ec0120 	stmiaeq	ip!, {r5, r8}^
     8e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	08f20411 	ldmeq	r2!, {r0, r4, sl}^
     8f0:	04110000 	ldreq	r0, [r1], #-0
     8f4:	000008e0 	andeq	r0, r0, r0, ror #17
     8f8:	00066008 	andeq	r6, r6, r8
     8fc:	00090800 	andeq	r0, r9, r0, lsl #16
     900:	00250900 	eoreq	r0, r5, r0, lsl #18
		if(node_db->index == 0){
     904:	00020000 	andeq	r0, r2, r0
     908:	000ac221 	andeq	ip, sl, r1, lsr #4
     90c:	03330400 	teqeq	r3, #0, 8
			proceed menu;
     910:	00046917 	andeq	r6, r4, r7, lsl r9
fsm root {
     914:	21010100 	mrscs	r0, (UNDEF: 17)
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     918:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
		for (int i=0; i<node_db->index; i++) {
     91c:	1d033404 	cfstrsne	mvf3, [r3, #-16]
     920:	0000046f 	andeq	r0, r0, pc, ror #8
     924:	1c050101 	stfnes	f0, [r5], {1}
		proceed menu;
     928:	0600002a 	streq	r0, [r0], -sl, lsr #32
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     92c:	0047172e 	subeq	r1, r7, lr, lsr #14
     930:	12050000 	andne	r0, r5, #0
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     934:	0600002e 	streq	r0, [r0], -lr, lsr #32
     938:	00551c31 	subseq	r1, r5, r1, lsr ip
     93c:	b4050000 	strlt	r0, [r5], #-0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     940:	06000029 	streq	r0, [r0], -r9, lsr #32
     944:	00631b34 	rsbeq	r1, r3, r4, lsr fp
			strncpy(reason, "Error: improper ID", 50);
     948:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
     94c:	07000005 	streq	r0, [r0, -r5]
     950:	00f41b28 	rscseq	r1, r4, r8, lsr #22
			proceed error;
     954:	92050000 	andls	r0, r5, #0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     958:	0700000b 	streq	r0, [r0, -fp]
     95c:	094a1863 	stmdbeq	sl, {r0, r1, r5, r6, fp, ip}^
		ser_in(get_record_to_create, user_provided_record, 20);
     960:	fb050000 	blx	14096a <__ccfg+0x1209c2>
     964:	08000028 	stmdaeq	r0, {r3, r5}
     968:	09321227 	ldmdbeq	r2!, {r0, r1, r2, r5, r9, ip}
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     96c:	62170000 	andsvs	r0, r7, #0
		create_message->gid = node_db->gid;
     970:	22000009 	andcs	r0, r0, #9
     974:	00000962 	andeq	r0, r0, r2, ror #18
     978:	001dc205 	andseq	ip, sp, r5, lsl #4
		create_message->tpe = CREATE_RECORD;
     97c:	112b0800 			; <UNDEFINED> instruction: 0x112b0800
		create_message->request_number = generate_request_num();
     980:	00000926 	andeq	r0, r0, r6, lsr #18
		create_message->sender_id = node_db->id;
     984:	00097822 	andeq	r7, r9, r2, lsr #16
     988:	294d0500 	stmdbcs	sp, {r8, sl}^
     98c:	2c080000 	stccs	0, cr0, [r8], {-0}
		strncpy(create_message->record, user_provided_record, 20);
     990:	00093e12 	andeq	r3, r9, r2, lsl lr
		create_message->receiver_id = user_provided_receiver_id;
     994:	09891700 	stmibeq	r9, {r8, r9, sl, ip}
		strncpy(create_message->record, user_provided_record, 20);
     998:	46050000 	strmi	r0, [r5], -r0
		response_checker[0] = create_message->request_number;
     99c:	08000006 	stmdaeq	r0, {r1, r2}
		call sender(create_message, wait);
     9a0:	093e122d 	ldmdbeq	lr!, {r0, r2, r3, r5, r9, ip}
		response_checker[1] = create_message->tpe;
     9a4:	b4050000 	strlt	r0, [r5], #-0
     9a8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
		call sender(create_message, wait);
     9ac:	09b20f2e 	ldmibeq	r2!, {r1, r2, r3, r5, r8, r9, sl, fp}
     9b0:	04110000 	ldreq	r0, [r1], #-0
     9b4:	00000962 	andeq	r0, r0, r2, ror #18
     9b8:	3208080a 	andcc	r0, r8, #655360	; 0xa0000
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     9bc:	000a4609 	andeq	r4, sl, r9, lsl #12
     9c0:	00342300 	eorseq	r2, r4, r0, lsl #6
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     9c4:	34080000 	strcc	r0, [r8], #-0
     9c8:	00097807 	andeq	r7, r9, r7, lsl #16
     9cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9d0:	064c2300 	strbeq	r2, [ip], -r0, lsl #6
     9d4:	35080000 	strcc	r0, [r8, #-0]
			strncpy(reason, "Error: improper node ID", 50);
     9d8:	00097803 	andeq	r7, r9, r3, lsl #16
     9dc:	06010100 	streq	r0, [r1], -r0, lsl #2
			proceed error;
     9e0:	02e72300 	rsceq	r2, r7, #0, 6
     9e4:	36080000 	strcc	r0, [r8], -r0
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9e8:	00097803 	andeq	r7, r9, r3, lsl #16
     9ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9f0:	06b72300 	ldrteq	r2, [r7], r0, lsl #6
     9f4:	37080000 	strcc	r0, [r8, -r0]
     9f8:	00097803 	andeq	r7, r9, r3, lsl #16
		if (us_pr_in < 0 || us_pr_in > 40){
     9fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
			strncpy(reason, "Error: invalid index", 50);
     a00:	0a9f2300 	beq	fe7c9608 <_estack+0xde7c4608>
     a04:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
     a08:	00097803 	andeq	r7, r9, r3, lsl #16
			proceed error;
     a0c:	00040100 	andeq	r0, r4, r0, lsl #2
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a10:	065b0b00 	ldrbeq	r0, [fp], -r0, lsl #22
     a14:	3a080000 	bcc	200a1c <__ccfg+0x1e0a74>
     a18:	00097807 	andeq	r7, r9, r7, lsl #16
		delete_record->gid = node_db->gid;
     a1c:	fb0b0100 	blx	2c0e26 <__ccfg+0x2a0e7e>
		delete_record->tpe = DELETE_RECORD;
     a20:	08000008 	stmdaeq	r0, {r3}
		delete_record->request_number = generate_request_num();
     a24:	0978033c 	ldmdbeq	r8!, {r2, r3, r4, r5, r8, r9}^
     a28:	0b020000 	bleq	80a30 <__ccfg+0x60a88>
		call sender(delete_record, wait);
     a2c:	00000f3a 	andeq	r0, r0, sl, lsr pc
		delete_record->sender_id = node_db->id;
     a30:	78033d08 	stmdavc	r3, {r3, r8, sl, fp, ip, sp}
		delete_record->receiver_id = user_provided_receiver_id;
     a34:	03000009 	movweq	r0, #9
		delete_record->record_index = us_pr_in;
     a38:	0009130b 	andeq	r1, r9, fp, lsl #6
     a3c:	083f0800 	ldmdaeq	pc!, {fp}	; <UNPREDICTABLE>
		response_checker[0] = delete_record->request_number;
     a40:	00000989 	andeq	r0, r0, r9, lsl #19
		call sender(delete_record, wait);
     a44:	1d050004 	stcne	0, cr0, [r5, #-16]
     a48:	08000003 	stmdaeq	r0, {r0, r1}
     a4c:	09b80341 	ldmibeq	r8!, {r0, r6, r8, r9}
     a50:	46220000 	strtmi	r0, [r2], -r0
     a54:	2400000a 	strcs	r0, [r0], #-10
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a58:	000006be 			; <UNDEFINED> instruction: 0x000006be
     a5c:	521a4308 	andspl	r4, sl, #8, 6	; 0x20000000
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a60:	0100000a 	tsteq	r0, sl
     a64:	01a02401 	lsleq	r2, r1, #8
     a68:	45080000 	strmi	r0, [r8, #-0]
		if (get_id < 1 || get_id > 25){
     a6c:	0005bd0e 	andeq	fp, r5, lr, lsl #26
     a70:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
			strncpy(reason, "Error: improper node ID", 50);
     a74:	00000326 	andeq	r0, r0, r6, lsr #6
     a78:	bd1e4508 	cfldr32lt	mvfx4, [lr, #-32]	; 0xffffffe0
     a7c:	01000005 	tsteq	r0, r5
			proceed error;
     a80:	09080a01 	stmdbeq	r8, {r0, r9, fp}
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a84:	0ab2098f 	beq	fec830c8 <_estack+0xdec7e0c8>
     a88:	d80b0000 	stmdale	fp, {}	; <UNPREDICTABLE>
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a8c:	0900000c 	stmdbeq	r0, {r2, r3}
     a90:	093e0b90 	ldmdbeq	lr!, {r4, r7, r8, r9, fp}
     a94:	0b000000 	bleq	a9c <root+0x41c>
		if (beg_for_index < 0 || beg_for_index > 40){
     a98:	00001075 	andeq	r1, r0, r5, ror r0
     a9c:	62079109 	andvs	r9, r7, #1073741826	; 0x40000002
			strncpy(reason, "Error: invalid index", 50);
     aa0:	04000009 	streq	r0, [r0], #-9
     aa4:	0001c50b 	andeq	ip, r1, fp, lsl #10
			proceed error;
     aa8:	10920900 	addsne	r0, r2, r0, lsl #18
     aac:	00000984 	andeq	r0, r0, r4, lsl #19
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ab0:	cc050006 	stcgt	0, cr0, [r5], {6}
     ab4:	0900000c 	stmdbeq	r0, {r2, r3}
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	0a810393 	beq	fe04190c <_estack+0xde03c90c>
     abc:	b2080000 	andlt	r0, r8, #0
     ac0:	c900000a 	stmdbgt	r0, {r1, r3}
		retrieve_record->gid = node_db->gid;
     ac4:	2500000a 	strcs	r0, [r0, #-10]
		retrieve_record->tpe = RETRIEVE_RECORD;
     ac8:	093d2400 	ldmdbeq	sp!, {sl, sp}
		retrieve_record->request_number = generate_request_num();
     acc:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
     ad0:	000abe0f 	andeq	fp, sl, pc, lsl #28
		retrieve_record->receiver_id = get_id;
     ad4:	0a010100 	beq	40edc <__ccfg+0x20f34>
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ad8:	09910a01 	ldmibeq	r1, {r0, r9, fp}
		retrieve_record->record_index = beg_for_index;
     adc:	00000b01 	andeq	r0, r0, r1, lsl #22
     ae0:	00091a23 	andeq	r1, r9, r3, lsr #20
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ae4:	07930a00 	ldreq	r0, [r3, r0, lsl #20]
		response_checker[0] = retrieve_record->request_number;
     ae8:	00000978 	andeq	r0, r0, r8, ror r9
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     aec:	00010701 	andeq	r0, r1, r1, lsl #14
		response_checker[1] = retrieve_record->tpe;
     af0:	0005cc23 	andeq	ip, r5, r3, lsr #24
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     af4:	03940a00 	orrseq	r0, r4, #0, 20
     af8:	00000978 	andeq	r0, r0, r8, ror r9
		call sender(retrieve_record, wait);
     afc:	00000101 	andeq	r0, r0, r1, lsl #2
     b00:	0aab0500 	beq	feac1f08 <_estack+0xdeabcf08>
     b04:	960a0000 	strls	r0, [sl], -r0
     b08:	000ad703 	andeq	sp, sl, r3, lsl #14
     b0c:	0b011700 	bleq	46714 <__ccfg+0x2676c>
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     b10:	0d080000 	stceq	0, cr0, [r8, #-0]
     b14:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
		if(node_db->data_base.item_count != 0){
     b18:	2500000b 	strcs	r0, [r0, #-11]
     b1c:	0b121700 	bleq	486724 <__ccfg+0x46677c>
     b20:	aa240000 	bge	900b28 <__ccfg+0x8e0b80>
		ser_out(loop_through_data, "\r\n");
     b24:	0a000003 	beq	b38 <root+0x4b8>
     b28:	0b1d179c 	bleq	7469a0 <__ccfg+0x7269f8>
		proceed menu;
     b2c:	01010000 	mrseq	r0, (UNDEF: 1)
		delete_all(node_db);
     b30:	00096e08 	andeq	r6, r9, r8, lsl #28
     b34:	000b3b00 	andeq	r3, fp, r0, lsl #22
		proceed menu;
     b38:	17002500 	strne	r2, [r0, -r0, lsl #10]
     b3c:	00000b30 	andeq	r0, r0, r0, lsr fp
		delay(3000, timeout);
     b40:	00060e24 	andeq	r0, r6, r4, lsr #28
     b44:	13060b00 	movwne	r0, #27392	; 0x6b00
		when(&response_flag, menu);
     b48:	00000b3b 	andeq	r0, r0, fp, lsr fp
     b4c:	dd240101 	stfles	f0, [r4, #-4]!
		release;
     b50:	09000008 	stmdbeq	r0, {r3}
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b54:	09890ec3 	stmibeq	r9, {r0, r1, r6, r7, r9, sl, fp}
     b58:	01010000 	mrseq	r0, (UNDEF: 1)
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b5c:	000c7204 	andeq	r7, ip, r4, lsl #4
     b60:	016e0c00 	cmneq	lr, r0, lsl #24
     b64:	000b6910 	andeq	r6, fp, r0, lsl r9
     b68:	6f041100 	svcvs	0x00041100
		for (int i=0; i<node_db->index; i++) {
     b6c:	2000000b 	andcs	r0, r0, fp
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b70:	000b7b01 	andeq	r7, fp, r1, lsl #22
     b74:	09621600 	stmdbeq	r2!, {r9, sl, ip}^
     b78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b7c:	000005ca 	andeq	r0, r0, sl, asr #11
     b80:	00000b86 	andeq	r0, r0, r6, lsl #23
     b84:	7b170025 	blvc	5c0c20 <__ccfg+0x5a0c78>
     b88:	2100000b 	tstcs	r0, fp
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b8c:	000009e6 	andeq	r0, r0, r6, ror #19
     b90:	13017f0c 	movwne	r7, #7948	; 0x1f0c
     b94:	00000b86 	andeq	r0, r0, r6, lsl #23
     b98:	96210101 	strtls	r0, [r1], -r1, lsl #2
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b9c:	0c000003 	stceq	0, cr0, [r0], {3}
     ba0:	95140182 	ldrls	r0, [r4, #-386]	; 0xfffffe7e
		ser_out(timeout, "\r\nFailed to reach the destination");
     ba4:	01000009 	tsteq	r0, r9
     ba8:	0d040a01 	vstreq	s0, [r4, #-4]
		proceed menu;
     bac:	0bcd0908 	bleq	ff342fd4 <_estack+0xdf33dfd4>
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     bb0:	cb0b0000 	blgt	2c0bb8 <__ccfg+0x2a0c10>
     bb4:	0d000001 	stceq	0, cr0, [r0, #-4]
     bb8:	0962070f 	stmdbeq	r2!, {r0, r1, r2, r3, r8, r9, sl}^
		proceed menu;
     bbc:	0b000000 	bleq	bc4 <root+0x544>
}
     bc0:	00000ca2 	andeq	r0, r0, r2, lsr #25
     bc4:	6203100d 	andvs	r1, r3, #13
     bc8:	02000009 	andeq	r0, r0, #9
     bcc:	0d790500 	cfldr64eq	mvdx0, [r9, #-0]
     bd0:	110d0000 	mrsne	r0, (UNDEF: 13)
     bd4:	000ba903 	andeq	sl, fp, r3, lsl #18
     bd8:	0d200a00 	vstmdbeq	r0!, {s0-s-1}
     bdc:	0c4b0916 	mcrreq	9, 1, r0, fp, cr6	; <UNPREDICTABLE>
     be0:	ac0b0000 	stcge	0, cr0, [fp], {-0}
     be4:	0d000004 	stceq	0, cr0, [r0, #-16]
     be8:	0c650817 	stcleq	8, cr0, [r5], #-92	; 0xffffffa4
     bec:	0b000000 	bleq	bf4 <root+0x574>
     bf0:	0000090b 	andeq	r0, r0, fp, lsl #18
     bf4:	8008180d 	andhi	r1, r8, sp, lsl #16
     bf8:	0400000c 	streq	r0, [r0], #-12
     bfc:	000bc60b 	andeq	ip, fp, fp, lsl #12
     c00:	08190d00 	ldmdaeq	r9, {r8, sl, fp}
     c04:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
     c08:	0c9a0b08 	vldmiaeq	sl, {d0-d3}
     c0c:	1a0d0000 	bne	340c14 <__ccfg+0x320c6c>
     c10:	000cd108 	andeq	sp, ip, r8, lsl #2
     c14:	620b0c00 	andvs	r0, fp, #0, 24
     c18:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
     c1c:	0ce7081b 	stcleq	8, cr0, [r7], #108	; 0x6c
     c20:	0b100000 	bleq	400c28 <__ccfg+0x3e0c80>
     c24:	00000a63 	andeq	r0, r0, r3, ror #20
     c28:	e7081c0d 	str	r1, [r8, -sp, lsl #24]
     c2c:	1400000c 	strne	r0, [r0], #-12
     c30:	0001ae0b 	andeq	sl, r1, fp, lsl #28
static void devinit_uart (int devnum) {
     c34:	081d0d00 	ldmdaeq	sp, {r8, sl, fp}
	adddevfunc (ioreq_uart_a, devnum);
     c38:	00000ce7 	andeq	r0, r0, r7, ror #25
     c3c:	03140b18 	tsteq	r4, #24, 22	; 0x6000
void udelay (volatile word n) {
     c40:	1e0d0000 	cdpne	0, 0, cr0, cr13, cr0, {0}
     c44:	00002c06 	andeq	r2, r0, r6, lsl #24
	while (n) {
     c48:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
     c4c:	00002c01 	andeq	r2, r0, r1, lsl #24
}
     c50:	000c6500 	andeq	r6, ip, r0, lsl #10
	while (n--);
     c54:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c58:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c5c:	16000000 	strne	r0, [r0], -r0
		n--;
     c60:	00000956 	andeq	r0, r0, r6, asr r9
     c64:	4b041100 	blmi	10506c <__ccfg+0xe50c4>
     c68:	1500000c 	strne	r0, [r0, #-12]
void mdelay (volatile word n) {
     c6c:	00002c01 	andeq	r2, r0, r1, lsl #24
     c70:	000c8000 	andeq	r8, ip, r0
	while (n) {
     c74:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c78:	2c160000 	ldccs	0, cr0, [r6], {-0}
}
     c7c:	00000000 	andeq	r0, r0, r0
		udelay (999);
     c80:	0c6b0411 	cfstrdeq	mvd0, [fp], #-68	; 0xffffffbc
     c84:	01150000 	tsteq	r5, r0
		n--;
     c88:	0000002c 	andeq	r0, r0, ip, lsr #32
     c8c:	00000caa 	andeq	r0, r0, sl, lsr #25
     c90:	00002c16 	andeq	r2, r0, r6, lsl ip
     c94:	09a61600 	stmibeq	r6!, {r9, sl, ip}
void __pi_ondomain (lword d) {
     c98:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c9c:	16000000 	strne	r0, [r0], -r0
		if (__pi_systat.effpdm > 1)
     ca0:	00000caa 	andeq	r0, r0, sl, lsr #25
     ca4:	000cb016 	andeq	fp, ip, r6, lsl r0
			__pi_systat.effpdm = 1;
     ca8:	04110000 	ldreq	r0, [r1], #-0
	PRCMPowerDomainOn (d);
     cac:	0000002c 	andeq	r0, r0, ip, lsr #32
     cb0:	0bcd0411 	bleq	ff341cfc <_estack+0xdf33ccfc>
     cb4:	04110000 	ldreq	r0, [r1], #-0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     cb8:	00000c86 	andeq	r0, r0, r6, lsl #25
     cbc:	002c0115 	eoreq	r0, ip, r5, lsl r1
     cc0:	0cd10000 	ldcleq	0, cr0, [r1], {0}
	__pi_systat.ondmns |= d;
     cc4:	a6160000 	ldrge	r0, [r6], -r0
     cc8:	16000009 	strne	r0, [r0], -r9
}
     ccc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cd0:	bc041100 	stflts	f1, [r4], {-0}
void __pi_offdomain (lword d) {
     cd4:	1500000c 	strne	r0, [r0, #-12]
     cd8:	00002c01 	andeq	r2, r0, r1, lsl #24
	PRCMPowerDomainOff (d);
     cdc:	000ce700 	andeq	lr, ip, r0, lsl #14
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ce0:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     ce4:	11000000 	mrsne	r0, (UNDEF: 0)
     ce8:	000cd704 	andeq	sp, ip, r4, lsl #14
	if (d & PRCM_DOMAIN_RFCORE) {
     cec:	0d350500 	cfldr32eq	mvfx0, [r5, #-0]
     cf0:	1f0d0000 	svcne	0x000d0000
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cf4:	000bd903 	andeq	sp, fp, r3, lsl #18
     cf8:	0ced1700 	stcleq	7, cr1, [sp]
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cfc:	6e210000 	cdpvs	0, 2, cr0, cr1, cr0, {0}
     d00:	0c000003 	stceq	0, cr0, [r0], {3}
	__pi_systat.ondmns &= ~d;
     d04:	890e02d8 	stmdbhi	lr, {r3, r4, r6, r7, r9}
     d08:	01000009 	tsteq	r0, r9
}
     d0c:	0c081c01 	stceq	12, cr1, [r8], {1}
     d10:	34090303 	strcc	r0, [r9], #-771	; 0xfffffcfd
void __pi_syserror (word ec, const char *m) {
     d14:	1900000d 	stmdbne	r0, {r0, r2, r3}
	diag ("SYSERR: %x, %s", ec, m);
     d18:	00003ca1 	andeq	r3, r0, r1, lsr #25
     d1c:	0703070c 	streq	r0, [r3, -ip, lsl #14]
  __ASM volatile ("cpsid i" : : : "memory");
     d20:	00000962 	andeq	r0, r0, r2, ror #18
     d24:	0fcd1900 	svceq	0x00cd1900
     d28:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     d2c:	099a0803 	ldmibeq	sl, {r0, r1, fp}
		all_leds_blink;
     d30:	00040000 	andeq	r0, r4, r0
     d34:	000a0904 	andeq	r0, sl, r4, lsl #18
     d38:	03090c00 	movweq	r0, #39936	; 0x9c00
     d3c:	000d0d03 	andeq	r0, sp, r3, lsl #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d40:	00291b00 	eoreq	r1, r9, r0, lsl #22
     d44:	0c300000 	ldceq	0, cr0, [r0], #-0
     d48:	a408030b 	strge	r0, [r8], #-779	; 0xfffffcf5
     d4c:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d50:	00001f24 	andeq	r1, r0, r4, lsr #30
     d54:	0703140c 	streq	r1, [r3, -ip, lsl #8]
	while (1) {
     d58:	00000962 	andeq	r0, r0, r2, ror #18
     d5c:	0be71900 	bleq	ff9c7164 <_estack+0xdf9c2164>
     d60:	150c0000 	strne	r0, [ip, #-0]
     d64:	09620703 	stmdbeq	r2!, {r0, r1, r8, r9, sl}^
void tci_run_delay_timer () {
     d68:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
	setdel = __pi_mintk - __pi_old;
     d6c:	00004c8e 	andeq	r4, r0, lr, lsl #25
     d70:	0a03160c 	beq	c65a8 <__ccfg+0xa6600>
     d74:	00000b5c 	andeq	r0, r0, ip, asr fp
     d78:	47541904 	ldrbmi	r1, [r4, -r4, lsl #18]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d7c:	170c0000 	strne	r0, [ip, -r0]
     d80:	099a0803 	ldmibeq	sl, {r0, r1, fp}
     d84:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     d88:	0000000f 	andeq	r0, r0, pc
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d8c:	0f03180c 	svceq	0x0003180c
	sti_tim;
     d90:	00000da4 	andeq	r0, r0, r4, lsr #27
}
     d94:	095d190c 	ldmdbeq	sp, {r2, r3, r8, fp, ip}^
     d98:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     d9c:	0db41503 	cfldr32eq	mvfx1, [r4, #12]!
     da0:	002c0000 	eoreq	r0, ip, r0
     da4:	000d3408 	andeq	r3, sp, r8, lsl #8
	cli_aux;
     da8:	000db400 	andeq	fp, sp, r0, lsl #8
     dac:	00250900 	eoreq	r0, r5, r0, lsl #18
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db0:	00030000 	andeq	r0, r3, r0
     db4:	0d410411 	cfstrdeq	mvd0, [r1, #-68]	; 0xffffffbc
     db8:	dc040000 	stcle	0, cr0, [r4], {-0}
     dbc:	0c00000b 	stceq	0, cr0, [r0], {11}
	sti_aux;
     dc0:	411b031c 	tstmi	fp, ip, lsl r3
}
     dc4:	2100000d 	tstcs	r0, sp
     dc8:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
     dcc:	14031e0c 	strne	r1, [r3], #-3596	; 0xfffff1f4
void AONRTCIntHandler () {
     dd0:	00000dd6 	ldrdeq	r0, [r0], -r6
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     dd4:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
     dd8:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     ddc:	00070f24 	andeq	r0, r7, r4, lsr #30
		if (__pi_utims [0] == 0)
     de0:	0d1d0e00 	ldceq	14, cr0, [sp, #-0]
     de4:	00000962 	andeq	r0, r0, r2, ror #18
		if (*(__pi_utims [0])) {
     de8:	ee240101 	sufs	f0, f4, f1
     dec:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
			(*(__pi_utims [0]))--;
     df0:	0973161e 	ldmdbeq	r3!, {r1, r2, r3, r4, r9, sl, ip}^
		if (__pi_utims [1] == 0)
     df4:	01010000 	mrseq	r0, (UNDEF: 1)
		if (*(__pi_utims [1])) {
     df8:	000c6924 	andeq	r6, ip, r4, lsr #18
			aux_timer_inactive = 0;
     dfc:	201e0e00 	andscs	r0, lr, r0, lsl #28
			(*(__pi_utims [1]))--;
     e00:	00000973 	andeq	r0, r0, r3, ror r9
		if (__pi_utims [2] == 0)
     e04:	87240101 	strhi	r0, [r4, -r1, lsl #2]!
		if (*(__pi_utims [2])) {
     e08:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
			(*(__pi_utims [2]))--;
     e0c:	0dd61422 	cfldrdeq	mvd1, [r6, #136]	; 0x88
		if (__pi_utims [3] != 0) {
     e10:	01010000 	mrseq	r0, (UNDEF: 1)
			if (*(__pi_utims [3])) {
     e14:	00001624 	andeq	r1, r0, r4, lsr #12
				aux_timer_inactive = 0;
     e18:	180c0f00 	stmdane	ip, {r8, r9, sl, fp}
				(*(__pi_utims [3]))--;
     e1c:	00000cf9 	strdeq	r0, [r0], -r9
	if (__pi_systat.ledsts) {
     e20:	1c260101 	stfnes	f0, [r6], #-4
     e24:	01000006 	tsteq	r0, r6
		if (__pi_systat.ledblc++ == 0) {
     e28:	00000047 	andeq	r0, r0, r7, asr #32
     e2c:	58061910 	stmdapl	r6, {r4, r8, fp, ip}
			if (__pi_systat.ledblk) {
     e30:	2700000e 	strcs	r0, [r0, -lr]
     e34:	00000bed 	andeq	r0, r0, sp, ror #23
     e38:	09c32700 	stmibeq	r3, {r8, r9, sl, sp}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e3c:	27010000 	strcs	r0, [r1, -r0]
     e40:	00000f21 	andeq	r0, r0, r1, lsr #30
				if (__pi_systat.ledsts & 0x2)
     e44:	0b352702 	bleq	d4aa54 <__ccfg+0xd2aaac>
     e48:	27030000 	strcs	r0, [r3, -r0]
     e4c:	00000983 	andeq	r0, r0, r3, lsl #19
				if (__pi_systat.ledsts & 0x4)
     e50:	09cd2704 	stmibeq	sp, {r2, r8, r9, sl, sp}^
				__pi_systat.ledblk = 0;
     e54:	00050000 	andeq	r0, r5, r0
     e58:	001f2426 	andseq	r2, pc, r6, lsr #8
			if (__pi_systat.fstblk)
     e5c:	00470100 	subeq	r0, r7, r0, lsl #2
     e60:	22100000 	andscs	r0, r0, #0
				__pi_systat.ledblc = 200;
     e64:	000e8806 	andeq	r8, lr, r6, lsl #16
	if (events & AON_RTC_EVFLAGS_CH0) {
     e68:	033a2700 	teqeq	sl, #0, 14
		cli_tim;
     e6c:	27000000 	strcs	r0, [r0, -r0]
		__pi_new += setdel;
     e70:	00000653 	andeq	r0, r0, r3, asr r6
     e74:	04662701 	strbteq	r2, [r6], #-1793	; 0xfffff8ff
		setdel = 0;
     e78:	27020000 	strcs	r0, [r2, -r0]
		RISE_N_SHINE;
     e7c:	000008a8 	andeq	r0, r0, r8, lsr #17
		__pi_new += setdel;
     e80:	0b182703 	bleq	60aa94 <__ccfg+0x5eaaec>
		RISE_N_SHINE;
     e84:	00040000 	andeq	r0, r4, r0
     e88:	0004920f 	andeq	r9, r4, pc, lsl #4
		aux_timer_inactive = 1;
     e8c:	2c101c00 	ldccs	12, cr1, [r0], {-0}
     e90:	000ebd08 	andeq	fp, lr, r8, lsl #26
				if (__pi_systat.ledsts & 0x1)
     e94:	0f410b00 	svceq	0x00410b00
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e98:	2d100000 	ldccs	0, cr0, [r0, #-0]
     e9c:	0009260a 	andeq	r2, r9, sl, lsl #12
				if (__pi_systat.ledsts & 0x2)
     ea0:	7f0b0000 	svcvc	0x000b0000
     ea4:	10000007 	andne	r0, r0, r7
     ea8:	0ebd072e 	cdpeq	7, 11, cr0, cr13, cr14, {1}
				if (__pi_systat.ledsts & 0x8)
     eac:	0b010000 	bleq	40eb4 <__ccfg+0x20f0c>
				__pi_systat.ledblk = 1;
     eb0:	000005dc 	ldrdeq	r0, [r0], -ip
     eb4:	63102f10 	tstvs	r0, #16, 30	; 0x40
		if (aux_timer_inactive) {
     eb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
			cli_aux;
     ebc:	05c30800 	strbeq	r0, [r3, #2048]	; 0x800
     ec0:	0ecd0000 	cdpeq	0, 12, cr0, cr13, cr0, {0}
     ec4:	25090000 	strcs	r0, [r9, #-0]
     ec8:	13000000 	movwne	r0, #0
     ecc:	47541200 	ldrbmi	r1, [r4, -r0, lsl #4]
     ed0:	04640000 	strbteq	r0, [r4], #-0
     ed4:	f7083310 			; <UNDEFINED> instruction: 0xf7083310
     ed8:	0b00000e 	bleq	f18 <tci_update_delay_ticks+0x34>
     edc:	00000049 	andeq	r0, r0, r9, asr #32
     ee0:	f7103410 			; <UNDEFINED> instruction: 0xf7103410
word tci_update_delay_ticks (Boolean force) {
     ee4:	0000000e 	andeq	r0, r0, lr
	cli_tim;
     ee8:	00052d13 	andeq	r2, r5, r3, lsl sp
     eec:	0a351000 	beq	d44ef4 <__ccfg+0xd24f4c>
	if (setdel) {
     ef0:	00000926 	andeq	r0, r0, r6, lsr #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ef4:	08000460 	stmdaeq	r0, {r5, r6, sl}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ef8:	00000e88 	andeq	r0, r0, r8, lsl #29
     efc:	00000f07 	andeq	r0, r0, r7, lsl #30
     f00:	00002509 	andeq	r2, r0, r9, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f04:	12002700 	andne	r2, r0, #0, 14
				AON_RTC_O_CH0CMP)) - gettav ());
     f08:	00000461 	andeq	r0, r0, r1, ror #8
	return NO;
     f0c:	3c100484 	cfldrscc	mvf0, [r0], {132}	; 0x84
			setdel = 0;
     f10:	000f5808 	andeq	r5, pc, r8, lsl #16
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f14:	64691000 	strbtvs	r1, [r9], #-0
     f18:	0a3d1000 	beq	f44f20 <__ccfg+0xf24f78>
}
     f1c:	00000926 	andeq	r0, r0, r6, lsr #18
		sti_tim;
     f20:	69671000 	stmdbvs	r7!, {ip}^
		return YES;
     f24:	3e100064 	cdpcc	0, 1, cr0, cr0, cr4, {3}
     f28:	0009320b 	andeq	r3, r9, fp, lsl #4
     f2c:	d30b0200 	movwle	r0, #45568	; 0xb200
     f30:	1000000c 	andne	r0, r0, ip
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f34:	0ecd0e3f 	mcreq	14, 6, r0, cr13, cr15, {1}
	UARTDisable (UART0_BASE);
     f38:	13040000 	movwne	r0, #16384	; 0x4000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f3c:	000002a5 	andeq	r0, r0, r5, lsr #5
	UARTDisable (UART0_BASE);
     f40:	580a4010 	stmdapl	sl, {r4, lr}
	UARTConfigSetExpClk (UART0_BASE,
     f44:	6800000f 	stmdavs	r0, {r0, r1, r2, r3}
     f48:	04c21304 	strbeq	r1, [r2], #772	; 0x304
     f4c:	41100000 	tstmi	r0, r0
     f50:	0009260a 	andeq	r2, r9, sl, lsl #12
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f54:	00048100 	andeq	r8, r4, r0, lsl #2
     f58:	00092608 	andeq	r2, r9, r8, lsl #12
     f5c:	000f6800 	andeq	r6, pc, r0, lsl #16
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f60:	00250900 	eoreq	r0, r5, r0, lsl #18
     f64:	00180000 	andseq	r0, r8, r0
     f68:	0006f70f 	andeq	pc, r6, pc, lsl #14
	urates [0] = rate;
     f6c:	44100600 	ldrmi	r0, [r0], #-1536	; 0xfffffa00
}
     f70:	000fb708 	andeq	fp, pc, r8, lsl #14
     f74:	69671000 	stmdbvs	r7!, {ip}^
     f78:	45100064 	ldrmi	r0, [r0, #-100]	; 0xffffff9c
     f7c:	0009320b 	andeq	r3, r9, fp, lsl #4
     f80:	74100000 	ldrvc	r0, [r0], #-0
     f84:	10006570 	andne	r6, r0, r0, ror r5
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f88:	09260a46 	stmdbeq	r6!, {r1, r2, r6, r9, fp}
     f8c:	0b020000 	bleq	80f94 <__ccfg+0x60fec>
     f90:	00000d82 	andeq	r0, r0, r2, lsl #27
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f94:	260a4710 			; <UNDEFINED> instruction: 0x260a4710
     f98:	03000009 	movweq	r0, #9
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f9c:	0004df0b 	andeq	sp, r4, fp, lsl #30
     fa0:	0a481000 	beq	1204fa8 <__ccfg+0x11e5000>
	__pi_uart_setrate (urates [0], __pi_uart);
     fa4:	00000926 	andeq	r0, r0, r6, lsr #18
     fa8:	02990b04 	addseq	r0, r9, #4, 22	; 0x1000
     fac:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
     fb0:	0009260a 	andeq	r2, r9, sl, lsl #12
     fb4:	0f000500 	svceq	0x00000500
     fb8:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     fbc:	084c1006 	stmdaeq	ip, {r1, r2, ip}^
	switch (operation) {
     fc0:	00001006 	andeq	r1, r0, r6
static int ioreq_uart_a (int operation, char *buf, int len) {
     fc4:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
     fc8:	0b4d1000 	bleq	1344fd0 <__ccfg+0x1325028>
     fcc:	00000932 	andeq	r0, r0, r2, lsr r9
     fd0:	70741000 	rsbsvc	r1, r4, r0
     fd4:	4e100065 	cdpmi	0, 1, cr0, cr0, cr5, {3}
				*buf++ = uart_a_read;
     fd8:	0009260a 	andeq	r2, r9, sl, lsl #12
     fdc:	820b0200 	andhi	r0, fp, #0, 4
			while (len && uart_a_char_available) {
     fe0:	1000000d 	andne	r0, r0, sp
     fe4:	09260a4f 	stmdbeq	r6!, {r0, r1, r2, r3, r6, r9, fp}
     fe8:	0b030000 	bleq	c0ff0 <__ccfg+0xa1048>
			if (len != operation) {
     fec:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
}
     ff0:	260a5010 			; <UNDEFINED> instruction: 0x260a5010
     ff4:	04000009 	streq	r0, [r0], #-9
			uart_a_disable_int;
     ff8:	0002990b 	andeq	r9, r2, fp, lsl #18
			if (uart_a_char_available) {
     ffc:	0a511000 	beq	1445004 <__ccfg+0x142505c>
				*buf++ = uart_a_read;
    1000:	00000926 	andeq	r0, r0, r6, lsr #18
			uart_a_disable_int;
    1004:	a00f0005 	andge	r0, pc, r5
    1008:	1a00000b 	bne	103c <ioreq_uart_a+0x7c>
			if (uart_a_char_available) {
    100c:	62085410 	andvs	r5, r8, #16, 8	; 0x10000000
    1010:	10000010 	andne	r0, r0, r0, lsl r0
				uart_a_enable_int;
    1014:	00646967 	rsbeq	r6, r4, r7, ror #18
    1018:	320b5510 	andcc	r5, fp, #16, 10	; 0x4000000
				goto Redo_rx;
    101c:	00000009 	andeq	r0, r0, r9
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    1020:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1024:	0a561000 	beq	158502c <__ccfg+0x1565084>
			return -2;
    1028:	00000926 	andeq	r0, r0, r6, lsr #18
    102c:	0d820b02 	vstreq	d0, [r2, #8]
				uart_a_write (*buf);
    1030:	57100000 	ldrpl	r0, [r0, -r0]
    1034:	0009260a 	andeq	r2, r9, sl, lsl #12
			while (len && uart_a_room_in_tx) {
    1038:	df0b0300 	svcle	0x000b0300
    103c:	10000004 	andne	r0, r0, r4
    1040:	09260a58 	stmdbeq	r6!, {r3, r4, r6, r9, fp}
			if (len != operation) {
    1044:	0b040000 	bleq	10104c <__ccfg+0xe10a4>
			uart_a_disable_int;
    1048:	00000299 	muleq	r0, r9, r2
    104c:	260a5910 			; <UNDEFINED> instruction: 0x260a5910
			if (uart_a_room_in_tx) {
    1050:	05000009 	streq	r0, [r0, #-9]
    1054:	0004920b 	andeq	r9, r4, fp, lsl #4
				uart_a_enable_int;
    1058:	075a1000 	ldrbeq	r1, [sl, -r0]
    105c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
				*buf++ = uart_a_read;
    1060:	500f0006 	andpl	r0, pc, r6
			if (uart_a_room_in_tx) {
    1064:	0800000e 	stmdaeq	r0, {r1, r2, r3}
				uart_a_write (*buf);
    1068:	cb085d10 	blgt	2184b0 <__ccfg+0x1f8508>
    106c:	10000010 	andne	r0, r0, r0, lsl r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1070:	00646967 	rsbeq	r6, r4, r7, ror #18
    1074:	320b5e10 	andcc	r5, fp, #16, 28	; 0x100
			uart_a_enable_int;
    1078:	00000009 	andeq	r0, r0, r9
    107c:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1080:	0a5f1000 	beq	17c5088 <__ccfg+0x17a50e0>
			return 0;
    1084:	00000926 	andeq	r0, r0, r6, lsr #18
			if (len == UART_CNTRL_SETRATE) {
    1088:	0d820b02 	vstreq	d0, [r2, #8]
				if (__pi_uart_setrate (*((word*)buf),
    108c:	60100000 	andsvs	r0, r0, r0
    1090:	0009260a 	andeq	r2, r9, sl, lsl #12
    1094:	df0b0300 	svcle	0x000b0300
				syserror (EREQPAR, "uar");
    1098:	10000004 	andne	r0, r0, r4
			syserror (ENOOPER, "uai");
    109c:	09260a61 	stmdbeq	r6!, {r0, r5, r6, r9, fp}
			if (len == UART_CNTRL_GETRATE) {
    10a0:	0b040000 	bleq	1010a8 <__ccfg+0xe1100>
				return 1;
    10a4:	00000299 	muleq	r0, r9, r2
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    10a8:	260a6210 			; <UNDEFINED> instruction: 0x260a6210
			syserror (ENOOPER, "uai");
    10ac:	05000009 	streq	r0, [r0, #-9]
    10b0:	0000640b 	andeq	r6, r0, fp, lsl #8
    10b4:	0a631000 	beq	18c50bc <__ccfg+0x18a5114>
    10b8:	00000926 	andeq	r0, r0, r6, lsr #18
    10bc:	08290b06 	stmdaeq	r9!, {r1, r2, r8, r9, fp}
    10c0:	64100000 	ldrvs	r0, [r0], #-0
    10c4:	0009260a 	andeq	r2, r9, sl, lsl #12
    10c8:	0f000700 	svceq	0x00000700
    10cc:	00000eea 	andeq	r0, r0, sl, ror #29
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    10d0:	08681008 	stmdaeq	r8!, {r3, ip}^
void UART0IntHandler () {
    10d4:	00001134 	andeq	r1, r0, r4, lsr r1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10d8:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
    10dc:	0b691000 	bleq	1a450e4 <__ccfg+0x1a2513c>
    10e0:	00000932 	andeq	r0, r0, r2, lsr r9
    10e4:	70741000 	rsbsvc	r1, r4, r0
    10e8:	6a100065 	bvs	401284 <__ccfg+0x3e12dc>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10ec:	0009260a 	andeq	r2, r9, sl, lsl #12
    10f0:	820b0200 	andhi	r0, fp, #0, 4
		RISE_N_SHINE;
    10f4:	1000000d 	andne	r0, r0, sp
    10f8:	09260a6b 	stmdbeq	r6!, {r0, r1, r3, r5, r6, r9, fp}
		i_trigger (devevent (UART_A, READ));
    10fc:	0b030000 	bleq	c1104 <__ccfg+0xa115c>
    1100:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1104:	260a6c10 			; <UNDEFINED> instruction: 0x260a6c10
    1108:	04000009 	streq	r0, [r0], #-9
    110c:	0002990b 	andeq	r9, r2, fp, lsl #18
    1110:	0a6d1000 	beq	1b45118 <__ccfg+0x1b25170>
    1114:	00000926 	andeq	r0, r0, r6, lsr #18
    1118:	00640b05 	rsbeq	r0, r4, r5, lsl #22
    111c:	6e100000 	cdpvs	0, 1, cr0, cr0, cr0, {0}
    1120:	0009260a 	andeq	r2, r9, sl, lsl #12
    1124:	290b0600 	stmdbcs	fp, {r9, sl}
    1128:	10000008 	andne	r0, r0, r8
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    112c:	09260a6f 	stmdbeq	r6!, {r0, r1, r2, r3, r5, r6, r9, fp}
    1130:	00070000 	andeq	r0, r7, r0
    1134:	0002c30f 	andeq	ip, r2, pc, lsl #6
		i_trigger (devevent (UART_A, WRITE));
    1138:	76101e00 	ldrvc	r1, [r0], -r0, lsl #28
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    113c:	0011b708 	andseq	fp, r1, r8, lsl #14
    1140:	69671000 	stmdbvs	r7!, {ip}^
		RISE_N_SHINE;
    1144:	77100064 	ldrvc	r0, [r0, -r4, rrx]
    1148:	0009320b 	andeq	r3, r9, fp, lsl #4
    114c:	74100000 	ldrvc	r0, [r0], #-0
		i_trigger (devevent (UART_A, WRITE));
    1150:	10006570 	andne	r6, r0, r0, ror r5
    1154:	09260a78 	stmdbeq	r6!, {r3, r4, r5, r6, r9, fp}
    1158:	0b020000 	bleq	81160 <__ccfg+0x611b8>
    115c:	00000d82 	andeq	r0, r0, r2, lsl #27
    1160:	260a7910 			; <UNDEFINED> instruction: 0x260a7910
    1164:	03000009 	movweq	r0, #9
    1168:	0004df0b 	andeq	sp, r4, fp, lsl #30
    116c:	0a7a1000 	beq	1e85174 <__ccfg+0x1e651cc>
    1170:	00000926 	andeq	r0, r0, r6, lsr #18
    1174:	02990b04 	addseq	r0, r9, #4, 22	; 0x1000
    1178:	7b100000 	blvc	401180 <__ccfg+0x3e11d8>
}
    117c:	0009260a 	andeq	r2, r9, sl, lsl #12
    1180:	780b0500 	stmdavc	fp, {r8, sl}
    1184:	10000007 	andne	r0, r0, r7
    1188:	09260a7c 	stmdbeq	r6!, {r2, r3, r4, r5, r6, r9, fp}
    118c:	0b060000 	bleq	181194 <__ccfg+0x1611ec>
void __buttons_setirq (int val) {
    1190:	00000829 	andeq	r0, r0, r9, lsr #16
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1194:	260a7d10 			; <UNDEFINED> instruction: 0x260a7d10
    1198:	07000009 	streq	r0, [r0, -r9]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    119c:	0004920b 	andeq	r9, r4, fp, lsl #4
    11a0:	077e1000 	ldrbeq	r1, [lr, -r0]!
    11a4:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
		bn = BUTTON_GPIO (__button_list [i]);
    11a8:	00640b08 	rsbeq	r0, r4, r8, lsl #22
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11ac:	7f100000 	svcvc	0x00100000
    11b0:	0009260a 	andeq	r2, r9, sl, lsl #12
    11b4:	28001c00 	stmdacs	r0, {sl, fp, ip}
    11b8:	00000e90 	muleq	r0, r0, lr
    11bc:	c3060301 	movwgt	r0, #25345	; 0x6301
    11c0:	01000005 	tsteq	r0, r5
}
    11c4:	069d0305 	ldreq	r0, [sp], r5, lsl #6
    11c8:	c3082000 	movwgt	r2, #32768	; 0x8000
    11cc:	da000005 	ble	11e8 <__pinlist_setirq+0x14>
    11d0:	09000011 	stmdbeq	r0, {r0, r4}
void __pinlist_setirq (int val) {
    11d4:	00000025 	andeq	r0, r0, r5, lsr #32
	for (i = 0; i < N_PINLIST; i++) {
    11d8:	5a280031 	bpl	a012a4 <__ccfg+0x9e12fc>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11dc:	01000004 	tsteq	r0, r4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11e0:	11ca0604 	bicne	r0, sl, r4, lsl #12
	for (i = 0; i < N_PINLIST; i++) {
    11e4:	05010000 	streq	r0, [r1, #-0]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11e8:	00065403 	andeq	r5, r6, r3, lsl #8
    11ec:	66732920 	ldrbtvs	r2, [r3], -r0, lsr #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11f0:	05010064 	streq	r0, [r1, #-100]	; 0xffffff9c
    11f4:	00002c05 	andeq	r2, r0, r5, lsl #24
    11f8:	03050100 	movweq	r0, #20736	; 0x5100
	for (i = 0; i < N_PINLIST; i++) {
    11fc:	20000000 	andcs	r0, r0, r0
}
    1200:	00002c08 	andeq	r2, r0, r8, lsl #24
    1204:	00121000 	andseq	r1, r2, r0
    1208:	00250900 	eoreq	r0, r5, r0, lsl #18
    120c:	00010000 	andeq	r0, r1, r0
void GPIOIntHandler () {
    1210:	0006e628 	andeq	lr, r6, r8, lsr #12
if (buttons_int) {
    1214:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1218:	00001200 	andeq	r1, r0, r0, lsl #4
	buttons_disable ();
    121c:	44030501 	strmi	r0, [r3], #-1281	; 0xfffffaff
    1220:	28200006 	stmdacs	r0!, {r1, r2}
	i_trigger ((aword)&__button_list);
    1224:	00000993 	muleq	r0, r3, r9
    1228:	2c050901 			; <UNDEFINED> instruction: 0x2c050901
    122c:	01000000 	mrseq	r0, (UNDEF: 0)
    1230:	05400305 	strbeq	r0, [r0, #-773]	; 0xfffffcfb
    1234:	84282000 	strthi	r2, [r8], #-0
    1238:	01000004 	tsteq	r0, r4
    123c:	0ebd060a 	cdpeq	6, 11, cr0, cr13, cr10, {0}
    1240:	05010000 	streq	r0, [r1, #-0]
    1244:	00062c03 	andeq	r2, r6, r3, lsl #24
    1248:	04b42820 	ldrteq	r2, [r4], #2080	; 0x820
    124c:	0b010000 	bleq	41254 <__ccfg+0x212ac>
	RISE_N_SHINE;
    1250:	00092609 	andeq	r2, r9, r9, lsl #12
    1254:	03050100 	movweq	r0, #20736	; 0x5100
    1258:	20000688 	andcs	r0, r0, r8, lsl #13
if (pin_sensor_int) {
    125c:	00002028 	andeq	r2, r0, r8, lsr #32
    1260:	090c0100 	stmdbeq	ip, {r8}
	i_trigger ((aword)(&__input_pins));
    1264:	00000926 	andeq	r0, r0, r6, lsr #18
    1268:	40030501 	andmi	r0, r3, r1, lsl #10
    126c:	28200006 	stmdacs	r0!, {r1, r2}
    1270:	00000475 	andeq	r0, r0, r5, ror r4
    1274:	26090d01 	strcs	r0, [r9], -r1, lsl #26
    1278:	01000009 	tsteq	r0, r9
    127c:	06860305 	streq	r0, [r6], r5, lsl #6
    1280:	b7282000 	strlt	r2, [r8, -r0]!
    1284:	0100000c 	tsteq	r0, ip
    1288:	0926090e 	stmdbeq	r6!, {r1, r2, r3, r8, fp}
    128c:	05010000 	streq	r0, [r1, #-0]
	__pinsen_disable_and_clear;
    1290:	00068703 	andeq	r8, r6, r3, lsl #14
	RISE_N_SHINE;
    1294:	028b2820 	addeq	r2, fp, #32, 16	; 0x200000
    1298:	0f010000 	svceq	0x00010000
    129c:	00092609 	andeq	r2, r9, r9, lsl #12
}
    12a0:	03050100 	movweq	r0, #20736	; 0x5100
    12a4:	2000069e 	mulcs	r0, lr, r6
    12a8:	000c2328 	andeq	r2, ip, r8, lsr #6
    12ac:	09100100 	ldmdbeq	r0, {r8}
    12b0:	000009a6 	andeq	r0, r0, r6, lsr #19
void system_init () {
    12b4:	4c030501 	cfstr32mi	mvfx0, [r3], {1}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12b8:	28200006 	stmdacs	r0!, {r1, r2}
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    12bc:	0000004e 	andeq	r0, r0, lr, asr #32
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12c0:	bd061101 	stflts	f1, [r6, #-4]
    12c4:	0100000e 	tsteq	r0, lr
    12c8:	06890305 	streq	r0, [r9], r5, lsl #6
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    12cc:	78282000 	stmdavc	r8!, {sp}
    12d0:	01000002 	tsteq	r0, r2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12d4:	12e11912 	rscne	r1, r1, #294912	; 0x48000
    12d8:	05010000 	streq	r0, [r1, #-0]
    12dc:	00065003 	andeq	r5, r6, r3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12e0:	34041120 	strcc	r1, [r4], #-288	; 0xfffffee0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12e4:	28000011 	stmdacs	r0, {r0, r4}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12e8:	0000085f 	andeq	r0, r0, pc, asr r8
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ec:	62061301 	andvs	r1, r6, #67108864	; 0x4000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f0:	01000009 	tsteq	r0, r9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12f4:	05480305 	strbeq	r0, [r8, #-773]	; 0xfffffcfb
		pin = (port_confs [i] >> 19) & 0x1f;
    12f8:	45282000 	strmi	r2, [r8, #-0]!
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12fc:	01000004 	tsteq	r0, r4
		pin = (port_confs [i] >> 19) & 0x1f;
    1300:	130d0e15 	movwne	r0, #56853	; 0xde15
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1304:	05010000 	streq	r0, [r1, #-0]
    1308:	0006a003 	andeq	sl, r6, r3
    130c:	07041120 	streq	r1, [r4, -r0, lsr #2]
    1310:	2a00000f 	bcs	1354 <system_init+0xa0>
		if (port_confs [i] & 0x80)
    1314:	0001b601 	andeq	fp, r1, r1, lsl #12
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1318:	022b0100 	eoreq	r0, fp, #0, 2
    131c:	06800106 	streq	r0, [r0], r6, lsl #2
		if (port_confs [i] & 0x40)
    1320:	0c340000 	ldceq	0, cr0, [r4], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1324:	9c010000 	stcls	0, cr0, [r1], {-0}
    1328:	0000162e 	andeq	r1, r0, lr, lsr #12
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    132c:	000c332b 	andeq	r3, ip, fp, lsr #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1330:	022b0100 	eoreq	r0, fp, #0, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1334:	00096211 	andeq	r6, r9, r1, lsl r2
	all_leds_blink;
    1338:	00000000 	andeq	r0, r0, r0
    133c:	0c3b2c00 	ldceq	12, cr2, [fp], #-0
    1340:	34010000 	strcc	r0, [r1], #-0
    1344:	06d01902 	ldrbeq	r1, [r0], r2, lsl #18
    1348:	1f2c0000 	svcne	0x002c0000
    134c:	01000009 	tsteq	r0, r9
    1350:	1e10026c 	cdpne	2, 1, cr0, cr0, cr12, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1354:	2c000007 	stccs	0, cr0, [r0], {7}
    1358:	0000008d 	andeq	r0, r0, sp, lsl #1
    135c:	16026f01 	strne	r6, [r2], -r1, lsl #30
    1360:	00000738 	andeq	r0, r0, r8, lsr r7
    1364:	0008062c 	andeq	r0, r8, ip, lsr #12
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1368:	02980100 	addseq	r0, r8, #0, 2
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    136c:	00077c1c 	andeq	r7, r7, ip, lsl ip
    1370:	01eb2c00 	mvneq	r2, r0, lsl #24
	IntEnable (INT_AON_RTC_COMB);
    1374:	9c010000 	stcls	0, cr0, [r1], {-0}
    1378:	07841802 	streq	r1, [r4, r2, lsl #16]
    137c:	762c0000 	strtvc	r0, [ip], -r0
	__pi_malloc_init ();
    1380:	01000003 	tsteq	r0, r3
	IntEnable (INT_AON_GPIO_EDGE);
    1384:	a61b02aa 	ldrge	r0, [fp], -sl, lsr #5
    1388:	2c000007 	stccs	0, cr0, [r0], {7}
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    138c:	000002d3 	ldrdeq	r0, [r0], -r3
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1390:	1702ad01 	strne	sl, [r2, -r1, lsl #26]
    1394:	000007ae 	andeq	r0, r0, lr, lsr #15
    1398:	0007952c 	andeq	r9, r7, ip, lsr #10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    139c:	02c80100 	sbceq	r0, r8, #0, 2
    13a0:	0007f41b 	andeq	pc, r7, fp, lsl r4	; <UNPREDICTABLE>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    13a4:	05002c00 	streq	r2, [r0, #-3072]	; 0xfffff400
    13a8:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    13ac:	080a2102 	stmdaeq	sl, {r1, r8, sp}
	urates [0] = UART_RATE / 100;
    13b0:	6a2c0000 	bvs	b013b8 <__ccfg+0xae1410>
    13b4:	01000009 	tsteq	r0, r9
	reinit_uart ();
    13b8:	241c02de 	ldrcs	r0, [ip], #-734	; 0xfffffd22
	EXTRA_INITIALIZERS;
    13bc:	2c000008 	stccs	0, cr0, [r0], {8}
    13c0:	0000067e 	andeq	r0, r0, lr, ror r6
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    13c4:	1a02eb01 	bne	bbfd0 <__ccfg+0x9c028>
    13c8:	00000896 	muleq	r0, r6, r8
    13cc:	000d3f2c 	andeq	r3, sp, ip, lsr #30
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    13d0:	02f70100 	rscseq	r0, r7, #0, 2
    13d4:	00090423 	andeq	r0, r9, r3, lsr #8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13d8:	03f02c00 	mvnseq	r2, #0, 24
    13dc:	0d010000 	stceq	0, cr0, [r1, #-0]
			devinit [i] . init (devinit [i] . param);
    13e0:	092c1e03 	stmdbeq	ip!, {r0, r1, r9, sl, fp, ip}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13e4:	522c0000 	eorpl	r0, ip, #0
    13e8:	01000005 	tsteq	r0, r5
    13ec:	341d0310 	ldrcc	r0, [sp], #-784	; 0xfffffcf0
	IntEnable (INT_UART0_COMB);
    13f0:	2c000009 	stccs	0, cr0, [r0], {9}
    13f4:	00000de9 	andeq	r0, r0, r9, ror #27
}
    13f8:	24031801 	strcs	r1, [r3], #-2049	; 0xfffff7ff
	tci_run_auxiliary_timer ();
    13fc:	00000958 	andeq	r0, r0, r8, asr r9
		diag ("");
    1400:	0007ad2c 	andeq	sl, r7, ip, lsr #26
    1404:	031b0100 	tsteq	fp, #0, 2
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1408:	00096020 	andeq	r6, r9, r0, lsr #32
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    140c:	0a752c00 	beq	1d4c414 <__ccfg+0x1d2c46c>
		diag ("Leftover RAM: %d bytes",
    1410:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1414:	096a2603 	stmdbeq	sl!, {r0, r1, r9, sl, sp}^
    1418:	d02c0000 	eorle	r0, ip, r0
    141c:	01000001 	tsteq	r0, r1
    1420:	ba1e0338 	blt	782108 <__ccfg+0x762160>
    1424:	2c000009 	stccs	0, cr0, [r0], {9}
    1428:	00000200 	andeq	r0, r0, r0, lsl #4
    142c:	1d033b01 	vstrne	d3, [r3, #-4]
    1430:	000009c2 	andeq	r0, r0, r2, asr #19
    1434:	0000542c 	andeq	r5, r0, ip, lsr #8
    1438:	03430100 	movteq	r0, #12544	; 0x3100
    143c:	0009e620 	andeq	lr, r9, r0, lsr #12
    1440:	0a462c00 	beq	118c448 <__ccfg+0x116c4a0>
    1444:	46010000 	strmi	r0, [r1], -r0
    1448:	09ee2003 	stmibeq	lr!, {r0, r1, sp}^
    144c:	912c0000 			; <UNDEFINED> instruction: 0x912c0000
    1450:	0100000d 	tsteq	r0, sp
    1454:	1026034e 	eorne	r0, r6, lr, asr #6
    1458:	2c00000a 	stccs	0, cr0, [r0], {10}
    145c:	0000059e 	muleq	r0, lr, r5
    1460:	20036901 	andcs	r6, r3, r1, lsl #18
    1464:	00000a58 	andeq	r0, r0, r8, asr sl
    1468:	0009a72c 	andeq	sl, r9, ip, lsr #14
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    146c:	036c0100 	cmneq	ip, #0, 2
    1470:	000a601f 	andeq	r6, sl, pc, lsl r0
    1474:	0af22c00 	beq	ffc8c47c <_estack+0xdfc8747c>
    1478:	74010000 	strvc	r0, [r1], #-0
    147c:	0a842903 	beq	fe10b890 <_estack+0xde106890>
    1480:	272c0000 	strcs	r0, [ip, -r0]!
    1484:	0100000a 	tsteq	r0, sl
    1488:	8c220377 	stchi	3, cr0, [r2], #-476	; 0xfffffe24
}
    148c:	2c00000a 	stccs	0, cr0, [r0], {10}
__attribute__ ((noreturn)) void __pi_release () {
    1490:	000004e9 	andeq	r0, r0, r9, ror #9
    1494:	1a037f01 	bne	e10a0 <__ccfg+0xc10f8>
    1498:	00000aae 	andeq	r0, r0, lr, lsr #21
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    149c:	0004992c 	andeq	r9, r4, ip, lsr #18
	check_stack_overflow;
    14a0:	03940100 	orrseq	r0, r4, #0, 2
    14a4:	000b0e16 	andeq	r0, fp, r6, lsl lr
    14a8:	088e2c00 	stmeq	lr, {sl, fp, sp}
	update_n_wake (MAX_WORD, NO);
    14ac:	97010000 	strls	r0, [r1, -r0]
    14b0:	0b161d03 	bleq	5888c4 <__ccfg+0x56891c>
    14b4:	722c0000 	eorvc	r0, ip, #0
	for_all_tasks (__pi_curr) {
    14b8:	01000008 	tsteq	r0, r8
    14bc:	301503a0 	andscc	r0, r5, r0, lsr #7
    14c0:	2c00000b 	stccs	0, cr0, [r0], {11}
  __ASM volatile ("cpsid i" : : : "memory");
    14c4:	00000d20 	andeq	r0, r0, r0, lsr #26
	__SLEEP;
    14c8:	1003a401 	andne	sl, r3, r1, lsl #8
    14cc:	00000b3e 	andeq	r0, r0, lr, lsr fp
    14d0:	00071a2c 	andeq	r1, r7, ip, lsr #20
    14d4:	03a90100 			; <UNDEFINED> instruction: 0x03a90100
	system_event_count ++;
    14d8:	000ba213 	andeq	sl, fp, r3, lsl r2
    14dc:	0b272c00 	bleq	9cc4e4 <__ccfg+0x9ac53c>
	switch (__pi_systat.effpdm) {
    14e0:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    14e4:	0bb01103 	bleq	fec058f8 <_estack+0xdec008f8>
    14e8:	842d0000 	strthi	r0, [sp], #-0
    14ec:	a6000007 	strge	r0, [r0], -r7
			__WFI ();
    14f0:	2c000007 	stccs	0, cr0, [r0], {7}
    14f4:	2e000015 	mcrcs	0, 0, r0, cr0, cr5, {0}
    14f8:	00000c7a 	andeq	r0, r0, sl, ror ip
	check_stack_overflow;
    14fc:	0c029d01 	stceq	13, cr9, [r2], {1}
    1500:	00000932 	andeq	r0, r0, r2, lsr r9
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1504:	2f669102 	svccs	0x00669102
    1508:	00001b0f 	andeq	r1, r0, pc, lsl #22
			(__pi_curr->code) (tstate (__pi_curr));
    150c:	00000798 	muleq	r0, r8, r7
			goto Redo;
    1510:	000000a8 	andeq	r0, r0, r8, lsr #1
	for_all_tasks (__pi_curr) {
    1514:	0802a201 	stmdaeq	r2, {r0, r9, sp, pc}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1518:	001b2e30 	andseq	r2, fp, r0, lsr lr
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    151c:	00002900 	andeq	r2, r0, r0, lsl #18
    1520:	1b223000 	blne	88d528 <__ccfg+0x86d580>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1524:	003d0000 	eorseq	r0, sp, r0
    1528:	00000000 	andeq	r0, r0, r0
    152c:	0000c831 	andeq	ip, r0, r1, lsr r8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1530:	00158300 	andseq	r8, r5, r0, lsl #6
    1534:	03622e00 	cmneq	r2, #0, 28
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1538:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    153c:	09260b02 	stmdbeq	r6!, {r1, r8, r9, fp}
			__WFI ();
    1540:	91020000 	mrsls	r0, (UNDEF: 2)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	00e83166 	rsceq	r3, r8, r6, ror #2
    1548:	155e0000 	ldrbne	r0, [lr, #-0]
}
    154c:	69320000 	ldmdbvs	r2!, {}	; <UNPREDICTABLE>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1550:	02be0100 	adcseq	r0, lr, #0, 2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1554:	00002c0b 	andeq	r2, r0, fp, lsl #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1558:	00005000 	andeq	r5, r0, r0
    155c:	3b330000 	blcc	cc1564 <__ccfg+0xca15bc>
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1560:	c200001b 	andgt	r0, r0, #27
    1564:	c4000007 	strgt	r0, [r0], #-7
    1568:	01000007 	tsteq	r0, r7
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    156c:	300802b2 			; <UNDEFINED> instruction: 0x300802b2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1570:	00001b5a 	andeq	r1, r0, sl, asr fp
    1574:	0000006e 	andeq	r0, r0, lr, rrx
    1578:	001b4e30 	andseq	r4, fp, r0, lsr lr
    157c:	00008100 	andeq	r8, r0, r0, lsl #2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1580:	31000000 	mrscc	r0, (UNDEF: 0)
    1584:	00000100 	andeq	r0, r0, r0, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1588:	0000159e 	muleq	r0, lr, r5
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    158c:	000ed534 	andeq	sp, lr, r4, lsr r5
    1590:	02e00100 	rsceq	r0, r0, #0, 2
    1594:	0012e11b 	andseq	lr, r2, fp, lsl r1
    1598:	00009400 	andeq	r9, r0, r0, lsl #8
    159c:	18310000 	ldmdane	r1!, {}	; <UNPREDICTABLE>
			SysCtrlSetRechargeBeforePowerDown
    15a0:	b7000001 	strlt	r0, [r0, -r1]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    15a4:	32000015 	andcc	r0, r0, #21
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15a8:	fb010069 	blx	41756 <__ccfg+0x217ae>
    15ac:	002c0c02 	eoreq	r0, ip, r2, lsl #24
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15b0:	00b20000 	adcseq	r0, r2, r0
    15b4:	2d000000 	stccs	0, cr0, [r0, #-0]
    15b8:	0000096a 	andeq	r0, r0, sl, ror #18
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    15bc:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    15c0:	000015d6 	ldrdeq	r1, [r0], -r6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15c4:	00000034 	andeq	r0, r0, r4, lsr r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15c8:	03200100 	nopeq	{0}	; <UNPREDICTABLE>
    15cc:	0012e11b 	andseq	lr, r2, fp, lsl r1
    15d0:	0000d000 	andeq	sp, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    15d4:	102d0000 	eorne	r0, sp, r0
			while (!(AONWUCPowerStatusGet () &
    15d8:	5800000a 	stmdapl	r0, {r1, r3}
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15dc:	f500000a 			; <UNDEFINED> instruction: 0xf500000a
    15e0:	34000015 	strcc	r0, [r0], #-21	; 0xffffffeb
    15e4:	00000b82 	andeq	r0, r0, r2, lsl #23
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15e8:	1b035001 	blne	d55f4 <__ccfg+0xb564c>
    15ec:	000012e1 	andeq	r1, r0, r1, ror #5
    15f0:	000000ee 	andeq	r0, r0, lr, ror #1
    15f4:	0aae2d00 	beq	feb8c9fc <_estack+0xdeb879fc>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15f8:	0b0e0000 	bleq	381600 <__ccfg+0x361658>
    15fc:	16140000 	ldrne	r0, [r4], -r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1600:	d6340000 	ldrtle	r0, [r4], -r0
    1604:	01000009 	tsteq	r0, r9
			SysCtrlAdjustRechargeAfterPowerDown ();
    1608:	e11b0383 	tst	fp, r3, lsl #7
			reinit_uart ();
    160c:	0c000012 	stceq	0, cr0, [r0], {18}
    1610:	00000001 	andeq	r0, r0, r1
    1614:	000b7035 	andeq	r7, fp, r5, lsr r0
}
    1618:	000ba200 	andeq	sl, fp, r0, lsl #4
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    161c:	00693200 	rsbeq	r3, r9, r0, lsl #4
    1620:	0c039901 			; <UNDEFINED> instruction: 0x0c039901
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1624:	0000002c 	andeq	r0, r0, ip, lsr #32
    1628:	0000012a 	andeq	r0, r0, sl, lsr #2
    162c:	01360000 	teqeq	r6, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1630:	00000084 	andeq	r0, r0, r4, lsl #1
    1634:	0106fc01 	tsteq	r6, r1, lsl #24	; <UNPREDICTABLE>
    1638:	00000278 	andeq	r0, r0, r8, ror r2
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    163c:	00000680 	andeq	r0, r0, r0, lsl #13
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1640:	17f79c01 	ldrbne	r9, [r7, r1, lsl #24]!
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1644:	33370000 	teqcc	r7, #0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1648:	0100000c 	tsteq	r0, ip
    164c:	096215fc 	stmdbeq	r2!, {r2, r3, r4, r5, r6, r7, r8, sl, ip}^
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1650:	013d0000 	teqeq	sp, r0
    1654:	45380000 	ldrmi	r0, [r8, #-0]!
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1658:	01000004 	tsteq	r0, r4
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    165c:	130d2efc 	movwne	r2, #57084	; 0xdefc
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1660:	015b0000 	cmpeq	fp, r0
    1664:	622c0000 	eorvs	r0, ip, #0
			PRCMPowerDomainOff (
    1668:	01000006 	tsteq	r0, r6
    166c:	98130102 	ldmdals	r3, {r1, r8}
	__SLEEP;
    1670:	2c000002 	stccs	0, cr0, [r0], {2}
    1674:	000005d1 	ldrdeq	r0, [r0], -r1
  __ASM volatile ("cpsie i" : : : "memory");
    1678:	0e010701 	cdpeq	7, 0, cr0, cr1, cr1, {0}
	goto Redo;
    167c:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1680:	000db42c 	andeq	fp, sp, ip, lsr #8
    1684:	02060100 	andeq	r0, r6, #0, 2
    1688:	00035e15 	andeq	r5, r3, r5, lsl lr
    168c:	0dcf2c00 	stcleq	12, cr2, [pc]	; 1694 <__pi_release+0x204>
    1690:	0d010000 	stceq	0, cr0, [r1, #-0]
    1694:	03781d02 	cmneq	r8, #2, 26	; 0x80
    1698:	382c0000 	stmdacc	ip!, {}	; <UNPREDICTABLE>
    169c:	01000005 	tsteq	r0, r5
    16a0:	861d0210 			; <UNDEFINED> instruction: 0x861d0210
    16a4:	2c000003 	stccs	0, cr0, [r0], {3}
    16a8:	000006ca 	andeq	r0, r0, sl, asr #13
    16ac:	1f021301 	svcne	0x00021301
    16b0:	00000394 	muleq	r0, r4, r3
    16b4:	0007332c 	andeq	r3, r7, ip, lsr #6
    16b8:	02180100 	andseq	r0, r8, #0, 2
    16bc:	0003ac16 	andeq	sl, r3, r6, lsl ip
    16c0:	07462c00 	strbeq	r2, [r6, -r0, lsl #24]
    16c4:	1b010000 	blne	416cc <__ccfg+0x21724>
    16c8:	03c01602 	biceq	r1, r0, #2097152	; 0x200000
    16cc:	592c0000 	stmdbpl	ip!, {}	; <UNPREDICTABLE>
    16d0:	01000007 	tsteq	r0, r7
    16d4:	d416021e 	ldrle	r0, [r6], #-542	; 0xfffffde2
    16d8:	2c000003 	stccs	0, cr0, [r0], {3}
    16dc:	00000b27 	andeq	r0, r0, r7, lsr #22
    16e0:	11022301 	tstne	r2, r1, lsl #6
    16e4:	000003e8 	andeq	r0, r0, r8, ror #7
	cli_tim;
    16e8:	00006039 	andeq	r6, r0, r9, lsr r0
    16ec:	021a3400 	andseq	r3, sl, #0, 8
    16f0:	22010000 	andcs	r0, r1, #0
	diag ("PicOS halted");
    16f4:	12e11d01 	rscne	r1, r1, #1, 26	; 0x40
	mdelay (500);
    16f8:	01a50000 			; <UNDEFINED> instruction: 0x01a50000
    16fc:	063a0000 	ldrteq	r0, [sl], -r0
	setpowermode (2);
    1700:	0100000d 	tsteq	r0, sp
	__PCB = NULL;
    1704:	f7250124 			; <UNDEFINED> instruction: 0xf7250124
	release;
    1708:	3a000017 	bcc	176c <main+0x54>
    170c:	0000022d 	andeq	r0, r0, sp, lsr #4
    1710:	26014901 	strcs	r4, [r1], -r1, lsl #18
    1714:	000017fd 	strdeq	r1, [r0], -sp
int main (void) {
    1718:	00024034 	andeq	r4, r2, r4, lsr r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    171c:	015f0100 	cmpeq	pc, r0, lsl #2
    1720:	0012e11d 	andseq	lr, r2, sp, lsl r1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1724:	0001c300 	andeq	ip, r1, r0, lsl #6
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1728:	0a823a00 	beq	fe08ff30 <_estack+0xde08af30>
	system_init ();
    172c:	60010000 	andvs	r0, r1, r0
	tcv_init ();
    1730:	18032101 	stmdane	r3, {r0, r8, sp}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1734:	c03a0000 	eorsgt	r0, sl, r0
    1738:	01000008 	tsteq	r0, r8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    173c:	09090161 	stmdbeq	r9, {r0, r5, r6, r8}
    1740:	34000018 	strcc	r0, [r0], #-24	; 0xffffffe8
    1744:	00000778 	andeq	r0, r0, r8, ror r7
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1748:	0d016201 	sfmeq	f6, 4, [r1, #-4]
    174c:	00000926 	andeq	r0, r0, r6, lsr #18
	delay (16, 0);
    1750:	000001e1 	andeq	r0, r0, r1, ror #3
    1754:	0003c73a 	andeq	ip, r3, sl, lsr r7
    1758:	01890100 	orreq	r0, r9, r0, lsl #2
	__pi_release ();
    175c:	0012e11d 	andseq	lr, r2, sp, lsl r1
    1760:	0d9e3a00 	vldreq	s6, [lr]
    1764:	8a010000 	bhi	4176c <__ccfg+0x217c4>
    1768:	18102101 	ldmdane	r0, {r0, r8, sp}
    176c:	653a0000 	ldrvs	r0, [sl, #-0]!
    1770:	01000002 	tsteq	r0, r2
    1774:	e11d01b1 			; <UNDEFINED> instruction: 0xe11d01b1
static void killev (__pi_pcb_t *pid) {
    1778:	3a000012 	bcc	17c8 <qfree+0x14>
	wfun = (aword)(pid->code);
    177c:	000007ca 	andeq	r0, r0, sl, asr #15
	for_all_tasks (i) {
    1780:	2301b201 	movwcs	fp, #4609	; 0x1201
		for (j = 0; j < nevents (i); j++) {
    1784:	00001816 	andeq	r1, r0, r6, lsl r8
    1788:	00092c2e 	andeq	r2, r9, lr, lsr #24
    178c:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
			    || i->Events [j] . Event == wfun
    1790:	000e8813 	andeq	r8, lr, r3, lsl r8
		for (j = 0; j < nevents (i); j++) {
    1794:	b0910300 	addslt	r0, r1, r0, lsl #6
			if (i->Events [j] . Event == (aword)pid
    1798:	1a2f3b7f 	bne	bd059c <__ccfg+0xbb05f4>
    179c:	04280000 	strteq	r0, [r8], #-0
    17a0:	00780000 	rsbseq	r0, r8, r0
				wakeupev (i, j);
    17a4:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    17a8:	17d10a01 	ldrbne	r0, [r1, r1, lsl #20]
	for_all_tasks (i) {
    17ac:	5a300000 	bpl	c017b4 <__ccfg+0xbe180c>
}
    17b0:	ff00001a 			; <UNDEFINED> instruction: 0xff00001a
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b4:	3c000001 	stccc	0, cr0, [r0], {1}
static void qfree (aword *ch) {
    17b8:	00001a4e 	andeq	r1, r0, lr, asr #20
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17bc:	001a4230 	andseq	r4, sl, r0, lsr r2
	cc = (aword*)(mpools + MA_NP);
    17c0:	00021300 	andeq	r1, r2, r0, lsl #6
	m_setnextp (ch, chunk);
    17c4:	00783900 	rsbseq	r3, r8, r0, lsl #18
	m_setnextp (cc, ch);
    17c8:	663d0000 	ldrtvs	r0, [sp], -r0
}
    17cc:	0000001a 	andeq	r0, r0, sl, lsl r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    17d0:	19852f00 	stmibne	r5, {r8, r9, sl, fp, sp}
    17d4:	059e0000 	ldreq	r0, [lr]
    17d8:	00900000 	addseq	r0, r0, r0
			m_setnextp (cc, m_nextp (chunk));
    17dc:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
			m_size (chunk) += m_hdrlen + m_size (ch);
    17e0:	a4301901 	ldrtge	r1, [r0], #-2305	; 0xfffff6ff
    17e4:	26000019 			; <UNDEFINED> instruction: 0x26000019
    17e8:	30000002 	andcc	r0, r0, r2
    17ec:	00001998 	muleq	r0, r8, r9
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17f0:	00000245 	andeq	r0, r0, r5, asr #4
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17f4:	11000000 	mrsne	r0, (UNDEF: 0)
    17f8:	000f6804 	andeq	r6, pc, r4, lsl #16
    17fc:	b7041100 	strlt	r1, [r4, -r0, lsl #2]
			m_setnextp (cc, m_nextp (chunk));
    1800:	1100000f 	tstne	r0, pc
			m_size (ch) += m_hdrlen + m_size (chunk);
    1804:	00100604 	andseq	r0, r0, r4, lsl #12
    1808:	02010200 	andeq	r0, r1, #0, 4
    180c:	00000ca7 	andeq	r0, r0, r7, lsr #25
    1810:	10620411 	rsbne	r0, r2, r1, lsl r4
    1814:	04110000 	ldreq	r0, [r1], #-0
    1818:	000010cb 	andeq	r1, r0, fp, asr #1
			if (m_size (chunk) >= m_size (ch))
    181c:	0a980136 	beq	fe601cfc <_estack+0xde5fccfc>
    1820:	bf010000 	svclt	0x00010000
    1824:	00c80106 	sbceq	r0, r8, r6, lsl #2
		chunk = m_nextp (chunk))
    1828:	01840000 	orreq	r0, r4, r0
    182c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1830:	000018a6 	andeq	r1, r0, r6, lsr #17
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1834:	000c3337 	andeq	r3, ip, r7, lsr r3
	diag_wait (a);
    1838:	13bf0100 			; <UNDEFINED> instruction: 0x13bf0100
	diag_wchar (c, a);
    183c:	00000962 	andeq	r0, r0, r2, ror #18
    1840:	00000258 	andeq	r0, r0, r8, asr r2
}
    1844:	000c0f38 	andeq	r0, ip, r8, lsr pc
    1848:	37bf0100 	ldrcc	r0, [pc, r0, lsl #2]!
	syserror (ESTATE, "state");
    184c:	000012e1 	andeq	r1, r0, r1, ror #5
    1850:	00000276 	andeq	r0, r0, r6, ror r2
    1854:	0009f93e 	andeq	pc, r9, lr, lsr r9	; <UNPREDICTABLE>
    1858:	11c40100 	bicne	r0, r4, r0, lsl #2
	for (i = 0; i < MAX_UTIMERS; i++)
    185c:	000000da 	ldrdeq	r0, [r0], -sl
void utimer_add (address ut) {
    1860:	000bff3e 	andeq	pc, fp, lr, lsr pc	; <UNPREDICTABLE>
    1864:	1bf40100 	blne	ffd01c6c <_estack+0xdfcfcc6c>
		if (__pi_utims [i] == NULL)
    1868:	00000128 	andeq	r0, r0, r8, lsr #2
	for (i = 0; i < MAX_UTIMERS; i++)
    186c:	00000039 	andeq	r0, r0, r9, lsr r0
    1870:	0c2c3f00 	stceq	15, cr3, [ip], #-0
		syserror (ERESOURCE, "ut a");
    1874:	c0010000 	andgt	r0, r1, r0
	__pi_utims [i] = ut;
    1878:	0009a611 	andeq	sl, r9, r1, lsl r6
}
    187c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    1880:	40200005 	eormi	r0, r0, r5
    1884:	0000039e 	muleq	r0, lr, r3
	*t = v;
    1888:	2c0dc201 	sfmcs	f4, 1, [sp], {1}
	TCI_RUN_AUXILIARY_TIMER;
    188c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
void update_n_wake (word min, Boolean force) {
    1890:	00003839 	andeq	r3, r0, r9, lsr r8
	if (TCI_UPDATE_DELAY_TICKS (force))
    1894:	00704100 	rsbseq	r4, r0, r0, lsl #2
    1898:	bd0ac801 	stclt	8, cr12, [sl, #-4]
    189c:	8d000005 	stchi	0, cr0, [r0, #-20]	; 0xffffffec
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    18a0:	00000002 	andeq	r0, r0, r2
    18a4:	01420000 	mrseq	r0, (UNDEF: 66)
    18a8:	00000ad8 	ldrdeq	r0, [r0], -r8
    18ac:	0119aa01 	tsteq	r9, r1, lsl #20
    18b0:	000012e1 	andeq	r1, r0, r1, ror #5
    18b4:	00000226 	andeq	r0, r0, r6, lsr #4
    18b8:	00000278 	andeq	r0, r0, r8, ror r2
    18bc:	19409c01 	stmdbne	r0, {r0, sl, fp, ip, pc}^
    18c0:	67430000 	strbvs	r0, [r3, -r0]
    18c4:	01006469 	tsteq	r0, r9, ror #8
    18c8:	09323caa 	ldmdbeq	r2!, {r1, r3, r5, r7, sl, fp, ip, sp}
    18cc:	02a00000 	adceq	r0, r0, #0
    18d0:	82370000 	eorshi	r0, r7, #0
		for_all_tasks (i) {
    18d4:	0100000d 	tsteq	r0, sp
	__pi_mintk = znew + min;
    18d8:	092649aa 	stmdbeq	r6!, {r1, r3, r5, r7, r8, fp, lr}
    18dc:	02b30000 	adcseq	r0, r3, #0
			if (!twaiting (i))
    18e0:	df370000 	svcle	0x00370000
    18e4:	01000004 	tsteq	r0, r4
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18e8:	092661aa 	stmdbeq	r6!, {r1, r3, r5, r7, r8, sp, lr}
    18ec:	02c60000 	sbceq	r0, r6, #0
    18f0:	99370000 	ldmdbls	r7!, {}	; <UNPREDICTABLE>
    18f4:	01000002 	tsteq	r0, r2
    18f8:	092674aa 	stmdbeq	r6!, {r1, r3, r5, r7, sl, ip, sp, lr}
    18fc:	02d90000 	sbcseq	r0, r9, #0
    1900:	78440000 	stmdavc	r4, {}^	; <UNPREDICTABLE>
    1904:	01000007 	tsteq	r0, r7
    1908:	092689aa 	stmdbeq	r6!, {r1, r3, r5, r7, r8, fp, pc}
    190c:	91020000 	mrsls	r0, (UNDEF: 2)
    1910:	08294400 	stmdaeq	r9!, {sl, lr}
    1914:	aa010000 	bge	4191c <__ccfg+0x21974>
				wakeuptm (i);
    1918:	00092699 	muleq	r9, r9, r6
    191c:	04910200 	ldreq	r0, [r1], #512	; 0x200
		for_all_tasks (i) {
    1920:	63657245 	cmnvs	r5, #1342177284	; 0x50000004
				d = i->Timer - znew;
    1924:	a7aa0100 	strge	r0, [sl, r0, lsl #2]!
    1928:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    192c:	38089102 	stmdacc	r8, {r1, r8, ip, pc}
		if ((word)(__pi_mintk - znew) < min) 
    1930:	00000ae1 	andeq	r0, r0, r1, ror #21
    1934:	e11aab01 	tst	sl, r1, lsl #22
    1938:	ec000012 	stc	0, cr0, [r0], {18}
	__pi_old = znew;
    193c:	00000002 	andeq	r0, r0, r2
}
    1940:	0f2f0142 	svceq	0x002f0142
	TCI_RUN_DELAY_TIMER;
    1944:	97010000 	strls	r0, [r1, -r0]
}
    1948:	18090105 	stmdane	r9, {r0, r2, r8}
    194c:	02000000 	andeq	r0, r0, #0
    1950:	02260000 	eoreq	r0, r6, #0
    1954:	9c010000 	stcls	0, cr0, [r1], {-0}
    1958:	00001985 	andeq	r1, r0, r5, lsl #19
void proceed (word state) {
    195c:	0051e937 	subseq	lr, r1, r7, lsr r9
	prcdstate (__pi_curr, state);
    1960:	1d970100 	ldfnes	f0, [r7]
    1964:	0000130d 	andeq	r1, r0, sp, lsl #6
	release;
    1968:	0000030a 	andeq	r0, r0, sl, lsl #6
    196c:	00020835 	andeq	r0, r2, r5, lsr r8
void __pi_wait (aword event, word state) {
    1970:	00021a00 	andeq	r1, r2, r0, lsl #20
	sint j = nevents (__pi_curr);
    1974:	00694100 	rsbeq	r4, r9, r0, lsl #2
	if (j >= MAX_EVENTS_PER_TASK)
    1978:	2c119d01 	ldccs	13, cr9, [r1], {1}
    197c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1980:	00000003 	andeq	r0, r0, r3
		syserror (ENEVENTS, "sw");
    1984:	d6014600 	strle	r4, [r1], -r0, lsl #12
    1988:	01000009 	tsteq	r0, r9
	setestate (__pi_curr->Events [j], state, event);
    198c:	88010f8f 	stmdahi	r1, {r0, r1, r2, r3, r7, r8, r9, sl, fp}
	incwait (__pi_curr);
    1990:	0100000e 	tsteq	r0, lr
	setestate (__pi_curr->Events [j], state, event);
    1994:	000019b1 			; <UNDEFINED> instruction: 0x000019b1
}
    1998:	0051e947 	subseq	lr, r1, r7, asr #18
    199c:	2c8f0100 	stfcss	f0, [pc], {0}
    19a0:	0000130d 	andeq	r1, r0, sp, lsl #6
void __pi_trigger (aword event) {
    19a4:	0004c247 	andeq	ip, r4, r7, asr #4
	for_all_tasks (i) {
    19a8:	3a8f0100 	bcc	fe3c1db0 <_estack+0xde3bcdb0>
		for (j = 0; j < nevents (i); j++) {
    19ac:	00000926 	andeq	r0, r0, r6, lsr #18
    19b0:	82014200 	andhi	r4, r1, #0, 4
    19b4:	0100000b 	tsteq	r0, fp
    19b8:	0901057b 	stmdbeq	r1, {r0, r1, r3, r4, r5, r6, r8, sl}
			if (i->Events [j] . Event == event) {
    19bc:	e4000018 	str	r0, [r0], #-24	; 0xffffffe8
    19c0:	00000001 	andeq	r0, r0, r1
    19c4:	01000002 	tsteq	r0, r2
				wakeupev (i, j);
    19c8:	0019ee9c 	mulseq	r9, ip, lr
    19cc:	51e93700 	mvnpl	r3, r0, lsl #14
	for_all_tasks (i) {
    19d0:	7b010000 	blvc	419d8 <__ccfg+0x21a30>
}
    19d4:	00130d20 	andseq	r0, r3, r0, lsr #26
aword __pi_join (aword pid, word st) {
    19d8:	00034600 	andeq	r4, r3, r0, lsl #12
	for_all_tasks (i) {
    19dc:	04c23700 	strbeq	r3, [r2], #1792	; 0x700
    19e0:	7b010000 	blvc	419e8 <__ccfg+0x21a40>
	return 0;
    19e4:	0009262e 	andeq	r2, r9, lr, lsr #12
		if ((aword)i == pid) {
    19e8:	00035900 	andeq	r5, r3, r0, lsl #18
			__pi_wait (pid, st);
    19ec:	01420000 	mrseq	r0, (UNDEF: 66)
}
    19f0:	000005e6 	andeq	r0, r0, r6, ror #11
	for_all_tasks (i) {
    19f4:	01056b01 	tsteq	r5, r1, lsl #22
    19f8:	00001809 	andeq	r1, r0, r9, lsl #16
void delay (word d, word state) {
    19fc:	000001ce 	andeq	r0, r0, lr, asr #3
	settstate (__pi_curr, state);
    1a00:	000001e4 	andeq	r0, r0, r4, ror #3
    1a04:	1a2f9c01 	bne	be8a10 <__ccfg+0xbc8a68>
    1a08:	e9370000 	ldmdb	r7!, {}	; <UNPREDICTABLE>
    1a0c:	01000051 	qaddeq	r0, r1, r0
	update_n_wake (d, YES);
    1a10:	130d2d6b 	movwne	r2, #56683	; 0xdd6b
    1a14:	036c0000 	cmneq	ip, #0
	__pi_curr->Timer = __pi_old + d;
    1a18:	ce350000 	cdpgt	0, 3, cr0, cr5, cr0, {0}
    1a1c:	e0000001 	and	r0, r0, r1
	inctimer (__pi_curr);
    1a20:	48000001 	stmdami	r0, {r0}
    1a24:	70010069 	andvc	r0, r1, r9, rrx
    1a28:	00002c12 	andeq	r2, r0, r2, lsl ip
}
    1a2c:	46000000 	strmi	r0, [r0], -r0
    1a30:	0003e201 	andeq	lr, r3, r1, lsl #4
	if (fun == NULL)
    1a34:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
		return (int) __pi_curr;
    1a38:	00180901 	andseq	r0, r8, r1, lsl #18
    1a3c:	1a7f0100 	bne	1fc1e44 <__ccfg+0x1fa1e9c>
	for_all_tasks (i)
    1a40:	e9470000 	stmdb	r7, {}^	; <UNPREDICTABLE>
}
    1a44:	01000051 	qaddeq	r0, r1, r0
		if (i->code == fun)
    1a48:	130d204b 	movwne	r2, #53323	; 0xd04b
	for_all_tasks (i)
    1a4c:	00470000 	subeq	r0, r7, r0
    1a50:	0100000f 	tsteq	r0, pc
    1a54:	05bd2c4b 	ldreq	r2, [sp, #3147]!	; 0xc4b
int __pi_strlen (const char *s) {
    1a58:	41470000 	mrsmi	r0, (UNDEF: 71)
	for (i = 0; *(s+i) != '\0'; i++);
    1a5c:	0100000f 	tsteq	r0, pc
}
    1a60:	09263f4b 	stmdbeq	r6!, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}
	for (i = 0; *(s+i) != '\0'; i++);
    1a64:	6e480000 	cdpvs	0, 4, cr0, cr8, cr0, {0}
	while ((Boolean)(*d++ = *s++));
    1a68:	01006d75 	tsteq	r0, r5, ror sp
    1a6c:	002c094e 	eoreq	r0, ip, lr, asr #18
    1a70:	48490000 	stmdami	r9, {}^	; <UNPREDICTABLE>
}
    1a74:	56010069 	strpl	r0, [r1], -r9, rrx
	while (n-- && (*s != '\0'))
    1a78:	00002c12 	andeq	r2, r0, r2, lsl ip
    1a7c:	4a000000 	bmi	1a84 <__pi_strncpy+0xe>
	*d = '\0';
    1a80:	00058901 	andeq	r8, r5, r1, lsl #18
	while (n-- && (*s != '\0'))
    1a84:	09460100 	stmdbeq	r6, {r8}^
    1a88:	00092601 	andeq	r2, r9, r1, lsl #12
		*d++ = *s++;
    1a8c:	0001bc00 	andeq	fp, r1, r0, lsl #24
    1a90:	0001ce00 	andeq	ip, r1, r0, lsl #28
	while (n--)
    1a94:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
    1a98:	0000a001 	andeq	sl, r0, r1
		*dest++ = *src++;
    1a9c:	063f0100 	ldrteq	r0, [pc], -r0, lsl #2
    1aa0:	00018401 	andeq	r8, r1, r1, lsl #8
    1aa4:	00019800 	andeq	r9, r1, r0, lsl #16
	while (n--)
    1aa8:	d49c0100 	ldrle	r0, [ip], #256	; 0x100
}
    1aac:	3700001a 	smladcc	r0, sl, r0, r0
		*dest++ = c;
    1ab0:	000051e9 	andeq	r5, r0, r9, ror #3
void adddevfunc (devreqfun_t rf, int loc) {
    1ab4:	0d1f3f01 	ldceq	15, cr3, [pc, #-4]	; 1ab8 <adddevfunc+0x4>
		syserror (EREQPAR, "addv");
    1ab8:	7f000013 	svcvc	0x00000013
		syserror (ERESOURCE, "addv");
    1abc:	35000003 	strcc	r0, [r0, #-3]
	if (ioreq [loc] != NULL)
    1ac0:	00000184 	andeq	r0, r0, r4, lsl #3
    1ac4:	00000196 	muleq	r0, r6, r1
		syserror (ERESOURCE, "addv");
    1ac8:	01006948 	tsteq	r0, r8, asr #18
	ioreq [loc] = rf;
    1acc:	002c0b40 	eoreq	r0, ip, r0, asr #22
}
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	0e9f0142 	fmleqem	f0, f7, f2
sint io (word retry, word dev, word operation, char *buf, word len) {
    1ad8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    1adc:	18090105 	stmdane	r9, {r0, r2, r8}
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ae8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aec:	00001b0f 	andeq	r1, r0, pc, lsl #22
    1af0:	0051e937 	subseq	lr, r1, r7, lsr r9
		syserror (ENODEVICE, "io");
    1af4:	2a380100 	bcs	e01efc <__ccfg+0xde1f54>
    1af8:	0000130d 	andeq	r1, r0, sp, lsl #6
	if (len == 0)
    1afc:	00000392 	muleq	r0, r2, r3
	ret = (ioreq [dev]) (operation, buf, len);
    1b00:	00039044 	andeq	r9, r3, r4, asr #32
    1b04:	38380100 	ldmdacc	r8!, {r8}
	if (ret >= 0)
    1b08:	00000926 	andeq	r0, r0, r6, lsr #18
	if (ret == -1) {
    1b0c:	46005101 	strmi	r5, [r0], -r1, lsl #2
    1b10:	0008d001 	andeq	sp, r8, r1
		if (retry == WNONE)
    1b14:	05320100 	ldreq	r0, [r2, #-256]!	; 0xffffff00
		iowait (dev, operation, retry);
    1b18:	00180901 	andseq	r0, r8, r1, lsl #18
    1b1c:	1b3b0100 	blne	ec1f24 <__ccfg+0xea1f7c>
    1b20:	e9470000 	stmdb	r7, {}^	; <UNPREDICTABLE>
			release;
    1b24:	01000051 	qaddeq	r0, r1, r0
	if (ret == -2) {
    1b28:	130d1f32 	movwne	r1, #57138	; 0xdf32
		if (retry != WNONE) {
    1b2c:	674b0000 	strbvs	r0, [fp, -r0]
    1b30:	01006469 	tsteq	r0, r9, ror #8
			iowait (dev, operation, retry);
    1b34:	09322e32 	ldmdbeq	r2!, {r1, r4, r5, r9, sl, fp, sp}
    1b38:	46000000 	strmi	r0, [r0], -r0
			(ioreq [dev]) (NONE, buf, len);
    1b3c:	0004c801 	andeq	ip, r4, r1, lsl #16
    1b40:	052d0100 	streq	r0, [sp, #-256]!	; 0xffffff00
    1b44:	00180901 	andseq	r0, r8, r1, lsl #18
		(ioreq [dev]) (NONE, buf, len);
    1b48:	1b660100 	blne	1981f50 <__ccfg+0x1961fa8>
    1b4c:	e9470000 	stmdb	r7, {}^	; <UNPREDICTABLE>
    1b50:	01000051 	qaddeq	r0, r1, r0
}
    1b54:	130d1e2d 	movwne	r1, #56877	; 0xde2d
	if (retry != WNONE) {
    1b58:	694b0000 	stmdbvs	fp, {}^	; <UNPREDICTABLE>
		delay (-ret - 2, retry);
    1b5c:	2d010064 	stccs	0, cr0, [r1, #-400]	; 0xfffffe70
    1b60:	0009262c 	andeq	r2, r9, ip, lsr #12
    1b64:	01420000 	mrseq	r0, (UNDEF: 66)
    1b68:	00000cad 	andeq	r0, r0, sp, lsr #25
		release;
    1b6c:	01051a01 	tsteq	r5, r1, lsl #20
    1b70:	00001809 	andeq	r1, r0, r9, lsl #16
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b74:	00000198 	muleq	r0, r8, r1
    1b78:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    1b7c:	1b939c01 	blne	fe4e8b88 <_estack+0xde4e3b88>
    1b80:	e9370000 	ldmdb	r7!, {}	; <UNPREDICTABLE>
    1b84:	01000051 	qaddeq	r0, r1, r0
		syserror (ERESOURCE, "mal1");
    1b88:	130d1c1a 	movwne	r1, #56346	; 0xdc1a
    1b8c:	03a50000 			; <UNDEFINED> instruction: 0x03a50000
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b90:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1b94:	00000947 	andeq	r0, r0, r7, asr #18
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b98:	0101d312 	tsteq	r1, r2, lsl r3
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b9c:	00093e01 	andeq	r3, r9, r1, lsl #28
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1ba0:	3b4d0300 	blcc	13427a8 <__ccfg+0x1322800>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1ba4:	0000001b 	andeq	r0, r0, fp, lsl r0
    1ba8:	00000000 	andeq	r0, r0, r0
}
    1bac:	01000000 	mrseq	r0, (UNDEF: 0)
    1bb0:	001bc69c 	mulseq	fp, ip, r6
    1bb4:	1b4e3000 	blne	138dbbc <__ccfg+0x136dc14>
    1bb8:	03b80000 			; <UNDEFINED> instruction: 0x03b80000
    1bbc:	5a4e0000 	bpl	1381bc4 <__ccfg+0x1361c1c>
    1bc0:	0100001b 	tsteq	r0, fp, lsl r0
void __pi_free (aword *ch) {
    1bc4:	0f4d0051 	svceq	0x004d0051
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1bc8:	0000001b 	andeq	r0, r0, fp, lsl r0
    1bcc:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "malg");
    1bd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1bd4:	001bea9c 	mulseq	fp, ip, sl
	mcfree [MA_NP] += m_size (ch);
    1bd8:	1b223000 	blne	88dbe0 <__ccfg+0x86dc38>
		m_size (ch) ^= MALLOC_UMASK;
    1bdc:	03cb0000 	biceq	r0, fp, #0
    1be0:	2e4e0000 	cdpcs	0, 4, cr0, cr14, cr0, {0}
	mcfree [MA_NP] += m_size (ch);
    1be4:	0100001b 	tsteq	r0, fp, lsl r0
	QFREE;
    1be8:	2f4d0051 	svccs	0x004d0051
	if (mevent [MA_NP] . nwait) {
    1bec:	0000001a 	andeq	r0, r0, sl, lsl r0
    1bf0:	00000000 	andeq	r0, r0, r0
		trigger ((aword)(&(mevent [MA_NP])));
    1bf4:	01000000 	mrseq	r0, (UNDEF: 0)
		mevent [MA_NP] . nwait --;
    1bf8:	001c1a9c 	mulseq	ip, ip, sl
}
    1bfc:	1a423000 	bne	108dc04 <__ccfg+0x106dc5c>
    1c00:	03de0000 	bicseq	r0, lr, #0
    1c04:	4e4e0000 	cdpmi	0, 4, cr0, cr14, cr0, {0}
    1c08:	0100001a 	tsteq	r0, sl, lsl r0
void kill (aword pid) {
    1c0c:	1a5a4e51 	bne	1695558 <__ccfg+0x16755b0>
		pid = (aword) __pi_curr;
    1c10:	52010000 	andpl	r0, r1, #0
	j = NULL;
    1c14:	001a663d 	andseq	r6, sl, sp, lsr r6
	for_all_tasks (i) {
    1c18:	854f0000 	strbhi	r0, [pc, #-0]	; 1c20 <kill+0x14>
	syserror (EREQPAR, "kpi");
    1c1c:	00000019 	andeq	r0, r0, r9, lsl r0
    1c20:	00000000 	andeq	r0, r0, r0
		if ((aword)i == pid) {
    1c24:	01000000 	mrseq	r0, (UNDEF: 0)
    1c28:	1998309c 	ldmibne	r8, {r2, r3, r4, r7, ip, sp}
				__PCB = i->Next;
    1c2c:	03f10000 	mvnseq	r0, #0
			killev (i);
    1c30:	a4300000 	ldrtge	r0, [r0], #-0
			ufree (i);
    1c34:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
			if (i == __pi_curr)
    1c38:	00000004 	andeq	r0, r0, r4
    1c3c:	00148c00 	andseq	r8, r4, r0, lsl #24
				release;
    1c40:	86000300 	strhi	r0, [r0], -r0, lsl #6
				j->Next = i->Next;
    1c44:	04000004 	streq	r0, [r0], #-4
    1c48:	0000ac01 	andeq	sl, r0, r1, lsl #24
    1c4c:	128c0c00 	addne	r0, ip, #0, 24
}
    1c50:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    1c54:	06180000 	ldreq	r0, [r8], -r0
    1c58:	00000000 	andeq	r0, r0, r0
	if (size < 8)
    1c5c:	0d780000 	ldcleq	0, cr0, [r8, #-0]
		_size = 2;
    1c60:	01020000 	mrseq	r0, (UNDEF: 2)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c64:	000c5d06 	andeq	r5, ip, r6, lsl #26
		_size = (((aword)size) + 3) >> 2;
    1c68:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c6c:	00000a6b 	andeq	r0, r0, fp, ror #20
		_size = (((aword)size) + 3) >> 2;
    1c70:	002ba103 	eoreq	sl, fp, r3, lsl #2
		if (mevent [MA_NP] . nfail != 255)
    1c74:	18281000 	stmdane	r8!, {ip}
    1c78:	0000003f 	andeq	r0, r0, pc, lsr r0
			mevent [MA_NP] . nfail ++;
    1c7c:	fd050402 	stc2	4, cr0, [r5, #-8]
		mnfree [MA_NP] = 0;
    1c80:	02000007 	andeq	r0, r0, #7
    1c84:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c88:	1c030000 	stcne	0, cr0, [r3], {-0}
    1c8c:	1000002a 	andne	r0, r0, sl, lsr #32
			syserror (EMALLOC, "malc");
    1c90:	0059182e 	subseq	r1, r9, lr, lsr #16
    1c94:	01020000 	mrseq	r0, (UNDEF: 2)
		if (m_size (chunk) >= _size)
    1c98:	000c5b08 	andeq	r5, ip, r8, lsl #22
    1c9c:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
		chunk = m_nextp (chunk)) {
    1ca0:	31100000 	tstcc	r0, r0
		m_setnextp (cc, m_nextp (chunk));
    1ca4:	00006c19 	andeq	r6, r0, r9, lsl ip
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ca8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1cac:	00000d66 	andeq	r0, r0, r6, ror #26
			m_size (chunk) = _size;
    1cb0:	0029b403 	eoreq	fp, r9, r3, lsl #8
			cc = chunk + _size + m_hdrlen;
    1cb4:	19341000 	ldmdbne	r4!, {ip}
    1cb8:	0000007f 	andeq	r0, r0, pc, ror r0
			m_size (cc) = waste - m_hdrlen;
    1cbc:	26070402 	strcs	r0, [r7], -r2, lsl #8
			QFREE;
    1cc0:	02000004 	andeq	r0, r0, #4
		mevent [MA_NP] . nfail = 0;
    1cc4:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
		mcfree [MA_NP] -= m_size (chunk);
    1cc8:	04040000 	streq	r0, [r4], #-0
    1ccc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1cd0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1cd4:	0000042b 	andeq	r0, r0, fp, lsr #8
		m_size (chunk) |= MALLOC_UMASK;
    1cd8:	00132803 	andseq	r2, r3, r3, lsl #16
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1cdc:	12261100 	eorne	r1, r6, #0, 2
		m_size (chunk) |= MALLOC_UMASK;
    1ce0:	0000004d 	andeq	r0, r0, sp, asr #32
			mnfree [MA_NP] = mcfree [MA_NP];
    1ce4:	0028fb03 	eoreq	pc, r8, r3, lsl #22
}
    1ce8:	12271100 	eorne	r1, r7, #0, 2
    1cec:	00000060 	andeq	r0, r0, r0, rrx
    1cf0:	0000a705 	andeq	sl, r0, r5, lsl #14
    1cf4:	00a70600 	adceq	r0, r7, r0, lsl #12
    1cf8:	cc030000 	stcgt	0, cr0, [r3], {-0}
    1cfc:	11000013 	tstne	r0, r3, lsl r0
    1d00:	00331228 	eorseq	r1, r3, r8, lsr #4
aword __pi_fork (fsmcode func, aword data) {
    1d04:	c2030000 	andgt	r0, r3, #0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1d08:	1100001d 	tstne	r0, sp, lsl r0
    1d0c:	004d122b 	subeq	r1, sp, fp, lsr #4
    1d10:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
		if ((j = __PCB) == NULL)
    1d14:	05000000 	streq	r0, [r0, #-0]
	i->Next = NULL;
    1d18:	000000c9 	andeq	r0, r0, r9, asr #1
	i->data = data;
    1d1c:	00294d03 	eoreq	r4, r9, r3, lsl #26
		if ((j = __PCB) == NULL)
    1d20:	122c1100 	eorne	r1, ip, #0, 2
}
    1d24:	00000073 	andeq	r0, r0, r3, ror r0
			for (; j->Next != NULL; j = j->Next);
    1d28:	0000df05 	andeq	sp, r0, r5, lsl #30
    1d2c:	06460300 	strbeq	r0, [r6], -r0, lsl #6
	return (aword) i;
    1d30:	2d110000 	ldccs	0, cr0, [r1, #-0]
    1d34:	00007312 	andeq	r7, r0, r2, lsl r3
	if (mevent [MA_NP] . nwait != 255)
    1d38:	0bb40300 	bleq	fed02940 <_estack+0xdecfd940>
    1d3c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    1d40:	00010810 	andeq	r0, r1, r0, lsl r8
		mevent [MA_NP] . nwait ++;
    1d44:	a7040700 	strge	r0, [r4, -r0, lsl #14]
	wait ((aword)(&(mevent [MA_NP])), state);
    1d48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d4c:	09321108 	ldmdbeq	r2!, {r3, r8, ip}
void diag (const char *mess, ...) {
    1d50:	0000019c 	muleq	r0, ip, r1
    1d54:	00003409 	andeq	r3, r0, r9, lsl #8
    1d58:	07341100 	ldreq	r1, [r4, -r0, lsl #2]!
	diag_disable_int (a, is);
    1d5c:	000000c9 	andeq	r0, r0, r9, asr #1
    1d60:	00070101 	andeq	r0, r7, r1, lsl #2
    1d64:	00064c09 	andeq	r4, r6, r9, lsl #24
				d = (bc == 16) ? 10000 : 1000000000;
    1d68:	03351100 	teqeq	r5, #0, 2
	diag_disable_int (a, is);
    1d6c:	000000c9 	andeq	r0, r0, r9, asr #1
	while (*mess != '\0') {
    1d70:	00060101 	andeq	r0, r6, r1, lsl #2
	dgout ('\r');
    1d74:	0002e709 	andeq	lr, r2, r9, lsl #14
	dgout ('\n');
    1d78:	03361100 	teqeq	r6, #0, 2
    1d7c:	000000c9 	andeq	r0, r0, r9, asr #1
    1d80:	00050101 	andeq	r0, r5, r1, lsl #2
	diag_wait (a);
    1d84:	0006b709 	andeq	fp, r6, r9, lsl #14
	diag_enable_int (a, is);
    1d88:	03371100 	teqeq	r7, #0, 2
    1d8c:	000000c9 	andeq	r0, r0, r9, asr #1
}
    1d90:	00040101 	andeq	r0, r4, r1, lsl #2
    1d94:	000a9f09 	andeq	r9, sl, r9, lsl #30
    1d98:	03381100 	teqeq	r8, #0, 2
		if (*mess == '%') {
    1d9c:	000000c9 	andeq	r0, r0, r9, asr #1
    1da0:	00000401 	andeq	r0, r0, r1, lsl #8
			if (*mess == 'l') {
    1da4:	00065b0a 	andeq	r5, r6, sl, lsl #22
    1da8:	073a1100 	ldreq	r1, [sl, -r0, lsl #2]!
				mess++;
    1dac:	000000c9 	andeq	r0, r0, r9, asr #1
				val = va_arg (ap, lword);
    1db0:	08fb0a01 	ldmeq	fp!, {r0, r9, fp}^
				bc = 32;
    1db4:	3c110000 	ldccc	0, cr0, [r1], {-0}
				bc = 16;
    1db8:	0000c903 	andeq	ip, r0, r3, lsl #18
			switch (*mess) {
    1dbc:	3a0a0200 	bcc	2825c4 <__ccfg+0x26261c>
    1dc0:	1100000f 	tstne	r0, pc
    1dc4:	00c9033d 	sbceq	r0, r9, sp, lsr r3
				dgout ('%');
    1dc8:	0a030000 	beq	c1dd0 <__ccfg+0xa1e28>
    1dcc:	00000913 	andeq	r0, r0, r3, lsl r9
				dgout (*mess);
    1dd0:	df083f11 	svcle	0x00083f11
    1dd4:	04000000 	streq	r0, [r0], #-0
			switch (*mess) {
    1dd8:	031d0300 	tsteq	sp, #0, 6
					v = __pi_hex_enc_table [
    1ddc:	41110000 	tstmi	r1, r0
					i += 4;
    1de0:	00010e03 	andeq	r0, r1, r3, lsl #28
					(val >> (bc - i)) & 0xf];
    1de4:	019c0600 	orrseq	r0, ip, r0, lsl #12
    1de8:	be0b0000 	cdplt	0, 0, cr0, cr11, cr0, {0}
					dgout (v);
    1dec:	11000006 	tstne	r0, r6
    1df0:	01a81a43 			; <UNDEFINED> instruction: 0x01a81a43
				while (i < bc) {
    1df4:	01010000 	mrseq	r0, (UNDEF: 1)
			mess++;
    1df8:	0001a00b 	andeq	sl, r1, fp
					d /= 10;
    1dfc:	0e451100 	dvfeqs	f1, f5, f0
				if ((val >> (bc - 1)) & 1) {
    1e00:	000001c9 	andeq	r0, r0, r9, asr #3
    1e04:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
					dgout ('-');
    1e08:	000001cf 	andeq	r0, r0, pc, asr #3
    1e0c:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
						val |= 0xffff0000;
    1e10:	0500000c 	streq	r0, [r0, #-12]
    1e14:	000001cf 	andeq	r0, r0, pc, asr #3
    1e18:	0003260b 	andeq	r2, r3, fp, lsl #12
				d = (bc == 16) ? 10000 : 1000000000;
    1e1c:	1e451100 	dvfnes	f1, f5, f0
    1e20:	000001c9 	andeq	r0, r0, r9, asr #3
    1e24:	08080101 	stmdaeq	r8, {r0, r8}
					v = (word) (val / d);
    1e28:	1a098f12 	bne	265a78 <__ccfg+0x245ad0>
					if (v || d == 1) break;
    1e2c:	0a000002 	beq	1e3c <diag+0xec>
    1e30:	00000cd8 	ldrdeq	r0, [r0], -r8
					d /= 10;
    1e34:	730b9012 	movwvc	r9, #45074	; 0xb012
				d = (bc == 16) ? 10000 : 1000000000;
    1e38:	00000000 	andeq	r0, r0, r0
					dgout (v + '0');
    1e3c:	0010750a 	andseq	r7, r0, sl, lsl #10
    1e40:	08911200 	ldmeq	r1, {r9, ip}
    1e44:	000000a7 	andeq	r0, r0, r7, lsr #1
					d /= 10;
    1e48:	01c50a04 	biceq	r0, r5, r4, lsl #20
					val = val - (v * d);
    1e4c:	92120000 	andsls	r0, r2, #0
					if (d == 0) break;
    1e50:	0000d510 	andeq	sp, r0, r0, lsl r5
					v = (word) (val / d);
    1e54:	03000600 	movweq	r0, #1536	; 0x600
    1e58:	00000ccc 	andeq	r0, r0, ip, asr #25
				if (bc == 16)
    1e5c:	e9039312 	stmdb	r3, {r1, r4, r8, r9, ip, pc}
				d = (bc == 16) ? 10000 : 1000000000;
    1e60:	05000001 	streq	r0, [r0, #-1]
					val &= 0xffff;
    1e64:	0000021a 	andeq	r0, r0, sl, lsl r2
					dgout (*s);
    1e68:	00021a0c 	andeq	r1, r2, ip, lsl #20
					s++;
    1e6c:	00023600 	andeq	r3, r2, r0, lsl #12
				while (*s != '\0') {
    1e70:	0b000d00 	bleq	5278 <__pi_hex_enc_table+0x67>
    1e74:	0000093d 	andeq	r0, r0, sp, lsr r9
			dgout (*mess++);
    1e78:	2b0f9912 	blcs	3e82c8 <__ccfg+0x3c8320>
    1e7c:	01000002 	tsteq	r0, r2
    1e80:	da040701 	ble	103a8c <__ccfg+0xe3ae4>
    1e84:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e88:	09911301 	ldmibeq	r1, {r0, r8, r9, ip}
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e8c:	00000274 	andeq	r0, r0, r4, ror r2
    1e90:	00091a09 	andeq	r1, r9, r9, lsl #20
    1e94:	07931300 	ldreq	r1, [r3, r0, lsl #6]
    1e98:	000000c9 	andeq	r0, r0, r9, asr #1
	^ entropy
    1e9c:	00010701 	andeq	r0, r1, r1, lsl #14
}
    1ea0:	0005cc09 	andeq	ip, r5, r9, lsl #24
    1ea4:	03941300 	orrseq	r1, r4, #0, 6
    1ea8:	000000c9 	andeq	r0, r0, r9, asr #1
    1eac:	00000101 	andeq	r0, r0, r1, lsl #2
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1eb0:	0aab0300 	beq	feac2ab8 <_estack+0xdeabdab8>
	word cs = size + hblenb;
    1eb4:	96130000 	ldrls	r0, [r3], -r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1eb8:	00024a03 	andeq	r4, r2, r3, lsl #20
    1ebc:	02740500 	rsbseq	r0, r4, #0, 10
	p -> length = size;
    1ec0:	800c0000 	andhi	r0, ip, r0
}
    1ec4:	90000002 	andls	r0, r0, r2
	if (p->attributes.b.queued) {
    1ec8:	0d000002 	stceq	0, cr0, [r0, #-8]
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1ecc:	02850500 	addeq	r0, r5, #0, 10
    1ed0:	aa0b0000 	bge	2c1ed8 <__ccfg+0x2a1f30>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1ed4:	13000003 	movwne	r0, #3
		p->attributes.b.queued = 0;
    1ed8:	0290179c 	addseq	r1, r0, #156, 14	; 0x2700000
    1edc:	01010000 	mrseq	r0, (UNDEF: 1)
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ee0:	0000b30c 	andeq	fp, r0, ip, lsl #6
	deq (p);	// Remove from queue
    1ee4:	0002ae00 	andeq	sl, r2, r0, lsl #28
}
    1ee8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
	tfree ((address)p);
    1eec:	000002a3 	andeq	r0, r0, r3, lsr #5
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ef0:	00060e0b 	andeq	r0, r6, fp, lsl #28
    1ef4:	13061400 	movwne	r1, #25600	; 0x6400
    1ef8:	000002ae 	andeq	r0, r0, lr, lsr #5
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1efc:	dd0b0101 	stfles	f0, [fp, #-4]
    1f00:	12000008 	andne	r0, r0, #8
	if (q_empty (q))
    1f04:	00df0ec3 	sbcseq	r0, pc, r3, asr #29
    1f08:	01010000 	mrseq	r0, (UNDEF: 1)
		trigger (q);
    1f0c:	000c720e 	andeq	r7, ip, lr, lsl #4
	if (p->attributes.b.urgent) {
    1f10:	016e1500 	cmneq	lr, r0, lsl #10
		p->u.bqueue.next = q->next;
    1f14:	0002dc10 	andeq	sp, r2, r0, lsl ip
		p->u.bqueue.prev = q;
    1f18:	e2040700 	and	r0, r4, #0, 14
		q->next->prev = (qitem_t*) p;
    1f1c:	0f000002 	svceq	0x00000002
	p->attributes.b.queued = 1;
    1f20:	0002ee01 	andeq	lr, r2, r1, lsl #28
    1f24:	00a71000 	adceq	r1, r7, r0
}
    1f28:	0c000000 	stceq	0, cr0, [r0], {-0}
		p->u.bqueue.prev = q->prev;
    1f2c:	000001d6 	ldrdeq	r0, [r0], -r6
		q->prev->next = (qitem_t*) p;
    1f30:	000002f9 	strdeq	r0, [r0], -r9
		q->prev = (qitem_t*) p;
    1f34:	ee05000d 	cdp	0, 0, cr0, cr5, cr13, {0}
    1f38:	11000002 	tstne	r0, r2
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f3c:	000009e6 	andeq	r0, r0, r6, ror #19
	deq (p);	// Soft dequeue, timer and hook left intact
    1f40:	16017f15 			; <UNDEFINED> instruction: 0x16017f15
	switch (dv) {
    1f44:	000002f9 	strdeq	r0, [r0], -r9
    1f48:	96110101 	ldrls	r0, [r1], -r1, lsl #2
    1f4c:	15000003 	strne	r0, [r0, #-3]
    1f50:	eb140182 	bl	502560 <__ccfg+0x4e25b8>
			p->attributes.b.urgent = 1;
    1f54:	01000000 	mrseq	r0, (UNDEF: 0)
    1f58:	036e1101 	cmneq	lr, #1073741824	; 0x40000000
			verify_ses (p, "dispose ses");
    1f5c:	d8150000 	ldmdale	r5, {}	; <UNPREDICTABLE>
    1f60:	00df0e02 	sbcseq	r0, pc, r2, lsl #28
    1f64:	01010000 	mrseq	r0, (UNDEF: 1)
    1f68:	03150812 	tsteq	r5, #1179648	; 0x120000
    1f6c:	03520903 	cmpeq	r2, #49152	; 0xc000
			verify_phy (p, "dispose phy");
    1f70:	a1130000 	tstge	r3, r0
    1f74:	1500003c 	strne	r0, [r0, #-60]	; 0xffffffc4
}
    1f78:	a7070307 	strge	r0, [r7, -r7, lsl #6]
			enq (oqueues [p->attributes.b.phys], p);
    1f7c:	00000000 	andeq	r0, r0, r0
			p->attributes.b.urgent = 1;
    1f80:	000fcd13 	andeq	ip, pc, r3, lsl sp	; <UNPREDICTABLE>
    1f84:	03081500 	movweq	r1, #34048	; 0x8500
			verify_phy (p, "dispose phy");
    1f88:	0000f008 	andeq	pc, r0, r8
    1f8c:	0e000400 	cfcpyseq	mvf0, mvf0
    1f90:	00000a09 	andeq	r0, r0, r9, lsl #20
    1f94:	03030915 	movweq	r0, #14613	; 0x3915
    1f98:	0000032b 	andeq	r0, r0, fp, lsr #6
    1f9c:	00002914 	andeq	r2, r0, r4, lsl r9
			enq (oqueues [p->attributes.b.phys], p);
    1fa0:	0b153000 	bleq	54dfa8 <__ccfg+0x52e000>
    1fa4:	03c20803 	biceq	r0, r2, #196608	; 0x30000
}
    1fa8:	24130000 	ldrcs	r0, [r3], #-0
			rlp (p);
    1fac:	1500001f 	strne	r0, [r0, #-31]	; 0xffffffe1
}
    1fb0:	a7080314 	smladge	r8, r4, r3, r0
    1fb4:	00000000 	andeq	r0, r0, r0
    1fb8:	000be713 	andeq	lr, fp, r3, lsl r7
    1fbc:	03151500 	tsteq	r5, #0, 10
    1fc0:	0000a708 	andeq	sl, r0, r8, lsl #14
    1fc4:	8e130200 	cdphi	2, 1, cr0, cr3, cr0, {0}
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1fc8:	1500004c 	strne	r0, [r0, #-76]	; 0xffffffb4
	if (b->attributes.b.outgoing) {
    1fcc:	cf0b0316 	svcgt	0x000b0316
	b = header (p);
    1fd0:	04000002 	streq	r0, [r0], #-2
	if (b->attributes.b.outgoing) {
    1fd4:	00475413 	subeq	r5, r7, r3, lsl r4
		verify_ses (b, "tcv02");
    1fd8:	03171500 	tsteq	r7, #0, 10
    1fdc:	0000f009 	andeq	pc, r0, r9
    1fe0:	0f130800 	svceq	0x00130800
    1fe4:	15000000 	strne	r0, [r0, #-0]
    1fe8:	c20f0318 	andgt	r0, pc, #24, 6	; 0x60000000
		verify_plg (b, tcv_out, "tcv03");
    1fec:	0c000003 	stceq	0, cr0, [r0], {3}
    1ff0:	00095d13 	andeq	r5, r9, r3, lsl sp
    1ff4:	03191500 	tsteq	r9, #0, 10
    1ff8:	0003d215 	andeq	sp, r3, r5, lsl r2
    1ffc:	0c002c00 	stceq	12, cr2, [r0], {-0}
    2000:	00000352 	andeq	r0, r0, r2, asr r3
    2004:	000003d2 	ldrdeq	r0, [r0], -r2
    2008:	00009415 	andeq	r9, r0, r5, lsl r4
    200c:	07000300 	streq	r0, [r0, -r0, lsl #6]
		dispose (b, plugins [b->attributes.b.plugin] ->
    2010:	00035f04 	andeq	r5, r3, r4, lsl #30
}
    2014:	0bdc0e00 	bleq	ff70581c <_estack+0xdf70081c>
		dispose (b, plugins [b->attributes.b.plugin] ->
    2018:	1c150000 	ldcne	0, cr0, [r5], {-0}
		rlp (b);
    201c:	035f1b03 	cmpeq	pc, #3072	; 0xc00
}
    2020:	bc110000 	ldclt	0, cr0, [r1], {-0}
		rlp (b);
    2024:	1500000b 	strne	r0, [r0, #-11]
    2028:	f414031e 			; <UNDEFINED> instruction: 0xf414031e
    202c:	01000003 	tsteq	r0, r3
    2030:	d8040701 	stmdale	r4, {r0, r8, r9, sl}
    2034:	0b000003 	bleq	2048 <tcv_open+0x10>
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2038:	0000070f 	andeq	r0, r0, pc, lsl #14
    203c:	a7131d16 			; <UNDEFINED> instruction: 0xa7131d16
    2040:	01000000 	mrseq	r0, (UNDEF: 0)
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2044:	02ee0b01 	rsceq	r0, lr, #1024	; 0x400
	va_start (ap, plid);
    2048:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    204c:	0000b81a 	andeq	fp, r0, sl, lsl r8
    2050:	0b010100 	bleq	42458 <__ccfg+0x224b0>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2054:	00000c69 	andeq	r0, r0, r9, ror #24
    2058:	b8241e16 	stmdalt	r4!, {r1, r2, r4, r9, sl, fp, ip}
    205c:	01000000 	mrseq	r0, (UNDEF: 0)
    2060:	0c870b01 	fstmiaxeq	r7, {d0-d-1}	;@ Deprecated
			syserror (ENODEVICE, "tcv04");
    2064:	22160000 	andscs	r0, r6, #0
		syserror (EMALLOC, "tcv05");
    2068:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
	attp.b.outgoing = 1;
    206c:	03010100 	movweq	r0, #4352	; 0x1100
    2070:	00000fb1 			; <UNDEFINED> instruction: 0x00000fb1
    2074:	3e104316 	mrccc	3, 0, r4, cr0, cr6, {0}
    2078:	07000004 	streq	r0, [r0, -r4]
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    207c:	00044404 	andeq	r4, r4, r4, lsl #8
		if (descriptors [fd] == NULL)
    2080:	50010f00 	andpl	r0, r1, r0, lsl #30
    2084:	10000004 	andne	r0, r0, r4
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2088:	0000008d 	andeq	r0, r0, sp, lsl #1
		return ERROR;
    208c:	16080800 	strne	r0, [r8], -r0, lsl #16
}
    2090:	04740946 	ldrbteq	r0, [r4], #-2374	; 0xfffff6ba
    2094:	170a0000 	strne	r0, [sl, -r0]
    2098:	16000015 			; <UNDEFINED> instruction: 0x16000015
	s->attpattern.b.session = fd;
    209c:	04320f4a 	ldrteq	r0, [r2], #-3914	; 0xfffff0b6
    20a0:	0a000000 	beq	20a8 <tcv_open+0x70>
	descriptors [fd] = s;
    20a4:	00001209 	andeq	r1, r0, r9, lsl #4
	q_init (&(s->rqueue));
    20a8:	8d074b16 	vstrhi	d4, [r7, #-88]	; 0xffffffa8
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    20ac:	04000000 	streq	r0, [r0], #-0
    20b0:	10370300 	eorsne	r0, r7, r0, lsl #6
    20b4:	4c160000 	ldcmi	0, cr0, [r6], {-0}
    20b8:	00045003 	andeq	r5, r4, r3
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    20bc:	04740500 	ldrbteq	r0, [r4], #-1280	; 0xfffffb00
    20c0:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    20c4:	95000000 	strls	r0, [r0, #-0]
	descriptors [fd] = s;
    20c8:	15000004 	strne	r0, [r0, #-4]
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    20cc:	00000094 	muleq	r0, r4, r0
    20d0:	c10b0003 	tstgt	fp, r3
	if (s == NULL)
    20d4:	01000013 	tsteq	r0, r3, lsl r0
		syserror (EMALLOC, "tcv05");
    20d8:	0485120d 	streq	r1, [r5], #525	; 0x20d
    20dc:	01010000 	mrseq	r0, (UNDEF: 1)
    20e0:	0004800c 	andeq	r8, r4, ip
    20e4:	0004b300 	andeq	fp, r4, r0, lsl #6
    20e8:	00941500 	addseq	r1, r4, r0, lsl #10
    20ec:	00010000 	andeq	r0, r1, r0
    20f0:	0004a305 	andeq	sl, r4, r5, lsl #6
    20f4:	13dd1600 	bicsne	r1, sp, #0, 12
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20f8:	cf010000 	svcgt	0x00010000
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20fc:	0004b318 	andeq	fp, r4, r8, lsl r3
    2100:	00eb0c00 	rsceq	r0, fp, r0, lsl #24
    2104:	04d40000 	ldrbeq	r0, [r4], #0
	plugins [ord] = pl;
    2108:	94150000 	ldrls	r0, [r5], #-0
	return 0;
    210c:	10000000 	andne	r0, r0, r0
		return ERROR;
    2110:	04c40500 	strbeq	r0, [r4], #1280	; 0x500
}
    2114:	9a170000 	bls	5c211c <__ccfg+0x5a2174>
    2118:	01000011 	tsteq	r0, r1, lsl r0
	verify_fds (fd, "tcv10");
    211c:	04d40dec 	ldrbeq	r0, [r4], #3564	; 0xdec
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2120:	05010000 	streq	r0, [r1, #-0]
	verify_fds (fd, "tcv10");
    2124:	0051a403 	subseq	sl, r1, r3, lsl #8
    2128:	10161800 	andsne	r1, r6, r0, lsl #16
    212c:	0c010000 	stceq	0, cr0, [r1], {-0}
	verify_plg (b, tcv_frm, "tcv11");
    2130:	00a70d01 	adceq	r0, r7, r1, lsl #26
	b = q_first (rq);
    2134:	03050000 	movweq	r0, #20480	; 0x5000
	if (q_end (b, rq)) {
    2138:	2000054a 	andcs	r0, r0, sl, asr #10
		if (state != WNONE) {
    213c:	00023619 	andeq	r3, r2, r9, lsl r6
    2140:	02d00100 	sbcseq	r0, r0, #0, 2
			when (rq, state);
    2144:	a4030508 	strge	r0, [r3], #-1288	; 0xfffffaf8
			release;
    2148:	0c200006 	stceq	0, cr0, [r0], #-24	; 0xffffffe8
	deq (b);	// Dequeue the packet ...
    214c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2150:	0000051e 	andeq	r0, r0, lr, lsl r5
	p = ((address)(b + 1));
    2154:	00009415 	andeq	r9, r0, r5, lsl r4
	verify_plg (b, tcv_frm, "tcv11");
    2158:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    215c:	00000f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    2160:	0d02d201 	sfmeq	f5, 1, [r2, #-4]
    2164:	0000050e 	andeq	r0, r0, lr, lsl #10
    2168:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    216c:	c1192000 	tstgt	r9, r0
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2170:	01000002 	tsteq	r0, r2
    2174:	0507048c 	streq	r0, [r7, #-1164]	; 0xfffffb74
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2178:	0006ac03 	andeq	sl, r6, r3, lsl #24
    217c:	8b011a20 	blhi	48a04 <__ccfg+0x28a5c>
	b->u.pointers.tail =
    2180:	0100000f 	tsteq	r0, pc
}
    2184:	01050572 	tsteq	r5, r2, ror r5
		return NULL;
    2188:	0000008d 	andeq	r0, r0, sp, lsl #1
    218c:	00001718 	andeq	r1, r0, r8, lsl r7
    2190:	00001778 	andeq	r1, r0, r8, ror r7
    2194:	05849c01 	streq	r9, [r4, #3073]	; 0xc01
    2198:	001b0000 	andseq	r0, fp, r0
	verify_fds (fd, "tcv16");
    219c:	72000006 	andvc	r0, r0, #6
								Boolean urg) {
    21a0:	1c000005 	stcne	0, cr0, [r0], {5}
    21a4:	76010069 	strvc	r0, [r1], -r9, rrx
	verify_fds (fd, "tcv16");
    21a8:	00bd1105 	adcseq	r1, sp, r5, lsl #2
    21ac:	1d000000 	stcne	0, cr0, [r0, #-0]
    21b0:	000011f7 	strdeq	r1, [r0], -r7
	verify_pld (s, tcv_frm, "tcv17");
    21b4:	0000175a 	andeq	r1, r0, sl, asr r7
    21b8:	0000175c 	andeq	r1, r0, ip, asr r7
    21bc:	02058d01 	andeq	r8, r5, #1, 26	; 0x40
    21c0:	23011e00 	movwcs	r1, #7680	; 0x1e00
    21c4:	01000012 	tsteq	r0, r2, lsl r0
    21c8:	90210568 	eorls	r0, r1, r8, ror #10
    21cc:	e8000014 	stmda	r0, {r2, r4}
    21d0:	01000016 	tsteq	r0, r6, lsl r0
	ptrs.head = (word) fd;
    21d4:	0007e49c 	muleq	r7, ip, r4
	ptrs.tail = (word) urg;
    21d8:	12301f00 	eorsne	r1, r0, #0, 30
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21dc:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    21e0:	11d02001 	bicsne	r2, r0, r1
		if (state != WNONE) {
    21e4:	14900000 	ldrne	r0, [r0], #0
    21e8:	04600000 	strbteq	r0, [r0], #-0
}
    21ec:	6a010000 	bvs	421f4 <__ccfg+0x2224c>
			when (eid, state);
    21f0:	05bf0205 	ldreq	r0, [pc, #517]!	; 23fd <tcvphy_rcv+0x61>
    21f4:	df210000 	svcle	0x00210000
			release;
    21f8:	00000011 	andeq	r0, r0, r1, lsl r0
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21fc:	00081222 	andeq	r1, r8, r2, lsr #4
    2200:	0014aa00 	andseq	sl, r4, r0, lsl #20
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2204:	00048000 	andeq	r8, r4, r0
    2208:	02270d00 	eoreq	r0, r7, #0, 26
    220c:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    2210:	00048023 	andeq	r8, r4, r3, lsr #32
    2214:	08202400 	stmdaeq	r0!, {sl, sp}
    2218:	15380000 	ldrne	r0, [r8, #-0]!
		if (state != WNONE) {
    221c:	5c250000 	stcpl	0, cr0, [r5], #-0
    2220:	aa000012 	bge	2270 <tcvp_control+0x18>
			tmwait (state);
    2224:	a8000014 	stmdage	r0, {r2, r4}
    2228:	01000004 	tsteq	r0, r4
	b->attributes = s->attpattern;
    222c:	1d0404b3 	cfstrsne	mvf0, [r4, #-716]	; 0xfffffd34
		b->attributes.b.urgent = 1;
    2230:	00001438 	andeq	r1, r0, r8, lsr r4
    2234:	00001522 	andeq	r1, r0, r2, lsr #10
	b->u.pointers.head = ptrs.head;
    2238:	0000152e 	andeq	r1, r0, lr, lsr #10
	b->u.pointers.tail = length;
    223c:	0404a401 	streq	sl, [r4], #-1025	; 0xfffffbff
	return (address) (b + 1);
    2240:	00125c1d 	andseq	r5, r2, sp, lsl ip
    2244:	00153600 	andseq	r3, r5, r0, lsl #12
    2248:	00153800 	andseq	r3, r5, r0, lsl #16
    224c:	04aa0100 	strteq	r0, [sl], #256	; 0x100
    2250:	12c02504 	sbcne	r2, r0, #4, 10	; 0x1000000
    2254:	154e0000 	strbne	r0, [lr, #-0]
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2258:	04c00000 	strbeq	r0, [r0], #0
    225c:	bb010000 	bllt	42264 <__ccfg+0x222bc>
    2260:	43250404 			; <UNDEFINED> instruction: 0x43250404
	verify_fph (phy, "tcv23");
    2264:	4e000014 	mcrmi	0, 0, r0, cr0, cr4, {0}
    2268:	e0000015 	and	r0, r0, r5, lsl r0
    226c:	01000004 	tsteq	r0, r4
    2270:	200404c5 	andcs	r0, r4, r5, asr #9
}
    2274:	0000128e 	andeq	r1, r0, lr, lsl #5
	return (physical [phy]) (opt, arg);
    2278:	00001556 	andeq	r1, r0, r6, asr r5
    227c:	00000500 	andeq	r0, r0, r0, lsl #10
    2280:	0404c001 	streq	ip, [r4], #-1
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2284:	00000651 	andeq	r0, r0, r1, asr r6
	if (opt < 0) {
    2288:	00129d21 	andseq	r9, r2, r1, lsr #26
		if (fd < 0)
    228c:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
		if (opt == PHYSOPT_PLUGINFO) {
    2290:	66000012 			; <UNDEFINED> instruction: 0x66000012
			if (fd >= TCV_MAX_PLUGS)
    2294:	68000015 	stmdavs	r0, {r0, r2, r4}
			if ((p = plugins [fd]) == NULL)
    2298:	01000015 	tsteq	r0, r5, lsl r0
    229c:	250404c3 	strcs	r0, [r4, #-1219]	; 0xfffffb3d
}
    22a0:	0000142d 	andeq	r1, r0, sp, lsr #8
		if (fd >= TCV_MAX_PHYS)
    22a4:	0000156a 	andeq	r1, r0, sl, ror #10
		return physinfo [fd];
    22a8:	00000520 	andeq	r0, r0, r0, lsr #10
    22ac:	0404d501 	streq	sp, [r4], #-1281	; 0xfffffaff
	verify_fds (fd, "tcv22");
    22b0:	00144e20 	andseq	r4, r4, r0, lsr #28
    22b4:	00158000 	andseq	r8, r5, r0
    22b8:	00054000 	andeq	r4, r5, r0
    22bc:	04cc0100 	strbeq	r0, [ip], #256	; 0x100
    22c0:	00068e04 	andeq	r8, r6, r4, lsl #28
}
    22c4:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    22c8:	1d000000 	stcne	0, cr0, [r0, #-0]
    22cc:	0000125c 	andeq	r1, r0, ip, asr r2
			return 0;
    22d0:	000015a4 	andeq	r1, r0, r4, lsr #11
    22d4:	000015a6 	andeq	r1, r0, r6, lsr #11
    22d8:	0404df01 	streq	sp, [r4], #-3841	; 0xfffff0ff
    22dc:	00143825 	andseq	r3, r4, r5, lsr #16
    22e0:	0015c400 	andseq	ip, r5, r0, lsl #8
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22e4:	00055800 	andeq	r5, r5, r0, lsl #16
    22e8:	04e80100 	strbteq	r0, [r8], #256	; 0x100
	if (dsp != TCV_DSP_PASS) {
    22ec:	127f2504 	rsbsne	r2, pc, #4, 10	; 0x1000000
		if (ses == NONE)
    22f0:	15c80000 	strbne	r0, [r8]
			syserror (EREQPAR, "tcv26");
    22f4:	05700000 	ldrbeq	r0, [r0, #-0]!
		verify_fds (ses, "tcv27");
    22f8:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    22fc:	8e260d04 	cdphi	13, 2, cr0, cr6, cr4, {0}
    2300:	d2000012 	andle	r0, r0, #18
    2304:	d6000015 			; <UNDEFINED> instruction: 0xd6000015
    2308:	01000015 	tsteq	r0, r5, lsl r0
		if ((p = apb (size)) != NULL) {
    230c:	dc0404ed 	cfstrsle	mvf0, [r4], {237}	; 0xed
    2310:	21000006 	tstcs	r0, r6
		return NULL;
    2314:	0000129d 	muleq	r0, sp, r2
			p->attributes = descriptors [ses] -> attpattern;
    2318:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
			dispose (p, dsp);
    231c:	15f60000 	ldrbne	r0, [r6, #0]!
			p->attributes = descriptors [ses] -> attpattern;
    2320:	05880000 	streq	r0, [r8]
			p->attributes.b.outgoing = 0;
    2324:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
			dispose (p, dsp);
    2328:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
			return (address)(p + 1);
    232c:	f8000014 			; <UNDEFINED> instruction: 0xf8000014
    2330:	a0000015 	andge	r0, r0, r5, lsl r0
	if ((p = apb (size)) != NULL)
    2334:	01000005 	tsteq	r0, r5
    2338:	080404fa 	stmdaeq	r4, {r1, r3, r4, r5, r6, r7, sl}
		return (address)(p + 1);
    233c:	21000007 	tstcs	r0, r7
    2340:	0000145d 	andeq	r1, r0, sp, asr r4
    2344:	12b61d00 	adcsne	r1, r6, #0, 26
    2348:	16000000 	strne	r0, [r0], -r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    234c:	16040000 	strne	r0, [r4], -r0
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2350:	fd010000 	stc2	0, cr0, [r1, #-0]
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2354:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
    2358:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
		syserror (EREQPAR, "tcv28");
    235c:	06000016 			; <UNDEFINED> instruction: 0x06000016
		syserror (EMALLOC, "tcv29");
    2360:	01000016 	tsteq	r0, r6, lsl r0
	physical [phy] = ps;
    2364:	26040500 	strcs	r0, [r4], -r0, lsl #10
	physinfo [phy] = info;
    2368:	00000b95 	muleq	r0, r5, fp
    236c:	0000160e 	andeq	r1, r0, lr, lsl #12
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2370:	0000161a 	andeq	r1, r0, sl, lsl r6
    2374:	04050d01 	streq	r0, [r5], #-3329	; 0xfffff2ff
    2378:	0000075c 	andeq	r0, r0, ip, asr r7
		syserror (EMALLOC, "tcv29");
    237c:	00131127 	andseq	r1, r3, r7, lsr #2
    2380:	00160e00 	andseq	r0, r6, r0, lsl #28
	q_init (q);
    2384:	00161800 	andseq	r1, r6, r0, lsl #16
}
    2388:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
    238c:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
    2390:	20210000 	eorcs	r0, r1, r0
    2394:	00000013 	andeq	r0, r0, r3, lsl r0
    2398:	125c1d00 	subsne	r1, ip, #0, 26
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    239c:	16420000 	strbne	r0, [r2], -r0
	verify_fph (phy, "tcv30");
    23a0:	16440000 	strbne	r0, [r4], -r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    23a4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    23a8:	741d0405 	ldrvc	r0, [sp], #-1029	; 0xfffffbfb
	verify_fph (phy, "tcv30");
    23ac:	44000012 	strmi	r0, [r0], #-18	; 0xffffffee
    23b0:	54000016 	strpl	r0, [r0], #-22	; 0xffffffea
    23b4:	01000016 	tsteq	r0, r6, lsl r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23b8:	1d040541 	cfstr32ne	mvfx0, [r4, #-260]	; 0xfffffefc
    23bc:	0000125c 	andeq	r1, r0, ip, asr r2
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23c0:	00001654 	andeq	r1, r0, r4, asr r6
    23c4:	00001656 	andeq	r1, r0, r6, asr r6
		if (plugins [plg] == NULL)
    23c8:	04054401 	streq	r4, [r5], #-1025	; 0xfffffbff
    23cc:	00127f25 	andseq	r7, r2, r5, lsr #30
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    23d0:	00165600 	andseq	r5, r6, r0, lsl #12
}
    23d4:	0005b800 	andeq	fp, r5, r0, lsl #16
    23d8:	05470100 	strbeq	r0, [r7, #-256]	; 0xffffff00
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23dc:	146b250b 	strbtne	r2, [fp], #-1291	; 0xfffffaf5
    23e0:	165e0000 	ldrbne	r0, [lr], -r0
    23e4:	05d00000 	ldrbeq	r0, [r0]
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23e8:	4b010000 	blmi	423f0 <__ccfg+0x22448>
    23ec:	00000405 	andeq	r0, r0, r5, lsl #8
    23f0:	0011ed28 	andseq	lr, r1, r8, lsr #26
    23f4:	0014c400 	andseq	ip, r4, r0, lsl #8
    23f8:	0014c600 	andseq	ip, r4, r0, lsl #12
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23fc:	02270d00 	eoreq	r0, r7, #0, 26
	len -= (ap.head + ap.tail);
    2400:	0011f728 	andseq	pc, r1, r8, lsr #14
    2404:	0014f200 	andseq	pc, r4, r0, lsl #4
    2408:	0014f400 	andseq	pc, r4, r0, lsl #8
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    240c:	02270d00 	eoreq	r0, r7, #0, 26
    2410:	0011f728 	andseq	pc, r1, r8, lsr #14
    2414:	00167800 	andseq	r7, r6, r0, lsl #16
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2418:	00167a00 	andseq	r7, r6, r0, lsl #20
    241c:	02270d00 	eoreq	r0, r7, #0, 26
    2420:	e1011a00 	tst	r1, r0, lsl #20
	return 1;
    2424:	01000012 	tsteq	r0, r2, lsl r0
    2428:	0106055c 	tsteq	r6, ip, asr r5
    242c:	000000a7 	andeq	r0, r0, r7, lsr #1
	...
	verify_fph (phy, "tcv32");
    2438:	08129c01 	ldmdaeq	r2, {r0, sl, fp, ip, pc}
    243c:	73290000 			; <UNDEFINED> instruction: 0x73290000
    2440:	5e010063 	cdppl	0, 0, cr0, cr1, cr3, {3}
    2444:	00a70705 	adceq	r0, r7, r5, lsl #14
    2448:	04170000 	ldreq	r0, [r7], #-0
    244c:	2a000000 	bcs	2454 <tcvphy_get+0x1c>
	oq = oqueues [phy];
    2450:	000011c3 	andeq	r1, r0, r3, asr #3
	b = q_first (oq);
    2454:	14048e01 	strne	r8, [r4], #-3585	; 0xfffff1ff
	if (q_end (b, oq)) {
    2458:	00082a03 	andeq	r2, r8, r3, lsl #20
	*len = b->length;
    245c:	146e2b00 	strbtne	r2, [lr], #-2816	; 0xfffff500
	deq (b);	// Dequeue the packet ...
    2460:	ad010000 	stcge	0, cr0, [r1, #-0]
}
    2464:	2c000104 	stfcss	f0, [r0], {4}
		return NULL;
    2468:	00117001 	andseq	r7, r1, r1
    246c:	047e0100 	ldrbteq	r0, [lr], #-256	; 0xffffff00
    2470:	146c0106 	strbtne	r0, [ip], #-262	; 0xfffffefa
    2474:	14900000 	ldrne	r0, [r0], #0
	verify_fph (phy, "tcv33");
    2478:	9c010000 	stcls	0, cr0, [r1], {-0}
    247c:	00000855 	andeq	r0, r0, r5, asr r8
    2480:	0000362d 	andeq	r3, r0, sp, lsr #12
    2484:	047e0100 	ldrbteq	r0, [lr], #-256	; 0xffffff00
    2488:	0000a719 	andeq	sl, r0, r9, lsl r7
    248c:	00042a00 	andeq	r2, r4, r0, lsl #20
	oq = oqueues [phy];
    2490:	011e0000 	tsteq	lr, r0
	b = q_first (oq);
    2494:	00000ff5 	strdeq	r0, [r0], -r5
		return NULL;
    2498:	06040101 	streq	r0, [r4], -r1, lsl #2
	return (address)(b + 1);
    249c:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
}
    24a0:	0000146c 	andeq	r1, r0, ip, ror #8
    24a4:	0a1e9c01 	beq	7a94b0 <__ccfg+0x789508>
    24a8:	de2e0000 	cdple	0, 2, cr0, cr14, cr0, {0}
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    24ac:	e4000013 	str	r0, [r0], #-19	; 0xffffffed
	verify_plg (b, tcv_xmt, "tcv34");
    24b0:	86000013 			; <UNDEFINED> instruction: 0x86000013
	hblock_t *b = header (pkt);
    24b4:	1c000008 	stcne	0, cr0, [r0], {8}
	verify_plg (b, tcv_xmt, "tcv34");
    24b8:	6b010069 	blvs	42664 <__ccfg+0x226bc>
    24bc:	008d0b04 	addeq	r0, sp, r4, lsl #22
    24c0:	25000000 	strcs	r0, [r0, #-0]
    24c4:	00001443 	andeq	r1, r0, r3, asr #8
    24c8:	000012de 	ldrdeq	r1, [r0], -lr
    24cc:	00000340 	andeq	r0, r0, r0, asr #6
    24d0:	02040801 	andeq	r0, r4, #65536	; 0x10000
	dispose (b, plugins [b->attributes.b.plugin] ->
    24d4:	000f5420 	andeq	r5, pc, r0, lsr #8
}
    24d8:	0012e000 	andseq	lr, r2, r0
	dispose (b, plugins [b->attributes.b.plugin] ->
    24dc:	00036000 	andeq	r6, r3, r0
    24e0:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    24e4:	00091a02 	andeq	r1, r9, r2, lsl #20
}
    24e8:	03602300 	cmneq	r0, #0, 6
    while(1)
    24ec:	612f0000 			; <UNDEFINED> instruction: 0x612f0000
{
    24f0:	3000000f 	andcc	r0, r0, pc
    SetupTrimDevice();
    24f4:	00000f6d 	andeq	r0, r0, sp, ror #30
    pui32Src = &_etext;
    24f8:	00000360 	andeq	r0, r0, r0, ror #6
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24fc:	000f6e31 	andeq	r6, pc, r1, lsr lr	; <UNPREDICTABLE>
    __asm("    ldr     r0, =_bss\n"
    2500:	00043d00 	andeq	r3, r4, r0, lsl #26
    2504:	13c92200 	bicne	r2, r9, #0, 4
    2508:	12ea0000 	rscne	r0, sl, #0
    250c:	03800000 	orreq	r0, r0, #0
    2510:	fa010000 	blx	42518 <__ccfg+0x22570>
   main();
    2514:	0008e704 	andeq	lr, r8, r4, lsl #14
    FaultISR();
    2518:	13e52100 	mvnne	r2, #0, 2
        *pui32Dest++ = *pui32Src++;
    251c:	d8210000 	stmdale	r1!, {}	; <UNPREDICTABLE>
    2520:	00000013 	andeq	r0, r0, r3, lsl r0
    2524:	0013f322 	andseq	pc, r3, r2, lsr #6
    2528:	0012ee00 	andseq	lr, r2, r0, lsl #28
    252c:	00039800 	andeq	r9, r3, r0, lsl #16
    2530:	04fe0100 	ldrbteq	r0, [lr], #256	; 0x100
    2534:	00000901 	andeq	r0, r0, r1, lsl #18
    2538:	00140221 	andseq	r0, r4, r1, lsr #4
static byte get_byte () {
    253c:	10320000 	eorsne	r0, r2, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2540:	f2000014 	vqadd.s8	d0, d0, d4
    2544:	b0000012 	andlt	r0, r0, r2, lsl r0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2548:	01000003 	tsteq	r0, r3
    254c:	1f2104fc 	svcne	0x002104fc
		if (ee_inp)
    2550:	00000014 	andeq	r0, r0, r4, lsl r0
			b |= 1;
    2554:	20000000 	andcs	r0, r0, r0
    2558:	00001410 	andeq	r1, r0, r0, lsl r4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    255c:	00001332 	andeq	r1, r0, r2, lsr r3
	for (b = 0, i = 0; i < 8; i++) {
    2560:	000003c8 	andeq	r0, r0, r8, asr #7
}
    2564:	02040e01 	andeq	r0, r4, #1, 28
    2568:	00000935 	andeq	r0, r0, r5, lsr r9
    256c:	00141f21 	andseq	r1, r4, r1, lsr #30
static void put_byte (byte b) {
    2570:	10200000 	eorne	r0, r0, r0
    2574:	34000014 	strcc	r0, [r0], #-20	; 0xffffffec
    2578:	e8000013 	stmda	r0, {r0, r1, r4}
    257c:	01000003 	tsteq	r0, r3
		if (b & 0x80)
    2580:	5002040e 	andpl	r0, r2, lr, lsl #8
    2584:	21000009 	tstcs	r0, r9
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2588:	0000141f 	andeq	r1, r0, pc, lsl r4
	for (i = 0; i < 8; i++) {
    258c:	13f32000 	mvnsne	r2, #0
		b <<= 1;
    2590:	134e0000 	movtne	r0, #57344	; 0xe000
	for (i = 0; i < 8; i++) {
    2594:	04000000 	streq	r0, [r0], #-0
}
    2598:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    259c:	096b0204 	stmdbeq	fp!, {r2, r9}^
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    25a0:	02210000 	eoreq	r0, r1, #0
    25a4:	00000014 	andeq	r0, r0, r4, lsl r0
	put_byte (cmd);
    25a8:	0013f326 	andseq	pc, r3, r6, lsr #6
    25ac:	00135400 	andseq	r5, r3, r0, lsl #8
}
    25b0:	00135600 	andseq	r5, r3, r0, lsl #12
    25b4:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
static void wwait (word st, word del) {
    25b8:	00098602 	andeq	r8, r9, r2, lsl #12
    25bc:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    25c0:	20000000 	andcs	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    25c4:	00001234 	andeq	r1, r0, r4, lsr r2
    25c8:	00001366 	andeq	r1, r0, r6, ror #6
    25cc:	00000418 	andeq	r0, r0, r8, lsl r4
    25d0:	02041b01 	andeq	r1, r4, #1024	; 0x400
	put_byte (CMD_RDSR);
    25d4:	000009a1 	andeq	r0, r0, r1, lsr #19
	r = get_byte ();
    25d8:	00124321 	andseq	r4, r2, r1, lsr #6
    25dc:	cb260000 	blgt	9825e4 <__ccfg+0x96263c>
	while (dopen && (rdsr () & 1)) {
    25e0:	9000000c 	andls	r0, r0, ip
}
    25e4:	ba000013 	blt	2638 <ready+0x2c>
		if (st == WNONE)
    25e8:	01000013 	tsteq	r0, r3, lsl r0
    25ec:	c802043e 	stmdagt	r2, {r1, r2, r3, r4, r5, sl}
			mdelay (1);
    25f0:	25000009 	strcs	r0, [r0, #-9]
    25f4:	00001443 	andeq	r1, r0, r3, asr #8
			delay (del, st);
    25f8:	000013ae 	andeq	r1, r0, lr, lsr #7
    25fc:	00000430 	andeq	r0, r0, r0, lsr r4
			release;
    2600:	02030101 	andeq	r0, r3, #1073741824	; 0x40000000
    2604:	12ab2600 	adcne	r2, fp, #0, 12
    2608:	13ca0000 	bicne	r0, sl, #0
static void ready () {
    260c:	13de0000 	bicsne	r0, lr, #0
	if (dopen) {
    2610:	51010000 	mrspl	r0, (UNDEF: 1)
		wwait (WNONE, 1);
    2614:	09ef0304 	stmibeq	pc!, {r2, r8, r9}^	; <UNPREDICTABLE>
    2618:	b61d0000 	ldrlt	r0, [sp], -r0
    261c:	ca000012 	bgt	266c <cclose+0x20>
	dstat = 0;
    2620:	ce000013 	mcrgt	0, 0, r0, cr0, cr3, {0}
}
    2624:	0b000013 	bleq	2678 <ee_open+0x8>
    2628:	00050114 	andeq	r0, r5, r4, lsl r1
    262c:	000b9533 	andeq	r9, fp, r3, lsr r5
	udelay (1);
    2630:	0013e400 	andseq	lr, r3, r0, lsl #8
    2634:	00044800 	andeq	r4, r4, r0, lsl #16
	udelay (1);
    2638:	04720100 	ldrbteq	r0, [r2], #-256	; 0xffffff00
		dopen = DOPEN_TEMP;
    263c:	13113302 	tstne	r1, #134217728	; 0x8000000
    2640:	13e40000 	mvnne	r0, #0
    2644:	04480000 	strbeq	r0, [r8], #-0
    2648:	bd010000 	stclt	0, cr0, [r1, #-0]
static void cclose () {
    264c:	2d210203 	sfmcs	f0, 4, [r1, #-12]!
	if (dopen == DOPEN_TEMP) {
    2650:	21000013 	tstcs	r0, r3, lsl r0
    2654:	00001320 	andeq	r1, r0, r0, lsr #6
		wwait (WNONE, 1);
    2658:	2c000000 	stccs	0, cr0, [r0], {-0}
    265c:	00130801 	andseq	r0, r3, r1, lsl #16
	cmd_0 (CMD_DP);
    2660:	03ed0100 	mvneq	r0, #0, 2
    2664:	11d40106 	bicsne	r0, r4, r6, lsl #2
		dopen = 0;
    2668:	12100000 	andsne	r0, r0, #0
}
    266c:	9c010000 	stcls	0, cr0, [r1], {-0}
word ee_open () {
    2670:	00000aa7 	andeq	r0, r0, r7, lsr #21
	ready ();
    2674:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
	dopen = DOPEN_PERM;
    2678:	03ed0100 	mvneq	r0, #0, 2
    267c:	00008d1c 	andeq	r8, r0, ip, lsl sp
}
    2680:	29500100 	ldmdbcs	r0, {r8}^
	if (dopen) {
    2684:	ef010069 	svc	0x00010069
    2688:	008d0603 	addeq	r0, sp, r3, lsl #12
		dopen = DOPEN_TEMP;
    268c:	045b0000 	ldrbeq	r0, [fp], #-0
		cclose ();
    2690:	62290000 	eorvs	r0, r9, #0
}
    2694:	f001006e 			; <UNDEFINED> instruction: 0xf001006e
int ser_out (word st, const char *m) {
    2698:	00df0803 	sbcseq	r0, pc, r3, lsl #16
	if ((prcs = running (__outserial)) != 0) {
    269c:	04790000 	ldrbteq	r0, [r9], #-0
    26a0:	ed250000 	stc	0, cr0, [r5, #-0]
    26a4:	d4000011 	strle	r0, [r0], #-17	; 0xffffffef
		join (prcs, st);
    26a8:	00000011 	andeq	r0, r0, r1, lsl r0
		release;
    26ac:	01000003 	tsteq	r0, r3
	if (*m)
    26b0:	200203f2 	strdcs	r0, [r2], -r2
		prcs = strlen (m) +1;
    26b4:	000013ac 	andeq	r1, r0, ip, lsr #7
    26b8:	000011da 	ldrdeq	r1, [r0], -sl
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    26bc:	00000318 	andeq	r0, r0, r8, lsl r3
    26c0:	0303f501 	movweq	pc, #13569	; 0x3501	; <UNPREDICTABLE>
    26c4:	00000a95 	muleq	r0, r5, sl
		umwait (st);
    26c8:	0013bb35 	andseq	fp, r3, r5, lsr fp
    26cc:	00047900 	andeq	r7, r4, r0, lsl #18
		prcs =  m [1] + 3;
    26d0:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
	if (*m)
    26d4:	fe000011 	mcr2	0, 0, r0, cr0, cr1, {0}
		strcpy (buf, m);
    26d8:	00000011 	andeq	r0, r0, r1, lsl r0
    26dc:	01000012 	tsteq	r0, r2, lsl r0
	if (runstrand (__outserial, buf) == 0) {
    26e0:	000203f9 	strdeq	r0, [r2], -r9
    26e4:	1266012c 	rsbne	r0, r6, #44, 2
		ufree (buf);
    26e8:	da010000 	ble	426f0 <__ccfg+0x22748>
    26ec:	90010603 	andls	r0, r1, r3, lsl #12
		memcpy (buf, m, prcs);
    26f0:	d4000011 	strle	r0, [r0], #-17	; 0xffffffef
    26f4:	01000011 	tsteq	r0, r1, lsl r0
    26f8:	000b2c9c 	muleq	fp, ip, ip
}
    26fc:	61763400 	cmnvs	r6, r0, lsl #8
    2700:	da01006c 	ble	428b8 <__ccfg+0x22910>
int ser_in (word st, char *buf, int len) {
    2704:	008d1c03 	addeq	r1, sp, r3, lsl #24
    2708:	50010000 	andpl	r0, r1, r0
	if (len == 0)
    270c:	0100691c 	tsteq	r0, ip, lsl r9
	if (__inpline == NULL) {
    2710:	8d0603dc 	stchi	3, cr0, [r6, #-880]	; 0xfffffc90
		if ((prcs = running (__inserial)) == 0) {
    2714:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    2718:	01006e62 	tsteq	r0, r2, ror #28
			prcs = runthread (__inserial);
    271c:	df0803dd 	svcle	0x000803dd
    2720:	8c000000 	stchi	0, cr0, [r0], {-0}
			if (prcs == 0) {
    2724:	25000004 	strcs	r0, [r0, #-4]
				npwait (st);
    2728:	000011ed 	andeq	r1, r0, sp, ror #3
		release;
    272c:	00001190 	muleq	r0, r0, r1
		join (prcs, st);
    2730:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    2734:	0203df01 	andeq	sp, r3, #1, 30
	if (*__inpline == NULL) // bin cmd
    2738:	0013ac20 	andseq	sl, r3, r0, lsr #24
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    273c:	00119400 	andseq	r9, r1, r0, lsl #8
	if (prcs >= len)
    2740:	0002d000 	andeq	sp, r2, r0
		prcs = len-1;
    2744:	03e20100 	mvneq	r0, #0, 2
	memcpy (buf, __inpline, prcs);
    2748:	000b1a03 	andeq	r1, fp, r3, lsl #20
    274c:	13bb3500 			; <UNDEFINED> instruction: 0x13bb3500
    2750:	049f0000 	ldreq	r0, [pc], #0	; 2758 <ser_in+0x54>
	ufree (__inpline);
    2754:	1d000000 	stcne	0, cr0, [r0, #-0]
	__inpline = NULL;
    2758:	000011f7 	strdeq	r1, [r0], -r7
	if (*buf) // if it's NULL, it's a bin cmd
    275c:	000011c2 	andeq	r1, r0, r2, asr #3
		buf [prcs] = '\0';
    2760:	000011c4 	andeq	r1, r0, r4, asr #3
}
    2764:	0203e601 	andeq	lr, r3, #1048576	; 0x100000
		prcs = strlen (__inpline);
    2768:	19011e00 	stmdbne	r1, {r9, sl, fp, ip}
    276c:	01000013 	tsteq	r0, r3, lsl r0
		return 0;
    2770:	100603c6 	andne	r0, r6, r6, asr #7
    2774:	b4000012 	strlt	r0, [r0], #-18	; 0xffffffee
    2778:	01000012 	tsteq	r0, r2, lsl r0
int ser_outf (word st, const char *m, ...) {
    277c:	000b959c 	muleq	fp, ip, r5
    2780:	12222e00 	eorne	r2, r2, #0, 28
	if ((prcs = running (__outserial)) != 0) {
    2784:	12500000 	subsne	r0, r0, #0
    2788:	0b6e0000 	bleq	1b82790 <__ccfg+0x1b627e8>
		join (prcs, st);
    278c:	6a360000 	bvs	d82794 <__ccfg+0xd627ec>
    2790:	02030700 	andeq	r0, r3, #0, 14
		release;
    2794:	0000008d 	andeq	r0, r0, sp, lsl #1
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2798:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
    279c:	07006936 	smladxeq	r0, r6, r9, r6
    27a0:	03f40203 	mvnseq	r0, #805306368	; 0x30000000
		umwait (st);
    27a4:	04c50000 	strbeq	r0, [r5], #0
    27a8:	37000000 	strcc	r0, [r0, -r0]
	if (runstrand (__outserial, buf) == 0) {
    27ac:	00001262 	andeq	r1, r0, r2, ror #4
    27b0:	00001290 	muleq	r0, r0, r2
    27b4:	08006a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, sp, lr}
		ufree (buf);
    27b8:	008d0202 	addeq	r0, sp, r2, lsl #4
		npwait (st);
    27bc:	04d80000 	ldrbeq	r0, [r8], #0
}
    27c0:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
    27c4:	02020800 	andeq	r0, r2, #0, 16
    27c8:	000003f4 	strdeq	r0, [r0], -r4
    27cc:	000004eb 	andeq	r0, r0, fp, ror #9
int ser_inf (word st, const char *fmt, ...) {
    27d0:	ee380000 	cdp	0, 3, cr0, cr8, cr0, {0}
    27d4:	01000010 	tsteq	r0, r0, lsl r0
	if (fmt == NULL)
    27d8:	031403bb 	tsteq	r4, #-335544318	; 0xec000002
	if (__inpline == NULL) {
    27dc:	145e011e 	ldrbne	r0, [lr], #-286	; 0xfffffee2
		if ((prcs = running (__inserial)) == 0) {
    27e0:	82010000 	andhi	r0, r1, #0
    27e4:	10d00603 	sbcsne	r0, r0, r3, lsl #12
			prcs = runthread (__inserial);
    27e8:	11900000 	orrsne	r0, r0, r0
    27ec:	9c010000 	stcls	0, cr0, [r1], {-0}
			if (prcs == 0) {
    27f0:	00000c28 	andeq	r0, r0, r8, lsr #24
				npwait (st);
    27f4:	0010fc2e 	andseq	pc, r0, lr, lsr #24
		release;
    27f8:	00112a00 	andseq	r2, r1, r0, lsl #20
		join (prcs, st);
    27fc:	000be300 	andeq	lr, fp, r0, lsl #6
    2800:	006a2900 	rsbeq	r2, sl, r0, lsl #18
	va_start (ap, fmt);
    2804:	03038901 	movweq	r8, #14593	; 0x3901
	prcs = vscan (__inpline, fmt, ap);
    2808:	0000008d 	andeq	r0, r0, sp, lsl #1
    280c:	000004fe 	strdeq	r0, [r0], -lr
	ufree (__inpline);
    2810:	01006929 	tsteq	r0, r9, lsr #18
	__inpline = NULL;
    2814:	f4030389 	vst2.32	{d0-d3}, [r3], r9
}
    2818:	11000003 	tstne	r0, r3
    281c:	00000005 	andeq	r0, r0, r5
    2820:	0002a01b 	andeq	sl, r2, fp, lsl r0
		return 0;
    2824:	000c0b00 	andeq	r0, ip, r0, lsl #22
    2828:	006a2900 	rsbeq	r2, sl, r0, lsl #18
    282c:	03038f01 	movweq	r8, #16129	; 0x3f01
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2830:	0000008d 	andeq	r0, r0, sp, lsl #1
    2834:	00000524 	andeq	r0, r0, r4, lsr #10
    2838:	01006929 	tsteq	r0, r9, lsr #18
	RF_cmdFs.frequency = 
    283c:	f403038f 	vst2.32	{d0-d3}, [r3]
}
    2840:	37000003 	strcc	r0, [r0, -r3]
    2844:	00000005 	andeq	r0, r0, r5
    2848:	0012e733 	andseq	lr, r2, r3, lsr r7
    284c:	0010d000 	andseq	sp, r0, r0
static int option (int opt, address val) {
    2850:	00028000 	andeq	r8, r2, r0
    2854:	03840100 	orreq	r0, r4, #0, 2
    2858:	13032102 	movwne	r2, #12546	; 0x3102
    285c:	f6210000 			; <UNDEFINED> instruction: 0xf6210000
    2860:	00000012 	andeq	r0, r0, r2, lsl r0
    2864:	11eb3900 	mvnne	r3, r0, lsl #18
    2868:	7d010000 	stcvc	0, cr0, [r1, #-0]
    286c:	34010d03 	strcc	r0, [r1], #-3331	; 0xfffff2fd
    2870:	4000000c 	andmi	r0, r0, ip
    2874:	0100000c 	tsteq	r0, ip
    2878:	000c529c 	muleq	ip, ip, r2
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    287c:	13f32d00 	mvnsne	r2, #0, 26
    2880:	7d010000 	stcvc	0, cr0, [r1, #-0]
			goto RVal;
    2884:	008d1f03 	addeq	r1, sp, r3, lsl #30
			_BIS (dstate, DSTATE_RXON);
    2888:	054a0000 	strbeq	r0, [sl, #-0]
    288c:	3a000000 	bcc	2894 <option+0x44>
	int ret = 0;
    2890:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
			p_trigger (drvprcs, qevent);
    2894:	0c031001 	stceq	0, cr1, [r3], {1}
    2898:	00008d01 	andeq	r8, r0, r1, lsl #26
    289c:	000fc000 	andeq	ip, pc, r0
    28a0:	0010d000 	andseq	sp, r0, r0
    28a4:	cb9c0100 	blgt	fe702cac <_estack+0xde6fdcac>
    28a8:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    28ac:	0000117d 	andeq	r1, r0, sp, ror r1
    28b0:	1e031001 	cdpne	0, 0, cr1, cr3, cr1, {0}
    28b4:	0000008d 	andeq	r0, r0, sp, lsl #1
    28b8:	00000568 	andeq	r0, r0, r8, ror #10
}
    28bc:	6675623b 			; <UNDEFINED> instruction: 0x6675623b
			_BIC (dstate, DSTATE_RXON);
    28c0:	03100100 	tsteq	r0, #0, 2
    28c4:	0001c92f 	andeq	ip, r1, pc, lsr #18
			statid = (val == NULL) ? 0 : *val;
    28c8:	00057b00 	andeq	r7, r5, r0, lsl #22
    28cc:	656c3b00 	strbvs	r3, [ip, #-2816]!	; 0xfffff500
	int ret = 0;
    28d0:	1001006e 	andne	r0, r1, lr, rrx
			ret = (int) statid;
    28d4:	008d3803 	addeq	r3, sp, r3, lsl #16
	if (val != NULL)
    28d8:	061d0000 	ldreq	r0, [sp], -r0
		*val = ret;
    28dc:	9a2b0000 	bls	ac28e4 <__ccfg+0xaa293c>
			ret = rbuffl + 2;
    28e0:	01000010 	tsteq	r0, r0, lsl r0
    28e4:	2b010318 	blcs	4354c <__ccfg+0x235a4>
			if (val != NULL) {
    28e8:	000011a5 	andeq	r1, r0, r5, lsr #3
				memcpy (val, &rxstat,
    28ec:	01033d01 	tsteq	r3, r1, lsl #26
    28f0:	000d4427 	andeq	r4, sp, r7, lsr #8
				memset (&rxstat, 0, 
    28f4:	0010a200 	andseq	sl, r0, r0, lsl #4
    28f8:	0010a400 	andseq	sl, r0, r0, lsl #8
			if (val == NULL)
    28fc:	03650100 	cmneq	r5, #0, 2
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2900:	0d582115 	ldfeqe	f2, [r8, #-84]	; 0xffffffac
    2904:	00000000 	andeq	r0, r0, r0
				utimer_set (bckf_timer, *val);
    2908:	00123538 	andseq	r3, r2, r8, lsr r5
    290c:	02fc0100 	rscseq	r0, ip, #0, 2
    2910:	363c010d 	ldrtcc	r0, [ip], -sp, lsl #2
			for (ret = 0; ret < 8; ret++)
    2914:	01000012 	tsteq	r0, r2, lsl r0
				if (RF_cmdPropRadioDivSetup.txPower
    2918:	880d02f0 	stmdahi	sp, {r4, r5, r6, r7, r9}
					== patable [ret])
    291c:	c000000f 	andgt	r0, r0, pc
				if (RF_cmdPropRadioDivSetup.txPower
    2920:	0100000f 	tsteq	r0, pc
			for (ret = 0; ret < 8; ret++)
    2924:	000d449c 	muleq	sp, ip, r4
    2928:	133b2000 	teqne	fp, #0
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    292c:	0f880000 	svceq	0x00880000
    2930:	02680000 	rsbeq	r0, r8, #0
    2934:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2938:	0d070202 	sfmeq	f0, 4, [r7, #-8]
    293c:	4a210000 	bmi	842944 <__ccfg+0x82299c>
			_BIS (dstate, DSTATE_IRST);
    2940:	00000013 	andeq	r0, r0, r3, lsl r0
    2944:	00137526 	andseq	r7, r3, r6, lsr #10
    2948:	000f9400 	andeq	r9, pc, r0, lsl #8
			ret = (int) channel;
    294c:	000f9a00 	andeq	r9, pc, r0, lsl #20
			goto RVal;
    2950:	02f60100 	rscseq	r0, r6, #0, 2
				(*val > 7) ? 7 : *val;
    2954:	000d2c02 	andeq	r2, sp, r2, lsl #24
    2958:	139e2100 	orrsne	r2, lr, #0, 2
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    295c:	91210000 			; <UNDEFINED> instruction: 0x91210000
    2960:	21000013 	tstcs	r0, r3, lsl r0
			plugch ();
    2964:	00001384 	andeq	r1, r0, r4, lsl #7
			_BIS (dstate, DSTATE_IRST);
    2968:	12ca2700 	sbcne	r2, sl, #0, 14
    296c:	0f9a0000 	svceq	0x009a0000
			ret = (int) vrate;
    2970:	0fa40000 	svceq	0x00a40000
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2974:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    2978:	d9210202 	stmdble	r1!, {r1, r9}
    297c:	00000012 	andeq	r0, r0, r2, lsl r0
    2980:	68013d00 	stmdavs	r1, {r8, sl, fp, ip, sp}
    2984:	01000010 	tsteq	r0, r0, lsl r0
    2988:	010602eb 	smlatteq	r6, fp, r2, r0
    298c:	000000a7 	andeq	r0, r0, r7, lsr #1
    2990:	000d6501 	andeq	r6, sp, r1, lsl #10
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2994:	61753e00 	cmnvs	r5, r0, lsl #28
    2998:	02eb0100 	rsceq	r0, fp, #0, 2
    299c:	000d6527 	andeq	r6, sp, r7, lsr #10
    29a0:	04070000 	streq	r0, [r7], #-0
			syserror (EREQPAR, "cc13 op");
    29a4:	00000226 	andeq	r0, r0, r6, lsr #4
    29a8:	112b011a 			; <UNDEFINED> instruction: 0x112b011a
    29ac:	d4010000 	strle	r0, [r1], #-0
    29b0:	9b010902 	blls	44dc0 <__ccfg+0x24e18>
    29b4:	34000000 	strcc	r0, [r0], #-0
    29b8:	8800000f 	stmdahi	r0, {r0, r1, r2, r3}
    29bc:	0100000f 	tsteq	r0, pc
    29c0:	000dc19c 	muleq	sp, ip, r1
    29c4:	10752d00 	rsbsne	r2, r5, r0, lsl #26
    29c8:	d4010000 	strle	r0, [r1], #-0
    29cc:	00a72102 	adceq	r2, r7, r2, lsl #2
    29d0:	06a90000 	strteq	r0, [r9], r0
    29d4:	753b0000 	ldrvc	r0, [fp, #-0]!
    29d8:	d4010061 	strle	r0, [r1], #-97	; 0xffffff9f
    29dc:	0dc12f02 	stcleq	15, cr2, [r1, #8]
static void issue_cmd (lword cmd) {
    29e0:	06bc0000 	ldrteq	r0, [ip], r0
    29e4:	58330000 	ldmdapl	r3!, {}	; <UNPREDICTABLE>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29e8:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
    29ec:	5000000f 	andpl	r0, r0, pc
    29f0:	01000002 	tsteq	r0, r2
		if (res != 0x86)
    29f4:	210202e6 	smlattcs	r2, r6, r2, r0
			syserror (EHARDWARE, "hang ic0");
    29f8:	00001367 	andeq	r1, r0, r7, ror #6
    29fc:	04070000 	streq	r0, [r7], #-0
		if (cnt-- == 0) {
    2a00:	0000021a 	andeq	r0, r0, sl, lsl r2
			diag ("HUP %lx %lx", cmd, res);
    2a04:	1484011a 	strne	r0, [r4], #282	; 0x11a
    2a08:	8a010000 	bhi	42a10 <__ccfg+0x22a68>
			syserror (EHARDWARE, "hang ic0");
    2a0c:	a7010601 	strge	r0, [r1, -r1, lsl #12]
		udelay (1);
    2a10:	e4000000 	str	r0, [r0], #-0
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a14:	3400000e 	strcc	r0, [r0], #-14
}
    2a18:	0100000f 	tsteq	r0, pc
    2a1c:	000e0f9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
    2a20:	12422d00 	subne	r2, r2, #0, 26
    2a24:	8a010000 	bhi	42a2c <__ccfg+0x22a84>
static void rx_de () {
    2a28:	009b2601 	addseq	r2, fp, r1, lsl #12
	if ((dstate & DSTATE_RXAC) == 0)
    2a2c:	06cf0000 	strbeq	r0, [pc], r0
    2a30:	453f0000 	ldrmi	r0, [pc, #-0]!	; 2a38 <rx_de+0x10>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2a34:	a4010058 	strge	r0, [r1], #-88	; 0xffffffa8
	_BIC (dstate, DSTATE_RXAC);
    2a38:	461d0101 	ldrmi	r0, [sp], -r1, lsl #2
    2a3c:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
}
    2a40:	0200000e 	andeq	r0, r0, #14
    2a44:	0100000f 	tsteq	r0, pc
    2a48:	001a019c 	mulseq	sl, ip, r1
static void rf_off () {
    2a4c:	11f8011e 	mvnsne	r0, lr, lsl r1
	if ((dstate & DSTATE_RFON) == 0)
    2a50:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    2a54:	0dd00601 	ldcleq	6, cr0, [r0, #4]
	IntDisable (INT_RFC_CPE_0);
    2a58:	0ee40000 	cdpeq	0, 14, cr0, cr4, cr0, {0}
    2a5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a60:	00000ec1 	andeq	r0, r0, r1, asr #29
	RFCAdi3VcoLdoVoltageMode (false);
    2a64:	00135b40 	andseq	r5, r3, r0, asr #22
	RFCSynthPowerDown ();
    2a68:	013a0100 	teqeq	sl, r0, lsl #2
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a6c:	0000df08 	andeq	sp, r0, r8, lsl #30
    2a70:	0006ed00 	andeq	lr, r6, r0, lsl #26
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a74:	55454100 	strbpl	r4, [r5, #-256]	; 0xffffff00
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a78:	68010054 	stmdavs	r1, {r2, r4, r6}
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a7c:	0e1e0101 	mufeqe	f0, f6, f1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a80:	38230000 	stmdacc	r3!, {}	; <UNPREDICTABLE>
    2a84:	40000002 	andmi	r0, r0, r2
    2a88:	00001187 	andeq	r1, r0, r7, lsl #3
	_BIC (dstate, DSTATE_RFON);
    2a8c:	0b014701 	bleq	54698 <__ccfg+0x346f0>
    2a90:	0000009b 	muleq	r0, fp, r0
}
    2a94:	00000738 	andeq	r0, r0, r8, lsr r7
    2a98:	00141042 	andseq	r1, r4, r2, asr #32
    2a9c:	000e3c00 	andeq	r3, lr, r0, lsl #24
    2aa0:	000e4400 	andeq	r4, lr, r0, lsl #8
    2aa4:	060d0500 	streq	r0, [sp], -r0, lsl #10
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2aa8:	00000e75 	andeq	r0, r0, r5, ror lr
    2aac:	00141f21 	andseq	r1, r4, r1, lsr #30
    2ab0:	10420000 	subne	r0, r2, r0
		if (cmd->status == tstat)
    2ab4:	48000014 	stmdami	r0, {r2, r4}
		if (timeout-- == 0) {
    2ab8:	5000000e 	andpl	r0, r0, lr
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2abc:	0500000e 	streq	r0, [r0, #-14]
    2ac0:	0e8f060f 	cdpeq	6, 8, cr0, cr15, cr15, {0}
    2ac4:	1f210000 	svcne	0x00210000
			syserror (EHARDWARE, "rt2");
    2ac8:	00000014 	andeq	r0, r0, r4, lsl r0
    2acc:	0013f342 	andseq	pc, r3, r2, asr #6
		udelay (1);
    2ad0:	000e9600 	andeq	r9, lr, r0, lsl #12
		if (cmd->status == tstat)
    2ad4:	000e9e00 	andeq	r9, lr, r0, lsl #28
}
    2ad8:	06170500 	ldreq	r0, [r7], -r0, lsl #10
    2adc:	00000ea9 	andeq	r0, r0, r9, lsr #29
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2ae0:	00140221 	andseq	r0, r4, r1, lsr #4
    2ae4:	f3430000 	vhadd.u8	d16, d3, d0
static void rf_on () {
    2ae8:	a2000013 	andge	r0, r0, #19
    2aec:	aa00000e 	bge	2b2c <rf_on.part.0+0x4c>
	OSCHF_TurnOnXosc();
    2af0:	0500000e 	streq	r0, [r0, #-14]
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2af4:	02210619 	eoreq	r0, r1, #26214400	; 0x1900000
    2af8:	00000014 	andeq	r0, r0, r4, lsl r0
    2afc:	011e0000 	tsteq	lr, r0
    2b00:	000012f0 	strdeq	r1, [r0], -r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b04:	06012b01 	streq	r2, [r1], -r1, lsl #22
    2b08:	00000da8 	andeq	r0, r0, r8, lsr #27
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2b0c:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2b10:	0ef19c01 	cdpeq	12, 15, cr9, cr1, cr1, {0}
	issue_cmd (
    2b14:	25330000 	ldrcs	r0, [r3, #-0]!
    2b18:	b000000f 	andlt	r0, r0, pc
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2b1c:	2000000d 	andcs	r0, r0, sp
    2b20:	01000002 	tsteq	r0, r2
    2b24:	212c0132 			; <UNDEFINED> instruction: 0x212c0132
   pPatchTab[80] = 0;
    2b28:	00000f38 	andeq	r0, r0, r8, lsr pc
   } while (--nIterations);
    2b2c:	011e0000 	tsteq	lr, r0
   pPatchTab[53] = 2;
    2b30:	0000120f 	andeq	r1, r0, pc, lsl #4
    2b34:	06011e01 	streq	r1, [r1], -r1, lsl #28
   pPatchTab[55] = 3;
    2b38:	00000d68 	andeq	r0, r0, r8, ror #26
   pPatchTab[110] = 4;
    2b3c:	00000da8 	andeq	r0, r0, r8, lsr #27
   pPatchTab[107] = 5;
    2b40:	0f259c01 	svceq	0x00259c01
   pPatchTab[65] = 6;
    2b44:	25330000 	ldrcs	r0, [r3, #-0]!
    2b48:	7a00000f 	bvc	2b8c <rf_on.part.0+0xac>
   pPatchTab[57] = 1;
    2b4c:	0000000d 	andeq	r0, r0, sp
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b50:	01000002 	tsteq	r0, r2
   const uint32_t *pS = patchGenfskRfe;
    2b54:	352c0125 	strcc	r0, [ip, #-293]!	; 0xfffffedb
      t2 = *pS++;
    2b58:	00000f38 	andeq	r0, r0, r8, lsr pc
      t4 = *pS++;
    2b5c:	00000777 	andeq	r0, r0, r7, ror r7
      t6 = *pS++;
    2b60:	54440000 	strbpl	r0, [r4], #-0
      t8 = *pS++;
    2b64:	01000013 	tsteq	r0, r3, lsl r0
      *pD++ = t1;
    2b68:	01150117 	tsteq	r5, r7, lsl r1
      *pD++ = t2;
    2b6c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      *pD++ = t3;
    2b70:	000f4603 	andeq	r4, pc, r3, lsl #12
      *pD++ = t5;
    2b74:	65643e00 	strbvs	r3, [r4, #-3584]!	; 0xfffff200
      *pD++ = t7;
    2b78:	1701006c 	strne	r0, [r1, -ip, rrx]
   } while (--nIterations);
    2b7c:	00a72201 	adceq	r2, r7, r1, lsl #4
    2b80:	45000000 	strmi	r0, [r0, #-0]
      *pD++ = t8;
    2b84:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
   } while (--nIterations);
    2b88:	14010e01 	strne	r0, [r1], #-3585	; 0xfffff1ff
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b8c:	000000a7 	andeq	r0, r0, r7, lsr #1
   *pD++ = t2;
    2b90:	14784603 	ldrbtne	r4, [r8], #-1539	; 0xfffff9fd
   *pD++ = t3;
    2b94:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
   *pD++ = t4;
    2b98:	0f7a0314 	svceq	0x007a0314
   *pD++ = t5;
    2b9c:	70470000 	subvc	r0, r7, r0
    2ba0:	01006e69 	tsteq	r0, r9, ror #28
	RFCAdi3VcoLdoVoltageMode (true);
    2ba4:	008d06f2 	strdeq	r0, [sp], r2
    2ba8:	47480000 	strbmi	r0, [r8, -r0]
       	RFCRfTrimSet (&rfTrim);
    2bac:	f4010069 	vst4.16	{d0-d3}, [r1 :128], r9
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2bb0:	00008d0b 	andeq	r8, r0, fp, lsl #26
    2bb4:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2bb8:	0013e501 	andseq	lr, r3, r1, lsl #10
    2bbc:	06980100 	ldreq	r0, [r8], r0, lsl #2
	issue_cmd ((lword)&cmd_srt);
    2bc0:	000d1401 	andeq	r1, sp, r1, lsl #8
    2bc4:	000d6800 	andeq	r6, sp, r0, lsl #16
	issue_cmd ((lword)&RF_cmdFs);
    2bc8:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2bcc:	4a000010 	bmi	2c14 <rf_on.part.0+0x134>
    2bd0:	01006365 	tsteq	r0, r5, ror #6
    2bd4:	00a71a98 	umlaleq	r1, r7, r8, sl
	IntEnable (INT_RFC_CPE_0);
    2bd8:	078a0000 	streq	r0, [sl, r0]
	_BIC (dstate, DSTATE_IRST);
    2bdc:	6d4a0000 	stclvs	0, cr0, [sl, #-0]
    2be0:	2a980100 	bcs	fe602fe8 <_estack+0xde5fdfe8>
    2be4:	00001024 	andeq	r1, r0, r4, lsr #32
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2be8:	0000079d 	muleq	r0, sp, r7
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bec:	0011ed28 	andseq	lr, r1, r8, lsr #26
	IntEnable (INT_RFC_CPE_0);
    2bf0:	000d2000 	andeq	r2, sp, r0
    2bf4:	000d2200 	andeq	r2, sp, r0, lsl #4
}
    2bf8:	02a80100 	adceq	r0, r8, #0, 2
	IntEnable (INT_RFC_CPE_0);
    2bfc:	00141022 	andseq	r1, r4, r2, lsr #32
    2c00:	000d2200 	andeq	r2, sp, r0, lsl #4
    2c04:	0001b000 	andeq	fp, r1, r0
    2c08:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    2c0c:	00000fd9 	ldrdeq	r0, [r0], -r9
    2c10:	00141f21 	andseq	r1, r4, r1, lsr #30
    2c14:	10220000 	eorne	r0, r2, r0
    2c18:	28000014 	stmdacs	r0, {r2, r4}
    2c1c:	d000000d 	andle	r0, r0, sp
    2c20:	01000001 	tsteq	r0, r1
    2c24:	0ff303b8 	svceq	0x00f303b8
    2c28:	1f210000 	svcne	0x00210000
    2c2c:	00000014 	andeq	r0, r0, r4, lsl r0
    2c30:	0013f322 	andseq	pc, r3, r2, lsr #6
    2c34:	000d4000 	andeq	r4, sp, r0
    2c38:	0001e800 	andeq	lr, r1, r0, lsl #16
    2c3c:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    2c40:	0000100d 	andeq	r1, r0, sp
    2c44:	00140221 	andseq	r0, r4, r1, lsr #4
    2c48:	f3430000 	vhadd.u8	d16, d3, d0
    2c4c:	46000013 			; <UNDEFINED> instruction: 0x46000013
    2c50:	4800000d 	stmdami	r0, {r0, r2, r3}
    2c54:	0100000d 	tsteq	r0, sp
    2c58:	022103b8 	eoreq	r0, r1, #184, 6	; 0xe0000002
    2c5c:	00000014 	andeq	r0, r0, r4, lsl r0
static void rx_int_enable () {
    2c60:	d6040700 	strle	r0, [r4], -r0, lsl #14
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c64:	49000001 	stmdbmi	r0, {r0}
    2c68:	00137a01 	andseq	r7, r3, r1, lsl #20
    2c6c:	06720100 	ldrbteq	r0, [r2], -r0, lsl #2
    2c70:	00000001 	andeq	r0, r0, r1
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c74:	00000000 	andeq	r0, r0, r0
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c78:	ca9c0100 	bgt	fe703080 <_estack+0xde6fe080>
    2c7c:	4a000010 	bmi	2cc4 <rx_int_enable+0x64>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c80:	01007473 	tsteq	r0, r3, ror r4
    2c84:	00a71872 	adceq	r1, r7, r2, ror r8
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c88:	07bb0000 	ldreq	r0, [fp, r0]!
    2c8c:	734a0000 	movtvc	r0, #40960	; 0xa000
    2c90:	01006e65 	tsteq	r0, r5, ror #28
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c94:	02442872 	subeq	r2, r4, #7471104	; 0x720000
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c98:	07ce0000 	strbeq	r0, [lr, r0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c9c:	764a0000 	strbvc	r0, [sl], -r0
		if (db->status == DATA_ENTRY_FINISHED) {
    2ca0:	01006c61 	tsteq	r0, r1, ror #24
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ca4:	00fc3572 	rscseq	r3, ip, r2, ror r5
    2ca8:	07ec0000 	strbeq	r0, [ip, r0]!
			nr++;
    2cac:	ab4b0000 	blge	12c2cb4 <__ccfg+0x12a2d0c>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2cb0:	0100000f 	tsteq	r0, pc
    2cb4:	00c90e74 	sbceq	r0, r9, r4, ror lr
    2cb8:	03050000 	movweq	r0, #20480	; 0x5000
    2cbc:	00000000 	andeq	r0, r0, r0
				__dp [pl + 1] = __dp [pl] - 128;
    2cc0:	00149b4c 	andseq	r9, r4, ip, asr #22
				pl = __dp [1] + 2;
    2cc4:	01780100 	cmneq	r8, r0, lsl #2
				__dp [pl + 1] = __dp [pl] - 128;
    2cc8:	00000000 	andeq	r0, r0, r0
    2ccc:	0012204d 	andseq	r2, r2, sp, asr #32
				__dp [pl] = 0;
    2cd0:	00000000 	andeq	r0, r0, r0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2cd4:	0005e800 	andeq	lr, r5, r0, lsl #16
    2cd8:	03810100 	orreq	r0, r1, #0, 2
    2cdc:	00120142 	andseq	r0, r2, r2, asr #2
	...
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2ce8:	127e0100 	rsbsne	r0, lr, #0, 2
				diag ("BAD RX");
    2cec:	000010b9 	strheq	r1, [r0], -r9
    2cf0:	0012132f 	andseq	r1, r2, pc, lsr #6
	if (nr) {
    2cf4:	2a280000 	bcs	a02cfc <__ccfg+0x9e2d54>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cf8:	00000012 	andeq	r0, r0, r2, lsl r0
}
    2cfc:	00000000 	andeq	r0, r0, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2d00:	01000000 	mrseq	r0, (UNDEF: 0)
    2d04:	4e000384 	cdpmi	3, 0, cr0, cr0, cr4, {4}
    2d08:	00144201 	andseq	r4, r4, r1, lsl #4
}
    2d0c:	06620100 	strbteq	r0, [r2], -r0, lsl #2
    2d10:	0016e801 	andseq	lr, r6, r1, lsl #16
    2d14:	00171800 	andseq	r1, r7, r0, lsl #16
    2d18:	499c0100 	ldmibmi	ip, {r8}
    2d1c:	000f4a01 	andeq	r4, pc, r1, lsl #20
    2d20:	064f0100 	strbeq	r0, [pc], -r0, lsl #2
    2d24:	00000001 	andeq	r0, r0, r1
    2d28:	00000000 	andeq	r0, r0, r0
    2d2c:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
thread (cc1350_driver)
    2d30:	28000011 	stmdacs	r0, {r0, r4}
    2d34:	00001251 	andeq	r1, r0, r1, asr r2
	...
    2d40:	00035f01 	andeq	r5, r3, r1, lsl #30
		if (dstate & DSTATE_IRST) {
    2d44:	0f810149 	svceq	0x00810149
    2d48:	3b010000 	blcc	42d50 <__ccfg+0x22da8>
    2d4c:	0cd40106 	ldfeqe	f0, [r4], {6}
			rf_off ();
    2d50:	0d140000 	ldceq	0, cr0, [r4, #-0]
			_BIC (dstate,
    2d54:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d58:	0000112e 	andeq	r1, r0, lr, lsr #2
		if (dstate & DSTATE_RXAC) {
    2d5c:	0100644a 	tsteq	r0, sl, asr #8
    2d60:	00df1c3b 	sbcseq	r1, pc, fp, lsr ip	; <UNPREDICTABLE>
			if ((dstate & DSTATE_RXON) == 0)
    2d64:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
				rx_de ();
    2d68:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
		if (paylen == 0) {
    2d6c:	00104101 	andseq	r4, r0, r1, lsl #2
    2d70:	062b0100 	strteq	r0, [fp], -r0, lsl #2
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d74:	000c9801 	andeq	r9, ip, r1, lsl #16
    2d78:	000cd400 	andeq	sp, ip, r0, lsl #8
    2d7c:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    2d80:	4a000011 	bmi	2dcc <cc1350_driver+0x9c>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d84:	2b010064 	blcs	42f1c <__ccfg+0x22f74>
    2d88:	0000df1b 	andeq	sp, r0, fp, lsl pc
    2d8c:	00082800 	andeq	r2, r8, r0, lsl #16
    2d90:	01490000 	mrseq	r0, (UNDEF: 73)
    2d94:	00001277 	andeq	r1, r0, r7, ror r2
    2d98:	01062001 	tsteq	r6, r1
    2d9c:	00000c6c 	andeq	r0, r0, ip, ror #24
    2da0:	00000c96 	muleq	r0, r6, ip
		} else if (dstate & DSTATE_RXON) {
    2da4:	117c9c01 	cmnne	ip, r1, lsl #24
	if (dstate & DSTATE_RFON)
    2da8:	6e4a0000 	cdpvs	0, 4, cr0, cr10, cr0, {0}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2dac:	1c200100 	stfnes	f0, [r0], #-0
		re->status = DATA_ENTRY_PENDING;
    2db0:	000000b8 	strheq	r0, [r0], -r8
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2db4:	00000846 	andeq	r0, r0, r6, asr #16
	issue_cmd ((lword)&RF_cmdPropRx);
    2db8:	62014900 	andvs	r4, r1, #0, 18
	_BIS (dstate, DSTATE_RXAC);
    2dbc:	01000013 	tsteq	r0, r3, lsl r0
    2dc0:	40010619 	andmi	r0, r1, r9, lsl r6
    2dc4:	6c00000c 	stcvs	0, cr0, [r0], {12}
    2dc8:	0100000c 	tsteq	r0, ip
	if (dstate & DSTATE_RXAC)
    2dcc:	0011b79c 	mulseq	r1, ip, r7
    2dd0:	006e4f00 	rsbeq	r4, lr, r0, lsl #30
				if (statid != 0xffff)
    2dd4:	b81c1901 	ldmdalt	ip, {r0, r8, fp, ip}
    2dd8:	01000000 	mrseq	r0, (UNDEF: 0)
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2ddc:	11b74350 			; <UNDEFINED> instruction: 0x11b74350
				RF_cmdPropTx.pktLen = (byte) paylen;
    2de0:	0c540000 	mraeq	r0, r4, acc0
		if (paylen == 0) {
    2de4:	0c5e0000 	mraeq	r0, lr, acc0
			wait (qevent, DR_LOOP);
    2de8:	1b010000 	blne	42df0 <__ccfg+0x22e48>
    2dec:	11c52103 	bicne	r2, r5, r3, lsl #2
			if (dstate & DSTATE_RXAC) {
    2df0:	00000000 	andeq	r0, r0, r0
    2df4:	00145650 	andseq	r5, r4, r0, asr r6
				rx_int_enable ();
    2df8:	14150100 	ldrne	r0, [r5], #-256	; 0xffffff00
			release;
    2dfc:	11d00301 	bicsne	r0, r0, r1, lsl #6
			} else if (dstate & DSTATE_RFON) {
    2e00:	6e510000 	cdpvs	0, 5, cr0, cr1, cr0, {0}
				delay (offdelay, DR_GOOF);
    2e04:	2b150100 	blcs	54320c <__ccfg+0x523264>
    2e08:	000000b8 	strheq	r0, [r0], -r8
    2e0c:	102d5200 	eorne	r5, sp, r0, lsl #4
		if (bckf_timer) {
    2e10:	1a030000 	bne	c2e18 <__ccfg+0xa2e70>
			wait (qevent, DR_LOOP);
    2e14:	03013501 	movweq	r3, #5377	; 0x1501
    2e18:	000011ed 	andeq	r1, r0, sp, ror #3
    2e1c:	00144753 	andseq	r4, r4, r3, asr r7
			delay (bckf_timer, DR_LOOP);
    2e20:	011a0300 	tsteq	sl, r0, lsl #6
    2e24:	00007348 	andeq	r7, r0, r8, asr #6
			if (dstate & DSTATE_RXAC)
    2e28:	7e540000 	cdpvc	0, 5, cr0, cr4, cr0, {0}
    2e2c:	03000012 	movweq	r0, #18
	if (dstate & DSTATE_RFON)
    2e30:	0301355b 	movweq	r3, #5467	; 0x155b
    2e34:	000f9e54 	andeq	r9, pc, r4, asr lr	; <UNPREDICTABLE>
		rx_de ();
    2e38:	35500300 	ldrbcc	r0, [r0, #-768]	; 0xfffffd00
		RF_cmdPropTx . status = 0;
    2e3c:	99550301 	ldmdbls	r5, {r0, r8, r9}^
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e40:	0f000013 	svceq	0x00000013
    2e44:	730101bf 	movwvc	r0, #4543	; 0x11bf
    2e48:	03000000 	movweq	r0, #0
		issue_cmd ((lword)&cmd_cs);
    2e4c:	00001220 	andeq	r1, r0, r0, lsr #4
		if (dstate & DSTATE_IRST)
    2e50:	0013fa16 	andseq	pc, r3, r6, lsl sl	; <UNPREDICTABLE>
    2e54:	0ec10f00 	cdpeq	15, 12, cr0, cr1, cr0, {0}
    2e58:	00000073 	andeq	r0, r0, r3, ror r0
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e5c:	13695400 	cmnne	r9, #0, 8
    2e60:	900f0000 	andls	r0, pc, r0
			delay (1, DR_XMIT);
    2e64:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e68:	00000f68 	andeq	r0, r0, r8, ror #30
    2e6c:	01017b0f 	tsteq	r1, pc, lsl #22
    2e70:	11d65203 	bicsne	r5, r6, r3, lsl #4
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e74:	660a0000 	strvs	r0, [sl], -r0
    2e78:	03010103 	movweq	r0, #4355	; 0x1103
				RF_cmdPropTx . status = 0;
    2e7c:	00001251 	andeq	r1, r0, r1, asr r2
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e80:	0011ad53 	andseq	sl, r1, r3, asr sp
				issue_cmd ((lword)&RF_cmdPropTx);
    2e84:	03660a00 	cmneq	r6, #0, 20
				proceed (DR_XMIT);
    2e88:	0000731f 	andeq	r7, r0, pc, lsl r3
    2e8c:	41560000 	cmpmi	r6, r0
			txtries++;
    2e90:	02000013 	andeq	r0, r0, #19
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e94:	0101014c 	tsteq	r1, ip, asr #2
    2e98:	12d25403 	sbcsne	r5, r2, #50331648	; 0x3000000
    2e9c:	c4020000 	strgt	r0, [r2], #-0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ea0:	57030101 	strpl	r0, [r3, -r1, lsl #2]
		goto DR_LOOP__;
    2ea4:	000010ae 	andeq	r1, r0, lr, lsr #1
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ea8:	0101ad02 	tsteq	r1, r2, lsl #26
		paylen = 0;
    2eac:	00000073 	andeq	r0, r0, r3, ror r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2eb0:	10015603 	andne	r5, r1, r3, lsl #12
		txtries = 0;
    2eb4:	450e0000 	strmi	r0, [lr, #-0]
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2eb8:	03010102 	movweq	r0, #4354	; 0x1102
    2ebc:	000fd358 	andeq	sp, pc, r8, asr r3	; <UNPREDICTABLE>
    2ec0:	022c0e00 	eoreq	r0, ip, #0, 28
    2ec4:	00730101 	rsbseq	r0, r3, r1, lsl #2
    2ec8:	52030000 	andpl	r0, r3, #0
		    tcvphy_top (physid) == NULL)
    2ecc:	00000fbe 			; <UNDEFINED> instruction: 0x00000fbe
    2ed0:	0101dc0e 	tsteq	r1, lr, lsl #24
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2ed4:	12ab0301 	adcne	r0, fp, #67108864	; 0x4000000
    2ed8:	78530000 	ldmdavc	r3, {}^	; <UNPREDICTABLE>
			rf_off ();
    2edc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
endthread
    2ee0:	731f01dc 	tstvc	pc, #220, 2	; 0x37
    2ee4:	00000000 	andeq	r0, r0, r0
    2ee8:	00113d56 	andseq	r3, r1, r6, asr sp
    2eec:	010f0b00 	tsteq	pc, r0, lsl #22
    2ef0:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    2ef4:	0000107a 	andeq	r1, r0, sl, ror r0
    2ef8:	0101ed0c 	tsteq	r1, ip, lsl #26
    2efc:	13865403 	orrne	r5, r6, #50331648	; 0x3000000
    2f00:	d60c0000 	strle	r0, [ip], -r0
    2f04:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    2f08:	0000104f 	andeq	r1, r0, pc, asr #32
    2f0c:	01044006 	tsteq	r4, r6
    2f10:	12e70301 	rscne	r0, r7, #67108864	; 0x4000000
    2f14:	ba530000 	blt	14c2f1c <__ccfg+0x14a2f74>
    2f18:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2f1c:	73240440 			; <UNDEFINED> instruction: 0x73240440
void RFCCPE0IntHandler (void) {
    2f20:	00000000 	andeq	r0, r0, r0
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f24:	000fe852 	andeq	lr, pc, r2, asr r8	; <UNPREDICTABLE>
		_BIS (dstate, DSTATE_IRST);
    2f28:	03910600 	orrseq	r0, r1, #0, 12
    2f2c:	11030101 	tstne	r3, r1, lsl #2
    2f30:	53000013 	movwpl	r0, #19
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2f34:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f38:	17039106 	strne	r9, [r3, -r6, lsl #2]
    2f3c:	00000073 	andeq	r0, r0, r3, ror r0
	p_trigger (drvprcs, qevent);
    2f40:	00111453 	andseq	r1, r1, r3, asr r4
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f44:	03910600 	orrseq	r0, r1, #0, 12
    2f48:	0000732a 	andeq	r7, r0, sl, lsr #6
    2f4c:	0d520000 	ldcleq	0, cr0, [r2, #-0]
    2f50:	06000014 			; <UNDEFINED> instruction: 0x06000014
    2f54:	0101030c 	tsteq	r1, ip, lsl #6
    2f58:	00133b03 	andseq	r3, r3, r3, lsl #22
    2f5c:	11ba5300 			; <UNDEFINED> instruction: 0x11ba5300
    2f60:	0c060000 	stceq	0, cr0, [r6], {-0}
    2f64:	00731803 	rsbseq	r1, r3, r3, lsl #16
    2f68:	14530000 	ldrbne	r0, [r3], #-0
	RISE_N_SHINE;
    2f6c:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2f70:	732b030c 			; <UNDEFINED> instruction: 0x732b030c
    2f74:	00000000 	andeq	r0, r0, r0
}
    2f78:	00110552 	andseq	r0, r1, r2, asr r5
    2f7c:	01e70600 	mvneq	r0, r0, lsl #12
    2f80:	58030101 	stmdapl	r3, {r0, r8}
    2f84:	53000013 	movwpl	r0, #19
    2f88:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
    2f8c:	1901e706 	stmdbne	r1, {r1, r2, r8, r9, sl, sp, lr, pc}
void phys_cc1350 (int phy, int mbs) {
    2f90:	00000073 	andeq	r0, r0, r3, ror r0
	if (rbuffl != 0)
    2f94:	12485200 	subne	r5, r8, #0, 4
    2f98:	ba060000 	blt	182fa0 <__ccfg+0x162ff8>
		syserror (ETOOMANY, "cc13");
    2f9c:	03010101 	movweq	r0, #4353	; 0x1101
		syserror (EREQPAR, "cc13 mb");
    2fa0:	00001375 	andeq	r1, r0, r5, ror r3
	if (mbs == 0)
    2fa4:	0011ba53 	andseq	fp, r1, r3, asr sl
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2fa8:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
		syserror (EREQPAR, "cc13 mb");
    2fac:	00007315 	andeq	r7, r0, r5, lsl r3
    2fb0:	30520000 	subscc	r0, r2, r0
	i = 0;
    2fb4:	06000013 			; <UNDEFINED> instruction: 0x06000013
	rbuffl = (byte) mbs;
    2fb8:	01010139 	tsteq	r1, r9, lsr r1
		db->config.type = 0;	// General (data in structure)
    2fbc:	0013ac03 	andseq	sl, r3, r3, lsl #24
	rbuffl = (byte) mbs;
    2fc0:	11ba5300 			; <UNDEFINED> instruction: 0x11ba5300
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2fc4:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    2fc8:	00731b01 	rsbseq	r1, r3, r1, lsl #22
		if (db == NULL)
    2fcc:	a2530000 	subsge	r0, r3, #0
			syserror (EMALLOC, "cc13");
    2fd0:	06000010 			; <UNDEFINED> instruction: 0x06000010
    2fd4:	732e0139 			; <UNDEFINED> instruction: 0x732e0139
    2fd8:	53000000 	movwpl	r0, #0
		db->status = DATA_ENTRY_PENDING;
    2fdc:	0000108e 	andeq	r1, r0, lr, lsl #1
		if (i)
    2fe0:	1b013a06 	blne	51800 <__ccfg+0x31858>
			da->pNextEntry = (byte*) db;
    2fe4:	00000073 	andeq	r0, r0, r3, ror r0
		db->length = rbuffl + 2;
    2fe8:	12535200 	subsne	r5, r3, #0, 4
    2fec:	84040000 	strhi	r0, [r4], #-0
		db->config.type = 0;	// General (data in structure)
    2ff0:	03010102 	movweq	r0, #4354	; 0x1102
		db->length = rbuffl + 2;
    2ff4:	000013c9 	andeq	r1, r0, r9, asr #7
	db->pNextEntry = (byte*) re;
    2ff8:	00112153 	andseq	r2, r1, r3, asr r1
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ffc:	02840400 	addeq	r0, r4, #0, 8
    3000:	0000731e 	andeq	r7, r0, lr, lsl r3
	if (rbuffs == NULL)
    3004:	50520000 	subspl	r0, r2, r0
	rbuffs->pCurrEntry = (byte*) re;
    3008:	0400000f 	streq	r0, [r0], #-15
	rbuffs->pLastEntry = NULL;
    300c:	01010206 	tsteq	r1, r6, lsl #4
    3010:	0013f303 	andseq	pc, r3, r3, lsl #6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3014:	11215300 			; <UNDEFINED> instruction: 0x11215300
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    3018:	06040000 	streq	r0, [r4], -r0
    301c:	00732302 	rsbseq	r2, r3, r2, lsl #6
    3020:	30530000 	subscc	r0, r3, r0
	rbuffl -= 2;
    3024:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3028:	73370206 	teqvc	r7, #1610612736	; 0x60000000
	rbuffl -= 2;
    302c:	00000000 	andeq	r0, r0, r0
	physid = phy;
    3030:	0012c452 	andseq	ip, r2, r2, asr r4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3034:	01540400 	cmpeq	r4, r0, lsl #8
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3038:	10030101 	andne	r0, r3, r1, lsl #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    303c:	53000014 	movwpl	r0, #20
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3040:	00001121 	andeq	r1, r0, r1, lsr #2
    3044:	19015404 	stmdbne	r1, {r2, sl, ip, lr}
	utimer_add (&bckf_timer);
    3048:	00000073 	andeq	r0, r0, r3, ror r0
	drvprcs = runthread (cc1350_driver);
    304c:	13d15200 	bicsne	r5, r1, #0, 4
    3050:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    3054:	03010101 	movweq	r0, #4353	; 0x1101
	if (drvprcs == 0)
    3058:	0000142d 	andeq	r1, r0, sp, lsr #8
		syserror (ERESOURCE, "cc13");
    305c:	00112153 	andseq	r2, r1, r3, asr r1
    3060:	011e0400 	tsteq	lr, r0, lsl #8
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3064:	00007317 	andeq	r7, r0, r7, lsl r3
    3068:	56560000 	ldrbpl	r0, [r6], -r0
    306c:	09000011 	stmdbeq	r0, {r0, r4}
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3070:	01010463 	tsteq	r1, r3, ror #8
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3074:	10be5603 	adcsne	r5, lr, r3, lsl #12
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3078:	54090000 	strpl	r0, [r9], #-0
    307c:	03010104 	movweq	r0, #4356	; 0x1104
    3080:	0010d756 	andseq	sp, r0, r6, asr r7
    3084:	022a0900 	eoreq	r0, sl, #0, 18
    3088:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    308c:	0000141b 	andeq	r1, r0, fp, lsl r4
    3090:	01016809 	tsteq	r1, r9, lsl #16
    3094:	146b0301 	strbtne	r0, [fp], #-769	; 0xfffffcff
    3098:	e3530000 	cmp	r3, #0
	plugch ();
    309c:	09000010 	stmdbeq	r0, {r4}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    30a0:	731f0168 	tstvc	pc, #104, 2
    30a4:	00000000 	andeq	r0, r0, r0
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    30a8:	00101d56 	andseq	r1, r0, r6, asr sp
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    30ac:	01320900 	teqeq	r2, r0, lsl #18
    30b0:	59030101 	stmdbpl	r3, {r0, r8}
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    30b4:	00000d44 	andeq	r0, r0, r4, asr #26
	...
}
    30c0:	58359c01 	ldmdapl	r5!, {r0, sl, fp, ip, pc}
    30c4:	5900000d 	stmdbpl	r0, {r0, r2, r3}
    30c8:	00000008 	andeq	r0, r0, r8
    30cc:	00121f00 	andseq	r1, r2, r0, lsl #30
    30d0:	f2000300 	vcgt.s8	d0, d0, d0
    30d4:	04000009 	streq	r0, [r0], #-9
    30d8:	0000ac01 	andeq	sl, r0, r1, lsl #24
    30dc:	15bb0c00 	ldrne	r0, [fp, #3072]!	; 0xc00
    30e0:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    30e4:	07900000 	ldreq	r0, [r0, r0]
    30e8:	00000000 	andeq	r0, r0, r0
    30ec:	22de0000 	sbcscs	r0, lr, #0
    30f0:	01020000 	mrseq	r0, (UNDEF: 2)
    30f4:	000c5d06 	andeq	r5, ip, r6, lsl #26
    30f8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    30fc:	00000a6b 	andeq	r0, r0, fp, ror #20
    3100:	002ba103 	eoreq	sl, fp, r3, lsl #2
    3104:	18280300 	stmdane	r8!, {r8, r9}
    3108:	0000003f 	andeq	r0, r0, pc, lsr r0
    310c:	fd050402 	stc2	4, cr0, [r5, #-8]
    3110:	02000007 	andeq	r0, r0, #7
    3114:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    3118:	1c030000 	stcne	0, cr0, [r3], {-0}
    311c:	0300002a 	movweq	r0, #42	; 0x2a
    3120:	0059182e 	subseq	r1, r9, lr, lsr #16
    3124:	01020000 	mrseq	r0, (UNDEF: 2)
    3128:	000c5b08 	andeq	r5, ip, r8, lsl #22
    312c:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    3130:	31030000 	mrscc	r0, (UNDEF: 3)
    3134:	00006c19 	andeq	r6, r0, r9, lsl ip
    3138:	07020200 	streq	r0, [r2, -r0, lsl #4]
    313c:	00000d66 	andeq	r0, r0, r6, ror #26
    3140:	0029b403 	eoreq	fp, r9, r3, lsl #8
    3144:	19340300 	ldmdbne	r4!, {r8, r9}
    3148:	0000007f 	andeq	r0, r0, pc, ror r0
    314c:	26070402 	strcs	r0, [r7], -r2, lsl #8
    3150:	02000004 	andeq	r0, r0, #4
    3154:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    3158:	04040000 	streq	r0, [r4], #-0
    315c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    3160:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3164:	0000042b 	andeq	r0, r0, fp, lsr #8
    3168:	00051e03 	andeq	r1, r5, r3, lsl #28
    316c:	1b280400 	blne	a04174 <__ccfg+0x9e41cc>
    3170:	000000a7 	andeq	r0, r0, r7, lsr #1
    3174:	000b9005 	andeq	r9, fp, r5
    3178:	000b0400 	andeq	r0, fp, r0, lsl #8
    317c:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    3180:	00086d06 	andeq	r6, r8, r6, lsl #26
    3184:	0000bf00 	andeq	fp, r0, r0, lsl #30
    3188:	00010000 	andeq	r0, r1, r0
    318c:	92030407 	andls	r0, r3, #117440512	; 0x7000000
    3190:	0400000b 	streq	r0, [r0], #-11
    3194:	009b1863 	addseq	r1, fp, r3, ror #16
    3198:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    319c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    31a0:	004d1226 	subeq	r1, sp, r6, lsr #4
strand (__outserial, const char*)
    31a4:	fb030000 	blx	c31ae <__ccfg+0xa3206>
    31a8:	05000028 	streq	r0, [r0, #-40]	; 0xffffffd8
    31ac:	00601227 	rsbeq	r1, r0, r7, lsr #4
    31b0:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
endstrand
    31b4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    31b8:	000000d9 	ldrdeq	r0, [r0], -r9
	ptr = data;
    31bc:	0013cc03 	andseq	ip, r3, r3, lsl #24
    31c0:	12280500 	eorne	r0, r8, #0, 10
	if (*ptr)
    31c4:	00000033 	andeq	r0, r0, r3, lsr r0
		len = strlen (ptr);
    31c8:	001dc203 	andseq	ip, sp, r3, lsl #4
    31cc:	122b0500 	eorne	r0, fp, #0, 10
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    31d0:	0000004d 	andeq	r0, r0, sp, asr #32
    31d4:	0000fb09 	andeq	pc, r0, r9, lsl #22
    31d8:	294d0300 	stmdbcs	sp, {r8, r9}^
    31dc:	2c050000 	stccs	0, cr0, [r5], {-0}
    31e0:	00007312 	andeq	r7, r0, r2, lsl r3
	len -= quant;
    31e4:	010c0800 	tsteq	ip, r0, lsl #16
    31e8:	46030000 	strmi	r0, [r3], -r0
    31ec:	05000006 	streq	r0, [r0, #-6]
	if (len == 0) {
    31f0:	0073122d 	rsbseq	r1, r3, sp, lsr #4
		ufree (data);
    31f4:	b4030000 	strlt	r0, [r3], #-0
		finish;
    31f8:	0500000b 	streq	r0, [r0, #-11]
    31fc:	0135102e 	teqeq	r5, lr, lsr #32
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3200:	040a0000 	streq	r0, [sl], #-0
    3204:	000000d9 	ldrdeq	r0, [r0], -r9
    3208:	3205080b 	andcc	r0, r5, #720896	; 0xb0000
    320c:	0001c909 	andeq	ip, r1, r9, lsl #18
    3210:	00340c00 	eorseq	r0, r4, r0, lsl #24
strand (__inserial, address)
    3214:	34050000 	strcc	r0, [r5], #-0
    3218:	0000fb07 	andeq	pc, r0, r7, lsl #22
    321c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    3220:	064c0c00 	strbeq	r0, [ip], -r0, lsl #24
    3224:	35050000 	strcc	r0, [r5, #-0]
	if (__inpline != NULL)
    3228:	0000fb03 	andeq	pc, r0, r3, lsl #22
    322c:	06010100 	streq	r0, [r1], -r0, lsl #2
		finish;
    3230:	02e70c00 	rsceq	r0, r7, #0, 24
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3234:	36050000 	strcc	r0, [r5], -r0
    3238:	0000fb03 	andeq	pc, r0, r3, lsl #22
    323c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3240:	06b70c00 	ldrteq	r0, [r7], r0, lsl #24
		umwait (IM_INIT);
    3244:	37050000 	strcc	r0, [r5, -r0]
		release;
    3248:	0000fb03 	andeq	pc, r0, r3, lsl #22
	savedata (data);
    324c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
	len = MAX_LINE_LENGTH;
    3250:	0a9f0c00 	beq	fe7c6258 <_estack+0xde7c1258>
	io (IM_READ, __cport, READ, ptr, 1);
    3254:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    3258:	0000fb03 	andeq	pc, r0, r3, lsl #22
    325c:	00040100 	andeq	r0, r4, r0, lsl #2
    3260:	065b0d00 	ldrbeq	r0, [fp], -r0, lsl #26
	if (ptr == (char*) data) { // new line
    3264:	3a050000 	bcc	14326c <__ccfg+0x1232c4>
    3268:	0000fb07 	andeq	pc, r0, r7, lsl #22
		if (*ptr == '\0') { // bin cmd
    326c:	fb0d0100 	blx	343676 <__ccfg+0x3236ce>
			proceed (IM_BIN);
    3270:	05000008 	streq	r0, [r0, #-8]
    3274:	00fb033c 	rscseq	r0, fp, ip, lsr r3
		if (*ptr < 0x20)
    3278:	0d020000 	stceq	0, cr0, [r2, #-0]
    327c:	00000f3a 	andeq	r0, r0, sl, lsr pc
			proceed (IM_READ);
    3280:	fb033d05 	blx	d269e <__ccfg+0xb26f6>
    3284:	03000000 	movweq	r0, #0
	if (*ptr == '\n' || *ptr == '\r') {
    3288:	0009130d 	andeq	r1, r9, sp, lsl #6
    328c:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    3290:	0000010c 	andeq	r0, r0, ip, lsl #2
		*ptr = '\0';
    3294:	1d030004 	stcne	0, cr0, [r3, #-16]
		__inpline = (char*)data;
    3298:	05000003 	streq	r0, [r0, #-3]
		finish;
    329c:	013b0341 	teqeq	fp, r1, asr #6
	if (len) {
    32a0:	c9090000 	stmdbgt	r9, {}	; <UNPREDICTABLE>
		ptr++;
    32a4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    32a8:	000006be 			; <UNDEFINED> instruction: 0x000006be
		len--;
    32ac:	d51a4305 	ldrle	r4, [sl, #-773]	; 0xfffffcfb
	proceed (IM_READ);
    32b0:	01000001 	tsteq	r0, r1
	io (IM_BIN, __cport, READ, ptr, 1);
    32b4:	01a00e01 	lsleq	r0, r1, #28
    32b8:	45050000 	strmi	r0, [r5, #-0]
    32bc:	0001f60e 	andeq	pc, r1, lr, lsl #12
    32c0:	0a010100 	beq	436c8 <__ccfg+0x23720>
    32c4:	0001fc04 	andeq	pc, r1, r4, lsl #24
	len -= 2;
    32c8:	08010200 	stmdaeq	r1, {r9}
	if (len > *ptr + 1) // 1 for 0x04
    32cc:	00000c64 	andeq	r0, r0, r4, ror #24
    32d0:	0001fc08 	andeq	pc, r1, r8, lsl #24
		len = *ptr + 1;
    32d4:	03260e00 			; <UNDEFINED> instruction: 0x03260e00
    32d8:	45050000 	strmi	r0, [r5, #-0]
	ptr++;
    32dc:	0001f61e 	andeq	pc, r1, lr, lsl r6	; <UNPREDICTABLE>
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32e0:	0b010100 	bleq	436e8 <__ccfg+0x23740>
    32e4:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    32e8:	00000247 	andeq	r0, r0, r7, asr #4
    32ec:	000cd80d 	andeq	sp, ip, sp, lsl #16
    32f0:	0b900600 	bleq	fe404af8 <_estack+0xde3ffaf8>
    32f4:	00000073 	andeq	r0, r0, r3, ror r0
	len -= quant;
    32f8:	10750d00 	rsbsne	r0, r5, r0, lsl #26
		__inpline = (char*)data;
    32fc:	91060000 	mrsls	r0, (UNDEF: 6)
		finish;
    3300:	0000d908 	andeq	sp, r0, r8, lsl #18
	ptr += quant;
    3304:	c50d0400 	strgt	r0, [sp, #-1024]	; 0xfffffc00
    3308:	06000001 	streq	r0, [r0], -r1
endstrand
    330c:	01071092 	swpeq	r1, r2, [r7]
    3310:	00060000 	andeq	r0, r6, r0
	proceed (IM_BINL);
    3314:	000ccc03 	andeq	ip, ip, r3, lsl #24
endstrand
    3318:	03930600 	orrseq	r0, r3, #0, 12
    331c:	00000216 	andeq	r0, r0, r6, lsl r2
    3320:	0002470f 	andeq	r4, r2, pc, lsl #14
    3324:	00025e00 	andeq	r5, r2, r0, lsl #28
    3328:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    332c:	0000093d 	andeq	r0, r0, sp, lsr r9
		if (res && (d < n))
    3330:	530f9906 	movwpl	r9, #63750	; 0xf906
    3334:	01000002 	tsteq	r0, r2
    3338:	07010b01 	streq	r0, [r1, -r1, lsl #22]
    333c:	02960991 	addseq	r0, r6, #2375680	; 0x244000
			res [d] = (char) c;
    3340:	1a0c0000 	bne	303348 <__ccfg+0x2e33a0>
		d++;
    3344:	07000009 	streq	r0, [r0, -r9]
    3348:	00fb0793 	smlalseq	r0, fp, r3, r7
    334c:	07010000 	streq	r0, [r1, -r0]
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3350:	cc0c0001 	stcgt	0, cr0, [ip], {1}
    3354:	07000005 	streq	r0, [r0, -r5]
    3358:	00fb0394 	smlalseq	r0, fp, r4, r3
				enci (10000);
    335c:	01010000 	mrseq	r0, (UNDEF: 1)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3360:	03000000 	movweq	r0, #0
    3364:	00000aab 	andeq	r0, r0, fp, lsr #21
	d = 0;
    3368:	6c039607 	stcvs	6, cr9, [r3], {7}
		c = *fm++;
    336c:	08000002 	stmdaeq	r0, {r1}
		if (c == '\\') {
    3370:	00000296 	muleq	r0, r6, r2
			if ((c = *fm++) == '\0') {
    3374:	0002a20f 	andeq	sl, r2, pc, lsl #4
    3378:	0002b200 	andeq	fp, r2, r0, lsl #4
				outc ('\\');
    337c:	08001000 	stmdaeq	r0, {ip}
			if ((c = *fm++) == '\0') {
    3380:	000002a7 	andeq	r0, r0, r7, lsr #5
				outc ('\\');
    3384:	0003aa0e 	andeq	sl, r3, lr, lsl #20
    3388:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
			outc (c);
    338c:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    3390:	e50f0101 	str	r0, [pc, #-257]	; 3297 <__inserial+0x83>
			if (c == '\0')
    3394:	d0000000 	andle	r0, r0, r0
    3398:	10000002 	andne	r0, r0, r2
			outc (c);
    339c:	02c50800 	sbceq	r0, r5, #0, 16
				outc (val);
    33a0:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
				val = (word) va_arg (ap, aword);
    33a4:	08000006 	stmdaeq	r0, {r1, r2}
		if (c == '%') {
    33a8:	02d01306 	sbcseq	r1, r0, #402653184	; 0x18000000
    33ac:	01010000 	mrseq	r0, (UNDEF: 1)
			c = *fm++;
    33b0:	0008dd0e 	andeq	sp, r8, lr, lsl #26
			switch (c) {
    33b4:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    33b8:	0000010c 	andeq	r0, r0, ip, lsl #2
    33bc:	72110101 	andsvc	r0, r1, #1073741824	; 0x40000000
    33c0:	0900000c 	stmdbeq	r0, {r2, r3}
    33c4:	fe10016e 	cdp2	1, 1, cr0, cr0, cr14, {3}
    33c8:	0a000002 	beq	33d8 <__pi_vfparse+0x88>
    33cc:	00030404 	andeq	r0, r3, r4, lsl #8
    33d0:	10011200 	andne	r1, r1, r0, lsl #4
				outc ('%');
    33d4:	13000003 	movwne	r0, #3
    33d8:	000000d9 	ldrdeq	r0, [r0], -r9
				outc (c);
    33dc:	02030f00 	andeq	r0, r3, #0, 30
    33e0:	031b0000 	tsteq	fp, #0
    33e4:	00100000 	andseq	r0, r0, r0
				if (c == '\0')
    33e8:	00031008 	andeq	r1, r3, r8
				return d;
    33ec:	09e61400 	stmibeq	r6!, {sl, ip}^
}
    33f0:	7f090000 	svcvc	0x00090000
    33f4:	031b1601 	tsteq	fp, #1048576	; 0x100000
			switch (c) {
    33f8:	01010000 	mrseq	r0, (UNDEF: 1)
    33fc:	00039614 	andeq	r9, r3, r4, lsl r6
    3400:	01820900 	orreq	r0, r2, r0, lsl #18
				for (i = 12; ; i -= 4) {
    3404:	00011814 	andeq	r1, r1, r4, lsl r8
				val = (word) va_arg (ap, aword);
    3408:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
						[ (val >> i) & 0xf ]);
    340c:	0000036e 	andeq	r0, r0, lr, ror #6
    3410:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    3414:	0000010c 	andeq	r0, r0, ip, lsl #2
					outc (__pi_hex_enc_table
    3418:	08150101 	ldmdaeq	r5, {r0, r8}
    341c:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
					if (i == 0)
    3420:	00000374 	andeq	r0, r0, r4, ror r3
    3424:	003ca116 	eorseq	sl, ip, r6, lsl r1
				for (i = 12; ; i -= 4) {
    3428:	03070900 	movweq	r0, #30976	; 0x7900
				val = (word) va_arg (ap, aword);
    342c:	0000d907 	andeq	sp, r0, r7, lsl #18
				if (c == 'd' && (val & 0x8000) != 0) {
    3430:	cd160000 	ldcgt	0, cr0, [r6, #-0]
				val = (word) va_arg (ap, aword);
    3434:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
				if (c == 'd' && (val & 0x8000) != 0) {
    3438:	1d080308 	stcne	3, cr0, [r8, #-32]	; 0xffffffe0
    343c:	04000001 	streq	r0, [r0], #-1
					outc ('-');
    3440:	0a091100 	beq	247848 <__ccfg+0x2278a0>
    3444:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
					val = (~val) + 1;
    3448:	034d0303 	movteq	r0, #54019	; 0xd303
    344c:	29170000 	ldmdbcs	r7, {}	; <UNPREDICTABLE>
				for (i = 12; ; i -= 4) {
    3450:	30000000 	andcc	r0, r0, r0
				enci (10000);
    3454:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    3458:	000003e4 	andeq	r0, r0, r4, ror #7
    345c:	001f2416 	andseq	r2, pc, r6, lsl r4	; <UNPREDICTABLE>
    3460:	03140900 	tsteq	r4, #0, 18
    3464:	0000d908 	andeq	sp, r0, r8, lsl #18
    3468:	e7160000 	ldr	r0, [r6, -r0]
    346c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    3470:	d9080315 	stmdble	r8, {r0, r2, r4, r8, r9}
    3474:	02000000 	andeq	r0, r0, #0
    3478:	004c8e16 	subeq	r8, ip, r6, lsl lr
    347c:	03160900 	tsteq	r6, #0, 18
    3480:	0002f10b 	andeq	pc, r2, fp, lsl #2
    3484:	54160400 	ldrpl	r0, [r6], #-1024	; 0xfffffc00
    3488:	09000047 	stmdbeq	r0, {r0, r1, r2, r6}
    348c:	1d090317 	stcne	3, cr0, [r9, #-92]	; 0xffffffa4
    3490:	08000001 	stmdaeq	r0, {r0}
    3494:	00000f16 	andeq	r0, r0, r6, lsl pc
    3498:	03180900 	tsteq	r8, #0, 18
				if (c == 'd' || c == 'u') {
    349c:	0003e40f 	andeq	lr, r3, pc, lsl #8
    34a0:	5d160c00 	ldcpl	12, cr0, [r6, #-0]
					if (c == 'd' &&
    34a4:	09000009 	stmdbeq	r0, {r0, r3}
					val = va_arg (ap, lword);
    34a8:	f4150319 			; <UNDEFINED> instruction: 0xf4150319
					fm++;
    34ac:	2c000003 	stccs	0, cr0, [r0], {3}
					if (c == 'd' &&
    34b0:	03740f00 	cmneq	r4, #0, 30
    34b4:	03f40000 	mvnseq	r0, #0
						outc ('-');
    34b8:	94180000 	ldrls	r0, [r8], #-0
    34bc:	03000000 	movweq	r0, #0
						val = (~val) + 1;
    34c0:	81040a00 	tsthi	r4, r0, lsl #20
				enci (10000);
    34c4:	11000003 	tstne	r0, r3
					enci (1000000000UL);
    34c8:	00000bdc 	ldrdeq	r0, [r0], -ip
    34cc:	1b031c09 	blne	ca4f8 <__ccfg+0xaa550>
    34d0:	00000381 	andeq	r0, r0, r1, lsl #7
    34d4:	000bbc14 	andeq	fp, fp, r4, lsl ip
    34d8:	031e0900 	tsteq	lr, #0, 18
    34dc:	00041614 	andeq	r1, r4, r4, lsl r6
    34e0:	0a010100 	beq	438e8 <__ccfg+0x23940>
    34e4:	0003fa04 	andeq	pc, r3, r4, lsl #20
    34e8:	070f0e00 	streq	r0, [pc, -r0, lsl #28]
    34ec:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    34f0:	0000d913 	andeq	sp, r0, r3, lsl r9
    34f4:	0e010100 	adfeqs	f0, f1, f0
    34f8:	000002ee 	andeq	r0, r0, lr, ror #5
    34fc:	ea1a1e0a 	b	68ad2c <__ccfg+0x66ad84>
    3500:	01000000 	mrseq	r0, (UNDEF: 0)
    3504:	0c690e01 	stcleq	14, cr0, [r9], #-4
    3508:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
				} else if (c == 'x') {
    350c:	0000ea24 	andeq	lr, r0, r4, lsr #20
					for (i = 28; ; i -= 4) {
    3510:	0e010100 	adfeqs	f0, f1, f0
					val = va_arg (ap, lword);
    3514:	00000c87 	andeq	r0, r0, r7, lsl #25
							[ (val >> i) & 0xf ]);
    3518:	1614220a 	ldrne	r2, [r4], -sl, lsl #4
    351c:	01000004 	tsteq	r0, r4
						outc (__pi_hex_enc_table
    3520:	14a30301 	strtne	r0, [r3], #769	; 0x301
    3524:	440a0000 	strmi	r0, [sl], #-0
    3528:	0004600f 	andeq	r6, r4, pc
						if (i == 0)
    352c:	66040a00 	strvs	r0, [r4], -r0, lsl #20
    3530:	19000004 	stmdbne	r0, {r2}
					for (i = 28; ; i -= 4) {
    3534:	00008d01 	andeq	r8, r0, r1, lsl #26
					outc ('%');
    3538:	00048000 	andeq	r8, r4, r0
    353c:	008d1300 	addeq	r1, sp, r0, lsl #6
    3540:	f6130000 			; <UNDEFINED> instruction: 0xf6130000
					outc ('l');
    3544:	13000001 	movwne	r0, #1
    3548:	0000008d 	andeq	r0, r0, sp, lsl #1
				val = (word) va_arg (ap, aword);
    354c:	033e1a00 	teqeq	lr, #0, 20
				outc (val);
    3550:	0c010000 	stceq	0, cr0, [r1], {-0}
    3554:	b0030507 	andlt	r0, r3, r7, lsl #10
				while (*st != '\0') {
    3558:	1b200006 	blne	803578 <__ccfg+0x7e35d0>
    355c:	00001647 	andeq	r1, r0, r7, asr #12
    3560:	0c071001 	stceq	0, cr1, [r7], {1}
    3564:	01000001 	tsteq	r0, r1
					outc (*st);
    3568:	00040305 	andeq	r0, r4, r5, lsl #6
    356c:	461a2000 	ldrmi	r2, [sl], -r0
					st++;
    3570:	01000004 	tsteq	r0, r4
		c = *fm++;
    3574:	03050d1a 	movweq	r0, #23834	; 0x5d1a
    3578:	20000550 	andcs	r0, r0, r0, asr r5
    357c:	0004540f 	andeq	r5, r4, pc, lsl #8
char *vform (char *res, const char *fm, va_list aq) {
    3580:	0004bf00 	andeq	fp, r4, r0, lsl #30
    3584:	00941800 	addseq	r1, r4, r0, lsl #16
	if (res != NULL) {
    3588:	00000000 	andeq	r0, r0, r0
		__pi_vfparse (res, MAX_WORD, fm, aq);
    358c:	0014db1c 	andseq	sp, r4, ip, lsl fp
    3590:	141e0100 	ldrne	r0, [lr], #-256	; 0xffffff00
    3594:	000004af 	andeq	r0, r0, pc, lsr #9
}
    3598:	05540305 	ldrbeq	r0, [r4, #-773]	; 0xfffffcfb
    359c:	da1a2000 	ble	68b5a4 <__ccfg+0x66b5fc>
	fml = strlen (fm) + 17;
    35a0:	01000001 	tsteq	r0, r1
    35a4:	03051322 	movweq	r1, #21282	; 0x5322
    35a8:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
	if ((res = (char*) umalloc (fml)) == NULL)
    35ac:	0004071a 	andeq	r0, r4, sl, lsl r7
    35b0:	0d270100 	stfeqs	f0, [r7, #-0]
    35b4:	06d40305 	ldrbeq	r0, [r4], r5, lsl #6
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    35b8:	1c1a2000 	ldcne	0, cr2, [sl], {-0}
    35bc:	01000004 	tsteq	r0, r4
    35c0:	03050730 	movweq	r0, #22320	; 0x5730
    35c4:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
		ufree (res);
    35c8:	00042a1a 	andeq	r2, r4, sl, lsl sl
		goto Again;
    35cc:	0f310100 	svceq	0x00310100
	if (buf == NULL || fmt == NULL)
    35d0:	06b60305 	ldrteq	r0, [r6], r5, lsl #6
int vscan (const char *buf, const char *fmt, va_list ap) {
    35d4:	381a2000 	ldmdacc	sl, {sp}
	if (buf == NULL || fmt == NULL)
    35d8:	01000004 	tsteq	r0, r4
    35dc:	03051931 	movweq	r1, #22833	; 0x5931
    35e0:	200006c0 	andcs	r0, r0, r0, asr #13
		    	    case 'u': scanu (lword); break;
    35e4:	0001290f 	andeq	r2, r1, pc, lsl #18
			while (isspace (*buf)) buf++;
    35e8:	00052700 	andeq	r2, r5, r0, lsl #14
    35ec:	00941800 	addseq	r1, r4, r0, lsl #16
	while (*fmt != '\0') {
    35f0:	00030000 	andeq	r0, r3, r0
		if (*fmt++ != '%')
    35f4:	0013c11b 	andseq	ip, r3, fp, lsl r1
		switch (*fmt++) {
    35f8:	0a360100 	beq	d83a00 <__ccfg+0xd63a58>
    35fc:	00000517 	andeq	r0, r0, r7, lsl r5
    3600:	c4030501 	strgt	r0, [r3], #-1281	; 0xfffffaff
    3604:	1a200006 	bne	803624 <__ccfg+0x7e367c>
    3608:	00000320 	andeq	r0, r0, r0, lsr #6
    360c:	050c3f01 	streq	r3, [ip, #-3841]	; 0xfffff0ff
    3610:	00521103 	subseq	r1, r2, r3, lsl #2
}
    3614:	032f1a00 			; <UNDEFINED> instruction: 0x032f1a00
		switch (*fmt++) {
    3618:	45010000 	strmi	r0, [r1, #-0]
    361c:	0003050d 	andeq	r0, r3, sp, lsl #10
    3620:	0b000000 	bleq	3628 <vscan+0x58>
    3624:	09490102 	stmdbeq	r9, {r1, r8}^
			while (isspace (*buf)) buf++;
    3628:	0000057a 	andeq	r0, r0, sl, ror r5
    362c:	0014cf0d 	andseq	ip, r4, sp, lsl #30
    3630:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    3634:	000000fb 	strdeq	r0, [r0], -fp
    3638:	16860d00 	strne	r0, [r6], r0, lsl #26
    363c:	4b010000 	blmi	43644 <__ccfg+0x2369c>
			if (*buf == '\0')
    3640:	0000fb07 	andeq	pc, r0, r7, lsl #22
			if (*buf != ',') {
    3644:	03000100 	movweq	r0, #256	; 0x100
			sap = va_arg (ap, char*);
    3648:	00001595 	muleq	r0, r5, r5
			nc++;
    364c:	56034c01 	strpl	r4, [r3], -r1, lsl #24
			if (*buf != ',') {
    3650:	0f000005 	svceq	0x00000005
				while (!isspace (*buf) && *buf != ',' &&
    3654:	0000057a 	andeq	r0, r0, sl, ror r5
    3658:	00000596 	muleq	r0, r6, r5
    365c:	00009418 	andeq	r9, r0, r8, lsl r4
    3660:	1c000000 	stcne	0, cr0, [r0], {-0}
    3664:	000015f5 	strdeq	r1, [r0], -r5
    3668:	86114e01 	ldrhi	r4, [r1], -r1, lsl #28
    366c:	05000005 	streq	r0, [r0, #-5]
			while (isspace (*buf)) buf++;
    3670:	00055c03 	andeq	r5, r5, r3, lsl #24
    3674:	05b80f20 	ldreq	r0, [r8, #3872]!	; 0xf20
    3678:	05b80000 	ldreq	r0, [r8, #0]!
    367c:	94180000 	ldrls	r0, [r8], #-0
    3680:	00000000 	andeq	r0, r0, r0
			if (*buf == ',') buf++;
    3684:	1d040a00 	vstrne	s0, [r4, #-0]
    3688:	1d000001 	stcne	0, cr0, [r0, #-4]
			*sap = '\0';
    368c:	000014f0 	strdeq	r1, [r0], -r0
			break;
    3690:	0f02bd01 	svceq	0x0002bd01
		    case 'd': scani (word); break;
    3694:	000005a8 	andeq	r0, r0, r8, lsr #11
    3698:	05640305 	strbeq	r0, [r4, #-773]!	; 0xfffffcfb
    369c:	1d0f2000 	stcne	0, cr2, [pc, #-0]	; 36a4 <vscan+0xd4>
    36a0:	e1000001 	tst	r0, r1
    36a4:	18000005 	stmdane	r0, {r0, r2}
    36a8:	00000094 	muleq	r0, r4, r0
    36ac:	501d0000 	andspl	r0, sp, r0
    36b0:	01000015 	tsteq	r0, r5, lsl r0
    36b4:	d10e02c2 	smlabtle	lr, r2, r2, r0
    36b8:	05000005 	streq	r0, [r0, #-5]
    36bc:	00056003 	andeq	r6, r5, r3
    36c0:	159e1d20 	ldrne	r1, [lr, #3360]	; 0xd20
    36c4:	c2010000 	andgt	r0, r1, #0
    36c8:	05d12602 	ldrbeq	r2, [r1, #1538]	; 0x602
    36cc:	03050000 	movweq	r0, #20480	; 0x5000
    36d0:	20000558 	andcs	r0, r0, r8, asr r5
    36d4:	1621011e 			; <UNDEFINED> instruction: 0x1621011e
    36d8:	2f010000 	svccs	0x00010000
    36dc:	0c010705 	stceq	7, cr0, [r1], {5}
    36e0:	8c000001 	stchi	0, cr0, [r0], {1}
    36e4:	b000001e 	andlt	r0, r0, lr, lsl r0
    36e8:	0100001e 	tsteq	r0, lr, lsl r0
    36ec:	84011f9c 	strhi	r1, [r1], #-3996	; 0xfffff064
    36f0:	01000015 	tsteq	r0, r5, lsl r0
    36f4:	01060482 	smlabbeq	r6, r2, r4, r0
    36f8:	00001d50 	andeq	r1, r0, r0, asr sp
    36fc:	00001e8c 	andeq	r1, r0, ip, lsl #29
    3700:	070e9c01 	streq	r9, [lr, -r1, lsl #24]
		    case 'u': scanu (word); break;
    3704:	b6200000 	strtlt	r0, [r0], -r0
    3708:	01000015 	tsteq	r0, r5, lsl r0
    370c:	0e180482 	cdpeq	4, 1, cr0, cr8, cr2, {4}
    3710:	6c000007 	stcvs	0, cr0, [r0], {7}
    3714:	21000008 	tstcs	r0, r8
    3718:	6c617622 	stclvs	6, cr7, [r1], #-136	; 0xffffff78
    371c:	04870100 	streq	r0, [r7], #256	; 0x100
    3720:	00010c08 	andeq	r0, r1, r8, lsl #24
    3724:	0008ac00 	andeq	sl, r8, r0, lsl #24
    3728:	70612300 	rsbvc	r2, r1, r0, lsl #6
    372c:	04880100 	streq	r0, [r8], #256	; 0x100
    3730:	0000c10a 	andeq	ip, r0, sl, lsl #2
    3734:	4c910200 	lfmmi	f0, 4, [r1], {0}
    3738:	00636222 	rsbeq	r6, r3, r2, lsr #4
    373c:	07048901 	streq	r8, [r4, -r1, lsl #18]
    3740:	000000ef 	andeq	r0, r0, pc, ror #1
    3744:	000008eb 	andeq	r0, r0, fp, ror #17
    3748:	01007622 	tsteq	r0, r2, lsr #12
		    case 'x': scanx (word); break;
    374c:	d907048a 	stmdble	r7, {r1, r3, r7, sl}
    3750:	1f000000 	svcne	0x00000000
    3754:	24000009 	strcs	r0, [r0], #-9
    3758:	01007369 	tsteq	r0, r9, ror #6
    375c:	fb07048b 	blx	1c4992 <__ccfg+0x1a49ea>
    3760:	25000000 	strcs	r0, [r0, #-0]
    3764:	00001696 	muleq	r0, r6, r6
    3768:	0104b001 	tsteq	r4, r1
    376c:	00001e1c 	andeq	r1, r0, ip, lsl lr
    3770:	001ddc26 	andseq	sp, sp, r6, lsr #24
    3774:	001df800 	andseq	pc, sp, r0, lsl #16
    3778:	0006c000 	andeq	ip, r6, r0
    377c:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3780:	0a049f01 	beq	12b38c <__ccfg+0x10b3e4>
    3784:	000000ef 	andeq	r0, r0, pc, ror #1
    3788:	00000948 	andeq	r0, r0, r8, asr #18
    378c:	07482700 	strbeq	r2, [r8, -r0, lsl #14]
    3790:	06d90000 	ldrbeq	r0, [r9], r0
    3794:	64220000 	strtvs	r0, [r2], #-0
    3798:	04a90100 	strteq	r0, [r9], #256	; 0x100
    379c:	00010c0b 	andeq	r0, r1, fp, lsl #24
    37a0:	00095b00 	andeq	r5, r9, r0, lsl #22
    37a4:	68260000 	stmdavs	r6!, {}	; <UNPREDICTABLE>
    37a8:	7600001e 			; <UNDEFINED> instruction: 0x7600001e
    37ac:	f600001e 			; <UNDEFINED> instruction: 0xf600001e
    37b0:	22000006 	andcs	r0, r0, #6
    37b4:	c6010073 			; <UNDEFINED> instruction: 0xc6010073
    37b8:	01f60b04 	mvnseq	r0, r4, lsl #22
    37bc:	09840000 	stmibeq	r4, {}	; <UNPREDICTABLE>
    37c0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
			switch (*fmt++) {
    37c4:	000010c1 	andeq	r1, r0, r1, asr #1
    37c8:	00001d7e 	andeq	r1, r0, lr, ror sp
    37cc:	00000778 	andeq	r0, r0, r8, ror r7
    37d0:	0204d901 	andeq	sp, r4, #16384	; 0x4000
    37d4:	0010d429 	andseq	sp, r0, r9, lsr #8
    37d8:	0a000000 	beq	37e0 <vscan+0x210>
		    	    case 'd': scani (lword); break;
    37dc:	00020304 	andeq	r0, r2, r4, lsl #6
    37e0:	166b2a00 	strbtne	r2, [fp], -r0, lsl #20
    37e4:	47010000 	strmi	r0, [r1, -r0]
    37e8:	34010d04 	strcc	r0, [r1], #-3332	; 0xfffff2fc
    37ec:	4c000018 	stcmi	0, cr0, [r0], {24}
    37f0:	01000018 	tsteq	r0, r8, lsl r0
    37f4:	0007539c 	muleq	r7, ip, r3
    37f8:	00632b00 	rsbeq	r2, r3, r0, lsl #22
    37fc:	19044701 	stmdbne	r4, {r0, r8, r9, sl, lr}
    3800:	000000d9 	ldrdeq	r0, [r0], -r9
    3804:	00000997 	muleq	r0, r7, r9
    3808:	0010c128 	andseq	ip, r0, r8, lsr #2
    380c:	00183400 	andseq	r3, r8, r0, lsl #8
    3810:	0006f000 	andeq	pc, r6, r0
    3814:	04490100 	strbeq	r0, [r9], #-256	; 0xffffff00
    3818:	10d42902 	sbcsne	r2, r4, r2, lsl #18
    381c:	00000000 	andeq	r0, r0, r0
    3820:	1535012c 	ldrne	r0, [r5, #-300]!	; 0xfffffed4
    3824:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    3828:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    3834:	01000000 	mrseq	r0, (UNDEF: 0)
		    	    case 'x': scanx (lword); break;
    3838:	0007b49c 	muleq	r7, ip, r4
    383c:	636e2b00 	cmnvs	lr, #0, 22
    3840:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    3844:	0001291c 	andeq	r2, r1, ip, lsl r9
    3848:	0009aa00 	andeq	sl, r9, r0, lsl #20
    384c:	16332d00 	ldrtne	r2, [r3], -r0, lsl #26
    3850:	31010000 	mrscc	r0, (UNDEF: 1)
    3854:	05b80904 	ldreq	r0, [r8, #2308]!	; 0x904
    3858:	09c80000 	stmibeq	r8, {}^	; <UNPREDICTABLE>
    385c:	6d220000 	stcvs	0, cr0, [r2, #-0]
    3860:	01007861 	tsteq	r0, r1, ror #16
    3864:	1d080432 	cfstrsne	mvf0, [r8, #-200]	; 0xffffff38
    3868:	e6000001 	str	r0, [r0], -r1
    386c:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    3870:	0000154b 	andeq	r1, r0, fp, asr #10
    3874:	0d043201 	sfmeq	f3, 4, [r4, #-4]
    3878:	0000011d 	andeq	r0, r0, sp, lsl r1
    387c:	00000a04 	andeq	r0, r0, r4, lsl #20
    3880:	26012c00 	strcs	r2, [r1], -r0, lsl #24
    3884:	01000016 	tsteq	r0, r6, lsl r0
    3888:	01060415 	tsteq	r6, r5, lsl r4
    388c:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3898:	07e39c01 	strbeq	r9, [r3, r1, lsl #24]!
    389c:	6d2b0000 	stcvs	0, cr0, [fp, #-0]
    38a0:	01006e69 	tsteq	r0, r9, ror #28
    38a4:	291c0415 	ldmdbcs	ip, {r0, r2, r4, sl}
		    	    case 'd': scani (lword); break;
    38a8:	2d000001 	stccs	0, cr0, [r0, #-4]
    38ac:	0000000a 	andeq	r0, r0, sl
    38b0:	1614011f 			; <UNDEFINED> instruction: 0x1614011f
    38b4:	02010000 	andeq	r0, r1, #0
    38b8:	38010604 	stmdacc	r1, {r2, r9, sl}
    38bc:	5000001d 	andpl	r0, r0, sp, lsl r0
    38c0:	0100001d 	tsteq	r0, sp, lsl r0
		    	    case 'u': scanu (lword); break;
    38c4:	00080e9c 	muleq	r8, ip, lr
    38c8:	00792000 	rsbseq	r2, r9, r0
    38cc:	02010000 	andeq	r0, r1, #0
    38d0:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    38d4:	0a400000 	beq	10038dc <__ccfg+0xfe3934>
    38d8:	2c000000 	stccs	0, cr0, [r0], {-0}
    38dc:	0014c201 	andseq	ip, r4, r1, lsl #4
    38e0:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    38e4:	05b80108 	ldreq	r0, [r8, #264]!	; 0x108
    38e8:	1c5c0000 	mrane	r0, ip, acc0
    38ec:	1d040000 	stcne	0, cr0, [r4, #-0]
    38f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    38f4:	00000880 	andeq	r0, r0, r0, lsl #17
    38f8:	001da120 	andseq	sl, sp, r0, lsr #2
    38fc:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    3900:	0000d91a 	andeq	sp, r0, sl, lsl r9
    3904:	000a5300 	andeq	r5, sl, r0, lsl #6
    3908:	16332d00 	ldrtne	r2, [r3], -r0, lsl #26
		    	    case 'x': scanx (lword); break;
    390c:	ab010000 	blge	43914 <__ccfg+0x2396c>
    3910:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
			if ((c = *buf++) == '\0')
    3914:	0a660000 	beq	198391c <__ccfg+0x1963974>
    3918:	63220000 			; <UNDEFINED> instruction: 0x63220000
			sap = va_arg (ap, char*);
    391c:	ab010063 	blge	43ab0 <__ccfg+0x23b08>
			nc++;
    3920:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
			break;
    3924:	0a9a0000 	beq	fe68392c <_estack+0xde67e92c>
			while (isspace (*buf)) buf++;
    3928:	a52d0000 	strge	r0, [sp, #-0]!
    392c:	01000015 	tsteq	r0, r5, lsl r0
    3930:	1d1503ab 	ldcne	3, cr0, [r5, #-684]	; 0xfffffd54
						*sap++ = *buf++;
    3934:	c3000001 	movwgt	r0, #1
    3938:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
			while (isspace (*buf)) buf++;
    393c:	00001da0 	andeq	r1, r0, r0, lsr #27
    3940:	0803af01 	stmdaeq	r3, {r0, r8, r9, sl, fp, sp, pc}
    3944:	0000011d 	andeq	r0, r0, sp, lsl r1
		return 0;
    3948:	00000ad6 	ldrdeq	r0, [r0], -r6
    394c:	8c012e00 	stchi	14, cr2, [r1], {-0}
		    case 'x': scanx (word); break;
    3950:	01000016 	tsteq	r0, r6, lsl r0
    3954:	0106037c 	tsteq	r6, ip, ror r3
		    	    case 'x': scanx (lword); break;
    3958:	00089d01 	andeq	r9, r8, r1, lsl #26
    395c:	68632f00 	stmdavs	r3!, {r8, r9, sl, fp, sp}^
    3960:	037c0100 	cmneq	ip, #0, 2
    3964:	0005b818 	andeq	fp, r5, r8, lsl r8
    3968:	d52a0000 	strle	r0, [sl, #-0]!
    396c:	01000014 	tsteq	r0, r4, lsl r0
    3970:	010d034a 	tsteq	sp, sl, asr #6
    3974:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    3978:	00001834 	andeq	r1, r0, r4, lsr r8
    397c:	08e79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}^
    3980:	632b0000 			; <UNDEFINED> instruction: 0x632b0000
    3984:	4a010068 	bmi	43b2c <__ccfg+0x23b84>
    3988:	05b81b03 	ldreq	r1, [r8, #2819]!	; 0xb03
    398c:	0b000000 	bleq	3994 <NOROM_AONBatMonTemperatureGetDegC+0xc>
    3990:	332d0000 			; <UNDEFINED> instruction: 0x332d0000
    3994:	01000016 	tsteq	r0, r6, lsl r0
    3998:	b8090357 	stmdalt	r9, {r0, r1, r2, r4, r6, r8, r9}
    399c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    39a0:	2200000b 	andcs	r0, r0, #11
    39a4:	01006363 	tsteq	r0, r3, ror #6
    39a8:	b8110357 	ldmdalt	r1, {r0, r1, r2, r4, r6, r8, r9}
    39ac:	5f000005 	svcpl	0x00000005
    39b0:	0000000b 	andeq	r0, r0, fp
    39b4:	150b0130 	strne	r0, [fp, #-304]	; 0xfffffed0
    39b8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    39bc:	1b740602 	blne	1d051cc <__ccfg+0x1ce5224>
    39c0:	1bc40000 	blne	ff1039c8 <_estack+0xdf0fe9c8>
    39c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    39c8:	00000911 	andeq	r0, r0, r1, lsl r9
    39cc:	00155f2d 	andseq	r5, r5, sp, lsr #30
    39d0:	02f50100 	rscseq	r0, r5, #0, 2
    39d4:	00011d08 	andeq	r1, r1, r8, lsl #26
    39d8:	000b9300 	andeq	r9, fp, r0, lsl #6
    39dc:	01310000 	teqeq	r1, r0
    39e0:	01006f69 	tsteq	r0, r9, ror #30
    39e4:	01060279 	tsteq	r6, r9, ror r2
    39e8:	000000ef 	andeq	r0, r0, pc, ror #1
    39ec:	00001ad8 	ldrdeq	r1, [r0], -r8
    39f0:	00001b74 	andeq	r1, r0, r4, ror fp
    39f4:	09949c01 	ldmibeq	r4, {r0, sl, fp, ip, pc}
    39f8:	ab200000 	blge	803a00 <__ccfg+0x7e3a58>
    39fc:	01000015 	tsteq	r0, r5, lsl r0
    3a00:	d90f0279 	stmdble	pc, {r0, r3, r4, r5, r6, r9}	; <UNPREDICTABLE>
    3a04:	b1000000 	mrslt	r0, (UNDEF: 0)
    3a08:	2b00000b 	blcs	3a3c <NOROM_OSCClockSourceSet+0x3c>
    3a0c:	00766564 	rsbseq	r6, r6, r4, ror #10
    3a10:	1b027901 	blne	a1e1c <__ccfg+0x81e74>
    3a14:	000000d9 	ldrdeq	r0, [r0], -r9
    3a18:	00000bcf 	andeq	r0, r0, pc, asr #23
    3a1c:	00117d20 	andseq	r7, r1, r0, lsr #26
    3a20:	02790100 	rsbseq	r0, r9, #0, 2
    3a24:	0000d925 	andeq	sp, r0, r5, lsr #18
    3a28:	000bed00 	andeq	lr, fp, r0, lsl #26
    3a2c:	75622b00 	strbvc	r2, [r2, #-2816]!	; 0xfffff500
    3a30:	79010066 	stmdbvc	r1, {r1, r2, r5, r6}
    3a34:	01f63602 	mvnseq	r3, r2, lsl #12
    3a38:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    3a3c:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    3a40:	01006e65 	tsteq	r0, r5, ror #28
    3a44:	d9400279 	stmdble	r0, {r0, r3, r4, r5, r6, r9}^
    3a48:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    3a4c:	2200000c 	andcs	r0, r0, #12
    3a50:	00746572 	rsbseq	r6, r4, r2, ror r5
    3a54:	07027b01 	streq	r7, [r2, -r1, lsl #22]
    3a58:	000000ef 	andeq	r0, r0, pc, ror #1
    3a5c:	00000c49 	andeq	r0, r0, r9, asr #24
    3a60:	72011f00 	andvc	r1, r1, #0, 30
    3a64:	01000015 	tsteq	r0, r5, lsl r0
    3a68:	01060269 	tsteq	r6, r9, ror #4
    3a6c:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
    3a70:	00001ad8 	ldrdeq	r1, [r0], -r8
    3a74:	09cf9c01 	stmibeq	pc, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    3a78:	722b0000 	eorvc	r0, fp, #0
    3a7c:	69010066 	stmdbvs	r1, {r1, r2, r5, r6}
    3a80:	04541e02 	ldrbeq	r1, [r4], #-3586	; 0xfffff1fe
    3a84:	0c7d0000 	ldcleq	0, cr0, [sp], #-0
    3a88:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    3a8c:	0100636f 	tsteq	r0, pc, ror #6
    3a90:	8d260269 	sfmhi	f0, 4, [r6, #-420]!	; 0xfffffe5c
    3a94:	a6000000 	strge	r0, [r0], -r0
    3a98:	0000000c 	andeq	r0, r0, ip
    3a9c:	169d011f 			; <UNDEFINED> instruction: 0x169d011f
    3aa0:	5f010000 	svcpl	0x00010000
    3aa4:	a6010602 	strge	r0, [r1], -r2, lsl #12
    3aa8:	b400001a 	strlt	r0, [r0], #-26	; 0xffffffe6
    3aac:	0100001a 	tsteq	r0, sl, lsl r0
    3ab0:	000a169c 	muleq	sl, ip, r6
    3ab4:	15b12000 	ldrne	r2, [r1, #0]!
    3ab8:	5f010000 	svcpl	0x00010000
    3abc:	01f61902 	mvnseq	r1, r2, lsl #18
    3ac0:	0ccf0000 	stcleq	0, cr0, [pc], {0}
    3ac4:	63320000 	teqvs	r2, #0
    3ac8:	025f0100 	subseq	r0, pc, #0, 2
    3acc:	0001fc24 	andeq	pc, r1, r4, lsr #24
    3ad0:	2b510100 	blcs	1443ed8 <__ccfg+0x1423f30>
    3ad4:	5f01006e 	svcpl	0x0001006e
    3ad8:	008d2b02 	addeq	r2, sp, r2, lsl #22
    3adc:	0ced0000 	stcleq	0, cr0, [sp]
    3ae0:	1f000000 	svcne	0x00000000
    3ae4:	00165f01 	andseq	r5, r6, r1, lsl #30
    3ae8:	02590100 	subseq	r0, r9, #0, 2
    3aec:	1a920106 	bne	fe483f0c <_estack+0xde47ef0c>
    3af0:	1aa60000 	bne	fe983af8 <_estack+0xde97eaf8>
    3af4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3af8:	00000a61 	andeq	r0, r0, r1, ror #20
    3afc:	0015b120 	andseq	fp, r5, r0, lsr #2
    3b00:	02590100 	subseq	r0, r9, #0, 2
    3b04:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    3b08:	000d0000 	andeq	r0, sp, r0
    3b0c:	72732b00 	rsbsvc	r2, r3, #0, 22
    3b10:	59010063 	stmdbpl	r1, {r0, r1, r5, r6}
    3b14:	070e2b02 	streq	r2, [lr, -r2, lsl #22]
    3b18:	0d130000 	ldceq	0, cr0, [r3, #-0]
    3b1c:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    3b20:	02590100 	subseq	r0, r9, #0, 2
    3b24:	00008d34 	andeq	r8, r0, r4, lsr sp
    3b28:	000d3100 	andeq	r3, sp, r0, lsl #2
    3b2c:	011f0000 	tsteq	pc, r0
    3b30:	000016d6 	ldrdeq	r1, [r0], -r6
    3b34:	06025401 	streq	r5, [r2], -r1, lsl #8
    3b38:	00000001 	andeq	r0, r0, r1
    3b3c:	00000000 	andeq	r0, r0, r0
    3b40:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    3b44:	2b00000a 	blcs	3b74 <NOROM_RFCSynthPowerDown+0x18>
    3b48:	54010064 	strpl	r0, [r1], #-100	; 0xffffff9c
    3b4c:	01f61a02 	mvnseq	r1, r2, lsl #20
    3b50:	0d440000 	stcleq	0, cr0, [r4, #-0]
    3b54:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3b58:	02540100 	subseq	r0, r4, #0, 2
    3b5c:	00070e29 	andeq	r0, r7, r9, lsr #28
    3b60:	000d5700 	andeq	r5, sp, r0, lsl #14
    3b64:	006e3200 	rsbeq	r3, lr, r0, lsl #4
    3b68:	30025401 	andcc	r5, r2, r1, lsl #8
    3b6c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3b70:	1f005201 	svcne	0x00005201
    3b74:	00158901 	andseq	r8, r5, r1, lsl #18
    3b78:	024e0100 	subeq	r0, lr, #0, 2
    3b7c:	00000106 	andeq	r0, r0, r6, lsl #2
    3b80:	00000000 	andeq	r0, r0, r0
    3b84:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b88:	00000ade 	ldrdeq	r0, [r0], -lr
    3b8c:	0100642b 	tsteq	r0, fp, lsr #8
    3b90:	f619024e 			; <UNDEFINED> instruction: 0xf619024e
    3b94:	6a000001 	bvs	3ba0 <NOROM_RFCSynthPowerDown+0x44>
    3b98:	2b00000d 	blcs	3bd4 <NOROM_RFCRfTrimRead+0x2c>
    3b9c:	4e010073 	mcrmi	0, 0, r0, cr1, cr3, {3}
    3ba0:	070e2802 	streq	r2, [lr, -r2, lsl #16]
    3ba4:	0d880000 	stceq	0, cr0, [r8]
    3ba8:	1f000000 	svcne	0x00000000
    3bac:	0016b101 	andseq	fp, r6, r1, lsl #2
    3bb0:	02470100 	subeq	r0, r7, #0, 2
    3bb4:	1a760106 	bne	1d83fd4 <__ccfg+0x1d6402c>
    3bb8:	1a920000 	bne	fe483bc0 <_estack+0xde47ebc0>
    3bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bc0:	00000b25 	andeq	r0, r0, r5, lsr #22
    3bc4:	0100642b 	tsteq	r0, fp, lsr #8
    3bc8:	f61a0247 			; <UNDEFINED> instruction: 0xf61a0247
    3bcc:	9b000001 	blls	3bd8 <NOROM_RFCRfTrimRead+0x30>
    3bd0:	2b00000d 	blcs	3c0c <NOROM_RFCRfTrimRead+0x64>
    3bd4:	47010073 	smlsdxmi	r1, r3, r0, r0
    3bd8:	070e2902 	streq	r2, [lr, -r2, lsl #18]
    3bdc:	0db90000 	ldceq	0, cr0, [r9]
    3be0:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    3be4:	02470100 	subeq	r0, r7, #0, 2
    3be8:	00008d30 	andeq	r8, r0, r0, lsr sp
    3bec:	000dcc00 	andeq	ip, sp, r0, lsl #24
    3bf0:	011f0000 	tsteq	pc, r0
    3bf4:	000014b6 			; <UNDEFINED> instruction: 0x000014b6
    3bf8:	06024201 	streq	r4, [r2], -r1, lsl #4
    3bfc:	001a6601 	andseq	r6, sl, r1, lsl #12
    3c00:	001a7600 	andseq	r7, sl, r0, lsl #12
    3c04:	5d9c0100 	ldfpls	f0, [ip]
    3c08:	2b00000b 	blcs	3c3c <NOROM_RFCRfTrimRead+0x94>
    3c0c:	42010064 	andmi	r0, r1, #100	; 0x64
    3c10:	01f61902 	mvnseq	r1, r2, lsl #18
    3c14:	0ddf0000 	ldcleq	0, cr0, [pc]	; 3c1c <NOROM_RFCRfTrimRead+0x74>
    3c18:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3c1c:	02420100 	subeq	r0, r2, #0, 2
    3c20:	00070e28 	andeq	r0, r7, r8, lsr #28
    3c24:	000df200 	andeq	pc, sp, r0, lsl #4
    3c28:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3c2c:	00001529 	andeq	r1, r0, r9, lsr #10
    3c30:	05023901 	streq	r3, [r2, #-2305]	; 0xfffff6ff
    3c34:	00008d01 	andeq	r8, r0, r1, lsl #26
    3c38:	001a5800 	andseq	r5, sl, r0, lsl #16
    3c3c:	001a6600 	andseq	r6, sl, r0, lsl #12
    3c40:	999c0100 	ldmibls	ip, {r8}
    3c44:	2b00000b 	blcs	3c78 <NOROM_RFCRfTrimRead+0xd0>
    3c48:	39010073 	stmdbcc	r1, {r0, r1, r4, r5, r6}
    3c4c:	070e1e02 	streq	r1, [lr, -r2, lsl #28]
    3c50:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    3c54:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3c58:	023b0100 	eorseq	r0, fp, #0, 2
    3c5c:	00008d06 	andeq	r8, r0, r6, lsl #26
    3c60:	000e2e00 	andeq	r2, lr, r0, lsl #28
    3c64:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3c68:	00001542 	andeq	r1, r0, r2, asr #10
    3c6c:	06022d01 	streq	r2, [r2], -r1, lsl #26
    3c70:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    3c7c:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    3c80:	2b00000b 	blcs	3cb4 <NOROM_RFCRfTrimRead+0x10c>
    3c84:	006e7566 	rsbeq	r7, lr, r6, ror #10
    3c88:	18022d01 	stmdane	r2, {r0, r8, sl, fp, sp}
    3c8c:	000002f1 	strdeq	r0, [r0], -r1
    3c90:	00000e41 	andeq	r0, r0, r1, asr #28
    3c94:	01006922 	tsteq	r0, r2, lsr #18
    3c98:	160e022f 	strne	r0, [lr], -pc, lsr #4
    3c9c:	5f000004 	svcpl	0x00000004
    3ca0:	2200000e 	andcs	r0, r0, #14
    3ca4:	30010063 	andcc	r0, r1, r3, rrx
    3ca8:	00d90702 	sbcseq	r0, r9, r2, lsl #14
    3cac:	0e7d0000 	cdpeq	0, 7, cr0, cr13, cr0, {0}
    3cb0:	2c000000 	stccs	0, cr0, [r0], {-0}
    3cb4:	00154301 	andseq	r4, r5, r1, lsl #6
    3cb8:	021f0100 	andseq	r0, pc, #0, 2
    3cbc:	011d0107 	tsteq	sp, r7, lsl #2
    3cc0:	1a340000 	bne	d03cc8 <__ccfg+0xce3d20>
    3cc4:	1a580000 	bne	1603ccc <__ccfg+0x15e3d24>
    3cc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ccc:	00000c22 	andeq	r0, r0, r2, lsr #24
    3cd0:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    3cd4:	021f0100 	andseq	r0, pc, #0, 2
    3cd8:	0002f118 	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
    3cdc:	000e9000 	andeq	r9, lr, r0
    3ce0:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3ce4:	0e022101 	adfeqs	f2, f2, f1
    3ce8:	00000416 	andeq	r0, r0, r6, lsl r4
    3cec:	2c005001 	stccs	0, cr5, [r0], {1}
    3cf0:	00165101 	andseq	r5, r6, r1, lsl #2
    3cf4:	02130100 	andseq	r0, r3, #0, 2
    3cf8:	02f10109 	rscseq	r0, r1, #1073741826	; 0x40000002
	...
    3d04:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d08:	00000c60 	andeq	r0, r0, r0, ror #24
    3d0c:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3d10:	02130100 	andseq	r0, r3, #0, 2
    3d14:	00011d18 	andeq	r1, r1, r8, lsl sp
    3d18:	000eb900 	andeq	fp, lr, r0, lsl #18
    3d1c:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3d20:	0e021501 	cfsh32eq	mvfx1, mvfx2, #1
    3d24:	00000416 	andeq	r0, r0, r6, lsl r4
    3d28:	00000ed7 	ldrdeq	r0, [r0], -r7
    3d2c:	a9011f00 	stmdbge	r1, {r8, r9, sl, fp, ip}
    3d30:	01000016 	tsteq	r0, r6, lsl r0
    3d34:	010601f5 	strdeq	r0, [r6, -r5]
	...
    3d40:	0cc99c01 	stcleq	12, cr9, [r9], {1}
    3d44:	662b0000 	strtvs	r0, [fp], -r0
    3d48:	01006e75 	tsteq	r0, r5, ror lr
    3d4c:	f11701f5 			; <UNDEFINED> instruction: 0xf11701f5
    3d50:	f5000002 			; <UNDEFINED> instruction: 0xf5000002
    3d54:	2200000e 	andcs	r0, r0, #14
    3d58:	006c6572 	rsbeq	r6, ip, r2, ror r5
    3d5c:	0a01f901 	beq	82168 <__ccfg+0x621c0>
    3d60:	000000cd 	andeq	r0, r0, sp, asr #1
    3d64:	00000f13 	andeq	r0, r0, r3, lsl pc
    3d68:	01006922 	tsteq	r0, r2, lsr #18
    3d6c:	160e01fa 			; <UNDEFINED> instruction: 0x160e01fa
    3d70:	26000004 	strcs	r0, [r0], -r4
    3d74:	2200000f 	andcs	r0, r0, #15
    3d78:	fa01006a 	blx	43f28 <__ccfg+0x23f80>
    3d7c:	04161201 	ldreq	r1, [r6], #-513	; 0xfffffdff
    3d80:	0f5a0000 	svceq	0x005a0000
    3d84:	6b220000 	blvs	883d8c <__ccfg+0x863de4>
    3d88:	01fa0100 	mvnseq	r0, r0, lsl #2
    3d8c:	00041616 	andeq	r1, r4, r6, lsl r6
    3d90:	000f7800 	andeq	r7, pc, r0, lsl #16
    3d94:	011f0000 	tsteq	pc, r0
    3d98:	000014eb 	andeq	r1, r0, fp, ror #9
    3d9c:	0601d901 	streq	sp, [r1], -r1, lsl #18
    3da0:	001c0c01 	andseq	r0, ip, r1, lsl #24
    3da4:	001c5c00 	andseq	r5, ip, r0, lsl #24
    3da8:	0e9c0100 	fmleqe	f0, f4, f0
    3dac:	2b00000d 	blcs	3de8 <NOROM_RFCRTrim+0xf0>
    3db0:	00646970 	rsbeq	r6, r4, r0, ror r9
    3db4:	1201d901 	andne	sp, r1, #16384	; 0x4000
    3db8:	0000011d 	andeq	r0, r0, sp, lsl r1
    3dbc:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    3dc0:	01006922 	tsteq	r0, r2, lsr #18
    3dc4:	160e01dd 			; <UNDEFINED> instruction: 0x160e01dd
    3dc8:	ca000004 	bgt	3de0 <NOROM_RFCRTrim+0xe8>
    3dcc:	2400000f 	strcs	r0, [r0], #-15
    3dd0:	dd01006a 	stcle	0, cr0, [r1, #-424]	; 0xfffffe58
    3dd4:	04161201 	ldreq	r1, [r6], #-513	; 0xfffffdff
    3dd8:	2a000000 	bcs	3de0 <NOROM_RFCRTrim+0xe8>
    3ddc:	000014af 	andeq	r1, r0, pc, lsr #9
    3de0:	0d01c401 	cfstrseq	mvf12, [r1, #-4]
    3de4:	00177801 	andseq	r7, r7, r1, lsl #16
    3de8:	0017b400 	andseq	fp, r7, r0, lsl #8
    3dec:	639c0100 	orrsvs	r0, ip, #0, 2
    3df0:	3200000d 	andcc	r0, r0, #13
    3df4:	00646970 	rsbeq	r6, r4, r0, ror r9
    3df8:	2101c401 	tstcs	r1, r1, lsl #8
    3dfc:	00000416 	andeq	r0, r0, r6, lsl r4
    3e00:	812d5001 			; <UNDEFINED> instruction: 0x812d5001
    3e04:	01000016 	tsteq	r0, r6, lsl r0
    3e08:	1d0801c8 	stfnes	f0, [r8, #-800]	; 0xfffffce0
    3e0c:	f3000001 	vhadd.u8	d0, d0, d1
    3e10:	2200000f 	andcs	r0, r0, #15
    3e14:	c901006a 	stmdbgt	r1, {r1, r3, r5, r6}
    3e18:	008d0601 	addeq	r0, sp, r1, lsl #12
    3e1c:	10060000 	andne	r0, r6, r0
    3e20:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3e24:	01ca0100 	biceq	r0, sl, r0, lsl #2
    3e28:	0004160e 	andeq	r1, r4, lr, lsl #12
    3e2c:	00520100 	subseq	r0, r2, r0, lsl #2
    3e30:	1659012c 	ldrbne	r0, [r9], -ip, lsr #2
    3e34:	b3010000 	movwlt	r0, #4096	; 0x1000
    3e38:	d9010601 	stmdble	r1, {r0, r9, sl}
	...
    3e44:	01000000 	mrseq	r0, (UNDEF: 0)
    3e48:	000da19c 	muleq	sp, ip, r1
    3e4c:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3e50:	b3010064 	movwlt	r0, #4196	; 0x1064
    3e54:	011d1301 	tsteq	sp, r1, lsl #6
    3e58:	10190000 	andsne	r0, r9, r0
    3e5c:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3e60:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    3e64:	0004160e 	andeq	r1, r4, lr, lsl #12
    3e68:	00103700 	andseq	r3, r0, r0, lsl #14
    3e6c:	01330000 	teqeq	r3, r0
    3e70:	000014ce 	andeq	r1, r0, lr, asr #9
    3e74:	0601a801 	streq	sl, [r1], -r1, lsl #16
    3e78:	00000001 	andeq	r0, r0, r1
    3e7c:	00000000 	andeq	r0, r0, r0
    3e80:	1f9c0100 	svcne	0x009c0100
    3e84:	002cd901 	eoreq	sp, ip, r1, lsl #18
    3e88:	019a0100 	orrseq	r0, sl, r0, lsl #2
    3e8c:	19fc0106 	ldmibne	ip!, {r1, r2, r8}^
    3e90:	1a340000 	bne	d03e98 <__ccfg+0xce3ef0>
    3e94:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e98:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3e9c:	0100642b 	tsteq	r0, fp, lsr #8
    3ea0:	d912019a 	ldmdble	r2, {r1, r3, r4, r7, r8}
    3ea4:	55000000 	strpl	r0, [r0, #-0]
    3ea8:	20000010 	andcs	r0, r0, r0, lsl r0
    3eac:	00000079 	andeq	r0, r0, r9, ror r0
    3eb0:	1a019a01 	bne	6a6bc <__ccfg+0x4a714>
    3eb4:	000000d9 	ldrdeq	r0, [r0], -r9
    3eb8:	00001068 	andeq	r1, r0, r8, rrx
    3ebc:	be012c00 	cdplt	12, 0, cr2, cr1, cr0, {0}
    3ec0:	01000016 	tsteq	r0, r6, lsl r0
    3ec4:	01070188 	smlabbeq	r7, r8, r1, r0
    3ec8:	0000011d 	andeq	r0, r0, sp, lsl r1
    3ecc:	000019d8 	ldrdeq	r1, [r0], -r8
    3ed0:	000019fc 	strdeq	r1, [r0], -ip
    3ed4:	0e3e9c01 	cdpeq	12, 3, cr9, cr14, cr1, {0}
    3ed8:	702b0000 	eorvc	r0, fp, r0
    3edc:	01006469 	tsteq	r0, r9, ror #8
    3ee0:	1d180188 	ldfnes	f0, [r8, #-544]	; 0xfffffde0
    3ee4:	7b000001 	blvc	3ef0 <TrimAfterColdResetWakeupFromShutDown+0xa4>
    3ee8:	2b000010 	blcs	3f30 <NOROM_SetupTrimDevice+0x10>
    3eec:	01007473 	tsteq	r0, r3, ror r4
    3ef0:	d9220188 	stmdble	r2!, {r3, r7, r8}
    3ef4:	a4000000 	strge	r0, [r0], #-0
    3ef8:	22000010 	andcs	r0, r0, #16
    3efc:	8a010069 	bhi	440a8 <__ccfg+0x24100>
    3f00:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3f04:	10c20000 	sbcne	r0, r2, r0
    3f08:	1f000000 	svcne	0x00000000
    3f0c:	00156401 	andseq	r6, r5, r1, lsl #8
    3f10:	01780100 	cmneq	r8, r0, lsl #2
    3f14:	00000106 	andeq	r0, r0, r6, lsl #2
    3f18:	00000000 	andeq	r0, r0, r0
    3f1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f20:	00000e96 	muleq	r0, r6, lr
    3f24:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3f28:	01780100 	cmneq	r8, r0, lsl #2
    3f2c:	00011d1b 	andeq	r1, r1, fp, lsl sp
    3f30:	0010e000 	andseq	lr, r0, r0
    3f34:	15f62000 	ldrbne	r2, [r6, #0]!
    3f38:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3f3c:	011d2601 	tsteq	sp, r1, lsl #12
    3f40:	10f30000 	rscsne	r0, r3, r0
    3f44:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3f48:	017c0100 	cmneq	ip, r0, lsl #2
    3f4c:	0004160e 	andeq	r1, r4, lr, lsl #12
    3f50:	22500100 	subscs	r0, r0, #0, 2
    3f54:	7d01006a 	stcvc	0, cr0, [r1, #-424]	; 0xfffffe58
    3f58:	008d0701 	addeq	r0, sp, r1, lsl #14
    3f5c:	11110000 	tstne	r1, r0
    3f60:	1f000000 	svcne	0x00000000
    3f64:	00151c01 	andseq	r1, r5, r1, lsl #24
    3f68:	01660100 	cmneq	r6, r0, lsl #2
    3f6c:	19a40106 	stmibne	r4!, {r1, r2, r8}
    3f70:	19d80000 	ldmibne	r8, {}^	; <UNPREDICTABLE>
    3f74:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f78:	00000edb 	ldrdeq	r0, [r0], -fp
    3f7c:	0015f634 	andseq	pc, r5, r4, lsr r6	; <UNPREDICTABLE>
    3f80:	01660100 	cmneq	r6, r0, lsl #2
    3f84:	00011d1a 	andeq	r1, r1, sl, lsl sp
    3f88:	22500100 	subscs	r0, r0, #0, 2
    3f8c:	6a01006a 	bvs	4413c <__ccfg+0x24194>
    3f90:	008d0601 	addeq	r0, sp, r1, lsl #12
    3f94:	112f0000 			; <UNDEFINED> instruction: 0x112f0000
    3f98:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3f9c:	016b0100 	cmneq	fp, r0, lsl #2
    3fa0:	0004160e 	andeq	r1, r4, lr, lsl #12
    3fa4:	00520100 	subseq	r0, r2, r0, lsl #2
    3fa8:	160a012e 	strne	r0, [sl], -lr, lsr #2
    3fac:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3fb0:	01010601 	tsteq	r1, r1, lsl #12
    3fb4:	00000f11 	andeq	r0, r0, r1, lsl pc
    3fb8:	0015f635 	andseq	pc, r5, r5, lsr r6	; <UNPREDICTABLE>
    3fbc:	01590100 	cmpeq	r9, r0, lsl #2
    3fc0:	00011d17 	andeq	r1, r1, r7, lsl sp
    3fc4:	00793500 	rsbseq	r3, r9, r0, lsl #10
    3fc8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3fcc:	00d92301 	sbcseq	r2, r9, r1, lsl #6
    3fd0:	6a240000 	bvs	903fd8 <__ccfg+0x8e4030>
    3fd4:	015d0100 	cmpeq	sp, r0, lsl #2
    3fd8:	0000ef07 	andeq	lr, r0, r7, lsl #30
    3fdc:	011f0000 	tsteq	pc, r0
    3fe0:	00001557 	andeq	r1, r0, r7, asr r5
    3fe4:	06015301 	streq	r5, [r1], -r1, lsl #6
    3fe8:	00195c01 	andseq	r5, r9, r1, lsl #24
    3fec:	00197000 	andseq	r7, r9, r0
    3ff0:	3c9c0100 	ldfccs	f0, [ip], {0}
    3ff4:	2000000f 	andcs	r0, r0, pc
    3ff8:	00000079 	andeq	r0, r0, r9, ror r0
    3ffc:	14015301 	strne	r5, [r1], #-769	; 0xfffffcff
    4000:	000000d9 	ldrdeq	r0, [r0], -r9
    4004:	00001142 	andeq	r1, r0, r2, asr #2
    4008:	e1012c00 	tst	r1, r0, lsl #24
    400c:	01000014 	tsteq	r0, r4, lsl r0
    4010:	0107012c 	tsteq	r7, ip, lsr #2
    4014:	0000011d 	andeq	r0, r0, sp, lsl r1
    4018:	00001d04 	andeq	r1, r0, r4, lsl #26
    401c:	00001d38 	andeq	r1, r0, r8, lsr sp
    4020:	0f9e9c01 	svceq	0x009e9c01
    4024:	9a200000 	bls	80402c <__ccfg+0x7e4084>
    4028:	01000006 	tsteq	r0, r6
    402c:	f11a012c 			; <UNDEFINED> instruction: 0xf11a012c
    4030:	55000002 	strpl	r0, [r0, #-2]
    4034:	20000011 	andcs	r0, r0, r1, lsl r0
    4038:	00004754 	andeq	r4, r0, r4, asr r7
    403c:	26012c01 	strcs	r2, [r1], -r1, lsl #24
    4040:	0000011d 	andeq	r0, r0, sp, lsl r1
    4044:	00001173 	andeq	r1, r0, r3, ror r1
    4048:	01006923 	tsteq	r0, r3, lsr #18
    404c:	160e012e 	strne	r0, [lr], -lr, lsr #2
    4050:	01000004 	tsteq	r0, r4
    4054:	07203650 			; <UNDEFINED> instruction: 0x07203650
    4058:	6a220000 	bvs	884060 <__ccfg+0x8640b8>
    405c:	013d0100 	teqeq	sp, r0, lsl #2
    4060:	0004160f 	andeq	r1, r4, pc, lsl #12
    4064:	00119100 	andseq	r9, r1, r0, lsl #2
    4068:	37000000 	strcc	r0, [r0, -r0]
    406c:	00163901 	andseq	r3, r6, r1, lsl #18
    4070:	06af0100 	strteq	r0, [pc], r0, lsl #2
    4074:	0fe30101 	svceq	0x00e30101
    4078:	6d380000 	ldcvs	0, cr0, [r8, #-0]
    407c:	01006e69 	tsteq	r0, r9, ror #28
    4080:	00d91aaf 	sbcseq	r1, r9, pc, lsr #21
    4084:	42390000 	eorsmi	r0, r9, #0
    4088:	01000012 	tsteq	r0, r2, lsl r0
    408c:	00cd27af 	sbceq	r2, sp, pc, lsr #15
    4090:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    4094:	0ebd0100 	frdeqe	f0, f5, f0
    4098:	00000416 	andeq	r0, r0, r6, lsl r4
    409c:	0100643a 	tsteq	r0, sl, lsr r4
    40a0:	00d907be 	ldrheq	r0, [r9], #126	; 0x7e
    40a4:	4d3b0000 	ldcmi	0, cr0, [fp, #-0]
    40a8:	01004b4f 	tsteq	r0, pc, asr #22
    40ac:	00010109 	andeq	r0, r1, r9, lsl #2
    40b0:	1671013c 			; <UNDEFINED> instruction: 0x1671013c
    40b4:	a7010000 	strge	r0, [r1, -r0]
    40b8:	18880106 	stmne	r8, {r1, r2, r8}
    40bc:	188e0000 	stmne	lr, {}	; <UNPREDICTABLE>
    40c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    40c4:	00001018 	andeq	r1, r0, r8, lsl r0
    40c8:	0100743d 	tsteq	r0, sp, lsr r4
    40cc:	01291fa7 			; <UNDEFINED> instruction: 0x01291fa7
    40d0:	11ba0000 			; <UNDEFINED> instruction: 0x11ba0000
    40d4:	763d0000 	ldrtvc	r0, [sp], -r0
    40d8:	27a70100 	strcs	r0, [r7, r0, lsl #2]!
    40dc:	000000d9 	ldrdeq	r0, [r0], -r9
    40e0:	000011cd 	andeq	r1, r0, sp, asr #3
    40e4:	c8013c00 	stmdagt	r1, {sl, fp, ip, sp}
    40e8:	01000016 	tsteq	r0, r6, lsl r0
    40ec:	0001068f 	andeq	r0, r1, pc, lsl #13
    40f0:	00000000 	andeq	r0, r0, r0
    40f4:	01000000 	mrseq	r0, (UNDEF: 0)
    40f8:	00104e9c 	mulseq	r0, ip, lr
    40fc:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    4100:	1d8f0100 	stfnes	f0, [pc]	; 4108 <NOROM_SetupGetTrimForAnabypassValue1+0x1c>
    4104:	00000129 	andeq	r0, r0, r9, lsr #2
    4108:	000011e0 	andeq	r1, r0, r0, ror #3
    410c:	0100693e 	tsteq	r0, lr, lsr r9
    4110:	008d0693 	umulleq	r0, sp, r3, r6
    4114:	11fe0000 	mvnsne	r0, r0
    4118:	3c000000 	stccc	0, cr0, [r0], {-0}
    411c:	0014f701 	andseq	pc, r4, r1, lsl #14
    4120:	067f0100 	ldrbteq	r0, [pc], -r0, lsl #2
    4124:	00185c01 	andseq	r5, r8, r1, lsl #24
    4128:	00188800 	andseq	r8, r8, r0, lsl #16
    412c:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    4130:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    4134:	01007475 	tsteq	r0, r5, ror r4
    4138:	01291a7f 			; <UNDEFINED> instruction: 0x01291a7f
    413c:	121c0000 	andsne	r0, ip, #0
    4140:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    4144:	06830100 	streq	r0, [r3], r0, lsl #2
    4148:	0000008d 	andeq	r0, r0, sp, lsl #1
    414c:	00001245 	andeq	r1, r0, r5, asr #4
    4150:	fc013f00 	stc2	15, cr3, [r1], {-0}
    4154:	01000015 	tsteq	r0, r5, lsl r0
    4158:	4c01067b 	stcmi	6, cr0, [r1], {123}	; 0x7b
    415c:	5c000018 	stcpl	0, cr0, [r0], {24}
    4160:	01000018 	tsteq	r0, r8, lsl r0
    4164:	157d409c 	ldrbne	r4, [sp, #-156]!	; 0xffffff64
    4168:	5f010000 	svcpl	0x00010000
    416c:	04160114 	ldreq	r0, [r6], #-276	; 0xfffffeec
    4170:	c1010000 	mrsgt	r0, (UNDEF: 1)
    4174:	38000010 	stmdacc	r0, {r4}
    4178:	00646970 	rsbeq	r6, r4, r0, ror r9
    417c:	1d225f01 	stcne	15, cr5, [r2, #-4]!
    4180:	3a000001 	bcc	418c <NOROM_SetupGetTrimForAmpcompCtrl+0x8>
    4184:	61010069 	tstvs	r1, r9, rrx
    4188:	00041617 	andeq	r1, r4, r7, lsl r6
    418c:	02410000 	subeq	r0, r1, #0
    4190:	02000015 	andeq	r0, r0, #21
    4194:	0101029e 			; <UNDEFINED> instruction: 0x0101029e
    4198:	000010e2 	andeq	r1, r0, r2, ror #1
    419c:	0010e203 	andseq	lr, r0, r3, lsl #4
    41a0:	11ba3500 			; <UNDEFINED> instruction: 0x11ba3500
    41a4:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    41a8:	00731302 	rsbseq	r1, r3, r2, lsl #6
    41ac:	02000000 	andeq	r0, r0, #0
    41b0:	0ca70201 	sfmeq	f0, 4, [r7], #4
    41b4:	98420000 	stmdals	r2, {}^	; <UNPREDICTABLE>
    41b8:	00000010 	andeq	r0, r0, r0, lsl r0
    41bc:	00000000 	andeq	r0, r0, r0
    41c0:	01000000 	mrseq	r0, (UNDEF: 0)
    41c4:	00112e9c 	mulseq	r1, ip, lr
    41c8:	10aa4300 	adcne	r4, sl, r0, lsl #6
    41cc:	12630000 	rsbne	r0, r3, #0
    41d0:	b6440000 	strblt	r0, [r4], -r0
    41d4:	8c000010 	stchi	0, cr0, [r0], {16}
    41d8:	45000012 	strmi	r0, [r0, #-18]	; 0xffffffee
    41dc:	00001098 	muleq	r0, r8, r0
	...
    41e8:	43145f01 	tstmi	r4, #1, 30
    41ec:	000010aa 	andeq	r1, r0, sl, lsr #1
    41f0:	000012aa 	andeq	r1, r0, sl, lsr #5
    41f4:	0010b646 	andseq	fp, r0, r6, asr #12
    41f8:	42000000 	andmi	r0, r0, #0
    41fc:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    4200:	00001890 	muleq	r0, r0, r8
    4204:	0000195c 	andeq	r1, r0, ip, asr r9
    4208:	119a9c01 	orrsne	r9, sl, r1, lsl #24
    420c:	ad430000 	stclge	0, cr0, [r3, #-0]
    4210:	bd00000f 	stclt	0, cr0, [r0, #-60]	; 0xffffffc4
    4214:	43000012 	movwmi	r0, #18
    4218:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    421c:	000012d0 	ldrdeq	r1, [r0], -r0
    4220:	000fc546 	andeq	ip, pc, r6, asr #10
    4224:	0fcf4600 	svceq	0x00cf4600
    4228:	9e470000 	cdpls	0, 4, cr0, cr7, cr0, {0}
    422c:	9e00000f 	cdpls	0, 0, cr0, cr0, cr15, {0}
    4230:	08000018 	stmdaeq	r0, {r3, r4}
    4234:	01000007 	tsteq	r0, r7
    4238:	b92906af 	stmdblt	r9!, {r0, r1, r2, r3, r5, r7, r9, sl}
    423c:	4300000f 	movwmi	r0, #15
    4240:	00000fad 	andeq	r0, r0, sp, lsr #31
    4244:	000012e3 	andeq	r1, r0, r3, ror #5
    4248:	00070836 	andeq	r0, r7, r6, lsr r8
    424c:	0fc54400 	svceq	0x00c54400
    4250:	130c0000 	movwne	r0, #49152	; 0xc000
    4254:	cf460000 	svcgt	0x00460000
    4258:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
    425c:	00000fd9 	ldrdeq	r0, [r0], -r9
    4260:	0000193a 	andeq	r1, r0, sl, lsr r9
    4264:	42000000 	andmi	r0, r0, #0
    4268:	00000edb 	ldrdeq	r0, [r0], -fp
    426c:	00001970 	andeq	r1, r0, r0, ror r9
    4270:	000019a4 	andeq	r1, r0, r4, lsr #19
    4274:	11ee9c01 	mvnne	r9, r1, lsl #24
    4278:	eb430000 	bl	10c4280 <__ccfg+0x10a42d8>
    427c:	2a00000e 	bcs	42bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc>
    4280:	43000013 	movwmi	r0, #19
    4284:	00000ef8 	strdeq	r0, [r0], -r8
    4288:	00001348 	andeq	r1, r0, r8, asr #6
    428c:	000f0546 	andeq	r0, pc, r6, asr #10
    4290:	0edb4900 	vfnmseq.f16	s9, s22, s0	; <UNPREDICTABLE>
    4294:	19820000 	stmibne	r2, {}	; <UNPREDICTABLE>
    4298:	198a0000 	stmibne	sl, {}	; <UNPREDICTABLE>
    429c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    42a0:	eb430601 	bl	10c5aac <__ccfg+0x10a5b04>
    42a4:	6600000e 	strvs	r0, [r0], -lr
    42a8:	43000013 	movwmi	r0, #19
    42ac:	00000ef8 	strdeq	r0, [r0], -r8
    42b0:	00001379 	andeq	r1, r0, r9, ror r3
    42b4:	000f0546 	andeq	r0, pc, r6, asr #10
    42b8:	4a000000 	bmi	42c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10>
    42bc:	00000880 	andeq	r0, r0, r0, lsl #17
    42c0:	00001bc4 	andeq	r1, r0, r4, asr #23
    42c4:	00001c0c 	andeq	r1, r0, ip, lsl #24
    42c8:	90439c01 	subls	r9, r3, r1, lsl #24
    42cc:	8c000008 	stchi	0, cr0, [r0], {8}
    42d0:	49000013 	stmdbmi	r0, {r0, r1, r4}
    42d4:	00000880 	andeq	r0, r0, r0, lsl #17
    42d8:	00001bd0 	ldrdeq	r1, [r0], -r0
    42dc:	00001bd8 	ldrdeq	r1, [r0], -r8
    42e0:	06037c01 	streq	r7, [r3], -r1, lsl #24
    42e4:	00089043 	andeq	r9, r8, r3, asr #32
    42e8:	0013aa00 	andseq	sl, r3, r0, lsl #20
    42ec:	00000000 	andeq	r0, r0, r0
    42f0:	00001333 	andeq	r1, r0, r3, lsr r3
    42f4:	0e610003 	cdpeq	0, 6, cr0, cr1, cr3, {0}
    42f8:	01040000 	mrseq	r0, (UNDEF: 4)
    42fc:	000000ac 	andeq	r0, r0, ip, lsr #1
    4300:	0017420c 	andseq	r4, r7, ip, lsl #4
    4304:	000e0a00 	andeq	r0, lr, r0, lsl #20
    4308:	00091000 	andeq	r1, r9, r0
    430c:	00000000 	andeq	r0, r0, r0
    4310:	0031c600 	eorseq	ip, r1, r0, lsl #12
    4314:	06010200 	streq	r0, [r1], -r0, lsl #4
    4318:	00000c5d 	andeq	r0, r0, sp, asr ip
    431c:	6b050202 	blvs	144b2c <__ccfg+0x124b84>
    4320:	0200000a 	andeq	r0, r0, #10
    4324:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    4328:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    432c:	0007f805 	andeq	pc, r7, r5, lsl #16
    4330:	2a1c0300 	bcs	704f38 <__ccfg+0x6e4f90>
    4334:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    4338:	00004d18 	andeq	r4, r0, r8, lsl sp
    433c:	08010200 	stmdaeq	r1, {r9}
    4340:	00000c5b 	andeq	r0, r0, fp, asr ip
    4344:	002e1203 	eoreq	r1, lr, r3, lsl #4
    4348:	19310200 	ldmdbne	r1!, {r9}
    434c:	00000060 	andeq	r0, r0, r0, rrx
    4350:	66070202 	strvs	r0, [r7], -r2, lsl #4
    4354:	0300000d 	movweq	r0, #13
    4358:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    435c:	73193402 	tstvc	r9, #33554432	; 0x2000000
    4360:	02000000 	andeq	r0, r0, #0
    4364:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    4368:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    436c:	00042107 	andeq	r2, r4, r7, lsl #2
    4370:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4374:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4378:	2b070402 	blcs	1c5388 <__ccfg+0x1a53e0>
    437c:	03000004 	movweq	r0, #4
    4380:	0000051e 	andeq	r0, r0, lr, lsl r5
    4384:	9b1b2803 	blls	6ce398 <__ccfg+0x6ae3f0>
    4388:	05000000 	streq	r0, [r0, #-0]
    438c:	00000b90 	muleq	r0, r0, fp
    4390:	b3000d04 	movwlt	r0, #3332	; 0xd04
    4394:	06000000 	streq	r0, [r0], -r0
    4398:	0000086d 	andeq	r0, r0, sp, ror #16
    439c:	000000b3 	strheq	r0, [r0], -r3
    43a0:	07000100 	streq	r0, [r0, -r0, lsl #2]
    43a4:	0b920304 	bleq	fe484fbc <_estack+0xde47ffbc>
    43a8:	63030000 	movwvs	r0, #12288	; 0x3000
    43ac:	00008f18 	andeq	r8, r0, r8, lsl pc
    43b0:	13280300 			; <UNDEFINED> instruction: 0x13280300
    43b4:	26040000 	strcs	r0, [r4], -r0
    43b8:	00004112 	andeq	r4, r0, r2, lsl r1
    43bc:	28fb0300 	ldmcs	fp!, {r8, r9}^
    43c0:	27040000 	strcs	r0, [r4, -r0]
    43c4:	00005412 	andeq	r5, r0, r2, lsl r4
    43c8:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    43cc:	cd090000 	stcgt	0, cr0, [r9, #-0]
    43d0:	03000000 	movweq	r0, #0
    43d4:	00001dc2 	andeq	r1, r0, r2, asr #27
    43d8:	41122b04 	tstmi	r2, r4, lsl #22
    43dc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    43e0:	000000e3 	andeq	r0, r0, r3, ror #1
    43e4:	0000e308 	andeq	lr, r0, r8, lsl #6
    43e8:	294d0300 	stmdbcs	sp, {r8, r9}^
    43ec:	2c040000 	stccs	0, cr0, [r4], {-0}
    43f0:	00006712 	andeq	r6, r0, r2, lsl r7
    43f4:	00f90800 	rscseq	r0, r9, r0, lsl #16
    43f8:	46030000 	strmi	r0, [r3], -r0
    43fc:	04000006 	streq	r0, [r0], #-6
    4400:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    4404:	b4030000 	strlt	r0, [r3], #-0
    4408:	0400000b 	streq	r0, [r0], #-11
    440c:	0122102e 			; <UNDEFINED> instruction: 0x0122102e
    4410:	040a0000 	streq	r0, [sl], #-0
    4414:	000000cd 	andeq	r0, r0, sp, asr #1
    4418:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    441c:	0001b609 	andeq	fp, r1, r9, lsl #12
    4420:	00340c00 	eorseq	r0, r4, r0, lsl #24
    4424:	34040000 	strcc	r0, [r4], #-0
    4428:	0000e307 	andeq	lr, r0, r7, lsl #6
    442c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4430:	064c0c00 	strbeq	r0, [ip], -r0, lsl #24
    4434:	35040000 	strcc	r0, [r4, #-0]
    4438:	0000e303 	andeq	lr, r0, r3, lsl #6
    443c:	06010100 	streq	r0, [r1], -r0, lsl #2
    4440:	02e70c00 	rsceq	r0, r7, #0, 24
    4444:	36040000 	strcc	r0, [r4], -r0
    4448:	0000e303 	andeq	lr, r0, r3, lsl #6
    444c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4450:	06b70c00 	ldrteq	r0, [r7], r0, lsl #24
    4454:	37040000 	strcc	r0, [r4, -r0]
    4458:	0000e303 	andeq	lr, r0, r3, lsl #6
    445c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4460:	0a9f0c00 	beq	fe7c7468 <_estack+0xde7c2468>
    4464:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    4468:	0000e303 	andeq	lr, r0, r3, lsl #6
    446c:	00040100 	andeq	r0, r4, r0, lsl #2
    4470:	065b0d00 	ldrbeq	r0, [fp], -r0, lsl #26
    4474:	3a040000 	bcc	10447c <__ccfg+0xe44d4>
    4478:	0000e307 	andeq	lr, r0, r7, lsl #6
    447c:	fb0d0100 	blx	344886 <__ccfg+0x3248de>
    4480:	04000008 	streq	r0, [r0], #-8
    4484:	00e3033c 	rsceq	r0, r3, ip, lsr r3
    4488:	0d020000 	stceq	0, cr0, [r2, #-0]
    448c:	00000f3a 	andeq	r0, r0, sl, lsr pc
    4490:	e3033d04 	movw	r3, #15620	; 0x3d04
    4494:	03000000 	movweq	r0, #0
    4498:	0009130d 	andeq	r1, r9, sp, lsl #6
    449c:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    44a0:	000000f9 	strdeq	r0, [r0], -r9
    44a4:	1d030004 	stcne	0, cr0, [r3, #-16]
    44a8:	04000003 	streq	r0, [r0], #-3
    44ac:	01280341 			; <UNDEFINED> instruction: 0x01280341
    44b0:	b6090000 	strlt	r0, [r9], -r0
    44b4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    44b8:	000006be 			; <UNDEFINED> instruction: 0x000006be
    44bc:	c21a4304 	andsgt	r4, sl, #4, 6	; 0x10000000
    44c0:	01000001 	tsteq	r0, r1
    44c4:	01a00e01 	lsleq	r0, r1, #28
    44c8:	45040000 	strmi	r0, [r4, #-0]
    44cc:	0001e30e 	andeq	lr, r1, lr, lsl #6
    44d0:	0a010100 	beq	448d8 <__ccfg+0x24930>
    44d4:	0001e904 	andeq	lr, r1, r4, lsl #18
    44d8:	08010200 	stmdaeq	r1, {r9}
    44dc:	00000c64 	andeq	r0, r0, r4, ror #24
    44e0:	0001e908 	andeq	lr, r1, r8, lsl #18
    44e4:	03260e00 			; <UNDEFINED> instruction: 0x03260e00
    44e8:	45040000 	strmi	r0, [r4, #-0]
    44ec:	0001e31e 	andeq	lr, r1, lr, lsl r3
    44f0:	0b010100 	bleq	448f8 <__ccfg+0x24950>
    44f4:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    44f8:	00000234 	andeq	r0, r0, r4, lsr r2
    44fc:	000cd80d 	andeq	sp, ip, sp, lsl #16
    4500:	0b900500 	bleq	fe405908 <_estack+0xde400908>
    4504:	00000067 	andeq	r0, r0, r7, rrx
    4508:	10750d00 	rsbsne	r0, r5, r0, lsl #26
    450c:	91050000 	mrsls	r0, (UNDEF: 5)
    4510:	0000cd08 	andeq	ip, r0, r8, lsl #26
    4514:	c50d0400 	strgt	r0, [sp, #-1024]	; 0xfffffc00
    4518:	05000001 	streq	r0, [r0, #-1]
    451c:	00ef1092 	smlaleq	r1, pc, r2, r0	; <UNPREDICTABLE>
    4520:	00060000 	andeq	r0, r6, r0
    4524:	000ccc03 	andeq	ip, ip, r3, lsl #24
    4528:	03930500 	orrseq	r0, r3, #0, 10
    452c:	00000203 	andeq	r0, r0, r3, lsl #4
    4530:	0002340f 	andeq	r3, r2, pc, lsl #8
    4534:	00024b00 	andeq	r4, r2, r0, lsl #22
    4538:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    453c:	0000093d 	andeq	r0, r0, sp, lsr r9
    4540:	400f9905 	andmi	r9, pc, r5, lsl #18
    4544:	01000002 	tsteq	r0, r2
    4548:	f4040a01 	vst1.8	{d0-d1}, [r4], r1
    454c:	0b000000 	bleq	4554 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x108>
    4550:	09910601 	ldmibeq	r1, {r0, r9, sl}
    4554:	00000289 	andeq	r0, r0, r9, lsl #5
    4558:	00091a0c 	andeq	r1, r9, ip, lsl #20
    455c:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    4560:	000000e3 	andeq	r0, r0, r3, ror #1
    4564:	00010701 	andeq	r0, r1, r1, lsl #14
    4568:	0005cc0c 	andeq	ip, r5, ip, lsl #24
    456c:	03940600 	orrseq	r0, r4, #0, 12
    4570:	000000e3 	andeq	r0, r0, r3, ror #1
    4574:	00000101 	andeq	r0, r0, r1, lsl #2
    4578:	0aab0300 	beq	feac5180 <_estack+0xdeac0180>
    457c:	96060000 	strls	r0, [r6], -r0
    4580:	00025f03 	andeq	r5, r2, r3, lsl #30
    4584:	02890800 	addeq	r0, r9, #0, 16
    4588:	950f0000 	strls	r0, [pc, #-0]	; 4590 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>
    458c:	a5000002 	strge	r0, [r0, #-2]
    4590:	10000002 	andne	r0, r0, r2
    4594:	029a0800 	addseq	r0, sl, #0, 16
    4598:	aa0e0000 	bge	3845a0 <__ccfg+0x3645f8>
    459c:	06000003 	streq	r0, [r0], -r3
    45a0:	02a5179c 	adceq	r1, r5, #156, 14	; 0x2700000
    45a4:	01010000 	mrseq	r0, (UNDEF: 1)
    45a8:	0000d90f 	andeq	sp, r0, pc, lsl #18
    45ac:	0002c300 	andeq	ip, r2, r0, lsl #6
    45b0:	08001000 	stmdaeq	r0, {ip}
    45b4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    45b8:	00060e0e 	andeq	r0, r6, lr, lsl #28
    45bc:	13060700 	movwne	r0, #26368	; 0x6700
    45c0:	000002c3 	andeq	r0, r0, r3, asr #5
    45c4:	dd0e0101 	stfles	f0, [lr, #-4]
    45c8:	05000008 	streq	r0, [r0, #-8]
    45cc:	00f90ec3 	rscseq	r0, r9, r3, asr #29
    45d0:	01010000 	mrseq	r0, (UNDEF: 1)
    45d4:	000c7211 	andeq	r7, ip, r1, lsl r2
    45d8:	016e0800 	cmneq	lr, r0, lsl #16
    45dc:	0002f110 	andeq	pc, r2, r0, lsl r1	; <UNPREDICTABLE>
    45e0:	f7040a00 			; <UNDEFINED> instruction: 0xf7040a00
    45e4:	12000002 	andne	r0, r0, #2
    45e8:	00030301 	andeq	r0, r3, r1, lsl #6
    45ec:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    45f0:	0f000000 	svceq	0x00000000
    45f4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    45f8:	0000030e 	andeq	r0, r0, lr, lsl #6
    45fc:	03080010 	movweq	r0, #32784	; 0x8010
    4600:	14000003 	strne	r0, [r0], #-3
    4604:	000009e6 	andeq	r0, r0, r6, ror #19
    4608:	16017f08 	strne	r7, [r1], -r8, lsl #30
    460c:	0000030e 	andeq	r0, r0, lr, lsl #6
    4610:	96140101 	ldrls	r0, [r4], -r1, lsl #2
    4614:	08000003 	stmdaeq	r0, {r0, r1}
    4618:	05140182 	ldreq	r0, [r4, #-386]	; 0xfffffe7e
    461c:	01000001 	tsteq	r0, r1
    4620:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    4624:	03550908 	cmpeq	r5, #8, 18	; 0x20000
    4628:	cb0d0000 	blgt	344630 <__ccfg+0x324688>
    462c:	09000001 	stmdbeq	r0, {r0}
    4630:	00cd070f 	sbceq	r0, sp, pc, lsl #14
    4634:	0d000000 	stceq	0, cr0, [r0, #-0]
    4638:	00000ca2 	andeq	r0, r0, r2, lsr #25
    463c:	cd031009 	stcgt	0, cr1, [r3, #-36]	; 0xffffffdc
    4640:	02000000 	andeq	r0, r0, #0
    4644:	0d790300 	ldcleq	3, cr0, [r9, #-0]
    4648:	11090000 	mrsne	r0, (UNDEF: 9)
    464c:	00033103 	andeq	r3, r3, r3, lsl #2
    4650:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    4654:	03d30916 	bicseq	r0, r3, #360448	; 0x58000
    4658:	ac0d0000 	stcge	0, cr0, [sp], {-0}
    465c:	09000004 	stmdbeq	r0, {r2}
    4660:	03ed0817 	mvneq	r0, #1507328	; 0x170000
    4664:	0d000000 	stceq	0, cr0, [r0, #-0]
    4668:	0000090b 	andeq	r0, r0, fp, lsl #18
    466c:	08081809 	stmdaeq	r8, {r0, r3, fp, ip}
    4670:	04000004 	streq	r0, [r0], #-4
    4674:	000bc60d 	andeq	ip, fp, sp, lsl #12
    4678:	08190900 	ldmdaeq	r9, {r8, fp}
    467c:	0000043e 	andeq	r0, r0, lr, lsr r4
    4680:	0c9a0d08 	ldceq	13, cr0, [sl], {8}
    4684:	1a090000 	bne	24468c <__ccfg+0x2246e4>
    4688:	00045908 	andeq	r5, r4, r8, lsl #18
    468c:	620d0c00 	andvs	r0, sp, #0, 24
    4690:	09000009 	stmdbeq	r0, {r0, r3}
    4694:	046f081b 	strbteq	r0, [pc], #-2075	; 469c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    4698:	0d100000 	ldceq	0, cr0, [r0, #-0]
    469c:	00000a63 	andeq	r0, r0, r3, ror #20
    46a0:	6f081c09 	svcvs	0x00081c09
    46a4:	14000004 	strne	r0, [r0], #-4
    46a8:	0001ae0d 	andeq	sl, r1, sp, lsl #28
    46ac:	081d0900 	ldmdaeq	sp, {r8, fp}
    46b0:	0000046f 	andeq	r0, r0, pc, ror #8
    46b4:	03140d18 	tsteq	r4, #24, 26	; 0x600
    46b8:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    46bc:	00008106 	andeq	r8, r0, r6, lsl #2
    46c0:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    46c4:	00008101 	andeq	r8, r0, r1, lsl #2
    46c8:	0003ed00 	andeq	lr, r3, r0, lsl #26
    46cc:	00811300 	addeq	r1, r1, r0, lsl #6
    46d0:	81130000 	tsthi	r3, r0
    46d4:	13000000 	movwne	r0, #0
    46d8:	000000b5 	strheq	r0, [r0], -r5
    46dc:	d3040a00 	movwle	r0, #18944	; 0x4a00
    46e0:	15000003 	strne	r0, [r0, #-3]
    46e4:	00008101 	andeq	r8, r0, r1, lsl #2
    46e8:	00040800 	andeq	r0, r4, r0, lsl #16
    46ec:	00811300 	addeq	r1, r1, r0, lsl #6
    46f0:	81130000 	tsthi	r3, r0
    46f4:	00000000 	andeq	r0, r0, r0
    46f8:	03f3040a 	mvnseq	r0, #167772160	; 0xa000000
    46fc:	01150000 	tsteq	r5, r0
    4700:	00000081 	andeq	r0, r0, r1, lsl #1
    4704:	00000432 	andeq	r0, r0, r2, lsr r4
    4708:	00008113 	andeq	r8, r0, r3, lsl r1
    470c:	01161300 	tsteq	r6, r0, lsl #6
    4710:	81130000 	tsthi	r3, r0
    4714:	13000000 	movwne	r0, #0
    4718:	00000432 	andeq	r0, r0, r2, lsr r4
    471c:	00043813 	andeq	r3, r4, r3, lsl r8
    4720:	040a0000 	streq	r0, [sl], #-0
    4724:	00000081 	andeq	r0, r0, r1, lsl #1
    4728:	0355040a 	cmpeq	r5, #167772160	; 0xa000000
    472c:	040a0000 	streq	r0, [sl], #-0
    4730:	0000040e 	andeq	r0, r0, lr, lsl #8
    4734:	00810115 	addeq	r0, r1, r5, lsl r1
    4738:	04590000 	ldrbeq	r0, [r9], #-0
    473c:	16130000 	ldrne	r0, [r3], -r0
    4740:	13000001 	movwne	r0, #1
    4744:	00000438 	andeq	r0, r0, r8, lsr r4
    4748:	44040a00 	strmi	r0, [r4], #-2560	; 0xfffff600
    474c:	15000004 	strne	r0, [r0, #-4]
    4750:	00008101 	andeq	r8, r0, r1, lsl #2
    4754:	00046f00 	andeq	r6, r4, r0, lsl #30
    4758:	01161300 	tsteq	r6, r0, lsl #6
    475c:	0a000000 	beq	4764 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    4760:	00045f04 	andeq	r5, r4, r4, lsl #30
    4764:	0d350300 	ldceq	3, cr0, [r5, #-0]
    4768:	1f090000 	svcne	0x00090000
    476c:	00036103 	andeq	r6, r3, r3, lsl #2
    4770:	04750800 	ldrbteq	r0, [r5], #-2048	; 0xfffff800
    4774:	cb160000 	blgt	58477c <__ccfg+0x5647d4>
    4778:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    477c:	ae082409 	cdpge	4, 0, cr2, cr8, cr9, {0}
    4780:	0d000004 	stceq	0, cr0, [r0, #-16]
    4784:	00000ec5 	andeq	r0, r0, r5, asr #29
    4788:	ae182509 	cfmul32ge	mvfx2, mvfx8, mvfx9
    478c:	00000004 	andeq	r0, r0, r4
    4790:	0016ed0d 	andseq	lr, r6, sp, lsl #26
    4794:	06260900 	strteq	r0, [r6], -r0, lsl #18
    4798:	000004ae 	andeq	r0, r0, lr, lsr #9
    479c:	040a0004 	streq	r0, [sl], #-4
    47a0:	00000486 	andeq	r0, r0, r6, lsl #9
    47a4:	0017d903 	andseq	sp, r7, r3, lsl #18
    47a8:	1e290900 	vmulne.f16	s0, s18, s0	; <UNPREDICTABLE>
    47ac:	00000486 	andeq	r0, r0, r6, lsl #9
    47b0:	0018de03 	andseq	sp, r8, r3, lsl #28
    47b4:	1e2a0900 	vmulne.f16	s0, s20, s0	; <UNPREDICTABLE>
    47b8:	00000486 	andeq	r0, r0, r6, lsl #9
    47bc:	3f09020b 	svccc	0x0009020b
    47c0:	00053602 	andeq	r3, r5, r2, lsl #12
    47c4:	18800c00 	stmne	r0, {sl, fp}
    47c8:	40090000 	andmi	r0, r9, r0
    47cc:	0000cd09 	andeq	ip, r0, r9, lsl #26
    47d0:	0f010200 	svceq	0x00010200
    47d4:	19300c00 	ldmdbne	r0!, {sl, fp}
    47d8:	41090000 	mrsmi	r0, (UNDEF: 9)
    47dc:	0000cd04 	andeq	ip, r0, r4, lsl #26
    47e0:	0e010200 	cdpeq	2, 0, cr0, cr1, cr0, {0}
    47e4:	17fb0c00 	ldrbne	r0, [fp, r0, lsl #24]!
    47e8:	42090000 	andmi	r0, r9, #0
    47ec:	0000cd04 	andeq	ip, r0, r4, lsl #26
    47f0:	0d010200 	sfmeq	f0, 4, [r1, #-0]
    47f4:	18900c00 	ldmne	r0, {sl, fp}
    47f8:	43090000 	movwmi	r0, #36864	; 0x9000
    47fc:	0000cd04 	andeq	ip, r0, r4, lsl #26
    4800:	06070200 	streq	r0, [r7], -r0, lsl #4
    4804:	18ec0c00 	stmiane	ip!, {sl, fp}^
    4808:	44090000 	strmi	r0, [r9], #-0
    480c:	0000cd04 	andeq	ip, r0, r4, lsl #26
    4810:	03030200 	movweq	r0, #12800	; 0x3200
    4814:	18720c00 	ldmdane	r2!, {sl, fp}^
    4818:	45090000 	strmi	r0, [r9, #-0]
    481c:	0000cd04 	andeq	ip, r0, r4, lsl #26
    4820:	00030200 	andeq	r0, r3, r0, lsl #4
    4824:	02170000 	andseq	r0, r7, #0
    4828:	56093d09 	strpl	r3, [r9], -r9, lsl #26
    482c:	18000005 	stmdane	r0, {r0, r2}
    4830:	00000603 	andeq	r0, r0, r3, lsl #12
    4834:	cd073e09 	stcgt	14, cr3, [r7, #-36]	; 0xffffffdc
    4838:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    483c:	46090062 	strmi	r0, [r9], -r2, rrx
    4840:	0004cc04 	andeq	ip, r4, r4, lsl #24
    4844:	f2030000 	vhadd.s8	d0, d3, d0
    4848:	09000016 	stmdbeq	r0, {r1, r2, r4}
    484c:	05360347 	ldreq	r0, [r6, #-839]!	; 0xfffffcb9
    4850:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    4854:	84055009 	strhi	r5, [r5], #-9
    4858:	18000005 	stmdane	r0, {r0, r2}
    485c:	00001912 	andeq	r1, r0, r2, lsl r9
    4860:	b4105109 	ldrlt	r5, [r0], #-265	; 0xfffffef7
    4864:	18000004 	stmdane	r0, {r2}
    4868:	0000183c 	andeq	r1, r0, ip, lsr r8
    486c:	550b5209 	strpl	r5, [fp, #-521]	; 0xfffffdf7
    4870:	00000003 	andeq	r0, r0, r3
    4874:	00192116 	andseq	r2, r9, r6, lsl r1
    4878:	4c090c00 	stcmi	12, cr0, [r9], {-0}
    487c:	0005b708 	andeq	fp, r5, r8, lsl #14
    4880:	00751a00 	rsbseq	r1, r5, r0, lsl #20
    4884:	62075809 	andvs	r5, r7, #589824	; 0x90000
    4888:	00000005 	andeq	r0, r0, r5
    488c:	0018f30d 	andseq	pc, r8, sp, lsl #6
    4890:	07630900 	strbeq	r0, [r3, -r0, lsl #18]!
    4894:	000000cd 	andeq	r0, r0, sp, asr #1
    4898:	18d30d08 	ldmne	r3, {r3, r8, sl, fp}^
    489c:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    48a0:	00055610 	andeq	r5, r5, r0, lsl r6
    48a4:	03000a00 	movweq	r0, #2560	; 0xa00
    48a8:	000017e7 	andeq	r1, r0, r7, ror #15
    48ac:	841f7909 	ldrhi	r7, [pc], #-2313	; 48b4 <NOROM_ChipInfo_GetHwRevision+0x34>
    48b0:	0b000005 	bleq	48cc <NOROM_ChipInfo_GetHwRevision+0x4c>
    48b4:	097b090c 	ldmdbeq	fp!, {r2, r3, r8, fp}^
    48b8:	000005e7 	andeq	r0, r0, r7, ror #11
    48bc:	0018300d 	andseq	r3, r8, sp
    48c0:	117f0900 	cmnne	pc, r0, lsl #18
    48c4:	000004c0 	andeq	r0, r0, r0, asr #9
    48c8:	18bf0d00 	ldmne	pc!, {r8, sl, fp}	; <UNPREDICTABLE>
    48cc:	83090000 	movwhi	r0, #36864	; 0x9000
    48d0:	00055611 	andeq	r5, r5, r1, lsl r6
    48d4:	03000800 	movweq	r0, #2048	; 0x800
    48d8:	00001862 	andeq	r1, r0, r2, ror #16
    48dc:	c3039209 	movwgt	r9, #12809	; 0x3209
    48e0:	14000005 	strne	r0, [r0], #-5
    48e4:	0000036e 	andeq	r0, r0, lr, ror #6
    48e8:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    48ec:	000000f9 	strdeq	r0, [r0], -r9
    48f0:	081b0101 	ldmdaeq	fp, {r0, r8}
    48f4:	09030308 	stmdbeq	r3, {r3, r8, r9}
    48f8:	00000629 	andeq	r0, r0, r9, lsr #12
    48fc:	003ca11c 	eorseq	sl, ip, ip, lsl r1
    4900:	03070800 	movweq	r0, #30720	; 0x7800
    4904:	0000cd07 	andeq	ip, r0, r7, lsl #26
    4908:	cd1c0000 	ldcgt	0, cr0, [ip, #-0]
    490c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    4910:	0a080308 	beq	205538 <__ccfg+0x1e5590>
    4914:	04000001 	streq	r0, [r0], #-1
    4918:	0a091100 	beq	248d20 <__ccfg+0x228d78>
    491c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    4920:	06020303 	streq	r0, [r2], -r3, lsl #6
    4924:	291d0000 	ldmdbcs	sp, {}	; <UNPREDICTABLE>
    4928:	30000000 	andcc	r0, r0, r0
    492c:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    4930:	00000699 	muleq	r0, r9, r6
    4934:	001f241c 	andseq	r2, pc, ip, lsl r4	; <UNPREDICTABLE>
    4938:	03140800 	tsteq	r4, #0, 16
    493c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    4940:	e71c0000 	ldr	r0, [ip, -r0]
    4944:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    4948:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    494c:	02000000 	andeq	r0, r0, #0
    4950:	004c8e1c 	subeq	r8, ip, ip, lsl lr
    4954:	03160800 	tsteq	r6, #0, 16
    4958:	0002e40b 	andeq	lr, r2, fp, lsl #8
    495c:	541c0400 	ldrpl	r0, [ip], #-1024	; 0xfffffc00
    4960:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    4964:	0a090317 	beq	2455c8 <__ccfg+0x225620>
    4968:	08000001 	stmdaeq	r0, {r0}
    496c:	00000f1c 	andeq	r0, r0, ip, lsl pc
    4970:	03180800 	tsteq	r8, #0, 16
    4974:	0006990f 	andeq	r9, r6, pc, lsl #18
    4978:	5d1c0c00 	ldcpl	12, cr0, [ip, #-0]
    497c:	08000009 	stmdaeq	r0, {r0, r3}
    4980:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    4984:	2c000006 	stccs	0, cr0, [r0], {6}
    4988:	06290f00 	strteq	r0, [r9], -r0, lsl #30
    498c:	06a90000 	strteq	r0, [r9], r0
    4990:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4994:	03000000 	movweq	r0, #0
    4998:	36040a00 	strcc	r0, [r4], -r0, lsl #20
    499c:	11000006 	tstne	r0, r6
    49a0:	00000bdc 	ldrdeq	r0, [r0], -ip
    49a4:	1b031c08 	blne	cb9cc <__ccfg+0xaba24>
    49a8:	00000636 	andeq	r0, r0, r6, lsr r6
    49ac:	000bbc14 	andeq	fp, fp, r4, lsl ip
    49b0:	031e0800 	tsteq	lr, #0, 16
    49b4:	0006cb14 	andeq	ip, r6, r4, lsl fp
    49b8:	0a010100 	beq	44dc0 <__ccfg+0x24e18>
    49bc:	0006af04 	andeq	sl, r6, r4, lsl #30
    49c0:	070f0e00 	streq	r0, [pc, -r0, lsl #28]
    49c4:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    49c8:	0000cd13 	andeq	ip, r0, r3, lsl sp
    49cc:	0e010100 	adfeqs	f0, f1, f0
    49d0:	000002ee 	andeq	r0, r0, lr, ror #5
    49d4:	de1a1e0a 	cdple	14, 1, cr1, cr10, cr10, {0}
    49d8:	01000000 	mrseq	r0, (UNDEF: 0)
    49dc:	0c690e01 	stcleq	14, cr0, [r9], #-4
    49e0:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    49e4:	0000de24 	andeq	sp, r0, r4, lsr #28
    49e8:	0e010100 	adfeqs	f0, f1, f0
    49ec:	00000c87 	andeq	r0, r0, r7, lsl #25
    49f0:	cb14220a 	blgt	50d220 <__ccfg+0x4ed278>
    49f4:	01000006 	tsteq	r0, r6
    49f8:	17380301 	ldrne	r0, [r8, -r1, lsl #6]!
    49fc:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    4a00:	0007150f 	andeq	r1, r7, pc, lsl #10
    4a04:	1b040a00 	blne	10720c <__ccfg+0xe7264>
    4a08:	15000007 	strne	r0, [r0, #-7]
    4a0c:	00008101 	andeq	r8, r0, r1, lsl #2
    4a10:	00073000 	andeq	r3, r7, r0
    4a14:	00811300 	addeq	r1, r1, r0, lsl #6
    4a18:	16130000 	ldrne	r0, [r3], -r0
    4a1c:	00000001 	andeq	r0, r0, r1
    4a20:	0007400f 	andeq	r4, r7, pc
    4a24:	00074000 	andeq	r4, r7, r0
    4a28:	00881e00 	addeq	r1, r8, r0, lsl #28
    4a2c:	00070000 	andeq	r0, r7, r0
    4a30:	05e7040a 	strbeq	r0, [r7, #1034]!	; 0x40a
    4a34:	081f0000 	ldmdaeq	pc, {}	; <UNPREDICTABLE>
    4a38:	0c000018 	stceq	0, cr0, [r0], {24}
    4a3c:	0730150d 	ldreq	r1, [r0, -sp, lsl #10]!
    4a40:	03050000 	movweq	r0, #20480	; 0x5000
    4a44:	20000568 	andcs	r0, r0, r8, ror #10
    4a48:	0007090f 	andeq	r0, r7, pc, lsl #18
    4a4c:	00076800 	andeq	r6, r7, r0, lsl #16
    4a50:	00881e00 	addeq	r1, r8, r0, lsl #28
    4a54:	00020000 	andeq	r0, r2, r0
    4a58:	0018771f 	andseq	r7, r8, pc, lsl r7
    4a5c:	14130c00 	ldrne	r0, [r3], #-3072	; 0xfffff400
    4a60:	00000758 	andeq	r0, r0, r8, asr r7
    4a64:	05940305 	ldreq	r0, [r4, #773]	; 0x305
    4a68:	8a0f2000 	bhi	3cca70 <__ccfg+0x3acac8>
    4a6c:	8a000007 	bhi	4a90 <__aeabi_lmul+0x64>
    4a70:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    4a74:	00000088 	andeq	r0, r0, r8, lsl #1
    4a78:	040a0002 	streq	r0, [sl], #-2
    4a7c:	000004c0 	andeq	r0, r0, r0, asr #9
    4a80:	0017c31f 	andseq	ip, r7, pc, lsl r3
    4a84:	13190c00 	tstne	r9, #0, 24
    4a88:	0000077a 	andeq	r0, r0, sl, ror r7
    4a8c:	05880305 	streq	r0, [r8, #773]	; 0x305
    4a90:	810f2000 	mrshi	r2, CPSR
    4a94:	b2000000 	andlt	r0, r0, #0
    4a98:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    4a9c:	00000088 	andeq	r0, r0, r8, lsl #1
    4aa0:	9b1f0002 	blls	7c4ab0 <__ccfg+0x7a4b08>
    4aa4:	0c000017 	stceq	0, cr0, [r0], {23}
    4aa8:	07a20f1e 			; <UNDEFINED> instruction: 0x07a20f1e
    4aac:	03050000 	movweq	r0, #20480	; 0x5000
    4ab0:	200005a0 	andcs	r0, r0, r0, lsr #11
    4ab4:	0007d40f 	andeq	sp, r7, pc, lsl #8
    4ab8:	0007d400 	andeq	sp, r7, r0, lsl #8
    4abc:	00881e00 	addeq	r1, r8, r0, lsl #28
    4ac0:	00020000 	andeq	r0, r2, r0
    4ac4:	0481040a 	streq	r0, [r1], #1034	; 0x40a
    4ac8:	191f0000 	ldmdbne	pc, {}	; <UNPREDICTABLE>
    4acc:	0c000019 	stceq	0, cr0, [r0], {25}
    4ad0:	07c41b23 	strbeq	r1, [r4, r3, lsr #22]
    4ad4:	03050000 	movweq	r0, #20480	; 0x5000
    4ad8:	200005ac 	andcs	r0, r0, ip, lsr #11
    4adc:	18870120 	stmne	r7, {r5, r8}
    4ae0:	0d010000 	stceq	0, cr0, [r1, #-0]
    4ae4:	e8010105 	stmda	r1, {r0, r2, r8}
    4ae8:	ea000024 	b	4b80 <__aeabi_lmul+0x154>
    4aec:	01000024 	tsteq	r0, r4, lsr #32
    4af0:	aa01219c 	bge	4d168 <__ccfg+0x2d1c0>
    4af4:	01000017 	tsteq	r0, r7, lsl r0
    4af8:	01010505 	tsteq	r1, r5, lsl #10
    4afc:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    4b08:	08639c01 	stmdaeq	r3!, {r0, sl, fp, ip, pc}^
    4b0c:	70220000 	eorvc	r0, r2, r0
    4b10:	01007968 	tsteq	r0, r8, ror #18
    4b14:	812d0505 			; <UNDEFINED> instruction: 0x812d0505
    4b18:	bd000000 	stclt	0, cr0, [r0, #-0]
    4b1c:	23000013 	movwcs	r0, #19
    4b20:	0000114e 	andeq	r1, r0, lr, asr #2
    4b24:	00000000 	andeq	r0, r0, r0
    4b28:	000008f8 	strdeq	r0, [r0], -r8
    4b2c:	09050a01 	stmdbeq	r5, {r0, r9, fp}
    4b30:	00116024 	andseq	r6, r1, r4, lsr #32
    4b34:	0013db00 	andseq	sp, r3, r0, lsl #22
    4b38:	08f82500 	ldmeq	r8!, {r8, sl, sp}^
    4b3c:	6b260000 	blvs	984b44 <__ccfg+0x964b9c>
    4b40:	ee000011 	mcr	0, 0, r0, cr0, cr1, {0}
    4b44:	26000013 			; <UNDEFINED> instruction: 0x26000013
    4b48:	00001176 	andeq	r1, r0, r6, ror r1
    4b4c:	0000140c 	andeq	r1, r0, ip, lsl #8
    4b50:	27000000 	strcs	r0, [r0, -r0]
    4b54:	0018b401 	andseq	fp, r8, r1, lsl #8
    4b58:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    4b5c:	24ac0101 	strtcs	r0, [ip], #257	; 0x101
    4b60:	24e80000 	strbtcs	r0, [r8], #0
    4b64:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b68:	0000089d 	muleq	r0, sp, r8
    4b6c:	746b7022 	strbtvc	r7, [fp], #-34	; 0xffffffde
    4b70:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    4b74:	00011630 	andeq	r1, r1, r0, lsr r6
    4b78:	00143600 	andseq	r3, r4, r0, lsl #12
    4b7c:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4b80:	0c04fe01 	stceq	14, cr15, [r4], {1}
    4b84:	0000089d 	muleq	r0, sp, r8
    4b88:	00001454 	andeq	r1, r0, r4, asr r4
    4b8c:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    4b90:	21000005 	tstcs	r0, r5
    4b94:	00170001 	andseq	r0, r7, r1
    4b98:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    4b9c:	01160101 	tsteq	r6, r1, lsl #2
    4ba0:	24780000 	ldrbtcs	r0, [r8], #-0
    4ba4:	24ac0000 	strtcs	r0, [ip], #0
    4ba8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4bac:	000008f1 	strdeq	r0, [r0], -r1
    4bb0:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4bb4:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    4bb8:	0000812f 	andeq	r8, r0, pc, lsr #2
    4bbc:	00147200 	andseq	r7, r4, r0, lsl #4
    4bc0:	716f2800 	cmnvc	pc, r0, lsl #16
    4bc4:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    4bc8:	00078a0b 	andeq	r8, r7, fp, lsl #20
    4bcc:	00149000 	andseq	r9, r4, r0
    4bd0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4bd4:	0c04ee01 	stceq	14, cr14, [r4], {1}
    4bd8:	0000089d 	muleq	r0, sp, r8
    4bdc:	000014a3 	andeq	r1, r0, r3, lsr #9
    4be0:	7e012100 	adfvcs	f2, f1, f0
    4be4:	01000017 	tsteq	r0, r7, lsl r0
    4be8:	010104d2 	ldrdeq	r0, [r1, -r2]
    4bec:	00000116 	andeq	r0, r0, r6, lsl r1
    4bf0:	00002438 	andeq	r2, r0, r8, lsr r4
    4bf4:	00002478 	andeq	r2, r0, r8, ror r4
    4bf8:	09509c01 	ldmdbeq	r0, {r0, sl, fp, ip, pc}^
    4bfc:	70220000 	eorvc	r0, r2, r0
    4c00:	01007968 	tsteq	r0, r8, ror #18
    4c04:	812f04d2 	ldrdhi	r0, [pc, -r2]!
    4c08:	c2000000 	andgt	r0, r0, #0
    4c0c:	22000014 	andcs	r0, r0, #20
    4c10:	006e656c 	rsbeq	r6, lr, ip, ror #10
    4c14:	3904d201 	stmdbcc	r4, {r0, r9, ip, lr, pc}
    4c18:	00000432 	andeq	r0, r0, r2, lsr r4
    4c1c:	000014e0 	andeq	r1, r0, r0, ror #9
    4c20:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    4c24:	0b04d701 	bleq	13a830 <__ccfg+0x11a888>
    4c28:	0000078a 	andeq	r0, r0, sl, lsl #15
    4c2c:	000014fe 	strdeq	r1, [r0], -lr
    4c30:	01006228 	tsteq	r0, r8, lsr #4
    4c34:	9d0c04d8 	cfstrsls	mvf0, [ip, #-864]	; 0xfffffca0
    4c38:	1c000008 	stcne	0, cr0, [r0], {8}
    4c3c:	00000015 	andeq	r0, r0, r5, lsl r0
    4c40:	19070121 	stmdbne	r7, {r0, r5, r8}
    4c44:	a1010000 	mrsge	r0, (UNDEF: 1)
    4c48:	81010104 	tsthi	r1, r4, lsl #2
    4c4c:	9c000000 	stcls	0, cr0, [r0], {-0}
    4c50:	38000023 	stmdacc	r0, {r0, r1, r5}
    4c54:	01000024 	tsteq	r0, r4, lsr #32
    4c58:	0009eb9c 	muleq	r9, ip, fp
    4c5c:	68702200 	ldmdavs	r0!, {r9, sp}^
    4c60:	a1010079 	tstge	r1, r9, ror r0
    4c64:	00812b04 	addeq	r2, r1, r4, lsl #22
    4c68:	15460000 	strbne	r0, [r6, #-0]
    4c6c:	70220000 	eorvc	r0, r2, r0
    4c70:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4c74:	00011638 	andeq	r1, r1, r8, lsr r6
    4c78:	00157a00 	andseq	r7, r5, r0, lsl #20
    4c7c:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    4c80:	a101006e 	tstge	r1, lr, rrx
    4c84:	00813f04 	addeq	r3, r1, r4, lsl #30
    4c88:	15ae0000 	strne	r0, [lr, #0]!
    4c8c:	70290000 	eorvc	r0, r9, r0
    4c90:	0100676c 	tsteq	r0, ip, ror #14
    4c94:	810604a6 	smlatbhi	r6, r6, r4, r0
    4c98:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4c9c:	00707364 	rsbseq	r7, r0, r4, ror #6
    4ca0:	0b04a601 	bleq	12e4ac <__ccfg+0x10e504>
    4ca4:	00000081 	andeq	r0, r0, r1, lsl #1
    4ca8:	000015e2 	andeq	r1, r0, r2, ror #11
    4cac:	7365732a 	cmnvc	r5, #-1476395008	; 0xa8000000
    4cb0:	04a60100 	strteq	r0, [r6], #256	; 0x100
    4cb4:	00008110 	andeq	r8, r0, r0, lsl r1
    4cb8:	50910200 	addspl	r0, r1, r0, lsl #4
    4cbc:	0070612a 	rsbseq	r6, r0, sl, lsr #2
    4cc0:	0b04a701 	bleq	12e8cc <__ccfg+0x10e924>
    4cc4:	00000355 	andeq	r0, r0, r5, asr r3
    4cc8:	28549102 	ldmdacs	r4, {r1, r8, ip, pc}^
    4ccc:	a8010063 	stmdage	r1, {r0, r1, r5, r6}
    4cd0:	01160a04 	tsteq	r6, r4, lsl #20
    4cd4:	16000000 	strne	r0, [r0], -r0
    4cd8:	21000000 	mrscs	r0, (UNDEF: 0)
    4cdc:	00172d01 	andseq	r2, r7, r1, lsl #26
    4ce0:	04870100 	streq	r0, [r7], #256	; 0x100
    4ce4:	00810101 	addeq	r0, r1, r1, lsl #2
    4ce8:	234c0000 	movtcs	r0, #49152	; 0xc000
    4cec:	239c0000 	orrscs	r0, ip, #0
    4cf0:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cf4:	00000a4a 	andeq	r0, r0, sl, asr #20
    4cf8:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4cfc:	04870100 	streq	r0, [r7], #256	; 0x100
    4d00:	0000812b 	andeq	r8, r0, fp, lsr #2
    4d04:	00161300 	andseq	r1, r6, r0, lsl #6
    4d08:	73702200 	cmnvc	r0, #0, 4
    4d0c:	04870100 	streq	r0, [r7], #256	; 0x100
    4d10:	0007093a 	andeq	r0, r7, sl, lsr r9
    4d14:	00163100 	andseq	r3, r6, r0, lsl #2
    4d18:	0e8b2b00 	vdiveq.f64	d2, d11, d0
    4d1c:	87010000 	strhi	r0, [r1, -r0]
    4d20:	00814204 	addeq	r4, r1, r4, lsl #4
    4d24:	164f0000 	strbne	r0, [pc], -r0
    4d28:	71280000 			; <UNDEFINED> instruction: 0x71280000
    4d2c:	048d0100 	streq	r0, [sp], #256	; 0x100
    4d30:	00078a0b 	andeq	r8, r7, fp, lsl #20
    4d34:	00166d00 	andseq	r6, r6, r0, lsl #26
    4d38:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    4d3c:	00001827 	andeq	r1, r0, r7, lsr #16
    4d40:	01038601 	tsteq	r3, r1, lsl #12
    4d44:	00011601 	andeq	r1, r1, r1, lsl #12
    4d48:	0a910100 	beq	fe445150 <_estack+0xde440150>
    4d4c:	a12d0000 			; <UNDEFINED> instruction: 0xa12d0000
    4d50:	0100001d 	tsteq	r0, sp, lsl r0
    4d54:	812d0386 	smlawbhi	sp, r6, r3, r0
    4d58:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4d5c:	00707364 	rsbseq	r7, r0, r4, ror #6
    4d60:	37038601 	strcc	r8, [r3, -r1, lsl #12]
    4d64:	00000081 	andeq	r0, r0, r1, lsl #1
    4d68:	7365732e 	cmnvc	r5, #-1207959552	; 0xb8000000
    4d6c:	03860100 	orreq	r0, r6, #0, 2
    4d70:	00008140 	andeq	r8, r0, r0, asr #2
    4d74:	00702900 	rsbseq	r2, r0, r0, lsl #18
    4d78:	0c038a01 			; <UNDEFINED> instruction: 0x0c038a01
    4d7c:	0000089d 	muleq	r0, sp, r8
    4d80:	20012700 	andcs	r2, r1, r0, lsl #14
    4d84:	01000017 	tsteq	r0, r7, lsl r0
    4d88:	0101037f 	tsteq	r1, pc, ror r3
	...
    4d94:	0acb9c01 	beq	ff2ebda0 <_estack+0xdf2e6da0>
    4d98:	70220000 	eorvc	r0, r2, r0
    4d9c:	037f0100 	cmneq	pc, #0, 2
    4da0:	00011632 	andeq	r1, r1, r2, lsr r6
    4da4:	00169c00 	andseq	r9, r6, r0, lsl #24
    4da8:	73642200 	cmnvc	r4, #0, 4
    4dac:	7f010070 	svcvc	0x00010070
    4db0:	00813903 	addeq	r3, r1, r3, lsl #18
    4db4:	16af0000 	strtne	r0, [pc], r0
    4db8:	21000000 	mrscs	r0, (UNDEF: 0)
    4dbc:	00189801 	andseq	r9, r8, r1, lsl #16
    4dc0:	036b0100 	cmneq	fp, #0, 2
    4dc4:	01160101 	tsteq	r6, r1, lsl #2
	...
    4dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    4dd4:	00000b25 	andeq	r0, r0, r5, lsr #22
    4dd8:	01007022 	tsteq	r0, r2, lsr #32
    4ddc:	1633036b 	ldrtne	r0, [r3], -fp, ror #6
    4de0:	c2000001 	andgt	r0, r0, #1
    4de4:	2b000016 	blcs	4e44 <__aeabi_lmul+0x418>
    4de8:	000018fa 	strdeq	r1, [r0], -sl
    4dec:	3a036b01 	bcc	df9f8 <__ccfg+0xbfa50>
    4df0:	00000081 	andeq	r0, r0, r1, lsl #1
    4df4:	000016e0 	andeq	r1, r0, r0, ror #13
    4df8:	00637028 	rsbeq	r7, r3, r8, lsr #32
    4dfc:	0c036f01 	stceq	15, cr6, [r3], {1}
    4e00:	0000089d 	muleq	r0, sp, r8
    4e04:	000016fe 	strdeq	r1, [r0], -lr
    4e08:	00707029 	rsbseq	r7, r0, r9, lsr #32
    4e0c:	11036f01 	tstne	r3, r1, lsl #30
    4e10:	0000089d 	muleq	r0, sp, r8
    4e14:	b7012700 	strlt	r2, [r1, -r0, lsl #14]
    4e18:	01000017 	tsteq	r0, r7, lsl r0
    4e1c:	01010363 	tsteq	r1, r3, ror #6
	...
    4e28:	0b5f9c01 	bleq	17ebe34 <__ccfg+0x17cbe8c>
    4e2c:	70220000 	eorvc	r0, r2, r0
    4e30:	03630100 	cmneq	r3, #0, 2
    4e34:	00011631 	andeq	r1, r1, r1, lsr r6
    4e38:	00171c00 	andseq	r1, r7, r0, lsl #24
    4e3c:	68702200 	ldmdavs	r0!, {r9, sp}^
    4e40:	63010079 	movwvs	r0, #4217	; 0x1079
    4e44:	00813803 	addeq	r3, r1, r3, lsl #16
    4e48:	173a0000 	ldrne	r0, [sl, -r0]!
    4e4c:	27000000 	strcs	r0, [r0, -r0]
    4e50:	0018a301 	andseq	sl, r8, r1, lsl #6
    4e54:	035a0100 	cmpeq	sl, #0, 2
    4e58:	00000101 	andeq	r0, r0, r1, lsl #2
    4e5c:	00000000 	andeq	r0, r0, r0
    4e60:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e64:	00000b99 	muleq	r0, r9, fp
    4e68:	01007022 	tsteq	r0, r2, lsr #32
    4e6c:	1631035a 			; <UNDEFINED> instruction: 0x1631035a
    4e70:	58000001 	stmdapl	r0, {r0}
    4e74:	22000017 	andcs	r0, r0, #23
    4e78:	00736573 	rsbseq	r6, r3, r3, ror r5
    4e7c:	38035a01 	stmdacc	r3, {r0, r9, fp, ip, lr}
    4e80:	00000081 	andeq	r0, r0, r1, lsl #1
    4e84:	00001776 	andeq	r1, r0, r6, ror r7
    4e88:	39012c00 	stmdbcc	r1, {sl, fp, sp}
    4e8c:	01000019 	tsteq	r0, r9, lsl r0
    4e90:	01010352 	tsteq	r1, r2, asr r3
    4e94:	00000081 	andeq	r0, r0, r1, lsl #1
    4e98:	000bd501 	andeq	sp, fp, r1, lsl #10
    4e9c:	68702e00 	ldmdavs	r0!, {r9, sl, fp, sp}^
    4ea0:	52010079 	andpl	r0, r1, #121	; 0x79
    4ea4:	00812d03 	addeq	r2, r1, r3, lsl #26
    4ea8:	6f2e0000 	svcvs	0x002e0000
    4eac:	01007470 	tsteq	r0, r0, ror r4
    4eb0:	81360352 	teqhi	r6, r2, asr r3
    4eb4:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4eb8:	00677261 	rsbeq	r7, r7, r1, ror #4
    4ebc:	43035201 	movwmi	r5, #12801	; 0x3201
    4ec0:	00000116 	andeq	r0, r0, r6, lsl r1
    4ec4:	0b012100 	bleq	4d2cc <__ccfg+0x2d324>
    4ec8:	01000017 	tsteq	r0, r7, lsl r0
    4ecc:	01010333 	tsteq	r1, r3, lsr r3
    4ed0:	00000081 	andeq	r0, r0, r1, lsl #1
    4ed4:	00002284 	andeq	r2, r0, r4, lsl #5
    4ed8:	000022e4 	andeq	r2, r0, r4, ror #5
    4edc:	0c3e9c01 	ldceq	12, cr9, [lr], #-4
    4ee0:	66220000 	strtvs	r0, [r2], -r0
    4ee4:	33010064 	movwcc	r0, #4196	; 0x1064
    4ee8:	00812c03 	addeq	r2, r1, r3, lsl #24
    4eec:	17940000 	ldrne	r0, [r4, r0]
    4ef0:	6f220000 	svcvs	0x00220000
    4ef4:	01007470 	tsteq	r0, r0, ror r4
    4ef8:	81340333 	teqhi	r4, r3, lsr r3
    4efc:	d3000000 	movwle	r0, #0
    4f00:	22000017 	andcs	r0, r0, #23
    4f04:	00677261 	rsbeq	r7, r7, r1, ror #4
    4f08:	41033301 	tstmi	r3, r1, lsl #6
    4f0c:	00000116 	andeq	r0, r0, r6, lsl r1
    4f10:	000017fc 	strdeq	r1, [r0], -ip
    4f14:	0022922f 	eoreq	r9, r2, pc, lsr #4
    4f18:	0022a000 	eoreq	sl, r2, r0
    4f1c:	00702800 	rsbseq	r2, r0, r0, lsl #16
    4f20:	15033c01 	strne	r3, [r3, #-3073]	; 0xfffff3ff
    4f24:	000007d4 	ldrdeq	r0, [r0], -r4
    4f28:	00001825 	andeq	r1, r0, r5, lsr #16
    4f2c:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4f30:	00001792 	muleq	r0, r2, r7
    4f34:	01032b01 	tsteq	r3, r1, lsl #22
    4f38:	00000001 	andeq	r0, r0, r1
    4f3c:	00000000 	andeq	r0, r0, r0
    4f40:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    4f44:	2200000c 	andcs	r0, r0, #12
    4f48:	2b010070 	blcs	45110 <__ccfg+0x25168>
    4f4c:	01162e03 	tsteq	r6, r3, lsl #28
    4f50:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    4f54:	21000000 	mrscs	r0, (UNDEF: 0)
    4f58:	00184e01 	andseq	r4, r8, r1, lsl #28
    4f5c:	031a0100 	tsteq	sl, #0, 2
    4f60:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    4f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f70:	00000cc1 	andeq	r0, r0, r1, asr #25
    4f74:	01007022 	tsteq	r0, r2, lsr #32
    4f78:	162e031a 			; <UNDEFINED> instruction: 0x162e031a
    4f7c:	56000001 	strpl	r0, [r0], -r1
    4f80:	22000018 	andcs	r0, r0, #24
    4f84:	00667562 	rsbeq	r7, r6, r2, ror #10
    4f88:	3d031a01 	vstrcc	s2, [r3, #-4]
    4f8c:	00000259 	andeq	r0, r0, r9, asr r2
    4f90:	00001874 	andeq	r1, r0, r4, ror r8
    4f94:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4f98:	031a0100 	tsteq	sl, #0, 2
    4f9c:	00008146 	andeq	r8, r0, r6, asr #2
    4fa0:	00188700 	andseq	r8, r8, r0, lsl #14
    4fa4:	00622900 	rsbeq	r2, r2, r0, lsl #18
    4fa8:	0c031e01 	stceq	14, cr1, [r3], {1}
    4fac:	0000089d 	muleq	r0, sp, r8
    4fb0:	17012100 	strne	r2, [r1, -r0, lsl #2]
    4fb4:	01000017 	tsteq	r0, r7, lsl r0
    4fb8:	01010308 	tsteq	r1, r8, lsl #6
    4fbc:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    4fc8:	0d1b9c01 	ldceq	12, cr9, [fp, #-4]
    4fcc:	70220000 	eorvc	r0, r2, r0
    4fd0:	03080100 	movweq	r0, #33024	; 0x8100
    4fd4:	0001162d 	andeq	r1, r1, sp, lsr #12
    4fd8:	0018a500 	andseq	sl, r8, r0, lsl #10
    4fdc:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    4fe0:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    4fe4:	0d1b3603 	ldceq	6, cr3, [fp, #-12]
    4fe8:	18c30000 	stmiane	r3, {}^	; <UNPREDICTABLE>
    4fec:	6c220000 	stcvs	0, cr0, [r2], #-0
    4ff0:	01006e65 	tsteq	r0, r5, ror #28
    4ff4:	813f0308 	teqhi	pc, r8, lsl #6
    4ff8:	e1000000 	mrs	r0, (UNDEF: 0)
    4ffc:	29000018 	stmdbcs	r0, {r3, r4}
    5000:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    5004:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    5008:	0a000000 	beq	5010 <__aeabi_lmul+0x5e4>
    500c:	0000e304 	andeq	lr, r0, r4, lsl #6
    5010:	45012100 	strmi	r2, [r1, #-256]	; 0xffffff00
    5014:	01000018 	tsteq	r0, r8, lsl r0
    5018:	010102cd 	smlabteq	r1, sp, r2, r0
    501c:	00000116 	andeq	r0, r0, r6, lsl r1
    5020:	0000219c 	muleq	r0, ip, r1
    5024:	00002258 	andeq	r2, r0, r8, asr r2
    5028:	0dbf9c01 	ldceq	12, cr9, [pc, #4]!	; 5034 <__aeabi_lmul+0x608>
    502c:	792b0000 	stmdbvc	fp!, {}	; <UNPREDICTABLE>
    5030:	01000000 	mrseq	r0, (UNDEF: 0)
    5034:	cd2e02cd 	sfmgt	f0, 4, [lr, #-820]!	; 0xfffffccc
    5038:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    503c:	22000018 	andcs	r0, r0, #24
    5040:	01006466 	tsteq	r0, r6, ror #8
    5044:	813902cd 	teqhi	r9, sp, asr #5
    5048:	1d000000 	stcne	0, cr0, [r0, #-0]
    504c:	2b000019 	blcs	50b8 <__aeabi_lmul+0x68c>
    5050:	000018f3 	strdeq	r1, [r0], -r3
    5054:	4102cd01 	tstmi	r2, r1, lsl #26
    5058:	00000081 	andeq	r0, r0, r1, lsl #1
    505c:	00001946 	andeq	r1, r0, r6, asr #18
    5060:	67727522 	ldrbvs	r7, [r2, -r2, lsr #10]!
    5064:	02ce0100 	sbceq	r0, lr, #0, 2
    5068:	0000c111 	andeq	ip, r0, r1, lsl r1
    506c:	00199000 	andseq	r9, r9, r0
    5070:	00622800 	rsbeq	r2, r2, r0, lsl #16
    5074:	0c02cf01 	stceq	15, cr12, [r2], {1}
    5078:	0000089d 	muleq	r0, sp, r8
    507c:	000019a3 	andeq	r1, r0, r3, lsr #19
    5080:	00183730 	andseq	r3, r8, r0, lsr r7
    5084:	02d00100 	sbcseq	r0, r0, #0, 2
    5088:	0003550b 	andeq	r5, r3, fp, lsl #10
    508c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    5090:	0100732a 	tsteq	r0, sl, lsr #6
    5094:	400d02d1 	ldrdmi	r0, [sp], -r1
    5098:	01000007 	tsteq	r0, r7
    509c:	69652857 	stmdbvs	r5!, {r0, r1, r2, r4, r6, fp, sp}^
    50a0:	d2010064 	andle	r0, r1, #100	; 0x64
    50a4:	00810602 	addeq	r0, r1, r2, lsl #12
    50a8:	19c10000 	stmibne	r1, {}^	; <UNPREDICTABLE>
    50ac:	21000000 	mrscs	r0, (UNDEF: 0)
    50b0:	00181401 	andseq	r1, r8, r1, lsl #8
    50b4:	02a40100 	adceq	r0, r4, #0, 2
    50b8:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    50c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    50c8:	00000e72 	andeq	r0, r0, r2, ror lr
    50cc:	00646622 	rsbeq	r6, r4, r2, lsr #12
    50d0:	2a02a401 	bcs	ae0dc <__ccfg+0x8e134>
    50d4:	00000081 	andeq	r0, r0, r1, lsl #1
    50d8:	000019ea 	andeq	r1, r0, sl, ror #19
    50dc:	0018fa2b 	andseq	pc, r8, fp, lsr #20
    50e0:	02a40100 	adceq	r0, r4, #0, 2
    50e4:	00008132 	andeq	r8, r0, r2, lsr r1
    50e8:	001a1e00 	andseq	r1, sl, r0, lsl #28
    50ec:	00732800 	rsbseq	r2, r3, r0, lsl #16
    50f0:	0d02a801 	stceq	8, cr10, [r2, #-4]
    50f4:	00000740 	andeq	r0, r0, r0, asr #14
    50f8:	00001a52 	andeq	r1, r0, r2, asr sl
    50fc:	00716e28 	rsbseq	r6, r1, r8, lsr #28
    5100:	0602a901 	streq	sl, [r2], -r1, lsl #18
    5104:	00000081 	andeq	r0, r0, r1, lsl #1
    5108:	00001ab7 			; <UNDEFINED> instruction: 0x00001ab7
    510c:	00717228 	rsbseq	r7, r1, r8, lsr #4
    5110:	0b02aa01 	bleq	af91c <__ccfg+0x8f974>
    5114:	0000078a 	andeq	r0, r0, sl, lsl #15
    5118:	00001ad5 	ldrdeq	r1, [r0], -r5
    511c:	01006228 	tsteq	r0, r8, lsr #4
    5120:	9d0c02ab 	sfmls	f0, 4, [ip, #-684]	; 0xfffffd54
    5124:	f3000008 	vhadd.u8	d0, d0, d8
    5128:	3100001a 	tstcc	r0, sl, lsl r0
    512c:	00001802 	andeq	r1, r0, r2, lsl #16
    5130:	0102c001 	tsteq	r2, r1
    5134:	00000000 	andeq	r0, r0, r0
    5138:	00114e32 	andseq	r4, r1, r2, lsr lr
	...
    5144:	02bb0100 	adcseq	r0, fp, #0, 2
    5148:	1160330a 	cmnne	r0, sl, lsl #6
    514c:	6b260000 	blvs	985154 <__ccfg+0x9651ac>
    5150:	1c000011 	stcne	0, cr0, [r0], {17}
    5154:	2600001b 			; <UNDEFINED> instruction: 0x2600001b
    5158:	00001176 	andeq	r1, r0, r6, ror r1
    515c:	00001b2f 	andeq	r1, r0, pc, lsr #22
    5160:	01210000 			; <UNDEFINED> instruction: 0x01210000
    5164:	000016e3 	andeq	r1, r0, r3, ror #13
    5168:	01027d01 	tsteq	r2, r1, lsl #26
    516c:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    5178:	ef9c0100 	svc	0x009c0100
    517c:	2200000e 	andcs	r0, r0, #14
    5180:	01006466 	tsteq	r0, r6, ror #8
    5184:	812a027d 			; <UNDEFINED> instruction: 0x812a027d
    5188:	42000000 	andmi	r0, r0, #0
    518c:	2b00001b 	blcs	5200 <port_confs+0x5c>
    5190:	000018fa 	strdeq	r1, [r0], -sl
    5194:	32027d01 	andcc	r7, r2, #1, 26	; 0x40
    5198:	00000081 	andeq	r0, r0, r1, lsl #1
    519c:	00001b76 	andeq	r1, r0, r6, ror fp
    51a0:	01007328 	tsteq	r0, r8, lsr #6
    51a4:	400d0281 	andmi	r0, sp, r1, lsl #5
    51a8:	9f000007 	svcls	0x00000007
    51ac:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    51b0:	0100716e 	tsteq	r0, lr, ror #2
    51b4:	81060282 	smlabbhi	r6, r2, r2, r0
    51b8:	04000000 	streq	r0, [r0], #-0
    51bc:	2800001c 	stmdacs	r0, {r2, r3, r4}
    51c0:	01007172 	tsteq	r0, r2, ror r1
    51c4:	8a0b0283 	bhi	2c5bd8 <__ccfg+0x2a5c30>
    51c8:	22000007 	andcs	r0, r0, #7
    51cc:	2800001c 	stmdacs	r0, {r2, r3, r4}
    51d0:	84010062 	strhi	r0, [r1], #-98	; 0xffffff9e
    51d4:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    51d8:	1c4b0000 	marne	acc0, r0, fp
    51dc:	21000000 	mrscs	r0, (UNDEF: 0)
    51e0:	0018ff01 	andseq	pc, r8, r1, lsl #30
    51e4:	02560100 	subseq	r0, r6, #0, 2
    51e8:	01160101 	tsteq	r6, r1, lsl #2
    51ec:	211c0000 	tstcs	ip, r0
    51f0:	219c0000 	orrscs	r0, ip, r0
    51f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    51f8:	00000f5c 	andeq	r0, r0, ip, asr pc
    51fc:	0000792b 	andeq	r7, r0, fp, lsr #18
    5200:	02560100 	subseq	r0, r6, #0, 2
    5204:	0000cd2d 	andeq	ip, r0, sp, lsr #26
    5208:	001c7f00 	andseq	r7, ip, r0, lsl #30
    520c:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    5210:	02560100 	subseq	r0, r6, #0, 2
    5214:	00008138 	andeq	r8, r0, r8, lsr r1
    5218:	001c9200 	andseq	r9, ip, r0, lsl #4
    521c:	00702800 	rsbseq	r2, r0, r0, lsl #16
    5220:	0a025d01 	beq	9c62c <__ccfg+0x7c684>
    5224:	00000116 	andeq	r0, r0, r6, lsl r1
    5228:	00001cd1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    522c:	01006228 	tsteq	r0, r8, lsr #4
    5230:	9d0c025e 	sfmls	f0, 4, [ip, #-376]	; 0xfffffe88
    5234:	e4000008 	str	r0, [r0], #-8
    5238:	2800001c 	stmdacs	r0, {r2, r3, r4}
    523c:	01007172 	tsteq	r0, r2, ror r1
    5240:	8a0b025f 	bhi	2c5bc4 <__ccfg+0x2a5c1c>
    5244:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    5248:	0000001d 	andeq	r0, r0, sp, lsl r0
    524c:	18ca0121 	stmiane	sl, {r0, r5, r8}^
    5250:	4a010000 	bmi	45258 <__ccfg+0x252b0>
    5254:	81010102 	tsthi	r1, r2, lsl #2
    5258:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    525c:	1c000020 	stcne	0, cr0, [r0], {32}
    5260:	01000021 	tsteq	r0, r1, lsr #32
    5264:	000f999c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
    5268:	726f2200 	rsbvc	r2, pc, #0, 4
    526c:	4a010064 	bmi	45404 <__ccfg+0x2545c>
    5270:	00812902 	addeq	r2, r1, r2, lsl #18
    5274:	1d470000 	stclne	0, cr0, [r7, #-0]
    5278:	70340000 	eorsvc	r0, r4, r0
    527c:	4a01006c 	bmi	45434 <__ccfg+0x2548c>
    5280:	07d43f02 	ldrbeq	r3, [r4, r2, lsl #30]
    5284:	51010000 	mrspl	r0, (UNDEF: 1)
    5288:	58012100 	stmdapl	r1, {r8, sp}
    528c:	01000018 	tsteq	r0, r8, lsl r0
    5290:	01010229 	tsteq	r1, r9, lsr #4
    5294:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    52a0:	0ff69c01 	svceq	0x00f69c01
    52a4:	792b0000 	stmdbvc	fp!, {}	; <UNPREDICTABLE>
    52a8:	01000000 	mrseq	r0, (UNDEF: 0)
    52ac:	cd2b0229 	sfmgt	f0, 4, [fp, #-164]!	; 0xffffff5c
    52b0:	65000000 	strvs	r0, [r0, #-0]
    52b4:	2200001d 	andcs	r0, r0, #29
    52b8:	01006466 	tsteq	r0, r6, ror #8
    52bc:	81360229 	teqhi	r6, r9, lsr #4
    52c0:	83000000 	movwhi	r0, #0
    52c4:	2800001d 	stmdacs	r0, {r0, r2, r3, r4}
    52c8:	2b010073 	blcs	4549c <__ccfg+0x254f4>
    52cc:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    52d0:	1dcd0000 	stclne	0, cr0, [sp]
    52d4:	62280000 	eorvs	r0, r8, #0
    52d8:	022c0100 	eoreq	r0, ip, #0, 2
    52dc:	00089d0c 	andeq	r9, r8, ip, lsl #26
    52e0:	001de000 	andseq	lr, sp, r0
    52e4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    52e8:	00001789 	andeq	r1, r0, r9, lsl #15
    52ec:	0101f601 	tsteq	r1, r1, lsl #12	; <UNPREDICTABLE>
    52f0:	00008101 	andeq	r8, r0, r1, lsl #2
    52f4:	00203800 	eoreq	r3, r0, r0, lsl #16
    52f8:	0020f800 	eoreq	pc, r0, r0, lsl #16
    52fc:	839c0100 	orrshi	r0, ip, #0, 2
    5300:	2b000010 	blcs	5348 <patchGenfskRfe+0xc>
    5304:	00000079 	andeq	r0, r0, r9, ror r0
    5308:	2a01f601 	bcs	82b14 <__ccfg+0x62b6c>
    530c:	000000cd 	andeq	r0, r0, sp, asr #1
    5310:	00001df3 	strdeq	r1, [r0], -r3
    5314:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    5318:	01f60100 	mvnseq	r0, r0, lsl #2
    531c:	00008135 	andeq	r8, r0, r5, lsr r1
    5320:	001e1c00 	andseq	r1, lr, r0, lsl #24
    5324:	18af2b00 	stmiane	pc!, {r8, r9, fp, sp}	; <UNPREDICTABLE>
    5328:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    532c:	00813e01 	addeq	r3, r1, r1, lsl #28
    5330:	1e710000 	cdpne	0, 7, cr0, cr1, cr0, {0}
    5334:	28350000 	ldmdacs	r5!, {}	; <UNPREDICTABLE>
    5338:	01006466 	tsteq	r0, r6, ror #8
    533c:	810601f8 	strdhi	r0, [r6, -r8]
    5340:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    5344:	3600001e 			; <UNDEFINED> instruction: 0x3600001e
    5348:	000017f6 	strdeq	r1, [r0], -r6
    534c:	0a01f901 	beq	83758 <__ccfg+0x637b0>
    5350:	00000556 	andeq	r0, r0, r6, asr r5
    5354:	01007328 	tsteq	r0, r8, lsr #6
    5358:	400d01fa 	strdmi	r0, [sp], -sl
    535c:	c7000007 	strgt	r0, [r0, -r7]
    5360:	2a00001e 	bcs	53e0 <patchGenfskRfe+0xa4>
    5364:	01007061 	tsteq	r0, r1, rrx
    5368:	b50b01fc 	strlt	r0, [fp, #-508]	; 0xfffffe04
    536c:	02000000 	andeq	r0, r0, #0
    5370:	27005491 			; <UNDEFINED> instruction: 0x27005491
    5374:	00181e01 	andseq	r1, r8, r1, lsl #28
    5378:	013b0100 	teqeq	fp, r0, lsl #2
    537c:	1fc80101 	svcne	0x00c80101
    5380:	20380000 	eorscs	r0, r8, r0
    5384:	9c010000 	stcls	0, cr0, [r1], {-0}
    5388:	000010bb 	strheq	r1, [r0], -fp
    538c:	01007022 	tsteq	r0, r2, lsr #32
    5390:	162e013b 			; <UNDEFINED> instruction: 0x162e013b
    5394:	11000001 	tstne	r0, r1
    5398:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    539c:	41010062 	tstmi	r1, r2, rrx
    53a0:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    53a4:	1f3a0000 	svcne	0x003a0000
    53a8:	37000000 	strcc	r0, [r0, -r0]
    53ac:	00627061 	rsbeq	r7, r2, r1, rrx
    53b0:	01011401 	tsteq	r1, r1, lsl #8
    53b4:	00089d01 	andeq	r9, r8, r1, lsl #26
    53b8:	001eb000 	andseq	fp, lr, r0
    53bc:	001ec600 	andseq	ip, lr, r0, lsl #12
    53c0:	029c0100 	addseq	r0, ip, #0, 2
    53c4:	2b000011 	blcs	5410 <patchGenfskRfe+0xd4>
    53c8:	00001da1 	andeq	r1, r0, r1, lsr #27
    53cc:	2b011401 	blcs	4a3d8 <__ccfg+0x2a430>
    53d0:	000000cd 	andeq	r0, r0, sp, asr #1
    53d4:	00001f6e 	andeq	r1, r0, lr, ror #30
    53d8:	0100702a 	tsteq	r0, sl, lsr #32
    53dc:	9d0c0119 	stflss	f0, [ip, #-100]	; 0xffffff9c
    53e0:	01000008 	tsteq	r0, r8
    53e4:	73632950 	cmnvc	r3, #80, 18	; 0x140000
    53e8:	011a0100 	tsteq	sl, r0, lsl #2
    53ec:	0000cd07 	andeq	ip, r0, r7, lsl #26
    53f0:	72380000 	eorsvc	r0, r8, #0
    53f4:	0100706c 	tsteq	r0, ip, rrx
    53f8:	01010104 	tsteq	r1, r4, lsl #2
    53fc:	00001ee0 	andeq	r1, r0, r0, ror #29
    5400:	00001eee 	andeq	r1, r0, lr, ror #29
    5404:	112a9c01 			; <UNDEFINED> instruction: 0x112a9c01
    5408:	70220000 	eorvc	r0, r2, r0
    540c:	01040100 	mrseq	r0, (UNDEF: 20)
    5410:	00089d2b 	andeq	r9, r8, fp, lsr #26
    5414:	001f8100 	andseq	r8, pc, r0, lsl #2
    5418:	25390000 	ldrcs	r0, [r9, #-0]!
    541c:	01000017 	tsteq	r0, r7, lsl r0
    5420:	010101e0 	smlatteq	r1, r0, r1, r0
    5424:	0000114e 	andeq	r1, r0, lr, asr #2
    5428:	0100703a 	tsteq	r0, sl, lsr r0
    542c:	089d2fe0 	ldmeq	sp, {r5, r6, r7, r8, r9, sl, fp, sp}
    5430:	643a0000 	ldrtvs	r0, [sl], #-0
    5434:	e0010076 	and	r0, r1, r6, ror r0
    5438:	00008136 	andeq	r8, r0, r6, lsr r1
    543c:	a43b0000 	ldrtge	r0, [fp], #-0
    5440:	01000017 	tsteq	r0, r7, lsl r0
    5444:	810101cf 	smlabthi	r1, pc, r1, r0	; <UNPREDICTABLE>
    5448:	01000000 	mrseq	r0, (UNDEF: 0)
    544c:	00001181 	andeq	r1, r0, r1, lsl #3
    5450:	00716f3a 	rsbseq	r6, r1, sl, lsr pc
    5454:	8a2bcf01 	bhi	af9060 <__ccfg+0xad90b8>
    5458:	3c000007 	stccc	0, cr0, [r0], {7}
    545c:	0100716e 	tsteq	r0, lr, ror #2
    5460:	008106d3 	ldrdeq	r0, [r1], r3
    5464:	623c0000 	eorsvs	r0, ip, #0
    5468:	0cd40100 	ldfeqe	f0, [r4], {0}
    546c:	0000089d 	muleq	r0, sp, r8
    5470:	6e653d00 	cdpvs	13, 6, cr3, cr5, cr0, {0}
    5474:	a8010071 	stmdage	r1, {r0, r4, r5, r6}
    5478:	a4010101 	strge	r0, [r1], #-257	; 0xfffffeff
    547c:	3a000011 	bcc	54c8 <patchGenfskRfe+0x18c>
    5480:	a8010071 	stmdage	r1, {r0, r4, r5, r6}
    5484:	00078a2a 	andeq	r8, r7, sl, lsr #20
    5488:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    548c:	9d37a801 	ldcls	8, cr10, [r7, #-4]!
    5490:	00000008 	andeq	r0, r0, r8
    5494:	7165643d 	cmnvc	r5, sp, lsr r4
    5498:	017f0100 	cmneq	pc, r0, lsl #2
    549c:	11bd0101 			; <UNDEFINED> instruction: 0x11bd0101
    54a0:	703a0000 	eorsvc	r0, sl, r0
    54a4:	2b7f0100 	blcs	1fc58ac <__ccfg+0x1fa5904>
    54a8:	0000089d 	muleq	r0, sp, r8
    54ac:	11a43e00 			; <UNDEFINED> instruction: 0x11a43e00
    54b0:	1ec60000 	cdpne	0, 12, cr0, cr6, cr0, {0}
    54b4:	1ee00000 	cdpne	0, 14, cr0, cr0, cr0, {0}
    54b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    54bc:	000011f2 	strdeq	r1, [r0], -r2
    54c0:	0011b23f 	andseq	fp, r1, pc, lsr r2
    54c4:	40500100 	subsmi	r0, r0, r0, lsl #2
    54c8:	000011a4 	andeq	r1, r0, r4, lsr #3
    54cc:	00001ecc 	andeq	r1, r0, ip, asr #29
    54d0:	00001ede 	ldrdeq	r1, [r0], -lr
    54d4:	24017f01 	strcs	r7, [r1], #-3841	; 0xfffff0ff
    54d8:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    54dc:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    54e0:	813e0000 	teqhi	lr, r0
    54e4:	f0000011 			; <UNDEFINED> instruction: 0xf0000011
    54e8:	3c00001e 	stccc	0, cr0, [r0], {30}
    54ec:	0100001f 	tsteq	r0, pc, lsl r0
    54f0:	00123b9c 	mulseq	r2, ip, fp
    54f4:	118f2400 	orrne	r2, pc, r0, lsl #8
    54f8:	1fa70000 	svcne	0x00a70000
    54fc:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    5500:	db000011 	blle	554c <patchGenfskRfe+0x210>
    5504:	4000001f 	andmi	r0, r0, pc, lsl r0
    5508:	00001181 	andeq	r1, r0, r1, lsl #3
    550c:	00001efc 	strdeq	r1, [r0], -ip
    5510:	00001f04 	andeq	r1, r0, r4, lsl #30
    5514:	2401a801 	strcs	sl, [r1], #-2049	; 0xfffff7ff
    5518:	0000118f 	andeq	r1, r0, pc, lsl #3
    551c:	0000200f 	andeq	r2, r0, pc
    5520:	00119924 	andseq	r9, r1, r4, lsr #18
    5524:	00202d00 	eoreq	r2, r0, r0, lsl #26
    5528:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    552c:	0000112a 	andeq	r1, r0, sl, lsr #2
    5530:	00001f3c 	andeq	r1, r0, ip, lsr pc
    5534:	00001fc8 	andeq	r1, r0, r8, asr #31
    5538:	12809c01 	addne	r9, r0, #256	; 0x100
    553c:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    5540:	4b000011 	blmi	558c <patchGenfskRfe+0x250>
    5544:	24000020 	strcs	r0, [r0], #-32	; 0xffffffe0
    5548:	00001142 	andeq	r1, r0, r2, asr #2
    554c:	000020a0 	andeq	r2, r0, r0, lsr #1
    5550:	00112a41 	andseq	r2, r1, r1, asr #20
    5554:	001f7000 	andseq	r7, pc, r0
    5558:	0008d800 	andeq	sp, r8, r0, lsl #16
    555c:	01e00100 	mvneq	r0, r0, lsl #2
    5560:	00114233 	andseq	r4, r1, r3, lsr r2
    5564:	11382400 	teqne	r8, r0, lsl #8
    5568:	20b30000 	adcscs	r0, r3, r0
    556c:	00000000 	andeq	r0, r0, r0
    5570:	000b993e 	andeq	r9, fp, lr, lsr r9
    5574:	00225800 	eoreq	r5, r2, r0, lsl #16
    5578:	00228400 	eoreq	r8, r2, r0, lsl #8
    557c:	d89c0100 	ldmle	ip, {r8}
    5580:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    5584:	00000bad 	andeq	r0, r0, sp, lsr #23
    5588:	000020d1 	ldrdeq	r2, [r0], -r1
    558c:	000bba24 	andeq	fp, fp, r4, lsr #20
    5590:	0020ef00 	eoreq	lr, r0, r0, lsl #30
    5594:	0bc72400 	bleq	ff1ce59c <_estack+0xdf1c959c>
    5598:	21180000 	tstcs	r8, r0
    559c:	99320000 	ldmdbls	r2!, {}	; <UNPREDICTABLE>
    55a0:	6c00000b 	stcvs	0, cr0, [r0], {11}
    55a4:	74000022 	strvc	r0, [r0], #-34	; 0xffffffde
    55a8:	01000022 	tsteq	r0, r2, lsr #32
    55ac:	33010352 	movwcc	r0, #4946	; 0x1352
    55b0:	00000bad 	andeq	r0, r0, sp, lsr #23
    55b4:	000bba24 	andeq	fp, fp, r4, lsr #20
    55b8:	00214100 	eoreq	r4, r1, r0, lsl #2
    55bc:	0bc72400 	bleq	ff1ce5c4 <_estack+0xdf1c95c4>
    55c0:	21540000 	cmpcs	r4, r0
    55c4:	00000000 	andeq	r0, r0, r0
    55c8:	000a4a42 	andeq	r4, sl, r2, asr #20
    55cc:	0022e400 	eoreq	lr, r2, r0, lsl #8
    55d0:	00234c00 	eoreq	r4, r3, r0, lsl #24
    55d4:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    55d8:	00000a5e 	andeq	r0, r0, lr, asr sl
    55dc:	00002167 	andeq	r2, r0, r7, ror #2
    55e0:	000a6b24 	andeq	r6, sl, r4, lsr #22
    55e4:	00217a00 	eoreq	r7, r1, r0, lsl #20
    55e8:	0a782400 	beq	1e0e5f0 <__ccfg+0x1dee648>
    55ec:	21da0000 	bicscs	r0, sl, r0
    55f0:	85260000 	strhi	r0, [r6, #-0]!
    55f4:	2400000a 	strcs	r0, [r0], #-10
    55f8:	32000022 	andcc	r0, r0, #34	; 0x22
    55fc:	00000a4a 	andeq	r0, r0, sl, asr #20
    5600:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    5604:	000022f6 	strdeq	r2, [r0], -r6
    5608:	01038601 	tsteq	r3, r1, lsl #12
    560c:	000a5e33 	andeq	r5, sl, r3, lsr lr
    5610:	0a6b2400 	beq	1ace618 <__ccfg+0x1aae670>
    5614:	22580000 	subscs	r0, r8, #0
    5618:	78330000 	ldmdavc	r3!, {}	; <UNPREDICTABLE>
    561c:	4300000a 	movwmi	r0, #10
    5620:	00000a85 	andeq	r0, r0, r5, lsl #21
    5624:	74000000 	strvc	r0, [r0], #-0
    5628:	03000001 	movweq	r0, #1
    562c:	00123d00 	andseq	r3, r2, r0, lsl #26
    5630:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    5634:	0c000000 	stceq	0, cr0, [r0], {-0}
    5638:	00001981 	andeq	r1, r0, r1, lsl #19
    563c:	00000e0a 	andeq	r0, r0, sl, lsl #28
    5640:	00000a08 	andeq	r0, r0, r8, lsl #20
    5644:	00000000 	andeq	r0, r0, r0
    5648:	00003e85 	andeq	r3, r0, r5, lsl #29
    564c:	5d060102 	stfpls	f0, [r6, #-8]
    5650:	0200000c 	andeq	r0, r0, #12
    5654:	0a6b0502 	beq	1ac6a64 <__ccfg+0x1aa6abc>
    5658:	04020000 	streq	r0, [r2], #-0
    565c:	0007fd05 	andeq	pc, r7, r5, lsl #26
    5660:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5664:	000007f8 	strdeq	r0, [r0], -r8
    5668:	5b080102 	blpl	205a78 <__ccfg+0x1e5ad0>
    566c:	0200000c 	andeq	r0, r0, #12
    5670:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    5674:	b4030000 	strlt	r0, [r3], #-0
    5678:	02000029 	andeq	r0, r0, #41	; 0x29
    567c:	005b1934 	subseq	r1, fp, r4, lsr r9
    5680:	04020000 	streq	r0, [r2], #-0
    5684:	00042607 	andeq	r2, r4, r7, lsl #12
    5688:	07080200 	streq	r0, [r8, -r0, lsl #4]
    568c:	00000421 	andeq	r0, r0, r1, lsr #8
    5690:	69050404 	stmdbvs	r5, {r2, sl}
    5694:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5698:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    569c:	04050000 	streq	r0, [r5], #-0
    56a0:	00000082 	andeq	r0, r0, r2, lsl #1
    56a4:	00007706 	andeq	r7, r0, r6, lsl #14
    56a8:	05010700 	streq	r0, [r1, #-1792]	; 0xfffff900
    56ac:	00004f04 	andeq	r4, r0, r4, lsl #30
    56b0:	19740800 	ldmdbne	r4!, {fp}^
    56b4:	7f010000 	svcvc	0x00010000
    56b8:	00004f11 	andeq	r4, r0, r1, lsl pc
    56bc:	08010100 	stmdaeq	r1, {r8}
    56c0:	00004753 	andeq	r4, r0, r3, asr r7
    56c4:	4f118001 	svcmi	0x00118001
    56c8:	01000000 	mrseq	r0, (UNDEF: 0)
    56cc:	19c50801 	stmibne	r5, {r0, fp}^
    56d0:	81010000 	mrshi	r0, (UNDEF: 1)
    56d4:	00004f11 	andeq	r4, r0, r1, lsl pc
    56d8:	08010100 	stmdaeq	r1, {r8}
    56dc:	000019c0 	andeq	r1, r0, r0, asr #19
    56e0:	4f118201 	svcmi	0x00118201
    56e4:	01000000 	mrseq	r0, (UNDEF: 0)
    56e8:	197b0801 	ldmdbne	fp!, {r0, fp}^
    56ec:	83010000 	movwhi	r0, #4096	; 0x1000
    56f0:	00004f11 	andeq	r4, r0, r1, lsl pc
    56f4:	08010100 	stmdaeq	r1, {r8}
    56f8:	00001946 	andeq	r1, r0, r6, asr #18
    56fc:	4f118401 	svcmi	0x00118401
    5700:	01000000 	mrseq	r0, (UNDEF: 0)
    5704:	007d0901 	rsbseq	r0, sp, r1, lsl #18
    5708:	00ee0000 	rsceq	r0, lr, r0
    570c:	700a0000 	andvc	r0, sl, r0
    5710:	31000000 	mrscc	r0, (UNDEF: 0)
    5714:	00de0600 	sbcseq	r0, lr, r0, lsl #12
    5718:	de0b0000 	cdple	0, 0, cr0, cr11, cr0, {0}
    571c:	01000019 	tsteq	r0, r9, lsl r0
    5720:	00ee0f8e 	rsceq	r0, lr, lr, lsl #31
    5724:	05010000 	streq	r0, [r1, #-0]
    5728:	00000003 	andeq	r0, r0, r3
    572c:	19cc0c00 	stmibne	ip, {sl, fp}^
    5730:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    5734:	ee010101 	adfs	f0, f1, f1
    5738:	f0000024 			; <UNDEFINED> instruction: 0xf0000024
    573c:	01000024 	tsteq	r0, r4, lsr #32
    5740:	19570c9c 	ldmdbne	r7, {r2, r3, r4, r7, sl, fp}^
    5744:	16010000 	strne	r0, [r1], -r0
    5748:	ec010101 	stfs	f0, [r1], {1}
    574c:	ee000024 	cdp	0, 0, cr0, cr0, cr4, {1}
    5750:	01000024 	tsteq	r0, r4, lsr #32
    5754:	19670c9c 	stmdbne	r7!, {r2, r3, r4, r7, sl, fp}^
    5758:	04010000 	streq	r0, [r1], #-0
    575c:	ea010101 	b	45b68 <__ccfg+0x25bc0>
    5760:	ec000024 	stc	0, cr0, [r0], {36}	; 0x24
    5764:	01000024 	tsteq	r0, r4, lsr #32
    5768:	f5010d9c 			; <UNDEFINED> instruction: 0xf5010d9c
    576c:	01000019 	tsteq	r0, r9, lsl r0
    5770:	f00101d2 			; <UNDEFINED> instruction: 0xf00101d2
    5774:	34000024 	strcc	r0, [r0], #-36	; 0xffffffdc
    5778:	01000025 	tsteq	r0, r5, lsr #32
    577c:	194e0e9c 	stmdbne	lr, {r2, r3, r4, r7, r9, sl, fp}^
    5780:	d4010000 	strle	r0, [r1], #-0
    5784:	0000840f 	andeq	r8, r0, pc, lsl #8
    5788:	00226b00 	eoreq	r6, r2, r0, lsl #22
    578c:	19eb0e00 	stmibne	fp!, {r9, sl, fp}^
    5790:	d4010000 	strle	r0, [r1], #-0
    5794:	0000841a 	andeq	r8, r0, sl, lsl r4
    5798:	00228900 	eoreq	r8, r2, r0, lsl #18
    579c:	37000000 	strcc	r0, [r0, -r0]
    57a0:	03000005 	movweq	r0, #5
    57a4:	00130200 	andseq	r0, r3, r0, lsl #4
    57a8:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    57ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    57b0:	00001a8d 	andeq	r1, r0, sp, lsl #21
    57b4:	00000e0a 	andeq	r0, r0, sl, lsl #28
    57b8:	00003fad 	andeq	r3, r0, sp, lsr #31
    57bc:	5d060102 	stfpls	f0, [r6, #-8]
    57c0:	0200000c 	andeq	r0, r0, #12
    57c4:	0a6b0502 	beq	1ac6bd4 <__ccfg+0x1aa6c2c>
    57c8:	04020000 	streq	r0, [r2], #-0
    57cc:	0007fd05 	andeq	pc, r7, r5, lsl #26
    57d0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    57d4:	000007f8 	strdeq	r0, [r0], -r8
    57d8:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    57dc:	182e0100 	stmdane	lr!, {r8}
    57e0:	00000045 	andeq	r0, r0, r5, asr #32
    57e4:	5b080102 	blpl	205bf4 <__ccfg+0x1e5c4c>
    57e8:	0300000c 	movweq	r0, #12
    57ec:	00002e12 	andeq	r2, r0, r2, lsl lr
    57f0:	58193101 	ldmdapl	r9, {r0, r8, ip, sp}
    57f4:	02000000 	andeq	r0, r0, #0
    57f8:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    57fc:	b4030000 	strlt	r0, [r3], #-0
    5800:	01000029 	tsteq	r0, r9, lsr #32
    5804:	006b1934 	rsbeq	r1, fp, r4, lsr r9
    5808:	04020000 	streq	r0, [r2], #-0
    580c:	00042607 	andeq	r2, r4, r7, lsl #12
    5810:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5814:	00000421 	andeq	r0, r0, r1, lsr #8
    5818:	69050404 	stmdbvs	r5, {r2, sl}
    581c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5820:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    5824:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    5828:	af092f02 	svcge	0x00092f02
    582c:	06000001 	streq	r0, [r0], -r1
    5830:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
    5834:	5f103102 	svcpl	0x00103102
    5838:	00000000 	andeq	r0, r0, r0
    583c:	001ac506 	andseq	ip, sl, r6, lsl #10
    5840:	10320200 	eorsne	r0, r2, r0, lsl #4
    5844:	0000005f 	andeq	r0, r0, pc, asr r0
    5848:	1a550604 	bne	1547060 <__ccfg+0x15270b8>
    584c:	33020000 	movwcc	r0, #8192	; 0x2000
    5850:	00005f10 	andeq	r5, r0, r0, lsl pc
    5854:	3f060800 	svccc	0x00060800
    5858:	0200001a 	andeq	r0, r0, #26
    585c:	005f1034 	subseq	r1, pc, r4, lsr r0	; <UNPREDICTABLE>
    5860:	060c0000 	streq	r0, [ip], -r0
    5864:	000019fe 	strdeq	r1, [r0], -lr
    5868:	5f103502 	svcpl	0x00103502
    586c:	10000000 	andne	r0, r0, r0
    5870:	001a0f06 	andseq	r0, sl, r6, lsl #30
    5874:	10360200 	eorsne	r0, r6, r0, lsl #4
    5878:	0000005f 	andeq	r0, r0, pc, asr r0
    587c:	1a2f0614 	bne	bc70d4 <__ccfg+0xba712c>
    5880:	37020000 	strcc	r0, [r2, -r0]
    5884:	00005f10 	andeq	r5, r0, r0, lsl pc
    5888:	55061800 	strpl	r1, [r6, #-2048]	; 0xfffff800
    588c:	0200001b 	andeq	r0, r0, #27
    5890:	005f1038 	subseq	r1, pc, r8, lsr r0	; <UNPREDICTABLE>
    5894:	061c0000 	ldreq	r0, [ip], -r0
    5898:	00001a6d 	andeq	r1, r0, sp, ror #20
    589c:	5f103902 	svcpl	0x00103902
    58a0:	20000000 	andcs	r0, r0, r0
    58a4:	001a7d06 	andseq	r7, sl, r6, lsl #26
    58a8:	103a0200 	eorsne	r0, sl, r0, lsl #4
    58ac:	0000005f 	andeq	r0, r0, pc, asr r0
    58b0:	1b7b0624 	blne	1ec7148 <__ccfg+0x1ea71a0>
    58b4:	3b020000 	blcc	858bc <__ccfg+0x65914>
    58b8:	00005f10 	andeq	r5, r0, r0, lsl pc
    58bc:	8b062800 	blhi	18f8c4 <__ccfg+0x16f91c>
    58c0:	0200001b 	andeq	r0, r0, #27
    58c4:	005f103c 	subseq	r1, pc, ip, lsr r0	; <UNPREDICTABLE>
    58c8:	062c0000 	strteq	r0, [ip], -r0
    58cc:	00001a20 	andeq	r1, r0, r0, lsr #20
    58d0:	5f103d02 	svcpl	0x00103d02
    58d4:	30000000 	andcc	r0, r0, r0
    58d8:	001b1b06 	andseq	r1, fp, r6, lsl #22
    58dc:	103e0200 	eorsne	r0, lr, r0, lsl #4
    58e0:	0000005f 	andeq	r0, r0, pc, asr r0
    58e4:	1bc00634 	blne	ff0071bc <_estack+0xdf0021bc>
    58e8:	3f020000 	svccc	0x00020000
    58ec:	00005f10 	andeq	r5, r0, r0, lsl pc
    58f0:	d6063800 	strle	r3, [r6], -r0, lsl #16
    58f4:	0200001a 	andeq	r0, r0, #26
    58f8:	005f1040 	subseq	r1, pc, r0, asr #32
    58fc:	063c0000 	ldrteq	r0, [ip], -r0
    5900:	00001aea 	andeq	r1, r0, sl, ror #21
    5904:	5f104102 	svcpl	0x00104102
    5908:	40000000 	andmi	r0, r0, r0
    590c:	001b3f06 	andseq	r3, fp, r6, lsl #30
    5910:	10420200 	subne	r0, r2, r0, lsl #4
    5914:	0000005f 	andeq	r0, r0, pc, asr r0
    5918:	1b2b0644 	blne	ac7230 <__ccfg+0xaa7288>
    591c:	43020000 	movwmi	r0, #8192	; 0x2000
    5920:	00005f10 	andeq	r5, r0, r0, lsl pc
    5924:	66064800 	strvs	r4, [r6], -r0, lsl #16
    5928:	0200001b 	andeq	r0, r0, #27
    592c:	005f1044 	subseq	r1, pc, r4, asr #32
    5930:	064c0000 	strbeq	r0, [ip], -r0
    5934:	00001b9b 	muleq	r0, fp, fp
    5938:	5f104502 	svcpl	0x00104502
    593c:	50000000 	andpl	r0, r0, r0
    5940:	001b0506 	andseq	r0, fp, r6, lsl #10
    5944:	10460200 	subne	r0, r6, r0, lsl #4
    5948:	0000005f 	andeq	r0, r0, pc, asr r0
    594c:	fe030054 	mcr2	0, 0, r0, cr3, cr4, {2}
    5950:	0200001a 	andeq	r0, r0, #26
    5954:	00870347 	addeq	r0, r7, r7, asr #6
    5958:	af070000 	svcge	0x00070000
    595c:	08000001 	stmdaeq	r0, {r0}
    5960:	00001a4e 	andeq	r1, r0, lr, asr #20
    5964:	bb154e02 	bllt	559174 <__ccfg+0x5391cc>
    5968:	01000001 	tsteq	r0, r1
    596c:	28fb0301 	ldmcs	fp!, {r0, r8, r9}^
    5970:	27030000 	strcs	r0, [r3, -r0]
    5974:	00004c12 	andeq	r4, r0, r2, lsl ip
    5978:	01ce0700 	biceq	r0, lr, r0, lsl #14
    597c:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    5980:	03000001 	movweq	r0, #1
    5984:	00001dc2 	andeq	r1, r0, r2, asr #27
    5988:	39122b03 	ldmdbcc	r2, {r0, r1, r8, r9, fp, sp}
    598c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5990:	000001e4 	andeq	r0, r0, r4, ror #3
    5994:	00294d03 	eoreq	r4, r9, r3, lsl #26
    5998:	122c0300 	eorne	r0, ip, #0, 6
    599c:	0000005f 	andeq	r0, r0, pc, asr r0
    59a0:	0001f507 	andeq	pc, r1, r7, lsl #10
    59a4:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    59a8:	2d030000 	stccs	0, cr0, [r3, #-0]
    59ac:	00005f12 	andeq	r5, r0, r2, lsl pc
    59b0:	03080500 	movweq	r0, #34048	; 0x8500
    59b4:	02a00932 	adceq	r0, r0, #819200	; 0xc8000
    59b8:	340a0000 	strcc	r0, [sl], #-0
    59bc:	03000000 	movweq	r0, #0
    59c0:	01e40734 	mvneq	r0, r4, lsr r7
    59c4:	01010000 	mrseq	r0, (UNDEF: 1)
    59c8:	4c0a0007 	stcmi	0, cr0, [sl], {7}
    59cc:	03000006 	movweq	r0, #6
    59d0:	01e40335 	mvneq	r0, r5, lsr r3
    59d4:	01010000 	mrseq	r0, (UNDEF: 1)
    59d8:	e70a0006 	str	r0, [sl, -r6]
    59dc:	03000002 	movweq	r0, #2
    59e0:	01e40336 	mvneq	r0, r6, lsr r3
    59e4:	01010000 	mrseq	r0, (UNDEF: 1)
    59e8:	b70a0005 	strlt	r0, [sl, -r5]
    59ec:	03000006 	movweq	r0, #6
    59f0:	01e40337 	mvneq	r0, r7, lsr r3
    59f4:	01010000 	mrseq	r0, (UNDEF: 1)
    59f8:	9f0a0004 	svcls	0x000a0004
    59fc:	0300000a 	movweq	r0, #10
    5a00:	01e40338 	mvneq	r0, r8, lsr r3
    5a04:	04010000 	streq	r0, [r1], #-0
    5a08:	5b060000 	blpl	185a10 <__ccfg+0x165a68>
    5a0c:	03000006 	movweq	r0, #6
    5a10:	01e4073a 	mvneq	r0, sl, lsr r7
    5a14:	06010000 	streq	r0, [r1], -r0
    5a18:	000008fb 	strdeq	r0, [r0], -fp
    5a1c:	e4033c03 	str	r3, [r3], #-3075	; 0xfffff3fd
    5a20:	02000001 	andeq	r0, r0, #1
    5a24:	000f3a06 	andeq	r3, pc, r6, lsl #20
    5a28:	033d0300 	teqeq	sp, #0, 6
    5a2c:	000001e4 	andeq	r0, r0, r4, ror #3
    5a30:	09130603 	ldmdbeq	r3, {r0, r1, r9, sl}
    5a34:	3f030000 	svccc	0x00030000
    5a38:	0001f508 	andeq	pc, r1, r8, lsl #10
    5a3c:	03000400 	movweq	r0, #1024	; 0x400
    5a40:	0000031d 	andeq	r0, r0, sp, lsl r3
    5a44:	12034103 	andne	r4, r3, #-1073741824	; 0xc0000000
    5a48:	09000002 	stmdbeq	r0, {r1}
    5a4c:	000002a0 	andeq	r0, r0, r0, lsr #5
    5a50:	0006be08 	andeq	fp, r6, r8, lsl #28
    5a54:	1a430300 	bne	10c665c <__ccfg+0x10a66b4>
    5a58:	000002ac 	andeq	r0, r0, ip, lsr #5
    5a5c:	a0080101 	andge	r0, r8, r1, lsl #2
    5a60:	03000001 	movweq	r0, #1
    5a64:	02cd0e45 	sbceq	r0, sp, #1104	; 0x450
    5a68:	01010000 	mrseq	r0, (UNDEF: 1)
    5a6c:	02d3040b 	sbcseq	r0, r3, #184549376	; 0xb000000
    5a70:	01020000 	mrseq	r0, (UNDEF: 2)
    5a74:	000c6408 	andeq	r6, ip, r8, lsl #8
    5a78:	02d30700 	sbcseq	r0, r3, #0, 14
    5a7c:	26080000 	strcs	r0, [r8], -r0
    5a80:	03000003 	movweq	r0, #3
    5a84:	02cd1e45 	sbceq	r1, sp, #1104	; 0x450
    5a88:	01010000 	mrseq	r0, (UNDEF: 1)
    5a8c:	8f040805 	svchi	0x00040805
    5a90:	00031e09 	andeq	r1, r3, r9, lsl #28
    5a94:	0cd80600 	ldcleq	6, cr0, [r8], {0}
    5a98:	90040000 	andls	r0, r4, r0
    5a9c:	00005f0b 	andeq	r5, r0, fp, lsl #30
    5aa0:	75060000 	strvc	r0, [r6, #-0]
    5aa4:	04000010 	streq	r0, [r0], #-16
    5aa8:	01ce0891 			; <UNDEFINED> instruction: 0x01ce0891
    5aac:	06040000 	streq	r0, [r4], -r0
    5ab0:	000001c5 	andeq	r0, r0, r5, asr #3
    5ab4:	f0109204 			; <UNDEFINED> instruction: 0xf0109204
    5ab8:	06000001 	streq	r0, [r0], -r1
    5abc:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    5ac0:	93040000 	movwls	r0, #16384	; 0x4000
    5ac4:	0002ed03 	andeq	lr, r2, r3, lsl #26
    5ac8:	031e0c00 	tsteq	lr, #0, 24
    5acc:	03350000 	teqeq	r5, #0
    5ad0:	000d0000 	andeq	r0, sp, r0
    5ad4:	00093d08 	andeq	r3, r9, r8, lsl #26
    5ad8:	0f990400 	svceq	0x00990400
    5adc:	0000032a 	andeq	r0, r0, sl, lsr #6
    5ae0:	01050101 	tsteq	r5, r1, lsl #2
    5ae4:	6d099105 	stfvsd	f1, [r9, #-20]	; 0xffffffec
    5ae8:	0a000003 	beq	5afc <patchImageGenfsk+0x10c>
    5aec:	0000091a 	andeq	r0, r0, sl, lsl r9
    5af0:	e4079305 	str	r9, [r7], #-773	; 0xfffffcfb
    5af4:	01000001 	tsteq	r0, r1
    5af8:	0a000107 	beq	5f1c <__exidx_end+0x25c>
    5afc:	000005cc 	andeq	r0, r0, ip, asr #11
    5b00:	e4039405 	str	r9, [r3], #-1029	; 0xfffffbfb
    5b04:	01000001 	tsteq	r0, r1
    5b08:	00000001 	andeq	r0, r0, r1
    5b0c:	000aab03 	andeq	sl, sl, r3, lsl #22
    5b10:	03960500 	orrseq	r0, r6, #0, 10
    5b14:	00000343 	andeq	r0, r0, r3, asr #6
    5b18:	00036d07 	andeq	r6, r3, r7, lsl #26
    5b1c:	03790c00 	cmneq	r9, #0, 24
    5b20:	03890000 	orreq	r0, r9, #0
    5b24:	000d0000 	andeq	r0, sp, r0
    5b28:	00037e07 	andeq	r7, r3, r7, lsl #28
    5b2c:	03aa0800 			; <UNDEFINED> instruction: 0x03aa0800
    5b30:	9c050000 	stcls	0, cr0, [r5], {-0}
    5b34:	00038917 	andeq	r8, r3, r7, lsl r9
    5b38:	0c010100 	stfeqs	f0, [r1], {-0}
    5b3c:	000001da 	ldrdeq	r0, [r0], -sl
    5b40:	000003a7 	andeq	r0, r0, r7, lsr #7
    5b44:	9c07000d 	stcls	0, cr0, [r7], {13}
    5b48:	08000003 	stmdaeq	r0, {r0, r1}
    5b4c:	0000060e 	andeq	r0, r0, lr, lsl #12
    5b50:	a7130606 	ldrge	r0, [r3, -r6, lsl #12]
    5b54:	01000003 	tsteq	r0, r3
    5b58:	08dd0801 	ldmeq	sp, {r0, fp}^
    5b5c:	c3040000 	movwgt	r0, #16384	; 0x4000
    5b60:	0001f50e 	andeq	pc, r1, lr, lsl #10
    5b64:	0e010100 	adfeqs	f0, f1, f0
    5b68:	00000c72 	andeq	r0, r0, r2, ror ip
    5b6c:	10016e07 	andne	r6, r1, r7, lsl #28
    5b70:	000003d5 	ldrdeq	r0, [r0], -r5
    5b74:	03db040b 	bicseq	r0, fp, #184549376	; 0xb000000
    5b78:	010f0000 	mrseq	r0, CPSR
    5b7c:	000003e7 	andeq	r0, r0, r7, ror #7
    5b80:	0001ce10 	andeq	ip, r1, r0, lsl lr
    5b84:	da0c0000 	ble	305b8c <__ccfg+0x2e5be4>
    5b88:	f2000002 	vhadd.s8	d0, d0, d2
    5b8c:	0d000003 	stceq	0, cr0, [r0, #-12]
    5b90:	03e70700 	mvneq	r0, #0, 14
    5b94:	e6110000 	ldr	r0, [r1], -r0
    5b98:	07000009 	streq	r0, [r0, -r9]
    5b9c:	f216017f 	vbic	q0, q3, <illegal reg q15.5>
    5ba0:	01000003 	tsteq	r0, r3
    5ba4:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    5ba8:	82070000 	andhi	r0, r7, #0
    5bac:	02011401 	andeq	r1, r1, #16777216	; 0x1000000
    5bb0:	01010000 	mrseq	r0, (UNDEF: 1)
    5bb4:	00036e11 	andeq	r6, r3, r1, lsl lr
    5bb8:	02d80700 	sbcseq	r0, r8, #0, 14
    5bbc:	0001f50e 	andeq	pc, r1, lr, lsl #10
    5bc0:	12010100 	andne	r0, r1, #0, 2
    5bc4:	03030708 	movweq	r0, #14088	; 0x3708
    5bc8:	00044b09 	andeq	r4, r4, r9, lsl #22
    5bcc:	3ca11300 	stccc	3, cr1, [r1]
    5bd0:	07070000 	streq	r0, [r7, -r0]
    5bd4:	01ce0703 	biceq	r0, lr, r3, lsl #14
    5bd8:	13000000 	movwne	r0, #0
    5bdc:	00000fcd 	andeq	r0, r0, sp, asr #31
    5be0:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    5be4:	00000206 	andeq	r0, r0, r6, lsl #4
    5be8:	090e0004 	stmdbeq	lr, {r2}
    5bec:	0700000a 	streq	r0, [r0, -sl]
    5bf0:	24030309 	strcs	r0, [r3], #-777	; 0xfffffcf7
    5bf4:	14000004 	strne	r0, [r0], #-4
    5bf8:	00000029 	andeq	r0, r0, r9, lsr #32
    5bfc:	030b0730 	movweq	r0, #46896	; 0xb730
    5c00:	0004bb08 	andeq	fp, r4, r8, lsl #22
    5c04:	1f241300 	svcne	0x00241300
    5c08:	14070000 	strne	r0, [r7], #-0
    5c0c:	01ce0803 	biceq	r0, lr, r3, lsl #16
    5c10:	13000000 	movwne	r0, #0
    5c14:	00000be7 	andeq	r0, r0, r7, ror #23
    5c18:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    5c1c:	000001ce 	andeq	r0, r0, lr, asr #3
    5c20:	4c8e1302 	stcmi	3, cr1, [lr], {2}
    5c24:	16070000 	strne	r0, [r7], -r0
    5c28:	03c80b03 	biceq	r0, r8, #3072	; 0xc00
    5c2c:	13040000 	movwne	r0, #16384	; 0x4000
    5c30:	00004754 	andeq	r4, r0, r4, asr r7
    5c34:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    5c38:	00000206 	andeq	r0, r0, r6, lsl #4
    5c3c:	000f1308 	andeq	r1, pc, r8, lsl #6
    5c40:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    5c44:	04bb0f03 	ldrteq	r0, [fp], #3843	; 0xf03
    5c48:	130c0000 	movwne	r0, #49152	; 0xc000
    5c4c:	0000095d 	andeq	r0, r0, sp, asr r9
    5c50:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    5c54:	000004cb 	andeq	r0, r0, fp, asr #9
    5c58:	4b0c002c 	blmi	305d10 <__ccfg+0x2e5d68>
    5c5c:	cb000004 	blgt	5c74 <patchImageGenfsk+0x284>
    5c60:	15000004 	strne	r0, [r0, #-4]
    5c64:	00000080 	andeq	r0, r0, r0, lsl #1
    5c68:	040b0003 	streq	r0, [fp], #-3
    5c6c:	00000458 	andeq	r0, r0, r8, asr r4
    5c70:	000bdc0e 	andeq	sp, fp, lr, lsl #24
    5c74:	031c0700 	tsteq	ip, #0, 14
    5c78:	0004581b 	andeq	r5, r4, fp, lsl r8
    5c7c:	0bbc1100 	bleq	fef0a084 <_estack+0xdef05084>
    5c80:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    5c84:	04ed1403 	strbteq	r1, [sp], #1027	; 0x403
    5c88:	01010000 	mrseq	r0, (UNDEF: 1)
    5c8c:	04d1040b 	ldrbeq	r0, [r1], #1035	; 0x40b
    5c90:	0f080000 	svceq	0x00080000
    5c94:	08000007 	stmdaeq	r0, {r0, r1, r2}
    5c98:	01ce131d 	biceq	r1, lr, sp, lsl r3
    5c9c:	01010000 	mrseq	r0, (UNDEF: 1)
    5ca0:	0002ee08 	andeq	lr, r2, r8, lsl #28
    5ca4:	1a1e0800 	bne	787cac <__ccfg+0x767d04>
    5ca8:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5cac:	69080101 	stmdbvs	r8, {r0, r8}
    5cb0:	0800000c 	stmdaeq	r0, {r2, r3}
    5cb4:	01df241e 	bicseq	r2, pc, lr, lsl r4	; <UNPREDICTABLE>
    5cb8:	01010000 	mrseq	r0, (UNDEF: 1)
    5cbc:	000c8708 	andeq	r8, ip, r8, lsl #14
    5cc0:	14220800 	strtne	r0, [r2], #-2048	; 0xfffff800
    5cc4:	000004ed 	andeq	r0, r0, sp, ror #9
    5cc8:	c0160101 	andsgt	r0, r6, r1, lsl #2
    5ccc:	09000001 	stmdbeq	r0, {r0}
    5cd0:	050e0217 	streq	r0, [lr, #-535]	; 0xfffffde9
    5cd4:	01ffa803 	mvnseq	sl, r3, lsl #16
    5cd8:	05000000 	streq	r0, [r0, #-0]
    5cdc:	00030000 	andeq	r0, r3, r0
    5ce0:	00001421 	andeq	r1, r0, r1, lsr #8
    5ce4:	00ac0104 	adceq	r0, ip, r4, lsl #2
    5ce8:	e20c0000 	and	r0, ip, #0
    5cec:	0a00001b 	beq	5d60 <__exidx_end+0xa0>
    5cf0:	5800000e 	stmdapl	r0, {r1, r2, r3}
    5cf4:	0000000a 	andeq	r0, r0, sl
    5cf8:	3a000000 	bcc	5d00 <__exidx_end+0x40>
    5cfc:	02000041 	andeq	r0, r0, #65	; 0x41
    5d00:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    5d04:	02020000 	andeq	r0, r2, #0
    5d08:	000a6b05 	andeq	r6, sl, r5, lsl #22
    5d0c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5d10:	000007fd 	strdeq	r0, [r0], -sp
    5d14:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    5d18:	03000007 	movweq	r0, #7
    5d1c:	00002a1c 	andeq	r2, r0, ip, lsl sl
    5d20:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    5d24:	02000000 	andeq	r0, r0, #0
    5d28:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    5d2c:	12030000 	andne	r0, r3, #0
    5d30:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    5d34:	00601931 	rsbeq	r1, r0, r1, lsr r9
    5d38:	02020000 	andeq	r0, r2, #0
    5d3c:	000d6607 	andeq	r6, sp, r7, lsl #12
    5d40:	29b40300 	ldmibcs	r4!, {r8, r9}
    5d44:	34040000 	strcc	r0, [r4], #-0
    5d48:	00007319 	andeq	r7, r0, r9, lsl r3
    5d4c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5d50:	00000426 	andeq	r0, r0, r6, lsr #8
    5d54:	21070802 	tstcs	r7, r2, lsl #16
    5d58:	04000004 	streq	r0, [r0], #-4
    5d5c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5d60:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5d64:	00042b07 	andeq	r2, r4, r7, lsl #22
    5d68:	28fb0300 	ldmcs	fp!, {r8, r9}^
    5d6c:	27050000 	strcs	r0, [r5, -r0]
    5d70:	00005412 	andeq	r5, r0, r2, lsl r4
    5d74:	008f0500 	addeq	r0, pc, r0, lsl #10
    5d78:	8f060000 	svchi	0x00060000
    5d7c:	03000000 	movweq	r0, #0
    5d80:	00001dc2 	andeq	r1, r0, r2, asr #27
    5d84:	41122b05 	tstmi	r2, r5, lsl #22
    5d88:	06000000 	streq	r0, [r0], -r0
    5d8c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5d90:	0000a505 	andeq	sl, r0, r5, lsl #10
    5d94:	294d0300 	stmdbcs	sp, {r8, r9}^
    5d98:	2c050000 	stccs	0, cr0, [r5], {-0}
    5d9c:	00006712 	andeq	r6, r0, r2, lsl r7
    5da0:	00bb0500 	adcseq	r0, fp, r0, lsl #10
    5da4:	46030000 	strmi	r0, [r3], -r0
    5da8:	05000006 	streq	r0, [r0, #-6]
    5dac:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    5db0:	b4030000 	strlt	r0, [r3], #-0
    5db4:	0500000b 	streq	r0, [r0, #-11]
    5db8:	00e4102e 	rsceq	r1, r4, lr, lsr #32
    5dbc:	04070000 	streq	r0, [r7], #-0
    5dc0:	0000008f 	andeq	r0, r0, pc, lsl #1
    5dc4:	32050808 	andcc	r0, r5, #8, 16	; 0x80000
    5dc8:	00017809 	andeq	r7, r1, r9, lsl #16
    5dcc:	00340900 	eorseq	r0, r4, r0, lsl #18
    5dd0:	34050000 	strcc	r0, [r5], #-0
    5dd4:	0000a507 	andeq	sl, r0, r7, lsl #10
    5dd8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5ddc:	064c0900 	strbeq	r0, [ip], -r0, lsl #18
    5de0:	35050000 	strcc	r0, [r5, #-0]
    5de4:	0000a503 	andeq	sl, r0, r3, lsl #10
    5de8:	06010100 	streq	r0, [r1], -r0, lsl #2
    5dec:	02e70900 	rsceq	r0, r7, #0, 18
    5df0:	36050000 	strcc	r0, [r5], -r0
    5df4:	0000a503 	andeq	sl, r0, r3, lsl #10
    5df8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5dfc:	06b70900 	ldrteq	r0, [r7], r0, lsl #18
    5e00:	37050000 	strcc	r0, [r5, -r0]
    5e04:	0000a503 	andeq	sl, r0, r3, lsl #10
    5e08:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5e0c:	0a9f0900 	beq	fe7c8214 <_estack+0xde7c3214>
    5e10:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    5e14:	0000a503 	andeq	sl, r0, r3, lsl #10
    5e18:	00040100 	andeq	r0, r4, r0, lsl #2
    5e1c:	065b0a00 	ldrbeq	r0, [fp], -r0, lsl #20
    5e20:	3a050000 	bcc	145e28 <__ccfg+0x125e80>
    5e24:	0000a507 	andeq	sl, r0, r7, lsl #10
    5e28:	fb0a0100 	blx	286232 <__ccfg+0x26628a>
    5e2c:	05000008 	streq	r0, [r0, #-8]
    5e30:	00a5033c 	adceq	r0, r5, ip, lsr r3
    5e34:	0a020000 	beq	85e3c <__ccfg+0x65e94>
    5e38:	00000f3a 	andeq	r0, r0, sl, lsr pc
    5e3c:	a5033d05 	strge	r3, [r3, #-3333]	; 0xfffff2fb
    5e40:	03000000 	movweq	r0, #0
    5e44:	0009130a 	andeq	r1, r9, sl, lsl #6
    5e48:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    5e4c:	000000bb 	strheq	r0, [r0], -fp
    5e50:	1d030004 	stcne	0, cr0, [r3, #-16]
    5e54:	05000003 	streq	r0, [r0, #-3]
    5e58:	00ea0341 	rsceq	r0, sl, r1, asr #6
    5e5c:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    5e60:	0b000001 	bleq	5e6c <__exidx_end+0x1ac>
    5e64:	000006be 			; <UNDEFINED> instruction: 0x000006be
    5e68:	841a4305 	ldrhi	r4, [sl], #-773	; 0xfffffcfb
    5e6c:	01000001 	tsteq	r0, r1
    5e70:	01a00b01 	lsleq	r0, r1, #22
    5e74:	45050000 	strmi	r0, [r5, #-0]
    5e78:	0001a50e 	andeq	sl, r1, lr, lsl #10
    5e7c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5e80:	0001ab04 	andeq	sl, r1, r4, lsl #22
    5e84:	08010200 	stmdaeq	r1, {r9}
    5e88:	00000c64 	andeq	r0, r0, r4, ror #24
    5e8c:	0001ab05 	andeq	sl, r1, r5, lsl #22
    5e90:	03260b00 			; <UNDEFINED> instruction: 0x03260b00
    5e94:	45050000 	strmi	r0, [r5, #-0]
    5e98:	0001a51e 	andeq	sl, r1, lr, lsl r5
    5e9c:	08010100 	stmdaeq	r1, {r8}
    5ea0:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    5ea4:	000001f6 	strdeq	r0, [r0], -r6
    5ea8:	000cd80a 	andeq	sp, ip, sl, lsl #16
    5eac:	0b900600 	bleq	fe4076b4 <_estack+0xde4026b4>
    5eb0:	00000067 	andeq	r0, r0, r7, rrx
    5eb4:	10750a00 	rsbsne	r0, r5, r0, lsl #20
    5eb8:	91060000 	mrsls	r0, (UNDEF: 6)
    5ebc:	00008f08 	andeq	r8, r0, r8, lsl #30
    5ec0:	c50a0400 	strgt	r0, [sl, #-1024]	; 0xfffffc00
    5ec4:	06000001 	streq	r0, [r0], -r1
    5ec8:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    5ecc:	00060000 	andeq	r0, r6, r0
    5ed0:	000ccc03 	andeq	ip, ip, r3, lsl #24
    5ed4:	03930600 	orrseq	r0, r3, #0, 12
    5ed8:	000001c5 	andeq	r0, r0, r5, asr #3
    5edc:	0001f60c 	andeq	pc, r1, ip, lsl #12
    5ee0:	00020d00 	andeq	r0, r2, r0, lsl #26
    5ee4:	0b000d00 	bleq	92ec <__exidx_end+0x362c>
    5ee8:	0000093d 	andeq	r0, r0, sp, lsr r9
    5eec:	020f9906 	andeq	r9, pc, #98304	; 0x18000
    5ef0:	01000002 	tsteq	r0, r2
    5ef4:	b6040701 	strlt	r0, [r4], -r1, lsl #14
    5ef8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5efc:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    5f00:	0000024b 	andeq	r0, r0, fp, asr #4
    5f04:	00091a09 	andeq	r1, r9, r9, lsl #20
    5f08:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    5f0c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5f10:	00010701 	andeq	r0, r1, r1, lsl #14
    5f14:	0005cc09 	andeq	ip, r5, r9, lsl #24
    5f18:	03940700 	orrseq	r0, r4, #0, 14
    5f1c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5f20:	00000101 	andeq	r0, r0, r1, lsl #2
    5f24:	0aab0300 	beq	feac6b2c <_estack+0xdeac1b2c>
    5f28:	96070000 	strls	r0, [r7], -r0
    5f2c:	00022103 	andeq	r2, r2, r3, lsl #2
    5f30:	024b0500 	subeq	r0, fp, #0, 10
    5f34:	570c0000 	strpl	r0, [ip, -r0]
    5f38:	67000002 	strvs	r0, [r0, -r2]
    5f3c:	0d000002 	stceq	0, cr0, [r0, #-8]
    5f40:	025c0500 	subseq	r0, ip, #0, 10
    5f44:	aa0b0000 	bge	2c5f4c <__ccfg+0x2a5fa4>
    5f48:	07000003 	streq	r0, [r0, -r3]
    5f4c:	0267179c 	rsbeq	r1, r7, #156, 14	; 0x2700000
    5f50:	01010000 	mrseq	r0, (UNDEF: 1)
    5f54:	00009b0c 	andeq	r9, r0, ip, lsl #22
    5f58:	00028500 	andeq	r8, r2, r0, lsl #10
    5f5c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5f60:	0000027a 	andeq	r0, r0, sl, ror r2
    5f64:	00060e0b 	andeq	r0, r6, fp, lsl #28
    5f68:	13060800 	movwne	r0, #26624	; 0x6800
    5f6c:	00000285 	andeq	r0, r0, r5, lsl #5
    5f70:	dd0b0101 	stfles	f0, [fp, #-4]
    5f74:	06000008 	streq	r0, [r0], -r8
    5f78:	00bb0ec3 	adcseq	r0, fp, r3, asr #29
    5f7c:	01010000 	mrseq	r0, (UNDEF: 1)
    5f80:	000c720e 	andeq	r7, ip, lr, lsl #4
    5f84:	016e0900 	cmneq	lr, r0, lsl #18
    5f88:	0002b310 	andeq	fp, r2, r0, lsl r3
    5f8c:	b9040700 	stmdblt	r4, {r8, r9, sl}
    5f90:	0f000002 	svceq	0x00000002
    5f94:	0002c501 	andeq	ip, r2, r1, lsl #10
    5f98:	008f1000 	addeq	r1, pc, r0
    5f9c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5fa0:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    5fa4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5fa8:	c505000d 	strgt	r0, [r5, #-13]
    5fac:	11000002 	tstne	r0, r2
    5fb0:	000009e6 	andeq	r0, r0, r6, ror #19
    5fb4:	16017f09 	strne	r7, [r1], -r9, lsl #30
    5fb8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5fbc:	96110101 	ldrls	r0, [r1], -r1, lsl #2
    5fc0:	09000003 	stmdbeq	r0, {r0, r1}
    5fc4:	c7140182 	ldrgt	r0, [r4, -r2, lsl #3]
    5fc8:	01000000 	mrseq	r0, (UNDEF: 0)
    5fcc:	036e1101 	cmneq	lr, #1073741824	; 0x40000000
    5fd0:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    5fd4:	00bb0e02 	adcseq	r0, fp, r2, lsl #28
    5fd8:	01010000 	mrseq	r0, (UNDEF: 1)
    5fdc:	03090812 	movweq	r0, #38930	; 0x9812
    5fe0:	03290903 			; <UNDEFINED> instruction: 0x03290903
    5fe4:	a1130000 	tstge	r3, r0
    5fe8:	0900003c 	stmdbeq	r0, {r2, r3, r4, r5}
    5fec:	8f070307 	svchi	0x00070307
    5ff0:	00000000 	andeq	r0, r0, r0
    5ff4:	000fcd13 	andeq	ip, pc, r3, lsl sp	; <UNPREDICTABLE>
    5ff8:	03080900 	movweq	r0, #35072	; 0x8900
    5ffc:	0000cc08 	andeq	ip, r0, r8, lsl #24
    6000:	0e000400 	cfcpyseq	mvf0, mvf0
    6004:	00000a09 	andeq	r0, r0, r9, lsl #20
    6008:	03030909 	movweq	r0, #14601	; 0x3909
    600c:	00000302 	andeq	r0, r0, r2, lsl #6
    6010:	00002914 	andeq	r2, r0, r4, lsl r9
    6014:	0b093000 	bleq	25201c <__ccfg+0x232074>
    6018:	03990803 	orrseq	r0, r9, #196608	; 0x30000
    601c:	24130000 	ldrcs	r0, [r3], #-0
    6020:	0900001f 	stmdbeq	r0, {r0, r1, r2, r3, r4}
    6024:	8f080314 	svchi	0x00080314
    6028:	00000000 	andeq	r0, r0, r0
    602c:	000be713 	andeq	lr, fp, r3, lsl r7
    6030:	03150900 	tsteq	r5, #0, 18
    6034:	00008f08 	andeq	r8, r0, r8, lsl #30
    6038:	8e130200 	cdphi	2, 1, cr0, cr3, cr0, {0}
    603c:	0900004c 	stmdbeq	r0, {r2, r3, r6}
    6040:	a60b0316 			; <UNDEFINED> instruction: 0xa60b0316
    6044:	04000002 	streq	r0, [r0], #-2
    6048:	00475413 	subeq	r5, r7, r3, lsl r4
    604c:	03170900 	tsteq	r7, #0, 18
    6050:	0000cc09 	andeq	ip, r0, r9, lsl #24
    6054:	0f130800 	svceq	0x00130800
    6058:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    605c:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    6060:	0c000003 	stceq	0, cr0, [r0], {3}
    6064:	00095d13 	andeq	r5, r9, r3, lsl sp
    6068:	03190900 	tsteq	r9, #0, 18
    606c:	0003a915 	andeq	sl, r3, r5, lsl r9
    6070:	0c002c00 	stceq	12, cr2, [r0], {-0}
    6074:	00000329 	andeq	r0, r0, r9, lsr #6
    6078:	000003a9 	andeq	r0, r0, r9, lsr #7
    607c:	00008815 	andeq	r8, r0, r5, lsl r8
    6080:	07000300 	streq	r0, [r0, -r0, lsl #6]
    6084:	00033604 	andeq	r3, r3, r4, lsl #12
    6088:	0bdc0e00 	bleq	ff709890 <_estack+0xdf704890>
    608c:	1c090000 	stcne	0, cr0, [r9], {-0}
    6090:	03361b03 	teqeq	r6, #3072	; 0xc00
    6094:	bc110000 	ldclt	0, cr0, [r1], {-0}
    6098:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    609c:	cb14031e 	blgt	506d1c <__ccfg+0x4e6d74>
    60a0:	01000003 	tsteq	r0, r3
    60a4:	af040701 	svcge	0x00040701
    60a8:	0b000003 	bleq	60bc <__exidx_end+0x3fc>
    60ac:	0000070f 	andeq	r0, r0, pc, lsl #14
    60b0:	8f131d0a 	svchi	0x00131d0a
    60b4:	01000000 	mrseq	r0, (UNDEF: 0)
    60b8:	02ee0b01 	rsceq	r0, lr, #1024	; 0x400
    60bc:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    60c0:	0000a01a 	andeq	sl, r0, sl, lsl r0
    60c4:	0b010100 	bleq	464cc <__ccfg+0x26524>
    60c8:	00000c69 	andeq	r0, r0, r9, ror #24
    60cc:	a0241e0a 	eorge	r1, r4, sl, lsl #28
    60d0:	01000000 	mrseq	r0, (UNDEF: 0)
    60d4:	0c870b01 	fstmiaxeq	r7, {d0-d-1}	;@ Deprecated
    60d8:	220a0000 	andcs	r0, sl, #0
    60dc:	0003cb14 	andeq	ip, r3, r4, lsl fp
    60e0:	16010100 	strne	r0, [r1], -r0, lsl #2
    60e4:	0000026c 	andeq	r0, r0, ip, ror #4
    60e8:	05100d01 	ldreq	r0, [r0, #-3329]	; 0xfffff2ff
    60ec:	0052bd03 	subseq	fp, r2, r3, lsl #26
    60f0:	2c011700 	stccs	7, cr1, [r1], {-0}
    60f4:	0100001c 	tsteq	r0, ip, lsl r0
    60f8:	00010611 	andeq	r0, r1, r1, lsl r6
    60fc:	00000000 	andeq	r0, r0, r0
    6100:	01000000 	mrseq	r0, (UNDEF: 0)
    6104:	0004bb9c 	muleq	r4, ip, fp
    6108:	74731800 	ldrbtvc	r1, [r3], #-2048	; 0xfffff800
    610c:	1c110100 	ldfnes	f0, [r1], {-0}
    6110:	0000008f 	andeq	r0, r0, pc, lsl #1
    6114:	000022a7 	andeq	r2, r0, r7, lsr #5
    6118:	001c2719 	andseq	r2, ip, r9, lsl r7
    611c:	2c110100 	ldfcss	f0, [r1], {-0}
    6120:	0000021b 	andeq	r0, r0, fp, lsl r2
    6124:	000022c5 	andeq	r2, r0, r5, asr #5
    6128:	6c617618 	stclvs	6, cr7, [r1], #-96	; 0xffffffa0
    612c:	3a110100 	bcc	446534 <__ccfg+0x42658c>
    6130:	000000d8 	ldrdeq	r0, [r0], -r8
    6134:	000022e3 	andeq	r2, r0, r3, ror #5
    6138:	0100701a 	tsteq	r0, sl, lsl r0
    613c:	04bb1213 	ldrteq	r1, [fp], #531	; 0x213
    6140:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    6144:	07140100 	ldreq	r0, [r4, -r0, lsl #2]
    6148:	0000008f 	andeq	r0, r0, pc, lsl #1
    614c:	00002301 	andeq	r2, r0, r1, lsl #6
    6150:	0100761a 	tsteq	r0, sl, lsl r6
    6154:	00a50715 	adceq	r0, r5, r5, lsl r7
    6158:	d41c0000 	ldrle	r0, [ip], #-0
    615c:	00000004 	andeq	r0, r0, r4
    6160:	00000000 	andeq	r0, r0, r0
    6164:	01000000 	mrseq	r0, (UNDEF: 0)
    6168:	de1c031c 	mrcle	3, 0, r0, cr12, cr12, {0}
    616c:	00000004 	andeq	r0, r0, r4
    6170:	00000000 	andeq	r0, r0, r0
    6174:	01000000 	mrseq	r0, (UNDEF: 0)
    6178:	e81d031f 	ldmda	sp, {r0, r1, r2, r3, r4, r8, r9}
    617c:	00000004 	andeq	r0, r0, r4
    6180:	30000000 	andcc	r0, r0, r0
    6184:	0100000a 	tsteq	r0, sl
    6188:	f61e0b26 			; <UNDEFINED> instruction: 0xf61e0b26
    618c:	14000004 	strne	r0, [r0], #-4
    6190:	00000023 	andeq	r0, r0, r3, lsr #32
    6194:	57040700 	strpl	r0, [r4, -r0, lsl #14]
    6198:	1f000002 	svcne	0x00000002
    619c:	001c3c01 	andseq	r3, ip, r1, lsl #24
    61a0:	060f0100 	streq	r0, [pc], -r0, lsl #2
	...
    61ac:	7e209c01 	cdpvc	12, 2, cr9, cr0, cr1, {0}
    61b0:	02000012 	andeq	r0, r0, #18
    61b4:	0301355b 	movweq	r3, #5467	; 0x155b
    61b8:	000f9e20 	andeq	r9, pc, r0, lsr #28
    61bc:	35500200 	ldrbcc	r0, [r0, #-512]	; 0xfffffe00
    61c0:	d5210301 	strle	r0, [r1, #-769]!	; 0xfffffcff
    61c4:	0300001b 	movweq	r0, #27
    61c8:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    61cc:	03000000 	movweq	r0, #0
    61d0:	00112122 	andseq	r2, r1, r2, lsr #2
    61d4:	18a40300 	stmiane	r4!, {r8, r9}
    61d8:	00000067 	andeq	r0, r0, r7, rrx
    61dc:	04f60000 	ldrbteq	r0, [r6], #0
    61e0:	00030000 	andeq	r0, r3, r0
    61e4:	00001612 	andeq	r1, r0, r2, lsl r6
    61e8:	00ac0104 	adceq	r0, ip, r4, lsl #2
    61ec:	860c0000 	strhi	r0, [ip], -r0
    61f0:	0a00001c 	beq	6268 <__exidx_end+0x5a8>
    61f4:	d000000e 	andle	r0, r0, lr
    61f8:	0000000a 	andeq	r0, r0, sl
    61fc:	dc000000 	stcle	0, cr0, [r0], {-0}
    6200:	02000043 	andeq	r0, r0, #67	; 0x43
    6204:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    6208:	02020000 	andeq	r0, r2, #0
    620c:	000a6b05 	andeq	r6, sl, r5, lsl #22
    6210:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    6214:	000007fd 	strdeq	r0, [r0], -sp
    6218:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    621c:	03000007 	movweq	r0, #7
    6220:	00002a1c 	andeq	r2, r0, ip, lsl sl
    6224:	4d182e03 	ldcmi	14, cr2, [r8, #-12]
    6228:	02000000 	andeq	r0, r0, #0
    622c:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    6230:	12030000 	andne	r0, r3, #0
    6234:	0300002e 	movweq	r0, #46	; 0x2e
    6238:	00601931 	rsbeq	r1, r0, r1, lsr r9
    623c:	02020000 	andeq	r0, r2, #0
    6240:	000d6607 	andeq	r6, sp, r7, lsl #12
    6244:	29b40300 	ldmibcs	r4!, {r8, r9}
    6248:	34030000 	strcc	r0, [r3], #-0
    624c:	00007319 	andeq	r7, r0, r9, lsl r3
    6250:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6254:	00000426 	andeq	r0, r0, r6, lsr #8
    6258:	21070802 	tstcs	r7, r2, lsl #16
    625c:	04000004 	streq	r0, [r0], #-4
    6260:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6264:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6268:	00042b07 	andeq	r2, r4, r7, lsl #22
    626c:	28fb0300 	ldmcs	fp!, {r8, r9}^
    6270:	27040000 	strcs	r0, [r4, -r0]
    6274:	00005412 	andeq	r5, r0, r2, lsl r4
    6278:	008f0500 	addeq	r0, pc, r0, lsl #10
    627c:	8f060000 	svchi	0x00060000
    6280:	03000000 	movweq	r0, #0
    6284:	00001dc2 	andeq	r1, r0, r2, asr #27
    6288:	41122b04 	tstmi	r2, r4, lsl #22
    628c:	06000000 	streq	r0, [r0], -r0
    6290:	000000a5 	andeq	r0, r0, r5, lsr #1
    6294:	00294d03 	eoreq	r4, r9, r3, lsl #26
    6298:	122c0400 	eorne	r0, ip, #0, 8
    629c:	00000067 	andeq	r0, r0, r7, rrx
    62a0:	0000b605 	andeq	fp, r0, r5, lsl #12
    62a4:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    62a8:	2d040000 	stccs	0, cr0, [r4, #-0]
    62ac:	00006712 	andeq	r6, r0, r2, lsl r7
    62b0:	04080700 	streq	r0, [r8], #-1792	; 0xfffff900
    62b4:	01610932 	cmneq	r1, r2, lsr r9
    62b8:	34080000 	strcc	r0, [r8], #-0
    62bc:	04000000 	streq	r0, [r0], #-0
    62c0:	00a50734 	adceq	r0, r5, r4, lsr r7
    62c4:	01010000 	mrseq	r0, (UNDEF: 1)
    62c8:	4c080007 	stcmi	0, cr0, [r8], {7}
    62cc:	04000006 	streq	r0, [r0], #-6
    62d0:	00a50335 	adceq	r0, r5, r5, lsr r3
    62d4:	01010000 	mrseq	r0, (UNDEF: 1)
    62d8:	e7080006 	str	r0, [r8, -r6]
    62dc:	04000002 	streq	r0, [r0], #-2
    62e0:	00a50336 	adceq	r0, r5, r6, lsr r3
    62e4:	01010000 	mrseq	r0, (UNDEF: 1)
    62e8:	b7080005 	strlt	r0, [r8, -r5]
    62ec:	04000006 	streq	r0, [r0], #-6
    62f0:	00a50337 	adceq	r0, r5, r7, lsr r3
    62f4:	01010000 	mrseq	r0, (UNDEF: 1)
    62f8:	9f080004 	svcls	0x00080004
    62fc:	0400000a 	streq	r0, [r0], #-10
    6300:	00a50338 	adceq	r0, r5, r8, lsr r3
    6304:	04010000 	streq	r0, [r1], #-0
    6308:	5b090000 	blpl	246310 <__ccfg+0x226368>
    630c:	04000006 	streq	r0, [r0], #-6
    6310:	00a5073a 	adceq	r0, r5, sl, lsr r7
    6314:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6318:	000008fb 	strdeq	r0, [r0], -fp
    631c:	a5033c04 	strge	r3, [r3, #-3076]	; 0xfffff3fc
    6320:	02000000 	andeq	r0, r0, #0
    6324:	000f3a09 	andeq	r3, pc, r9, lsl #20
    6328:	033d0400 	teqeq	sp, #0, 8
    632c:	000000a5 	andeq	r0, r0, r5, lsr #1
    6330:	09130903 	ldmdbeq	r3, {r0, r1, r8, fp}
    6334:	3f040000 	svccc	0x00040000
    6338:	0000b608 	andeq	fp, r0, r8, lsl #12
    633c:	03000400 	movweq	r0, #1024	; 0x400
    6340:	0000031d 	andeq	r0, r0, sp, lsl r3
    6344:	d3034104 	movwle	r4, #12548	; 0x3104
    6348:	06000000 	streq	r0, [r0], -r0
    634c:	00000161 	andeq	r0, r0, r1, ror #2
    6350:	0006be0a 	andeq	fp, r6, sl, lsl #28
    6354:	1a430400 	bne	10c735c <__ccfg+0x10a73b4>
    6358:	0000016d 	andeq	r0, r0, sp, ror #2
    635c:	a00a0101 	andge	r0, sl, r1, lsl #2
    6360:	04000001 	streq	r0, [r0], #-1
    6364:	018e0e45 	orreq	r0, lr, r5, asr #28
    6368:	01010000 	mrseq	r0, (UNDEF: 1)
    636c:	0194040b 	orrseq	r0, r4, fp, lsl #8
    6370:	01020000 	mrseq	r0, (UNDEF: 2)
    6374:	000c6408 	andeq	r6, ip, r8, lsl #8
    6378:	01940500 	orrseq	r0, r4, r0, lsl #10
    637c:	260a0000 	strcs	r0, [sl], -r0
    6380:	04000003 	streq	r0, [r0], #-3
    6384:	018e1e45 	orreq	r1, lr, r5, asr #28
    6388:	01010000 	mrseq	r0, (UNDEF: 1)
    638c:	8f050807 	svchi	0x00050807
    6390:	0001df09 	andeq	sp, r1, r9, lsl #30
    6394:	0cd80900 			; <UNDEFINED> instruction: 0x0cd80900
    6398:	90050000 	andls	r0, r5, r0
    639c:	0000670b 	andeq	r6, r0, fp, lsl #14
    63a0:	75090000 	strvc	r0, [r9, #-0]
    63a4:	05000010 	streq	r0, [r0, #-16]
    63a8:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    63ac:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    63b0:	000001c5 	andeq	r0, r0, r5, asr #3
    63b4:	b1109205 	tstlt	r0, r5, lsl #4
    63b8:	06000000 	streq	r0, [r0], -r0
    63bc:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    63c0:	93050000 	movwls	r0, #20480	; 0x5000
    63c4:	0001ae03 	andeq	sl, r1, r3, lsl #28
    63c8:	01df0c00 	bicseq	r0, pc, r0, lsl #24
    63cc:	01f60000 	mvnseq	r0, r0
    63d0:	000d0000 	andeq	r0, sp, r0
    63d4:	00093d0a 	andeq	r3, r9, sl, lsl #26
    63d8:	0f990500 	svceq	0x00990500
    63dc:	000001eb 	andeq	r0, r0, fp, ror #3
    63e0:	01070101 	tsteq	r7, r1, lsl #2
    63e4:	2e099106 	mvfcse	f1, f6
    63e8:	08000002 	stmdaeq	r0, {r1}
    63ec:	0000091a 	andeq	r0, r0, sl, lsl r9
    63f0:	a5079306 	strge	r9, [r7, #-774]	; 0xfffffcfa
    63f4:	01000000 	mrseq	r0, (UNDEF: 0)
    63f8:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    63fc:	000005cc 	andeq	r0, r0, ip, asr #11
    6400:	a5039406 	strge	r9, [r3, #-1030]	; 0xfffffbfa
    6404:	01000000 	mrseq	r0, (UNDEF: 0)
    6408:	00000001 	andeq	r0, r0, r1
    640c:	000aab03 	andeq	sl, sl, r3, lsl #22
    6410:	03960600 	orrseq	r0, r6, #0, 12
    6414:	00000204 	andeq	r0, r0, r4, lsl #4
    6418:	00022e05 	andeq	r2, r2, r5, lsl #28
    641c:	023a0c00 	eorseq	r0, sl, #0, 24
    6420:	024a0000 	subeq	r0, sl, #0
    6424:	000d0000 	andeq	r0, sp, r0
    6428:	00023f05 	andeq	r3, r2, r5, lsl #30
    642c:	03aa0a00 			; <UNDEFINED> instruction: 0x03aa0a00
    6430:	9c060000 	stcls	0, cr0, [r6], {-0}
    6434:	00024a17 	andeq	r4, r2, r7, lsl sl
    6438:	0c010100 	stfeqs	f0, [r1], {-0}
    643c:	0000009b 	muleq	r0, fp, r0
    6440:	00000268 	andeq	r0, r0, r8, ror #4
    6444:	5d05000d 	stcpl	0, cr0, [r5, #-52]	; 0xffffffcc
    6448:	0a000002 	beq	6458 <__exidx_end+0x798>
    644c:	0000060e 	andeq	r0, r0, lr, lsl #12
    6450:	68130607 	ldmdavs	r3, {r0, r1, r2, r9, sl}
    6454:	01000002 	tsteq	r0, r2
    6458:	08dd0a01 	ldmeq	sp, {r0, r9, fp}^
    645c:	c3050000 	movwgt	r0, #20480	; 0x5000
    6460:	0000b60e 	andeq	fp, r0, lr, lsl #12
    6464:	0e010100 	adfeqs	f0, f1, f0
    6468:	00000c72 	andeq	r0, r0, r2, ror ip
    646c:	10016e08 	andne	r6, r1, r8, lsl #28
    6470:	00000296 	muleq	r0, r6, r2
    6474:	029c040b 	addseq	r0, ip, #184549376	; 0xb000000
    6478:	010f0000 	mrseq	r0, CPSR
    647c:	000002a8 	andeq	r0, r0, r8, lsr #5
    6480:	00008f10 	andeq	r8, r0, r0, lsl pc
    6484:	9b0c0000 	blls	30648c <__ccfg+0x2e64e4>
    6488:	b3000001 	movwlt	r0, #1
    648c:	0d000002 	stceq	0, cr0, [r0, #-8]
    6490:	02a80500 	adceq	r0, r8, #0, 10
    6494:	e6110000 	ldr	r0, [r1], -r0
    6498:	08000009 	stmdaeq	r0, {r0, r3}
    649c:	b316017f 	tstlt	r6, #-1073741793	; 0xc000001f
    64a0:	01000002 	tsteq	r0, r2
    64a4:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    64a8:	82080000 	andhi	r0, r8, #0
    64ac:	00c21401 	sbceq	r1, r2, r1, lsl #8
    64b0:	01010000 	mrseq	r0, (UNDEF: 1)
    64b4:	00036e11 	andeq	r6, r3, r1, lsl lr
    64b8:	02d80800 	sbcseq	r0, r8, #0, 16
    64bc:	0000b60e 	andeq	fp, r0, lr, lsl #12
    64c0:	12010100 	andne	r0, r1, #0, 2
    64c4:	03030808 	movweq	r0, #14344	; 0x3808
    64c8:	00030c09 	andeq	r0, r3, r9, lsl #24
    64cc:	3ca11300 	stccc	3, cr1, [r1]
    64d0:	07080000 	streq	r0, [r8, -r0]
    64d4:	008f0703 	addeq	r0, pc, r3, lsl #14
    64d8:	13000000 	movwne	r0, #0
    64dc:	00000fcd 	andeq	r0, r0, sp, asr #31
    64e0:	08030808 	stmdaeq	r3, {r3, fp}
    64e4:	000000c7 	andeq	r0, r0, r7, asr #1
    64e8:	090e0004 	stmdbeq	lr, {r2}
    64ec:	0800000a 	stmdaeq	r0, {r1, r3}
    64f0:	e5030309 	str	r0, [r3, #-777]	; 0xfffffcf7
    64f4:	14000002 	strne	r0, [r0], #-2
    64f8:	00000029 	andeq	r0, r0, r9, lsr #32
    64fc:	030b0830 	movweq	r0, #47152	; 0xb830
    6500:	00037c08 	andeq	r7, r3, r8, lsl #24
    6504:	1f241300 	svcne	0x00241300
    6508:	14080000 	strne	r0, [r8], #-0
    650c:	008f0803 	addeq	r0, pc, r3, lsl #16
    6510:	13000000 	movwne	r0, #0
    6514:	00000be7 	andeq	r0, r0, r7, ror #23
    6518:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    651c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6520:	4c8e1302 	stcmi	3, cr1, [lr], {2}
    6524:	16080000 	strne	r0, [r8], -r0
    6528:	02890b03 	addeq	r0, r9, #3072	; 0xc00
    652c:	13040000 	movwne	r0, #16384	; 0x4000
    6530:	00004754 	andeq	r4, r0, r4, asr r7
    6534:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    6538:	000000c7 	andeq	r0, r0, r7, asr #1
    653c:	000f1308 	andeq	r1, pc, r8, lsl #6
    6540:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    6544:	037c0f03 	cmneq	ip, #3, 30
    6548:	130c0000 	movwne	r0, #49152	; 0xc000
    654c:	0000095d 	andeq	r0, r0, sp, asr r9
    6550:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    6554:	0000038c 	andeq	r0, r0, ip, lsl #7
    6558:	0c0c002c 	stceq	0, cr0, [ip], {44}	; 0x2c
    655c:	8c000003 	stchi	0, cr0, [r0], {3}
    6560:	15000003 	strne	r0, [r0, #-3]
    6564:	00000088 	andeq	r0, r0, r8, lsl #1
    6568:	040b0003 	streq	r0, [fp], #-3
    656c:	00000319 	andeq	r0, r0, r9, lsl r3
    6570:	000bdc0e 	andeq	sp, fp, lr, lsl #24
    6574:	031c0800 	tsteq	ip, #0, 16
    6578:	0003191b 	andeq	r1, r3, fp, lsl r9
    657c:	0bbc1100 	bleq	fef0a984 <_estack+0xdef05984>
    6580:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    6584:	03ae1403 			; <UNDEFINED> instruction: 0x03ae1403
    6588:	01010000 	mrseq	r0, (UNDEF: 1)
    658c:	0392040b 	orrseq	r0, r2, #184549376	; 0xb000000
    6590:	0f0a0000 	svceq	0x000a0000
    6594:	09000007 	stmdbeq	r0, {r0, r1, r2}
    6598:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    659c:	01010000 	mrseq	r0, (UNDEF: 1)
    65a0:	0002ee0a 	andeq	lr, r2, sl, lsl #28
    65a4:	1a1e0900 	bne	7889ac <__ccfg+0x768a04>
    65a8:	000000a0 	andeq	r0, r0, r0, lsr #1
    65ac:	690a0101 	stmdbvs	sl, {r0, r8}
    65b0:	0900000c 	stmdbeq	r0, {r2, r3}
    65b4:	00a0241e 	adceq	r2, r0, lr, lsl r4
    65b8:	01010000 	mrseq	r0, (UNDEF: 1)
    65bc:	000c870a 	andeq	r8, ip, sl, lsl #14
    65c0:	14220900 	strtne	r0, [r2], #-2304	; 0xfffff700
    65c4:	000003ae 	andeq	r0, r0, lr, lsr #7
    65c8:	51160101 	tstpl	r6, r1, lsl #2
    65cc:	0100001c 	tsteq	r0, ip, lsl r0
    65d0:	02960f08 	addseq	r0, r6, #8, 30
    65d4:	03050000 	movweq	r0, #20480	; 0x5000
    65d8:	00000000 	andeq	r0, r0, r0
    65dc:	001c6216 	andseq	r6, ip, r6, lsl r2
    65e0:	0d090100 	stfeqs	f0, [r9, #-0]
    65e4:	0000008f 	andeq	r0, r0, pc, lsl #1
    65e8:	00000305 	andeq	r0, r0, r5, lsl #6
    65ec:	6d170000 	ldcvs	0, cr0, [r7, #-0]
    65f0:	01000002 	tsteq	r0, r2
    65f4:	03050c0a 	movweq	r0, #23562	; 0x5c0a
    65f8:	000052c2 	andeq	r5, r0, r2, asr #5
    65fc:	1c770118 	ldfnee	f0, [r7], #-96	; 0xffffffa0
    6600:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    6604:	00000106 	andeq	r0, r0, r6, lsl #2
    6608:	00000000 	andeq	r0, r0, r0
    660c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6610:	00000447 	andeq	r0, r0, r7, asr #8
    6614:	74636119 	strbtvc	r6, [r3], #-281	; 0xfffffee7
    6618:	1d580100 	ldfnee	f0, [r8, #-0]
    661c:	00000296 	muleq	r0, r6, r2
    6620:	00002327 	andeq	r2, r0, r7, lsr #6
    6624:	6a011800 	bvs	4c62c <__ccfg+0x2c684>
    6628:	0100001c 	tsteq	r0, ip, lsl r0
    662c:	0001011c 	andeq	r0, r1, ip, lsl r1
    6630:	00000000 	andeq	r0, r0, r0
    6634:	01000000 	mrseq	r0, (UNDEF: 0)
    6638:	0004de9c 	muleq	r4, ip, lr
    663c:	0c331a00 			; <UNDEFINED> instruction: 0x0c331a00
    6640:	1c010000 	stcne	0, cr0, [r1], {-0}
    6644:	00008f01 	andeq	r8, r0, r1, lsl #30
    6648:	00236300 	eoreq	r6, r3, r0, lsl #6
    664c:	1c4c1b00 	mcrrne	11, 0, r1, ip, cr0
    6650:	21010000 	mrscs	r0, (UNDEF: 1)
    6654:	00000001 	andeq	r0, r0, r1
    6658:	1c591b00 	mrrcne	11, 0, r1, r9, cr0
    665c:	30010000 	andcc	r0, r1, r0
    6660:	00000001 	andeq	r0, r0, r1
    6664:	1dad1b00 			; <UNDEFINED> instruction: 0x1dad1b00
    6668:	37010000 	strcc	r0, [r1, -r0]
    666c:	00000001 	andeq	r0, r0, r1
    6670:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    6674:	00000000 	andeq	r0, r0, r0
    6678:	0a700000 	beq	1c06680 <__ccfg+0x1be66d8>
    667c:	2b010000 	blcs	46684 <__ccfg+0x266dc>
    6680:	0004ad07 	andeq	sl, r4, r7, lsl #26
    6684:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    6688:	1c000000 	stcne	0, cr0, [r0], {-0}
    668c:	000004de 	ldrdeq	r0, [r0], -lr
    6690:	00000000 	andeq	r0, r0, r0
    6694:	00000a98 	muleq	r0, r8, sl
    6698:	c7073e01 	strgt	r3, [r7, -r1, lsl #28]
    669c:	1d000004 	stcne	0, cr0, [r0, #-16]
    66a0:	000004ec 	andeq	r0, r0, ip, ror #9
    66a4:	04de1e00 	ldrbeq	r1, [lr], #3584	; 0xe00
    66a8:	00000000 	andeq	r0, r0, r0
    66ac:	0ab00000 	beq	fec066b4 <_estack+0xdec016b4>
    66b0:	4a010000 	bmi	466b8 <__ccfg+0x26710>
    66b4:	04ec1d07 	strbteq	r1, [ip], #3335	; 0xd07
    66b8:	00000000 	andeq	r0, r0, r0
    66bc:	001bd51f 	andseq	sp, fp, pc, lsl r5
    66c0:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    66c4:	00006701 	andeq	r6, r0, r1, lsl #14
    66c8:	21200300 			; <UNDEFINED> instruction: 0x21200300
    66cc:	02000011 	andeq	r0, r0, #17
    66d0:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    66d4:	00000000 	andeq	r0, r0, r0
    66d8:	00000aa7 	andeq	r0, r0, r7, lsr #21
    66dc:	17dd0003 	ldrbne	r0, [sp, r3]
    66e0:	01040000 	mrseq	r0, (UNDEF: 4)
    66e4:	000000ac 	andeq	r0, r0, ip, lsr #1
    66e8:	001d470c 	andseq	r4, sp, ip, lsl #14
    66ec:	000e0a00 	andeq	r0, lr, r0, lsl #20
    66f0:	000c7000 	andeq	r7, ip, r0
    66f4:	00000000 	andeq	r0, r0, r0
    66f8:	00472100 	subeq	r2, r7, r0, lsl #2
    66fc:	06010200 	streq	r0, [r1], -r0, lsl #4
    6700:	00000c5d 	andeq	r0, r0, sp, asr ip
    6704:	6b050202 	blvs	146f14 <__ccfg+0x126f6c>
    6708:	0200000a 	andeq	r0, r0, #10
    670c:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    6710:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6714:	0007f805 	andeq	pc, r7, r5, lsl #16
    6718:	2a1c0300 	bcs	707320 <__ccfg+0x6e7378>
    671c:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    6720:	00004d18 	andeq	r4, r0, r8, lsl sp
    6724:	08010200 	stmdaeq	r1, {r9}
    6728:	00000c5b 	andeq	r0, r0, fp, asr ip
    672c:	002e1203 	eoreq	r1, lr, r3, lsl #4
    6730:	19310400 	ldmdbne	r1!, {sl}
    6734:	00000060 	andeq	r0, r0, r0, rrx
    6738:	66070202 	strvs	r0, [r7], -r2, lsl #4
    673c:	0300000d 	movweq	r0, #13
    6740:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    6744:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    6748:	02000000 	andeq	r0, r0, #0
    674c:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    6750:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6754:	00042107 	andeq	r2, r4, r7, lsl #2
    6758:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    675c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6760:	2b070402 	blcs	1c7770 <__ccfg+0x1a77c8>
    6764:	03000004 	movweq	r0, #4
    6768:	00001328 	andeq	r1, r0, r8, lsr #6
    676c:	41122605 	tstmi	r2, r5, lsl #12
    6770:	03000000 	movweq	r0, #0
    6774:	000028fb 	strdeq	r2, [r0], -fp
    6778:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    677c:	05000000 	streq	r0, [r0, #-0]
    6780:	0000009b 	muleq	r0, fp, r0
    6784:	00009b06 	andeq	r9, r0, r6, lsl #22
    6788:	1dc20300 	stclne	3, cr0, [r2]
    678c:	2b050000 	blcs	146794 <__ccfg+0x1267ec>
    6790:	00004112 	andeq	r4, r0, r2, lsl r1
    6794:	00b10600 	adcseq	r0, r1, r0, lsl #12
    6798:	b1050000 	mrslt	r0, (UNDEF: 5)
    679c:	03000000 	movweq	r0, #0
    67a0:	0000294d 	andeq	r2, r0, sp, asr #18
    67a4:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    67a8:	05000000 	streq	r0, [r0, #-0]
    67ac:	000000c7 	andeq	r0, r0, r7, asr #1
    67b0:	00064603 	andeq	r4, r6, r3, lsl #12
    67b4:	122d0500 	eorne	r0, sp, #0, 10
    67b8:	00000067 	andeq	r0, r0, r7, rrx
    67bc:	32050807 	andcc	r0, r5, #458752	; 0x70000
    67c0:	00017209 	andeq	r7, r1, r9, lsl #4
    67c4:	00340800 	eorseq	r0, r4, r0, lsl #16
    67c8:	34050000 	strcc	r0, [r5], #-0
    67cc:	0000b107 	andeq	fp, r0, r7, lsl #2
    67d0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    67d4:	064c0800 	strbeq	r0, [ip], -r0, lsl #16
    67d8:	35050000 	strcc	r0, [r5, #-0]
    67dc:	0000b103 	andeq	fp, r0, r3, lsl #2
    67e0:	06010100 	streq	r0, [r1], -r0, lsl #2
    67e4:	02e70800 	rsceq	r0, r7, #0, 16
    67e8:	36050000 	strcc	r0, [r5], -r0
    67ec:	0000b103 	andeq	fp, r0, r3, lsl #2
    67f0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    67f4:	06b70800 	ldrteq	r0, [r7], r0, lsl #16
    67f8:	37050000 	strcc	r0, [r5, -r0]
    67fc:	0000b103 	andeq	fp, r0, r3, lsl #2
    6800:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6804:	0a9f0800 	beq	fe7c880c <_estack+0xde7c380c>
    6808:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    680c:	0000b103 	andeq	fp, r0, r3, lsl #2
    6810:	00040100 	andeq	r0, r4, r0, lsl #2
    6814:	065b0900 	ldrbeq	r0, [fp], -r0, lsl #18
    6818:	3a050000 	bcc	146820 <__ccfg+0x126878>
    681c:	0000b107 	andeq	fp, r0, r7, lsl #2
    6820:	fb090100 	blx	246c2a <__ccfg+0x226c82>
    6824:	05000008 	streq	r0, [r0, #-8]
    6828:	00b1033c 	adcseq	r0, r1, ip, lsr r3
    682c:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    6830:	00000f3a 	andeq	r0, r0, sl, lsr pc
    6834:	b1033d05 	tstlt	r3, r5, lsl #26
    6838:	03000000 	movweq	r0, #0
    683c:	00091309 	andeq	r1, r9, r9, lsl #6
    6840:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    6844:	000000c7 	andeq	r0, r0, r7, asr #1
    6848:	1d030004 	stcne	0, cr0, [r3, #-16]
    684c:	05000003 	streq	r0, [r0, #-3]
    6850:	00e40341 	rsceq	r0, r4, r1, asr #6
    6854:	72060000 	andvc	r0, r6, #0
    6858:	0a000001 	beq	6864 <__exidx_end+0xba4>
    685c:	000006be 			; <UNDEFINED> instruction: 0x000006be
    6860:	7e1a4305 	cdpvc	3, 1, cr4, cr10, cr5, {0}
    6864:	01000001 	tsteq	r0, r1
    6868:	01a00a01 	lsleq	r0, r1, #20
    686c:	45050000 	strmi	r0, [r5, #-0]
    6870:	00019f0e 	andeq	r9, r1, lr, lsl #30
    6874:	0b010100 	bleq	46c7c <__ccfg+0x26cd4>
    6878:	0001a504 	andeq	sl, r1, r4, lsl #10
    687c:	08010200 	stmdaeq	r1, {r9}
    6880:	00000c64 	andeq	r0, r0, r4, ror #24
    6884:	0001a505 	andeq	sl, r1, r5, lsl #10
    6888:	03260a00 			; <UNDEFINED> instruction: 0x03260a00
    688c:	45050000 	strmi	r0, [r5, #-0]
    6890:	00019f1e 	andeq	r9, r1, lr, lsl pc
    6894:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6898:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    689c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    68a0:	000cd809 	andeq	sp, ip, r9, lsl #16
    68a4:	0b900600 	bleq	fe4080ac <_estack+0xde4030ac>
    68a8:	00000067 	andeq	r0, r0, r7, rrx
    68ac:	10750900 	rsbsne	r0, r5, r0, lsl #18
    68b0:	91060000 	mrsls	r0, (UNDEF: 6)
    68b4:	00009b08 	andeq	r9, r0, r8, lsl #22
    68b8:	c5090400 	strgt	r0, [r9, #-1024]	; 0xfffffc00
    68bc:	06000001 	streq	r0, [r0], -r1
    68c0:	00bd1092 	umlalseq	r1, sp, r2, r0
    68c4:	00060000 	andeq	r0, r6, r0
    68c8:	000ccc03 	andeq	ip, ip, r3, lsl #24
    68cc:	03930600 	orrseq	r0, r3, #0, 12
    68d0:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    68d4:	0001f00c 	andeq	pc, r1, ip
    68d8:	00020700 	andeq	r0, r2, r0, lsl #14
    68dc:	0a000d00 	beq	9ce4 <__exidx_end+0x4024>
    68e0:	0000093d 	andeq	r0, r0, sp, lsr r9
    68e4:	fc0f9906 	stc2	9, cr9, [pc], {6}	; <UNPREDICTABLE>
    68e8:	01000001 	tsteq	r0, r1
    68ec:	c2040b01 	andgt	r0, r4, #1024	; 0x400
    68f0:	07000000 	streq	r0, [r0, -r0]
    68f4:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    68f8:	00000245 	andeq	r0, r0, r5, asr #4
    68fc:	00091a08 	andeq	r1, r9, r8, lsl #20
    6900:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    6904:	000000b1 	strheq	r0, [r0], -r1
    6908:	00010701 	andeq	r0, r1, r1, lsl #14
    690c:	0005cc08 	andeq	ip, r5, r8, lsl #24
    6910:	03940700 	orrseq	r0, r4, #0, 14
    6914:	000000b1 	strheq	r0, [r0], -r1
    6918:	00000101 	andeq	r0, r0, r1, lsl #2
    691c:	0aab0300 	beq	feac7524 <_estack+0xdeac2524>
    6920:	96070000 	strls	r0, [r7], -r0
    6924:	00021b03 	andeq	r1, r2, r3, lsl #22
    6928:	02450500 	subeq	r0, r5, #0, 10
    692c:	510c0000 	mrspl	r0, (UNDEF: 12)
    6930:	61000002 	tstvs	r0, r2
    6934:	0d000002 	stceq	0, cr0, [r0, #-8]
    6938:	02560500 	subseq	r0, r6, #0, 10
    693c:	aa0a0000 	bge	286944 <__ccfg+0x26699c>
    6940:	07000003 	streq	r0, [r0, -r3]
    6944:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
    6948:	01010000 	mrseq	r0, (UNDEF: 1)
    694c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    6950:	00027f00 	andeq	r7, r2, r0, lsl #30
    6954:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6958:	00000274 	andeq	r0, r0, r4, ror r2
    695c:	00060e0a 	andeq	r0, r6, sl, lsl #28
    6960:	13060800 	movwne	r0, #26624	; 0x6800
    6964:	0000027f 	andeq	r0, r0, pc, ror r2
    6968:	dd0a0101 	stfles	f0, [sl, #-4]
    696c:	06000008 	streq	r0, [r0], -r8
    6970:	00c70ec3 	sbceq	r0, r7, r3, asr #29
    6974:	01010000 	mrseq	r0, (UNDEF: 1)
    6978:	000c720e 	andeq	r7, ip, lr, lsl #4
    697c:	016e0900 	cmneq	lr, r0, lsl #18
    6980:	0002ad10 	andeq	sl, r2, r0, lsl sp
    6984:	b3040b00 	movwlt	r0, #19200	; 0x4b00
    6988:	0f000002 	svceq	0x00000002
    698c:	0002bf01 	andeq	fp, r2, r1, lsl #30
    6990:	009b1000 	addseq	r1, fp, r0
    6994:	0c000000 	stceq	0, cr0, [r0], {-0}
    6998:	000001ac 	andeq	r0, r0, ip, lsr #3
    699c:	000002ca 	andeq	r0, r0, sl, asr #5
    69a0:	bf05000d 	svclt	0x0005000d
    69a4:	11000002 	tstne	r0, r2
    69a8:	000009e6 	andeq	r0, r0, r6, ror #19
    69ac:	16017f09 	strne	r7, [r1], -r9, lsl #30
    69b0:	000002ca 	andeq	r0, r0, sl, asr #5
    69b4:	96110101 	ldrls	r0, [r1], -r1, lsl #2
    69b8:	09000003 	stmdbeq	r0, {r0, r1}
    69bc:	d3140182 	tstle	r4, #-2147483616	; 0x80000020
    69c0:	01000000 	mrseq	r0, (UNDEF: 0)
    69c4:	036e1101 	cmneq	lr, #1073741824	; 0x40000000
    69c8:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    69cc:	00c70e02 	sbceq	r0, r7, r2, lsl #28
    69d0:	01010000 	mrseq	r0, (UNDEF: 1)
    69d4:	03090812 	movweq	r0, #38930	; 0x9812
    69d8:	03230903 			; <UNDEFINED> instruction: 0x03230903
    69dc:	a1130000 	tstge	r3, r0
    69e0:	0900003c 	stmdbeq	r0, {r2, r3, r4, r5}
    69e4:	9b070307 	blls	1c7608 <__ccfg+0x1a7660>
    69e8:	00000000 	andeq	r0, r0, r0
    69ec:	000fcd13 	andeq	ip, pc, r3, lsl sp	; <UNPREDICTABLE>
    69f0:	03080900 	movweq	r0, #35072	; 0x8900
    69f4:	0000d808 	andeq	sp, r0, r8, lsl #16
    69f8:	0e000400 	cfcpyseq	mvf0, mvf0
    69fc:	00000a09 	andeq	r0, r0, r9, lsl #20
    6a00:	03030909 	movweq	r0, #14601	; 0x3909
    6a04:	000002fc 	strdeq	r0, [r0], -ip
    6a08:	00002914 	andeq	r2, r0, r4, lsl r9
    6a0c:	0b093000 	bleq	252a14 <__ccfg+0x232a6c>
    6a10:	03930803 	orrseq	r0, r3, #196608	; 0x30000
    6a14:	24130000 	ldrcs	r0, [r3], #-0
    6a18:	0900001f 	stmdbeq	r0, {r0, r1, r2, r3, r4}
    6a1c:	9b080314 	blls	207674 <__ccfg+0x1e76cc>
    6a20:	00000000 	andeq	r0, r0, r0
    6a24:	000be713 	andeq	lr, fp, r3, lsl r7
    6a28:	03150900 	tsteq	r5, #0, 18
    6a2c:	00009b08 	andeq	r9, r0, r8, lsl #22
    6a30:	8e130200 	cdphi	2, 1, cr0, cr3, cr0, {0}
    6a34:	0900004c 	stmdbeq	r0, {r2, r3, r6}
    6a38:	a00b0316 	andge	r0, fp, r6, lsl r3
    6a3c:	04000002 	streq	r0, [r0], #-2
    6a40:	00475413 	subeq	r5, r7, r3, lsl r4
    6a44:	03170900 	tsteq	r7, #0, 18
    6a48:	0000d809 	andeq	sp, r0, r9, lsl #16
    6a4c:	0f130800 	svceq	0x00130800
    6a50:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6a54:	930f0318 	movwls	r0, #62232	; 0xf318
    6a58:	0c000003 	stceq	0, cr0, [r0], {3}
    6a5c:	00095d13 	andeq	r5, r9, r3, lsl sp
    6a60:	03190900 	tsteq	r9, #0, 18
    6a64:	0003a315 	andeq	sl, r3, r5, lsl r3
    6a68:	0c002c00 	stceq	12, cr2, [r0], {-0}
    6a6c:	00000323 	andeq	r0, r0, r3, lsr #6
    6a70:	000003a3 	andeq	r0, r0, r3, lsr #7
    6a74:	00008815 	andeq	r8, r0, r5, lsl r8
    6a78:	0b000300 	bleq	7680 <__exidx_end+0x19c0>
    6a7c:	00033004 	andeq	r3, r3, r4
    6a80:	0bdc0e00 	bleq	ff70a288 <_estack+0xdf705288>
    6a84:	1c090000 	stcne	0, cr0, [r9], {-0}
    6a88:	03301b03 	teqeq	r0, #3072	; 0xc00
    6a8c:	bc110000 	ldclt	0, cr0, [r1], {-0}
    6a90:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6a94:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
    6a98:	01000003 	tsteq	r0, r3
    6a9c:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
    6aa0:	0a000003 	beq	6ab4 <__exidx_end+0xdf4>
    6aa4:	0000070f 	andeq	r0, r0, pc, lsl #14
    6aa8:	9b131d0a 	blls	4cded8 <__ccfg+0x4adf30>
    6aac:	01000000 	mrseq	r0, (UNDEF: 0)
    6ab0:	02ee0a01 	rsceq	r0, lr, #4096	; 0x1000
    6ab4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    6ab8:	0000ac1a 	andeq	sl, r0, sl, lsl ip
    6abc:	0a010100 	beq	46ec4 <__ccfg+0x26f1c>
    6ac0:	00000c69 	andeq	r0, r0, r9, ror #24
    6ac4:	ac241e0a 	stcge	14, cr1, [r4], #-40	; 0xffffffd8
    6ac8:	01000000 	mrseq	r0, (UNDEF: 0)
    6acc:	0c870a01 	vstmiaeq	r7, {s0}
    6ad0:	220a0000 	andcs	r0, sl, #0
    6ad4:	0003c514 	andeq	ip, r3, r4, lsl r5
    6ad8:	16010100 	strne	r0, [r1], -r0, lsl #2
    6adc:	00000bc1 	andeq	r0, r0, r1, asr #23
    6ae0:	c70f0f01 	strgt	r0, [pc, -r1, lsl #30]
    6ae4:	05000000 	streq	r0, [r0, #-0]
    6ae8:	00000003 	andeq	r0, r0, r3
    6aec:	0cf31600 	ldcleq	6, cr1, [r3]
    6af0:	0f010000 	svceq	0x00010000
    6af4:	0000c715 	andeq	ip, r0, r5, lsl r7
    6af8:	00030500 	andeq	r0, r3, r0, lsl #10
    6afc:	16000000 	strne	r0, [r0], -r0
    6b00:	00001d99 	muleq	r0, r9, sp
    6b04:	15141001 	ldrne	r1, [r4, #-1]
    6b08:	05000002 	streq	r0, [r0, #-2]
    6b0c:	00000003 	andeq	r0, r0, r3
    6b10:	1cfd1600 	ldclne	6, cr1, [sp]
    6b14:	12010000 	andne	r0, r1, #0
    6b18:	0000b10d 	andeq	fp, r0, sp, lsl #2
    6b1c:	b8030500 	stmdalt	r3, {r8, sl}
    6b20:	16200005 	strtne	r0, [r0], -r5
    6b24:	00001d41 	andeq	r1, r0, r1, asr #26
    6b28:	b1031301 	tstlt	r3, r1, lsl #6
    6b2c:	05000000 	streq	r0, [r0, #-0]
    6b30:	0005b903 	andeq	fp, r5, r3, lsl #18
    6b34:	165a1620 	ldrbne	r1, [sl], -r0, lsr #12
    6b38:	15010000 	strne	r0, [r1, #-0]
    6b3c:	00009b0d 	andeq	r9, r0, sp, lsl #22
    6b40:	00030500 	andeq	r0, r3, r0, lsl #10
    6b44:	17000000 	strne	r0, [r0, -r0]
    6b48:	001cc901 	andseq	ip, ip, r1, lsl #18
    6b4c:	06130300 	ldreq	r0, [r3], -r0, lsl #6
	...
    6b58:	01189c01 	tsteq	r8, r1, lsl #24
    6b5c:	00001d9e 	muleq	r0, lr, sp
    6b60:	01070803 	tsteq	r7, r3, lsl #16
    6b64:	000000c7 	andeq	r0, r0, r7, asr #1
	...
    6b70:	04bc9c01 	ldrteq	r9, [ip], #3073	; 0xc01
    6b74:	65190000 	ldrvs	r0, [r9, #-0]
    6b78:	08030072 	stmdaeq	r3, {r1, r4, r5, r6}
    6b7c:	0004bc19 	andeq	fp, r4, r9, lsl ip
    6b80:	00239700 	eoreq	r9, r3, r0, lsl #14
    6b84:	72651a00 	rsbvc	r1, r5, #0, 20
    6b88:	08030075 	stmdaeq	r3, {r0, r2, r4, r5, r6}
    6b8c:	0004c224 	andeq	ip, r4, r4, lsr #4
    6b90:	00510100 	subseq	r0, r1, r0, lsl #2
    6b94:	008f040b 	addeq	r0, pc, fp, lsl #8
    6b98:	040b0000 	streq	r0, [fp], #-0
    6b9c:	000000c7 	andeq	r0, r0, r7, asr #1
    6ba0:	1d20011b 	stfnes	f0, [r0, #-108]!	; 0xffffff94
    6ba4:	60010000 	andvs	r0, r1, r0
    6ba8:	9b010601 	blls	483b4 <__ccfg+0x2840c>
	...
    6bb4:	01000000 	mrseq	r0, (UNDEF: 0)
    6bb8:	0004f69c 	muleq	r4, ip, r6
    6bbc:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    6bc0:	01600100 	cmneq	r0, r0, lsl #2
    6bc4:	00009b14 	andeq	r9, r0, r4, lsl fp
    6bc8:	0023aa00 	eoreq	sl, r3, r0, lsl #20
    6bcc:	011d0000 	tsteq	sp, r0
    6bd0:	00001d17 	andeq	r1, r0, r7, lsl sp
    6bd4:	06015b01 	streq	r5, [r1], -r1, lsl #22
	...
    6be0:	011b9c01 	tsteq	fp, r1, lsl #24
    6be4:	00001cf4 	strdeq	r1, [r0], -r4
    6be8:	06012101 	streq	r2, [r1], -r1, lsl #2
    6bec:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6bf8:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    6bfc:	1c000005 	stcne	0, cr0, [r0], {5}
    6c00:	01007473 	tsteq	r0, r3, ror r4
    6c04:	9b150121 	blls	547090 <__ccfg+0x5270e8>
    6c08:	bd000000 	stclt	0, cr0, [r0, #-0]
    6c0c:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    6c10:	21010061 	tstcs	r1, r1, rrx
    6c14:	00c71f01 	sbceq	r1, r7, r1, lsl #30
    6c18:	23d00000 	bicscs	r0, r0, #0
    6c1c:	731c0000 	tstvc	ip, #0
    6c20:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6c24:	0002152e 	andeq	r1, r2, lr, lsr #10
    6c28:	0023ee00 	eoreq	lr, r3, r0, lsl #28
    6c2c:	656c1c00 	strbvs	r1, [ip, #-3072]!	; 0xfffff400
    6c30:	2101006e 	tstcs	r1, lr, rrx
    6c34:	009b3601 	addseq	r3, fp, r1, lsl #12
    6c38:	24010000 	strcs	r0, [r1], #-0
    6c3c:	621e0000 	andsvs	r0, lr, #0
    6c40:	2301006c 	movwcs	r0, #4204	; 0x106c
    6c44:	009b0701 	addseq	r0, fp, r1, lsl #14
    6c48:	24140000 	ldrcs	r0, [r4], #-0
    6c4c:	0b1f0000 	bleq	7c6c54 <__ccfg+0x7a6cac>
    6c50:	0100001d 	tsteq	r0, sp, lsl r0
    6c54:	00010132 	andeq	r0, r1, r2, lsr r1
    6c58:	20000000 	andcs	r0, r0, r0
    6c5c:	000009f6 	strdeq	r0, [r0], -r6
    6c60:	00000000 	andeq	r0, r0, r0
    6c64:	00000c58 	andeq	r0, r0, r8, asr ip
    6c68:	03014301 	movweq	r4, #4865	; 0x1301
    6c6c:	000005a3 	andeq	r0, r0, r3, lsr #11
    6c70:	000a1221 	andeq	r1, sl, r1, lsr #4
    6c74:	0a052100 	beq	14f07c <__ccfg+0x12f0d4>
    6c78:	22000000 	andcs	r0, r0, #0
    6c7c:	000009f6 	strdeq	r0, [r0], -r6
	...
    6c88:	03015001 	movweq	r5, #4097	; 0x1001
    6c8c:	000a1221 	andeq	r1, sl, r1, lsr #4
    6c90:	0a052100 	beq	14f098 <__ccfg+0x12f0f0>
    6c94:	00000000 	andeq	r0, r0, r0
    6c98:	1ceb0118 	stfnee	f0, [fp], #96	; 0x60
    6c9c:	cb010000 	blgt	46ca4 <__ccfg+0x26cfc>
    6ca0:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6cac:	9c010000 	stcls	0, cr0, [r1], {-0}
    6cb0:	00000681 	andeq	r0, r0, r1, lsl #13
    6cb4:	00747319 	rsbseq	r7, r4, r9, lsl r3
    6cb8:	9b15cb01 	blls	5798c4 <__ccfg+0x55991c>
    6cbc:	3d000000 	stccc	0, cr0, [r0, #-0]
    6cc0:	23000024 	movwcs	r0, #36	; 0x24
    6cc4:	00001d28 	andeq	r1, r0, r8, lsr #26
    6cc8:	c71fcb01 	ldrgt	ip, [pc, -r1, lsl #22]
    6ccc:	5b000000 	blpl	6cd4 <__exidx_end+0x1014>
    6cd0:	23000024 	movwcs	r0, #36	; 0x24
    6cd4:	00001cd7 	ldrdeq	r1, [r0], -r7
    6cd8:	c72bcb01 	strgt	ip, [fp, -r1, lsl #22]!
    6cdc:	84000000 	strhi	r0, [r0], #-0
    6ce0:	24000024 	strcs	r0, [r0], #-36	; 0xffffffdc
    6ce4:	00001cc3 	andeq	r1, r0, r3, asr #25
    6ce8:	0001e601 	andeq	lr, r1, r1, lsl #12
    6cec:	24000000 	strcs	r0, [r0], #-0
    6cf0:	00001dac 	andeq	r1, r0, ip, lsr #27
    6cf4:	0001ea01 	andeq	lr, r1, r1, lsl #20
    6cf8:	25000000 	strcs	r0, [r0, #-0]
    6cfc:	0000085e 	andeq	r0, r0, lr, asr r8
    6d00:	00000000 	andeq	r0, r0, r0
    6d04:	00000c28 	andeq	r0, r0, r8, lsr #24
    6d08:	2604fc01 	strcs	pc, [r4], -r1, lsl #24
    6d0c:	00000878 	andeq	r0, r0, r8, ror r8
    6d10:	000024a2 	andeq	r2, r0, r2, lsr #9
    6d14:	00086c26 	andeq	r6, r8, r6, lsr #24
    6d18:	0024b500 	eoreq	fp, r4, r0, lsl #10
    6d1c:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    6d20:	00000000 	andeq	r0, r0, r0
    6d24:	0c400000 	mareq	acc0, r0, r0
    6d28:	43010000 	movwmi	r0, #4096	; 0x1000
    6d2c:	00066402 	andeq	r6, r6, r2, lsl #8
    6d30:	0a122100 	beq	48f138 <__ccfg+0x46f190>
    6d34:	05210000 	streq	r0, [r1, #-0]!
    6d38:	0000000a 	andeq	r0, r0, sl
    6d3c:	0009f628 	andeq	pc, r9, r8, lsr #12
	...
    6d48:	02480100 	subeq	r0, r8, #0, 2
    6d4c:	000a1221 	andeq	r1, sl, r1, lsr #4
    6d50:	0a052100 	beq	14f158 <__ccfg+0x12f1b0>
    6d54:	00000000 	andeq	r0, r0, r0
    6d58:	2d011800 	stccs	8, cr1, [r1, #-0]
    6d5c:	0100001d 	tsteq	r0, sp, lsl r0
    6d60:	9b0106b0 	blls	48828 <__ccfg+0x28880>
	...
    6d6c:	01000000 	mrseq	r0, (UNDEF: 0)
    6d70:	0007049c 	muleq	r7, ip, r4
    6d74:	00611900 	rsbeq	r1, r1, r0, lsl #18
    6d78:	c715b001 	ldrgt	fp, [r5, -r1]
    6d7c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    6d80:	19000024 	stmdbne	r0, {r2, r5}
    6d84:	b0010073 	andlt	r0, r1, r3, ror r0
    6d88:	0007041e 	andeq	r0, r7, lr, lsl r4
    6d8c:	0024f100 	eoreq	pc, r4, r0, lsl #2
    6d90:	656c1900 	strbvs	r1, [ip, #-2304]!	; 0xfffff700
    6d94:	b001006e 	andlt	r0, r1, lr, rrx
    6d98:	00009b26 	andeq	r9, r0, r6, lsr #22
    6d9c:	00252500 	eoreq	r2, r5, r0, lsl #10
    6da0:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    6da4:	00000000 	andeq	r0, r0, r0
    6da8:	0c100000 	ldceq	0, cr0, [r0], {-0}
    6dac:	ba010000 	blt	46db4 <__ccfg+0x26e0c>
    6db0:	0006e802 	andeq	lr, r6, r2, lsl #16
    6db4:	0a122100 	beq	48f1bc <__ccfg+0x46f214>
    6db8:	05210000 	streq	r0, [r1, #-0]!
    6dbc:	0000000a 	andeq	r0, r0, sl
    6dc0:	0009f628 	andeq	pc, r9, r8, lsr #12
	...
    6dcc:	02c40100 	sbceq	r0, r4, #0, 2
    6dd0:	000a1221 	andeq	r1, sl, r1, lsr #4
    6dd4:	0a052100 	beq	14f1dc <__ccfg+0x12f234>
    6dd8:	00000000 	andeq	r0, r0, r0
    6ddc:	00b1040b 	adcseq	r0, r1, fp, lsl #8
    6de0:	01170000 	tsteq	r7, r0
    6de4:	00001ce2 	andeq	r1, r0, r2, ror #25
    6de8:	8406a801 	strhi	sl, [r6], #-2049	; 0xfffff7ff
    6dec:	98000026 	stmdals	r0, {r1, r2, r5}
    6df0:	01000026 	tsteq	r0, r6, lsr #32
    6df4:	0301299c 	movweq	r2, #6556	; 0x199c
    6df8:	0100001d 	tsteq	r0, sp, lsl r0
    6dfc:	009b0693 	umullseq	r0, fp, r3, r6
    6e00:	26700000 	ldrbtcs	r0, [r0], -r0
    6e04:	26840000 	strcs	r0, [r4], r0
    6e08:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e0c:	001da62a 	andseq	sl, sp, sl, lsr #12
    6e10:	0d820100 	stfeqs	f0, [r2]
    6e14:	0000260c 	andeq	r2, r0, ip, lsl #12
    6e18:	0000264c 	andeq	r2, r0, ip, asr #12
    6e1c:	07969c01 	ldreq	r9, [r6, r1, lsl #24]
    6e20:	9f280000 	svcls	0x00280000
    6e24:	26000007 	strcs	r0, [r0], -r7
    6e28:	3a000026 	bcc	6ec8 <__exidx_end+0x1208>
    6e2c:	01000026 	tsteq	r0, r6, lsr #32
    6e30:	f627038a 			; <UNDEFINED> instruction: 0xf627038a
    6e34:	26000009 	strcs	r0, [r0], -r9
    6e38:	e0000026 	and	r0, r0, r6, lsr #32
    6e3c:	0100000b 	tsteq	r0, fp
    6e40:	07790272 			; <UNDEFINED> instruction: 0x07790272
    6e44:	12210000 	eorne	r0, r1, #0
    6e48:	2100000a 	tstcs	r0, sl
    6e4c:	00000a05 	andeq	r0, r0, r5, lsl #20
    6e50:	09f62500 	ldmibeq	r6!, {r8, sl, sp}^
    6e54:	26320000 	ldrtcs	r0, [r2], -r0
    6e58:	0bf80000 	bleq	ffe06e60 <_estack+0xdfe01e60>
    6e5c:	74010000 	strvc	r0, [r1], #-0
    6e60:	0a122102 	beq	48f270 <__ccfg+0x46f2c8>
    6e64:	05210000 	streq	r0, [r1, #-0]!
    6e68:	0000000a 	andeq	r0, r0, sl
    6e6c:	3a2b0000 	bcc	ac6e74 <__ccfg+0xaa6ecc>
    6e70:	0100001d 	tsteq	r0, sp, lsl r0
    6e74:	2b010d78 	blcs	4a45c <__ccfg+0x2a4b4>
    6e78:	00001d93 	muleq	r0, r3, sp
    6e7c:	010d6d01 	tsteq	sp, r1, lsl #26
    6e80:	001db22b 	andseq	fp, sp, fp, lsr #4
    6e84:	0d660100 	stfeqe	f0, [r6, #-0]
    6e88:	1db82c01 	ldcne	12, cr2, [r8, #4]!
    6e8c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    6e90:	25b8010d 	ldrcs	r0, [r8, #269]!	; 0x10d
    6e94:	260c0000 	strcs	r0, [ip], -r0
    6e98:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e9c:	00000842 	andeq	r0, r0, r2, asr #16
    6ea0:	00747319 	rsbseq	r7, r4, r9, lsl r3
    6ea4:	9b195801 	blls	65ceb0 <__ccfg+0x63cf08>
    6ea8:	43000000 	movwmi	r0, #0
    6eac:	19000025 	stmdbne	r0, {r0, r2, r5}
    6eb0:	006c6564 	rsbeq	r6, ip, r4, ror #10
    6eb4:	9b225801 	blls	89cec0 <__ccfg+0x87cf18>
    6eb8:	56000000 	strpl	r0, [r0], -r0
    6ebc:	25000025 	strcs	r0, [r0, #-37]	; 0xffffffdb
    6ec0:	00000842 	andeq	r0, r0, r2, asr #16
    6ec4:	000025c0 	andeq	r2, r0, r0, asr #11
    6ec8:	00000b98 	muleq	r0, r8, fp
    6ecc:	2d135c01 	ldccs	12, cr5, [r3, #-4]
    6ed0:	00000b98 	muleq	r0, r8, fp
    6ed4:	0008532e 	andeq	r5, r8, lr, lsr #6
    6ed8:	00256900 	eoreq	r6, r5, r0, lsl #18
    6edc:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    6ee0:	25c00000 	strbcs	r0, [r0]
    6ee4:	0bb80000 	bleq	fee06eec <_estack+0xdee01eec>
    6ee8:	51010000 	mrspl	r0, (UNDEF: 1)
    6eec:	00082402 	andeq	r2, r8, r2, lsl #8
    6ef0:	0a122100 	beq	48f2f8 <__ccfg+0x46f350>
    6ef4:	05210000 	streq	r0, [r1, #-0]!
    6ef8:	0000000a 	andeq	r0, r0, sl
    6efc:	0009f628 	andeq	pc, r9, r8, lsr #12
    6f00:	0025da00 	eoreq	sp, r5, r0, lsl #20
    6f04:	0025de00 	eoreq	sp, r5, r0, lsl #28
    6f08:	02540100 	subseq	r0, r4, #0, 2
    6f0c:	000a1221 	andeq	r1, sl, r1, lsr #4
    6f10:	0a052100 	beq	14f318 <__ccfg+0x12f370>
    6f14:	00000000 	andeq	r0, r0, r0
    6f18:	352f0000 	strcc	r0, [pc, #-0]!	; 6f20 <__exidx_end+0x1260>
    6f1c:	0100001d 	tsteq	r0, sp, lsl r0
    6f20:	00b10d4b 	adcseq	r0, r1, fp, asr #26
    6f24:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    6f28:	30000008 	andcc	r0, r0, r8
    6f2c:	4f010072 	svcmi	0x00010072
    6f30:	0000b107 	andeq	fp, r0, r7, lsl #2
    6f34:	11310000 	teqne	r1, r0
    6f38:	0100001d 	tsteq	r0, sp, lsl r0
    6f3c:	01010d41 	tsteq	r1, r1, asr #26
    6f40:	00000883 	andeq	r0, r0, r3, lsl #17
    6f44:	646d6332 	strbtvs	r6, [sp], #-818	; 0xfffffcce
    6f48:	19410100 	stmdbne	r1, {r8}^
    6f4c:	000000b1 	strheq	r0, [r0], -r1
    6f50:	01006132 	tsteq	r0, r2, lsr r1
    6f54:	00c72441 	sbceq	r2, r7, r1, asr #8
    6f58:	2c000000 	stccs	0, cr0, [r0], {-0}
    6f5c:	00001cdc 	ldrdeq	r1, [r0], -ip
    6f60:	010d3a01 	tsteq	sp, r1, lsl #20
    6f64:	000025a0 	andeq	r2, r0, r0, lsr #11
    6f68:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
    6f6c:	08e59c01 	stmiaeq	r5!, {r0, sl, fp, ip, pc}^
    6f70:	63190000 	tstvs	r9, #0
    6f74:	0100646d 	tsteq	r0, sp, ror #8
    6f78:	00b1193a 	adcseq	r1, r1, sl, lsr r9
    6f7c:	257c0000 	ldrbcs	r0, [ip, #-0]!
    6f80:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6f84:	a0000009 	andge	r0, r0, r9
    6f88:	80000025 	andhi	r0, r0, r5, lsr #32
    6f8c:	0100000b 	tsteq	r0, fp
    6f90:	08c9023c 	stmiaeq	r9, {r2, r3, r4, r5, r9}^
    6f94:	12210000 	eorne	r0, r1, #0
    6f98:	2100000a 	tstcs	r0, sl
    6f9c:	00000a05 	andeq	r0, r0, r5, lsl #20
    6fa0:	09f62800 	ldmibeq	r6!, {fp, sp}^
    6fa4:	25ac0000 	strcs	r0, [ip, #0]!
    6fa8:	25b00000 	ldrcs	r0, [r0, #0]!
    6fac:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    6fb0:	0a122102 	beq	48f3c0 <__ccfg+0x46f418>
    6fb4:	05210000 	streq	r0, [r1, #-0]!
    6fb8:	0000000a 	andeq	r0, r0, sl
    6fbc:	1dc72c00 	stclne	12, cr2, [r7]
    6fc0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    6fc4:	2570010d 	ldrbcs	r0, [r0, #-269]!	; 0xfffffef3
    6fc8:	25a00000 	strcs	r0, [r0, #0]!
    6fcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    6fd0:	00000979 	andeq	r0, r0, r9, ror r9
    6fd4:	01006219 	tsteq	r0, r9, lsl r2
    6fd8:	00b11c29 	adcseq	r1, r1, r9, lsr #24
    6fdc:	258f0000 	strcs	r0, [pc]	; 6fe4 <__exidx_end+0x1324>
    6fe0:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    6fe4:	062b0100 	strteq	r0, [fp], -r0, lsl #2
    6fe8:	00000081 	andeq	r0, r0, r1, lsl #1
    6fec:	000a3d27 	andeq	r3, sl, r7, lsr #26
    6ff0:	00257800 	eoreq	r7, r5, r0, lsl #16
    6ff4:	000b4800 	andeq	r4, fp, r0, lsl #16
    6ff8:	03320100 	teqeq	r2, #0, 2
    6ffc:	0000092e 	andeq	r0, r0, lr, lsr #18
    7000:	000a4c21 	andeq	r4, sl, r1, lsr #24
    7004:	3d330000 	ldccc	0, cr0, [r3, #-0]
    7008:	8400000a 	strhi	r0, [r0], #-10
    700c:	88000025 	stmdahi	r0, {r0, r2, r5}
    7010:	01000025 	tsteq	r0, r5, lsr #32
    7014:	0948042f 	stmdbeq	r8, {r0, r1, r2, r3, r5, sl}^
    7018:	4c210000 	stcmi	0, cr0, [r1], #-0
    701c:	0000000a 	andeq	r0, r0, sl
    7020:	000a2033 	andeq	r2, sl, r3, lsr r0
    7024:	00258800 	eoreq	r8, r5, r0, lsl #16
    7028:	00258a00 	eoreq	r8, r5, r0, lsl #20
    702c:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    7030:	00000962 	andeq	r0, r0, r2, ror #18
    7034:	000a2f21 	andeq	r2, sl, r1, lsr #30
    7038:	20250000 	eorcs	r0, r5, r0
    703c:	9000000a 	andls	r0, r0, sl
    7040:	68000025 	stmdavs	r0, {r0, r2, r5}
    7044:	0100000b 	tsteq	r0, fp
    7048:	2f210333 	svccs	0x00210333
    704c:	0000000a 	andeq	r0, r0, sl
    7050:	1dbe3400 	cfldrsne	mvf3, [lr]
    7054:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    7058:	0000b10d 	andeq	fp, r0, sp, lsl #2
    705c:	00253c00 	eoreq	r3, r5, r0, lsl #24
    7060:	00257000 	eoreq	r7, r5, r0
    7064:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    7068:	30000009 	andcc	r0, r0, r9
    706c:	1b010069 	blne	47218 <__ccfg+0x27270>
    7070:	00008106 	andeq	r8, r0, r6, lsl #2
    7074:	00623500 	rsbeq	r3, r2, r0, lsl #10
    7078:	b1071c01 	tstlt	r7, r1, lsl #24
    707c:	ad000000 	stcge	0, cr0, [r0, #-0]
    7080:	27000025 	strcs	r0, [r0, -r5, lsr #32]
    7084:	00000a3d 	andeq	r0, r0, sp, lsr sl
    7088:	00002540 	andeq	r2, r0, r0, asr #10
    708c:	00000ae8 	andeq	r0, r0, r8, ror #21
    7090:	c5032201 	strgt	r2, [r3, #-513]	; 0xfffffdff
    7094:	21000009 	tstcs	r0, r9
    7098:	00000a4c 	andeq	r0, r0, ip, asr #20
    709c:	0a202700 	beq	810ca4 <__ccfg+0x7f0cfc>
    70a0:	25460000 	strbcs	r0, [r6, #-0]
    70a4:	0b100000 	bleq	4070ac <__ccfg+0x3e7104>
    70a8:	23010000 	movwcs	r0, #4096	; 0x1000
    70ac:	0009df03 	andeq	sp, r9, r3, lsl #30
    70b0:	0a2f2100 	beq	bcf4b8 <__ccfg+0xbaf510>
    70b4:	25000000 	strcs	r0, [r0, #-0]
    70b8:	00000a5a 	andeq	r0, r0, sl, asr sl
    70bc:	00002548 	andeq	r2, r0, r8, asr #10
    70c0:	00000b28 	andeq	r0, r0, r8, lsr #22
    70c4:	21072001 	tstcs	r7, r1
    70c8:	00000a6c 	andeq	r0, r0, ip, ror #20
    70cc:	50360000 	eorspl	r0, r6, r0
    70d0:	0200000f 	andeq	r0, r0, #15
    70d4:	01010206 	tsteq	r1, r6, lsl #4
    70d8:	000a2003 	andeq	r2, sl, r3
    70dc:	11213700 			; <UNDEFINED> instruction: 0x11213700
    70e0:	06020000 	streq	r0, [r2], -r0
    70e4:	00672302 	rsbeq	r2, r7, r2, lsl #6
    70e8:	30370000 	eorscc	r0, r7, r0
    70ec:	02000014 	andeq	r0, r0, #20
    70f0:	67370206 	ldrvs	r0, [r7, -r6, lsl #4]!
    70f4:	00000000 	andeq	r0, r0, r0
    70f8:	0012c436 	andseq	ip, r2, r6, lsr r4
    70fc:	01540200 	cmpeq	r4, r0, lsl #4
    7100:	3d030101 	stfccs	f0, [r3, #-4]
    7104:	3700000a 	strcc	r0, [r0, -sl]
    7108:	00001121 	andeq	r1, r0, r1, lsr #2
    710c:	19015402 	stmdbne	r1, {r1, sl, ip, lr}
    7110:	00000067 	andeq	r0, r0, r7, rrx
    7114:	13d13600 	bicsne	r3, r1, #0, 12
    7118:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    711c:	03010101 	movweq	r0, #4353	; 0x1101
    7120:	00000a5a 	andeq	r0, r0, sl, asr sl
    7124:	00112137 	andseq	r2, r1, r7, lsr r1
    7128:	011e0200 	tsteq	lr, r0, lsl #4
    712c:	00006717 	andeq	r6, r0, r7, lsl r7
    7130:	d5380000 	ldrle	r0, [r8, #-0]!
    7134:	0200001b 	andeq	r0, r0, #27
    7138:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    713c:	03000000 	movweq	r0, #0
    7140:	00000a79 	andeq	r0, r0, r9, ror sl
    7144:	00112139 	andseq	r2, r1, r9, lsr r1
    7148:	18a40200 	stmiane	r4!, {r9}
    714c:	00000067 	andeq	r0, r0, r7, rrx
    7150:	07963a00 	ldreq	r3, [r6, r0, lsl #20]
    7154:	264c0000 	strbcs	r0, [ip], -r0
    7158:	26700000 	ldrbtcs	r0, [r0], -r0
    715c:	9c010000 	stcls	0, cr0, [r1], {-0}
    7160:	00079628 	andeq	r9, r7, r8, lsr #12
    7164:	00265600 	eoreq	r5, r6, r0, lsl #12
    7168:	00266a00 	eoreq	r6, r6, r0, lsl #20
    716c:	0d780100 	ldfeqe	f0, [r8, #-0]
    7170:	0007a83b 	andeq	sl, r7, fp, lsr r8
    7174:	00266000 	eoreq	r6, r6, r0
    7178:	00266600 	eoreq	r6, r6, r0, lsl #12
    717c:	037c0100 	cmneq	ip, #0, 2
    7180:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    7184:	03000004 	movweq	r0, #4
    7188:	001b8300 	andseq	r8, fp, r0, lsl #6
    718c:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    7190:	0c000000 	stceq	0, cr0, [r0], {-0}
    7194:	00001dd0 	ldrdeq	r1, [r0], -r0
    7198:	00000e0a 	andeq	r0, r0, sl, lsl #28
    719c:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    71a0:	00000000 	andeq	r0, r0, r0
    71a4:	0000505b 	andeq	r5, r0, fp, asr r0
    71a8:	5d060102 	stfpls	f0, [r6, #-8]
    71ac:	0200000c 	andeq	r0, r0, #12
    71b0:	0a6b0502 	beq	1ac85c0 <__ccfg+0x1aa8618>
    71b4:	04020000 	streq	r0, [r2], #-0
    71b8:	0007fd05 	andeq	pc, r7, r5, lsl #26
    71bc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    71c0:	000007f8 	strdeq	r0, [r0], -r8
    71c4:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    71c8:	182e0200 	stmdane	lr!, {r9}
    71cc:	0000004d 	andeq	r0, r0, sp, asr #32
    71d0:	5b080102 	blpl	2075e0 <__ccfg+0x1e7638>
    71d4:	0300000c 	movweq	r0, #12
    71d8:	00002e12 	andeq	r2, r0, r2, lsl lr
    71dc:	60193102 	andsvs	r3, r9, r2, lsl #2
    71e0:	02000000 	andeq	r0, r0, #0
    71e4:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    71e8:	b4030000 	strlt	r0, [r3], #-0
    71ec:	02000029 	andeq	r0, r0, #41	; 0x29
    71f0:	00731934 	rsbseq	r1, r3, r4, lsr r9
    71f4:	04020000 	streq	r0, [r2], #-0
    71f8:	00042607 	andeq	r2, r4, r7, lsl #12
    71fc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7200:	00000421 	andeq	r0, r0, r1, lsr #8
    7204:	69050404 	stmdbvs	r5, {r2, sl}
    7208:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    720c:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    7210:	fb030000 	blx	c721a <__ccfg+0xa7272>
    7214:	03000028 	movweq	r0, #40	; 0x28
    7218:	00541227 	subseq	r1, r4, r7, lsr #4
    721c:	8f050000 	svchi	0x00050000
    7220:	03000000 	movweq	r0, #0
    7224:	00001dc2 	andeq	r1, r0, r2, asr #27
    7228:	41122b03 	tstmi	r2, r3, lsl #22
    722c:	06000000 	streq	r0, [r0], -r0
    7230:	000000a0 	andeq	r0, r0, r0, lsr #1
    7234:	00294d03 	eoreq	r4, r9, r3, lsl #26
    7238:	122c0300 	eorne	r0, ip, #0, 6
    723c:	00000067 	andeq	r0, r0, r7, rrx
    7240:	0000b105 	andeq	fp, r0, r5, lsl #2
    7244:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    7248:	2d030000 	stccs	0, cr0, [r3, #-0]
    724c:	00006712 	andeq	r6, r0, r2, lsl r7
    7250:	0bb40300 	bleq	fed07e58 <_estack+0xded02e58>
    7254:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    7258:	0000da10 	andeq	sp, r0, r0, lsl sl
    725c:	8f040700 	svchi	0x00040700
    7260:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7264:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    7268:	0000016e 	andeq	r0, r0, lr, ror #2
    726c:	00003409 	andeq	r3, r0, r9, lsl #8
    7270:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    7274:	000000a0 	andeq	r0, r0, r0, lsr #1
    7278:	00070101 	andeq	r0, r7, r1, lsl #2
    727c:	00064c09 	andeq	r4, r6, r9, lsl #24
    7280:	03350300 	teqeq	r5, #0, 6
    7284:	000000a0 	andeq	r0, r0, r0, lsr #1
    7288:	00060101 	andeq	r0, r6, r1, lsl #2
    728c:	0002e709 	andeq	lr, r2, r9, lsl #14
    7290:	03360300 	teqeq	r6, #0, 6
    7294:	000000a0 	andeq	r0, r0, r0, lsr #1
    7298:	00050101 	andeq	r0, r5, r1, lsl #2
    729c:	0006b709 	andeq	fp, r6, r9, lsl #14
    72a0:	03370300 	teqeq	r7, #0, 6
    72a4:	000000a0 	andeq	r0, r0, r0, lsr #1
    72a8:	00040101 	andeq	r0, r4, r1, lsl #2
    72ac:	000a9f09 	andeq	r9, sl, r9, lsl #30
    72b0:	03380300 	teqeq	r8, #0, 6
    72b4:	000000a0 	andeq	r0, r0, r0, lsr #1
    72b8:	00000401 	andeq	r0, r0, r1, lsl #8
    72bc:	00065b0a 	andeq	r5, r6, sl, lsl #22
    72c0:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    72c4:	000000a0 	andeq	r0, r0, r0, lsr #1
    72c8:	08fb0a01 	ldmeq	fp!, {r0, r9, fp}^
    72cc:	3c030000 	stccc	0, cr0, [r3], {-0}
    72d0:	0000a003 	andeq	sl, r0, r3
    72d4:	3a0a0200 	bcc	287adc <__ccfg+0x267b34>
    72d8:	0300000f 	movweq	r0, #15
    72dc:	00a0033d 	adceq	r0, r0, sp, lsr r3
    72e0:	0a030000 	beq	c72e8 <__ccfg+0xa7340>
    72e4:	00000913 	andeq	r0, r0, r3, lsl r9
    72e8:	b1083f03 	tstlt	r8, r3, lsl #30
    72ec:	04000000 	streq	r0, [r0], #-0
    72f0:	031d0300 	tsteq	sp, #0, 6
    72f4:	41030000 	mrsmi	r0, (UNDEF: 3)
    72f8:	0000e003 	andeq	lr, r0, r3
    72fc:	016e0600 	cmneq	lr, r0, lsl #12
    7300:	be0b0000 	cdplt	0, 0, cr0, cr11, cr0, {0}
    7304:	03000006 	movweq	r0, #6
    7308:	017a1a43 	cmneq	sl, r3, asr #20
    730c:	01010000 	mrseq	r0, (UNDEF: 1)
    7310:	0001a00b 	andeq	sl, r1, fp
    7314:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    7318:	0000019b 	muleq	r0, fp, r1
    731c:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    7320:	000001a1 	andeq	r0, r0, r1, lsr #3
    7324:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    7328:	0500000c 	streq	r0, [r0, #-12]
    732c:	000001a1 	andeq	r0, r0, r1, lsr #3
    7330:	0003260b 	andeq	r2, r3, fp, lsl #12
    7334:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    7338:	0000019b 	muleq	r0, fp, r1
    733c:	08080101 	stmdaeq	r8, {r0, r8}
    7340:	ec098f04 	stc	15, cr8, [r9], {4}
    7344:	0a000001 	beq	7350 <__exidx_end+0x1690>
    7348:	00000cd8 	ldrdeq	r0, [r0], -r8
    734c:	670b9004 	strvs	r9, [fp, -r4]
    7350:	00000000 	andeq	r0, r0, r0
    7354:	0010750a 	andseq	r7, r0, sl, lsl #10
    7358:	08910400 	ldmeq	r1, {sl}
    735c:	0000008f 	andeq	r0, r0, pc, lsl #1
    7360:	01c50a04 	biceq	r0, r5, r4, lsl #20
    7364:	92040000 	andls	r0, r4, #0
    7368:	0000ac10 	andeq	sl, r0, r0, lsl ip
    736c:	03000600 	movweq	r0, #1536	; 0x600
    7370:	00000ccc 	andeq	r0, r0, ip, asr #25
    7374:	bb039304 	bllt	ebf8c <__ccfg+0xcbfe4>
    7378:	0c000001 	stceq	0, cr0, [r0], {1}
    737c:	000001ec 	andeq	r0, r0, ip, ror #3
    7380:	00000203 	andeq	r0, r0, r3, lsl #4
    7384:	3d0b000d 	stccc	0, cr0, [fp, #-52]	; 0xffffffcc
    7388:	04000009 	streq	r0, [r0], #-9
    738c:	01f80f99 			; <UNDEFINED> instruction: 0x01f80f99
    7390:	01010000 	mrseq	r0, (UNDEF: 1)
    7394:	91050108 	tstls	r5, r8, lsl #2
    7398:	00023b09 	andeq	r3, r2, r9, lsl #22
    739c:	091a0900 	ldmdbeq	sl, {r8, fp}
    73a0:	93050000 	movwls	r0, #20480	; 0x5000
    73a4:	0000a007 	andeq	sl, r0, r7
    73a8:	01070100 	mrseq	r0, (UNDEF: 23)
    73ac:	05cc0900 	strbeq	r0, [ip, #2304]	; 0x900
    73b0:	94050000 	strls	r0, [r5], #-0
    73b4:	0000a003 	andeq	sl, r0, r3
    73b8:	00010100 	andeq	r0, r1, r0, lsl #2
    73bc:	ab030000 	blge	c73c4 <__ccfg+0xa741c>
    73c0:	0500000a 	streq	r0, [r0, #-10]
    73c4:	02110396 	andseq	r0, r1, #1476395010	; 0x58000002
    73c8:	3b050000 	blcc	1473d0 <__ccfg+0x127428>
    73cc:	0c000002 	stceq	0, cr0, [r0], {2}
    73d0:	00000247 	andeq	r0, r0, r7, asr #4
    73d4:	00000257 	andeq	r0, r0, r7, asr r2
    73d8:	4c05000d 	stcmi	0, cr0, [r5], {13}
    73dc:	0b000002 	bleq	73ec <__exidx_end+0x172c>
    73e0:	000003aa 	andeq	r0, r0, sl, lsr #7
    73e4:	57179c05 	ldrpl	r9, [r7, -r5, lsl #24]
    73e8:	01000002 	tsteq	r0, r2
    73ec:	009b0c01 	addseq	r0, fp, r1, lsl #24
    73f0:	02750000 	rsbseq	r0, r5, #0
    73f4:	000d0000 	andeq	r0, sp, r0
    73f8:	00026a05 	andeq	r6, r2, r5, lsl #20
    73fc:	060e0b00 	streq	r0, [lr], -r0, lsl #22
    7400:	06060000 	streq	r0, [r6], -r0
    7404:	00027513 	andeq	r7, r2, r3, lsl r5
    7408:	0b010100 	bleq	47810 <__ccfg+0x27868>
    740c:	000008dd 	ldrdeq	r0, [r0], -sp
    7410:	b10ec304 	tstlt	lr, r4, lsl #6
    7414:	01000000 	mrseq	r0, (UNDEF: 0)
    7418:	0c720e01 	ldcleq	14, cr0, [r2], #-4
    741c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    7420:	02a31001 	adceq	r1, r3, #1
    7424:	04070000 	streq	r0, [r7], #-0
    7428:	000002a9 	andeq	r0, r0, r9, lsr #5
    742c:	02b5010f 	adcseq	r0, r5, #-1073741821	; 0xc0000003
    7430:	8f100000 	svchi	0x00100000
    7434:	00000000 	andeq	r0, r0, r0
    7438:	0001a80c 	andeq	sl, r1, ip, lsl #16
    743c:	0002c000 	andeq	ip, r2, r0
    7440:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7444:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    7448:	0009e611 	andeq	lr, r9, r1, lsl r6
    744c:	017f0700 	cmneq	pc, r0, lsl #14
    7450:	0002c016 	andeq	ip, r2, r6, lsl r0
    7454:	11010100 	mrsne	r0, (UNDEF: 17)
    7458:	00000396 	muleq	r0, r6, r3
    745c:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    7460:	000000bd 	strheq	r0, [r0], -sp
    7464:	6e110101 	mufvss	f0, f1, f1
    7468:	07000003 	streq	r0, [r0, -r3]
    746c:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    7470:	01000000 	mrseq	r0, (UNDEF: 0)
    7474:	07081201 	streq	r1, [r8, -r1, lsl #4]
    7478:	19090303 	stmdbne	r9, {r0, r1, r8, r9}
    747c:	13000003 	movwne	r0, #3
    7480:	00003ca1 	andeq	r3, r0, r1, lsr #25
    7484:	07030707 	streq	r0, [r3, -r7, lsl #14]
    7488:	0000008f 	andeq	r0, r0, pc, lsl #1
    748c:	0fcd1300 	svceq	0x00cd1300
    7490:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    7494:	00c20803 	sbceq	r0, r2, r3, lsl #16
    7498:	00040000 	andeq	r0, r4, r0
    749c:	000a090e 	andeq	r0, sl, lr, lsl #18
    74a0:	03090700 	movweq	r0, #38656	; 0x9700
    74a4:	0002f203 	andeq	pc, r2, r3, lsl #4
    74a8:	00291400 	eoreq	r1, r9, r0, lsl #8
    74ac:	07300000 	ldreq	r0, [r0, -r0]!
    74b0:	8908030b 	stmdbhi	r8, {r0, r1, r3, r8, r9}
    74b4:	13000003 	movwne	r0, #3
    74b8:	00001f24 	andeq	r1, r0, r4, lsr #30
    74bc:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    74c0:	0000008f 	andeq	r0, r0, pc, lsl #1
    74c4:	0be71300 	bleq	ff9cc0cc <_estack+0xdf9c70cc>
    74c8:	15070000 	strne	r0, [r7, #-0]
    74cc:	008f0803 	addeq	r0, pc, r3, lsl #16
    74d0:	13020000 	movwne	r0, #8192	; 0x2000
    74d4:	00004c8e 	andeq	r4, r0, lr, lsl #25
    74d8:	0b031607 	bleq	cccfc <__ccfg+0xacd54>
    74dc:	00000296 	muleq	r0, r6, r2
    74e0:	47541304 	ldrbmi	r1, [r4, -r4, lsl #6]
    74e4:	17070000 	strne	r0, [r7, -r0]
    74e8:	00c20903 	sbceq	r0, r2, r3, lsl #18
    74ec:	13080000 	movwne	r0, #32768	; 0x8000
    74f0:	0000000f 	andeq	r0, r0, pc
    74f4:	0f031807 	svceq	0x00031807
    74f8:	00000389 	andeq	r0, r0, r9, lsl #7
    74fc:	095d130c 	ldmdbeq	sp, {r2, r3, r8, r9, ip}^
    7500:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    7504:	03991503 	orrseq	r1, r9, #12582912	; 0xc00000
    7508:	002c0000 	eoreq	r0, ip, r0
    750c:	0003190c 	andeq	r1, r3, ip, lsl #18
    7510:	00039900 	andeq	r9, r3, r0, lsl #18
    7514:	00881500 	addeq	r1, r8, r0, lsl #10
    7518:	00030000 	andeq	r0, r3, r0
    751c:	03260407 			; <UNDEFINED> instruction: 0x03260407
    7520:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    7524:	0700000b 	streq	r0, [r0, -fp]
    7528:	261b031c 			; <UNDEFINED> instruction: 0x261b031c
    752c:	11000003 	tstne	r0, r3
    7530:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    7534:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    7538:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    753c:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    7540:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    7544:	1e110116 	mrcne	1, 0, r0, cr1, cr6, {0}
    7548:	0b010000 	bleq	47550 <__ccfg+0x275a8>
    754c:	00810105 	addeq	r0, r1, r5, lsl #2
    7550:	26980000 	ldrcs	r0, [r8], r0
    7554:	27040000 	strcs	r0, [r4, -r0]
    7558:	9c010000 	stcls	0, cr0, [r1], {-0}
    755c:	0000041b 	andeq	r0, r0, fp, lsl r4
    7560:	00747317 	rsbseq	r7, r4, r7, lsl r3
    7564:	8f130b01 	svchi	0x00130b01
    7568:	cb000000 	blgt	7570 <__exidx_end+0x18b0>
    756c:	17000025 	strne	r0, [r0, -r5, lsr #32]
    7570:	0b01006d 	bleq	4772c <__ccfg+0x27784>
    7574:	00041b23 	andeq	r1, r4, r3, lsr #22
    7578:	0025de00 	eoreq	sp, r5, r0, lsl #28
    757c:	260b1800 	strcs	r1, [fp], -r0, lsl #16
    7580:	0d010000 	stceq	0, cr0, [r1, #-0]
    7584:	00008106 	andeq	r8, r0, r6, lsl #2
    7588:	0025fc00 	eoreq	pc, r5, r0, lsl #24
    758c:	75621900 	strbvc	r1, [r2, #-2304]!	; 0xfffff700
    7590:	0e010066 	cdpeq	0, 0, cr0, cr1, cr6, {3}
    7594:	00019b08 	andeq	r9, r1, r8, lsl #22
    7598:	00263b00 	eoreq	r3, r6, r0, lsl #22
    759c:	04070000 	streq	r0, [r7], #-0
    75a0:	000001a8 	andeq	r0, r0, r8, lsr #3
    75a4:	00041200 	andeq	r1, r4, r0, lsl #4
    75a8:	e5000300 	str	r0, [r0, #-768]	; 0xfffffd00
    75ac:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    75b0:	0000ac01 	andeq	sl, r0, r1, lsl #24
    75b4:	1e190c00 	cdpne	12, 1, cr0, cr9, cr0, {0}
    75b8:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    75bc:	0d000000 	stceq	0, cr0, [r0, #-0]
    75c0:	00000000 	andeq	r0, r0, r0
    75c4:	520f0000 	andpl	r0, pc, #0
    75c8:	01020000 	mrseq	r0, (UNDEF: 2)
    75cc:	000c5d06 	andeq	r5, ip, r6, lsl #26
    75d0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    75d4:	00000a6b 	andeq	r0, r0, fp, ror #20
    75d8:	fd050402 	stc2	4, cr0, [r5, #-8]
    75dc:	02000007 	andeq	r0, r0, #7
    75e0:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    75e4:	1c030000 	stcne	0, cr0, [r3], {-0}
    75e8:	0200002a 	andeq	r0, r0, #42	; 0x2a
    75ec:	004d182e 	subeq	r1, sp, lr, lsr #16
    75f0:	01020000 	mrseq	r0, (UNDEF: 2)
    75f4:	000c5b08 	andeq	r5, ip, r8, lsl #22
    75f8:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    75fc:	31020000 	mrscc	r0, (UNDEF: 2)
    7600:	00006019 	andeq	r6, r0, r9, lsl r0
    7604:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7608:	00000d66 	andeq	r0, r0, r6, ror #26
    760c:	0029b403 	eoreq	fp, r9, r3, lsl #8
    7610:	19340200 	ldmdbne	r4!, {r9}
    7614:	00000073 	andeq	r0, r0, r3, ror r0
    7618:	26070402 	strcs	r0, [r7], -r2, lsl #8
    761c:	02000004 	andeq	r0, r0, #4
    7620:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    7624:	04040000 	streq	r0, [r4], #-0
    7628:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    762c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7630:	0000042b 	andeq	r0, r0, fp, lsr #8
    7634:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    7638:	12270300 	eorne	r0, r7, #0, 6
    763c:	00000054 	andeq	r0, r0, r4, asr r0
    7640:	00008f05 	andeq	r8, r0, r5, lsl #30
    7644:	1dc20300 	stclne	3, cr0, [r2]
    7648:	2b030000 	blcs	c7650 <__ccfg+0xa76a8>
    764c:	00004112 	andeq	r4, r0, r2, lsl r1
    7650:	00a00600 	adceq	r0, r0, r0, lsl #12
    7654:	4d030000 	stcmi	0, cr0, [r3, #-0]
    7658:	03000029 	movweq	r0, #41	; 0x29
    765c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    7660:	b1050000 	mrslt	r0, (UNDEF: 5)
    7664:	03000000 	movweq	r0, #0
    7668:	00000646 	andeq	r0, r0, r6, asr #12
    766c:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    7670:	07000000 	streq	r0, [r0, -r0]
    7674:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    7678:	0000015c 	andeq	r0, r0, ip, asr r1
    767c:	00003408 	andeq	r3, r0, r8, lsl #8
    7680:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    7684:	000000a0 	andeq	r0, r0, r0, lsr #1
    7688:	00070101 	andeq	r0, r7, r1, lsl #2
    768c:	00064c08 	andeq	r4, r6, r8, lsl #24
    7690:	03350300 	teqeq	r5, #0, 6
    7694:	000000a0 	andeq	r0, r0, r0, lsr #1
    7698:	00060101 	andeq	r0, r6, r1, lsl #2
    769c:	0002e708 	andeq	lr, r2, r8, lsl #14
    76a0:	03360300 	teqeq	r6, #0, 6
    76a4:	000000a0 	andeq	r0, r0, r0, lsr #1
    76a8:	00050101 	andeq	r0, r5, r1, lsl #2
    76ac:	0006b708 	andeq	fp, r6, r8, lsl #14
    76b0:	03370300 	teqeq	r7, #0, 6
    76b4:	000000a0 	andeq	r0, r0, r0, lsr #1
    76b8:	00040101 	andeq	r0, r4, r1, lsl #2
    76bc:	000a9f08 	andeq	r9, sl, r8, lsl #30
    76c0:	03380300 	teqeq	r8, #0, 6
    76c4:	000000a0 	andeq	r0, r0, r0, lsr #1
    76c8:	00000401 	andeq	r0, r0, r1, lsl #8
    76cc:	00065b09 	andeq	r5, r6, r9, lsl #22
    76d0:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    76d4:	000000a0 	andeq	r0, r0, r0, lsr #1
    76d8:	08fb0901 	ldmeq	fp!, {r0, r8, fp}^
    76dc:	3c030000 	stccc	0, cr0, [r3], {-0}
    76e0:	0000a003 	andeq	sl, r0, r3
    76e4:	3a090200 	bcc	247eec <__ccfg+0x227f44>
    76e8:	0300000f 	movweq	r0, #15
    76ec:	00a0033d 	adceq	r0, r0, sp, lsr r3
    76f0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    76f4:	00000913 	andeq	r0, r0, r3, lsl r9
    76f8:	b1083f03 	tstlt	r8, r3, lsl #30
    76fc:	04000000 	streq	r0, [r0], #-0
    7700:	031d0300 	tsteq	sp, #0, 6
    7704:	41030000 	mrsmi	r0, (UNDEF: 3)
    7708:	0000ce03 	andeq	ip, r0, r3, lsl #28
    770c:	015c0600 	cmpeq	ip, r0, lsl #12
    7710:	be0a0000 	cdplt	0, 0, cr0, cr10, cr0, {0}
    7714:	03000006 	movweq	r0, #6
    7718:	01681a43 	cmneq	r8, r3, asr #20
    771c:	01010000 	mrseq	r0, (UNDEF: 1)
    7720:	0001a00a 	andeq	sl, r1, sl
    7724:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    7728:	00000189 	andeq	r0, r0, r9, lsl #3
    772c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    7730:	0000018f 	andeq	r0, r0, pc, lsl #3
    7734:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    7738:	0500000c 	streq	r0, [r0, #-12]
    773c:	0000018f 	andeq	r0, r0, pc, lsl #3
    7740:	0003260a 	andeq	r2, r3, sl, lsl #12
    7744:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    7748:	00000189 	andeq	r0, r0, r9, lsl #3
    774c:	08070101 	stmdaeq	r7, {r0, r8}
    7750:	da098f04 	ble	26b368 <__ccfg+0x24b3c0>
    7754:	09000001 	stmdbeq	r0, {r0}
    7758:	00000cd8 	ldrdeq	r0, [r0], -r8
    775c:	670b9004 	strvs	r9, [fp, -r4]
    7760:	00000000 	andeq	r0, r0, r0
    7764:	00107509 	andseq	r7, r0, r9, lsl #10
    7768:	08910400 	ldmeq	r1, {sl}
    776c:	0000008f 	andeq	r0, r0, pc, lsl #1
    7770:	01c50904 	biceq	r0, r5, r4, lsl #18
    7774:	92040000 	andls	r0, r4, #0
    7778:	0000ac10 	andeq	sl, r0, r0, lsl ip
    777c:	03000600 	movweq	r0, #1536	; 0x600
    7780:	00000ccc 	andeq	r0, r0, ip, asr #25
    7784:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    7788:	0c000001 	stceq	0, cr0, [r0], {1}
    778c:	000001da 	ldrdeq	r0, [r0], -sl
    7790:	000001f1 	strdeq	r0, [r0], -r1
    7794:	3d0a000d 	stccc	0, cr0, [sl, #-52]	; 0xffffffcc
    7798:	04000009 	streq	r0, [r0], #-9
    779c:	01e60f99 	strexheq	r0, r9, [r6]
    77a0:	01010000 	mrseq	r0, (UNDEF: 1)
    77a4:	91050107 	tstls	r5, r7, lsl #2
    77a8:	00022909 	andeq	r2, r2, r9, lsl #18
    77ac:	091a0800 	ldmdbeq	sl, {fp}
    77b0:	93050000 	movwls	r0, #20480	; 0x5000
    77b4:	0000a007 	andeq	sl, r0, r7
    77b8:	01070100 	mrseq	r0, (UNDEF: 23)
    77bc:	05cc0800 	strbeq	r0, [ip, #2048]	; 0x800
    77c0:	94050000 	strls	r0, [r5], #-0
    77c4:	0000a003 	andeq	sl, r0, r3
    77c8:	00010100 	andeq	r0, r1, r0, lsl #2
    77cc:	ab030000 	blge	c77d4 <__ccfg+0xa782c>
    77d0:	0500000a 	streq	r0, [r0, #-10]
    77d4:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    77d8:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    77dc:	0c000002 	stceq	0, cr0, [r0], {2}
    77e0:	00000235 	andeq	r0, r0, r5, lsr r2
    77e4:	00000245 	andeq	r0, r0, r5, asr #4
    77e8:	3a05000d 	bcc	147824 <__ccfg+0x12787c>
    77ec:	0a000002 	beq	77fc <__exidx_end+0x1b3c>
    77f0:	000003aa 	andeq	r0, r0, sl, lsr #7
    77f4:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    77f8:	01000002 	tsteq	r0, r2
    77fc:	009b0c01 	addseq	r0, fp, r1, lsl #24
    7800:	02630000 	rsbeq	r0, r3, #0
    7804:	000d0000 	andeq	r0, sp, r0
    7808:	00025805 	andeq	r5, r2, r5, lsl #16
    780c:	060e0a00 	streq	r0, [lr], -r0, lsl #20
    7810:	06060000 	streq	r0, [r6], -r0
    7814:	00026313 	andeq	r6, r2, r3, lsl r3
    7818:	0a010100 	beq	47c20 <__ccfg+0x27c78>
    781c:	000008dd 	ldrdeq	r0, [r0], -sp
    7820:	b10ec304 	tstlt	lr, r4, lsl #6
    7824:	01000000 	mrseq	r0, (UNDEF: 0)
    7828:	0c720e01 	ldcleq	14, cr0, [r2], #-4
    782c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    7830:	02911001 	addseq	r1, r1, #1
    7834:	040b0000 	streq	r0, [fp], #-0
    7838:	00000297 	muleq	r0, r7, r2
    783c:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    7840:	8f100000 	svchi	0x00100000
    7844:	00000000 	andeq	r0, r0, r0
    7848:	0001960c 	andeq	r9, r1, ip, lsl #12
    784c:	0002ae00 	andeq	sl, r2, r0, lsl #28
    7850:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7854:	000002a3 	andeq	r0, r0, r3, lsr #5
    7858:	0009e611 	andeq	lr, r9, r1, lsl r6
    785c:	017f0700 	cmneq	pc, r0, lsl #14
    7860:	0002ae16 	andeq	sl, r2, r6, lsl lr
    7864:	11010100 	mrsne	r0, (UNDEF: 17)
    7868:	00000396 	muleq	r0, r6, r3
    786c:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    7870:	000000bd 	strheq	r0, [r0], -sp
    7874:	6e110101 	mufvss	f0, f1, f1
    7878:	07000003 	streq	r0, [r0, -r3]
    787c:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    7880:	01000000 	mrseq	r0, (UNDEF: 0)
    7884:	07081201 	streq	r1, [r8, -r1, lsl #4]
    7888:	07090303 	streq	r0, [r9, -r3, lsl #6]
    788c:	13000003 	movwne	r0, #3
    7890:	00003ca1 	andeq	r3, r0, r1, lsr #25
    7894:	07030707 	streq	r0, [r3, -r7, lsl #14]
    7898:	0000008f 	andeq	r0, r0, pc, lsl #1
    789c:	0fcd1300 	svceq	0x00cd1300
    78a0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    78a4:	00c20803 	sbceq	r0, r2, r3, lsl #16
    78a8:	00040000 	andeq	r0, r4, r0
    78ac:	000a090e 	andeq	r0, sl, lr, lsl #18
    78b0:	03090700 	movweq	r0, #38656	; 0x9700
    78b4:	0002e003 	andeq	lr, r2, r3
    78b8:	00291400 	eoreq	r1, r9, r0, lsl #8
    78bc:	07300000 	ldreq	r0, [r0, -r0]!
    78c0:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    78c4:	13000003 	movwne	r0, #3
    78c8:	00001f24 	andeq	r1, r0, r4, lsr #30
    78cc:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    78d0:	0000008f 	andeq	r0, r0, pc, lsl #1
    78d4:	0be71300 	bleq	ff9cc4dc <_estack+0xdf9c74dc>
    78d8:	15070000 	strne	r0, [r7, #-0]
    78dc:	008f0803 	addeq	r0, pc, r3, lsl #16
    78e0:	13020000 	movwne	r0, #8192	; 0x2000
    78e4:	00004c8e 	andeq	r4, r0, lr, lsl #25
    78e8:	0b031607 	bleq	cd10c <__ccfg+0xad164>
    78ec:	00000284 	andeq	r0, r0, r4, lsl #5
    78f0:	47541304 	ldrbmi	r1, [r4, -r4, lsl #6]
    78f4:	17070000 	strne	r0, [r7, -r0]
    78f8:	00c20903 	sbceq	r0, r2, r3, lsl #18
    78fc:	13080000 	movwne	r0, #32768	; 0x8000
    7900:	0000000f 	andeq	r0, r0, pc
    7904:	0f031807 	svceq	0x00031807
    7908:	00000377 	andeq	r0, r0, r7, ror r3
    790c:	095d130c 	ldmdbeq	sp, {r2, r3, r8, r9, ip}^
    7910:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    7914:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    7918:	002c0000 	eoreq	r0, ip, r0
    791c:	0003070c 	andeq	r0, r3, ip, lsl #14
    7920:	00038700 	andeq	r8, r3, r0, lsl #14
    7924:	00881500 	addeq	r1, r8, r0, lsl #10
    7928:	00030000 	andeq	r0, r3, r0
    792c:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    7930:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    7934:	0700000b 	streq	r0, [r0, -fp]
    7938:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    793c:	11000003 	tstne	r0, r3
    7940:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    7944:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    7948:	000003a9 	andeq	r0, r0, r9, lsr #7
    794c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    7950:	0000038d 	andeq	r0, r0, sp, lsl #7
    7954:	001e590a 	andseq	r5, lr, sl, lsl #18
    7958:	0e090100 	adfeqe	f0, f1, f0
    795c:	00000189 	andeq	r0, r0, r9, lsl #3
    7960:	01160101 	tsteq	r6, r1, lsl #2
    7964:	00001e63 	andeq	r1, r0, r3, ror #28
    7968:	01050d01 	tsteq	r5, r1, lsl #26
    796c:	00000081 	andeq	r0, r0, r1, lsl #1
    7970:	00002704 	andeq	r2, r0, r4, lsl #14
    7974:	0000277c 	andeq	r2, r0, ip, ror r7
    7978:	73179c01 	tstvc	r7, #256	; 0x100
    797c:	0d010074 	stceq	0, cr0, [r1, #-464]	; 0xfffffe30
    7980:	00008f12 	andeq	r8, r0, r2, lsl pc
    7984:	00268500 	eoreq	r8, r6, r0, lsl #10
    7988:	75621700 	strbvc	r1, [r2, #-1792]!	; 0xfffff900
    798c:	0d010066 	stceq	0, cr0, [r1, #-408]	; 0xfffffe68
    7990:	0001891c 	andeq	r8, r1, ip, lsl r9
    7994:	0026a300 	eoreq	sl, r6, r0, lsl #6
    7998:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0xfffff900
    799c:	0d01006e 	stceq	0, cr0, [r1, #-440]	; 0xfffffe48
    79a0:	00008125 	andeq	r8, r0, r5, lsr #2
    79a4:	0026f800 	eoreq	pc, r6, r0, lsl #16
    79a8:	260b1800 	strcs	r1, [fp], -r0, lsl #16
    79ac:	11010000 	mrsne	r0, (UNDEF: 1)
    79b0:	00008106 	andeq	r8, r0, r6, lsl #2
    79b4:	00274d00 	eoreq	r4, r7, r0, lsl #26
    79b8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    79bc:	03000004 	movweq	r0, #4
    79c0:	001e3400 	andseq	r3, lr, r0, lsl #8
    79c4:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    79c8:	0c000000 	stceq	0, cr0, [r0], {-0}
    79cc:	00001e73 	andeq	r1, r0, r3, ror lr
    79d0:	00000e0a 	andeq	r0, r0, sl, lsl #28
    79d4:	00000d10 	andeq	r0, r0, r0, lsl sp
    79d8:	00000000 	andeq	r0, r0, r0
    79dc:	000053d7 	ldrdeq	r5, [r0], -r7
    79e0:	5d060102 	stfpls	f0, [r6, #-8]
    79e4:	0200000c 	andeq	r0, r0, #12
    79e8:	0a6b0502 	beq	1ac8df8 <__ccfg+0x1aa8e50>
    79ec:	04020000 	streq	r0, [r2], #-0
    79f0:	0007fd05 	andeq	pc, r7, r5, lsl #26
    79f4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    79f8:	000007f8 	strdeq	r0, [r0], -r8
    79fc:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    7a00:	182e0200 	stmdane	lr!, {r9}
    7a04:	0000004d 	andeq	r0, r0, sp, asr #32
    7a08:	5b080102 	blpl	207e18 <__ccfg+0x1e7e70>
    7a0c:	0300000c 	movweq	r0, #12
    7a10:	00002e12 	andeq	r2, r0, r2, lsl lr
    7a14:	60193102 	andsvs	r3, r9, r2, lsl #2
    7a18:	02000000 	andeq	r0, r0, #0
    7a1c:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    7a20:	b4030000 	strlt	r0, [r3], #-0
    7a24:	02000029 	andeq	r0, r0, #41	; 0x29
    7a28:	00731934 	rsbseq	r1, r3, r4, lsr r9
    7a2c:	04020000 	streq	r0, [r2], #-0
    7a30:	00042607 	andeq	r2, r4, r7, lsl #12
    7a34:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7a38:	00000421 	andeq	r0, r0, r1, lsr #8
    7a3c:	69050404 	stmdbvs	r5, {r2, sl}
    7a40:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    7a44:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    7a48:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    7a4c:	03000005 	movweq	r0, #5
    7a50:	009b1b28 	addseq	r1, fp, r8, lsr #22
    7a54:	90050000 	andls	r0, r5, r0
    7a58:	0400000b 	streq	r0, [r0], #-11
    7a5c:	00b30009 	adcseq	r0, r3, r9
    7a60:	6d060000 	stcvs	0, cr0, [r6, #-0]
    7a64:	b3000008 	movwlt	r0, #8
    7a68:	00000000 	andeq	r0, r0, r0
    7a6c:	04070001 	streq	r0, [r7], #-1
    7a70:	000b9203 	andeq	r9, fp, r3, lsl #4
    7a74:	18630300 	stmdane	r3!, {r8, r9}^
    7a78:	0000008f 	andeq	r0, r0, pc, lsl #1
    7a7c:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    7a80:	12270400 	eorne	r0, r7, #0, 8
    7a84:	00000054 	andeq	r0, r0, r4, asr r0
    7a88:	0000c108 	andeq	ip, r0, r8, lsl #2
    7a8c:	1dc20300 	stclne	3, cr0, [r2]
    7a90:	2b040000 	blcs	107a98 <__ccfg+0xe7af0>
    7a94:	00004112 	andeq	r4, r0, r2, lsl r1
    7a98:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    7a9c:	4d030000 	stcmi	0, cr0, [r3, #-0]
    7aa0:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    7aa4:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    7aa8:	e3080000 	movw	r0, #32768	; 0x8000
    7aac:	03000000 	movweq	r0, #0
    7ab0:	00000646 	andeq	r0, r0, r6, asr #12
    7ab4:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    7ab8:	0a000000 	beq	7ac0 <__exidx_end+0x1e00>
    7abc:	09320408 	ldmdbeq	r2!, {r3, sl}
    7ac0:	0000018e 	andeq	r0, r0, lr, lsl #3
    7ac4:	0000340b 	andeq	r3, r0, fp, lsl #8
    7ac8:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    7acc:	000000d2 	ldrdeq	r0, [r0], -r2
    7ad0:	00070101 	andeq	r0, r7, r1, lsl #2
    7ad4:	00064c0b 	andeq	r4, r6, fp, lsl #24
    7ad8:	03350400 	teqeq	r5, #0, 8
    7adc:	000000d2 	ldrdeq	r0, [r0], -r2
    7ae0:	00060101 	andeq	r0, r6, r1, lsl #2
    7ae4:	0002e70b 	andeq	lr, r2, fp, lsl #14
    7ae8:	03360400 	teqeq	r6, #0, 8
    7aec:	000000d2 	ldrdeq	r0, [r0], -r2
    7af0:	00050101 	andeq	r0, r5, r1, lsl #2
    7af4:	0006b70b 	andeq	fp, r6, fp, lsl #14
    7af8:	03370400 	teqeq	r7, #0, 8
    7afc:	000000d2 	ldrdeq	r0, [r0], -r2
    7b00:	00040101 	andeq	r0, r4, r1, lsl #2
    7b04:	000a9f0b 	andeq	r9, sl, fp, lsl #30
    7b08:	03380400 	teqeq	r8, #0, 8
    7b0c:	000000d2 	ldrdeq	r0, [r0], -r2
    7b10:	00000401 	andeq	r0, r0, r1, lsl #8
    7b14:	00065b0c 	andeq	r5, r6, ip, lsl #22
    7b18:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    7b1c:	000000d2 	ldrdeq	r0, [r0], -r2
    7b20:	08fb0c01 	ldmeq	fp!, {r0, sl, fp}^
    7b24:	3c040000 	stccc	0, cr0, [r4], {-0}
    7b28:	0000d203 	andeq	sp, r0, r3, lsl #4
    7b2c:	3a0c0200 	bcc	308334 <__ccfg+0x2e838c>
    7b30:	0400000f 	streq	r0, [r0], #-15
    7b34:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    7b38:	0c030000 	stceq	0, cr0, [r3], {-0}
    7b3c:	00000913 	andeq	r0, r0, r3, lsl r9
    7b40:	e3083f04 	movw	r3, #36612	; 0x8f04
    7b44:	04000000 	streq	r0, [r0], #-0
    7b48:	031d0300 	tsteq	sp, #0, 6
    7b4c:	41040000 	mrsmi	r0, (UNDEF: 4)
    7b50:	00010003 	andeq	r0, r1, r3
    7b54:	018e0900 	orreq	r0, lr, r0, lsl #18
    7b58:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    7b5c:	04000006 	streq	r0, [r0], #-6
    7b60:	019a1a43 	orrseq	r1, sl, r3, asr #20
    7b64:	01010000 	mrseq	r0, (UNDEF: 1)
    7b68:	0001a00d 	andeq	sl, r1, sp
    7b6c:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    7b70:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    7b74:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    7b78:	000001c1 	andeq	r0, r0, r1, asr #3
    7b7c:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    7b80:	0800000c 	stmdaeq	r0, {r2, r3}
    7b84:	000001c1 	andeq	r0, r0, r1, asr #3
    7b88:	0003260d 	andeq	r2, r3, sp, lsl #12
    7b8c:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    7b90:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    7b94:	080a0101 	stmdaeq	sl, {r0, r8}
    7b98:	0c098f05 	stceq	15, cr8, [r9], {5}
    7b9c:	0c000002 	stceq	0, cr0, [r0], {2}
    7ba0:	00000cd8 	ldrdeq	r0, [r0], -r8
    7ba4:	670b9005 	strvs	r9, [fp, -r5]
    7ba8:	00000000 	andeq	r0, r0, r0
    7bac:	0010750c 	andseq	r7, r0, ip, lsl #10
    7bb0:	08910500 	ldmeq	r1, {r8, sl}
    7bb4:	000000c1 	andeq	r0, r0, r1, asr #1
    7bb8:	01c50c04 	biceq	r0, r5, r4, lsl #24
    7bbc:	92050000 	andls	r0, r5, #0
    7bc0:	0000de10 	andeq	sp, r0, r0, lsl lr
    7bc4:	03000600 	movweq	r0, #1536	; 0x600
    7bc8:	00000ccc 	andeq	r0, r0, ip, asr #25
    7bcc:	db039305 	blle	ec7e8 <__ccfg+0xcc840>
    7bd0:	0f000001 	svceq	0x00000001
    7bd4:	0000020c 	andeq	r0, r0, ip, lsl #4
    7bd8:	00000223 	andeq	r0, r0, r3, lsr #4
    7bdc:	3d0d0010 	stccc	0, cr0, [sp, #-64]	; 0xffffffc0
    7be0:	05000009 	streq	r0, [r0, #-9]
    7be4:	02180f99 	andseq	r0, r8, #612	; 0x264
    7be8:	01010000 	mrseq	r0, (UNDEF: 1)
    7bec:	9106010a 	tstls	r6, sl, lsl #2
    7bf0:	00025b09 	andeq	r5, r2, r9, lsl #22
    7bf4:	091a0b00 	ldmdbeq	sl, {r8, r9, fp}
    7bf8:	93060000 	movwls	r0, #24576	; 0x6000
    7bfc:	0000d207 	andeq	sp, r0, r7, lsl #4
    7c00:	01070100 	mrseq	r0, (UNDEF: 23)
    7c04:	05cc0b00 	strbeq	r0, [ip, #2816]	; 0xb00
    7c08:	94060000 	strls	r0, [r6], #-0
    7c0c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7c10:	00010100 	andeq	r0, r1, r0, lsl #2
    7c14:	ab030000 	blge	c7c1c <__ccfg+0xa7c74>
    7c18:	0600000a 	streq	r0, [r0], -sl
    7c1c:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    7c20:	5b080000 	blpl	207c28 <__ccfg+0x1e7c80>
    7c24:	0f000002 	svceq	0x00000002
    7c28:	00000267 	andeq	r0, r0, r7, ror #4
    7c2c:	00000277 	andeq	r0, r0, r7, ror r2
    7c30:	6c080010 	stcvs	0, cr0, [r8], {16}
    7c34:	0d000002 	stceq	0, cr0, [r0, #-8]
    7c38:	000003aa 	andeq	r0, r0, sl, lsr #7
    7c3c:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    7c40:	01000002 	tsteq	r0, r2
    7c44:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    7c48:	02950000 	addseq	r0, r5, #0
    7c4c:	00100000 	andseq	r0, r0, r0
    7c50:	00028a08 	andeq	r8, r2, r8, lsl #20
    7c54:	060e0d00 	streq	r0, [lr], -r0, lsl #26
    7c58:	06070000 	streq	r0, [r7], -r0
    7c5c:	00029513 	andeq	r9, r2, r3, lsl r5
    7c60:	0d010100 	stfeqs	f0, [r1, #-0]
    7c64:	000008dd 	ldrdeq	r0, [r0], -sp
    7c68:	e30ec305 	movw	ip, #58117	; 0xe305
    7c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    7c70:	0c721101 	ldfeqe	f1, [r2], #-4
    7c74:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    7c78:	02c31001 	sbceq	r1, r3, #1
    7c7c:	040e0000 	streq	r0, [lr], #-0
    7c80:	000002c9 	andeq	r0, r0, r9, asr #5
    7c84:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    7c88:	c1130000 	tstgt	r3, r0
    7c8c:	00000000 	andeq	r0, r0, r0
    7c90:	0001c80f 	andeq	ip, r1, pc, lsl #16
    7c94:	0002e000 	andeq	lr, r2, r0
    7c98:	08001000 	stmdaeq	r0, {ip}
    7c9c:	000002d5 	ldrdeq	r0, [r0], -r5
    7ca0:	0009e614 	andeq	lr, r9, r4, lsl r6
    7ca4:	017f0800 	cmneq	pc, r0, lsl #16
    7ca8:	0002e016 	andeq	lr, r2, r6, lsl r0
    7cac:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7cb0:	00000396 	muleq	r0, r6, r3
    7cb4:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    7cb8:	000000ef 	andeq	r0, r0, pc, ror #1
    7cbc:	6e140101 	mufvss	f0, f4, f1
    7cc0:	08000003 	stmdaeq	r0, {r0, r1}
    7cc4:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    7cc8:	01000000 	mrseq	r0, (UNDEF: 0)
    7ccc:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    7cd0:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    7cd4:	16000003 	strne	r0, [r0], -r3
    7cd8:	00003ca1 	andeq	r3, r0, r1, lsr #25
    7cdc:	07030708 	streq	r0, [r3, -r8, lsl #14]
    7ce0:	000000c1 	andeq	r0, r0, r1, asr #1
    7ce4:	0fcd1600 	svceq	0x00cd1600
    7ce8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    7cec:	00f40803 	rscseq	r0, r4, r3, lsl #16
    7cf0:	00040000 	andeq	r0, r4, r0
    7cf4:	000a0911 	andeq	r0, sl, r1, lsl r9
    7cf8:	03090800 	movweq	r0, #38912	; 0x9800
    7cfc:	00031203 	andeq	r1, r3, r3, lsl #4
    7d00:	00291700 	eoreq	r1, r9, r0, lsl #14
    7d04:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    7d08:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    7d0c:	16000003 	strne	r0, [r0], -r3
    7d10:	00001f24 	andeq	r1, r0, r4, lsr #30
    7d14:	08031408 	stmdaeq	r3, {r3, sl, ip}
    7d18:	000000c1 	andeq	r0, r0, r1, asr #1
    7d1c:	0be71600 	bleq	ff9cd524 <_estack+0xdf9c8524>
    7d20:	15080000 	strne	r0, [r8, #-0]
    7d24:	00c10803 	sbceq	r0, r1, r3, lsl #16
    7d28:	16020000 	strne	r0, [r2], -r0
    7d2c:	00004c8e 	andeq	r4, r0, lr, lsl #25
    7d30:	0b031608 	bleq	cd558 <__ccfg+0xad5b0>
    7d34:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    7d38:	47541604 	ldrbmi	r1, [r4, -r4, lsl #12]
    7d3c:	17080000 	strne	r0, [r8, -r0]
    7d40:	00f40903 	rscseq	r0, r4, r3, lsl #18
    7d44:	16080000 	strne	r0, [r8], -r0
    7d48:	0000000f 	andeq	r0, r0, pc
    7d4c:	0f031808 	svceq	0x00031808
    7d50:	000003a9 	andeq	r0, r0, r9, lsr #7
    7d54:	095d160c 	ldmdbeq	sp, {r2, r3, r9, sl, ip}^
    7d58:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    7d5c:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    7d60:	002c0000 	eoreq	r0, ip, r0
    7d64:	0003390f 	andeq	r3, r3, pc, lsl #18
    7d68:	0003b900 	andeq	fp, r3, r0, lsl #18
    7d6c:	00881800 	addeq	r1, r8, r0, lsl #16
    7d70:	00030000 	andeq	r0, r3, r0
    7d74:	0346040e 	movteq	r0, #25614	; 0x640e
    7d78:	dc110000 	ldcle	0, cr0, [r1], {-0}
    7d7c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7d80:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    7d84:	14000003 	strne	r0, [r0], #-3
    7d88:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    7d8c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    7d90:	000003db 	ldrdeq	r0, [r0], -fp
    7d94:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    7d98:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    7d9c:	1e6a0119 	mcrne	1, 3, r0, cr10, cr9, {0}
    7da0:	0c010000 	stceq	0, cr0, [r1], {-0}
    7da4:	00810105 	addeq	r0, r1, r5, lsl #2
    7da8:	277c0000 	ldrbcs	r0, [ip, -r0]!
    7dac:	27d00000 	ldrbcs	r0, [r0, r0]
    7db0:	9c010000 	stcls	0, cr0, [r1], {-0}
    7db4:	00000449 	andeq	r0, r0, r9, asr #8
    7db8:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    7dbc:	c1140c01 	tstgt	r4, r1, lsl #24
    7dc0:	97000000 	strls	r0, [r0, -r0]
    7dc4:	1b000027 	blne	7e68 <__exidx_end+0x21a8>
    7dc8:	0c01006d 	stceq	0, cr0, [r1], {109}	; 0x6d
    7dcc:	00044924 	andeq	r4, r4, r4, lsr #18
    7dd0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7dd4:	260b1d1c 			; <UNDEFINED> instruction: 0x260b1d1c
    7dd8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    7ddc:	00008106 	andeq	r8, r0, r6, lsl #2
    7de0:	0027aa00 	eoreq	sl, r7, r0, lsl #20
    7de4:	75621e00 	strbvc	r1, [r2, #-3584]!	; 0xfffff200
    7de8:	0f010066 	svceq	0x00010066
    7dec:	0001bb08 	andeq	fp, r1, r8, lsl #22
    7df0:	0027e900 	eoreq	lr, r7, r0, lsl #18
    7df4:	70611f00 	rsbvc	r1, r1, r0, lsl #30
    7df8:	0a100100 	beq	408200 <__ccfg+0x3e8258>
    7dfc:	000000b5 	strheq	r0, [r0], -r5
    7e00:	005c9102 	subseq	r9, ip, r2, lsl #2
    7e04:	01c8040e 	biceq	r0, r8, lr, lsl #8
    7e08:	4c000000 	stcmi	0, cr0, [r0], {-0}
    7e0c:	03000004 	movweq	r0, #4
    7e10:	001fe000 	andseq	lr, pc, r0
    7e14:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    7e18:	0c000000 	stceq	0, cr0, [r0], {-0}
    7e1c:	00001eb5 			; <UNDEFINED> instruction: 0x00001eb5
    7e20:	00000e0a 	andeq	r0, r0, sl, lsl #28
    7e24:	00000d20 	andeq	r0, r0, r0, lsr #26
    7e28:	00000000 	andeq	r0, r0, r0
    7e2c:	0000557c 	andeq	r5, r0, ip, ror r5
    7e30:	5d060102 	stfpls	f0, [r6, #-8]
    7e34:	0200000c 	andeq	r0, r0, #12
    7e38:	0a6b0502 	beq	1ac9248 <__ccfg+0x1aa92a0>
    7e3c:	04020000 	streq	r0, [r2], #-0
    7e40:	0007fd05 	andeq	pc, r7, r5, lsl #26
    7e44:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    7e48:	000007f8 	strdeq	r0, [r0], -r8
    7e4c:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    7e50:	182e0200 	stmdane	lr!, {r9}
    7e54:	0000004d 	andeq	r0, r0, sp, asr #32
    7e58:	5b080102 	blpl	208268 <__ccfg+0x1e82c0>
    7e5c:	0300000c 	movweq	r0, #12
    7e60:	00002e12 	andeq	r2, r0, r2, lsl lr
    7e64:	60193102 	andsvs	r3, r9, r2, lsl #2
    7e68:	02000000 	andeq	r0, r0, #0
    7e6c:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    7e70:	b4030000 	strlt	r0, [r3], #-0
    7e74:	02000029 	andeq	r0, r0, #41	; 0x29
    7e78:	00731934 	rsbseq	r1, r3, r4, lsr r9
    7e7c:	04020000 	streq	r0, [r2], #-0
    7e80:	00042607 	andeq	r2, r4, r7, lsl #12
    7e84:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7e88:	00000421 	andeq	r0, r0, r1, lsr #8
    7e8c:	69050404 	stmdbvs	r5, {r2, sl}
    7e90:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    7e94:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    7e98:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    7e9c:	03000005 	movweq	r0, #5
    7ea0:	009b1b28 	addseq	r1, fp, r8, lsr #22
    7ea4:	90050000 	andls	r0, r5, r0
    7ea8:	0400000b 	streq	r0, [r0], #-11
    7eac:	00b30009 	adcseq	r0, r3, r9
    7eb0:	6d060000 	stcvs	0, cr0, [r6, #-0]
    7eb4:	b3000008 	movwlt	r0, #8
    7eb8:	00000000 	andeq	r0, r0, r0
    7ebc:	04070001 	streq	r0, [r7], #-1
    7ec0:	000b9203 	andeq	r9, fp, r3, lsl #4
    7ec4:	18630300 	stmdane	r3!, {r8, r9}^
    7ec8:	0000008f 	andeq	r0, r0, pc, lsl #1
    7ecc:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    7ed0:	12270400 	eorne	r0, r7, #0, 8
    7ed4:	00000054 	andeq	r0, r0, r4, asr r0
    7ed8:	0000c108 	andeq	ip, r0, r8, lsl #2
    7edc:	1dc20300 	stclne	3, cr0, [r2]
    7ee0:	2b040000 	blcs	107ee8 <__ccfg+0xe7f40>
    7ee4:	00004112 	andeq	r4, r0, r2, lsl r1
    7ee8:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    7eec:	4d030000 	stcmi	0, cr0, [r3, #-0]
    7ef0:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    7ef4:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    7ef8:	e3080000 	movw	r0, #32768	; 0x8000
    7efc:	03000000 	movweq	r0, #0
    7f00:	00000646 	andeq	r0, r0, r6, asr #12
    7f04:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    7f08:	0a000000 	beq	7f10 <__exidx_end+0x2250>
    7f0c:	09320408 	ldmdbeq	r2!, {r3, sl}
    7f10:	0000018e 	andeq	r0, r0, lr, lsl #3
    7f14:	0000340b 	andeq	r3, r0, fp, lsl #8
    7f18:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    7f1c:	000000d2 	ldrdeq	r0, [r0], -r2
    7f20:	00070101 	andeq	r0, r7, r1, lsl #2
    7f24:	00064c0b 	andeq	r4, r6, fp, lsl #24
    7f28:	03350400 	teqeq	r5, #0, 8
    7f2c:	000000d2 	ldrdeq	r0, [r0], -r2
    7f30:	00060101 	andeq	r0, r6, r1, lsl #2
    7f34:	0002e70b 	andeq	lr, r2, fp, lsl #14
    7f38:	03360400 	teqeq	r6, #0, 8
    7f3c:	000000d2 	ldrdeq	r0, [r0], -r2
    7f40:	00050101 	andeq	r0, r5, r1, lsl #2
    7f44:	0006b70b 	andeq	fp, r6, fp, lsl #14
    7f48:	03370400 	teqeq	r7, #0, 8
    7f4c:	000000d2 	ldrdeq	r0, [r0], -r2
    7f50:	00040101 	andeq	r0, r4, r1, lsl #2
    7f54:	000a9f0b 	andeq	r9, sl, fp, lsl #30
    7f58:	03380400 	teqeq	r8, #0, 8
    7f5c:	000000d2 	ldrdeq	r0, [r0], -r2
    7f60:	00000401 	andeq	r0, r0, r1, lsl #8
    7f64:	00065b0c 	andeq	r5, r6, ip, lsl #22
    7f68:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    7f6c:	000000d2 	ldrdeq	r0, [r0], -r2
    7f70:	08fb0c01 	ldmeq	fp!, {r0, sl, fp}^
    7f74:	3c040000 	stccc	0, cr0, [r4], {-0}
    7f78:	0000d203 	andeq	sp, r0, r3, lsl #4
    7f7c:	3a0c0200 	bcc	308784 <__ccfg+0x2e87dc>
    7f80:	0400000f 	streq	r0, [r0], #-15
    7f84:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    7f88:	0c030000 	stceq	0, cr0, [r3], {-0}
    7f8c:	00000913 	andeq	r0, r0, r3, lsl r9
    7f90:	e3083f04 	movw	r3, #36612	; 0x8f04
    7f94:	04000000 	streq	r0, [r0], #-0
    7f98:	031d0300 	tsteq	sp, #0, 6
    7f9c:	41040000 	mrsmi	r0, (UNDEF: 4)
    7fa0:	00010003 	andeq	r0, r1, r3
    7fa4:	018e0900 	orreq	r0, lr, r0, lsl #18
    7fa8:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    7fac:	04000006 	streq	r0, [r0], #-6
    7fb0:	019a1a43 	orrseq	r1, sl, r3, asr #20
    7fb4:	01010000 	mrseq	r0, (UNDEF: 1)
    7fb8:	0001a00d 	andeq	sl, r1, sp
    7fbc:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    7fc0:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    7fc4:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    7fc8:	000001c1 	andeq	r0, r0, r1, asr #3
    7fcc:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    7fd0:	0800000c 	stmdaeq	r0, {r2, r3}
    7fd4:	000001c1 	andeq	r0, r0, r1, asr #3
    7fd8:	0003260d 	andeq	r2, r3, sp, lsl #12
    7fdc:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    7fe0:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    7fe4:	080a0101 	stmdaeq	sl, {r0, r8}
    7fe8:	0c098f05 	stceq	15, cr8, [r9], {5}
    7fec:	0c000002 	stceq	0, cr0, [r0], {2}
    7ff0:	00000cd8 	ldrdeq	r0, [r0], -r8
    7ff4:	670b9005 	strvs	r9, [fp, -r5]
    7ff8:	00000000 	andeq	r0, r0, r0
    7ffc:	0010750c 	andseq	r7, r0, ip, lsl #10
    8000:	08910500 	ldmeq	r1, {r8, sl}
    8004:	000000c1 	andeq	r0, r0, r1, asr #1
    8008:	01c50c04 	biceq	r0, r5, r4, lsl #24
    800c:	92050000 	andls	r0, r5, #0
    8010:	0000de10 	andeq	sp, r0, r0, lsl lr
    8014:	03000600 	movweq	r0, #1536	; 0x600
    8018:	00000ccc 	andeq	r0, r0, ip, asr #25
    801c:	db039305 	blle	ecc38 <__ccfg+0xccc90>
    8020:	0f000001 	svceq	0x00000001
    8024:	0000020c 	andeq	r0, r0, ip, lsl #4
    8028:	00000223 	andeq	r0, r0, r3, lsr #4
    802c:	3d0d0010 	stccc	0, cr0, [sp, #-64]	; 0xffffffc0
    8030:	05000009 	streq	r0, [r0, #-9]
    8034:	02180f99 	andseq	r0, r8, #612	; 0x264
    8038:	01010000 	mrseq	r0, (UNDEF: 1)
    803c:	9106010a 	tstls	r6, sl, lsl #2
    8040:	00025b09 	andeq	r5, r2, r9, lsl #22
    8044:	091a0b00 	ldmdbeq	sl, {r8, r9, fp}
    8048:	93060000 	movwls	r0, #24576	; 0x6000
    804c:	0000d207 	andeq	sp, r0, r7, lsl #4
    8050:	01070100 	mrseq	r0, (UNDEF: 23)
    8054:	05cc0b00 	strbeq	r0, [ip, #2816]	; 0xb00
    8058:	94060000 	strls	r0, [r6], #-0
    805c:	0000d203 	andeq	sp, r0, r3, lsl #4
    8060:	00010100 	andeq	r0, r1, r0, lsl #2
    8064:	ab030000 	blge	c806c <__ccfg+0xa80c4>
    8068:	0600000a 	streq	r0, [r0], -sl
    806c:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    8070:	5b080000 	blpl	208078 <__ccfg+0x1e80d0>
    8074:	0f000002 	svceq	0x00000002
    8078:	00000267 	andeq	r0, r0, r7, ror #4
    807c:	00000277 	andeq	r0, r0, r7, ror r2
    8080:	6c080010 	stcvs	0, cr0, [r8], {16}
    8084:	0d000002 	stceq	0, cr0, [r0, #-8]
    8088:	000003aa 	andeq	r0, r0, sl, lsr #7
    808c:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    8090:	01000002 	tsteq	r0, r2
    8094:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    8098:	02950000 	addseq	r0, r5, #0
    809c:	00100000 	andseq	r0, r0, r0
    80a0:	00028a08 	andeq	r8, r2, r8, lsl #20
    80a4:	060e0d00 	streq	r0, [lr], -r0, lsl #26
    80a8:	06070000 	streq	r0, [r7], -r0
    80ac:	00029513 	andeq	r9, r2, r3, lsl r5
    80b0:	0d010100 	stfeqs	f0, [r1, #-0]
    80b4:	000008dd 	ldrdeq	r0, [r0], -sp
    80b8:	e30ec305 	movw	ip, #58117	; 0xe305
    80bc:	01000000 	mrseq	r0, (UNDEF: 0)
    80c0:	0c721101 	ldfeqe	f1, [r2], #-4
    80c4:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    80c8:	02c31001 	sbceq	r1, r3, #1
    80cc:	040e0000 	streq	r0, [lr], #-0
    80d0:	000002c9 	andeq	r0, r0, r9, asr #5
    80d4:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    80d8:	c1130000 	tstgt	r3, r0
    80dc:	00000000 	andeq	r0, r0, r0
    80e0:	0001c80f 	andeq	ip, r1, pc, lsl #16
    80e4:	0002e000 	andeq	lr, r2, r0
    80e8:	08001000 	stmdaeq	r0, {ip}
    80ec:	000002d5 	ldrdeq	r0, [r0], -r5
    80f0:	0009e614 	andeq	lr, r9, r4, lsl r6
    80f4:	017f0800 	cmneq	pc, r0, lsl #16
    80f8:	0002e016 	andeq	lr, r2, r6, lsl r0
    80fc:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    8100:	00000396 	muleq	r0, r6, r3
    8104:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    8108:	000000ef 	andeq	r0, r0, pc, ror #1
    810c:	6e140101 	mufvss	f0, f4, f1
    8110:	08000003 	stmdaeq	r0, {r0, r1}
    8114:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    8118:	01000000 	mrseq	r0, (UNDEF: 0)
    811c:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    8120:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    8124:	16000003 	strne	r0, [r0], -r3
    8128:	00003ca1 	andeq	r3, r0, r1, lsr #25
    812c:	07030708 	streq	r0, [r3, -r8, lsl #14]
    8130:	000000c1 	andeq	r0, r0, r1, asr #1
    8134:	0fcd1600 	svceq	0x00cd1600
    8138:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    813c:	00f40803 	rscseq	r0, r4, r3, lsl #16
    8140:	00040000 	andeq	r0, r4, r0
    8144:	000a0911 	andeq	r0, sl, r1, lsl r9
    8148:	03090800 	movweq	r0, #38912	; 0x9800
    814c:	00031203 	andeq	r1, r3, r3, lsl #4
    8150:	00291700 	eoreq	r1, r9, r0, lsl #14
    8154:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    8158:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    815c:	16000003 	strne	r0, [r0], -r3
    8160:	00001f24 	andeq	r1, r0, r4, lsr #30
    8164:	08031408 	stmdaeq	r3, {r3, sl, ip}
    8168:	000000c1 	andeq	r0, r0, r1, asr #1
    816c:	0be71600 	bleq	ff9cd974 <_estack+0xdf9c8974>
    8170:	15080000 	strne	r0, [r8, #-0]
    8174:	00c10803 	sbceq	r0, r1, r3, lsl #16
    8178:	16020000 	strne	r0, [r2], -r0
    817c:	00004c8e 	andeq	r4, r0, lr, lsl #25
    8180:	0b031608 	bleq	cd9a8 <__ccfg+0xada00>
    8184:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    8188:	47541604 	ldrbmi	r1, [r4, -r4, lsl #12]
    818c:	17080000 	strne	r0, [r8, -r0]
    8190:	00f40903 	rscseq	r0, r4, r3, lsl #18
    8194:	16080000 	strne	r0, [r8], -r0
    8198:	0000000f 	andeq	r0, r0, pc
    819c:	0f031808 	svceq	0x00031808
    81a0:	000003a9 	andeq	r0, r0, r9, lsr #7
    81a4:	095d160c 	ldmdbeq	sp, {r2, r3, r9, sl, ip}^
    81a8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    81ac:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    81b0:	002c0000 	eoreq	r0, ip, r0
    81b4:	0003390f 	andeq	r3, r3, pc, lsl #18
    81b8:	0003b900 	andeq	fp, r3, r0, lsl #18
    81bc:	00881800 	addeq	r1, r8, r0, lsl #16
    81c0:	00030000 	andeq	r0, r3, r0
    81c4:	0346040e 	movteq	r0, #25614	; 0x640e
    81c8:	dc110000 	ldcle	0, cr0, [r1], {-0}
    81cc:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    81d0:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    81d4:	14000003 	strne	r0, [r0], #-3
    81d8:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    81dc:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    81e0:	000003db 	ldrdeq	r0, [r0], -fp
    81e4:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    81e8:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    81ec:	001e590d 	andseq	r5, lr, sp, lsl #18
    81f0:	0e0a0100 	adfeqe	f0, f2, f0
    81f4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    81f8:	01190101 	tsteq	r9, r1, lsl #2
    81fc:	00001ef6 	strdeq	r1, [r0], -r6
    8200:	01050e01 	tsteq	r5, r1, lsl #28
    8204:	00000081 	andeq	r0, r0, r1, lsl #1
    8208:	000027d0 	ldrdeq	r2, [r0], -r0
    820c:	00002830 	andeq	r2, r0, r0, lsr r8
    8210:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    8214:	731a0000 	tstvc	sl, #0
    8218:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    821c:	0000c113 	andeq	ip, r0, r3, lsl r1
    8220:	00281d00 	eoreq	r1, r8, r0, lsl #26
    8224:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    8228:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    822c:	00044923 	andeq	r4, r4, r3, lsr #18
    8230:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    8234:	260b1d1c 			; <UNDEFINED> instruction: 0x260b1d1c
    8238:	13010000 	movwne	r0, #4096	; 0x1000
    823c:	00008106 	andeq	r8, r0, r6, lsl #2
    8240:	00283b00 	eoreq	r3, r8, r0, lsl #22
    8244:	70611e00 	rsbvc	r1, r1, r0, lsl #28
    8248:	0a140100 	beq	508650 <__ccfg+0x4e86a8>
    824c:	000000b5 	strheq	r0, [r0], -r5
    8250:	00649102 	rsbeq	r9, r4, r2, lsl #2
    8254:	01c8040e 	biceq	r0, r8, lr, lsl #8
    8258:	74000000 	strvc	r0, [r0], #-0
    825c:	03000024 	movweq	r0, #36	; 0x24
    8260:	00217b00 	eoreq	r7, r1, r0, lsl #22
    8264:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    8268:	0c000000 	stceq	0, cr0, [r0], {-0}
    826c:	000022db 	ldrdeq	r2, [r0], -fp
    8270:	00000e0a 	andeq	r0, r0, sl, lsl #28
    8274:	00000ea8 	andeq	r0, r0, r8, lsr #29
    8278:	00000000 	andeq	r0, r0, r0
    827c:	00005732 	andeq	r5, r0, r2, lsr r7
    8280:	002bab02 	eoreq	sl, fp, r2, lsl #22
    8284:	17220600 	strne	r0, [r2, -r0, lsl #12]!
    8288:	00000031 	andeq	r0, r0, r1, lsr r0
    828c:	5d060103 	stfpls	f0, [r6, #-12]
    8290:	0200000c 	andeq	r0, r0, #12
    8294:	000031ed 	andeq	r3, r0, sp, ror #3
    8298:	44182506 	ldrmi	r2, [r8], #-1286	; 0xfffffafa
    829c:	03000000 	movweq	r0, #0
    82a0:	0a6b0502 	beq	1ac96b0 <__ccfg+0x1aa9708>
    82a4:	04030000 	streq	r0, [r3], #-0
    82a8:	0007fd05 	andeq	pc, r7, r5, lsl #26
    82ac:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    82b0:	000007f8 	strdeq	r0, [r0], -r8
    82b4:	002a1c02 	eoreq	r1, sl, r2, lsl #24
    82b8:	182e0600 	stmdane	lr!, {r9, sl}
    82bc:	00000065 	andeq	r0, r0, r5, rrx
    82c0:	5b080103 	blpl	2086d4 <__ccfg+0x1e872c>
    82c4:	0200000c 	andeq	r0, r0, #12
    82c8:	00002e12 	andeq	r2, r0, r2, lsl lr
    82cc:	78193106 	ldmdavc	r9, {r1, r2, r8, ip, sp}
    82d0:	03000000 	movweq	r0, #0
    82d4:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    82d8:	b4020000 	strlt	r0, [r2], #-0
    82dc:	06000029 	streq	r0, [r0], -r9, lsr #32
    82e0:	00901934 	addseq	r1, r0, r4, lsr r9
    82e4:	7f040000 	svcvc	0x00040000
    82e8:	03000000 	movweq	r0, #0
    82ec:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    82f0:	90050000 	andls	r0, r5, r0
    82f4:	03000000 	movweq	r0, #0
    82f8:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    82fc:	04060000 	streq	r0, [r6], #-0
    8300:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    8304:	07040300 	streq	r0, [r4, -r0, lsl #6]
    8308:	0000042b 	andeq	r0, r0, fp, lsr #8
    830c:	000bd507 	andeq	sp, fp, r7, lsl #10
    8310:	015e0700 	cmpeq	lr, r0, lsl #14
    8314:	0000aa17 	andeq	sl, r0, r7, lsl sl
    8318:	0e490200 	cdpeq	2, 4, cr0, cr9, cr0, {0}
    831c:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    8320:	00004b0e 	andeq	r4, r0, lr, lsl #22
    8324:	02ff0200 	rscseq	r0, pc, #0, 4
    8328:	74080000 	strvc	r0, [r8], #-0
    832c:	00004b0e 	andeq	r4, r0, lr, lsl #22
    8330:	08040800 	stmdaeq	r4, {fp}
    8334:	00f803a5 	rscseq	r0, r8, r5, lsr #7
    8338:	6c090000 	stcvs	0, cr0, [r9], {-0}
    833c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    8340:	00b10ca7 	adcseq	r0, r1, r7, lsr #25
    8344:	b4090000 	strlt	r0, [r9], #-0
    8348:	0800000a 	stmdaeq	r0, {r1, r3}
    834c:	00f813a8 	rscseq	r1, r8, r8, lsr #7
    8350:	0a000000 	beq	8358 <__exidx_end+0x2698>
    8354:	00000065 	andeq	r0, r0, r5, rrx
    8358:	00000108 	andeq	r0, r0, r8, lsl #2
    835c:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8360:	0c000300 	stceq	3, cr0, [r0], {-0}
    8364:	09a20808 	stmibeq	r2!, {r3, fp}
    8368:	0000012c 	andeq	r0, r0, ip, lsr #2
    836c:	00038e0d 	andeq	r8, r3, sp, lsl #28
    8370:	07a40800 	streq	r0, [r4, r0, lsl #16]!
    8374:	000000a3 	andeq	r0, r0, r3, lsr #1
    8378:	06010d00 	streq	r0, [r1], -r0, lsl #26
    837c:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    8380:	0000d605 	andeq	sp, r0, r5, lsl #12
    8384:	02000400 	andeq	r0, r0, #0, 8
    8388:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    838c:	0803aa08 	stmdaeq	r3, {r3, r9, fp, sp, pc}
    8390:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    8394:	08420204 	stmdaeq	r2, {r2, r9}^
    8398:	16090000 	strne	r0, [r9], -r0
    839c:	00009019 	andeq	r9, r0, r9, lsl r0
    83a0:	02530200 	subseq	r0, r3, #0, 4
    83a4:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    83a8:	0000a30d 	andeq	sl, r0, sp, lsl #6
    83ac:	072a0200 	streq	r0, [sl, -r0, lsl #4]!
    83b0:	23090000 	movwcs	r0, #36864	; 0x9000
    83b4:	0001461b 	andeq	r4, r1, fp, lsl r6
    83b8:	03320f00 	teqeq	r2, #0, 30
    83bc:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    83c0:	01b80834 			; <UNDEFINED> instruction: 0x01b80834
    83c4:	c40d0000 	strgt	r0, [sp], #-0
    83c8:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    83cc:	01b81336 			; <UNDEFINED> instruction: 0x01b81336
    83d0:	10000000 	andne	r0, r0, r0
    83d4:	09006b5f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
    83d8:	00a30737 	adceq	r0, r3, r7, lsr r7
    83dc:	0d040000 	stceq	0, cr0, [r4, #-0]
    83e0:	00000b62 	andeq	r0, r0, r2, ror #22
    83e4:	a30b3709 	movwge	r3, #46857	; 0xb709
    83e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    83ec:	0043f50d 	subeq	pc, r3, sp, lsl #10
    83f0:	14370900 	ldrtne	r0, [r7], #-2304	; 0xfffff700
    83f4:	000000a3 	andeq	r0, r0, r3, lsr #1
    83f8:	04550d0c 	ldrbeq	r0, [r5], #-3340	; 0xfffff2f4
    83fc:	37090000 	strcc	r0, [r9, -r0]
    8400:	0000a31b 	andeq	sl, r0, fp, lsl r3
    8404:	5f101000 	svcpl	0x00101000
    8408:	38090078 	stmdacc	r9, {r3, r4, r5, r6}
    840c:	0001be0b 	andeq	fp, r1, fp, lsl #28
    8410:	11001400 	tstne	r0, r0, lsl #8
    8414:	00015e04 	andeq	r5, r1, r4, lsl #28
    8418:	013a0a00 	teqeq	sl, r0, lsl #20
    841c:	01ce0000 	biceq	r0, lr, r0
    8420:	aa0b0000 	bge	2c8428 <__ccfg+0x2a8480>
    8424:	00000000 	andeq	r0, r0, r0
    8428:	0b7d0f00 	bleq	1f4c030 <__ccfg+0x1f2c088>
    842c:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    8430:	0251083c 	subseq	r0, r1, #60, 16	; 0x3c0000
    8434:	6c0d0000 	stcvs	0, cr0, [sp], {-0}
    8438:	09000005 	stmdbeq	r0, {r0, r2}
    843c:	00a3093e 	adceq	r0, r3, lr, lsr r9
    8440:	0d000000 	stceq	0, cr0, [r0, #-0]
    8444:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    8448:	a3093f09 	movwge	r3, #40713	; 0x9f09
    844c:	04000000 	streq	r0, [r0], #-0
    8450:	0003580d 	andeq	r5, r3, sp, lsl #16
    8454:	09400900 	stmdbeq	r0, {r8, fp}^
    8458:	000000a3 	andeq	r0, r0, r3, lsr #1
    845c:	06740d08 	ldrbteq	r0, [r4], -r8, lsl #26
    8460:	41090000 	mrsmi	r0, (UNDEF: 9)
    8464:	0000a309 	andeq	sl, r0, r9, lsl #6
    8468:	540d0c00 	strpl	r0, [sp], #-3072	; 0xfffff400
    846c:	09000009 	stmdbeq	r0, {r0, r3}
    8470:	00a30942 	adceq	r0, r3, r2, asr #18
    8474:	0d100000 	ldceq	0, cr0, [r0, #-0]
    8478:	00000ace 	andeq	r0, r0, lr, asr #21
    847c:	a3094309 	movwge	r4, #37641	; 0x9309
    8480:	14000000 	strne	r0, [r0], #-0
    8484:	0003460d 	andeq	r4, r3, sp, lsl #12
    8488:	09440900 	stmdbeq	r4, {r8, fp}^
    848c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8490:	05750d18 	ldrbeq	r0, [r5, #-3352]!	; 0xfffff2e8
    8494:	45090000 	strmi	r0, [r9, #-0]
    8498:	0000a309 	andeq	sl, r0, r9, lsl #6
    849c:	f00d1c00 			; <UNDEFINED> instruction: 0xf00d1c00
    84a0:	09000008 	stmdbeq	r0, {r3}
    84a4:	00a30946 	adceq	r0, r3, r6, asr #18
    84a8:	00200000 	eoreq	r0, r0, r0
    84ac:	00003b12 	andeq	r3, r0, r2, lsl fp
    84b0:	09010800 	stmdbeq	r1, {fp}
    84b4:	0296084f 	addseq	r0, r6, #5177344	; 0x4f0000
    84b8:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    84bc:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    84c0:	02960a50 	addseq	r0, r6, #80, 20	; 0x50000
    84c4:	0d000000 	stceq	0, cr0, [r0, #-0]
    84c8:	00000c17 	andeq	r0, r0, r7, lsl ip
    84cc:	96095109 	strls	r5, [r9], -r9, lsl #2
    84d0:	80000002 	andhi	r0, r0, r2
    84d4:	000dc613 	andeq	ip, sp, r3, lsl r6
    84d8:	0a530900 	beq	14ca8e0 <__ccfg+0x14aa938>
    84dc:	0000013a 	andeq	r0, r0, sl, lsr r1
    84e0:	b7130100 	ldrlt	r0, [r3, -r0, lsl #2]
    84e4:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    84e8:	013a0a56 	teqeq	sl, r6, asr sl
    84ec:	01040000 	mrseq	r0, (UNDEF: 4)
    84f0:	01380a00 	teqeq	r8, r0, lsl #20
    84f4:	02a60000 	adceq	r0, r6, #0
    84f8:	aa0b0000 	bge	2c8500 <__ccfg+0x2a8558>
    84fc:	1f000000 	svcne	0x00000000
    8500:	0a161200 	beq	58cd08 <__ccfg+0x56cd60>
    8504:	01900000 	orrseq	r0, r0, r0
    8508:	e9086209 	stmdb	r8, {r0, r3, r9, sp, lr}
    850c:	0d000002 	stceq	0, cr0, [r0, #-8]
    8510:	00000ec4 	andeq	r0, r0, r4, asr #29
    8514:	e9126309 	ldmdb	r2, {r0, r3, r8, r9, sp, lr}
    8518:	00000002 	andeq	r0, r0, r2
    851c:	0005840d 	andeq	r8, r5, sp, lsl #8
    8520:	06640900 	strbteq	r0, [r4], -r0, lsl #18
    8524:	000000a3 	andeq	r0, r0, r3, lsr #1
    8528:	03070d04 	movweq	r0, #32004	; 0x7d04
    852c:	66090000 	strvs	r0, [r9], -r0
    8530:	0002ef09 	andeq	lr, r2, r9, lsl #30
    8534:	3b0d0800 	blcc	34a53c <__ccfg+0x32a594>
    8538:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    853c:	02511e67 	subseq	r1, r1, #1648	; 0x670
    8540:	00880000 	addeq	r0, r8, r0
    8544:	02a60411 	adceq	r0, r6, #285212672	; 0x11000000
    8548:	ff0a0000 			; <UNDEFINED> instruction: 0xff0a0000
    854c:	ff000002 			; <UNDEFINED> instruction: 0xff000002
    8550:	0b000002 	bleq	8560 <__exidx_end+0x28a0>
    8554:	000000aa 	andeq	r0, r0, sl, lsr #1
    8558:	0411001f 	ldreq	r0, [r1], #-31	; 0xffffffe1
    855c:	00000305 	andeq	r0, r0, r5, lsl #6
    8560:	c50f0114 	strgt	r0, [pc, #-276]	; 8454 <__exidx_end+0x2794>
    8564:	0800000c 	stmdaeq	r0, {r2, r3}
    8568:	2f087a09 	svccs	0x00087a09
    856c:	0d000003 	stceq	0, cr0, [r0, #-12]
    8570:	00000cd7 	ldrdeq	r0, [r0], -r7
    8574:	2f117b09 	svccs	0x00117b09
    8578:	00000003 	andeq	r0, r0, r3
    857c:	001da00d 	andseq	sl, sp, sp
    8580:	067c0900 	ldrbteq	r0, [ip], -r0, lsl #18
    8584:	000000a3 	andeq	r0, r0, r3, lsr #1
    8588:	04110004 	ldreq	r0, [r1], #-4
    858c:	00000065 	andeq	r0, r0, r5, rrx
    8590:	00044d0f 	andeq	r4, r4, pc, lsl #26
    8594:	ba096800 	blt	26259c <__ccfg+0x2425f4>
    8598:	00047808 	andeq	r7, r4, r8, lsl #16
    859c:	705f1000 	subsvc	r1, pc, r0
    85a0:	12bb0900 	adcsne	r0, fp, #0, 18
    85a4:	0000032f 	andeq	r0, r0, pc, lsr #6
    85a8:	725f1000 	subsvc	r1, pc, #0
    85ac:	07bc0900 	ldreq	r0, [ip, r0, lsl #18]!
    85b0:	000000a3 	andeq	r0, r0, r3, lsr #1
    85b4:	775f1004 	ldrbvc	r1, [pc, -r4]
    85b8:	07bd0900 	ldreq	r0, [sp, r0, lsl #18]!
    85bc:	000000a3 	andeq	r0, r0, r3, lsr #1
    85c0:	01c40d08 	biceq	r0, r4, r8, lsl #26
    85c4:	be090000 	cdplt	0, 0, cr0, cr9, cr0, {0}
    85c8:	00004409 	andeq	r4, r0, r9, lsl #8
    85cc:	590d0c00 	stmdbpl	sp, {sl, fp}
    85d0:	09000008 	stmdbeq	r0, {r3}
    85d4:	004409bf 	strheq	r0, [r4], #-159	; 0xffffff61
    85d8:	100e0000 	andne	r0, lr, r0
    85dc:	0066625f 	rsbeq	r6, r6, pc, asr r2
    85e0:	0711c009 	ldreq	ip, [r1, -r9]
    85e4:	10000003 	andne	r0, r0, r3
    85e8:	0001bb0d 	andeq	fp, r1, sp, lsl #22
    85ec:	07c10900 	strbeq	r0, [r1, r0, lsl #18]
    85f0:	000000a3 	andeq	r0, r0, r3, lsr #1
    85f4:	030c0d18 	movweq	r0, #52504	; 0xcd18
    85f8:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    85fc:	0001380a 	andeq	r3, r1, sl, lsl #16
    8600:	2f0d1c00 	svccs	0x000d1c00
    8604:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    8608:	05fd1dca 	ldrbeq	r1, [sp, #3530]!	; 0xdca
    860c:	0d200000 	stceq	0, cr0, [r0, #-0]
    8610:	00001cf6 	strdeq	r1, [r0], -r6
    8614:	281dcc09 	ldmdacs	sp, {r0, r3, sl, fp, lr, pc}
    8618:	24000006 	strcs	r0, [r0], #-6
    861c:	000ee40d 	andeq	lr, lr, sp, lsl #8
    8620:	0dcf0900 	vstreq.16	s1, [pc]	; 8628 <__exidx_end+0x2968>	; <UNPREDICTABLE>
    8624:	0000064d 	andeq	r0, r0, sp, asr #12
    8628:	1ce40d28 	stclne	13, cr0, [r4], #160	; 0xa0
    862c:	d0090000 	andle	r0, r9, r0
    8630:	00066809 	andeq	r6, r6, r9, lsl #16
    8634:	5f102c00 	svcpl	0x00102c00
    8638:	09006275 	stmdbeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    863c:	030711d3 	movweq	r1, #29139	; 0x71d3
    8640:	10300000 	eorsne	r0, r0, r0
    8644:	0070755f 	rsbseq	r7, r0, pc, asr r5
    8648:	2f12d409 	svccs	0x0012d409
    864c:	38000003 	stmdacc	r0, {r0, r1}
    8650:	72755f10 	rsbsvc	r5, r5, #16, 30	; 0x40
    8654:	07d50900 	ldrbeq	r0, [r5, r0, lsl #18]
    8658:	000000a3 	andeq	r0, r0, r3, lsr #1
    865c:	0f1b0d3c 	svceq	0x001b0d3c
    8660:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    8664:	00066e11 	andeq	r6, r6, r1, lsl lr
    8668:	640d4000 	strvs	r4, [sp], #-0
    866c:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8670:	067e11d9 			; <UNDEFINED> instruction: 0x067e11d9
    8674:	10430000 	subne	r0, r3, r0
    8678:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    867c:	0711dc09 	ldreq	sp, [r1, -r9, lsl #24]
    8680:	44000003 	strmi	r0, [r0], #-3
    8684:	000b740d 	andeq	r7, fp, sp, lsl #8
    8688:	07df0900 	ldrbeq	r0, [pc, r0, lsl #18]
    868c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8690:	047c0d4c 	ldrbteq	r0, [ip], #-3404	; 0xfffff2b4
    8694:	e0090000 	and	r0, r9, r0
    8698:	0000be0a 	andeq	fp, r0, sl, lsl #28
    869c:	530d5000 	movwpl	r5, #53248	; 0xd000
    86a0:	09000047 	stmdbeq	r0, {r0, r1, r2, r6}
    86a4:	049712e3 	ldreq	r1, [r7], #739	; 0x2e3
    86a8:	0d540000 	ldcleq	0, cr0, [r4, #-0]
    86ac:	00000b9a 	muleq	r0, sl, fp
    86b0:	520ce709 	andpl	lr, ip, #2359296	; 0x240000
    86b4:	58000001 	stmdapl	r0, {r0}
    86b8:	000a1e0d 	andeq	r1, sl, sp, lsl #28
    86bc:	0ee90900 	vfmaeq.f16	s1, s18, s0	; <UNPREDICTABLE>
    86c0:	0000012c 	andeq	r0, r0, ip, lsr #2
    86c4:	0e970d5c 	mrceq	13, 4, r0, cr7, cr12, {2}
    86c8:	ea090000 	b	2486d0 <__ccfg+0x228728>
    86cc:	0000a309 	andeq	sl, r0, r9, lsl #6
    86d0:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
    86d4:	0000a301 	andeq	sl, r0, r1, lsl #6
    86d8:	00049700 	andeq	r9, r4, r0, lsl #14
    86dc:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    86e0:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    86e4:	16000001 	strne	r0, [r0], -r1
    86e8:	000005eb 	andeq	r0, r0, fp, ror #11
    86ec:	0000a316 	andeq	sl, r0, r6, lsl r3
    86f0:	04110000 	ldreq	r0, [r1], #-0
    86f4:	000004a2 	andeq	r0, r0, r2, lsr #9
    86f8:	00049704 	andeq	r9, r4, r4, lsl #14
    86fc:	0d5f1700 	ldcleq	7, cr1, [pc, #-0]	; 8704 <__exidx_end+0x2a44>
    8700:	04280000 	strteq	r0, [r8], #-0
    8704:	08026509 	stmdaeq	r2, {r0, r3, r8, sl, sp, lr}
    8708:	000005eb 	andeq	r0, r0, fp, ror #11
    870c:	00090418 	andeq	r0, r9, r8, lsl r4
    8710:	02670900 	rsbeq	r0, r7, #0, 18
    8714:	0000a307 	andeq	sl, r0, r7, lsl #6
    8718:	e2180000 	ands	r0, r8, #0
    871c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8720:	da0b026c 	ble	2c90d8 <__ccfg+0x2a9130>
    8724:	04000006 	streq	r0, [r0], #-6
    8728:	0002f718 	andeq	pc, r2, r8, lsl r7	; <UNPREDICTABLE>
    872c:	026c0900 	rsbeq	r0, ip, #0, 18
    8730:	0006da14 	andeq	sp, r6, r4, lsl sl
    8734:	0a180800 	beq	60a73c <__ccfg+0x5ea794>
    8738:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    873c:	da1e026c 	ble	7890f4 <__ccfg+0x76914c>
    8740:	0c000006 	stceq	0, cr0, [r0], {6}
    8744:	00057f18 	andeq	r7, r5, r8, lsl pc
    8748:	026e0900 	rsbeq	r0, lr, #0, 18
    874c:	0000a308 	andeq	sl, r0, r8, lsl #6
    8750:	d4181000 	ldrle	r1, [r8], #-0
    8754:	09000004 	stmdbeq	r0, {r2}
    8758:	da08026f 	ble	20911c <__ccfg+0x1e9174>
    875c:	14000008 	strne	r0, [r0], #-8
    8760:	000e7718 	andeq	r7, lr, r8, lsl r7
    8764:	02720900 	rsbseq	r0, r2, #0, 18
    8768:	0000a307 	andeq	sl, r0, r7, lsl #6
    876c:	a1183000 	tstge	r8, r0
    8770:	09000042 	stmdbeq	r0, {r1, r6}
    8774:	f0160273 			; <UNDEFINED> instruction: 0xf0160273
    8778:	34000008 	strcc	r0, [r0], #-8
    877c:	00078a18 	andeq	r8, r7, r8, lsl sl
    8780:	02750900 	rsbseq	r0, r5, #0, 18
    8784:	0000a307 	andeq	sl, r0, r7, lsl #6
    8788:	84183800 	ldrhi	r3, [r8], #-2048	; 0xfffff800
    878c:	09000008 	stmdbeq	r0, {r3}
    8790:	020a0277 	andeq	r0, sl, #1879048199	; 0x70000007
    8794:	3c000009 	stccc	0, cr0, [r0], {9}
    8798:	00035018 	andeq	r5, r3, r8, lsl r0
    879c:	027a0900 	rsbseq	r0, sl, #0, 18
    87a0:	0001b813 	andeq	fp, r1, r3, lsl r8
    87a4:	0b184000 	bleq	6187ac <__ccfg+0x5f8804>
    87a8:	09000004 	stmdbeq	r0, {r2}
    87ac:	a307027b 	movwge	r0, #29307	; 0x727b
    87b0:	44000000 	strmi	r0, [r0], #-0
    87b4:	00060918 	andeq	r0, r6, r8, lsl r9
    87b8:	027c0900 	rsbseq	r0, ip, #0, 18
    87bc:	0001b813 	andeq	fp, r1, r3, lsl r8
    87c0:	1f184800 	svcne	0x00184800
    87c4:	09000008 	stmdbeq	r0, {r3}
    87c8:	0814027d 	ldmdaeq	r4, {r0, r2, r3, r4, r5, r6, r9}
    87cc:	4c000009 	stcmi	0, cr0, [r0], {9}
    87d0:	000b5a18 	andeq	r5, fp, r8, lsl sl
    87d4:	02800900 	addeq	r0, r0, #0, 18
    87d8:	0000a307 	andeq	sl, r0, r7, lsl #6
    87dc:	53185000 	tstpl	r8, #0
    87e0:	0900000c 	stmdbeq	r0, {r2, r3}
    87e4:	eb090281 	bl	2491f0 <__ccfg+0x229248>
    87e8:	54000005 	strpl	r0, [r0], #-5
    87ec:	000c6d18 	andeq	r6, ip, r8, lsl sp
    87f0:	02a40900 	adceq	r0, r4, #0, 18
    87f4:	0008b507 	andeq	fp, r8, r7, lsl #10
    87f8:	16195800 	ldrne	r5, [r9], -r0, lsl #16
    87fc:	0900000a 	stmdbeq	r0, {r1, r3}
    8800:	e91302a8 	ldmdb	r3, {r3, r5, r7, r9}
    8804:	48000002 	stmdami	r0, {r1}
    8808:	06ae1901 	strteq	r1, [lr], r1, lsl #18
    880c:	a9090000 	stmdbge	r9, {}	; <UNPREDICTABLE>
    8810:	02a61202 	adceq	r1, r6, #536870912	; 0x20000000
    8814:	014c0000 	mrseq	r0, (UNDEF: 76)
    8818:	00069519 	andeq	r9, r6, r9, lsl r5
    881c:	02ad0900 	adceq	r0, sp, #0, 18
    8820:	00091a0c 	andeq	r1, r9, ip, lsl #20
    8824:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    8828:	00000ce3 	andeq	r0, r0, r3, ror #25
    882c:	1002b209 	andne	fp, r2, r9, lsl #4
    8830:	0000069b 	muleq	r0, fp, r6
    8834:	a61902e0 	ldrge	r0, [r9], -r0, ror #5
    8838:	0900000a 	stmdbeq	r0, {r1, r3}
    883c:	260a02b4 			; <UNDEFINED> instruction: 0x260a02b4
    8840:	ec000009 	stc	0, cr0, [r0], {9}
    8844:	04110002 	ldreq	r0, [r1], #-2
    8848:	000005f1 	strdeq	r0, [r0], -r1
    884c:	64080103 	strvs	r0, [r8], #-259	; 0xfffffefd
    8850:	0400000c 	streq	r0, [r0], #-12
    8854:	000005f1 	strdeq	r0, [r0], -r1
    8858:	04780411 	ldrbteq	r0, [r8], #-1041	; 0xfffffbef
    885c:	01150000 	tsteq	r5, r0
    8860:	000000a3 	andeq	r0, r0, r3, lsr #1
    8864:	00000622 	andeq	r0, r0, r2, lsr #12
    8868:	00049716 	andeq	r9, r4, r6, lsl r7
    886c:	01381600 	teqeq	r8, r0, lsl #12
    8870:	22160000 	andscs	r0, r6, #0
    8874:	16000006 	strne	r0, [r0], -r6
    8878:	000000a3 	andeq	r0, r0, r3, lsr #1
    887c:	f8041100 			; <UNDEFINED> instruction: 0xf8041100
    8880:	11000005 	tstne	r0, r5
    8884:	00060304 	andeq	r0, r6, r4, lsl #6
    8888:	ca011500 	bgt	4dc90 <__ccfg+0x2dce8>
    888c:	4d000000 	stcmi	0, cr0, [r0, #-0]
    8890:	16000006 	strne	r0, [r0], -r6
    8894:	00000497 	muleq	r0, r7, r4
    8898:	00013816 	andeq	r3, r1, r6, lsl r8
    889c:	00ca1600 	sbceq	r1, sl, r0, lsl #12
    88a0:	a3160000 	tstge	r6, #0
    88a4:	00000000 	andeq	r0, r0, r0
    88a8:	062e0411 			; <UNDEFINED> instruction: 0x062e0411
    88ac:	01150000 	tsteq	r5, r0
    88b0:	000000a3 	andeq	r0, r0, r3, lsr #1
    88b4:	00000668 	andeq	r0, r0, r8, ror #12
    88b8:	00049716 	andeq	r9, r4, r6, lsl r7
    88bc:	01381600 	teqeq	r8, r0, lsl #12
    88c0:	11000000 	mrsne	r0, (UNDEF: 0)
    88c4:	00065304 	andeq	r5, r6, r4, lsl #6
    88c8:	00650a00 	rsbeq	r0, r5, r0, lsl #20
    88cc:	067e0000 	ldrbteq	r0, [lr], -r0
    88d0:	aa0b0000 	bge	2c88d8 <__ccfg+0x2a8930>
    88d4:	02000000 	andeq	r0, r0, #0
    88d8:	00650a00 	rsbeq	r0, r5, r0, lsl #20
    88dc:	068e0000 	streq	r0, [lr], r0
    88e0:	aa0b0000 	bge	2c88e8 <__ccfg+0x2a8940>
    88e4:	00000000 	andeq	r0, r0, r0
    88e8:	046e0700 	strbteq	r0, [lr], #-1792	; 0xfffff900
    88ec:	24090000 	strcs	r0, [r9], #-0
    88f0:	03351a01 	teqeq	r5, #4096	; 0x1000
    88f4:	dd1a0000 	ldcle	0, cr0, [sl, #-0]
    88f8:	0c00000c 	stceq	0, cr0, [r0], {12}
    88fc:	08012809 	stmdaeq	r1, {r0, r3, fp, sp}
    8900:	000006d4 	ldrdeq	r0, [r0], -r4
    8904:	000ec418 	andeq	ip, lr, r8, lsl r4
    8908:	012a0900 			; <UNDEFINED> instruction: 0x012a0900
    890c:	0006d411 	andeq	sp, r6, r1, lsl r4
    8910:	ce180000 	cdpgt	0, 1, cr0, cr8, cr0, {0}
    8914:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    8918:	a307012b 	movwge	r0, #28971	; 0x712b
    891c:	04000000 	streq	r0, [r0], #-0
    8920:	00077218 	andeq	r7, r7, r8, lsl r2
    8924:	012c0900 			; <UNDEFINED> instruction: 0x012c0900
    8928:	0006da0b 	andeq	sp, r6, fp, lsl #20
    892c:	11000800 	tstne	r0, r0, lsl #16
    8930:	00069b04 	andeq	r9, r6, r4, lsl #22
    8934:	8e041100 	adfhis	f1, f4, f0
    8938:	1a000006 	bne	8958 <__exidx_end+0x2c98>
    893c:	000003da 	ldrdeq	r0, [r0], -sl
    8940:	0144090e 	cmpeq	r4, lr, lsl #18
    8944:	00071908 	andeq	r1, r7, r8, lsl #18
    8948:	164b1800 	strbne	r1, [fp], -r0, lsl #16
    894c:	45090000 	strmi	r0, [r9, #-0]
    8950:	07191201 	ldreq	r1, [r9, -r1, lsl #4]
    8954:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8958:	00000831 	andeq	r0, r0, r1, lsr r8
    895c:	12014609 	andne	r4, r1, #9437184	; 0x900000
    8960:	00000719 	andeq	r0, r0, r9, lsl r7
    8964:	14fd1806 	ldrbtne	r1, [sp], #2054	; 0x806
    8968:	47090000 	strmi	r0, [r9, -r0]
    896c:	00781201 	rsbseq	r1, r8, r1, lsl #4
    8970:	000c0000 	andeq	r0, ip, r0
    8974:	0000780a 	andeq	r7, r0, sl, lsl #16
    8978:	00072900 	andeq	r2, r7, r0, lsl #18
    897c:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8980:	00020000 	andeq	r0, r2, r0
    8984:	8509d01b 	strhi	sp, [r9, #-27]	; 0xffffffe5
    8988:	083e0702 	ldmdaeq	lr!, {r1, r8, r9, sl}
    898c:	6a180000 	bvs	608994 <__ccfg+0x5e89ec>
    8990:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8994:	aa180287 	bge	6093b8 <__ccfg+0x5e9410>
    8998:	00000000 	andeq	r0, r0, r0
    899c:	000ceb18 	andeq	lr, ip, r8, lsl fp
    89a0:	02880900 	addeq	r0, r8, #0, 18
    89a4:	0005eb12 	andeq	lr, r5, r2, lsl fp
    89a8:	38180400 	ldmdacc	r8, {sl}
    89ac:	09000004 	stmdbeq	r0, {r2}
    89b0:	3e100289 	cdpcc	2, 1, cr0, cr0, cr9, {4}
    89b4:	08000008 	stmdaeq	r0, {r3}
    89b8:	000b4318 	andeq	r4, fp, r8, lsl r3
    89bc:	028a0900 	addeq	r0, sl, #0, 18
    89c0:	0001ce17 	andeq	ip, r1, r7, lsl lr
    89c4:	e9182400 	ldmdb	r8, {sl, sp}
    89c8:	09000007 	stmdbeq	r0, {r0, r1, r2}
    89cc:	a30f028b 	movwge	r0, #62091	; 0xf28b
    89d0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    89d4:	000ebf18 	andeq	fp, lr, r8, lsl pc
    89d8:	028c0900 	addeq	r0, ip, #0, 18
    89dc:	00009c2c 	andeq	r9, r0, ip, lsr #24
    89e0:	7f185000 	svcvc	0x00185000
    89e4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    89e8:	e01a028d 	ands	r0, sl, sp, lsl #5
    89ec:	58000006 	stmdapl	r0, {r1, r2}
    89f0:	00063918 	andeq	r3, r6, r8, lsl r9
    89f4:	028e0900 	addeq	r0, lr, #0, 18
    89f8:	00012c16 	andeq	r2, r1, r6, lsl ip
    89fc:	f8186800 			; <UNDEFINED> instruction: 0xf8186800
    8a00:	0900000c 	stmdbeq	r0, {r2, r3}
    8a04:	2c16028f 	lfmcs	f0, 4, [r6], {143}	; 0x8f
    8a08:	70000001 	andvc	r0, r0, r1
    8a0c:	00007118 	andeq	r7, r0, r8, lsl r1
    8a10:	02900900 	addseq	r0, r0, #0, 18
    8a14:	00012c16 	andeq	r2, r1, r6, lsl ip
    8a18:	6a187800 	bvs	626a20 <__ccfg+0x606a78>
    8a1c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    8a20:	4e100291 	mrcmi	2, 0, r0, cr0, cr1, {4}
    8a24:	80000008 	andhi	r0, r0, r8
    8a28:	00041518 	andeq	r1, r4, r8, lsl r5
    8a2c:	02920900 	addseq	r0, r2, #0, 18
    8a30:	00085e10 	andeq	r5, r8, r0, lsl lr
    8a34:	8d188800 	ldchi	8, cr8, [r8, #-0]
    8a38:	0900000c 	stmdbeq	r0, {r2, r3}
    8a3c:	a30f0293 	movwge	r0, #62099	; 0xf293
    8a40:	a0000000 	andge	r0, r0, r0
    8a44:	0002ac18 	andeq	sl, r2, r8, lsl ip
    8a48:	02940900 	addseq	r0, r4, #0, 18
    8a4c:	00012c16 	andeq	r2, r1, r6, lsl ip
    8a50:	9f18a400 	svcls	0x0018a400
    8a54:	09000006 	stmdbeq	r0, {r1, r2}
    8a58:	2c160295 	lfmcs	f0, 4, [r6], {149}	; 0x95
    8a5c:	ac000001 	stcge	0, cr0, [r0], {1}
    8a60:	0005bb18 	andeq	fp, r5, r8, lsl fp
    8a64:	02960900 	addseq	r0, r6, #0, 18
    8a68:	00012c16 	andeq	r2, r1, r6, lsl ip
    8a6c:	4a18b400 	bmi	635a74 <__ccfg+0x615acc>
    8a70:	09000008 	stmdbeq	r0, {r3}
    8a74:	2c160297 	lfmcs	f0, 4, [r6], {151}	; 0x97
    8a78:	bc000001 	stclt	0, cr0, [r0], {1}
    8a7c:	00062818 	andeq	r2, r6, r8, lsl r8
    8a80:	02980900 	addseq	r0, r8, #0, 18
    8a84:	00012c16 	andeq	r2, r1, r6, lsl ip
    8a88:	0218c400 	andseq	ip, r8, #0, 8
    8a8c:	09000009 	stmdbeq	r0, {r0, r3}
    8a90:	a3080299 	movwge	r0, #33433	; 0x8299
    8a94:	cc000000 	stcgt	0, cr0, [r0], {-0}
    8a98:	05f10a00 	ldrbeq	r0, [r1, #2560]!	; 0xa00
    8a9c:	084e0000 	stmdaeq	lr, {}^	; <UNPREDICTABLE>
    8aa0:	aa0b0000 	bge	2c8aa8 <__ccfg+0x2a8b00>
    8aa4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    8aa8:	05f10a00 	ldrbeq	r0, [r1, #2560]!	; 0xa00
    8aac:	085e0000 	ldmdaeq	lr, {}^	; <UNPREDICTABLE>
    8ab0:	aa0b0000 	bge	2c8ab8 <__ccfg+0x2a8b10>
    8ab4:	07000000 	streq	r0, [r0, -r0]
    8ab8:	05f10a00 	ldrbeq	r0, [r1, #2560]!	; 0xa00
    8abc:	086e0000 	stmdaeq	lr!, {}^	; <UNPREDICTABLE>
    8ac0:	aa0b0000 	bge	2c8ac8 <__ccfg+0x2a8b20>
    8ac4:	17000000 	strne	r0, [r0, -r0]
    8ac8:	09f01b00 	ldmibeq	r0!, {r8, r9, fp, ip}^
    8acc:	9507029e 	strls	r0, [r7, #-670]	; 0xfffffd62
    8ad0:	18000008 	stmdane	r0, {r3}
    8ad4:	000003c0 	andeq	r0, r0, r0, asr #7
    8ad8:	1b02a109 	blne	b0f04 <__ccfg+0x90f5c>
    8adc:	00000895 	muleq	r0, r5, r8
    8ae0:	0f121800 	svceq	0x00121800
    8ae4:	a2090000 	andge	r0, r9, #0
    8ae8:	08a51802 	stmiaeq	r5!, {r1, fp, ip}
    8aec:	00780000 	rsbseq	r0, r8, r0
    8af0:	00032f0a 	andeq	r2, r3, sl, lsl #30
    8af4:	0008a500 	andeq	sl, r8, r0, lsl #10
    8af8:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8afc:	001d0000 	andseq	r0, sp, r0
    8b00:	0000aa0a 	andeq	sl, r0, sl, lsl #20
    8b04:	0008b500 	andeq	fp, r8, r0, lsl #10
    8b08:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8b0c:	001d0000 	andseq	r0, sp, r0
    8b10:	8309f01c 	movwhi	pc, #36892	; 0x901c	; <UNPREDICTABLE>
    8b14:	08da0302 	ldmeq	sl, {r1, r8, r9}^
    8b18:	5f1d0000 	svcpl	0x001d0000
    8b1c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    8b20:	290b029a 	stmdbcs	fp, {r1, r3, r4, r7, r9}
    8b24:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    8b28:	00000b52 	andeq	r0, r0, r2, asr fp
    8b2c:	0b02a309 	bleq	b1758 <__ccfg+0x917b0>
    8b30:	0000086e 	andeq	r0, r0, lr, ror #16
    8b34:	05f10a00 	ldrbeq	r0, [r1, #2560]!	; 0xa00
    8b38:	08ea0000 	stmiaeq	sl!, {}^	; <UNPREDICTABLE>
    8b3c:	aa0b0000 	bge	2c8b44 <__ccfg+0x2a8b9c>
    8b40:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8b44:	0eca1e00 	cdpeq	14, 12, cr1, cr10, cr0, {0}
    8b48:	11010000 	mrsne	r0, (UNDEF: 1)
    8b4c:	0008ea04 	andeq	lr, r8, r4, lsl #20
    8b50:	02011f00 	andeq	r1, r1, #0, 30
    8b54:	16000009 	strne	r0, [r0], -r9
    8b58:	00000497 	muleq	r0, r7, r4
    8b5c:	f6041100 			; <UNDEFINED> instruction: 0xf6041100
    8b60:	11000008 	tstne	r0, r8
    8b64:	0001b804 	andeq	fp, r1, r4, lsl #16
    8b68:	1a011f00 	bne	50770 <__ccfg+0x307c8>
    8b6c:	16000009 	strne	r0, [r0], -r9
    8b70:	000000a3 	andeq	r0, r0, r3, lsr #1
    8b74:	20041100 	andcs	r1, r4, r0, lsl #2
    8b78:	11000009 	tstne	r0, r9
    8b7c:	00090e04 	andeq	r0, r9, r4, lsl #28
    8b80:	068e0a00 	streq	r0, [lr], r0, lsl #20
    8b84:	09360000 	ldmdbeq	r6!, {}	; <UNPREDICTABLE>
    8b88:	aa0b0000 	bge	2c8b90 <__ccfg+0x2a8be8>
    8b8c:	02000000 	andeq	r0, r0, #0
    8b90:	0ac22000 	beq	ff090b98 <_estack+0xdf08bb98>
    8b94:	33090000 	movwcc	r0, #36864	; 0x9000
    8b98:	04971703 	ldreq	r1, [r7], #1795	; 0x703
    8b9c:	01010000 	mrseq	r0, (UNDEF: 1)
    8ba0:	000abb20 	andeq	fp, sl, r0, lsr #22
    8ba4:	03340900 	teqeq	r4, #0, 18
    8ba8:	00049d1d 	andeq	r9, r4, sp, lsl sp
    8bac:	02010100 	andeq	r0, r1, #0, 2
    8bb0:	000024e1 	andeq	r2, r0, r1, ror #9
    8bb4:	7f123b0b 	svcvc	0x00123b0b
    8bb8:	0c000000 	stceq	0, cr0, [r0], {-0}
    8bbc:	09400b08 	stmdbeq	r0, {r3, r8, r9, fp}^
    8bc0:	00000984 	andeq	r0, r0, r4, lsl #19
    8bc4:	001fe40d 	andseq	lr, pc, sp, lsl #8
    8bc8:	0d410b00 	vstreq	d16, [r1, #-0]
    8bcc:	00000984 	andeq	r0, r0, r4, lsl #19
    8bd0:	22270d00 	eorcs	r0, r7, #0, 26
    8bd4:	420b0000 	andmi	r0, fp, #0
    8bd8:	0009840d 	andeq	r8, r9, sp, lsl #8
    8bdc:	11000400 	tstne	r0, r0, lsl #8
    8be0:	00005904 	andeq	r5, r0, r4, lsl #18
    8be4:	272c0200 	strcs	r0, [ip, -r0, lsl #4]!
    8be8:	430b0000 	movwmi	r0, #45056	; 0xb000
    8bec:	00096003 	andeq	r6, r9, r3
    8bf0:	22a80200 	adccs	r0, r8, #0, 4
    8bf4:	3c0c0000 	stccc	0, cr0, [ip], {-0}
    8bf8:	0009a22b 	andeq	sl, r9, fp, lsr #4
    8bfc:	25470f00 	strbcs	r0, [r7, #-3840]	; 0xfffff100
    8c00:	0c100000 	ldceq	0, cr0, [r0], {-0}
    8c04:	09fe156f 	ldmibeq	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, ip}^
    8c08:	130d0000 	movwne	r0, #53248	; 0xd000
    8c0c:	0c00001f 	stceq	0, cr0, [r0], {31}
    8c10:	006c0d70 	rsbeq	r0, ip, r0, ror sp
    8c14:	0d000000 	stceq	0, cr0, [r0, #-0]
    8c18:	00000778 	andeq	r0, r0, r8, ror r7
    8c1c:	6c0d710c 	stfvss	f7, [sp], {12}
    8c20:	02000000 	andeq	r0, r0, #0
    8c24:	0022860d 	eoreq	r8, r2, sp, lsl #12
    8c28:	13740c00 	cmnne	r4, #0, 24
    8c2c:	00000bc0 	andeq	r0, r0, r0, asr #23
    8c30:	20150d04 	andscs	r0, r5, r4, lsl #26
    8c34:	750c0000 	strvc	r0, [ip, #-0]
    8c38:	0009540c 	andeq	r5, r9, ip, lsl #8
    8c3c:	b60d0800 	strlt	r0, [sp], -r0, lsl #16
    8c40:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8c44:	0b4c067d 	bleq	130a640 <__ccfg+0x12ea698>
    8c48:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    8c4c:	00002200 	andeq	r2, r0, r0, lsl #4
    8c50:	9606810c 	strls	r8, [r6], -ip, lsl #2
    8c54:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    8c58:	20890200 	addcs	r0, r9, r0, lsl #4
    8c5c:	3f0c0000 	svccc	0x000c0000
    8c60:	000a0a2a 	andeq	r0, sl, sl, lsr #20
    8c64:	207c0f00 	rsbscs	r0, ip, r0, lsl #30
    8c68:	0c180000 	ldceq	0, cr0, [r8], {-0}
    8c6c:	0ac115e0 	beq	ff04e3f4 <_estack+0xdf0493f4>
    8c70:	130d0000 	movwne	r0, #53248	; 0xd000
    8c74:	0c00001f 	stceq	0, cr0, [r0], {31}
    8c78:	006c0de1 	rsbeq	r0, ip, r1, ror #27
    8c7c:	0d000000 	stceq	0, cr0, [r0, #-0]
    8c80:	00000778 	andeq	r0, r0, r8, ror r7
    8c84:	6c0de20c 	sfmvs	f6, 1, [sp], {12}
    8c88:	02000000 	andeq	r0, r0, #0
    8c8c:	0022860d 	eoreq	r8, r2, sp, lsl #12
    8c90:	13e50c00 	mvnne	r0, #0, 24
    8c94:	00000bc0 	andeq	r0, r0, r0, asr #23
    8c98:	20150d04 	andscs	r0, r5, r4, lsl #26
    8c9c:	e60c0000 	str	r0, [ip], -r0
    8ca0:	0009540c 	andeq	r5, r9, ip, lsl #8
    8ca4:	b60d0800 	strlt	r0, [sp], -r0, lsl #16
    8ca8:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8cac:	0bcc06ee 	bleq	ff30a86c <_estack+0xdf30586c>
    8cb0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    8cb4:	00002200 	andeq	r2, r0, r0, lsl #4
    8cb8:	1606f20c 	strne	pc, [r6], -ip, lsl #4
    8cbc:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    8cc0:	0026520d 	eoreq	r5, r6, sp, lsl #4
    8cc4:	0df30c00 	ldcleq	12, cr0, [r3]
    8cc8:	0000006c 	andeq	r0, r0, ip, rrx
    8ccc:	23aa0d0e 			; <UNDEFINED> instruction: 0x23aa0d0e
    8cd0:	f40c0000 	vst4.8	{d0-d3}, [ip], r0
    8cd4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8cd8:	bc0d1000 	stclt	0, cr1, [sp], {-0}
    8cdc:	0c000020 	stceq	0, cr0, [r0], {32}
    8ce0:	0c4006fa 	mcrreq	6, 15, r0, r0, cr10
    8ce4:	0d120000 	ldceq	0, cr0, [r2, #-0]
    8ce8:	00002266 	andeq	r2, r0, r6, ror #4
    8cec:	590cfb0c 	stmdbpl	ip, {r2, r3, r8, r9, fp, ip, sp, lr, pc}
    8cf0:	13000000 	movwne	r0, #0
    8cf4:	0025b60d 	eoreq	fp, r5, sp, lsl #12
    8cf8:	0cfc0c00 	ldcleq	12, cr0, [ip]
    8cfc:	00000059 	andeq	r0, r0, r9, asr r0
    8d00:	25bf0d14 	ldrcs	r0, [pc, #3348]!	; 9a1c <__exidx_end+0x3d5c>
    8d04:	fd0c0000 	stc2	0, cr0, [ip, #-0]
    8d08:	0000590c 	andeq	r5, r0, ip, lsl #18
    8d0c:	c80d1500 	stmdagt	sp, {r8, sl, ip}
    8d10:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    8d14:	006c0dfe 	strdeq	r0, [ip], #-222	; 0xffffff22	; <UNPREDICTABLE>
    8d18:	00160000 	andseq	r0, r6, r0
    8d1c:	0026cd02 	eoreq	ip, r6, r2, lsl #26
    8d20:	36440c00 	strbcc	r0, [r4], -r0, lsl #24
    8d24:	00000acd 	andeq	r0, r0, sp, asr #21
    8d28:	0026b41a 	eoreq	fp, r6, sl, lsl r4
    8d2c:	9f0c1400 	svcls	0x000c1400
    8d30:	0b4c1501 	bleq	130e13c <__ccfg+0x12ee194>
    8d34:	13180000 	tstne	r8, #0
    8d38:	0c00001f 	stceq	0, cr0, [r0], {31}
    8d3c:	6c0d01a0 	stfvss	f0, [sp], {160}	; 0xa0
    8d40:	00000000 	andeq	r0, r0, r0
    8d44:	00077818 	andeq	r7, r7, r8, lsl r8
    8d48:	01a10c00 			; <UNDEFINED> instruction: 0x01a10c00
    8d4c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8d50:	86180200 	ldrhi	r0, [r8], -r0, lsl #4
    8d54:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8d58:	c01301a4 	andsgt	r0, r3, r4, lsr #3
    8d5c:	0400000b 	streq	r0, [r0], #-11
    8d60:	00201518 	eoreq	r1, r0, r8, lsl r5
    8d64:	01a50c00 			; <UNDEFINED> instruction: 0x01a50c00
    8d68:	0009540c 	andeq	r5, r9, ip, lsl #8
    8d6c:	b6180800 	ldrlt	r0, [r8], -r0, lsl #16
    8d70:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8d74:	6a0601ad 	bvs	189430 <__ccfg+0x169488>
    8d78:	0c00000c 	stceq	0, cr0, [r0], {12}
    8d7c:	00220018 	eoreq	r0, r2, r8, lsl r0
    8d80:	01b10c00 			; <UNDEFINED> instruction: 0x01b10c00
    8d84:	000cb906 	andeq	fp, ip, r6, lsl #18
    8d88:	66180d00 	ldrvs	r0, [r8], -r0, lsl #26
    8d8c:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8d90:	6c0d01b2 	stfvss	f0, [sp], {178}	; 0xb2
    8d94:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8d98:	00215418 	eoreq	r5, r1, r8, lsl r4
    8d9c:	01b30c00 			; <UNDEFINED> instruction: 0x01b30c00
    8da0:	0009540c 	andeq	r5, r9, ip, lsl #8
    8da4:	0c001000 	stceq	0, cr1, [r0], {-0}
    8da8:	04760c01 	ldrbteq	r0, [r6], #-3073	; 0xfffff3ff
    8dac:	00000b96 	muleq	r0, r6, fp
    8db0:	00276921 	eoreq	r6, r7, r1, lsr #18
    8db4:	0f770c00 	svceq	0x00770c00
    8db8:	00000059 	andeq	r0, r0, r9, asr r0
    8dbc:	00040401 	andeq	r0, r4, r1, lsl #8
    8dc0:	00210721 	eoreq	r0, r1, r1, lsr #14
    8dc4:	0f780c00 	svceq	0x00780c00
    8dc8:	00000059 	andeq	r0, r0, r9, asr r0
    8dcc:	00030101 	andeq	r0, r3, r1, lsl #2
    8dd0:	0021c721 	eoreq	ip, r1, r1, lsr #14
    8dd4:	0f7a0c00 	svceq	0x007a0c00
    8dd8:	00000059 	andeq	r0, r0, r9, asr r0
    8ddc:	00010201 	andeq	r0, r1, r1, lsl #4
    8de0:	001f8221 	andseq	r8, pc, r1, lsr #4
    8de4:	0f7b0c00 	svceq	0x007b0c00
    8de8:	00000059 	andeq	r0, r0, r9, asr r0
    8dec:	00000101 	andeq	r0, r0, r1, lsl #2
    8df0:	0c010c00 	stceq	12, cr0, [r1], {-0}
    8df4:	0bc0047e 	bleq	ff009ff4 <_estack+0xdf004ff4>
    8df8:	e4210000 	strt	r0, [r1], #-0
    8dfc:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    8e00:	00590f7f 	subseq	r0, r9, pc, ror pc
    8e04:	04010000 	streq	r0, [r1], #-0
    8e08:	38210004 	stmdacc	r1!, {r2}
    8e0c:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8e10:	00590f80 	subseq	r0, r9, r0, lsl #31
    8e14:	04010000 	streq	r0, [r1], #-0
    8e18:	11000000 	mrsne	r0, (UNDEF: 0)
    8e1c:	00099604 	andeq	r9, r9, r4, lsl #12
    8e20:	7f041100 	svcvc	0x00041100
    8e24:	0c000000 	stceq	0, cr0, [r0], {-0}
    8e28:	04e70c01 	strbteq	r0, [r7], #3073	; 0xc01
    8e2c:	00000c16 	andeq	r0, r0, r6, lsl ip
    8e30:	00276921 	eoreq	r6, r7, r1, lsr #18
    8e34:	0fe80c00 	svceq	0x00e80c00
    8e38:	00000059 	andeq	r0, r0, r9, asr r0
    8e3c:	00040401 	andeq	r0, r4, r1, lsl #8
    8e40:	00210721 	eoreq	r0, r1, r1, lsr #14
    8e44:	0fe90c00 	svceq	0x00e90c00
    8e48:	00000059 	andeq	r0, r0, r9, asr r0
    8e4c:	00030101 	andeq	r0, r3, r1, lsl #2
    8e50:	0021c721 	eoreq	ip, r1, r1, lsr #14
    8e54:	0feb0c00 	svceq	0x00eb0c00
    8e58:	00000059 	andeq	r0, r0, r9, asr r0
    8e5c:	00010201 	andeq	r0, r1, r1, lsl #4
    8e60:	001f8221 	andseq	r8, pc, r1, lsr #4
    8e64:	0fec0c00 	svceq	0x00ec0c00
    8e68:	00000059 	andeq	r0, r0, r9, asr r0
    8e6c:	00000101 	andeq	r0, r0, r1, lsl #2
    8e70:	0c010c00 	stceq	12, cr0, [r1], {-0}
    8e74:	0c4004ef 	cfstrdeq	mvd0, [r0], {239}	; 0xef
    8e78:	e4210000 	strt	r0, [r1], #-0
    8e7c:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    8e80:	00590ff0 	ldrsheq	r0, [r9], #-240	; 0xffffff10
    8e84:	04010000 	streq	r0, [r1], #-0
    8e88:	38210004 	stmdacc	r1!, {r2}
    8e8c:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8e90:	00590ff1 	ldrsheq	r0, [r9], #-241	; 0xffffff0f
    8e94:	04010000 	streq	r0, [r1], #-0
    8e98:	0c000000 	stceq	0, cr0, [r0], {-0}
    8e9c:	04f50c01 	ldrbteq	r0, [r5], #3073	; 0xc01
    8ea0:	00000c6a 	andeq	r0, r0, sl, ror #24
    8ea4:	0020f121 	eoreq	pc, r0, r1, lsr #2
    8ea8:	0ff60c00 	svceq	0x00f60c00
    8eac:	00000059 	andeq	r0, r0, r9, asr r0
    8eb0:	00070101 	andeq	r0, r7, r1, lsl #2
    8eb4:	00275221 	eoreq	r5, r7, r1, lsr #4
    8eb8:	0ff80c00 	svceq	0x00f80c00
    8ebc:	00000059 	andeq	r0, r0, r9, asr r0
    8ec0:	00010601 	andeq	r0, r1, r1, lsl #12
    8ec4:	0c011b00 			; <UNDEFINED> instruction: 0x0c011b00
    8ec8:	b90401a6 	stmdblt	r4, {r1, r2, r5, r7, r8}
    8ecc:	2200000c 	andcs	r0, r0, #12
    8ed0:	00002769 	andeq	r2, r0, r9, ror #14
    8ed4:	0f01a70c 	svceq	0x0001a70c
    8ed8:	00000059 	andeq	r0, r0, r9, asr r0
    8edc:	00040401 	andeq	r0, r4, r1, lsl #8
    8ee0:	00210722 	eoreq	r0, r1, r2, lsr #14
    8ee4:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    8ee8:	0000590f 	andeq	r5, r0, pc, lsl #18
    8eec:	03010100 	movweq	r0, #4352	; 0x1100
    8ef0:	21c72200 	biccs	r2, r7, r0, lsl #4
    8ef4:	aa0c0000 	bge	308efc <__ccfg+0x2e8f54>
    8ef8:	00590f01 	subseq	r0, r9, r1, lsl #30
    8efc:	02010000 	andeq	r0, r1, #0
    8f00:	82220001 	eorhi	r0, r2, #1
    8f04:	0c00001f 	stceq	0, cr0, [r0], {31}
    8f08:	590f01ab 	stmdbpl	pc, {r0, r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    8f0c:	01000000 	mrseq	r0, (UNDEF: 0)
    8f10:	00000001 	andeq	r0, r0, r1
    8f14:	ae0c011b 	mcrge	1, 0, r0, cr12, cr11, {0}
    8f18:	0ce60401 	cfstrdeq	mvd0, [r6], #4
    8f1c:	e4220000 	strt	r0, [r2], #-0
    8f20:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    8f24:	590f01af 	stmdbpl	pc, {r0, r1, r2, r3, r5, r7, r8}	; <UNPREDICTABLE>
    8f28:	01000000 	mrseq	r0, (UNDEF: 0)
    8f2c:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    8f30:	00002738 	andeq	r2, r0, r8, lsr r7
    8f34:	0f01b00c 	svceq	0x0001b00c
    8f38:	00000059 	andeq	r0, r0, r9, asr r0
    8f3c:	00000401 	andeq	r0, r0, r1, lsl #8
    8f40:	8a041100 	bhi	10d348 <__ccfg+0xed3a0>
    8f44:	02000009 	andeq	r0, r0, #9
    8f48:	00002627 	andeq	r2, r0, r7, lsr #12
    8f4c:	f82f3d0d 			; <UNDEFINED> instruction: 0xf82f3d0d
    8f50:	0f00000c 	svceq	0x0000000c
    8f54:	00002639 	andeq	r2, r0, r9, lsr r6
    8f58:	15780d18 	ldrbne	r0, [r8, #-3352]!	; 0xfffff2e8
    8f5c:	00000d88 	andeq	r0, r0, r8, lsl #27
    8f60:	001f130d 	andseq	r1, pc, sp, lsl #6
    8f64:	0d790d00 	ldcleq	13, cr0, [r9, #-0]
    8f68:	0000006c 	andeq	r0, r0, ip, rrx
    8f6c:	07780d00 	ldrbeq	r0, [r8, -r0, lsl #26]!
    8f70:	7a0d0000 	bvc	348f78 <__ccfg+0x328fd0>
    8f74:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8f78:	860d0200 	strhi	r0, [sp], -r0, lsl #4
    8f7c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8f80:	0bc0137d 	bleq	ff00dd7c <_estack+0xdf008d7c>
    8f84:	0d040000 	stceq	0, cr0, [r4, #-0]
    8f88:	00002015 	andeq	r2, r0, r5, lsl r0
    8f8c:	540c7e0d 	strpl	r7, [ip], #-3597	; 0xfffff1f3
    8f90:	08000009 	stmdaeq	r0, {r0, r3}
    8f94:	0022b60d 	eoreq	fp, r2, sp, lsl #12
    8f98:	06860d00 	streq	r0, [r6], r0, lsl #26
    8f9c:	000010f3 	strdeq	r1, [r0], -r3
    8fa0:	22000d0c 	andcs	r0, r0, #12, 26	; 0x300
    8fa4:	8a0d0000 	bhi	348fac <__ccfg+0x329004>
    8fa8:	00113d06 	andseq	r3, r1, r6, lsl #26
    8fac:	5a0d0d00 	bpl	34c3b4 <__ccfg+0x32c40c>
    8fb0:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    8fb4:	11670693 			; <UNDEFINED> instruction: 0x11670693
    8fb8:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    8fbc:	000025dd 	ldrdeq	r2, [r0], -sp
    8fc0:	590c940d 	stmdbpl	ip, {r0, r2, r3, sl, ip, pc}
    8fc4:	0f000000 	svceq	0x00000000
    8fc8:	00233c0d 	eoreq	r3, r3, sp, lsl #24
    8fcc:	0d950d00 	ldceq	13, cr0, [r5]
    8fd0:	0000007f 	andeq	r0, r0, pc, ror r0
    8fd4:	1f400d10 	svcne	0x00400d10
    8fd8:	960d0000 	strls	r0, [sp], -r0
    8fdc:	0009840d 	andeq	r8, r9, sp, lsl #8
    8fe0:	02001400 	andeq	r1, r0, #0, 8
    8fe4:	00002493 	muleq	r0, r3, r4
    8fe8:	942f3e0d 	strtls	r3, [pc], #-3597	; 8ff0 <__exidx_end+0x3330>
    8fec:	0f00000d 	svceq	0x0000000d
    8ff0:	0000218b 	andeq	r2, r0, fp, lsl #3
    8ff4:	159f0d24 	ldrne	r0, [pc, #3364]	; 9d20 <__exidx_end+0x4060>
    8ff8:	00000e72 	andeq	r0, r0, r2, ror lr
    8ffc:	001f130d 	andseq	r1, pc, sp, lsl #6
    9000:	0da00d00 	stceq	13, cr0, [r0]
    9004:	0000006c 	andeq	r0, r0, ip, rrx
    9008:	07780d00 	ldrbeq	r0, [r8, -r0, lsl #26]!
    900c:	a10d0000 	mrsge	r0, (UNDEF: 13)
    9010:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9014:	860d0200 	strhi	r0, [sp], -r0, lsl #4
    9018:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    901c:	0bc013a4 	bleq	ff00deb4 <_estack+0xdf008eb4>
    9020:	0d040000 	stceq	0, cr0, [r4, #-0]
    9024:	00002015 	andeq	r2, r0, r5, lsl r0
    9028:	540ca50d 	strpl	sl, [ip], #-1293	; 0xfffffaf3
    902c:	08000009 	stmdaeq	r0, {r0, r3}
    9030:	0022b60d 	eoreq	fp, r2, sp, lsl #12
    9034:	06ad0d00 	strteq	r0, [sp], r0, lsl #26
    9038:	000011a1 	andeq	r1, r0, r1, lsr #3
    903c:	22000d0c 	andcs	r0, r0, #12, 26	; 0x300
    9040:	b10d0000 	mrslt	r0, (UNDEF: 13)
    9044:	0011eb06 	andseq	lr, r1, r6, lsl #22
    9048:	5a0d0d00 	bpl	34c450 <__ccfg+0x32c4a8>
    904c:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9050:	121506c3 	andsne	r0, r5, #204472320	; 0xc300000
    9054:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    9058:	000023f1 	strdeq	r2, [r0], -r1
    905c:	9f06cd0d 	svcls	0x0006cd0d
    9060:	0f000012 	svceq	0x00000012
    9064:	00233c0d 	eoreq	r3, r3, sp, lsl #24
    9068:	0dce0d00 	stcleq	13, cr0, [lr]
    906c:	0000007f 	andeq	r0, r0, pc, ror r0
    9070:	213f0d10 	teqcs	pc, r0, lsl sp	; <UNPREDICTABLE>
    9074:	cf0d0000 	svcgt	0x000d0000
    9078:	0000590c 	andeq	r5, r0, ip, lsl #18
    907c:	430d1400 	movwmi	r1, #54272	; 0xd400
    9080:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9084:	00590cd1 	ldrsbeq	r0, [r9], #-193	; 0xffffff3f
    9088:	0d150000 	ldceq	0, cr0, [r5, #-0]
    908c:	0000244c 	andeq	r2, r0, ip, asr #8
    9090:	590cd20d 	stmdbpl	ip, {r0, r2, r3, r9, ip, lr, pc}
    9094:	16000000 	strne	r0, [r0], -r0
    9098:	00219d0d 	eoreq	r9, r1, sp, lsl #26
    909c:	06db0d00 	ldrbeq	r0, [fp], r0, lsl #26
    90a0:	00001319 	andeq	r1, r0, r9, lsl r3
    90a4:	268c0d17 	pkhbtcs	r0, ip, r7, lsl #26
    90a8:	dc0d0000 	stcle	0, cr0, [sp], {-0}
    90ac:	0009540c 	andeq	r5, r9, ip, lsl #8
    90b0:	d10d1800 	tstle	sp, r0, lsl #16
    90b4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    90b8:	0ce611dd 	stfeqe	f1, [r6], #884	; 0x374
    90bc:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    90c0:	00001fa5 	andeq	r1, r0, r5, lsr #31
    90c4:	840dde0d 	strhi	sp, [sp], #-3597	; 0xfffff1f3
    90c8:	20000009 	andcs	r0, r0, r9
    90cc:	21a80200 			; <UNDEFINED> instruction: 0x21a80200
    90d0:	410d0000 	mrsmi	r0, (UNDEF: 13)
    90d4:	000e7e2f 	andeq	r7, lr, pc, lsr #28
    90d8:	1f701a00 	svcne	0x00701a00
    90dc:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    90e0:	6d15017d 	ldfvss	f0, [r5, #-500]	; 0xfffffe0c
    90e4:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    90e8:	00001f13 	andeq	r1, r0, r3, lsl pc
    90ec:	0d017e0d 	stceq	14, cr7, [r1, #-52]	; 0xffffffcc
    90f0:	0000006c 	andeq	r0, r0, ip, rrx
    90f4:	07781800 	ldrbeq	r1, [r8, -r0, lsl #16]!
    90f8:	7f0d0000 	svcvc	0x000d0000
    90fc:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    9100:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    9104:	00002286 	andeq	r2, r0, r6, lsl #5
    9108:	1301820d 	movwne	r8, #4621	; 0x120d
    910c:	00000bc0 	andeq	r0, r0, r0, asr #23
    9110:	20151804 	andscs	r1, r5, r4, lsl #16
    9114:	830d0000 	movwhi	r0, #53248	; 0xd000
    9118:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    911c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    9120:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
    9124:	06018b0d 	streq	r8, [r1], -sp, lsl #22
    9128:	00001363 	andeq	r1, r0, r3, ror #6
    912c:	2200180c 	andcs	r1, r0, #12, 16	; 0xc0000
    9130:	8f0d0000 	svchi	0x000d0000
    9134:	13b20601 			; <UNDEFINED> instruction: 0x13b20601
    9138:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    913c:	00002666 	andeq	r2, r0, r6, ror #12
    9140:	0601950d 	streq	r9, [r1], -sp, lsl #10
    9144:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    9148:	2266180e 	rsbcs	r1, r6, #917504	; 0xe0000
    914c:	960d0000 	strls	r0, [sp], -r0
    9150:	00590c01 	subseq	r0, r9, r1, lsl #24
    9154:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    9158:	00002725 	andeq	r2, r0, r5, lsr #14
    915c:	0601a30d 	streq	sl, [r1], -sp, lsl #6
    9160:	0000140c 	andeq	r1, r0, ip, lsl #8
    9164:	21e71810 	mvncs	r1, r0, lsl r8
    9168:	a40d0000 	strge	r0, [sp], #-0
    916c:	00250b01 	eoreq	r0, r5, r1, lsl #22
    9170:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
    9174:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
    9178:	0c01a50d 	cfstr32eq	mvfx10, [r1], {13}
    917c:	00000059 	andeq	r0, r0, r9, asr r0
    9180:	26ed1812 	usatcs	r1, #13, r2, lsl #16
    9184:	a70d0000 	strge	r0, [sp, -r0]
    9188:	00590c01 	subseq	r0, r9, r1, lsl #24
    918c:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    9190:	0000236f 	andeq	r2, r0, pc, ror #6
    9194:	0d01a90d 	vstreq.16	s20, [r1, #-26]	; 0xffffffe6	; <UNPREDICTABLE>
    9198:	0000006c 	andeq	r0, r0, ip, rrx
    919c:	21491814 	cmpcs	r9, r4, lsl r8
    91a0:	af0d0000 	svcge	0x000d0000
    91a4:	147d0601 	ldrbtne	r0, [sp], #-1537	; 0xfffff9ff
    91a8:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    91ac:	0000224c 	andeq	r2, r0, ip, asr #4
    91b0:	0601b70d 	streq	fp, [r1], -sp, lsl #14
    91b4:	000014aa 	andeq	r1, r0, sl, lsr #9
    91b8:	235b1817 	cmpcs	fp, #1507328	; 0x170000
    91bc:	b80d0000 	stmdalt	sp, {}	; <UNPREDICTABLE>
    91c0:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    91c4:	00180000 	andseq	r0, r8, r0
    91c8:	00247402 	eoreq	r7, r4, r2, lsl #8
    91cc:	3c430d00 	mcrrcc	13, 0, r0, r3, cr0
    91d0:	00000f79 	andeq	r0, r0, r9, ror pc
    91d4:	0024551a 	eoreq	r5, r4, sl, lsl r5
    91d8:	1a0d2800 	bne	3531e0 <__ccfg+0x333238>
    91dc:	10761502 	rsbsne	r1, r6, r2, lsl #10
    91e0:	13180000 	tstne	r8, #0
    91e4:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    91e8:	6c0d021b 	sfmvs	f0, 4, [sp], {27}
    91ec:	00000000 	andeq	r0, r0, r0
    91f0:	00077818 	andeq	r7, r7, r8, lsl r8
    91f4:	021d0d00 	andseq	r0, sp, #0, 26
    91f8:	00006c0d 	andeq	r6, r0, sp, lsl #24
    91fc:	86180200 	ldrhi	r0, [r8], -r0, lsl #4
    9200:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9204:	c0130220 	andsgt	r0, r3, r0, lsr #4
    9208:	0400000b 	streq	r0, [r0], #-11
    920c:	00201518 	eoreq	r1, r0, r8, lsl r5
    9210:	02210d00 	eoreq	r0, r1, #0, 26
    9214:	0009540c 	andeq	r5, r9, ip, lsl #8
    9218:	b6180800 	ldrlt	r0, [r8], -r0, lsl #16
    921c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9220:	f9060229 			; <UNDEFINED> instruction: 0xf9060229
    9224:	0c000014 	stceq	0, cr0, [r0], {20}
    9228:	00220018 	eoreq	r0, r2, r8, lsl r0
    922c:	022d0d00 	eoreq	r0, sp, #0, 26
    9230:	00154806 	andseq	r4, r5, r6, lsl #16
    9234:	08180d00 	ldmdaeq	r8, {r8, sl, fp}
    9238:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    923c:	75060233 	strvc	r0, [r6, #-563]	; 0xfffffdcd
    9240:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    9244:	00226f18 	eoreq	r6, r2, r8, lsl pc
    9248:	02380d00 	eorseq	r0, r8, #0, 26
    924c:	0015a206 	andseq	sl, r5, r6, lsl #4
    9250:	9e181000 	cdpls	0, 1, cr1, cr8, cr0, {0}
    9254:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9258:	590c0239 	stmdbpl	ip, {r0, r3, r4, r5, r9}
    925c:	14000000 	strne	r0, [r0], #-0
    9260:	00233218 	eoreq	r3, r3, r8, lsl r2
    9264:	02410d00 	subeq	r0, r1, #0, 26
    9268:	0015cf06 	andseq	ip, r5, r6, lsl #30
    926c:	0a181500 	beq	60e674 <__ccfg+0x5ee6cc>
    9270:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9274:	fc060255 	stc2	2, cr0, [r6], {85}	; 0x55
    9278:	16000015 			; <UNDEFINED> instruction: 0x16000015
    927c:	00147d18 	andseq	r7, r4, r8, lsl sp
    9280:	02680d00 	rsbeq	r0, r8, #0, 26
    9284:	00165c06 	andseq	r5, r6, r6, lsl #24
    9288:	96181800 	ldrls	r1, [r8], -r0, lsl #16
    928c:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9290:	6c0d0269 	sfmvs	f0, 4, [sp], {105}	; 0x69
    9294:	1a000000 	bne	929c <__exidx_end+0x35dc>
    9298:	0024d418 	eoreq	sp, r4, r8, lsl r4
    929c:	026a0d00 	rsbeq	r0, sl, #0, 26
    92a0:	000bc60e 	andeq	ip, fp, lr, lsl #12
    92a4:	45181c00 	ldrmi	r1, [r8, #-3072]	; 0xfffff400
    92a8:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    92ac:	6c0d026c 	sfmvs	f0, 4, [sp], {108}	; 0x6c
    92b0:	20000000 	andcs	r0, r0, r0
    92b4:	00228e18 	eoreq	r8, r2, r8, lsl lr
    92b8:	02700d00 	rsbseq	r0, r0, #0, 26
    92bc:	0000380c 	andeq	r3, r0, ip, lsl #16
    92c0:	cc182200 	lfmgt	f2, 4, [r8], {-0}
    92c4:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    92c8:	590c0273 	stmdbpl	ip, {r0, r1, r4, r5, r6, r9}
    92cc:	24000000 	strcs	r0, [r0], #-0
    92d0:	25080200 	strcs	r0, [r8, #-512]	; 0xfffffe00
    92d4:	480d0000 	stmdami	sp, {}	; <UNPREDICTABLE>
    92d8:	00108230 	andseq	r8, r0, r0, lsr r2
    92dc:	24f51a00 	ldrbtcs	r1, [r5], #2560	; 0xa00
    92e0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    92e4:	f3150375 	vcge.u16	q0, <illegal reg q2.5>, <illegal reg q10.5>
    92e8:	18000010 	stmdane	r0, {r4}
    92ec:	000025ab 	andeq	r2, r0, fp, lsr #11
    92f0:	0d03760d 	stceq	6, cr7, [r3, #-52]	; 0xffffffcc
    92f4:	0000006c 	andeq	r0, r0, ip, rrx
    92f8:	1fca1800 	svcne	0x00ca1800
    92fc:	770d0000 	strvc	r0, [sp, -r0]
    9300:	006c0d03 	rsbeq	r0, ip, r3, lsl #26
    9304:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    9308:	00001fb7 			; <UNDEFINED> instruction: 0x00001fb7
    930c:	0c03780d 	stceq	8, cr7, [r3], {13}
    9310:	00000059 	andeq	r0, r0, r9, asr r0
    9314:	24ad1804 	strtcs	r1, [sp], #2052	; 0x804
    9318:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    931c:	00590c03 	subseq	r0, r9, r3, lsl #24
    9320:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
    9324:	00002232 	andeq	r2, r0, r2, lsr r2
    9328:	0c037a0d 			; <UNDEFINED> instruction: 0x0c037a0d
    932c:	00000059 	andeq	r0, r0, r9, asr r0
    9330:	22161806 	andscs	r1, r6, #393216	; 0x60000
    9334:	7b0d0000 	blvc	34933c <__ccfg+0x329394>
    9338:	00250b03 	eoreq	r0, r5, r3, lsl #22
    933c:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    9340:	00001fef 	andeq	r1, r0, pc, ror #31
    9344:	0c037c0d 	stceq	12, cr7, [r3], {13}
    9348:	00000954 	andeq	r0, r0, r4, asr r9
    934c:	010c0008 	tsteq	ip, r8
    9350:	3d047f0d 	stccc	15, cr7, [r4, #-52]	; 0xffffffcc
    9354:	21000011 	tstcs	r0, r1, lsl r0
    9358:	00002769 	andeq	r2, r0, r9, ror #14
    935c:	590f800d 	stmdbpl	pc, {r0, r2, r3, pc}	; <UNPREDICTABLE>
    9360:	01000000 	mrseq	r0, (UNDEF: 0)
    9364:	21000404 	tstcs	r0, r4, lsl #8
    9368:	00002107 	andeq	r2, r0, r7, lsl #2
    936c:	590f810d 	stmdbpl	pc, {r0, r2, r3, r8, pc}	; <UNPREDICTABLE>
    9370:	01000000 	mrseq	r0, (UNDEF: 0)
    9374:	21000301 	tstcs	r0, r1, lsl #6
    9378:	000021c7 	andeq	r2, r0, r7, asr #3
    937c:	590f830d 	stmdbpl	pc, {r0, r2, r3, r8, r9, pc}	; <UNPREDICTABLE>
    9380:	01000000 	mrseq	r0, (UNDEF: 0)
    9384:	21000102 	tstcs	r0, r2, lsl #2
    9388:	00001f82 	andeq	r1, r0, r2, lsl #31
    938c:	590f840d 	stmdbpl	pc, {r0, r2, r3, sl, pc}	; <UNPREDICTABLE>
    9390:	01000000 	mrseq	r0, (UNDEF: 0)
    9394:	00000001 	andeq	r0, r0, r1
    9398:	870d010c 	strhi	r0, [sp, -ip, lsl #2]
    939c:	00116704 	andseq	r6, r1, r4, lsl #14
    93a0:	25e42100 	strbcs	r2, [r4, #256]!	; 0x100
    93a4:	880d0000 	stmdahi	sp, {}	; <UNPREDICTABLE>
    93a8:	0000590f 	andeq	r5, r0, pc, lsl #18
    93ac:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    93b0:	27382100 	ldrcs	r2, [r8, -r0, lsl #2]!
    93b4:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    93b8:	0000590f 	andeq	r5, r0, pc, lsl #18
    93bc:	00040100 	andeq	r0, r4, r0, lsl #2
    93c0:	010c0000 	mrseq	r0, (UNDEF: 12)
    93c4:	a1048b0d 	tstge	r4, sp, lsl #22
    93c8:	21000011 	tstcs	r0, r1, lsl r0
    93cc:	00002677 	andeq	r2, r0, r7, ror r6
    93d0:	590f8c0d 	stmdbpl	pc, {r0, r2, r3, sl, fp, pc}	; <UNPREDICTABLE>
    93d4:	01000000 	mrseq	r0, (UNDEF: 0)
    93d8:	21000701 	tstcs	r0, r1, lsl #14
    93dc:	000026ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    93e0:	590f8f0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, fp, pc}	; <UNPREDICTABLE>
    93e4:	01000000 	mrseq	r0, (UNDEF: 0)
    93e8:	21000401 	tstcs	r0, r1, lsl #8
    93ec:	00001f38 	andeq	r1, r0, r8, lsr pc
    93f0:	590f910d 	stmdbpl	pc, {r0, r2, r3, r8, ip, pc}	; <UNPREDICTABLE>
    93f4:	01000000 	mrseq	r0, (UNDEF: 0)
    93f8:	00000301 	andeq	r0, r0, r1, lsl #6
    93fc:	a60d010c 	strge	r0, [sp], -ip, lsl #2
    9400:	0011eb04 	andseq	lr, r1, r4, lsl #22
    9404:	27692100 	strbcs	r2, [r9, -r0, lsl #2]!
    9408:	a70d0000 	strge	r0, [sp, -r0]
    940c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9410:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    9414:	21072100 	mrscs	r2, (UNDEF: 23)
    9418:	a80d0000 	stmdage	sp, {}	; <UNPREDICTABLE>
    941c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9420:	03010100 	movweq	r0, #4352	; 0x1100
    9424:	21c72100 	biccs	r2, r7, r0, lsl #2
    9428:	aa0d0000 	bge	349430 <__ccfg+0x329488>
    942c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9430:	01020100 	mrseq	r0, (UNDEF: 18)
    9434:	1f822100 	svcne	0x00822100
    9438:	ab0d0000 	blge	349440 <__ccfg+0x329498>
    943c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9440:	00010100 	andeq	r0, r1, r0, lsl #2
    9444:	010c0000 	mrseq	r0, (UNDEF: 12)
    9448:	1504ae0d 	strne	sl, [r4, #-3597]	; 0xfffff1f3
    944c:	21000012 	tstcs	r0, r2, lsl r0
    9450:	000025e4 	andeq	r2, r0, r4, ror #11
    9454:	590faf0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, fp, sp, pc}	; <UNPREDICTABLE>
    9458:	01000000 	mrseq	r0, (UNDEF: 0)
    945c:	21000404 	tstcs	r0, r4, lsl #8
    9460:	00002738 	andeq	r2, r0, r8, lsr r7
    9464:	590fb00d 	stmdbpl	pc, {r0, r2, r3, ip, sp, pc}	; <UNPREDICTABLE>
    9468:	01000000 	mrseq	r0, (UNDEF: 0)
    946c:	00000004 	andeq	r0, r0, r4
    9470:	b20d010c 	andlt	r0, sp, #12, 2
    9474:	00129f04 	andseq	r9, r2, r4, lsl #30
    9478:	26772100 	ldrbtcs	r2, [r7], -r0, lsl #2
    947c:	b30d0000 	movwlt	r0, #53248	; 0xd000
    9480:	0000590f 	andeq	r5, r0, pc, lsl #18
    9484:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9488:	1fad2100 	svcne	0x00ad2100
    948c:	b50d0000 	strlt	r0, [sp, #-0]
    9490:	0000590f 	andeq	r5, r0, pc, lsl #18
    9494:	06010100 	streq	r0, [r1], -r0, lsl #2
    9498:	25552100 	ldrbcs	r2, [r5, #-256]	; 0xffffff00
    949c:	b70d0000 	strlt	r0, [sp, -r0]
    94a0:	0000590f 	andeq	r5, r0, pc, lsl #18
    94a4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    94a8:	26ff2100 	ldrbtcs	r2, [pc], r0, lsl #2
    94ac:	b90d0000 	stmdblt	sp, {}	; <UNPREDICTABLE>
    94b0:	0000590f 	andeq	r5, r0, pc, lsl #18
    94b4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    94b8:	1f382100 	svcne	0x00382100
    94bc:	bb0d0000 	bllt	3494c4 <__ccfg+0x32951c>
    94c0:	0000590f 	andeq	r5, r0, pc, lsl #18
    94c4:	03010100 	movweq	r0, #4352	; 0x1100
    94c8:	26942100 	ldrcs	r2, [r4], r0, lsl #2
    94cc:	bd0d0000 	stclt	0, cr0, [sp, #-0]
    94d0:	0000590f 	andeq	r5, r0, pc, lsl #18
    94d4:	02010100 	andeq	r0, r1, #0, 2
    94d8:	21d82100 	bicscs	r2, r8, r0, lsl #2
    94dc:	bf0d0000 	svclt	0x000d0000
    94e0:	0000590f 	andeq	r5, r0, pc, lsl #18
    94e4:	01010100 	mrseq	r0, (UNDEF: 17)
    94e8:	25602100 	strbcs	r2, [r0, #-256]!	; 0xffffff00
    94ec:	c10d0000 	mrsgt	r0, (UNDEF: 13)
    94f0:	0000590f 	andeq	r5, r0, pc, lsl #18
    94f4:	00010100 	andeq	r0, r1, r0, lsl #2
    94f8:	010c0000 	mrseq	r0, (UNDEF: 12)
    94fc:	1904c40d 	stmdbne	r4, {r0, r2, r3, sl, lr, pc}
    9500:	21000013 	tstcs	r0, r3, lsl r0
    9504:	00002296 	muleq	r0, r6, r2
    9508:	590fc50d 	stmdbpl	pc, {r0, r2, r3, r8, sl, lr, pc}	; <UNPREDICTABLE>
    950c:	01000000 	mrseq	r0, (UNDEF: 0)
    9510:	21000701 	tstcs	r0, r1, lsl #14
    9514:	000020cf 	andeq	r2, r0, pc, asr #1
    9518:	590fc60d 	stmdbpl	pc, {r0, r2, r3, r9, sl, lr, pc}	; <UNPREDICTABLE>
    951c:	01000000 	mrseq	r0, (UNDEF: 0)
    9520:	21000601 	tstcs	r0, r1, lsl #12
    9524:	0000220a 	andeq	r2, r0, sl, lsl #4
    9528:	590fc80d 	stmdbpl	pc, {r0, r2, r3, fp, lr, pc}	; <UNPREDICTABLE>
    952c:	01000000 	mrseq	r0, (UNDEF: 0)
    9530:	21000401 	tstcs	r0, r1, lsl #8
    9534:	00002173 	andeq	r2, r0, r3, ror r1
    9538:	590fc90d 	stmdbpl	pc, {r0, r2, r3, r8, fp, lr, pc}	; <UNPREDICTABLE>
    953c:	01000000 	mrseq	r0, (UNDEF: 0)
    9540:	21000301 	tstcs	r0, r1, lsl #6
    9544:	000024e9 	andeq	r2, r0, r9, ror #9
    9548:	590fca0d 	stmdbpl	pc, {r0, r2, r3, r9, fp, lr, pc}	; <UNPREDICTABLE>
    954c:	01000000 	mrseq	r0, (UNDEF: 0)
    9550:	21000201 	tstcs	r0, r1, lsl #4
    9554:	0000201f 	andeq	r2, r0, pc, lsl r0
    9558:	590fcb0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, fp, lr, pc}	; <UNPREDICTABLE>
    955c:	01000000 	mrseq	r0, (UNDEF: 0)
    9560:	21000101 	tstcs	r0, r1, lsl #2
    9564:	00001f1d 	andeq	r1, r0, sp, lsl pc
    9568:	590fcc0d 	stmdbpl	pc, {r0, r2, r3, sl, fp, lr, pc}	; <UNPREDICTABLE>
    956c:	01000000 	mrseq	r0, (UNDEF: 0)
    9570:	00000001 	andeq	r0, r0, r1
    9574:	d40d010c 	strle	r0, [sp], #-268	; 0xfffffef4
    9578:	00136304 	andseq	r6, r3, r4, lsl #6
    957c:	27692100 	strbcs	r2, [r9, -r0, lsl #2]!
    9580:	d50d0000 	strle	r0, [sp, #-0]
    9584:	0000590f 	andeq	r5, r0, pc, lsl #18
    9588:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    958c:	21072100 	mrscs	r2, (UNDEF: 23)
    9590:	d60d0000 	strle	r0, [sp], -r0
    9594:	0000590f 	andeq	r5, r0, pc, lsl #18
    9598:	03010100 	movweq	r0, #4352	; 0x1100
    959c:	21c72100 	biccs	r2, r7, r0, lsl #2
    95a0:	d80d0000 	stmdale	sp, {}	; <UNPREDICTABLE>
    95a4:	0000590f 	andeq	r5, r0, pc, lsl #18
    95a8:	01020100 	mrseq	r0, (UNDEF: 18)
    95ac:	1f822100 	svcne	0x00822100
    95b0:	d90d0000 	stmdble	sp, {}	; <UNPREDICTABLE>
    95b4:	0000590f 	andeq	r5, r0, pc, lsl #18
    95b8:	00010100 	andeq	r0, r1, r0, lsl #2
    95bc:	011b0000 	tsteq	fp, r0
    95c0:	0401840d 	streq	r8, [r1], #-1037	; 0xfffffbf3
    95c4:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
    95c8:	00276922 	eoreq	r6, r7, r2, lsr #18
    95cc:	01850d00 	orreq	r0, r5, r0, lsl #26
    95d0:	0000590f 	andeq	r5, r0, pc, lsl #18
    95d4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    95d8:	21072200 	mrscs	r2, (UNDEF: 39)
    95dc:	860d0000 	strhi	r0, [sp], -r0
    95e0:	00590f01 	subseq	r0, r9, r1, lsl #30
    95e4:	01010000 	mrseq	r0, (UNDEF: 1)
    95e8:	c7220003 	strgt	r0, [r2, -r3]!
    95ec:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    95f0:	590f0188 	stmdbpl	pc, {r3, r7, r8}	; <UNPREDICTABLE>
    95f4:	01000000 	mrseq	r0, (UNDEF: 0)
    95f8:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    95fc:	00001f82 	andeq	r1, r0, r2, lsl #31
    9600:	0f01890d 	svceq	0x0001890d
    9604:	00000059 	andeq	r0, r0, r9, asr r0
    9608:	00000101 	andeq	r0, r0, r1, lsl #2
    960c:	0d011b00 	vstreq	d1, [r1, #-0]
    9610:	df04018c 	svcle	0x0004018c
    9614:	22000013 	andcs	r0, r0, #19
    9618:	000025e4 	andeq	r2, r0, r4, ror #11
    961c:	0f018d0d 	svceq	0x00018d0d
    9620:	00000059 	andeq	r0, r0, r9, asr r0
    9624:	00040401 	andeq	r0, r4, r1, lsl #8
    9628:	00273822 	eoreq	r3, r7, r2, lsr #16
    962c:	018e0d00 	orreq	r0, lr, r0, lsl #26
    9630:	0000590f 	andeq	r5, r0, pc, lsl #18
    9634:	00040100 	andeq	r0, r4, r0, lsl #2
    9638:	011b0000 	tsteq	fp, r0
    963c:	0401900d 	streq	r9, [r1], #-13
    9640:	0000140c 	andeq	r1, r0, ip, lsl #8
    9644:	00231e22 	eoreq	r1, r3, r2, lsr #28
    9648:	01910d00 	orrseq	r0, r1, r0, lsl #26
    964c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9650:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9654:	240c2200 	strcs	r2, [ip], #-512	; 0xfffffe00
    9658:	930d0000 	movwls	r0, #53248	; 0xd000
    965c:	00590f01 	subseq	r0, r9, r1, lsl #30
    9660:	01010000 	mrseq	r0, (UNDEF: 1)
    9664:	1b000006 	blne	9684 <__exidx_end+0x39c4>
    9668:	01970d01 	orrseq	r0, r7, r1, lsl #26
    966c:	00147d04 	andseq	r7, r4, r4, lsl #26
    9670:	20c62200 	sbccs	r2, r6, r0, lsl #4
    9674:	980d0000 	stmdals	sp, {}	; <UNPREDICTABLE>
    9678:	00590f01 	subseq	r0, r9, r1, lsl #30
    967c:	01010000 	mrseq	r0, (UNDEF: 1)
    9680:	15220007 	strne	r0, [r2, #-7]!
    9684:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    9688:	590f0199 	stmdbpl	pc, {r0, r3, r4, r7, r8}	; <UNPREDICTABLE>
    968c:	01000000 	mrseq	r0, (UNDEF: 0)
    9690:	22000601 	andcs	r0, r0, #1048576	; 0x100000
    9694:	0000117d 	andeq	r1, r0, sp, ror r1
    9698:	0f019a0d 	svceq	0x00019a0d
    969c:	00000059 	andeq	r0, r0, r9, asr r0
    96a0:	00050101 	andeq	r0, r5, r1, lsl #2
    96a4:	0023c522 	eoreq	ip, r3, r2, lsr #10
    96a8:	019c0d00 	orrseq	r0, ip, r0, lsl #26
    96ac:	0000590f 	andeq	r5, r0, pc, lsl #18
    96b0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    96b4:	264b2200 	strbcs	r2, [fp], -r0, lsl #4
    96b8:	9f0d0000 	svcls	0x000d0000
    96bc:	00590f01 	subseq	r0, r9, r1, lsl #30
    96c0:	01010000 	mrseq	r0, (UNDEF: 1)
    96c4:	9f220003 	svcls	0x00220003
    96c8:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    96cc:	590f01a1 	stmdbpl	pc, {r0, r5, r7, r8}	; <UNPREDICTABLE>
    96d0:	01000000 	mrseq	r0, (UNDEF: 0)
    96d4:	00000201 	andeq	r0, r0, r1, lsl #4
    96d8:	aa0d011b 	bge	349b4c <__ccfg+0x329ba4>
    96dc:	14aa0401 	strtne	r0, [sl], #1025	; 0x401
    96e0:	0f220000 	svceq	0x00220000
    96e4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    96e8:	590f01ab 	stmdbpl	pc, {r0, r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    96ec:	01000000 	mrseq	r0, (UNDEF: 0)
    96f0:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    96f4:	000021ef 	andeq	r2, r0, pc, ror #3
    96f8:	0f01ad0d 	svceq	0x0001ad0d
    96fc:	00000059 	andeq	r0, r0, r9, asr r0
    9700:	00000401 	andeq	r0, r0, r1, lsl #8
    9704:	0d011b00 	vstreq	d1, [r1, #-0]
    9708:	f90401b0 			; <UNDEFINED> instruction: 0xf90401b0
    970c:	22000014 	andcs	r0, r0, #20
    9710:	00002769 	andeq	r2, r0, r9, ror #14
    9714:	0f01b10d 	svceq	0x0001b10d
    9718:	00000059 	andeq	r0, r0, r9, asr r0
    971c:	00040401 	andeq	r0, r4, r1, lsl #8
    9720:	00210722 	eoreq	r0, r1, r2, lsr #14
    9724:	01b20d00 			; <UNDEFINED> instruction: 0x01b20d00
    9728:	0000590f 	andeq	r5, r0, pc, lsl #18
    972c:	03010100 	movweq	r0, #4352	; 0x1100
    9730:	21c72200 	biccs	r2, r7, r0, lsl #4
    9734:	b40d0000 	strlt	r0, [sp], #-0
    9738:	00590f01 	subseq	r0, r9, r1, lsl #30
    973c:	02010000 	andeq	r0, r1, #0
    9740:	82220001 	eorhi	r0, r2, #1
    9744:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9748:	590f01b5 	stmdbpl	pc, {r0, r2, r4, r5, r7, r8}	; <UNPREDICTABLE>
    974c:	01000000 	mrseq	r0, (UNDEF: 0)
    9750:	00000001 	andeq	r0, r0, r1
    9754:	220d011b 	andcs	r0, sp, #-1073741818	; 0xc0000006
    9758:	15480402 	strbne	r0, [r8, #-1026]	; 0xfffffbfe
    975c:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    9760:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9764:	590f0223 	stmdbpl	pc, {r0, r1, r5, r9}	; <UNPREDICTABLE>
    9768:	01000000 	mrseq	r0, (UNDEF: 0)
    976c:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    9770:	00002107 	andeq	r2, r0, r7, lsl #2
    9774:	0f02240d 	svceq	0x0002240d
    9778:	00000059 	andeq	r0, r0, r9, asr r0
    977c:	00030101 	andeq	r0, r3, r1, lsl #2
    9780:	0021c722 	eoreq	ip, r1, r2, lsr #14
    9784:	02260d00 	eoreq	r0, r6, #0, 26
    9788:	0000590f 	andeq	r5, r0, pc, lsl #18
    978c:	01020100 	mrseq	r0, (UNDEF: 18)
    9790:	1f822200 	svcne	0x00822200
    9794:	270d0000 	strcs	r0, [sp, -r0]
    9798:	00590f02 	subseq	r0, r9, r2, lsl #30
    979c:	01010000 	mrseq	r0, (UNDEF: 1)
    97a0:	1b000000 	blne	97a8 <__exidx_end+0x3ae8>
    97a4:	022a0d01 	eoreq	r0, sl, #1, 26	; 0x40
    97a8:	00157504 	andseq	r7, r5, r4, lsl #10
    97ac:	25e42200 	strbcs	r2, [r4, #512]!	; 0x200
    97b0:	2b0d0000 	blcs	3497b8 <__ccfg+0x329810>
    97b4:	00590f02 	subseq	r0, r9, r2, lsl #30
    97b8:	04010000 	streq	r0, [r1], #-0
    97bc:	38220004 	stmdacc	r2!, {r2}
    97c0:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    97c4:	590f022c 	stmdbpl	pc, {r2, r3, r5, r9}	; <UNPREDICTABLE>
    97c8:	01000000 	mrseq	r0, (UNDEF: 0)
    97cc:	00000004 	andeq	r0, r0, r4
    97d0:	2e0d021b 	mcrcs	2, 0, r0, cr13, cr11, {0}
    97d4:	15a20402 	strne	r0, [r2, #1026]!	; 0x402
    97d8:	1f220000 	svcne	0x00220000
    97dc:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    97e0:	6c10022f 	lfmvs	f0, 4, [r0], {47}	; 0x2f
    97e4:	02000000 	andeq	r0, r0, #0
    97e8:	22000d03 	andcs	r0, r0, #3, 26	; 0xc0
    97ec:	0000271b 	andeq	r2, r0, fp, lsl r7
    97f0:	1002320d 	andne	r3, r2, sp, lsl #4
    97f4:	0000006c 	andeq	r0, r0, ip, rrx
    97f8:	00000d02 	andeq	r0, r0, r2, lsl #26
    97fc:	0d041b00 	vstreq	d1, [r4, #-0]
    9800:	cf040234 	svcgt	0x00040234
    9804:	22000015 	andcs	r0, r0, #21
    9808:	000023b4 			; <UNDEFINED> instruction: 0x000023b4
    980c:	1002350d 	andne	r3, r2, sp, lsl #10
    9810:	0000007f 	andeq	r0, r0, pc, ror r0
    9814:	001c0404 	andseq	r0, ip, r4, lsl #8
    9818:	0024c422 	eoreq	ip, r4, r2, lsr #8
    981c:	02370d00 	eorseq	r0, r7, #0, 26
    9820:	00007f10 	andeq	r7, r0, r0, lsl pc
    9824:	03150400 	tsteq	r5, #0, 8
    9828:	011b0000 	tsteq	fp, r0
    982c:	04023a0d 	streq	r3, [r2], #-2573	; 0xfffff5f3
    9830:	000015fc 	strdeq	r1, [r0], -ip
    9834:	00261022 	eoreq	r1, r6, r2, lsr #32
    9838:	023b0d00 	eorseq	r0, fp, #0, 26
    983c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9840:	02060100 	andeq	r0, r6, #0, 2
    9844:	1fda2200 	svcne	0x00da2200
    9848:	3d0d0000 	stccc	0, cr0, [sp, #-0]
    984c:	00590f02 	subseq	r0, r9, r2, lsl #30
    9850:	02010000 	andeq	r0, r1, #0
    9854:	1b000000 	blne	985c <__exidx_end+0x3b9c>
    9858:	02420d02 	subeq	r0, r2, #2, 26	; 0x80
    985c:	00165c04 	andseq	r5, r6, r4, lsl #24
    9860:	23bd2200 			; <UNDEFINED> instruction: 0x23bd2200
    9864:	430d0000 	movwmi	r0, #53248	; 0xd000
    9868:	006c1002 	rsbeq	r1, ip, r2
    986c:	06020000 	streq	r0, [r2], -r0
    9870:	5922000a 	stmdbpl	r2!, {r1, r3}
    9874:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9878:	6c100244 	lfmvs	f0, 4, [r0], {68}	; 0x44
    987c:	02000000 	andeq	r0, r0, #0
    9880:	22000901 	andcs	r0, r0, #16384	; 0x4000
    9884:	00002425 	andeq	r2, r0, r5, lsr #8
    9888:	1002460d 	andne	r4, r2, sp, lsl #12
    988c:	0000006c 	andeq	r0, r0, ip, rrx
    9890:	00080102 	andeq	r0, r8, r2, lsl #2
    9894:	001fc222 	andseq	ip, pc, r2, lsr #4
    9898:	02480d00 	subeq	r0, r8, #0, 26
    989c:	00006c10 	andeq	r6, r0, r0, lsl ip
    98a0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    98a4:	1f652200 	svcne	0x00652200
    98a8:	4d0d0000 	stcmi	0, cr0, [sp, #-0]
    98ac:	006c1002 	rsbeq	r1, ip, r2
    98b0:	03020000 	movweq	r0, #8192	; 0x2000
    98b4:	1b000000 	blne	98bc <__exidx_end+0x3bfc>
    98b8:	02560d02 	subseq	r0, r6, #2, 26	; 0x80
    98bc:	0016ab04 	andseq	sl, r6, r4, lsl #22
    98c0:	21ba2200 			; <UNDEFINED> instruction: 0x21ba2200
    98c4:	570d0000 	strpl	r0, [sp, -r0]
    98c8:	006c1002 	rsbeq	r1, ip, r2
    98cc:	03020000 	movweq	r0, #8192	; 0x2000
    98d0:	5922000d 	stmdbpl	r2!, {r0, r2, r3}
    98d4:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    98d8:	6c10025d 	lfmvs	f0, 4, [r0], {93}	; 0x5d
    98dc:	02000000 	andeq	r0, r0, #0
    98e0:	22000c01 	andcs	r0, r0, #256	; 0x100
    98e4:	000020f9 	strdeq	r2, [r0], -r9
    98e8:	10025f0d 	andne	r5, r2, sp, lsl #30
    98ec:	0000006c 	andeq	r0, r0, ip, rrx
    98f0:	00060602 	andeq	r0, r6, r2, lsl #12
    98f4:	0023f822 	eoreq	pc, r3, r2, lsr #16
    98f8:	02660d00 	rsbeq	r0, r6, #0, 26
    98fc:	00006c10 	andeq	r6, r0, r0, lsl ip
    9900:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    9904:	80020000 	andhi	r0, r2, r0
    9908:	0e000025 	cdpeq	0, 0, cr0, cr0, cr5, {1}
    990c:	16b7343c 			; <UNDEFINED> instruction: 0x16b7343c
    9910:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
    9914:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    9918:	06155e0e 	ldreq	r5, [r5], -lr, lsl #28
    991c:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    9920:	00002030 	andeq	r2, r0, r0, lsr r0
    9924:	840d5f0e 	strhi	r5, [sp], #-3854	; 0xfffff0f2
    9928:	00000009 	andeq	r0, r0, r9
    992c:	0007780d 	andeq	r7, r7, sp, lsl #16
    9930:	0c600e00 	stcleq	14, cr0, [r0], #-0
    9934:	00000059 	andeq	r0, r0, r9, asr r0
    9938:	147d0d04 	ldrbtne	r0, [sp], #-3332	; 0xfffff2fc
    993c:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    9940:	00170606 	andseq	r0, r7, r6, lsl #12
    9944:	f30d0500 	vrshl.u8	d0, d0, d13
    9948:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    994c:	006c0d6f 	rsbeq	r0, ip, pc, ror #26
    9950:	0d060000 	stceq	0, cr0, [r6, #-0]
    9954:	00004754 	andeq	r4, r0, r4, asr r7
    9958:	590c710e 	stmdbpl	ip, {r1, r2, r3, r8, ip, sp, lr}
    995c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9960:	0e010c00 	cdpeq	12, 0, cr0, cr1, cr0, {0}
    9964:	17400461 	strbne	r0, [r0, -r1, ror #8]
    9968:	66210000 	strtvs	r0, [r1], -r0
    996c:	0e000053 	mcreq	0, 0, r0, cr0, cr3, {2}
    9970:	00590f62 	subseq	r0, r9, r2, ror #30
    9974:	02010000 	andeq	r0, r1, #0
    9978:	41210006 			; <UNDEFINED> instruction: 0x41210006
    997c:	0e000025 	cdpeq	0, 0, cr0, cr0, cr5, {1}
    9980:	00590f67 	subseq	r0, r9, r7, ror #30
    9984:	02010000 	andeq	r0, r1, #0
    9988:	f9210004 			; <UNDEFINED> instruction: 0xf9210004
    998c:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    9990:	00590f6c 	subseq	r0, r9, ip, ror #30
    9994:	04010000 	streq	r0, [r1], #-0
    9998:	0c000000 	stceq	0, cr0, [r0], {-0}
    999c:	09480210 	stmdbeq	r8, {r4, r9}^
    99a0:	0000177e 	andeq	r1, r0, lr, ror r7
    99a4:	00217f0d 	eoreq	r7, r1, sp, lsl #30
    99a8:	0d490200 	sfmeq	f0, 2, [r9, #-0]
    99ac:	0000007f 	andeq	r0, r0, pc, ror r0
    99b0:	20e00d00 	rsccs	r0, r0, r0, lsl #26
    99b4:	4a020000 	bmi	899bc <__ccfg+0x69a14>
    99b8:	00007f0d 	andeq	r7, r0, sp, lsl #30
    99bc:	2b0d0400 	blcs	34a9c4 <__ccfg+0x32aa1c>
    99c0:	02000025 	andeq	r0, r0, #37	; 0x25
    99c4:	007f0d4b 	rsbseq	r0, pc, fp, asr #26
    99c8:	0d080000 	stceq	0, cr0, [r8, #-0]
    99cc:	0000267e 	andeq	r2, r0, lr, ror r6
    99d0:	7f0d4c02 	svcvc	0x000d4c02
    99d4:	0c000000 	stceq	0, cr0, [r0], {-0}
    99d8:	1f8b0200 	svcne	0x008b0200
    99dc:	4d020000 	stcmi	0, cr0, [r2, #-0]
    99e0:	00174003 	andseq	r4, r7, r3
    99e4:	008b0a00 	addeq	r0, fp, r0, lsl #20
    99e8:	179a0000 	ldrne	r0, [sl, r0]
    99ec:	aa0b0000 	bge	2c99f4 <__ccfg+0x2a9a4c>
    99f0:	a2000000 	andge	r0, r0, #0
    99f4:	178a0400 	strne	r0, [sl, r0, lsl #8]
    99f8:	c3230000 			; <UNDEFINED> instruction: 0xc3230000
    99fc:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    9a00:	179a1049 	ldrne	r1, [sl, r9, asr #32]
    9a04:	03050000 	movweq	r0, #20480	; 0x5000
    9a08:	000059f0 	strdeq	r5, [r0], -r0
    9a0c:	00008b0a 	andeq	r8, r0, sl, lsl #22
    9a10:	0017c200 	andseq	ip, r7, r0, lsl #4
    9a14:	00aa2400 	adceq	r2, sl, r0, lsl #8
    9a18:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    9a1c:	17b10400 	ldrne	r0, [r1, r0, lsl #8]!
    9a20:	4c230000 	stcmi	0, cr0, [r3], #-0
    9a24:	05000023 	streq	r0, [r0, #-35]	; 0xffffffdd
    9a28:	17c2103a 			; <UNDEFINED> instruction: 0x17c2103a
    9a2c:	03050000 	movweq	r0, #20480	; 0x5000
    9a30:	0000533c 	andeq	r5, r0, ip, lsr r3
    9a34:	0028fb02 	eoreq	pc, r8, r2, lsl #22
    9a38:	12270f00 	eorne	r0, r7, #0, 30
    9a3c:	0000006c 	andeq	r0, r0, ip, rrx
    9a40:	0017d904 	andseq	sp, r7, r4, lsl #18
    9a44:	17d90500 	ldrbne	r0, [r9, r0, lsl #10]
    9a48:	c2020000 	andgt	r0, r2, #0
    9a4c:	0f00001d 	svceq	0x0000001d
    9a50:	0059122b 	subseq	r1, r9, fp, lsr #4
    9a54:	ef050000 	svc	0x00050000
    9a58:	02000017 	andeq	r0, r0, #23
    9a5c:	0000294d 	andeq	r2, r0, sp, asr #18
    9a60:	7f122c0f 	svcvc	0x00122c0f
    9a64:	04000000 	streq	r0, [r0], #-0
    9a68:	00001800 	andeq	r1, r0, r0, lsl #16
    9a6c:	00064602 	andeq	r4, r6, r2, lsl #12
    9a70:	122d0f00 	eorne	r0, sp, #0, 30
    9a74:	0000007f 	andeq	r0, r0, pc, ror r0
    9a78:	000bb402 	andeq	fp, fp, r2, lsl #8
    9a7c:	102e0f00 	eorne	r0, lr, r0, lsl #30
    9a80:	00001829 	andeq	r1, r0, r9, lsr #16
    9a84:	17d90411 	bfine	r0, r1, #8, #18
    9a88:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    9a8c:	bd09320f 	sfmlt	f3, 4, [r9, #-60]	; 0xffffffc4
    9a90:	21000018 	tstcs	r0, r8, lsl r0
    9a94:	00000034 	andeq	r0, r0, r4, lsr r0
    9a98:	ef07340f 	svc	0x0007340f
    9a9c:	01000017 	tsteq	r0, r7, lsl r0
    9aa0:	21000701 	tstcs	r0, r1, lsl #14
    9aa4:	0000064c 	andeq	r0, r0, ip, asr #12
    9aa8:	ef03350f 	svc	0x0003350f
    9aac:	01000017 	tsteq	r0, r7, lsl r0
    9ab0:	21000601 	tstcs	r0, r1, lsl #12
    9ab4:	000002e7 	andeq	r0, r0, r7, ror #5
    9ab8:	ef03360f 	svc	0x0003360f
    9abc:	01000017 	tsteq	r0, r7, lsl r0
    9ac0:	21000501 	tstcs	r0, r1, lsl #10
    9ac4:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    9ac8:	ef03370f 	svc	0x0003370f
    9acc:	01000017 	tsteq	r0, r7, lsl r0
    9ad0:	21000401 	tstcs	r0, r1, lsl #8
    9ad4:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    9ad8:	ef03380f 	svc	0x0003380f
    9adc:	01000017 	tsteq	r0, r7, lsl r0
    9ae0:	0d000004 	stceq	0, cr0, [r0, #-16]
    9ae4:	0000065b 	andeq	r0, r0, fp, asr r6
    9ae8:	ef073a0f 	svc	0x00073a0f
    9aec:	01000017 	tsteq	r0, r7, lsl r0
    9af0:	0008fb0d 	andeq	pc, r8, sp, lsl #22
    9af4:	033c0f00 	teqeq	ip, #0, 30
    9af8:	000017ef 	andeq	r1, r0, pc, ror #15
    9afc:	0f3a0d02 	svceq	0x003a0d02
    9b00:	3d0f0000 	stccc	0, cr0, [pc, #-0]	; 9b08 <__exidx_end+0x3e48>
    9b04:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9b08:	130d0300 	movwne	r0, #54016	; 0xd300
    9b0c:	0f000009 	svceq	0x00000009
    9b10:	1800083f 	stmdane	r0, {r0, r1, r2, r3, r4, r5, fp}
    9b14:	00040000 	andeq	r0, r4, r0
    9b18:	00031d02 	andeq	r1, r3, r2, lsl #26
    9b1c:	03410f00 	movteq	r0, #7936	; 0x1f00
    9b20:	0000182f 	andeq	r1, r0, pc, lsr #16
    9b24:	0018bd05 	andseq	fp, r8, r5, lsl #26
    9b28:	06be2500 	ldrteq	r2, [lr], r0, lsl #10
    9b2c:	430f0000 	movwmi	r0, #61440	; 0xf000
    9b30:	0018c91a 	andseq	ip, r8, sl, lsl r9
    9b34:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9b38:	000001a0 	andeq	r0, r0, r0, lsr #3
    9b3c:	eb0e450f 	bl	39af80 <__ccfg+0x37afd8>
    9b40:	01000005 	tsteq	r0, r5
    9b44:	03262501 			; <UNDEFINED> instruction: 0x03262501
    9b48:	450f0000 	strmi	r0, [pc, #-0]	; 9b50 <__exidx_end+0x3e90>
    9b4c:	0005eb1e 	andeq	lr, r5, lr, lsl fp
    9b50:	0c010100 	stfeqs	f0, [r1], {-0}
    9b54:	098f1008 	stmibeq	pc, {r3, ip}	; <UNPREDICTABLE>
    9b58:	00001929 	andeq	r1, r0, r9, lsr #18
    9b5c:	000cd80d 	andeq	sp, ip, sp, lsl #16
    9b60:	0b901000 	bleq	fe40db68 <_estack+0xde408b68>
    9b64:	0000007f 	andeq	r0, r0, pc, ror r0
    9b68:	10750d00 	rsbsne	r0, r5, r0, lsl #26
    9b6c:	91100000 	tstls	r0, r0
    9b70:	0017d908 	andseq	sp, r7, r8, lsl #18
    9b74:	c50d0400 	strgt	r0, [sp, #-1024]	; 0xfffffc00
    9b78:	10000001 	andne	r0, r0, r1
    9b7c:	17fb1092 			; <UNDEFINED> instruction: 0x17fb1092
    9b80:	00060000 	andeq	r0, r6, r0
    9b84:	000ccc02 	andeq	ip, ip, r2, lsl #24
    9b88:	03931000 	orrseq	r1, r3, #0
    9b8c:	000018f8 	strdeq	r1, [r0], -r8
    9b90:	0019290a 	andseq	r2, r9, sl, lsl #18
    9b94:	00194000 	andseq	r4, r9, r0
    9b98:	25002600 	strcs	r2, [r0, #-1536]	; 0xfffffa00
    9b9c:	0000093d 	andeq	r0, r0, sp, lsr r9
    9ba0:	350f9910 	strcc	r9, [pc, #-2320]	; 9298 <__exidx_end+0x35d8>
    9ba4:	01000019 	tsteq	r0, r9, lsl r0
    9ba8:	11010c01 	tstne	r1, r1, lsl #24
    9bac:	19780991 	ldmdbne	r8!, {r0, r4, r7, r8, fp}^
    9bb0:	1a210000 	bne	849bb8 <__ccfg+0x829c10>
    9bb4:	11000009 	tstne	r0, r9
    9bb8:	17ef0793 			; <UNDEFINED> instruction: 0x17ef0793
    9bbc:	07010000 	streq	r0, [r1, -r0]
    9bc0:	cc210001 	stcgt	0, cr0, [r1], #-4
    9bc4:	11000005 	tstne	r0, r5
    9bc8:	17ef0394 			; <UNDEFINED> instruction: 0x17ef0394
    9bcc:	01010000 	mrseq	r0, (UNDEF: 1)
    9bd0:	02000000 	andeq	r0, r0, #0
    9bd4:	00000aab 	andeq	r0, r0, fp, lsr #21
    9bd8:	4e039611 	mcrmi	6, 0, r9, cr3, cr1, {0}
    9bdc:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    9be0:	00001978 	andeq	r1, r0, r8, ror r9
    9be4:	0019840a 	andseq	r8, r9, sl, lsl #8
    9be8:	00199400 	andseq	r9, r9, r0, lsl #8
    9bec:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    9bf0:	00001989 	andeq	r1, r0, r9, lsl #19
    9bf4:	0003aa25 	andeq	sl, r3, r5, lsr #20
    9bf8:	179c1100 	ldrne	r1, [ip, r0, lsl #2]
    9bfc:	00001994 	muleq	r0, r4, r9
    9c00:	e50a0101 	str	r0, [sl, #-257]	; 0xfffffeff
    9c04:	b2000017 	andlt	r0, r0, #23
    9c08:	26000019 			; <UNDEFINED> instruction: 0x26000019
    9c0c:	19a70400 	stmibne	r7!, {sl}
    9c10:	0e250000 	cdpeq	0, 2, cr0, cr5, cr0, {0}
    9c14:	12000006 	andne	r0, r0, #6
    9c18:	19b21306 	ldmibne	r2!, {r1, r2, r8, r9, ip}
    9c1c:	01010000 	mrseq	r0, (UNDEF: 1)
    9c20:	0008dd25 	andeq	sp, r8, r5, lsr #26
    9c24:	0ec31000 	cdpeq	0, 12, cr1, cr3, cr0, {0}
    9c28:	00001800 	andeq	r1, r0, r0, lsl #16
    9c2c:	72070101 	andvc	r0, r7, #1073741824	; 0x40000000
    9c30:	1300000c 	movwne	r0, #12
    9c34:	e010016e 	ands	r0, r0, lr, ror #2
    9c38:	11000019 	tstne	r0, r9, lsl r0
    9c3c:	0019e604 	andseq	lr, r9, r4, lsl #12
    9c40:	f2011f00 	vmax.f32	d1, d1, d0
    9c44:	16000019 			; <UNDEFINED> instruction: 0x16000019
    9c48:	000017d9 	ldrdeq	r1, [r0], -r9
    9c4c:	05f80a00 	ldrbeq	r0, [r8, #2560]!	; 0xa00
    9c50:	19fd0000 	ldmibne	sp!, {}^	; <UNPREDICTABLE>
    9c54:	00260000 	eoreq	r0, r6, r0
    9c58:	0019f204 	andseq	pc, r9, r4, lsl #4
    9c5c:	09e62000 	stmibeq	r6!, {sp}^
    9c60:	7f130000 	svcvc	0x00130000
    9c64:	19fd1601 	ldmibne	sp!, {r0, r9, sl, ip}^
    9c68:	01010000 	mrseq	r0, (UNDEF: 1)
    9c6c:	00039620 	andeq	r9, r3, r0, lsr #12
    9c70:	01821300 	orreq	r1, r2, r0, lsl #6
    9c74:	00180c14 	andseq	r0, r8, r4, lsl ip
    9c78:	20010100 	andcs	r0, r1, r0, lsl #2
    9c7c:	0000036e 	andeq	r0, r0, lr, ror #6
    9c80:	0e02d813 	mcreq	8, 0, sp, cr2, cr3, {0}
    9c84:	00001800 	andeq	r1, r0, r0, lsl #16
    9c88:	081b0101 	ldmdaeq	fp, {r0, r8}
    9c8c:	09030313 	stmdbeq	r3, {r0, r1, r4, r8, r9}
    9c90:	00001a56 	andeq	r1, r0, r6, asr sl
    9c94:	003ca118 	eorseq	sl, ip, r8, lsl r1
    9c98:	03071300 	movweq	r1, #29440	; 0x7300
    9c9c:	0017d907 	andseq	sp, r7, r7, lsl #18
    9ca0:	cd180000 	ldcgt	0, cr0, [r8, #-0]
    9ca4:	1300000f 	movwne	r0, #15
    9ca8:	11080308 	tstne	r8, r8, lsl #6
    9cac:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    9cb0:	0a090700 	beq	24b8b8 <__ccfg+0x22b910>
    9cb4:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    9cb8:	1a2f0303 	bne	bca8cc <__ccfg+0xbaa924>
    9cbc:	291a0000 	ldmdbcs	sl, {}	; <UNPREDICTABLE>
    9cc0:	30000000 	andcc	r0, r0, r0
    9cc4:	08030b13 	stmdaeq	r3, {r0, r1, r4, r8, r9, fp}
    9cc8:	00001ac6 	andeq	r1, r0, r6, asr #21
    9ccc:	001f2418 	andseq	r2, pc, r8, lsl r4	; <UNPREDICTABLE>
    9cd0:	03141300 	tsteq	r4, #0, 6
    9cd4:	0017d908 	andseq	sp, r7, r8, lsl #18
    9cd8:	e7180000 	ldr	r0, [r8, -r0]
    9cdc:	1300000b 	movwne	r0, #11
    9ce0:	d9080315 	stmdble	r8, {r0, r2, r4, r8, r9}
    9ce4:	02000017 	andeq	r0, r0, #23
    9ce8:	004c8e18 	subeq	r8, ip, r8, lsl lr
    9cec:	03161300 	tsteq	r6, #0, 6
    9cf0:	0019d30b 	andseq	sp, r9, fp, lsl #6
    9cf4:	54180400 	ldrpl	r0, [r8], #-1024	; 0xfffffc00
    9cf8:	13000047 	movwne	r0, #71	; 0x47
    9cfc:	11090317 	tstne	r9, r7, lsl r3
    9d00:	08000018 	stmdaeq	r0, {r3, r4}
    9d04:	00000f18 	andeq	r0, r0, r8, lsl pc
    9d08:	03181300 	tsteq	r8, #0, 6
    9d0c:	001ac60f 	andseq	ip, sl, pc, lsl #12
    9d10:	5d180c00 	ldcpl	12, cr0, [r8, #-0]
    9d14:	13000009 	movwne	r0, #9
    9d18:	d6150319 			; <UNDEFINED> instruction: 0xd6150319
    9d1c:	2c00001a 	stccs	0, cr0, [r0], {26}
    9d20:	1a560a00 	bne	158c528 <__ccfg+0x156c580>
    9d24:	1ad60000 	bne	ff589d2c <_estack+0xdf584d2c>
    9d28:	aa0b0000 	bge	2c9d30 <__ccfg+0x2a9d88>
    9d2c:	03000000 	movweq	r0, #0
    9d30:	63041100 	movwvs	r1, #16640	; 0x4100
    9d34:	0700001a 	smladeq	r0, sl, r0, r0
    9d38:	00000bdc 	ldrdeq	r0, [r0], -ip
    9d3c:	1b031c13 	blne	d0d90 <__ccfg+0xb0de8>
    9d40:	00001a63 	andeq	r1, r0, r3, ror #20
    9d44:	000bbc20 	andeq	fp, fp, r0, lsr #24
    9d48:	031e1300 	tsteq	lr, #0, 6
    9d4c:	001af814 	andseq	pc, sl, r4, lsl r8	; <UNPREDICTABLE>
    9d50:	11010100 	mrsne	r0, (UNDEF: 17)
    9d54:	001adc04 	andseq	sp, sl, r4, lsl #24
    9d58:	070f2500 	streq	r2, [pc, -r0, lsl #10]
    9d5c:	1d140000 	ldcne	0, cr0, [r4, #-0]
    9d60:	0017d913 	andseq	sp, r7, r3, lsl r9
    9d64:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9d68:	000002ee 	andeq	r0, r0, lr, ror #5
    9d6c:	ea1a1e14 	b	6915c4 <__ccfg+0x67161c>
    9d70:	01000017 	tsteq	r0, r7, lsl r0
    9d74:	0c692501 	cfstr64eq	mvdx2, [r9], #-4
    9d78:	1e140000 	cdpne	0, 1, cr0, cr4, cr0, {0}
    9d7c:	0017ea24 	andseq	lr, r7, r4, lsr #20
    9d80:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9d84:	00000c87 	andeq	r0, r0, r7, lsl #25
    9d88:	f8142214 			; <UNDEFINED> instruction: 0xf8142214
    9d8c:	0100001a 	tsteq	r0, sl, lsl r0
    9d90:	203b2501 	eorscs	r2, fp, r1, lsl #10
    9d94:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    9d98:	000f6d27 	andeq	r6, pc, r7, lsr #26
    9d9c:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9da0:	00002329 	andeq	r2, r0, r9, lsr #6
    9da4:	fe153a15 	mrc2	10, 0, r3, cr5, cr5, {0}	; <UNPREDICTABLE>
    9da8:	01000009 	tsteq	r0, r9
    9dac:	27452501 	strbcs	r2, [r5, -r1, lsl #10]
    9db0:	3b150000 	blcc	549db8 <__ccfg+0x529e10>
    9db4:	000cec1a 	andeq	lr, ip, sl, lsl ip
    9db8:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9dbc:	000025e9 	andeq	r2, r0, r9, ror #11
    9dc0:	881a3c15 	ldmdahi	sl, {r0, r2, r4, sl, fp, ip, sp}
    9dc4:	0100000d 	tsteq	r0, sp
    9dc8:	26e62301 	strbtcs	r2, [r6], r1, lsl #6
    9dcc:	24010000 	strcs	r0, [r1], #-0
    9dd0:	0000a30c 	andeq	sl, r0, ip, lsl #6
    9dd4:	c8030500 	stmdagt	r3, {r8, sl}
    9dd8:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9ddc:	00001f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    9de0:	ef0d2601 	svc	0x000d2601
    9de4:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9de8:	0005d403 	andeq	sp, r5, r3, lsl #8
    9dec:	16032320 	strne	r2, [r3], -r0, lsr #6
    9df0:	27010000 	strcs	r0, [r1, -r0]
    9df4:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9df8:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    9dfc:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9e00:	0000241d 	andeq	r2, r0, sp, lsl r4
    9e04:	ef0d2a01 	svc	0x000d2a01
    9e08:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9e0c:	0005f603 	andeq	pc, r5, r3, lsl #12
    9e10:	24172320 	ldrcs	r2, [r7], #-800	; 0xfffffce0
    9e14:	43010000 	movwmi	r0, #4096	; 0x1000
    9e18:	0017ef0d 	andseq	lr, r7, sp, lsl #30
    9e1c:	3a030500 	bcc	cb224 <__ccfg+0xab27c>
    9e20:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    9e24:	000020b4 	strheq	r2, [r0], -r4
    9e28:	ef0d4701 	svc	0x000d4701
    9e2c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9e30:	0005bc03 	andeq	fp, r5, r3, lsl #24
    9e34:	17e50a20 	strbne	r0, [r5, r0, lsr #20]!
    9e38:	1bea0000 	blne	ffa89e40 <_estack+0xdfa84e40>
    9e3c:	aa0b0000 	bge	2c9e44 <__ccfg+0x2a9e9c>
    9e40:	07000000 	streq	r0, [r0, -r0]
    9e44:	1bda0400 	blne	ff68ae4c <_estack+0xdf685e4c>
    9e48:	a5230000 	strge	r0, [r3, #-0]!
    9e4c:	01000024 	tsteq	r0, r4, lsr #32
    9e50:	1bea134e 	blne	ffa8eb90 <_estack+0xdfa89b90>
    9e54:	03050000 	movweq	r0, #20480	; 0x5000
    9e58:	0000532a 	andeq	r5, r0, sl, lsr #6
    9e5c:	00273e23 	eoreq	r3, r7, r3, lsr #28
    9e60:	0d520100 	ldfeqe	f0, [r2, #-0]
    9e64:	000017d9 	ldrdeq	r1, [r0], -r9
    9e68:	05cc0305 	strbeq	r0, [ip, #773]	; 0x305
    9e6c:	d6232000 	strtle	r2, [r3], -r0
    9e70:	01000023 	tsteq	r0, r3, lsr #32
    9e74:	17d90353 			; <UNDEFINED> instruction: 0x17d90353
    9e78:	03050000 	movweq	r0, #20480	; 0x5000
    9e7c:	200005f4 	strdcs	r0, [r0], -r4
    9e80:	00261c23 	eoreq	r1, r6, r3, lsr #24
    9e84:	03540100 	cmpeq	r4, #0, 2
    9e88:	000017d9 	ldrdeq	r1, [r0], -r9
    9e8c:	05ba0305 	ldreq	r0, [sl, #773]!	; 0x305
    9e90:	d1232000 			; <UNDEFINED> instruction: 0xd1232000
    9e94:	0100001f 	tsteq	r0, pc, lsl r0
    9e98:	17d90355 			; <UNDEFINED> instruction: 0x17d90355
    9e9c:	03050000 	movweq	r0, #20480	; 0x5000
    9ea0:	20000038 	andcs	r0, r0, r8, lsr r0
    9ea4:	5901040c 	stmdbpl	r1, {r2, r3, sl}
    9ea8:	001c6b09 	andseq	r6, ip, r9, lsl #22
    9eac:	73701000 	cmnvc	r0, #0
    9eb0:	085a0100 	ldmdaeq	sl, {r8}^
    9eb4:	000017d9 	ldrdeq	r1, [r0], -r9
    9eb8:	77721000 	ldrbvc	r1, [r2, -r0]!
    9ebc:	045b0100 	ldrbeq	r0, [fp], #-256	; 0xffffff00
    9ec0:	000017d9 	ldrdeq	r1, [r0], -r9
    9ec4:	65020002 	strvs	r0, [r2, #-2]
    9ec8:	01000023 	tsteq	r0, r3, lsr #32
    9ecc:	1c49035c 	mcrrne	3, 5, r0, r9, cr12
    9ed0:	6b040000 	blvs	109ed8 <__ccfg+0xe9f30>
    9ed4:	0a00001c 	beq	9f4c <__exidx_end+0x428c>
    9ed8:	00001c77 	andeq	r1, r0, r7, ror ip
    9edc:	00001c8c 	andeq	r1, r0, ip, lsl #25
    9ee0:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    9ee4:	04000200 	streq	r0, [r0], #-512	; 0xfffffe00
    9ee8:	00001c7c 	andeq	r1, r0, ip, ror ip
    9eec:	00239723 	eoreq	r9, r3, r3, lsr #14
    9ef0:	185e0100 	ldmdane	lr, {r8}^
    9ef4:	00001c8c 	andeq	r1, r0, ip, lsl #25
    9ef8:	5c7c0305 	ldclpl	3, cr0, [ip], #-20	; 0xffffffec
    9efc:	cd230000 	stcgt	0, cr0, [r3, #-0]
    9f00:	01000024 	tsteq	r0, r4, lsr #32
    9f04:	10761b66 	rsbsne	r1, r6, r6, ror #22
    9f08:	03050000 	movweq	r0, #20480	; 0x5000
    9f0c:	200005e8 	andcs	r0, r0, r8, ror #11
    9f10:	00260823 	eoreq	r0, r6, r3, lsr #16
    9f14:	0e690100 	poweqe	f0, f1, f0
    9f18:	00001811 	andeq	r1, r0, r1, lsl r8
    9f1c:	05c00305 	strbeq	r0, [r0, #773]	; 0x305
    9f20:	53232000 			; <UNDEFINED> instruction: 0x53232000
    9f24:	01000020 	tsteq	r0, r0, lsr #32
    9f28:	18111769 	ldmdane	r1, {r0, r3, r5, r6, r8, r9, sl, ip}
    9f2c:	03050000 	movweq	r0, #20480	; 0x5000
    9f30:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    9f34:	00266f23 	eoreq	r6, r6, r3, lsr #30
    9f38:	21780100 	cmncs	r8, r0, lsl #2
    9f3c:	00000ac1 	andeq	r0, r0, r1, asr #21
    9f40:	00240305 	eoreq	r0, r4, r5, lsl #6
    9f44:	e0232000 	eor	r2, r3, r0
    9f48:	01000021 	tsteq	r0, r1, lsr #32
    9f4c:	0e721a83 	vaddeq.f32	s3, s5, s6
    9f50:	03050000 	movweq	r0, #20480	; 0x5000
    9f54:	20000008 	andcs	r0, r0, r8
    9f58:	001f3123 	andseq	r3, pc, r3, lsr #2
    9f5c:	11c10100 	bicne	r0, r1, r0, lsl #2
    9f60:	0000177e 	andeq	r1, r0, lr, ror r7
    9f64:	05d80305 	ldrbeq	r0, [r8, #773]	; 0x305
    9f68:	37272000 	strcc	r2, [r7, -r0]!
    9f6c:	01000025 	tsteq	r0, r5, lsr #32
    9f70:	a30c020a 	movwge	r0, #49674	; 0xc20a
    9f74:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    9f78:	00206201 	eoreq	r6, r0, r1, lsl #4
    9f7c:	03d70100 	bicseq	r0, r7, #0, 2
    9f80:	2f900106 	svccs	0x00900106
    9f84:	31040000 	mrscc	r0, (UNDEF: 4)
    9f88:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f8c:	00001da5 	andeq	r1, r0, r5, lsr #27
    9f90:	79687029 	stmdbvc	r8!, {r0, r3, r5, ip, sp, lr}^
    9f94:	03d70100 	bicseq	r0, r7, #0, 2
    9f98:	0000a317 	andeq	sl, r0, r7, lsl r3
    9f9c:	00288500 	eoreq	r8, r8, r0, lsl #10
    9fa0:	626d2900 	rsbvs	r2, sp, #0, 18
    9fa4:	d7010073 	smlsdxle	r1, r3, r0, r0
    9fa8:	00a32003 	adceq	r2, r3, r3
    9fac:	28cf0000 	stmiacs	pc, {}^	; <UNPREDICTABLE>
    9fb0:	352a0000 	strcc	r0, [sl, #-0]!
    9fb4:	b400001e 	strlt	r0, [r0], #-30	; 0xffffffe2
    9fb8:	5000002f 	andpl	r0, r0, pc, lsr #32
    9fbc:	0100000e 	tsteq	r0, lr
    9fc0:	930203f0 	movwls	r0, #9200	; 0x23f0
    9fc4:	2b00001d 	blcs	a040 <__exidx_end+0x4380>
    9fc8:	00000e50 	andeq	r0, r0, r0, asr lr
    9fcc:	001e432c 	andseq	r4, lr, ip, lsr #6
    9fd0:	1e4e2d00 	cdpne	13, 4, cr2, cr14, cr0, {0}
    9fd4:	28f80000 	ldmcs	r8!, {}^	; <UNPREDICTABLE>
    9fd8:	5a2d0000 	bpl	b49fe0 <__ccfg+0xb2a038>
    9fdc:	1700001e 	smladne	r0, lr, r0, r0
    9fe0:	2d000029 	stccs	0, cr0, [r0, #-164]	; 0xffffff5c
    9fe4:	00001e66 	andeq	r1, r0, r6, ror #28
    9fe8:	00002940 	andeq	r2, r0, r0, asr #18
    9fec:	cc2e0000 	stcgt	0, cr0, [lr], #-0
    9ff0:	6a00001f 	bvs	a074 <__exidx_end+0x43b4>
    9ff4:	90000030 	andls	r0, r0, r0, lsr r0
    9ff8:	0100000e 	tsteq	r0, lr
    9ffc:	00020414 	andeq	r0, r2, r4, lsl r4
    a000:	0023452f 	eoreq	r4, r3, pc, lsr #10
    a004:	034a0100 	movteq	r0, #41216	; 0xa100
    a008:	00a3010c 	adceq	r0, r3, ip, lsl #2
    a00c:	28500000 	ldmdacs	r0, {}^	; <UNPREDICTABLE>
    a010:	29e00000 	stmibcs	r0!, {}^	; <UNPREDICTABLE>
    a014:	9c010000 	stcls	0, cr0, [r1], {-0}
    a018:	00001e35 	andeq	r1, r0, r5, lsr lr
    a01c:	74706f29 	ldrbtvc	r6, [r0], #-3881	; 0xfffff0d7
    a020:	034a0100 	movteq	r0, #41216	; 0xa100
    a024:	0000a318 	andeq	sl, r0, r8, lsl r3
    a028:	00297400 	eoreq	r7, r9, r0, lsl #8
    a02c:	61762900 	cmnvs	r6, r0, lsl #18
    a030:	4a01006c 	bmi	4a1e8 <__ccfg+0x2a240>
    a034:	181d2503 	ldmdane	sp, {r0, r1, r8, sl, sp}
    a038:	2a000000 	bcs	a040 <__exidx_end+0x4380>
    a03c:	72300000 	eorsvc	r0, r0, #0
    a040:	01007465 	tsteq	r0, r5, ror #8
    a044:	a306034c 	movwge	r0, #25420	; 0x634c
    a048:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    a04c:	3100002a 	tstcc	r0, sl, lsr #32
    a050:	000021fb 	strdeq	r2, [r0], -fp
    a054:	0103cf01 	tsteq	r3, r1, lsl #30
    a058:	000028d8 	ldrdeq	r2, [r0], -r8
    a05c:	00240531 	eoreq	r0, r4, r1, lsr r5
    a060:	03580100 	cmpeq	r8, #0, 2
    a064:	00289201 	eoreq	r9, r8, r1, lsl #4
    a068:	25b13100 	ldrcs	r3, [r1, #256]!	; 0x100
    a06c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    a070:	28dc0103 	ldmcs	ip, {r0, r1, r8}^
    a074:	92320000 	eorsls	r0, r2, #0
    a078:	bc000028 	stclt	0, cr0, [r0], {40}	; 0x28
    a07c:	30000028 	andcc	r0, r0, r8, lsr #32
    a080:	5901006a 	stmdbpl	r1, {r1, r3, r5, r6}
    a084:	00a30403 	adceq	r0, r3, r3, lsl #8
    a088:	2b020000 	blcs	8a090 <__ccfg+0x6a0e8>
    a08c:	00000000 	andeq	r0, r0, r0
    a090:	00227a33 	eoreq	r7, r2, r3, lsr sl
    a094:	03070100 	movweq	r0, #28928	; 0x7100
    a098:	1e73010d 	rpwnes	f0, f3, #5.0
    a09c:	69340000 	ldmdbvs	r4!, {}	; <UNPREDICTABLE>
    a0a0:	030b0100 	movweq	r0, #45312	; 0xb100
    a0a4:	0000a306 	andeq	sl, r0, r6, lsl #6
    a0a8:	65723400 	ldrbvs	r3, [r2, #-1024]!	; 0xfffffc00
    a0ac:	030c0100 	movweq	r0, #49408	; 0xc100
    a0b0:	001e731a 	andseq	r7, lr, sl, lsl r3
    a0b4:	61643400 	cmnvs	r4, r0, lsl #8
    a0b8:	030c0100 	movweq	r0, #49408	; 0xc100
    a0bc:	001e731f 	andseq	r7, lr, pc, lsl r3
    a0c0:	62643400 	rsbvs	r3, r4, #0, 8
    a0c4:	030c0100 	movweq	r0, #49408	; 0xc100
    a0c8:	001e7324 	andseq	r7, lr, r4, lsr #6
    a0cc:	04110000 	ldreq	r0, [r1], #-0
    a0d0:	000016ab 	andeq	r1, r0, fp, lsr #13
    a0d4:	206e0128 	rsbcs	r0, lr, r8, lsr #2
    a0d8:	0d010000 	stceq	0, cr0, [r1, #-0]
    a0dc:	30010102 	andcc	r0, r1, r2, lsl #2
    a0e0:	2000002d 	andcs	r0, r0, sp, lsr #32
    a0e4:	0100002f 	tsteq	r0, pc, lsr #32
    a0e8:	001efd9c 	mulseq	lr, ip, sp
    a0ec:	0c333500 	cfldr32eq	mvfx3, [r3], #-0
    a0f0:	0d010000 	stceq	0, cr0, [r1, #-0]
    a0f4:	17d90102 	ldrbne	r0, [r9, r2, lsl #2]
    a0f8:	2b150000 	blcs	54a100 <__ccfg+0x52a158>
    a0fc:	9b310000 	blls	c4a104 <__ccfg+0xc2a15c>
    a100:	0100001f 	tsteq	r0, pc, lsl r0
    a104:	44010216 	strmi	r0, [r1], #-534	; 0xfffffdea
    a108:	2e00002d 	cdpcs	0, 0, cr0, cr0, cr13, {1}
    a10c:	00002023 	andeq	r2, r0, r3, lsr #32
    a110:	00002da6 	andeq	r2, r0, r6, lsr #27
    a114:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a118:	04022501 	streq	r2, [r2], #-1281	; 0xfffffaff
    a11c:	001ff32a 	andseq	pc, pc, sl, lsr #6
    a120:	002daa00 	eoreq	sl, sp, r0, lsl #20
    a124:	000e0800 	andeq	r0, lr, r0, lsl #16
    a128:	02260100 	eoreq	r0, r6, #0, 2
    a12c:	001eeb04 	andseq	lr, lr, r4, lsl #22
    a130:	0e082b00 	vmlaeq.f64	d2, d8, d0
    a134:	012d0000 			; <UNDEFINED> instruction: 0x012d0000
    a138:	3e000020 	cdpcc	0, 0, cr0, cr0, cr0, {1}
    a13c:	2c00002b 	stccs	0, cr0, [r0], {43}	; 0x2b
    a140:	0000200d 	andeq	r2, r0, sp
    a144:	23360000 	teqcs	r6, #0
    a148:	2e000020 	cdpcs	0, 0, cr0, cr0, cr0, {1}
    a14c:	3800002e 	stmdacc	r0, {r1, r2, r3, r5}
    a150:	0100002e 	tsteq	r0, lr, lsr #32
    a154:	00030265 	andeq	r0, r3, r5, ror #4
    a158:	25f60128 	ldrbcs	r0, [r6, #296]!	; 0x128
    a15c:	ec010000 	stc	0, cr0, [r1], {-0}
    a160:	20010601 	andcs	r0, r1, r1, lsl #12
    a164:	9000002f 	andls	r0, r0, pc, lsr #32
    a168:	0100002f 	tsteq	r0, pc, lsr #32
    a16c:	001f629c 	mulseq	pc, ip, r2	; <UNPREDICTABLE>
    a170:	0e383700 	cdpeq	7, 3, cr3, cr8, cr0, {0}
    a174:	1f2f0000 	svcne	0x002f0000
    a178:	6a300000 	bvs	c0a180 <__ccfg+0xbea1d8>
    a17c:	01fe0100 	mvnseq	r0, r0, lsl #2
    a180:	0000a302 	andeq	sl, r0, r2, lsl #6
    a184:	002b5d00 	eoreq	r5, fp, r0, lsl #26
    a188:	d5380000 	ldrle	r0, [r8, #-0]!
    a18c:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a190:	3e00002f 	cdpcc	0, 0, cr0, cr0, cr15, {1}
    a194:	0100002f 	tsteq	r0, pc, lsr #32
    a198:	4a0201f8 	bmi	8a980 <__ccfg+0x6a9d8>
    a19c:	3900001f 	stmdbcc	r0, {r0, r1, r2, r3, r4}
    a1a0:	000021e4 	andeq	r2, r0, r4, ror #3
    a1a4:	21f23a00 	mvnscs	r3, r0, lsl #20
    a1a8:	2f3e0000 	svccs	0x003e0000
    a1ac:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    a1b0:	fb010000 	blx	4a1ba <__ccfg+0x2a212>
    a1b4:	00390201 	eorseq	r0, r9, r1, lsl #4
    a1b8:	00000022 	andeq	r0, r0, r2, lsr #32
    a1bc:	24353b00 	ldrtcs	r3, [r5], #-2816	; 0xfffff500
    a1c0:	b5010000 	strlt	r0, [r1, #-0]
    a1c4:	2c600d01 	stclcs	13, cr0, [r0], #-4
    a1c8:	2d300000 	ldccs	0, cr0, [r0, #-0]
    a1cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    a1d0:	00001fcc 	andeq	r1, r0, ip, asr #31
    a1d4:	00626430 	rsbeq	r6, r2, r0, lsr r4
    a1d8:	1a01b701 	bne	77de4 <__ccfg+0x57e3c>
    a1dc:	00001e73 	andeq	r1, r0, r3, ror lr
    a1e0:	00002b70 	andeq	r2, r0, r0, ror fp
    a1e4:	01006934 	tsteq	r0, r4, lsr r9
    a1e8:	a30601b8 	movwge	r0, #25016	; 0x61b8
    a1ec:	30000000 	andcc	r0, r0, r0
    a1f0:	01006c70 	tsteq	r0, r0, ror ip
    a1f4:	a30901b8 	movwge	r0, #37304	; 0x91b8
    a1f8:	b2000000 	andlt	r0, r0, #0
    a1fc:	3000002b 	andcc	r0, r0, fp, lsr #32
    a200:	0100726e 	tsteq	r0, lr, ror #4
    a204:	a30d01b8 	movwge	r0, #53688	; 0xd1b8
    a208:	c5000000 	strgt	r0, [r0, #-0]
    a20c:	3a00002b 	bcc	a2c0 <__exidx_end+0x4600>
    a210:	0000220d 	andeq	r2, r0, sp, lsl #4
    a214:	00002c60 	andeq	r2, r0, r0, ror #24
    a218:	00000dc0 	andeq	r0, r0, r0, asr #27
    a21c:	0201c101 	andeq	ip, r1, #1073741824	; 0x40000000
    a220:	00221b39 	eoreq	r1, r2, r9, lsr fp
    a224:	3c000000 	stccc	0, cr0, [r0], {-0}
    a228:	0000237a 	andeq	r2, r0, sl, ror r3
    a22c:	0d01ab01 	vstreq	d10, [r1, #-4]
    a230:	23903d01 	orrscs	r3, r0, #1, 26	; 0x40
    a234:	a0010000 	andge	r0, r1, r0
    a238:	28300d01 	ldmdacs	r0!, {r0, r8, sl, fp}
    a23c:	28500000 	ldmdacs	r0, {}^	; <UNPREDICTABLE>
    a240:	9c010000 	stcls	0, cr0, [r1], {-0}
    a244:	00242f3c 	eoreq	r2, r4, ip, lsr pc
    a248:	01950100 	orrseq	r0, r5, r0, lsl #2
    a24c:	3d33010d 	ldfccs	f0, [r3, #-52]!	; 0xffffffcc
    a250:	01000022 	tsteq	r0, r2, lsr #32
    a254:	010d0180 	smlabbeq	sp, r0, r1, r0
    a258:	00002019 	andeq	r2, r0, r9, lsl r0
    a25c:	00657234 	rsbeq	r7, r5, r4, lsr r2
    a260:	1a018401 	bne	6b26c <__ccfg+0x4b2c4>
    a264:	00001e73 	andeq	r1, r0, r3, ror lr
    a268:	01006934 	tsteq	r0, r4, lsr r9
    a26c:	a3060185 	movwge	r0, #24965	; 0x6185
    a270:	00000000 	andeq	r0, r0, r0
    a274:	0022d43c 	eoreq	sp, r2, ip, lsr r4
    a278:	01610100 	cmneq	r1, r0, lsl #2
    a27c:	2b3e010d 	blcs	f8a6b8 <__ccfg+0xf6a710>
    a280:	0100001f 	tsteq	r0, pc, lsl r0
    a284:	3f010dff 	svccc	0x00010dff
    a288:	00002001 	andeq	r2, r0, r1
    a28c:	010de201 	tsteq	sp, r1, lsl #4
    a290:	00205f01 	eoreq	r5, r0, r1, lsl #30
    a294:	6d634000 	stclvs	0, cr4, [r3, #-0]
    a298:	e2010064 	and	r0, r1, #100	; 0x64
    a29c:	000bc026 	andeq	ip, fp, r6, lsr #32
    a2a0:	26f94100 	ldrbtcs	r4, [r9], r0, lsl #2
    a2a4:	e2010000 	and	r0, r1, #0
    a2a8:	00180031 	andseq	r0, r8, r1, lsr r0
    a2ac:	07224100 	streq	r4, [r2, -r0, lsl #2]!
    a2b0:	e2010000 	and	r0, r1, #0
    a2b4:	0018003e 	andseq	r0, r8, lr, lsr r0
    a2b8:	fe3f0000 	cdp2	0, 3, cr0, cr15, cr0, {0}
    a2bc:	0100001e 	tsteq	r0, lr, lsl r0
    a2c0:	01010dc5 	smlabteq	r1, r5, sp, r0
    a2c4:	00002092 	muleq	r0, r2, r0
    a2c8:	646d6340 	strbtvs	r6, [sp], #-832	; 0xfffffcc0
    a2cc:	1ec50100 	polnes	f0, f5, f0
    a2d0:	00001800 	andeq	r1, r0, r0, lsl #16
    a2d4:	73657242 	cmnvc	r5, #536870916	; 0x20000004
    a2d8:	06ca0100 	strbeq	r0, [sl], r0, lsl #2
    a2dc:	000000a3 	andeq	r0, r0, r3, lsr #1
    a2e0:	746e6342 	strbtvc	r6, [lr], #-834	; 0xfffffcbe
    a2e4:	06cd0100 	strbeq	r0, [sp], r0, lsl #2
    a2e8:	000000a3 	andeq	r0, r0, r3, lsr #1
    a2ec:	12c44300 	sbcne	r4, r4, #0, 6
    a2f0:	54030000 	strpl	r0, [r3], #-0
    a2f4:	03010101 	movweq	r0, #4353	; 0x1101
    a2f8:	000020af 	andeq	r2, r0, pc, lsr #1
    a2fc:	00112144 	andseq	r2, r1, r4, asr #2
    a300:	01540300 	cmpeq	r4, r0, lsl #6
    a304:	00007f19 	andeq	r7, r0, r9, lsl pc
    a308:	d1430000 	mrsle	r0, (UNDEF: 67)
    a30c:	03000013 	movweq	r0, #19
    a310:	0101011e 	tsteq	r1, lr, lsl r1
    a314:	0020cc03 	eoreq	ip, r0, r3, lsl #24
    a318:	11214400 			; <UNDEFINED> instruction: 0x11214400
    a31c:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    a320:	007f1701 	rsbseq	r1, pc, r1, lsl #14
    a324:	43000000 	movwmi	r0, #0
    a328:	00002597 	muleq	r0, r7, r5
    a32c:	1501ea05 	strne	lr, [r1, #-2565]	; 0xfffff5fb
    a330:	21610301 	cmncs	r1, r1, lsl #6
    a334:	70340000 	eorsvc	r0, r4, r0
    a338:	f2050053 	vqadd.s8	q0, <illegal reg q2.5>, <illegal reg q1.5>
    a33c:	21611401 	cmncs	r1, r1, lsl #8
    a340:	70340000 	eorsvc	r0, r4, r0
    a344:	f3050044 	vhadd.u8	q0, <illegal reg q2.5>, q2
    a348:	21671c01 	cmncs	r7, r1, lsl #24
    a34c:	74340000 	ldrtvc	r0, [r4], #-0
    a350:	f4050031 	vst4.8	{d0-d3}, [r5 :256], r1
    a354:	007f0d01 	rsbseq	r0, pc, r1, lsl #26
    a358:	74340000 	ldrtvc	r0, [r4], #-0
    a35c:	f4050032 	vst4.8	{d0-d3}, [r5 :256], r2
    a360:	007f1101 	rsbseq	r1, pc, r1, lsl #2
    a364:	74340000 	ldrtvc	r0, [r4], #-0
    a368:	f4050033 	vst4.8	{d0-d3}, [r5 :256], r3
    a36c:	007f1501 	rsbseq	r1, pc, r1, lsl #10
    a370:	74340000 	ldrtvc	r0, [r4], #-0
    a374:	f4050034 	vst4.8	{d0-d3}, [r5 :256], r4
    a378:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    a37c:	74340000 	ldrtvc	r0, [r4], #-0
    a380:	f4050035 	vst4.8	{d0-d3}, [r5 :256], r5
    a384:	007f1d01 	rsbseq	r1, pc, r1, lsl #26
    a388:	74340000 	ldrtvc	r0, [r4], #-0
    a38c:	f4050036 	vst4.8	{d0-d3}, [r5 :256], r6
    a390:	007f2101 	rsbseq	r2, pc, r1, lsl #2
    a394:	74340000 	ldrtvc	r0, [r4], #-0
    a398:	f4050037 	vst4.8	{d0-d3}, [r5 :256], r7
    a39c:	007f2501 	rsbseq	r2, pc, r1, lsl #10
    a3a0:	74340000 	ldrtvc	r0, [r4], #-0
    a3a4:	f4050038 	vst4.8	{d0-d3}, [r5 :256], r8
    a3a8:	007f2901 	rsbseq	r2, pc, r1, lsl #18
    a3ac:	d1270000 			; <UNDEFINED> instruction: 0xd1270000
    a3b0:	05000025 	streq	r0, [r0, #-37]	; 0xffffffdb
    a3b4:	7f0d01f5 	svcvc	0x000d01f5
    a3b8:	00000000 	andeq	r0, r0, r0
    a3bc:	008b0411 	addeq	r0, fp, r1, lsl r4
    a3c0:	04110000 	ldreq	r0, [r1], #-0
    a3c4:	00000097 	muleq	r0, r7, r0
    a3c8:	0023dd45 	eoreq	sp, r3, r5, asr #26
    a3cc:	012f0400 			; <UNDEFINED> instruction: 0x012f0400
    a3d0:	45030115 	strmi	r0, [r3, #-277]	; 0xfffffeeb
    a3d4:	000020a3 	andeq	r2, r0, r3, lsr #1
    a3d8:	15012204 	strne	r2, [r1, #-516]	; 0xfffffdfc
    a3dc:	50430301 	subpl	r0, r3, r1, lsl #6
    a3e0:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    a3e4:	01150111 	tsteq	r5, r1, lsl r1
    a3e8:	0021ad03 	eoreq	sl, r1, r3, lsl #26
    a3ec:	265c2700 	ldrbcs	r2, [ip], -r0, lsl #14
    a3f0:	13040000 	movwne	r0, #16384	; 0x4000
    a3f4:	09840d01 	stmibeq	r4, {r0, r8, sl, fp}
    a3f8:	1a270000 	bne	9ca400 <__ccfg+0x9aa458>
    a3fc:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    a400:	c60e0114 			; <UNDEFINED> instruction: 0xc60e0114
    a404:	0000000b 	andeq	r0, r0, fp
    a408:	00270745 	eoreq	r0, r7, r5, asr #14
    a40c:	010d0400 	tsteq	sp, r0, lsl #8
    a410:	43030115 	movwmi	r0, #12565	; 0x3115
    a414:	000026a0 	andeq	r2, r0, r0, lsr #13
    a418:	15010404 	strne	r0, [r1, #-1028]	; 0xfffffbfc
    a41c:	21d50301 	bicscs	r0, r5, r1, lsl #6
    a420:	24270000 	strtcs	r0, [r7], #-0
    a424:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    a428:	c60e0106 	strgt	r0, [lr], -r6, lsl #2
    a42c:	0000000b 	andeq	r0, r0, fp
    a430:	00238143 	eoreq	r8, r3, r3, asr #2
    a434:	011d0200 	tsteq	sp, r0, lsl #4
    a438:	f2030101 	vrhadd.s8	d0, d3, d1
    a43c:	44000021 	strmi	r0, [r0], #-33	; 0xffffffdf
    a440:	00002243 	andeq	r2, r0, r3, asr #4
    a444:	19011d02 	stmdbne	r1, {r1, r8, sl, fp, ip}
    a448:	0000007f 	andeq	r0, r0, pc, ror r0
    a44c:	212e3f00 			; <UNDEFINED> instruction: 0x212e3f00
    a450:	f7020000 			; <UNDEFINED> instruction: 0xf7020000
    a454:	0d030101 	stfeqs	f0, [r3, #-4]
    a458:	41000022 	tstmi	r0, r2, lsr #32
    a45c:	00002243 	andeq	r2, r0, r3, asr #4
    a460:	7f1bf702 	svcvc	0x001bf702
    a464:	00000000 	andeq	r0, r0, r0
    a468:	0021623f 	eoreq	r6, r1, pc, lsr r2
    a46c:	01aa0200 			; <UNDEFINED> instruction: 0x01aa0200
    a470:	22280301 	eorcs	r0, r8, #67108864	; 0x4000000
    a474:	43410000 	movtmi	r0, #4096	; 0x1000
    a478:	02000022 	andeq	r0, r0, #34	; 0x22
    a47c:	007f1baa 	rsbseq	r1, pc, sl, lsr #23
    a480:	46000000 	strmi	r0, [r0], -r0
    a484:	0000251b 	andeq	r2, r0, fp, lsl r5
    a488:	01019c02 	tsteq	r1, r2, lsl #24
    a48c:	275a4603 	ldrbcs	r4, [sl, -r3, lsl #12]
    a490:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
    a494:	47030101 	strmi	r0, [r3, -r1, lsl #2]
    a498:	0000205f 	andeq	r2, r0, pc, asr r0
    a49c:	000029e0 	andeq	r2, r0, r0, ror #19
    a4a0:	00002a28 	andeq	r2, r0, r8, lsr #20
    a4a4:	228b9c01 	addcs	r9, fp, #256	; 0x100
    a4a8:	6d480000 	stclvs	0, cr0, [r8, #-0]
    a4ac:	e3000020 	movw	r0, #32
    a4b0:	2d00002b 	stccs	0, cr0, [r0, #-172]	; 0xffffff54
    a4b4:	00002079 	andeq	r2, r0, r9, ror r0
    a4b8:	00002c01 	andeq	r2, r0, r1, lsl #24
    a4bc:	0020852c 	eoreq	r8, r0, ip, lsr #10
    a4c0:	205f4900 	subscs	r4, pc, r0, lsl #18
    a4c4:	29f60000 	ldmibcs	r6!, {}^	; <UNPREDICTABLE>
    a4c8:	29f80000 	ldmibcs	r8!, {}^	; <UNPREDICTABLE>
    a4cc:	c5010000 	strgt	r0, [r1, #-0]
    a4d0:	206d480d 	rsbcs	r4, sp, sp, lsl #16
    a4d4:	2c350000 	ldccs	0, cr0, [r5], #-0
    a4d8:	792c0000 	stmdbvc	ip!, {}	; <UNPREDICTABLE>
    a4dc:	2c000020 	stccs	0, cr0, [r0], {32}
    a4e0:	00002085 	andeq	r2, r0, r5, lsl #1
    a4e4:	e9470000 	stmdb	r7, {}^	; <UNPREDICTABLE>
    a4e8:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    a4ec:	4c00002a 	stcmi	0, cr0, [r0], {42}	; 0x2a
    a4f0:	0100002a 	tsteq	r0, sl, lsr #32
    a4f4:	0022b09c 	mlaeq	r2, ip, r0, fp
    a4f8:	1fe93600 	svcne	0x00e93600
    a4fc:	2a320000 	bcs	c8a504 <__ccfg+0xc6a55c>
    a500:	2a400000 	bcs	100a508 <__ccfg+0xfea560>
    a504:	95010000 	strls	r0, [r1, #-0]
    a508:	47000d01 	strmi	r0, [r0, -r1, lsl #26]
    a50c:	00002019 	andeq	r2, r0, r9, lsl r0
    a510:	00002a4c 	andeq	r2, r0, ip, asr #20
    a514:	00002aa8 	andeq	r2, r0, r8, lsr #21
    a518:	23199c01 	tstcs	r9, #256	; 0x100
    a51c:	194a0000 	stmdbne	sl, {}^	; <UNPREDICTABLE>
    a520:	56000020 	strpl	r0, [r0], -r0, lsr #32
    a524:	9200002a 	andls	r0, r0, #42	; 0x2a
    a528:	0100002a 	tsteq	r0, sl, lsr #32
    a52c:	2e0d0161 	adfcsez	f0, f5, f1
    a530:	00002228 	andeq	r2, r0, r8, lsr #4
    a534:	00002a56 	andeq	r2, r0, r6, asr sl
    a538:	00000d30 	andeq	r0, r0, r0, lsr sp
    a53c:	02016f01 	andeq	r6, r1, #1, 30
    a540:	00209238 	eoreq	r9, r0, r8, lsr r2
    a544:	002a7e00 	eoreq	r7, sl, r0, lsl #28
    a548:	002a8600 	eoreq	r8, sl, r0, lsl #12
    a54c:	017a0100 	cmneq	sl, r0, lsl #2
    a550:	00230002 	eoreq	r0, r3, r2
    a554:	20a13900 	adccs	r3, r1, r0, lsl #18
    a558:	4a000000 	bmi	a560 <__exidx_end+0x48a0>
    a55c:	00002092 	muleq	r0, r2, r0
    a560:	00002a86 	andeq	r2, r0, r6, lsl #21
    a564:	00002a8a 	andeq	r2, r0, sl, lsl #21
    a568:	02017a01 	andeq	r7, r1, #4096	; 0x1000
    a56c:	0020a139 	eoreq	sl, r0, r9, lsr r1
    a570:	00000000 	andeq	r0, r0, r0
    a574:	00202c47 	eoreq	r2, r0, r7, asr #24
    a578:	002aa800 	eoreq	sl, sl, r0, lsl #16
    a57c:	002ae000 	eoreq	lr, sl, r0
    a580:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    a584:	48000023 	stmdami	r0, {r0, r1, r5}
    a588:	0000203a 	andeq	r2, r0, sl, lsr r0
    a58c:	00002c48 	andeq	r2, r0, r8, asr #24
    a590:	00204648 	eoreq	r4, r0, r8, asr #12
    a594:	002c6600 	eoreq	r6, ip, r0, lsl #12
    a598:	20523900 	subscs	r3, r2, r0, lsl #18
    a59c:	4b000000 	blmi	a5a4 <__exidx_end+0x48e4>
    a5a0:	00002023 	andeq	r2, r0, r3, lsr #32
    a5a4:	00002ae0 	andeq	r2, r0, r0, ror #21
    a5a8:	00002c60 	andeq	r2, r0, r0, ror #24
    a5ac:	af2a9c01 	svcge	0x002a9c01
    a5b0:	e0000020 	and	r0, r0, r0, lsr #32
    a5b4:	5000002a 	andpl	r0, r0, sl, lsr #32
    a5b8:	0100000d 	tsteq	r0, sp
    a5bc:	6e020108 	adfvss	f0, f2, #0.0
    a5c0:	39000023 	stmdbcc	r0, {r0, r1, r5}
    a5c4:	000020be 	strheq	r2, [r0], -lr
    a5c8:	20af3800 	adccs	r3, pc, r0, lsl #16
    a5cc:	2aec0000 	bcs	ffb0a5d4 <_estack+0xdfb055d4>
    a5d0:	2af00000 	bcs	ffc0a5d8 <_estack+0xdfc055d8>
    a5d4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    a5d8:	23890201 	orrcs	r0, r9, #268435456	; 0x10000000
    a5dc:	be390000 	cdplt	0, 3, cr0, cr9, cr0, {0}
    a5e0:	00000020 	andeq	r0, r0, r0, lsr #32
    a5e4:	0022322e 	eoreq	r3, r2, lr, lsr #4
    a5e8:	002b0e00 	eoreq	r0, fp, r0, lsl #28
    a5ec:	000d6800 	andeq	r6, sp, r0, lsl #16
    a5f0:	011a0100 	tsteq	sl, r0, lsl #2
    a5f4:	216d2a02 	cmncs	sp, r2, lsl #20
    a5f8:	2b1c0000 	blcs	70a600 <__ccfg+0x6ea658>
    a5fc:	0d800000 	stceq	0, cr0, [r0]
    a600:	21010000 	mrscs	r0, (UNDEF: 1)
    a604:	240b0201 	strcs	r0, [fp], #-513	; 0xfffffdff
    a608:	783a0000 	ldmdavc	sl!, {}	; <UNPREDICTABLE>
    a60c:	1c000021 	stcne	0, cr0, [r0], {33}	; 0x21
    a610:	8000002b 	andhi	r0, r0, fp, lsr #32
    a614:	0400000d 	streq	r0, [r0], #-13
    a618:	38040131 	stmdacc	r4, {r0, r4, r5, r8}
    a61c:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
    a620:	00002b1c 	andeq	r2, r0, ip, lsl fp
    a624:	00002b28 	andeq	r2, r0, r8, lsr #22
    a628:	04012504 	streq	r2, [r1], #-1284	; 0xfffffafc
    a62c:	000023df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    a630:	0021c74c 	eoreq	ip, r1, ip, asr #14
    a634:	00041c00 	andeq	r1, r4, r0, lsl #24
    a638:	833a0021 	teqhi	sl, #33	; 0x21
    a63c:	28000021 	stmdacs	r0, {r0, r5}
    a640:	8800002b 	stmdahi	r0, {r0, r1, r3, r5}
    a644:	0400000d 	streq	r0, [r0], #-13
    a648:	2b040126 	blcs	10aae8 <__ccfg+0xeab40>
    a64c:	00000d88 	andeq	r0, r0, r8, lsl #27
    a650:	0021924c 	eoreq	r9, r1, ip, asr #4
    a654:	00034000 	andeq	r4, r3, r0
    a658:	219f4c21 	orrscs	r4, pc, r1, lsr #24
    a65c:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
    a660:	00002100 	andeq	r2, r0, r0, lsl #2
    a664:	cc3a0000 	ldcgt	0, cr0, [sl], #-0
    a668:	2c000020 	stccs	0, cr0, [r0], {32}
    a66c:	a000002b 	andge	r0, r0, fp, lsr #32
    a670:	0100000d 	tsteq	r0, sp
    a674:	2b020122 	blcs	8ab04 <__ccfg+0x6ab5c>
    a678:	00000da0 	andeq	r0, r0, r0, lsr #27
    a67c:	0020db2d 	eoreq	sp, r0, sp, lsr #22
    a680:	002c8400 	eoreq	r8, ip, r0, lsl #8
    a684:	20e72d00 	rsccs	r2, r7, r0, lsl #26
    a688:	2c970000 	ldccs	0, cr0, [r7], {0}
    a68c:	f32c0000 	vhadd.u32	d0, d12, d0
    a690:	2d000020 	stccs	0, cr0, [r0, #-128]	; 0xffffff80
    a694:	000020ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    a698:	00002cb5 			; <UNDEFINED> instruction: 0x00002cb5
    a69c:	00210b2c 	eoreq	r0, r1, ip, lsr #22
    a6a0:	21172d00 	tstcs	r7, r0, lsl #26
    a6a4:	2cc80000 	stclcs	0, cr0, [r8], {0}
    a6a8:	232c0000 			; <UNDEFINED> instruction: 0x232c0000
    a6ac:	2d000021 	stccs	0, cr0, [r0, #-132]	; 0xffffff7c
    a6b0:	0000212f 	andeq	r2, r0, pc, lsr #2
    a6b4:	00002cdb 	ldrdeq	r2, [r0], -fp
    a6b8:	00213b2d 	eoreq	r3, r1, sp, lsr #22
    a6bc:	002cee00 	eoreq	lr, ip, r0, lsl #28
    a6c0:	21472d00 	cmpcs	r7, r0, lsl #26
    a6c4:	2d190000 	ldccs	0, cr0, [r9, #-0]
    a6c8:	532c0000 			; <UNDEFINED> instruction: 0x532c0000
    a6cc:	00000021 	andeq	r0, r0, r1, lsr #32
    a6d0:	31000000 	mrscc	r0, (UNDEF: 0)
    a6d4:	03000007 	movweq	r0, #7
    a6d8:	0025ca00 	eoreq	ip, r5, r0, lsl #20
    a6dc:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    a6e0:	0c000000 	stceq	0, cr0, [r0], {-0}
    a6e4:	00002775 	andeq	r2, r0, r5, ror r7
    a6e8:	00000e0a 	andeq	r0, r0, sl, lsl #28
    a6ec:	00000f08 	andeq	r0, r0, r8, lsl #30
    a6f0:	00000000 	andeq	r0, r0, r0
    a6f4:	000063e4 	andeq	r6, r0, r4, ror #7
    a6f8:	5d060102 	stfpls	f0, [r6, #-8]
    a6fc:	0200000c 	andeq	r0, r0, #12
    a700:	0a6b0502 	beq	1acbb10 <__ccfg+0x1aabb68>
    a704:	04020000 	streq	r0, [r2], #-0
    a708:	0007fd05 	andeq	pc, r7, r5, lsl #26
    a70c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    a710:	000007f8 	strdeq	r0, [r0], -r8
    a714:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    a718:	172e0200 	strne	r0, [lr, -r0, lsl #4]!
    a71c:	0000004d 	andeq	r0, r0, sp, asr #32
    a720:	5b080102 	blpl	20ab30 <__ccfg+0x1eab88>
    a724:	0300000c 	movweq	r0, #12
    a728:	00002e12 	andeq	r2, r0, r2, lsl lr
    a72c:	601c3102 	andsvs	r3, ip, r2, lsl #2
    a730:	02000000 	andeq	r0, r0, #0
    a734:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    a738:	b4030000 	strlt	r0, [r3], #-0
    a73c:	02000029 	andeq	r0, r0, #41	; 0x29
    a740:	00731b34 	rsbseq	r1, r3, r4, lsr fp
    a744:	04020000 	streq	r0, [r2], #-0
    a748:	00042607 	andeq	r2, r4, r7, lsl #12
    a74c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    a750:	00000421 	andeq	r0, r0, r1, lsr #8
    a754:	69050404 	stmdbvs	r5, {r2, sl}
    a758:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    a75c:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    a760:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    a764:	03000005 	movweq	r0, #5
    a768:	009b1b28 	addseq	r1, fp, r8, lsr #22
    a76c:	90050000 	andls	r0, r5, r0
    a770:	0400000b 	streq	r0, [r0], #-11
    a774:	00b3000a 	adcseq	r0, r3, sl
    a778:	6d060000 	stcvs	0, cr0, [r6, #-0]
    a77c:	b3000008 	movwlt	r0, #8
    a780:	00000000 	andeq	r0, r0, r0
    a784:	04070001 	streq	r0, [r7], #-1
    a788:	000b9203 	andeq	r9, fp, r3, lsl #4
    a78c:	18630300 	stmdane	r3!, {r8, r9}^
    a790:	0000008f 	andeq	r0, r0, pc, lsl #1
    a794:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    a798:	12270400 	eorne	r0, r7, #0, 8
    a79c:	00000054 	andeq	r0, r0, r4, asr r0
    a7a0:	0000c108 	andeq	ip, r0, r8, lsl #2
    a7a4:	1dc20300 	stclne	3, cr0, [r2]
    a7a8:	2b040000 	blcs	10a7b0 <__ccfg+0xea808>
    a7ac:	00004111 	andeq	r4, r0, r1, lsl r1
    a7b0:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    a7b4:	4d030000 	stcmi	0, cr0, [r3, #-0]
    a7b8:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    a7bc:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    a7c0:	e3080000 	movw	r0, #32768	; 0x8000
    a7c4:	03000000 	movweq	r0, #0
    a7c8:	00000646 	andeq	r0, r0, r6, asr #12
    a7cc:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    a7d0:	03000000 	movweq	r0, #0
    a7d4:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    a7d8:	0c0f2e04 	stceq	14, cr2, [pc], {4}
    a7dc:	0a000001 	beq	a7e8 <__exidx_end+0x4b28>
    a7e0:	0000c104 	andeq	ip, r0, r4, lsl #2
    a7e4:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
    a7e8:	01a00932 	lsreq	r0, r2, r9
    a7ec:	340c0000 	strcc	r0, [ip], #-0
    a7f0:	04000000 	streq	r0, [r0], #-0
    a7f4:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    a7f8:	01010000 	mrseq	r0, (UNDEF: 1)
    a7fc:	4c0c0007 	stcmi	0, cr0, [ip], {7}
    a800:	04000006 	streq	r0, [r0], #-6
    a804:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    a808:	01010000 	mrseq	r0, (UNDEF: 1)
    a80c:	e70c0006 	str	r0, [ip, -r6]
    a810:	04000002 	streq	r0, [r0], #-2
    a814:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    a818:	01010000 	mrseq	r0, (UNDEF: 1)
    a81c:	b70c0005 	strlt	r0, [ip, -r5]
    a820:	04000006 	streq	r0, [r0], #-6
    a824:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    a828:	01010000 	mrseq	r0, (UNDEF: 1)
    a82c:	9f0c0004 	svcls	0x000c0004
    a830:	0400000a 	streq	r0, [r0], #-10
    a834:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    a838:	04010000 	streq	r0, [r1], #-0
    a83c:	5b0d0000 	blpl	34a844 <__ccfg+0x32a89c>
    a840:	04000006 	streq	r0, [r0], #-6
    a844:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    a848:	0d010000 	stceq	0, cr0, [r1, #-0]
    a84c:	000008fb 	strdeq	r0, [r0], -fp
    a850:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    a854:	02000000 	andeq	r0, r0, #0
    a858:	000f3a0d 	andeq	r3, pc, sp, lsl #20
    a85c:	033d0400 	teqeq	sp, #0, 8
    a860:	000000d2 	ldrdeq	r0, [r0], -r2
    a864:	09130d03 	ldmdbeq	r3, {r0, r1, r8, sl, fp}
    a868:	3f040000 	svccc	0x00040000
    a86c:	0000e308 	andeq	lr, r0, r8, lsl #6
    a870:	03000400 	movweq	r0, #1024	; 0x400
    a874:	0000031d 	andeq	r0, r0, sp, lsl r3
    a878:	12034104 	andne	r4, r3, #4, 2
    a87c:	09000001 	stmdbeq	r0, {r0}
    a880:	000001a0 	andeq	r0, r0, r0, lsr #3
    a884:	0006be0e 	andeq	fp, r6, lr, lsl #28
    a888:	1a430400 	bne	10cb890 <__ccfg+0x10ab8e8>
    a88c:	000001ac 	andeq	r0, r0, ip, lsr #3
    a890:	a00e0101 	andge	r0, lr, r1, lsl #2
    a894:	04000001 	streq	r0, [r0], #-1
    a898:	01cd0e45 	biceq	r0, sp, r5, asr #28
    a89c:	01010000 	mrseq	r0, (UNDEF: 1)
    a8a0:	01d3040a 	bicseq	r0, r3, sl, lsl #8
    a8a4:	01020000 	mrseq	r0, (UNDEF: 2)
    a8a8:	000c6408 	andeq	r6, ip, r8, lsl #8
    a8ac:	01d30800 	bicseq	r0, r3, r0, lsl #16
    a8b0:	260e0000 	strcs	r0, [lr], -r0
    a8b4:	04000003 	streq	r0, [r0], #-3
    a8b8:	01cd1e45 	biceq	r1, sp, r5, asr #28
    a8bc:	01010000 	mrseq	r0, (UNDEF: 1)
    a8c0:	8f05080b 	svchi	0x0005080b
    a8c4:	00021e09 	andeq	r1, r2, r9, lsl #28
    a8c8:	0cd80d00 	ldcleq	13, cr0, [r8], {0}
    a8cc:	90050000 	andls	r0, r5, r0
    a8d0:	0000670b 	andeq	r6, r0, fp, lsl #14
    a8d4:	750d0000 	strvc	r0, [sp, #-0]
    a8d8:	05000010 	streq	r0, [r0, #-16]
    a8dc:	00c10791 	smulleq	r0, r1, r1, r7
    a8e0:	0d040000 	stceq	0, cr0, [r4, #-0]
    a8e4:	000001c5 	andeq	r0, r0, r5, asr #3
    a8e8:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    a8ec:	06000000 	streq	r0, [r0], -r0
    a8f0:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    a8f4:	93050000 	movwls	r0, #20480	; 0x5000
    a8f8:	0001ed03 	andeq	lr, r1, r3, lsl #26
    a8fc:	021e0f00 	andseq	r0, lr, #0, 30
    a900:	02350000 	eorseq	r0, r5, #0
    a904:	00100000 	andseq	r0, r0, r0
    a908:	00093d0e 	andeq	r3, r9, lr, lsl #26
    a90c:	0f990500 	svceq	0x00990500
    a910:	0000022a 	andeq	r0, r0, sl, lsr #4
    a914:	010b0101 	tsteq	fp, r1, lsl #2
    a918:	6d099106 	stfvsd	f1, [r9, #-24]	; 0xffffffe8
    a91c:	0c000002 	stceq	0, cr0, [r0], {2}
    a920:	0000091a 	andeq	r0, r0, sl, lsl r9
    a924:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    a928:	01000000 	mrseq	r0, (UNDEF: 0)
    a92c:	0c000107 	stfeqs	f0, [r0], {7}
    a930:	000005cc 	andeq	r0, r0, ip, asr #11
    a934:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    a938:	01000000 	mrseq	r0, (UNDEF: 0)
    a93c:	00000001 	andeq	r0, r0, r1
    a940:	000aab03 	andeq	sl, sl, r3, lsl #22
    a944:	03960600 	orrseq	r0, r6, #0, 12
    a948:	00000243 	andeq	r0, r0, r3, asr #4
    a94c:	00026d08 	andeq	r6, r2, r8, lsl #26
    a950:	02790f00 	rsbseq	r0, r9, #0, 30
    a954:	02890000 	addeq	r0, r9, #0
    a958:	00100000 	andseq	r0, r0, r0
    a95c:	00027e08 	andeq	r7, r2, r8, lsl #28
    a960:	03aa0e00 			; <UNDEFINED> instruction: 0x03aa0e00
    a964:	9c060000 	stcls	0, cr0, [r6], {-0}
    a968:	00028917 	andeq	r8, r2, r7, lsl r9
    a96c:	0f010100 	svceq	0x00010100
    a970:	000000cd 	andeq	r0, r0, sp, asr #1
    a974:	000002a7 	andeq	r0, r0, r7, lsr #5
    a978:	9c080010 	stcls	0, cr0, [r8], {16}
    a97c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    a980:	0000060e 	andeq	r0, r0, lr, lsl #12
    a984:	a7130607 	ldrge	r0, [r3, -r7, lsl #12]
    a988:	01000002 	tsteq	r0, r2
    a98c:	08dd0e01 	ldmeq	sp, {r0, r9, sl, fp}^
    a990:	c3050000 	movwgt	r0, #20480	; 0x5000
    a994:	0000e30e 	andeq	lr, r0, lr, lsl #6
    a998:	11010100 	mrsne	r0, (UNDEF: 17)
    a99c:	00000c72 	andeq	r0, r0, r2, ror ip
    a9a0:	10016e08 	andne	r6, r1, r8, lsl #28
    a9a4:	000002d5 	ldrdeq	r0, [r0], -r5
    a9a8:	02db040a 	sbcseq	r0, fp, #167772160	; 0xa000000
    a9ac:	01120000 	tsteq	r2, r0
    a9b0:	000002e7 	andeq	r0, r0, r7, ror #5
    a9b4:	0000c113 	andeq	ip, r0, r3, lsl r1
    a9b8:	da0f0000 	ble	3ca9c0 <__ccfg+0x3aaa18>
    a9bc:	f2000001 	vhadd.s8	d0, d0, d1
    a9c0:	10000002 	andne	r0, r0, r2
    a9c4:	02e70800 	rsceq	r0, r7, #0, 16
    a9c8:	e6140000 	ldr	r0, [r4], -r0
    a9cc:	08000009 	stmdaeq	r0, {r0, r3}
    a9d0:	f213017f 	vbic	q0, <illegal reg q1.5>, <illegal reg q15.5>
    a9d4:	01000002 	tsteq	r0, r2
    a9d8:	03961401 	orrseq	r1, r6, #16777216	; 0x1000000
    a9dc:	82080000 	andhi	r0, r8, #0
    a9e0:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    a9e4:	01010000 	mrseq	r0, (UNDEF: 1)
    a9e8:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    a9ec:	00033909 	andeq	r3, r3, r9, lsl #18
    a9f0:	01cb0d00 	biceq	r0, fp, r0, lsl #26
    a9f4:	0f090000 	svceq	0x00090000
    a9f8:	0000c107 	andeq	ip, r0, r7, lsl #2
    a9fc:	a20d0000 	andge	r0, sp, #0
    aa00:	0900000c 	stmdbeq	r0, {r2, r3}
    aa04:	00c10310 	sbceq	r0, r1, r0, lsl r3
    aa08:	00020000 	andeq	r0, r2, r0
    aa0c:	000d7903 	andeq	r7, sp, r3, lsl #18
    aa10:	03110900 	tsteq	r1, #0, 18
    aa14:	00000315 	andeq	r0, r0, r5, lsl r3
    aa18:	1609200b 	strne	r2, [r9], -fp
    aa1c:	0003b709 	andeq	fp, r3, r9, lsl #14
    aa20:	04ac0d00 	strteq	r0, [ip], #3328	; 0xd00
    aa24:	17090000 	strne	r0, [r9, -r0]
    aa28:	0003d108 	andeq	sp, r3, r8, lsl #2
    aa2c:	0b0d0000 	bleq	34aa34 <__ccfg+0x32aa8c>
    aa30:	09000009 	stmdbeq	r0, {r0, r3}
    aa34:	03ec0818 	mvneq	r0, #24, 16	; 0x180000
    aa38:	0d040000 	stceq	0, cr0, [r4, #-0]
    aa3c:	00000bc6 	andeq	r0, r0, r6, asr #23
    aa40:	22081909 	andcs	r1, r8, #147456	; 0x24000
    aa44:	08000004 	stmdaeq	r0, {r2}
    aa48:	000c9a0d 	andeq	r9, ip, sp, lsl #20
    aa4c:	081a0900 	ldmdaeq	sl, {r8, fp}
    aa50:	0000043d 	andeq	r0, r0, sp, lsr r4
    aa54:	09620d0c 	stmdbeq	r2!, {r2, r3, r8, sl, fp}^
    aa58:	1b090000 	blne	24aa60 <__ccfg+0x22aab8>
    aa5c:	00045308 	andeq	r5, r4, r8, lsl #6
    aa60:	630d1000 	movwvs	r1, #53248	; 0xd000
    aa64:	0900000a 	stmdbeq	r0, {r1, r3}
    aa68:	0453081c 	ldrbeq	r0, [r3], #-2076	; 0xfffff7e4
    aa6c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    aa70:	000001ae 	andeq	r0, r0, lr, lsr #3
    aa74:	53081d09 	movwpl	r1, #36105	; 0x8d09
    aa78:	18000004 	stmdane	r0, {r2}
    aa7c:	0003140d 	andeq	r1, r3, sp, lsl #8
    aa80:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    aa84:	00000081 	andeq	r0, r0, r1, lsl #1
    aa88:	0115001c 	tsteq	r5, ip, lsl r0
    aa8c:	00000081 	andeq	r0, r0, r1, lsl #1
    aa90:	000003d1 	ldrdeq	r0, [r0], -r1
    aa94:	00008113 	andeq	r8, r0, r3, lsl r1
    aa98:	00811300 	addeq	r1, r1, r0, lsl #6
    aa9c:	b5130000 	ldrlt	r0, [r3, #-0]
    aaa0:	00000000 	andeq	r0, r0, r0
    aaa4:	03b7040a 			; <UNDEFINED> instruction: 0x03b7040a
    aaa8:	01150000 	tsteq	r5, r0
    aaac:	00000081 	andeq	r0, r0, r1, lsl #1
    aab0:	000003ec 	andeq	r0, r0, ip, ror #7
    aab4:	00008113 	andeq	r8, r0, r3, lsl r1
    aab8:	00811300 	addeq	r1, r1, r0, lsl #6
    aabc:	0a000000 	beq	aac4 <__exidx_end+0x4e04>
    aac0:	0003d704 	andeq	sp, r3, r4, lsl #14
    aac4:	81011500 	tsthi	r1, r0, lsl #10
    aac8:	16000000 	strne	r0, [r0], -r0
    aacc:	13000004 	movwne	r0, #4
    aad0:	00000081 	andeq	r0, r0, r1, lsl #1
    aad4:	00010013 	andeq	r0, r1, r3, lsl r0
    aad8:	00811300 	addeq	r1, r1, r0, lsl #6
    aadc:	16130000 	ldrne	r0, [r3], -r0
    aae0:	13000004 	movwne	r0, #4
    aae4:	0000041c 	andeq	r0, r0, ip, lsl r4
    aae8:	81040a00 	tsthi	r4, r0, lsl #20
    aaec:	0a000000 	beq	aaf4 <__exidx_end+0x4e34>
    aaf0:	00033904 	andeq	r3, r3, r4, lsl #18
    aaf4:	f2040a00 	vpmax.s8	d0, d4, d0
    aaf8:	15000003 	strne	r0, [r0, #-3]
    aafc:	00008101 	andeq	r8, r0, r1, lsl #2
    ab00:	00043d00 	andeq	r3, r4, r0, lsl #26
    ab04:	01001300 	mrseq	r1, LR_irq
    ab08:	1c130000 	ldcne	0, cr0, [r3], {-0}
    ab0c:	00000004 	andeq	r0, r0, r4
    ab10:	0428040a 	strteq	r0, [r8], #-1034	; 0xfffffbf6
    ab14:	01150000 	tsteq	r5, r0
    ab18:	00000081 	andeq	r0, r0, r1, lsl #1
    ab1c:	00000453 	andeq	r0, r0, r3, asr r4
    ab20:	00010013 	andeq	r0, r1, r3, lsl r0
    ab24:	040a0000 	streq	r0, [sl], #-0
    ab28:	00000443 	andeq	r0, r0, r3, asr #8
    ab2c:	000d3503 	andeq	r3, sp, r3, lsl #10
    ab30:	031f0900 	tsteq	pc, #0, 18
    ab34:	00000345 	andeq	r0, r0, r5, asr #6
    ab38:	00045908 	andeq	r5, r4, r8, lsl #18
    ab3c:	036e1400 	cmneq	lr, #0, 8
    ab40:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    ab44:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    ab48:	01010000 	mrseq	r0, (UNDEF: 1)
    ab4c:	03080816 	movweq	r0, #34838	; 0x8816
    ab50:	04a00903 	strteq	r0, [r0], #2307	; 0x903
    ab54:	a1170000 	tstge	r7, r0
    ab58:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    ab5c:	c1070307 	tstgt	r7, r7, lsl #6
    ab60:	00000000 	andeq	r0, r0, r0
    ab64:	000fcd17 	andeq	ip, pc, r7, lsl sp	; <UNPREDICTABLE>
    ab68:	03080800 	movweq	r0, #34816	; 0x8800
    ab6c:	0000f408 	andeq	pc, r0, r8, lsl #8
    ab70:	11000400 	tstne	r0, r0, lsl #8
    ab74:	00000a09 	andeq	r0, r0, r9, lsl #20
    ab78:	03030908 	movweq	r0, #14600	; 0x3908
    ab7c:	00000479 	andeq	r0, r0, r9, ror r4
    ab80:	00002918 	andeq	r2, r0, r8, lsl r9
    ab84:	0b083000 	bleq	216b8c <__ccfg+0x1f6be4>
    ab88:	05100803 	ldreq	r0, [r0, #-2051]	; 0xfffff7fd
    ab8c:	24170000 	ldrcs	r0, [r7], #-0
    ab90:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    ab94:	c1070314 	tstgt	r7, r4, lsl r3
    ab98:	00000000 	andeq	r0, r0, r0
    ab9c:	000be717 	andeq	lr, fp, r7, lsl r7
    aba0:	03150800 	tsteq	r5, #0, 16
    aba4:	0000c107 	andeq	ip, r0, r7, lsl #2
    aba8:	8e170200 	cdphi	2, 1, cr0, cr7, cr0, {0}
    abac:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    abb0:	c80a0316 	stmdagt	sl, {r1, r2, r4, r8, r9}
    abb4:	04000002 	streq	r0, [r0], #-2
    abb8:	00475417 	subeq	r5, r7, r7, lsl r4
    abbc:	03170800 	tsteq	r7, #0, 16
    abc0:	0000f408 	andeq	pc, r0, r8, lsl #8
    abc4:	0f170800 	svceq	0x00170800
    abc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    abcc:	100f0318 	andne	r0, pc, r8, lsl r3	; <UNPREDICTABLE>
    abd0:	0c000005 	stceq	0, cr0, [r0], {5}
    abd4:	00095d17 	andeq	r5, r9, r7, lsl sp
    abd8:	03190800 	tsteq	r9, #0, 16
    abdc:	00052015 	andeq	r2, r5, r5, lsl r0
    abe0:	0f002c00 	svceq	0x00002c00
    abe4:	000004a0 	andeq	r0, r0, r0, lsr #9
    abe8:	00000520 	andeq	r0, r0, r0, lsr #10
    abec:	00008819 	andeq	r8, r0, r9, lsl r8
    abf0:	0a000300 	beq	b7f8 <__exidx_end+0x5b38>
    abf4:	0004ad04 	andeq	sl, r4, r4, lsl #26
    abf8:	0bdc1100 	bleq	ff70f000 <_estack+0xdf70a000>
    abfc:	1c080000 	stcne	0, cr0, [r8], {-0}
    ac00:	04ad1b03 	strteq	r1, [sp], #2819	; 0xb03
    ac04:	bc140000 	ldclt	0, cr0, [r4], {-0}
    ac08:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    ac0c:	4214031e 	andsmi	r0, r4, #2013265920	; 0x78000000
    ac10:	01000005 	tsteq	r0, r5
    ac14:	26040a01 	strcs	r0, [r4], -r1, lsl #20
    ac18:	1a000005 	bne	ac34 <__exidx_end+0x4f74>
    ac1c:	00000016 	andeq	r0, r0, r6, lsl r0
    ac20:	65111a01 	ldrvs	r1, [r1, #-2561]	; 0xfffff5ff
    ac24:	01000004 	tsteq	r0, r4
    ac28:	5ca00305 	stcpl	3, cr0, [r0], #20
    ac2c:	db1b0000 	blle	6cac34 <__ccfg+0x6aac8c>
    ac30:	01000027 	tsteq	r0, r7, lsr #32
    ac34:	04160d1f 	ldreq	r0, [r6], #-3359	; 0xfffff2e1
    ac38:	03050000 	movweq	r0, #20480	; 0x5000
    ac3c:	200005f8 	strdcs	r0, [r0], -r8
    ac40:	0027c71c 	eoreq	ip, r7, ip, lsl r7
    ac44:	0c580100 	ldfeqe	f0, [r8], {-0}
    ac48:	00008101 	andeq	r8, r0, r1, lsl #2
    ac4c:	00315800 	eorseq	r5, r1, r0, lsl #16
    ac50:	00315c00 	eorseq	r5, r1, r0, lsl #24
    ac54:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    ac58:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    ac5c:	58010070 	stmdapl	r1, {r4, r5, r6}
    ac60:	00010022 	andeq	r0, r1, r2, lsr #32
    ac64:	002d2c00 	eoreq	r2, sp, r0, lsl #24
    ac68:	861c0000 	ldrhi	r0, [ip], -r0
    ac6c:	01000027 	tsteq	r0, r7, lsr #32
    ac70:	81010c52 	tsthi	r1, r2, asr ip
    ac74:	54000000 	strpl	r0, [r0], #-0
    ac78:	58000031 	stmdapl	r0, {r0, r4, r5}
    ac7c:	01000031 	tsteq	r0, r1, lsr r0
    ac80:	0005c19c 	muleq	r5, ip, r1
    ac84:	00701d00 	rsbseq	r1, r0, r0, lsl #26
    ac88:	00225201 	eoreq	r5, r2, r1, lsl #4
    ac8c:	3f000001 	svccc	0x00000001
    ac90:	0000002d 	andeq	r0, r0, sp, lsr #32
    ac94:	0027ad1c 	eoreq	sl, r7, ip, lsl sp
    ac98:	0c4d0100 	stfeqe	f0, [sp], {-0}
    ac9c:	00008101 	andeq	r8, r0, r1, lsl #2
    aca0:	00314c00 	eorseq	r4, r1, r0, lsl #24
    aca4:	00315400 	eorseq	r5, r1, r0, lsl #8
    aca8:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    acac:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    acb0:	4d010070 	stcmi	0, cr0, [r1, #-448]	; 0xfffffe40
    acb4:	00010022 	andeq	r0, r1, r2, lsr #32
    acb8:	002d5200 	eoreq	r5, sp, r0, lsl #4
    acbc:	27d41e00 	ldrbcs	r1, [r4, r0, lsl #28]
    acc0:	4d010000 	stcmi	0, cr0, [r1, #-0]
    acc4:	00041c2f 	andeq	r1, r4, pc, lsr #24
    acc8:	00510100 	subseq	r0, r1, r0, lsl #2
    accc:	0027931c 	eoreq	r9, r7, ip, lsl r3
    acd0:	0c420100 	stfeqe	f0, [r2], {-0}
    acd4:	00008101 	andeq	r8, r0, r1, lsl #2
    acd8:	00312800 	eorseq	r2, r1, r0, lsl #16
    acdc:	00314c00 	eorseq	r4, r1, r0, lsl #24
    ace0:	629c0100 	addsvs	r0, ip, #0, 2
    ace4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    ace8:	00796870 	rsbseq	r6, r9, r0, ror r8
    acec:	811e4201 	tsthi	lr, r1, lsl #4
    acf0:	65000000 	strvs	r0, [r0, #-0]
    acf4:	1d00002d 	stcne	0, cr0, [r0, #-180]	; 0xffffff4c
    acf8:	42010070 	andmi	r0, r1, #112	; 0x70
    acfc:	0001002b 	andeq	r0, r1, fp, lsr #32
    ad00:	002d8300 	eoreq	r8, sp, r0, lsl #6
    ad04:	656c1d00 	strbvs	r1, [ip, #-3328]!	; 0xfffff300
    ad08:	4201006e 	andmi	r0, r1, #110	; 0x6e
    ad0c:	00008132 	andeq	r8, r0, r2, lsr r1
    ad10:	002d9600 	eoreq	r9, sp, r0, lsl #12
    ad14:	65731d00 	ldrbvs	r1, [r3, #-3328]!	; 0xfffff300
    ad18:	42010073 	andmi	r0, r1, #115	; 0x73
    ad1c:	0004163c 	andeq	r1, r4, ip, lsr r6
    ad20:	002da900 	eoreq	sl, sp, r0, lsl #18
    ad24:	27d41e00 	ldrbcs	r1, [r4, r0, lsl #28]
    ad28:	43010000 	movwmi	r0, #4096	; 0x1000
    ad2c:	00041c17 	andeq	r1, r4, r7, lsl ip
    ad30:	00910200 	addseq	r0, r1, r0, lsl #4
    ad34:	27ba1c00 	ldrcs	r1, [sl, r0, lsl #24]!
    ad38:	37010000 	strcc	r0, [r1, -r0]
    ad3c:	0081010c 	addeq	r0, r1, ip, lsl #2
    ad40:	31040000 	mrscc	r0, (UNDEF: 4)
    ad44:	31280000 			; <UNDEFINED> instruction: 0x31280000
    ad48:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad4c:	0000069b 	muleq	r0, fp, r6
    ad50:	7968701d 	stmdbvc	r8!, {r0, r2, r3, r4, ip, sp, lr}^
    ad54:	1e370100 	rsfnes	f0, f7, f0
    ad58:	00000081 	andeq	r0, r0, r1, lsl #1
    ad5c:	00002dbc 			; <UNDEFINED> instruction: 0x00002dbc
    ad60:	0064661f 	rsbeq	r6, r4, pc, lsl r6
    ad64:	81273701 			; <UNDEFINED> instruction: 0x81273701
    ad68:	01000000 	mrseq	r0, (UNDEF: 0)
    ad6c:	a0200051 	eorge	r0, r0, r1, asr r0
    ad70:	01000027 	tsteq	r0, r7, lsr #32
    ad74:	81010c21 	tsthi	r1, r1, lsr #24
    ad78:	01000000 	mrseq	r0, (UNDEF: 0)
    ad7c:	000006db 	ldrdeq	r0, [r0], -fp
    ad80:	79687021 	stmdbvc	r8!, {r0, r5, ip, sp, lr}^
    ad84:	1e210100 	sufnes	f0, f1, f0
    ad88:	00000081 	andeq	r0, r0, r1, lsl #1
    ad8c:	00646621 	rsbeq	r6, r4, r1, lsr #12
    ad90:	81272101 			; <UNDEFINED> instruction: 0x81272101
    ad94:	22000000 	andcs	r0, r0, #0
    ad98:	000018af 	andeq	r1, r0, pc, lsr #17
    ad9c:	b5332101 	ldrlt	r2, [r3, #-257]!	; 0xfffffeff
    ada0:	23000000 	movwcs	r0, #0
    ada4:	25010069 	strcs	r0, [r1, #-105]	; 0xffffff97
    ada8:	00008106 	andeq	r8, r0, r6, lsl #2
    adac:	9b240000 	blls	90adb4 <__ccfg+0x8eae0c>
    adb0:	5c000006 	stcpl	0, cr0, [r0], {6}
    adb4:	a4000031 	strge	r0, [r0], #-49	; 0xffffffcf
    adb8:	01000031 	tsteq	r0, r1, lsr r0
    adbc:	06ad259c 	ssateq	r2, #14, ip, lsl #11
    adc0:	2dda0000 	ldclcs	0, cr0, [sl]
    adc4:	b9250000 	stmdblt	r5!, {}	; <UNPREDICTABLE>
    adc8:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
    adcc:	2500002d 	strcs	r0, [r0, #-45]	; 0xffffffd3
    add0:	000006c4 	andeq	r0, r0, r4, asr #13
    add4:	00002e16 	andeq	r2, r0, r6, lsl lr
    add8:	0006d026 	andeq	sp, r6, r6, lsr #32
    addc:	069b2700 	ldreq	r2, [fp], r0, lsl #14
    ade0:	31920000 	orrscc	r0, r2, r0
    ade4:	31a40000 			; <UNDEFINED> instruction: 0x31a40000
    ade8:	21010000 	mrscs	r0, (UNDEF: 1)
    adec:	06ad280c 	strteq	r2, [sp], ip, lsl #16
    adf0:	55010000 	strpl	r0, [r1, #-0]
    adf4:	0006b928 	andeq	fp, r6, r8, lsr #18
    adf8:	29560100 	ldmdbcs	r6, {r8}^
    adfc:	000006c4 	andeq	r0, r0, r4, asr #13
    ae00:	0006d026 	andeq	sp, r6, r6, lsr #32
    ae04:	00000000 	andeq	r0, r0, r0
    ae08:	0000042d 	andeq	r0, r0, sp, lsr #8
    ae0c:	27fc0003 	ldrbcs	r0, [ip, r3]!
    ae10:	01040000 	mrseq	r0, (UNDEF: 4)
    ae14:	000000ac 	andeq	r0, r0, ip, lsr #1
    ae18:	0027eb0c 	eoreq	lr, r7, ip, lsl #22
    ae1c:	000e0a00 	andeq	r0, lr, r0, lsl #20
    ae20:	000f5800 	andeq	r5, pc, r0, lsl #16
    ae24:	00000000 	andeq	r0, r0, r0
    ae28:	00669300 	rsbeq	r9, r6, r0, lsl #6
    ae2c:	06010200 	streq	r0, [r1], -r0, lsl #4
    ae30:	00000c5d 	andeq	r0, r0, sp, asr ip
    ae34:	6b050202 	blvs	14b644 <__ccfg+0x12b69c>
    ae38:	0200000a 	andeq	r0, r0, #10
    ae3c:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    ae40:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    ae44:	0007f805 	andeq	pc, r7, r5, lsl #16
    ae48:	2a1c0300 	bcs	70ba50 <__ccfg+0x6ebaa8>
    ae4c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    ae50:	00004d18 	andeq	r4, r0, r8, lsl sp
    ae54:	08010200 	stmdaeq	r1, {r9}
    ae58:	00000c5b 	andeq	r0, r0, fp, asr ip
    ae5c:	002e1203 	eoreq	r1, lr, r3, lsl #4
    ae60:	19310200 	ldmdbne	r1!, {r9}
    ae64:	00000060 	andeq	r0, r0, r0, rrx
    ae68:	66070202 	strvs	r0, [r7], -r2, lsl #4
    ae6c:	0300000d 	movweq	r0, #13
    ae70:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    ae74:	73193402 	tstvc	r9, #33554432	; 0x2000000
    ae78:	02000000 	andeq	r0, r0, #0
    ae7c:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    ae80:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    ae84:	00042107 	andeq	r2, r4, r7, lsl #2
    ae88:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    ae8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    ae90:	2b070402 	blcs	1cbea0 <__ccfg+0x1abef8>
    ae94:	03000004 	movweq	r0, #4
    ae98:	000028fb 	strdeq	r2, [r0], -fp
    ae9c:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    aea0:	05000000 	streq	r0, [r0, #-0]
    aea4:	0000008f 	andeq	r0, r0, pc, lsl #1
    aea8:	001dc203 	andseq	ip, sp, r3, lsl #4
    aeac:	122b0300 	eorne	r0, fp, #0, 6
    aeb0:	00000041 	andeq	r0, r0, r1, asr #32
    aeb4:	0000a006 	andeq	sl, r0, r6
    aeb8:	294d0300 	stmdbcs	sp, {r8, r9}^
    aebc:	2c030000 	stccs	0, cr0, [r3], {-0}
    aec0:	00006712 	andeq	r6, r0, r2, lsl r7
    aec4:	00b10500 	adcseq	r0, r1, r0, lsl #10
    aec8:	46030000 	strmi	r0, [r3], -r0
    aecc:	03000006 	movweq	r0, #6
    aed0:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    aed4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    aed8:	5c093203 	sfmpl	f3, 4, [r9], {3}
    aedc:	08000001 	stmdaeq	r0, {r0}
    aee0:	00000034 	andeq	r0, r0, r4, lsr r0
    aee4:	a0073403 	andge	r3, r7, r3, lsl #8
    aee8:	01000000 	mrseq	r0, (UNDEF: 0)
    aeec:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    aef0:	0000064c 	andeq	r0, r0, ip, asr #12
    aef4:	a0033503 	andge	r3, r3, r3, lsl #10
    aef8:	01000000 	mrseq	r0, (UNDEF: 0)
    aefc:	08000601 	stmdaeq	r0, {r0, r9, sl}
    af00:	000002e7 	andeq	r0, r0, r7, ror #5
    af04:	a0033603 	andge	r3, r3, r3, lsl #12
    af08:	01000000 	mrseq	r0, (UNDEF: 0)
    af0c:	08000501 	stmdaeq	r0, {r0, r8, sl}
    af10:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    af14:	a0033703 	andge	r3, r3, r3, lsl #14
    af18:	01000000 	mrseq	r0, (UNDEF: 0)
    af1c:	08000401 	stmdaeq	r0, {r0, sl}
    af20:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    af24:	a0033803 	andge	r3, r3, r3, lsl #16
    af28:	01000000 	mrseq	r0, (UNDEF: 0)
    af2c:	09000004 	stmdbeq	r0, {r2}
    af30:	0000065b 	andeq	r0, r0, fp, asr r6
    af34:	a0073a03 	andge	r3, r7, r3, lsl #20
    af38:	01000000 	mrseq	r0, (UNDEF: 0)
    af3c:	0008fb09 	andeq	pc, r8, r9, lsl #22
    af40:	033c0300 	teqeq	ip, #0, 6
    af44:	000000a0 	andeq	r0, r0, r0, lsr #1
    af48:	0f3a0902 	svceq	0x003a0902
    af4c:	3d030000 	stccc	0, cr0, [r3, #-0]
    af50:	0000a003 	andeq	sl, r0, r3
    af54:	13090300 	movwne	r0, #37632	; 0x9300
    af58:	03000009 	movweq	r0, #9
    af5c:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    af60:	00040000 	andeq	r0, r4, r0
    af64:	00031d03 	andeq	r1, r3, r3, lsl #26
    af68:	03410300 	movteq	r0, #4864	; 0x1300
    af6c:	000000ce 	andeq	r0, r0, lr, asr #1
    af70:	00015c06 	andeq	r5, r1, r6, lsl #24
    af74:	06be0a00 	ldrteq	r0, [lr], r0, lsl #20
    af78:	43030000 	movwmi	r0, #12288	; 0x3000
    af7c:	0001681a 	andeq	r6, r1, sl, lsl r8
    af80:	0a010100 	beq	4b388 <__ccfg+0x2b3e0>
    af84:	000001a0 	andeq	r0, r0, r0, lsr #3
    af88:	890e4503 	stmdbhi	lr, {r0, r1, r8, sl, lr}
    af8c:	01000001 	tsteq	r0, r1
    af90:	8f040b01 	svchi	0x00040b01
    af94:	02000001 	andeq	r0, r0, #1
    af98:	0c640801 	stcleq	8, cr0, [r4], #-4
    af9c:	8f050000 	svchi	0x00050000
    afa0:	0a000001 	beq	afac <__exidx_end+0x52ec>
    afa4:	00000326 	andeq	r0, r0, r6, lsr #6
    afa8:	891e4503 	ldmdbhi	lr, {r0, r1, r8, sl, lr}
    afac:	01000001 	tsteq	r0, r1
    afb0:	04080701 	streq	r0, [r8], #-1793	; 0xfffff8ff
    afb4:	01da098f 	bicseq	r0, sl, pc, lsl #19
    afb8:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    afbc:	0400000c 	streq	r0, [r0], #-12
    afc0:	00670b90 	mlseq	r7, r0, fp, r0
    afc4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    afc8:	00001075 	andeq	r1, r0, r5, ror r0
    afcc:	8f089104 	svchi	0x00089104
    afd0:	04000000 	streq	r0, [r0], #-0
    afd4:	0001c509 	andeq	ip, r1, r9, lsl #10
    afd8:	10920400 	addsne	r0, r2, r0, lsl #8
    afdc:	000000ac 	andeq	r0, r0, ip, lsr #1
    afe0:	cc030006 	stcgt	0, cr0, [r3], {6}
    afe4:	0400000c 	streq	r0, [r0], #-12
    afe8:	01a90393 			; <UNDEFINED> instruction: 0x01a90393
    afec:	da0c0000 	ble	30aff4 <__ccfg+0x2eb04c>
    aff0:	f1000001 	cps	#1
    aff4:	0d000001 	stceq	0, cr0, [r0, #-4]
    aff8:	093d0a00 	ldmdbeq	sp!, {r9, fp}
    affc:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    b000:	0001e60f 	andeq	lr, r1, pc, lsl #12
    b004:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b008:	09910501 	ldmibeq	r1, {r0, r8, sl}
    b00c:	00000229 	andeq	r0, r0, r9, lsr #4
    b010:	00091a08 	andeq	r1, r9, r8, lsl #20
    b014:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    b018:	000000a0 	andeq	r0, r0, r0, lsr #1
    b01c:	00010701 	andeq	r0, r1, r1, lsl #14
    b020:	0005cc08 	andeq	ip, r5, r8, lsl #24
    b024:	03940500 	orrseq	r0, r4, #0, 10
    b028:	000000a0 	andeq	r0, r0, r0, lsr #1
    b02c:	00000101 	andeq	r0, r0, r1, lsl #2
    b030:	0aab0300 	beq	feacbc38 <_estack+0xdeac6c38>
    b034:	96050000 	strls	r0, [r5], -r0
    b038:	0001ff03 	andeq	pc, r1, r3, lsl #30
    b03c:	02290500 	eoreq	r0, r9, #0, 10
    b040:	350c0000 	strcc	r0, [ip, #-0]
    b044:	45000002 	strmi	r0, [r0, #-2]
    b048:	0d000002 	stceq	0, cr0, [r0, #-8]
    b04c:	023a0500 	eorseq	r0, sl, #0, 10
    b050:	aa0a0000 	bge	28b058 <__ccfg+0x26b0b0>
    b054:	05000003 	streq	r0, [r0, #-3]
    b058:	0245179c 	subeq	r1, r5, #156, 14	; 0x2700000
    b05c:	01010000 	mrseq	r0, (UNDEF: 1)
    b060:	00009b0c 	andeq	r9, r0, ip, lsl #22
    b064:	00026300 	andeq	r6, r2, r0, lsl #6
    b068:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b06c:	00000258 	andeq	r0, r0, r8, asr r2
    b070:	00060e0a 	andeq	r0, r6, sl, lsl #28
    b074:	13060600 	movwne	r0, #26112	; 0x6600
    b078:	00000263 	andeq	r0, r0, r3, ror #4
    b07c:	dd0a0101 	stfles	f0, [sl, #-4]
    b080:	04000008 	streq	r0, [r0], #-8
    b084:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    b088:	01010000 	mrseq	r0, (UNDEF: 1)
    b08c:	000c720e 	andeq	r7, ip, lr, lsl #4
    b090:	016e0700 	cmneq	lr, r0, lsl #14
    b094:	00029110 	andeq	r9, r2, r0, lsl r1
    b098:	97040b00 	strls	r0, [r4, -r0, lsl #22]
    b09c:	0f000002 	svceq	0x00000002
    b0a0:	0002a301 	andeq	sl, r2, r1, lsl #6
    b0a4:	008f1000 	addeq	r1, pc, r0
    b0a8:	0c000000 	stceq	0, cr0, [r0], {-0}
    b0ac:	00000196 	muleq	r0, r6, r1
    b0b0:	000002ae 	andeq	r0, r0, lr, lsr #5
    b0b4:	a305000d 	movwge	r0, #20493	; 0x500d
    b0b8:	11000002 	tstne	r0, r2
    b0bc:	000009e6 	andeq	r0, r0, r6, ror #19
    b0c0:	16017f07 	strne	r7, [r1], -r7, lsl #30
    b0c4:	000002ae 	andeq	r0, r0, lr, lsr #5
    b0c8:	96110101 	ldrls	r0, [r1], -r1, lsl #2
    b0cc:	07000003 	streq	r0, [r0, -r3]
    b0d0:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    b0d4:	01000000 	mrseq	r0, (UNDEF: 0)
    b0d8:	036e1101 	cmneq	lr, #1073741824	; 0x40000000
    b0dc:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    b0e0:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    b0e4:	01010000 	mrseq	r0, (UNDEF: 1)
    b0e8:	03070812 	movweq	r0, #30738	; 0x7812
    b0ec:	03070903 	movweq	r0, #30979	; 0x7903
    b0f0:	a1130000 	tstge	r3, r0
    b0f4:	0700003c 	smladxeq	r0, ip, r0, r0
    b0f8:	8f070307 	svchi	0x00070307
    b0fc:	00000000 	andeq	r0, r0, r0
    b100:	000fcd13 	andeq	ip, pc, r3, lsl sp	; <UNPREDICTABLE>
    b104:	03080700 	movweq	r0, #34560	; 0x8700
    b108:	0000c208 	andeq	ip, r0, r8, lsl #4
    b10c:	0e000400 	cfcpyseq	mvf0, mvf0
    b110:	00000a09 	andeq	r0, r0, r9, lsl #20
    b114:	03030907 	movweq	r0, #14599	; 0x3907
    b118:	000002e0 	andeq	r0, r0, r0, ror #5
    b11c:	00002914 	andeq	r2, r0, r4, lsl r9
    b120:	0b073000 	bleq	1d7128 <__ccfg+0x1b7180>
    b124:	03770803 	cmneq	r7, #196608	; 0x30000
    b128:	24130000 	ldrcs	r0, [r3], #-0
    b12c:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    b130:	8f080314 	svchi	0x00080314
    b134:	00000000 	andeq	r0, r0, r0
    b138:	000be713 	andeq	lr, fp, r3, lsl r7
    b13c:	03150700 	tsteq	r5, #0, 14
    b140:	00008f08 	andeq	r8, r0, r8, lsl #30
    b144:	8e130200 	cdphi	2, 1, cr0, cr3, cr0, {0}
    b148:	0700004c 	streq	r0, [r0, -ip, asr #32]
    b14c:	840b0316 	strhi	r0, [fp], #-790	; 0xfffffcea
    b150:	04000002 	streq	r0, [r0], #-2
    b154:	00475413 	subeq	r5, r7, r3, lsl r4
    b158:	03170700 	tsteq	r7, #0, 14
    b15c:	0000c209 	andeq	ip, r0, r9, lsl #4
    b160:	0f130800 	svceq	0x00130800
    b164:	07000000 	streq	r0, [r0, -r0]
    b168:	770f0318 	smladvc	pc, r8, r3, r0	; <UNPREDICTABLE>
    b16c:	0c000003 	stceq	0, cr0, [r0], {3}
    b170:	00095d13 	andeq	r5, r9, r3, lsl sp
    b174:	03190700 	tsteq	r9, #0, 14
    b178:	00038715 	andeq	r8, r3, r5, lsl r7
    b17c:	0c002c00 	stceq	12, cr2, [r0], {-0}
    b180:	00000307 	andeq	r0, r0, r7, lsl #6
    b184:	00000387 	andeq	r0, r0, r7, lsl #7
    b188:	00008815 	andeq	r8, r0, r5, lsl r8
    b18c:	0b000300 	bleq	bd94 <__exidx_end+0x60d4>
    b190:	00031404 	andeq	r1, r3, r4, lsl #8
    b194:	0bdc0e00 	bleq	ff70e99c <_estack+0xdf70999c>
    b198:	1c070000 	stcne	0, cr0, [r7], {-0}
    b19c:	03141b03 	tsteq	r4, #3072	; 0xc00
    b1a0:	bc110000 	ldclt	0, cr0, [r1], {-0}
    b1a4:	0700000b 	streq	r0, [r0, -fp]
    b1a8:	a914031e 	ldmdbge	r4, {r1, r2, r3, r4, r8, r9}
    b1ac:	01000003 	tsteq	r0, r3
    b1b0:	8d040b01 	vstrhi	d0, [r4, #-4]
    b1b4:	16000003 	strne	r0, [r0], -r3
    b1b8:	00283001 	eoreq	r3, r8, r1
    b1bc:	011d0100 	tsteq	sp, r0, lsl #2
    b1c0:	0031a401 	eorseq	sl, r1, r1, lsl #8
    b1c4:	00321400 	eorseq	r1, r2, r0, lsl #8
    b1c8:	2a9c0100 	bcs	fe70b5d0 <_estack+0xde7065d0>
    b1cc:	17000004 	strne	r0, [r0, -r4]
    b1d0:	00000c33 	andeq	r0, r0, r3, lsr ip
    b1d4:	8f011d01 	svchi	0x00011d01
    b1d8:	34000000 	strcc	r0, [r0], #-0
    b1dc:	1800002e 	stmdane	r0, {r1, r2, r3, r5}
    b1e0:	00004754 	andeq	r4, r0, r4, asr r7
    b1e4:	2a011d01 	bcs	525f0 <__ccfg+0x32648>
    b1e8:	5d000004 	stcpl	0, cr0, [r0, #-16]
    b1ec:	1900002e 	stmdbne	r0, {r1, r2, r3, r5}
    b1f0:	0000283c 	andeq	r2, r0, ip, lsr r8
    b1f4:	1a013001 	bne	57200 <__ccfg+0x37258>
    b1f8:	00000f40 	andeq	r0, r0, r0, asr #30
    b1fc:	7274701b 	rsbsvc	r7, r4, #27
    b200:	15220100 	strne	r0, [r2, #-256]!	; 0xffffff00
    b204:	0000042a 	andeq	r0, r0, sl, lsr #8
    b208:	06000305 	streq	r0, [r0], -r5, lsl #6
    b20c:	6c1b2000 	ldcvs	0, cr2, [fp], {-0}
    b210:	01006e65 	tsteq	r0, r5, ror #28
    b214:	00810d23 	addeq	r0, r1, r3, lsr #26
    b218:	03050000 	movweq	r0, #20480	; 0x5000
    b21c:	200005fc 	strdcs	r0, [r0], -ip
    b220:	0027e518 	eoreq	lr, r7, r8, lsl r5
    b224:	06240100 	strteq	r0, [r4], -r0, lsl #2
    b228:	00000081 	andeq	r0, r0, r1, lsl #1
    b22c:	00002e87 	andeq	r2, r0, r7, lsl #29
    b230:	040b0000 	streq	r0, [fp], #-0
    b234:	00000196 	muleq	r0, r6, r1
    b238:	00044000 	andeq	r4, r4, r0
    b23c:	70000300 	andvc	r0, r0, r0, lsl #6
    b240:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    b244:	0000ac01 	andeq	sl, r0, r1, lsl #24
    b248:	28520c00 	ldmdacs	r2, {sl, fp}^
    b24c:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    b250:	0f880000 	svceq	0x00880000
    b254:	00000000 	andeq	r0, r0, r0
    b258:	683b0000 	ldmdavs	fp!, {}	; <UNPREDICTABLE>
    b25c:	01020000 	mrseq	r0, (UNDEF: 2)
    b260:	000c5d06 	andeq	r5, ip, r6, lsl #26
    b264:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    b268:	00000a6b 	andeq	r0, r0, fp, ror #20
    b26c:	fd050402 	stc2	4, cr0, [r5, #-8]
    b270:	02000007 	andeq	r0, r0, #7
    b274:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    b278:	1c030000 	stcne	0, cr0, [r3], {-0}
    b27c:	0200002a 	andeq	r0, r0, #42	; 0x2a
    b280:	004d182e 	subeq	r1, sp, lr, lsr #16
    b284:	01020000 	mrseq	r0, (UNDEF: 2)
    b288:	000c5b08 	andeq	r5, ip, r8, lsl #22
    b28c:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    b290:	31020000 	mrscc	r0, (UNDEF: 2)
    b294:	00006019 	andeq	r6, r0, r9, lsl r0
    b298:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b29c:	00000d66 	andeq	r0, r0, r6, ror #26
    b2a0:	0029b403 	eoreq	fp, r9, r3, lsl #8
    b2a4:	19340200 	ldmdbne	r4!, {r9}
    b2a8:	00000073 	andeq	r0, r0, r3, ror r0
    b2ac:	26070402 	strcs	r0, [r7], -r2, lsl #8
    b2b0:	02000004 	andeq	r0, r0, #4
    b2b4:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    b2b8:	04040000 	streq	r0, [r4], #-0
    b2bc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    b2c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b2c4:	0000042b 	andeq	r0, r0, fp, lsr #8
    b2c8:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    b2cc:	12270300 	eorne	r0, r7, #0, 6
    b2d0:	00000054 	andeq	r0, r0, r4, asr r0
    b2d4:	00008f05 	andeq	r8, r0, r5, lsl #30
    b2d8:	1dc20300 	stclne	3, cr0, [r2]
    b2dc:	2b030000 	blcs	cb2e4 <__ccfg+0xab33c>
    b2e0:	00004112 	andeq	r4, r0, r2, lsl r1
    b2e4:	00a00600 	adceq	r0, r0, r0, lsl #12
    b2e8:	4d030000 	stcmi	0, cr0, [r3, #-0]
    b2ec:	03000029 	movweq	r0, #41	; 0x29
    b2f0:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    b2f4:	b1050000 	mrslt	r0, (UNDEF: 5)
    b2f8:	03000000 	movweq	r0, #0
    b2fc:	00000646 	andeq	r0, r0, r6, asr #12
    b300:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    b304:	03000000 	movweq	r0, #0
    b308:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    b30c:	da102e03 	ble	416b20 <__ccfg+0x3f6b78>
    b310:	07000000 	streq	r0, [r0, -r0]
    b314:	00008f04 	andeq	r8, r0, r4, lsl #30
    b318:	03080800 	movweq	r0, #34816	; 0x8800
    b31c:	016e0932 	cmneq	lr, r2, lsr r9
    b320:	34090000 	strcc	r0, [r9], #-0
    b324:	03000000 	movweq	r0, #0
    b328:	00a00734 	adceq	r0, r0, r4, lsr r7
    b32c:	01010000 	mrseq	r0, (UNDEF: 1)
    b330:	4c090007 	stcmi	0, cr0, [r9], {7}
    b334:	03000006 	movweq	r0, #6
    b338:	00a00335 	adceq	r0, r0, r5, lsr r3
    b33c:	01010000 	mrseq	r0, (UNDEF: 1)
    b340:	e7090006 	str	r0, [r9, -r6]
    b344:	03000002 	movweq	r0, #2
    b348:	00a00336 	adceq	r0, r0, r6, lsr r3
    b34c:	01010000 	mrseq	r0, (UNDEF: 1)
    b350:	b7090005 	strlt	r0, [r9, -r5]
    b354:	03000006 	movweq	r0, #6
    b358:	00a00337 	adceq	r0, r0, r7, lsr r3
    b35c:	01010000 	mrseq	r0, (UNDEF: 1)
    b360:	9f090004 	svcls	0x00090004
    b364:	0300000a 	movweq	r0, #10
    b368:	00a00338 	adceq	r0, r0, r8, lsr r3
    b36c:	04010000 	streq	r0, [r1], #-0
    b370:	5b0a0000 	blpl	28b378 <__ccfg+0x26b3d0>
    b374:	03000006 	movweq	r0, #6
    b378:	00a0073a 	adceq	r0, r0, sl, lsr r7
    b37c:	0a010000 	beq	4b384 <__ccfg+0x2b3dc>
    b380:	000008fb 	strdeq	r0, [r0], -fp
    b384:	a0033c03 	andge	r3, r3, r3, lsl #24
    b388:	02000000 	andeq	r0, r0, #0
    b38c:	000f3a0a 	andeq	r3, pc, sl, lsl #20
    b390:	033d0300 	teqeq	sp, #0, 6
    b394:	000000a0 	andeq	r0, r0, r0, lsr #1
    b398:	09130a03 	ldmdbeq	r3, {r0, r1, r9, fp}
    b39c:	3f030000 	svccc	0x00030000
    b3a0:	0000b108 	andeq	fp, r0, r8, lsl #2
    b3a4:	03000400 	movweq	r0, #1024	; 0x400
    b3a8:	0000031d 	andeq	r0, r0, sp, lsl r3
    b3ac:	e0034103 	and	r4, r3, r3, lsl #2
    b3b0:	06000000 	streq	r0, [r0], -r0
    b3b4:	0000016e 	andeq	r0, r0, lr, ror #2
    b3b8:	0006be0b 	andeq	fp, r6, fp, lsl #28
    b3bc:	1a430300 	bne	10cbfc4 <__ccfg+0x10ac01c>
    b3c0:	0000017a 	andeq	r0, r0, sl, ror r1
    b3c4:	a00b0101 	andge	r0, fp, r1, lsl #2
    b3c8:	03000001 	movweq	r0, #1
    b3cc:	019b0e45 	orrseq	r0, fp, r5, asr #28
    b3d0:	01010000 	mrseq	r0, (UNDEF: 1)
    b3d4:	01a10407 			; <UNDEFINED> instruction: 0x01a10407
    b3d8:	01020000 	mrseq	r0, (UNDEF: 2)
    b3dc:	000c6408 	andeq	r6, ip, r8, lsl #8
    b3e0:	01a10500 			; <UNDEFINED> instruction: 0x01a10500
    b3e4:	260b0000 	strcs	r0, [fp], -r0
    b3e8:	03000003 	movweq	r0, #3
    b3ec:	019b1e45 	orrseq	r1, fp, r5, asr #28
    b3f0:	01010000 	mrseq	r0, (UNDEF: 1)
    b3f4:	8f040808 	svchi	0x00040808
    b3f8:	0001ec09 	andeq	lr, r1, r9, lsl #24
    b3fc:	0cd80a00 	vldmiaeq	r8, {s1-s0}
    b400:	90040000 	andls	r0, r4, r0
    b404:	0000670b 	andeq	r6, r0, fp, lsl #14
    b408:	750a0000 	strvc	r0, [sl, #-0]
    b40c:	04000010 	streq	r0, [r0], #-16
    b410:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    b414:	0a040000 	beq	10b41c <__ccfg+0xeb474>
    b418:	000001c5 	andeq	r0, r0, r5, asr #3
    b41c:	ac109204 	lfmge	f1, 1, [r0], {4}
    b420:	06000000 	streq	r0, [r0], -r0
    b424:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    b428:	93040000 	movwls	r0, #16384	; 0x4000
    b42c:	0001bb03 	andeq	fp, r1, r3, lsl #22
    b430:	01ec0c00 	mvneq	r0, r0, lsl #24
    b434:	02030000 	andeq	r0, r3, #0
    b438:	000d0000 	andeq	r0, sp, r0
    b43c:	00093d0b 	andeq	r3, r9, fp, lsl #26
    b440:	0f990400 	svceq	0x00990400
    b444:	000001f8 	strdeq	r0, [r0], -r8
    b448:	01080101 	tsteq	r8, r1, lsl #2
    b44c:	3b099105 	blcc	26f868 <__ccfg+0x24f8c0>
    b450:	09000002 	stmdbeq	r0, {r1}
    b454:	0000091a 	andeq	r0, r0, sl, lsl r9
    b458:	a0079305 	andge	r9, r7, r5, lsl #6
    b45c:	01000000 	mrseq	r0, (UNDEF: 0)
    b460:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    b464:	000005cc 	andeq	r0, r0, ip, asr #11
    b468:	a0039405 	andge	r9, r3, r5, lsl #8
    b46c:	01000000 	mrseq	r0, (UNDEF: 0)
    b470:	00000001 	andeq	r0, r0, r1
    b474:	000aab03 	andeq	sl, sl, r3, lsl #22
    b478:	03960500 	orrseq	r0, r6, #0, 10
    b47c:	00000211 	andeq	r0, r0, r1, lsl r2
    b480:	00023b05 	andeq	r3, r2, r5, lsl #22
    b484:	02470c00 	subeq	r0, r7, #0, 24
    b488:	02570000 	subseq	r0, r7, #0
    b48c:	000d0000 	andeq	r0, sp, r0
    b490:	00024c05 	andeq	r4, r2, r5, lsl #24
    b494:	03aa0b00 			; <UNDEFINED> instruction: 0x03aa0b00
    b498:	9c050000 	stcls	0, cr0, [r5], {-0}
    b49c:	00025717 	andeq	r5, r2, r7, lsl r7
    b4a0:	0c010100 	stfeqs	f0, [r1], {-0}
    b4a4:	0000009b 	muleq	r0, fp, r0
    b4a8:	00000275 	andeq	r0, r0, r5, ror r2
    b4ac:	6a05000d 	bvs	14b4e8 <__ccfg+0x12b540>
    b4b0:	0b000002 	bleq	b4c0 <__exidx_end+0x5800>
    b4b4:	0000060e 	andeq	r0, r0, lr, lsl #12
    b4b8:	75130606 	ldrvc	r0, [r3, #-1542]	; 0xfffff9fa
    b4bc:	01000002 	tsteq	r0, r2
    b4c0:	08dd0b01 	ldmeq	sp, {r0, r8, r9, fp}^
    b4c4:	c3040000 	movwgt	r0, #16384	; 0x4000
    b4c8:	0000b10e 	andeq	fp, r0, lr, lsl #2
    b4cc:	0e010100 	adfeqs	f0, f1, f0
    b4d0:	00000c72 	andeq	r0, r0, r2, ror ip
    b4d4:	10016e07 	andne	r6, r1, r7, lsl #28
    b4d8:	000002a3 	andeq	r0, r0, r3, lsr #5
    b4dc:	02a90407 	adceq	r0, r9, #117440512	; 0x7000000
    b4e0:	010f0000 	mrseq	r0, CPSR
    b4e4:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    b4e8:	00008f10 	andeq	r8, r0, r0, lsl pc
    b4ec:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    b4f0:	c0000001 	andgt	r0, r0, r1
    b4f4:	0d000002 	stceq	0, cr0, [r0, #-8]
    b4f8:	02b50500 	adcseq	r0, r5, #0, 10
    b4fc:	e6110000 	ldr	r0, [r1], -r0
    b500:	07000009 	streq	r0, [r0, -r9]
    b504:	c016017f 	andsgt	r0, r6, pc, ror r1
    b508:	01000002 	tsteq	r0, r2
    b50c:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    b510:	82070000 	andhi	r0, r7, #0
    b514:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    b518:	01010000 	mrseq	r0, (UNDEF: 1)
    b51c:	00036e11 	andeq	r6, r3, r1, lsl lr
    b520:	02d80700 	sbcseq	r0, r8, #0, 14
    b524:	0000b10e 	andeq	fp, r0, lr, lsl #2
    b528:	12010100 	andne	r0, r1, #0, 2
    b52c:	03030708 	movweq	r0, #14088	; 0x3708
    b530:	00031909 	andeq	r1, r3, r9, lsl #18
    b534:	3ca11300 	stccc	3, cr1, [r1]
    b538:	07070000 	streq	r0, [r7, -r0]
    b53c:	008f0703 	addeq	r0, pc, r3, lsl #14
    b540:	13000000 	movwne	r0, #0
    b544:	00000fcd 	andeq	r0, r0, sp, asr #31
    b548:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    b54c:	000000c2 	andeq	r0, r0, r2, asr #1
    b550:	090e0004 	stmdbeq	lr, {r2}
    b554:	0700000a 	streq	r0, [r0, -sl]
    b558:	f2030309 	vcgt.s8	d0, d3, d9
    b55c:	14000002 	strne	r0, [r0], #-2
    b560:	00000029 	andeq	r0, r0, r9, lsr #32
    b564:	030b0730 	movweq	r0, #46896	; 0xb730
    b568:	00038908 	andeq	r8, r3, r8, lsl #18
    b56c:	1f241300 	svcne	0x00241300
    b570:	14070000 	strne	r0, [r7], #-0
    b574:	008f0803 	addeq	r0, pc, r3, lsl #16
    b578:	13000000 	movwne	r0, #0
    b57c:	00000be7 	andeq	r0, r0, r7, ror #23
    b580:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    b584:	0000008f 	andeq	r0, r0, pc, lsl #1
    b588:	4c8e1302 	stcmi	3, cr1, [lr], {2}
    b58c:	16070000 	strne	r0, [r7], -r0
    b590:	02960b03 	addseq	r0, r6, #3072	; 0xc00
    b594:	13040000 	movwne	r0, #16384	; 0x4000
    b598:	00004754 	andeq	r4, r0, r4, asr r7
    b59c:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    b5a0:	000000c2 	andeq	r0, r0, r2, asr #1
    b5a4:	000f1308 	andeq	r1, pc, r8, lsl #6
    b5a8:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    b5ac:	03890f03 	orreq	r0, r9, #3, 30
    b5b0:	130c0000 	movwne	r0, #49152	; 0xc000
    b5b4:	0000095d 	andeq	r0, r0, sp, asr r9
    b5b8:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    b5bc:	00000399 	muleq	r0, r9, r3
    b5c0:	190c002c 	stmdbne	ip, {r2, r3, r5}
    b5c4:	99000003 	stmdbls	r0, {r0, r1}
    b5c8:	15000003 	strne	r0, [r0, #-3]
    b5cc:	00000088 	andeq	r0, r0, r8, lsl #1
    b5d0:	04070003 	streq	r0, [r7], #-3
    b5d4:	00000326 	andeq	r0, r0, r6, lsr #6
    b5d8:	000bdc0e 	andeq	sp, fp, lr, lsl #24
    b5dc:	031c0700 	tsteq	ip, #0, 14
    b5e0:	0003261b 	andeq	r2, r3, fp, lsl r6
    b5e4:	0bbc1100 	bleq	fef0f9ec <_estack+0xdef0a9ec>
    b5e8:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    b5ec:	03bb1403 			; <UNDEFINED> instruction: 0x03bb1403
    b5f0:	01010000 	mrseq	r0, (UNDEF: 1)
    b5f4:	039f0407 	orrseq	r0, pc, #117440512	; 0x7000000
    b5f8:	59160000 	ldmdbpl	r6, {}	; <UNPREDICTABLE>
    b5fc:	0100001e 	tsteq	r0, lr, lsl r0
    b600:	019b070d 	orrseq	r0, fp, sp, lsl #14
    b604:	05010000 	streq	r0, [r1, #-0]
    b608:	00060403 	andeq	r0, r6, r3, lsl #8
    b60c:	47011720 	strmi	r1, [r1, -r0, lsr #14]
    b610:	01000028 	tsteq	r0, r8, lsr #32
    b614:	14010123 	strne	r0, [r1], #-291	; 0xfffffedd
    b618:	30000032 	andcc	r0, r0, r2, lsr r0
    b61c:	01000033 	tsteq	r0, r3, lsr r0
    b620:	0c33189c 	ldceq	8, cr1, [r3], #-624	; 0xfffffd90
    b624:	23010000 	movwcs	r0, #4096	; 0x1000
    b628:	00008f01 	andeq	r8, r0, r1, lsl #30
    b62c:	002e9a00 	eoreq	r9, lr, r0, lsl #20
    b630:	47541900 	ldrbmi	r1, [r4, -r0, lsl #18]
    b634:	23010000 	movwcs	r0, #4096	; 0x1000
    b638:	0000ce01 	andeq	ip, r0, r1, lsl #28
    b63c:	002eb800 	eoreq	fp, lr, r0, lsl #16
    b640:	0f681a00 	svceq	0x00681a00
    b644:	701b0000 	andsvc	r0, fp, r0
    b648:	01007274 	tsteq	r0, r4, ror r2
    b64c:	019b0f28 	orrseq	r0, fp, r8, lsr #30
    b650:	03050000 	movweq	r0, #20480	; 0x5000
    b654:	2000060c 	andcs	r0, r0, ip, lsl #12
    b658:	6e656c1b 	mcrvs	12, 3, r6, cr5, cr11, {0}
    b65c:	0d290100 	stfeqs	f0, [r9, #-0]
    b660:	00000081 	andeq	r0, r0, r1, lsl #1
    b664:	06080305 	streq	r0, [r8], -r5, lsl #6
    b668:	e5192000 	ldr	r2, [r9, #-0]
    b66c:	01000027 	tsteq	r0, r7, lsr #32
    b670:	0081062a 	addeq	r0, r1, sl, lsr #12
    b674:	2f0e0000 	svccs	0x000e0000
    b678:	00000000 	andeq	r0, r0, r0
    b67c:	0005f000 	andeq	pc, r5, r0
    b680:	e8000300 	stmda	r0, {r8, r9}
    b684:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    b688:	0000ac01 	andeq	sl, r0, r1, lsl #24
    b68c:	28960c00 	ldmcs	r6, {sl, fp}
    b690:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    b694:	10100000 	andsne	r0, r0, r0
    b698:	00000000 	andeq	r0, r0, r0
    b69c:	6a8d0000 	bvs	fe34b6a4 <_estack+0xde3466a4>
    b6a0:	01020000 	mrseq	r0, (UNDEF: 2)
    b6a4:	000c5d06 	andeq	r5, ip, r6, lsl #26
    b6a8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    b6ac:	00000a6b 	andeq	r0, r0, fp, ror #20
    b6b0:	fd050402 	stc2	4, cr0, [r5, #-8]
    b6b4:	02000007 	andeq	r0, r0, #7
    b6b8:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    b6bc:	1c030000 	stcne	0, cr0, [r3], {-0}
    b6c0:	0200002a 	andeq	r0, r0, #42	; 0x2a
    b6c4:	004d182e 	subeq	r1, sp, lr, lsr #16
    b6c8:	01020000 	mrseq	r0, (UNDEF: 2)
    b6cc:	000c5b08 	andeq	r5, ip, r8, lsl #22
    b6d0:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    b6d4:	31020000 	mrscc	r0, (UNDEF: 2)
    b6d8:	00006019 	andeq	r6, r0, r9, lsl r0
    b6dc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b6e0:	00000d66 	andeq	r0, r0, r6, ror #26
    b6e4:	0029b403 	eoreq	fp, r9, r3, lsl #8
    b6e8:	19340200 	ldmdbne	r4!, {r9}
    b6ec:	00000073 	andeq	r0, r0, r3, ror r0
    b6f0:	26070402 	strcs	r0, [r7], -r2, lsl #8
    b6f4:	02000004 	andeq	r0, r0, #4
    b6f8:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    b6fc:	04040000 	streq	r0, [r4], #-0
    b700:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    b704:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b708:	0000042b 	andeq	r0, r0, fp, lsr #8
    b70c:	00051e03 	andeq	r1, r5, r3, lsl #28
    b710:	1b280300 	blne	a0c318 <__ccfg+0x9ec370>
    b714:	0000009b 	muleq	r0, fp, r0
    b718:	000b9005 	andeq	r9, fp, r5
    b71c:	00090400 	andeq	r0, r9, r0, lsl #8
    b720:	000000b3 	strheq	r0, [r0], -r3
    b724:	00086d06 	andeq	r6, r8, r6, lsl #26
    b728:	0000b300 	andeq	fp, r0, r0, lsl #6
    b72c:	00010000 	andeq	r0, r1, r0
    b730:	92030407 	andls	r0, r3, #117440512	; 0x7000000
    b734:	0300000b 	movweq	r0, #11
    b738:	008f1863 	addeq	r1, pc, r3, ror #16
    b73c:	fb030000 	blx	cb746 <__ccfg+0xab79e>
    b740:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    b744:	00541227 	subseq	r1, r4, r7, lsr #4
    b748:	c1080000 	mrsgt	r0, (UNDEF: 8)
    b74c:	03000000 	movweq	r0, #0
    b750:	00001dc2 	andeq	r1, r0, r2, asr #27
    b754:	41122b04 	tstmi	r2, r4, lsl #22
    b758:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b75c:	000000d2 	ldrdeq	r0, [r0], -r2
    b760:	00294d03 	eoreq	r4, r9, r3, lsl #26
    b764:	122c0400 	eorne	r0, ip, #0, 8
    b768:	00000067 	andeq	r0, r0, r7, rrx
    b76c:	0000e308 	andeq	lr, r0, r8, lsl #6
    b770:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    b774:	2d040000 	stccs	0, cr0, [r4, #-0]
    b778:	00006712 	andeq	r6, r0, r2, lsl r7
    b77c:	0bb40300 	bleq	fed0c384 <_estack+0xded07384>
    b780:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    b784:	00010c10 	andeq	r0, r1, r0, lsl ip
    b788:	c1040a00 	tstgt	r4, r0, lsl #20
    b78c:	0b000000 	bleq	b794 <__exidx_end+0x5ad4>
    b790:	09320408 	ldmdbeq	r2!, {r3, sl}
    b794:	000001a0 	andeq	r0, r0, r0, lsr #3
    b798:	0000340c 	andeq	r3, r0, ip, lsl #8
    b79c:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    b7a0:	000000d2 	ldrdeq	r0, [r0], -r2
    b7a4:	00070101 	andeq	r0, r7, r1, lsl #2
    b7a8:	00064c0c 	andeq	r4, r6, ip, lsl #24
    b7ac:	03350400 	teqeq	r5, #0, 8
    b7b0:	000000d2 	ldrdeq	r0, [r0], -r2
    b7b4:	00060101 	andeq	r0, r6, r1, lsl #2
    b7b8:	0002e70c 	andeq	lr, r2, ip, lsl #14
    b7bc:	03360400 	teqeq	r6, #0, 8
    b7c0:	000000d2 	ldrdeq	r0, [r0], -r2
    b7c4:	00050101 	andeq	r0, r5, r1, lsl #2
    b7c8:	0006b70c 	andeq	fp, r6, ip, lsl #14
    b7cc:	03370400 	teqeq	r7, #0, 8
    b7d0:	000000d2 	ldrdeq	r0, [r0], -r2
    b7d4:	00040101 	andeq	r0, r4, r1, lsl #2
    b7d8:	000a9f0c 	andeq	r9, sl, ip, lsl #30
    b7dc:	03380400 	teqeq	r8, #0, 8
    b7e0:	000000d2 	ldrdeq	r0, [r0], -r2
    b7e4:	00000401 	andeq	r0, r0, r1, lsl #8
    b7e8:	00065b0d 	andeq	r5, r6, sp, lsl #22
    b7ec:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    b7f0:	000000d2 	ldrdeq	r0, [r0], -r2
    b7f4:	08fb0d01 	ldmeq	fp!, {r0, r8, sl, fp}^
    b7f8:	3c040000 	stccc	0, cr0, [r4], {-0}
    b7fc:	0000d203 	andeq	sp, r0, r3, lsl #4
    b800:	3a0d0200 	bcc	34c008 <__ccfg+0x32c060>
    b804:	0400000f 	streq	r0, [r0], #-15
    b808:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    b80c:	0d030000 	stceq	0, cr0, [r3, #-0]
    b810:	00000913 	andeq	r0, r0, r3, lsl r9
    b814:	e3083f04 	movw	r3, #36612	; 0x8f04
    b818:	04000000 	streq	r0, [r0], #-0
    b81c:	031d0300 	tsteq	sp, #0, 6
    b820:	41040000 	mrsmi	r0, (UNDEF: 4)
    b824:	00011203 	andeq	r1, r1, r3, lsl #4
    b828:	01a00900 	lsleq	r0, r0, #18
    b82c:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
    b830:	04000006 	streq	r0, [r0], #-6
    b834:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    b838:	01010000 	mrseq	r0, (UNDEF: 1)
    b83c:	0001a00e 	andeq	sl, r1, lr
    b840:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    b844:	000001cd 	andeq	r0, r0, sp, asr #3
    b848:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    b84c:	000001d3 	ldrdeq	r0, [r0], -r3
    b850:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    b854:	0800000c 	stmdaeq	r0, {r2, r3}
    b858:	000001d3 	ldrdeq	r0, [r0], -r3
    b85c:	0003260e 	andeq	r2, r3, lr, lsl #12
    b860:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    b864:	000001cd 	andeq	r0, r0, sp, asr #3
    b868:	080b0101 	stmdaeq	fp, {r0, r8}
    b86c:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    b870:	0d000002 	stceq	0, cr0, [r0, #-8]
    b874:	00000cd8 	ldrdeq	r0, [r0], -r8
    b878:	670b9005 	strvs	r9, [fp, -r5]
    b87c:	00000000 	andeq	r0, r0, r0
    b880:	0010750d 	andseq	r7, r0, sp, lsl #10
    b884:	08910500 	ldmeq	r1, {r8, sl}
    b888:	000000c1 	andeq	r0, r0, r1, asr #1
    b88c:	01c50d04 	biceq	r0, r5, r4, lsl #26
    b890:	92050000 	andls	r0, r5, #0
    b894:	0000de10 	andeq	sp, r0, r0, lsl lr
    b898:	03000600 	movweq	r0, #1536	; 0x600
    b89c:	00000ccc 	andeq	r0, r0, ip, asr #25
    b8a0:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    b8a4:	0f000001 	svceq	0x00000001
    b8a8:	0000021e 	andeq	r0, r0, lr, lsl r2
    b8ac:	00000235 	andeq	r0, r0, r5, lsr r2
    b8b0:	3d0e0010 	stccc	0, cr0, [lr, #-64]	; 0xffffffc0
    b8b4:	05000009 	streq	r0, [r0, #-9]
    b8b8:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    b8bc:	01010000 	mrseq	r0, (UNDEF: 1)
    b8c0:	9106010b 	tstls	r6, fp, lsl #2
    b8c4:	00026d09 	andeq	r6, r2, r9, lsl #26
    b8c8:	091a0c00 	ldmdbeq	sl, {sl, fp}
    b8cc:	93060000 	movwls	r0, #24576	; 0x6000
    b8d0:	0000d207 	andeq	sp, r0, r7, lsl #4
    b8d4:	01070100 	mrseq	r0, (UNDEF: 23)
    b8d8:	05cc0c00 	strbeq	r0, [ip, #3072]	; 0xc00
    b8dc:	94060000 	strls	r0, [r6], #-0
    b8e0:	0000d203 	andeq	sp, r0, r3, lsl #4
    b8e4:	00010100 	andeq	r0, r1, r0, lsl #2
    b8e8:	ab030000 	blge	cb8f0 <__ccfg+0xab948>
    b8ec:	0600000a 	streq	r0, [r0], -sl
    b8f0:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    b8f4:	6d080000 	stcvs	0, cr0, [r8, #-0]
    b8f8:	0f000002 	svceq	0x00000002
    b8fc:	00000279 	andeq	r0, r0, r9, ror r2
    b900:	00000289 	andeq	r0, r0, r9, lsl #5
    b904:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    b908:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    b90c:	000003aa 	andeq	r0, r0, sl, lsr #7
    b910:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    b914:	01000002 	tsteq	r0, r2
    b918:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    b91c:	02a70000 	adceq	r0, r7, #0
    b920:	00100000 	andseq	r0, r0, r0
    b924:	00029c08 	andeq	r9, r2, r8, lsl #24
    b928:	060e0e00 	streq	r0, [lr], -r0, lsl #28
    b92c:	06070000 	streq	r0, [r7], -r0
    b930:	0002a713 	andeq	sl, r2, r3, lsl r7
    b934:	0e010100 	adfeqs	f0, f1, f0
    b938:	000008dd 	ldrdeq	r0, [r0], -sp
    b93c:	e30ec305 	movw	ip, #58117	; 0xe305
    b940:	01000000 	mrseq	r0, (UNDEF: 0)
    b944:	0c721101 	ldfeqe	f1, [r2], #-4
    b948:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    b94c:	02d51001 	sbcseq	r1, r5, #1
    b950:	040a0000 	streq	r0, [sl], #-0
    b954:	000002db 	ldrdeq	r0, [r0], -fp
    b958:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    b95c:	c1130000 	tstgt	r3, r0
    b960:	00000000 	andeq	r0, r0, r0
    b964:	0001da0f 	andeq	sp, r1, pc, lsl #20
    b968:	0002f200 	andeq	pc, r2, r0, lsl #4
    b96c:	08001000 	stmdaeq	r0, {ip}
    b970:	000002e7 	andeq	r0, r0, r7, ror #5
    b974:	0009e614 	andeq	lr, r9, r4, lsl r6
    b978:	017f0800 	cmneq	pc, r0, lsl #16
    b97c:	0002f216 	andeq	pc, r2, r6, lsl r2	; <UNPREDICTABLE>
    b980:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    b984:	00000396 	muleq	r0, r6, r3
    b988:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    b98c:	000000ef 	andeq	r0, r0, pc, ror #1
    b990:	6e140101 	mufvss	f0, f4, f1
    b994:	08000003 	stmdaeq	r0, {r0, r1}
    b998:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    b99c:	01000000 	mrseq	r0, (UNDEF: 0)
    b9a0:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    b9a4:	4b090303 	blmi	24c5b8 <__ccfg+0x22c610>
    b9a8:	16000003 	strne	r0, [r0], -r3
    b9ac:	00003ca1 	andeq	r3, r0, r1, lsr #25
    b9b0:	07030708 	streq	r0, [r3, -r8, lsl #14]
    b9b4:	000000c1 	andeq	r0, r0, r1, asr #1
    b9b8:	0fcd1600 	svceq	0x00cd1600
    b9bc:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    b9c0:	00f40803 	rscseq	r0, r4, r3, lsl #16
    b9c4:	00040000 	andeq	r0, r4, r0
    b9c8:	000a0911 	andeq	r0, sl, r1, lsl r9
    b9cc:	03090800 	movweq	r0, #38912	; 0x9800
    b9d0:	00032403 	andeq	r2, r3, r3, lsl #8
    b9d4:	00291700 	eoreq	r1, r9, r0, lsl #14
    b9d8:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    b9dc:	bb08030b 	bllt	20c610 <__ccfg+0x1ec668>
    b9e0:	16000003 	strne	r0, [r0], -r3
    b9e4:	00001f24 	andeq	r1, r0, r4, lsr #30
    b9e8:	08031408 	stmdaeq	r3, {r3, sl, ip}
    b9ec:	000000c1 	andeq	r0, r0, r1, asr #1
    b9f0:	0be71600 	bleq	ff9d11f8 <_estack+0xdf9cc1f8>
    b9f4:	15080000 	strne	r0, [r8, #-0]
    b9f8:	00c10803 	sbceq	r0, r1, r3, lsl #16
    b9fc:	16020000 	strne	r0, [r2], -r0
    ba00:	00004c8e 	andeq	r4, r0, lr, lsl #25
    ba04:	0b031608 	bleq	d122c <__ccfg+0xb1284>
    ba08:	000002c8 	andeq	r0, r0, r8, asr #5
    ba0c:	47541604 	ldrbmi	r1, [r4, -r4, lsl #12]
    ba10:	17080000 	strne	r0, [r8, -r0]
    ba14:	00f40903 	rscseq	r0, r4, r3, lsl #18
    ba18:	16080000 	strne	r0, [r8], -r0
    ba1c:	0000000f 	andeq	r0, r0, pc
    ba20:	0f031808 	svceq	0x00031808
    ba24:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    ba28:	095d160c 	ldmdbeq	sp, {r2, r3, r9, sl, ip}^
    ba2c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    ba30:	03cb1503 	biceq	r1, fp, #12582912	; 0xc00000
    ba34:	002c0000 	eoreq	r0, ip, r0
    ba38:	00034b0f 	andeq	r4, r3, pc, lsl #22
    ba3c:	0003cb00 	andeq	ip, r3, r0, lsl #22
    ba40:	00881800 	addeq	r1, r8, r0, lsl #16
    ba44:	00030000 	andeq	r0, r3, r0
    ba48:	0358040a 	cmpeq	r8, #167772160	; 0xa000000
    ba4c:	dc110000 	ldcle	0, cr0, [r1], {-0}
    ba50:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    ba54:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    ba58:	14000003 	strne	r0, [r0], #-3
    ba5c:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    ba60:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    ba64:	000003ed 	andeq	r0, r0, sp, ror #7
    ba68:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    ba6c:	000003d1 	ldrdeq	r0, [r0], -r1
    ba70:	28ed0119 	stmiacs	sp!, {r0, r3, r4, r8}^
    ba74:	91010000 	mrsls	r0, (UNDEF: 1)
    ba78:	01cd0107 	biceq	r0, sp, r7, lsl #2
    ba7c:	35800000 	strcc	r0, [r0]
    ba80:	35d00000 	ldrbcc	r0, [r0]
    ba84:	9c010000 	stcls	0, cr0, [r1], {-0}
    ba88:	00000468 	andeq	r0, r0, r8, ror #8
    ba8c:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    ba90:	14910100 	ldrne	r0, [r1], #256	; 0x100
    ba94:	000001cd 	andeq	r0, r0, sp, asr #3
    ba98:	00002f2c 	andeq	r2, r0, ip, lsr #30
    ba9c:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    baa0:	68259101 	stmdavs	r5!, {r0, r8, ip, pc}
    baa4:	76000004 	strvc	r0, [r0], -r4
    baa8:	1a00002f 	bne	bb6c <__exidx_end+0x5eac>
    baac:	01007161 	tsteq	r0, r1, ror #2
    bab0:	00b53191 	umlalseq	r3, r5, r1, r1
    bab4:	2fb50000 	svccs	0x00b50000
    bab8:	661b0000 	ldrvs	r0, [fp], -r0
    babc:	01006c6d 	tsteq	r0, sp, ror #24
    bac0:	00c10793 	smulleq	r0, r1, r3, r7
    bac4:	2fe90000 	svccs	0x00e90000
    bac8:	641b0000 	ldrvs	r0, [fp], #-0
    bacc:	0c930100 	ldfeqs	f0, [r3], {0}
    bad0:	000000c1 	andeq	r0, r0, r1, asr #1
    bad4:	00003007 	andeq	r3, r0, r7
    bad8:	0028d51c 	eoreq	sp, r8, ip, lsl r5
    badc:	019e0100 	orrseq	r0, lr, r0, lsl #2
    bae0:	000035aa 	andeq	r3, r0, sl, lsr #11
    bae4:	da040a00 	ble	10e2ec <__ccfg+0xee344>
    bae8:	1d000001 	stcne	0, cr0, [r0, #-4]
    baec:	0028e001 	eoreq	lr, r8, r1
    baf0:	06080100 	streq	r0, [r8], -r0, lsl #2
    baf4:	0000c101 	andeq	ip, r0, r1, lsl #2
    baf8:	00335000 	eorseq	r5, r3, r0
    bafc:	00358000 	eorseq	r8, r5, r0
    bb00:	1a9c0100 	bne	fe70bf08 <_estack+0xde706f08>
    bb04:	00736572 	rsbseq	r6, r3, r2, ror r5
    bb08:	cd1a0801 	ldcgt	8, cr0, [sl, #-4]
    bb0c:	1a000001 	bne	bb18 <__exidx_end+0x5e58>
    bb10:	1a000030 	bne	bbd8 <__exidx_end+0x5f18>
    bb14:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    bb18:	0000c124 	andeq	ip, r0, r4, lsr #2
    bb1c:	00302d00 	eorseq	r2, r0, r0, lsl #26
    bb20:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    bb24:	33080100 	movwcc	r0, #33024	; 0x8100
    bb28:	00000468 	andeq	r0, r0, r8, ror #8
    bb2c:	00003040 	andeq	r3, r0, r0, asr #32
    bb30:	0070611a 	rsbseq	r6, r0, sl, lsl r1
    bb34:	b53f0801 	ldrlt	r0, [pc, #-2049]!	; b33b <__exidx_end+0x567b>
    bb38:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    bb3c:	1b000030 	blne	bc04 <__exidx_end+0x5f44>
    bb40:	0a010063 	beq	4bcd4 <__ccfg+0x2bd2c>
    bb44:	0001d307 	andeq	sp, r1, r7, lsl #6
    bb48:	00310b00 	eorseq	r0, r1, r0, lsl #22
    bb4c:	00641e00 	rsbeq	r1, r4, r0, lsl #28
    bb50:	c1070b01 	tstgt	r7, r1, lsl #22
    bb54:	04000000 	streq	r0, [r0], #-0
    bb58:	06235491 			; <UNDEFINED> instruction: 0x06235491
    bb5c:	0028db1f 	eoreq	sp, r8, pc, lsl fp
    bb60:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    bb64:	00333001 	eorseq	r3, r3, r1
    bb68:	00335000 	eorseq	r5, r3, r0
    bb6c:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    bb70:	0823007c 	stmdaeq	r3!, {r2, r3, r4, r5, r6}
    bb74:	00050906 	andeq	r0, r5, r6, lsl #18
    bb78:	00632000 	rsbeq	r2, r3, r0
    bb7c:	c1120d01 	tstgt	r2, r1, lsl #26
    bb80:	01000000 	mrseq	r0, (UNDEF: 0)
    bb84:	45210050 	strmi	r0, [r1, #-80]!	; 0xffffffb0
    bb88:	01006c6f 	tsteq	r0, pc, ror #24
    bb8c:	338a0188 	orrcc	r0, sl, #136, 2	; 0x22
    bb90:	52210000 	eorpl	r0, r1, #0
    bb94:	01007465 	tsteq	r0, r5, ror #8
    bb98:	33ec018b 	mvncc	r0, #-1073741790	; 0xc0000022
    bb9c:	c0220000 	eorgt	r0, r2, r0
    bba0:	4500000f 	strmi	r0, [r0, #-15]
    bba4:	23000005 	movwcs	r0, #5
    bba8:	006c6176 	rsbeq	r6, ip, r6, ror r1
    bbac:	c10a3a01 	tstgt	sl, r1, lsl #20
    bbb0:	1b000000 	blne	bbb8 <__exidx_end+0x5ef8>
    bbb4:	3a010069 	bcc	4bd60 <__ccfg+0x2bdb8>
    bbb8:	00008113 	andeq	r8, r0, r3, lsl r1
    bbbc:	0031f100 	eorseq	pc, r1, r0, lsl #2
    bbc0:	98220000 	stmdals	r2!, {}	; <UNPREDICTABLE>
    bbc4:	6d00000f 	stcvs	0, cr0, [r0, #-60]	; 0xffffffc4
    bbc8:	1b000005 	blne	bbe4 <__exidx_end+0x5f24>
    bbcc:	006c6176 	rsbeq	r6, ip, r6, ror r1
    bbd0:	c10a4601 	tstgt	sl, r1, lsl #12
    bbd4:	04000000 	streq	r0, [r0], #-0
    bbd8:	1b000032 	blne	bca8 <__exidx_end+0x5fe8>
    bbdc:	46010069 	strmi	r0, [r1], -r9, rrx
    bbe0:	0000c10f 	andeq	ip, r0, pc, lsl #2
    bbe4:	00322d00 	eorseq	r2, r2, r0, lsl #26
    bbe8:	f8220000 			; <UNDEFINED> instruction: 0xf8220000
    bbec:	9500000f 	strls	r0, [r0, #-15]
    bbf0:	1b000005 	blne	bc0c <__exidx_end+0x5f4c>
    bbf4:	006c6176 	rsbeq	r6, ip, r6, ror r1
    bbf8:	e30c5501 	movw	r5, #50433	; 0xc501
    bbfc:	56000000 	strpl	r0, [r0], -r0
    bc00:	1b000032 	blne	bcd0 <__exidx_end+0x6010>
    bc04:	55010069 	strpl	r0, [r1, #-105]	; 0xffffff97
    bc08:	0000e311 	andeq	lr, r0, r1, lsl r3
    bc0c:	00326900 	eorseq	r6, r2, r0, lsl #18
    bc10:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    bc14:	38000035 	stmdacc	r0, {r0, r2, r4, r5}
    bc18:	bf000035 	svclt	0x00000035
    bc1c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    bc20:	006c6176 	rsbeq	r6, ip, r6, ror r1
    bc24:	e30c6001 	movw	r6, #49153	; 0xc001
    bc28:	01000000 	mrseq	r0, (UNDEF: 0)
    bc2c:	00691b59 	rsbeq	r1, r9, r9, asr fp
    bc30:	810a6101 	tsthi	sl, r1, lsl #2
    bc34:	92000000 	andls	r0, r0, #0
    bc38:	00000032 	andeq	r0, r0, r2, lsr r0
    bc3c:	000fe022 	andeq	lr, pc, r2, lsr #32
    bc40:	0005d900 	andeq	sp, r5, r0, lsl #18
    bc44:	61761b00 	cmnvs	r6, r0, lsl #22
    bc48:	7101006c 	tstvc	r1, ip, rrx
    bc4c:	0000c10a 	andeq	ip, r0, sl, lsl #2
    bc50:	0032a500 	eorseq	sl, r2, r0, lsl #10
    bc54:	56250000 	strtpl	r0, [r5], -r0
    bc58:	72000035 	andvc	r0, r0, #53	; 0x35
    bc5c:	1b000035 	blne	bd38 <__exidx_end+0x6078>
    bc60:	01007473 	tsteq	r0, r3, ror r4
    bc64:	01cd0b78 	biceq	r0, sp, r8, ror fp
    bc68:	32c50000 	sbccc	r0, r5, #0
    bc6c:	00000000 	andeq	r0, r0, r0
    bc70:	00058f00 	andeq	r8, r5, r0, lsl #30
    bc74:	fa000300 	blx	c87c <__exidx_end+0x6bbc>
    bc78:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    bc7c:	0000ac01 	andeq	sl, r0, r1, lsl #24
    bc80:	29000c00 	stmdbcs	r0, {sl, fp}
    bc84:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    bc88:	10b80000 	adcsne	r0, r8, r0
    bc8c:	00000000 	andeq	r0, r0, r0
    bc90:	6e510000 	cdpvs	0, 5, cr0, cr1, cr0, {0}
    bc94:	01020000 	mrseq	r0, (UNDEF: 2)
    bc98:	000c5d06 	andeq	r5, ip, r6, lsl #26
    bc9c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    bca0:	00000a6b 	andeq	r0, r0, fp, ror #20
    bca4:	fd050402 	stc2	4, cr0, [r5, #-8]
    bca8:	02000007 	andeq	r0, r0, #7
    bcac:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    bcb0:	1c030000 	stcne	0, cr0, [r3], {-0}
    bcb4:	0200002a 	andeq	r0, r0, #42	; 0x2a
    bcb8:	004d182e 	subeq	r1, sp, lr, lsr #16
    bcbc:	01020000 	mrseq	r0, (UNDEF: 2)
    bcc0:	000c5b08 	andeq	r5, ip, r8, lsl #22
    bcc4:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    bcc8:	31020000 	mrscc	r0, (UNDEF: 2)
    bccc:	00006019 	andeq	r6, r0, r9, lsl r0
    bcd0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    bcd4:	00000d66 	andeq	r0, r0, r6, ror #26
    bcd8:	0029b403 	eoreq	fp, r9, r3, lsl #8
    bcdc:	19340200 	ldmdbne	r4!, {r9}
    bce0:	00000073 	andeq	r0, r0, r3, ror r0
    bce4:	26070402 	strcs	r0, [r7], -r2, lsl #8
    bce8:	02000004 	andeq	r0, r0, #4
    bcec:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    bcf0:	04040000 	streq	r0, [r4], #-0
    bcf4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    bcf8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bcfc:	0000042b 	andeq	r0, r0, fp, lsr #8
    bd00:	00051e03 	andeq	r1, r5, r3, lsl #28
    bd04:	1b280300 	blne	a0c90c <__ccfg+0x9ec964>
    bd08:	0000009b 	muleq	r0, fp, r0
    bd0c:	000b9005 	andeq	r9, fp, r5
    bd10:	00090400 	andeq	r0, r9, r0, lsl #8
    bd14:	000000b3 	strheq	r0, [r0], -r3
    bd18:	00086d06 	andeq	r6, r8, r6, lsl #26
    bd1c:	0000b300 	andeq	fp, r0, r0, lsl #6
    bd20:	00010000 	andeq	r0, r1, r0
    bd24:	92030407 	andls	r0, r3, #117440512	; 0x7000000
    bd28:	0300000b 	movweq	r0, #11
    bd2c:	008f1863 	addeq	r1, pc, r3, ror #16
    bd30:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    bd34:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    bd38:	00411226 	subeq	r1, r1, r6, lsr #4
    bd3c:	fb030000 	blx	cbd46 <__ccfg+0xabd9e>
    bd40:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    bd44:	00541227 	subseq	r1, r4, r7, lsr #4
    bd48:	cd080000 	stcgt	0, cr0, [r8, #-0]
    bd4c:	03000000 	movweq	r0, #0
    bd50:	00001dc2 	andeq	r1, r0, r2, asr #27
    bd54:	41122b04 	tstmi	r2, r4, lsl #22
    bd58:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    bd5c:	000000de 	ldrdeq	r0, [r0], -lr
    bd60:	00294d03 	eoreq	r4, r9, r3, lsl #26
    bd64:	122c0400 	eorne	r0, ip, #0, 8
    bd68:	00000067 	andeq	r0, r0, r7, rrx
    bd6c:	0000ef08 	andeq	lr, r0, r8, lsl #30
    bd70:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    bd74:	2d040000 	stccs	0, cr0, [r4, #-0]
    bd78:	00006712 	andeq	r6, r0, r2, lsl r7
    bd7c:	cd040a00 	vstrgt	s0, [r4, #-0]
    bd80:	0b000000 	bleq	bd88 <__exidx_end+0x60c8>
    bd84:	09320408 	ldmdbeq	r2!, {r3, sl}
    bd88:	000001a0 	andeq	r0, r0, r0, lsr #3
    bd8c:	0000340c 	andeq	r3, r0, ip, lsl #8
    bd90:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    bd94:	000000de 	ldrdeq	r0, [r0], -lr
    bd98:	00070101 	andeq	r0, r7, r1, lsl #2
    bd9c:	00064c0c 	andeq	r4, r6, ip, lsl #24
    bda0:	03350400 	teqeq	r5, #0, 8
    bda4:	000000de 	ldrdeq	r0, [r0], -lr
    bda8:	00060101 	andeq	r0, r6, r1, lsl #2
    bdac:	0002e70c 	andeq	lr, r2, ip, lsl #14
    bdb0:	03360400 	teqeq	r6, #0, 8
    bdb4:	000000de 	ldrdeq	r0, [r0], -lr
    bdb8:	00050101 	andeq	r0, r5, r1, lsl #2
    bdbc:	0006b70c 	andeq	fp, r6, ip, lsl #14
    bdc0:	03370400 	teqeq	r7, #0, 8
    bdc4:	000000de 	ldrdeq	r0, [r0], -lr
    bdc8:	00040101 	andeq	r0, r4, r1, lsl #2
    bdcc:	000a9f0c 	andeq	r9, sl, ip, lsl #30
    bdd0:	03380400 	teqeq	r8, #0, 8
    bdd4:	000000de 	ldrdeq	r0, [r0], -lr
    bdd8:	00000401 	andeq	r0, r0, r1, lsl #8
    bddc:	00065b0d 	andeq	r5, r6, sp, lsl #22
    bde0:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    bde4:	000000de 	ldrdeq	r0, [r0], -lr
    bde8:	08fb0d01 	ldmeq	fp!, {r0, r8, sl, fp}^
    bdec:	3c040000 	stccc	0, cr0, [r4], {-0}
    bdf0:	0000de03 	andeq	sp, r0, r3, lsl #28
    bdf4:	3a0d0200 	bcc	34c5fc <__ccfg+0x32c654>
    bdf8:	0400000f 	streq	r0, [r0], #-15
    bdfc:	00de033d 	sbcseq	r0, lr, sp, lsr r3
    be00:	0d030000 	stceq	0, cr0, [r3, #-0]
    be04:	00000913 	andeq	r0, r0, r3, lsl r9
    be08:	ef083f04 	svc	0x00083f04
    be0c:	04000000 	streq	r0, [r0], #-0
    be10:	031d0300 	tsteq	sp, #0, 6
    be14:	41040000 	mrsmi	r0, (UNDEF: 4)
    be18:	00011203 	andeq	r1, r1, r3, lsl #4
    be1c:	01a00900 	lsleq	r0, r0, #18
    be20:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
    be24:	04000006 	streq	r0, [r0], #-6
    be28:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    be2c:	01010000 	mrseq	r0, (UNDEF: 1)
    be30:	0001a00e 	andeq	sl, r1, lr
    be34:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    be38:	000001cd 	andeq	r0, r0, sp, asr #3
    be3c:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    be40:	000001d3 	ldrdeq	r0, [r0], -r3
    be44:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    be48:	0800000c 	stmdaeq	r0, {r2, r3}
    be4c:	000001d3 	ldrdeq	r0, [r0], -r3
    be50:	0003260e 	andeq	r2, r3, lr, lsl #12
    be54:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    be58:	000001cd 	andeq	r0, r0, sp, asr #3
    be5c:	080b0101 	stmdaeq	fp, {r0, r8}
    be60:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    be64:	0d000002 	stceq	0, cr0, [r0, #-8]
    be68:	00000cd8 	ldrdeq	r0, [r0], -r8
    be6c:	670b9005 	strvs	r9, [fp, -r5]
    be70:	00000000 	andeq	r0, r0, r0
    be74:	0010750d 	andseq	r7, r0, sp, lsl #10
    be78:	08910500 	ldmeq	r1, {r8, sl}
    be7c:	000000cd 	andeq	r0, r0, sp, asr #1
    be80:	01c50d04 	biceq	r0, r5, r4, lsl #26
    be84:	92050000 	andls	r0, r5, #0
    be88:	0000ea10 	andeq	lr, r0, r0, lsl sl
    be8c:	03000600 	movweq	r0, #1536	; 0x600
    be90:	00000ccc 	andeq	r0, r0, ip, asr #25
    be94:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    be98:	0f000001 	svceq	0x00000001
    be9c:	0000021e 	andeq	r0, r0, lr, lsl r2
    bea0:	00000235 	andeq	r0, r0, r5, lsr r2
    bea4:	3d0e0010 	stccc	0, cr0, [lr, #-64]	; 0xffffffc0
    bea8:	05000009 	streq	r0, [r0, #-9]
    beac:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    beb0:	01010000 	mrseq	r0, (UNDEF: 1)
    beb4:	9106010b 	tstls	r6, fp, lsl #2
    beb8:	00026d09 	andeq	r6, r2, r9, lsl #26
    bebc:	091a0c00 	ldmdbeq	sl, {sl, fp}
    bec0:	93060000 	movwls	r0, #24576	; 0x6000
    bec4:	0000de07 	andeq	sp, r0, r7, lsl #28
    bec8:	01070100 	mrseq	r0, (UNDEF: 23)
    becc:	05cc0c00 	strbeq	r0, [ip, #3072]	; 0xc00
    bed0:	94060000 	strls	r0, [r6], #-0
    bed4:	0000de03 	andeq	sp, r0, r3, lsl #28
    bed8:	00010100 	andeq	r0, r1, r0, lsl #2
    bedc:	ab030000 	blge	cbee4 <__ccfg+0xabf3c>
    bee0:	0600000a 	streq	r0, [r0], -sl
    bee4:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    bee8:	6d080000 	stcvs	0, cr0, [r8, #-0]
    beec:	0f000002 	svceq	0x00000002
    bef0:	00000279 	andeq	r0, r0, r9, ror r2
    bef4:	00000289 	andeq	r0, r0, r9, lsl #5
    bef8:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    befc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    bf00:	000003aa 	andeq	r0, r0, sl, lsr #7
    bf04:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    bf08:	01000002 	tsteq	r0, r2
    bf0c:	00d90f01 	sbcseq	r0, r9, r1, lsl #30
    bf10:	02a70000 	adceq	r0, r7, #0
    bf14:	00100000 	andseq	r0, r0, r0
    bf18:	00029c08 	andeq	r9, r2, r8, lsl #24
    bf1c:	060e0e00 	streq	r0, [lr], -r0, lsl #28
    bf20:	06070000 	streq	r0, [r7], -r0
    bf24:	0002a713 	andeq	sl, r2, r3, lsl r7
    bf28:	0e010100 	adfeqs	f0, f1, f0
    bf2c:	000008dd 	ldrdeq	r0, [r0], -sp
    bf30:	ef0ec305 	svc	0x000ec305
    bf34:	01000000 	mrseq	r0, (UNDEF: 0)
    bf38:	0c721101 	ldfeqe	f1, [r2], #-4
    bf3c:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    bf40:	02d51001 	sbcseq	r1, r5, #1
    bf44:	040a0000 	streq	r0, [sl], #-0
    bf48:	000002db 	ldrdeq	r0, [r0], -fp
    bf4c:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    bf50:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    bf54:	00000000 	andeq	r0, r0, r0
    bf58:	0001da0f 	andeq	sp, r1, pc, lsl #20
    bf5c:	0002f200 	andeq	pc, r2, r0, lsl #4
    bf60:	08001000 	stmdaeq	r0, {ip}
    bf64:	000002e7 	andeq	r0, r0, r7, ror #5
    bf68:	0009e614 	andeq	lr, r9, r4, lsl r6
    bf6c:	017f0800 	cmneq	pc, r0, lsl #16
    bf70:	0002f216 	andeq	pc, r2, r6, lsl r2	; <UNPREDICTABLE>
    bf74:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    bf78:	00000396 	muleq	r0, r6, r3
    bf7c:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    bf80:	000000fb 	strdeq	r0, [r0], -fp
    bf84:	6e140101 	mufvss	f0, f4, f1
    bf88:	08000003 	stmdaeq	r0, {r0, r1}
    bf8c:	ef0e02d8 	svc	0x000e02d8
    bf90:	01000000 	mrseq	r0, (UNDEF: 0)
    bf94:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    bf98:	4b090303 	blmi	24cbac <__ccfg+0x22cc04>
    bf9c:	16000003 	strne	r0, [r0], -r3
    bfa0:	00003ca1 	andeq	r3, r0, r1, lsr #25
    bfa4:	07030708 	streq	r0, [r3, -r8, lsl #14]
    bfa8:	000000cd 	andeq	r0, r0, sp, asr #1
    bfac:	0fcd1600 	svceq	0x00cd1600
    bfb0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    bfb4:	01000803 	tsteq	r0, r3, lsl #16
    bfb8:	00040000 	andeq	r0, r4, r0
    bfbc:	000a0911 	andeq	r0, sl, r1, lsl r9
    bfc0:	03090800 	movweq	r0, #38912	; 0x9800
    bfc4:	00032403 	andeq	r2, r3, r3, lsl #8
    bfc8:	00291700 	eoreq	r1, r9, r0, lsl #14
    bfcc:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    bfd0:	bb08030b 	bllt	20cc04 <__ccfg+0x1ecc5c>
    bfd4:	16000003 	strne	r0, [r0], -r3
    bfd8:	00001f24 	andeq	r1, r0, r4, lsr #30
    bfdc:	08031408 	stmdaeq	r3, {r3, sl, ip}
    bfe0:	000000cd 	andeq	r0, r0, sp, asr #1
    bfe4:	0be71600 	bleq	ff9d17ec <_estack+0xdf9cc7ec>
    bfe8:	15080000 	strne	r0, [r8, #-0]
    bfec:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    bff0:	16020000 	strne	r0, [r2], -r0
    bff4:	00004c8e 	andeq	r4, r0, lr, lsl #25
    bff8:	0b031608 	bleq	d1820 <__ccfg+0xb1878>
    bffc:	000002c8 	andeq	r0, r0, r8, asr #5
    c000:	47541604 	ldrbmi	r1, [r4, -r4, lsl #12]
    c004:	17080000 	strne	r0, [r8, -r0]
    c008:	01000903 	tsteq	r0, r3, lsl #18
    c00c:	16080000 	strne	r0, [r8], -r0
    c010:	0000000f 	andeq	r0, r0, pc
    c014:	0f031808 	svceq	0x00031808
    c018:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    c01c:	095d160c 	ldmdbeq	sp, {r2, r3, r9, sl, ip}^
    c020:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    c024:	03cb1503 	biceq	r1, fp, #12582912	; 0xc00000
    c028:	002c0000 	eoreq	r0, ip, r0
    c02c:	00034b0f 	andeq	r4, r3, pc, lsl #22
    c030:	0003cb00 	andeq	ip, r3, r0, lsl #22
    c034:	00881800 	addeq	r1, r8, r0, lsl #16
    c038:	00030000 	andeq	r0, r3, r0
    c03c:	0358040a 	cmpeq	r8, #167772160	; 0xa000000
    c040:	dc110000 	ldcle	0, cr0, [r1], {-0}
    c044:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    c048:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    c04c:	14000003 	strne	r0, [r0], #-3
    c050:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    c054:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    c058:	000003ed 	andeq	r0, r0, sp, ror #7
    c05c:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    c060:	000003d1 	ldrdeq	r0, [r0], -r1
    c064:	293f0119 	ldmdbcs	pc!, {r0, r3, r4, r8}	; <UNPREDICTABLE>
    c068:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    c06c:	00810105 	addeq	r0, r1, r5, lsl #2
    c070:	35d00000 	ldrbcc	r0, [r0]
    c074:	39600000 	stmdbcc	r0!, {}^	; <UNPREDICTABLE>
    c078:	9c010000 	stcls	0, cr0, [r1], {-0}
    c07c:	00000586 	andeq	r0, r0, r6, lsl #11
    c080:	6675621a 			; <UNDEFINED> instruction: 0x6675621a
    c084:	18080100 	stmdane	r8, {r8}
    c088:	00000586 	andeq	r0, r0, r6, lsl #11
    c08c:	000032d8 	ldrdeq	r3, [r0], -r8
    c090:	746d661a 	strbtvc	r6, [sp], #-1562	; 0xfffff9e6
    c094:	29080100 	stmdbcs	r8, {r8}
    c098:	00000586 	andeq	r0, r0, r6, lsl #11
    c09c:	000034cf 	andeq	r3, r0, pc, asr #9
    c0a0:	0070611a 	rsbseq	r6, r0, sl, lsl r1
    c0a4:	b5360801 	ldrlt	r0, [r6, #-2049]!	; 0xfffff7ff
    c0a8:	03000000 	movweq	r0, #0
    c0ac:	1b000035 	blne	c188 <__exidx_end+0x64c8>
    c0b0:	0100636e 	tsteq	r0, lr, ror #6
    c0b4:	0081060a 	addeq	r0, r1, sl, lsl #12
    c0b8:	359c0000 	ldrcc	r0, [ip]
    c0bc:	f31c0000 	vhadd.u16	d0, d12, d0
    c0c0:	01000028 	tsteq	r0, r8, lsr #32
    c0c4:	451c114e 	ldrmi	r1, [ip, #-334]	; 0xfffffeb2
    c0c8:	01000029 	tsteq	r0, r9, lsr #32
    c0cc:	921d1655 	andsls	r1, sp, #89128960	; 0x5500000
    c0d0:	02000036 	andeq	r0, r0, #54	; 0x36
    c0d4:	88000037 	stmdahi	r0, {r0, r1, r2, r4, r5}
    c0d8:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c0dc:	00706176 	rsbseq	r6, r0, r6, ror r1
    c0e0:	0c114e01 	ldceq	14, cr4, [r1], {1}
    c0e4:	01000001 	tsteq	r0, r1
    c0e8:	666d1b56 			; <UNDEFINED> instruction: 0x666d1b56
    c0ec:	114e0100 	mrsne	r0, (UNDEF: 94)
    c0f0:	000000c1 	andeq	r0, r0, r1, asr #1
    c0f4:	0000361d 	andeq	r3, r0, sp, lsl r6
    c0f8:	37021d00 	strcc	r1, [r2, -r0, lsl #26]
    c0fc:	374a0000 	strbcc	r0, [sl, -r0]
    c100:	04a40000 	strteq	r0, [r4], #0
    c104:	761e0000 	ldrvc	r0, [lr], -r0
    c108:	01007061 	tsteq	r0, r1, rrx
    c10c:	010c114f 	tsteq	ip, pc, asr #2
    c110:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    c114:	10681f00 	rsbne	r1, r8, r0, lsl #30
    c118:	04d50000 	ldrbeq	r0, [r5], #0
    c11c:	761e0000 	ldrvc	r0, [lr], -r0
    c120:	01007061 	tsteq	r0, r1, rrx
    c124:	010c1150 	tsteq	ip, r0, asr r1
    c128:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    c12c:	00636420 	rsbeq	r6, r3, r0, lsr #8
    c130:	81115001 	tsthi	r1, r1
    c134:	1b000000 	blne	c13c <__exidx_end+0x647c>
    c138:	50010063 	andpl	r0, r1, r3, rrx
    c13c:	0001d311 	andeq	sp, r1, r1, lsl r3
    c140:	00363b00 	eorseq	r3, r6, r0, lsl #22
    c144:	801f0000 	andshi	r0, pc, r0
    c148:	fc000010 	stc2	0, cr0, [r0], {16}
    c14c:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c150:	00706176 	rsbseq	r6, r0, r6, ror r1
    c154:	8c165501 	cfldr32hi	mvfx5, [r6], {1}
    c158:	01000005 	tsteq	r0, r5
    c15c:	666d1b5e 			; <UNDEFINED> instruction: 0x666d1b5e
    c160:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    c164:	000000c1 	andeq	r0, r0, r1, asr #1
    c168:	00003659 	andeq	r3, r0, r9, asr r6
    c16c:	10301f00 	eorsne	r1, r0, r0, lsl #30
    c170:	05140000 	ldreq	r0, [r4, #-0]
    c174:	761e0000 	ldrvc	r0, [lr], -r0
    c178:	01007061 	tsteq	r0, r1, rrx
    c17c:	058c1656 	streq	r1, [ip, #1622]	; 0x656
    c180:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    c184:	10981f00 	addsne	r1, r8, r0, lsl #30
    c188:	05450000 	strbeq	r0, [r5, #-0]
    c18c:	761e0000 	ldrvc	r0, [lr], -r0
    c190:	01007061 	tsteq	r0, r1, rrx
    c194:	058c1657 	streq	r1, [ip, #1623]	; 0x657
    c198:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    c19c:	00636420 	rsbeq	r6, r3, r0, lsr #8
    c1a0:	81165701 	tsthi	r6, r1, lsl #14
    c1a4:	1b000000 	blne	c1ac <__exidx_end+0x64ec>
    c1a8:	57010063 	strpl	r0, [r1, -r3, rrx]
    c1ac:	0001d316 	andeq	sp, r1, r6, lsl r3
    c1b0:	00367700 	eorseq	r7, r6, r0, lsl #14
    c1b4:	121d0000 	andsne	r0, sp, #0
    c1b8:	26000039 			; <UNDEFINED> instruction: 0x26000039
    c1bc:	6f000039 	svcvs	0x00000039
    c1c0:	1b000005 	blne	c1dc <__exidx_end+0x651c>
    c1c4:	5c010063 	stcpl	0, cr0, [r1], {99}	; 0x63
    c1c8:	0001d309 	andeq	sp, r1, r9, lsl #6
    c1cc:	00369500 	eorseq	r9, r6, r0, lsl #10
    c1d0:	61731e00 	cmnvs	r3, r0, lsl #28
    c1d4:	5c010070 	stcpl	0, cr0, [r1], {112}	; 0x70
    c1d8:	0001cd0d 	andeq	ip, r1, sp, lsl #26
    c1dc:	00560100 	subseq	r0, r6, r0, lsl #2
    c1e0:	00104821 	andseq	r4, r0, r1, lsr #16
    c1e4:	61731b00 	cmnvs	r3, r0, lsl #22
    c1e8:	66010070 			; <UNDEFINED> instruction: 0x66010070
    c1ec:	0001cd0a 	andeq	ip, r1, sl, lsl #26
    c1f0:	0036a800 	eorseq	sl, r6, r0, lsl #16
    c1f4:	0a000000 	beq	c1fc <__exidx_end+0x653c>
    c1f8:	0001da04 	andeq	sp, r1, r4, lsl #20
    c1fc:	ef040a00 	svc	0x00040a00
    c200:	00000000 	andeq	r0, r0, r0
    c204:	00001fea 	andeq	r1, r0, sl, ror #31
    c208:	2eb60003 	cdpcs	0, 11, cr0, cr6, cr3, {0}
    c20c:	01040000 	mrseq	r0, (UNDEF: 4)
    c210:	000000ac 	andeq	r0, r0, ip, lsr #1
    c214:	0029530c 	eoreq	r5, r9, ip, lsl #6
    c218:	000e0a00 	andeq	r0, lr, r0, lsl #20
    c21c:	00711e00 	rsbseq	r1, r1, r0, lsl #28
    c220:	06010200 	streq	r0, [r1], -r0, lsl #4
    c224:	00000c5d 	andeq	r0, r0, sp, asr ip
    c228:	0031ed03 	eorseq	lr, r1, r3, lsl #26
    c22c:	18250100 	stmdane	r5!, {r8}
    c230:	00000030 	andeq	r0, r0, r0, lsr r0
    c234:	6b050202 	blvs	14ca44 <__ccfg+0x12ca9c>
    c238:	0200000a 	andeq	r0, r0, #10
    c23c:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    c240:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    c244:	0007f805 	andeq	pc, r7, r5, lsl #16
    c248:	2a1c0300 	bcs	70ce50 <__ccfg+0x6ecea8>
    c24c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    c250:	00005118 	andeq	r5, r0, r8, lsl r1
    c254:	08010200 	stmdaeq	r1, {r9}
    c258:	00000c5b 	andeq	r0, r0, fp, asr ip
    c25c:	002e1203 	eoreq	r1, lr, r3, lsl #4
    c260:	19310100 	ldmdbne	r1!, {r8}
    c264:	00000064 	andeq	r0, r0, r4, rrx
    c268:	66070202 	strvs	r0, [r7], -r2, lsl #4
    c26c:	0300000d 	movweq	r0, #13
    c270:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    c274:	7c193401 	cfldrsvc	mvf3, [r9], {1}
    c278:	04000000 	streq	r0, [r0], #-0
    c27c:	0000006b 	andeq	r0, r0, fp, rrx
    c280:	26070402 	strcs	r0, [r7], -r2, lsl #8
    c284:	02000004 	andeq	r0, r0, #4
    c288:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    c28c:	04050000 	streq	r0, [r5], #-0
    c290:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    c294:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c298:	0000042b 	andeq	r0, r0, fp, lsr #8
    c29c:	00299d03 	eoreq	r9, r9, r3, lsl #26
    c2a0:	1a560100 	bne	158c6a8 <__ccfg+0x156c700>
    c2a4:	00000091 	muleq	r0, r1, r0
    c2a8:	000bd506 	andeq	sp, fp, r6, lsl #10
    c2ac:	015e0200 	cmpeq	lr, r0, lsl #4
    c2b0:	00009117 	andeq	r9, r0, r7, lsl r1
    c2b4:	0e490300 	cdpeq	3, 4, cr0, cr9, cr0, {0}
    c2b8:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    c2bc:	0000370e 	andeq	r3, r0, lr, lsl #14
    c2c0:	02ff0300 	rscseq	r0, pc, #0, 6
    c2c4:	74030000 	strvc	r0, [r3], #-0
    c2c8:	0000370e 	andeq	r3, r0, lr, lsl #14
    c2cc:	03040700 	movweq	r0, #18176	; 0x4700
    c2d0:	00eb03a5 	rsceq	r0, fp, r5, lsr #7
    c2d4:	6c080000 	stcvs	0, cr0, [r8], {-0}
    c2d8:	03000007 	movweq	r0, #7
    c2dc:	00a40ca7 	adceq	r0, r4, r7, lsr #25
    c2e0:	b4080000 	strlt	r0, [r8], #-0
    c2e4:	0300000a 	movweq	r0, #10
    c2e8:	00eb13a8 	rsceq	r1, fp, r8, lsr #7
    c2ec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    c2f0:	00000051 	andeq	r0, r0, r1, asr r0
    c2f4:	000000fb 	strdeq	r0, [r0], -fp
    c2f8:	0000910a 	andeq	r9, r0, sl, lsl #2
    c2fc:	0b000300 	bleq	cf04 <__exidx_end+0x7244>
    c300:	09a20308 	stmibeq	r2!, {r3, r8, r9}
    c304:	0000011f 	andeq	r0, r0, pc, lsl r1
    c308:	00038e0c 	andeq	r8, r3, ip, lsl #28
    c30c:	07a40300 	streq	r0, [r4, r0, lsl #6]!
    c310:	0000008a 	andeq	r0, r0, sl, lsl #1
    c314:	06010c00 	streq	r0, [r1], -r0, lsl #24
    c318:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    c31c:	0000c905 	andeq	ip, r0, r5, lsl #18
    c320:	03000400 	movweq	r0, #1024	; 0x400
    c324:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    c328:	fb03aa03 	blx	f6b3e <__ccfg+0xd6b96>
    c32c:	0d000000 	stceq	0, cr0, [r0, #-0]
    c330:	08420304 	stmdaeq	r2, {r2, r8, r9}^
    c334:	16040000 	strne	r0, [r4], -r0
    c338:	00007c19 	andeq	r7, r0, r9, lsl ip
    c33c:	02530300 	subseq	r0, r3, #0, 6
    c340:	0c050000 	stceq	0, cr0, [r5], {-0}
    c344:	00008a0d 	andeq	r8, r0, sp, lsl #20
    c348:	072a0300 	streq	r0, [sl, -r0, lsl #6]!
    c34c:	23040000 	movwcs	r0, #16384	; 0x4000
    c350:	0001391b 	andeq	r3, r1, fp, lsl r9
    c354:	03320e00 	teqeq	r2, #0, 28
    c358:	04180000 	ldreq	r0, [r8], #-0
    c35c:	01ab0834 			; <UNDEFINED> instruction: 0x01ab0834
    c360:	c40c0000 	strgt	r0, [ip], #-0
    c364:	0400000e 	streq	r0, [r0], #-14
    c368:	01ab1336 			; <UNDEFINED> instruction: 0x01ab1336
    c36c:	0f000000 	svceq	0x00000000
    c370:	04006b5f 	streq	r6, [r0], #-2911	; 0xfffff4a1
    c374:	008a0737 	addeq	r0, sl, r7, lsr r7
    c378:	0c040000 	stceq	0, cr0, [r4], {-0}
    c37c:	00000b62 	andeq	r0, r0, r2, ror #22
    c380:	8a0b3704 	bhi	2d9f98 <__ccfg+0x2b9ff0>
    c384:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c388:	0043f50c 	subeq	pc, r3, ip, lsl #10
    c38c:	14370400 	ldrtne	r0, [r7], #-1024	; 0xfffffc00
    c390:	0000008a 	andeq	r0, r0, sl, lsl #1
    c394:	04550c0c 	ldrbeq	r0, [r5], #-3084	; 0xfffff3f4
    c398:	37040000 	strcc	r0, [r4, -r0]
    c39c:	00008a1b 	andeq	r8, r0, fp, lsl sl
    c3a0:	5f0f1000 	svcpl	0x000f1000
    c3a4:	38040078 	stmdacc	r4, {r3, r4, r5, r6}
    c3a8:	0001b10b 	andeq	fp, r1, fp, lsl #2
    c3ac:	10001400 	andne	r1, r0, r0, lsl #8
    c3b0:	00015104 	andeq	r5, r1, r4, lsl #2
    c3b4:	012d0900 			; <UNDEFINED> instruction: 0x012d0900
    c3b8:	01c10000 	biceq	r0, r1, r0
    c3bc:	910a0000 	mrsls	r0, (UNDEF: 10)
    c3c0:	00000000 	andeq	r0, r0, r0
    c3c4:	0b7d0e00 	bleq	1f4fbcc <__ccfg+0x1f2fc24>
    c3c8:	04240000 	strteq	r0, [r4], #-0
    c3cc:	0244083c 	subeq	r0, r4, #60, 16	; 0x3c0000
    c3d0:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
    c3d4:	04000005 	streq	r0, [r0], #-5
    c3d8:	008a093e 	addeq	r0, sl, lr, lsr r9
    c3dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    c3e0:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    c3e4:	8a093f04 	bhi	25bffc <__ccfg+0x23c054>
    c3e8:	04000000 	streq	r0, [r0], #-0
    c3ec:	0003580c 	andeq	r5, r3, ip, lsl #16
    c3f0:	09400400 	stmdbeq	r0, {sl}^
    c3f4:	0000008a 	andeq	r0, r0, sl, lsl #1
    c3f8:	06740c08 	ldrbteq	r0, [r4], -r8, lsl #24
    c3fc:	41040000 	mrsmi	r0, (UNDEF: 4)
    c400:	00008a09 	andeq	r8, r0, r9, lsl #20
    c404:	540c0c00 	strpl	r0, [ip], #-3072	; 0xfffff400
    c408:	04000009 	streq	r0, [r0], #-9
    c40c:	008a0942 	addeq	r0, sl, r2, asr #18
    c410:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c414:	00000ace 	andeq	r0, r0, lr, asr #21
    c418:	8a094304 	bhi	25d030 <__ccfg+0x23d088>
    c41c:	14000000 	strne	r0, [r0], #-0
    c420:	0003460c 	andeq	r4, r3, ip, lsl #12
    c424:	09440400 	stmdbeq	r4, {sl}^
    c428:	0000008a 	andeq	r0, r0, sl, lsl #1
    c42c:	05750c18 	ldrbeq	r0, [r5, #-3096]!	; 0xfffff3e8
    c430:	45040000 	strmi	r0, [r4, #-0]
    c434:	00008a09 	andeq	r8, r0, r9, lsl #20
    c438:	f00c1c00 			; <UNDEFINED> instruction: 0xf00c1c00
    c43c:	04000008 	streq	r0, [r0], #-8
    c440:	008a0946 	addeq	r0, sl, r6, asr #18
    c444:	00200000 	eoreq	r0, r0, r0
    c448:	00003b11 	andeq	r3, r0, r1, lsl fp
    c44c:	04010800 	streq	r0, [r1], #-2048	; 0xfffff800
    c450:	0289084f 	addeq	r0, r9, #5177344	; 0x4f0000
    c454:	2d0c0000 	stccs	0, cr0, [ip, #-0]
    c458:	0400000d 	streq	r0, [r0], #-13
    c45c:	02890a50 	addeq	r0, r9, #80, 20	; 0x50000
    c460:	0c000000 	stceq	0, cr0, [r0], {-0}
    c464:	00000c17 	andeq	r0, r0, r7, lsl ip
    c468:	89095104 	stmdbhi	r9, {r2, r8, ip, lr}
    c46c:	80000002 	andhi	r0, r0, r2
    c470:	000dc612 	andeq	ip, sp, r2, lsl r6
    c474:	0a530400 	beq	14cd47c <__ccfg+0x14ad4d4>
    c478:	0000012d 	andeq	r0, r0, sp, lsr #2
    c47c:	b7120100 	ldrlt	r0, [r2, -r0, lsl #2]
    c480:	0400000e 	streq	r0, [r0], #-14
    c484:	012d0a56 			; <UNDEFINED> instruction: 0x012d0a56
    c488:	01040000 	mrseq	r0, (UNDEF: 4)
    c48c:	012b0900 			; <UNDEFINED> instruction: 0x012b0900
    c490:	02990000 	addseq	r0, r9, #0
    c494:	910a0000 	mrsls	r0, (UNDEF: 10)
    c498:	1f000000 	svcne	0x00000000
    c49c:	0a161100 	beq	5908a4 <__ccfg+0x5708fc>
    c4a0:	01900000 	orrseq	r0, r0, r0
    c4a4:	dc086204 	sfmle	f6, 4, [r8], {4}
    c4a8:	0c000002 	stceq	0, cr0, [r0], {2}
    c4ac:	00000ec4 	andeq	r0, r0, r4, asr #29
    c4b0:	dc126304 	ldcle	3, cr6, [r2], {4}
    c4b4:	00000002 	andeq	r0, r0, r2
    c4b8:	0005840c 	andeq	r8, r5, ip, lsl #8
    c4bc:	06640400 	strbteq	r0, [r4], -r0, lsl #8
    c4c0:	0000008a 	andeq	r0, r0, sl, lsl #1
    c4c4:	03070c04 	movweq	r0, #31748	; 0x7c04
    c4c8:	66040000 	strvs	r0, [r4], -r0
    c4cc:	0002e209 	andeq	lr, r2, r9, lsl #4
    c4d0:	3b0c0800 	blcc	30e4d8 <__ccfg+0x2ee530>
    c4d4:	04000000 	streq	r0, [r0], #-0
    c4d8:	02441e67 	subeq	r1, r4, #1648	; 0x670
    c4dc:	00880000 	addeq	r0, r8, r0
    c4e0:	02990410 	addseq	r0, r9, #16, 8	; 0x10000000
    c4e4:	f2090000 	vhadd.s8	d0, d9, d0
    c4e8:	f2000002 	vhadd.s8	d0, d0, d2
    c4ec:	0a000002 	beq	c4fc <__exidx_end+0x683c>
    c4f0:	00000091 	muleq	r0, r1, r0
    c4f4:	0410001f 	ldreq	r0, [r0], #-31	; 0xffffffe1
    c4f8:	000002f8 	strdeq	r0, [r0], -r8
    c4fc:	c50e0113 	strgt	r0, [lr, #-275]	; 0xfffffeed
    c500:	0800000c 	stmdaeq	r0, {r2, r3}
    c504:	22087a04 	andcs	r7, r8, #4, 20	; 0x4000
    c508:	0c000003 	stceq	0, cr0, [r0], {3}
    c50c:	00000cd7 	ldrdeq	r0, [r0], -r7
    c510:	22117b04 	andscs	r7, r1, #4, 22	; 0x1000
    c514:	00000003 	andeq	r0, r0, r3
    c518:	001da00c 	andseq	sl, sp, ip
    c51c:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
    c520:	0000008a 	andeq	r0, r0, sl, lsl #1
    c524:	04100004 	ldreq	r0, [r0], #-4
    c528:	00000051 	andeq	r0, r0, r1, asr r0
    c52c:	00044d0e 	andeq	r4, r4, lr, lsl #26
    c530:	ba046800 	blt	126538 <__ccfg+0x106590>
    c534:	00046b08 	andeq	r6, r4, r8, lsl #22
    c538:	705f0f00 	subsvc	r0, pc, r0, lsl #30
    c53c:	12bb0400 	adcsne	r0, fp, #0, 8
    c540:	00000322 	andeq	r0, r0, r2, lsr #6
    c544:	725f0f00 	subsvc	r0, pc, #0, 30
    c548:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
    c54c:	0000008a 	andeq	r0, r0, sl, lsl #1
    c550:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
    c554:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
    c558:	0000008a 	andeq	r0, r0, sl, lsl #1
    c55c:	01c40c08 	biceq	r0, r4, r8, lsl #24
    c560:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    c564:	00003009 	andeq	r3, r0, r9
    c568:	590c0c00 	stmdbpl	ip, {sl, fp}
    c56c:	04000008 	streq	r0, [r0], #-8
    c570:	003009bf 	ldrhteq	r0, [r0], -pc
    c574:	0f0e0000 	svceq	0x000e0000
    c578:	0066625f 	rsbeq	r6, r6, pc, asr r2
    c57c:	fa11c004 	blx	47c594 <__ccfg+0x45c5ec>
    c580:	10000002 	andne	r0, r0, r2
    c584:	0001bb0c 	andeq	fp, r1, ip, lsl #22
    c588:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
    c58c:	0000008a 	andeq	r0, r0, sl, lsl #1
    c590:	030c0c18 	movweq	r0, #52248	; 0xcc18
    c594:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    c598:	00012b0a 	andeq	r2, r1, sl, lsl #22
    c59c:	2f0c1c00 	svccs	0x000c1c00
    c5a0:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    c5a4:	05f01dca 	ldrbeq	r1, [r0, #3530]!	; 0xdca
    c5a8:	0c200000 	stceq	0, cr0, [r0], #-0
    c5ac:	00001cf6 	strdeq	r1, [r0], -r6
    c5b0:	1b1dcc04 	blne	77f5c8 <__ccfg+0x75f620>
    c5b4:	24000006 	strcs	r0, [r0], #-6
    c5b8:	000ee40c 	andeq	lr, lr, ip, lsl #8
    c5bc:	0dcf0400 	cfstrdeq	mvd0, [pc]	; c5c4 <__exidx_end+0x6904>
    c5c0:	00000640 	andeq	r0, r0, r0, asr #12
    c5c4:	1ce40c28 	stclne	12, cr0, [r4], #160	; 0xa0
    c5c8:	d0040000 	andle	r0, r4, r0
    c5cc:	00065b09 	andeq	r5, r6, r9, lsl #22
    c5d0:	5f0f2c00 	svcpl	0x000f2c00
    c5d4:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
    c5d8:	02fa11d3 	rscseq	r1, sl, #-1073741772	; 0xc0000034
    c5dc:	0f300000 	svceq	0x00300000
    c5e0:	0070755f 	rsbseq	r7, r0, pc, asr r5
    c5e4:	2212d404 	andscs	sp, r2, #4, 8	; 0x4000000
    c5e8:	38000003 	stmdacc	r0, {r0, r1}
    c5ec:	72755f0f 	rsbsvc	r5, r5, #15, 30	; 0x3c
    c5f0:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
    c5f4:	0000008a 	andeq	r0, r0, sl, lsl #1
    c5f8:	0f1b0c3c 	svceq	0x001b0c3c
    c5fc:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    c600:	00066111 	andeq	r6, r6, r1, lsl r1
    c604:	640c4000 	strvs	r4, [ip], #-0
    c608:	0400000e 	streq	r0, [r0], #-14
    c60c:	067111d9 			; <UNDEFINED> instruction: 0x067111d9
    c610:	0f430000 	svceq	0x00430000
    c614:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    c618:	fa11dc04 	blx	483630 <__ccfg+0x463688>
    c61c:	44000002 	strmi	r0, [r0], #-2
    c620:	000b740c 	andeq	r7, fp, ip, lsl #8
    c624:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
    c628:	0000008a 	andeq	r0, r0, sl, lsl #1
    c62c:	047c0c4c 	ldrbteq	r0, [ip], #-3148	; 0xfffff3b4
    c630:	e0040000 	and	r0, r4, r0
    c634:	0000b10a 	andeq	fp, r0, sl, lsl #2
    c638:	530c5000 	movwpl	r5, #49152	; 0xc000
    c63c:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
    c640:	048a12e3 	streq	r1, [sl], #739	; 0x2e3
    c644:	0c540000 	mraeq	r0, r4, acc0
    c648:	00000b9a 	muleq	r0, sl, fp
    c64c:	450ce704 	strmi	lr, [ip, #-1796]	; 0xfffff8fc
    c650:	58000001 	stmdapl	r0, {r0}
    c654:	000a1e0c 	andeq	r1, sl, ip, lsl #28
    c658:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
    c65c:	0000011f 	andeq	r0, r0, pc, lsl r1
    c660:	0e970c5c 	mrceq	12, 4, r0, cr7, cr12, {2}
    c664:	ea040000 	b	10c66c <__ccfg+0xec6c4>
    c668:	00008a09 	andeq	r8, r0, r9, lsl #20
    c66c:	14006400 	strne	r6, [r0], #-1024	; 0xfffffc00
    c670:	00008a01 	andeq	r8, r0, r1, lsl #20
    c674:	00048a00 	andeq	r8, r4, r0, lsl #20
    c678:	048a1500 	streq	r1, [sl], #1280	; 0x500
    c67c:	2b150000 	blcs	54c684 <__ccfg+0x52c6dc>
    c680:	15000001 	strne	r0, [r0, #-1]
    c684:	000005de 	ldrdeq	r0, [r0], -lr
    c688:	00008a15 	andeq	r8, r0, r5, lsl sl
    c68c:	04100000 	ldreq	r0, [r0], #-0
    c690:	00000495 	muleq	r0, r5, r4
    c694:	00048a04 	andeq	r8, r4, r4, lsl #20
    c698:	0d5f1600 	ldcleq	6, cr1, [pc, #-0]	; c6a0 <__exidx_end+0x69e0>
    c69c:	04280000 	strteq	r0, [r8], #-0
    c6a0:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
    c6a4:	000005de 	ldrdeq	r0, [r0], -lr
    c6a8:	00090417 	andeq	r0, r9, r7, lsl r4
    c6ac:	02670400 	rsbeq	r0, r7, #0, 8
    c6b0:	00008a07 	andeq	r8, r0, r7, lsl #20
    c6b4:	e2170000 	ands	r0, r7, #0
    c6b8:	04000007 	streq	r0, [r0], #-7
    c6bc:	cd0b026c 	sfmgt	f0, 4, [fp, #-432]	; 0xfffffe50
    c6c0:	04000006 	streq	r0, [r0], #-6
    c6c4:	0002f717 	andeq	pc, r2, r7, lsl r7	; <UNPREDICTABLE>
    c6c8:	026c0400 	rsbeq	r0, ip, #0, 8
    c6cc:	0006cd14 	andeq	ip, r6, r4, lsl sp
    c6d0:	0a170800 	beq	5ce6d8 <__ccfg+0x5ae730>
    c6d4:	0400000f 	streq	r0, [r0], #-15
    c6d8:	cd1e026c 	lfmgt	f0, 4, [lr, #-432]	; 0xfffffe50
    c6dc:	0c000006 	stceq	0, cr0, [r0], {6}
    c6e0:	00057f17 	andeq	r7, r5, r7, lsl pc
    c6e4:	026e0400 	rsbeq	r0, lr, #0, 8
    c6e8:	00008a08 	andeq	r8, r0, r8, lsl #20
    c6ec:	d4171000 	ldrle	r1, [r7], #-0
    c6f0:	04000004 	streq	r0, [r0], #-4
    c6f4:	cd08026f 	sfmgt	f0, 4, [r8, #-444]	; 0xfffffe44
    c6f8:	14000008 	strne	r0, [r0], #-8
    c6fc:	000e7717 	andeq	r7, lr, r7, lsl r7
    c700:	02720400 	rsbseq	r0, r2, #0, 8
    c704:	00008a07 	andeq	r8, r0, r7, lsl #20
    c708:	a1173000 	tstge	r7, r0
    c70c:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
    c710:	e3160273 	tst	r6, #805306375	; 0x30000007
    c714:	34000008 	strcc	r0, [r0], #-8
    c718:	00078a17 	andeq	r8, r7, r7, lsl sl
    c71c:	02750400 	rsbseq	r0, r5, #0, 8
    c720:	00008a07 	andeq	r8, r0, r7, lsl #20
    c724:	84173800 	ldrhi	r3, [r7], #-2048	; 0xfffff800
    c728:	04000008 	streq	r0, [r0], #-8
    c72c:	f50a0277 			; <UNDEFINED> instruction: 0xf50a0277
    c730:	3c000008 	stccc	0, cr0, [r0], {8}
    c734:	00035017 	andeq	r5, r3, r7, lsl r0
    c738:	027a0400 	rsbseq	r0, sl, #0, 8
    c73c:	0001ab13 	andeq	sl, r1, r3, lsl fp
    c740:	0b174000 	bleq	5dc748 <__ccfg+0x5bc7a0>
    c744:	04000004 	streq	r0, [r0], #-4
    c748:	8a07027b 	bhi	1cd13c <__ccfg+0x1ad194>
    c74c:	44000000 	strmi	r0, [r0], #-0
    c750:	00060917 	andeq	r0, r6, r7, lsl r9
    c754:	027c0400 	rsbseq	r0, ip, #0, 8
    c758:	0001ab13 	andeq	sl, r1, r3, lsl fp
    c75c:	1f174800 	svcne	0x00174800
    c760:	04000008 	streq	r0, [r0], #-8
    c764:	fb14027d 	blx	50d162 <__ccfg+0x4ed1ba>
    c768:	4c000008 	stcmi	0, cr0, [r0], {8}
    c76c:	000b5a17 	andeq	r5, fp, r7, lsl sl
    c770:	02800400 	addeq	r0, r0, #0, 8
    c774:	00008a07 	andeq	r8, r0, r7, lsl #20
    c778:	53175000 	tstpl	r7, #0
    c77c:	0400000c 	streq	r0, [r0], #-12
    c780:	de090281 	cdple	2, 0, cr0, cr9, cr1, {4}
    c784:	54000005 	strpl	r0, [r0], #-5
    c788:	000c6d17 	andeq	r6, ip, r7, lsl sp
    c78c:	02a40400 	adceq	r0, r4, #0, 8
    c790:	0008a807 	andeq	sl, r8, r7, lsl #16
    c794:	16185800 	ldrne	r5, [r8], -r0, lsl #16
    c798:	0400000a 	streq	r0, [r0], #-10
    c79c:	dc1302a8 	lfmle	f0, 4, [r3], {168}	; 0xa8
    c7a0:	48000002 	stmdami	r0, {r1}
    c7a4:	06ae1801 	strteq	r1, [lr], r1, lsl #16
    c7a8:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    c7ac:	02991202 	addseq	r1, r9, #536870912	; 0x20000000
    c7b0:	014c0000 	mrseq	r0, (UNDEF: 76)
    c7b4:	00069518 	andeq	r9, r6, r8, lsl r5
    c7b8:	02ad0400 	adceq	r0, sp, #0, 8
    c7bc:	00090d0c 	andeq	r0, r9, ip, lsl #26
    c7c0:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
    c7c4:	00000ce3 	andeq	r0, r0, r3, ror #25
    c7c8:	1002b204 	andne	fp, r2, r4, lsl #4
    c7cc:	0000068e 	andeq	r0, r0, lr, lsl #13
    c7d0:	a61802e0 	ldrge	r0, [r8], -r0, ror #5
    c7d4:	0400000a 	streq	r0, [r0], #-10
    c7d8:	190a02b4 	stmdbne	sl, {r2, r4, r5, r7, r9}
    c7dc:	ec000009 	stc	0, cr0, [r0], {9}
    c7e0:	04100002 	ldreq	r0, [r0], #-2
    c7e4:	000005e4 	andeq	r0, r0, r4, ror #11
    c7e8:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    c7ec:	0400000c 	streq	r0, [r0], #-12
    c7f0:	000005e4 	andeq	r0, r0, r4, ror #11
    c7f4:	046b0410 	strbteq	r0, [fp], #-1040	; 0xfffffbf0
    c7f8:	01140000 	tsteq	r4, r0
    c7fc:	0000008a 	andeq	r0, r0, sl, lsl #1
    c800:	00000615 	andeq	r0, r0, r5, lsl r6
    c804:	00048a15 	andeq	r8, r4, r5, lsl sl
    c808:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    c80c:	15150000 	ldrne	r0, [r5, #-0]
    c810:	15000006 	strne	r0, [r0, #-6]
    c814:	0000008a 	andeq	r0, r0, sl, lsl #1
    c818:	eb041000 	bl	110820 <__ccfg+0xf0878>
    c81c:	10000005 	andne	r0, r0, r5
    c820:	0005f604 	andeq	pc, r5, r4, lsl #12
    c824:	bd011400 	cfstrslt	mvf1, [r1, #-0]
    c828:	40000000 	andmi	r0, r0, r0
    c82c:	15000006 	strne	r0, [r0, #-6]
    c830:	0000048a 	andeq	r0, r0, sl, lsl #9
    c834:	00012b15 	andeq	r2, r1, r5, lsl fp
    c838:	00bd1500 	adcseq	r1, sp, r0, lsl #10
    c83c:	8a150000 	bhi	54c844 <__ccfg+0x52c89c>
    c840:	00000000 	andeq	r0, r0, r0
    c844:	06210410 			; <UNDEFINED> instruction: 0x06210410
    c848:	01140000 	tsteq	r4, r0
    c84c:	0000008a 	andeq	r0, r0, sl, lsl #1
    c850:	0000065b 	andeq	r0, r0, fp, asr r6
    c854:	00048a15 	andeq	r8, r4, r5, lsl sl
    c858:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    c85c:	10000000 	andne	r0, r0, r0
    c860:	00064604 	andeq	r4, r6, r4, lsl #12
    c864:	00510900 	subseq	r0, r1, r0, lsl #18
    c868:	06710000 	ldrbteq	r0, [r1], -r0
    c86c:	910a0000 	mrsls	r0, (UNDEF: 10)
    c870:	02000000 	andeq	r0, r0, #0
    c874:	00510900 	subseq	r0, r1, r0, lsl #18
    c878:	06810000 	streq	r0, [r1], r0
    c87c:	910a0000 	mrsls	r0, (UNDEF: 10)
    c880:	00000000 	andeq	r0, r0, r0
    c884:	046e0600 	strbteq	r0, [lr], #-1536	; 0xfffffa00
    c888:	24040000 	strcs	r0, [r4], #-0
    c88c:	03281a01 			; <UNDEFINED> instruction: 0x03281a01
    c890:	dd190000 	ldcle	0, cr0, [r9, #-0]
    c894:	0c00000c 	stceq	0, cr0, [r0], {12}
    c898:	08012804 	stmdaeq	r1, {r2, fp, sp}
    c89c:	000006c7 	andeq	r0, r0, r7, asr #13
    c8a0:	000ec417 	andeq	ip, lr, r7, lsl r4
    c8a4:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
    c8a8:	0006c711 	andeq	ip, r6, r1, lsl r7
    c8ac:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
    c8b0:	0400000b 	streq	r0, [r0], #-11
    c8b4:	8a07012b 	bhi	1ccd68 <__ccfg+0x1acdc0>
    c8b8:	04000000 	streq	r0, [r0], #-0
    c8bc:	00077217 	andeq	r7, r7, r7, lsl r2
    c8c0:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
    c8c4:	0006cd0b 	andeq	ip, r6, fp, lsl #26
    c8c8:	10000800 	andne	r0, r0, r0, lsl #16
    c8cc:	00068e04 	andeq	r8, r6, r4, lsl #28
    c8d0:	81041000 	mrshi	r1, (UNDEF: 4)
    c8d4:	19000006 	stmdbne	r0, {r1, r2}
    c8d8:	000003da 	ldrdeq	r0, [r0], -sl
    c8dc:	0144040e 	cmpeq	r4, lr, lsl #8
    c8e0:	00070c08 	andeq	r0, r7, r8, lsl #24
    c8e4:	164b1700 	strbne	r1, [fp], -r0, lsl #14
    c8e8:	45040000 	strmi	r0, [r4, #-0]
    c8ec:	070c1201 	streq	r1, [ip, -r1, lsl #4]
    c8f0:	17000000 	strne	r0, [r0, -r0]
    c8f4:	00000831 	andeq	r0, r0, r1, lsr r8
    c8f8:	12014604 	andne	r4, r1, #4, 12	; 0x400000
    c8fc:	0000070c 	andeq	r0, r0, ip, lsl #14
    c900:	14fd1706 	ldrbtne	r1, [sp], #1798	; 0x706
    c904:	47040000 	strmi	r0, [r4, -r0]
    c908:	00641201 	rsbeq	r1, r4, r1, lsl #4
    c90c:	000c0000 	andeq	r0, ip, r0
    c910:	00006409 	andeq	r6, r0, r9, lsl #8
    c914:	00071c00 	andeq	r1, r7, r0, lsl #24
    c918:	00910a00 	addseq	r0, r1, r0, lsl #20
    c91c:	00020000 	andeq	r0, r2, r0
    c920:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
    c924:	08310702 	ldmdaeq	r1!, {r1, r8, r9, sl}
    c928:	6a170000 	bvs	5cc930 <__ccfg+0x5ac988>
    c92c:	0400000e 	streq	r0, [r0], #-14
    c930:	91180287 	tstls	r8, r7, lsl #5
    c934:	00000000 	andeq	r0, r0, r0
    c938:	000ceb17 	andeq	lr, ip, r7, lsl fp
    c93c:	02880400 	addeq	r0, r8, #0, 8
    c940:	0005de12 	andeq	sp, r5, r2, lsl lr
    c944:	38170400 	ldmdacc	r7, {sl}
    c948:	04000004 	streq	r0, [r0], #-4
    c94c:	31100289 	tstcc	r0, r9, lsl #5
    c950:	08000008 	stmdaeq	r0, {r3}
    c954:	000b4317 	andeq	r4, fp, r7, lsl r3
    c958:	028a0400 	addeq	r0, sl, #0, 8
    c95c:	0001c117 	andeq	ip, r1, r7, lsl r1
    c960:	e9172400 	ldmdb	r7, {sl, sp}
    c964:	04000007 	streq	r0, [r0], #-7
    c968:	8a0f028b 	bhi	3cd39c <__ccfg+0x3ad3f4>
    c96c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    c970:	000ebf17 	andeq	fp, lr, r7, lsl pc
    c974:	028c0400 	addeq	r0, ip, #0, 8
    c978:	0000832c 	andeq	r8, r0, ip, lsr #6
    c97c:	7f175000 	svcvc	0x00175000
    c980:	04000000 	streq	r0, [r0], #-0
    c984:	d31a028d 	tstle	sl, #-805306360	; 0xd0000008
    c988:	58000006 	stmdapl	r0, {r1, r2}
    c98c:	00063917 	andeq	r3, r6, r7, lsl r9
    c990:	028e0400 	addeq	r0, lr, #0, 8
    c994:	00011f16 	andeq	r1, r1, r6, lsl pc
    c998:	f8176800 			; <UNDEFINED> instruction: 0xf8176800
    c99c:	0400000c 	streq	r0, [r0], #-12
    c9a0:	1f16028f 	svcne	0x0016028f
    c9a4:	70000001 	andvc	r0, r0, r1
    c9a8:	00007117 	andeq	r7, r0, r7, lsl r1
    c9ac:	02900400 	addseq	r0, r0, #0, 8
    c9b0:	00011f16 	andeq	r1, r1, r6, lsl pc
    c9b4:	6a177800 	bvs	5ea9bc <__ccfg+0x5caa14>
    c9b8:	0400000b 	streq	r0, [r0], #-11
    c9bc:	41100291 			; <UNDEFINED> instruction: 0x41100291
    c9c0:	80000008 	andhi	r0, r0, r8
    c9c4:	00041517 	andeq	r1, r4, r7, lsl r5
    c9c8:	02920400 	addseq	r0, r2, #0, 8
    c9cc:	00085110 	andeq	r5, r8, r0, lsl r1
    c9d0:	8d178800 	ldchi	8, cr8, [r7, #-0]
    c9d4:	0400000c 	streq	r0, [r0], #-12
    c9d8:	8a0f0293 	bhi	3cd42c <__ccfg+0x3ad484>
    c9dc:	a0000000 	andge	r0, r0, r0
    c9e0:	0002ac17 	andeq	sl, r2, r7, lsl ip
    c9e4:	02940400 	addseq	r0, r4, #0, 8
    c9e8:	00011f16 	andeq	r1, r1, r6, lsl pc
    c9ec:	9f17a400 	svcls	0x0017a400
    c9f0:	04000006 	streq	r0, [r0], #-6
    c9f4:	1f160295 	svcne	0x00160295
    c9f8:	ac000001 	stcge	0, cr0, [r0], {1}
    c9fc:	0005bb17 	andeq	fp, r5, r7, lsl fp
    ca00:	02960400 	addseq	r0, r6, #0, 8
    ca04:	00011f16 	andeq	r1, r1, r6, lsl pc
    ca08:	4a17b400 	bmi	5f9a10 <__ccfg+0x5d9a68>
    ca0c:	04000008 	streq	r0, [r0], #-8
    ca10:	1f160297 	svcne	0x00160297
    ca14:	bc000001 	stclt	0, cr0, [r0], {1}
    ca18:	00062817 	andeq	r2, r6, r7, lsl r8
    ca1c:	02980400 	addseq	r0, r8, #0, 8
    ca20:	00011f16 	andeq	r1, r1, r6, lsl pc
    ca24:	0217c400 	andseq	ip, r7, #0, 8
    ca28:	04000009 	streq	r0, [r0], #-9
    ca2c:	8a080299 	bhi	20d498 <__ccfg+0x1ed4f0>
    ca30:	cc000000 	stcgt	0, cr0, [r0], {-0}
    ca34:	05e40900 	strbeq	r0, [r4, #2304]!	; 0x900
    ca38:	08410000 	stmdaeq	r1, {}^	; <UNPREDICTABLE>
    ca3c:	910a0000 	mrsls	r0, (UNDEF: 10)
    ca40:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    ca44:	05e40900 	strbeq	r0, [r4, #2304]!	; 0x900
    ca48:	08510000 	ldmdaeq	r1, {}^	; <UNPREDICTABLE>
    ca4c:	910a0000 	mrsls	r0, (UNDEF: 10)
    ca50:	07000000 	streq	r0, [r0, -r0]
    ca54:	05e40900 	strbeq	r0, [r4, #2304]!	; 0x900
    ca58:	08610000 	stmdaeq	r1!, {}^	; <UNPREDICTABLE>
    ca5c:	910a0000 	mrsls	r0, (UNDEF: 10)
    ca60:	17000000 	strne	r0, [r0, -r0]
    ca64:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
    ca68:	8807029e 	stmdahi	r7, {r1, r2, r3, r4, r7, r9}
    ca6c:	17000008 	strne	r0, [r0, -r8]
    ca70:	000003c0 	andeq	r0, r0, r0, asr #7
    ca74:	1b02a104 	blne	b4e8c <__ccfg+0x94ee4>
    ca78:	00000888 	andeq	r0, r0, r8, lsl #17
    ca7c:	0f121700 	svceq	0x00121700
    ca80:	a2040000 	andge	r0, r4, #0
    ca84:	08981802 	ldmeq	r8, {r1, fp, ip}
    ca88:	00780000 	rsbseq	r0, r8, r0
    ca8c:	00032209 	andeq	r2, r3, r9, lsl #4
    ca90:	00089800 	andeq	r9, r8, r0, lsl #16
    ca94:	00910a00 	addseq	r0, r1, r0, lsl #20
    ca98:	001d0000 	andseq	r0, sp, r0
    ca9c:	00009109 	andeq	r9, r0, r9, lsl #2
    caa0:	0008a800 	andeq	sl, r8, r0, lsl #16
    caa4:	00910a00 	addseq	r0, r1, r0, lsl #20
    caa8:	001d0000 	andseq	r0, sp, r0
    caac:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
    cab0:	08cd0302 	stmiaeq	sp, {r1, r8, r9}^
    cab4:	5f1c0000 	svcpl	0x001c0000
    cab8:	0400000d 	streq	r0, [r0], #-13
    cabc:	1c0b029a 	sfmne	f0, 4, [fp], {154}	; 0x9a
    cac0:	1c000007 	stcne	0, cr0, [r0], {7}
    cac4:	00000b52 	andeq	r0, r0, r2, asr fp
    cac8:	0b02a304 	bleq	b56e0 <__ccfg+0x95738>
    cacc:	00000861 	andeq	r0, r0, r1, ror #16
    cad0:	05e40900 	strbeq	r0, [r4, #2304]!	; 0x900
    cad4:	08dd0000 	ldmeq	sp, {}^	; <UNPREDICTABLE>
    cad8:	910a0000 	mrsls	r0, (UNDEF: 10)
    cadc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    cae0:	0eca1d00 	cdpeq	13, 12, cr1, cr10, cr0, {0}
    cae4:	10010000 	andne	r0, r1, r0
    cae8:	0008dd04 	andeq	sp, r8, r4, lsl #26
    caec:	f5011e00 			; <UNDEFINED> instruction: 0xf5011e00
    caf0:	15000008 	strne	r0, [r0, #-8]
    caf4:	0000048a 	andeq	r0, r0, sl, lsl #9
    caf8:	e9041000 	stmdb	r4, {ip}
    cafc:	10000008 	andne	r0, r0, r8
    cb00:	0001ab04 	andeq	sl, r1, r4, lsl #22
    cb04:	0d011e00 	stceq	14, cr1, [r1, #-0]
    cb08:	15000009 	strne	r0, [r0, #-9]
    cb0c:	0000008a 	andeq	r0, r0, sl, lsl #1
    cb10:	13041000 	movwne	r1, #16384	; 0x4000
    cb14:	10000009 	andne	r0, r0, r9
    cb18:	00090104 	andeq	r0, r9, r4, lsl #2
    cb1c:	06810900 	streq	r0, [r1], r0, lsl #18
    cb20:	09290000 	stmdbeq	r9!, {}	; <UNPREDICTABLE>
    cb24:	910a0000 	mrsls	r0, (UNDEF: 10)
    cb28:	02000000 	andeq	r0, r0, #0
    cb2c:	0ac21f00 	beq	ff094734 <_estack+0xdf08f734>
    cb30:	33040000 	movwcc	r0, #16384	; 0x4000
    cb34:	048a1703 	streq	r1, [sl], #1795	; 0x703
    cb38:	01010000 	mrseq	r0, (UNDEF: 1)
    cb3c:	000abb1f 	andeq	fp, sl, pc, lsl fp
    cb40:	03340400 	teqeq	r4, #0, 8
    cb44:	0004901d 	andeq	r9, r4, sp, lsl r0
    cb48:	03010100 	movweq	r0, #4352	; 0x1100
    cb4c:	000024e1 	andeq	r2, r0, r1, ror #9
    cb50:	6b123b06 	blvs	49b770 <__ccfg+0x47b7c8>
    cb54:	0b000000 	bleq	cb5c <__exidx_end+0x6e9c>
    cb58:	09400608 	stmdbeq	r0, {r3, r9, sl}^
    cb5c:	00000977 	andeq	r0, r0, r7, ror r9
    cb60:	001fe40c 	andseq	lr, pc, ip, lsl #8
    cb64:	0d410600 	stcleq	6, cr0, [r1, #-0]
    cb68:	00000977 	andeq	r0, r0, r7, ror r9
    cb6c:	22270c00 	eorcs	r0, r7, #0, 24
    cb70:	42060000 	andmi	r0, r6, #0
    cb74:	0009770d 	andeq	r7, r9, sp, lsl #14
    cb78:	10000400 	andne	r0, r0, r0, lsl #8
    cb7c:	00004504 	andeq	r4, r0, r4, lsl #10
    cb80:	272c0300 	strcs	r0, [ip, -r0, lsl #6]!
    cb84:	43060000 	movwmi	r0, #24576	; 0x6000
    cb88:	00095303 	andeq	r5, r9, r3, lsl #6
    cb8c:	22a80300 	adccs	r0, r8, #0, 6
    cb90:	3c070000 	stccc	0, cr0, [r7], {-0}
    cb94:	0009952b 	andeq	r9, r9, fp, lsr #10
    cb98:	25470e00 	strbcs	r0, [r7, #-3584]	; 0xfffff200
    cb9c:	07100000 	ldreq	r0, [r0, -r0]
    cba0:	09f1156f 	ldmibeq	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, ip}^
    cba4:	130c0000 	movwne	r0, #49152	; 0xc000
    cba8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cbac:	00580d70 	subseq	r0, r8, r0, ror sp
    cbb0:	0c000000 	stceq	0, cr0, [r0], {-0}
    cbb4:	00000778 	andeq	r0, r0, r8, ror r7
    cbb8:	580d7107 	stmdapl	sp, {r0, r1, r2, r8, ip, sp, lr}
    cbbc:	02000000 	andeq	r0, r0, #0
    cbc0:	0022860c 	eoreq	r8, r2, ip, lsl #12
    cbc4:	13740700 	cmnne	r4, #0, 14
    cbc8:	00000b28 	andeq	r0, r0, r8, lsr #22
    cbcc:	20150c04 	andscs	r0, r5, r4, lsl #24
    cbd0:	75070000 	strvc	r0, [r7, #-0]
    cbd4:	0009470c 	andeq	r4, r9, ip, lsl #14
    cbd8:	b60c0800 	strlt	r0, [ip], -r0, lsl #16
    cbdc:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cbe0:	0ab4067d 	beq	fed0e5dc <_estack+0xded095dc>
    cbe4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    cbe8:	00002200 	andeq	r2, r0, r0, lsl #4
    cbec:	fe068107 	cdp2	1, 0, cr8, cr6, cr7, {0}
    cbf0:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    cbf4:	20890300 	addcs	r0, r9, r0, lsl #6
    cbf8:	3f070000 	svccc	0x00070000
    cbfc:	0009fd2a 	andeq	pc, r9, sl, lsr #26
    cc00:	207c0e00 	rsbscs	r0, ip, r0, lsl #28
    cc04:	07180000 	ldreq	r0, [r8, -r0]
    cc08:	0ab415e0 	beq	fed12390 <_estack+0xded0d390>
    cc0c:	130c0000 	movwne	r0, #49152	; 0xc000
    cc10:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cc14:	00580de1 	subseq	r0, r8, r1, ror #27
    cc18:	0c000000 	stceq	0, cr0, [r0], {-0}
    cc1c:	00000778 	andeq	r0, r0, r8, ror r7
    cc20:	580de207 	stmdapl	sp, {r0, r1, r2, r9, sp, lr, pc}
    cc24:	02000000 	andeq	r0, r0, #0
    cc28:	0022860c 	eoreq	r8, r2, ip, lsl #12
    cc2c:	13e50700 	mvnne	r0, #0, 14
    cc30:	00000b28 	andeq	r0, r0, r8, lsr #22
    cc34:	20150c04 	andscs	r0, r5, r4, lsl #24
    cc38:	e6070000 	str	r0, [r7], -r0
    cc3c:	0009470c 	andeq	r4, r9, ip, lsl #14
    cc40:	b60c0800 	strlt	r0, [ip], -r0, lsl #16
    cc44:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cc48:	0b3406ee 	bleq	d0e808 <__ccfg+0xcee860>
    cc4c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    cc50:	00002200 	andeq	r2, r0, r0, lsl #4
    cc54:	7e06f207 	cdpvc	2, 0, cr15, cr6, cr7, {0}
    cc58:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    cc5c:	0026520c 	eoreq	r5, r6, ip, lsl #4
    cc60:	0df30700 	ldcleq	7, cr0, [r3]
    cc64:	00000058 	andeq	r0, r0, r8, asr r0
    cc68:	23aa0c0e 			; <UNDEFINED> instruction: 0x23aa0c0e
    cc6c:	f4070000 	vst4.8	{d0-d3}, [r7], r0
    cc70:	0000580d 	andeq	r5, r0, sp, lsl #16
    cc74:	bc0c1000 	stclt	0, cr1, [ip], {-0}
    cc78:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cc7c:	0ba806fa 	bleq	fea0e86c <_estack+0xdea0986c>
    cc80:	0c120000 	ldceq	0, cr0, [r2], {-0}
    cc84:	00002266 	andeq	r2, r0, r6, ror #4
    cc88:	450cfb07 	strmi	pc, [ip, #-2823]	; 0xfffff4f9
    cc8c:	13000000 	movwne	r0, #0
    cc90:	0025b60c 	eoreq	fp, r5, ip, lsl #12
    cc94:	0cfc0700 	ldcleq	7, cr0, [ip]
    cc98:	00000045 	andeq	r0, r0, r5, asr #32
    cc9c:	25bf0c14 	ldrcs	r0, [pc, #3092]!	; d8b8 <__exidx_end+0x7bf8>
    cca0:	fd070000 	stc2	0, cr0, [r7, #-0]
    cca4:	0000450c 	andeq	r4, r0, ip, lsl #10
    cca8:	c80c1500 	stmdagt	ip, {r8, sl, ip}
    ccac:	07000025 	streq	r0, [r0, -r5, lsr #32]
    ccb0:	00580dfe 	ldrsheq	r0, [r8], #-222	; 0xffffff22
    ccb4:	00160000 	andseq	r0, r6, r0
    ccb8:	7607010b 	strvc	r0, [r7], -fp, lsl #2
    ccbc:	000afe04 	andeq	pc, sl, r4, lsl #28
    ccc0:	27692000 	strbcs	r2, [r9, -r0]!
    ccc4:	77070000 	strvc	r0, [r7, -r0]
    ccc8:	0000450f 	andeq	r4, r0, pc, lsl #10
    cccc:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    ccd0:	21072000 	mrscs	r2, (UNDEF: 7)
    ccd4:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    ccd8:	0000450f 	andeq	r4, r0, pc, lsl #10
    ccdc:	03010100 	movweq	r0, #4352	; 0x1100
    cce0:	21c72000 	biccs	r2, r7, r0
    cce4:	7a070000 	bvc	1cccec <__ccfg+0x1acd44>
    cce8:	0000450f 	andeq	r4, r0, pc, lsl #10
    ccec:	01020100 	mrseq	r0, (UNDEF: 18)
    ccf0:	1f822000 	svcne	0x00822000
    ccf4:	7b070000 	blvc	1cccfc <__ccfg+0x1acd54>
    ccf8:	0000450f 	andeq	r4, r0, pc, lsl #10
    ccfc:	00010100 	andeq	r0, r1, r0, lsl #2
    cd00:	010b0000 	mrseq	r0, (UNDEF: 11)
    cd04:	28047e07 	stmdacs	r4, {r0, r1, r2, r9, sl, fp, ip, sp, lr}
    cd08:	2000000b 	andcs	r0, r0, fp
    cd0c:	000025e4 	andeq	r2, r0, r4, ror #11
    cd10:	450f7f07 	strmi	r7, [pc, #-3847]	; be11 <__exidx_end+0x6151>
    cd14:	01000000 	mrseq	r0, (UNDEF: 0)
    cd18:	20000404 	andcs	r0, r0, r4, lsl #8
    cd1c:	00002738 	andeq	r2, r0, r8, lsr r7
    cd20:	450f8007 	strmi	r8, [pc, #-7]	; cd21 <__exidx_end+0x7061>
    cd24:	01000000 	mrseq	r0, (UNDEF: 0)
    cd28:	00000004 	andeq	r0, r0, r4
    cd2c:	09890410 	stmibeq	r9, {r4, sl}
    cd30:	04100000 	ldreq	r0, [r0], #-0
    cd34:	0000006b 	andeq	r0, r0, fp, rrx
    cd38:	e707010b 	str	r0, [r7, -fp, lsl #2]
    cd3c:	000b7e04 	andeq	r7, fp, r4, lsl #28
    cd40:	27692000 	strbcs	r2, [r9, -r0]!
    cd44:	e8070000 	stmda	r7, {}	; <UNPREDICTABLE>
    cd48:	0000450f 	andeq	r4, r0, pc, lsl #10
    cd4c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    cd50:	21072000 	mrscs	r2, (UNDEF: 7)
    cd54:	e9070000 	stmdb	r7, {}	; <UNPREDICTABLE>
    cd58:	0000450f 	andeq	r4, r0, pc, lsl #10
    cd5c:	03010100 	movweq	r0, #4352	; 0x1100
    cd60:	21c72000 	biccs	r2, r7, r0
    cd64:	eb070000 	bl	1ccd6c <__ccfg+0x1acdc4>
    cd68:	0000450f 	andeq	r4, r0, pc, lsl #10
    cd6c:	01020100 	mrseq	r0, (UNDEF: 18)
    cd70:	1f822000 	svcne	0x00822000
    cd74:	ec070000 	stc	0, cr0, [r7], {-0}
    cd78:	0000450f 	andeq	r4, r0, pc, lsl #10
    cd7c:	00010100 	andeq	r0, r1, r0, lsl #2
    cd80:	010b0000 	mrseq	r0, (UNDEF: 11)
    cd84:	a804ef07 	stmdage	r4, {r0, r1, r2, r8, r9, sl, fp, sp, lr, pc}
    cd88:	2000000b 	andcs	r0, r0, fp
    cd8c:	000025e4 	andeq	r2, r0, r4, ror #11
    cd90:	450ff007 	strmi	pc, [pc, #-7]	; cd91 <__exidx_end+0x70d1>
    cd94:	01000000 	mrseq	r0, (UNDEF: 0)
    cd98:	20000404 	andcs	r0, r0, r4, lsl #8
    cd9c:	00002738 	andeq	r2, r0, r8, lsr r7
    cda0:	450ff107 	strmi	pc, [pc, #-263]	; cca1 <__exidx_end+0x6fe1>
    cda4:	01000000 	mrseq	r0, (UNDEF: 0)
    cda8:	00000004 	andeq	r0, r0, r4
    cdac:	f507010b 			; <UNDEFINED> instruction: 0xf507010b
    cdb0:	000bd204 	andeq	sp, fp, r4, lsl #4
    cdb4:	20f12000 	rscscs	r2, r1, r0
    cdb8:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    cdbc:	0000450f 	andeq	r4, r0, pc, lsl #10
    cdc0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    cdc4:	27522000 	ldrbcs	r2, [r2, -r0]
    cdc8:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    cdcc:	0000450f 	andeq	r4, r0, pc, lsl #10
    cdd0:	01060100 	mrseq	r0, (UNDEF: 22)
    cdd4:	04100000 	ldreq	r0, [r0], #-0
    cdd8:	0000097d 	andeq	r0, r0, sp, ror r9
    cddc:	00262703 	eoreq	r2, r6, r3, lsl #14
    cde0:	2f3d0800 	svccs	0x003d0800
    cde4:	00000be4 	andeq	r0, r0, r4, ror #23
    cde8:	0026390e 	eoreq	r3, r6, lr, lsl #18
    cdec:	78081800 	stmdavc	r8, {fp, ip}
    cdf0:	000c7415 	andeq	r7, ip, r5, lsl r4
    cdf4:	1f130c00 	svcne	0x00130c00
    cdf8:	79080000 	stmdbvc	r8, {}	; <UNPREDICTABLE>
    cdfc:	0000580d 	andeq	r5, r0, sp, lsl #16
    ce00:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    ce04:	08000007 	stmdaeq	r0, {r0, r1, r2}
    ce08:	00580d7a 	subseq	r0, r8, sl, ror sp
    ce0c:	0c020000 	stceq	0, cr0, [r2], {-0}
    ce10:	00002286 	andeq	r2, r0, r6, lsl #5
    ce14:	28137d08 	ldmdacs	r3, {r3, r8, sl, fp, ip, sp, lr}
    ce18:	0400000b 	streq	r0, [r0], #-11
    ce1c:	0020150c 	eoreq	r1, r0, ip, lsl #10
    ce20:	0c7e0800 	ldcleq	8, cr0, [lr], #-0
    ce24:	00000947 	andeq	r0, r0, r7, asr #18
    ce28:	22b60c08 	adcscs	r0, r6, #8, 24	; 0x800
    ce2c:	86080000 	strhi	r0, [r8], -r0
    ce30:	000e6706 	andeq	r6, lr, r6, lsl #14
    ce34:	000c0c00 	andeq	r0, ip, r0, lsl #24
    ce38:	08000022 	stmdaeq	r0, {r1, r5}
    ce3c:	0eb1068a 	cdpeq	6, 11, cr0, cr1, cr10, {4}
    ce40:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    ce44:	0000205a 	andeq	r2, r0, sl, asr r0
    ce48:	db069308 	blle	1b1a70 <__ccfg+0x191ac8>
    ce4c:	0e00000e 	cdpeq	0, 0, cr0, cr0, cr14, {0}
    ce50:	0025dd0c 	eoreq	sp, r5, ip, lsl #26
    ce54:	0c940800 	ldceq	8, cr0, [r4], {0}
    ce58:	00000045 	andeq	r0, r0, r5, asr #32
    ce5c:	233c0c0f 	teqcs	ip, #3840	; 0xf00
    ce60:	95080000 	strls	r0, [r8, #-0]
    ce64:	00006b0d 	andeq	r6, r0, sp, lsl #22
    ce68:	400c1000 	andmi	r1, ip, r0
    ce6c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    ce70:	09770d96 	ldmdbeq	r7!, {r1, r2, r4, r7, r8, sl, fp}^
    ce74:	00140000 	andseq	r0, r4, r0
    ce78:	00249303 	eoreq	r9, r4, r3, lsl #6
    ce7c:	2f3e0800 	svccs	0x003e0800
    ce80:	00000c80 	andeq	r0, r0, r0, lsl #25
    ce84:	00218b0e 	eoreq	r8, r1, lr, lsl #22
    ce88:	9f082400 	svcls	0x00082400
    ce8c:	000d5e15 	andeq	r5, sp, r5, lsl lr
    ce90:	1f130c00 	svcne	0x00130c00
    ce94:	a0080000 	andge	r0, r8, r0
    ce98:	0000580d 	andeq	r5, r0, sp, lsl #16
    ce9c:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    cea0:	08000007 	stmdaeq	r0, {r0, r1, r2}
    cea4:	00580da1 	subseq	r0, r8, r1, lsr #27
    cea8:	0c020000 	stceq	0, cr0, [r2], {-0}
    ceac:	00002286 	andeq	r2, r0, r6, lsl #5
    ceb0:	2813a408 	ldmdacs	r3, {r3, sl, sp, pc}
    ceb4:	0400000b 	streq	r0, [r0], #-11
    ceb8:	0020150c 	eoreq	r1, r0, ip, lsl #10
    cebc:	0ca50800 	stceq	8, cr0, [r5]
    cec0:	00000947 	andeq	r0, r0, r7, asr #18
    cec4:	22b60c08 	adcscs	r0, r6, #8, 24	; 0x800
    cec8:	ad080000 	stcge	0, cr0, [r8, #-0]
    cecc:	000f1506 	andeq	r1, pc, r6, lsl #10
    ced0:	000c0c00 	andeq	r0, ip, r0, lsl #24
    ced4:	08000022 	stmdaeq	r0, {r1, r5}
    ced8:	0f5f06b1 	svceq	0x005f06b1
    cedc:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    cee0:	0000205a 	andeq	r2, r0, sl, asr r0
    cee4:	8906c308 	stmdbhi	r6, {r3, r8, r9, lr, pc}
    cee8:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    ceec:	0023f10c 	eoreq	pc, r3, ip, lsl #2
    cef0:	06cd0800 	strbeq	r0, [sp], r0, lsl #16
    cef4:	00001013 	andeq	r1, r0, r3, lsl r0
    cef8:	233c0c0f 	teqcs	ip, #3840	; 0xf00
    cefc:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    cf00:	00006b0d 	andeq	r6, r0, sp, lsl #22
    cf04:	3f0c1000 	svccc	0x000c1000
    cf08:	08000021 	stmdaeq	r0, {r0, r5}
    cf0c:	00450ccf 	subeq	r0, r5, pc, asr #25
    cf10:	0c140000 	ldceq	0, cr0, [r4], {-0}
    cf14:	00002443 	andeq	r2, r0, r3, asr #8
    cf18:	450cd108 	strmi	sp, [ip, #-264]	; 0xfffffef8
    cf1c:	15000000 	strne	r0, [r0, #-0]
    cf20:	00244c0c 	eoreq	r4, r4, ip, lsl #24
    cf24:	0cd20800 	ldcleq	8, cr0, [r2], {0}
    cf28:	00000045 	andeq	r0, r0, r5, asr #32
    cf2c:	219d0c16 	orrscs	r0, sp, r6, lsl ip
    cf30:	db080000 	blle	20cf38 <__ccfg+0x1ecf90>
    cf34:	00108d06 	andseq	r8, r0, r6, lsl #26
    cf38:	8c0c1700 	stchi	7, cr1, [ip], {-0}
    cf3c:	08000026 	stmdaeq	r0, {r1, r2, r5}
    cf40:	09470cdc 	stmdbeq	r7, {r2, r3, r4, r6, r7, sl, fp}^
    cf44:	0c180000 	ldceq	0, cr0, [r8], {-0}
    cf48:	000021d1 	ldrdeq	r2, [r0], -r1
    cf4c:	d211dd08 	andsle	sp, r1, #8, 26	; 0x200
    cf50:	1c00000b 	stcne	0, cr0, [r0], {11}
    cf54:	001fa50c 	andseq	sl, pc, ip, lsl #10
    cf58:	0dde0800 	ldcleq	8, cr0, [lr]
    cf5c:	00000977 	andeq	r0, r0, r7, ror r9
    cf60:	74030020 	strvc	r0, [r3], #-32	; 0xffffffe0
    cf64:	08000024 	stmdaeq	r0, {r2, r5}
    cf68:	0d6a3c43 	stcleq	12, cr3, [sl, #-268]!	; 0xfffffef4
    cf6c:	55190000 	ldrpl	r0, [r9, #-0]
    cf70:	28000024 	stmdacs	r0, {r2, r5}
    cf74:	15021a08 	strne	r1, [r2, #-2568]	; 0xfffff5f8
    cf78:	00000e67 	andeq	r0, r0, r7, ror #28
    cf7c:	001f1317 	andseq	r1, pc, r7, lsl r3	; <UNPREDICTABLE>
    cf80:	021b0800 	andseq	r0, fp, #0, 16
    cf84:	0000580d 	andeq	r5, r0, sp, lsl #16
    cf88:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    cf8c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    cf90:	580d021d 	stmdapl	sp, {r0, r2, r3, r4, r9}
    cf94:	02000000 	andeq	r0, r0, #0
    cf98:	00228617 	eoreq	r8, r2, r7, lsl r6
    cf9c:	02200800 	eoreq	r0, r0, #0, 16
    cfa0:	000b2813 	andeq	r2, fp, r3, lsl r8
    cfa4:	15170400 	ldrne	r0, [r7, #-1024]	; 0xfffffc00
    cfa8:	08000020 	stmdaeq	r0, {r5}
    cfac:	470c0221 	strmi	r0, [ip, -r1, lsr #4]
    cfb0:	08000009 	stmdaeq	r0, {r0, r3}
    cfb4:	0022b617 	eoreq	fp, r2, r7, lsl r6
    cfb8:	02290800 	eoreq	r0, r9, #0, 16
    cfbc:	0010d706 	andseq	sp, r0, r6, lsl #14
    cfc0:	00170c00 	andseq	r0, r7, r0, lsl #24
    cfc4:	08000022 	stmdaeq	r0, {r1, r5}
    cfc8:	2606022d 	strcs	r0, [r6], -sp, lsr #4
    cfcc:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    cfd0:	001f0817 	andseq	r0, pc, r7, lsl r8	; <UNPREDICTABLE>
    cfd4:	02330800 	eorseq	r0, r3, #0, 16
    cfd8:	00115306 	andseq	r5, r1, r6, lsl #6
    cfdc:	6f170e00 	svcvs	0x00170e00
    cfe0:	08000022 	stmdaeq	r0, {r1, r5}
    cfe4:	80060238 	andhi	r0, r6, r8, lsr r2
    cfe8:	10000011 	andne	r0, r0, r1, lsl r0
    cfec:	00209e17 	eoreq	r9, r0, r7, lsl lr
    cff0:	02390800 	eorseq	r0, r9, #0, 16
    cff4:	0000450c 	andeq	r4, r0, ip, lsl #10
    cff8:	32171400 	andscc	r1, r7, #0, 8
    cffc:	08000023 	stmdaeq	r0, {r0, r1, r5}
    d000:	ad060241 	sfmge	f0, 4, [r6, #-260]	; 0xfffffefc
    d004:	15000011 	strne	r0, [r0, #-17]	; 0xffffffef
    d008:	00200a17 	eoreq	r0, r0, r7, lsl sl
    d00c:	02550800 	subseq	r0, r5, #0, 16
    d010:	0011da06 	andseq	sp, r1, r6, lsl #20
    d014:	7d171600 	ldcvc	6, cr1, [r7, #-0]
    d018:	08000014 	stmdaeq	r0, {r2, r4}
    d01c:	3a060268 	bcc	18d9c4 <__ccfg+0x16da1c>
    d020:	18000012 	stmdane	r0, {r1, r4}
    d024:	00209617 	eoreq	r9, r0, r7, lsl r6
    d028:	02690800 	rsbeq	r0, r9, #0, 16
    d02c:	0000580d 	andeq	r5, r0, sp, lsl #16
    d030:	d4171a00 	ldrle	r1, [r7], #-2560	; 0xfffff600
    d034:	08000024 	stmdaeq	r0, {r2, r5}
    d038:	2e0e026a 	cdpcs	2, 0, cr0, cr14, cr10, {3}
    d03c:	1c00000b 	stcne	0, cr0, [r0], {11}
    d040:	001f4517 	andseq	r4, pc, r7, lsl r5	; <UNPREDICTABLE>
    d044:	026c0800 	rsbeq	r0, ip, #0, 16
    d048:	0000580d 	andeq	r5, r0, sp, lsl #16
    d04c:	8e172000 	cdphi	0, 1, cr2, cr7, cr0, {0}
    d050:	08000022 	stmdaeq	r0, {r1, r5}
    d054:	240c0270 	strcs	r0, [ip], #-624	; 0xfffffd90
    d058:	22000000 	andcs	r0, r0, #0
    d05c:	0023cc17 	eoreq	ip, r3, r7, lsl ip
    d060:	02730800 	rsbseq	r0, r3, #0, 16
    d064:	0000450c 	andeq	r4, r0, ip, lsl #10
    d068:	0b002400 	bleq	16070 <__exidx_end+0x103b0>
    d06c:	047f0801 	ldrbteq	r0, [pc], #-2049	; d074 <__exidx_end+0x73b4>
    d070:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    d074:	00276920 	eoreq	r6, r7, r0, lsr #18
    d078:	0f800800 	svceq	0x00800800
    d07c:	00000045 	andeq	r0, r0, r5, asr #32
    d080:	00040401 	andeq	r0, r4, r1, lsl #8
    d084:	00210720 	eoreq	r0, r1, r0, lsr #14
    d088:	0f810800 	svceq	0x00810800
    d08c:	00000045 	andeq	r0, r0, r5, asr #32
    d090:	00030101 	andeq	r0, r3, r1, lsl #2
    d094:	0021c720 	eoreq	ip, r1, r0, lsr #14
    d098:	0f830800 	svceq	0x00830800
    d09c:	00000045 	andeq	r0, r0, r5, asr #32
    d0a0:	00010201 	andeq	r0, r1, r1, lsl #4
    d0a4:	001f8220 	andseq	r8, pc, r0, lsr #4
    d0a8:	0f840800 	svceq	0x00840800
    d0ac:	00000045 	andeq	r0, r0, r5, asr #32
    d0b0:	00000101 	andeq	r0, r0, r1, lsl #2
    d0b4:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    d0b8:	0edb0487 	cdpeq	4, 13, cr0, cr11, cr7, {4}
    d0bc:	e4200000 	strt	r0, [r0], #-0
    d0c0:	08000025 	stmdaeq	r0, {r0, r2, r5}
    d0c4:	00450f88 	subeq	r0, r5, r8, lsl #31
    d0c8:	04010000 	streq	r0, [r1], #-0
    d0cc:	38200004 	stmdacc	r0!, {r2}
    d0d0:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d0d4:	00450f89 	subeq	r0, r5, r9, lsl #31
    d0d8:	04010000 	streq	r0, [r1], #-0
    d0dc:	0b000000 	bleq	d0e4 <__exidx_end+0x7424>
    d0e0:	048b0801 	streq	r0, [fp], #2049	; 0x801
    d0e4:	00000f15 	andeq	r0, r0, r5, lsl pc
    d0e8:	00267720 	eoreq	r7, r6, r0, lsr #14
    d0ec:	0f8c0800 	svceq	0x008c0800
    d0f0:	00000045 	andeq	r0, r0, r5, asr #32
    d0f4:	00070101 	andeq	r0, r7, r1, lsl #2
    d0f8:	0026ff20 	eoreq	pc, r6, r0, lsr #30
    d0fc:	0f8f0800 	svceq	0x008f0800
    d100:	00000045 	andeq	r0, r0, r5, asr #32
    d104:	00040101 	andeq	r0, r4, r1, lsl #2
    d108:	001f3820 	andseq	r3, pc, r0, lsr #16
    d10c:	0f910800 	svceq	0x00910800
    d110:	00000045 	andeq	r0, r0, r5, asr #32
    d114:	00030101 	andeq	r0, r3, r1, lsl #2
    d118:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    d11c:	0f5f04a6 	svceq	0x005f04a6
    d120:	69200000 	stmdbvs	r0!, {}	; <UNPREDICTABLE>
    d124:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d128:	00450fa7 	subeq	r0, r5, r7, lsr #31
    d12c:	04010000 	streq	r0, [r1], #-0
    d130:	07200004 	streq	r0, [r0, -r4]!
    d134:	08000021 	stmdaeq	r0, {r0, r5}
    d138:	00450fa8 	subeq	r0, r5, r8, lsr #31
    d13c:	01010000 	mrseq	r0, (UNDEF: 1)
    d140:	c7200003 	strgt	r0, [r0, -r3]!
    d144:	08000021 	stmdaeq	r0, {r0, r5}
    d148:	00450faa 	subeq	r0, r5, sl, lsr #31
    d14c:	02010000 	andeq	r0, r1, #0
    d150:	82200001 	eorhi	r0, r0, #1
    d154:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d158:	00450fab 	subeq	r0, r5, fp, lsr #31
    d15c:	01010000 	mrseq	r0, (UNDEF: 1)
    d160:	0b000000 	bleq	d168 <__exidx_end+0x74a8>
    d164:	04ae0801 	strteq	r0, [lr], #2049	; 0x801
    d168:	00000f89 	andeq	r0, r0, r9, lsl #31
    d16c:	0025e420 	eoreq	lr, r5, r0, lsr #8
    d170:	0faf0800 	svceq	0x00af0800
    d174:	00000045 	andeq	r0, r0, r5, asr #32
    d178:	00040401 	andeq	r0, r4, r1, lsl #8
    d17c:	00273820 	eoreq	r3, r7, r0, lsr #16
    d180:	0fb00800 	svceq	0x00b00800
    d184:	00000045 	andeq	r0, r0, r5, asr #32
    d188:	00000401 	andeq	r0, r0, r1, lsl #8
    d18c:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    d190:	101304b2 			; <UNDEFINED> instruction: 0x101304b2
    d194:	77200000 	strvc	r0, [r0, -r0]!
    d198:	08000026 	stmdaeq	r0, {r1, r2, r5}
    d19c:	00450fb3 	strheq	r0, [r5], #-243	; 0xffffff0d
    d1a0:	01010000 	mrseq	r0, (UNDEF: 1)
    d1a4:	ad200007 	stcge	0, cr0, [r0, #-28]!	; 0xffffffe4
    d1a8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d1ac:	00450fb5 	strheq	r0, [r5], #-245	; 0xffffff0b
    d1b0:	01010000 	mrseq	r0, (UNDEF: 1)
    d1b4:	55200006 	strpl	r0, [r0, #-6]!
    d1b8:	08000025 	stmdaeq	r0, {r0, r2, r5}
    d1bc:	00450fb7 	strheq	r0, [r5], #-247	; 0xffffff09
    d1c0:	01010000 	mrseq	r0, (UNDEF: 1)
    d1c4:	ff200005 			; <UNDEFINED> instruction: 0xff200005
    d1c8:	08000026 	stmdaeq	r0, {r1, r2, r5}
    d1cc:	00450fb9 	strheq	r0, [r5], #-249	; 0xffffff07
    d1d0:	01010000 	mrseq	r0, (UNDEF: 1)
    d1d4:	38200004 	stmdacc	r0!, {r2}
    d1d8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d1dc:	00450fbb 	strheq	r0, [r5], #-251	; 0xffffff05
    d1e0:	01010000 	mrseq	r0, (UNDEF: 1)
    d1e4:	94200003 	strtls	r0, [r0], #-3
    d1e8:	08000026 	stmdaeq	r0, {r1, r2, r5}
    d1ec:	00450fbd 	strheq	r0, [r5], #-253	; 0xffffff03
    d1f0:	01010000 	mrseq	r0, (UNDEF: 1)
    d1f4:	d8200002 	stmdale	r0!, {r1}
    d1f8:	08000021 	stmdaeq	r0, {r0, r5}
    d1fc:	00450fbf 	strheq	r0, [r5], #-255	; 0xffffff01
    d200:	01010000 	mrseq	r0, (UNDEF: 1)
    d204:	60200001 	eorvs	r0, r0, r1
    d208:	08000025 	stmdaeq	r0, {r0, r2, r5}
    d20c:	00450fc1 	subeq	r0, r5, r1, asr #31
    d210:	01010000 	mrseq	r0, (UNDEF: 1)
    d214:	0b000000 	bleq	d21c <__exidx_end+0x755c>
    d218:	04c40801 	strbeq	r0, [r4], #2049	; 0x801
    d21c:	0000108d 	andeq	r1, r0, sp, lsl #1
    d220:	00229620 	eoreq	r9, r2, r0, lsr #12
    d224:	0fc50800 	svceq	0x00c50800
    d228:	00000045 	andeq	r0, r0, r5, asr #32
    d22c:	00070101 	andeq	r0, r7, r1, lsl #2
    d230:	0020cf20 	eoreq	ip, r0, r0, lsr #30
    d234:	0fc60800 	svceq	0x00c60800
    d238:	00000045 	andeq	r0, r0, r5, asr #32
    d23c:	00060101 	andeq	r0, r6, r1, lsl #2
    d240:	00220a20 	eoreq	r0, r2, r0, lsr #20
    d244:	0fc80800 	svceq	0x00c80800
    d248:	00000045 	andeq	r0, r0, r5, asr #32
    d24c:	00040101 	andeq	r0, r4, r1, lsl #2
    d250:	00217320 	eoreq	r7, r1, r0, lsr #6
    d254:	0fc90800 	svceq	0x00c90800
    d258:	00000045 	andeq	r0, r0, r5, asr #32
    d25c:	00030101 	andeq	r0, r3, r1, lsl #2
    d260:	0024e920 	eoreq	lr, r4, r0, lsr #18
    d264:	0fca0800 	svceq	0x00ca0800
    d268:	00000045 	andeq	r0, r0, r5, asr #32
    d26c:	00020101 	andeq	r0, r2, r1, lsl #2
    d270:	00201f20 	eoreq	r1, r0, r0, lsr #30
    d274:	0fcb0800 	svceq	0x00cb0800
    d278:	00000045 	andeq	r0, r0, r5, asr #32
    d27c:	00010101 	andeq	r0, r1, r1, lsl #2
    d280:	001f1d20 	andseq	r1, pc, r0, lsr #26
    d284:	0fcc0800 	svceq	0x00cc0800
    d288:	00000045 	andeq	r0, r0, r5, asr #32
    d28c:	00000101 	andeq	r0, r0, r1, lsl #2
    d290:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    d294:	10d704d4 	ldrsbne	r0, [r7], #68	; 0x44
    d298:	69200000 	stmdbvs	r0!, {}	; <UNPREDICTABLE>
    d29c:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d2a0:	00450fd5 	ldrdeq	r0, [r5], #-245	; 0xffffff0b
    d2a4:	04010000 	streq	r0, [r1], #-0
    d2a8:	07200004 	streq	r0, [r0, -r4]!
    d2ac:	08000021 	stmdaeq	r0, {r0, r5}
    d2b0:	00450fd6 	ldrdeq	r0, [r5], #-246	; 0xffffff0a
    d2b4:	01010000 	mrseq	r0, (UNDEF: 1)
    d2b8:	c7200003 	strgt	r0, [r0, -r3]!
    d2bc:	08000021 	stmdaeq	r0, {r0, r5}
    d2c0:	00450fd8 	ldrdeq	r0, [r5], #-248	; 0xffffff08
    d2c4:	02010000 	andeq	r0, r1, #0
    d2c8:	82200001 	eorhi	r0, r0, #1
    d2cc:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d2d0:	00450fd9 	ldrdeq	r0, [r5], #-249	; 0xffffff07
    d2d4:	01010000 	mrseq	r0, (UNDEF: 1)
    d2d8:	1a000000 	bne	d2e0 <__exidx_end+0x7620>
    d2dc:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    d2e0:	00112604 	andseq	r2, r1, r4, lsl #12
    d2e4:	27692100 	strbcs	r2, [r9, -r0, lsl #2]!
    d2e8:	23080000 	movwcs	r0, #32768	; 0x8000
    d2ec:	00450f02 	subeq	r0, r5, r2, lsl #30
    d2f0:	04010000 	streq	r0, [r1], #-0
    d2f4:	07210004 	streq	r0, [r1, -r4]!
    d2f8:	08000021 	stmdaeq	r0, {r0, r5}
    d2fc:	450f0224 	strmi	r0, [pc, #-548]	; d0e0 <__exidx_end+0x7420>
    d300:	01000000 	mrseq	r0, (UNDEF: 0)
    d304:	21000301 	tstcs	r0, r1, lsl #6
    d308:	000021c7 	andeq	r2, r0, r7, asr #3
    d30c:	0f022608 	svceq	0x00022608
    d310:	00000045 	andeq	r0, r0, r5, asr #32
    d314:	00010201 	andeq	r0, r1, r1, lsl #4
    d318:	001f8221 	andseq	r8, pc, r1, lsr #4
    d31c:	02270800 	eoreq	r0, r7, #0, 16
    d320:	0000450f 	andeq	r4, r0, pc, lsl #10
    d324:	00010100 	andeq	r0, r1, r0, lsl #2
    d328:	011a0000 	tsteq	sl, r0
    d32c:	04022a08 	streq	r2, [r2], #-2568	; 0xfffff5f8
    d330:	00001153 	andeq	r1, r0, r3, asr r1
    d334:	0025e421 	eoreq	lr, r5, r1, lsr #8
    d338:	022b0800 	eoreq	r0, fp, #0, 16
    d33c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d340:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d344:	27382100 	ldrcs	r2, [r8, -r0, lsl #2]!
    d348:	2c080000 	stccs	0, cr0, [r8], {-0}
    d34c:	00450f02 	subeq	r0, r5, r2, lsl #30
    d350:	04010000 	streq	r0, [r1], #-0
    d354:	1a000000 	bne	d35c <__exidx_end+0x769c>
    d358:	022e0802 	eoreq	r0, lr, #131072	; 0x20000
    d35c:	00118004 	andseq	r8, r1, r4
    d360:	221f2100 	andscs	r2, pc, #0, 2
    d364:	2f080000 	svccs	0x00080000
    d368:	00581002 	subseq	r1, r8, r2
    d36c:	03020000 	movweq	r0, #8192	; 0x2000
    d370:	1b21000d 	blne	84d3ac <__ccfg+0x82d404>
    d374:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d378:	58100232 	ldmdapl	r0, {r1, r4, r5, r9}
    d37c:	02000000 	andeq	r0, r0, #0
    d380:	0000000d 	andeq	r0, r0, sp
    d384:	3408041a 	strcc	r0, [r8], #-1050	; 0xfffffbe6
    d388:	11ad0402 			; <UNDEFINED> instruction: 0x11ad0402
    d38c:	b4210000 	strtlt	r0, [r1], #-0
    d390:	08000023 	stmdaeq	r0, {r0, r1, r5}
    d394:	6b100235 	blvs	40dc70 <__ccfg+0x3edcc8>
    d398:	04000000 	streq	r0, [r0], #-0
    d39c:	21001c04 	tstcs	r0, r4, lsl #24
    d3a0:	000024c4 	andeq	r2, r0, r4, asr #9
    d3a4:	10023708 	andne	r3, r2, r8, lsl #14
    d3a8:	0000006b 	andeq	r0, r0, fp, rrx
    d3ac:	00031504 	andeq	r1, r3, r4, lsl #10
    d3b0:	08011a00 	stmdaeq	r1, {r9, fp, ip}
    d3b4:	da04023a 	ble	10dca4 <__ccfg+0xedcfc>
    d3b8:	21000011 	tstcs	r0, r1, lsl r0
    d3bc:	00002610 	andeq	r2, r0, r0, lsl r6
    d3c0:	0f023b08 	svceq	0x00023b08
    d3c4:	00000045 	andeq	r0, r0, r5, asr #32
    d3c8:	00020601 	andeq	r0, r2, r1, lsl #12
    d3cc:	001fda21 	andseq	sp, pc, r1, lsr #20
    d3d0:	023d0800 	eorseq	r0, sp, #0, 16
    d3d4:	0000450f 	andeq	r4, r0, pc, lsl #10
    d3d8:	00020100 	andeq	r0, r2, r0, lsl #2
    d3dc:	021a0000 	andseq	r0, sl, #0
    d3e0:	04024208 	streq	r4, [r2], #-520	; 0xfffffdf8
    d3e4:	0000123a 	andeq	r1, r0, sl, lsr r2
    d3e8:	0023bd21 	eoreq	fp, r3, r1, lsr #26
    d3ec:	02430800 	subeq	r0, r3, #0, 16
    d3f0:	00005810 	andeq	r5, r0, r0, lsl r8
    d3f4:	0a060200 	beq	18dbfc <__ccfg+0x16dc54>
    d3f8:	22592100 	subscs	r2, r9, #0, 2
    d3fc:	44080000 	strmi	r0, [r8], #-0
    d400:	00581002 	subseq	r1, r8, r2
    d404:	01020000 	mrseq	r0, (UNDEF: 2)
    d408:	25210009 	strcs	r0, [r1, #-9]!
    d40c:	08000024 	stmdaeq	r0, {r2, r5}
    d410:	58100246 	ldmdapl	r0, {r1, r2, r6, r9}
    d414:	02000000 	andeq	r0, r0, #0
    d418:	21000801 	tstcs	r0, r1, lsl #16
    d41c:	00001fc2 	andeq	r1, r0, r2, asr #31
    d420:	10024808 	andne	r4, r2, r8, lsl #16
    d424:	00000058 	andeq	r0, r0, r8, asr r0
    d428:	00040402 	andeq	r0, r4, r2, lsl #8
    d42c:	001f6521 	andseq	r6, pc, r1, lsr #10
    d430:	024d0800 	subeq	r0, sp, #0, 16
    d434:	00005810 	andeq	r5, r0, r0, lsl r8
    d438:	00030200 	andeq	r0, r3, r0, lsl #4
    d43c:	021a0000 	andseq	r0, sl, #0
    d440:	04025608 	streq	r5, [r2], #-1544	; 0xfffff9f8
    d444:	00001289 	andeq	r1, r0, r9, lsl #5
    d448:	0021ba21 	eoreq	fp, r1, r1, lsr #20
    d44c:	02570800 	subseq	r0, r7, #0, 16
    d450:	00005810 	andeq	r5, r0, r0, lsl r8
    d454:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    d458:	21592100 	cmpcs	r9, r0, lsl #2
    d45c:	5d080000 	stcpl	0, cr0, [r8, #-0]
    d460:	00581002 	subseq	r1, r8, r2
    d464:	01020000 	mrseq	r0, (UNDEF: 2)
    d468:	f921000c 			; <UNDEFINED> instruction: 0xf921000c
    d46c:	08000020 	stmdaeq	r0, {r5}
    d470:	5810025f 	ldmdapl	r0, {r0, r1, r2, r3, r4, r6, r9}
    d474:	02000000 	andeq	r0, r0, #0
    d478:	21000606 	tstcs	r0, r6, lsl #12
    d47c:	000023f8 	strdeq	r2, [r0], -r8
    d480:	10026608 	andne	r6, r2, r8, lsl #12
    d484:	00000058 	andeq	r0, r0, r8, asr r0
    d488:	00050102 	andeq	r0, r5, r2, lsl #2
    d48c:	00770900 	rsbseq	r0, r7, r0, lsl #18
    d490:	12990000 	addsne	r0, r9, #0
    d494:	910a0000 	mrsls	r0, (UNDEF: 10)
    d498:	a2000000 	andge	r0, r0, #0
    d49c:	12890400 	addne	r0, r9, #0, 8
    d4a0:	c3220000 			; <UNDEFINED> instruction: 0xc3220000
    d4a4:	09000022 	stmdbeq	r0, {r1, r5}
    d4a8:	12991049 	addsne	r1, r9, #73	; 0x49
    d4ac:	028c0000 	addeq	r0, ip, #0
    d4b0:	210004ad 	smlatbcs	r0, sp, r4, r0
    d4b4:	21000449 	tstcs	r0, r9, asr #8
    d4b8:	2100047d 	tstcs	r0, sp, ror r4
    d4bc:	21000481 	smlabbcs	r0, r1, r4, r0
    d4c0:	21000511 	tstcs	r0, r1, lsl r5
    d4c4:	21000591 			; <UNDEFINED> instruction: 0x21000591
    d4c8:	21000641 	tstcs	r0, r1, asr #12
    d4cc:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    d4d0:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    d4d4:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    d4d8:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    d4dc:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    d4e0:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    d4e4:	d00b079b 	mulle	fp, fp, r7
    d4e8:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    d4ec:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    d4f0:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    d4f4:	240f490e 	strcs	r4, [pc], #-2318	; d4fc <__exidx_end+0x783c>
    d4f8:	43200224 			; <UNDEFINED> instruction: 0x43200224
    d4fc:	82c83160 	sbchi	r3, r8, #96, 2
    d500:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    d504:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    d508:	2100026b 	tstcs	r0, fp, ror #4
    d50c:	00004ce5 	andeq	r4, r0, r5, ror #25
    d510:	e0014809 	and	r4, r1, r9, lsl #16
    d514:	0c004808 	stceq	8, cr4, [r0], {8}
    d518:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    d51c:	2aff7822 	bcs	fffeb5ac <_estack+0xdffe65ac>
    d520:	7acad101 	bvc	ff2c192c <_estack+0xdf2bc92c>
    d524:	31607022 	cmncc	r0, r2, lsr #32
    d528:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    d52c:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    d530:	40086200 	andmi	r6, r8, r0, lsl #4
    d534:	210006a4 	smlatbcs	r0, r4, r6, r0
    d538:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    d53c:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    d540:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    d544:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    d548:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    d54c:	4a11d006 	bmi	48156c <__ccfg+0x4615c4>
    d550:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    d554:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    d558:	e000480f 	and	r4, r0, pc, lsl #16
    d55c:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    d560:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    d564:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    d568:	dcf92c00 	ldclle	12, cr2, [r9]
    d56c:	200140e3 	andcs	r4, r1, r3, ror #1
    d570:	18180340 	ldmdane	r8, {r6, r8, r9}
    d574:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    d578:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    d57c:	31802300 	orrcc	r2, r0, r0, lsl #6
    d580:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    d584:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    d588:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    d58c:	316c4b04 	cmncc	ip, r4, lsl #22
    d590:	0000e7f6 	strdeq	lr, [r0], -r6
    d594:	00005c83 	andeq	r5, r0, r3, lsl #25
    d598:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    d59c:	230d8300 	movwcs	r8, #54016	; 0xd300
    d5a0:	21000674 	tstcs	r0, r4, ror r6
    d5a4:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    d5a8:	6b714605 	blvs	1c5edc4 <__ccfg+0x1c3ee1c>
    d5ac:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    d5b0:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    d5b4:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    d5b8:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    d5bc:	7b00d00f 	blvc	41600 <__ccfg+0x21658>
    d5c0:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    d5c4:	4f152001 	svcmi	0x00152001
    d5c8:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    d5cc:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    d5d0:	09c18800 	stmibeq	r1, {fp, pc}^
    d5d4:	d00407c9 	andle	r0, r4, r9, asr #15
    d5d8:	7ac0e016 	bvc	ff045638 <_estack+0xdf040638>
    d5dc:	7b40e7f0 	blvc	10475a4 <__ccfg+0x10275fc>
    d5e0:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    d5e4:	61cc6374 	bicvs	r6, ip, r4, ror r3
    d5e8:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    d5ec:	2001d00c 	andcs	sp, r1, ip
    d5f0:	6b310380 	blvs	c4e3f8 <__ccfg+0xc2e450>
    d5f4:	d0012d00 	andle	r2, r1, r0, lsl #26
    d5f8:	e0004301 	and	r4, r0, r1, lsl #6
    d5fc:	46084381 	strmi	r4, [r8], -r1, lsl #7
    d600:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    d604:	63483940 	movtvs	r3, #35136	; 0x8940
    d608:	47b82000 	ldrmi	r2, [r8, r0]!
    d60c:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    d610:	21000280 	smlabbcs	r0, r0, r2, r0
    d614:	21000088 	smlabbcs	r0, r8, r0, r0
    d618:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    d61c:	00003f7b 	andeq	r3, r0, fp, ror pc
    d620:	40044040 	andmi	r4, r4, r0, asr #32
    d624:	4a22b510 	bmi	8baa6c <__ccfg+0x89aac4>
    d628:	61512100 	cmpvs	r1, r0, lsl #2
    d62c:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    d630:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    d634:	4b204921 	blmi	81fac0 <__ccfg+0x7ffb18>
    d638:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    d63c:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    d640:	e0004313 	and	r4, r0, r3, lsl r3
    d644:	634b4393 	movtvs	r4, #45971	; 0xb393
    d648:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    d64c:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    d650:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    d654:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    d658:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    d65c:	09c08800 	stmibeq	r0, {fp, pc}^
    d660:	d12207c0 	smlawtle	r2, r0, r7, r0
    d664:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    d668:	d11e2800 	tstle	lr, r0, lsl #16
    d66c:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    d670:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    d674:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    d678:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    d67c:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    d680:	2008d213 	andcs	sp, r8, r3, lsl r2
    d684:	6a686160 	bvs	1a25c0c <__ccfg+0x1a05c64>
    d688:	01400940 	cmpeq	r0, r0, asr #18
    d68c:	4a0e6020 	bmi	3a5714 <__ccfg+0x38576c>
    d690:	62d12100 	sbcsvs	r2, r1, #0, 2
    d694:	21024a0d 	tstcs	r2, sp, lsl #20
    d698:	21016011 	tstcs	r1, r1, lsl r0
    d69c:	60204308 	eorvs	r4, r0, r8, lsl #6
    d6a0:	43082103 	movwmi	r2, #33027	; 0x8103
    d6a4:	60206268 	eorvs	r6, r0, r8, ror #4
    d6a8:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    d6ac:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    d6b0:	40044000 	andmi	r4, r4, r0
    d6b4:	21000018 	tstcs	r0, r8, lsl r0
    d6b8:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    d6bc:	21000280 	smlabbcs	r0, r0, r2, r0
    d6c0:	000068cf 	andeq	r6, r0, pc, asr #17
    d6c4:	21000068 	tstcs	r0, r8, rrx
    d6c8:	40041100 	andmi	r1, r4, r0, lsl #2
    d6cc:	e000e280 	and	lr, r0, r0, lsl #5
    d6d0:	00003bc3 	andeq	r3, r0, r3, asr #23
    d6d4:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    d6d8:	2004d000 	andcs	sp, r4, r0
    d6dc:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    d6e0:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    d6e4:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    d6e8:	2080e000 	addcs	lr, r0, r0
    d6ec:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    d6f0:	00004770 	andeq	r4, r0, r0, ror r7
    d6f4:	2100026b 	tstcs	r0, fp, ror #4
    d6f8:	40046058 	andmi	r6, r4, r8, asr r0
    d6fc:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    d700:	bd019001 	stclt	0, cr9, [r1, #-4]
    d704:	00006fa5 	andeq	r6, r0, r5, lsr #31
    d708:	00000000 	andeq	r0, r0, r0
    d70c:	00030001 	andeq	r0, r3, r1
    d710:	001f000a 	andseq	r0, pc, sl
    d714:	00eb0059 	rsceq	r0, fp, r9, asr r0
    d718:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    d71c:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    d720:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    d724:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    d728:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    d72c:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    d730:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    d734:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    d738:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    d73c:	00007709 	andeq	r7, r0, r9, lsl #14
    d740:	00154900 	andseq	r4, r5, r0, lsl #18
    d744:	00912300 	addseq	r2, r1, r0, lsl #6
    d748:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    d74c:	15380400 	ldrne	r0, [r8, #-1024]!	; 0xfffffc00
    d750:	4c220000 	stcmi	0, cr0, [r2], #-0
    d754:	0a000023 	beq	d7e8 <__exidx_end+0x7b28>
    d758:	1549103a 	strbne	r1, [r9, #-58]	; 0xffffffc6
    d75c:	06b40000 	ldrteq	r0, [r4], r0
    d760:	000061a3 	andeq	r6, r0, r3, lsr #3
    d764:	1307147f 	movwne	r1, #29823	; 0x747f
    d768:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    d76c:	3f131f2e 	svccc	0x00131f2e
    d770:	003f0ab0 	ldrhteq	r0, [pc], -r0
    d774:	0000ff07 	andeq	pc, r0, r7, lsl #30
    d778:	40004030 	andmi	r4, r0, r0, lsr r0
    d77c:	40034001 	andmi	r4, r3, r1
    d780:	400f4007 	andmi	r4, pc, r7
    d784:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    d788:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    d78c:	4fcf47cf 	svcmi	0x00cf47cf
    d790:	2fcf3fcf 	svccs	0x00cf3fcf
    d794:	0fcf1fcf 	svceq	0x00cf1fcf
    d798:	00000000 	andeq	r0, r0, r0
    d79c:	0008000f 	andeq	r0, r8, pc
    d7a0:	003f0000 	eorseq	r0, pc, r0
    d7a4:	00400000 	subeq	r0, r0, r0
    d7a8:	0000003f 	andeq	r0, r0, pc, lsr r0
    d7ac:	00680004 	rsbeq	r0, r8, r4
    d7b0:	00dc000e 	sbcseq	r0, ip, lr
    d7b4:	00430006 	subeq	r0, r3, r6
    d7b8:	0005001a 	andeq	r0, r5, sl, lsl r0
    d7bc:	00000000 	andeq	r0, r0, r0
    d7c0:	00000002 	andeq	r0, r0, r2
    d7c4:	0000003f 	andeq	r0, r0, pc, lsr r0
    d7c8:	00040000 	andeq	r0, r4, r0
    d7cc:	000000c0 	andeq	r0, r0, r0, asr #1
    d7d0:	00c00004 	sbceq	r0, r0, r4
    d7d4:	00070000 	andeq	r0, r7, r0
    d7d8:	9100c050 	qaddls	ip, r0, r0
    d7dc:	c0707000 	rsbsgt	r7, r0, r0
    d7e0:	70009100 	andvc	r9, r0, r0, lsl #2
    d7e4:	00213182 	eoreq	r3, r1, r2, lsl #3
    d7e8:	b1109131 	tstlt	r0, r1, lsr r1
    d7ec:	81017000 	mrshi	r7, (UNDEF: 1)
    d7f0:	a100b101 	tstge	r0, r1, lsl #2
    d7f4:	91323182 	teqls	r2, r2, lsl #3
    d7f8:	9101b110 	tstls	r1, r0, lsl r1
    d7fc:	81411011 	cmphi	r1, r1, lsl r0
    d800:	404f2241 	submi	r2, pc, r1, asr #4
    d804:	700006f1 	strdvc	r0, [r0], -r1
    d808:	9101c051 	qaddls	ip, r1, r1
    d80c:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    d810:	d0083183 	andle	r3, r8, r3, lsl #3
    d814:	6f413118 	svcvs	0x00413118
    d818:	91310031 	teqls	r1, r1, lsr r0
    d81c:	1483b110 	strne	fp, [r3], #272	; 0x110
    d820:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    d824:	10257000 	eorne	r7, r5, r0
    d828:	9100c050 	qaddls	ip, r0, r0
    d82c:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    d830:	6f031420 	svcvs	0x00031420
    d834:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    d838:	3182c022 	orrcc	ip, r2, r2, lsr #32
    d83c:	91310021 	teqls	r1, r1, lsr #32
    d840:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    d844:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    d848:	3182c082 	orrcc	ip, r2, r2, lsl #1
    d84c:	91310021 	teqls	r1, r1, lsr #32
    d850:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    d854:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    d858:	00213182 	eoreq	r3, r1, r2, lsl #3
    d85c:	b1109131 	tstlt	r0, r1, lsr r1
    d860:	31151050 	tstcc	r5, r0, asr r0
    d864:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    d868:	643f7000 	ldrtvs	r7, [pc], #-0	; d870 <__exidx_end+0x7bb0>
    d86c:	1031c052 	eorsne	ip, r1, r2, asr r0
    d870:	31610631 	cmncc	r1, r1, lsr r6
    d874:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    d878:	1031c112 	eorsne	ip, r1, r2, lsl r1
    d87c:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    d880:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    d884:	70006442 	andvc	r6, r0, r2, asr #8
    d888:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    d88c:	8220c088 	eorhi	ip, r0, #136	; 0x88
    d890:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    d894:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    d898:	3001c041 	andcc	ip, r1, r1, asr #32
    d89c:	1a181418 	bne	612904 <__ccfg+0x5f295c>
    d8a0:	8230c089 	eorshi	ip, r0, #137	; 0x89
    d8a4:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    d8a8:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    d8ac:	3001c041 	andcc	ip, r1, r1, asr #32
    d8b0:	1a191419 	bne	65291c <__ccfg+0x632974>
    d8b4:	9136643c 	teqls	r6, ip, lsr r4
    d8b8:	9134b110 	teqls	r4, r0, lsl r1
    d8bc:	b054b110 	subslt	fp, r4, r0, lsl r1
    d8c0:	a0547100 	subsge	r7, r4, r0, lsl #2
    d8c4:	80f0b064 	rscshi	fp, r0, r4, rrx
    d8c8:	40af2200 	adcmi	r2, pc, r0, lsl #4
    d8cc:	90b01240 	adcsls	r1, r0, r0, asr #4
    d8d0:	8253b032 	subshi	fp, r3, #50	; 0x32
    d8d4:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    d8d8:	643f6485 	ldrtvs	r6, [pc], #-1157	; d8e0 <__exidx_end+0x7c20>
    d8dc:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    d8e0:	c1706442 	cmngt	r0, r2, asr #8
    d8e4:	c11168c2 	tstgt	r1, r2, asr #17
    d8e8:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    d8ec:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    d8f0:	9100c050 	qaddls	ip, r0, r0
    d8f4:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    d8f8:	16141615 			; <UNDEFINED> instruction: 0x16141615
    d8fc:	10531042 	subsne	r1, r3, r2, asr #32
    d900:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    d904:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    d908:	31313981 	teqcc	r1, r1, lsl #19
    d90c:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    d910:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    d914:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    d918:	10731062 	rsbsne	r1, r3, r2, rrx
    d91c:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    d920:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    d924:	101b3981 	andsne	r3, fp, r1, lsl #19
    d928:	c0e26572 	rscgt	r6, r2, r2, ror r5
    d92c:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    d930:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    d934:	b0610002 	rsblt	r0, r1, r2
    d938:	91327100 	teqls	r2, r0, lsl #2
    d93c:	a051b110 	subsge	fp, r1, r0, lsl r1
    d940:	7227b061 	eorvc	fp, r7, #97	; 0x61
    d944:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    d948:	12800000 	addne	r0, r0, #0
    d94c:	b03290b0 	ldrhtlt	r9, [r2], -r0
    d950:	c0507000 	subsgt	r7, r0, r0
    d954:	72279100 	eorvc	r9, r7, #0, 2
    d958:	10629299 	mlsne	r2, r9, r2, r9
    d95c:	c3f01073 	mvnsgt	r1, #115	; 0x73
    d960:	31218231 			; <UNDEFINED> instruction: 0x31218231
    d964:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    d968:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    d96c:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    d970:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    d974:	10531042 	subsne	r1, r3, r2, asr #32
    d978:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    d97c:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    d980:	31313981 	teqcc	r1, r1, lsl #19
    d984:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    d988:	b061a051 	rsblt	sl, r1, r1, asr r0
    d98c:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    d990:	643f6918 	ldrtvs	r6, [pc], #-2328	; d998 <__exidx_end+0x7cd8>
    d994:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    d998:	c1016442 	tstgt	r1, r2, asr #8
    d99c:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    d9a0:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    d9a4:	b1109135 	tstlt	r0, r5, lsr r1
    d9a8:	64858253 	strvs	r8, [r5], #595	; 0x253
    d9ac:	90b012c0 	adcsls	r1, r0, r0, asr #5
    d9b0:	7000b032 	andvc	fp, r0, r2, lsr r0
    d9b4:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    d9b8:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    d9bc:	c111c122 	tstgt	r1, r2, lsr #2
    d9c0:	c0026442 	andgt	r6, r2, r2, asr #8
    d9c4:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    d9c8:	c331c062 	teqgt	r1, #98	; 0x62
    d9cc:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    d9d0:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    d9d4:	c111c302 	tstgt	r1, r2, lsl #6
    d9d8:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    d9dc:	64853953 	strvs	r3, [r5], #2387	; 0x953
    d9e0:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    d9e4:	41402211 	cmpmi	r0, r1, lsl r2
    d9e8:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    d9ec:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    d9f0:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    d9f4:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    d9f8:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    d9fc:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    da00:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    da04:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    da08:	70006954 	andvc	r6, r0, r4, asr r9
    da0c:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    da10:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    da14:	c011c252 	andsgt	ip, r1, r2, asr r2
    da18:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    da1c:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    da20:	c101c002 	tstgt	r1, r2
    da24:	c0626442 	rsbgt	r6, r2, r2, asr #8
    da28:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    da2c:	c101c122 	tstgt	r1, r2, lsr #2
    da30:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    da34:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    da38:	c101c302 	tstgt	r1, r2, lsl #6
    da3c:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    da40:	70006485 	andvc	r6, r0, r5, lsl #9
    da44:	7100b061 	tstvc	r0, r1, rrx
    da48:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    da4c:	91334d7a 	teqls	r3, sl, ror sp
    da50:	7000b110 	andvc	fp, r0, r0, lsl r1
    da54:	b1109132 	tstlt	r0, r2, lsr r1
    da58:	70006972 	andvc	r6, r0, r2, ror r9
    da5c:	7100b061 	tstvc	r0, r1, rrx
    da60:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    da64:	91324986 	teqls	r2, r6, lsl #19
    da68:	7000b110 	andvc	fp, r0, r0, lsl r1
    da6c:	b1109133 	tstlt	r0, r3, lsr r1
    da70:	7000697e 	andvc	r6, r0, lr, ror r9
    da74:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    da78:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    da7c:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    da80:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    da84:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    da88:	10541405 	subsne	r1, r4, r5, lsl #8
    da8c:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    da90:	c0e67000 	rscgt	r7, r6, r0
    da94:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    da98:	10671416 	rsbne	r1, r7, r6, lsl r4
    da9c:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    daa0:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    daa4:	73067000 	movwvc	r7, #24576	; 0x6000
    daa8:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    daac:	b050720e 	subslt	r7, r0, lr, lsl #4
    dab0:	80817100 	addhi	r7, r1, r0, lsl #2
    dab4:	a050b060 	subsge	fp, r0, r0, rrx
    dab8:	22418092 	subcs	r8, r1, #146	; 0x92
    dabc:	808045c3 	addhi	r4, r0, r3, asr #11
    dac0:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    dac4:	11011630 	tstne	r1, r0, lsr r6
    dac8:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    dacc:	61d761d6 	ldrsbvs	r6, [r7, #22]
    dad0:	61d961d8 	ldrsbvs	r6, [r9, #24]
    dad4:	61db61da 	ldrsbvs	r6, [fp, #26]
    dad8:	61de61dc 	ldrsbvs	r6, [lr, #28]
    dadc:	61e261e0 	mvnvs	r6, r0, ror #3
    dae0:	633661e4 	teqvs	r6, #228, 2	; 0x39
    dae4:	80916339 	addshi	r6, r1, r9, lsr r3
    dae8:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    daec:	80823121 	addhi	r3, r2, r1, lsr #2
    daf0:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    daf4:	11011632 	tstne	r1, r2, lsr r6
    daf8:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    dafc:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    db00:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    db04:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    db08:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    db0c:	61e661e6 	mvnvs	r6, r6, ror #3
    db10:	61e661e6 	mvnvs	r6, r6, ror #3
    db14:	61e661e6 	mvnvs	r6, r6, ror #3
    db18:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    db1c:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    db20:	61e6652a 	mvnvs	r6, sl, lsr #10
    db24:	61e66556 	mvnvs	r6, r6, asr r5
    db28:	61e66746 	mvnvs	r6, r6, asr #14
    db2c:	90b01210 	adcsls	r1, r0, r0, lsl r2
    db30:	7306720e 	movwvc	r7, #25102	; 0x620e
    db34:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    db38:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    db3c:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    db40:	c003c1d4 	ldrdgt	ip, [r3], -r4
    db44:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    db48:	91507840 	cmpls	r0, r0, asr #16
    db4c:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    db50:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    db54:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    db58:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    db5c:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    db60:	91907830 	orrsls	r7, r0, r0, lsr r8
    db64:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    db68:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    db6c:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    db70:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    db74:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    db78:	a054a0e2 	subsge	sl, r4, r2, ror #1
    db7c:	225080f0 	subscs	r8, r0, #240	; 0xf0
    db80:	80404615 	subhi	r4, r0, r5, lsl r6
    db84:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    db88:	a040620d 	subge	r6, r0, sp, lsl #4
    db8c:	318d822d 	orrcc	r8, sp, sp, lsr #4
    db90:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    db94:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    db98:	821a1009 	andshi	r1, sl, #9
    db9c:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    dba0:	39808210 	stmibcc	r0, {r4, r9, pc}
    dba4:	100e0410 	andne	r0, lr, r0, lsl r4
    dba8:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    dbac:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    dbb0:	cfe07229 	svcgt	0x00e07229
    dbb4:	b013673c 	andslt	r6, r3, ip, lsr r7
    dbb8:	66c8b003 	strbvs	fp, [r8], r3
    dbbc:	b050b053 	subslt	fp, r0, r3, asr r0
    dbc0:	b064b054 	rsblt	fp, r4, r4, asr r0
    dbc4:	66a5b013 	ssatvs	fp, #6, r3
    dbc8:	22e08210 	rsccs	r8, r0, #16, 4
    dbcc:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    dbd0:	80417100 	subhi	r7, r1, r0, lsl #2
    dbd4:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    dbd8:	221080f0 	andscs	r8, r0, #240	; 0xf0
    dbdc:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    dbe0:	b0644718 	rsblt	r4, r4, r8, lsl r7
    dbe4:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    dbe8:	66ceb063 	strbvs	fp, [lr], r3, rrx
    dbec:	22e08210 	rsccs	r8, r0, #16, 4
    dbf0:	66704638 			; <UNDEFINED> instruction: 0x66704638
    dbf4:	b0646238 	rsblt	r6, r4, r8, lsr r2
    dbf8:	318f816f 	orrcc	r8, pc, pc, ror #2
    dbfc:	dfd03d8f 	svcle	0x00d03d8f
    dc00:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    dc04:	80417100 	subhi	r7, r1, r0, lsl #2
    dc08:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    dc0c:	80f0b064 	rscshi	fp, r0, r4, rrx
    dc10:	42652250 	rsbmi	r2, r5, #80, 4
    dc14:	8211b063 	andshi	fp, r1, #99	; 0x63
    dc18:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    dc1c:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    dc20:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    dc24:	66704652 			; <UNDEFINED> instruction: 0x66704652
    dc28:	81616252 	cmnhi	r1, r2, asr r2
    dc2c:	31818172 	orrcc	r8, r1, r2, ror r1
    dc30:	31823d81 	orrcc	r3, r2, r1, lsl #27
    dc34:	efc03d82 	svc	0x00c03d82
    dc38:	930292f1 	movwls	r9, #8945	; 0x22f1
    dc3c:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    dc40:	91c081b0 	strhls	r8, [r0, #16]
    dc44:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    dc48:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    dc4c:	0bf34e7f 	bleq	ffce1650 <_estack+0xdfcdc650>
    dc50:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    dc54:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    dc58:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    dc5c:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    dc60:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    dc64:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    dc68:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    dc6c:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    dc70:	1a1ba290 	bne	6f66b8 <__ccfg+0x6d6710>
    dc74:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    dc78:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    dc7c:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    dc80:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    dc84:	4aa21c9b 	bmi	fe894ef8 <_estack+0xde88fef8>
    dc88:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    dc8c:	821010b2 	andshi	r1, r0, #178	; 0xb2
    dc90:	429d22d0 	addsmi	r2, sp, #208, 4
    dc94:	221080f0 	andscs	r8, r0, #240	; 0xf0
    dc98:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    dc9c:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    dca0:	629410ab 	addsvs	r1, r4, #171	; 0xab
    dca4:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    dca8:	82307000 	eorshi	r7, r0, #0
    dcac:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    dcb0:	7100b063 	tstvc	r0, r3, rrx
    dcb4:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    dcb8:	7000b0e0 	andvc	fp, r0, r0, ror #1
    dcbc:	91c281b2 	strhls	r8, [r2, #18]
    dcc0:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    dcc4:	81511812 	cmphi	r1, r2, lsl r8
    dcc8:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    dccc:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    dcd0:	4abf1c12 	bmi	fefd4d20 <_estack+0xdefcfd20>
    dcd4:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    dcd8:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    dcdc:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    dce0:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    dce4:	9162c812 	cmnls	r2, r2, lsl r8
    dce8:	b0319172 	eorslt	r9, r1, r2, ror r1
    dcec:	7000b0e1 	andvc	fp, r0, r1, ror #1
    dcf0:	c006c008 	andgt	ip, r6, r8
    dcf4:	9160c800 	cmnls	r0, r0, lsl #16
    dcf8:	70009170 	andvc	r9, r0, r0, ror r1
    dcfc:	81b08201 	lslshi	r8, r1, #4
    dd00:	81d091c0 	bicshi	r9, r0, r0, asr #3
    dd04:	81511810 	cmphi	r1, r0, lsl r8
    dd08:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    dd0c:	824280e1 	subhi	r8, r2, #225	; 0xe1
    dd10:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    dd14:	4ae41c20 	bmi	ff914d9c <_estack+0xdf90fd9c>
    dd18:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    dd1c:	b03246e8 	eorslt	r4, r2, r8, ror #13
    dd20:	dfa01005 	svcle	0x00a01005
    dd24:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    dd28:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    dd2c:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    dd30:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    dd34:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    dd38:	42f61e01 	rscsmi	r1, r6, #1, 28
    dd3c:	c0101618 	andsgt	r1, r0, r8, lsl r6
    dd40:	1c083010 	stcne	0, cr3, [r8], {16}
    dd44:	10604704 	rsbne	r4, r0, r4, lsl #14
    dd48:	10063c10 	andne	r3, r6, r0, lsl ip
    dd4c:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    dd50:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    dd54:	81719166 	cmnhi	r1, r6, ror #2
    dd58:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    dd5c:	4b011c16 	blmi	54dbc <__ccfg+0x34e14>
    dd60:	b0319176 	eorslt	r9, r1, r6, ror r1
    dd64:	c008c006 	andgt	ip, r8, r6
    dd68:	81617000 	cmnhi	r1, r0
    dd6c:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    dd70:	39808240 	stmibcc	r0, {r6, r9, pc}
    dd74:	1cf11801 	ldclne	8, cr1, [r1], #4
    dd78:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    dd7c:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    dd80:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    dd84:	ef90b033 	svc	0x0090b033
    dd88:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    dd8c:	7000673c 	andvc	r6, r0, ip, lsr r7
    dd90:	b063a003 	rsblt	sl, r3, r3
    dd94:	b0efb064 	rsclt	fp, pc, r4, rrx
    dd98:	71006556 	tstvc	r0, r6, asr r5
    dd9c:	22008040 	andcs	r8, r0, #64	; 0x40
    dda0:	b064472b 	rsblt	r4, r4, fp, lsr #14
    dda4:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    dda8:	80407100 	subhi	r7, r0, r0, lsl #2
    ddac:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    ddb0:	b003b064 	andlt	fp, r3, r4, rrx
    ddb4:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    ddb8:	31828162 	orrcc	r8, r2, r2, ror #2
    ddbc:	ef803d82 	svc	0x00803d82
    ddc0:	930292f1 	movwls	r9, #8945	; 0x22f1
    ddc4:	a003673c 	andge	r6, r3, ip, lsr r7
    ddc8:	61e66556 	mvnvs	r6, r6, asr r5
    ddcc:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    ddd0:	b05061e6 	subslt	r6, r0, r6, ror #3
    ddd4:	61e67100 	mvnvs	r7, r0, lsl #2
    ddd8:	82d092e0 	sbcshi	r9, r0, #224, 4
    dddc:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    dde0:	7000b2c0 	andvc	fp, r0, r0, asr #5
    dde4:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    dde8:	b0304359 	eorslt	r4, r0, r9, asr r3
    ddec:	3162c102 	cmncc	r2, r2, lsl #2
    ddf0:	80a0c001 	adchi	ip, r0, r1
    ddf4:	43521e00 	cmpmi	r2, #0, 28
    ddf8:	435322f0 	cmpmi	r3, #240, 4
    ddfc:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    de00:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    de04:	1a101020 	bne	411e8c <__ccfg+0x3f1ee4>
    de08:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    de0c:	16121611 			; <UNDEFINED> instruction: 0x16121611
    de10:	70006b54 	andvc	r6, r0, r4, asr fp
    de14:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    de18:	12270b00 	eorne	r0, r7, #0, 22
    de1c:	00000058 	andeq	r0, r0, r8, asr r0
    de20:	001c1004 	andseq	r1, ip, r4
    de24:	1c102400 	cfldrsne	mvf2, [r0], {-0}
    de28:	c2030000 	andgt	r0, r3, #0
    de2c:	0b00001d 	bleq	dea8 <__exidx_end+0x81e8>
    de30:	0045122b 	subeq	r1, r5, fp, lsr #4
    de34:	26240000 	strtcs	r0, [r4], -r0
    de38:	0300001c 	movweq	r0, #28
    de3c:	0000294d 	andeq	r2, r0, sp, asr #18
    de40:	6b122c0b 	blvs	498e74 <__ccfg+0x478ecc>
    de44:	04000000 	streq	r0, [r0], #-0
    de48:	00001c37 	andeq	r1, r0, r7, lsr ip
    de4c:	00064603 	andeq	r4, r6, r3, lsl #12
    de50:	122d0b00 	eorne	r0, sp, #0, 22
    de54:	0000006b 	andeq	r0, r0, fp, rrx
    de58:	320b080b 	andcc	r0, fp, #720896	; 0xb0000
    de5c:	001ce209 	andseq	lr, ip, r9, lsl #4
    de60:	00342000 	eorseq	r2, r4, r0
    de64:	340b0000 	strcc	r0, [fp], #-0
    de68:	001c2607 	andseq	r2, ip, r7, lsl #12
    de6c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    de70:	064c2000 	strbeq	r2, [ip], -r0
    de74:	350b0000 	strcc	r0, [fp, #-0]
    de78:	001c2603 	andseq	r2, ip, r3, lsl #12
    de7c:	06010100 	streq	r0, [r1], -r0, lsl #2
    de80:	02e72000 	rsceq	r2, r7, #0
    de84:	360b0000 	strcc	r0, [fp], -r0
    de88:	001c2603 	andseq	r2, ip, r3, lsl #12
    de8c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    de90:	06b72000 	ldrteq	r2, [r7], r0
    de94:	370b0000 	strcc	r0, [fp, -r0]
    de98:	001c2603 	andseq	r2, ip, r3, lsl #12
    de9c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    dea0:	0a9f2000 	beq	fe7d5ea8 <_estack+0xde7d0ea8>
    dea4:	380b0000 	stmdacc	fp, {}	; <UNPREDICTABLE>
    dea8:	001c2603 	andseq	r2, ip, r3, lsl #12
    deac:	00040100 	andeq	r0, r4, r0, lsl #2
    deb0:	065b0c00 	ldrbeq	r0, [fp], -r0, lsl #24
    deb4:	3a0b0000 	bcc	2cdebc <__ccfg+0x2adf14>
    deb8:	001c2607 	andseq	r2, ip, r7, lsl #12
    debc:	fb0c0100 	blx	30e2c6 <__ccfg+0x2ee31e>
    dec0:	0b000008 	bleq	dee8 <__exidx_end+0x8228>
    dec4:	1c26033c 	stcne	3, cr0, [r6], #-240	; 0xffffff10
    dec8:	0c020000 	stceq	0, cr0, [r2], {-0}
    decc:	00000f3a 	andeq	r0, r0, sl, lsr pc
    ded0:	26033d0b 	strcs	r3, [r3], -fp, lsl #26
    ded4:	0300001c 	movweq	r0, #28
    ded8:	0009130c 	andeq	r1, r9, ip, lsl #6
    dedc:	083f0b00 	ldmdaeq	pc!, {r8, r9, fp}	; <UNPREDICTABLE>
    dee0:	00001c37 	andeq	r1, r0, r7, lsr ip
    dee4:	1d030004 	stcne	0, cr0, [r3, #-16]
    dee8:	0b000003 	bleq	defc <__exidx_end+0x823c>
    deec:	1c540341 	mrrcne	3, 4, r0, r4, cr1
    def0:	e2240000 	eor	r0, r4, #0
    def4:	2500001c 	strcs	r0, [r0, #-28]	; 0xffffffe4
    def8:	000006be 			; <UNDEFINED> instruction: 0x000006be
    defc:	ee1a430b 	cdp	3, 1, cr4, cr10, cr11, {0}
    df00:	0100001c 	tsteq	r0, ip, lsl r0
    df04:	01a02501 	lsleq	r2, r1, #10
    df08:	450b0000 	strmi	r0, [fp, #-0]
    df0c:	0005de0e 	andeq	sp, r5, lr, lsl #28
    df10:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    df14:	00000326 	andeq	r0, r0, r6, lsr #6
    df18:	de1e450b 	cfmul32le	mvfx4, mvfx14, mvfx11
    df1c:	01000005 	tsteq	r0, r5
    df20:	0c080b01 			; <UNDEFINED> instruction: 0x0c080b01
    df24:	1d4e098f 	vstrne.16	s1, [lr, #-286]	; 0xfffffee2	; <UNPREDICTABLE>
    df28:	d80c0000 	stmdale	ip, {}	; <UNPREDICTABLE>
    df2c:	0c00000c 	stceq	0, cr0, [r0], {12}
    df30:	006b0b90 	mlseq	fp, r0, fp, r0
    df34:	0c000000 	stceq	0, cr0, [r0], {-0}
    df38:	00001075 	andeq	r1, r0, r5, ror r0
    df3c:	1008910c 	andne	r9, r8, ip, lsl #2
    df40:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    df44:	0001c50c 	andeq	ip, r1, ip, lsl #10
    df48:	10920c00 	addsne	r0, r2, r0, lsl #24
    df4c:	00001c32 	andeq	r1, r0, r2, lsr ip
    df50:	cc030006 	stcgt	0, cr0, [r3], {6}
    df54:	0c00000c 	stceq	0, cr0, [r0], {12}
    df58:	1d1d0393 	ldcne	3, cr0, [sp, #-588]	; 0xfffffdb4
    df5c:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    df60:	6500001d 	strvs	r0, [r0, #-29]	; 0xffffffe3
    df64:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
    df68:	093d2500 	ldmdbeq	sp!, {r8, sl, sp}
    df6c:	990c0000 	stmdbls	ip, {}	; <UNPREDICTABLE>
    df70:	001d5a0f 	andseq	r5, sp, pc, lsl #20
    df74:	0b010100 	bleq	4e37c <__ccfg+0x2e3d4>
    df78:	09910d01 	ldmibeq	r1, {r0, r8, sl, fp}
    df7c:	00001d9d 	muleq	r0, sp, sp
    df80:	00091a20 	andeq	r1, r9, r0, lsr #20
    df84:	07930d00 	ldreq	r0, [r3, r0, lsl #26]
    df88:	00001c26 	andeq	r1, r0, r6, lsr #24
    df8c:	00010701 	andeq	r0, r1, r1, lsl #14
    df90:	0005cc20 	andeq	ip, r5, r0, lsr #24
    df94:	03940d00 	orrseq	r0, r4, #0, 26
    df98:	00001c26 	andeq	r1, r0, r6, lsr #24
    df9c:	00000101 	andeq	r0, r0, r1, lsl #2
    dfa0:	0aab0300 	beq	feaceba8 <_estack+0xdeac9ba8>
    dfa4:	960d0000 	strls	r0, [sp], -r0
    dfa8:	001d7303 	andseq	r7, sp, r3, lsl #6
    dfac:	1d9d0400 	cfldrsne	mvf0, [sp]
    dfb0:	a9090000 	stmdbge	r9, {}	; <UNPREDICTABLE>
    dfb4:	b900001d 	stmdblt	r0, {r0, r2, r3, r4}
    dfb8:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
    dfbc:	1dae0400 	cfstrsne	mvf0, [lr]
    dfc0:	aa250000 	bge	94dfc8 <__ccfg+0x92e020>
    dfc4:	0d000003 	stceq	0, cr0, [r0, #-12]
    dfc8:	1db9179c 	ldcne	7, cr1, [r9, #624]!	; 0x270
    dfcc:	01010000 	mrseq	r0, (UNDEF: 1)
    dfd0:	001c1c09 	andseq	r1, ip, r9, lsl #24
    dfd4:	001dd700 	andseq	sp, sp, r0, lsl #14
    dfd8:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    dfdc:	00001dcc 	andeq	r1, r0, ip, asr #27
    dfe0:	00060e25 	andeq	r0, r6, r5, lsr #28
    dfe4:	13060e00 	movwne	r0, #28160	; 0x6e00
    dfe8:	00001dd7 	ldrdeq	r1, [r0], -r7
    dfec:	dd250101 	stfles	f0, [r5, #-4]!
    dff0:	0c000008 	stceq	0, cr0, [r0], {8}
    dff4:	1c370ec3 	ldcne	14, cr0, [r7], #-780	; 0xfffffcf4
    dff8:	01010000 	mrseq	r0, (UNDEF: 1)
    dffc:	000c7206 	andeq	r7, ip, r6, lsl #4
    e000:	016e0f00 	cmneq	lr, r0, lsl #30
    e004:	001e0510 	andseq	r0, lr, r0, lsl r5
    e008:	0b041000 	bleq	112010 <__ccfg+0xf2068>
    e00c:	1e00001e 	mcrne	0, 0, r0, cr0, cr14, {0}
    e010:	001e1701 	andseq	r1, lr, r1, lsl #14
    e014:	1c101500 	cfldr32ne	mvfx1, [r0], {-0}
    e018:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    e01c:	000005eb 	andeq	r0, r0, fp, ror #11
    e020:	00001e22 	andeq	r1, r0, r2, lsr #28
    e024:	17040026 	strne	r0, [r4, -r6, lsr #32]
    e028:	1f00001e 	svcne	0x0000001e
    e02c:	000009e6 	andeq	r0, r0, r6, ror #19
    e030:	16017f0f 	strne	r7, [r1], -pc, lsl #30
    e034:	00001e22 	andeq	r1, r0, r2, lsr #28
    e038:	961f0101 	ldrls	r0, [pc], -r1, lsl #2
    e03c:	0f000003 	svceq	0x00000003
    e040:	43140182 	tstmi	r4, #-2147483616	; 0x80000020
    e044:	0100001c 	tsteq	r0, ip, lsl r0
    e048:	036e1f01 	cmneq	lr, #1, 30
    e04c:	d80f0000 	stmdale	pc, {}	; <UNPREDICTABLE>
    e050:	1c370e02 	ldcne	14, cr0, [r7], #-8
    e054:	01010000 	mrseq	r0, (UNDEF: 1)
    e058:	030f081a 	movweq	r0, #63514	; 0xf81a
    e05c:	1e7b0903 	vaddne.f16	s1, s22, s6	; <UNPREDICTABLE>
    e060:	a1170000 	tstge	r7, r0
    e064:	0f00003c 	svceq	0x0000003c
    e068:	10070307 	andne	r0, r7, r7, lsl #6
    e06c:	0000001c 	andeq	r0, r0, ip, lsl r0
    e070:	000fcd17 	andeq	ip, pc, r7, lsl sp	; <UNPREDICTABLE>
    e074:	03080f00 	movweq	r0, #36608	; 0x8f00
    e078:	001c4808 	andseq	r4, ip, r8, lsl #16
    e07c:	06000400 	streq	r0, [r0], -r0, lsl #8
    e080:	00000a09 	andeq	r0, r0, r9, lsl #20
    e084:	0303090f 	movweq	r0, #14607	; 0x390f
    e088:	00001e54 	andeq	r1, r0, r4, asr lr
    e08c:	00002919 	andeq	r2, r0, r9, lsl r9
    e090:	0b0f3000 	bleq	3da098 <__ccfg+0x3ba0f0>
    e094:	1eeb0803 	cdpne	8, 14, cr0, cr11, cr3, {0}
    e098:	24170000 	ldrcs	r0, [r7], #-0
    e09c:	0f00001f 	svceq	0x0000001f
    e0a0:	10080314 	andne	r0, r8, r4, lsl r3
    e0a4:	0000001c 	andeq	r0, r0, ip, lsl r0
    e0a8:	000be717 	andeq	lr, fp, r7, lsl r7
    e0ac:	03150f00 	tsteq	r5, #0, 30
    e0b0:	001c1008 	andseq	r1, ip, r8
    e0b4:	8e170200 	cdphi	2, 1, cr0, cr7, cr0, {0}
    e0b8:	0f00004c 	svceq	0x0000004c
    e0bc:	f80b0316 			; <UNDEFINED> instruction: 0xf80b0316
    e0c0:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    e0c4:	00475417 	subeq	r5, r7, r7, lsl r4
    e0c8:	03170f00 	tsteq	r7, #0, 30
    e0cc:	001c4809 	andseq	r4, ip, r9, lsl #16
    e0d0:	0f170800 	svceq	0x00170800
    e0d4:	0f000000 	svceq	0x00000000
    e0d8:	eb0f0318 	bl	3ced40 <__ccfg+0x3aed98>
    e0dc:	0c00001e 	stceq	0, cr0, [r0], {30}
    e0e0:	00095d17 	andeq	r5, r9, r7, lsl sp
    e0e4:	03190f00 	tsteq	r9, #0, 30
    e0e8:	001efb15 	andseq	pc, lr, r5, lsl fp	; <UNPREDICTABLE>
    e0ec:	09002c00 	stmdbeq	r0, {sl, fp, sp}
    e0f0:	00001e7b 	andeq	r1, r0, fp, ror lr
    e0f4:	00001efb 	strdeq	r1, [r0], -fp
    e0f8:	0000910a 	andeq	r9, r0, sl, lsl #2
    e0fc:	10000300 	andne	r0, r0, r0, lsl #6
    e100:	001e8804 	andseq	r8, lr, r4, lsl #16
    e104:	0bdc0600 	bleq	ff70f90c <_estack+0xdf70a90c>
    e108:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    e10c:	1e881b03 	vdivne.f64	d1, d8, d3
    e110:	bc1f0000 	ldclt	0, cr0, [pc], {-0}
    e114:	0f00000b 	svceq	0x0000000b
    e118:	1d14031e 	ldcne	3, cr0, [r4, #-120]	; 0xffffff88
    e11c:	0100001f 	tsteq	r0, pc, lsl r0
    e120:	01041001 	tsteq	r4, r1
    e124:	2500001f 	strcs	r0, [r0, #-31]	; 0xffffffe1
    e128:	0000070f 	andeq	r0, r0, pc, lsl #14
    e12c:	10131d10 	andsne	r1, r3, r0, lsl sp
    e130:	0100001c 	tsteq	r0, ip, lsl r0
    e134:	02ee2501 	rsceq	r2, lr, #4194304	; 0x400000
    e138:	1e100000 	cdpne	0, 1, cr0, cr0, cr0, {0}
    e13c:	001c211a 	andseq	r2, ip, sl, lsl r1
    e140:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e144:	00000c69 	andeq	r0, r0, r9, ror #24
    e148:	21241e10 			; <UNDEFINED> instruction: 0x21241e10
    e14c:	0100001c 	tsteq	r0, ip, lsl r0
    e150:	0c872501 	cfstr32eq	mvfx2, [r7], {1}
    e154:	22100000 	andscs	r0, r0, #0
    e158:	001f1d14 	andseq	r1, pc, r4, lsl sp	; <UNPREDICTABLE>
    e15c:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e160:	0000203b 	andeq	r2, r0, fp, lsr r0
    e164:	5e273911 			; <UNDEFINED> instruction: 0x5e273911
    e168:	0100000d 	tsteq	r0, sp
    e16c:	23292501 			; <UNDEFINED> instruction: 0x23292501
    e170:	3a110000 	bcc	44e178 <__ccfg+0x42e1d0>
    e174:	0009f115 	andeq	pc, r9, r5, lsl r1	; <UNPREDICTABLE>
    e178:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e17c:	00002745 	andeq	r2, r0, r5, asr #14
    e180:	d81a3b11 	ldmdale	sl, {r0, r4, r8, r9, fp, ip, sp}
    e184:	0100000b 	tsteq	r0, fp
    e188:	25e92501 	strbcs	r2, [r9, #1281]!	; 0x501
    e18c:	3c110000 	ldccc	0, cr0, [r1], {-0}
    e190:	000c741a 	andeq	r7, ip, sl, lsl r4
    e194:	09010100 	stmdbeq	r1, {r8}
    e198:	0000006b 	andeq	r0, r0, fp, rrx
    e19c:	00001fa3 	andeq	r1, r0, r3, lsr #31
    e1a0:	0000910a 	andeq	r9, r0, sl, lsl #2
    e1a4:	27001400 	strcs	r1, [r0, -r0, lsl #8]
    e1a8:	000029a7 	andeq	r2, r0, r7, lsr #19
    e1ac:	93113d12 	tstls	r1, #1152	; 0x480
    e1b0:	0500001f 	streq	r0, [r0, #-31]	; 0xffffffe1
    e1b4:	0000b803 	andeq	fp, r0, r3, lsl #16
    e1b8:	1f5b2820 	svcne	0x005b2820
    e1bc:	72120000 	andsvc	r0, r2, #0
    e1c0:	54030520 	strpl	r0, [r3], #-1312	; 0xfffffae0
    e1c4:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    e1c8:	00001f69 	andeq	r1, r0, r9, ror #30
    e1cc:	050e9612 	streq	r9, [lr, #-1554]	; 0xfffff9ee
    e1d0:	00003c03 	andeq	r3, r0, r3, lsl #24
    e1d4:	1f772820 	svcne	0x00772820
    e1d8:	ad120000 	ldcge	0, cr0, [r2, #-0]
    e1dc:	a0030513 	andge	r0, r3, r3, lsl r5
    e1e0:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    e1e4:	00001f85 	andeq	r1, r0, r5, lsl #31
    e1e8:	0513c212 	ldreq	ip, [r3, #-530]	; 0xfffffdee
    e1ec:	00007c03 	andeq	r7, r0, r3, lsl #24
    e1f0:	018a0020 	orreq	r0, sl, r0, lsr #32
    e1f4:	00040000 	andeq	r0, r4, r0
    e1f8:	000030db 	ldrdeq	r3, [r0], -fp
    e1fc:	2a3f0104 	bcs	fce614 <__ccfg+0xfae66c>
    e200:	24010000 	strcs	r0, [r1], #-0
    e204:	0600002a 	streq	r0, [r0], -sl, lsr #32
    e208:	c800002b 	stmdagt	r0, {r0, r1, r3, r5}
    e20c:	00000010 	andeq	r0, r0, r0, lsl r0
    e210:	b0000000 	andlt	r0, r0, r0
    e214:	02000073 	andeq	r0, r0, #115	; 0x73
    e218:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    e21c:	1a030000 	bne	ce224 <__ccfg+0xae27c>
    e220:	0200002a 	andeq	r0, r0, #42	; 0x2a
    e224:	0000371d 	andeq	r3, r0, sp, lsl r7
    e228:	08010200 	stmdaeq	r1, {r9}
    e22c:	00000c5b 	andeq	r0, r0, fp, asr ip
    e230:	6b050202 	blvs	14ea40 <__ccfg+0x12ea98>
    e234:	0200000a 	andeq	r0, r0, #10
    e238:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    e23c:	04020000 	streq	r0, [r2], #-0
    e240:	0007fd05 	andeq	pc, r7, r5, lsl #26
    e244:	29b20300 	ldmibcs	r2!, {r8, r9}
    e248:	41020000 	mrsmi	r0, (UNDEF: 2)
    e24c:	0000005e 	andeq	r0, r0, lr, asr r0
    e250:	26070402 	strcs	r0, [r7], -r2, lsl #8
    e254:	02000004 	andeq	r0, r0, #4
    e258:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    e25c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e260:	00042107 	andeq	r2, r4, r7, lsl #2
    e264:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e268:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e26c:	2b070402 	blcs	1cf27c <__ccfg+0x1af2d4>
    e270:	03000004 	movweq	r0, #4
    e274:	00002a1c 	andeq	r2, r0, ip, lsl sl
    e278:	002c1403 	eoreq	r1, ip, r3, lsl #8
    e27c:	b4030000 	strlt	r0, [r3], #-0
    e280:	03000029 	movweq	r0, #41	; 0x29
    e284:	00005320 	andeq	r5, r0, r0, lsr #6
    e288:	29de0300 	ldmibcs	lr, {r8, r9}^
    e28c:	33040000 	movwcc	r0, #16384	; 0x4000
    e290:	000000a2 	andeq	r0, r0, r2, lsr #1
    e294:	00a80405 	adceq	r0, r8, r5, lsl #8
    e298:	03060000 	movweq	r0, #24576	; 0x6000
    e29c:	00002af4 	strdeq	r2, [r0], -r4
    e2a0:	00b43404 	adcseq	r3, r4, r4, lsl #8
    e2a4:	04050000 	streq	r0, [r5], #-0
    e2a8:	000000ba 	strheq	r0, [r0], -sl
    e2ac:	0000c507 	andeq	ip, r0, r7, lsl #10
    e2b0:	00810800 	addeq	r0, r1, r0, lsl #16
    e2b4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    e2b8:	00002a0d 	andeq	r2, r0, sp, lsl #20
    e2bc:	39609905 	stmdbcc	r0!, {r0, r2, r8, fp, ip, pc}^
    e2c0:	00280000 	eoreq	r0, r8, r0
    e2c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    e2c8:	0000010b 	andeq	r0, r0, fp, lsl #2
    e2cc:	002aef0a 	eoreq	lr, sl, sl, lsl #30
    e2d0:	97350100 	ldrls	r0, [r5, -r0, lsl #2]!
    e2d4:	c6000000 	strgt	r0, [r0], -r0
    e2d8:	0b000036 	bleq	e3b8 <__exidx_end+0x86f8>
    e2dc:	000029bd 			; <UNDEFINED> instruction: 0x000029bd
    e2e0:	010b3701 	tsteq	fp, r1, lsl #14
    e2e4:	370b0000 	strcc	r0, [fp, -r0]
    e2e8:	680c0000 	stmdavs	ip, {}	; <UNPREDICTABLE>
    e2ec:	77000039 	smladxvc	r0, r9, r0, r0
    e2f0:	0d000001 	stceq	0, cr0, [r0, #-4]
    e2f4:	00003982 	andeq	r3, r0, r2, lsl #19
    e2f8:	00000182 	andeq	r0, r0, r2, lsl #3
    e2fc:	02010200 	andeq	r0, r1, #0, 4
    e300:	00000ca7 	andeq	r0, r0, r7, lsr #25
    e304:	0029c90e 	eoreq	ip, r9, lr, lsl #18
    e308:	009a0500 	addseq	r0, sl, r0, lsl #10
    e30c:	2c000000 	stccs	0, cr0, [r0], {-0}
    e310:	01000000 	mrseq	r0, (UNDEF: 0)
    e314:	0001779c 	muleq	r1, ip, r7
    e318:	2aef0a00 	bcs	ffbd0b20 <_estack+0xdfbcbb20>
    e31c:	40010000 	andmi	r0, r1, r0
    e320:	000000a9 	andeq	r0, r0, r9, lsr #1
    e324:	00003740 	andeq	r3, r0, r0, asr #14
    e328:	002b660a 	eoreq	r6, fp, sl, lsl #12
    e32c:	81400100 	mrshi	r0, (UNDEF: 80)
    e330:	85000000 	strhi	r0, [r0, #-0]
    e334:	0b000037 	bleq	e418 <__exidx_end+0x8758>
    e338:	000029bd 			; <UNDEFINED> instruction: 0x000029bd
    e33c:	010b4201 	tsteq	fp, r1, lsl #4
    e340:	37a60000 	strcc	r0, [r6, r0]!
    e344:	000c0000 	andeq	r0, ip, r0
    e348:	77000000 	strvc	r0, [r0, -r0]
    e34c:	0f000001 	svceq	0x00000001
    e350:	00000000 	andeq	r0, r0, r0
    e354:	0000016d 	andeq	r0, r0, sp, ror #2
    e358:	02500110 	subseq	r0, r0, #16, 2
    e35c:	0d000077 	stceq	0, cr0, [r0, #-476]	; 0xfffffe24
    e360:	00000000 	andeq	r0, r0, r0
    e364:	00000182 	andeq	r0, r0, r2, lsl #3
    e368:	29ef1100 	stmibcs	pc!, {r8, ip}^	; <UNPREDICTABLE>
    e36c:	6a060000 	bvs	18e374 <__ccfg+0x16e3cc>
    e370:	0000008c 	andeq	r0, r0, ip, lsl #1
    e374:	0029fe11 	eoreq	pc, r9, r1, lsl lr	; <UNPREDICTABLE>
    e378:	8c840600 	stchi	6, cr0, [r4], {0}
    e37c:	00000000 	andeq	r0, r0, r0
    e380:	000000d5 	ldrdeq	r0, [r0], -r5
    e384:	31c70004 	biccc	r0, r7, r4
    e388:	01040000 	mrseq	r0, (UNDEF: 4)
    e38c:	00002a3f 	andeq	r2, r0, pc, lsr sl
    e390:	002bb201 	eoreq	fp, fp, r1, lsl #4
    e394:	002b0600 	eoreq	r0, fp, r0, lsl #12
    e398:	0010e000 	andseq	lr, r0, r0
    e39c:	00000000 	andeq	r0, r0, r0
    e3a0:	00755000 	rsbseq	r5, r5, r0
    e3a4:	2ba90200 	blcs	fea4ebac <_estack+0xdea49bac>
    e3a8:	1b020000 	blne	8e3b0 <__ccfg+0x6e408>
    e3ac:	00000030 	andeq	r0, r0, r0, lsr r0
    e3b0:	5d060103 	stfpls	f0, [r6, #-12]
    e3b4:	0300000c 	movweq	r0, #12
    e3b8:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    e3bc:	02030000 	andeq	r0, r3, #0
    e3c0:	000a6b05 	andeq	r6, sl, r5, lsl #22
    e3c4:	07020300 	streq	r0, [r2, -r0, lsl #6]
    e3c8:	00000d66 	andeq	r0, r0, r6, ror #26
    e3cc:	002b9f02 	eoreq	r9, fp, r2, lsl #30
    e3d0:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
    e3d4:	03000000 	movweq	r0, #0
    e3d8:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    e3dc:	04030000 	streq	r0, [r3], #-0
    e3e0:	00042607 	andeq	r2, r4, r7, lsl #12
    e3e4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    e3e8:	000007f8 	strdeq	r0, [r0], -r8
    e3ec:	21070803 	tstcs	r7, r3, lsl #16
    e3f0:	04000004 	streq	r0, [r0], #-4
    e3f4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e3f8:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    e3fc:	00042b07 	andeq	r2, r4, r7, lsl #22
    e400:	2bab0200 	blcs	feacec08 <_estack+0xdeac9c08>
    e404:	13030000 	movwne	r0, #12288	; 0x3000
    e408:	00000025 	andeq	r0, r0, r5, lsr #32
    e40c:	002ba102 	eoreq	sl, fp, r2, lsl #2
    e410:	4c1f0300 	ldcmi	3, cr0, [pc], {-0}
    e414:	05000000 	streq	r0, [r0, #-0]
    e418:	00002b70 	andeq	r2, r0, r0, ror fp
    e41c:	008caa04 	addeq	sl, ip, r4, lsl #20
    e420:	39880000 	stmibcc	r8, {}	; <UNPREDICTABLE>
    e424:	00300000 	eorseq	r0, r0, r0
    e428:	9c010000 	stcls	0, cr0, [r1], {-0}
    e42c:	002be306 	eoreq	lr, fp, r6, lsl #6
    e430:	8c3e0100 	ldfhis	f0, [lr], #-0
    e434:	db000000 	blle	e43c <__exidx_end+0x877c>
    e438:	06000037 			; <UNDEFINED> instruction: 0x06000037
    e43c:	00002bd4 	ldrdeq	r2, [r0], -r4
    e440:	008c3f01 	addeq	r3, ip, r1, lsl #30
    e444:	37f40000 	ldrbcc	r0, [r4, r0]!
    e448:	92070000 	andls	r0, r7, #0
    e44c:	0100002b 	tsteq	r0, fp, lsr #32
    e450:	00008140 	andeq	r8, r0, r0, asr #2
    e454:	00510100 	subseq	r0, r1, r0, lsl #2
    e458:	00014300 	andeq	r4, r1, r0, lsl #6
    e45c:	36000400 	strcc	r0, [r0], -r0, lsl #8
    e460:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    e464:	002a3f01 	eoreq	r3, sl, r1, lsl #30
    e468:	2c940100 	ldfcss	f0, [r4], {0}
    e46c:	2b060000 	blcs	18e474 <__ccfg+0x16e4cc>
    e470:	10f00000 	rscsne	r0, r0, r0
    e474:	00000000 	andeq	r0, r0, r0
    e478:	76bb0000 	ldrtvc	r0, [fp], r0
    e47c:	01020000 	mrseq	r0, (UNDEF: 2)
    e480:	000c5d06 	andeq	r5, ip, r6, lsl #26
    e484:	08010200 	stmdaeq	r1, {r9}
    e488:	00000c5b 	andeq	r0, r0, fp, asr ip
    e48c:	6b050202 	blvs	14ec9c <__ccfg+0x12ecf4>
    e490:	0200000a 	andeq	r0, r0, #10
    e494:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    e498:	04020000 	streq	r0, [r2], #-0
    e49c:	0007fd05 	andeq	pc, r7, r5, lsl #26
    e4a0:	29b20300 	ldmibcs	r2!, {r8, r9}
    e4a4:	41020000 	mrsmi	r0, (UNDEF: 2)
    e4a8:	00000053 	andeq	r0, r0, r3, asr r0
    e4ac:	26070402 	strcs	r0, [r7], -r2, lsl #8
    e4b0:	02000004 	andeq	r0, r0, #4
    e4b4:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    e4b8:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    e4bc:	0200002c 	andeq	r0, r0, #44	; 0x2c
    e4c0:	00006c5b 	andeq	r6, r0, fp, asr ip
    e4c4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    e4c8:	00000421 	andeq	r0, r0, r1, lsr #8
    e4cc:	69050404 	stmdbvs	r5, {r2, sl}
    e4d0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    e4d4:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    e4d8:	b4030000 	strlt	r0, [r3], #-0
    e4dc:	03000029 	movweq	r0, #41	; 0x29
    e4e0:	00004820 	andeq	r4, r0, r0, lsr #16
    e4e4:	2c400300 	mcrrcs	3, 0, r0, r0, cr0
    e4e8:	26030000 	strcs	r0, [r3], -r0
    e4ec:	00000061 	andeq	r0, r0, r1, rrx
    e4f0:	002c0905 	eoreq	r0, ip, r5, lsl #18
    e4f4:	03450400 	movteq	r0, #21504	; 0x5400
    e4f8:	00000081 	andeq	r0, r0, r1, lsl #1
    e4fc:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
    e500:	00000020 	andeq	r0, r0, r0, lsr #32
    e504:	00dd9c01 	sbcseq	r9, sp, r1, lsl #24
    e508:	fa060000 	blx	18e510 <__ccfg+0x16e568>
    e50c:	0100002b 	tsteq	r0, fp, lsr #32
    e510:	00008140 	andeq	r8, r0, r0, asr #2
    e514:	00382900 	eorseq	r2, r8, r0, lsl #18
    e518:	2c490600 	mcrrcs	6, 0, r0, r9, cr0
    e51c:	41010000 	mrsmi	r0, (UNDEF: 1)
    e520:	00000081 	andeq	r0, r0, r1, lsl #1
    e524:	0000383c 	andeq	r3, r0, ip, lsr r8
    e528:	002c2c07 	eoreq	r2, ip, r7, lsl #24
    e52c:	81420100 	mrshi	r0, (UNDEF: 82)
    e530:	01000000 	mrseq	r0, (UNDEF: 0)
    e534:	5b050052 	blpl	14e684 <__ccfg+0x12e6dc>
    e538:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    e53c:	008c0353 	addeq	r0, ip, r3, asr r3
    e540:	39d80000 	ldmibcc	r8, {}^	; <UNPREDICTABLE>
    e544:	00180000 	andseq	r0, r8, r0
    e548:	9c010000 	stcls	0, cr0, [r1], {-0}
    e54c:	0000012f 	andeq	r0, r0, pc, lsr #2
    e550:	59010808 	stmdbpl	r1, {r3, fp}
    e554:	00000116 	andeq	r0, r0, r6, lsl r1
    e558:	002bee09 	eoreq	lr, fp, r9, lsl #28
    e55c:	8c5a0100 	ldfhie	f0, [sl], {-0}
    e560:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    e564:	00002c87 	andeq	r2, r0, r7, lsl #25
    e568:	012f5b01 			; <UNDEFINED> instruction: 0x012f5b01
    e56c:	0a000000 	beq	e574 <__exidx_end+0x88b4>
    e570:	00002c7c 	andeq	r2, r0, ip, ror ip
    e574:	00f75c01 	rscseq	r5, r7, r1, lsl #24
    e578:	2c070000 	stccs	0, cr0, [r7], {-0}
    e57c:	0100002c 	tsteq	r0, ip, lsr #32
    e580:	0000815d 	andeq	r8, r0, sp, asr r1
    e584:	00510100 	subseq	r0, r1, r0, lsl #2
    e588:	0000810b 	andeq	r8, r0, fp, lsl #2
    e58c:	00013f00 	andeq	r3, r1, r0, lsl #30
    e590:	013f0c00 	teqeq	pc, r0, lsl #24
    e594:	00010000 	andeq	r0, r1, r0
    e598:	b3070402 	movwlt	r0, #29698	; 0x7402
    e59c:	0000002c 	andeq	r0, r0, ip, lsr #32
    e5a0:	00000136 	andeq	r0, r0, r6, lsr r1
    e5a4:	32e00004 	rsccc	r0, r0, #4
    e5a8:	01040000 	mrseq	r0, (UNDEF: 4)
    e5ac:	00002a3f 	andeq	r2, r0, pc, lsr sl
    e5b0:	002cf101 	eoreq	pc, ip, r1, lsl #2
    e5b4:	002b0600 	eoreq	r0, fp, r0, lsl #12
    e5b8:	00110800 	andseq	r0, r1, r0, lsl #16
    e5bc:	00000000 	andeq	r0, r0, r0
    e5c0:	00786800 	rsbseq	r6, r8, r0, lsl #16
    e5c4:	06010200 	streq	r0, [r1], -r0, lsl #4
    e5c8:	00000c5d 	andeq	r0, r0, sp, asr ip
    e5cc:	5b080102 	blpl	20e9dc <__ccfg+0x1eea34>
    e5d0:	0200000c 	andeq	r0, r0, #12
    e5d4:	0a6b0502 	beq	1acf9e4 <__ccfg+0x1aafa3c>
    e5d8:	02020000 	andeq	r0, r2, #0
    e5dc:	000d6607 	andeq	r6, sp, r7, lsl #12
    e5e0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e5e4:	000007fd 	strdeq	r0, [r0], -sp
    e5e8:	0029b203 	eoreq	fp, r9, r3, lsl #4
    e5ec:	53410200 	movtpl	r0, #4608	; 0x1200
    e5f0:	02000000 	andeq	r0, r0, #0
    e5f4:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    e5f8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e5fc:	0007f805 	andeq	pc, r7, r5, lsl #16
    e600:	07080200 	streq	r0, [r8, -r0, lsl #4]
    e604:	00000421 	andeq	r0, r0, r1, lsr #8
    e608:	69050404 	stmdbvs	r5, {r2, sl}
    e60c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    e610:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    e614:	b4030000 	strlt	r0, [r3], #-0
    e618:	03000029 	movweq	r0, #41	; 0x29
    e61c:	00004820 	andeq	r4, r0, r0, lsr #16
    e620:	29ef0500 	stmibcs	pc!, {r8, sl}^	; <UNPREDICTABLE>
    e624:	6a040000 	bvs	10e62c <__ccfg+0xee684>
    e628:	00000076 	andeq	r0, r0, r6, ror r0
    e62c:	000039f0 	strdeq	r3, [r0], -r0
    e630:	00000008 	andeq	r0, r0, r8
    e634:	00a69c01 	adceq	r9, r6, r1, lsl #24
    e638:	df060000 	svcle	0x00060000
    e63c:	0100002c 	tsteq	r0, ip, lsr #32
    e640:	00007677 	andeq	r7, r0, r7, ror r6
    e644:	0c050000 	stceq	0, cr0, [r5], {-0}
    e648:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    e64c:	00007678 	andeq	r7, r0, r8, ror r6
    e650:	00000000 	andeq	r0, r0, r0
    e654:	00000600 	andeq	r0, r0, r0, lsl #12
    e658:	cb9c0100 	blgt	fe70ea60 <_estack+0xde709a60>
    e65c:	06000000 	streq	r0, [r0], -r0
    e660:	00002cdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    e664:	0076c201 	rsbseq	ip, r6, r1, lsl #4
    e668:	05000000 	streq	r0, [r0, #-0]
    e66c:	000029fe 	strdeq	r2, [r0], -lr
    e670:	00768404 	rsbseq	r8, r6, r4, lsl #8
    e674:	39f80000 	ldmibcc	r8!, {}^	; <UNPREDICTABLE>
    e678:	00080000 	andeq	r0, r8, r0
    e67c:	9c010000 	stcls	0, cr0, [r1], {-0}
    e680:	000000f1 	strdeq	r0, [r0], -r1
    e684:	002cdf07 	eoreq	sp, ip, r7, lsl #30
    e688:	010f0100 	mrseq	r0, (UNDEF: 31)
    e68c:	00000076 	andeq	r0, r0, r6, ror r0
    e690:	2cbc0800 	ldccs	8, cr0, [ip]
    e694:	5b040000 	blpl	10e69c <__ccfg+0xee6f4>
    e698:	00007601 	andeq	r7, r0, r1, lsl #12
    e69c:	00000000 	andeq	r0, r0, r0
    e6a0:	00000600 	andeq	r0, r0, r0, lsl #12
    e6a4:	189c0100 	ldmne	ip, {r8}
    e6a8:	07000001 	streq	r0, [r0, -r1]
    e6ac:	00002cdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    e6b0:	76015a01 	strvc	r5, [r1], -r1, lsl #20
    e6b4:	00000000 	andeq	r0, r0, r0
    e6b8:	002cd009 	eoreq	sp, ip, r9
    e6bc:	016c0400 	cmneq	ip, r0, lsl #8
    e6c0:	00000000 	andeq	r0, r0, r0
    e6c4:	00000008 	andeq	r0, r0, r8
    e6c8:	e70a9c01 	str	r9, [sl, -r1, lsl #24]
    e6cc:	0100002c 	tsteq	r0, ip, lsr #32
    e6d0:	0076019e 			; <UNDEFINED> instruction: 0x0076019e
    e6d4:	50010000 	andpl	r0, r1, r0
    e6d8:	08bf0000 	ldmeq	pc!, {}	; <UNPREDICTABLE>
    e6dc:	00040000 	andeq	r0, r4, r0
    e6e0:	00003390 	muleq	r0, r0, r3
    e6e4:	2a3f0104 	bcs	fceafc <__ccfg+0xfaeb54>
    e6e8:	44010000 	strmi	r0, [r1], #-0
    e6ec:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e6f0:	5000002b 	andpl	r0, r0, fp, lsr #32
    e6f4:	00000011 	andeq	r0, r0, r1, lsl r0
    e6f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e6fc:	0200007a 	andeq	r0, r0, #122	; 0x7a
    e700:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    e704:	1a030000 	bne	ce70c <__ccfg+0xae764>
    e708:	0300002a 	movweq	r0, #42	; 0x2a
    e70c:	0000371d 	andeq	r3, r0, sp, lsl r7
    e710:	08010200 	stmdaeq	r1, {r9}
    e714:	00000c5b 	andeq	r0, r0, fp, asr ip
    e718:	0031eb03 	eorseq	lr, r1, r3, lsl #22
    e71c:	49290300 	stmdbmi	r9!, {r8, r9}
    e720:	02000000 	andeq	r0, r0, #0
    e724:	0a6b0502 	beq	1acfb34 <__ccfg+0x1aafb8c>
    e728:	10030000 	andne	r0, r3, r0
    e72c:	0300002e 	movweq	r0, #46	; 0x2e
    e730:	00005b2b 	andeq	r5, r0, fp, lsr #22
    e734:	07020200 	streq	r0, [r2, -r0, lsl #4]
    e738:	00000d66 	andeq	r0, r0, r6, ror #26
    e73c:	002b9f03 	eoreq	r9, fp, r3, lsl #30
    e740:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; e748 <__exidx_end+0x8a88>
    e744:	02000000 	andeq	r0, r0, #0
    e748:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    e74c:	b2030000 	andlt	r0, r3, #0
    e750:	03000029 	movweq	r0, #41	; 0x29
    e754:	00007f41 	andeq	r7, r0, r1, asr #30
    e758:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e75c:	00000426 	andeq	r0, r0, r6, lsr #8
    e760:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    e764:	02000007 	andeq	r0, r0, #7
    e768:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    e76c:	04040000 	streq	r0, [r4], #-0
    e770:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e774:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e778:	0000042b 	andeq	r0, r0, fp, lsr #8
    e77c:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    e780:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    e784:	03000000 	movweq	r0, #0
    e788:	000031ed 	andeq	r3, r0, sp, ror #3
    e78c:	003e1904 	eorseq	r1, lr, r4, lsl #18
    e790:	12030000 	andne	r0, r3, #0
    e794:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    e798:	0000501a 	andeq	r5, r0, sl, lsl r0
    e79c:	2ba10300 	blcs	fe84f3a4 <_estack+0xde84a3a4>
    e7a0:	1f040000 	svcne	0x00040000
    e7a4:	00000062 	andeq	r0, r0, r2, rrx
    e7a8:	0029b403 	eoreq	fp, r9, r3, lsl #8
    e7ac:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    e7b0:	03000000 	movweq	r0, #0
    e7b4:	000029de 	ldrdeq	r2, [r0], -lr
    e7b8:	00e43305 	rsceq	r3, r4, r5, lsl #6
    e7bc:	04050000 	streq	r0, [r5], #-0
    e7c0:	000000ea 	andeq	r0, r0, sl, ror #1
    e7c4:	f1040506 			; <UNDEFINED> instruction: 0xf1040506
    e7c8:	07000000 	streq	r0, [r0, -r0]
    e7cc:	000000fc 	strdeq	r0, [r0], -ip
    e7d0:	0000a208 	andeq	sl, r0, r8, lsl #4
    e7d4:	14030000 	strne	r0, [r3], #-0
    e7d8:	06000031 			; <UNDEFINED> instruction: 0x06000031
    e7dc:	00010742 	andeq	r0, r1, r2, asr #14
    e7e0:	0d040500 	cfstr32eq	mvfx0, [r4, #-0]
    e7e4:	09000001 	stmdbeq	r0, {r0}
    e7e8:	000000ce 	andeq	r0, r0, lr, asr #1
    e7ec:	00000126 	andeq	r0, r0, r6, lsr #2
    e7f0:	00012608 	andeq	r2, r1, r8, lsl #12
    e7f4:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    e7f8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e7fc:	00000000 	andeq	r0, r0, r0
    e800:	00a20405 	adceq	r0, r2, r5, lsl #8
    e804:	7c030000 	stcvc	0, cr0, [r3], {-0}
    e808:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e80c:	00013746 	andeq	r3, r1, r6, asr #14
    e810:	3d040500 	cfstr32cc	mvfx0, [r4, #-0]
    e814:	0a000001 	beq	e820 <__exidx_end+0x8b60>
    e818:	000000ce 	andeq	r0, r0, lr, asr #1
    e81c:	0032c503 	eorseq	ip, r2, r3, lsl #10
    e820:	37480600 	strbcc	r0, [r8, -r0, lsl #12]
    e824:	03000001 	movweq	r0, #1
    e828:	00002fac 	andeq	r2, r0, ip, lsr #31
    e82c:	01584a06 	cmpeq	r8, r6, lsl #20
    e830:	04050000 	streq	r0, [r5], #-0
    e834:	0000015e 	andeq	r0, r0, lr, asr r1
    e838:	0000ce09 	andeq	ip, r0, r9, lsl #28
    e83c:	00016d00 	andeq	r6, r1, r0, lsl #26
    e840:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    e844:	03000000 	movweq	r0, #0
    e848:	00002ebb 			; <UNDEFINED> instruction: 0x00002ebb
    e84c:	01374c06 	teqeq	r7, r6, lsl #24
    e850:	1b030000 	blne	ce858 <__ccfg+0xae8b0>
    e854:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e858:	0001074e 	andeq	r0, r1, lr, asr #14
    e85c:	2eab0300 	cdpcs	3, 10, cr0, cr11, cr0, {0}
    e860:	51060000 	mrspl	r0, (UNDEF: 6)
    e864:	000000e4 	andeq	r0, r0, r4, ror #1
    e868:	002d3503 	eoreq	r3, sp, r3, lsl #10
    e86c:	99530600 	ldmdbls	r3, {r9, sl}^
    e870:	05000001 	streq	r0, [r0, #-1]
    e874:	00019f04 	andeq	r9, r1, r4, lsl #30
    e878:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    e87c:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    e880:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    e884:	08000001 	stmdaeq	r0, {r0}
    e888:	000000b8 	strheq	r0, [r0], -r8
    e88c:	0000b808 	andeq	fp, r0, r8, lsl #16
    e890:	04050000 	streq	r0, [r5], #-0
    e894:	000000b8 	strheq	r0, [r0], -r8
    e898:	00312a03 	eorseq	r2, r1, r3, lsl #20
    e89c:	c9570600 	ldmdbgt	r7, {r9, sl}^
    e8a0:	05000001 	streq	r0, [r0, #-1]
    e8a4:	0001cf04 	andeq	ip, r1, r4, lsl #30
    e8a8:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    e8ac:	01e30000 	mvneq	r0, r0
    e8b0:	e3080000 	movw	r0, #32768	; 0x8000
    e8b4:	08000001 	stmdaeq	r0, {r0}
    e8b8:	000000ce 	andeq	r0, r0, lr, asr #1
    e8bc:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
    e8c0:	03000000 	movweq	r0, #0
    e8c4:	00002f1e 	andeq	r2, r0, lr, lsl pc
    e8c8:	01c95a06 	biceq	r5, r9, r6, lsl #20
    e8cc:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    e8d0:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e8d4:	0001c95d 	andeq	ip, r1, sp, asr r9
    e8d8:	2d470300 	stclcs	3, cr0, [r7, #-0]
    e8dc:	60060000 	andvs	r0, r6, r0
    e8e0:	000001c9 	andeq	r0, r0, r9, asr #3
    e8e4:	00313803 	eorseq	r3, r1, r3, lsl #16
    e8e8:	e4630600 	strbt	r0, [r3], #-1536	; 0xfffffa00
    e8ec:	03000000 	movweq	r0, #0
    e8f0:	00002d85 	andeq	r2, r0, r5, lsl #27
    e8f4:	02206506 	eoreq	r6, r0, #25165824	; 0x1800000
    e8f8:	04050000 	streq	r0, [r5], #-0
    e8fc:	00000226 	andeq	r0, r0, r6, lsr #4
    e900:	00023107 	andeq	r3, r2, r7, lsl #2
    e904:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    e908:	03000000 	movweq	r0, #0
    e90c:	000032d6 	ldrdeq	r3, [r0], -r6
    e910:	02206706 	eoreq	r6, r0, #1572864	; 0x180000
    e914:	1a030000 	bne	ce91c <__ccfg+0xae974>
    e918:	06000030 			; <UNDEFINED> instruction: 0x06000030
    e91c:	0000eb69 	andeq	lr, r0, r9, ror #22
    e920:	32b50300 	adcscc	r0, r5, #0, 6
    e924:	6b060000 	blvs	18e92c <__ccfg+0x16e984>
    e928:	000000eb 	andeq	r0, r0, fp, ror #1
    e92c:	002fe703 	eoreq	lr, pc, r3, lsl #14
    e930:	eb6d0600 	bl	1b50138 <__ccfg+0x1b30190>
    e934:	03000000 	movweq	r0, #0
    e938:	00002ff9 	strdeq	r2, [r0], -r9
    e93c:	00eb6f06 	rsceq	r6, fp, r6, lsl #30
    e940:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    e944:	03557a06 	cmpeq	r5, #24576	; 0x6000
    e948:	bd0c0000 	stclt	0, cr0, [ip, #-0]
    e94c:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e950:	0000fc7c 	andeq	pc, r0, ip, ror ip	; <UNPREDICTABLE>
    e954:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    e958:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e95c:	00012c7d 	andeq	r2, r1, sp, ror ip
    e960:	ce0c0400 	cfcpysgt	mvf0, mvf12
    e964:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e968:	0001427e 	andeq	r4, r1, lr, ror r2
    e96c:	c70c0800 	strgt	r0, [ip, -r0, lsl #16]
    e970:	06000031 			; <UNDEFINED> instruction: 0x06000031
    e974:	00014d7f 	andeq	r4, r1, pc, ror sp
    e978:	d90c0c00 	stmdble	ip, {sl, fp}
    e97c:	06000031 			; <UNDEFINED> instruction: 0x06000031
    e980:	00016d80 	andeq	r6, r1, r0, lsl #27
    e984:	cc0c1000 	stcgt	0, cr1, [ip], {-0}
    e988:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e98c:	00017881 	andeq	r7, r1, r1, lsl #17
    e990:	880c1400 	stmdahi	ip, {sl, ip}
    e994:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e998:	00018382 	andeq	r8, r1, r2, lsl #7
    e99c:	c30c1800 	movwgt	r1, #51200	; 0xc800
    e9a0:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e9a4:	00018e83 	andeq	r8, r1, r3, lsl #29
    e9a8:	520c1c00 	andpl	r1, ip, #0, 24
    e9ac:	06000031 			; <UNDEFINED> instruction: 0x06000031
    e9b0:	0001be84 	andeq	fp, r1, r4, lsl #29
    e9b4:	4a0c2000 	bmi	3169bc <__ccfg+0x2f6a14>
    e9b8:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e9bc:	0001e985 	andeq	lr, r1, r5, lsl #19
    e9c0:	a20c2400 	andge	r2, ip, #0, 8
    e9c4:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e9c8:	0001f486 	andeq	pc, r1, r6, lsl #9
    e9cc:	070c2800 	streq	r2, [ip, -r0, lsl #16]
    e9d0:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e9d4:	0001ff87 	andeq	pc, r1, r7, lsl #31
    e9d8:	e70c2c00 	str	r2, [ip, -r0, lsl #24]
    e9dc:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e9e0:	00021588 	andeq	r1, r2, r8, lsl #11
    e9e4:	f50c3000 			; <UNDEFINED> instruction: 0xf50c3000
    e9e8:	06000031 			; <UNDEFINED> instruction: 0x06000031
    e9ec:	00023189 	andeq	r3, r2, r9, lsl #3
    e9f0:	c60c3400 	strgt	r3, [ip], -r0, lsl #8
    e9f4:	0600002d 	streq	r0, [r0], -sp, lsr #32
    e9f8:	00020a8a 	andeq	r0, r2, sl, lsl #21
    e9fc:	090c3800 	stmdbeq	ip, {fp, ip, sp}
    ea00:	06000030 			; <UNDEFINED> instruction: 0x06000030
    ea04:	00023c8b 	andeq	r3, r2, fp, lsl #25
    ea08:	a80c3c00 	stmdage	ip, {sl, fp, ip, sp}
    ea0c:	06000031 			; <UNDEFINED> instruction: 0x06000031
    ea10:	0002478c 	andeq	r4, r2, ip, lsl #15
    ea14:	2c0c4000 	stccs	0, cr4, [ip], {-0}
    ea18:	0600002f 	streq	r0, [r0], -pc, lsr #32
    ea1c:	0002528d 	andeq	r5, r2, sp, lsl #5
    ea20:	760c4400 	strvc	r4, [ip], -r0, lsl #8
    ea24:	0600002d 	streq	r0, [r0], -sp, lsr #32
    ea28:	00025d8e 	andeq	r5, r2, lr, lsl #27
    ea2c:	03004800 	movweq	r4, #2048	; 0x800
    ea30:	000030d8 	ldrdeq	r3, [r0], -r8
    ea34:	02688f06 	rsbeq	r8, r8, #6, 30
    ea38:	140b0000 	strne	r0, [fp], #-0
    ea3c:	03a55401 			; <UNDEFINED> instruction: 0x03a55401
    ea40:	2c0c0000 	stccs	0, cr0, [ip], {-0}
    ea44:	0100002e 	tsteq	r0, lr, lsr #32
    ea48:	0000ce55 	andeq	ip, r0, r5, asr lr
    ea4c:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    ea50:	01000030 	tsteq	r0, r0, lsr r0
    ea54:	0000ce56 	andeq	ip, r0, r6, asr lr
    ea58:	960c0400 	strls	r0, [ip], -r0, lsl #8
    ea5c:	0100002d 	tsteq	r0, sp, lsr #32
    ea60:	0000ce57 	andeq	ip, r0, r7, asr lr
    ea64:	5f0c0800 	svcpl	0x000c0800
    ea68:	0100002e 	tsteq	r0, lr, lsr #32
    ea6c:	0000ce58 	andeq	ip, r0, r8, asr lr
    ea70:	d90c0c00 	stmdble	ip, {sl, fp}
    ea74:	0100002d 	tsteq	r0, sp, lsr #32
    ea78:	0000c359 	andeq	ip, r0, r9, asr r3
    ea7c:	03001000 	movweq	r1, #0
    ea80:	000030c9 	andeq	r3, r0, r9, asr #1
    ea84:	03605a01 	cmneq	r0, #4096	; 0x1000
    ea88:	1d0d0000 	stcne	0, cr0, [sp, #-0]
    ea8c:	0200002d 	andeq	r0, r0, #45	; 0x2d
    ea90:	03d301f9 	bicseq	r0, r3, #1073741886	; 0x4000003e
    ea94:	f70e0000 			; <UNDEFINED> instruction: 0xf70e0000
    ea98:	01000030 	tsteq	r0, r0, lsr r0
    ea9c:	0000ce65 	andeq	ip, r0, r5, ror #28
    eaa0:	2d6e0e00 	stclcs	14, cr0, [lr, #-0]
    eaa4:	65010000 	strvs	r0, [r1, #-0]
    eaa8:	000000ce 	andeq	r0, r0, lr, asr #1
    eaac:	2d560f00 	ldclcs	15, cr0, [r6, #-0]
    eab0:	10020000 	andne	r0, r2, r0
    eab4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    eab8:	03fb0100 	mvnseq	r0, #0, 2
    eabc:	f70e0000 			; <UNDEFINED> instruction: 0xf70e0000
    eac0:	01000030 	tsteq	r0, r0, lsr r0
    eac4:	0000cea0 	andeq	ip, r0, r0, lsr #29
    eac8:	31b71000 			; <UNDEFINED> instruction: 0x31b71000
    eacc:	a2010000 	andge	r0, r1, #0
    ead0:	000000ce 	andeq	r0, r0, lr, asr #1
    ead4:	03b01100 	movseq	r1, #0, 2
    ead8:	3a000000 	bcc	eae0 <__exidx_end+0x8e20>
    eadc:	005c0000 	subseq	r0, ip, r0
    eae0:	9c010000 	stcls	0, cr0, [r1], {-0}
    eae4:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    eae8:	0003bc12 	andeq	fp, r3, r2, lsl ip
    eaec:	00384f00 	eorseq	r4, r8, r0, lsl #30
    eaf0:	03c71200 	biceq	r1, r7, #0, 4
    eaf4:	387b0000 	ldmdacc	fp!, {}^	; <UNPREDICTABLE>
    eaf8:	3a130000 	bcc	4ceb00 <__ccfg+0x4aeb58>
    eafc:	1400003a 	strne	r0, [r0], #-58	; 0xffffffc6
    eb00:	61000000 	mrsvs	r0, (UNDEF: 0)
    eb04:	12000004 	andne	r0, r0, #4
    eb08:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    eb0c:	000038a7 	andeq	r3, r0, r7, lsr #17
    eb10:	0003c712 	andeq	ip, r3, r2, lsl r7
    eb14:	0038ba00 	eorseq	fp, r8, r0, lsl #20
    eb18:	3a4e1400 	bcc	1393b20 <__ccfg+0x1373b78>
    eb1c:	74020000 	strvc	r0, [r2], #-0
    eb20:	53011500 	movwpl	r1, #5376	; 0x1500
    eb24:	01153201 	tsteq	r5, r1, lsl #4
    eb28:	153c0152 	ldrne	r0, [ip, #-338]!	; 0xfffffeae
    eb2c:	30015101 	andcc	r5, r1, r1, lsl #2
    eb30:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    eb34:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    eb38:	16000040 	strne	r0, [r0], -r0, asr #32
    eb3c:	00003a1e 	andeq	r3, r0, lr, lsl sl
    eb40:	8d007602 	stchi	6, cr7, [r0, #-8]
    eb44:	15000004 	strne	r0, [r0, #-4]
    eb48:	30015301 	andcc	r5, r1, r1, lsl #6
    eb4c:	01520115 	cmpeq	r2, r5, lsl r1
    eb50:	51011531 	tstpl	r1, r1, lsr r5
    eb54:	01153001 	tsteq	r5, r1
    eb58:	000c0550 	andeq	r0, ip, r0, asr r5
    eb5c:	15400ca0 	strbne	r0, [r0, #-3232]	; 0xfffff360
    eb60:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    eb64:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
    eb68:	00003a36 	andeq	r3, r0, r6, lsr sl
    eb6c:	15007602 	strne	r7, [r0, #-1538]	; 0xfffff9fe
    eb70:	31015301 	tstcc	r1, r1, lsl #6
    eb74:	01520115 	cmpeq	r2, r5, lsl r1
    eb78:	51011532 	tstpl	r1, r2, lsr r5
    eb7c:	01153001 	tsteq	r5, r1
    eb80:	000c0550 	andeq	r0, ip, r0, asr r5
    eb84:	15400ca0 	strbne	r0, [r0, #-3232]	; 0xfffff360
    eb88:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    eb8c:	00000074 	andeq	r0, r0, r4, ror r0
    eb90:	0003d311 	andeq	sp, r3, r1, lsl r3
    eb94:	003a5c00 	eorseq	r5, sl, r0, lsl #24
    eb98:	00002c00 	andeq	r2, r0, r0, lsl #24
    eb9c:	0d9c0100 	ldfeqs	f0, [ip]
    eba0:	12000005 	andne	r0, r0, #5
    eba4:	000003e4 	andeq	r0, r0, r4, ror #7
    eba8:	000038db 	ldrdeq	r3, [r0], -fp
    ebac:	0003ef17 	andeq	lr, r3, r7, lsl pc
    ebb0:	18500100 	ldmdane	r0, {r8}^
    ebb4:	00001138 	andeq	r1, r0, r8, lsr r1
    ebb8:	000004f4 	strdeq	r0, [r0], -r4
    ebbc:	0003e419 	andeq	lr, r3, r9, lsl r4
    ebc0:	381a0400 	ldmdacc	sl, {sl}
    ebc4:	1b000011 	blne	ec10 <__exidx_end+0x8f50>
    ebc8:	000003ef 	andeq	r0, r0, pc, ror #7
    ebcc:	7c140000 	ldcvc	0, cr0, [r4], {-0}
    ebd0:	0200003a 	andeq	r0, r0, #58	; 0x3a
    ebd4:	01150074 	tsteq	r5, r4, ror r0
    ebd8:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    ebdc:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    ebe0:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    ebe4:	1c000040 	stcne	0, cr0, [r0], {64}	; 0x40
    ebe8:	0000328d 	andeq	r3, r0, sp, lsl #5
    ebec:	ce018402 	cdpgt	4, 0, cr8, cr1, cr2, {0}
    ebf0:	00000000 	andeq	r0, r0, r0
    ebf4:	90000000 	andls	r0, r0, r0
    ebf8:	01000000 	mrseq	r0, (UNDEF: 0)
    ebfc:	0005769c 	muleq	r5, ip, r6
    ec00:	30e31d00 	rsccc	r1, r3, r0, lsl #26
    ec04:	c2010000 	andgt	r0, r1, #0
    ec08:	000000ce 	andeq	r0, r0, lr, asr #1
    ec0c:	000038fc 	strdeq	r3, [r0], -ip
    ec10:	0030561e 	eorseq	r5, r0, lr, lsl r6
    ec14:	cec40100 	polgts	f0, f4, f0
    ec18:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    ec1c:	1e000039 	mcrne	0, 0, r0, cr0, cr9, {1}
    ec20:	0000306f 	andeq	r3, r0, pc, rrx
    ec24:	00c3c501 	sbceq	ip, r3, r1, lsl #10
    ec28:	393b0000 	ldmdbcc	fp!, {}	; <UNPREDICTABLE>
    ec2c:	e51e0000 	ldr	r0, [lr, #-0]
    ec30:	0100002d 	tsteq	r0, sp, lsr #32
    ec34:	0000cec6 	andeq	ip, r0, r6, asr #29
    ec38:	00396200 	eorseq	r6, r9, r0, lsl #4
    ec3c:	00001f00 	andeq	r1, r0, r0, lsl #30
    ec40:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ec44:	001f0000 	andseq	r0, pc, r0
    ec48:	aa000000 	bge	ec50 <__exidx_end+0x8f90>
    ec4c:	00000008 	andeq	r0, r0, r8
    ec50:	002e9420 	eoreq	r9, lr, r0, lsr #8
    ec54:	01910200 	orrseq	r0, r1, r0, lsl #4
    ec58:	00003a88 	andeq	r3, r0, r8, lsl #21
    ec5c:	00000018 	andeq	r0, r0, r8, lsl r0
    ec60:	05ae9c01 	streq	r9, [lr, #3073]!	; 0xc01
    ec64:	92210000 	eorls	r0, r1, #0
    ec68:	b000003a 	andlt	r0, r0, sl, lsr r0
    ec6c:	a4000003 	strge	r0, [r0], #-3
    ec70:	15000005 	strne	r0, [r0, #-5]
    ec74:	31015101 	tstcc	r1, r1, lsl #2
    ec78:	01500115 	cmpeq	r0, r5, lsl r1
    ec7c:	961f0033 			; <UNDEFINED> instruction: 0x961f0033
    ec80:	9e00003a 	mcrls	0, 0, r0, cr0, cr10, {1}
    ec84:	00000008 	andeq	r0, r0, r8
    ec88:	0030ad22 	eorseq	sl, r0, r2, lsr #26
    ec8c:	01220200 			; <UNDEFINED> instruction: 0x01220200
    ec90:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    ec94:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
    ec98:	00000ca7 	andeq	r0, r0, r7, lsr #25
    ec9c:	00310223 	eorseq	r0, r1, r3, lsr #4
    eca0:	01400200 	mrseq	r0, (UNDEF: 96)
    eca4:	2da41c03 	stccs	12, cr1, [r4, #12]!
    eca8:	a1020000 	mrsge	r0, (UNDEF: 2)
    ecac:	0005bb01 	andeq	fp, r5, r1, lsl #22
    ecb0:	003aa000 	eorseq	sl, sl, r0
    ecb4:	00006000 	andeq	r6, r0, r0
    ecb8:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    ecbc:	24000006 	strcs	r0, [r0], #-6
    ecc0:	0000308e 	andeq	r3, r0, lr, lsl #1
    ecc4:	ce010201 	cdpgt	2, 0, cr0, cr1, cr1, {0}
    ecc8:	b6000000 	strlt	r0, [r0], -r0
    eccc:	24000039 	strcs	r0, [r0], #-57	; 0xffffffc7
    ecd0:	0000315b 	andeq	r3, r0, fp, asr r1
    ecd4:	ce010301 	cdpgt	3, 0, cr0, cr1, cr1, {0}
    ecd8:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    ecdc:	25000039 	strcs	r0, [r0, #-57]	; 0xffffffc7
    ece0:	000005ae 	andeq	r0, r0, lr, lsr #11
    ece4:	00003aac 	andeq	r3, r0, ip, lsr #21
    ece8:	00000010 	andeq	r0, r0, r0, lsl r0
    ecec:	3c010901 			; <UNDEFINED> instruction: 0x3c010901
    ecf0:	14000006 	strne	r0, [r0], #-6
    ecf4:	00003abc 			; <UNDEFINED> instruction: 0x00003abc
    ecf8:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    ecfc:	30015301 	andcc	r5, r1, r1, lsl #6
    ed00:	01520115 	cmpeq	r2, r5, lsl r1
    ed04:	51011531 	tstpl	r1, r1, lsr r5
    ed08:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    ed0c:	0c055001 	stceq	0, cr5, [r5], {1}
    ed10:	400ca000 	andmi	sl, ip, r0
    ed14:	c2250000 	eorgt	r0, r5, #0
    ed18:	be000005 	cdplt	0, 0, cr0, cr0, cr5, {0}
    ed1c:	0800003a 	stmdaeq	r0, {r1, r3, r4, r5}
    ed20:	01000000 	mrseq	r0, (UNDEF: 0)
    ed24:	065a010a 	ldrbeq	r0, [sl], -sl, lsl #2
    ed28:	c61f0000 	ldrgt	r0, [pc], -r0
    ed2c:	b500003a 	strlt	r0, [r0, #-58]	; 0xffffffc6
    ed30:	00000008 	andeq	r0, r0, r8
    ed34:	003aa821 	eorseq	sl, sl, r1, lsr #16
    ed38:	0003d300 	andeq	sp, r3, r0, lsl #6
    ed3c:	00066d00 	andeq	r6, r6, r0, lsl #26
    ed40:	50011500 	andpl	r1, r1, r0, lsl #10
    ed44:	1f003101 	svcne	0x00003101
    ed48:	00003aca 	andeq	r3, r0, sl, asr #21
    ed4c:	0000089e 	muleq	r0, lr, r8
    ed50:	2ef92000 	cdpcs	0, 15, cr2, cr9, cr0, {0}
    ed54:	ae020000 	cdpge	0, 0, cr0, cr2, cr0, {0}
    ed58:	003b0001 	eorseq	r0, fp, r1
    ed5c:	00003400 	andeq	r3, r0, r0, lsl #8
    ed60:	e99c0100 	ldmib	ip, {r8}
    ed64:	25000006 	strcs	r0, [r0, #-6]
    ed68:	000005c2 	andeq	r0, r0, r2, asr #11
    ed6c:	00003b12 	andeq	r3, r0, r2, lsl fp
    ed70:	00000008 	andeq	r0, r0, r8
    ed74:	ab012f01 	blge	5a980 <__ccfg+0x3a9d8>
    ed78:	1f000006 	svcne	0x00000006
    ed7c:	00003b1a 	andeq	r3, r0, sl, lsl fp
    ed80:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    ed84:	3b0a2100 	blcc	29718c <__ccfg+0x2771e4>
    ed88:	03b00000 	movseq	r0, #0
    ed8c:	06c30000 	strbeq	r0, [r3], r0
    ed90:	01150000 	tsteq	r5, r0
    ed94:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    ed98:	33015001 	movwcc	r5, #4097	; 0x1001
    ed9c:	3b102100 	blcc	4171a4 <__ccfg+0x3f71fc>
    eda0:	03d30000 	bicseq	r0, r3, #0
    eda4:	06d60000 	ldrbeq	r0, [r6], r0
    eda8:	01150000 	tsteq	r5, r0
    edac:	00310150 	eorseq	r0, r1, r0, asr r1
    edb0:	003b1e1f 	eorseq	r1, fp, pc, lsl lr
    edb4:	00089e00 	andeq	r9, r8, r0, lsl #28
    edb8:	3b261f00 	blcc	9969c0 <__ccfg+0x976a18>
    edbc:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    edc0:	1c000000 	stcne	0, cr0, [r0], {-0}
    edc4:	00002f53 	andeq	r2, r0, r3, asr pc
    edc8:	c301f202 	movwgt	pc, #4610	; 0x1202	; <UNPREDICTABLE>
    edcc:	00000000 	andeq	r0, r0, r0
    edd0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    edd4:	01000000 	mrseq	r0, (UNDEF: 0)
    edd8:	00079a9c 	muleq	r7, ip, sl
    eddc:	31212600 			; <UNDEFINED> instruction: 0x31212600
    ede0:	3c010000 	stccc	0, cr0, [r1], {-0}
    ede4:	0000c301 	andeq	ip, r0, r1, lsl #6
    ede8:	0039dc00 	eorseq	sp, r9, r0, lsl #24
    edec:	30842700 	addcc	r2, r4, r0, lsl #14
    edf0:	3f010000 	svccc	0x00010000
    edf4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    edf8:	27510100 	ldrbcs	r0, [r1, -r0, lsl #2]
    edfc:	000032e7 	andeq	r3, r0, r7, ror #5
    ee00:	c3014101 	movwgt	r4, #4353	; 0x1101
    ee04:	05000000 	streq	r0, [r0, #-0]
    ee08:	26400071 			; <UNDEFINED> instruction: 0x26400071
    ee0c:	2df8279f 	ldclcs	7, cr2, [r8, #636]!	; 0x27c
    ee10:	43010000 	movwmi	r0, #4096	; 0x1000
    ee14:	0000c301 	andeq	ip, r0, r1, lsl #6
    ee18:	00710700 	rsbseq	r0, r1, r0, lsl #14
    ee1c:	26482440 	strbcs	r2, [r8], -r0, asr #8
    ee20:	2e00279f 	mcrcs	7, 0, r2, cr0, cr15, {4}
    ee24:	45010000 	strmi	r0, [r1, #-0]
    ee28:	0000c301 	andeq	ip, r0, r1, lsl #6
    ee2c:	00710700 	rsbseq	r0, r1, r0, lsl #14
    ee30:	26482448 	strbcs	r2, [r8], -r8, asr #8
    ee34:	2e08249f 	mcrcs	4, 0, r2, cr8, cr15, {4}
    ee38:	47010000 	strmi	r0, [r1, -r0]
    ee3c:	0000c301 	andeq	ip, r0, r1, lsl #6
    ee40:	003a0a00 	eorseq	r0, sl, r0, lsl #20
    ee44:	2e712400 	cdpcs	4, 7, cr2, cr1, cr0, {0}
    ee48:	56010000 	strpl	r0, [r1], -r0
    ee4c:	0000c301 	andeq	ip, r0, r1, lsl #6
    ee50:	003a2300 	eorseq	r2, sl, r0, lsl #6
    ee54:	30292400 	eorcc	r2, r9, r0, lsl #8
    ee58:	57010000 	strpl	r0, [r1, -r0]
    ee5c:	0000c301 	andeq	ip, r0, r1, lsl #6
    ee60:	003a4600 	eorseq	r4, sl, r0, lsl #12
    ee64:	00642800 	rsbeq	r2, r4, r0, lsl #16
    ee68:	c3015801 	movwgt	r5, #6145	; 0x1801
    ee6c:	6f000000 	svcvs	0x00000000
    ee70:	0000003a 	andeq	r0, r0, sl, lsr r0
    ee74:	00316c1c 	eorseq	r6, r1, ip, lsl ip
    ee78:	020e0200 	andeq	r0, lr, #0, 4
    ee7c:	000000ad 	andeq	r0, r0, sp, lsr #1
    ee80:	00000000 	andeq	r0, r0, r0
    ee84:	0000000c 	andeq	r0, r0, ip
    ee88:	07d59c01 	ldrbeq	r9, [r5, r1, lsl #24]
    ee8c:	42260000 	eormi	r0, r6, #0
    ee90:	01000030 	tsteq	r0, r0, lsr r0
    ee94:	00c30163 	sbceq	r0, r3, r3, ror #2
    ee98:	3ae90000 	bcc	ffa4eea0 <_estack+0xdfa49ea0>
    ee9c:	1b240000 	blne	90eea4 <__ccfg+0x8eeefc>
    eea0:	01000032 	tsteq	r0, r2, lsr r0
    eea4:	00c30185 	sbceq	r0, r3, r5, lsl #3
    eea8:	3b0a0000 	blcc	28eeb0 <__ccfg+0x26ef08>
    eeac:	1c000000 	stcne	0, cr0, [r0], {-0}
    eeb0:	00002f7d 	andeq	r2, r0, sp, ror pc
    eeb4:	ce01c202 	cdpgt	2, 0, cr12, cr1, cr2, {0}
    eeb8:	00000000 	andeq	r0, r0, r0
    eebc:	34000000 	strcc	r0, [r0], #-0
    eec0:	01000000 	mrseq	r0, (UNDEF: 0)
    eec4:	0008429c 	muleq	r8, ip, r2
    eec8:	326e2400 	rsbcc	r2, lr, #0, 8
    eecc:	92010000 	andls	r0, r1, #0
    eed0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    eed4:	003b4a00 	eorseq	r4, fp, r0, lsl #20
    eed8:	20152400 	andscs	r2, r5, r0, lsl #8
    eedc:	93010000 	movwls	r0, #4096	; 0x1000
    eee0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    eee4:	003b6c00 	eorseq	r6, fp, r0, lsl #24
    eee8:	2f402400 	svccs	0x00402400
    eeec:	94010000 	strls	r0, [r1], #-0
    eef0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    eef4:	003b7f00 	eorseq	r7, fp, r0, lsl #30
    eef8:	2ede2400 	cdpcs	4, 13, cr2, cr14, cr0, {0}
    eefc:	95010000 	strls	r0, [r1, #-0]
    ef00:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ef04:	003ba200 	eorseq	sl, fp, r0, lsl #4
    ef08:	00001f00 	andeq	r1, r0, r0, lsl #30
    ef0c:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ef10:	001f0000 	andseq	r0, pc, r0
    ef14:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    ef18:	00000008 	andeq	r0, r0, r8
    ef1c:	00323a1c 	eorseq	r3, r2, ip, lsl sl
    ef20:	01d30200 	bicseq	r0, r3, r0, lsl #4
    ef24:	000000ce 	andeq	r0, r0, lr, asr #1
    ef28:	00000000 	andeq	r0, r0, r0
    ef2c:	0000001c 	andeq	r0, r0, ip, lsl r0
    ef30:	088d9c01 	stmeq	sp, {r0, sl, fp, ip, pc}
    ef34:	be240000 	cdplt	0, 2, cr0, cr4, cr0, {0}
    ef38:	01000030 	tsteq	r0, r0, lsr r0
    ef3c:	00ce01b7 	strheq	r0, [lr], #23
    ef40:	3bbe0000 	blcc	fef8ef48 <_estack+0xdef89f48>
    ef44:	2c240000 	stccs	0, cr0, [r4], #-0
    ef48:	01000032 	tsteq	r0, r2, lsr r0
    ef4c:	00ce01b8 	strheq	r0, [lr], #24
    ef50:	3bd10000 	blcc	ff44ef58 <_estack+0xdf449f58>
    ef54:	7b240000 	blvc	90ef5c <__ccfg+0x8eefb4>
    ef58:	0100002e 	tsteq	r0, lr, lsr #32
    ef5c:	00ce01b9 	strheq	r0, [lr], #25
    ef60:	3bec0000 	blcc	ffb0ef68 <_estack+0xdfb09f68>
    ef64:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    ef68:	00003035 	andeq	r3, r0, r5, lsr r0
    ef6c:	03a55c01 			; <UNDEFINED> instruction: 0x03a55c01
    ef70:	03050000 	movweq	r0, #20480	; 0x5000
    ef74:	20000610 	andcs	r0, r0, r0, lsl r6
    ef78:	002c092a 	eoreq	r0, ip, sl, lsr #18
    ef7c:	03450700 	movteq	r0, #22272	; 0x5700
    ef80:	000000ce 	andeq	r0, r0, lr, asr #1
    ef84:	002b702b 	eoreq	r7, fp, fp, lsr #32
    ef88:	c3aa0800 			; <UNDEFINED> instruction: 0xc3aa0800
    ef8c:	2c000000 	stccs	0, cr0, [r0], {-0}
    ef90:	00002a0d 	andeq	r2, r0, sp, lsl #20
    ef94:	d9089906 	stmdble	r8, {r1, r2, r8, fp, ip, pc}
    ef98:	00000000 	andeq	r0, r0, r0
    ef9c:	000ab400 	andeq	fp, sl, r0, lsl #8
    efa0:	ed000400 	cfstrs	mvf0, [r0, #-0]
    efa4:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    efa8:	002a3f01 	eoreq	r3, sl, r1, lsl #30
    efac:	340b0100 	strcc	r0, [fp], #-256	; 0xffffff00
    efb0:	2b060000 	blcs	18efb8 <__ccfg+0x16f010>
    efb4:	11a80000 			; <UNDEFINED> instruction: 0x11a80000
    efb8:	00000000 	andeq	r0, r0, r0
    efbc:	7ce20000 	stclvc	0, cr0, [r2]
    efc0:	01020000 	mrseq	r0, (UNDEF: 2)
    efc4:	000c5d06 	andeq	r5, ip, r6, lsl #26
    efc8:	2a1a0300 	bcs	68fbd0 <__ccfg+0x66fc28>
    efcc:	1d030000 	stcne	0, cr0, [r3, #-0]
    efd0:	00000037 	andeq	r0, r0, r7, lsr r0
    efd4:	5b080102 	blpl	20f3e4 <__ccfg+0x1ef43c>
    efd8:	0300000c 	movweq	r0, #12
    efdc:	000031eb 	andeq	r3, r0, fp, ror #3
    efe0:	00492903 	subeq	r2, r9, r3, lsl #18
    efe4:	02020000 	andeq	r0, r2, #0
    efe8:	000a6b05 	andeq	r6, sl, r5, lsl #22
    efec:	2e100300 	cdpcs	3, 1, cr0, cr0, cr0, {0}
    eff0:	2b030000 	blcs	ceff8 <__ccfg+0xaf050>
    eff4:	0000005b 	andeq	r0, r0, fp, asr r0
    eff8:	66070202 	strvs	r0, [r7], -r2, lsl #4
    effc:	0300000d 	movweq	r0, #13
    f000:	00002b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    f004:	006d3f03 	rsbeq	r3, sp, r3, lsl #30
    f008:	04020000 	streq	r0, [r2], #-0
    f00c:	0007fd05 	andeq	pc, r7, r5, lsl #26
    f010:	29b20300 	ldmibcs	r2!, {r8, r9}
    f014:	41030000 	mrsmi	r0, (UNDEF: 3)
    f018:	0000007f 	andeq	r0, r0, pc, ror r0
    f01c:	26070402 	strcs	r0, [r7], -r2, lsl #8
    f020:	02000004 	andeq	r0, r0, #4
    f024:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    f028:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    f02c:	00042107 	andeq	r2, r4, r7, lsl #2
    f030:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    f034:	00746e69 	rsbseq	r6, r4, r9, ror #28
    f038:	2b070402 	blcs	1d0048 <__ccfg+0x1b00a0>
    f03c:	03000004 	movweq	r0, #4
    f040:	00002a1c 	andeq	r2, r0, ip, lsl sl
    f044:	002c1404 	eoreq	r1, ip, r4, lsl #8
    f048:	ed030000 	stc	0, cr0, [r3, #-0]
    f04c:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    f050:	00003e19 	andeq	r3, r0, r9, lsl lr
    f054:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    f058:	1a040000 	bne	10f060 <__ccfg+0xef0b8>
    f05c:	00000050 	andeq	r0, r0, r0, asr r0
    f060:	002ba103 	eoreq	sl, fp, r3, lsl #2
    f064:	621f0400 	andsvs	r0, pc, #0, 8
    f068:	03000000 	movweq	r0, #0
    f06c:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    f070:	00742004 	rsbseq	r2, r4, r4
    f074:	14030000 	strne	r0, [r3], #-0
    f078:	05000033 	streq	r0, [r0, #-51]	; 0xffffffcd
    f07c:	00009bd4 	ldrdeq	r9, [r0], -r4
    f080:	07040200 	streq	r0, [r4, -r0, lsl #4]
    f084:	00002cb3 			; <UNDEFINED> instruction: 0x00002cb3
    f088:	01020405 	tsteq	r2, r5, lsl #8
    f08c:	000c6408 	andeq	r6, ip, r8, lsl #8
    f090:	24e10300 	strbtcs	r0, [r1], #768	; 0x300
    f094:	3b060000 	blcc	18f09c <__ccfg+0x16f0f4>
    f098:	000000ce 	andeq	r0, r0, lr, asr #1
    f09c:	00a20406 	adceq	r0, r2, r6, lsl #8
    f0a0:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    f0a4:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f0a8:	0001103c 	andeq	r1, r1, ip, lsr r0
    f0ac:	25470700 	strbcs	r0, [r7, #-1792]	; 0xfffff900
    f0b0:	07100000 	ldreq	r0, [r0, -r0]
    f0b4:	0001656f 	andeq	r6, r1, pc, ror #10
    f0b8:	1f130800 	svcne	0x00130800
    f0bc:	70070000 	andvc	r0, r7, r0
    f0c0:	000000b8 	strheq	r0, [r0], -r8
    f0c4:	07780800 	ldrbeq	r0, [r8, -r0, lsl #16]!
    f0c8:	71070000 	mrsvc	r0, (UNDEF: 7)
    f0cc:	000000b8 	strheq	r0, [r0], -r8
    f0d0:	22860802 	addcs	r0, r6, #131072	; 0x20000
    f0d4:	74070000 	strvc	r0, [r7], #-0
    f0d8:	0000026d 	andeq	r0, r0, sp, ror #4
    f0dc:	20150804 	andscs	r0, r5, r4, lsl #16
    f0e0:	75070000 	strvc	r0, [r7, #-0]
    f0e4:	000000f4 	strdeq	r0, [r0], -r4
    f0e8:	22b60808 	adcscs	r0, r6, #8, 16	; 0x80000
    f0ec:	7d070000 	stcvc	0, cr0, [r7, #-0]
    f0f0:	00000201 	andeq	r0, r0, r1, lsl #4
    f0f4:	2200080c 	andcs	r0, r0, #12, 16	; 0xc0000
    f0f8:	81070000 	mrshi	r0, (UNDEF: 7)
    f0fc:	00000246 	andeq	r0, r0, r6, asr #4
    f100:	3c03000d 	stccc	0, cr0, [r3], {13}
    f104:	07000034 	smladxeq	r0, r4, r0, r0
    f108:	0001703e 	andeq	r7, r1, lr, lsr r0
    f10c:	34260700 	strtcc	r0, [r6], #-1792	; 0xfffff900
    f110:	07180000 	ldreq	r0, [r8, -r0]
    f114:	000201a5 	andeq	r0, r2, r5, lsr #3
    f118:	1f130800 	svcne	0x00130800
    f11c:	a6070000 	strge	r0, [r7], -r0
    f120:	000000b8 	strheq	r0, [r0], -r8
    f124:	07780800 	ldrbeq	r0, [r8, -r0, lsl #16]!
    f128:	a7070000 	strge	r0, [r7, -r0]
    f12c:	000000b8 	strheq	r0, [r0], -r8
    f130:	22860802 	addcs	r0, r6, #131072	; 0x20000
    f134:	aa070000 	bge	1cf13c <__ccfg+0x1af194>
    f138:	0000026d 	andeq	r0, r0, sp, ror #4
    f13c:	20150804 	andscs	r0, r5, r4, lsl #16
    f140:	ab070000 	blge	1cf148 <__ccfg+0x1af1a0>
    f144:	000000f4 	strdeq	r0, [r0], -r4
    f148:	22b60808 	adcscs	r0, r6, #8, 16	; 0x80000
    f14c:	b3070000 	movwlt	r0, #28672	; 0x7000
    f150:	00000273 	andeq	r0, r0, r3, ror r2
    f154:	2200080c 	andcs	r0, r0, #12, 16	; 0xc0000
    f158:	b7070000 	strlt	r0, [r7, -r0]
    f15c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    f160:	0036080d 	eorseq	r0, r6, sp, lsl #16
    f164:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    f168:	000000a2 	andeq	r0, r0, r2, lsr #1
    f16c:	23cc080e 	biccs	r0, ip, #917504	; 0xe0000
    f170:	bf070000 	svclt	0x00070000
    f174:	000000a2 	andeq	r0, r0, r2, lsr #1
    f178:	147d080f 	ldrbtne	r0, [sp], #-2063	; 0xfffff7f1
    f17c:	d4070000 	strle	r0, [r7], #-0
    f180:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    f184:	20960810 	addscs	r0, r6, r0, lsl r8
    f188:	d5070000 	strle	r0, [r7, #-0]
    f18c:	000000b8 	strheq	r0, [r0], -r8
    f190:	24d40812 	ldrbcs	r0, [r4], #2066	; 0x812
    f194:	d6070000 	strle	r0, [r7], -r0
    f198:	00000324 	andeq	r0, r0, r4, lsr #6
    f19c:	01090014 	tsteq	r9, r4, lsl r0
    f1a0:	02467607 	subeq	r7, r6, #7340032	; 0x700000
    f1a4:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    f1a8:	07000027 	streq	r0, [r0, -r7, lsr #32]
    f1ac:	0000a277 	andeq	sl, r0, r7, ror r2
    f1b0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f1b4:	21070a00 	tstcs	r7, r0, lsl #20
    f1b8:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    f1bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f1c0:	00030101 	andeq	r0, r3, r1, lsl #2
    f1c4:	0021c70a 	eoreq	ip, r1, sl, lsl #14
    f1c8:	a27a0700 	rsbsge	r0, sl, #0, 14
    f1cc:	01000000 	mrseq	r0, (UNDEF: 0)
    f1d0:	0a000102 	beq	f5e0 <__exidx_end+0x9920>
    f1d4:	00001f82 	andeq	r1, r0, r2, lsl #31
    f1d8:	00a27b07 	adceq	r7, r2, r7, lsl #22
    f1dc:	01010000 	mrseq	r0, (UNDEF: 1)
    f1e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    f1e4:	6d7e0701 	ldclvs	7, cr0, [lr, #-4]!
    f1e8:	0a000002 	beq	f1f8 <__exidx_end+0x9538>
    f1ec:	000025e4 	andeq	r2, r0, r4, ror #11
    f1f0:	00a27f07 	adceq	r7, r2, r7, lsl #30
    f1f4:	04010000 	streq	r0, [r1], #-0
    f1f8:	380a0004 	stmdacc	sl, {r2}
    f1fc:	07000027 	streq	r0, [r0, -r7, lsr #32]
    f200:	0000a280 	andeq	sl, r0, r0, lsl #5
    f204:	00040100 	andeq	r0, r4, r0, lsl #2
    f208:	04060000 	streq	r0, [r6], #-0
    f20c:	00000105 	andeq	r0, r0, r5, lsl #2
    f210:	ac070109 	stfges	f0, [r7], {9}
    f214:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    f218:	0027690a 	eoreq	r6, r7, sl, lsl #18
    f21c:	a2ad0700 	adcge	r0, sp, #0, 14
    f220:	01000000 	mrseq	r0, (UNDEF: 0)
    f224:	0a000404 	beq	1023c <__exidx_end+0xa57c>
    f228:	00002107 	andeq	r2, r0, r7, lsl #2
    f22c:	00a2ae07 	adceq	sl, r2, r7, lsl #28
    f230:	01010000 	mrseq	r0, (UNDEF: 1)
    f234:	c70a0003 	strgt	r0, [sl, -r3]
    f238:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f23c:	0000a2b0 			; <UNDEFINED> instruction: 0x0000a2b0
    f240:	01020100 	mrseq	r0, (UNDEF: 18)
    f244:	1f820a00 	svcne	0x00820a00
    f248:	b1070000 	mrslt	r0, (UNDEF: 7)
    f24c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f250:	00000101 	andeq	r0, r0, r1, lsl #2
    f254:	07010900 	streq	r0, [r1, -r0, lsl #18]
    f258:	0002dfb4 			; <UNDEFINED> instruction: 0x0002dfb4
    f25c:	25e40a00 	strbcs	r0, [r4, #2560]!	; 0xa00
    f260:	b5070000 	strlt	r0, [r7, #-0]
    f264:	000000a2 	andeq	r0, r0, r2, lsr #1
    f268:	00040401 	andeq	r0, r4, r1, lsl #8
    f26c:	0027380a 	eoreq	r3, r7, sl, lsl #16
    f270:	a2b60700 	adcsge	r0, r6, #0, 14
    f274:	01000000 	mrseq	r0, (UNDEF: 0)
    f278:	00000004 	andeq	r0, r0, r4
    f27c:	c2070209 	andgt	r0, r7, #-1879048192	; 0x90000000
    f280:	00000324 	andeq	r0, r0, r4, lsr #6
    f284:	0021ba0a 	eoreq	fp, r1, sl, lsl #20
    f288:	b8c30700 	stmialt	r3, {r8, r9, sl}^
    f28c:	02000000 	andeq	r0, r0, #0
    f290:	0a000d03 	beq	126a4 <__exidx_end+0xc9e4>
    f294:	00002159 	andeq	r2, r0, r9, asr r1
    f298:	00b8c907 	adcseq	ip, r8, r7, lsl #18
    f29c:	01020000 	mrseq	r0, (UNDEF: 2)
    f2a0:	f90a000c 			; <UNDEFINED> instruction: 0xf90a000c
    f2a4:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f2a8:	0000b8cb 	andeq	fp, r0, fp, asr #17
    f2ac:	06060200 	streq	r0, [r6], -r0, lsl #4
    f2b0:	23f80a00 	mvnscs	r0, #0, 20
    f2b4:	d2070000 	andle	r0, r7, #0
    f2b8:	000000b8 	strheq	r0, [r0], -r8
    f2bc:	00050102 	andeq	r0, r5, r2, lsl #2
    f2c0:	ce040600 	cfmadd32gt	mvax0, mvfx0, mvfx4, mvfx0
    f2c4:	03000000 	movweq	r0, #0
    f2c8:	00003349 	andeq	r3, r0, r9, asr #6
    f2cc:	03354208 	teqeq	r5, #8, 4	; 0x80000000
    f2d0:	d90b0000 	stmdble	fp, {}	; <UNPREDICTABLE>
    f2d4:	20000033 	andcs	r0, r0, r3, lsr r0
    f2d8:	f901c108 			; <UNDEFINED> instruction: 0xf901c108
    f2dc:	0c000003 	stceq	0, cr0, [r0], {3}
    f2e0:	00001f13 	andeq	r1, r0, r3, lsl pc
    f2e4:	b801c208 	stmdalt	r1, {r3, r9, lr, pc}
    f2e8:	00000000 	andeq	r0, r0, r0
    f2ec:	0007780c 	andeq	r7, r7, ip, lsl #16
    f2f0:	01c30800 	biceq	r0, r3, r0, lsl #16
    f2f4:	000000b8 	strheq	r0, [r0], -r8
    f2f8:	22860c02 	addcs	r0, r6, #512	; 0x200
    f2fc:	c6080000 	strgt	r0, [r8], -r0
    f300:	00026d01 	andeq	r6, r2, r1, lsl #26
    f304:	150c0400 	strne	r0, [ip, #-1024]	; 0xfffffc00
    f308:	08000020 	stmdaeq	r0, {r5}
    f30c:	00f401c7 	rscseq	r0, r4, r7, asr #3
    f310:	0c080000 	stceq	0, cr0, [r8], {-0}
    f314:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
    f318:	ef01cf08 	svc	0x0001cf08
    f31c:	0c000004 	stceq	0, cr0, [r0], {4}
    f320:	0022000c 	eoreq	r0, r2, ip
    f324:	01d30800 	bicseq	r0, r3, r0, lsl #16
    f328:	00000539 	andeq	r0, r0, r9, lsr r5
    f32c:	1f080c0d 	svcne	0x00080c0d
    f330:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    f334:	00056301 	andeq	r6, r5, r1, lsl #6
    f338:	6f0c0e00 	svcvs	0x000c0e00
    f33c:	08000022 	stmdaeq	r0, {r1, r5}
    f340:	058d01de 	streq	r0, [sp, #478]	; 0x1de
    f344:	0c100000 	ldceq	0, cr0, [r0], {-0}
    f348:	0000209e 	muleq	r0, lr, r0
    f34c:	a201df08 	andge	sp, r1, #8, 30
    f350:	14000000 	strne	r0, [r0], #-0
    f354:	0023320c 	eoreq	r3, r3, ip, lsl #4
    f358:	01e70800 	mvneq	r0, r0, lsl #16
    f35c:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    f360:	200a0c15 	andcs	r0, sl, r5, lsl ip
    f364:	fb080000 	blx	20f36e <__ccfg+0x1ef3c6>
    f368:	0005e101 	andeq	lr, r5, r1, lsl #2
    f36c:	7d0c1600 	stcvc	6, cr1, [ip, #-0]
    f370:	08000014 	stmdaeq	r0, {r2, r4}
    f374:	063b020e 	ldrteq	r0, [fp], -lr, lsl #4
    f378:	0c180000 	ldceq	0, cr0, [r8], {-0}
    f37c:	00002096 	muleq	r0, r6, r0
    f380:	b8020f08 	stmdalt	r2, {r3, r8, r9, sl, fp}
    f384:	1a000000 	bne	f38c <__exidx_end+0x96cc>
    f388:	0024d40c 	eoreq	sp, r4, ip, lsl #8
    f38c:	02100800 	andseq	r0, r0, #0, 16
    f390:	00000324 	andeq	r0, r0, r4, lsr #6
    f394:	7403001c 	strvc	r0, [r3], #-28	; 0xffffffe4
    f398:	08000024 	stmdaeq	r0, {r2, r5}
    f39c:	00040443 	andeq	r0, r4, r3, asr #8
    f3a0:	24550b00 	ldrbcs	r0, [r5], #-2816	; 0xfffff500
    f3a4:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    f3a8:	04ef021a 	strbteq	r0, [pc], #538	; f3b0 <__exidx_end+0x96f0>
    f3ac:	130c0000 	movwne	r0, #49152	; 0xc000
    f3b0:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f3b4:	00b8021b 	adcseq	r0, r8, fp, lsl r2
    f3b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    f3bc:	00000778 	andeq	r0, r0, r8, ror r7
    f3c0:	b8021d08 	stmdalt	r2, {r3, r8, sl, fp, ip}
    f3c4:	02000000 	andeq	r0, r0, #0
    f3c8:	0022860c 	eoreq	r8, r2, ip, lsl #12
    f3cc:	02200800 	eoreq	r0, r0, #0, 16
    f3d0:	0000026d 	andeq	r0, r0, sp, ror #4
    f3d4:	20150c04 	andscs	r0, r5, r4, lsl #24
    f3d8:	21080000 	mrscs	r0, (UNDEF: 8)
    f3dc:	0000f402 	andeq	pc, r0, r2, lsl #8
    f3e0:	b60c0800 	strlt	r0, [ip], -r0, lsl #16
    f3e4:	08000022 	stmdaeq	r0, {r1, r5}
    f3e8:	06850229 	streq	r0, [r5], r9, lsr #4
    f3ec:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    f3f0:	00002200 	andeq	r2, r0, r0, lsl #4
    f3f4:	cf022d08 	svcgt	0x00022d08
    f3f8:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    f3fc:	001f080c 	andseq	r0, pc, ip, lsl #16
    f400:	02330800 	eorseq	r0, r3, #0, 16
    f404:	000006f9 	strdeq	r0, [r0], -r9
    f408:	226f0c0e 	rsbcs	r0, pc, #3584	; 0xe00
    f40c:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    f410:	00072302 	andeq	r2, r7, r2, lsl #6
    f414:	9e0c1000 	cdpls	0, 0, cr1, cr12, cr0, {0}
    f418:	08000020 	stmdaeq	r0, {r5}
    f41c:	00a20239 	adceq	r0, r2, r9, lsr r2
    f420:	0c140000 	ldceq	0, cr0, [r4], {-0}
    f424:	00002332 	andeq	r2, r0, r2, lsr r3
    f428:	4d024108 	stfmis	f4, [r2, #-32]	; 0xffffffe0
    f42c:	15000007 	strne	r0, [r0, #-7]
    f430:	00200a0c 	eoreq	r0, r0, ip, lsl #20
    f434:	02550800 	subseq	r0, r5, #0, 16
    f438:	00000777 	andeq	r0, r0, r7, ror r7
    f43c:	147d0c16 	ldrbtne	r0, [sp], #-3094	; 0xfffff3ea
    f440:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
    f444:	0007d102 	andeq	sp, r7, r2, lsl #2
    f448:	960c1800 	strls	r1, [ip], -r0, lsl #16
    f44c:	08000020 	stmdaeq	r0, {r5}
    f450:	00b80269 	adcseq	r0, r8, r9, ror #4
    f454:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    f458:	000024d4 	ldrdeq	r2, [r0], -r4
    f45c:	24026a08 	strcs	r6, [r2], #-2568	; 0xfffff5f8
    f460:	1c000003 	stcne	0, cr0, [r0], {3}
    f464:	001f450c 	andseq	r4, pc, ip, lsl #10
    f468:	026c0800 	rsbeq	r0, ip, #0, 16
    f46c:	000000b8 	strheq	r0, [r0], -r8
    f470:	228e0c20 	addcs	r0, lr, #32, 24	; 0x2000
    f474:	70080000 	andvc	r0, r8, r0
    f478:	0000ad02 	andeq	sl, r0, r2, lsl #26
    f47c:	cc0c2200 	sfmgt	f2, 4, [ip], {-0}
    f480:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f484:	00a20273 	adceq	r0, r2, r3, ror r2
    f488:	00240000 	eoreq	r0, r4, r0
    f48c:	c808010d 	stmdagt	r8, {r0, r2, r3, r8}
    f490:	00053901 	andeq	r3, r5, r1, lsl #18
    f494:	27690e00 	strbcs	r0, [r9, -r0, lsl #28]!
    f498:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    f49c:	0000a201 	andeq	sl, r0, r1, lsl #4
    f4a0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f4a4:	21070e00 	tstcs	r7, r0, lsl #28
    f4a8:	ca080000 	bgt	20f4b0 <__ccfg+0x1ef508>
    f4ac:	0000a201 	andeq	sl, r0, r1, lsl #4
    f4b0:	03010100 	movweq	r0, #4352	; 0x1100
    f4b4:	21c70e00 	biccs	r0, r7, r0, lsl #28
    f4b8:	cc080000 	stcgt	0, cr0, [r8], {-0}
    f4bc:	0000a201 	andeq	sl, r0, r1, lsl #4
    f4c0:	01020100 	mrseq	r0, (UNDEF: 18)
    f4c4:	1f820e00 	svcne	0x00820e00
    f4c8:	cd080000 	stcgt	0, cr0, [r8, #-0]
    f4cc:	0000a201 	andeq	sl, r0, r1, lsl #4
    f4d0:	00010100 	andeq	r0, r1, r0, lsl #2
    f4d4:	010d0000 	mrseq	r0, (UNDEF: 13)
    f4d8:	6301d008 	movwvs	sp, #4104	; 0x1008
    f4dc:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    f4e0:	000025e4 	andeq	r2, r0, r4, ror #11
    f4e4:	a201d108 	andge	sp, r1, #8, 2
    f4e8:	01000000 	mrseq	r0, (UNDEF: 0)
    f4ec:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    f4f0:	00002738 	andeq	r2, r0, r8, lsr r7
    f4f4:	a201d208 	andge	sp, r1, #8, 4	; 0x80000000
    f4f8:	01000000 	mrseq	r0, (UNDEF: 0)
    f4fc:	00000004 	andeq	r0, r0, r4
    f500:	d408020d 	strle	r0, [r8], #-525	; 0xfffffdf3
    f504:	00058d01 	andeq	r8, r5, r1, lsl #26
    f508:	221f0e00 	andscs	r0, pc, #0, 28
    f50c:	d5080000 	strle	r0, [r8, #-0]
    f510:	0000b801 	andeq	fp, r0, r1, lsl #16
    f514:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    f518:	271b0e00 	ldrcs	r0, [fp, -r0, lsl #28]
    f51c:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    f520:	0000b801 	andeq	fp, r0, r1, lsl #16
    f524:	000d0200 	andeq	r0, sp, r0, lsl #4
    f528:	040d0000 	streq	r0, [sp], #-0
    f52c:	b701da08 	strlt	sp, [r1, -r8, lsl #20]
    f530:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    f534:	000023b4 			; <UNDEFINED> instruction: 0x000023b4
    f538:	ce01db08 	vmlagt.f64	d13, d1, d8
    f53c:	04000000 	streq	r0, [r0], #-0
    f540:	0e001c04 	cdpeq	12, 0, cr1, cr0, cr4, {0}
    f544:	000024c4 	andeq	r2, r0, r4, asr #9
    f548:	ce01dd08 	cdpgt	13, 0, cr13, cr1, cr8, {0}
    f54c:	04000000 	streq	r0, [r0], #-0
    f550:	00000315 	andeq	r0, r0, r5, lsl r3
    f554:	e008010d 	and	r0, r8, sp, lsl #2
    f558:	0005e101 	andeq	lr, r5, r1, lsl #2
    f55c:	26100e00 	ldrcs	r0, [r0], -r0, lsl #28
    f560:	e1080000 	mrs	r0, (UNDEF: 8)
    f564:	0000a201 	andeq	sl, r0, r1, lsl #4
    f568:	02060100 	andeq	r0, r6, #0, 2
    f56c:	1fda0e00 	svcne	0x00da0e00
    f570:	e3080000 	movw	r0, #32768	; 0x8000
    f574:	0000a201 	andeq	sl, r0, r1, lsl #4
    f578:	00020100 	andeq	r0, r2, r0, lsl #2
    f57c:	020d0000 	andeq	r0, sp, #0
    f580:	3b01e808 	blcc	895a8 <__ccfg+0x69600>
    f584:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    f588:	000023bd 			; <UNDEFINED> instruction: 0x000023bd
    f58c:	b801e908 	stmdalt	r1, {r3, r8, fp, sp, lr, pc}
    f590:	02000000 	andeq	r0, r0, #0
    f594:	0e000a06 	vmlaeq.f32	s0, s0, s12
    f598:	00002259 	andeq	r2, r0, r9, asr r2
    f59c:	b801ea08 	stmdalt	r1, {r3, r9, fp, sp, lr, pc}
    f5a0:	02000000 	andeq	r0, r0, #0
    f5a4:	0e000901 	vmlaeq.f16	s0, s0, s2	; <UNPREDICTABLE>
    f5a8:	00002425 	andeq	r2, r0, r5, lsr #8
    f5ac:	b801ec08 	stmdalt	r1, {r3, sl, fp, sp, lr, pc}
    f5b0:	02000000 	andeq	r0, r0, #0
    f5b4:	0e000801 	cdpeq	8, 0, cr0, cr0, cr1, {0}
    f5b8:	00001fc2 	andeq	r1, r0, r2, asr #31
    f5bc:	b801ee08 	stmdalt	r1, {r3, r9, sl, fp, sp, lr, pc}
    f5c0:	02000000 	andeq	r0, r0, #0
    f5c4:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    f5c8:	00001f65 	andeq	r1, r0, r5, ror #30
    f5cc:	b801f308 	stmdalt	r1, {r3, r8, r9, ip, sp, lr, pc}
    f5d0:	02000000 	andeq	r0, r0, #0
    f5d4:	00000003 	andeq	r0, r0, r3
    f5d8:	fc08020d 	stc2	2, cr0, [r8], {13}
    f5dc:	00068501 	andeq	r8, r6, r1, lsl #10
    f5e0:	21ba0e00 			; <UNDEFINED> instruction: 0x21ba0e00
    f5e4:	fd080000 	stc2	0, cr0, [r8, #-0]
    f5e8:	0000b801 	andeq	fp, r0, r1, lsl #16
    f5ec:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    f5f0:	21590e00 	cmpcs	r9, r0, lsl #28
    f5f4:	03080000 	movweq	r0, #32768	; 0x8000
    f5f8:	0000b802 	andeq	fp, r0, r2, lsl #16
    f5fc:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    f600:	20f90e00 	rscscs	r0, r9, r0, lsl #28
    f604:	05080000 	streq	r0, [r8, #-0]
    f608:	0000b802 	andeq	fp, r0, r2, lsl #16
    f60c:	06060200 	streq	r0, [r6], -r0, lsl #4
    f610:	23f80e00 	mvnscs	r0, #0, 28
    f614:	0c080000 	stceq	0, cr0, [r8], {-0}
    f618:	0000b802 	andeq	fp, r0, r2, lsl #16
    f61c:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    f620:	010d0000 	mrseq	r0, (UNDEF: 13)
    f624:	cf022208 	svcgt	0x00022208
    f628:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    f62c:	00002769 	andeq	r2, r0, r9, ror #14
    f630:	a2022308 	andge	r2, r2, #8, 6	; 0x20000000
    f634:	01000000 	mrseq	r0, (UNDEF: 0)
    f638:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    f63c:	00002107 	andeq	r2, r0, r7, lsl #2
    f640:	a2022408 	andge	r2, r2, #8, 8	; 0x8000000
    f644:	01000000 	mrseq	r0, (UNDEF: 0)
    f648:	0e000301 	cdpeq	3, 0, cr0, cr0, cr1, {0}
    f64c:	000021c7 	andeq	r2, r0, r7, asr #3
    f650:	a2022608 	andge	r2, r2, #8, 12	; 0x800000
    f654:	01000000 	mrseq	r0, (UNDEF: 0)
    f658:	0e000102 	adfeqs	f0, f0, f2
    f65c:	00001f82 	andeq	r1, r0, r2, lsl #31
    f660:	a2022708 	andge	r2, r2, #8, 14	; 0x200000
    f664:	01000000 	mrseq	r0, (UNDEF: 0)
    f668:	00000001 	andeq	r0, r0, r1
    f66c:	2a08010d 	bcs	20faa8 <__ccfg+0x1efb00>
    f670:	0006f902 	andeq	pc, r6, r2, lsl #18
    f674:	25e40e00 	strbcs	r0, [r4, #3584]!	; 0xe00
    f678:	2b080000 	blcs	20f680 <__ccfg+0x1ef6d8>
    f67c:	0000a202 	andeq	sl, r0, r2, lsl #4
    f680:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f684:	27380e00 	ldrcs	r0, [r8, -r0, lsl #28]!
    f688:	2c080000 	stccs	0, cr0, [r8], {-0}
    f68c:	0000a202 	andeq	sl, r0, r2, lsl #4
    f690:	00040100 	andeq	r0, r4, r0, lsl #2
    f694:	020d0000 	andeq	r0, sp, #0
    f698:	23022e08 	movwcs	r2, #11784	; 0x2e08
    f69c:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    f6a0:	0000221f 	andeq	r2, r0, pc, lsl r2
    f6a4:	b8022f08 	stmdalt	r2, {r3, r8, r9, sl, fp, sp}
    f6a8:	02000000 	andeq	r0, r0, #0
    f6ac:	0e000d03 	cdpeq	13, 0, cr0, cr0, cr3, {0}
    f6b0:	0000271b 	andeq	r2, r0, fp, lsl r7
    f6b4:	b8023208 	stmdalt	r2, {r3, r9, ip, sp}
    f6b8:	02000000 	andeq	r0, r0, #0
    f6bc:	0000000d 	andeq	r0, r0, sp
    f6c0:	3408040d 	strcc	r0, [r8], #-1037	; 0xfffffbf3
    f6c4:	00074d02 	andeq	r4, r7, r2, lsl #26
    f6c8:	23b40e00 			; <UNDEFINED> instruction: 0x23b40e00
    f6cc:	35080000 	strcc	r0, [r8, #-0]
    f6d0:	0000ce02 	andeq	ip, r0, r2, lsl #28
    f6d4:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    f6d8:	24c40e00 	strbcs	r0, [r4], #3584	; 0xe00
    f6dc:	37080000 	strcc	r0, [r8, -r0]
    f6e0:	0000ce02 	andeq	ip, r0, r2, lsl #28
    f6e4:	03150400 	tsteq	r5, #0, 8
    f6e8:	010d0000 	mrseq	r0, (UNDEF: 13)
    f6ec:	77023a08 	strvc	r3, [r2, -r8, lsl #20]
    f6f0:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    f6f4:	00002610 	andeq	r2, r0, r0, lsl r6
    f6f8:	a2023b08 	andge	r3, r2, #8, 22	; 0x2000
    f6fc:	01000000 	mrseq	r0, (UNDEF: 0)
    f700:	0e000206 	cdpeq	2, 0, cr0, cr0, cr6, {0}
    f704:	00001fda 	ldrdeq	r1, [r0], -sl
    f708:	a2023d08 	andge	r3, r2, #8, 26	; 0x200
    f70c:	01000000 	mrseq	r0, (UNDEF: 0)
    f710:	00000002 	andeq	r0, r0, r2
    f714:	4208020d 	andmi	r0, r8, #-805306368	; 0xd0000000
    f718:	0007d102 	andeq	sp, r7, r2, lsl #2
    f71c:	23bd0e00 			; <UNDEFINED> instruction: 0x23bd0e00
    f720:	43080000 	movwmi	r0, #32768	; 0x8000
    f724:	0000b802 	andeq	fp, r0, r2, lsl #16
    f728:	0a060200 	beq	18ff30 <__ccfg+0x16ff88>
    f72c:	22590e00 	subscs	r0, r9, #0, 28
    f730:	44080000 	strmi	r0, [r8], #-0
    f734:	0000b802 	andeq	fp, r0, r2, lsl #16
    f738:	09010200 	stmdbeq	r1, {r9}
    f73c:	24250e00 	strtcs	r0, [r5], #-3584	; 0xfffff200
    f740:	46080000 	strmi	r0, [r8], -r0
    f744:	0000b802 	andeq	fp, r0, r2, lsl #16
    f748:	08010200 	stmdaeq	r1, {r9}
    f74c:	1fc20e00 	svcne	0x00c20e00
    f750:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
    f754:	0000b802 	andeq	fp, r0, r2, lsl #16
    f758:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    f75c:	1f650e00 	svcne	0x00650e00
    f760:	4d080000 	stcmi	0, cr0, [r8, #-0]
    f764:	0000b802 	andeq	fp, r0, r2, lsl #16
    f768:	00030200 	andeq	r0, r3, r0, lsl #4
    f76c:	020d0000 	andeq	r0, sp, #0
    f770:	1b025608 	blne	a4f98 <__ccfg+0x84ff0>
    f774:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    f778:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
    f77c:	b8025708 	stmdalt	r2, {r3, r8, r9, sl, ip, lr}
    f780:	02000000 	andeq	r0, r0, #0
    f784:	0e000d03 	cdpeq	13, 0, cr0, cr0, cr3, {0}
    f788:	00002159 	andeq	r2, r0, r9, asr r1
    f78c:	b8025d08 	stmdalt	r2, {r3, r8, sl, fp, ip, lr}
    f790:	02000000 	andeq	r0, r0, #0
    f794:	0e000c01 	cdpeq	12, 0, cr0, cr0, cr1, {0}
    f798:	000020f9 	strdeq	r2, [r0], -r9
    f79c:	b8025f08 	stmdalt	r2, {r3, r8, r9, sl, fp, ip, lr}
    f7a0:	02000000 	andeq	r0, r0, #0
    f7a4:	0e000606 	cfmadd32eq	mvax0, mvfx0, mvfx0, mvfx6
    f7a8:	000023f8 	strdeq	r2, [r0], -r8
    f7ac:	b8026608 	stmdalt	r2, {r3, r9, sl, sp, lr}
    f7b0:	02000000 	andeq	r0, r0, #0
    f7b4:	00000501 	andeq	r0, r0, r1, lsl #10
    f7b8:	48021009 	stmdami	r2, {r0, r3, ip}
    f7bc:	00000854 	andeq	r0, r0, r4, asr r8
    f7c0:	00217f08 	eoreq	r7, r1, r8, lsl #30
    f7c4:	ce490200 	cdpgt	2, 4, cr0, cr9, cr0, {0}
    f7c8:	00000000 	andeq	r0, r0, r0
    f7cc:	0020e008 	eoreq	lr, r0, r8
    f7d0:	ce4a0200 	cdpgt	2, 4, cr0, cr10, cr0, {0}
    f7d4:	04000000 	streq	r0, [r0], #-0
    f7d8:	00252b08 	eoreq	r2, r5, r8, lsl #22
    f7dc:	ce4b0200 	cdpgt	2, 4, cr0, cr11, cr0, {0}
    f7e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f7e4:	00267e08 	eoreq	r7, r6, r8, lsl #28
    f7e8:	ce4c0200 	cdpgt	2, 4, cr0, cr12, cr0, {0}
    f7ec:	0c000000 	stceq	0, cr0, [r0], {-0}
    f7f0:	1f8b0300 	svcne	0x008b0300
    f7f4:	4d020000 	stcmi	0, cr0, [r2, #-0]
    f7f8:	0000081b 	andeq	r0, r0, fp, lsl r8
    f7fc:	00348d0f 	eorseq	r8, r4, pc, lsl #26
    f800:	013e0200 	teqeq	lr, r0, lsl #4
    f804:	32ef1003 	rsccc	r1, pc, #3
    f808:	14020000 	strne	r0, [r2], #-0
    f80c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f810:	00000000 	andeq	r0, r0, r0
    f814:	00001400 	andeq	r1, r0, r0, lsl #8
    f818:	909c0100 	addsls	r0, ip, r0, lsl #2
    f81c:	11000008 	tstne	r0, r8
    f820:	000033a7 	andeq	r3, r0, r7, lsr #7
    f824:	00ce6a01 	sbceq	r6, lr, r1, lsl #20
    f828:	50010000 	andpl	r0, r1, r0
    f82c:	34751000 	ldrbtcc	r1, [r5], #-0
    f830:	4c020000 	stcmi	0, cr0, [r2], {-0}
    f834:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f838:	003b3400 	eorseq	r3, fp, r0, lsl #8
    f83c:	00002800 	andeq	r2, r0, r0, lsl #16
    f840:	d89c0100 	ldmle	ip, {r8}
    f844:	12000008 	andne	r0, r0, #8
    f848:	00704f70 	rsbseq	r4, r0, r0, ror pc
    f84c:	00ce7a01 	sbceq	r7, lr, r1, lsl #20
    f850:	3c080000 	stccc	0, cr0, [r8], {-0}
    f854:	5f130000 	svcpl	0x00130000
    f858:	3c000008 	stccc	0, cr0, [r0], {8}
    f85c:	0400003b 	streq	r0, [r0], #-59	; 0xffffffc5
    f860:	01000000 	mrseq	r0, (UNDEF: 0)
    f864:	085f137e 	ldmdaeq	pc, {r1, r2, r3, r4, r5, r6, r8, r9, ip}^	; <UNPREDICTABLE>
    f868:	3b480000 	blcc	120f870 <__ccfg+0x11ef8c8>
    f86c:	00060000 	andeq	r0, r6, r0
    f870:	83010000 	movwhi	r0, #4096	; 0x1000
    f874:	33771400 	cmncc	r7, #0, 8
    f878:	54020000 	strpl	r0, [r2], #-0
    f87c:	003b5c01 	eorseq	r5, fp, r1, lsl #24
    f880:	00004c00 	andeq	r4, r0, r0, lsl #24
    f884:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    f888:	000034a4 	andeq	r3, r0, r4, lsr #9
    f88c:	a8015c02 	stmdage	r1, {r1, sl, fp, ip, lr}
    f890:	5000003b 	andpl	r0, r0, fp, lsr r0
    f894:	01000001 	tsteq	r0, r1
    f898:	00092a9c 	muleq	r9, ip, sl
    f89c:	339e1600 	orrscc	r1, lr, #0, 12
    f8a0:	a4010000 	strge	r0, [r1], #-0
    f8a4:	0000026d 	andeq	r0, r0, sp, ror #4
    f8a8:	f4165001 			; <UNDEFINED> instruction: 0xf4165001
    f8ac:	01000033 	tsteq	r0, r3, lsr r0
    f8b0:	00092aa4 	andeq	r2, r9, r4, lsr #21
    f8b4:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    f8b8:	0000349c 	muleq	r0, ip, r4
    f8bc:	0094a601 	addseq	sl, r4, r1, lsl #12
    f8c0:	3c290000 	stccc	0, cr0, [r9], #-0
    f8c4:	06000000 	streq	r0, [r0], -r0
    f8c8:	00085404 	andeq	r5, r8, r4, lsl #8
    f8cc:	34661500 	strbtcc	r1, [r6], #-1280	; 0xfffffb00
    f8d0:	6c020000 	stcvs	0, cr0, [r2], {-0}
    f8d4:	003cf801 	eorseq	pc, ip, r1, lsl #16
    f8d8:	00011800 	andeq	r1, r1, r0, lsl #16
    f8dc:	ac9c0100 	ldfges	f0, [ip], {0}
    f8e0:	18000009 	stmdane	r0, {r0, r3}
    f8e4:	0000339e 	muleq	r0, lr, r3
    f8e8:	026df301 	rsbeq	pc, sp, #67108864	; 0x4000000
    f8ec:	3c470000 	marcc	acc0, r0, r7
    f8f0:	9c170000 	ldcls	0, cr0, [r7], {-0}
    f8f4:	01000034 	tsteq	r0, r4, lsr r0
    f8f8:	0000c3f5 	strdeq	ip, [r0], -r5
    f8fc:	003c6800 	eorseq	r6, ip, r0, lsl #16
    f900:	345a1700 	ldrbcc	r1, [sl], #-1792	; 0xfffff900
    f904:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    f908:	000000ce 	andeq	r0, r0, lr, asr #1
    f90c:	00003cb7 			; <UNDEFINED> instruction: 0x00003cb7
    f910:	00330a17 	eorseq	r0, r3, r7, lsl sl
    f914:	24f70100 	ldrbtcs	r0, [r7], #256	; 0x100
    f918:	01000003 	tsteq	r0, r3
    f91c:	1900003d 	stmdbne	r0, {r0, r2, r3, r4, r5}
    f920:	0000331b 	andeq	r3, r0, fp, lsl r3
    f924:	00c3f801 	sbceq	pc, r3, r1, lsl #16
    f928:	fc170000 	ldc2	0, cr0, [r7], {-0}
    f92c:	01000033 	tsteq	r0, r3, lsr r0
    f930:	0000cef9 	strdeq	ip, [r0], -r9
    f934:	003d4400 	eorseq	r4, sp, r0, lsl #8
    f938:	338f1700 	orrcc	r1, pc, #0, 14
    f93c:	fa010000 	blx	4f944 <__ccfg+0x2f99c>
    f940:	000000ce 	andeq	r0, r0, lr, asr #1
    f944:	00003d9c 	muleq	r0, ip, sp
    f948:	33641500 	cmncc	r4, #0, 10
    f94c:	64020000 	strvs	r0, [r2], #-0
    f950:	003e1001 	eorseq	r1, lr, r1
    f954:	00002000 	andeq	r2, r0, r0
    f958:	d39c0100 	orrsle	r0, ip, #0, 2
    f95c:	1a000009 	bne	f988 <__exidx_end+0x9cc8>
    f960:	000033f4 	strdeq	r3, [r0], -r4
    f964:	2a017701 	bcs	6d570 <__ccfg+0x4d5c8>
    f968:	d2000009 	andle	r0, r0, #9
    f96c:	0000003d 	andeq	r0, r0, sp, lsr r0
    f970:	0033c215 	eorseq	ip, r3, r5, lsl r2
    f974:	01740200 	cmneq	r4, r0, lsl #4
    f978:	00000000 	andeq	r0, r0, r0
    f97c:	00000060 	andeq	r0, r0, r0, rrx
    f980:	0a379c01 	beq	df698c <__ccfg+0xdd69e4>
    f984:	5c1b0000 	ldcpl	0, cr0, [fp], {-0}
    f988:	01000026 	tsteq	r0, r6, lsr #32
    f98c:	00ff0184 	rscseq	r0, pc, r4, lsl #3
    f990:	03380000 	teqeq	r8, #0
    f994:	1a1b2100 	bne	6d7d9c <__ccfg+0x6b7df4>
    f998:	01000021 	tsteq	r0, r1, lsr #32
    f99c:	03240185 			; <UNDEFINED> instruction: 0x03240185
    f9a0:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
    f9a4:	691c2100 	ldmdbvs	ip, {r8, sp}
    f9a8:	01890100 	orreq	r0, r9, r0, lsl #2
    f9ac:	00000094 	muleq	r0, r4, r0
    f9b0:	00003e00 	andeq	r3, r0, r0, lsl #28
    f9b4:	0000001d 	andeq	r0, r0, sp, lsl r0
    f9b8:	000a9c00 	andeq	r9, sl, r0, lsl #24
    f9bc:	52011e00 	andpl	r1, r1, #0, 28
    f9c0:	1e840802 	cdpne	8, 8, cr0, cr4, cr2, {0}
    f9c4:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    f9c8:	50011eff 	strdpl	r1, [r1], -pc	; <UNPREDICTABLE>
    f9cc:	03380c05 	teqeq	r8, #1280	; 0x500
    f9d0:	00002100 	andeq	r2, r0, r0, lsl #2
    f9d4:	00332a15 	eorseq	r2, r3, r5, lsl sl
    f9d8:	017c0200 	cmneq	ip, r0, lsl #4
    f9dc:	00003e30 	andeq	r3, r0, r0, lsr lr
    f9e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    f9e4:	0a5c9c01 	beq	17369f0 <__ccfg+0x1716a48>
    f9e8:	521f0000 	andspl	r0, pc, #0
    f9ec:	01000034 	tsteq	r0, r4, lsr r0
    f9f0:	0a5c0196 	beq	1710050 <__ccfg+0x16f00a8>
    f9f4:	50010000 	andpl	r0, r1, r0
    f9f8:	02010200 	andeq	r0, r1, #0, 4
    f9fc:	00000ca7 	andeq	r0, r0, r7, lsr #25
    fa00:	0000b820 	andeq	fp, r0, r0, lsr #16
    fa04:	000a7300 	andeq	r7, sl, r0, lsl #6
    fa08:	00e42100 	rsceq	r2, r4, r0, lsl #2
    fa0c:	000b0000 	andeq	r0, fp, r0
    fa10:	0033af22 	eorseq	sl, r3, r2, lsr #30
    fa14:	97520100 	ldrbls	r0, [r2, -r0, lsl #2]
    fa18:	1800000a 	stmdane	r0, {r1, r3}
    fa1c:	3a3d3bc3 	bcc	f5e930 <__ccfg+0xf3e988>
    fa20:	3a713a5d 	bcc	1c5e39c <__ccfg+0x1c3e3f4>
    fa24:	3a8f0aa1 	bcc	fe3d24b0 <_estack+0xde3cd4b0>
    fa28:	09b33b0f 	ldmibeq	r3!, {r0, r1, r2, r3, r8, r9, fp, ip, sp}
    fa2c:	0a855e49 	beq	fe167358 <_estack+0xde162358>
    fa30:	3b853b2f 	blcc	fe15e6f4 <_estack+0xde1596f4>
    fa34:	000a6323 	andeq	r6, sl, r3, lsr #6
    fa38:	16a22400 	strtne	r2, [r2], r0, lsl #8
    fa3c:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    fa40:	000000eb 	andeq	r0, r0, fp, ror #1
    fa44:	0000eb25 	andeq	lr, r0, r5, lsr #22
    fa48:	00942500 	addseq	r2, r4, r0, lsl #10
    fa4c:	d9250000 	stmdble	r5!, {}	; <UNPREDICTABLE>
    fa50:	00000000 	andeq	r0, r0, r0
    fa54:	00020700 	andeq	r0, r2, r0, lsl #14
    fa58:	0d000400 	cfstrseq	mvf0, [r0, #-0]
    fa5c:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    fa60:	002a3f01 	eoreq	r3, sl, r1, lsl #30
    fa64:	35740100 	ldrbcc	r0, [r4, #-256]!	; 0xffffff00
    fa68:	2b060000 	blcs	18fa70 <__ccfg+0x16fac8>
    fa6c:	11f00000 	mvnsne	r0, r0
    fa70:	00000000 	andeq	r0, r0, r0
    fa74:	808d0000 	addhi	r0, sp, r0
    fa78:	01020000 	mrseq	r0, (UNDEF: 2)
    fa7c:	000c5d06 	andeq	r5, ip, r6, lsl #26
    fa80:	08010200 	stmdaeq	r1, {r9}
    fa84:	00000c5b 	andeq	r0, r0, fp, asr ip
    fa88:	6b050202 	blvs	150298 <__ccfg+0x1302f0>
    fa8c:	0200000a 	andeq	r0, r0, #10
    fa90:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    fa94:	04020000 	streq	r0, [r2], #-0
    fa98:	0007fd05 	andeq	pc, r7, r5, lsl #26
    fa9c:	29b20300 	ldmibcs	r2!, {r8, r9}
    faa0:	41030000 	mrsmi	r0, (UNDEF: 3)
    faa4:	00000053 	andeq	r0, r0, r3, asr r0
    faa8:	26070402 	strcs	r0, [r7], -r2, lsl #8
    faac:	02000004 	andeq	r0, r0, #4
    fab0:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    fab4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    fab8:	00042107 	andeq	r2, r4, r7, lsl #2
    fabc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    fac0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    fac4:	2b070402 	blcs	1d0ad4 <__ccfg+0x1b0b2c>
    fac8:	03000004 	movweq	r0, #4
    facc:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    fad0:	00482004 	subeq	r2, r8, r4
    fad4:	d1050000 	mrsle	r0, (UNDEF: 5)
    fad8:	02000035 	andeq	r0, r0, #53	; 0x35
    fadc:	06030330 			; <UNDEFINED> instruction: 0x06030330
    fae0:	0000363c 	andeq	r3, r0, ip, lsr r6
    fae4:	0501fd01 	streq	pc, [r1, #-3329]	; 0xfffff2ff
    fae8:	000035e4 	andeq	r3, r0, r4, ror #11
    faec:	01018201 	tsteq	r1, r1, lsl #4
    faf0:	0034bf07 	eorseq	fp, r4, r7, lsl #30
    faf4:	010d0100 	mrseq	r0, (UNDEF: 29)
    faf8:	00003e4c 	andeq	r3, r0, ip, asr #28
    fafc:	000000d4 	ldrdeq	r0, [r0], -r4
    fb00:	016d9c01 	cmneq	sp, r1, lsl #24
    fb04:	bf080000 	svclt	0x00080000
    fb08:	01000035 	tsteq	r0, r5, lsr r0
    fb0c:	0076010d 	rsbseq	r0, r6, sp, lsl #2
    fb10:	3ea40000 	cdpcc	0, 10, cr0, cr4, cr0, {0}
    fb14:	2b090000 	blcs	24fb1c <__ccfg+0x22fb74>
    fb18:	01000036 	tsteq	r0, r6, lsr r0
    fb1c:	0076010f 	rsbseq	r0, r6, pc, lsl #2
    fb20:	3ed00000 	cdpcc	0, 13, cr0, cr0, cr0, {0}
    fb24:	b8090000 	stmdalt	r9, {}	; <UNPREDICTABLE>
    fb28:	01000034 	tsteq	r0, r4, lsr r0
    fb2c:	00760110 	rsbseq	r0, r6, r0, lsl r1
    fb30:	3ee30000 	cdpcc	0, 14, cr0, cr3, cr0, {0}
    fb34:	810a0000 	mrshi	r0, (UNDEF: 10)
    fb38:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    fb3c:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
    fb40:	01000000 	mrseq	r0, (UNDEF: 0)
    fb44:	a40b0136 	strge	r0, [fp], #-310	; 0xfffffeca
    fb48:	2a00003e 	bcs	fc48 <__exidx_end+0x9f88>
    fb4c:	1f000000 	svcne	0x00000000
    fb50:	09000001 	stmdbeq	r0, {r0}
    fb54:	000036b1 			; <UNDEFINED> instruction: 0x000036b1
    fb58:	76015301 	strvc	r5, [r1], -r1, lsl #6
    fb5c:	fc000000 	stc2	0, cr0, [r0], {-0}
    fb60:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
    fb64:	0000360d 	andeq	r3, r0, sp, lsl #12
    fb68:	76015401 	strvc	r5, [r1], -r1, lsl #8
    fb6c:	0f000000 	svceq	0x00000000
    fb70:	0000003f 	andeq	r0, r0, pc, lsr r0
    fb74:	003e8e0c 	eorseq	r8, lr, ip, lsl #28
    fb78:	0001c300 	andeq	ip, r1, r0, lsl #6
    fb7c:	00013300 	andeq	r3, r1, r0, lsl #6
    fb80:	50010d00 	andpl	r0, r1, r0, lsl #26
    fb84:	00007402 	andeq	r7, r0, r2, lsl #8
    fb88:	003e960c 	eorseq	r9, lr, ip, lsl #12
    fb8c:	0001d400 	andeq	sp, r1, r0, lsl #8
    fb90:	00014d00 	andeq	r4, r1, r0, lsl #26
    fb94:	51010d00 	tstpl	r1, r0, lsl #26
    fb98:	0d007402 	cfstrseq	mvf7, [r0, #-8]
    fb9c:	75025001 	strvc	r5, [r2, #-1]
    fba0:	d40c0000 	strle	r0, [ip], #-0
    fba4:	ea00003e 	b	fca4 <__exidx_end+0x9fe4>
    fba8:	61000001 	tstvs	r0, r1
    fbac:	0d000001 	stceq	0, cr0, [r0, #-4]
    fbb0:	74025001 	strvc	r5, [r2], #-1
    fbb4:	de0e0000 	cdple	0, 0, cr0, cr14, cr0, {0}
    fbb8:	0d00003e 	stceq	0, cr0, [r0, #-248]	; 0xffffff08
    fbbc:	32015001 	andcc	r5, r1, #1
    fbc0:	f70f0000 			; <UNDEFINED> instruction: 0xf70f0000
    fbc4:	07000035 	smladxeq	r0, r5, r0, r0
    fbc8:	003f205f 	eorseq	r2, pc, pc, asr r0	; <UNPREDICTABLE>
    fbcc:	0000a400 	andeq	sl, r0, r0, lsl #8
    fbd0:	c39c0100 	orrsgt	r0, ip, #0, 2
    fbd4:	10000001 	andne	r0, r0, r1
    fbd8:	000035bf 			; <UNDEFINED> instruction: 0x000035bf
    fbdc:	00767201 	rsbseq	r7, r6, r1, lsl #4
    fbe0:	3f3a0000 	svccc	0x003a0000
    fbe4:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    fbe8:	01000036 	tsteq	r0, r6, lsr r0
    fbec:	00007673 	andeq	r7, r0, r3, ror r6
    fbf0:	003f4d00 	eorseq	r4, pc, r0, lsl #26
    fbf4:	3f301100 	svccc	0x00301100
    fbf8:	01fb0000 	mvnseq	r0, r0
    fbfc:	44110000 	ldrmi	r0, [r1], #-0
    fc00:	0300003f 	movweq	r0, #63	; 0x3f
    fc04:	12000002 	andne	r0, r0, #2
    fc08:	00003f54 	andeq	r3, r0, r4, asr pc
    fc0c:	0000009b 	muleq	r0, fp, r0
    fc10:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fc14:	00000074 	andeq	r0, r0, r4, ror r0
    fc18:	0034e413 	eorseq	lr, r4, r3, lsl r4
    fc1c:	d46c0500 	strbtle	r0, [ip], #-1280	; 0xfffffb00
    fc20:	14000001 	strne	r0, [r0], #-1
    fc24:	00000076 	andeq	r0, r0, r6, ror r0
    fc28:	35141300 	ldrcc	r1, [r4, #-768]	; 0xfffffd00
    fc2c:	73050000 	movwvc	r0, #20480	; 0x5000
    fc30:	000001ea 	andeq	r0, r0, sl, ror #3
    fc34:	00007614 	andeq	r7, r0, r4, lsl r6
    fc38:	00761400 	rsbseq	r1, r6, r0, lsl #8
    fc3c:	13000000 	movwne	r0, #0
    fc40:	00003544 	andeq	r3, r0, r4, asr #10
    fc44:	01fb7a05 	mvnseq	r7, r5, lsl #20
    fc48:	76140000 	ldrvc	r0, [r4], -r0
    fc4c:	00000000 	andeq	r0, r0, r0
    fc50:	00367415 	eorseq	r7, r6, r5, lsl r4
    fc54:	02430600 	subeq	r0, r3, #0, 12
    fc58:	00359116 	eorseq	r9, r5, r6, lsl r1
    fc5c:	00fd0500 	rscseq	r0, sp, r0, lsl #10
    fc60:	00000b17 	andeq	r0, r0, r7, lsl fp
    fc64:	394f0004 	stmdbcc	pc, {r2}^	; <UNPREDICTABLE>
    fc68:	01040000 	mrseq	r0, (UNDEF: 4)
    fc6c:	00002a3f 	andeq	r2, r0, pc, lsr sl
    fc70:	0038f401 	eorseq	pc, r8, r1, lsl #8
    fc74:	002b0600 	eoreq	r0, fp, r0, lsl #12
    fc78:	00123800 	andseq	r3, r2, r0, lsl #16
    fc7c:	00000000 	andeq	r0, r0, r0
    fc80:	00827a00 	addeq	r7, r2, r0, lsl #20
    fc84:	06010200 	streq	r0, [r1], -r0, lsl #4
    fc88:	00000c5d 	andeq	r0, r0, sp, asr ip
    fc8c:	5b080102 	blpl	21009c <__ccfg+0x1f00f4>
    fc90:	0200000c 	andeq	r0, r0, #12
    fc94:	0a6b0502 	beq	1ad10a4 <__ccfg+0x1ab10fc>
    fc98:	02020000 	andeq	r0, r2, #0
    fc9c:	000d6607 	andeq	r6, sp, r7, lsl #12
    fca0:	2b9f0300 	blcs	fe7d08a8 <_estack+0xde7cb8a8>
    fca4:	3f040000 	svccc	0x00040000
    fca8:	0000004c 	andeq	r0, r0, ip, asr #32
    fcac:	fd050402 	stc2	4, cr0, [r5, #-8]
    fcb0:	03000007 	movweq	r0, #7
    fcb4:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    fcb8:	005e4104 	subseq	r4, lr, r4, lsl #2
    fcbc:	04020000 	streq	r0, [r2], #-0
    fcc0:	00042607 	andeq	r2, r4, r7, lsl #12
    fcc4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    fcc8:	000007f8 	strdeq	r0, [r0], -r8
    fccc:	21070802 	tstcs	r7, r2, lsl #16
    fcd0:	04000004 	streq	r0, [r0], #-4
    fcd4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    fcd8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    fcdc:	00042b07 	andeq	r2, r4, r7, lsl #22
    fce0:	2ba10300 	blcs	fe8508e8 <_estack+0xde84b8e8>
    fce4:	1f050000 	svcne	0x00050000
    fce8:	00000041 	andeq	r0, r0, r1, asr #32
    fcec:	0029b403 	eoreq	fp, r9, r3, lsl #8
    fcf0:	53200500 	noppl	{0}	; <UNPREDICTABLE>
    fcf4:	05000000 	streq	r0, [r0, #-0]
    fcf8:	00003987 	andeq	r3, r0, r7, lsl #19
    fcfc:	0081e902 	addeq	lr, r1, r2, lsl #18
    fd00:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    fd04:	06000000 	streq	r0, [r0], -r0
    fd08:	000036d7 	ldrdeq	r3, [r0], -r7
    fd0c:	008ce902 	addeq	lr, ip, r2, lsl #18
    fd10:	e0070000 	and	r0, r7, r0
    fd14:	02000039 	andeq	r0, r0, #57	; 0x39
    fd18:	000081ef 	andeq	r8, r0, pc, ror #3
    fd1c:	0c080000 	stceq	0, cr0, [r8], {-0}
    fd20:	02000037 	andeq	r0, r0, #55	; 0x37
    fd24:	00008cab 	andeq	r8, r0, fp, lsr #25
    fd28:	00e70100 	rsceq	r0, r7, r0, lsl #2
    fd2c:	bf090000 	svclt	0x00090000
    fd30:	01000035 	tsteq	r0, r5, lsr r0
    fd34:	008c0329 	addeq	r0, ip, r9, lsr #6
    fd38:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    fd3c:	0100003a 	tsteq	r0, sl, lsr r0
    fd40:	008c032b 	addeq	r0, ip, fp, lsr #6
    fd44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fd48:	000039bf 			; <UNDEFINED> instruction: 0x000039bf
    fd4c:	008c8102 	addeq	r8, ip, r2, lsl #2
    fd50:	10010000 	andne	r0, r1, r0
    fd54:	09000001 	stmdbeq	r0, {r0}
    fd58:	000035bf 			; <UNDEFINED> instruction: 0x000035bf
    fd5c:	8c033c01 	stchi	12, cr3, [r3], {1}
    fd60:	0a000000 	beq	fd68 <__exidx_end+0xa0a8>
    fd64:	00003a30 	andeq	r3, r0, r0, lsr sl
    fd68:	8c033e01 	stchi	14, cr3, [r3], {1}
    fd6c:	00000000 	andeq	r0, r0, r0
    fd70:	00386d08 	eorseq	r6, r8, r8, lsl #26
    fd74:	8c880200 	sfmhi	f0, 4, [r8], {0}
    fd78:	01000000 	mrseq	r0, (UNDEF: 0)
    fd7c:	00000139 	andeq	r0, r0, r9, lsr r1
    fd80:	0035bf09 	eorseq	fp, r5, r9, lsl #30
    fd84:	034f0100 	movteq	r0, #61696	; 0xf100
    fd88:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd8c:	0039a40a 	eorseq	sl, r9, sl, lsl #8
    fd90:	03510100 	cmpeq	r1, #0, 2
    fd94:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd98:	37d10800 	ldrbcc	r0, [r1, r0, lsl #16]
    fd9c:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    fda0:	0000008c 	andeq	r0, r0, ip, lsl #1
    fda4:	00016e01 	andeq	r6, r1, r1, lsl #28
    fda8:	35bf0900 	ldrcc	r0, [pc, #2304]!	; 106b0 <__exidx_end+0xa9f0>
    fdac:	62010000 	andvs	r0, r1, #0
    fdb0:	00008c03 	andeq	r8, r0, r3, lsl #24
    fdb4:	37610a00 	strbcc	r0, [r1, -r0, lsl #20]!
    fdb8:	64010000 	strvs	r0, [r1], #-0
    fdbc:	00008c03 	andeq	r8, r0, r3, lsl #24
    fdc0:	38a20a00 	stmiacc	r2!, {r9, fp}
    fdc4:	65010000 	strvs	r0, [r1, #-0]
    fdc8:	00008c03 	andeq	r8, r0, r3, lsl #24
    fdcc:	d4080000 	strle	r0, [r8], #-0
    fdd0:	02000038 	andeq	r0, r0, #56	; 0x38
    fdd4:	00008cb2 			; <UNDEFINED> instruction: 0x00008cb2
    fdd8:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    fddc:	bf090000 	svclt	0x00090000
    fde0:	01000035 	tsteq	r0, r5, lsr r0
    fde4:	008c0394 	umulleq	r0, ip, r4, r3
    fde8:	f00a0000 			; <UNDEFINED> instruction: 0xf00a0000
    fdec:	01000037 	tsteq	r0, r7, lsr r0
    fdf0:	008c0396 	umulleq	r0, ip, r6, r3
    fdf4:	a20a0000 	andge	r0, sl, #0
    fdf8:	01000038 	tsteq	r0, r8, lsr r0
    fdfc:	008c0397 	umulleq	r0, ip, r7, r3
    fe00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fe04:	0000379f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    fe08:	008cb902 	addeq	fp, ip, r2, lsl #18
    fe0c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    fe10:	09000001 	stmdbeq	r0, {r0}
    fe14:	000035bf 			; <UNDEFINED> instruction: 0x000035bf
    fe18:	8c03b401 	cfstrshi	mvf11, [r3], {1}
    fe1c:	0a000000 	beq	fe24 <__exidx_end+0xa164>
    fe20:	000038ac 	andeq	r3, r0, ip, lsr #17
    fe24:	8c03b601 	stchi	6, cr11, [r3], {1}
    fe28:	00000000 	andeq	r0, r0, r0
    fe2c:	00394a08 	eorseq	r4, r9, r8, lsl #20
    fe30:	8cdf0200 	lfmhi	f0, 2, [pc], {0}
    fe34:	01000000 	mrseq	r0, (UNDEF: 0)
    fe38:	000001f5 	strdeq	r0, [r0], -r5
    fe3c:	0035bf09 	eorseq	fp, r5, r9, lsl #30
    fe40:	03c80100 	biceq	r0, r8, #0, 2
    fe44:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe48:	003a890a 	eorseq	r8, sl, sl, lsl #18
    fe4c:	03ca0100 	biceq	r0, sl, #0, 2
    fe50:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe54:	3a0a0800 	bcc	291e5c <__ccfg+0x271eb4>
    fe58:	d7020000 	strle	r0, [r2, -r0]
    fe5c:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe60:	00021201 	andeq	r1, r2, r1, lsl #4
    fe64:	3b3c0a00 	blcc	f1266c <__ccfg+0xef26c4>
    fe68:	83010000 	movwhi	r0, #4096	; 0x1000
    fe6c:	00008c02 	andeq	r8, r0, r2, lsl #24
    fe70:	d20b0000 	andle	r0, fp, #0
    fe74:	03000012 	movweq	r0, #18
    fe78:	190c03c4 	stmdbne	ip, {r2, r6, r7, r8, r9}
    fe7c:	0200003b 	andeq	r0, r0, #59	; 0x3b
    fe80:	3fc4010f 	svccc	0x00c4010f
    fe84:	007c0000 	rsbseq	r0, ip, r0
    fe88:	9c010000 	stcls	0, cr0, [r1], {-0}
    fe8c:	000002c4 	andeq	r0, r0, r4, asr #5
    fe90:	00362b0d 	eorseq	r2, r6, sp, lsl #22
    fe94:	8c7f0100 	ldfhie	f0, [pc], #-0	; fe9c <__exidx_end+0xa1dc>
    fe98:	60000000 	andvs	r0, r0, r0
    fe9c:	0700003f 	smladxeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    fea0:	00003b31 	andeq	r3, r0, r1, lsr fp
    fea4:	008c8101 	addeq	r8, ip, r1, lsl #2
    fea8:	c90e0000 	stmdbgt	lr, {}	; <UNPREDICTABLE>
    feac:	01000038 	tsteq	r0, r8, lsr r0
    feb0:	00008182 	andeq	r8, r0, r2, lsl #3
    feb4:	0f520100 	svceq	0x00520100
    feb8:	0000373c 	andeq	r3, r0, ip, lsr r7
    febc:	00818301 	addeq	r8, r1, r1, lsl #6
    fec0:	3f810000 	svccc	0x00810000
    fec4:	0a0f0000 	beq	3cfecc <__ccfg+0x3aff24>
    fec8:	01000038 	tsteq	r0, r8, lsr r0
    fecc:	00008184 	andeq	r8, r0, r4, lsl #3
    fed0:	003f9400 	eorseq	r9, pc, r0, lsl #8
    fed4:	00971000 	addseq	r1, r7, r0
    fed8:	3fd20000 	svccc	0x00d20000
    fedc:	12080000 	andne	r0, r8, #0
    fee0:	97010000 	strls	r0, [r1, -r0]
    fee4:	0000029b 	muleq	r0, fp, r2
    fee8:	0000a711 	andeq	sl, r0, r1, lsl r7
    feec:	12081200 	andne	r1, r8, #0, 4
    fef0:	b2130000 	andslt	r0, r3, #0
    fef4:	01000000 	mrseq	r0, (UNDEF: 0)
    fef8:	14000052 	strne	r0, [r0], #-82	; 0xffffffae
    fefc:	00000097 	muleq	r0, r7, r0
    ff00:	00003fdc 	ldrdeq	r3, [r0], -ip
    ff04:	00000006 	andeq	r0, r0, r6
    ff08:	a7119801 	ldrge	r9, [r1, -r1, lsl #16]
    ff0c:	15000000 	strne	r0, [r0, #-0]
    ff10:	00003fdc 	ldrdeq	r3, [r0], -ip
    ff14:	00000006 	andeq	r0, r0, r6
    ff18:	0000b216 	andeq	fp, r0, r6, lsl r2
    ff1c:	003fc200 	eorseq	ip, pc, r0, lsl #4
    ff20:	00000000 	andeq	r0, r0, r0
    ff24:	0034e417 	eorseq	lr, r4, r7, lsl r4
    ff28:	406c0200 	rsbmi	r0, ip, r0, lsl #4
    ff2c:	ac000040 	stcge	0, cr0, [r0], {64}	; 0x40
    ff30:	01000000 	mrseq	r0, (UNDEF: 0)
    ff34:	0003439c 	muleq	r3, ip, r3
    ff38:	362b0d00 	strtcc	r0, [fp], -r0, lsl #26
    ff3c:	bf010000 	svclt	0x00010000
    ff40:	0000008c 	andeq	r0, r0, ip, lsl #1
    ff44:	00003fd5 	ldrdeq	r3, [r0], -r5
    ff48:	003a4b0f 	eorseq	r4, sl, pc, lsl #22
    ff4c:	81c10100 	bichi	r0, r1, r0, lsl #2
    ff50:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    ff54:	0f000040 	svceq	0x00000040
    ff58:	00003b61 	andeq	r3, r0, r1, ror #22
    ff5c:	0081c201 	addeq	ip, r1, r1, lsl #4
    ff60:	40320000 	eorsmi	r0, r2, r0
    ff64:	97180000 	ldrls	r0, [r8, -r0]
    ff68:	76000000 	strvc	r0, [r0], -r0
    ff6c:	06000040 	streq	r0, [r0], -r0, asr #32
    ff70:	01000000 	mrseq	r0, (UNDEF: 0)
    ff74:	000332ee 	andeq	r3, r3, lr, ror #5
    ff78:	00a71100 	adceq	r1, r7, r0, lsl #2
    ff7c:	76150000 	ldrvc	r0, [r5], -r0
    ff80:	06000040 	streq	r0, [r0], -r0, asr #32
    ff84:	16000000 	strne	r0, [r0], -r0
    ff88:	000000b2 	strheq	r0, [r0], -r2
    ff8c:	00004059 	andeq	r4, r0, r9, asr r0
    ff90:	64190000 	ldrvs	r0, [r9], #-0
    ff94:	1a000040 	bne	1009c <__exidx_end+0xa3dc>
    ff98:	1a000002 	bne	ffa8 <__exidx_end+0xa2e8>
    ff9c:	74025001 	strvc	r5, [r2], #-1
    ffa0:	1b000000 	blne	ffa8 <__exidx_end+0xa2e8>
    ffa4:	000036e7 	andeq	r3, r0, r7, ror #13
    ffa8:	008ca402 	addeq	sl, ip, r2, lsl #8
    ffac:	40ec0000 	rscmi	r0, ip, r0
    ffb0:	005c0000 	subseq	r0, ip, r0
    ffb4:	9c010000 	stcls	0, cr0, [r1], {-0}
    ffb8:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    ffbc:	00362b1c 	eorseq	r2, r6, ip, lsl fp
    ffc0:	021f0100 	andseq	r0, pc, #0, 2
    ffc4:	0000008c 	andeq	r0, r0, ip, lsl #1
    ffc8:	0000406c 	andeq	r4, r0, ip, rrx
    ffcc:	0039fb1d 	eorseq	pc, r9, sp, lsl fp	; <UNPREDICTABLE>
    ffd0:	02210100 	eoreq	r0, r1, #0, 2
    ffd4:	0000008c 	andeq	r0, r0, ip, lsl #1
    ffd8:	0000408d 	andeq	r4, r0, sp, lsl #1
    ffdc:	003afd1d 	eorseq	pc, sl, sp, lsl sp	; <UNPREDICTABLE>
    ffe0:	02220100 	eoreq	r0, r2, #0, 2
    ffe4:	0000008c 	andeq	r0, r0, ip, lsl #1
    ffe8:	000040a0 	andeq	r4, r0, r0, lsr #1
    ffec:	003b0b1d 	eorseq	r0, fp, sp, lsl fp
    fff0:	02230100 	eoreq	r0, r3, #0, 2
    fff4:	0000008c 	andeq	r0, r0, ip, lsl #1
    fff8:	000040ee 	andeq	r4, r0, lr, ror #1
    fffc:	003b4a1d 	eorseq	r4, fp, sp, lsl sl
   10000:	02240100 	eoreq	r0, r4, #0, 2
   10004:	00000081 	andeq	r0, r0, r1, lsl #1
   10008:	00004156 	andeq	r4, r0, r6, asr r1
   1000c:	003b3c1d 	eorseq	r3, fp, sp, lsl ip
   10010:	02250100 	eoreq	r0, r5, #0, 2
   10014:	0000008c 	andeq	r0, r0, ip, lsl #1
   10018:	00004175 	andeq	r4, r0, r5, ror r1
   1001c:	391f1b00 	ldmdbcc	pc, {r8, r9, fp, ip}	; <UNPREDICTABLE>
   10020:	c1020000 	mrsgt	r0, (UNDEF: 2)
   10024:	0000008c 	andeq	r0, r0, ip, lsl #1
   10028:	00004148 	andeq	r4, r0, r8, asr #2
   1002c:	00000018 	andeq	r0, r0, r8, lsl r0
   10030:	03e79c01 	mvneq	r9, #256	; 0x100
   10034:	3c1d0000 	ldccc	0, cr0, [sp], {-0}
   10038:	0100003b 	tsteq	r0, fp, lsr r0
   1003c:	008c0267 	addeq	r0, ip, r7, ror #4
   10040:	419a0000 	orrsmi	r0, sl, r0
   10044:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10048:	000001f5 	strdeq	r0, [r0], -r5
   1004c:	00000000 	andeq	r0, r0, r0
   10050:	00000010 	andeq	r0, r0, r0, lsl r0
   10054:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
   10058:	05160000 	ldreq	r0, [r6, #-0]
   1005c:	c1000002 	tstgt	r0, r2
   10060:	00000041 	andeq	r0, r0, r1, asr #32
   10064:	00384d1b 	eorseq	r4, r8, fp, lsl sp
   10068:	8c9d0200 	lfmhi	f0, 4, [sp], {0}
   1006c:	60000000 	andvs	r0, r0, r0
   10070:	10000041 	andne	r0, r0, r1, asr #32
   10074:	01000000 	mrseq	r0, (UNDEF: 0)
   10078:	00043e9c 	muleq	r4, ip, lr
   1007c:	3b3c1d00 	blcc	f17484 <__ccfg+0xef74dc>
   10080:	97010000 	strls	r0, [r1, -r0]
   10084:	00008c02 	andeq	r8, r0, r2, lsl #24
   10088:	0041da00 	subeq	sp, r1, r0, lsl #20
   1008c:	39fb1d00 	ldmibcc	fp!, {r8, sl, fp, ip}^
   10090:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
   10094:	00008c02 	andeq	r8, r0, r2, lsl #24
   10098:	0041fb00 	subeq	pc, r1, r0, lsl #22
   1009c:	2d1b0000 	ldccs	0, cr0, [fp, #-0]
   100a0:	02000038 	andeq	r0, r0, #56	; 0x38
   100a4:	00008c96 	muleq	r0, r6, ip
   100a8:	00417000 	subeq	r7, r1, r0
   100ac:	00001400 	andeq	r1, r0, r0, lsl #8
   100b0:	789c0100 	ldmvc	ip, {r8}
   100b4:	1d000004 	stcne	0, cr0, [r0, #-16]
   100b8:	00003b3c 	andeq	r3, r0, ip, lsr fp
   100bc:	8c02ba01 			; <UNDEFINED> instruction: 0x8c02ba01
   100c0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   100c4:	1d000042 	stcne	0, cr0, [r0, #-264]	; 0xfffffef8
   100c8:	000039fb 	strdeq	r3, [r0], -fp
   100cc:	8c02bb01 			; <UNDEFINED> instruction: 0x8c02bb01
   100d0:	2f000000 	svccs	0x00000000
   100d4:	00000042 	andeq	r0, r0, r2, asr #32
   100d8:	003adc1b 	eorseq	sp, sl, fp, lsl ip
   100dc:	8c8f0200 	sfmhi	f0, 4, [pc], {0}
   100e0:	84000000 	strhi	r0, [r0], #-0
   100e4:	64000041 	strvs	r0, [r0], #-65	; 0xffffffbf
   100e8:	01000000 	mrseq	r0, (UNDEF: 0)
   100ec:	0004fe9c 	muleq	r4, ip, lr
   100f0:	35bf1c00 	ldrcc	r1, [pc, #3072]!	; 10cf8 <__exidx_end+0xb038>
   100f4:	db010000 	blle	500fc <__ccfg+0x30154>
   100f8:	00008c02 	andeq	r8, r0, r2, lsl #24
   100fc:	00424200 	subeq	r4, r2, r0, lsl #4
   10100:	3b3c1d00 	blcc	f17508 <__ccfg+0xef7560>
   10104:	dd010000 	stcle	0, cr0, [r1, #-0]
   10108:	00008c02 	andeq	r8, r0, r2, lsl #24
   1010c:	00426300 	subeq	r6, r2, r0, lsl #6
   10110:	39fb1d00 	ldmibcc	fp!, {r8, sl, fp, ip}^
   10114:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
   10118:	00008c02 	andeq	r8, r0, r2, lsl #24
   1011c:	00429700 	subeq	r9, r2, r0, lsl #14
   10120:	37551d00 	ldrbcc	r1, [r5, -r0, lsl #26]
   10124:	df010000 	svcle	0x00010000
   10128:	00008c02 	andeq	r8, r0, r2, lsl #24
   1012c:	0042aa00 	subeq	sl, r2, r0, lsl #20
   10130:	3ab41d00 	bcc	fed17538 <_estack+0xded12538>
   10134:	e0010000 	and	r0, r1, r0
   10138:	00008c02 	andeq	r8, r0, r2, lsl #24
   1013c:	0042d800 	subeq	sp, r2, r0, lsl #16
   10140:	39f10a00 	ldmibcc	r1!, {r9, fp}^
   10144:	e1010000 	mrs	r0, (UNDEF: 1)
   10148:	00008c02 	andeq	r8, r0, r2, lsl #24
   1014c:	37c51d00 	strbcc	r1, [r5, r0, lsl #26]
   10150:	e2010000 	and	r0, r1, #0
   10154:	00008102 	andeq	r8, r0, r2, lsl #2
   10158:	00430600 	subeq	r0, r3, r0, lsl #12
   1015c:	be1e0000 	cdplt	0, 1, cr0, cr14, cr0, {0}
   10160:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   10164:	14000041 	strne	r0, [r0], #-65	; 0xffffffbf
   10168:	01000000 	mrseq	r0, (UNDEF: 0)
   1016c:	00054a9c 	muleq	r5, ip, sl
   10170:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
   10174:	43810000 	orrmi	r0, r1, #0
   10178:	da160000 	ble	590180 <__ccfg+0x5701d8>
   1017c:	a2000000 	andge	r0, r0, #0
   10180:	15000043 	strne	r0, [r0, #-67]	; 0xffffffbd
   10184:	000041ea 	andeq	r4, r0, sl, ror #3
   10188:	0000000a 	andeq	r0, r0, sl
   1018c:	0000ce1f 	andeq	ip, r0, pc, lsl lr
   10190:	0043c100 	subeq	ip, r3, r0, lsl #2
   10194:	41ea1500 	mvnmi	r1, r0, lsl #10
   10198:	000a0000 	andeq	r0, sl, r0
   1019c:	da160000 	ble	5901a4 <__ccfg+0x5701fc>
   101a0:	e2000000 	and	r0, r0, #0
   101a4:	00000043 	andeq	r0, r0, r3, asr #32
   101a8:	e71e0000 	ldr	r0, [lr, -r0]
   101ac:	fc000000 	stc2	0, cr0, [r0], {-0}
   101b0:	14000041 	strne	r0, [r0], #-65	; 0xffffffbf
   101b4:	01000000 	mrseq	r0, (UNDEF: 0)
   101b8:	0005969c 	muleq	r5, ip, r6
   101bc:	00f71f00 	rscseq	r1, r7, r0, lsl #30
   101c0:	43f50000 	mvnsmi	r0, #0
   101c4:	03160000 	tsteq	r6, #0
   101c8:	16000001 	strne	r0, [r0], -r1
   101cc:	15000044 	strne	r0, [r0, #-68]	; 0xffffffbc
   101d0:	000041fe 	strdeq	r4, [r0], -lr
   101d4:	0000000a 	andeq	r0, r0, sl
   101d8:	0000f71f 	andeq	pc, r0, pc, lsl r7	; <UNPREDICTABLE>
   101dc:	00443500 	subeq	r3, r4, r0, lsl #10
   101e0:	41fe1500 	mvnsmi	r1, r0, lsl #10
   101e4:	000a0000 	andeq	r0, sl, r0
   101e8:	03160000 	tsteq	r6, #0
   101ec:	56000001 	strpl	r0, [r0], -r1
   101f0:	00000044 	andeq	r0, r0, r4, asr #32
   101f4:	101e0000 	andsne	r0, lr, r0
   101f8:	10000001 	andne	r0, r0, r1
   101fc:	14000042 	strne	r0, [r0], #-66	; 0xffffffbe
   10200:	01000000 	mrseq	r0, (UNDEF: 0)
   10204:	0005e29c 	muleq	r5, ip, r2
   10208:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
   1020c:	44690000 	strbtmi	r0, [r9], #-0
   10210:	2c160000 	ldccs	0, cr0, [r6], {-0}
   10214:	8a000001 	bhi	10220 <__exidx_end+0xa560>
   10218:	15000044 	strne	r0, [r0, #-68]	; 0xffffffbc
   1021c:	00004212 	andeq	r4, r0, r2, lsl r2
   10220:	0000000a 	andeq	r0, r0, sl
   10224:	0001201f 	andeq	r2, r1, pc, lsl r0
   10228:	0044a900 	subeq	sl, r4, r0, lsl #18
   1022c:	42121500 	andsmi	r1, r2, #0, 10
   10230:	000a0000 	andeq	r0, sl, r0
   10234:	2c160000 	ldccs	0, cr0, [r6], {-0}
   10238:	ca000001 	bgt	10244 <__exidx_end+0xa584>
   1023c:	00000044 	andeq	r0, r0, r4, asr #32
   10240:	391e0000 	ldmdbcc	lr, {}	; <UNPREDICTABLE>
   10244:	24000001 	strcs	r0, [r0], #-1
   10248:	28000042 	stmdacs	r0, {r1, r6}
   1024c:	01000000 	mrseq	r0, (UNDEF: 0)
   10250:	00063c9c 	muleq	r6, ip, ip
   10254:	01491f00 	cmpeq	r9, r0, lsl #30
   10258:	44dd0000 	ldrbmi	r0, [sp], #0
   1025c:	55160000 	ldrpl	r0, [r6, #-0]
   10260:	fe000001 	cdp2	0, 0, cr0, cr0, cr1, {0}
   10264:	20000044 	andcs	r0, r0, r4, asr #32
   10268:	00000161 	andeq	r0, r0, r1, ror #2
   1026c:	00422615 	subeq	r2, r2, r5, lsl r6
   10270:	00001c00 	andeq	r1, r0, r0, lsl #24
   10274:	01491f00 	cmpeq	r9, r0, lsl #30
   10278:	451d0000 	ldrmi	r0, [sp, #-0]
   1027c:	26150000 	ldrcs	r0, [r5], -r0
   10280:	1c000042 	stcne	0, cr0, [r0], {66}	; 0x42
   10284:	16000000 	strne	r0, [r0], -r0
   10288:	00000155 	andeq	r0, r0, r5, asr r1
   1028c:	0000453e 	andeq	r4, r0, lr, lsr r5
   10290:	00016116 	andeq	r6, r1, r6, lsl r1
   10294:	00456b00 	subeq	r6, r5, r0, lsl #22
   10298:	00000000 	andeq	r0, r0, r0
   1029c:	00377a1b 	eorseq	r7, r7, fp, lsl sl
   102a0:	8ccf0200 	sfmhi	f0, 2, [pc], {0}
   102a4:	4c000000 	stcmi	0, cr0, [r0], {-0}
   102a8:	10000042 	andne	r0, r0, r2, asr #32
   102ac:	01000000 	mrseq	r0, (UNDEF: 0)
   102b0:	0006669c 	muleq	r6, ip, r6
   102b4:	38141d00 	ldmdacc	r4, {r8, sl, fp, ip}
   102b8:	84010000 	strhi	r0, [r1], #-0
   102bc:	00008c03 	andeq	r8, r0, r3, lsl #24
   102c0:	00457e00 	subeq	r7, r5, r0, lsl #28
   102c4:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
   102c8:	5c000001 	stcpl	0, cr0, [r0], {1}
   102cc:	2c000042 	stccs	0, cr0, [r0], {66}	; 0x42
   102d0:	01000000 	mrseq	r0, (UNDEF: 0)
   102d4:	0006c09c 	muleq	r6, ip, r0
   102d8:	017e1f00 	cmneq	lr, r0, lsl #30
   102dc:	45990000 	ldrmi	r0, [r9]
   102e0:	8a160000 	bhi	5902e8 <__ccfg+0x570340>
   102e4:	ba000001 	blt	102f0 <__exidx_end+0xa630>
   102e8:	20000045 	andcs	r0, r0, r5, asr #32
   102ec:	00000196 	muleq	r0, r6, r1
   102f0:	00425e15 	subeq	r5, r2, r5, lsl lr
   102f4:	00001e00 	andeq	r1, r0, r0, lsl #28
   102f8:	017e1f00 	cmneq	lr, r0, lsl #30
   102fc:	45dd0000 	ldrbmi	r0, [sp]
   10300:	5e150000 	cdppl	0, 1, cr0, cr5, cr0, {0}
   10304:	1e000042 	cdpne	0, 0, cr0, cr0, cr2, {2}
   10308:	16000000 	strne	r0, [r0], -r0
   1030c:	0000018a 	andeq	r0, r0, sl, lsl #3
   10310:	000045fe 	strdeq	r4, [r0], -lr
   10314:	00019616 	andeq	r9, r1, r6, lsl r6
   10318:	00462b00 	subeq	r2, r6, r0, lsl #22
   1031c:	00000000 	andeq	r0, r0, r0
   10320:	0001a31e 	andeq	sl, r1, lr, lsl r3
   10324:	00428800 	subeq	r8, r2, r0, lsl #16
   10328:	00001400 	andeq	r1, r0, r0, lsl #8
   1032c:	0c9c0100 	ldfeqs	f0, [ip], {0}
   10330:	1f000007 	svcne	0x00000007
   10334:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
   10338:	0000463e 	andeq	r4, r0, lr, lsr r6
   1033c:	0001bf16 	andeq	fp, r1, r6, lsl pc
   10340:	00465f00 	subeq	r5, r6, r0, lsl #30
   10344:	428a1500 	addmi	r1, sl, #0, 10
   10348:	000a0000 	andeq	r0, sl, r0
   1034c:	b31f0000 	tstlt	pc, #0
   10350:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
   10354:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
   10358:	0000428a 	andeq	r4, r0, sl, lsl #5
   1035c:	0000000a 	andeq	r0, r0, sl
   10360:	0001bf16 	andeq	fp, r1, r6, lsl pc
   10364:	00469f00 	subeq	r9, r6, r0, lsl #30
   10368:	00000000 	andeq	r0, r0, r0
   1036c:	0001cc1e 	andeq	ip, r1, lr, lsl ip
   10370:	00429c00 	subeq	r9, r2, r0, lsl #24
   10374:	00001400 	andeq	r1, r0, r0, lsl #8
   10378:	589c0100 	ldmpl	ip, {r8}
   1037c:	1f000007 	svcne	0x00000007
   10380:	000001dc 	ldrdeq	r0, [r0], -ip
   10384:	000046b2 			; <UNDEFINED> instruction: 0x000046b2
   10388:	0001e816 	andeq	lr, r1, r6, lsl r8
   1038c:	0046d300 	subeq	sp, r6, r0, lsl #6
   10390:	429e1500 	addsmi	r1, lr, #0, 10
   10394:	000a0000 	andeq	r0, sl, r0
   10398:	dc1f0000 	ldcle	0, cr0, [pc], {-0}
   1039c:	f2000001 	vhadd.s8	d0, d0, d1
   103a0:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
   103a4:	0000429e 	muleq	r0, lr, r2
   103a8:	0000000a 	andeq	r0, r0, sl
   103ac:	0001e816 	andeq	lr, r1, r6, lsl r8
   103b0:	00471300 	subeq	r1, r7, r0, lsl #6
   103b4:	00000000 	andeq	r0, r0, r0
   103b8:	00351417 	eorseq	r1, r5, r7, lsl r4
   103bc:	b0730200 	rsbslt	r0, r3, r0, lsl #4
   103c0:	10000042 	andne	r0, r0, r2, asr #32
   103c4:	01000001 	tsteq	r0, r1
   103c8:	0009639c 	muleq	r9, ip, r3
   103cc:	35bf1c00 	ldrcc	r1, [pc, #3072]!	; 10fd4 <__exidx_end+0xb314>
   103d0:	27010000 	strcs	r0, [r1, -r0]
   103d4:	00008c01 	andeq	r8, r0, r1, lsl #24
   103d8:	00472600 	subeq	r2, r7, r0, lsl #12
   103dc:	362b1c00 	strtcc	r1, [fp], -r0, lsl #24
   103e0:	27010000 	strcs	r0, [r1, -r0]
   103e4:	00008c01 	andeq	r8, r0, r1, lsl #24
   103e8:	00475200 	subeq	r5, r7, r0, lsl #4
   103ec:	397e1d00 	ldmdbcc	lr!, {r8, sl, fp, ip}^
   103f0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
   103f4:	00008c01 	andeq	r8, r0, r1, lsl #24
   103f8:	00477300 	subeq	r7, r7, r0, lsl #6
   103fc:	01f52100 	mvnseq	r2, r0, lsl #2
   10400:	42e00000 	rscmi	r0, r0, #0
   10404:	12200000 	eorne	r0, r0, #0
   10408:	40010000 	andmi	r0, r1, r0
   1040c:	0007c101 	andeq	ip, r7, r1, lsl #2
   10410:	12201200 	eorne	r1, r0, #0, 4
   10414:	05160000 	ldreq	r0, [r6, #-0]
   10418:	41000002 	tstmi	r0, r2
   1041c:	00000048 	andeq	r0, r0, r8, asr #32
   10420:	42ba2200 	adcsmi	r2, sl, #0, 4
   10424:	03430000 	movteq	r0, #12288	; 0x3000
   10428:	07d60000 	ldrbeq	r0, [r6, r0]
   1042c:	011a0000 	tsteq	sl, r0
   10430:	01f30350 	mvnseq	r0, r0, asr r3
   10434:	c6220051 			; <UNDEFINED> instruction: 0xc6220051
   10438:	d6000042 	strle	r0, [r0], -r2, asr #32
   1043c:	ef00000a 	svc	0x0000000a
   10440:	1a000007 	bne	10464 <__exidx_end+0xa7a4>
   10444:	48015101 	stmdami	r1, {r0, r8, ip, lr}
   10448:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   1044c:	23000074 	movwcs	r0, #116	; 0x74
   10450:	000042ca 	andeq	r4, r0, sl, asr #5
   10454:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
   10458:	0042e024 	subeq	lr, r2, r4, lsr #32
   1045c:	00760200 	rsbseq	r0, r6, r0, lsl #4
   10460:	0000081d 	andeq	r0, r0, sp, lsl r8
   10464:	0153011a 	cmpeq	r3, sl, lsl r1
   10468:	52011a30 	andpl	r1, r1, #48, 20	; 0x30000
   1046c:	03ff0a03 	mvnseq	r0, #12288	; 0x3000
   10470:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
   10474:	011a2c08 	tsteq	sl, r8, lsl #24
   10478:	00740250 	rsbseq	r0, r4, r0, asr r2
   1047c:	42f02200 	rscsmi	r2, r0, #0, 4
   10480:	0ad60000 	beq	ff590488 <_estack+0xdf58b488>
   10484:	08360000 	ldmdaeq	r6!, {}	; <UNPREDICTABLE>
   10488:	011a0000 	tsteq	sl, r0
   1048c:	1a4c0151 	bne	13109d8 <__ccfg+0x12f0a30>
   10490:	74025001 	strvc	r5, [r2], #-1
   10494:	f4230000 	vld4.8	{d0-d3}, [r3], r0
   10498:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
   1049c:	22000004 	andcs	r0, r0, #4
   104a0:	000042fe 	strdeq	r4, [r0], -lr
   104a4:	00000ad6 	ldrdeq	r0, [r0], -r6
   104a8:	00000858 	andeq	r0, r0, r8, asr r8
   104ac:	0151011a 	cmpeq	r1, sl, lsl r1
   104b0:	50011a44 	andpl	r1, r1, r4, asr #20
   104b4:	00007402 	andeq	r7, r0, r2, lsl #8
   104b8:	00430223 	subeq	r0, r3, r3, lsr #4
   104bc:	00043e00 	andeq	r3, r4, r0, lsl #28
   104c0:	430c2200 	movwmi	r2, #49664	; 0xc200
   104c4:	0ad60000 	beq	ff5904cc <_estack+0xdf58b4cc>
   104c8:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
   104cc:	011a0000 	tsteq	sl, r0
   104d0:	1a400151 	bne	1010a1c <__ccfg+0xff0a74>
   104d4:	74025001 	strvc	r5, [r2], #-1
   104d8:	12220000 	eorne	r0, r2, #0
   104dc:	78000043 	stmdavc	r0, {r0, r1, r6}
   104e0:	8e000004 	cdphi	0, 0, cr0, cr0, cr4, {0}
   104e4:	1a000008 	bne	1050c <__exidx_end+0xa84c>
   104e8:	75025001 	strvc	r5, [r2, #-1]
   104ec:	1c220000 	stcne	0, cr0, [r2], #-0
   104f0:	d6000043 	strle	r0, [r0], -r3, asr #32
   104f4:	a700000a 	strge	r0, [r0, -sl]
   104f8:	1a000008 	bne	10520 <__exidx_end+0xa860>
   104fc:	3c015101 	stfccs	f5, [r1], {1}
   10500:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10504:	22000074 	andcs	r0, r0, #116	; 0x74
   10508:	00004322 	andeq	r4, r0, r2, lsr #6
   1050c:	000000e7 	andeq	r0, r0, r7, ror #1
   10510:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
   10514:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10518:	22000075 	andcs	r0, r0, #117	; 0x75
   1051c:	00004334 	andeq	r4, r0, r4, lsr r3
   10520:	00000110 	andeq	r0, r0, r0, lsl r1
   10524:	000008cf 	andeq	r0, r0, pc, asr #17
   10528:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   1052c:	22000075 	andcs	r0, r0, #117	; 0x75
   10530:	00004342 	andeq	r4, r0, r2, asr #6
   10534:	00000139 	andeq	r0, r0, r9, lsr r1
   10538:	000008e3 	andeq	r0, r0, r3, ror #17
   1053c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10540:	22000075 	andcs	r0, r0, #117	; 0x75
   10544:	0000434c 	andeq	r4, r0, ip, asr #6
   10548:	00000ad6 	ldrdeq	r0, [r0], -r6
   1054c:	000008fd 	strdeq	r0, [r0], -sp
   10550:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
   10554:	011a2808 	tsteq	sl, r8, lsl #16
   10558:	00740250 	rsbseq	r0, r4, r0, asr r2
   1055c:	43522200 	cmpmi	r2, #0, 4
   10560:	00be0000 	adcseq	r0, lr, r0
   10564:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
   10568:	011a0000 	tsteq	sl, r0
   1056c:	00750250 	rsbseq	r0, r5, r0, asr r2
   10570:	43642200 	cmnmi	r4, #0, 4
   10574:	01a30000 			; <UNDEFINED> instruction: 0x01a30000
   10578:	09250000 	stmdbeq	r5!, {}	; <UNPREDICTABLE>
   1057c:	011a0000 	tsteq	sl, r0
   10580:	00750250 	rsbseq	r0, r5, r0, asr r2
   10584:	43762200 	cmnmi	r6, #0, 4
   10588:	01cc0000 	biceq	r0, ip, r0
   1058c:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
   10590:	011a0000 	tsteq	sl, r0
   10594:	00750250 	rsbseq	r0, r5, r0, asr r2
   10598:	438a2200 	orrmi	r2, sl, #0, 4
   1059c:	016e0000 	cmneq	lr, r0
   105a0:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
   105a4:	011a0000 	tsteq	sl, r0
   105a8:	00750250 	rsbseq	r0, r5, r0, asr r2
   105ac:	43941900 	orrsmi	r1, r4, #0, 18
   105b0:	0ad60000 	beq	ff5905b8 <_estack+0xdf58b5b8>
   105b4:	011a0000 	tsteq	sl, r0
   105b8:	1a380151 	bne	e10b04 <__ccfg+0xdf0b5c>
   105bc:	74025001 	strvc	r5, [r2], #-1
   105c0:	17000000 	strne	r0, [r0, -r0]
   105c4:	00003591 	muleq	r0, r1, r5
   105c8:	43c0fd02 	bicmi	pc, r0, #2, 26	; 0x80
   105cc:	00640000 	rsbeq	r0, r4, r0
   105d0:	9c010000 	stcls	0, cr0, [r1], {-0}
   105d4:	00000989 	andeq	r0, r0, r9, lsl #19
   105d8:	0037481d 	eorseq	r4, r7, sp, lsl r8
   105dc:	03eb0100 	mvneq	r0, #0, 2
   105e0:	0000008c 	andeq	r0, r0, ip, lsl #1
   105e4:	0000485a 	andeq	r4, r0, sl, asr r8
   105e8:	3abe0c00 	bcc	fef935f0 <_estack+0xdef8e5f0>
   105ec:	06020000 	streq	r0, [r2], -r0
   105f0:	00442401 	subeq	r2, r4, r1, lsl #8
   105f4:	00002800 	andeq	r2, r0, r0, lsl #16
   105f8:	b09c0100 	addslt	r0, ip, r0, lsl #2
   105fc:	1c000009 	stcne	0, cr0, [r0], {9}
   10600:	00003915 	andeq	r3, r0, r5, lsl r9
   10604:	8c041301 	stchi	3, cr1, [r4], {1}
   10608:	75000000 	strvc	r0, [r0, #-0]
   1060c:	00000048 	andeq	r0, r0, r8, asr #32
   10610:	00354417 	eorseq	r4, r5, r7, lsl r4
   10614:	4c7a0200 	lfmmi	f0, 2, [sl], #-0
   10618:	50000044 	andpl	r0, r0, r4, asr #32
   1061c:	01000001 	tsteq	r0, r1
   10620:	000ad69c 	muleq	sl, ip, r6
   10624:	362b1c00 	strtcc	r1, [fp], -r0, lsl #24
   10628:	9b010000 	blls	50630 <__ccfg+0x30688>
   1062c:	00008c01 	andeq	r8, r0, r1, lsl #24
   10630:	00489600 	subeq	r9, r8, r0, lsl #12
   10634:	3a5c1d00 	bcc	1717a3c <__ccfg+0x16f7a94>
   10638:	9d010000 	stcls	0, cr0, [r1, #-0]
   1063c:	00008c01 	andeq	r8, r0, r1, lsl #24
   10640:	0048f100 	subeq	pc, r8, r0, lsl #2
   10644:	397e1d00 	ldmdbcc	lr!, {r8, sl, fp, ip}^
   10648:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
   1064c:	00008c01 	andeq	r8, r0, r1, lsl #24
   10650:	00490400 	subeq	r0, r9, r0, lsl #8
   10654:	36c81d00 	strbcc	r1, [r8], r0, lsl #26
   10658:	9f010000 	svcls	0x00010000
   1065c:	00008c01 	andeq	r8, r0, r1, lsl #24
   10660:	00491700 	subeq	r1, r9, r0, lsl #14
   10664:	36bb1d00 	ldrtcc	r1, [fp], r0, lsl #26
   10668:	a0010000 	andge	r0, r1, r0
   1066c:	00008c01 	andeq	r8, r0, r1, lsl #24
   10670:	00493500 	subeq	r3, r9, r0, lsl #10
   10674:	02122500 	andseq	r2, r2, #0, 10
   10678:	455e0000 	ldrbmi	r0, [lr, #-0]
   1067c:	003e0000 	eorseq	r0, lr, r0
   10680:	16010000 	strne	r0, [r1], -r0
   10684:	44d62302 	ldrbmi	r2, [r6], #770	; 0x302
   10688:	063c0000 	ldrteq	r0, [ip], -r0
   1068c:	f8220000 			; <UNDEFINED> instruction: 0xf8220000
   10690:	f2000044 	vhadd.s8	q0, q0, q2
   10694:	4600000a 	strmi	r0, [r0], -sl
   10698:	1a00000a 	bne	106c8 <__exidx_end+0xaa08>
   1069c:	31015101 	tstcc	r1, r1, lsl #2
   106a0:	0150011a 	cmpeq	r0, sl, lsl r1
   106a4:	fe220034 	mcr2	0, 1, r0, cr2, cr4, {1}
   106a8:	89000044 	stmdbhi	r0, {r2, r6}
   106ac:	5d000009 	stcpl	0, cr0, [r0, #-36]	; 0xffffffdc
   106b0:	1a00000a 	bne	106e0 <__exidx_end+0xaa20>
   106b4:	0c055001 	stceq	0, cr5, [r5], {1}
   106b8:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
   106bc:	45042300 	strmi	r2, [r4, #-768]	; 0xfffffd00
   106c0:	0b080000 	bleq	2106c8 <__ccfg+0x1f0720>
   106c4:	0e220000 	cdpeq	0, 2, cr0, cr2, cr0, {0}
   106c8:	f2000045 	vhadd.s8	q0, q0, <illegal reg q2.5>
   106cc:	7f00000a 	svcvc	0x0000000a
   106d0:	1a00000a 	bne	10700 <__exidx_end+0xaa40>
   106d4:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
   106d8:	50011a00 	andpl	r1, r1, r0, lsl #20
   106dc:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
   106e0:	00004514 	andeq	r4, r0, r4, lsl r5
   106e4:	00000b08 	andeq	r0, r0, r8, lsl #22
   106e8:	00000a92 	muleq	r0, r2, sl
   106ec:	0150011a 	cmpeq	r0, sl, lsl r1
   106f0:	24220034 	strtcs	r0, [r2], #-52	; 0xffffffcc
   106f4:	89000045 	stmdbhi	r0, {r0, r2, r6}
   106f8:	ac000009 	stcge	0, cr0, [r0], {9}
   106fc:	1a00000a 	bne	1072c <__exidx_end+0xaa6c>
   10700:	74085001 	strvc	r5, [r8], #-1
   10704:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
   10708:	001a00ff 	ldrsheq	r0, [sl], -pc	; <UNPREDICTABLE>
   1070c:	00453426 	subeq	r3, r5, r6, lsr #8
   10710:	000acc00 	andeq	ip, sl, r0, lsl #24
   10714:	52011a00 	andpl	r1, r1, #0, 20
   10718:	60000c05 	andvs	r0, r0, r5, lsl #24
   1071c:	011a6000 	tsteq	sl, r0
   10720:	1a370151 	bne	dd0c6c <__ccfg+0xdb0cc4>
   10724:	74045001 	strvc	r5, [r4], #-1
   10728:	00254800 	eoreq	r4, r5, r0, lsl #16
   1072c:	00454a23 	subeq	r4, r5, r3, lsr #20
   10730:	000af200 	andeq	pc, sl, r0, lsl #4
   10734:	8e270000 	cdphi	0, 2, cr0, cr7, cr0, {0}
   10738:	06000038 			; <UNDEFINED> instruction: 0x06000038
   1073c:	0af201ca 	beq	ffc90e6c <_estack+0xdfc8be6c>
   10740:	8c280000 	stchi	0, cr0, [r8], #-0
   10744:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   10748:	0000008c 	andeq	r0, r0, ip, lsl #1
   1074c:	00008c28 	andeq	r8, r0, r8, lsr #24
   10750:	1d290000 	stcne	0, cr0, [r9, #-0]
   10754:	0700002d 	streq	r0, [r0, -sp, lsr #32]
   10758:	000b08f9 	strdeq	r0, [fp], -r9
   1075c:	008c2800 	addeq	r2, ip, r0, lsl #16
   10760:	8c280000 	stchi	0, cr0, [r8], #-0
   10764:	00000000 	andeq	r0, r0, r0
   10768:	002d562a 	eoreq	r5, sp, sl, lsr #12
   1076c:	01100700 	tsteq	r0, r0, lsl #14
   10770:	0000008c 	andeq	r0, r0, ip, lsl #1
   10774:	00008c28 	andeq	r8, r0, r8, lsr #24
   10778:	23000000 	movwcs	r0, #0
   1077c:	04000009 	streq	r0, [r0], #-9
   10780:	003bb000 	eorseq	fp, fp, r0
   10784:	3f010400 	svccc	0x00010400
   10788:	0100002a 	tsteq	r0, sl, lsr #32
   1078c:	00003c05 	andeq	r3, r0, r5, lsl #24
   10790:	00002b06 	andeq	r2, r0, r6, lsl #22
   10794:	00001310 	andeq	r1, r0, r0, lsl r3
   10798:	00000000 	andeq	r0, r0, r0
   1079c:	000086d5 	ldrdeq	r8, [r0], -r5
   107a0:	002ba902 	eoreq	sl, fp, r2, lsl #18
   107a4:	301b0600 	andscc	r0, fp, r0, lsl #12
   107a8:	03000000 	movweq	r0, #0
   107ac:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
   107b0:	1a020000 	bne	907b8 <__ccfg+0x70810>
   107b4:	0600002a 	streq	r0, [r0], -sl, lsr #32
   107b8:	0000421d 	andeq	r4, r0, sp, lsl r2
   107bc:	08010300 	stmdaeq	r1, {r8, r9}
   107c0:	00000c5b 	andeq	r0, r0, fp, asr ip
   107c4:	6b050203 	blvs	150fd8 <__ccfg+0x131030>
   107c8:	0200000a 	andeq	r0, r0, #10
   107cc:	00002e10 	andeq	r2, r0, r0, lsl lr
   107d0:	005b2b06 	subseq	r2, fp, r6, lsl #22
   107d4:	02030000 	andeq	r0, r3, #0
   107d8:	000d6607 	andeq	r6, sp, r7, lsl #12
   107dc:	2b9f0200 	blcs	fe7d0fe4 <_estack+0xde7cbfe4>
   107e0:	3f060000 	svccc	0x00060000
   107e4:	0000006d 	andeq	r0, r0, sp, rrx
   107e8:	fd050403 	stc2	4, cr0, [r5, #-12]
   107ec:	02000007 	andeq	r0, r0, #7
   107f0:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
   107f4:	007f4106 	rsbseq	r4, pc, r6, lsl #2
   107f8:	04030000 	streq	r0, [r3], #-0
   107fc:	00042607 	andeq	r2, r4, r7, lsl #12
   10800:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
   10804:	000007f8 	strdeq	r0, [r0], -r8
   10808:	21070803 	tstcs	r7, r3, lsl #16
   1080c:	04000004 	streq	r0, [r0], #-4
   10810:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   10814:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
   10818:	00042b07 	andeq	r2, r4, r7, lsl #22
   1081c:	2bab0200 	blcs	fead1024 <_estack+0xdeacc024>
   10820:	13070000 	movwne	r0, #28672	; 0x7000
   10824:	00000025 	andeq	r0, r0, r5, lsr #32
   10828:	002a1c02 	eoreq	r1, sl, r2, lsl #24
   1082c:	37140700 	ldrcc	r0, [r4, -r0, lsl #14]
   10830:	02000000 	andeq	r0, r0, #0
   10834:	00002e12 	andeq	r2, r0, r2, lsl lr
   10838:	00501a07 	subseq	r1, r0, r7, lsl #20
   1083c:	a1020000 	mrsge	r0, (UNDEF: 2)
   10840:	0700002b 	streq	r0, [r0, -fp, lsr #32]
   10844:	0000621f 	andeq	r6, r0, pc, lsl r2
   10848:	29b40200 	ldmibcs	r4!, {r9}
   1084c:	20070000 	andcs	r0, r7, r0
   10850:	00000074 	andeq	r0, r0, r4, ror r0
   10854:	0029de02 	eoreq	sp, r9, r2, lsl #28
   10858:	e4330800 	ldrt	r0, [r3], #-2048	; 0xfffff800
   1085c:	05000000 	streq	r0, [r0, #-0]
   10860:	0000ea04 	andeq	lr, r0, r4, lsl #20
   10864:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
   10868:	000000f1 	strdeq	r0, [r0], -r1
   1086c:	0000fc07 	andeq	pc, r0, r7, lsl #24
   10870:	00ad0800 	adceq	r0, sp, r0, lsl #16
   10874:	02000000 	andeq	r0, r0, #0
   10878:	00003114 	andeq	r3, r0, r4, lsl r1
   1087c:	01074209 	tsteq	r7, r9, lsl #4
   10880:	04050000 	streq	r0, [r5], #-0
   10884:	0000010d 	andeq	r0, r0, sp, lsl #2
   10888:	0000ce09 	andeq	ip, r0, r9, lsl #28
   1088c:	00012600 	andeq	r2, r1, r0, lsl #12
   10890:	01260800 			; <UNDEFINED> instruction: 0x01260800
   10894:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   10898:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1089c:	000000ce 	andeq	r0, r0, lr, asr #1
   108a0:	ad040500 	cfstr32ge	mvfx0, [r4, #-0]
   108a4:	02000000 	andeq	r0, r0, #0
   108a8:	0000327c 	andeq	r3, r0, ip, ror r2
   108ac:	01374609 	teqeq	r7, r9, lsl #12
   108b0:	04050000 	streq	r0, [r5], #-0
   108b4:	0000013d 	andeq	r0, r0, sp, lsr r1
   108b8:	0000ce0a 	andeq	ip, r0, sl, lsl #28
   108bc:	32c50200 	sbccc	r0, r5, #0, 4
   108c0:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
   108c4:	00000137 	andeq	r0, r0, r7, lsr r1
   108c8:	002fac02 	eoreq	sl, pc, r2, lsl #24
   108cc:	584a0900 	stmdapl	sl, {r8, fp}^
   108d0:	05000001 	streq	r0, [r0, #-1]
   108d4:	00015e04 	andeq	r5, r1, r4, lsl #28
   108d8:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   108dc:	016d0000 	cmneq	sp, r0
   108e0:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   108e4:	00000000 	andeq	r0, r0, r0
   108e8:	002ebb02 	eoreq	fp, lr, r2, lsl #22
   108ec:	374c0900 	strbcc	r0, [ip, -r0, lsl #18]
   108f0:	02000001 	andeq	r0, r0, #1
   108f4:	00002e1b 	andeq	r2, r0, fp, lsl lr
   108f8:	01074e09 	tsteq	r7, r9, lsl #28
   108fc:	ab020000 	blge	90904 <__ccfg+0x7095c>
   10900:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   10904:	0000e451 	andeq	lr, r0, r1, asr r4
   10908:	2d350200 	lfmcs	f0, 4, [r5, #-0]
   1090c:	53090000 	movwpl	r0, #36864	; 0x9000
   10910:	00000199 	muleq	r0, r9, r1
   10914:	019f0405 	orrseq	r0, pc, r5, lsl #8
   10918:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   1091c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
   10920:	08000001 	stmdaeq	r0, {r0}
   10924:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   10928:	0000b808 	andeq	fp, r0, r8, lsl #16
   1092c:	00b80800 	adcseq	r0, r8, r0, lsl #16
   10930:	05000000 	streq	r0, [r0, #-0]
   10934:	0000b804 	andeq	fp, r0, r4, lsl #16
   10938:	312a0200 			; <UNDEFINED> instruction: 0x312a0200
   1093c:	57090000 	strpl	r0, [r9, -r0]
   10940:	000001c9 	andeq	r0, r0, r9, asr #3
   10944:	01cf0405 	biceq	r0, pc, r5, lsl #8
   10948:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   1094c:	e3000000 	movw	r0, #0
   10950:	08000001 	stmdaeq	r0, {r0}
   10954:	000001e3 	andeq	r0, r0, r3, ror #3
   10958:	0000ce08 	andeq	ip, r0, r8, lsl #28
   1095c:	04050000 	streq	r0, [r5], #-0
   10960:	000000ce 	andeq	r0, r0, lr, asr #1
   10964:	002f1e02 	eoreq	r1, pc, r2, lsl #28
   10968:	c95a0900 	ldmdbgt	sl, {r8, fp}^
   1096c:	02000001 	andeq	r0, r0, #1
   10970:	00002fd8 	ldrdeq	r2, [r0], -r8
   10974:	01c95d09 	biceq	r5, r9, r9, lsl #26
   10978:	47020000 	strmi	r0, [r2, -r0]
   1097c:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   10980:	0001c960 	andeq	ip, r1, r0, ror #18
   10984:	31380200 	teqcc	r8, r0, lsl #4
   10988:	63090000 	movwvs	r0, #36864	; 0x9000
   1098c:	000000e4 	andeq	r0, r0, r4, ror #1
   10990:	002d8502 	eoreq	r8, sp, r2, lsl #10
   10994:	20650900 	rsbcs	r0, r5, r0, lsl #18
   10998:	05000002 	streq	r0, [r0, #-2]
   1099c:	00022604 	andeq	r2, r2, r4, lsl #12
   109a0:	02310700 	eorseq	r0, r1, #0, 14
   109a4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   109a8:	00000000 	andeq	r0, r0, r0
   109ac:	0032d602 	eorseq	sp, r2, r2, lsl #12
   109b0:	20670900 	rsbcs	r0, r7, r0, lsl #18
   109b4:	02000002 	andeq	r0, r0, #2
   109b8:	0000301a 	andeq	r3, r0, sl, lsl r0
   109bc:	00eb6909 	rsceq	r6, fp, r9, lsl #18
   109c0:	b5020000 	strlt	r0, [r2, #-0]
   109c4:	09000032 	stmdbeq	r0, {r1, r4, r5}
   109c8:	0000eb6b 	andeq	lr, r0, fp, ror #22
   109cc:	2fe70200 	svccs	0x00e70200
   109d0:	6d090000 	stcvs	0, cr0, [r9, #-0]
   109d4:	000000eb 	andeq	r0, r0, fp, ror #1
   109d8:	002ff902 	eoreq	pc, pc, r2, lsl #18
   109dc:	eb6f0900 	bl	1bd2de4 <__ccfg+0x1bb2e3c>
   109e0:	0b000000 	bleq	109e8 <__exidx_end+0xad28>
   109e4:	557a094c 	ldrbpl	r0, [sl, #-2380]!	; 0xfffff6b4
   109e8:	0c000003 	stceq	0, cr0, [r0], {3}
   109ec:	00002fbd 			; <UNDEFINED> instruction: 0x00002fbd
   109f0:	00fc7c09 	rscseq	r7, ip, r9, lsl #24
   109f4:	0c000000 	stceq	0, cr0, [r0], {-0}
   109f8:	000032a8 	andeq	r3, r0, r8, lsr #5
   109fc:	012c7d09 			; <UNDEFINED> instruction: 0x012c7d09
   10a00:	0c040000 	stceq	0, cr0, [r4], {-0}
   10a04:	00002fce 	andeq	r2, r0, lr, asr #31
   10a08:	01427e09 	cmpeq	r2, r9, lsl #28
   10a0c:	0c080000 	stceq	0, cr0, [r8], {-0}
   10a10:	000031c7 	andeq	r3, r0, r7, asr #3
   10a14:	014d7f09 	cmpeq	sp, r9, lsl #30
   10a18:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   10a1c:	000031d9 	ldrdeq	r3, [r0], -r9
   10a20:	016d8009 	cmneq	sp, r9
   10a24:	0c100000 	ldceq	0, cr0, [r0], {-0}
   10a28:	00002ecc 	andeq	r2, r0, ip, asr #29
   10a2c:	01788109 	cmneq	r8, r9, lsl #2
   10a30:	0c140000 	ldceq	0, cr0, [r4], {-0}
   10a34:	00002e88 	andeq	r2, r0, r8, lsl #29
   10a38:	01838209 	orreq	r8, r3, r9, lsl #4
   10a3c:	0c180000 	ldceq	0, cr0, [r8], {-0}
   10a40:	00002fc3 	andeq	r2, r0, r3, asr #31
   10a44:	018e8309 	orreq	r8, lr, r9, lsl #6
   10a48:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   10a4c:	00003152 	andeq	r3, r0, r2, asr r1
   10a50:	01be8409 			; <UNDEFINED> instruction: 0x01be8409
   10a54:	0c200000 	stceq	0, cr0, [r0], #-0
   10a58:	00002f4a 	andeq	r2, r0, sl, asr #30
   10a5c:	01e98509 	mvneq	r8, r9, lsl #10
   10a60:	0c240000 	stceq	0, cr0, [r4], #-0
   10a64:	00002fa2 	andeq	r2, r0, r2, lsr #31
   10a68:	01f48609 	mvnseq	r8, r9, lsl #12
   10a6c:	0c280000 	stceq	0, cr0, [r8], #-0
   10a70:	00003207 	andeq	r3, r0, r7, lsl #4
   10a74:	01ff8709 	mvnseq	r8, r9, lsl #14
   10a78:	0c2c0000 	stceq	0, cr0, [ip], #-0
   10a7c:	00002ee7 	andeq	r2, r0, r7, ror #29
   10a80:	02158809 	andseq	r8, r5, #589824	; 0x90000
   10a84:	0c300000 	ldceq	0, cr0, [r0], #-0
   10a88:	000031f5 	strdeq	r3, [r0], -r5
   10a8c:	02318909 	eorseq	r8, r1, #147456	; 0x24000
   10a90:	0c340000 	ldceq	0, cr0, [r4], #-0
   10a94:	00002dc6 	andeq	r2, r0, r6, asr #27
   10a98:	020a8a09 	andeq	r8, sl, #36864	; 0x9000
   10a9c:	0c380000 	ldceq	0, cr0, [r8], #-0
   10aa0:	00003009 	andeq	r3, r0, r9
   10aa4:	023c8b09 	eorseq	r8, ip, #9216	; 0x2400
   10aa8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
   10aac:	000031a8 	andeq	r3, r0, r8, lsr #3
   10ab0:	02478c09 	subeq	r8, r7, #2304	; 0x900
   10ab4:	0c400000 	mareq	acc0, r0, r0
   10ab8:	00002f2c 	andeq	r2, r0, ip, lsr #30
   10abc:	02528d09 	subseq	r8, r2, #576	; 0x240
   10ac0:	0c440000 	mareq	acc0, r0, r4
   10ac4:	00002d76 	andeq	r2, r0, r6, ror sp
   10ac8:	025d8e09 	subseq	r8, sp, #9, 28	; 0x90
   10acc:	00480000 	subeq	r0, r8, r0
   10ad0:	0030d802 	eorseq	sp, r0, r2, lsl #16
   10ad4:	688f0900 	stmvs	pc, {r8, fp}	; <UNPREDICTABLE>
   10ad8:	0b000002 	bleq	10ae8 <__exidx_end+0xae28>
   10adc:	994e0108 	stmdbls	lr, {r3, r8}^
   10ae0:	0c000003 	stceq	0, cr0, [r0], {3}
   10ae4:	00003d34 	andeq	r3, r0, r4, lsr sp
   10ae8:	00ce4f01 	sbceq	r4, lr, r1, lsl #30
   10aec:	0c000000 	stceq	0, cr0, [r0], {-0}
   10af0:	00003d65 	andeq	r3, r0, r5, ror #26
   10af4:	00b85001 	adcseq	r5, r8, r1
   10af8:	0c040000 	stceq	0, cr0, [r4], {-0}
   10afc:	00003c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
   10b00:	00ad5101 	adceq	r5, sp, r1, lsl #2
   10b04:	0c060000 	stceq	0, cr0, [r6], {-0}
   10b08:	00003c52 	andeq	r3, r0, r2, asr ip
   10b0c:	00a25201 	adceq	r5, r2, r1, lsl #4
   10b10:	00070000 	andeq	r0, r7, r0
   10b14:	003d9102 	eorseq	r9, sp, r2, lsl #2
   10b18:	60530100 	subsvs	r0, r3, r0, lsl #2
   10b1c:	0d000003 	stceq	0, cr0, [r0, #-12]
   10b20:	00000fbe 			; <UNDEFINED> instruction: 0x00000fbe
   10b24:	0301dc02 	movweq	sp, #7170	; 0x1c02
   10b28:	000003be 			; <UNDEFINED> instruction: 0x000003be
   10b2c:	000f780e 	andeq	r7, pc, lr, lsl #16
   10b30:	01dc0200 	bicseq	r0, ip, r0, lsl #4
   10b34:	000000ce 	andeq	r0, r0, lr, asr #1
   10b38:	0fd30f00 	svceq	0x00d30f00
   10b3c:	2c020000 	stccs	0, cr0, [r2], {-0}
   10b40:	0000ce02 	andeq	ip, r0, r2, lsl #28
   10b44:	d7100300 	ldrle	r0, [r0, -r0, lsl #6]
   10b48:	04000010 	streq	r0, [r0], #-16
   10b4c:	1103022a 	tstne	r3, sl, lsr #4
   10b50:	00003987 	andeq	r3, r0, r7, lsl #19
   10b54:	00c3e905 	sbceq	lr, r3, r5, lsl #18
   10b58:	fb030000 	blx	d0b62 <__ccfg+0xb0bba>
   10b5c:	12000003 	andne	r0, r0, #3
   10b60:	000036d7 	ldrdeq	r3, [r0], -r7
   10b64:	00cee905 	sbceq	lr, lr, r5, lsl #18
   10b68:	e0130000 	ands	r0, r3, r0
   10b6c:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
   10b70:	0000c3ef 	andeq	ip, r0, pc, ror #7
   10b74:	670d0000 	strvs	r0, [sp, -r0]
   10b78:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
   10b7c:	1503025c 	strne	r0, [r3, #-604]	; 0xfffffda4
   10b80:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   10b84:	00003c41 	andeq	r3, r0, r1, asr #24
   10b88:	ce025c04 	cdpgt	12, 0, cr5, cr2, cr4, {0}
   10b8c:	00000000 	andeq	r0, r0, r0
   10b90:	00310210 	eorseq	r0, r1, r0, lsl r2
   10b94:	01400300 	mrseq	r0, SPSR_irq
   10b98:	3ceb0f03 	stclcc	15, cr0, [fp], #12
   10b9c:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   10ba0:	00042b02 	andeq	r2, r4, r2, lsl #22
   10ba4:	01030300 	mrseq	r0, SP_svc
   10ba8:	000ca702 	andeq	sl, ip, r2, lsl #14
   10bac:	3d3b1400 	cfldrscc	mvf1, [fp, #-0]
   10bb0:	9e0a0000 	cdpls	0, 0, cr0, cr10, cr0, {0}
   10bb4:	00000000 	andeq	r0, r0, r0
   10bb8:	000000f4 	strdeq	r0, [r0], -r4
   10bbc:	05cd9c01 	strbeq	r9, [sp, #3073]	; 0xc01
   10bc0:	97150000 	ldrls	r0, [r5, -r0]
   10bc4:	0100003c 	tsteq	r0, ip, lsr r0
   10bc8:	0000ce7b 	andeq	ip, r0, fp, ror lr
   10bcc:	00494800 	subeq	r4, r9, r0, lsl #16
   10bd0:	3c591600 	mrrccc	6, 0, r1, r9, cr0
   10bd4:	7c010000 	stcvc	0, cr0, [r1], {-0}
   10bd8:	000000ce 	andeq	r0, r0, lr, asr #1
   10bdc:	a41707ff 	ldrge	r0, [r7], #-2047	; 0xfffff801
   10be0:	00000003 	andeq	r0, r0, r3
   10be4:	e0000000 	and	r0, r0, r0
   10be8:	01000012 	tsteq	r0, r2, lsl r0
   10bec:	00047d81 	andeq	r7, r4, r1, lsl #27
   10bf0:	03b11800 			; <UNDEFINED> instruction: 0x03b11800
   10bf4:	00010000 	andeq	r0, r1, r0
   10bf8:	0003be19 	andeq	fp, r3, r9, lsl lr
   10bfc:	00000000 	andeq	r0, r0, r0
   10c00:	00000400 	andeq	r0, r0, r0, lsl #8
   10c04:	1a820100 	bne	fe09100c <_estack+0xde08c00c>
   10c08:	00000415 	andeq	r0, r0, r5, lsl r4
   10c0c:	00000000 	andeq	r0, r0, r0
   10c10:	00000008 	andeq	r0, r0, r8
   10c14:	04a9a101 	strteq	sl, [r9], #257	; 0x101
   10c18:	001b0000 	andseq	r0, fp, r0
   10c1c:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
   10c20:	00000008 	andeq	r0, r0, r8
   10c24:	0003cb19 	andeq	ip, r3, r9, lsl fp
   10c28:	00000000 	andeq	r0, r0, r0
   10c2c:	00000600 	andeq	r0, r0, r0, lsl #12
   10c30:	19b10100 	ldmibne	r1!, {r8}
   10c34:	0000041e 	andeq	r0, r0, lr, lsl r4
   10c38:	00000000 	andeq	r0, r0, r0
   10c3c:	00000004 	andeq	r0, r0, r4
   10c40:	fb1ab201 	blx	6bd44e <__ccfg+0x69d4a6>
   10c44:	00000003 	andeq	r0, r0, r3
   10c48:	0a000000 	beq	10c50 <__exidx_end+0xaf90>
   10c4c:	01000000 	mrseq	r0, (UNDEF: 0)
   10c50:	0004e1b8 			; <UNDEFINED> instruction: 0x0004e1b8
   10c54:	04081800 	streq	r1, [r8], #-2048	; 0xfffff800
   10c58:	00110000 	andseq	r0, r1, r0
   10c5c:	0003cb19 	andeq	ip, r3, r9, lsl fp
   10c60:	00000000 	andeq	r0, r0, r0
   10c64:	00000400 	andeq	r0, r0, r0, lsl #8
   10c68:	19b90100 	ldmibne	r9!, {r8}
   10c6c:	0000041e 	andeq	r0, r0, lr, lsl r4
   10c70:	00000000 	andeq	r0, r0, r0
   10c74:	00000002 	andeq	r0, r0, r2
   10c78:	cb19ba01 	blgt	67f484 <__ccfg+0x65f4dc>
   10c7c:	00000003 	andeq	r0, r0, r3
   10c80:	06000000 	streq	r0, [r0], -r0
   10c84:	01000000 	mrseq	r0, (UNDEF: 0)
   10c88:	041e19cf 	ldreq	r1, [lr], #-2511	; 0xfffff631
   10c8c:	00000000 	andeq	r0, r0, r0
   10c90:	00020000 	andeq	r0, r2, r0
   10c94:	d0010000 	andle	r0, r1, r0
   10c98:	0000001c 	andeq	r0, r0, ip, lsl r0
   10c9c:	00052e00 	andeq	r2, r5, r0, lsl #28
   10ca0:	50011d00 	andpl	r1, r1, r0, lsl #26
   10ca4:	07ff0a03 	ldrbeq	r0, [pc, r3, lsl #20]!
   10ca8:	00001c00 	andeq	r1, r0, r0, lsl #24
   10cac:	053f0000 	ldreq	r0, [pc, #-0]!	; 10cb4 <__exidx_end+0xaff4>
   10cb0:	011d0000 	tsteq	sp, r0
   10cb4:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
   10cb8:	001e0007 	andseq	r0, lr, r7
   10cbc:	ef000000 	svc	0x00000000
   10cc0:	57000008 	strpl	r0, [r0, -r8]
   10cc4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10cc8:	31015101 	tstcc	r1, r1, lsl #2
   10ccc:	0150011d 	cmpeq	r0, sp, lsl r1
   10cd0:	001e0033 	andseq	r0, lr, r3, lsr r0
   10cd4:	ef000000 	svc	0x00000000
   10cd8:	6f000008 	svcvs	0x00000008
   10cdc:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10ce0:	33015101 	movwcc	r5, #4353	; 0x1101
   10ce4:	0150011d 	cmpeq	r0, sp, lsl r1
   10ce8:	001e0034 	andseq	r0, lr, r4, lsr r0
   10cec:	05000000 	streq	r0, [r0, #-0]
   10cf0:	82000009 	andhi	r0, r0, #9
   10cf4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10cf8:	31015001 	tstcc	r1, r1
   10cfc:	00001c00 	andeq	r1, r0, r0, lsl #24
   10d00:	05910000 	ldreq	r0, [r1]
   10d04:	011d0000 	tsteq	sp, r0
   10d08:	00370150 	eorseq	r0, r7, r0, asr r1
   10d0c:	0000001c 	andeq	r0, r0, ip, lsl r0
   10d10:	0005a000 	andeq	sl, r5, r0
   10d14:	50011d00 	andpl	r1, r1, r0, lsl #26
   10d18:	1c003701 	stcne	7, cr3, [r0], {1}
   10d1c:	00000000 	andeq	r0, r0, r0
   10d20:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   10d24:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
   10d28:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
   10d2c:	00000000 	andeq	r0, r0, r0
   10d30:	000005c0 	andeq	r0, r0, r0, asr #11
   10d34:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
   10d38:	1f000076 	svcne	0x00000076
   10d3c:	00000000 	andeq	r0, r0, r0
   10d40:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
   10d44:	00000076 	andeq	r0, r0, r6, ror r0
   10d48:	003bdd20 	eorseq	sp, fp, r0, lsr #26
   10d4c:	01010a00 	tsteq	r1, r0, lsl #20
   10d50:	0000459c 	muleq	r0, ip, r5
   10d54:	00000220 	andeq	r0, r0, r0, lsr #4
   10d58:	07c89c01 	strbeq	r9, [r8, r1, lsl #24]
   10d5c:	dd210000 	stcle	0, cr0, [r1, #-0]
   10d60:	0100003c 	tsteq	r0, ip, lsr r0
   10d64:	0000ceda 	ldrdeq	ip, [r0], -sl
   10d68:	00497300 	subeq	r7, r9, r0, lsl #6
   10d6c:	3b811500 	blcc	fe056174 <_estack+0xde051174>
   10d70:	dc010000 	stcle	0, cr0, [r1], {-0}
   10d74:	000000c3 	andeq	r0, r0, r3, asr #1
   10d78:	0000499f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
   10d7c:	003cf715 	eorseq	pc, ip, r5, lsl r7	; <UNPREDICTABLE>
   10d80:	c3dd0100 	bicsgt	r0, sp, #0, 2
   10d84:	bd000000 	stclt	0, cr0, [r0, #-0]
   10d88:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
   10d8c:	00003cbd 			; <UNDEFINED> instruction: 0x00003cbd
   10d90:	00c3de01 	sbceq	sp, r3, r1, lsl #28
   10d94:	4a170000 	bmi	5d0d9c <__ccfg+0x5b0df4>
   10d98:	83150000 	tsthi	r5, #0
   10d9c:	0100003d 	tsteq	r0, sp, lsr r0
   10da0:	0000c3df 	ldrdeq	ip, [r0], -pc	; <UNPREDICTABLE>
   10da4:	004a3500 	subeq	r3, sl, r0, lsl #10
   10da8:	3b731500 	blcc	1cd61b0 <__ccfg+0x1cb6208>
   10dac:	e0010000 	and	r0, r1, r0
   10db0:	000000c3 	andeq	r0, r0, r3, asr #1
   10db4:	00004a53 	andeq	r4, r0, r3, asr sl
   10db8:	003b8922 	eorseq	r8, fp, r2, lsr #18
   10dbc:	c3e10100 	mvngt	r0, #0, 2
   10dc0:	01000000 	mrseq	r0, (UNDEF: 0)
   10dc4:	362b1553 			; <UNDEFINED> instruction: 0x362b1553
   10dc8:	e2010000 	and	r0, r1, #0
   10dcc:	000000ce 	andeq	r0, r0, lr, asr #1
   10dd0:	00004a66 	andeq	r4, r0, r6, ror #20
   10dd4:	003d1b15 	eorseq	r1, sp, r5, lsl fp
   10dd8:	cee30100 	cdpgt	1, 14, cr0, cr3, cr0, {0}
   10ddc:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
   10de0:	1500004a 	strne	r0, [r0, #-74]	; 0xffffffb6
   10de4:	00003b9d 	muleq	r0, sp, fp
   10de8:	00cee401 	sbceq	lr, lr, r1, lsl #8
   10dec:	4a980000 	bmi	fe610df4 <_estack+0xde60bdf4>
   10df0:	64230000 	strtvs	r0, [r3], #-0
   10df4:	e5010069 	str	r0, [r1, #-105]	; 0xffffff97
   10df8:	000000ce 	andeq	r0, r0, lr, asr #1
   10dfc:	00004aab 	andeq	r4, r0, fp, lsr #21
   10e00:	69696423 	stmdbvs	r9!, {r0, r1, r5, sl, sp, lr}^
   10e04:	cee60100 	cdpgt	1, 14, cr0, cr6, cr0, {0}
   10e08:	e1000000 	mrs	r0, (UNDEF: 0)
   10e0c:	2300004a 	movwcs	r0, #74	; 0x4a
   10e10:	01006974 	tsteq	r0, r4, ror r9
   10e14:	0000cee7 	andeq	ip, r0, r7, ror #29
   10e18:	004b1700 	subeq	r1, fp, r0, lsl #14
   10e1c:	64632300 	strbtvs	r2, [r3], #-768	; 0xfffffd00
   10e20:	cee80100 	cdpgt	1, 14, cr0, cr8, cr0, {0}
   10e24:	87000000 	strhi	r0, [r0, -r0]
   10e28:	2300004b 	movwcs	r0, #75	; 0x4b
   10e2c:	01006c63 	tsteq	r0, r3, ror #24
   10e30:	0000cee9 	andeq	ip, r0, r9, ror #29
   10e34:	004b9a00 	subeq	r9, fp, r0, lsl #20
   10e38:	3bae1500 	blcc	feb96240 <_estack+0xdeb91240>
   10e3c:	ea010000 	b	50e44 <__ccfg+0x30e9c>
   10e40:	000000ce 	andeq	r0, r0, lr, asr #1
   10e44:	00004bad 	andeq	r4, r0, sp, lsr #23
   10e48:	01006b24 	tsteq	r0, r4, lsr #22
   10e4c:	0000ceeb 	andeq	ip, r0, fp, ror #29
   10e50:	3c8f1300 	stccc	3, cr1, [pc], {0}
   10e54:	ec010000 	stc	0, cr0, [r1], {-0}
   10e58:	000000ce 	andeq	r0, r0, lr, asr #1
   10e5c:	003c7d15 	eorseq	r7, ip, r5, lsl sp
   10e60:	ceed0100 	cdpgt	1, 14, cr0, cr13, cr0, {0}
   10e64:	cb000000 	blgt	10e6c <__exidx_end+0xb1ac>
   10e68:	1500004b 	strne	r0, [r0, #-75]	; 0xffffffb5
   10e6c:	00003c4d 	andeq	r3, r0, sp, asr #24
   10e70:	00ceee01 	sbceq	lr, lr, r1, lsl #28
   10e74:	4bf40000 	blmi	ffd10e7c <_estack+0xdfd0be7c>
   10e78:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
   10e7c:	0100003c 	tsteq	r0, ip, lsr r0
   10e80:	0000ceef 	andeq	ip, r0, pc, ror #29
   10e84:	004c1300 	subeq	r1, ip, r0, lsl #6
   10e88:	3d581500 	cfldr64cc	mvdx1, [r8, #-0]
   10e8c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
   10e90:	000007c8 	andeq	r0, r0, r8, asr #15
   10e94:	00004c57 	andeq	r4, r0, r7, asr ip
   10e98:	0045ca25 	subeq	ip, r5, r5, lsr #20
   10e9c:	00001200 	andeq	r1, r0, r0, lsl #4
   10ea0:	00073b00 	andeq	r3, r7, r0, lsl #22
   10ea4:	3d032600 	stccc	6, cr2, [r3, #-0]
   10ea8:	0a010000 	beq	50eb0 <__ccfg+0x30f08>
   10eac:	0000c301 	andeq	ip, r0, r1, lsl #6
   10eb0:	004c6f00 	subeq	r6, ip, r0, lsl #30
   10eb4:	d4270000 	strtle	r0, [r7], #-0
   10eb8:	f0000003 			; <UNDEFINED> instruction: 0xf0000003
   10ebc:	06000045 	streq	r0, [r0], -r5, asr #32
   10ec0:	01000000 	mrseq	r0, (UNDEF: 0)
   10ec4:	07680111 			; <UNDEFINED> instruction: 0x07680111
   10ec8:	e4280000 	strt	r0, [r8], #-0
   10ecc:	29000003 	stmdbcs	r0, {r0, r1}
   10ed0:	000045f0 	strdeq	r4, [r0], -r0
   10ed4:	00000006 	andeq	r0, r0, r6
   10ed8:	0003ef2a 	andeq	lr, r3, sl, lsr #30
   10edc:	004c8200 	subeq	r8, ip, r0, lsl #4
   10ee0:	27000000 	strcs	r0, [r0, -r0]
   10ee4:	000003d4 	ldrdeq	r0, [r0], -r4
   10ee8:	00004608 	andeq	r4, r0, r8, lsl #12
   10eec:	00000006 	andeq	r0, r0, r6
   10ef0:	95011b01 	strls	r1, [r1, #-2817]	; 0xfffff4ff
   10ef4:	28000007 	stmdacs	r0, {r0, r1, r2}
   10ef8:	000003e4 	andeq	r0, r0, r4, ror #7
   10efc:	00460829 	subeq	r0, r6, r9, lsr #16
   10f00:	00000600 	andeq	r0, r0, r0, lsl #12
   10f04:	03ef2a00 	mvneq	r2, #0, 20
   10f08:	4c950000 	ldcmi	0, cr0, [r5], {0}
   10f0c:	00000000 	andeq	r0, r0, r0
   10f10:	0003d42b 	andeq	sp, r3, fp, lsr #8
   10f14:	00461200 	subeq	r1, r6, r0, lsl #4
   10f18:	0012f800 	andseq	pc, r2, r0, lsl #16
   10f1c:	011f0100 	tsteq	pc, r0, lsl #2
   10f20:	000007be 			; <UNDEFINED> instruction: 0x000007be
   10f24:	0003e428 	andeq	lr, r3, r8, lsr #8
   10f28:	12f82c00 	rscsne	r2, r8, #0, 24
   10f2c:	ef2a0000 	svc	0x002a0000
   10f30:	a8000003 	stmdage	r0, {r0, r1}
   10f34:	0000004c 	andeq	r0, r0, ip, asr #32
   10f38:	45bc1b00 	ldrmi	r1, [ip, #2816]!	; 0xb00
   10f3c:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
   10f40:	05000000 	streq	r0, [r0, #-0]
   10f44:	0007ce04 	andeq	ip, r7, r4, lsl #28
   10f48:	00ce2d00 	sbceq	r2, lr, r0, lsl #26
   10f4c:	b3200000 	noplt	{0}	; <UNPREDICTABLE>
   10f50:	0a00003b 	beq	11044 <__exidx_end+0xb384>
   10f54:	47bc0117 			; <UNDEFINED> instruction: 0x47bc0117
   10f58:	00600000 	rsbeq	r0, r0, r0
   10f5c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10f60:	00000833 	andeq	r0, r0, r3, lsr r8
   10f64:	003b8126 	eorseq	r8, fp, r6, lsr #2
   10f68:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
   10f6c:	000000c3 	andeq	r0, r0, r3, asr #1
   10f70:	00004cbb 			; <UNDEFINED> instruction: 0x00004cbb
   10f74:	003ca726 	eorseq	sl, ip, r6, lsr #14
   10f78:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
   10f7c:	000000ce 	andeq	r0, r0, lr, asr #1
   10f80:	00004ce6 	andeq	r4, r0, r6, ror #25
   10f84:	002f4026 	eoreq	r4, pc, r6, lsr #32
   10f88:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
   10f8c:	000000ce 	andeq	r0, r0, lr, asr #1
   10f90:	00004cf9 	strdeq	r4, [r0], -r9
   10f94:	003c7d26 	eorseq	r7, ip, r6, lsr #26
   10f98:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
   10f9c:	000000ce 	andeq	r0, r0, lr, asr #1
   10fa0:	00004d20 	andeq	r4, r0, r0, lsr #26
   10fa4:	0047ca1b 	subeq	ip, r7, fp, lsl sl
   10fa8:	00091b00 	andeq	r1, r9, r0, lsl #22
   10fac:	a4200000 	strtge	r0, [r0], #-0
   10fb0:	0a00003d 	beq	110ac <__exidx_end+0xb3ec>
   10fb4:	00000129 	andeq	r0, r0, r9, lsr #2
   10fb8:	00780000 	rsbseq	r0, r8, r0
   10fbc:	9c010000 	stcls	0, cr0, [r1], {-0}
   10fc0:	0000088a 	andeq	r0, r0, sl, lsl #17
   10fc4:	003cd026 	eorseq	sp, ip, r6, lsr #32
   10fc8:	01e70100 	mvneq	r0, r0, lsl #2
   10fcc:	000000ce 	andeq	r0, r0, lr, asr #1
   10fd0:	00004d49 	andeq	r4, r0, r9, asr #26
   10fd4:	003d7626 	eorseq	r7, sp, r6, lsr #12
   10fd8:	01e80100 	mvneq	r0, r0, lsl #2
   10fdc:	000000ce 	andeq	r0, r0, lr, asr #1
   10fe0:	00004d5c 	andeq	r4, r0, ip, asr sp
   10fe4:	00362b26 	eorseq	r2, r6, r6, lsr #22
   10fe8:	01e90100 	mvneq	r0, r0, lsl #2
   10fec:	000000ce 	andeq	r0, r0, lr, asr #1
   10ff0:	00004d6f 	andeq	r4, r0, pc, ror #26
   10ff4:	003d2426 	eorseq	r2, sp, r6, lsr #8
   10ff8:	01ea0100 	mvneq	r0, r0, lsl #2
   10ffc:	000000ce 	andeq	r0, r0, lr, asr #1
   11000:	00004d82 	andeq	r4, r0, r2, lsl #27
   11004:	3c252e00 	stccc	14, cr2, [r5], #-0
   11008:	420a0000 	andmi	r0, sl, #0
   1100c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   11010:	00481c00 	subeq	r1, r8, r0, lsl #24
   11014:	00001800 	andeq	r1, r0, r0, lsl #16
   11018:	229c0100 	addscs	r0, ip, #0, 2
   1101c:	00003dd1 	ldrdeq	r3, [r0], -r1
   11020:	03995501 	orrseq	r5, r9, #4194304	; 0x400000
   11024:	03050000 	movweq	r0, #20480	; 0x5000
   11028:	20000624 	andcs	r0, r0, r4, lsr #12
   1102c:	0000ce2f 	andeq	ip, r0, pc, lsr #28
   11030:	0008c100 	andeq	ip, r8, r0, lsl #2
   11034:	08c13000 	stmiaeq	r1, {ip, sp}^
   11038:	000c0000 	andeq	r0, ip, r0
   1103c:	b3070403 	movwlt	r0, #29699	; 0x7403
   11040:	2200002c 	andcs	r0, r0, #44	; 0x2c
   11044:	00003d0b 	andeq	r3, r0, fp, lsl #26
   11048:	08d96101 	ldmeq	r9, {r0, r8, sp, lr}^
   1104c:	03050000 	movweq	r0, #20480	; 0x5000
   11050:	00000000 	andeq	r0, r0, r0
   11054:	0008b12d 	andeq	fp, r8, sp, lsr #2
   11058:	2a0d3100 	bcs	35d460 <__ccfg+0x33d4b8>
   1105c:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
   11060:	000008ef 	andeq	r0, r0, pc, ror #17
   11064:	0000d908 	andeq	sp, r0, r8, lsl #18
   11068:	1d310000 	ldcne	0, cr0, [r1, #-0]
   1106c:	0300002d 	movweq	r0, #45	; 0x2d
   11070:	000905f9 	strdeq	r0, [r9], -r9
   11074:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   11078:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   1107c:	00000000 	andeq	r0, r0, r0
   11080:	002d5632 	eoreq	r5, sp, r2, lsr r6
   11084:	01100300 	tsteq	r0, r0, lsl #6
   11088:	000000ce 	andeq	r0, r0, lr, asr #1
   1108c:	0000091b 	andeq	r0, r0, fp, lsl r9
   11090:	0000ce08 	andeq	ip, r0, r8, lsl #28
   11094:	70330000 	eorsvc	r0, r3, r0
   11098:	0b00002b 	bleq	1114c <__exidx_end+0xb48c>
   1109c:	0000c3aa 	andeq	ip, r0, sl, lsr #7
   110a0:	03cc0000 	biceq	r0, ip, #0
   110a4:	00040000 	andeq	r0, r4, r0
   110a8:	00003e6a 	andeq	r3, r0, sl, ror #28
   110ac:	2a3f0104 	bcs	fd14c4 <__ccfg+0xfb151c>
   110b0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
   110b4:	06000040 	streq	r0, [r0], -r0, asr #32
   110b8:	7000002b 	andvc	r0, r0, fp, lsr #32
   110bc:	00000013 	andeq	r0, r0, r3, lsl r0
   110c0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
   110c4:	0200008a 	andeq	r0, r0, #138	; 0x8a
   110c8:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
   110cc:	01020000 	mrseq	r0, (UNDEF: 2)
   110d0:	000c5b08 	andeq	r5, ip, r8, lsl #22
   110d4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   110d8:	00000a6b 	andeq	r0, r0, fp, ror #20
   110dc:	66070202 	strvs	r0, [r7], -r2, lsl #4
   110e0:	0200000d 	andeq	r0, r0, #13
   110e4:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
   110e8:	b2030000 	andlt	r0, r3, #0
   110ec:	03000029 	movweq	r0, #41	; 0x29
   110f0:	00005341 	andeq	r5, r0, r1, asr #6
   110f4:	07040200 	streq	r0, [r4, -r0, lsl #4]
   110f8:	00000426 	andeq	r0, r0, r6, lsr #8
   110fc:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
   11100:	02000007 	andeq	r0, r0, #7
   11104:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
   11108:	04040000 	streq	r0, [r4], #-0
   1110c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   11110:	07040200 	streq	r0, [r4, -r0, lsl #4]
   11114:	0000042b 	andeq	r0, r0, fp, lsr #8
   11118:	0029b403 	eoreq	fp, r9, r3, lsl #8
   1111c:	48200400 	stmdami	r0!, {sl}
   11120:	05000000 	streq	r0, [r0, #-0]
   11124:	a2630201 	rsbge	r0, r3, #268435456	; 0x10000000
   11128:	06000000 	streq	r0, [r0], -r0
   1112c:	00003ff2 	strdeq	r3, [r0], -r2
   11130:	40320600 	eorsmi	r0, r2, r0, lsl #12
   11134:	06020000 	streq	r0, [r2], -r0
   11138:	00003fa2 	andeq	r3, r0, r2, lsr #31
   1113c:	3de20604 	stclcc	6, cr0, [r2, #16]!
   11140:	00080000 	andeq	r0, r8, r0
   11144:	003f8e03 	eorseq	r8, pc, r3, lsl #28
   11148:	81680200 	cmnhi	r8, r0, lsl #4
   1114c:	05000000 	streq	r0, [r0, #-0]
   11150:	daa50201 	ble	fe95195c <_estack+0xde94c95c>
   11154:	06000000 	streq	r0, [r0], -r0
   11158:	000040a8 	andeq	r4, r0, r8, lsr #1
   1115c:	3dfa067f 	ldclcc	6, cr0, [sl, #508]!	; 0x1fc
   11160:	06000000 	streq	r0, [r0], -r0
   11164:	00004159 	andeq	r4, r0, r9, asr r1
   11168:	3fe60601 	svccc	0x00e60601
   1116c:	06020000 	streq	r0, [r2], -r0
   11170:	0000414b 	andeq	r4, r0, fp, asr #2
   11174:	3edf0603 	cdpcc	6, 13, cr0, cr15, cr3, {0}
   11178:	00040000 	andeq	r0, r4, r0
   1117c:	00416503 	subeq	r6, r1, r3, lsl #10
   11180:	adac0200 	sfmge	f0, 4, [ip]
   11184:	07000000 	streq	r0, [r0, -r0]
   11188:	013d0201 	teqeq	sp, r1, lsl #4
   1118c:	00000125 	andeq	r0, r0, r5, lsr #2
   11190:	003fbc06 	eorseq	fp, pc, r6, lsl #24
   11194:	aa067f00 	bge	1b0d9c <__ccfg+0x190df4>
   11198:	0000003e 	andeq	r0, r0, lr, lsr r0
   1119c:	003f0606 	eorseq	r0, pc, r6, lsl #12
   111a0:	42060100 	andmi	r0, r6, #0, 2
   111a4:	0200003f 	andeq	r0, r0, #63	; 0x3f
   111a8:	00408d06 	subeq	r8, r0, r6, lsl #26
   111ac:	06060300 	streq	r0, [r6], -r0, lsl #6
   111b0:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   111b4:	003ece06 	eorseq	ip, lr, r6, lsl #28
   111b8:	67060500 	strvs	r0, [r6, -r0, lsl #10]
   111bc:	06000040 	streq	r0, [r0], -r0, asr #32
   111c0:	00407a06 	subeq	r7, r0, r6, lsl #20
   111c4:	08000700 	stmdaeq	r0, {r8, r9, sl}
   111c8:	00003e92 	muleq	r0, r2, lr
   111cc:	e5014702 	str	r4, [r1, #-1794]	; 0xfffff8fe
   111d0:	07000000 	streq	r0, [r0, -r0]
   111d4:	01590201 	cmpeq	r9, r1, lsl #4
   111d8:	0000015f 	andeq	r0, r0, pc, asr r1
   111dc:	003f3306 	eorseq	r3, pc, r6, lsl #6
   111e0:	5c067f00 	stcpl	15, cr7, [r6], {-0}
   111e4:	0000003f 	andeq	r0, r0, pc, lsr r0
   111e8:	003fd806 	eorseq	sp, pc, r6, lsl #16
   111ec:	1f060100 	svcne	0x00060100
   111f0:	0200003e 	andeq	r0, r0, #62	; 0x3e
   111f4:	00404206 	subeq	r4, r0, r6, lsl #4
   111f8:	f5060300 			; <UNDEFINED> instruction: 0xf5060300
   111fc:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   11200:	3ebb0800 	cdpcc	8, 11, cr0, cr11, cr0, {0}
   11204:	60020000 	andvs	r0, r2, r0
   11208:	00013101 	andeq	r3, r1, r1, lsl #2
   1120c:	02010700 	andeq	r0, r1, #0, 14
   11210:	019901b8 			; <UNDEFINED> instruction: 0x019901b8
   11214:	72060000 	andvc	r0, r6, #0
   11218:	7f00003f 	svcvc	0x0000003f
   1121c:	00409e06 	subeq	r9, r0, r6, lsl #28
   11220:	03060a00 	movweq	r0, #27136	; 0x6a00
   11224:	14000040 	strne	r0, [r0], #-64	; 0xffffffc0
   11228:	00402806 	subeq	r2, r0, r6, lsl #16
   1122c:	ce061500 	cfsh32gt	mvfx1, mvfx6, #0
   11230:	1600003f 			; <UNDEFINED> instruction: 0x1600003f
   11234:	00405406 	subeq	r5, r0, r6, lsl #8
   11238:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
   1123c:	00003e9d 	muleq	r0, sp, lr
   11240:	6b01bf02 	blvs	80e50 <__ccfg+0x60ea8>
   11244:	09000001 	stmdbeq	r0, {r0}
   11248:	000040e4 	andeq	r4, r0, r4, ror #1
   1124c:	76010702 	strvc	r0, [r1], -r2, lsl #14
   11250:	03000000 	movweq	r0, #0
   11254:	003e310a 	eorseq	r3, lr, sl, lsl #2
   11258:	016a0200 	cmneq	sl, r0, lsl #4
   1125c:	0000015f 	andeq	r0, r0, pc, asr r1
   11260:	0001da01 	andeq	sp, r1, r1, lsl #20
   11264:	3f6a0b00 	svccc	0x006a0b00
   11268:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
   1126c:	0000015f 	andeq	r0, r0, pc, asr r1
   11270:	003e170b 	eorseq	r1, lr, fp, lsl #14
   11274:	76690100 	strbtvc	r0, [r9], -r0, lsl #2
   11278:	00000000 	andeq	r0, r0, r0
   1127c:	00419209 	subeq	r9, r1, r9, lsl #4
   11280:	01320200 	teqeq	r2, r0, lsl #4
   11284:	00000076 	andeq	r0, r0, r6, ror r0
   11288:	41240c03 			; <UNDEFINED> instruction: 0x41240c03
   1128c:	72020000 	andvc	r0, r2, #0
   11290:	000000a2 	andeq	r0, r0, r2, lsr #1
   11294:	00000000 	andeq	r0, r0, r0
   11298:	00000010 	andeq	r0, r0, r0, lsl r0
   1129c:	4e0d9c01 	cdpmi	12, 0, cr9, cr13, cr1, {0}
   112a0:	0200003e 	andeq	r0, r0, #62	; 0x3e
   112a4:	0000dab6 			; <UNDEFINED> instruction: 0x0000dab6
   112a8:	00000000 	andeq	r0, r0, r0
   112ac:	00001800 	andeq	r1, r0, r0, lsl #16
   112b0:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
   112b4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
   112b8:	00003e89 	andeq	r3, r0, r9, lsl #29
   112bc:	00da5201 	sbcseq	r5, sl, r1, lsl #4
   112c0:	4d950000 	ldcmi	0, cr0, [r5]
   112c4:	0f000000 	svceq	0x00000000
   112c8:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   112cc:	00004834 	andeq	r4, r0, r4, lsr r8
   112d0:	0000004c 	andeq	r0, r0, ip, asr #32
   112d4:	026e9c01 	rsbeq	r9, lr, #256	; 0x100
   112d8:	c3100000 	tstgt	r0, #0
   112dc:	bd000001 	stclt	0, cr0, [r0, #-4]
   112e0:	1000004d 	andne	r0, r0, sp, asr #32
   112e4:	000001ce 	andeq	r0, r0, lr, asr #3
   112e8:	00004ddd 	ldrdeq	r4, [r0], -sp
   112ec:	00484411 	subeq	r4, r8, r1, lsl r4
   112f0:	00000e00 	andeq	r0, r0, r0, lsl #28
   112f4:	01c31200 	biceq	r1, r3, r0, lsl #4
   112f8:	ce120000 	cdpgt	0, 1, cr0, cr2, cr0, {0}
   112fc:	13000001 	movwne	r0, #1
   11300:	000001a5 	andeq	r0, r0, r5, lsr #3
   11304:	00004844 	andeq	r4, r0, r4, asr #16
   11308:	00000004 	andeq	r0, r0, r4
   1130c:	00007001 	andeq	r7, r0, r1
   11310:	00400d14 	subeq	r0, r0, r4, lsl sp
   11314:	01510200 	cmpeq	r1, r0, lsl #4
   11318:	00000125 	andeq	r0, r0, r5, lsr #2
   1131c:	00000000 	andeq	r0, r0, r0
   11320:	00000030 	andeq	r0, r0, r0, lsr r0
   11324:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
   11328:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
   1132c:	01000040 	tsteq	r0, r0, asr #32
   11330:	00012585 	andeq	r2, r1, r5, lsl #11
   11334:	004e1100 	subeq	r1, lr, r0, lsl #2
   11338:	40d80b00 	sbcsmi	r0, r8, r0, lsl #22
   1133c:	86010000 	strhi	r0, [r1], -r0
   11340:	00000076 	andeq	r0, r0, r6, ror r0
   11344:	003f800e 	eorseq	r8, pc, lr
   11348:	76870100 	strvc	r0, [r7], r0, lsl #2
   1134c:	31000000 	mrscc	r0, (UNDEF: 0)
   11350:	1300004e 	movwne	r0, #78	; 0x4e
   11354:	000001da 	ldrdeq	r0, [r0], -sl
   11358:	00000000 	andeq	r0, r0, r0
   1135c:	00000004 	andeq	r0, r0, r4
   11360:	00158601 	andseq	r8, r5, r1, lsl #12
   11364:	b2000000 	andlt	r0, r0, #0
   11368:	00000001 	andeq	r0, r0, r1
   1136c:	00410216 	subeq	r0, r1, r6, lsl r2
   11370:	01190200 	tsteq	r9, r0, lsl #4
   11374:	00000076 	andeq	r0, r0, r6, ror r0
   11378:	0002e803 	andeq	lr, r2, r3, lsl #16
   1137c:	3eec1700 	cdpcc	7, 14, cr1, cr12, cr0, {0}
   11380:	1b020000 	blne	91388 <__ccfg+0x713e0>
   11384:	00007601 	andeq	r7, r0, r1, lsl #12
   11388:	6c140000 	ldcvs	0, cr0, [r4], {-0}
   1138c:	0200003e 	andeq	r0, r0, #62	; 0x3e
   11390:	019901c9 	orrseq	r0, r9, r9, asr #3
   11394:	48800000 	stmmi	r0, {}	; <UNPREDICTABLE>
   11398:	006c0000 	rsbeq	r0, ip, r0
   1139c:	9c010000 	stcls	0, cr0, [r1], {-0}
   113a0:	00000365 	andeq	r0, r0, r5, ror #6
   113a4:	003ec80e 	eorseq	ip, lr, lr, lsl #16
   113a8:	99a80100 	stmibls	r8!, {r8}
   113ac:	44000001 	strmi	r0, [r0], #-1
   113b0:	0b00004e 	bleq	114f0 <__exidx_end+0xb830>
   113b4:	00003f53 	andeq	r3, r0, r3, asr pc
   113b8:	0076a901 	rsbseq	sl, r6, r1, lsl #18
   113bc:	19180000 	ldmdbne	r8, {}	; <UNPREDICTABLE>
   113c0:	01000041 	tsteq	r0, r1, asr #32
   113c4:	000076aa 	andeq	r7, r0, sl, lsr #13
   113c8:	19540100 	ldmdbne	r4, {r8}^
   113cc:	000001a5 	andeq	r0, r0, r5, lsr #3
   113d0:	00004882 	andeq	r4, r0, r2, lsl #17
   113d4:	00001340 	andeq	r1, r0, r0, asr #6
   113d8:	ca1aa901 	bgt	6bb7e4 <__ccfg+0x69b83c>
   113dc:	86000002 	strhi	r0, [r0], -r2
   113e0:	58000048 	stmdapl	r0, {r3, r6}
   113e4:	01000013 	tsteq	r0, r3, lsl r0
   113e8:	00035baa 	andeq	r5, r3, sl, lsr #23
   113ec:	13581b00 	cmpne	r8, #0, 22
   113f0:	db100000 	blle	4113f8 <__ccfg+0x3f1450>
   113f4:	a1000002 	tstge	r0, r2
   113f8:	0000004e 	andeq	r0, r0, lr, asr #32
   113fc:	489a1500 	ldmmi	sl, {r8, sl, ip}
   11400:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
   11404:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   11408:	00003f17 	andeq	r3, r0, r7, lsl pc
   1140c:	72018302 	andvc	r8, r1, #134217728	; 0x8000000
   11410:	03000003 	movweq	r0, #3
   11414:	a7020102 	strge	r0, [r2, -r2, lsl #2]
   11418:	0900000c 	stmdbeq	r0, {r2, r3}
   1141c:	00004173 	andeq	r4, r0, r3, ror r1
   11420:	7201f002 	andvc	pc, r1, #2
   11424:	03000003 	movweq	r0, #3
   11428:	0036741c 	eorseq	r7, r6, ip, lsl r4
   1142c:	02430200 	subeq	r0, r3, #0, 4
   11430:	000048ec 	andeq	r4, r0, ip, ror #17
   11434:	00000016 	andeq	r0, r0, r6, lsl r0
   11438:	651d9c01 	ldrvs	r9, [sp, #-3073]	; 0xfffff3ff
   1143c:	ee000003 	cdp	0, 0, cr0, cr0, cr3, {0}
   11440:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
   11444:	01000000 	mrseq	r0, (UNDEF: 0)
   11448:	0003b5e2 	andeq	fp, r3, r2, ror #11
   1144c:	48f21500 	ldmmi	r2!, {r8, sl, ip}^
   11450:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
   11454:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   11458:	00000379 	andeq	r0, r0, r9, ror r3
   1145c:	000048f6 	strdeq	r4, [r0], -r6
   11460:	00000004 	andeq	r0, r0, r4
   11464:	fa15e301 	blx	58a070 <__ccfg+0x56a0c8>
   11468:	e8000048 	stmda	r0, {r3, r6}
   1146c:	00000002 	andeq	r0, r0, r2
   11470:	05a70000 	streq	r0, [r7, #0]!
   11474:	00040000 	andeq	r0, r4, r0
   11478:	00004038 	andeq	r4, r0, r8, lsr r0
   1147c:	2a3f0104 	bcs	fd1894 <__ccfg+0xfb18ec>
   11480:	6a010000 	bvs	51488 <__ccfg+0x314e0>
   11484:	06000042 	streq	r0, [r0], -r2, asr #32
   11488:	a800002b 	stmdage	r0, {r0, r1, r3, r5}
   1148c:	00000013 	andeq	r0, r0, r3, lsl r0
   11490:	6d000000 	stcvs	0, cr0, [r0, #-0]
   11494:	0200008c 	andeq	r0, r0, #140	; 0x8c
   11498:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
   1149c:	1a030000 	bne	d14a4 <__ccfg+0xb14fc>
   114a0:	0300002a 	movweq	r0, #42	; 0x2a
   114a4:	0000371d 	andeq	r3, r0, sp, lsl r7
   114a8:	08010200 	stmdaeq	r1, {r9}
   114ac:	00000c5b 	andeq	r0, r0, fp, asr ip
   114b0:	6b050202 	blvs	151cc0 <__ccfg+0x131d18>
   114b4:	0300000a 	movweq	r0, #10
   114b8:	00002e10 	andeq	r2, r0, r0, lsl lr
   114bc:	00502b03 	subseq	r2, r0, r3, lsl #22
   114c0:	02020000 	andeq	r0, r2, #0
   114c4:	000d6607 	andeq	r6, sp, r7, lsl #12
   114c8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   114cc:	000007fd 	strdeq	r0, [r0], -sp
   114d0:	0029b203 	eoreq	fp, r9, r3, lsl #4
   114d4:	69410300 	stmdbvs	r1, {r8, r9}^
   114d8:	02000000 	andeq	r0, r0, #0
   114dc:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
   114e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   114e4:	0007f805 	andeq	pc, r7, r5, lsl #16
   114e8:	07080200 	streq	r0, [r8, -r0, lsl #4]
   114ec:	00000421 	andeq	r0, r0, r1, lsr #8
   114f0:	69050404 	stmdbvs	r5, {r2, sl}
   114f4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   114f8:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
   114fc:	1c030000 	stcne	0, cr0, [r3], {-0}
   11500:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
   11504:	00002c14 	andeq	r2, r0, r4, lsl ip
   11508:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
   1150c:	1a040000 	bne	111514 <__ccfg+0xf156c>
   11510:	00000045 	andeq	r0, r0, r5, asr #32
   11514:	0029b403 	eoreq	fp, r9, r3, lsl #8
   11518:	5e200400 	cdppl	4, 2, cr0, cr0, cr0, {0}
   1151c:	05000000 	streq	r0, [r0, #-0]
   11520:	000041e3 	andeq	r4, r0, r3, ror #3
   11524:	e6038901 	str	r8, [r3], -r1, lsl #18
   11528:	06000000 	streq	r0, [r0], -r0
   1152c:	000041c5 	andeq	r4, r0, r5, asr #3
   11530:	00a28901 	adceq	r8, r2, r1, lsl #18
   11534:	36060000 	strcc	r0, [r6], -r0
   11538:	01000042 	tsteq	r0, r2, asr #32
   1153c:	0000a289 	andeq	sl, r0, r9, lsl #5
   11540:	42910600 	addsmi	r0, r1, #0, 12
   11544:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
   11548:	000000a2 	andeq	r0, r0, r2, lsr #1
   1154c:	0029bd07 	eoreq	fp, r9, r7, lsl #26
   11550:	e68c0100 	str	r0, [ip], r0, lsl #2
   11554:	00000000 	andeq	r0, r0, r0
   11558:	a7020102 	strge	r0, [r2, -r2, lsl #2]
   1155c:	0800000c 	stmdaeq	r0, {r2, r3}
   11560:	00004244 	andeq	r4, r0, r4, asr #4
   11564:	00a2a901 	adceq	sl, r2, r1, lsl #18
   11568:	2a030000 	bcs	d1570 <__ccfg+0xb15c8>
   1156c:	06000001 	streq	r0, [r0], -r1
   11570:	000041c5 	andeq	r4, r0, r5, asr #3
   11574:	00a2a901 	adceq	sl, r2, r1, lsl #18
   11578:	91060000 	mrsls	r0, (UNDEF: 6)
   1157c:	01000042 	tsteq	r0, r2, asr #32
   11580:	0000a2a9 	andeq	sl, r0, r9, lsr #5
   11584:	41de0700 	bicsmi	r0, lr, r0, lsl #14
   11588:	ab010000 	blge	51590 <__ccfg+0x315e8>
   1158c:	000000a2 	andeq	r0, r0, r2, lsr #1
   11590:	0029bd07 	eoreq	fp, r9, r7, lsl #26
   11594:	e6ad0100 	strt	r0, [sp], r0, lsl #2
   11598:	00000000 	andeq	r0, r0, r0
   1159c:	0000ad09 	andeq	sl, r0, r9, lsl #26
   115a0:	00490400 	subeq	r0, r9, r0, lsl #8
   115a4:	00002800 	andeq	r2, r0, r0, lsl #16
   115a8:	719c0100 	orrsvc	r0, ip, r0, lsl #2
   115ac:	0a000001 	beq	115b8 <__exidx_end+0xb8f8>
   115b0:	000000b9 	strheq	r0, [r0], -r9
   115b4:	00004eb4 			; <UNDEFINED> instruction: 0x00004eb4
   115b8:	0000c40a 	andeq	ip, r0, sl, lsl #8
   115bc:	004ef900 	subeq	pc, lr, r0, lsl #18
   115c0:	00da0b00 	sbcseq	r0, sl, r0, lsl #22
   115c4:	4f3e0000 	svcmi	0x003e0000
   115c8:	cf0c0000 	svcgt	0x000c0000
   115cc:	04000000 	streq	r0, [r0], #-0
   115d0:	00490e0d 	subeq	r0, r9, sp, lsl #28
   115d4:	00059400 	andeq	r9, r5, r0, lsl #8
   115d8:	49260e00 	stmdbmi	r6!, {r9, sl, fp}
   115dc:	059f0000 	ldreq	r0, [pc]	; 115e4 <__exidx_end+0xb924>
   115e0:	0f000000 	svceq	0x00000000
   115e4:	0000388e 	andeq	r3, r0, lr, lsl #17
   115e8:	2c01ca01 			; <UNDEFINED> instruction: 0x2c01ca01
   115ec:	08000049 	stmdaeq	r0, {r0, r3, r6}
   115f0:	01000000 	mrseq	r0, (UNDEF: 0)
   115f4:	0001d19c 	muleq	r1, ip, r1
   115f8:	11ba1000 			; <UNDEFINED> instruction: 0x11ba1000
   115fc:	42020000 	andmi	r0, r2, #0
   11600:	000000a2 	andeq	r0, r0, r2, lsr #1
   11604:	00004f64 	andeq	r4, r0, r4, ror #30
   11608:	0041a510 	subeq	sl, r1, r0, lsl r5
   1160c:	a2420200 	subge	r0, r2, #0, 4
   11610:	85000000 	strhi	r0, [r0, #-0]
   11614:	1000004f 	andne	r0, r0, pc, asr #32
   11618:	0000423c 	andeq	r4, r0, ip, lsr r2
   1161c:	00a24302 	adceq	r4, r2, r2, lsl #6
   11620:	4fa60000 	svcmi	0x00a60000
   11624:	34110000 	ldrcc	r0, [r1], #-0
   11628:	2a000049 	bcs	11754 <__exidx_end+0xba94>
   1162c:	12000001 	andne	r0, r0, #1
   11630:	f3035101 	vrhadd.u8	d5, d3, d1
   11634:	01125201 	tsteq	r2, r1, lsl #4
   11638:	01f30750 	mvnseq	r0, r0, asr r7
   1163c:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
   11640:	0f000022 	svceq	0x00000022
   11644:	00004256 	andeq	r4, r0, r6, asr r2
   11648:	0001df01 	andeq	sp, r1, r1, lsl #30
   1164c:	22000000 	andcs	r0, r0, #0
   11650:	01000000 	mrseq	r0, (UNDEF: 0)
   11654:	0002ea9c 	muleq	r2, ip, sl
   11658:	11ba1000 			; <UNDEFINED> instruction: 0x11ba1000
   1165c:	57020000 	strpl	r0, [r2, -r0]
   11660:	000000a2 	andeq	r0, r0, r2, lsr #1
   11664:	00004fc7 	andeq	r4, r0, r7, asr #31
   11668:	0041a510 	subeq	sl, r1, r0, lsl r5
   1166c:	a2570200 	subsge	r0, r7, #0, 4
   11670:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   11674:	1000004f 	andne	r0, r0, pc, asr #32
   11678:	00002243 	andeq	r2, r0, r3, asr #4
   1167c:	00a25802 	adceq	r5, r2, r2, lsl #16
   11680:	50090000 	andpl	r0, r9, r0
   11684:	ff100000 			; <UNDEFINED> instruction: 0xff100000
   11688:	02000041 	andeq	r0, r0, #65	; 0x41
   1168c:	0000a258 	andeq	sl, r0, r8, asr r2
   11690:	00505400 	subseq	r5, r0, r0, lsl #8
   11694:	42851300 	addmi	r1, r5, #0, 6
   11698:	5a020000 	bpl	916a0 <__ccfg+0x716f8>
   1169c:	000000a2 	andeq	r0, r0, r2, lsr #1
   116a0:	00005075 	andeq	r5, r0, r5, ror r0
   116a4:	00420a13 	subeq	r0, r2, r3, lsl sl
   116a8:	a25b0200 	subsge	r0, fp, #0, 4
   116ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   116b0:	11000051 	qaddne	r0, r1, r0
   116b4:	00000000 	andeq	r0, r0, r0
   116b8:	0000012a 	andeq	r0, r0, sl, lsr #2
   116bc:	45510112 	ldrbmi	r0, [r1, #-274]	; 0xfffffeee
   116c0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   116c4:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   116c8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   116cc:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
   116d0:	13160001 	tstne	r6, #1
   116d4:	f3302440 	vshl.u64	q1, q0, q0
   116d8:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   116dc:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
   116e0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   116e4:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   116e8:	f3131600 	vmax.u16	d1, d3, d0
   116ec:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   116f0:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
   116f4:	0001282e 	andeq	r2, r1, lr, lsr #16
   116f8:	01f31316 	mvnseq	r1, r6, lsl r3
   116fc:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
   11700:	13160001 	tstne	r6, #1
   11704:	50011221 	andpl	r1, r1, r1, lsr #4
   11708:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
   1170c:	01f32431 	mvnseq	r2, r1, lsr r4
   11710:	80232250 	eorhi	r2, r3, r0, asr r2
   11714:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   11718:	01f32431 	mvnseq	r2, r1, lsr r4
   1171c:	01f32250 	mvnseq	r2, r0, asr r2
   11720:	30254052 	eorcc	r4, r5, r2, asr r0
   11724:	00012829 	andeq	r2, r1, r9, lsr #16
   11728:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
   1172c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   11730:	01f32431 	mvnseq	r2, r1, lsr r4
   11734:	80232250 	eorhi	r2, r3, r0, asr r2
   11738:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   1173c:	01f32431 	mvnseq	r2, r1, lsr r4
   11740:	01f32250 	mvnseq	r2, r0, asr r2
   11744:	30254052 	eorcc	r4, r5, r2, asr r0
   11748:	00012829 	andeq	r2, r1, r9, lsr #16
   1174c:	01f31316 	mvnseq	r1, r6, lsl r3
   11750:	30254052 	eorcc	r4, r5, r2, asr r0
   11754:	0001282e 	andeq	r2, r1, lr, lsr #16
   11758:	00001316 	andeq	r1, r0, r6, lsl r3
   1175c:	00421d0f 	subeq	r1, r2, pc, lsl #26
   11760:	01f60100 	mvnseq	r0, r0, lsl #2
   11764:	00000000 	andeq	r0, r0, r0
   11768:	0000002e 	andeq	r0, r0, lr, lsr #32
   1176c:	041f9c01 	ldreq	r9, [pc], #-3073	; 11774 <__exidx_end+0xbab4>
   11770:	ba100000 	blt	411778 <__ccfg+0x3f17d0>
   11774:	02000011 	andeq	r0, r0, #17
   11778:	0000a283 	andeq	sl, r0, r3, lsl #5
   1177c:	00515500 	subseq	r5, r1, r0, lsl #10
   11780:	41a51000 			; <UNDEFINED> instruction: 0x41a51000
   11784:	83020000 	movwhi	r0, #8192	; 0x2000
   11788:	000000a2 	andeq	r0, r0, r2, lsr #1
   1178c:	00005176 	andeq	r5, r0, r6, ror r1
   11790:	00224310 	eoreq	r4, r2, r0, lsl r3
   11794:	a2840200 	addge	r0, r4, #0, 4
   11798:	97000000 	strls	r0, [r0, -r0]
   1179c:	10000051 	andne	r0, r0, r1, asr r0
   117a0:	00004213 	andeq	r4, r0, r3, lsl r2
   117a4:	00a28402 	adceq	r8, r2, r2, lsl #8
   117a8:	51e80000 	mvnpl	r0, r0
   117ac:	0a100000 	beq	4117b4 <__ccfg+0x3f180c>
   117b0:	02000042 	andeq	r0, r0, #66	; 0x42
   117b4:	00009785 	andeq	r9, r0, r5, lsl #15
   117b8:	00523900 	subseq	r3, r2, r0, lsl #18
   117bc:	42851300 	addmi	r1, r5, #0, 6
   117c0:	87020000 	strhi	r0, [r2, -r0]
   117c4:	000000a2 	andeq	r0, r0, r2, lsr #1
   117c8:	00005259 	andeq	r5, r0, r9, asr r2
   117cc:	0041ff13 	subeq	pc, r1, r3, lsl pc	; <UNPREDICTABLE>
   117d0:	a2880200 	addge	r0, r8, #0, 4
   117d4:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   117d8:	11000052 	qaddne	r0, r2, r0
   117dc:	00000000 	andeq	r0, r0, r0
   117e0:	0000012a 	andeq	r0, r0, sl, lsr #2
   117e4:	40510112 	subsmi	r0, r1, r2, lsl r1
   117e8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   117ec:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   117f0:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   117f4:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   117f8:	8000000f 	andhi	r0, r0, pc
   117fc:	0001282b 	andeq	r2, r1, fp, lsr #16
   11800:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
   11804:	0294007d 	addseq	r0, r4, #125	; 0x7d
   11808:	1affff0a 	bne	11438 <__exidx_end+0xb778>
   1180c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   11810:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
   11814:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   11818:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   1181c:	8000000f 	andhi	r0, r0, pc
   11820:	0001282b 	andeq	r2, r1, fp, lsr #16
   11824:	21241316 			; <UNDEFINED> instruction: 0x21241316
   11828:	63500112 	cmpvs	r0, #-2147483644	; 0x80000004
   1182c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   11830:	5001f324 	andpl	pc, r1, r4, lsr #6
   11834:	04802322 	streq	r2, [r0], #802	; 0x322
   11838:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   1183c:	5001f324 	andpl	pc, r1, r4, lsr #6
   11840:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
   11844:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   11848:	00000f0c 	andeq	r0, r0, ip, lsl #30
   1184c:	01282c80 	smlawbeq	r8, r0, ip, r2
   11850:	23131600 	tstcs	r3, #0, 12
   11854:	01f30484 	mvnseq	r0, r4, lsl #9
   11858:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   1185c:	23225001 			; <UNDEFINED> instruction: 0x23225001
   11860:	01f30480 	mvnseq	r0, r0, lsl #9
   11864:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   11868:	f3225001 	vhadd.u32	d5, d2, d1
   1186c:	4b405301 	blmi	1026478 <__ccfg+0x10064d0>
   11870:	0f0c2224 	svceq	0x000c2224
   11874:	2c800000 	stccs	0, cr0, [r0], {0}
   11878:	16000128 	strne	r0, [r0], -r8, lsr #2
   1187c:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
   11880:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   11884:	00000f0c 	andeq	r0, r0, ip, lsl #30
   11888:	01282b80 	smlawbeq	r8, r0, fp, r2
   1188c:	00131600 	andseq	r1, r3, r0, lsl #12
   11890:	41cb1400 	bicmi	r1, fp, r0, lsl #8
   11894:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
   11898:	00009702 	andeq	r9, r0, r2, lsl #14
   1189c:	00000000 	andeq	r0, r0, r0
   118a0:	00003400 	andeq	r3, r0, r0, lsl #8
   118a4:	d29c0100 	addsle	r0, ip, #0, 2
   118a8:	10000004 	andne	r0, r0, r4
   118ac:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
   118b0:	00a2af02 	adceq	sl, r2, r2, lsl #30
   118b4:	535f0000 	cmppl	pc, #0
   118b8:	a5100000 	ldrge	r0, [r0, #-0]
   118bc:	02000041 	andeq	r0, r0, #65	; 0x41
   118c0:	0000a2af 	andeq	sl, r0, pc, lsr #5
   118c4:	00538000 	subseq	r8, r3, r0
   118c8:	22431000 	subcs	r1, r3, #0
   118cc:	af020000 	svcge	0x00020000
   118d0:	000000a2 	andeq	r0, r0, r2, lsr #1
   118d4:	000053a1 	andeq	r5, r0, r1, lsr #7
   118d8:	00428513 	subeq	r8, r2, r3, lsl r5
   118dc:	a2b10200 	adcsge	r0, r1, #0, 4
   118e0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
   118e4:	13000053 	movwne	r0, #83	; 0x53
   118e8:	000041f6 	strdeq	r4, [r0], -r6
   118ec:	0097b202 	addseq	fp, r7, r2, lsl #4
   118f0:	54180000 	ldrpl	r0, [r8], #-0
   118f4:	ed150000 	ldc	0, cr0, [r5, #-0]
   118f8:	00000000 	andeq	r0, r0, r0
   118fc:	1a000000 	bne	11904 <__exidx_end+0xbc44>
   11900:	02000000 	andeq	r0, r0, #0
   11904:	01080cca 	smlabteq	r8, sl, ip, r0
   11908:	0a020000 	beq	91910 <__ccfg+0x71968>
   1190c:	000000fd 	strdeq	r0, [r0], -sp
   11910:	00005430 	andeq	r5, r0, r0, lsr r4
   11914:	00000016 	andeq	r0, r0, r6, lsl r0
   11918:	00001a00 	andeq	r1, r0, r0, lsl #20
   1191c:	01130b00 	tsteq	r3, r0, lsl #22
   11920:	546a0000 	strbtpl	r0, [sl], #-0
   11924:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
   11928:	83000001 	movwhi	r0, #1
   1192c:	0d000054 	stceq	0, cr0, [r0, #-336]	; 0xfffffeb0
   11930:	00000000 	andeq	r0, r0, r0
   11934:	00000594 	muleq	r0, r4, r5
   11938:	0000000d 	andeq	r0, r0, sp
   1193c:	00059f00 	andeq	r9, r5, r0, lsl #30
   11940:	00000000 	andeq	r0, r0, r0
   11944:	0041ad14 	subeq	sl, r1, r4, lsl sp
   11948:	021d0100 	andseq	r0, sp, #0, 2
   1194c:	00000097 	muleq	r0, r7, r0
   11950:	00000000 	andeq	r0, r0, r0
   11954:	00000040 	andeq	r0, r0, r0, asr #32
   11958:	05949c01 	ldreq	r9, [r4, #3073]	; 0xc01
   1195c:	ba100000 	blt	411964 <__ccfg+0x3f19bc>
   11960:	02000011 	andeq	r0, r0, #17
   11964:	0000a2dd 	ldrdeq	sl, [r0], -sp
   11968:	00549a00 	subseq	r9, r4, r0, lsl #20
   1196c:	41a51000 			; <UNDEFINED> instruction: 0x41a51000
   11970:	dd020000 	stcle	0, cr0, [r2, #-0]
   11974:	000000a2 	andeq	r0, r0, r2, lsr #1
   11978:	000054bb 			; <UNDEFINED> instruction: 0x000054bb
   1197c:	00224310 	eoreq	r4, r2, r0, lsl r3
   11980:	a2de0200 	sbcsge	r0, lr, #0, 4
   11984:	dc000000 	stcle	0, cr0, [r0], {-0}
   11988:	10000054 	andne	r0, r0, r4, asr r0
   1198c:	00004213 	andeq	r4, r0, r3, lsl r2
   11990:	00a2de02 	adceq	sp, r2, r2, lsl #28
   11994:	551f0000 	ldrpl	r0, [pc, #-0]	; 1199c <__exidx_end+0xbcdc>
   11998:	85130000 	ldrhi	r0, [r3, #-0]
   1199c:	02000042 	andeq	r0, r0, #66	; 0x42
   119a0:	0000a2e0 	andeq	sl, r0, r0, ror #5
   119a4:	00556200 	subseq	r6, r5, r0, lsl #4
   119a8:	41f61300 	mvnsmi	r1, r0, lsl #6
   119ac:	e1020000 	mrs	r0, (UNDEF: 2)
   119b0:	00000097 	muleq	r0, r7, r0
   119b4:	000055bd 			; <UNDEFINED> instruction: 0x000055bd
   119b8:	0000ed15 	andeq	lr, r0, r5, lsl sp
   119bc:	00000000 	andeq	r0, r0, r0
   119c0:	00001a00 	andeq	r1, r0, r0, lsl #20
   119c4:	0cfa0200 	lfmeq	f0, 2, [sl]
   119c8:	00000108 	andeq	r0, r0, r8, lsl #2
   119cc:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
   119d0:	55e00000 	strbpl	r0, [r0, #0]!
   119d4:	00160000 	andseq	r0, r6, r0
   119d8:	1a000000 	bne	119e0 <__exidx_end+0xbd20>
   119dc:	0b000000 	bleq	119e4 <__exidx_end+0xbd24>
   119e0:	00000113 	andeq	r0, r0, r3, lsl r1
   119e4:	00005620 	andeq	r5, r0, r0, lsr #12
   119e8:	00011e0b 	andeq	r1, r1, fp, lsl #28
   119ec:	00563900 	subseq	r3, r6, r0, lsl #18
   119f0:	00000d00 	andeq	r0, r0, r0, lsl #26
   119f4:	05940000 	ldreq	r0, [r4]
   119f8:	000d0000 	andeq	r0, sp, r0
   119fc:	9f000000 	svcls	0x00000000
   11a00:	00000005 	andeq	r0, r0, r5
   11a04:	ef170000 	svc	0x00170000
   11a08:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
   11a0c:	0000a26a 	andeq	sl, r0, sl, ror #4
   11a10:	29fe1700 	ldmibcs	lr!, {r8, r9, sl, ip}^
   11a14:	84050000 	strhi	r0, [r5], #-0
   11a18:	000000a2 	andeq	r0, r0, r2, lsr #1
   11a1c:	000f3100 	andeq	r3, pc, r0, lsl #2
   11a20:	8c000400 	cfstrshi	mvf0, [r0], {-0}
   11a24:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
   11a28:	00455901 	subeq	r5, r5, r1, lsl #18
   11a2c:	44720c00 	ldrbtmi	r0, [r2], #-3072	; 0xfffff400
   11a30:	45f40000 	ldrbmi	r0, [r4, #0]!
   11a34:	49340000 	ldmdbmi	r4!, {}	; <UNPREDICTABLE>
   11a38:	00aa0000 	adceq	r0, sl, r0
   11a3c:	8e8f0000 	cdphi	0, 8, cr0, cr15, cr0, {0}
   11a40:	04020000 	streq	r0, [r2], #-0
   11a44:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   11a48:	33140300 	tstcc	r4, #0, 6
   11a4c:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
   11a50:	00003817 	andeq	r3, r0, r7, lsl r8
   11a54:	07040400 	streq	r0, [r4, -r0, lsl #8]
   11a58:	0000042b 	andeq	r0, r0, fp, lsr #8
   11a5c:	00440605 	subeq	r0, r4, r5, lsl #12
   11a60:	01480200 	mrseq	r0, (UNDEF: 104)
   11a64:	00003818 	andeq	r3, r0, r8, lsl r8
   11a68:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
   11a6c:	000007f8 	strdeq	r0, [r0], -r8
   11a70:	2a040804 	bcs	113a88 <__ccfg+0xf3ae0>
   11a74:	05000044 	streq	r0, [r0, #-68]	; 0xffffffbc
   11a78:	00000bd5 	ldrdeq	r0, [r0], -r5
   11a7c:	17016502 	strne	r6, [r1, -r2, lsl #10]
   11a80:	00000038 	andeq	r0, r0, r8, lsr r0
   11a84:	5d060104 	stfpls	f0, [r6, #-16]
   11a88:	0400000c 	streq	r0, [r0], #-12
   11a8c:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
   11a90:	02040000 	andeq	r0, r4, #0
   11a94:	000a6b05 	andeq	r6, sl, r5, lsl #22
   11a98:	07020400 	streq	r0, [r2, -r0, lsl #8]
   11a9c:	00000d66 	andeq	r0, r0, r6, ror #26
   11aa0:	fd050404 	stc2	4, cr0, [r5, #-16]
   11aa4:	06000007 	streq	r0, [r0], -r7
   11aa8:	00000083 	andeq	r0, r0, r3, lsl #1
   11aac:	26070404 	strcs	r0, [r7], -r4, lsl #8
   11ab0:	04000004 	streq	r0, [r0], #-4
   11ab4:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
   11ab8:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
   11abc:	0300000e 	movweq	r0, #14
   11ac0:	00830e2e 	addeq	r0, r3, lr, lsr #28
   11ac4:	ff030000 			; <UNDEFINED> instruction: 0xff030000
   11ac8:	03000002 	movweq	r0, #2
   11acc:	00830e74 	addeq	r0, r3, r4, ror lr
   11ad0:	04070000 	streq	r0, [r7], #-0
   11ad4:	d703a503 	strle	sl, [r3, -r3, lsl #10]
   11ad8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11adc:	0000076c 	andeq	r0, r0, ip, ror #14
   11ae0:	5a0ca703 	bpl	33b6f4 <__ccfg+0x31b74c>
   11ae4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11ae8:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
   11aec:	d713a803 	ldrle	sl, [r3, -r3, lsl #16]
   11af0:	00000000 	andeq	r0, r0, r0
   11af4:	00006e09 	andeq	r6, r0, r9, lsl #28
   11af8:	0000e700 	andeq	lr, r0, r0, lsl #14
   11afc:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11b00:	00030000 	andeq	r0, r3, r0
   11b04:	a203080b 	andge	r0, r3, #720896	; 0xb0000
   11b08:	00010b09 	andeq	r0, r1, r9, lsl #22
   11b0c:	038e0c00 	orreq	r0, lr, #0, 24
   11b10:	a4030000 	strge	r0, [r3], #-0
   11b14:	00002507 	andeq	r2, r0, r7, lsl #10
   11b18:	010c0000 	mrseq	r0, (UNDEF: 12)
   11b1c:	03000006 	movweq	r0, #6
   11b20:	00b505a9 	adcseq	r0, r5, r9, lsr #11
   11b24:	00040000 	andeq	r0, r4, r0
   11b28:	0008b503 	andeq	fp, r8, r3, lsl #10
   11b2c:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
   11b30:	000000e7 	andeq	r0, r0, r7, ror #1
   11b34:	170e040d 	strne	r0, [lr, -sp, lsl #8]
   11b38:	03000001 	movweq	r0, #1
   11b3c:	00000842 	andeq	r0, r0, r2, asr #16
   11b40:	8f191604 	svchi	0x00191604
   11b44:	03000000 	movweq	r0, #0
   11b48:	00000253 	andeq	r0, r0, r3, asr r2
   11b4c:	250d0c05 	strcs	r0, [sp, #-3077]	; 0xfffff3fb
   11b50:	03000000 	movweq	r0, #0
   11b54:	0000072a 	andeq	r0, r0, sl, lsr #14
   11b58:	2a1b2304 	bcs	6da770 <__ccfg+0x6ba7c8>
   11b5c:	0f000001 	svceq	0x00000001
   11b60:	00000332 	andeq	r0, r0, r2, lsr r3
   11b64:	08340418 	ldmdaeq	r4!, {r3, r4, sl}
   11b68:	0000019c 	muleq	r0, ip, r1
   11b6c:	000ec40c 	andeq	ip, lr, ip, lsl #8
   11b70:	13360400 	teqne	r6, #0, 8
   11b74:	0000019c 	muleq	r0, ip, r1
   11b78:	6b5f1000 	blvs	17d5b80 <__ccfg+0x17b5bd8>
   11b7c:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
   11b80:	00000025 	andeq	r0, r0, r5, lsr #32
   11b84:	0b620c04 	bleq	1894b9c <__ccfg+0x1874bf4>
   11b88:	37040000 	strcc	r0, [r4, -r0]
   11b8c:	0000250b 	andeq	r2, r0, fp, lsl #10
   11b90:	f50c0800 			; <UNDEFINED> instruction: 0xf50c0800
   11b94:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   11b98:	00251437 	eoreq	r1, r5, r7, lsr r4
   11b9c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   11ba0:	00000455 	andeq	r0, r0, r5, asr r4
   11ba4:	251b3704 	ldrcs	r3, [fp, #-1796]	; 0xfffff8fc
   11ba8:	10000000 	andne	r0, r0, r0
   11bac:	00785f10 	rsbseq	r5, r8, r0, lsl pc
   11bb0:	a20b3804 	andge	r3, fp, #4, 16	; 0x40000
   11bb4:	14000001 	strne	r0, [r0], #-1
   11bb8:	42041100 	andmi	r1, r4, #0, 2
   11bbc:	09000001 	stmdbeq	r0, {r0}
   11bc0:	0000011e 	andeq	r0, r0, lr, lsl r1
   11bc4:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   11bc8:	0000380a 	andeq	r3, r0, sl, lsl #16
   11bcc:	0f000000 	svceq	0x00000000
   11bd0:	00000b7d 	andeq	r0, r0, sp, ror fp
   11bd4:	083c0424 	ldmdaeq	ip!, {r2, r5, sl}
   11bd8:	00000235 	andeq	r0, r0, r5, lsr r2
   11bdc:	00056c0c 	andeq	r6, r5, ip, lsl #24
   11be0:	093e0400 	ldmdbeq	lr!, {sl}
   11be4:	00000025 	andeq	r0, r0, r5, lsr #32
   11be8:	03b70c00 			; <UNDEFINED> instruction: 0x03b70c00
   11bec:	3f040000 	svccc	0x00040000
   11bf0:	00002509 	andeq	r2, r0, r9, lsl #10
   11bf4:	580c0400 	stmdapl	ip, {sl}
   11bf8:	04000003 	streq	r0, [r0], #-3
   11bfc:	00250940 	eoreq	r0, r5, r0, asr #18
   11c00:	0c080000 	stceq	0, cr0, [r8], {-0}
   11c04:	00000674 	andeq	r0, r0, r4, ror r6
   11c08:	25094104 	strcs	r4, [r9, #-260]	; 0xfffffefc
   11c0c:	0c000000 	stceq	0, cr0, [r0], {-0}
   11c10:	0009540c 	andeq	r5, r9, ip, lsl #8
   11c14:	09420400 	stmdbeq	r2, {sl}^
   11c18:	00000025 	andeq	r0, r0, r5, lsr #32
   11c1c:	0ace0c10 	beq	ff394c64 <_estack+0xdf38fc64>
   11c20:	43040000 	movwmi	r0, #16384	; 0x4000
   11c24:	00002509 	andeq	r2, r0, r9, lsl #10
   11c28:	460c1400 	strmi	r1, [ip], -r0, lsl #8
   11c2c:	04000003 	streq	r0, [r0], #-3
   11c30:	00250944 	eoreq	r0, r5, r4, asr #18
   11c34:	0c180000 	ldceq	0, cr0, [r8], {-0}
   11c38:	00000575 	andeq	r0, r0, r5, ror r5
   11c3c:	25094504 	strcs	r4, [r9, #-1284]	; 0xfffffafc
   11c40:	1c000000 	stcne	0, cr0, [r0], {-0}
   11c44:	0008f00c 	andeq	pc, r8, ip
   11c48:	09460400 	stmdbeq	r6, {sl}^
   11c4c:	00000025 	andeq	r0, r0, r5, lsr #32
   11c50:	3b120020 	blcc	491cd8 <__ccfg+0x471d30>
   11c54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11c58:	084f0401 	stmdaeq	pc, {r0, sl}^	; <UNPREDICTABLE>
   11c5c:	0000027a 	andeq	r0, r0, sl, ror r2
   11c60:	000d2d0c 	andeq	r2, sp, ip, lsl #26
   11c64:	0a500400 	beq	1412c6c <__ccfg+0x13f2cc4>
   11c68:	0000027a 	andeq	r0, r0, sl, ror r2
   11c6c:	0c170c00 	ldceq	12, cr0, [r7], {-0}
   11c70:	51040000 	mrspl	r0, (UNDEF: 4)
   11c74:	00027a09 	andeq	r7, r2, r9, lsl #20
   11c78:	c6138000 	ldrgt	r8, [r3], -r0
   11c7c:	0400000d 	streq	r0, [r0], #-13
   11c80:	011e0a53 	tsteq	lr, r3, asr sl
   11c84:	01000000 	mrseq	r0, (UNDEF: 0)
   11c88:	000eb713 	andeq	fp, lr, r3, lsl r7
   11c8c:	0a560400 	beq	1592c94 <__ccfg+0x1572cec>
   11c90:	0000011e 	andeq	r0, r0, lr, lsl r1
   11c94:	09000104 	stmdbeq	r0, {r2, r8}
   11c98:	00000117 	andeq	r0, r0, r7, lsl r1
   11c9c:	0000028a 	andeq	r0, r0, sl, lsl #5
   11ca0:	0000380a 	andeq	r3, r0, sl, lsl #16
   11ca4:	12001f00 	andne	r1, r0, #0, 30
   11ca8:	00000a16 	andeq	r0, r0, r6, lsl sl
   11cac:	62040190 	andvs	r0, r4, #144, 2	; 0x24
   11cb0:	0002cd08 	andeq	ip, r2, r8, lsl #26
   11cb4:	0ec40c00 	cdpeq	12, 12, cr0, cr4, cr0, {0}
   11cb8:	63040000 	movwvs	r0, #16384	; 0x4000
   11cbc:	0002cd12 	andeq	ip, r2, r2, lsl sp
   11cc0:	840c0000 	strhi	r0, [ip], #-0
   11cc4:	04000005 	streq	r0, [r0], #-5
   11cc8:	00250664 	eoreq	r0, r5, r4, ror #12
   11ccc:	0c040000 	stceq	0, cr0, [r4], {-0}
   11cd0:	00000307 	andeq	r0, r0, r7, lsl #6
   11cd4:	d3096604 	movwle	r6, #38404	; 0x9604
   11cd8:	08000002 	stmdaeq	r0, {r1}
   11cdc:	00003b0c 	andeq	r3, r0, ip, lsl #22
   11ce0:	1e670400 	cdpne	4, 6, cr0, cr7, cr0, {0}
   11ce4:	00000235 	andeq	r0, r0, r5, lsr r2
   11ce8:	04110088 	ldreq	r0, [r1], #-136	; 0xffffff78
   11cec:	0000028a 	andeq	r0, r0, sl, lsl #5
   11cf0:	0002e309 	andeq	lr, r2, r9, lsl #6
   11cf4:	0002e300 	andeq	lr, r2, r0, lsl #6
   11cf8:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11cfc:	001f0000 	andseq	r0, pc, r0
   11d00:	02e90411 	rsceq	r0, r9, #285212672	; 0x11000000
   11d04:	0f140000 	svceq	0x00140000
   11d08:	00000cc5 	andeq	r0, r0, r5, asr #25
   11d0c:	087a0408 	ldmdaeq	sl!, {r3, sl}^
   11d10:	00000312 	andeq	r0, r0, r2, lsl r3
   11d14:	000cd70c 	andeq	sp, ip, ip, lsl #14
   11d18:	117b0400 	cmnne	fp, r0, lsl #8
   11d1c:	00000312 	andeq	r0, r0, r2, lsl r3
   11d20:	1da00c00 	stcne	12, cr0, [r0]
   11d24:	7c040000 	stcvc	0, cr0, [r4], {-0}
   11d28:	00002506 	andeq	r2, r0, r6, lsl #10
   11d2c:	11000400 	tstne	r0, r0, lsl #8
   11d30:	00006e04 	andeq	r6, r0, r4, lsl #28
   11d34:	044d0f00 	strbeq	r0, [sp], #-3840	; 0xfffff100
   11d38:	04680000 	strbteq	r0, [r8], #-0
   11d3c:	045b08ba 	ldrbeq	r0, [fp], #-2234	; 0xfffff746
   11d40:	5f100000 	svcpl	0x00100000
   11d44:	bb040070 	bllt	111f0c <__ccfg+0xf1f64>
   11d48:	00031212 	andeq	r1, r3, r2, lsl r2
   11d4c:	5f100000 	svcpl	0x00100000
   11d50:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
   11d54:	00002507 	andeq	r2, r0, r7, lsl #10
   11d58:	5f100400 	svcpl	0x00100400
   11d5c:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
   11d60:	00002507 	andeq	r2, r0, r7, lsl #10
   11d64:	c40c0800 	strgt	r0, [ip], #-2048	; 0xfffff800
   11d68:	04000001 	streq	r0, [r0], #-1
   11d6c:	007509be 	ldrhteq	r0, [r5], #-158	; 0xffffff62
   11d70:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   11d74:	00000859 	andeq	r0, r0, r9, asr r8
   11d78:	7509bf04 	strvc	fp, [r9, #-3844]	; 0xfffff0fc
   11d7c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   11d80:	66625f10 	uqadd16vs	r5, r2, r0
   11d84:	11c00400 	bicne	r0, r0, r0, lsl #8
   11d88:	000002ea 	andeq	r0, r0, sl, ror #5
   11d8c:	01bb0c10 			; <UNDEFINED> instruction: 0x01bb0c10
   11d90:	c1040000 	mrsgt	r0, (UNDEF: 4)
   11d94:	00002507 	andeq	r2, r0, r7, lsl #10
   11d98:	0c0c1800 	stceq	8, cr1, [ip], {-0}
   11d9c:	04000003 	streq	r0, [r0], #-3
   11da0:	01170ac8 	tsteq	r7, r8, asr #21
   11da4:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   11da8:	00001d2f 	andeq	r1, r0, pc, lsr #26
   11dac:	df1dca04 	svcle	0x001dca04
   11db0:	20000005 	andcs	r0, r0, r5
   11db4:	001cf60c 	andseq	pc, ip, ip, lsl #12
   11db8:	1dcc0400 	cfstrdne	mvd0, [ip]
   11dbc:	00000609 	andeq	r0, r0, r9, lsl #12
   11dc0:	0ee40c24 	cdpeq	12, 14, cr0, cr4, cr4, {1}
   11dc4:	cf040000 	svcgt	0x00040000
   11dc8:	00062d0d 	andeq	r2, r6, sp, lsl #26
   11dcc:	e40c2800 	str	r2, [ip], #-2048	; 0xfffff800
   11dd0:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
   11dd4:	064709d0 			; <UNDEFINED> instruction: 0x064709d0
   11dd8:	102c0000 	eorne	r0, ip, r0
   11ddc:	0062755f 	rsbeq	r7, r2, pc, asr r5
   11de0:	ea11d304 	b	4869f8 <__ccfg+0x466a50>
   11de4:	30000002 	andcc	r0, r0, r2
   11de8:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
   11dec:	12d40400 	sbcsne	r0, r4, #0, 8
   11df0:	00000312 	andeq	r0, r0, r2, lsl r3
   11df4:	755f1038 	ldrbvc	r1, [pc, #-56]	; 11dc4 <__exidx_end+0xc104>
   11df8:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
   11dfc:	00002507 	andeq	r2, r0, r7, lsl #10
   11e00:	1b0c3c00 	blne	320e08 <__ccfg+0x300e60>
   11e04:	0400000f 	streq	r0, [r0], #-15
   11e08:	064d11d8 			; <UNDEFINED> instruction: 0x064d11d8
   11e0c:	0c400000 	mareq	acc0, r0, r0
   11e10:	00000e64 	andeq	r0, r0, r4, ror #28
   11e14:	5d11d904 	vldrpl.16	s26, [r1, #-8]	; <UNPREDICTABLE>
   11e18:	43000006 	movwmi	r0, #6
   11e1c:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
   11e20:	11dc0400 	bicsne	r0, ip, r0, lsl #8
   11e24:	000002ea 	andeq	r0, r0, sl, ror #5
   11e28:	0b740c44 	bleq	1d14f40 <__ccfg+0x1cf4f98>
   11e2c:	df040000 	svcle	0x00040000
   11e30:	00002507 	andeq	r2, r0, r7, lsl #10
   11e34:	7c0c4c00 	stcvc	12, cr4, [ip], {-0}
   11e38:	04000004 	streq	r0, [r0], #-4
   11e3c:	009d0ae0 	addseq	r0, sp, r0, ror #21
   11e40:	0c500000 	mraeq	r0, r0, acc0
   11e44:	00004753 	andeq	r4, r0, r3, asr r7
   11e48:	7912e304 	ldmdbvc	r2, {r2, r8, r9, sp, lr, pc}
   11e4c:	54000004 	strpl	r0, [r0], #-4
   11e50:	000b9a0c 	andeq	r9, fp, ip, lsl #20
   11e54:	0ce70400 	cfstrdeq	mvd0, [r7]
   11e58:	00000136 	andeq	r0, r0, r6, lsr r1
   11e5c:	0a1e0c58 	beq	794fc4 <__ccfg+0x77501c>
   11e60:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
   11e64:	00010b0e 	andeq	r0, r1, lr, lsl #22
   11e68:	970c5c00 	strls	r5, [ip, -r0, lsl #24]
   11e6c:	0400000e 	streq	r0, [r0], #-14
   11e70:	002509ea 	eoreq	r0, r5, sl, ror #19
   11e74:	00640000 	rsbeq	r0, r4, r0
   11e78:	00002515 	andeq	r2, r0, r5, lsl r5
   11e7c:	00047900 	andeq	r7, r4, r0, lsl #18
   11e80:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   11e84:	17160000 	ldrne	r0, [r6, -r0]
   11e88:	16000001 	strne	r0, [r0], -r1
   11e8c:	000005cd 	andeq	r0, r0, sp, asr #11
   11e90:	00002516 	andeq	r2, r0, r6, lsl r5
   11e94:	04110000 	ldreq	r0, [r1], #-0
   11e98:	00000484 	andeq	r0, r0, r4, lsl #9
   11e9c:	00047906 	andeq	r7, r4, r6, lsl #18
   11ea0:	0d5f1700 	ldcleq	7, cr1, [pc, #-0]	; 11ea8 <__exidx_end+0xc1e8>
   11ea4:	04280000 	strteq	r0, [r8], #-0
   11ea8:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
   11eac:	000005cd 	andeq	r0, r0, sp, asr #11
   11eb0:	00090418 	andeq	r0, r9, r8, lsl r4
   11eb4:	02670400 	rsbeq	r0, r7, #0, 8
   11eb8:	00002507 	andeq	r2, r0, r7, lsl #10
   11ebc:	e2180000 	ands	r0, r8, #0
   11ec0:	04000007 	streq	r0, [r0], #-7
   11ec4:	b90b026c 	stmdblt	fp, {r2, r3, r5, r6, r9}
   11ec8:	04000006 	streq	r0, [r0], #-6
   11ecc:	0002f718 	andeq	pc, r2, r8, lsl r7	; <UNPREDICTABLE>
   11ed0:	026c0400 	rsbeq	r0, ip, #0, 8
   11ed4:	0006b914 	andeq	fp, r6, r4, lsl r9
   11ed8:	0a180800 	beq	613ee0 <__ccfg+0x5f3f38>
   11edc:	0400000f 	streq	r0, [r0], #-15
   11ee0:	b91e026c 	ldmdblt	lr, {r2, r3, r5, r6, r9}
   11ee4:	0c000006 	stceq	0, cr0, [r0], {6}
   11ee8:	00057f18 	andeq	r7, r5, r8, lsl pc
   11eec:	026e0400 	rsbeq	r0, lr, #0, 8
   11ef0:	00002508 	andeq	r2, r0, r8, lsl #10
   11ef4:	d4181000 	ldrle	r1, [r8], #-0
   11ef8:	04000004 	streq	r0, [r0], #-4
   11efc:	b908026f 	stmdblt	r8, {r0, r1, r2, r3, r5, r6, r9}
   11f00:	14000008 	strne	r0, [r0], #-8
   11f04:	000e7718 	andeq	r7, lr, r8, lsl r7
   11f08:	02720400 	rsbseq	r0, r2, #0, 8
   11f0c:	00002507 	andeq	r2, r0, r7, lsl #10
   11f10:	a1183000 	tstge	r8, r0
   11f14:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
   11f18:	50160273 	andspl	r0, r6, r3, ror r2
   11f1c:	34000009 	strcc	r0, [r0], #-9
   11f20:	00078a18 	andeq	r8, r7, r8, lsl sl
   11f24:	02750400 	rsbseq	r0, r5, #0, 8
   11f28:	00002507 	andeq	r2, r0, r7, lsl #10
   11f2c:	84183800 	ldrhi	r3, [r8], #-2048	; 0xfffff800
   11f30:	04000008 	streq	r0, [r0], #-8
   11f34:	610a0277 	tstvs	sl, r7, ror r2
   11f38:	3c000009 	stccc	0, cr0, [r0], {9}
   11f3c:	00035018 	andeq	r5, r3, r8, lsl r0
   11f40:	027a0400 	rsbseq	r0, sl, #0, 8
   11f44:	00019c13 	andeq	r9, r1, r3, lsl ip
   11f48:	0b184000 	bleq	621f50 <__ccfg+0x601fa8>
   11f4c:	04000004 	streq	r0, [r0], #-4
   11f50:	2507027b 	strcs	r0, [r7, #-635]	; 0xfffffd85
   11f54:	44000000 	strmi	r0, [r0], #-0
   11f58:	00060918 	andeq	r0, r6, r8, lsl r9
   11f5c:	027c0400 	rsbseq	r0, ip, #0, 8
   11f60:	00019c13 	andeq	r9, r1, r3, lsl ip
   11f64:	1f184800 	svcne	0x00184800
   11f68:	04000008 	streq	r0, [r0], #-8
   11f6c:	6714027d 			; <UNDEFINED> instruction: 0x6714027d
   11f70:	4c000009 	stcmi	0, cr0, [r0], {9}
   11f74:	000b5a18 	andeq	r5, fp, r8, lsl sl
   11f78:	02800400 	addeq	r0, r0, #0, 8
   11f7c:	00002507 	andeq	r2, r0, r7, lsl #10
   11f80:	53185000 	tstpl	r8, #0
   11f84:	0400000c 	streq	r0, [r0], #-12
   11f88:	cd090281 	sfmgt	f0, 4, [r9, #-516]	; 0xfffffdfc
   11f8c:	54000005 	strpl	r0, [r0], #-5
   11f90:	000c6d18 	andeq	r6, ip, r8, lsl sp
   11f94:	02a40400 	adceq	r0, r4, #0, 8
   11f98:	00089407 	andeq	r9, r8, r7, lsl #8
   11f9c:	16195800 	ldrne	r5, [r9], -r0, lsl #16
   11fa0:	0400000a 	streq	r0, [r0], #-10
   11fa4:	cd1302a8 	lfmgt	f0, 4, [r3, #-672]	; 0xfffffd60
   11fa8:	48000002 	stmdami	r0, {r1}
   11fac:	06ae1901 	strteq	r1, [lr], r1, lsl #18
   11fb0:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   11fb4:	028a1202 	addeq	r1, sl, #536870912	; 0x20000000
   11fb8:	014c0000 	mrseq	r0, (UNDEF: 76)
   11fbc:	00069519 	andeq	r9, r6, r9, lsl r5
   11fc0:	02ad0400 	adceq	r0, sp, #0, 8
   11fc4:	0009780c 	andeq	r7, r9, ip, lsl #16
   11fc8:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
   11fcc:	00000ce3 	andeq	r0, r0, r3, ror #25
   11fd0:	1002b204 	andne	fp, r2, r4, lsl #4
   11fd4:	0000067a 	andeq	r0, r0, sl, ror r6
   11fd8:	a61902e0 	ldrge	r0, [r9], -r0, ror #5
   11fdc:	0400000a 	streq	r0, [r0], #-10
   11fe0:	840a02b4 	strhi	r0, [sl], #-692	; 0xfffffd4c
   11fe4:	ec000009 	stc	0, cr0, [r0], {9}
   11fe8:	04110002 	ldreq	r0, [r1], #-2
   11fec:	000005d3 	ldrdeq	r0, [r0], -r3
   11ff0:	64080104 	strvs	r0, [r8], #-260	; 0xfffffefc
   11ff4:	0600000c 	streq	r0, [r0], -ip
   11ff8:	000005d3 	ldrdeq	r0, [r0], -r3
   11ffc:	045b0411 	ldrbeq	r0, [fp], #-1041	; 0xfffffbef
   12000:	25150000 	ldrcs	r0, [r5, #-0]
   12004:	03000000 	movweq	r0, #0
   12008:	16000006 	strne	r0, [r0], -r6
   1200c:	00000479 	andeq	r0, r0, r9, ror r4
   12010:	00011716 	andeq	r1, r1, r6, lsl r7
   12014:	06031600 	streq	r1, [r3], -r0, lsl #12
   12018:	25160000 	ldrcs	r0, [r6, #-0]
   1201c:	00000000 	andeq	r0, r0, r0
   12020:	05da0411 	ldrbeq	r0, [sl, #1041]	; 0x411
   12024:	04110000 	ldreq	r0, [r1], #-0
   12028:	000005e5 	andeq	r0, r0, r5, ror #11
   1202c:	0000a915 	andeq	sl, r0, r5, lsl r9
   12030:	00062d00 	andeq	r2, r6, r0, lsl #26
   12034:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   12038:	17160000 	ldrne	r0, [r6, -r0]
   1203c:	16000001 	strne	r0, [r0], -r1
   12040:	000000a9 	andeq	r0, r0, r9, lsr #1
   12044:	00002516 	andeq	r2, r0, r6, lsl r5
   12048:	04110000 	ldreq	r0, [r1], #-0
   1204c:	0000060f 	andeq	r0, r0, pc, lsl #12
   12050:	00002515 	andeq	r2, r0, r5, lsl r5
   12054:	00064700 	andeq	r4, r6, r0, lsl #14
   12058:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   1205c:	17160000 	ldrne	r0, [r6, -r0]
   12060:	00000001 	andeq	r0, r0, r1
   12064:	06330411 			; <UNDEFINED> instruction: 0x06330411
   12068:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
   1206c:	5d000000 	stcpl	0, cr0, [r0, #-0]
   12070:	0a000006 	beq	12090 <__exidx_end+0xc3d0>
   12074:	00000038 	andeq	r0, r0, r8, lsr r0
   12078:	6e090002 	cdpvs	0, 0, cr0, cr9, cr2, {0}
   1207c:	6d000000 	stcvs	0, cr0, [r0, #-0]
   12080:	0a000006 	beq	120a0 <__exidx_end+0xc3e0>
   12084:	00000038 	andeq	r0, r0, r8, lsr r0
   12088:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
   1208c:	04000004 	streq	r0, [r0], #-4
   12090:	181a0124 	ldmdane	sl, {r2, r5, r8}
   12094:	1a000003 	bne	120a8 <__exidx_end+0xc3e8>
   12098:	00000cdd 	ldrdeq	r0, [r0], -sp
   1209c:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
   120a0:	0006b308 	andeq	fp, r6, r8, lsl #6
   120a4:	0ec41800 	cdpeq	8, 12, cr1, cr4, cr0, {0}
   120a8:	2a040000 	bcs	1120b0 <__ccfg+0xf2108>
   120ac:	06b31101 	ldrteq	r1, [r3], r1, lsl #2
   120b0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   120b4:	00000bce 	andeq	r0, r0, lr, asr #23
   120b8:	07012b04 	streq	r2, [r1, -r4, lsl #22]
   120bc:	00000025 	andeq	r0, r0, r5, lsr #32
   120c0:	07721804 	ldrbeq	r1, [r2, -r4, lsl #16]!
   120c4:	2c040000 	stccs	0, cr0, [r4], {-0}
   120c8:	06b90b01 	ldrteq	r0, [r9], r1, lsl #22
   120cc:	00080000 	andeq	r0, r8, r0
   120d0:	067a0411 			; <UNDEFINED> instruction: 0x067a0411
   120d4:	04110000 	ldreq	r0, [r1], #-0
   120d8:	0000066d 	andeq	r0, r0, sp, ror #12
   120dc:	0003da1a 	andeq	sp, r3, sl, lsl sl
   120e0:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
   120e4:	06f80801 	ldrbteq	r0, [r8], r1, lsl #16
   120e8:	4b180000 	blmi	6120f0 <__ccfg+0x5f2148>
   120ec:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
   120f0:	f8120145 			; <UNDEFINED> instruction: 0xf8120145
   120f4:	00000006 	andeq	r0, r0, r6
   120f8:	00083118 	andeq	r3, r8, r8, lsl r1
   120fc:	01460400 	cmpeq	r6, r0, lsl #8
   12100:	0006f812 	andeq	pc, r6, r2, lsl r8	; <UNPREDICTABLE>
   12104:	fd180600 	ldc2	6, cr0, [r8, #-0]
   12108:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
   1210c:	7c120147 	ldfvcs	f0, [r2], {71}	; 0x47
   12110:	0c000000 	stceq	0, cr0, [r0], {-0}
   12114:	007c0900 	rsbseq	r0, ip, r0, lsl #18
   12118:	07080000 	streq	r0, [r8, -r0]
   1211c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12120:	02000000 	andeq	r0, r0, #0
   12124:	04d01b00 	ldrbeq	r1, [r0], #2816	; 0xb00
   12128:	1d070285 	sfmne	f0, 4, [r7, #-532]	; 0xfffffdec
   1212c:	18000008 	stmdane	r0, {r3}
   12130:	00000e6a 	andeq	r0, r0, sl, ror #28
   12134:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
   12138:	00000038 	andeq	r0, r0, r8, lsr r0
   1213c:	0ceb1800 	stcleq	8, cr1, [fp]
   12140:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
   12144:	05cd1202 	strbeq	r1, [sp, #514]	; 0x202
   12148:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
   1214c:	00000438 	andeq	r0, r0, r8, lsr r4
   12150:	10028904 	andne	r8, r2, r4, lsl #18
   12154:	0000081d 	andeq	r0, r0, sp, lsl r8
   12158:	0b431808 	bleq	10d8180 <__ccfg+0x10b81d8>
   1215c:	8a040000 	bhi	112164 <__ccfg+0xf21bc>
   12160:	01b21702 			; <UNDEFINED> instruction: 0x01b21702
   12164:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
   12168:	000007e9 	andeq	r0, r0, r9, ror #15
   1216c:	0f028b04 	svceq	0x00028b04
   12170:	00000025 	andeq	r0, r0, r5, lsr #32
   12174:	0ebf1848 	cdpeq	8, 11, cr1, cr15, cr8, {2}
   12178:	8c040000 	stchi	0, cr0, [r4], {-0}
   1217c:	00962c02 	addseq	r2, r6, r2, lsl #24
   12180:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
   12184:	0000007f 	andeq	r0, r0, pc, ror r0
   12188:	1a028d04 	bne	b55a0 <__ccfg+0x955f8>
   1218c:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
   12190:	06391858 			; <UNDEFINED> instruction: 0x06391858
   12194:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
   12198:	010b1602 	tsteq	fp, r2, lsl #12
   1219c:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
   121a0:	00000cf8 	strdeq	r0, [r0], -r8
   121a4:	16028f04 	strne	r8, [r2], -r4, lsl #30
   121a8:	0000010b 	andeq	r0, r0, fp, lsl #2
   121ac:	00711870 	rsbseq	r1, r1, r0, ror r8
   121b0:	90040000 	andls	r0, r4, r0
   121b4:	010b1602 	tsteq	fp, r2, lsl #12
   121b8:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
   121bc:	00000b6a 	andeq	r0, r0, sl, ror #22
   121c0:	10029104 	andne	r9, r2, r4, lsl #2
   121c4:	0000082d 	andeq	r0, r0, sp, lsr #16
   121c8:	04151880 	ldreq	r1, [r5], #-2176	; 0xfffff780
   121cc:	92040000 	andls	r0, r4, #0
   121d0:	083d1002 	ldmdaeq	sp!, {r1, ip}
   121d4:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
   121d8:	00000c8d 	andeq	r0, r0, sp, lsl #25
   121dc:	0f029304 	svceq	0x00029304
   121e0:	00000025 	andeq	r0, r0, r5, lsr #32
   121e4:	02ac18a0 	adceq	r1, ip, #160, 16	; 0xa00000
   121e8:	94040000 	strls	r0, [r4], #-0
   121ec:	010b1602 	tsteq	fp, r2, lsl #12
   121f0:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
   121f4:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
   121f8:	16029504 	strne	r9, [r2], -r4, lsl #10
   121fc:	0000010b 	andeq	r0, r0, fp, lsl #2
   12200:	05bb18ac 	ldreq	r1, [fp, #2220]!	; 0x8ac
   12204:	96040000 	strls	r0, [r4], -r0
   12208:	010b1602 	tsteq	fp, r2, lsl #12
   1220c:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
   12210:	0000084a 	andeq	r0, r0, sl, asr #16
   12214:	16029704 	strne	r9, [r2], -r4, lsl #14
   12218:	0000010b 	andeq	r0, r0, fp, lsl #2
   1221c:	062818bc 			; <UNDEFINED> instruction: 0x062818bc
   12220:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
   12224:	010b1602 	tsteq	fp, r2, lsl #12
   12228:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
   1222c:	00000902 	andeq	r0, r0, r2, lsl #18
   12230:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
   12234:	00000025 	andeq	r0, r0, r5, lsr #32
   12238:	d30900cc 	movwle	r0, #37068	; 0x90cc
   1223c:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
   12240:	0a000008 	beq	12268 <__exidx_end+0xc5a8>
   12244:	00000038 	andeq	r0, r0, r8, lsr r0
   12248:	d3090019 	movwle	r0, #36889	; 0x9019
   1224c:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
   12250:	0a000008 	beq	12278 <__exidx_end+0xc5b8>
   12254:	00000038 	andeq	r0, r0, r8, lsr r0
   12258:	d3090007 	movwle	r0, #36871	; 0x9007
   1225c:	4d000005 	stcmi	0, cr0, [r0, #-20]	; 0xffffffec
   12260:	0a000008 	beq	12288 <__exidx_end+0xc5c8>
   12264:	00000038 	andeq	r0, r0, r8, lsr r0
   12268:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
   1226c:	07029e04 	streq	r9, [r2, -r4, lsl #28]
   12270:	00000874 	andeq	r0, r0, r4, ror r8
   12274:	0003c018 	andeq	ip, r3, r8, lsl r0
   12278:	02a10400 	adceq	r0, r1, #0, 8
   1227c:	0008741b 	andeq	r7, r8, fp, lsl r4
   12280:	12180000 	andsne	r0, r8, #0
   12284:	0400000f 	streq	r0, [r0], #-15
   12288:	841802a2 	ldrhi	r0, [r8], #-674	; 0xfffffd5e
   1228c:	78000008 	stmdavc	r0, {r3}
   12290:	03120900 	tsteq	r2, #0, 18
   12294:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
   12298:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   1229c:	1d000000 	stcne	0, cr0, [r0, #-0]
   122a0:	00380900 	eorseq	r0, r8, r0, lsl #18
   122a4:	08940000 	ldmeq	r4, {}	; <UNPREDICTABLE>
   122a8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   122ac:	1d000000 	stcne	0, cr0, [r0, #-0]
   122b0:	04f01c00 	ldrbteq	r1, [r0], #3072	; 0xc00
   122b4:	b9030283 	stmdblt	r3, {r0, r1, r7, r9}
   122b8:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
   122bc:	00000d5f 	andeq	r0, r0, pc, asr sp
   122c0:	0b029a04 	bleq	b8ad8 <__ccfg+0x98b30>
   122c4:	00000708 	andeq	r0, r0, r8, lsl #14
   122c8:	000b521d 	andeq	r5, fp, sp, lsl r2
   122cc:	02a30400 	adceq	r0, r3, #0, 8
   122d0:	00084d0b 	andeq	r4, r8, fp, lsl #26
   122d4:	d3090000 	movwle	r0, #36864	; 0x9000
   122d8:	c9000005 	stmdbgt	r0, {r0, r2}
   122dc:	0a000008 	beq	12304 <__exidx_end+0xc644>
   122e0:	00000038 	andeq	r0, r0, r8, lsr r0
   122e4:	ca120018 	bgt	49234c <__ccfg+0x4723a4>
   122e8:	6c00000e 	stcvs	0, cr0, [r0], {14}
   122ec:	08b20601 	ldmeq	r2!, {r0, r9, sl}
   122f0:	00000950 	andeq	r0, r0, r0, asr r9
   122f4:	0045320c 	subeq	r3, r5, ip, lsl #4
   122f8:	0bb40600 	bleq	fed13b00 <_estack+0xded0eb00>
   122fc:	00000df8 	strdeq	r0, [r0], -r8
   12300:	44e70c00 	strbtmi	r0, [r7], #3072	; 0xc00
   12304:	b5060000 	strlt	r0, [r6, #-0]
   12308:	000e320b 	andeq	r3, lr, fp, lsl #4
   1230c:	7d0ce000 	stcvc	0, cr14, [ip, #-0]
   12310:	06000043 	streq	r0, [r0], -r3, asr #32
   12314:	0e610bb7 	vmoveq.8	d17[5], r0
   12318:	0ce40000 	stcleq	0, cr0, [r4]
   1231c:	000042ed 	andeq	r4, r0, sp, ror #5
   12320:	250ab906 	strcs	fp, [sl, #-2310]	; 0xfffff6fa
   12324:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   12328:	0042b90c 	subeq	fp, r2, ip, lsl #18
   1232c:	0bba0600 	bleq	fee93b34 <_estack+0xdee8eb34>
   12330:	000005cd 	andeq	r0, r0, sp, asr #11
   12334:	42e70cec 	rscmi	r0, r7, #236, 24	; 0xec00
   12338:	bb060000 	bllt	192340 <__ccfg+0x172398>
   1233c:	0009d212 	andeq	sp, r9, r2, lsl r2
   12340:	fb13f000 	blx	50e34a <__ccfg+0x4ee3a2>
   12344:	06000043 	streq	r0, [r0], -r3, asr #32
   12348:	0e670bbd 	vmoveq.8	d23[5], r0
   1234c:	01280000 			; <UNDEFINED> instruction: 0x01280000
   12350:	00441c13 	subeq	r1, r4, r3, lsl ip
   12354:	0bbe0600 	bleq	fef93b5c <_estack+0xdef8eb5c>
   12358:	00000e77 	andeq	r0, r0, r7, ror lr
   1235c:	6d13012a 	ldfvss	f0, [r3, #-168]	; 0xffffff58
   12360:	06000043 	streq	r0, [r0], -r3, asr #32
   12364:	0e770bbf 	vmoveq.s8	r0, d23[5]
   12368:	014a0000 	mrseq	r0, (UNDEF: 74)
   1236c:	c9041100 	stmdbgt	r4, {r8, ip}
   12370:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   12374:	00000961 	andeq	r0, r0, r1, ror #18
   12378:	00047916 	andeq	r7, r4, r6, lsl r9
   1237c:	04110000 	ldreq	r0, [r1], #-0
   12380:	00000956 	andeq	r0, r0, r6, asr r9
   12384:	019c0411 	orrseq	r0, ip, r1, lsl r4
   12388:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
   1238c:	16000009 	strne	r0, [r0], -r9
   12390:	00000025 	andeq	r0, r0, r5, lsr #32
   12394:	7e041100 	adfvcs	f1, f4, f0
   12398:	11000009 	tstne	r0, r9
   1239c:	00096d04 	andeq	r6, r9, r4, lsl #26
   123a0:	066d0900 	strbteq	r0, [sp], -r0, lsl #18
   123a4:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
   123a8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   123ac:	02000000 	andeq	r0, r0, #0
   123b0:	0ac21f00 	beq	ff099fb8 <_estack+0xdf094fb8>
   123b4:	33040000 	movwcc	r0, #16384	; 0x4000
   123b8:	04791703 	ldrbteq	r1, [r9], #-1795	; 0xfffff8fd
   123bc:	bb1f0000 	bllt	7d23c4 <__ccfg+0x7b241c>
   123c0:	0400000a 	streq	r0, [r0], #-10
   123c4:	7f1d0334 	svcvc	0x001d0334
   123c8:	11000004 	tstne	r0, r4
   123cc:	0009b904 	andeq	fp, r9, r4, lsl #18
   123d0:	09ae0e00 	stmibeq	lr!, {r9, sl, fp}
   123d4:	21200000 			; <UNDEFINED> instruction: 0x21200000
   123d8:	00004443 	andeq	r4, r0, r3, asr #8
   123dc:	cd0e6707 	stcgt	7, cr6, [lr, #-28]	; 0xffffffe4
   123e0:	03000005 	movweq	r0, #5
   123e4:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
   123e8:	0b145608 	bleq	527c10 <__ccfg+0x507c68>
   123ec:	0f000001 	svceq	0x00000001
   123f0:	000042e7 	andeq	r4, r0, r7, ror #5
   123f4:	082a0938 	stmdaeq	sl!, {r3, r4, r5, r8, fp}
   123f8:	00000b18 	andeq	r0, r0, r8, lsl fp
   123fc:	0043d00c 	subeq	sp, r3, ip
   12400:	092c0900 	stmdbeq	ip!, {r8, fp}
   12404:	000005cd 	andeq	r0, r0, sp, asr #11
   12408:	44f20c00 	ldrbtmi	r0, [r2], #3072	; 0xc00
   1240c:	2d090000 	stccs	0, cr0, [r9, #-0]
   12410:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12414:	ab0c0400 	blge	31341c <__ccfg+0x2f3474>
   12418:	09000043 	stmdbeq	r0, {r0, r1, r6}
   1241c:	05cd092e 	strbeq	r0, [sp, #2350]	; 0x92e
   12420:	0c080000 	stceq	0, cr0, [r8], {-0}
   12424:	00004312 	andeq	r4, r0, r2, lsl r3
   12428:	cd092f09 	stcgt	15, cr2, [r9, #-36]	; 0xffffffdc
   1242c:	0c000005 	stceq	0, cr0, [r0], {5}
   12430:	0042a90c 	subeq	sl, r2, ip, lsl #18
   12434:	09300900 	ldmdbeq	r0!, {r8, fp}
   12438:	000005cd 	andeq	r0, r0, sp, asr #11
   1243c:	43cc0c10 	bicmi	r0, ip, #16, 24	; 0x1000
   12440:	31090000 	mrscc	r0, (UNDEF: 9)
   12444:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12448:	ee0c1400 	cfcpys	mvf1, mvf12
   1244c:	09000044 	stmdbeq	r0, {r2, r6}
   12450:	05cd0932 	strbeq	r0, [sp, #2354]	; 0x932
   12454:	0c180000 	ldceq	0, cr0, [r8], {-0}
   12458:	000043a7 	andeq	r4, r0, r7, lsr #7
   1245c:	cd093309 	stcgt	3, cr3, [r9, #-36]	; 0xffffffdc
   12460:	1c000005 	stcne	0, cr0, [r0], {5}
   12464:	00440e0c 	subeq	r0, r4, ip, lsl #28
   12468:	09340900 	ldmdbeq	r4!, {r8, fp}
   1246c:	000005cd 	andeq	r0, r0, sp, asr #11
   12470:	43ed0c20 	mvnmi	r0, #32, 24	; 0x2000
   12474:	35090000 	strcc	r0, [r9, #-0]
   12478:	0005cd09 	andeq	ip, r5, r9, lsl #26
   1247c:	520c2400 	andpl	r2, ip, #0, 8
   12480:	09000046 	stmdbeq	r0, {r1, r2, r6}
   12484:	05d30836 	ldrbeq	r0, [r3, #2102]	; 0x836
   12488:	0c280000 	stceq	0, cr0, [r8], #-0
   1248c:	00004656 	andeq	r4, r0, r6, asr r6
   12490:	d3083709 	movwle	r3, #34569	; 0x8709
   12494:	29000005 	stmdbcs	r0, {r0, r2}
   12498:	0043be0c 	subeq	fp, r3, ip, lsl #28
   1249c:	08380900 	ldmdaeq	r8!, {r8, fp}
   124a0:	000005d3 	ldrdeq	r0, [r0], -r3
   124a4:	44510c2a 	ldrbmi	r0, [r1], #-3114	; 0xfffff3d6
   124a8:	39090000 	stmdbcc	r9, {}	; <UNPREDICTABLE>
   124ac:	0005d308 	andeq	sp, r5, r8, lsl #6
   124b0:	640c2b00 	strvs	r2, [ip], #-2816	; 0xfffff500
   124b4:	09000044 	stmdbeq	r0, {r2, r6}
   124b8:	05d3083a 	ldrbeq	r0, [r3, #2106]	; 0x83a
   124bc:	0c2c0000 	stceq	0, cr0, [ip], #-0
   124c0:	000042d8 	ldrdeq	r4, [r0], -r8
   124c4:	d3083b09 	movwle	r3, #35593	; 0x8b09
   124c8:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
   124cc:	00439b0c 	subeq	r9, r3, ip, lsl #22
   124d0:	083c0900 	ldmdaeq	ip!, {r8, fp}
   124d4:	000005d3 	ldrdeq	r0, [r0], -r3
   124d8:	45410c2e 	strbmi	r0, [r1, #-3118]	; 0xfffff3d2
   124dc:	3d090000 	stccc	0, cr0, [r9, #-0]
   124e0:	0005d308 	andeq	sp, r5, r8, lsl #6
   124e4:	600c2f00 	andvs	r2, ip, r0, lsl #30
   124e8:	09000044 	stmdbeq	r0, {r2, r6}
   124ec:	05d3083e 	ldrbeq	r0, [r3, #2110]	; 0x83e
   124f0:	0c300000 	ldceq	0, cr0, [r0], #-0
   124f4:	000042d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   124f8:	d3083f09 	movwle	r3, #36617	; 0x8f09
   124fc:	31000005 	tstcc	r0, r5
   12500:	00453d0c 	subeq	r3, r5, ip, lsl #26
   12504:	08400900 	stmdaeq	r0, {r8, fp}^
   12508:	000005d3 	ldrdeq	r0, [r0], -r3
   1250c:	43ba0c32 			; <UNDEFINED> instruction: 0x43ba0c32
   12510:	41090000 	mrsmi	r0, (UNDEF: 9)
   12514:	0005d308 	andeq	sp, r5, r8, lsl #6
   12518:	4d0c3300 	stcmi	3, cr3, [ip, #-0]
   1251c:	09000044 	stmdbeq	r0, {r2, r6}
   12520:	05d30842 	ldrbeq	r0, [r3, #2114]	; 0x842
   12524:	0c340000 	ldceq	0, cr0, [r4], #-0
   12528:	00004397 	muleq	r0, r7, r3
   1252c:	d3084309 	movwle	r4, #33545	; 0x8309
   12530:	35000005 	strcc	r0, [r0, #-5]
   12534:	44d20f00 	ldrbmi	r0, [r2], #3840	; 0xf00
   12538:	06080000 	streq	r0, [r8], -r0
   1253c:	0b400839 	bleq	1014628 <__ccfg+0xff4680>
   12540:	750c0000 	strvc	r0, [ip, #-0]
   12544:	06000043 	streq	r0, [r0], -r3, asr #32
   12548:	06030f3b 			; <UNDEFINED> instruction: 0x06030f3b
   1254c:	0c000000 	stceq	0, cr0, [r0], {-0}
   12550:	000043fb 	strdeq	r4, [r0], -fp
   12554:	030f3c06 	movweq	r3, #64518	; 0xfc06
   12558:	04000006 	streq	r0, [r0], #-6
   1255c:	0b180600 	bleq	613d64 <__ccfg+0x5f3dbc>
   12560:	37210000 	strcc	r0, [r1, -r0]!
   12564:	06000043 	streq	r0, [r0], -r3, asr #32
   12568:	0b402042 	bleq	101a678 <__ccfg+0xffa6d0>
   1256c:	5f0f0000 	svcpl	0x000f0000
   12570:	3c000043 	stccc	0, cr0, [r0], {67}	; 0x43
   12574:	22084406 	andcs	r4, r8, #100663296	; 0x6000000
   12578:	0c00000c 	stceq	0, cr0, [r0], {12}
   1257c:	00004312 	andeq	r4, r0, r2, lsl r3
   12580:	030f4606 	movweq	r4, #62982	; 0xf606
   12584:	00000006 	andeq	r0, r0, r6
   12588:	0042a90c 	subeq	sl, r2, ip, lsl #18
   1258c:	0f470600 	svceq	0x00470600
   12590:	00000603 	andeq	r0, r0, r3, lsl #12
   12594:	43cc0c04 	bicmi	r0, ip, #4, 24	; 0x400
   12598:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
   1259c:	0006030f 	andeq	r0, r6, pc, lsl #6
   125a0:	ee0c0800 	cdp	8, 0, cr0, cr12, cr0, {0}
   125a4:	06000044 	streq	r0, [r0], -r4, asr #32
   125a8:	06030f49 	streq	r0, [r3], -r9, asr #30
   125ac:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   125b0:	000043a7 	andeq	r4, r0, r7, lsr #7
   125b4:	030f4a06 	movweq	r4, #64006	; 0xfa06
   125b8:	10000006 	andne	r0, r0, r6
   125bc:	00440e0c 	subeq	r0, r4, ip, lsl #28
   125c0:	0f4b0600 	svceq	0x004b0600
   125c4:	00000603 	andeq	r0, r0, r3, lsl #12
   125c8:	43ed0c14 	mvnmi	r0, #20, 24	; 0x1400
   125cc:	4c060000 	stcmi	0, cr0, [r6], {-0}
   125d0:	0006030f 	andeq	r0, r6, pc, lsl #6
   125d4:	520c1800 	andpl	r1, ip, #0, 16
   125d8:	06000046 	streq	r0, [r0], -r6, asr #32
   125dc:	06030f4d 	streq	r0, [r3], -sp, asr #30
   125e0:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   125e4:	00004656 	andeq	r4, r0, r6, asr r6
   125e8:	030f4e06 	movweq	r4, #65030	; 0xfe06
   125ec:	20000006 	andcs	r0, r0, r6
   125f0:	0043be0c 	subeq	fp, r3, ip, lsl #28
   125f4:	0f4f0600 	svceq	0x004f0600
   125f8:	00000603 	andeq	r0, r0, r3, lsl #12
   125fc:	44510c24 	ldrbmi	r0, [r1], #-3108	; 0xfffff3dc
   12600:	50060000 	andpl	r0, r6, r0
   12604:	0006030f 	andeq	r0, r6, pc, lsl #6
   12608:	640c2800 	strvs	r2, [ip], #-2048	; 0xfffff800
   1260c:	06000044 	streq	r0, [r0], -r4, asr #32
   12610:	06030f51 			; <UNDEFINED> instruction: 0x06030f51
   12614:	0c2c0000 	stceq	0, cr0, [ip], #-0
   12618:	000042d8 	ldrdeq	r4, [r0], -r8
   1261c:	030f5206 	movweq	r5, #61958	; 0xf206
   12620:	30000006 	andcc	r0, r0, r6
   12624:	00439b0c 	subeq	r9, r3, ip, lsl #22
   12628:	0f530600 	svceq	0x00530600
   1262c:	00000603 	andeq	r0, r0, r3, lsl #12
   12630:	45410c34 	strbmi	r0, [r1, #-3124]	; 0xfffff3cc
   12634:	54060000 	strpl	r0, [r6], #-0
   12638:	0006030f 	andeq	r0, r6, pc, lsl #6
   1263c:	06003800 	streq	r3, [r0], -r0, lsl #16
   12640:	00000b51 	andeq	r0, r0, r1, asr fp
   12644:	00451f21 	subeq	r1, r5, r1, lsr #30
   12648:	23650600 	cmncs	r5, #0, 12
   1264c:	00000c22 	andeq	r0, r0, r2, lsr #24
   12650:	0042f60f 	subeq	pc, r2, pc, lsl #12
   12654:	67060c00 	strvs	r0, [r6, -r0, lsl #24]
   12658:	000c6808 	andeq	r6, ip, r8, lsl #16
   1265c:	43d00c00 	bicsmi	r0, r0, #0, 24
   12660:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
   12664:	0006030f 	andeq	r0, r6, pc, lsl #6
   12668:	f20c0000 	vhadd.s8	d0, d12, d0
   1266c:	06000044 	streq	r0, [r0], -r4, asr #32
   12670:	06030f6a 	streq	r0, [r3], -sl, ror #30
   12674:	0c040000 	stceq	0, cr0, [r4], {-0}
   12678:	000043ab 	andeq	r4, r0, fp, lsr #7
   1267c:	030f6b06 	movweq	r6, #64262	; 0xfb06
   12680:	08000006 	stmdaeq	r0, {r1, r2}
   12684:	0c330600 	ldceq	6, cr0, [r3], #-0
   12688:	97210000 	strls	r0, [r1, -r0]!
   1268c:	06000042 	streq	r0, [r0], -r2, asr #32
   12690:	0c682272 	sfmeq	f2, 2, [r8], #-456	; 0xfffffe38
   12694:	220f0000 	andcs	r0, pc, #0
   12698:	fc000043 	stc2	0, cr0, [r0], {67}	; 0x43
   1269c:	64087406 	strvs	r7, [r8], #-1030	; 0xfffffbfa
   126a0:	1000000d 	andne	r0, r0, sp
   126a4:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
   126a8:	690f7606 	stmdbvs	pc, {r1, r2, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
   126ac:	0000000d 	andeq	r0, r0, sp
   126b0:	00466b0c 	subeq	r6, r6, ip, lsl #22
   126b4:	0f770600 	svceq	0x00770600
   126b8:	00000d69 	andeq	r0, r0, r9, ror #26
   126bc:	034b0c30 	movteq	r0, #48176	; 0xbc30
   126c0:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
   126c4:	000d790f 	andeq	r7, sp, pc, lsl #18
   126c8:	170c6000 	strne	r6, [ip, -r0]
   126cc:	06000045 	streq	r0, [r0], -r5, asr #32
   126d0:	0d790f79 	ldcleq	15, cr0, [r9, #-484]!	; 0xfffffe1c
   126d4:	0c7c0000 	ldcleq	0, cr0, [ip], #-0
   126d8:	000043b4 			; <UNDEFINED> instruction: 0x000043b4
   126dc:	030f7a06 	movweq	r7, #64006	; 0xfa06
   126e0:	98000006 	stmdals	r0, {r1, r2}
   126e4:	00443d0c 	subeq	r3, r4, ip, lsl #26
   126e8:	0f7b0600 	svceq	0x007b0600
   126ec:	00000603 	andeq	r0, r0, r3, lsl #12
   126f0:	43de0c9c 	bicsmi	r0, lr, #156, 24	; 0x9c00
   126f4:	7c060000 	stcvc	0, cr0, [r6], {-0}
   126f8:	0006030f 	andeq	r0, r6, pc, lsl #6
   126fc:	470ca000 	strmi	sl, [ip, -r0]
   12700:	06000043 	streq	r0, [r0], -r3, asr #32
   12704:	0d890f7d 	stceq	15, cr0, [r9, #500]	; 0x1f4
   12708:	0ca40000 	stceq	0, cr0, [r4]
   1270c:	000043e4 	andeq	r4, r0, r4, ror #7
   12710:	030f7e06 	movweq	r7, #65030	; 0xfe06
   12714:	ac000006 	stcge	0, cr0, [r0], {6}
   12718:	0046670c 	subeq	r6, r6, ip, lsl #14
   1271c:	0f7f0600 	svceq	0x007f0600
   12720:	00000d69 	andeq	r0, r0, r9, ror #26
   12724:	44b00cb0 	ldrtmi	r0, [r0], #3248	; 0xcb0
   12728:	80060000 	andhi	r0, r6, r0
   1272c:	0006030f 	andeq	r0, r6, pc, lsl #6
   12730:	000ce000 	andeq	lr, ip, r0
   12734:	06000045 	streq	r0, [r0], -r5, asr #32
   12738:	06030f81 	streq	r0, [r3], -r1, lsl #31
   1273c:	10e40000 	rscne	r0, r4, r0
   12740:	00617265 	rsbeq	r7, r1, r5, ror #4
   12744:	030f8206 	movweq	r8, #61958	; 0xf206
   12748:	e8000006 	stmda	r0, {r1, r2}
   1274c:	0044c80c 	subeq	ip, r4, ip, lsl #16
   12750:	0f830600 	svceq	0x00830600
   12754:	00000603 	andeq	r0, r0, r3, lsl #12
   12758:	434d0cec 	movtmi	r0, #56556	; 0xdcec
   1275c:	84060000 	strhi	r0, [r6], #-0
   12760:	0006030f 	andeq	r0, r6, pc, lsl #6
   12764:	dd0cf000 	stcle	0, cr15, [ip, #-0]
   12768:	06000044 	streq	r0, [r0], -r4, asr #32
   1276c:	06030f85 	streq	r0, [r3], -r5, lsl #31
   12770:	0cf40000 	ldcleq	0, cr0, [r4]
   12774:	0000432c 	andeq	r4, r0, ip, lsr #6
   12778:	030f8606 	movweq	r8, #62982	; 0xf606
   1277c:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
   12780:	0c790600 	ldcleq	6, cr0, [r9], #-0
   12784:	03090000 	movweq	r0, #36864	; 0x9000
   12788:	79000006 	stmdbvc	r0, {r1, r2}
   1278c:	0a00000d 	beq	127c8 <__exidx_end+0xcb08>
   12790:	00000038 	andeq	r0, r0, r8, lsr r0
   12794:	0309000b 	movweq	r0, #36875	; 0x900b
   12798:	89000006 	stmdbhi	r0, {r1, r2}
   1279c:	0a00000d 	beq	127d8 <__exidx_end+0xcb18>
   127a0:	00000038 	andeq	r0, r0, r8, lsr r0
   127a4:	03090006 	movweq	r0, #36870	; 0x9006
   127a8:	99000006 	stmdbls	r0, {r1, r2}
   127ac:	0a00000d 	beq	127e8 <__exidx_end+0xcb28>
   127b0:	00000038 	andeq	r0, r0, r8, lsr r0
   127b4:	03210001 			; <UNDEFINED> instruction: 0x03210001
   127b8:	06000043 	streq	r0, [r0], -r3, asr #32
   127bc:	0d641f9a 	stcleq	15, cr1, [r4, #-616]!	; 0xfffffd98
   127c0:	090f0000 	stmdbeq	pc, {}	; <UNPREDICTABLE>
   127c4:	10000045 	andne	r0, r0, r5, asr #32
   127c8:	e7089c06 	str	r9, [r8, -r6, lsl #24]
   127cc:	0c00000d 	stceq	0, cr0, [r0], {13}
   127d0:	000044c0 	andeq	r4, r0, r0, asr #9
   127d4:	030f9e06 	movweq	r9, #65030	; 0xfe06
   127d8:	00000006 	andeq	r0, r0, r6
   127dc:	0044360c 	subeq	r3, r4, ip, lsl #12
   127e0:	0f9f0600 	svceq	0x009f0600
   127e4:	00000603 	andeq	r0, r0, r3, lsl #12
   127e8:	44b90c04 	ldrtmi	r0, [r9], #3076	; 0xc04
   127ec:	a0060000 	andge	r0, r6, r0
   127f0:	0006030f 	andeq	r0, r6, pc, lsl #6
   127f4:	590c0800 	stmdbpl	ip, {fp}
   127f8:	06000043 	streq	r0, [r0], -r3, asr #32
   127fc:	06030fa1 	streq	r0, [r3], -r1, lsr #31
   12800:	000c0000 	andeq	r0, ip, r0
   12804:	000da506 	andeq	sl, sp, r6, lsl #10
   12808:	43842100 	orrmi	r2, r4, #0, 2
   1280c:	aa060000 	bge	192814 <__ccfg+0x17286c>
   12810:	000de723 	andeq	lr, sp, r3, lsr #14
   12814:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   12818:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   1281c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12820:	06000000 	streq	r0, [r0], -r0
   12824:	0000380a 	andeq	r3, r0, sl, lsl #16
   12828:	15001f00 	strne	r1, [r0, #-3840]	; 0xfffff100
   1282c:	00000025 	andeq	r0, r0, r5, lsr #32
   12830:	00000e2c 	andeq	r0, r0, ip, lsr #28
   12834:	00047916 	andeq	r7, r4, r6, lsl r9
   12838:	05cd1600 	strbeq	r1, [sp, #1536]	; 0x600
   1283c:	3f160000 	svccc	0x00160000
   12840:	16000000 	strne	r0, [r0], -r0
   12844:	00000e2c 	andeq	r0, r0, ip, lsr #28
   12848:	c6041100 	strgt	r1, [r4], -r0, lsl #2
   1284c:	11000009 	tstne	r0, r9
   12850:	000e0e04 	andeq	r0, lr, r4, lsl #28
   12854:	00251500 	eoreq	r1, r5, r0, lsl #10
   12858:	0e5b0000 	cdpeq	0, 5, cr0, cr11, cr0, {0}
   1285c:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   12860:	16000004 	strne	r0, [r0], -r4
   12864:	00000e5b 	andeq	r0, r0, fp, asr lr
   12868:	00060316 	andeq	r0, r6, r6, lsl r3
   1286c:	002c1600 	eoreq	r1, ip, r0, lsl #12
   12870:	2c160000 	ldccs	0, cr0, [r6], {-0}
   12874:	0000000e 	andeq	r0, r0, lr
   12878:	003f0411 	eorseq	r0, pc, r1, lsl r4	; <UNPREDICTABLE>
   1287c:	04110000 	ldreq	r0, [r1], #-0
   12880:	00000e38 	andeq	r0, r0, r8, lsr lr
   12884:	0005d309 	andeq	sp, r5, r9, lsl #6
   12888:	000e7700 	andeq	r7, lr, r0, lsl #14
   1288c:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12890:	00010000 	andeq	r0, r1, r0
   12894:	0005d309 	andeq	sp, r5, r9, lsl #6
   12898:	000e8700 	andeq	r8, lr, r0, lsl #14
   1289c:	00380a00 	eorseq	r0, r8, r0, lsl #20
   128a0:	001f0000 	andseq	r0, pc, r0
   128a4:	00166422 	andseq	r6, r6, r2, lsr #8
   128a8:	091f0a00 	ldmdbeq	pc, {r9, fp}	; <UNPREDICTABLE>
   128ac:	00000117 	andeq	r0, r0, r7, lsl r1
   128b0:	00004934 	andeq	r4, r0, r4, lsr r9
   128b4:	000000aa 	andeq	r0, r0, sl, lsr #1
   128b8:	0f289c01 	svceq	0x00289c01
   128bc:	c3230000 			; <UNDEFINED> instruction: 0xc3230000
   128c0:	01000042 	tsteq	r0, r2, asr #32
   128c4:	01191a31 	tsteq	r9, r1, lsr sl
   128c8:	50010000 	andpl	r0, r1, r0
   128cc:	00466224 	subeq	r6, r6, r4, lsr #4
   128d0:	19320100 	ldmdbne	r2!, {r8}
   128d4:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
   128d8:	0000565c 	andeq	r5, r0, ip, asr r6
   128dc:	00005650 	andeq	r5, r0, r0, asr r6
   128e0:	00464d24 	subeq	r4, r6, r4, lsr #26
   128e4:	09330100 	ldmdbeq	r3!, {r8}
   128e8:	0000002c 	andeq	r0, r0, ip, lsr #32
   128ec:	000056d7 	ldrdeq	r5, [r0], -r7
   128f0:	000056af 	andeq	r5, r0, pc, lsr #13
   128f4:	74736425 	ldrbtvc	r6, [r3], #-1061	; 0xfffffbdb
   128f8:	09420100 	stmdbeq	r2, {r8}^
   128fc:	000005cd 	andeq	r0, r0, sp, asr #11
   12900:	00005816 	andeq	r5, r0, r6, lsl r8
   12904:	00005806 	andeq	r5, r0, r6, lsl #16
   12908:	63727325 	cmnvs	r2, #-1811939328	; 0x94000000
   1290c:	0f430100 	svceq	0x00430100
   12910:	00000603 	andeq	r0, r0, r3, lsl #12
   12914:	00005899 	muleq	r0, r9, r8
   12918:	00005889 	andeq	r5, r0, r9, lsl #17
   1291c:	0042c826 	subeq	ip, r2, r6, lsr #16
   12920:	09440100 	stmdbeq	r4, {r8}^
   12924:	00000f28 	andeq	r0, r0, r8, lsr #30
   12928:	0000592a 	andeq	r5, r0, sl, lsr #18
   1292c:	00005912 	andeq	r5, r0, r2, lsl r9
   12930:	00454d26 	subeq	r4, r5, r6, lsr #26
   12934:	0f450100 	svceq	0x00450100
   12938:	00000f2e 	andeq	r0, r0, lr, lsr #30
   1293c:	00005a21 	andeq	r5, r0, r1, lsr #20
   12940:	00005a09 	andeq	r5, r0, r9, lsl #20
   12944:	83041100 	movwhi	r1, #16640	; 0x4100
   12948:	11000000 	mrsne	r0, (UNDEF: 0)
   1294c:	00008a04 	andeq	r8, r0, r4, lsl #20
   12950:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
   12954:	00040000 	andeq	r0, r4, r0
   12958:	000043af 	andeq	r4, r0, pc, lsr #7
   1295c:	45590104 	ldrbmi	r0, [r9, #-260]	; 0xfffffefc
   12960:	710c0000 	mrsvc	r0, (UNDEF: 12)
   12964:	a6000046 	strge	r0, [r0], -r6, asr #32
   12968:	e0000046 	and	r0, r0, r6, asr #32
   1296c:	4c000049 	stcmi	0, cr0, [r0], {73}	; 0x49
   12970:	d6000000 	strle	r0, [r0], -r0
   12974:	02000090 	andeq	r0, r0, #144	; 0x90
   12978:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
   1297c:	04030000 	streq	r0, [r3], #-0
   12980:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   12984:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   12988:	000007f8 	strdeq	r0, [r0], -r8
   1298c:	2a040802 	bcs	11499c <__ccfg+0xf49f4>
   12990:	04000044 	streq	r0, [r0], #-68	; 0xffffffbc
   12994:	00000bd5 	ldrdeq	r0, [r0], -r5
   12998:	17016502 	strne	r6, [r1, -r2, lsl #10]
   1299c:	00000025 	andeq	r0, r0, r5, lsr #32
   129a0:	5d060102 	stfpls	f0, [r6, #-8]
   129a4:	0200000c 	andeq	r0, r0, #12
   129a8:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
   129ac:	02020000 	andeq	r0, r2, #0
   129b0:	000a6b05 	andeq	r6, sl, r5, lsl #22
   129b4:	07020200 	streq	r0, [r2, -r0, lsl #4]
   129b8:	00000d66 	andeq	r0, r0, r6, ror #26
   129bc:	fd050402 	stc2	4, cr0, [r5, #-8]
   129c0:	02000007 	andeq	r0, r0, #7
   129c4:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
   129c8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   129cc:	00042107 	andeq	r2, r4, r7, lsl #2
   129d0:	0e490500 	cdpeq	5, 4, cr0, cr9, cr0, {0}
   129d4:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
   129d8:	00006a0e 	andeq	r6, r0, lr, lsl #20
   129dc:	02ff0500 	rscseq	r0, pc, #0, 10
   129e0:	74030000 	strvc	r0, [r3], #-0
   129e4:	00006a0e 	andeq	r6, r0, lr, lsl #20
   129e8:	03040600 	movweq	r0, #17920	; 0x4600
   129ec:	00b903a5 	adcseq	r0, r9, r5, lsr #7
   129f0:	6c070000 	stcvs	0, cr0, [r7], {-0}
   129f4:	03000007 	movweq	r0, #7
   129f8:	00410ca7 	subeq	r0, r1, r7, lsr #25
   129fc:	b4070000 	strlt	r0, [r7], #-0
   12a00:	0300000a 	movweq	r0, #10
   12a04:	00b913a8 	adcseq	r1, r9, r8, lsr #7
   12a08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12a0c:	00000055 	andeq	r0, r0, r5, asr r0
   12a10:	000000c9 	andeq	r0, r0, r9, asr #1
   12a14:	00002509 	andeq	r2, r0, r9, lsl #10
   12a18:	0a000300 	beq	13620 <__exidx_end+0xd960>
   12a1c:	09a20308 	stmibeq	r2!, {r3, r8, r9}
   12a20:	000000ed 	andeq	r0, r0, sp, ror #1
   12a24:	00038e0b 	andeq	r8, r3, fp, lsl #28
   12a28:	07a40300 	streq	r0, [r4, r0, lsl #6]!
   12a2c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12a30:	06010b00 	streq	r0, [r1], -r0, lsl #22
   12a34:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
   12a38:	00009705 	andeq	r9, r0, r5, lsl #14
   12a3c:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
   12a40:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
   12a44:	c903aa03 	stmdbgt	r3, {r0, r1, r9, fp, sp, pc}
   12a48:	0c000000 	stceq	0, cr0, [r0], {-0}
   12a4c:	08420504 	stmdaeq	r2, {r2, r8, sl}^
   12a50:	16040000 	strne	r0, [r4], -r0
   12a54:	00007119 	andeq	r7, r0, r9, lsl r1
   12a58:	02530500 	subseq	r0, r3, #0, 10
   12a5c:	0c050000 	stceq	0, cr0, [r5], {-0}
   12a60:	00002c0d 	andeq	r2, r0, sp, lsl #24
   12a64:	072a0500 	streq	r0, [sl, -r0, lsl #10]!
   12a68:	23040000 	movwcs	r0, #16384	; 0x4000
   12a6c:	0001071b 	andeq	r0, r1, fp, lsl r7
   12a70:	03320d00 	teqeq	r2, #0, 26
   12a74:	04180000 	ldreq	r0, [r8], #-0
   12a78:	01790834 	cmneq	r9, r4, lsr r8
   12a7c:	c40b0000 	strgt	r0, [fp], #-0
   12a80:	0400000e 	streq	r0, [r0], #-14
   12a84:	01791336 	cmneq	r9, r6, lsr r3
   12a88:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   12a8c:	04006b5f 	streq	r6, [r0], #-2911	; 0xfffff4a1
   12a90:	002c0737 	eoreq	r0, ip, r7, lsr r7
   12a94:	0b040000 	bleq	112a9c <__ccfg+0xf2af4>
   12a98:	00000b62 	andeq	r0, r0, r2, ror #22
   12a9c:	2c0b3704 	stccs	7, cr3, [fp], {4}
   12aa0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12aa4:	0043f50b 	subeq	pc, r3, fp, lsl #10
   12aa8:	14370400 	ldrtne	r0, [r7], #-1024	; 0xfffffc00
   12aac:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ab0:	04550b0c 	ldrbeq	r0, [r5], #-2828	; 0xfffff4f4
   12ab4:	37040000 	strcc	r0, [r4, -r0]
   12ab8:	00002c1b 	andeq	r2, r0, fp, lsl ip
   12abc:	5f0e1000 	svcpl	0x000e1000
   12ac0:	38040078 	stmdacc	r4, {r3, r4, r5, r6}
   12ac4:	00017f0b 	andeq	r7, r1, fp, lsl #30
   12ac8:	0f001400 	svceq	0x00001400
   12acc:	00011f04 	andeq	r1, r1, r4, lsl #30
   12ad0:	00fb0800 	rscseq	r0, fp, r0, lsl #16
   12ad4:	018f0000 	orreq	r0, pc, r0
   12ad8:	25090000 	strcs	r0, [r9, #-0]
   12adc:	00000000 	andeq	r0, r0, r0
   12ae0:	0b7d0d00 	bleq	1f55ee8 <__ccfg+0x1f35f40>
   12ae4:	04240000 	strteq	r0, [r4], #-0
   12ae8:	0212083c 	andseq	r0, r2, #60, 16	; 0x3c0000
   12aec:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
   12af0:	04000005 	streq	r0, [r0], #-5
   12af4:	002c093e 	eoreq	r0, ip, lr, lsr r9
   12af8:	0b000000 	bleq	12b00 <__exidx_end+0xce40>
   12afc:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
   12b00:	2c093f04 	stccs	15, cr3, [r9], {4}
   12b04:	04000000 	streq	r0, [r0], #-0
   12b08:	0003580b 	andeq	r5, r3, fp, lsl #16
   12b0c:	09400400 	stmdbeq	r0, {sl}^
   12b10:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b14:	06740b08 	ldrbteq	r0, [r4], -r8, lsl #22
   12b18:	41040000 	mrsmi	r0, (UNDEF: 4)
   12b1c:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b20:	540b0c00 	strpl	r0, [fp], #-3072	; 0xfffff400
   12b24:	04000009 	streq	r0, [r0], #-9
   12b28:	002c0942 	eoreq	r0, ip, r2, asr #18
   12b2c:	0b100000 	bleq	412b34 <__ccfg+0x3f2b8c>
   12b30:	00000ace 	andeq	r0, r0, lr, asr #21
   12b34:	2c094304 	stccs	3, cr4, [r9], {4}
   12b38:	14000000 	strne	r0, [r0], #-0
   12b3c:	0003460b 	andeq	r4, r3, fp, lsl #12
   12b40:	09440400 	stmdbeq	r4, {sl}^
   12b44:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b48:	05750b18 	ldrbeq	r0, [r5, #-2840]!	; 0xfffff4e8
   12b4c:	45040000 	strmi	r0, [r4, #-0]
   12b50:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b54:	f00b1c00 			; <UNDEFINED> instruction: 0xf00b1c00
   12b58:	04000008 	streq	r0, [r0], #-8
   12b5c:	002c0946 	eoreq	r0, ip, r6, asr #18
   12b60:	00200000 	eoreq	r0, r0, r0
   12b64:	00003b10 	andeq	r3, r0, r0, lsl fp
   12b68:	04010800 	streq	r0, [r1], #-2048	; 0xfffff800
   12b6c:	0257084f 	subseq	r0, r7, #5177344	; 0x4f0000
   12b70:	2d0b0000 	stccs	0, cr0, [fp, #-0]
   12b74:	0400000d 	streq	r0, [r0], #-13
   12b78:	02570a50 	subseq	r0, r7, #80, 20	; 0x50000
   12b7c:	0b000000 	bleq	12b84 <__exidx_end+0xcec4>
   12b80:	00000c17 	andeq	r0, r0, r7, lsl ip
   12b84:	57095104 	strpl	r5, [r9, -r4, lsl #2]
   12b88:	80000002 	andhi	r0, r0, r2
   12b8c:	000dc611 	andeq	ip, sp, r1, lsl r6
   12b90:	0a530400 	beq	14d3b98 <__ccfg+0x14b3bf0>
   12b94:	000000fb 	strdeq	r0, [r0], -fp
   12b98:	b7110100 	ldrlt	r0, [r1, -r0, lsl #2]
   12b9c:	0400000e 	streq	r0, [r0], #-14
   12ba0:	00fb0a56 	rscseq	r0, fp, r6, asr sl
   12ba4:	01040000 	mrseq	r0, (UNDEF: 4)
   12ba8:	00f90800 	rscseq	r0, r9, r0, lsl #16
   12bac:	02670000 	rsbeq	r0, r7, #0
   12bb0:	25090000 	strcs	r0, [r9, #-0]
   12bb4:	1f000000 	svcne	0x00000000
   12bb8:	0a161000 	beq	596bc0 <__ccfg+0x576c18>
   12bbc:	01900000 	orrseq	r0, r0, r0
   12bc0:	aa086204 	bge	22b3d8 <__ccfg+0x20b430>
   12bc4:	0b000002 	bleq	12bd4 <__exidx_end+0xcf14>
   12bc8:	00000ec4 	andeq	r0, r0, r4, asr #29
   12bcc:	aa126304 	bge	4ab7e4 <__ccfg+0x48b83c>
   12bd0:	00000002 	andeq	r0, r0, r2
   12bd4:	0005840b 	andeq	r8, r5, fp, lsl #8
   12bd8:	06640400 	strbteq	r0, [r4], -r0, lsl #8
   12bdc:	0000002c 	andeq	r0, r0, ip, lsr #32
   12be0:	03070b04 	movweq	r0, #31492	; 0x7b04
   12be4:	66040000 	strvs	r0, [r4], -r0
   12be8:	0002b009 	andeq	fp, r2, r9
   12bec:	3b0b0800 	blcc	2d4bf4 <__ccfg+0x2b4c4c>
   12bf0:	04000000 	streq	r0, [r0], #-0
   12bf4:	02121e67 	andseq	r1, r2, #1648	; 0x670
   12bf8:	00880000 	addeq	r0, r8, r0
   12bfc:	0267040f 	rsbeq	r0, r7, #251658240	; 0xf000000
   12c00:	c0080000 	andgt	r0, r8, r0
   12c04:	c0000002 	andgt	r0, r0, r2
   12c08:	09000002 	stmdbeq	r0, {r1}
   12c0c:	00000025 	andeq	r0, r0, r5, lsr #32
   12c10:	040f001f 	streq	r0, [pc], #-31	; 12c18 <__exidx_end+0xcf58>
   12c14:	000002c6 	andeq	r0, r0, r6, asr #5
   12c18:	0cc50d12 	stcleq	13, cr0, [r5], {18}
   12c1c:	04080000 	streq	r0, [r8], #-0
   12c20:	02ef087a 	rsceq	r0, pc, #7995392	; 0x7a0000
   12c24:	d70b0000 	strle	r0, [fp, -r0]
   12c28:	0400000c 	streq	r0, [r0], #-12
   12c2c:	02ef117b 	rsceq	r1, pc, #-1073741794	; 0xc000001e
   12c30:	0b000000 	bleq	12c38 <__exidx_end+0xcf78>
   12c34:	00001da0 	andeq	r1, r0, r0, lsr #27
   12c38:	2c067c04 	stccs	12, cr7, [r6], {4}
   12c3c:	04000000 	streq	r0, [r0], #-0
   12c40:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
   12c44:	0d000000 	stceq	0, cr0, [r0, #-0]
   12c48:	0000044d 	andeq	r0, r0, sp, asr #8
   12c4c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
   12c50:	00000438 	andeq	r0, r0, r8, lsr r4
   12c54:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
   12c58:	ef12bb04 	svc	0x0012bb04
   12c5c:	00000002 	andeq	r0, r0, r2
   12c60:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   12c64:	2c07bc04 	stccs	12, cr11, [r7], {4}
   12c68:	04000000 	streq	r0, [r0], #-0
   12c6c:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   12c70:	2c07bd04 	stccs	13, cr11, [r7], {4}
   12c74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12c78:	0001c40b 	andeq	ip, r1, fp, lsl #8
   12c7c:	09be0400 	ldmibeq	lr!, {sl}
   12c80:	0000005c 	andeq	r0, r0, ip, asr r0
   12c84:	08590b0c 	ldmdaeq	r9, {r2, r3, r8, r9, fp}^
   12c88:	bf040000 	svclt	0x00040000
   12c8c:	00005c09 	andeq	r5, r0, r9, lsl #24
   12c90:	5f0e0e00 	svcpl	0x000e0e00
   12c94:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
   12c98:	02c711c0 	sbceq	r1, r7, #192, 2	; 0x30
   12c9c:	0b100000 	bleq	412ca4 <__ccfg+0x3f2cfc>
   12ca0:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   12ca4:	2c07c104 	stfcsd	f4, [r7], {4}
   12ca8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   12cac:	00030c0b 	andeq	r0, r3, fp, lsl #24
   12cb0:	0ac80400 	beq	ff213cb8 <_estack+0xdf20ecb8>
   12cb4:	000000f9 	strdeq	r0, [r0], -r9
   12cb8:	1d2f0b1c 	vstmdbne	pc!, {d0-d13}
   12cbc:	ca040000 	bgt	112cc4 <__ccfg+0xf2d1c>
   12cc0:	0005bc1d 	andeq	fp, r5, sp, lsl ip
   12cc4:	f60b2000 			; <UNDEFINED> instruction: 0xf60b2000
   12cc8:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
   12ccc:	05e61dcc 	strbeq	r1, [r6, #3532]!	; 0xdcc
   12cd0:	0b240000 	bleq	912cd8 <__ccfg+0x8f2d30>
   12cd4:	00000ee4 	andeq	r0, r0, r4, ror #29
   12cd8:	0a0dcf04 	beq	3868f0 <__ccfg+0x366948>
   12cdc:	28000006 	stmdacs	r0, {r1, r2}
   12ce0:	001ce40b 	andseq	lr, ip, fp, lsl #8
   12ce4:	09d00400 	ldmibeq	r0, {sl}^
   12ce8:	00000624 	andeq	r0, r0, r4, lsr #12
   12cec:	755f0e2c 	ldrbvc	r0, [pc, #-3628]	; 11ec8 <__exidx_end+0xc208>
   12cf0:	d3040062 	movwle	r0, #16482	; 0x4062
   12cf4:	0002c711 	andeq	ip, r2, r1, lsl r7
   12cf8:	5f0e3000 	svcpl	0x000e3000
   12cfc:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
   12d00:	02ef12d4 	rsceq	r1, pc, #212, 4	; 0x4000000d
   12d04:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
   12d08:	0072755f 	rsbseq	r7, r2, pc, asr r5
   12d0c:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
   12d10:	3c000000 	stccc	0, cr0, [r0], {-0}
   12d14:	000f1b0b 	andeq	r1, pc, fp, lsl #22
   12d18:	11d80400 	bicsne	r0, r8, r0, lsl #8
   12d1c:	0000062a 	andeq	r0, r0, sl, lsr #12
   12d20:	0e640b40 	vnmuleq.f64	d16, d4, d0
   12d24:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
   12d28:	00063a11 	andeq	r3, r6, r1, lsl sl
   12d2c:	5f0e4300 	svcpl	0x000e4300
   12d30:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
   12d34:	02c711dc 	sbceq	r1, r7, #220, 2	; 0x37
   12d38:	0b440000 	bleq	1112d40 <__ccfg+0x10f2d98>
   12d3c:	00000b74 	andeq	r0, r0, r4, ror fp
   12d40:	2c07df04 	stccs	15, cr13, [r7], {4}
   12d44:	4c000000 	stcmi	0, cr0, [r0], {-0}
   12d48:	00047c0b 	andeq	r7, r4, fp, lsl #24
   12d4c:	0ae00400 	beq	ff813d54 <_estack+0xdf80ed54>
   12d50:	0000007f 	andeq	r0, r0, pc, ror r0
   12d54:	47530b50 			; <UNDEFINED> instruction: 0x47530b50
   12d58:	e3040000 	movw	r0, #16384	; 0x4000
   12d5c:	00045612 	andeq	r5, r4, r2, lsl r6
   12d60:	9a0b5400 	bls	2e7d68 <__ccfg+0x2c7dc0>
   12d64:	0400000b 	streq	r0, [r0], #-11
   12d68:	01130ce7 	tsteq	r3, r7, ror #25
   12d6c:	0b580000 	bleq	1612d74 <__ccfg+0x15f2dcc>
   12d70:	00000a1e 	andeq	r0, r0, lr, lsl sl
   12d74:	ed0ee904 	vstr.16	s28, [lr, #-8]
   12d78:	5c000000 	stcpl	0, cr0, [r0], {-0}
   12d7c:	000e970b 	andeq	r9, lr, fp, lsl #14
   12d80:	09ea0400 	stmibeq	sl!, {sl}^
   12d84:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d88:	2c130064 	ldccs	0, cr0, [r3], {100}	; 0x64
   12d8c:	56000000 	strpl	r0, [r0], -r0
   12d90:	14000004 	strne	r0, [r0], #-4
   12d94:	00000456 	andeq	r0, r0, r6, asr r4
   12d98:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   12d9c:	05aa1400 	streq	r1, [sl, #1024]!	; 0x400
   12da0:	2c140000 	ldccs	0, cr0, [r4], {-0}
   12da4:	00000000 	andeq	r0, r0, r0
   12da8:	0461040f 	strbteq	r0, [r1], #-1039	; 0xfffffbf1
   12dac:	56150000 	ldrpl	r0, [r5], -r0
   12db0:	16000004 	strne	r0, [r0], -r4
   12db4:	00000d5f 	andeq	r0, r0, pc, asr sp
   12db8:	65040428 	strvs	r0, [r4, #-1064]	; 0xfffffbd8
   12dbc:	05aa0802 	streq	r0, [sl, #2050]!	; 0x802
   12dc0:	04170000 	ldreq	r0, [r7], #-0
   12dc4:	04000009 	streq	r0, [r0], #-9
   12dc8:	2c070267 	sfmcs	f0, 4, [r7], {103}	; 0x67
   12dcc:	00000000 	andeq	r0, r0, r0
   12dd0:	0007e217 	andeq	lr, r7, r7, lsl r2
   12dd4:	026c0400 	rsbeq	r0, ip, #0, 8
   12dd8:	0006960b 	andeq	r9, r6, fp, lsl #12
   12ddc:	f7170400 			; <UNDEFINED> instruction: 0xf7170400
   12de0:	04000002 	streq	r0, [r0], #-2
   12de4:	9614026c 	ldrls	r0, [r4], -ip, ror #4
   12de8:	08000006 	stmdaeq	r0, {r1, r2}
   12dec:	000f0a17 	andeq	r0, pc, r7, lsl sl	; <UNPREDICTABLE>
   12df0:	026c0400 	rsbeq	r0, ip, #0, 8
   12df4:	0006961e 	andeq	r9, r6, lr, lsl r6
   12df8:	7f170c00 	svcvc	0x00170c00
   12dfc:	04000005 	streq	r0, [r0], #-5
   12e00:	2c08026e 	sfmcs	f0, 4, [r8], {110}	; 0x6e
   12e04:	10000000 	andne	r0, r0, r0
   12e08:	0004d417 	andeq	sp, r4, r7, lsl r4
   12e0c:	026f0400 	rsbeq	r0, pc, #0, 8
   12e10:	00089608 	andeq	r9, r8, r8, lsl #12
   12e14:	77171400 	ldrvc	r1, [r7, -r0, lsl #8]
   12e18:	0400000e 	streq	r0, [r0], #-14
   12e1c:	2c070272 	sfmcs	f0, 4, [r7], {114}	; 0x72
   12e20:	30000000 	andcc	r0, r0, r0
   12e24:	0042a117 	subeq	sl, r2, r7, lsl r1
   12e28:	02730400 	rsbseq	r0, r3, #0, 8
   12e2c:	0008ab16 	andeq	sl, r8, r6, lsl fp
   12e30:	8a173400 	bhi	5dfe38 <__ccfg+0x5bfe90>
   12e34:	04000007 	streq	r0, [r0], #-7
   12e38:	2c070275 	sfmcs	f0, 4, [r7], {117}	; 0x75
   12e3c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   12e40:	00088417 	andeq	r8, r8, r7, lsl r4
   12e44:	02770400 	rsbseq	r0, r7, #0, 8
   12e48:	0008bc0a 	andeq	fp, r8, sl, lsl #24
   12e4c:	50173c00 	andspl	r3, r7, r0, lsl #24
   12e50:	04000003 	streq	r0, [r0], #-3
   12e54:	7913027a 	ldmdbvc	r3, {r1, r3, r4, r5, r6, r9}
   12e58:	40000001 	andmi	r0, r0, r1
   12e5c:	00040b17 	andeq	r0, r4, r7, lsl fp
   12e60:	027b0400 	rsbseq	r0, fp, #0, 8
   12e64:	00002c07 	andeq	r2, r0, r7, lsl #24
   12e68:	09174400 	ldmdbeq	r7, {sl, lr}
   12e6c:	04000006 	streq	r0, [r0], #-6
   12e70:	7913027c 	ldmdbvc	r3, {r2, r3, r4, r5, r6, r9}
   12e74:	48000001 	stmdami	r0, {r0}
   12e78:	00081f17 	andeq	r1, r8, r7, lsl pc
   12e7c:	027d0400 	rsbseq	r0, sp, #0, 8
   12e80:	0008c214 	andeq	ip, r8, r4, lsl r2
   12e84:	5a174c00 	bpl	5e5e8c <__ccfg+0x5c5ee4>
   12e88:	0400000b 	streq	r0, [r0], #-11
   12e8c:	2c070280 	sfmcs	f0, 4, [r7], {128}	; 0x80
   12e90:	50000000 	andpl	r0, r0, r0
   12e94:	000c5317 	andeq	r5, ip, r7, lsl r3
   12e98:	02810400 	addeq	r0, r1, #0, 8
   12e9c:	0005aa09 	andeq	sl, r5, r9, lsl #20
   12ea0:	6d175400 	cfldrsvs	mvf5, [r7, #-0]
   12ea4:	0400000c 	streq	r0, [r0], #-12
   12ea8:	710702a4 	smlatbvc	r7, r4, r2, r0
   12eac:	58000008 	stmdapl	r0, {r3}
   12eb0:	000a1618 	andeq	r1, sl, r8, lsl r6
   12eb4:	02a80400 	adceq	r0, r8, #0, 8
   12eb8:	0002aa13 	andeq	sl, r2, r3, lsl sl
   12ebc:	18014800 	stmdane	r1, {fp, lr}
   12ec0:	000006ae 	andeq	r0, r0, lr, lsr #13
   12ec4:	1202a904 	andne	sl, r2, #4, 18	; 0x10000
   12ec8:	00000267 	andeq	r0, r0, r7, ror #4
   12ecc:	9518014c 	ldrls	r0, [r8, #-332]	; 0xfffffeb4
   12ed0:	04000006 	streq	r0, [r0], #-6
   12ed4:	d30c02ad 	movwle	r0, #49837	; 0xc2ad
   12ed8:	dc000008 	stcle	0, cr0, [r0], {8}
   12edc:	0ce31802 	stcleq	8, cr1, [r3], #8
   12ee0:	b2040000 	andlt	r0, r4, #0
   12ee4:	06571002 	ldrbeq	r1, [r7], -r2
   12ee8:	02e00000 	rsceq	r0, r0, #0
   12eec:	000aa618 	andeq	sl, sl, r8, lsl r6
   12ef0:	02b40400 	adcseq	r0, r4, #0, 8
   12ef4:	0008df0a 	andeq	sp, r8, sl, lsl #30
   12ef8:	0002ec00 	andeq	lr, r2, r0, lsl #24
   12efc:	05b0040f 	ldreq	r0, [r0, #1039]!	; 0x40f
   12f00:	01020000 	mrseq	r0, (UNDEF: 2)
   12f04:	000c6408 	andeq	r6, ip, r8, lsl #8
   12f08:	05b01500 	ldreq	r1, [r0, #1280]!	; 0x500
   12f0c:	040f0000 	streq	r0, [pc], #-0	; 12f14 <__exidx_end+0xd254>
   12f10:	00000438 	andeq	r0, r0, r8, lsr r4
   12f14:	00002c13 	andeq	r2, r0, r3, lsl ip
   12f18:	0005e000 	andeq	lr, r5, r0
   12f1c:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   12f20:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   12f24:	14000000 	strne	r0, [r0], #-0
   12f28:	000005e0 	andeq	r0, r0, r0, ror #11
   12f2c:	00002c14 	andeq	r2, r0, r4, lsl ip
   12f30:	040f0000 	streq	r0, [pc], #-0	; 12f38 <__exidx_end+0xd278>
   12f34:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
   12f38:	05c2040f 	strbeq	r0, [r2, #1039]	; 0x40f
   12f3c:	8b130000 	blhi	4d2f44 <__ccfg+0x4b2f9c>
   12f40:	0a000000 	beq	12f48 <__exidx_end+0xd288>
   12f44:	14000006 	strne	r0, [r0], #-6
   12f48:	00000456 	andeq	r0, r0, r6, asr r4
   12f4c:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   12f50:	008b1400 	addeq	r1, fp, r0, lsl #8
   12f54:	2c140000 	ldccs	0, cr0, [r4], {-0}
   12f58:	00000000 	andeq	r0, r0, r0
   12f5c:	05ec040f 	strbeq	r0, [ip, #1039]!	; 0x40f
   12f60:	2c130000 	ldccs	0, cr0, [r3], {-0}
   12f64:	24000000 	strcs	r0, [r0], #-0
   12f68:	14000006 	strne	r0, [r0], #-6
   12f6c:	00000456 	andeq	r0, r0, r6, asr r4
   12f70:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   12f74:	040f0000 	streq	r0, [pc], #-0	; 12f7c <__exidx_end+0xd2bc>
   12f78:	00000610 	andeq	r0, r0, r0, lsl r6
   12f7c:	00005508 	andeq	r5, r0, r8, lsl #10
   12f80:	00063a00 	andeq	r3, r6, r0, lsl #20
   12f84:	00250900 	eoreq	r0, r5, r0, lsl #18
   12f88:	00020000 	andeq	r0, r2, r0
   12f8c:	00005508 	andeq	r5, r0, r8, lsl #10
   12f90:	00064a00 	andeq	r4, r6, r0, lsl #20
   12f94:	00250900 	eoreq	r0, r5, r0, lsl #18
   12f98:	00000000 	andeq	r0, r0, r0
   12f9c:	00046e04 	andeq	r6, r4, r4, lsl #28
   12fa0:	01240400 			; <UNDEFINED> instruction: 0x01240400
   12fa4:	0002f51a 	andeq	pc, r2, sl, lsl r5	; <UNPREDICTABLE>
   12fa8:	0cdd1900 			; <UNDEFINED> instruction: 0x0cdd1900
   12fac:	040c0000 	streq	r0, [ip], #-0
   12fb0:	90080128 	andls	r0, r8, r8, lsr #2
   12fb4:	17000006 	strne	r0, [r0, -r6]
   12fb8:	00000ec4 	andeq	r0, r0, r4, asr #29
   12fbc:	11012a04 	tstne	r1, r4, lsl #20
   12fc0:	00000690 	muleq	r0, r0, r6
   12fc4:	0bce1700 	bleq	ff398bcc <_estack+0xdf393bcc>
   12fc8:	2b040000 	blcs	112fd0 <__ccfg+0xf3028>
   12fcc:	002c0701 	eoreq	r0, ip, r1, lsl #14
   12fd0:	17040000 	strne	r0, [r4, -r0]
   12fd4:	00000772 	andeq	r0, r0, r2, ror r7
   12fd8:	0b012c04 	bleq	5dff0 <__ccfg+0x3e048>
   12fdc:	00000696 	muleq	r0, r6, r6
   12fe0:	040f0008 	streq	r0, [pc], #-8	; 12fe8 <__exidx_end+0xd328>
   12fe4:	00000657 	andeq	r0, r0, r7, asr r6
   12fe8:	064a040f 	strbeq	r0, [sl], -pc, lsl #8
   12fec:	da190000 	ble	652ff4 <__ccfg+0x63304c>
   12ff0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   12ff4:	08014404 	stmdaeq	r1, {r2, sl, lr}
   12ff8:	000006d5 	ldrdeq	r0, [r0], -r5
   12ffc:	00164b17 	andseq	r4, r6, r7, lsl fp
   13000:	01450400 	cmpeq	r5, r0, lsl #8
   13004:	0006d512 	andeq	sp, r6, r2, lsl r5
   13008:	31170000 	tstcc	r7, r0
   1300c:	04000008 	streq	r0, [r0], #-8
   13010:	d5120146 	ldrle	r0, [r2, #-326]	; 0xfffffeba
   13014:	06000006 	streq	r0, [r0], -r6
   13018:	0014fd17 	andseq	pc, r4, r7, lsl sp	; <UNPREDICTABLE>
   1301c:	01470400 	cmpeq	r7, r0, lsl #8
   13020:	00006312 	andeq	r6, r0, r2, lsl r3
   13024:	08000c00 	stmdaeq	r0, {sl, fp}
   13028:	00000063 	andeq	r0, r0, r3, rrx
   1302c:	000006e5 	andeq	r0, r0, r5, ror #13
   13030:	00002509 	andeq	r2, r0, r9, lsl #10
   13034:	1a000200 	bne	1383c <__exidx_end+0xdb7c>
   13038:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
   1303c:	0007fa07 	andeq	pc, r7, r7, lsl #20
   13040:	0e6a1700 	cdpeq	7, 6, cr1, cr10, cr0, {0}
   13044:	87040000 	strhi	r0, [r4, -r0]
   13048:	00251802 	eoreq	r1, r5, r2, lsl #16
   1304c:	17000000 	strne	r0, [r0, -r0]
   13050:	00000ceb 	andeq	r0, r0, fp, ror #25
   13054:	12028804 	andne	r8, r2, #4, 16	; 0x40000
   13058:	000005aa 	andeq	r0, r0, sl, lsr #11
   1305c:	04381704 	ldrteq	r1, [r8], #-1796	; 0xfffff8fc
   13060:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
   13064:	07fa1002 	ldrbeq	r1, [sl, r2]!
   13068:	17080000 	strne	r0, [r8, -r0]
   1306c:	00000b43 	andeq	r0, r0, r3, asr #22
   13070:	17028a04 	strne	r8, [r2, -r4, lsl #20]
   13074:	0000018f 	andeq	r0, r0, pc, lsl #3
   13078:	07e91724 	strbeq	r1, [r9, r4, lsr #14]!
   1307c:	8b040000 	blhi	113084 <__ccfg+0xf30dc>
   13080:	002c0f02 	eoreq	r0, ip, r2, lsl #30
   13084:	17480000 	strbne	r0, [r8, -r0]
   13088:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
   1308c:	2c028c04 	stccs	12, cr8, [r2], {4}
   13090:	00000078 	andeq	r0, r0, r8, ror r0
   13094:	007f1750 	rsbseq	r1, pc, r0, asr r7	; <UNPREDICTABLE>
   13098:	8d040000 	stchi	0, cr0, [r4, #-0]
   1309c:	069c1a02 	ldreq	r1, [ip], r2, lsl #20
   130a0:	17580000 	ldrbne	r0, [r8, -r0]
   130a4:	00000639 	andeq	r0, r0, r9, lsr r6
   130a8:	16028e04 	strne	r8, [r2], -r4, lsl #28
   130ac:	000000ed 	andeq	r0, r0, sp, ror #1
   130b0:	0cf81768 	ldcleq	7, cr1, [r8], #416	; 0x1a0
   130b4:	8f040000 	svchi	0x00040000
   130b8:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   130bc:	17700000 	ldrbne	r0, [r0, -r0]!
   130c0:	00000071 	andeq	r0, r0, r1, ror r0
   130c4:	16029004 	strne	r9, [r2], -r4
   130c8:	000000ed 	andeq	r0, r0, sp, ror #1
   130cc:	0b6a1778 	bleq	1a98eb4 <__ccfg+0x1a78f0c>
   130d0:	91040000 	mrsls	r0, (UNDEF: 4)
   130d4:	080a1002 	stmdaeq	sl, {r1, ip}
   130d8:	17800000 	strne	r0, [r0, r0]
   130dc:	00000415 	andeq	r0, r0, r5, lsl r4
   130e0:	10029204 	andne	r9, r2, r4, lsl #4
   130e4:	0000081a 	andeq	r0, r0, sl, lsl r8
   130e8:	0c8d1788 	stceq	7, cr1, [sp], {136}	; 0x88
   130ec:	93040000 	movwls	r0, #16384	; 0x4000
   130f0:	002c0f02 	eoreq	r0, ip, r2, lsl #30
   130f4:	17a00000 	strne	r0, [r0, r0]!
   130f8:	000002ac 	andeq	r0, r0, ip, lsr #5
   130fc:	16029404 	strne	r9, [r2], -r4, lsl #8
   13100:	000000ed 	andeq	r0, r0, sp, ror #1
   13104:	069f17a4 	ldreq	r1, [pc], r4, lsr #15
   13108:	95040000 	strls	r0, [r4, #-0]
   1310c:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   13110:	17ac0000 	strne	r0, [ip, r0]!
   13114:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
   13118:	16029604 	strne	r9, [r2], -r4, lsl #12
   1311c:	000000ed 	andeq	r0, r0, sp, ror #1
   13120:	084a17b4 	stmdaeq	sl, {r2, r4, r5, r7, r8, r9, sl, ip}^
   13124:	97040000 	strls	r0, [r4, -r0]
   13128:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   1312c:	17bc0000 	ldrne	r0, [ip, r0]!
   13130:	00000628 	andeq	r0, r0, r8, lsr #12
   13134:	16029804 	strne	r9, [r2], -r4, lsl #16
   13138:	000000ed 	andeq	r0, r0, sp, ror #1
   1313c:	090217c4 	stmdbeq	r2, {r2, r6, r7, r8, r9, sl, ip}
   13140:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
   13144:	002c0802 	eoreq	r0, ip, r2, lsl #16
   13148:	00cc0000 	sbceq	r0, ip, r0
   1314c:	0005b008 	andeq	fp, r5, r8
   13150:	00080a00 	andeq	r0, r8, r0, lsl #20
   13154:	00250900 	eoreq	r0, r5, r0, lsl #18
   13158:	00190000 	andseq	r0, r9, r0
   1315c:	0005b008 	andeq	fp, r5, r8
   13160:	00081a00 	andeq	r1, r8, r0, lsl #20
   13164:	00250900 	eoreq	r0, r5, r0, lsl #18
   13168:	00070000 	andeq	r0, r7, r0
   1316c:	0005b008 	andeq	fp, r5, r8
   13170:	00082a00 	andeq	r2, r8, r0, lsl #20
   13174:	00250900 	eoreq	r0, r5, r0, lsl #18
   13178:	00170000 	andseq	r0, r7, r0
   1317c:	9e04f01a 	mcrls	0, 0, pc, cr4, cr10, {0}	; <UNPREDICTABLE>
   13180:	08510702 	ldmdaeq	r1, {r1, r8, r9, sl}^
   13184:	c0170000 	andsgt	r0, r7, r0
   13188:	04000003 	streq	r0, [r0], #-3
   1318c:	511b02a1 	tstpl	fp, r1, lsr #5
   13190:	00000008 	andeq	r0, r0, r8
   13194:	000f1217 	andeq	r1, pc, r7, lsl r2	; <UNPREDICTABLE>
   13198:	02a20400 	adceq	r0, r2, #0, 8
   1319c:	00086118 	andeq	r6, r8, r8, lsl r1
   131a0:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
   131a4:	000002ef 	andeq	r0, r0, pc, ror #5
   131a8:	00000861 	andeq	r0, r0, r1, ror #16
   131ac:	00002509 	andeq	r2, r0, r9, lsl #10
   131b0:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
   131b4:	00000025 	andeq	r0, r0, r5, lsr #32
   131b8:	00000871 	andeq	r0, r0, r1, ror r8
   131bc:	00002509 	andeq	r2, r0, r9, lsl #10
   131c0:	1b001d00 	blne	1a5c8 <__exidx_end+0x14908>
   131c4:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
   131c8:	00089603 	andeq	r9, r8, r3, lsl #12
   131cc:	0d5f1c00 	ldcleq	12, cr1, [pc, #-0]	; 131d4 <__exidx_end+0xd514>
   131d0:	9a040000 	bls	1131d8 <__ccfg+0xf3230>
   131d4:	06e50b02 	strbteq	r0, [r5], r2, lsl #22
   131d8:	521c0000 	andspl	r0, ip, #0
   131dc:	0400000b 	streq	r0, [r0], #-11
   131e0:	2a0b02a3 	bcs	2d3c74 <__ccfg+0x2b3ccc>
   131e4:	00000008 	andeq	r0, r0, r8
   131e8:	0005b008 	andeq	fp, r5, r8
   131ec:	0008a600 	andeq	sl, r8, r0, lsl #12
   131f0:	00250900 	eoreq	r0, r5, r0, lsl #18
   131f4:	00180000 	andseq	r0, r8, r0
   131f8:	000eca1d 	andeq	ip, lr, sp, lsl sl
   131fc:	a6040f00 	strge	r0, [r4], -r0, lsl #30
   13200:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   13204:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
   13208:	00045614 	andeq	r5, r4, r4, lsl r6
   1320c:	040f0000 	streq	r0, [pc], #-0	; 13214 <__exidx_end+0xd554>
   13210:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   13214:	0179040f 	cmneq	r9, pc, lsl #8
   13218:	d31e0000 	tstle	lr, #0
   1321c:	14000008 	strne	r0, [r0], #-8
   13220:	0000002c 	andeq	r0, r0, ip, lsr #32
   13224:	d9040f00 	stmdble	r4, {r8, r9, sl, fp}
   13228:	0f000008 	svceq	0x00000008
   1322c:	0008c804 	andeq	ip, r8, r4, lsl #16
   13230:	064a0800 	strbeq	r0, [sl], -r0, lsl #16
   13234:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   13238:	25090000 	strcs	r0, [r9, #-0]
   1323c:	02000000 	andeq	r0, r0, #0
   13240:	0ac21f00 	beq	ff09ae48 <_estack+0xdf095e48>
   13244:	33040000 	movwcc	r0, #16384	; 0x4000
   13248:	04561703 	ldrbeq	r1, [r6], #-1795	; 0xfffff8fd
   1324c:	bb1f0000 	bllt	7d3254 <__ccfg+0x7b32ac>
   13250:	0400000a 	streq	r0, [r0], #-10
   13254:	5c1d0334 	ldcpl	3, cr0, [sp], {52}	; 0x34
   13258:	20000004 	andcs	r0, r0, r4
   1325c:	00004443 	andeq	r4, r0, r3, asr #8
   13260:	aa0e6706 	bge	3ace80 <__ccfg+0x38ced8>
   13264:	21000005 	tstcs	r0, r5
   13268:	00000e72 	andeq	r0, r0, r2, ror lr
   1326c:	2c059006 	stccs	0, cr9, [r5], {6}
   13270:	f4000000 	vst4.8	{d0-d3}, [r0], r0
   13274:	38000049 	stmdacc	r0, {r0, r3, r6}
   13278:	01000000 	mrseq	r0, (UNDEF: 0)
   1327c:	0009449c 	muleq	r9, ip, r4
   13280:	47472200 	strbmi	r2, [r7, -r0, lsl #4]
   13284:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
   13288:	00045612 	andeq	r5, r4, r2, lsl r6
   1328c:	005ad700 	subseq	sp, sl, r0, lsl #14
   13290:	005ad100 	subseq	sp, sl, r0, lsl #2
   13294:	a0230000 	eorge	r0, r3, r0
   13298:	06000046 	streq	r0, [r0], -r6, asr #32
   1329c:	49e0069f 	stmibmi	r0!, {r0, r1, r2, r3, r4, r7, r9, sl}^
   132a0:	00140000 	andseq	r0, r4, r0
   132a4:	9c010000 	stcls	0, cr0, [r1], {-0}
   132a8:	00164c24 	andseq	r4, r6, r4, lsr #24
   132ac:	153e0100 	ldrne	r0, [lr, #-256]!	; 0xffffff00
   132b0:	00000025 	andeq	r0, r0, r5, lsr #32
   132b4:	47225001 	strmi	r5, [r2, -r1]!
   132b8:	01000047 	tsteq	r0, r7, asr #32
   132bc:	04561240 	ldrbeq	r1, [r6], #-576	; 0xfffffdc0
   132c0:	5b080000 	blpl	2132c8 <__ccfg+0x1f3320>
   132c4:	5b040000 	blpl	1132cc <__ccfg+0xf3324>
   132c8:	00000000 	andeq	r0, r0, r0
   132cc:	00000926 	andeq	r0, r0, r6, lsr #18
   132d0:	45c10004 	strbmi	r0, [r1, #4]
   132d4:	01040000 	mrseq	r0, (UNDEF: 4)
   132d8:	00004559 	andeq	r4, r0, r9, asr r5
   132dc:	0047590c 	subeq	r5, r7, ip, lsl #18
   132e0:	0046fa00 	subeq	pc, r6, r0, lsl #20
   132e4:	00924b00 	addseq	r4, r2, r0, lsl #22
   132e8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   132ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
   132f0:	2b070403 	blcs	1d4304 <__ccfg+0x1b435c>
   132f4:	03000004 	movweq	r0, #4
   132f8:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
   132fc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13300:	00442a04 	subeq	r2, r4, r4, lsl #20
   13304:	0bd50400 	bleq	ff55430c <_estack+0xdf54f30c>
   13308:	65010000 	strvs	r0, [r1, #-0]
   1330c:	00241701 	eoreq	r1, r4, r1, lsl #14
   13310:	01030000 	mrseq	r0, (UNDEF: 3)
   13314:	000c5d06 	andeq	r5, ip, r6, lsl #26
   13318:	08010300 	stmdaeq	r1, {r8, r9}
   1331c:	00000c5b 	andeq	r0, r0, fp, asr ip
   13320:	6b050203 	blvs	153b34 <__ccfg+0x133b8c>
   13324:	0300000a 	movweq	r0, #10
   13328:	0d660702 	stcleq	7, cr0, [r6, #-8]!
   1332c:	04030000 	streq	r0, [r3], #-0
   13330:	0007fd05 	andeq	pc, r7, r5, lsl #26
   13334:	07040300 	streq	r0, [r4, -r0, lsl #6]
   13338:	00000426 	andeq	r0, r0, r6, lsr #8
   1333c:	21070803 	tstcs	r7, r3, lsl #16
   13340:	05000004 	streq	r0, [r0, #-4]
   13344:	00000e49 	andeq	r0, r0, r9, asr #28
   13348:	620e2e02 	andvs	r2, lr, #2, 28
   1334c:	05000000 	streq	r0, [r0, #-0]
   13350:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13354:	620e7402 	andvs	r7, lr, #33554432	; 0x2000000
   13358:	06000000 	streq	r0, [r0], -r0
   1335c:	03a50204 			; <UNDEFINED> instruction: 0x03a50204
   13360:	000000b1 	strheq	r0, [r0], -r1
   13364:	00076c07 	andeq	r6, r7, r7, lsl #24
   13368:	0ca70200 	sfmeq	f0, 4, [r7]
   1336c:	00000039 	andeq	r0, r0, r9, lsr r0
   13370:	000ab407 	andeq	fp, sl, r7, lsl #8
   13374:	13a80200 			; <UNDEFINED> instruction: 0x13a80200
   13378:	000000b1 	strheq	r0, [r0], -r1
   1337c:	004d0800 	subeq	r0, sp, r0, lsl #16
   13380:	00c10000 	sbceq	r0, r1, r0
   13384:	24090000 	strcs	r0, [r9], #-0
   13388:	03000000 	movweq	r0, #0
   1338c:	02080a00 	andeq	r0, r8, #0, 20
   13390:	00e509a2 	rsceq	r0, r5, r2, lsr #19
   13394:	8e0b0000 	cdphi	0, 0, cr0, cr11, cr0, {0}
   13398:	02000003 	andeq	r0, r0, #3
   1339c:	001d07a4 	andseq	r0, sp, r4, lsr #15
   133a0:	0b000000 	bleq	133a8 <__exidx_end+0xd6e8>
   133a4:	00000601 	andeq	r0, r0, r1, lsl #12
   133a8:	8f05a902 	svchi	0x0005a902
   133ac:	04000000 	streq	r0, [r0], #-0
   133b0:	08b50500 	ldmeq	r5!, {r8, sl}
   133b4:	aa020000 	bge	933bc <__ccfg+0x73414>
   133b8:	0000c103 	andeq	ip, r0, r3, lsl #2
   133bc:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
   133c0:	00000842 	andeq	r0, r0, r2, asr #16
   133c4:	69191603 	ldmdbvs	r9, {r0, r1, r9, sl, ip}
   133c8:	05000000 	streq	r0, [r0, #-0]
   133cc:	00000253 	andeq	r0, r0, r3, asr r2
   133d0:	1d0d0c04 	stcne	12, cr0, [sp, #-16]
   133d4:	05000000 	streq	r0, [r0, #-0]
   133d8:	0000072a 	andeq	r0, r0, sl, lsr #14
   133dc:	ff1b2303 			; <UNDEFINED> instruction: 0xff1b2303
   133e0:	0d000000 	stceq	0, cr0, [r0, #-0]
   133e4:	00000332 	andeq	r0, r0, r2, lsr r3
   133e8:	08340318 	ldmdaeq	r4!, {r3, r4, r8, r9}
   133ec:	00000171 	andeq	r0, r0, r1, ror r1
   133f0:	000ec40b 	andeq	ip, lr, fp, lsl #8
   133f4:	13360300 	teqne	r6, #0, 6
   133f8:	00000171 	andeq	r0, r0, r1, ror r1
   133fc:	6b5f0e00 	blvs	17d6c04 <__ccfg+0x17b6c5c>
   13400:	07370300 	ldreq	r0, [r7, -r0, lsl #6]!
   13404:	0000001d 	andeq	r0, r0, sp, lsl r0
   13408:	0b620b04 	bleq	1896020 <__ccfg+0x1876078>
   1340c:	37030000 	strcc	r0, [r3, -r0]
   13410:	00001d0b 	andeq	r1, r0, fp, lsl #26
   13414:	f50b0800 			; <UNDEFINED> instruction: 0xf50b0800
   13418:	03000043 	movweq	r0, #67	; 0x43
   1341c:	001d1437 	andseq	r1, sp, r7, lsr r4
   13420:	0b0c0000 	bleq	313428 <__ccfg+0x2f3480>
   13424:	00000455 	andeq	r0, r0, r5, asr r4
   13428:	1d1b3703 	ldcne	7, cr3, [fp, #-12]
   1342c:	10000000 	andne	r0, r0, r0
   13430:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
   13434:	770b3803 	strvc	r3, [fp, -r3, lsl #16]
   13438:	14000001 	strne	r0, [r0], #-1
   1343c:	17040f00 	strne	r0, [r4, -r0, lsl #30]
   13440:	08000001 	stmdaeq	r0, {r0}
   13444:	000000f3 	strdeq	r0, [r0], -r3
   13448:	00000187 	andeq	r0, r0, r7, lsl #3
   1344c:	00002409 	andeq	r2, r0, r9, lsl #8
   13450:	0d000000 	stceq	0, cr0, [r0, #-0]
   13454:	00000b7d 	andeq	r0, r0, sp, ror fp
   13458:	083c0324 	ldmdaeq	ip!, {r2, r5, r8, r9}
   1345c:	0000020a 	andeq	r0, r0, sl, lsl #4
   13460:	00056c0b 	andeq	r6, r5, fp, lsl #24
   13464:	093e0300 	ldmdbeq	lr!, {r8, r9}
   13468:	0000001d 	andeq	r0, r0, sp, lsl r0
   1346c:	03b70b00 			; <UNDEFINED> instruction: 0x03b70b00
   13470:	3f030000 	svccc	0x00030000
   13474:	00001d09 	andeq	r1, r0, r9, lsl #26
   13478:	580b0400 	stmdapl	fp, {sl}
   1347c:	03000003 	movweq	r0, #3
   13480:	001d0940 	andseq	r0, sp, r0, asr #18
   13484:	0b080000 	bleq	21348c <__ccfg+0x1f34e4>
   13488:	00000674 	andeq	r0, r0, r4, ror r6
   1348c:	1d094103 	stfnes	f4, [r9, #-12]
   13490:	0c000000 	stceq	0, cr0, [r0], {-0}
   13494:	0009540b 	andeq	r5, r9, fp, lsl #8
   13498:	09420300 	stmdbeq	r2, {r8, r9}^
   1349c:	0000001d 	andeq	r0, r0, sp, lsl r0
   134a0:	0ace0b10 	beq	ff3960e8 <_estack+0xdf3910e8>
   134a4:	43030000 	movwmi	r0, #12288	; 0x3000
   134a8:	00001d09 	andeq	r1, r0, r9, lsl #26
   134ac:	460b1400 	strmi	r1, [fp], -r0, lsl #8
   134b0:	03000003 	movweq	r0, #3
   134b4:	001d0944 	andseq	r0, sp, r4, asr #18
   134b8:	0b180000 	bleq	6134c0 <__ccfg+0x5f3518>
   134bc:	00000575 	andeq	r0, r0, r5, ror r5
   134c0:	1d094503 	cfstr32ne	mvfx4, [r9, #-12]
   134c4:	1c000000 	stcne	0, cr0, [r0], {-0}
   134c8:	0008f00b 	andeq	pc, r8, fp
   134cc:	09460300 	stmdbeq	r6, {r8, r9}^
   134d0:	0000001d 	andeq	r0, r0, sp, lsl r0
   134d4:	3b100020 	blcc	41355c <__ccfg+0x3f35b4>
   134d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   134dc:	084f0301 	stmdaeq	pc, {r0, r8, r9}^	; <UNPREDICTABLE>
   134e0:	0000024f 	andeq	r0, r0, pc, asr #4
   134e4:	000d2d0b 	andeq	r2, sp, fp, lsl #26
   134e8:	0a500300 	beq	14140f0 <__ccfg+0x13f4148>
   134ec:	0000024f 	andeq	r0, r0, pc, asr #4
   134f0:	0c170b00 			; <UNDEFINED> instruction: 0x0c170b00
   134f4:	51030000 	mrspl	r0, (UNDEF: 3)
   134f8:	00024f09 	andeq	r4, r2, r9, lsl #30
   134fc:	c6118000 	ldrgt	r8, [r1], -r0
   13500:	0300000d 	movweq	r0, #13
   13504:	00f30a53 	rscseq	r0, r3, r3, asr sl
   13508:	01000000 	mrseq	r0, (UNDEF: 0)
   1350c:	000eb711 	andeq	fp, lr, r1, lsl r7
   13510:	0a560300 	beq	1594118 <__ccfg+0x1574170>
   13514:	000000f3 	strdeq	r0, [r0], -r3
   13518:	08000104 	stmdaeq	r0, {r2, r8}
   1351c:	000000f1 	strdeq	r0, [r0], -r1
   13520:	0000025f 	andeq	r0, r0, pc, asr r2
   13524:	00002409 	andeq	r2, r0, r9, lsl #8
   13528:	10001f00 	andne	r1, r0, r0, lsl #30
   1352c:	00000a16 	andeq	r0, r0, r6, lsl sl
   13530:	62030190 	andvs	r0, r3, #144, 2	; 0x24
   13534:	0002a208 	andeq	sl, r2, r8, lsl #4
   13538:	0ec40b00 	vdiveq.f64	d16, d4, d0
   1353c:	63030000 	movwvs	r0, #12288	; 0x3000
   13540:	0002a212 	andeq	sl, r2, r2, lsl r2
   13544:	840b0000 	strhi	r0, [fp], #-0
   13548:	03000005 	movweq	r0, #5
   1354c:	001d0664 	andseq	r0, sp, r4, ror #12
   13550:	0b040000 	bleq	113558 <__ccfg+0xf35b0>
   13554:	00000307 	andeq	r0, r0, r7, lsl #6
   13558:	a8096603 	stmdage	r9, {r0, r1, r9, sl, sp, lr}
   1355c:	08000002 	stmdaeq	r0, {r1}
   13560:	00003b0b 	andeq	r3, r0, fp, lsl #22
   13564:	1e670300 	cdpne	3, 6, cr0, cr7, cr0, {0}
   13568:	0000020a 	andeq	r0, r0, sl, lsl #4
   1356c:	040f0088 	streq	r0, [pc], #-136	; 13574 <__exidx_end+0xd8b4>
   13570:	0000025f 	andeq	r0, r0, pc, asr r2
   13574:	0002b808 	andeq	fp, r2, r8, lsl #16
   13578:	0002b800 	andeq	fp, r2, r0, lsl #16
   1357c:	00240900 	eoreq	r0, r4, r0, lsl #18
   13580:	001f0000 	andseq	r0, pc, r0
   13584:	02be040f 	adcseq	r0, lr, #251658240	; 0xf000000
   13588:	0d120000 	ldceq	0, cr0, [r2, #-0]
   1358c:	00000cc5 	andeq	r0, r0, r5, asr #25
   13590:	087a0308 	ldmdaeq	sl!, {r3, r8, r9}^
   13594:	000002e7 	andeq	r0, r0, r7, ror #5
   13598:	000cd70b 	andeq	sp, ip, fp, lsl #14
   1359c:	117b0300 	cmnne	fp, r0, lsl #6
   135a0:	000002e7 	andeq	r0, r0, r7, ror #5
   135a4:	1da00b00 			; <UNDEFINED> instruction: 0x1da00b00
   135a8:	7c030000 	stcvc	0, cr0, [r3], {-0}
   135ac:	00001d06 	andeq	r1, r0, r6, lsl #26
   135b0:	0f000400 	svceq	0x00000400
   135b4:	00004d04 	andeq	r4, r0, r4, lsl #26
   135b8:	044d0d00 	strbeq	r0, [sp], #-3328	; 0xfffff300
   135bc:	03680000 	cmneq	r8, #0
   135c0:	043008ba 	ldrteq	r0, [r0], #-2234	; 0xfffff746
   135c4:	5f0e0000 	svcpl	0x000e0000
   135c8:	bb030070 	bllt	d3790 <__ccfg+0xb37e8>
   135cc:	0002e712 	andeq	lr, r2, r2, lsl r7
   135d0:	5f0e0000 	svcpl	0x000e0000
   135d4:	bc030072 	stclt	0, cr0, [r3], {114}	; 0x72
   135d8:	00001d07 	andeq	r1, r0, r7, lsl #26
   135dc:	5f0e0400 	svcpl	0x000e0400
   135e0:	bd030077 	stclt	0, cr0, [r3, #-476]	; 0xfffffe24
   135e4:	00001d07 	andeq	r1, r0, r7, lsl #26
   135e8:	c40b0800 	strgt	r0, [fp], #-2048	; 0xfffff800
   135ec:	03000001 	movweq	r0, #1
   135f0:	005409be 	ldrheq	r0, [r4], #-158	; 0xffffff62
   135f4:	0b0c0000 	bleq	3135fc <__ccfg+0x2f3654>
   135f8:	00000859 	andeq	r0, r0, r9, asr r8
   135fc:	5409bf03 	strpl	fp, [r9], #-3843	; 0xfffff0fd
   13600:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   13604:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
   13608:	11c00300 	bicne	r0, r0, r0, lsl #6
   1360c:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
   13610:	01bb0b10 			; <UNDEFINED> instruction: 0x01bb0b10
   13614:	c1030000 	mrsgt	r0, (UNDEF: 3)
   13618:	00001d07 	andeq	r1, r0, r7, lsl #26
   1361c:	0c0b1800 	stceq	8, cr1, [fp], {-0}
   13620:	03000003 	movweq	r0, #3
   13624:	00f10ac8 	rscseq	r0, r1, r8, asr #21
   13628:	0b1c0000 	bleq	713630 <__ccfg+0x6f3688>
   1362c:	00001d2f 	andeq	r1, r0, pc, lsr #26
   13630:	b41dca03 	ldrlt	ip, [sp], #-2563	; 0xfffff5fd
   13634:	20000005 	andcs	r0, r0, r5
   13638:	001cf60b 	andseq	pc, ip, fp, lsl #12
   1363c:	1dcc0300 	stclne	3, cr0, [ip]
   13640:	000005de 	ldrdeq	r0, [r0], -lr
   13644:	0ee40b24 	vfmaeq.f64	d16, d4, d20
   13648:	cf030000 	svcgt	0x00030000
   1364c:	0006020d 	andeq	r0, r6, sp, lsl #4
   13650:	e40b2800 	str	r2, [fp], #-2048	; 0xfffff800
   13654:	0300001c 	movweq	r0, #28
   13658:	061c09d0 			; <UNDEFINED> instruction: 0x061c09d0
   1365c:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
   13660:	0062755f 	rsbeq	r7, r2, pc, asr r5
   13664:	bf11d303 	svclt	0x0011d303
   13668:	30000002 	andcc	r0, r0, r2
   1366c:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
   13670:	12d40300 	sbcsne	r0, r4, #0, 6
   13674:	000002e7 	andeq	r0, r0, r7, ror #5
   13678:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; 12848 <__exidx_end+0xcb88>
   1367c:	d5030072 	strle	r0, [r3, #-114]	; 0xffffff8e
   13680:	00001d07 	andeq	r1, r0, r7, lsl #26
   13684:	1b0b3c00 	blne	2e268c <__ccfg+0x2c26e4>
   13688:	0300000f 	movweq	r0, #15
   1368c:	062211d8 			; <UNDEFINED> instruction: 0x062211d8
   13690:	0b400000 	bleq	1013698 <__ccfg+0xff36f0>
   13694:	00000e64 	andeq	r0, r0, r4, ror #28
   13698:	3211d903 	andscc	sp, r1, #49152	; 0xc000
   1369c:	43000006 	movwmi	r0, #6
   136a0:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
   136a4:	11dc0300 	bicsne	r0, ip, r0, lsl #6
   136a8:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
   136ac:	0b740b44 	bleq	1d163c4 <__ccfg+0x1cf641c>
   136b0:	df030000 	svcle	0x00030000
   136b4:	00001d07 	andeq	r1, r0, r7, lsl #26
   136b8:	7c0b4c00 	stcvc	12, cr4, [fp], {-0}
   136bc:	03000004 	movweq	r0, #4
   136c0:	00770ae0 	rsbseq	r0, r7, r0, ror #21
   136c4:	0b500000 	bleq	14136cc <__ccfg+0x13f3724>
   136c8:	00004753 	andeq	r4, r0, r3, asr r7
   136cc:	4e12e303 	cdpmi	3, 1, cr14, cr2, cr3, {0}
   136d0:	54000004 	strpl	r0, [r0], #-4
   136d4:	000b9a0b 	andeq	r9, fp, fp, lsl #20
   136d8:	0ce70300 	stcleq	3, cr0, [r7]
   136dc:	0000010b 	andeq	r0, r0, fp, lsl #2
   136e0:	0a1e0b58 	beq	796448 <__ccfg+0x7764a0>
   136e4:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
   136e8:	0000e50e 	andeq	lr, r0, lr, lsl #10
   136ec:	970b5c00 	strls	r5, [fp, -r0, lsl #24]
   136f0:	0300000e 	movweq	r0, #14
   136f4:	001d09ea 	andseq	r0, sp, sl, ror #19
   136f8:	00640000 	rsbeq	r0, r4, r0
   136fc:	00001d13 	andeq	r1, r0, r3, lsl sp
   13700:	00044e00 	andeq	r4, r4, r0, lsl #28
   13704:	044e1400 	strbeq	r1, [lr], #-1024	; 0xfffffc00
   13708:	f1140000 			; <UNDEFINED> instruction: 0xf1140000
   1370c:	14000000 	strne	r0, [r0], #-0
   13710:	000005a2 	andeq	r0, r0, r2, lsr #11
   13714:	00001d14 	andeq	r1, r0, r4, lsl sp
   13718:	040f0000 	streq	r0, [pc], #-0	; 13720 <__exidx_end+0xda60>
   1371c:	00000459 	andeq	r0, r0, r9, asr r4
   13720:	00044e15 	andeq	r4, r4, r5, lsl lr
   13724:	0d5f1600 	ldcleq	6, cr1, [pc, #-0]	; 1372c <__exidx_end+0xda6c>
   13728:	04280000 	strteq	r0, [r8], #-0
   1372c:	08026503 	stmdaeq	r2, {r0, r1, r8, sl, sp, lr}
   13730:	000005a2 	andeq	r0, r0, r2, lsr #11
   13734:	00090417 	andeq	r0, r9, r7, lsl r4
   13738:	02670300 	rsbeq	r0, r7, #0, 6
   1373c:	00001d07 	andeq	r1, r0, r7, lsl #26
   13740:	e2170000 	ands	r0, r7, #0
   13744:	03000007 	movweq	r0, #7
   13748:	8e0b026c 	cdphi	2, 0, cr0, cr11, cr12, {3}
   1374c:	04000006 	streq	r0, [r0], #-6
   13750:	0002f717 	andeq	pc, r2, r7, lsl r7	; <UNPREDICTABLE>
   13754:	026c0300 	rsbeq	r0, ip, #0, 6
   13758:	00068e14 	andeq	r8, r6, r4, lsl lr
   1375c:	0a170800 	beq	5d5764 <__ccfg+0x5b57bc>
   13760:	0300000f 	movweq	r0, #15
   13764:	8e1e026c 	cdphi	2, 1, cr0, cr14, cr12, {3}
   13768:	0c000006 	stceq	0, cr0, [r0], {6}
   1376c:	00057f17 	andeq	r7, r5, r7, lsl pc
   13770:	026e0300 	rsbeq	r0, lr, #0, 6
   13774:	00001d08 	andeq	r1, r0, r8, lsl #26
   13778:	d4171000 	ldrle	r1, [r7], #-0
   1377c:	03000004 	movweq	r0, #4
   13780:	8e08026f 	cdphi	2, 0, cr0, cr8, cr15, {3}
   13784:	14000008 	strne	r0, [r0], #-8
   13788:	000e7717 	andeq	r7, lr, r7, lsl r7
   1378c:	02720300 	rsbseq	r0, r2, #0, 6
   13790:	00001d07 	andeq	r1, r0, r7, lsl #26
   13794:	a1173000 	tstge	r7, r0
   13798:	03000042 	movweq	r0, #66	; 0x42
   1379c:	a3160273 	tstge	r6, #805306375	; 0x30000007
   137a0:	34000008 	strcc	r0, [r0], #-8
   137a4:	00078a17 	andeq	r8, r7, r7, lsl sl
   137a8:	02750300 	rsbseq	r0, r5, #0, 6
   137ac:	00001d07 	andeq	r1, r0, r7, lsl #26
   137b0:	84173800 	ldrhi	r3, [r7], #-2048	; 0xfffff800
   137b4:	03000008 	movweq	r0, #8
   137b8:	b40a0277 	strlt	r0, [sl], #-631	; 0xfffffd89
   137bc:	3c000008 	stccc	0, cr0, [r0], {8}
   137c0:	00035017 	andeq	r5, r3, r7, lsl r0
   137c4:	027a0300 	rsbseq	r0, sl, #0, 6
   137c8:	00017113 	andeq	r7, r1, r3, lsl r1
   137cc:	0b174000 	bleq	5e37d4 <__ccfg+0x5c382c>
   137d0:	03000004 	movweq	r0, #4
   137d4:	1d07027b 	sfmne	f0, 4, [r7, #-492]	; 0xfffffe14
   137d8:	44000000 	strmi	r0, [r0], #-0
   137dc:	00060917 	andeq	r0, r6, r7, lsl r9
   137e0:	027c0300 	rsbseq	r0, ip, #0, 6
   137e4:	00017113 	andeq	r7, r1, r3, lsl r1
   137e8:	1f174800 	svcne	0x00174800
   137ec:	03000008 	movweq	r0, #8
   137f0:	ba14027d 	blt	5141ec <__ccfg+0x4f4244>
   137f4:	4c000008 	stcmi	0, cr0, [r0], {8}
   137f8:	000b5a17 	andeq	r5, fp, r7, lsl sl
   137fc:	02800300 	addeq	r0, r0, #0, 6
   13800:	00001d07 	andeq	r1, r0, r7, lsl #26
   13804:	53175000 	tstpl	r7, #0
   13808:	0300000c 	movweq	r0, #12
   1380c:	a2090281 	andge	r0, r9, #268435464	; 0x10000008
   13810:	54000005 	strpl	r0, [r0], #-5
   13814:	000c6d17 	andeq	r6, ip, r7, lsl sp
   13818:	02a40300 	adceq	r0, r4, #0, 6
   1381c:	00086907 	andeq	r6, r8, r7, lsl #18
   13820:	16185800 	ldrne	r5, [r8], -r0, lsl #16
   13824:	0300000a 	movweq	r0, #10
   13828:	a21302a8 	andsge	r0, r3, #168, 4	; 0x8000000a
   1382c:	48000002 	stmdami	r0, {r1}
   13830:	06ae1801 	strteq	r1, [lr], r1, lsl #16
   13834:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
   13838:	025f1202 	subseq	r1, pc, #536870912	; 0x20000000
   1383c:	014c0000 	mrseq	r0, (UNDEF: 76)
   13840:	00069518 	andeq	r9, r6, r8, lsl r5
   13844:	02ad0300 	adceq	r0, sp, #0, 6
   13848:	0008cb0c 	andeq	ip, r8, ip, lsl #22
   1384c:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
   13850:	00000ce3 	andeq	r0, r0, r3, ror #25
   13854:	1002b203 	andne	fp, r2, r3, lsl #4
   13858:	0000064f 	andeq	r0, r0, pc, asr #12
   1385c:	a61802e0 	ldrge	r0, [r8], -r0, ror #5
   13860:	0300000a 	movweq	r0, #10
   13864:	d70a02b4 			; <UNDEFINED> instruction: 0xd70a02b4
   13868:	ec000008 	stc	0, cr0, [r0], {8}
   1386c:	040f0002 	streq	r0, [pc], #-2	; 13874 <__exidx_end+0xdbb4>
   13870:	000005a8 	andeq	r0, r0, r8, lsr #11
   13874:	64080103 	strvs	r0, [r8], #-259	; 0xfffffefd
   13878:	1500000c 	strne	r0, [r0, #-12]
   1387c:	000005a8 	andeq	r0, r0, r8, lsr #11
   13880:	0430040f 	ldrteq	r0, [r0], #-1039	; 0xfffffbf1
   13884:	1d130000 	ldcne	0, cr0, [r3, #-0]
   13888:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
   1388c:	14000005 	strne	r0, [r0], #-5
   13890:	0000044e 	andeq	r0, r0, lr, asr #8
   13894:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   13898:	05d81400 	ldrbeq	r1, [r8, #1024]	; 0x400
   1389c:	1d140000 	ldcne	0, cr0, [r4, #-0]
   138a0:	00000000 	andeq	r0, r0, r0
   138a4:	05af040f 	streq	r0, [pc, #1039]!	; 13cbb <__exidx_end+0xdffb>
   138a8:	040f0000 	streq	r0, [pc], #-0	; 138b0 <__exidx_end+0xdbf0>
   138ac:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
   138b0:	00008313 	andeq	r8, r0, r3, lsl r3
   138b4:	00060200 	andeq	r0, r6, r0, lsl #4
   138b8:	044e1400 	strbeq	r1, [lr], #-1024	; 0xfffffc00
   138bc:	f1140000 			; <UNDEFINED> instruction: 0xf1140000
   138c0:	14000000 	strne	r0, [r0], #-0
   138c4:	00000083 	andeq	r0, r0, r3, lsl #1
   138c8:	00001d14 	andeq	r1, r0, r4, lsl sp
   138cc:	040f0000 	streq	r0, [pc], #-0	; 138d4 <__exidx_end+0xdc14>
   138d0:	000005e4 	andeq	r0, r0, r4, ror #11
   138d4:	00001d13 	andeq	r1, r0, r3, lsl sp
   138d8:	00061c00 	andeq	r1, r6, r0, lsl #24
   138dc:	044e1400 	strbeq	r1, [lr], #-1024	; 0xfffffc00
   138e0:	f1140000 			; <UNDEFINED> instruction: 0xf1140000
   138e4:	00000000 	andeq	r0, r0, r0
   138e8:	0608040f 	streq	r0, [r8], -pc, lsl #8
   138ec:	4d080000 	stcmi	0, cr0, [r8, #-0]
   138f0:	32000000 	andcc	r0, r0, #0
   138f4:	09000006 	stmdbeq	r0, {r1, r2}
   138f8:	00000024 	andeq	r0, r0, r4, lsr #32
   138fc:	4d080002 	stcmi	0, cr0, [r8, #-8]
   13900:	42000000 	andmi	r0, r0, #0
   13904:	09000006 	stmdbeq	r0, {r1, r2}
   13908:	00000024 	andeq	r0, r0, r4, lsr #32
   1390c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   13910:	03000004 	movweq	r0, #4
   13914:	ed1a0124 	ldfs	f0, [sl, #-144]	; 0xffffff70
   13918:	19000002 	stmdbne	r0, {r1}
   1391c:	00000cdd 	ldrdeq	r0, [r0], -sp
   13920:	0128030c 			; <UNDEFINED> instruction: 0x0128030c
   13924:	00068808 	andeq	r8, r6, r8, lsl #16
   13928:	0ec41700 	cdpeq	7, 12, cr1, cr4, cr0, {0}
   1392c:	2a030000 	bcs	d3934 <__ccfg+0xb398c>
   13930:	06881101 	streq	r1, [r8], r1, lsl #2
   13934:	17000000 	strne	r0, [r0, -r0]
   13938:	00000bce 	andeq	r0, r0, lr, asr #23
   1393c:	07012b03 	streq	r2, [r1, -r3, lsl #22]
   13940:	0000001d 	andeq	r0, r0, sp, lsl r0
   13944:	07721704 	ldrbeq	r1, [r2, -r4, lsl #14]!
   13948:	2c030000 	stccs	0, cr0, [r3], {-0}
   1394c:	068e0b01 	streq	r0, [lr], r1, lsl #22
   13950:	00080000 	andeq	r0, r8, r0
   13954:	064f040f 	strbeq	r0, [pc], -pc, lsl #8
   13958:	040f0000 	streq	r0, [pc], #-0	; 13960 <__exidx_end+0xdca0>
   1395c:	00000642 	andeq	r0, r0, r2, asr #12
   13960:	0003da19 	andeq	sp, r3, r9, lsl sl
   13964:	44030e00 	strmi	r0, [r3], #-3584	; 0xfffff200
   13968:	06cd0801 	strbeq	r0, [sp], r1, lsl #16
   1396c:	4b170000 	blmi	5d3974 <__ccfg+0x5b39cc>
   13970:	03000016 	movweq	r0, #22
   13974:	cd120145 	ldfgts	f0, [r2, #-276]	; 0xfffffeec
   13978:	00000006 	andeq	r0, r0, r6
   1397c:	00083117 	andeq	r3, r8, r7, lsl r1
   13980:	01460300 	mrseq	r0, SPSR_und
   13984:	0006cd12 	andeq	ip, r6, r2, lsl sp
   13988:	fd170600 	ldc2	6, cr0, [r7, #-0]
   1398c:	03000014 	movweq	r0, #20
   13990:	5b120147 	blpl	493eb4 <__ccfg+0x473f0c>
   13994:	0c000000 	stceq	0, cr0, [r0], {-0}
   13998:	005b0800 	subseq	r0, fp, r0, lsl #16
   1399c:	06dd0000 	ldrbeq	r0, [sp], r0
   139a0:	24090000 	strcs	r0, [r9], #-0
   139a4:	02000000 	andeq	r0, r0, #0
   139a8:	03d01a00 	bicseq	r1, r0, #0, 20
   139ac:	f2070285 	vhsub.s8	d0, d23, d5
   139b0:	17000007 	strne	r0, [r0, -r7]
   139b4:	00000e6a 	andeq	r0, r0, sl, ror #28
   139b8:	18028703 	stmdane	r2, {r0, r1, r8, r9, sl, pc}
   139bc:	00000024 	andeq	r0, r0, r4, lsr #32
   139c0:	0ceb1700 	stcleq	7, cr1, [fp]
   139c4:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
   139c8:	05a21202 	streq	r1, [r2, #514]!	; 0x202
   139cc:	17040000 	strne	r0, [r4, -r0]
   139d0:	00000438 	andeq	r0, r0, r8, lsr r4
   139d4:	10028903 	andne	r8, r2, r3, lsl #18
   139d8:	000007f2 	strdeq	r0, [r0], -r2
   139dc:	0b431708 	bleq	10d9604 <__ccfg+0x10b965c>
   139e0:	8a030000 	bhi	d39e8 <__ccfg+0xb3a40>
   139e4:	01871702 	orreq	r1, r7, r2, lsl #14
   139e8:	17240000 	strne	r0, [r4, -r0]!
   139ec:	000007e9 	andeq	r0, r0, r9, ror #15
   139f0:	0f028b03 	svceq	0x00028b03
   139f4:	0000001d 	andeq	r0, r0, sp, lsl r0
   139f8:	0ebf1748 	cdpeq	7, 11, cr1, cr15, cr8, {2}
   139fc:	8c030000 	stchi	0, cr0, [r3], {-0}
   13a00:	00702c02 	rsbseq	r2, r0, r2, lsl #24
   13a04:	17500000 	ldrbne	r0, [r0, -r0]
   13a08:	0000007f 	andeq	r0, r0, pc, ror r0
   13a0c:	1a028d03 	bne	b6e20 <__ccfg+0x96e78>
   13a10:	00000694 	muleq	r0, r4, r6
   13a14:	06391758 			; <UNDEFINED> instruction: 0x06391758
   13a18:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
   13a1c:	00e51602 	rsceq	r1, r5, r2, lsl #12
   13a20:	17680000 	strbne	r0, [r8, -r0]!
   13a24:	00000cf8 	strdeq	r0, [r0], -r8
   13a28:	16028f03 	strne	r8, [r2], -r3, lsl #30
   13a2c:	000000e5 	andeq	r0, r0, r5, ror #1
   13a30:	00711770 	rsbseq	r1, r1, r0, ror r7
   13a34:	90030000 	andls	r0, r3, r0
   13a38:	00e51602 	rsceq	r1, r5, r2, lsl #12
   13a3c:	17780000 	ldrbne	r0, [r8, -r0]!
   13a40:	00000b6a 	andeq	r0, r0, sl, ror #22
   13a44:	10029103 	andne	r9, r2, r3, lsl #2
   13a48:	00000802 	andeq	r0, r0, r2, lsl #16
   13a4c:	04151780 	ldreq	r1, [r5], #-1920	; 0xfffff880
   13a50:	92030000 	andls	r0, r3, #0
   13a54:	08121002 	ldmdaeq	r2, {r1, ip}
   13a58:	17880000 	strne	r0, [r8, r0]
   13a5c:	00000c8d 	andeq	r0, r0, sp, lsl #25
   13a60:	0f029303 	svceq	0x00029303
   13a64:	0000001d 	andeq	r0, r0, sp, lsl r0
   13a68:	02ac17a0 	adceq	r1, ip, #160, 14	; 0x2800000
   13a6c:	94030000 	strls	r0, [r3], #-0
   13a70:	00e51602 	rsceq	r1, r5, r2, lsl #12
   13a74:	17a40000 	strne	r0, [r4, r0]!
   13a78:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
   13a7c:	16029503 	strne	r9, [r2], -r3, lsl #10
   13a80:	000000e5 	andeq	r0, r0, r5, ror #1
   13a84:	05bb17ac 	ldreq	r1, [fp, #1964]!	; 0x7ac
   13a88:	96030000 	strls	r0, [r3], -r0
   13a8c:	00e51602 	rsceq	r1, r5, r2, lsl #12
   13a90:	17b40000 	ldrne	r0, [r4, r0]!
   13a94:	0000084a 	andeq	r0, r0, sl, asr #16
   13a98:	16029703 	strne	r9, [r2], -r3, lsl #14
   13a9c:	000000e5 	andeq	r0, r0, r5, ror #1
   13aa0:	062817bc 			; <UNDEFINED> instruction: 0x062817bc
   13aa4:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
   13aa8:	00e51602 	rsceq	r1, r5, r2, lsl #12
   13aac:	17c40000 	strbne	r0, [r4, r0]
   13ab0:	00000902 	andeq	r0, r0, r2, lsl #18
   13ab4:	08029903 	stmdaeq	r2, {r0, r1, r8, fp, ip, pc}
   13ab8:	0000001d 	andeq	r0, r0, sp, lsl r0
   13abc:	a80800cc 	stmdage	r8, {r2, r3, r6, r7}
   13ac0:	02000005 	andeq	r0, r0, #5
   13ac4:	09000008 	stmdbeq	r0, {r3}
   13ac8:	00000024 	andeq	r0, r0, r4, lsr #32
   13acc:	a8080019 	stmdage	r8, {r0, r3, r4}
   13ad0:	12000005 	andne	r0, r0, #5
   13ad4:	09000008 	stmdbeq	r0, {r3}
   13ad8:	00000024 	andeq	r0, r0, r4, lsr #32
   13adc:	a8080007 	stmdage	r8, {r0, r1, r2}
   13ae0:	22000005 	andcs	r0, r0, #5
   13ae4:	09000008 	stmdbeq	r0, {r3}
   13ae8:	00000024 	andeq	r0, r0, r4, lsr #32
   13aec:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
   13af0:	07029e03 	streq	r9, [r2, -r3, lsl #28]
   13af4:	00000849 	andeq	r0, r0, r9, asr #16
   13af8:	0003c017 	andeq	ip, r3, r7, lsl r0
   13afc:	02a10300 	adceq	r0, r1, #0, 6
   13b00:	0008491b 	andeq	r4, r8, fp, lsl r9
   13b04:	12170000 	andsne	r0, r7, #0
   13b08:	0300000f 	movweq	r0, #15
   13b0c:	591802a2 	ldmdbpl	r8, {r1, r5, r7, r9}
   13b10:	78000008 	stmdavc	r0, {r3}
   13b14:	02e70800 	rsceq	r0, r7, #0, 16
   13b18:	08590000 	ldmdaeq	r9, {}^	; <UNPREDICTABLE>
   13b1c:	24090000 	strcs	r0, [r9], #-0
   13b20:	1d000000 	stcne	0, cr0, [r0, #-0]
   13b24:	00240800 	eoreq	r0, r4, r0, lsl #16
   13b28:	08690000 	stmdaeq	r9!, {}^	; <UNPREDICTABLE>
   13b2c:	24090000 	strcs	r0, [r9], #-0
   13b30:	1d000000 	stcne	0, cr0, [r0, #-0]
   13b34:	03f01b00 	mvnseq	r1, #0, 22
   13b38:	8e030283 	cdphi	2, 0, cr0, cr3, cr3, {4}
   13b3c:	1c000008 	stcne	0, cr0, [r0], {8}
   13b40:	00000d5f 	andeq	r0, r0, pc, asr sp
   13b44:	0b029a03 	bleq	ba358 <__ccfg+0x9a3b0>
   13b48:	000006dd 	ldrdeq	r0, [r0], -sp
   13b4c:	000b521c 	andeq	r5, fp, ip, lsl r2
   13b50:	02a30300 	adceq	r0, r3, #0, 6
   13b54:	0008220b 	andeq	r2, r8, fp, lsl #4
   13b58:	a8080000 	stmdage	r8, {}	; <UNPREDICTABLE>
   13b5c:	9e000005 	cdpls	0, 0, cr0, cr0, cr5, {0}
   13b60:	09000008 	stmdbeq	r0, {r3}
   13b64:	00000024 	andeq	r0, r0, r4, lsr #32
   13b68:	ca1d0018 	bgt	753bd0 <__ccfg+0x733c28>
   13b6c:	0f00000e 	svceq	0x0000000e
   13b70:	00089e04 	andeq	r9, r8, r4, lsl #28
   13b74:	08b41e00 	ldmeq	r4!, {r9, sl, fp, ip}
   13b78:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   13b7c:	00000004 	andeq	r0, r0, r4
   13b80:	08a9040f 	stmiaeq	r9!, {r0, r1, r2, r3, sl}
   13b84:	040f0000 	streq	r0, [pc], #-0	; 13b8c <__exidx_end+0xdecc>
   13b88:	00000171 	andeq	r0, r0, r1, ror r1
   13b8c:	0008cb1e 	andeq	ip, r8, lr, lsl fp
   13b90:	001d1400 	andseq	r1, sp, r0, lsl #8
   13b94:	0f000000 	svceq	0x00000000
   13b98:	0008d104 	andeq	sp, r8, r4, lsl #2
   13b9c:	c0040f00 	andgt	r0, r4, r0, lsl #30
   13ba0:	08000008 	stmdaeq	r0, {r3}
   13ba4:	00000642 	andeq	r0, r0, r2, asr #12
   13ba8:	000008e7 	andeq	r0, r0, r7, ror #17
   13bac:	00002409 	andeq	r2, r0, r9, lsl #8
   13bb0:	1f000200 	svcne	0x00000200
   13bb4:	00000ac2 	andeq	r0, r0, r2, asr #21
   13bb8:	17033303 	strne	r3, [r3, -r3, lsl #6]
   13bbc:	0000044e 	andeq	r0, r0, lr, asr #8
   13bc0:	000abb1f 	andeq	fp, sl, pc, lsl fp
   13bc4:	03340300 	teqeq	r4, #0, 6
   13bc8:	0004541d 	andeq	r5, r4, sp, lsl r4
   13bcc:	474d2000 	strbmi	r2, [sp, -r0]
   13bd0:	17050000 	strne	r0, [r5, -r0]
   13bd4:	00045930 	andeq	r5, r4, r0, lsr r9
   13bd8:	18030500 	stmdane	r3, {r8, sl}
   13bdc:	21200001 			; <UNDEFINED> instruction: 0x21200001
   13be0:	000008e7 	andeq	r0, r0, r7, ror #17
   13be4:	01100305 	tsteq	r0, r5, lsl #6
   13be8:	f4212000 	vld4.8	{d2-d5}, [r1], r0
   13bec:	05000008 	streq	r0, [r0, #-8]
   13bf0:	00000003 	andeq	r0, r0, r3
   13bf4:	0a920000 	beq	fe493bfc <_estack+0xde48ebfc>
   13bf8:	00040000 	andeq	r0, r4, r0
   13bfc:	00004779 	andeq	r4, r0, r9, ror r7
   13c00:	4aaa0104 	bmi	fea94018 <_estack+0xdea8f018>
   13c04:	040c0000 	streq	r0, [ip], #-0
   13c08:	27000049 	strcs	r0, [r0, -r9, asr #32]
   13c0c:	2c000052 	stccs	0, cr0, [r0], {82}	; 0x52
   13c10:	5400004a 	strpl	r0, [r0], #-74	; 0xffffffb6
   13c14:	2b000000 	blcs	13c1c <__exidx_end+0xdf5c>
   13c18:	02000093 	andeq	r0, r0, #147	; 0x93
   13c1c:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
   13c20:	04030000 	streq	r0, [r3], #-0
   13c24:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   13c28:	07040200 	streq	r0, [r4, -r0, lsl #4]
   13c2c:	0000042b 	andeq	r0, r0, fp, lsr #8
   13c30:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
   13c34:	02000007 	andeq	r0, r0, #7
   13c38:	442a0408 	strtmi	r0, [sl], #-1032	; 0xfffffbf8
   13c3c:	95040000 	strls	r0, [r4, #-0]
   13c40:	0200004b 	andeq	r0, r0, #75	; 0x4b
   13c44:	0033162a 	eorseq	r1, r3, sl, lsr #12
   13c48:	42040000 	andmi	r0, r4, #0
   13c4c:	0200004f 	andeq	r0, r0, #79	; 0x4f
   13c50:	0060152f 	rsbeq	r1, r0, pc, lsr #10
   13c54:	04050000 	streq	r0, [r5], #-0
   13c58:	00000066 	andeq	r0, r0, r6, rrx
   13c5c:	00004806 	andeq	r4, r0, r6, lsl #16
   13c60:	00007500 	andeq	r7, r0, r0, lsl #10
   13c64:	00750700 	rsbseq	r0, r5, r0, lsl #14
   13c68:	05000000 	streq	r0, [r0, #-0]
   13c6c:	00007b04 	andeq	r7, r0, r4, lsl #22
   13c70:	a4040800 	strge	r0, [r4], #-2048	; 0xfffff800
   13c74:	02000056 	andeq	r0, r0, #86	; 0x56
   13c78:	00880f36 	addeq	r0, r8, r6, lsr pc
   13c7c:	04050000 	streq	r0, [r5], #-0
   13c80:	0000008e 	andeq	r0, r0, lr, lsl #1
   13c84:	00002c06 	andeq	r2, r0, r6, lsl #24
   13c88:	0000a200 	andeq	sl, r0, r0, lsl #4
   13c8c:	00750700 	rsbseq	r0, r5, r0, lsl #14
   13c90:	75070000 	strvc	r0, [r7, #-0]
   13c94:	00000000 	andeq	r0, r0, r0
   13c98:	5b080102 	blpl	2140a8 <__ccfg+0x1f4100>
   13c9c:	0900000c 	stmdbeq	r0, {r2, r3}
   13ca0:	0000515c 	andeq	r5, r0, ip, asr r1
   13ca4:	5412bb02 	ldrpl	fp, [r2], #-2818	; 0xfffff4fe
   13ca8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   13cac:	000056d7 	ldrdeq	r5, [r0], -r7
   13cb0:	7c10be02 	ldcvc	14, cr11, [r0], {2}
   13cb4:	02000000 	andeq	r0, r0, #0
   13cb8:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
   13cbc:	620a0000 	andvs	r0, sl, #0
   13cc0:	0700004e 	streq	r0, [r0, -lr, asr #32]
   13cc4:	0000a201 	andeq	sl, r0, r1, lsl #4
   13cc8:	06170300 	ldreq	r0, [r7], -r0, lsl #6
   13ccc:	000001f5 	strdeq	r0, [r0], -r5
   13cd0:	0049380b 	subeq	r3, r9, fp, lsl #16
   13cd4:	610b0000 	mrsvs	r0, (UNDEF: 11)
   13cd8:	0100004d 	tsteq	r0, sp, asr #32
   13cdc:	0052890b 	subseq	r8, r2, fp, lsl #18
   13ce0:	ea0b0200 	b	2d44e8 <__ccfg+0x2b4540>
   13ce4:	03000055 	movweq	r0, #85	; 0x55
   13ce8:	0051cb0b 	subseq	ip, r1, fp, lsl #22
   13cec:	070b0400 	streq	r0, [fp, -r0, lsl #8]
   13cf0:	05000055 	streq	r0, [r0, #-85]	; 0xffffffab
   13cf4:	00546b0b 	subseq	r6, r4, fp, lsl #22
   13cf8:	590b0600 	stmdbpl	fp, {r9, sl}
   13cfc:	07000049 	streq	r0, [r0, -r9, asr #32]
   13d00:	00551c0b 	subseq	r1, r5, fp, lsl #24
   13d04:	2a0b0800 	bcs	2d5d0c <__ccfg+0x2b5d64>
   13d08:	09000055 	stmdbeq	r0, {r0, r2, r4, r6}
   13d0c:	0055dd0b 	subseq	sp, r5, fp, lsl #26
   13d10:	220b0a00 	andcs	r0, fp, #0, 20
   13d14:	0b000051 	bleq	13e60 <__exidx_end+0xe1a0>
   13d18:	004bd60b 	subeq	sp, fp, fp, lsl #12
   13d1c:	ea0b0c00 	b	2d6d24 <__ccfg+0x2b6d7c>
   13d20:	0d00004b 	stceq	0, cr0, [r0, #-300]	; 0xfffffed4
   13d24:	004ea60b 	subeq	sl, lr, fp, lsl #12
   13d28:	bc0b0e00 	stclt	14, cr0, [fp], {-0}
   13d2c:	0f00004e 	svceq	0x0000004e
   13d30:	004d9b0b 	subeq	r9, sp, fp, lsl #22
   13d34:	af0b1000 	svcge	0x000b1000
   13d38:	11000051 	qaddne	r0, r1, r0
   13d3c:	004e250b 	subeq	r2, lr, fp, lsl #10
   13d40:	a20b1200 	andge	r1, fp, #0, 4
   13d44:	13000058 	movwne	r0, #88	; 0x58
   13d48:	0049c20b 	subeq	ip, r9, fp, lsl #4
   13d4c:	490b1400 	stmdbmi	fp, {sl, ip}
   13d50:	1500004e 	strne	r0, [r0, #-78]	; 0xffffffb2
   13d54:	0048d70b 	subeq	sp, r8, fp, lsl #14
   13d58:	0d0b1600 	stceq	6, cr1, [fp, #-0]
   13d5c:	17000056 	smlsdne	r0, r6, r0, r0
   13d60:	0057300b 	subseq	r3, r7, fp
   13d64:	6e0b1800 	cdpvs	8, 0, cr1, cr11, cr0, {0}
   13d68:	1900004e 	stmdbne	r0, {r1, r2, r3, r6}
   13d6c:	0052fb0b 	subseq	pc, r2, fp, lsl #22
   13d70:	1b0b1a00 	blne	2da578 <__ccfg+0x2ba5d0>
   13d74:	1b000056 	blne	13ed4 <__exidx_end+0xe214>
   13d78:	0047f80b 	subeq	pc, r7, fp, lsl #16
   13d7c:	290b1c00 	stmdbcs	fp, {sl, fp, ip}
   13d80:	1d000056 	stcne	0, cr0, [r0, #-344]	; 0xfffffea8
   13d84:	0056370b 	subseq	r3, r6, fp, lsl #14
   13d88:	a60b1e00 	strge	r1, [fp], -r0, lsl #28
   13d8c:	1f000047 	svcne	0x00000047
   13d90:	0056610b 	subseq	r6, r6, fp, lsl #2
   13d94:	ac0b2000 	stcge	0, cr2, [fp], {-0}
   13d98:	21000053 	qaddcs	r0, r3, r0
   13d9c:	0051810b 	subseq	r8, r1, fp, lsl #2
   13da0:	000b2200 	andeq	r2, fp, r0, lsl #4
   13da4:	23000056 	movwcs	r0, #86	; 0x56
   13da8:	0050a30b 	subseq	sl, r0, fp, lsl #6
   13dac:	a50b2400 	strge	r2, [fp, #-1024]	; 0xfffffc00
   13db0:	2500004f 	strcs	r0, [r0, #-79]	; 0xffffffb1
   13db4:	004ca10b 	subeq	sl, ip, fp, lsl #2
   13db8:	c30b2600 	movwgt	r2, #46592	; 0xb600
   13dbc:	2700004f 	strcs	r0, [r0, -pc, asr #32]
   13dc0:	004d3d0b 	subeq	r3, sp, fp, lsl #26
   13dc4:	d30b2800 	movwle	r2, #47104	; 0xb800
   13dc8:	2900004f 	stmdbcs	r0, {r0, r1, r2, r3, r6}
   13dcc:	004fe30b 	subeq	lr, pc, fp, lsl #6
   13dd0:	080b2a00 	stmdaeq	fp, {r9, fp, sp}
   13dd4:	2b000051 	blcs	13f20 <__exidx_end+0xe260>
   13dd8:	004f4c0b 	subeq	r4, pc, fp, lsl #24
   13ddc:	b90b2c00 	stmdblt	fp, {sl, fp, sp}
   13de0:	2d000053 	stccs	0, cr0, [r0, #-332]	; 0xfffffeb4
   13de4:	004ce20b 	subeq	lr, ip, fp, lsl #4
   13de8:	0a002e00 	beq	1f5f0 <__exidx_end+0x19930>
   13dec:	00004ede 	ldrdeq	r4, [r0], -lr
   13df0:	00a20107 	adceq	r0, r2, r7, lsl #2
   13df4:	17040000 	strne	r0, [r4, -r0]
   13df8:	0003d606 	andeq	sp, r3, r6, lsl #12
   13dfc:	4c0c0b00 			; <UNDEFINED> instruction: 0x4c0c0b00
   13e00:	0b000000 	bleq	13e08 <__exidx_end+0xe148>
   13e04:	0000483f 	andeq	r4, r0, pc, lsr r8
   13e08:	583c0b01 	ldmdapl	ip!, {r0, r8, r9, fp}
   13e0c:	0b020000 	bleq	93e14 <__ccfg+0x73e6c>
   13e10:	000056ac 	andeq	r5, r0, ip, lsr #13
   13e14:	4c2c0b03 			; <UNDEFINED> instruction: 0x4c2c0b03
   13e18:	0b040000 	bleq	113e20 <__ccfg+0xf3e78>
   13e1c:	00004924 	andeq	r4, r0, r4, lsr #18
   13e20:	4cbe0b05 	fldmiaxmi	lr!, {d0-d1}	;@ Deprecated
   13e24:	0b060000 	bleq	193e2c <__ccfg+0x173e84>
   13e28:	00004c1c 	andeq	r4, r0, ip, lsl ip
   13e2c:	55580b07 	ldrbpl	r0, [r8, #-2823]	; 0xfffff4f9
   13e30:	0b080000 	bleq	213e38 <__ccfg+0x1f3e90>
   13e34:	0000568c 	andeq	r5, r0, ip, lsl #13
   13e38:	548f0b09 	strpl	r0, [pc], #2825	; 13e40 <__exidx_end+0xe180>
   13e3c:	0b0a0000 	bleq	293e44 <__ccfg+0x273e9c>
   13e40:	00004977 	andeq	r4, r0, r7, ror r9
   13e44:	4c5f0b0b 	mrrcmi	11, 0, r0, pc, cr11	; <UNPREDICTABLE>
   13e48:	0b0c0000 	bleq	313e50 <__ccfg+0x2f3ea8>
   13e4c:	000048c0 	andeq	r4, r0, r0, asr #17
   13e50:	58710b0d 	ldmdapl	r1!, {r0, r2, r3, r8, r9, fp}^
   13e54:	0b0e0000 	bleq	393e5c <__ccfg+0x373eb4>
   13e58:	000050f5 	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   13e5c:	4df00b0f 			; <UNDEFINED> instruction: 0x4df00b0f
   13e60:	0b100000 	bleq	413e68 <__ccfg+0x3f3ec0>
   13e64:	00005132 	andeq	r5, r0, r2, lsr r1
   13e68:	57720b11 			; <UNDEFINED> instruction: 0x57720b11
   13e6c:	0b120000 	bleq	493e74 <__ccfg+0x473ecc>
   13e70:	00004a42 	andeq	r4, r0, r2, asr #20
   13e74:	4e030b13 	vmovmi.32	d3[0], r0
   13e78:	0b140000 	bleq	513e80 <__ccfg+0x4f3ed8>
   13e7c:	00005066 	andeq	r5, r0, r6, rrx
   13e80:	4bf70b15 	blmi	ffdd6adc <_estack+0xdfdd1adc>
   13e84:	0b160000 	bleq	593e8c <__ccfg+0x573ee4>
   13e88:	000050b2 	strheq	r5, [r0], -r2
   13e8c:	4ec80b17 	vdup.8	d8, r0
   13e90:	0b180000 	bleq	613e98 <__ccfg+0x5f3ef0>
   13e94:	00004942 	andeq	r4, r0, r2, asr #18
   13e98:	57190b19 			; <UNDEFINED> instruction: 0x57190b19
   13e9c:	0b1a0000 	bleq	693ea4 <__ccfg+0x673efc>
   13ea0:	00005032 	andeq	r5, r0, r2, lsr r0
   13ea4:	4dbc0b1b 			; <UNDEFINED> instruction: 0x4dbc0b1b
   13ea8:	0b1c0000 	bleq	713eb0 <__ccfg+0x6f3f08>
   13eac:	000047e1 	andeq	r4, r0, r1, ror #15
   13eb0:	4f7d0b1d 	svcmi	0x007d0b1d
   13eb4:	0b1e0000 	bleq	793ebc <__ccfg+0x773f14>
   13eb8:	00004f69 	andeq	r4, r0, r9, ror #30
   13ebc:	544c0b1f 	strbpl	r0, [ip], #-2847	; 0xfffff4e1
   13ec0:	0b200000 	bleq	813ec8 <__ccfg+0x7f3f20>
   13ec4:	000054d7 	ldrdeq	r5, [r0], -r7
   13ec8:	56f80b21 	ldrbtpl	r0, [r8], r1, lsr #22
   13ecc:	0b220000 	bleq	893ed4 <__ccfg+0x873f2c>
   13ed0:	00004cef 	andeq	r4, r0, pc, ror #25
   13ed4:	52ab0b23 	adcpl	r0, fp, #35840	; 0x8c00
   13ed8:	0b240000 	bleq	913ee0 <__ccfg+0x8f3f38>
   13edc:	000054a4 	andeq	r5, r0, r4, lsr #9
   13ee0:	53c80b25 	bicpl	r0, r8, #37888	; 0x9400
   13ee4:	0b260000 	bleq	993eec <__ccfg+0x973f44>
   13ee8:	000053dc 	ldrdeq	r5, [r0], -ip
   13eec:	53f00b27 	mvnspl	r0, #39936	; 0x9c00
   13ef0:	0b280000 	bleq	a13ef8 <__ccfg+0x9f3f50>
   13ef4:	00004b80 	andeq	r4, r0, r0, lsl #23
   13ef8:	4a2d0b29 	bmi	b56ba4 <__ccfg+0xb36bfc>
   13efc:	0b2a0000 	bleq	a93f04 <__ccfg+0xa73f5c>
   13f00:	00004a55 	andeq	r4, r0, r5, asr sl
   13f04:	57b10b2b 	ldrpl	r0, [r1, fp, lsr #22]!
   13f08:	0b2c0000 	bleq	b13f10 <__ccfg+0xaf3f68>
   13f0c:	00004a87 	andeq	r4, r0, r7, lsl #21
   13f10:	55a10b2d 	strpl	r0, [r1, #2861]!	; 0xb2d
   13f14:	0b2e0000 	bleq	b93f1c <__ccfg+0xb73f74>
   13f18:	000055b5 			; <UNDEFINED> instruction: 0x000055b5
   13f1c:	55c90b2f 	strbpl	r0, [r9, #2863]	; 0xb2f
   13f20:	0b300000 	bleq	c13f28 <__ccfg+0xbf3f80>
   13f24:	00004c71 	andeq	r4, r0, r1, ror ip
   13f28:	4c4b0b31 	vmovmi	d17, r0, fp
   13f2c:	0b320000 	bleq	c93f34 <__ccfg+0xc73f8c>
   13f30:	00004f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
   13f34:	51450b33 	cmppl	r5, r3, lsr fp
   13f38:	0b340000 	bleq	d13f40 <__ccfg+0xcf3f98>
   13f3c:	000057c5 	andeq	r5, r0, r5, asr #15
   13f40:	47890b35 			; <UNDEFINED> instruction: 0x47890b35
   13f44:	0b360000 	bleq	d93f4c <__ccfg+0xd73fa4>
   13f48:	00004d71 	andeq	r4, r0, r1, ror sp
   13f4c:	4d860b37 	vstrmi	d0, [r6, #220]	; 0xdc
   13f50:	0b380000 	bleq	e13f58 <__ccfg+0xdf3fb0>
   13f54:	00004ff3 	strdeq	r4, [r0], -r3
   13f58:	501d0b39 	andspl	r0, sp, r9, lsr fp
   13f5c:	0b3a0000 	bleq	e93f64 <__ccfg+0xe73fbc>
   13f60:	000057ee 	andeq	r5, r0, lr, ror #15
   13f64:	52960b3b 	addspl	r0, r6, #60416	; 0xec00
   13f68:	0b3c0000 	bleq	f13f70 <__ccfg+0xef3fc8>
   13f6c:	00004d14 	andeq	r4, r0, r4, lsl sp
   13f70:	48510b3d 	ldmdami	r1, {r0, r2, r3, r4, r5, r8, r9, fp}^
   13f74:	0b3e0000 	bleq	f93f7c <__ccfg+0xf73fd4>
   13f78:	00004806 	andeq	r4, r0, r6, lsl #16
   13f7c:	51910b3f 	orrspl	r0, r1, pc, lsr fp
   13f80:	0b400000 	bleq	1013f88 <__ccfg+0xff3fe0>
   13f84:	00005317 	andeq	r5, r0, r7, lsl r3
   13f88:	542e0b41 	strtpl	r0, [lr], #-2881	; 0xfffff4bf
   13f8c:	0b420000 	bleq	1093f94 <__ccfg+0x1073fec>
   13f90:	00005008 	andeq	r5, r0, r8
   13f94:	58270b43 	stmdapl	r7!, {r0, r1, r6, r8, r9, fp}
   13f98:	0b440000 	bleq	1113fa0 <__ccfg+0x10f3ff8>
   13f9c:	000052c1 	andeq	r5, r0, r1, asr #5
   13fa0:	4a710b45 	bmi	1c56cbc <__ccfg+0x1c36d14>
   13fa4:	0b460000 	bleq	1193fac <__ccfg+0x1174004>
   13fa8:	00004dd2 	ldrdeq	r4, [r0], -r2
   13fac:	4f160b47 	svcmi	0x00160b47
   13fb0:	0b480000 	bleq	1213fb8 <__ccfg+0x11f4010>
   13fb4:	000047c5 	andeq	r4, r0, r5, asr #15
   13fb8:	48e70b49 	stmiami	r7!, {r0, r3, r6, r8, r9, fp}^
   13fbc:	0b4a0000 	bleq	1293fc4 <__ccfg+0x127401c>
   13fc0:	00004d28 	andeq	r4, r0, r8, lsr #26
   13fc4:	50440b4b 	subpl	r0, r4, fp, asr #22
   13fc8:	004c0000 	subeq	r0, ip, r0
   13fcc:	66070202 	strvs	r0, [r7], -r2, lsl #4
   13fd0:	0c00000d 	stceq	0, cr0, [r0], {13}
   13fd4:	000003f3 	strdeq	r0, [r0], -r3
   13fd8:	000003e8 	andeq	r0, r0, r8, ror #7
   13fdc:	dd0e000d 	stcle	0, cr0, [lr, #-52]	; 0xffffffcc
   13fe0:	05000003 	streq	r0, [r0, #-3]
   13fe4:	0003ff04 	andeq	pc, r3, r4, lsl #30
   13fe8:	03ed0e00 	mvneq	r0, #0, 28
   13fec:	01020000 	mrseq	r0, (UNDEF: 2)
   13ff0:	000c6408 	andeq	r6, ip, r8, lsl #8
   13ff4:	03f80e00 	mvnseq	r0, #0, 28
   13ff8:	b30f0000 	movwlt	r0, #61440	; 0xf000
   13ffc:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
   14000:	e81a014c 	ldmda	sl, {r2, r3, r6, r8}
   14004:	0f000003 	svceq	0x00000003
   14008:	00004dac 	andeq	r4, r0, ip, lsr #27
   1400c:	1a018205 	bne	74828 <__ccfg+0x54880>
   14010:	000003e8 	andeq	r0, r0, r8, ror #7
   14014:	0003f80c 	andeq	pc, r3, ip, lsl #16
   14018:	00042900 	andeq	r2, r4, r0, lsl #18
   1401c:	09000d00 	stmdbeq	r0, {r8, sl, fp}
   14020:	00004fb5 			; <UNDEFINED> instruction: 0x00004fb5
   14024:	1e0d2d06 	cdpne	13, 0, cr2, cr13, cr6, {0}
   14028:	09000004 	stmdbeq	r0, {r2}
   1402c:	00005671 	andeq	r5, r0, r1, ror r6
   14030:	f51c3806 			; <UNDEFINED> instruction: 0xf51c3806
   14034:	0a000001 	beq	14040 <__exidx_end+0xe380>
   14038:	00004c85 	andeq	r4, r0, r5, lsl #25
   1403c:	00a20107 	adceq	r0, r2, r7, lsl #2
   14040:	3a060000 	bcc	194048 <__ccfg+0x1740a0>
   14044:	0004b40e 	andeq	fp, r4, lr, lsl #8
   14048:	47da0b00 	ldrbmi	r0, [sl, r0, lsl #22]
   1404c:	0b000000 	bleq	14054 <__exidx_end+0xe394>
   14050:	00004eb5 			; <UNDEFINED> instruction: 0x00004eb5
   14054:	57840b01 	strpl	r0, [r4, r1, lsl #22]
   14058:	0b020000 	bleq	94060 <__ccfg+0x740b8>
   1405c:	00005747 	andeq	r5, r0, r7, asr #14
   14060:	51ee0b03 	mvnpl	r0, r3, lsl #22
   14064:	0b040000 	bleq	11406c <__ccfg+0xf40c4>
   14068:	00005515 	andeq	r5, r0, r5, lsl r5
   1406c:	49fe0b05 	ldmibmi	lr!, {r0, r2, r8, r9, fp}^
   14070:	0b060000 	bleq	194078 <__ccfg+0x1740d0>
   14074:	000049d8 	ldrdeq	r4, [r0], -r8
   14078:	4be30b07 	blmi	ff8d6c9c <_estack+0xdf8d1c9c>
   1407c:	0b080000 	bleq	214084 <__ccfg+0x1f40dc>
   14080:	000050c8 	andeq	r5, r0, r8, asr #1
   14084:	4a050b09 	bmi	156cb0 <__ccfg+0x136d08>
   14088:	0b0a0000 	bleq	294090 <__ccfg+0x2740e8>
   1408c:	000050cf 	andeq	r5, r0, pc, asr #1
   14090:	4a6a0b0b 	bmi	1a96cc4 <__ccfg+0x1a76d1c>
   14094:	0b0c0000 	bleq	31409c <__ccfg+0x2f40f4>
   14098:	000049ef 	andeq	r4, r0, pc, ror #19
   1409c:	556c0b0d 	strbpl	r0, [ip, #-2829]!	; 0xfffff4f3
   140a0:	0b0e0000 	bleq	3940a8 <__ccfg+0x374100>
   140a4:	00005335 	andeq	r5, r0, r5, lsr r3
   140a8:	6404000f 	strvs	r0, [r4], #-15
   140ac:	06000054 			; <UNDEFINED> instruction: 0x06000054
   140b0:	0441013f 	strbeq	r0, [r1], #-319	; 0xfffffec1
   140b4:	f8090000 			; <UNDEFINED> instruction: 0xf8090000
   140b8:	06000054 			; <UNDEFINED> instruction: 0x06000054
   140bc:	04b40f41 	ldrteq	r0, [r4], #3905	; 0xf41
   140c0:	80090000 	andhi	r0, r9, r0
   140c4:	06000055 			; <UNDEFINED> instruction: 0x06000055
   140c8:	002c0c4a 	eoreq	r0, ip, sl, asr #24
   140cc:	97090000 	strls	r0, [r9, -r0]
   140d0:	06000049 	streq	r0, [r0], -r9, asr #32
   140d4:	002c0c4b 	eoreq	r0, ip, fp, asr #24
   140d8:	45100000 	ldrmi	r0, [r0, #-0]
   140dc:	09000056 	stmdbeq	r0, {r1, r2, r4, r6}
   140e0:	00005591 	muleq	r0, r1, r5
   140e4:	f5144c06 			; <UNDEFINED> instruction: 0xf5144c06
   140e8:	05000004 	streq	r0, [r0, #-4]
   140ec:	0004e404 	andeq	lr, r4, r4, lsl #8
   140f0:	7f091100 	svcvc	0x00091100
   140f4:	0600004e 	streq	r0, [r0], -lr, asr #32
   140f8:	05080f4e 	streq	r0, [r8, #-3918]	; 0xfffff0b2
   140fc:	04050000 	streq	r0, [r5], #-0
   14100:	000004fb 	strdeq	r0, [r0], -fp
   14104:	00547a12 	subseq	r7, r4, r2, lsl sl
   14108:	51db0900 	bicspl	r0, fp, r0, lsl #18
   1410c:	52060000 	andpl	r0, r6, #0
   14110:	00051f0d 	andeq	r1, r5, sp, lsl #30
   14114:	0e040500 	cfsh32eq	mvfx0, mvfx4, #0
   14118:	13000005 	movwne	r0, #5
   1411c:	00004bc9 	andeq	r4, r0, r9, asr #23
   14120:	01670634 	cmneq	r7, r4, lsr r6
   14124:	00055015 	andeq	r5, r5, r5, lsl r0
   14128:	4fbe1400 	svcmi	0x00be1400
   1412c:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
   14130:	03ed0f01 	mvneq	r0, #1, 30
   14134:	14000000 	strne	r0, [r0], #-0
   14138:	00004bad 	andeq	r4, r0, sp, lsr #23
   1413c:	14016a06 	strne	r6, [r1], #-2566	; 0xfffff5fa
   14140:	00000555 	andeq	r0, r0, r5, asr r5
   14144:	250e0004 	strcs	r0, [lr, #-4]
   14148:	0c000005 	stceq	0, cr0, [r0], {5}
   1414c:	000000c8 	andeq	r0, r0, r8, asr #1
   14150:	00000565 	andeq	r0, r0, r5, ror #10
   14154:	00003315 	andeq	r3, r0, r5, lsl r3
   14158:	0c002d00 	stceq	13, cr2, [r0], {-0}
   1415c:	00000550 	andeq	r0, r0, r0, asr r5
   14160:	00000570 	andeq	r0, r0, r0, ror r5
   14164:	650e000d 	strvs	r0, [lr, #-13]
   14168:	0f000005 	svceq	0x00000005
   1416c:	00004eed 	andeq	r4, r0, sp, ror #29
   14170:	03016b06 	movweq	r6, #6918	; 0x1b06
   14174:	00000570 	andeq	r0, r0, r0, ror r5
   14178:	0051150f 	subseq	r1, r1, pc, lsl #10
   1417c:	016e0600 	cmneq	lr, r0, lsl #12
   14180:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14184:	54b81600 	ldrtpl	r1, [r8], #1536	; 0x600
   14188:	01070000 	mrseq	r0, (UNDEF: 7)
   1418c:	000000a2 	andeq	r0, r0, r2, lsr #1
   14190:	06018106 	streq	r8, [r1], -r6, lsl #2
   14194:	00000639 	andeq	r0, r0, r9, lsr r6
   14198:	0048780b 	subeq	r7, r8, fp, lsl #16
   1419c:	840b0000 	strhi	r0, [fp], #-0
   141a0:	02000048 	andeq	r0, r0, #72	; 0x48
   141a4:	0048900b 	subeq	r9, r8, fp
   141a8:	b10b0300 	mrslt	r0, (UNDEF: 59)
   141ac:	0300004c 	movweq	r0, #76	; 0x4c
   141b0:	00489c0b 	subeq	r9, r8, fp, lsl #24
   141b4:	180b0400 	stmdane	fp, {sl}
   141b8:	0400004e 	streq	r0, [r0], #-78	; 0xffffffb2
   141bc:	004efe0b 	subeq	pc, lr, fp, lsl #28
   141c0:	540b0500 	strpl	r0, [fp], #-1280	; 0xfffffb00
   141c4:	0500004e 	streq	r0, [r0, #-78]	; 0xffffffb2
   141c8:	0049880b 	subeq	r8, r9, fp, lsl #16
   141cc:	a80b0500 	stmdage	fp, {r8, sl}
   141d0:	06000048 	streq	r0, [r0], -r8, asr #32
   141d4:	00507c0b 	subseq	r7, r0, fp, lsl #24
   141d8:	9f0b0600 	svcls	0x000b0600
   141dc:	0600004b 	streq	r0, [r0], -fp, asr #32
   141e0:	0050890b 	subseq	r8, r0, fp, lsl #18
   141e4:	380b0600 	stmdacc	fp, {r9, sl}
   141e8:	06000055 			; <UNDEFINED> instruction: 0x06000055
   141ec:	0050960b 	subseq	r9, r0, fp, lsl #12
   141f0:	d60b0600 	strle	r0, [fp], -r0, lsl #12
   141f4:	06000050 			; <UNDEFINED> instruction: 0x06000050
   141f8:	0048b40b 	subeq	fp, r8, fp, lsl #8
   141fc:	be0b0700 	cdplt	7, 0, cr0, cr11, cr0, {0}
   14200:	07000051 	smlsdeq	r0, r1, r0, r0
   14204:	00520b0b 	subseq	r0, r2, fp, lsl #22
   14208:	730b0700 	movwvc	r0, #46848	; 0xb700
   1420c:	07000055 	smlsdeq	r0, r5, r0, r0
   14210:	004a9c0b 	subeq	r9, sl, fp, lsl #24
   14214:	ee0b0700 	cdp	7, 0, cr0, cr11, cr0, {0}
   14218:	08000052 	stmdaeq	r0, {r1, r4, r6}
   1421c:	00482d0b 	subeq	r2, r8, fp, lsl #26
   14220:	460b0800 	strmi	r0, [fp], -r0, lsl #16
   14224:	08000055 	stmdaeq	r0, {r0, r2, r4, r6}
   14228:	00530a0b 	subseq	r0, r3, fp, lsl #20
   1422c:	0f000800 	svceq	0x00000800
   14230:	0000579e 	muleq	r0, lr, r7
   14234:	1f019f06 	svcne	0x00019f06
   14238:	0000058f 	andeq	r0, r0, pc, lsl #11
   1423c:	00533c0f 	subseq	r3, r3, pc, lsl #24
   14240:	01a20600 			; <UNDEFINED> instruction: 0x01a20600
   14244:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14248:	4f0b0f00 	svcmi	0x000b0f00
   1424c:	a5060000 	strge	r0, [r6, #-0]
   14250:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14254:	830f0000 	movwhi	r0, #61440	; 0xf000
   14258:	06000058 			; <UNDEFINED> instruction: 0x06000058
   1425c:	2c0c01a8 	stfcss	f0, [ip], {168}	; 0xa8
   14260:	0f000000 	svceq	0x00000000
   14264:	000049a7 	andeq	r4, r0, r7, lsr #19
   14268:	0c01ab06 			; <UNDEFINED> instruction: 0x0c01ab06
   1426c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14270:	0053460f 	subseq	r4, r3, pc, lsl #12
   14274:	01ae0600 			; <UNDEFINED> instruction: 0x01ae0600
   14278:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1427c:	51f50f00 	mvnspl	r0, r0, lsl #30
   14280:	b1060000 	mrslt	r0, (UNDEF: 6)
   14284:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14288:	000f0000 	andeq	r0, pc, r0
   1428c:	06000052 			; <UNDEFINED> instruction: 0x06000052
   14290:	2c0c01b4 	stfcss	f0, [ip], {180}	; 0xb4
   14294:	0f000000 	svceq	0x00000000
   14298:	00005350 	andeq	r5, r0, r0, asr r3
   1429c:	0c01b706 	stceq	7, cr11, [r1], {6}
   142a0:	0000002c 	andeq	r0, r0, ip, lsr #32
   142a4:	0050580f 	subseq	r5, r0, pc, lsl #16
   142a8:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
   142ac:	00002c0c 	andeq	r2, r0, ip, lsl #24
   142b0:	57e20f00 	strbpl	r0, [r2, r0, lsl #30]!
   142b4:	bd060000 	stclt	0, cr0, [r6, #-0]
   142b8:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142bc:	5a0f0000 	bpl	3d42c4 <__ccfg+0x3b431c>
   142c0:	06000053 			; <UNDEFINED> instruction: 0x06000053
   142c4:	2c0c01c0 	stfcss	f0, [ip], {192}	; 0xc0
   142c8:	0f000000 	svceq	0x00000000
   142cc:	000058ba 			; <UNDEFINED> instruction: 0x000058ba
   142d0:	0c01c306 	stceq	3, cr12, [r1], {6}
   142d4:	0000002c 	andeq	r0, r0, ip, lsr #32
   142d8:	00574e0f 	subseq	r4, r7, pc, lsl #28
   142dc:	01c60600 	biceq	r0, r6, r0, lsl #12
   142e0:	00002c0c 	andeq	r2, r0, ip, lsl #24
   142e4:	575a0f00 	ldrbpl	r0, [sl, -r0, lsl #30]
   142e8:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
   142ec:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142f0:	660f0000 	strvs	r0, [pc], -r0
   142f4:	06000057 			; <UNDEFINED> instruction: 0x06000057
   142f8:	2c0c01cc 	stfcss	f0, [ip], {204}	; 0xcc
   142fc:	0f000000 	svceq	0x00000000
   14300:	0000578b 	andeq	r5, r0, fp, lsl #15
   14304:	0c01d006 	stceq	0, cr13, [r1], {6}
   14308:	0000002c 	andeq	r0, r0, ip, lsr #32
   1430c:	0058ad0f 	subseq	sl, r8, pc, lsl #26
   14310:	01d30600 	bicseq	r0, r3, r0, lsl #12
   14314:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14318:	4a0c0f00 	bmi	317f20 <__ccfg+0x2f7f78>
   1431c:	d6060000 	strle	r0, [r6], -r0
   14320:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14324:	b50f0000 	strlt	r0, [pc, #-0]	; 1432c <__exidx_end+0xe66c>
   14328:	06000047 	streq	r0, [r0], -r7, asr #32
   1432c:	2c0c01d9 	stfcss	f0, [ip], {217}	; 0xd9
   14330:	0f000000 	svceq	0x00000000
   14334:	00004cd1 	ldrdeq	r4, [r0], -r1
   14338:	0c01dc06 	stceq	12, cr13, [r1], {6}
   1433c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14340:	0049df0f 	subeq	sp, r9, pc, lsl #30
   14344:	01df0600 	bicseq	r0, pc, r0, lsl #12
   14348:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1434c:	536b0f00 	cmnpl	fp, #0, 30
   14350:	e2060000 	and	r0, r6, #0
   14354:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14358:	340f0000 	strcc	r0, [pc], #-0	; 14360 <__exidx_end+0xe6a0>
   1435c:	0600004f 	streq	r0, [r0], -pc, asr #32
   14360:	2c0c01e5 	stfcss	f0, [ip], {229}	; 0xe5
   14364:	0f000000 	svceq	0x00000000
   14368:	0000516e 	andeq	r5, r0, lr, ror #2
   1436c:	0c01e806 	stceq	8, cr14, [r1], {6}
   14370:	0000002c 	andeq	r0, r0, ip, lsr #32
   14374:	00567a0f 	subseq	r7, r6, pc, lsl #20
   14378:	01ef0600 	mvneq	r0, r0, lsl #12
   1437c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14380:	58510f00 	ldmdapl	r1, {r8, r9, sl, fp}^
   14384:	f2060000 	vhadd.s8	d0, d6, d0
   14388:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1438c:	610f0000 	mrsvs	r0, CPSR
   14390:	06000058 			; <UNDEFINED> instruction: 0x06000058
   14394:	2c0c01f5 	stfcss	f0, [ip], {245}	; 0xf5
   14398:	0f000000 	svceq	0x00000000
   1439c:	00004bb6 			; <UNDEFINED> instruction: 0x00004bb6
   143a0:	0c01f806 	stceq	8, cr15, [r1], {6}
   143a4:	0000002c 	andeq	r0, r0, ip, lsr #32
   143a8:	0056c20f 	subseq	ip, r6, pc, lsl #4
   143ac:	01fb0600 	mvnseq	r0, r0, lsl #12
   143b0:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143b4:	52d60f00 	sbcspl	r0, r6, #0, 30
   143b8:	fe060000 	cdp2	0, 0, cr0, cr6, cr0, {0}
   143bc:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143c0:	4a0f0000 	bmi	3d43c8 <__ccfg+0x3b4420>
   143c4:	0600004d 	streq	r0, [r0], -sp, asr #32
   143c8:	2c0c0202 	sfmcs	f0, 4, [ip], {2}
   143cc:	0f000000 	svceq	0x00000000
   143d0:	000054ca 	andeq	r5, r0, sl, asr #9
   143d4:	0c020a06 			; <UNDEFINED> instruction: 0x0c020a06
   143d8:	0000002c 	andeq	r0, r0, ip, lsr #32
   143dc:	004c3d0f 	subeq	r3, ip, pc, lsl #26
   143e0:	020d0600 	andeq	r0, sp, #0, 12
   143e4:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143e8:	002c0c00 	eoreq	r0, ip, r0, lsl #24
   143ec:	07fe0000 	ldrbeq	r0, [lr, r0]!
   143f0:	000d0000 	andeq	r0, sp, r0
   143f4:	004e340f 	subeq	r3, lr, pc, lsl #8
   143f8:	03fb0600 	mvnseq	r0, #0, 12
   143fc:	0007f30c 	andeq	pc, r7, ip, lsl #6
   14400:	04f50c00 	ldrbteq	r0, [r5], #3072	; 0xc00
   14404:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
   14408:	33150000 	tstcc	r5, #0
   1440c:	0d000000 	stceq	0, cr0, [r0, #-0]
   14410:	53970f00 	orrspl	r0, r7, #0, 30
   14414:	84060000 	strhi	r0, [r6], #-0
   14418:	080b1405 	stmdaeq	fp, {r0, r2, sl, ip}
   1441c:	f6160000 			; <UNDEFINED> instruction: 0xf6160000
   14420:	0700004e 	streq	r0, [r0, -lr, asr #32]
   14424:	0000a201 	andeq	sl, r0, r1, lsl #4
   14428:	058b0600 	streq	r0, [fp, #1536]	; 0x600
   1442c:	00086606 	andeq	r6, r8, r6, lsl #12
   14430:	4c930b00 	vldmiami	r3, {d0-d-1}
   14434:	0b000000 	bleq	1443c <__exidx_end+0xe77c>
   14438:	000050e3 	andeq	r5, r0, r3, ror #1
   1443c:	48630b01 	stmdami	r3!, {r0, r8, r9, fp}^
   14440:	0b020000 	bleq	94448 <__ccfg+0x744a0>
   14444:	00005813 	andeq	r5, r0, r3, lsl r8
   14448:	54110b03 	ldrpl	r0, [r1], #-2819	; 0xfffff4fd
   1444c:	0b040000 	bleq	114454 <__ccfg+0xf44ac>
   14450:	00005404 	andeq	r5, r0, r4, lsl #8
   14454:	49670b05 	stmdbmi	r7!, {r0, r2, r8, r9, fp}^
   14458:	00060000 	andeq	r0, r6, r0
   1445c:	0058030f 	subseq	r0, r8, pc, lsl #6
   14460:	05980600 	ldreq	r0, [r8, #1536]	; 0x600
   14464:	00082815 	andeq	r2, r8, r5, lsl r8
   14468:	56e70f00 	strbtpl	r0, [r7], r0, lsl #30
   1446c:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
   14470:	00331107 	eorseq	r1, r3, r7, lsl #2
   14474:	840f0000 	strhi	r0, [pc], #-0	; 1447c <__exidx_end+0xe7bc>
   14478:	06000053 			; <UNDEFINED> instruction: 0x06000053
   1447c:	2c0c07ae 	stccs	7, cr0, [ip], {174}	; 0xae
   14480:	04000000 	streq	r0, [r0], #-0
   14484:	00005659 	andeq	r5, r0, r9, asr r6
   14488:	a2167b07 	andsge	r7, r6, #7168	; 0x1c00
   1448c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   14490:	0000088d 	andeq	r0, r0, sp, lsl #17
   14494:	6b050202 	blvs	154ca4 <__ccfg+0x134cfc>
   14498:	0400000a 	streq	r0, [r0], #-10
   1449c:	000048fd 	strdeq	r4, [r0], -sp
   144a0:	2c0f8007 	stccs	0, cr8, [pc], {7}
   144a4:	04000000 	streq	r0, [r0], #-0
   144a8:	000048fc 	strdeq	r4, [r0], -ip
   144ac:	33168107 	tstcc	r6, #-1073741823	; 0xc0000001
   144b0:	04000000 	streq	r0, [r0], #-0
   144b4:	00005364 	andeq	r5, r0, r4, ror #6
   144b8:	3a0f8407 	bcc	3f54dc <__ccfg+0x3d5534>
   144bc:	02000000 	andeq	r0, r0, #0
   144c0:	4a270404 	bmi	9d54d8 <__ccfg+0x9b5530>
   144c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   144c8:	004a1f03 	subeq	r1, sl, r3, lsl #30
   144cc:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   144d0:	0000442f 	andeq	r4, r0, pc, lsr #8
   144d4:	1f031002 	svcne	0x00031002
   144d8:	13000054 	movwne	r0, #84	; 0x54
   144dc:	0000537b 	andeq	r5, r0, fp, ror r3
   144e0:	01ed0708 	mvneq	r0, r8, lsl #14
   144e4:	0009100a 	andeq	r1, r9, sl
   144e8:	6f6c1700 	svcvs	0x006c1700
   144ec:	ed070077 	stc	0, cr0, [r7, #-476]	; 0xfffffe24
   144f0:	08a51a01 	stmiaeq	r5!, {r0, r9, fp, ip}
   144f4:	14000000 	strne	r0, [r0], #-0
   144f8:	000048d2 	ldrdeq	r4, [r0], -r2
   144fc:	1f01ed07 	svcne	0x0001ed07
   14500:	000008a5 	andeq	r0, r0, r5, lsr #17
   14504:	08180004 	ldmdaeq	r8, {r2}
   14508:	0901f407 	stmdbeq	r1, {r0, r1, r2, sl, ip, sp, lr, pc}
   1450c:	00000932 	andeq	r0, r0, r2, lsr r9
   14510:	07007319 	smladeq	r0, r9, r3, r7
   14514:	e51301f6 	ldr	r0, [r3, #-502]	; 0xfffffe0a
   14518:	19000008 	stmdbne	r0, {r3}
   1451c:	07006c6c 	streq	r6, [r0, -ip, ror #24]
   14520:	bd0a01f7 	stflts	f0, [sl, #-988]	; 0xfffffc24
   14524:	00000008 	andeq	r0, r0, r8
   14528:	0049f61a 	subeq	pc, r9, sl, lsl r6	; <UNPREDICTABLE>
   1452c:	01f80700 	mvnseq	r0, r0, lsl #14
   14530:	00091003 	andeq	r1, r9, r3
   14534:	09320e00 	ldmdbeq	r2!, {r9, sl, fp}
   14538:	990c0000 	stmdbls	ip, {}	; <UNPREDICTABLE>
   1453c:	54000008 	strpl	r0, [r0], #-8
   14540:	15000009 	strne	r0, [r0, #-9]
   14544:	00000033 	andeq	r0, r0, r3, lsr r0
   14548:	440e00ff 	strmi	r0, [lr], #-255	; 0xffffff01
   1454c:	0f000009 	svceq	0x00000009
   14550:	00005218 	andeq	r5, r0, r8, lsl r2
   14554:	1601fc07 	strne	pc, [r1], -r7, lsl #24
   14558:	00000954 	andeq	r0, r0, r4, asr r9
   1455c:	0049ce0f 	subeq	ip, r9, pc, lsl #28
   14560:	02020700 	andeq	r0, r2, #0, 14
   14564:	00095416 	andeq	r5, r9, r6, lsl r4
   14568:	48241b00 	stmdami	r4!, {r8, r9, fp, ip}
   1456c:	24010000 	strcs	r0, [r1], #-0
   14570:	08bd0102 	popeq	{r1, r8}
   14574:	4a2c0000 	bmi	b1457c <__ccfg+0xaf45d4>
   14578:	00540000 	subseq	r0, r4, r0
   1457c:	9c010000 	stcls	0, cr0, [r1], {-0}
   14580:	0100751c 	tsteq	r0, ip, lsl r5
   14584:	bd120224 	lfmlt	f0, 4, [r2, #-144]	; 0xffffff70
   14588:	2b000008 	blcs	145b0 <__exidx_end+0xe8f0>
   1458c:	2700005b 	smlsdcs	r0, fp, r0, r0
   14590:	1c00005b 	stcne	0, cr0, [r0], {91}	; 0x5b
   14594:	24010076 	strcs	r0, [r1], #-118	; 0xffffff8a
   14598:	08bd1c02 	popeq	{r1, sl, fp, ip}
   1459c:	5b570000 	blpl	15d45a4 <__ccfg+0x15b45fc>
   145a0:	5b530000 	blpl	14d45a8 <__ccfg+0x14b4600>
   145a4:	751d0000 	ldrvc	r0, [sp, #-0]
   145a8:	26010075 			; <UNDEFINED> instruction: 0x26010075
   145ac:	093f1102 	ldmdbeq	pc!, {r1, r8, ip}	; <UNPREDICTABLE>
   145b0:	761d0000 	ldrvc	r0, [sp], -r0
   145b4:	27010076 	smlsdxcs	r1, r6, r0, r0
   145b8:	093f1102 	ldmdbeq	pc!, {r1, r8, ip}	; <UNPREDICTABLE>
   145bc:	771d0000 	ldrvc	r0, [sp, -r0]
   145c0:	02280100 	eoreq	r0, r8, #0, 2
   145c4:	0009320b 	andeq	r3, r9, fp, lsl #4
   145c8:	13e01e00 	mvnne	r1, #0, 28
   145cc:	5f1d0000 	svcpl	0x001d0000
   145d0:	0100775f 	tsteq	r0, pc, asr r7
   145d4:	32160228 	andscc	r0, r6, #40, 4	; 0x80000002
   145d8:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
   145dc:	000013e0 	andeq	r1, r0, r0, ror #7
   145e0:	00588e1f 	subseq	r8, r8, pc, lsl lr
   145e4:	02280100 	eoreq	r0, r8, #0, 2
   145e8:	0008b116 	andeq	fp, r8, r6, lsl r1
   145ec:	005b8100 	subseq	r8, fp, r0, lsl #2
   145f0:	005b7f00 	subseq	r7, fp, r0, lsl #30
   145f4:	58931f00 	ldmpl	r3, {r8, r9, sl, fp, ip}
   145f8:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   145fc:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   14600:	5b9a0000 	blpl	fe694608 <_estack+0xde68f608>
   14604:	5b940000 	blpl	fe51460c <_estack+0xde50f60c>
   14608:	981f0000 	ldmdals	pc, {}	; <UNPREDICTABLE>
   1460c:	01000058 	qaddeq	r0, r8, r0
   14610:	b1160228 	tstlt	r6, r8, lsr #4
   14614:	cc000008 	stcgt	0, cr0, [r0], {8}
   14618:	c800005b 	stmdagt	r0, {r0, r1, r3, r4, r6}
   1461c:	1f00005b 	svcne	0x0000005b
   14620:	0000589d 	muleq	r0, sp, r8
   14624:	16022801 	strne	r2, [r2], -r1, lsl #16
   14628:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   1462c:	00005bf7 	strdeq	r5, [r0], -r7
   14630:	00005bf5 	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   14634:	0056bd1f 	subseq	fp, r6, pc, lsl sp
   14638:	02280100 	eoreq	r0, r8, #0, 2
   1463c:	0008b116 	andeq	fp, r8, r6, lsl r1
   14640:	005c0e00 	subseq	r0, ip, r0, lsl #28
   14644:	005c0a00 	subseq	r0, ip, r0, lsl #20
   14648:	57ac1f00 	strpl	r1, [ip, r0, lsl #30]!
   1464c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   14650:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   14654:	5c360000 	ldcpl	0, cr0, [r6], #-0
   14658:	5c320000 	ldcpl	0, cr0, [r2], #-0
   1465c:	9f1f0000 	svcls	0x001f0000
   14660:	01000056 	qaddeq	r0, r6, r0
   14664:	b1160228 	tstlt	r6, r8, lsr #4
   14668:	5e000008 	cdppl	0, 0, cr0, cr0, cr8, {0}
   1466c:	5a00005c 	bpl	147e4 <__exidx_end+0xeb24>
   14670:	1f00005c 	svcne	0x0000005c
   14674:	00005799 	muleq	r0, r9, r7
   14678:	16022801 	strne	r2, [r2], -r1, lsl #16
   1467c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   14680:	00005c84 	andeq	r5, r0, r4, lsl #25
   14684:	00005c80 	andeq	r5, r0, r0, lsl #25
   14688:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
    return node->data_base.item_array[index];
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
};
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	0008030b 	andeq	r0, r8, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__ccfg+0xe63898>
      30:	0b39053b 	bleq	e41524 <__ccfg+0xe2157c>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nq++;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!button_still_pressed (__button_list [pbutton]))
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
	if (baction == NULL)
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
	(*baction) (pbutton);
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
endthread
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
endthread
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm sender(struct ResponseMessage *message) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0b000f11 	bleq	3d28 <NOROM_RFCRTrim+0x30>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
		packet[1] = message->gid;
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     104:	14000005 	strne	r0, [r0], #-5
		*p = message->tpe;p++;
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
		*p = message->request_number;p++;
     10c:	15150000 	ldrne	r0, [r5, #-0]
		*p = message->sender_id;p++;
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
		*p = message->receiver_id;p++;
     114:	00130113 	andseq	r0, r3, r3, lsl r1
		switch(message->tpe) {
     118:	00051600 	andeq	r1, r5, r0, lsl #12
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
		tcv_endp(packet);
     124:	18000013 	stmdane	r0, {r0, r1, r4}
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
}
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
		finish;
     134:	00001301 	andeq	r1, r0, r1, lsl #6
     138:	03000d19 	movweq	r0, #3353	; 0xd19
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
				strncpy(p, message->record, sizeof(message->record));
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				*p = message->padding;p++;
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
				strncpy(p, message->record, sizeof(message->record));
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
				strncpy(p, message->record, sizeof(message->record));
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     158:	131b0000 	tstne	fp, #0
				strncpy(p, message->record, sizeof(message->record));
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
				break;
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
				*p = message->record_index;p++;
     164:	010b3905 	tsteq	fp, r5, lsl #18
				*p = message->padding;
     168:	1c000013 	stcne	0, cr0, [r0], {19}
				break;
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		node->nnodes[i] = 0;
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	00001349 	andeq	r1, r0, r9, asr #6
bool init_node(struct Node* node){
     198:	0300131f 	movweq	r1, #799	; 0x31f
    node->id  = 0;                  // default id value 0
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
    node->index = 0;                // default entry count 0
     1a0:	01152000 	tsteq	r5, r0
    node->data_base.item_count = 0; // default no items in array
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
	reset_array(node);
     1a8:	34210000 	strtcc	r0, [r1], #-0
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
};
     1b4:	3f13490b 	svccc	0x0013490b
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
uint8_t generate_request_num(void){
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
    return (uint8_t) (rand() % 255);
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
}
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
            node->nnodes[i] = 0; // set to null byte
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
};
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0e030104 	adfeqs	f0, f3, f4
        node->data_base.item_count -= 1;
     1f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
};
     1fc:	0b3b0b3a 	bleq	ec2eec <__ccfg+0xea2f44>
bool delete_all(struct Node *node){
     200:	13010b39 	movwne	r0, #6969	; 0x1b39
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	28270000 	stmdacs	r7!, {}	; <UNPREDICTABLE>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	1c0e0300 	stcne	3, cr0, [lr], {-0}
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	2800000b 	stmdacs	r0, {r0, r1, r3}
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
            node->data_base.item_array[i].timestamp = 0;
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	13490b39 	movtne	r0, #39737	; 0x9b39
    node->data_base.item_count = 0;
     21c:	0a020c3f 	beq	83320 <__ccfg+0x63378>
}
     220:	34290000 	strtcc	r0, [r9], #-0
        return true;
     224:	3a080300 	bcc	200e2c <__ccfg+0x1e0e84>
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	3f13490b 	svccc	0x0013490b
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	000a020c 	andeq	r0, sl, ip, lsl #4
     234:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     238:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	response_message->tpe = RESPONSE;
     240:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	response_message->status = status;
     244:	01120111 	tsteq	r2, r1, lsl r1
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	13010a40 	movwne	r0, #6720	; 0x1a40
	response_message->gid = gid;
     24c:	052b0000 	streq	r0, [fp, #-0]!
	response_message->sender_id = sender_id;
     250:	3a0e0300 	bcc	380e58 <__ccfg+0x360eb0>
	response_message->status = status;
     254:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!padding){
     258:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		response_message->padding = padding;
     25c:	2c000006 	stccs	0, cr0, [r0], {6}
	if (rec != NULL){
     260:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		strncpy(response_message->record, rec, 20);
     268:	01110b39 	tsteq	r1, r9, lsr fp
     26c:	0b2d0000 	bleq	b40274 <__ccfg+0xb202cc>
     270:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
};
     274:	00130101 	andseq	r0, r3, r1, lsl #2
fsm receiver(struct Node* node_db) {
     278:	00342e00 	eorseq	r2, r4, r0, lsl #28
     27c:	0b3a0e03 	bleq	e83a90 <__ccfg+0xe63ae8>
     280:	0b39053b 	bleq	e41774 <__ccfg+0xe217cc>
     284:	0a021349 	beq	84fb0 <__ccfg+0x65008>
     288:	1d2f0000 	stcne	0, cr0, [pc, #-0]	; 290 <receiver+0x18>
     28c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     290:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     294:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		DEBUG_PRINT("\r\nreceiving 0");
     298:	3000000b 	andcc	r0, r0, fp
     29c:	13310005 	teqne	r1, #5
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	00000602 	andeq	r0, r0, r2, lsl #12
     2a4:	55010b31 	strpl	r0, [r1, #-2865]	; 0xfffff4cf
     2a8:	00130106 	andseq	r0, r3, r6, lsl #2
		DEBUG_PRINT("\r\nreceiving 1");
     2ac:	00343200 	eorseq	r3, r4, r0, lsl #4
     2b0:	0b3a0803 	bleq	e822c4 <__ccfg+0xe6231c>
		DEBUG_PRINT("\r\nreceiving 2");
     2b4:	0b39053b 	bleq	e417a8 <__ccfg+0xe21800>
     2b8:	06021349 	streq	r1, [r2], -r9, asr #6
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2bc:	1d330000 	ldcne	0, cr0, [r3, #-0]
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c0:	11133101 	tstne	r3, r1, lsl #2
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2c4:	58011201 	stmdapl	r1, {r0, r9, ip}
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		DEBUG_PRINT("\r\nreceiving 3");
     2cc:	3400000b 	strcc	r0, [r0], #-11
		switch (response_message_5->tpe){
     2d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     2d8:	13490b39 	movtne	r0, #39737	; 0x9b39
     2dc:	00000602 	andeq	r0, r0, r2, lsl #12
     2e0:	11010b35 	tstne	r1, r5, lsr fp
     2e4:	00011201 	andeq	r1, r1, r1, lsl #4
     2e8:	012e3600 			; <UNDEFINED> instruction: 0x012e3600
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2ec:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2f0:	0b3b0b3a 	bleq	ec2fe0 <__ccfg+0xea3038>
				if (discovery_request_message->gid == node_db->gid){
     2f4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     2f8:	01120111 	tsteq	r2, r1, lsl r1
					DEBUG_PRINT("\r\nSending to sender");
     2fc:	13010a40 	movwne	r0, #6720	; 0x1a40
     300:	05370000 	ldreq	r0, [r7, #-0]!
					DEBUG_PRINT("\r\nSending to sender");
     304:	3a0e0300 	bcc	380f0c <__ccfg+0x360f64>
					response_message_0->tpe = DISCOVERY_RESPONSE;
     308:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					response_message_0->request_number = discovery_request_message->request_number;
     30c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					response_message_0->sender_id = node_db->id;
     310:	38000006 	stmdacc	r0, {r1, r2}
					response_message_0->receiver_id = discovery_request_message->sender_id;
     314:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
					DEBUG_PRINT("\r\nSending to sender");
     318:	0b3b0b3a 	bleq	ec3008 <__ccfg+0xea3060>
					call sender(response_message_0, done_case);
     31c:	13490b39 	movtne	r0, #39737	; 0x9b39
     320:	00000602 	andeq	r0, r0, r2, lsl #12
     324:	55010b39 	strpl	r0, [r1, #-2873]	; 0xfffff4c7
     328:	3a000006 	bcc	348 <receiver+0xd0>
     32c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     330:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     334:	13490b39 	movtne	r0, #39737	; 0x9b39
     338:	1d3b0000 	ldcne	0, cr0, [fp, #-0]
     33c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     340:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     344:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     348:	0013010b 	andseq	r0, r3, fp, lsl #2
     34c:	00053c00 	andeq	r3, r5, r0, lsl #24
     350:	00001331 	andeq	r1, r0, r1, lsr r3
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     354:	3100343d 	tstcc	r0, sp, lsr r4
					node_db->index+=1;
     358:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     35c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
		DEBUG_PRINT("\r\nIn done_case");
     360:	0b3b0b3a 	bleq	ec3050 <__ccfg+0xea30a8>
		tcv_endp(incoming_packet);
     364:	01110b39 	tsteq	r1, r9, lsr fp
     368:	343f0000 	ldrtcc	r0, [pc], #-0	; 370 <receiver+0xf8>
		DEBUG_PRINT("\r\nIn done_case");
     36c:	3a0e0300 	bcc	380f74 <__ccfg+0x360fcc>
     370:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		proceed receiving;
     374:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		ser_out(response_1_create, "\r\nData Saved");
     378:	4000000a 	andmi	r0, r0, sl
     37c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		proceed receiving;
     380:	0b3b0b3a 	bleq	ec3070 <__ccfg+0xea30c8>
     384:	13490b39 	movtne	r0, #39737	; 0x9b39
		ser_out(response_1_delete, "\r\nRecord Deleted");
     388:	00000b1c 	andeq	r0, r0, ip, lsl fp
     38c:	03003441 	movweq	r3, #1089	; 0x441
		proceed receiving;
     390:	3b0b3a08 	blcc	2cebb8 <__ccfg+0x2aec10>
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     394:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     398:	00060213 	andeq	r0, r6, r3, lsl r2
     39c:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
     3a0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     3a4:	0b3b0b3a 	bleq	ec3094 <__ccfg+0xea30ec>
		proceed receiving;
     3a8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     3ac:	01111349 	tsteq	r1, r9, asr #6
     3b0:	0a400112 	beq	1000800 <__ccfg+0xfe0858>
     3b4:	00001301 	andeq	r1, r0, r1, lsl #6
     3b8:	03000543 	movweq	r0, #1347	; 0x543
		proceed receiving;
     3bc:	3b0b3a08 	blcc	2cebe4 <__ccfg+0x2aec3c>
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     3c4:	00060213 	andeq	r0, r6, r3, lsl r2
     3c8:	00054400 	andeq	r4, r5, r0, lsl #8
     3cc:	0b3a0e03 	bleq	e83be0 <__ccfg+0xe63c38>
		proceed receiving;
     3d0:	0b390b3b 	bleq	e430c4 <__ccfg+0xe2311c>
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3d4:	0a021349 	beq	85100 <__ccfg+0x65158>
     3d8:	05450000 	strbeq	r0, [r5, #-0]
     3dc:	3a080300 	bcc	200fe4 <__ccfg+0x1e103c>
     3e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		proceed receiving;
     3e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3e8:	4600000a 	strmi	r0, [r0], -sl
     3ec:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 33c <receiver+0xc4>
		proceed receiving;
     3f0:	0b3a0e03 	bleq	e83c04 <__ccfg+0xe63c5c>
}
     3f4:	0b390b3b 	bleq	e430e8 <__ccfg+0xe23140>
     3f8:	13490c27 	movtne	r0, #39975	; 0x9c27
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3fc:	13010b20 	movwne	r0, #6944	; 0x1b20
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     400:	05470000 	strbeq	r0, [r7, #-0]
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     404:	3a0e0300 	bcc	38100c <__ccfg+0x361064>
     408:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     40c:	0013490b 	andseq	r4, r3, fp, lsl #18
     410:	00344800 	eorseq	r4, r4, r0, lsl #16
					DEBUG_PRINT("\r\nDelete rec first if");
     414:	0b3a0803 	bleq	e82428 <__ccfg+0xe62480>
					break;
     418:	0b390b3b 	bleq	e4310c <__ccfg+0xe23164>
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     41c:	00001349 	andeq	r1, r0, r9, asr #6
     420:	00010b49 	andeq	r0, r1, r9, asr #22
					DEBUG_PRINT("\r\nCreate rec second if");
     424:	002e4a00 	eoreq	r4, lr, r0, lsl #20
    if (node->data_base.item_count == NUMB_OF_ENT){
     428:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     42c:	0b3b0b3a 	bleq	ec311c <__ccfg+0xea3174>
						DEBUG_PRINT("\r\nCreate rec third if");
     430:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     434:	01111349 	tsteq	r1, r9, asr #6
					DEBUG_PRINT("\r\nCreate rec out if");
     438:	0a400112 	beq	1000888 <__ccfg+0xfe08e0>
     43c:	054b0000 	strbeq	r0, [fp, #-0]
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     440:	3a080300 	bcc	201048 <__ccfg+0x1e10a0>
     444:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     448:	0013490b 	andseq	r4, r3, fp, lsl #18
     44c:	002e4c00 	eoreq	r4, lr, r0, lsl #24
     450:	0b3a0e03 	bleq	e83c64 <__ccfg+0xe63cbc>
     454:	0b39053b 	bleq	e41948 <__ccfg+0xe219a0>
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     458:	13490c27 	movtne	r0, #39975	; 0x9c27
					call sender(response_message_2, done_case);
     45c:	00000b20 	andeq	r0, r0, r0, lsr #22
						DEBUG_PRINT("\r\nCreate rec third else");
     460:	31012e4d 	tstcc	r1, sp, asr #28
     464:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     468:	010a4001 	tsteq	sl, r1
     46c:	4e000013 	mcrmi	0, 0, r0, cr0, cr3, {0}
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     470:	13310005 	teqne	r1, #5
				DEBUG_PRINT("\r\nDelete rec");/*
     474:	00000a02 	andeq	r0, r0, r2, lsl #20
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     478:	31012e4f 	tstcc	r1, pc, asr #28
     47c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     480:	000a4001 	andeq	r4, sl, r1
     484:	11010000 	mrsne	r0, (UNDEF: 1)
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     488:	130e2501 	movwne	r2, #58625	; 0xe501
     48c:	1b0e030b 	blne	3810c0 <__ccfg+0x361118>
     490:	1106550e 	tstne	r6, lr, lsl #10
     494:	00061001 	andeq	r1, r6, r1
					DEBUG_PRINT("\r\nDelete rec first if");
     498:	00240200 	eoreq	r0, r4, r0, lsl #4
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     49c:	0b3e0b0b 	bleq	f830d0 <__ccfg+0xf63128>
     4a0:	00000e03 	andeq	r0, r0, r3, lsl #28
					DEBUG_PRINT("\r\nDelete rec second if");
     4a4:	03001603 	movweq	r1, #1539	; 0x603
					if (delete_record(node_db, delete_record_message->record_index)){
     4a8:	3b0b3a0e 	blcc	2cece8 <__ccfg+0x2aed40>
     4ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4b0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
						DEBUG_PRINT("\r\nDelete rec third if");
     4b4:	0b0b0024 	bleq	2c054c <__ccfg+0x2a05a4>
						status = (uint8_t) SUCCESS;
     4b8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
					DEBUG_PRINT("\r\nDelete assemble le response");
     4bc:	26050000 	strcs	r0, [r5], -r0
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4c0:	00134900 	andseq	r4, r3, r0, lsl #18
     4c4:	00350600 	eorseq	r0, r5, r0, lsl #12
     4c8:	00001349 	andeq	r1, r0, r9, asr #6
     4cc:	0b000f07 	bleq	40f0 <NOROM_SetupGetTrimForAnabypassValue1+0x4>
     4d0:	0013490b 	andseq	r4, r3, fp, lsl #18
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4d4:	01130800 	tsteq	r3, r0, lsl #16
     4d8:	0b3a0b0b 	bleq	e8310c <__ccfg+0xe63164>
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4dc:	0b390b3b 	bleq	e431d0 <__ccfg+0xe23228>
     4e0:	00001301 	andeq	r1, r0, r1, lsl #6
     4e4:	03000d09 	movweq	r0, #3337	; 0xd09
     4e8:	3b0b3a0e 	blcc	2ced28 <__ccfg+0x2aed80>
     4ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4f0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     4f4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     4f8:	0a00000b 	beq	52c <receiver+0x2b4>
     4fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     500:	0b3b0b3a 	bleq	ec31f0 <__ccfg+0xea3248>
     504:	13490b39 	movtne	r0, #39737	; 0x9b39
     508:	00000b38 	andeq	r0, r0, r8, lsr fp
     50c:	0300340b 	movweq	r3, #1035	; 0x40b
     510:	3b0b3a0e 	blcc	2ced50 <__ccfg+0x2aeda8>
     514:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     518:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     51c:	0c00000c 	stceq	0, cr0, [r0], {12}
     520:	13490101 	movtne	r0, #37121	; 0x9101
     524:	00001301 	andeq	r1, r0, r1, lsl #6
     528:	0000210d 	andeq	r2, r0, sp, lsl #2
     52c:	00160e00 	andseq	r0, r6, r0, lsl #28
     530:	0b3a0e03 	bleq	e83d44 <__ccfg+0xe63d9c>
     534:	0b39053b 	bleq	e41a28 <__ccfg+0xe21a80>
     538:	00001349 	andeq	r1, r0, r9, asr #6
     53c:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
     540:	0013010c 	andseq	r0, r3, ip, lsl #2
     544:	00051000 	andeq	r1, r5, r0
     548:	00001349 	andeq	r1, r0, r9, asr #6
     54c:	03003411 	movweq	r3, #1041	; 0x411
     550:	3b0b3a0e 	blcc	2ced90 <__ccfg+0x2aede8>
     554:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     558:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     55c:	1200000c 	andne	r0, r0, #12
     560:	0b0b0113 	bleq	2c09b4 <__ccfg+0x2a0a0c>
     564:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     568:	13010b39 	movwne	r0, #6969	; 0x1b39
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     56c:	0d130000 	ldceq	0, cr0, [r3, #-0]
     570:	3a0e0300 	bcc	381178 <__ccfg+0x3611d0>
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     574:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				DEBUG_PRINT("\r\nretrieve rec");
     578:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     57c:	1400000b 	strne	r0, [r0], #-11
     580:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     584:	0b3a0b0b 	bleq	e831b8 <__ccfg+0xe63210>
     588:	0b39053b 	bleq	e41a7c <__ccfg+0xe21ad4>
     58c:	00001301 	andeq	r1, r0, r1, lsl #6
     590:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     594:	000b2f13 	andeq	r2, fp, r3, lsl pc
     598:	00341600 	eorseq	r1, r4, r0, lsl #12
     59c:	0b3a0e03 	bleq	e83db0 <__ccfg+0xe63e08>
    return node->data_base.item_array[index];
     5a0:	0b390b3b 	bleq	e43294 <__ccfg+0xe232ec>
     5a4:	00001349 	andeq	r1, r0, r9, asr #6
     5a8:	03003417 	movweq	r3, #1047	; 0x417
     5ac:	3b0b3a0e 	blcc	2cedec <__ccfg+0x2aee44>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    return node->data_base.item_array[index];
     5b4:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b8:	1800000a 	stmdane	r0, {r1, r3}
     5bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     5c4:	13490b39 	movtne	r0, #39737	; 0x9b39
     5c8:	00000a02 	andeq	r0, r0, r2, lsl #20
     5cc:	47003419 	smladmi	r0, r9, r4, r3
     5d0:	3b0b3a13 	blcc	2cee24 <__ccfg+0x2aee7c>
     5d4:	020b3905 	andeq	r3, fp, #81920	; 0x14000
     5d8:	1a00000a 	bne	608 <receiver+0x390>
     5dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 52c <receiver+0x2b4>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5e0:	0b3a0e03 	bleq	e83df4 <__ccfg+0xe63e4c>
     5e4:	0b39053b 	bleq	e41ad8 <__ccfg+0xe21b30>
				DEBUG_PRINT("\r\nResponse");
     5e8:	13490c27 	movtne	r0, #39975	; 0x9c27
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5ec:	01120111 	tsteq	r2, r1, lsl r1
     5f0:	13010a40 	movwne	r0, #6720	; 0x1a40
     5f4:	0b1b0000 	bleq	6c05fc <__ccfg+0x6a0654>
     5f8:	01065501 	tsteq	r6, r1, lsl #10
     5fc:	1c000013 	stcne	0, cr0, [r0], {19}
     600:	08030034 	stmdaeq	r3, {r2, r4, r5}
				if(!response_flag){
     604:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					response_flag=1;
     608:	13490b39 	movtne	r0, #39737	; 0x9b39
					trigger(&response_flag);
     60c:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
				switch(response_message_5->status){
     610:	11133100 	tstne	r3, r0, lsl #2
     614:	58011201 	stmdapl	r1, {r0, r9, ip}
     618:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     61c:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
     620:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 570 <receiver+0x2f8>
						if (response_checker[0] == response_message_5->request_number){
     624:	0b3a0e03 	bleq	e83e38 <__ccfg+0xe63e90>
     628:	0b39053b 	bleq	e41b1c <__ccfg+0xe21b74>
     62c:	01120111 	tsteq	r2, r1, lsl r1
							switch(response_checker[1]){
     630:	13010a40 	movwne	r0, #6720	; 0x1a40
     634:	0a1f0000 	beq	7c063c <__ccfg+0x7a0694>
     638:	3a0e0300 	bcc	381240 <__ccfg+0x361298>
     63c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
									proceed response_1_create;
     640:	2000000b 	andcs	r0, r0, fp
						proceed response_2;
     644:	1331011d 	teqne	r1, #1073741831	; 0x40000007
									proceed response_1_delete;
     648:	06550152 			; <UNDEFINED> instruction: 0x06550152
									proceed response_1_retrieve;
     64c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
						proceed response_2;
     650:	13010b57 	movwne	r0, #6999	; 0x1b57
						proceed response_3;
     654:	05210000 	streq	r0, [r1, #-0]!
						proceed response_4;
     658:	00133100 	andseq	r3, r3, r0, lsl #2
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     65c:	011d2200 	tsteq	sp, r0, lsl #4
     660:	01521331 	cmpeq	r2, r1, lsr r3
				break;
     664:	0b580655 	bleq	1601fc0 <__ccfg+0x15e2018>
}
     668:	0b570b59 	bleq	15c33d4 <__ccfg+0x15a342c>
     66c:	00001301 	andeq	r1, r0, r1, lsl #6
     670:	55010b23 	strpl	r0, [r1, #-2851]	; 0xfffff4dd
     674:	24000006 	strcs	r0, [r0], #-6
     678:	1331000a 	teqne	r1, #10
     67c:	00000111 	andeq	r0, r0, r1, lsl r1
fsm root {
     680:	31001d25 	tstcc	r0, r5, lsr #26
     684:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     688:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     68c:	000b5705 	andeq	r5, fp, r5, lsl #14
     690:	011d2600 	tsteq	sp, r0, lsl #12
     694:	01111331 	tsteq	r1, r1, lsr r3
     698:	0b580112 	bleq	1600ae8 <__ccfg+0x15e0b40>
     69c:	0b570559 	bleq	15c1c08 <__ccfg+0x15a1c60>
     6a0:	00001301 	andeq	r1, r0, r1, lsl #6
     6a4:	31011d27 	tstcc	r1, r7, lsr #26
     6a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6ac:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     6b0:	000b5705 	andeq	r5, fp, r5, lsl #14
     6b4:	001d2800 	andseq	r2, sp, r0, lsl #16
     6b8:	01111331 	tsteq	r1, r1, lsr r3
     6bc:	0b580112 	bleq	1600b0c <__ccfg+0x15e0b64>
     6c0:	0b570b59 	bleq	15c342c <__ccfg+0x15a3484>
     6c4:	34290000 	strtcc	r0, [r9], #-0
     6c8:	3a080300 	bcc	2012d0 <__ccfg+0x1e1328>
     6cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     6d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     6d4:	2a000006 	bcs	6f4 <root+0x74>
     6d8:	0e03012e 	adfeqsp	f0, f3, #0.5
		init_node(node_db);
     6dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		phys_cc1350(0, MAX_PKT_LEN);
     6e0:	0b200b39 	bleq	8033cc <__ccfg+0x7e3424>
     6e4:	00001301 	andeq	r1, r0, r1, lsl #6
		tcv_plug (0, &plug_null);
     6e8:	03000a2b 	movweq	r0, #2603	; 0xa2b
     6ec:	3b0b3a0e 	blcc	2cef2c <__ccfg+0x2aef84>
		sfd = tcv_open (WNONE, 0, 0);
     6f0:	000b3905 	andeq	r3, fp, r5, lsl #18
     6f4:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     6f8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     700:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			diag("Cannot open tcv interface");
     704:	01120111 	tsteq	r2, r1, lsl r1
     708:	13010a40 	movwne	r0, #6720	; 0x1a40
			halt();
     70c:	052d0000 	streq	r0, [sp, #-0]!
		tcv_control(sfd, PHYSOPT_ON, NULL);
     710:	3a0e0300 	bcc	381318 <__ccfg+0x361370>
     714:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		runfsm receiver(node_db);
     718:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     71c:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     720:	0111010b 	tsteq	r1, fp, lsl #2
     724:	13010112 	movwne	r0, #4370	; 0x1112
     728:	342f0000 	strtcc	r0, [pc], #-0	; 730 <root+0xb0>
     72c:	00133100 	andseq	r3, r3, r0, lsl #2
     730:	010b3000 	mrseq	r3, (UNDEF: 11)
     734:	06551331 			; <UNDEFINED> instruction: 0x06551331
		ser_inf(get_choice, "%c", &CHOICE);
     738:	34310000 	ldrtcc	r0, [r1], #-0
     73c:	02133100 	andseq	r3, r3, #0, 2
     740:	32000006 	andcc	r0, r0, #6
		switch(CHOICE) {
     744:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     748:	06550152 			; <UNDEFINED> instruction: 0x06550152
     74c:	0b590b58 	bleq	16434b4 <__ccfg+0x162350c>
     750:	00000b57 	andeq	r0, r0, r7, asr fp
     754:	31011d33 	tstcc	r1, r3, lsr sp
     758:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     75c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     760:	000b5705 	andeq	r5, fp, r5, lsl #14
     764:	00053400 	andeq	r3, r5, r0, lsl #8
     768:	0b3a0803 	bleq	e8277c <__ccfg+0xe627d4>
     76c:	0b39053b 	bleq	e41c60 <__ccfg+0xe21cb8>
     770:	0a021349 	beq	8549c <__ccfg+0x654f4>
				proceed menu;
     774:	05350000 	ldreq	r0, [r5, #-0]!
     778:	02133100 	andseq	r3, r3, #0, 2
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     77c:	36000006 	strcc	r0, [r0], -r6
     780:	08030034 	stmdaeq	r3, {r2, r4, r5}
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     784:	0b3b0b3a 	bleq	ec3474 <__ccfg+0xea34cc>
     788:	13490b39 	movtne	r0, #39737	; 0x9b39
     78c:	00000602 	andeq	r0, r0, r2, lsl #12
		DEBUG_PRINT("setting node group ID");
     790:	11010b37 	tstne	r1, r7, lsr fp
     794:	00011201 	andeq	r1, r1, r1, lsl #4
    node->gid = gid; 
     798:	002e3800 	eoreq	r3, lr, r0, lsl #16
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     79c:	0b3a0e03 	bleq	e83fb0 <__ccfg+0xe64008>
    node->gid = gid; 
     7a0:	0b39053b 	bleq	e41c94 <__ccfg+0xe21cec>
		proceed menu;
     7a4:	00000b20 	andeq	r0, r0, r0, lsr #22
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     7a8:	03012e39 	movweq	r2, #7737	; 0x1e39
     7ac:	3b0b3a0e 	blcc	2cefec <__ccfg+0x2af044>
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     7b0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     7b4:	1201110c 	andne	r1, r1, #12, 2
     7b8:	010a4001 	tsteq	sl, r1
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7bc:	3a000013 	bcc	810 <root+0x190>
     7c0:	0e03012e 	adfeqsp	f0, f3, #0.5
		if((node_db->id < 1) || (node_db->id > 25)){
     7c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7c8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     7cc:	01111349 	tsteq	r1, r9, asr #6
			strncpy(reason, "Out of Range", 50);
     7d0:	0a400112 	beq	1000c20 <__ccfg+0xfe0c78>
     7d4:	00001301 	andeq	r1, r0, r1, lsl #6
			proceed invalid_node_id;
     7d8:	0300053b 	movweq	r0, #1339	; 0x53b
     7dc:	3b0b3a08 	blcc	2cf004 <__ccfg+0x2af05c>
				strncpy(reason, "ID is already in use", 50);
     7e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		for(int i = 0; i < node_db->index; i++){
     7e4:	00060213 	andeq	r0, r6, r3, lsl r2
     7e8:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     7ec:	0b3a0e03 	bleq	e84000 <__ccfg+0xe64058>
		proceed menu;
     7f0:	0b39053b 	bleq	e41ce4 <__ccfg+0xe21d3c>
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7f4:	01120111 	tsteq	r2, r1, lsl r1
     7f8:	13010a40 	movwne	r0, #6720	; 0x1a40
     7fc:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     800:	030c3f01 	movweq	r3, #52993	; 0xcf01
		proceed get_new_node_id;
     804:	3b0b3a0e 	blcc	2cf044 <__ccfg+0x2af09c>
     808:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (!clear_node_neighbour_array(node_db)){
     80c:	2013490c 	andscs	r4, r3, ip, lsl #18
     810:	0013010b 	andseq	r0, r3, fp, lsl #2
			strncpy(reason, "Error Clearing Node Array", 50);
     814:	00053e00 	andeq	r3, r5, r0, lsl #28
     818:	0b3a0803 	bleq	e8282c <__ccfg+0xe62884>
     81c:	0b39053b 	bleq	e41d10 <__ccfg+0xe21d68>
			proceed error;
     820:	00001349 	andeq	r1, r0, r9, asr #6
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     824:	03000a3f 	movweq	r0, #2623	; 0xa3f
     828:	3b0b3a08 	blcc	2cf050 <__ccfg+0x2af0a8>
		request_packet->gid = node_db->gid;
     82c:	000b3905 	andeq	r3, fp, r5, lsl #18
     830:	00344000 	eorseq	r4, r4, r0
		request_packet->tpe = DISCOVERY_REQUEST;
     834:	0b3a0e03 	bleq	e84048 <__ccfg+0xe640a0>
		request_packet->request_number = generate_request_num();
     838:	0b39053b 	bleq	e41d2c <__ccfg+0xe21d84>
     83c:	06021349 	streq	r1, [r2], -r9, asr #6
		call sender(request_packet, wait_discovery);
     840:	0a410000 	beq	1040848 <__ccfg+0x10208a0>
     844:	3a080300 	bcc	20144c <__ccfg+0x1e14a4>
		request_packet->receiver_id=0;
     848:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		call sender(request_packet, wait_discovery);
     84c:	0001110b 	andeq	r1, r1, fp, lsl #2
     850:	011d4200 	tsteq	sp, r0, lsl #4
     854:	01111331 	tsteq	r1, r1, lsr r3
			release;
     858:	0b580112 	bleq	1600ca8 <__ccfg+0x15e0d00>
				proceed get_new_node_id;
     85c:	0b570b59 	bleq	15c35c8 <__ccfg+0x15a3620>
				proceed clear_neighbour_array;
     860:	00001301 	andeq	r1, r0, r1, lsl #6
				proceed create_proto_start;
     864:	31011d43 	tstcc	r1, r3, asr #26
				proceed start_delete_proto;
     868:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				proceed start_retrieve_proto;
     86c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
				proceed display_db;
     870:	000b570b 	andeq	r5, fp, fp, lsl #14
				proceed del_local;
     874:	012e4400 			; <UNDEFINED> instruction: 0x012e4400
			if(node_db->id == node_db->nnodes[i]){
     878:	0b3a0e03 	bleq	e8408c <__ccfg+0xe640e4>
     87c:	0b39053b 	bleq	e41d70 <__ccfg+0xe21dc8>
     880:	13490c27 	movtne	r0, #39975	; 0x9c27
				strncpy(reason, "ID is already in use", 50);
     884:	13010b20 	movwne	r0, #6944	; 0x1b20
     888:	2e450000 	cdpcs	0, 4, cr0, cr5, cr0, {0}
				proceed invalid_node_id;
     88c:	3a0e0300 	bcc	381494 <__ccfg+0x3614ec>
     890:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		for(int i = 0; i < node_db->index; i++){
     894:	2013490b 	andscs	r4, r3, fp, lsl #18
		if (discovery_wait_flag == 0){
     898:	4600000b 	strmi	r0, [r0], -fp
			discovery_wait_flag=1;
     89c:	0e03012e 	adfeqsp	f0, f3, #0.5
     8a0:	0b3b0b3a 	bleq	ec3590 <__ccfg+0xea35e8>
			delay(3000, find_proto_start);
     8a4:	0b200b39 	bleq	803590 <__ccfg+0x7e35e8>
     8a8:	00001301 	andeq	r1, r0, r1, lsl #6
		if (discovery_wait_flag == 1){
     8ac:	03003447 	movweq	r3, #1095	; 0x447
			discovery_wait_flag=0;
     8b0:	3b0b3a08 	blcc	2cf0d8 <__ccfg+0x2af130>
     8b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			delay(3000, display_neighbour_nodes);
     8b8:	48000013 	stmdami	r0, {r0, r1, r4}
     8bc:	0000010b 	andeq	r0, r0, fp, lsl #2
     8c0:	3f012e49 	svccc	0x00012e49
     8c4:	3a0e030c 	bcc	3814fc <__ccfg+0x361554>
     8c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8cc:	110c270b 	tstne	ip, fp, lsl #14
     8d0:	40011201 	andmi	r1, r1, r1, lsl #4
     8d4:	0013010a 	andseq	r0, r3, sl, lsl #2
     8d8:	00054a00 	andeq	r4, r5, r0, lsl #20
     8dc:	0b3a0803 	bleq	e828f0 <__ccfg+0xe62948>
     8e0:	0b390b3b 	bleq	e435d4 <__ccfg+0xe2362c>
     8e4:	06021349 	streq	r1, [r2], -r9, asr #6
     8e8:	344b0000 	strbcc	r0, [fp], #-0
     8ec:	3a0e0300 	bcc	3814f4 <__ccfg+0x36154c>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8f8:	4c00000a 	stcmi	0, cr0, [r0], {10}
     8fc:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     900:	0b3b0b3a 	bleq	ec35f0 <__ccfg+0xea3648>
		if(node_db->index == 0){
     904:	01110b39 	tsteq	r1, r9, lsr fp
     908:	1d4d0000 	stclne	0, cr0, [sp, #-0]
     90c:	52133100 	andspl	r3, r3, #0, 2
			proceed menu;
     910:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
fsm root {
     914:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     918:	4e00000b 	cdpmi	0, 0, cr0, cr0, cr11, {0}
		for (int i=0; i<node_db->index; i++) {
     91c:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 86c <root+0x1ec>
     920:	0b3a0e03 	bleq	e84134 <__ccfg+0xe6418c>
     924:	0b390b3b 	bleq	e43618 <__ccfg+0xe23670>
		proceed menu;
     928:	01110c27 	tsteq	r1, r7, lsr #24
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     92c:	0a400112 	beq	1000d7c <__ccfg+0xfe0dd4>
     930:	054f0000 	strbeq	r0, [pc, #-0]	; 938 <root+0x2b8>
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     934:	3a080300 	bcc	20153c <__ccfg+0x1e1594>
     938:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     93c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     940:	5000000a 	andpl	r0, r0, sl
     944:	0e03012e 	adfeqsp	f0, f3, #0.5
			strncpy(reason, "Error: improper ID", 50);
     948:	0b3b0b3a 	bleq	ec3638 <__ccfg+0xea3690>
     94c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     950:	13010b20 	movwne	r0, #6944	; 0x1b20
			proceed error;
     954:	05510000 	ldrbeq	r0, [r1, #-0]
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     958:	3a080300 	bcc	201560 <__ccfg+0x1e15b8>
     95c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_in(get_record_to_create, user_provided_record, 20);
     960:	0013490b 	andseq	r4, r3, fp, lsl #18
     964:	012e5200 			; <UNDEFINED> instruction: 0x012e5200
     968:	0b3a0e03 	bleq	e8417c <__ccfg+0xe641d4>
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     96c:	0b39053b 	bleq	e41e60 <__ccfg+0xe21eb8>
		create_message->gid = node_db->gid;
     970:	0b200c27 	bleq	803a14 <__ccfg+0x7e3a6c>
     974:	00001301 	andeq	r1, r0, r1, lsl #6
     978:	03000553 	movweq	r0, #1363	; 0x553
		create_message->tpe = CREATE_RECORD;
     97c:	3b0b3a0e 	blcc	2cf1bc <__ccfg+0x2af214>
		create_message->request_number = generate_request_num();
     980:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		create_message->sender_id = node_db->id;
     984:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
     988:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     98c:	0b3b0b3a 	bleq	ec367c <__ccfg+0xea36d4>
		strncpy(create_message->record, user_provided_record, 20);
     990:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		create_message->receiver_id = user_provided_receiver_id;
     994:	00000b20 	andeq	r0, r0, r0, lsr #22
		strncpy(create_message->record, user_provided_record, 20);
     998:	03012e55 	movweq	r2, #7765	; 0x1e55
		response_checker[0] = create_message->request_number;
     99c:	3b0b3a0e 	blcc	2cf1dc <__ccfg+0x2af234>
		call sender(create_message, wait);
     9a0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		response_checker[1] = create_message->tpe;
     9a4:	2013490c 	andscs	r4, r3, ip, lsl #18
     9a8:	0013010b 	andseq	r0, r3, fp, lsl #2
		call sender(create_message, wait);
     9ac:	002e5600 	eoreq	r5, lr, r0, lsl #12
     9b0:	0b3a0e03 	bleq	e841c4 <__ccfg+0xe6421c>
     9b4:	0b39053b 	bleq	e41ea8 <__ccfg+0xe21f00>
     9b8:	0b200c27 	bleq	803a5c <__ccfg+0x7e3ab4>
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     9bc:	2e570000 	cdpcs	0, 5, cr0, cr7, cr0, {0}
     9c0:	3a0e0300 	bcc	3815c8 <__ccfg+0x361620>
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     9c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     9cc:	000b2013 	andeq	r2, fp, r3, lsl r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9d0:	002e5800 	eoreq	r5, lr, r0, lsl #16
     9d4:	0b3a0e03 	bleq	e841e8 <__ccfg+0xe64240>
			strncpy(reason, "Error: improper node ID", 50);
     9d8:	0b39053b 	bleq	e41ecc <__ccfg+0xe21f24>
     9dc:	13490c27 	movtne	r0, #39975	; 0x9c27
			proceed error;
     9e0:	00000b20 	andeq	r0, r0, r0, lsr #22
     9e4:	31012e59 	tstcc	r1, r9, asr lr
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     9ec:	000a4001 	andeq	r4, sl, r1
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9f0:	11010000 	mrsne	r0, (UNDEF: 1)
     9f4:	130e2501 	movwne	r2, #58625	; 0xe501
     9f8:	1b0e030b 	blne	38162c <__ccfg+0x361684>
		if (us_pr_in < 0 || us_pr_in > 40){
     9fc:	1106550e 	tstne	r6, lr, lsl #10
			strncpy(reason, "Error: invalid index", 50);
     a00:	00061001 	andeq	r1, r6, r1
     a04:	00240200 	eoreq	r0, r4, r0, lsl #4
     a08:	0b3e0b0b 	bleq	f8363c <__ccfg+0xf63694>
			proceed error;
     a0c:	00000e03 	andeq	r0, r0, r3, lsl #28
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a10:	03001603 	movweq	r1, #1539	; 0x603
     a14:	3b0b3a0e 	blcc	2cf254 <__ccfg+0x2af2ac>
     a18:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		delete_record->gid = node_db->gid;
     a1c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		delete_record->tpe = DELETE_RECORD;
     a20:	0b0b0024 	bleq	2c0ab8 <__ccfg+0x2a0b10>
		delete_record->request_number = generate_request_num();
     a24:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     a28:	13050000 	movwne	r0, #20480	; 0x5000
		call sender(delete_record, wait);
     a2c:	0b0e0301 	bleq	381638 <__ccfg+0x361690>
		delete_record->sender_id = node_db->id;
     a30:	3b0b3a0b 	blcc	2cf264 <__ccfg+0x2af2bc>
		delete_record->receiver_id = user_provided_receiver_id;
     a34:	0013010b 	andseq	r0, r3, fp, lsl #2
		delete_record->record_index = us_pr_in;
     a38:	000d0600 	andeq	r0, sp, r0, lsl #12
     a3c:	13490e03 	movtne	r0, #40451	; 0x9e03
		response_checker[0] = delete_record->request_number;
     a40:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
		call sender(delete_record, wait);
     a44:	0f070000 	svceq	0x00070000
     a48:	000b0b00 	andeq	r0, fp, r0, lsl #22
     a4c:	00260800 	eoreq	r0, r6, r0, lsl #16
     a50:	00001349 	andeq	r1, r0, r9, asr #6
     a54:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a58:	0a000013 	beq	aac <root+0x42c>
     a5c:	0b0b000f 	bleq	2c0aa0 <__ccfg+0x2a0af8>
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a60:	00001349 	andeq	r1, r0, r9, asr #6
     a64:	0b01130b 	bleq	45698 <__ccfg+0x256f0>
     a68:	3b0b3a0b 	blcc	2cf29c <__ccfg+0x2af2f4>
		if (get_id < 1 || get_id > 25){
     a6c:	010b390b 	tsteq	fp, fp, lsl #18
     a70:	0c000013 	stceq	0, cr0, [r0], {19}
			strncpy(reason, "Error: improper node ID", 50);
     a74:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a78:	0b3b0b3a 	bleq	ec3768 <__ccfg+0xea37c0>
     a7c:	13490b39 	movtne	r0, #39737	; 0x9b39
			proceed error;
     a80:	0b0d0b0b 	bleq	3436b4 <__ccfg+0x32370c>
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a84:	0b380b0c 	bleq	e036bc <__ccfg+0xde3714>
     a88:	0d0d0000 	stceq	0, cr0, [sp, #-0]
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a8c:	3a0e0300 	bcc	381694 <__ccfg+0x3616ec>
     a90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a94:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		if (beg_for_index < 0 || beg_for_index > 40){
     a98:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
     a9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			strncpy(reason, "Error: invalid index", 50);
     aa0:	0b3b0b3a 	bleq	ec3790 <__ccfg+0xea37e8>
     aa4:	13490b39 	movtne	r0, #39737	; 0x9b39
			proceed error;
     aa8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     aac:	010f0000 	mrseq	r0, CPSR
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ab0:	01134901 	tsteq	r3, r1, lsl #18
     ab4:	10000013 	andne	r0, r0, r3, lsl r0
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	00000021 	andeq	r0, r0, r1, lsr #32
     abc:	03001611 	movweq	r1, #1553	; 0x611
     ac0:	3b0b3a0e 	blcc	2cf300 <__ccfg+0x2af358>
		retrieve_record->gid = node_db->gid;
     ac4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		retrieve_record->tpe = RETRIEVE_RECORD;
     ac8:	12000013 	andne	r0, r0, #19
		retrieve_record->request_number = generate_request_num();
     acc:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     ad0:	00001301 	andeq	r1, r0, r1, lsl #6
		retrieve_record->receiver_id = get_id;
     ad4:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ad8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
		retrieve_record->record_index = beg_for_index;
     adc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ae0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ae4:	13490b39 	movtne	r0, #39737	; 0x9b39
		response_checker[0] = retrieve_record->request_number;
     ae8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     aec:	13150000 	tstne	r5, #0
		response_checker[1] = retrieve_record->tpe;
     af0:	3a0b0b01 	bcc	2c36fc <__ccfg+0x2a3754>
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     af4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     af8:	0013010b 	andseq	r0, r3, fp, lsl #2
		call sender(retrieve_record, wait);
     afc:	000d1600 	andeq	r1, sp, r0, lsl #12
     b00:	0b3a0e03 	bleq	e84314 <__ccfg+0xe6436c>
     b04:	0b39053b 	bleq	e41ff8 <__ccfg+0xe22050>
     b08:	0b381349 	bleq	e05834 <__ccfg+0xde588c>
     b0c:	13170000 	tstne	r7, #0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     b10:	0b0e0301 	bleq	38171c <__ccfg+0x361774>
     b14:	3b0b3a0b 	blcc	2cf348 <__ccfg+0x2af3a0>
		if(node_db->data_base.item_count != 0){
     b18:	010b3905 	tsteq	fp, r5, lsl #18
     b1c:	18000013 	stmdane	r0, {r0, r1, r4}
     b20:	13490021 	movtne	r0, #36897	; 0x9021
		ser_out(loop_through_data, "\r\n");
     b24:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b28:	27011519 	smladcs	r1, r9, r5, r1
		proceed menu;
     b2c:	0113490c 	tsteq	r3, ip, lsl #18
		delete_all(node_db);
     b30:	1a000013 	bne	b84 <root+0x504>
     b34:	13470034 	movtne	r0, #28724	; 0x7034
		proceed menu;
     b38:	0b3b0b3a 	bleq	ec3828 <__ccfg+0xea3880>
     b3c:	0a020b39 	beq	83828 <__ccfg+0x63880>
		delay(3000, timeout);
     b40:	341b0000 	ldrcc	r0, [fp], #-0
     b44:	3a0e0300 	bcc	38174c <__ccfg+0x3617a4>
		when(&response_flag, menu);
     b48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b4c:	3f13490b 	svccc	0x0013490b
		release;
     b50:	000a020c 	andeq	r0, sl, ip, lsl #4
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b54:	00341c00 	eorseq	r1, r4, r0, lsl #24
     b58:	0b3a0e03 	bleq	e8436c <__ccfg+0xe643c4>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b5c:	0b390b3b 	bleq	e43850 <__ccfg+0xe238a8>
     b60:	0a021349 	beq	8588c <__ccfg+0x658e4>
     b64:	341d0000 	ldrcc	r0, [sp], #-0
     b68:	3a0e0300 	bcc	381770 <__ccfg+0x3617c8>
		for (int i=0; i<node_db->index; i++) {
     b6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b74:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     b78:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; ac8 <root+0x448>
     b7c:	0b3a0e03 	bleq	e84390 <__ccfg+0xe643e8>
     b80:	0b39053b 	bleq	e42074 <__ccfg+0xe220cc>
     b84:	13490c27 	movtne	r0, #39975	; 0x9c27
     b88:	01120111 	tsteq	r2, r1, lsl r1
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b8c:	00000a40 	andeq	r0, r0, r0, asr #20
     b90:	3f012e1f 	svccc	0x00012e1f
     b94:	3a0e030c 	bcc	3817cc <__ccfg+0x361824>
     b98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b9c:	110c270b 	tstne	ip, fp, lsl #14
     ba0:	40011201 	andmi	r1, r1, r1, lsl #4
		ser_out(timeout, "\r\nFailed to reach the destination");
     ba4:	0013010a 	andseq	r0, r3, sl, lsl #2
     ba8:	00052000 	andeq	r2, r5, r0
		proceed menu;
     bac:	0b3a0e03 	bleq	e843c0 <__ccfg+0xe64418>
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     bb0:	0b39053b 	bleq	e420a4 <__ccfg+0xe220fc>
     bb4:	06021349 	streq	r1, [r2], -r9, asr #6
     bb8:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
		proceed menu;
     bbc:	22000000 	andcs	r0, r0, #0
}
     bc0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     bc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bc8:	13490b39 	movtne	r0, #39737	; 0x9b39
     bcc:	00000602 	andeq	r0, r0, r2, lsl #12
     bd0:	03003423 	movweq	r3, #1059	; 0x423
     bd4:	3b0b3a08 	blcc	2cf3fc <__ccfg+0x2af454>
     bd8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     bdc:	000a0213 	andeq	r0, sl, r3, lsl r2
     be0:	00342400 	eorseq	r2, r4, r0, lsl #8
     be4:	0b3a0803 	bleq	e82bf8 <__ccfg+0xe62c50>
     be8:	0b39053b 	bleq	e420dc <__ccfg+0xe22134>
     bec:	00001349 	andeq	r1, r0, r9, asr #6
     bf0:	03000a25 	movweq	r0, #2597	; 0xa25
     bf4:	3b0b3a0e 	blcc	2cf434 <__ccfg+0x2af48c>
     bf8:	110b3905 	tstne	fp, r5, lsl #18
     bfc:	26000001 	strcs	r0, [r0], -r1
     c00:	0111010b 	tsteq	r1, fp, lsl #2
     c04:	13010112 	movwne	r0, #4370	; 0x1112
     c08:	0b270000 	bleq	9c0c10 <__ccfg+0x9a0c68>
     c0c:	01065501 	tsteq	r6, r1, lsl #10
     c10:	28000013 	stmdacs	r0, {r0, r1, r4}
     c14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c18:	06550152 			; <UNDEFINED> instruction: 0x06550152
     c1c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     c20:	00000b57 	andeq	r0, r0, r7, asr fp
     c24:	31000529 	tstcc	r0, r9, lsr #10
     c28:	2a000013 	bcs	c7c <mdelay+0x10>
     c2c:	0e03012e 	adfeqsp	f0, f3, #0.5
     c30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
static void devinit_uart (int devnum) {
     c34:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	adddevfunc (ioreq_uart_a, devnum);
     c38:	01120111 	tsteq	r2, r1, lsl r1
     c3c:	13010a40 	movwne	r0, #6720	; 0x1a40
void udelay (volatile word n) {
     c40:	052b0000 	streq	r0, [fp, #-0]!
     c44:	3a080300 	bcc	20184c <__ccfg+0x1e18a4>
	while (n) {
     c48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
     c50:	2c000006 	stccs	0, cr0, [r0], {6}
	while (n--);
     c54:	0c3f012e 	ldfeqs	f0, [pc], #-184	; ba4 <root+0x524>
     c58:	0b3a0e03 	bleq	e8446c <__ccfg+0xe644c4>
     c5c:	0b39053b 	bleq	e42150 <__ccfg+0xe221a8>
		n--;
     c60:	13490c27 	movtne	r0, #39975	; 0x9c27
     c64:	01120111 	tsteq	r2, r1, lsl r1
     c68:	13010a40 	movwne	r0, #6720	; 0x1a40
void mdelay (volatile word n) {
     c6c:	342d0000 	strtcc	r0, [sp], #-0
     c70:	3a0e0300 	bcc	381878 <__ccfg+0x3618d0>
	while (n) {
     c74:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
     c7c:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
		udelay (999);
     c80:	0c3f012e 	ldfeqs	f0, [pc], #-184	; bd0 <root+0x550>
     c84:	0b3a0e03 	bleq	e84498 <__ccfg+0xe644f0>
		n--;
     c88:	0b39053b 	bleq	e4217c <__ccfg+0xe221d4>
     c8c:	0b200c27 	bleq	803d30 <__ccfg+0x7e3d88>
     c90:	00001301 	andeq	r1, r0, r1, lsl #6
     c94:	0300052f 	movweq	r0, #1327	; 0x52f
void __pi_ondomain (lword d) {
     c98:	3b0b3a08 	blcc	2cf4c0 <__ccfg+0x2af518>
     c9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		if (__pi_systat.effpdm > 1)
     ca0:	30000013 	andcc	r0, r0, r3, lsl r0
     ca4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; bf4 <root+0x574>
			__pi_systat.effpdm = 1;
     ca8:	0b3a0e03 	bleq	e844bc <__ccfg+0xe64514>
	PRCMPowerDomainOn (d);
     cac:	0b39053b 	bleq	e421a0 <__ccfg+0xe221f8>
     cb0:	01120111 	tsteq	r2, r1, lsl r1
     cb4:	13010a40 	movwne	r0, #6720	; 0x1a40
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     cb8:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
     cbc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     cc0:	3b0b3a08 	blcc	2cf4e8 <__ccfg+0x2af540>
	__pi_systat.ondmns |= d;
     cc4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     cc8:	1113490c 	tstne	r3, ip, lsl #18
}
     ccc:	40011201 	andmi	r1, r1, r1, lsl #4
     cd0:	0013010a 	andseq	r0, r3, sl, lsl #2
void __pi_offdomain (lword d) {
     cd4:	00053200 	andeq	r3, r5, r0, lsl #4
     cd8:	0b3a0803 	bleq	e82cec <__ccfg+0xe62d44>
	PRCMPowerDomainOff (d);
     cdc:	0b39053b 	bleq	e421d0 <__ccfg+0xe22228>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ce0:	0a021349 	beq	85a0c <__ccfg+0x65a64>
     ce4:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
     ce8:	030c3f00 	movweq	r3, #52992	; 0xcf00
	if (d & PRCM_DOMAIN_RFCORE) {
     cec:	3b0b3a0e 	blcc	2cf52c <__ccfg+0x2af584>
     cf0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cf4:	1201110c 	andne	r1, r1, #12, 2
     cf8:	000a4001 	andeq	r4, sl, r1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cfc:	00053400 	andeq	r3, r5, r0, lsl #8
     d00:	0b3a0e03 	bleq	e84514 <__ccfg+0xe6456c>
	__pi_systat.ondmns &= ~d;
     d04:	0b39053b 	bleq	e421f8 <__ccfg+0xe22250>
     d08:	0a021349 	beq	85a34 <__ccfg+0x65a8c>
}
     d0c:	05350000 	ldreq	r0, [r5, #-0]!
     d10:	3a0e0300 	bcc	381918 <__ccfg+0x361970>
void __pi_syserror (word ec, const char *m) {
     d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag ("SYSERR: %x, %s", ec, m);
     d18:	0013490b 	andseq	r4, r3, fp, lsl #18
     d1c:	010b3600 	tsteq	fp, r0, lsl #12
  __ASM volatile ("cpsid i" : : : "memory");
     d20:	00000655 	andeq	r0, r0, r5, asr r6
     d24:	3f012e37 	svccc	0x00012e37
     d28:	3a0e030c 	bcc	381960 <__ccfg+0x3619b8>
     d2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		all_leds_blink;
     d30:	200c270b 	andcs	r2, ip, fp, lsl #14
     d34:	0013010b 	andseq	r0, r3, fp, lsl #2
     d38:	00053800 	andeq	r3, r5, r0, lsl #16
     d3c:	0b3a0803 	bleq	e82d50 <__ccfg+0xe62da8>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d40:	0b390b3b 	bleq	e43a34 <__ccfg+0xe23a8c>
     d44:	00001349 	andeq	r1, r0, r9, asr #6
     d48:	03000539 	movweq	r0, #1337	; 0x539
     d4c:	3b0b3a0e 	blcc	2cf58c <__ccfg+0x2af5e4>
     d50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d54:	3a000013 	bcc	da8 <tci_run_auxiliary_timer>
	while (1) {
     d58:	08030034 	stmdaeq	r3, {r2, r4, r5}
     d5c:	0b3b0b3a 	bleq	ec3a4c <__ccfg+0xea3aa4>
     d60:	13490b39 	movtne	r0, #39737	; 0x9b39
     d64:	0a3b0000 	beq	ec0d6c <__ccfg+0xea0dc4>
void tci_run_delay_timer () {
     d68:	3a080300 	bcc	201970 <__ccfg+0x1e19c8>
	setdel = __pi_mintk - __pi_old;
     d6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d70:	3c00000b 	stccc	0, cr0, [r0], {11}
     d74:	0c3f012e 	ldfeqs	f0, [pc], #-184	; cc4 <__pi_ondomain+0x2c>
     d78:	0b3a0e03 	bleq	e8458c <__ccfg+0xe645e4>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d7c:	0b390b3b 	bleq	e43a70 <__ccfg+0xe23ac8>
     d80:	01110c27 	tsteq	r1, r7, lsr #24
     d84:	0a400112 	beq	10011d4 <__ccfg+0xfe122c>
     d88:	00001301 	andeq	r1, r0, r1, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d8c:	0300053d 	movweq	r0, #1341	; 0x53d
	sti_tim;
     d90:	3b0b3a08 	blcc	2cf5b8 <__ccfg+0x2af610>
}
     d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d98:	00060213 	andeq	r0, r6, r3, lsl r2
     d9c:	00343e00 	eorseq	r3, r4, r0, lsl #28
     da0:	0b3a0803 	bleq	e82db4 <__ccfg+0xe62e0c>
     da4:	0b390b3b 	bleq	e43a98 <__ccfg+0xe23af0>
	cli_aux;
     da8:	06021349 	streq	r1, [r2], -r9, asr #6
     dac:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db0:	030c3f00 	movweq	r3, #52992	; 0xcf00
     db4:	3b0b3a0e 	blcc	2cf5f4 <__ccfg+0x2af64c>
     db8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     dbc:	1201110c 	andne	r1, r1, #12, 2
	sti_aux;
     dc0:	000a4001 	andeq	r4, sl, r1
}
     dc4:	012e4000 			; <UNDEFINED> instruction: 0x012e4000
     dc8:	0b3a0e03 	bleq	e845dc <__ccfg+0xe64634>
     dcc:	0b390b3b 	bleq	e43ac0 <__ccfg+0xe23b18>
void AONRTCIntHandler () {
     dd0:	13490c27 	movtne	r0, #39975	; 0x9c27
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     dd4:	13010b20 	movwne	r0, #6944	; 0x1b20
     dd8:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     ddc:	3a0e0301 	bcc	3819e8 <__ccfg+0x361a40>
		if (__pi_utims [0] == 0)
     de0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     de4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		if (*(__pi_utims [0])) {
     de8:	010b2013 	tsteq	fp, r3, lsl r0
     dec:	42000013 	andmi	r0, r0, #19
			(*(__pi_utims [0]))--;
     df0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
		if (__pi_utims [1] == 0)
     df4:	01120111 	tsteq	r2, r1, lsl r1
		if (*(__pi_utims [1])) {
     df8:	13010a40 	movwne	r0, #6720	; 0x1a40
			aux_timer_inactive = 0;
     dfc:	05430000 	strbeq	r0, [r3, #-0]
			(*(__pi_utims [1]))--;
     e00:	02133100 	andseq	r3, r3, #0, 2
		if (__pi_utims [2] == 0)
     e04:	44000006 	strmi	r0, [r0], #-6
		if (*(__pi_utims [2])) {
     e08:	13310034 	teqne	r1, #52	; 0x34
			(*(__pi_utims [2]))--;
     e0c:	00000602 	andeq	r0, r0, r2, lsl #12
		if (__pi_utims [3] != 0) {
     e10:	31011d45 	tstcc	r1, r5, asr #26
			if (*(__pi_utims [3])) {
     e14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				aux_timer_inactive = 0;
     e18:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
				(*(__pi_utims [3]))--;
     e1c:	000b570b 	andeq	r5, fp, fp, lsl #14
	if (__pi_systat.ledsts) {
     e20:	00344600 	eorseq	r4, r4, r0, lsl #12
     e24:	00001331 	andeq	r1, r0, r1, lsr r3
		if (__pi_systat.ledblc++ == 0) {
     e28:	31011d47 	tstcc	r1, r7, asr #26
     e2c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
			if (__pi_systat.ledblk) {
     e30:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     e34:	000b570b 	andeq	r5, fp, fp, lsl #14
     e38:	000a4800 	andeq	r4, sl, r0, lsl #16
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e3c:	01111331 	tsteq	r1, r1, lsr r3
     e40:	1d490000 	stclne	0, cr0, [r9, #-0]
				if (__pi_systat.ledsts & 0x2)
     e44:	11133101 	tstne	r3, r1, lsl #2
     e48:	58011201 	stmdapl	r1, {r0, r9, ip}
     e4c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
				if (__pi_systat.ledsts & 0x4)
     e50:	4a00000b 	bmi	e84 <AONRTCIntHandler+0xb4>
				__pi_systat.ledblk = 0;
     e54:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     e58:	01120111 	tsteq	r2, r1, lsl r1
			if (__pi_systat.fstblk)
     e5c:	00000a40 	andeq	r0, r0, r0, asr #20
     e60:	01110100 	tsteq	r1, r0, lsl #2
				__pi_systat.ledblc = 200;
     e64:	0b130e25 	bleq	4c4700 <__ccfg+0x4a4758>
	if (events & AON_RTC_EVFLAGS_CH0) {
     e68:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		cli_tim;
     e6c:	01110655 	tsteq	r1, r5, asr r6
		__pi_new += setdel;
     e70:	00000610 	andeq	r0, r0, r0, lsl r6
     e74:	0b002402 	bleq	9e84 <__exidx_end+0x41c4>
		setdel = 0;
     e78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		RISE_N_SHINE;
     e7c:	0300000e 	movweq	r0, #14
		__pi_new += setdel;
     e80:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		RISE_N_SHINE;
     e84:	0b3b0b3a 	bleq	ec3b74 <__ccfg+0xea3bcc>
     e88:	13490b39 	movtne	r0, #39737	; 0x9b39
		aux_timer_inactive = 1;
     e8c:	24040000 	strcs	r0, [r4], #-0
     e90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
				if (__pi_systat.ledsts & 0x1)
     e94:	0008030b 	andeq	r0, r8, fp, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e98:	01130500 	tsteq	r3, r0, lsl #10
     e9c:	0b0b0e03 	bleq	2c46b0 <__ccfg+0x2a4708>
				if (__pi_systat.ledsts & 0x2)
     ea0:	0b3b0b3a 	bleq	ec3b90 <__ccfg+0xea3be8>
     ea4:	00001301 	andeq	r1, r0, r1, lsl #6
     ea8:	03000d06 	movweq	r0, #3334	; 0xd06
				if (__pi_systat.ledsts & 0x8)
     eac:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
				__pi_systat.ledblk = 1;
     eb0:	000c340b 	andeq	r3, ip, fp, lsl #8
     eb4:	000f0700 	andeq	r0, pc, r0, lsl #14
		if (aux_timer_inactive) {
     eb8:	00000b0b 	andeq	r0, r0, fp, lsl #22
			cli_aux;
     ebc:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
     ec0:	09000013 	stmdbeq	r0, {r0, r1, r4}
     ec4:	13490035 	movtne	r0, #36917	; 0x9035
     ec8:	0f0a0000 	svceq	0x000a0000
     ecc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     ed0:	0b000013 	bleq	f24 <tci_update_delay_ticks+0x40>
     ed4:	0b0b0113 	bleq	2c1328 <__ccfg+0x2a1380>
     ed8:	0b3b0b3a 	bleq	ec3bc8 <__ccfg+0xea3c20>
     edc:	13010b39 	movwne	r0, #6969	; 0x1b39
     ee0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
word tci_update_delay_ticks (Boolean force) {
     ee4:	3a0e0300 	bcc	381aec <__ccfg+0x361b44>
	cli_tim;
     ee8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     eec:	0b13490b 	bleq	4d3320 <__ccfg+0x4b3378>
	if (setdel) {
     ef0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ef4:	000b380b 	andeq	r3, fp, fp, lsl #16
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ef8:	000d0d00 	andeq	r0, sp, r0, lsl #26
     efc:	0b3a0e03 	bleq	e84710 <__ccfg+0xe64768>
     f00:	0b390b3b 	bleq	e43bf4 <__ccfg+0xe23c4c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f04:	0b381349 	bleq	e05c30 <__ccfg+0xde5c88>
				AON_RTC_O_CH0CMP)) - gettav ());
     f08:	340e0000 	strcc	r0, [lr], #-0
	return NO;
     f0c:	3a0e0300 	bcc	381b14 <__ccfg+0x361b6c>
			setdel = 0;
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f14:	3f13490b 	svccc	0x0013490b
     f18:	000c3c0c 	andeq	r3, ip, ip, lsl #24
}
     f1c:	01010f00 	tsteq	r1, r0, lsl #30
		sti_tim;
     f20:	13011349 	movwne	r1, #4937	; 0x1349
		return YES;
     f24:	21100000 	tstcs	r0, r0
     f28:	11000000 	mrsne	r0, (UNDEF: 0)
     f2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f34:	13490b39 	movtne	r0, #39737	; 0x9b39
	UARTDisable (UART0_BASE);
     f38:	15120000 	ldrne	r0, [r2, #-0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f3c:	010c2701 	tsteq	ip, r1, lsl #14
	UARTDisable (UART0_BASE);
     f40:	13000013 	movwne	r0, #19
	UARTConfigSetExpClk (UART0_BASE,
     f44:	13490005 	movtne	r0, #36869	; 0x9005
     f48:	34140000 	ldrcc	r0, [r4], #-0
     f4c:	3a0e0300 	bcc	381b54 <__ccfg+0x361bac>
     f50:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f54:	3f13490b 	svccc	0x0013490b
     f58:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     f5c:	01151500 	tsteq	r5, r0, lsl #10
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f60:	13490c27 	movtne	r0, #39975	; 0x9c27
     f64:	00001301 	andeq	r1, r0, r1, lsl #6
     f68:	03011316 	movweq	r1, #4886	; 0x1316
	urates [0] = rate;
     f6c:	3a0b0b0e 	bcc	2c3bac <__ccfg+0x2a3c04>
}
     f70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f74:	0013010b 	andseq	r0, r3, fp, lsl #2
     f78:	01171700 	tsteq	r7, r0, lsl #14
     f7c:	0b3a0b0b 	bleq	e83bb0 <__ccfg+0xe63c08>
     f80:	0b390b3b 	bleq	e43c74 <__ccfg+0xe23ccc>
     f84:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f88:	03000d18 	movweq	r0, #3352	; 0xd18
     f8c:	3b0b3a0e 	blcc	2cf7cc <__ccfg+0x2af824>
     f90:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f94:	19000013 	stmdbne	r0, {r0, r1, r4}
     f98:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f9c:	0b3b0b3a 	bleq	ec3c8c <__ccfg+0xea3ce4>
     fa0:	13490b39 	movtne	r0, #39737	; 0x9b39
	__pi_uart_setrate (urates [0], __pi_uart);
     fa4:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
     fa8:	3a080300 	bcc	201bb0 <__ccfg+0x1e1c08>
     fac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fb0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fb4:	1b00000b 	blne	fe8 <ioreq_uart_a+0x28>
     fb8:	0b0b0113 	bleq	2c140c <__ccfg+0x2a1464>
     fbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	switch (operation) {
     fc0:	13010b39 	movwne	r0, #6969	; 0x1b39
static int ioreq_uart_a (int operation, char *buf, int len) {
     fc4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     fc8:	3a0e0300 	bcc	381bd0 <__ccfg+0x361c28>
     fcc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fd0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fd4:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
				*buf++ = uart_a_read;
     fd8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     fdc:	0b3a0b0b 	bleq	e83c10 <__ccfg+0xe63c68>
			while (len && uart_a_char_available) {
     fe0:	0b39053b 	bleq	e424d4 <__ccfg+0xe2252c>
     fe4:	00001301 	andeq	r1, r0, r1, lsl #6
     fe8:	4900211e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sp}
			if (len != operation) {
     fec:	000b2f13 	andeq	r2, fp, r3, lsl pc
}
     ff0:	00341f00 	eorseq	r1, r4, r0, lsl #30
     ff4:	0b3a0e03 	bleq	e84808 <__ccfg+0xe64860>
			uart_a_disable_int;
     ff8:	0b390b3b 	bleq	e43cec <__ccfg+0xe23d44>
			if (uart_a_char_available) {
     ffc:	0a021349 	beq	85d28 <__ccfg+0x65d80>
				*buf++ = uart_a_read;
    1000:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
			uart_a_disable_int;
    1004:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1008:	3b0b3a0e 	blcc	2cf848 <__ccfg+0x2af8a0>
			if (uart_a_char_available) {
    100c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1010:	1201110c 	andne	r1, r1, #12, 2
				uart_a_enable_int;
    1014:	000a4001 	andeq	r4, sl, r1
    1018:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
				goto Redo_rx;
    101c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    1020:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1024:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			return -2;
    1028:	01111349 	tsteq	r1, r9, asr #6
    102c:	0a400112 	beq	100147c <__ccfg+0xfe14d4>
				uart_a_write (*buf);
    1030:	00001301 	andeq	r1, r0, r1, lsl #6
    1034:	03000522 	movweq	r0, #1314	; 0x522
			while (len && uart_a_room_in_tx) {
    1038:	3b0b3a08 	blcc	2cf860 <__ccfg+0x2af8b8>
    103c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1040:	00060213 	andeq	r0, r6, r3, lsl r2
			if (len != operation) {
    1044:	011d2300 	tsteq	sp, r0, lsl #6
			uart_a_disable_int;
    1048:	01521331 	cmpeq	r2, r1, lsr r3
    104c:	0b580655 	bleq	16029a8 <__ccfg+0x15e2a00>
			if (uart_a_room_in_tx) {
    1050:	0b570559 	bleq	15c25bc <__ccfg+0x15a2614>
    1054:	05240000 	streq	r0, [r4, #-0]!
				uart_a_enable_int;
    1058:	02133100 	andseq	r3, r3, #0, 2
    105c:	25000006 	strcs	r0, [r0, #-6]
				*buf++ = uart_a_read;
    1060:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
			if (uart_a_room_in_tx) {
    1064:	34260000 	strtcc	r0, [r6], #-0
				uart_a_write (*buf);
    1068:	02133100 	andseq	r3, r3, #0, 2
    106c:	27000006 	strcs	r0, [r0, -r6]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1070:	0c3f012e 	ldfeqs	f0, [pc], #-184	; fc0 <ioreq_uart_a>
    1074:	0b3a0e03 	bleq	e84888 <__ccfg+0xe648e0>
			uart_a_enable_int;
    1078:	0b39053b 	bleq	e4256c <__ccfg+0xe225c4>
    107c:	01110c27 	tsteq	r1, r7, lsr #24
    1080:	0a400112 	beq	10014d0 <__ccfg+0xfe1528>
			return 0;
    1084:	00001301 	andeq	r1, r0, r1, lsl #6
			if (len == UART_CNTRL_SETRATE) {
    1088:	03003428 	movweq	r3, #1064	; 0x428
				if (__pi_uart_setrate (*((word*)buf),
    108c:	3b0b3a08 	blcc	2cf8b4 <__ccfg+0x2af90c>
    1090:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1094:	00060213 	andeq	r0, r6, r3, lsl r2
				syserror (EREQPAR, "uar");
    1098:	00342900 	eorseq	r2, r4, r0, lsl #18
			syserror (ENOOPER, "uai");
    109c:	0b3a0803 	bleq	e830b0 <__ccfg+0xe63108>
			if (len == UART_CNTRL_GETRATE) {
    10a0:	0b39053b 	bleq	e42594 <__ccfg+0xe225ec>
				return 1;
    10a4:	00001349 	andeq	r1, r0, r9, asr #6
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    10a8:	0300342a 	movweq	r3, #1066	; 0x42a
			syserror (ENOOPER, "uai");
    10ac:	3b0b3a08 	blcc	2cf8d4 <__ccfg+0x2af92c>
    10b0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    10b4:	000a0213 	andeq	r0, sl, r3, lsl r2
    10b8:	00052b00 	andeq	r2, r5, r0, lsl #22
    10bc:	0b3a0e03 	bleq	e848d0 <__ccfg+0xe64928>
    10c0:	0b39053b 	bleq	e425b4 <__ccfg+0xe2260c>
    10c4:	06021349 	streq	r1, [r2], -r9, asr #6
    10c8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    10cc:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    10d0:	3b0b3a0e 	blcc	2cf910 <__ccfg+0x2af968>
void UART0IntHandler () {
    10d4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10d8:	2013490c 	andscs	r4, r3, ip, lsl #18
    10dc:	0013010b 	andseq	r0, r3, fp, lsl #2
    10e0:	00052d00 	andeq	r2, r5, r0, lsl #26
    10e4:	0b3a0e03 	bleq	e848f8 <__ccfg+0xe64950>
    10e8:	0b39053b 	bleq	e425dc <__ccfg+0xe22634>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10ec:	00001349 	andeq	r1, r0, r9, asr #6
    10f0:	0300052e 	movweq	r0, #1326	; 0x52e
		RISE_N_SHINE;
    10f4:	3b0b3a08 	blcc	2cf91c <__ccfg+0x2af974>
    10f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		i_trigger (devevent (UART_A, READ));
    10fc:	2f000013 	svccs	0x00000013
    1100:	0111010b 	tsteq	r1, fp, lsl #2
    1104:	00000112 	andeq	r0, r0, r2, lsl r1
    1108:	03003430 	movweq	r3, #1072	; 0x430
    110c:	3b0b3a0e 	blcc	2cf94c <__ccfg+0x2af9a4>
    1110:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1114:	000a0213 	andeq	r0, sl, r3, lsl r2
    1118:	000a3100 	andeq	r3, sl, r0, lsl #2
    111c:	0b3a0e03 	bleq	e84930 <__ccfg+0xe64988>
    1120:	0b39053b 	bleq	e42614 <__ccfg+0xe2266c>
    1124:	00000111 	andeq	r0, r0, r1, lsl r1
    1128:	31011d32 	tstcc	r1, r2, lsr sp
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    112c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1130:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1134:	000b5705 	andeq	r5, fp, r5, lsl #14
		i_trigger (devevent (UART_A, WRITE));
    1138:	00053300 	andeq	r3, r5, r0, lsl #6
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    113c:	00001331 	andeq	r1, r0, r1, lsr r3
    1140:	03000534 	movweq	r0, #1332	; 0x534
		RISE_N_SHINE;
    1144:	3b0b3a08 	blcc	2cf96c <__ccfg+0x2af9c4>
    1148:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    114c:	000a0213 	andeq	r0, sl, r3, lsl r2
		i_trigger (devevent (UART_A, WRITE));
    1150:	00183500 	andseq	r3, r8, r0, lsl #10
    1154:	34360000 	ldrtcc	r0, [r6], #-0
    1158:	3a0e0300 	bcc	381d60 <__ccfg+0x361db8>
    115c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1160:	0013490b 	andseq	r4, r3, fp, lsl #18
    1164:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
    1168:	0b3a0803 	bleq	e8317c <__ccfg+0xe631d4>
    116c:	0b39053b 	bleq	e42660 <__ccfg+0xe226b8>
    1170:	13490c27 	movtne	r0, #39975	; 0x9c27
    1174:	01120111 	tsteq	r2, r1, lsl r1
    1178:	13010a40 	movwne	r0, #6720	; 0x1a40
}
    117c:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    1180:	3a080301 	bcc	201d8c <__ccfg+0x1e1de4>
    1184:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1188:	110c270b 	tstne	ip, fp, lsl #14
    118c:	40011201 	andmi	r1, r1, r1, lsl #4
void __buttons_setirq (int val) {
    1190:	0013010a 	andseq	r0, r3, sl, lsl #2
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1194:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
    1198:	0b3a0e03 	bleq	e849ac <__ccfg+0xe64a04>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    119c:	0b390b3b 	bleq	e43e90 <__ccfg+0xe23ee8>
    11a0:	0b200c27 	bleq	804244 <__ccfg+0x7e429c>
    11a4:	00001301 	andeq	r1, r0, r1, lsl #6
		bn = BUTTON_GPIO (__button_list [i]);
    11a8:	0300053a 	movweq	r0, #1338	; 0x53a
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11ac:	3b0b3a08 	blcc	2cf9d4 <__ccfg+0x2afa2c>
    11b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    11b4:	3b000013 	blcc	1208 <__pinlist_setirq+0x34>
    11b8:	0e03012e 	adfeqsp	f0, f3, #0.5
    11bc:	0b3b0b3a 	bleq	ec3eac <__ccfg+0xea3f04>
    11c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
    11c4:	0b201349 	bleq	805ef0 <__ccfg+0x7e5f48>
    11c8:	00001301 	andeq	r1, r0, r1, lsl #6
    11cc:	0300343c 	movweq	r3, #1084	; 0x43c
    11d0:	3b0b3a08 	blcc	2cf9f8 <__ccfg+0x2afa50>
void __pinlist_setirq (int val) {
    11d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for (i = 0; i < N_PINLIST; i++) {
    11d8:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11dc:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11e0:	0b3b0b3a 	bleq	ec3ed0 <__ccfg+0xea3f28>
	for (i = 0; i < N_PINLIST; i++) {
    11e4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11e8:	13010b20 	movwne	r0, #6944	; 0x1b20
    11ec:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11f0:	11133101 	tstne	r3, r1, lsl #2
    11f4:	40011201 	andmi	r1, r1, r1, lsl #4
    11f8:	0013010a 	andseq	r0, r3, sl, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
    11fc:	00053f00 	andeq	r3, r5, r0, lsl #30
}
    1200:	0a021331 	beq	85ecc <__ccfg+0x65f24>
    1204:	1d400000 	stclne	0, cr0, [r0, #-0]
    1208:	11133101 	tstne	r3, r1, lsl #2
    120c:	58011201 	stmdapl	r1, {r0, r9, ip}
void GPIOIntHandler () {
    1210:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
if (buttons_int) {
    1214:	4100000b 	tstmi	r0, fp
    1218:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	buttons_disable ();
    121c:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1220:	0b590b58 	bleq	1643f88 <__ccfg+0x1623fe0>
	i_trigger ((aword)&__button_list);
    1224:	00000b57 	andeq	r0, r0, r7, asr fp
    1228:	31012e42 	tstcc	r1, r2, asr #28
    122c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1230:	000a4001 	andeq	r4, sl, r1
    1234:	00344300 	eorseq	r4, r4, r0, lsl #6
    1238:	00001331 	andeq	r1, r0, r1, lsr r3
    123c:	01110100 	tsteq	r1, r0, lsl #2
    1240:	0b130e25 	bleq	4c4adc <__ccfg+0x4a4b34>
    1244:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1248:	01110655 	tsteq	r1, r5, asr r6
    124c:	00000610 	andeq	r0, r0, r0, lsl r6
	RISE_N_SHINE;
    1250:	0b002402 	bleq	a260 <__exidx_end+0x45a0>
    1254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1258:	0300000e 	movweq	r0, #14
if (pin_sensor_int) {
    125c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1260:	0b3b0b3a 	bleq	ec3f50 <__ccfg+0xea3fa8>
	i_trigger ((aword)(&__input_pins));
    1264:	13490b39 	movtne	r0, #39737	; 0x9b39
    1268:	24040000 	strcs	r0, [r4], #-0
    126c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1270:	0008030b 	andeq	r0, r8, fp, lsl #6
    1274:	000f0500 	andeq	r0, pc, r0, lsl #10
    1278:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    127c:	26060000 	strcs	r0, [r6], -r0
    1280:	00134900 	andseq	r4, r3, r0, lsl #18
    1284:	00150700 	andseq	r0, r5, r0, lsl #14
    1288:	00000c27 	andeq	r0, r0, r7, lsr #24
    128c:	03003408 	movweq	r3, #1032	; 0x408
	__pinsen_disable_and_clear;
    1290:	3b0b3a0e 	blcc	2cfad0 <__ccfg+0x2afb28>
	RISE_N_SHINE;
    1294:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1298:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    129c:	0900000c 	stmdbeq	r0, {r2, r3}
}
    12a0:	13490101 	movtne	r0, #37121	; 0x9101
    12a4:	00001301 	andeq	r1, r0, r1, lsl #6
    12a8:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    12ac:	000b2f13 	andeq	r2, fp, r3, lsl pc
    12b0:	00340b00 	eorseq	r0, r4, r0, lsl #22
void system_init () {
    12b4:	0b3a0e03 	bleq	e84ac8 <__ccfg+0xe64b20>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12b8:	0b390b3b 	bleq	e43fac <__ccfg+0xe24004>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    12bc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 11a0 <__buttons_setirq+0x10>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12c0:	00000a02 	andeq	r0, r0, r2, lsl #20
    12c4:	03002e0c 	movweq	r2, #3596	; 0xe0c
    12c8:	3b0b3a0e 	blcc	2cfb08 <__ccfg+0x2afb60>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    12cc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    12d0:	1201110c 	andne	r1, r1, #12, 2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12d4:	000a4001 	andeq	r4, sl, r1
    12d8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    12dc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12e0:	0b3b0b3a 	bleq	ec3fd0 <__ccfg+0xea4028>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12e4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12e8:	01120111 	tsteq	r2, r1, lsl r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ec:	00000a40 	andeq	r0, r0, r0, asr #20
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f0:	0300340e 	movweq	r3, #1038	; 0x40e
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12f4:	3b0b3a0e 	blcc	2cfb34 <__ccfg+0x2afb8c>
		pin = (port_confs [i] >> 19) & 0x1f;
    12f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12fc:	00060213 	andeq	r0, r6, r3, lsl r2
		pin = (port_confs [i] >> 19) & 0x1f;
    1300:	11010000 	mrsne	r0, (UNDEF: 1)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1304:	130e2501 	movwne	r2, #58625	; 0xe501
    1308:	1b0e030b 	blne	381f3c <__ccfg+0x361f94>
    130c:	0006100e 	andeq	r1, r6, lr
    1310:	00240200 	eoreq	r0, r4, r0, lsl #4
		if (port_confs [i] & 0x80)
    1314:	0b3e0b0b 	bleq	f83f48 <__ccfg+0xf63fa0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1318:	00000e03 	andeq	r0, r0, r3, lsl #28
    131c:	03001603 	movweq	r1, #1539	; 0x603
		if (port_confs [i] & 0x40)
    1320:	3b0b3a0e 	blcc	2cfb60 <__ccfg+0x2afbb8>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1324:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1328:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    132c:	0b0b0024 	bleq	2c13c4 <__ccfg+0x2a141c>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1330:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1334:	13050000 	movwne	r0, #20480	; 0x5000
	all_leds_blink;
    1338:	3a0b0b01 	bcc	2c3f44 <__ccfg+0x2a3f9c>
    133c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1340:	0013010b 	andseq	r0, r3, fp, lsl #2
    1344:	000d0600 	andeq	r0, sp, r0, lsl #12
    1348:	0b3a0e03 	bleq	e84b5c <__ccfg+0xe64bb4>
    134c:	0b390b3b 	bleq	e44040 <__ccfg+0xe24098>
    1350:	0b381349 	bleq	e0607c <__ccfg+0xde60d4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1354:	26070000 	strcs	r0, [r7], -r0
    1358:	00134900 	andseq	r4, r3, r0, lsl #18
    135c:	00340800 	eorseq	r0, r4, r0, lsl #16
    1360:	0b3a0e03 	bleq	e84b74 <__ccfg+0xe64bcc>
    1364:	0b390b3b 	bleq	e44058 <__ccfg+0xe240b0>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1368:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 124c <GPIOIntHandler+0x3c>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    136c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1370:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
	IntEnable (INT_AON_RTC_COMB);
    1374:	0a000013 	beq	13c8 <system_init+0x114>
    1378:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    137c:	0b3b0b3a 	bleq	ec406c <__ccfg+0xea40c4>
	__pi_malloc_init ();
    1380:	13490b39 	movtne	r0, #39737	; 0x9b39
	IntEnable (INT_AON_GPIO_EDGE);
    1384:	0b0d0b0b 	bleq	343fb8 <__ccfg+0x324010>
    1388:	0b380b0c 	bleq	e03fc0 <__ccfg+0xde4018>
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    138c:	0f0b0000 	svceq	0x000b0000
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1390:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1394:	0c000013 	stceq	0, cr0, [r0], {19}
    1398:	13490101 	movtne	r0, #37121	; 0x9101
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    139c:	00001301 	andeq	r1, r0, r1, lsl #6
    13a0:	0000210d 	andeq	r2, r0, sp, lsl #2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    13a4:	00160e00 	andseq	r0, r6, r0, lsl #28
    13a8:	0b3a0e03 	bleq	e84bbc <__ccfg+0xe64c14>
    13ac:	0b39053b 	bleq	e428a0 <__ccfg+0xe228f8>
	urates [0] = UART_RATE / 100;
    13b0:	00001349 	andeq	r1, r0, r9, asr #6
    13b4:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
	reinit_uart ();
    13b8:	0013010c 	andseq	r0, r3, ip, lsl #2
	EXTRA_INITIALIZERS;
    13bc:	00051000 	andeq	r1, r5, r0
    13c0:	00001349 	andeq	r1, r0, r9, asr #6
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    13c4:	03003411 	movweq	r3, #1041	; 0x411
    13c8:	3b0b3a0e 	blcc	2cfc08 <__ccfg+0x2afc60>
    13cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    13d0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    13d4:	1200000c 	andne	r0, r0, #12
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13d8:	0b0b0113 	bleq	2c182c <__ccfg+0x2a1884>
    13dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			devinit [i] . init (devinit [i] . param);
    13e0:	13010b39 	movwne	r0, #6969	; 0x1b39
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13e4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    13e8:	3a0e0300 	bcc	381ff0 <__ccfg+0x362048>
    13ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	IntEnable (INT_UART0_COMB);
    13f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    13f4:	1400000b 	strne	r0, [r0], #-11
}
    13f8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	tci_run_auxiliary_timer ();
    13fc:	0b3a0b0b 	bleq	e84030 <__ccfg+0xe64088>
		diag ("");
    1400:	0b39053b 	bleq	e428f4 <__ccfg+0xe2294c>
    1404:	00001301 	andeq	r1, r0, r1, lsl #6
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1408:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    140c:	000b2f13 	andeq	r2, fp, r3, lsl pc
		diag ("Leftover RAM: %d bytes",
    1410:	00341600 	eorseq	r1, r4, r0, lsl #12
    1414:	0b3a1347 	bleq	e86138 <__ccfg+0xe66190>
    1418:	0b39053b 	bleq	e4290c <__ccfg+0xe22964>
    141c:	00000a02 	andeq	r0, r0, r2, lsl #20
    1420:	01110100 	tsteq	r1, r0, lsl #2
    1424:	0b130e25 	bleq	4c4cc0 <__ccfg+0x4a4d18>
    1428:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    142c:	01110655 	tsteq	r1, r5, asr r6
    1430:	00000610 	andeq	r0, r0, r0, lsl r6
    1434:	0b002402 	bleq	a444 <__exidx_end+0x4784>
    1438:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    143c:	0300000e 	movweq	r0, #14
    1440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1444:	0b3b0b3a 	bleq	ec4134 <__ccfg+0xea418c>
    1448:	13490b39 	movtne	r0, #39737	; 0x9b39
    144c:	24040000 	strcs	r0, [r4], #-0
    1450:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1454:	0008030b 	andeq	r0, r8, fp, lsl #6
    1458:	00260500 	eoreq	r0, r6, r0, lsl #10
    145c:	00001349 	andeq	r1, r0, r9, asr #6
    1460:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1464:	07000013 	smladeq	r0, r3, r0, r0
    1468:	0b0b000f 	bleq	2c14ac <__ccfg+0x2a1504>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    146c:	00001349 	andeq	r1, r0, r9, asr #6
    1470:	0b011308 	bleq	46098 <__ccfg+0x260f0>
    1474:	3b0b3a0b 	blcc	2cfca8 <__ccfg+0x2afd00>
    1478:	010b390b 	tsteq	fp, fp, lsl #18
    147c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1480:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1484:	0b3b0b3a 	bleq	ec4174 <__ccfg+0xea41cc>
    1488:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    148c:	0b0d0b0b 	bleq	3440c0 <__ccfg+0x324118>
__attribute__ ((noreturn)) void __pi_release () {
    1490:	0b380b0c 	bleq	e040c8 <__ccfg+0xde4120>
    1494:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    1498:	3a0e0300 	bcc	3820a0 <__ccfg+0x3620f8>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    149c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	check_stack_overflow;
    14a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    14a4:	0b00000b 	bleq	14d8 <__pi_release+0x48>
    14a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	update_n_wake (MAX_WORD, NO);
    14ac:	0b3b0b3a 	bleq	ec419c <__ccfg+0xea41f4>
    14b0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14b4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	for_all_tasks (__pi_curr) {
    14b8:	010c0000 	mrseq	r0, (UNDEF: 12)
    14bc:	01134901 	tsteq	r3, r1, lsl #18
    14c0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
  __ASM volatile ("cpsid i" : : : "memory");
    14c4:	00000021 	andeq	r0, r0, r1, lsr #32
	__SLEEP;
    14c8:	0300160e 	movweq	r1, #1550	; 0x60e
    14cc:	3b0b3a0e 	blcc	2cfd0c <__ccfg+0x2afd64>
    14d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    14d4:	0f000013 	svceq	0x00000013
	system_event_count ++;
    14d8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    14dc:	00001301 	andeq	r1, r0, r1, lsl #6
	switch (__pi_systat.effpdm) {
    14e0:	49000510 	stmdbmi	r0, {r4, r8, sl}
    14e4:	11000013 	tstne	r0, r3, lsl r0
    14e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			__WFI ();
    14f0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14f4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    14f8:	13120000 	tstne	r2, #0
	check_stack_overflow;
    14fc:	3a0b0b01 	bcc	2c4108 <__ccfg+0x2a4160>
    1500:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1504:	0013010b 	andseq	r0, r3, fp, lsl #2
    1508:	000d1300 	andeq	r1, sp, r0, lsl #6
			(__pi_curr->code) (tstate (__pi_curr));
    150c:	0b3a0e03 	bleq	e84d20 <__ccfg+0xe64d78>
			goto Redo;
    1510:	0b39053b 	bleq	e42a04 <__ccfg+0xe22a5c>
	for_all_tasks (__pi_curr) {
    1514:	0b381349 	bleq	e06240 <__ccfg+0xde6298>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1518:	13140000 	tstne	r4, #0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    151c:	0b0e0301 	bleq	382128 <__ccfg+0x362180>
    1520:	3b0b3a0b 	blcc	2cfd54 <__ccfg+0x2afdac>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1524:	010b3905 	tsteq	fp, r5, lsl #18
    1528:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    152c:	13490021 	movtne	r0, #36897	; 0x9021
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1530:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1534:	47003416 	smladmi	r0, r6, r4, r3
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1538:	3b0b3a13 	blcc	2cfd8c <__ccfg+0x2afde4>
    153c:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
			__WFI ();
    1540:	1700000a 	strne	r0, [r0, -sl]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1494 <__pi_release+0x4>
    1548:	0b3a0e03 	bleq	e84d5c <__ccfg+0xe64db4>
}
    154c:	0b390b3b 	bleq	e44240 <__ccfg+0xe24298>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1550:	01110c27 	tsteq	r1, r7, lsr #24
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1554:	0a400112 	beq	10019a4 <__ccfg+0xfe19fc>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1558:	00001301 	andeq	r1, r0, r1, lsl #6
    155c:	03000518 	movweq	r0, #1304	; 0x518
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1560:	3b0b3a08 	blcc	2cfd88 <__ccfg+0x2afde0>
    1564:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1568:	00060213 	andeq	r0, r6, r3, lsl r2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    156c:	00051900 	andeq	r1, r5, r0, lsl #18
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1570:	0b3a0e03 	bleq	e84d84 <__ccfg+0xe64ddc>
    1574:	0b390b3b 	bleq	e44268 <__ccfg+0xe242c0>
    1578:	06021349 	streq	r1, [r2], -r9, asr #6
    157c:	341a0000 	ldrcc	r0, [sl], #-0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1580:	3a080300 	bcc	202188 <__ccfg+0x1e21e0>
    1584:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1588:	0013490b 	andseq	r4, r3, fp, lsl #18
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    158c:	00341b00 	eorseq	r1, r4, r0, lsl #22
    1590:	0b3a0803 	bleq	e835a4 <__ccfg+0xe635fc>
    1594:	0b390b3b 	bleq	e44288 <__ccfg+0xe242e0>
    1598:	06021349 	streq	r1, [r2], -r9, asr #6
    159c:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
			SysCtrlSetRechargeBeforePowerDown
    15a0:	11133100 	tstne	r3, r0, lsl #2
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    15a4:	58011201 	stmdapl	r1, {r0, r9, ip}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15a8:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    15ac:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    15b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
    15b8:	0b590b58 	bleq	1644320 <__ccfg+0x1624378>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    15bc:	00000b57 	andeq	r0, r0, r7, asr fp
    15c0:	3100051e 	tstcc	r0, lr, lsl r5
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15c4:	00060213 	andeq	r0, r6, r3, lsl r2
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15c8:	002e1f00 	eoreq	r1, lr, r0, lsl #30
    15cc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    15d0:	0b3b0b3a 	bleq	ec42c0 <__ccfg+0xea4318>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    15d4:	01110b39 	tsteq	r1, r9, lsr fp
			while (!(AONWUCPowerStatusGet () &
    15d8:	0a400112 	beq	1001a28 <__ccfg+0xfe1a80>
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15dc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    15e0:	3a0e0300 	bcc	3821e8 <__ccfg+0x362240>
    15e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15e8:	200c270b 	andcs	r2, ip, fp, lsl #14
    15ec:	2100000b 	tstcs	r0, fp
    15f0:	0e03012e 	adfeqsp	f0, f3, #0.5
    15f4:	0b3b0b3a 	bleq	ec42e4 <__ccfg+0xea433c>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15f8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    15fc:	0b201349 	bleq	806328 <__ccfg+0x7e6380>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1600:	05220000 	streq	r0, [r2, #-0]!
    1604:	3a0e0300 	bcc	38220c <__ccfg+0x362264>
			SysCtrlAdjustRechargeAfterPowerDown ();
    1608:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			reinit_uart ();
    160c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1610:	11010000 	mrsne	r0, (UNDEF: 1)
    1614:	130e2501 	movwne	r2, #58625	; 0xe501
}
    1618:	1b0e030b 	blne	38224c <__ccfg+0x3622a4>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    161c:	1106550e 	tstne	r6, lr, lsl #10
    1620:	00061001 	andeq	r1, r6, r1
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1624:	00240200 	eoreq	r0, r4, r0, lsl #4
    1628:	0b3e0b0b 	bleq	f8425c <__ccfg+0xf642b4>
    162c:	00000e03 	andeq	r0, r0, r3, lsl #28
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1630:	03001603 	movweq	r1, #1539	; 0x603
    1634:	3b0b3a0e 	blcc	2cfe74 <__ccfg+0x2afecc>
    1638:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    163c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1640:	0b0b0024 	bleq	2c16d8 <__ccfg+0x2a1730>
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1644:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1648:	26050000 	strcs	r0, [r5], -r0
    164c:	00134900 	andseq	r4, r3, r0, lsl #18
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1650:	00350600 	eorseq	r0, r5, r0, lsl #12
    1654:	00001349 	andeq	r1, r0, r9, asr #6
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1658:	0b011307 	bleq	4627c <__ccfg+0x262d4>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    165c:	3b0b3a0b 	blcc	2cfe90 <__ccfg+0x2afee8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1660:	010b390b 	tsteq	fp, fp, lsl #18
    1664:	08000013 	stmdaeq	r0, {r0, r1, r4}
			PRCMPowerDomainOff (
    1668:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    166c:	0b3b0b3a 	bleq	ec435c <__ccfg+0xea43b4>
	__SLEEP;
    1670:	13490b39 	movtne	r0, #39737	; 0x9b39
    1674:	0b0d0b0b 	bleq	3442a8 <__ccfg+0x324300>
  __ASM volatile ("cpsie i" : : : "memory");
    1678:	0b380b0c 	bleq	e042b0 <__ccfg+0xde4308>
	goto Redo;
    167c:	0d090000 	stceq	0, cr0, [r9, #-0]
    1680:	3a0e0300 	bcc	382288 <__ccfg+0x3622e0>
    1684:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1688:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    168c:	0a00000b 	beq	16c0 <__pi_release+0x230>
    1690:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1694:	0b3b0b3a 	bleq	ec4384 <__ccfg+0xea43dc>
    1698:	13490b39 	movtne	r0, #39737	; 0x9b39
    169c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    16a0:	0f0b0000 	svceq	0x000b0000
    16a4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    16a8:	0c000013 	stceq	0, cr0, [r0], {19}
    16ac:	13490101 	movtne	r0, #37121	; 0x9101
    16b0:	00001301 	andeq	r1, r0, r1, lsl #6
    16b4:	0000210d 	andeq	r2, r0, sp, lsl #2
    16b8:	00160e00 	andseq	r0, r6, r0, lsl #28
    16bc:	0b3a0e03 	bleq	e84ed0 <__ccfg+0xe64f28>
    16c0:	0b39053b 	bleq	e42bb4 <__ccfg+0xe22c0c>
    16c4:	00001349 	andeq	r1, r0, r9, asr #6
    16c8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    16cc:	0013010c 	andseq	r0, r3, ip, lsl #2
    16d0:	00051000 	andeq	r1, r5, r0
    16d4:	00001349 	andeq	r1, r0, r9, asr #6
    16d8:	03003411 	movweq	r3, #1041	; 0x411
    16dc:	3b0b3a0e 	blcc	2cff1c <__ccfg+0x2aff74>
    16e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    16e4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	cli_tim;
    16e8:	1200000c 	andne	r0, r0, #12
    16ec:	0b0b0113 	bleq	2c1b40 <__ccfg+0x2a1b98>
    16f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	diag ("PicOS halted");
    16f4:	13010b39 	movwne	r0, #6969	; 0x1b39
	mdelay (500);
    16f8:	0d130000 	ldceq	0, cr0, [r3, #-0]
    16fc:	3a0e0300 	bcc	382304 <__ccfg+0x36235c>
	setpowermode (2);
    1700:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__PCB = NULL;
    1704:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	release;
    1708:	1400000b 	strne	r0, [r0], #-11
    170c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1710:	0b3a0b0b 	bleq	e84344 <__ccfg+0xe6439c>
    1714:	0b39053b 	bleq	e42c08 <__ccfg+0xe22c60>
int main (void) {
    1718:	00001301 	andeq	r1, r0, r1, lsl #6
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    171c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1720:	000b2f13 	andeq	r2, fp, r3, lsl pc
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1724:	00341600 	eorseq	r1, r4, r0, lsl #12
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1728:	0b3a0e03 	bleq	e84f3c <__ccfg+0xe64f94>
	system_init ();
    172c:	0b390b3b 	bleq	e44420 <__ccfg+0xe24478>
	tcv_init ();
    1730:	0a021349 	beq	8645c <__ccfg+0x664b4>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1734:	34170000 	ldrcc	r0, [r7], #-0
    1738:	3a134700 	bcc	4d3340 <__ccfg+0x4b3398>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    173c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1740:	000a020b 	andeq	r0, sl, fp, lsl #4
    1744:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1748:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    174c:	0b3b0b3a 	bleq	ec443c <__ccfg+0xea4494>
	delay (16, 0);
    1750:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1754:	01120111 	tsteq	r2, r1, lsl r1
    1758:	13010a40 	movwne	r0, #6720	; 0x1a40
	__pi_release ();
    175c:	05190000 	ldreq	r0, [r9, #-0]
    1760:	3a080300 	bcc	202368 <__ccfg+0x1e23c0>
    1764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1768:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    176c:	1a000006 	bne	178c <killev+0x14>
    1770:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1774:	0b3b0b3a 	bleq	ec4464 <__ccfg+0xea44bc>
static void killev (__pi_pcb_t *pid) {
    1778:	13490b39 	movtne	r0, #39737	; 0x9b39
	wfun = (aword)(pid->code);
    177c:	00000602 	andeq	r0, r0, r2, lsl #12
	for_all_tasks (i) {
    1780:	03000a1b 	movweq	r0, #2587	; 0xa1b
		for (j = 0; j < nevents (i); j++) {
    1784:	3b0b3a0e 	blcc	2cffc4 <__ccfg+0x2b001c>
    1788:	110b390b 	tstne	fp, fp, lsl #18
    178c:	1c000001 	stcne	0, cr0, [r0], {1}
			    || i->Events [j] . Event == wfun
    1790:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		for (j = 0; j < nevents (i); j++) {
    1794:	06550152 			; <UNDEFINED> instruction: 0x06550152
			if (i->Events [j] . Event == (aword)pid
    1798:	0b590b58 	bleq	1644500 <__ccfg+0x1624558>
    179c:	13010b57 	movwne	r0, #6999	; 0x1b57
    17a0:	051d0000 	ldreq	r0, [sp, #-0]
				wakeupev (i, j);
    17a4:	00133100 	andseq	r3, r3, r0, lsl #2
    17a8:	011d1e00 	tsteq	sp, r0, lsl #28
	for_all_tasks (i) {
    17ac:	01521331 	cmpeq	r2, r1, lsr r3
}
    17b0:	0b580655 	bleq	160310c <__ccfg+0x15e3164>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b4:	0b570b59 	bleq	15c4520 <__ccfg+0x15a4578>
static void qfree (aword *ch) {
    17b8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17bc:	3a0e0301 	bcc	3823c8 <__ccfg+0x362420>
	cc = (aword*)(mpools + MA_NP);
    17c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	m_setnextp (ch, chunk);
    17c4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	m_setnextp (cc, ch);
    17c8:	000b2013 	andeq	r2, fp, r3, lsl r0
}
    17cc:	00052000 	andeq	r2, r5, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    17d0:	0b3a0e03 	bleq	e84fe4 <__ccfg+0xe6503c>
    17d4:	0b390b3b 	bleq	e444c8 <__ccfg+0xe24520>
    17d8:	00001349 	andeq	r1, r0, r9, asr #6
			m_setnextp (cc, m_nextp (chunk));
    17dc:	01110100 	tsteq	r1, r0, lsl #2
			m_size (chunk) += m_hdrlen + m_size (ch);
    17e0:	0b130e25 	bleq	4c507c <__ccfg+0x4a50d4>
    17e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    17e8:	01110655 	tsteq	r1, r5, asr r6
    17ec:	00000610 	andeq	r0, r0, r0, lsl r6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17f0:	0b002402 	bleq	a800 <__exidx_end+0x4b40>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    17f8:	0300000e 	movweq	r0, #14
    17fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			m_setnextp (cc, m_nextp (chunk));
    1800:	0b3b0b3a 	bleq	ec44f0 <__ccfg+0xea4548>
			m_size (ch) += m_hdrlen + m_size (chunk);
    1804:	13490b39 	movtne	r0, #39737	; 0x9b39
    1808:	24040000 	strcs	r0, [r4], #-0
    180c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1810:	0008030b 	andeq	r0, r8, fp, lsl #6
    1814:	00260500 	eoreq	r0, r6, r0, lsl #10
    1818:	00001349 	andeq	r1, r0, r9, asr #6
			if (m_size (chunk) >= m_size (ch))
    181c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1820:	07000013 	smladeq	r0, r3, r0, r0
    1824:	0b0b0113 	bleq	2c1c78 <__ccfg+0x2a1cd0>
		chunk = m_nextp (chunk))
    1828:	0b3b0b3a 	bleq	ec4518 <__ccfg+0xea4570>
    182c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1830:	0d080000 	stceq	0, cr0, [r8, #-0]
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1834:	3a0e0300 	bcc	38243c <__ccfg+0x362494>
	diag_wait (a);
    1838:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_wchar (c, a);
    183c:	0b13490b 	bleq	4d3c70 <__ccfg+0x4b3cc8>
    1840:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
}
    1844:	000b380b 	andeq	r3, fp, fp, lsl #16
    1848:	000d0900 	andeq	r0, sp, r0, lsl #18
	syserror (ESTATE, "state");
    184c:	0b3a0e03 	bleq	e85060 <__ccfg+0xe650b8>
    1850:	0b390b3b 	bleq	e44544 <__ccfg+0xe2459c>
    1854:	0b381349 	bleq	e06580 <__ccfg+0xde65d8>
    1858:	340a0000 	strcc	r0, [sl], #-0
	for (i = 0; i < MAX_UTIMERS; i++)
    185c:	3a0e0300 	bcc	382464 <__ccfg+0x3624bc>
void utimer_add (address ut) {
    1860:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1864:	3f13490b 	svccc	0x0013490b
		if (__pi_utims [i] == NULL)
    1868:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	for (i = 0; i < MAX_UTIMERS; i++)
    186c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1870:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		syserror (ERESOURCE, "ut a");
    1874:	010c0000 	mrseq	r0, (UNDEF: 12)
	__pi_utims [i] = ut;
    1878:	01134901 	tsteq	r3, r1, lsl #18
}
    187c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1880:	00000021 	andeq	r0, r0, r1, lsr #32
    1884:	0300160e 	movweq	r1, #1550	; 0x60e
	*t = v;
    1888:	3b0b3a0e 	blcc	2d00c8 <__ccfg+0x2b0120>
	TCI_RUN_AUXILIARY_TIMER;
    188c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
void update_n_wake (word min, Boolean force) {
    1890:	0f000013 	svceq	0x00000013
	if (TCI_UPDATE_DELAY_TICKS (force))
    1894:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1898:	00001301 	andeq	r1, r0, r1, lsl #6
    189c:	49000510 	stmdbmi	r0, {r4, r8, sl}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    18a0:	11000013 	tstne	r0, r3, lsl r0
    18a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18ac:	13490b39 	movtne	r0, #39737	; 0x9b39
    18b0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    18b4:	13120000 	tstne	r2, #0
    18b8:	3a0b0b01 	bcc	2c44c4 <__ccfg+0x2a451c>
    18bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18c0:	0013010b 	andseq	r0, r3, fp, lsl #2
    18c4:	000d1300 	andeq	r1, sp, r0, lsl #6
    18c8:	0b3a0e03 	bleq	e850dc <__ccfg+0xe65134>
    18cc:	0b39053b 	bleq	e42dc0 <__ccfg+0xe22e18>
    18d0:	0b381349 	bleq	e065fc <__ccfg+0xde6654>
		for_all_tasks (i) {
    18d4:	13140000 	tstne	r4, #0
	__pi_mintk = znew + min;
    18d8:	0b0e0301 	bleq	3824e4 <__ccfg+0x36253c>
    18dc:	3b0b3a0b 	blcc	2d0110 <__ccfg+0x2b0168>
			if (!twaiting (i))
    18e0:	010b3905 	tsteq	fp, r5, lsl #18
    18e4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18e8:	13490021 	movtne	r0, #36897	; 0x9021
    18ec:	00000b2f 	andeq	r0, r0, pc, lsr #22
    18f0:	03003416 	movweq	r3, #1046	; 0x416
    18f4:	3b0b3a0e 	blcc	2d0134 <__ccfg+0x2b018c>
    18f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    18fc:	000a0213 	andeq	r0, sl, r3, lsl r2
    1900:	002e1700 	eoreq	r1, lr, r0, lsl #14
    1904:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1908:	0b3b0b3a 	bleq	ec45f8 <__ccfg+0xea4650>
    190c:	01110b39 	tsteq	r1, r9, lsr fp
    1910:	0a400112 	beq	1001d60 <__ccfg+0xfe1db8>
    1914:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
				wakeuptm (i);
    1918:	030c3f01 	movweq	r3, #52993	; 0xcf01
    191c:	3b0b3a0e 	blcc	2d015c <__ccfg+0x2b01b4>
		for_all_tasks (i) {
    1920:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
				d = i->Timer - znew;
    1924:	1113490c 	tstne	r3, ip, lsl #18
    1928:	40011201 	andmi	r1, r1, r1, lsl #4
    192c:	0013010a 	andseq	r0, r3, sl, lsl #2
		if ((word)(__pi_mintk - znew) < min) 
    1930:	00051900 	andeq	r1, r5, r0, lsl #18
    1934:	0b3a0803 	bleq	e83948 <__ccfg+0xe639a0>
    1938:	0b390b3b 	bleq	e4462c <__ccfg+0xe24684>
	__pi_old = znew;
    193c:	06021349 	streq	r1, [r2], -r9, asr #6
}
    1940:	051a0000 	ldreq	r0, [sl, #-0]
	TCI_RUN_DELAY_TIMER;
    1944:	3a080300 	bcc	20254c <__ccfg+0x1e25a4>
}
    1948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    194c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1950:	1b00000a 	blne	1980 <__pi_wait+0x10>
    1954:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 18a4 <update_n_wake+0x14>
    1958:	0b3a0e03 	bleq	e8516c <__ccfg+0xe651c4>
void proceed (word state) {
    195c:	0b39053b 	bleq	e42e50 <__ccfg+0xe22ea8>
	prcdstate (__pi_curr, state);
    1960:	13490c27 	movtne	r0, #39975	; 0x9c27
    1964:	01120111 	tsteq	r2, r1, lsl r1
	release;
    1968:	13010a40 	movwne	r0, #6720	; 0x1a40
    196c:	051c0000 	ldreq	r0, [ip, #-0]
void __pi_wait (aword event, word state) {
    1970:	3a080300 	bcc	202578 <__ccfg+0x1e25d0>
	sint j = nevents (__pi_curr);
    1974:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (j >= MAX_EVENTS_PER_TASK)
    1978:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    197c:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    1980:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 18d0 <update_n_wake+0x40>
		syserror (ENEVENTS, "sw");
    1984:	0b3a0e03 	bleq	e85198 <__ccfg+0xe651f0>
    1988:	0b39053b 	bleq	e42e7c <__ccfg+0xe22ed4>
	setestate (__pi_curr->Events [j], state, event);
    198c:	01120111 	tsteq	r2, r1, lsl r1
	incwait (__pi_curr);
    1990:	00000a40 	andeq	r0, r0, r0, asr #20
	setestate (__pi_curr->Events [j], state, event);
    1994:	0300341e 	movweq	r3, #1054	; 0x41e
}
    1998:	3b0b3a08 	blcc	2d01c0 <__ccfg+0x2b0218>
    199c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    19a0:	00060213 	andeq	r0, r6, r3, lsl r2
void __pi_trigger (aword event) {
    19a4:	000a1f00 	andeq	r1, sl, r0, lsl #30
	for_all_tasks (i) {
    19a8:	0b3a0e03 	bleq	e851bc <__ccfg+0xe65214>
		for (j = 0; j < nevents (i); j++) {
    19ac:	0b39053b 	bleq	e42ea0 <__ccfg+0xe22ef8>
    19b0:	00000111 	andeq	r0, r0, r1, lsl r1
    19b4:	31011d20 	tstcc	r1, r0, lsr #26
    19b8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
			if (i->Events [j] . Event == event) {
    19bc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    19c0:	010b5705 	tsteq	fp, r5, lsl #14
    19c4:	21000013 	tstcs	r0, r3, lsl r0
				wakeupev (i, j);
    19c8:	13310005 	teqne	r1, #5
    19cc:	1d220000 	stcne	0, cr0, [r2, #-0]
	for_all_tasks (i) {
    19d0:	11133101 	tstne	r3, r1, lsl #2
}
    19d4:	58011201 	stmdapl	r1, {r0, r9, ip}
aword __pi_join (aword pid, word st) {
    19d8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	for_all_tasks (i) {
    19dc:	2300000b 	movwcs	r0, #11
    19e0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	return 0;
    19e4:	0b3b0b3a 	bleq	ec46d4 <__ccfg+0xea472c>
		if ((aword)i == pid) {
    19e8:	13490b39 	movtne	r0, #39737	; 0x9b39
			__pi_wait (pid, st);
    19ec:	00000602 	andeq	r0, r0, r2, lsl #12
}
    19f0:	03000a24 	movweq	r0, #2596	; 0xa24
	for_all_tasks (i) {
    19f4:	3b0b3a0e 	blcc	2d0234 <__ccfg+0x2b028c>
    19f8:	110b390b 	tstne	fp, fp, lsl #18
void delay (word d, word state) {
    19fc:	25000001 	strcs	r0, [r0, #-1]
	settstate (__pi_curr, state);
    1a00:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1a04:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1a08:	0b590b58 	bleq	1644770 <__ccfg+0x16247c8>
    1a0c:	00000b57 	andeq	r0, r0, r7, asr fp
	update_n_wake (d, YES);
    1a10:	31000526 	tstcc	r0, r6, lsr #10
    1a14:	00060213 	andeq	r0, r6, r3, lsl r2
	__pi_curr->Timer = __pi_old + d;
    1a18:	011d2700 	tsteq	sp, r0, lsl #14
    1a1c:	01521331 	cmpeq	r2, r1, lsr r3
	inctimer (__pi_curr);
    1a20:	0b580655 	bleq	160337c <__ccfg+0x15e33d4>
    1a24:	0b570b59 	bleq	15c4790 <__ccfg+0x15a47e8>
    1a28:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1a2c:	31011d28 	tstcc	r1, r8, lsr #26
    1a30:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if (fun == NULL)
    1a34:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
		return (int) __pi_curr;
    1a38:	000b570b 	andeq	r5, fp, fp, lsl #14
    1a3c:	002e2900 	eoreq	r2, lr, r0, lsl #18
	for_all_tasks (i)
    1a40:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
}
    1a44:	0b3b0b3a 	bleq	ec4734 <__ccfg+0xea478c>
		if (i->code == fun)
    1a48:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i)
    1a4c:	01120111 	tsteq	r2, r1, lsl r1
    1a50:	00000a40 	andeq	r0, r0, r0, asr #20
    1a54:	03012e2a 	movweq	r2, #7722	; 0x1e2a
int __pi_strlen (const char *s) {
    1a58:	3b0b3a0e 	blcc	2d0298 <__ccfg+0x2b02f0>
	for (i = 0; *(s+i) != '\0'; i++);
    1a5c:	110b390b 	tstne	fp, fp, lsl #18
}
    1a60:	40011201 	andmi	r1, r1, r1, lsl #4
	for (i = 0; *(s+i) != '\0'; i++);
    1a64:	0013010a 	andseq	r0, r3, sl, lsl #2
	while ((Boolean)(*d++ = *s++));
    1a68:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    1a6c:	0b3a0e03 	bleq	e85280 <__ccfg+0xe652d8>
    1a70:	0b390b3b 	bleq	e44764 <__ccfg+0xe247bc>
}
    1a74:	00000b20 	andeq	r0, r0, r0, lsr #22
	while (n-- && (*s != '\0'))
    1a78:	03012e2c 	movweq	r2, #7724	; 0x1e2c
    1a7c:	3b0b3a0e 	blcc	2d02bc <__ccfg+0x2b0314>
	*d = '\0';
    1a80:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	while (n-- && (*s != '\0'))
    1a84:	1201110c 	andne	r1, r1, #12, 2
    1a88:	010a4001 	tsteq	sl, r1
		*d++ = *s++;
    1a8c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    1a90:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	while (n--)
    1a94:	342e0000 	strtcc	r0, [lr], #-0
    1a98:	02133100 	andseq	r3, r3, #0, 2
		*dest++ = *src++;
    1a9c:	2f000006 	svccs	0x00000006
    1aa0:	0e03012e 	adfeqsp	f0, f3, #0.5
    1aa4:	0b3b0b3a 	bleq	ec4794 <__ccfg+0xea47ec>
	while (n--)
    1aa8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1aac:	13010b20 	movwne	r0, #6944	; 0x1b20
		*dest++ = c;
    1ab0:	34300000 	ldrtcc	r0, [r0], #-0
void adddevfunc (devreqfun_t rf, int loc) {
    1ab4:	3a080300 	bcc	2026bc <__ccfg+0x1e2714>
		syserror (EREQPAR, "addv");
    1ab8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (ERESOURCE, "addv");
    1abc:	0013490b 	andseq	r4, r3, fp, lsl #18
	if (ioreq [loc] != NULL)
    1ac0:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
    1ac4:	0b3a0e03 	bleq	e852d8 <__ccfg+0xe65330>
		syserror (ERESOURCE, "addv");
    1ac8:	0b390b3b 	bleq	e447bc <__ccfg+0xe24814>
	ioreq [loc] = rf;
    1acc:	0b200c27 	bleq	804b70 <__ccfg+0x7e4bc8>
}
    1ad0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ad4:	03000532 	movweq	r0, #1330	; 0x532
sint io (word retry, word dev, word operation, char *buf, word len) {
    1ad8:	3b0b3a08 	blcc	2d0300 <__ccfg+0x2b0358>
    1adc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ae0:	33000013 	movwcc	r0, #19
    1ae4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ae8:	01120111 	tsteq	r2, r1, lsl r1
    1aec:	0b590b58 	bleq	1644854 <__ccfg+0x16248ac>
    1af0:	13010b57 	movwne	r0, #6999	; 0x1b57
		syserror (ENODEVICE, "io");
    1af4:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
    1af8:	3a0e0301 	bcc	382704 <__ccfg+0x36275c>
	if (len == 0)
    1afc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	ret = (ioreq [dev]) (operation, buf, len);
    1b00:	1113490b 	tstne	r3, fp, lsl #18
    1b04:	40011201 	andmi	r1, r1, r1, lsl #4
	if (ret >= 0)
    1b08:	0013010a 	andseq	r0, r3, sl, lsl #2
	if (ret == -1) {
    1b0c:	00343500 	eorseq	r3, r4, r0, lsl #10
    1b10:	0b3a0803 	bleq	e83b24 <__ccfg+0xe63b7c>
		if (retry == WNONE)
    1b14:	0b390b3b 	bleq	e44808 <__ccfg+0xe24860>
		iowait (dev, operation, retry);
    1b18:	06021349 	streq	r1, [r2], -r9, asr #6
    1b1c:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    1b20:	3a0e0301 	bcc	38272c <__ccfg+0x362784>
			release;
    1b24:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (ret == -2) {
    1b28:	200c270b 	andcs	r2, ip, fp, lsl #14
		if (retry != WNONE) {
    1b2c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b30:	00053700 	andeq	r3, r5, r0, lsl #14
			iowait (dev, operation, retry);
    1b34:	0b3a0e03 	bleq	e85348 <__ccfg+0xe653a0>
    1b38:	0b39053b 	bleq	e4302c <__ccfg+0xe23084>
			(ioreq [dev]) (NONE, buf, len);
    1b3c:	00001349 	andeq	r1, r0, r9, asr #6
    1b40:	03012e38 	movweq	r2, #7736	; 0x1e38
    1b44:	3b0b3a0e 	blcc	2d0384 <__ccfg+0x2b03dc>
		(ioreq [dev]) (NONE, buf, len);
    1b48:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1b4c:	2013490c 	andscs	r4, r3, ip, lsl #18
    1b50:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    1b54:	00053900 	andeq	r3, r5, r0, lsl #18
	if (retry != WNONE) {
    1b58:	0b3a0e03 	bleq	e8536c <__ccfg+0xe653c4>
		delay (-ret - 2, retry);
    1b5c:	0b390b3b 	bleq	e44850 <__ccfg+0xe248a8>
    1b60:	00001349 	andeq	r1, r0, r9, asr #6
    1b64:	31012e3a 	tstcc	r1, sl, lsr lr
    1b68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		release;
    1b6c:	000a4001 	andeq	r4, sl, r1
    1b70:	001d3b00 	andseq	r3, sp, r0, lsl #22
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b74:	01111331 	tsteq	r1, r1, lsr r3
    1b78:	0b580112 	bleq	1601fc8 <__ccfg+0x15e2020>
    1b7c:	0b570b59 	bleq	15c48e8 <__ccfg+0x15a4940>
    1b80:	01000000 	mrseq	r0, (UNDEF: 0)
    1b84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		syserror (ERESOURCE, "mal1");
    1b88:	0e030b13 	vmoveq.32	d3[0], r0
    1b8c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b90:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1b94:	24020000 	strcs	r0, [r2], #-0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b98:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b9c:	000e030b 	andeq	r0, lr, fp, lsl #6
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1ba0:	00160300 	andseq	r0, r6, r0, lsl #6
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1ba4:	0b3a0e03 	bleq	e853b8 <__ccfg+0xe65410>
    1ba8:	0b390b3b 	bleq	e4489c <__ccfg+0xe248f4>
}
    1bac:	00001349 	andeq	r1, r0, r9, asr #6
    1bb0:	0b002404 	bleq	abc8 <__exidx_end+0x4f08>
    1bb4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1bb8:	05000008 	streq	r0, [r0, #-8]
    1bbc:	13490026 	movtne	r0, #36902	; 0x9026
    1bc0:	35060000 	strcc	r0, [r6, #-0]
void __pi_free (aword *ch) {
    1bc4:	00134900 	andseq	r4, r3, r0, lsl #18
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1bc8:	000f0700 	andeq	r0, pc, r0, lsl #14
    1bcc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		syserror (EMALLOC, "malg");
    1bd0:	13080000 	movwne	r0, #32768	; 0x8000
    1bd4:	3a0b0b01 	bcc	2c47e0 <__ccfg+0x2a4838>
	mcfree [MA_NP] += m_size (ch);
    1bd8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		m_size (ch) ^= MALLOC_UMASK;
    1bdc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1be0:	000d0900 	andeq	r0, sp, r0, lsl #18
	mcfree [MA_NP] += m_size (ch);
    1be4:	0b3a0e03 	bleq	e853f8 <__ccfg+0xe65450>
	QFREE;
    1be8:	0b390b3b 	bleq	e448dc <__ccfg+0xe24934>
	if (mevent [MA_NP] . nwait) {
    1bec:	0b0b1349 	bleq	2c6918 <__ccfg+0x2a6970>
    1bf0:	0b0c0b0d 	bleq	30482c <__ccfg+0x2e4884>
		trigger ((aword)(&(mevent [MA_NP])));
    1bf4:	00000b38 	andeq	r0, r0, r8, lsr fp
		mevent [MA_NP] . nwait --;
    1bf8:	03000d0a 	movweq	r0, #3338	; 0xd0a
}
    1bfc:	3b0b3a0e 	blcc	2d043c <__ccfg+0x2b0494>
    1c00:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c04:	000b3813 	andeq	r3, fp, r3, lsl r8
    1c08:	00340b00 	eorseq	r0, r4, r0, lsl #22
void kill (aword pid) {
    1c0c:	0b3a0e03 	bleq	e85420 <__ccfg+0xe65478>
		pid = (aword) __pi_curr;
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
	j = NULL;
    1c14:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1af8 <io+0x20>
	for_all_tasks (i) {
    1c18:	00000c3c 	andeq	r0, r0, ip, lsr ip
	syserror (EREQPAR, "kpi");
    1c1c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1c20:	00130113 	andseq	r0, r3, r3, lsl r1
		if ((aword)i == pid) {
    1c24:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1c28:	160e0000 	strne	r0, [lr], -r0
				__PCB = i->Next;
    1c2c:	3a0e0300 	bcc	382834 <__ccfg+0x36288c>
			killev (i);
    1c30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			ufree (i);
    1c34:	0013490b 	andseq	r4, r3, fp, lsl #18
			if (i == __pi_curr)
    1c38:	01150f00 	tsteq	r5, r0, lsl #30
    1c3c:	13010c27 	movwne	r0, #7207	; 0x1c27
				release;
    1c40:	05100000 	ldreq	r0, [r0, #-0]
				j->Next = i->Next;
    1c44:	00134900 	andseq	r4, r3, r0, lsl #18
    1c48:	00341100 	eorseq	r1, r4, r0, lsl #2
    1c4c:	0b3a0e03 	bleq	e85460 <__ccfg+0xe654b8>
}
    1c50:	0b39053b 	bleq	e43144 <__ccfg+0xe2319c>
    1c54:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1b38 <io+0x60>
    1c58:	00000c3c 	andeq	r0, r0, ip, lsr ip
	if (size < 8)
    1c5c:	0b011312 	bleq	468ac <__ccfg+0x26904>
		_size = 2;
    1c60:	3b0b3a0b 	blcc	2d0494 <__ccfg+0x2b04ec>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c64:	010b3905 	tsteq	fp, r5, lsl #18
		_size = (((aword)size) + 3) >> 2;
    1c68:	13000013 	movwne	r0, #19
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		_size = (((aword)size) + 3) >> 2;
    1c70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (mevent [MA_NP] . nfail != 255)
    1c74:	13490b39 	movtne	r0, #39737	; 0x9b39
    1c78:	00000b38 	andeq	r0, r0, r8, lsr fp
			mevent [MA_NP] . nfail ++;
    1c7c:	03011314 	movweq	r1, #4884	; 0x1314
		mnfree [MA_NP] = 0;
    1c80:	3a0b0b0e 	bcc	2c48c0 <__ccfg+0x2a4918>
    1c84:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c88:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c8c:	00211500 	eoreq	r1, r1, r0, lsl #10
			syserror (EMALLOC, "malc");
    1c90:	0b2f1349 	bleq	bc69bc <__ccfg+0xba6a14>
    1c94:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
		if (m_size (chunk) >= _size)
    1c98:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1c9c:	3b0b3a0e 	blcc	2d04dc <__ccfg+0x2b0534>
		chunk = m_nextp (chunk)) {
    1ca0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		m_setnextp (cc, m_nextp (chunk));
    1ca4:	1113490c 	tstne	r3, ip, lsl #18
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ca8:	40011201 	andmi	r1, r1, r1, lsl #4
    1cac:	0013010a 	andseq	r0, r3, sl, lsl #2
			m_size (chunk) = _size;
    1cb0:	00051700 	andeq	r1, r5, r0, lsl #14
			cc = chunk + _size + m_hdrlen;
    1cb4:	0b3a0803 	bleq	e83cc8 <__ccfg+0xe63d20>
    1cb8:	0b390b3b 	bleq	e449ac <__ccfg+0xe24a04>
			m_size (cc) = waste - m_hdrlen;
    1cbc:	06021349 	streq	r1, [r2], -r9, asr #6
			QFREE;
    1cc0:	34180000 	ldrcc	r0, [r8], #-0
		mevent [MA_NP] . nfail = 0;
    1cc4:	3a0e0300 	bcc	3828cc <__ccfg+0x362924>
		mcfree [MA_NP] -= m_size (chunk);
    1cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ccc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1cd0:	19000006 	stmdbne	r0, {r1, r2}
    1cd4:	08030034 	stmdaeq	r3, {r2, r4, r5}
		m_size (chunk) |= MALLOC_UMASK;
    1cd8:	0b3b0b3a 	bleq	ec49c8 <__ccfg+0xea4a20>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1cdc:	13490b39 	movtne	r0, #39737	; 0x9b39
		m_size (chunk) |= MALLOC_UMASK;
    1ce0:	00000602 	andeq	r0, r0, r2, lsl #12
			mnfree [MA_NP] = mcfree [MA_NP];
    1ce4:	01110100 	tsteq	r1, r0, lsl #2
}
    1ce8:	0b130e25 	bleq	4c5584 <__ccfg+0x4a55dc>
    1cec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1cf0:	01110655 	tsteq	r1, r5, asr r6
    1cf4:	00000610 	andeq	r0, r0, r0, lsl r6
    1cf8:	0b002402 	bleq	ad08 <__exidx_end+0x5048>
    1cfc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1d00:	0300000e 	movweq	r0, #14
aword __pi_fork (fsmcode func, aword data) {
    1d04:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1d08:	0b3b0b3a 	bleq	ec49f8 <__ccfg+0xea4a50>
    1d0c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d10:	24040000 	strcs	r0, [r4], #-0
		if ((j = __PCB) == NULL)
    1d14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	i->Next = NULL;
    1d18:	0008030b 	andeq	r0, r8, fp, lsl #6
	i->data = data;
    1d1c:	00260500 	eoreq	r0, r6, r0, lsl #10
		if ((j = __PCB) == NULL)
    1d20:	00001349 	andeq	r1, r0, r9, asr #6
}
    1d24:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
			for (; j->Next != NULL; j = j->Next);
    1d28:	07000013 	smladeq	r0, r3, r0, r0
    1d2c:	0b0b0113 	bleq	2c2180 <__ccfg+0x2a21d8>
	return (aword) i;
    1d30:	0b3b0b3a 	bleq	ec4a20 <__ccfg+0xea4a78>
    1d34:	13010b39 	movwne	r0, #6969	; 0x1b39
	if (mevent [MA_NP] . nwait != 255)
    1d38:	0d080000 	stceq	0, cr0, [r8, #-0]
    1d3c:	3a0e0300 	bcc	382944 <__ccfg+0x36299c>
    1d40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		mevent [MA_NP] . nwait ++;
    1d44:	0b13490b 	bleq	4d4178 <__ccfg+0x4b41d0>
	wait ((aword)(&(mevent [MA_NP])), state);
    1d48:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1d4c:	000b380b 	andeq	r3, fp, fp, lsl #16
void diag (const char *mess, ...) {
    1d50:	000d0900 	andeq	r0, sp, r0, lsl #18
    1d54:	0b3a0e03 	bleq	e85568 <__ccfg+0xe655c0>
    1d58:	0b390b3b 	bleq	e44a4c <__ccfg+0xe24aa4>
	diag_disable_int (a, is);
    1d5c:	0b381349 	bleq	e06a88 <__ccfg+0xde6ae0>
    1d60:	340a0000 	strcc	r0, [sl], #-0
    1d64:	3a0e0300 	bcc	38296c <__ccfg+0x3629c4>
				d = (bc == 16) ? 10000 : 1000000000;
    1d68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_disable_int (a, is);
    1d6c:	3f13490b 	svccc	0x0013490b
	while (*mess != '\0') {
    1d70:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	dgout ('\r');
    1d74:	000f0b00 	andeq	r0, pc, r0, lsl #22
	dgout ('\n');
    1d78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1d7c:	010c0000 	mrseq	r0, (UNDEF: 12)
    1d80:	01134901 	tsteq	r3, r1, lsl #18
	diag_wait (a);
    1d84:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	diag_enable_int (a, is);
    1d88:	00000021 	andeq	r0, r0, r1, lsr #32
    1d8c:	0300160e 	movweq	r1, #1550	; 0x60e
}
    1d90:	3b0b3a0e 	blcc	2d05d0 <__ccfg+0x2b0628>
    1d94:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1d98:	0f000013 	svceq	0x00000013
		if (*mess == '%') {
    1d9c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1da0:	00001301 	andeq	r1, r0, r1, lsl #6
			if (*mess == 'l') {
    1da4:	49000510 	stmdbmi	r0, {r4, r8, sl}
    1da8:	11000013 	tstne	r0, r3, lsl r0
				mess++;
    1dac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				val = va_arg (ap, lword);
    1db0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				bc = 32;
    1db4:	13490b39 	movtne	r0, #39737	; 0x9b39
				bc = 16;
    1db8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			switch (*mess) {
    1dbc:	13120000 	tstne	r2, #0
    1dc0:	3a0b0b01 	bcc	2c49cc <__ccfg+0x2a4a24>
    1dc4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				dgout ('%');
    1dc8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1dcc:	000d1300 	andeq	r1, sp, r0, lsl #6
				dgout (*mess);
    1dd0:	0b3a0e03 	bleq	e855e4 <__ccfg+0xe6563c>
    1dd4:	0b39053b 	bleq	e432c8 <__ccfg+0xe23320>
			switch (*mess) {
    1dd8:	0b381349 	bleq	e06b04 <__ccfg+0xde6b5c>
					v = __pi_hex_enc_table [
    1ddc:	13140000 	tstne	r4, #0
					i += 4;
    1de0:	0b0e0301 	bleq	3829ec <__ccfg+0x362a44>
					(val >> (bc - i)) & 0xf];
    1de4:	3b0b3a0b 	blcc	2d0618 <__ccfg+0x2b0670>
    1de8:	010b3905 	tsteq	fp, r5, lsl #18
					dgout (v);
    1dec:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1df0:	13490021 	movtne	r0, #36897	; 0x9021
				while (i < bc) {
    1df4:	00000b2f 	andeq	r0, r0, pc, lsr #22
			mess++;
    1df8:	3f012e16 	svccc	0x00012e16
					d /= 10;
    1dfc:	3a0e030c 	bcc	382a34 <__ccfg+0x362a8c>
				if ((val >> (bc - 1)) & 1) {
    1e00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e04:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
					dgout ('-');
    1e08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1e0c:	000a4001 	andeq	r4, sl, r1
						val |= 0xffff0000;
    1e10:	00051700 	andeq	r1, r5, r0, lsl #14
    1e14:	0b3a0803 	bleq	e83e28 <__ccfg+0xe63e80>
    1e18:	0b390b3b 	bleq	e44b0c <__ccfg+0xe24b64>
				d = (bc == 16) ? 10000 : 1000000000;
    1e1c:	06021349 	streq	r1, [r2], -r9, asr #6
    1e20:	34180000 	ldrcc	r0, [r8], #-0
    1e24:	3a0e0300 	bcc	382a2c <__ccfg+0x362a84>
					v = (word) (val / d);
    1e28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					if (v || d == 1) break;
    1e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e30:	00000006 	andeq	r0, r0, r6
					d /= 10;
    1e34:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				d = (bc == 16) ? 10000 : 1000000000;
    1e38:	030b130e 	movweq	r1, #45838	; 0xb30e
					dgout (v + '0');
    1e3c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1e40:	10011106 	andne	r1, r1, r6, lsl #2
    1e44:	02000006 	andeq	r0, r0, #6
					d /= 10;
    1e48:	0b0b0024 	bleq	2c1ee0 <__ccfg+0x2a1f38>
					val = val - (v * d);
    1e4c:	0e030b3e 	vmoveq.16	d3[0], r0
					if (d == 0) break;
    1e50:	16030000 	strne	r0, [r3], -r0
					v = (word) (val / d);
    1e54:	3a0e0300 	bcc	382a5c <__ccfg+0x362ab4>
    1e58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (bc == 16)
    1e5c:	0013490b 	andseq	r4, r3, fp, lsl #18
				d = (bc == 16) ? 10000 : 1000000000;
    1e60:	00240400 	eoreq	r0, r4, r0, lsl #8
					val &= 0xffff;
    1e64:	0b3e0b0b 	bleq	f84a98 <__ccfg+0xf64af0>
					dgout (*s);
    1e68:	00000803 	andeq	r0, r0, r3, lsl #16
					s++;
    1e6c:	03011305 	movweq	r1, #4869	; 0x1305
				while (*s != '\0') {
    1e70:	3a0b0b0e 	bcc	2c4ab0 <__ccfg+0x2a4b08>
    1e74:	010b3b0b 	tsteq	fp, fp, lsl #22
			dgout (*mess++);
    1e78:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1e7c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1e80:	0b381349 	bleq	e06bac <__ccfg+0xde6c04>
    1e84:	00000c34 	andeq	r0, r0, r4, lsr ip
    1e88:	0b000f07 	bleq	5aac <patchImageGenfsk+0xbc>
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e8c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1e90:	13490026 	movtne	r0, #36902	; 0x9026
    1e94:	35090000 	strcc	r0, [r9, #-0]
    1e98:	00134900 	andseq	r4, r3, r0, lsl #18
	^ entropy
    1e9c:	01130a00 	tsteq	r3, r0, lsl #20
}
    1ea0:	0b3a0b0b 	bleq	e84ad4 <__ccfg+0xe64b2c>
    1ea4:	0b390b3b 	bleq	e44b98 <__ccfg+0xe24bf0>
    1ea8:	00001301 	andeq	r1, r0, r1, lsl #6
    1eac:	03000d0b 	movweq	r0, #3339	; 0xd0b
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1eb0:	3b0b3a0e 	blcc	2d06f0 <__ccfg+0x2b0748>
	word cs = size + hblenb;
    1eb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1eb8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1ebc:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	p -> length = size;
    1ec0:	0c00000b 	stceq	0, cr0, [r0], {11}
}
    1ec4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (p->attributes.b.queued) {
    1ec8:	0b3b0b3a 	bleq	ec4bb8 <__ccfg+0xea4c10>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1ecc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ed0:	00000b38 	andeq	r0, r0, r8, lsr fp
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1ed4:	0300340d 	movweq	r3, #1037	; 0x40d
		p->attributes.b.queued = 0;
    1ed8:	3b0b3a0e 	blcc	2d0718 <__ccfg+0x2b0770>
    1edc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ee0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	deq (p);	// Remove from queue
    1ee4:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
}
    1ee8:	0b0b000f 	bleq	2c1f2c <__ccfg+0x2a1f84>
	tfree ((address)p);
    1eec:	00001349 	andeq	r1, r0, r9, asr #6
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ef0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1ef4:	00130113 	andseq	r0, r3, r3, lsl r1
    1ef8:	00211000 	eoreq	r1, r1, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1efc:	16110000 	ldrne	r0, [r1], -r0
    1f00:	3a0e0300 	bcc	382b08 <__ccfg+0x362b60>
	if (q_empty (q))
    1f04:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f08:	0013490b 	andseq	r4, r3, fp, lsl #18
		trigger (q);
    1f0c:	01151200 	tsteq	r5, r0, lsl #4
	if (p->attributes.b.urgent) {
    1f10:	13010c27 	movwne	r0, #7207	; 0x1c27
		p->u.bqueue.next = q->next;
    1f14:	05130000 	ldreq	r0, [r3, #-0]
		p->u.bqueue.prev = q;
    1f18:	00134900 	andseq	r4, r3, r0, lsl #18
		q->next->prev = (qitem_t*) p;
    1f1c:	00341400 	eorseq	r1, r4, r0, lsl #8
	p->attributes.b.queued = 1;
    1f20:	0b3a0e03 	bleq	e85734 <__ccfg+0xe6578c>
    1f24:	0b39053b 	bleq	e43418 <__ccfg+0xe23470>
}
    1f28:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1e0c <diag+0xbc>
		p->u.bqueue.prev = q->prev;
    1f2c:	00000c3c 	andeq	r0, r0, ip, lsr ip
		q->prev->next = (qitem_t*) p;
    1f30:	0b011315 	bleq	46b8c <__ccfg+0x26be4>
		q->prev = (qitem_t*) p;
    1f34:	3b0b3a0b 	blcc	2d0768 <__ccfg+0x2b07c0>
    1f38:	010b3905 	tsteq	fp, r5, lsl #18
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f3c:	16000013 			; <UNDEFINED> instruction: 0x16000013
	deq (p);	// Soft dequeue, timer and hook left intact
    1f40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	switch (dv) {
    1f44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1f48:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f4c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1f50:	03011317 	movweq	r1, #4887	; 0x1317
			p->attributes.b.urgent = 1;
    1f54:	3a0b0b0e 	bcc	2c4b94 <__ccfg+0x2a4bec>
    1f58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			verify_ses (p, "dispose ses");
    1f5c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f60:	00211800 	eoreq	r1, r1, r0, lsl #16
    1f64:	0b2f1349 	bleq	bc6c90 <__ccfg+0xba6ce8>
    1f68:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1f6c:	030c3f01 	movweq	r3, #52993	; 0xcf01
			verify_phy (p, "dispose phy");
    1f70:	3b0b3a0e 	blcc	2d07b0 <__ccfg+0x2b0808>
    1f74:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
}
    1f78:	1113490c 	tstne	r3, ip, lsl #18
			enq (oqueues [p->attributes.b.phys], p);
    1f7c:	40011201 	andmi	r1, r1, r1, lsl #4
			p->attributes.b.urgent = 1;
    1f80:	0013010a 	andseq	r0, r3, sl, lsl #2
    1f84:	00051a00 	andeq	r1, r5, r0, lsl #20
			verify_phy (p, "dispose phy");
    1f88:	0b3a0803 	bleq	e83f9c <__ccfg+0xe63ff4>
    1f8c:	0b390b3b 	bleq	e44c80 <__ccfg+0xe24cd8>
    1f90:	06021349 	streq	r1, [r2], -r9, asr #6
    1f94:	051b0000 	ldreq	r0, [fp, #-0]
    1f98:	3a080300 	bcc	202ba0 <__ccfg+0x1e2bf8>
    1f9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			enq (oqueues [p->attributes.b.phys], p);
    1fa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fa4:	1c00000a 	stcne	0, cr0, [r0], {10}
}
    1fa8:	00000018 	andeq	r0, r0, r8, lsl r0
			rlp (p);
    1fac:	0300341d 	movweq	r3, #1053	; 0x41d
}
    1fb0:	3b0b3a0e 	blcc	2d07f0 <__ccfg+0x2b0848>
    1fb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1fb8:	00060213 	andeq	r0, r6, r3, lsl r2
    1fbc:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1fc0:	0b3a0803 	bleq	e83fd4 <__ccfg+0xe6402c>
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1fc8:	06021349 	streq	r1, [r2], -r9, asr #6
	if (b->attributes.b.outgoing) {
    1fcc:	341f0000 	ldrcc	r0, [pc], #-0	; 1fd4 <tcv_endp+0xc>
	b = header (p);
    1fd0:	3a080300 	bcc	202bd8 <__ccfg+0x1e2c30>
	if (b->attributes.b.outgoing) {
    1fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		verify_ses (b, "tcv02");
    1fd8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fdc:	0000000a 	andeq	r0, r0, sl
    1fe0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1fe4:	030b130e 	movweq	r1, #45838	; 0xb30e
    1fe8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
		verify_plg (b, tcv_out, "tcv03");
    1fec:	10011106 	andne	r1, r1, r6, lsl #2
    1ff0:	02000006 	andeq	r0, r0, #6
    1ff4:	0b0b0024 	bleq	2c208c <__ccfg+0x2a20e4>
    1ff8:	0e030b3e 	vmoveq.16	d3[0], r0
    1ffc:	16030000 	strne	r0, [r3], -r0
    2000:	3a0e0300 	bcc	382c08 <__ccfg+0x362c60>
    2004:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2008:	0013490b 	andseq	r4, r3, fp, lsl #18
    200c:	00240400 	eoreq	r0, r4, r0, lsl #8
		dispose (b, plugins [b->attributes.b.plugin] ->
    2010:	0b3e0b0b 	bleq	f84c44 <__ccfg+0xf64c9c>
}
    2014:	00000803 	andeq	r0, r0, r3, lsl #16
		dispose (b, plugins [b->attributes.b.plugin] ->
    2018:	03011305 	movweq	r1, #4869	; 0x1305
		rlp (b);
    201c:	3a0b0b0e 	bcc	2c4c5c <__ccfg+0x2a4cb4>
}
    2020:	010b3b0b 	tsteq	fp, fp, lsl #22
		rlp (b);
    2024:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2028:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    202c:	0b381349 	bleq	e06d58 <__ccfg+0xde6db0>
    2030:	00000c34 	andeq	r0, r0, r4, lsr ip
    2034:	0b000f07 	bleq	5c58 <patchImageGenfsk+0x268>
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2038:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    203c:	13490026 	movtne	r0, #36902	; 0x9026
    2040:	35090000 	strcc	r0, [r9, #-0]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2044:	00134900 	andseq	r4, r3, r0, lsl #18
	va_start (ap, plid);
    2048:	01130a00 	tsteq	r3, r0, lsl #20
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    204c:	0b3a0b0b 	bleq	e84c80 <__ccfg+0xe64cd8>
    2050:	0b390b3b 	bleq	e44d44 <__ccfg+0xe24d9c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2054:	00001301 	andeq	r1, r0, r1, lsl #6
    2058:	03000d0b 	movweq	r0, #3339	; 0xd0b
    205c:	3b0b3a0e 	blcc	2d089c <__ccfg+0x2b08f4>
    2060:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			syserror (ENODEVICE, "tcv04");
    2064:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
		syserror (EMALLOC, "tcv05");
    2068:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	attp.b.outgoing = 1;
    206c:	0c00000b 	stceq	0, cr0, [r0], {11}
    2070:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2074:	0b3b0b3a 	bleq	ec4d64 <__ccfg+0xea4dbc>
    2078:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    207c:	00000b38 	andeq	r0, r0, r8, lsr fp
		if (descriptors [fd] == NULL)
    2080:	0300340d 	movweq	r3, #1037	; 0x40d
    2084:	3b0b3a0e 	blcc	2d08c4 <__ccfg+0x2b091c>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2088:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		return ERROR;
    208c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
}
    2090:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    2094:	0b0b000f 	bleq	2c20d8 <__ccfg+0x2a2130>
    2098:	00001349 	andeq	r1, r0, r9, asr #6
	s->attpattern.b.session = fd;
    209c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    20a0:	00130113 	andseq	r0, r3, r3, lsl r1
	descriptors [fd] = s;
    20a4:	00211000 	eoreq	r1, r1, r0
	q_init (&(s->rqueue));
    20a8:	16110000 	ldrne	r0, [r1], -r0
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    20ac:	3a0e0300 	bcc	382cb4 <__ccfg+0x362d0c>
    20b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    20b8:	01151200 	tsteq	r5, r0, lsl #4
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    20bc:	13010c27 	movwne	r0, #7207	; 0x1c27
    20c0:	05130000 	ldreq	r0, [r3, #-0]
    20c4:	00134900 	andseq	r4, r3, r0, lsl #18
	descriptors [fd] = s;
    20c8:	00341400 	eorseq	r1, r4, r0, lsl #8
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    20cc:	0b3a0e03 	bleq	e858e0 <__ccfg+0xe65938>
    20d0:	0b39053b 	bleq	e435c4 <__ccfg+0xe2361c>
	if (s == NULL)
    20d4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1fb8 <dispose+0x7c>
		syserror (EMALLOC, "tcv05");
    20d8:	00000c3c 	andeq	r0, r0, ip, lsr ip
    20dc:	0b011315 	bleq	46d38 <__ccfg+0x26d90>
    20e0:	3b0b3a0b 	blcc	2d0914 <__ccfg+0x2b096c>
    20e4:	010b3905 	tsteq	fp, r5, lsl #18
    20e8:	16000013 			; <UNDEFINED> instruction: 0x16000013
    20ec:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    20f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20f4:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20f8:	00000b38 	andeq	r0, r0, r8, lsr fp
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20fc:	03011317 	movweq	r1, #4887	; 0x1317
    2100:	3a0b0b0e 	bcc	2c4d40 <__ccfg+0x2a4d98>
    2104:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	plugins [ord] = pl;
    2108:	0013010b 	andseq	r0, r3, fp, lsl #2
	return 0;
    210c:	00211800 	eoreq	r1, r1, r0, lsl #16
		return ERROR;
    2110:	0b2f1349 	bleq	bc6e3c <__ccfg+0xba6e94>
}
    2114:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2118:	030c3f01 	movweq	r3, #52993	; 0xcf01
	verify_fds (fd, "tcv10");
    211c:	3b0b3a0e 	blcc	2d095c <__ccfg+0x2b09b4>
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2120:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	verify_fds (fd, "tcv10");
    2124:	1113490c 	tstne	r3, ip, lsl #18
    2128:	40011201 	andmi	r1, r1, r1, lsl #4
    212c:	0013010a 	andseq	r0, r3, sl, lsl #2
	verify_plg (b, tcv_frm, "tcv11");
    2130:	00051a00 	andeq	r1, r5, r0, lsl #20
	b = q_first (rq);
    2134:	0b3a0803 	bleq	e84148 <__ccfg+0xe641a0>
	if (q_end (b, rq)) {
    2138:	0b390b3b 	bleq	e44e2c <__ccfg+0xe24e84>
		if (state != WNONE) {
    213c:	06021349 	streq	r1, [r2], -r9, asr #6
    2140:	051b0000 	ldreq	r0, [fp, #-0]
			when (rq, state);
    2144:	3a080300 	bcc	202d4c <__ccfg+0x1e2da4>
			release;
    2148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	deq (b);	// Dequeue the packet ...
    214c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2150:	1c00000a 	stcne	0, cr0, [r0], {10}
	p = ((address)(b + 1));
    2154:	00000018 	andeq	r0, r0, r8, lsl r0
	verify_plg (b, tcv_frm, "tcv11");
    2158:	0300341d 	movweq	r3, #1053	; 0x41d
    215c:	3b0b3a0e 	blcc	2d099c <__ccfg+0x2b09f4>
    2160:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2164:	00060213 	andeq	r0, r6, r3, lsl r2
    2168:	00341e00 	eorseq	r1, r4, r0, lsl #28
    216c:	0b3a0803 	bleq	e84180 <__ccfg+0xe641d8>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2170:	0b390b3b 	bleq	e44e64 <__ccfg+0xe24ebc>
    2174:	0a021349 	beq	86ea0 <__ccfg+0x66ef8>
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2178:	01000000 	mrseq	r0, (UNDEF: 0)
    217c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
	b->u.pointers.tail =
    2180:	0e030b13 	vmoveq.32	d3[0], r0
}
    2184:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		return NULL;
    2188:	06100111 			; <UNDEFINED> instruction: 0x06100111
    218c:	16020000 	strne	r0, [r2], -r0
    2190:	3a0e0300 	bcc	382d98 <__ccfg+0x362df0>
    2194:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2198:	0013490b 	andseq	r4, r3, fp, lsl #18
	verify_fds (fd, "tcv16");
    219c:	00240300 	eoreq	r0, r4, r0, lsl #6
								Boolean urg) {
    21a0:	0b3e0b0b 	bleq	f84dd4 <__ccfg+0xf64e2c>
    21a4:	00000e03 	andeq	r0, r0, r3, lsl #28
	verify_fds (fd, "tcv16");
    21a8:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
    21ac:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    21b0:	13490035 	movtne	r0, #36917	; 0x9035
	verify_pld (s, tcv_frm, "tcv17");
    21b4:	24060000 	strcs	r0, [r6], #-0
    21b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21bc:	0008030b 	andeq	r0, r8, fp, lsl #6
    21c0:	00160700 	andseq	r0, r6, r0, lsl #14
    21c4:	0b3a0e03 	bleq	e859d8 <__ccfg+0xe65a30>
    21c8:	0b39053b 	bleq	e436bc <__ccfg+0xe23714>
    21cc:	00001349 	andeq	r1, r0, r9, asr #6
    21d0:	0b011708 	bleq	47df8 <__ccfg+0x27e50>
	ptrs.head = (word) fd;
    21d4:	3b0b3a0b 	blcc	2d0a08 <__ccfg+0x2b0a60>
	ptrs.tail = (word) urg;
    21d8:	010b390b 	tsteq	fp, fp, lsl #18
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21dc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    21e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if (state != WNONE) {
    21e4:	0b3b0b3a 	bleq	ec4ed4 <__ccfg+0xea4f2c>
    21e8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    21ec:	010a0000 	mrseq	r0, (UNDEF: 10)
			when (eid, state);
    21f0:	01134901 	tsteq	r3, r1, lsl #18
    21f4:	0b000013 	bleq	2248 <tcv_wnps+0xac>
			release;
    21f8:	13490021 	movtne	r0, #36897	; 0x9021
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21fc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2200:	0b01130c 	bleq	46e38 <__ccfg+0x26e90>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2204:	3b0b3a0b 	blcc	2d0a38 <__ccfg+0x2b0a90>
    2208:	010b390b 	tsteq	fp, fp, lsl #18
    220c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2210:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2214:	0b3b0b3a 	bleq	ec4f04 <__ccfg+0xea4f5c>
    2218:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (state != WNONE) {
    221c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2220:	0b000f0e 	bleq	5e60 <__exidx_end+0x1a0>
			tmwait (state);
    2224:	0f00000b 	svceq	0x0000000b
    2228:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	b->attributes = s->attpattern;
    222c:	0b3a0b0b 	bleq	e84e60 <__ccfg+0xe64eb8>
		b->attributes.b.urgent = 1;
    2230:	0b390b3b 	bleq	e44f24 <__ccfg+0xe24f7c>
    2234:	00001301 	andeq	r1, r0, r1, lsl #6
	b->u.pointers.head = ptrs.head;
    2238:	03000d10 	movweq	r0, #3344	; 0xd10
	b->u.pointers.tail = length;
    223c:	3b0b3a08 	blcc	2d0a64 <__ccfg+0x2b0abc>
	return (address) (b + 1);
    2240:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2244:	000b3813 	andeq	r3, fp, r3, lsl r8
    2248:	000f1100 	andeq	r1, pc, r0, lsl #2
    224c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2250:	13120000 	tstne	r2, #0
    2254:	0b0e0301 	bleq	382e60 <__ccfg+0x362eb8>
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2258:	3b0b3a05 	blcc	2d0a74 <__ccfg+0x2b0acc>
    225c:	010b390b 	tsteq	fp, fp, lsl #18
    2260:	13000013 	movwne	r0, #19
	verify_fph (phy, "tcv23");
    2264:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2268:	0b3b0b3a 	bleq	ec4f58 <__ccfg+0xea4fb0>
    226c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2270:	00000538 	andeq	r0, r0, r8, lsr r5
}
    2274:	27001514 	smladcs	r0, r4, r5, r1
	return (physical [phy]) (opt, arg);
    2278:	1500000c 	strne	r0, [r0, #-12]
    227c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2280:	13011349 	movwne	r1, #4937	; 0x1349
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2284:	05160000 	ldreq	r0, [r6, #-0]
	if (opt < 0) {
    2288:	00134900 	andseq	r4, r3, r0, lsl #18
		if (fd < 0)
    228c:	01131700 	tsteq	r3, r0, lsl #14
		if (opt == PHYSOPT_PLUGINFO) {
    2290:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
			if (fd >= TCV_MAX_PLUGS)
    2294:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if ((p = plugins [fd]) == NULL)
    2298:	13010b39 	movwne	r0, #6969	; 0x1b39
    229c:	0d180000 	ldceq	0, cr0, [r8, #-0]
}
    22a0:	3a0e0300 	bcc	382ea8 <__ccfg+0x362f00>
		if (fd >= TCV_MAX_PHYS)
    22a4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		return physinfo [fd];
    22a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    22ac:	1900000b 	stmdbne	r0, {r0, r1, r3}
	verify_fds (fd, "tcv22");
    22b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    22b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    22bc:	00000538 	andeq	r0, r0, r8, lsr r5
    22c0:	0301131a 	movweq	r1, #4890	; 0x131a
}
    22c4:	3a0b0b0e 	bcc	2c4f04 <__ccfg+0x2a4f5c>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    22c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22cc:	0013010b 	andseq	r0, r3, fp, lsl #2
			return 0;
    22d0:	01131b00 	tsteq	r3, r0, lsl #22
    22d4:	0b3a0b0b 	bleq	e84f08 <__ccfg+0xe64f60>
    22d8:	0b39053b 	bleq	e437cc <__ccfg+0xe23824>
    22dc:	00001301 	andeq	r1, r0, r1, lsl #6
    22e0:	0b01171c 	bleq	47f58 <__ccfg+0x27fb0>
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22e4:	3b0b3a0b 	blcc	2d0b18 <__ccfg+0x2b0b70>
    22e8:	010b3905 	tsteq	fp, r5, lsl #18
	if (dsp != TCV_DSP_PASS) {
    22ec:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
		if (ses == NONE)
    22f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			syserror (EREQPAR, "tcv26");
    22f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		verify_fds (ses, "tcv27");
    22f8:	13490b39 	movtne	r0, #39737	; 0x9b39
    22fc:	131e0000 	tstne	lr, #0
    2300:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    2304:	1f00000c 	svcne	0x0000000c
    2308:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		if ((p = apb (size)) != NULL) {
    230c:	00001301 	andeq	r1, r0, r1, lsl #6
    2310:	03003420 	movweq	r3, #1056	; 0x420
		return NULL;
    2314:	3b0b3a0e 	blcc	2d0b54 <__ccfg+0x2b0bac>
			p->attributes = descriptors [ses] -> attpattern;
    2318:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			dispose (p, dsp);
    231c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			p->attributes = descriptors [ses] -> attpattern;
    2320:	2100000c 	tstcs	r0, ip
			p->attributes.b.outgoing = 0;
    2324:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			dispose (p, dsp);
    2328:	0b3b0b3a 	bleq	ec5018 <__ccfg+0xea5070>
			return (address)(p + 1);
    232c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2330:	0b0d0b0b 	bleq	344f64 <__ccfg+0x324fbc>
	if ((p = apb (size)) != NULL)
    2334:	0b380b0c 	bleq	e04f6c <__ccfg+0xde4fc4>
    2338:	0d220000 	stceq	0, cr0, [r2, #-0]
		return (address)(p + 1);
    233c:	3a0e0300 	bcc	382f44 <__ccfg+0x362f9c>
    2340:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2344:	0b13490b 	bleq	4d4778 <__ccfg+0x4b47d0>
    2348:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    234c:	000b380b 	andeq	r3, fp, fp, lsl #16
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2350:	00342300 	eorseq	r2, r4, r0, lsl #6
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2354:	0b3a0e03 	bleq	e85b68 <__ccfg+0xe65bc0>
    2358:	0b390b3b 	bleq	e4504c <__ccfg+0xe250a4>
		syserror (EREQPAR, "tcv28");
    235c:	0a021349 	beq	87088 <__ccfg+0x670e0>
		syserror (EMALLOC, "tcv29");
    2360:	21240000 			; <UNDEFINED> instruction: 0x21240000
	physical [phy] = ps;
    2364:	2f134900 	svccs	0x00134900
	physinfo [phy] = info;
    2368:	25000005 	strcs	r0, [r0, #-5]
    236c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2370:	0b3b0b3a 	bleq	ec5060 <__ccfg+0xea50b8>
    2374:	13490b39 	movtne	r0, #39737	; 0x9b39
    2378:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		syserror (EMALLOC, "tcv29");
    237c:	21260000 			; <UNDEFINED> instruction: 0x21260000
    2380:	27000000 	strcs	r0, [r0, -r0]
	q_init (q);
    2384:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
}
    2388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    238c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2390:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
    2394:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2398:	3b0b3a0e 	blcc	2d0bd8 <__ccfg+0x2b0c30>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    239c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	verify_fph (phy, "tcv30");
    23a0:	1201110c 	andne	r1, r1, #12, 2
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    23a4:	010a4001 	tsteq	sl, r1
    23a8:	29000013 	stmdbcs	r0, {r0, r1, r4}
	verify_fph (phy, "tcv30");
    23ac:	08030005 	stmdaeq	r3, {r0, r2}
    23b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23b4:	13490b39 	movtne	r0, #39737	; 0x9b39
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23b8:	00000602 	andeq	r0, r0, r2, lsl #12
    23bc:	31011d2a 	tstcc	r1, sl, lsr #26
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23c0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    23c4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		if (plugins [plg] == NULL)
    23c8:	010b5705 	tsteq	fp, r5, lsl #14
    23cc:	2b000013 	blcs	2420 <tcvphy_rcv+0x84>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    23d0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
}
    23d4:	342c0000 	strtcc	r0, [ip], #-0
    23d8:	00133100 	andseq	r3, r3, r0, lsl #2
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23dc:	00342d00 	eorseq	r2, r4, r0, lsl #26
    23e0:	06021331 			; <UNDEFINED> instruction: 0x06021331
    23e4:	1d2e0000 	stcne	0, cr0, [lr, #-0]
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23e8:	52133100 	andspl	r3, r3, #0, 2
    23ec:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    23f0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    23f4:	2f00000b 	svccs	0x0000000b
    23f8:	0e03012e 	adfeqsp	f0, f3, #0.5
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	len -= (ap.head + ap.tail);
    2400:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2404:	01111349 	tsteq	r1, r9, asr #6
    2408:	0a400112 	beq	1002858 <__ccfg+0xfe28b0>
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    240c:	00001301 	andeq	r1, r0, r1, lsl #6
    2410:	03003430 	movweq	r3, #1072	; 0x430
    2414:	3b0b3a08 	blcc	2d0c3c <__ccfg+0x2b0c94>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2418:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    241c:	00060213 	andeq	r0, r6, r3, lsl r2
    2420:	000a3100 	andeq	r3, sl, r0, lsl #2
	return 1;
    2424:	0b3a0e03 	bleq	e85c38 <__ccfg+0xe65c90>
    2428:	0b39053b 	bleq	e4391c <__ccfg+0xe23974>
    242c:	00000111 	andeq	r0, r0, r1, lsl r1
    2430:	11010b32 	tstne	r1, r2, lsr fp
    2434:	00011201 	andeq	r1, r1, r1, lsl #4
	verify_fph (phy, "tcv32");
    2438:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
    243c:	0b3a0e03 	bleq	e85c50 <__ccfg+0xe65ca8>
    2440:	0b39053b 	bleq	e43934 <__ccfg+0xe2398c>
    2444:	13010b20 	movwne	r0, #6944	; 0x1b20
    2448:	34340000 	ldrtcc	r0, [r4], #-0
    244c:	3a080300 	bcc	203054 <__ccfg+0x1e30ac>
	oq = oqueues [phy];
    2450:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	b = q_first (oq);
    2454:	0013490b 	andseq	r4, r3, fp, lsl #18
	if (q_end (b, oq)) {
    2458:	00053500 	andeq	r3, r5, r0, lsl #10
	*len = b->length;
    245c:	0b3a0e03 	bleq	e85c70 <__ccfg+0xe65cc8>
	deq (b);	// Dequeue the packet ...
    2460:	0b39053b 	bleq	e43954 <__ccfg+0xe239ac>
}
    2464:	06021349 	streq	r1, [r2], -r9, asr #6
		return NULL;
    2468:	1d360000 	ldcne	0, cr0, [r6, #-0]
    246c:	11133100 	tstne	r3, r0, lsl #2
    2470:	58011201 	stmdapl	r1, {r0, r9, ip}
    2474:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	verify_fph (phy, "tcv33");
    2478:	3700000b 	strcc	r0, [r0, -fp]
    247c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2480:	00001301 	andeq	r1, r0, r1, lsl #6
    2484:	31011d38 	tstcc	r1, r8, lsr sp
    2488:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    248c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	oq = oqueues [phy];
    2490:	010b5705 	tsteq	fp, r5, lsl #14
	b = q_first (oq);
    2494:	39000013 	stmdbcc	r0, {r0, r1, r4}
		return NULL;
    2498:	13310005 	teqne	r1, #5
	return (address)(b + 1);
    249c:	1d3a0000 	ldcne	0, cr0, [sl, #-0]
}
    24a0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    24a4:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    24a8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    24ac:	3b00000b 	blcc	24e0 <tcvphy_end+0x34>
	verify_plg (b, tcv_xmt, "tcv34");
    24b0:	0e03012e 	adfeqsp	f0, f3, #0.5
	hblock_t *b = header (pkt);
    24b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	verify_plg (b, tcv_xmt, "tcv34");
    24b8:	01110b39 	tsteq	r1, r9, lsr fp
    24bc:	0a400112 	beq	100290c <__ccfg+0xfe2964>
    24c0:	00001301 	andeq	r1, r0, r1, lsl #6
    24c4:	03002e3c 	movweq	r2, #3644	; 0xe3c
    24c8:	3b0b3a0e 	blcc	2d0d08 <__ccfg+0x2b0d60>
    24cc:	200b3905 	andcs	r3, fp, r5, lsl #18
    24d0:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
	dispose (b, plugins [b->attributes.b.plugin] ->
    24d4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
}
    24d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	dispose (b, plugins [b->attributes.b.plugin] ->
    24dc:	01110b39 	tsteq	r1, r9, lsr fp
    24e0:	0a400112 	beq	1002930 <__ccfg+0xfe2988>
    24e4:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
}
    24e8:	3a0e0300 	bcc	3830f0 <__ccfg+0x363148>
    while(1)
    24ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
{
    24f0:	000b200b 	andeq	r2, fp, fp
    SetupTrimDevice();
    24f4:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
    pui32Src = &_etext;
    24f8:	0b3a0e03 	bleq	e85d0c <__ccfg+0xe65d64>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24fc:	0b390b3b 	bleq	e451f0 <__ccfg+0xe25248>
    __asm("    ldr     r0, =_bss\n"
    2500:	0b200c27 	bleq	8055a4 <__ccfg+0x7e55fc>
    2504:	00001301 	andeq	r1, r0, r1, lsl #6
    2508:	03000540 	movweq	r0, #1344	; 0x540
    250c:	3b0b3a08 	blcc	2d0d34 <__ccfg+0x2b0d8c>
    2510:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
   main();
    2514:	41000013 	tstmi	r0, r3, lsl r0
    FaultISR();
    2518:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
        *pui32Dest++ = *pui32Src++;
    251c:	0b3b0b3a 	bleq	ec520c <__ccfg+0xea5264>
    2520:	13490b39 	movtne	r0, #39737	; 0x9b39
    2524:	34420000 	strbcc	r0, [r2], #-0
    2528:	3a080300 	bcc	203130 <__ccfg+0x1e3188>
    252c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2530:	0013490b 	andseq	r4, r3, fp, lsl #18
    2534:	012e4300 			; <UNDEFINED> instruction: 0x012e4300
    2538:	0b3a0e03 	bleq	e85d4c <__ccfg+0xe65da4>
static byte get_byte () {
    253c:	0b39053b 	bleq	e43a30 <__ccfg+0xe23a88>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2540:	0b200c27 	bleq	8055e4 <__ccfg+0x7e563c>
    2544:	00001301 	andeq	r1, r0, r1, lsl #6
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2548:	03000544 	movweq	r0, #1348	; 0x544
    254c:	3b0b3a0e 	blcc	2d0d8c <__ccfg+0x2b0de4>
		if (ee_inp)
    2550:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			b |= 1;
    2554:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
    2558:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    255c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (b = 0, i = 0; i < 8; i++) {
    2560:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
    2564:	00000b20 	andeq	r0, r0, r0, lsr #22
    2568:	03002e46 	movweq	r2, #3654	; 0xe46
    256c:	3b0b3a0e 	blcc	2d0dac <__ccfg+0x2b0e04>
static void put_byte (byte b) {
    2570:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2574:	000b200c 	andeq	r2, fp, ip
    2578:	012e4700 			; <UNDEFINED> instruction: 0x012e4700
    257c:	01111331 	tsteq	r1, r1, lsr r3
		if (b & 0x80)
    2580:	0a400112 	beq	10029d0 <__ccfg+0xfe2a28>
    2584:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2588:	31000548 	tstcc	r0, r8, asr #10
	for (i = 0; i < 8; i++) {
    258c:	00060213 	andeq	r0, r6, r3, lsl r2
		b <<= 1;
    2590:	011d4900 	tsteq	sp, r0, lsl #18
	for (i = 0; i < 8; i++) {
    2594:	01111331 	tsteq	r1, r1, lsr r3
}
    2598:	0b580112 	bleq	16029e8 <__ccfg+0x15e2a40>
    259c:	0b570b59 	bleq	15c5308 <__ccfg+0x15a5360>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    25a0:	1d4a0000 	stclne	0, cr0, [sl, #-0]
    25a4:	11133101 	tstne	r3, r1, lsl #2
	put_byte (cmd);
    25a8:	58011201 	stmdapl	r1, {r0, r9, ip}
    25ac:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
}
    25b0:	4b00000b 	blmi	25e4 <wwait+0x2c>
    25b4:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
static void wwait (word st, word del) {
    25b8:	01120111 	tsteq	r2, r1, lsl r1
    25bc:	00000a40 	andeq	r0, r0, r0, asr #20
    25c0:	3100344c 	tstcc	r0, ip, asr #8
	while (dopen && (rdsr () & 1)) {
    25c4:	00061c13 	andeq	r1, r6, r3, lsl ip
    25c8:	11010000 	mrsne	r0, (UNDEF: 1)
    25cc:	130e2501 	movwne	r2, #58625	; 0xe501
    25d0:	1b0e030b 	blne	383204 <__ccfg+0x36325c>
	put_byte (CMD_RDSR);
    25d4:	1106550e 	tstne	r6, lr, lsl #10
	r = get_byte ();
    25d8:	00061001 	andeq	r1, r6, r1
    25dc:	00240200 	eoreq	r0, r4, r0, lsl #4
	while (dopen && (rdsr () & 1)) {
    25e0:	0b3e0b0b 	bleq	f85214 <__ccfg+0xf6526c>
}
    25e4:	00000e03 	andeq	r0, r0, r3, lsl #28
		if (st == WNONE)
    25e8:	03001603 	movweq	r1, #1539	; 0x603
    25ec:	3b0b3a0e 	blcc	2d0e2c <__ccfg+0x2b0e84>
			mdelay (1);
    25f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    25f4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
			delay (del, st);
    25f8:	0b0b0024 	bleq	2c2690 <__ccfg+0x2a26e8>
    25fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
			release;
    2600:	13050000 	movwne	r0, #20480	; 0x5000
    2604:	0b0e0301 	bleq	383210 <__ccfg+0x363268>
    2608:	3b0b3a0b 	blcc	2d0e3c <__ccfg+0x2b0e94>
static void ready () {
    260c:	0013010b 	andseq	r0, r3, fp, lsl #2
	if (dopen) {
    2610:	000d0600 	andeq	r0, sp, r0, lsl #12
		wwait (WNONE, 1);
    2614:	13490e03 	movtne	r0, #40451	; 0x9e03
    2618:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    261c:	0f070000 	svceq	0x00070000
	dstat = 0;
    2620:	000b0b00 	andeq	r0, fp, r0, lsl #22
}
    2624:	00260800 	eoreq	r0, r6, r0, lsl #16
    2628:	00001349 	andeq	r1, r0, r9, asr #6
    262c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
	udelay (1);
    2630:	0a000013 	beq	2684 <ee_close>
    2634:	0b0b000f 	bleq	2c2678 <__ccfg+0x2a26d0>
	udelay (1);
    2638:	00001349 	andeq	r1, r0, r9, asr #6
		dopen = DOPEN_TEMP;
    263c:	0b01130b 	bleq	47270 <__ccfg+0x272c8>
    2640:	3b0b3a0b 	blcc	2d0e74 <__ccfg+0x2b0ecc>
    2644:	010b390b 	tsteq	fp, fp, lsl #18
    2648:	0c000013 	stceq	0, cr0, [r0], {19}
static void cclose () {
    264c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (dopen == DOPEN_TEMP) {
    2650:	0b3b0b3a 	bleq	ec5340 <__ccfg+0xea5398>
    2654:	13490b39 	movtne	r0, #39737	; 0x9b39
		wwait (WNONE, 1);
    2658:	0b0d0b0b 	bleq	34528c <__ccfg+0x3252e4>
    265c:	0b380b0c 	bleq	e05294 <__ccfg+0xde52ec>
	cmd_0 (CMD_DP);
    2660:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2664:	3a0e0300 	bcc	38326c <__ccfg+0x3632c4>
		dopen = 0;
    2668:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    266c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
word ee_open () {
    2670:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
	ready ();
    2674:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	dopen = DOPEN_PERM;
    2678:	0b3b0b3a 	bleq	ec5368 <__ccfg+0xea53c0>
    267c:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    2680:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	if (dopen) {
    2684:	010f0000 	mrseq	r0, CPSR
    2688:	01134901 	tsteq	r3, r1, lsl #18
		dopen = DOPEN_TEMP;
    268c:	10000013 	andne	r0, r0, r3, lsl r0
		cclose ();
    2690:	00000021 	andeq	r0, r0, r1, lsr #32
}
    2694:	03001611 	movweq	r1, #1553	; 0x611
int ser_out (word st, const char *m) {
    2698:	3b0b3a0e 	blcc	2d0ed8 <__ccfg+0x2b0f30>
	if ((prcs = running (__outserial)) != 0) {
    269c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    26a0:	12000013 	andne	r0, r0, #19
    26a4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		join (prcs, st);
    26a8:	00001301 	andeq	r1, r0, r1, lsl #6
		release;
    26ac:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
	if (*m)
    26b0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
		prcs = strlen (m) +1;
    26b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    26b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    26bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    26c0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    26c4:	15150000 	ldrne	r0, [r5, #-0]
		umwait (st);
    26c8:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
    26cc:	00130113 	andseq	r0, r3, r3, lsl r1
		prcs =  m [1] + 3;
    26d0:	01131600 	tsteq	r3, r0, lsl #12
	if (*m)
    26d4:	0b3a0b0b 	bleq	e85308 <__ccfg+0xe65360>
		strcpy (buf, m);
    26d8:	0b39053b 	bleq	e43bcc <__ccfg+0xe23c24>
    26dc:	00001301 	andeq	r1, r0, r1, lsl #6
	if (runstrand (__outserial, buf) == 0) {
    26e0:	03000d17 	movweq	r0, #3351	; 0xd17
    26e4:	3b0b3a0e 	blcc	2d0f24 <__ccfg+0x2b0f7c>
		ufree (buf);
    26e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    26ec:	000b3813 	andeq	r3, fp, r3, lsl r8
		memcpy (buf, m, prcs);
    26f0:	01131800 	tsteq	r3, r0, lsl #16
    26f4:	0b0b0e03 	bleq	2c5f08 <__ccfg+0x2a5f60>
    26f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    26fc:	13010b39 	movwne	r0, #6969	; 0x1b39
    2700:	21190000 	tstcs	r9, r0
int ser_in (word st, char *buf, int len) {
    2704:	2f134900 	svccs	0x00134900
    2708:	1a00000b 	bne	273c <ser_in+0x38>
	if (len == 0)
    270c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	if (__inpline == NULL) {
    2710:	0b3b0b3a 	bleq	ec5400 <__ccfg+0xea5458>
		if ((prcs = running (__inserial)) == 0) {
    2714:	13490b39 	movtne	r0, #39737	; 0x9b39
    2718:	0a020c3f 	beq	8581c <__ccfg+0x65874>
			prcs = runthread (__inserial);
    271c:	341b0000 	ldrcc	r0, [fp], #-0
    2720:	3a0e0300 	bcc	383328 <__ccfg+0x363380>
			if (prcs == 0) {
    2724:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				npwait (st);
    2728:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		release;
    272c:	1c00000a 	stcne	0, cr0, [r0], {10}
		join (prcs, st);
    2730:	0e03012e 	adfeqsp	f0, f3, #0.5
    2734:	0b3b0b3a 	bleq	ec5424 <__ccfg+0xea547c>
	if (*__inpline == NULL) // bin cmd
    2738:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    273c:	01111349 	tsteq	r1, r9, asr #6
	if (prcs >= len)
    2740:	0a400112 	beq	1002b90 <__ccfg+0xfe2be8>
		prcs = len-1;
    2744:	00001301 	andeq	r1, r0, r1, lsl #6
	memcpy (buf, __inpline, prcs);
    2748:	0300051d 	movweq	r0, #1309	; 0x51d
    274c:	3b0b3a08 	blcc	2d0f74 <__ccfg+0x2b0fcc>
    2750:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	ufree (__inpline);
    2754:	00060213 	andeq	r0, r6, r3, lsl r2
	__inpline = NULL;
    2758:	00051e00 	andeq	r1, r5, r0, lsl #28
	if (*buf) // if it's NULL, it's a bin cmd
    275c:	0b3a0e03 	bleq	e85f70 <__ccfg+0xe65fc8>
		buf [prcs] = '\0';
    2760:	0b390b3b 	bleq	e45454 <__ccfg+0xe254ac>
}
    2764:	0a021349 	beq	87490 <__ccfg+0x674e8>
		prcs = strlen (__inpline);
    2768:	051f0000 	ldreq	r0, [pc, #-0]	; 2770 <ser_in+0x6c>
    276c:	3a080300 	bcc	203374 <__ccfg+0x1e33cc>
		return 0;
    2770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2778:	2000000a 	andcs	r0, r0, sl
int ser_outf (word st, const char *m, ...) {
    277c:	0e03012e 	adfeqsp	f0, f3, #0.5
    2780:	0b3b0b3a 	bleq	ec5470 <__ccfg+0xea54c8>
	if ((prcs = running (__outserial)) != 0) {
    2784:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2788:	0b201349 	bleq	8074b4 <__ccfg+0x7e750c>
		join (prcs, st);
    278c:	00001301 	andeq	r1, r0, r1, lsl #6
    2790:	03000521 	movweq	r0, #1313	; 0x521
		release;
    2794:	3b0b3a08 	blcc	2d0fbc <__ccfg+0x2b1014>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2798:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    279c:	22000013 	andcs	r0, r0, #19
    27a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		umwait (st);
    27a4:	0b3b0b3a 	bleq	ec5494 <__ccfg+0xea54ec>
    27a8:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (runstrand (__outserial, buf) == 0) {
    27ac:	34230000 	strtcc	r0, [r3], #-0
    27b0:	3a080300 	bcc	2033b8 <__ccfg+0x1e3410>
    27b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ufree (buf);
    27b8:	0013490b 	andseq	r4, r3, fp, lsl #18
		npwait (st);
    27bc:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
}
    27c0:	01111331 	tsteq	r1, r1, lsr r3
    27c4:	0a400112 	beq	1002c14 <__ccfg+0xfe2c6c>
    27c8:	05250000 	streq	r0, [r5, #-0]!
    27cc:	02133100 	andseq	r3, r3, #0, 2
int ser_inf (word st, const char *fmt, ...) {
    27d0:	26000006 	strcs	r0, [r0], -r6
    27d4:	13310034 	teqne	r1, #52	; 0x34
	if (fmt == NULL)
    27d8:	1d270000 	stcne	0, cr0, [r7, #-0]
	if (__inpline == NULL) {
    27dc:	11133101 	tstne	r3, r1, lsl #2
		if ((prcs = running (__inserial)) == 0) {
    27e0:	58011201 	stmdapl	r1, {r0, r9, ip}
    27e4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
			prcs = runthread (__inserial);
    27e8:	2800000b 	stmdacs	r0, {r0, r1, r3}
    27ec:	13310005 	teqne	r1, #5
			if (prcs == 0) {
    27f0:	00000a02 	andeq	r0, r0, r2, lsl #20
				npwait (st);
    27f4:	31000529 	tstcc	r0, r9, lsr #10
		release;
    27f8:	00000013 	andeq	r0, r0, r3, lsl r0
		join (prcs, st);
    27fc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2800:	030b130e 	movweq	r1, #45838	; 0xb30e
	va_start (ap, fmt);
    2804:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	prcs = vscan (__inpline, fmt, ap);
    2808:	10011106 	andne	r1, r1, r6, lsl #2
    280c:	02000006 	andeq	r0, r0, #6
	ufree (__inpline);
    2810:	0b0b0024 	bleq	2c28a8 <__ccfg+0x2a2900>
	__inpline = NULL;
    2814:	0e030b3e 	vmoveq.16	d3[0], r0
}
    2818:	16030000 	strne	r0, [r3], -r0
    281c:	3a0e0300 	bcc	383424 <__ccfg+0x36347c>
    2820:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		return 0;
    2824:	0013490b 	andseq	r4, r3, fp, lsl #18
    2828:	00240400 	eoreq	r0, r4, r0, lsl #8
    282c:	0b3e0b0b 	bleq	f85460 <__ccfg+0xf654b8>
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2830:	00000803 	andeq	r0, r0, r3, lsl #16
    2834:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2838:	06000013 			; <UNDEFINED> instruction: 0x06000013
	RF_cmdFs.frequency = 
    283c:	13490035 	movtne	r0, #36917	; 0x9035
}
    2840:	13070000 	movwne	r0, #28672	; 0x7000
    2844:	3a0b0b01 	bcc	2c5450 <__ccfg+0x2a54a8>
    2848:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    284c:	0013010b 	andseq	r0, r3, fp, lsl #2
static int option (int opt, address val) {
    2850:	000d0800 	andeq	r0, sp, r0, lsl #16
    2854:	0b3a0e03 	bleq	e86068 <__ccfg+0xe660c0>
    2858:	0b390b3b 	bleq	e4554c <__ccfg+0xe255a4>
    285c:	0b0b1349 	bleq	2c7588 <__ccfg+0x2a75e0>
    2860:	0b0c0b0d 	bleq	30549c <__ccfg+0x2e54f4>
    2864:	00000b38 	andeq	r0, r0, r8, lsr fp
    2868:	03000d09 	movweq	r0, #3337	; 0xd09
    286c:	3b0b3a0e 	blcc	2d10ac <__ccfg+0x2b1104>
    2870:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2874:	000b3813 	andeq	r3, fp, r3, lsl r8
    2878:	00340a00 	eorseq	r0, r4, r0, lsl #20
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    287c:	0b3a0e03 	bleq	e86090 <__ccfg+0xe660e8>
    2880:	0b390b3b 	bleq	e45574 <__ccfg+0xe255cc>
			goto RVal;
    2884:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2768 <ser_in+0x64>
			_BIS (dstate, DSTATE_RXON);
    2888:	00000c3c 	andeq	r0, r0, ip, lsr ip
    288c:	0b000f0b 	bleq	64c0 <__exidx_end+0x800>
	int ret = 0;
    2890:	0013490b 	andseq	r4, r3, fp, lsl #18
			p_trigger (drvprcs, qevent);
    2894:	01010c00 	tsteq	r1, r0, lsl #24
    2898:	13011349 	movwne	r1, #4937	; 0x1349
    289c:	210d0000 	mrscs	r0, (UNDEF: 13)
    28a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    28a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    28a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    28ac:	13490b39 	movtne	r0, #39737	; 0x9b39
    28b0:	150f0000 	strne	r0, [pc, #-0]	; 28b8 <option+0x68>
    28b4:	010c2701 	tsteq	ip, r1, lsl #14
    28b8:	10000013 	andne	r0, r0, r3, lsl r0
}
    28bc:	13490005 	movtne	r0, #36869	; 0x9005
			_BIC (dstate, DSTATE_RXON);
    28c0:	34110000 	ldrcc	r0, [r1], #-0
    28c4:	3a0e0300 	bcc	3834cc <__ccfg+0x363524>
			statid = (val == NULL) ? 0 : *val;
    28c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    28cc:	3f13490b 	svccc	0x0013490b
	int ret = 0;
    28d0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			ret = (int) statid;
    28d4:	01131200 	tsteq	r3, r0, lsl #4
	if (val != NULL)
    28d8:	0b3a0b0b 	bleq	e8550c <__ccfg+0xe65564>
		*val = ret;
    28dc:	0b39053b 	bleq	e43dd0 <__ccfg+0xe23e28>
			ret = rbuffl + 2;
    28e0:	00001301 	andeq	r1, r0, r1, lsl #6
    28e4:	03000d13 	movweq	r0, #3347	; 0xd13
			if (val != NULL) {
    28e8:	3b0b3a0e 	blcc	2d1128 <__ccfg+0x2b1180>
				memcpy (val, &rxstat,
    28ec:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    28f0:	000b3813 	andeq	r3, fp, r3, lsl r8
				memset (&rxstat, 0, 
    28f4:	01131400 	tsteq	r3, r0, lsl #8
    28f8:	0b0b0e03 	bleq	2c610c <__ccfg+0x2a6164>
			if (val == NULL)
    28fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2900:	13010b39 	movwne	r0, #6969	; 0x1b39
    2904:	21150000 	tstcs	r5, r0
				utimer_set (bckf_timer, *val);
    2908:	2f134900 	svccs	0x00134900
    290c:	1600000b 	strne	r0, [r0], -fp
    2910:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2860 <option+0x10>
			for (ret = 0; ret < 8; ret++)
    2914:	0b3a0e03 	bleq	e86128 <__ccfg+0xe66180>
				if (RF_cmdPropRadioDivSetup.txPower
    2918:	0b390b3b 	bleq	e4560c <__ccfg+0xe25664>
					== patable [ret])
    291c:	01110c27 	tsteq	r1, r7, lsr #24
				if (RF_cmdPropRadioDivSetup.txPower
    2920:	0a400112 	beq	1002d70 <__ccfg+0xfe2dc8>
			for (ret = 0; ret < 8; ret++)
    2924:	00001301 	andeq	r1, r0, r1, lsl #6
    2928:	03000517 	movweq	r0, #1303	; 0x517
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    292c:	3b0b3a0e 	blcc	2d116c <__ccfg+0x2b11c4>
    2930:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2934:	00060213 	andeq	r0, r6, r3, lsl r2
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2938:	00341800 	eorseq	r1, r4, r0, lsl #16
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
			_BIS (dstate, DSTATE_IRST);
    2940:	0b390b3b 	bleq	e45634 <__ccfg+0xe2568c>
    2944:	06021349 	streq	r1, [r2], -r9, asr #6
    2948:	0a190000 	beq	642950 <__ccfg+0x6229a8>
			ret = (int) channel;
    294c:	3a0e0300 	bcc	383554 <__ccfg+0x3635ac>
			goto RVal;
    2950:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				(*val > 7) ? 7 : *val;
    2954:	1a00000b 	bne	2988 <option+0x138>
    2958:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    295c:	341b0000 	ldrcc	r0, [fp], #-0
    2960:	3a080300 	bcc	203568 <__ccfg+0x1e35c0>
			plugch ();
    2964:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			_BIS (dstate, DSTATE_IRST);
    2968:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    296c:	0000000a 	andeq	r0, r0, sl
			ret = (int) vrate;
    2970:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2974:	030b130e 	movweq	r1, #45838	; 0xb30e
    2978:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    297c:	10011106 	andne	r1, r1, r6, lsl #2
    2980:	02000006 	andeq	r0, r0, #6
    2984:	0b0b0024 	bleq	2c2a1c <__ccfg+0x2a2a74>
    2988:	0e030b3e 	vmoveq.16	d3[0], r0
    298c:	16030000 	strne	r0, [r3], -r0
    2990:	3a0e0300 	bcc	383598 <__ccfg+0x3635f0>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2994:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2998:	0013490b 	andseq	r4, r3, fp, lsl #18
    299c:	00240400 	eoreq	r0, r4, r0, lsl #8
    29a0:	0b3e0b0b 	bleq	f855d4 <__ccfg+0xf6562c>
			syserror (EREQPAR, "cc13 op");
    29a4:	00000803 	andeq	r0, r0, r3, lsl #16
    29a8:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    29ac:	06000013 			; <UNDEFINED> instruction: 0x06000013
    29b0:	13490035 	movtne	r0, #36917	; 0x9035
    29b4:	0f070000 	svceq	0x00070000
    29b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    29bc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    29c0:	0b0b0113 	bleq	2c2e14 <__ccfg+0x2a2e6c>
    29c4:	0b3b0b3a 	bleq	ec56b4 <__ccfg+0xea570c>
    29c8:	13010b39 	movwne	r0, #6969	; 0x1b39
    29cc:	0d090000 	stceq	0, cr0, [r9, #-0]
    29d0:	3a0e0300 	bcc	3835d8 <__ccfg+0x363630>
    29d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    29d8:	0b13490b 	bleq	4d4e0c <__ccfg+0x4b4e64>
    29dc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
static void issue_cmd (lword cmd) {
    29e0:	000b380b 	andeq	r3, fp, fp, lsl #16
    29e4:	000d0a00 	andeq	r0, sp, r0, lsl #20
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29e8:	0b3a0e03 	bleq	e861fc <__ccfg+0xe66254>
    29ec:	0b390b3b 	bleq	e456e0 <__ccfg+0xe25738>
    29f0:	0b381349 	bleq	e0771c <__ccfg+0xde7774>
		if (res != 0x86)
    29f4:	340b0000 	strcc	r0, [fp], #-0
			syserror (EHARDWARE, "hang ic0");
    29f8:	3a0e0300 	bcc	383600 <__ccfg+0x363658>
    29fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (cnt-- == 0) {
    2a00:	3f13490b 	svccc	0x0013490b
			diag ("HUP %lx %lx", cmd, res);
    2a04:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2a08:	01010c00 	tsteq	r1, r0, lsl #24
			syserror (EHARDWARE, "hang ic0");
    2a0c:	13011349 	movwne	r1, #4937	; 0x1349
		udelay (1);
    2a10:	210d0000 	mrscs	r0, (UNDEF: 13)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a14:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
}
    2a18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2a1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a20:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a24:	150f0000 	strne	r0, [pc, #-0]	; 2a2c <rx_de+0x4>
static void rx_de () {
    2a28:	010c2701 	tsteq	ip, r1, lsl #14
	if ((dstate & DSTATE_RXAC) == 0)
    2a2c:	10000013 	andne	r0, r0, r3, lsl r0
    2a30:	13490005 	movtne	r0, #36869	; 0x9005
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2a34:	34110000 	ldrcc	r0, [r1], #-0
	_BIC (dstate, DSTATE_RXAC);
    2a38:	3a0e0300 	bcc	383640 <__ccfg+0x363698>
    2a3c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    2a40:	3f13490b 	svccc	0x0013490b
    2a44:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2a48:	01131200 	tsteq	r3, r0, lsl #4
static void rf_off () {
    2a4c:	0b3a0b0b 	bleq	e85680 <__ccfg+0xe656d8>
	if ((dstate & DSTATE_RFON) == 0)
    2a50:	0b39053b 	bleq	e43f44 <__ccfg+0xe23f9c>
    2a54:	00001301 	andeq	r1, r0, r1, lsl #6
	IntDisable (INT_RFC_CPE_0);
    2a58:	03000d13 	movweq	r0, #3347	; 0xd13
    2a5c:	3b0b3a0e 	blcc	2d129c <__ccfg+0x2b12f4>
    2a60:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	RFCAdi3VcoLdoVoltageMode (false);
    2a64:	000b3813 	andeq	r3, fp, r3, lsl r8
	RFCSynthPowerDown ();
    2a68:	01131400 	tsteq	r3, r0, lsl #8
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a6c:	0b0b0e03 	bleq	2c6280 <__ccfg+0x2a62d8>
    2a70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a74:	13010b39 	movwne	r0, #6969	; 0x1b39
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a78:	21150000 	tstcs	r5, r0
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a7c:	2f134900 	svccs	0x00134900
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a80:	1600000b 	strne	r0, [r0], -fp
    2a84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2a88:	0b3b0b3a 	bleq	ec5778 <__ccfg+0xea57d0>
	_BIC (dstate, DSTATE_RFON);
    2a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a90:	0a020c3f 	beq	85b94 <__ccfg+0x65bec>
}
    2a94:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    2a98:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2a9c:	3b0b3a0e 	blcc	2d12dc <__ccfg+0x2b1334>
    2aa0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2aa4:	1201110c 	andne	r1, r1, #12, 2
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2aa8:	000a4001 	andeq	r4, sl, r1
    2aac:	00051800 	andeq	r1, r5, r0, lsl #16
    2ab0:	0b3a0e03 	bleq	e862c4 <__ccfg+0xe6631c>
		if (cmd->status == tstat)
    2ab4:	0b390b3b 	bleq	e457a8 <__ccfg+0xe25800>
		if (timeout-- == 0) {
    2ab8:	06021349 	streq	r1, [r2], -r9, asr #6
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2abc:	34190000 	ldrcc	r0, [r9], #-0
    2ac0:	3a0e0300 	bcc	3836c8 <__ccfg+0x363720>
    2ac4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			syserror (EHARDWARE, "rt2");
    2ac8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2acc:	1a000006 	bne	2aec <rf_on.part.0+0xc>
		udelay (1);
    2ad0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
		if (cmd->status == tstat)
    2ad4:	341b0000 	ldrcc	r0, [fp], #-0
}
    2ad8:	3a080300 	bcc	2036e0 <__ccfg+0x1e3738>
    2adc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2ae0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2ae4:	0000000a 	andeq	r0, r0, sl
static void rf_on () {
    2ae8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2aec:	030b130e 	movweq	r1, #45838	; 0xb30e
	OSCHF_TurnOnXosc();
    2af0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2af4:	10011106 	andne	r1, r1, r6, lsl #2
    2af8:	02000006 	andeq	r0, r0, #6
    2afc:	0b0b0024 	bleq	2c2b94 <__ccfg+0x2a2bec>
    2b00:	0e030b3e 	vmoveq.16	d3[0], r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b04:	16030000 	strne	r0, [r3], -r0
    2b08:	3a0e0300 	bcc	383710 <__ccfg+0x363768>
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2b0c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2b10:	0013490b 	andseq	r4, r3, fp, lsl #18
	issue_cmd (
    2b14:	00240400 	eoreq	r0, r4, r0, lsl #8
    2b18:	0b3e0b0b 	bleq	f8574c <__ccfg+0xf657a4>
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2b1c:	00000803 	andeq	r0, r0, r3, lsl #16
    2b20:	03011305 	movweq	r1, #4869	; 0x1305
    2b24:	3a0b0b0e 	bcc	2c5764 <__ccfg+0x2a57bc>
   pPatchTab[80] = 0;
    2b28:	010b3b0b 	tsteq	fp, fp, lsl #22
   } while (--nIterations);
    2b2c:	06000013 			; <UNDEFINED> instruction: 0x06000013
   pPatchTab[53] = 2;
    2b30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2b34:	0b381349 	bleq	e07860 <__ccfg+0xde78b8>
   pPatchTab[55] = 3;
    2b38:	00000c34 	andeq	r0, r0, r4, lsr ip
   pPatchTab[110] = 4;
    2b3c:	0b000f07 	bleq	6760 <__exidx_end+0xaa0>
   pPatchTab[107] = 5;
    2b40:	0800000b 	stmdaeq	r0, {r0, r1, r3}
   pPatchTab[65] = 6;
    2b44:	13490026 	movtne	r0, #36902	; 0x9026
    2b48:	35090000 	strcc	r0, [r9, #-0]
   pPatchTab[57] = 1;
    2b4c:	00134900 	andseq	r4, r3, r0, lsl #18
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b50:	000f0a00 	andeq	r0, pc, r0, lsl #20
   const uint32_t *pS = patchGenfskRfe;
    2b54:	13490b0b 	movtne	r0, #39691	; 0x9b0b
      t2 = *pS++;
    2b58:	130b0000 	movwne	r0, #45056	; 0xb000
      t4 = *pS++;
    2b5c:	3a0b0b01 	bcc	2c5768 <__ccfg+0x2a57c0>
      t6 = *pS++;
    2b60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      t8 = *pS++;
    2b64:	0013010b 	andseq	r0, r3, fp, lsl #2
      *pD++ = t1;
    2b68:	000d0c00 	andeq	r0, sp, r0, lsl #24
      *pD++ = t2;
    2b6c:	0b3a0e03 	bleq	e86380 <__ccfg+0xe663d8>
      *pD++ = t3;
    2b70:	0b390b3b 	bleq	e45864 <__ccfg+0xe258bc>
      *pD++ = t5;
    2b74:	0b0b1349 	bleq	2c78a0 <__ccfg+0x2a78f8>
      *pD++ = t7;
    2b78:	0b0c0b0d 	bleq	3057b4 <__ccfg+0x2e580c>
   } while (--nIterations);
    2b7c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2b80:	03000d0d 	movweq	r0, #3341	; 0xd0d
      *pD++ = t8;
    2b84:	3b0b3a0e 	blcc	2d13c4 <__ccfg+0x2b141c>
   } while (--nIterations);
    2b88:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b8c:	000b3813 	andeq	r3, fp, r3, lsl r8
   *pD++ = t2;
    2b90:	00340e00 	eorseq	r0, r4, r0, lsl #28
   *pD++ = t3;
    2b94:	0b3a0e03 	bleq	e863a8 <__ccfg+0xe66400>
   *pD++ = t4;
    2b98:	0b390b3b 	bleq	e4588c <__ccfg+0xe258e4>
   *pD++ = t5;
    2b9c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2a80 <rf_off+0x34>
    2ba0:	00000c3c 	andeq	r0, r0, ip, lsr ip
	RFCAdi3VcoLdoVoltageMode (true);
    2ba4:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    2ba8:	00130113 	andseq	r0, r3, r3, lsl r1
       	RFCRfTrimSet (&rfTrim);
    2bac:	00211000 	eoreq	r1, r1, r0
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2bb0:	16110000 	ldrne	r0, [r1], -r0
    2bb4:	3a0e0300 	bcc	3837bc <__ccfg+0x363814>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2bb8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bbc:	0013490b 	andseq	r4, r3, fp, lsl #18
	issue_cmd ((lword)&cmd_srt);
    2bc0:	01151200 	tsteq	r5, r0, lsl #4
    2bc4:	13010c27 	movwne	r0, #7207	; 0x1c27
	issue_cmd ((lword)&RF_cmdFs);
    2bc8:	05130000 	ldreq	r0, [r3, #-0]
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2bcc:	00134900 	andseq	r4, r3, r0, lsl #18
    2bd0:	00341400 	eorseq	r1, r4, r0, lsl #8
    2bd4:	0b3a0e03 	bleq	e863e8 <__ccfg+0xe66440>
	IntEnable (INT_RFC_CPE_0);
    2bd8:	0b39053b 	bleq	e440cc <__ccfg+0xe24124>
	_BIC (dstate, DSTATE_IRST);
    2bdc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2ac0 <wait_cmd.constprop.0+0x18>
    2be0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2be4:	0b011315 	bleq	47840 <__ccfg+0x27898>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2be8:	3b0b3a0b 	blcc	2d141c <__ccfg+0x2b1474>
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bec:	010b3905 	tsteq	fp, r5, lsl #18
	IntEnable (INT_RFC_CPE_0);
    2bf0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2bf4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    2bf8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	IntEnable (INT_RFC_CPE_0);
    2bfc:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c00:	00000b38 	andeq	r0, r0, r8, lsr fp
    2c04:	03011317 	movweq	r1, #4887	; 0x1317
    2c08:	3a0b0b0e 	bcc	2c5848 <__ccfg+0x2a58a0>
    2c0c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c10:	0013010b 	andseq	r0, r3, fp, lsl #2
    2c14:	00211800 	eoreq	r1, r1, r0, lsl #16
    2c18:	0b2f1349 	bleq	bc7944 <__ccfg+0xba799c>
    2c1c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2c20:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2c24:	3b0b3a0e 	blcc	2d1464 <__ccfg+0x2b14bc>
    2c28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2c2c:	1113490c 	tstne	r3, ip, lsl #18
    2c30:	40011201 	andmi	r1, r1, r1, lsl #4
    2c34:	0013010a 	andseq	r0, r3, sl, lsl #2
    2c38:	00051a00 	andeq	r1, r5, r0, lsl #20
    2c3c:	0b3a0803 	bleq	e84c50 <__ccfg+0xe64ca8>
    2c40:	0b390b3b 	bleq	e45934 <__ccfg+0xe2598c>
    2c44:	06021349 	streq	r1, [r2], -r9, asr #6
    2c48:	341b0000 	ldrcc	r0, [fp], #-0
    2c4c:	3a080300 	bcc	203854 <__ccfg+0x1e38ac>
    2c50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c58:	1c000006 	stcne	0, cr0, [r0], {6}
    2c5c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
static void rx_int_enable () {
    2c60:	0b3b0b3a 	bleq	ec5950 <__ccfg+0xea59a8>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c64:	01110b39 	tsteq	r1, r9, lsr fp
    2c68:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    2c6c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2c70:	3b0b3a0e 	blcc	2d14b0 <__ccfg+0x2b1508>
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c74:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c78:	1113490c 	tstne	r3, ip, lsl #18
    2c7c:	40011201 	andmi	r1, r1, r1, lsl #4
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c80:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    2c84:	08030034 	stmdaeq	r3, {r2, r4, r5}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c88:	0b3b0b3a 	bleq	ec5978 <__ccfg+0xea59d0>
    2c8c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c90:	00000a02 	andeq	r0, r0, r2, lsl #20
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c94:	03012e1f 	movweq	r2, #7711	; 0x1e1f
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c98:	3b0b3a0e 	blcc	2d14d8 <__ccfg+0x2b1530>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c9c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		if (db->status == DATA_ENTRY_FINISHED) {
    2ca0:	1201110c 	andne	r1, r1, #12, 2
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ca4:	480a4001 	stmdami	sl, {r0, lr}
    2ca8:	0013010a 	andseq	r0, r3, sl, lsl #2
			nr++;
    2cac:	00052000 	andeq	r2, r5, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2cb0:	0b3a0803 	bleq	e84cc4 <__ccfg+0xe64d1c>
    2cb4:	0b390b3b 	bleq	e459a8 <__ccfg+0xe25a00>
    2cb8:	0a021349 	beq	879e4 <__ccfg+0x67a3c>
    2cbc:	0a210000 	beq	842cc4 <__ccfg+0x822d1c>
				__dp [pl + 1] = __dp [pl] - 128;
    2cc0:	3a080300 	bcc	2038c8 <__ccfg+0x1e3920>
				pl = __dp [1] + 2;
    2cc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				__dp [pl + 1] = __dp [pl] - 128;
    2cc8:	0001110b 	andeq	r1, r1, fp, lsl #2
    2ccc:	010b2200 	mrseq	r2, R11_fiq
				__dp [pl] = 0;
    2cd0:	13010655 	movwne	r0, #5717	; 0x1655
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2cd4:	34230000 	strtcc	r0, [r3], #-0
    2cd8:	3a080300 	bcc	2038e0 <__ccfg+0x1e3938>
    2cdc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			db->status = DATA_ENTRY_PENDING;
    2ce0:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ce4:	010b2400 	tsteq	fp, r0, lsl #8
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2ce8:	01120111 	tsteq	r2, r1, lsl r1
				diag ("BAD RX");
    2cec:	00001301 	andeq	r1, r0, r1, lsl #6
    2cf0:	11010b25 	tstne	r1, r5, lsr #22
	if (nr) {
    2cf4:	00011201 	andeq	r1, r1, r1, lsl #4
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cf8:	11010000 	mrsne	r0, (UNDEF: 1)
}
    2cfc:	130e2501 	movwne	r2, #58625	; 0xe501
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2d00:	1b0e030b 	blne	383934 <__ccfg+0x36398c>
    2d04:	1106550e 	tstne	r6, lr, lsl #10
    2d08:	00061001 	andeq	r1, r6, r1
}
    2d0c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2d10:	0b3e0b0b 	bleq	f85944 <__ccfg+0xf6599c>
    2d14:	00000e03 	andeq	r0, r0, r3, lsl #28
    2d18:	03001603 	movweq	r1, #1539	; 0x603
    2d1c:	3b0b3a0e 	blcc	2d155c <__ccfg+0x2b15b4>
    2d20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2d24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2d28:	0b0b0024 	bleq	2c2dc0 <__ccfg+0x2a2e18>
    2d2c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
thread (cc1350_driver)
    2d30:	13050000 	movwne	r0, #20480	; 0x5000
    2d34:	0b0e0301 	bleq	383940 <__ccfg+0x363998>
    2d38:	3b0b3a0b 	blcc	2d156c <__ccfg+0x2b15c4>
    2d3c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d40:	000d0600 	andeq	r0, sp, r0, lsl #12
		if (dstate & DSTATE_IRST) {
    2d44:	13490e03 	movtne	r0, #40451	; 0x9e03
    2d48:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2d4c:	0f070000 	svceq	0x00070000
			rf_off ();
    2d50:	000b0b00 	andeq	r0, fp, r0, lsl #22
			_BIC (dstate,
    2d54:	00260800 	eoreq	r0, r6, r0, lsl #16
    2d58:	00001349 	andeq	r1, r0, r9, asr #6
		if (dstate & DSTATE_RXAC) {
    2d5c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2d60:	0a000013 	beq	2db4 <cc1350_driver+0x84>
			if ((dstate & DSTATE_RXON) == 0)
    2d64:	0b0b000f 	bleq	2c2da8 <__ccfg+0x2a2e00>
				rx_de ();
    2d68:	00001349 	andeq	r1, r0, r9, asr #6
		if (paylen == 0) {
    2d6c:	0b01130b 	bleq	479a0 <__ccfg+0x279f8>
    2d70:	3b0b3a0b 	blcc	2d15a4 <__ccfg+0x2b15fc>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d74:	010b390b 	tsteq	fp, fp, lsl #18
    2d78:	0c000013 	stceq	0, cr0, [r0], {19}
    2d7c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2d80:	0b3b0b3a 	bleq	ec5a70 <__ccfg+0xea5ac8>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d84:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d88:	0b0d0b0b 	bleq	3459bc <__ccfg+0x325a14>
    2d8c:	0b380b0c 	bleq	e059c4 <__ccfg+0xde5a1c>
    2d90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2d94:	3a0e0300 	bcc	38399c <__ccfg+0x3639f4>
    2d98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d9c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2da0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
		} else if (dstate & DSTATE_RXON) {
    2da4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	if (dstate & DSTATE_RFON)
    2da8:	0b3b0b3a 	bleq	ec5a98 <__ccfg+0xea5af0>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2dac:	13490b39 	movtne	r0, #39737	; 0x9b39
		re->status = DATA_ENTRY_PENDING;
    2db0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2db4:	010f0000 	mrseq	r0, CPSR
	issue_cmd ((lword)&RF_cmdPropRx);
    2db8:	01134901 	tsteq	r3, r1, lsl #18
	_BIS (dstate, DSTATE_RXAC);
    2dbc:	10000013 	andne	r0, r0, r3, lsl r0
    2dc0:	00000021 	andeq	r0, r0, r1, lsr #32
    2dc4:	03001611 	movweq	r1, #1553	; 0x611
    2dc8:	3b0b3a0e 	blcc	2d1608 <__ccfg+0x2b1660>
	if (dstate & DSTATE_RXAC)
    2dcc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2dd0:	12000013 	andne	r0, r0, #19
				if (statid != 0xffff)
    2dd4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2dd8:	00001301 	andeq	r1, r0, r1, lsl #6
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2ddc:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
				RF_cmdPropTx.pktLen = (byte) paylen;
    2de0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
		if (paylen == 0) {
    2de4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			wait (qevent, DR_LOOP);
    2de8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2dec:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (dstate & DSTATE_RXAC) {
    2df0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2df4:	13150000 	tstne	r5, #0
				rx_int_enable ();
    2df8:	3a0b0b01 	bcc	2c5a04 <__ccfg+0x2a5a5c>
			release;
    2dfc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			} else if (dstate & DSTATE_RFON) {
    2e00:	0013010b 	andseq	r0, r3, fp, lsl #2
				delay (offdelay, DR_GOOF);
    2e04:	000d1600 	andeq	r1, sp, r0, lsl #12
    2e08:	0b3a0e03 	bleq	e8661c <__ccfg+0xe66674>
    2e0c:	0b39053b 	bleq	e44300 <__ccfg+0xe24358>
		if (bckf_timer) {
    2e10:	0b381349 	bleq	e07b3c <__ccfg+0xde7b94>
			wait (qevent, DR_LOOP);
    2e14:	13170000 	tstne	r7, #0
    2e18:	0b0e0301 	bleq	383a24 <__ccfg+0x363a7c>
    2e1c:	3b0b3a0b 	blcc	2d1650 <__ccfg+0x2b16a8>
			delay (bckf_timer, DR_LOOP);
    2e20:	010b3905 	tsteq	fp, r5, lsl #18
    2e24:	18000013 	stmdane	r0, {r0, r1, r4}
			if (dstate & DSTATE_RXAC)
    2e28:	13490021 	movtne	r0, #36897	; 0x9021
    2e2c:	00000b2f 	andeq	r0, r0, pc, lsr #22
	if (dstate & DSTATE_RFON)
    2e30:	3f012e19 	svccc	0x00012e19
    2e34:	3a0e030c 	bcc	383a6c <__ccfg+0x363ac4>
		rx_de ();
    2e38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		RF_cmdPropTx . status = 0;
    2e3c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2e44:	010a4001 	tsteq	sl, r1
    2e48:	1a000013 	bne	2e9c <cc1350_driver+0x16c>
		issue_cmd ((lword)&cmd_cs);
    2e4c:	08030005 	stmdaeq	r3, {r0, r2}
		if (dstate & DSTATE_IRST)
    2e50:	0b3b0b3a 	bleq	ec5b40 <__ccfg+0xea5b98>
    2e54:	13490b39 	movtne	r0, #39737	; 0x9b39
    2e58:	00000602 	andeq	r0, r0, r2, lsl #12
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e5c:	0300341b 	movweq	r3, #1051	; 0x41b
    2e60:	3b0b3a08 	blcc	2d1688 <__ccfg+0x2b16e0>
			delay (1, DR_XMIT);
    2e64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e68:	00060213 	andeq	r0, r6, r3, lsl r2
    2e6c:	000a1c00 	andeq	r1, sl, r0, lsl #24
    2e70:	0b3a0e03 	bleq	e86684 <__ccfg+0xe666dc>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e74:	0b390b3b 	bleq	e45b68 <__ccfg+0xe25bc0>
    2e78:	0b1d0000 	bleq	742e80 <__ccfg+0x722ed8>
				RF_cmdPropTx . status = 0;
    2e7c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e80:	00130101 	andseq	r0, r3, r1, lsl #2
				issue_cmd ((lword)&RF_cmdPropTx);
    2e84:	00341e00 	eorseq	r1, r4, r0, lsl #28
				proceed (DR_XMIT);
    2e88:	0b3a0803 	bleq	e84e9c <__ccfg+0xe64ef4>
    2e8c:	0b390b3b 	bleq	e45b80 <__ccfg+0xe25bd8>
			txtries++;
    2e90:	0a021349 	beq	87bbc <__ccfg+0x67c14>
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e94:	0b1f0000 	bleq	7c2e9c <__ccfg+0x7a2ef4>
    2e98:	01065501 	tsteq	r6, r1, lsl #10
    2e9c:	20000013 	andcs	r0, r0, r3, lsl r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ea0:	08030034 	stmdaeq	r3, {r2, r4, r5}
		goto DR_LOOP__;
    2ea4:	0b3b0b3a 	bleq	ec5b94 <__ccfg+0xea5bec>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ea8:	13490b39 	movtne	r0, #39737	; 0x9b39
		paylen = 0;
    2eac:	0b210000 	bleq	842eb4 <__ccfg+0x822f0c>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2eb0:	00065501 	andeq	r5, r6, r1, lsl #10
		txtries = 0;
    2eb4:	11010000 	mrsne	r0, (UNDEF: 1)
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2eb8:	130e2501 	movwne	r2, #58625	; 0xe501
    2ebc:	1b0e030b 	blne	383af0 <__ccfg+0x363b48>
    2ec0:	0006100e 	andeq	r1, r6, lr
    2ec4:	00240200 	eoreq	r0, r4, r0, lsl #4
    2ec8:	0b3e0b0b 	bleq	f85afc <__ccfg+0xf65b54>
		    tcvphy_top (physid) == NULL)
    2ecc:	00000e03 	andeq	r0, r0, r3, lsl #28
    2ed0:	03001603 	movweq	r1, #1539	; 0x603
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2ed4:	3b0b3a0e 	blcc	2d1714 <__ccfg+0x2b176c>
    2ed8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			rf_off ();
    2edc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
endthread
    2ee0:	13490026 	movtne	r0, #36902	; 0x9026
    2ee4:	24050000 	strcs	r0, [r5], #-0
    2ee8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2eec:	0008030b 	andeq	r0, r8, fp, lsl #6
    2ef0:	00160600 	andseq	r0, r6, r0, lsl #12
    2ef4:	0b3a0e03 	bleq	e86708 <__ccfg+0xe66760>
    2ef8:	0b39053b 	bleq	e443ec <__ccfg+0xe24444>
    2efc:	00001349 	andeq	r1, r0, r9, asr #6
    2f00:	0b011707 	bleq	48b24 <__ccfg+0x28b7c>
    2f04:	3b0b3a0b 	blcc	2d1738 <__ccfg+0x2b1790>
    2f08:	010b390b 	tsteq	fp, fp, lsl #18
    2f0c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2f10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f14:	0b3b0b3a 	bleq	ec5c04 <__ccfg+0xea5c5c>
    2f18:	13490b39 	movtne	r0, #39737	; 0x9b39
    2f1c:	01090000 	mrseq	r0, (UNDEF: 9)
void RFCCPE0IntHandler (void) {
    2f20:	01134901 	tsteq	r3, r1, lsl #18
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f24:	0a000013 	beq	2f78 <RFCCPE0IntHandler+0x58>
		_BIS (dstate, DSTATE_IRST);
    2f28:	13490021 	movtne	r0, #36897	; 0x9021
    2f2c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2f30:	0b01130b 	bleq	47b64 <__ccfg+0x27bbc>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2f34:	3b0b3a0b 	blcc	2d1768 <__ccfg+0x2b17c0>
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f38:	010b390b 	tsteq	fp, fp, lsl #18
    2f3c:	0c000013 	stceq	0, cr0, [r0], {19}
	p_trigger (drvprcs, qevent);
    2f40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f44:	0b3b0b3a 	bleq	ec5c34 <__ccfg+0xea5c8c>
    2f48:	13490b39 	movtne	r0, #39737	; 0x9b39
    2f4c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2f50:	0b000f0d 	bleq	6b8c <__exidx_end+0xecc>
    2f54:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2f58:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2f5c:	0b3a0b0b 	bleq	e85b90 <__ccfg+0xe65be8>
    2f60:	0b390b3b 	bleq	e45c54 <__ccfg+0xe25cac>
    2f64:	00001301 	andeq	r1, r0, r1, lsl #6
    2f68:	03000d0f 	movweq	r0, #3343	; 0xd0f
	RISE_N_SHINE;
    2f6c:	3b0b3a08 	blcc	2d1794 <__ccfg+0x2b17ec>
    2f70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2f74:	000b3813 	andeq	r3, fp, r3, lsl r8
}
    2f78:	000f1000 	andeq	r1, pc, r0
    2f7c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2f80:	13110000 	tstne	r1, #0
    2f84:	0b0e0301 	bleq	383b90 <__ccfg+0x363be8>
    2f88:	3b0b3a05 	blcc	2d17a4 <__ccfg+0x2b17fc>
    2f8c:	010b390b 	tsteq	fp, fp, lsl #18
void phys_cc1350 (int phy, int mbs) {
    2f90:	12000013 	andne	r0, r0, #19
	if (rbuffl != 0)
    2f94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f98:	0b3b0b3a 	bleq	ec5c88 <__ccfg+0xea5ce0>
		syserror (ETOOMANY, "cc13");
    2f9c:	13490b39 	movtne	r0, #39737	; 0x9b39
		syserror (EREQPAR, "cc13 mb");
    2fa0:	00000538 	andeq	r0, r0, r8, lsr r5
	if (mbs == 0)
    2fa4:	27001513 	smladcs	r0, r3, r5, r1
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2fa8:	1400000c 	strne	r0, [r0], #-12
		syserror (EREQPAR, "cc13 mb");
    2fac:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2fb0:	13011349 	movwne	r1, #4937	; 0x1349
	i = 0;
    2fb4:	05150000 	ldreq	r0, [r5, #-0]
	rbuffl = (byte) mbs;
    2fb8:	00134900 	andseq	r4, r3, r0, lsl #18
		db->config.type = 0;	// General (data in structure)
    2fbc:	01131600 	tsteq	r3, r0, lsl #12
	rbuffl = (byte) mbs;
    2fc0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2fc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fc8:	13010b39 	movwne	r0, #6969	; 0x1b39
		if (db == NULL)
    2fcc:	0d170000 	ldceq	0, cr0, [r7, #-0]
			syserror (EMALLOC, "cc13");
    2fd0:	3a0e0300 	bcc	383bd8 <__ccfg+0x363c30>
    2fd4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fd8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		db->status = DATA_ENTRY_PENDING;
    2fdc:	1800000b 	stmdane	r0, {r0, r1, r3}
		if (i)
    2fe0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			da->pNextEntry = (byte*) db;
    2fe4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		db->length = rbuffl + 2;
    2fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2fec:	00000538 	andeq	r0, r0, r8, lsr r5
		db->config.type = 0;	// General (data in structure)
    2ff0:	03011319 	movweq	r1, #4889	; 0x1319
		db->length = rbuffl + 2;
    2ff4:	3a0b0b0e 	bcc	2c5c34 <__ccfg+0x2a5c8c>
	db->pNextEntry = (byte*) re;
    2ff8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ffc:	0013010b 	andseq	r0, r3, fp, lsl #2
    3000:	01131a00 	tsteq	r3, r0, lsl #20
	if (rbuffs == NULL)
    3004:	0b3a0b0b 	bleq	e85c38 <__ccfg+0xe65c90>
	rbuffs->pCurrEntry = (byte*) re;
    3008:	0b39053b 	bleq	e444fc <__ccfg+0xe24554>
	rbuffs->pLastEntry = NULL;
    300c:	00001301 	andeq	r1, r0, r1, lsl #6
    3010:	0b01171b 	bleq	48c84 <__ccfg+0x28cdc>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3014:	3b0b3a0b 	blcc	2d1848 <__ccfg+0x2b18a0>
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    3018:	010b3905 	tsteq	fp, r5, lsl #18
    301c:	1c000013 	stcne	0, cr0, [r0], {19}
    3020:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	rbuffl -= 2;
    3024:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3028:	13490b39 	movtne	r0, #39737	; 0x9b39
	rbuffl -= 2;
    302c:	131d0000 	tstne	sp, #0
	physid = phy;
    3030:	3c0e0300 	stccc	3, cr0, [lr], {-0}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3034:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3038:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    303c:	00001301 	andeq	r1, r0, r1, lsl #6
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3040:	0300341f 	movweq	r3, #1055	; 0x41f
    3044:	3b0b3a0e 	blcc	2d1884 <__ccfg+0x2b18dc>
	utimer_add (&bckf_timer);
    3048:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	drvprcs = runthread (cc1350_driver);
    304c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    3050:	2000000c 	andcs	r0, r0, ip
    3054:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (drvprcs == 0)
    3058:	0b3b0b3a 	bleq	ec5d48 <__ccfg+0xea5da0>
		syserror (ERESOURCE, "cc13");
    305c:	13490b39 	movtne	r0, #39737	; 0x9b39
    3060:	0b0d0b0b 	bleq	345c94 <__ccfg+0x325cec>
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3064:	0b380b0c 	bleq	e05c9c <__ccfg+0xde5cf4>
    3068:	0d210000 	stceq	0, cr0, [r1, #-0]
    306c:	3a0e0300 	bcc	383c74 <__ccfg+0x363ccc>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3070:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3074:	0b13490b 	bleq	4d54a8 <__ccfg+0x4b5500>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3078:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    307c:	000b380b 	andeq	r3, fp, fp, lsl #16
    3080:	00342200 	eorseq	r2, r4, r0, lsl #4
    3084:	0b3a0e03 	bleq	e86898 <__ccfg+0xe668f0>
    3088:	0b390b3b 	bleq	e45d7c <__ccfg+0xe25dd4>
    308c:	031c1349 	tsteq	ip, #603979777	; 0x24000001
    3090:	21230000 			; <UNDEFINED> instruction: 0x21230000
    3094:	2f134900 	svccs	0x00134900
    3098:	24000005 	strcs	r0, [r0], #-5
	plugch ();
    309c:	13490035 	movtne	r0, #36917	; 0x9035
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    30a0:	34250000 	strtcc	r0, [r5], #-0
    30a4:	3a0e0300 	bcc	383cac <__ccfg+0x363d04>
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    30a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    30ac:	3f13490b 	svccc	0x0013490b
    30b0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    30b4:	00212600 	eoreq	r2, r1, r0, lsl #12
}
    30b8:	34270000 	strtcc	r0, [r7], #-0
    30bc:	3a0e0300 	bcc	383cc4 <__ccfg+0x363d1c>
    30c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    30c8:	2800000a 	stmdacs	r0, {r1, r3}
    30cc:	13470034 	movtne	r0, #28724	; 0x7034
    30d0:	0b3b0b3a 	bleq	ec5dc0 <__ccfg+0xea5e18>
    30d4:	0a020b39 	beq	85dc0 <__ccfg+0x65e18>
    30d8:	01000000 	mrseq	r0, (UNDEF: 0)
    30dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    30e0:	0e030b13 	vmoveq.32	d3[0], r0
    30e4:	17550e1b 	smmlane	r5, fp, lr, r0
    30e8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    30ec:	24020000 	strcs	r0, [r2], #-0
    30f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    30f4:	000e030b 	andeq	r0, lr, fp, lsl #6
    30f8:	00160300 	andseq	r0, r6, r0, lsl #6
    30fc:	0b3a0e03 	bleq	e86910 <__ccfg+0xe66968>
    3100:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3104:	24040000 	strcs	r0, [r4], #-0
    3108:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    310c:	0008030b 	andeq	r0, r8, fp, lsl #6
    3110:	000f0500 	andeq	r0, pc, r0, lsl #10
    3114:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    3118:	15060000 	strne	r0, [r6, #-0]
    311c:	00192700 	andseq	r2, r9, r0, lsl #14
    3120:	01150700 	tsteq	r5, r0, lsl #14
    3124:	13011927 	movwne	r1, #6439	; 0x1927
    3128:	05080000 	streq	r0, [r8, #-0]
    312c:	00134900 	andseq	r4, r3, r0, lsl #18
    3130:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    3134:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3138:	0b3b0b3a 	bleq	ec5e28 <__ccfg+0xea5e80>
    313c:	01111927 	tsteq	r1, r7, lsr #18
    3140:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3144:	01194296 			; <UNDEFINED> instruction: 0x01194296
    3148:	0a000013 	beq	319c <tcv_ope_null+0x40>
    314c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3150:	0b3b0b3a 	bleq	ec5e40 <__ccfg+0xea5e98>
    3154:	17021349 	strne	r1, [r2, -r9, asr #6]
    3158:	340b0000 	strcc	r0, [fp], #-0
    315c:	3a0e0300 	bcc	383d64 <__ccfg+0x363dbc>
    3160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3164:	00170213 	andseq	r0, r7, r3, lsl r2
    3168:	82890c00 	addhi	r0, r9, #0, 24
    316c:	01110001 	tsteq	r1, r1
    3170:	00001331 	andeq	r1, r0, r1, lsr r3
    3174:	0182890d 	orreq	r8, r2, sp, lsl #18
    3178:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    317c:	13311942 	teqne	r1, #1081344	; 0x108000
    3180:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    3184:	03193f01 	tsteq	r9, #1, 30
    3188:	3b0b3a0e 	blcc	2d19c8 <__ccfg+0x2b1a20>
    318c:	1119270b 	tstne	r9, fp, lsl #14
    3190:	40061201 	andmi	r1, r6, r1, lsl #4
    3194:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3198:	00001301 	andeq	r1, r0, r1, lsl #6
    319c:	0182890f 	orreq	r8, r2, pc, lsl #18
    31a0:	01011101 	tsteq	r1, r1, lsl #2
strand (__outserial, const char*)
    31a4:	10000013 	andne	r0, r0, r3, lsl r0
    31a8:	0001828a 	andeq	r8, r1, sl, lsl #5
    31ac:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    31b0:	11000018 	tstne	r0, r8, lsl r0
endstrand
    31b4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    31b8:	0b3a0e03 	bleq	e869cc <__ccfg+0xe66a24>
	ptr = data;
    31bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    31c0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
	if (*ptr)
    31c4:	01000000 	mrseq	r0, (UNDEF: 0)
		len = strlen (ptr);
    31c8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    31cc:	0e030b13 	vmoveq.32	d3[0], r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    31d0:	17550e1b 	smmlane	r5, fp, lr, r0
    31d4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    31d8:	16020000 	strne	r0, [r2], -r0
    31dc:	3a0e0300 	bcc	383de4 <__ccfg+0x363e3c>
    31e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	len -= quant;
    31e4:	03000013 	movweq	r0, #19
    31e8:	0b0b0024 	bleq	2c3280 <__ccfg+0x2a32d8>
    31ec:	0e030b3e 	vmoveq.16	d3[0], r0
	if (len == 0) {
    31f0:	24040000 	strcs	r0, [r4], #-0
		ufree (data);
    31f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		finish;
    31f8:	0008030b 	andeq	r0, r8, fp, lsl #6
    31fc:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3200:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3204:	0b3b0b3a 	bleq	ec5ef4 <__ccfg+0xea5f4c>
    3208:	13491927 	movtne	r1, #39207	; 0x9927
    320c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
strand (__inserial, address)
    3214:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3218:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    321c:	0b3b0b3a 	bleq	ec5f0c <__ccfg+0xea5f64>
    3220:	17021349 	strne	r1, [r2, -r9, asr #6]
    3224:	34070000 	strcc	r0, [r7], #-0
	if (__inpline != NULL)
    3228:	3a0e0300 	bcc	383e30 <__ccfg+0x363e88>
    322c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		finish;
    3230:	00180213 	andseq	r0, r8, r3, lsl r2
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3234:	11010000 	mrsne	r0, (UNDEF: 1)
    3238:	130e2501 	movwne	r2, #58625	; 0xe501
    323c:	1b0e030b 	blne	383e70 <__ccfg+0x363ec8>
    3240:	1117550e 	tstne	r7, lr, lsl #10
		umwait (IM_INIT);
    3244:	00171001 	andseq	r1, r7, r1
		release;
    3248:	00240200 	eoreq	r0, r4, r0, lsl #4
	savedata (data);
    324c:	0b3e0b0b 	bleq	f85e80 <__ccfg+0xf65ed8>
	len = MAX_LINE_LENGTH;
    3250:	00000e03 	andeq	r0, r0, r3, lsl #28
	io (IM_READ, __cport, READ, ptr, 1);
    3254:	03001603 	movweq	r1, #1539	; 0x603
    3258:	3b0b3a0e 	blcc	2d1a98 <__ccfg+0x2b1af0>
    325c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3260:	00240400 	eoreq	r0, r4, r0, lsl #8
	if (ptr == (char*) data) { // new line
    3264:	0b3e0b0b 	bleq	f85e98 <__ccfg+0xf65ef0>
    3268:	00000803 	andeq	r0, r0, r3, lsl #16
		if (*ptr == '\0') { // bin cmd
    326c:	3f012e05 	svccc	0x00012e05
			proceed (IM_BIN);
    3270:	3a0e0319 	bcc	383edc <__ccfg+0x363f34>
    3274:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
		if (*ptr < 0x20)
    3278:	11134919 	tstne	r3, r9, lsl r9
    327c:	40061201 	andmi	r1, r6, r1, lsl #4
			proceed (IM_READ);
    3280:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3284:	00001301 	andeq	r1, r0, r1, lsl #6
	if (*ptr == '\n' || *ptr == '\r') {
    3288:	03003406 	movweq	r3, #1030	; 0x406
    328c:	3b0b3a0e 	blcc	2d1acc <__ccfg+0x2b1b24>
    3290:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		*ptr = '\0';
    3294:	07000017 	smladeq	r0, r7, r0, r0
		__inpline = (char*)data;
    3298:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		finish;
    329c:	0b3b0b3a 	bleq	ec5f8c <__ccfg+0xea5fe4>
	if (len) {
    32a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
		ptr++;
    32a4:	17080000 	strne	r0, [r8, -r0]
    32a8:	3a0b0b01 	bcc	2c5eb4 <__ccfg+0x2a5f0c>
		len--;
    32ac:	010b3b0b 	tsteq	fp, fp, lsl #22
	proceed (IM_READ);
    32b0:	09000013 	stmdbeq	r0, {r0, r1, r4}
	io (IM_BIN, __cport, READ, ptr, 1);
    32b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    32b8:	0b3b0b3a 	bleq	ec5fa8 <__ccfg+0xea6000>
    32bc:	00001349 	andeq	r1, r0, r9, asr #6
    32c0:	0300340a 	movweq	r3, #1034	; 0x40a
    32c4:	3b0b3a0e 	blcc	2d1b04 <__ccfg+0x2b1b5c>
	len -= 2;
    32c8:	0013490b 	andseq	r4, r3, fp, lsl #18
	if (len > *ptr + 1) // 1 for 0x04
    32cc:	01010b00 	tsteq	r1, r0, lsl #22
    32d0:	13011349 	movwne	r1, #4937	; 0x1349
		len = *ptr + 1;
    32d4:	210c0000 	mrscs	r0, (UNDEF: 12)
    32d8:	2f134900 	svccs	0x00134900
	ptr++;
    32dc:	0000000b 	andeq	r0, r0, fp
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    32e4:	030b130e 	movweq	r1, #45838	; 0xb30e
    32e8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    32ec:	10011117 	andne	r1, r1, r7, lsl r1
    32f0:	02000017 	andeq	r0, r0, #23
    32f4:	0b0b0024 	bleq	2c338c <__ccfg+0x2a33e4>
	len -= quant;
    32f8:	0e030b3e 	vmoveq.16	d3[0], r0
		__inpline = (char*)data;
    32fc:	16030000 	strne	r0, [r3], -r0
		finish;
    3300:	3a0e0300 	bcc	383f08 <__ccfg+0x363f60>
	ptr += quant;
    3304:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3308:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
endstrand
    330c:	0b0b0024 	bleq	2c33a4 <__ccfg+0x2a33fc>
    3310:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
	proceed (IM_BINL);
    3314:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
endstrand
    3318:	03193f01 	tsteq	r9, #1, 30
    331c:	3b0b3a0e 	blcc	2d1b5c <__ccfg+0x2b1bb4>
    3320:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3324:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3328:	97184006 	ldrls	r4, [r8, -r6]
    332c:	13011942 	movwne	r1, #6466	; 0x1942
		if (res && (d < n))
    3330:	34060000 	strcc	r0, [r6], #-0
    3334:	3a0e0300 	bcc	383f3c <__ccfg+0x363f94>
    3338:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    333c:	07000013 	smladeq	r0, r3, r0, r0
			res [d] = (char) c;
    3340:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		d++;
    3344:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3348:	00001349 	andeq	r1, r0, r9, asr #6
    334c:	3f012e08 	svccc	0x00012e08
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3350:	3a0e0319 	bcc	383fbc <__ccfg+0x364014>
    3354:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3358:	11134919 	tstne	r3, r9, lsl r9
				enci (10000);
    335c:	40061201 	andmi	r1, r6, r1, lsl #4
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3360:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3364:	00001301 	andeq	r1, r0, r1, lsl #6
	d = 0;
    3368:	3f012e09 	svccc	0x00012e09
		c = *fm++;
    336c:	3a0e0319 	bcc	383fd8 <__ccfg+0x364030>
		if (c == '\\') {
    3370:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
			if ((c = *fm++) == '\0') {
    3374:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3378:	97184006 	ldrls	r4, [r8, -r6]
				outc ('\\');
    337c:	00001942 	andeq	r1, r0, r2, asr #18
			if ((c = *fm++) == '\0') {
    3380:	0300050a 	movweq	r0, #1290	; 0x50a
				outc ('\\');
    3384:	3b0b3a0e 	blcc	2d1bc4 <__ccfg+0x2b1c1c>
    3388:	02134905 	andseq	r4, r3, #81920	; 0x14000
			outc (c);
    338c:	00000018 	andeq	r0, r0, r8, lsl r0
    3390:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
			if (c == '\0')
    3394:	030b130e 	movweq	r1, #45838	; 0xb30e
    3398:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			outc (c);
    339c:	10011117 	andne	r1, r1, r7, lsl r1
				outc (val);
    33a0:	02000017 	andeq	r0, r0, #23
				val = (word) va_arg (ap, aword);
    33a4:	0b0b0024 	bleq	2c343c <__ccfg+0x2a3494>
		if (c == '%') {
    33a8:	0e030b3e 	vmoveq.16	d3[0], r0
    33ac:	16030000 	strne	r0, [r3], -r0
			c = *fm++;
    33b0:	3a0e0300 	bcc	383fb8 <__ccfg+0x364010>
			switch (c) {
    33b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    33b8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    33bc:	0b0b0024 	bleq	2c3454 <__ccfg+0x2a34ac>
    33c0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    33c4:	0f050000 	svceq	0x00050000
    33c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    33cc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    33d0:	19270015 	stmdbne	r7!, {r0, r2, r4}
				outc ('%');
    33d4:	15070000 	strne	r0, [r7, #-0]
    33d8:	01192701 	tsteq	r9, r1, lsl #14
				outc (c);
    33dc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    33e0:	13490005 	movtne	r0, #36869	; 0x9005
    33e4:	15090000 	strne	r0, [r9, #-0]
				if (c == '\0')
    33e8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
				return d;
    33ec:	00130113 	andseq	r0, r3, r3, lsl r1
}
    33f0:	00150a00 	andseq	r0, r5, r0, lsl #20
    33f4:	13491927 	movtne	r1, #39207	; 0x9927
			switch (c) {
    33f8:	130b0000 	movwne	r0, #45056	; 0xb000
    33fc:	3a0b0b01 	bcc	2c6008 <__ccfg+0x2a6060>
    3400:	010b3b0b 	tsteq	fp, fp, lsl #22
				for (i = 12; ; i -= 4) {
    3404:	0c000013 	stceq	0, cr0, [r0], {19}
				val = (word) va_arg (ap, aword);
    3408:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
						[ (val >> i) & 0xf ]);
    340c:	0b3b0b3a 	bleq	ec60fc <__ccfg+0xea6154>
    3410:	0b381349 	bleq	e0813c <__ccfg+0xde8194>
    3414:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
					outc (__pi_hex_enc_table
    3418:	03193f01 	tsteq	r9, #1, 30
    341c:	3b0b3a0e 	blcc	2d1c5c <__ccfg+0x2b1cb4>
					if (i == 0)
    3420:	2019270b 	andscs	r2, r9, fp, lsl #14
    3424:	0013010b 	andseq	r0, r3, fp, lsl #2
				for (i = 12; ; i -= 4) {
    3428:	00050e00 	andeq	r0, r5, r0, lsl #28
				val = (word) va_arg (ap, aword);
    342c:	0b3a0e03 	bleq	e86c40 <__ccfg+0xe66c98>
				if (c == 'd' && (val & 0x8000) != 0) {
    3430:	13490b3b 	movtne	r0, #39739	; 0x9b3b
				val = (word) va_arg (ap, aword);
    3434:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
				if (c == 'd' && (val & 0x8000) != 0) {
    3438:	03193f01 	tsteq	r9, #1, 30
    343c:	3b0b3a0e 	blcc	2d1c7c <__ccfg+0x2b1cd4>
					outc ('-');
    3440:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3444:	010b2013 	tsteq	fp, r3, lsl r0
					val = (~val) + 1;
    3448:	10000013 	andne	r0, r0, r3, lsl r0
    344c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				for (i = 12; ; i -= 4) {
    3450:	0b3b0b3a 	bleq	ec6140 <__ccfg+0xea6198>
				enci (10000);
    3454:	00001349 	andeq	r1, r0, r9, asr #6
    3458:	31012e11 	tstcc	r1, r1, lsl lr
    345c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3460:	97184006 	ldrls	r4, [r8, -r6]
    3464:	13011942 	movwne	r1, #6466	; 0x1942
    3468:	05120000 	ldreq	r0, [r2, #-0]
    346c:	02133100 	andseq	r3, r3, #0, 2
    3470:	13000017 	movwne	r0, #23
    3474:	0111010b 	tsteq	r1, fp, lsl #2
    3478:	13010612 	movwne	r0, #5650	; 0x1612
    347c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    3480:	11010182 	smlabbne	r1, r2, r1, r0
    3484:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3488:	8a150000 	bhi	543490 <__ccfg+0x5234e8>
    348c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3490:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3494:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3498:	11010182 	smlabbne	r1, r2, r1, r0
				if (c == 'd' || c == 'u') {
    349c:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    34a0:	00001301 	andeq	r1, r0, r1, lsl #6
					if (c == 'd' &&
    34a4:	31003417 	tstcc	r0, r7, lsl r4
					val = va_arg (ap, lword);
    34a8:	00180213 	andseq	r0, r8, r3, lsl r2
					fm++;
    34ac:	010b1800 	tsteq	fp, r0, lsl #16
					if (c == 'd' &&
    34b0:	13011755 	movwne	r1, #5973	; 0x1755
    34b4:	05190000 	ldreq	r0, [r9, #-0]
						outc ('-');
    34b8:	1c133100 	ldfnes	f3, [r3], {-0}
    34bc:	1a00000b 	bne	34f0 <__pi_vfparse+0x1a0>
						val = (~val) + 1;
    34c0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
				enci (10000);
    34c4:	341b0000 	ldrcc	r0, [fp], #-0
					enci (1000000000UL);
    34c8:	00133100 	andseq	r3, r3, r0, lsl #2
    34cc:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    34d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    34d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    34d8:	13491927 	movtne	r1, #39207	; 0x9927
    34dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    34e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    34e4:	00130119 	andseq	r0, r3, r9, lsl r1
    34e8:	00051d00 	andeq	r1, r5, r0, lsl #26
    34ec:	0b3a0e03 	bleq	e86d00 <__ccfg+0xe66d58>
    34f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    34f4:	00001702 	andeq	r1, r0, r2, lsl #14
    34f8:	0300341e 	movweq	r3, #1054	; 0x41e
    34fc:	3b0b3a0e 	blcc	2d1d3c <__ccfg+0x2b1d94>
    3500:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3504:	1f000017 	svcne	0x00000017
    3508:	00018289 	andeq	r8, r1, r9, lsl #5
				} else if (c == 'x') {
    350c:	13310111 	teqne	r1, #1073741828	; 0x40000004
					for (i = 28; ; i -= 4) {
    3510:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
					val = va_arg (ap, lword);
    3514:	03193f01 	tsteq	r9, #1, 30
							[ (val >> i) & 0xf ]);
    3518:	3b0b3a0e 	blcc	2d1d58 <__ccfg+0x2b1db0>
    351c:	11192705 	tstne	r9, r5, lsl #14
						outc (__pi_hex_enc_table
    3520:	40061201 	andmi	r1, r6, r1, lsl #4
    3524:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3528:	00001301 	andeq	r1, r0, r1, lsl #6
						if (i == 0)
    352c:	01828921 	orreq	r8, r2, r1, lsr #18
    3530:	31011101 	tstcc	r1, r1, lsl #2
					for (i = 28; ; i -= 4) {
    3534:	00130113 	andseq	r0, r3, r3, lsl r1
					outc ('%');
    3538:	002e2200 	eoreq	r2, lr, r0, lsl #4
    353c:	0b3a0e03 	bleq	e86d50 <__ccfg+0xe66da8>
    3540:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
					outc ('l');
    3544:	0b201349 	bleq	808270 <__ccfg+0x7e82c8>
    3548:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
				val = (word) va_arg (ap, aword);
    354c:	3a0e0300 	bcc	384154 <__ccfg+0x3641ac>
				outc (val);
    3550:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3554:	000b2019 	andeq	r2, fp, r9, lsl r0
				while (*st != '\0') {
    3558:	00342400 	eorseq	r2, r4, r0, lsl #8
    355c:	0b3a0e03 	bleq	e86d70 <__ccfg+0xe66dc8>
    3560:	1349053b 	movtne	r0, #38203	; 0x953b
    3564:	00001702 	andeq	r1, r0, r2, lsl #14
					outc (*st);
    3568:	31011d25 	tstcc	r1, r5, lsr #26
    356c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
					st++;
    3570:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		c = *fm++;
    3574:	00130105 	andseq	r0, r3, r5, lsl #2
    3578:	00052600 	andeq	r2, r5, r0, lsl #12
    357c:	0b3a0e03 	bleq	e86d90 <__ccfg+0xe66de8>
char *vform (char *res, const char *fm, va_list aq) {
    3580:	1349053b 	movtne	r0, #38203	; 0x953b
    3584:	00001702 	andeq	r1, r0, r2, lsl #14
	if (res != NULL) {
    3588:	03003427 	movweq	r3, #1063	; 0x427
		__pi_vfparse (res, MAX_WORD, fm, aq);
    358c:	3b0b3a0e 	blcc	2d1dcc <__ccfg+0x2b1e24>
    3590:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3594:	28000018 	stmdacs	r0, {r3, r4}
}
    3598:	08030034 	stmdaeq	r3, {r2, r4, r5}
    359c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	fml = strlen (fm) + 17;
    35a0:	17021349 	strne	r1, [r2, -r9, asr #6]
    35a4:	34290000 	strtcc	r0, [r9], #-0
    35a8:	3a0e0300 	bcc	3841b0 <__ccfg+0x364208>
	if ((res = (char*) umalloc (fml)) == NULL)
    35ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    35b0:	00180213 	andseq	r0, r8, r3, lsl r2
    35b4:	002e2a00 	eoreq	r2, lr, r0, lsl #20
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    35b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    35bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    35c0:	13491927 	movtne	r1, #39207	; 0x9927
    35c4:	0000193c 	andeq	r1, r0, ip, lsr r9
		ufree (res);
    35c8:	3f002e2b 	svccc	0x00002e2b
		goto Again;
    35cc:	3a0e0319 	bcc	384238 <__ccfg+0x364290>
	if (buf == NULL || fmt == NULL)
    35d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
int vscan (const char *buf, const char *fmt, va_list ap) {
    35d4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
	if (buf == NULL || fmt == NULL)
    35d8:	2c000019 	stccs	0, cr0, [r0], {25}
    35dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    35e0:	0b3a0e03 	bleq	e86df4 <__ccfg+0xe66e4c>
		    	    case 'u': scanu (lword); break;
    35e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
			while (isspace (*buf)) buf++;
    35e8:	0000193c 	andeq	r1, r0, ip, lsr r9
    35ec:	01110100 	tsteq	r1, r0, lsl #2
	while (*fmt != '\0') {
    35f0:	0b130e25 	bleq	4c6e8c <__ccfg+0x4a6ee4>
		if (*fmt++ != '%')
    35f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		switch (*fmt++) {
    35f8:	01111755 	tsteq	r1, r5, asr r7
    35fc:	00001710 	andeq	r1, r0, r0, lsl r7
    3600:	0b002402 	bleq	c610 <__exidx_end+0x6950>
    3604:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3608:	0300000e 	movweq	r0, #14
    360c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3610:	0b3b0b3a 	bleq	ec6300 <__ccfg+0xea6358>
}
    3614:	00001349 	andeq	r1, r0, r9, asr #6
		switch (*fmt++) {
    3618:	0b002404 	bleq	c630 <__exidx_end+0x6970>
    361c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3620:	05000008 	streq	r0, [r0, #-8]
    3624:	0b0b000f 	bleq	2c3668 <__ccfg+0x2a36c0>
			while (isspace (*buf)) buf++;
    3628:	0f060000 	svceq	0x00060000
    362c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3630:	07000013 	smladeq	r0, r3, r0, r0
    3634:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3638:	0b3a0b0b 	bleq	e8626c <__ccfg+0xe662c4>
    363c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
			if (*buf == '\0')
    3640:	0d080000 	stceq	0, cr0, [r8, #-0]
			if (*buf != ',') {
    3644:	3a0e0300 	bcc	38424c <__ccfg+0x3642a4>
			sap = va_arg (ap, char*);
    3648:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nc++;
    364c:	000b3813 	andeq	r3, fp, r3, lsl r8
			if (*buf != ',') {
    3650:	01130900 	tsteq	r3, r0, lsl #18
				while (!isspace (*buf) && *buf != ',' &&
    3654:	0b3a0b0b 	bleq	e86288 <__ccfg+0xe662e0>
    3658:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    365c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    3660:	3a0e0300 	bcc	384268 <__ccfg+0x3642c0>
    3664:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3668:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    366c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			while (isspace (*buf)) buf++;
    3670:	0b00000b 	bleq	36a4 <vscan+0xd4>
    3674:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3678:	0b3a0b0b 	bleq	e862ac <__ccfg+0xe66304>
    367c:	1301053b 	movwne	r0, #5435	; 0x153b
    3680:	0d0c0000 	stceq	0, cr0, [ip, #-0]
			if (*buf == ',') buf++;
    3684:	3a0e0300 	bcc	38428c <__ccfg+0x3642e4>
    3688:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			*sap = '\0';
    368c:	000b3813 	andeq	r3, fp, r3, lsl r8
			break;
    3690:	01130d00 	tsteq	r3, r0, lsl #26
		    case 'd': scani (word); break;
    3694:	0b3a0b0b 	bleq	e862c8 <__ccfg+0xe66320>
    3698:	1301053b 	movwne	r0, #5435	; 0x153b
    369c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    36a0:	3a0e0300 	bcc	3842a8 <__ccfg+0x364300>
    36a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    36a8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    36ac:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    36b0:	0f00000b 	svceq	0x0000000b
    36b4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    36b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    36bc:	0b201927 	bleq	809b60 <__ccfg+0x7e9bb8>
    36c0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    36c4:	03193f01 	tsteq	r9, #1, 30
    36c8:	3b0b3a0e 	blcc	2d1f08 <__ccfg+0x2b1f60>
    36cc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    36d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    36d4:	97184006 	ldrls	r4, [r8, -r6]
    36d8:	13011942 	movwne	r1, #6466	; 0x1942
    36dc:	34110000 	ldrcc	r0, [r1], #-0
    36e0:	3a0e0300 	bcc	3842e8 <__ccfg+0x364340>
    36e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    36e8:	00180213 	andseq	r0, r8, r3, lsl r2
    36ec:	00051200 	andeq	r1, r5, r0, lsl #4
    36f0:	0b3a0803 	bleq	e85704 <__ccfg+0xe6575c>
    36f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36f8:	00001702 	andeq	r1, r0, r2, lsl #14
    36fc:	31001d13 	tstcc	r0, r3, lsl sp
    3700:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		    case 'u': scanu (word); break;
    3704:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3708:	1400000b 	strne	r0, [r0], #-11
    370c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3710:	0b3a0e03 	bleq	e86f24 <__ccfg+0xe66f7c>
    3714:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3718:	06120111 			; <UNDEFINED> instruction: 0x06120111
    371c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3720:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    3724:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3728:	0b3a0e03 	bleq	e86f3c <__ccfg+0xe66f94>
    372c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3730:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3734:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3738:	00130119 	andseq	r0, r3, r9, lsl r1
    373c:	00051600 	andeq	r1, r5, r0, lsl #12
    3740:	0b3a0e03 	bleq	e86f54 <__ccfg+0xe66fac>
    3744:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3748:	00001802 	andeq	r1, r0, r2, lsl #16
		    case 'x': scanx (word); break;
    374c:	03003417 	movweq	r3, #1047	; 0x417
    3750:	3b0b3a0e 	blcc	2d1f90 <__ccfg+0x2b1fe8>
    3754:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3758:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    375c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3760:	0b3b0b3a 	bleq	ec6450 <__ccfg+0xea64a8>
    3764:	17021349 	strne	r1, [r2, -r9, asr #6]
    3768:	34190000 	ldrcc	r0, [r9], #-0
    376c:	3a0e0300 	bcc	384374 <__ccfg+0x3643cc>
    3770:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3774:	1a000013 	bne	37c8 <vscan+0x1f8>
    3778:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    377c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3780:	17021349 	strne	r1, [r2, -r9, asr #6]
    3784:	341b0000 	ldrcc	r0, [fp], #-0
    3788:	3a0e0300 	bcc	384390 <__ccfg+0x3643e8>
    378c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3790:	00061c13 	andeq	r1, r6, r3, lsl ip
    3794:	00341c00 	eorseq	r1, r4, r0, lsl #24
    3798:	0b3a0803 	bleq	e857ac <__ccfg+0xe65804>
    379c:	1349053b 	movtne	r0, #38203	; 0x953b
    37a0:	00001702 	andeq	r1, r0, r2, lsl #14
    37a4:	0182891d 	orreq	r8, r2, sp, lsl r9
    37a8:	31011101 	tstcc	r1, r1, lsl #2
    37ac:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    37b0:	0001828a 	andeq	r8, r1, sl, lsl #5
    37b4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    37b8:	1f000018 	svcne	0x00000018
    37bc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    37c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			switch (*fmt++) {
    37c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    37c8:	01200000 			; <UNDEFINED> instruction: 0x01200000
    37cc:	01134901 	tsteq	r3, r1, lsl #18
    37d0:	21000013 	tstcs	r0, r3, lsl r0
    37d4:	13490021 	movtne	r0, #36897	; 0x9021
    37d8:	00000b2f 	andeq	r0, r0, pc, lsr #22
		    	    case 'd': scani (lword); break;
    37dc:	03003422 	movweq	r3, #1058	; 0x422
    37e0:	3b0b3a0e 	blcc	2d2020 <__ccfg+0x2b2078>
    37e4:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    37e8:	2300000a 	movwcs	r0, #10
    37ec:	13490026 	movtne	r0, #36902	; 0x9026
    37f0:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    37f4:	03193f01 	tsteq	r9, #1, 30
    37f8:	3b0b3a0e 	blcc	2d2038 <__ccfg+0x2b2090>
    37fc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3800:	00193c13 	andseq	r3, r9, r3, lsl ip
    3804:	00052500 	andeq	r2, r5, r0, lsl #10
    3808:	00001349 	andeq	r1, r0, r9, asr #6
    380c:	01110100 	tsteq	r1, r0, lsl #2
    3810:	0b130e25 	bleq	4c70ac <__ccfg+0x4a7104>
    3814:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3818:	01111755 	tsteq	r1, r5, asr r7
    381c:	00001710 	andeq	r1, r0, r0, lsl r7
    3820:	0b002402 	bleq	c830 <__exidx_end+0x6b70>
    3824:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3828:	0300000e 	movweq	r0, #14
    382c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3830:	0b3b0b3a 	bleq	ec6520 <__ccfg+0xea6578>
    3834:	00001349 	andeq	r1, r0, r9, asr #6
		    	    case 'x': scanx (lword); break;
    3838:	0b002404 	bleq	c850 <__exidx_end+0x6b90>
    383c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3840:	05000008 	streq	r0, [r0, #-8]
    3844:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3848:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    384c:	0b201927 	bleq	809cf0 <__ccfg+0x7e9d48>
    3850:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    3854:	3a0e0300 	bcc	38445c <__ccfg+0x3644b4>
    3858:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    385c:	000b2019 	andeq	r2, fp, r9, lsl r0
    3860:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    3864:	0b3a0e03 	bleq	e87078 <__ccfg+0xe670d0>
    3868:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    386c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3870:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3874:	00130119 	andseq	r0, r3, r9, lsl r1
    3878:	00050800 	andeq	r0, r5, r0, lsl #16
    387c:	0b3a0e03 	bleq	e87090 <__ccfg+0xe670e8>
    3880:	1349053b 	movtne	r0, #38203	; 0x953b
    3884:	00001702 	andeq	r1, r0, r2, lsl #14
    3888:	03003409 	movweq	r3, #1033	; 0x409
    388c:	3b0b3a0e 	blcc	2d20cc <__ccfg+0x2b2124>
    3890:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3894:	0a000017 	beq	38f8 <vscan+0x328>
    3898:	1331001d 	teqne	r1, #29
    389c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    38a0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    38a4:	0b0b0000 	bleq	2c38ac <__ccfg+0x2a3904>
		    	    case 'd': scani (lword); break;
    38a8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    38ac:	00130106 	andseq	r0, r3, r6, lsl #2
    38b0:	82890c00 	addhi	r0, r9, #0, 24
    38b4:	01110101 	tsteq	r1, r1, lsl #2
    38b8:	13011331 	movwne	r1, #4913	; 0x1331
    38bc:	8a0d0000 	bhi	3438c4 <__ccfg+0x32391c>
    38c0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
		    	    case 'u': scanu (lword); break;
    38c4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    38c8:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    38cc:	11010182 	smlabbne	r1, r2, r1, r0
    38d0:	0f000001 	svceq	0x00000001
    38d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    38d8:	0b3a0e03 	bleq	e870ec <__ccfg+0xe67144>
    38dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    38e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    38e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    38e8:	00130119 	andseq	r0, r3, r9, lsl r1
    38ec:	00341000 	eorseq	r1, r4, r0
    38f0:	0b3a0e03 	bleq	e87104 <__ccfg+0xe6715c>
    38f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    38f8:	00001702 	andeq	r1, r0, r2, lsl #14
    38fc:	01828911 	orreq	r8, r2, r1, lsl r9
    3900:	31011100 	mrscc	r1, (UNDEF: 17)
    3904:	12000013 	andne	r0, r0, #19
    3908:	01018289 	smlabbeq	r1, r9, r2, r8
		    	    case 'x': scanx (lword); break;
    390c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3910:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
			if ((c = *buf++) == '\0')
    3914:	03193f01 	tsteq	r9, #1, 30
    3918:	3b0b3a0e 	blcc	2d2158 <__ccfg+0x2b21b0>
			sap = va_arg (ap, char*);
    391c:	3c19270b 	ldccc	7, cr2, [r9], {11}
			nc++;
    3920:	00130119 	andseq	r0, r3, r9, lsl r1
			break;
    3924:	00051400 	andeq	r1, r5, r0, lsl #8
			while (isspace (*buf)) buf++;
    3928:	00001349 	andeq	r1, r0, r9, asr #6
    392c:	3f002e15 	svccc	0x00002e15
    3930:	3a0e0319 	bcc	38459c <__ccfg+0x3645f4>
						*sap++ = *buf++;
    3934:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3938:	00193c19 	andseq	r3, r9, r9, lsl ip
			while (isspace (*buf)) buf++;
    393c:	002e1600 	eoreq	r1, lr, r0, lsl #12
    3940:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3944:	0b3b0b3a 	bleq	ec6634 <__ccfg+0xea668c>
		return 0;
    3948:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    394c:	01000000 	mrseq	r0, (UNDEF: 0)
		    case 'x': scanx (word); break;
    3950:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3954:	0e030b13 	vmoveq.32	d3[0], r0
		    	    case 'x': scanx (lword); break;
    3958:	17550e1b 	smmlane	r5, fp, lr, r0
    395c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3960:	24020000 	strcs	r0, [r2], #-0
    3964:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3968:	000e030b 	andeq	r0, lr, fp, lsl #6
    396c:	00160300 	andseq	r0, r6, r0, lsl #6
    3970:	0b3a0e03 	bleq	e87184 <__ccfg+0xe671dc>
    3974:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3978:	24040000 	strcs	r0, [r4], #-0
    397c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3980:	0008030b 	andeq	r0, r8, fp, lsl #6
    3984:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3988:	0b3a0e03 	bleq	e8719c <__ccfg+0xe671f4>
    398c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3990:	0b201349 	bleq	8086bc <__ccfg+0x7e8714>
    3994:	00001301 	andeq	r1, r0, r1, lsl #6
    3998:	03000506 	movweq	r0, #1286	; 0x506
    399c:	3b0b3a0e 	blcc	2d21dc <__ccfg+0x2b2234>
    39a0:	0013490b 	andseq	r4, r3, fp, lsl #18
    39a4:	00340700 	eorseq	r0, r4, r0, lsl #14
    39a8:	0b3a0e03 	bleq	e871bc <__ccfg+0xe67214>
    39ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    39b0:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    39b4:	03193f01 	tsteq	r9, #1, 30
    39b8:	3b0b3a0e 	blcc	2d21f8 <__ccfg+0x2b2250>
    39bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    39c0:	010b2013 	tsteq	fp, r3, lsl r0
    39c4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    39c8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    39cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    39d0:	00001349 	andeq	r1, r0, r9, asr #6
    39d4:	0300340a 	movweq	r3, #1034	; 0x40a
    39d8:	3b0b3a0e 	blcc	2d2218 <__ccfg+0x2b2270>
    39dc:	00134905 	andseq	r4, r3, r5, lsl #18
    39e0:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    39e4:	0b3a0e03 	bleq	e871f8 <__ccfg+0xe67250>
    39e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    39ec:	00000b20 	andeq	r0, r0, r0, lsr #22
    39f0:	3f012e0c 	svccc	0x00012e0c
    39f4:	3a0e0319 	bcc	384660 <__ccfg+0x3646b8>
    39f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    39fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3a00:	97184006 	ldrls	r4, [r8, -r6]
    3a04:	13011942 	movwne	r1, #6466	; 0x1942
    3a08:	050d0000 	streq	r0, [sp, #-0]
    3a0c:	3a0e0300 	bcc	384614 <__ccfg+0x36466c>
    3a10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a14:	00170213 	andseq	r0, r7, r3, lsl r2
    3a18:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3a1c:	0b3a0e03 	bleq	e87230 <__ccfg+0xe67288>
    3a20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a24:	00001802 	andeq	r1, r0, r2, lsl #16
    3a28:	0300340f 	movweq	r3, #1039	; 0x40f
    3a2c:	3b0b3a0e 	blcc	2d226c <__ccfg+0x2b22c4>
    3a30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3a34:	10000017 	andne	r0, r0, r7, lsl r0
    3a38:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a3c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3a40:	0b590b58 	bleq	16467a8 <__ccfg+0x1626800>
    3a44:	00001301 	andeq	r1, r0, r1, lsl #6
    3a48:	31000511 	tstcc	r0, r1, lsl r5
    3a4c:	12000013 	andne	r0, r0, #19
    3a50:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3a54:	34130000 	ldrcc	r0, [r3], #-0
    3a58:	02133100 	andseq	r3, r3, #0, 2
    3a5c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    3a60:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a64:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3a68:	0b590b58 	bleq	16467d0 <__ccfg+0x1626828>
    3a6c:	0b150000 	bleq	543a74 <__ccfg+0x523acc>
    3a70:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3a74:	16000006 	strne	r0, [r0], -r6
    3a78:	13310034 	teqne	r1, #52	; 0x34
    3a7c:	00001702 	andeq	r1, r0, r2, lsl #14
    3a80:	3f012e17 	svccc	0x00012e17
    3a84:	3a0e0319 	bcc	3846f0 <__ccfg+0x364748>
    3a88:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3a8c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3a90:	97184006 	ldrls	r4, [r8, -r6]
    3a94:	13011942 	movwne	r1, #6466	; 0x1942
    3a98:	1d180000 	ldcne	0, cr0, [r8, #-0]
    3a9c:	11133101 	tstne	r3, r1, lsl #2
    3aa0:	58061201 	stmdapl	r6, {r0, r9, ip}
    3aa4:	010b590b 	tsteq	fp, fp, lsl #18
    3aa8:	19000013 	stmdbne	r0, {r0, r1, r4}
    3aac:	01018289 	smlabbeq	r1, r9, r2, r8
    3ab0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3ab4:	8a1a0000 	bhi	683abc <__ccfg+0x663b14>
    3ab8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3abc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3ac0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    3ac4:	03193f01 	tsteq	r9, #1, 30
    3ac8:	3b0b3a0e 	blcc	2d2308 <__ccfg+0x2b2360>
    3acc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3ad0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3ad4:	97184006 	ldrls	r4, [r8, -r6]
    3ad8:	13011942 	movwne	r1, #6466	; 0x1942
    3adc:	051c0000 	ldreq	r0, [ip, #-0]
    3ae0:	3a0e0300 	bcc	3846e8 <__ccfg+0x364740>
    3ae4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ae8:	00170213 	andseq	r0, r7, r3, lsl r2
    3aec:	00341d00 	eorseq	r1, r4, r0, lsl #26
    3af0:	0b3a0e03 	bleq	e87304 <__ccfg+0xe6735c>
    3af4:	1349053b 	movtne	r0, #38203	; 0x953b
    3af8:	00001702 	andeq	r1, r0, r2, lsl #14
    3afc:	31012e1e 	tstcc	r1, lr, lsl lr
    3b00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3b04:	97184006 	ldrls	r4, [r8, -r6]
    3b08:	13011942 	movwne	r1, #6466	; 0x1942
    3b0c:	051f0000 	ldreq	r0, [pc, #-0]	; 3b14 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x14>
    3b10:	02133100 	andseq	r3, r3, #0, 2
    3b14:	20000017 	andcs	r0, r0, r7, lsl r0
    3b18:	13310034 	teqne	r1, #52	; 0x34
    3b1c:	1d210000 	stcne	0, cr0, [r1, #-0]
    3b20:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3b24:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3b28:	0105590b 	tsteq	r5, fp, lsl #18
    3b2c:	22000013 	andcs	r0, r0, #19
    3b30:	01018289 	smlabbeq	r1, r9, r2, r8
    3b34:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3b38:	00001301 	andeq	r1, r0, r1, lsl #6
    3b3c:	01828923 	orreq	r8, r2, r3, lsr #18
    3b40:	31011100 	mrscc	r1, (UNDEF: 17)
    3b44:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3b48:	01018289 	smlabbeq	r1, r9, r2, r8
    3b4c:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3b50:	00130118 	andseq	r0, r3, r8, lsl r1
    3b54:	001d2500 	andseq	r2, sp, r0, lsl #10
    3b58:	01111331 	tsteq	r1, r1, lsr r3
    3b5c:	0b580612 	bleq	16053ac <__ccfg+0x15e5404>
    3b60:	00000559 	andeq	r0, r0, r9, asr r5
    3b64:	01828926 	orreq	r8, r2, r6, lsr #18
    3b68:	01011101 	tsteq	r1, r1, lsl #2
    3b6c:	27000013 	smladcs	r0, r3, r0, r0
    3b70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3b74:	0b3a0e03 	bleq	e87388 <__ccfg+0xe673e0>
    3b78:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3b7c:	1301193c 	movwne	r1, #6460	; 0x193c
    3b80:	05280000 	streq	r0, [r8, #-0]!
    3b84:	00134900 	andseq	r4, r3, r0, lsl #18
    3b88:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    3b8c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3b90:	0b3b0b3a 	bleq	ec6880 <__ccfg+0xea68d8>
    3b94:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3b98:	00001301 	andeq	r1, r0, r1, lsl #6
    3b9c:	3f012e2a 	svccc	0x00012e2a
    3ba0:	3a0e0319 	bcc	38480c <__ccfg+0x364864>
    3ba4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3ba8:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3bac:	00000019 	andeq	r0, r0, r9, lsl r0
    3bb0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3bb4:	030b130e 	movweq	r1, #45838	; 0xb30e
    3bb8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3bbc:	10011117 	andne	r1, r1, r7, lsl r1
    3bc0:	02000017 	andeq	r0, r0, #23
    3bc4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3bc8:	0b3b0b3a 	bleq	ec68b8 <__ccfg+0xea6910>
    3bcc:	00001349 	andeq	r1, r0, r9, asr #6
    3bd0:	0b002403 	bleq	cbe4 <__exidx_end+0x6f24>
    3bd4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3bd8:	0400000e 	streq	r0, [r0], #-14
    3bdc:	0b0b0024 	bleq	2c3c74 <__ccfg+0x2a3ccc>
    3be0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3be4:	0f050000 	svceq	0x00050000
    3be8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3bec:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3bf0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3bf4:	15070000 	strne	r0, [r7, #-0]
    3bf8:	01192701 	tsteq	r9, r1, lsl #14
    3bfc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3c00:	13490005 	movtne	r0, #36869	; 0x9005
    3c04:	15090000 	strne	r0, [r9, #-0]
    3c08:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3c0c:	00130113 	andseq	r0, r3, r3, lsl r1
    3c10:	00150a00 	andseq	r0, r5, r0, lsl #20
    3c14:	13491927 	movtne	r1, #39207	; 0x9927
    3c18:	130b0000 	movwne	r0, #45056	; 0xb000
    3c1c:	3a0b0b01 	bcc	2c6828 <__ccfg+0x2a6880>
    3c20:	010b3b0b 	tsteq	fp, fp, lsl #22
    3c24:	0c000013 	stceq	0, cr0, [r0], {19}
    3c28:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3c2c:	0b3b0b3a 	bleq	ec691c <__ccfg+0xea6974>
    3c30:	0b381349 	bleq	e0895c <__ccfg+0xde89b4>
    3c34:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3c38:	3a0e0301 	bcc	384844 <__ccfg+0x36489c>
    3c3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3c40:	010b2019 	tsteq	fp, r9, lsl r0
    3c44:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3c48:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c50:	00001349 	andeq	r1, r0, r9, asr #6
    3c54:	03002e0f 	movweq	r2, #3599	; 0xe0f
    3c58:	3b0b3a0e 	blcc	2d2498 <__ccfg+0x2b24f0>
    3c5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3c60:	000b2013 	andeq	r2, fp, r3, lsl r0
    3c64:	002e1000 	eoreq	r1, lr, r0
    3c68:	0b3a0e03 	bleq	e8747c <__ccfg+0xe674d4>
    3c6c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3c70:	00000b20 	andeq	r0, r0, r0, lsr #22
    3c74:	03012e11 	movweq	r2, #7697	; 0x1e11
    3c78:	3b0b3a0e 	blcc	2d24b8 <__ccfg+0x2b2510>
    3c7c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3c80:	010b2013 	tsteq	fp, r3, lsl r0
    3c84:	12000013 	andne	r0, r0, #19
    3c88:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3c8c:	0b3b0b3a 	bleq	ec697c <__ccfg+0xea69d4>
    3c90:	00001349 	andeq	r1, r0, r9, asr #6
    3c94:	03003413 	movweq	r3, #1043	; 0x413
    3c98:	3b0b3a0e 	blcc	2d24d8 <__ccfg+0x2b2530>
    3c9c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3ca0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    3ca4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3ca8:	0b3b0b3a 	bleq	ec6998 <__ccfg+0xea69f0>
    3cac:	01111927 	tsteq	r1, r7, lsr #18
    3cb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3cb4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3cb8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3cbc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3cc0:	0b3b0b3a 	bleq	ec69b0 <__ccfg+0xea6a08>
    3cc4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3cc8:	34160000 	ldrcc	r0, [r6], #-0
    3ccc:	3a0e0300 	bcc	3848d4 <__ccfg+0x36492c>
    3cd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cd4:	00051c13 	andeq	r1, r5, r3, lsl ip
    3cd8:	011d1700 	tsteq	sp, r0, lsl #14
    3cdc:	01521331 	cmpeq	r2, r1, lsr r3
    3ce0:	0b581755 	bleq	1609a3c <__ccfg+0x15e9a94>
    3ce4:	13010b59 	movwne	r0, #7001	; 0x1b59
    3ce8:	05180000 	ldreq	r0, [r8, #-0]
    3cec:	1c133100 	ldfnes	f3, [r3], {-0}
    3cf0:	1900000b 	stmdbne	r0, {r0, r1, r3}
    3cf4:	1331001d 	teqne	r1, #29
    3cf8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3cfc:	0b590b58 	bleq	1646a64 <__ccfg+0x1626abc>
    3d00:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3d04:	11133101 	tstne	r3, r1, lsl #2
    3d08:	58061201 	stmdapl	r6, {r0, r9, ip}
    3d0c:	010b590b 	tsteq	fp, fp, lsl #18
    3d10:	1b000013 	blne	3d64 <NOROM_RFCRTrim+0x6c>
    3d14:	00018289 	andeq	r8, r1, r9, lsl #5
    3d18:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3d1c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    3d20:	11010182 	smlabbne	r1, r2, r1, r0
    3d24:	00130101 	andseq	r0, r3, r1, lsl #2
    3d28:	828a1d00 	addhi	r1, sl, #0, 26
    3d2c:	18020001 	stmdane	r2, {r0}
    3d30:	00184291 	mulseq	r8, r1, r2
    3d34:	82891e00 	addhi	r1, r9, #0, 28
    3d38:	01110101 	tsteq	r1, r1, lsl #2
    3d3c:	13011331 	movwne	r1, #4913	; 0x1331
    3d40:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    3d44:	11010182 	smlabbne	r1, r2, r1, r0
    3d48:	20000001 	andcs	r0, r0, r1
    3d4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3d50:	0b3a0e03 	bleq	e87564 <__ccfg+0xe675bc>
    3d54:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3d58:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d5c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3d60:	00130119 	andseq	r0, r3, r9, lsl r1
    3d64:	00052100 	andeq	r2, r5, r0, lsl #2
    3d68:	0b3a0e03 	bleq	e8757c <__ccfg+0xe675d4>
    3d6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d70:	00001702 	andeq	r1, r0, r2, lsl #14
    3d74:	03003422 	movweq	r3, #1058	; 0x422
    3d78:	3b0b3a0e 	blcc	2d25b8 <__ccfg+0x2b2610>
    3d7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3d80:	23000018 	movwcs	r0, #24
    3d84:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3d88:	0b3b0b3a 	bleq	ec6a78 <__ccfg+0xea6ad0>
    3d8c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3d90:	34240000 	strtcc	r0, [r4], #-0
    3d94:	3a080300 	bcc	20499c <__ccfg+0x1e49f4>
    3d98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3d9c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    3da0:	0111010b 	tsteq	r1, fp, lsl #2
    3da4:	13010612 	movwne	r0, #5650	; 0x1612
    3da8:	34260000 	strtcc	r0, [r6], #-0
    3dac:	3a0e0300 	bcc	3849b4 <__ccfg+0x364a0c>
    3db0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3db4:	00170213 	andseq	r0, r7, r3, lsl r2
    3db8:	011d2700 	tsteq	sp, r0, lsl #14
    3dbc:	01111331 	tsteq	r1, r1, lsr r3
    3dc0:	0b580612 	bleq	1605610 <__ccfg+0x15e5668>
    3dc4:	13010559 	movwne	r0, #5465	; 0x1559
    3dc8:	05280000 	streq	r0, [r8, #-0]!
    3dcc:	00133100 	andseq	r3, r3, r0, lsl #2
    3dd0:	010b2900 	tsteq	fp, r0, lsl #18
    3dd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3dd8:	342a0000 	strtcc	r0, [sl], #-0
    3ddc:	02133100 	andseq	r3, r3, #0, 2
    3de0:	2b000017 	blcs	3e44 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>
    3de4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3de8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3dec:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3df0:	00001301 	andeq	r1, r0, r1, lsl #6
    3df4:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    3df8:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    3dfc:	13490026 	movtne	r0, #36902	; 0x9026
    3e00:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    3e04:	03193f00 	tsteq	r9, #0, 30
    3e08:	3b0b3a0e 	blcc	2d2648 <__ccfg+0x2b26a0>
    3e0c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3e10:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e14:	97184006 	ldrls	r4, [r8, -r6]
    3e18:	00001942 	andeq	r1, r0, r2, asr #18
    3e1c:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    3e20:	00130113 	andseq	r0, r3, r3, lsl r1
    3e24:	00213000 	eoreq	r3, r1, r0
    3e28:	0b2f1349 	bleq	bc8b54 <__ccfg+0xba8bac>
    3e2c:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    3e30:	03193f01 	tsteq	r9, #1, 30
    3e34:	3b0b3a0e 	blcc	2d2674 <__ccfg+0x2b26cc>
    3e38:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3e3c:	00130119 	andseq	r0, r3, r9, lsl r1
    3e40:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    3e44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3e48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3e4c:	13491927 	movtne	r1, #39207	; 0x9927
    3e50:	1301193c 	movwne	r1, #6460	; 0x193c
    3e54:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    3e58:	03193f00 	tsteq	r9, #0, 30
    3e5c:	3b0b3a0e 	blcc	2d269c <__ccfg+0x2b26f4>
    3e60:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3e64:	00193c13 	andseq	r3, r9, r3, lsl ip
    3e68:	11010000 	mrsne	r0, (UNDEF: 1)
    3e6c:	130e2501 	movwne	r2, #58625	; 0xe501
    3e70:	1b0e030b 	blne	384aa4 <__ccfg+0x364afc>
    3e74:	1117550e 	tstne	r7, lr, lsl #10
    3e78:	00171001 	andseq	r1, r7, r1
    3e7c:	00240200 	eoreq	r0, r4, r0, lsl #4
    3e80:	0b3e0b0b 	bleq	f86ab4 <__ccfg+0xf66b0c>
    3e84:	00000e03 	andeq	r0, r0, r3, lsl #28
    3e88:	03001603 	movweq	r1, #1539	; 0x603
    3e8c:	3b0b3a0e 	blcc	2d26cc <__ccfg+0x2b2724>
    3e90:	0013490b 	andseq	r4, r3, fp, lsl #18
    3e94:	00240400 	eoreq	r0, r4, r0, lsl #8
    3e98:	0b3e0b0b 	bleq	f86acc <__ccfg+0xf66b24>
    3e9c:	00000803 	andeq	r0, r0, r3, lsl #16
    3ea0:	0b010405 	bleq	44ebc <__ccfg+0x24f14>
    3ea4:	3b0b3a0b 	blcc	2d26d8 <__ccfg+0x2b2730>
    3ea8:	0013010b 	andseq	r0, r3, fp, lsl #2
    3eac:	00280600 	eoreq	r0, r8, r0, lsl #12
    3eb0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    3eb4:	04070000 	streq	r0, [r7], #-0
    3eb8:	3a0b0b01 	bcc	2c6ac4 <__ccfg+0x2a6b1c>
    3ebc:	01053b0b 	tsteq	r5, fp, lsl #22
    3ec0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3ec4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3ec8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3ecc:	00001349 	andeq	r1, r0, r9, asr #6
    3ed0:	03002e09 	movweq	r2, #3593	; 0xe09
    3ed4:	3b0b3a0e 	blcc	2d2714 <__ccfg+0x2b276c>
    3ed8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3edc:	000b2013 	andeq	r2, fp, r3, lsl r0
    3ee0:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    3ee4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3ee8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3eec:	13491927 	movtne	r1, #39207	; 0x9927
    3ef0:	13010b20 	movwne	r0, #6944	; 0x1b20
    3ef4:	340b0000 	strcc	r0, [fp], #-0
    3ef8:	3a0e0300 	bcc	384b00 <__ccfg+0x364b58>
    3efc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f00:	0c000013 	stceq	0, cr0, [r0], {19}
    3f04:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3f08:	0b3a0e03 	bleq	e8771c <__ccfg+0xe67774>
    3f0c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3f10:	01111349 	tsteq	r1, r9, asr #6
    3f14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3f18:	00194297 	mulseq	r9, r7, r2
    3f1c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3f20:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3f24:	0b3b0b3a 	bleq	ec6c14 <__ccfg+0xea6c6c>
    3f28:	13491927 	movtne	r1, #39207	; 0x9927
    3f2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3f30:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3f34:	00130119 	andseq	r0, r3, r9, lsl r1
    3f38:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3f3c:	0b3a0e03 	bleq	e87750 <__ccfg+0xe677a8>
    3f40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f44:	00001702 	andeq	r1, r0, r2, lsl #14
    3f48:	31012e0f 	tstcc	r1, pc, lsl #28
    3f4c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f50:	97184006 	ldrls	r4, [r8, -r6]
    3f54:	13011942 	movwne	r1, #6466	; 0x1942
    3f58:	34100000 	ldrcc	r0, [r0], #-0
    3f5c:	02133100 	andseq	r3, r3, #0, 2
    3f60:	11000017 	tstne	r0, r7, lsl r0
    3f64:	0111010b 	tsteq	r1, fp, lsl #2
    3f68:	00000612 	andeq	r0, r0, r2, lsl r6
    3f6c:	31003412 	tstcc	r0, r2, lsl r4
    3f70:	13000013 	movwne	r0, #19
    3f74:	1331001d 	teqne	r1, #29
    3f78:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3f7c:	0b590b58 	bleq	1646ce4 <__ccfg+0x1626d3c>
    3f80:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3f84:	03193f01 	tsteq	r9, #1, 30
    3f88:	3b0b3a0e 	blcc	2d27c8 <__ccfg+0x2b2820>
    3f8c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3f90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f94:	97184006 	ldrls	r4, [r8, -r6]
    3f98:	13011942 	movwne	r1, #6466	; 0x1942
    3f9c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    3fa0:	11000182 	smlabbne	r0, r2, r1, r0
    3fa4:	00133101 	andseq	r3, r3, r1, lsl #2
    3fa8:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    3fac:	0b3a0e03 	bleq	e877c0 <__ccfg+0xe67818>
    3fb0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3fb4:	0b201349 	bleq	808ce0 <__ccfg+0x7e8d38>
    3fb8:	00001301 	andeq	r1, r0, r1, lsl #6
    3fbc:	03003417 	movweq	r3, #1047	; 0x417
    3fc0:	3b0b3a0e 	blcc	2d2800 <__ccfg+0x2b2858>
    3fc4:	00134905 	andseq	r4, r3, r5, lsl #18
    3fc8:	00341800 	eorseq	r1, r4, r0, lsl #16
    3fcc:	0b3a0e03 	bleq	e877e0 <__ccfg+0xe67838>
    3fd0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3fd4:	00001802 	andeq	r1, r0, r2, lsl #16
    3fd8:	31001d19 	tstcc	r0, r9, lsl sp
    3fdc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3fe0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3fe4:	1a00000b 	bne	4018 <NOROM_SetupSetVddrLevel+0x54>
    3fe8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3fec:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3ff0:	0b590b58 	bleq	1646d58 <__ccfg+0x1626db0>
    3ff4:	00001301 	andeq	r1, r0, r1, lsl #6
    3ff8:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    3ffc:	1c000017 	stcne	0, cr0, [r0], {23}
    4000:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4004:	0b3a0e03 	bleq	e87818 <__ccfg+0xe67870>
    4008:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    400c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4010:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    4014:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    4018:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    401c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4020:	0b590b58 	bleq	1646d88 <__ccfg+0x1626de0>
    4024:	00001301 	andeq	r1, r0, r1, lsl #6
    4028:	31011d1e 	tstcc	r1, lr, lsl sp
    402c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4030:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    4034:	0000000b 	andeq	r0, r0, fp
    4038:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    403c:	030b130e 	movweq	r1, #45838	; 0xb30e
    4040:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    4044:	10011117 	andne	r1, r1, r7, lsl r1
    4048:	02000017 	andeq	r0, r0, #23
    404c:	0b0b0024 	bleq	2c40e4 <__ccfg+0x2a413c>
    4050:	0e030b3e 	vmoveq.16	d3[0], r0
    4054:	16030000 	strne	r0, [r3], -r0
    4058:	3a0e0300 	bcc	384c60 <__ccfg+0x364cb8>
    405c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4060:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4064:	0b0b0024 	bleq	2c40fc <__ccfg+0x2a4154>
    4068:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    406c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    4070:	3a0e0301 	bcc	384c7c <__ccfg+0x364cd4>
    4074:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    4078:	010b2019 	tsteq	fp, r9, lsl r0
    407c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4080:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    4084:	0b3b0b3a 	bleq	ec6d74 <__ccfg+0xea6dcc>
    4088:	00001349 	andeq	r1, r0, r9, asr #6
    408c:	03003407 	movweq	r3, #1031	; 0x407
    4090:	3b0b3a0e 	blcc	2d28d0 <__ccfg+0x2b2928>
    4094:	0013490b 	andseq	r4, r3, fp, lsl #18
    4098:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    409c:	0b3a0e03 	bleq	e878b0 <__ccfg+0xe67908>
    40a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    40a4:	0b201349 	bleq	808dd0 <__ccfg+0x7e8e28>
    40a8:	00001301 	andeq	r1, r0, r1, lsl #6
    40ac:	31012e09 	tstcc	r1, r9, lsl #28
    40b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    40b4:	97184006 	ldrls	r4, [r8, -r6]
    40b8:	13011942 	movwne	r1, #6466	; 0x1942
    40bc:	050a0000 	streq	r0, [sl, #-0]
    40c0:	02133100 	andseq	r3, r3, #0, 2
    40c4:	0b000017 	bleq	4128 <NOROM_SetupGetTrimForAnabypassValue1+0x3c>
    40c8:	13310034 	teqne	r1, #52	; 0x34
    40cc:	00001702 	andeq	r1, r0, r2, lsl #14
    40d0:	3100050c 	tstcc	r0, ip, lsl #10
    40d4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    40d8:	82890d00 	addhi	r0, r9, #0, 26
    40dc:	01110001 	tsteq	r1, r1
    40e0:	00001331 	andeq	r1, r0, r1, lsr r3
    40e4:	0182890e 	orreq	r8, r2, lr, lsl #18
    40e8:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    40ec:	13311942 	teqne	r1, #1081344	; 0x108000
    40f0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    40f4:	03193f01 	tsteq	r9, #1, 30
    40f8:	3b0b3a0e 	blcc	2d2938 <__ccfg+0x2b2990>
    40fc:	11192705 	tstne	r9, r5, lsl #14
    4100:	40061201 	andmi	r1, r6, r1, lsl #4
    4104:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    4108:	00001301 	andeq	r1, r0, r1, lsl #6
    410c:	03000510 	movweq	r0, #1296	; 0x510
    4110:	3b0b3a0e 	blcc	2d2950 <__ccfg+0x2b29a8>
    4114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4118:	11000017 	tstne	r0, r7, lsl r0
    411c:	01018289 	smlabbeq	r1, r9, r2, r8
    4120:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    4124:	00133119 	andseq	r3, r3, r9, lsl r1
    4128:	828a1200 	addhi	r1, sl, #0, 4
    412c:	18020001 	stmdane	r2, {r0}
    4130:	00184291 	mulseq	r8, r1, r2
    4134:	00341300 	eorseq	r1, r4, r0, lsl #6
    4138:	0b3a0e03 	bleq	e8794c <__ccfg+0xe679a4>
    413c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4140:	00001702 	andeq	r1, r0, r2, lsl #14
    4144:	3f012e14 	svccc	0x00012e14
    4148:	3a0e0319 	bcc	384db4 <__ccfg+0x364e0c>
    414c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    4150:	11134919 	tstne	r3, r9, lsl r9
    4154:	40061201 	andmi	r1, r6, r1, lsl #4
    4158:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    415c:	00001301 	andeq	r1, r0, r1, lsl #6
    4160:	31011d15 	tstcc	r1, r5, lsl sp
    4164:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4168:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    416c:	1600000b 	strne	r0, [r0], -fp
    4170:	0111010b 	tsteq	r1, fp, lsl #2
    4174:	00000612 	andeq	r0, r0, r2, lsl r6
    4178:	3f002e17 	svccc	0x00002e17
    417c:	3a0e0319 	bcc	384de8 <__ccfg+0x364e40>
    4180:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    4184:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    4188:	00000019 	andeq	r0, r0, r9, lsl r0
    418c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4190:	030b130e 	movweq	r1, #45838	; 0xb30e
    4194:	110e1b0e 	tstne	lr, lr, lsl #22
    4198:	10061201 	andne	r1, r6, r1, lsl #4
    419c:	02000017 	andeq	r0, r0, #23
    41a0:	0b0b0024 	bleq	2c4238 <__ccfg+0x2a4290>
    41a4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    41a8:	16030000 	strne	r0, [r3], -r0
    41ac:	3a0e0300 	bcc	384db4 <__ccfg+0x364e0c>
    41b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    41b8:	00240400 	eoreq	r0, r4, r0, lsl #8
    41bc:	0b3e0b0b 	bleq	f86df0 <__ccfg+0xf66e48>
    41c0:	00000e03 	andeq	r0, r0, r3, lsl #28
    41c4:	03001605 	movweq	r1, #1541	; 0x605
    41c8:	3b0b3a0e 	blcc	2d2a08 <__ccfg+0x2b2a60>
    41cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    41d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    41d4:	13490026 	movtne	r0, #36902	; 0x9026
    41d8:	17070000 	strne	r0, [r7, -r0]
    41dc:	3a0b0b01 	bcc	2c6de8 <__ccfg+0x2a6e40>
    41e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41e4:	0013010b 	andseq	r0, r3, fp, lsl #2
    41e8:	000d0800 	andeq	r0, sp, r0, lsl #16
    41ec:	0b3a0e03 	bleq	e87a00 <__ccfg+0xe67a58>
    41f0:	0b390b3b 	bleq	e46ee4 <__ccfg+0xe26f3c>
    41f4:	00001349 	andeq	r1, r0, r9, asr #6
    41f8:	49010109 	stmdbmi	r1, {r0, r3, r8}
    41fc:	00130113 	andseq	r0, r3, r3, lsl r1
    4200:	00210a00 	eoreq	r0, r1, r0, lsl #20
    4204:	0b2f1349 	bleq	bc8f30 <__ccfg+0xba8f88>
    4208:	130b0000 	movwne	r0, #45056	; 0xb000
    420c:	3a0b0b01 	bcc	2c6e18 <__ccfg+0x2a6e70>
    4210:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4214:	0013010b 	andseq	r0, r3, fp, lsl #2
    4218:	000d0c00 	andeq	r0, sp, r0, lsl #24
    421c:	0b3a0e03 	bleq	e87a30 <__ccfg+0xe67a88>
    4220:	0b390b3b 	bleq	e46f14 <__ccfg+0xe26f6c>
    4224:	0b381349 	bleq	e08f50 <__ccfg+0xde8fa8>
    4228:	0f0d0000 	svceq	0x000d0000
    422c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4230:	00370e00 	eorseq	r0, r7, r0, lsl #28
    4234:	00001349 	andeq	r1, r0, r9, asr #6
    4238:	0301130f 	movweq	r1, #4879	; 0x130f
    423c:	3a0b0b0e 	bcc	2c6e7c <__ccfg+0x2a6ed4>
    4240:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4244:	0013010b 	andseq	r0, r3, fp, lsl #2
    4248:	000d1000 	andeq	r1, sp, r0
    424c:	0b3a0803 	bleq	e86260 <__ccfg+0xe662b8>
    4250:	0b390b3b 	bleq	e46f44 <__ccfg+0xe26f9c>
    4254:	0b381349 	bleq	e08f80 <__ccfg+0xde8fd8>
    4258:	0f110000 	svceq	0x00110000
    425c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4260:	12000013 	andne	r0, r0, #19
    4264:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4268:	0b3a050b 	bleq	e8569c <__ccfg+0xe656f4>
    426c:	0b390b3b 	bleq	e46f60 <__ccfg+0xe26fb8>
    4270:	00001301 	andeq	r1, r0, r1, lsl #6
    4274:	03000d13 	movweq	r0, #3347	; 0xd13
    4278:	3b0b3a0e 	blcc	2d2ab8 <__ccfg+0x2b2b10>
    427c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4280:	00053813 	andeq	r3, r5, r3, lsl r8
    4284:	00151400 	andseq	r1, r5, r0, lsl #8
    4288:	00001927 	andeq	r1, r0, r7, lsr #18
    428c:	27011515 	smladcs	r1, r5, r5, r1
    4290:	01134919 	tsteq	r3, r9, lsl r9
    4294:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4298:	13490005 	movtne	r0, #36869	; 0x9005
    429c:	13170000 	tstne	r7, #0
    42a0:	0b0e0301 	bleq	384eac <__ccfg+0x364f04>
    42a4:	3b0b3a05 	blcc	2d2ac0 <__ccfg+0x2b2b18>
    42a8:	010b3905 	tsteq	fp, r5, lsl #18
    42ac:	18000013 	stmdane	r0, {r0, r1, r4}
    42b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    42b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    42bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    42c0:	03000d19 	movweq	r0, #3353	; 0xd19
    42c4:	3b0b3a0e 	blcc	2d2b04 <__ccfg+0x2b2b5c>
    42c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42cc:	00053813 	andeq	r3, r5, r3, lsl r8
    42d0:	01131a00 	tsteq	r3, r0, lsl #20
    42d4:	0b0b0e03 	bleq	2c7ae8 <__ccfg+0x2a7b40>
    42d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42dc:	13010b39 	movwne	r0, #6969	; 0x1b39
    42e0:	131b0000 	tstne	fp, #0
    42e4:	3a0b0b01 	bcc	2c6ef0 <__ccfg+0x2a6f48>
    42e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    42ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    42f0:	01171c00 	tsteq	r7, r0, lsl #24
    42f4:	0b3a0b0b 	bleq	e86f28 <__ccfg+0xe66f80>
    42f8:	0b39053b 	bleq	e457ec <__ccfg+0xe25844>
    42fc:	00001301 	andeq	r1, r0, r1, lsl #6
    4300:	03000d1d 	movweq	r0, #3357	; 0xd1d
    4304:	3b0b3a0e 	blcc	2d2b44 <__ccfg+0x2b2b9c>
    4308:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    430c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4310:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4314:	00001301 	andeq	r1, r0, r1, lsl #6
    4318:	0300341f 	movweq	r3, #1055	; 0x41f
    431c:	3b0b3a0e 	blcc	2d2b5c <__ccfg+0x2b2bb4>
    4320:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4324:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4328:	20000019 	andcs	r0, r0, r9, lsl r0
    432c:	00000026 	andeq	r0, r0, r6, lsr #32
    4330:	03003421 	movweq	r3, #1057	; 0x421
    4334:	3b0b3a0e 	blcc	2d2b74 <__ccfg+0x2b2bcc>
    4338:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    433c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4340:	22000019 	andcs	r0, r0, #25
    4344:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4348:	0b3a0e03 	bleq	e87b5c <__ccfg+0xe67bb4>
    434c:	0b390b3b 	bleq	e47040 <__ccfg+0xe27098>
    4350:	13491927 	movtne	r1, #39207	; 0x9927
    4354:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    435c:	00130119 	andseq	r0, r3, r9, lsl r1
    4360:	00052300 	andeq	r2, r5, r0, lsl #6
    4364:	0b3a0e03 	bleq	e87b78 <__ccfg+0xe67bd0>
    4368:	0b390b3b 	bleq	e4705c <__ccfg+0xe270b4>
    436c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    4370:	05240000 	streq	r0, [r4, #-0]!
    4374:	3a0e0300 	bcc	384f7c <__ccfg+0x364fd4>
    4378:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    437c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4380:	1742b717 	smlaldne	fp, r2, r7, r7
    4384:	34250000 	strtcc	r0, [r5], #-0
    4388:	3a080300 	bcc	204f90 <__ccfg+0x1e4fe8>
    438c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4390:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4394:	1742b717 	smlaldne	fp, r2, r7, r7
    4398:	34260000 	strtcc	r0, [r6], #-0
    439c:	3a0e0300 	bcc	384fa4 <__ccfg+0x364ffc>
    43a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    43a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    43a8:	1742b717 	smlaldne	fp, r2, r7, r7
    43ac:	01000000 	mrseq	r0, (UNDEF: 0)
    43b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    43b4:	0e030b13 	vmoveq.32	d3[0], r0
    43b8:	01110e1b 	tsteq	r1, fp, lsl lr
    43bc:	17100612 			; <UNDEFINED> instruction: 0x17100612
    43c0:	24020000 	strcs	r0, [r2], #-0
    43c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    43c8:	000e030b 	andeq	r0, lr, fp, lsl #6
    43cc:	00240300 	eoreq	r0, r4, r0, lsl #6
    43d0:	0b3e0b0b 	bleq	f87004 <__ccfg+0xf6705c>
    43d4:	00000803 	andeq	r0, r0, r3, lsl #16
    43d8:	03001604 	movweq	r1, #1540	; 0x604
    43dc:	3b0b3a0e 	blcc	2d2c1c <__ccfg+0x2b2c74>
    43e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    43e4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    43e8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    43ec:	0b3b0b3a 	bleq	ec70dc <__ccfg+0xea7134>
    43f0:	13490b39 	movtne	r0, #39737	; 0x9b39
    43f4:	17060000 	strne	r0, [r6, -r0]
    43f8:	3a0b0b01 	bcc	2c7004 <__ccfg+0x2a705c>
    43fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4400:	0013010b 	andseq	r0, r3, fp, lsl #2
    4404:	000d0700 	andeq	r0, sp, r0, lsl #14
    4408:	0b3a0e03 	bleq	e87c1c <__ccfg+0xe67c74>
    440c:	0b390b3b 	bleq	e47100 <__ccfg+0xe27158>
    4410:	00001349 	andeq	r1, r0, r9, asr #6
    4414:	49010108 	stmdbmi	r1, {r3, r8}
    4418:	00130113 	andseq	r0, r3, r3, lsl r1
    441c:	00210900 	eoreq	r0, r1, r0, lsl #18
    4420:	0b2f1349 	bleq	bc914c <__ccfg+0xba91a4>
    4424:	130a0000 	movwne	r0, #40960	; 0xa000
    4428:	3a0b0b01 	bcc	2c7034 <__ccfg+0x2a708c>
    442c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4430:	0013010b 	andseq	r0, r3, fp, lsl #2
    4434:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4438:	0b3a0e03 	bleq	e87c4c <__ccfg+0xe67ca4>
    443c:	0b390b3b 	bleq	e47130 <__ccfg+0xe27188>
    4440:	0b381349 	bleq	e0916c <__ccfg+0xde91c4>
    4444:	0f0c0000 	svceq	0x000c0000
    4448:	000b0b00 	andeq	r0, fp, r0, lsl #22
    444c:	01130d00 	tsteq	r3, r0, lsl #26
    4450:	0b0b0e03 	bleq	2c7c64 <__ccfg+0x2a7cbc>
    4454:	0b3b0b3a 	bleq	ec7144 <__ccfg+0xea719c>
    4458:	13010b39 	movwne	r0, #6969	; 0x1b39
    445c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4460:	3a080300 	bcc	205068 <__ccfg+0x1e50c0>
    4464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4468:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    446c:	0f00000b 	svceq	0x0000000b
    4470:	0b0b000f 	bleq	2c44b4 <__ccfg+0x2a450c>
    4474:	00001349 	andeq	r1, r0, r9, asr #6
    4478:	03011310 	movweq	r1, #4880	; 0x1310
    447c:	3a050b0e 	bcc	1470bc <__ccfg+0x127114>
    4480:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4484:	0013010b 	andseq	r0, r3, fp, lsl #2
    4488:	000d1100 	andeq	r1, sp, r0, lsl #2
    448c:	0b3a0e03 	bleq	e87ca0 <__ccfg+0xe67cf8>
    4490:	0b390b3b 	bleq	e47184 <__ccfg+0xe271dc>
    4494:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4498:	15120000 	ldrne	r0, [r2, #-0]
    449c:	00192700 	andseq	r2, r9, r0, lsl #14
    44a0:	01151300 	tsteq	r5, r0, lsl #6
    44a4:	13491927 	movtne	r1, #39207	; 0x9927
    44a8:	00001301 	andeq	r1, r0, r1, lsl #6
    44ac:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    44b0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    44b4:	13490026 	movtne	r0, #36902	; 0x9026
    44b8:	13160000 	tstne	r6, #0
    44bc:	0b0e0301 	bleq	3850c8 <__ccfg+0x365120>
    44c0:	3b0b3a05 	blcc	2d2cdc <__ccfg+0x2b2d34>
    44c4:	010b3905 	tsteq	fp, r5, lsl #18
    44c8:	17000013 	smladne	r0, r3, r0, r0
    44cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    44d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    44d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    44dc:	03000d18 	movweq	r0, #3352	; 0xd18
    44e0:	3b0b3a0e 	blcc	2d2d20 <__ccfg+0x2b2d78>
    44e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    44e8:	00053813 	andeq	r3, r5, r3, lsl r8
    44ec:	01131900 	tsteq	r3, r0, lsl #18
    44f0:	0b0b0e03 	bleq	2c7d04 <__ccfg+0x2a7d5c>
    44f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44f8:	13010b39 	movwne	r0, #6969	; 0x1b39
    44fc:	131a0000 	tstne	sl, #0
    4500:	3a0b0b01 	bcc	2c710c <__ccfg+0x2a7164>
    4504:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4508:	0013010b 	andseq	r0, r3, fp, lsl #2
    450c:	01171b00 	tsteq	r7, r0, lsl #22
    4510:	0b3a0b0b 	bleq	e87144 <__ccfg+0xe6719c>
    4514:	0b39053b 	bleq	e45a08 <__ccfg+0xe25a60>
    4518:	00001301 	andeq	r1, r0, r1, lsl #6
    451c:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4520:	3b0b3a0e 	blcc	2d2d60 <__ccfg+0x2b2db8>
    4524:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4528:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    452c:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4530:	0000193c 	andeq	r1, r0, ip, lsr r9
    4534:	2701151e 	smladcs	r1, lr, r5, r1
    4538:	00130119 	andseq	r0, r3, r9, lsl r1
    453c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4540:	0b3a0e03 	bleq	e87d54 <__ccfg+0xe67dac>
    4544:	0b39053b 	bleq	e45a38 <__ccfg+0xe25a90>
    4548:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    454c:	0000193c 	andeq	r1, r0, ip, lsr r9
    4550:	03003420 	movweq	r3, #1056	; 0x420
    4554:	3b0b3a0e 	blcc	2d2d94 <__ccfg+0x2b2dec>
    4558:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    455c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4560:	21000019 	tstcs	r0, r9, lsl r0
    4564:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4568:	0b3a0e03 	bleq	e87d7c <__ccfg+0xe67dd4>
    456c:	0b390b3b 	bleq	e47260 <__ccfg+0xe272b8>
    4570:	13491927 	movtne	r1, #39207	; 0x9927
    4574:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4578:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    457c:	00130119 	andseq	r0, r3, r9, lsl r1
    4580:	00342200 	eorseq	r2, r4, r0, lsl #4
    4584:	0b3a0e03 	bleq	e87d98 <__ccfg+0xe67df0>
    4588:	0b390b3b 	bleq	e4727c <__ccfg+0xe272d4>
    458c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4590:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4594:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    4598:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    459c:	0b3b0b3a 	bleq	ec728c <__ccfg+0xea72e4>
    45a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    45a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    45a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    45ac:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    45b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    45b4:	0b3b0b3a 	bleq	ec72a4 <__ccfg+0xea72fc>
    45b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    45bc:	00001802 	andeq	r1, r0, r2, lsl #16
    45c0:	01110100 	tsteq	r1, r0, lsl #2
    45c4:	0b130e25 	bleq	4c7e60 <__ccfg+0x4a7eb8>
    45c8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    45cc:	00001710 	andeq	r1, r0, r0, lsl r7
    45d0:	0b002402 	bleq	d5e0 <__exidx_end+0x7920>
    45d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    45d8:	03000008 	movweq	r0, #8
    45dc:	0b0b0024 	bleq	2c4674 <__ccfg+0x2a46cc>
    45e0:	0e030b3e 	vmoveq.16	d3[0], r0
    45e4:	16040000 	strne	r0, [r4], -r0
    45e8:	3a0e0300 	bcc	3851f0 <__ccfg+0x365248>
    45ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    45f0:	0013490b 	andseq	r4, r3, fp, lsl #18
    45f4:	00160500 	andseq	r0, r6, r0, lsl #10
    45f8:	0b3a0e03 	bleq	e87e0c <__ccfg+0xe67e64>
    45fc:	0b390b3b 	bleq	e472f0 <__ccfg+0xe27348>
    4600:	00001349 	andeq	r1, r0, r9, asr #6
    4604:	0b011706 	bleq	4a224 <__ccfg+0x2a27c>
    4608:	3b0b3a0b 	blcc	2d2e3c <__ccfg+0x2b2e94>
    460c:	010b390b 	tsteq	fp, fp, lsl #18
    4610:	07000013 	smladeq	r0, r3, r0, r0
    4614:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4618:	0b3b0b3a 	bleq	ec7308 <__ccfg+0xea7360>
    461c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4620:	01080000 	mrseq	r0, (UNDEF: 8)
    4624:	01134901 	tsteq	r3, r1, lsl #18
    4628:	09000013 	stmdbeq	r0, {r0, r1, r4}
    462c:	13490021 	movtne	r0, #36897	; 0x9021
    4630:	00000b2f 	andeq	r0, r0, pc, lsr #22
    4634:	0b01130a 	bleq	49264 <__ccfg+0x292bc>
    4638:	3b0b3a0b 	blcc	2d2e6c <__ccfg+0x2b2ec4>
    463c:	010b390b 	tsteq	fp, fp, lsl #18
    4640:	0b000013 	bleq	4694 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    4644:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4648:	0b3b0b3a 	bleq	ec7338 <__ccfg+0xea7390>
    464c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4650:	00000b38 	andeq	r0, r0, r8, lsr fp
    4654:	0b000f0c 	bleq	828c <__exidx_end+0x25cc>
    4658:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    465c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4660:	0b3a0b0b 	bleq	e87294 <__ccfg+0xe672ec>
    4664:	0b390b3b 	bleq	e47358 <__ccfg+0xe273b0>
    4668:	00001301 	andeq	r1, r0, r1, lsl #6
    466c:	03000d0e 	movweq	r0, #3342	; 0xd0e
    4670:	3b0b3a08 	blcc	2d2e98 <__ccfg+0x2b2ef0>
    4674:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4678:	000b3813 	andeq	r3, fp, r3, lsl r8
    467c:	000f0f00 	andeq	r0, pc, r0, lsl #30
    4680:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4684:	13100000 	tstne	r0, #0
    4688:	0b0e0301 	bleq	385294 <__ccfg+0x3652ec>
    468c:	3b0b3a05 	blcc	2d2ea8 <__ccfg+0x2b2f00>
    4690:	010b390b 	tsteq	fp, fp, lsl #18
    4694:	11000013 	tstne	r0, r3, lsl r0
    4698:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    469c:	0b3b0b3a 	bleq	ec738c <__ccfg+0xea73e4>
    46a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    46a4:	00000538 	andeq	r0, r0, r8, lsr r5
    46a8:	27001512 	smladcs	r0, r2, r5, r1
    46ac:	13000019 	movwne	r0, #25
    46b0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    46b4:	13011349 	movwne	r1, #4937	; 0x1349
    46b8:	05140000 	ldreq	r0, [r4, #-0]
    46bc:	00134900 	andseq	r4, r3, r0, lsl #18
    46c0:	00261500 	eoreq	r1, r6, r0, lsl #10
    46c4:	00001349 	andeq	r1, r0, r9, asr #6
    46c8:	03011316 	movweq	r1, #4886	; 0x1316
    46cc:	3a050b0e 	bcc	14730c <__ccfg+0x127364>
    46d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    46d8:	000d1700 	andeq	r1, sp, r0, lsl #14
    46dc:	0b3a0e03 	bleq	e87ef0 <__ccfg+0xe67f48>
    46e0:	0b39053b 	bleq	e45bd4 <__ccfg+0xe25c2c>
    46e4:	0b381349 	bleq	e09410 <__ccfg+0xde9468>
    46e8:	0d180000 	ldceq	0, cr0, [r8, #-0]
    46ec:	3a0e0300 	bcc	3852f4 <__ccfg+0x36534c>
    46f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    46f8:	19000005 	stmdbne	r0, {r0, r2}
    46fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4700:	0b3a0b0b 	bleq	e87334 <__ccfg+0xe6738c>
    4704:	0b39053b 	bleq	e45bf8 <__ccfg+0xe25c50>
    4708:	00001301 	andeq	r1, r0, r1, lsl #6
    470c:	0b01131a 	bleq	4937c <__ccfg+0x293d4>
    4710:	3b0b3a0b 	blcc	2d2f44 <__ccfg+0x2b2f9c>
    4714:	010b3905 	tsteq	fp, r5, lsl #18
    4718:	1b000013 	blne	476c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d0>
    471c:	0b0b0117 	bleq	2c4b80 <__ccfg+0x2a4bd8>
    4720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4724:	13010b39 	movwne	r0, #6969	; 0x1b39
    4728:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    472c:	3a0e0300 	bcc	385334 <__ccfg+0x36538c>
    4730:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4734:	0013490b 	andseq	r4, r3, fp, lsl #18
    4738:	00131d00 	andseq	r1, r3, r0, lsl #26
    473c:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4740:	151e0000 	ldrne	r0, [lr, #-0]
    4744:	01192701 	tsteq	r9, r1, lsl #14
    4748:	1f000013 	svcne	0x00000013
    474c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4750:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4754:	13490b39 	movtne	r0, #39737	; 0x9b39
    4758:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    475c:	34200000 	strtcc	r0, [r0], #-0
    4760:	3a0e0300 	bcc	385368 <__ccfg+0x3653c0>
    4764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4768:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    476c:	21000018 	tstcs	r0, r8, lsl r0
    4770:	13470034 	movtne	r0, #28724	; 0x7034
    4774:	00001802 	andeq	r1, r0, r2, lsl #16
    4778:	01110100 	tsteq	r1, r0, lsl #2
    477c:	0b130e25 	bleq	4c8018 <__ccfg+0x4a8070>
    4780:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    4784:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4788:	00001710 	andeq	r1, r0, r0, lsl r7
    478c:	0b002402 	bleq	d79c <__exidx_end+0x7adc>
    4790:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4794:	0300000e 	movweq	r0, #14
    4798:	0b0b0024 	bleq	2c4830 <__ccfg+0x2a4888>
    479c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    47a0:	16040000 	strne	r0, [r4], -r0
    47a4:	3a0e0300 	bcc	3853ac <__ccfg+0x365404>
    47a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    47b0:	000f0500 	andeq	r0, pc, r0, lsl #10
    47b4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    47b8:	15060000 	strne	r0, [r6, #-0]
    47bc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    47c0:	00130113 	andseq	r0, r3, r3, lsl r1
    47c4:	00050700 	andeq	r0, r5, r0, lsl #14
    47c8:	00001349 	andeq	r1, r0, r9, asr #6
    47cc:	00002608 	andeq	r2, r0, r8, lsl #12
    47d0:	00340900 	eorseq	r0, r4, r0, lsl #18
    47d4:	0b3a0e03 	bleq	e87fe8 <__ccfg+0xe68040>
    47d8:	0b390b3b 	bleq	e474cc <__ccfg+0xe27524>
    47dc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    47e0:	0000193c 	andeq	r1, r0, ip, lsr r9
    47e4:	0301040a 	movweq	r0, #5130	; 0x140a
    47e8:	0b0b3e0e 	bleq	2d4028 <__ccfg+0x2b4080>
    47ec:	3a13490b 	bcc	4d6c20 <__ccfg+0x4b6c78>
    47f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    47f8:	00280b00 	eoreq	r0, r8, r0, lsl #22
    47fc:	0b1c0e03 	bleq	708010 <__ccfg+0x6e8068>
    4800:	010c0000 	mrseq	r0, (UNDEF: 12)
    4804:	01134901 	tsteq	r3, r1, lsl #18
    4808:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    480c:	00000021 	andeq	r0, r0, r1, lsr #32
    4810:	4900260e 	stmdbmi	r0, {r1, r2, r3, r9, sl, sp}
    4814:	0f000013 	svceq	0x00000013
    4818:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    481c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4820:	13490b39 	movtne	r0, #39737	; 0x9b39
    4824:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    4828:	13100000 	tstne	r0, #0
    482c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4830:	11000019 	tstne	r0, r9, lsl r0
    4834:	19270015 	stmdbne	r7!, {r0, r2, r4}
    4838:	17120000 	ldrne	r0, [r2, -r0]
    483c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4840:	13000019 	movwne	r0, #25
    4844:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4848:	0b3a0b0b 	bleq	e8747c <__ccfg+0xe674d4>
    484c:	0b39053b 	bleq	e45d40 <__ccfg+0xe25d98>
    4850:	00001301 	andeq	r1, r0, r1, lsl #6
    4854:	03000d14 	movweq	r0, #3348	; 0xd14
    4858:	3b0b3a0e 	blcc	2d3098 <__ccfg+0x2b30f0>
    485c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4860:	000b3813 	andeq	r3, fp, r3, lsl r8
    4864:	00211500 	eoreq	r1, r1, r0, lsl #10
    4868:	0b2f1349 	bleq	bc9594 <__ccfg+0xba95ec>
    486c:	04160000 	ldreq	r0, [r6], #-0
    4870:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
    4874:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
    4878:	3b0b3a13 	blcc	2d30cc <__ccfg+0x2b3124>
    487c:	010b3905 	tsteq	fp, r5, lsl #18
    4880:	17000013 	smladne	r0, r3, r0, r0
    4884:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4888:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    488c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4890:	00000b38 	andeq	r0, r0, r8, lsr fp
    4894:	0b011718 	bleq	4a4fc <__ccfg+0x2a554>
    4898:	3b0b3a0b 	blcc	2d30cc <__ccfg+0x2b3124>
    489c:	010b3905 	tsteq	fp, r5, lsl #18
    48a0:	19000013 	stmdbne	r0, {r0, r1, r4}
    48a4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    48a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48ac:	13490b39 	movtne	r0, #39737	; 0x9b39
    48b0:	161a0000 	ldrne	r0, [sl], -r0
    48b4:	3a0e0300 	bcc	3854bc <__ccfg+0x365514>
    48b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    48bc:	0013490b 	andseq	r4, r3, fp, lsl #18
    48c0:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    48c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    48c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48cc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    48d0:	01111349 	tsteq	r1, r9, asr #6
    48d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    48d8:	00194297 	mulseq	r9, r7, r2
    48dc:	00051c00 	andeq	r1, r5, r0, lsl #24
    48e0:	0b3a0803 	bleq	e868f4 <__ccfg+0xe6694c>
    48e4:	0b39053b 	bleq	e45dd8 <__ccfg+0xe25e30>
    48e8:	17021349 	strne	r1, [r2, -r9, asr #6]
    48ec:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    48f0:	00341d00 	eorseq	r1, r4, r0, lsl #26
    48f4:	0b3a0803 	bleq	e86908 <__ccfg+0xe66960>
    48f8:	0b39053b 	bleq	e45dec <__ccfg+0xe25e44>
    48fc:	00001349 	andeq	r1, r0, r9, asr #6
    4900:	55010b1e 	strpl	r0, [r1, #-2846]	; 0xfffff4e2
    4904:	1f000017 	svcne	0x00000017
    4908:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    490c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4910:	13490b39 	movtne	r0, #39737	; 0x9b39
    4914:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4918:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000680 	andeq	r0, r0, r0, lsl #13
       4:	000006d4 	ldrdeq	r0, [r0], -r4
       8:	a2500001 	subsge	r0, r0, #1
       c:	a400000b 	strge	r0, [r0], #-11
    return node->data_base.item_array[index];
      10:	0100000b 	tsteq	r0, fp
      14:	0bc45000 	bleq	ff11401c <_estack+0xdf10f01c>
      18:	0bc70000 	bleq	ff1c0020 <_estack+0xdf1bb020>
};
      1c:	00010000 	andeq	r0, r1, r0
      20:	00000050 	andeq	r0, r0, r0, asr r0
      24:	00000000 	andeq	r0, r0, r0
      28:	00079e00 	andeq	r9, r7, r0, lsl #28
      2c:	0007a200 	andeq	sl, r7, r0, lsl #4
      30:	91000200 	mrsls	r0, R8_usr
      34:	00000066 	andeq	r0, r0, r6, rrx
      38:	00000000 	andeq	r0, r0, r0
      3c:	00079e00 	andeq	r9, r7, r0, lsl #28
			i = k;
      40:	0007a200 	andeq	sl, r7, r0, lsl #4
				j->Next = k;
      44:	53000100 	movwpl	r0, #256	; 0x100
	...
}
      50:	000007e4 	andeq	r0, r0, r4, ror #15
      54:	000007f4 	strdeq	r0, [r0], -r4
		release;
      58:	76540001 	ldrbvc	r0, [r4], -r1
      5c:	96000008 	strls	r0, [r0], -r8
			nq++;
      60:	01000008 	tsteq	r0, r8
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00005400 	andeq	r5, r0, r0, lsl #8
      68:	00000000 	andeq	r0, r0, r0
      6c:	07c20000 	strbeq	r0, [r2, r0]
      70:	07c40000 	strbeq	r0, [r4, r0]
      74:	00010000 	andeq	r0, r1, r0
      78:	00000051 	andeq	r0, r0, r1, asr r0
      7c:	00000000 	andeq	r0, r0, r0
      80:	0007c200 	andeq	ip, r7, r0, lsl #4
      84:	0007c400 	andeq	ip, r7, r0, lsl #8
      88:	52000100 	andpl	r0, r0, #0, 2
	...
	if (!button_still_pressed (__button_list [pbutton]))
      94:	00000830 	andeq	r0, r0, r0, lsr r8
      98:	0000083b 	andeq	r0, r0, fp, lsr r8
	if (baction == NULL)
      9c:	3b500001 	blcc	14000a8 <__ccfg+0x13e0100>
      a0:	56000008 	strpl	r0, [r0], -r8
	(*baction) (pbutton);
      a4:	01000008 	tsteq	r0, r8
endthread
      a8:	00005400 	andeq	r5, r0, r0, lsl #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000000 	andeq	r0, r0, r0
      b0:	091a0000 	ldmdbeq	sl, {}	; <UNPREDICTABLE>
endthread
      b4:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
      b8:	00010000 	andeq	r0, r1, r0
      bc:	000b5254 	andeq	r5, fp, r4, asr r2
      c0:	000b7000 	andeq	r7, fp, r0
      c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
fsm sender(struct ResponseMessage *message) {
      d0:	00000974 	andeq	r0, r0, r4, ror r9
}
      d4:	00000981 	andeq	r0, r0, r1, lsl #19
      d8:	81500001 	cmphi	r0, r1
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	ba000009 	blt	108 <_Min_Stack_Size+0x8>
      e0:	01000009 	tsteq	r0, r9
      e4:	00005400 	andeq	r5, r0, r0, lsl #8
      e8:	00000000 	andeq	r0, r0, r0
      ec:	0a1a0000 	beq	6800f4 <__ccfg+0x66014c>
		packet[1] = message->gid;
      f0:	0a270000 	beq	9c00f8 <__ccfg+0x9a0150>
      f4:	00010000 	andeq	r0, r1, r0
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	000a2750 	andeq	r2, sl, r0, asr r7
      fc:	000a5800 	andeq	r5, sl, r0, lsl #16
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		*p = message->request_number;p++;
     10c:	00000ac2 	andeq	r0, r0, r2, asr #21
		*p = message->sender_id;p++;
     110:	00000acf 	andeq	r0, r0, pc, asr #21
		*p = message->receiver_id;p++;
     114:	cf500001 	svcgt	0x00500001
		switch(message->tpe) {
     118:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
     11c:	0100000b 	tsteq	r0, fp
     120:	00005400 	andeq	r5, r0, r0, lsl #8
		tcv_endp(packet);
     124:	00000000 	andeq	r0, r0, r0
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	0b700000 	bleq	1c00130 <__ccfg+0x1be0188>
     12c:	0b9a0000 	bleq	fe680134 <_estack+0xde67b134>
}
     130:	00010000 	andeq	r0, r1, r0
		finish;
     134:	00000054 	andeq	r0, r0, r4, asr r0
     138:	00000000 	andeq	r0, r0, r0
     13c:	00027800 	andeq	r7, r2, r0, lsl #16
				strncpy(p, message->record, sizeof(message->record));
     140:	00029a00 	andeq	r9, r2, r0, lsl #20
				*p = message->padding;p++;
     144:	50000100 	andpl	r0, r0, r0, lsl #2
				strncpy(p, message->record, sizeof(message->record));
     148:	00000666 	andeq	r0, r0, r6, ror #12
     14c:	00000669 	andeq	r0, r0, r9, ror #12
     150:	00500001 	subseq	r0, r0, r1
				strncpy(p, message->record, sizeof(message->record));
     154:	00000000 	andeq	r0, r0, r0
     158:	84000000 	strhi	r0, [r0], #-0
				strncpy(p, message->record, sizeof(message->record));
     15c:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
				break;
     160:	01000003 	tsteq	r0, r3
				*p = message->record_index;p++;
     164:	03305400 	teqeq	r0, #0, 8
				*p = message->padding;
     168:	035e0000 	cmpeq	lr, #0
				break;
     16c:	00010000 	andeq	r0, r1, r0
     170:	0003fa54 	andeq	pc, r3, r4, asr sl	; <UNPREDICTABLE>
     174:	00044400 	andeq	r4, r4, r0, lsl #8
     178:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     17c:	00000460 	andeq	r0, r0, r0, ror #8
     180:	000004c6 	andeq	r0, r0, r6, asr #9
		node->nnodes[i] = 0;
     184:	da540001 	ble	1500190 <__ccfg+0x14e01e8>
     188:	cc000004 	stcgt	0, cr0, [r0], {4}
     18c:	01000005 	tsteq	r0, r5
     190:	05e05400 	strbeq	r5, [r0, #1024]!	; 0x400
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	06800000 	streq	r0, [r0], r0
bool init_node(struct Node* node){
     198:	00010000 	andeq	r0, r1, r0
    node->id  = 0;                  // default id value 0
     19c:	00000054 	andeq	r0, r0, r4, asr r0
    node->index = 0;                // default entry count 0
     1a0:	00000000 	andeq	r0, r0, r0
    node->data_base.item_count = 0; // default no items in array
     1a4:	0002f800 	andeq	pc, r2, r0, lsl #16
	reset_array(node);
     1a8:	0002fe00 	andeq	pc, r2, r0, lsl #28
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	50000100 	andpl	r0, r0, r0, lsl #2
     1b0:	000002fe 	strdeq	r0, [r0], -lr
};
     1b4:	0000031e 	andeq	r0, r0, lr, lsl r3
     1b8:	00560001 	subseq	r0, r6, r1
uint8_t generate_request_num(void){
     1bc:	00000000 	andeq	r0, r0, r0
    return (uint8_t) (rand() % 255);
     1c0:	56000000 	strpl	r0, [r0], -r0
     1c4:	58000004 	stmdapl	r0, {r2}
     1c8:	01000004 	tsteq	r0, r4
}
     1cc:	04585000 	ldrbeq	r5, [r8], #-0
            node->nnodes[i] = 0; // set to null byte
     1d0:	04600000 	strbteq	r0, [r0], #-0
     1d4:	00010000 	andeq	r0, r1, r0
     1d8:	00000054 	andeq	r0, r0, r4, asr r0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00000000 	andeq	r0, r0, r0
};
     1e0:	00043800 	andeq	r3, r4, r0, lsl #16
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	00046000 	andeq	r6, r4, r0
     1e8:	56000100 	strpl	r0, [r0], -r0, lsl #2
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
     1f0:	000004d2 	ldrdeq	r0, [r0], -r2
     1f4:	00560001 	subseq	r0, r6, r1
        node->data_base.item_count -= 1;
     1f8:	00000000 	andeq	r0, r0, r0
};
     1fc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
bool delete_all(struct Node *node){
     200:	30000004 	andcc	r0, r0, r4
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	02000004 	andeq	r0, r0, #4
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00067500 	andeq	r7, r6, r0, lsl #10
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00000000 	andeq	r0, r0, r0
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
            node->data_base.item_array[i].timestamp = 0;
     214:	30000004 	andcc	r0, r0, r4
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	01000004 	tsteq	r0, r4
    node->data_base.item_count = 0;
     21c:	00005400 	andeq	r5, r0, r0, lsl #8
}
     220:	00000000 	andeq	r0, r0, r0
        return true;
     224:	059e0000 	ldreq	r0, [lr]
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	05a40000 	streq	r0, [r4, #0]!
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00010000 	andeq	r0, r1, r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	0005a455 	andeq	sl, r5, r5, asr r4
     234:	0005b800 	andeq	fp, r5, r0, lsl #16
     238:	78000200 	stmdavc	r0, {r9}
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00000008 	andeq	r0, r0, r8
	response_message->tpe = RESPONSE;
     240:	00000000 	andeq	r0, r0, r0
	response_message->status = status;
     244:	00059e00 	andeq	r9, r5, r0, lsl #28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	0005b800 	andeq	fp, r5, r0, lsl #16
	response_message->gid = gid;
     24c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (!padding){
     258:	000000c8 	andeq	r0, r0, r8, asr #1
		response_message->padding = padding;
     25c:	000000d9 	ldrdeq	r0, [r0], -r9
	if (rec != NULL){
     260:	da500001 	ble	140026c <__ccfg+0x13e02c4>
     264:	eb000000 	bl	26c <assemble_response_message+0x46>
		strncpy(response_message->record, rec, 20);
     268:	01000000 	mrseq	r0, (UNDEF: 0)
     26c:	00005000 	andeq	r5, r0, r0
     270:	00000000 	andeq	r0, r0, r0
};
     274:	00dc0000 	sbcseq	r0, ip, r0
fsm receiver(struct Node* node_db) {
     278:	00e00000 	rsceq	r0, r0, r0
     27c:	00050000 	andeq	r0, r5, r0
     280:	23060073 	movwcs	r0, #24691	; 0x6073
     284:	00000008 	andeq	r0, r0, r8
     288:	00000000 	andeq	r0, r0, r0
     28c:	00015000 	andeq	r5, r1, r0
     290:	00015200 	andeq	r5, r1, r0, lsl #4
     294:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	00000226 	andeq	r0, r0, r6, lsr #4
     2a4:	0000022e 	andeq	r0, r0, lr, lsr #4
     2a8:	00500001 	subseq	r0, r0, r1
		DEBUG_PRINT("\r\nreceiving 1");
     2ac:	00000000 	andeq	r0, r0, r0
     2b0:	26000000 	strcs	r0, [r0], -r0
		DEBUG_PRINT("\r\nreceiving 2");
     2b4:	3f000002 	svccc	0x00000002
     2b8:	01000002 	tsteq	r0, r2
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2bc:	00005100 	andeq	r5, r0, r0, lsl #2
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c0:	00000000 	andeq	r0, r0, r0
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2c4:	02260000 	eoreq	r0, r6, #0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c8:	023f0000 	eorseq	r0, pc, #0
		DEBUG_PRINT("\r\nreceiving 3");
     2cc:	00010000 	andeq	r0, r1, r0
		switch (response_message_5->tpe){
     2d0:	00000052 	andeq	r0, r0, r2, asr r0
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	00022600 	andeq	r2, r2, r0, lsl #12
     2dc:	00023f00 	andeq	r3, r2, r0, lsl #30
     2e0:	53000100 	movwpl	r0, #256	; 0x100
	...
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2ec:	0000024a 	andeq	r0, r0, sl, asr #4
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2f0:	0000026e 	andeq	r0, r0, lr, ror #4
				if (discovery_request_message->gid == node_db->gid){
     2f4:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
     2f8:	78000002 	stmdavc	r0, {r1}
					DEBUG_PRINT("\r\nSending to sender");
     2fc:	01000002 	tsteq	r0, r2
     300:	00005400 	andeq	r5, r0, r0, lsl #8
					DEBUG_PRINT("\r\nSending to sender");
     304:	00000000 	andeq	r0, r0, r0
					response_message_0->tpe = DISCOVERY_RESPONSE;
     308:	02000000 	andeq	r0, r0, #0
					response_message_0->request_number = discovery_request_message->request_number;
     30c:	02200000 	eoreq	r0, r0, #0
					response_message_0->sender_id = node_db->id;
     310:	00010000 	andeq	r0, r1, r0
					response_message_0->receiver_id = discovery_request_message->sender_id;
     314:	00022250 	andeq	r2, r2, r0, asr r2
					DEBUG_PRINT("\r\nSending to sender");
     318:	00022400 	andeq	r2, r2, r0, lsl #8
					call sender(response_message_0, done_case);
     31c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     328:	0000020e 	andeq	r0, r0, lr, lsl #4
     32c:	00000210 	andeq	r0, r0, r0, lsl r2
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     330:	18530001 	ldmdane	r3, {r0}^
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     334:	20000002 	andcs	r0, r0, r2
     338:	01000002 	tsteq	r0, r2
     33c:	00005300 	andeq	r5, r0, r0, lsl #6
     340:	00000000 	andeq	r0, r0, r0
     344:	01e40000 	mvneq	r0, r0
     348:	01fe0000 	mvnseq	r0, r0
     34c:	00010000 	andeq	r0, r1, r0
     350:	00000050 	andeq	r0, r0, r0, asr r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     354:	00000000 	andeq	r0, r0, r0
					node_db->index+=1;
     358:	0001e400 	andeq	lr, r1, r0, lsl #8
     35c:	0001f000 	andeq	pc, r1, r0
		DEBUG_PRINT("\r\nIn done_case");
     360:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		DEBUG_PRINT("\r\nIn done_case");
     36c:	000001ce 	andeq	r0, r0, lr, asr #3
     370:	000001d8 	ldrdeq	r0, [r0], -r8
		proceed receiving;
     374:	00500001 	subseq	r0, r0, r1
		ser_out(response_1_create, "\r\nData Saved");
     378:	00000000 	andeq	r0, r0, r0
     37c:	84000000 	strhi	r0, [r0], #-0
		proceed receiving;
     380:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
     384:	01000001 	tsteq	r0, r1
		ser_out(response_1_delete, "\r\nRecord Deleted");
     388:	00005000 	andeq	r5, r0, r0
	...
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     398:	00010000 	andeq	r0, r1, r0
     39c:	00000050 	andeq	r0, r0, r0, asr r0
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	00019800 	andeq	r9, r1, r0, lsl #16
		proceed receiving;
     3a8:	0001ab00 	andeq	sl, r1, r0, lsl #22
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     3ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3c0:	00500001 	subseq	r0, r0, r1
	...
		proceed receiving;
     3d0:	01000000 	mrseq	r0, (UNDEF: 0)
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3d4:	00005000 	andeq	r5, r0, r0
	...
		proceed receiving;
     3e4:	00010000 	andeq	r0, r1, r0
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3e8:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
     3f8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     40c:	00520001 	subseq	r0, r2, r1
	...
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     41c:	01000000 	mrseq	r0, (UNDEF: 0)
     420:	00005000 	andeq	r5, r0, r0
					DEBUG_PRINT("\r\nCreate rec second if");
     424:	00000000 	andeq	r0, r0, r0
    if (node->data_base.item_count == NUMB_OF_ENT){
     428:	146c0000 	strbtne	r0, [ip], #-0
     42c:	146c0000 	strbtne	r0, [ip], #-0
						DEBUG_PRINT("\r\nCreate rec third if");
     430:	00010000 	andeq	r0, r1, r0
     434:	00000050 	andeq	r0, r0, r0, asr r0
					DEBUG_PRINT("\r\nCreate rec out if");
     438:	00000000 	andeq	r0, r0, r0
     43c:	0012f800 	andseq	pc, r2, r0, lsl #16
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     440:	0012fe00 	andseq	pc, r2, r0, lsl #28
     444:	56000100 	strpl	r0, [r0], -r0, lsl #2
     448:	0000132e 	andeq	r1, r0, lr, lsr #6
     44c:	00001332 	andeq	r1, r0, r2, lsr r3
     450:	00560001 	subseq	r0, r6, r1
     454:	00000000 	andeq	r0, r0, r0
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     458:	e2000000 	and	r0, r0, #0
					call sender(response_message_2, done_case);
     45c:	e6000011 			; <UNDEFINED> instruction: 0xe6000011
						DEBUG_PRINT("\r\nCreate rec third else");
     460:	01000011 	tsteq	r0, r1, lsl r0
     464:	11fc5200 	mvnsne	r5, r0, lsl #4
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     468:	12100000 	andsne	r0, r0, #0
     46c:	00010000 	andeq	r0, r1, r0
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     470:	00000052 	andeq	r0, r0, r2, asr r0
				DEBUG_PRINT("\r\nDelete rec");/*
     474:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     478:	0011ea00 	andseq	lr, r1, r0, lsl #20
     47c:	0011f000 	andseq	pc, r1, r0
     480:	53000100 	movwpl	r0, #256	; 0x100
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     48c:	000011a0 	andeq	r1, r0, r0, lsr #3
     490:	000011aa 	andeq	r1, r0, sl, lsr #3
     494:	00530001 	subseq	r0, r3, r1
					DEBUG_PRINT("\r\nDelete rec first if");
     498:	00000000 	andeq	r0, r0, r0
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     49c:	a0000000 	andge	r0, r0, r0
     4a0:	a6000011 			; <UNDEFINED> instruction: 0xa6000011
					DEBUG_PRINT("\r\nDelete rec second if");
     4a4:	01000011 	tsteq	r0, r1, lsl r0
					if (delete_record(node_db, delete_record_message->record_index)){
     4a8:	00005300 	andeq	r5, r0, r0, lsl #6
     4ac:	00000000 	andeq	r0, r0, r0
     4b0:	12360000 	eorsne	r0, r6, #0
						DEBUG_PRINT("\r\nDelete rec third if");
     4b4:	12400000 	subne	r0, r0, #0
						status = (uint8_t) SUCCESS;
     4b8:	00010000 	andeq	r0, r1, r0
					DEBUG_PRINT("\r\nDelete assemble le response");
     4bc:	00000053 	andeq	r0, r0, r3, asr r0
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	00122800 	andseq	r2, r2, r0, lsl #16
     4c8:	00125200 	andseq	r5, r2, r0, lsl #4
     4cc:	52000100 	andpl	r0, r0, #0, 2
	...
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4d8:	00001276 	andeq	r1, r0, r6, ror r2
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4dc:	00001280 	andeq	r1, r0, r0, lsl #5
     4e0:	00530001 	subseq	r0, r3, r1
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     4ec:	9e000012 	mcrls	0, 0, r0, cr0, cr2, {0}
     4f0:	01000012 	tsteq	r0, r2, lsl r0
     4f4:	00005000 	andeq	r5, r0, r0
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	110e0000 	mrsne	r0, (UNDEF: 14)
     500:	11180000 	tstne	r8, r0
     504:	00010000 	andeq	r0, r1, r0
     508:	00000053 	andeq	r0, r0, r3, asr r0
     50c:	00000000 	andeq	r0, r0, r0
     510:	00110000 	andseq	r0, r1, r0
     514:	00112a00 	andseq	r2, r1, r0, lsl #20
     518:	52000100 	andpl	r0, r0, #0, 2
	...
     524:	00001160 	andeq	r1, r0, r0, ror #2
     528:	0000116a 	andeq	r1, r0, sl, ror #2
     52c:	00530001 	subseq	r0, r3, r1
     530:	00000000 	andeq	r0, r0, r0
     534:	52000000 	andpl	r0, r0, #0
     538:	7a000011 	bvc	584 <receiver+0x30c>
     53c:	01000011 	tsteq	r0, r1, lsl r0
     540:	00005200 	andeq	r5, r0, r0, lsl #4
     544:	00000000 	andeq	r0, r0, r0
     548:	0c340000 	ldceq	0, cr0, [r4], #-0
     54c:	0c380000 	ldceq	0, cr0, [r8], #-0
     550:	00010000 	andeq	r0, r1, r0
     554:	000c3850 	andeq	r3, ip, r0, asr r8
     558:	000c3b00 	andeq	r3, ip, r0, lsl #22
     55c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     568:	00000fc0 	andeq	r0, r0, r0, asr #31
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     56c:	00000fc2 	andeq	r0, r0, r2, asr #31
     570:	00500001 	subseq	r0, r0, r1
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     574:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("\r\nretrieve rec");
     578:	c0000000 	andgt	r0, r0, r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     57c:	d600000f 	strle	r0, [r0], -pc
     580:	0100000f 	tsteq	r0, pc
     584:	0fd65100 	svceq	0x00d65100
     588:	0fda0000 	svceq	0x00da0000
     58c:	00010000 	andeq	r0, r1, r0
     590:	000fe055 	andeq	lr, pc, r5, asr r0	; <UNPREDICTABLE>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     594:	000ff600 	andeq	pc, pc, r0, lsl #12
     598:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     59c:	00000ff6 	strdeq	r0, [r0], -r6
    return node->data_base.item_array[index];
     5a0:	00001004 	andeq	r1, r0, r4
     5a4:	04510001 	ldrbeq	r0, [r1], #-1
     5a8:	32000010 	andcc	r0, r0, #16
     5ac:	01000010 	tsteq	r0, r0, lsl r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b0:	10385500 	eorsne	r5, r8, r0, lsl #10
    return node->data_base.item_array[index];
     5b4:	10600000 	rsbne	r0, r0, r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b8:	00010000 	andeq	r0, r1, r0
     5bc:	00106055 	andseq	r6, r0, r5, asr r0
     5c0:	00106e00 	andseq	r6, r0, r0, lsl #28
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     5c4:	51000100 	mrspl	r0, (UNDEF: 16)
     5c8:	0000106e 	andeq	r1, r0, lr, rrx
     5cc:	00001078 	andeq	r1, r0, r8, ror r0
     5d0:	78550001 	ldmdavc	r5, {r0}^
     5d4:	83000010 	movwhi	r0, #16
     5d8:	01000010 	tsteq	r0, r0, lsl r0
     5dc:	10835100 	addne	r5, r3, r0, lsl #2
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5e0:	10860000 	addne	r0, r6, r0
     5e4:	00010000 	andeq	r0, r1, r0
				DEBUG_PRINT("\r\nResponse");
     5e8:	00108655 	andseq	r8, r0, r5, asr r6
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5ec:	00108c00 	andseq	r8, r0, r0, lsl #24
     5f0:	51000100 	mrspl	r0, (UNDEF: 16)
     5f4:	0000108c 	andeq	r1, r0, ip, lsl #1
     5f8:	0000109e 	muleq	r0, lr, r0
     5fc:	9e550001 	cdpls	0, 5, cr0, cr5, cr1, {0}
     600:	b0000010 	andlt	r0, r0, r0, lsl r0
				if(!response_flag){
     604:	01000010 	tsteq	r0, r0, lsl r0
					response_flag=1;
     608:	10b05100 	adcsne	r5, r0, r0, lsl #2
					trigger(&response_flag);
     60c:	10d00000 	sbcsne	r0, r0, r0
				switch(response_message_5->status){
     610:	00010000 	andeq	r0, r1, r0
     614:	00000055 	andeq	r0, r0, r5, asr r0
     618:	00000000 	andeq	r0, r0, r0
     61c:	000fc000 	andeq	ip, pc, r0
     620:	000fd600 	andeq	sp, pc, r0, lsl #12
						if (response_checker[0] == response_message_5->request_number){
     624:	52000100 	andpl	r0, r0, #0, 2
     628:	00000fd6 	ldrdeq	r0, [r0], -r6
     62c:	00000fdc 	ldrdeq	r0, [r0], -ip
							switch(response_checker[1]){
     630:	e0560001 	subs	r0, r6, r1
     634:	f000000f 			; <UNDEFINED> instruction: 0xf000000f
     638:	0100000f 	tsteq	r0, pc
     63c:	0ff65600 	svceq	0x00f65600
									proceed response_1_create;
     640:	10040000 	andne	r0, r4, r0
						proceed response_2;
     644:	00010000 	andeq	r0, r1, r0
									proceed response_1_delete;
     648:	00100452 	andseq	r0, r0, r2, asr r4
									proceed response_1_retrieve;
     64c:	00103400 	andseq	r3, r0, r0, lsl #8
						proceed response_2;
     650:	56000100 	strpl	r0, [r0], -r0, lsl #2
						proceed response_3;
     654:	00001038 	andeq	r1, r0, r8, lsr r0
						proceed response_4;
     658:	00001060 	andeq	r1, r0, r0, rrx
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     65c:	60560001 	subsvs	r0, r6, r1
     660:	6e000010 	mcrvs	0, 0, r0, cr0, cr0, {0}
				break;
     664:	01000010 	tsteq	r0, r0, lsl r0
}
     668:	106e5200 	rsbne	r5, lr, r0, lsl #4
     66c:	10780000 	rsbsne	r0, r8, r0
     670:	00010000 	andeq	r0, r1, r0
     674:	00107856 	andseq	r7, r0, r6, asr r8
     678:	00108300 	andseq	r8, r0, r0, lsl #6
     67c:	52000100 	andpl	r0, r0, #0, 2
fsm root {
     680:	00001086 	andeq	r1, r0, r6, lsl #1
     684:	00001091 	muleq	r0, r1, r0
     688:	91520001 	cmpls	r2, r1
     68c:	9e000010 	mcrls	0, 0, r0, cr0, cr0, {0}
     690:	01000010 	tsteq	r0, r0, lsl r0
     694:	109e5400 	addsne	r5, lr, r0, lsl #8
     698:	10d00000 	sbcsne	r0, r0, r0
     69c:	00010000 	andeq	r0, r1, r0
     6a0:	00000052 	andeq	r0, r0, r2, asr r0
     6a4:	00000000 	andeq	r0, r0, r0
     6a8:	000f3400 	andeq	r3, pc, r0, lsl #8
     6ac:	000f4200 	andeq	r4, pc, r0, lsl #4
     6b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     6bc:	00000f34 	andeq	r0, r0, r4, lsr pc
     6c0:	00000f43 	andeq	r0, r0, r3, asr #30
     6c4:	00510001 	subseq	r0, r1, r1
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	e4000000 	str	r0, [r0], #-0
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     6d0:	fb00000e 	blx	712 <root+0x92>
     6d4:	0100000e 	tsteq	r0, lr
     6d8:	0f1e5000 	svceq	0x001e5000
		init_node(node_db);
     6dc:	0f340000 	svceq	0x00340000
		phys_cc1350(0, MAX_PKT_LEN);
     6e0:	00010000 	andeq	r0, r1, r0
     6e4:	00000050 	andeq	r0, r0, r0, asr r0
		tcv_plug (0, &plug_null);
     6e8:	00000000 	andeq	r0, r0, r0
     6ec:	000dda00 	andeq	sp, sp, r0, lsl #20
		sfd = tcv_open (WNONE, 0, 0);
     6f0:	000dea00 	andeq	lr, sp, r0, lsl #20
     6f4:	52000100 	andpl	r0, r0, #0, 2
     6f8:	00000dea 	andeq	r0, r0, sl, ror #27
     6fc:	00000df2 	strdeq	r0, [r0], -r2
     700:	040c0005 	streq	r0, [ip], #-5
			diag("Cannot open tcv interface");
     704:	8c400920 	mcrrhi	9, 2, r0, r0, cr0	; <UNPREDICTABLE>
     708:	9000000e 	andls	r0, r0, lr
			halt();
     70c:	0500000e 	streq	r0, [r0, #-14]
		tcv_control(sfd, PHYSOPT_ON, NULL);
     710:	20040c00 	andcs	r0, r4, r0, lsl #24
     714:	0e904009 	cdpeq	0, 9, cr4, cr0, cr9, {0}
		runfsm receiver(node_db);
     718:	0e920000 	cdpeq	0, 9, cr0, cr2, cr0, {0}
     71c:	00010000 	andeq	r0, r1, r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     720:	000e9252 	andeq	r9, lr, r2, asr r2
     724:	000e9400 	andeq	r9, lr, r0, lsl #8
     728:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     72c:	40092004 	andmi	r2, r9, r4
	...
		ser_inf(get_choice, "%c", &CHOICE);
     738:	00000df4 	strdeq	r0, [r0], -r4
     73c:	00000dfe 	strdeq	r0, [r0], -lr
     740:	02520001 	subseq	r0, r2, #1
		switch(CHOICE) {
     744:	0c00000e 	stceq	0, cr0, [r0], {14}
     748:	0100000e 	tsteq	r0, lr
     74c:	0e105200 	cdpeq	2, 1, cr5, cr0, cr0, {0}
     750:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
     754:	00010000 	andeq	r0, r1, r0
     758:	000e1e52 	andeq	r1, lr, r2, asr lr
     75c:	000e2a00 	andeq	r2, lr, r0, lsl #20
     760:	52000100 	andpl	r0, r0, #0, 2
     764:	00000eb6 			; <UNDEFINED> instruction: 0x00000eb6
     768:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
     76c:	00520001 	subseq	r0, r2, r1
     770:	00000000 	andeq	r0, r0, r0
				proceed menu;
     774:	7a000000 	bvc	77c <root+0xfc>
     778:	8c00000d 	stchi	0, cr0, [r0], {13}
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     77c:	0100000d 	tsteq	r0, sp
     780:	00005400 	andeq	r5, r0, r0, lsl #8
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     784:	00000000 	andeq	r0, r0, r0
     788:	0d140000 	ldceq	0, cr0, [r4, #-0]
     78c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
		DEBUG_PRINT("setting node group ID");
     790:	00010000 	andeq	r0, r1, r0
     794:	00000050 	andeq	r0, r0, r0, asr r0
    node->gid = gid; 
     798:	00000000 	andeq	r0, r0, r0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     79c:	000d1400 	andeq	r1, sp, r0, lsl #8
    node->gid = gid; 
     7a0:	000d1a00 	andeq	r1, sp, r0, lsl #20
		proceed menu;
     7a4:	51000100 	mrspl	r0, (UNDEF: 16)
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     7a8:	00000d1a 	andeq	r0, r0, sl, lsl sp
     7ac:	00000d1f 	andeq	r0, r0, pc, lsl sp
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     7b0:	00520001 	subseq	r0, r2, r1
	...
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7c0:	01000000 	mrseq	r0, (UNDEF: 0)
		if((node_db->id < 1) || (node_db->id > 25)){
     7c4:	00005000 	andeq	r5, r0, r0
	...
			strncpy(reason, "Out of Range", 50);
     7d4:	00010000 	andeq	r0, r1, r0
			proceed invalid_node_id;
     7d8:	00000051 	andeq	r0, r0, r1, asr r0
     7dc:	00000000 	andeq	r0, r0, r0
				strncpy(reason, "ID is already in use", 50);
     7e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7f4:	00520001 	subseq	r0, r2, r1
     7f8:	00000000 	andeq	r0, r0, r0
     7fc:	01000000 	mrseq	r0, (UNDEF: 0)
     800:	00005400 	andeq	r5, r0, r0, lsl #8
		proceed get_new_node_id;
     804:	00000000 	andeq	r0, r0, r0
     808:	0cd40000 	ldcleq	0, cr0, [r4], {0}
		if (!clear_node_neighbour_array(node_db)){
     80c:	0cdf0000 	ldcleq	0, cr0, [pc], {0}
     810:	00010000 	andeq	r0, r1, r0
			strncpy(reason, "Error Clearing Node Array", 50);
     814:	000cdf50 	andeq	sp, ip, r0, asr pc
     818:	000d0800 	andeq	r0, sp, r0, lsl #16
     81c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     828:	00000c98 	muleq	r0, r8, ip
		request_packet->gid = node_db->gid;
     82c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     830:	b0500001 	subslt	r0, r0, r1
		request_packet->tpe = DISCOVERY_REQUEST;
     834:	c800000c 	stmdagt	r0, {r2, r3}
		request_packet->request_number = generate_request_num();
     838:	0100000c 	tsteq	r0, ip
     83c:	00005400 	andeq	r5, r0, r0, lsl #8
		call sender(request_packet, wait_discovery);
     840:	00000000 	andeq	r0, r0, r0
     844:	0c6c0000 	stcleq	0, cr0, [ip], #-0
		request_packet->receiver_id=0;
     848:	0c720000 	ldcleq	0, cr0, [r2], #-0
		call sender(request_packet, wait_discovery);
     84c:	00010000 	andeq	r0, r1, r0
     850:	00000050 	andeq	r0, r0, r0, asr r0
	...
				proceed clear_neighbour_array;
     860:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				proceed start_retrieve_proto;
     86c:	00001d50 	andeq	r1, r0, r0, asr sp
				proceed display_db;
     870:	00001d6e 	andeq	r1, r0, lr, ror #26
				proceed del_local;
     874:	70910002 	addsvc	r0, r1, r2
			if(node_db->id == node_db->nnodes[i]){
     878:	00001d6e 	andeq	r1, r0, lr, ror #26
     87c:	00001d96 	muleq	r0, r6, sp
     880:	9a540001 	bls	150088c <__ccfg+0x14e08e4>
				strncpy(reason, "ID is already in use", 50);
     884:	a200001d 	andge	r0, r0, #29
     888:	0100001d 	tsteq	r0, sp, lsl r0
				proceed invalid_node_id;
     88c:	1db05400 	cfldrsne	mvf5, [r0]
     890:	1dfa0000 	ldclne	0, cr0, [sl]
		for(int i = 0; i < node_db->index; i++){
     894:	00010000 	andeq	r0, r1, r0
		if (discovery_wait_flag == 0){
     898:	001dfe56 	andseq	pc, sp, r6, asr lr	; <UNPREDICTABLE>
			discovery_wait_flag=1;
     89c:	001e7600 	andseq	r7, lr, r0, lsl #12
     8a0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		if (discovery_wait_flag == 1){
     8ac:	00001dba 			; <UNDEFINED> instruction: 0x00001dba
			discovery_wait_flag=0;
     8b0:	00001df8 	strdeq	r1, [r0], -r8
     8b4:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
			delay(3000, display_neighbour_nodes);
     8b8:	1000001d 	andne	r0, r0, sp, lsl r0
     8bc:	0100001e 	tsteq	r0, lr, lsl r0
     8c0:	1e1c5100 	mufnee	f5, f4, f0
     8c4:	1e260000 	cdpne	0, 2, cr0, cr6, cr0, {0}
     8c8:	00010000 	andeq	r0, r1, r0
     8cc:	001e3851 	andseq	r3, lr, r1, asr r8
     8d0:	001e3c00 	andseq	r3, lr, r0, lsl #24
     8d4:	51000100 	mrspl	r0, (UNDEF: 16)
     8d8:	00001e5c 	andeq	r1, r0, ip, asr lr
     8dc:	00001e60 	andeq	r1, r0, r0, ror #28
     8e0:	00510001 	subseq	r0, r1, r1
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	ba000000 	blt	8f0 <root+0x270>
     8ec:	f800001d 			; <UNDEFINED> instruction: 0xf800001d
     8f0:	0100001d 	tsteq	r0, sp, lsl r0
     8f4:	1dfe5500 	cfldr64ne	mvdx5, [lr]
     8f8:	1e260000 	cdpne	0, 2, cr0, cr6, cr0, {0}
     8fc:	00010000 	andeq	r0, r1, r0
     900:	001e3855 	andseq	r3, lr, r5, asr r8
		if(node_db->index == 0){
     904:	001e3c00 	andseq	r3, lr, r0, lsl #24
     908:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     90c:	00001e5c 	andeq	r1, r0, ip, asr lr
			proceed menu;
     910:	00001e76 	andeq	r1, r0, r6, ror lr
fsm root {
     914:	00550001 	subseq	r0, r5, r1
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     918:	00000000 	andeq	r0, r0, r0
		for (int i=0; i<node_db->index; i++) {
     91c:	2c000000 	stccs	0, cr0, [r0], {-0}
     920:	3800001e 	stmdacc	r0, {r1, r2, r3, r4}
     924:	0100001e 	tsteq	r0, lr, lsl r0
		proceed menu;
     928:	1e3c5500 	cfabs32ne	mvfx5, mvfx12
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     92c:	1e560000 	cdpne	0, 5, cr0, cr6, cr0, {0}
     930:	00010000 	andeq	r0, r1, r0
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     934:	001e5a55 	andseq	r5, lr, r5, asr sl
     938:	001e5c00 	andseq	r5, lr, r0, lsl #24
     93c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			strncpy(reason, "Error: improper ID", 50);
     948:	00001de0 	andeq	r1, r0, r0, ror #27
     94c:	00001df8 	strdeq	r1, [r0], -r8
     950:	00540001 	subseq	r0, r4, r1
			proceed error;
     954:	00000000 	andeq	r0, r0, r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     958:	26000000 	strcs	r0, [r0], -r0
     95c:	3800001e 	stmdacc	r0, {r1, r2, r3, r4}
		ser_in(get_record_to_create, user_provided_record, 20);
     960:	0100001e 	tsteq	r0, lr, lsl r0
     964:	1e3c5400 	cfabssne	mvf5, mvf12
     968:	1e500000 	cdpne	0, 5, cr0, cr0, cr0, {0}
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     96c:	00010000 	andeq	r0, r1, r0
		create_message->gid = node_db->gid;
     970:	001e5054 	andseq	r5, lr, r4, asr r0
     974:	001e5c00 	andseq	r5, lr, r0, lsl #24
     978:	53000100 	movwpl	r0, #256	; 0x100
	...
		create_message->sender_id = node_db->id;
     984:	00001e68 	andeq	r1, r0, r8, ror #28
     988:	00001e76 	andeq	r1, r0, r6, ror lr
     98c:	00510001 	subseq	r0, r1, r1
		strncpy(create_message->record, user_provided_record, 20);
     990:	00000000 	andeq	r0, r0, r0
		create_message->receiver_id = user_provided_receiver_id;
     994:	34000000 	strcc	r0, [r0], #-0
		strncpy(create_message->record, user_provided_record, 20);
     998:	40000018 	andmi	r0, r0, r8, lsl r0
		response_checker[0] = create_message->request_number;
     99c:	01000018 	tsteq	r0, r8, lsl r0
		call sender(create_message, wait);
     9a0:	00005000 	andeq	r5, r0, r0
	...
     9b0:	00010000 	andeq	r0, r1, r0
     9b4:	00000050 	andeq	r0, r0, r0, asr r0
     9b8:	00000000 	andeq	r0, r0, r0
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     9bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9d0:	00510001 	subseq	r0, r1, r1
     9d4:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error: improper node ID", 50);
     9d8:	01000000 	mrseq	r0, (UNDEF: 0)
     9dc:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9ec:	00010000 	andeq	r0, r1, r0
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9f0:	00000052 	andeq	r0, r0, r2, asr r0
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	52000100 	andpl	r0, r0, #0, 2
	...
			proceed error;
     a0c:	00530001 	subseq	r0, r3, r1
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a10:	00000000 	andeq	r0, r0, r0
     a14:	01000000 	mrseq	r0, (UNDEF: 0)
     a18:	00005300 	andeq	r5, r0, r0, lsl #6
		delete_record->gid = node_db->gid;
     a1c:	00000000 	andeq	r0, r0, r0
		delete_record->tpe = DELETE_RECORD;
     a20:	00010000 	andeq	r0, r1, r0
		delete_record->request_number = generate_request_num();
     a24:	00000053 	andeq	r0, r0, r3, asr r0
	...
		delete_record->receiver_id = user_provided_receiver_id;
     a34:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		response_checker[0] = delete_record->request_number;
     a40:	00001d38 	andeq	r1, r0, r8, lsr sp
		call sender(delete_record, wait);
     a44:	00001d40 	andeq	r1, r0, r0, asr #26
     a48:	00500001 	subseq	r0, r0, r1
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	5c000000 	stcpl	0, cr0, [r0], {-0}
     a54:	6200001c 	andvs	r0, r0, #28
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a58:	0100001c 	tsteq	r0, ip, lsl r0
     a5c:	00005000 	andeq	r5, r0, r0
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a60:	00000000 	andeq	r0, r0, r0
     a64:	1c720000 	ldclne	0, cr0, [r2], #-0
     a68:	1c9e0000 	ldcne	0, cr0, [lr], {0}
		if (get_id < 1 || get_id > 25){
     a6c:	00010000 	andeq	r0, r1, r0
     a70:	001c9e54 	andseq	r9, ip, r4, asr lr
			strncpy(reason, "Error: improper node ID", 50);
     a74:	001ca400 	andseq	sl, ip, r0, lsl #8
     a78:	52000100 	andpl	r0, r0, #0, 2
     a7c:	00001ca4 	andeq	r1, r0, r4, lsr #25
			proceed error;
     a80:	00001cec 	andeq	r1, r0, ip, ror #25
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a84:	ec540001 	mrrc	0, 0, r0, r4, cr1
     a88:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a8c:	0100001d 	tsteq	r0, sp, lsl r0
     a90:	00005000 	andeq	r5, r0, r0
     a94:	00000000 	andeq	r0, r0, r0
		if (beg_for_index < 0 || beg_for_index > 40){
     a98:	1c9e0000 	ldcne	0, cr0, [lr], {0}
     a9c:	1ca20000 	stcne	0, cr0, [r2]
			strncpy(reason, "Error: invalid index", 50);
     aa0:	00010000 	andeq	r0, r1, r0
     aa4:	001ca254 	andseq	sl, ip, r4, asr r2
			proceed error;
     aa8:	001ca400 	andseq	sl, ip, r0, lsl #8
     aac:	53000100 	movwpl	r0, #256	; 0x100
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ab0:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
     ab4:	00001cc3 	andeq	r1, r0, r3, asr #25
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	00500001 	subseq	r0, r0, r1
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	ac000000 	stcge	0, cr0, [r0], {-0}
		retrieve_record->gid = node_db->gid;
     ac4:	bc00001c 	stclt	0, cr0, [r0], {28}
		retrieve_record->tpe = RETRIEVE_RECORD;
     ac8:	0100001c 	tsteq	r0, ip, lsl r0
		retrieve_record->request_number = generate_request_num();
     acc:	00005300 	andeq	r5, r0, r0, lsl #6
     ad0:	00000000 	andeq	r0, r0, r0
		retrieve_record->receiver_id = get_id;
     ad4:	1c720000 	ldclne	0, cr0, [r2], #-0
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ad8:	1c900000 	ldcne	0, cr0, [r0], {0}
		retrieve_record->record_index = beg_for_index;
     adc:	00010000 	andeq	r0, r1, r0
     ae0:	001c9650 	andseq	r9, ip, r0, asr r6
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ae4:	001cb600 	andseq	fp, ip, r0, lsl #12
		response_checker[0] = retrieve_record->request_number;
     ae8:	50000100 	andpl	r0, r0, r0, lsl #2
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     aec:	00001cb6 			; <UNDEFINED> instruction: 0x00001cb6
		response_checker[1] = retrieve_record->tpe;
     af0:	00001cc0 	andeq	r1, r0, r0, asr #25
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     af4:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
		call sender(retrieve_record, wait);
     b00:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
     b04:	000017e2 	andeq	r1, r0, r2, ror #15
     b08:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
     b0c:	34000017 	strcc	r0, [r0], #-23	; 0xffffffe9
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     b10:	01000018 	tsteq	r0, r8, lsl r0
     b14:	00005000 	andeq	r5, r0, r0
		if(node_db->data_base.item_count != 0){
     b18:	00000000 	andeq	r0, r0, r0
     b1c:	17bc0000 	ldrne	r0, [ip, r0]!
     b20:	17c80000 	strbne	r0, [r8, r0]
		ser_out(loop_through_data, "\r\n");
     b24:	00010000 	andeq	r0, r1, r0
     b28:	0017c853 	andseq	ip, r7, r3, asr r8
		proceed menu;
     b2c:	0017ca00 	andseq	ip, r7, r0, lsl #20
		delete_all(node_db);
     b30:	70000200 	andvc	r0, r0, r0, lsl #4
     b34:	0017ce00 	andseq	ip, r7, r0, lsl #28
		proceed menu;
     b38:	00182600 	andseq	r2, r8, r0, lsl #12
     b3c:	53000100 	movwpl	r0, #256	; 0x100
		delay(3000, timeout);
     b40:	00001826 	andeq	r1, r0, r6, lsr #16
     b44:	0000182a 	andeq	r1, r0, sl, lsr #16
		when(&response_flag, menu);
     b48:	00730002 	rsbseq	r0, r3, r2
     b4c:	0000182a 	andeq	r1, r0, sl, lsr #16
		release;
     b50:	00001834 	andeq	r1, r0, r4, lsr r8
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b54:	00530001 	subseq	r0, r3, r1
     b58:	00000000 	andeq	r0, r0, r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b5c:	bc000000 	stclt	0, cr0, [r0], {-0}
     b60:	be000017 	mcrlt	0, 0, r0, cr0, cr7, {0}
     b64:	01000017 	tsteq	r0, r7, lsl r0
     b68:	17ce5200 	strbne	r5, [lr, r0, lsl #4]
		for (int i=0; i<node_db->index; i++) {
     b6c:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b70:	00010000 	andeq	r0, r1, r0
     b74:	00182652 	andseq	r2, r8, r2, asr r6
     b78:	00182a00 	andseq	r2, r8, r0, lsl #20
     b7c:	53000100 	movwpl	r0, #256	; 0x100
     b80:	0000182a 	andeq	r1, r0, sl, lsr #16
     b84:	00001834 	andeq	r1, r0, r4, lsr r8
     b88:	00520001 	subseq	r0, r2, r1
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	84000000 	strhi	r0, [r0], #-0
     b94:	8c00001b 	stchi	0, cr0, [r0], {27}
     b98:	0100001b 	tsteq	r0, fp, lsl r0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b9c:	1b905100 	blne	fe414fa4 <_estack+0xde40ffa4>
     ba0:	1b920000 	blne	fe480ba8 <_estack+0xde47bba8>
		ser_out(timeout, "\r\nFailed to reach the destination");
     ba4:	00010000 	andeq	r0, r1, r0
     ba8:	00000051 	andeq	r0, r0, r1, asr r0
		proceed menu;
     bac:	00000000 	andeq	r0, r0, r0
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     bb0:	001ad800 	andseq	sp, sl, r0, lsl #16
     bb4:	001af400 	andseq	pc, sl, r0, lsl #8
     bb8:	50000100 	andpl	r0, r0, r0, lsl #2
		proceed menu;
     bbc:	00001afa 	strdeq	r1, [r0], -sl
}
     bc0:	00001b06 	andeq	r1, r0, r6, lsl #22
     bc4:	00500001 	subseq	r0, r0, r1
     bc8:	00000000 	andeq	r0, r0, r0
     bcc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     bd0:	f600001a 			; <UNDEFINED> instruction: 0xf600001a
     bd4:	0100001a 	tsteq	r0, sl, lsl r0
     bd8:	1afa5100 	bne	ffe94fe0 <_estack+0xdfe8ffe0>
     bdc:	1b040000 	blne	100be4 <__ccfg+0xe0c3c>
     be0:	00010000 	andeq	r0, r1, r0
     be4:	00000051 	andeq	r0, r0, r1, asr r0
     be8:	00000000 	andeq	r0, r0, r0
     bec:	001ad800 	andseq	sp, sl, r0, lsl #16
     bf0:	001af900 	andseq	pc, sl, r0, lsl #18
     bf4:	52000100 	andpl	r0, r0, #0, 2
     bf8:	00001afa 	strdeq	r1, [r0], -sl
     bfc:	00001b02 	andeq	r1, r0, r2, lsl #22
     c00:	00520001 	subseq	r0, r2, r1
     c04:	00000000 	andeq	r0, r0, r0
     c08:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     c0c:	f000001a 			; <UNDEFINED> instruction: 0xf000001a
     c10:	0100001a 	tsteq	r0, sl, lsl r0
     c14:	1af05300 	bne	ffc1581c <_estack+0xdfc1081c>
     c18:	1b740000 	blne	1d00c20 <__ccfg+0x1ce0c78>
     c1c:	00010000 	andeq	r0, r1, r0
     c20:	00000055 	andeq	r0, r0, r5, asr r0
     c24:	00000000 	andeq	r0, r0, r0
     c28:	001ad800 	andseq	sp, sl, r0, lsl #16
     c2c:	001b5800 	andseq	r5, fp, r0, lsl #16
     c30:	91000200 	mrsls	r0, R8_usr
static void devinit_uart (int devnum) {
     c34:	001b5800 	andseq	r5, fp, r0, lsl #16
	adddevfunc (ioreq_uart_a, devnum);
     c38:	001b7400 	andseq	r7, fp, r0, lsl #8
     c3c:	91000200 	mrsls	r0, R8_usr
	...
	while (n) {
     c48:	001b0800 	andseq	r0, fp, r0, lsl #16
     c4c:	001b1e00 	andseq	r1, fp, r0, lsl #28
}
     c50:	50000100 	andpl	r0, r0, r0, lsl #2
	while (n--);
     c54:	00001b26 	andeq	r1, r0, r6, lsr #22
     c58:	00001b38 	andeq	r1, r0, r8, lsr fp
     c5c:	48500001 	ldmdami	r0, {r0}^
		n--;
     c60:	5000001b 	andpl	r0, r0, fp, lsl r0
     c64:	0100001b 	tsteq	r0, fp, lsl r0
     c68:	1b585000 	blne	1614c70 <__ccfg+0x15f4cc8>
void mdelay (volatile word n) {
     c6c:	1b600000 	blne	1800c74 <__ccfg+0x17e0ccc>
     c70:	00010000 	andeq	r0, r1, r0
	while (n) {
     c74:	00000050 	andeq	r0, r0, r0, asr r0
     c78:	00000000 	andeq	r0, r0, r0
}
     c7c:	001ab400 	andseq	fp, sl, r0, lsl #8
		udelay (999);
     c80:	001aba00 	andseq	fp, sl, r0, lsl #20
     c84:	50000100 	andpl	r0, r0, r0, lsl #2
		n--;
     c88:	00001ac0 	andeq	r1, r0, r0, asr #21
     c8c:	00001ac8 	andeq	r1, r0, r8, asr #21
     c90:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     c94:	d800001a 	stmdale	r0, {r1, r3, r4}
void __pi_ondomain (lword d) {
     c98:	0100001a 	tsteq	r0, sl, lsl r0
     c9c:	00005000 	andeq	r5, r0, r0
		if (__pi_systat.effpdm > 1)
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	1ab40000 	bne	fed00cac <_estack+0xdecfbcac>
			__pi_systat.effpdm = 1;
     ca8:	1abc0000 	bne	fef00cb0 <_estack+0xdeefbcb0>
	PRCMPowerDomainOn (d);
     cac:	00010000 	andeq	r0, r1, r0
     cb0:	001ac051 	andseq	ip, sl, r1, asr r0
     cb4:	001aca00 	andseq	ip, sl, r0, lsl #20
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     cb8:	51000100 	mrspl	r0, (UNDEF: 16)
     cbc:	00001acc 	andeq	r1, r0, ip, asr #21
     cc0:	00001ad8 	ldrdeq	r1, [r0], -r8
	__pi_systat.ondmns |= d;
     cc4:	00510001 	subseq	r0, r1, r1
     cc8:	00000000 	andeq	r0, r0, r0
}
     ccc:	a6000000 	strge	r0, [r0], -r0
     cd0:	ae00001a 	mcrge	0, 0, r0, cr0, cr10, {0}
void __pi_offdomain (lword d) {
     cd4:	0100001a 	tsteq	r0, sl, lsl r0
     cd8:	1ab25000 	bne	fec94ce0 <_estack+0xdec8fce0>
	PRCMPowerDomainOff (d);
     cdc:	1ab40000 	bne	fed00ce4 <_estack+0xdecfbce4>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ce0:	00010000 	andeq	r0, r1, r0
     ce4:	00000050 	andeq	r0, r0, r0, asr r0
     ce8:	00000000 	andeq	r0, r0, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     cec:	001aa600 	andseq	sl, sl, r0, lsl #12
     cf0:	001aa800 	andseq	sl, sl, r0, lsl #16
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cf4:	52000100 	andpl	r0, r0, #0, 2
	...
			__pi_systat.effpdm = __pi_systat.reqpdm;
     d00:	00001a92 	muleq	r0, r2, sl
	__pi_systat.ondmns &= ~d;
     d04:	00001a94 	muleq	r0, r4, sl
     d08:	00500001 	subseq	r0, r0, r1
}
     d0c:	00000000 	andeq	r0, r0, r0
     d10:	92000000 	andls	r0, r0, #0
void __pi_syserror (word ec, const char *m) {
     d14:	9c00001a 	stcls	0, cr0, [r0], {26}
	diag ("SYSERR: %x, %s", ec, m);
     d18:	0100001a 	tsteq	r0, sl, lsl r0
     d1c:	1aa05100 	bne	fe815124 <_estack+0xde810124>
  __ASM volatile ("cpsid i" : : : "memory");
     d20:	1aa60000 	bne	fe980d28 <_estack+0xde97bd28>
     d24:	00010000 	andeq	r0, r1, r0
     d28:	00000051 	andeq	r0, r0, r1, asr r0
     d2c:	00000000 	andeq	r0, r0, r0
		all_leds_blink;
     d30:	001a9200 	andseq	r9, sl, r0, lsl #4
     d34:	001a9600 	andseq	r9, sl, r0, lsl #12
     d38:	52000100 	andpl	r0, r0, #0, 2
	...
     d4c:	00500001 	subseq	r0, r0, r1
	...
	while (1) {
     d5c:	01000000 	mrseq	r0, (UNDEF: 0)
     d60:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	setdel = __pi_mintk - __pi_old;
     d70:	00010000 	andeq	r0, r1, r0
     d74:	00000050 	andeq	r0, r0, r0, asr r0
     d78:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	sti_tim;
     d90:	00510001 	subseq	r0, r1, r1
}
     d94:	00000000 	andeq	r0, r0, r0
     d98:	76000000 	strvc	r0, [r0], -r0
     d9c:	8c00001a 	stchi	0, cr0, [r0], {26}
     da0:	0100001a 	tsteq	r0, sl, lsl r0
     da4:	1a905000 	bne	fe414dac <_estack+0xde40fdac>
	cli_aux;
     da8:	1a920000 	bne	fe480db0 <_estack+0xde47bdb0>
     dac:	00010000 	andeq	r0, r1, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db0:	00000050 	andeq	r0, r0, r0, asr r0
     db4:	00000000 	andeq	r0, r0, r0
     db8:	001a7600 	andseq	r7, sl, r0, lsl #12
     dbc:	001a7800 	andseq	r7, sl, r0, lsl #16
	sti_aux;
     dc0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
     dcc:	00001a76 	andeq	r1, r0, r6, ror sl
void AONRTCIntHandler () {
     dd0:	00001a7a 	andeq	r1, r0, sl, ror sl
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     dd4:	00520001 	subseq	r0, r2, r1
     dd8:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     ddc:	66000000 	strvs	r0, [r0], -r0
		if (__pi_utims [0] == 0)
     de0:	6800001a 	stmdavs	r0, {r1, r3, r4}
     de4:	0100001a 	tsteq	r0, sl, lsl r0
		if (*(__pi_utims [0])) {
     de8:	00005000 	andeq	r5, r0, r0
     dec:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [0]))--;
     df0:	1a660000 	bne	1980df8 <__ccfg+0x1960e50>
		if (__pi_utims [1] == 0)
     df4:	1a680000 	bne	1a00dfc <__ccfg+0x19e0e54>
		if (*(__pi_utims [1])) {
     df8:	00010000 	andeq	r0, r1, r0
			aux_timer_inactive = 0;
     dfc:	001a6c51 	andseq	r6, sl, r1, asr ip
			(*(__pi_utims [1]))--;
     e00:	001a7600 	andseq	r7, sl, r0, lsl #12
		if (__pi_utims [2] == 0)
     e04:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (__pi_utims [3] != 0) {
     e10:	00001a58 	andeq	r1, r0, r8, asr sl
			if (*(__pi_utims [3])) {
     e14:	00001a5c 	andeq	r1, r0, ip, asr sl
				aux_timer_inactive = 0;
     e18:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
				(*(__pi_utims [3]))--;
     e1c:	6600001a 			; <UNDEFINED> instruction: 0x6600001a
	if (__pi_systat.ledsts) {
     e20:	0100001a 	tsteq	r0, sl, lsl r0
     e24:	00005300 	andeq	r5, r0, r0, lsl #6
		if (__pi_systat.ledblc++ == 0) {
     e28:	00000000 	andeq	r0, r0, r0
     e2c:	1a5c0000 	bne	1700e34 <__ccfg+0x16e0e8c>
			if (__pi_systat.ledblk) {
     e30:	1a660000 	bne	1980e38 <__ccfg+0x1960e90>
     e34:	00010000 	andeq	r0, r1, r0
     e38:	00000050 	andeq	r0, r0, r0, asr r0
	...
     e48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				__pi_systat.ledblk = 0;
     e54:	00510001 	subseq	r0, r1, r1
	...
				__pi_systat.ledblc = 200;
     e64:	01000000 	mrseq	r0, (UNDEF: 0)
	if (events & AON_RTC_EVFLAGS_CH0) {
     e68:	00005200 	andeq	r5, r0, r0, lsl #4
		cli_tim;
     e6c:	00000000 	andeq	r0, r0, r0
		__pi_new += setdel;
     e70:	00010000 	andeq	r0, r1, r0
     e74:	00000052 	andeq	r0, r0, r2, asr r0
	...
		RISE_N_SHINE;
     e84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		aux_timer_inactive = 1;
     e90:	00001a34 	andeq	r1, r0, r4, lsr sl
				if (__pi_systat.ledsts & 0x1)
     e94:	00001a3c 	andeq	r1, r0, ip, lsr sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e98:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
     e9c:	4200001a 	andmi	r0, r0, #26
				if (__pi_systat.ledsts & 0x2)
     ea0:	0100001a 	tsteq	r0, sl, lsl r0
     ea4:	1a425000 	bne	1094eac <__ccfg+0x1074f04>
     ea8:	1a580000 	bne	1600eb0 <__ccfg+0x15e0f08>
				if (__pi_systat.ledsts & 0x8)
     eac:	00010000 	andeq	r0, r1, r0
				__pi_systat.ledblk = 1;
     eb0:	00000053 	andeq	r0, r0, r3, asr r0
	...
			cli_aux;
     ec0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ecc:	00500001 	subseq	r0, r0, r1
	...
     edc:	01000000 	mrseq	r0, (UNDEF: 0)
     ee0:	00005000 	andeq	r5, r0, r0
word tci_update_delay_ticks (Boolean force) {
     ee4:	00000000 	andeq	r0, r0, r0
	cli_tim;
     ee8:	00010000 	andeq	r0, r1, r0
     eec:	00000050 	andeq	r0, r0, r0, asr r0
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     efc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				AON_RTC_O_CH0CMP)) - gettav ());
     f08:	00570001 	subseq	r0, r7, r1
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f18:	01000000 	mrseq	r0, (UNDEF: 0)
}
     f1c:	00005600 	andeq	r5, r0, r0, lsl #12
	...
		return YES;
     f2c:	00010000 	andeq	r0, r1, r0
     f30:	00000050 	andeq	r0, r0, r0, asr r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f34:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
     f38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	UARTConfigSetExpClk (UART0_BASE,
     f44:	00580001 	subseq	r0, r8, r1
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	01000000 	mrseq	r0, (UNDEF: 0)
     f50:	00005000 	andeq	r5, r0, r0
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f60:	00010000 	andeq	r0, r1, r0
     f64:	00000054 	andeq	r0, r0, r4, asr r0
     f68:	00000000 	andeq	r0, r0, r0
	urates [0] = rate;
     f6c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
     f80:	00580001 	subseq	r0, r8, r1
     f84:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f88:	01000000 	mrseq	r0, (UNDEF: 0)
     f8c:	00005800 	andeq	r5, r0, r0, lsl #16
     f90:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f94:	1c0c0000 	stcne	0, cr0, [ip], {-0}
     f98:	1c140000 	ldcne	0, cr0, [r4], {-0}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	001c1450 	andseq	r1, ip, r0, asr r4
	__pi_uart_setrate (urates [0], __pi_uart);
     fa4:	001c1e00 	andseq	r1, ip, r0, lsl #28
     fa8:	50000100 	andpl	r0, r0, r0, lsl #2
     fac:	00001c24 	andeq	r1, r0, r4, lsr #24
     fb0:	00001c30 	andeq	r1, r0, r0, lsr ip
     fb4:	44500001 	ldrbmi	r0, [r0], #-1
     fb8:	4e00001c 	mcrmi	0, 0, r0, cr0, cr12, {0}
     fbc:	0100001c 	tsteq	r0, ip, lsl r0
	switch (operation) {
     fc0:	00005000 	andeq	r5, r0, r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	1c1a0000 	ldcne	0, cr0, [sl], {-0}
     fcc:	1c4c0000 	marne	acc0, r0, ip
     fd0:	00010000 	andeq	r0, r1, r0
     fd4:	001c4c54 	andseq	r4, ip, r4, asr ip
				*buf++ = uart_a_read;
     fd8:	001c4e00 	andseq	r4, ip, r0, lsl #28
     fdc:	52000100 	andpl	r0, r0, #0, 2
			while (len && uart_a_char_available) {
     fe0:	00001c4e 	andeq	r1, r0, lr, asr #24
     fe4:	00001c50 	andeq	r1, r0, r0, asr ip
     fe8:	00540001 	subseq	r0, r4, r1
			if (len != operation) {
     fec:	00000000 	andeq	r0, r0, r0
}
     ff0:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
     ff4:	b0000017 	andlt	r0, r0, r7, lsl r0
			uart_a_disable_int;
     ff8:	01000017 	tsteq	r0, r7, lsl r0
			if (uart_a_char_available) {
     ffc:	00005600 	andeq	r5, r0, r0, lsl #12
				*buf++ = uart_a_read;
    1000:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
    1004:	17940000 	ldrne	r0, [r4, r0]
    1008:	179e0000 	ldrne	r0, [lr, r0]
			if (uart_a_char_available) {
    100c:	00010000 	andeq	r0, r1, r0
    1010:	00000053 	andeq	r0, r0, r3, asr r0
	...
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    1020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			return -2;
    102c:	00540001 	subseq	r0, r4, r1
	...
			while (len && uart_a_room_in_tx) {
    103c:	01000000 	mrseq	r0, (UNDEF: 0)
    1040:	00005000 	andeq	r5, r0, r0
			if (len != operation) {
    1044:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
    1048:	00010000 	andeq	r0, r1, r0
    104c:	00000050 	andeq	r0, r0, r0, asr r0
			if (uart_a_room_in_tx) {
    1050:	00000000 	andeq	r0, r0, r0
    1054:	0019fc00 	andseq	pc, r9, r0, lsl #24
				uart_a_enable_int;
    1058:	001a1500 	andseq	r1, sl, r0, lsl #10
    105c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				uart_a_write (*buf);
    1068:	000019fc 	strdeq	r1, [r0], -ip
    106c:	00001a12 	andeq	r1, r0, r2, lsl sl
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1070:	00510001 	subseq	r0, r1, r1
    1074:	00000000 	andeq	r0, r0, r0
			uart_a_enable_int;
    1078:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    107c:	ec000019 	stc	0, cr0, [r0], {25}
    1080:	01000019 	tsteq	r0, r9, lsl r0
			return 0;
    1084:	19ec5000 	stmibne	ip!, {ip, lr}^
			if (len == UART_CNTRL_SETRATE) {
    1088:	19f00000 	ldmibne	r0!, {}^	; <UNPREDICTABLE>
				if (__pi_uart_setrate (*((word*)buf),
    108c:	00010000 	andeq	r0, r1, r0
    1090:	0019f454 	andseq	pc, r9, r4, asr r4	; <UNPREDICTABLE>
    1094:	0019fc00 	andseq	pc, r9, r0, lsl #24
				syserror (EREQPAR, "uar");
    1098:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				return 1;
    10a4:	000019d8 	ldrdeq	r1, [r0], -r8
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    10a8:	000019ef 	andeq	r1, r0, pc, ror #19
			syserror (ENOOPER, "uai");
    10ac:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
    10b0:	fc000019 	stc2	0, cr0, [r0], {25}
    10b4:	01000019 	tsteq	r0, r9, lsl r0
    10b8:	00005100 	andeq	r5, r0, r0, lsl #2
    10bc:	00000000 	andeq	r0, r0, r0
    10c0:	19e00000 	stmibne	r0!, {}^	; <UNPREDICTABLE>
    10c4:	19ef0000 	stmibne	pc!, {}^	; <UNPREDICTABLE>
    10c8:	00010000 	andeq	r0, r1, r0
    10cc:	0019f453 	andseq	pc, r9, r3, asr r4	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    10d0:	0019fc00 	andseq	pc, r9, r0, lsl #24
void UART0IntHandler () {
    10d4:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10e8:	00500001 	subseq	r0, r0, r1
	...
		RISE_N_SHINE;
    10f8:	01000000 	mrseq	r0, (UNDEF: 0)
		i_trigger (devevent (UART_A, READ));
    10fc:	00005100 	andeq	r5, r0, r0, lsl #2
    1100:	00000000 	andeq	r0, r0, r0
    1104:	00010000 	andeq	r0, r1, r0
    1108:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1118:	52000100 	andpl	r0, r0, #0, 2
	...
    1124:	00520001 	subseq	r0, r2, r1
    1128:	00000000 	andeq	r0, r0, r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    112c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1130:	c2000019 	andgt	r0, r0, #25
    1134:	01000019 	tsteq	r0, r9, lsl r0
		i_trigger (devevent (UART_A, WRITE));
    1138:	00005300 	andeq	r5, r0, r0, lsl #6
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    113c:	00000000 	andeq	r0, r0, r0
    1140:	195c0000 	ldmdbne	ip, {}^	; <UNPREDICTABLE>
		RISE_N_SHINE;
    1144:	19620000 	stmdbne	r2!, {}^	; <UNPREDICTABLE>
    1148:	00010000 	andeq	r0, r1, r0
    114c:	00000050 	andeq	r0, r0, r0, asr r0
		i_trigger (devevent (UART_A, WRITE));
    1150:	00000000 	andeq	r0, r0, r0
    1154:	001d0400 	andseq	r0, sp, r0, lsl #8
    1158:	001d0a00 	andseq	r0, sp, r0, lsl #20
    115c:	50000100 	andpl	r0, r0, r0, lsl #2
    1160:	00001d0a 	andeq	r1, r0, sl, lsl #26
    1164:	00001d38 	andeq	r1, r0, r8, lsr sp
    1168:	00550001 	subseq	r0, r5, r1
    116c:	00000000 	andeq	r0, r0, r0
    1170:	04000000 	streq	r0, [r0], #-0
    1174:	0f00001d 	svceq	0x0000001d
    1178:	0100001d 	tsteq	r0, sp, lsl r0
}
    117c:	1d0f5100 	stfnes	f5, [pc, #-0]	; 1184 <UART0IntHandler+0xb4>
    1180:	1d380000 	ldcne	0, cr0, [r8, #-0]
    1184:	00010000 	andeq	r0, r1, r0
    1188:	00000054 	andeq	r0, r0, r4, asr r0
    118c:	00000000 	andeq	r0, r0, r0
void __buttons_setirq (int val) {
    1190:	001d2000 	andseq	r2, sp, r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1194:	001d2400 	andseq	r2, sp, r0, lsl #8
    1198:	53000100 	movwpl	r0, #256	; 0x100
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    119c:	00001d26 	andeq	r1, r0, r6, lsr #26
    11a0:	00001d2a 	andeq	r1, r0, sl, lsr #26
    11a4:	2a530001 	bcs	14c11b0 <__ccfg+0x14a1208>
		bn = BUTTON_GPIO (__button_list [i]);
    11a8:	3800001d 	stmdacc	r0, {r0, r2, r3, r4}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11ac:	0100001d 	tsteq	r0, sp, lsl r0
    11b0:	00005200 	andeq	r5, r0, r0, lsl #4
    11b4:	00000000 	andeq	r0, r0, r0
    11b8:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    11bc:	188d0000 	stmne	sp, {}	; <UNPREDICTABLE>
    11c0:	00010000 	andeq	r0, r1, r0
}
    11c4:	00000050 	andeq	r0, r0, r0, asr r0
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	00188800 	andseq	r8, r8, r0, lsl #16
    11d0:	00188d00 	andseq	r8, r8, r0, lsl #26
void __pinlist_setirq (int val) {
    11d4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11e8:	00500001 	subseq	r0, r0, r1
    11ec:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11f0:	01000000 	mrseq	r0, (UNDEF: 0)
    11f4:	00005000 	andeq	r5, r0, r0
	...
}
    1204:	00010000 	andeq	r0, r1, r0
    1208:	00000053 	andeq	r0, r0, r3, asr r0
    120c:	00000000 	andeq	r0, r0, r0
void GPIOIntHandler () {
    1210:	53000100 	movwpl	r0, #256	; 0x100
	...
	buttons_disable ();
    121c:	0000185c 	andeq	r1, r0, ip, asr r8
    1220:	00001864 	andeq	r1, r0, r4, ror #16
	i_trigger ((aword)&__button_list);
    1224:	64500001 	ldrbvs	r0, [r0], #-1
    1228:	77000018 	smladvc	r0, r8, r0, r0
    122c:	01000018 	tsteq	r0, r8, lsl r0
    1230:	18785300 	ldmdane	r8!, {r8, r9, ip, lr}^
    1234:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    1238:	00010000 	andeq	r0, r1, r0
    123c:	00000053 	andeq	r0, r0, r3, asr r0
    1240:	00000000 	andeq	r0, r0, r0
    1244:	00186600 	andseq	r6, r8, r0, lsl #12
    1248:	00187700 	andseq	r7, r8, r0, lsl #14
    124c:	50000100 	andpl	r0, r0, r0, lsl #2
	RISE_N_SHINE;
    1250:	00001878 	andeq	r1, r0, r8, ror r8
    1254:	00001888 	andeq	r1, r0, r8, lsl #17
    1258:	00500001 	subseq	r0, r0, r1
	...
	i_trigger ((aword)(&__input_pins));
    1268:	01000000 	mrseq	r0, (UNDEF: 0)
    126c:	00005000 	andeq	r5, r0, r0
    1270:	00000000 	andeq	r0, r0, r0
    1274:	00010000 	andeq	r0, r1, r0
    1278:	00000053 	andeq	r0, r0, r3, asr r0
    127c:	00000000 	andeq	r0, r0, r0
    1280:	53000100 	movwpl	r0, #256	; 0x100
	...
	RISE_N_SHINE;
    1294:	00500001 	subseq	r0, r0, r1
    1298:	00000000 	andeq	r0, r0, r0
    129c:	01000000 	mrseq	r0, (UNDEF: 0)
}
    12a0:	00005000 	andeq	r5, r0, r0
	...
    12b0:	00010000 	andeq	r0, r1, r0
void system_init () {
    12b4:	00000053 	andeq	r0, r0, r3, asr r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12b8:	00000000 	andeq	r0, r0, r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    12bc:	00189000 	andseq	r9, r8, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12c0:	00189600 	andseq	r9, r8, r0, lsl #12
    12c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    12d0:	00001890 	muleq	r0, r0, r8
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12d4:	00001899 	muleq	r0, r9, r8
    12d8:	00510001 	subseq	r0, r1, r1
    12dc:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12e0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12e4:	dc000018 	stcle	0, cr0, [r0], {24}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12e8:	01000018 	tsteq	r0, r8, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ec:	18e05400 	stmiane	r0!, {sl, ip, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f0:	192e0000 	stmdbne	lr!, {}	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12f4:	00010000 	andeq	r0, r1, r0
		pin = (port_confs [i] >> 19) & 0x1f;
    12f8:	00193054 	andseq	r3, r9, r4, asr r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12fc:	00193a00 	andseq	r3, r9, r0, lsl #20
		pin = (port_confs [i] >> 19) & 0x1f;
    1300:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    130c:	000018d6 	ldrdeq	r1, [r0], -r6
    1310:	000018d8 	ldrdeq	r1, [r0], -r8
		if (port_confs [i] & 0x80)
    1314:	e0500001 	subs	r0, r0, r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1318:	30000018 	andcc	r0, r0, r8, lsl r0
    131c:	01000019 	tsteq	r0, r9, lsl r0
		if (port_confs [i] & 0x40)
    1320:	00005000 	andeq	r5, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1324:	00000000 	andeq	r0, r0, r0
    1328:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    132c:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1330:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1334:	00198a50 	andseq	r8, r9, r0, asr sl
	all_leds_blink;
    1338:	0019a400 	andseq	sl, r9, r0, lsl #8
    133c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1348:	00001970 	andeq	r1, r0, r0, ror r9
    134c:	00001986 	andeq	r1, r0, r6, lsl #19
    1350:	8a510001 	bhi	144135c <__ccfg+0x14213b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1354:	90000019 	andls	r0, r0, r9, lsl r0
    1358:	01000019 	tsteq	r0, r9, lsl r0
    135c:	00005100 	andeq	r5, r0, r0, lsl #2
    1360:	00000000 	andeq	r0, r0, r0
    1364:	19820000 	stmibne	r2, {}	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1368:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    136c:	00010000 	andeq	r0, r1, r0
    1370:	00000050 	andeq	r0, r0, r0, asr r0
	IntEnable (INT_AON_RTC_COMB);
    1374:	00000000 	andeq	r0, r0, r0
    1378:	00198200 	andseq	r8, r9, r0, lsl #4
    137c:	00198600 	andseq	r8, r9, r0, lsl #12
	__pi_malloc_init ();
    1380:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    138c:	00001bc4 	andeq	r1, r0, r4, asr #23
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1390:	00001bd2 	ldrdeq	r1, [r0], -r2
    1394:	d8500001 	ldmdale	r0, {r0}^
    1398:	eb00001b 	bl	140c <system_init+0x158>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    139c:	0100001b 	tsteq	r0, fp, lsl r0
    13a0:	00005000 	andeq	r5, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    13a4:	00000000 	andeq	r0, r0, r0
    13a8:	1bd00000 	blne	ff4013b0 <_estack+0xdf3fc3b0>
    13ac:	1bd20000 	blne	ff4813b4 <_estack+0xdf47c3b4>
	urates [0] = UART_RATE / 100;
    13b0:	00010000 	andeq	r0, r1, r0
    13b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    13c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    13d0:	00500001 	subseq	r0, r0, r1
	...
			devinit [i] . init (devinit [i] . param);
    13e0:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13e4:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	IntEnable (INT_UART0_COMB);
    13f4:	00010000 	andeq	r0, r1, r0
}
    13f8:	00000054 	andeq	r0, r0, r4, asr r0
	tci_run_auxiliary_timer ();
    13fc:	00000000 	andeq	r0, r0, r0
		diag ("");
    1400:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		diag ("Leftover RAM: %d bytes",
    1414:	00500001 	subseq	r0, r0, r1
    1418:	00000000 	andeq	r0, r0, r0
    141c:	01000000 	mrseq	r0, (UNDEF: 0)
    1420:	00005000 	andeq	r5, r0, r0
    1424:	00000000 	andeq	r0, r0, r0
    1428:	00020000 	andeq	r0, r2, r0
    142c:	00000075 	andeq	r0, r0, r5, ror r0
    1430:	00000000 	andeq	r0, r0, r0
    1434:	24ac0000 	strtcs	r0, [ip], #0
    1438:	24cc0000 	strbcs	r0, [ip], #0
    143c:	00010000 	andeq	r0, r1, r0
    1440:	0024d250 	eoreq	sp, r4, r0, asr r2
    1444:	0024d300 	eoreq	sp, r4, r0, lsl #6
    1448:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1454:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
    1458:	000024dc 	ldrdeq	r2, [r0], -ip
    145c:	dc540001 	mrrcle	0, 0, r0, r4, cr1
    1460:	df000024 	svcle	0x00000024
    1464:	01000024 	tsteq	r0, r4, lsr #32
    1468:	00005000 	andeq	r5, r0, r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    146c:	00000000 	andeq	r0, r0, r0
    1470:	24780000 	ldrbtcs	r0, [r8], #-0
    1474:	24880000 	strcs	r0, [r8], #0
    1478:	00010000 	andeq	r0, r1, r0
    147c:	00248e50 	eoreq	r8, r4, r0, asr lr
    1480:	00249600 	eoreq	r9, r4, r0, lsl #12
    1484:	50000100 	andpl	r0, r0, r0, lsl #2
	...
__attribute__ ((noreturn)) void __pi_release () {
    1490:	00002494 	muleq	r0, r4, r4
    1494:	000024a0 	andeq	r2, r0, r0, lsr #9
    1498:	00530001 	subseq	r0, r3, r1
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    149c:	00000000 	andeq	r0, r0, r0
	check_stack_overflow;
    14a0:	96000000 	strls	r0, [r0], -r0
    14a4:	9c000024 	stcls	0, cr0, [r0], {36}	; 0x24
    14a8:	01000024 	tsteq	r0, r4, lsr #32
	update_n_wake (MAX_WORD, NO);
    14ac:	249c5000 	ldrcs	r5, [ip], #0
    14b0:	24a00000 	strtcs	r0, [r0], #0
    14b4:	00020000 	andeq	r0, r2, r0
	for_all_tasks (__pi_curr) {
    14b8:	00000073 	andeq	r0, r0, r3, ror r0
    14bc:	00000000 	andeq	r0, r0, r0
    14c0:	24380000 	ldrtcs	r0, [r8], #-0
  __ASM volatile ("cpsid i" : : : "memory");
    14c4:	24480000 	strbcs	r0, [r8], #-0
	__SLEEP;
    14c8:	00010000 	andeq	r0, r1, r0
    14cc:	00244e50 	eoreq	r4, r4, r0, asr lr
    14d0:	00245600 	eoreq	r5, r4, r0, lsl #12
    14d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	switch (__pi_systat.effpdm) {
    14e0:	00002438 	andeq	r2, r0, r8, lsr r4
    14e4:	0000244a 	andeq	r2, r0, sl, asr #8
    14e8:	4e510001 	cdpmi	0, 5, cr0, cr1, cr1, {0}
    14ec:	78000024 	stmdavc	r0, {r2, r5}
			__WFI ();
    14f0:	01000024 	tsteq	r0, r4, lsr #32
    14f4:	00005100 	andeq	r5, r0, r0, lsl #2
    14f8:	00000000 	andeq	r0, r0, r0
	check_stack_overflow;
    14fc:	24540000 	ldrbcs	r0, [r4], #-0
    1500:	245c0000 	ldrbcs	r0, [ip], #-0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1504:	00010000 	andeq	r0, r1, r0
    1508:	00246653 	eoreq	r6, r4, r3, asr r6
			(__pi_curr->code) (tstate (__pi_curr));
    150c:	00247800 	eoreq	r7, r4, r0, lsl #16
			goto Redo;
    1510:	53000100 	movwpl	r0, #256	; 0x100
	...
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    151c:	00002456 	andeq	r2, r0, r6, asr r4
    1520:	00002464 	andeq	r2, r0, r4, ror #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1524:	66500001 	ldrbvs	r0, [r0], -r1
    1528:	68000024 	stmdavs	r0, {r2, r5}
    152c:	01000024 	tsteq	r0, r4, lsr #32
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1530:	24685000 	strbtcs	r5, [r8], #-0
    1534:	24780000 	ldrbtcs	r0, [r8], #-0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1538:	00020000 	andeq	r0, r2, r0
    153c:	00000073 	andeq	r0, r0, r3, ror r0
			__WFI ();
    1540:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	239c0000 	orrscs	r0, ip, #0
    1548:	23b60000 			; <UNDEFINED> instruction: 0x23b60000
}
    154c:	00010000 	andeq	r0, r1, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1550:	0023b650 	eoreq	fp, r3, r0, asr r6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1554:	0023bc00 	eoreq	fp, r3, r0, lsl #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1558:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    155c:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1560:	000023c6 	andeq	r2, r0, r6, asr #7
    1564:	c6500001 	ldrbgt	r0, [r0], -r1
    1568:	38000023 	stmdacc	r0, {r0, r1, r5}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    156c:	01000024 	tsteq	r0, r4, lsr #32
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1570:	00005500 	andeq	r5, r0, r0, lsl #10
    1574:	00000000 	andeq	r0, r0, r0
    1578:	239c0000 	orrscs	r0, ip, #0
    157c:	23b60000 			; <UNDEFINED> instruction: 0x23b60000
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1580:	00010000 	andeq	r0, r1, r0
    1584:	0023b651 	eoreq	fp, r3, r1, asr r6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1588:	0023bc00 	eoreq	fp, r3, r0, lsl #24
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    158c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    1590:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
    1594:	000023c6 	andeq	r2, r0, r6, asr #7
    1598:	c6510001 	ldrbgt	r0, [r1], -r1
    159c:	38000023 	stmdacc	r0, {r0, r1, r5}
			SysCtrlSetRechargeBeforePowerDown
    15a0:	01000024 	tsteq	r0, r4, lsr #32
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    15a4:	00005700 	andeq	r5, r0, r0, lsl #14
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	239c0000 	orrscs	r0, ip, #0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15b0:	23b60000 			; <UNDEFINED> instruction: 0x23b60000
    15b4:	00010000 	andeq	r0, r1, r0
    15b8:	0023b652 	eoreq	fp, r3, r2, asr r6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    15bc:	0023bc00 	eoreq	fp, r3, r0, lsl #24
    15c0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15c4:	000023bc 			; <UNDEFINED> instruction: 0x000023bc
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15c8:	000023c6 	andeq	r2, r0, r6, asr #7
    15cc:	c6520001 	ldrbgt	r0, [r2], -r1
    15d0:	38000023 	stmdacc	r0, {r0, r1, r5}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    15d4:	01000024 	tsteq	r0, r4, lsr #32
			while (!(AONWUCPowerStatusGet () &
    15d8:	00005400 	andeq	r5, r0, r0, lsl #8
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	23f60000 	mvnscs	r0, #0
    15e4:	240e0000 	strcs	r0, [lr], #-0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15e8:	00010000 	andeq	r0, r1, r0
    15ec:	00240e50 	eoreq	r0, r4, r0, asr lr
    15f0:	00241300 	eoreq	r1, r4, r0, lsl #6
    15f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1600:	00002414 	andeq	r2, r0, r4, lsl r4
    1604:	00002423 	andeq	r2, r0, r3, lsr #8
			SysCtrlAdjustRechargeAfterPowerDown ();
    1608:	00500001 	subseq	r0, r0, r1
			reinit_uart ();
    160c:	00000000 	andeq	r0, r0, r0
    1610:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1614:	5a000023 	bpl	16a8 <__pi_release+0x218>
}
    1618:	01000023 	tsteq	r0, r3, lsr #32
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    161c:	235a5000 	cmpcs	sl, #0
    1620:	23880000 	orrcs	r0, r8, #0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1624:	00010000 	andeq	r0, r1, r0
    1628:	00000054 	andeq	r0, r0, r4, asr r0
    162c:	00000000 	andeq	r0, r0, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1630:	00234c00 	eoreq	r4, r3, r0, lsl #24
    1634:	00236000 	eoreq	r6, r3, r0
    1638:	51000100 	mrspl	r0, (UNDEF: 16)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    163c:	00002364 	andeq	r2, r0, r4, ror #6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1640:	00002373 	andeq	r2, r0, r3, ror r3
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1644:	00510001 	subseq	r0, r1, r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1648:	00000000 	andeq	r0, r0, r0
    164c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1650:	60000023 	andvs	r0, r0, r3, lsr #32
    1654:	01000023 	tsteq	r0, r3, lsr #32
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1658:	23645200 	cmncs	r4, #0, 4
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    165c:	23730000 	cmncs	r3, #0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1660:	00010000 	andeq	r0, r1, r0
    1664:	00000052 	andeq	r0, r0, r2, asr r0
			PRCMPowerDomainOff (
    1668:	00000000 	andeq	r0, r0, r0
    166c:	00237400 	eoreq	r7, r3, r0, lsl #8
	__SLEEP;
    1670:	00237e00 	eoreq	r7, r3, r0, lsl #28
    1674:	50000100 	andpl	r0, r0, r0, lsl #2
  __ASM volatile ("cpsie i" : : : "memory");
    1678:	0000237e 	andeq	r2, r0, lr, ror r3
	goto Redo;
    167c:	00002382 	andeq	r2, r0, r2, lsl #7
    1680:	00740007 	rsbseq	r0, r4, r7
    1684:	00722432 	rsbseq	r2, r2, r2, lsr r4
    1688:	00238222 	eoreq	r8, r3, r2, lsr #4
    168c:	00239c00 	eoreq	r9, r3, r0, lsl #24
    1690:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    16a4:	00500001 	subseq	r0, r0, r1
	...
    16b4:	01000000 	mrseq	r0, (UNDEF: 0)
    16b8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    16c8:	00010000 	andeq	r0, r1, r0
    16cc:	00000050 	andeq	r0, r0, r0, asr r0
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	cli_tim;
    16e8:	00510001 	subseq	r0, r1, r1
    16ec:	00000000 	andeq	r0, r0, r0
    16f0:	01000000 	mrseq	r0, (UNDEF: 0)
	diag ("PicOS halted");
    16f4:	00005600 	andeq	r5, r0, r0, lsl #12
	...
	__PCB = NULL;
    1704:	00010000 	andeq	r0, r1, r0
	release;
    1708:	00000050 	andeq	r0, r0, r0, asr r0
    170c:	00000000 	andeq	r0, r0, r0
    1710:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1724:	00500001 	subseq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1728:	00000000 	andeq	r0, r0, r0
	system_init ();
    172c:	01000000 	mrseq	r0, (UNDEF: 0)
	tcv_init ();
    1730:	00005000 	andeq	r5, r0, r0
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1740:	00010000 	andeq	r0, r1, r0
    1744:	00000051 	andeq	r0, r0, r1, asr r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1748:	00000000 	andeq	r0, r0, r0
    174c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	__pi_release ();
    1760:	00500001 	subseq	r0, r0, r1
    1764:	00000000 	andeq	r0, r0, r0
    1768:	01000000 	mrseq	r0, (UNDEF: 0)
    176c:	00005000 	andeq	r5, r0, r0
	...
	wfun = (aword)(pid->code);
    177c:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
    1780:	00000051 	andeq	r0, r0, r1, asr r0
		for (j = 0; j < nevents (i); j++) {
    1784:	00000000 	andeq	r0, r0, r0
    1788:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1794:	00002284 	andeq	r2, r0, r4, lsl #5
			if (i->Events [j] . Event == (aword)pid
    1798:	0000229c 	muleq	r0, ip, r2
    179c:	a2500001 	subsge	r0, r0, #1
    17a0:	ac000022 	stcge	0, cr0, [r0], {34}	; 0x22
				wakeupev (i, j);
    17a4:	01000022 	tsteq	r0, r2, lsr #32
    17a8:	22ae5000 	adccs	r5, lr, #0
	for_all_tasks (i) {
    17ac:	22bc0000 	adcscs	r0, ip, #0
}
    17b0:	00010000 	andeq	r0, r1, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b4:	0022c250 	eoreq	ip, r2, r0, asr r2
static void qfree (aword *ch) {
    17b8:	0022c400 	eoreq	ip, r2, r0, lsl #8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17bc:	50000100 	andpl	r0, r0, r0, lsl #2
	cc = (aword*)(mpools + MA_NP);
    17c0:	000022ce 	andeq	r2, r0, lr, asr #5
	m_setnextp (ch, chunk);
    17c4:	000022d0 	ldrdeq	r2, [r0], -r0
	m_setnextp (cc, ch);
    17c8:	00500001 	subseq	r0, r0, r1
}
    17cc:	00000000 	andeq	r0, r0, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    17d0:	84000000 	strhi	r0, [r0], #-0
    17d4:	be000022 	cdplt	0, 0, cr0, cr0, cr2, {1}
    17d8:	01000022 	tsteq	r0, r2, lsr #32
			m_setnextp (cc, m_nextp (chunk));
    17dc:	22c25100 	sbccs	r5, r2, #0, 2
			m_size (chunk) += m_hdrlen + m_size (ch);
    17e0:	22cd0000 	sbccs	r0, sp, #0
    17e4:	00010000 	andeq	r0, r1, r0
    17e8:	0022ce51 	eoreq	ip, r2, r1, asr lr
    17ec:	0022e400 	eoreq	lr, r2, r0, lsl #8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17f0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17fc:	00002284 	andeq	r2, r0, r4, lsl #5
			m_setnextp (cc, m_nextp (chunk));
    1800:	000022c1 	andeq	r2, r0, r1, asr #5
			m_size (ch) += m_hdrlen + m_size (chunk);
    1804:	c2520001 	subsgt	r0, r2, #1
    1808:	cd000022 	stcgt	0, cr0, [r0, #-136]	; 0xffffff78
    180c:	01000022 	tsteq	r0, r2, lsr #32
    1810:	22ce5200 	sbccs	r5, lr, #0, 4
    1814:	22e40000 	rsccs	r0, r4, #0
    1818:	00010000 	andeq	r0, r1, r0
			if (m_size (chunk) >= m_size (ch))
    181c:	00000052 	andeq	r0, r0, r2, asr r0
    1820:	00000000 	andeq	r0, r0, r0
    1824:	00229c00 	eoreq	r9, r2, r0, lsl #24
		chunk = m_nextp (chunk))
    1828:	0022a000 	eoreq	sl, r2, r0
    182c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	diag_wchar (c, a);
    1840:	00500001 	subseq	r0, r0, r1
}
    1844:	00000000 	andeq	r0, r0, r0
    1848:	01000000 	mrseq	r0, (UNDEF: 0)
	syserror (ESTATE, "state");
    184c:	00005000 	andeq	r5, r0, r0
	...
	for (i = 0; i < MAX_UTIMERS; i++)
    185c:	00010000 	andeq	r0, r1, r0
void utimer_add (address ut) {
    1860:	00000050 	andeq	r0, r0, r0, asr r0
    1864:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [i] == NULL)
    1868:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    187c:	00510001 	subseq	r0, r1, r1
	...
	TCI_RUN_AUXILIARY_TIMER;
    188c:	01000000 	mrseq	r0, (UNDEF: 0)
void update_n_wake (word min, Boolean force) {
    1890:	00005200 	andeq	r5, r0, r0, lsl #4
	if (TCI_UPDATE_DELAY_TICKS (force))
    1894:	00000000 	andeq	r0, r0, r0
    1898:	00010000 	andeq	r0, r1, r0
    189c:	00000055 	andeq	r0, r0, r5, asr r0
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    18ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    18b8:	00540001 	subseq	r0, r4, r1
	...
    18c8:	01000000 	mrseq	r0, (UNDEF: 0)
    18cc:	00005100 	andeq	r5, r0, r0, lsl #2
    18d0:	00000000 	andeq	r0, r0, r0
		for_all_tasks (i) {
    18d4:	00010000 	andeq	r0, r1, r0
	__pi_mintk = znew + min;
    18d8:	00000050 	andeq	r0, r0, r0, asr r0
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18e8:	52000100 	andpl	r0, r0, #0, 2
	...
    18f4:	00550001 	subseq	r0, r5, r1
    18f8:	00000000 	andeq	r0, r0, r0
    18fc:	9c000000 	stcls	0, cr0, [r0], {-0}
    1900:	b2000021 	andlt	r0, r0, #33	; 0x21
    1904:	01000021 	tsteq	r0, r1, lsr #32
    1908:	21b85000 			; <UNDEFINED> instruction: 0x21b85000
    190c:	21d80000 	bicscs	r0, r8, r0
    1910:	00010000 	andeq	r0, r1, r0
    1914:	00000050 	andeq	r0, r0, r0, asr r0
				wakeuptm (i);
    1918:	00000000 	andeq	r0, r0, r0
    191c:	00219c00 	eoreq	r9, r1, r0, lsl #24
		for_all_tasks (i) {
    1920:	0021b200 	eoreq	fp, r1, r0, lsl #4
				d = i->Timer - znew;
    1924:	51000100 	mrspl	r0, (UNDEF: 16)
    1928:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
    192c:	000021d0 	ldrdeq	r2, [r0], -r0
		if ((word)(__pi_mintk - znew) < min) 
    1930:	d2510001 	subsle	r0, r1, #1
    1934:	de000021 	cdple	0, 0, cr0, cr0, cr1, {1}
    1938:	01000021 	tsteq	r0, r1, lsr #32
	__pi_old = znew;
    193c:	00005100 	andeq	r5, r0, r0, lsl #2
}
    1940:	00000000 	andeq	r0, r0, r0
	TCI_RUN_DELAY_TIMER;
    1944:	219c0000 	orrscs	r0, ip, r0
}
    1948:	21b20000 			; <UNDEFINED> instruction: 0x21b20000
    194c:	00010000 	andeq	r0, r1, r0
    1950:	0021b252 	eoreq	fp, r1, r2, asr r2
    1954:	0021b800 	eoreq	fp, r1, r0, lsl #16
    1958:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
void proceed (word state) {
    195c:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
	prcdstate (__pi_curr, state);
    1960:	000021c4 	andeq	r2, r0, r4, asr #3
    1964:	c4520001 	ldrbgt	r0, [r2], #-1
	release;
    1968:	ea000021 	b	19f4 <__pi_join+0x1c>
    196c:	01000021 	tsteq	r0, r1, lsr #32
void __pi_wait (aword event, word state) {
    1970:	21f05400 	mvnscs	r5, r0, lsl #8
	sint j = nevents (__pi_curr);
    1974:	21f60000 	mvnscs	r0, r0
	if (j >= MAX_EVENTS_PER_TASK)
    1978:	00010000 	andeq	r0, r1, r0
    197c:	0021fa54 	eoreq	pc, r1, r4, asr sl	; <UNPREDICTABLE>
    1980:	00220e00 	eoreq	r0, r2, r0, lsl #28
		syserror (ENEVENTS, "sw");
    1984:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	incwait (__pi_curr);
    1990:	0000219c 	muleq	r0, ip, r1
	setestate (__pi_curr->Events [j], state, event);
    1994:	000021aa 	andeq	r2, r0, sl, lsr #3
}
    1998:	00530001 	subseq	r0, r3, r1
    199c:	00000000 	andeq	r0, r0, r0
    19a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
void __pi_trigger (aword event) {
    19a4:	24000022 	strcs	r0, [r0], #-34	; 0xffffffde
	for_all_tasks (i) {
    19a8:	01000022 	tsteq	r0, r2, lsr #32
		for (j = 0; j < nevents (i); j++) {
    19ac:	222a5000 	eorcs	r5, sl, #0
    19b0:	22420000 	subcs	r0, r2, #0
    19b4:	00010000 	andeq	r0, r1, r0
    19b8:	00000050 	andeq	r0, r0, r0, asr r0
			if (i->Events [j] . Event == event) {
    19bc:	00000000 	andeq	r0, r0, r0
    19c0:	0021e000 	eoreq	lr, r1, r0
    19c4:	0021ea00 	eoreq	lr, r1, r0, lsl #20
				wakeupev (i, j);
    19c8:	50000100 	andpl	r0, r0, r0, lsl #2
    19cc:	000021f0 	strdeq	r2, [r0], -r0
	for_all_tasks (i) {
    19d0:	000021f5 	strdeq	r2, [r0], -r5
}
    19d4:	fa500001 	blx	14019e0 <__ccfg+0x13e1a38>
aword __pi_join (aword pid, word st) {
    19d8:	08000021 	stmdaeq	r0, {r0, r5}
	for_all_tasks (i) {
    19dc:	01000022 	tsteq	r0, r2, lsr #32
    19e0:	00005000 	andeq	r5, r0, r0
	...
}
    19f0:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
    19f4:	00000050 	andeq	r0, r0, r0, asr r0
    19f8:	00000000 	andeq	r0, r0, r0
void delay (word d, word state) {
    19fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	settstate (__pi_curr, state);
    1a08:	00500001 	subseq	r0, r0, r1
    1a0c:	00000000 	andeq	r0, r0, r0
	update_n_wake (d, YES);
    1a10:	01000000 	mrseq	r0, (UNDEF: 0)
    1a14:	00005000 	andeq	r5, r0, r0
	...
	inctimer (__pi_curr);
    1a24:	00010000 	andeq	r0, r1, r0
    1a28:	00000051 	andeq	r0, r0, r1, asr r0
}
    1a2c:	00000000 	andeq	r0, r0, r0
    1a30:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		return (int) __pi_curr;
    1a3c:	00510001 	subseq	r0, r1, r1
	for_all_tasks (i)
    1a40:	00000000 	andeq	r0, r0, r0
}
    1a44:	01000000 	mrseq	r0, (UNDEF: 0)
		if (i->code == fun)
    1a48:	00005100 	andeq	r5, r0, r0, lsl #2
	...
int __pi_strlen (const char *s) {
    1a58:	00010000 	andeq	r0, r1, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1a5c:	00000054 	andeq	r0, r0, r4, asr r0
}
    1a60:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1a64:	70000a00 	andvc	r0, r0, r0, lsl #20
	while ((Boolean)(*d++ = *s++));
    1a68:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1a6c:	20000568 	andcs	r0, r0, r8, ror #10
    1a70:	00000022 	andeq	r0, r0, r2, lsr #32
}
    1a74:	00000000 	andeq	r0, r0, r0
	while (n-- && (*s != '\0'))
    1a78:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1a84:	0070000a 	rsbseq	r0, r0, sl
    1a88:	68032432 	stmdavs	r3, {r1, r4, r5, sl, sp}
		*d++ = *s++;
    1a8c:	22200005 	eorcs	r0, r0, #5
	...
	while (n--)
    1a98:	00540001 	subseq	r0, r4, r1
		*dest++ = *src++;
    1a9c:	00000000 	andeq	r0, r0, r0
    1aa0:	0a000000 	beq	1aa8 <__pi_memset+0x2>
    1aa4:	32007000 	andcc	r7, r0, #0
	while (n--)
    1aa8:	05680324 	strbeq	r0, [r8, #-804]!	; 0xfffffcdc
}
    1aac:	00222000 	eoreq	r2, r2, r0
	...
		syserror (ERESOURCE, "addv");
    1abc:	01000000 	mrseq	r0, (UNDEF: 0)
	if (ioreq [loc] != NULL)
    1ac0:	00005500 	andeq	r5, r0, r0, lsl #10
    1ac4:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "addv");
    1ac8:	00010000 	andeq	r0, r1, r0
	ioreq [loc] = rf;
    1acc:	00000055 	andeq	r0, r0, r5, asr r0
	...
sint io (word retry, word dev, word operation, char *buf, word len) {
    1adc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ae8:	00540001 	subseq	r0, r4, r1
	...
		syserror (ENODEVICE, "io");
    1af8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (len == 0)
    1afc:	00005000 	andeq	r5, r0, r0
	ret = (ioreq [dev]) (operation, buf, len);
    1b00:	00000000 	andeq	r0, r0, r0
    1b04:	00010000 	andeq	r0, r1, r0
	if (ret >= 0)
    1b08:	00000050 	andeq	r0, r0, r0, asr r0
	if (ret == -1) {
    1b0c:	00000000 	andeq	r0, r0, r0
    1b10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			release;
    1b24:	00550001 	subseq	r0, r5, r1
	...
			iowait (dev, operation, retry);
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
    1b38:	00005000 	andeq	r5, r0, r0
	...
		(ioreq [dev]) (NONE, buf, len);
    1b48:	00010000 	andeq	r0, r1, r0
    1b4c:	00000050 	andeq	r0, r0, r0, asr r0
    1b50:	00000000 	andeq	r0, r0, r0
}
    1b54:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		delay (-ret - 2, retry);
    1b60:	00500001 	subseq	r0, r0, r1
    1b64:	00000000 	andeq	r0, r0, r0
    1b68:	01000000 	mrseq	r0, (UNDEF: 0)
		release;
    1b6c:	00005000 	andeq	r5, r0, r0
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b7c:	00010000 	andeq	r0, r1, r0
    1b80:	00000051 	andeq	r0, r0, r1, asr r0
    1b84:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "mal1");
    1b88:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b94:	00510001 	subseq	r0, r1, r1
	...
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1ba4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ba8:	00005300 	andeq	r5, r0, r0, lsl #6
}
    1bac:	00000000 	andeq	r0, r0, r0
    1bb0:	000a0000 	andeq	r0, sl, r0
    1bb4:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1bb8:	00056803 	andeq	r6, r5, r3, lsl #16
    1bbc:	00002220 	andeq	r2, r0, r0, lsr #4
    1bc0:	00000000 	andeq	r0, r0, r0
void __pi_free (aword *ch) {
    1bc4:	00010000 	andeq	r0, r1, r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1bc8:	00000053 	andeq	r0, r0, r3, asr r0
    1bcc:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "malg");
    1bd0:	70000a00 	andvc	r0, r0, r0, lsl #20
    1bd4:	03243200 			; <UNDEFINED> instruction: 0x03243200
	mcfree [MA_NP] += m_size (ch);
    1bd8:	20000568 	andcs	r0, r0, r8, ror #10
		m_size (ch) ^= MALLOC_UMASK;
    1bdc:	00000022 	andeq	r0, r0, r2, lsr #32
    1be0:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    1be4:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (mevent [MA_NP] . nwait) {
    1bf0:	0070000a 	rsbseq	r0, r0, sl
		trigger ((aword)(&(mevent [MA_NP])));
    1bf4:	68032432 	stmdavs	r3, {r1, r4, r5, sl, sp}
		mevent [MA_NP] . nwait --;
    1bf8:	22200005 	eorcs	r0, r0, #5
	...
void kill (aword pid) {
    1c0c:	00500001 	subseq	r0, r0, r1
		pid = (aword) __pi_curr;
    1c10:	00000000 	andeq	r0, r0, r0
	j = NULL;
    1c14:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
    1c18:	00005000 	andeq	r5, r0, r0
	...
		if ((aword)i == pid) {
    1c28:	00010000 	andeq	r0, r1, r0
				__PCB = i->Next;
    1c2c:	00000053 	andeq	r0, r0, r3, asr r0
			killev (i);
    1c30:	00000000 	andeq	r0, r0, r0
			ufree (i);
    1c34:	53000100 	movwpl	r0, #256	; 0x100
	...
				release;
    1c40:	00530001 	subseq	r0, r3, r1
	...
}
    1c50:	01000000 	mrseq	r0, (UNDEF: 0)
    1c54:	00005200 	andeq	r5, r0, r0, lsl #4
    1c58:	00000000 	andeq	r0, r0, r0
	if (size < 8)
    1c5c:	00010000 	andeq	r0, r1, r0
		_size = 2;
    1c60:	00000052 	andeq	r0, r0, r2, asr r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c64:	00000000 	andeq	r0, r0, r0
		_size = (((aword)size) + 3) >> 2;
    1c68:	52000100 	andpl	r0, r0, #0, 2
	...
		if (mevent [MA_NP] . nfail != 255)
    1c74:	00520001 	subseq	r0, r2, r1
    1c78:	00000000 	andeq	r0, r0, r0
			mevent [MA_NP] . nfail ++;
    1c7c:	1c000000 	stcne	0, cr0, [r0], {-0}
		mnfree [MA_NP] = 0;
    1c80:	2a000021 	bcs	1d0c <__pi_fork+0x8>
    1c84:	01000021 	tsteq	r0, r1, lsr #32
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c88:	00005000 	andeq	r5, r0, r0
    1c8c:	00000000 	andeq	r0, r0, r0
			syserror (EMALLOC, "malc");
    1c90:	211c0000 	tstcs	ip, r0
    1c94:	212e0000 			; <UNDEFINED> instruction: 0x212e0000
		if (m_size (chunk) >= _size)
    1c98:	00010000 	andeq	r0, r1, r0
    1c9c:	00213451 	eoreq	r3, r1, r1, asr r4
		chunk = m_nextp (chunk)) {
    1ca0:	00214400 	eoreq	r4, r1, r0, lsl #8
		m_setnextp (cc, m_nextp (chunk));
    1ca4:	51000100 	mrspl	r0, (UNDEF: 16)
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ca8:	0000214c 	andeq	r2, r0, ip, asr #2
    1cac:	0000216e 	andeq	r2, r0, lr, ror #2
			m_size (chunk) = _size;
    1cb0:	70510001 	subsvc	r0, r1, r1
			cc = chunk + _size + m_hdrlen;
    1cb4:	72000021 	andvc	r0, r0, #33	; 0x21
    1cb8:	01000021 	tsteq	r0, r1, lsr #32
			m_size (cc) = waste - m_hdrlen;
    1cbc:	21865100 	orrcs	r5, r6, r0, lsl #2
			QFREE;
    1cc0:	219c0000 	orrscs	r0, ip, r0
		mevent [MA_NP] . nfail = 0;
    1cc4:	00010000 	andeq	r0, r1, r0
		mcfree [MA_NP] -= m_size (chunk);
    1cc8:	00000051 	andeq	r0, r0, r1, asr r0
    1ccc:	00000000 	andeq	r0, r0, r0
    1cd0:	00215800 	eoreq	r5, r1, r0, lsl #16
    1cd4:	00218200 	eoreq	r8, r1, r0, lsl #4
		m_size (chunk) |= MALLOC_UMASK;
    1cd8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			mnfree [MA_NP] = mcfree [MA_NP];
    1ce4:	00002136 	andeq	r2, r0, r6, lsr r1
}
    1ce8:	00002160 	andeq	r2, r0, r0, ror #2
    1cec:	60540001 	subsvs	r0, r4, r1
    1cf0:	74000021 	strvc	r0, [r0], #-33	; 0xffffffdf
    1cf4:	01000021 	tsteq	r0, r1, lsr #32
    1cf8:	21745000 	cmncs	r4, r0
    1cfc:	219c0000 	orrscs	r0, ip, r0
    1d00:	00010000 	andeq	r0, r1, r0
aword __pi_fork (fsmcode func, aword data) {
    1d04:	00000054 	andeq	r0, r0, r4, asr r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1d08:	00000000 	andeq	r0, r0, r0
    1d0c:	00213400 	eoreq	r3, r1, r0, lsl #8
    1d10:	00214700 	eoreq	r4, r1, r0, lsl #14
		if ((j = __PCB) == NULL)
    1d14:	50000100 	andpl	r0, r0, r0, lsl #2
	i->Next = NULL;
    1d18:	0000214c 	andeq	r2, r0, ip, asr #2
	i->data = data;
    1d1c:	0000214e 	andeq	r2, r0, lr, asr #2
		if ((j = __PCB) == NULL)
    1d20:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
}
    1d24:	51000021 	tstpl	r0, r1, lsr #32
			for (; j->Next != NULL; j = j->Next);
    1d28:	07000021 	streq	r0, [r0, -r1, lsr #32]
    1d2c:	32007100 	andcc	r7, r0, #0, 2
	return (aword) i;
    1d30:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
    1d34:	00002186 	andeq	r2, r0, r6, lsl #3
	if (mevent [MA_NP] . nwait != 255)
    1d38:	0000219c 	muleq	r0, ip, r1
    1d3c:	00500001 	subseq	r0, r0, r1
    1d40:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait ++;
    1d44:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
	wait ((aword)(&(mevent [MA_NP])), state);
    1d48:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    1d4c:	01000021 	tsteq	r0, r1, lsr #32
void diag (const char *mess, ...) {
    1d50:	21105000 	tstcs	r0, r0
    1d54:	21140000 	tstcs	r4, r0
    1d58:	00010000 	andeq	r0, r1, r0
	diag_disable_int (a, is);
    1d5c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1d6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	dgout ('\n');
    1d78:	00500001 	subseq	r0, r0, r1
	...
	diag_enable_int (a, is);
    1d88:	01000000 	mrseq	r0, (UNDEF: 0)
    1d8c:	00005100 	andeq	r5, r0, r0, lsl #2
}
    1d90:	00000000 	andeq	r0, r0, r0
    1d94:	00010000 	andeq	r0, r1, r0
    1d98:	00000055 	andeq	r0, r0, r5, asr r0
		if (*mess == '%') {
    1d9c:	00000000 	andeq	r0, r0, r0
    1da0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				mess++;
    1dac:	00550001 	subseq	r0, r5, r1
				val = va_arg (ap, lword);
    1db0:	00000000 	andeq	r0, r0, r0
				bc = 32;
    1db4:	01000000 	mrseq	r0, (UNDEF: 0)
				bc = 16;
    1db8:	00005100 	andeq	r5, r0, r0, lsl #2
			switch (*mess) {
    1dbc:	00000000 	andeq	r0, r0, r0
    1dc0:	00010000 	andeq	r0, r1, r0
    1dc4:	00000055 	andeq	r0, r0, r5, asr r0
	...
				dgout (*mess);
    1dd4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
					(val >> (bc - i)) & 0xf];
    1de8:	00500001 	subseq	r0, r0, r1
					dgout (v);
    1dec:	00000000 	andeq	r0, r0, r0
    1df0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
				while (i < bc) {
    1df4:	66000020 	strvs	r0, [r0], -r0, lsr #32
			mess++;
    1df8:	01000020 	tsteq	r0, r0, lsr #32
					d /= 10;
    1dfc:	206c5000 	rsbcs	r5, ip, r0
				if ((val >> (bc - 1)) & 1) {
    1e00:	208c0000 	addcs	r0, ip, r0
    1e04:	00010000 	andeq	r0, r1, r0
					dgout ('-');
    1e08:	0020cc50 	eoreq	ip, r0, r0, asr ip
    1e0c:	0020ce00 	eoreq	ip, r0, r0, lsl #28
						val |= 0xffff0000;
    1e10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1e1c:	00002038 	andeq	r2, r0, r8, lsr r0
    1e20:	00002068 	andeq	r2, r0, r8, rrx
    1e24:	68510001 	ldmdavs	r1, {r0}^
					v = (word) (val / d);
    1e28:	6c000020 	stcvs	0, cr0, [r0], {32}
					if (v || d == 1) break;
    1e2c:	01000020 	tsteq	r0, r0, lsr #32
    1e30:	206c5700 	rsbcs	r5, ip, r0, lsl #14
					d /= 10;
    1e34:	208c0000 	addcs	r0, ip, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1e38:	00010000 	andeq	r0, r1, r0
					dgout (v + '0');
    1e3c:	00208c51 	eoreq	r8, r0, r1, asr ip
    1e40:	00209800 	eoreq	r9, r0, r0, lsl #16
    1e44:	57000100 	strpl	r0, [r0, -r0, lsl #2]
					d /= 10;
    1e48:	0000209c 	muleq	r0, ip, r0
					val = val - (v * d);
    1e4c:	000020cc 	andeq	r2, r0, ip, asr #1
					if (d == 0) break;
    1e50:	cc570001 	mrrcgt	0, 0, r0, r7, cr1
					v = (word) (val / d);
    1e54:	d1000020 	tstle	r0, r0, lsr #32
    1e58:	01000020 	tsteq	r0, r0, lsr #32
				if (bc == 16)
    1e5c:	20d15100 	sbcscs	r5, r1, r0, lsl #2
				d = (bc == 16) ? 10000 : 1000000000;
    1e60:	20f80000 	rscscs	r0, r8, r0
					val &= 0xffff;
    1e64:	00010000 	andeq	r0, r1, r0
					dgout (*s);
    1e68:	00000057 	andeq	r0, r0, r7, asr r0
					s++;
    1e6c:	00000000 	andeq	r0, r0, r0
				while (*s != '\0') {
    1e70:	00203800 	eoreq	r3, r0, r0, lsl #16
    1e74:	00206800 	eoreq	r6, r0, r0, lsl #16
			dgout (*mess++);
    1e78:	91000200 	mrsls	r0, R8_usr
    1e7c:	00206c78 	eoreq	r6, r0, r8, ror ip
    1e80:	00208c00 	eoreq	r8, r0, r0, lsl #24
    1e84:	91000200 	mrsls	r0, R8_usr
    1e88:	00209c78 	eoreq	r9, r0, r8, ror ip
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e8c:	0020a800 	eoreq	sl, r0, r0, lsl #16
    1e90:	91000200 	mrsls	r0, R8_usr
    1e94:	0020cc78 	eoreq	ip, r0, r8, ror ip
    1e98:	0020f800 	eoreq	pc, r0, r0, lsl #16
	^ entropy
    1e9c:	91000200 	mrsls	r0, R8_usr
}
    1ea0:	00000078 	andeq	r0, r0, r8, ror r0
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	00208000 	eoreq	r8, r0, r0
    1eac:	00209000 	eoreq	r9, r0, r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1eb0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	word cs = size + hblenb;
    1eb4:	0000209c 	muleq	r0, ip, r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1eb8:	000020f8 	strdeq	r2, [r0], -r8
    1ebc:	00560001 	subseq	r0, r6, r1
	p -> length = size;
    1ec0:	00000000 	andeq	r0, r0, r0
}
    1ec4:	9c000000 	stcls	0, cr0, [r0], {-0}
	if (p->attributes.b.queued) {
    1ec8:	b6000020 	strlt	r0, [r0], -r0, lsr #32
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1ecc:	01000020 	tsteq	r0, r0, lsr #32
    1ed0:	20b65000 	adcscs	r5, r6, r0
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1ed4:	20ba0000 	adcscs	r0, sl, r0
		p->attributes.b.queued = 0;
    1ed8:	00010000 	andeq	r0, r1, r0
    1edc:	0020ba54 	eoreq	fp, r0, r4, asr sl
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ee0:	0020be00 	eoreq	fp, r0, r0, lsl #28
	deq (p);	// Remove from queue
    1ee4:	50000100 	andpl	r0, r0, r0, lsl #2
}
    1ee8:	000020be 	strheq	r2, [r0], -lr
	tfree ((address)p);
    1eec:	000020cc 	andeq	r2, r0, ip, asr #1
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ef0:	d2540001 	subsle	r0, r4, #1
    1ef4:	da000020 	ble	1f7c <dispose+0x40>
    1ef8:	01000020 	tsteq	r0, r0, lsr #32
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1efc:	20da5000 	sbcscs	r5, sl, r0
    1f00:	20f80000 	rscscs	r0, r8, r0
	if (q_empty (q))
    1f04:	00010000 	andeq	r0, r1, r0
    1f08:	00000054 	andeq	r0, r0, r4, asr r0
		trigger (q);
    1f0c:	00000000 	andeq	r0, r0, r0
	if (p->attributes.b.urgent) {
    1f10:	001fc800 	andseq	ip, pc, r0, lsl #16
		p->u.bqueue.next = q->next;
    1f14:	001fee00 	andseq	lr, pc, r0, lsl #28
		p->u.bqueue.prev = q;
    1f18:	50000100 	andpl	r0, r0, r0, lsl #2
		q->next->prev = (qitem_t*) p;
    1f1c:	00001ff2 	strdeq	r1, [r0], -r2
	p->attributes.b.queued = 1;
    1f20:	0000200f 	andeq	r2, r0, pc
    1f24:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
}
    1f28:	1e000020 	cdpne	0, 0, cr0, cr0, cr0, {1}
		p->u.bqueue.prev = q->prev;
    1f2c:	01000020 	tsteq	r0, r0, lsr #32
		q->prev->next = (qitem_t*) p;
    1f30:	00005000 	andeq	r5, r0, r0
		q->prev = (qitem_t*) p;
    1f34:	00000000 	andeq	r0, r0, r0
    1f38:	1fd20000 	svcne	0x00d20000
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f3c:	20180000 	andscs	r0, r8, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1f40:	00010000 	andeq	r0, r1, r0
	switch (dv) {
    1f44:	00201854 	eoreq	r1, r0, r4, asr r8
    1f48:	00201b00 	eoreq	r1, r0, r0, lsl #22
    1f4c:	50000100 	andpl	r0, r0, r0, lsl #2
    1f50:	0000201c 	andeq	r2, r0, ip, lsl r0
			p->attributes.b.urgent = 1;
    1f54:	00002022 	andeq	r2, r0, r2, lsr #32
    1f58:	22540001 	subscs	r0, r4, #1
			verify_ses (p, "dispose ses");
    1f5c:	25000020 	strcs	r0, [r0, #-32]	; 0xffffffe0
    1f60:	01000020 	tsteq	r0, r0, lsr #32
    1f64:	00005000 	andeq	r5, r0, r0
    1f68:	00000000 	andeq	r0, r0, r0
    1f6c:	1eb00000 	cdpne	0, 11, cr0, cr0, cr0, {0}
			verify_phy (p, "dispose phy");
    1f70:	1eb60000 	cdpne	0, 11, cr0, cr6, cr0, {0}
    1f74:	00010000 	andeq	r0, r1, r0
}
    1f78:	00000050 	andeq	r0, r0, r0, asr r0
			enq (oqueues [p->attributes.b.phys], p);
    1f7c:	00000000 	andeq	r0, r0, r0
			p->attributes.b.urgent = 1;
    1f80:	001ee000 	andseq	lr, lr, r0
    1f84:	001eed00 	andseq	lr, lr, r0, lsl #26
			verify_phy (p, "dispose phy");
    1f88:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f94:	00001ecc 	andeq	r1, r0, ip, asr #29
    1f98:	00001ede 	ldrdeq	r1, [r0], -lr
    1f9c:	00500001 	subseq	r0, r0, r1
			enq (oqueues [p->attributes.b.phys], p);
    1fa0:	00000000 	andeq	r0, r0, r0
    1fa4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
}
    1fa8:	fe00001e 	mcr2	0, 0, r0, cr0, cr14, {0}
			rlp (p);
    1fac:	0100001e 	tsteq	r0, lr, lsl r0
}
    1fb0:	1efe5000 	cdpne	0, 15, cr5, cr14, cr0, {0}
    1fb4:	1f040000 	svcne	0x00040000
    1fb8:	00010000 	andeq	r0, r1, r0
    1fbc:	001f0455 	andseq	r0, pc, r5, asr r4	; <UNPREDICTABLE>
    1fc0:	001f0d00 	andseq	r0, pc, r0, lsl #26
    1fc4:	50000100 	andpl	r0, r0, r0, lsl #2
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1fc8:	00001f0d 	andeq	r1, r0, sp, lsl #30
	if (b->attributes.b.outgoing) {
    1fcc:	00001f3c 	andeq	r1, r0, ip, lsr pc
	b = header (p);
    1fd0:	00550001 	subseq	r0, r5, r1
	if (b->attributes.b.outgoing) {
    1fd4:	00000000 	andeq	r0, r0, r0
		verify_ses (b, "tcv02");
    1fd8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    1fdc:	0000001e 	andeq	r0, r0, lr, lsl r0
    1fe0:	0100001f 	tsteq	r0, pc, lsl r0
    1fe4:	1f005100 	svcne	0x00005100
    1fe8:	1f040000 	svcne	0x00040000
		verify_plg (b, tcv_out, "tcv03");
    1fec:	00010000 	andeq	r0, r1, r0
    1ff0:	001f0454 	andseq	r0, pc, r4, asr r4	; <UNPREDICTABLE>
    1ff4:	001f0d00 	andseq	r0, pc, r0, lsl #26
    1ff8:	51000100 	mrspl	r0, (UNDEF: 16)
    1ffc:	00001f0d 	andeq	r1, r0, sp, lsl #30
    2000:	00001f3c 	andeq	r1, r0, ip, lsr pc
    2004:	00540001 	subseq	r0, r4, r1
    2008:	00000000 	andeq	r0, r0, r0
    200c:	fc000000 	stc2	0, cr0, [r0], {-0}
		dispose (b, plugins [b->attributes.b.plugin] ->
    2010:	fe00001e 	mcr2	0, 0, r0, cr0, cr14, {0}
}
    2014:	0100001e 	tsteq	r0, lr, lsl r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    2018:	1efe5000 	cdpne	0, 15, cr5, cr14, cr0, {0}
		rlp (b);
    201c:	1f040000 	svcne	0x00040000
}
    2020:	00010000 	andeq	r0, r1, r0
		rlp (b);
    2024:	00000055 	andeq	r0, r0, r5, asr r0
    2028:	00000000 	andeq	r0, r0, r0
    202c:	001efc00 	andseq	pc, lr, r0, lsl #24
    2030:	001f0000 	andseq	r0, pc, r0
    2034:	51000100 	mrspl	r0, (UNDEF: 16)
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2038:	00001f00 	andeq	r1, r0, r0, lsl #30
    203c:	00001f04 	andeq	r1, r0, r4, lsl #30
    2040:	00540001 	subseq	r0, r4, r1
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2044:	00000000 	andeq	r0, r0, r0
	va_start (ap, plid);
    2048:	3c000000 	stccc	0, cr0, [r0], {-0}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    204c:	6c00001f 	stcvs	0, cr0, [r0], {31}
    2050:	0100001f 	tsteq	r0, pc, lsl r0
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2054:	1f6c5000 	svcne	0x006c5000
    2058:	1f780000 	svcne	0x00780000
    205c:	00010000 	andeq	r0, r1, r0
    2060:	001f7854 	andseq	r7, pc, r4, asr r8	; <UNPREDICTABLE>
			syserror (ENODEVICE, "tcv04");
    2064:	001f7f00 	andseq	r7, pc, r0, lsl #30
		syserror (EMALLOC, "tcv05");
    2068:	51000100 	mrspl	r0, (UNDEF: 16)
	attp.b.outgoing = 1;
    206c:	00001f80 	andeq	r1, r0, r0, lsl #31
    2070:	00001fa6 	andeq	r1, r0, r6, lsr #31
    2074:	a6500001 	ldrbge	r0, [r0], -r1
    2078:	a800001f 	stmdage	r0, {r0, r1, r2, r3, r4}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    207c:	0100001f 	tsteq	r0, pc, lsl r0
		if (descriptors [fd] == NULL)
    2080:	1fa85400 	svcne	0x00a85400
    2084:	1faf0000 	svcne	0x00af0000
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2088:	00010000 	andeq	r0, r1, r0
		return ERROR;
    208c:	001fb050 	andseq	fp, pc, r0, asr r0	; <UNPREDICTABLE>
}
    2090:	001fc800 	andseq	ip, pc, r0, lsl #16
    2094:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	s->attpattern.b.session = fd;
    20a0:	00001f3c 	andeq	r1, r0, ip, lsr pc
	descriptors [fd] = s;
    20a4:	00001f46 	andeq	r1, r0, r6, asr #30
	q_init (&(s->rqueue));
    20a8:	00510001 	subseq	r0, r1, r1
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    20ac:	00000000 	andeq	r0, r0, r0
    20b0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    20b4:	a600001f 			; <UNDEFINED> instruction: 0xa600001f
    20b8:	0100001f 	tsteq	r0, pc, lsl r0
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    20bc:	1fa65000 	svcne	0x00a65000
    20c0:	1fa80000 	svcne	0x00a80000
    20c4:	00010000 	andeq	r0, r1, r0
	descriptors [fd] = s;
    20c8:	00000054 	andeq	r0, r0, r4, asr r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    20cc:	00000000 	andeq	r0, r0, r0
    20d0:	00225800 	eoreq	r5, r2, r0, lsl #16
	if (s == NULL)
    20d4:	00225e00 	eoreq	r5, r2, r0, lsl #28
		syserror (EMALLOC, "tcv05");
    20d8:	50000100 	andpl	r0, r0, r0, lsl #2
    20dc:	0000225e 	andeq	r2, r0, lr, asr r2
    20e0:	0000226a 	andeq	r2, r0, sl, ror #4
    20e4:	00530001 	subseq	r0, r3, r1
    20e8:	00000000 	andeq	r0, r0, r0
    20ec:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    20f0:	62000022 	andvs	r0, r0, #34	; 0x22
    20f4:	01000022 	tsteq	r0, r2, lsr #32
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20f8:	22625100 	rsbcs	r5, r2, #0, 2
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20fc:	226e0000 	rsbcs	r0, lr, #0
    2100:	00010000 	andeq	r0, r1, r0
    2104:	00227450 	eoreq	r7, r2, r0, asr r4
	plugins [ord] = pl;
    2108:	00227900 	eoreq	r7, r2, r0, lsl #18
	return 0;
    210c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    2118:	00002258 	andeq	r2, r0, r8, asr r2
	verify_fds (fd, "tcv10");
    211c:	00002266 	andeq	r2, r0, r6, ror #4
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2120:	66520001 	ldrbvs	r0, [r2], -r1
	verify_fds (fd, "tcv10");
    2124:	70000022 	andvc	r0, r0, r2, lsr #32
    2128:	01000022 	tsteq	r0, r2, lsr #32
    212c:	22745100 	rsbscs	r5, r4, #0, 2
	verify_plg (b, tcv_frm, "tcv11");
    2130:	22790000 	rsbscs	r0, r9, #0
	b = q_first (rq);
    2134:	00010000 	andeq	r0, r1, r0
	if (q_end (b, rq)) {
    2138:	00000051 	andeq	r0, r0, r1, asr r0
		if (state != WNONE) {
    213c:	00000000 	andeq	r0, r0, r0
    2140:	00226c00 	eoreq	r6, r2, r0, lsl #24
			when (rq, state);
    2144:	00226e00 	eoreq	r6, r2, r0, lsl #28
			release;
    2148:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	p = ((address)(b + 1));
    2154:	0000226c 	andeq	r2, r0, ip, ror #4
	verify_plg (b, tcv_frm, "tcv11");
    2158:	00002270 	andeq	r2, r0, r0, ror r2
    215c:	00510001 	subseq	r0, r1, r1
    2160:	00000000 	andeq	r0, r0, r0
    2164:	e4000000 	str	r0, [r0], #-0
    2168:	e8000022 	stmda	r0, {r1, r5}
    216c:	01000022 	tsteq	r0, r2, lsr #32
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2170:	00005000 	andeq	r5, r0, r0
    2174:	00000000 	andeq	r0, r0, r0
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2178:	22e40000 	rsccs	r0, r4, #0
    217c:	22f60000 	rscscs	r0, r6, #0
	b->u.pointers.tail =
    2180:	00010000 	andeq	r0, r1, r0
}
    2184:	0022f651 	eoreq	pc, r2, r1, asr r6	; <UNPREDICTABLE>
		return NULL;
    2188:	0022fa00 	eoreq	pc, r2, r0, lsl #20
    218c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2190:	000022fa 	strdeq	r2, [r0], -sl
    2194:	0000230a 	andeq	r2, r0, sl, lsl #6
    2198:	0a510001 	beq	14421a4 <__ccfg+0x14221fc>
	verify_fds (fd, "tcv16");
    219c:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
								Boolean urg) {
    21a0:	01000023 	tsteq	r0, r3, lsr #32
    21a4:	230c5600 	movwcs	r5, #50688	; 0xc600
	verify_fds (fd, "tcv16");
    21a8:	230f0000 	movwcs	r0, #61440	; 0xf000
    21ac:	00010000 	andeq	r0, r1, r0
    21b0:	00230f51 	eoreq	r0, r3, r1, asr pc
	verify_pld (s, tcv_frm, "tcv17");
    21b4:	00233200 	eoreq	r3, r3, r0, lsl #4
    21b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    21bc:	00002332 	andeq	r2, r0, r2, lsr r3
    21c0:	00002335 	andeq	r2, r0, r5, lsr r3
    21c4:	35510001 	ldrbcc	r0, [r1, #-1]
    21c8:	4c000023 	stcmi	0, cr0, [r0], {35}	; 0x23
    21cc:	01000023 	tsteq	r0, r3, lsr #32
    21d0:	00005600 	andeq	r5, r0, r0, lsl #12
	ptrs.head = (word) fd;
    21d4:	00000000 	andeq	r0, r0, r0
	ptrs.tail = (word) urg;
    21d8:	22e40000 	rsccs	r0, r4, #0
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21dc:	22f90000 	rscscs	r0, r9, #0
    21e0:	00010000 	andeq	r0, r1, r0
		if (state != WNONE) {
    21e4:	0022f952 	eoreq	pc, r2, r2, asr r9	; <UNPREDICTABLE>
    21e8:	0022fa00 	eoreq	pc, r2, r0, lsl #20
}
    21ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			when (eid, state);
    21f0:	000022fa 	strdeq	r2, [r0], -sl
    21f4:	0000230f 	andeq	r2, r0, pc, lsl #6
			release;
    21f8:	0f520001 	svceq	0x00520001
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21fc:	32000023 	andcc	r0, r0, #35	; 0x23
    2200:	01000023 	tsteq	r0, r3, lsr #32
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2204:	23325500 	teqcs	r2, #0, 10
    2208:	23350000 	teqcs	r5, #0
    220c:	00010000 	andeq	r0, r1, r0
    2210:	00233552 	eoreq	r3, r3, r2, asr r5
    2214:	00234c00 	eoreq	r4, r3, r0, lsl #24
    2218:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			tmwait (state);
    2224:	00002310 	andeq	r2, r0, r0, lsl r3
    2228:	00002316 	andeq	r2, r0, r6, lsl r3
	b->attributes = s->attpattern;
    222c:	18500001 	ldmdane	r0, {r0}^
		b->attributes.b.urgent = 1;
    2230:	2b000023 	blcs	22c4 <tcv_control+0x40>
    2234:	01000023 	tsteq	r0, r3, lsr #32
	b->u.pointers.head = ptrs.head;
    2238:	232b5000 			; <UNDEFINED> instruction: 0x232b5000
	b->u.pointers.tail = length;
    223c:	23320000 	teqcs	r2, #0
	return (address) (b + 1);
    2240:	00010000 	andeq	r0, r1, r0
    2244:	00233654 	eoreq	r3, r3, r4, asr r6
    2248:	00233c00 	eoreq	r3, r3, r0, lsl #24
    224c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2258:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    225c:	000022f6 	strdeq	r2, [r0], -r6
    2260:	00510001 	subseq	r0, r1, r1
	verify_fph (phy, "tcv23");
    2264:	00000000 	andeq	r0, r0, r0
    2268:	fc000000 	stc2	0, cr0, [r0], {-0}
    226c:	15000024 	strne	r0, [r0, #-36]	; 0xffffffdc
    2270:	01000025 	tsteq	r0, r5, lsr #32
}
    2274:	25205200 	strcs	r5, [r0, #-512]!	; 0xfffffe00
	return (physical [phy]) (opt, arg);
    2278:	25340000 	ldrcs	r0, [r4, #-0]!
    227c:	00010000 	andeq	r0, r1, r0
    2280:	00000052 	andeq	r0, r0, r2, asr r0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2284:	00000000 	andeq	r0, r0, r0
	if (opt < 0) {
    2288:	0024fc00 	eoreq	pc, r4, r0, lsl #24
		if (fd < 0)
    228c:	00251500 	eoreq	r1, r5, r0, lsl #10
		if (opt == PHYSOPT_PLUGINFO) {
    2290:	53000100 	movwpl	r0, #256	; 0x100
			if (fd >= TCV_MAX_PLUGS)
    2294:	00002524 	andeq	r2, r0, r4, lsr #10
			if ((p = plugins [fd]) == NULL)
    2298:	00002534 	andeq	r2, r0, r4, lsr r5
    229c:	00530001 	subseq	r0, r3, r1
	...
		return physinfo [fd];
    22ac:	01000000 	mrseq	r0, (UNDEF: 0)
	verify_fds (fd, "tcv22");
    22b0:	00005000 	andeq	r5, r0, r0
    22b4:	00000000 	andeq	r0, r0, r0
    22b8:	00010000 	andeq	r0, r1, r0
    22bc:	00000050 	andeq	r0, r0, r0, asr r0
	...
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    22cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			return 0;
    22d8:	00510001 	subseq	r0, r1, r1
	...
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22e8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (dsp != TCV_DSP_PASS) {
    22ec:	00005200 	andeq	r5, r0, r0, lsl #4
		if (ses == NONE)
    22f0:	00000000 	andeq	r0, r0, r0
			syserror (EREQPAR, "tcv26");
    22f4:	00010000 	andeq	r0, r1, r0
		verify_fds (ses, "tcv27");
    22f8:	00000052 	andeq	r0, r0, r2, asr r0
	...
    2308:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			dispose (p, dsp);
    231c:	00500001 	subseq	r0, r0, r1
	...
			return (address)(p + 1);
    232c:	01000000 	mrseq	r0, (UNDEF: 0)
    2330:	00005000 	andeq	r5, r0, r0
	if ((p = apb (size)) != NULL)
    2334:	00000000 	andeq	r0, r0, r0
    2338:	00050000 	andeq	r0, r5, r0
		return (address)(p + 1);
    233c:	00000003 	andeq	r0, r0, r3
	...
    2348:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2354:	00030005 	andeq	r0, r3, r5
	...
	physinfo [phy] = info;
    2368:	01000000 	mrseq	r0, (UNDEF: 0)
    236c:	00005000 	andeq	r5, r0, r0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2370:	00000000 	andeq	r0, r0, r0
    2374:	00010000 	andeq	r0, r1, r0
    2378:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EMALLOC, "tcv29");
    237c:	00000000 	andeq	r0, r0, r0
    2380:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    238c:	00500001 	subseq	r0, r0, r1
	...
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    239c:	01000000 	mrseq	r0, (UNDEF: 0)
	verify_fph (phy, "tcv30");
    23a0:	00005000 	andeq	r5, r0, r0
	...
    23b0:	00010000 	andeq	r0, r1, r0
    23b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    23d8:	00510001 	subseq	r0, r1, r1
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23dc:	00000000 	andeq	r0, r0, r0
    23e0:	01000000 	mrseq	r0, (UNDEF: 0)
    23e4:	00005600 	andeq	r5, r0, r0, lsl #12
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23f4:	00010000 	andeq	r0, r1, r0
    23f8:	00000052 	andeq	r0, r0, r2, asr r0
	...
	len -= (ap.head + ap.tail);
    2408:	53000100 	movwpl	r0, #256	; 0x100
	...
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    241c:	00540001 	subseq	r0, r4, r1
    2420:	00000000 	andeq	r0, r0, r0
	return 1;
    2424:	01000000 	mrseq	r0, (UNDEF: 0)
    2428:	00005400 	andeq	r5, r0, r0, lsl #8
    242c:	00000000 	andeq	r0, r0, r0
    2430:	00010000 	andeq	r0, r1, r0
    2434:	00000054 	andeq	r0, r0, r4, asr r0
	...
	verify_fph (phy, "tcv32");
    2444:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	oq = oqueues [phy];
    2450:	00500001 	subseq	r0, r0, r1
	...
	deq (b);	// Dequeue the packet ...
    2460:	01000000 	mrseq	r0, (UNDEF: 0)
}
    2464:	00005100 	andeq	r5, r0, r0, lsl #2
		return NULL;
    2468:	00000000 	andeq	r0, r0, r0
    246c:	00010000 	andeq	r0, r1, r0
    2470:	00000056 	andeq	r0, r0, r6, asr r0
    2474:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv33");
    2478:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    248c:	00520001 	subseq	r0, r2, r1
	oq = oqueues [phy];
    2490:	00000000 	andeq	r0, r0, r0
	b = q_first (oq);
    2494:	01000000 	mrseq	r0, (UNDEF: 0)
		return NULL;
    2498:	00005400 	andeq	r5, r0, r0, lsl #8
	...
}
    24a8:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    24ac:	00000054 	andeq	r0, r0, r4, asr r0
	...
	verify_plg (b, tcv_xmt, "tcv34");
    24bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    24d0:	00500001 	subseq	r0, r0, r1
	dispose (b, plugins [b->attributes.b.plugin] ->
    24d4:	00000000 	andeq	r0, r0, r0
}
    24d8:	01000000 	mrseq	r0, (UNDEF: 0)
	dispose (b, plugins [b->attributes.b.plugin] ->
    24dc:	00005500 	andeq	r5, r0, r0, lsl #10
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	00010000 	andeq	r0, r1, r0
}
    24e8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    pui32Src = &_etext;
    24f8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    __asm("    ldr     r0, =_bss\n"
    2504:	00560001 	subseq	r0, r6, r1
    2508:	00000000 	andeq	r0, r0, r0
    250c:	01000000 	mrseq	r0, (UNDEF: 0)
    2510:	00005600 	andeq	r5, r0, r0, lsl #12
   main();
    2514:	00000000 	andeq	r0, r0, r0
    FaultISR();
    2518:	00010000 	andeq	r0, r1, r0
        *pui32Dest++ = *pui32Src++;
    251c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    252c:	52000100 	andpl	r0, r0, #0, 2
	...
    2538:	00520001 	subseq	r0, r2, r1
static byte get_byte () {
    253c:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2540:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2544:	c8000025 	stmdagt	r0, {r0, r2, r5}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2548:	01000025 	tsteq	r0, r5, lsr #32
    254c:	00005000 	andeq	r5, r0, r0
		if (ee_inp)
    2550:	00000000 	andeq	r0, r0, r0
			b |= 1;
    2554:	25b80000 	ldrcs	r0, [r8, #0]!
    2558:	25c80000 	strbcs	r0, [r8]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    255c:	00010000 	andeq	r0, r1, r0
	for (b = 0, i = 0; i < 8; i++) {
    2560:	00000051 	andeq	r0, r0, r1, asr r0
}
    2564:	00000000 	andeq	r0, r0, r0
    2568:	0025da00 	eoreq	sp, r5, r0, lsl #20
    256c:	0025de00 	eoreq	sp, r5, r0, lsl #28
static void put_byte (byte b) {
    2570:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    257c:	000025a0 	andeq	r2, r0, r0, lsr #11
		if (b & 0x80)
    2580:	000025ab 	andeq	r2, r0, fp, lsr #11
    2584:	00500001 	subseq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2588:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < 8; i++) {
    258c:	70000000 	andvc	r0, r0, r0
		b <<= 1;
    2590:	8c000025 	stchi	0, cr0, [r0], {37}	; 0x25
	for (i = 0; i < 8; i++) {
    2594:	01000025 	tsteq	r0, r5, lsr #32
}
    2598:	25945000 	ldrcs	r5, [r4]
    259c:	25a00000 	strcs	r0, [r0, #0]!
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    25a0:	00010000 	andeq	r0, r1, r0
    25a4:	00000050 	andeq	r0, r0, r0, asr r0
	put_byte (cmd);
    25a8:	00000000 	andeq	r0, r0, r0
    25ac:	00254c00 	eoreq	r4, r5, r0, lsl #24
}
    25b0:	00255000 	eoreq	r5, r5, r0
    25b4:	50000100 	andpl	r0, r0, r0, lsl #2
static void wwait (word st, word del) {
    25b8:	00002554 	andeq	r2, r0, r4, asr r5
    25bc:	00002570 	andeq	r2, r0, r0, ror r5
    25c0:	00500001 	subseq	r0, r0, r1
	while (dopen && (rdsr () & 1)) {
    25c4:	00000000 	andeq	r0, r0, r0
    25c8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    25cc:	9e000026 	cdpls	0, 0, cr0, cr0, cr6, {1}
    25d0:	01000026 	tsteq	r0, r6, lsr #32
	put_byte (CMD_RDSR);
    25d4:	00005000 	andeq	r5, r0, r0
	r = get_byte ();
    25d8:	00000000 	andeq	r0, r0, r0
    25dc:	26980000 	ldrcs	r0, [r8], r0
	while (dopen && (rdsr () & 1)) {
    25e0:	26a30000 	strtcs	r0, [r3], r0
}
    25e4:	00010000 	andeq	r0, r1, r0
		if (st == WNONE)
    25e8:	0026a351 	eoreq	sl, r6, r1, asr r3
    25ec:	0026fe00 	eoreq	pc, r6, r0, lsl #28
			mdelay (1);
    25f0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			delay (del, st);
    25fc:	000026a4 	andeq	r2, r0, r4, lsr #13
			release;
    2600:	000026ab 	andeq	r2, r0, fp, lsr #13
    2604:	b0500001 	subslt	r0, r0, r1
    2608:	b6000026 	strlt	r0, [r0], -r6, lsr #32
static void ready () {
    260c:	01000026 	tsteq	r0, r6, lsr #32
	if (dopen) {
    2610:	26bc5000 	ldrtcs	r5, [ip], r0
		wwait (WNONE, 1);
    2614:	26ce0000 	strbcs	r0, [lr], r0
    2618:	00010000 	andeq	r0, r1, r0
    261c:	0026ce55 	eoreq	ip, r6, r5, asr lr
	dstat = 0;
    2620:	0026d200 	eoreq	sp, r6, r0, lsl #4
}
    2624:	50000100 	andpl	r0, r0, r0, lsl #2
    2628:	000026d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    262c:	000026fe 	strdeq	r2, [r0], -lr
	udelay (1);
    2630:	00550001 	subseq	r0, r5, r1
    2634:	00000000 	andeq	r0, r0, r0
	udelay (1);
    2638:	c2000000 	andgt	r0, r0, #0
		dopen = DOPEN_TEMP;
    263c:	c6000026 	strgt	r0, [r0], -r6, lsr #32
    2640:	01000026 	tsteq	r0, r6, lsr #32
    2644:	26c65000 	strbcs	r5, [r6], r0
    2648:	26ce0000 	strbcs	r0, [lr], r0
static void cclose () {
    264c:	00010000 	andeq	r0, r1, r0
	if (dopen == DOPEN_TEMP) {
    2650:	0026d457 	eoreq	sp, r6, r7, asr r4
    2654:	0026dd00 	eoreq	sp, r6, r0, lsl #26
		wwait (WNONE, 1);
    2658:	50000100 	andpl	r0, r0, r0, lsl #2
    265c:	000026dd 	ldrdeq	r2, [r0], -sp
	cmd_0 (CMD_DP);
    2660:	000026f0 	strdeq	r2, [r0], -r0
    2664:	f0570001 			; <UNDEFINED> instruction: 0xf0570001
		dopen = 0;
    2668:	f7000026 			; <UNDEFINED> instruction: 0xf7000026
}
    266c:	01000026 	tsteq	r0, r6, lsr #32
word ee_open () {
    2670:	26f75000 	ldrbtcs	r5, [r7], r0
	ready ();
    2674:	26fe0000 	ldrbtcs	r0, [lr], r0
	dopen = DOPEN_PERM;
    2678:	00010000 	andeq	r0, r1, r0
    267c:	00000057 	andeq	r0, r0, r7, asr r0
}
    2680:	00000000 	andeq	r0, r0, r0
	if (dopen) {
    2684:	00270400 	eoreq	r0, r7, r0, lsl #8
    2688:	00271200 	eoreq	r1, r7, r0, lsl #4
		dopen = DOPEN_TEMP;
    268c:	50000100 	andpl	r0, r0, r0, lsl #2
		cclose ();
    2690:	0000276e 	andeq	r2, r0, lr, ror #14
}
    2694:	0000277c 	andeq	r2, r0, ip, ror r7
int ser_out (word st, const char *m) {
    2698:	00500001 	subseq	r0, r0, r1
	if ((prcs = running (__outserial)) != 0) {
    269c:	00000000 	andeq	r0, r0, r0
    26a0:	04000000 	streq	r0, [r0], #-0
    26a4:	19000027 	stmdbne	r0, {r0, r1, r2, r5}
		join (prcs, st);
    26a8:	01000027 	tsteq	r0, r7, lsr #32
		release;
    26ac:	27195100 	ldrcs	r5, [r9, -r0, lsl #2]
	if (*m)
    26b0:	27380000 	ldrcs	r0, [r8, -r0]!
		prcs = strlen (m) +1;
    26b4:	00010000 	andeq	r0, r1, r0
    26b8:	00273857 	eoreq	r3, r7, r7, asr r8
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    26bc:	00274000 	eoreq	r4, r7, r0
    26c0:	51000100 	mrspl	r0, (UNDEF: 16)
    26c4:	00002740 	andeq	r2, r0, r0, asr #14
		umwait (st);
    26c8:	00002766 	andeq	r2, r0, r6, ror #14
    26cc:	66570001 	ldrbvs	r0, [r7], -r1
		prcs =  m [1] + 3;
    26d0:	69000027 	stmdbvs	r0, {r0, r1, r2, r5}
	if (*m)
    26d4:	01000027 	tsteq	r0, r7, lsr #32
		strcpy (buf, m);
    26d8:	27695100 	strbcs	r5, [r9, -r0, lsl #2]!
    26dc:	276e0000 	strbcs	r0, [lr, -r0]!
	if (runstrand (__outserial, buf) == 0) {
    26e0:	00010000 	andeq	r0, r1, r0
    26e4:	00276e57 	eoreq	r6, r7, r7, asr lr
		ufree (buf);
    26e8:	00277c00 	eoreq	r7, r7, r0, lsl #24
    26ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		memcpy (buf, m, prcs);
    26f8:	00002704 	andeq	r2, r0, r4, lsl #14
}
    26fc:	00002719 	andeq	r2, r0, r9, lsl r7
    2700:	19520001 	ldmdbne	r2, {r0}^
int ser_in (word st, char *buf, int len) {
    2704:	38000027 	stmdacc	r0, {r0, r1, r2, r5}
    2708:	01000027 	tsteq	r0, r7, lsr #32
	if (len == 0)
    270c:	27385500 	ldrcs	r5, [r8, -r0, lsl #10]!
	if (__inpline == NULL) {
    2710:	27400000 	strbcs	r0, [r0, -r0]
		if ((prcs = running (__inserial)) == 0) {
    2714:	00010000 	andeq	r0, r1, r0
    2718:	00274052 	eoreq	r4, r7, r2, asr r0
			prcs = runthread (__inserial);
    271c:	00276600 	eoreq	r6, r7, r0, lsl #12
    2720:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			if (prcs == 0) {
    2724:	00002766 	andeq	r2, r0, r6, ror #14
				npwait (st);
    2728:	00002769 	andeq	r2, r0, r9, ror #14
		release;
    272c:	69520001 	ldmdbvs	r2, {r0}^
		join (prcs, st);
    2730:	6e000027 	cdpvs	0, 0, cr0, cr0, cr7, {1}
    2734:	01000027 	tsteq	r0, r7, lsr #32
	if (*__inpline == NULL) // bin cmd
    2738:	276e5500 	strbcs	r5, [lr, -r0, lsl #10]!
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    273c:	277c0000 	ldrbcs	r0, [ip, -r0]!
	if (prcs >= len)
    2740:	00010000 	andeq	r0, r1, r0
		prcs = len-1;
    2744:	00000052 	andeq	r0, r0, r2, asr r0
	memcpy (buf, __inpline, prcs);
    2748:	00000000 	andeq	r0, r0, r0
    274c:	00271a00 	eoreq	r1, r7, r0, lsl #20
    2750:	00272000 	eoreq	r2, r7, r0
	ufree (__inpline);
    2754:	50000100 	andpl	r0, r0, r0, lsl #2
	__inpline = NULL;
    2758:	00002720 	andeq	r2, r0, r0, lsr #14
	if (*buf) // if it's NULL, it's a bin cmd
    275c:	00002723 	andeq	r2, r0, r3, lsr #14
		buf [prcs] = '\0';
    2760:	24510001 	ldrbcs	r0, [r1], #-1
}
    2764:	28000027 	stmdacs	r0, {r0, r1, r2, r5}
		prcs = strlen (__inpline);
    2768:	01000027 	tsteq	r0, r7, lsr #32
    276c:	27305000 	ldrcs	r5, [r0, -r0]!
		return 0;
    2770:	27350000 	ldrcs	r0, [r5, -r0]!
    2774:	00010000 	andeq	r0, r1, r0
    2778:	00274050 	eoreq	r4, r7, r0, asr r0
int ser_outf (word st, const char *m, ...) {
    277c:	00276200 	eoreq	r6, r7, r0, lsl #4
    2780:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	if ((prcs = running (__outserial)) != 0) {
    2784:	0000276c 	andeq	r2, r0, ip, ror #14
    2788:	0000276e 	andeq	r2, r0, lr, ror #14
		join (prcs, st);
    278c:	00500001 	subseq	r0, r0, r1
    2790:	00000000 	andeq	r0, r0, r0
		release;
    2794:	7c000000 	stcvc	0, cr0, [r0], {-0}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2798:	84000027 	strhi	r0, [r0], #-39	; 0xffffffd9
    279c:	01000027 	tsteq	r0, r7, lsr #32
    27a0:	00005000 	andeq	r5, r0, r0
		umwait (st);
    27a4:	00000000 	andeq	r0, r0, r0
    27a8:	27880000 	strcs	r0, [r8, r0]
	if (runstrand (__outserial, buf) == 0) {
    27ac:	27910000 	ldrcs	r0, [r1, r0]
    27b0:	00010000 	andeq	r0, r1, r0
    27b4:	00279150 	eoreq	r9, r7, r0, asr r1
		ufree (buf);
    27b8:	00279600 	eoreq	r9, r7, r0, lsl #12
		npwait (st);
    27bc:	56000100 	strpl	r0, [r0], -r0, lsl #2
}
    27c0:	00002796 	muleq	r0, r6, r7
    27c4:	0000279f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    27c8:	9f500001 	svcls	0x00500001
    27cc:	c6000027 	strgt	r0, [r0], -r7, lsr #32
int ser_inf (word st, const char *fmt, ...) {
    27d0:	01000027 	tsteq	r0, r7, lsr #32
    27d4:	27c65600 	strbcs	r5, [r6, r0, lsl #12]
	if (fmt == NULL)
    27d8:	27d00000 	ldrbcs	r0, [r0, r0]
	if (__inpline == NULL) {
    27dc:	00010000 	andeq	r0, r1, r0
		if ((prcs = running (__inserial)) == 0) {
    27e0:	00000050 	andeq	r0, r0, r0, asr r0
    27e4:	00000000 	andeq	r0, r0, r0
			prcs = runthread (__inserial);
    27e8:	0027a000 	eoreq	sl, r7, r0
    27ec:	0027a400 	eoreq	sl, r7, r0, lsl #8
			if (prcs == 0) {
    27f0:	50000100 	andpl	r0, r0, r0, lsl #2
				npwait (st);
    27f4:	000027a4 	andeq	r2, r0, r4, lsr #15
		release;
    27f8:	000027ac 	andeq	r2, r0, ip, lsr #15
		join (prcs, st);
    27fc:	ac550001 	mrrcge	0, 0, r0, r5, cr1
    2800:	b0000027 	andlt	r0, r0, r7, lsr #32
	va_start (ap, fmt);
    2804:	01000027 	tsteq	r0, r7, lsr #32
	prcs = vscan (__inpline, fmt, ap);
    2808:	27b05000 	ldrcs	r5, [r0, r0]!
    280c:	27c60000 	strbcs	r0, [r6, r0]
	ufree (__inpline);
    2810:	00010000 	andeq	r0, r1, r0
	__inpline = NULL;
    2814:	00000055 	andeq	r0, r0, r5, asr r0
}
    2818:	00000000 	andeq	r0, r0, r0
    281c:	0027d000 	eoreq	sp, r7, r0
    2820:	0027de00 	eoreq	sp, r7, r0, lsl #28
		return 0;
    2824:	50000100 	andpl	r0, r0, r0, lsl #2
    2828:	00002824 	andeq	r2, r0, r4, lsr #16
    282c:	00002830 	andeq	r2, r0, r0, lsr r8
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2830:	00500001 	subseq	r0, r0, r1
    2834:	00000000 	andeq	r0, r0, r0
    2838:	e6000000 	str	r0, [r0], -r0
	RF_cmdFs.frequency = 
    283c:	ec000027 	stc	0, cr0, [r0], {39}	; 0x27
}
    2840:	01000027 	tsteq	r0, r7, lsr #32
    2844:	27ec5000 	strbcs	r5, [ip, r0]!
    2848:	27ef0000 	strbcs	r0, [pc, r0]!
    284c:	00010000 	andeq	r0, r1, r0
static int option (int opt, address val) {
    2850:	0027f051 	eoreq	pc, r7, r1, asr r0	; <UNPREDICTABLE>
    2854:	0027f400 	eoreq	pc, r7, r0, lsl #8
    2858:	50000100 	andpl	r0, r0, r0, lsl #2
    285c:	000027fc 	strdeq	r2, [r0], -ip
    2860:	00002801 	andeq	r2, r0, r1, lsl #16
    2864:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    2868:	10000028 	andne	r0, r0, r8, lsr #32
    286c:	01000028 	tsteq	r0, r8, lsr #32
    2870:	28105000 	ldmdacs	r0, {ip, lr}
    2874:	28180000 	ldmdacs	r8, {}	; <UNPREDICTABLE>
    2878:	00010000 	andeq	r0, r1, r0
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    287c:	00000054 	andeq	r0, r0, r4, asr r0
    2880:	00000000 	andeq	r0, r0, r0
			goto RVal;
    2884:	002f9000 	eoreq	r9, pc, r0
			_BIS (dstate, DSTATE_RXON);
    2888:	002f9e00 	eoreq	r9, pc, r0, lsl #28
    288c:	50000100 	andpl	r0, r0, r0, lsl #2
	int ret = 0;
    2890:	00002f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
			p_trigger (drvprcs, qevent);
    2894:	00002fa4 	andeq	r2, r0, r4, lsr #31
    2898:	a4560001 	ldrbge	r0, [r6], #-1
    289c:	ae00002f 	cdpge	0, 0, cr0, cr0, cr15, {1}
    28a0:	0100002f 	tsteq	r0, pc, lsr #32
    28a4:	2fae5000 	svccs	0x00ae5000
    28a8:	2fb20000 	svccs	0x00b20000
    28ac:	00010000 	andeq	r0, r1, r0
    28b0:	002fb256 	eoreq	fp, pc, r6, asr r2	; <UNPREDICTABLE>
    28b4:	002fc200 	eoreq	ip, pc, r0, lsl #4
    28b8:	50000100 	andpl	r0, r0, r0, lsl #2
}
    28bc:	00002fc2 	andeq	r2, r0, r2, asr #31
			_BIC (dstate, DSTATE_RXON);
    28c0:	000030ba 	strheq	r3, [r0], -sl
    28c4:	00560001 	subseq	r0, r6, r1
			statid = (val == NULL) ? 0 : *val;
    28c8:	00000000 	andeq	r0, r0, r0
    28cc:	90000000 	andls	r0, r0, r0
	int ret = 0;
    28d0:	a000002f 	andge	r0, r0, pc, lsr #32
			ret = (int) statid;
    28d4:	0100002f 	tsteq	r0, pc, lsr #32
	if (val != NULL)
    28d8:	2fa45100 	svccs	0x00a45100
		*val = ret;
    28dc:	2fb00000 	svccs	0x00b00000
			ret = rbuffl + 2;
    28e0:	00010000 	andeq	r0, r1, r0
    28e4:	002fb251 	eoreq	fp, pc, r1, asr r2	; <UNPREDICTABLE>
			if (val != NULL) {
    28e8:	002fc200 	eoreq	ip, pc, r0, lsl #4
				memcpy (val, &rxstat,
    28ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				memset (&rxstat, 0, 
    28f8:	00002ff8 	strdeq	r2, [r0], -r8
			if (val == NULL)
    28fc:	0000300c 	andeq	r3, r0, ip
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2900:	0c550001 	mrrceq	0, 0, r0, r5, cr1
    2904:	12000030 	andne	r0, r0, #48	; 0x30
				utimer_set (bckf_timer, *val);
    2908:	02000030 	andeq	r0, r0, #48	; 0x30
    290c:	00007000 	andeq	r7, r0, r0
    2910:	00000000 	andeq	r0, r0, r0
			for (ret = 0; ret < 8; ret++)
    2914:	c2000000 	andgt	r0, r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    2918:	cb00002f 	blgt	29dc <option+0x18c>
					== patable [ret])
    291c:	0100002f 	tsteq	r0, pc, lsr #32
				if (RF_cmdPropRadioDivSetup.txPower
    2920:	2fcb5300 	svccs	0x00cb5300
			for (ret = 0; ret < 8; ret++)
    2924:	302e0000 	eorcc	r0, lr, r0
    2928:	00010000 	andeq	r0, r1, r0
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    292c:	0030605b 	eorseq	r6, r0, fp, asr r0
    2930:	00306400 	eorseq	r6, r0, r0, lsl #8
    2934:	5b000100 	blpl	2d3c <cc1350_driver+0xc>
	...
			_BIS (dstate, DSTATE_IRST);
    2940:	00002fcc 	andeq	r2, r0, ip, asr #31
    2944:	00002fd0 	ldrdeq	r2, [r0], -r0
    2948:	d6500001 	ldrble	r0, [r0], -r1
			ret = (int) channel;
    294c:	fc00002f 	stc2	0, cr0, [r0], {47}	; 0x2f
			goto RVal;
    2950:	0100002f 	tsteq	r0, pc, lsr #32
				(*val > 7) ? 7 : *val;
    2954:	2ffc5000 	svccs	0x00fc5000
    2958:	2fff0000 	svccs	0x00ff0000
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    295c:	00010000 	andeq	r0, r1, r0
    2960:	00306053 	eorseq	r6, r0, r3, asr r0
			plugch ();
    2964:	00306400 	eorseq	r6, r0, r0, lsl #8
			_BIS (dstate, DSTATE_IRST);
    2968:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2974:	00002850 	andeq	r2, r0, r0, asr r8
    2978:	0000287e 	andeq	r2, r0, lr, ror r8
    297c:	86500001 	ldrbhi	r0, [r0], -r1
    2980:	90000028 	andls	r0, r0, r8, lsr #32
    2984:	01000028 	tsteq	r0, r8, lsr #32
    2988:	28be5000 	ldmcs	lr!, {ip, lr}
    298c:	28d00000 	ldmcs	r0, {}^	; <UNPREDICTABLE>
    2990:	00010000 	andeq	r0, r1, r0
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2994:	0028d450 	eoreq	sp, r8, r0, asr r4
    2998:	0028d800 	eoreq	sp, r8, r0, lsl #16
    299c:	50000100 	andpl	r0, r0, r0, lsl #2
    29a0:	000028e0 	andeq	r2, r0, r0, ror #17
			syserror (EREQPAR, "cc13 op");
    29a4:	000028e4 	andeq	r2, r0, r4, ror #17
    29a8:	e6500001 	ldrb	r0, [r0], -r1
    29ac:	ec000028 	stc	0, cr0, [r0], {40}	; 0x28
    29b0:	01000028 	tsteq	r0, r8, lsr #32
    29b4:	28f45000 	ldmcs	r4!, {ip, lr}^
    29b8:	28f60000 	ldmcs	r6!, {}^	; <UNPREDICTABLE>
    29bc:	00010000 	andeq	r0, r1, r0
    29c0:	0028fc50 	eoreq	pc, r8, r0, asr ip	; <UNPREDICTABLE>
    29c4:	00290100 	eoreq	r0, r9, r0, lsl #2
    29c8:	50000100 	andpl	r0, r0, r0, lsl #2
    29cc:	00002910 	andeq	r2, r0, r0, lsl r9
    29d0:	00002916 	andeq	r2, r0, r6, lsl r9
    29d4:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    29d8:	30000029 	andcc	r0, r0, r9, lsr #32
    29dc:	01000029 	tsteq	r0, r9, lsr #32
static void issue_cmd (lword cmd) {
    29e0:	294c5000 	stmdbcs	ip, {ip, lr}^
    29e4:	29500000 	ldmdbcs	r0, {}^	; <UNPREDICTABLE>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29e8:	00010000 	andeq	r0, r1, r0
    29ec:	00295250 	eoreq	r5, r9, r0, asr r2
    29f0:	0029a400 	eoreq	sl, r9, r0, lsl #8
		if (res != 0x86)
    29f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (cnt-- == 0) {
    2a00:	00002850 	andeq	r2, r0, r0, asr r8
			diag ("HUP %lx %lx", cmd, res);
    2a04:	00002890 	muleq	r0, r0, r8
    2a08:	be510001 	cdplt	0, 5, cr0, cr1, cr1, {0}
			syserror (EHARDWARE, "hang ic0");
    2a0c:	d0000028 	andle	r0, r0, r8, lsr #32
		udelay (1);
    2a10:	01000028 	tsteq	r0, r8, lsr #32
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a14:	28d45100 	ldmcs	r4, {r8, ip, lr}^
}
    2a18:	28d80000 	ldmcs	r8, {}^	; <UNPREDICTABLE>
    2a1c:	00010000 	andeq	r0, r1, r0
    2a20:	0028d851 	eoreq	sp, r8, r1, asr r8
    2a24:	0028e000 	eoreq	lr, r8, r0
static void rx_de () {
    2a28:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	if ((dstate & DSTATE_RXAC) == 0)
    2a2c:	000028e0 	andeq	r2, r0, r0, ror #17
    2a30:	000028ee 	andeq	r2, r0, lr, ror #17
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2a34:	ee510001 	cdp	0, 5, cr0, cr1, cr1, {0}
	_BIC (dstate, DSTATE_RXAC);
    2a38:	f4000028 	vst4.8	{d0-d3}, [r0 :128], r8
    2a3c:	01000028 	tsteq	r0, r8, lsr #32
}
    2a40:	28f45400 	ldmcs	r4!, {sl, ip, lr}^
    2a44:	28f90000 	ldmcs	r9!, {}^	; <UNPREDICTABLE>
    2a48:	00010000 	andeq	r0, r1, r0
static void rf_off () {
    2a4c:	0028f951 	eoreq	pc, r8, r1, asr r9	; <UNPREDICTABLE>
	if ((dstate & DSTATE_RFON) == 0)
    2a50:	0028fc00 	eoreq	pc, r8, r0, lsl #24
    2a54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	IntDisable (INT_RFC_CPE_0);
    2a58:	000028fc 	strdeq	r2, [r0], -ip
    2a5c:	00002901 	andeq	r2, r0, r1, lsl #18
    2a60:	01510001 	cmpeq	r1, r1
	RFCAdi3VcoLdoVoltageMode (false);
    2a64:	10000029 	andne	r0, r0, r9, lsr #32
	RFCSynthPowerDown ();
    2a68:	01000029 	tsteq	r0, r9, lsr #32
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a6c:	29105400 	ldmdbcs	r0, {sl, ip, lr}
    2a70:	29120000 	ldmdbcs	r2, {}	; <UNPREDICTABLE>
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a74:	00010000 	andeq	r0, r1, r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a78:	00291251 	eoreq	r1, r9, r1, asr r2
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a7c:	00291400 	eoreq	r1, r9, r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a80:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2a84:	00002914 	andeq	r2, r0, r4, lsl r9
    2a88:	0000291c 	andeq	r2, r0, ip, lsl r9
	_BIC (dstate, DSTATE_RFON);
    2a8c:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    2a90:	2c000029 	stccs	0, cr0, [r0], {41}	; 0x29
}
    2a94:	01000029 	tsteq	r0, r9, lsr #32
    2a98:	292c5400 	stmdbcs	ip!, {sl, ip, lr}
    2a9c:	29a60000 	stmibcs	r6!, {}	; <UNPREDICTABLE>
    2aa0:	00010000 	andeq	r0, r1, r0
    2aa4:	0029a651 	eoreq	sl, r9, r1, asr r6
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2aa8:	0029e000 	eoreq	lr, r9, r0
    2aac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		if (timeout-- == 0) {
    2ab8:	00002884 	andeq	r2, r0, r4, lsl #17
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2abc:	00002886 	andeq	r2, r0, r6, lsl #17
    2ac0:	92500001 	subsls	r0, r0, #1
    2ac4:	bc000028 	stclt	0, cr0, [r0], {40}	; 0x28
			syserror (EHARDWARE, "rt2");
    2ac8:	01000028 	tsteq	r0, r8, lsr #32
    2acc:	28d85000 	ldmcs	r8, {ip, lr}^
		udelay (1);
    2ad0:	28e00000 	stmiacs	r0!, {}^	; <UNPREDICTABLE>
		if (cmd->status == tstat)
    2ad4:	00010000 	andeq	r0, r1, r0
}
    2ad8:	00291c50 	eoreq	r1, r9, r0, asr ip
    2adc:	00292c00 	eoreq	r2, r9, r0, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2ae0:	50000100 	andpl	r0, r0, r0, lsl #2
    2ae4:	00002936 	andeq	r2, r0, r6, lsr r9
static void rf_on () {
    2ae8:	0000294c 	andeq	r2, r0, ip, asr #18
    2aec:	50500001 	subspl	r0, r0, r1
	OSCHF_TurnOnXosc();
    2af0:	52000029 	andpl	r0, r0, #41	; 0x29
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2af4:	01000029 	tsteq	r0, r9, lsr #32
    2af8:	00005000 	andeq	r5, r0, r0
    2afc:	00000000 	andeq	r0, r0, r0
    2b00:	28a60000 	stmiacs	r6!, {}	; <UNPREDICTABLE>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b04:	28b00000 	ldmcs	r0!, {}	; <UNPREDICTABLE>
    2b08:	00010000 	andeq	r0, r1, r0
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2b0c:	00000053 	andeq	r0, r0, r3, asr r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2b10:	00000000 	andeq	r0, r0, r0
	issue_cmd (
    2b14:	002d3000 	eoreq	r3, sp, r0
    2b18:	002d4400 	eoreq	r4, sp, r0, lsl #8
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2b1c:	50000100 	andpl	r0, r0, r0, lsl #2
    2b20:	00002eb8 			; <UNDEFINED> instruction: 0x00002eb8
    2b24:	00002ed0 	ldrdeq	r2, [r0], -r0
   pPatchTab[80] = 0;
    2b28:	e0500001 	subs	r0, r0, r1
   } while (--nIterations);
    2b2c:	e700002e 	str	r0, [r0, -lr, lsr #32]
   pPatchTab[53] = 2;
    2b30:	0100002e 	tsteq	r0, lr, lsr #32
    2b34:	00005000 	andeq	r5, r0, r0
   pPatchTab[55] = 3;
    2b38:	00000000 	andeq	r0, r0, r0
   pPatchTab[110] = 4;
    2b3c:	2db00000 	ldccs	0, cr0, [r0]
   pPatchTab[107] = 5;
    2b40:	2db80000 	ldccs	0, cr0, [r8]
   pPatchTab[65] = 6;
    2b44:	00010000 	andeq	r0, r1, r0
    2b48:	002db852 	eoreq	fp, sp, r2, asr r8
   pPatchTab[57] = 1;
    2b4c:	002dbb00 	eoreq	fp, sp, r0, lsl #22
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b50:	72000200 	andvc	r0, r0, #0, 4
	...
      t4 = *pS++;
    2b5c:	002f5600 	eoreq	r5, pc, r0, lsl #12
      t6 = *pS++;
    2b60:	002f6000 	eoreq	r6, pc, r0
      t8 = *pS++;
    2b64:	53000100 	movwpl	r0, #256	; 0x100
	...
      *pD++ = t3;
    2b70:	00002c9e 	muleq	r0, lr, ip
      *pD++ = t5;
    2b74:	00002ce2 	andeq	r2, r0, r2, ror #25
      *pD++ = t7;
    2b78:	e2540001 	subs	r0, r4, #1
   } while (--nIterations);
    2b7c:	ea00002c 	b	2c34 <rf_on.part.0+0x154>
    2b80:	0200002c 	andeq	r0, r0, #44	; 0x2c
      *pD++ = t8;
    2b84:	ea007400 	b	1fb8c <__exidx_end+0x19ecc>
   } while (--nIterations);
    2b88:	f400002c 	vst4.8	{d0-d3}, [r0 :128], ip
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b8c:	0100002c 	tsteq	r0, ip, lsr #32
   *pD++ = t2;
    2b90:	2cf45400 	cfldrdcs	mvd5, [r4]
   *pD++ = t3;
    2b94:	2cf90000 	ldclcs	0, cr0, [r9]
   *pD++ = t4;
    2b98:	00020000 	andeq	r0, r2, r0
   *pD++ = t5;
    2b9c:	2d0a0074 	stccs	0, cr0, [sl, #-464]	; 0xfffffe30
    2ba0:	2d0e0000 	stccs	0, cr0, [lr, #-0]
	RFCAdi3VcoLdoVoltageMode (true);
    2ba4:	00020000 	andeq	r0, r2, r0
    2ba8:	00000074 	andeq	r0, r0, r4, ror r0
       	RFCRfTrimSet (&rfTrim);
    2bac:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2bb0:	2cc60000 	stclcs	0, cr0, [r6], {0}
    2bb4:	2cdd0000 	ldclcs	0, cr0, [sp], {0}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2bb8:	00010000 	andeq	r0, r1, r0
    2bbc:	00000052 	andeq	r0, r0, r2, asr r0
	issue_cmd ((lword)&cmd_srt);
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	002c9e00 	eoreq	r9, ip, r0, lsl #28
	issue_cmd ((lword)&RF_cmdFs);
    2bc8:	002cfe00 	eoreq	pc, ip, r0, lsl #28
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2bcc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2bd0:	00002d0a 	andeq	r2, r0, sl, lsl #26
    2bd4:	00002d0e 	andeq	r2, r0, lr, lsl #26
	IntEnable (INT_RFC_CPE_0);
    2bd8:	00550001 	subseq	r0, r5, r1
	_BIC (dstate, DSTATE_IRST);
    2bdc:	00000000 	andeq	r0, r0, r0
    2be0:	e0000000 	and	r0, r0, r0
    2be4:	e6000029 	str	r0, [r0], -r9, lsr #32
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2be8:	01000029 	tsteq	r0, r9, lsr #32
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bec:	29e65000 	stmibcs	r6!, {ip, lr}^
	IntEnable (INT_RFC_CPE_0);
    2bf0:	2a180000 	bcs	602bf8 <__ccfg+0x5e2c50>
    2bf4:	00010000 	andeq	r0, r1, r0
}
    2bf8:	00000054 	andeq	r0, r0, r4, asr r0
	IntEnable (INT_RFC_CPE_0);
    2bfc:	00000000 	andeq	r0, r0, r0
    2c00:	0029ee00 	eoreq	lr, r9, r0, lsl #28
    2c04:	0029f800 	eoreq	pc, r9, r0, lsl #16
    2c08:	52000100 	andpl	r0, r0, #0, 2
    2c0c:	000029fe 	strdeq	r2, [r0], -lr
    2c10:	00002a09 	andeq	r2, r0, r9, lsl #20
    2c14:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
    2c18:	1300002a 	movwne	r0, #42	; 0x2a
    2c1c:	0100002a 	tsteq	r0, sl, lsr #32
    2c20:	2a165200 	bcs	597428 <__ccfg+0x577480>
    2c24:	2a280000 	bcs	a02c2c <__ccfg+0x9e2c84>
    2c28:	00010000 	andeq	r0, r1, r0
    2c2c:	00000052 	andeq	r0, r0, r2, asr r0
    2c30:	00000000 	andeq	r0, r0, r0
    2c34:	0029f600 	eoreq	pc, r9, r0, lsl #12
    2c38:	0029f800 	eoreq	pc, r9, r0, lsl #16
    2c3c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2c48:	00002aa8 	andeq	r2, r0, r8, lsr #21
    2c4c:	00002ab2 			; <UNDEFINED> instruction: 0x00002ab2
    2c50:	b2500001 	subslt	r0, r0, #1
    2c54:	d800002a 	stmdale	r0, {r1, r3, r5}
    2c58:	0100002a 	tsteq	r0, sl, lsr #32
    2c5c:	00005400 	andeq	r5, r0, r0, lsl #8
static void rx_int_enable () {
    2c60:	00000000 	andeq	r0, r0, r0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c64:	2aa80000 	bcs	fea02c6c <_estack+0xde9fdc6c>
    2c68:	2ab20000 	bcs	fec82c70 <_estack+0xdec7dc70>
    2c6c:	00010000 	andeq	r0, r1, r0
    2c70:	002ab251 	eoreq	fp, sl, r1, asr r2
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c74:	002ad800 	eoreq	sp, sl, r0, lsl #16
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c78:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c84:	00002b82 	andeq	r2, r0, r2, lsl #23
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c88:	00002b8a 	andeq	r2, r0, sl, lsl #23
    2c8c:	00520001 	subseq	r0, r2, r1
    2c90:	00000000 	andeq	r0, r0, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c94:	56000000 	strpl	r0, [r0], -r0
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c98:	8200002b 	andhi	r0, r0, #43	; 0x2b
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c9c:	0100002b 	tsteq	r0, fp, lsr #32
		if (db->status == DATA_ENTRY_FINISHED) {
    2ca0:	2b865300 	blcs	fe1978a8 <_estack+0xde1928a8>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ca4:	2b8a0000 	blcs	fe282cac <_estack+0xde27dcac>
    2ca8:	00010000 	andeq	r0, r1, r0
			nr++;
    2cac:	00000053 	andeq	r0, r0, r3, asr r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2cb0:	00000000 	andeq	r0, r0, r0
    2cb4:	002b5c00 	eoreq	r5, fp, r0, lsl #24
    2cb8:	002b8a00 	eoreq	r8, fp, r0, lsl #20
    2cbc:	5e000100 	adfpls	f0, f0, f0
	...
				__dp [pl + 1] = __dp [pl] - 128;
    2cc8:	00002b60 	andeq	r2, r0, r0, ror #22
    2ccc:	00002b8a 	andeq	r2, r0, sl, lsl #23
				__dp [pl] = 0;
    2cd0:	00570001 	subseq	r0, r7, r1
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	64000000 	strvs	r0, [r0], #-0
    2cdc:	a000002b 	andge	r0, r0, fp, lsr #32
			db->status = DATA_ENTRY_PENDING;
    2ce0:	0100002b 	tsteq	r0, fp, lsr #32
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ce4:	00005500 	andeq	r5, r0, r0, lsl #10
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2ce8:	00000000 	andeq	r0, r0, r0
				diag ("BAD RX");
    2cec:	2b640000 	blcs	1902cf4 <__ccfg+0x18e2d4c>
    2cf0:	2b7c0000 	blcs	1f02cf8 <__ccfg+0x1ee2d50>
	if (nr) {
    2cf4:	00010000 	andeq	r0, r1, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cf8:	002b7c50 	eoreq	r7, fp, r0, asr ip
}
    2cfc:	002b8600 	eoreq	r8, fp, r0, lsl #12
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2d00:	73000200 	movwvc	r0, #512	; 0x200
    2d04:	002b8618 	eoreq	r8, fp, r8, lsl r6
    2d08:	002b8800 	eoreq	r8, fp, r0, lsl #16
}
    2d0c:	70000200 	andvc	r0, r0, r0, lsl #4
    2d10:	00000018 	andeq	r0, r0, r8, lsl r0
    2d14:	00000000 	andeq	r0, r0, r0
    2d18:	002b8200 	eoreq	r8, fp, r0, lsl #4
    2d1c:	002ba000 	eoreq	sl, fp, r0
    2d20:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2d2c:	00003158 	andeq	r3, r0, r8, asr r1
thread (cc1350_driver)
    2d30:	0000315a 	andeq	r3, r0, sl, asr r1
    2d34:	00500001 	subseq	r0, r0, r1
    2d38:	00000000 	andeq	r0, r0, r0
    2d3c:	54000000 	strpl	r0, [r0], #-0
    2d40:	56000031 			; <UNDEFINED> instruction: 0x56000031
		if (dstate & DSTATE_IRST) {
    2d44:	01000031 	tsteq	r0, r1, lsr r0
    2d48:	00005000 	andeq	r5, r0, r0
    2d4c:	00000000 	andeq	r0, r0, r0
			rf_off ();
    2d50:	314c0000 	mrscc	r0, (UNDEF: 76)
			_BIC (dstate,
    2d54:	314e0000 	mrscc	r0, (UNDEF: 78)
    2d58:	00010000 	andeq	r0, r1, r0
		if (dstate & DSTATE_RXAC) {
    2d5c:	00000050 	andeq	r0, r0, r0, asr r0
    2d60:	00000000 	andeq	r0, r0, r0
			if ((dstate & DSTATE_RXON) == 0)
    2d64:	00312800 	eorseq	r2, r1, r0, lsl #16
				rx_de ();
    2d68:	00313200 	eorseq	r3, r1, r0, lsl #4
		if (paylen == 0) {
    2d6c:	50000100 	andpl	r0, r0, r0, lsl #2
    2d70:	00003134 	andeq	r3, r0, r4, lsr r1
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d74:	00003142 	andeq	r3, r0, r2, asr #2
    2d78:	00500001 	subseq	r0, r0, r1
    2d7c:	00000000 	andeq	r0, r0, r0
    2d80:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d84:	2a000031 	bcs	2e50 <cc1350_driver+0x120>
    2d88:	01000031 	tsteq	r0, r1, lsr r0
    2d8c:	00005100 	andeq	r5, r0, r0, lsl #2
    2d90:	00000000 	andeq	r0, r0, r0
    2d94:	31280000 			; <UNDEFINED> instruction: 0x31280000
    2d98:	312c0000 			; <UNDEFINED> instruction: 0x312c0000
    2d9c:	00010000 	andeq	r0, r1, r0
    2da0:	00000052 	andeq	r0, r0, r2, asr r0
		} else if (dstate & DSTATE_RXON) {
    2da4:	00000000 	andeq	r0, r0, r0
	if (dstate & DSTATE_RFON)
    2da8:	00312800 	eorseq	r2, r1, r0, lsl #16
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2dac:	00314000 	eorseq	r4, r1, r0
		re->status = DATA_ENTRY_PENDING;
    2db0:	53000100 	movwpl	r0, #256	; 0x100
	...
	_BIS (dstate, DSTATE_RXAC);
    2dbc:	00003104 	andeq	r3, r0, r4, lsl #2
    2dc0:	00003110 	andeq	r3, r0, r0, lsl r1
    2dc4:	10500001 	subsne	r0, r0, r1
    2dc8:	28000031 	stmdacs	r0, {r0, r4, r5}
	if (dstate & DSTATE_RXAC)
    2dcc:	01000031 	tsteq	r0, r1, lsr r0
    2dd0:	00005300 	andeq	r5, r0, r0, lsl #6
				if (statid != 0xffff)
    2dd4:	00000000 	andeq	r0, r0, r0
    2dd8:	315c0000 	cmpcc	ip, r0
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2ddc:	316a0000 	cmncc	sl, r0
				RF_cmdPropTx.pktLen = (byte) paylen;
    2de0:	00010000 	andeq	r0, r1, r0
		if (paylen == 0) {
    2de4:	00316a50 	eorseq	r6, r1, r0, asr sl
			wait (qevent, DR_LOOP);
    2de8:	0031a400 	eorseq	sl, r1, r0, lsl #8
    2dec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				rx_int_enable ();
    2df8:	0000315c 	andeq	r3, r0, ip, asr r1
			release;
    2dfc:	0000316d 	andeq	r3, r0, sp, ror #2
			} else if (dstate & DSTATE_RFON) {
    2e00:	6d510001 	ldclvs	0, cr0, [r1, #-4]
				delay (offdelay, DR_GOOF);
    2e04:	a4000031 	strge	r0, [r0], #-49	; 0xffffffcf
    2e08:	01000031 	tsteq	r0, r1, lsr r0
    2e0c:	00005600 	andeq	r5, r0, r0, lsl #12
		if (bckf_timer) {
    2e10:	00000000 	andeq	r0, r0, r0
			wait (qevent, DR_LOOP);
    2e14:	315c0000 	cmpcc	ip, r0
    2e18:	316d0000 	cmncc	sp, r0
    2e1c:	00010000 	andeq	r0, r1, r0
			delay (bckf_timer, DR_LOOP);
    2e20:	00317c52 	eorseq	r7, r1, r2, asr ip
    2e24:	00318200 	eorseq	r8, r1, r0, lsl #4
			if (dstate & DSTATE_RXAC)
    2e28:	52000100 	andpl	r0, r0, #0, 2
	...
	if (dstate & DSTATE_RFON)
    2e34:	000031a4 	andeq	r3, r0, r4, lsr #3
		rx_de ();
    2e38:	000031bb 			; <UNDEFINED> instruction: 0x000031bb
		RF_cmdPropTx . status = 0;
    2e3c:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e40:	c8000031 	stmdagt	r0, {r0, r4, r5}
    2e44:	01000031 	tsteq	r0, r1, lsr r0
    2e48:	32005000 	andcc	r5, r0, #0
		issue_cmd ((lword)&cmd_cs);
    2e4c:	32140000 	andscc	r0, r4, #0
		if (dstate & DSTATE_IRST)
    2e50:	00010000 	andeq	r0, r1, r0
    2e54:	00000050 	andeq	r0, r0, r0, asr r0
    2e58:	00000000 	andeq	r0, r0, r0
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e5c:	0031ac00 	eorseq	sl, r1, r0, lsl #24
    2e60:	0031b800 	eorseq	fp, r1, r0, lsl #16
			delay (1, DR_XMIT);
    2e64:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e68:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
    2e6c:	000031bb 			; <UNDEFINED> instruction: 0x000031bb
    2e70:	08730002 	ldmdaeq	r3!, {r1}^
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e74:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
    2e78:	00003214 	andeq	r3, r0, r4, lsl r2
				RF_cmdPropTx . status = 0;
    2e7c:	00550001 	subseq	r0, r5, r1
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e80:	00000000 	andeq	r0, r0, r0
				issue_cmd ((lword)&RF_cmdPropTx);
    2e84:	e2000000 	and	r0, r0, #0
				proceed (DR_XMIT);
    2e88:	f4000031 	vst4.8	{d0-d3}, [r0 :256], r1
    2e8c:	01000031 	tsteq	r0, r1, lsr r0
			txtries++;
    2e90:	00005000 	andeq	r5, r0, r0
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	32140000 	andscc	r0, r4, #0
    2e9c:	32300000 	eorscc	r0, r0, #0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ea0:	00010000 	andeq	r0, r1, r0
		goto DR_LOOP__;
    2ea4:	00331650 	eorseq	r1, r3, r0, asr r6
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ea8:	00331f00 	eorseq	r1, r3, r0, lsl #30
		paylen = 0;
    2eac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2eb8:	0000321c 	andeq	r3, r0, ip, lsl r2
    2ebc:	0000323e 	andeq	r3, r0, lr, lsr r2
    2ec0:	3e540001 	cdpcc	0, 5, cr0, cr4, cr1, {0}
    2ec4:	45000032 	strmi	r0, [r0, #-50]	; 0xffffffce
    2ec8:	01000032 	tsteq	r0, r2, lsr r0
		    tcvphy_top (physid) == NULL)
    2ecc:	32455000 	subcc	r5, r5, #0
    2ed0:	324a0000 	subcc	r0, sl, #0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2ed4:	00010000 	andeq	r0, r1, r0
    2ed8:	00324a54 	eorseq	r4, r2, r4, asr sl
			rf_off ();
    2edc:	00325400 	eorseq	r5, r2, r0, lsl #8
endthread
    2ee0:	50000100 	andpl	r0, r0, r0, lsl #2
    2ee4:	00003254 	andeq	r3, r0, r4, asr r2
    2ee8:	00003312 	andeq	r3, r0, r2, lsl r3
    2eec:	16540001 	ldrbne	r0, [r4], -r1
    2ef0:	1c000033 	stcne	0, cr0, [r0], {51}	; 0x33
    2ef4:	01000033 	tsteq	r0, r3, lsr r0
    2ef8:	331c5400 	tstcc	ip, #0, 8
    2efc:	331f0000 	tstcc	pc, #0
    2f00:	00020000 	andeq	r0, r2, r0
    2f04:	00000872 	andeq	r0, r0, r2, ror r8
    2f08:	00000000 	andeq	r0, r0, r0
    2f0c:	32f60000 	rscscc	r0, r6, #0
    2f10:	32f80000 	rscscc	r0, r8, #0
    2f14:	00010000 	andeq	r0, r1, r0
    2f18:	0032f850 	eorseq	pc, r2, r0, asr r8	; <UNPREDICTABLE>
    2f1c:	00331200 	eorseq	r1, r3, r0, lsl #4
void RFCCPE0IntHandler (void) {
    2f20:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		_BIS (dstate, DSTATE_IRST);
    2f2c:	00003580 	andeq	r3, r0, r0, lsl #11
    2f30:	00003597 	muleq	r0, r7, r5
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2f34:	97500001 	ldrbls	r0, [r0, -r1]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f38:	9e000035 	mcrls	0, 0, r0, cr0, cr5, {1}
    2f3c:	01000035 	tsteq	r0, r5, lsr r0
	p_trigger (drvprcs, qevent);
    2f40:	359e5400 	ldrcc	r5, [lr, #1024]	; 0x400
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f44:	35a00000 	strcc	r0, [r0, #0]!
    2f48:	00010000 	andeq	r0, r1, r0
    2f4c:	0035a050 	eorseq	sl, r5, r0, asr r0
    2f50:	0035b000 	eorseq	fp, r5, r0
    2f54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2f58:	000035b0 			; <UNDEFINED> instruction: 0x000035b0
    2f5c:	000035bf 			; <UNDEFINED> instruction: 0x000035bf
    2f60:	bf500001 	svclt	0x00500001
    2f64:	d0000035 	andle	r0, r0, r5, lsr r0
    2f68:	01000035 	tsteq	r0, r5, lsr r0
	RISE_N_SHINE;
    2f6c:	00005400 	andeq	r5, r0, r0, lsl #8
    2f70:	00000000 	andeq	r0, r0, r0
    2f74:	35800000 	strcc	r0, [r0]
}
    2f78:	35940000 	ldrcc	r0, [r4]
    2f7c:	00010000 	andeq	r0, r1, r0
    2f80:	00359451 	eorseq	r9, r5, r1, asr r4
    2f84:	00359700 	eorseq	r9, r5, r0, lsl #14
    2f88:	52000100 	andpl	r0, r0, #0, 2
    2f8c:	00003597 	muleq	r0, r7, r5
void phys_cc1350 (int phy, int mbs) {
    2f90:	0000359e 	muleq	r0, lr, r5
	if (rbuffl != 0)
    2f94:	9e560001 	cdpls	0, 5, cr0, cr6, cr1, {0}
    2f98:	a3000035 	movwge	r0, #53	; 0x35
		syserror (ETOOMANY, "cc13");
    2f9c:	01000035 	tsteq	r0, r5, lsr r0
		syserror (EREQPAR, "cc13 mb");
    2fa0:	35a35100 	strcc	r5, [r3, #256]!	; 0x100
	if (mbs == 0)
    2fa4:	35d00000 	ldrbcc	r0, [r0]
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2fa8:	00010000 	andeq	r0, r1, r0
		syserror (EREQPAR, "cc13 mb");
    2fac:	00000056 	andeq	r0, r0, r6, asr r0
    2fb0:	00000000 	andeq	r0, r0, r0
	i = 0;
    2fb4:	00358000 	eorseq	r8, r5, r0
	rbuffl = (byte) mbs;
    2fb8:	00358800 	eorseq	r8, r5, r0, lsl #16
		db->config.type = 0;	// General (data in structure)
    2fbc:	52000100 	andpl	r0, r0, #0, 2
	rbuffl = (byte) mbs;
    2fc0:	0000358c 	andeq	r3, r0, ip, lsl #11
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2fc4:	00003590 	muleq	r0, r0, r5
    2fc8:	98520001 	ldmdals	r2, {r0}^
		if (db == NULL)
    2fcc:	9e000035 	mcrls	0, 0, r0, cr0, cr5, {1}
			syserror (EMALLOC, "cc13");
    2fd0:	01000035 	tsteq	r0, r5, lsr r0
    2fd4:	35aa5700 	strcc	r5, [sl, #1792]!	; 0x700
    2fd8:	35d00000 	ldrbcc	r0, [r0]
		db->status = DATA_ENTRY_PENDING;
    2fdc:	00010000 	andeq	r0, r1, r0
		if (i)
    2fe0:	00000057 	andeq	r0, r0, r7, asr r0
			da->pNextEntry = (byte*) db;
    2fe4:	00000000 	andeq	r0, r0, r0
		db->length = rbuffl + 2;
    2fe8:	0035aa00 	eorseq	sl, r5, r0, lsl #20
    2fec:	0035cc00 	eorseq	ip, r5, r0, lsl #24
		db->config.type = 0;	// General (data in structure)
    2ff0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		db->length = rbuffl + 2;
    2ff4:	000035cc 	andeq	r3, r0, ip, asr #11
	db->pNextEntry = (byte*) re;
    2ff8:	000035d0 	ldrdeq	r3, [r0], -r0
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ffc:	00580001 	subseq	r0, r8, r1
    3000:	00000000 	andeq	r0, r0, r0
	if (rbuffs == NULL)
    3004:	c4000000 	strgt	r0, [r0], #-0
	rbuffs->pCurrEntry = (byte*) re;
    3008:	c8000035 	stmdagt	r0, {r0, r2, r4, r5}
	rbuffs->pLastEntry = NULL;
    300c:	01000035 	tsteq	r0, r5, lsr r0
    3010:	00005000 	andeq	r5, r0, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3014:	00000000 	andeq	r0, r0, r0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    3018:	33500000 	cmpcc	r0, #0
    301c:	336a0000 	cmncc	sl, #0
    3020:	00010000 	andeq	r0, r1, r0
	rbuffl -= 2;
    3024:	00000050 	andeq	r0, r0, r0, asr r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3028:	00000000 	andeq	r0, r0, r0
	rbuffl -= 2;
    302c:	00335000 	eorseq	r5, r3, r0
	physid = phy;
    3030:	00336a00 	eorseq	r6, r3, r0, lsl #20
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3034:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3040:	00003350 	andeq	r3, r0, r0, asr r3
    3044:	0000336a 	andeq	r3, r0, sl, ror #6
	utimer_add (&bckf_timer);
    3048:	7a520001 	bvc	1483054 <__ccfg+0x14630ac>
	drvprcs = runthread (cc1350_driver);
    304c:	a6000033 			; <UNDEFINED> instruction: 0xa6000033
    3050:	01000033 	tsteq	r0, r3, lsr r0
    3054:	33b45500 			; <UNDEFINED> instruction: 0x33b45500
	if (drvprcs == 0)
    3058:	35720000 	ldrbcc	r0, [r2, #-0]!
		syserror (ERESOURCE, "cc13");
    305c:	00010000 	andeq	r0, r1, r0
    3060:	00000055 	andeq	r0, r0, r5, asr r0
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3064:	00000000 	andeq	r0, r0, r0
    3068:	00335000 	eorseq	r5, r3, r0
    306c:	00335400 	eorseq	r5, r3, r0, lsl #8
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3070:	53000100 	movwpl	r0, #256	; 0x100
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3074:	00003356 	andeq	r3, r0, r6, asr r3
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3078:	00003358 	andeq	r3, r0, r8, asr r3
    307c:	93530003 	cmpls	r3, #3
    3080:	00335804 	eorseq	r5, r3, r4, lsl #16
    3084:	0033a200 	eorseq	sl, r3, r0, lsl #4
    3088:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    308c:	33a20493 			; <UNDEFINED> instruction: 0x33a20493
    3090:	33f60000 	mvnscc	r0, #0
    3094:	00030000 	andeq	r0, r3, r0
    3098:	f6049354 			; <UNDEFINED> instruction: 0xf6049354
	plugch ();
    309c:	02000033 	andeq	r0, r0, #51	; 0x33
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    30a0:	03000034 	movweq	r0, #52	; 0x34
    30a4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    30a8:	0000340a 	andeq	r3, r0, sl, lsl #8
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    30ac:	0000342c 	andeq	r3, r0, ip, lsr #8
    30b0:	93540003 	cmpls	r4, #3
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    30b4:	00343004 	eorseq	r3, r4, r4
}
    30b8:	0034aa00 	eorseq	sl, r4, r0, lsl #20
    30bc:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    30c0:	34b00493 	ldrtcc	r0, [r0], #1171	; 0x493
    30c4:	34c40000 	strbcc	r0, [r4], #0
    30c8:	00030000 	andeq	r0, r3, r0
    30cc:	0a049354 	beq	127e24 <__ccfg+0x107e7c>
    30d0:	16000035 			; <UNDEFINED> instruction: 0x16000035
    30d4:	03000035 	movweq	r0, #53	; 0x35
    30d8:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    30dc:	00003538 	andeq	r3, r0, r8, lsr r5
    30e0:	0000354a 	andeq	r3, r0, sl, asr #10
    30e4:	93540003 	cmpls	r4, #3
    30e8:	00354e04 	eorseq	r4, r5, r4, lsl #28
    30ec:	00355600 	eorseq	r5, r5, r0, lsl #12
    30f0:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    30f4:	355a0493 	ldrbcc	r0, [sl, #-1171]	; 0xfffffb6d
    30f8:	35800000 	strcc	r0, [r0]
    30fc:	00030000 	andeq	r0, r3, r0
    3100:	00049354 	andeq	r9, r4, r4, asr r3
    3104:	00000000 	andeq	r0, r0, r0
    3108:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    310c:	78000033 	stmdavc	r0, {r0, r1, r4, r5}
    3110:	01000033 	tsteq	r0, r3, lsr r0
    3114:	33785900 	cmncc	r8, #0, 18
    3118:	337a0000 	cmncc	sl, #0
    311c:	00020000 	andeq	r0, r2, r0
    3120:	337a0072 	cmncc	sl, #114	; 0x72
    3124:	339e0000 	orrscc	r0, lr, #0
    3128:	00010000 	andeq	r0, r1, r0
    312c:	0033a659 	eorseq	sl, r3, r9, asr r6
    3130:	0033b400 	eorseq	fp, r3, r0, lsl #8
    3134:	59000100 	stmdbpl	r0, {r8}
    3138:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
    313c:	000033ec 	andeq	r3, r0, ip, ror #7
    3140:	f6580001 			; <UNDEFINED> instruction: 0xf6580001
    3144:	06000033 			; <UNDEFINED> instruction: 0x06000033
    3148:	01000034 	tsteq	r0, r4, lsr r0
    314c:	34065800 	strcc	r5, [r6], #-2048	; 0xfffff800
    3150:	340e0000 	strcc	r0, [lr], #-0
    3154:	00020000 	andeq	r0, r2, r0
    3158:	342c0172 	strtcc	r0, [ip], #-370	; 0xfffffe8e
    315c:	34560000 	ldrbcc	r0, [r6], #-0
    3160:	00010000 	andeq	r0, r1, r0
    3164:	00345a58 	eorseq	r5, r4, r8, asr sl
    3168:	00345e00 	eorseq	r5, r4, r0, lsl #28
    316c:	50000100 	andpl	r0, r0, r0, lsl #2
    3170:	00003468 	andeq	r3, r0, r8, ror #8
    3174:	00003472 	andeq	r3, r0, r2, ror r4
    3178:	92500001 	subsls	r0, r0, #1
    317c:	94000034 	strls	r0, [r0], #-52	; 0xffffffcc
    3180:	01000034 	tsteq	r0, r4, lsr r0
    3184:	349a5000 	ldrcc	r5, [sl], #0
    3188:	349c0000 	ldrcc	r0, [ip], #0
    318c:	00010000 	andeq	r0, r1, r0
    3190:	00349c58 	eorseq	r9, r4, r8, asr ip
    3194:	0034bf00 	eorseq	fp, r4, r0, lsl #30
    3198:	53000100 	movwpl	r0, #256	; 0x100
    319c:	000034ce 	andeq	r3, r0, lr, asr #9
    31a0:	000034d2 	ldrdeq	r3, [r0], -r2
strand (__outserial, const char*)
    31a4:	dc590001 	mrrcle	0, 0, r0, r9, cr1
    31a8:	fc000034 	stc2	0, cr0, [r0], {52}	; 0x34
    31ac:	01000034 	tsteq	r0, r4, lsr r0
    31b0:	35025900 	strcc	r5, [r2, #-2304]	; 0xfffff700
endstrand
    31b4:	35040000 	strcc	r0, [r4, #-0]
    31b8:	00010000 	andeq	r0, r1, r0
	ptr = data;
    31bc:	00350a59 	eorseq	r0, r5, r9, asr sl
    31c0:	00351800 	eorseq	r1, r5, r0, lsl #16
	if (*ptr)
    31c4:	53000100 	movwpl	r0, #256	; 0x100
		len = strlen (ptr);
    31c8:	00003538 	andeq	r3, r0, r8, lsr r5
    31cc:	00003541 	andeq	r3, r0, r1, asr #10
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    31d0:	4a530001 	bmi	14c31dc <__ccfg+0x14a3234>
    31d4:	5e000035 	mcrpl	0, 0, r0, cr0, cr5, {1}
    31d8:	01000035 	tsteq	r0, r5, lsr r0
    31dc:	35725800 	ldrbcc	r5, [r2, #-2048]!	; 0xfffff800
    31e0:	35800000 	strcc	r0, [r0]
	len -= quant;
    31e4:	00010000 	andeq	r0, r1, r0
    31e8:	00000059 	andeq	r0, r0, r9, asr r0
    31ec:	00000000 	andeq	r0, r0, r0
	if (len == 0) {
    31f0:	00340e00 	eorseq	r0, r4, r0, lsl #28
		ufree (data);
    31f4:	00342c00 	eorseq	r2, r4, r0, lsl #24
		finish;
    31f8:	58000100 	stmdapl	r0, {r8}
	...
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3204:	00003438 	andeq	r3, r0, r8, lsr r4
    3208:	0000344c 	andeq	r3, r0, ip, asr #8
    320c:	50590001 	subspl	r0, r9, r1
    3210:	7e000034 	mcrvc	0, 0, r0, cr0, cr4, {1}
strand (__inserial, address)
    3214:	01000034 	tsteq	r0, r4, lsr r0
    3218:	34865900 	strcc	r5, [r6], #2304	; 0x900
    321c:	349a0000 	ldrcc	r0, [sl], #0
    3220:	00010000 	andeq	r0, r1, r0
    3224:	00000059 	andeq	r0, r0, r9, asr r0
	if (__inpline != NULL)
    3228:	00000000 	andeq	r0, r0, r0
    322c:	00345600 	eorseq	r5, r4, r0, lsl #12
		finish;
    3230:	00348800 	eorseq	r8, r4, r0, lsl #16
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3234:	58000100 	stmdapl	r0, {r8}
    3238:	00003488 	andeq	r3, r0, r8, lsl #9
    323c:	00003494 	muleq	r0, r4, r4
    3240:	94530001 	ldrbls	r0, [r3], #-1
		umwait (IM_INIT);
    3244:	9a000034 	bls	331c <__inserial+0x108>
		release;
    3248:	01000034 	tsteq	r0, r4, lsr r0
	savedata (data);
    324c:	00005800 	andeq	r5, r0, r0, lsl #16
	len = MAX_LINE_LENGTH;
    3250:	00000000 	andeq	r0, r0, r0
	io (IM_READ, __cport, READ, ptr, 1);
    3254:	34c40000 	strbcc	r0, [r4], #0
    3258:	350a0000 	strcc	r0, [sl, #-0]
    325c:	00010000 	andeq	r0, r1, r0
    3260:	0000005a 	andeq	r0, r0, sl, asr r0
	if (ptr == (char*) data) { // new line
    3264:	00000000 	andeq	r0, r0, r0
    3268:	0034ca00 	eorseq	ip, r4, r0, lsl #20
		if (*ptr == '\0') { // bin cmd
    326c:	0034f400 	eorseq	pc, r4, r0, lsl #8
			proceed (IM_BIN);
    3270:	58000100 	stmdapl	r0, {r8}
    3274:	000034f4 	strdeq	r3, [r0], -r4
		if (*ptr < 0x20)
    3278:	00003504 	andeq	r3, r0, r4, lsl #10
    327c:	04530001 	ldrbeq	r0, [r3], #-1
			proceed (IM_READ);
    3280:	0a000035 	beq	335c <__pi_vfparse+0xc>
    3284:	01000035 	tsteq	r0, r5, lsr r0
	if (*ptr == '\n' || *ptr == '\r') {
    3288:	00005800 	andeq	r5, r0, r0, lsl #16
    328c:	00000000 	andeq	r0, r0, r0
    3290:	35180000 	ldrcc	r0, [r8, #-0]
		*ptr = '\0';
    3294:	35380000 	ldrcc	r0, [r8, #-0]!
		__inpline = (char*)data;
    3298:	00010000 	andeq	r0, r1, r0
		finish;
    329c:	00000058 	andeq	r0, r0, r8, asr r0
	if (len) {
    32a0:	00000000 	andeq	r0, r0, r0
		ptr++;
    32a4:	00354a00 	eorseq	r4, r5, r0, lsl #20
    32a8:	00354e00 	eorseq	r4, r5, r0, lsl #28
		len--;
    32ac:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
	proceed (IM_READ);
    32b0:	00354e00 	eorseq	r4, r5, r0, lsl #28
	io (IM_BIN, __cport, READ, ptr, 1);
    32b4:	00355600 	eorseq	r5, r5, r0, lsl #12
    32b8:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    32bc:	0000007c 	andeq	r0, r0, ip, ror r0
    32c0:	00000000 	andeq	r0, r0, r0
    32c4:	00356200 	eorseq	r6, r5, r0, lsl #4
	len -= 2;
    32c8:	00357000 	eorseq	r7, r5, r0
	if (len > *ptr + 1) // 1 for 0x04
    32cc:	58000100 	stmdapl	r0, {r8}
	...
		len = *ptr + 1;
    32d8:	000035d0 	ldrdeq	r3, [r0], -r0
	ptr++;
    32dc:	000035ec 	andeq	r3, r0, ip, ror #11
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32e0:	2a500001 	bcs	14032ec <__ccfg+0x13e3344>
    32e4:	3c000036 	stccc	0, cr0, [r0], {54}	; 0x36
    32e8:	01000036 	tsteq	r0, r6, lsr r0
    32ec:	363c5300 	ldrtcc	r5, [ip], -r0, lsl #6
    32f0:	36500000 	ldrbcc	r0, [r0], -r0
    32f4:	00010000 	andeq	r0, r1, r0
	len -= quant;
    32f8:	00365256 	eorseq	r5, r6, r6, asr r2
		__inpline = (char*)data;
    32fc:	00366e00 	eorseq	r6, r6, r0, lsl #28
		finish;
    3300:	56000100 	strpl	r0, [r0], -r0, lsl #2
	ptr += quant;
    3304:	00003680 	andeq	r3, r0, r0, lsl #13
    3308:	0000368c 	andeq	r3, r0, ip, lsl #13
endstrand
    330c:	8c560001 	mrrchi	0, 0, r0, r6, cr1
    3310:	92000036 	andls	r0, r0, #54	; 0x36
	proceed (IM_BINL);
    3314:	01000036 	tsteq	r0, r6, lsr r0
endstrand
    3318:	36985300 	ldrcc	r5, [r8], r0, lsl #6
    331c:	369c0000 	ldrcc	r0, [ip], r0
    3320:	00010000 	andeq	r0, r1, r0
    3324:	00369c53 	eorseq	r9, r6, r3, asr ip
    3328:	0036ac00 	eorseq	sl, r6, r0, lsl #24
    332c:	5e000100 	adfpls	f0, f0, f0
		if (res && (d < n))
    3330:	000036ac 	andeq	r3, r0, ip, lsr #13
    3334:	000036c2 	andeq	r3, r0, r2, asr #13
    3338:	c2530001 	subsgt	r0, r3, #1
    333c:	ca000036 	bgt	341c <__pi_vfparse+0xcc>
			res [d] = (char) c;
    3340:	01000036 	tsteq	r0, r6, lsr r0
		d++;
    3344:	36d05e00 	ldrbcc	r5, [r0], r0, lsl #28
    3348:	36ec0000 	strbtcc	r0, [ip], r0
    334c:	00010000 	andeq	r0, r1, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3350:	0036ec53 	eorseq	lr, r6, r3, asr ip
    3354:	0036f200 	eorseq	pc, r6, r0, lsl #4
    3358:	5e000100 	adfpls	f0, f0, f0
				enci (10000);
    335c:	000036f2 	strdeq	r3, [r0], -r2
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3360:	000036f4 	strdeq	r3, [r0], -r4
    3364:	00530001 	subseq	r0, r3, r1
	d = 0;
    3368:	02000037 	andeq	r0, r0, #55	; 0x37
		c = *fm++;
    336c:	01000037 	tsteq	r0, r7, lsr r0
		if (c == '\\') {
    3370:	37025e00 	strcc	r5, [r2, -r0, lsl #28]
			if ((c = *fm++) == '\0') {
    3374:	37160000 	ldrcc	r0, [r6, -r0]
    3378:	00010000 	andeq	r0, r1, r0
				outc ('\\');
    337c:	00371653 	eorseq	r1, r7, r3, asr r6
			if ((c = *fm++) == '\0') {
    3380:	00372600 	eorseq	r2, r7, r0, lsl #12
				outc ('\\');
    3384:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3388:	00003726 	andeq	r3, r0, r6, lsr #14
			outc (c);
    338c:	0000373a 	andeq	r3, r0, sl, lsr r7
    3390:	48530001 	ldmdami	r3, {r0}^
			if (c == '\0')
    3394:	4a000037 	bmi	3478 <__pi_vfparse+0x128>
    3398:	01000037 	tsteq	r0, r7, lsr r0
			outc (c);
    339c:	374a5600 	strbcc	r5, [sl, -r0, lsl #12]
				outc (val);
    33a0:	37620000 	strbcc	r0, [r2, -r0]!
				val = (word) va_arg (ap, aword);
    33a4:	00010000 	andeq	r0, r1, r0
		if (c == '%') {
    33a8:	00376253 	eorseq	r6, r7, r3, asr r2
    33ac:	00377c00 	eorseq	r7, r7, r0, lsl #24
			c = *fm++;
    33b0:	56000100 	strpl	r0, [r0], -r0, lsl #2
			switch (c) {
    33b4:	00003782 	andeq	r3, r0, r2, lsl #15
    33b8:	000037a4 	andeq	r3, r0, r4, lsr #15
    33bc:	a4530001 	ldrbge	r0, [r3], #-1
    33c0:	b6000037 			; <UNDEFINED> instruction: 0xb6000037
    33c4:	01000037 	tsteq	r0, r7, lsr r0
    33c8:	37dc5600 	ldrbcc	r5, [ip, r0, lsl #12]
    33cc:	37e00000 	strbcc	r0, [r0, r0]!
    33d0:	00010000 	andeq	r0, r1, r0
				outc ('%');
    33d4:	0037e053 	eorseq	lr, r7, r3, asr r0
    33d8:	0037f000 	eorseq	pc, r7, r0
				outc (c);
    33dc:	58000100 	stmdapl	r0, {r8}
    33e0:	000037f0 	strdeq	r3, [r0], -r0
    33e4:	00003800 	andeq	r3, r0, r0, lsl #16
				if (c == '\0')
    33e8:	00530001 	subseq	r0, r3, r1
				return d;
    33ec:	0a000038 	beq	34d4 <__pi_vfparse+0x184>
}
    33f0:	01000038 	tsteq	r0, r8, lsr r0
    33f4:	38105800 	ldmdacc	r0, {fp, ip, lr}
			switch (c) {
    33f8:	38320000 	ldmdacc	r2!, {}	; <UNPREDICTABLE>
    33fc:	00010000 	andeq	r0, r1, r0
    3400:	00383853 	eorseq	r3, r8, r3, asr r8
				for (i = 12; ; i -= 4) {
    3404:	00384800 	eorseq	r4, r8, r0, lsl #16
				val = (word) va_arg (ap, aword);
    3408:	53000100 	movwpl	r0, #256	; 0x100
						[ (val >> i) & 0xf ]);
    340c:	00003848 	andeq	r3, r0, r8, asr #16
    3410:	00003862 	andeq	r3, r0, r2, ror #16
    3414:	68560001 	ldmdavs	r6, {r0}^
					outc (__pi_hex_enc_table
    3418:	88000038 	stmdahi	r0, {r3, r4, r5}
    341c:	01000038 	tsteq	r0, r8, lsr r0
					if (i == 0)
    3420:	38885300 	stmcc	r8, {r8, r9, ip, lr}
    3424:	389a0000 	ldmcc	sl, {}	; <UNPREDICTABLE>
				for (i = 12; ; i -= 4) {
    3428:	00010000 	andeq	r0, r1, r0
				val = (word) va_arg (ap, aword);
    342c:	0038ae56 	eorseq	sl, r8, r6, asr lr
				if (c == 'd' && (val & 0x8000) != 0) {
    3430:	0038b200 	eorseq	fp, r8, r0, lsl #4
				val = (word) va_arg (ap, aword);
    3434:	58000100 	stmdapl	r0, {r8}
				if (c == 'd' && (val & 0x8000) != 0) {
    3438:	000038b2 			; <UNDEFINED> instruction: 0x000038b2
    343c:	000038b6 			; <UNDEFINED> instruction: 0x000038b6
					outc ('-');
    3440:	c0530001 	subsgt	r0, r3, r1
    3444:	c2000038 	andgt	r0, r0, #56	; 0x38
					val = (~val) + 1;
    3448:	01000038 	tsteq	r0, r8, lsr r0
    344c:	38c25800 	stmiacc	r2, {fp, ip, lr}^
				for (i = 12; ; i -= 4) {
    3450:	38d80000 	ldmcc	r8, {}^	; <UNPREDICTABLE>
				enci (10000);
    3454:	00010000 	andeq	r0, r1, r0
    3458:	0038d853 	eorseq	sp, r8, r3, asr r8
    345c:	0038e800 	eorseq	lr, r8, r0, lsl #16
    3460:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3464:	000038e8 	andeq	r3, r0, r8, ror #17
    3468:	000038fe 	strdeq	r3, [r0], -lr
    346c:	08530001 	ldmdaeq	r3, {r0}^
    3470:	0a000039 	beq	355c <__pi_vfparse+0x20c>
    3474:	01000039 	tsteq	r0, r9, lsr r0
    3478:	390a5600 	stmdbcc	sl, {r9, sl, ip, lr}
    347c:	39120000 	ldmdbcc	r2, {}	; <UNPREDICTABLE>
    3480:	00010000 	andeq	r0, r1, r0
    3484:	00391653 	eorseq	r1, r9, r3, asr r6
    3488:	00392600 	eorseq	r2, r9, r0, lsl #12
    348c:	53000100 	movwpl	r0, #256	; 0x100
    3490:	00003926 	andeq	r3, r0, r6, lsr #18
    3494:	00003934 	andeq	r3, r0, r4, lsr r9
    3498:	34560001 	ldrbcc	r0, [r6], #-1
				if (c == 'd' || c == 'u') {
    349c:	3a000039 	bcc	3588 <vform+0x8>
    34a0:	01000039 	tsteq	r0, r9, lsr r0
					if (c == 'd' &&
    34a4:	393a5800 	ldmdbcc	sl!, {fp, ip, lr}
					val = va_arg (ap, lword);
    34a8:	39460000 	stmdbcc	r6, {}^	; <UNPREDICTABLE>
					fm++;
    34ac:	00010000 	andeq	r0, r1, r0
					if (c == 'd' &&
    34b0:	00394656 	eorseq	r4, r9, r6, asr r6
    34b4:	00394e00 	eorseq	r4, r9, r0, lsl #28
						outc ('-');
    34b8:	50000100 	andpl	r0, r0, r0, lsl #2
    34bc:	0000394e 	andeq	r3, r0, lr, asr #18
						val = (~val) + 1;
    34c0:	00003960 	andeq	r3, r0, r0, ror #18
				enci (10000);
    34c4:	00530001 	subseq	r0, r3, r1
					enci (1000000000UL);
    34c8:	00000000 	andeq	r0, r0, r0
    34cc:	d0000000 	andle	r0, r0, r0
    34d0:	ee000035 	mcr	0, 0, r0, cr0, cr5, {1}
    34d4:	01000035 	tsteq	r0, r5, lsr r0
    34d8:	35ee5100 	strbcc	r5, [lr, #256]!	; 0x100
    34dc:	35f40000 	ldrbcc	r0, [r4, #0]!
    34e0:	00010000 	andeq	r0, r1, r0
    34e4:	0035f456 	eorseq	pc, r5, r6, asr r4	; <UNPREDICTABLE>
    34e8:	00361200 	eorseq	r1, r6, r0, lsl #4
    34ec:	51000100 	mrspl	r0, (UNDEF: 16)
    34f0:	00003618 	andeq	r3, r0, r8, lsl r6
    34f4:	00003960 	andeq	r3, r0, r0, ror #18
    34f8:	00510001 	subseq	r0, r1, r1
    34fc:	00000000 	andeq	r0, r0, r0
    3500:	d0000000 	andle	r0, r0, r0
    3504:	d0000035 	andle	r0, r0, r5, lsr r0
    3508:	01000035 	tsteq	r0, r5, lsr r0
				} else if (c == 'x') {
    350c:	35d05200 	ldrbcc	r5, [r0, #512]	; 0x200
					for (i = 28; ; i -= 4) {
    3510:	35ec0000 	strbcc	r0, [ip, #0]!
					val = va_arg (ap, lword);
    3514:	00030000 	andeq	r0, r3, r0
							[ (val >> i) & 0xf ]);
    3518:	92049352 	andls	r9, r4, #1207959553	; 0x48000001
    351c:	c6000036 			; <UNDEFINED> instruction: 0xc6000036
						outc (__pi_hex_enc_table
    3520:	01000036 	tsteq	r0, r6, lsr r0
    3524:	36ec5200 	strbtcc	r5, [ip], r0, lsl #4
    3528:	36f20000 	ldrbtcc	r0, [r2], r0
						if (i == 0)
    352c:	00010000 	andeq	r0, r1, r0
    3530:	00370252 	eorseq	r0, r7, r2, asr r2
					for (i = 28; ; i -= 4) {
    3534:	00371c00 	eorseq	r1, r7, r0, lsl #24
					outc ('%');
    3538:	52000100 	andpl	r0, r0, #0, 2
    353c:	0000374a 	andeq	r3, r0, sl, asr #14
    3540:	00003772 	andeq	r3, r0, r2, ror r7
					outc ('l');
    3544:	c4520001 	ldrbgt	r0, [r2], #-1
    3548:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
				val = (word) va_arg (ap, aword);
    354c:	01000038 	tsteq	r0, r8, lsr r0
				outc (val);
    3550:	38325200 	ldmdacc	r2!, {r9, ip, lr}
    3554:	38580000 	ldmdacc	r8, {}^	; <UNPREDICTABLE>
				while (*st != '\0') {
    3558:	00010000 	andeq	r0, r1, r0
    355c:	0038a852 	eorseq	sl, r8, r2, asr r8
    3560:	0038b200 	eorseq	fp, r8, r0, lsl #4
    3564:	52000100 	andpl	r0, r0, #0, 2
					outc (*st);
    3568:	000038c2 	andeq	r3, r0, r2, asr #17
    356c:	000038de 	ldrdeq	r3, [r0], -lr
					st++;
    3570:	0a520001 	beq	148357c <__ccfg+0x14635d4>
		c = *fm++;
    3574:	20000039 	andcs	r0, r0, r9, lsr r0
    3578:	01000039 	tsteq	r0, r9, lsr r0
    357c:	39265200 	stmdbcc	r6!, {r9, ip, lr}
char *vform (char *res, const char *fm, va_list aq) {
    3580:	39340000 	ldmdbcc	r4!, {}	; <UNPREDICTABLE>
    3584:	00010000 	andeq	r0, r1, r0
	if (res != NULL) {
    3588:	00394652 	eorseq	r4, r9, r2, asr r6
		__pi_vfparse (res, MAX_WORD, fm, aq);
    358c:	00394e00 	eorseq	r4, r9, r0, lsl #28
    3590:	52000100 	andpl	r0, r0, #0, 2
	...
}
    359c:	0000364e 	andeq	r3, r0, lr, asr #12
	fml = strlen (fm) + 17;
    35a0:	00003650 	andeq	r3, r0, r0, asr r6
    35a4:	c8540001 	ldmdagt	r4, {r0}^
    35a8:	ec000036 	stc	0, cr0, [r0], {54}	; 0x36
	if ((res = (char*) umalloc (fml)) == NULL)
    35ac:	01000036 	tsteq	r0, r6, lsr r0
    35b0:	36f25400 	ldrbtcc	r5, [r2], r0, lsl #8
    35b4:	37020000 	strcc	r0, [r2, -r0]
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    35b8:	00010000 	andeq	r0, r1, r0
    35bc:	00371e54 	eorseq	r1, r7, r4, asr lr
    35c0:	00374a00 	eorseq	r4, r7, r0, lsl #20
    35c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		ufree (res);
    35c8:	00003774 	andeq	r3, r0, r4, ror r7
		goto Again;
    35cc:	000037c4 	andeq	r3, r0, r4, asr #15
	if (buf == NULL || fmt == NULL)
    35d0:	06540001 	ldrbeq	r0, [r4], -r1
int vscan (const char *buf, const char *fmt, va_list ap) {
    35d4:	32000038 	andcc	r0, r0, #56	; 0x38
	if (buf == NULL || fmt == NULL)
    35d8:	01000038 	tsteq	r0, r8, lsr r0
    35dc:	385a5400 	ldmdacc	sl, {sl, ip, lr}^
    35e0:	38a80000 	stmiacc	r8!, {}	; <UNPREDICTABLE>
		    	    case 'u': scanu (lword); break;
    35e4:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    35e8:	0038b254 	eorseq	fp, r8, r4, asr r2
    35ec:	0038c200 	eorseq	ip, r8, r0, lsl #4
	while (*fmt != '\0') {
    35f0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		if (*fmt++ != '%')
    35f4:	000038e0 	andeq	r3, r0, r0, ror #17
		switch (*fmt++) {
    35f8:	0000390a 	andeq	r3, r0, sl, lsl #18
    35fc:	22540001 	subscs	r0, r4, #1
    3600:	26000039 			; <UNDEFINED> instruction: 0x26000039
    3604:	01000039 	tsteq	r0, r9, lsr r0
    3608:	394e5400 	stmdbcc	lr, {sl, ip, lr}^
    360c:	39600000 	stmdbcc	r0!, {}^	; <UNPREDICTABLE>
    3610:	00010000 	andeq	r0, r1, r0
}
    3614:	00000054 	andeq	r0, r0, r4, asr r0
		switch (*fmt++) {
    3618:	00000000 	andeq	r0, r0, r0
    361c:	0036c200 	eorseq	ip, r6, r0, lsl #4
    3620:	0036ec00 	eorseq	lr, r6, r0, lsl #24
    3624:	58000100 	stmdapl	r0, {r8}
			while (isspace (*buf)) buf++;
    3628:	000036f2 	strdeq	r3, [r0], -r2
    362c:	00003702 	andeq	r3, r0, r2, lsl #14
    3630:	00580001 	subseq	r0, r8, r1
    3634:	00000000 	andeq	r0, r0, r0
    3638:	a4000000 	strge	r0, [r0], #-0
    363c:	b6000037 			; <UNDEFINED> instruction: 0xb6000037
			if (*buf == '\0')
    3640:	01000037 	tsteq	r0, r7, lsr r0
			if (*buf != ',') {
    3644:	37b65900 	ldrcc	r5, [r6, r0, lsl #18]!
			sap = va_arg (ap, char*);
    3648:	37be0000 	ldrcc	r0, [lr, r0]!
			nc++;
    364c:	00010000 	andeq	r0, r1, r0
			if (*buf != ',') {
    3650:	00000050 	andeq	r0, r0, r0, asr r0
				while (!isspace (*buf) && *buf != ',' &&
    3654:	00000000 	andeq	r0, r0, r0
    3658:	00380000 	eorseq	r0, r8, r0
    365c:	00382a00 	eorseq	r2, r8, r0, lsl #20
    3660:	50000100 	andpl	r0, r0, r0, lsl #2
    3664:	000038b2 			; <UNDEFINED> instruction: 0x000038b2
    3668:	000038c2 	andeq	r3, r0, r2, asr #17
    366c:	00500001 	subseq	r0, r0, r1
			while (isspace (*buf)) buf++;
    3670:	00000000 	andeq	r0, r0, r0
    3674:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    3678:	9a000038 	bls	3760 <vscan+0x190>
    367c:	01000038 	tsteq	r0, r8, lsr r0
    3680:	389a5900 	ldmcc	sl, {r8, fp, ip, lr}
			if (*buf == ',') buf++;
    3684:	38a20000 	stmiacc	r2!, {}	; <UNPREDICTABLE>
    3688:	00010000 	andeq	r0, r1, r0
			*sap = '\0';
    368c:	00000050 	andeq	r0, r0, r0, asr r0
			break;
    3690:	00000000 	andeq	r0, r0, r0
		    case 'd': scani (word); break;
    3694:	00391600 	eorseq	r1, r9, r0, lsl #12
    3698:	00392600 	eorseq	r2, r9, r0, lsl #12
    369c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    36a8:	00003652 	andeq	r3, r0, r2, asr r6
    36ac:	0000366e 	andeq	r3, r0, lr, ror #12
    36b0:	385e0001 	ldmdacc	lr, {r0}^
    36b4:	3a000039 	bcc	37a0 <vscan+0x1d0>
    36b8:	01000039 	tsteq	r0, r9, lsr r0
    36bc:	00005e00 	andeq	r5, r0, r0, lsl #28
    36c0:	00000000 	andeq	r0, r0, r0
    36c4:	39600000 	stmdbcc	r0!, {}^	; <UNPREDICTABLE>
    36c8:	39670000 	stmdbcc	r7!, {}^	; <UNPREDICTABLE>
    36cc:	00010000 	andeq	r0, r1, r0
    36d0:	00396750 	eorseq	r6, r9, r0, asr r7
    36d4:	00397e00 	eorseq	r7, r9, r0, lsl #28
    36d8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    36dc:	0000397e 	andeq	r3, r0, lr, ror r9
    36e0:	00003982 	andeq	r3, r0, r2, lsl #19
    36e4:	01f30004 	mvnseq	r0, r4
    36e8:	39829f50 	stmibcc	r2, {r4, r6, r8, r9, sl, fp, ip, pc}
    36ec:	39840000 	stmibcc	r4, {}	; <UNPREDICTABLE>
    36f0:	00010000 	andeq	r0, r1, r0
    36f4:	00398456 	eorseq	r8, r9, r6, asr r4
    36f8:	00398800 	eorseq	r8, r9, r0, lsl #16
    36fc:	f3000400 	vshl.u8	d0, d0, d0
    3700:	009f5001 	addseq	r5, pc, r1
		    case 'u': scanu (word); break;
    3704:	00000000 	andeq	r0, r0, r0
    3708:	6a000000 	bvs	3710 <vscan+0x140>
    370c:	73000039 	movwvc	r0, #57	; 0x39
    3710:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
    3714:	30007000 	andcc	r7, r0, r0
    3718:	39739f29 	ldmdbcc	r3!, {r0, r3, r5, r8, r9, sl, fp, ip, pc}^
    371c:	397e0000 	ldmdbcc	lr!, {}^	; <UNPREDICTABLE>
    3720:	00050000 	andeq	r0, r5, r0
    3724:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    3728:	0039829f 	mlaseq	r9, pc, r2, r8	; <UNPREDICTABLE>
    372c:	00398400 	eorseq	r8, r9, r0, lsl #8
    3730:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    3734:	9f293000 	svcls	0x00293000
	...
    3748:	00500001 	subseq	r0, r0, r1
		    case 'x': scanx (word); break;
    374c:	00000000 	andeq	r0, r0, r0
    3750:	01000000 	mrseq	r0, (UNDEF: 0)
    3754:	00005600 	andeq	r5, r0, r0, lsl #12
    3758:	00000000 	andeq	r0, r0, r0
    375c:	00040000 	andeq	r0, r4, r0
    3760:	9f5001f3 	svcls	0x005001f3
	...
    376c:	00560001 	subseq	r0, r6, r1
    3770:	00000000 	andeq	r0, r0, r0
    3774:	04000000 	streq	r0, [r0], #-0
    3778:	5001f300 	andpl	pc, r1, r0, lsl #6
    377c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    378c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3798:	01f30004 	mvnseq	r0, r4
    379c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    37ac:	00050000 	andeq	r0, r5, r0
    37b0:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    37b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37b8:	00000000 	andeq	r0, r0, r0
    37bc:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    37c0:	9f293000 	svcls	0x00293000
	...
			switch (*fmt++) {
    37cc:	00750005 	rsbseq	r0, r5, r5
    37d0:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	8c000000 	stchi	0, cr0, [r0], {-0}
		    	    case 'd': scani (lword); break;
    37dc:	9e000039 	mcrls	0, 0, r0, cr0, cr9, {1}
    37e0:	07000039 	smladxeq	r0, r9, r0, r0
    37e4:	3f007000 	svccc	0x00007000
    37e8:	9f263f24 	svcls	0x00263f24
	...
    37f4:	00003994 	muleq	r0, r4, r9
    37f8:	0000399c 	muleq	r0, ip, r9
    37fc:	8072000d 	rsbshi	r0, r2, sp
    3800:	4800717a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    3804:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3808:	9c9f2634 	ldcls	6, cr2, [pc], {52}	; 0x34
    380c:	b8000039 	stmdalt	r0, {r0, r3, r4, r5}
    3810:	0c000039 	stceq	0, cr0, [r0], {57}	; 0x39
    3814:	48007100 	stmdami	r0, {r8, ip, sp, lr}
    3818:	72264824 	eorvc	r4, r6, #36, 16	; 0x240000
    381c:	26341e00 	ldrtcs	r1, [r4], -r0, lsl #28
    3820:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3824:	00000000 	andeq	r0, r0, r0
    3828:	0039be00 	eorseq	fp, r9, r0, lsl #28
    382c:	0039c800 	eorseq	ip, r9, r0, lsl #16
    3830:	53000100 	movwpl	r0, #256	; 0x100
	...
		    	    case 'x': scanx (lword); break;
    383c:	000039c0 	andeq	r3, r0, r0, asr #19
    3840:	000039cc 	andeq	r3, r0, ip, asr #19
    3844:	00500001 	subseq	r0, r0, r1
	...
    3850:	1800003a 	stmdane	r0, {r1, r3, r4, r5}
    3854:	0100003a 	tsteq	r0, sl, lsr r0
    3858:	3a185000 	bcc	617860 <__ccfg+0x5f78b8>
    385c:	3a520000 	bcc	1483864 <__ccfg+0x14638bc>
    3860:	00010000 	andeq	r0, r1, r0
    3864:	003a5255 	eorseq	r5, sl, r5, asr r2
    3868:	003a5c00 	eorseq	r5, sl, r0, lsl #24
    386c:	f3000400 	vshl.u8	d0, d0, d0
    3870:	009f5001 	addseq	r5, pc, r1
	...
    387c:	0600003a 			; <UNDEFINED> instruction: 0x0600003a
    3880:	0100003a 	tsteq	r0, sl, lsr r0
    3884:	3a065100 	bcc	197c8c <__ccfg+0x177ce4>
    3888:	3a3e0000 	bcc	f83890 <__ccfg+0xf638e8>
    388c:	00010000 	andeq	r0, r1, r0
    3890:	003a3e54 	eorseq	r3, sl, r4, asr lr
    3894:	003a5c00 	eorseq	r5, sl, r0, lsl #24
    3898:	f3000400 	vshl.u8	d0, d0, d0
    389c:	009f5101 	addseq	r5, pc, r1, lsl #2
    38a0:	00000000 	andeq	r0, r0, r0
    38a4:	3a000000 	bcc	38ac <vscan+0x2dc>
		    	    case 'd': scani (lword); break;
    38a8:	4e00003a 	mcrmi	0, 0, r0, cr0, cr10, {1}
    38ac:	0100003a 	tsteq	r0, sl, lsr r0
    38b0:	00005500 	andeq	r5, r0, r0, lsl #10
    38b4:	00000000 	andeq	r0, r0, r0
    38b8:	3a3a0000 	bcc	e838c0 <__ccfg+0xe63918>
    38bc:	3a3e0000 	bcc	f838c4 <__ccfg+0xf6391c>
    38c0:	00010000 	andeq	r0, r1, r0
		    	    case 'u': scanu (lword); break;
    38c4:	003a3e54 	eorseq	r3, sl, r4, asr lr
    38c8:	003a4e00 	eorseq	r4, sl, r0, lsl #28
    38cc:	f3000400 	vshl.u8	d0, d0, d0
    38d0:	009f5101 	addseq	r5, pc, r1, lsl #2
    38d4:	00000000 	andeq	r0, r0, r0
    38d8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    38dc:	7a00003a 	bvc	39cc <NOROM_AONRTCCurrentCompareValueGet+0x14>
    38e0:	0100003a 	tsteq	r0, sl, lsr r0
    38e4:	3a7a5000 	bcc	1e978ec <__ccfg+0x1e77944>
    38e8:	3a880000 	bcc	fe2038f0 <_estack+0xde1fe8f0>
    38ec:	00040000 	andeq	r0, r4, r0
    38f0:	9f5001f3 	svcls	0x005001f3
	...
    3904:	00500001 	subseq	r0, r0, r1
    3908:	00000000 	andeq	r0, r0, r0
		    	    case 'x': scanx (lword); break;
    390c:	01000000 	mrseq	r0, (UNDEF: 0)
    3910:	00005600 	andeq	r5, r0, r0, lsl #12
			if ((c = *buf++) == '\0')
    3914:	00000000 	andeq	r0, r0, r0
    3918:	00040000 	andeq	r0, r4, r0
			sap = va_arg (ap, char*);
    391c:	9f5001f3 	svcls	0x005001f3
	...
			while (isspace (*buf)) buf++;
    3930:	00550001 	subseq	r0, r5, r1
	...
			while (isspace (*buf)) buf++;
    3940:	07000000 	streq	r0, [r0, -r0]
    3944:	73007000 	movwvc	r7, #0
		return 0;
    3948:	9f191c00 	svcls	0x00191c00
	...
		    case 'x': scanx (word); break;
    3954:	00700004 	rsbseq	r0, r0, r4
		    	    case 'x': scanx (lword); break;
    3958:	00009f19 	andeq	r9, r0, r9, lsl pc
	...
    3968:	00040000 	andeq	r0, r4, r0
    396c:	9f07d00a 	svcls	0x0007d00a
	...
    3978:	00500001 	subseq	r0, r0, r1
    397c:	00000000 	andeq	r0, r0, r0
    3980:	05000000 	streq	r0, [r0, #-0]
    3984:	40007200 	andmi	r7, r0, r0, lsl #4
    3988:	00009f25 	andeq	r9, r0, r5, lsr #30
    398c:	00000000 	andeq	r0, r0, r0
    3990:	00010000 	andeq	r0, r1, r0
    3994:	00000050 	andeq	r0, r0, r0, asr r0
    3998:	00000000 	andeq	r0, r0, r0
    399c:	0a000400 	beq	49a4 <memcpy+0x70>
    39a0:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    39a4:	00000000 	andeq	r0, r0, r0
    39a8:	01000000 	mrseq	r0, (UNDEF: 0)
    39ac:	00005000 	andeq	r5, r0, r0
    39b0:	00000000 	andeq	r0, r0, r0
    39b4:	3ada0000 	bcc	ff6839bc <_estack+0xdf67e9bc>
    39b8:	3ae60000 	bcc	ff9839c0 <_estack+0xdf97e9c0>
    39bc:	00010000 	andeq	r0, r1, r0
    39c0:	00000050 	andeq	r0, r0, r0, asr r0
    39c4:	00000000 	andeq	r0, r0, r0
    39c8:	003ada00 	eorseq	sp, sl, r0, lsl #20
    39cc:	003ae600 	eorseq	lr, sl, r0, lsl #12
    39d0:	53000100 	movwpl	r0, #256	; 0x100
	...
    39e4:	00500001 	subseq	r0, r0, r1
    39e8:	00000000 	andeq	r0, r0, r0
    39ec:	03000000 	movweq	r0, #0
    39f0:	9f1b7000 	svcls	0x001b7000
	...
    39fc:	01f30004 	mvnseq	r0, r4
    3a00:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3a10:	00070000 	andeq	r0, r7, r0
    3a14:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    3a18:	009f2648 	addseq	r2, pc, r8, asr #12
	...
    3a28:	01000000 	mrseq	r0, (UNDEF: 0)
    3a2c:	00005000 	andeq	r5, r0, r0
    3a30:	00000000 	andeq	r0, r0, r0
    3a34:	00060000 	andeq	r0, r6, r0
    3a38:	4b5001f3 	blmi	140420c <__ccfg+0x13e4264>
    3a3c:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    3a4c:	00010000 	andeq	r0, r1, r0
    3a50:	00000055 	andeq	r0, r0, r5, asr r0
    3a54:	00000000 	andeq	r0, r0, r0
    3a58:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    3a5c:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3a60:	4b5001f3 	blmi	1404234 <__ccfg+0x13e428c>
    3a64:	009f1e1c 	addseq	r1, pc, ip, lsl lr	; <UNPREDICTABLE>
	...
    3a74:	2c000000 	stccs	0, cr0, [r0], {-0}
    3a78:	40007100 	andmi	r7, r0, r0, lsl #2
    3a7c:	40007126 	andmi	r7, r0, r6, lsr #2
    3a80:	70264824 	eorvc	r4, r6, r4, lsr #16
    3a84:	26331e00 	ldrtcs	r1, [r3], -r0, lsl #28
    3a88:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    3a8c:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    3a90:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    3a94:	48007422 	stmdami	r0, {r1, r5, sl, ip, sp, lr}
    3a98:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    3a9c:	00701e00 	rsbseq	r1, r0, r0, lsl #28
    3aa0:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    3aa4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3aa8:	00000000 	andeq	r0, r0, r0
    3aac:	71003200 	mrsvc	r3, R8_usr
    3ab0:	f3264000 	vhadd.u32	d4, d6, d0
    3ab4:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3ab8:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    3abc:	331e2648 	tstcc	lr, #72, 12	; 0x4800000
    3ac0:	00712226 	rsbseq	r2, r1, r6, lsr #4
    3ac4:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3ac8:	3a1e0075 	bcc	783ca4 <__ccfg+0x763cfc>
    3acc:	01f32226 	mvnseq	r2, r6, lsr #4
    3ad0:	741c4b50 	ldrvc	r4, [ip], #-2896	; 0xfffff4b0
    3ad4:	48244800 	stmdami	r4!, {fp, lr}
    3ad8:	00751e26 	rsbseq	r1, r5, r6, lsr #28
    3adc:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    3ae0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3af0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3afc:	01f30004 	mvnseq	r0, r4
    3b00:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3b10:	000b0000 	andeq	r0, fp, r0
    3b14:	00700070 	rsbseq	r0, r0, r0, ror r0
    3b18:	7026461e 	eorvc	r4, r6, lr, lsl r6
    3b1c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3b20:	00000000 	andeq	r0, r0, r0
    3b24:	01000000 	mrseq	r0, (UNDEF: 0)
    3b28:	00005000 	andeq	r5, r0, r0
    3b2c:	00000000 	andeq	r0, r0, r0
    3b30:	000e0000 	andeq	r0, lr, r0
    3b34:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    3b38:	461e5001 	ldrmi	r5, [lr], -r1
    3b3c:	5001f326 	andpl	pc, r1, r6, lsr #6
    3b40:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    3b50:	00010000 	andeq	r0, r1, r0
    3b54:	00000055 	andeq	r0, r0, r5, asr r0
    3b58:	00000000 	andeq	r0, r0, r0
    3b5c:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
    3b60:	40091038 	andmi	r1, r9, r8, lsr r0
	...
    3b74:	00560001 	subseq	r0, r6, r1
	...
    3b84:	06000000 	streq	r0, [r0], -r0
    3b88:	76007000 	strvc	r7, [r0], -r0
    3b8c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3b90:	00000000 	andeq	r0, r0, r0
    3b94:	01000000 	mrseq	r0, (UNDEF: 0)
    3b98:	00005000 	andeq	r5, r0, r0
	...
    3ba8:	000a0000 	andeq	r0, sl, r0
    3bac:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    3bb0:	461a2444 	ldrmi	r2, [sl], -r4, asr #8
    3bb4:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    3bc4:	00010000 	andeq	r0, r1, r0
    3bc8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    3bd8:	73000900 	movwvc	r0, #2304	; 0x900
    3bdc:	fc000a00 	stc2	10, cr0, [r0], {-0}	; <UNPREDICTABLE>
    3be0:	9f253a1a 	svcls	0x00253a1a
	...
    3bf4:	0073000a 	rsbseq	r0, r3, sl
    3bf8:	2440fc08 	strbcs	pc, [r0], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    3bfc:	9f25421a 	svcls	0x0025421a
	...
    3c08:	00003b34 	andeq	r3, r0, r4, lsr fp
    3c0c:	00003b52 	andeq	r3, r0, r2, asr fp
    3c10:	52500001 	subspl	r0, r0, #1
    3c14:	5c00003b 	stcpl	0, cr0, [r0], {59}	; 0x3b
    3c18:	0400003b 	streq	r0, [r0], #-59	; 0xffffffc5
    3c1c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3c20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c24:	00000000 	andeq	r0, r0, r0
    3c28:	003bbe00 	eorseq	fp, fp, r0, lsl #28
    3c2c:	003bc000 	eorseq	ip, fp, r0
    3c30:	53000100 	movwpl	r0, #256	; 0x100
    3c34:	00003bc2 	andeq	r3, r0, r2, asr #23
    3c38:	00003bc4 	andeq	r3, r0, r4, asr #23
    3c3c:	00530001 	subseq	r0, r3, r1
    3c40:	00000000 	andeq	r0, r0, r0
    3c44:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    3c48:	2e00003c 	mcrcs	0, 0, r0, cr0, cr12, {1}
    3c4c:	0100003d 	tsteq	r0, sp, lsr r0
    3c50:	3d2e5000 	stccc	0, cr5, [lr, #-0]
    3c54:	3e100000 	cdpcc	0, 1, cr0, cr0, cr0, {0}
    3c58:	00040000 	andeq	r0, r4, r0
    3c5c:	9f5001f3 	svcls	0x005001f3
	...
    3c68:	00003d16 	andeq	r3, r0, r6, lsl sp
    3c6c:	00003d1a 	andeq	r3, r0, sl, lsl sp
    3c70:	1a510001 	bne	1443c7c <__ccfg+0x1423cd4>
    3c74:	2000003d 	andcs	r0, r0, sp, lsr r0
    3c78:	0200003d 	andeq	r0, r0, #61	; 0x3d
    3c7c:	249f3200 	ldrcs	r3, [pc], #512	; 3c84 <NOROM_RFCRfTrimRead+0xdc>
    3c80:	ae00003d 	mcrge	0, 0, r0, cr0, cr13, {1}
    3c84:	0100003d 	tsteq	r0, sp, lsr r0
    3c88:	3dae5100 	stfccs	f5, [lr]
    3c8c:	3db20000 	ldccc	0, cr0, [r2]
    3c90:	00030000 	andeq	r0, r3, r0
    3c94:	d49f0571 	ldrle	r0, [pc], #1393	; 3c9c <NOROM_RFCRfTrimRead+0xf4>
    3c98:	ea00003d 	b	3d94 <NOROM_RFCRTrim+0x9c>
    3c9c:	0100003d 	tsteq	r0, sp, lsr r0
    3ca0:	3dea5100 	stfcce	f5, [sl]
    3ca4:	3dec0000 	stclcc	0, cr0, [ip]
    3ca8:	00030000 	andeq	r0, r3, r0
    3cac:	009f0571 	addseq	r0, pc, r1, ror r5	; <UNPREDICTABLE>
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	7a000000 	bvc	3cbc <NOROM_RFCRfTrimRead+0x114>
    3cb8:	8000003d 	andhi	r0, r0, sp, lsr r0
    3cbc:	0100003d 	tsteq	r0, sp, lsr r0
    3cc0:	3d885300 	stccc	3, cr5, [r8]
    3cc4:	3d8a0000 	stccc	0, cr0, [sl]
    3cc8:	00010000 	andeq	r0, r1, r0
    3ccc:	003d9e53 	eorseq	r9, sp, r3, asr lr
    3cd0:	003da000 	eorseq	sl, sp, r0
    3cd4:	53000100 	movwpl	r0, #256	; 0x100
    3cd8:	00003da8 	andeq	r3, r0, r8, lsr #27
    3cdc:	00003db4 			; <UNDEFINED> instruction: 0x00003db4
    3ce0:	d4530001 	ldrble	r0, [r3], #-1
    3ce4:	e000003d 	and	r0, r0, sp, lsr r0
    3ce8:	0100003d 	tsteq	r0, sp, lsr r0
    3cec:	3de45300 	stclcc	3, cr5, [r4]
    3cf0:	3dec0000 	stclcc	0, cr0, [ip]
    3cf4:	00010000 	andeq	r0, r1, r0
    3cf8:	00000053 	andeq	r0, r0, r3, asr r0
    3cfc:	00000000 	andeq	r0, r0, r0
    3d00:	003d1800 	eorseq	r1, sp, r0, lsl #16
    3d04:	003d1a00 	eorseq	r1, sp, r0, lsl #20
    3d08:	53000100 	movwpl	r0, #256	; 0x100
    3d0c:	00003d1c 	andeq	r3, r0, ip, lsl sp
    3d10:	00003d20 	andeq	r3, r0, r0, lsr #26
    3d14:	26530001 	ldrbcs	r0, [r3], -r1
    3d18:	2e00003d 	mcrcs	0, 0, r0, cr0, cr13, {1}
    3d1c:	0100003d 	tsteq	r0, sp, lsr r0
    3d20:	3d2e5300 	stccc	3, cr5, [lr, #-0]
    3d24:	3d440000 	stclcc	0, cr0, [r4, #-0]
    3d28:	00030000 	andeq	r0, r3, r0
    3d2c:	489f6c74 	ldmmi	pc, {r2, r4, r5, r6, sl, fp, sp, lr}	; <UNPREDICTABLE>
    3d30:	4e00003d 	mcrmi	0, 0, r0, cr0, cr13, {1}
    3d34:	0300003d 	movweq	r0, #61	; 0x3d
    3d38:	9f6c7400 	svcls	0x006c7400
	...
    3d44:	00003d3e 	andeq	r3, r0, lr, lsr sp
    3d48:	00003dc2 	andeq	r3, r0, r2, asr #27
    3d4c:	c2520001 	subsgt	r0, r2, #1
    3d50:	c800003d 	stmdagt	r0, {r0, r2, r3, r4, r5}
    3d54:	0200003d 	andeq	r0, r0, #61	; 0x3d
    3d58:	c8007000 	stmdagt	r0, {ip, sp, lr}
    3d5c:	cc00003d 	stcgt	0, cr0, [r0], {61}	; 0x3d
    3d60:	0100003d 	tsteq	r0, sp, lsr r0
    3d64:	3dcc5200 	sfmcc	f5, 2, [ip]
    3d68:	3dd20000 	ldclcc	0, cr0, [r2]
    3d6c:	00020000 	andeq	r0, r2, r0
    3d70:	3dd40070 	ldclcc	0, cr0, [r4, #448]	; 0x1c0
    3d74:	3ddc0000 	ldclcc	0, cr0, [ip]
    3d78:	00010000 	andeq	r0, r1, r0
    3d7c:	003ddc52 	eorseq	sp, sp, r2, asr ip
    3d80:	003de200 	eorseq	lr, sp, r0, lsl #4
    3d84:	70000200 	andvc	r0, r0, r0, lsl #4
    3d88:	003de400 	eorseq	lr, sp, r0, lsl #8
    3d8c:	003dec00 	eorseq	lr, sp, r0, lsl #24
    3d90:	52000100 	andpl	r0, r0, #0, 2
	...
    3d9c:	00003cf8 	strdeq	r3, [r0], -r8
    3da0:	00003d44 	andeq	r3, r0, r4, asr #26
    3da4:	9f300002 	svcls	0x00300002
    3da8:	00003d44 	andeq	r3, r0, r4, asr #26
    3dac:	00003d48 	andeq	r3, r0, r8, asr #26
    3db0:	48540001 	ldmdami	r4, {r0}^
    3db4:	4e00003d 	mcrmi	0, 0, r0, cr0, cr13, {1}
    3db8:	0200003d 	andeq	r0, r0, #61	; 0x3d
    3dbc:	4e9f3000 	cdpmi	0, 9, cr3, cr15, cr0, {0}
    3dc0:	ec00003d 	stc	0, cr0, [r0], {61}	; 0x3d
    3dc4:	0100003d 	tsteq	r0, sp, lsr r0
    3dc8:	00005400 	andeq	r5, r0, r0, lsl #8
    3dcc:	00000000 	andeq	r0, r0, r0
    3dd0:	3e100000 	cdpcc	0, 1, cr0, cr0, cr0, {0}
    3dd4:	3e1a0000 	cdpcc	0, 1, cr0, cr10, cr0, {0}
    3dd8:	00010000 	andeq	r0, r1, r0
    3ddc:	003e1a50 	eorseq	r1, lr, r0, asr sl
    3de0:	003e2c00 	eorseq	r2, lr, r0, lsl #24
    3de4:	75000300 	strvc	r0, [r0, #-768]	; 0xfffffd00
    3de8:	3e2c9f70 	mcrcc	15, 1, r9, cr12, cr0, {3}
    3dec:	3e300000 	cdpcc	0, 3, cr0, cr0, cr0, {0}
    3df0:	00040000 	andeq	r0, r4, r0
    3df4:	9f5001f3 	svcls	0x005001f3
	...
    3e08:	9f300002 	svcls	0x00300002
	...
    3e14:	9f310002 	svcls	0x00310002
	...
    3e20:	9f320002 	svcls	0x00320002
	...
    3e2c:	9f330002 	svcls	0x00330002
	...
    3e38:	9f340002 	svcls	0x00340002
	...
    3e44:	9f350002 	svcls	0x00350002
	...
    3e50:	9f360002 	svcls	0x00360002
	...
    3e5c:	9f370002 	svcls	0x00370002
	...
    3e68:	9f380002 	svcls	0x00380002
	...
    3e74:	9f390002 	svcls	0x00390002
	...
    3e80:	9f3a0002 	svcls	0x003a0002
	...
    3e8c:	9f3b0002 	svcls	0x003b0002
	...
    3e98:	9f3c0002 	svcls	0x003c0002
	...
    3ea4:	00003e4c 	andeq	r3, r0, ip, asr #28
    3ea8:	00003e8a 	andeq	r3, r0, sl, lsl #29
    3eac:	8a500001 	bhi	1403eb8 <__ccfg+0x13e3f10>
    3eb0:	ec00003e 	stc	0, cr0, [r0], {62}	; 0x3e
    3eb4:	0100003e 	tsteq	r0, lr, lsr r0
    3eb8:	3eec5500 	cdpcc	5, 14, cr5, cr12, cr0, {0}
    3ebc:	3f200000 	svccc	0x00200000
    3ec0:	00040000 	andeq	r0, r4, r0
    3ec4:	9f5001f3 	svcls	0x005001f3
	...
    3ed0:	00003e88 	andeq	r3, r0, r8, lsl #29
    3ed4:	00003eec 	andeq	r3, r0, ip, ror #29
    3ed8:	00540001 	subseq	r0, r4, r1
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    3ee4:	a000003e 	andge	r0, r0, lr, lsr r0
    3ee8:	0700003e 	smladxeq	r0, lr, r0, r0
    3eec:	0a007300 	beq	20af4 <__ccfg+0xb4c>
    3ef0:	9f1affff 	svcls	0x001affff
	...
    3efc:	00003eae 	andeq	r3, r0, lr, lsr #29
    3f00:	00003ec8 	andeq	r3, r0, r8, asr #29
    3f04:	00530001 	subseq	r0, r3, r1
    3f08:	00000000 	andeq	r0, r0, r0
    3f0c:	b2000000 	andlt	r0, r0, #0
    3f10:	be00003e 	mcrlt	0, 0, r0, cr0, cr14, {1}
    3f14:	0100003e 	tsteq	r0, lr, lsr r0
    3f18:	3ebe5200 	cdpcc	2, 11, cr5, cr14, cr0, {0}
    3f1c:	3ec20000 	cdpcc	0, 12, cr0, cr2, cr0, {0}
    3f20:	00030000 	andeq	r0, r3, r0
    3f24:	c29f0671 	addsgt	r0, pc, #118489088	; 0x7100000
    3f28:	ca00003e 	bgt	4028 <NOROM_SetupSetVddrLevel+0x64>
    3f2c:	0100003e 	tsteq	r0, lr, lsr r0
    3f30:	00005200 	andeq	r5, r0, r0, lsl #4
    3f34:	00000000 	andeq	r0, r0, r0
    3f38:	3f260000 	svccc	0x00260000
    3f3c:	3fa00000 	svccc	0x00a00000
    3f40:	00010000 	andeq	r0, r1, r0
    3f44:	00000054 	andeq	r0, r0, r4, asr r0
    3f48:	00000000 	andeq	r0, r0, r0
    3f4c:	003f8c00 	eorseq	r8, pc, r0, lsl #24
    3f50:	003f9600 	eorseq	r9, pc, r0, lsl #12
    3f54:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f60:	00003fc4 	andeq	r3, r0, r4, asr #31
    3f64:	00003fea 	andeq	r3, r0, sl, ror #31
    3f68:	ea500001 	b	1403f74 <__ccfg+0x13e3fcc>
    3f6c:	4000003f 	andmi	r0, r0, pc, lsr r0
    3f70:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    3f74:	5001f300 	andpl	pc, r1, r0, lsl #6
    3f78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	003fec00 	eorseq	lr, pc, r0, lsl #24
    3f84:	00402000 	subeq	r2, r0, r0
    3f88:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f94:	00003ff0 	strdeq	r3, [r0], -r0
    3f98:	00003ffe 	strdeq	r3, [r0], -lr
    3f9c:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
    3fa0:	0000003f 	andeq	r0, r0, pc, lsr r0
    3fa4:	06000040 	streq	r0, [r0], -r0, asr #32
    3fa8:	73007200 	movwvc	r7, #512	; 0x200
    3fac:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3fb0:	06000040 	streq	r0, [r0], -r0, asr #32
    3fb4:	01000040 	tsteq	r0, r0, asr #32
    3fb8:	00005100 	andeq	r5, r0, r0, lsl #2
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	3fdc0000 	svccc	0x00dc0000
    3fc4:	3fee0000 	svccc	0x00ee0000
    3fc8:	00010000 	andeq	r0, r1, r0
    3fcc:	00000053 	andeq	r0, r0, r3, asr r0
    3fd0:	00000000 	andeq	r0, r0, r0
    3fd4:	00404000 	subeq	r4, r0, r0
    3fd8:	00406300 	subeq	r6, r0, r0, lsl #6
    3fdc:	50000100 	andpl	r0, r0, r0, lsl #2
    3fe0:	00004063 	andeq	r4, r0, r3, rrx
    3fe4:	0000406e 	andeq	r4, r0, lr, rrx
    3fe8:	6e540001 	cdpvs	0, 5, cr0, cr4, cr1, {0}
    3fec:	76000040 	strvc	r0, [r0], -r0, asr #32
    3ff0:	01000040 	tsteq	r0, r0, asr #32
    3ff4:	40765000 	rsbsmi	r5, r6, r0
    3ff8:	40c20000 	sbcmi	r0, r2, r0
    3ffc:	00010000 	andeq	r0, r1, r0
    4000:	00000054 	andeq	r0, r0, r4, asr r0
    4004:	00000000 	andeq	r0, r0, r0
    4008:	00407c00 	subeq	r7, r0, r0, lsl #24
    400c:	00408000 	subeq	r8, r0, r0
    4010:	53000100 	movwpl	r0, #256	; 0x100
    4014:	00004082 	andeq	r4, r0, r2, lsl #1
    4018:	00004090 	muleq	r0, r0, r0
    401c:	92530001 	subsls	r0, r3, #1
    4020:	9a000040 	bls	4128 <NOROM_SetupGetTrimForAnabypassValue1+0x3c>
    4024:	01000040 	tsteq	r0, r0, asr #32
    4028:	00005300 	andeq	r5, r0, r0, lsl #6
    402c:	00000000 	andeq	r0, r0, r0
    4030:	407c0000 	rsbsmi	r0, ip, r0
    4034:	40b00000 	adcsmi	r0, r0, r0
    4038:	00050000 	andeq	r0, r5, r0
    403c:	264c0074 			; <UNDEFINED> instruction: 0x264c0074
    4040:	0040b09f 	umaaleq	fp, r0, pc, r0	; <UNPREDICTABLE>
    4044:	0040ec00 	subeq	lr, r0, r0, lsl #24
    4048:	f3000600 	vmax.u8	d0, d0, d0
    404c:	264c5001 	strbcs	r5, [ip], -r1
    4050:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4054:	00000000 	andeq	r0, r0, r0
    4058:	00407600 	subeq	r7, r0, r0, lsl #12
    405c:	00408000 	subeq	r8, r0, r0
    4060:	53000100 	movwpl	r0, #256	; 0x100
	...
    406c:	000040ec 	andeq	r4, r0, ip, ror #1
    4070:	00004100 	andeq	r4, r0, r0, lsl #2
    4074:	00500001 	subseq	r0, r0, r1
    4078:	48000041 	stmdami	r0, {r0, r6}
    407c:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4080:	5001f300 	andpl	pc, r1, r0, lsl #6
    4084:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4088:	00000000 	andeq	r0, r0, r0
    408c:	0040f200 	subeq	pc, r0, r0, lsl #4
    4090:	0040fa00 	subeq	pc, r0, r0, lsl #20
    4094:	53000100 	movwpl	r0, #256	; 0x100
	...
    40a0:	000040f6 	strdeq	r4, [r0], -r6
    40a4:	00004108 	andeq	r4, r0, r8, lsl #2
    40a8:	08520001 	ldmdaeq	r2, {r0}^
    40ac:	0a000041 	beq	41b8 <NOROM_SetupGetTrimForAmpcompCtrl+0x34>
    40b0:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
    40b4:	31007200 	mrscc	r7, R8_usr
    40b8:	410a9f25 	tstmi	sl, r5, lsr #30
    40bc:	41100000 	tstmi	r0, r0
    40c0:	00010000 	andeq	r0, r1, r0
    40c4:	00411452 	subeq	r1, r1, r2, asr r4
    40c8:	00412600 	subeq	r2, r1, r0, lsl #12
    40cc:	52000100 	andpl	r0, r0, #0, 2
    40d0:	0000412a 	andeq	r4, r0, sl, lsr #2
    40d4:	00004134 	andeq	r4, r0, r4, lsr r1
    40d8:	36520001 	ldrbcc	r0, [r2], -r1
    40dc:	48000041 	stmdami	r0, {r0, r6}
    40e0:	01000041 	tsteq	r0, r1, asr #32
    40e4:	00005200 	andeq	r5, r0, r0, lsl #4
    40e8:	00000000 	andeq	r0, r0, r0
    40ec:	40fa0000 	rscsmi	r0, sl, r0
    40f0:	41040000 	mrsmi	r0, (UNDEF: 4)
    40f4:	00010000 	andeq	r0, r1, r0
    40f8:	00410453 	subeq	r0, r1, r3, asr r4
    40fc:	00410600 	subeq	r0, r1, r0, lsl #12
    4100:	73000500 	movwvc	r0, #1280	; 0x500
    4104:	9f253100 	svcls	0x00253100
    4108:	00004106 	andeq	r4, r0, r6, lsl #2
    410c:	00004108 	andeq	r4, r0, r8, lsl #2
    4110:	08530001 	ldmdaeq	r3, {r0}^
    4114:	14000041 	strne	r0, [r0], #-65	; 0xffffffbf
    4118:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    411c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4120:	0041149f 	umaaleq	r1, r1, pc, r4	; <UNPREDICTABLE>
    4124:	00411a00 	subeq	r1, r1, r0, lsl #20
    4128:	53000100 	movwpl	r0, #256	; 0x100
    412c:	0000411e 	andeq	r4, r0, lr, lsl r1
    4130:	00004124 	andeq	r4, r0, r4, lsr #2
    4134:	24530001 	ldrbcs	r0, [r3], #-1
    4138:	36000041 	strcc	r0, [r0], -r1, asr #32
    413c:	02000041 	andeq	r0, r0, #65	; 0x41
    4140:	369f3100 	ldrcc	r3, [pc], r0, lsl #2
    4144:	48000041 	stmdami	r0, {r0, r6}
    4148:	01000041 	tsteq	r0, r1, asr #32
    414c:	00005300 	andeq	r5, r0, r0, lsl #6
    4150:	00000000 	andeq	r0, r0, r0
    4154:	40fa0000 	rscsmi	r0, sl, r0
    4158:	41000000 	mrsmi	r0, (UNDEF: 0)
    415c:	00020000 	andeq	r0, r2, r0
    4160:	41009f30 	tstmi	r0, r0, lsr pc
    4164:	413c0000 	teqmi	ip, r0
    4168:	00010000 	andeq	r0, r1, r0
    416c:	00000050 	andeq	r0, r0, r0, asr r0
    4170:	00000000 	andeq	r0, r0, r0
    4174:	00413c00 	subeq	r3, r1, r0, lsl #24
    4178:	00414000 	subeq	r4, r1, r0
    417c:	72000800 	andvc	r0, r0, #0, 16
    4180:	73244000 			; <UNDEFINED> instruction: 0x73244000
    4184:	409f2100 	addsmi	r2, pc, r0, lsl #2
    4188:	48000041 	stmdami	r0, {r0, r6}
    418c:	01000041 	tsteq	r0, r1, asr #32
    4190:	00005000 	andeq	r5, r0, r0
    4194:	00000000 	andeq	r0, r0, r0
    4198:	41520000 	cmpmi	r2, r0
    419c:	41560000 	cmpmi	r6, r0
    41a0:	000a0000 	andeq	r0, sl, r0
    41a4:	1a330070 	bne	cc436c <__ccfg+0xca43c4>
    41a8:	00732438 	rsbseq	r2, r3, r8, lsr r4
    41ac:	415a9f21 	cmpmi	sl, r1, lsr #30
    41b0:	41600000 	cmnmi	r0, r0
    41b4:	00010000 	andeq	r0, r1, r0
    41b8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    41c8:	70000700 	andvc	r0, r0, r0, lsl #14
    41cc:	3fff0a00 	svccc	0x00ff0a00
    41d0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    41d4:	00000000 	andeq	r0, r0, r0
    41d8:	41640000 	cmnmi	r4, r0
    41dc:	41680000 	cmnmi	r8, r0
    41e0:	000f0000 	andeq	r0, pc, r0
    41e4:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    41e8:	1100701a 	tstne	r0, sl, lsl r0
    41ec:	67f3f880 	ldrbvs	pc, [r3, r0, lsl #17]!	; <UNPREDICTABLE>
    41f0:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    41f4:	00000000 	andeq	r0, r0, r0
    41f8:	64000000 	strvs	r0, [r0], #-0
    41fc:	68000041 	stmdavs	r0, {r0, r6}
    4200:	01000041 	tsteq	r0, r1, asr #32
    4204:	00005000 	andeq	r5, r0, r0
    4208:	00000000 	andeq	r0, r0, r0
    420c:	41740000 	cmnmi	r4, r0
    4210:	41780000 	cmnmi	r8, r0
    4214:	000f0000 	andeq	r0, pc, r0
    4218:	3f080070 	svccc	0x00080070
    421c:	0c00701a 	stceq	0, cr7, [r0], {26}
    4220:	00fcffc0 	rscseq	pc, ip, r0, asr #31
    4224:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    4228:	00000000 	andeq	r0, r0, r0
    422c:	74000000 	strvc	r0, [r0], #-0
    4230:	78000041 	stmdavc	r0, {r0, r6}
    4234:	01000041 	tsteq	r0, r1, asr #32
    4238:	00005000 	andeq	r5, r0, r0
    423c:	00000000 	andeq	r0, r0, r0
    4240:	41840000 	orrmi	r0, r4, r0
    4244:	41da0000 	bicsmi	r0, sl, r0
    4248:	00010000 	andeq	r0, r1, r0
    424c:	0041da50 	subeq	sp, r1, r0, asr sl
    4250:	0041e800 	subeq	lr, r1, r0, lsl #16
    4254:	f3000400 	vshl.u8	d0, d0, d0
    4258:	009f5001 	addseq	r5, pc, r1
    425c:	00000000 	andeq	r0, r0, r0
    4260:	c4000000 	strgt	r0, [r0], #-0
    4264:	cc000041 	stcgt	0, cr0, [r0], {65}	; 0x41
    4268:	17000041 	strne	r0, [r0, -r1, asr #32]
    426c:	0a007400 	beq	21274 <__ccfg+0x12cc>
    4270:	741aff00 	ldrvc	pc, [sl], #-3840	; 0xfffff100
    4274:	1af00800 	bne	ffc0627c <_estack+0xdfc0127c>
    4278:	44007221 	strmi	r7, [r0], #-545	; 0xfffffddf
    427c:	00732124 	rsbseq	r2, r3, r4, lsr #2
    4280:	9f212440 	svcls	0x00212440
    4284:	000041d0 	ldrdeq	r4, [r0], -r0
    4288:	000041e8 	andeq	r4, r0, r8, ror #3
    428c:	00530001 	subseq	r0, r3, r1
    4290:	00000000 	andeq	r0, r0, r0
    4294:	8c000000 	stchi	0, cr0, [r0], {-0}
    4298:	d6000041 	strle	r0, [r0], -r1, asr #32
    429c:	01000041 	tsteq	r0, r1, asr #32
    42a0:	00005400 	andeq	r5, r0, r0, lsl #8
    42a4:	00000000 	andeq	r0, r0, r0
    42a8:	41920000 	orrsmi	r0, r2, r0
    42ac:	41a60000 			; <UNDEFINED> instruction: 0x41a60000
    42b0:	00010000 	andeq	r0, r1, r0
    42b4:	0041a652 	subeq	sl, r1, r2, asr r6
    42b8:	0041b200 	subeq	fp, r1, r0, lsl #4
    42bc:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    42c0:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    42c4:	0041c49f 	umaaleq	ip, r1, pc, r4	; <UNPREDICTABLE>
    42c8:	0041cc00 	subeq	ip, r1, r0, lsl #24
    42cc:	52000100 	andpl	r0, r0, #0, 2
	...
    42d8:	0000419a 	muleq	r0, sl, r1
    42dc:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    42e0:	b8530001 	ldmdalt	r3, {r0}^
    42e4:	c4000041 	strgt	r0, [r0], #-65	; 0xffffffbf
    42e8:	06000041 	streq	r0, [r0], -r1, asr #32
    42ec:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    42f0:	c49f24f0 	ldrgt	r2, [pc], #1264	; 42f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x48>
    42f4:	d0000041 	andle	r0, r0, r1, asr #32
    42f8:	01000041 	tsteq	r0, r1, asr #32
    42fc:	00005300 	andeq	r5, r0, r0, lsl #6
    4300:	00000000 	andeq	r0, r0, r0
    4304:	41a40000 			; <UNDEFINED> instruction: 0x41a40000
    4308:	41a60000 			; <UNDEFINED> instruction: 0x41a60000
    430c:	00060000 	andeq	r0, r6, r0
    4310:	00720076 	rsbseq	r0, r2, r6, ror r0
    4314:	41a69f22 			; <UNDEFINED> instruction: 0x41a69f22
    4318:	41ae0000 			; <UNDEFINED> instruction: 0x41ae0000
    431c:	00010000 	andeq	r0, r1, r0
    4320:	0041ae52 	subeq	sl, r1, r2, asr lr
    4324:	0041b000 	subeq	fp, r1, r0
    4328:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    432c:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    4330:	9f220076 	svcls	0x00220076
    4334:	000041b0 			; <UNDEFINED> instruction: 0x000041b0
    4338:	000041b2 			; <UNDEFINED> instruction: 0x000041b2
    433c:	b6550001 	ldrblt	r0, [r5], -r1
    4340:	b8000041 	stmdalt	r0, {r0, r6}
    4344:	06000041 	streq	r0, [r0], -r1, asr #32
    4348:	73007100 	movwvc	r7, #256	; 0x100
    434c:	b89f2200 	ldmlt	pc, {r9, sp}	; <UNPREDICTABLE>
    4350:	c0000041 	andgt	r0, r0, r1, asr #32
    4354:	01000041 	tsteq	r0, r1, asr #32
    4358:	41c05300 	bicmi	r5, r0, r0, lsl #6
    435c:	41c20000 	bicmi	r0, r2, r0
    4360:	00090000 	andeq	r0, r9, r0
    4364:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    4368:	22007124 	andcs	r7, r0, #36, 2
    436c:	0041c29f 	umaaleq	ip, r1, pc, r2	; <UNPREDICTABLE>
    4370:	0041c400 	subeq	ip, r1, r0, lsl #8
    4374:	30000200 	andcc	r0, r0, r0, lsl #4
    4378:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    437c:	00000000 	andeq	r0, r0, r0
    4380:	0041e800 	subeq	lr, r1, r0, lsl #16
    4384:	0041f000 	subeq	pc, r1, r0
    4388:	50000100 	andpl	r0, r0, r0, lsl #2
    438c:	000041f0 	strdeq	r4, [r0], -r0
    4390:	000041fc 	strdeq	r4, [r0], -ip
    4394:	01f30004 	mvnseq	r0, r4
    4398:	00009f50 	andeq	r9, r0, r0, asr pc
    439c:	00000000 	andeq	r0, r0, r0
    43a0:	41e80000 	mvnmi	r0, r0
    43a4:	41f60000 	mvnsmi	r0, r0
    43a8:	00020000 	andeq	r0, r2, r0
    43ac:	41f69f30 	mvnsmi	r9, r0, lsr pc
    43b0:	41fc0000 	mvnsmi	r0, r0
    43b4:	00010000 	andeq	r0, r1, r0
    43b8:	00000050 	andeq	r0, r0, r0, asr r0
    43bc:	00000000 	andeq	r0, r0, r0
    43c0:	0041ea00 	subeq	lr, r1, r0, lsl #20
    43c4:	0041f000 	subeq	pc, r1, r0
    43c8:	50000100 	andpl	r0, r0, r0, lsl #2
    43cc:	000041f0 	strdeq	r4, [r0], -r0
    43d0:	000041fc 	strdeq	r4, [r0], -ip
    43d4:	01f30004 	mvnseq	r0, r4
    43d8:	00009f50 	andeq	r9, r0, r0, asr pc
    43dc:	00000000 	andeq	r0, r0, r0
    43e0:	41f40000 	mvnsmi	r0, r0
    43e4:	41f60000 	mvnsmi	r0, r0
    43e8:	00010000 	andeq	r0, r1, r0
    43ec:	00000050 	andeq	r0, r0, r0, asr r0
    43f0:	00000000 	andeq	r0, r0, r0
    43f4:	0041fc00 	subeq	pc, r1, r0, lsl #24
    43f8:	00420400 	subeq	r0, r2, r0, lsl #8
    43fc:	50000100 	andpl	r0, r0, r0, lsl #2
    4400:	00004204 	andeq	r4, r0, r4, lsl #4
    4404:	00004210 	andeq	r4, r0, r0, lsl r2
    4408:	01f30004 	mvnseq	r0, r4
    440c:	00009f50 	andeq	r9, r0, r0, asr pc
    4410:	00000000 	andeq	r0, r0, r0
    4414:	41fc0000 	mvnsmi	r0, r0
    4418:	420a0000 	andmi	r0, sl, #0
    441c:	00020000 	andeq	r0, r2, r0
    4420:	420a9f31 	andmi	r9, sl, #49, 30	; 0xc4
    4424:	42100000 	andsmi	r0, r0, #0
    4428:	00010000 	andeq	r0, r1, r0
    442c:	00000050 	andeq	r0, r0, r0, asr r0
    4430:	00000000 	andeq	r0, r0, r0
    4434:	0041fe00 	subeq	pc, r1, r0, lsl #28
    4438:	00420400 	subeq	r0, r2, r0, lsl #8
    443c:	50000100 	andpl	r0, r0, r0, lsl #2
    4440:	00004204 	andeq	r4, r0, r4, lsl #4
    4444:	00004210 	andeq	r4, r0, r0, lsl r2
    4448:	01f30004 	mvnseq	r0, r4
    444c:	00009f50 	andeq	r9, r0, r0, asr pc
    4450:	00000000 	andeq	r0, r0, r0
    4454:	42080000 	andmi	r0, r8, #0
    4458:	420a0000 	andmi	r0, sl, #0
    445c:	00010000 	andeq	r0, r1, r0
    4460:	00000050 	andeq	r0, r0, r0, asr r0
    4464:	00000000 	andeq	r0, r0, r0
    4468:	00421000 	subeq	r1, r2, r0
    446c:	00421800 	subeq	r1, r2, r0, lsl #16
    4470:	50000100 	andpl	r0, r0, r0, lsl #2
    4474:	00004218 	andeq	r4, r0, r8, lsl r2
    4478:	00004224 	andeq	r4, r0, r4, lsr #4
    447c:	01f30004 	mvnseq	r0, r4
    4480:	00009f50 	andeq	r9, r0, r0, asr pc
    4484:	00000000 	andeq	r0, r0, r0
    4488:	42100000 	andsmi	r0, r0, #0
    448c:	421e0000 	andsmi	r0, lr, #0
    4490:	00020000 	andeq	r0, r2, r0
    4494:	421e9f31 	andsmi	r9, lr, #49, 30	; 0xc4
    4498:	42240000 	eormi	r0, r4, #0
    449c:	00010000 	andeq	r0, r1, r0
    44a0:	00000050 	andeq	r0, r0, r0, asr r0
    44a4:	00000000 	andeq	r0, r0, r0
    44a8:	00421200 	subeq	r1, r2, r0, lsl #4
    44ac:	00421800 	subeq	r1, r2, r0, lsl #16
    44b0:	50000100 	andpl	r0, r0, r0, lsl #2
    44b4:	00004218 	andeq	r4, r0, r8, lsl r2
    44b8:	00004224 	andeq	r4, r0, r4, lsr #4
    44bc:	01f30004 	mvnseq	r0, r4
    44c0:	00009f50 	andeq	r9, r0, r0, asr pc
    44c4:	00000000 	andeq	r0, r0, r0
    44c8:	421c0000 	andsmi	r0, ip, #0
    44cc:	421e0000 	andsmi	r0, lr, #0
    44d0:	00010000 	andeq	r0, r1, r0
    44d4:	00000050 	andeq	r0, r0, r0, asr r0
    44d8:	00000000 	andeq	r0, r0, r0
    44dc:	00422400 	subeq	r2, r2, r0, lsl #8
    44e0:	00423000 	subeq	r3, r2, r0
    44e4:	50000100 	andpl	r0, r0, r0, lsl #2
    44e8:	00004230 	andeq	r4, r0, r0, lsr r2
    44ec:	0000424c 	andeq	r4, r0, ip, asr #4
    44f0:	01f30004 	mvnseq	r0, r4
    44f4:	00009f50 	andeq	r9, r0, r0, asr pc
    44f8:	00000000 	andeq	r0, r0, r0
    44fc:	42240000 	eormi	r0, r4, #0
    4500:	42460000 	submi	r0, r6, #0
    4504:	00020000 	andeq	r0, r2, r0
    4508:	42469f30 	submi	r9, r6, #48, 30	; 0xc0
    450c:	424c0000 	submi	r0, ip, #0
    4510:	00010000 	andeq	r0, r1, r0
    4514:	00000050 	andeq	r0, r0, r0, asr r0
    4518:	00000000 	andeq	r0, r0, r0
    451c:	00422600 	subeq	r2, r2, r0, lsl #12
    4520:	00423000 	subeq	r3, r2, r0
    4524:	50000100 	andpl	r0, r0, r0, lsl #2
    4528:	00004230 	andeq	r4, r0, r0, lsr r2
    452c:	0000424c 	andeq	r4, r0, ip, asr #4
    4530:	01f30004 	mvnseq	r0, r4
    4534:	00009f50 	andeq	r9, r0, r0, asr pc
    4538:	00000000 	andeq	r0, r0, r0
    453c:	42380000 	eorsmi	r0, r8, #0
    4540:	42400000 	submi	r0, r0, #0
    4544:	00100000 	andseq	r0, r0, r0
    4548:	464c0073 			; <UNDEFINED> instruction: 0x464c0073
    454c:	25481a24 	strbcs	r1, [r8, #-2596]	; 0xfffff5dc
    4550:	00722432 	rsbseq	r2, r2, r2, lsr r4
    4554:	9f212438 	svcls	0x00212438
    4558:	00004242 	andeq	r4, r0, r2, asr #4
    455c:	00004246 	andeq	r4, r0, r6, asr #4
    4560:	00500001 	subseq	r0, r0, r1
    4564:	00000000 	andeq	r0, r0, r0
    4568:	2c000000 	stccs	0, cr0, [r0], {-0}
    456c:	40000042 	andmi	r0, r0, r2, asr #32
    4570:	01000042 	tsteq	r0, r2, asr #32
    4574:	00005300 	andeq	r5, r0, r0, lsl #6
    4578:	00000000 	andeq	r0, r0, r0
    457c:	42500000 	subsmi	r0, r0, #0
    4580:	42540000 	subsmi	r0, r4, #0
    4584:	00090000 	andeq	r0, r9, r0
    4588:	40480070 	submi	r0, r8, r0, ror r0
    458c:	25431a24 	strbcs	r1, [r3, #-2596]	; 0xfffff5dc
    4590:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4594:	00000000 	andeq	r0, r0, r0
    4598:	00425c00 	subeq	r5, r2, r0, lsl #24
    459c:	00426800 	subeq	r6, r2, r0, lsl #16
    45a0:	50000100 	andpl	r0, r0, r0, lsl #2
    45a4:	00004268 	andeq	r4, r0, r8, ror #4
    45a8:	00004288 	andeq	r4, r0, r8, lsl #5
    45ac:	01f30004 	mvnseq	r0, r4
    45b0:	00009f50 	andeq	r9, r0, r0, asr pc
    45b4:	00000000 	andeq	r0, r0, r0
    45b8:	425c0000 	subsmi	r0, ip, #0
    45bc:	427e0000 	rsbsmi	r0, lr, #0
    45c0:	00060000 	andeq	r0, r6, r0
    45c4:	3f80000c 	svccc	0x0080000c
    45c8:	427e9f40 	rsbsmi	r9, lr, #64, 30	; 0x100
    45cc:	42880000 	addmi	r0, r8, #0
    45d0:	00010000 	andeq	r0, r1, r0
    45d4:	00000050 	andeq	r0, r0, r0, asr r0
    45d8:	00000000 	andeq	r0, r0, r0
    45dc:	00425e00 	subeq	r5, r2, r0, lsl #28
    45e0:	00426800 	subeq	r6, r2, r0, lsl #16
    45e4:	50000100 	andpl	r0, r0, r0, lsl #2
    45e8:	00004268 	andeq	r4, r0, r8, ror #4
    45ec:	00004288 	andeq	r4, r0, r8, lsl #5
    45f0:	01f30004 	mvnseq	r0, r4
    45f4:	00009f50 	andeq	r9, r0, r0, asr pc
    45f8:	00000000 	andeq	r0, r0, r0
    45fc:	426c0000 	rsbmi	r0, ip, #0
    4600:	42720000 	rsbsmi	r0, r2, #0
    4604:	00100000 	andseq	r0, r0, r0
    4608:	f00a0073 			; <UNDEFINED> instruction: 0xf00a0073
    460c:	25341a03 	ldrcs	r1, [r4, #-2563]!	; 0xfffff5fd
    4610:	00722440 	rsbseq	r2, r2, r0, asr #8
    4614:	9f212446 	svcls	0x00212446
    4618:	0000427c 	andeq	r4, r0, ip, ror r2
    461c:	0000427e 	andeq	r4, r0, lr, ror r2
    4620:	00500001 	subseq	r0, r0, r1
    4624:	00000000 	andeq	r0, r0, r0
    4628:	64000000 	strvs	r0, [r0], #-0
    462c:	72000042 	andvc	r0, r0, #66	; 0x42
    4630:	01000042 	tsteq	r0, r2, asr #32
    4634:	00005300 	andeq	r5, r0, r0, lsl #6
    4638:	00000000 	andeq	r0, r0, r0
    463c:	42880000 	addmi	r0, r8, #0
    4640:	42900000 	addsmi	r0, r0, #0
    4644:	00010000 	andeq	r0, r1, r0
    4648:	00429050 	subeq	r9, r2, r0, asr r0
    464c:	00429c00 	subeq	r9, r2, r0, lsl #24
    4650:	f3000400 	vshl.u8	d0, d0, d0
    4654:	009f5001 	addseq	r5, pc, r1
    4658:	00000000 	andeq	r0, r0, r0
    465c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    4660:	96000042 	strls	r0, [r0], -r2, asr #32
    4664:	02000042 	andeq	r0, r0, #66	; 0x42
    4668:	969f3000 	ldrls	r3, [pc], r0
    466c:	9c000042 	stcls	0, cr0, [r0], {66}	; 0x42
    4670:	01000042 	tsteq	r0, r2, asr #32
    4674:	00005000 	andeq	r5, r0, r0
    4678:	00000000 	andeq	r0, r0, r0
    467c:	428a0000 	addmi	r0, sl, #0
    4680:	42900000 	addsmi	r0, r0, #0
    4684:	00010000 	andeq	r0, r1, r0
    4688:	00429050 	subeq	r9, r2, r0, asr r0
    468c:	00429c00 	subeq	r9, r2, r0, lsl #24
    4690:	f3000400 	vshl.u8	d0, d0, d0
    4694:	009f5001 	addseq	r5, pc, r1
    4698:	00000000 	andeq	r0, r0, r0
    469c:	94000000 	strls	r0, [r0], #-0
    46a0:	96000042 	strls	r0, [r0], -r2, asr #32
    46a4:	01000042 	tsteq	r0, r2, asr #32
    46a8:	00005000 	andeq	r5, r0, r0
    46ac:	00000000 	andeq	r0, r0, r0
    46b0:	429c0000 	addsmi	r0, ip, #0
    46b4:	42a40000 	adcmi	r0, r4, #0
    46b8:	00010000 	andeq	r0, r1, r0
    46bc:	0042a450 	subeq	sl, r2, r0, asr r4
    46c0:	0042b000 	subeq	fp, r2, r0
    46c4:	f3000400 	vshl.u8	d0, d0, d0
    46c8:	009f5001 	addseq	r5, pc, r1
    46cc:	00000000 	andeq	r0, r0, r0
    46d0:	9c000000 	stcls	0, cr0, [r0], {-0}
    46d4:	aa000042 	bge	47e4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x28>
    46d8:	02000042 	andeq	r0, r0, #66	; 0x42
    46dc:	aa9f3000 	bge	fe7d06e4 <_estack+0xde7cb6e4>
    46e0:	b0000042 	andlt	r0, r0, r2, asr #32
    46e4:	01000042 	tsteq	r0, r2, asr #32
    46e8:	00005000 	andeq	r5, r0, r0
    46ec:	00000000 	andeq	r0, r0, r0
    46f0:	429e0000 	addsmi	r0, lr, #0
    46f4:	42a40000 	adcmi	r0, r4, #0
    46f8:	00010000 	andeq	r0, r1, r0
    46fc:	0042a450 	subeq	sl, r2, r0, asr r4
    4700:	0042b000 	subeq	fp, r2, r0
    4704:	f3000400 	vshl.u8	d0, d0, d0
    4708:	009f5001 	addseq	r5, pc, r1
    470c:	00000000 	andeq	r0, r0, r0
    4710:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    4714:	aa000042 	bge	4824 <NOROM_SysCtrlResetSourceGet+0x8>
    4718:	01000042 	tsteq	r0, r2, asr #32
    471c:	00005000 	andeq	r5, r0, r0
    4720:	00000000 	andeq	r0, r0, r0
    4724:	42b00000 	adcsmi	r0, r0, #0
    4728:	42b60000 	adcsmi	r0, r6, #0
    472c:	00010000 	andeq	r0, r1, r0
    4730:	0042b650 	subeq	fp, r2, r0, asr r6
    4734:	0043a000 	subeq	sl, r3, r0
    4738:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    473c:	000043a0 	andeq	r4, r0, r0, lsr #7
    4740:	000043c0 	andeq	r4, r0, r0, asr #7
    4744:	01f30004 	mvnseq	r0, r4
    4748:	00009f50 	andeq	r9, r0, r0, asr pc
    474c:	00000000 	andeq	r0, r0, r0
    4750:	42b00000 	adcsmi	r0, r0, #0
    4754:	42b90000 	adcsmi	r0, r9, #0
    4758:	00010000 	andeq	r0, r1, r0
    475c:	0042b951 	subeq	fp, r2, r1, asr r9
    4760:	0043c000 	subeq	ip, r3, r0
    4764:	f3000400 	vshl.u8	d0, d0, d0
    4768:	009f5101 	addseq	r5, pc, r1, lsl #2
    476c:	00000000 	andeq	r0, r0, r0
    4770:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    4774:	c2000042 	andgt	r0, r0, #66	; 0x42
    4778:	01000042 	tsteq	r0, r2, asr #32
    477c:	42c25000 	sbcmi	r5, r2, #0
    4780:	42c50000 	sbcmi	r0, r5, #0
    4784:	00010000 	andeq	r0, r1, r0
    4788:	0042ca52 	subeq	ip, r2, r2, asr sl
    478c:	0042ce00 	subeq	ip, r2, r0, lsl #28
    4790:	50000100 	andpl	r0, r0, r0, lsl #2
    4794:	000042f8 	strdeq	r4, [r0], -r8
    4798:	000042fa 	strdeq	r4, [r0], -sl
    479c:	fa500001 	blx	14047a8 <__ccfg+0x13e4800>
    47a0:	fd000042 	stc2	0, cr0, [r0, #-264]	; 0xfffffef8
    47a4:	01000042 	tsteq	r0, r2, asr #32
    47a8:	43065200 	movwmi	r5, #25088	; 0x6200
    47ac:	43080000 	movwmi	r0, #32768	; 0x8000
    47b0:	00010000 	andeq	r0, r1, r0
    47b4:	00430850 	subeq	r0, r3, r0, asr r8
    47b8:	00430b00 	subeq	r0, r3, r0, lsl #22
    47bc:	52000100 	andpl	r0, r0, #0, 2
    47c0:	00004316 	andeq	r4, r0, r6, lsl r3
    47c4:	00004318 	andeq	r4, r0, r8, lsl r3
    47c8:	18500001 	ldmdane	r0, {r0}^
    47cc:	1b000043 	blne	48e0 <NOROM_ChipInfo_GetHwRevision+0x60>
    47d0:	01000043 	tsteq	r0, r3, asr #32
    47d4:	43225200 			; <UNDEFINED> instruction: 0x43225200
    47d8:	43240000 			; <UNDEFINED> instruction: 0x43240000
    47dc:	00010000 	andeq	r0, r1, r0
    47e0:	00433450 	subeq	r3, r3, r0, asr r4
    47e4:	00433800 	subeq	r3, r3, r0, lsl #16
    47e8:	50000100 	andpl	r0, r0, r0, lsl #2
    47ec:	00004346 	andeq	r4, r0, r6, asr #6
    47f0:	00004348 	andeq	r4, r0, r8, asr #6
    47f4:	48500001 	ldmdami	r0, {r0}^
    47f8:	4b000043 	blmi	490c <AuxAdiDdiSafeWrite.constprop.1+0x8>
    47fc:	01000043 	tsteq	r0, r3, asr #32
    4800:	43525200 	cmpmi	r2, #0, 4
    4804:	43540000 	cmpmi	r4, #0
    4808:	00010000 	andeq	r0, r1, r0
    480c:	00436450 	subeq	r6, r3, r0, asr r4
    4810:	00436600 	subeq	r6, r3, r0, lsl #12
    4814:	50000100 	andpl	r0, r0, r0, lsl #2
    4818:	00004376 	andeq	r4, r0, r6, ror r3
    481c:	0000437a 	andeq	r4, r0, sl, ror r3
    4820:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
    4824:	90000043 	andls	r0, r0, r3, asr #32
    4828:	01000043 	tsteq	r0, r3, asr #32
    482c:	43905000 	orrsmi	r5, r0, #0
    4830:	43930000 	orrsmi	r0, r3, #0
    4834:	00010000 	andeq	r0, r1, r0
    4838:	00000052 	andeq	r0, r0, r2, asr r0
    483c:	00000000 	andeq	r0, r0, r0
    4840:	0042e600 	subeq	lr, r2, r0, lsl #12
    4844:	0042ec00 	subeq	lr, r2, r0, lsl #24
    4848:	72000700 	andvc	r0, r0, #0, 14
    484c:	3fff0a00 	svccc	0x00ff0a00
    4850:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4854:	00000000 	andeq	r0, r0, r0
    4858:	43da0000 	bicsmi	r0, sl, #0
    485c:	43e40000 	mvnmi	r0, #0
    4860:	00090000 	andeq	r0, r9, r0
    4864:	040c0073 	streq	r0, [ip], #-115	; 0xffffff8d
    4868:	21200000 			; <UNDEFINED> instruction: 0x21200000
    486c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4870:	00000000 	andeq	r0, r0, r0
    4874:	00442400 	subeq	r2, r4, r0, lsl #8
    4878:	00442c00 	subeq	r2, r4, r0, lsl #24
    487c:	50000100 	andpl	r0, r0, r0, lsl #2
    4880:	0000442c 	andeq	r4, r0, ip, lsr #8
    4884:	0000444c 	andeq	r4, r0, ip, asr #8
    4888:	01f30004 	mvnseq	r0, r4
    488c:	00009f50 	andeq	r9, r0, r0, asr pc
    4890:	00000000 	andeq	r0, r0, r0
    4894:	444c0000 	strbmi	r0, [ip], #-0
    4898:	44740000 	ldrbtmi	r0, [r4], #-0
    489c:	00010000 	andeq	r0, r1, r0
    48a0:	00447450 	subeq	r7, r4, r0, asr r4
    48a4:	0044b400 	subeq	fp, r4, r0, lsl #8
    48a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    48ac:	000044b4 			; <UNDEFINED> instruction: 0x000044b4
    48b0:	000044bc 			; <UNDEFINED> instruction: 0x000044bc
    48b4:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    48b8:	06000044 	streq	r0, [r0], -r4, asr #32
    48bc:	01000045 	tsteq	r0, r5, asr #32
    48c0:	45065400 	strmi	r5, [r6, #-1024]	; 0xfffffc00
    48c4:	45420000 	strbmi	r0, [r2, #-0]
    48c8:	00040000 	andeq	r0, r4, r0
    48cc:	9f5001f3 	svcls	0x005001f3
    48d0:	00004542 	andeq	r4, r0, r2, asr #10
    48d4:	00004546 	andeq	r4, r0, r6, asr #10
    48d8:	46540001 	ldrbmi	r0, [r4], -r1
    48dc:	9c000045 	stcls	0, cr0, [r0], {69}	; 0x45
    48e0:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
    48e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    48e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48ec:	00000000 	andeq	r0, r0, r0
    48f0:	00446200 	subeq	r6, r4, r0, lsl #4
    48f4:	0044a400 	subeq	sl, r4, r0, lsl #8
    48f8:	53000100 	movwpl	r0, #256	; 0x100
	...
    4904:	000044d6 	ldrdeq	r4, [r0], -r6
    4908:	000044dc 	ldrdeq	r4, [r0], -ip
    490c:	00500001 	subseq	r0, r0, r1
    4910:	00000000 	andeq	r0, r0, r0
    4914:	06000000 	streq	r0, [r0], -r0
    4918:	08000045 	stmdaeq	r0, {r0, r2, r6}
    491c:	01000045 	tsteq	r0, r5, asr #32
    4920:	45085000 	strmi	r5, [r8, #-0]
    4924:	451c0000 	ldrmi	r0, [ip, #-0]
    4928:	00010000 	andeq	r0, r1, r0
    492c:	00000054 	andeq	r0, r0, r4, asr r0
    4930:	00000000 	andeq	r0, r0, r0
    4934:	00451c00 	subeq	r1, r5, r0, lsl #24
    4938:	00453c00 	subeq	r3, r5, r0, lsl #24
    493c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4950:	00550001 	subseq	r0, r5, r1
    4954:	00000000 	andeq	r0, r0, r0
    4958:	03000000 	movweq	r0, #0
    495c:	9f7f7500 	svcls	0x007f7500
	...
    4968:	00550001 	subseq	r0, r5, r1
    496c:	00000000 	andeq	r0, r0, r0
    4970:	9c000000 	stcls	0, cr0, [r0], {-0}
    4974:	bb000045 	bllt	4a90 <__aeabi_lmul+0x64>
    4978:	01000045 	tsteq	r0, r5, asr #32
    497c:	45bb5000 	ldrmi	r5, [fp, #0]!
    4980:	467c0000 	ldrbtmi	r0, [ip], -r0
    4984:	00010000 	andeq	r0, r1, r0
    4988:	00467c57 	subeq	r7, r6, r7, asr ip
    498c:	0047bc00 	subeq	fp, r7, r0, lsl #24
    4990:	f3000400 	vshl.u8	d0, d0, d0
    4994:	009f5001 	addseq	r5, pc, r1
    4998:	00000000 	andeq	r0, r0, r0
    499c:	bc000000 	stclt	0, cr0, [r0], {-0}
    49a0:	3c000045 	stccc	0, cr0, [r0], {69}	; 0x45
    49a4:	01000047 	tsteq	r0, r7, asr #32
    49a8:	473e5000 	ldrmi	r5, [lr, -r0]!
    49ac:	47780000 	ldrbmi	r0, [r8, -r0]!
    49b0:	00010000 	andeq	r0, r1, r0
    49b4:	00000050 	andeq	r0, r0, r0, asr r0
    49b8:	00000000 	andeq	r0, r0, r0
    49bc:	00466400 	subeq	r6, r6, r0, lsl #8
    49c0:	00466800 	subeq	r6, r6, r0, lsl #16
    49c4:	70000300 	andvc	r0, r0, r0, lsl #6
    49c8:	46689f71 	uqsub16mi	r9, r8, r1
    49cc:	466e0000 	strbtmi	r0, [lr], -r0
    49d0:	00010000 	andeq	r0, r1, r0
    49d4:	00466e51 	subeq	r6, r6, r1, asr lr
    49d8:	00468e00 	subeq	r8, r6, r0, lsl #28
    49dc:	91000200 	mrsls	r0, R8_usr
    49e0:	00468e54 	subeq	r8, r6, r4, asr lr
    49e4:	00469a00 	subeq	r9, r6, r0, lsl #20
    49e8:	51000100 	mrspl	r0, (UNDEF: 16)
    49ec:	0000469a 	muleq	r0, sl, r6
    49f0:	0000469c 	muleq	r0, ip, r6
    49f4:	54910002 	ldrpl	r0, [r1], #2
    49f8:	0000469c 	muleq	r0, ip, r6
    49fc:	0000469e 	muleq	r0, lr, r6
    4a00:	9e510001 	cdpls	0, 5, cr0, cr1, cr1, {0}
    4a04:	44000046 	strmi	r0, [r0], #-70	; 0xffffffba
    4a08:	02000047 	andeq	r0, r0, #71	; 0x47
    4a0c:	00549100 	subseq	r9, r4, r0, lsl #2
    4a10:	00000000 	andeq	r0, r0, r0
    4a14:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    4a18:	22000045 	andcs	r0, r0, #69	; 0x45
    4a1c:	01000046 	tsteq	r0, r6, asr #32
    4a20:	462a5100 	strtmi	r5, [sl], -r0, lsl #2
    4a24:	462c0000 	strtmi	r0, [ip], -r0
    4a28:	00010000 	andeq	r0, r1, r0
    4a2c:	00000051 	andeq	r0, r0, r1, asr r0
    4a30:	00000000 	andeq	r0, r0, r0
    4a34:	00461a00 	subeq	r1, r6, r0, lsl #20
    4a38:	00462800 	subeq	r2, r6, r0, lsl #16
    4a3c:	52000100 	andpl	r0, r0, #0, 2
    4a40:	0000462a 	andeq	r4, r0, sl, lsr #12
    4a44:	0000470c 	andeq	r4, r0, ip, lsl #14
    4a48:	00520001 	subseq	r0, r2, r1
    4a4c:	00000000 	andeq	r0, r0, r0
    4a50:	1a000000 	bne	4a58 <__aeabi_lmul+0x2c>
    4a54:	02000046 	andeq	r0, r0, #70	; 0x46
    4a58:	01000047 	tsteq	r0, r7, asr #32
    4a5c:	00005300 	andeq	r5, r0, r0, lsl #6
    4a60:	00000000 	andeq	r0, r0, r0
    4a64:	45c00000 	strbmi	r0, [r0]
    4a68:	47160000 	ldrmi	r0, [r6, -r0]
    4a6c:	00010000 	andeq	r0, r1, r0
    4a70:	00000055 	andeq	r0, r0, r5, asr r0
    4a74:	00000000 	andeq	r0, r0, r0
    4a78:	0045bc00 	subeq	fp, r5, r0, lsl #24
    4a7c:	00464400 	subeq	r4, r6, r0, lsl #8
    4a80:	30000200 	andcc	r0, r0, r0, lsl #4
    4a84:	0046449f 	umaaleq	r4, r6, pc, r4	; <UNPREDICTABLE>
    4a88:	00477800 	subeq	r7, r7, r0, lsl #16
    4a8c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4a98:	0000463c 	andeq	r4, r0, ip, lsr r6
    4a9c:	00004646 	andeq	r4, r0, r6, asr #12
    4aa0:	00510001 	subseq	r0, r1, r1
    4aa4:	00000000 	andeq	r0, r0, r0
    4aa8:	64000000 	strvs	r0, [r0], #-0
    4aac:	b4000046 	strlt	r0, [r0], #-70	; 0xffffffba
    4ab0:	02000046 	andeq	r0, r0, #70	; 0x46
    4ab4:	b49f3000 	ldrlt	r3, [pc], #0	; 4abc <__aeabi_lmul+0x90>
    4ab8:	d4000046 	strle	r0, [r0], #-70	; 0xffffffba
    4abc:	01000046 	tsteq	r0, r6, asr #32
    4ac0:	46d45100 	ldrbmi	r5, [r4], r0, lsl #2
    4ac4:	46da0000 	ldrbmi	r0, [sl], r0
    4ac8:	00020000 	andeq	r0, r2, r0
    4acc:	46da9f30 			; <UNDEFINED> instruction: 0x46da9f30
    4ad0:	47140000 	ldrmi	r0, [r4, -r0]
    4ad4:	00010000 	andeq	r0, r1, r0
    4ad8:	00000051 	andeq	r0, r0, r1, asr r0
    4adc:	00000000 	andeq	r0, r0, r0
    4ae0:	00469000 	subeq	r9, r6, r0
    4ae4:	00469400 	subeq	r9, r6, r0, lsl #8
    4ae8:	5e000100 	adfpls	f0, f0, f0
    4aec:	0000469c 	muleq	r0, ip, r6
    4af0:	0000469e 	muleq	r0, lr, r6
    4af4:	9e5e0001 	cdpls	0, 5, cr0, cr14, cr1, {0}
    4af8:	a4000046 	strge	r0, [r0], #-70	; 0xffffffba
    4afc:	01000046 	tsteq	r0, r6, asr #32
    4b00:	46a45100 	strtmi	r5, [r4], r0, lsl #2
    4b04:	46ac0000 	strtmi	r0, [ip], r0
    4b08:	00030000 	andeq	r0, r3, r0
    4b0c:	009f7f71 	addseq	r7, pc, r1, ror pc	; <UNPREDICTABLE>
    4b10:	00000000 	andeq	r0, r0, r0
    4b14:	64000000 	strvs	r0, [r0], #-0
    4b18:	8e000046 	cdphi	0, 0, cr0, cr0, cr6, {2}
    4b1c:	02000046 	andeq	r0, r0, #70	; 0x46
    4b20:	8e9f3000 	cdphi	0, 9, cr3, cr15, cr0, {0}
    4b24:	98000046 	stmdals	r0, {r1, r2, r6}
    4b28:	01000046 	tsteq	r0, r6, asr #32
    4b2c:	46985e00 	ldrmi	r5, [r8], r0, lsl #28
    4b30:	469a0000 	ldrmi	r0, [sl], r0
    4b34:	00050000 	andeq	r0, r5, r0
    4b38:	26380071 			; <UNDEFINED> instruction: 0x26380071
    4b3c:	00469a9f 	umaaleq	r9, r6, pc, sl	; <UNPREDICTABLE>
    4b40:	00469c00 	subeq	r9, r6, r0, lsl #24
    4b44:	91000600 	tstls	r0, r0, lsl #12
    4b48:	26380654 			; <UNDEFINED> instruction: 0x26380654
    4b4c:	00469c9f 	umaaleq	r9, r6, pc, ip	; <UNPREDICTABLE>
    4b50:	00469e00 	subeq	r9, r6, r0, lsl #28
    4b54:	5e000100 	adfpls	f0, f0, f0
    4b58:	0000469e 	muleq	r0, lr, r6
    4b5c:	000046d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4b60:	54910006 	ldrpl	r0, [r1], #6
    4b64:	9f263806 	svcls	0x00263806
    4b68:	000046d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4b6c:	000046da 	ldrdeq	r4, [r0], -sl
    4b70:	9f300002 	svcls	0x00300002
    4b74:	000046da 	ldrdeq	r4, [r0], -sl
    4b78:	00004744 	andeq	r4, r0, r4, asr #14
    4b7c:	005e0001 	subseq	r0, lr, r1
    4b80:	00000000 	andeq	r0, r0, r0
    4b84:	b0000000 	andlt	r0, r0, r0
    4b88:	d4000046 	strle	r0, [r0], #-70	; 0xffffffba
    4b8c:	01000046 	tsteq	r0, r6, asr #32
    4b90:	00005c00 	andeq	r5, r0, r0, lsl #24
    4b94:	00000000 	andeq	r0, r0, r0
    4b98:	46de0000 	ldrbmi	r0, [lr], r0
    4b9c:	47440000 	strbmi	r0, [r4, -r0]
    4ba0:	00010000 	andeq	r0, r1, r0
    4ba4:	0000005a 	andeq	r0, r0, sl, asr r0
    4ba8:	00000000 	andeq	r0, r0, r0
    4bac:	0046e200 	subeq	lr, r6, r0, lsl #4
    4bb0:	00471e00 	subeq	r1, r7, r0, lsl #28
    4bb4:	5c000100 	stfpls	f0, [r0], {-0}
    4bb8:	0000471e 	andeq	r4, r0, lr, lsl r7
    4bbc:	00004722 	andeq	r4, r0, r2, lsr #14
    4bc0:	00510001 	subseq	r0, r1, r1
    4bc4:	00000000 	andeq	r0, r0, r0
    4bc8:	22000000 	andcs	r0, r0, #0
    4bcc:	2c000047 	stccs	0, cr0, [r0], {71}	; 0x47
    4bd0:	17000047 	strne	r0, [r0, -r7, asr #32]
    4bd4:	12007100 	andne	r7, r0, #0, 2
    4bd8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4bdc:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    4be0:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4be4:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4be8:	9f131600 	svcls	0x00131600
	...
    4bf4:	0000474c 	andeq	r4, r0, ip, asr #14
    4bf8:	00004758 	andeq	r4, r0, r8, asr r7
    4bfc:	9f300002 	svcls	0x00300002
    4c00:	00004758 	andeq	r4, r0, r8, asr r7
    4c04:	00004778 	andeq	r4, r0, r8, ror r7
    4c08:	00510001 	subseq	r0, r1, r1
    4c0c:	00000000 	andeq	r0, r0, r0
    4c10:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    4c14:	50000047 	andpl	r0, r0, r7, asr #32
    4c18:	01000047 	tsteq	r0, r7, asr #32
    4c1c:	47505300 	ldrbmi	r5, [r0, -r0, lsl #6]
    4c20:	47580000 	ldrbmi	r0, [r8, -r0]
    4c24:	00020000 	andeq	r0, r2, r0
    4c28:	47589f4f 	ldrbmi	r9, [r8, -pc, asr #30]
    4c2c:	47680000 	strbmi	r0, [r8, -r0]!
    4c30:	00010000 	andeq	r0, r1, r0
    4c34:	00476853 	subeq	r6, r7, r3, asr r8
    4c38:	00476c00 	subeq	r6, r7, r0, lsl #24
    4c3c:	73000500 	movwvc	r0, #1280	; 0x500
    4c40:	9f253400 	svcls	0x00253400
    4c44:	0000476c 	andeq	r4, r0, ip, ror #14
    4c48:	00004770 	andeq	r4, r0, r0, ror r7
    4c4c:	00530001 	subseq	r0, r3, r1
    4c50:	00000000 	andeq	r0, r0, r0
    4c54:	64000000 	strvs	r0, [r0], #-0
    4c58:	44000046 	strmi	r0, [r0], #-70	; 0xffffffba
    4c5c:	06000047 	streq	r0, [r0], -r7, asr #32
    4c60:	139c0c00 	orrsne	r0, ip, #0, 24
    4c64:	009f5000 	addseq	r5, pc, r0
    4c68:	00000000 	andeq	r0, r0, r0
    4c6c:	d0000000 	andle	r0, r0, r0
    4c70:	dc000045 	stcle	0, cr0, [r0], {69}	; 0x45
    4c74:	01000045 	tsteq	r0, r5, asr #32
    4c78:	00005300 	andeq	r5, r0, r0, lsl #6
    4c7c:	00000000 	andeq	r0, r0, r0
    4c80:	45f00000 	ldrbmi	r0, [r0, #0]!
    4c84:	45fc0000 	ldrbmi	r0, [ip, #0]!
    4c88:	00010000 	andeq	r0, r1, r0
    4c8c:	00000052 	andeq	r0, r0, r2, asr r0
    4c90:	00000000 	andeq	r0, r0, r0
    4c94:	00460600 	subeq	r0, r6, r0, lsl #12
    4c98:	00461200 	subeq	r1, r6, r0, lsl #4
    4c9c:	52000100 	andpl	r0, r0, #0, 2
	...
    4ca8:	00004612 	andeq	r4, r0, r2, lsl r6
    4cac:	00004702 	andeq	r4, r0, r2, lsl #14
    4cb0:	00530001 	subseq	r0, r3, r1
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	ca000000 	bgt	4cc0 <__aeabi_lmul+0x294>
    4cbc:	d4000047 	strle	r0, [r0], #-71	; 0xffffffb9
    4cc0:	01000047 	tsteq	r0, r7, asr #32
    4cc4:	47d45000 	ldrbmi	r5, [r4, r0]
    4cc8:	47de0000 	ldrbmi	r0, [lr, r0]
    4ccc:	000e0000 	andeq	r0, lr, r0
    4cd0:	09120070 	ldmdbeq	r2, {r4, r5, r6}
    4cd4:	2b141680 	blcs	50a6dc <__ccfg+0x4ea734>
    4cd8:	16000128 	strne	r0, [r0], -r8, lsr #2
    4cdc:	00009f13 	andeq	r9, r0, r3, lsl pc
    4ce0:	00000000 	andeq	r0, r0, r0
    4ce4:	47c40000 	strbmi	r0, [r4, r0]
    4ce8:	47f00000 	ldrbmi	r0, [r0, r0]!
    4cec:	00010000 	andeq	r0, r1, r0
    4cf0:	00000054 	andeq	r0, r0, r4, asr r0
    4cf4:	00000000 	andeq	r0, r0, r0
    4cf8:	0047f400 	subeq	pc, r7, r0, lsl #8
    4cfc:	0047fa00 	subeq	pc, r7, r0, lsl #20
    4d00:	73001500 	movwvc	r1, #1280	; 0x500
    4d04:	4b401200 	blmi	100950c <__ccfg+0xfe9564>
    4d08:	164f2224 	strbne	r2, [pc], -r4, lsr #4
    4d0c:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4d10:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4d14:	9f131600 	svcls	0x00131600
	...
    4d20:	00004800 	andeq	r4, r0, r0, lsl #16
    4d24:	0000480a 	andeq	r4, r0, sl, lsl #16
    4d28:	00740017 	rsbseq	r0, r4, r7, lsl r0
    4d2c:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    4d30:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    4d34:	4b401416 	blmi	1009d94 <__ccfg+0xfe9dec>
    4d38:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    4d3c:	13160001 	tstne	r6, #1
    4d40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d50:	52000100 	andpl	r0, r0, #0, 2
	...
    4d64:	00500001 	subseq	r0, r0, r1
	...
    4d74:	01000000 	mrseq	r0, (UNDEF: 0)
    4d78:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    4d88:	00010000 	andeq	r0, r1, r0
    4d8c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4d9c:	70001600 	andvc	r1, r0, r0, lsl #12
    4da0:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    4da4:	244b4000 	strbcs	r4, [fp], #-0
    4da8:	00050c22 	andeq	r0, r5, r2, lsr #24
    4dac:	282d8000 	stmdacs	sp!, {pc}
    4db0:	13160001 	tstne	r6, #1
    4db4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4db8:	00000000 	andeq	r0, r0, r0
    4dbc:	00483400 	subeq	r3, r8, r0, lsl #8
    4dc0:	00487600 	subeq	r7, r8, r0, lsl #12
    4dc4:	09000300 	stmdbeq	r0, {r8, r9}
    4dc8:	48769fff 	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    4dcc:	48800000 	stmmi	r0, {}	; <UNPREDICTABLE>
    4dd0:	00010000 	andeq	r0, r1, r0
    4dd4:	00000050 	andeq	r0, r0, r0, asr r0
    4dd8:	00000000 	andeq	r0, r0, r0
    4ddc:	00484000 	subeq	r4, r8, r0
    4de0:	00484e00 	subeq	r4, r8, r0, lsl #28
    4de4:	50000100 	andpl	r0, r0, r0, lsl #2
    4de8:	00004852 	andeq	r4, r0, r2, asr r8
    4dec:	0000486e 	andeq	r4, r0, lr, ror #16
    4df0:	70500001 	subsvc	r0, r0, r1
    4df4:	72000048 	andvc	r0, r0, #72	; 0x48
    4df8:	01000048 	tsteq	r0, r8, asr #32
    4dfc:	48745000 	ldmdami	r4!, {ip, lr}^
    4e00:	48760000 	ldmdami	r6!, {}^	; <UNPREDICTABLE>
    4e04:	00010000 	andeq	r0, r1, r0
    4e08:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4e18:	09000300 	stmdbeq	r0, {r8, r9}
    4e1c:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    4e20:	00000000 	andeq	r0, r0, r0
    4e24:	00010000 	andeq	r0, r1, r0
    4e28:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4e38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4e44:	00004880 	andeq	r4, r0, r0, lsl #17
    4e48:	000048ba 			; <UNDEFINED> instruction: 0x000048ba
    4e4c:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4e50:	0048ba9f 	umaaleq	fp, r8, pc, sl	; <UNPREDICTABLE>
    4e54:	0048be00 	subeq	fp, r8, r0, lsl #28
    4e58:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    4e5c:	0048be9f 	umaaleq	fp, r8, pc, lr	; <UNPREDICTABLE>
    4e60:	0048c200 	subeq	ip, r8, r0, lsl #4
    4e64:	45000200 	strmi	r0, [r0, #-512]	; 0xfffffe00
    4e68:	0048c29f 	umaaleq	ip, r8, pc, r2	; <UNPREDICTABLE>
    4e6c:	0048e000 	subeq	lr, r8, r0
    4e70:	09000300 	stmdbeq	r0, {r8, r9}
    4e74:	48e09fff 	stmiami	r0!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    4e78:	48e20000 	stmiami	r2!, {}^	; <UNPREDICTABLE>
    4e7c:	00010000 	andeq	r0, r1, r0
    4e80:	0048e250 	subeq	lr, r8, r0, asr r2
    4e84:	0048e400 	subeq	lr, r8, r0, lsl #8
    4e88:	09000300 	stmdbeq	r0, {r8, r9}
    4e8c:	48e49fff 	stmiami	r4!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    4e90:	48ec0000 	stmiami	ip!, {}^	; <UNPREDICTABLE>
    4e94:	00010000 	andeq	r0, r1, r0
    4e98:	00000050 	andeq	r0, r0, r0, asr r0
    4e9c:	00000000 	andeq	r0, r0, r0
    4ea0:	00489000 	subeq	r9, r8, r0
    4ea4:	0048e800 	subeq	lr, r8, r0, lsl #16
    4ea8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4eb4:	00004904 	andeq	r4, r0, r4, lsl #18
    4eb8:	0000490d 	andeq	r4, r0, sp, lsl #18
    4ebc:	0d500001 	ldcleq	0, cr0, [r0, #-4]
    4ec0:	22000049 	andcs	r0, r0, #73	; 0x49
    4ec4:	01000049 	tsteq	r0, r9, asr #32
    4ec8:	49225400 	stmdbmi	r2!, {sl, ip, lr}
    4ecc:	49260000 	stmdbmi	r6!, {}	; <UNPREDICTABLE>
    4ed0:	00040000 	andeq	r0, r4, r0
    4ed4:	9f5001f3 	svcls	0x005001f3
    4ed8:	00004926 	andeq	r4, r0, r6, lsr #18
    4edc:	00004928 	andeq	r4, r0, r8, lsr #18
    4ee0:	28540001 	ldmdacs	r4, {r0}^
    4ee4:	2c000049 	stccs	0, cr0, [r0], {73}	; 0x49
    4ee8:	04000049 	streq	r0, [r0], #-73	; 0xffffffb7
    4eec:	5001f300 	andpl	pc, r1, r0, lsl #6
    4ef0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ef4:	00000000 	andeq	r0, r0, r0
    4ef8:	00490400 	subeq	r0, r9, r0, lsl #8
    4efc:	00490d00 	subeq	r0, r9, r0, lsl #26
    4f00:	51000100 	mrspl	r0, (UNDEF: 16)
    4f04:	0000490d 	andeq	r4, r0, sp, lsl #18
    4f08:	00004922 	andeq	r4, r0, r2, lsr #18
    4f0c:	22550001 	subscs	r0, r5, #1
    4f10:	26000049 	strcs	r0, [r0], -r9, asr #32
    4f14:	04000049 	streq	r0, [r0], #-73	; 0xffffffb7
    4f18:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4f1c:	0049269f 	umaaleq	r2, r9, pc, r6	; <UNPREDICTABLE>
    4f20:	00492800 	subeq	r2, r9, r0, lsl #16
    4f24:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    4f28:	00004928 	andeq	r4, r0, r8, lsr #18
    4f2c:	0000492c 	andeq	r4, r0, ip, lsr #18
    4f30:	01f30004 	mvnseq	r0, r4
    4f34:	00009f51 	andeq	r9, r0, r1, asr pc
    4f38:	00000000 	andeq	r0, r0, r0
    4f3c:	490e0000 	stmdbmi	lr, {}	; <UNPREDICTABLE>
    4f40:	49250000 	stmdbmi	r5!, {}	; <UNPREDICTABLE>
    4f44:	00050000 	andeq	r0, r5, r0
    4f48:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4f4c:	0049269f 	umaaleq	r2, r9, pc, r6	; <UNPREDICTABLE>
    4f50:	00492c00 	subeq	r2, r9, r0, lsl #24
    4f54:	70000500 	andvc	r0, r0, r0, lsl #10
    4f58:	9f293000 	svcls	0x00293000
	...
    4f64:	0000492c 	andeq	r4, r0, ip, lsr #18
    4f68:	0000492e 	andeq	r4, r0, lr, lsr #18
    4f6c:	2e500001 	cdpcs	0, 5, cr0, cr0, cr1, {0}
    4f70:	34000049 	strcc	r0, [r0], #-73	; 0xffffffb7
    4f74:	04000049 	streq	r0, [r0], #-73	; 0xffffffb7
    4f78:	5001f300 	andpl	pc, r1, r0, lsl #6
    4f7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f80:	00000000 	andeq	r0, r0, r0
    4f84:	00492c00 	subeq	r2, r9, r0, lsl #24
    4f88:	00493000 	subeq	r3, r9, r0
    4f8c:	51000100 	mrspl	r0, (UNDEF: 16)
    4f90:	00004930 	andeq	r4, r0, r0, lsr r9
    4f94:	00004934 	andeq	r4, r0, r4, lsr r9
    4f98:	01f30004 	mvnseq	r0, r4
    4f9c:	00009f51 	andeq	r9, r0, r1, asr pc
    4fa0:	00000000 	andeq	r0, r0, r0
    4fa4:	492c0000 	stmdbmi	ip!, {}	; <UNPREDICTABLE>
    4fa8:	49330000 	ldmdbmi	r3!, {}	; <UNPREDICTABLE>
    4fac:	00010000 	andeq	r0, r1, r0
    4fb0:	00493352 	subeq	r3, r9, r2, asr r3
    4fb4:	00493400 	subeq	r3, r9, r0, lsl #8
    4fb8:	f3000400 	vshl.u8	d0, d0, d0
    4fbc:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    4fcc:	01000000 	mrseq	r0, (UNDEF: 0)
    4fd0:	00005000 	andeq	r5, r0, r0
    4fd4:	00000000 	andeq	r0, r0, r0
    4fd8:	00040000 	andeq	r0, r4, r0
    4fdc:	9f5001f3 	svcls	0x005001f3
	...
    4ff0:	00510001 	subseq	r0, r1, r1
    4ff4:	00000000 	andeq	r0, r0, r0
    4ff8:	04000000 	streq	r0, [r0], #-0
    4ffc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5000:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5010:	52000100 	andpl	r0, r0, #0, 2
	...
    501c:	01f30004 	mvnseq	r0, r4
    5020:	00009f52 	andeq	r9, r0, r2, asr pc
    5024:	00000000 	andeq	r0, r0, r0
    5028:	00010000 	andeq	r0, r1, r0
    502c:	00000052 	andeq	r0, r0, r2, asr r0
    5030:	00000000 	andeq	r0, r0, r0
    5034:	f3001500 	vrshl.u8	d1, d0, d0
    5038:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    503c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    5040:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5044:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    5048:	9f131600 	svcls	0x00131600
	...
    505c:	00530001 	subseq	r0, r3, r1
    5060:	00000000 	andeq	r0, r0, r0
    5064:	04000000 	streq	r0, [r0], #-0
    5068:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    506c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    507c:	70000400 	andvc	r0, r0, r0, lsl #8
    5080:	009f0480 	addseq	r0, pc, r0, lsl #9
    5084:	00000000 	andeq	r0, r0, r0
    5088:	0d000000 	stceq	0, cr0, [r0, #-0]
    508c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5090:	01f32431 	mvnseq	r2, r1, lsr r4
    5094:	80232250 	eorhi	r2, r3, r0, asr r2
    5098:	00009f04 	andeq	r9, r0, r4, lsl #30
    509c:	00000000 	andeq	r0, r0, r0
    50a0:	00010000 	andeq	r0, r1, r0
    50a4:	00000050 	andeq	r0, r0, r0, asr r0
    50a8:	00000000 	andeq	r0, r0, r0
    50ac:	f3005200 	vhsub.u8	d5, d0, d0
    50b0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    50b4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    50b8:	f3048023 	vhadd.u8	d8, d4, d19
    50bc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    50c0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    50c4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    50c8:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    50cc:	13160001 	tstne	r6, #1
    50d0:	f3048423 	vshl.u8	d8, d19, d4
    50d4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    50d8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    50dc:	f3048023 	vhadd.u8	d8, d4, d19
    50e0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    50e4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    50e8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    50ec:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    50f0:	13160001 	tstne	r6, #1
    50f4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    50f8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    50fc:	13160001 	tstne	r6, #1
    5100:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5110:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    511c:	f330002f 	vhadd.u<illegal width 64>	d0, d0, d31
    5120:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5124:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    5128:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    512c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    5130:	f3131600 	vmax.u16	d1, d3, d0
    5134:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5138:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    513c:	0001282e 	andeq	r2, r1, lr, lsr #16
    5140:	01f31316 	mvnseq	r1, r6, lsl r3
    5144:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    5148:	13160001 	tstne	r6, #1
    514c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    515c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5168:	01f30004 	mvnseq	r0, r4
    516c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    517c:	00010000 	andeq	r0, r1, r0
    5180:	00000051 	andeq	r0, r0, r1, asr r0
    5184:	00000000 	andeq	r0, r0, r0
    5188:	f3000400 	vshl.u8	d0, d0, d0
    518c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    519c:	01000000 	mrseq	r0, (UNDEF: 0)
    51a0:	00005200 	andeq	r5, r0, r0, lsl #4
    51a4:	00000000 	andeq	r0, r0, r0
    51a8:	00040000 	andeq	r0, r4, r0
    51ac:	9f5201f3 	svcls	0x005201f3
	...
    51b8:	00520001 	subseq	r0, r2, r1
    51bc:	00000000 	andeq	r0, r0, r0
    51c0:	1b000000 	blne	51c8 <port_confs+0x24>
    51c4:	5201f300 	andpl	pc, r1, #0, 6
    51c8:	01f32540 	mvnseq	r2, r0, asr #10
    51cc:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    51d0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    51d4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    51d8:	01282b80 	smlawbeq	r8, r0, fp, r2
    51dc:	9f131600 	svcls	0x00131600
	...
    51f0:	00530001 	subseq	r0, r3, r1
    51f4:	00000000 	andeq	r0, r0, r0
    51f8:	04000000 	streq	r0, [r0], #-0
    51fc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    5200:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5204:	00000000 	andeq	r0, r0, r0
    5208:	53000100 	movwpl	r0, #256	; 0x100
	...
    5214:	01f3001b 	mvnseq	r0, fp, lsl r0
    5218:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    521c:	01f35301 	mvnseq	r5, r1, lsl #6
    5220:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    5224:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5228:	282b8000 	stmdacs	fp!, {pc}
    522c:	13160001 	tstne	r6, #1
    5230:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5240:	91000200 	mrsls	r0, R8_usr
	...
    524c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    5260:	70000400 	andvc	r0, r0, r0, lsl #8
    5264:	009f0480 	addseq	r0, pc, r0, lsl #9
    5268:	00000000 	andeq	r0, r0, r0
    526c:	0d000000 	stceq	0, cr0, [r0, #-0]
    5270:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5274:	01f32431 	mvnseq	r2, r1, lsr r4
    5278:	80232250 	eorhi	r2, r3, r0, asr r2
    527c:	00009f04 	andeq	r9, r0, r4, lsl #30
    5280:	00000000 	andeq	r0, r0, r0
    5284:	00010000 	andeq	r0, r1, r0
    5288:	00000050 	andeq	r0, r0, r0, asr r0
    528c:	00000000 	andeq	r0, r0, r0
    5290:	f3006400 	vshl.u8	d6, d0, d0
    5294:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    5298:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    529c:	f3048023 	vhadd.u8	d8, d4, d19
    52a0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    52a4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    52a8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    52ac:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    52b0:	8000000f 	andhi	r0, r0, pc
    52b4:	0001282c 	andeq	r2, r1, ip, lsr #16
    52b8:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    52bc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    52c0:	01f32431 	mvnseq	r2, r1, lsr r4
    52c4:	80232250 	eorhi	r2, r3, r0, asr r2
    52c8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    52cc:	01f32431 	mvnseq	r2, r1, lsr r4
    52d0:	01f32250 	mvnseq	r2, r0, asr r2
    52d4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    52d8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    52dc:	282c8000 	stmdacs	ip!, {pc}
    52e0:	13160001 	tstne	r6, #1
    52e4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    52e8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    52ec:	8000000f 	andhi	r0, r0, pc
    52f0:	0001282b 	andeq	r2, r1, fp, lsr #16
    52f4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5304:	0a000000 	beq	530c <__button_list+0x4a>
    5308:	0a007400 	beq	22310 <__ccfg+0x2368>
    530c:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    5310:	009f2400 	addseq	r2, pc, r0, lsl #8
    5314:	00000000 	andeq	r0, r0, r0
    5318:	0c000000 	stceq	0, cr0, [r0], {-0}
    531c:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    5320:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    5324:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    5328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    532c:	00000000 	andeq	r0, r0, r0
    5330:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    5334:	0a029400 	beq	aa33c <__ccfg+0x8a394>
    5338:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    533c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    5340:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    5344:	4b405301 	blmi	1019f50 <__ccfg+0xff9fa8>
    5348:	0f0c2224 	svceq	0x000c2224
    534c:	2b800000 	blcs	fe005354 <_estack+0xde000354>
    5350:	16000128 	strne	r0, [r0], -r8, lsr #2
    5354:	009f2413 	addseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
	...
    5364:	01000000 	mrseq	r0, (UNDEF: 0)
    5368:	00005000 	andeq	r5, r0, r0
    536c:	00000000 	andeq	r0, r0, r0
    5370:	00040000 	andeq	r0, r4, r0
    5374:	9f5001f3 	svcls	0x005001f3
	...
    5388:	00510001 	subseq	r0, r1, r1
    538c:	00000000 	andeq	r0, r0, r0
    5390:	04000000 	streq	r0, [r0], #-0
    5394:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5398:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    53a8:	52000100 	andpl	r0, r0, #0, 2
	...
    53b4:	00540001 	subseq	r0, r4, r1
    53b8:	00000000 	andeq	r0, r0, r0
    53bc:	15000000 	strne	r0, [r0, #-0]
    53c0:	5201f300 	andpl	pc, r1, #0, 6
    53c4:	01f32540 	mvnseq	r2, r0, asr #10
    53c8:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    53cc:	2e302540 	cfneg32cs	mvfx2, mvfx0
    53d0:	16000128 	strne	r0, [r0], -r8, lsr #2
    53d4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    53e4:	00010000 	andeq	r0, r1, r0
    53e8:	00000055 	andeq	r0, r0, r5, asr r0
    53ec:	00000000 	andeq	r0, r0, r0
    53f0:	f3001d00 	vpadd.f32	d1, d0, d0
    53f4:	01f35001 	mvnseq	r5, r1
    53f8:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    53fc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5400:	f3225101 	vrhadd.u32	d5, d2, d1
    5404:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5408:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    540c:	9f131600 	svcls	0x00131600
	...
    5420:	00750006 	rsbseq	r0, r5, r6
    5424:	9f1a0074 	svcls	0x001a0074
	...
    5438:	00550001 	subseq	r0, r5, r1
    543c:	00000000 	andeq	r0, r0, r0
    5440:	1d000000 	stcne	0, cr0, [r0, #-0]
    5444:	5001f300 	andpl	pc, r1, r0, lsl #6
    5448:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    544c:	01f30223 	mvnseq	r0, r3, lsr #4
    5450:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5454:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    5458:	2e302540 	cfneg32cs	mvfx2, mvfx0
    545c:	16000128 	strne	r0, [r0], -r8, lsr #2
    5460:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5470:	00070000 	andeq	r0, r7, r0
    5474:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    5478:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    5488:	05000000 	streq	r0, [r0, #-0]
    548c:	30007000 	andcc	r7, r0, r0
    5490:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    54a0:	00010000 	andeq	r0, r1, r0
    54a4:	00000050 	andeq	r0, r0, r0, asr r0
    54a8:	00000000 	andeq	r0, r0, r0
    54ac:	f3000400 	vshl.u8	d0, d0, d0
    54b0:	009f5001 	addseq	r5, pc, r1
	...
    54c0:	01000000 	mrseq	r0, (UNDEF: 0)
    54c4:	00005100 	andeq	r5, r0, r0, lsl #2
    54c8:	00000000 	andeq	r0, r0, r0
    54cc:	00040000 	andeq	r0, r4, r0
    54d0:	9f5101f3 	svcls	0x005101f3
	...
    54e4:	00520001 	subseq	r0, r2, r1
    54e8:	00000000 	andeq	r0, r0, r0
    54ec:	01000000 	mrseq	r0, (UNDEF: 0)
    54f0:	00005400 	andeq	r5, r0, r0, lsl #8
    54f4:	00000000 	andeq	r0, r0, r0
    54f8:	001b0000 	andseq	r0, fp, r0
    54fc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    5500:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    5504:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5508:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    550c:	8000000f 	andhi	r0, r0, pc
    5510:	0001282b 	andeq	r2, r1, fp, lsr #16
    5514:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5524:	01000000 	mrseq	r0, (UNDEF: 0)
    5528:	00005300 	andeq	r5, r0, r0, lsl #6
    552c:	00000000 	andeq	r0, r0, r0
    5530:	00010000 	andeq	r0, r1, r0
    5534:	00000055 	andeq	r0, r0, r5, asr r0
    5538:	00000000 	andeq	r0, r0, r0
    553c:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    5540:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    5544:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    5548:	4b405301 	blmi	101a154 <__ccfg+0xffa1ac>
    554c:	0f0c2224 	svceq	0x000c2224
    5550:	2b800000 	blcs	fe005558 <_estack+0xde000558>
    5554:	16000128 	strne	r0, [r0], -r8, lsr #2
    5558:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5568:	00010000 	andeq	r0, r1, r0
    556c:	00000056 	andeq	r0, r0, r6, asr r0
    5570:	00000000 	andeq	r0, r0, r0
    5574:	70000600 	andvc	r0, r0, r0, lsl #12
    5578:	22007100 	andcs	r7, r0, #0, 2
    557c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5580:	00000000 	andeq	r0, r0, r0
    5584:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5590:	01f30023 	mvnseq	r0, r3, lsr #32
    5594:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5598:	f3022322 	vcgt.u8	d2, d2, d18
    559c:	01f35001 	mvnseq	r5, r1
    55a0:	01f32251 	mvnseq	r2, r1, asr r2
    55a4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    55a8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    55ac:	282b8000 	stmdacs	fp!, {pc}
    55b0:	13160001 	tstne	r6, #1
    55b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    55c4:	76000600 	strvc	r0, [r0], -r0, lsl #12
    55c8:	1a007400 	bne	225d0 <__ccfg+0x2628>
    55cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    55d0:	00000000 	andeq	r0, r0, r0
    55d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    55e8:	00560001 	subseq	r0, r6, r1
    55ec:	00000000 	andeq	r0, r0, r0
    55f0:	23000000 	movwcs	r0, #0
    55f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    55f8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    55fc:	01f30223 	mvnseq	r0, r3, lsr #4
    5600:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5604:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5608:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    560c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5610:	01282b80 	smlawbeq	r8, r0, fp, r2
    5614:	9f131600 	svcls	0x00131600
	...
    5628:	00760007 	rsbseq	r0, r6, r7
    562c:	1affff0a 	bne	525c <__pi_hex_enc_table+0x4b>
    5630:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5640:	70000500 	andvc	r0, r0, r0, lsl #10
    5644:	9f293000 	svcls	0x00293000
	...
    5660:	00000052 	andeq	r0, r0, r2, asr r0
    5664:	52510001 	subspl	r0, r1, #1
    5668:	96000000 	strls	r0, [r0], -r0
    566c:	04000000 	streq	r0, [r0], #-0
    5670:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5674:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5678:	00009800 	andeq	r9, r0, r0, lsl #16
    567c:	51000100 	mrspl	r0, (UNDEF: 16)
    5680:	00000098 	muleq	r0, r8, r0
    5684:	000000a0 	andeq	r0, r0, r0, lsr #1
    5688:	01f30004 	mvnseq	r0, r4
    568c:	00a09f51 	adceq	r9, r0, r1, asr pc
    5690:	00a60000 	adceq	r0, r6, r0
    5694:	00010000 	andeq	r0, r1, r0
    5698:	0000a651 	andeq	sl, r0, r1, asr r6
    569c:	0000aa00 	andeq	sl, r0, r0, lsl #20
    56a0:	f3000400 	vshl.u8	d0, d0, d0
    56a4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    56b0:	02020000 	andeq	r0, r2, #0
    56b4:	00000000 	andeq	r0, r0, r0
    56b8:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    56d8:	2a000000 	bcs	56e0 <patchGenfskRfe+0x3a4>
    56dc:	01000000 	mrseq	r0, (UNDEF: 0)
    56e0:	002a5200 	eoreq	r5, sl, r0, lsl #4
    56e4:	00400000 	subeq	r0, r0, r0
    56e8:	00090000 	andeq	r0, r9, r0
    56ec:	00720071 	rsbseq	r0, r2, r1, ror r0
    56f0:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    56f4:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    56f8:	00004200 	andeq	r4, r0, r0, lsl #4
    56fc:	71000b00 	tstvc	r0, r0, lsl #22
    5700:	22007200 	andcs	r7, r0, #0, 4
    5704:	401c0074 	andsmi	r0, ip, r4, ror r0
    5708:	00429f1c 	subeq	r9, r2, ip, lsl pc
    570c:	004c0000 	subeq	r0, ip, r0
    5710:	00090000 	andeq	r0, r9, r0
    5714:	00720071 	rsbseq	r0, r2, r1, ror r0
    5718:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    571c:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5720:	00005a00 	andeq	r5, r0, r0, lsl #20
    5724:	53000100 	movwpl	r0, #256	; 0x100
    5728:	0000005a 	andeq	r0, r0, sl, asr r0
    572c:	0000005e 	andeq	r0, r0, lr, asr r0
    5730:	00730006 	rsbseq	r0, r3, r6
    5734:	9f1c0076 	svcls	0x001c0076
    5738:	0000005e 	andeq	r0, r0, lr, asr r0
    573c:	00000060 	andeq	r0, r0, r0, rrx
    5740:	00730008 	rsbseq	r0, r3, r8
    5744:	341c0076 	ldrcc	r0, [ip], #-118	; 0xffffff8a
    5748:	00609f1c 	rsbeq	r9, r0, ip, lsl pc
    574c:	006a0000 	rsbeq	r0, sl, r0
    5750:	00060000 	andeq	r0, r6, r0
    5754:	00760073 	rsbseq	r0, r6, r3, ror r0
    5758:	006a9f1c 	rsbeq	r9, sl, ip, lsl pc
    575c:	00720000 	rsbseq	r0, r2, r0
    5760:	00080000 	andeq	r0, r8, r0
    5764:	1a3f0072 	bne	fc5934 <__ccfg+0xfa598c>
    5768:	9f1c0076 	svcls	0x001c0076
    576c:	00000072 	andeq	r0, r0, r2, ror r0
    5770:	00000076 	andeq	r0, r0, r6, ror r0
    5774:	01f30009 	mvnseq	r0, r9
    5778:	761a3f52 	ssaxvc	r3, sl, r2
    577c:	769f1c00 	ldrvc	r1, [pc], r0, lsl #24
    5780:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5784:	01000000 	mrseq	r0, (UNDEF: 0)
    5788:	00785200 	rsbseq	r5, r8, r0, lsl #4
    578c:	00800000 	addeq	r0, r0, r0
    5790:	00010000 	andeq	r0, r1, r0
    5794:	00008056 	andeq	r8, r0, r6, asr r0
    5798:	00008200 	andeq	r8, r0, r0, lsl #4
    579c:	73000700 	movwvc	r0, #1792	; 0x700
    57a0:	00762000 	rsbseq	r2, r6, r0
    57a4:	00829f22 	addeq	r9, r2, r2, lsr #30
    57a8:	00880000 	addeq	r0, r8, r0
    57ac:	00060000 	andeq	r0, r6, r0
    57b0:	00730076 	rsbseq	r0, r3, r6, ror r0
    57b4:	00889f1c 	addeq	r9, r8, ip, lsl pc
    57b8:	008c0000 	addeq	r0, ip, r0
    57bc:	00070000 	andeq	r0, r7, r0
    57c0:	76200073 			; <UNDEFINED> instruction: 0x76200073
    57c4:	969f2200 	ldrls	r2, [pc], r0, lsl #4
    57c8:	9a000000 	bls	57d0 <patchGenfskRfe+0x494>
    57cc:	01000000 	mrseq	r0, (UNDEF: 0)
    57d0:	009a5200 	addseq	r5, sl, r0, lsl #4
    57d4:	00a00000 	adceq	r0, r0, r0
    57d8:	00010000 	andeq	r0, r1, r0
    57dc:	0000a056 	andeq	sl, r0, r6, asr r0
    57e0:	0000a200 	andeq	sl, r0, r0, lsl #4
    57e4:	52000100 	andpl	r0, r0, #0, 2
    57e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    57ec:	000000a6 	andeq	r0, r0, r6, lsr #1
    57f0:	a6560001 	ldrbge	r0, [r6], -r1
    57f4:	aa000000 	bge	57fc <patchGenfskRfe+0x4c0>
    57f8:	01000000 	mrseq	r0, (UNDEF: 0)
    57fc:	00005300 	andeq	r5, r0, r0, lsl #6
    5800:	00000000 	andeq	r0, r0, r0
    5804:	00020000 	andeq	r0, r2, r0
    5808:	00000000 	andeq	r0, r0, r0
    580c:	00010100 	andeq	r0, r1, r0, lsl #2
	...
    5818:	00760000 	rsbseq	r0, r6, r0
    581c:	00010000 	andeq	r0, r1, r0
    5820:	00007650 	andeq	r7, r0, r0, asr r6
    5824:	00008000 	andeq	r8, r0, r0
    5828:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    582c:	00000080 	andeq	r0, r0, r0, lsl #1
    5830:	00000082 	andeq	r0, r0, r2, lsl #1
    5834:	00750008 	rsbseq	r0, r5, r8
    5838:	23220073 			; <UNDEFINED> instruction: 0x23220073
    583c:	00829f01 	addeq	r9, r2, r1, lsl #30
    5840:	00820000 	addeq	r0, r2, r0
    5844:	00060000 	andeq	r0, r6, r0
    5848:	00730075 	rsbseq	r0, r3, r5, ror r0
    584c:	00829f22 	addeq	r9, r2, r2, lsr #30
    5850:	008c0000 	addeq	r0, ip, r0
    5854:	00080000 	andeq	r0, r8, r0
    5858:	00730075 	rsbseq	r0, r3, r5, ror r0
    585c:	9f012322 	svcls	0x00012322
    5860:	00000096 	muleq	r0, r6, r0
    5864:	00000098 	muleq	r0, r8, r0
    5868:	98500001 	ldmdals	r0, {r0}^
    586c:	a0000000 	andge	r0, r0, r0
    5870:	01000000 	mrseq	r0, (UNDEF: 0)
    5874:	00a05500 	adceq	r5, r0, r0, lsl #10
    5878:	00aa0000 	adceq	r0, sl, r0
    587c:	00010000 	andeq	r0, r1, r0
    5880:	00000050 	andeq	r0, r0, r0, asr r0
    5884:	00000000 	andeq	r0, r0, r0
    5888:	00000300 	andeq	r0, r0, r0, lsl #6
    588c:	00000000 	andeq	r0, r0, r0
    5890:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    589c:	00005200 	andeq	r5, r0, r0, lsl #4
    58a0:	51000100 	mrspl	r0, (UNDEF: 16)
    58a4:	00000052 	andeq	r0, r0, r2, asr r0
    58a8:	00000076 	andeq	r0, r0, r6, ror r0
    58ac:	01f30004 	mvnseq	r0, r4
    58b0:	00769f51 	rsbseq	r9, r6, r1, asr pc
    58b4:	00800000 	addeq	r0, r0, r0
    58b8:	00010000 	andeq	r0, r1, r0
    58bc:	00008051 	andeq	r8, r0, r1, asr r0
    58c0:	00008200 	andeq	r8, r0, r0, lsl #4
    58c4:	71000800 	tstvc	r0, r0, lsl #16
    58c8:	22007300 	andcs	r7, r0, #0, 6
    58cc:	829f0123 	addshi	r0, pc, #-1073741816	; 0xc0000008
    58d0:	82000000 	andhi	r0, r0, #0
    58d4:	06000000 	streq	r0, [r0], -r0
    58d8:	73007100 	movwvc	r7, #256	; 0x100
    58dc:	829f2200 	addshi	r2, pc, #0, 4
    58e0:	8c000000 	stchi	0, cr0, [r0], {-0}
    58e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    58e8:	73007100 	movwvc	r7, #256	; 0x100
    58ec:	01232200 			; <UNDEFINED> instruction: 0x01232200
    58f0:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    58f4:	0000a600 	andeq	sl, r0, r0, lsl #12
    58f8:	51000100 	mrspl	r0, (UNDEF: 16)
    58fc:	000000a6 	andeq	r0, r0, r6, lsr #1
    5900:	000000aa 	andeq	r0, r0, sl, lsr #1
    5904:	01f30004 	mvnseq	r0, r4
    5908:	00009f51 	andeq	r9, r0, r1, asr pc
    590c:	00000000 	andeq	r0, r0, r0
    5910:	01000000 	mrseq	r0, (UNDEF: 0)
    5914:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
    5918:	00010102 	andeq	r0, r1, r2, lsl #2
    591c:	00000000 	andeq	r0, r0, r0
    5920:	00010100 	andeq	r0, r1, r0, lsl #2
    5924:	00000000 	andeq	r0, r0, r0
    5928:	002a0000 	eoreq	r0, sl, r0
    592c:	002c0000 	eoreq	r0, ip, r0
    5930:	00090000 	andeq	r0, r9, r0
    5934:	00710070 	rsbseq	r0, r1, r0, ror r0
    5938:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    593c:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    5940:	00003a00 	andeq	r3, r0, r0, lsl #20
    5944:	70000b00 	andvc	r0, r0, r0, lsl #22
    5948:	1c007100 	stfnes	f7, [r0], {-0}
    594c:	23220074 			; <UNDEFINED> instruction: 0x23220074
    5950:	003a9f04 	eorseq	r9, sl, r4, lsl #30
    5954:	003a0000 	eorseq	r0, sl, r0
    5958:	000b0000 	andeq	r0, fp, r0
    595c:	00710070 	rsbseq	r0, r1, r0, ror r0
    5960:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5964:	3a9f0823 	bcc	fe7c79f8 <_estack+0xde7c29f8>
    5968:	40000000 	andmi	r0, r0, r0
    596c:	0b000000 	bleq	5974 <patchGenfskRfe+0x638>
    5970:	71007000 	mrsvc	r7, (UNDEF: 0)
    5974:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5978:	9f0c2322 	svcls	0x000c2322
    597c:	00000040 	andeq	r0, r0, r0, asr #32
    5980:	00000042 	andeq	r0, r0, r2, asr #32
    5984:	0070000b 	rsbseq	r0, r0, fp
    5988:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    598c:	10232200 	eorne	r2, r3, r0, lsl #4
    5990:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5994:	00004c00 	andeq	r4, r0, r0, lsl #24
    5998:	70000900 	andvc	r0, r0, r0, lsl #18
    599c:	1c007100 	stfnes	f7, [r0], {-0}
    59a0:	9f220074 	svcls	0x00220074
    59a4:	00000056 	andeq	r0, r0, r6, asr r0
    59a8:	0000005a 	andeq	r0, r0, sl, asr r0
    59ac:	5a550001 	bpl	15459b8 <__ccfg+0x1525a10>
    59b0:	5a000000 	bpl	59b8 <patchGenfskRfe+0x67c>
    59b4:	06000000 	streq	r0, [r0], -r0
    59b8:	76007500 	strvc	r7, [r0], -r0, lsl #10
    59bc:	5a9f2200 	bpl	fe7ce1c4 <_estack+0xde7c91c4>
    59c0:	60000000 	andvs	r0, r0, r0
    59c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    59c8:	76007500 	strvc	r7, [r0], -r0, lsl #10
    59cc:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    59d0:	0000609f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    59d4:	00007400 	andeq	r7, r0, r0, lsl #8
    59d8:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    59dc:	22007600 	andcs	r7, r0, #0, 12
    59e0:	0000749f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    59e4:	00007800 	andeq	r7, r0, r0, lsl #16
    59e8:	7c000b00 			; <UNDEFINED> instruction: 0x7c000b00
    59ec:	70243401 	eorvc	r3, r4, r1, lsl #8
    59f0:	00762200 	rsbseq	r2, r6, r0, lsl #4
    59f4:	00a69f22 	adceq	r9, r6, r2, lsr #30
    59f8:	00aa0000 	adceq	r0, sl, r0
    59fc:	00010000 	andeq	r0, r1, r0
    5a00:	00000055 	andeq	r0, r0, r5, asr r0
    5a04:	00000000 	andeq	r0, r0, r0
    5a08:	01010000 	mrseq	r0, (UNDEF: 1)
    5a0c:	02020101 	andeq	r0, r2, #1073741824	; 0x40000000
    5a10:	00000101 	andeq	r0, r0, r1, lsl #2
    5a14:	00000000 	andeq	r0, r0, r0
    5a18:	00000101 	andeq	r0, r0, r1, lsl #2
    5a1c:	00000000 	andeq	r0, r0, r0
    5a20:	00002a00 	andeq	r2, r0, r0, lsl #20
    5a24:	00002c00 	andeq	r2, r0, r0, lsl #24
    5a28:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    5a2c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5a30:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a34:	04740003 	ldrbteq	r0, [r4], #-3
    5a38:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5a3c:	00003a00 	andeq	r3, r0, r0, lsl #20
    5a40:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    5a44:	003a9f08 	eorseq	r9, sl, r8, lsl #30
    5a48:	00400000 	subeq	r0, r0, r0
    5a4c:	00030000 	andeq	r0, r3, r0
    5a50:	409f0c74 	addsmi	r0, pc, r4, ror ip	; <UNPREDICTABLE>
    5a54:	42000000 	andmi	r0, r0, #0
    5a58:	03000000 	movweq	r0, #0
    5a5c:	9f107400 	svcls	0x00107400
    5a60:	00000042 	andeq	r0, r0, r2, asr #32
    5a64:	0000004c 	andeq	r0, r0, ip, asr #32
    5a68:	54540001 	ldrbpl	r0, [r4], #-1
    5a6c:	5a000000 	bpl	5a74 <patchImageGenfsk+0x84>
    5a70:	01000000 	mrseq	r0, (UNDEF: 0)
    5a74:	005a5100 	subseq	r5, sl, r0, lsl #2
    5a78:	005a0000 	subseq	r0, sl, r0
    5a7c:	00060000 	andeq	r0, r6, r0
    5a80:	00760071 	rsbseq	r0, r6, r1, ror r0
    5a84:	005a9f22 	subseq	r9, sl, r2, lsr #30
    5a88:	00600000 	rsbeq	r0, r0, r0
    5a8c:	00080000 	andeq	r0, r8, r0
    5a90:	00760071 	rsbseq	r0, r6, r1, ror r0
    5a94:	9f042322 	svcls	0x00042322
    5a98:	00000060 	andeq	r0, r0, r0, rrx
    5a9c:	00000076 	andeq	r0, r0, r6, ror r0
    5aa0:	00710006 	rsbseq	r0, r1, r6
    5aa4:	9f220076 	svcls	0x00220076
    5aa8:	00000076 	andeq	r0, r0, r6, ror r0
    5aac:	00000078 	andeq	r0, r0, r8, ror r0
    5ab0:	017c000c 	cmneq	ip, ip
    5ab4:	01f32434 	mvnseq	r2, r4, lsr r4
    5ab8:	00762251 	rsbseq	r2, r6, r1, asr r2
    5abc:	00a69f22 	adceq	r9, r6, r2, lsr #30
    5ac0:	00aa0000 	adceq	r0, sl, r0
    5ac4:	00010000 	andeq	r0, r1, r0
    5ac8:	00000051 	andeq	r0, r0, r1, asr r0
	...
    5ad4:	1a010000 	bne	45adc <__ccfg+0x25b34>
    5ad8:	1c000000 	stcne	0, cr0, [r0], {-0}
    5adc:	01000000 	mrseq	r0, (UNDEF: 0)
    5ae0:	001c5400 	andseq	r5, ip, r0, lsl #8
    5ae4:	00240000 	eoreq	r0, r4, r0
    5ae8:	00020000 	andeq	r0, r2, r0
    5aec:	00270073 	eoreq	r0, r7, r3, ror r0
    5af0:	00380000 	eorseq	r0, r8, r0
    5af4:	00040000 	andeq	r0, r4, r0
    5af8:	9f7ed874 	svcls	0x007ed874
	...
    5b08:	00000004 	andeq	r0, r0, r4
    5b0c:	00000006 	andeq	r0, r0, r6
    5b10:	00730002 	rsbseq	r0, r3, r2
    5b14:	00000006 	andeq	r0, r0, r6
    5b18:	00000008 	andeq	r0, r0, r8
    5b1c:	00530001 	subseq	r0, r3, r1
	...
    5b2c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5b30:	06000000 	streq	r0, [r0], -r0
    5b34:	04935000 	ldreq	r5, [r3], #0
    5b38:	0e049351 	mcreq	3, 0, r9, cr4, cr1, {2}
    5b3c:	54000000 	strpl	r0, [r0], #-0
    5b40:	06000000 	streq	r0, [r0], -r0
    5b44:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    5b48:	009f2500 	addseq	r2, pc, r0, lsl #10
	...
    5b58:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5b5c:	06000000 	streq	r0, [r0], -r0
    5b60:	04935200 	ldreq	r5, [r3], #512	; 0x200
    5b64:	3e049353 	mcrcc	3, 0, r9, cr4, cr3, {2}
    5b68:	54000000 	strpl	r0, [r0], #-0
    5b6c:	06000000 	streq	r0, [r0], -r0
    5b70:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    5b74:	009f2502 	addseq	r2, pc, r2, lsl #10
	...
    5b80:	00001a02 	andeq	r1, r0, r2, lsl #20
    5b84:	00004a00 	andeq	r4, r0, r0, lsl #20
    5b88:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5b94:	00000001 	andeq	r0, r0, r1
    5b98:	001a0000 	andseq	r0, sl, r0
    5b9c:	001e0000 	andseq	r0, lr, r0
    5ba0:	00060000 	andeq	r0, r6, r0
    5ba4:	00740070 	rsbseq	r0, r4, r0, ror r0
    5ba8:	001e9f1e 	andseq	r9, lr, lr, lsl pc
    5bac:	00220000 	eoreq	r0, r2, r0
    5bb0:	00010000 	andeq	r0, r1, r0
    5bb4:	00002650 	andeq	r2, r0, r0, asr r6
    5bb8:	00004400 	andeq	r4, r0, r0, lsl #8
    5bbc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    5bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
    5bd0:	00000036 	andeq	r0, r0, r6, lsr r0
    5bd4:	36550001 	ldrbcc	r0, [r5], -r1
    5bd8:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5bdc:	0c000000 	stceq	0, cr0, [r0], {-0}
    5be0:	40007200 	andmi	r7, r0, r0, lsl #4
    5be4:	7c254024 	stcvc	0, cr4, [r5], #-144	; 0xffffff70
    5be8:	1e254000 	cdpne	0, 2, cr4, cr5, cr0, {0}
    5bec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5bf0:	00000000 	andeq	r0, r0, r0
    5bf4:	20000000 	andcs	r0, r0, r0
    5bf8:	3c000000 	stccc	0, cr0, [r0], {-0}
    5bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    5c00:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    5c0c:	00120000 	andseq	r0, r2, r0
    5c10:	001e0000 	andseq	r0, lr, r0
    5c14:	00010000 	andeq	r0, r1, r0
    5c18:	00001e50 	andeq	r1, r0, r0, asr lr
    5c1c:	00005400 	andeq	r5, r0, r0, lsl #8
    5c20:	7c000700 	stcvc	7, cr0, [r0], {-0}
    5c24:	40244000 	eormi	r4, r4, r0
    5c28:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5c34:	00160000 	andseq	r0, r6, r0
    5c38:	001c0000 	andseq	r0, ip, r0
    5c3c:	00010000 	andeq	r0, r1, r0
    5c40:	00001c55 	andeq	r1, r0, r5, asr ip
    5c44:	00003e00 	andeq	r3, r0, r0, lsl #28
    5c48:	72000700 	andvc	r0, r0, #0, 14
    5c4c:	40244000 	eormi	r4, r4, r0
    5c50:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5c5c:	00140000 	andseq	r0, r4, r0
    5c60:	00200000 	eoreq	r0, r0, r0
    5c64:	00010000 	andeq	r0, r1, r0
    5c68:	00002051 	andeq	r2, r0, r1, asr r0
    5c6c:	00005400 	andeq	r5, r0, r0, lsl #8
    5c70:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
    5c74:	9f254000 	svcls	0x00254000
	...
    5c80:	00000001 	andeq	r0, r0, r1
    5c84:	00000016 	andeq	r0, r0, r6, lsl r0
    5c88:	00000024 	andeq	r0, r0, r4, lsr #32
    5c8c:	24540001 	ldrbcs	r0, [r4], #-1
    5c90:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5c94:	05000000 	streq	r0, [r0, #-0]
    5c98:	40007200 	andmi	r7, r0, r0, lsl #4
    5c9c:	00009f25 	andeq	r9, r0, r5, lsr #30
    5ca0:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000008c 	andeq	r0, r0, ip, lsl #1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000bc 	strheq	r0, [r0], -ip
  18:	00000000 	andeq	r0, r0, r0
};
  1c:	00000006 	andeq	r0, r0, r6
  20:	00000000 	andeq	r0, r0, r0
  24:	00000006 	andeq	r0, r0, r6
  28:	00000000 	andeq	r0, r0, r0
  2c:	00000008 	andeq	r0, r0, r8
  30:	00000184 	andeq	r0, r0, r4, lsl #3
  34:	00000014 	andeq	r0, r0, r4, lsl r0
  38:	00000198 	muleq	r0, r8, r1
  3c:	00000024 	andeq	r0, r0, r4, lsr #32
			i = k;
  40:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
				j->Next = k;
  44:	00000012 	andeq	r0, r0, r2, lsl r0
  48:	00000000 	andeq	r0, r0, r0
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	000001ce 	andeq	r0, r0, lr, asr #3
  54:	00000016 	andeq	r0, r0, r6, lsl r0
		release;
  58:	000001e4 	andeq	r0, r0, r4, ror #3
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
			nq++;
  60:	00000000 	andeq	r0, r0, r0
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	0000001e 	andeq	r0, r0, lr, lsl r0
  68:	00000200 	andeq	r0, r0, r0, lsl #4
  6c:	00000026 	andeq	r0, r0, r6, lsr #32
  70:	00000226 	andeq	r0, r0, r6, lsr #4
  74:	00000052 	andeq	r0, r0, r2, asr r0
  78:	00000278 	andeq	r0, r0, r8, ror r2
  7c:	00000408 	andeq	r0, r0, r8, lsl #8
  80:	00000680 	andeq	r0, r0, r0, lsl #13
  84:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
	...
	if (!button_still_pressed (__button_list [pbutton]))
  90:	000000e4 	andeq	r0, r0, r4, ror #1
  94:	1c3d0002 	ldcne	0, cr0, [sp], #-8
  98:	00040000 	andeq	r0, r4, r0
	if (baction == NULL)
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00000c34 	andeq	r0, r0, r4, lsr ip
	(*baction) (pbutton);
  a4:	0000000c 	andeq	r0, r0, ip
endthread
  a8:	00000c40 	andeq	r0, r0, r0, asr #24
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	00000c6c 	andeq	r0, r0, ip, ror #24
endthread
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	00000c98 	muleq	r0, r8, ip
  bc:	0000003c 	andeq	r0, r0, ip, lsr r0
  c0:	00000cd4 	ldrdeq	r0, [r0], -r4
  c4:	00000040 	andeq	r0, r0, r0, asr #32
fsm sender(struct ResponseMessage *message) {
  c8:	00000000 	andeq	r0, r0, r0
  cc:	00000020 	andeq	r0, r0, r0, lsr #32
  d0:	00000d14 	andeq	r0, r0, r4, lsl sp
}
  d4:	00000054 	andeq	r0, r0, r4, asr r0
  d8:	00000d68 	andeq	r0, r0, r8, ror #26
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	00000da8 	andeq	r0, r0, r8, lsr #27
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  ec:	00000114 	andeq	r0, r0, r4, lsl r1
		packet[1] = message->gid;
  f0:	00000ee4 	andeq	r0, r0, r4, ror #29
  f4:	00000050 	andeq	r0, r0, r0, asr r0
		DEBUG_PRINT("SENDING PROCEDURE");
  f8:	00000f34 	andeq	r0, r0, r4, lsr pc
  fc:	00000054 	andeq	r0, r0, r4, asr r0
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
 100:	00000f88 	andeq	r0, r0, r8, lsl #31
 104:	00000038 	andeq	r0, r0, r8, lsr r0
		*p = message->tpe;p++;
 108:	00000fc0 	andeq	r0, r0, r0, asr #31
		*p = message->request_number;p++;
 10c:	00000110 	andeq	r0, r0, r0, lsl r1
		*p = message->sender_id;p++;
 110:	00000000 	andeq	r0, r0, r0
		*p = message->receiver_id;p++;
 114:	0000000c 	andeq	r0, r0, ip
		switch(message->tpe) {
 118:	000010d0 	ldrdeq	r1, [r0], -r0
 11c:	000000c0 	andeq	r0, r0, r0, asr #1
 120:	00001190 	muleq	r0, r0, r1
		tcv_endp(packet);
 124:	00000044 	andeq	r0, r0, r4, asr #32
		ser_out(CONFIRM_message, "Message sent\r\n");
 128:	000011d4 	ldrdeq	r1, [r0], -r4
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
}
 130:	00001210 	andeq	r1, r0, r0, lsl r2
		finish;
 134:	000000a4 	andeq	r0, r0, r4, lsr #1
 138:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
 13c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
				strncpy(p, message->record, sizeof(message->record));
 140:	0000146c 	andeq	r1, r0, ip, ror #8
				*p = message->padding;p++;
 144:	00000024 	andeq	r0, r0, r4, lsr #32
				strncpy(p, message->record, sizeof(message->record));
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000028 	andeq	r0, r0, r8, lsr #32
 150:	00001490 	muleq	r0, r0, r4
				strncpy(p, message->record, sizeof(message->record));
 154:	00000258 	andeq	r0, r0, r8, asr r2
 158:	000016e8 	andeq	r1, r0, r8, ror #13
				strncpy(p, message->record, sizeof(message->record));
 15c:	00000030 	andeq	r0, r0, r0, lsr r0
				break;
 160:	00000000 	andeq	r0, r0, r0
				*p = message->record_index;p++;
 164:	0000005c 	andeq	r0, r0, ip, asr r0
				*p = message->padding;
 168:	00001718 	andeq	r1, r0, r8, lsl r7
				break;
 16c:	00000060 	andeq	r0, r0, r0, rrx
	...
 178:	00000154 	andeq	r0, r0, r4, asr r1
 17c:	30cd0002 	sbccc	r0, sp, r2
 180:	00040000 	andeq	r0, r4, r0
		node->nnodes[i] = 0;
 184:	00000000 	andeq	r0, r0, r0
 188:	00001778 	andeq	r1, r0, r8, ror r7
 18c:	0000003c 	andeq	r0, r0, ip, lsr r0
 190:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 194:	00000080 	andeq	r0, r0, r0, lsl #1
bool init_node(struct Node* node){
 198:	00001834 	andeq	r1, r0, r4, lsr r8
    node->id  = 0;                  // default id value 0
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
    node->index = 0;                // default entry count 0
 1a0:	00000000 	andeq	r0, r0, r0
    node->data_base.item_count = 0; // default no items in array
 1a4:	00000024 	andeq	r0, r0, r4, lsr #32
	reset_array(node);
 1a8:	0000184c 	andeq	r1, r0, ip, asr #16
    DEBUG_PRINT("Error initializing node...\n");
 1ac:	00000010 	andeq	r0, r0, r0, lsl r0
 1b0:	0000185c 	andeq	r1, r0, ip, asr r8
};
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b8:	00000000 	andeq	r0, r0, r0
uint8_t generate_request_num(void){
 1bc:	0000004c 	andeq	r0, r0, ip, asr #32
    return (uint8_t) (rand() % 255);
 1c0:	00001888 	andeq	r1, r0, r8, lsl #17
 1c4:	00000006 	andeq	r0, r0, r6
 1c8:	00001890 	muleq	r0, r0, r8
}
 1cc:	000000cc 	andeq	r0, r0, ip, asr #1
            node->nnodes[i] = 0; // set to null byte
 1d0:	0000195c 	andeq	r1, r0, ip, asr r9
 1d4:	00000014 	andeq	r0, r0, r4, lsl r0
 1d8:	00001970 	andeq	r1, r0, r0, ror r9
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
 1dc:	00000034 	andeq	r0, r0, r4, lsr r0
};
 1e0:	000019a4 	andeq	r1, r0, r4, lsr #19
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
 1e8:	00000000 	andeq	r0, r0, r0
        node->data_base.item_array[index].data_entry[0] = '\0';
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	000019d8 	ldrdeq	r1, [r0], -r8
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
        node->data_base.item_count -= 1;
 1f8:	000019fc 	strdeq	r1, [r0], -ip
};
 1fc:	00000038 	andeq	r0, r0, r8, lsr r0
bool delete_all(struct Node *node){
 200:	00000000 	andeq	r0, r0, r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
 204:	00000014 	andeq	r0, r0, r4, lsl r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 208:	00000000 	andeq	r0, r0, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
 20c:	00000040 	andeq	r0, r0, r0, asr #32
        for(int i = 0; i <= node->data_base.item_count; i++){
 210:	00000000 	andeq	r0, r0, r0
            node->data_base.item_array[i].timestamp = 0;
 214:	00000018 	andeq	r0, r0, r8, lsl r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 218:	00001a34 	andeq	r1, r0, r4, lsr sl
    node->data_base.item_count = 0;
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
}
 220:	00000000 	andeq	r0, r0, r0
        return true;
 224:	00000020 	andeq	r0, r0, r0, lsr #32
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
 228:	00001a58 	andeq	r1, r0, r8, asr sl
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 22c:	0000000e 	andeq	r0, r0, lr
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
 230:	00001a66 	andeq	r1, r0, r6, ror #20
 234:	00000010 	andeq	r0, r0, r0, lsl r0
 238:	00001a76 	andeq	r1, r0, r6, ror sl
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
	response_message->tpe = RESPONSE;
 240:	00000000 	andeq	r0, r0, r0
	response_message->status = status;
 244:	00000010 	andeq	r0, r0, r0, lsl r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 248:	00000000 	andeq	r0, r0, r0
	response_message->gid = gid;
 24c:	00000006 	andeq	r0, r0, r6
	response_message->sender_id = sender_id;
 250:	00001a92 	muleq	r0, r2, sl
	response_message->status = status;
 254:	00000014 	andeq	r0, r0, r4, lsl r0
	if (!padding){
 258:	00001aa6 	andeq	r1, r0, r6, lsr #21
		response_message->padding = padding;
 25c:	0000000e 	andeq	r0, r0, lr
	if (rec != NULL){
 260:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
 264:	00000024 	andeq	r0, r0, r4, lsr #32
		strncpy(response_message->record, rec, 20);
 268:	00001ad8 	ldrdeq	r1, [r0], -r8
 26c:	0000009c 	muleq	r0, ip, r0
 270:	00001b74 	andeq	r1, r0, r4, ror fp
};
 274:	00000050 	andeq	r0, r0, r0, asr r0
fsm receiver(struct Node* node_db) {
 278:	00001bc4 	andeq	r1, r0, r4, asr #23
 27c:	00000048 	andeq	r0, r0, r8, asr #32
 280:	00001c0c 	andeq	r1, r0, ip, lsl #24
 284:	00000050 	andeq	r0, r0, r0, asr r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	00000058 	andeq	r0, r0, r8, asr r0
 290:	00001c5c 	andeq	r1, r0, ip, asr ip
 294:	000000a8 	andeq	r0, r0, r8, lsr #1
		DEBUG_PRINT("\r\nreceiving 0");
 298:	00001d04 	andeq	r1, r0, r4, lsl #26
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
		incoming_packet = tcv_rnp(receiving, sfd);
 2a0:	00001d38 	andeq	r1, r0, r8, lsr sp
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nreceiving 1");
 2ac:	00000030 	andeq	r0, r0, r0, lsr r0
 2b0:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nreceiving 2");
 2b4:	00000038 	andeq	r0, r0, r8, lsr r0
 2b8:	00001d50 	andeq	r1, r0, r0, asr sp
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
 2bc:	0000013c 	andeq	r0, r0, ip, lsr r1
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
 2c0:	00001e8c 	andeq	r1, r0, ip, lsl #29
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
	...
		switch (response_message_5->tpe){
 2d0:	00000104 	andeq	r0, r0, r4, lsl #2
 2d4:	42f00002 	rscsmi	r0, r0, #2
 2d8:	00040000 	andeq	r0, r4, r0
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	00001eb0 			; <UNDEFINED> instruction: 0x00001eb0
 2e4:	00000016 	andeq	r0, r0, r6, lsl r0
 2e8:	00001ec6 	andeq	r1, r0, r6, asr #29
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 2ec:	0000001a 	andeq	r0, r0, sl, lsl r0
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
 2f0:	00001ee0 	andeq	r1, r0, r0, ror #29
				if (discovery_request_message->gid == node_db->gid){
 2f4:	0000000e 	andeq	r0, r0, lr
 2f8:	00001ef0 	strdeq	r1, [r0], -r0
					DEBUG_PRINT("\r\nSending to sender");
 2fc:	0000004c 	andeq	r0, r0, ip, asr #32
 300:	00001f3c 	andeq	r1, r0, ip, lsr pc
					DEBUG_PRINT("\r\nSending to sender");
 304:	0000008c 	andeq	r0, r0, ip, lsl #1
					response_message_0->tpe = DISCOVERY_RESPONSE;
 308:	00001fc8 	andeq	r1, r0, r8, asr #31
					response_message_0->request_number = discovery_request_message->request_number;
 30c:	00000070 	andeq	r0, r0, r0, ror r0
					response_message_0->sender_id = node_db->id;
 310:	00002038 	andeq	r2, r0, r8, lsr r0
					response_message_0->receiver_id = discovery_request_message->sender_id;
 314:	000000c0 	andeq	r0, r0, r0, asr #1
					DEBUG_PRINT("\r\nSending to sender");
 318:	00000000 	andeq	r0, r0, r0
					call sender(response_message_0, done_case);
 31c:	0000006c 	andeq	r0, r0, ip, rrx
 320:	000020f8 	strdeq	r2, [r0], -r8
 324:	00000024 	andeq	r0, r0, r4, lsr #32
 328:	0000211c 	andeq	r2, r0, ip, lsl r1
 32c:	00000080 	andeq	r0, r0, r0, lsl #1
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
 330:	00000000 	andeq	r0, r0, r0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
 334:	00000070 	andeq	r0, r0, r0, ror r0
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000078 	andeq	r0, r0, r8, ror r0
 340:	0000219c 	muleq	r0, ip, r1
 344:	000000bc 	strheq	r0, [r0], -ip
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000003a 	andeq	r0, r0, sl, lsr r0
 350:	00000000 	andeq	r0, r0, r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
 354:	00000038 	andeq	r0, r0, r8, lsr r0
					node_db->index+=1;
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000000a 	andeq	r0, r0, sl
		DEBUG_PRINT("\r\nIn done_case");
 360:	00002258 	andeq	r2, r0, r8, asr r2
		tcv_endp(incoming_packet);
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
 368:	00002284 	andeq	r2, r0, r4, lsl #5
		DEBUG_PRINT("\r\nIn done_case");
 36c:	00000060 	andeq	r0, r0, r0, rrx
 370:	00000000 	andeq	r0, r0, r0
		proceed receiving;
 374:	00000040 	andeq	r0, r0, r0, asr #32
		ser_out(response_1_create, "\r\nData Saved");
 378:	00000000 	andeq	r0, r0, r0
 37c:	0000002c 	andeq	r0, r0, ip, lsr #32
		proceed receiving;
 380:	00000000 	andeq	r0, r0, r0
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
		ser_out(response_1_delete, "\r\nRecord Deleted");
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000006 	andeq	r0, r0, r6
		proceed receiving;
 390:	000022e4 	andeq	r2, r0, r4, ror #5
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
 394:	00000068 	andeq	r0, r0, r8, rrx
 398:	0000234c 	andeq	r2, r0, ip, asr #6
 39c:	00000050 	andeq	r0, r0, r0, asr r0
 3a0:	0000239c 	muleq	r0, ip, r3
 3a4:	0000009c 	muleq	r0, ip, r0
		proceed receiving;
 3a8:	00002438 	andeq	r2, r0, r8, lsr r4
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
 3ac:	00000040 	andeq	r0, r0, r0, asr #32
 3b0:	00002478 	andeq	r2, r0, r8, ror r4
 3b4:	00000034 	andeq	r0, r0, r4, lsr r0
 3b8:	000024ac 	andeq	r2, r0, ip, lsr #9
		proceed receiving;
 3bc:	0000003c 	andeq	r0, r0, ip, lsr r0
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 3c8:	000024e8 	andeq	r2, r0, r8, ror #9
 3cc:	00000002 	andeq	r0, r0, r2
	...
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
 3d8:	00000034 	andeq	r0, r0, r4, lsr r0
 3dc:	56270002 	strtpl	r0, [r7], -r2
 3e0:	00040000 	andeq	r0, r4, r0
		proceed receiving;
 3e4:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
 3e8:	000024ea 	andeq	r2, r0, sl, ror #9
 3ec:	00000002 	andeq	r0, r0, r2
		proceed receiving;
 3f0:	000024ec 	andeq	r2, r0, ip, ror #9
}
 3f4:	00000002 	andeq	r0, r0, r2
 3f8:	000024ee 	andeq	r2, r0, lr, ror #9
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 3fc:	00000002 	andeq	r0, r0, r2
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
 400:	000024f0 	strdeq	r2, [r0], -r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
 404:	00000044 	andeq	r0, r0, r4, asr #32
	...
 410:	00000014 	andeq	r0, r0, r4, lsl r0
					DEBUG_PRINT("\r\nDelete rec first if");
 414:	579f0002 	ldrpl	r0, [pc, r2]
					break;
 418:	00040000 	andeq	r0, r4, r0
	...
    if (node->data_base.item_count == NUMB_OF_ENT){
 428:	00000024 	andeq	r0, r0, r4, lsr #32
 42c:	5cda0002 	ldclpl	0, cr0, [sl], {2}
						DEBUG_PRINT("\r\nCreate rec third if");
 430:	00040000 	andeq	r0, r4, r0
	...
					DEBUG_PRINT("\r\nCreate rec out if");
 43c:	00000002 	andeq	r0, r0, r2
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
 440:	00000000 	andeq	r0, r0, r0
 444:	00000058 	andeq	r0, r0, r8, asr r0
	...
 450:	00000024 	andeq	r0, r0, r4, lsr #32
 454:	61de0002 	bicsvs	r0, lr, r2
					DEBUG_PRINT("\r\nCreate rec sending to sender");
 458:	00040000 	andeq	r0, r4, r0
	...
						DEBUG_PRINT("\r\nCreate rec third else");
 464:	000000cc 	andeq	r0, r0, ip, asr #1
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
 478:	0000008c 	andeq	r0, r0, ip, lsl #1
 47c:	66d80002 	ldrbvs	r0, [r8], r2
 480:	00040000 	andeq	r0, r4, r0
 484:	00000000 	andeq	r0, r0, r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 488:	0000253c 	andeq	r2, r0, ip, lsr r5
 48c:	00000034 	andeq	r0, r0, r4, lsr r0
 490:	00002570 	andeq	r2, r0, r0, ror r5
 494:	00000030 	andeq	r0, r0, r0, lsr r0
					DEBUG_PRINT("\r\nDelete rec first if");
 498:	000025a0 	andeq	r2, r0, r0, lsr #11
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
					DEBUG_PRINT("\r\nDelete rec second if");
 4a4:	00000054 	andeq	r0, r0, r4, asr r0
					if (delete_record(node_db, delete_record_message->record_index)){
 4a8:	0000260c 	andeq	r2, r0, ip, lsl #12
 4ac:	00000040 	andeq	r0, r0, r0, asr #32
 4b0:	0000264c 	andeq	r2, r0, ip, asr #12
						DEBUG_PRINT("\r\nDelete rec third if");
 4b4:	00000024 	andeq	r0, r0, r4, lsr #32
						status = (uint8_t) SUCCESS;
 4b8:	00002670 	andeq	r2, r0, r0, ror r6
					DEBUG_PRINT("\r\nDelete assemble le response");
 4bc:	00000014 	andeq	r0, r0, r4, lsl r0
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
 4c0:	00002684 	andeq	r2, r0, r4, lsl #13
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000064 	andeq	r0, r0, r4, rrx
 4d0:	00000000 	andeq	r0, r0, r0
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
 4d4:	00000128 	andeq	r0, r0, r8, lsr #2
 4d8:	00000000 	andeq	r0, r0, r0
						DEBUG_PRINT("\r\nDelete rec fourth if");
 4dc:	000000ec 	andeq	r0, r0, ip, ror #1
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000002 	andeq	r0, r0, r2
 4e8:	00000000 	andeq	r0, r0, r0
 4ec:	00000004 	andeq	r0, r0, r4
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	71830002 	orrvc	r0, r3, r2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	00002698 	muleq	r0, r8, r6
 51c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	75a50002 	strvc	r0, [r5, #2]!
 530:	00040000 	andeq	r0, r4, r0
 534:	00000000 	andeq	r0, r0, r0
 538:	00002704 	andeq	r2, r0, r4, lsl #14
 53c:	00000078 	andeq	r0, r0, r8, ror r0
	...
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
 54c:	79bb0002 	ldmibvc	fp!, {r1}
 550:	00040000 	andeq	r0, r4, r0
 554:	00000000 	andeq	r0, r0, r0
 558:	0000277c 	andeq	r2, r0, ip, ror r7
 55c:	00000054 	andeq	r0, r0, r4, asr r0
	...
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 56c:	7e0b0002 	cdpvc	0, 0, cr0, cr11, cr2, {0}
 570:	00040000 	andeq	r0, r4, r0
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
 574:	00000000 	andeq	r0, r0, r0
				DEBUG_PRINT("\r\nretrieve rec");
 578:	000027d0 	ldrdeq	r2, [r0], -r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 57c:	00000060 	andeq	r0, r0, r0, rrx
	...
 588:	0000006c 	andeq	r0, r0, ip, rrx
 58c:	825b0002 	subshi	r0, fp, #2
 590:	00040000 	andeq	r0, r4, r0
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
 594:	00000000 	andeq	r0, r0, r0
 598:	00002830 	andeq	r2, r0, r0, lsr r8
 59c:	00000020 	andeq	r0, r0, r0, lsr #32
    return node->data_base.item_array[index];
 5a0:	00002850 	andeq	r2, r0, r0, asr r8
 5a4:	00000190 	muleq	r0, r0, r1
 5a8:	000029e0 	andeq	r2, r0, r0, ror #19
 5ac:	00000048 	andeq	r0, r0, r8, asr #32
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 5b0:	00002a28 	andeq	r2, r0, r8, lsr #20
    return node->data_base.item_array[index];
 5b4:	00000024 	andeq	r0, r0, r4, lsr #32
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 5b8:	00002a4c 	andeq	r2, r0, ip, asr #20
 5bc:	0000005c 	andeq	r0, r0, ip, asr r0
 5c0:	00002aa8 	andeq	r2, r0, r8, lsr #21
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
 5c4:	00000038 	andeq	r0, r0, r8, lsr r0
 5c8:	00002ae0 	andeq	r2, r0, r0, ror #21
 5cc:	00000180 	andeq	r0, r0, r0, lsl #3
 5d0:	00002c60 	andeq	r2, r0, r0, ror #24
 5d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5d8:	00002d30 	andeq	r2, r0, r0, lsr sp
 5dc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
 5e0:	00002f20 	andeq	r2, r0, r0, lsr #30
 5e4:	00000070 	andeq	r0, r0, r0, ror r0
				DEBUG_PRINT("\r\nResponse");
 5e8:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
 5ec:	00000174 	andeq	r0, r0, r4, ror r1
	...
 5f8:	00000044 	andeq	r0, r0, r4, asr #32
 5fc:	a6d30002 	ldrbge	r0, [r3], r2
 600:	00040000 	andeq	r0, r4, r0
				if(!response_flag){
 604:	00000000 	andeq	r0, r0, r0
					response_flag=1;
 608:	00003104 	andeq	r3, r0, r4, lsl #2
					trigger(&response_flag);
 60c:	00000024 	andeq	r0, r0, r4, lsr #32
				switch(response_message_5->status){
 610:	00003128 	andeq	r3, r0, r8, lsr #2
 614:	00000024 	andeq	r0, r0, r4, lsr #32
 618:	0000314c 	andeq	r3, r0, ip, asr #2
 61c:	00000008 	andeq	r0, r0, r8
 620:	00003154 	andeq	r3, r0, r4, asr r1
						if (response_checker[0] == response_message_5->request_number){
 624:	00000004 	andeq	r0, r0, r4
 628:	00003158 	andeq	r3, r0, r8, asr r1
 62c:	00000004 	andeq	r0, r0, r4
							switch(response_checker[1]){
 630:	0000315c 	andeq	r3, r0, ip, asr r1
 634:	00000048 	andeq	r0, r0, r8, asr #32
	...
									proceed response_1_create;
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
						proceed response_2;
 644:	ae080002 	cdpge	0, 0, cr0, cr8, cr2, {0}
									proceed response_1_delete;
 648:	00040000 	andeq	r0, r4, r0
									proceed response_1_retrieve;
 64c:	00000000 	andeq	r0, r0, r0
						proceed response_2;
 650:	000031a4 	andeq	r3, r0, r4, lsr #3
						proceed response_3;
 654:	00000070 	andeq	r0, r0, r0, ror r0
	...
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
				break;
 664:	b2390002 	eorslt	r0, r9, #2
}
 668:	00040000 	andeq	r0, r4, r0
 66c:	00000000 	andeq	r0, r0, r0
 670:	00003214 	andeq	r3, r0, r4, lsl r2
 674:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
fsm root {
 680:	0000002c 	andeq	r0, r0, ip, lsr #32
 684:	b67d0002 	ldrbtlt	r0, [sp], -r2
 688:	00040000 	andeq	r0, r4, r0
 68c:	00000000 	andeq	r0, r0, r0
 690:	00003330 	andeq	r3, r0, r0, lsr r3
 694:	00000020 	andeq	r0, r0, r0, lsr #32
 698:	00003350 	andeq	r3, r0, r0, asr r3
 69c:	00000230 	andeq	r0, r0, r0, lsr r2
 6a0:	00003580 	andeq	r3, r0, r0, lsl #11
 6a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b4:	bc710002 	ldcllt	0, cr0, [r1], #-8
 6b8:	00040000 	andeq	r0, r4, r0
 6bc:	00000000 	andeq	r0, r0, r0
 6c0:	000035d0 	ldrdeq	r3, [r0], -r0
 6c4:	00000390 	muleq	r0, r0, r3
	...
		node_db = (struct Node *)umalloc(sizeof(struct Node));
 6d0:	00000014 	andeq	r0, r0, r4, lsl r0
 6d4:	c2040002 	andgt	r0, r4, #2
 6d8:	00040000 	andeq	r0, r4, r0
	...
		tcv_plug (0, &plug_null);
 6e8:	00000024 	andeq	r0, r0, r4, lsr #32
 6ec:	e1f20002 	mvns	r0, r2
		sfd = tcv_open (WNONE, 0, 0);
 6f0:	00040000 	andeq	r0, r4, r0
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	00003960 	andeq	r3, r0, r0, ror #18
 6fc:	00000028 	andeq	r0, r0, r8, lsr #32
 700:	00000000 	andeq	r0, r0, r0
			diag("Cannot open tcv interface");
 704:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
		tcv_control(sfd, PHYSOPT_ON, NULL);
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
 714:	e3800002 	orr	r0, r0, #2
		runfsm receiver(node_db);
 718:	00040000 	andeq	r0, r4, r0
 71c:	00000000 	andeq	r0, r0, r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
 720:	00003988 	andeq	r3, r0, r8, lsl #19
 724:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 730:	00000024 	andeq	r0, r0, r4, lsr #32
 734:	e4590002 	ldrb	r0, [r9], #-2
		ser_inf(get_choice, "%c", &CHOICE);
 738:	00040000 	andeq	r0, r4, r0
 73c:	00000000 	andeq	r0, r0, r0
 740:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
		switch(CHOICE) {
 744:	00000020 	andeq	r0, r0, r0, lsr #32
 748:	000039d8 	ldrdeq	r3, [r0], -r8
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 758:	0000003c 	andeq	r0, r0, ip, lsr r0
 75c:	e5a00002 	str	r0, [r0, #2]!
 760:	00040000 	andeq	r0, r4, r0
 764:	00000000 	andeq	r0, r0, r0
 768:	000039f0 	strdeq	r3, [r0], -r0
 76c:	00000008 	andeq	r0, r0, r8
 770:	00000000 	andeq	r0, r0, r0
				proceed menu;
 774:	00000006 	andeq	r0, r0, r6
 778:	000039f8 	strdeq	r3, [r0], -r8
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
 77c:	00000008 	andeq	r0, r0, r8
 780:	00000000 	andeq	r0, r0, r0
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
 784:	00000006 	andeq	r0, r0, r6
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000008 	andeq	r0, r0, r8
	...
    node->gid = gid; 
 798:	00000064 	andeq	r0, r0, r4, rrx
		if (!set_node_gid(node_db, NEW_NODE_GID)){
 79c:	e6da0002 	ldrb	r0, [sl], r2
    node->gid = gid; 
 7a0:	00040000 	andeq	r0, r4, r0
		proceed menu;
 7a4:	00000000 	andeq	r0, r0, r0
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
 7a8:	00003a00 	andeq	r3, r0, r0, lsl #20
 7ac:	0000005c 	andeq	r0, r0, ip, asr r0
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
 7b0:	00003a5c 	andeq	r3, r0, ip, asr sl
 7b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 7b8:	00000000 	andeq	r0, r0, r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 7bc:	00000090 	muleq	r0, r0, r0
 7c0:	00003a88 	andeq	r3, r0, r8, lsl #21
		if((node_db->id < 1) || (node_db->id > 25)){
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	00003aa0 	andeq	r3, r0, r0, lsr #21
 7cc:	00000060 	andeq	r0, r0, r0, rrx
			strncpy(reason, "Out of Range", 50);
 7d0:	00003b00 	andeq	r3, r0, r0, lsl #22
 7d4:	00000034 	andeq	r0, r0, r4, lsr r0
			proceed invalid_node_id;
 7d8:	00000000 	andeq	r0, r0, r0
 7dc:	00000038 	andeq	r0, r0, r8, lsr r0
				strncpy(reason, "ID is already in use", 50);
 7e0:	00000000 	andeq	r0, r0, r0
		for(int i = 0; i < node_db->index; i++){
 7e4:	0000000c 	andeq	r0, r0, ip
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	00000034 	andeq	r0, r0, r4, lsr r0
		proceed menu;
 7f0:	00000000 	andeq	r0, r0, r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 800:	00000054 	andeq	r0, r0, r4, asr r0
		proceed get_new_node_id;
 804:	ef9d0002 	svc	0x009d0002
 808:	00040000 	andeq	r0, r4, r0
	...
			strncpy(reason, "Error Clearing Node Array", 50);
 814:	00000014 	andeq	r0, r0, r4, lsl r0
 818:	00003b34 	andeq	r3, r0, r4, lsr fp
 81c:	00000028 	andeq	r0, r0, r8, lsr #32
			proceed error;
 820:	00003b5c 	andeq	r3, r0, ip, asr fp
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 824:	0000004c 	andeq	r0, r0, ip, asr #32
 828:	00003ba8 	andeq	r3, r0, r8, lsr #23
		request_packet->gid = node_db->gid;
 82c:	00000150 	andeq	r0, r0, r0, asr r1
 830:	00003cf8 	strdeq	r3, [r0], -r8
		request_packet->tpe = DISCOVERY_REQUEST;
 834:	00000118 	andeq	r0, r0, r8, lsl r1
		request_packet->request_number = generate_request_num();
 838:	00003e10 	andeq	r3, r0, r0, lsl lr
 83c:	00000020 	andeq	r0, r0, r0, lsr #32
		call sender(request_packet, wait_discovery);
 840:	00000000 	andeq	r0, r0, r0
 844:	00000060 	andeq	r0, r0, r0, rrx
		request_packet->receiver_id=0;
 848:	00003e30 	andeq	r3, r0, r0, lsr lr
		call sender(request_packet, wait_discovery);
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
			release;
 858:	00000024 	andeq	r0, r0, r4, lsr #32
				proceed get_new_node_id;
 85c:	fa550002 	blx	154086c <__ccfg+0x15208c4>
				proceed clear_neighbour_array;
 860:	00040000 	andeq	r0, r4, r0
				proceed create_proto_start;
 864:	00000000 	andeq	r0, r0, r0
				proceed start_delete_proto;
 868:	00003e4c 	andeq	r3, r0, ip, asr #28
				proceed start_retrieve_proto;
 86c:	000000d4 	ldrdeq	r0, [r0], -r4
				proceed display_db;
 870:	00003f20 	andeq	r3, r0, r0, lsr #30
				proceed del_local;
 874:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			if(node_db->id == node_db->nnodes[i]){
 880:	000000b4 	strheq	r0, [r0], -r4
				strncpy(reason, "ID is already in use", 50);
 884:	fc600002 	stc2l	0, cr0, [r0], #-8
 888:	00040000 	andeq	r0, r4, r0
				proceed invalid_node_id;
 88c:	00000000 	andeq	r0, r0, r0
 890:	00003fc4 	andeq	r3, r0, r4, asr #31
		for(int i = 0; i < node_db->index; i++){
 894:	0000007c 	andeq	r0, r0, ip, ror r0
		if (discovery_wait_flag == 0){
 898:	00004040 	andeq	r4, r0, r0, asr #32
			discovery_wait_flag=1;
 89c:	000000ac 	andeq	r0, r0, ip, lsr #1
 8a0:	000040ec 	andeq	r4, r0, ip, ror #1
			delay(3000, find_proto_start);
 8a4:	0000005c 	andeq	r0, r0, ip, asr r0
 8a8:	00004148 	andeq	r4, r0, r8, asr #2
		if (discovery_wait_flag == 1){
 8ac:	00000018 	andeq	r0, r0, r8, lsl r0
			discovery_wait_flag=0;
 8b0:	00000000 	andeq	r0, r0, r0
 8b4:	00000010 	andeq	r0, r0, r0, lsl r0
			delay(3000, display_neighbour_nodes);
 8b8:	00004160 	andeq	r4, r0, r0, ror #2
 8bc:	00000010 	andeq	r0, r0, r0, lsl r0
 8c0:	00004170 	andeq	r4, r0, r0, ror r1
 8c4:	00000014 	andeq	r0, r0, r4, lsl r0
 8c8:	00004184 	andeq	r4, r0, r4, lsl #3
 8cc:	00000064 	andeq	r0, r0, r4, rrx
 8d0:	000041e8 	andeq	r4, r0, r8, ror #3
 8d4:	00000014 	andeq	r0, r0, r4, lsl r0
 8d8:	000041fc 	strdeq	r4, [r0], -ip
 8dc:	00000014 	andeq	r0, r0, r4, lsl r0
 8e0:	00004210 	andeq	r4, r0, r0, lsl r2
 8e4:	00000014 	andeq	r0, r0, r4, lsl r0
 8e8:	00004224 	andeq	r4, r0, r4, lsr #4
 8ec:	00000028 	andeq	r0, r0, r8, lsr #32
 8f0:	0000424c 	andeq	r4, r0, ip, asr #4
 8f4:	00000010 	andeq	r0, r0, r0, lsl r0
 8f8:	0000425c 	andeq	r4, r0, ip, asr r2
 8fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 900:	00004288 	andeq	r4, r0, r8, lsl #5
		if(node_db->index == 0){
 904:	00000014 	andeq	r0, r0, r4, lsl r0
 908:	0000429c 	muleq	r0, ip, r2
 90c:	00000014 	andeq	r0, r0, r4, lsl r0
			proceed menu;
 910:	000042b0 			; <UNDEFINED> instruction: 0x000042b0
fsm root {
 914:	00000110 	andeq	r0, r0, r0, lsl r1
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
 918:	000043c0 	andeq	r4, r0, r0, asr #7
		for (int i=0; i<node_db->index; i++) {
 91c:	00000064 	andeq	r0, r0, r4, rrx
 920:	00004424 	andeq	r4, r0, r4, lsr #8
 924:	00000028 	andeq	r0, r0, r8, lsr #32
		proceed menu;
 928:	0000444c 	andeq	r4, r0, ip, asr #8
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
 92c:	00000150 	andeq	r0, r0, r0, asr r1
	...
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
 938:	0000003c 	andeq	r0, r0, ip, lsr r0
 93c:	077b0002 	ldrbeq	r0, [fp, -r2]!
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 940:	00040001 	andeq	r0, r4, r1
	...
			strncpy(reason, "Error: improper ID", 50);
 94c:	000000f4 	strdeq	r0, [r0], -r4
 950:	0000459c 	muleq	r0, ip, r5
			proceed error;
 954:	00000220 	andeq	r0, r0, r0, lsr #4
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
 958:	000047bc 			; <UNDEFINED> instruction: 0x000047bc
 95c:	00000060 	andeq	r0, r0, r0, rrx
		ser_in(get_record_to_create, user_provided_record, 20);
 960:	00000000 	andeq	r0, r0, r0
 964:	00000078 	andeq	r0, r0, r8, ror r0
 968:	0000481c 	andeq	r4, r0, ip, lsl r8
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 96c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		create_message->gid = node_db->gid;
 978:	00000044 	andeq	r0, r0, r4, asr #32
		create_message->tpe = CREATE_RECORD;
 97c:	10a20002 	adcne	r0, r2, r2
		create_message->request_number = generate_request_num();
 980:	00040001 	andeq	r0, r4, r1
	...
		create_message->sender_id = node_db->id;
 98c:	00000010 	andeq	r0, r0, r0, lsl r0
		strncpy(create_message->record, user_provided_record, 20);
 990:	00000000 	andeq	r0, r0, r0
		create_message->receiver_id = user_provided_receiver_id;
 994:	00000018 	andeq	r0, r0, r8, lsl r0
		strncpy(create_message->record, user_provided_record, 20);
 998:	00004834 	andeq	r4, r0, r4, lsr r8
		response_checker[0] = create_message->request_number;
 99c:	0000004c 	andeq	r0, r0, ip, asr #32
		call sender(create_message, wait);
 9a0:	00000000 	andeq	r0, r0, r0
		response_checker[1] = create_message->tpe;
 9a4:	00000030 	andeq	r0, r0, r0, lsr r0
 9a8:	00004880 	andeq	r4, r0, r0, lsl #17
		call sender(create_message, wait);
 9ac:	0000006c 	andeq	r0, r0, ip, rrx
 9b0:	000048ec 	andeq	r4, r0, ip, ror #17
 9b4:	00000016 	andeq	r0, r0, r6, lsl r0
	...
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
 9c0:	00000044 	andeq	r0, r0, r4, asr #32
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
 9c4:	14720002 	ldrbtne	r0, [r2], #-2
 9c8:	00040001 	andeq	r0, r4, r1
 9cc:	00000000 	andeq	r0, r0, r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 9d0:	00004904 	andeq	r4, r0, r4, lsl #18
 9d4:	00000028 	andeq	r0, r0, r8, lsr #32
			strncpy(reason, "Error: improper node ID", 50);
 9d8:	0000492c 	andeq	r4, r0, ip, lsr #18
 9dc:	00000008 	andeq	r0, r0, r8
			proceed error;
 9e0:	00000000 	andeq	r0, r0, r0
 9e4:	00000022 	andeq	r0, r0, r2, lsr #32
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
 9e8:	00000000 	andeq	r0, r0, r0
 9ec:	0000002e 	andeq	r0, r0, lr, lsr #32
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
 9f0:	00000000 	andeq	r0, r0, r0
 9f4:	00000034 	andeq	r0, r0, r4, lsr r0
 9f8:	00000000 	andeq	r0, r0, r0
		if (us_pr_in < 0 || us_pr_in > 40){
 9fc:	00000040 	andeq	r0, r0, r0, asr #32
	...
			strncpy(reason, "Error: invalid index", 50);
 a08:	0000001c 	andeq	r0, r0, ip, lsl r0
			proceed error;
 a0c:	1a1d0002 	bne	740a1c <__ccfg+0x720a74>
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
 a10:	00040001 	andeq	r0, r4, r1
 a14:	00000000 	andeq	r0, r0, r0
 a18:	00004934 	andeq	r4, r0, r4, lsr r9
		delete_record->gid = node_db->gid;
 a1c:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
		delete_record->request_number = generate_request_num();
 a28:	0000001c 	andeq	r0, r0, ip, lsl r0
		call sender(delete_record, wait);
 a2c:	29520002 	ldmdbcs	r2, {r1}^
		delete_record->sender_id = node_db->id;
 a30:	00040001 	andeq	r0, r4, r1
		delete_record->receiver_id = user_provided_receiver_id;
 a34:	00000000 	andeq	r0, r0, r0
		delete_record->record_index = us_pr_in;
 a38:	000049e0 	andeq	r4, r0, r0, ror #19
 a3c:	0000004c 	andeq	r0, r0, ip, asr #32
	...
		call sender(delete_record, wait);
 a48:	00000014 	andeq	r0, r0, r4, lsl r0
 a4c:	32cc0002 	sbccc	r0, ip, #2
 a50:	00040001 	andeq	r0, r4, r1
	...
		ser_inf(get_id_for_retrieve, "%d", &get_id);
 a60:	0000001c 	andeq	r0, r0, ip, lsl r0
 a64:	3bf60002 	blcc	ffd80a74 <_estack+0xdfd7ba74>
 a68:	00040001 	andeq	r0, r4, r1
		if (get_id < 1 || get_id > 25){
 a6c:	00000000 	andeq	r0, r0, r0
 a70:	00004a2c 	andeq	r4, r0, ip, lsr #20
			strncpy(reason, "Error: improper node ID", 50);
 a74:	00000054 	andeq	r0, r0, r4, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000000d2 	ldrdeq	r0, [r0], -r2
       8:	000000d6 	ldrdeq	r0, [r0], -r6
       c:	000000da 	ldrdeq	r0, [r0], -sl
    return node->data_base.item_array[index];
      10:	000000dc 	ldrdeq	r0, [r0], -ip
      14:	000000de 	ldrdeq	r0, [r0], -lr
      18:	000000e0 	andeq	r0, r0, r0, ror #1
};
      1c:	000000e2 	andeq	r0, r0, r2, ror #1
      20:	000000e4 	andeq	r0, r0, r4, ror #1
      24:	00000130 	andeq	r0, r0, r0, lsr r1
      28:	00000134 	andeq	r0, r0, r4, lsr r1
      2c:	00000184 	andeq	r0, r0, r4, lsl #3
	...
      38:	000000dc 	ldrdeq	r0, [r0], -ip
      3c:	000000de 	ldrdeq	r0, [r0], -lr
			i = k;
      40:	000000e0 	andeq	r0, r0, r0, ror #1
				j->Next = k;
      44:	000000e2 	andeq	r0, r0, r2, ror #1
      48:	000000e4 	andeq	r0, r0, r4, ror #1
}
      4c:	00000128 	andeq	r0, r0, r8, lsr #2
      50:	0000013a 	andeq	r0, r0, sl, lsr r1
      54:	00000184 	andeq	r0, r0, r4, lsl #3
	...
			nq++;
      60:	000002ea 	andeq	r0, r0, sl, ror #5
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	0000035e 	andeq	r0, r0, lr, asr r3
      68:	000003fa 	strdeq	r0, [r0], -sl
      6c:	00000666 	andeq	r0, r0, r6, ror #12
	...
      78:	00000428 	andeq	r0, r0, r8, lsr #8
      7c:	00000430 	andeq	r0, r0, r0, lsr r4
      80:	00000460 	andeq	r0, r0, r0, ror #8
      84:	00000460 	andeq	r0, r0, r0, ror #8
	...
	if (!button_still_pressed (__button_list [pbutton]))
      90:	0000059e 	muleq	r0, lr, r5
      94:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
      98:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
	if (baction == NULL)
      9c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
	...
endthread
      a8:	00000798 	muleq	r0, r8, r7
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000079c 	muleq	r0, ip, r7
      b0:	0000079e 	muleq	r0, lr, r7
endthread
      b4:	0000079e 	muleq	r0, lr, r7
      b8:	000007a0 	andeq	r0, r0, r0, lsr #15
      bc:	000007a2 	andeq	r0, r0, r2, lsr #15
	...
fsm sender(struct ResponseMessage *message) {
      c8:	000007ae 	andeq	r0, r0, lr, lsr #15
      cc:	000007de 	ldrdeq	r0, [r0], -lr
      d0:	000007e0 	andeq	r0, r0, r0, ror #15
}
      d4:	000007f4 	strdeq	r0, [r0], -r4
      d8:	00000876 	andeq	r0, r0, r6, ror r8
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	00000896 	muleq	r0, r6, r8
	...
      e8:	000007e0 	andeq	r0, r0, r0, ror #15
      ec:	000007ee 	andeq	r0, r0, lr, ror #15
		packet[1] = message->gid;
      f0:	00000876 	andeq	r0, r0, r6, ror r8
      f4:	00000896 	muleq	r0, r6, r8
	...
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	00000824 	andeq	r0, r0, r4, lsr #16
     104:	00000856 	andeq	r0, r0, r6, asr r8
		*p = message->tpe;p++;
     108:	00000896 	muleq	r0, r6, r8
		*p = message->request_number;p++;
     10c:	00000896 	muleq	r0, r6, r8
	...
		switch(message->tpe) {
     118:	00000916 	andeq	r0, r0, r6, lsl r9
     11c:	00000926 	andeq	r0, r0, r6, lsr #18
     120:	00000b52 	andeq	r0, r0, r2, asr fp
		tcv_endp(packet);
     124:	00000b70 	andeq	r0, r0, r0, ror fp
	...
}
     130:	000000c8 	andeq	r0, r0, r8, asr #1
		finish;
     134:	00000184 	andeq	r0, r0, r4, lsl #3
     138:	00000001 	andeq	r0, r0, r1
     13c:	00000001 	andeq	r0, r0, r1
				strncpy(p, message->record, sizeof(message->record));
     140:	00000001 	andeq	r0, r0, r1
				*p = message->padding;p++;
     144:	00000001 	andeq	r0, r0, r1
				strncpy(p, message->record, sizeof(message->record));
     148:	00000001 	andeq	r0, r0, r1
     14c:	00000001 	andeq	r0, r0, r1
     150:	00000184 	andeq	r0, r0, r4, lsl #3
				strncpy(p, message->record, sizeof(message->record));
     154:	00000198 	muleq	r0, r8, r1
     158:	00000198 	muleq	r0, r8, r1
				strncpy(p, message->record, sizeof(message->record));
     15c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
				break;
     160:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
				*p = message->record_index;p++;
     164:	000001ce 	andeq	r0, r0, lr, asr #3
				*p = message->padding;
     168:	00000001 	andeq	r0, r0, r1
				break;
     16c:	00000001 	andeq	r0, r0, r1
     170:	000001ce 	andeq	r0, r0, lr, asr #3
     174:	000001e4 	andeq	r0, r0, r4, ror #3
     178:	000001e4 	andeq	r0, r0, r4, ror #3
     17c:	00000200 	andeq	r0, r0, r0, lsl #4
     180:	00000001 	andeq	r0, r0, r1
		node->nnodes[i] = 0;
     184:	00000001 	andeq	r0, r0, r1
     188:	00000200 	andeq	r0, r0, r0, lsl #4
     18c:	00000226 	andeq	r0, r0, r6, lsr #4
     190:	00000226 	andeq	r0, r0, r6, lsr #4
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	00000278 	andeq	r0, r0, r8, ror r2
bool init_node(struct Node* node){
     198:	00000278 	andeq	r0, r0, r8, ror r2
    node->id  = 0;                  // default id value 0
     19c:	00000680 	andeq	r0, r0, r0, lsl #13
    node->index = 0;                // default entry count 0
     1a0:	00000680 	andeq	r0, r0, r0, lsl #13
    node->data_base.item_count = 0; // default no items in array
     1a4:	00000c34 	andeq	r0, r0, r4, lsr ip
	...
    DEBUG_PRINT("Error initializing node...\n");
     1b0:	00000d22 	andeq	r0, r0, r2, lsr #26
};
     1b4:	00000d28 	andeq	r0, r0, r8, lsr #26
     1b8:	00000d28 	andeq	r0, r0, r8, lsr #26
uint8_t generate_request_num(void){
     1bc:	00000d28 	andeq	r0, r0, r8, lsr #26
    return (uint8_t) (rand() % 255);
     1c0:	00000d2c 	andeq	r0, r0, ip, lsr #26
     1c4:	00000d2e 	andeq	r0, r0, lr, lsr #26
	...
            node->nnodes[i] = 0; // set to null byte
     1d0:	00000d28 	andeq	r0, r0, r8, lsr #26
     1d4:	00000d2a 	andeq	r0, r0, sl, lsr #26
     1d8:	00000d2e 	andeq	r0, r0, lr, lsr #26
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00000d30 	andeq	r0, r0, r0, lsr sp
	...
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e8:	00000d40 	andeq	r0, r0, r0, asr #26
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	00000d42 	andeq	r0, r0, r2, asr #26
     1f0:	00000d44 	andeq	r0, r0, r4, asr #26
     1f4:	00000d46 	andeq	r0, r0, r6, asr #26
	...
bool delete_all(struct Node *node){
     200:	00000d7a 	andeq	r0, r0, sl, ror sp
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	00000d7e 	andeq	r0, r0, lr, ror sp
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00000d80 	andeq	r0, r0, r0, lsl #27
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00000d82 	andeq	r0, r0, r2, lsl #27
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	00000d84 	andeq	r0, r0, r4, lsl #27
            node->data_base.item_array[i].timestamp = 0;
     214:	00000d8c 	andeq	r0, r0, ip, lsl #27
	...
}
     220:	00000db0 			; <UNDEFINED> instruction: 0x00000db0
        return true;
     224:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00000dbe 			; <UNDEFINED> instruction: 0x00000dbe
	...
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     238:	00000de0 	andeq	r0, r0, r0, ror #27
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00000e66 	andeq	r0, r0, r6, ror #28
	response_message->tpe = RESPONSE;
     240:	00000e8c 	andeq	r0, r0, ip, lsl #29
	response_message->status = status;
     244:	00000ee4 	andeq	r0, r0, r4, ror #29
	...
	response_message->sender_id = sender_id;
     250:	00000f54 	andeq	r0, r0, r4, asr pc
	response_message->status = status;
     254:	00000f56 	andeq	r0, r0, r6, asr pc
	if (!padding){
     258:	00000f58 	andeq	r0, r0, r8, asr pc
		response_message->padding = padding;
     25c:	00000f6c 	andeq	r0, r0, ip, ror #30
	...
		strncpy(response_message->record, rec, 20);
     268:	00000f88 	andeq	r0, r0, r8, lsl #31
     26c:	00000f8a 	andeq	r0, r0, sl, lsl #31
     270:	00000f8c 	andeq	r0, r0, ip, lsl #31
};
     274:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
	...
fsm receiver(struct Node* node_db) {
     280:	000010d0 	ldrdeq	r1, [r0], -r0
     284:	000010d4 	ldrdeq	r1, [r0], -r4
     288:	000010d6 	ldrdeq	r1, [r0], -r6
     28c:	000010d8 	ldrdeq	r1, [r0], -r8
     290:	000010da 	ldrdeq	r1, [r0], -sl
     294:	000010dc 	ldrdeq	r1, [r0], -ip
	...
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	00001138 	andeq	r1, r0, r8, lsr r1
     2a4:	0000113c 	andeq	r1, r0, ip, lsr r1
     2a8:	0000114e 	andeq	r1, r0, lr, asr #2
		DEBUG_PRINT("\r\nreceiving 1");
     2ac:	0000117a 	andeq	r1, r0, sl, ror r1
	...
		DEBUG_PRINT("\r\nreceiving 2");
     2b8:	00001190 	muleq	r0, r0, r1
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2bc:	00001190 	muleq	r0, r0, r1
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c0:	00001192 	muleq	r0, r2, r1
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2c4:	00001194 	muleq	r0, r4, r1
	...
		switch (response_message_5->tpe){
     2d0:	00001194 	muleq	r0, r4, r1
     2d4:	00001196 	muleq	r0, r6, r1
     2d8:	00001198 	muleq	r0, r8, r1
     2dc:	0000119a 	muleq	r0, sl, r1
     2e0:	000011a0 	andeq	r1, r0, r0, lsr #3
     2e4:	000011a6 	andeq	r1, r0, r6, lsr #3
     2e8:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2ec:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2f0:	000011be 			; <UNDEFINED> instruction: 0x000011be
				if (discovery_request_message->gid == node_db->gid){
     2f4:	000011c0 	andeq	r1, r0, r0, asr #3
	...
					DEBUG_PRINT("\r\nSending to sender");
     300:	000011d4 	ldrdeq	r1, [r0], -r4
					DEBUG_PRINT("\r\nSending to sender");
     304:	000011d4 	ldrdeq	r1, [r0], -r4
					response_message_0->tpe = DISCOVERY_RESPONSE;
     308:	000011d6 	ldrdeq	r1, [r0], -r6
					response_message_0->request_number = discovery_request_message->request_number;
     30c:	000011d8 	ldrdeq	r1, [r0], -r8
	...
					DEBUG_PRINT("\r\nSending to sender");
     318:	000011da 	ldrdeq	r1, [r0], -sl
					call sender(response_message_0, done_case);
     31c:	000011dc 	ldrdeq	r1, [r0], -ip
     320:	000011de 	ldrdeq	r1, [r0], -lr
     324:	000011e0 	andeq	r1, r0, r0, ror #3
     328:	000011ea 	andeq	r1, r0, sl, ror #3
     32c:	000011ee 	andeq	r1, r0, lr, ror #3
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     330:	000011f8 	strdeq	r1, [r0], -r8
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     334:	000011fa 	strdeq	r1, [r0], -sl
	...
     340:	000012de 	ldrdeq	r1, [r0], -lr
     344:	000012e0 	andeq	r1, r0, r0, ror #5
     348:	000012e2 	andeq	r1, r0, r2, ror #5
     34c:	000012e6 	andeq	r1, r0, r6, ror #5
     350:	000012f6 	strdeq	r1, [r0], -r6
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     354:	000012f8 	strdeq	r1, [r0], -r8
	...
		DEBUG_PRINT("\r\nIn done_case");
     360:	000012e0 	andeq	r1, r0, r0, ror #5
		tcv_endp(incoming_packet);
     364:	000012e2 	andeq	r1, r0, r2, ror #5
     368:	000012e6 	andeq	r1, r0, r6, ror #5
		DEBUG_PRINT("\r\nIn done_case");
     36c:	000012f6 	strdeq	r1, [r0], -r6
     370:	000012f8 	strdeq	r1, [r0], -r8
		proceed receiving;
     374:	00001332 	andeq	r1, r0, r2, lsr r3
	...
		proceed receiving;
     380:	000012ea 	andeq	r1, r0, sl, ror #5
     384:	000012ee 	andeq	r1, r0, lr, ror #5
		ser_out(response_1_delete, "\r\nRecord Deleted");
     388:	00001316 	andeq	r1, r0, r6, lsl r3
     38c:	0000131e 	andeq	r1, r0, lr, lsl r3
	...
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     398:	000012ee 	andeq	r1, r0, lr, ror #5
     39c:	000012f2 	strdeq	r1, [r0], -r2
     3a0:	0000132a 	andeq	r1, r0, sl, lsr #6
     3a4:	0000132e 	andeq	r1, r0, lr, lsr #6
	...
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     3b0:	000012f2 	strdeq	r1, [r0], -r2
     3b4:	000012f6 	strdeq	r1, [r0], -r6
     3b8:	00001324 	andeq	r1, r0, r4, lsr #6
		proceed receiving;
     3bc:	0000132a 	andeq	r1, r0, sl, lsr #6
	...
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3c8:	00001332 	andeq	r1, r0, r2, lsr r3
     3cc:	00001334 	andeq	r1, r0, r4, lsr r3
		proceed receiving;
     3d0:	00001336 	andeq	r1, r0, r6, lsr r3
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3d4:	00001338 	andeq	r1, r0, r8, lsr r3
     3d8:	0000133a 	andeq	r1, r0, sl, lsr r3
     3dc:	0000133c 	andeq	r1, r0, ip, lsr r3
	...
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3e8:	00001334 	andeq	r1, r0, r4, lsr r3
     3ec:	00001336 	andeq	r1, r0, r6, lsr r3
		proceed receiving;
     3f0:	0000133c 	andeq	r1, r0, ip, lsr r3
}
     3f4:	0000133e 	andeq	r1, r0, lr, lsr r3
	...
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     400:	0000134e 	andeq	r1, r0, lr, asr #6
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     404:	00001350 	andeq	r1, r0, r0, asr r3
     408:	00001352 	andeq	r1, r0, r2, asr r3
     40c:	00001354 	andeq	r1, r0, r4, asr r3
	...
					break;
     418:	00001366 	andeq	r1, r0, r6, ror #6
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     41c:	00001368 	andeq	r1, r0, r8, ror #6
     420:	0000136a 	andeq	r1, r0, sl, ror #6
					DEBUG_PRINT("\r\nCreate rec second if");
     424:	0000136c 	andeq	r1, r0, ip, ror #6
	...
						DEBUG_PRINT("\r\nCreate rec third if");
     430:	000013ae 	andeq	r1, r0, lr, lsr #7
     434:	000013ae 	andeq	r1, r0, lr, lsr #7
					DEBUG_PRINT("\r\nCreate rec out if");
     438:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
     43c:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
	...
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     448:	000013e4 	andeq	r1, r0, r4, ror #7
     44c:	000013e6 	andeq	r1, r0, r6, ror #7
     450:	000013e8 	andeq	r1, r0, r8, ror #7
     454:	000013f0 	strdeq	r1, [r0], -r0
	...
						DEBUG_PRINT("\r\nCreate rec third else");
     460:	00001490 	muleq	r0, r0, r4
     464:	00001490 	muleq	r0, r0, r4
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     468:	00001496 	muleq	r0, r6, r4
     46c:	00001498 	muleq	r0, r8, r4
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     470:	0000149a 	muleq	r0, sl, r4
				DEBUG_PRINT("\r\nDelete rec");/*
     474:	0000149e 	muleq	r0, lr, r4
	...
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     480:	000014aa 	andeq	r1, r0, sl, lsr #9
     484:	000014ac 	andeq	r1, r0, ip, lsr #9
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     488:	000014c2 	andeq	r1, r0, r2, asr #9
     48c:	000014c4 	andeq	r1, r0, r4, asr #9
     490:	000014d6 	ldrdeq	r1, [r0], -r6
     494:	000014f2 	strdeq	r1, [r0], -r2
					DEBUG_PRINT("\r\nDelete rec first if");
     498:	00001516 	andeq	r1, r0, r6, lsl r5
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     49c:	00001670 	andeq	r1, r0, r0, ror r6
	...
					if (delete_record(node_db, delete_record_message->record_index)){
     4a8:	000014aa 	andeq	r1, r0, sl, lsr #9
     4ac:	000014ac 	andeq	r1, r0, ip, lsr #9
     4b0:	0000154a 	andeq	r1, r0, sl, asr #10
						DEBUG_PRINT("\r\nDelete rec third if");
     4b4:	0000154e 	andeq	r1, r0, lr, asr #10
	...
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4c0:	0000154e 	andeq	r1, r0, lr, asr #10
     4c4:	0000154e 	andeq	r1, r0, lr, asr #10
     4c8:	00001552 	andeq	r1, r0, r2, asr r5
     4cc:	00001556 	andeq	r1, r0, r6, asr r5
     4d0:	0000155a 	andeq	r1, r0, sl, asr r5
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4d4:	0000155c 	andeq	r1, r0, ip, asr r5
	...
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4e0:	0000154e 	andeq	r1, r0, lr, asr #10
     4e4:	00001552 	andeq	r1, r0, r2, asr r5
     4e8:	00001568 	andeq	r1, r0, r8, ror #10
     4ec:	0000156a 	andeq	r1, r0, sl, ror #10
     4f0:	0000156e 	andeq	r1, r0, lr, ror #10
     4f4:	00001572 	andeq	r1, r0, r2, ror r5
	...
     500:	00001556 	andeq	r1, r0, r6, asr r5
     504:	0000155a 	andeq	r1, r0, sl, asr r5
     508:	0000155c 	andeq	r1, r0, ip, asr r5
     50c:	0000155e 	andeq	r1, r0, lr, asr r5
     510:	00001562 	andeq	r1, r0, r2, ror #10
     514:	00001566 	andeq	r1, r0, r6, ror #10
	...
     520:	0000156a 	andeq	r1, r0, sl, ror #10
     524:	0000156e 	andeq	r1, r0, lr, ror #10
     528:	00001588 	andeq	r1, r0, r8, lsl #11
     52c:	0000158c 	andeq	r1, r0, ip, lsl #11
     530:	0000158e 	andeq	r1, r0, lr, lsl #11
     534:	00001596 	muleq	r0, r6, r5
	...
     540:	00001580 	andeq	r1, r0, r0, lsl #11
     544:	00001582 	andeq	r1, r0, r2, lsl #11
     548:	00001584 	andeq	r1, r0, r4, lsl #11
     54c:	00001588 	andeq	r1, r0, r8, lsl #11
	...
     558:	000015c4 	andeq	r1, r0, r4, asr #11
     55c:	000015c8 	andeq	r1, r0, r8, asr #11
     560:	000015ca 	andeq	r1, r0, sl, asr #11
     564:	000015d2 	ldrdeq	r1, [r0], -r2
	...
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     570:	000015c8 	andeq	r1, r0, r8, asr #11
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     574:	000015ca 	andeq	r1, r0, sl, asr #11
				DEBUG_PRINT("\r\nretrieve rec");
     578:	000015d6 	ldrdeq	r1, [r0], -r6
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     57c:	000015d8 	ldrdeq	r1, [r0], -r8
	...
     588:	000015f6 	strdeq	r1, [r0], -r6
     58c:	000015f8 	strdeq	r1, [r0], -r8
     590:	000015fa 	strdeq	r1, [r0], -sl
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     594:	000015fc 	strdeq	r1, [r0], -ip
	...
    return node->data_base.item_array[index];
     5a0:	000015f8 	strdeq	r1, [r0], -r8
     5a4:	000015fa 	strdeq	r1, [r0], -sl
     5a8:	000015fc 	strdeq	r1, [r0], -ip
     5ac:	00001600 	andeq	r1, r0, r0, lsl #12
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b8:	00001656 	andeq	r1, r0, r6, asr r6
     5bc:	00001658 	andeq	r1, r0, r8, asr r6
     5c0:	00001658 	andeq	r1, r0, r8, asr r6
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     5c4:	0000165a 	andeq	r1, r0, sl, asr r6
	...
     5d0:	0000165e 	andeq	r1, r0, lr, asr r6
     5d4:	00001662 	andeq	r1, r0, r2, ror #12
     5d8:	00001664 	andeq	r1, r0, r4, ror #12
     5dc:	00001666 	andeq	r1, r0, r6, ror #12
	...
				DEBUG_PRINT("\r\nResponse");
     5e8:	00000001 	andeq	r0, r0, r1
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5ec:	00000001 	andeq	r0, r0, r1
     5f0:	00000001 	andeq	r0, r0, r1
     5f4:	00000001 	andeq	r0, r0, r1
	...
     600:	00001718 	andeq	r1, r0, r8, lsl r7
				if(!response_flag){
     604:	00001718 	andeq	r1, r0, r8, lsl r7
					response_flag=1;
     608:	0000171c 	andeq	r1, r0, ip, lsl r7
					trigger(&response_flag);
     60c:	00001728 	andeq	r1, r0, r8, lsr #14
	...
				switch(response_message_5->status){
     618:	00000c34 	andeq	r0, r0, r4, lsr ip
     61c:	00000c40 	andeq	r0, r0, r0, asr #24
     620:	00000c40 	andeq	r0, r0, r0, asr #24
						if (response_checker[0] == response_message_5->request_number){
     624:	00000c6c 	andeq	r0, r0, ip, ror #24
     628:	00000c6c 	andeq	r0, r0, ip, ror #24
     62c:	00000c96 	muleq	r0, r6, ip
							switch(response_checker[1]){
     630:	00000c98 	muleq	r0, r8, ip
     634:	00000cd4 	ldrdeq	r0, [r0], -r4
     638:	00000cd4 	ldrdeq	r0, [r0], -r4
     63c:	00000d14 	andeq	r0, r0, r4, lsl sp
									proceed response_1_create;
     640:	00000001 	andeq	r0, r0, r1
						proceed response_2;
     644:	00000001 	andeq	r0, r0, r1
									proceed response_1_delete;
     648:	00000d14 	andeq	r0, r0, r4, lsl sp
									proceed response_1_retrieve;
     64c:	00000d68 	andeq	r0, r0, r8, ror #26
						proceed response_2;
     650:	00000d68 	andeq	r0, r0, r8, ror #26
						proceed response_3;
     654:	00000da8 	andeq	r0, r0, r8, lsr #27
						proceed response_4;
     658:	00000da8 	andeq	r0, r0, r8, lsr #27
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     65c:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     660:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				break;
     664:	00000ee4 	andeq	r0, r0, r4, ror #29
}
     668:	00000ee4 	andeq	r0, r0, r4, ror #29
     66c:	00000f34 	andeq	r0, r0, r4, lsr pc
     670:	00000f34 	andeq	r0, r0, r4, lsr pc
     674:	00000f88 	andeq	r0, r0, r8, lsl #31
     678:	00000f88 	andeq	r0, r0, r8, lsl #31
     67c:	00000fc0 	andeq	r0, r0, r0, asr #31
fsm root {
     680:	00000fc0 	andeq	r0, r0, r0, asr #31
     684:	000010d0 	ldrdeq	r1, [r0], -r0
     688:	00000001 	andeq	r0, r0, r1
     68c:	00000001 	andeq	r0, r0, r1
     690:	000010d0 	ldrdeq	r1, [r0], -r0
     694:	00001190 	muleq	r0, r0, r1
     698:	00001190 	muleq	r0, r0, r1
     69c:	000011d4 	ldrdeq	r1, [r0], -r4
     6a0:	000011d4 	ldrdeq	r1, [r0], -r4
     6a4:	00001210 	andeq	r1, r0, r0, lsl r2
     6a8:	00001210 	andeq	r1, r0, r0, lsl r2
     6ac:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
     6b0:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
     6b4:	0000146c 	andeq	r1, r0, ip, ror #8
     6b8:	0000146c 	andeq	r1, r0, ip, ror #8
     6bc:	00001490 	muleq	r0, r0, r4
     6c0:	00000001 	andeq	r0, r0, r1
     6c4:	00000001 	andeq	r0, r0, r1
     6c8:	00001490 	muleq	r0, r0, r4
     6cc:	000016e8 	andeq	r1, r0, r8, ror #13
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     6d0:	000016e8 	andeq	r1, r0, r8, ror #13
     6d4:	00001718 	andeq	r1, r0, r8, lsl r7
     6d8:	00000001 	andeq	r0, r0, r1
		init_node(node_db);
     6dc:	00000001 	andeq	r0, r0, r1
		phys_cc1350(0, MAX_PKT_LEN);
     6e0:	00001718 	andeq	r1, r0, r8, lsl r7
     6e4:	00001778 	andeq	r1, r0, r8, ror r7
	...
		sfd = tcv_open (WNONE, 0, 0);
     6f0:	00001834 	andeq	r1, r0, r4, lsr r8
     6f4:	00001836 	andeq	r1, r0, r6, lsr r8
     6f8:	00001836 	andeq	r1, r0, r6, lsr r8
     6fc:	00001838 	andeq	r1, r0, r8, lsr r8
	...
			diag("Cannot open tcv interface");
     708:	0000189e 	muleq	r0, lr, r8
			halt();
     70c:	00001940 	andeq	r1, r0, r0, asr #18
		tcv_control(sfd, PHYSOPT_ON, NULL);
     710:	00001944 	andeq	r1, r0, r4, asr #18
     714:	00001948 	andeq	r1, r0, r8, asr #18
	...
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     720:	00001d14 	andeq	r1, r0, r4, lsl sp
     724:	00001d16 	andeq	r1, r0, r6, lsl sp
     728:	00001d1a 	andeq	r1, r0, sl, lsl sp
     72c:	00001d1c 	andeq	r1, r0, ip, lsl sp
     730:	00001d20 	andeq	r1, r0, r0, lsr #26
     734:	00001d24 	andeq	r1, r0, r4, lsr #26
		ser_inf(get_choice, "%c", &CHOICE);
     738:	00001d26 	andeq	r1, r0, r6, lsr #26
     73c:	00001d30 	andeq	r1, r0, r0, lsr sp
	...
		switch(CHOICE) {
     748:	00001d62 	andeq	r1, r0, r2, ror #26
     74c:	00001d64 	andeq	r1, r0, r4, ror #26
     750:	00001d66 	andeq	r1, r0, r6, ror #26
     754:	00001d6a 	andeq	r1, r0, sl, ror #26
     758:	00001dfa 	strdeq	r1, [r0], -sl
     75c:	00001e5c 	andeq	r1, r0, ip, asr lr
     760:	00001e60 	andeq	r1, r0, r0, ror #28
     764:	00001e64 	andeq	r1, r0, r4, ror #28
     768:	00001e66 	andeq	r1, r0, r6, ror #28
     76c:	00001e68 	andeq	r1, r0, r8, ror #28
	...
				proceed menu;
     778:	00001d7e 	andeq	r1, r0, lr, ror sp
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     77c:	00001d80 	andeq	r1, r0, r0, lsl #27
     780:	00001d80 	andeq	r1, r0, r0, lsl #27
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     784:	00001d82 	andeq	r1, r0, r2, lsl #27
	...
		DEBUG_PRINT("setting node group ID");
     790:	00001778 	andeq	r1, r0, r8, ror r7
     794:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    node->gid = gid; 
     798:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     79c:	00001834 	andeq	r1, r0, r4, lsr r8
    node->gid = gid; 
     7a0:	00001834 	andeq	r1, r0, r4, lsr r8
		proceed menu;
     7a4:	0000184c 	andeq	r1, r0, ip, asr #16
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     7a8:	00000001 	andeq	r0, r0, r1
     7ac:	00000001 	andeq	r0, r0, r1
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     7b0:	0000184c 	andeq	r1, r0, ip, asr #16
     7b4:	0000185c 	andeq	r1, r0, ip, asr r8
     7b8:	0000185c 	andeq	r1, r0, ip, asr r8
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7bc:	00001888 	andeq	r1, r0, r8, lsl #17
     7c0:	00000001 	andeq	r0, r0, r1
		if((node_db->id < 1) || (node_db->id > 25)){
     7c4:	00000001 	andeq	r0, r0, r1
     7c8:	00001888 	andeq	r1, r0, r8, lsl #17
     7cc:	0000188e 	andeq	r1, r0, lr, lsl #17
			strncpy(reason, "Out of Range", 50);
     7d0:	00001890 	muleq	r0, r0, r8
     7d4:	0000195c 	andeq	r1, r0, ip, asr r9
			proceed invalid_node_id;
     7d8:	0000195c 	andeq	r1, r0, ip, asr r9
     7dc:	00001970 	andeq	r1, r0, r0, ror r9
				strncpy(reason, "ID is already in use", 50);
     7e0:	00001970 	andeq	r1, r0, r0, ror r9
		for(int i = 0; i < node_db->index; i++){
     7e4:	000019a4 	andeq	r1, r0, r4, lsr #19
     7e8:	000019a4 	andeq	r1, r0, r4, lsr #19
     7ec:	000019d8 	ldrdeq	r1, [r0], -r8
		proceed menu;
     7f0:	00000001 	andeq	r0, r0, r1
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7f4:	00000001 	andeq	r0, r0, r1
     7f8:	000019d8 	ldrdeq	r1, [r0], -r8
     7fc:	000019fc 	strdeq	r1, [r0], -ip
     800:	000019fc 	strdeq	r1, [r0], -ip
		proceed get_new_node_id;
     804:	00001a34 	andeq	r1, r0, r4, lsr sl
     808:	00000001 	andeq	r0, r0, r1
		if (!clear_node_neighbour_array(node_db)){
     80c:	00000001 	andeq	r0, r0, r1
     810:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error Clearing Node Array", 50);
     814:	00000001 	andeq	r0, r0, r1
     818:	00000001 	andeq	r0, r0, r1
     81c:	00000001 	andeq	r0, r0, r1
			proceed error;
     820:	00001a34 	andeq	r1, r0, r4, lsr sl
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     824:	00001a58 	andeq	r1, r0, r8, asr sl
     828:	00000001 	andeq	r0, r0, r1
		request_packet->gid = node_db->gid;
     82c:	00000001 	andeq	r0, r0, r1
     830:	00001a58 	andeq	r1, r0, r8, asr sl
		request_packet->tpe = DISCOVERY_REQUEST;
     834:	00001a66 	andeq	r1, r0, r6, ror #20
		request_packet->request_number = generate_request_num();
     838:	00001a66 	andeq	r1, r0, r6, ror #20
     83c:	00001a76 	andeq	r1, r0, r6, ror sl
		call sender(request_packet, wait_discovery);
     840:	00001a76 	andeq	r1, r0, r6, ror sl
     844:	00001a92 	muleq	r0, r2, sl
		request_packet->receiver_id=0;
     848:	00000001 	andeq	r0, r0, r1
		call sender(request_packet, wait_discovery);
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
			release;
     858:	00001a92 	muleq	r0, r2, sl
				proceed get_new_node_id;
     85c:	00001aa6 	andeq	r1, r0, r6, lsr #21
				proceed clear_neighbour_array;
     860:	00001aa6 	andeq	r1, r0, r6, lsr #21
				proceed create_proto_start;
     864:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
				proceed start_delete_proto;
     868:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
				proceed start_retrieve_proto;
     86c:	00001ad8 	ldrdeq	r1, [r0], -r8
				proceed display_db;
     870:	00001ad8 	ldrdeq	r1, [r0], -r8
				proceed del_local;
     874:	00001b74 	andeq	r1, r0, r4, ror fp
			if(node_db->id == node_db->nnodes[i]){
     878:	00001b74 	andeq	r1, r0, r4, ror fp
     87c:	00001bc4 	andeq	r1, r0, r4, asr #23
     880:	00001bc4 	andeq	r1, r0, r4, asr #23
				strncpy(reason, "ID is already in use", 50);
     884:	00001c0c 	andeq	r1, r0, ip, lsl #24
     888:	00001c0c 	andeq	r1, r0, ip, lsl #24
				proceed invalid_node_id;
     88c:	00001c5c 	andeq	r1, r0, ip, asr ip
     890:	00000001 	andeq	r0, r0, r1
		for(int i = 0; i < node_db->index; i++){
     894:	00000001 	andeq	r0, r0, r1
		if (discovery_wait_flag == 0){
     898:	00001c5c 	andeq	r1, r0, ip, asr ip
			discovery_wait_flag=1;
     89c:	00001d04 	andeq	r1, r0, r4, lsl #26
     8a0:	00001d04 	andeq	r1, r0, r4, lsl #26
			delay(3000, find_proto_start);
     8a4:	00001d38 	andeq	r1, r0, r8, lsr sp
     8a8:	00001d38 	andeq	r1, r0, r8, lsr sp
		if (discovery_wait_flag == 1){
     8ac:	00001d50 	andeq	r1, r0, r0, asr sp
			discovery_wait_flag=0;
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
			delay(3000, display_neighbour_nodes);
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
     8c0:	00001d50 	andeq	r1, r0, r0, asr sp
     8c4:	00001e8c 	andeq	r1, r0, ip, lsl #29
     8c8:	00001e8c 	andeq	r1, r0, ip, lsl #29
     8cc:	00001eb0 			; <UNDEFINED> instruction: 0x00001eb0
	...
     8d8:	00001f70 	andeq	r1, r0, r0, ror pc
     8dc:	00001f76 	andeq	r1, r0, r6, ror pc
     8e0:	00001f7c 	andeq	r1, r0, ip, ror pc
     8e4:	00001f80 	andeq	r1, r0, r0, lsl #31
     8e8:	00001f88 	andeq	r1, r0, r8, lsl #31
     8ec:	00001fa8 	andeq	r1, r0, r8, lsr #31
	...
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
     900:	00000001 	andeq	r0, r0, r1
		if(node_db->index == 0){
     904:	00000001 	andeq	r0, r0, r1
	...
			proceed menu;
     910:	00001eb0 			; <UNDEFINED> instruction: 0x00001eb0
fsm root {
     914:	00001ec6 	andeq	r1, r0, r6, asr #29
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     918:	00001ec6 	andeq	r1, r0, r6, asr #29
		for (int i=0; i<node_db->index; i++) {
     91c:	00001ee0 	andeq	r1, r0, r0, ror #29
     920:	00001ee0 	andeq	r1, r0, r0, ror #29
     924:	00001eee 	andeq	r1, r0, lr, ror #29
		proceed menu;
     928:	00001ef0 	strdeq	r1, [r0], -r0
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     92c:	00001f3c 	andeq	r1, r0, ip, lsr pc
     930:	00001f3c 	andeq	r1, r0, ip, lsr pc
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     934:	00001fc8 	andeq	r1, r0, r8, asr #31
     938:	00001fc8 	andeq	r1, r0, r8, asr #31
     93c:	00002038 	andeq	r2, r0, r8, lsr r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     940:	00002038 	andeq	r2, r0, r8, lsr r0
     944:	000020f8 	strdeq	r2, [r0], -r8
			strncpy(reason, "Error: improper ID", 50);
     948:	00000001 	andeq	r0, r0, r1
     94c:	00000001 	andeq	r0, r0, r1
     950:	000020f8 	strdeq	r2, [r0], -r8
			proceed error;
     954:	0000211c 	andeq	r2, r0, ip, lsl r1
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     958:	0000211c 	andeq	r2, r0, ip, lsl r1
     95c:	0000219c 	muleq	r0, ip, r1
		ser_in(get_record_to_create, user_provided_record, 20);
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
     968:	00000001 	andeq	r0, r0, r1
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     96c:	00000001 	andeq	r0, r0, r1
		create_message->gid = node_db->gid;
     970:	0000219c 	muleq	r0, ip, r1
     974:	00002258 	andeq	r2, r0, r8, asr r2
     978:	00000001 	andeq	r0, r0, r1
		create_message->tpe = CREATE_RECORD;
     97c:	00000001 	andeq	r0, r0, r1
		create_message->request_number = generate_request_num();
     980:	00000001 	andeq	r0, r0, r1
		create_message->sender_id = node_db->id;
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
		strncpy(create_message->record, user_provided_record, 20);
     990:	00002258 	andeq	r2, r0, r8, asr r2
		create_message->receiver_id = user_provided_receiver_id;
     994:	00002284 	andeq	r2, r0, r4, lsl #5
		strncpy(create_message->record, user_provided_record, 20);
     998:	00002284 	andeq	r2, r0, r4, lsl #5
		response_checker[0] = create_message->request_number;
     99c:	000022e4 	andeq	r2, r0, r4, ror #5
		call sender(create_message, wait);
     9a0:	00000001 	andeq	r0, r0, r1
		response_checker[1] = create_message->tpe;
     9a4:	00000001 	andeq	r0, r0, r1
     9a8:	00000001 	andeq	r0, r0, r1
		call sender(create_message, wait);
     9ac:	00000001 	andeq	r0, r0, r1
     9b0:	00000001 	andeq	r0, r0, r1
     9b4:	00000001 	andeq	r0, r0, r1
     9b8:	00000001 	andeq	r0, r0, r1
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     9bc:	00000001 	andeq	r0, r0, r1
     9c0:	000022e4 	andeq	r2, r0, r4, ror #5
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     9c4:	0000234c 	andeq	r2, r0, ip, asr #6
     9c8:	0000234c 	andeq	r2, r0, ip, asr #6
     9cc:	0000239c 	muleq	r0, ip, r3
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9d0:	0000239c 	muleq	r0, ip, r3
     9d4:	00002438 	andeq	r2, r0, r8, lsr r4
			strncpy(reason, "Error: improper node ID", 50);
     9d8:	00002438 	andeq	r2, r0, r8, lsr r4
     9dc:	00002478 	andeq	r2, r0, r8, ror r4
			proceed error;
     9e0:	00002478 	andeq	r2, r0, r8, ror r4
     9e4:	000024ac 	andeq	r2, r0, ip, lsr #9
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9e8:	000024ac 	andeq	r2, r0, ip, lsr #9
     9ec:	000024e8 	andeq	r2, r0, r8, ror #9
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9f0:	00000001 	andeq	r0, r0, r1
     9f4:	00000001 	andeq	r0, r0, r1
     9f8:	000024e8 	andeq	r2, r0, r8, ror #9
		if (us_pr_in < 0 || us_pr_in > 40){
     9fc:	000024ea 	andeq	r2, r0, sl, ror #9
	...
			strncpy(reason, "Error: invalid index", 50);
     a08:	000024ea 	andeq	r2, r0, sl, ror #9
			proceed error;
     a0c:	000024ec 	andeq	r2, r0, ip, ror #9
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a10:	000024ec 	andeq	r2, r0, ip, ror #9
     a14:	000024ee 	andeq	r2, r0, lr, ror #9
     a18:	000024ee 	andeq	r2, r0, lr, ror #9
		delete_record->gid = node_db->gid;
     a1c:	000024f0 	strdeq	r2, [r0], -r0
		delete_record->tpe = DELETE_RECORD;
     a20:	000024f0 	strdeq	r2, [r0], -r0
		delete_record->request_number = generate_request_num();
     a24:	00002534 	andeq	r2, r0, r4, lsr r5
	...
		delete_record->sender_id = node_db->id;
     a30:	00000001 	andeq	r0, r0, r1
		delete_record->receiver_id = user_provided_receiver_id;
     a34:	00000001 	andeq	r0, r0, r1
		delete_record->record_index = us_pr_in;
     a38:	00000001 	andeq	r0, r0, r1
     a3c:	00000001 	andeq	r0, r0, r1
		response_checker[0] = delete_record->request_number;
     a40:	00000001 	andeq	r0, r0, r1
		call sender(delete_record, wait);
     a44:	00000001 	andeq	r0, r0, r1
     a48:	00000001 	andeq	r0, r0, r1
     a4c:	00000001 	andeq	r0, r0, r1
	...
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a58:	00000001 	andeq	r0, r0, r1
     a5c:	00000001 	andeq	r0, r0, r1
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a60:	00000001 	andeq	r0, r0, r1
     a64:	00000001 	andeq	r0, r0, r1
	...
		if (get_id < 1 || get_id > 25){
     a70:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: improper node ID", 50);
     a74:	00000001 	andeq	r0, r0, r1
     a78:	00000001 	andeq	r0, r0, r1
     a7c:	00000001 	andeq	r0, r0, r1
			proceed error;
     a80:	00000001 	andeq	r0, r0, r1
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a84:	00000001 	andeq	r0, r0, r1
     a88:	00000001 	andeq	r0, r0, r1
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a8c:	00000001 	andeq	r0, r0, r1
	...
		if (beg_for_index < 0 || beg_for_index > 40){
     a98:	00000001 	andeq	r0, r0, r1
     a9c:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: invalid index", 50);
     aa0:	00000001 	andeq	r0, r0, r1
     aa4:	00000001 	andeq	r0, r0, r1
	...
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ab0:	00000001 	andeq	r0, r0, r1
     ab4:	00000001 	andeq	r0, r0, r1
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	00000001 	andeq	r0, r0, r1
     abc:	00000001 	andeq	r0, r0, r1
     ac0:	00000001 	andeq	r0, r0, r1
		retrieve_record->gid = node_db->gid;
     ac4:	00000001 	andeq	r0, r0, r1
	...
		retrieve_record->request_number = generate_request_num();
     ad0:	00000001 	andeq	r0, r0, r1
		retrieve_record->receiver_id = get_id;
     ad4:	00000001 	andeq	r0, r0, r1
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ad8:	00000001 	andeq	r0, r0, r1
		retrieve_record->record_index = beg_for_index;
     adc:	00000001 	andeq	r0, r0, r1
	...
		response_checker[0] = retrieve_record->request_number;
     ae8:	00002540 	andeq	r2, r0, r0, asr #10
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     aec:	00002544 	andeq	r2, r0, r4, asr #10
		response_checker[1] = retrieve_record->tpe;
     af0:	0000254a 	andeq	r2, r0, sl, asr #10
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     af4:	0000254c 	andeq	r2, r0, ip, asr #10
     af8:	0000255a 	andeq	r2, r0, sl, asr r5
		call sender(retrieve_record, wait);
     afc:	0000255a 	andeq	r2, r0, sl, asr r5
     b00:	0000255c 	andeq	r2, r0, ip, asr r5
     b04:	0000255e 	andeq	r2, r0, lr, asr r5
	...
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     b10:	00002546 	andeq	r2, r0, r6, asr #10
     b14:	00002548 	andeq	r2, r0, r8, asr #10
		if(node_db->data_base.item_count != 0){
     b18:	0000255e 	andeq	r2, r0, lr, asr r5
     b1c:	00002560 	andeq	r2, r0, r0, ror #10
	...
		ser_out(loop_through_data, "\r\n");
     b28:	00002548 	andeq	r2, r0, r8, asr #10
		proceed menu;
     b2c:	0000254a 	andeq	r2, r0, sl, asr #10
		delete_all(node_db);
     b30:	0000254c 	andeq	r2, r0, ip, asr #10
     b34:	0000254e 	andeq	r2, r0, lr, asr #10
		proceed menu;
     b38:	00002554 	andeq	r2, r0, r4, asr r5
     b3c:	00002554 	andeq	r2, r0, r4, asr r5
	...
		when(&response_flag, menu);
     b48:	00002578 	andeq	r2, r0, r8, ror r5
     b4c:	00002580 	andeq	r2, r0, r0, lsl #11
		release;
     b50:	0000258a 	andeq	r2, r0, sl, lsl #11
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b54:	0000258a 	andeq	r2, r0, sl, lsl #11
     b58:	0000258e 	andeq	r2, r0, lr, lsl #11
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b5c:	00002590 	muleq	r0, r0, r5
	...
     b68:	00002590 	muleq	r0, r0, r5
		for (int i=0; i<node_db->index; i++) {
     b6c:	00002590 	muleq	r0, r0, r5
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b70:	00002592 	muleq	r0, r2, r5
     b74:	00002594 	muleq	r0, r4, r5
	...
     b80:	000025a0 	andeq	r2, r0, r0, lsr #11
     b84:	000025a2 	andeq	r2, r0, r2, lsr #11
     b88:	000025a4 	andeq	r2, r0, r4, lsr #11
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b8c:	000025a8 	andeq	r2, r0, r8, lsr #11
	...
     b98:	000025c0 	andeq	r2, r0, r0, asr #11
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b9c:	000025c2 	andeq	r2, r0, r2, asr #11
     ba0:	000025c6 	andeq	r2, r0, r6, asr #11
		ser_out(timeout, "\r\nFailed to reach the destination");
     ba4:	000025c8 	andeq	r2, r0, r8, asr #11
     ba8:	000025ce 	andeq	r2, r0, lr, asr #11
		proceed menu;
     bac:	000025de 	ldrdeq	r2, [r0], -lr
	...
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     bb8:	000025c0 	andeq	r2, r0, r0, asr #11
		proceed menu;
     bbc:	000025c2 	andeq	r2, r0, r2, asr #11
}
     bc0:	000025c6 	andeq	r2, r0, r6, asr #11
     bc4:	000025c8 	andeq	r2, r0, r8, asr #11
     bc8:	000025ce 	andeq	r2, r0, lr, asr #11
     bcc:	000025ce 	andeq	r2, r0, lr, asr #11
     bd0:	000025d0 	ldrdeq	r2, [r0], -r0
     bd4:	000025d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
     be0:	00002626 	andeq	r2, r0, r6, lsr #12
     be4:	0000262a 	andeq	r2, r0, sl, lsr #12
     be8:	0000262c 	andeq	r2, r0, ip, lsr #12
     bec:	0000262e 	andeq	r2, r0, lr, lsr #12
	...
     bf8:	00002632 	andeq	r2, r0, r2, lsr r6
     bfc:	00002632 	andeq	r2, r0, r2, lsr r6
     c00:	00002634 	andeq	r2, r0, r4, lsr r6
     c04:	00002636 	andeq	r2, r0, r6, lsr r6
	...
     c10:	00000001 	andeq	r0, r0, r1
     c14:	00000001 	andeq	r0, r0, r1
     c18:	00000001 	andeq	r0, r0, r1
     c1c:	00000001 	andeq	r0, r0, r1
	...
     c28:	00000001 	andeq	r0, r0, r1
     c2c:	00000001 	andeq	r0, r0, r1
     c30:	00000001 	andeq	r0, r0, r1
static void devinit_uart (int devnum) {
     c34:	00000001 	andeq	r0, r0, r1
	...
void udelay (volatile word n) {
     c40:	00000001 	andeq	r0, r0, r1
     c44:	00000001 	andeq	r0, r0, r1
	while (n) {
     c48:	00000001 	andeq	r0, r0, r1
     c4c:	00000001 	andeq	r0, r0, r1
	...
	while (n--);
     c58:	00000001 	andeq	r0, r0, r1
     c5c:	00000001 	andeq	r0, r0, r1
		n--;
     c60:	00000001 	andeq	r0, r0, r1
     c64:	00000001 	andeq	r0, r0, r1
	...
void mdelay (volatile word n) {
     c70:	0000253c 	andeq	r2, r0, ip, lsr r5
	while (n) {
     c74:	00002570 	andeq	r2, r0, r0, ror r5
     c78:	00002570 	andeq	r2, r0, r0, ror r5
}
     c7c:	000025a0 	andeq	r2, r0, r0, lsr #11
		udelay (999);
     c80:	000025a0 	andeq	r2, r0, r0, lsr #11
     c84:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
		n--;
     c88:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
     c8c:	0000260c 	andeq	r2, r0, ip, lsl #12
     c90:	0000260c 	andeq	r2, r0, ip, lsl #12
     c94:	0000264c 	andeq	r2, r0, ip, asr #12
void __pi_ondomain (lword d) {
     c98:	0000264c 	andeq	r2, r0, ip, asr #12
     c9c:	00002670 	andeq	r2, r0, r0, ror r6
		if (__pi_systat.effpdm > 1)
     ca0:	00002670 	andeq	r2, r0, r0, ror r6
     ca4:	00002684 	andeq	r2, r0, r4, lsl #13
			__pi_systat.effpdm = 1;
     ca8:	00002684 	andeq	r2, r0, r4, lsl #13
	PRCMPowerDomainOn (d);
     cac:	00002698 	muleq	r0, r8, r6
     cb0:	00000001 	andeq	r0, r0, r1
     cb4:	00000001 	andeq	r0, r0, r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     cb8:	00000001 	andeq	r0, r0, r1
     cbc:	00000001 	andeq	r0, r0, r1
     cc0:	00000001 	andeq	r0, r0, r1
	__pi_systat.ondmns |= d;
     cc4:	00000001 	andeq	r0, r0, r1
     cc8:	00000001 	andeq	r0, r0, r1
}
     ccc:	00000001 	andeq	r0, r0, r1
     cd0:	00000001 	andeq	r0, r0, r1
void __pi_offdomain (lword d) {
     cd4:	00000001 	andeq	r0, r0, r1
     cd8:	00000001 	andeq	r0, r0, r1
	PRCMPowerDomainOff (d);
     cdc:	00000001 	andeq	r0, r0, r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ce0:	00000001 	andeq	r0, r0, r1
     ce4:	00000001 	andeq	r0, r0, r1
	...
	if (d & PRCM_DOMAIN_RFCORE) {
     cf0:	00002698 	muleq	r0, r8, r6
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cf4:	00002704 	andeq	r2, r0, r4, lsl #14
	...
			__pi_systat.effpdm = __pi_systat.reqpdm;
     d00:	00002704 	andeq	r2, r0, r4, lsl #14
	__pi_systat.ondmns &= ~d;
     d04:	0000277c 	andeq	r2, r0, ip, ror r7
	...
}
     d10:	0000277c 	andeq	r2, r0, ip, ror r7
void __pi_syserror (word ec, const char *m) {
     d14:	000027d0 	ldrdeq	r2, [r0], -r0
	...
  __ASM volatile ("cpsid i" : : : "memory");
     d20:	000027d0 	ldrdeq	r2, [r0], -r0
     d24:	00002830 	andeq	r2, r0, r0, lsr r8
	...
		all_leds_blink;
     d30:	00002a56 	andeq	r2, r0, r6, asr sl
     d34:	00002a58 	andeq	r2, r0, r8, asr sl
     d38:	00002a6c 	andeq	r2, r0, ip, ror #20
     d3c:	00002a6e 	andeq	r2, r0, lr, ror #20
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d40:	00002a70 	andeq	r2, r0, r0, ror sl
     d44:	00002a72 	andeq	r2, r0, r2, ror sl
	...
     d50:	00002ae0 	andeq	r2, r0, r0, ror #21
     d54:	00002ae6 	andeq	r2, r0, r6, ror #21
	while (1) {
     d58:	00002aea 	andeq	r2, r0, sl, ror #21
     d5c:	00002aec 	andeq	r2, r0, ip, ror #21
	...
void tci_run_delay_timer () {
     d68:	00002b0e 	andeq	r2, r0, lr, lsl #22
	setdel = __pi_mintk - __pi_old;
     d6c:	00002b14 	andeq	r2, r0, r4, lsl fp
     d70:	00002b16 	andeq	r2, r0, r6, lsl fp
     d74:	00002b18 	andeq	r2, r0, r8, lsl fp
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d80:	00002b1c 	andeq	r2, r0, ip, lsl fp
     d84:	00002b28 	andeq	r2, r0, r8, lsr #22
     d88:	00002b28 	andeq	r2, r0, r8, lsr #22
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d8c:	00002b2c 	andeq	r2, r0, ip, lsr #22
	sti_tim;
     d90:	00002b2e 	andeq	r2, r0, lr, lsr #22
}
     d94:	00002b52 	andeq	r2, r0, r2, asr fp
	...
     da0:	00002b2c 	andeq	r2, r0, ip, lsr #22
     da4:	00002b2e 	andeq	r2, r0, lr, lsr #22
	cli_aux;
     da8:	00002b52 	andeq	r2, r0, r2, asr fp
     dac:	00002b8c 	andeq	r2, r0, ip, lsl #23
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db0:	00002b8e 	andeq	r2, r0, lr, lsl #23
     db4:	00002ba0 	andeq	r2, r0, r0, lsr #23
	...
	sti_aux;
     dc0:	00002c60 	andeq	r2, r0, r0, ror #24
}
     dc4:	00002c60 	andeq	r2, r0, r0, ror #24
     dc8:	00002c64 	andeq	r2, r0, r4, ror #24
     dcc:	00002c7e 	andeq	r2, r0, lr, ror ip
void AONRTCIntHandler () {
     dd0:	00002c80 	andeq	r2, r0, r0, lsl #25
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     dd4:	00002c82 	andeq	r2, r0, r2, lsl #25
     dd8:	00002c84 	andeq	r2, r0, r4, lsl #25
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     ddc:	00002c86 	andeq	r2, r0, r6, lsl #25
		if (__pi_utims [0] == 0)
     de0:	00002c8a 	andeq	r2, r0, sl, lsl #25
     de4:	00002c94 	muleq	r0, r4, ip
	...
			(*(__pi_utims [0]))--;
     df0:	00002da6 	andeq	r2, r0, r6, lsr #27
		if (__pi_utims [1] == 0)
     df4:	00002daa 	andeq	r2, r0, sl, lsr #27
		if (*(__pi_utims [1])) {
     df8:	00002dc6 	andeq	r2, r0, r6, asr #27
			aux_timer_inactive = 0;
     dfc:	00002dca 	andeq	r2, r0, sl, asr #27
	...
		if (*(__pi_utims [2])) {
     e08:	00002daa 	andeq	r2, r0, sl, lsr #27
			(*(__pi_utims [2]))--;
     e0c:	00002dc6 	andeq	r2, r0, r6, asr #27
		if (__pi_utims [3] != 0) {
     e10:	00002dca 	andeq	r2, r0, sl, asr #27
			if (*(__pi_utims [3])) {
     e14:	00002dd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
	if (__pi_systat.ledsts) {
     e20:	00002f3e 	andeq	r2, r0, lr, lsr pc
     e24:	00002f40 	andeq	r2, r0, r0, asr #30
		if (__pi_systat.ledblc++ == 0) {
     e28:	00002f42 	andeq	r2, r0, r2, asr #30
     e2c:	00002f46 	andeq	r2, r0, r6, asr #30
	...
			if (__pi_systat.ledblk) {
     e38:	00002f40 	andeq	r2, r0, r0, asr #30
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e3c:	00002f42 	andeq	r2, r0, r2, asr #30
     e40:	00002f46 	andeq	r2, r0, r6, asr #30
				if (__pi_systat.ledsts & 0x2)
     e44:	00002f6c 	andeq	r2, r0, ip, ror #30
	...
				if (__pi_systat.ledsts & 0x4)
     e50:	00002fb4 			; <UNDEFINED> instruction: 0x00002fb4
				__pi_systat.ledblk = 0;
     e54:	00002fb6 			; <UNDEFINED> instruction: 0x00002fb6
     e58:	00002fba 			; <UNDEFINED> instruction: 0x00002fba
			if (__pi_systat.fstblk)
     e5c:	00002fc0 	andeq	r2, r0, r0, asr #31
     e60:	00002fc2 	andeq	r2, r0, r2, asr #31
				__pi_systat.ledblc = 200;
     e64:	0000300e 	andeq	r3, r0, lr
	if (events & AON_RTC_EVFLAGS_CH0) {
     e68:	00003010 	andeq	r3, r0, r0, lsl r0
		cli_tim;
     e6c:	00003014 	andeq	r3, r0, r4, lsl r0
		__pi_new += setdel;
     e70:	00003016 	andeq	r3, r0, r6, lsl r0
     e74:	00003026 	andeq	r3, r0, r6, lsr #32
		setdel = 0;
     e78:	0000302a 	andeq	r3, r0, sl, lsr #32
		RISE_N_SHINE;
     e7c:	0000302e 	andeq	r3, r0, lr, lsr #32
		__pi_new += setdel;
     e80:	00003060 	andeq	r3, r0, r0, rrx
		RISE_N_SHINE;
     e84:	00003064 	andeq	r3, r0, r4, rrx
	...
		aux_timer_inactive = 1;
     e90:	0000306a 	andeq	r3, r0, sl, rrx
				if (__pi_systat.ledsts & 0x1)
     e94:	0000306c 	andeq	r3, r0, ip, rrx
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e98:	0000306e 	andeq	r3, r0, lr, rrx
     e9c:	0000309c 	muleq	r0, ip, r0
	...
     ea8:	00002830 	andeq	r2, r0, r0, lsr r8
				if (__pi_systat.ledsts & 0x8)
     eac:	00002850 	andeq	r2, r0, r0, asr r8
				__pi_systat.ledblk = 1;
     eb0:	00002850 	andeq	r2, r0, r0, asr r8
     eb4:	000029e0 	andeq	r2, r0, r0, ror #19
		if (aux_timer_inactive) {
     eb8:	000029e0 	andeq	r2, r0, r0, ror #19
			cli_aux;
     ebc:	00002a28 	andeq	r2, r0, r8, lsr #20
     ec0:	00002a28 	andeq	r2, r0, r8, lsr #20
     ec4:	00002a4c 	andeq	r2, r0, ip, asr #20
     ec8:	00002a4c 	andeq	r2, r0, ip, asr #20
     ecc:	00002aa8 	andeq	r2, r0, r8, lsr #21
     ed0:	00002aa8 	andeq	r2, r0, r8, lsr #21
     ed4:	00002ae0 	andeq	r2, r0, r0, ror #21
     ed8:	00002ae0 	andeq	r2, r0, r0, ror #21
     edc:	00002c60 	andeq	r2, r0, r0, ror #24
     ee0:	00002c60 	andeq	r2, r0, r0, ror #24
word tci_update_delay_ticks (Boolean force) {
     ee4:	00002d30 	andeq	r2, r0, r0, lsr sp
	cli_tim;
     ee8:	00002d30 	andeq	r2, r0, r0, lsr sp
     eec:	00002f20 	andeq	r2, r0, r0, lsr #30
	if (setdel) {
     ef0:	00002f20 	andeq	r2, r0, r0, lsr #30
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ef4:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ef8:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     efc:	00003104 	andeq	r3, r0, r4, lsl #2
	...
				AON_RTC_O_CH0CMP)) - gettav ());
     f08:	00003104 	andeq	r3, r0, r4, lsl #2
	return NO;
     f0c:	00003128 	andeq	r3, r0, r8, lsr #2
			setdel = 0;
     f10:	00003128 	andeq	r3, r0, r8, lsr #2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f14:	0000314c 	andeq	r3, r0, ip, asr #2
     f18:	0000314c 	andeq	r3, r0, ip, asr #2
}
     f1c:	00003154 	andeq	r3, r0, r4, asr r1
		sti_tim;
     f20:	00003154 	andeq	r3, r0, r4, asr r1
		return YES;
     f24:	00003158 	andeq	r3, r0, r8, asr r1
     f28:	00003158 	andeq	r3, r0, r8, asr r1
     f2c:	0000315c 	andeq	r3, r0, ip, asr r1
     f30:	0000315c 	andeq	r3, r0, ip, asr r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f34:	000031a4 	andeq	r3, r0, r4, lsr #3
	...
	UARTDisable (UART0_BASE);
     f40:	000031b2 			; <UNDEFINED> instruction: 0x000031b2
	UARTConfigSetExpClk (UART0_BASE,
     f44:	000031b2 			; <UNDEFINED> instruction: 0x000031b2
     f48:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
     f4c:	00003214 	andeq	r3, r0, r4, lsl r2
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f58:	000031a4 	andeq	r3, r0, r4, lsr #3
     f5c:	00003214 	andeq	r3, r0, r4, lsl r2
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f68:	00003228 	andeq	r3, r0, r8, lsr #4
	urates [0] = rate;
     f6c:	0000330c 	andeq	r3, r0, ip, lsl #6
}
     f70:	00003312 	andeq	r3, r0, r2, lsl r3
     f74:	00003316 	andeq	r3, r0, r6, lsl r3
     f78:	0000331c 	andeq	r3, r0, ip, lsl r3
     f7c:	00003330 	andeq	r3, r0, r0, lsr r3
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f88:	00003214 	andeq	r3, r0, r4, lsl r2
     f8c:	00003330 	andeq	r3, r0, r0, lsr r3
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f98:	0000335c 	andeq	r3, r0, ip, asr r3
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f9c:	0000335e 	andeq	r3, r0, lr, asr r3
     fa0:	0000342c 	andeq	r3, r0, ip, lsr #8
	__pi_uart_setrate (urates [0], __pi_uart);
     fa4:	00003450 	andeq	r3, r0, r0, asr r4
     fa8:	00003452 	andeq	r3, r0, r2, asr r4
     fac:	0000349a 	muleq	r0, sl, r4
     fb0:	000034c4 	andeq	r3, r0, r4, asr #9
     fb4:	000034c6 	andeq	r3, r0, r6, asr #9
	...
	switch (operation) {
     fc0:	0000335e 	andeq	r3, r0, lr, asr r3
static int ioreq_uart_a (int operation, char *buf, int len) {
     fc4:	00003360 	andeq	r3, r0, r0, ror #6
     fc8:	00003402 	andeq	r3, r0, r2, lsl #8
     fcc:	0000342c 	andeq	r3, r0, ip, lsr #8
     fd0:	00003450 	andeq	r3, r0, r0, asr r4
     fd4:	00003452 	andeq	r3, r0, r2, asr r4
	...
			while (len && uart_a_char_available) {
     fe0:	0000339e 	muleq	r0, lr, r3
     fe4:	000033a6 	andeq	r3, r0, r6, lsr #7
     fe8:	0000354a 	andeq	r3, r0, sl, asr #10
			if (len != operation) {
     fec:	00003556 	andeq	r3, r0, r6, asr r5
	...
			uart_a_disable_int;
     ff8:	000034a4 	andeq	r3, r0, r4, lsr #9
			if (uart_a_char_available) {
     ffc:	000034c4 	andeq	r3, r0, r4, asr #9
				*buf++ = uart_a_read;
    1000:	000034c6 	andeq	r3, r0, r6, asr #9
			uart_a_disable_int;
    1004:	0000350a 	andeq	r3, r0, sl, lsl #10
	...
			if (uart_a_char_available) {
    1010:	00003330 	andeq	r3, r0, r0, lsr r3
				uart_a_enable_int;
    1014:	00003350 	andeq	r3, r0, r0, asr r3
    1018:	00003350 	andeq	r3, r0, r0, asr r3
				goto Redo_rx;
    101c:	00003580 	andeq	r3, r0, r0, lsl #11
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    1020:	00003580 	andeq	r3, r0, r0, lsl #11
    1024:	000035d0 	ldrdeq	r3, [r0], -r0
	...
				uart_a_write (*buf);
    1030:	000035e4 	andeq	r3, r0, r4, ror #11
    1034:	000035e8 	andeq	r3, r0, r8, ror #11
			while (len && uart_a_room_in_tx) {
    1038:	000038c2 	andeq	r3, r0, r2, asr #17
    103c:	0000390a 	andeq	r3, r0, sl, lsl #18
	...
			uart_a_disable_int;
    1048:	000035e8 	andeq	r3, r0, r8, ror #11
    104c:	000035ee 	andeq	r3, r0, lr, ror #11
			if (uart_a_room_in_tx) {
    1050:	00003626 	andeq	r3, r0, r6, lsr #12
    1054:	00003692 	muleq	r0, r2, r6
				uart_a_enable_int;
    1058:	00003926 	andeq	r3, r0, r6, lsr #18
    105c:	00003946 	andeq	r3, r0, r6, asr #18
	...
				uart_a_write (*buf);
    1068:	0000374a 	andeq	r3, r0, sl, asr #14
    106c:	000037c4 	andeq	r3, r0, r4, asr #15
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1070:	0000394e 	andeq	r3, r0, lr, asr #18
    1074:	00003956 	andeq	r3, r0, r6, asr r9
	...
			uart_a_enable_int;
    1080:	000037dc 	ldrdeq	r3, [r0], -ip
			return 0;
    1084:	00003832 	andeq	r3, r0, r2, lsr r8
			if (len == UART_CNTRL_SETRATE) {
    1088:	000038a8 	andeq	r3, r0, r8, lsr #17
				if (__pi_uart_setrate (*((word*)buf),
    108c:	000038c2 	andeq	r3, r0, r2, asr #17
	...
				syserror (EREQPAR, "uar");
    1098:	00003838 	andeq	r3, r0, r8, lsr r8
			syserror (ENOOPER, "uai");
    109c:	000038a8 	andeq	r3, r0, r8, lsr #17
			if (len == UART_CNTRL_GETRATE) {
    10a0:	0000390a 	andeq	r3, r0, sl, lsl #18
				return 1;
    10a4:	00003912 	andeq	r3, r0, r2, lsl r9
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    10a8:	00003956 	andeq	r3, r0, r6, asr r9
			syserror (ENOOPER, "uai");
    10ac:	00003960 	andeq	r3, r0, r0, ror #18
	...
    10b8:	000035d0 	ldrdeq	r3, [r0], -r0
    10bc:	00003960 	andeq	r3, r0, r0, ror #18
	...
    10c8:	00003960 	andeq	r3, r0, r0, ror #18
    10cc:	00003988 	andeq	r3, r0, r8, lsl #19
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    10d0:	00000001 	andeq	r0, r0, r1
void UART0IntHandler () {
    10d4:	00000001 	andeq	r0, r0, r1
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10e0:	00003988 	andeq	r3, r0, r8, lsl #19
    10e4:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
	...
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10f0:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
		RISE_N_SHINE;
    10f4:	000039d8 	ldrdeq	r3, [r0], -r8
    10f8:	000039d8 	ldrdeq	r3, [r0], -r8
		i_trigger (devevent (UART_A, READ));
    10fc:	000039f0 	strdeq	r3, [r0], -r0
	...
    1108:	000039f0 	strdeq	r3, [r0], -r0
    110c:	000039f8 	strdeq	r3, [r0], -r8
    1110:	00000001 	andeq	r0, r0, r1
    1114:	00000001 	andeq	r0, r0, r1
    1118:	000039f8 	strdeq	r3, [r0], -r8
    111c:	00003a00 	andeq	r3, r0, r0, lsl #20
    1120:	00000001 	andeq	r0, r0, r1
    1124:	00000001 	andeq	r0, r0, r1
    1128:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    112c:	00000001 	andeq	r0, r0, r1
	...
		i_trigger (devevent (UART_A, WRITE));
    1138:	00003a62 	andeq	r3, r0, r2, ror #20
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    113c:	00003a72 	andeq	r3, r0, r2, ror sl
    1140:	00003a78 	andeq	r3, r0, r8, ror sl
		RISE_N_SHINE;
    1144:	00003a7a 	andeq	r3, r0, sl, ror sl
	...
		i_trigger (devevent (UART_A, WRITE));
    1150:	00003a00 	andeq	r3, r0, r0, lsl #20
    1154:	00003a5c 	andeq	r3, r0, ip, asr sl
    1158:	00003a5c 	andeq	r3, r0, ip, asr sl
    115c:	00003a88 	andeq	r3, r0, r8, lsl #21
    1160:	00000001 	andeq	r0, r0, r1
    1164:	00000001 	andeq	r0, r0, r1
    1168:	00003a88 	andeq	r3, r0, r8, lsl #21
    116c:	00003aa0 	andeq	r3, r0, r0, lsr #21
    1170:	00003aa0 	andeq	r3, r0, r0, lsr #21
    1174:	00003b00 	andeq	r3, r0, r0, lsl #22
    1178:	00003b00 	andeq	r3, r0, r0, lsl #22
}
    117c:	00003b34 	andeq	r3, r0, r4, lsr fp
    1180:	00000001 	andeq	r0, r0, r1
    1184:	00000001 	andeq	r0, r0, r1
    1188:	00000001 	andeq	r0, r0, r1
    118c:	00000001 	andeq	r0, r0, r1
void __buttons_setirq (int val) {
    1190:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1194:	00000001 	andeq	r0, r0, r1
    1198:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    119c:	00000001 	andeq	r0, r0, r1
	...
		bn = BUTTON_GPIO (__button_list [i]);
    11a8:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11ac:	00000001 	andeq	r0, r0, r1
    11b0:	00003b34 	andeq	r3, r0, r4, lsr fp
    11b4:	00003b5c 	andeq	r3, r0, ip, asr fp
    11b8:	00003b5c 	andeq	r3, r0, ip, asr fp
    11bc:	00003ba8 	andeq	r3, r0, r8, lsr #23
    11c0:	00003ba8 	andeq	r3, r0, r8, lsr #23
}
    11c4:	00003cf8 	strdeq	r3, [r0], -r8
    11c8:	00003cf8 	strdeq	r3, [r0], -r8
    11cc:	00003e10 	andeq	r3, r0, r0, lsl lr
    11d0:	00003e10 	andeq	r3, r0, r0, lsl lr
void __pinlist_setirq (int val) {
    11d4:	00003e30 	andeq	r3, r0, r0, lsr lr
	for (i = 0; i < N_PINLIST; i++) {
    11d8:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11dc:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11e0:	00003e30 	andeq	r3, r0, r0, lsr lr
	for (i = 0; i < N_PINLIST; i++) {
    11e4:	00003e4c 	andeq	r3, r0, ip, asr #28
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11f0:	00003e4c 	andeq	r3, r0, ip, asr #28
    11f4:	00003f20 	andeq	r3, r0, r0, lsr #30
    11f8:	00003f20 	andeq	r3, r0, r0, lsr #30
	for (i = 0; i < N_PINLIST; i++) {
    11fc:	00003fc4 	andeq	r3, r0, r4, asr #31
	...
}
    1208:	00003fd2 	ldrdeq	r3, [r0], -r2
    120c:	00003fd4 	ldrdeq	r3, [r0], -r4
void GPIOIntHandler () {
    1210:	00003fd8 	ldrdeq	r3, [r0], -r8
if (buttons_int) {
    1214:	00003fdc 	ldrdeq	r3, [r0], -ip
	...
	buttons_disable ();
    1220:	000042e0 	andeq	r4, r0, r0, ror #5
	i_trigger ((aword)&__button_list);
    1224:	000042e2 	andeq	r4, r0, r2, ror #5
    1228:	000042e4 	andeq	r4, r0, r4, ror #5
    122c:	000042e6 	andeq	r4, r0, r6, ror #5
	...
    1238:	00003fc4 	andeq	r3, r0, r4, asr #31
    123c:	00004040 	andeq	r4, r0, r0, asr #32
    1240:	00004040 	andeq	r4, r0, r0, asr #32
    1244:	000040ec 	andeq	r4, r0, ip, ror #1
    1248:	000040ec 	andeq	r4, r0, ip, ror #1
    124c:	00004148 	andeq	r4, r0, r8, asr #2
	RISE_N_SHINE;
    1250:	00004148 	andeq	r4, r0, r8, asr #2
    1254:	00004160 	andeq	r4, r0, r0, ror #2
    1258:	00000001 	andeq	r0, r0, r1
if (pin_sensor_int) {
    125c:	00000001 	andeq	r0, r0, r1
    1260:	00004160 	andeq	r4, r0, r0, ror #2
	i_trigger ((aword)(&__input_pins));
    1264:	00004170 	andeq	r4, r0, r0, ror r1
    1268:	00004170 	andeq	r4, r0, r0, ror r1
    126c:	00004184 	andeq	r4, r0, r4, lsl #3
    1270:	00004184 	andeq	r4, r0, r4, lsl #3
    1274:	000041e8 	andeq	r4, r0, r8, ror #3
    1278:	000041e8 	andeq	r4, r0, r8, ror #3
    127c:	000041fc 	strdeq	r4, [r0], -ip
    1280:	000041fc 	strdeq	r4, [r0], -ip
    1284:	00004210 	andeq	r4, r0, r0, lsl r2
    1288:	00004210 	andeq	r4, r0, r0, lsl r2
    128c:	00004224 	andeq	r4, r0, r4, lsr #4
	__pinsen_disable_and_clear;
    1290:	00004224 	andeq	r4, r0, r4, lsr #4
	RISE_N_SHINE;
    1294:	0000424c 	andeq	r4, r0, ip, asr #4
    1298:	0000424c 	andeq	r4, r0, ip, asr #4
    129c:	0000425c 	andeq	r4, r0, ip, asr r2
}
    12a0:	0000425c 	andeq	r4, r0, ip, asr r2
    12a4:	00004288 	andeq	r4, r0, r8, lsl #5
    12a8:	00004288 	andeq	r4, r0, r8, lsl #5
    12ac:	0000429c 	muleq	r0, ip, r2
    12b0:	0000429c 	muleq	r0, ip, r2
void system_init () {
    12b4:	000042b0 			; <UNDEFINED> instruction: 0x000042b0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12b8:	000042b0 			; <UNDEFINED> instruction: 0x000042b0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    12bc:	000043c0 	andeq	r4, r0, r0, asr #7
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12c0:	000043c0 	andeq	r4, r0, r0, asr #7
    12c4:	00004424 	andeq	r4, r0, r4, lsr #8
    12c8:	00004424 	andeq	r4, r0, r4, lsr #8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    12cc:	0000444c 	andeq	r4, r0, ip, asr #8
    12d0:	0000444c 	andeq	r4, r0, ip, asr #8
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12d4:	0000459c 	muleq	r0, ip, r5
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12e0:	00000001 	andeq	r0, r0, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12e4:	00000001 	andeq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12e8:	00000001 	andeq	r0, r0, r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ec:	00000001 	andeq	r0, r0, r1
	...
		pin = (port_confs [i] >> 19) & 0x1f;
    12f8:	00004612 	andeq	r4, r0, r2, lsl r6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12fc:	00004614 	andeq	r4, r0, r4, lsl r6
		pin = (port_confs [i] >> 19) & 0x1f;
    1300:	00004616 	andeq	r4, r0, r6, lsl r6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1304:	0000461a 	andeq	r4, r0, sl, lsl r6
	...
    1310:	00000001 	andeq	r0, r0, r1
		if (port_confs [i] & 0x80)
    1314:	00000001 	andeq	r0, r0, r1
    1318:	0000459c 	muleq	r0, ip, r5
    131c:	000047bc 			; <UNDEFINED> instruction: 0x000047bc
		if (port_confs [i] & 0x40)
    1320:	000047bc 			; <UNDEFINED> instruction: 0x000047bc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1324:	0000481c 	andeq	r4, r0, ip, lsl r8
    1328:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    132c:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1330:	0000481c 	andeq	r4, r0, ip, lsl r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1334:	00004834 	andeq	r4, r0, r4, lsr r8
	...
	all_leds_blink;
    1340:	00004882 	andeq	r4, r0, r2, lsl #17
    1344:	00004886 	andeq	r4, r0, r6, lsl #17
    1348:	0000488c 	andeq	r4, r0, ip, lsl #17
    134c:	0000488e 	andeq	r4, r0, lr, lsl #17
	...
    1358:	00004886 	andeq	r4, r0, r6, lsl #17
    135c:	0000488c 	andeq	r4, r0, ip, lsl #17
    1360:	0000488e 	andeq	r4, r0, lr, lsl #17
    1364:	00004896 	muleq	r0, r6, r8
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1370:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_RTC_COMB);
    1374:	00000001 	andeq	r0, r0, r1
    1378:	00000001 	andeq	r0, r0, r1
    137c:	00000001 	andeq	r0, r0, r1
	__pi_malloc_init ();
    1380:	00004834 	andeq	r4, r0, r4, lsr r8
	IntEnable (INT_AON_GPIO_EDGE);
    1384:	00004880 	andeq	r4, r0, r0, lsl #17
    1388:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    138c:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1390:	00004880 	andeq	r4, r0, r0, lsl #17
    1394:	000048ec 	andeq	r4, r0, ip, ror #17
    1398:	000048ec 	andeq	r4, r0, ip, ror #17
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    139c:	00004902 	andeq	r4, r0, r2, lsl #18
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    13a8:	00004904 	andeq	r4, r0, r4, lsl #18
    13ac:	0000492c 	andeq	r4, r0, ip, lsr #18
	urates [0] = UART_RATE / 100;
    13b0:	0000492c 	andeq	r4, r0, ip, lsr #18
    13b4:	00004934 	andeq	r4, r0, r4, lsr r9
	reinit_uart ();
    13b8:	00000001 	andeq	r0, r0, r1
	EXTRA_INITIALIZERS;
    13bc:	00000001 	andeq	r0, r0, r1
    13c0:	00000001 	andeq	r0, r0, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    13c4:	00000001 	andeq	r0, r0, r1
    13c8:	00000001 	andeq	r0, r0, r1
    13cc:	00000001 	andeq	r0, r0, r1
    13d0:	00000001 	andeq	r0, r0, r1
    13d4:	00000001 	andeq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13e8:	00000004 	andeq	r0, r0, r4
    13ec:	00000006 	andeq	r0, r0, r6
	IntEnable (INT_UART0_COMB);
    13f0:	0000000a 	andeq	r0, r0, sl
    13f4:	00000026 	andeq	r0, r0, r6, lsr #32
}
    13f8:	00000028 	andeq	r0, r0, r8, lsr #32
	tci_run_auxiliary_timer ();
    13fc:	00000038 	andeq	r0, r0, r8, lsr r0
		diag ("");
    1400:	0000003e 	andeq	r0, r0, lr, lsr r0
    1404:	00000040 	andeq	r0, r0, r0, asr #32
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1408:	00000042 	andeq	r0, r0, r2, asr #32
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    140c:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000d74 	andeq	r0, r0, r4, ror sp
       4:	02760003 	rsbseq	r0, r6, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    return node->data_base.item_array[index];
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
};
      1c:	2f727375 	svccs	0x00727375
      20:	2f62696c 	svccs	0x0062696c
      24:	2f636367 	svccs	0x00636367
      28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      34:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      38:	2f312e32 	svccs	0x00312e32
      3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
			i = k;
      40:	00656475 	rsbeq	r6, r5, r5, ror r4
				j->Next = k;
      44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      54:	2f62696c 	svccs	0x0062696c
		release;
      58:	00737973 	rsbseq	r7, r3, r3, ror r9
      5c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffa8 <_estack+0xdfffafa8>
			nq++;
      60:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
      68:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      6c:	6f746b73 	svcvs	0x00746b73
      70:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      74:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      78:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      7c:	2f534f43 	svccs	0x00534f43
      80:	4f636950 	svcmi	0x00636950
      84:	43432f53 	movtmi	r2, #16211	; 0x3f53
      88:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      8c:	6f682f00 	svcvs	0x00682f00
	if (!button_still_pressed (__button_list [pbutton]))
      90:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      94:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      98:	442f6e65 	strtmi	r6, [pc], #-3685	; a0 <g_pfnVectors+0xa0>
	if (baction == NULL)
      9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
      a0:	4f2f706f 	svcmi	0x002f706f
	(*baction) (pbutton);
      a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
endthread
      a8:	502f5445 	eorpl	r5, pc, r5, asr #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	534f4349 	movtpl	r4, #62281	; 0xf349
      b0:	6369502f 	cmnvs	r9, #47	; 0x2f
endthread
      b4:	2f00534f 	svccs	0x0000534f
      b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      bc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
      c0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
      c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
fsm sender(struct ResponseMessage *message) {
      c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
      d4:	4349502f 	movtmi	r5, #36911	; 0x902f
      d8:	502f534f 	eorpl	r5, pc, pc, asr #6
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	534f6369 	movtpl	r6, #62313	; 0xf369
      e0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
      e4:	562f7362 	strtpl	r7, [pc], -r2, ror #6
      e8:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
      ec:	6f682f00 	svcvs	0x00682f00
		packet[1] = message->gid;
      f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 100 <_Min_Stack_Size>
      fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	4f2f706f 	svcmi	0x002f706f
     104:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		*p = message->tpe;p++;
     108:	502f5445 	eorpl	r5, pc, r5, asr #8
		*p = message->request_number;p++;
     10c:	534f4349 	movtpl	r4, #62281	; 0xf349
		*p = message->sender_id;p++;
     110:	6369502f 	cmnvs	r9, #47	; 0x2f
		*p = message->receiver_id;p++;
     114:	6b2f534f 	blvs	bd4e58 <__ccfg+0xbb4eb0>
		switch(message->tpe) {
     118:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     11c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     120:	2f656d6f 	svccs	0x00656d6f
		tcv_endp(packet);
     124:	70657473 	rsbvc	r7, r5, r3, ror r4
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2f6e6568 	svccs	0x006e6568
     12c:	6b736544 	blvs	1cd9644 <__ccfg+0x1cb969c>
}
     130:	2f706f74 	svccs	0x00706f74
		finish;
     134:	4f534c4f 	svcmi	0x00534c4f
     138:	2f54454e 	svccs	0x0054454e
     13c:	4f434950 	svcmi	0x00434950
				strncpy(p, message->record, sizeof(message->record));
     140:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				*p = message->padding;p++;
     144:	2f534f63 	svccs	0x00534f63
				strncpy(p, message->record, sizeof(message->record));
     148:	62694c56 	rsbvs	r4, r9, #22016	; 0x5600
     14c:	6c502f73 	mrrcvs	15, 7, r2, r0, cr3
     150:	754e6775 	strbvc	r6, [lr, #-1909]	; 0xfffff88b
				strncpy(p, message->record, sizeof(message->record));
     154:	2e006c6c 	cdpcs	12, 0, cr6, cr0, cr12, {3}
     158:	6f682f00 	svcvs	0x00682f00
				strncpy(p, message->record, sizeof(message->record));
     15c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
				break;
     160:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
				*p = message->record_index;p++;
     164:	442f6e65 	strtmi	r6, [pc], #-3685	; 16c <_Min_Stack_Size+0x6c>
				*p = message->padding;
     168:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				break;
     16c:	4f2f706f 	svcmi	0x002f706f
     170:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     174:	502f5445 	eorpl	r5, pc, r5, asr #8
     178:	534f4349 	movtpl	r4, #62281	; 0xf349
     17c:	6369502f 	cmnvs	r9, #47	; 0x2f
     180:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		node->nnodes[i] = 0;
     184:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     188:	43432f58 	movtmi	r2, #16216	; 0x3f58
     18c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     190:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
bool init_node(struct Node* node){
     198:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    node->id  = 0;                  // default id value 0
     19c:	00006269 	andeq	r6, r0, r9, ror #4
    node->index = 0;                // default entry count 0
     1a0:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
    node->data_base.item_count = 0; // default no items in array
     1a4:	00006363 	andeq	r6, r0, r3, ror #6
	reset_array(node);
     1a8:	74730000 	ldrbtvc	r0, [r3], #-0
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     1b0:	0100682e 	tsteq	r0, lr, lsr #16
};
     1b4:	745f0000 	ldrbvc	r0, [pc], #-0	; 1bc <generate_request_num>
     1b8:	73657079 	cmnvc	r5, #121	; 0x79
uint8_t generate_request_num(void){
     1bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    return (uint8_t) (rand() % 255);
     1c0:	65720000 	ldrbvs	r0, [r2, #-0]!
     1c4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     1c8:	00020068 	andeq	r0, r2, r8, rrx
}
     1cc:	636f6c00 	cmnvs	pc, #0, 24
            node->nnodes[i] = 0; // set to null byte
     1d0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     1d4:	73000002 	movwvc	r0, #2
     1d8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
};
     1e0:	73000001 	movwvc	r0, #1
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
     1e8:	00682e67 	rsbeq	r2, r8, r7, ror #28
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	61000001 	tstvs	r0, r1
     1f0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
     1f4:	00030068 	andeq	r0, r3, r8, rrx
        node->data_base.item_count -= 1;
     1f8:	63616d00 	cmnvs	r1, #0, 26
};
     1fc:	00682e68 	rsbeq	r2, r8, r8, ror #28
bool delete_all(struct Node *node){
     200:	70000003 	andvc	r0, r0, r3
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	5f736e69 	svcpl	0x00736e69
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00030068 	andeq	r0, r3, r8, rrx
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
            node->data_base.item_array[i].timestamp = 0;
     214:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    node->data_base.item_count = 0;
     21c:	0300682e 	movweq	r6, #2094	; 0x82e
}
     220:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
        return true;
     224:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00040068 	andeq	r0, r4, r8, rrx
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     234:	00682e73 	rsbeq	r2, r8, r3, ror lr
     238:	6b000005 	blvs	254 <assemble_response_message+0x2e>
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
	response_message->tpe = RESPONSE;
     240:	00682e6c 	rsbeq	r2, r8, ip, ror #28
	response_message->status = status;
     244:	70000006 	andvc	r0, r0, r6
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	5f67756c 	svcpl	0x0067756c
	response_message->gid = gid;
     24c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
	response_message->sender_id = sender_id;
     250:	0700682e 	streq	r6, [r0, -lr, lsr #16]
	response_message->status = status;
     254:	65680000 	strbvs	r0, [r8, #-0]!
	if (!padding){
     258:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
		response_message->padding = padding;
     25c:	7070682e 	rsbsvc	r6, r0, lr, lsr #16
	if (rec != NULL){
     260:	00000800 	andeq	r0, r0, r0, lsl #16
     264:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
		strncpy(response_message->record, rec, 20);
     268:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     26c:	00003e6e 	andeq	r3, r0, lr, ror #28
     270:	6f610000 	svcvs	0x00610000
};
     274:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
fsm receiver(struct Node* node_db) {
     278:	00682e63 	rsbeq	r2, r8, r3, ror #28
     27c:	00000009 	andeq	r0, r0, r9
     280:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
     284:	0000c802 	andeq	ip, r0, r2, lsl #16
     288:	01be0300 			; <UNDEFINED> instruction: 0x01be0300
     28c:	011e0501 	tsteq	lr, r1, lsl #10
     290:	05016e05 	streq	r6, [r1, #-3589]	; 0xfffff1fb
     294:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
		DEBUG_PRINT("\r\nreceiving 0");
     298:	1305206e 	movwne	r2, #20590	; 0x506e
     29c:	4a3a0306 	bmi	e80ebc <__ccfg+0xe60f14>
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	01060105 	tsteq	r6, r5, lsl #2
     2a4:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
     2a8:	2e460365 	cdpcs	3, 4, cr0, cr6, cr5, {3}
		DEBUG_PRINT("\r\nreceiving 1");
     2ac:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
     2b0:	207a0365 	rsbscs	r0, sl, r5, ror #6
		DEBUG_PRINT("\r\nreceiving 2");
     2b4:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
     2b8:	207a0337 	rsbscs	r0, sl, r7, lsr r3
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2bc:	21060205 	tstcs	r6, r5, lsl #4
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c0:	15030514 	strne	r0, [r3, #-1300]	; 0xfffffaec
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2c4:	01060c05 	tsteq	r6, r5, lsl #24
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c8:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
		DEBUG_PRINT("\r\nreceiving 3");
     2cc:	0a052116 	beq	14872c <__ccfg+0x128784>
		switch (response_message_5->tpe){
     2d0:	220d051e 	andcs	r0, sp, #125829120	; 0x7800000
     2d4:	051e0a05 	ldreq	r0, [lr, #-2565]	; 0xfffff5fb
     2d8:	13210603 			; <UNDEFINED> instruction: 0x13210603
     2dc:	4d3d1413 	cfldrsmi	mvf1, [sp, #-76]!	; 0xffffffb4
     2e0:	01060f05 	tsteq	r6, r5, lsl #30
     2e4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     2e8:	05200615 	streq	r0, [r0, #-1557]!	; 0xfffff9eb
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2ec:	0f051303 	svceq	0x00051303
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2f0:	06050106 	streq	r0, [r5], -r6, lsl #2
				if (discovery_request_message->gid == node_db->gid){
     2f4:	06200520 	strteq	r0, [r0], -r0, lsr #10
     2f8:	13030520 	movwne	r0, #13600	; 0x3520
					DEBUG_PRINT("\r\nSending to sender");
     2fc:	01060f05 	tsteq	r6, r5, lsl #30
     300:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
					DEBUG_PRINT("\r\nSending to sender");
     304:	0520061b 	streq	r0, [r0, #-1563]!	; 0xfffff9e5
					response_message_0->tpe = DISCOVERY_RESPONSE;
     308:	0f051303 	svceq	0x00051303
					response_message_0->request_number = discovery_request_message->request_number;
     30c:	06050106 	streq	r0, [r5], -r6, lsl #2
					response_message_0->sender_id = node_db->id;
     310:	061d0520 	ldreq	r0, [sp], -r0, lsr #10
					response_message_0->receiver_id = discovery_request_message->sender_id;
     314:	14030520 	strne	r0, [r3], #-1312	; 0xfffffae0
					DEBUG_PRINT("\r\nSending to sender");
     318:	01061105 	tsteq	r6, r5, lsl #2
					call sender(response_message_0, done_case);
     31c:	03060305 	movweq	r0, #25349	; 0x6305
     320:	4c40661f 	mcrrmi	6, 1, r6, r0, cr15
     324:	13060105 	movwne	r0, #24837	; 0x6105
     328:	052d0305 	streq	r0, [sp, #-773]!	; 0xfffffcfb
     32c:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     330:	06110558 			; <UNDEFINED> instruction: 0x06110558
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     334:	23050501 	movwcs	r0, #21761	; 0x5501
     338:	051d0805 	ldreq	r0, [sp, #-2053]	; 0xfffff7fb
     33c:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
     340:	11051305 	tstne	r5, r5, lsl #6
     344:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     348:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
     34c:	20061b05 	andcs	r1, r6, r5, lsl #22
     350:	03140505 	tsteq	r4, #20971520	; 0x1400000
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     354:	03063c6f 	movweq	r3, #27759	; 0x6c6f
					node_db->index+=1;
     358:	2f065811 	svccs	0x00065811
     35c:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
		DEBUG_PRINT("\r\nIn done_case");
     360:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
		tcv_endp(incoming_packet);
     364:	20052008 	andcs	r2, r5, r8
     368:	05052006 	streq	r2, [r5, #-6]
		DEBUG_PRINT("\r\nIn done_case");
     36c:	06110513 			; <UNDEFINED> instruction: 0x06110513
     370:	20080501 	andcs	r0, r8, r1, lsl #10
		proceed receiving;
     374:	21060505 	tstcs	r6, r5, lsl #10
		ser_out(response_1_create, "\r\nData Saved");
     378:	01000d02 	tsteq	r0, r2, lsl #26
     37c:	002f0501 	eoreq	r0, pc, r1, lsl #10
		proceed receiving;
     380:	00000205 	andeq	r0, r0, r5, lsl #4
     384:	2c030000 	stccs	0, cr0, [r3], {-0}
		ser_out(response_1_delete, "\r\nRecord Deleted");
     388:	13050501 	movwne	r0, #21761	; 0x5501
     38c:	01060e05 	tsteq	r6, r5, lsl #28
		proceed receiving;
     390:	21060505 	tstcs	r6, r5, lsl #10
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     394:	13060105 	movwne	r0, #24837	; 0x6105
     398:	01000202 	tsteq	r0, r2, lsl #4
     39c:	00320501 	eorseq	r0, r2, r1, lsl #10
     3a0:	00000205 	andeq	r0, r0, r5, lsl #4
     3a4:	31030000 	mrscc	r0, (UNDEF: 3)
		proceed receiving;
     3a8:	13050501 	movwne	r0, #21761	; 0x5501
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     3ac:	01060f05 	tsteq	r6, r5, lsl #30
     3b0:	21060505 	tstcs	r6, r5, lsl #10
     3b4:	13060105 	movwne	r0, #24837	; 0x6105
     3b8:	01000202 	tsteq	r0, r2, lsl #4
		proceed receiving;
     3bc:	003e0501 	eorseq	r0, lr, r1, lsl #10
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3c0:	00000205 	andeq	r0, r0, r5, lsl #4
     3c4:	37030000 	strcc	r0, [r3, -r0]
     3c8:	13050501 	movwne	r0, #21761	; 0x5501
     3cc:	01061105 	tsteq	r6, r5, lsl #2
		proceed receiving;
     3d0:	2f060505 	svccs	0x00060505
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3d4:	13060105 	movwne	r0, #24837	; 0x6105
     3d8:	01000202 	tsteq	r0, r2, lsl #4
     3dc:	00250501 	eoreq	r0, r5, r1, lsl #10
     3e0:	01840205 	orreq	r0, r4, r5, lsl #4
		proceed receiving;
     3e4:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3e8:	13020501 	movwne	r0, #9473	; 0x2501
     3ec:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
		proceed receiving;
     3f0:	13050110 	movwne	r0, #20752	; 0x5110
}
     3f4:	03051306 	movweq	r1, #21254	; 0x5306
     3f8:	13055806 	movwne	r5, #22534	; 0x5806
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3fc:	16050106 	strne	r0, [r5], -r6, lsl #2
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     400:	10052d06 	andne	r2, r5, r6, lsl #26
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     404:	06020501 	streq	r0, [r2], -r1, lsl #10
     408:	31010501 	tstcc	r1, r1, lsl #10
     40c:	01000102 	tsteq	r0, r2, lsl #2
     410:	00210501 	eoreq	r0, r1, r1, lsl #10
					DEBUG_PRINT("\r\nDelete rec first if");
     414:	01980205 	orrseq	r0, r8, r5, lsl #4
					break;
     418:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     41c:	13050501 	movwne	r0, #21761	; 0x5501
     420:	11062105 	tstne	r6, r5, lsl #2
					DEBUG_PRINT("\r\nCreate rec second if");
     424:	05210e05 	streq	r0, [r1, #-3589]!	; 0xfffff1fb
    if (node->data_base.item_count == NUMB_OF_ENT){
     428:	052f0605 	streq	r0, [pc, #-1541]!	; fffffe2b <_estack+0xdfffae2b>
     42c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
						DEBUG_PRINT("\r\nCreate rec third if");
     430:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     434:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
					DEBUG_PRINT("\r\nCreate rec out if");
     438:	132f0605 			; <UNDEFINED> instruction: 0x132f0605
     43c:	01062005 	tsteq	r6, r5
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     440:	30060205 	andcc	r0, r6, r5, lsl #4
     444:	15330505 	ldrne	r0, [r3, #-1285]!	; 0xfffffafb
     448:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
     44c:	00050213 	andeq	r0, r5, r3, lsl r2
     450:	23050101 	movwcs	r0, #20737	; 0x5101
     454:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     458:	03000001 	movweq	r0, #1
					call sender(response_message_2, done_case);
     45c:	050100c5 	streq	r0, [r1, #-197]	; 0xffffff3b
						DEBUG_PRINT("\r\nCreate rec third else");
     460:	23051305 	movwcs	r1, #21253	; 0x5305
     464:	17051106 	strne	r1, [r5, -r6, lsl #2]
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     468:	2e1e0521 	cfmul64cs	mvdx0, mvdx14, mvdx1
     46c:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     470:	01010002 	tsteq	r1, r2
				DEBUG_PRINT("\r\nDelete rec");/*
     474:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     478:	00000002 	andeq	r0, r0, r2
     47c:	00ca0300 	sbceq	r0, sl, r0, lsl #6
     480:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
     484:	06080515 			; <UNDEFINED> instruction: 0x06080515
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     488:	03010501 	movweq	r0, #5377	; 0x1501
     48c:	04022e17 	streq	r2, [r2], #-3607	; 0xfffff1e9
     490:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     494:	02050032 	andeq	r0, r5, #50	; 0x32
					DEBUG_PRINT("\r\nDelete rec first if");
     498:	000001ce 	andeq	r0, r0, lr, asr #3
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     49c:	0100ea03 	tsteq	r0, r3, lsl #20
     4a0:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
					DEBUG_PRINT("\r\nDelete rec second if");
     4a4:	0e051509 	cfsh32eq	mvfx1, mvfx5, #9
					if (delete_record(node_db, delete_record_message->record_index)){
     4a8:	01190501 	tsteq	r9, r1, lsl #10
     4ac:	13061d05 	movwne	r1, #27909	; 0x6d05
     4b0:	58060d05 	stmdapl	r6, {r0, r2, r8, sl, fp}
						DEBUG_PRINT("\r\nDelete rec third if");
     4b4:	01061d05 	tsteq	r6, r5, lsl #26
						status = (uint8_t) SUCCESS;
     4b8:	2d062105 	stfcss	f2, [r6, #-20]	; 0xffffffec
					DEBUG_PRINT("\r\nDelete assemble le response");
     4bc:	05011905 	streq	r1, [r1, #-2309]	; 0xfffff6fb
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4c0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     4c4:	0530060a 	ldreq	r0, [r0, #-1546]!	; 0xfffff9f6
     4c8:	01051309 	tsteq	r5, r9, lsl #6
     4cc:	02021706 	andeq	r1, r2, #1572864	; 0x180000
     4d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4d4:	02050034 	andeq	r0, r5, #52	; 0x34
     4d8:	000001e4 	andeq	r0, r0, r4, ror #3
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4dc:	0100fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
     4e0:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     4e4:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
     4e8:	09052e08 	stmdbeq	r5, {r3, r9, sl, fp, sp}
     4ec:	39052406 	stmdbcc	r5, {r1, r2, sl, sp}
     4f0:	24050106 	strcs	r0, [r5], #-262	; 0xfffffefa
     4f4:	1e39054c 	cdpne	5, 3, cr0, cr9, cr12, {2}
     4f8:	21060905 	tstcs	r6, r5, lsl #18
     4fc:	01063505 	tsteq	r6, r5, lsl #10
     500:	21060905 	tstcs	r6, r5, lsl #18
     504:	01062405 	tsteq	r6, r5, lsl #8
     508:	2f060605 	svccs	0x00060605
     50c:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     510:	01051306 	tsteq	r5, r6, lsl #6
     514:	02021506 	andeq	r1, r2, #25165824	; 0x1800000
     518:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     51c:	02050040 	andeq	r0, r5, #64	; 0x40
     520:	00000000 	andeq	r0, r0, r0
     524:	01018e03 	tsteq	r1, r3, lsl #28
     528:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     52c:	050f0640 	streq	r0, [pc, #-1600]	; fffffef4 <_estack+0xdfffaef4>
     530:	40052326 	andmi	r2, r5, r6, lsr #6
     534:	2326052b 			; <UNDEFINED> instruction: 0x2326052b
     538:	02920105 	addseq	r0, r2, #1073741825	; 0x40000001
     53c:	01010002 	tsteq	r1, r2
     540:	05002205 	streq	r2, [r0, #-517]	; 0xfffffdfb
     544:	00020002 	andeq	r0, r2, r2
     548:	01960300 	orrseq	r0, r6, r0, lsl #6
     54c:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
     550:	0f062205 	svceq	0x00062205
     554:	05231805 	streq	r1, [r3, #-2053]!	; 0xfffff7fb
     558:	11052e08 	tstne	r5, r8, lsl #28
     55c:	2f390523 	svccs	0x00390523
     560:	20060d05 	andcs	r0, r6, r5, lsl #26
     564:	11063a05 	tstne	r6, r5, lsl #20
     568:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     56c:	0d052139 	stfeqs	f2, [r5, #-228]	; 0xffffff1c
     570:	35052106 	strcc	r2, [r5, #-262]	; 0xfffffefa
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     574:	39050106 	stmdbcc	r5, {r1, r2, r8}
				DEBUG_PRINT("\r\nretrieve rec");
     578:	18052c06 	stmdane	r5, {r1, r2, sl, fp, sp}
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     57c:	06090501 	streq	r0, [r9], -r1, lsl #10
     580:	06060501 	streq	r0, [r6], -r1, lsl #10
     584:	13050524 	movwne	r0, #21796	; 0x5524
     588:	01062005 	tsteq	r6, r5
     58c:	30060505 	andcc	r0, r6, r5, lsl #10
     590:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     594:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     598:	0f052301 	svceq	0x00052301
     59c:	02207303 	eoreq	r7, r0, #201326592	; 0xc000000
    return node->data_base.item_array[index];
     5a0:	01010002 	tsteq	r1, r2
     5a4:	0001af05 	andeq	sl, r1, r5, lsl #30
     5a8:	02260205 	eoreq	r0, r6, #1342177280	; 0x50000000
     5ac:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b0:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    return node->data_base.item_array[index];
     5b4:	01af0513 			; <UNDEFINED> instruction: 0x01af0513
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b8:	052e1106 	streq	r1, [lr, #-262]!	; 0xfffffefa
     5bc:	af052150 	svcge	0x00052150
     5c0:	50051f01 	andpl	r1, r5, r1, lsl #30
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     5c4:	31180575 	tstcc	r8, r5, ror r5
     5c8:	05321b05 	ldreq	r1, [r2, #-2821]!	; 0xfffff4fb
     5cc:	2e790350 	mrccs	3, 3, r0, cr9, cr0, {2}
     5d0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
     5d4:	01061805 	tsteq	r6, r5, lsl #16
     5d8:	2f060205 	svccs	0x00060205
     5dc:	06230513 			; <UNDEFINED> instruction: 0x06230513
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5e0:	06020501 	streq	r0, [r2], -r1, lsl #10
     5e4:	061e0521 	ldreq	r0, [lr], -r1, lsr #10
				DEBUG_PRINT("\r\nResponse");
     5e8:	06020501 	streq	r0, [r2], -r1, lsl #10
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5ec:	06200521 	strteq	r0, [r0], -r1, lsr #10
     5f0:	06020501 	streq	r0, [r2], -r1, lsl #10
     5f4:	061b0521 	ldreq	r0, [fp], -r1, lsr #10
     5f8:	06020501 	streq	r0, [r2], -r1, lsl #10
     5fc:	06050521 	streq	r0, [r5], -r1, lsr #10
     600:	06030501 	streq	r0, [r3], -r1, lsl #10
				if(!response_flag){
     604:	061d053d 			; <UNDEFINED> instruction: 0x061d053d
					response_flag=1;
     608:	06030501 	streq	r0, [r3], -r1, lsl #10
					trigger(&response_flag);
     60c:	1302052f 	movwne	r0, #9519	; 0x252f
				switch(response_message_5->status){
     610:	01060505 	tsteq	r6, r5, lsl #10
     614:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
     618:	14020567 	strne	r0, [r2], #-1383	; 0xfffffa99
     61c:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
     620:	01000302 	tsteq	r0, r2, lsl #6
						if (response_checker[0] == response_message_5->request_number){
     624:	001e0501 	andseq	r0, lr, r1, lsl #10
     628:	02780205 	rsbseq	r0, r8, #1342177280	; 0x50000000
     62c:	fb030000 	blx	c0636 <__ccfg+0xa068e>
							switch(response_checker[1]){
     630:	20050101 	andcs	r0, r5, r1, lsl #2
     634:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
     638:	2e510501 	cdpcs	5, 5, cr0, cr1, cr1, {0}
     63c:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
									proceed response_1_create;
     640:	5a052051 	bpl	14878c <__ccfg+0x1287e4>
						proceed response_2;
     644:	03052e06 	movweq	r2, #24070	; 0x5e06
									proceed response_1_delete;
     648:	15053ea5 	strne	r3, [r5, #-3749]	; 0xfffff15b
									proceed response_1_retrieve;
     64c:	13050106 	movwne	r0, #20742	; 0x5106
						proceed response_2;
     650:	06030558 			; <UNDEFINED> instruction: 0x06030558
						proceed response_3;
     654:	4205402f 	andmi	r4, r5, #47	; 0x2f
						proceed response_4;
     658:	03051306 	movweq	r1, #21254	; 0x5306
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     65c:	053d061f 	ldreq	r0, [sp, #-1567]!	; 0xfffff9e1
     660:	05010642 	streq	r0, [r1, #-1602]	; 0xfffff9be
				break;
     664:	42052016 	andmi	r2, r5, #22
}
     668:	21030520 	tstcs	r3, r0, lsr #10
     66c:	052d1605 	streq	r1, [sp, #-1541]!	; 0xfffff9fb
     670:	2f210603 	svccs	0x00210603
     674:	061d0541 	ldreq	r0, [sp], -r1, asr #10
     678:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
     67c:	05c80e03 	strbeq	r0, [r8, #3587]	; 0xe03
fsm root {
     680:	55051405 	strpl	r1, [r5, #-1029]	; 0xfffffbfb
     684:	72050106 	andvc	r0, r5, #-2147483647	; 0x80000001
     688:	0308053e 	movweq	r0, #34110	; 0x853e
     68c:	5505200c 	strpl	r2, [r5, #-12]
     690:	052e7203 	streq	r7, [lr, #-515]!	; 0xfffffdfd
     694:	03220605 			; <UNDEFINED> instruction: 0x03220605
     698:	0805010c 	stmdaeq	r5, {r2, r3, r8}
     69c:	06050106 	streq	r0, [r5], -r6, lsl #2
     6a0:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
     6a4:	05010639 	streq	r0, [r1, #-1593]	; 0xfffff9c7
     6a8:	1e052706 	cdpne	7, 0, cr2, cr5, cr6, {0}
     6ac:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
     6b0:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
     6b4:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
     6b8:	052f0606 	streq	r0, [pc, #-1542]!	; ba <g_pfnVectors+0xba>
     6bc:	05010644 	streq	r0, [r1, #-1604]	; 0xfffff9bc
     6c0:	06052029 	streq	r2, [r5], -r9, lsr #32
     6c4:	2d052106 	stfcss	f2, [r5, #-24]	; 0xffffffe8
     6c8:	24050106 	strcs	r0, [r5], #-262	; 0xfffffefa
     6cc:	06060520 	streq	r0, [r6], -r0, lsr #10
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     6d0:	06410521 	strbeq	r0, [r1], -r1, lsr #10
     6d4:	20260501 	eorcs	r0, r6, r1, lsl #10
     6d8:	23060605 	movwcs	r0, #26117	; 0x6605
		init_node(node_db);
     6dc:	010b052f 	tsteq	fp, pc, lsr #10
		phys_cc1350(0, MAX_PKT_LEN);
     6e0:	01060f05 	tsteq	r6, r5, lsl #30
     6e4:	05740e05 	ldrbeq	r0, [r4, #-3589]!	; 0xfffff1fb
		tcv_plug (0, &plug_null);
     6e8:	05200659 	streq	r0, [r0, #-1625]!	; 0xfffff9a7
     6ec:	2e0d031d 	mcrcs	3, 0, r0, cr13, cr13, {0}
		sfd = tcv_open (WNONE, 0, 0);
     6f0:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
     6f4:	0501066d 	streq	r0, [r1, #-1645]	; 0xfffff993
     6f8:	0a030605 	beq	c1f14 <__ccfg+0xa1f6c>
     6fc:	06250520 	strteq	r0, [r5], -r0, lsr #10
     700:	66640501 	strbtvs	r0, [r4], -r1, lsl #10
			diag("Cannot open tcv interface");
     704:	05207505 	streq	r7, [r0, #-1285]!	; 0xfffffafb
     708:	053c3c25 	ldreq	r3, [ip, #-3109]!	; 0xfffff3db
			halt();
     70c:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
		tcv_control(sfd, PHYSOPT_ON, NULL);
     710:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     714:	053d0606 	ldreq	r0, [sp, #-1542]!	; 0xfffff9fa
		runfsm receiver(node_db);
     718:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     71c:	af030604 	svcge	0x00030604
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     720:	03053c01 	movweq	r3, #23553	; 0x5c01
     724:	3d4b3d14 	stclcc	13, cr3, [fp, #-80]	; 0xffffffb0
     728:	4b3e4b40 	blmi	f93430 <__ccfg+0xf73488>
     72c:	0656053e 			; <UNDEFINED> instruction: 0x0656053e
     730:	20030501 	andcs	r0, r3, r1, lsl #10
     734:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
		ser_inf(get_choice, "%c", &CHOICE);
     738:	67062003 	strvs	r2, [r6, -r3]
     73c:	06560540 	ldrbeq	r0, [r6], -r0, asr #10
     740:	20030501 	andcs	r0, r3, r1, lsl #10
		switch(CHOICE) {
     744:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
     748:	4b062003 	blmi	18875c <__ccfg+0x1687b4>
     74c:	0657053e 			; <UNDEFINED> instruction: 0x0657053e
     750:	20030501 	andcs	r0, r3, r1, lsl #10
     754:	05205705 	streq	r5, [r0, #-1797]!	; 0xfffff8fb
     758:	4b062003 	blmi	18876c <__ccfg+0x1687c4>
     75c:	0656053e 			; <UNDEFINED> instruction: 0x0656053e
     760:	20030501 	andcs	r0, r3, r1, lsl #10
     764:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
     768:	4b062003 	blmi	18877c <__ccfg+0x1687d4>
     76c:	01053f40 	tsteq	r5, r0, asr #30
     770:	0318053e 	tsteq	r8, #260046848	; 0xf800000
				proceed menu;
     774:	053c7eb5 	ldreq	r7, [ip, #-3765]!	; 0xfffff14b
     778:	55051305 	strpl	r1, [r5, #-773]	; 0xfffffcfb
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     77c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     780:	66053d06 	strvs	r3, [r5], -r6, lsl #26
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     784:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     788:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
     78c:	010c0313 	tsteq	ip, r3, lsl r3
		DEBUG_PRINT("setting node group ID");
     790:	01060805 	tsteq	r6, r5, lsl #16
     794:	054a3b05 	strbeq	r3, [sl, #-2821]	; 0xfffff4fb
    node->gid = gid; 
     798:	064b0606 	strbeq	r0, [fp], -r6, lsl #12
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     79c:	06202803 	strteq	r2, [r0], -r3, lsl #16
    node->gid = gid; 
     7a0:	2059032f 	subscs	r0, r9, pc, lsr #6
		proceed menu;
     7a4:	4b150505 	blmi	541bc0 <__ccfg+0x521c18>
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     7a8:	3d140605 	ldccc	6, cr0, [r4, #-20]	; 0xffffffec
     7ac:	d6030505 	strle	r0, [r3], -r5, lsl #10
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     7b0:	0515017d 	ldreq	r0, [r5, #-381]	; 0xfffffe83
     7b4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     7b8:	a8030607 	stmdage	r3, {r0, r1, r2, r9, sl}
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7bc:	053d4a02 	ldreq	r4, [sp, #-2562]!	; 0xfffff5fe
     7c0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
		if((node_db->id < 1) || (node_db->id > 25)){
     7c4:	05240607 	streq	r0, [r4, #-1543]!	; 0xfffff9f9
     7c8:	053d1306 	ldreq	r1, [sp, #-774]!	; 0xfffffcfa
     7cc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
			strncpy(reason, "Out of Range", 50);
     7d0:	3dbb0606 	ldccc	6, cr0, [fp, #24]!
     7d4:	05010b05 	streq	r0, [r1, #-2821]	; 0xfffff4fb
			proceed invalid_node_id;
     7d8:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     7dc:	d0030609 	andle	r0, r3, r9, lsl #12
				strncpy(reason, "ID is already in use", 50);
     7e0:	07052e7d 	smlsdxeq	r5, sp, lr, r2
		for(int i = 0; i < node_db->index; i++){
     7e4:	0102aa03 	tsteq	r2, r3, lsl #20
     7e8:	0318053d 	tsteq	r8, #255852544	; 0xf400000
     7ec:	0505200b 	streq	r2, [r5, #-11]
		proceed menu;
     7f0:	06550513 			; <UNDEFINED> instruction: 0x06550513
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7f4:	06050501 	streq	r0, [r5], -r1, lsl #10
     7f8:	0514063d 	ldreq	r0, [r4, #-1597]	; 0xfffff9c3
     7fc:	05051e66 	streq	r1, [r5, #-3686]	; 0xfffff19a
     800:	09032206 	stmdbeq	r3, {r1, r2, r9, sp}
		proceed get_new_node_id;
     804:	0805832e 	stmdaeq	r5, {r1, r2, r3, r5, r8, r9, pc}
     808:	34050106 	strcc	r0, [r5], #-262	; 0xfffffefa
		if (!clear_node_neighbour_array(node_db)){
     80c:	0606054a 	streq	r0, [r6], -sl, asr #10
     810:	0505304b 	streq	r3, [r5, #-75]	; 0xffffffb5
			strncpy(reason, "Error Clearing Node Array", 50);
     814:	06080515 			; <UNDEFINED> instruction: 0x06080515
     818:	06060501 	streq	r0, [r6], -r1, lsl #10
     81c:	0a053e4b 	beq	150150 <__ccfg+0x1301a8>
			proceed error;
     820:	09050106 	stmdbeq	r5, {r1, r2, r8}
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     824:	0607054a 	streq	r0, [r7], -sl, asr #10
     828:	0e051321 	cdpeq	3, 0, cr1, cr5, cr1, {1}
		request_packet->gid = node_db->gid;
     82c:	07053b06 	streq	r3, [r5, -r6, lsl #22]
     830:	06052506 	streq	r2, [r5], -r6, lsl #10
		request_packet->tpe = DISCOVERY_REQUEST;
     834:	1b053d14 	blne	14fc8c <__ccfg+0x12fce4>
		request_packet->request_number = generate_request_num();
     838:	1c050106 	stfnes	f0, [r5], {6}
     83c:	05901d03 	ldreq	r1, [r0, #3331]	; 0xd03
		call sender(request_packet, wait_discovery);
     840:	5e030607 	cfmadd32pl	mvax0, mvfx0, mvfx3, mvfx7
     844:	1a05134a 	bne	145574 <__ccfg+0x1255cc>
		request_packet->receiver_id=0;
     848:	49020c03 	stmdbmi	r2, {r0, r1, sl, fp}
		call sender(request_packet, wait_discovery);
     84c:	13050501 	movwne	r0, #21761	; 0x5501
     850:	01065505 	tsteq	r6, r5, lsl #10
     854:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
			release;
     858:	6c051506 	cfstr32vs	mvfx1, [r5], {6}
				proceed get_new_node_id;
     85c:	0605051d 			; <UNDEFINED> instruction: 0x0605051d
				proceed clear_neighbour_array;
     860:	0531142f 	ldreq	r1, [r1, #-1071]!	; 0xfffffbd1
				proceed create_proto_start;
     864:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
				proceed start_delete_proto;
     868:	06056634 			; <UNDEFINED> instruction: 0x06056634
				proceed start_retrieve_proto;
     86c:	05056806 	streq	r6, [r5, #-2054]	; 0xfffff7fa
				proceed display_db;
     870:	064d0515 			; <UNDEFINED> instruction: 0x064d0515
				proceed del_local;
     874:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
			if(node_db->id == node_db->nnodes[i]){
     878:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
     87c:	d4030505 	strle	r0, [r3], #-1285	; 0xfffffafb
     880:	2605017d 			; <UNDEFINED> instruction: 0x2605017d
				strncpy(reason, "ID is already in use", 50);
     884:	19050106 	stmdbne	r5, {r1, r2, r8}
     888:	9002ac03 	andls	sl, r2, r3, lsl #24
				proceed invalid_node_id;
     88c:	d4032605 	strle	r2, [r3], #-1541	; 0xfffff9fb
     890:	19052e7d 	stmdbne	r5, {r0, r2, r3, r4, r5, r6, r9, sl, fp, sp}
		for(int i = 0; i < node_db->index; i++){
     894:	2e02ac03 	cdpcs	12, 0, cr10, cr2, cr3, {0}
		if (discovery_wait_flag == 0){
     898:	67060605 	strvs	r0, [r6, -r5, lsl #12]
			discovery_wait_flag=1;
     89c:	13170705 	tstne	r7, #1310720	; 0x140000
     8a0:	01061c05 	tsteq	r6, r5, lsl #24
			delay(3000, find_proto_start);
     8a4:	de061305 	cdple	3, 0, cr1, cr6, cr5, {0}
     8a8:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
		if (discovery_wait_flag == 1){
     8ac:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
			discovery_wait_flag=0;
     8b0:	43052205 	movwmi	r2, #20997	; 0x5205
     8b4:	2018051e 	andscs	r0, r8, lr, lsl r5
			delay(3000, display_neighbour_nodes);
     8b8:	22060505 	andcs	r0, r6, #20971520	; 0x1400000
     8bc:	061b0530 			; <UNDEFINED> instruction: 0x061b0530
     8c0:	20080501 	andcs	r0, r8, r1, lsl #10
     8c4:	05583105 	ldrbeq	r3, [r8, #-261]	; 0xfffffefb
     8c8:	055a0606 	ldrbeq	r0, [sl, #-1542]	; 0xfffff9fa
     8cc:	08051405 	stmdaeq	r5, {r0, r2, sl, ip}
     8d0:	07050106 	streq	r0, [r5, -r6, lsl #2]
     8d4:	06060520 	streq	r0, [r6], -r0, lsr #10
     8d8:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
     8dc:	06060501 	streq	r0, [r6], -r1, lsl #10
     8e0:	3105052f 	tstcc	r5, pc, lsr #10
     8e4:	01061e05 	tsteq	r6, r5, lsl #28
     8e8:	a3060705 	movwge	r0, #26373	; 0x6705
     8ec:	01061b05 	tsteq	r6, r5, lsl #22
     8f0:	05203405 	streq	r3, [r0, #-1029]!	; 0xfffffbfb
     8f4:	0805200a 	stmdaeq	r5, {r1, r3, sp}
     8f8:	1f054b06 	svcne	0x00054b06
     8fc:	0a050106 	beq	140d1c <__ccfg+0x120d74>
     900:	07058406 	streq	r8, [r5, -r6, lsl #8]
		if(node_db->index == 0){
     904:	200e0306 	andcs	r0, lr, r6, lsl #6
     908:	0a052f06 	beq	14c528 <__ccfg+0x12c580>
     90c:	31207403 			; <UNDEFINED> instruction: 0x31207403
			proceed menu;
     910:	31360705 	teqcc	r6, r5, lsl #14
fsm root {
     914:	03050531 	movweq	r0, #21809	; 0x5531
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     918:	054b2e0b 	strbeq	r2, [fp, #-3595]	; 0xfffff1f5
		for (int i=0; i<node_db->index; i++) {
     91c:	20260313 	eorcs	r0, r6, r3, lsl r3
     920:	2e060105 	adfcss	f0, f6, f5
     924:	01000b02 	tsteq	r0, r2, lsl #22
		proceed menu;
     928:	001a0501 	andseq	r0, sl, r1, lsl #10
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     92c:	06800205 	streq	r0, [r0], r5, lsl #4
     930:	aa030000 	bge	c0938 <__ccfg+0xa0990>
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     934:	1c050104 	stfnes	f0, [r5], {4}
     938:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
     93c:	06030501 	streq	r0, [r3], -r1, lsl #10
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     940:	28020c03 	stmdacs	r2, {r0, r1, sl, fp}
     944:	06260501 	strteq	r0, [r6], -r1, lsl #10
			strncpy(reason, "Error: improper ID", 50);
     948:	4a0b0501 	bmi	2c1d54 <__ccfg+0x2a1dac>
     94c:	31060305 	tstcc	r6, r5, lsl #6
     950:	4a0e0330 	bmi	381618 <__ccfg+0x361670>
			proceed error;
     954:	054a1103 	strbeq	r1, [sl, #-259]	; 0xfffffefd
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     958:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     95c:	06056607 	streq	r6, [r5], -r7, lsl #12
		ser_in(get_record_to_create, user_provided_record, 20);
     960:	1e070522 	cfsh32ne	mvfx0, mvfx7, #18
     964:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     968:	01060605 	tsteq	r6, r5, lsl #12
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     96c:	21060405 	tstcs	r6, r5, lsl #8
		create_message->gid = node_db->gid;
     970:	03052f3d 	movweq	r2, #24381	; 0x5f3d
     974:	054d4c1a 	strbeq	r4, [sp, #-3098]	; 0xfffff3e6
     978:	2006029e 	mulcs	r6, lr, r2
		create_message->tpe = CREATE_RECORD;
     97c:	062e0305 	strteq	r0, [lr], -r5, lsl #6
		create_message->request_number = generate_request_num();
     980:	050567a1 	streq	r6, [r5, #-1953]	; 0xfffff85f
		create_message->sender_id = node_db->id;
     984:	66082303 	strvs	r2, [r8], -r3, lsl #6
     988:	062e6003 	strteq	r6, [lr], -r3
     98c:	06202003 	strteq	r2, [r0], -r3
		strncpy(create_message->record, user_provided_record, 20);
     990:	1603052f 	strne	r0, [r3], -pc, lsr #10
		create_message->receiver_id = user_provided_receiver_id;
     994:	3e68134e 	cdpcc	3, 6, cr1, cr8, cr14, {2}
		strncpy(create_message->record, user_provided_record, 20);
     998:	01060805 	tsteq	r6, r5, lsl #16
		response_checker[0] = create_message->request_number;
     99c:	91030f05 	tstls	r3, r5, lsl #30
		call sender(create_message, wait);
     9a0:	0805207b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r6, sp}
		response_checker[1] = create_message->tpe;
     9a4:	2e04ef03 	cdpcs	15, 0, cr14, cr4, cr3, {0}
     9a8:	03060505 	movweq	r0, #25861	; 0x6505
		call sender(create_message, wait);
     9ac:	05207b91 	streq	r7, [r0, #-2961]!	; 0xfffff46f
     9b0:	f5030603 			; <UNDEFINED> instruction: 0xf5030603
     9b4:	0f050104 	svceq	0x00050104
     9b8:	207b8b03 	rsbscs	r8, fp, r3, lsl #22
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     9bc:	21060505 	tstcs	r6, r5, lsl #10
     9c0:	f2030405 	vshl.s8	d0, d5, d3
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     9c4:	03050104 	movweq	r0, #20740	; 0x5104
     9c8:	134d3114 	movtne	r3, #53524	; 0xd114
     9cc:	15060805 	strne	r0, [r6, #-2053]	; 0xfffff7fb
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9d0:	061d0305 	ldreq	r0, [sp], -r5, lsl #6
     9d4:	06080569 	streq	r0, [r8], -r9, ror #10
			strncpy(reason, "Error: improper node ID", 50);
     9d8:	06050501 	streq	r0, [r5], -r1, lsl #10
     9dc:	3c7afc03 	ldclcc	12, cr15, [sl], #-12
			proceed error;
     9e0:	01060e05 	tsteq	r6, r5, lsl #28
     9e4:	21060505 	tstcs	r6, r5, lsl #10
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9e8:	86030405 	strhi	r0, [r3], -r5, lsl #8
     9ec:	03050105 	movweq	r0, #20741	; 0x5105
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9f0:	060e0515 			; <UNDEFINED> instruction: 0x060e0515
     9f4:	20180501 	andscs	r0, r8, r1, lsl #10
     9f8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
		if (us_pr_in < 0 || us_pr_in > 40){
     9fc:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
			strncpy(reason, "Error: invalid index", 50);
     a00:	03061a05 	movweq	r1, #27141	; 0x6a05
     a04:	053c7ef1 	ldreq	r7, [ip, #-3825]!	; 0xfffff10f
     a08:	01950305 	orrseq	r0, r5, r5, lsl #6
			proceed error;
     a0c:	06120520 	ldreq	r0, [r2], -r0, lsr #10
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a10:	061d052c 	ldreq	r0, [sp], -ip, lsr #10
     a14:	3c030501 	cfstr32cc	mvfx0, [r3], {1}
     a18:	33060405 	movwcc	r0, #25605	; 0x6405
		delete_record->gid = node_db->gid;
     a1c:	41140305 	tstmi	r4, r5, lsl #6
		delete_record->tpe = DELETE_RECORD;
     a20:	01065605 	tsteq	r6, r5, lsl #12
		delete_record->request_number = generate_request_num();
     a24:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
     a28:	03052056 	movweq	r2, #20566	; 0x5056
		call sender(delete_record, wait);
     a2c:	03590620 	cmpeq	r9, #32, 12	; 0x2000000
		delete_record->sender_id = node_db->id;
     a30:	08053c0e 	stmdaeq	r5, {r1, r2, r3, sl, fp, ip, sp}
		delete_record->receiver_id = user_provided_receiver_id;
     a34:	06050106 	streq	r0, [r5], -r6, lsl #2
		delete_record->record_index = us_pr_in;
     a38:	0604054a 	streq	r0, [r4], -sl, asr #10
     a3c:	053d5921 	ldreq	r5, [sp, #-2337]!	; 0xfffff6df
		response_checker[0] = delete_record->request_number;
     a40:	05131603 	ldreq	r1, [r3, #-1539]	; 0xfffff9fd
		call sender(delete_record, wait);
     a44:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
     a48:	20053f17 	andcs	r3, r5, r7, lsl pc
     a4c:	1e37051f 	mrcne	5, 1, r0, cr7, cr15, {0}
     a50:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     a54:	01062005 	tsteq	r6, r5
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a58:	1f2f1705 	svcne	0x002f1705
     a5c:	21060305 	tstcs	r6, r5, lsl #6
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a60:	06240513 			; <UNDEFINED> instruction: 0x06240513
     a64:	2e220501 	cfsh64cs	mvdx0, mvdx2, #1
     a68:	21060305 	tstcs	r6, r5, lsl #6
		if (get_id < 1 || get_id > 25){
     a6c:	01062605 	tsteq	r6, r5, lsl #12
     a70:	05230c05 	streq	r0, [r3, #-3077]!	; 0xfffff3fb
			strncpy(reason, "Error: improper node ID", 50);
     a74:	0c051d26 	stceq	13, cr1, [r5], {38}	; 0x26
     a78:	1d1d0523 	cfldr32ne	mvfx0, [sp, #-140]	; 0xffffff74
     a7c:	21060305 	tstcs	r6, r5, lsl #6
			proceed error;
     a80:	01061e05 	tsteq	r6, r5, lsl #28
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a84:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     a88:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a8c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     a90:	0405580b 	streq	r5, [r5], #-2059	; 0xfffff7f5
     a94:	05052606 	streq	r2, [r5, #-1542]	; 0xfffff9fa
		if (beg_for_index < 0 || beg_for_index > 40){
     a98:	2e7f8903 	vaddcs.f16	s17, s30, s6	; <UNPREDICTABLE>
     a9c:	32333232 	eorscc	r3, r3, #536870915	; 0x20000003
			strncpy(reason, "Error: invalid index", 50);
     aa0:	04053232 	streq	r3, [r5], #-562	; 0xfffffdce
     aa4:	052e2e03 	streq	r2, [lr, #-3587]!	; 0xfffff1fd
			proceed error;
     aa8:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
     aac:	05052006 	streq	r2, [r5, #-6]
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ab0:	3d595906 	vldrcc.16	s11, [r9, #-12]	; <UNPREDICTABLE>
     ab4:	050e2605 	streq	r2, [lr, #-1541]	; 0xfffff9fb
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
     abc:	2b030670 	blcs	c2484 <__ccfg+0xa24dc>
     ac0:	1503052e 	strne	r0, [r3, #-1326]	; 0xfffffad2
		retrieve_record->gid = node_db->gid;
     ac4:	01061b05 	tsteq	r6, r5, lsl #22
		retrieve_record->tpe = RETRIEVE_RECORD;
     ac8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
		retrieve_record->request_number = generate_request_num();
     acc:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     ad0:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
		retrieve_record->receiver_id = get_id;
     ad4:	17052104 	strne	r2, [r5, -r4, lsl #2]
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ad8:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
		retrieve_record->record_index = beg_for_index;
     adc:	5b030521 	blpl	c1f68 <__ccfg+0xa1fc0>
     ae0:	01060605 	tsteq	r6, r5, lsl #12
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ae4:	2f060405 	svccs	0x00060405
		response_checker[0] = retrieve_record->request_number;
     ae8:	01061705 	tsteq	r6, r5, lsl #14
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     aec:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
		response_checker[1] = retrieve_record->tpe;
     af0:	04051f17 	streq	r1, [r5], #-3863	; 0xfffff0e9
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     af4:	03052106 	movweq	r2, #20742	; 0x5106
     af8:	05172702 	ldreq	r2, [r7, #-1794]	; 0xfffff8fe
		call sender(retrieve_record, wait);
     afc:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
     b00:	04052e05 	streq	r2, [r5], #-3589	; 0xfffff1fb
     b04:	1a053d06 	bne	14ff24 <__ccfg+0x12ff7c>
     b08:	7eb20306 	cdpvc	3, 11, cr0, cr2, cr6, {0}
     b0c:	0305053c 	movweq	r0, #21820	; 0x553c
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     b10:	052001d2 	streq	r0, [r0, #-466]!	; 0xfffffe2e
     b14:	11052204 	tstne	r5, r4, lsl #4
		if(node_db->data_base.item_count != 0){
     b18:	1a051c06 	bne	147b38 <__ccfg+0x127b90>
     b1c:	03050106 	movweq	r0, #20742	; 0x5106
     b20:	0342063c 	movteq	r0, #9788	; 0x263c
		ser_out(loop_through_data, "\r\n");
     b24:	684d3c0d 	stmdavs	sp, {r0, r2, r3, sl, fp, ip, sp}^
     b28:	01062705 	tsteq	r6, r5, lsl #14
		proceed menu;
     b2c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
		delete_all(node_db);
     b30:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
     b34:	1503053d 	strne	r0, [r3, #-1341]	; 0xfffffac3
		proceed menu;
     b38:	05135c4d 	ldreq	r5, [r3, #-3149]	; 0xfffff3b3
     b3c:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
		delay(3000, timeout);
     b40:	37053d20 	strcc	r3, [r5, -r0, lsr #26]
     b44:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
		when(&response_flag, menu);
     b48:	06200521 	strteq	r0, [r0], -r1, lsr #10
     b4c:	2e170501 	cfmul32cs	mvfx0, mvfx7, mvfx1
		release;
     b50:	21060305 	tstcs	r6, r5, lsl #6
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b54:	01061705 	tsteq	r6, r5, lsl #14
     b58:	2f060305 	svccs	0x00060305
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b5c:	01062405 	tsteq	r6, r5, lsl #8
     b60:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
     b64:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     b68:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
		for (int i=0; i<node_db->index; i++) {
     b6c:	26052203 	strcs	r2, [r5], -r3, lsl #4
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b70:	2203051e 	andcs	r0, r3, #125829120	; 0x7800000
     b74:	051e1d05 	ldreq	r1, [lr, #-3333]	; 0xfffff2fb
     b78:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     b7c:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
     b80:	1f052103 	svcne	0x00052103
     b84:	0603052d 	streq	r0, [r3], -sp, lsr #10
     b88:	2705312f 	strcs	r3, [r5, -pc, lsr #2]
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b8c:	17050106 	strne	r0, [r5, -r6, lsl #2]
     b90:	230c0520 	movwcs	r0, #50464	; 0xc520
     b94:	051d2705 	ldreq	r2, [sp, #-1797]	; 0xfffff8fb
     b98:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b9c:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
     ba0:	2705220c 	strcs	r2, [r5, -ip, lsl #4]
		ser_out(timeout, "\r\nFailed to reach the destination");
     ba4:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     ba8:	01080522 	tsteq	r8, r2, lsr #10
		proceed menu;
     bac:	01060c05 	tsteq	r6, r5, lsl #24
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     bb0:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
     bb4:	053c0666 	ldreq	r0, [ip, #-1638]!	; 0xfffff99a
     bb8:	010c0303 	tsteq	ip, r3, lsl #6
		proceed menu;
     bbc:	2705684d 	strcs	r6, [r5, -sp, asr #16]
}
     bc0:	06050106 	streq	r0, [r5], -r6, lsl #2
     bc4:	06040520 	streq	r0, [r4], -r0, lsr #10
     bc8:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
     bcc:	684d1503 	stmdavs	sp, {r0, r1, r8, sl, ip}^
     bd0:	01060605 	tsteq	r6, r5, lsl #12
     bd4:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
     bd8:	03053d59 	movweq	r3, #23897	; 0x5d59
     bdc:	37051316 	smladcc	r5, r6, r3, r1
     be0:	1f050106 	svcne	0x00050106
     be4:	1f37053d 	svcne	0x0037053d
     be8:	21060305 	tstcs	r6, r5, lsl #6
     bec:	01061f05 	tsteq	r6, r5, lsl #30
     bf0:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
     bf4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     bf8:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     bfc:	052f0603 	streq	r0, [pc, #-1539]!	; 601 <receiver+0x389>
     c00:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
     c04:	03052e21 	movweq	r2, #24097	; 0x5e21
     c08:	25052106 	strcs	r2, [r5, #-262]	; 0xfffffefa
     c0c:	0c050106 	stfeqs	f0, [r5], {6}
     c10:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
     c14:	20770325 	rsbscs	r0, r7, r5, lsr #6
     c18:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
     c1c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     c20:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
     c24:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
     c28:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
     c2c:	05400603 	strbeq	r0, [r0, #-1539]	; 0xfffff9fd
     c30:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
static void devinit_uart (int devnum) {
     c34:	03052026 	movweq	r2, #20518	; 0x5026
	adddevfunc (ioreq_uart_a, devnum);
     c38:	26052106 	strcs	r2, [r5], -r6, lsl #2
     c3c:	0c050106 	stfeqs	f0, [r5], {6}
void udelay (volatile word n) {
     c40:	1e260522 	cfsh64ne	mvdx0, mvdx6, #18
     c44:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
	while (n) {
     c48:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     c4c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
}
     c50:	6505580b 	strvs	r5, [r5, #-2059]	; 0xfffff7f5
	while (n--);
     c54:	03053c06 	movweq	r3, #23558	; 0x5c06
     c58:	4d010c03 	stcmi	12, cr0, [r1, #-12]
     c5c:	06120568 	ldreq	r0, [r2], -r8, ror #10
		n--;
     c60:	20060501 	andcs	r0, r6, r1, lsl #10
     c64:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
     c68:	03053d59 	movweq	r3, #23897	; 0x5d59
void mdelay (volatile word n) {
     c6c:	05684d15 	strbeq	r4, [r8, #-3349]!	; 0xfffff2eb
     c70:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	while (n) {
     c74:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
     c78:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
}
     c7c:	3905135a 	stmdbcc	r5, {r1, r3, r4, r6, r8, r9, ip}
		udelay (999);
     c80:	21050106 	tstcs	r5, r6, lsl #2
     c84:	1f39053d 	svcne	0x0039053d
		n--;
     c88:	21060305 	tstcs	r6, r5, lsl #6
     c8c:	01062105 	tsteq	r6, r5, lsl #2
     c90:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
     c94:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
void __pi_ondomain (lword d) {
     c98:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
     c9c:	052f0603 	streq	r0, [pc, #-1539]!	; 6a1 <root+0x21>
		if (__pi_systat.effpdm > 1)
     ca0:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
     ca4:	03052e23 	movweq	r2, #24099	; 0x5e23
			__pi_systat.effpdm = 1;
     ca8:	27052106 	strcs	r2, [r5, -r6, lsl #2]
	PRCMPowerDomainOn (d);
     cac:	20050106 	andcs	r0, r5, r6, lsl #2
     cb0:	1f270521 	svcne	0x00270521
     cb4:	05240305 	streq	r0, [r4, #-773]!	; 0xfffffcfb
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     cb8:	03051c1e 	movweq	r1, #23582	; 0x5c1e
     cbc:	21052106 	tstcs	r5, r6, lsl #2
     cc0:	20051306 	andcs	r1, r5, r6, lsl #6
	__pi_systat.ondmns |= d;
     cc4:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
     cc8:	06210521 	strteq	r0, [r1], -r1, lsr #10
}
     ccc:	06030501 	streq	r0, [r3], -r1, lsl #10
     cd0:	17053030 	smladxne	r5, r0, r0, r3
void __pi_offdomain (lword d) {
     cd4:	28050106 	stmdacs	r5, {r1, r2, r8}
     cd8:	22030520 	andcs	r0, r3, #32, 10	; 0x8000000
	PRCMPowerDomainOff (d);
     cdc:	051e2805 	ldreq	r2, [lr, #-2053]	; 0xfffff7fb
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ce0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     ce4:	05010628 	streq	r0, [r1, #-1576]	; 0xfffff9d8
     ce8:	3e2f0603 	cfmadda32cc	mvax0, mvax0, mvfx15, mvfx3
	if (d & PRCM_DOMAIN_RFCORE) {
     cec:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     cf0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cf4:	6705740b 	strvs	r7, [r5, -fp, lsl #8]
     cf8:	03053c06 	movweq	r3, #23558	; 0x5c06
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cfc:	18054d15 	stmdane	r5, {r0, r2, r4, r8, sl, fp, lr}
     d00:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	__pi_systat.ondmns &= ~d;
     d04:	0603052e 	streq	r0, [r3], -lr, lsr #10
     d08:	4b3f4b4f 	blmi	fd3a4c <__ccfg+0xfb3aa4>
}
     d0c:	054b593f 	strbeq	r5, [fp, #-2367]	; 0xfffff6c1
     d10:	7ed50304 	cdpvc	3, 13, cr0, cr5, cr4, {0}
void __pi_syserror (word ec, const char *m) {
     d14:	06060520 	streq	r0, [r6], -r0, lsr #10
	diag ("SYSERR: %x, %s", ec, m);
     d18:	06050501 	streq	r0, [r5], -r1, lsl #10
     d1c:	4c040521 	cfstr32mi	mvfx0, [r4], {33}	; 0x21
     d20:	01063d05 	tsteq	r6, r5, lsl #26
     d24:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
     d28:	0405203d 	streq	r2, [r5], #-61	; 0xffffffc3
     d2c:	06230520 	strteq	r0, [r3], -r0, lsr #10
		all_leds_blink;
     d30:	06240554 			; <UNDEFINED> instruction: 0x06240554
     d34:	06050501 	streq	r0, [r5], -r1, lsl #10
     d38:	2e019f03 	cdpcs	15, 0, cr9, cr1, cr3, {0}
     d3c:	0601b505 	streq	fp, [r1], -r5, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d40:	2e05053c 	mcrcs	5, 0, r0, cr5, cr12, {1}
     d44:	8f063705 	svchi	0x00063705
     d48:	01063805 	tsteq	r6, r5, lsl #16
     d4c:	20061305 	andcs	r1, r6, r5, lsl #6
     d50:	01061f05 	tsteq	r6, r5, lsl #30
     d54:	05202a05 	streq	r2, [r0, #-2565]!	; 0xfffff5fb
	while (1) {
     d58:	0c052e04 	stceq	14, cr2, [r5], {4}
     d5c:	2105053c 	tstcs	r5, ip, lsr r5
     d60:	03060305 	movweq	r0, #25349	; 0x6305
     d64:	404b3c10 	submi	r3, fp, r0, lsl ip
void tci_run_delay_timer () {
     d68:	3d010559 	cfstr32cc	mvfx0, [r1, #-356]	; 0xfffffe9c
	setdel = __pi_mintk - __pi_old;
     d6c:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
     d70:	022e0601 	eoreq	r0, lr, #1048576	; 0x100000
     d74:	01010036 	tsteq	r1, r6, lsr r0
     d78:	00001562 	andeq	r1, r0, r2, ror #10
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d7c:	02a10003 	adceq	r0, r1, #3
     d80:	01020000 	mrseq	r0, (UNDEF: 2)
     d84:	000d0efb 	strdeq	r0, [sp], -fp
     d88:	01010101 	tsteq	r1, r1, lsl #2
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d8c:	01000000 	mrseq	r0, (UNDEF: 0)
	sti_tim;
     d90:	2f010000 	svccs	0x00010000
}
     d94:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     d98:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     d9c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     da0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     da4:	706f746b 	rsbvc	r7, pc, fp, ror #8
	cli_aux;
     da8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     dac:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db0:	4349502f 	movtmi	r5, #36911	; 0x902f
     db4:	502f534f 	eorpl	r5, pc, pc, asr #6
     db8:	534f6369 	movtpl	r6, #62313	; 0xf369
     dbc:	3143432f 	cmpcc	r3, pc, lsr #6
	sti_aux;
     dc0:	00585833 	subseq	r5, r8, r3, lsr r8
}
     dc4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d10 <__pi_offdomain+0x3c>
     dc8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
     dcc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
void AONRTCIntHandler () {
     dd0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     dd4:	6f746b73 	svcvs	0x00746b73
     dd8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     ddc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		if (__pi_utims [0] == 0)
     de0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     de4:	2f534f43 	svccs	0x00534f43
		if (*(__pi_utims [0])) {
     de8:	4f636950 	svcmi	0x00636950
     dec:	43432f53 	movtmi	r2, #16211	; 0x3f53
			(*(__pi_utims [0]))--;
     df0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
		if (__pi_utims [1] == 0)
     df4:	3143432f 	cmpcc	r3, pc, lsr #6
		if (*(__pi_utims [1])) {
     df8:	57585833 	smmlarpl	r8, r3, r8, r5
			aux_timer_inactive = 0;
     dfc:	2f455241 	svccs	0x00455241
			(*(__pi_utims [1]))--;
     e00:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		if (__pi_utims [2] == 0)
     e04:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		if (*(__pi_utims [2])) {
     e08:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
			(*(__pi_utims [2]))--;
     e0c:	2f656d6f 	svccs	0x00656d6f
		if (__pi_utims [3] != 0) {
     e10:	70657473 	rsbvc	r7, r5, r3, ror r4
			if (*(__pi_utims [3])) {
     e14:	2f6e6568 	svccs	0x006e6568
				aux_timer_inactive = 0;
     e18:	6b736544 	blvs	1cda330 <__ccfg+0x1cba388>
				(*(__pi_utims [3]))--;
     e1c:	2f706f74 	svccs	0x00706f74
	if (__pi_systat.ledsts) {
     e20:	4f534c4f 	svcmi	0x00534c4f
     e24:	2f54454e 	svccs	0x0054454e
		if (__pi_systat.ledblc++ == 0) {
     e28:	4f434950 	svcmi	0x00434950
     e2c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			if (__pi_systat.ledblk) {
     e30:	2f534f63 	svccs	0x00534f63
     e34:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     e38:	4f492f73 	svcmi	0x00492f73
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e3c:	6f682f00 	svcvs	0x00682f00
     e40:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
				if (__pi_systat.ledsts & 0x2)
     e44:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     e48:	442f6e65 	strtmi	r6, [pc], #-3685	; e50 <AONRTCIntHandler+0x80>
     e4c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				if (__pi_systat.ledsts & 0x4)
     e50:	4f2f706f 	svcmi	0x002f706f
				__pi_systat.ledblk = 0;
     e54:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     e58:	502f5445 	eorpl	r5, pc, r5, asr #8
			if (__pi_systat.fstblk)
     e5c:	534f4349 	movtpl	r4, #62281	; 0xf349
     e60:	6369502f 	cmnvs	r9, #47	; 0x2f
				__pi_systat.ledblc = 200;
     e64:	502f534f 	eorpl	r5, pc, pc, asr #6
	if (events & AON_RTC_EVFLAGS_CH0) {
     e68:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
		cli_tim;
     e6c:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
		__pi_new += setdel;
     e70:	73726f73 	cmnvc	r2, #460	; 0x1cc
     e74:	6f682f00 	svcvs	0x00682f00
		setdel = 0;
     e78:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		RISE_N_SHINE;
     e7c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		__pi_new += setdel;
     e80:	442f6e65 	strtmi	r6, [pc], #-3685	; e88 <AONRTCIntHandler+0xb8>
		RISE_N_SHINE;
     e84:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     e88:	4f2f706f 	svcmi	0x002f706f
		aux_timer_inactive = 1;
     e8c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     e90:	502f5445 	eorpl	r5, pc, r5, asr #8
				if (__pi_systat.ledsts & 0x1)
     e94:	534f4349 	movtpl	r4, #62281	; 0xf349
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e98:	6369502f 	cmnvs	r9, #47	; 0x2f
     e9c:	6b2f534f 	blvs	bd5be0 <__ccfg+0xbb5c38>
				if (__pi_systat.ledsts & 0x2)
     ea0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     ea4:	752f006c 	strvc	r0, [pc, #-108]!	; e40 <AONRTCIntHandler+0x70>
     ea8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; ce4 <__pi_offdomain+0x10>
				if (__pi_systat.ledsts & 0x8)
     eac:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
				__pi_systat.ledblk = 1;
     eb0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     eb4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
		if (aux_timer_inactive) {
     eb8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
			cli_aux;
     ebc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     ec0:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
     ec4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     ec8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     ecc:	2f006564 	svccs	0x00006564
     ed0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     ed4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     ed8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     edc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     ee0:	706f746b 	rsbvc	r7, pc, fp, ror #8
word tci_update_delay_ticks (Boolean force) {
     ee4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	cli_tim;
     ee8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     eec:	4349502f 	movtmi	r5, #36911	; 0x902f
	if (setdel) {
     ef0:	502f534f 	eorpl	r5, pc, pc, asr #6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ef4:	534f6369 	movtpl	r6, #62313	; 0xf369
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ef8:	616d0000 	cmnvs	sp, r0
     efc:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
     f00:	00000100 	andeq	r0, r0, r0, lsl #2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f04:	5f737973 	svcpl	0x00737973
				AON_RTC_O_CH0CMP)) - gettav ());
     f08:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
	return NO;
     f0c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
			setdel = 0;
     f10:	6d630000 	stclvs	0, cr0, [r3, #-0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f14:	5f736973 	svcpl	0x00736973
     f18:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
}
     f1c:	00010068 	andeq	r0, r1, r8, rrx
		sti_tim;
     f20:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
		return YES;
     f24:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     f28:	69000002 	stmdbvs	r0, {r1}
     f2c:	745f7172 	ldrbvc	r7, [pc], #-370	; f34 <__pi_uart_setrate>
     f30:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f34:	64656c5f 	strbtvs	r6, [r5], #-3167	; 0xfffff3a1
	UARTDisable (UART0_BASE);
     f38:	00682e73 	rsbeq	r2, r8, r3, ror lr
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f3c:	75000003 	strvc	r0, [r0, #-3]
	UARTDisable (UART0_BASE);
     f40:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
	UARTConfigSetExpClk (UART0_BASE,
     f44:	00020068 	andeq	r0, r2, r8, rrx
     f48:	71726900 	cmnvc	r2, r0, lsl #18
     f4c:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
     f50:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f54:	0300682e 	movweq	r6, #2094	; 0x82e
     f58:	72690000 	rsbvc	r0, r9, #0
     f5c:	69705f71 	ldmdbvs	r0!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f60:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
     f64:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
     f68:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
	urates [0] = rate;
     f6c:	72700000 	rsbsvc	r0, r0, #0
}
     f70:	682e6d63 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}
     f74:	00000200 	andeq	r0, r0, r0, lsl #4
     f78:	5f6e6f61 	svcpl	0x006e6f61
     f7c:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
     f80:	00020068 	andeq	r0, r2, r8, rrx
     f84:	72777000 	rsbsvc	r7, r7, #0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f88:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     f8c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     f90:	61000002 	tstvs	r0, r2
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f94:	695f6e6f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     f98:	682e636f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f9c:	00000200 	andeq	r0, r0, r0, lsl #4
     fa0:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
	__pi_uart_setrate (urates [0], __pi_uart);
     fa4:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     fa8:	00682e72 	rsbeq	r2, r8, r2, ror lr
     fac:	61000005 	tstvs	r0, r5
     fb0:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
     fb4:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
     fb8:	00000200 	andeq	r0, r0, r0, lsl #4
     fbc:	5f6e6f61 	svcpl	0x006e6f61
	switch (operation) {
     fc0:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
static int ioreq_uart_a (int operation, char *buf, int len) {
     fc4:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     fc8:	00000200 	andeq	r0, r0, r0, lsl #4
     fcc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     fd0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     fd4:	00000600 	andeq	r0, r0, r0, lsl #12
				*buf++ = uart_a_read;
     fd8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     fdc:	0100682e 	tsteq	r0, lr, lsr #16
			while (len && uart_a_char_available) {
     fe0:	616d0000 	cmnvs	sp, r0
     fe4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     fe8:	00000100 	andeq	r0, r0, r0, lsl #2
			if (len != operation) {
     fec:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
}
     ff0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     ff4:	0100682e 	tsteq	r0, lr, lsr #16
			uart_a_disable_int;
     ff8:	75620000 	strbvc	r0, [r2, #-0]!
			if (uart_a_char_available) {
     ffc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
				*buf++ = uart_a_read;
    1000:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			uart_a_disable_int;
    1004:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1008:	73000001 	movwvc	r0, #1
			if (uart_a_char_available) {
    100c:	6f697379 	svcvs	0x00697379
    1010:	0700682e 	streq	r6, [r0, -lr, lsr #16]
				uart_a_enable_int;
    1014:	656b0000 	strbvs	r0, [fp, #-0]!
    1018:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
				goto Redo_rx;
    101c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    1020:	05000000 	streq	r0, [r0, #-0]
    1024:	02050027 	andeq	r0, r5, #39	; 0x27
			return -2;
    1028:	00000c34 	andeq	r0, r0, r4, lsr ip
    102c:	0106fc03 	tsteq	r6, r3, lsl #24	; <UNPREDICTABLE>
				uart_a_write (*buf);
    1030:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1034:	05100627 	ldreq	r0, [r0, #-1575]	; 0xfffff9d9
			while (len && uart_a_room_in_tx) {
    1038:	05022202 	streq	r2, [r2, #-514]	; 0xfffffdfe
    103c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1040:	0205001f 	andeq	r0, r5, #31
			if (len != operation) {
    1044:	00000c40 	andeq	r0, r0, r0, asr #24
			uart_a_disable_int;
    1048:	05011803 	streq	r1, [r1, #-2051]	; 0xfffff7fd
    104c:	08053d02 	stmdaeq	r5, {r1, r8, sl, fp, ip, sp}
			if (uart_a_room_in_tx) {
    1050:	06090501 	streq	r0, [r9], -r1, lsl #10
    1054:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
				uart_a_enable_int;
    1058:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
    105c:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
				*buf++ = uart_a_read;
    1060:	0d051b02 	vstreq	d1, [r5, #-8]
			if (uart_a_room_in_tx) {
    1064:	01080501 	tsteq	r8, r1, lsl #10
				uart_a_write (*buf);
    1068:	01060a05 	tsteq	r6, r5, lsl #20
    106c:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1070:	05340603 	ldreq	r0, [r4, #-1539]!	; 0xfffff9fd
    1074:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
			uart_a_enable_int;
    1078:	01010007 	tsteq	r1, r7
    107c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    1080:	000c6c02 	andeq	r6, ip, r2, lsl #24
			return 0;
    1084:	011f0300 	tsteq	pc, r0, lsl #6
			if (len == UART_CNTRL_SETRATE) {
    1088:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
				if (__pi_uart_setrate (*((word*)buf),
    108c:	09050108 	stmdbeq	r5, {r3, r8}
    1090:	08050106 	stmdaeq	r5, {r1, r2, r8}
    1094:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
				syserror (EREQPAR, "uar");
    1098:	39060305 	stmdbcc	r6, {r0, r2, r8, r9}
			syserror (ENOOPER, "uai");
    109c:	0604054b 	streq	r0, [r4], -fp, asr #10
			if (len == UART_CNTRL_GETRATE) {
    10a0:	00070201 	andeq	r0, r7, r1, lsl #4
				return 1;
    10a4:	1e050101 	adfnes	f0, f5, f1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    10a8:	98020500 	stmdals	r2, {r8, sl}
			syserror (ENOOPER, "uai");
    10ac:	0300000c 	movweq	r0, #12
    10b0:	0205012a 	andeq	r0, r5, #-2147483638	; 0x8000000a
    10b4:	061e0516 			; <UNDEFINED> instruction: 0x061e0516
    10b8:	2405050e 	strcs	r0, [r5], #-1294	; 0xfffffaf2
    10bc:	051c1e05 	ldreq	r1, [ip, #-3589]	; 0xfffff1fb
    10c0:	03052405 	movweq	r2, #21509	; 0x5405
    10c4:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
    10c8:	06050106 	streq	r0, [r5], -r6, lsl #2
    10cc:	0604052e 	streq	r0, [r4], -lr, lsr #10
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    10d0:	06170521 	ldreq	r0, [r7], -r1, lsr #10
void UART0IntHandler () {
    10d4:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10d8:	3b05593f 	blcc	1575dc <__ccfg+0x137634>
    10dc:	01080501 	tsteq	r8, r1, lsl #10
    10e0:	01060905 	tsteq	r6, r5, lsl #18
    10e4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    10e8:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10ec:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    10f0:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
		RISE_N_SHINE;
    10f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    10f8:	0205001f 	andeq	r0, r5, #31
		i_trigger (devevent (UART_A, READ));
    10fc:	00000cd4 	ldrdeq	r0, [r0], -r4
    1100:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    1104:	1f051702 	svcne	0x00051702
    1108:	02050d06 	andeq	r0, r5, #384	; 0x180
    110c:	1b1f0525 	blne	7c25a8 <__ccfg+0x7a2600>
    1110:	06250205 	strteq	r0, [r5], -r5, lsl #4
    1114:	013c053d 	teqeq	ip, sp, lsr r5
    1118:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    111c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1120:	02054a08 	andeq	r4, r5, #8, 20	; 0x8000
    1124:	05053006 	streq	r3, [r5, #-6]
    1128:	03050106 	movweq	r0, #20742	; 0x5106
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    112c:	12054b06 	andne	r4, r5, #6144	; 0x1800
    1130:	27050106 	strcs	r0, [r5, -r6, lsl #2]
    1134:	20060520 	andcs	r0, r6, r0, lsr #10
		i_trigger (devevent (UART_A, WRITE));
    1138:	21060405 	tstcs	r6, r5, lsl #8
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    113c:	01062405 	tsteq	r6, r5, lsl #8
    1140:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
		RISE_N_SHINE;
    1144:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    1148:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    114c:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
		i_trigger (devevent (UART_A, WRITE));
    1150:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1154:	02050013 	andeq	r0, r5, #19
    1158:	00000000 	andeq	r0, r0, r0
    115c:	0100ce03 	tsteq	r0, r3, lsl #28
    1160:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1164:	051e0613 	ldreq	r0, [lr, #-1555]	; 0xfffff9ed
    1168:	33062202 	movwcc	r2, #25090	; 0x6202
    116c:	13030536 	movwne	r0, #13622	; 0x3536
    1170:	04050204 	streq	r0, [r5], #-516	; 0xfffffdfc
    1174:	0101f003 	tsteq	r1, r3	; <UNPREDICTABLE>
    1178:	065c0530 			; <UNDEFINED> instruction: 0x065c0530
}
    117c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1180:	0a05143e 	beq	146280 <__ccfg+0x1262d8>
    1184:	00050210 	andeq	r0, r5, r0, lsl r2
    1188:	2d050101 	stfcss	f0, [r5, #-4]
    118c:	14020500 	strne	r0, [r2], #-1280	; 0xfffffb00
void __buttons_setirq (int val) {
    1190:	0300000d 	movweq	r0, #13
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1194:	05010197 	streq	r0, [r1, #-407]	; 0xfffffe69
    1198:	01011402 	tsteq	r1, r2, lsl #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    119c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    11a0:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    11a4:	03063502 	movweq	r3, #25858	; 0x6502
		bn = BUTTON_GPIO (__button_list [i]);
    11a8:	03044a09 	movweq	r4, #18953	; 0x4a09
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11ac:	b5030305 	strlt	r0, [r3, #-773]	; 0xfffffcfb
    11b0:	0404017f 	streq	r0, [r4], #-383	; 0xfffffe81
    11b4:	03062d05 	movweq	r2, #27909	; 0x6d05
    11b8:	042001cb 	strteq	r0, [r0], #-459	; 0xfffffe35
    11bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    11c0:	3c7f8f03 	ldclcc	15, cr8, [pc], #-12	; 11bc <__buttons_setirq+0x2c>
}
    11c4:	01130305 	tsteq	r3, r5, lsl #6
    11c8:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    11cc:	00eb0329 	rsceq	r0, fp, r9, lsr #6
    11d0:	17050501 	strne	r0, [r5, -r1, lsl #10]
void __pinlist_setirq (int val) {
    11d4:	01062d05 	tsteq	r6, r5, lsl #26
	for (i = 0; i < N_PINLIST; i++) {
    11d8:	03050104 	movweq	r0, #20740	; 0x5104
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11dc:	207f9003 	rsbscs	r9, pc, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11e0:	2d050404 	cfstrscs	mvf0, [r5, #-16]
	for (i = 0; i < N_PINLIST; i++) {
    11e4:	2000f003 	andcs	pc, r0, r3
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11e8:	03050104 	movweq	r0, #20740	; 0x5104
    11ec:	7f900306 	svcvc	0x00900306
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11f0:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
    11f4:	00eb0329 	rsceq	r0, fp, r9, lsr #6
    11f8:	17050501 	strne	r0, [r5, -r1, lsl #10]
	for (i = 0; i < N_PINLIST; i++) {
    11fc:	01062d05 	tsteq	r6, r5, lsl #26
}
    1200:	03050104 	movweq	r0, #20740	; 0x5104
    1204:	7f900306 	svcvc	0x00900306
    1208:	01010120 	tsteq	r1, r0, lsr #2
    120c:	66010101 	strvs	r0, [r1], -r1, lsl #2
void GPIOIntHandler () {
    1210:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
if (buttons_int) {
    1214:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1218:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
	buttons_disable ();
    121c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1220:	01040106 	tsteq	r4, r6, lsl #2
	i_trigger ((aword)&__button_list);
    1224:	da030305 	ble	c1e40 <__ccfg+0xa1e98>
    1228:	0404207e 	streq	r2, [r4], #-126	; 0xffffff82
    122c:	a6032d05 	strge	r2, [r3], -r5, lsl #26
    1230:	01042001 	tsteq	r4, r1
    1234:	03060305 	movweq	r0, #25349	; 0x6305
    1238:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
    123c:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1240:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
    1244:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1248:	01040106 	tsteq	r4, r6, lsl #2
    124c:	03060305 	movweq	r0, #25349	; 0x6305
	RISE_N_SHINE;
    1250:	01207eda 	ldrdeq	r7, [r0, -sl]!
    1254:	01010101 	tsteq	r1, r1, lsl #2
    1258:	2e015801 	cdpcs	8, 0, cr5, cr1, cr1, {0}
if (pin_sensor_int) {
    125c:	02110805 	andseq	r0, r1, #327680	; 0x50000
    1260:	01010009 	tsteq	r1, r9
	i_trigger ((aword)(&__input_pins));
    1264:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    1268:	000d6802 	andeq	r6, sp, r2, lsl #16
    126c:	029d0300 	addseq	r0, sp, #0, 6
    1270:	16020501 	strne	r0, [r2], -r1, lsl #10
    1274:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
    1278:	05241605 	streq	r1, [r4, #-1541]!	; 0xfffff9fb
    127c:	16054a09 	strne	r4, [r5], -r9, lsl #20
    1280:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
    1284:	23060205 	movwcs	r0, #25093	; 0x6205
    1288:	05017603 	streq	r7, [r1, #-1539]	; 0xfffff9fd
    128c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
	__pinsen_disable_and_clear;
    1290:	2e0d0302 	cdpcs	3, 0, cr0, cr13, cr2, {0}
	RISE_N_SHINE;
    1294:	73032f05 	movwvc	r2, #16133	; 0x3f05
    1298:	032a0520 			; <UNDEFINED> instruction: 0x032a0520
    129c:	2f05200a 	svccs	0x0005200a
}
    12a0:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    12a4:	2a052e36 	bcs	14cb84 <__ccfg+0x12cbdc>
    12a8:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    12ac:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    12b0:	022f0601 	eoreq	r0, pc, #1048576	; 0x100000
void system_init () {
    12b4:	0101000b 	tsteq	r1, fp
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12b8:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    12bc:	000da802 	andeq	sl, sp, r2, lsl #16
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12c0:	02aa0300 	adceq	r0, sl, #0, 6
    12c4:	17020501 	strne	r0, [r2, -r1, lsl #10]
    12c8:	1b062105 	blne	1896e4 <__ccfg+0x16973c>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    12cc:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
    12d0:	052e0609 	streq	r0, [lr, #-1545]!	; 0xfffff9f7
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12d4:	69031402 	stmdbvs	r3, {r1, sl, ip}
    12d8:	06110501 	ldreq	r0, [r1], -r1, lsl #10
    12dc:	2e2f0501 	cfsh64cs	mvdx0, mvdx15, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12e0:	17032a05 	strne	r2, [r3, -r5, lsl #20]
    12e4:	032f0520 			; <UNDEFINED> instruction: 0x032f0520
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12e8:	36052069 	strcc	r2, [r5], -r9, rrx
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ec:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f0:	02052017 	andeq	r2, r5, #23
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12f4:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
		pin = (port_confs [i] >> 19) & 0x1f;
    12f8:	0601052e 	streq	r0, [r1], -lr, lsr #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12fc:	00060213 	andeq	r0, r6, r3, lsl r2
		pin = (port_confs [i] >> 19) & 0x1f;
    1300:	1a050101 	bne	14170c <__ccfg+0x121764>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1304:	d0020500 	andle	r0, r2, r0, lsl #10
    1308:	0300000d 	movweq	r0, #13
    130c:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
    1310:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
		if (port_confs [i] & 0x80)
    1314:	050e061a 	streq	r0, [lr, #-1562]	; 0xfffff9e6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1318:	0905240b 	stmdbeq	r5, {r0, r1, r3, sl, sp}
    131c:	0602052e 	streq	r0, [r2], -lr, lsr #10
		if (port_confs [i] & 0x40)
    1320:	06050532 			; <UNDEFINED> instruction: 0x06050532
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1324:	1e2b0514 	mcrne	5, 1, r0, cr11, cr4, {0}
    1328:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    132c:	01060505 	tsteq	r6, r5, lsl #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1330:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1334:	12051518 	andne	r1, r5, #24, 10	; 0x6000000
	all_leds_blink;
    1338:	06050106 	streq	r0, [r5], -r6, lsl #2
    133c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1340:	06070530 			; <UNDEFINED> instruction: 0x06070530
    1344:	20060501 	andcs	r0, r6, r1, lsl #10
    1348:	2f060405 	svccs	0x00060405
    134c:	01061705 	tsteq	r6, r5, lsl #14
    1350:	2f060405 	svccs	0x00060405
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1354:	01061705 	tsteq	r6, r5, lsl #14
    1358:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    135c:	01061205 	tsteq	r6, r5, lsl #4
    1360:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    1364:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1368:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    136c:	04052006 	streq	r2, [r5], #-6
    1370:	17052106 	strne	r2, [r5, -r6, lsl #2]
	IntEnable (INT_AON_RTC_COMB);
    1374:	051f1306 	ldreq	r1, [pc, #-774]	; 1076 <ioreq_uart_a+0xb6>
    1378:	052f0604 	streq	r0, [pc, #-1540]!	; d7c <tci_run_delay_timer+0x14>
    137c:	12051403 	andne	r1, r5, #50331648	; 0x3000000
	__pi_malloc_init ();
    1380:	06050106 	streq	r0, [r5], -r6, lsl #2
	IntEnable (INT_AON_GPIO_EDGE);
    1384:	06030520 	streq	r0, [r3], -r0, lsr #10
    1388:	06070522 	streq	r0, [r7], -r2, lsr #10
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    138c:	20060501 	andcs	r0, r6, r1, lsl #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1390:	21060405 	tstcs	r6, r5, lsl #8
    1394:	13061705 	movwne	r1, #26373	; 0x6705
    1398:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    139c:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
    13a0:	01061205 	tsteq	r6, r5, lsl #4
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    13a4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    13a8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    13ac:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	urates [0] = UART_RATE / 100;
    13b0:	05052007 	streq	r2, [r5, #-7]
    13b4:	18052106 	stmdane	r5, {r1, r2, r8, sp}
	reinit_uart ();
    13b8:	051f1306 	ldreq	r1, [pc, #-774]	; 10ba <ioreq_uart_a+0xfa>
	EXTRA_INITIALIZERS;
    13bc:	042f0605 	strteq	r0, [pc], #-1541	; 13c4 <system_init+0x110>
    13c0:	03020505 	movweq	r0, #9477	; 0x2505
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    13c4:	05017da3 	streq	r7, [r1, #-3491]	; 0xfffff25d
    13c8:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    13cc:	03052e05 	movweq	r2, #24069	; 0x5e05
    13d0:	12053006 	andne	r3, r5, #6
    13d4:	19050106 	stmdbne	r5, {r1, r2, r8}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13d8:	3c060520 	cfstr32cc	mvfx0, [r6], {32}
    13dc:	21060405 	tstcs	r6, r5, lsl #8
			devinit [i] . init (devinit [i] . param);
    13e0:	01061305 	tsteq	r6, r5, lsl #6
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13e4:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    13e8:	07052f14 	smladeq	r5, r4, pc, r2	; <UNPREDICTABLE>
    13ec:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
	IntEnable (INT_UART0_COMB);
    13f0:	06080521 	streq	r0, [r8], -r1, lsr #10
    13f4:	06060501 	streq	r0, [r6], -r1, lsl #10
}
    13f8:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
	tci_run_auxiliary_timer ();
    13fc:	02960329 	addseq	r0, r6, #-1543503872	; 0xa4000000
		diag ("");
    1400:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1404:	01062d05 	tsteq	r6, r5, lsl #26
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1408:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    140c:	7de60306 	stclvc	3, cr0, [r6, #24]!
		diag ("Leftover RAM: %d bytes",
    1410:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    1414:	20080501 	andcs	r0, r8, r1, lsl #10
    1418:	21060605 	tstcs	r6, r5, lsl #12
    141c:	29050404 	stmdbcs	r5, {r2, sl}
    1420:	01029403 	tsteq	r2, r3, lsl #8
    1424:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1428:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    142c:	06050505 	streq	r0, [r5], -r5, lsl #10
    1430:	4a7de803 	bmi	1f7b444 <__ccfg+0x1f5b49c>
    1434:	01061405 	tsteq	r6, r5, lsl #8
    1438:	21060605 	tstcs	r6, r5, lsl #12
    143c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    1440:	06140513 			; <UNDEFINED> instruction: 0x06140513
    1444:	06060501 	streq	r0, [r6], -r1, lsl #10
    1448:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    144c:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
    1450:	0a030106 	beq	c1870 <__ccfg+0xa18c8>
    1454:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    1458:	06130522 	ldreq	r0, [r3], -r2, lsr #10
    145c:	20070501 	andcs	r0, r7, r1, lsl #10
    1460:	2f060505 	svccs	0x00060505
    1464:	01061805 	tsteq	r6, r5, lsl #16
    1468:	0b050104 	bleq	141880 <__ccfg+0x1218d8>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    146c:	02cd0306 	sbceq	r0, sp, #402653184	; 0x18000000
    1470:	1a02052e 	bne	82930 <__ccfg+0x62988>
    1474:	01060505 	tsteq	r6, r5, lsl #10
    1478:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
    147c:	30060c05 	andcc	r0, r6, r5, lsl #24
    1480:	062c0305 	strteq	r0, [ip], -r5, lsl #6
    1484:	060c0522 	streq	r0, [ip], -r2, lsr #10
    1488:	2f0a0501 	svccs	0x000a0501
}
    148c:	051f0c05 	ldreq	r0, [pc, #-3077]	; 88f <root+0x20f>
__attribute__ ((noreturn)) void __pi_release () {
    1490:	0c052203 	sfmeq	f2, 4, [r5], {3}
    1494:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    1498:	4a01132f 	bmi	4615c <__ccfg+0x261b4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    149c:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
	check_stack_overflow;
    14a0:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    14a4:	20450316 	subcs	r0, r5, r6, lsl r3
    14a8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
	update_n_wake (MAX_WORD, NO);
    14ac:	7dc90306 	stclvc	3, cr0, [r9, #24]
    14b0:	0608054a 	streq	r0, [r8], -sl, asr #10
    14b4:	06060501 	streq	r0, [r6], -r1, lsl #10
	for_all_tasks (__pi_curr) {
    14b8:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    14bc:	02c20329 	sbceq	r0, r2, #-1543503872	; 0xa4000000
    14c0:	17050501 	strne	r0, [r5, -r1, lsl #10]
  __ASM volatile ("cpsid i" : : : "memory");
    14c4:	01062d05 	tsteq	r6, r5, lsl #26
	__SLEEP;
    14c8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    14cc:	7dba0306 	ldcvc	3, cr0, [sl, #24]!
    14d0:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    14d4:	20080501 	andcs	r0, r8, r1, lsl #10
	system_event_count ++;
    14d8:	21060605 	tstcs	r6, r5, lsl #12
    14dc:	29050404 	stmdbcs	r5, {r2, sl}
	switch (__pi_systat.effpdm) {
    14e0:	0102c003 	tsteq	r2, r3
    14e4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    14e8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    14ec:	06050505 	streq	r0, [r5], -r5, lsl #10
			__WFI ();
    14f0:	4a7dbc03 	bmi	1f70504 <__ccfg+0x1f5055c>
    14f4:	01061405 	tsteq	r6, r5, lsl #8
    14f8:	21060605 	tstcs	r6, r5, lsl #12
	check_stack_overflow;
    14fc:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    1500:	06140513 			; <UNDEFINED> instruction: 0x06140513
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1504:	06060501 	streq	r0, [r6], -r1, lsl #10
    1508:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			(__pi_curr->code) (tstate (__pi_curr));
    150c:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
			goto Redo;
    1510:	01040106 	tsteq	r4, r6, lsl #2
	for_all_tasks (__pi_curr) {
    1514:	03060305 	movweq	r0, #25349	; 0x6305
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1518:	054a02ce 	strbeq	r0, [sl, #-718]	; 0xfffffd32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    151c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1520:	02300604 	eorseq	r0, r0, #4, 12	; 0x400000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1524:	01010015 	tsteq	r1, r5, lsl r0
    1528:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
    152c:	000ee402 	andeq	lr, lr, r2, lsl #8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1530:	03890300 	orreq	r0, r9, #0, 6
    1534:	16020501 	strne	r0, [r2], -r1, lsl #10
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1538:	0e062d05 	cdpeq	13, 0, cr2, cr6, cr5, {0}
    153c:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
			__WFI ();
    1540:	02052f06 	andeq	r2, r5, #6, 30
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
    1548:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
}
    154c:	03052005 	movweq	r2, #20485	; 0x5005
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1550:	20090306 	andcs	r0, r9, r6, lsl #6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1554:	01060605 	tsteq	r6, r5, lsl #12
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1558:	23060405 	movwcs	r0, #25605	; 0x6405
    155c:	01061a05 	tsteq	r6, r5, lsl #20
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1560:	03060205 	movweq	r0, #25093	; 0x6205
    1564:	052e7ef9 	streq	r7, [lr, #-3833]!	; 0xfffff107
    1568:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    156c:	1a052e2e 	bne	14ce2c <__ccfg+0x12ce84>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1570:	3c018703 	stccc	7, cr8, [r1], {3}
    1574:	2018052f 	andscs	r0, r8, pc, lsr #10
    1578:	051f1705 	ldreq	r1, [pc, #-1797]	; e7b <AONRTCIntHandler+0xab>
    157c:	200a0309 	andcs	r0, sl, r9, lsl #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1580:	76030d05 	strvc	r0, [r3], -r5, lsl #26
    1584:	230b0520 	movwcs	r0, #46368	; 0xb520
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1588:	051d0d05 	ldreq	r0, [sp, #-3333]	; 0xfffff2fb
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    158c:	134d0604 	movtne	r0, #54788	; 0xd604
    1590:	19060105 	stmdbne	r6, {r0, r2, r8}
    1594:	29060305 	stmdbcs	r6, {r0, r2, r8, r9}
    1598:	060a052f 	streq	r0, [sl], -pc, lsr #10
    159c:	00090201 	andeq	r0, r9, r1, lsl #4
			SysCtrlSetRechargeBeforePowerDown
    15a0:	33050101 	movwcc	r0, #20737	; 0x5101
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    15a4:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15a8:	0300000f 	movweq	r0, #15
    15ac:	050105d3 	streq	r0, [r1, #-1491]	; 0xfffffa2d
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15b0:	05171402 	ldreq	r1, [r7, #-1026]	; 0xfffffbfe
    15b4:	79030633 	stmdbvc	r3, {r0, r1, r4, r5, r9, sl}
    15b8:	27020501 	strcs	r0, [r2, -r1, lsl #10]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    15bc:	79033305 	stmdbvc	r3, {r0, r2, r8, r9, ip, sp}
    15c0:	2702053c 	smladxcs	r2, ip, r5, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15c4:	02043e06 	andeq	r3, r4, #6, 28	; 0x60
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15c8:	d5030505 	strle	r0, [r3, #-1285]	; 0xfffffafb
    15cc:	0104017b 	tsteq	r4, fp, ror r1
    15d0:	03060205 	movweq	r0, #25093	; 0x6205
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    15d4:	060104ab 	streq	r0, [r1], -fp, lsr #9
			while (!(AONWUCPowerStatusGet () &
    15d8:	04820903 	streq	r0, [r2], #2307	; 0x903
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15dc:	03240506 			; <UNDEFINED> instruction: 0x03240506
    15e0:	05017dd9 	streq	r7, [r1, #-3545]	; 0xfffff227
    15e4:	23051705 	movwcs	r1, #22277	; 0x5705
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15e8:	01040106 	tsteq	r4, r6, lsl #2
    15ec:	a5030105 	strge	r0, [r3, #-261]	; 0xfffffefb
    15f0:	06042002 	streq	r2, [r4], -r2
    15f4:	db032305 	blle	ca210 <__ccfg+0xaa268>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15f8:	0505207d 	streq	r2, [r5, #-125]	; 0xffffff83
    15fc:	22054f06 	andcs	r4, r5, #6, 30
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1600:	01040106 	tsteq	r4, r6, lsl #2
    1604:	03060205 	movweq	r0, #25093	; 0x6205
			SysCtrlAdjustRechargeAfterPowerDown ();
    1608:	0566029e 	strbeq	r0, [r6, #-670]!	; 0xfffffd62
			reinit_uart ();
    160c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1610:	052f0602 	streq	r0, [pc, #-1538]!	; 1016 <ioreq_uart_a+0x56>
    1614:	02130601 	andseq	r0, r3, #1048576	; 0x100000
}
    1618:	0101000c 	tsteq	r1, ip
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    161c:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    1620:	000f8802 	andeq	r8, pc, r2, lsl #16
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1624:	05ef0300 	strbeq	r0, [pc, #768]!	; 192c <update_n_wake+0x9c>
    1628:	17020501 	strne	r0, [r2, -r1, lsl #10]
    162c:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1630:	017df703 	cmneq	sp, r3, lsl #14	; <UNPREDICTABLE>
    1634:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1638:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    163c:	03020501 	movweq	r0, #9473	; 0x2501
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1640:	04200288 	strteq	r0, [r0], #-648	; 0xfffffd78
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1644:	03230506 			; <UNDEFINED> instruction: 0x03230506
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1648:	04207df8 	strteq	r7, [r0], #-3576	; 0xfffff208
    164c:	06020501 	streq	r0, [r2], -r1, lsl #10
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1650:	4a028503 	bmi	a2a64 <__ccfg+0x82abc>
    1654:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1658:	017cc903 	cmneq	ip, r3, lsl #18
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    165c:	17172d05 	ldrne	r2, [r7, -r5, lsl #26]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1660:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1664:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
			PRCMPowerDomainOff (
    1668:	06020501 	streq	r0, [r2], -r1, lsl #10
    166c:	3c03a903 			; <UNDEFINED> instruction: 0x3c03a903
	__SLEEP;
    1670:	27050604 	strcs	r0, [r5, -r4, lsl #12]
    1674:	0102ce03 	tsteq	r2, r3, lsl #28
  __ASM volatile ("cpsie i" : : : "memory");
    1678:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
	goto Redo;
    167c:	04010624 	streq	r0, [r1], #-1572	; 0xfffff9dc
    1680:	06020501 	streq	r0, [r2], -r1, lsl #10
    1684:	587db203 	ldmdapl	sp!, {r0, r1, r9, ip, sp, pc}^
    1688:	01000e02 	tsteq	r0, r2, lsl #28
    168c:	003d0501 	eorseq	r0, sp, r1, lsl #10
    1690:	0fc00205 	svceq	0x00c00205
    1694:	8f030000 	svchi	0x00030000
    1698:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    169c:	063d0514 			; <UNDEFINED> instruction: 0x063d0514
    16a0:	05052e1e 	streq	r2, [r5, #-3614]	; 0xfffff1e2
    16a4:	820b0306 	andhi	r0, fp, #402653184	; 0x18000000
    16a8:	01060e05 	tsteq	r6, r5, lsl #28
    16ac:	052f0805 	streq	r0, [pc, #-2053]!	; eaf <AONRTCIntHandler+0xdf>
    16b0:	05051f0e 	streq	r1, [r5, #-3854]	; 0xfffff0f2
    16b4:	0a052f06 	beq	14d2d4 <__ccfg+0x12d32c>
    16b8:	0612050f 	ldreq	r0, [r2], -pc, lsl #10
    16bc:	2e0f0520 	cfsh32cs	mvfx0, mvfx15, #16
    16c0:	34060405 	strcc	r0, [r6], #-1029	; 0xfffffbfb
    16c4:	01060705 	tsteq	r6, r5, lsl #14
    16c8:	03060505 	movweq	r0, #25861	; 0x6505
    16cc:	16052e28 	strne	r2, [r5], -r8, lsr #28
    16d0:	01050106 	tsteq	r5, r6, lsl #2
    16d4:	05203403 	streq	r3, [r0, #-1027]!	; 0xfffffbfd
    16d8:	7fa00309 	svcvc	0x00a00309
    16dc:	0304053c 	movweq	r0, #17724	; 0x453c
    16e0:	0805200b 	stmdaeq	r5, {r0, r1, r3, sp}
    16e4:	030e0521 	movweq	r0, #58657	; 0xe521
	cli_tim;
    16e8:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
    16ec:	3c0b0306 	stccc	3, cr0, [fp], {6}
    16f0:	0608054b 	streq	r0, [r8], -fp, asr #10
	diag ("PicOS halted");
    16f4:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
	mdelay (500);
    16f8:	30060505 	andcc	r0, r6, r5, lsl #10
    16fc:	2404054b 	strcs	r0, [r4], #-1355	; 0xfffffab5
	setpowermode (2);
    1700:	03060b05 	movweq	r0, #27397	; 0x6b05
	__PCB = NULL;
    1704:	04054a24 	streq	r4, [r5], #-2596	; 0xfffff5dc
	release;
    1708:	0521062d 	streq	r0, [r1, #-1581]!	; 0xfffff9d3
    170c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    1710:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    1714:	06080520 	streq	r0, [r8], -r0, lsr #10
int main (void) {
    1718:	1e050530 	cfmv64hrne	mvdx5, r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    171c:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    1720:	12050e0a 	andne	r0, r5, #10, 28	; 0xa0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1724:	0f052006 	svceq	0x00052006
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1728:	0604052e 	streq	r0, [r4], -lr, lsr #10
	system_init ();
    172c:	06070535 			; <UNDEFINED> instruction: 0x06070535
	tcv_init ();
    1730:	06040501 	streq	r0, [r4], -r1, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1734:	08054b34 	stmdaeq	r5, {r2, r4, r5, r8, r9, fp, lr}
    1738:	07050106 	streq	r0, [r5, -r6, lsl #2]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    173c:	0605052e 	streq	r0, [r5], -lr, lsr #10
    1740:	09054b2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
    1744:	204d0306 	subcs	r0, sp, r6, lsl #6
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1748:	30030405 	andcc	r0, r3, r5, lsl #8
    174c:	21080520 	tstcs	r8, r0, lsr #10
	delay (16, 0);
    1750:	74030505 	strvc	r0, [r3], #-1285	; 0xfffffafb
    1754:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1758:	5e3c1103 	rsfple	f1, f4, f3
	__pi_release ();
    175c:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
    1760:	061f0405 	ldreq	r0, [pc], -r5, lsl #8
    1764:	060b052f 	streq	r0, [fp], -pc, lsr #10
    1768:	06040501 	streq	r0, [r4], -r1, lsl #10
    176c:	06070525 	streq	r0, [r7], -r5, lsr #10
    1770:	06050501 	streq	r0, [r5], -r1, lsl #10
    1774:	0609052f 	streq	r0, [r9], -pc, lsr #10
static void killev (__pi_pcb_t *pid) {
    1778:	4a080501 	bmi	202b84 <__ccfg+0x1e2bdc>
	wfun = (aword)(pid->code);
    177c:	31060505 	tstcc	r6, r5, lsl #10
	for_all_tasks (i) {
    1780:	03060405 	movweq	r0, #25605	; 0x6405
		for (j = 0; j < nevents (i); j++) {
    1784:	03062e16 	movweq	r2, #28182	; 0x6e16
    1788:	07052e6d 	streq	r2, [r5, -sp, ror #28]
    178c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			    || i->Events [j] . Event == wfun
    1790:	02052f06 	andeq	r2, r5, #6, 30
		for (j = 0; j < nevents (i); j++) {
    1794:	017f8803 	cmneq	pc, r3, lsl #16
			if (i->Events [j] . Event == (aword)pid
    1798:	01061005 	tsteq	r6, r5
    179c:	f9030c05 			; <UNDEFINED> instruction: 0xf9030c05
    17a0:	13052000 	movwne	r2, #20480	; 0x5000
				wakeupev (i, j);
    17a4:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    17a8:	060c052f 	streq	r0, [ip], -pc, lsr #10
	for_all_tasks (i) {
    17ac:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    17b0:	02201103 	eoreq	r1, r0, #-1073741824	; 0xc0000000
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b4:	01010012 	tsteq	r1, r2, lsl r0
static void qfree (aword *ch) {
    17b8:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17bc:	00000002 	andeq	r0, r0, r2
	cc = (aword*)(mpools + MA_NP);
    17c0:	05ea0300 	strbeq	r0, [sl, #768]!	; 0x300
	m_setnextp (ch, chunk);
    17c4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	m_setnextp (cc, ch);
    17c8:	13060105 	movwne	r0, #24837	; 0x6105
}
    17cc:	01000602 	tsteq	r0, r2, lsl #12
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    17d0:	00190501 	andseq	r0, r9, r1, lsl #10
    17d4:	10d00205 	sbcsne	r0, r0, r5, lsl #4
    17d8:	81030000 	mrshi	r0, (UNDEF: 3)
			m_setnextp (cc, m_nextp (chunk));
    17dc:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
			m_size (chunk) += m_hdrlen + m_size (ch);
    17e0:	05060414 	streq	r0, [r6, #-1044]	; 0xfffffbec
    17e4:	01120324 	tsteq	r2, r4, lsr #6
    17e8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    17ec:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17f0:	03190501 	tsteq	r9, #4194304	; 0x400000
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17f4:	06042e67 	streq	r2, [r4], -r7, ror #28
    17f8:	19032205 	stmdbne	r3, {r0, r2, r9, sp}
    17fc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			m_setnextp (cc, m_nextp (chunk));
    1800:	206b0306 	rsbcs	r0, fp, r6, lsl #6
			m_size (ch) += m_hdrlen + m_size (chunk);
    1804:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
    1808:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
    180c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1810:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    1814:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1818:	29052005 	stmdbcs	r5, {r0, r2, sp}
			if (m_size (chunk) >= m_size (ch))
    181c:	2e1c052e 	cfmul64cs	mvdx0, mvdx12, mvdx14
    1820:	2f060305 	svccs	0x00060305
    1824:	1358014b 	cmpne	r8, #-1073741806	; 0xc0000012
		chunk = m_nextp (chunk))
    1828:	2e010101 	adfcss	f0, f1, f1
    182c:	66062006 	strvs	r2, [r6], -r6
    1830:	014a662e 	cmpeq	sl, lr, lsr #12
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1834:	1502052e 	strne	r0, [r2, #-1326]	; 0xfffffad2
	diag_wait (a);
    1838:	01060605 	tsteq	r6, r5, lsl #12
	diag_wchar (c, a);
    183c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    1840:	18052e25 	stmdane	r5, {r0, r2, r5, r9, sl, fp, sp}
}
    1844:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1848:	2c14062f 	ldccs	6, cr0, [r4], {47}	; 0x2f
	syserror (ESTATE, "state");
    184c:	58014b06 	stmdapl	r1, {r1, r2, r8, r9, fp, lr}
    1850:	01010113 	tsteq	r1, r3, lsl r1
    1854:	0620062e 	strteq	r0, [r0], -lr, lsr #12
    1858:	4a582e66 	bmi	160d1f8 <__ccfg+0x15ed250>
	for (i = 0; i < MAX_UTIMERS; i++)
    185c:	06010501 	streq	r0, [r1], -r1, lsl #10
void utimer_add (address ut) {
    1860:	000b0232 	andeq	r0, fp, r2, lsr r2
    1864:	21050101 	tstcs	r5, r1, lsl #2
		if (__pi_utims [i] == NULL)
    1868:	90020500 	andls	r0, r2, r0, lsl #10
	for (i = 0; i < MAX_UTIMERS; i++)
    186c:	03000011 	movweq	r0, #17
    1870:	050107d9 	streq	r0, [r1, #-2009]	; 0xfffff827
		syserror (ERESOURCE, "ut a");
    1874:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
	__pi_utims [i] = ut;
    1878:	03050304 	movweq	r0, #21252	; 0x5304
}
    187c:	0178fe03 	cmneq	r8, r3, lsl #28	; <UNPREDICTABLE>
    1880:	21050104 	tstcs	r5, r4, lsl #2
    1884:	06fd0306 	ldrbteq	r0, [sp], r6, lsl #6
	*t = v;
    1888:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
	TCI_RUN_AUXILIARY_TIMER;
    188c:	79830303 	stmibvc	r3, {r0, r1, r8, r9}
void update_n_wake (word min, Boolean force) {
    1890:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1894:	83030602 	movwhi	r0, #13826	; 0x3602
    1898:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
    189c:	13030501 	movwne	r0, #13569	; 0x3501
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    18a0:	33050404 	movwcc	r0, #21508	; 0x5404
    18a4:	7dad0306 	stcvc	3, cr0, [sp, #24]!
    18a8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    18ac:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
    18b0:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
    18b4:	7dad032d 	stcvc	3, cr0, [sp, #180]!	; 0xb4
    18b8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    18bc:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
    18c0:	22030520 	andcs	r0, r3, #32, 10	; 0x8000000
    18c4:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    18c8:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    18cc:	03290504 			; <UNDEFINED> instruction: 0x03290504
    18d0:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
		for_all_tasks (i) {
    18d4:	33051705 	movwcc	r1, #22277	; 0x5705
	__pi_mintk = znew + min;
    18d8:	2d050106 	stfcss	f0, [r5, #-24]	; 0xffffffe8
    18dc:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
			if (!twaiting (i))
    18e0:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
    18e4:	08052002 	stmdaeq	r5, {r1, sp}
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18e8:	03051e06 	movweq	r1, #24070	; 0x5e06
    18ec:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
    18f0:	33050404 	movwcc	r0, #21508	; 0x5404
    18f4:	207dad03 	rsbscs	sl, sp, r3, lsl #26
    18f8:	03050104 	movweq	r0, #20740	; 0x5104
    18fc:	2002d503 	andcs	sp, r2, r3, lsl #10
    1900:	05584105 	ldrbeq	r4, [r8, #-261]	; 0xfffffefb
    1904:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
    1908:	0305010e 	movweq	r0, #20750	; 0x510e
    190c:	04041313 	streq	r1, [r4], #-787	; 0xfffffced
    1910:	a7032905 	strge	r2, [r3, -r5, lsl #18]
    1914:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
				wakeuptm (i);
    1918:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    191c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		for_all_tasks (i) {
    1920:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
				d = i->Timer - znew;
    1924:	41052002 	tstmi	r5, r2
    1928:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
    192c:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
		if ((word)(__pi_mintk - znew) < min) 
    1930:	18020501 	stmdane	r2, {r0, r8, sl}
    1934:	03050304 	movweq	r0, #21252	; 0x5304
    1938:	0178ec03 	cmneq	r8, r3, lsl #24
	__pi_old = znew;
    193c:	01050104 	tsteq	r5, r4, lsl #2
}
    1940:	07950306 	ldreq	r0, [r5, r6, lsl #6]
	TCI_RUN_DELAY_TIMER;
    1944:	00080220 	andeq	r0, r8, r0, lsr #4
}
    1948:	21050101 	tstcs	r5, r1, lsl #2
    194c:	d4020500 	strle	r0, [r2], #-1280	; 0xfffffb00
    1950:	03000011 	movweq	r0, #17
    1954:	050107ec 	streq	r0, [r1, #-2028]	; 0xfffff814
    1958:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
void proceed (word state) {
    195c:	03050304 	movweq	r0, #21252	; 0x5304
	prcdstate (__pi_curr, state);
    1960:	0178eb03 	cmneq	r8, r3, lsl #22
    1964:	21050104 	tstcs	r5, r4, lsl #2
	release;
    1968:	07900306 	ldreq	r0, [r0, r6, lsl #6]
    196c:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
void __pi_wait (aword event, word state) {
    1970:	78f00303 	ldmvc	r0!, {r0, r1, r8, r9}^
	sint j = nevents (__pi_curr);
    1974:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	if (j >= MAX_EVENTS_PER_TASK)
    1978:	96030602 	strls	r0, [r3], -r2, lsl #12
    197c:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
    1980:	06090501 	streq	r0, [r9], -r1, lsl #10
		syserror (ENEVENTS, "sw");
    1984:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    1988:	7d9b0333 	ldcvc	3, cr0, [fp, #204]	; 0xcc
	setestate (__pi_curr->Events [j], state, event);
    198c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	incwait (__pi_curr);
    1990:	02e60308 	rsceq	r0, r6, #8, 6	; 0x20000000
	setestate (__pi_curr->Events [j], state, event);
    1994:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
}
    1998:	7d9a032d 	ldcvc	3, cr0, [sl, #180]	; 0xb4
    199c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    19a0:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
void __pi_trigger (aword event) {
    19a4:	051e0620 	ldreq	r0, [lr, #-1568]	; 0xfffff9e0
	for_all_tasks (i) {
    19a8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		for (j = 0; j < nevents (i); j++) {
    19ac:	06051f1e 			; <UNDEFINED> instruction: 0x06051f1e
    19b0:	06030521 	streq	r0, [r3], -r1, lsr #10
    19b4:	0504042f 	streq	r0, [r4, #-1071]	; 0xfffffbd1
    19b8:	7d940329 	ldcvc	3, cr0, [r4, #164]	; 0xa4
			if (i->Events [j] . Event == event) {
    19bc:	17050501 	strne	r0, [r5, -r1, lsl #10]
    19c0:	01063305 	tsteq	r6, r5, lsl #6
    19c4:	03050104 	movweq	r0, #20740	; 0x5104
				wakeupev (i, j);
    19c8:	2e02e803 	cdpcs	8, 0, cr14, cr2, cr3, {0}
    19cc:	04470205 	strbeq	r0, [r7], #-517	; 0xfffffdfb
	for_all_tasks (i) {
    19d0:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
}
    19d4:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
aword __pi_join (aword pid, word st) {
    19d8:	06030501 	streq	r0, [r3], -r1, lsl #10
	for_all_tasks (i) {
    19dc:	2002e803 	andcs	lr, r2, r3, lsl #16
    19e0:	01064105 	tsteq	r6, r5, lsl #2
	return 0;
    19e4:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
		if ((aword)i == pid) {
    19e8:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
			__pi_wait (pid, st);
    19ec:	06010602 	streq	r0, [r1], -r2, lsl #12
}
    19f0:	05030426 	streq	r0, [r3, #-1062]	; 0xfffffbda
	for_all_tasks (i) {
    19f4:	78d90303 	ldmvc	r9, {r0, r1, r8, r9}^
    19f8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
void delay (word d, word state) {
    19fc:	a8030601 	stmdage	r3, {r0, r9, sl}
	settstate (__pi_curr, state);
    1a00:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    1a04:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1a08:	02050018 	andeq	r0, r5, #24
    1a0c:	00001210 	andeq	r1, r0, r0, lsl r2
	update_n_wake (d, YES);
    1a10:	0107c503 	tsteq	r7, r3, lsl #10
    1a14:	01050704 	tsteq	r5, r4, lsl #14
	__pi_curr->Timer = __pi_old + d;
    1a18:	0178bb03 	cmneq	r8, r3, lsl #22
    1a1c:	18050104 	stmdane	r5, {r2, r8}
	inctimer (__pi_curr);
    1a20:	07c50306 	strbeq	r0, [r5, r6, lsl #6]
    1a24:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
    1a28:	78bb0305 	ldmvc	fp!, {r0, r2, r8, r9}
}
    1a2c:	2e040520 	cfsh32cs	mvfx0, mvfx4, #16
    1a30:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
	if (fun == NULL)
    1a34:	0101013d 	tsteq	r1, sp, lsr r1
		return (int) __pi_curr;
    1a38:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
    1a3c:	4a582e66 	bmi	160d3dc <__ccfg+0x15ed434>
	for_all_tasks (i)
    1a40:	01132e01 	tsteq	r3, r1, lsl #28
}
    1a44:	05080458 	streq	r0, [r8, #-1112]	; 0xfffffba8
		if (i->code == fun)
    1a48:	05050f01 	streq	r0, [r5, #-3841]	; 0xfffff0ff
	for_all_tasks (i)
    1a4c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1a50:	06020520 	streq	r0, [r2], -r0, lsr #10
    1a54:	0101013d 	tsteq	r1, sp, lsr r1
int __pi_strlen (const char *s) {
    1a58:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
	for (i = 0; *(s+i) != '\0'; i++);
    1a5c:	4a582e66 	bmi	160d3fc <__ccfg+0x15ed454>
}
    1a60:	2f132e01 	svccs	0x00132e01
	for (i = 0; *(s+i) != '\0'; i++);
    1a64:	01045801 	tsteq	r4, r1, lsl #16
	while ((Boolean)(*d++ = *s++));
    1a68:	03060105 	movweq	r0, #24837	; 0x6105
    1a6c:	020107d0 	andeq	r0, r1, #208, 14	; 0x3400000
    1a70:	0101000b 	tsteq	r1, fp
}
    1a74:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
	while (n-- && (*s != '\0'))
    1a78:	0012b402 	andseq	fp, r2, r2, lsl #8
    1a7c:	08800300 	stmeq	r0, {r8, r9}
	*d = '\0';
    1a80:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	while (n-- && (*s != '\0'))
    1a84:	10061505 	andne	r1, r6, r5, lsl #10
    1a88:	1e320205 	cdpne	2, 3, cr0, cr2, cr5, {0}
		*d++ = *s++;
    1a8c:	59593e06 	ldmdbpl	r9, {r1, r2, r9, sl, fp, ip, sp}^
    1a90:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
	while (n--)
    1a94:	7ca70305 	stcvc	3, cr0, [r7], #20
    1a98:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
		*dest++ = *src++;
    1a9c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1aa0:	7dc5030b 	stclvc	3, cr0, [r5, #44]	; 0x2c
    1aa4:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
	while (n--)
    1aa8:	02bb0331 	adcseq	r0, fp, #-1006632960	; 0xc4000000
}
    1aac:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		*dest++ = c;
    1ab0:	7dc80332 	stclvc	3, cr0, [r8, #200]	; 0xc8
void adddevfunc (devreqfun_t rf, int loc) {
    1ab4:	0504042e 	streq	r0, [r4, #-1070]	; 0xfffffbd2
		syserror (EREQPAR, "addv");
    1ab8:	029b0305 	addseq	r0, fp, #335544320	; 0x14000000
		syserror (ERESOURCE, "addv");
    1abc:	032d052e 			; <UNDEFINED> instruction: 0x032d052e
	if (ioreq [loc] != NULL)
    1ac0:	032e7ecc 			; <UNDEFINED> instruction: 0x032e7ecc
    1ac4:	09042e4a 	stmdbeq	r4, {r1, r3, r6, r9, sl, fp, sp}
		syserror (ERESOURCE, "addv");
    1ac8:	87033105 	strhi	r3, [r3, -r5, lsl #2]
	ioreq [loc] = rf;
    1acc:	01042e02 	tsteq	r4, r2, lsl #28
}
    1ad0:	03060205 	movweq	r0, #25093	; 0x6205
    1ad4:	032003dc 			; <UNDEFINED> instruction: 0x032003dc
sint io (word retry, word dev, word operation, char *buf, word len) {
    1ad8:	140179e7 	strne	r7, [r1], #-2535	; 0xfffff619
    1adc:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
    1ae0:	03050112 	movweq	r0, #20754	; 0x5112
    1ae4:	06150514 			; <UNDEFINED> instruction: 0x06150514
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ae8:	2c3d0501 	cfldr32cs	mvfx0, [sp], #-4
    1aec:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    1af0:	052f0603 	streq	r0, [pc, #-1539]!	; 14f5 <__pi_release+0x65>
		syserror (ENODEVICE, "io");
    1af4:	05580632 	ldrbeq	r0, [r8, #-1586]	; 0xfffff9ce
    1af8:	03052e21 	movweq	r2, #24097	; 0x5e21
	if (len == 0)
    1afc:	06052f06 	streq	r2, [r5], -r6, lsl #30
	ret = (ioreq [dev]) (operation, buf, len);
    1b00:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1b04:	04042206 	streq	r2, [r4], #-518	; 0xfffffdfa
	if (ret >= 0)
    1b08:	91032905 	tstls	r3, r5, lsl #18
	if (ret == -1) {
    1b0c:	3d050102 	stfccs	f0, [r5, #-8]
    1b10:	17050514 	smladne	r5, r4, r5, r0
		if (retry == WNONE)
    1b14:	3c063805 	stccc	8, cr3, [r6], {5}
		iowait (dev, operation, retry);
    1b18:	03050104 	movweq	r0, #20740	; 0x5104
    1b1c:	7de90306 	stclvc	3, cr0, [r9, #24]!
    1b20:	06060520 	streq	r0, [r6], -r0, lsr #10
			release;
    1b24:	0604052e 	streq	r0, [r4], -lr, lsr #10
	if (ret == -2) {
    1b28:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
		if (retry != WNONE) {
    1b2c:	01270329 			; <UNDEFINED> instruction: 0x01270329
    1b30:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			iowait (dev, operation, retry);
    1b34:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1b38:	06040501 	streq	r0, [r4], -r1, lsl #10
			(ioreq [dev]) (NONE, buf, len);
    1b3c:	043c5603 	ldrteq	r5, [ip], #-1539	; 0xfffff9fd
    1b40:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1b44:	050100db 	streq	r0, [r1, #-219]	; 0xffffff25
		(ioreq [dev]) (NONE, buf, len);
    1b48:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1b4c:	01040106 	tsteq	r4, r6, lsl #2
    1b50:	03063c05 	movweq	r3, #27653	; 0x6c05
}
    1b54:	052e7f96 	streq	r7, [lr, #-3990]!	; 0xfffff06a
	if (retry != WNONE) {
    1b58:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
		delay (-ret - 2, retry);
    1b5c:	03060106 	movweq	r0, #24838	; 0x6106
    1b60:	012e069a 			; <UNDEFINED> instruction: 0x012e069a
    1b64:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    1b68:	7a950329 	bvc	fe542814 <_estack+0xde53d814>
		release;
    1b6c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1b70:	01062d05 	tsteq	r6, r5, lsl #26
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b74:	02050104 	andeq	r0, r5, #4, 2
    1b78:	3c05e603 	stccc	6, cr14, [r5], {3}
    1b7c:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    1b80:	207a9a03 	rsbscs	r9, sl, r3, lsl #20
    1b84:	02050104 	andeq	r0, r5, #4, 2
		syserror (ERESOURCE, "mal1");
    1b88:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
    1b8c:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b90:	7a950329 	bvc	fe54283c <_estack+0xde53d83c>
    1b94:	17050501 	strne	r0, [r5, -r1, lsl #10]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b98:	01062d05 	tsteq	r6, r5, lsl #26
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b9c:	02050104 	andeq	r0, r5, #4, 2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1ba0:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1ba4:	01010120 	tsteq	r1, r0, lsr #2
    1ba8:	66010101 	strvs	r0, [r1], -r1, lsl #2
}
    1bac:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
    1bb0:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1bb4:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
    1bb8:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1bbc:	01040106 	tsteq	r4, r6, lsl #2
    1bc0:	b0030205 	andlt	r0, r3, r5, lsl #4
void __pi_free (aword *ch) {
    1bc4:	04042005 	streq	r2, [r4], #-5
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1bc8:	d0032d05 	andle	r2, r3, r5, lsl #26
    1bcc:	0104207a 	tsteq	r4, sl, ror r0
		syserror (EMALLOC, "malg");
    1bd0:	03060205 	movweq	r0, #25093	; 0x6205
    1bd4:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
	mcfree [MA_NP] += m_size (ch);
    1bd8:	03290504 			; <UNDEFINED> instruction: 0x03290504
		m_size (ch) ^= MALLOC_UMASK;
    1bdc:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
    1be0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	mcfree [MA_NP] += m_size (ch);
    1be4:	01040106 	tsteq	r4, r6, lsl #2
	QFREE;
    1be8:	03060205 	movweq	r0, #25093	; 0x6205
	if (mevent [MA_NP] . nwait) {
    1bec:	012005b0 			; <UNDEFINED> instruction: 0x012005b0
    1bf0:	01010101 	tsteq	r1, r1, lsl #2
		trigger ((aword)(&(mevent [MA_NP])));
    1bf4:	06230501 	strteq	r0, [r3], -r1, lsl #10
		mevent [MA_NP] . nwait --;
    1bf8:	05011003 	streq	r1, [r1, #-3]
}
    1bfc:	20700302 	rsbscs	r0, r0, r2, lsl #6
    1c00:	2e015806 	cdpcs	8, 0, cr5, cr1, cr6, {0}
    1c04:	04010d03 	streq	r0, [r1], #-3331	; 0xfffff2fd
    1c08:	0305050a 	movweq	r0, #21770	; 0x550a
void kill (aword pid) {
    1c0c:	05017ecd 	streq	r7, [r1, #-3789]	; 0xfffff133
		pid = (aword) __pi_curr;
    1c10:	0401062f 	streq	r0, [r1], #-1583	; 0xfffff9d1
	j = NULL;
    1c14:	03270501 			; <UNDEFINED> instruction: 0x03270501
	for_all_tasks (i) {
    1c18:	042001ba 	strteq	r0, [r0], #-442	; 0xfffffe46
	syserror (EREQPAR, "kpi");
    1c1c:	032f050a 			; <UNDEFINED> instruction: 0x032f050a
    1c20:	04207ec6 	strteq	r7, [r0], #-3782	; 0xfffff13a
		if ((aword)i == pid) {
    1c24:	06020501 	streq	r0, [r2], -r1, lsl #10
    1c28:	2001b503 	andcs	fp, r1, r3, lsl #10
				__PCB = i->Next;
    1c2c:	13062305 	movwne	r2, #25349	; 0x6305
			killev (i);
    1c30:	0c030205 	sfmeq	f0, 4, [r3], {5}
			ufree (i);
    1c34:	03230520 			; <UNDEFINED> instruction: 0x03230520
			if (i == __pi_curr)
    1c38:	02052074 	andeq	r2, r5, #116	; 0x74
    1c3c:	27052406 	strcs	r2, [r5, -r6, lsl #8]
				release;
    1c40:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				j->Next = i->Next;
    1c44:	03270528 			; <UNDEFINED> instruction: 0x03270528
    1c48:	02052078 	andeq	r2, r5, #120	; 0x78
    1c4c:	313f2806 	teqcc	pc, r6, lsl #16
}
    1c50:	404a0a03 	submi	r0, sl, r3, lsl #20
    1c54:	017dc003 	cmneq	sp, r3
    1c58:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
	if (size < 8)
    1c5c:	03050509 	movweq	r0, #21769	; 0x5509
		_size = 2;
    1c60:	04017eae 	streq	r7, [r1], #-3758	; 0xfffff152
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c64:	060d0501 	streq	r0, [sp], -r1, lsl #10
		_size = (((aword)size) + 3) >> 2;
    1c68:	0101d403 	tsteq	r1, r3, lsl #8
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c6c:	31050904 	tstcc	r5, r4, lsl #18
		_size = (((aword)size) + 3) >> 2;
    1c70:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
		if (mevent [MA_NP] . nfail != 255)
    1c74:	02050104 	andeq	r0, r5, #4, 2
    1c78:	01d40306 	bicseq	r0, r4, r6, lsl #6
			mevent [MA_NP] . nfail ++;
    1c7c:	060d0520 	streq	r0, [sp], -r0, lsr #10
		mnfree [MA_NP] = 0;
    1c80:	06020501 	streq	r0, [r2], -r1, lsl #10
    1c84:	02c70322 	sbceq	r0, r7, #-2013265920	; 0x88000000
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c88:	2e2e012e 	sufcsep	f0, f6, #0.5
    1c8c:	06060515 			; <UNDEFINED> instruction: 0x06060515
			syserror (EMALLOC, "malc");
    1c90:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    1c94:	30060305 	andcc	r0, r6, r5, lsl #6
		if (m_size (chunk) >= _size)
    1c98:	05050b04 	streq	r0, [r5, #-2820]	; 0xfffff4fc
    1c9c:	0179c303 	cmneq	r9, r3, lsl #6
		chunk = m_nextp (chunk)) {
    1ca0:	5e030c04 	cdppl	12, 0, cr0, cr3, cr4, {0}
		m_setnextp (cc, m_nextp (chunk));
    1ca4:	062e0501 	strteq	r0, [lr], -r1, lsl #10
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ca8:	050b0401 	streq	r0, [fp, #-1025]	; 0xfffffbff
    1cac:	23030605 	movwcs	r0, #13829	; 0x3605
			m_size (chunk) = _size;
    1cb0:	0634052e 	ldrteq	r0, [r4], -lr, lsr #10
			cc = chunk + _size + m_hdrlen;
    1cb4:	06050501 	streq	r0, [r5], -r1, lsl #10
    1cb8:	0501044b 	streq	r0, [r1, #-1099]	; 0xfffffbb5
			m_size (cc) = waste - m_hdrlen;
    1cbc:	06d50315 			; <UNDEFINED> instruction: 0x06d50315
			QFREE;
    1cc0:	1303054a 	movwne	r0, #13642	; 0x354a
		mevent [MA_NP] . nfail = 0;
    1cc4:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
		mcfree [MA_NP] -= m_size (chunk);
    1cc8:	02053a15 	andeq	r3, r5, #86016	; 0x15000
    1ccc:	7ecb0319 	mcrvc	3, 6, r0, cr11, cr9, {0}
    1cd0:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
    1cd4:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
		m_size (chunk) |= MALLOC_UMASK;
    1cd8:	17050501 	strne	r0, [r5, -r1, lsl #10]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1cdc:	01062305 	tsteq	r6, r5, lsl #6
		m_size (chunk) |= MALLOC_UMASK;
    1ce0:	02050104 	andeq	r0, r5, #4, 2
			mnfree [MA_NP] = mcfree [MA_NP];
    1ce4:	2002dd03 	andcs	sp, r2, r3, lsl #26
}
    1ce8:	23050604 	movwcs	r0, #22020	; 0x5604
    1cec:	207da303 	rsbscs	sl, sp, r3, lsl #6
    1cf0:	02050104 	andeq	r0, r5, #4, 2
    1cf4:	02dd0306 	sbcseq	r0, sp, #402653184	; 0x18000000
    1cf8:	01054e4a 	tsteq	r5, sl, asr #28
    1cfc:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    1d00:	0603052d 	streq	r0, [r3], -sp, lsr #10
aword __pi_fork (fsmcode func, aword data) {
    1d04:	412e5f03 			; <UNDEFINED> instruction: 0x412e5f03
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1d08:	06040541 	streq	r0, [r4], -r1, asr #10
    1d0c:	1f030513 	svcne	0x00030513
    1d10:	01002f02 	tsteq	r0, r2, lsl #30
		if ((j = __PCB) == NULL)
    1d14:	001f0501 	andseq	r0, pc, r1, lsl #10
	i->Next = NULL;
    1d18:	146c0205 	strbtne	r0, [ip], #-517	; 0xfffffdfb
	i->data = data;
    1d1c:	fd030000 	stc2	0, cr0, [r3, #-0]
		if ((j = __PCB) == NULL)
    1d20:	02050108 	andeq	r0, r5, #8, 2
}
    1d24:	2c051617 	stccs	6, cr1, [r5], {23}
			for (; j->Next != NULL; j = j->Next);
    1d28:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    1d2c:	202c0566 	eorcs	r0, ip, r6, ror #10
	return (aword) i;
    1d30:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    1d34:	15052112 	strne	r2, [r5, #-274]	; 0xfffffeee
	if (mevent [MA_NP] . nwait != 255)
    1d38:	01054a1f 	tsteq	r5, pc, lsl sl
    1d3c:	00030223 	andeq	r0, r3, r3, lsr #4
    1d40:	1c050101 	stfnes	f0, [r5], {1}
		mevent [MA_NP] . nwait ++;
    1d44:	00020500 	andeq	r0, r2, r0, lsl #10
	wait ((aword)(&(mevent [MA_NP])), state);
    1d48:	03000000 	movweq	r0, #0
    1d4c:	05010adb 	streq	r0, [r1, #-2779]	; 0xfffff525
void diag (const char *mess, ...) {
    1d50:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    1d54:	1c05010f 	stfnes	f0, [r5], {15}
    1d58:	06050e06 	streq	r0, [r5], -r6, lsl #28
	diag_disable_int (a, is);
    1d5c:	20070525 	andcs	r0, r7, r5, lsr #10
    1d60:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
    1d64:	052e0603 	streq	r0, [lr, #-1539]!	; 0xfffff9fd
				d = (bc == 16) ? 10000 : 1000000000;
    1d68:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	diag_disable_int (a, is);
    1d6c:	052d0631 	streq	r0, [sp, #-1585]!	; 0xfffff9cf
	while (*mess != '\0') {
    1d70:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
	dgout ('\r');
    1d74:	4d062006 	stcmi	0, cr2, [r6, #-24]	; 0xffffffe8
	dgout ('\n');
    1d78:	13060105 	movwne	r0, #24837	; 0x6105
    1d7c:	01000402 	tsteq	r0, r2, lsl #8
    1d80:	00310501 	eorseq	r0, r1, r1, lsl #10
	diag_wait (a);
    1d84:	14900205 	ldrne	r0, [r0], #517	; 0x205
	diag_enable_int (a, is);
    1d88:	e7030000 	str	r0, [r3, -r0]
    1d8c:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
}
    1d90:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1d94:	77b20303 	ldrvc	r0, [r2, r3, lsl #6]!
    1d98:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		if (*mess == '%') {
    1d9c:	cc030631 	stcgt	6, cr0, [r3], {49}	; 0x31
    1da0:	03040108 	movweq	r0, #16648	; 0x4108
			if (*mess == 'l') {
    1da4:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
    1da8:	01043c77 	tsteq	r4, r7, ror ip
				mess++;
    1dac:	cc033105 	stfgts	f3, [r3], {5}
				val = va_arg (ap, lword);
    1db0:	03042008 	movweq	r2, #16392	; 0x4008
				bc = 32;
    1db4:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
				bc = 16;
    1db8:	01042077 	tsteq	r4, r7, ror r0
			switch (*mess) {
    1dbc:	03060205 	movweq	r0, #25093	; 0x6205
    1dc0:	012e08d0 	ldrdeq	r0, [lr, -r0]!	; <UNPREDICTABLE>
    1dc4:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
				dgout ('%');
    1dc8:	76dd0306 	ldrbvc	r0, [sp], r6, lsl #6
    1dcc:	05010466 	streq	r0, [r1, #-1126]	; 0xfffffb9a
				dgout (*mess);
    1dd0:	a3030602 	movwge	r0, #13826	; 0x3602
    1dd4:	0d042009 	stceq	0, cr2, [r4, #-36]	; 0xffffffdc
			switch (*mess) {
    1dd8:	01759b03 	cmneq	r5, r3, lsl #22
					v = __pi_hex_enc_table [
    1ddc:	5b190101 	blpl	6421e8 <__ccfg+0x622240>
					i += 4;
    1de0:	0501044a 	streq	r0, [r1, #-1098]	; 0xfffffbb6
					(val >> (bc - i)) & 0xf];
    1de4:	9d03061a 	stcls	6, cr0, [r3, #-104]	; 0xffffff98
    1de8:	0d042e09 	stceq	14, cr2, [r4, #-36]	; 0xffffffdc
					dgout (v);
    1dec:	03060205 	movweq	r0, #25093	; 0x6205
    1df0:	012076f9 	strdeq	r7, [r0, -r9]!
				while (i < bc) {
    1df4:	01010101 	tsteq	r1, r1, lsl #2
			mess++;
    1df8:	03050304 	movweq	r0, #21252	; 0x5304
					d /= 10;
    1dfc:	04013603 	streq	r3, [r1], #-1539	; 0xfffff9fd
				if ((val >> (bc - 1)) & 1) {
    1e00:	0302050d 	movweq	r0, #9485	; 0x250d
    1e04:	0482204a 	streq	r2, [r2], #74	; 0x4a
					dgout ('-');
    1e08:	08eb0301 	stmiaeq	fp!, {r0, r8, r9}^
    1e0c:	06150501 	ldreq	r0, [r5], -r1, lsl #10
						val |= 0xffff0000;
    1e10:	06020501 	streq	r0, [r2], -r1, lsl #10
    1e14:	0615054c 	ldreq	r0, [r5], -ip, asr #10
    1e18:	20020501 	andcs	r0, r2, r1, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    1e1c:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    1e20:	04052002 	streq	r2, [r5], #-2
    1e24:	04216a06 	strteq	r6, [r1], #-2566	; 0xfffff5fa
					v = (word) (val / d);
    1e28:	0302050d 	movweq	r0, #9485	; 0x250d
					if (v || d == 1) break;
    1e2c:	0401778e 	streq	r7, [r1], #-1934	; 0xfffff872
    1e30:	03030503 	movweq	r0, #13571	; 0x3503
					d /= 10;
    1e34:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
				d = (bc == 16) ? 10000 : 1000000000;
    1e38:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
					dgout (v + '0');
    1e3c:	04202020 	strteq	r2, [r0], #-32	; 0xffffffe0
    1e40:	0ac50301 	beq	ff142a4c <_estack+0xdf13da4c>
    1e44:	050d0420 	streq	r0, [sp, #-1056]	; 0xfffffbe0
					d /= 10;
    1e48:	75a60303 	strvc	r0, [r6, #771]!	; 0x303
					val = val - (v * d);
    1e4c:	0610054a 	ldreq	r0, [r0], -sl, asr #10
					if (d == 0) break;
    1e50:	20060501 	andcs	r0, r6, r1, lsl #10
					v = (word) (val / d);
    1e54:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
    1e58:	0405201f 	streq	r2, [r5], #-31	; 0xffffffe1
				if (bc == 16)
    1e5c:	0e053006 	cdpeq	0, 0, cr3, cr5, cr6, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    1e60:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
					val &= 0xffff;
    1e64:	02052f06 	andeq	r2, r5, #6, 30
					dgout (*s);
    1e68:	0501041c 	streq	r0, [r1, #-1052]	; 0xfffffbe4
					s++;
    1e6c:	098f0304 	stmibeq	pc, {r2, r8, r9}	; <UNPREDICTABLE>
				while (*s != '\0') {
    1e70:	062a052e 	strteq	r0, [sl], -lr, lsr #10
    1e74:	27040501 	strcs	r0, [r4, -r1, lsl #10]
			dgout (*mess++);
    1e78:	79032a05 	stmdbvc	r3, {r0, r2, r9, fp, sp}
    1e7c:	06040520 	streq	r0, [r4], -r0, lsr #10
    1e80:	0309044e 	movweq	r0, #37966	; 0x944e
    1e84:	05017fb2 	streq	r7, [r1, #-4018]	; 0xfffff04e
    1e88:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e8c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1e90:	6600d103 	strvs	sp, [r0], -r3, lsl #2
    1e94:	0502044d 	streq	r0, [r2, #-1101]	; 0xfffffbb3
    1e98:	789f0305 	ldmvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
	^ entropy
    1e9c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1ea0:	07e50304 	strbeq	r0, [r5, r4, lsl #6]!
    1ea4:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    1ea8:	06040501 	streq	r0, [r4], -r1, lsl #10
    1eac:	1a05214b 	bne	14a3e0 <__ccfg+0x12a438>
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1eb0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	word cs = size + hblenb;
    1eb4:	02044d06 	andeq	r4, r4, #384	; 0x180
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1eb8:	96030505 	strls	r0, [r3], -r5, lsl #10
    1ebc:	01050178 	tsteq	r5, r8, ror r1
	p -> length = size;
    1ec0:	01042106 	tsteq	r4, r6, lsl #2
}
    1ec4:	03060405 	movweq	r0, #25605	; 0x6405
	if (p->attributes.b.queued) {
    1ec8:	042007f1 	strteq	r0, [r0], #-2033	; 0xfffff80f
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1ecc:	0305050c 	movweq	r0, #21772	; 0x550c
    1ed0:	040178a0 	streq	r7, [r1], #-2208	; 0xfffff760
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1ed4:	06310509 	ldrteq	r0, [r1], -r9, lsl #10
		p->attributes.b.queued = 0;
    1ed8:	0102d403 	tsteq	r2, r3, lsl #8
    1edc:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ee0:	2e7dac03 	cdpcs	12, 7, cr10, cr13, cr3, {0}
	deq (p);	// Remove from queue
    1ee4:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
}
    1ee8:	2e028803 	cdpcs	8, 0, cr8, cr2, cr3, {0}
	tfree ((address)p);
    1eec:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ef0:	2e7df803 	cdpcs	8, 7, cr15, cr13, cr3, {0}
    1ef4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1ef8:	07e50306 	strbeq	r0, [r5, r6, lsl #6]!
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1efc:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    1f00:	7aa00331 	bvc	fe802bcc <_estack+0xde7fdbcc>
	if (q_empty (q))
    1f04:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
    1f08:	01065205 	tsteq	r6, r5, lsl #4
		trigger (q);
    1f0c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (p->attributes.b.urgent) {
    1f10:	2005e503 	andcs	lr, r5, r3, lsl #10
		p->u.bqueue.next = q->next;
    1f14:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
		p->u.bqueue.prev = q;
    1f18:	2e7a9b03 	vaddcs.f64	d25, d10, d3
		q->next->prev = (qitem_t*) p;
    1f1c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	p->attributes.b.queued = 1;
    1f20:	05e00306 	strbeq	r0, [r0, #774]!	; 0x306
    1f24:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
}
    1f28:	78860305 	stmvc	r6, {r0, r2, r8, r9}
		p->u.bqueue.prev = q->prev;
    1f2c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		q->prev->next = (qitem_t*) p;
    1f30:	07fc0304 	ldrbeq	r0, [ip, r4, lsl #6]!
		q->prev = (qitem_t*) p;
    1f34:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    1f38:	7aea0305 	bvc	ffa82b54 <_estack+0xdfa7db54>
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f3c:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
	deq (p);	// Soft dequeue, timer and hook left intact
    1f40:	03290501 			; <UNDEFINED> instruction: 0x03290501
	switch (dv) {
    1f44:	052004b6 	streq	r0, [r0, #-1206]!	; 0xfffffb4a
    1f48:	7bca0331 	blvc	ff282c14 <_estack+0xdf27dc14>
    1f4c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1f50:	99030604 	stmdbls	r3, {r2, r9, sl}
			p->attributes.b.urgent = 1;
    1f54:	23052e05 	movwcs	r2, #24069	; 0x5e05
    1f58:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			verify_ses (p, "dispose ses");
    1f5c:	046a0620 	strbteq	r0, [sl], #-1568	; 0xfffff9e0
    1f60:	03050509 	movweq	r0, #21769	; 0x5509
    1f64:	0501799f 	streq	r7, [r1, #-2463]	; 0xfffff661
    1f68:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
    1f6c:	03040501 	movweq	r0, #17665	; 0x4501
			verify_phy (p, "dispose phy");
    1f70:	042006ed 	strteq	r0, [r0], #-1773	; 0xfffff913
    1f74:	033f0509 	teqeq	pc, #37748736	; 0x2400000
}
    1f78:	04207993 	strteq	r7, [r0], #-2451	; 0xfffff66d
			enq (oqueues [p->attributes.b.phys], p);
    1f7c:	06040501 	streq	r0, [r4], -r1, lsl #10
			p->attributes.b.urgent = 1;
    1f80:	2e06ea03 	vmlacs.f32	s28, s12, s6
    1f84:	90030904 	andls	r0, r3, r4, lsl #18
			verify_phy (p, "dispose phy");
    1f88:	2905017f 	stmdbcs	r5, {r0, r1, r2, r3, r4, r5, r6, r8}
    1f8c:	01040106 	tsteq	r4, r6, lsl #2
    1f90:	f3030405 	vshl.u8	d0, d5, d3
    1f94:	09042e00 	stmdbeq	r4, {r9, sl, fp, sp}
    1f98:	8d032905 	vstrhi.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    1f9c:	0104207f 	tsteq	r4, pc, ror r0
			enq (oqueues [p->attributes.b.phys], p);
    1fa0:	03060405 	movweq	r0, #25605	; 0x6405
    1fa4:	4d4a00f3 	stclmi	0, cr0, [sl, #-972]	; 0xfffffc34
}
    1fa8:	05020440 	streq	r0, [r2, #-1088]	; 0xfffffbc0
			rlp (p);
    1fac:	77ea0305 	strbvc	r0, [sl, r5, lsl #6]!
}
    1fb0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1fb4:	08990304 	ldmeq	r9, {r2, r8, r9}
    1fb8:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    1fbc:	06040501 	streq	r0, [r4], -r1, lsl #10
    1fc0:	1a05214b 	bne	14a4f4 <__ccfg+0x12a54c>
    1fc4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1fc8:	1d1a0523 	cfldr32ne	mvfx0, [sl, #-140]	; 0xffffff74
	if (b->attributes.b.outgoing) {
    1fcc:	3f060405 	svccc	0x00060405
	b = header (p);
    1fd0:	03090459 	movweq	r0, #37977	; 0x9459
	if (b->attributes.b.outgoing) {
    1fd4:	05017eee 	streq	r7, [r1, #-3822]	; 0xfffff112
		verify_ses (b, "tcv02");
    1fd8:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    1fdc:	030d050e 	movweq	r0, #54542	; 0xd50e
    1fe0:	042e7bdb 	strteq	r7, [lr], #-3035	; 0xfffff425
    1fe4:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1fe8:	042004a5 	strteq	r0, [r0], #-1189	; 0xfffffb5b
		verify_plg (b, tcv_out, "tcv03");
    1fec:	06040501 	streq	r0, [r4], -r1, lsl #10
    1ff0:	4a019703 	bmi	67c04 <__ccfg+0x47c5c>
    1ff4:	31050e04 	tstcc	r5, r4, lsl #28
    1ff8:	0179f303 	cmneq	r9, r3, lsl #6	; <UNPREDICTABLE>
    1ffc:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
    2000:	04010652 	streq	r0, [r1], #-1618	; 0xfffff9ae
    2004:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    2008:	2e068c03 	cdpcs	12, 0, cr8, cr6, cr3, {0}
    200c:	04110a05 	ldreq	r0, [r1], #-2565	; 0xfffff5fb
		dispose (b, plugins [b->attributes.b.plugin] ->
    2010:	0305050e 	movweq	r0, #21774	; 0x550e
}
    2014:	05017ac3 	streq	r7, [r1, #-2755]	; 0xfffff53d
		dispose (b, plugins [b->attributes.b.plugin] ->
    2018:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
		rlp (b);
    201c:	030a0501 	movweq	r0, #42241	; 0xa501
}
    2020:	052005bd 	streq	r0, [r0, #-1469]!	; 0xfffffa43
		rlp (b);
    2024:	59320604 	ldmdbpl	r2!, {r2, r9, sl}
    2028:	01060b05 	tsteq	r6, r5, lsl #22
    202c:	21061a05 	tstcs	r6, r5, lsl #20
    2030:	05110a05 	ldreq	r0, [r1, #-2565]	; 0xfffff5fb
    2034:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2038:	0405580a 	streq	r5, [r5], #-2058	; 0xfffff7f6
    203c:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
    2040:	b8030505 	stmdalt	r3, {r0, r2, r8, sl}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2044:	3105017a 	tstcc	r5, sl, ror r1
	va_start (ap, plid);
    2048:	3f050106 	svccc	0x00050106
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    204c:	207ebc03 	rsbscs	fp, lr, r3, lsl #24
    2050:	c4033105 	strgt	r3, [r3], #-261	; 0xfffffefb
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2054:	01042001 	tsteq	r4, r1
    2058:	03060405 	movweq	r0, #25605	; 0x6405
    205c:	042005cb 	strteq	r0, [r0], #-1483	; 0xfffffa35
    2060:	03050509 	movweq	r0, #21769	; 0x5509
			syserror (ENODEVICE, "tcv04");
    2064:	050178f1 	streq	r7, [r1, #-2289]	; 0xfffff70f
		syserror (EMALLOC, "tcv05");
    2068:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
	attp.b.outgoing = 1;
    206c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2070:	2e079203 	cdpcs	2, 0, cr9, cr7, cr3, {0}
    2074:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
    2078:	0177f503 	cmneq	r7, r3, lsl #10	; <UNPREDICTABLE>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    207c:	01062e05 	tsteq	r6, r5, lsl #28
		if (descriptors [fd] == NULL)
    2080:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    2084:	088e0306 	stmeq	lr, {r1, r2, r8, r9}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2088:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
		return ERROR;
    208c:	77c90305 	strbvc	r0, [r9, r5, lsl #6]
}
    2090:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    2094:	08ba0304 	ldmeq	sl!, {r2, r8, r9}
    2098:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
	s->attpattern.b.session = fd;
    209c:	0302052f 	movweq	r0, #9519	; 0x252f
    20a0:	04017db0 	streq	r7, [r1], #-3504	; 0xfffff250
	descriptors [fd] = s;
    20a4:	03240506 			; <UNDEFINED> instruction: 0x03240506
	q_init (&(s->rqueue));
    20a8:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    20ac:	23051705 	movwcs	r1, #22277	; 0x5705
    20b0:	01040106 	tsteq	r4, r6, lsl #2
    20b4:	a8030105 	stmdage	r3, {r0, r2, r8}
    20b8:	04055801 	streq	r5, [r5], #-2049	; 0xfffff7ff
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    20bc:	02f00306 	rscseq	r0, r0, #402653184	; 0x18000000
    20c0:	2c055b20 			; <UNDEFINED> instruction: 0x2c055b20
    20c4:	32050106 	andcc	r0, r5, #-2147483647	; 0x80000001
	descriptors [fd] = s;
    20c8:	032c0527 			; <UNDEFINED> instruction: 0x032c0527
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    20cc:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    20d0:	2d054c06 	stccs	12, cr4, [r5, #-24]	; 0xffffffe8
	if (s == NULL)
    20d4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		syserror (EMALLOC, "tcv05");
    20d8:	32055d06 	andcc	r5, r5, #384	; 0x180
    20dc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    20e0:	32053e06 	andcc	r3, r5, #6, 28	; 0x60
    20e4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    20e8:	02042406 	andeq	r2, r4, #100663296	; 0x6000000
    20ec:	8b030505 	blhi	c3508 <__ccfg+0xa3560>
    20f0:	01040177 	tsteq	r4, r7, ror r1
    20f4:	f8030405 			; <UNDEFINED> instruction: 0xf8030405
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20f8:	0e042008 	cdpeq	0, 0, cr2, cr4, cr8, {0}
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20fc:	88030505 	stmdahi	r3, {r0, r2, r8, sl}
    2100:	2d05017a 	stfcss	f0, [r5, #-488]	; 0xfffffe18
    2104:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	plugins [ord] = pl;
    2108:	4d053106 	stfmis	f3, [r5, #-24]	; 0xffffffe8
	return 0;
    210c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		return ERROR;
    2110:	2e053d06 	cdpcs	13, 0, cr3, cr5, cr6, {0}
}
    2114:	01040106 	tsteq	r4, r6, lsl #2
    2118:	03060405 	movweq	r0, #25605	; 0x6405
	verify_fds (fd, "tcv10");
    211c:	043c05f7 	ldrteq	r0, [ip], #-1527	; 0xfffffa09
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2120:	03050502 	movweq	r0, #21762	; 0x5502
	verify_fds (fd, "tcv10");
    2124:	04017785 	streq	r7, [r1], #-1925	; 0xfffff87b
    2128:	060d050e 	streq	r0, [sp], -lr, lsl #10
    212c:	2002e803 	andcs	lr, r2, r3, lsl #16
	verify_plg (b, tcv_frm, "tcv11");
    2130:	39050104 	stmdbcc	r5, {r2, r8}
	b = q_first (rq);
    2134:	06960306 	ldreq	r0, [r6], r6, lsl #6
	if (q_end (b, rq)) {
    2138:	010a0520 	tsteq	sl, r0, lsr #10
		if (state != WNONE) {
    213c:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
    2140:	0179ea03 	cmneq	r9, r3, lsl #20
			when (rq, state);
    2144:	01060d05 	tsteq	r6, r5, lsl #26
			release;
    2148:	0a050104 	beq	142560 <__ccfg+0x1225b8>
	deq (b);	// Dequeue the packet ...
    214c:	20069603 	andcs	r9, r6, r3, lsl #12
    2150:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
	p = ((address)(b + 1));
    2154:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	verify_plg (b, tcv_frm, "tcv11");
    2158:	0177ec03 	cmneq	r7, r3, lsl #24
    215c:	01064105 	tsteq	r6, r5, lsl #2
    2160:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    2164:	2e089703 	cdpcs	7, 0, cr9, cr8, cr3, {0}
    2168:	41050904 	tstmi	r5, r4, lsl #18
    216c:	2077e903 	rsbscs	lr, r7, r3, lsl #18
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2170:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    2174:	08970306 	ldmeq	r7, {r1, r2, r8, r9}
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2178:	0d045220 	sfmeq	f5, 4, [r4, #-128]	; 0xffffff80
    217c:	d1030205 	tstle	r3, r5, lsl #4
	b->u.pointers.tail =
    2180:	014a2075 	hvceq	41477	; 0xa205
}
    2184:	03040101 	movweq	r0, #16641	; 0x4101
		return NULL;
    2188:	2b030305 	blcs	c2da4 <__ccfg+0xa2dfc>
    218c:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
    2190:	20550302 	subscs	r0, r5, r2, lsl #6
    2194:	00370216 	eorseq	r0, r7, r6, lsl r2
    2198:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
	verify_fds (fd, "tcv16");
    219c:	e8020500 	stmda	r2, {r8, sl}
								Boolean urg) {
    21a0:	03000016 	movweq	r0, #22
    21a4:	050100e1 	streq	r0, [r1, #-225]	; 0xffffff1f
	verify_fds (fd, "tcv16");
    21a8:	12051402 	andne	r1, r5, #33554432	; 0x2000000
    21ac:	02051e06 	andeq	r1, r5, #6, 28	; 0x60
    21b0:	061f2122 	ldreq	r2, [pc], -r2, lsr #2
	verify_pld (s, tcv_frm, "tcv17");
    21b4:	3f4b2f21 	svccc	0x004b2f21
    21b8:	01060805 	tsteq	r6, r5, lsl #16
    21bc:	2f060205 	svccs	0x00060205
    21c0:	01000802 	tsteq	r0, r2, lsl #16
    21c4:	003a0501 	eorseq	r0, sl, r1, lsl #10
    21c8:	00000205 	andeq	r0, r0, r5, lsl #4
    21cc:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    21d0:	02050100 	andeq	r0, r5, #0, 2
	ptrs.head = (word) fd;
    21d4:	3a051414 	bcc	14722c <__ccfg+0x127284>
	ptrs.tail = (word) urg;
    21d8:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21dc:	3a052406 	bcc	14b1fc <__ccfg+0x12b254>
    21e0:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
		if (state != WNONE) {
    21e4:	3f060305 	svccc	0x00060305
    21e8:	01060605 	tsteq	r6, r5, lsl #12
}
    21ec:	30060405 	andcc	r0, r6, r5, lsl #8
			when (eid, state);
    21f0:	01061205 	tsteq	r6, r5, lsl #4
    21f4:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
			release;
    21f8:	05250603 	streq	r0, [r5, #-1539]!	; 0xfffff9fd
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21fc:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
    2200:	032f050f 			; <UNDEFINED> instruction: 0x032f050f
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2204:	01042015 	tsteq	r4, r5, lsl r0
    2208:	6b030905 	blvs	c4624 <__ccfg+0xa467c>
    220c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2210:	050f0421 	streq	r0, [pc, #-1057]	; 1df7 <diag+0xa7>
    2214:	01140305 	tsteq	r4, r5, lsl #6
    2218:	01062f05 	tsteq	r6, r5, lsl #30
		if (state != WNONE) {
    221c:	01050104 	tsteq	r5, r4, lsl #2
    2220:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
			tmwait (state);
    2224:	6f030604 	svcvs	0x00030604
    2228:	050f0420 	streq	r0, [pc, #-1056]	; 1e10 <diag+0xc0>
	b->attributes = s->attpattern;
    222c:	00c30305 	sbceq	r0, r3, r5, lsl #6
		b->attributes.b.urgent = 1;
    2230:	18051401 	stmdane	r5, {r0, sl, ip}
    2234:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	b->u.pointers.head = ptrs.head;
    2238:	01043306 	tsteq	r4, r6, lsl #6
	b->u.pointers.tail = length;
    223c:	03060b05 	movweq	r0, #27397	; 0x6b05
	return (address) (b + 1);
    2240:	05017fb6 	streq	r7, [r1, #-4022]	; 0xfffff04a
    2244:	04340603 	ldrteq	r0, [r4], #-1539	; 0xfffff9fd
    2248:	0e05050f 	cfsh32eq	mvfx0, mvfx5, #15
    224c:	01062f05 	tsteq	r6, r5, lsl #30
    2250:	03050104 	movweq	r0, #20740	; 0x5104
    2254:	06054106 	streq	r4, [r5], -r6, lsl #2
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2258:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    225c:	2b06053f 	blcs	183760 <__ccfg+0x1637b8>
    2260:	23060405 	movwcs	r0, #25605	; 0x6405
	verify_fph (phy, "tcv23");
    2264:	2203052f 	andcs	r0, r3, #197132288	; 0xbc00000
    2268:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
    226c:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    2270:	09022f21 	stmdbeq	r2, {r0, r5, r8, r9, sl, fp, sp}
}
    2274:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	return (physical [phy]) (opt, arg);
    2278:	02050011 	andeq	r0, r5, #17
    227c:	00001718 	andeq	r1, r0, r8, lsl r7
    2280:	010af103 	tsteq	sl, r3, lsl #2	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2284:	13160305 	tstne	r6, #335544320	; 0x14000000
	if (opt < 0) {
    2288:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
		if (fd < 0)
    228c:	200d0611 	andcs	r0, sp, r1, lsl r6
		if (opt == PHYSOPT_PLUGINFO) {
    2290:	05262505 	streq	r2, [r6, #-1285]!	; 0xfffffafb
			if (fd >= TCV_MAX_PLUGS)
    2294:	04051f03 	streq	r1, [r5], #-3843	; 0xfffff0fd
			if ((p = plugins [fd]) == NULL)
    2298:	25052106 	strcs	r2, [r5, #-262]	; 0xfffffefa
    229c:	37050106 	strcc	r0, [r5, -r6, lsl #2]
}
    22a0:	0f052d06 	svceq	0x00052d06
		if (fd >= TCV_MAX_PHYS)
    22a4:	06030501 	streq	r0, [r3], -r1, lsl #10
		return physinfo [fd];
    22a8:	06020501 	streq	r0, [r2], -r1, lsl #10
    22ac:	03190632 	tsteq	r9, #52428800	; 0x3200000
	verify_fds (fd, "tcv22");
    22b0:	31062079 	tstcc	r6, r9, ror r0
    22b4:	055b5b32 	ldrbeq	r5, [fp, #-2866]	; 0xfffff4ce
    22b8:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    22bc:	02054a0c 	andeq	r4, r5, #12, 20	; 0xc000
    22c0:	1d0c0523 	cfstr32ne	mvfx0, [ip, #-140]	; 0xffffff74
}
    22c4:	23060205 	movwcs	r0, #25093	; 0x6205
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    22c8:	0503043e 	streq	r0, [r3, #-1086]	; 0xfffffbc2
    22cc:	75c50303 	strbvc	r0, [r5, #771]	; 0x303
			return 0;
    22d0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    22d4:	0abd0302 	beq	fef42ee4 <_estack+0xdef3dee4>
    22d8:	000e0220 	andeq	r0, lr, r0, lsr #4
    22dc:	0ee40101 	cdpeq	1, 14, cr0, cr4, cr1, {0}
    22e0:	00030000 	andeq	r0, r3, r0
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22e4:	00000194 	muleq	r0, r4, r1
    22e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
	if (dsp != TCV_DSP_PASS) {
    22ec:	0101000d 	tsteq	r1, sp
		if (ses == NONE)
    22f0:	00000101 	andeq	r0, r0, r1, lsl #2
			syserror (EREQPAR, "tcv26");
    22f4:	00000100 	andeq	r0, r0, r0, lsl #2
		verify_fds (ses, "tcv27");
    22f8:	6f682f01 	svcvs	0x00682f01
    22fc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    2300:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2304:	442f6e65 	strtmi	r6, [pc], #-3685	; 230c <tcvp_new+0x28>
    2308:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if ((p = apb (size)) != NULL) {
    230c:	4f2f706f 	svcmi	0x002f706f
    2310:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		return NULL;
    2314:	502f5445 	eorpl	r5, pc, r5, asr #8
			p->attributes = descriptors [ses] -> attpattern;
    2318:	534f4349 	movtpl	r4, #62281	; 0xf349
			dispose (p, dsp);
    231c:	6369502f 	cmnvs	r9, #47	; 0x2f
			p->attributes = descriptors [ses] -> attpattern;
    2320:	6b2f534f 	blvs	bd7064 <__ccfg+0xbb70bc>
			p->attributes.b.outgoing = 0;
    2324:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
			dispose (p, dsp);
    2328:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
			return (address)(p + 1);
    232c:	2f656d6f 	svccs	0x00656d6f
    2330:	70657473 	rsbvc	r7, r5, r3, ror r4
	if ((p = apb (size)) != NULL)
    2334:	2f6e6568 	svccs	0x006e6568
    2338:	6b736544 	blvs	1cdb850 <__ccfg+0x1cbb8a8>
		return (address)(p + 1);
    233c:	2f706f74 	svccs	0x00706f74
    2340:	4f534c4f 	svcmi	0x00534c4f
    2344:	2f54454e 	svccs	0x0054454e
    2348:	4f434950 	svcmi	0x00434950
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    234c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2350:	2f534f63 	svccs	0x00534f63
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2354:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2358:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
		syserror (EREQPAR, "tcv28");
    235c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		syserror (EMALLOC, "tcv29");
    2360:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
	physical [phy] = ps;
    2364:	72642f45 	rsbvc	r2, r4, #276	; 0x114
	physinfo [phy] = info;
    2368:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    236c:	0062696c 	rsbeq	r6, r2, ip, ror #18
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2370:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2374:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2378:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
		syserror (EMALLOC, "tcv29");
    237c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2380:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
	q_init (q);
    2384:	61652d65 	cmnvs	r5, r5, ror #26
}
    2388:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    238c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    2390:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    2394:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    2398:	6f682f00 	svcvs	0x00682f00
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    239c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	verify_fph (phy, "tcv30");
    23a0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    23a4:	442f6e65 	strtmi	r6, [pc], #-3685	; 23ac <tcvphy_rcv+0x10>
    23a8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	verify_fph (phy, "tcv30");
    23ac:	4f2f706f 	svcmi	0x002f706f
    23b0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    23b4:	502f5445 	eorpl	r5, pc, r5, asr #8
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23b8:	534f4349 	movtpl	r4, #62281	; 0xf349
    23bc:	6369502f 	cmnvs	r9, #47	; 0x2f
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23c0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    23c4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		if (plugins [plg] == NULL)
    23c8:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    23cc:	2f656d6f 	svccs	0x00656d6f
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    23d0:	70657473 	rsbvc	r7, r5, r3, ror r4
}
    23d4:	2f6e6568 	svccs	0x006e6568
    23d8:	6b736544 	blvs	1cdb8f0 <__ccfg+0x1cbb948>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23dc:	2f706f74 	svccs	0x00706f74
    23e0:	4f534c4f 	svcmi	0x00534c4f
    23e4:	2f54454e 	svccs	0x0054454e
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23e8:	4f434950 	svcmi	0x00434950
    23ec:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    23f0:	00534f63 	subseq	r4, r3, r3, ror #30
    23f4:	72656b00 	rsbvc	r6, r5, #0, 22
    23f8:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23fc:	00010063 	andeq	r0, r1, r3, rrx
	len -= (ap.head + ap.tail);
    2400:	72617500 	rsbvc	r7, r1, #0, 10
    2404:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2408:	73000002 	movwvc	r0, #2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    240c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2410:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2414:	73000003 	movwvc	r0, #3
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2418:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    241c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2420:	61000003 	tstvs	r0, r3
	return 1;
    2424:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    2428:	00040068 	andeq	r0, r4, r8, rrx
    242c:	63616d00 	cmnvs	r1, #0, 26
    2430:	00682e68 	rsbeq	r2, r8, r8, ror #28
    2434:	70000004 	andvc	r0, r0, r4
	verify_fph (phy, "tcv32");
    2438:	5f736e69 	svcpl	0x00736e69
    243c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    2440:	00040068 	andeq	r0, r4, r8, rrx
    2444:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    2448:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    244c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
	oq = oqueues [phy];
    2450:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
	b = q_first (oq);
    2454:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
	if (q_end (b, oq)) {
    2458:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
	*len = b->length;
    245c:	00050068 	andeq	r0, r5, r8, rrx
	deq (b);	// Dequeue the packet ...
    2460:	72656b00 	rsbvc	r6, r5, #0, 22
}
    2464:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
		return NULL;
    2468:	00010068 	andeq	r0, r1, r8, rrx
    246c:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    2470:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    2474:	003e6e69 	eorseq	r6, lr, r9, ror #28
	verify_fph (phy, "tcv33");
    2478:	00000000 	andeq	r0, r0, r0
    247c:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
    2480:	00177802 	andseq	r7, r7, r2, lsl #16
    2484:	03c30300 	biceq	r0, r3, #0, 6
    2488:	16020501 	strne	r0, [r2], -r1, lsl #10
    248c:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
	oq = oqueues [phy];
    2490:	78030626 	stmdavc	r3, {r1, r2, r5, r9, sl}
	b = q_first (oq);
    2494:	03020501 	movweq	r0, #9473	; 0x2501
		return NULL;
    2498:	07052009 	streq	r2, [r5, -r9]
	return (address)(b + 1);
    249c:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
}
    24a0:	13052021 	movwne	r2, #20513	; 0x5021
    24a4:	0a052106 	beq	14a8c4 <__ccfg+0x12a91c>
    24a8:	2013053c 	andscs	r0, r3, ip, lsr r5
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    24ac:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
	verify_plg (b, tcv_xmt, "tcv34");
    24b0:	052c060f 	streq	r0, [ip, #-1551]!	; 0xfffff9f1
	hblock_t *b = header (pkt);
    24b4:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
	verify_plg (b, tcv_xmt, "tcv34");
    24b8:	052f0604 	streq	r0, [pc, #-1540]!	; 1ebc <apb+0xc>
    24bc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    24c0:	05053c07 	streq	r3, [r5, #-3079]	; 0xfffff3f9
    24c4:	054b3106 	strbeq	r3, [fp, #-262]	; 0xfffffefa
    24c8:	017a0302 	cmneq	sl, r2, lsl #6
    24cc:	03060105 	movweq	r0, #24837	; 0x6105
    24d0:	03022e0a 	movweq	r2, #11786	; 0x2e0a
	dispose (b, plugins [b->attributes.b.plugin] ->
    24d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
}
    24d8:	0205001f 	andeq	r0, r5, #31
	dispose (b, plugins [b->attributes.b.plugin] ->
    24dc:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    24e0:	0106c903 	tsteq	r6, r3, lsl #18
    24e4:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
}
    24e8:	05131401 	ldreq	r1, [r3, #-1025]	; 0xfffffbff
    while(1)
    24ec:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
{
    24f0:	2070031f 	rsbscs	r0, r0, pc, lsl r3
    SetupTrimDevice();
    24f4:	10030d05 	andne	r0, r3, r5, lsl #26
    pui32Src = &_etext;
    24f8:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24fc:	06020520 	streq	r0, [r2], -r0, lsr #10
    __asm("    ldr     r0, =_bss\n"
    2500:	11030601 	tstne	r3, r1, lsl #12
    2504:	0d051320 	stceq	3, cr1, [r5, #-128]	; 0xffffff80
    2508:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    250c:	061f051f 			; <UNDEFINED> instruction: 0x061f051f
    2510:	06020521 	streq	r0, [r2], -r1, lsr #10
   main();
    2514:	21250601 			; <UNDEFINED> instruction: 0x21250601
    FaultISR();
    2518:	15060f05 	strne	r0, [r6, #-3845]	; 0xfffff0fb
        *pui32Dest++ = *pui32Src++;
    251c:	061d0205 	ldreq	r0, [sp], -r5, lsl #4
    2520:	060f0523 	streq	r0, [pc], -r3, lsr #10
    2524:	24010501 	strcs	r0, [r1], #-1281	; 0xfffffaff
    2528:	03060305 	movweq	r0, #25349	; 0x6305
    252c:	1e052062 	cdpne	0, 0, cr2, cr5, cr2, {3}
    2530:	06050106 	streq	r0, [r5], -r6, lsl #2
    2534:	06040558 			; <UNDEFINED> instruction: 0x06040558
    2538:	13052130 	movwne	r2, #20784	; 0x5130
static byte get_byte () {
    253c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2540:	2e059106 	mvfcss	f1, f6
    2544:	0636050d 	ldrteq	r0, [r6], -sp, lsl #10
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2548:	060a0501 	streq	r0, [sl], -r1, lsl #10
    254c:	061f0534 			; <UNDEFINED> instruction: 0x061f0534
		if (ee_inp)
    2550:	580d0501 	stmdapl	sp, {r0, r8, sl}
			b |= 1;
    2554:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    2558:	0610052f 	ldreq	r0, [r0], -pc, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    255c:	06040501 	streq	r0, [r4], -r1, lsl #10
	for (b = 0, i = 0; i < 8; i++) {
    2560:	05ac0b03 	streq	r0, [ip, #2819]!	; 0xb03
}
    2564:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2568:	0564062e 	strbeq	r0, [r4, #-1582]!	; 0xfffff9d2
    256c:	02130609 	andseq	r0, r3, #9437184	; 0x900000
static void put_byte (byte b) {
    2570:	01010007 	tsteq	r1, r7
    2574:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    2578:	00183402 	andseq	r3, r8, r2, lsl #8
    257c:	08c60300 	stmiaeq	r6, {r8, r9}^
		if (b & 0x80)
    2580:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2584:	0d050204 	sfmeq	f0, 4, [r5, #-16]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2588:	7cdf0306 	ldclvc	3, cr0, [pc], {6}
	for (i = 0; i < 8; i++) {
    258c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		b <<= 1;
    2590:	a103060f 	tstge	r3, pc, lsl #12
	for (i = 0; i < 8; i++) {
    2594:	02052003 	andeq	r2, r5, #3
}
    2598:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    259c:	7cda0324 	ldclvc	3, cr0, [sl], {36}	; 0x24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    25a0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    25a4:	01060d05 	tsteq	r6, r5, lsl #26
	put_byte (cmd);
    25a8:	02050104 	andeq	r0, r5, #4, 2
    25ac:	2003a103 	andcs	sl, r3, r3, lsl #2
}
    25b0:	01052f06 	tsteq	r5, r6, lsl #30
    25b4:	05023d06 	streq	r3, [r2, #-3334]	; 0xfffff2fa
static void wwait (word st, word del) {
    25b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    25bc:	02050027 	andeq	r0, r5, #39	; 0x27
    25c0:	00000000 	andeq	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    25c4:	0100de03 	tsteq	r0, r3, lsl #28
    25c8:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    25cc:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
    25d0:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
	put_byte (CMD_RDSR);
    25d4:	02051c27 	andeq	r1, r5, #9984	; 0x2700
	r = get_byte ();
    25d8:	23200624 			; <UNDEFINED> instruction: 0x23200624
    25dc:	05480305 	strbeq	r0, [r8, #-773]	; 0xfffffcfb
	while (dopen && (rdsr () & 1)) {
    25e0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
}
    25e4:	052d0602 	streq	r0, [sp, #-1538]!	; 0xfffff9fe
		if (st == WNONE)
    25e8:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
    25ec:	01010005 	tsteq	r1, r5
			mdelay (1);
    25f0:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
    25f4:	00184c02 	andseq	r4, r8, r2, lsl #24
			delay (del, st);
    25f8:	00fa0300 	rscseq	r0, sl, r0, lsl #6
    25fc:	13020501 	movwne	r0, #9473	; 0x2501
			release;
    2600:	1f061b05 	svcne	0x00061b05
    2604:	02210205 	eoreq	r0, r1, #1342177280	; 0x50000000
    2608:	01010006 	tsteq	r1, r6
static void ready () {
    260c:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
	if (dopen) {
    2610:	00185c02 	andseq	r5, r8, r2, lsl #24
		wwait (WNONE, 1);
    2614:	00fe0300 	rscseq	r0, lr, r0, lsl #6
    2618:	16020501 	strne	r0, [r2], -r1, lsl #10
    261c:	010e0514 	tsteq	lr, r4, lsl r5
	dstat = 0;
    2620:	03061e05 	movweq	r1, #28165	; 0x6e05
}
    2624:	0905207a 	stmdbeq	r5, {r1, r3, r4, r5, r6, sp}
    2628:	031e0534 	tsteq	lr, #52, 10	; 0xd000000
    262c:	0305207a 	movweq	r2, #20602	; 0x507a
	udelay (1);
    2630:	12052706 	andne	r2, r5, #1572864	; 0x180000
    2634:	06050106 	streq	r0, [r5], -r6, lsl #2
	udelay (1);
    2638:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
		dopen = DOPEN_TEMP;
    263c:	0620051f 			; <UNDEFINED> instruction: 0x0620051f
    2640:	060e0501 	streq	r0, [lr], -r1, lsl #10
    2644:	06020520 	streq	r0, [r2], -r0, lsr #10
    2648:	05320601 	ldreq	r0, [r2, #-1537]!	; 0xfffff9ff
static void cclose () {
    264c:	02051303 	andeq	r1, r5, #201326592	; 0xc000000
	if (dopen == DOPEN_TEMP) {
    2650:	1105153b 	tstne	r5, fp, lsr r5
    2654:	01050106 	tsteq	r5, r6, lsl #2
		wwait (WNONE, 1);
    2658:	0006022f 	andeq	r0, r6, pc, lsr #4
    265c:	21050101 	tstcs	r5, r1, lsl #2
	cmd_0 (CMD_DP);
    2660:	00020500 	andeq	r0, r2, r0, lsl #10
    2664:	03000000 	movweq	r0, #0
		dopen = 0;
    2668:	0501018e 	streq	r0, [r1, #-398]	; 0xfffffe72
}
    266c:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
word ee_open () {
    2670:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
	ready ();
    2674:	21052006 	tstcs	r5, r6
	dopen = DOPEN_PERM;
    2678:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    267c:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
}
    2680:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	if (dopen) {
    2684:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    2688:	03052106 	movweq	r2, #20742	; 0x5106
		dopen = DOPEN_TEMP;
    268c:	0606054b 	streq	r0, [r6], -fp, asr #10
		cclose ();
    2690:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
}
    2694:	0620052b 	strteq	r0, [r0], -fp, lsr #10
int ser_out (word st, const char *m) {
    2698:	060e0501 	streq	r0, [lr], -r1, lsl #10
	if ((prcs = running (__outserial)) != 0) {
    269c:	06020520 	streq	r0, [r2], -r0, lsr #10
    26a0:	05340601 	ldreq	r0, [r4, #-1537]!	; 0xfffff9ff
    26a4:	0205580b 	andeq	r5, r5, #720896	; 0xb0000
		join (prcs, st);
    26a8:	01080513 	tsteq	r8, r3, lsl r5
		release;
    26ac:	052f0305 	streq	r0, [pc, #-773]!	; 23af <tcvphy_rcv+0x13>
	if (*m)
    26b0:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
		prcs = strlen (m) +1;
    26b4:	12052021 	andne	r2, r5, #33	; 0x21
    26b8:	06030520 	streq	r0, [r3], -r0, lsr #10
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    26bc:	0606052f 	streq	r0, [r6], -pc, lsr #10
    26c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    26c4:	2e0b0532 	mcrcs	5, 0, r0, cr11, cr2, {1}
		umwait (st);
    26c8:	13060105 	movwne	r0, #24837	; 0x6105
    26cc:	01000702 	tsteq	r0, r2, lsl #14
		prcs =  m [1] + 3;
    26d0:	002a0501 	eoreq	r0, sl, r1, lsl #10
	if (*m)
    26d4:	18880205 	stmne	r8, {r0, r2, r9}
		strcpy (buf, m);
    26d8:	a6030000 	strge	r0, [r3], -r0
    26dc:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
	if (runstrand (__outserial, buf) == 0) {
    26e0:	06050514 			; <UNDEFINED> instruction: 0x06050514
    26e4:	06020501 	streq	r0, [r2], -r1, lsl #10
		ufree (buf);
    26e8:	00020221 	andeq	r0, r2, r1, lsr #4
    26ec:	2e050101 	adfcss	f0, f5, f1
		memcpy (buf, m, prcs);
    26f0:	90020500 	andls	r0, r2, r0, lsl #10
    26f4:	03000018 	movweq	r0, #24
    26f8:	060101ae 	streq	r0, [r1], -lr, lsr #3
}
    26fc:	06020520 	streq	r0, [r2], -r0, lsr #10
    2700:	13200e03 			; <UNDEFINED> instruction: 0x13200e03
int ser_in (word st, char *buf, int len) {
    2704:	05011003 	streq	r1, [r1, #-3]
    2708:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	if (len == 0)
    270c:	02053c05 	andeq	r3, r5, #1280	; 0x500
	if (__inpline == NULL) {
    2710:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
		if ((prcs = running (__inserial)) == 0) {
    2714:	01060605 	tsteq	r6, r5, lsl #12
    2718:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
			prcs = runthread (__inserial);
    271c:	03053c06 	movweq	r3, #23558	; 0x5c06
    2720:	2e270806 	cdpcs	8, 2, cr0, cr7, cr6, {0}
			if (prcs == 0) {
    2724:	29030205 	stmdbcs	r3, {r0, r2, r9}
				npwait (st);
    2728:	06140520 	ldreq	r0, [r4], -r0, lsr #10
		release;
    272c:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
		join (prcs, st);
    2730:	03060405 	movweq	r0, #25605	; 0x6405
    2734:	09052e59 	stmdbeq	r5, {r0, r3, r4, r6, r9, sl, fp, sp}
	if (*__inpline == NULL) // bin cmd
    2738:	07050106 	streq	r0, [r5, -r6, lsl #2]
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    273c:	06040520 	streq	r0, [r4], -r0, lsr #10
	if (prcs >= len)
    2740:	06080531 			; <UNDEFINED> instruction: 0x06080531
		prcs = len-1;
    2744:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
	memcpy (buf, __inpline, prcs);
    2748:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    274c:	3e080605 	cfmadd32cc	mvax0, mvfx0, mvfx8, mvfx5
    2750:	79030305 	stmdbvc	r3, {r0, r2, r8, r9}
	ufree (__inpline);
    2754:	0305053c 	movweq	r0, #21820	; 0x553c
	__inpline = NULL;
    2758:	12052e0b 	andne	r2, r5, #11, 28	; 0xb0
	if (*buf) // if it's NULL, it's a bin cmd
    275c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		buf [prcs] = '\0';
    2760:	07052106 	streq	r2, [r5, -r6, lsl #2]
}
    2764:	03051106 	movweq	r1, #20742	; 0x5106
		prcs = strlen (__inpline);
    2768:	66170306 	ldrvs	r0, [r7], -r6, lsl #6
    276c:	01060705 	tsteq	r6, r5, lsl #14
		return 0;
    2770:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2774:	16030602 	strne	r0, [r3], -r2, lsl #12
    2778:	060b053c 			; <UNDEFINED> instruction: 0x060b053c
int ser_outf (word st, const char *m, ...) {
    277c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2780:	06010540 	streq	r0, [r1], -r0, asr #10
	if ((prcs = running (__outserial)) != 0) {
    2784:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    2788:	2e730302 	cdpcs	3, 7, cr0, cr3, cr2, {0}
		join (prcs, st);
    278c:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    2790:	000a022e 	andeq	r0, sl, lr, lsr #4
		release;
    2794:	1b050101 	blne	142ba0 <__ccfg+0x122bf8>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2798:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    279c:	03000019 	movweq	r0, #25
    27a0:	050102d2 	streq	r0, [r1, #-722]	; 0xfffffd2e
		umwait (st);
    27a4:	1b051402 	blne	1477b4 <__ccfg+0x12780c>
    27a8:	02051006 	andeq	r1, r5, #6
	if (runstrand (__outserial, buf) == 0) {
    27ac:	024b0622 	subeq	r0, fp, #35651584	; 0x2200000
    27b0:	01010005 	tsteq	r1, r5
    27b4:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
		ufree (buf);
    27b8:	00197002 	andseq	r7, r9, r2
		npwait (st);
    27bc:	02d80300 	sbcseq	r0, r8, #0, 6
}
    27c0:	16020501 	strne	r0, [r2], -r1, lsl #10
    27c4:	0e062a05 	vmlaeq.f32	s4, s12, s10
    27c8:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
    27cc:	02053e05 	andeq	r3, r5, #5, 28	; 0x50
int ser_inf (word st, const char *fmt, ...) {
    27d0:	05054a06 	streq	r4, [r5, #-2566]	; 0xfffff5fa
    27d4:	03050106 	movweq	r0, #20742	; 0x5106
	if (fmt == NULL)
    27d8:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
	if (__inpline == NULL) {
    27dc:	3d06014c 	stfccs	f0, [r6, #-304]	; 0xfffffed0
		if ((prcs = running (__inserial)) == 0) {
    27e0:	2020061f 	eorcs	r0, r0, pc, lsl r6
    27e4:	06010513 			; <UNDEFINED> instruction: 0x06010513
			prcs = runthread (__inserial);
    27e8:	00060221 	andeq	r0, r6, r1, lsr #4
    27ec:	21050101 	tstcs	r5, r1, lsl #2
			if (prcs == 0) {
    27f0:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
				npwait (st);
    27f4:	03000019 	movweq	r0, #25
		release;
    27f8:	050102e5 	streq	r0, [r1, #-741]	; 0xfffffd1b
		join (prcs, st);
    27fc:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    2800:	03062105 	movweq	r2, #24837	; 0x6105
	va_start (ap, fmt);
    2804:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
	prcs = vscan (__inpline, fmt, ap);
    2808:	052e0627 	streq	r0, [lr, #-1575]!	; 0xfffff9d9
    280c:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
	ufree (__inpline);
    2810:	1305200a 	movwne	r2, #20490	; 0x500a
	__inpline = NULL;
    2814:	060f0520 	streq	r0, [pc], -r0, lsr #10
}
    2818:	0603054a 	streq	r0, [r3], -sl, asr #10
    281c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2820:	0607052f 	streq	r0, [r7], -pc, lsr #10
		return 0;
    2824:	06050501 	streq	r0, [r5], -r1, lsl #10
    2828:	02054b5a 	andeq	r4, r5, #92160	; 0x16800
    282c:	0601050d 	streq	r0, [r1], -sp, lsl #10
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2830:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
    2834:	01010003 	tsteq	r1, r3
    2838:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
	RF_cmdFs.frequency = 
    283c:	00000002 	andeq	r0, r0, r2
}
    2840:	02f70300 	rscseq	r0, r7, #0, 6
    2844:	16020501 	strne	r0, [r2], -r1, lsl #10
    2848:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    284c:	01790306 	cmneq	r9, r6, lsl #6
static int option (int opt, address val) {
    2850:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    2854:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
    2858:	0e050106 	adfeqs	f0, f5, f6
    285c:	12052e06 	andne	r2, r5, #6, 28	; 0x60
    2860:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2864:	3301053c 	movwcc	r0, #5436	; 0x153c
    2868:	1c060305 	stcne	3, cr0, [r6], {5}
    286c:	01060605 	tsteq	r6, r5, lsl #12
    2870:	051f2005 	ldreq	r2, [pc, #-5]	; 2873 <option+0x23>
    2874:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    2878:	1f052106 	svcne	0x00052106
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    287c:	00010264 	andeq	r0, r1, r4, ror #4
    2880:	26050101 	strcs	r0, [r5], -r1, lsl #2
			goto RVal;
    2884:	d8020500 	stmdale	r2, {r8, sl}
			_BIS (dstate, DSTATE_RXON);
    2888:	03000019 	movweq	r0, #25
    288c:	05010387 	streq	r0, [r1, #-903]	; 0xfffffc79
	int ret = 0;
    2890:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
			p_trigger (drvprcs, qevent);
    2894:	200e0626 	andcs	r0, lr, r6, lsr #12
    2898:	06240205 	strteq	r0, [r4], -r5, lsl #4
    289c:	0609052e 	streq	r0, [r9], -lr, lsr #10
    28a0:	06030528 	streq	r0, [r3], -r8, lsr #10
    28a4:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    28a8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    28ac:	3d300604 	ldccc	6, cr0, [r0, #-16]!
    28b0:	17060105 	strne	r0, [r6, -r5, lsl #2]
    28b4:	03060205 	movweq	r0, #25093	; 0x6205
    28b8:	04022e77 	streq	r2, [r2], #-3703	; 0xfffff189
}
    28bc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			_BIC (dstate, DSTATE_RXON);
    28c0:	02050021 	andeq	r0, r5, #33	; 0x21
    28c4:	000019fc 	strdeq	r1, [r0], -ip
			statid = (val == NULL) ? 0 : *val;
    28c8:	01039903 	tsteq	r3, r3, lsl #18
    28cc:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
	int ret = 0;
    28d0:	200e0621 	andcs	r0, lr, r1, lsr #12
			ret = (int) statid;
    28d4:	06240205 	strteq	r0, [r4], -r5, lsl #4
	if (val != NULL)
    28d8:	1e053e85 	cdpne	14, 0, cr3, cr5, cr5, {4}
		*val = ret;
    28dc:	0b050106 	bleq	142cfc <__ccfg+0x122d54>
			ret = rbuffl + 2;
    28e0:	201e052e 	andscs	r0, lr, lr, lsr #10
    28e4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
			if (val != NULL) {
    28e8:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
				memcpy (val, &rxstat,
    28ec:	02590601 	subseq	r0, r9, #1048576	; 0x100000
    28f0:	01010005 	tsteq	r1, r5
				memset (&rxstat, 0, 
    28f4:	05001405 	streq	r1, [r0, #-1029]	; 0xfffffbfb
    28f8:	00000002 	andeq	r0, r0, r2
			if (val == NULL)
    28fc:	03a70300 			; <UNDEFINED> instruction: 0x03a70300
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2900:	16020501 	strne	r0, [r2], -r1, lsl #10
    2904:	67060105 	strvs	r0, [r6, -r5, lsl #2]
				utimer_set (bckf_timer, *val);
    2908:	01000402 	tsteq	r0, r2, lsl #8
    290c:	00180501 	andseq	r0, r8, r1, lsl #10
    2910:	00000205 	andeq	r0, r0, r5, lsl #4
			for (ret = 0; ret < 8; ret++)
    2914:	b2030000 	andlt	r0, r3, #0
				if (RF_cmdPropRadioDivSetup.txPower
    2918:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
					== patable [ret])
    291c:	18051414 	stmdane	r5, {r2, r4, sl, ip}
				if (RF_cmdPropRadioDivSetup.txPower
    2920:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
			for (ret = 0; ret < 8; ret++)
    2924:	5a062402 	bpl	18b934 <__ccfg+0x16b98c>
    2928:	01060505 	tsteq	r6, r5, lsl #10
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    292c:	21060305 	tstcs	r6, r5, lsl #6
    2930:	01060505 	tsteq	r6, r5, lsl #10
    2934:	35060205 	strcc	r0, [r6, #-517]	; 0xfffffdfb
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2938:	01061205 	tsteq	r6, r5, lsl #4
    293c:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
			_BIS (dstate, DSTATE_IRST);
    2940:	7a030603 	bvc	c4154 <__ccfg+0xa41ac>
    2944:	06053d20 	streq	r3, [r5], -r0, lsr #26
    2948:	17050106 	strne	r0, [r5, -r6, lsl #2]
			ret = (int) channel;
    294c:	3d0b052e 	cfstr32cc	mvfx0, [fp, #-184]	; 0xffffff48
			goto RVal;
    2950:	01000802 	tsteq	r0, r2, lsl #16
				(*val > 7) ? 7 : *val;
    2954:	001d0501 	andseq	r0, sp, r1, lsl #10
    2958:	00000205 	andeq	r0, r0, r5, lsl #4
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    295c:	92030000 	andls	r0, r3, #0
    2960:	02050104 	andeq	r0, r5, #4, 2
			plugch ();
    2964:	1d051414 	cfstrsne	mvf1, [r5, #-80]	; 0xffffffb0
			_BIS (dstate, DSTATE_IRST);
    2968:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
    296c:	06030524 	streq	r0, [r3], -r4, lsr #10
			ret = (int) vrate;
    2970:	06050521 	streq	r0, [r5], -r1, lsr #10
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2974:	06020501 	streq	r0, [r2], -r1, lsl #10
    2978:	06010532 			; <UNDEFINED> instruction: 0x06010532
    297c:	06030513 			; <UNDEFINED> instruction: 0x06030513
    2980:	0006022b 	andeq	r0, r6, fp, lsr #4
    2984:	1d050101 	stfnes	f0, [r5, #-4]
    2988:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    298c:	0300001a 	movweq	r0, #26
    2990:	0501049e 	streq	r0, [r1, #-1182]	; 0xfffffb62
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2994:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2998:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    299c:	052f0603 	streq	r0, [pc, #-1539]!	; 23a1 <tcvphy_rcv+0x5>
    29a0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
			syserror (EREQPAR, "cc13 op");
    29a4:	2e3e0602 	cfmsuba32cs	mvax0, mvax0, mvfx14, mvfx2
    29a8:	25060105 	strcs	r0, [r6, #-261]	; 0xfffffefb
    29ac:	1c060305 	stcne	3, cr0, [r6], {5}
    29b0:	01060605 	tsteq	r6, r5, lsl #12
    29b4:	3b060205 	blcc	1831d0 <__ccfg+0x163228>
    29b8:	01000602 	tsteq	r0, r2, lsl #12
    29bc:	001d0501 	andseq	r0, sp, r1, lsl #10
    29c0:	00000205 	andeq	r0, r0, r5, lsl #4
    29c4:	ac030000 	stcge	0, cr0, [r3], {-0}
    29c8:	02050104 	andeq	r0, r5, #4, 2
    29cc:	13141314 	tstne	r4, #20, 6	; 0x50000000
    29d0:	03061d05 	movweq	r1, #27909	; 0x6d05
    29d4:	0405017a 	streq	r0, [r5], #-378	; 0xfffffe86
    29d8:	21020525 	tstcs	r2, r5, lsr #10
    29dc:	01052e06 	tsteq	r5, r6, lsl #28
static void issue_cmd (lword cmd) {
    29e0:	03052406 	movweq	r2, #21510	; 0x5406
    29e4:	06051d06 	streq	r1, [r5], -r6, lsl #26
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29e8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    29ec:	2106051f 	tstcs	r6, pc, lsl r5
    29f0:	21060405 	tstcs	r6, r5, lsl #8
		if (res != 0x86)
    29f4:	01060505 	tsteq	r6, r5, lsl #10
			syserror (EHARDWARE, "hang ic0");
    29f8:	3a060205 	bcc	183214 <__ccfg+0x16326c>
    29fc:	01000402 	tsteq	r0, r2, lsl #8
		if (cnt-- == 0) {
    2a00:	00210501 	eoreq	r0, r1, r1, lsl #10
			diag ("HUP %lx %lx", cmd, res);
    2a04:	1a580205 	bne	1603220 <__ccfg+0x15e3278>
    2a08:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
			syserror (EHARDWARE, "hang ic0");
    2a0c:	02050104 	andeq	r0, r5, #4, 2
		udelay (1);
    2a10:	21051414 	tstcs	r5, r4, lsl r4
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a14:	09050e06 	stmdbeq	r5, {r1, r2, r9, sl, fp}
}
    2a18:	060e0524 	streq	r0, [lr], -r4, lsr #10
    2a1c:	06020520 	streq	r0, [r2], -r0, lsr #10
    2a20:	31010501 	tstcc	r1, r1, lsl #10
    2a24:	1d062205 	sfmne	f2, 4, [r6, #-20]	; 0xffffffec
static void rx_de () {
    2a28:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
	if ((dstate & DSTATE_RXAC) == 0)
    2a2c:	0201061f 	andeq	r0, r1, #32505856	; 0x1f00000
    2a30:	01010002 	tsteq	r1, r2
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2a34:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
	_BIC (dstate, DSTATE_RXAC);
    2a38:	001a6602 	andseq	r6, sl, r2, lsl #12
    2a3c:	04c10300 	strbeq	r0, [r1], #768	; 0x300
}
    2a40:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2a44:	05202005 	streq	r2, [r0, #-5]!
    2a48:	1a050108 	bne	142e70 <__ccfg+0x122ec8>
static void rf_off () {
    2a4c:	18050106 	stmdane	r5, {r1, r2, r8}
	if ((dstate & DSTATE_RFON) == 0)
    2a50:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    2a54:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
	IntDisable (INT_RFC_CPE_0);
    2a58:	01010001 	tsteq	r1, r1
    2a5c:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    2a60:	001a7602 	andseq	r7, sl, r2, lsl #12
	RFCAdi3VcoLdoVoltageMode (false);
    2a64:	04c60300 	strbeq	r0, [r6], #768	; 0x300
	RFCSynthPowerDown ();
    2a68:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a6c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2a70:	05053002 	streq	r3, [r5, #-2]
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a74:	01050106 	tsteq	r5, r6, lsl #2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a78:	1d11052f 	cfldr32ne	mvfx0, [r1, #-188]	; 0xffffff44
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a7c:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a80:	052f0603 	streq	r0, [pc, #-1539]!	; 2485 <tcvphy_top+0xd>
    2a84:	02010608 	andeq	r0, r1, #8, 12	; 0x800000
    2a88:	01010003 	tsteq	r1, r3
	_BIC (dstate, DSTATE_RFON);
    2a8c:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    2a90:	00000002 	andeq	r0, r0, r2
}
    2a94:	04cd0300 	strbeq	r0, [sp], #768	; 0x300
    2a98:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2a9c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2aa0:	02024b02 	andeq	r4, r2, #2048	; 0x800
    2aa4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2aa8:	02050033 	andeq	r0, r5, #51	; 0x33
    2aac:	00000000 	andeq	r0, r0, r0
    2ab0:	0104d303 	tsteq	r4, r3, lsl #6
		if (cmd->status == tstat)
    2ab4:	02140205 	andseq	r0, r4, #1342177280	; 0x50000000
		if (timeout-- == 0) {
    2ab8:	01010003 	tsteq	r1, r3
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2abc:	05003705 	streq	r3, [r0, #-1797]	; 0xfffff8fb
    2ac0:	001a9202 	andseq	r9, sl, r2, lsl #4
    2ac4:	04d80300 	ldrbeq	r0, [r8], #768	; 0x300
			syserror (EHARDWARE, "rt2");
    2ac8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2acc:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
		udelay (1);
    2ad0:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
		if (cmd->status == tstat)
    2ad4:	051f0603 	ldreq	r0, [pc, #-1539]	; 24d9 <tcvphy_end+0x2d>
}
    2ad8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    2adc:	03022e0b 	movweq	r2, #11787	; 0x2e0b
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2ae0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2ae4:	0205002e 	andeq	r0, r5, #46	; 0x2e
static void rf_on () {
    2ae8:	00001aa6 	andeq	r1, r0, r6, lsr #21
    2aec:	0104de03 	tsteq	r4, r3, lsl #28
	OSCHF_TurnOnXosc();
    2af0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2af4:	01052008 	tsteq	r5, r8
    2af8:	03053006 	movweq	r3, #20486	; 0x5006
    2afc:	0b051f06 	bleq	14a71c <__ccfg+0x12a774>
    2b00:	03020106 	movweq	r0, #8454	; 0x2106
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b04:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2b08:	0205002b 	andeq	r0, r5, #43	; 0x2b
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2b0c:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2b10:	0104e803 	tsteq	r4, r3, lsl #16
	issue_cmd (
    2b14:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2b18:	0510062b 	ldreq	r0, [r0, #-1579]	; 0xfffff9d5
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2b1c:	03052205 	movweq	r2, #20997	; 0x5205
    2b20:	31062106 	tstcc	r6, r6, lsl #2
    2b24:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
   pPatchTab[80] = 0;
    2b28:	01060c05 	tsteq	r6, r5, lsl #24
   } while (--nIterations);
    2b2c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
   pPatchTab[53] = 2;
    2b30:	052f0603 	streq	r0, [pc, #-1539]!	; 2535 <zero_loop+0x2d>
    2b34:	0e053e02 	cdpeq	14, 0, cr3, cr5, cr2, {0}
   pPatchTab[55] = 3;
    2b38:	01050106 	tsteq	r5, r6, lsl #2
   pPatchTab[110] = 4;
    2b3c:	00050221 	andeq	r0, r5, r1, lsr #4
   pPatchTab[107] = 5;
    2b40:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
   pPatchTab[65] = 6;
    2b44:	d8020500 	stmdale	r2, {r8, sl}
    2b48:	0300001a 	movweq	r0, #26
   pPatchTab[57] = 1;
    2b4c:	050104f8 	streq	r0, [r1, #-1272]	; 0xfffffb08
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b50:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
   const uint32_t *pS = patchGenfskRfe;
    2b54:	2e0e0645 	cfmadd32cs	mvax2, mvfx0, mvfx14, mvfx5
      t2 = *pS++;
    2b58:	055c0505 	ldrbeq	r0, [ip, #-1285]	; 0xfffffafb
      t4 = *pS++;
    2b5c:	19052022 	stmdbne	r5, {r1, r5, sp}
      t6 = *pS++;
    2b60:	0603054a 	streq	r0, [r3], -sl, asr #10
      t8 = *pS++;
    2b64:	4c020521 	cfstr32mi	mvfx0, [r2], {33}	; 0x21
      *pD++ = t1;
    2b68:	01060505 	tsteq	r6, r5, lsl #10
      *pD++ = t2;
    2b6c:	40060205 	andmi	r0, r6, r5, lsl #4
      *pD++ = t3;
    2b70:	01060f05 	tsteq	r6, r5, lsl #30
      *pD++ = t5;
    2b74:	4c060205 	sfmmi	f0, 4, [r6], {5}
      *pD++ = t7;
    2b78:	01060505 	tsteq	r6, r5, lsl #10
   } while (--nIterations);
    2b7c:	31060205 	tstcc	r6, r5, lsl #4
    2b80:	01060505 	tsteq	r6, r5, lsl #10
      *pD++ = t8;
    2b84:	4f060305 	svcmi	0x00060305
   } while (--nIterations);
    2b88:	01060605 	tsteq	r6, r5, lsl #12
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b8c:	30060305 	andcc	r0, r6, r5, lsl #6
   *pD++ = t2;
    2b90:	03040559 	movweq	r0, #17753	; 0x4559
   *pD++ = t3;
    2b94:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
   *pD++ = t4;
    2b98:	052e7603 	streq	r7, [lr, #-1539]!	; 0xfffff9fd
   *pD++ = t5;
    2b9c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2ba0:	05350603 	ldreq	r0, [r5, #-1539]!	; 0xfffff9fd
	RFCAdi3VcoLdoVoltageMode (true);
    2ba4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2ba8:	594b0604 	stmdbpl	fp, {r2, r9, sl}^
       	RFCRfTrimSet (&rfTrim);
    2bac:	01060b05 	tsteq	r6, r5, lsl #22
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2bb0:	69060305 	stmdbvs	r6, {r0, r2, r8, r9}
    2bb4:	01060a05 	tsteq	r6, r5, lsl #20
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2bb8:	59060305 	stmdbpl	r6, {r0, r2, r8, r9}
    2bbc:	03060a05 	movweq	r0, #27141	; 0x6a05
	issue_cmd ((lword)&cmd_srt);
    2bc0:	01050161 	tsteq	r5, r1, ror #2
    2bc4:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
	issue_cmd ((lword)&RF_cmdFs);
    2bc8:	7a030602 	bvc	c43d8 <__ccfg+0xa4430>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2bcc:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2bd0:	06030501 	streq	r0, [r3], -r1, lsl #10
    2bd4:	0502752f 	streq	r7, [r2, #-1327]	; 0xfffffad1
	IntEnable (INT_RFC_CPE_0);
    2bd8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	_BIC (dstate, DSTATE_IRST);
    2bdc:	0205001a 	andeq	r0, r5, #26
    2be0:	00001b74 	andeq	r1, r0, r4, ror fp
    2be4:	0105ef03 	tsteq	r5, r3, lsl #30
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2be8:	03170205 	tsteq	r7, #1342177280	; 0x50000000
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bec:	15050113 	strne	r0, [r5, #-275]	; 0xfffffeed
	IntEnable (INT_RFC_CPE_0);
    2bf0:	1a050106 	bne	143010 <__ccfg+0x123068>
    2bf4:	05206803 	streq	r6, [r0, #-2051]!	; 0xfffff7fd
}
    2bf8:	20180315 	andscs	r0, r8, r5, lsl r3
	IntEnable (INT_RFC_CPE_0);
    2bfc:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
    2c00:	03052005 	movweq	r2, #20485	; 0x5005
    2c04:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    2c08:	060d0552 			; <UNDEFINED> instruction: 0x060d0552
    2c0c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2c10:	0617053e 			; <UNDEFINED> instruction: 0x0617053e
    2c14:	2b1d0515 	blcs	744070 <__ccfg+0x7240c8>
    2c18:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
    2c1c:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2c20:	05140617 	ldreq	r0, [r4, #-1559]	; 0xfffff9e9
    2c24:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    2c28:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2c2c:	01052e0d 	tsteq	r5, sp, lsl #28
    2c30:	022e2c03 	eoreq	r2, lr, #768	; 0x300
    2c34:	0101000d 	tsteq	r1, sp
    2c38:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    2c3c:	001bc402 	andseq	ip, fp, r2, lsl #8
    2c40:	06fb0300 	ldrbteq	r0, [fp], r0, lsl #6
    2c44:	03020501 	movweq	r0, #9473	; 0x2501
    2c48:	1c05010c 	stfnes	f0, [r5], {12}
    2c4c:	01740306 	cmneq	r4, r6, lsl #6
    2c50:	0c030505 	cfstr32eq	mvfx0, [r3], {5}
    2c54:	06020520 	streq	r0, [r2], -r0, lsr #10
    2c58:	06070525 	streq	r0, [r7], -r5, lsr #10
    2c5c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
static void rx_int_enable () {
    2c60:	2f060305 	svccs	0x00060305
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c64:	0611054c 	ldreq	r0, [r1], -ip, asr #10
    2c68:	1c0f0516 	cfstr32ne	mvfx0, [pc], {22}
    2c6c:	05321105 	ldreq	r1, [r2, #-261]!	; 0xfffffefb
    2c70:	02051c0f 	andeq	r1, r5, #3840	; 0xf00
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c74:	11053206 	tstne	r5, r6, lsl #4
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c78:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c7c:	05303006 	ldreq	r3, [r0, #-6]!
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c80:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    2c84:	03052005 	movweq	r2, #20485	; 0x5005
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c88:	052f2f06 	streq	r2, [pc, #-3846]!	; 1d8a <diag+0x3a>
    2c8c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2c90:	08024201 	stmdaeq	r2, {r0, r9, lr}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c94:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c98:	02050017 	andeq	r0, r5, #23
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c9c:	00001c0c 	andeq	r1, r0, ip, lsl #24
		if (db->status == DATA_ENTRY_FINISHED) {
    2ca0:	0103d803 	tsteq	r3, r3, lsl #16
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ca4:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    2ca8:	03061705 	movweq	r1, #26373	; 0x6705
			nr++;
    2cac:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2cb0:	06030526 	streq	r0, [r3], -r6, lsr #10
    2cb4:	06090521 	streq	r0, [r9], -r1, lsr #10
    2cb8:	20070501 	andcs	r0, r7, r1, lsl #10
    2cbc:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
				__dp [pl + 1] = __dp [pl] - 128;
    2cc0:	06040513 			; <UNDEFINED> instruction: 0x06040513
				pl = __dp [1] + 2;
    2cc4:	21020511 	tstcs	r2, r1, lsl r5
				__dp [pl + 1] = __dp [pl] - 128;
    2cc8:	0f032e06 	svceq	0x00032e06
    2ccc:	03030520 	movweq	r0, #13600	; 0x3520
				__dp [pl] = 0;
    2cd0:	06054a72 			; <UNDEFINED> instruction: 0x06054a72
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2cd4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2cd8:	07053e06 	streq	r3, [r5, -r6, lsl #28]
    2cdc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			db->status = DATA_ENTRY_PENDING;
    2ce0:	0b052106 	bleq	14b100 <__ccfg+0x12b158>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ce4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2ce8:	2f3d2306 	svccs	0x003d2306
				diag ("BAD RX");
    2cec:	01060a05 	tsteq	r6, r5, lsl #20
    2cf0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
	if (nr) {
    2cf4:	2a3d0605 	bcs	f44510 <__ccfg+0xf24568>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cf8:	01060d05 	tsteq	r6, r5, lsl #26
}
    2cfc:	0a030105 	beq	c3118 <__ccfg+0xa3170>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2d00:	00070258 	andeq	r0, r7, r8, asr r2
    2d04:	1c050101 	stfnes	f0, [r5], {1}
    2d08:	00020500 	andeq	r0, r2, r0, lsl #10
}
    2d0c:	03000000 	movweq	r0, #0
    2d10:	050103f4 	streq	r0, [r1, #-1012]	; 0xfffffc0c
    2d14:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    2d18:	1c051313 	stcne	3, cr1, [r5], {19}
    2d1c:	01770306 	cmneq	r7, r6, lsl #6
    2d20:	05360405 	ldreq	r0, [r6, #-1029]!	; 0xfffffbfb
    2d24:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
    2d28:	031c0522 	tsteq	ip, #142606336	; 0x8800000
    2d2c:	0a052077 	beq	14af10 <__ccfg+0x12af68>
thread (cc1350_driver)
    2d30:	05201003 	streq	r1, [r0, #-3]!
    2d34:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    2d38:	20061205 	andcs	r1, r6, r5, lsl #4
    2d3c:	01060205 	tsteq	r6, r5, lsl #4
    2d40:	20110306 	andscs	r0, r1, r6, lsl #6
		if (dstate & DSTATE_IRST) {
    2d44:	01060505 	tsteq	r6, r5, lsl #10
    2d48:	21060305 	tstcs	r6, r5, lsl #6
    2d4c:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
			rf_off ();
    2d50:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			_BIC (dstate,
    2d54:	13590604 	cmpne	r9, #4, 12	; 0x400000
    2d58:	01060705 	tsteq	r6, r5, lsl #14
		if (dstate & DSTATE_RXAC) {
    2d5c:	21060505 	tstcs	r6, r5, lsl #10
    2d60:	01060b05 	tsteq	r6, r5, lsl #22
			if ((dstate & DSTATE_RXON) == 0)
    2d64:	31060405 	tstcc	r6, r5, lsl #8
				rx_de ();
    2d68:	01060705 	tsteq	r6, r5, lsl #14
		if (paylen == 0) {
    2d6c:	052f0905 	streq	r0, [pc, #-2309]!	; 246f <tcvphy_get+0x37>
    2d70:	2f3d0604 	svccs	0x003d0604
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d74:	4505052f 	strmi	r0, [r5, #-1327]	; 0xfffffad1
    2d78:	01060d05 	tsteq	r6, r5, lsl #26
    2d7c:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    2d80:	0007023c 	andeq	r0, r7, ip, lsr r2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d84:	20050101 	andcs	r0, r5, r1, lsl #2
    2d88:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    2d8c:	0300001c 	movweq	r0, #28
    2d90:	050107a2 	streq	r0, [r1, #-1954]	; 0xfffff85e
    2d94:	14161a02 	ldrne	r1, [r6], #-2562	; 0xfffff5fe
    2d98:	01060505 	tsteq	r6, r5, lsl #10
    2d9c:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    2da0:	0f060905 	svceq	0x00060905
		} else if (dstate & DSTATE_RXON) {
    2da4:	70032005 	andvc	r2, r3, r5
	if (dstate & DSTATE_RFON)
    2da8:	030d052e 	movweq	r0, #54574	; 0xd52e
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2dac:	1a052023 	bne	14ae40 <__ccfg+0x12ae98>
		re->status = DATA_ENTRY_PENDING;
    2db0:	05207003 	streq	r7, [r0, #-3]!
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2db4:	2e10030d 	cdpcs	3, 1, cr0, cr0, cr13, {0}
	issue_cmd ((lword)&RF_cmdPropRx);
    2db8:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
	_BIS (dstate, DSTATE_RXAC);
    2dbc:	206d0309 	rsbcs	r0, sp, r9, lsl #6
    2dc0:	03060205 	movweq	r0, #25093	; 0x6205
    2dc4:	05132e0f 	ldreq	r2, [r3, #-3599]	; 0xfffff1f1
    2dc8:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
	if (dstate & DSTATE_RXAC)
    2dcc:	03060106 	movweq	r0, #24838	; 0x6106
    2dd0:	03052009 	movweq	r2, #20489	; 0x5009
				if (statid != 0xffff)
    2dd4:	05011903 	streq	r1, [r1, #-2307]	; 0xfffff6fd
    2dd8:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2ddc:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
				RF_cmdPropTx.pktLen = (byte) paylen;
    2de0:	1b052f06 	blne	14ea00 <__ccfg+0x12ea58>
		if (paylen == 0) {
    2de4:	03050106 	movweq	r0, #20742	; 0x5106
			wait (qevent, DR_LOOP);
    2de8:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
    2dec:	01061205 	tsteq	r6, r5, lsl #4
			if (dstate & DSTATE_RXAC) {
    2df0:	40060205 	andmi	r0, r6, r5, lsl #4
    2df4:	01060905 	tsteq	r6, r5, lsl #18
				rx_int_enable ();
    2df8:	03060305 	movweq	r0, #25349	; 0x6305
			release;
    2dfc:	0605204f 	streq	r2, [r5], -pc, asr #32
			} else if (dstate & DSTATE_RFON) {
    2e00:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
				delay (offdelay, DR_GOOF);
    2e04:	03053d06 	movweq	r3, #23814	; 0x5d06
    2e08:	0606054c 	streq	r0, [r6], -ip, asr #10
    2e0c:	062e0501 	strteq	r0, [lr], -r1, lsl #10
		if (bckf_timer) {
    2e10:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
			wait (qevent, DR_LOOP);
    2e14:	05130609 	ldreq	r0, [r3, #-1545]	; 0xfffff9f7
    2e18:	05440602 	strbeq	r0, [r4, #-1538]	; 0xfffff9fe
    2e1c:	05221403 	streq	r1, [r2, #-1027]!	; 0xfffffbfd
			delay (bckf_timer, DR_LOOP);
    2e20:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2e24:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
			if (dstate & DSTATE_RXAC)
    2e28:	13053006 	movwne	r3, #20486	; 0x5006
    2e2c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if (dstate & DSTATE_RFON)
    2e30:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    2e34:	07050106 	streq	r0, [r5, -r6, lsl #2]
		rx_de ();
    2e38:	06040520 	streq	r0, [r4], -r0, lsr #10
		RF_cmdPropTx . status = 0;
    2e3c:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e40:	20100501 	andscs	r0, r0, r1, lsl #10
    2e44:	30060405 	andcc	r0, r6, r5, lsl #8
    2e48:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
		issue_cmd ((lword)&cmd_cs);
    2e4c:	1a051503 	bne	148260 <__ccfg+0x1282b8>
		if (dstate & DSTATE_IRST)
    2e50:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    2e54:	1e1a0530 	cfmvr64hne	r0, mvdx10
    2e58:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e5c:	01061505 	tsteq	r6, r5, lsl #10
    2e60:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
			delay (1, DR_XMIT);
    2e64:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e68:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2e6c:	06052512 			; <UNDEFINED> instruction: 0x06052512
    2e70:	25120529 	ldrcs	r0, [r2, #-1321]	; 0xfffffad7
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e74:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
    2e78:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
				RF_cmdPropTx . status = 0;
    2e7c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e80:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
				issue_cmd ((lword)&RF_cmdPropTx);
    2e84:	1b030601 	blne	c4690 <__ccfg+0xa46e8>
				proceed (DR_XMIT);
    2e88:	000e0201 	andeq	r0, lr, r1, lsl #4
    2e8c:	2c050101 	stfcss	f0, [r5], {1}
			txtries++;
    2e90:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e94:	0300001d 	movweq	r0, #29
    2e98:	050102ab 	streq	r0, [r1, #-683]	; 0xfffffd55
    2e9c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ea0:	200e062c 	andcs	r0, lr, ip, lsr #12
		goto DR_LOOP__;
    2ea4:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ea8:	19051c2c 	stmdbne	r5, {r2, r3, r5, sl, fp, ip}
		paylen = 0;
    2eac:	3c050524 	cfstr32cc	mvfx0, [r5], {36}	; 0x24
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2eb0:	23060205 	movwcs	r0, #25093	; 0x6205
		txtries = 0;
    2eb4:	03060a05 	movweq	r0, #27141	; 0x6a05
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2eb8:	0c05010b 	stfeqs	f0, [r5], {11}
    2ebc:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2ec0:	0323260a 			; <UNDEFINED> instruction: 0x0323260a
    2ec4:	02052076 	andeq	r2, r5, #118	; 0x76
    2ec8:	05182f06 	ldreq	r2, [r8, #-3846]	; 0xfffff0fa
		    tcvphy_top (physid) == NULL)
    2ecc:	05131403 	ldreq	r1, [r3, #-1027]	; 0xfffffbfd
    2ed0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2ed4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2ed8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
			rf_off ();
    2edc:	200f0301 	andcs	r0, pc, r1, lsl #6
endthread
    2ee0:	03060b05 	movweq	r0, #27397	; 0x6b05
    2ee4:	0c052073 	stceq	0, cr2, [r5], {115}	; 0x73
    2ee8:	04052006 	streq	r2, [r5], #-6
    2eec:	052f0620 	streq	r0, [pc, #-1568]!	; 28d4 <option+0x84>
    2ef0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    2ef4:	0b030602 	bleq	c4704 <__ccfg+0xa475c>
    2ef8:	06090520 	streq	r0, [r9], -r0, lsr #10
    2efc:	00040201 	andeq	r0, r4, r1, lsl #4
    2f00:	20050101 	andcs	r0, r5, r1, lsl #2
    2f04:	38020500 	stmdacc	r2, {r8, sl}
    2f08:	0300001d 	movweq	r0, #29
    2f0c:	05010881 	streq	r0, [r1, #-2177]	; 0xfffff77f
    2f10:	01090302 	tsteq	r9, r2, lsl #6
    2f14:	01061505 	tsteq	r6, r5, lsl #10
    2f18:	77032005 	strvc	r2, [r3, -r5]
    2f1c:	03150520 	tsteq	r5, #32, 10	; 0x8000000
void RFCCPE0IntHandler (void) {
    2f20:	02052009 	andeq	r2, r5, #9
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f24:	1d050523 	cfstr32ne	mvfx0, [r5, #-140]	; 0xffffff74
		_BIS (dstate, DSTATE_IRST);
    2f28:	21060305 	tstcs	r6, r5, lsl #6
    2f2c:	01061a05 	tsteq	r6, r5, lsl #20
    2f30:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2f34:	01000402 	tsteq	r0, r2, lsl #8
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f38:	00210501 	eoreq	r0, r1, r1, lsl #10
    2f3c:	00000205 	andeq	r0, r0, r5, lsl #4
	p_trigger (drvprcs, qevent);
    2f40:	94030000 	strls	r0, [r3], #-0
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f44:	02050108 	andeq	r0, r5, #8, 2
    2f48:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
    2f4c:	77030621 	strvc	r0, [r3, -r1, lsr #12]
    2f50:	03050501 	movweq	r0, #21761	; 0x5501
    2f54:	03053c09 	movweq	r3, #23561	; 0x5c09
    2f58:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    2f5c:	0a050106 	beq	14337c <__ccfg+0x1233d4>
    2f60:	2008052e 	andcs	r0, r8, lr, lsr #10
    2f64:	05221205 	streq	r1, [r2, #-517]!	; 0xfffffdfb
    2f68:	03051e08 	movweq	r1, #24072	; 0x5e08
	RISE_N_SHINE;
    2f6c:	02054c06 	andeq	r4, r5, #1536	; 0x600
    2f70:	06090514 			; <UNDEFINED> instruction: 0x06090514
    2f74:	5a010501 	bpl	44380 <__ccfg+0x243d8>
}
    2f78:	01000602 	tsteq	r0, r2, lsl #12
    2f7c:	00200501 	eoreq	r0, r0, r1, lsl #10
    2f80:	00000205 	andeq	r0, r0, r5, lsl #4
    2f84:	a7030000 	strge	r0, [r3, -r0]
    2f88:	02050108 	andeq	r0, r5, #8, 2
    2f8c:	13010903 	movwne	r0, #6403	; 0x1903
void phys_cc1350 (int phy, int mbs) {
    2f90:	06200514 			; <UNDEFINED> instruction: 0x06200514
	if (rbuffl != 0)
    2f94:	05017403 	streq	r7, [r1, #-1027]	; 0xfffffbfd
    2f98:	200c031d 	andcs	r0, ip, sp, lsl r3
		syserror (ETOOMANY, "cc13");
    2f9c:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
		syserror (EREQPAR, "cc13 mb");
    2fa0:	2f05200b 	svccs	0x0005200b
	if (mbs == 0)
    2fa4:	02052006 	andeq	r2, r5, #6
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2fa8:	24060106 	strcs	r0, [r6], #-262	; 0xfffffefa
		syserror (EREQPAR, "cc13 mb");
    2fac:	2e060505 	cfsh32cs	mvfx0, mvfx6, #5
    2fb0:	21060305 	tstcs	r6, r5, lsl #6
	i = 0;
    2fb4:	01060705 	tsteq	r6, r5, lsl #14
	rbuffl = (byte) mbs;
    2fb8:	4c060205 	sfmmi	f0, 4, [r6], {5}
		db->config.type = 0;	// General (data in structure)
    2fbc:	01060905 	tsteq	r6, r5, lsl #18
	rbuffl = (byte) mbs;
    2fc0:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2fc4:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    2fc8:	0623052e 	strteq	r0, [r3], -lr, lsr #10
		if (db == NULL)
    2fcc:	0606052d 	streq	r0, [r6], -sp, lsr #10
			syserror (EMALLOC, "cc13");
    2fd0:	060e054a 	streq	r0, [lr], -sl, asr #10
    2fd4:	00040201 	andeq	r0, r4, r1, lsl #4
    2fd8:	23050101 	movwcs	r0, #20737	; 0x5101
		db->status = DATA_ENTRY_PENDING;
    2fdc:	50020500 	andpl	r0, r2, r0, lsl #10
		if (i)
    2fe0:	0300001d 	movweq	r0, #29
			da->pNextEntry = (byte*) db;
    2fe4:	05010981 	streq	r0, [r1, #-2433]	; 0xfffff67f
		db->length = rbuffl + 2;
    2fe8:	13134102 	tstne	r3, #-2147483648	; 0x80000000
    2fec:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
		db->config.type = 0;	// General (data in structure)
    2ff0:	75030623 	strvc	r0, [r3, #-1571]	; 0xfffff9dd
		db->length = rbuffl + 2;
    2ff4:	03020501 	movweq	r0, #9473	; 0x2501
	db->pNextEntry = (byte*) re;
    2ff8:	061f3c0c 	ldreq	r3, [pc], -ip, lsl #24
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ffc:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    3000:	28030608 	stmdacs	r3, {r3, r9, sl}
	if (rbuffs == NULL)
    3004:	03020520 	movweq	r0, #9504	; 0x2520
	rbuffs->pCurrEntry = (byte*) re;
    3008:	1c052058 	stcne	0, cr2, [r5], {88}	; 0x58
	rbuffs->pLastEntry = NULL;
    300c:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    3010:	2e5d0302 	cdpcs	3, 5, cr0, cr13, cr2, {0}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3014:	05142e06 	ldreq	r2, [r4, #-3590]	; 0xfffff1fa
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    3018:	09050108 	stmdbeq	r5, {r3, r8}
    301c:	08050106 	stmdaeq	r5, {r1, r2, r8}
    3020:	06020520 	streq	r0, [r2], -r0, lsr #10
	rbuffl -= 2;
    3024:	2000c703 	andcs	ip, r0, r3, lsl #14
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3028:	02043d3d 	andeq	r3, r4, #3904	; 0xf40
	rbuffl -= 2;
    302c:	03060d05 	movweq	r0, #27909	; 0x6d05
	physid = phy;
    3030:	04017bcf 	streq	r7, [r1], #-3023	; 0xfffff431
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3034:	060f0501 	streq	r0, [pc], -r1, lsl #10
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3038:	2004b103 	andcs	fp, r4, r3, lsl #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    303c:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3040:	03240502 			; <UNDEFINED> instruction: 0x03240502
    3044:	05017bca 	streq	r7, [r1, #-3018]	; 0xfffff436
	utimer_add (&bckf_timer);
    3048:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
	drvprcs = runthread (cc1350_driver);
    304c:	01040106 	tsteq	r4, r6, lsl #2
    3050:	b1030205 	tstlt	r3, r5, lsl #4
    3054:	2f062004 	svccs	0x00062004
	if (drvprcs == 0)
    3058:	05580101 	ldrbeq	r0, [r8, #-257]	; 0xfffffeff
		syserror (ERESOURCE, "cc13");
    305c:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    3060:	b6030603 	strlt	r0, [r3], -r3, lsl #12
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3064:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    3068:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    306c:	05134b06 	ldreq	r4, [r3, #-2822]	; 0xfffff4fa
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3070:	05200607 	streq	r0, [r0, #-1543]!	; 0xfffff9f9
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3074:	134b0605 	movtne	r0, #46597	; 0xb605
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3078:	06090513 			; <UNDEFINED> instruction: 0x06090513
    307c:	0c052d01 	stceq	13, cr2, [r5], {1}
    3080:	03080528 	movweq	r0, #34088	; 0x8528
    3084:	05052077 	streq	r2, [r5, #-119]	; 0xffffff89
    3088:	05153206 	ldreq	r3, [r5, #-518]	; 0xfffffdfa
    308c:	050f0608 	streq	r0, [pc, #-1544]	; 2a8c <rf_off+0x40>
    3090:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    3094:	74310305 	ldrtvc	r0, [r1], #-773	; 0xfffffcfb
    3098:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
	plugch ();
    309c:	054a4e03 	strbeq	r4, [sl, #-3587]	; 0xfffff1fd
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    30a0:	0605411d 			; <UNDEFINED> instruction: 0x0605411d
    30a4:	08052d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, sp}
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    30a8:	06050106 	streq	r0, [r5], -r6, lsl #2
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    30ac:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    30b0:	0511060b 	ldreq	r0, [r1, #-1547]	; 0xfffff9f5
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    30b4:	06053c18 			; <UNDEFINED> instruction: 0x06053c18
}
    30b8:	060b052f 	streq	r0, [fp], -pc, lsr #10
    30bc:	03040546 	movweq	r0, #17734	; 0x4546
    30c0:	08052e31 	stmdaeq	r5, {r0, r4, r5, r9, sl, fp, sp}
    30c4:	6a030106 	bvs	c34e4 <__ccfg+0xa353c>
    30c8:	06050520 	streq	r0, [r5], -r0, lsr #10
    30cc:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
    30d0:	01061505 	tsteq	r6, r5, lsl #10
    30d4:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
    30d8:	06052e08 	streq	r2, [r5], -r8, lsl #28
    30dc:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
    30e0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    30e4:	05210607 	streq	r0, [r1, #-1543]!	; 0xfffff9f9
    30e8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    30ec:	05590606 	ldrbeq	r0, [r9, #-1542]	; 0xfffff9fa
    30f0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    30f4:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    30f8:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    30fc:	05590605 	ldrbeq	r0, [r9, #-1541]	; 0xfffff9fb
    3100:	16051406 	strne	r1, [r5], -r6, lsl #8
    3104:	08050106 	stmdaeq	r5, {r1, r2, r8}
    3108:	0606052e 	streq	r0, [r6], -lr, lsr #10
    310c:	06090521 	streq	r0, [r9], -r1, lsr #10
    3110:	200c0501 	andcs	r0, ip, r1, lsl #10
    3114:	2f060605 	svccs	0x00060605
    3118:	01060805 	tsteq	r6, r5, lsl #16
    311c:	2a060b05 	bcs	185d38 <__ccfg+0x165d90>
    3120:	14060805 	strne	r0, [r6], #-2053	; 0xfffff7fb
    3124:	051d1c05 	ldreq	r1, [sp, #-3077]	; 0xfffff3fb
    3128:	05350605 	ldreq	r0, [r5, #-1541]!	; 0xfffff9fb
    312c:	05591306 	ldrbeq	r1, [r9, #-774]	; 0xfffffcfa
    3130:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    3134:	0a051f08 	beq	14ad5c <__ccfg+0x12adb4>
    3138:	0606052d 	streq	r0, [r6], -sp, lsr #10
    313c:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    3140:	06050106 	streq	r0, [r5], -r6, lsl #2
    3144:	16052106 	strne	r2, [r5], -r6, lsl #2
    3148:	08050106 	stmdaeq	r5, {r1, r2, r8}
    314c:	0b05222c 	bleq	14ba04 <__ccfg+0x12ba5c>
    3150:	06051b06 	streq	r1, [r5], -r6, lsl #22
    3154:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    3158:	20090306 	andcs	r0, r9, r6, lsl #6
    315c:	01060805 	tsteq	r6, r5, lsl #16
    3160:	2f060605 	svccs	0x00060605
    3164:	03061c05 	movweq	r1, #27653	; 0x6c05
    3168:	0a05016e 	beq	143728 <__ccfg+0x123780>
    316c:	052e1203 	streq	r1, [lr, #-515]!	; 0xfffffdfd
    3170:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    3174:	03060520 	movweq	r0, #25888	; 0x6520
    3178:	052f2017 	streq	r2, [pc, #-23]!	; 3169 <tcv_ope_null+0xd>
    317c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    3180:	051e060b 	ldreq	r0, [lr, #-1547]	; 0xfffff9f5
    3184:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3188:	0405200b 	streq	r2, [r5], #-11
    318c:	3c0c0306 	stccc	3, cr0, [ip], {6}
    3190:	01000b02 	tsteq	r0, r2, lsl #22
    3194:	000f0501 	andeq	r0, pc, r1, lsl #10
    3198:	1e8c0205 	cdpne	2, 8, cr0, cr12, cr5, {0}
    319c:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    31a0:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
strand (__outserial, const char*)
    31a4:	06250513 			; <UNDEFINED> instruction: 0x06250513
    31a8:	2e180501 	cfmul32cs	mvfx0, mvfx8, mvfx1
    31ac:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    31b0:	25052018 	strcs	r2, [r5, #-24]	; 0xffffffe8
endstrand
    31b4:	2e0c0520 	cfsh32cs	mvfx0, mvfx12, #16
    31b8:	21060205 	tstcs	r6, r5, lsl #4
	ptr = data;
    31bc:	01051406 	tsteq	r5, r6, lsl #8
    31c0:	00080231 	andeq	r0, r8, r1, lsr r2
	if (*ptr)
    31c4:	0cbb0101 	ldfeqs	f0, [fp], #4
		len = strlen (ptr);
    31c8:	00030000 	andeq	r0, r3, r0
    31cc:	000001a5 	andeq	r0, r0, r5, lsr #3
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    31d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    31d4:	0101000d 	tsteq	r1, sp
    31d8:	00000101 	andeq	r0, r0, r1, lsl #2
    31dc:	00000100 	andeq	r0, r0, r0, lsl #2
    31e0:	6f682f01 	svcvs	0x00682f01
	len -= quant;
    31e4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    31e8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    31ec:	442f6e65 	strtmi	r6, [pc], #-3685	; 31f4 <__outserial+0x50>
	if (len == 0) {
    31f0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		ufree (data);
    31f4:	4f2f706f 	svcmi	0x002f706f
		finish;
    31f8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    31fc:	502f5445 	eorpl	r5, pc, r5, asr #8
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3200:	534f4349 	movtpl	r4, #62281	; 0xf349
    3204:	6369502f 	cmnvs	r9, #47	; 0x2f
    3208:	502f534f 	eorpl	r5, pc, pc, asr #6
    320c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3210:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
strand (__inserial, address)
    3214:	2f004974 	svccs	0x00004974
    3218:	2f727375 	svccs	0x00727375
    321c:	2f62696c 	svccs	0x0062696c
    3220:	2f636367 	svccs	0x00636367
    3224:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
	if (__inpline != NULL)
    3228:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    322c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
		finish;
    3230:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3234:	2f312e32 	svccs	0x00312e32
    3238:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    323c:	00656475 	rsbeq	r6, r5, r5, ror r4
    3240:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 318c <tcv_ope_null+0x30>
		umwait (IM_INIT);
    3244:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
		release;
    3248:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	savedata (data);
    324c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	len = MAX_LINE_LENGTH;
    3250:	6f746b73 	svcvs	0x00746b73
	io (IM_READ, __cport, READ, ptr, 1);
    3254:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3258:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    325c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3260:	2f534f43 	svccs	0x00534f43
	if (ptr == (char*) data) { // new line
    3264:	4f636950 	svcmi	0x00636950
    3268:	43432f53 	movtmi	r2, #16211	; 0x3f53
		if (*ptr == '\0') { // bin cmd
    326c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
			proceed (IM_BIN);
    3270:	6f682f00 	svcvs	0x00682f00
    3274:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		if (*ptr < 0x20)
    3278:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    327c:	442f6e65 	strtmi	r6, [pc], #-3685	; 3284 <__inserial+0x70>
			proceed (IM_READ);
    3280:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3284:	4f2f706f 	svcmi	0x002f706f
	if (*ptr == '\n' || *ptr == '\r') {
    3288:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    328c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3290:	534f4349 	movtpl	r4, #62281	; 0xf349
		*ptr = '\0';
    3294:	6369502f 	cmnvs	r9, #47	; 0x2f
		__inpline = (char*)data;
    3298:	2f00534f 	svccs	0x0000534f
		finish;
    329c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	if (len) {
    32a0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
		ptr++;
    32a4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    32a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		len--;
    32ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
	proceed (IM_READ);
    32b0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	io (IM_BIN, __cport, READ, ptr, 1);
    32b4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    32b8:	4349502f 	movtmi	r5, #36911	; 0x902f
    32bc:	502f534f 	eorpl	r5, pc, pc, asr #6
    32c0:	534f6369 	movtpl	r6, #62313	; 0xf369
    32c4:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
	len -= 2;
    32c8:	006c656e 	rsbeq	r6, ip, lr, ror #10
	if (len > *ptr + 1) // 1 for 0x04
    32cc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    32d0:	0100632e 	tsteq	r0, lr, lsr #6
		len = *ptr + 1;
    32d4:	74730000 	ldrbtvc	r0, [r3], #-0
    32d8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
	ptr++;
    32dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32e0:	74730000 	ldrbtvc	r0, [r3], #-0
    32e4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    32e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    32ec:	72610000 	rsbvc	r0, r1, #0
    32f0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    32f4:	00000300 	andeq	r0, r0, r0, lsl #6
	len -= quant;
    32f8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
		__inpline = (char*)data;
    32fc:	0300682e 	movweq	r6, #2094	; 0x82e
		finish;
    3300:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
	ptr += quant;
    3304:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3308:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
endstrand
    330c:	00000300 	andeq	r0, r0, r0, lsl #6
    3310:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
	proceed (IM_BINL);
    3314:	5f736e6f 	svcpl	0x00736e6f
endstrand
    3318:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    331c:	00030068 	andeq	r0, r3, r8, rrx
    3320:	73797300 	cmnvc	r9, #0, 6
    3324:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3328:	00000400 	andeq	r0, r0, r0, lsl #8
    332c:	5f766374 	svcpl	0x00766374
		if (res && (d < n))
    3330:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
    3334:	0100682e 	tsteq	r0, lr, lsr #16
    3338:	656b0000 	strbvs	r0, [fp, #-0]!
    333c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
			res [d] = (char) c;
    3340:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
		d++;
    3344:	63740000 	cmnvs	r4, #0
    3348:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    334c:	00682e73 	rsbeq	r2, r8, r3, ror lr
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3350:	74000001 	strvc	r0, [r0], #-1
    3354:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
    3358:	5f65646f 	svcpl	0x0065646f
				enci (10000);
    335c:	61746164 	cmnvs	r4, r4, ror #2
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3360:	0100682e 	tsteq	r0, lr, lsr #16
    3364:	623c0000 	eorsvs	r0, ip, #0
	d = 0;
    3368:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
		c = *fm++;
    336c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
		if (c == '\\') {
    3370:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    3374:	00310500 	eorseq	r0, r1, r0, lsl #10
    3378:	1eb00205 	cdpne	2, 11, cr0, cr0, cr5, {0}
				outc ('\\');
    337c:	93030000 	movwls	r0, #12288	; 0x3000
			if ((c = *fm++) == '\0') {
    3380:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
				outc ('\\');
    3384:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    3388:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
			outc (c);
    338c:	07052001 	streq	r2, [r5, -r1]
    3390:	22160526 	andscs	r0, r6, #159383552	; 0x9800000
			if (c == '\0')
    3394:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    3398:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
			outc (c);
    339c:	0513061a 	ldreq	r0, [r3, #-1562]	; 0xfffff9e6
				outc (val);
    33a0:	02051f0e 	andeq	r1, r5, #14, 30	; 0x38
				val = (word) va_arg (ap, aword);
    33a4:	1a052106 	bne	14b7c4 <__ccfg+0x12b81c>
		if (c == '%') {
    33a8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    33ac:	200c0306 	andcs	r0, ip, r6, lsl #6
			c = *fm++;
    33b0:	16060105 	strne	r0, [r6], -r5, lsl #2
			switch (c) {
    33b4:	01000102 	tsteq	r0, r2, lsl #2
    33b8:	002e0501 	eoreq	r0, lr, r1, lsl #10
    33bc:	1ec60205 	cdpne	2, 12, cr0, cr6, cr5, {0}
    33c0:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    33c4:	02050100 	andeq	r0, r5, #0, 2
    33c8:	06060516 			; <UNDEFINED> instruction: 0x06060516
    33cc:	20050501 	andcs	r0, r5, r1, lsl #10
    33d0:	2f060305 	svccs	0x00060305
				outc ('%');
    33d4:	01062905 	tsteq	r6, r5, lsl #18
    33d8:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
				outc (c);
    33dc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    33e0:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    33e4:	0305201c 	movweq	r2, #20508	; 0x501c
				if (c == '\0')
    33e8:	1a052106 	bne	14b808 <__ccfg+0x12b860>
				return d;
    33ec:	01050106 	tsteq	r5, r6, lsl #2
}
    33f0:	0001024c 	andeq	r0, r1, ip, asr #4
    33f4:	2e050101 	adfcss	f0, f5, f1
			switch (c) {
    33f8:	e0020500 	and	r0, r2, r0, lsl #10
    33fc:	0300001e 	movweq	r0, #30
    3400:	05010283 	streq	r0, [r1, #-643]	; 0xfffffd7d
				for (i = 12; ; i -= 4) {
    3404:	2e051602 	cfmadd32cs	mvax0, mvfx1, mvfx5, mvfx2
				val = (word) va_arg (ap, aword);
    3408:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
						[ (val >> i) & 0xf ]);
    340c:	012f0624 			; <UNDEFINED> instruction: 0x012f0624
    3410:	01011301 	tsteq	r1, r1, lsl #6
    3414:	06010514 			; <UNDEFINED> instruction: 0x06010514
					outc (__pi_hex_enc_table
    3418:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    341c:	01000202 	tsteq	r0, r2, lsl #4
					if (i == 0)
    3420:	003a0501 	eorseq	r0, sl, r1, lsl #10
    3424:	1ef00205 	cdpne	2, 15, cr0, cr0, cr5, {0}
				for (i = 12; ; i -= 4) {
    3428:	a7030000 	strge	r0, [r3, -r0]
				val = (word) va_arg (ap, aword);
    342c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
				if (c == 'd' && (val & 0x8000) != 0) {
    3430:	3a052406 	bcc	14c450 <__ccfg+0x12c4a8>
				val = (word) va_arg (ap, aword);
    3434:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
				if (c == 'd' && (val & 0x8000) != 0) {
    3438:	3a050124 	bcc	1438d0 <__ccfg+0x123928>
    343c:	02051c06 	andeq	r1, r5, #1536	; 0x600
					outc ('-');
    3440:	4a200624 	bmi	804cd8 <__ccfg+0x7e4d30>
    3444:	06050513 			; <UNDEFINED> instruction: 0x06050513
					val = (~val) + 1;
    3448:	06030501 	streq	r0, [r3], -r1, lsl #10
    344c:	2f02053d 	svccs	0x0002053d
				for (i = 12; ; i -= 4) {
    3450:	01060605 	tsteq	r6, r5, lsl #12
				enci (10000);
    3454:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3458:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    345c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    3460:	03052114 	movweq	r2, #20756	; 0x5114
    3464:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
    3468:	11050106 	tstne	r5, r6, lsl #2
    346c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3470:	060b0521 	streq	r0, [fp], -r1, lsr #10
    3474:	06020501 	streq	r0, [r2], -r1, lsl #10
    3478:	06190528 	ldreq	r0, [r9], -r8, lsr #10
    347c:	4b010501 	blmi	44888 <__ccfg+0x248e0>
    3480:	03060305 	movweq	r0, #25349	; 0x6305
    3484:	1405207a 	strne	r2, [r5], #-122	; 0xffffff86
    3488:	03050106 	movweq	r0, #20742	; 0x5106
    348c:	17052106 	strne	r2, [r5, -r6, lsl #2]
    3490:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    3494:	06030520 	streq	r0, [r3], -r0, lsr #10
    3498:	06110521 	ldreq	r0, [r1], -r1, lsr #10
				if (c == 'd' || c == 'u') {
    349c:	06030501 	streq	r0, [r3], -r1, lsl #10
    34a0:	060b0521 	streq	r0, [fp], -r1, lsr #10
					if (c == 'd' &&
    34a4:	00050201 	andeq	r0, r5, r1, lsl #4
					val = va_arg (ap, lword);
    34a8:	3a050101 	bcc	1438b4 <__ccfg+0x12390c>
					fm++;
    34ac:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
					if (c == 'd' &&
    34b0:	0300001f 	movweq	r0, #31
    34b4:	060101df 			; <UNDEFINED> instruction: 0x060101df
						outc ('-');
    34b8:	06020520 	streq	r0, [r2], -r0, lsr #10
    34bc:	30200903 	eorcc	r0, r0, r3, lsl #18
						val = (~val) + 1;
    34c0:	05840405 	streq	r0, [r4, #1029]	; 0x405
				enci (10000);
    34c4:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
					enci (1000000000UL);
    34c8:	014c0604 	cmpeq	ip, r4, lsl #12
    34cc:	4a065806 	bmi	1994ec <__ccfg+0x179544>
    34d0:	03062706 	movweq	r2, #26374	; 0x6706
    34d4:	05133c79 	ldreq	r3, [r3, #-3193]	; 0xfffff387
    34d8:	12030601 	andne	r0, r3, #1048576	; 0x100000
    34dc:	03040520 	movweq	r0, #17696	; 0x4520
    34e0:	2b062e75 	blcs	18eebc <__ccfg+0x16ef14>
    34e4:	01061b05 	tsteq	r6, r5, lsl #22
    34e8:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    34ec:	132e9001 			; <UNDEFINED> instruction: 0x132e9001
    34f0:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    34f4:	0304051a 	movweq	r0, #17690	; 0x451a
    34f8:	01052e78 	tsteq	r5, r8, ror lr
    34fc:	000c0236 	andeq	r0, ip, r6, lsr r2
    3500:	31050101 	tstcc	r5, r1, lsl #2
    3504:	c8020500 	stmdagt	r2, {r8, sl}
    3508:	0300001f 	movweq	r0, #31
				} else if (c == 'x') {
    350c:	050102ba 	streq	r0, [r1, #-698]	; 0xfffffd46
					for (i = 28; ; i -= 4) {
    3510:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
					val = va_arg (ap, lword);
    3514:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
							[ (val >> i) & 0xf ]);
    3518:	03060501 	movweq	r0, #25857	; 0x6501
    351c:	04052009 	streq	r2, [r5], #-9
						outc (__pi_hex_enc_table
    3520:	0602052d 	streq	r0, [r2], -sp, lsr #10
    3524:	0605052f 	streq	r0, [r5], -pc, lsr #10
    3528:	06030501 	streq	r0, [r3], -r1, lsl #10
						if (i == 0)
    352c:	6606012f 	strvs	r0, [r6], -pc, lsr #2
    3530:	21064a06 	tstcs	r6, r6, lsl #20
					for (i = 28; ; i -= 4) {
    3534:	01133b06 	tsteq	r3, r6, lsl #22
					outc ('%');
    3538:	064a6606 	strbeq	r6, [sl], -r6, lsl #12
    353c:	05132e2e 	ldreq	r2, [r3, #-3630]	; 0xfffff1d2
    3540:	09030601 	stmdbeq	r3, {r0, r9, sl}
					outc ('l');
    3544:	0303053c 	movweq	r0, #13628	; 0x353c
    3548:	36062e77 			; <UNDEFINED> instruction: 0x36062e77
				val = (word) va_arg (ap, aword);
    354c:	21060105 	tstcs	r6, r5, lsl #2
				outc (val);
    3550:	022d0305 	eoreq	r0, sp, #335544320	; 0x14000000
    3554:	0101000b 	tsteq	r1, fp
				while (*st != '\0') {
    3558:	05004a05 	streq	r4, [r0, #-2565]	; 0xfffff5fb
    355c:	00203802 	eoreq	r3, r0, r2, lsl #16
    3560:	03f50300 	mvnseq	r0, #0, 6
    3564:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
					outc (*st);
    3568:	13141313 	tstne	r4, #1275068416	; 0x4c000000
    356c:	03064a05 	movweq	r4, #27141	; 0x6a05
					st++;
    3570:	053c0179 	ldreq	r0, [ip, #-377]!	; 0xfffffe87
		c = *fm++;
    3574:	3c0b0305 	stccc	3, cr0, [fp], {5}
    3578:	75034a05 	strvc	r4, [r3, #-2565]	; 0xfffff5fb
    357c:	27020520 	strcs	r0, [r2, -r0, lsr #10]
char *vform (char *res, const char *fm, va_list aq) {
    3580:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    3584:	30050106 	andcc	r0, r5, r6, lsl #2
	if (res != NULL) {
    3588:	20250520 	eorcs	r0, r5, r0, lsr #10
		__pi_vfparse (res, MAX_WORD, fm, aq);
    358c:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
    3590:	25053c30 	strcs	r3, [r5, #-3120]	; 0xfffff3d0
    3594:	06040520 	streq	r0, [r4], -r0, lsr #10
}
    3598:	0603054b 	streq	r0, [r3], -fp, asr #10
    359c:	052e1503 	streq	r1, [lr, #-1283]!	; 0xfffffafd
	fml = strlen (fm) + 17;
    35a0:	6e030602 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx2
    35a4:	1713132e 	ldrne	r1, [r3, -lr, lsr #6]
    35a8:	01061205 	tsteq	r6, r5, lsl #4
	if ((res = (char*) umalloc (fml)) == NULL)
    35ac:	76060205 	strvc	r0, [r6], -r5, lsl #4
    35b0:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    35b4:	0520060a 	streq	r0, [r0, #-1546]!	; 0xfffff9f6
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    35b8:	052f0603 	streq	r0, [pc, #-1539]!	; 2fbd <phys_cc1350+0x2d>
    35bc:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    35c0:	22052e06 	andcs	r2, r5, #6, 28	; 0x60
    35c4:	24051f06 	strcs	r1, [r5], #-3846	; 0xfffff0fa
		ufree (res);
    35c8:	0f050106 	svceq	0x00050106
		goto Again;
    35cc:	02052006 	andeq	r2, r5, #6
	if (buf == NULL || fmt == NULL)
    35d0:	0a050106 	beq	1439f0 <__ccfg+0x123a48>
int vscan (const char *buf, const char *fmt, va_list ap) {
    35d4:	03010533 	movweq	r0, #5427	; 0x1533
	if (buf == NULL || fmt == NULL)
    35d8:	02052e13 	andeq	r2, r5, #304	; 0x130
    35dc:	66730306 	ldrbtvs	r0, [r3], -r6, lsl #6
    35e0:	15061a05 	strne	r1, [r6, #-2565]	; 0xfffff5fb
		    	    case 'u': scanu (lword); break;
    35e4:	05391305 	ldreq	r1, [r9, #-773]!	; 0xfffffcfb
			while (isspace (*buf)) buf++;
    35e8:	052f0602 	streq	r0, [pc, #-1538]!	; 2fee <phys_cc1350+0x5e>
    35ec:	0514061a 	ldreq	r0, [r4, #-1562]	; 0xfffff9e6
	while (*fmt != '\0') {
    35f0:	2f061e02 	svccs	0x00061e02
		if (*fmt++ != '%')
    35f4:	4a011413 	bmi	48648 <__ccfg+0x286a0>
		switch (*fmt++) {
    35f8:	0605143c 			; <UNDEFINED> instruction: 0x0605143c
    35fc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3600:	0602054a 	streq	r0, [r2], -sl, asr #10
    3604:	06130532 			; <UNDEFINED> instruction: 0x06130532
    3608:	06020501 	streq	r0, [r2], -r1, lsl #10
    360c:	0609052f 	streq	r0, [r9], -pc, lsr #10
    3610:	06020501 	streq	r0, [r2], -r1, lsl #10
}
    3614:	15206d03 	strne	r6, [r0, #-3331]!	; 0xfffff2fd
		switch (*fmt++) {
    3618:	01061305 	tsteq	r6, r5, lsl #6
    361c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3620:	01060505 	tsteq	r6, r5, lsl #10
    3624:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
			while (isspace (*buf)) buf++;
    3628:	01001002 	tsteq	r0, r2
    362c:	003a0501 	eorseq	r0, sl, r1, lsl #10
    3630:	00000205 	andeq	r0, r0, r5, lsl #4
    3634:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    3638:	02050104 	andeq	r0, r5, #4, 2
    363c:	01141314 	tsteq	r4, r4, lsl r3
			if (*buf == '\0')
    3640:	1b063a05 	blne	191e5c <__ccfg+0x171eb4>
			if (*buf != ',') {
    3644:	25020520 	strcs	r0, [r2, #-1312]	; 0xfffffae0
			sap = va_arg (ap, char*);
    3648:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
			nc++;
    364c:	79030627 	stmdbvc	r3, {r0, r1, r2, r5, r9, sl}
			if (*buf != ',') {
    3650:	1514143c 	ldrne	r1, [r4, #-1084]	; 0xfffffbc4
				while (!isspace (*buf) && *buf != ',' &&
    3654:	4a580601 	bmi	1604e60 <__ccfg+0x15e4eb8>
    3658:	142e2e06 	strtne	r2, [lr], #-3590	; 0xfffff1fa
    365c:	01060605 	tsteq	r6, r5, lsl #12
    3660:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3664:	0305300a 	movweq	r3, #20490	; 0x500a
    3668:	05134106 	ldreq	r4, [r3, #-262]	; 0xfffffefa
    366c:	0a052b08 	beq	14e294 <__ccfg+0x12e2ec>
			while (isspace (*buf)) buf++;
    3670:	08050106 	stmdaeq	r5, {r1, r2, r8}
    3674:	06020520 	streq	r0, [r2], -r0, lsr #10
    3678:	13053d33 	movwne	r3, #23859	; 0x5d33
    367c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3680:	01053d06 	tsteq	r5, r6, lsl #26
			if (*buf == ',') buf++;
    3684:	0b021306 	bleq	882a4 <__ccfg+0x682fc>
    3688:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			*sap = '\0';
    368c:	02050043 	andeq	r0, r5, #67	; 0x43
			break;
    3690:	000020f8 	strdeq	r2, [r0], -r8
		    case 'd': scani (word); break;
    3694:	0104c903 	tsteq	r4, r3, lsl #18
    3698:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    369c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    36a0:	26052f0f 	strcs	r2, [r5], -pc, lsl #30
    36a4:	211d053b 	tstcs	sp, fp, lsr r5
    36a8:	31060205 	tstcc	r6, r5, lsl #4
    36ac:	01061005 	tsteq	r6, r5
    36b0:	2f060205 	svccs	0x00060205
    36b4:	01060905 	tsteq	r6, r5, lsl #18
    36b8:	052b0a05 	streq	r0, [fp, #-2565]!	; 0xfffff5fb
    36bc:	04023201 	streq	r3, [r2], #-513	; 0xfffffdff
    36c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    36c4:	0205003c 	andeq	r0, r5, #60	; 0x3c
    36c8:	0000211c 	andeq	r2, r0, ip, lsl r1
    36cc:	0104d503 	tsteq	r4, r3, lsl #10
    36d0:	13190205 	tstne	r9, #1342177280	; 0x50000000
    36d4:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    36d8:	7503063c 	strvc	r0, [r3, #-1596]	; 0xfffff9c4
    36dc:	02052020 	andeq	r2, r5, #32
    36e0:	20200b03 	eorcs	r0, r0, r3, lsl #22
    36e4:	03064a06 	movweq	r4, #27142	; 0x6a06
    36e8:	03062013 	movweq	r2, #24595	; 0x6013
    36ec:	13143c6d 	tstne	r4, #27904	; 0x6d00
    36f0:	01060405 	tsteq	r6, r5, lsl #8
    36f4:	21060205 	tstcs	r6, r5, lsl #4
    36f8:	01060505 	tsteq	r6, r5, lsl #10
    36fc:	30060305 	andcc	r0, r6, r5, lsl #6
    3700:	01060605 	tsteq	r6, r5, lsl #12
		    case 'u': scanu (word); break;
    3704:	4b060405 	blmi	184720 <__ccfg+0x164778>
    3708:	3302053d 	movwcc	r0, #9533	; 0x253d
    370c:	1501013d 	strne	r0, [r1, #-317]	; 0xfffffec3
    3710:	04051406 	streq	r1, [r5], #-1030	; 0xfffffbfa
    3714:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3718:	4a060130 	bmi	183be0 <__ccfg+0x163c38>
    371c:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    3720:	22053e13 	andcs	r3, r5, #304	; 0x130
    3724:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    3728:	06020557 			; <UNDEFINED> instruction: 0x06020557
    372c:	06010523 	streq	r0, [r1], -r3, lsr #10
    3730:	030a0513 	movweq	r0, #42259	; 0xa513
    3734:	0b022e70 	bleq	8f0fc <__ccfg+0x6f154>
    3738:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    373c:	02050038 	andeq	r0, r5, #56	; 0x38
    3740:	00000000 	andeq	r0, r0, r0
    3744:	0104fc03 	tsteq	r4, r3, lsl #24	; <UNPREDICTABLE>
    3748:	13160205 	tstne	r6, #1342177280	; 0x50000000
		    case 'x': scanx (word); break;
    374c:	01141313 	tsteq	r4, r3, lsl r3
    3750:	03063805 	movweq	r3, #26629	; 0x6805
    3754:	02052077 	andeq	r2, r5, #119	; 0x77
    3758:	20200903 	eorcs	r0, r0, r3, lsl #18
    375c:	03054a06 	movweq	r4, #23046	; 0x5a06
    3760:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    3764:	03060205 	movweq	r0, #25093	; 0x6205
    3768:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    376c:	01061a05 	tsteq	r6, r5, lsl #20
    3770:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3774:	052f0603 	streq	r0, [pc, #-1539]!	; 3179 <tcv_ope_null+0x1d>
    3778:	05131902 	ldreq	r1, [r3, #-2306]	; 0xfffff6fe
    377c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3780:	03052005 	movweq	r2, #20485	; 0x5005
    3784:	200a0306 	andcs	r0, sl, r6, lsl #6
    3788:	03060505 	movweq	r0, #25861	; 0x6505
    378c:	0a050175 	beq	143d68 <__ccfg+0x123dc0>
    3790:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    3794:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
    3798:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    379c:	052f0604 	streq	r0, [pc, #-1540]!	; 31a0 <tcv_ope_null+0x44>
    37a0:	0511062c 	ldreq	r0, [r1, #-1580]	; 0xfffff9d4
    37a4:	2a052106 	bcs	14bbc4 <__ccfg+0x12bc1c>
    37a8:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
    37ac:	05206f03 	streq	r6, [r0, #-3843]!	; 0xfffff0fd
    37b0:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    37b4:	0305200c 	movweq	r2, #20492	; 0x500c
    37b8:	20052f06 	andcs	r2, r5, r6, lsl #30
    37bc:	06050106 	streq	r0, [r5], -r6, lsl #2
    37c0:	20200520 	eorcs	r0, r0, r0, lsr #10
			switch (*fmt++) {
    37c4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    37c8:	13330602 	teqne	r3, #2097152	; 0x200000
    37cc:	01060505 	tsteq	r6, r5, lsl #10
    37d0:	2a060305 	bcs	1843ec <__ccfg+0x164444>
    37d4:	06050542 	streq	r0, [r5], -r2, asr #10
    37d8:	230a050f 	movwcs	r0, #42255	; 0xa50f
		    	    case 'd': scani (lword); break;
    37dc:	20061a05 	andcs	r1, r6, r5, lsl #20
    37e0:	01060305 	tsteq	r6, r5, lsl #6
    37e4:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    37e8:	0604052e 	streq	r0, [r4], -lr, lsr #10
    37ec:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    37f0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    37f4:	05052007 	streq	r2, [r5, #-7]
    37f8:	2c052f06 	stccs	15, cr2, [r5], {6}
    37fc:	07051006 	streq	r1, [r5, -r6]
    3800:	062a0522 	strteq	r0, [sl], -r2, lsr #10
    3804:	000a021e 	andeq	r0, sl, lr, lsl r2
    3808:	38050101 	stmdacc	r5, {r0, r8}
    380c:	00020500 	andeq	r0, r2, r0, lsl #10
    3810:	03000000 	movweq	r0, #0
    3814:	050105a3 	streq	r0, [r1, #-1443]	; 0xfffffa5d
    3818:	13131602 	tstne	r3, #2097152	; 0x200000
    381c:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3820:	77030638 	smladxvc	r3, r8, r6, r0
    3824:	03020520 	movweq	r0, #9504	; 0x2520
    3828:	06202009 	strteq	r2, [r0], -r9
    382c:	0603054a 	streq	r0, [r3], -sl, asr #10
    3830:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    3834:	77030602 	strvc	r0, [r3, -r2, lsl #12]
		    	    case 'x': scanx (lword); break;
    3838:	0514142e 	ldreq	r1, [r4, #-1070]	; 0xfffffbd2
    383c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3840:	03052005 	movweq	r2, #20485	; 0x5005
    3844:	02052f06 	andeq	r2, r5, #6, 30
    3848:	06050519 			; <UNDEFINED> instruction: 0x06050519
    384c:	201b0501 	andscs	r0, fp, r1, lsl #10
    3850:	6b033805 	blvs	d186c <__ccfg+0xb18c4>
    3854:	06030520 	streq	r0, [r3], -r0, lsr #10
    3858:	207cb303 	rsbscs	fp, ip, r3, lsl #6
    385c:	01060505 	tsteq	r6, r5, lsl #10
    3860:	21060305 	tstcs	r6, r5, lsl #6
    3864:	01060605 	tsteq	r6, r5, lsl #12
    3868:	31060305 	tstcc	r6, r5, lsl #6
    386c:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    3870:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3874:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    3878:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    387c:	dc030609 	stcle	6, cr0, [r3], {9}
    3880:	21052003 	tstcs	r5, r3
    3884:	0c050106 	stfeqs	f0, [r5], {6}
    3888:	06030520 	streq	r0, [r3], -r0, lsr #10
    388c:	0620052f 	strteq	r0, [r0], -pc, lsr #10
    3890:	20060501 	andcs	r0, r6, r1, lsl #10
    3894:	05202005 	streq	r2, [r0, #-5]!
    3898:	02052006 	andeq	r2, r5, #6
    389c:	1b053306 	blne	1504bc <__ccfg+0x130514>
    38a0:	03050106 	movweq	r0, #20742	; 0x5106
    38a4:	01052b06 	tsteq	r5, r6, lsl #22
		    	    case 'd': scani (lword); break;
    38a8:	3c0a0306 	stccc	3, cr0, [sl], {6}
    38ac:	21060205 	tstcs	r6, r5, lsl #4
    38b0:	01060905 	tsteq	r6, r5, lsl #18
    38b4:	20061905 	andcs	r1, r6, r5, lsl #18
    38b8:	01060205 	tsteq	r6, r5, lsl #4
    38bc:	0a030105 	beq	c3cd8 <__ccfg+0xa3d30>
    38c0:	0603052e 	streq	r0, [r3], -lr, lsr #10
		    	    case 'u': scanu (lword); break;
    38c4:	052e7703 	streq	r7, [lr, #-1795]!	; 0xfffff8fd
    38c8:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    38cc:	04052006 	streq	r2, [r5], #-6
    38d0:	052f3006 	streq	r3, [pc, #-6]!	; 38d2 <vscan+0x302>
    38d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    38d8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    38dc:	2b051b29 	blcs	14a588 <__ccfg+0x12a5e0>
    38e0:	0a020106 	beq	83d00 <__ccfg+0x63d58>
    38e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    38e8:	02050016 	andeq	r0, r5, #22
    38ec:	0000219c 	muleq	r0, ip, r1
    38f0:	0105cd03 	tsteq	r5, r3, lsl #26
    38f4:	13130205 	tstne	r3, #1342177280	; 0x50000000
    38f8:	01141313 	tsteq	r4, r3, lsl r3
    38fc:	03061605 	movweq	r1, #26117	; 0x6605
    3900:	0520207a 	streq	r2, [r0, #-122]!	; 0xffffff86
    3904:	06204202 	strteq	r4, [r0], -r2, lsl #4
    3908:	0624064a 	strteq	r0, [r4], -sl, asr #12
		    	    case 'x': scanx (lword); break;
    390c:	01141438 	tsteq	r4, r8, lsr r4
    3910:	064a5806 	strbeq	r5, [sl], -r6, lsl #16
			if ((c = *buf++) == '\0')
    3914:	05162e2e 	ldreq	r2, [r6, #-3630]	; 0xfffff1d2
    3918:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
			sap = va_arg (ap, char*);
    391c:	052f0602 	streq	r0, [pc, #-1538]!	; 3322 <__inserial+0x10e>
			nc++;
    3920:	0514060d 	ldreq	r0, [r4, #-1549]	; 0xfffff9f3
			break;
    3924:	02051e0e 	andeq	r1, r5, #14, 28	; 0xe0
			while (isspace (*buf)) buf++;
    3928:	0d053006 	stceq	0, cr3, [r5, #-24]	; 0xffffffe8
    392c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3930:	0603052e 	streq	r0, [r3], -lr, lsr #10
						*sap++ = *buf++;
    3934:	06060522 	streq	r0, [r6], -r2, lsr #10
    3938:	4e0a0501 	cfsh32mi	mvfx0, mvfx10, #1
			while (isspace (*buf)) buf++;
    393c:	21030105 	tstcs	r3, r5, lsl #2
    3940:	06040520 	streq	r0, [r4], -r0, lsr #10
    3944:	3d2e5c03 	stccc	12, cr5, [lr, #-12]!
		return 0;
    3948:	05011703 	streq	r1, [r1, #-1795]	; 0xfffff8fd
    394c:	2e6e0302 	cdpcs	3, 6, cr0, cr14, cr2, {0}
		    case 'x': scanx (word); break;
    3950:	032e3c01 			; <UNDEFINED> instruction: 0x032e3c01
    3954:	0b05010b 	bleq	143d88 <__ccfg+0x123de0>
		    	    case 'x': scanx (lword); break;
    3958:	17050106 	strne	r0, [r5, -r6, lsl #2]
    395c:	200b054a 	andcs	r0, fp, sl, asr #10
    3960:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    3964:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    3968:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    396c:	054e0604 	strbeq	r0, [lr, #-1540]	; 0xfffff9fc
    3970:	10055002 	andne	r5, r5, r2
    3974:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3978:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    397c:	03050106 	movweq	r0, #20742	; 0x5106
    3980:	1a052106 	bne	14bda0 <__ccfg+0x12bdf8>
    3984:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3988:	1b054b06 	blne	1565a8 <__ccfg+0x136600>
    398c:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    3990:	02051f2f 	andeq	r1, r5, #47, 30	; 0xbc
    3994:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    3998:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    399c:	0101000c 	tsteq	r1, ip
    39a0:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    39a4:	00000002 	andeq	r0, r0, r2
    39a8:	06870300 	streq	r0, [r7], r0, lsl #6
    39ac:	16020501 	strne	r0, [r2], -r1, lsl #10
    39b0:	0e064405 	cdpeq	4, 0, cr4, cr6, cr5, {0}
    39b4:	06020520 	streq	r0, [r2], -r0, lsr #10
    39b8:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    39bc:	03440501 	movteq	r0, #17665	; 0x4501
    39c0:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    39c4:	4a090306 	bmi	2445e4 <__ccfg+0x22463c>
    39c8:	01060505 	tsteq	r6, r5, lsl #10
    39cc:	2f060305 	svccs	0x00060305
    39d0:	06160567 	ldreq	r0, [r6], -r7, ror #10
    39d4:	06030501 	streq	r0, [r3], -r1, lsl #10
    39d8:	06160567 	ldreq	r0, [r6], -r7, ror #10
    39dc:	06020501 	streq	r0, [r2], -r1, lsl #10
    39e0:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    39e4:	00020213 	andeq	r0, r2, r3, lsl r2
    39e8:	4b050101 	blmi	143df4 <__ccfg+0x123e4c>
    39ec:	00020500 	andeq	r0, r2, r0, lsl #10
    39f0:	03000000 	movweq	r0, #0
    39f4:	05010699 	streq	r0, [r1, #-1689]	; 0xfffff967
    39f8:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    39fc:	7a03064b 	bvc	c5330 <__ccfg+0xa5388>
    3a00:	261a0501 	ldrcs	r0, [sl], -r1, lsl #10
    3a04:	7a034b05 	bvc	d6620 <__ccfg+0xb6678>
    3a08:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3a0c:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    3a10:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3a14:	672f0603 	strvs	r0, [pc, -r3, lsl #12]!
    3a18:	01061605 	tsteq	r6, r5, lsl #12
    3a1c:	67060305 	strvs	r0, [r6, -r5, lsl #6]
    3a20:	01061605 	tsteq	r6, r5, lsl #12
    3a24:	5a060205 	bpl	184240 <__ccfg+0x164298>
    3a28:	13060105 	movwne	r0, #24837	; 0x6105
    3a2c:	01000202 	tsteq	r0, r2, lsl #4
    3a30:	00310501 	eorseq	r0, r1, r1, lsl #10
    3a34:	00000205 	andeq	r0, r0, r5, lsl #4
    3a38:	aa030000 	bge	c3a40 <__ccfg+0xa3a98>
    3a3c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3a40:	06050516 			; <UNDEFINED> instruction: 0x06050516
    3a44:	06030501 	streq	r0, [r3], -r1, lsl #10
    3a48:	06010521 	streq	r0, [r1], -r1, lsr #10
    3a4c:	0001023d 	andeq	r0, r1, sp, lsr r2
    3a50:	48050101 	stmdami	r5, {r0, r8}
    3a54:	58020500 	stmdapl	r2, {r8, sl}
    3a58:	03000022 	movweq	r0, #34	; 0x22
    3a5c:	050106d1 	streq	r0, [r1, #-1745]	; 0xfffff92f
    3a60:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    3a64:	02051c48 	andeq	r1, r5, #72, 24	; 0x4800
    3a68:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    3a6c:	200e0648 	andcs	r0, lr, r8, asr #12
    3a70:	20240205 	eorcs	r0, r4, r5, lsl #4
    3a74:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3a78:	13060105 	movwne	r0, #24837	; 0x6105
    3a7c:	022d1305 	eoreq	r1, sp, #335544320	; 0x14000000
    3a80:	01010006 	tsteq	r1, r6
    3a84:	05004605 	streq	r4, [r0, #-1541]	; 0xfffff9fb
    3a88:	00228402 	eoreq	r8, r2, r2, lsl #8
    3a8c:	06b20300 	ldrteq	r0, [r2], r0, lsl #6
    3a90:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3a94:	0d064605 	stceq	6, cr4, [r6, #-20]	; 0xffffffec
    3a98:	05250505 	streq	r0, [r5, #-1285]!	; 0xfffffafb
    3a9c:	052f0603 	streq	r0, [pc, #-1539]!	; 34a1 <__pi_vfparse+0x151>
    3aa0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3aa4:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3aa8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3aac:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    3ab0:	01060705 	tsteq	r6, r5, lsl #14
    3ab4:	30060405 	andcc	r0, r6, r5, lsl #8
    3ab8:	01060b05 	tsteq	r6, r5, lsl #22
    3abc:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    3ac0:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    3ac4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3ac8:	20090301 	andcs	r0, r9, r1, lsl #6
    3acc:	03060305 	movweq	r0, #25349	; 0x6305
    3ad0:	0605207a 			; <UNDEFINED> instruction: 0x0605207a
    3ad4:	03050106 	movweq	r0, #20742	; 0x5106
    3ad8:	13053006 	movwne	r3, #20486	; 0x5006
    3adc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3ae0:	06014c06 	streq	r4, [r1], -r6, lsl #24
    3ae4:	4a4a062e 	bmi	12853a4 <__ccfg+0x12653fc>
    3ae8:	06370513 			; <UNDEFINED> instruction: 0x06370513
    3aec:	21010501 	tstcs	r1, r1, lsl #10
    3af0:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    3af4:	3c71030b 	ldclcc	3, cr0, [r1], #-44	; 0xffffffd4
    3af8:	01000b02 	tsteq	r0, r2, lsl #22
    3afc:	003d0501 	eorseq	r0, sp, r1, lsl #10
    3b00:	00000205 	andeq	r0, r0, r5, lsl #4
    3b04:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    3b08:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3b0c:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    3b10:	02051c06 	andeq	r1, r5, #1536	; 0x600
    3b14:	4a062024 	bmi	18bbac <__ccfg+0x16bc04>
    3b18:	2505134a 	strcs	r1, [r5, #-842]	; 0xfffffcb6
    3b1c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3b20:	43056706 	movwmi	r6, #22278	; 0x5706
    3b24:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
    3b28:	2e43052e 	cdpcs	5, 4, cr0, cr3, cr14, {1}
    3b2c:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    3b30:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
    3b34:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3b38:	0205003d 	andeq	r0, r5, #61	; 0x3d
    3b3c:	00000000 	andeq	r0, r0, r0
    3b40:	0106e203 	tsteq	r6, r3, lsl #4
    3b44:	01160205 	tsteq	r6, r5, lsl #4
    3b48:	1c063d05 	stcne	13, cr3, [r6], {5}
    3b4c:	20240205 	eorcs	r0, r4, r5, lsl #4
    3b50:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3b54:	01062205 	tsteq	r6, r5, lsl #4
    3b58:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
    3b5c:	01010005 	tsteq	r1, r5
    3b60:	05004005 	streq	r4, [r0, #-5]
    3b64:	00000002 	andeq	r0, r0, r2
    3b68:	06ea0300 	strbteq	r0, [sl], r0, lsl #6
    3b6c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3b70:	06400514 			; <UNDEFINED> instruction: 0x06400514
    3b74:	20017a03 	andcs	r7, r1, r3, lsl #20
    3b78:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    3b7c:	2e7a0340 	cdpcs	3, 7, cr0, cr10, cr0, {2}
    3b80:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    3b84:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    3b88:	05843306 	streq	r3, [r4, #774]	; 0x306
    3b8c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3b90:	11053102 	tstne	r5, r2, lsl #2
    3b94:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    3b98:	1a051321 	bne	148824 <__ccfg+0x12887c>
    3b9c:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    3ba0:	053d3e06 	ldreq	r3, [sp, #-3590]!	; 0xfffff1fa
    3ba4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3ba8:	02022101 	andeq	r2, r2, #1073741824	; 0x40000000
    3bac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3bb0:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3bb4:	00000000 	andeq	r0, r0, r0
    3bb8:	0106fe03 	tsteq	r6, r3, lsl #28	; <UNPREDICTABLE>
    3bbc:	02160205 	andseq	r0, r6, #1342177280	; 0x50000000
    3bc0:	01010003 	tsteq	r1, r3
    3bc4:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
    3bc8:	0022e402 	eoreq	lr, r2, r2, lsl #8
    3bcc:	07850300 	streq	r0, [r5, r0, lsl #6]
    3bd0:	16020501 	strne	r0, [r2], -r1, lsl #10
    3bd4:	06450514 			; <UNDEFINED> instruction: 0x06450514
    3bd8:	2e017a03 	vmlacs.f32	s14, s2, s6
    3bdc:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    3be0:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    3be4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3be8:	052f0604 	streq	r0, [pc, #-1540]!	; 35ec <vscan+0x1c>
    3bec:	062f0603 	strteq	r0, [pc], -r3, lsl #12
    3bf0:	2e06012e 	adfcssp	f0, f6, #0.5
    3bf4:	033c4a06 	teqeq	ip, #24576	; 0x6000
    3bf8:	0c05011d 	stfeqs	f0, [r5], {29}
    3bfc:	06050106 	streq	r0, [r5], -r6, lsl #2
    3c00:	350a052e 	strcc	r0, [sl, #-1326]	; 0xfffffad2
    3c04:	05270105 	streq	r0, [r7, #-261]!	; 0xfffffefb
    3c08:	73030604 	movwvc	r0, #13828	; 0x3604
    3c0c:	06200520 	strteq	r0, [r0], -r0, lsr #10
    3c10:	31040501 	tstcc	r4, r1, lsl #10
    3c14:	051d1205 	ldreq	r1, [sp, #-517]	; 0xfffffdfb
    3c18:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3c1c:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    3c20:	2f3d0604 	svccs	0x003d0604
    3c24:	01060b05 	tsteq	r6, r5, lsl #22
    3c28:	41060205 	tstmi	r6, r5, lsl #4
    3c2c:	01060b05 	tsteq	r6, r5, lsl #22
    3c30:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3c34:	052f0603 	streq	r0, [pc, #-1539]!	; 3639 <vscan+0x69>
    3c38:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
    3c3c:	01010009 	tsteq	r1, r9
    3c40:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    3c44:	00234c02 	eoreq	r4, r3, r2, lsl #24
    3c48:	09860300 	stmibeq	r6, {r8, r9}
    3c4c:	18020501 	stmdane	r2, {r0, r8, sl}
    3c50:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3c54:	03480501 	movteq	r0, #34049	; 0x8501
    3c58:	05202078 	streq	r2, [r0, #-120]!	; 0xffffff88
    3c5c:	31052805 	tstcc	r5, r5, lsl #16
    3c60:	20250520 	eorcs	r0, r5, r0, lsr #10
    3c64:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    3c68:	02053506 	andeq	r3, r5, #25165824	; 0x1800000
    3c6c:	11052906 	tstne	r5, r6, lsl #18
    3c70:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3c74:	11052f06 	tstne	r5, r6, lsl #30
    3c78:	21050106 	tstcs	r5, r6, lsl #2
    3c7c:	1e110522 	cfmul64ne	mvdx0, mvdx1, mvdx2
    3c80:	30060205 	andcc	r0, r6, r5, lsl #4
    3c84:	01062105 	tsteq	r6, r5, lsl #2
    3c88:	052e1005 	streq	r1, [lr, #-5]!
    3c8c:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3c90:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3c94:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3c98:	05343d02 	ldreq	r3, [r4, #-3330]!	; 0xfffff2fe
    3c9c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3ca0:	0101000b 	tsteq	r1, fp
    3ca4:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    3ca8:	00239c02 	eoreq	r9, r3, r2, lsl #24
    3cac:	09a00300 	stmibeq	r0!, {r8, r9}
    3cb0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3cb4:	01141313 	tsteq	r4, r3, lsl r3
    3cb8:	03064405 	movweq	r4, #25605	; 0x6405
    3cbc:	02050177 	andeq	r0, r5, #-1073741795	; 0xc000001d
    3cc0:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    3cc4:	20770344 	rsbscs	r0, r7, r4, asr #6
    3cc8:	09030205 	stmdbeq	r3, {r0, r2, r9}
    3ccc:	4a06204a 	bmi	18bdfc <__ccfg+0x16be54>
    3cd0:	03060305 	movweq	r0, #25349	; 0x6305
    3cd4:	0e05200d 	cdpeq	0, 0, cr2, cr5, cr13, {0}
    3cd8:	0603054b 	streq	r0, [r3], -fp, asr #10
    3cdc:	060f0547 	streq	r0, [pc], -r7, asr #10
    3ce0:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    3ce4:	03062805 	movweq	r2, #26629	; 0x6805
    3ce8:	1e052078 	mcrne	0, 0, r2, cr5, cr8, {3}
    3cec:	06020501 	streq	r0, [r2], -r1, lsl #10
    3cf0:	030a0501 	movweq	r0, #42241	; 0xa501
    3cf4:	01052e16 	tsteq	r5, r6, lsl lr
    3cf8:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3cfc:	67030603 	strvs	r0, [r3, -r3, lsl #12]
    3d00:	2e58013c 	mrccs	1, 2, r0, cr8, cr12, {1}
    3d04:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3d08:	74060501 	strvc	r0, [r6], #-1281	; 0xfffffaff
    3d0c:	42060205 	andmi	r0, r6, #1342177280	; 0x50000000
    3d10:	01060505 	tsteq	r6, r5, lsl #10
    3d14:	36060205 	strcc	r0, [r6], -r5, lsl #4
    3d18:	01060c05 	tsteq	r6, r5, lsl #24
    3d1c:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    3d20:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    3d24:	06020520 	streq	r0, [r2], -r0, lsr #10
    3d28:	060b0523 	streq	r0, [fp], -r3, lsr #10
    3d2c:	4a050501 	bmi	145138 <__ccfg+0x125190>
    3d30:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    3d34:	06090568 	streq	r0, [r9], -r8, ror #10
    3d38:	000a0201 	andeq	r0, sl, r1, lsl #4
    3d3c:	3e050101 	adfccs	f0, f5, f1
    3d40:	38020500 	stmdacc	r2, {r8, sl}
    3d44:	03000024 	movweq	r0, #36	; 0x24
    3d48:	050109d1 	streq	r0, [r1, #-2513]	; 0xfffff62f
    3d4c:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    3d50:	063e0501 	ldrteq	r0, [lr], -r1, lsl #10
    3d54:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    3d58:	06202802 	strteq	r2, [r0], -r2, lsl #16
    3d5c:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    3d60:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3d64:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3d68:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    3d6c:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3d70:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3d74:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3d78:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    3d7c:	2f2f0602 	svccs	0x002f0602
    3d80:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    3d84:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3d88:	0a052101 	beq	14c194 <__ccfg+0x12c1ec>
    3d8c:	02207903 	eoreq	r7, r0, #49152	; 0xc000
    3d90:	01010009 	tsteq	r1, r9
    3d94:	05003405 	streq	r3, [r0, #-1029]	; 0xfffffbfb
    3d98:	00247802 	eoreq	r7, r4, r2, lsl #16
    3d9c:	09e80300 	stmibeq	r8!, {r8, r9}^
    3da0:	16020501 	strne	r0, [r2], -r1, lsl #10
    3da4:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3da8:	79030634 	stmdbvc	r3, {r2, r4, r5, r9, sl}
    3dac:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    3db0:	4a4a0620 	bmi	1285638 <__ccfg+0x1265690>
    3db4:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3db8:	06020501 	streq	r0, [r2], -r1, lsl #10
    3dbc:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3dc0:	06020501 	streq	r0, [r2], -r1, lsl #10
    3dc4:	06050521 	streq	r0, [r5], -r1, lsr #10
    3dc8:	06020501 	streq	r0, [r2], -r1, lsl #10
    3dcc:	060a0523 	streq	r0, [sl], -r3, lsr #10
    3dd0:	30090510 	andcc	r0, r9, r0, lsl r5
    3dd4:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3dd8:	01010007 	tsteq	r1, r7
    3ddc:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    3de0:	0024ac02 	eoreq	sl, r4, r2, lsl #24
    3de4:	09f90300 	ldmibeq	r9!, {r8, r9}^
    3de8:	16020501 	strne	r0, [r2], -r1, lsl #10
    3dec:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    3df0:	05260205 	streq	r0, [r6, #-517]!	; 0xfffffdfb
    3df4:	02052c0c 	andeq	r2, r5, #12, 24	; 0xc00
    3df8:	06013006 	streq	r3, [r1], -r6
    3dfc:	2e064a4a 	vmlscs.f32	s8, s12, s20
    3e00:	0105134a 	tsteq	r5, sl, asr #6
    3e04:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    3e08:	0006022c 	andeq	r0, r6, ip, lsr #4
    3e0c:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
    3e10:	00020500 	andeq	r0, r2, r0, lsl #10
    3e14:	03000000 	movweq	r0, #0
    3e18:	05010a84 	streq	r0, [r1, #-2692]	; 0xfffff57c
    3e1c:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3e20:	051c0632 	ldreq	r0, [ip, #-1586]	; 0xfffff9ce
    3e24:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3e28:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3e2c:	cc03060a 	stcgt	6, cr0, [r3], {10}
    3e30:	09050177 	stmdbeq	r5, {r0, r1, r2, r4, r5, r6, r8}
    3e34:	2008b403 	andcs	fp, r8, r3, lsl #8
    3e38:	03060205 	movweq	r0, #25093	; 0x6205
    3e3c:	133c77c9 	teqne	ip, #52690944	; 0x3240000
    3e40:	13030514 	movwne	r0, #13588	; 0x3514
    3e44:	01060505 	tsteq	r6, r5, lsl #10
    3e48:	21060305 	tstcs	r6, r5, lsl #6
    3e4c:	01060605 	tsteq	r6, r5, lsl #12
    3e50:	31060305 	tstcc	r6, r5, lsl #6
    3e54:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    3e58:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3e5c:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    3e60:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    3e64:	08b40301 	ldmeq	r4!, {r0, r8, r9}
    3e68:	00080220 	andeq	r0, r8, r0, lsr #4
    3e6c:	28050101 	stmdacs	r5, {r0, r8}
    3e70:	e8020500 	stmda	r2, {r8, sl}
    3e74:	03000024 	movweq	r0, #36	; 0x24
    3e78:	05010a8c 	streq	r0, [r1, #-2700]	; 0xfffff574
    3e7c:	011a0301 	tsteq	sl, r1, lsl #6
    3e80:	01000102 	tsteq	r0, r2, lsl #2
    3e84:	00012401 	andeq	r2, r1, r1, lsl #8
    3e88:	8a000300 	bhi	4a90 <__aeabi_lmul+0x64>
    3e8c:	02000000 	andeq	r0, r0, #0
    3e90:	0d0efb01 	vstreq	d15, [lr, #-4]
    3e94:	01010100 	mrseq	r0, (UNDEF: 17)
    3e98:	00000001 	andeq	r0, r0, r1
    3e9c:	01000001 	tsteq	r0, r1
    3ea0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3dec <NOROM_RFCRTrim+0xf4>
    3ea4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    3ea8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    3eac:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3eb0:	6f746b73 	svcvs	0x00746b73
    3eb4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3eb8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3ebc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3ec0:	2f534f43 	svccs	0x00534f43
    3ec4:	4f636950 	svcmi	0x00636950
    3ec8:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3ecc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3ed0:	73752f00 	cmnvc	r5, #0, 30
    3ed4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3ed8:	63672f62 	cmnvs	r7, #392	; 0x188
    3edc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3ee0:	6f6e2d6d 	svcvs	0x006e2d6d
    3ee4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3ee8:	2f696261 	svccs	0x00696261
    3eec:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3ef0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3ef4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3ef8:	73000065 	movwvc	r0, #101	; 0x65
    3efc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    3f00:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    3f04:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    3f08:	00000100 	andeq	r0, r0, r0, lsl #2
    3f0c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3f10:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3f14:	00000200 	andeq	r0, r0, r0, lsl #4
    3f18:	00010500 	andeq	r0, r1, r0, lsl #10
    3f1c:	24ea0205 	strbtcs	r0, [sl], #517	; 0x205
    3f20:	84030000 	strhi	r0, [r3], #-0
    3f24:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    3f28:	0a051416 	beq	148f88 <__ccfg+0x128fe0>
    3f2c:	00010210 	andeq	r0, r1, r0, lsl r2
    3f30:	01050101 	tsteq	r5, r1, lsl #2
    3f34:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    3f38:	03000024 	movweq	r0, #36	; 0x24
    3f3c:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    3f40:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3f44:	0102100a 	tsteq	r2, sl
    3f48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3f4c:	02050001 	andeq	r0, r5, #1
    3f50:	000024ee 	andeq	r2, r0, lr, ror #9
    3f54:	0102a803 	tsteq	r2, r3, lsl #16
    3f58:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3f5c:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3f60:	01010001 	tsteq	r1, r1
    3f64:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3f68:	0024f002 	eoreq	pc, r4, r2
    3f6c:	01d20300 	bicseq	r0, r2, r0, lsl #6
    3f70:	13050501 	movwne	r0, #21761	; 0x5501
    3f74:	06010517 			; <UNDEFINED> instruction: 0x06010517
    3f78:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    3f7c:	33062605 	movwcc	r2, #26117	; 0x6605
    3f80:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3f84:	2105051f 	tstcs	r5, pc, lsl r5
    3f88:	20061d05 	andcs	r1, r6, r5, lsl #26
    3f8c:	01060505 	tsteq	r6, r5, lsl #10
    3f90:	04053606 	streq	r3, [r5], #-1542	; 0xfffff9fa
    3f94:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    3f98:	01053305 	tsteq	r5, r5, lsl #6
    3f9c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3fa0:	20670306 	rsbcs	r0, r7, r6, lsl #6
    3fa4:	01061605 	tsteq	r6, r5, lsl #12
    3fa8:	01001002 	tsteq	r0, r2
    3fac:	00018901 	andeq	r8, r1, r1, lsl #18
    3fb0:	83000300 	movwhi	r0, #768	; 0x300
    3fb4:	02000001 	andeq	r0, r0, #1
    3fb8:	0d0efb01 	vstreq	d15, [lr, #-4]
    3fbc:	01010100 	mrseq	r0, (UNDEF: 17)
    3fc0:	00000001 	andeq	r0, r0, r1
    3fc4:	01000001 	tsteq	r0, r1
    3fc8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3fcc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3fd0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3fd4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3fd8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3fdc:	61652d65 	cmnvs	r5, r5, ror #26
    3fe0:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3fe4:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3fe8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3fec:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3ff0:	6f682f00 	svcvs	0x00682f00
    3ff4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3ff8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3ffc:	442f6e65 	strtmi	r6, [pc], #-3685	; 4004 <NOROM_SetupSetVddrLevel+0x40>
    4000:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4004:	4f2f706f 	svcmi	0x002f706f
    4008:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    400c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4010:	534f4349 	movtpl	r4, #62281	; 0xf349
    4014:	6369502f 	cmnvs	r9, #47	; 0x2f
    4018:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    401c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4020:	43432f58 	movtmi	r2, #16216	; 0x3f58
    4024:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4028:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    402c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4030:	6f682f00 	svcvs	0x00682f00
    4034:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4038:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    403c:	442f6e65 	strtmi	r6, [pc], #-3685	; 4044 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x4>
    4040:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4044:	4f2f706f 	svcmi	0x002f706f
    4048:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    404c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4050:	534f4349 	movtpl	r4, #62281	; 0xf349
    4054:	6369502f 	cmnvs	r9, #47	; 0x2f
    4058:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    405c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4060:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4064:	2f656d6f 	svccs	0x00656d6f
    4068:	70657473 	rsbvc	r7, r5, r3, ror r4
    406c:	2f6e6568 	svccs	0x006e6568
    4070:	6b736544 	blvs	1cdd588 <__ccfg+0x1cbd5e0>
    4074:	2f706f74 	svccs	0x00706f74
    4078:	4f534c4f 	svcmi	0x00534c4f
    407c:	2f54454e 	svccs	0x0054454e
    4080:	4f434950 	svcmi	0x00434950
    4084:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4088:	00534f63 	subseq	r4, r3, r3, ror #30
    408c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3fd8 <NOROM_SetupSetVddrLevel+0x14>
    4090:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4094:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4098:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    409c:	6f746b73 	svcvs	0x00746b73
    40a0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    40a4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    40a8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    40ac:	2f534f43 	svccs	0x00534f43
    40b0:	4f636950 	svcmi	0x00636950
    40b4:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    40b8:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    40bc:	74730000 	ldrbtvc	r0, [r3], #-0
    40c0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    40c4:	0100682e 	tsteq	r0, lr, lsr #16
    40c8:	77680000 	strbvc	r0, [r8, -r0]!
    40cc:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    40d0:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    40d4:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    40d8:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    40dc:	2e746375 	mrccs	3, 3, r6, cr4, cr5, {3}
    40e0:	00020068 	andeq	r0, r2, r8, rrx
    40e4:	63726100 	cmnvs	r2, #0, 2
    40e8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    40ec:	6d000003 	stcvs	0, cr0, [r0, #-12]
    40f0:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    40f4:	00030068 	andeq	r0, r3, r8, rrx
    40f8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    40fc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4100:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4104:	62000003 	andvs	r0, r0, #3
    4108:	6f747475 	svcvs	0x00747475
    410c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4110:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4114:	00000300 	andeq	r0, r0, r0, lsl #6
    4118:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    411c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4120:	6b000004 	blvs	4138 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    4124:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4128:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    412c:	63000005 	movwvs	r0, #5
    4130:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    4134:	00030063 	andeq	r0, r3, r3, rrx
    4138:	029e0000 	addseq	r0, lr, #0
    413c:	00030000 	andeq	r0, r3, r0
    4140:	000001c5 	andeq	r0, r0, r5, asr #3
    4144:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4148:	0101000d 	tsteq	r1, sp
    414c:	00000101 	andeq	r0, r0, r1, lsl #2
    4150:	00000100 	andeq	r0, r0, r0, lsl #2
    4154:	6f682f01 	svcvs	0x00682f01
    4158:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    415c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4160:	442f6e65 	strtmi	r6, [pc], #-3685	; 4168 <NOROM_SetupGetTrimForAmpcompTh2+0x8>
    4164:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4168:	4f2f706f 	svcmi	0x002f706f
    416c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4170:	502f5445 	eorpl	r5, pc, r5, asr #8
    4174:	534f4349 	movtpl	r4, #62281	; 0xf349
    4178:	6369502f 	cmnvs	r9, #47	; 0x2f
    417c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4180:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4184:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
    4188:	73726f73 	cmnvc	r2, #460	; 0x1cc
    418c:	6f682f00 	svcvs	0x00682f00
    4190:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4194:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4198:	442f6e65 	strtmi	r6, [pc], #-3685	; 41a0 <NOROM_SetupGetTrimForAmpcompCtrl+0x1c>
    419c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    41a0:	4f2f706f 	svcmi	0x002f706f
    41a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    41a8:	502f5445 	eorpl	r5, pc, r5, asr #8
    41ac:	534f4349 	movtpl	r4, #62281	; 0xf349
    41b0:	6369502f 	cmnvs	r9, #47	; 0x2f
    41b4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    41b8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    41bc:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    41c0:	2f656d6f 	svccs	0x00656d6f
    41c4:	70657473 	rsbvc	r7, r5, r3, ror r4
    41c8:	2f6e6568 	svccs	0x006e6568
    41cc:	6b736544 	blvs	1cdd6e4 <__ccfg+0x1cbd73c>
    41d0:	2f706f74 	svccs	0x00706f74
    41d4:	4f534c4f 	svcmi	0x00534c4f
    41d8:	2f54454e 	svccs	0x0054454e
    41dc:	4f434950 	svcmi	0x00434950
    41e0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    41e4:	2f534f63 	svccs	0x00534f63
    41e8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    41ec:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    41f0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    41f4:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    41f8:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    41fc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4200:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4204:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4208:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    420c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4210:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4214:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4218:	61652d65 	cmnvs	r5, r5, ror #26
    421c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4220:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4224:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4228:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    422c:	6f682f00 	svcvs	0x00682f00
    4230:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4234:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4238:	442f6e65 	strtmi	r6, [pc], #-3685	; 4240 <NOROM_SetupGetTrimForXoscHfCtl+0x1c>
    423c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4240:	4f2f706f 	svcmi	0x002f706f
    4244:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4248:	502f5445 	eorpl	r5, pc, r5, asr #8
    424c:	534f4349 	movtpl	r4, #62281	; 0xf349
    4250:	6369502f 	cmnvs	r9, #47	; 0x2f
    4254:	2f00534f 	svccs	0x0000534f
    4258:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    425c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4260:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4264:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4268:	706f746b 	rsbvc	r7, pc, fp, ror #8
    426c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4270:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4274:	4349502f 	movtmi	r5, #36911	; 0x902f
    4278:	502f534f 	eorpl	r5, pc, pc, asr #6
    427c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4280:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    4284:	006c656e 	rsbeq	r6, ip, lr, ror #10
    4288:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    428c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    4290:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
    4294:	00010063 	andeq	r0, r1, r3, rrx
    4298:	736d6300 	cmnvc	sp, #0, 6
    429c:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
    42a0:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    42a4:	00000200 	andeq	r0, r0, r0, lsl #4
    42a8:	6f697067 	svcvs	0x00697067
    42ac:	0300682e 	movweq	r6, #2094	; 0x82e
    42b0:	74730000 	ldrbtvc	r0, [r3], #-0
    42b4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    42b8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    42bc:	72610000 	rsbvc	r0, r1, #0
    42c0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    42c4:	00000200 	andeq	r0, r0, r0, lsl #4
    42c8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    42cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    42d0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    42d4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    42d8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    42dc:	00000200 	andeq	r0, r0, r0, lsl #4
    42e0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    42e4:	5f736e6f 	svcpl	0x00736e6f
    42e8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    42ec:	00020068 	andeq	r0, r2, r8, rrx
    42f0:	73797300 	cmnvc	r9, #0, 6
    42f4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    42f8:	00000500 	andeq	r0, r0, r0, lsl #10
    42fc:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4300:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4304:	00000600 	andeq	r0, r0, r0, lsl #12
    4308:	00190500 	andseq	r0, r9, r0, lsl #10
    430c:	00000205 	andeq	r0, r0, r5, lsl #4
    4310:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    4314:	011b0501 	tsteq	fp, r1, lsl #10
    4318:	01050101 	tsteq	r5, r1, lsl #2
    431c:	01020106 	tsteq	r2, r6, lsl #2
    4320:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4324:	0205003f 	andeq	r0, r5, #63	; 0x3f
    4328:	00000000 	andeq	r0, r0, r0
    432c:	05011003 	streq	r1, [r1, #-3]
    4330:	13131402 	tstne	r3, #33554432	; 0x2000000
    4334:	063f0514 			; <UNDEFINED> instruction: 0x063f0514
    4338:	20017a03 	andcs	r7, r1, r3, lsl #20
    433c:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    4340:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    4344:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4348:	044d0603 	strbeq	r0, [sp], #-1539	; 0xfffff9fd
    434c:	00c10302 	sbceq	r0, r1, r2, lsl #6
    4350:	03010401 	movweq	r0, #5121	; 0x1401
    4354:	4b3d2040 	blmi	f4c45c <__ccfg+0xf2c4b4>
    4358:	33030204 	movwcc	r0, #12804	; 0x3204
    435c:	03010401 	movweq	r0, #5121	; 0x1401
    4360:	0205204e 	andeq	r2, r5, #78	; 0x4e
    4364:	06070531 			; <UNDEFINED> instruction: 0x06070531
    4368:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    436c:	018b030f 	orreq	r0, fp, pc, lsl #6
    4370:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4374:	7ef50307 	cdpvc	3, 15, cr0, cr5, cr7, {0}
    4378:	06020520 	streq	r0, [r2], -r0, lsr #10
    437c:	130b0521 	movwne	r0, #46369	; 0xb521
    4380:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
    4384:	03290503 			; <UNDEFINED> instruction: 0x03290503
    4388:	05010183 	streq	r0, [r1, #-387]	; 0xfffffe7d
    438c:	01041705 	tsteq	r4, r5, lsl #14
    4390:	03060b05 	movweq	r0, #27397	; 0x6b05
    4394:	04017ef8 	streq	r7, [r1], #-3832	; 0xfffff108
    4398:	030f0503 	movweq	r0, #62723	; 0xf503
    439c:	04200188 	strteq	r0, [r0], #-392	; 0xfffffe78
    43a0:	030b0501 	movweq	r0, #46337	; 0xb501
    43a4:	04207ef8 	strteq	r7, [r0], #-3832	; 0xfffff108
    43a8:	03330503 	teqeq	r3, #12582912	; 0xc00000
    43ac:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    43b0:	01042042 	tsteq	r4, r2, asr #32
    43b4:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    43b8:	08052e7e 	stmdaeq	r5, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    43bc:	201f052e 	andscs	r0, pc, lr, lsr #10
    43c0:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    43c4:	08051e02 	stmdaeq	r5, {r1, r9, sl, fp, ip}
    43c8:	063a0522 	ldrteq	r0, [sl], -r2, lsr #10
    43cc:	010b051f 	tsteq	fp, pc, lsl r5
    43d0:	11060205 	tstne	r6, r5, lsl #4
    43d4:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
    43d8:	01010006 	tsteq	r1, r6
    43dc:	00000341 	andeq	r0, r0, r1, asr #6
    43e0:	01ae0003 			; <UNDEFINED> instruction: 0x01ae0003
    43e4:	01020000 	mrseq	r0, (UNDEF: 2)
    43e8:	000d0efb 	strdeq	r0, [sp], -fp
    43ec:	01010101 	tsteq	r1, r1, lsl #2
    43f0:	01000000 	mrseq	r0, (UNDEF: 0)
    43f4:	2f010000 	svccs	0x00010000
    43f8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    43fc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4400:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4404:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4408:	706f746b 	rsbvc	r7, pc, fp, ror #8
    440c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4410:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4414:	4349502f 	movtmi	r5, #36911	; 0x902f
    4418:	502f534f 	eorpl	r5, pc, pc, asr #6
    441c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4420:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4424:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    4428:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
    442c:	2f656d6f 	svccs	0x00656d6f
    4430:	70657473 	rsbvc	r7, r5, r3, ror r4
    4434:	2f6e6568 	svccs	0x006e6568
    4438:	6b736544 	blvs	1cdd950 <__ccfg+0x1cbd9a8>
    443c:	2f706f74 	svccs	0x00706f74
    4440:	4f534c4f 	svcmi	0x00534c4f
    4444:	2f54454e 	svccs	0x0054454e
    4448:	4f434950 	svcmi	0x00434950
    444c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4450:	2f534f63 	svccs	0x00534f63
    4454:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4458:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    445c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4460:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    4464:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    4468:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    446c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    4470:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4474:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4478:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    447c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4480:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4484:	61652d65 	cmnvs	r5, r5, ror #26
    4488:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    448c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4490:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4494:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4498:	6f682f00 	svcvs	0x00682f00
    449c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    44a0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    44a4:	442f6e65 	strtmi	r6, [pc], #-3685	; 44ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x60>
    44a8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    44ac:	4f2f706f 	svcmi	0x002f706f
    44b0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    44b4:	502f5445 	eorpl	r5, pc, r5, asr #8
    44b8:	534f4349 	movtpl	r4, #62281	; 0xf349
    44bc:	6369502f 	cmnvs	r9, #47	; 0x2f
    44c0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    44c4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    44c8:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    44cc:	2f656d6f 	svccs	0x00656d6f
    44d0:	70657473 	rsbvc	r7, r5, r3, ror r4
    44d4:	2f6e6568 	svccs	0x006e6568
    44d8:	6b736544 	blvs	1cdd9f0 <__ccfg+0x1cbda48>
    44dc:	2f706f74 	svccs	0x00706f74
    44e0:	4f534c4f 	svcmi	0x00534c4f
    44e4:	2f54454e 	svccs	0x0054454e
    44e8:	4f434950 	svcmi	0x00434950
    44ec:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    44f0:	00534f63 	subseq	r4, r3, r3, ror #30
    44f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4440 <NOROM_SetupSetAonRtcSubSecInc+0x1c>
    44f8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    44fc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4500:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4504:	6f746b73 	svcvs	0x00746b73
    4508:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    450c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4510:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4514:	2f534f43 	svccs	0x00534f43
    4518:	4f636950 	svcmi	0x00636950
    451c:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    4520:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    4524:	75620000 	strbvc	r0, [r2, #-0]!
    4528:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    452c:	00632e73 	rsbeq	r2, r3, r3, ror lr
    4530:	67000001 	strvs	r0, [r0, -r1]
    4534:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    4538:	00020068 	andeq	r0, r2, r8, rrx
    453c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4540:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4544:	00030068 	andeq	r0, r3, r8, rrx
    4548:	63726100 	cmnvs	r2, #0, 2
    454c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4550:	6d000004 	stcvs	0, cr0, [r0, #-16]
    4554:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4558:	00040068 	andeq	r0, r4, r8, rrx
    455c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4560:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4564:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4568:	62000004 	andvs	r0, r0, #4
    456c:	6f747475 	svcvs	0x00747475
    4570:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4574:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4578:	00000400 	andeq	r0, r0, r0, lsl #8
    457c:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4580:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4584:	6b000005 	blvs	45a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x4>
    4588:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    458c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    4590:	00000006 	andeq	r0, r0, r6
    4594:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    4598:	00000002 	andeq	r0, r0, r2
    459c:	011b0300 	tsteq	fp, r0, lsl #6
    45a0:	052e0601 	streq	r0, [lr, #-1537]!	; 0xfffff9ff
    45a4:	056a0602 	strbeq	r0, [sl, #-1538]!	; 0xfffff9fe
    45a8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    45ac:	03052005 	movweq	r2, #20485	; 0x5005
    45b0:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    45b4:	060f0540 	streq	r0, [pc], -r0, asr #10
    45b8:	03020401 	movweq	r0, #9217	; 0x2401
    45bc:	042e0187 	strteq	r0, [lr], #-391	; 0xfffffe79
    45c0:	03070501 	movweq	r0, #29953	; 0x7501
    45c4:	05207efd 	streq	r7, [r0, #-3837]!	; 0xfffff103
    45c8:	14051c0f 	strne	r1, [r5], #-3087	; 0xfffff3f1
    45cc:	1c052006 	stcne	0, cr2, [r5], {6}
    45d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    45d4:	11030620 	tstne	r3, r0, lsr #12
    45d8:	053d4b2e 	ldreq	r4, [sp, #-2862]!	; 0xfffff4d2
    45dc:	2e710303 	cdpcs	3, 7, cr0, cr1, cr3, {0}
    45e0:	29050204 	stmdbcs	r5, {r2, r9}
    45e4:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    45e8:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    45ec:	06070501 	streq	r0, [r7], -r1, lsl #10
    45f0:	017efd03 	cmneq	lr, r3, lsl #26	; <UNPREDICTABLE>
    45f4:	0f050204 	svceq	0x00050204
    45f8:	2e018303 	cdpcs	3, 0, cr8, cr1, cr3, {0}
    45fc:	07050104 	streq	r0, [r5, -r4, lsl #2]
    4600:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    4604:	33050204 	movwcc	r0, #20996	; 0x5204
    4608:	20018303 	andcs	r8, r1, r3, lsl #6
    460c:	06050104 	streq	r0, [r5], -r4, lsl #2
    4610:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    4614:	30060405 	andcc	r0, r6, r5, lsl #8
    4618:	01060505 	tsteq	r6, r5, lsl #10
    461c:	40060405 	andmi	r0, r6, r5, lsl #8
    4620:	03060305 	movweq	r0, #25349	; 0x6305
    4624:	2f062e12 	svccs	0x00062e12
    4628:	64030605 	strvs	r0, [r3], #-1541	; 0xfffff9fb
    462c:	060d0520 	streq	r0, [sp], -r0, lsr #10
    4630:	06020501 	streq	r0, [r2], -r1, lsl #10
    4634:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
    4638:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    463c:	06290502 	strteq	r0, [r9], -r2, lsl #10
    4640:	5800eb03 	stmdapl	r0, {r0, r1, r8, r9, fp, sp, lr, pc}
    4644:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4648:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    464c:	03070501 	movweq	r0, #29953	; 0x7501
    4650:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
    4654:	030f0502 	movweq	r0, #62722	; 0xf502
    4658:	052000f0 	streq	r0, [r0, #-240]!	; 0xffffff10
    465c:	01042033 	tsteq	r4, r3, lsr r0
    4660:	90030505 	andls	r0, r3, r5, lsl #10
    4664:	0205207f 	andeq	r2, r5, #127	; 0x7f
    4668:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    466c:	03050106 	movweq	r0, #20742	; 0x5106
    4670:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    4674:	06070551 			; <UNDEFINED> instruction: 0x06070551
    4678:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    467c:	df030629 	svcle	0x00030629
    4680:	05053c00 	streq	r3, [r5, #-3072]	; 0xfffff400
    4684:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    4688:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    468c:	7f9c0307 	svcvc	0x009c0307
    4690:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4694:	00e4030f 	rsceq	r0, r4, pc, lsl #6
    4698:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    469c:	7f9c0307 	svcvc	0x009c0307
    46a0:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    46a4:	00e40333 	rsceq	r0, r4, r3, lsr r3
    46a8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    46ac:	7f9c0305 	svcvc	0x009c0305
    46b0:	06020520 	streq	r0, [r2], -r0, lsr #10
    46b4:	060e0531 			; <UNDEFINED> instruction: 0x060e0531
    46b8:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    46bc:	31060205 	tstcc	r6, r5, lsl #4
    46c0:	01060305 	tsteq	r6, r5, lsl #6
    46c4:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    46c8:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    46cc:	052c0205 	streq	r0, [ip, #-517]!	; 0xfffffdfb
    46d0:	024c0601 	subeq	r0, ip, #1048576	; 0x100000
    46d4:	0101000c 	tsteq	r1, ip
    46d8:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    46dc:	00000002 	andeq	r0, r0, r2
    46e0:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    46e4:	16020501 	strne	r0, [r2], -r1, lsl #10
    46e8:	01060f05 	tsteq	r6, r5, lsl #30
    46ec:	051c2905 	ldreq	r2, [ip, #-2309]	; 0xfffff6fb
    46f0:	0505240f 	streq	r2, [r5, #-1039]	; 0xfffffbf1
    46f4:	06030520 	streq	r0, [r3], -r0, lsr #10
    46f8:	06010521 	streq	r0, [r1], -r1, lsr #10
    46fc:	0303051a 	movweq	r0, #13594	; 0x351a
    4700:	02052e78 	andeq	r2, r5, #120, 28	; 0x780
    4704:	07054006 	streq	r4, [r5, -r6]
    4708:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    470c:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    4710:	01052f2f 	tsteq	r5, pc, lsr #30
    4714:	03052206 	movweq	r2, #20998	; 0x5206
    4718:	3e01052c 	cfsh32cc	mvfx0, mvfx1, #28
    471c:	01000602 	tsteq	r0, r2, lsl #12
    4720:	00093601 	andeq	r3, r9, r1, lsl #12
    4724:	d1000300 	mrsle	r0, LR_irq
    4728:	02000001 	andeq	r0, r0, #1
    472c:	0d0efb01 	vstreq	d15, [lr, #-4]
    4730:	01010100 	mrseq	r0, (UNDEF: 17)
    4734:	00000001 	andeq	r0, r0, r1
    4738:	01000001 	tsteq	r0, r1
    473c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4688 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xec>
    4740:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4744:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4748:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    474c:	6f746b73 	svcvs	0x00746b73
    4750:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4754:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4758:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    475c:	2f534f43 	svccs	0x00534f43
    4760:	4f636950 	svcmi	0x00636950
    4764:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4768:	2f736269 	svccs	0x00736269
    476c:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    4770:	00656761 	rsbeq	r6, r5, r1, ror #14
    4774:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 46c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    4778:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    477c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4780:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4784:	6f746b73 	svcvs	0x00746b73
    4788:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    478c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4790:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4794:	2f534f43 	svccs	0x00534f43
    4798:	4f636950 	svcmi	0x00636950
    479c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    47a0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    47a4:	3143432f 	cmpcc	r3, pc, lsr #6
    47a8:	57585833 	smmlarpl	r8, r3, r8, r5
    47ac:	2f455241 	svccs	0x00455241
    47b0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    47b4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    47b8:	752f0062 	strvc	r0, [pc, #-98]!	; 475e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c2>
    47bc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 45f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x5c>
    47c0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    47c4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    47c8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    47cc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    47d0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    47d4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    47d8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    47dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    47e0:	2f006564 	svccs	0x00006564
    47e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    47e8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    47ec:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    47f0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    47f4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    47f8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    47fc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4800:	4349502f 	movtmi	r5, #36911	; 0x902f
    4804:	502f534f 	eorpl	r5, pc, pc, asr #6
    4808:	534f6369 	movtpl	r6, #62313	; 0xf369
    480c:	3143432f 	cmpcc	r3, pc, lsr #6
    4810:	00585833 	subseq	r5, r8, r3, lsr r8
    4814:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4760 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c4>
    4818:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    481c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4820:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4824:	6f746b73 	svcvs	0x00746b73
    4828:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    482c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4830:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4834:	2f534f43 	svccs	0x00534f43
    4838:	4f636950 	svcmi	0x00636950
    483c:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    4840:	2f656d6f 	svccs	0x00656d6f
    4844:	70657473 	rsbvc	r7, r5, r3, ror r4
    4848:	2f6e6568 	svccs	0x006e6568
    484c:	6b736544 	blvs	1cddd64 <__ccfg+0x1cbddbc>
    4850:	2f706f74 	svccs	0x00706f74
    4854:	4f534c4f 	svcmi	0x00534c4f
    4858:	2f54454e 	svccs	0x0054454e
    485c:	4f434950 	svcmi	0x00434950
    4860:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4864:	2f534f63 	svccs	0x00534f63
    4868:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    486c:	00006c65 	andeq	r6, r0, r5, ror #24
    4870:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    4874:	5f656761 	svcpl	0x00656761
    4878:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    487c:	33303872 	teqcc	r0, #7471104	; 0x720000
    4880:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    4884:	67000001 	strvs	r0, [r0, -r1]
    4888:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    488c:	00020068 	andeq	r0, r2, r8, rrx
    4890:	6f747300 	svcvs	0x00747300
    4894:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4898:	7065655f 	rsbvc	r6, r5, pc, asr r5
    489c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    48a0:	00010068 	andeq	r0, r1, r8, rrx
    48a4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    48a8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    48ac:	00030068 	andeq	r0, r3, r8, rrx
    48b0:	63726100 	cmnvs	r2, #0, 2
    48b4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    48b8:	6d000004 	stcvs	0, cr0, [r0, #-16]
    48bc:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    48c0:	00040068 	andeq	r0, r4, r8, rrx
    48c4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    48c8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    48cc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    48d0:	62000004 	andvs	r0, r0, #4
    48d4:	6f747475 	svcvs	0x00747475
    48d8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    48dc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    48e0:	00000400 	andeq	r0, r0, r0, lsl #8
    48e4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    48e8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    48ec:	6b000005 	blvs	4908 <AuxAdiDdiSafeWrite.constprop.1+0x4>
    48f0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    48f4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    48f8:	00000006 	andeq	r0, r0, r6
    48fc:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    4900:	00253c02 	eoreq	r3, r5, r2, lsl #24
    4904:	01180300 	tsteq	r8, r0, lsl #6
    4908:	13140205 	tstne	r4, #1342177280	; 0x50000000
    490c:	01150514 	tsteq	r5, r4, lsl r5
    4910:	0d061905 	vstreq.16	s2, [r6, #-10]	; <UNPREDICTABLE>
    4914:	04250905 	strteq	r0, [r5], #-2309	; 0xfffff6fb
    4918:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    491c:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4920:	03190501 	tsteq	r9, #4194304	; 0x400000
    4924:	042e7df1 	strteq	r7, [lr], #-3569	; 0xfffff20f
    4928:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    492c:	052002c5 	streq	r0, [r0, #-709]!	; 0xfffffd3b
    4930:	7ed0030f 	cdpvc	3, 13, cr0, cr0, cr15, {0}
    4934:	032d0520 			; <UNDEFINED> instruction: 0x032d0520
    4938:	042000fa 	strteq	r0, [r0], #-250	; 0xffffff06
    493c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4940:	207df703 	rsbscs	pc, sp, r3, lsl #14
    4944:	0f050204 	svceq	0x00050204
    4948:	018f0306 	orreq	r0, pc, r6, lsl #6
    494c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4950:	7ef10305 	cdpvc	3, 15, cr0, cr1, cr5, {0}
    4954:	21060520 	tstcs	r6, r0, lsr #10
    4958:	051f0505 	ldreq	r0, [pc, #-1285]	; 445b <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf>
    495c:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    4960:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4964:	05010189 	streq	r0, [r1, #-393]	; 0xfffffe77
    4968:	01041705 	tsteq	r4, r5, lsl #14
    496c:	f3030405 	vshl.u8	d0, d5, d3
    4970:	0605017e 			; <UNDEFINED> instruction: 0x0605017e
    4974:	03050106 	movweq	r0, #20742	; 0x5106
    4978:	02043d06 	andeq	r3, r4, #384	; 0x180
    497c:	81032905 	tsthi	r3, r5, lsl #18
    4980:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    4984:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    4988:	f6030602 			; <UNDEFINED> instruction: 0xf6030602
    498c:	0204017d 	andeq	r0, r4, #1073741855	; 0x4000001f
    4990:	8a032d05 	bhi	cfdac <__ccfg+0xafe04>
    4994:	01042002 	tsteq	r4, r2
    4998:	03060305 	movweq	r0, #25349	; 0x6305
    499c:	04207dfb 	strteq	r7, [r0], #-3579	; 0xfffff205
    49a0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    49a4:	050102b6 	streq	r0, [r1, #-694]	; 0xfffffd4a
    49a8:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    49ac:	01040106 	tsteq	r4, r6, lsl #2
    49b0:	03061c05 	movweq	r1, #27653	; 0x6c05
    49b4:	05207dc0 	streq	r7, [r0, #-3520]!	; 0xfffff240
    49b8:	02050115 	andeq	r0, r5, #1073741829	; 0x40000005
    49bc:	01050106 	tsteq	r5, r6, lsl #2
    49c0:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    49c4:	01010007 	tsteq	r1, r7
    49c8:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    49cc:	00257002 	eoreq	r7, r5, r2
    49d0:	01280300 			; <UNDEFINED> instruction: 0x01280300
    49d4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    49d8:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    49dc:	200e061f 	andcs	r0, lr, pc, lsl r6
    49e0:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    49e4:	3c01ff03 	stccc	15, cr15, [r1], {3}
    49e8:	03050104 	movweq	r0, #20740	; 0x5104
    49ec:	7e860306 	cdpvc	3, 8, cr0, cr6, cr6, {0}
    49f0:	0606054a 	streq	r0, [r6], -sl, asr #10
    49f4:	06040501 	streq	r0, [r4], -r1, lsl #10
    49f8:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    49fc:	01f40329 	mvnseq	r0, r9, lsr #6
    4a00:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4a04:	01062d05 	tsteq	r6, r5, lsl #26
    4a08:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    4a0c:	7e890306 	cdpvc	3, 8, cr0, cr9, cr6, {0}
    4a10:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4a14:	02a80329 	adceq	r0, r8, #-1543503872	; 0xa4000000
    4a18:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4a1c:	01062d05 	tsteq	r6, r5, lsl #26
    4a20:	03050104 	movweq	r0, #20740	; 0x5104
    4a24:	7dd40306 	ldclvc	3, cr0, [r4, #24]
    4a28:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4a2c:	01f10329 	mvnseq	r0, r9, lsr #6
    4a30:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4a34:	03060104 	movweq	r0, #24836	; 0x6104
    4a38:	05017e8c 	streq	r7, [r1, #-3724]	; 0xfffff174
    4a3c:	20790302 	rsbscs	r0, r9, r2, lsl #6
    4a40:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4a44:	2001fb03 	andcs	pc, r1, r3, lsl #22
    4a48:	03050104 	movweq	r0, #20740	; 0x5104
    4a4c:	7e8b0306 	cdpvc	3, 8, cr0, cr11, cr6, {0}
    4a50:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4a54:	02a60329 	adceq	r0, r6, #-1543503872	; 0xa4000000
    4a58:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4a5c:	03060104 	movweq	r0, #24836	; 0x6104
    4a60:	04017dd6 	streq	r7, [r1], #-3542	; 0xfffff22a
    4a64:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4a68:	042002aa 	strteq	r0, [r0], #-682	; 0xfffffd56
    4a6c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4a70:	207dd603 	rsbscs	sp, sp, r3, lsl #12
    4a74:	79031505 	stmdbvc	r3, {r0, r2, r8, sl, ip}
    4a78:	010e0501 	tsteq	lr, r1, lsl #10
    4a7c:	01060205 	tsteq	r6, r5, lsl #4
    4a80:	09030105 	stmdbeq	r3, {r0, r2, r8}
    4a84:	00050220 	andeq	r0, r5, r0, lsr #4
    4a88:	1e050101 	adfnes	f0, f5, f1
    4a8c:	a0020500 	andge	r0, r2, r0, lsl #10
    4a90:	03000025 	movweq	r0, #37	; 0x25
    4a94:	02050139 	andeq	r0, r5, #1073741838	; 0x4000000e
    4a98:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4a9c:	03cf0329 	biceq	r0, pc, #-1543503872	; 0xa4000000
    4aa0:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4aa4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4aa8:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4aac:	031e0501 	tsteq	lr, #4194304	; 0x400000
    4ab0:	04207ca8 	strteq	r7, [r0], #-3240	; 0xfffff358
    4ab4:	03380502 	teqeq	r8, #8388608	; 0x800000
    4ab8:	042003d8 	strteq	r0, [r0], #-984	; 0xfffffc28
    4abc:	06020501 	streq	r0, [r2], -r1, lsl #10
    4ac0:	2e7cab03 	vaddcs.f64	d26, d12, d3
    4ac4:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4ac8:	03cd0329 	biceq	r0, sp, #-1543503872	; 0xa4000000
    4acc:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4ad0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4ad4:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4ad8:	03010501 	movweq	r0, #5377	; 0x1501
    4adc:	022e7cad 	eoreq	r7, lr, #44288	; 0xad00
    4ae0:	01010004 	tsteq	r1, r4
    4ae4:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    4ae8:	0025b802 	eoreq	fp, r5, r2, lsl #16
    4aec:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    4af0:	16020501 	strne	r0, [r2], -r1, lsl #10
    4af4:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
    4af8:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4afc:	03ba0338 			; <UNDEFINED> instruction: 0x03ba0338
    4b00:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4b04:	7cca0309 	stclvc	3, cr0, [sl], {9}
    4b08:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4b0c:	03b60338 			; <UNDEFINED> instruction: 0x03b60338
    4b10:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4b14:	ca030608 	bgt	c633c <__ccfg+0xa6394>
    4b18:	0205207c 	andeq	r2, r5, #124	; 0x7c
    4b1c:	143c7303 	ldrtne	r7, [ip], #-771	; 0xfffffcfd
    4b20:	29050204 	stmdbcs	r5, {r2, r9}
    4b24:	0103ba03 	tsteq	r3, r3, lsl #20
    4b28:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4b2c:	01041705 	tsteq	r4, r5, lsl #14
    4b30:	03060205 	movweq	r0, #25093	; 0x6205
    4b34:	04017cc0 	streq	r7, [r1], #-3264	; 0xfffff340
    4b38:	03380502 	teqeq	r8, #8388608	; 0x800000
    4b3c:	042003c0 	strteq	r0, [r0], #-960	; 0xfffffc40
    4b40:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b44:	207cc003 	rsbscs	ip, ip, r3
    4b48:	0606052f 	streq	r0, [r6], -pc, lsr #10
    4b4c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b50:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4b54:	03b70329 			; <UNDEFINED> instruction: 0x03b70329
    4b58:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4b5c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4b60:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4b64:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b68:	2e7cc303 	cdpcs	3, 7, cr12, cr12, cr3, {0}
    4b6c:	19060f05 	stmdbne	r6, {r0, r2, r8, r9, sl, fp}
    4b70:	05360105 	ldreq	r0, [r6, #-261]!	; 0xfffffefb
    4b74:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    4b78:	0606052e 	streq	r0, [r6], -lr, lsr #10
    4b7c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4b80:	024b4c4b 	subeq	r4, fp, #19200	; 0x4b00
    4b84:	01010007 	tsteq	r1, r7
    4b88:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    4b8c:	00260c02 	eoreq	r0, r6, r2, lsl #24
    4b90:	01810300 	orreq	r0, r1, r0, lsl #6
    4b94:	16020501 	strne	r0, [r2], -r1, lsl #10
    4b98:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    4b9c:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    4ba0:	03052005 	movweq	r2, #20485	; 0x5005
    4ba4:	02053006 	andeq	r3, r5, #6
    4ba8:	0608055e 			; <UNDEFINED> instruction: 0x0608055e
    4bac:	3d010501 	cfstr32cc	mvfx0, [r1, #-4]
    4bb0:	1b060305 	blne	1857cc <__ccfg+0x165824>
    4bb4:	66030205 	strvs	r0, [r3], -r5, lsl #4
    4bb8:	14010101 	strne	r0, [r1], #-257	; 0xfffffeff
    4bbc:	29050204 	stmdbcs	r5, {r2, r9}
    4bc0:	01039903 	tsteq	r3, r3, lsl #18
    4bc4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4bc8:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4bcc:	01040106 	tsteq	r4, r6, lsl #2
    4bd0:	e1030205 	tst	r3, r5, lsl #4
    4bd4:	02042e7c 	andeq	r2, r4, #124, 28	; 0x7c0
    4bd8:	9f033805 	svcls	0x00033805
    4bdc:	01042003 	tsteq	r4, r3
    4be0:	03060205 	movweq	r0, #25093	; 0x6205
    4be4:	2f207ce1 	svccs	0x00207ce1
    4be8:	29050204 	stmdbcs	r5, {r2, r9}
    4bec:	01039703 	tsteq	r3, r3, lsl #14
    4bf0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4bf4:	01041705 	tsteq	r4, r5, lsl #14
    4bf8:	03060205 	movweq	r0, #25093	; 0x6205
    4bfc:	04017ce3 	streq	r7, [r1], #-3299	; 0xfffff31d
    4c00:	03380502 	teqeq	r8, #8388608	; 0x800000
    4c04:	0420039d 	strteq	r0, [r0], #-925	; 0xfffffc63
    4c08:	06020501 	streq	r0, [r2], -r1, lsl #10
    4c0c:	207ce303 	rsbscs	lr, ip, r3, lsl #6
    4c10:	16030305 	strne	r0, [r3], -r5, lsl #6
    4c14:	0609052e 	streq	r0, [r9], -lr, lsr #10
    4c18:	00090201 	andeq	r0, r9, r1, lsl #4
    4c1c:	17050101 	strne	r0, [r5, -r1, lsl #2]
    4c20:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    4c24:	03000026 	movweq	r0, #38	; 0x26
    4c28:	050100f7 	streq	r0, [r1, #-247]	; 0xffffff09
    4c2c:	17051402 	strne	r1, [r5, -r2, lsl #8]
    4c30:	0c051006 	stceq	0, cr1, [r5], {6}
    4c34:	20050522 	andcs	r0, r5, r2, lsr #10
    4c38:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4c3c:	03020559 	movweq	r0, #9561	; 0x2559
    4c40:	0305016e 	movweq	r0, #20846	; 0x516e
    4c44:	053c1303 	ldreq	r1, [ip, #-771]!	; 0xfffffcfd
    4c48:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4c4c:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
    4c50:	06010501 	streq	r0, [r1], -r1, lsl #10
    4c54:	00030214 	andeq	r0, r3, r4, lsl r2
    4c58:	11050101 	tstne	r5, r1, lsl #2
    4c5c:	70020500 	andvc	r0, r2, r0, lsl #10
    4c60:	03000026 	movweq	r0, #38	; 0x26
    4c64:	05010192 	streq	r0, [r1, #-402]	; 0xfffffe6e
    4c68:	11051602 	tstne	r5, r2, lsl #12
    4c6c:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    4c70:	052f0624 	streq	r0, [pc, #-1572]!	; 4654 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb8>
    4c74:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4c78:	2e0e0301 	cdpcs	3, 0, cr0, cr14, cr1, {0}
    4c7c:	72030805 	andvc	r0, r3, #327680	; 0x50000
    4c80:	06020520 	streq	r0, [r2], -r0, lsr #10
    4c84:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    4c88:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4c8c:	01010003 	tsteq	r1, r3
    4c90:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    4c94:	00268402 	eoreq	r8, r6, r2, lsl #8
    4c98:	01a70300 			; <UNDEFINED> instruction: 0x01a70300
    4c9c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4ca0:	01060605 	tsteq	r6, r5, lsl #12
    4ca4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4ca8:	052f0603 	streq	r0, [pc, #-1539]!	; 46ad <NOROM_SysCtrlSetRechargeBeforePowerDown+0x111>
    4cac:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4cb0:	052f0603 	streq	r0, [pc, #-1539]!	; 46b5 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x119>
    4cb4:	02300601 	eorseq	r0, r0, #1048576	; 0x100000
    4cb8:	01010003 	tsteq	r1, r3
    4cbc:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    4cc0:	00000002 	andeq	r0, r0, r2
    4cc4:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    4cc8:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    4ccc:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    4cd0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4cd4:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    4cd8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4cdc:	12053c18 	andne	r3, r5, #24, 24	; 0x1800
    4ce0:	06020520 	streq	r0, [r2], -r0, lsr #10
    4ce4:	0204303f 	andeq	r3, r4, #63	; 0x3f
    4ce8:	d1032905 	tstle	r3, r5, lsl #18
    4cec:	3d050102 	stfccs	f0, [r5, #-8]
    4cf0:	17050514 	smladne	r5, r4, r5, r0
    4cf4:	01063805 	tsteq	r6, r5, lsl #16
    4cf8:	02050104 	andeq	r0, r5, #4, 2
    4cfc:	2e7daa03 	vaddcs.f32	s21, s26, s6
    4d00:	38050204 	stmdacc	r5, {r2, r9}
    4d04:	2002d603 	andcs	sp, r2, r3, lsl #12
    4d08:	02050104 	andeq	r0, r5, #4, 2
    4d0c:	7daa0306 	stcvc	3, cr0, [sl, #24]!
    4d10:	4b4b2f20 	blmi	12d0998 <__ccfg+0x12b09f0>
    4d14:	2008053e 	andcs	r0, r8, lr, lsr r5
    4d18:	04310205 	ldrteq	r0, [r1], #-517	; 0xfffffdfb
    4d1c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4d20:	050102c7 	streq	r0, [r1, #-711]	; 0xfffffd39
    4d24:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4d28:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4d2c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4d30:	b4030602 	strlt	r0, [r3], #-1538	; 0xfffff9fe
    4d34:	05302e7d 	ldreq	r2, [r0, #-3709]!	; 0xfffff183
    4d38:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    4d3c:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    4d40:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4d44:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    4d48:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
    4d4c:	0005023c 	andeq	r0, r5, ip, lsr r2
    4d50:	31050101 	tstcc	r5, r1, lsl #2
    4d54:	00020500 	andeq	r0, r2, r0, lsl #10
    4d58:	03000000 	movweq	r0, #0
    4d5c:	050101ca 	streq	r0, [r1, #-458]	; 0xfffffe36
    4d60:	31051402 	tstcc	r5, r2, lsl #8
    4d64:	0c051006 	stceq	0, cr1, [r5], {6}
    4d68:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    4d6c:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    4d70:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    4d74:	06030530 			; <UNDEFINED> instruction: 0x06030530
    4d78:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4d7c:	20170501 	andscs	r0, r7, r1, lsl #10
    4d80:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4d84:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4d88:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4d8c:	03053c17 	movweq	r3, #23575	; 0x5c17
    4d90:	05303206 	ldreq	r3, [r0, #-518]!	; 0xfffffdfa
    4d94:	010a0304 	tsteq	sl, r4, lsl #6
    4d98:	01061005 	tsteq	r6, r5
    4d9c:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    4da0:	09052010 	stmdbeq	r5, {r4, sp}
    4da4:	06040520 	streq	r0, [r4], -r0, lsr #10
    4da8:	06110522 	ldreq	r0, [r1], -r2, lsr #10
    4dac:	20090501 	andcs	r0, r9, r1, lsl #10
    4db0:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    4db4:	04052e09 	streq	r2, [r5], #-3593	; 0xfffff1f7
    4db8:	0d052406 	cfstrseq	mvf2, [r5, #-24]	; 0xffffffe8
    4dbc:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4dc0:	0605054a 	streq	r0, [r5], -sl, asr #10
    4dc4:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4dc8:	06050501 	streq	r0, [r5], -r1, lsl #10
    4dcc:	0c052f2f 	stceq	15, cr2, [r5], {47}	; 0x2f
    4dd0:	01050106 	tsteq	r5, r6, lsl #2
    4dd4:	05203103 	streq	r3, [r0, #-259]!	; 0xfffffefd
    4dd8:	52030604 	andpl	r0, r3, #4, 12	; 0x400000
    4ddc:	060e0520 	streq	r0, [lr], -r0, lsr #10
    4de0:	20070501 	andcs	r0, r7, r1, lsl #10
    4de4:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    4de8:	0505201d 	streq	r2, [r5, #-29]	; 0xffffffe3
    4dec:	0b053e06 	bleq	15460c <__ccfg+0x134664>
    4df0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4df4:	1e0b0528 	cfsh32ne	mvfx0, mvfx11, #24
    4df8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4dfc:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4e00:	96030638 			; <UNDEFINED> instruction: 0x96030638
    4e04:	01040102 	tsteq	r4, r2, lsl #2
    4e08:	ea030405 	b	c5e24 <__ccfg+0xa5e7c>
    4e0c:	02052e7d 	andeq	r2, r5, #2000	; 0x7d0
    4e10:	7ec70306 	cdpvc	3, 12, cr0, cr7, cr6, {0}
    4e14:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4e18:	03c80329 	biceq	r0, r8, #-1543503872	; 0xa4000000
    4e1c:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4e20:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4e24:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4e28:	06020501 	streq	r0, [r2], -r1, lsl #10
    4e2c:	207cb203 	rsbscs	fp, ip, r3, lsl #4
    4e30:	3d4b4b2f 	vstrcc	d20, [fp, #-188]	; 0xffffff44
    4e34:	29050204 	stmdbcs	r5, {r2, r9}
    4e38:	0103c303 	tsteq	r3, r3, lsl #6
    4e3c:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4e40:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4e44:	01040106 	tsteq	r4, r6, lsl #2
    4e48:	03060205 	movweq	r0, #25093	; 0x6205
    4e4c:	052e7dee 	streq	r7, [lr, #-3566]!	; 0xfffff212
    4e50:	5503060b 	strpl	r0, [r3, #-1547]	; 0xfffff9f5
    4e54:	06090582 	streq	r0, [r9], -r2, lsl #11
    4e58:	052e1f03 	streq	r1, [lr, #-3843]!	; 0xfffff0fd
    4e5c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4e60:	2a052e0c 	bcs	150698 <__ccfg+0x1306f0>
    4e64:	20220520 	eorcs	r0, r2, r0, lsr #10
    4e68:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    4e6c:	01060b05 	tsteq	r6, r5, lsl #22
    4e70:	31060505 	tstcc	r6, r5, lsl #10
    4e74:	01060b05 	tsteq	r6, r5, lsl #22
    4e78:	05350205 	ldreq	r0, [r5, #-517]!	; 0xfffffdfb
    4e7c:	0a030604 	beq	c6694 <__ccfg+0xa66ec>
    4e80:	0905592e 	stmdbeq	r5, {r1, r2, r3, r5, r8, fp, ip, lr}
    4e84:	0e030106 	adfeqs	f0, f3, f6
    4e88:	0604054a 	streq	r0, [r4], -sl, asr #10
    4e8c:	206b0321 	rsbcs	r0, fp, r1, lsr #6
    4e90:	200b0359 	andcs	r0, fp, r9, asr r3
    4e94:	0609054b 	streq	r0, [r9], -fp, asr #10
    4e98:	06040501 	streq	r0, [r4], -r1, lsl #10
    4e9c:	09054b5e 	stmdbeq	r5, {r1, r2, r3, r4, r6, r8, r9, fp, lr}
    4ea0:	03050106 	movweq	r0, #20742	; 0x5106
    4ea4:	7fba0306 	svcvc	0x00ba0306
    4ea8:	06060558 			; <UNDEFINED> instruction: 0x06060558
    4eac:	3b090501 	blcc	2462b8 <__ccfg+0x226310>
    4eb0:	01010008 	tsteq	r1, r8
    4eb4:	05003b05 	streq	r3, [r0, #-2821]	; 0xfffff4fb
    4eb8:	00000002 	andeq	r0, r0, r2
    4ebc:	02a00300 	adceq	r0, r0, #0, 6
    4ec0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4ec4:	063b0514 			; <UNDEFINED> instruction: 0x063b0514
    4ec8:	320c050e 	andcc	r0, ip, #58720256	; 0x3800000
    4ecc:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    4ed0:	3b052405 	blcc	14deec <__ccfg+0x12df44>
    4ed4:	3205051c 	andcc	r0, r5, #28, 10	; 0x7000000
    4ed8:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4edc:	01060605 	tsteq	r6, r5, lsl #12
    4ee0:	053c1a05 	ldreq	r1, [ip, #-2565]!	; 0xfffff5fb
    4ee4:	03052e14 	movweq	r2, #24084	; 0x5e14
    4ee8:	08053f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, ip, sp}
    4eec:	03050106 	movweq	r0, #20742	; 0x5106
    4ef0:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4ef4:	03050106 	movweq	r0, #20742	; 0x5106
    4ef8:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4efc:	03050106 	movweq	r0, #20742	; 0x5106
    4f00:	052f3006 	streq	r3, [pc, #-6]!	; 4f02 <__aeabi_lmul+0x4d6>
    4f04:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4f08:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4f0c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4f10:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4f14:	0a052206 	beq	14d734 <__ccfg+0x12d78c>
    4f18:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4f1c:	052f2106 	streq	r2, [pc, #-262]!	; 4e1e <__aeabi_lmul+0x3f2>
    4f20:	22030601 	andcs	r0, r3, #1048576	; 0x100000
    4f24:	06030501 	streq	r0, [r3], -r1, lsl #10
    4f28:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    4f2c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    4f30:	03052006 	movweq	r2, #20486	; 0x5006
    4f34:	24063e06 	strcs	r3, [r6], #-3590	; 0xfffff1fa
    4f38:	04304a06 	ldrteq	r4, [r0], #-2566	; 0xfffff5fa
    4f3c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4f40:	050101c8 	streq	r0, [r1, #-456]	; 0xfffffe38
    4f44:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4f48:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4f4c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4f50:	7eb30303 	cdpvc	3, 11, cr0, cr3, cr3, {0}
    4f54:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    4f58:	01cd0338 	biceq	r0, sp, r8, lsr r3
    4f5c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4f60:	b3030603 	movwlt	r0, #13827	; 0x3603
    4f64:	052f2e7e 	streq	r2, [pc, #-3710]!	; 40ee <NOROM_SetupGetTrimForAnabypassValue1+0x2>
    4f68:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    4f6c:	4b062e03 	blmi	190780 <__ccfg+0x1707d8>
    4f70:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    4f74:	0c053106 	stfeqs	f3, [r5], {6}
    4f78:	2e09052b 	cfsh32cs	mvfx0, mvfx9, #27
    4f7c:	05230805 	streq	r0, [r3, #-2053]!	; 0xfffff7fb
    4f80:	051d0609 	ldreq	r0, [sp, #-1545]	; 0xfffff9f7
    4f84:	02042603 	andeq	r2, r4, #3145728	; 0x300000
    4f88:	bb032905 	bllt	cf3a4 <__ccfg+0xaf3fc>
    4f8c:	3d050101 	stfccs	f0, [r5, #-4]
    4f90:	17050514 	smladne	r5, r4, r5, r0
    4f94:	01063805 	tsteq	r6, r5, lsl #16
    4f98:	02050104 	andeq	r0, r5, #4, 2
    4f9c:	7ec10306 	cdpvc	3, 12, cr0, cr1, cr6, {0}
    4fa0:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    4fa4:	06020501 	streq	r0, [r2], -r1, lsl #10
    4fa8:	04054b40 	streq	r4, [r5], #-2880	; 0xfffff4c0
    4fac:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    4fb0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4fb4:	3d063c04 	stccc	12, cr3, [r6, #-16]
    4fb8:	01060805 	tsteq	r6, r5, lsl #16
    4fbc:	59060405 	stmdbpl	r6, {r0, r2, sl}
    4fc0:	01060805 	tsteq	r6, r5, lsl #16
    4fc4:	5d030b05 	vstrpl	d0, [r3, #-20]	; 0xffffffec
    4fc8:	000d024a 	andeq	r0, sp, sl, asr #4
    4fcc:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    4fd0:	00020500 	andeq	r0, r2, r0, lsl #10
    4fd4:	03000000 	movweq	r0, #0
    4fd8:	050102da 	streq	r0, [r1, #-730]	; 0xfffffd26
    4fdc:	01021501 	tsteq	r2, r1, lsl #10
    4fe0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4fe4:	02050018 	andeq	r0, r5, #24
    4fe8:	00000000 	andeq	r0, r0, r0
    4fec:	0102df03 	tsteq	r2, r3, lsl #30
    4ff0:	05150205 	ldreq	r0, [r5, #-517]	; 0xfffffdfb
    4ff4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4ff8:	01010002 	tsteq	r1, r2
    4ffc:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5000:	00020500 	andeq	r0, r2, r0, lsl #10
    5004:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    5008:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    500c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5010:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5014:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5018:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    501c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5020:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5024:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5028:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
    502c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5030:	01010003 	tsteq	r1, r3
    5034:	17050304 	strne	r0, [r5, -r4, lsl #6]
    5038:	00020500 	andeq	r0, r2, r0, lsl #10
    503c:	03000000 	movweq	r0, #0
    5040:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    5044:	06170514 			; <UNDEFINED> instruction: 0x06170514
    5048:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
    504c:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    5050:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    5054:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    5058:	b0010100 	andlt	r0, r1, r0, lsl #2
    505c:	03000001 	movweq	r0, #1
    5060:	00012500 	andeq	r2, r1, r0, lsl #10
    5064:	fb010200 	blx	4586e <__ccfg+0x258c6>
    5068:	01000d0e 	tsteq	r0, lr, lsl #26
    506c:	00010101 	andeq	r0, r1, r1, lsl #2
    5070:	00010000 	andeq	r0, r1, r0
    5074:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5078:	2f656d6f 	svccs	0x00656d6f
    507c:	70657473 	rsbvc	r7, r5, r3, ror r4
    5080:	2f6e6568 	svccs	0x006e6568
    5084:	6b736544 	blvs	1cde59c <__ccfg+0x1cbe5f4>
    5088:	2f706f74 	svccs	0x00706f74
    508c:	4f534c4f 	svcmi	0x00534c4f
    5090:	2f54454e 	svccs	0x0054454e
    5094:	4f434950 	svcmi	0x00434950
    5098:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    509c:	2f534f63 	svccs	0x00534f63
    50a0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    50a4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    50a8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    50ac:	73752f00 	cmnvc	r5, #0, 30
    50b0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    50b4:	63672f62 	cmnvs	r7, #392	; 0x188
    50b8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    50bc:	6f6e2d6d 	svcvs	0x006e2d6d
    50c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    50c4:	2f696261 	svccs	0x00696261
    50c8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    50cc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    50d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    50d4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    50d8:	2f656d6f 	svccs	0x00656d6f
    50dc:	70657473 	rsbvc	r7, r5, r3, ror r4
    50e0:	2f6e6568 	svccs	0x006e6568
    50e4:	6b736544 	blvs	1cde5fc <__ccfg+0x1cbe654>
    50e8:	2f706f74 	svccs	0x00706f74
    50ec:	4f534c4f 	svcmi	0x00534c4f
    50f0:	2f54454e 	svccs	0x0054454e
    50f4:	4f434950 	svcmi	0x00434950
    50f8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    50fc:	2f534f63 	svccs	0x00534f63
    5100:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5104:	2f005858 	svccs	0x00005858
    5108:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    510c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5110:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5114:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5118:	706f746b 	rsbvc	r7, pc, fp, ror #8
    511c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5120:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5124:	4349502f 	movtmi	r5, #36911	; 0x902f
    5128:	502f534f 	eorpl	r5, pc, pc, asr #6
    512c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5130:	65730000 	ldrbvs	r0, [r3, #-0]!
    5134:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 41ca <NOROM_SetupGetTrimForAmpcompCtrl+0x46>
    5138:	00632e74 	rsbeq	r2, r3, r4, ror lr
    513c:	73000001 	movwvc	r0, #1
    5140:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5144:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5148:	61000002 	tstvs	r0, r2
    514c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5150:	00030068 	andeq	r0, r3, r8, rrx
    5154:	63616d00 	cmnvs	r1, #0, 26
    5158:	00682e68 	rsbeq	r2, r8, r8, ror #28
    515c:	70000003 	andvc	r0, r0, r3
    5160:	5f736e69 	svcpl	0x00736e69
    5164:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5168:	00030068 	andeq	r0, r3, r8, rrx
    516c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5170:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5174:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5178:	0300682e 	movweq	r6, #2094	; 0x82e
    517c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5180:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5184:	00040068 	andeq	r0, r4, r8, rrx
    5188:	26050000 	strcs	r0, [r5], -r0
    518c:	98020500 	stmdals	r2, {r8, sl}
    5190:	03000026 	movweq	r0, #38	; 0x26
    5194:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    5198:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
    519c:	200d0626 	andcs	r0, sp, r6, lsr #12
    51a0:	05250e05 	streq	r0, [r5, #-3589]!	; 0xfffff1fb
    51a4:	0e051b26 	vmlaeq.f64	d1, d5, d22
    51a8:	2e050525 	cfsh32cs	mvfx0, mvfx5, #21
    51ac:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    51b0:	010d033d 	tsteq	sp, sp, lsr r3
    51b4:	76030205 	strvc	r0, [r3], -r5, lsl #4
    51b8:	0605052e 	streq	r0, [r5], -lr, lsr #10
    51bc:	06030501 	streq	r0, [r3], -r1, lsl #10
    51c0:	060a052f 	streq	r0, [sl], -pc, lsr #10
    51c4:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
    51c8:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    51cc:	01061505 	tsteq	r6, r5, lsl #10
    51d0:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    51d4:	03320603 	teqeq	r2, #3145728	; 0x300000
    51d8:	0d054a7a 	vstreq	s8, [r5, #-488]	; 0xfffffe18
    51dc:	08050106 	stmdaeq	r5, {r1, r2, r8}
    51e0:	06020520 	streq	r0, [r2], -r0, lsr #10
    51e4:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    51e8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    51ec:	052f0603 	streq	r0, [pc, #-1539]!	; 4bf1 <__aeabi_lmul+0x1c5>
    51f0:	06054002 	streq	r4, [r5], -r2
    51f4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    51f8:	0603054a 	streq	r0, [r3], -sl, asr #10
    51fc:	7a033e22 	bvc	d4a8c <__ccfg+0xb4ae4>
    5200:	03020520 	movweq	r0, #9504	; 0x2520
    5204:	0105580a 	tsteq	r5, sl, lsl #16
    5208:	05021306 	streq	r1, [r2, #-774]	; 0xfffffcfa
    520c:	c4010100 	strgt	r0, [r1], #-256	; 0xffffff00
    5210:	03000001 	movweq	r0, #1
    5214:	00012400 	andeq	r2, r1, r0, lsl #8
    5218:	fb010200 	blx	45a22 <__ccfg+0x25a7a>
    521c:	01000d0e 	tsteq	r0, lr, lsl #26
    5220:	00010101 	andeq	r0, r1, r1, lsl #2
    5224:	00010000 	andeq	r0, r1, r0
    5228:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    522c:	2f656d6f 	svccs	0x00656d6f
    5230:	70657473 	rsbvc	r7, r5, r3, ror r4
    5234:	2f6e6568 	svccs	0x006e6568
    5238:	6b736544 	blvs	1cde750 <__ccfg+0x1cbe7a8>
    523c:	2f706f74 	svccs	0x00706f74
    5240:	4f534c4f 	svcmi	0x00534c4f
    5244:	2f54454e 	svccs	0x0054454e
    5248:	4f434950 	svcmi	0x00434950
    524c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5250:	2f534f63 	svccs	0x00534f63
    5254:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5258:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    525c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    5260:	73752f00 	cmnvc	r5, #0, 30
    5264:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5268:	63672f62 	cmnvs	r7, #392	; 0x188
    526c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5270:	6f6e2d6d 	svcvs	0x006e2d6d
    5274:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5278:	2f696261 	svccs	0x00696261
    527c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5280:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5284:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5288:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    528c:	2f656d6f 	svccs	0x00656d6f
    5290:	70657473 	rsbvc	r7, r5, r3, ror r4
    5294:	2f6e6568 	svccs	0x006e6568
    5298:	6b736544 	blvs	1cde7b0 <__ccfg+0x1cbe808>
    529c:	2f706f74 	svccs	0x00706f74
    52a0:	4f534c4f 	svcmi	0x00534c4f
    52a4:	2f54454e 	svccs	0x0054454e
    52a8:	4f434950 	svcmi	0x00434950
    52ac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    52b0:	2f534f63 	svccs	0x00534f63
    52b4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    52b8:	2f005858 	svccs	0x00005858
    52bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    52c0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    52c4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    52c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    52cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    52d0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    52d4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    52d8:	4349502f 	movtmi	r5, #36911	; 0x902f
    52dc:	502f534f 	eorpl	r5, pc, pc, asr #6
    52e0:	534f6369 	movtpl	r6, #62313	; 0xf369
    52e4:	65730000 	ldrbvs	r0, [r3, #-0]!
    52e8:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    52ec:	0100632e 	tsteq	r0, lr, lsr #6
    52f0:	74730000 	ldrbtvc	r0, [r3], #-0
    52f4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    52f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    52fc:	72610000 	rsbvc	r0, r1, #0
    5300:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5304:	00000300 	andeq	r0, r0, r0, lsl #6
    5308:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    530c:	0300682e 	movweq	r6, #2094	; 0x82e
    5310:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    5314:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5318:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    531c:	00000300 	andeq	r0, r0, r0, lsl #6
    5320:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    5324:	5f736e6f 	svcpl	0x00736e6f
    5328:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    532c:	00030068 	andeq	r0, r3, r8, rrx
    5330:	73797300 	cmnvc	r9, #0, 6
    5334:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5338:	00000400 	andeq	r0, r0, r0, lsl #8
    533c:	002a0500 	eoreq	r0, sl, r0, lsl #10
    5340:	27040205 	strcs	r0, [r4, -r5, lsl #4]
    5344:	0c030000 	stceq	0, cr0, [r3], {-0}
    5348:	16020501 	strne	r0, [r2], -r1, lsl #10
    534c:	062a0514 			; <UNDEFINED> instruction: 0x062a0514
    5350:	20017a03 	andcs	r7, r1, r3, lsl #20
    5354:	05340505 	ldreq	r0, [r4, #-1285]!	; 0xfffffafb
    5358:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    535c:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    5360:	03052e05 	movweq	r2, #24069	; 0x5e05
    5364:	0f052106 	svceq	0x00052106
    5368:	06050106 	streq	r0, [r5], -r6, lsl #2
    536c:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    5370:	060b0521 	streq	r0, [fp], -r1, lsr #10
    5374:	06040501 	streq	r0, [r4], -r1, lsl #10
    5378:	0607054b 	streq	r0, [r7], -fp, asr #10
    537c:	06050501 	streq	r0, [r5], -r1, lsl #10
    5380:	03053d21 	movweq	r3, #23841	; 0x5d21
    5384:	02052d16 	andeq	r2, r5, #1408	; 0x580
    5388:	0605054f 	streq	r0, [r5], -pc, asr #10
    538c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5390:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    5394:	20080501 	andcs	r0, r8, r1, lsl #10
    5398:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    539c:	01060505 	tsteq	r6, r5, lsl #10
    53a0:	21060305 	tstcs	r6, r5, lsl #6
    53a4:	01060805 	tsteq	r6, r5, lsl #16
    53a8:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    53ac:	0c053d59 	stceq	13, cr3, [r5], {89}	; 0x59
    53b0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    53b4:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    53b8:	03050106 	movweq	r0, #20742	; 0x5106
    53bc:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    53c0:	01050106 	tsteq	r5, r6, lsl #2
    53c4:	06030522 	streq	r0, [r3], -r2, lsr #10
    53c8:	052e7503 	streq	r7, [lr, #-1283]!	; 0xfffffafd
    53cc:	0301060a 	movweq	r0, #5642	; 0x160a
    53d0:	07024a6e 	streq	r4, [r2, -lr, ror #20]
    53d4:	a1010100 	mrsge	r0, (UNDEF: 17)
    53d8:	03000001 	movweq	r0, #1
    53dc:	00014000 	andeq	r4, r1, r0
    53e0:	fb010200 	blx	45bea <__ccfg+0x25c42>
    53e4:	01000d0e 	tsteq	r0, lr, lsl #26
    53e8:	00010101 	andeq	r0, r1, r1, lsl #2
    53ec:	00010000 	andeq	r0, r1, r0
    53f0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    53f4:	2f656d6f 	svccs	0x00656d6f
    53f8:	70657473 	rsbvc	r7, r5, r3, ror r4
    53fc:	2f6e6568 	svccs	0x006e6568
    5400:	6b736544 	blvs	1cde918 <__ccfg+0x1cbe970>
    5404:	2f706f74 	svccs	0x00706f74
    5408:	4f534c4f 	svcmi	0x00534c4f
    540c:	2f54454e 	svccs	0x0054454e
    5410:	4f434950 	svcmi	0x00434950
    5414:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5418:	2f534f63 	svccs	0x00534f63
    541c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5420:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    5424:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    5428:	73752f00 	cmnvc	r5, #0, 30
    542c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5430:	63672f62 	cmnvs	r7, #392	; 0x188
    5434:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5438:	6f6e2d6d 	svcvs	0x006e2d6d
    543c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5440:	2f696261 	svccs	0x00696261
    5444:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5448:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    544c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5450:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    5454:	2f656d6f 	svccs	0x00656d6f
    5458:	70657473 	rsbvc	r7, r5, r3, ror r4
    545c:	2f6e6568 	svccs	0x006e6568
    5460:	6b736544 	blvs	1cde978 <__ccfg+0x1cbe9d0>
    5464:	2f706f74 	svccs	0x00706f74
    5468:	4f534c4f 	svcmi	0x00534c4f
    546c:	2f54454e 	svccs	0x0054454e
    5470:	4f434950 	svcmi	0x00434950
    5474:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5478:	2f534f63 	svccs	0x00534f63
    547c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5480:	2f005858 	svccs	0x00005858
    5484:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5488:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    548c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5490:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5494:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5498:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    549c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    54a0:	4349502f 	movtmi	r5, #36911	; 0x902f
    54a4:	502f534f 	eorpl	r5, pc, pc, asr #6
    54a8:	534f6369 	movtpl	r6, #62313	; 0xf369
    54ac:	65730000 	ldrbvs	r0, [r3, #-0]!
    54b0:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 4546 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    54b4:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    54b8:	00000100 	andeq	r0, r0, r0, lsl #2
    54bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    54c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    54c4:	00000200 	andeq	r0, r0, r0, lsl #4
    54c8:	61647473 	smcvs	18243	; 0x4743
    54cc:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    54d0:	00000200 	andeq	r0, r0, r0, lsl #4
    54d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    54d8:	0300682e 	movweq	r6, #2094	; 0x82e
    54dc:	616d0000 	cmnvs	sp, r0
    54e0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    54e4:	00000300 	andeq	r0, r0, r0, lsl #6
    54e8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    54ec:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    54f0:	0300682e 	movweq	r6, #2094	; 0x82e
    54f4:	75620000 	strbvc	r0, [r2, #-0]!
    54f8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    54fc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5500:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5504:	73000003 	movwvc	r0, #3
    5508:	6f697379 	svcvs	0x00697379
    550c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5510:	623c0000 	eorsvs	r0, ip, #0
    5514:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    5518:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    551c:	00000000 	andeq	r0, r0, r0
    5520:	002c0500 	eoreq	r0, ip, r0, lsl #10
    5524:	277c0205 	ldrbcs	r0, [ip, -r5, lsl #4]!
    5528:	0b030000 	bleq	c5530 <__ccfg+0xa5588>
    552c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5530:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    5534:	7a03062c 	bvc	c6dec <__ccfg+0xa6e44>
    5538:	0e052e01 	cdpeq	14, 0, cr2, cr5, cr1, {0}
    553c:	3c050526 	cfstr32cc	mvfx0, [r5], {38}	; 0x26
    5540:	30060305 	andcc	r0, r6, r5, lsl #6
    5544:	010a033d 	tsteq	sl, sp, lsr r3
    5548:	79030205 	stmdbvc	r3, {r0, r2, r9}
    554c:	060d052e 	streq	r0, [sp], -lr, lsr #10
    5550:	1e020522 	cfsh32ne	mvfx0, mvfx2, #18
    5554:	0d052206 	sfmeq	f2, 4, [r5, #-24]	; 0xffffffe8
    5558:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    555c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5560:	4e020532 	mcrmi	5, 0, r0, cr2, cr2, {1}
    5564:	01060605 	tsteq	r6, r5, lsl #12
    5568:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    556c:	3d210603 	stccc	6, cr0, [r1, #-12]!
    5570:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    5574:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5578:	01010009 	tsteq	r1, r9
    557c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    5580:	013f0003 	teqeq	pc, r3
    5584:	01020000 	mrseq	r0, (UNDEF: 2)
    5588:	000d0efb 	strdeq	r0, [sp], -fp
    558c:	01010101 	tsteq	r1, r1, lsl #2
    5590:	01000000 	mrseq	r0, (UNDEF: 0)
    5594:	2f010000 	svccs	0x00010000
    5598:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    559c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    55a0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    55a4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    55a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    55ac:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    55b0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    55b4:	4349502f 	movtmi	r5, #36911	; 0x902f
    55b8:	502f534f 	eorpl	r5, pc, pc, asr #6
    55bc:	534f6369 	movtpl	r6, #62313	; 0xf369
    55c0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    55c4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    55c8:	61697265 	cmnvs	r9, r5, ror #4
    55cc:	752f006c 	strvc	r0, [pc, #-108]!	; 5568 <patchGenfskRfe+0x22c>
    55d0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 540c <patchGenfskRfe+0xd0>
    55d4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    55d8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    55dc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    55e0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    55e4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    55e8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    55ec:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    55f0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    55f4:	2f006564 	svccs	0x00006564
    55f8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    55fc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5600:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5604:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5608:	706f746b 	rsbvc	r7, pc, fp, ror #8
    560c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5610:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5614:	4349502f 	movtmi	r5, #36911	; 0x902f
    5618:	502f534f 	eorpl	r5, pc, pc, asr #6
    561c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5620:	3143432f 	cmpcc	r3, pc, lsr #6
    5624:	00585833 	subseq	r5, r8, r3, lsr r8
    5628:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5574 <patchGenfskRfe+0x238>
    562c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5630:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5634:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5638:	6f746b73 	svcvs	0x00746b73
    563c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5640:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5644:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5648:	2f534f43 	svccs	0x00534f43
    564c:	4f636950 	svcmi	0x00636950
    5650:	73000053 	movwvc	r0, #83	; 0x53
    5654:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    5658:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
    565c:	00000100 	andeq	r0, r0, r0, lsl #2
    5660:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5664:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5668:	00000200 	andeq	r0, r0, r0, lsl #4
    566c:	61647473 	smcvs	18243	; 0x4743
    5670:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    5674:	00000200 	andeq	r0, r0, r0, lsl #4
    5678:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    567c:	0300682e 	movweq	r6, #2094	; 0x82e
    5680:	616d0000 	cmnvs	sp, r0
    5684:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5688:	00000300 	andeq	r0, r0, r0, lsl #6
    568c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    5690:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5694:	0300682e 	movweq	r6, #2094	; 0x82e
    5698:	75620000 	strbvc	r0, [r2, #-0]!
    569c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    56a0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    56a4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    56a8:	73000003 	movwvc	r0, #3
    56ac:	6f697379 	svcvs	0x00697379
    56b0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    56b4:	623c0000 	eorsvs	r0, ip, #0
    56b8:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    56bc:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    56c0:	00000000 	andeq	r0, r0, r0
    56c4:	002d0500 	eoreq	r0, sp, r0, lsl #10
    56c8:	27d00205 	ldrbcs	r0, [r0, r5, lsl #4]
    56cc:	0d030000 	stceq	0, cr0, [r3, #-0]
    56d0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    56d4:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    56d8:	01780306 	cmneq	r8, r6, lsl #6
    56dc:	3605052e 	strcc	r0, [r5], -lr, lsr #10
    56e0:	23060205 	movwcs	r0, #25093	; 0x6205
    56e4:	01061005 	tsteq	r6, r5
    56e8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    56ec:	052f0603 	streq	r0, [pc, #-1539]!	; 50f1 <__aeabi_lmul+0x6c5>
    56f0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    56f4:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    56f8:	0b052106 	bleq	14db18 <__ccfg+0x12db70>
    56fc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5700:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    5704:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5708:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    570c:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    5710:	05304f02 	ldreq	r4, [r0, #-3842]!	; 0xfffff0fe
    5714:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5718:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    571c:	01060c05 	tsteq	r6, r5, lsl #24
    5720:	30060205 	andcc	r0, r6, r5, lsl #4
    5724:	13060105 	movwne	r0, #24837	; 0x6105
    5728:	69030a05 	stmdbvs	r3, {r0, r2, r9, fp}
    572c:	00060266 	andeq	r0, r6, r6, ror #4
    5730:	0cae0101 	stfeqs	f0, [lr], #4
    5734:	00030000 	andeq	r0, r3, r0
    5738:	0000029e 	muleq	r0, lr, r2
    573c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5740:	0101000d 	tsteq	r1, sp
    5744:	00000101 	andeq	r0, r0, r1, lsl #2
    5748:	00000100 	andeq	r0, r0, r0, lsl #2
    574c:	6f682f01 	svcvs	0x00682f01
    5750:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5754:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5758:	442f6e65 	strtmi	r6, [pc], #-3685	; 5760 <patchGenfskRfe+0x424>
    575c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5760:	4f2f706f 	svcmi	0x002f706f
    5764:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5768:	502f5445 	eorpl	r5, pc, r5, asr #8
    576c:	534f4349 	movtpl	r4, #62281	; 0xf349
    5770:	6369502f 	cmnvs	r9, #47	; 0x2f
    5774:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5778:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    577c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    5780:	2f656d6f 	svccs	0x00656d6f
    5784:	70657473 	rsbvc	r7, r5, r3, ror r4
    5788:	2f6e6568 	svccs	0x006e6568
    578c:	6b736544 	blvs	1cdeca4 <__ccfg+0x1cbecfc>
    5790:	2f706f74 	svccs	0x00706f74
    5794:	4f534c4f 	svcmi	0x00534c4f
    5798:	2f54454e 	svccs	0x0054454e
    579c:	4f434950 	svcmi	0x00434950
    57a0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    57a4:	2f534f63 	svccs	0x00534f63
    57a8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    57ac:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    57b0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    57b4:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    57b8:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    57bc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    57c0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    57c4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5710 <patchGenfskRfe+0x3d4>
    57c8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    57cc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    57d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    57d4:	6f746b73 	svcvs	0x00746b73
    57d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    57dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    57e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    57e4:	2f534f43 	svccs	0x00534f43
    57e8:	4f636950 	svcmi	0x00636950
    57ec:	43432f53 	movtmi	r2, #16211	; 0x3f53
    57f0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    57f4:	3143432f 	cmpcc	r3, pc, lsr #6
    57f8:	57585833 	smmlarpl	r8, r3, r8, r5
    57fc:	2f455241 	svccs	0x00455241
    5800:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    5804:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    5808:	2f007365 	svccs	0x00007365
    580c:	2f727375 	svccs	0x00727375
    5810:	2f62696c 	svccs	0x0062696c
    5814:	2f636367 	svccs	0x00636367
    5818:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    581c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5820:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5824:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5828:	2f312e32 	svccs	0x00312e32
    582c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5830:	00656475 	rsbeq	r6, r5, r5, ror r4
    5834:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5838:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    583c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5840:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5844:	2f62696c 	svccs	0x0062696c
    5848:	00737973 	rsbseq	r7, r3, r3, ror r9
    584c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5798 <patchGenfskRfe+0x45c>
    5850:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5854:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5858:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    585c:	6f746b73 	svcvs	0x00746b73
    5860:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5864:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5868:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    586c:	2f534f43 	svccs	0x00534f43
    5870:	4f636950 	svcmi	0x00636950
    5874:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    5878:	2f656d6f 	svccs	0x00656d6f
    587c:	70657473 	rsbvc	r7, r5, r3, ror r4
    5880:	2f6e6568 	svccs	0x006e6568
    5884:	6b736544 	blvs	1cded9c <__ccfg+0x1cbedf4>
    5888:	2f706f74 	svccs	0x00706f74
    588c:	4f534c4f 	svcmi	0x00534c4f
    5890:	2f54454e 	svccs	0x0054454e
    5894:	4f434950 	svcmi	0x00434950
    5898:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    589c:	2f534f63 	svccs	0x00534f63
    58a0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    58a4:	00006c65 	andeq	r6, r0, r5, ror #24
    58a8:	72706672 	rsbsvc	r6, r0, #119537664	; 0x7200000
    58ac:	632e706f 			; <UNDEFINED> instruction: 0x632e706f
    58b0:	00000100 	andeq	r0, r0, r0, lsl #2
    58b4:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    58b8:	00020068 	andeq	r0, r2, r8, rrx
    58bc:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    58c0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    58c4:	72000002 	andvc	r0, r0, #2
    58c8:	61705f66 	cmnvs	r0, r6, ror #30
    58cc:	5f686374 	svcpl	0x00686374
    58d0:	5f657063 	svcpl	0x00657063
    58d4:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    58d8:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    58dc:	00000300 	andeq	r0, r0, r0, lsl #6
    58e0:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    58e4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    58e8:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    58ec:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    58f0:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    58f4:	00030068 	andeq	r0, r3, r8, rrx
    58f8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    58fc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5900:	00040068 	andeq	r0, r4, r8, rrx
    5904:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5908:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    590c:	00040068 	andeq	r0, r4, r8, rrx
    5910:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    5914:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5918:	00050068 	andeq	r0, r5, r8, rrx
    591c:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    5920:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5924:	00000500 	andeq	r0, r0, r0, lsl #10
    5928:	6b636f6c 	blvs	18e16e0 <__ccfg+0x18c1738>
    592c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    5930:	66720000 	ldrbtvs	r0, [r2], -r0
    5934:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    5938:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    593c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5940:	66720000 	ldrbtvs	r0, [r2], -r0
    5944:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 57d0 <patchGenfskRfe+0x494>
    5948:	5f6e6f6d 	svcpl	0x006e6f6d
    594c:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    5950:	00020068 	andeq	r0, r2, r8, rrx
    5954:	5f667200 	svcpl	0x00667200
    5958:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    595c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    5960:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5964:	66720000 	ldrbtvs	r0, [r2], -r0
    5968:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    596c:	6e655f61 	cdpvs	15, 6, cr5, cr5, cr1, {3}
    5970:	2e797274 	mrccs	2, 3, r7, cr9, cr4, {3}
    5974:	00020068 	andeq	r0, r2, r8, rrx
    5978:	63726100 	cmnvs	r2, #0, 2
    597c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5980:	6d000001 	stcvs	0, cr0, [r0, #-4]
    5984:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5988:	00010068 	andeq	r0, r1, r8, rrx
    598c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5990:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5994:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5998:	62000001 	andvs	r0, r0, #1
    599c:	6f747475 	svcvs	0x00747475
    59a0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    59a4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    59a8:	00000100 	andeq	r0, r0, r0, lsl #2
    59ac:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    59b0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    59b4:	6b000006 	blvs	59d4 <patchGenfskRfe+0x698>
    59b8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    59bc:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    59c0:	73000007 	movwvc	r0, #7
    59c4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    59c8:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    59cc:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    59d0:	2e73676e 	cdpcs	7, 7, cr6, cr3, cr14, {3}
    59d4:	00010068 	andeq	r0, r1, r8, rrx
    59d8:	17050000 	strne	r0, [r5, -r0]
    59dc:	30020500 	andcc	r0, r2, r0, lsl #10
    59e0:	03000028 	movweq	r0, #40	; 0x28
    59e4:	0501039f 	streq	r0, [r1, #-927]	; 0xfffffc61
    59e8:	38051602 	stmdacc	r5, {r1, r9, sl, ip}
    59ec:	26051406 	strcs	r1, [r5], -r6, lsl #8
    59f0:	20380520 	eorscs	r0, r8, r0, lsr #10
    59f4:	053c2605 	ldreq	r2, [ip, #-1541]!	; 0xfffff9fb
    59f8:	01051e15 	tsteq	r5, r5, lsl lr
    59fc:	00080231 	andeq	r0, r8, r1, lsr r2
    5a00:	2a050101 	bcs	145e0c <__ccfg+0x125e64>
    5a04:	50020500 	andpl	r0, r2, r0, lsl #10
    5a08:	03000028 	movweq	r0, #40	; 0x28
    5a0c:	050106c9 	streq	r0, [r1, #-1737]	; 0xfffff937
    5a10:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    5a14:	200e062a 	andcs	r0, lr, sl, lsr #12
    5a18:	08060405 	stmdaeq	r6, {r0, r2, sl}
    5a1c:	06170544 	ldreq	r0, [r7], -r4, asr #10
    5a20:	200c0501 	andcs	r0, ip, r1, lsl #10
    5a24:	20030805 	andcs	r0, r3, r5, lsl #16
    5a28:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    5a2c:	20640321 	rsbcs	r0, r4, r1, lsr #6
    5a30:	03060605 	movweq	r0, #26117	; 0x6605
    5a34:	04055875 	streq	r5, [r5], #-2165	; 0xfffff78b
    5a38:	200d0306 	andcs	r0, sp, r6, lsl #6
    5a3c:	2e9e0101 	fmlcse	f0, f6, f1
    5a40:	01054a58 	tsteq	r5, r8, asr sl
    5a44:	00fa0306 	rscseq	r0, sl, r6, lsl #6
    5a48:	06040501 	streq	r0, [r4], -r1, lsl #10
    5a4c:	207f9003 	rsbscs	r9, pc, r3
    5a50:	060b055d 			; <UNDEFINED> instruction: 0x060b055d
    5a54:	05202001 	streq	r2, [r0, #-1]!
    5a58:	052f0604 	streq	r0, [pc, #-1540]!	; 545c <patchGenfskRfe+0x120>
    5a5c:	63030606 	movwvs	r0, #13830	; 0x3606
    5a60:	06040501 	streq	r0, [r4], -r1, lsl #10
    5a64:	052e2103 	streq	r2, [lr, #-259]!	; 0xfffffefd
    5a68:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5a6c:	04052008 	streq	r2, [r5], #-8
    5a70:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    5a74:	0100e203 	tsteq	r0, r3, lsl #4
    5a78:	01060505 	tsteq	r6, r5, lsl #10
    5a7c:	2f060305 	svccs	0x00060305
    5a80:	050f0205 	streq	r0, [pc, #-517]	; 5883 <patchGenfskRfe+0x547>
    5a84:	05150608 	ldreq	r0, [r5, #-1544]	; 0xfffff9f8
    5a88:	04051d09 	streq	r1, [r5], #-3337	; 0xfffff2f7
    5a8c:	7fa40306 	svcvc	0x00a40306
    5a90:	06110520 	ldreq	r0, [r1], -r0, lsr #10
    5a94:	06040501 	streq	r0, [r4], -r1, lsl #10
    5a98:	06050541 	streq	r0, [r5], -r1, asr #10
    5a9c:	1f070513 	svcne	0x00070513
    5aa0:	21060505 	tstcs	r6, r5, lsl #10
    5aa4:	5204055b 	andpl	r0, r4, #381681664	; 0x16c00000
    5aa8:	01060705 	tsteq	r6, r5, lsl #14
    5aac:	22060505 	andcs	r0, r6, #20971520	; 0x1400000
    5ab0:	5a060101 	bpl	185ebc <__ccfg+0x165f14>
    5ab4:	0d054a06 	vstreq	s8, [r5, #-24]	; 0xffffffe8
    5ab8:	20053506 	andcs	r3, r5, r6, lsl #10
    5abc:	06050521 	streq	r0, [r5], -r1, lsr #10
    5ac0:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    5ac4:	2d080513 	cfstr32cs	mvfx0, [r8, #-76]	; 0xffffffb4
    5ac8:	2d061b05 	vstrcs	d1, [r6, #-20]	; 0xffffffec
    5acc:	01061e05 	tsteq	r6, r5, lsl #28
    5ad0:	20061205 	andcs	r1, r6, r5, lsl #4
    5ad4:	01060405 	tsteq	r6, r5, lsl #8
    5ad8:	3c100306 	ldccc	3, cr0, [r0], {6}
    5adc:	01062e05 	tsteq	r6, r5, lsl #28
    5ae0:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    5ae4:	04051f2e 	streq	r1, [r5], #-3886	; 0xfffff0d2
    5ae8:	2e053e06 	cdpcs	14, 0, cr3, cr5, cr6, {0}
    5aec:	24050106 	strcs	r0, [r5], #-262	; 0xfffffefa
    5af0:	06040520 	streq	r0, [r4], -r0, lsr #10
    5af4:	0524594b 	streq	r5, [r4, #-2379]!	; 0xfffff6b5
    5af8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5afc:	200e0308 	andcs	r0, lr, r8, lsl #6
    5b00:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    5b04:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    5b08:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5b0c:	0c052114 	stfeqs	f2, [r5], {20}
    5b10:	04052049 	streq	r2, [r5], #-73	; 0xffffffb7
    5b14:	11033006 	tstne	r3, r6
    5b18:	75032f01 	strvc	r2, [r3, #-3841]	; 0xfffff0ff
    5b1c:	060a0558 			; <UNDEFINED> instruction: 0x060a0558
    5b20:	06040501 	streq	r0, [r4], -r1, lsl #10
    5b24:	060a0536 			; <UNDEFINED> instruction: 0x060a0536
    5b28:	21060501 	tstcs	r6, r1, lsl #10
    5b2c:	2e1f0a05 	vnmlscs.f32	s0, s30, s10
    5b30:	053c2020 	ldreq	r2, [ip, #-32]!	; 0xffffffe0
    5b34:	09030604 	stmdbeq	r3, {r2, r9, sl}
    5b38:	060d0566 	streq	r0, [sp], -r6, ror #10
    5b3c:	05202001 	streq	r2, [r0, #-1]!
    5b40:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5b44:	051e060d 	ldreq	r0, [lr, #-1549]	; 0xfffff9f3
    5b48:	02420604 	subeq	r0, r2, #4, 12	; 0x400000
    5b4c:	0101001f 	tsteq	r1, pc, lsl r0
    5b50:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
    5b54:	0029e002 	eoreq	lr, r9, r2
    5b58:	01c40300 	biceq	r0, r4, r0, lsl #6
    5b5c:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5b60:	06230515 			; <UNDEFINED> instruction: 0x06230515
    5b64:	20017803 	andcs	r7, r1, r3, lsl #16
    5b68:	03060205 	movweq	r0, #25093	; 0x6205
    5b6c:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    5b70:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    5b74:	3c0c0501 	cfstr32cc	mvfx0, [ip], {1}
    5b78:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5b7c:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    5b80:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5b84:	06300604 	ldrteq	r0, [r0], -r4, lsl #12
    5b88:	06030526 	streq	r0, [r3], -r6, lsr #10
    5b8c:	0606053a 			; <UNDEFINED> instruction: 0x0606053a
    5b90:	06040501 	streq	r0, [r4], -r1, lsl #10
    5b94:	03054b2f 	movweq	r4, #23343	; 0x5b2f
    5b98:	03080531 	movweq	r0, #34097	; 0x8531
    5b9c:	06053c71 			; <UNDEFINED> instruction: 0x06053c71
    5ba0:	01051306 	tsteq	r5, r6, lsl #6
    5ba4:	02201003 	eoreq	r1, r0, #3
    5ba8:	01010009 	tsteq	r1, r9
    5bac:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    5bb0:	002a2802 	eoreq	r2, sl, r2, lsl #16
    5bb4:	03940300 	orrseq	r0, r4, #0, 6
    5bb8:	16020501 	strne	r0, [r2], -r1, lsl #10
    5bbc:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    5bc0:	05240e05 	streq	r0, [r4, #-3589]!	; 0xfffff1fb
    5bc4:	02052005 	andeq	r2, r5, #5
    5bc8:	053d3f06 	ldreq	r3, [sp, #-3846]!	; 0xfffff0fa
    5bcc:	024b0601 	subeq	r0, fp, #1048576	; 0x100000
    5bd0:	01010006 	tsteq	r1, r6
    5bd4:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    5bd8:	002a4c02 	eoreq	r4, sl, r2, lsl #24
    5bdc:	02e00300 	rsceq	r0, r0, #0, 6
    5be0:	16020501 	strne	r0, [r2], -r1, lsl #10
    5be4:	0e061705 	cdpeq	7, 0, cr1, cr6, cr5, {0}
    5be8:	05240e05 	streq	r0, [r4, #-3589]!	; 0xfffff1fb
    5bec:	02052005 	andeq	r2, r5, #5
    5bf0:	02043f06 	andeq	r3, r4, #6, 30
    5bf4:	03063505 	movweq	r3, #25861	; 0x6505
    5bf8:	04017eb9 	streq	r7, [r1], #-3769	; 0xfffff147
    5bfc:	03020501 	movweq	r0, #9473	; 0x2501
    5c00:	062001c7 	strteq	r0, [r0], -r7, asr #3
    5c04:	04303f5a 	ldrteq	r3, [r0], #-3930	; 0xfffff0a6
    5c08:	03050502 	movweq	r0, #21762	; 0x5502
    5c0c:	05017eb2 	streq	r7, [r1, #-3762]	; 0xfffff14e
    5c10:	04010635 	streq	r0, [r1], #-1589	; 0xfffff9cb
    5c14:	03020501 	movweq	r0, #9473	; 0x2501
    5c18:	042001d0 	strteq	r0, [r0], #-464	; 0xfffffe30
    5c1c:	03350502 	teqeq	r5, #8388608	; 0x800000
    5c20:	04207eb0 	strteq	r7, [r0], #-3760	; 0xfffff150
    5c24:	06020501 	streq	r0, [r2], -r1, lsl #10
    5c28:	2001d003 	andcs	sp, r1, r3
    5c2c:	06480531 			; <UNDEFINED> instruction: 0x06480531
    5c30:	06020501 	streq	r0, [r2], -r1, lsl #10
    5c34:	04013131 	streq	r3, [r1], #-305	; 0xfffffecf
    5c38:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5c3c:	0505015f 	streq	r0, [r5, #-351]	; 0xfffffea1
    5c40:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5c44:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c48:	1c030602 	stcne	6, cr0, [r3], {2}
    5c4c:	0503044a 	streq	r0, [r3, #-1098]	; 0xfffffbb6
    5c50:	015f0329 	cmpeq	pc, r9, lsr #6
    5c54:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    5c58:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    5c5c:	06020501 	streq	r0, [r2], -r1, lsl #10
    5c60:	142e1c03 	strtne	r1, [lr], #-3075	; 0xfffff3fd
    5c64:	0101014b 	tsteq	r1, fp, asr #2
    5c68:	01050101 	tsteq	r5, r1, lsl #2
    5c6c:	0b021306 	bleq	8a88c <__ccfg+0x6a8e4>
    5c70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5c74:	0205000d 	andeq	r0, r5, #13
    5c78:	00002aa8 	andeq	r2, r0, r8, lsr #21
    5c7c:	0101e103 	tsteq	r1, r3, lsl #2
    5c80:	02052006 	andeq	r2, r5, #6
    5c84:	03054f06 	movweq	r4, #24326	; 0x5f06
    5c88:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5c8c:	20060501 	andcs	r0, r6, r1, lsl #10
    5c90:	31060305 	tstcc	r6, r5, lsl #6
    5c94:	01060605 	tsteq	r6, r5, lsl #12
    5c98:	30060405 	andcc	r0, r6, r5, lsl #8
    5c9c:	4c03055b 	cfstr32mi	mvfx0, [r3], {91}	; 0x5b
    5ca0:	75030805 	strvc	r0, [r3, #-2053]	; 0xfffff7fb
    5ca4:	0606053c 			; <UNDEFINED> instruction: 0x0606053c
    5ca8:	03010513 	movweq	r0, #5395	; 0x1513
    5cac:	0502200c 	streq	r2, [r2, #-12]
    5cb0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5cb4:	0205000d 	andeq	r0, r5, #13
    5cb8:	00002ae0 	andeq	r2, r0, r0, ror #21
    5cbc:	0101fe03 	tsteq	r1, r3, lsl #28	; <UNPREDICTABLE>
    5cc0:	09030205 	stmdbeq	r3, {r0, r2, r9}
    5cc4:	03040101 	movweq	r0, #16641	; 0x4101
    5cc8:	1b032905 	blne	d00e4 <__ccfg+0xb013c>
    5ccc:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5cd0:	01062d05 	tsteq	r6, r5, lsl #26
    5cd4:	0d050104 	stfeqs	f0, [r5, #-16]
    5cd8:	043c5703 	ldrteq	r5, [ip], #-1795	; 0xfffff8fd
    5cdc:	032d0503 			; <UNDEFINED> instruction: 0x032d0503
    5ce0:	01042e29 	tsteq	r4, r9, lsr #28
    5ce4:	03060205 	movweq	r0, #25093	; 0x6205
    5ce8:	03042060 	movweq	r2, #16480	; 0x4060
    5cec:	1b032905 	blne	d0108 <__ccfg+0xb0160>
    5cf0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5cf4:	01062d05 	tsteq	r6, r5, lsl #26
    5cf8:	02050104 	andeq	r0, r5, #4, 2
    5cfc:	2e600306 	cdpcs	3, 6, cr0, cr0, cr6, {0}
    5d00:	07052f19 	smladeq	r5, r9, pc, r2	; <UNPREDICTABLE>
    5d04:	3c1c0501 	cfldr32cc	mvfx0, [ip], {1}
    5d08:	01061e05 	tsteq	r6, r5, lsl #28
    5d0c:	062e0205 	strteq	r0, [lr], -r5, lsl #4
    5d10:	06480531 			; <UNDEFINED> instruction: 0x06480531
    5d14:	32020501 	andcc	r0, r2, #4194304	; 0x400000
    5d18:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    5d1c:	31240602 			; <UNDEFINED> instruction: 0x31240602
    5d20:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    5d24:	017ee403 	cmneq	lr, r3, lsl #8
    5d28:	01063505 	tsteq	r6, r5, lsl #10
    5d2c:	02050104 	andeq	r0, r5, #4, 2
    5d30:	3c019f03 	stccc	15, cr9, [r1], {3}
    5d34:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5d38:	207ee103 	rsbscs	lr, lr, r3, lsl #2
    5d3c:	02050104 	andeq	r0, r5, #4, 2
    5d40:	019f0306 	orrseq	r0, pc, r6, lsl #6
    5d44:	04043220 	streq	r3, [r4], #-544	; 0xfffffde0
    5d48:	10030405 	andne	r0, r3, r5, lsl #8
    5d4c:	01730301 	cmneq	r3, r1, lsl #6
    5d50:	6b030105 	blvs	c616c <__ccfg+0xa61c4>
    5d54:	03040501 	movweq	r0, #17665	; 0x4501
    5d58:	61030116 	tstvs	r3, r6, lsl r1
    5d5c:	1d031501 	cfstr32ne	mvfx1, [r3, #-4]
    5d60:	016d0366 	cmneq	sp, r6, ror #6
    5d64:	12051513 	andne	r1, r5, #79691776	; 0x4c00000
    5d68:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
    5d6c:	f1030405 			; <UNDEFINED> instruction: 0xf1030405
    5d70:	04042e01 	streq	r2, [r4], #-3585	; 0xfffff1ff
    5d74:	8f031205 	svchi	0x00031205
    5d78:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    5d7c:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
    5d80:	053d1306 	ldreq	r1, [sp, #-774]!	; 0xfffffcfa
    5d84:	052f3d13 	streq	r3, [pc, #-3347]!	; 5079 <__aeabi_lmul+0x64d>
    5d88:	11052f12 	tstne	r5, r2, lsl pc
    5d8c:	0312053e 	tsteq	r2, #260046848	; 0xf800000
    5d90:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    5d94:	13132f06 	tstne	r3, #6, 30
    5d98:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    5d9c:	04010611 	streq	r0, [r1], #-1553	; 0xfffff9ef
    5da0:	031c0505 	tsteq	ip, #20971520	; 0x1400000
    5da4:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
    5da8:	04051f14 	streq	r1, [r5], #-3860	; 0xfffff0ec
    5dac:	07052506 	streq	r2, [r5, -r6, lsl #10]
    5db0:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5db4:	07051b18 	smladeq	r5, r8, fp, r1
    5db8:	0a052f06 	beq	1519d8 <__ccfg+0x131a30>
    5dbc:	07051306 	streq	r1, [r5, -r6, lsl #6]
    5dc0:	0a052f06 	beq	1519e0 <__ccfg+0x131a38>
    5dc4:	07051306 	streq	r1, [r5, -r6, lsl #6]
    5dc8:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    5dcc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5dd0:	2f2f210d 	svccs	0x002f210d
    5dd4:	2121212f 			; <UNDEFINED> instruction: 0x2121212f
    5dd8:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
    5ddc:	78030607 	stmdavc	r3, {r0, r1, r2, r9, sl}
    5de0:	1313133c 	tstne	r3, #60, 6	; 0xf0000000
    5de4:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5de8:	2e060d05 	cdpcs	13, 0, cr0, cr6, cr5, {0}
    5dec:	21060c05 	tstcs	r6, r5, lsl #24
    5df0:	01060405 	tsteq	r6, r5, lsl #8
    5df4:	13132206 	tstne	r3, #1610612736	; 0x60000000
    5df8:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
    5dfc:	0401060a 	streq	r0, [r1], #-1546	; 0xfffff9f6
    5e00:	03090501 	movweq	r0, #38145	; 0x9501
    5e04:	04207e95 	strteq	r7, [r0], #-3733	; 0xfffff16b
    5e08:	030a0505 	movweq	r0, #42245	; 0xa505
    5e0c:	052001eb 	streq	r0, [r0, #-491]!	; 0xfffffe15
    5e10:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5e14:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5e18:	052f0604 	streq	r0, [pc, #-1540]!	; 581c <patchGenfskRfe+0x4e0>
    5e1c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5e20:	052f0604 	streq	r0, [pc, #-1540]!	; 5824 <patchGenfskRfe+0x4e8>
    5e24:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5e28:	052f0604 	streq	r0, [pc, #-1540]!	; 582c <patchGenfskRfe+0x4f0>
    5e2c:	0401060a 	streq	r0, [r1], #-1546	; 0xfffff9f6
    5e30:	06090501 	streq	r0, [r9], -r1, lsl #10
    5e34:	2e7e9103 	expcse	f1, f3
    5e38:	05360205 	ldreq	r0, [r6, #-517]!	; 0xfffffdfb
    5e3c:	02053f09 	andeq	r3, r5, #9, 30	; 0x24
    5e40:	3e3c1203 	cdpcc	2, 3, cr1, cr12, cr3, {0}
    5e44:	5a3d435c 	bpl	f56bbc <__ccfg+0xf36c14>
    5e48:	1b250613 	blne	94769c <__ccfg+0x9276f4>
    5e4c:	30056906 	andcc	r6, r5, r6, lsl #18
    5e50:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5e54:	2d053d06 	stccs	13, cr3, [r5, #-24]	; 0xffffffe8
    5e58:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5e5c:	2d052f06 	stccs	15, cr2, [r5, #-24]	; 0xffffffe8
    5e60:	02051f06 	andeq	r1, r5, #6, 30
    5e64:	28010521 	stmdacs	r1, {r0, r5, r8, sl}
    5e68:	78030205 	stmdavc	r3, {r0, r2, r9}
    5e6c:	0033022e 	eorseq	r0, r3, lr, lsr #4
    5e70:	1e050101 	adfnes	f0, f5, f1
    5e74:	60020500 	andvs	r0, r2, r0, lsl #10
    5e78:	0300002c 	movweq	r0, #44	; 0x2c
    5e7c:	050103b4 	streq	r0, [r1, #-948]	; 0xfffffc4c
    5e80:	03131402 	tsteq	r3, #33554432	; 0x2000000
    5e84:	02040109 	andeq	r0, r4, #1073741826	; 0x40000002
    5e88:	ee030305 	cdp	3, 0, cr0, cr3, cr5, {0}
    5e8c:	0104017d 	tsteq	r4, sp, ror r1
    5e90:	03061e05 	movweq	r1, #28165	; 0x6e05
    5e94:	04010286 	streq	r0, [r1], #-646	; 0xfffffd7a
    5e98:	03300502 	teqeq	r0, #8388608	; 0x800000
    5e9c:	052e7dfa 	streq	r7, [lr, #-3578]!	; 0xfffff206
    5ea0:	03057b32 	movweq	r7, #23346	; 0x5b32
    5ea4:	05052906 	streq	r2, [r5, #-2310]	; 0xfffff6fa
    5ea8:	06320517 			; <UNDEFINED> instruction: 0x06320517
    5eac:	06090501 	streq	r0, [r9], -r1, lsl #10
    5eb0:	060a0521 	streq	r0, [sl], -r1, lsr #10
    5eb4:	20030501 	andcs	r0, r3, r1, lsl #10
    5eb8:	01043306 	tsteq	r4, r6, lsl #6
    5ebc:	03060a05 	movweq	r0, #27141	; 0x6a05
    5ec0:	0401028b 	streq	r0, [r1], #-651	; 0xfffffd75
    5ec4:	03300502 	teqeq	r0, #8388608	; 0x800000
    5ec8:	04207df5 	strteq	r7, [r0], #-3573	; 0xfffff20b
    5ecc:	03050501 	movweq	r0, #21761	; 0x5501
    5ed0:	0420029e 	strteq	r0, [r0], #-670	; 0xfffffd62
    5ed4:	03300502 	teqeq	r0, #8388608	; 0x800000
    5ed8:	04207de2 	strteq	r7, [r0], #-3554	; 0xfffff21e
    5edc:	032d0501 			; <UNDEFINED> instruction: 0x032d0501
    5ee0:	04200291 	strteq	r0, [r0], #-657	; 0xfffffd6f
    5ee4:	03300502 	teqeq	r0, #8388608	; 0x800000
    5ee8:	042e7def 	strteq	r7, [lr], #-3567	; 0xfffff211
    5eec:	06020501 	streq	r0, [r2], -r1, lsl #10
    5ef0:	58028b03 	stmdapl	r2, {r0, r1, r8, r9, fp, pc}
    5ef4:	01062705 	tsteq	r6, r5, lsl #14
    5ef8:	0f030505 	svceq	0x00030505
    5efc:	030a0520 	movweq	r0, #42272	; 0xa520
    5f00:	06052e71 			; <UNDEFINED> instruction: 0x06052e71
    5f04:	03052f06 	movweq	r2, #24326	; 0x5f06
    5f08:	06060513 			; <UNDEFINED> instruction: 0x06060513
    5f0c:	06040501 	streq	r0, [r4], -r1, lsl #10
    5f10:	1301013d 	movwne	r0, #4413	; 0x113d
    5f14:	14061905 	strne	r1, [r6], #-2309	; 0xfffff6fb
    5f18:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
    5f1c:	0705201d 	smladeq	r5, sp, r0, r2
    5f20:	1e060520 	cfsh32ne	mvfx0, mvfx6, #16
    5f24:	30060405 	andcc	r0, r6, r5, lsl #8
    5f28:	01060705 	tsteq	r6, r5, lsl #14
    5f2c:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    5f30:	05054a37 	streq	r4, [r5, #-2615]	; 0xfffff5c9
    5f34:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    5f38:	08051606 	stmdaeq	r5, {r1, r2, r9, sl, ip}
    5f3c:	0605052a 	streq	r0, [r5], -sl, lsr #10
    5f40:	061f0524 	ldreq	r0, [pc], -r4, lsr #10
    5f44:	20130501 	andscs	r0, r3, r1, lsl #10
    5f48:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    5f4c:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
    5f50:	0f052106 	svceq	0x00052106
    5f54:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5f58:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
    5f5c:	060f056e 	streq	r0, [pc], -lr, ror #10
    5f60:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    5f64:	052e6a03 	streq	r6, [lr, #-2563]!	; 0xfffff5fd
    5f68:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5f6c:	1b051106 	blne	14a38c <__ccfg+0x12a3e4>
    5f70:	0605052f 	streq	r0, [r5], -pc, lsr #10
    5f74:	053c1203 	ldreq	r1, [ip, #-515]!	; 0xfffffdfd
    5f78:	4a0a0302 	bmi	286b88 <__ccfg+0x266be0>
    5f7c:	01060505 	tsteq	r6, r5, lsl #10
    5f80:	21060305 	tstcs	r6, r5, lsl #6
    5f84:	01140101 	tsteq	r4, r1, lsl #2
    5f88:	06010501 	streq	r0, [r1], -r1, lsl #10
    5f8c:	2b030531 	blcs	c7458 <__ccfg+0xa74b0>
    5f90:	02690105 	rsbeq	r0, r9, #1073741825	; 0x40000001
    5f94:	01010013 	tsteq	r1, r3, lsl r0
    5f98:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5f9c:	002d3002 	eoreq	r3, sp, r2
    5fa0:	048c0300 	streq	r0, [ip], #768	; 0x300
    5fa4:	2e060101 	adfcss	f0, f6, f1
    5fa8:	03060305 	movweq	r0, #25349	; 0x6305
    5fac:	0705820a 	streq	r8, [r5, -sl, lsl #4]
    5fb0:	06050106 	streq	r0, [r5], -r6, lsl #2
    5fb4:	06040520 	streq	r0, [r4], -r0, lsr #10
    5fb8:	0305304c 	movweq	r3, #20556	; 0x504c
    5fbc:	060e054f 	streq	r0, [lr], -pc, asr #10
    5fc0:	20060501 	andcs	r0, r6, r1, lsl #10
    5fc4:	4b060405 	blmi	186fe0 <__ccfg+0x167038>
    5fc8:	01060705 	tsteq	r6, r5, lsl #14
    5fcc:	21060505 	tstcs	r6, r5, lsl #10
    5fd0:	05360305 	ldreq	r0, [r6, #-773]!	; 0xfffffcfb
    5fd4:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5fd8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    5fdc:	24053d06 	strcs	r3, [r5], #-3334	; 0xfffff2fa
    5fe0:	1b050106 	blne	146400 <__ccfg+0x126458>
    5fe4:	20070558 	andcs	r0, r7, r8, asr r5
    5fe8:	33060505 	movwcc	r0, #25861	; 0x6505
    5fec:	0c051306 	stceq	3, cr1, [r5], {6}
    5ff0:	2105051f 	tstcs	r5, pc, lsl r5
    5ff4:	051f0c05 	ldreq	r0, [pc, #-3077]	; 53f7 <patchGenfskRfe+0xbb>
    5ff8:	0c052105 	stfeqs	f2, [r5], {5}
    5ffc:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    6000:	20060121 	andcs	r0, r6, r1, lsr #2
    6004:	052e062e 	streq	r0, [lr, #-1582]!	; 0xfffff9d2
    6008:	4a72030a 	bmi	1c86c38 <__ccfg+0x1c66c90>
    600c:	01060d05 	tsteq	r6, r5, lsl #26
    6010:	30060405 	andcc	r0, r6, r5, lsl #8
    6014:	de030205 	cdple	2, 0, cr0, cr3, cr5, {0}
    6018:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    601c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6020:	01880306 	orreq	r0, r8, r6, lsl #6
    6024:	0627052e 	strteq	r0, [r7], -lr, lsr #10
    6028:	200a0501 	andcs	r0, sl, r1, lsl #10
    602c:	2f060605 	svccs	0x00060605
    6030:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    6034:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    6038:	052d0613 	streq	r0, [sp, #-1555]!	; 0xfffff9ed
    603c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    6040:	05200606 	streq	r0, [r0, #-1542]!	; 0xfffff9fa
    6044:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    6048:	13050106 	movwne	r0, #20742	; 0x5106
    604c:	06051f06 	streq	r1, [r5], -r6, lsl #30
    6050:	16020501 	strne	r0, [r2], -r1, lsl #10
    6054:	74470330 	strbvc	r0, [r7], #-816	; 0xfffffcd0
    6058:	04050101 	streq	r0, [r5], #-257	; 0xfffffeff
    605c:	0101cd03 	tsteq	r1, r3, lsl #26
    6060:	de030205 	cdple	2, 0, cr0, cr3, cr5, {0}
    6064:	1413017e 	ldrne	r0, [r3], #-382	; 0xfffffe82
    6068:	01060505 	tsteq	r6, r5, lsl #10
    606c:	01aa0306 			; <UNDEFINED> instruction: 0x01aa0306
    6070:	0101154a 	tsteq	r1, sl, asr #10
    6074:	06080514 			; <UNDEFINED> instruction: 0x06080514
    6078:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    607c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    6080:	05220606 	streq	r0, [r2, #-1542]!	; 0xfffff9fa
    6084:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    6088:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    608c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    6090:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    6094:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6098:	4b300604 	blmi	c078b0 <__ccfg+0xbe7908>
    609c:	01060f05 	tsteq	r6, r5, lsl #30
    60a0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    60a4:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    60a8:	0b053504 	bleq	1534c0 <__ccfg+0x133518>
    60ac:	060e052a 	streq	r0, [lr], -sl, lsr #10
    60b0:	06050501 	streq	r0, [r5], -r1, lsl #10
    60b4:	6b030530 	blvs	c757c <__ccfg+0xa75d4>
    60b8:	01060705 	tsteq	r6, r5, lsl #14
    60bc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    60c0:	59330604 	ldmdbpl	r3!, {r2, r9, sl}
    60c4:	0607054b 	streq	r0, [r7], -fp, asr #10
    60c8:	06030501 	streq	r0, [r3], -r1, lsl #10
    60cc:	054a1003 	strbeq	r1, [sl, #-3]
    60d0:	7d9e0302 	ldcvc	3, cr0, [lr, #8]
    60d4:	06050501 	streq	r0, [r5], -r1, lsl #10
    60d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    60dc:	5800d603 	stmdapl	r0, {r0, r1, r9, sl, ip, lr, pc}
    60e0:	03050101 	movweq	r0, #20737	; 0x5101
    60e4:	01028d03 	tsteq	r2, r3, lsl #26
    60e8:	052e1e03 	streq	r1, [lr, #-3587]!	; 0xfffff1fd
    60ec:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    60f0:	19052131 	stmdbne	r5, {r0, r4, r5, r8, sp}
    60f4:	0603052d 	streq	r0, [r3], -sp, lsr #10
    60f8:	06310521 	ldrteq	r0, [r1], -r1, lsr #10
    60fc:	22030501 	andcs	r0, r3, #4194304	; 0x400000
    6100:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    6104:	32220603 	eorcc	r0, r2, #3145728	; 0x300000
    6108:	01060705 	tsteq	r6, r5, lsl #14
    610c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    6110:	055b0603 	ldrbeq	r0, [fp, #-1539]	; 0xfffff9fd
    6114:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    6118:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    611c:	03053106 	movweq	r3, #20742	; 0x5106
    6120:	06130541 	ldreq	r0, [r3], -r1, asr #10
    6124:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    6128:	4b060405 	blmi	187144 <__ccfg+0x16719c>
    612c:	01060705 	tsteq	r6, r5, lsl #14
    6130:	41060505 	tstmi	r6, r5, lsl #10
    6134:	01061b05 	tsteq	r6, r5, lsl #22
    6138:	2f060505 	svccs	0x00060505
    613c:	01063305 	tsteq	r6, r5, lsl #6
    6140:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    6144:	3f04052f 	svccc	0x0004052f
    6148:	01060b05 	tsteq	r6, r5, lsl #22
    614c:	03060405 	movweq	r0, #25605	; 0x6405
    6150:	01013c09 	tsteq	r1, r9, lsl #24
    6154:	03060305 	movweq	r0, #25349	; 0x6305
    6158:	065800c3 	ldrbeq	r0, [r8], -r3, asr #1
    615c:	206d0342 	rsbcs	r0, sp, r2, asr #6
    6160:	060a053d 			; <UNDEFINED> instruction: 0x060a053d
    6164:	03030501 	movweq	r0, #13569	; 0x3501
    6168:	0a052e0c 	beq	1519a0 <__ccfg+0x1319f8>
    616c:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    6170:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    6174:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6178:	01220603 			; <UNDEFINED> instruction: 0x01220603
    617c:	0b031501 	bleq	cb588 <__ccfg+0xab5e0>
    6180:	06070520 	streq	r0, [r7], -r0, lsr #10
    6184:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    6188:	05581f05 	ldrbeq	r1, [r8, #-3845]	; 0xfffff0fb
    618c:	3e053d07 	cdpcc	13, 0, cr3, cr5, cr7, {0}
    6190:	06040549 	streq	r0, [r4], -r9, asr #10
    6194:	3f01053e 	svccc	0x0001053e
    6198:	00200201 	eoreq	r0, r0, r1, lsl #4
    619c:	1f050101 	svcne	0x00050101
    61a0:	20020500 	andcs	r0, r2, r0, lsl #10
    61a4:	0300002f 	movweq	r0, #47	; 0x2f
    61a8:	050103eb 	streq	r0, [r1, #-1003]	; 0xfffffc15
    61ac:	1f051702 	svcne	0x00051702
    61b0:	06050d06 	streq	r0, [r5], -r6, lsl #26
    61b4:	2e050525 	cfsh32cs	mvfx0, mvfx5, #21
    61b8:	23060305 	movwcs	r0, #25349	; 0x6305
    61bc:	30050204 	andcc	r0, r5, r4, lsl #4
    61c0:	7eb00306 	cdpvc	3, 11, cr0, cr0, cr6, {0}
    61c4:	06030566 	streq	r0, [r3], -r6, ror #10
    61c8:	1705051b 	smladne	r5, fp, r5, r0
    61cc:	01063005 	tsteq	r6, r5
    61d0:	21060a05 	tstcs	r6, r5, lsl #20
    61d4:	01060b05 	tsteq	r6, r5, lsl #22
    61d8:	04200305 	strteq	r0, [r0], #-773	; 0xfffffcfb
    61dc:	06020501 	streq	r0, [r2], -r1, lsl #10
    61e0:	2e01d603 	cfmadd32cs	mvax0, mvfx13, mvfx1, mvfx3
    61e4:	03050204 	movweq	r0, #20996	; 0x5204
    61e8:	017e8103 	cmneq	lr, r3, lsl #2
    61ec:	01063205 	tsteq	r6, r5, lsl #4
    61f0:	02050104 	andeq	r0, r5, #4, 2
    61f4:	20028203 	andcs	r8, r2, r3, lsl #4
    61f8:	32050204 	andcc	r0, r5, #4, 4	; 0x40000000
    61fc:	207dfe03 	rsbscs	pc, sp, r3, lsl #28
    6200:	02050104 	andeq	r0, r5, #4, 2
    6204:	2e028203 	cdpcs	2, 0, cr8, cr2, cr3, {0}
    6208:	582e8206 	stmdapl	lr!, {r1, r2, r9, pc}
    620c:	0114014a 	tsteq	r4, sl, asr #2
    6210:	06010558 			; <UNDEFINED> instruction: 0x06010558
    6214:	000d0213 	andeq	r0, sp, r3, lsl r2
    6218:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    621c:	90020500 	andls	r0, r2, r0, lsl #10
    6220:	0300002f 	movweq	r0, #47	; 0x2f
    6224:	050107d6 	streq	r0, [r1, #-2006]	; 0xfffff82a
    6228:	01090302 	tsteq	r9, r2, lsl #6
    622c:	03062505 	movweq	r2, #25861	; 0x6505
    6230:	0d050177 	stfeqs	f0, [r5, #-476]	; 0xfffffe24
    6234:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    6238:	20770325 	rsbscs	r0, r7, r5, lsr #6
    623c:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
    6240:	06030520 	streq	r0, [r3], -r0, lsr #10
    6244:	05360630 	ldreq	r0, [r6, #-1584]!	; 0xfffff9d0
    6248:	7a030602 	bvc	c7a58 <__ccfg+0xa7ab0>
    624c:	0605052e 	streq	r0, [r5], -lr, lsr #10
    6250:	06020501 	streq	r0, [r2], -r1, lsl #10
    6254:	060e0524 	streq	r0, [lr], -r4, lsr #10
    6258:	20050501 	andcs	r0, r5, r1, lsl #10
    625c:	30060305 	andcc	r0, r6, r5, lsl #6
    6260:	37060705 	strcc	r0, [r6, -r5, lsl #14]
    6264:	28060205 	stmdacs	r6, {r0, r2, r9}
    6268:	03060405 	movweq	r0, #25605	; 0x6405
    626c:	05017ea1 	streq	r7, [r1, #-3745]	; 0xfffff15f
    6270:	01df0309 	bicseq	r0, pc, r9, lsl #6
    6274:	030e0520 	movweq	r0, #58656	; 0xe520
    6278:	052e7eac 	streq	r7, [lr, #-3756]!	; 0xfffff154
    627c:	0b052813 	bleq	1502d0 <__ccfg+0x130328>
    6280:	2e01cc03 	cdpcs	12, 0, cr12, cr1, cr3, {0}
    6284:	23060205 	movwcs	r0, #25093	; 0x6205
    6288:	017e9b03 	cmneq	lr, r3, lsl #22
    628c:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
    6290:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
    6294:	03051306 	movweq	r1, #21254	; 0x5306
    6298:	06055d06 	streq	r5, [r5], -r6, lsl #26
    629c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    62a0:	03052f06 	movweq	r2, #24326	; 0x5f06
    62a4:	060e055a 			; <UNDEFINED> instruction: 0x060e055a
    62a8:	06030501 	streq	r0, [r3], -r1, lsl #10
    62ac:	06060530 			; <UNDEFINED> instruction: 0x06060530
    62b0:	06040501 	streq	r0, [r4], -r1, lsl #10
    62b4:	06130530 			; <UNDEFINED> instruction: 0x06130530
    62b8:	06030501 	streq	r0, [r3], -r1, lsl #10
    62bc:	05131332 	ldreq	r1, [r3, #-818]	; 0xfffffcce
    62c0:	05140606 	ldreq	r0, [r4, #-1542]	; 0xfffff9fa
    62c4:	06051f17 			; <UNDEFINED> instruction: 0x06051f17
    62c8:	1f170521 	svcne	0x00170521
    62cc:	052b1305 	streq	r1, [fp, #-773]!	; 0xfffffcfb
    62d0:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    62d4:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    62d8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    62dc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    62e0:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    62e4:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    62e8:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    62ec:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    62f0:	02053c09 	andeq	r3, r5, #2304	; 0x900
    62f4:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    62f8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    62fc:	15053106 	strne	r3, [r5, #-262]	; 0xfffffefa
    6300:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6304:	15052106 	strne	r2, [r5, #-262]	; 0xfffffefa
    6308:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    630c:	030b0520 	movweq	r0, #46368	; 0xb520
    6310:	052001c0 	streq	r0, [r0, #-448]!	; 0xfffffe40
    6314:	7ec00315 	mcrvc	3, 6, r0, cr0, cr5, {0}
    6318:	06020520 	streq	r0, [r2], -r0, lsr #10
    631c:	06190523 	ldreq	r0, [r9], -r3, lsr #10
    6320:	030b0501 	movweq	r0, #46337	; 0xb501
    6324:	052001bd 	streq	r0, [r0, #-445]!	; 0xfffffe43
    6328:	7ec30319 	mcrvc	3, 6, r0, cr3, cr9, {0}
    632c:	06020520 	streq	r0, [r2], -r0, lsr #10
    6330:	13151323 	tstne	r5, #-1946157056	; 0x8c000000
    6334:	06250516 			; <UNDEFINED> instruction: 0x06250516
    6338:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    633c:	0c030602 	stceq	6, cr0, [r3], {2}
    6340:	06090566 	streq	r0, [r9], -r6, ror #10
    6344:	030b0501 	movweq	r0, #46337	; 0xb501
    6348:	052001ae 	streq	r0, [r0, #-430]!	; 0xfffffe52
    634c:	7ed20309 	cdpvc	3, 13, cr0, cr2, cr9, {0}
    6350:	0602052e 	streq	r0, [r2], -lr, lsr #10
    6354:	2e01ab03 	vmlacs.f64	d10, d1, d3
    6358:	01060905 	tsteq	r6, r5, lsl #18
    635c:	31060205 	tstcc	r6, r5, lsl #4
    6360:	01060b05 	tsteq	r6, r5, lsl #22
    6364:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    6368:	09052702 	stmdbeq	r5, {r1, r8, r9, sl, sp}
    636c:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    6370:	01220602 			; <UNDEFINED> instruction: 0x01220602
    6374:	01011301 	tsteq	r1, r1, lsl #6
    6378:	15010113 	strne	r0, [r1, #-275]	; 0xfffffeed
    637c:	0c053f4f 	stceq	15, cr3, [r5], {79}	; 0x4f
    6380:	0a050106 	beq	1467a0 <__ccfg+0x1267f8>
    6384:	0602054a 	streq	r0, [r2], -sl, asr #10
    6388:	06050531 			; <UNDEFINED> instruction: 0x06050531
    638c:	06030501 	streq	r0, [r3], -r1, lsl #10
    6390:	60020521 	andvs	r0, r2, r1, lsr #10
    6394:	01062205 	tsteq	r6, r5, lsl #4
    6398:	a0034405 	andge	r4, r3, r5, lsl #8
    639c:	22053c7b 	andcs	r3, r5, #31488	; 0x7b00
    63a0:	2004e003 	andcs	lr, r4, r3
    63a4:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    63a8:	017b9b03 	cmneq	fp, r3, lsl #22
    63ac:	01063f05 	tsteq	r6, r5, lsl #30
    63b0:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    63b4:	01064405 	tsteq	r6, r5, lsl #8
    63b8:	052d2e05 	streq	r2, [sp, #-3589]!	; 0xfffff1fb
    63bc:	e7030602 	str	r0, [r3, -r2, lsl #12]
    63c0:	32200804 	eorcc	r0, r0, #4, 16	; 0x40000
    63c4:	01062805 	tsteq	r6, r5, lsl #16
    63c8:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    63cc:	02051d28 	andeq	r1, r5, #40, 26	; 0xa00
    63d0:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    63d4:	4e02052f 	cfsh32mi	mvfx0, mvfx2, #31
    63d8:	01063005 	tsteq	r6, r5
    63dc:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    63e0:	01010027 	tsteq	r1, r7, lsr #32
    63e4:	000002ab 	andeq	r0, r0, fp, lsr #5
    63e8:	014f0003 	cmpeq	pc, r3
    63ec:	01020000 	mrseq	r0, (UNDEF: 2)
    63f0:	000d0efb 	strdeq	r0, [sp], -fp
    63f4:	01010101 	tsteq	r1, r1, lsl #2
    63f8:	01000000 	mrseq	r0, (UNDEF: 0)
    63fc:	2f010000 	svccs	0x00010000
    6400:	2f727375 	svccs	0x00727375
    6404:	2f62696c 	svccs	0x0062696c
    6408:	2f636367 	svccs	0x00636367
    640c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6410:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6414:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6418:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    641c:	2f312e32 	svccs	0x00312e32
    6420:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6424:	00656475 	rsbeq	r6, r5, r5, ror r4
    6428:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6374 <__exidx_end+0x6b4>
    642c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6430:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6434:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6438:	6f746b73 	svcvs	0x00746b73
    643c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6440:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6444:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6448:	2f534f43 	svccs	0x00534f43
    644c:	4f636950 	svcmi	0x00636950
    6450:	43432f53 	movtmi	r2, #16211	; 0x3f53
    6454:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6458:	6f682f00 	svcvs	0x00682f00
    645c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6460:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6464:	442f6e65 	strtmi	r6, [pc], #-3685	; 646c <__exidx_end+0x7ac>
    6468:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    646c:	4f2f706f 	svcmi	0x002f706f
    6470:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6474:	502f5445 	eorpl	r5, pc, r5, asr #8
    6478:	534f4349 	movtpl	r4, #62281	; 0xf349
    647c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6480:	2f00534f 	svccs	0x0000534f
    6484:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6488:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    648c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6490:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6494:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6498:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    649c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    64a0:	4349502f 	movtmi	r5, #36911	; 0x902f
    64a4:	502f534f 	eorpl	r5, pc, pc, asr #6
    64a8:	534f6369 	movtpl	r6, #62313	; 0xf369
    64ac:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    64b0:	562f7362 	strtpl	r7, [pc], -r2, ror #6
    64b4:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
    64b8:	6c700000 	ldclvs	0, cr0, [r0], #-0
    64bc:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
    64c0:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
    64c4:	00006363 	andeq	r6, r0, r3, ror #6
    64c8:	74730000 	ldrbtvc	r0, [r3], #-0
    64cc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    64d0:	0100682e 	tsteq	r0, lr, lsr #16
    64d4:	74730000 	ldrbtvc	r0, [r3], #-0
    64d8:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    64dc:	0100682e 	tsteq	r0, lr, lsr #16
    64e0:	72610000 	rsbvc	r0, r1, #0
    64e4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    64e8:	00000200 	andeq	r0, r0, r0, lsl #4
    64ec:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    64f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    64f4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    64f8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    64fc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    6500:	00000200 	andeq	r0, r0, r0, lsl #4
    6504:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    6508:	5f736e6f 	svcpl	0x00736e6f
    650c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6510:	00020068 	andeq	r0, r2, r8, rrx
    6514:	73797300 	cmnvc	r9, #0, 6
    6518:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    651c:	00000300 	andeq	r0, r0, r0, lsl #6
    6520:	5f766374 	svcpl	0x00766374
    6524:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
    6528:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    652c:	623c0000 	eorsvs	r0, ip, #0
    6530:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6534:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6538:	00000000 	andeq	r0, r0, r0
    653c:	002b0500 	eoreq	r0, fp, r0, lsl #10
    6540:	31040205 	tstcc	r4, r5, lsl #4
    6544:	36030000 	strcc	r0, [r3], -r0
    6548:	16020501 	strne	r0, [r2], -r1, lsl #10
    654c:	0e062b05 	vmlaeq.f64	d2, d6, d5
    6550:	05241005 	streq	r1, [r4, #-5]!
    6554:	10051c2b 	andne	r1, r5, fp, lsr #24
    6558:	3c050524 	cfstr32cc	mvfx0, [r5], {36}	; 0x24
    655c:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    6560:	053f0602 	ldreq	r0, [pc, #-1538]!	; 5f66 <__exidx_end+0x2a6>
    6564:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    6568:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    656c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    6570:	04022101 	streq	r2, [r2], #-257	; 0xfffffeff
    6574:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6578:	0205001f 	andeq	r0, r5, #31
    657c:	00003128 	andeq	r3, r0, r8, lsr #2
    6580:	0100c203 	tsteq	r0, r3, lsl #4
    6584:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    6588:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    658c:	10051e1f 	andne	r1, r5, pc, lsl lr
    6590:	20050522 	andcs	r0, r5, r2, lsr #10
    6594:	05210a05 	streq	r0, [r1, #-2565]!	; 0xfffff5fb
    6598:	1e052d2a 	cdpne	13, 0, cr2, cr5, cr10, {1}
    659c:	2015052e 	andscs	r0, r5, lr, lsr #10
    65a0:	31060205 	tstcc	r6, r5, lsl #4
    65a4:	01061e05 	tsteq	r6, r5, lsl #28
    65a8:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
    65ac:	0f051e1e 	svceq	0x00051e1e
    65b0:	06020520 	streq	r0, [r2], -r0, lsr #10
    65b4:	06010522 	streq	r0, [r1], -r2, lsr #10
    65b8:	00030213 	andeq	r0, r3, r3, lsl r2
    65bc:	37050101 	strcc	r0, [r5, -r1, lsl #2]
    65c0:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    65c4:	03000031 	movweq	r0, #49	; 0x31
    65c8:	050100cc 	streq	r0, [r1, #-204]	; 0xffffff34
    65cc:	25051402 	strcs	r1, [r5, #-1026]	; 0xfffffbfe
    65d0:	16050106 	strne	r0, [r5], -r6, lsl #2
    65d4:	2101052e 	tstcs	r1, lr, lsr #10
    65d8:	01000102 	tsteq	r0, r2, lsl #2
    65dc:	00250501 	eoreq	r0, r5, r1, lsl #10
    65e0:	31540205 	cmpcc	r4, r5, lsl #4
    65e4:	d1030000 	mrsle	r0, (UNDEF: 3)
    65e8:	02050100 	andeq	r0, r5, #0, 2
    65ec:	06010514 			; <UNDEFINED> instruction: 0x06010514
    65f0:	00020214 	andeq	r0, r2, r4, lsl r2
    65f4:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    65f8:	58020500 	stmdapl	r2, {r8, sl}
    65fc:	03000031 	movweq	r0, #49	; 0x31
    6600:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    6604:	01051402 	tsteq	r5, r2, lsl #8
    6608:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    660c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6610:	02050039 	andeq	r0, r5, #57	; 0x39
    6614:	0000315c 	andeq	r3, r0, ip, asr r1
    6618:	05012003 	streq	r2, [r1, #-3]
    661c:	05260610 	streq	r0, [r6, #-1552]!	; 0xfffff9f0
    6620:	207a0339 	rsbscs	r0, sl, r9, lsr r3
    6624:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    6628:	06050514 			; <UNDEFINED> instruction: 0x06050514
    662c:	03390501 	teqeq	r9, #4194304	; 0x400000
    6630:	0505207a 	streq	r2, [r5, #-122]	; 0xffffff86
    6634:	06030526 	streq	r0, [r3], -r6, lsr #10
    6638:	06200521 	strteq	r0, [r0], -r1, lsr #10
    663c:	3c0d0501 	cfstr32cc	mvfx0, [sp], {1}
    6640:	21060305 	tstcs	r6, r5, lsl #6
    6644:	01060605 	tsteq	r6, r5, lsl #12
    6648:	22060f05 	andcs	r0, r6, #5, 30
    664c:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
    6650:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    6654:	05490616 	strbeq	r0, [r9, #-1558]	; 0xfffff9ea
    6658:	0405010f 	streq	r0, [r5], #-271	; 0xfffffef1
    665c:	06120513 			; <UNDEFINED> instruction: 0x06120513
    6660:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    6664:	010f051f 	tsteq	pc, pc, lsl r5	; <UNPREDICTABLE>
    6668:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    666c:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    6670:	02052005 	andeq	r2, r5, #5
    6674:	12053f06 	andne	r3, r5, #6, 30
    6678:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    667c:	09053d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    6680:	0a050106 	beq	146aa0 <__ccfg+0x126af8>
    6684:	3201051d 	andcc	r0, r1, #121634816	; 0x7400000
    6688:	03060405 	movweq	r0, #25605	; 0x6405
    668c:	09022075 	stmdbeq	r2, {r0, r2, r4, r5, r6, sp}
    6690:	a4010100 	strge	r0, [r1], #-256	; 0xffffff00
    6694:	03000001 	movweq	r0, #1
    6698:	00012900 	andeq	r2, r1, r0, lsl #18
    669c:	fb010200 	blx	46ea6 <__ccfg+0x26efe>
    66a0:	01000d0e 	tsteq	r0, lr, lsl #26
    66a4:	00010101 	andeq	r0, r1, r1, lsl #2
    66a8:	00010000 	andeq	r0, r1, r0
    66ac:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    66b0:	2f656d6f 	svccs	0x00656d6f
    66b4:	70657473 	rsbvc	r7, r5, r3, ror r4
    66b8:	2f6e6568 	svccs	0x006e6568
    66bc:	6b736544 	blvs	1cdfbd4 <__ccfg+0x1cbfc2c>
    66c0:	2f706f74 	svccs	0x00706f74
    66c4:	4f534c4f 	svcmi	0x00534c4f
    66c8:	2f54454e 	svccs	0x0054454e
    66cc:	4f434950 	svcmi	0x00434950
    66d0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    66d4:	2f534f63 	svccs	0x00534f63
    66d8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    66dc:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    66e0:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    66e4:	73752f00 	cmnvc	r5, #0, 30
    66e8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    66ec:	63672f62 	cmnvs	r7, #392	; 0x188
    66f0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    66f4:	6f6e2d6d 	svcvs	0x006e2d6d
    66f8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    66fc:	2f696261 	svccs	0x00696261
    6700:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    6704:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6708:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    670c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    6710:	2f656d6f 	svccs	0x00656d6f
    6714:	70657473 	rsbvc	r7, r5, r3, ror r4
    6718:	2f6e6568 	svccs	0x006e6568
    671c:	6b736544 	blvs	1cdfc34 <__ccfg+0x1cbfc8c>
    6720:	2f706f74 	svccs	0x00706f74
    6724:	4f534c4f 	svcmi	0x00534c4f
    6728:	2f54454e 	svccs	0x0054454e
    672c:	4f434950 	svcmi	0x00434950
    6730:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6734:	2f534f63 	svccs	0x00534f63
    6738:	33314343 	teqcc	r1, #201326593	; 0xc000001
    673c:	2f005858 	svccs	0x00005858
    6740:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6744:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6748:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    674c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6750:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6754:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6758:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    675c:	4349502f 	movtmi	r5, #36911	; 0x902f
    6760:	502f534f 	eorpl	r5, pc, pc, asr #6
    6764:	534f6369 	movtpl	r6, #62313	; 0xf369
    6768:	5f5f0000 	svcpl	0x005f0000
    676c:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    6770:	61697265 	cmnvs	r9, r5, ror #4
    6774:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    6778:	73000001 	movwvc	r0, #1
    677c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6780:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6784:	61000002 	tstvs	r0, r2
    6788:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    678c:	00030068 	andeq	r0, r3, r8, rrx
    6790:	63616d00 	cmnvs	r1, #0, 26
    6794:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6798:	70000003 	andvc	r0, r0, r3
    679c:	5f736e69 	svcpl	0x00736e69
    67a0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    67a4:	00030068 	andeq	r0, r3, r8, rrx
    67a8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    67ac:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    67b0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    67b4:	0300682e 	movweq	r6, #2094	; 0x82e
    67b8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    67bc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    67c0:	00040068 	andeq	r0, r4, r8, rrx
    67c4:	01050000 	mrseq	r0, (UNDEF: 5)
    67c8:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    67cc:	03000031 	movweq	r0, #49	; 0x31
    67d0:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    67d4:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    67d8:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    67dc:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    67e0:	01151313 	tsteq	r5, r3, lsl r3
    67e4:	06051301 	streq	r1, [r5], -r1, lsl #6
    67e8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    67ec:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    67f0:	03050106 	movweq	r0, #20742	; 0x5106
    67f4:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    67f8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    67fc:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    6800:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    6804:	01060a05 	tsteq	r6, r5, lsl #20
    6808:	83060205 	movwhi	r0, #25093	; 0x6205
    680c:	01060605 	tsteq	r6, r5, lsl #12
    6810:	1f211f21 	svcne	0x00211f21
    6814:	21060205 	tstcs	r6, r5, lsl #4
    6818:	01060605 	tsteq	r6, r5, lsl #12
    681c:	21060205 	tstcs	r6, r5, lsl #4
    6820:	01060505 	tsteq	r6, r5, lsl #10
    6824:	30060305 	andcc	r0, r6, r5, lsl #6
    6828:	4a74033d 	bmi	1d07524 <__ccfg+0x1ce757c>
    682c:	01060d05 	tsteq	r6, r5, lsl #26
    6830:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    6834:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    6838:	4e010100 	adfmis	f0, f1, f0
    683c:	03000002 	movweq	r0, #2
    6840:	00012800 	andeq	r2, r1, r0, lsl #16
    6844:	fb010200 	blx	4704e <__ccfg+0x270a6>
    6848:	01000d0e 	tsteq	r0, lr, lsl #26
    684c:	00010101 	andeq	r0, r1, r1, lsl #2
    6850:	00010000 	andeq	r0, r1, r0
    6854:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    6858:	2f656d6f 	svccs	0x00656d6f
    685c:	70657473 	rsbvc	r7, r5, r3, ror r4
    6860:	2f6e6568 	svccs	0x006e6568
    6864:	6b736544 	blvs	1cdfd7c <__ccfg+0x1cbfdd4>
    6868:	2f706f74 	svccs	0x00706f74
    686c:	4f534c4f 	svcmi	0x00534c4f
    6870:	2f54454e 	svccs	0x0054454e
    6874:	4f434950 	svcmi	0x00434950
    6878:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    687c:	2f534f63 	svccs	0x00534f63
    6880:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    6884:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    6888:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    688c:	73752f00 	cmnvc	r5, #0, 30
    6890:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6894:	63672f62 	cmnvs	r7, #392	; 0x188
    6898:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    689c:	6f6e2d6d 	svcvs	0x006e2d6d
    68a0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    68a4:	2f696261 	svccs	0x00696261
    68a8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    68ac:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    68b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    68b4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    68b8:	2f656d6f 	svccs	0x00656d6f
    68bc:	70657473 	rsbvc	r7, r5, r3, ror r4
    68c0:	2f6e6568 	svccs	0x006e6568
    68c4:	6b736544 	blvs	1cdfddc <__ccfg+0x1cbfe34>
    68c8:	2f706f74 	svccs	0x00706f74
    68cc:	4f534c4f 	svcmi	0x00534c4f
    68d0:	2f54454e 	svccs	0x0054454e
    68d4:	4f434950 	svcmi	0x00434950
    68d8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    68dc:	2f534f63 	svccs	0x00534f63
    68e0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    68e4:	2f005858 	svccs	0x00005858
    68e8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    68ec:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    68f0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    68f4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    68f8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    68fc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6900:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6904:	4349502f 	movtmi	r5, #36911	; 0x902f
    6908:	502f534f 	eorpl	r5, pc, pc, asr #6
    690c:	534f6369 	movtpl	r6, #62313	; 0xf369
    6910:	5f5f0000 	svcpl	0x005f0000
    6914:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    6918:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    691c:	0100632e 	tsteq	r0, lr, lsr #6
    6920:	74730000 	ldrbtvc	r0, [r3], #-0
    6924:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6928:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    692c:	72610000 	rsbvc	r0, r1, #0
    6930:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6934:	00000300 	andeq	r0, r0, r0, lsl #6
    6938:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    693c:	0300682e 	movweq	r6, #2094	; 0x82e
    6940:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    6944:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6948:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    694c:	00000300 	andeq	r0, r0, r0, lsl #6
    6950:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    6954:	5f736e6f 	svcpl	0x00736e6f
    6958:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    695c:	00030068 	andeq	r0, r3, r8, rrx
    6960:	73797300 	cmnvc	r9, #0, 6
    6964:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    6968:	00000400 	andeq	r0, r0, r0, lsl #8
    696c:	00010500 	andeq	r0, r1, r0, lsl #10
    6970:	32140205 	andscc	r0, r4, #1342177280	; 0x50000000
    6974:	22030000 	andcs	r0, r3, #0
    6978:	20060101 	andcs	r0, r6, r1, lsl #2
    697c:	02053c06 	andeq	r3, r5, #1536	; 0x600
    6980:	1613136b 	ldrne	r1, [r3], -fp, ror #6
    6984:	01061005 	tsteq	r6, r5
    6988:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    698c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6990:	1d053f02 	stcne	15, cr3, [r5, #-8]
    6994:	0b050106 	bleq	146db4 <__ccfg+0x126e0c>
    6998:	201d053c 	andscs	r0, sp, ip, lsr r5
    699c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    69a0:	03052005 	movweq	r2, #20485	; 0x5005
    69a4:	052f2406 	streq	r2, [pc, #-1030]!	; 65a6 <__exidx_end+0x8e6>
    69a8:	06053002 	streq	r3, [r5], -r2
    69ac:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    69b0:	052f061f 	streq	r0, [pc, #-1567]!	; 6399 <__exidx_end+0x6d9>
    69b4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    69b8:	01300602 	teqeq	r0, r2, lsl #12
    69bc:	05831601 	streq	r1, [r3, #1537]	; 0x601
    69c0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    69c4:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    69c8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    69cc:	052f0604 	streq	r0, [pc, #-1540]!	; 63d0 <__exidx_end+0x710>
    69d0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    69d4:	07052104 	streq	r2, [r5, -r4, lsl #2]
    69d8:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
    69dc:	31030521 	tstcc	r3, r1, lsr #10
    69e0:	01060705 	tsteq	r6, r5, lsl #14
    69e4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    69e8:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    69ec:	06053e02 	streq	r3, [r5], -r2, lsl #28
    69f0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    69f4:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    69f8:	2f060305 	svccs	0x00060305
    69fc:	01060805 	tsteq	r6, r5, lsl #16
    6a00:	2f060305 	svccs	0x00060305
    6a04:	01060d05 	tsteq	r6, r5, lsl #26
    6a08:	2f060305 	svccs	0x00060305
    6a0c:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    6a10:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6a14:	03052e05 	movweq	r2, #24069	; 0x5e05
    6a18:	06052106 	streq	r2, [r5], -r6, lsl #2
    6a1c:	1f210106 	svcne	0x00210106
    6a20:	2f060305 	svccs	0x00060305
    6a24:	01060605 	tsteq	r6, r5, lsl #12
    6a28:	23060205 	movwcs	r0, #25093	; 0x6205
    6a2c:	06059140 	streq	r9, [r5], -r0, asr #2
    6a30:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6a34:	0c053d06 	stceq	13, cr3, [r5], {6}
    6a38:	11050106 	tstne	r5, r6, lsl #2
    6a3c:	2107053c 	tstcs	r7, ip, lsr r5
    6a40:	4b060205 	blmi	18725c <__ccfg+0x1672b4>
    6a44:	01060505 	tsteq	r6, r5, lsl #10
    6a48:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    6a4c:	01060a05 	tsteq	r6, r5, lsl #20
    6a50:	059f0605 	ldreq	r0, [pc, #1541]	; 705d <__exidx_end+0x139d>
    6a54:	02051f0a 	andeq	r1, r5, #10, 30	; 0x28
    6a58:	06052106 	streq	r2, [r5], -r6, lsl #2
    6a5c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6a60:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    6a64:	03050106 	movweq	r0, #20742	; 0x5106
    6a68:	0d052106 	stfeqs	f2, [r5, #-24]	; 0xffffffe8
    6a6c:	03050106 	movweq	r0, #20742	; 0x5106
    6a70:	02052f06 	andeq	r2, r5, #6, 30
    6a74:	06060530 			; <UNDEFINED> instruction: 0x06060530
    6a78:	06020501 	streq	r0, [r2], -r1, lsl #10
    6a7c:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    6a80:	3a020522 	bcc	87f10 <__ccfg+0x67f68>
    6a84:	30060105 	andcc	r0, r6, r5, lsl #2
    6a88:	01000d02 	tsteq	r0, r2, lsl #26
    6a8c:	0003c001 	andeq	ip, r3, r1
    6a90:	3d000300 	stccc	3, cr0, [r0, #-0]
    6a94:	02000001 	andeq	r0, r0, #1
    6a98:	0d0efb01 	vstreq	d15, [lr, #-4]
    6a9c:	01010100 	mrseq	r0, (UNDEF: 17)
    6aa0:	00000001 	andeq	r0, r0, r1
    6aa4:	01000001 	tsteq	r0, r1
    6aa8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 69f4 <__exidx_end+0xd34>
    6aac:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6ab0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6ab4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6ab8:	6f746b73 	svcvs	0x00746b73
    6abc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6ac0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6ac4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6ac8:	2f534f43 	svccs	0x00534f43
    6acc:	4f636950 	svcmi	0x00636950
    6ad0:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    6ad4:	2f736269 	svccs	0x00736269
    6ad8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    6adc:	2f006c61 	svccs	0x00006c61
    6ae0:	2f727375 	svccs	0x00727375
    6ae4:	2f62696c 	svccs	0x0062696c
    6ae8:	2f636367 	svccs	0x00636367
    6aec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6af0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6af4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6af8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    6afc:	2f312e32 	svccs	0x00312e32
    6b00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6b04:	00656475 	rsbeq	r6, r5, r5, ror r4
    6b08:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6a54 <__exidx_end+0xd94>
    6b0c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6b10:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6b14:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6b18:	6f746b73 	svcvs	0x00746b73
    6b1c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6b20:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6b24:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6b28:	2f534f43 	svccs	0x00534f43
    6b2c:	4f636950 	svcmi	0x00636950
    6b30:	43432f53 	movtmi	r2, #16211	; 0x3f53
    6b34:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6b38:	6f682f00 	svcvs	0x00682f00
    6b3c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6b40:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6b44:	442f6e65 	strtmi	r6, [pc], #-3685	; 6b4c <__exidx_end+0xe8c>
    6b48:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6b4c:	4f2f706f 	svcmi	0x002f706f
    6b50:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6b54:	502f5445 	eorpl	r5, pc, r5, asr #8
    6b58:	534f4349 	movtpl	r4, #62281	; 0xf349
    6b5c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6b60:	0000534f 	andeq	r5, r0, pc, asr #6
    6b64:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    6b68:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    6b6c:	73000001 	movwvc	r0, #1
    6b70:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6b74:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6b78:	73000002 	movwvc	r0, #2
    6b7c:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    6b80:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6b84:	61000002 	tstvs	r0, r2
    6b88:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6b8c:	00030068 	andeq	r0, r3, r8, rrx
    6b90:	63616d00 	cmnvs	r1, #0, 26
    6b94:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6b98:	70000003 	andvc	r0, r0, r3
    6b9c:	5f736e69 	svcpl	0x00736e69
    6ba0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6ba4:	00030068 	andeq	r0, r3, r8, rrx
    6ba8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6bac:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6bb0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6bb4:	0300682e 	movweq	r6, #2094	; 0x82e
    6bb8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6bbc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6bc0:	00040068 	andeq	r0, r4, r8, rrx
    6bc4:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    6bc8:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    6bcc:	003e6e69 	eorseq	r6, lr, r9, ror #28
    6bd0:	00000000 	andeq	r0, r0, r0
    6bd4:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
    6bd8:	00333002 	eorseq	r3, r3, r2
    6bdc:	010c0300 	mrseq	r0, LR_mon
    6be0:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    6be4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6be8:	0405580b 	streq	r5, [r5], #-2059	; 0xfffff7f5
    6bec:	0e053e06 	cdpeq	14, 0, cr3, cr5, cr6, {0}
    6bf0:	03050106 	movweq	r0, #20742	; 0x5106
    6bf4:	04053006 	streq	r3, [r5], #-6
    6bf8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6bfc:	00010259 	andeq	r0, r1, r9, asr r2
    6c00:	43050101 	movwmi	r0, #20737	; 0x5101
    6c04:	50020500 	andpl	r0, r2, r0, lsl #10
    6c08:	19000033 	stmdbne	r0, {r0, r1, r4, r5}
    6c0c:	06052e06 	streq	r2, [r5], -r6, lsl #28
    6c10:	03040520 	movweq	r0, #17696	; 0x4520
    6c14:	05052e1d 	streq	r2, [r5, #-3613]	; 0xfffff1e3
    6c18:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    6c1c:	20710307 	rsbscs	r0, r1, r7, lsl #6
    6c20:	4a030605 	bmi	c843c <__ccfg+0xa8494>
    6c24:	06020520 	streq	r0, [r2], -r0, lsr #10
    6c28:	0514133e 	ldreq	r1, [r4, #-830]	; 0xfffffcc2
    6c2c:	02051803 	andeq	r1, r5, #196608	; 0x30000
    6c30:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    6c34:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    6c38:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    6c3c:	05051403 	streq	r1, [r5, #-1027]	; 0xfffffbfd
    6c40:	03050106 	movweq	r0, #20742	; 0x5106
    6c44:	06053006 	streq	r3, [r5], -r6
    6c48:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6c4c:	0b053e06 	bleq	15646c <__ccfg+0x1364c4>
    6c50:	10050106 	andne	r0, r5, r6, lsl #2
    6c54:	2105052e 	tstcs	r5, lr, lsr #10
    6c58:	052d0705 	streq	r0, [sp, #-1797]!	; 0xfffff8fb
    6c5c:	3d3d0605 	ldccc	6, cr0, [sp, #-20]!	; 0xffffffec
    6c60:	da030405 	ble	c7c7c <__ccfg+0xa7cd4>
    6c64:	05590100 	ldrbeq	r0, [r9, #-256]	; 0xffffff00
    6c68:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6c6c:	a7030604 	strge	r0, [r3, -r4, lsl #12]
    6c70:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    6c74:	00c20306 	sbceq	r0, r2, r6, lsl #6
    6c78:	052f0620 	streq	r0, [pc, #-1568]!	; 6660 <__exidx_end+0x9a0>
    6c7c:	05100612 	ldreq	r0, [r0, #-1554]	; 0xfffff9ee
    6c80:	43030603 	movwmi	r0, #13827	; 0x3603
    6c84:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6c88:	06040501 	streq	r0, [r4], -r1, lsl #10
    6c8c:	0606054c 	streq	r0, [r6], -ip, asr #10
    6c90:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    6c94:	21060405 	tstcs	r6, r5, lsl #8
    6c98:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    6c9c:	5959e400 	ldmdbpl	r9, {sl, sp, lr, pc}^
    6ca0:	01060805 	tsteq	r6, r5, lsl #16
    6ca4:	03060505 	movweq	r0, #25861	; 0x6505
    6ca8:	0c053c09 	stceq	12, cr3, [r5], {9}
    6cac:	01050106 	tsteq	r5, r6, lsl #2
    6cb0:	03040531 	movweq	r0, #17713	; 0x4531
    6cb4:	053c7fa9 	ldreq	r7, [ip, #-4009]!	; 0xfffff057
    6cb8:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
    6cbc:	0505010f 	streq	r0, [r5, #-271]	; 0xfffffef1
    6cc0:	060c0513 			; <UNDEFINED> instruction: 0x060c0513
    6cc4:	2d120513 	cfldr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    6cc8:	2f060505 	svccs	0x00060505
    6ccc:	14060e05 	strne	r0, [r6], #-3589	; 0xfffff1fb
    6cd0:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    6cd4:	13060e05 	movwne	r0, #28165	; 0x6e05
    6cd8:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    6cdc:	5a062d06 	bpl	1920fc <__ccfg+0x172154>
    6ce0:	01060905 	tsteq	r6, r5, lsl #18
    6ce4:	39061405 	stmdbcc	r6, {r0, r2, sl, ip}
    6ce8:	01061605 	tsteq	r6, r5, lsl #12
    6cec:	2e061205 	cdpcs	2, 0, cr1, cr6, cr5, {0}
    6cf0:	13060605 	movwne	r0, #26117	; 0x6605
    6cf4:	03060505 	movweq	r0, #25861	; 0x6505
    6cf8:	05132009 	ldreq	r2, [r3, #-9]
    6cfc:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    6d00:	09052f08 	stmdbeq	r5, {r3, r8, r9, sl, fp, sp}
    6d04:	0605052d 	streq	r0, [r5], -sp, lsr #10
    6d08:	0608052f 	streq	r0, [r8], -pc, lsr #10
    6d0c:	20120501 	andscs	r0, r2, r1, lsl #10
    6d10:	30060605 	andcc	r0, r6, r5, lsl #12
    6d14:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    6d18:	06050501 	streq	r0, [r5], -r1, lsl #10
    6d1c:	060c054c 	streq	r0, [ip], -ip, asr #10
    6d20:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    6d24:	20110305 	andscs	r0, r1, r5, lsl #6
    6d28:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    6d2c:	4a063c06 	bmi	195d4c <__ccfg+0x175da4>
    6d30:	20827401 	addcs	r7, r2, r1, lsl #8
    6d34:	2e204a20 	vmulcs.f32	s8, s0, s1
    6d38:	06070525 	streq	r0, [r7], -r5, lsr #10
    6d3c:	06050501 	streq	r0, [r5], -r1, lsl #10
    6d40:	06080521 	streq	r0, [r8], -r1, lsr #10
    6d44:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    6d48:	30060605 	andcc	r0, r6, r5, lsl #12
    6d4c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6d50:	1f0a0514 	svcne	0x000a0514
    6d54:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    6d58:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    6d5c:	01060905 	tsteq	r6, r5, lsl #18
    6d60:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    6d64:	593f0607 	ldmdbpl	pc!, {r0, r1, r2, r9, sl}	; <UNPREDICTABLE>
    6d68:	01060b05 	tsteq	r6, r5, lsl #22
    6d6c:	30060605 	andcc	r0, r6, r5, lsl #12
    6d70:	03060505 	movweq	r0, #25861	; 0x6505
    6d74:	0605016f 	streq	r0, [r5], -pc, ror #2
    6d78:	06201103 	strteq	r1, [r0], -r3, lsl #2
    6d7c:	062e012e 	strteq	r0, [lr], -lr, lsr #2
    6d80:	014a063c 	cmpeq	sl, ip, lsr r6
    6d84:	2e016666 	cfmadd32cs	mvax3, mvfx6, mvfx1, mvfx6
    6d88:	052e2058 	streq	r2, [lr, #-88]!	; 0xffffffa8
    6d8c:	0f05210c 	svceq	0x0005210c
    6d90:	06050106 	streq	r0, [r5], -r6, lsl #2
    6d94:	13132f06 	tstne	r3, #6, 30
    6d98:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    6d9c:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    6da0:	06052d08 	streq	r2, [r5], -r8, lsl #26
    6da4:	07052106 	streq	r2, [r5, -r6, lsl #2]
    6da8:	060f0514 			; <UNDEFINED> instruction: 0x060f0514
    6dac:	2e150513 	mrccs	5, 0, r0, cr5, cr3, {0}
    6db0:	062d0705 	strteq	r0, [sp], -r5, lsl #14
    6db4:	060a055a 			; <UNDEFINED> instruction: 0x060a055a
    6db8:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    6dbc:	06170547 	ldreq	r0, [r7], -r7, asr #10
    6dc0:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    6dc4:	0607052e 	streq	r0, [r7], -lr, lsr #10
    6dc8:	06060513 			; <UNDEFINED> instruction: 0x06060513
    6dcc:	05055926 	streq	r5, [r5, #-2342]	; 0xfffff6da
    6dd0:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    6dd4:	05110609 	ldreq	r0, [r1, #-1545]	; 0xfffff9f7
    6dd8:	4f062f05 	svcmi	0x00062f05
    6ddc:	0b051313 	bleq	14ba30 <__ccfg+0x12ba88>
    6de0:	060c054a 	streq	r0, [ip], -sl, asr #10
    6de4:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    6de8:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
    6dec:	060a054b 	streq	r0, [sl], -fp, asr #10
    6df0:	207fad03 	rsbscs	sl, pc, r3, lsl #26
    6df4:	01000702 	tsteq	r0, r2, lsl #14
    6df8:	00350501 	eorseq	r0, r5, r1, lsl #10
    6dfc:	35800205 	strcc	r0, [r0, #517]	; 0x205
    6e00:	90030000 	andls	r0, r3, r0
    6e04:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    6e08:	35051414 	strcc	r1, [r5, #-1044]	; 0xfffffbec
    6e0c:	052e0e06 	streq	r0, [lr, #-3590]!	; 0xfffff1fa
    6e10:	03053205 	movweq	r3, #20997	; 0x5205
    6e14:	05673006 	strbeq	r3, [r7, #-6]!
    6e18:	12030601 	andne	r0, r3, #1048576	; 0x100000
    6e1c:	06020501 	streq	r0, [r2], -r1, lsl #10
    6e20:	053c7203 	ldreq	r7, [ip, #-515]!	; 0xfffffdfd
    6e24:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    6e28:	02053c06 	andeq	r3, r5, #1536	; 0x600
    6e2c:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    6e30:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6e34:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    6e38:	060b0540 	streq	r0, [fp], -r0, asr #10
    6e3c:	58050501 	stmdapl	r5, {r0, r8, sl}
    6e40:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    6e44:	03052005 	movweq	r2, #20485	; 0x5005
    6e48:	133d2206 	teqne	sp, #1610612736	; 0x60000000
    6e4c:	01000202 	tsteq	r0, r2, lsl #4
    6e50:	0002c901 	andeq	ip, r2, r1, lsl #18
    6e54:	3d000300 	stccc	3, cr0, [r0, #-0]
    6e58:	02000001 	andeq	r0, r0, #1
    6e5c:	0d0efb01 	vstreq	d15, [lr, #-4]
    6e60:	01010100 	mrseq	r0, (UNDEF: 17)
    6e64:	00000001 	andeq	r0, r0, r1
    6e68:	01000001 	tsteq	r0, r1
    6e6c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6db8 <__exidx_end+0x10f8>
    6e70:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6e74:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6e78:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6e7c:	6f746b73 	svcvs	0x00746b73
    6e80:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6e84:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6e88:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6e8c:	2f534f43 	svccs	0x00534f43
    6e90:	4f636950 	svcmi	0x00636950
    6e94:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    6e98:	2f736269 	svccs	0x00736269
    6e9c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    6ea0:	2f006c61 	svccs	0x00006c61
    6ea4:	2f727375 	svccs	0x00727375
    6ea8:	2f62696c 	svccs	0x0062696c
    6eac:	2f636367 	svccs	0x00636367
    6eb0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6eb4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6eb8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6ebc:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    6ec0:	2f312e32 	svccs	0x00312e32
    6ec4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6ec8:	00656475 	rsbeq	r6, r5, r5, ror r4
    6ecc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6e18 <__exidx_end+0x1158>
    6ed0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6ed4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6ed8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6edc:	6f746b73 	svcvs	0x00746b73
    6ee0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6ee4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6ee8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6eec:	2f534f43 	svccs	0x00534f43
    6ef0:	4f636950 	svcmi	0x00636950
    6ef4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    6ef8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6efc:	6f682f00 	svcvs	0x00682f00
    6f00:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6f04:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6f08:	442f6e65 	strtmi	r6, [pc], #-3685	; 6f10 <__exidx_end+0x1250>
    6f0c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6f10:	4f2f706f 	svcmi	0x002f706f
    6f14:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6f18:	502f5445 	eorpl	r5, pc, r5, asr #8
    6f1c:	534f4349 	movtpl	r4, #62281	; 0xf349
    6f20:	6369502f 	cmnvs	r9, #47	; 0x2f
    6f24:	0000534f 	andeq	r5, r0, pc, asr #6
    6f28:	61637376 	smcvs	14134	; 0x3736
    6f2c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    6f30:	73000001 	movwvc	r0, #1
    6f34:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6f38:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6f3c:	73000002 	movwvc	r0, #2
    6f40:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    6f44:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6f48:	61000002 	tstvs	r0, r2
    6f4c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6f50:	00030068 	andeq	r0, r3, r8, rrx
    6f54:	63616d00 	cmnvs	r1, #0, 26
    6f58:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6f5c:	70000003 	andvc	r0, r0, r3
    6f60:	5f736e69 	svcpl	0x00736e69
    6f64:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6f68:	00030068 	andeq	r0, r3, r8, rrx
    6f6c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6f70:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6f74:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6f78:	0300682e 	movweq	r6, #2094	; 0x82e
    6f7c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6f80:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6f84:	00040068 	andeq	r0, r4, r8, rrx
    6f88:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    6f8c:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    6f90:	003e6e69 	eorseq	r6, lr, r9, ror #28
    6f94:	00000000 	andeq	r0, r0, r0
    6f98:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    6f9c:	0035d002 	eorseq	sp, r5, r2
    6fa0:	02051900 	andeq	r1, r5, #0, 18
    6fa4:	013a0314 	teqeq	sl, r4, lsl r3
    6fa8:	01060505 	tsteq	r6, r5, lsl #10
    6fac:	44033a05 	strmi	r3, [r3], #-2565	; 0xfffff5fb
    6fb0:	03050520 	movweq	r0, #21792	; 0x5520
    6fb4:	12052e3c 	andne	r2, r5, #60, 28	; 0x3c0
    6fb8:	4005053c 	andmi	r0, r5, ip, lsr r5
    6fbc:	0e031605 	cfmadd32eq	mvax0, mvfx1, mvfx3, mvfx5
    6fc0:	030b0520 	movweq	r0, #46368	; 0xb520
    6fc4:	08052e11 	stmdaeq	r5, {r0, r4, r9, sl, fp, sp}
    6fc8:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    6fcc:	01060905 	tsteq	r6, r5, lsl #18
    6fd0:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    6fd4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6fd8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6fdc:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6fe0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6fe4:	0305200f 	movweq	r2, #20495	; 0x500f
    6fe8:	03010520 	movweq	r0, #5408	; 0x1520
    6fec:	0305ac2e 	movweq	sl, #23598	; 0x5c2e
    6ff0:	053c5203 	ldreq	r5, [ip, #-515]!	; 0xfffffdfd
    6ff4:	741b030b 	ldrvc	r0, [fp], #-779	; 0xfffffcf5
    6ff8:	2e060a05 	vmlacs.f32	s0, s12, s10
    6ffc:	01060b05 	tsteq	r6, r5, lsl #22
    7000:	ad060405 	cfstrsge	mvf0, [r6, #-20]	; 0xffffffec
    7004:	01060705 	tsteq	r6, r5, lsl #14
    7008:	30060405 	andcc	r0, r6, r5, lsl #8
    700c:	15060705 	strne	r0, [r6, #-1797]	; 0xfffff8fb
    7010:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    7014:	04052d06 	streq	r2, [r5], #-3334	; 0xfffff2fa
    7018:	05142f06 	ldreq	r2, [r4, #-3846]	; 0xfffff0fa
    701c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    7020:	052f060b 	streq	r0, [pc, #-1547]!	; 6a1d <__exidx_end+0xd5d>
    7024:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    7028:	1c05660c 	stcne	6, cr6, [r5], {12}
    702c:	2e2b052e 	cfsh64cs	mvdx0, mvdx11, #30
    7030:	054e0b05 	strbeq	r0, [lr, #-2821]	; 0xfffff4fb
    7034:	053c060a 	ldreq	r0, [ip, #-1546]!	; 0xfffff9f6
    7038:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    703c:	05830604 	streq	r0, [r3, #1540]	; 0x604
    7040:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    7044:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    7048:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    704c:	052f0604 	streq	r0, [pc, #-1540]!	; 6a50 <__exidx_end+0xd90>
    7050:	20590311 	subscs	r0, r9, r1, lsl r3
    7054:	2e66063c 	mcrcs	6, 3, r0, cr6, cr12, {1}
    7058:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    705c:	3c66063c 	stclcc	6, cr0, [r6], #-240	; 0xffffff10
    7060:	01062001 	tsteq	r6, r1
    7064:	3c743c06 	ldclcc	12, cr3, [r4], #-24	; 0xffffffe8
    7068:	3c064a06 			; <UNDEFINED> instruction: 0x3c064a06
    706c:	902e2174 	eorls	r2, lr, r4, ror r1
    7070:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    7074:	822e0601 	eorhi	r0, lr, #1048576	; 0x100000
    7078:	064a2190 			; <UNDEFINED> instruction: 0x064a2190
    707c:	3c580690 	mrrccc	6, 9, r0, r8, cr0
    7080:	06012e01 	streq	r2, [r1], -r1, lsl #28
    7084:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    7088:	3c066682 	stccc	6, cr6, [r6], {130}	; 0x82
    708c:	053c3c3c 	ldreq	r3, [ip, #-3132]!	; 0xfffff3c4
    7090:	0c057704 	stceq	7, cr7, [r5], {4}
    7094:	10050106 	andne	r0, r5, r6, lsl #2
    7098:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    709c:	2e6606ae 	cdpcs	6, 6, cr0, cr6, cr14, {5}
    70a0:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    70a4:	3c3c063c 	ldccc	6, cr0, [ip], #-240	; 0xffffff10
    70a8:	01062e01 	tsteq	r6, r1, lsl #28
    70ac:	3c823c06 	stccc	12, cr3, [r2], {6}
    70b0:	06900692 			; <UNDEFINED> instruction: 0x06900692
    70b4:	2e013c58 	mcrcs	12, 0, r3, cr1, cr8, {2}
    70b8:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    70bc:	6674063c 			; <UNDEFINED> instruction: 0x6674063c
    70c0:	3c3c3c06 	ldccc	12, cr3, [ip], #-24	; 0xffffffe8
    70c4:	3c06723c 	sfmcc	f7, 4, [r6], {60}	; 0x3c
    70c8:	21742e06 	cmncs	r4, r6, lsl #28
    70cc:	013c903c 	teqeq	ip, ip, lsr r0
    70d0:	0601062e 	streq	r0, [r1], -lr, lsr #12
    70d4:	2174902e 	cmncs	r4, lr, lsr #32
    70d8:	144f0405 	strbne	r0, [pc], #-1029	; 70e0 <__exidx_end+0x1420>
    70dc:	01060b05 	tsteq	r6, r5, lsl #22
    70e0:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    70e4:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    70e8:	05130608 	ldreq	r0, [r3, #-1544]	; 0xfffff9f8
    70ec:	04052d06 	streq	r2, [r5], #-3334	; 0xfffff2fa
    70f0:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    70f4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    70f8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    70fc:	0524060b 	streq	r0, [r4, #-1547]!	; 0xfffff9f5
    7100:	09030607 	stmdbeq	r3, {r0, r1, r2, r9, sl}
    7104:	060e0574 			; <UNDEFINED> instruction: 0x060e0574
    7108:	3e0b0501 	cfsh32cc	mvfx0, mvfx11, #1
    710c:	54030a05 	strpl	r0, [r3], #-2565	; 0xfffff5fb
    7110:	03110566 	tsteq	r1, #427819008	; 0x19800000
    7114:	16054a0a 	strne	r4, [r5], -sl, lsl #20
    7118:	00050251 	andeq	r0, r5, r1, asr r2
    711c:	028e0101 	addeq	r0, lr, #1073741824	; 0x40000000
    7120:	00030000 	andeq	r0, r3, r0
    7124:	00000288 	andeq	r0, r0, r8, lsl #5
    7128:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    712c:	0101000d 	tsteq	r1, sp
    7130:	00000101 	andeq	r0, r0, r1, lsl #2
    7134:	00000100 	andeq	r0, r0, r0, lsl #2
    7138:	73752f01 	cmnvc	r5, #1, 30
    713c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    7140:	63672f62 	cmnvs	r7, #392	; 0x188
    7144:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    7148:	6f6e2d6d 	svcvs	0x006e2d6d
    714c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7150:	2f696261 	svccs	0x00696261
    7154:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    7158:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    715c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7160:	752f0065 	strvc	r0, [pc, #-101]!	; 7103 <__exidx_end+0x1443>
    7164:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    7168:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    716c:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    7170:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    7174:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    7178:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    717c:	2f656d6f 	svccs	0x00656d6f
    7180:	70657473 	rsbvc	r7, r5, r3, ror r4
    7184:	2f6e6568 	svccs	0x006e6568
    7188:	6b736544 	blvs	1ce06a0 <__ccfg+0x1cc06f8>
    718c:	2f706f74 	svccs	0x00706f74
    7190:	4f534c4f 	svcmi	0x00534c4f
    7194:	2f54454e 	svccs	0x0054454e
    7198:	4f434950 	svcmi	0x00434950
    719c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    71a0:	2f534f63 	svccs	0x00534f63
    71a4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    71a8:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    71ac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    71b0:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    71b4:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    71b8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    71bc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    71c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 710c <__exidx_end+0x144c>
    71c4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    71c8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    71cc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    71d0:	6f746b73 	svcvs	0x00746b73
    71d4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    71d8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    71dc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    71e0:	2f534f43 	svccs	0x00534f43
    71e4:	4f636950 	svcmi	0x00636950
    71e8:	43432f53 	movtmi	r2, #16211	; 0x3f53
    71ec:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    71f0:	3143432f 	cmpcc	r3, pc, lsr #6
    71f4:	57585833 	smmlarpl	r8, r3, r8, r5
    71f8:	2f455241 	svccs	0x00455241
    71fc:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    7200:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    7204:	2f007365 	svccs	0x00007365
    7208:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    720c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    7210:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    7214:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    7218:	706f746b 	rsbvc	r7, pc, fp, ror #8
    721c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    7220:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    7224:	4349502f 	movtmi	r5, #36911	; 0x902f
    7228:	502f534f 	eorpl	r5, pc, pc, asr #6
    722c:	534f6369 	movtpl	r6, #62313	; 0xf369
    7230:	3143432f 	cmpcc	r3, pc, lsr #6
    7234:	00585833 	subseq	r5, r8, r3, lsr r8
    7238:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 7184 <__exidx_end+0x14c4>
    723c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    7240:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    7244:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    7248:	6f746b73 	svcvs	0x00746b73
    724c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    7250:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    7254:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    7258:	2f534f43 	svccs	0x00534f43
    725c:	4f636950 	svcmi	0x00636950
    7260:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    7264:	2f656d6f 	svccs	0x00656d6f
    7268:	70657473 	rsbvc	r7, r5, r3, ror r4
    726c:	2f6e6568 	svccs	0x006e6568
    7270:	6b736544 	blvs	1ce0788 <__ccfg+0x1cc07e0>
    7274:	2f706f74 	svccs	0x00706f74
    7278:	4f534c4f 	svcmi	0x00534c4f
    727c:	2f54454e 	svccs	0x0054454e
    7280:	4f434950 	svcmi	0x00434950
    7284:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    7288:	2f534f63 	svccs	0x00534f63
    728c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    7290:	00006c65 	andeq	r6, r0, r5, ror #24
    7294:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7298:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    729c:	00000100 	andeq	r0, r0, r0, lsl #2
    72a0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    72a4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    72a8:	00000100 	andeq	r0, r0, r0, lsl #2
    72ac:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    72b0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    72b4:	00000200 	andeq	r0, r0, r0, lsl #4
    72b8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    72bc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    72c0:	6c000002 	stcvs	0, cr0, [r0], {2}
    72c4:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    72c8:	00020068 	andeq	r0, r2, r8, rrx
    72cc:	5f667200 	svcpl	0x00667200
    72d0:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    72d4:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    72d8:	00030068 	andeq	r0, r3, r8, rrx
    72dc:	5f667200 	svcpl	0x00667200
    72e0:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    72e4:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    72e8:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    72ec:	00000300 	andeq	r0, r0, r0, lsl #6
    72f0:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    72f4:	5f706f72 	svcpl	0x00706f72
    72f8:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    72fc:	00030068 	andeq	r0, r3, r8, rrx
    7300:	5f667200 	svcpl	0x00667200
    7304:	63746170 	cmnvs	r4, #112, 2
    7308:	70635f68 	rsbvc	r5, r3, r8, ror #30
    730c:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    7310:	6b73666e 	blvs	1ce0cd0 <__ccfg+0x1cc0d28>
    7314:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    7318:	66720000 	ldrbtvs	r0, [r2], -r0
    731c:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    7320:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    7324:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    7328:	73666e65 	cmnvc	r6, #1616	; 0x650
    732c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    7330:	61000004 	tstvs	r0, r4
    7334:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    7338:	00050068 	andeq	r0, r5, r8, rrx
    733c:	63616d00 	cmnvs	r1, #0, 26
    7340:	00682e68 	rsbeq	r2, r8, r8, ror #28
    7344:	70000005 	andvc	r0, r0, r5
    7348:	5f736e69 	svcpl	0x00736e69
    734c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    7350:	00050068 	andeq	r0, r5, r8, rrx
    7354:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    7358:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    735c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    7360:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    7364:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    7368:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    736c:	00060068 	andeq	r0, r6, r8, rrx
    7370:	72656b00 	rsbvc	r6, r5, #0, 22
    7374:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    7378:	00070068 	andeq	r0, r7, r8, rrx
    737c:	616d7300 	cmnvs	sp, r0, lsl #6
    7380:	66727472 			; <UNDEFINED> instruction: 0x66727472
    7384:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    7388:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    738c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7390:	73000005 	movwvc	r0, #5
    7394:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    7398:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    739c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    73a0:	5f73676e 	svcpl	0x0073676e
    73a4:	685f706c 	ldmdavs	pc, {r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    73a8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    73ac:	00000005 	andeq	r0, r0, r5
    73b0:	0000019c 	muleq	r0, ip, r1
    73b4:	015f0002 	cmpeq	pc, r2
    73b8:	01020000 	mrseq	r0, (UNDEF: 2)
    73bc:	000d0efb 	strdeq	r0, [sp], -fp
    73c0:	01010101 	tsteq	r1, r1, lsl #2
    73c4:	01000000 	mrseq	r0, (UNDEF: 0)
    73c8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    73cc:	2f2e2e2f 	svccs	0x002e2e2f
    73d0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    73d4:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    73d8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    73dc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    73e0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    73e4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    73e8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    73ec:	302e302e 	eorcc	r3, lr, lr, lsr #32
    73f0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    73f4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    73f8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    73fc:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7400:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7404:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7408:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    740c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 72a4 <__exidx_end+0x15e4>
    7410:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7414:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7418:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    741c:	6f6e2d6d 	svcvs	0x006e2d6d
    7420:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7424:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7428:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    742c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7430:	615c3371 	cmpvs	ip, r1, ror r3
    7434:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7438:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    743c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7440:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7444:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7448:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    744c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7450:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7454:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7458:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    745c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7460:	31303030 	teqcc	r0, r0, lsr r0
    7464:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7468:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    746c:	61746562 	cmnvs	r4, r2, ror #10
    7470:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7474:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7478:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 72b0 <__exidx_end+0x15f0>
    747c:	6f635c73 	svcvs	0x00635c73
    7480:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7484:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7488:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    748c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7490:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7494:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7498:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    749c:	3130322d 	teqcc	r0, sp, lsr #4
    74a0:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    74a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    74a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    74ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    74b0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    74b4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    74b8:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    74bc:	2f2e0073 	svccs	0x002e0073
    74c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    74c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    74c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    74cc:	64610000 	strbtvs	r0, [r1], #-0
    74d0:	00632e69 	rsbeq	r2, r3, r9, ror #28
    74d4:	5f000001 	svcpl	0x00000001
    74d8:	61666564 	cmnvs	r6, r4, ror #10
    74dc:	5f746c75 	svcpl	0x00746c75
    74e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    74e4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    74e8:	5f000002 	svcpl	0x00000002
    74ec:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    74f0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    74f4:	00000300 	andeq	r0, r0, r0, lsl #6
    74f8:	745f7768 	ldrbvc	r7, [pc], #-1896	; 7500 <__exidx_end+0x1840>
    74fc:	73657079 	cmnvc	r5, #121	; 0x79
    7500:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    7504:	6f720000 	svcvs	0x00720000
    7508:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    750c:	63000001 	movwvs	r0, #1
    7510:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    7514:	00000100 	andeq	r0, r0, r0, lsl #2
    7518:	02050000 	andeq	r0, r5, #0
    751c:	00003960 	andeq	r3, r0, r0, ror #18
    7520:	20013503 	andcs	r3, r1, r3, lsl #10
    7524:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    7528:	214b3d01 	cmpcs	fp, r1, lsl #26
    752c:	022c232f 	eoreq	r2, ip, #-1140850688	; 0xbc000000
    7530:	01010005 	tsteq	r1, r5
    7534:	00020500 	andeq	r0, r2, r0, lsl #10
    7538:	03000000 	movweq	r0, #0
    753c:	200100c0 	andcs	r0, r1, r0, asr #1
    7540:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    7544:	2f4b3d01 	svccs	0x004b3d01
    7548:	022c232f 	eoreq	r2, ip, #-1140850688	; 0xbc000000
    754c:	01010005 	tsteq	r1, r5
    7550:	00000167 	andeq	r0, r0, r7, ror #2
    7554:	01470002 	cmpeq	r7, r2
    7558:	01020000 	mrseq	r0, (UNDEF: 2)
    755c:	000d0efb 	strdeq	r0, [sp], -fp
    7560:	01010101 	tsteq	r1, r1, lsl #2
    7564:	01000000 	mrseq	r0, (UNDEF: 0)
    7568:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    756c:	2f2e2e2f 	svccs	0x002e2e2f
    7570:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7574:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7578:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    757c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7580:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7584:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7588:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    758c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7590:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7594:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7598:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    759c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    75a0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    75a4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    75a8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    75ac:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7444 <__exidx_end+0x1784>
    75b0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    75b4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    75b8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    75bc:	6f6e2d6d 	svcvs	0x006e2d6d
    75c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    75c4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    75c8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    75cc:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    75d0:	615c3371 	cmpvs	ip, r1, ror r3
    75d4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    75d8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    75dc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    75e0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    75e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    75e8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    75ec:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    75f0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    75f4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    75f8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    75fc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7600:	31303030 	teqcc	r0, r0, lsr r0
    7604:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7608:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    760c:	61746562 	cmnvs	r4, r2, ror #10
    7610:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7614:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7618:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7450 <__exidx_end+0x1790>
    761c:	6f635c73 	svcvs	0x00635c73
    7620:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7624:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7628:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    762c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7630:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7634:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7638:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    763c:	3130322d 	teqcc	r0, sp, lsr #4
    7640:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7644:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7648:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    764c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7650:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7654:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7658:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    765c:	61000073 	tstvs	r0, r3, ror r0
    7660:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    7664:	6f6d7461 	svcvs	0x006d7461
    7668:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    766c:	5f000001 	svcpl	0x00000001
    7670:	61666564 	cmnvs	r6, r4, ror #10
    7674:	5f746c75 	svcpl	0x00746c75
    7678:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    767c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7680:	5f000002 	svcpl	0x00000002
    7684:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7688:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    768c:	00000300 	andeq	r0, r0, r0, lsl #6
    7690:	5f6e6f61 	svcpl	0x006e6f61
    7694:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    7698:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    769c:	00000100 	andeq	r0, r0, r0, lsl #2
    76a0:	02050000 	andeq	r0, r5, #0
    76a4:	00003988 	andeq	r3, r0, r8, lsl #19
    76a8:	1a013c03 	bne	566bc <__ccfg+0x36714>
    76ac:	77032f36 	smladxvc	r3, r6, pc, r2	; <UNPREDICTABLE>
    76b0:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    76b4:	09023d4c 	stmdbeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    76b8:	a9010100 	stmdbge	r1, {r8}
    76bc:	02000001 	andeq	r0, r0, #1
    76c0:	00014100 	andeq	r4, r1, r0, lsl #2
    76c4:	fb010200 	blx	47ece <__ccfg+0x27f26>
    76c8:	01000d0e 	tsteq	r0, lr, lsl #26
    76cc:	00010101 	andeq	r0, r1, r1, lsl #2
    76d0:	00010000 	andeq	r0, r1, r0
    76d4:	2f2e0100 	svccs	0x002e0100
    76d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    76dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    76e0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    76e4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    76e8:	63006269 	movwvs	r6, #617	; 0x269
    76ec:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    76f0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    76f4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    76f8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    76fc:	5f393130 	svcpl	0x00393130
    7700:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7704:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7708:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    770c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7710:	6f745c36 	svcvs	0x00745c36
    7714:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7718:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    771c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7720:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7724:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7728:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    772c:	61652d65 	cmnvs	r5, r5, ror #26
    7730:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7734:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7738:	71353130 	teqvc	r5, r0, lsr r1
    773c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7740:	6f6e2d6d 	svcvs	0x006e2d6d
    7744:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7748:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    774c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7750:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7754:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    7758:	00656e69 	rsbeq	r6, r5, r9, ror #28
    775c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7760:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7764:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7768:	302e302e 	eorcc	r3, lr, lr, lsr #32
    776c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7770:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7774:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7778:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    777c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7780:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7784:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7788:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7620 <__exidx_end+0x1960>
    778c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7790:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7794:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7798:	6f6e2d6d 	svcvs	0x006e2d6d
    779c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    77a0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    77a4:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    77a8:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    77ac:	615c3371 	cmpvs	ip, r1, ror r3
    77b0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    77b4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    77b8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    77bc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    77c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    77c4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    77c8:	6f610000 	svcvs	0x00610000
    77cc:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    77d0:	00632e63 	rsbeq	r2, r3, r3, ror #28
    77d4:	5f000001 	svcpl	0x00000001
    77d8:	61666564 	cmnvs	r6, r4, ror #10
    77dc:	5f746c75 	svcpl	0x00746c75
    77e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    77e4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    77e8:	5f000002 	svcpl	0x00000002
    77ec:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    77f0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    77f4:	00000300 	andeq	r0, r0, r0, lsl #6
    77f8:	5f6e6f61 	svcpl	0x006e6f61
    77fc:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    7800:	00010068 	andeq	r0, r1, r8, rrx
    7804:	05000000 	streq	r0, [r0, #-0]
    7808:	0039b802 	eorseq	fp, r9, r2, lsl #16
    780c:	013e0300 	teqeq	lr, r0, lsl #6
    7810:	01040200 	mrseq	r0, R12_usr
    7814:	00010a03 	andeq	r0, r1, r3, lsl #20
    7818:	21010402 	tstcs	r1, r2, lsl #8
    781c:	01040200 	mrseq	r0, R12_usr
    7820:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    7824:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    7828:	00210104 	eoreq	r0, r1, r4, lsl #2
    782c:	21010402 	tstcs	r1, r2, lsl #8
    7830:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    7834:	00010100 	andeq	r0, r1, r0, lsl #2
    7838:	39d80205 	ldmibcc	r8, {r0, r2, r9}^
    783c:	d7030000 	strle	r0, [r3, -r0]
    7840:	02000100 	andeq	r0, r0, #0, 2
    7844:	0c030104 	stfeqs	f0, [r3], {4}
    7848:	04020001 	streq	r0, [r2], #-1
    784c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    7850:	001f0104 	andseq	r0, pc, r4, lsl #2
    7854:	21010402 	tstcs	r1, r2, lsl #8
    7858:	01040200 	mrseq	r0, R12_usr
    785c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    7860:	02312101 	eorseq	r2, r1, #1073741824	; 0x40000000
    7864:	01010005 	tsteq	r1, r5
    7868:	0000019c 	muleq	r0, ip, r1
    786c:	01390002 	teqeq	r9, r2
    7870:	01020000 	mrseq	r0, (UNDEF: 2)
    7874:	000d0efb 	strdeq	r0, [sp], -fp
    7878:	01010101 	tsteq	r1, r1, lsl #2
    787c:	01000000 	mrseq	r0, (UNDEF: 0)
    7880:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7884:	2f2e2e2f 	svccs	0x002e2e2f
    7888:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    788c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7890:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7894:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7898:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    789c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    78a0:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    78a4:	302e302e 	eorcc	r3, lr, lr, lsr #32
    78a8:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    78ac:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    78b0:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    78b4:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    78b8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    78bc:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    78c0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    78c4:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 775c <__exidx_end+0x1a9c>
    78c8:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    78cc:	63675c72 	cmnvs	r7, #29184	; 0x7200
    78d0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    78d4:	6f6e2d6d 	svcvs	0x006e2d6d
    78d8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    78dc:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    78e0:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    78e4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    78e8:	615c3371 	cmpvs	ip, r1, ror r3
    78ec:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    78f0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    78f4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    78f8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    78fc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7900:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7904:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7908:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    790c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7910:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7914:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7918:	31303030 	teqcc	r0, r0, lsr r0
    791c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7920:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7924:	61746562 	cmnvs	r4, r2, ror #10
    7928:	63635c32 	cmnvs	r3, #12800	; 0x3200
    792c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7930:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7768 <__exidx_end+0x1aa8>
    7934:	6f635c73 	svcvs	0x00635c73
    7938:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    793c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7940:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7944:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7948:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    794c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7950:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7954:	3130322d 	teqcc	r0, sp, lsr #4
    7958:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    795c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7960:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7964:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7968:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    796c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7970:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7974:	63000073 	movwvs	r0, #115	; 0x73
    7978:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
    797c:	00000100 	andeq	r0, r0, r0, lsl #2
    7980:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7984:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7988:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    798c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7990:	00000200 	andeq	r0, r0, r0, lsl #4
    7994:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7998:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    799c:	00030068 	andeq	r0, r3, r8, rrx
    79a0:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    79a4:	0100682e 	tsteq	r0, lr, lsr #16
    79a8:	00000000 	andeq	r0, r0, r0
    79ac:	39f00205 	ldmibcc	r0!, {r0, r2, r9}^
    79b0:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    79b4:	12030100 	andne	r0, r3, #0, 2
    79b8:	00040201 	andeq	r0, r4, r1, lsl #4
    79bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    79c0:	00000002 	andeq	r0, r0, r2
    79c4:	01c00300 	biceq	r0, r0, r0, lsl #6
    79c8:	01110301 	tsteq	r1, r1, lsl #6
    79cc:	01000302 	tsteq	r0, r2, lsl #6
    79d0:	02050001 	andeq	r0, r5, #1
    79d4:	000039f8 	strdeq	r3, [r0], -r8
    79d8:	01028d03 	tsteq	r2, r3, lsl #26
    79dc:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    79e0:	01010004 	tsteq	r1, r4
    79e4:	00020500 	andeq	r0, r2, r0, lsl #10
    79e8:	03000000 	movweq	r0, #0
    79ec:	030102d8 	movweq	r0, #4824	; 0x12d8
    79f0:	03020111 	movweq	r0, #8465	; 0x2111
    79f4:	00010100 	andeq	r0, r1, r0, lsl #2
    79f8:	00000205 	andeq	r0, r0, r5, lsl #4
    79fc:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    7a00:	02160103 	andseq	r0, r6, #-1073741824	; 0xc0000000
    7a04:	01010004 	tsteq	r1, r4
    7a08:	000002d6 	ldrdeq	r0, [r0], -r6
    7a0c:	017c0002 	cmneq	ip, r2
    7a10:	01020000 	mrseq	r0, (UNDEF: 2)
    7a14:	000d0efb 	strdeq	r0, [sp], -fp
    7a18:	01010101 	tsteq	r1, r1, lsl #2
    7a1c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a20:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7a24:	2f2e2e2f 	svccs	0x002e2e2f
    7a28:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7a2c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7a30:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7a34:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7a38:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7a3c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7a40:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7a44:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7a48:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7a4c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7a50:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7a54:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7a58:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7a5c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7a60:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7a64:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 78fc <__exidx_end+0x1c3c>
    7a68:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7a6c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7a70:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7a74:	6f6e2d6d 	svcvs	0x006e2d6d
    7a78:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7a7c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7a80:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7a84:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7a88:	615c3371 	cmpvs	ip, r1, ror r3
    7a8c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7a90:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7a94:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7a98:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7a9c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7aa0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7aa4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7aa8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7aac:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7ab0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7ab4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7ab8:	31303030 	teqcc	r0, r0, lsr r0
    7abc:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7ac0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7ac4:	61746562 	cmnvs	r4, r2, ror #10
    7ac8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7acc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7ad0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7908 <__exidx_end+0x1c48>
    7ad4:	6f635c73 	svcvs	0x00635c73
    7ad8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7adc:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7ae0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7ae4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7ae8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7aec:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7af0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7af4:	3130322d 	teqcc	r0, sp, lsr #4
    7af8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7afc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7b00:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7b04:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7b08:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7b0c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7b10:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7b14:	2f2e0073 	svccs	0x002e0073
    7b18:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7b1c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7b20:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    7b24:	736f0000 	cmnvc	pc, #0
    7b28:	00632e63 	rsbeq	r2, r3, r3, ror #28
    7b2c:	6f000001 	svcvs	0x00000001
    7b30:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    7b34:	00000100 	andeq	r0, r0, r0, lsl #2
    7b38:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7b3c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7b40:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7b44:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7b48:	00000200 	andeq	r0, r0, r0, lsl #4
    7b4c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7b50:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7b54:	00030068 	andeq	r0, r3, r8, rrx
    7b58:	5f776800 	svcpl	0x00776800
    7b5c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7b60:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7b64:	72000004 	andvc	r0, r0, #4
    7b68:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7b6c:	00000100 	andeq	r0, r0, r0, lsl #2
    7b70:	5f6e6f61 	svcpl	0x006e6f61
    7b74:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    7b78:	00010068 	andeq	r0, r1, r8, rrx
    7b7c:	6e6f6100 	powvse	f6, f7, f0
    7b80:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    7b84:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    7b88:	00010068 	andeq	r0, r1, r8, rrx
    7b8c:	05000000 	streq	r0, [r0, #-0]
    7b90:	003a0002 	eorseq	r0, sl, r2
    7b94:	00e50300 	rsceq	r0, r5, r0, lsl #6
    7b98:	0f032001 	svceq	0x00032001
    7b9c:	20710320 	rsbscs	r0, r1, r0, lsr #6
    7ba0:	25200f03 	strcs	r0, [r0, #-3843]!	; 0xfffff0fd
    7ba4:	309e0903 	addscc	r0, lr, r3, lsl #18
    7ba8:	339e0903 	orrscc	r0, lr, #49152	; 0xc000
    7bac:	000702a3 	andeq	r0, r7, r3, lsr #5
    7bb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7bb4:	003a5c02 	eorseq	r5, sl, r2, lsl #24
    7bb8:	01a00300 	lsleq	r0, r0, #6
    7bbc:	2e0c0301 	cdpcs	3, 0, cr0, cr12, cr1, {0}
    7bc0:	7a038822 	bvc	e9c50 <__ccfg+0xc9ca8>
    7bc4:	0225263c 	eoreq	r2, r5, #60, 12	; 0x3c00000
    7bc8:	01010006 	tsteq	r1, r6
    7bcc:	00020500 	andeq	r0, r2, r0, lsl #10
    7bd0:	03000000 	movweq	r0, #0
    7bd4:	200101c2 	andcs	r0, r1, r2, asr #3
    7bd8:	03349125 	teqeq	r4, #1073741833	; 0x40000009
    7bdc:	03272e79 			; <UNDEFINED> instruction: 0x03272e79
    7be0:	00262e7a 	eoreq	r2, r6, sl, ror lr
    7be4:	03010402 	movweq	r0, #5122	; 0x1402
    7be8:	0200207a 	andeq	r2, r0, #122	; 0x7a
    7bec:	30500104 	subscc	r0, r0, r4, lsl #2
    7bf0:	241f302d 	ldrcs	r3, [pc], #-45	; 7bf8 <__exidx_end+0x1f38>
    7bf4:	341f3d4b 	ldrcc	r3, [pc], #-3403	; 7bfc <__exidx_end+0x1f3c>
    7bf8:	03326c3d 	teqeq	r2, #15616	; 0x3d00
    7bfc:	1003666d 	andne	r6, r3, sp, ror #12
    7c00:	0902263c 	stmdbeq	r2, {r2, r3, r4, r5, r9, sl, sp}
    7c04:	00010100 	andeq	r0, r1, r0, lsl #2
    7c08:	3a880205 	bcc	fe208424 <_estack+0xde203424>
    7c0c:	f3030000 	vhadd.u8	d0, d3, d0
    7c10:	4b210101 	blmi	84801c <__ccfg+0x828074>
    7c14:	01000702 	tsteq	r0, r2, lsl #14
    7c18:	02050001 	andeq	r0, r5, #1
    7c1c:	00003aa0 	andeq	r3, r0, r0, lsr #21
    7c20:	01028003 	tsteq	r2, r3
    7c24:	03020424 	movweq	r0, #9252	; 0x2424
    7c28:	01045822 	tsteq	r4, r2, lsr #16
    7c2c:	04826203 	streq	r6, [r2], #515	; 0x203
    7c30:	203c0302 	eorscs	r0, ip, r2, lsl #6
    7c34:	4a030104 	bmi	c804c <__ccfg+0xa80a4>
    7c38:	211f3d4a 	tstcs	pc, sl, asr #26
    7c3c:	30221f3d 	eorcc	r1, r2, sp, lsr pc
    7c40:	2322301f 			; <UNDEFINED> instruction: 0x2322301f
    7c44:	01000c02 	tsteq	r0, r2, lsl #24
    7c48:	02050001 	andeq	r0, r5, #1
    7c4c:	00003b00 	andeq	r3, r0, r0, lsl #22
    7c50:	0102a303 	tsteq	r2, r3, lsl #6
    7c54:	02044f25 	andeq	r4, r4, #37, 30	; 0x94
    7c58:	044a1703 	strbeq	r1, [sl], #-1795	; 0xfffff8fd
    7c5c:	4a6d0301 	bmi	1b48868 <__ccfg+0x1b288c0>
    7c60:	0009024b 	andeq	r0, r9, fp, asr #4
    7c64:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c68:	00000002 	andeq	r0, r0, r2
    7c6c:	02bc0300 	adcseq	r0, ip, #0, 6
    7c70:	17032201 	strne	r2, [r3, -r1, lsl #4]
    7c74:	20690320 	rsbcs	r0, r9, r0, lsr #6
    7c78:	3c100328 	ldccc	3, cr0, [r0], {40}	; 0x28
    7c7c:	032e6c03 			; <UNDEFINED> instruction: 0x032e6c03
    7c80:	6d032e15 	stcvs	14, cr2, [r3, #-84]	; 0xffffffac
    7c84:	20130358 	andscs	r0, r3, r8, asr r3
    7c88:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    7c8c:	023f2011 	eorseq	r2, pc, #17
    7c90:	01010006 	tsteq	r1, r6
    7c94:	00020500 	andeq	r0, r2, r0, lsl #10
    7c98:	03000000 	movweq	r0, #0
    7c9c:	030102e3 	movweq	r0, #4835	; 0x12e3
    7ca0:	024d0121 	subeq	r0, sp, #1073741832	; 0x40000008
    7ca4:	01010002 	tsteq	r1, r2
    7ca8:	00020500 	andeq	r0, r2, r0, lsl #10
    7cac:	03000000 	movweq	r0, #0
    7cb0:	03010390 	movweq	r0, #5008	; 0x1390
    7cb4:	1f212010 	svcne	0x00212010
    7cb8:	02002121 	andeq	r2, r0, #1073741832	; 0x40000008
    7cbc:	003e0104 	eorseq	r0, lr, r4, lsl #2
    7cc0:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7cc4:	341d313d 	ldrcc	r3, [sp], #-317	; 0xfffffec3
    7cc8:	01000702 	tsteq	r0, r2, lsl #14
    7ccc:	02050001 	andeq	r0, r5, #1
    7cd0:	00000000 	andeq	r0, r0, r0
    7cd4:	0103b503 	tsteq	r3, r3, lsl #10
    7cd8:	332c3117 			; <UNDEFINED> instruction: 0x332c3117
    7cdc:	0005023d 	andeq	r0, r5, sp, lsr r2
    7ce0:	03a70101 			; <UNDEFINED> instruction: 0x03a70101
    7ce4:	00020000 	andeq	r0, r2, r0
    7ce8:	00000265 	andeq	r0, r0, r5, ror #4
    7cec:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7cf0:	0101000d 	tsteq	r1, sp
    7cf4:	00000101 	andeq	r0, r0, r1, lsl #2
    7cf8:	00000100 	andeq	r0, r0, r0, lsl #2
    7cfc:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7d00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7d04:	2f2e2e2f 	svccs	0x002e2e2f
    7d08:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7d0c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7d10:	3a630062 	bcc	18c7ea0 <__ccfg+0x18a7ef8>
    7d14:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7d18:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7d1c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7d20:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7d24:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7d28:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7d2c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7d30:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7d34:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7d38:	6f6f745c 	svcvs	0x006f745c
    7d3c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7d40:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7d44:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7d48:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7d4c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7d50:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7d54:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7d58:	5f342d69 	svcpl	0x00342d69
    7d5c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7d60:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7d64:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7d68:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7d6c:	61652d65 	cmnvs	r5, r5, ror #26
    7d70:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7d74:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7d78:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7d7c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7d80:	6300656e 	movwvs	r6, #1390	; 0x56e
    7d84:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7d88:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7d8c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7d90:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7d94:	5f393130 	svcpl	0x00393130
    7d98:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7d9c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7da0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7da4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7da8:	6f745c36 	svcvs	0x00745c36
    7dac:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7db0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7db4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7db8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7dbc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7dc0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7dc4:	61652d65 	cmnvs	r5, r5, ror #26
    7dc8:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7dcc:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7dd0:	71353130 	teqvc	r5, r0, lsr r1
    7dd4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7dd8:	6f6e2d6d 	svcvs	0x006e2d6d
    7ddc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7de0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7de4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7de8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7dec:	00737973 	rsbseq	r7, r3, r3, ror r9
    7df0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7df4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7df8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7dfc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7e00:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7e04:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7e08:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7e0c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7e10:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7e14:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7e18:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7e1c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7cb4 <__exidx_end+0x1ff4>
    7e20:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7e24:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7e28:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7e2c:	6f6e2d6d 	svcvs	0x006e2d6d
    7e30:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7e34:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7e38:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7e3c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7e40:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    7e44:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    7e48:	615c6363 	cmpvs	ip, r3, ror #6
    7e4c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7e50:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7e54:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7e58:	392e345c 	stmdbcc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    7e5c:	695c332e 	ldmdbvs	ip, {r1, r2, r3, r5, r8, r9, ip, sp}^
    7e60:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7e64:	63006564 	movwvs	r6, #1380	; 0x564
    7e68:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7e6c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7e70:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7e74:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7e78:	5f393130 	svcpl	0x00393130
    7e7c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7e80:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7e84:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7e88:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7e8c:	6f745c36 	svcvs	0x00745c36
    7e90:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7e94:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7e98:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7e9c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7ea0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7ea4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7ea8:	61652d65 	cmnvs	r5, r5, ror #26
    7eac:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7eb0:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7eb4:	71353130 	teqvc	r5, r0, lsr r1
    7eb8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7ebc:	6f6e2d6d 	svcvs	0x006e2d6d
    7ec0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7ec4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7ec8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7ecc:	00656475 	rsbeq	r6, r5, r5, ror r4
    7ed0:	63667200 	cmnvs	r6, #0, 4
    7ed4:	0100632e 	tsteq	r0, lr, lsr #6
    7ed8:	66720000 	ldrbtvs	r0, [r2], -r0
    7edc:	00682e63 	rsbeq	r2, r8, r3, ror #28
    7ee0:	5f000001 	svcpl	0x00000001
    7ee4:	61666564 	cmnvs	r6, r4, ror #10
    7ee8:	5f746c75 	svcpl	0x00746c75
    7eec:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7ef0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7ef4:	5f000002 	svcpl	0x00000002
    7ef8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7efc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7f00:	00000300 	andeq	r0, r0, r0, lsl #6
    7f04:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    7f08:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    7f0c:	00000400 	andeq	r0, r0, r0, lsl #8
    7f10:	6d5f6672 	ldclvs	6, cr6, [pc, #-456]	; 7d50 <__exidx_end+0x2090>
    7f14:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    7f18:	682e786f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}
    7f1c:	00000100 	andeq	r0, r0, r0, lsl #2
    7f20:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    7f24:	6f6d6d6f 	svcvs	0x006d6d6f
    7f28:	6d635f6e 	stclvs	15, cr5, [r3, #-440]!	; 0xfffffe48
    7f2c:	00682e64 	rsbeq	r2, r8, r4, ror #28
    7f30:	72000001 	andvc	r0, r0, #1
    7f34:	72705f66 	rsbsvc	r5, r0, #408	; 0x198
    7f38:	635f706f 	cmpvs	pc, #111	; 0x6f
    7f3c:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    7f40:	00000100 	andeq	r0, r0, r0, lsl #2
    7f44:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7f48:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    7f4c:	00000500 	andeq	r0, r0, r0, lsl #10
    7f50:	02050000 	andeq	r0, r5, #0
    7f54:	00000000 	andeq	r0, r0, r0
    7f58:	0100e803 	tsteq	r0, r3, lsl #16
    7f5c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    7f60:	02003101 	andeq	r3, r0, #1073741824	; 0x40000000
    7f64:	3f2f0104 	svccc	0x002f0104
    7f68:	01000302 	tsteq	r0, r2, lsl #6
    7f6c:	02050001 	andeq	r0, r5, #1
    7f70:	00003b34 	andeq	r3, r0, r4, lsr fp
    7f74:	0100fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    7f78:	01040200 	mrseq	r0, R12_usr
    7f7c:	03020413 	movweq	r0, #9235	; 0x2413
    7f80:	044a01c7 	strbeq	r0, [sl], #-455	; 0xfffffe39
    7f84:	7ebd0301 	cdpvc	3, 11, cr0, cr13, cr1, {0}
    7f88:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    7f8c:	02042201 	andeq	r2, r4, #268435456	; 0x10000000
    7f90:	3c01c103 	stfccd	f4, [r1], {3}
    7f94:	c2030104 	andgt	r0, r3, #4, 2
    7f98:	022f3c7e 	eoreq	r3, pc, #32256	; 0x7e00
    7f9c:	01010005 	tsteq	r1, r5
    7fa0:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    7fa4:	0300003b 	movweq	r0, #59	; 0x3b
    7fa8:	1401018f 	strne	r0, [r1], #-399	; 0xfffffe71
    7fac:	1b251d23 	blne	94f440 <__ccfg+0x92f498>
    7fb0:	1f2f3d76 	svcne	0x002f3d76
    7fb4:	2d222f21 	stccs	15, cr2, [r2, #-132]!	; 0xffffff7c
    7fb8:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    7fbc:	0101000c 	tsteq	r1, ip
    7fc0:	a8020500 	stmdage	r2, {r8, sl}
    7fc4:	0300003b 	movweq	r0, #59	; 0x3b
    7fc8:	150101a4 	strne	r0, [r1, #-420]	; 0xfffffe5c
    7fcc:	211c2f96 			; <UNDEFINED> instruction: 0x211c2f96
    7fd0:	1f212525 	svcne	0x00212525
    7fd4:	660a032f 	strvs	r0, [sl], -pc, lsr #6
    7fd8:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    7fdc:	18035873 	stmdane	r3, {r0, r1, r4, r5, r6, fp, ip, lr}
    7fe0:	2f3d3d66 	svccs	0x003d3d66
    7fe4:	3d586803 	ldclcc	8, cr6, [r8, #-12]
    7fe8:	0b032f3d 	bleq	d3ce4 <__ccfg+0xb3d3c>
    7fec:	2f3d3d58 	svccs	0x003d3d58
    7ff0:	3d580b03 	vldrcc	d16, [r8, #-12]
    7ff4:	3d5c2f3d 	ldclcc	15, cr2, [ip, #-244]	; 0xffffff0c
    7ff8:	3d5c2f3d 	ldclcc	15, cr2, [ip, #-244]	; 0xffffff0c
    7ffc:	02492f3e 	subeq	r2, r9, #62, 30	; 0xf8
    8000:	0101002f 	tsteq	r1, pc, lsr #32
    8004:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    8008:	0300003c 	movweq	r0, #60	; 0x3c
    800c:	030101f3 	movweq	r0, #4595	; 0x11f3
    8010:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    8014:	2009032e 	andcs	r0, r9, lr, lsr #6
    8018:	232121af 			; <UNDEFINED> instruction: 0x232121af
    801c:	2f22221f 	svccs	0x0022221f
    8020:	4a0b0326 	bmi	2c8cc0 <__ccfg+0x2a8d18>
    8024:	335a2f2d 	cmpcc	sl, #45, 30	; 0xb4
    8028:	02040200 	andeq	r0, r4, #0, 4
    802c:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    8030:	14033c11 	strne	r3, [r3], #-3089	; 0xfffff3ef
    8034:	2e6f03f2 	mcrcs	3, 3, r0, cr15, cr2, {7}
    8038:	034a2303 	movteq	r2, #41731	; 0xa303
    803c:	224c3c62 	subcs	r3, ip, #25088	; 0x6200
    8040:	4c323632 	ldcmi	6, cr3, [r2], #-200	; 0xffffff38
    8044:	09035022 	stmdbeq	r3, {r1, r5, ip, lr}
    8048:	26595eac 	ldrbcs	r5, [r9], -ip, lsr #29
    804c:	66620336 			; <UNDEFINED> instruction: 0x66620336
    8050:	01001602 	tsteq	r0, r2, lsl #12
    8054:	02050001 	andeq	r0, r5, #1
    8058:	00003e10 	andeq	r3, r0, r0, lsl lr
    805c:	0102f703 	tsteq	r2, r3, lsl #14	; <UNPREDICTABLE>
    8060:	0302ad2f 	movweq	sl, #11567	; 0x2d2f
    8064:	00010100 	andeq	r0, r1, r0, lsl #2
    8068:	00000205 	andeq	r0, r0, r5, lsl #4
    806c:	82030000 	andhi	r0, r3, #0
    8070:	5d240103 	stfpls	f0, [r4, #-12]!
    8074:	01002a02 	tsteq	r0, r2, lsl #20
    8078:	02050001 	andeq	r0, r5, #1
    807c:	00003e30 	andeq	r3, r0, r0, lsr lr
    8080:	01039603 	tsteq	r3, r3, lsl #12
    8084:	413e2321 	teqmi	lr, r1, lsr #6
    8088:	01000602 	tsteq	r0, r2, lsl #12
    808c:	0001e901 	andeq	lr, r1, r1, lsl #18
    8090:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    8094:	02000001 	andeq	r0, r0, #1
    8098:	0d0efb01 	vstreq	d15, [lr, #-4]
    809c:	01010100 	mrseq	r0, (UNDEF: 17)
    80a0:	00000001 	andeq	r0, r0, r1
    80a4:	01000001 	tsteq	r0, r1
    80a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    80ac:	2f2e2e2f 	svccs	0x002e2e2f
    80b0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 80b8 <__exidx_end+0x23f8>
    80b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    80b8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    80bc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    80c0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    80c4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    80c8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    80cc:	31303030 	teqcc	r0, r0, lsr r0
    80d0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    80d4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    80d8:	61746562 	cmnvs	r4, r2, ror #10
    80dc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    80e0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    80e4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7f1c <__exidx_end+0x225c>
    80e8:	6f635c73 	svcvs	0x00635c73
    80ec:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    80f0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    80f4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    80f8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    80fc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8100:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8104:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    8108:	3130322d 	teqcc	r0, sp, lsr #4
    810c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    8110:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8114:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8118:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    811c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    8120:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8124:	616d5c65 	cmnvs	sp, r5, ror #24
    8128:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    812c:	3a630065 	bcc	18c82c8 <__ccfg+0x18a8320>
    8130:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8134:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8138:	302e322e 	eorcc	r3, lr, lr, lsr #4
    813c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8140:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8144:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8148:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    814c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8150:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8154:	6f6f745c 	svcvs	0x006f745c
    8158:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    815c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8160:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8164:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8168:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    816c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8170:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8174:	5f342d69 	svcpl	0x00342d69
    8178:	30322d39 	eorscc	r2, r2, r9, lsr sp
    817c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8180:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8184:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8188:	61652d65 	cmnvs	r5, r5, ror #26
    818c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8190:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8194:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    8198:	00007379 	andeq	r7, r0, r9, ror r3
    819c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    81a0:	00632e70 	rsbeq	r2, r3, r0, ror lr
    81a4:	61000001 	tstvs	r0, r1
    81a8:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    81ac:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    81b0:	00000100 	andeq	r0, r0, r0, lsl #2
    81b4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    81b8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    81bc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    81c0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    81c4:	00000200 	andeq	r0, r0, r0, lsl #4
    81c8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    81cc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    81d0:	00030068 	andeq	r0, r3, r8, rrx
    81d4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    81d8:	725f7075 	subsvc	r7, pc, #117	; 0x75
    81dc:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    81e0:	00000100 	andeq	r0, r0, r0, lsl #2
    81e4:	70696863 	rsbvc	r6, r9, r3, ror #16
    81e8:	6f666e69 	svcvs	0x00666e69
    81ec:	0100682e 	tsteq	r0, lr, lsr #16
    81f0:	65730000 	ldrbvs	r0, [r3, #-0]!
    81f4:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    81f8:	00010068 	andeq	r0, r1, r8, rrx
    81fc:	05000000 	streq	r0, [r0, #-0]
    8200:	003e4c02 	eorseq	r4, lr, r2, lsl #24
    8204:	028d0300 	addeq	r0, sp, #0, 6
    8208:	0a032001 	beq	d0214 <__ccfg+0xb026c>
    820c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    8210:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    8214:	1f212d43 	svcne	0x00212d43
    8218:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    821c:	01046604 	tsteq	r4, r4, lsl #12
    8220:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    8224:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    8228:	2f3d2d4a 	svccs	0x003d2d4a
    822c:	2f2f1f2f 	svccs	0x002f1f2f
    8230:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    8234:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    8238:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    823c:	0101001e 	tsteq	r1, lr, lsl r0
    8240:	20020500 	andcs	r0, r2, r0, lsl #10
    8244:	0300003f 	movweq	r0, #63	; 0x3f
    8248:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    824c:	41334330 	teqmi	r3, r0, lsr r3
    8250:	333c0903 	teqcc	ip, #49152	; 0xc000
    8254:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    8258:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    825c:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    8260:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    8264:	03496742 	movteq	r6, #38722	; 0x9742
    8268:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    826c:	004b6924 	subeq	r6, fp, r4, lsr #18
    8270:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    8274:	0013024d 	andseq	r0, r3, sp, asr #4
    8278:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    827c:	00020000 	andeq	r0, r2, r0
    8280:	00000165 	andeq	r0, r0, r5, ror #2
    8284:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8288:	0101000d 	tsteq	r1, sp
    828c:	00000101 	andeq	r0, r0, r1, lsl #2
    8290:	00000100 	andeq	r0, r0, r0, lsl #2
    8294:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8298:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    829c:	2f2e2e2f 	svccs	0x002e2e2f
    82a0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    82a4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    82a8:	3a630062 	bcc	18c8438 <__ccfg+0x18a8490>
    82ac:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    82b0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    82b4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    82b8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    82bc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    82c0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    82c4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    82c8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    82cc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    82d0:	6f6f745c 	svcvs	0x006f745c
    82d4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    82d8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    82dc:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    82e0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    82e4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    82e8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    82ec:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    82f0:	5f342d69 	svcpl	0x00342d69
    82f4:	30322d39 	eorscc	r2, r2, r9, lsr sp
    82f8:	33713531 	cmncc	r1, #205520896	; 0xc400000
    82fc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8300:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8304:	61652d65 	cmnvs	r5, r5, ror #26
    8308:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    830c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8310:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8314:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8318:	6300656e 	movwvs	r6, #1390	; 0x56e
    831c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8320:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8324:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8328:	30302e30 	eorscc	r2, r0, r0, lsr lr
    832c:	5f393130 	svcpl	0x00393130
    8330:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8334:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8338:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    833c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8340:	6f745c36 	svcvs	0x00745c36
    8344:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8348:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    834c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8350:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8354:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8358:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    835c:	61652d65 	cmnvs	r5, r5, ror #26
    8360:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8364:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8368:	71353130 	teqvc	r5, r0, lsr r1
    836c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8370:	6f6e2d6d 	svcvs	0x006e2d6d
    8374:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8378:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    837c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8380:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8384:	00737973 	rsbseq	r7, r3, r3, ror r9
    8388:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    838c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    8390:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    8394:	00000100 	andeq	r0, r0, r0, lsl #2
    8398:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    839c:	6f725f70 	svcvs	0x00725f70
    83a0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    83a4:	73000001 	movwvc	r0, #1
    83a8:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    83ac:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    83b0:	00010068 	andeq	r0, r1, r8, rrx
    83b4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    83b8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    83bc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    83c0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    83c4:	00020068 	andeq	r0, r2, r8, rrx
    83c8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    83cc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    83d0:	0300682e 	movweq	r6, #2094	; 0x82e
    83d4:	64640000 	strbtvs	r0, [r4], #-0
    83d8:	00682e69 	rsbeq	r2, r8, r9, ror #28
    83dc:	6f000001 	svcvs	0x00000001
    83e0:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    83e4:	00000100 	andeq	r0, r0, r0, lsl #2
    83e8:	02050000 	andeq	r0, r5, #0
    83ec:	00003fc4 	andeq	r3, r0, r4, asr #31
    83f0:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    83f4:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    83f8:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    83fc:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    8400:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    8404:	01042000 	mrseq	r2, (UNDEF: 4)
    8408:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    840c:	d9030204 	stmdble	r3, {r2, r9}
    8410:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    8414:	ac030104 	stfges	f0, [r3], {4}
    8418:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    841c:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    8420:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    8424:	03587803 	cmpeq	r8, #196608	; 0x30000
    8428:	7303200d 	movwvc	r2, #12301	; 0x300d
    842c:	2010033c 	andscs	r0, r0, ip, lsr r3
    8430:	21212121 			; <UNDEFINED> instruction: 0x21212121
    8434:	01000d02 	tsteq	r0, r2, lsl #26
    8438:	02050001 	andeq	r0, r5, #1
    843c:	00004040 	andeq	r4, r0, r0, asr #32
    8440:	0101bf03 	tsteq	r1, r3, lsl #30
    8444:	4a78031a 	bmi	1e090b4 <__ccfg+0x1de910c>
    8448:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    844c:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    8450:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    8454:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    8458:	3002042d 	andcc	r0, r2, sp, lsr #8
    845c:	03010421 	movweq	r0, #5153	; 0x1421
    8460:	2f3d2e0b 	svccs	0x003d2e0b
    8464:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    8468:	302c4d66 	eorcc	r4, ip, r6, ror #26
    846c:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    8470:	01001502 	tsteq	r0, r2, lsl #10
    8474:	02050001 	andeq	r0, r5, #1
    8478:	000040ec 	andeq	r4, r0, ip, ror #1
    847c:	01049f03 	tsteq	r4, r3, lsl #30
    8480:	03010c03 	movweq	r0, #7171	; 0x1c03
    8484:	77032009 	strvc	r2, [r3, -r9]
    8488:	33312120 	teqcc	r1, #32, 2
    848c:	31303027 	teqcc	r0, r7, lsr #32
    8490:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    8494:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    8498:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    849c:	03207603 			; <UNDEFINED> instruction: 0x03207603
    84a0:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    84a4:	00010100 	andeq	r0, r1, r0, lsl #2
    84a8:	41480205 	cmpmi	r8, r5, lsl #4
    84ac:	e5030000 	str	r0, [r3, #-0]
    84b0:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    84b4:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    84b8:	00050233 	andeq	r0, r5, r3, lsr r2
    84bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    84c0:	00000002 	andeq	r0, r0, r2
    84c4:	05810300 	streq	r0, [r1, #768]	; 0x300
    84c8:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    84cc:	01010006 	tsteq	r1, r6
    84d0:	60020500 	andvs	r0, r2, r0, lsl #10
    84d4:	03000041 	movweq	r0, #65	; 0x41
    84d8:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    84dc:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    84e0:	01010006 	tsteq	r1, r6
    84e4:	70020500 	andvc	r0, r2, r0, lsl #10
    84e8:	03000041 	movweq	r0, #65	; 0x41
    84ec:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    84f0:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    84f4:	01010008 	tsteq	r1, r8
    84f8:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    84fc:	03000041 	movweq	r0, #65	; 0x41
    8500:	030105db 	movweq	r0, #5595	; 0x15db
    8504:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    8508:	20770320 	rsbscs	r0, r7, r0, lsr #6
    850c:	03200903 			; <UNDEFINED> instruction: 0x03200903
    8510:	2a352079 	bcs	d506fc <__ccfg+0xd30754>
    8514:	30312232 	eorscc	r2, r1, r2, lsr r2
    8518:	30274732 	eorcc	r4, r7, r2, lsr r7
    851c:	17034732 	smladxne	r3, r2, r7, r4
    8520:	3a36372e 	bcc	d961e0 <__ccfg+0xd76238>
    8524:	00080227 	andeq	r0, r8, r7, lsr #4
    8528:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    852c:	0041e802 	subeq	lr, r1, r2, lsl #16
    8530:	06a90300 	strteq	r0, [r9], r0, lsl #6
    8534:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    8538:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    853c:	01010003 	tsteq	r1, r3
    8540:	fc020500 	stc2	5, cr0, [r2], {-0}
    8544:	03000041 	movweq	r0, #65	; 0x41
    8548:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    854c:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    8550:	00030220 	andeq	r0, r3, r0, lsr #4
    8554:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8558:	00421002 	subeq	r1, r2, r2
    855c:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    8560:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    8564:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    8568:	01010003 	tsteq	r1, r3
    856c:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    8570:	03000042 	movweq	r0, #66	; 0x42
    8574:	160106e2 	strne	r0, [r1], -r2, ror #13
    8578:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    857c:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    8580:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    8584:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    8588:	01010003 	tsteq	r1, r3
    858c:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    8590:	03000042 	movweq	r0, #66	; 0x42
    8594:	16010782 	strne	r0, [r1], -r2, lsl #15
    8598:	00060233 	andeq	r0, r6, r3, lsr r2
    859c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    85a0:	00425c02 	subeq	r5, r2, r2, lsl #24
    85a4:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    85a8:	43211601 			; <UNDEFINED> instruction: 0x43211601
    85ac:	03333429 	teqeq	r3, #687865856	; 0x29000000
    85b0:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    85b4:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    85b8:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    85bc:	00010100 	andeq	r0, r1, r0, lsl #2
    85c0:	42880205 	addmi	r0, r8, #1342177280	; 0x50000000
    85c4:	b4030000 	strlt	r0, [r3], #-0
    85c8:	21150107 	tstcs	r5, r7, lsl #2
    85cc:	20090355 	andcs	r0, r9, r5, asr r3
    85d0:	01000302 	tsteq	r0, r2, lsl #6
    85d4:	02050001 	andeq	r0, r5, #1
    85d8:	0000429c 	muleq	r0, ip, r2
    85dc:	0107c803 	tsteq	r7, r3, lsl #16
    85e0:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    85e4:	0302200a 	movweq	r2, #8202	; 0x200a
    85e8:	00010100 	andeq	r0, r1, r0, lsl #2
    85ec:	42b00205 	adcsmi	r0, r0, #1342177280	; 0x50000000
    85f0:	a7030000 	strge	r0, [r3, -r0]
    85f4:	03200102 			; <UNDEFINED> instruction: 0x03200102
    85f8:	1f3d2009 	svcne	0x003d2009
    85fc:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    8600:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    8604:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    8608:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    860c:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    8610:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    8614:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    8618:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    861c:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    8620:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    8624:	033d3c09 	teqeq	sp, #2304	; 0x900
    8628:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    862c:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    8630:	40211f3d 	eormi	r1, r1, sp, lsr pc
    8634:	0012024b 	andseq	r0, r2, fp, asr #4
    8638:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    863c:	0043c002 	subeq	ip, r3, r2
    8640:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    8644:	04020001 	streq	r0, [r2], #-1
    8648:	200e0301 	andcs	r0, lr, r1, lsl #6
    864c:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    8650:	4b684d1d 	blmi	1a1bacc <__ccfg+0x19fbb24>
    8654:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    8658:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    865c:	315b3d01 	cmpcc	fp, r1, lsl #26
    8660:	01000b02 	tsteq	r0, r2, lsl #22
    8664:	02050001 	andeq	r0, r5, #1
    8668:	00004424 	andeq	r4, r0, r4, lsr #8
    866c:	01089303 	tsteq	r8, r3, lsl #6
    8670:	2f010903 	svccs	0x00010903
    8674:	0022212d 	eoreq	r2, r2, sp, lsr #2
    8678:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    867c:	0007024b 	andeq	r0, r7, fp, asr #4
    8680:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8684:	00444c02 	subeq	r4, r4, r2, lsl #24
    8688:	039b0300 	orrseq	r0, fp, #0, 6
    868c:	01090301 	tsteq	r9, r1, lsl #6
    8690:	203c7703 	eorscs	r7, ip, r3, lsl #14
    8694:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    8698:	0a033130 	beq	d4b60 <__ccfg+0xb4bb8>
    869c:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    86a0:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 8588 <__exidx_end+0x28c8>
    86a4:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    86a8:	5226501c 	eorpl	r5, r6, #28
    86ac:	2f4d4f3d 	svccs	0x004d4f3d
    86b0:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    86b4:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    86b8:	5b4b0104 	blpl	12c8ad0 <__ccfg+0x12a8b28>
    86bc:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    86c0:	4a09033f 	bmi	2493c4 <__ccfg+0x22941c>
    86c4:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    86c8:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    86cc:	4a7db903 	bmi	1f76ae0 <__ccfg+0x1f56b38>
    86d0:	01001f02 	tsteq	r0, r2, lsl #30
    86d4:	00036501 	andeq	r6, r3, r1, lsl #10
    86d8:	a8000200 	stmdage	r0, {r9}
    86dc:	02000001 	andeq	r0, r0, #1
    86e0:	0d0efb01 	vstreq	d15, [lr, #-4]
    86e4:	01010100 	mrseq	r0, (UNDEF: 17)
    86e8:	00000001 	andeq	r0, r0, r1
    86ec:	01000001 	tsteq	r0, r1
    86f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    86f4:	2f2e2e2f 	svccs	0x002e2e2f
    86f8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 8700 <__exidx_end+0x2a40>
    86fc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    8700:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    8704:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8708:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    870c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    8710:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    8714:	31303030 	teqcc	r0, r0, lsr r0
    8718:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    871c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    8720:	61746562 	cmnvs	r4, r2, ror #10
    8724:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8728:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    872c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 8564 <__exidx_end+0x28a4>
    8730:	6f635c73 	svcvs	0x00635c73
    8734:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    8738:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    873c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    8740:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8744:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8748:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    874c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    8750:	3130322d 	teqcc	r0, sp, lsr #4
    8754:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    8758:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    875c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8760:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8764:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    8768:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    876c:	616d5c65 	cmnvs	sp, r5, ror #24
    8770:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    8774:	3a630065 	bcc	18c8910 <__ccfg+0x18a8968>
    8778:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    877c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8780:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8784:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8788:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    878c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8790:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8794:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8798:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    879c:	6f6f745c 	svcvs	0x006f745c
    87a0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    87a4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    87a8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    87ac:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    87b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    87b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    87b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    87bc:	5f342d69 	svcpl	0x00342d69
    87c0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    87c4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    87c8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    87cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    87d0:	61652d65 	cmnvs	r5, r5, ror #26
    87d4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    87d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    87dc:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    87e0:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    87e4:	2f2e2e2f 	svccs	0x002e2e2f
    87e8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    87ec:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    87f0:	73000063 	movwvc	r0, #99	; 0x63
    87f4:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    87f8:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    87fc:	00010063 	andeq	r0, r1, r3, rrx
    8800:	6e6f6100 	powvse	f6, f7, f0
    8804:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    8808:	0100682e 	tsteq	r0, lr, lsr #16
    880c:	736f0000 	cmnvc	pc, #0
    8810:	00682e63 	rsbeq	r2, r8, r3, ror #28
    8814:	70000001 	andvc	r0, r0, r1
    8818:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    881c:	00010068 	andeq	r0, r1, r8, rrx
    8820:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    8824:	725f7075 	subsvc	r7, pc, #117	; 0x75
    8828:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    882c:	00000100 	andeq	r0, r0, r0, lsl #2
    8830:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    8834:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    8838:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    883c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8840:	00000200 	andeq	r0, r0, r0, lsl #4
    8844:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    8848:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    884c:	00030068 	andeq	r0, r3, r8, rrx
    8850:	5f776800 	svcpl	0x00776800
    8854:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8858:	00682e73 	rsbeq	r2, r8, r3, ror lr
    885c:	72000004 	andvc	r0, r0, #4
    8860:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    8864:	00000100 	andeq	r0, r0, r0, lsl #2
    8868:	5f737973 	svcpl	0x00737973
    886c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    8870:	0100682e 	tsteq	r0, lr, lsr #16
    8874:	6f610000 	svcvs	0x00610000
    8878:	61625f6e 	cmnvs	r2, lr, ror #30
    887c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    8880:	0100682e 	tsteq	r0, lr, lsr #16
    8884:	00000000 	andeq	r0, r0, r0
    8888:	00000205 	andeq	r0, r0, r5, lsl #4
    888c:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    8890:	02040100 	andeq	r0, r4, #0, 2
    8894:	0102e903 	tsteq	r2, r3, lsl #18
    8898:	97030104 	strls	r0, [r3, -r4, lsl #2]
    889c:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    88a0:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    88a4:	01040200 	mrseq	r0, R12_usr
    88a8:	2000ce03 	andcs	ip, r0, r3, lsl #28
    88ac:	02000104 	andeq	r0, r0, #4, 2
    88b0:	d1030104 	tstle	r3, r4, lsl #2
    88b4:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    88b8:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    88bc:	4b896701 	blmi	fe2624c8 <_estack+0xde25d4c8>
    88c0:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    88c4:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    88c8:	03010458 	movweq	r0, #5208	; 0x1458
    88cc:	004a7ee4 	subeq	r7, sl, r4, ror #29
    88d0:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    88d4:	81030404 	tsthi	r3, r4, lsl #8
    88d8:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    88dc:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    88e0:	0001043c 	andeq	r0, r1, ip, lsr r4
    88e4:	03010402 	movweq	r0, #5122	; 0x1402
    88e8:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    88ec:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    88f0:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    88f4:	00204203 	eoreq	r4, r0, r3, lsl #4
    88f8:	03010402 	movweq	r0, #5122	; 0x1402
    88fc:	01042e14 	tsteq	r4, r4, lsl lr
    8900:	01040200 	mrseq	r0, R12_usr
    8904:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    8908:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    890c:	4b83281b 	blmi	fe0d2980 <_estack+0xde0cd980>
    8910:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    8914:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    8918:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    891c:	3c140301 	ldccc	3, cr0, [r4], {1}
    8920:	02000104 	andeq	r0, r0, #4, 2
    8924:	8d030104 	stfhis	f0, [r3, #-16]
    8928:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    892c:	01010017 	tsteq	r1, r7, lsl r0
    8930:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    8934:	03000045 	movweq	r0, #69	; 0x45
    8938:	030101da 	movweq	r0, #4570	; 0x11da
    893c:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    8940:	201d0320 	andscs	r0, sp, r0, lsr #6
    8944:	32412f59 	subcc	r2, r1, #356	; 0x164
    8948:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    894c:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    8950:	0305041b 	movweq	r0, #21531	; 0x541b
    8954:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    8958:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    895c:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    8960:	50030504 	andpl	r0, r3, r4, lsl #10
    8964:	01042120 	tsteq	r4, r0, lsr #2
    8968:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    896c:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    8970:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    8974:	03050420 	movweq	r0, #21536	; 0x5420
    8978:	0104204d 	tsteq	r4, sp, asr #32
    897c:	2f2e3403 	svccs	0x002e3403
    8980:	2f692365 	svccs	0x00692365
    8984:	213e214d 	teqcs	lr, sp, asr #2
    8988:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    898c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    8990:	ca4a0f03 	bgt	128c5a4 <__ccfg+0x126c5fc>
    8994:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    8998:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    899c:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    89a0:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    89a4:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    89a8:	31312026 	teqcc	r1, r6, lsr #32
    89ac:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    89b0:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    89b4:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    89b8:	03200903 			; <UNDEFINED> instruction: 0x03200903
    89bc:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    89c0:	7103213c 	tstvc	r3, ip, lsr r1
    89c4:	3c0f0320 	stccc	3, cr0, [pc], {32}
    89c8:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    89cc:	23212265 			; <UNDEFINED> instruction: 0x23212265
    89d0:	20780328 	rsbscs	r0, r8, r8, lsr #6
    89d4:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    89d8:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    89dc:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    89e0:	01010021 	tsteq	r1, r1, lsr #32
    89e4:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    89e8:	03000047 	movweq	r0, #71	; 0x47
    89ec:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    89f0:	a22f2240 	eorge	r2, pc, #64, 4
    89f4:	2a404e24 	bcs	101c28c <__ccfg+0xffc2e4>
    89f8:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    89fc:	00010100 	andeq	r0, r1, r0, lsl #2
    8a00:	00000205 	andeq	r0, r0, r5, lsl #4
    8a04:	e5030000 	str	r0, [r3, #-0]
    8a08:	0c030103 	stfeqs	f0, [r3], {3}
    8a0c:	30282f20 	eorcc	r2, r8, r0, lsr #30
    8a10:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    8a14:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    8a18:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    8a1c:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    8a20:	1e224b2f 	vmulne.f64	d4, d2, d31
    8a24:	000c023e 	andeq	r0, ip, lr, lsr r2
    8a28:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8a2c:	00481c02 	subeq	r1, r8, r2, lsl #24
    8a30:	04a60300 	strteq	r0, [r6], #768	; 0x300
    8a34:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    8a38:	00040226 	andeq	r0, r4, r6, lsr #4
    8a3c:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    8a40:	00020000 	andeq	r0, r2, r0
    8a44:	00000143 	andeq	r0, r0, r3, asr #2
    8a48:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8a4c:	0101000d 	tsteq	r1, sp
    8a50:	00000101 	andeq	r0, r0, r1, lsl #2
    8a54:	00000100 	andeq	r0, r0, r0, lsl #2
    8a58:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8a5c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8a60:	2f2e2e2f 	svccs	0x002e2e2f
    8a64:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    8a68:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8a6c:	3a630062 	bcc	18c8bfc <__ccfg+0x18a8c54>
    8a70:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8a74:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8a78:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8a7c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8a80:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8a84:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8a88:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8a8c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8a90:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8a94:	6f6f745c 	svcvs	0x006f745c
    8a98:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8a9c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8aa0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8aa4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8aa8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8aac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8ab0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8ab4:	5f342d69 	svcpl	0x00342d69
    8ab8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8abc:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8ac0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8ac4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8ac8:	61652d65 	cmnvs	r5, r5, ror #26
    8acc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8ad0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8ad4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8ad8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8adc:	6300656e 	movwvs	r6, #1390	; 0x56e
    8ae0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8ae4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8ae8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8aec:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8af0:	5f393130 	svcpl	0x00393130
    8af4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8af8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8afc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8b00:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8b04:	6f745c36 	svcvs	0x00745c36
    8b08:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8b0c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8b10:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8b14:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8b18:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8b1c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8b20:	61652d65 	cmnvs	r5, r5, ror #26
    8b24:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8b28:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8b2c:	71353130 	teqvc	r5, r0, lsr r1
    8b30:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8b34:	6f6e2d6d 	svcvs	0x006e2d6d
    8b38:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8b3c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8b40:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8b44:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8b48:	00737973 	rsbseq	r7, r3, r3, ror r9
    8b4c:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    8b50:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    8b54:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    8b58:	63000001 	movwvs	r0, #1
    8b5c:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    8b60:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    8b64:	00010068 	andeq	r0, r1, r8, rrx
    8b68:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    8b6c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8b70:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8b74:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8b78:	00020068 	andeq	r0, r2, r8, rrx
    8b7c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8b80:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8b84:	0300682e 	movweq	r6, #2094	; 0x82e
    8b88:	00000000 	andeq	r0, r0, r0
    8b8c:	00000205 	andeq	r0, r0, r5, lsl #4
    8b90:	c4030000 	strgt	r0, [r3], #-0
    8b94:	2f130100 	svccs	0x00130100
    8b98:	01000602 	tsteq	r0, r2, lsl #12
    8b9c:	02050001 	andeq	r0, r5, #1
    8ba0:	00000000 	andeq	r0, r0, r0
    8ba4:	0100d003 	tsteq	r0, r3
    8ba8:	0a032f14 	beq	d4800 <__ccfg+0xb4858>
    8bac:	0008022e 	andeq	r0, r8, lr, lsr #4
    8bb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8bb4:	00483402 	subeq	r3, r8, r2, lsl #8
    8bb8:	00e60300 	rsceq	r0, r6, r0, lsl #6
    8bbc:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    8bc0:	9b030204 	blls	c93d8 <__ccfg+0xa9430>
    8bc4:	01042e01 	tsteq	r4, r1, lsl #28
    8bc8:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    8bcc:	4b4b4c23 	blmi	12dbc60 <__ccfg+0x12bbcb8>
    8bd0:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    8bd4:	01010005 	tsteq	r1, r5
    8bd8:	00020500 	andeq	r0, r2, r0, lsl #10
    8bdc:	03000000 	movweq	r0, #0
    8be0:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    8be4:	01b00302 	lslseq	r0, r2, #6
    8be8:	03010420 	movweq	r0, #5152	; 0x1420
    8bec:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    8bf0:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    8bf4:	4a0a033c 	bmi	2898ec <__ccfg+0x269944>
    8bf8:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    8bfc:	01000502 	tsteq	r0, r2, lsl #10
    8c00:	02050001 	andeq	r0, r5, #1
    8c04:	00004880 	andeq	r4, r0, r0, lsl #17
    8c08:	0101a603 	tsteq	r1, r3, lsl #12
    8c0c:	e3030204 	movw	r0, #12804	; 0x3204
    8c10:	11032000 	mrsne	r2, (UNDEF: 3)
    8c14:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 8b64 <__exidx_end+0x2ea4>
    8c18:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    8c1c:	8c030104 	stfhis	f0, [r3], {4}
    8c20:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    8c24:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    8c28:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    8c2c:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    8c30:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    8c34:	30032064 	andcc	r2, r3, r4, rrx
    8c38:	00040220 	andeq	r0, r4, r0, lsr #4
    8c3c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8c40:	0048ec02 	subeq	lr, r8, r2, lsl #24
    8c44:	01e00300 	mvneq	r0, r0, lsl #6
    8c48:	03020401 	movweq	r0, #9217	; 0x2401
    8c4c:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    8c50:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    8c54:	0302042e 	movweq	r0, #9262	; 0x242e
    8c58:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    8c5c:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    8c60:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    8c64:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    8c68:	01000202 	tsteq	r0, r2, lsl #4
    8c6c:	00021e01 	andeq	r1, r2, r1, lsl #28
    8c70:	42000200 	andmi	r0, r0, #0, 4
    8c74:	02000001 	andeq	r0, r0, #1
    8c78:	0d0efb01 	vstreq	d15, [lr, #-4]
    8c7c:	01010100 	mrseq	r0, (UNDEF: 17)
    8c80:	00000001 	andeq	r0, r0, r1
    8c84:	01000001 	tsteq	r0, r1
    8c88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8c8c:	2f2e2e2f 	svccs	0x002e2e2f
    8c90:	642f2e2e 	strtvs	r2, [pc], #-3630	; 8c98 <__exidx_end+0x2fd8>
    8c94:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    8c98:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    8c9c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8ca0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    8ca4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    8ca8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    8cac:	31303030 	teqcc	r0, r0, lsr r0
    8cb0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    8cb4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    8cb8:	61746562 	cmnvs	r4, r2, ror #10
    8cbc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8cc0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    8cc4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 8afc <__exidx_end+0x2e3c>
    8cc8:	6f635c73 	svcvs	0x00635c73
    8ccc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    8cd0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    8cd4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    8cd8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8cdc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8ce0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8ce4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    8ce8:	3130322d 	teqcc	r0, sp, lsr #4
    8cec:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    8cf0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8cf4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8cf8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8cfc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    8d00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8d04:	616d5c65 	cmnvs	sp, r5, ror #24
    8d08:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    8d0c:	3a630065 	bcc	18c8ea8 <__ccfg+0x18a8f00>
    8d10:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8d14:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8d18:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8d1c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8d20:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8d24:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8d28:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8d2c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8d30:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8d34:	6f6f745c 	svcvs	0x006f745c
    8d38:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8d3c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8d40:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8d44:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8d48:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8d4c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8d50:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8d54:	5f342d69 	svcpl	0x00342d69
    8d58:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8d5c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8d60:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8d64:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8d68:	61652d65 	cmnvs	r5, r5, ror #26
    8d6c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8d70:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8d74:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    8d78:	00007379 	andeq	r7, r0, r9, ror r3
    8d7c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    8d80:	00010068 	andeq	r0, r1, r8, rrx
    8d84:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    8d88:	0100632e 	tsteq	r0, lr, lsr #6
    8d8c:	645f0000 	ldrbvs	r0, [pc], #-0	; 8d94 <__exidx_end+0x30d4>
    8d90:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8d94:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8d9c <__exidx_end+0x30dc>
    8d98:	73657079 	cmnvc	r5, #121	; 0x79
    8d9c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8da0:	735f0000 	cmpvc	pc, #0
    8da4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8da8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8dac:	63000003 	movwvs	r0, #3
    8db0:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    8db4:	00000100 	andeq	r0, r0, r0, lsl #2
    8db8:	02050000 	andeq	r0, r5, #0
    8dbc:	00004904 	andeq	r4, r0, r4, lsl #18
    8dc0:	01018803 	tsteq	r1, r3, lsl #16
    8dc4:	50303120 	eorspl	r3, r0, r0, lsr #2
    8dc8:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    8dcc:	0005022c 	andeq	r0, r5, ip, lsr #4
    8dd0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8dd4:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    8dd8:	03000049 	movweq	r0, #73	; 0x49
    8ddc:	030100c3 	movweq	r0, #4291	; 0x10c3
    8de0:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    8de4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8de8:	02050002 	andeq	r0, r5, #2
    8dec:	00000000 	andeq	r0, r0, r0
    8df0:	0100d803 	tsteq	r0, r3, lsl #16
    8df4:	33010e03 	movwcc	r0, #7683	; 0x1e03
    8df8:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    8dfc:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    8e00:	01010004 	tsteq	r1, r4
    8e04:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8e08:	00000002 	andeq	r0, r0, r2
    8e0c:	01850300 	orreq	r0, r5, r0, lsl #6
    8e10:	20110301 	andscs	r0, r1, r1, lsl #6
    8e14:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    8e18:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    8e1c:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    8e20:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    8e24:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    8e28:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    8e2c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8e30:	02050002 	andeq	r0, r5, #2
    8e34:	00000000 	andeq	r0, r0, r0
    8e38:	0101af03 	tsteq	r1, r3, lsl #30
    8e3c:	1b201103 	blne	80d250 <__ccfg+0x7ed2a8>
    8e40:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    8e44:	042f2013 	strteq	r2, [pc], #-19	; 8e4c <__exidx_end+0x318c>
    8e48:	20690301 	rsbcs	r0, r9, r1, lsl #6
    8e4c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    8e50:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    8e54:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    8e58:	01000502 	tsteq	r0, r2, lsl #10
    8e5c:	00020401 	andeq	r0, r2, r1, lsl #8
    8e60:	00000205 	andeq	r0, r0, r5, lsl #4
    8e64:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    8e68:	11030101 	tstne	r3, r1, lsl #2
    8e6c:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    8e70:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    8e74:	0104302d 	tsteq	r4, sp, lsr #32
    8e78:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    8e7c:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    8e80:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    8e84:	00c80302 	sbceq	r0, r8, r2, lsl #6
    8e88:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    8e8c:	43010100 	movwmi	r0, #4352	; 0x1100
    8e90:	03000002 	movweq	r0, #2
    8e94:	00019500 	andeq	r9, r1, r0, lsl #10
    8e98:	fb010200 	blx	496a2 <__ccfg+0x296fa>
    8e9c:	01000d0e 	tsteq	r0, lr, lsl #26
    8ea0:	00010101 	andeq	r0, r1, r1, lsl #2
    8ea4:	00010000 	andeq	r0, r1, r0
    8ea8:	2e2e0100 	sufcse	f0, f6, f0
    8eac:	2f2e2e2f 	svccs	0x002e2e2f
    8eb0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8eb4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8eb8:	2f2e2e2f 	svccs	0x002e2e2f
    8ebc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8ec0:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    8ec4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8ec8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8ecc:	616d2f63 	cmnvs	sp, r3, ror #30
    8ed0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    8ed4:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    8ed8:	2e2e2f6d 	cdpcs	15, 2, cr2, cr14, cr13, {3}
    8edc:	2f2e2e2f 	svccs	0x002e2e2f
    8ee0:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8ee4:	2f00676e 	svccs	0x0000676e
    8ee8:	2f727375 	svccs	0x00727375
    8eec:	2f62696c 	svccs	0x0062696c
    8ef0:	2f636367 	svccs	0x00636367
    8ef4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8ef8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8efc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8f00:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    8f04:	2f312e33 	svccs	0x00312e33
    8f08:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8f0c:	00656475 	rsbeq	r6, r5, r5, ror r4
    8f10:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8f14:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8f18:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f1c:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8f20:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8f24:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8f28:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8f2c:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8f30:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8f34:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8f38:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8f3c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8f40:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8f44:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    8f48:	622f0073 	eorvs	r0, pc, #115	; 0x73
    8f4c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8f50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8f54:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8f58:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8f5c:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8f60:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f64:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8f68:	2f302e33 	svccs	0x00302e33
    8f6c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8f70:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8dd4 <__exidx_end+0x3114>
    8f74:	2f636269 	svccs	0x00636269
    8f78:	61636f6c 	cmnvs	r3, ip, ror #30
    8f7c:	2f00656c 	svccs	0x0000656c
    8f80:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8f84:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8f88:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8f8c:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8f90:	2f787945 	svccs	0x00787945
    8f94:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8f98:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8f9c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8fa0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8fa4:	2f62696c 	svccs	0x0062696c
    8fa8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8fac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8fb0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8fb4:	656d0000 	strbvs	r0, [sp, #-0]!
    8fb8:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    8fbc:	0100632e 	tsteq	r0, lr, lsr #6
    8fc0:	74730000 	ldrbtvc	r0, [r3], #-0
    8fc4:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    8fc8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8fcc:	745f0000 	ldrbvc	r0, [pc], #-0	; 8fd4 <__exidx_end+0x3314>
    8fd0:	73657079 	cmnvc	r5, #121	; 0x79
    8fd4:	0300682e 	movweq	r6, #2094	; 0x82e
    8fd8:	65720000 	ldrbvs	r0, [r2, #-0]!
    8fdc:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    8fe0:	00030068 	andeq	r0, r3, r8, rrx
    8fe4:	636f6c00 	cmnvs	pc, #0, 24
    8fe8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    8fec:	73000003 	movwvc	r0, #3
    8ff0:	6f6c7465 	svcvs	0x006c7465
    8ff4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    8ff8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    8ffc:	74730000 	ldrbtvc	r0, [r3], #-0
    9000:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    9004:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    9008:	63770000 	cmnvs	r7, #0
    900c:	2e726168 	rpwcssz	f6, f2, #0.0
    9010:	00050068 	andeq	r0, r5, r8, rrx
    9014:	636f6c00 	cmnvs	pc, #0, 24
    9018:	2e656c61 	cdpcs	12, 6, cr6, cr5, cr1, {3}
    901c:	00050068 	andeq	r0, r5, r8, rrx
    9020:	72747300 	rsbsvc	r7, r4, #0, 6
    9024:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    9028:	00050068 	andeq	r0, r5, r8, rrx
    902c:	01050000 	mrseq	r0, (UNDEF: 5)
    9030:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    9034:	03000049 	movweq	r0, #73	; 0x49
    9038:	03050133 	movweq	r0, #20787	; 0x5133
    903c:	13010e03 	movwne	r0, #7683	; 0x1e03
    9040:	05161313 	ldreq	r1, [r6, #-787]	; 0xfffffced
    9044:	6b030601 	blvs	ca850 <__ccfg+0xaa8a8>
    9048:	03060501 	movweq	r0, #25857	; 0x6501
    904c:	1c053c15 	stcne	12, cr3, [r5], {21}
    9050:	01040200 	mrseq	r0, R12_usr
    9054:	0018052e 	andseq	r0, r8, lr, lsr #10
    9058:	66010402 	strvs	r0, [r1], -r2, lsl #8
    905c:	01040200 	mrseq	r0, R12_usr
    9060:	060b059e 			; <UNDEFINED> instruction: 0x060b059e
    9064:	061a0528 	ldreq	r0, [sl], -r8, lsr #10
    9068:	05393013 	ldreq	r3, [r9, #-19]!	; 0xffffffed
    906c:	132f060b 			; <UNDEFINED> instruction: 0x132f060b
    9070:	01061a05 	tsteq	r6, r5, lsl #20
    9074:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
    9078:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    907c:	207a030d 	rsbscs	r0, sl, sp, lsl #6
    9080:	204a0a03 	subcs	r0, sl, r3, lsl #20
    9084:	0520203c 	streq	r2, [r0, #-60]!	; 0xffffffc4
    9088:	0530060b 	ldreq	r0, [r0, #-1547]!	; 0xfffff9f5
    908c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    9090:	062f060b 	strteq	r0, [pc], -fp, lsl #12
    9094:	1d0d0501 	cfstr32ne	mvfx0, [sp, #-4]
    9098:	05204a58 	streq	r4, [r0, #-2648]!	; 0xfffff5a8
    909c:	200b030e 	andcs	r0, fp, lr, lsl #6
    90a0:	03200905 			; <UNDEFINED> instruction: 0x03200905
    90a4:	052e2e5e 	streq	r2, [lr, #-3678]!	; 0xfffff1a2
    90a8:	23030605 	movwcs	r0, #13829	; 0x3605
    90ac:	060c0520 	streq	r0, [ip], -r0, lsr #10
    90b0:	3b090501 	blcc	24a4bc <__ccfg+0x22a514>
    90b4:	05330105 	ldreq	r0, [r3, #-261]!	; 0xfffffefb
    90b8:	58590309 	ldmdapl	r9, {r0, r3, r8, r9}^
    90bc:	22030e05 	andcs	r0, r3, #5, 28	; 0x50
    90c0:	20090520 	andcs	r0, r9, r0, lsr #10
    90c4:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
    90c8:	205e0309 	subscs	r0, lr, r9, lsl #6
    90cc:	17030d05 	strne	r0, [r3, -r5, lsl #26]
    90d0:	0002022e 	andeq	r0, r2, lr, lsr #4
    90d4:	01710101 	cmneq	r1, r1, lsl #2
    90d8:	00030000 	andeq	r0, r3, r0
    90dc:	00000117 	andeq	r0, r0, r7, lsl r1
    90e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    90e4:	0101000d 	tsteq	r1, sp
    90e8:	00000101 	andeq	r0, r0, r1, lsl #2
    90ec:	00000100 	andeq	r0, r0, r0, lsl #2
    90f0:	2f2e2e01 	svccs	0x002e2e01
    90f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    90f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    90fc:	2f2e2e2f 	svccs	0x002e2e2f
    9100:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9104:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    9108:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    910c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9110:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    9114:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    9118:	73752f00 	cmnvc	r5, #0, 30
    911c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    9120:	63672f62 	cmnvs	r7, #392	; 0x188
    9124:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    9128:	6f6e2d6d 	svcvs	0x006e2d6d
    912c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    9130:	2f696261 	svccs	0x00696261
    9134:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    9138:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    913c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9140:	622f0065 	eorvs	r0, pc, #101	; 0x65
    9144:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    9148:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    914c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    9150:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    9154:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    9158:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    915c:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    9160:	2f302e33 	svccs	0x00302e33
    9164:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9168:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8fcc <__exidx_end+0x330c>
    916c:	2f636269 	svccs	0x00636269
    9170:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    9174:	2f656475 	svccs	0x00656475
    9178:	00737973 	rsbseq	r7, r3, r3, ror r9
    917c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    9180:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    9184:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9188:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    918c:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    9190:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    9194:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    9198:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    919c:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    91a0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    91a4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    91a8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    91ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    91b0:	72000065 	andvc	r0, r0, #101	; 0x65
    91b4:	2e646e61 	cdpcs	14, 6, cr6, cr4, cr1, {3}
    91b8:	00010063 	andeq	r0, r1, r3, rrx
    91bc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    91c0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    91c4:	00020068 	andeq	r0, r2, r8, rrx
    91c8:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    91cc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    91d0:	00030068 	andeq	r0, r3, r8, rrx
    91d4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    91d8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    91dc:	00000300 	andeq	r0, r0, r0, lsl #6
    91e0:	6b636f6c 	blvs	18e4f98 <__ccfg+0x18c4ff0>
    91e4:	0300682e 	movweq	r6, #2094	; 0x82e
    91e8:	74730000 	ldrbtvc	r0, [r3], #-0
    91ec:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    91f0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    91f4:	05000000 	streq	r0, [r0, #-0]
    91f8:	02050001 	andeq	r0, r5, #1
    91fc:	000049e0 	andeq	r4, r0, r0, ror #19
    9200:	05013e03 	streq	r3, [r1, #-3587]	; 0xfffff1fd
    9204:	1d051303 	stcne	3, cr1, [r5, #-12]
    9208:	13030514 	movwne	r0, #13588	; 0x3514
    920c:	01061b05 	tsteq	r6, r5, lsl #22
    9210:	0520202e 	streq	r2, [r0, #-46]!	; 0xffffffd2
    9214:	4e062f01 	cdpmi	15, 0, cr2, cr6, cr1, {0}
    9218:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    921c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    9220:	12051f01 	andne	r1, r5, #1, 30
    9224:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    9228:	13030525 	movwne	r0, #13605	; 0x3525
    922c:	13060605 	movwne	r0, #26117	; 0x6605
    9230:	4a201e05 	bmi	810a4c <__ccfg+0x7f0aa4>
    9234:	052e4405 	streq	r4, [lr, #-1029]!	; 0xfffffbfb
    9238:	0305491b 	movweq	r4, #22811	; 0x591b
    923c:	0a053006 	beq	15525c <__ccfg+0x1352b4>
    9240:	01050106 	tsteq	r5, r6, lsl #2
    9244:	0a02012f 	beq	89708 <__ccfg+0x69760>
    9248:	dc010100 	stfles	f0, [r1], {-0}
    924c:	03000000 	movweq	r0, #0
    9250:	0000d600 	andeq	sp, r0, r0, lsl #12
    9254:	fb010200 	blx	49a5e <__ccfg+0x29ab6>
    9258:	01000d0e 	tsteq	r0, lr, lsl #26
    925c:	00010101 	andeq	r0, r1, r1, lsl #2
    9260:	00010000 	andeq	r0, r1, r0
    9264:	752f0100 	strvc	r0, [pc, #-256]!	; 916c <__exidx_end+0x34ac>
    9268:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 90a4 <__exidx_end+0x33e4>
    926c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    9270:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    9274:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    9278:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    927c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    9280:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    9284:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    9288:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    928c:	2f006564 	svccs	0x00006564
    9290:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    9294:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    9298:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    929c:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    92a0:	2f787945 	svccs	0x00787945
    92a4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    92a8:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    92ac:	302e332e 	eorcc	r3, lr, lr, lsr #6
    92b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    92b4:	2f62696c 	svccs	0x0062696c
    92b8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    92bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    92c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    92c4:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    92c8:	2f2e2e00 	svccs	0x002e2e00
    92cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92d4:	2f2e2e2f 	svccs	0x002e2e2f
    92d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92dc:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    92e0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    92e4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    92e8:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    92ec:	00746e65 	rsbseq	r6, r4, r5, ror #28
    92f0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    92f4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    92f8:	00010068 	andeq	r0, r1, r8, rrx
    92fc:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    9300:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    9304:	00020068 	andeq	r0, r2, r8, rrx
    9308:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    930c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    9310:	00000200 	andeq	r0, r0, r0, lsl #4
    9314:	6b636f6c 	blvs	18e50cc <__ccfg+0x18c5124>
    9318:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    931c:	6d690000 	stclvs	0, cr0, [r9, #-0]
    9320:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    9324:	0300632e 	movweq	r6, #814	; 0x32e
    9328:	9b000000 	blls	9330 <__exidx_end+0x3670>
    932c:	03000001 	movweq	r0, #1
    9330:	0000e200 	andeq	lr, r0, r0, lsl #4
    9334:	fb010200 	blx	49b3e <__ccfg+0x29b96>
    9338:	01000d0e 	tsteq	r0, lr, lsl #26
    933c:	00010101 	andeq	r0, r1, r1, lsl #2
    9340:	00010000 	andeq	r0, r1, r0
    9344:	2e2e0100 	sufcse	f0, f6, f0
    9348:	2f2e2e2f 	svccs	0x002e2e2f
    934c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9350:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9354:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9358:	00636367 	rsbeq	r6, r3, r7, ror #6
    935c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9360:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9364:	2f2e2e2f 	svccs	0x002e2e2f
    9368:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 92b8 <__exidx_end+0x35f8>
    936c:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    9370:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    9374:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    9378:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    937c:	2f2e2e00 	svccs	0x002e2e00
    9380:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9384:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9388:	672f2e2f 	strvs	r2, [pc, -pc, lsr #28]!
    938c:	2e006363 	cdpcs	3, 0, cr6, cr0, cr3, {3}
    9390:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9394:	2f2e2e2f 	svccs	0x002e2e2f
    9398:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    939c:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    93a0:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    93a4:	2f2e2e2f 	svccs	0x002e2e2f
    93a8:	2f636367 	svccs	0x00636367
    93ac:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    93b0:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    93b4:	00006d72 	andeq	r6, r0, r2, ror sp
    93b8:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    93bc:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    93c0:	00010063 	andeq	r0, r1, r3, rrx
    93c4:	73616800 	cmnvc	r1, #0, 16
    93c8:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    93cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    93d0:	72610000 	rsbvc	r0, r1, #0
    93d4:	73692d6d 	cmnvc	r9, #6976	; 0x1b40
    93d8:	00682e61 	rsbeq	r2, r8, r1, ror #28
    93dc:	61000003 	tstvs	r0, r3
    93e0:	632d6d72 			; <UNDEFINED> instruction: 0x632d6d72
    93e4:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    93e8:	00000300 	andeq	r0, r0, r0, lsl #6
    93ec:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    93f0:	6e6f632d 	cdpvs	3, 6, cr6, cr15, cr13, {1}
    93f4:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
    93f8:	682e7374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    93fc:	00000300 	andeq	r0, r0, r0, lsl #6
    9400:	2e6d7261 	cdpcs	2, 6, cr7, cr13, cr1, {3}
    9404:	00040068 	andeq	r0, r4, r8, rrx
    9408:	62696c00 	rsbvs	r6, r9, #0, 24
    940c:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    9410:	0100682e 	tsteq	r0, lr, lsr #16
    9414:	05000000 	streq	r0, [r0, #-0]
    9418:	02050001 	andeq	r0, r5, #1
    941c:	00004a2c 	andeq	r4, r0, ip, lsr #20
    9420:	0104a403 	tsteq	r4, r3, lsl #8
    9424:	13130305 	tstne	r3, #335544320	; 0x14000000
    9428:	01160513 	tsteq	r6, r3, lsl r5
    942c:	01010101 	tsteq	r1, r1, lsl #2
    9430:	0f060105 	svceq	0x00060105
    9434:	05311605 	ldreq	r1, [r1, #-1541]!	; 0xfffff9fb
    9438:	16051d01 	strne	r1, [r5], -r1, lsl #26
    943c:	2e062e31 	mcrcs	14, 0, r2, cr6, cr1, {1}
    9440:	2e012020 	cdpcs	0, 0, cr2, cr1, cr0, {1}
    9444:	20062001 	andcs	r2, r6, r1
    9448:	06202006 	strteq	r2, [r0], -r6
    944c:	05200620 	streq	r0, [r0, #-1568]!	; 0xfffff9e0
    9450:	050f0601 	streq	r0, [pc, #-1537]	; 8e57 <__exidx_end+0x3197>
    9454:	02002316 	andeq	r2, r0, #1476395008	; 0x58000000
    9458:	2e060104 	adfcss	f0, f6, f4
    945c:	03040200 	movweq	r0, #16896	; 0x4200
    9460:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    9464:	00200603 	eoreq	r0, r0, r3, lsl #12
    9468:	06030402 	streq	r0, [r3], -r2, lsl #8
    946c:	00220520 	eoreq	r0, r2, r0, lsr #10
    9470:	06030402 	streq	r0, [r3], -r2, lsl #8
    9474:	001e0514 	andseq	r0, lr, r4, lsl r5
    9478:	2f030402 	svccs	0x00030402
    947c:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    9480:	051d0304 	ldreq	r0, [sp, #-772]	; 0xfffffcfc
    9484:	0402000c 	streq	r0, [r2], #-12
    9488:	16052203 	strne	r2, [r5], -r3, lsl #4
    948c:	03040200 	movweq	r0, #16896	; 0x4200
    9490:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    9494:	02002003 	andeq	r2, r0, #3
    9498:	2e060304 	cdpcs	3, 0, cr0, cr6, cr4, {0}
    949c:	03040200 	movweq	r0, #16896	; 0x4200
    94a0:	00030501 	andeq	r0, r3, r1, lsl #10
    94a4:	14030402 	strne	r0, [r3], #-1026	; 0xfffffbfe
    94a8:	02000c05 	andeq	r0, r0, #1280	; 0x500
    94ac:	01060304 	tsteq	r6, r4, lsl #6
    94b0:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    94b4:	23060304 	movwcs	r0, #25348	; 0x6304
    94b8:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    94bc:	13060304 	movwne	r0, #25348	; 0x6304
    94c0:	03040200 	movweq	r0, #16896	; 0x4200
    94c4:	00050201 	andeq	r0, r5, r1, lsl #4
    94c8:	Address 0x00000000000094c8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	61657263 	cmnvs	r5, r3, ror #4
       4:	6d5f6574 	cfldr64vs	mvdx6, [pc, #-464]	; fffffe3c <_estack+0xdfffae3c>
       8:	61737365 	cmnvs	r3, r5, ror #6
       c:	45006567 	strmi	r6, [r0, #-1383]	; 0xfffffa99
    return node->data_base.item_array[index];
      10:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
      14:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      18:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
};
      1c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      20:	705f7375 	subsvc	r7, pc, r5, ror r3	; <UNPREDICTABLE>
      24:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
      28:	705f5f00 	subsvc	r5, pc, r0, lsl #30
      2c:	63705f69 	cmnvs	r0, #420	; 0x1a4
      30:	00735f62 	rsbseq	r5, r3, r2, ror #30
      34:	6f6d6470 	svcvs	0x006d6470
      38:	5f006564 	svcpl	0x00006564
      3c:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff1d5 <_estack+0xdfffa1d5>
			i = k;
      40:	5f746978 	svcpl	0x00746978
				j->Next = k;
      44:	73677261 	cmnvc	r7, #268435462	; 0x10000006
      48:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
}
      4c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
      50:	00796172 	rsbseq	r6, r9, r2, ror r1
      54:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		release;
      58:	5f62616c 	svcpl	0x0062616c
      5c:	5f6b7361 	svcpl	0x006b7361
			nq++;
      60:	5f726f66 	svcpl	0x00726f66
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	6f636572 	svcvs	0x00636572
      68:	695f6472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
      6c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
      70:	63775f00 	cmnvs	r7, #0, 30
      74:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
      78:	6174735f 	cmnvs	r4, pc, asr r3
      7c:	5f006574 	svcpl	0x00006574
      80:	00383472 	eorseq	r3, r8, r2, ror r4
      84:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
      88:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      8c:	735f5f00 	cmpvc	pc, #0, 30
	if (!button_still_pressed (__button_list [pbutton]))
      90:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      94:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
      98:	6f68635f 	svcvs	0x0068635f
	if (baction == NULL)
      9c:	00656369 	rsbeq	r6, r5, r9, ror #6
      a0:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
	(*baction) (pbutton);
      a4:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
endthread
      a8:	00796172 	rsbseq	r6, r9, r2, ror r1
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	20554e47 	subscs	r4, r5, r7, asr #28
      b0:	20393943 	eorscs	r3, r9, r3, asr #18
endthread
      b4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
      b8:	30322031 	eorscc	r2, r2, r1, lsr r0
      bc:	30313931 	eorscc	r3, r1, r1, lsr r9
      c0:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
      c4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
fsm sender(struct ResponseMessage *message) {
      c8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      cc:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
      d0:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
}
      d4:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
      d8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      e0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      e4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      e8:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
      ec:	205d3939 	subscs	r3, sp, r9, lsr r9
		packet[1] = message->gid;
      f0:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
      f4:	6f633d75 	svcvs	0x00633d75
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
      fc:	20336d2d 	eorscs	r6, r3, sp, lsr #26
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     104:	20626d75 	rsbcs	r6, r2, r5, ror sp
		*p = message->tpe;p++;
     108:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
		*p = message->request_number;p++;
     10c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
		*p = message->sender_id;p++;
     110:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
		*p = message->receiver_id;p++;
     114:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
		switch(message->tpe) {
     118:	616d2d20 	cmnvs	sp, r0, lsr #26
     11c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     120:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
		tcv_endp(packet);
     124:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     12c:	61776467 	cmnvs	r7, r7, ror #8
}
     130:	332d6672 			; <UNDEFINED> instruction: 0x332d6672
		finish;
     134:	73672d20 	cmnvc	r7, #32, 26	; 0x800
     138:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     13c:	77642d74 			; <UNDEFINED> instruction: 0x77642d74
				strncpy(p, message->record, sizeof(message->record));
     140:	20667261 	rsbcs	r7, r6, r1, ror #4
				*p = message->padding;p++;
     144:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
				strncpy(p, message->record, sizeof(message->record));
     148:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     14c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     150:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
				strncpy(p, message->record, sizeof(message->record));
     154:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     158:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
				strncpy(p, message->record, sizeof(message->record));
     15c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
				break;
     160:	736e6f69 	cmnvc	lr, #420	; 0x1a4
				*p = message->record_index;p++;
     164:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
				*p = message->padding;
     168:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
				break;
     16c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     170:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     174:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     178:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
     17c:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     180:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
		node->nnodes[i] = 0;
     184:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
     188:	662d2067 	strtvs	r2, [sp], -r7, rrx
     18c:	206d7361 	rsbcs	r7, sp, r1, ror #6
     190:	616d662d 	cmnvs	sp, sp, lsr #12
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	72652d78 	rsbvc	r2, r5, #120, 26	; 0x1e00
bool init_node(struct Node* node){
     198:	73726f72 	cmnvc	r2, #456	; 0x1c8
    node->id  = 0;                  // default id value 0
     19c:	0030313d 	eorseq	r3, r0, sp, lsr r1
    node->index = 0;                // default entry count 0
     1a0:	73625f5f 	cmnvc	r2, #380	; 0x17c
    node->data_base.item_count = 0; // default no items in array
     1a4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
	reset_array(node);
     1a8:	5f747261 	svcpl	0x00747261
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	6374005f 	cmnvs	r4, #95	; 0x5f
     1b0:	6d745f76 	ldclvs	15, cr5, [r4, #-472]!	; 0xfffffe28
};
     1b4:	6f720074 	svcvs	0x00720074
     1b8:	5f00746f 	svcpl	0x0000746f
uint8_t generate_request_num(void){
     1bc:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
    return (uint8_t) (rand() % 255);
     1c0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     1c4:	616c665f 	cmnvs	ip, pc, asr r6
     1c8:	68007367 	stmdavs	r0, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
}
     1cc:	00646165 	rsbeq	r6, r4, r5, ror #2
            node->nnodes[i] = 0; // set to null byte
     1d0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     1d4:	5f62616c 	svcpl	0x0062616c
     1d8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xfffff08c
};
     1e0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	6f72705f 	svcvs	0x0072705f
     1e8:	5f006f74 	svcpl	0x00006f74
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     1f0:	6e5f6261 	cdpvs	2, 5, cr6, cr15, cr1, {3}
     1f4:	675f7765 	ldrbvs	r7, [pc, -r5, ror #14]
        node->data_base.item_count -= 1;
     1f8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
};
     1fc:	0064695f 	rsbeq	r6, r4, pc, asr r9
bool delete_all(struct Node *node){
     200:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	5f62616c 	svcpl	0x0062616c
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	5f746567 	svcpl	0x00746567
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	665f6469 	ldrbvs	r6, [pc], -r9, ror #8
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	645f726f 	ldrbvs	r7, [pc], #-623	; 218 <delete_all+0x18>
            node->data_base.item_array[i].timestamp = 0;
     214:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    node->data_base.item_count = 0;
     21c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
}
     220:	6d5f6573 	cfldr64vs	mvdx6, [pc, #-460]	; 5c <g_pfnVectors+0x5c>
        return true;
     224:	61737365 	cmnvs	r3, r5, ror #6
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	305f6567 	subscc	r6, pc, r7, ror #10
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	73657200 	cmnvc	r5, #0, 4
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     234:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     238:	67617373 			; <UNDEFINED> instruction: 0x67617373
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00315f65 	eorseq	r5, r1, r5, ror #30
	response_message->tpe = RESPONSE;
     240:	70736572 	rsbsvc	r6, r3, r2, ror r5
	response_message->status = status;
     244:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
	response_message->gid = gid;
     24c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
	response_message->sender_id = sender_id;
     250:	5f00325f 	svcpl	0x0000325f
	response_message->status = status;
     254:	4b434f4c 	blmi	10d3f8c <__ccfg+0x10b3fe4>
	if (!padding){
     258:	4345525f 	movtmi	r5, #21087	; 0x525f
		response_message->padding = padding;
     25c:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
	if (rec != NULL){
     260:	545f4556 	ldrbpl	r4, [pc], #-1366	; 268 <assemble_response_message+0x42>
     264:	73657200 	cmnvc	r5, #0, 4
		strncpy(response_message->record, rec, 20);
     268:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     26c:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     270:	67617373 			; <UNDEFINED> instruction: 0x67617373
};
     274:	00345f65 	eorseq	r5, r4, r5, ror #30
fsm receiver(struct Node* node_db) {
     278:	70736572 	rsbsvc	r6, r3, r2, ror r5
     27c:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     280:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     284:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     288:	7500355f 	strvc	r3, [r0, #-1375]	; 0xfffffaa1
     28c:	5f726573 	svcpl	0x00726573
     290:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
     294:	64656469 	strbtvs	r6, [r5], #-1129	; 0xfffffb97
		DEBUG_PRINT("\r\nreceiving 0");
     298:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     29c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     2a4:	6f6e6e00 	svcvs	0x006e6e00
     2a8:	00736564 	rsbseq	r6, r3, r4, ror #10
		DEBUG_PRINT("\r\nreceiving 1");
     2ac:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     2b0:	5f6e656c 	svcpl	0x006e656c
		DEBUG_PRINT("\r\nreceiving 2");
     2b4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     2b8:	69440065 	stmdbvs	r4, {r0, r2, r5, r6}^
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2bc:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c0:	52797265 	rsbspl	r7, r9, #1342177286	; 0x50000006
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2c4:	6f707365 	svcvs	0x00707365
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c8:	4d65736e 	stclmi	3, cr7, [r5, #-440]!	; 0xfffffe48
		DEBUG_PRINT("\r\nreceiving 3");
     2cc:	61737365 	cmnvs	r3, r5, ror #6
		switch (response_message_5->tpe){
     2d0:	5f006567 	svcpl	0x00006567
     2d4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     2d8:	6e5f6261 	cdpvs	2, 5, cr6, cr15, cr1, {3}
     2dc:	6e5f7765 	cdpvs	7, 5, cr7, cr15, cr5, {3}
     2e0:	5f65646f 	svcpl	0x0065646f
     2e4:	66006469 	strvs	r6, [r0], -r9, ror #8
     2e8:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2ec:	5f5f006b 	svcpl	0x005f006b
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2f0:	6f5f6970 	svcvs	0x005f6970
				if (discovery_request_message->gid == node_db->gid){
     2f4:	5f00646c 	svcpl	0x0000646c
     2f8:	6f647473 	svcvs	0x00647473
					DEBUG_PRINT("\r\nSending to sender");
     2fc:	5f007475 	svcpl	0x00007475
     300:	736f7066 	cmnvc	pc, #102	; 0x66
					DEBUG_PRINT("\r\nSending to sender");
     304:	5f00745f 	svcpl	0x0000745f
					response_message_0->tpe = DISCOVERY_RESPONSE;
     308:	00736e66 	rsbseq	r6, r3, r6, ror #28
					response_message_0->request_number = discovery_request_message->request_number;
     30c:	6f6f635f 	svcvs	0x006f635f
					response_message_0->sender_id = node_db->id;
     310:	0065696b 	rsbeq	r6, r5, fp, ror #18
					response_message_0->receiver_id = discovery_request_message->sender_id;
     314:	5f766374 	svcpl	0x00766374
					DEBUG_PRINT("\r\nSending to sender");
     318:	6f666e69 	svcvs	0x00666e69
					call sender(response_message_0, done_case);
     31c:	73797300 	cmnvc	r9, #0, 6
     320:	5f746174 	svcpl	0x00746174
     324:	5f5f0074 	svcpl	0x005f0074
     328:	5f737362 	svcpl	0x00737362
     32c:	5f646e65 	svcpl	0x00646e65
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     330:	425f005f 	subsmi	r0, pc, #95	; 0x5f
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     334:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     338:	544f0074 	strbpl	r0, [pc], #-116	; 340 <receiver+0xc8>
     33c:	5f524548 	svcpl	0x00524548
     340:	4f525245 	svcmi	0x00525245
     344:	5f5f0052 	svcpl	0x005f0052
     348:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
     34c:	00796164 	rsbseq	r6, r9, r4, ror #2
     350:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     354:	00746c75 	rsbseq	r6, r4, r5, ror ip
					node_db->index+=1;
     358:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     35c:	756f685f 	strbvc	r6, [pc, #-2143]!	; fffffb05 <_estack+0xdfffab05>
		DEBUG_PRINT("\r\nIn done_case");
     360:	454e0072 	strbmi	r0, [lr, #-114]	; 0xffffff8e
		tcv_endp(incoming_packet);
     364:	4f4e5f57 	svcmi	0x004e5f57
     368:	495f4544 	ldmdbmi	pc, {r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
		DEBUG_PRINT("\r\nIn done_case");
     36c:	6e650044 	cdpvs	0, 6, cr0, cr5, cr4, {2}
     370:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
		proceed receiving;
     374:	5f5f0079 	svcpl	0x005f0079
		ser_out(response_1_create, "\r\nData Saved");
     378:	616c7473 	smcvs	51011	; 0xc743
     37c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
		proceed receiving;
     380:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
     384:	6f6e5f77 	svcvs	0x006e5f77
		ser_out(response_1_delete, "\r\nRecord Deleted");
     388:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     38c:	5f5f0064 	svcpl	0x005f0064
		proceed receiving;
     390:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     394:	6f680074 	svcvs	0x00680074
     398:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     39c:	61700064 	cmnvs	r0, r4, rrx
     3a0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
     3a4:	7a69735f 	bvc	1a5d128 <__ccfg+0x1a3d180>
		proceed receiving;
     3a8:	5f5f0065 	svcpl	0x005f0065
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     3ac:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xfffff197
     3b0:	69705f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3b4:	5f00736e 	svcpl	0x0000736e
     3b8:	5f6d745f 	svcpl	0x006d745f
		proceed receiving;
     3bc:	006e696d 	rsbeq	r6, lr, sp, ror #18
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3c0:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     3c4:	72006674 	andvc	r6, r0, #116, 12	; 0x7400000
     3c8:	6f707365 	svcvs	0x00707365
     3cc:	5f65736e 	svcpl	0x0065736e
		proceed receiving;
     3d0:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3d4:	5f656761 	svcpl	0x00656761
     3d8:	725f0033 	subsvc	r0, pc, #51	; 0x33
     3dc:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
     3e0:	6e690038 	mcrvs	0, 3, r0, cr9, cr8, {1}
		proceed receiving;
     3e4:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3e8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     3ec:	0064726f 	rsbeq	r7, r4, pc, ror #4
		proceed receiving;
     3f0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
}
     3f4:	5f62616c 	svcpl	0x0062616c
     3f8:	61657263 	cmnvs	r5, r3, ror #4
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3fc:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     400:	6f746f72 	svcvs	0x00746f72
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     404:	6174735f 	cmnvs	r4, pc, asr r3
     408:	5f007472 	svcpl	0x00007472
     40c:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
     410:	6b5f746c 	blvs	17dd5c8 <__ccfg+0x17bd620>
					DEBUG_PRINT("\r\nDelete rec first if");
     414:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
					break;
     418:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     41c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     420:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
					DEBUG_PRINT("\r\nCreate rec second if");
     424:	6f6c2067 	svcvs	0x006c2067
    if (node->data_base.item_count == NUMB_OF_ENT){
     428:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     42c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
						DEBUG_PRINT("\r\nCreate rec third if");
     430:	2064656e 	rsbcs	r6, r4, lr, ror #10
     434:	00746e69 	rsbseq	r6, r4, r9, ror #28
					DEBUG_PRINT("\r\nCreate rec out if");
     438:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
     43c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     440:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     444:	646f6e00 	strbtvs	r6, [pc], #-3584	; 44c <receiver+0x1d4>
     448:	62645f65 	rsbvs	r5, r4, #404	; 0x194
     44c:	735f5f00 	cmpvc	pc, #0, 30
     450:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     454:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     458:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
					call sender(response_message_2, done_case);
     45c:	6e6f7361 	cdpvs	3, 6, cr7, cr15, cr1, {3}
						DEBUG_PRINT("\r\nCreate rec third else");
     460:	646f4e00 	strbtvs	r4, [pc], #-3584	; 468 <receiver+0x1f0>
     464:	42440065 	submi	r0, r4, #101	; 0x65
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     468:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
     46c:	5f5f004c 	svcpl	0x005f004c
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     470:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
				DEBUG_PRINT("\r\nDelete rec");/*
     474:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     478:	0064695f 	rsbeq	r6, r4, pc, asr r9
     47c:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     480:	00746573 	rsbseq	r6, r4, r3, ror r5
     484:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     488:	6f72705f 	svcvs	0x0072705f
     48c:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
     490:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
     494:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
					DEBUG_PRINT("\r\nDelete rec first if");
     498:	735f5f00 	cmpvc	pc, #0, 30
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     49c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     4a0:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
					DEBUG_PRINT("\r\nDelete rec second if");
     4a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
					if (delete_record(node_db, delete_record_message->record_index)){
     4a8:	0062645f 	rsbeq	r6, r2, pc, asr r4
     4ac:	5f766374 	svcpl	0x00766374
     4b0:	0065706f 	rsbeq	r7, r5, pc, rrx
						DEBUG_PRINT("\r\nDelete rec third if");
     4b4:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
						status = (uint8_t) SUCCESS;
     4b8:	6f72705f 	svcvs	0x0072705f
					DEBUG_PRINT("\r\nDelete assemble le response");
     4bc:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4c0:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
     4c4:	00786564 	rsbseq	r6, r8, r4, ror #10
     4c8:	5f746573 	svcpl	0x00746573
     4cc:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     4d0:	0064695f 	rsbeq	r6, r4, pc, asr r9
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4d4:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
     4d8:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4dc:	73007963 	movwvc	r7, #2403	; 0x963
     4e0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     4e4:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     4e8:	735f5f00 	cmpvc	pc, #0, 30
     4ec:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     4f0:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     4f4:	76656972 			; <UNDEFINED> instruction: 0x76656972
     4f8:	72705f65 	rsbsvc	r5, r0, #404	; 0x194
     4fc:	006f746f 	rsbeq	r7, pc, pc, ror #8
     500:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     504:	5f62616c 	svcpl	0x0062616c
     508:	61656c63 	cmnvs	r5, r3, ror #24
     50c:	656e5f72 	strbvs	r5, [lr, #-3954]!	; 0xfffff08e
     510:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
     514:	5f72756f 	svcpl	0x0072756f
     518:	61727261 	cmnvs	r2, r1, ror #4
     51c:	5f5f0079 	svcpl	0x005f0079
     520:	63756e67 	cmnvs	r5, #1648	; 0x670
     524:	5f61765f 	svcpl	0x0061765f
     528:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     52c:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
     530:	6f635f6d 	svcvs	0x00635f6d
     534:	00746e75 	rsbseq	r6, r4, r5, ror lr
     538:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     53c:	5f62616c 	svcpl	0x0062616c
     540:	70736572 	rsbsvc	r6, r3, r2, ror r5
     544:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     548:	645f315f 	ldrbvs	r3, [pc], #-351	; 550 <receiver+0x2d8>
     54c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     550:	5f5f0065 	svcpl	0x005f0065
     554:	616c7473 	smcvs	51011	; 0xc743
     558:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     55c:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
     560:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     564:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     568:	00657461 	rsbeq	r7, r5, r1, ror #8
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     56c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     570:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     574:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 57c <receiver+0x304>
				DEBUG_PRINT("\r\nretrieve rec");
     578:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     57c:	5f007961 	svcpl	0x00007961
     580:	00636e69 	rsbeq	r6, r3, r9, ror #28
     584:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     588:	6e656700 	cdpvs	7, 6, cr6, cr5, cr0, {0}
     58c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     590:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     594:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     598:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
     59c:	5f5f006d 	svcpl	0x005f006d
    return node->data_base.item_array[index];
     5a0:	616c7473 	smcvs	51011	; 0xc743
     5a4:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
     5a8:	5f747261 	svcpl	0x00747261
     5ac:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b0:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
    return node->data_base.item_array[index];
     5b4:	6f72705f 	svcvs	0x0072705f
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b8:	5f006f74 	svcpl	0x00006f74
     5bc:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
     5c0:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     5c4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     5c8:	00657461 	rsbeq	r7, r5, r1, ror #8
     5cc:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
     5d0:	735f5f00 	cmpvc	pc, #0, 30
     5d4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     5d8:	006b6f5f 	rsbeq	r6, fp, pc, asr pc
     5dc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5e0:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
     5e4:	6c630070 	stclvs	0, cr0, [r3], #-448	; 0xfffffe40
				DEBUG_PRINT("\r\nResponse");
     5e8:	5f726165 	svcpl	0x00726165
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5ec:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     5f0:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     5f4:	6f626867 	svcvs	0x00626867
     5f8:	615f7275 	cmpvs	pc, r5, ror r2	; <UNPREDICTABLE>
     5fc:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
     600:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
				if(!response_flag){
     604:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
					response_flag=1;
     608:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
					trigger(&response_flag);
     60c:	5f5f0073 	svcpl	0x005f0073
				switch(response_message_5->status){
     610:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     614:	6c5f6e6f 	mrrcvs	14, 6, r6, pc, cr15	; <UNPREDICTABLE>
     618:	00747369 	rsbseq	r7, r4, r9, ror #6
     61c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     620:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
						if (response_checker[0] == response_message_5->request_number){
     624:	00657079 	rsbeq	r7, r5, r9, ror r0
     628:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
     62c:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 46c <receiver+0x1f4>
							switch(response_checker[1]){
     630:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
     634:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     638:	626d5f00 	rsbvs	r5, sp, #0, 30
     63c:	5f6e656c 	svcpl	0x006e656c
									proceed response_1_create;
     640:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
						proceed response_2;
     644:	77610065 	strbvc	r0, [r1, -r5, rrx]!
									proceed response_1_delete;
     648:	0064726f 	rsbeq	r7, r4, pc, ror #4
									proceed response_1_retrieve;
     64c:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
						proceed response_2;
     650:	53006e70 	movwpl	r6, #3696	; 0xe70
						proceed response_3;
     654:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
						proceed response_4;
     658:	6c005353 	stcvs	3, cr5, [r0], {83}	; 0x53
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     65c:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     660:	5f5f0063 	svcpl	0x005f0063
				break;
     664:	616c7473 	smcvs	51011	; 0xc743
}
     668:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     66c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     670:	00676e69 	rsbeq	r6, r7, r9, ror #28
     674:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     678:	61646d5f 	cmnvs	r4, pc, asr sp
     67c:	5f5f0079 	svcpl	0x005f0079
fsm root {
     680:	616c7473 	smcvs	51011	; 0xc743
     684:	61775f62 	cmnvs	r7, r2, ror #30
     688:	645f7469 	ldrbvs	r7, [pc], #-1129	; 690 <root+0x10>
     68c:	6f637369 	svcvs	0x00637369
     690:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     694:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     698:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     69c:	5f00636e 	svcpl	0x0000636e
     6a0:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
     6a4:	5f63776f 	svcpl	0x0063776f
     6a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     6ac:	615f0065 	cmpvs	pc, r5, rrx
     6b0:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     6b4:	6c003074 	stcvs	0, cr3, [r0], {116}	; 0x74
     6b8:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     6bc:	5f5f006b 	svcpl	0x005f006b
     6c0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     6c4:	61747379 	cmnvs	r4, r9, ror r3
     6c8:	5f5f0074 	svcpl	0x005f0074
     6cc:	616c7473 	smcvs	51011	; 0xc743
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     6d0:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     6d4:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     6d8:	315f6573 	cmpcc	pc, r3, ror r5	; <UNPREDICTABLE>
		init_node(node_db);
     6dc:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		phys_cc1350(0, MAX_PKT_LEN);
     6e0:	76656972 			; <UNDEFINED> instruction: 0x76656972
     6e4:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
		tcv_plug (0, &plug_null);
     6e8:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     6ec:	635f6573 	cmpvs	pc, #482344960	; 0x1cc00000
		sfd = tcv_open (WNONE, 0, 0);
     6f0:	6b636568 	blvs	18d9c98 <__ccfg+0x18b9cf0>
     6f4:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
     6f8:	6f637369 	svcvs	0x00637369
     6fc:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     700:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
			diag("Cannot open tcv interface");
     704:	4d747365 	ldclmi	3, cr7, [r4, #-404]!	; 0xfffffe6c
     708:	61737365 	cmnvs	r3, r5, ror #6
			halt();
     70c:	5f006567 	svcpl	0x00006567
		tcv_control(sfd, PHYSOPT_ON, NULL);
     710:	5f69705f 	svcpl	0x0069705f
     714:	746e696d 	strbtvc	r6, [lr], #-2413	; 0xfffff693
		runfsm receiver(node_db);
     718:	5f5f006b 	svcpl	0x005f006b
     71c:	616c7473 	smcvs	51011	; 0xc743
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     720:	69745f62 	ldmdbvs	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     724:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1bf <generate_request_num+0x3>
     728:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     72c:	6b636f6c 	blvs	18dc4e4 <__ccfg+0x18bc53c>
     730:	5f00745f 	svcpl	0x0000745f
     734:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		ser_inf(get_choice, "%c", &CHOICE);
     738:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
     73c:	6f707365 	svcvs	0x00707365
     740:	5f65736e 	svcpl	0x0065736e
		switch(CHOICE) {
     744:	5f5f0032 	svcpl	0x005f0032
     748:	616c7473 	smcvs	51011	; 0xc743
     74c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     750:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     754:	335f6573 	cmpcc	pc, #482344960	; 0x1cc00000
     758:	735f5f00 	cmpvc	pc, #0, 30
     75c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     760:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     764:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     768:	00345f65 	eorseq	r5, r4, r5, ror #30
     76c:	63775f5f 	cmnvs	r7, #380	; 0x17c
     770:	695f0068 	ldmdbvs	pc, {r3, r5, r6}^	; <UNPREDICTABLE>
				proceed menu;
     774:	0073626f 	rsbseq	r6, r3, pc, ror #4
     778:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     77c:	64007375 	strvs	r7, [r0], #-885	; 0xfffffc8b
     780:	5f617461 	svcpl	0x00617461
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     784:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     788:	5f5f0079 	svcpl	0x005f0079
     78c:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
		DEBUG_PRINT("setting node group ID");
     790:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     794:	735f5f00 	cmpvc	pc, #0, 30
    node->gid = gid; 
     798:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     79c:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    node->gid = gid; 
     7a0:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
		proceed menu;
     7a4:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 7ac <root+0x12c>
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     7a8:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
     7ac:	735f5f00 	cmpvc	pc, #0, 30
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     7b0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     7b4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     7b8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7bc:	5f64726f 	svcpl	0x0064726f
     7c0:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
		if((node_db->id < 1) || (node_db->id > 25)){
     7c4:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     7c8:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     7cc:	69657274 	stmdbvs	r5!, {r2, r4, r5, r6, r9, ip, sp, lr}^
			strncpy(reason, "Out of Range", 50);
     7d0:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
     7d4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
			proceed invalid_node_id;
     7d8:	656d5f64 	strbvs	r5, [sp, #-3940]!	; 0xfffff09c
     7dc:	67617373 			; <UNDEFINED> instruction: 0x67617373
				strncpy(reason, "ID is already in use", 50);
     7e0:	735f0065 	cmpvc	pc, #101	; 0x65
		for(int i = 0; i < node_db->index; i++){
     7e4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     7e8:	61675f00 	cmnvs	r7, r0, lsl #30
     7ec:	5f616d6d 	svcpl	0x00616d6d
		proceed menu;
     7f0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7f4:	006d6167 	rsbeq	r6, sp, r7, ror #2
     7f8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     7fc:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     800:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
		proceed get_new_node_id;
     804:	5f5f0074 	svcpl	0x005f0074
     808:	616c7473 	smcvs	51011	; 0xc743
		if (!clear_node_neighbour_array(node_db)){
     80c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     810:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
			strncpy(reason, "Error Clearing Node Array", 50);
     814:	72675f77 	rsbvc	r5, r7, #476	; 0x1dc
     818:	5f70756f 	svcpl	0x0070756f
     81c:	5f006469 	svcpl	0x00006469
			proceed error;
     820:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     824:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     828:	64617000 	strbtvs	r7, [r1], #-0
		request_packet->gid = node_db->gid;
     82c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     830:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
		request_packet->tpe = DISCOVERY_REQUEST;
     834:	4b00746c 	blmi	1d9ec <__exidx_end+0x17d2c>
		request_packet->request_number = generate_request_num();
     838:	2f504d54 	svccs	0x00504d54
     83c:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
		call sender(request_packet, wait_discovery);
     840:	5f5f0063 	svcpl	0x005f0063
     844:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
		request_packet->receiver_id=0;
     848:	775f0067 	ldrbvc	r0, [pc, -r7, rrx]
		call sender(request_packet, wait_discovery);
     84c:	6f747263 	svcvs	0x00747263
     850:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
     854:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
			release;
     858:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
				proceed get_new_node_id;
     85c:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
				proceed clear_neighbour_array;
     860:	6f707365 	svcvs	0x00707365
				proceed create_proto_start;
     864:	5f65736e 	svcpl	0x0065736e
				proceed start_delete_proto;
     868:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
				proceed start_retrieve_proto;
     86c:	615f5f00 	cmpvs	pc, r0, lsl #30
				proceed display_db;
     870:	5f5f0070 	svcpl	0x005f0070
				proceed del_local;
     874:	616c7473 	smcvs	51011	; 0xc743
			if(node_db->id == node_db->nnodes[i]){
     878:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xfffff09e
     87c:	6f6c5f6c 	svcvs	0x006c5f6c
     880:	006c6163 	rsbeq	r6, ip, r3, ror #2
				strncpy(reason, "ID is already in use", 50);
     884:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
     888:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
				proceed invalid_node_id;
     88c:	5f5f0070 	svcpl	0x005f0070
     890:	616c7473 	smcvs	51011	; 0xc743
		for(int i = 0; i < node_db->index; i++){
     894:	6f6c5f62 	svcvs	0x006c5f62
		if (discovery_wait_flag == 0){
     898:	745f706f 	ldrbvc	r7, [pc], #-111	; 8a0 <root+0x220>
			discovery_wait_flag=1;
     89c:	756f7268 	strbvc	r7, [pc, #-616]!	; 63c <receiver+0x3c4>
     8a0:	645f6867 	ldrbvs	r6, [pc], #-2151	; 8a8 <root+0x228>
			delay(3000, find_proto_start);
     8a4:	00617461 	rsbeq	r7, r1, r1, ror #8
     8a8:	454c4544 	strbmi	r4, [ip, #-1348]	; 0xfffffabc
		if (discovery_wait_flag == 1){
     8ac:	455f4554 	ldrbmi	r4, [pc, #-1364]	; 360 <receiver+0xe8>
			discovery_wait_flag=0;
     8b0:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     8b4:	626d5f00 	rsbvs	r5, sp, #0, 30
			delay(3000, display_neighbour_nodes);
     8b8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     8bc:	00745f65 	rsbseq	r5, r4, r5, ror #30
     8c0:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
     8c4:	756f6268 	strbvc	r6, [pc, #-616]!	; 664 <receiver+0x3ec>
     8c8:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8cc:	006b6365 	rsbeq	r6, fp, r5, ror #6
     8d0:	5f746573 	svcpl	0x00746573
     8d4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     8d8:	6469675f 	strbtvs	r6, [r9], #-1887	; 0xfffff8a1
     8dc:	73797300 	cmnvc	r9, #0, 6
     8e0:	5f6d6574 	svcpl	0x006d6574
     8e4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     8e8:	6f635f74 	svcvs	0x00635f74
     8ec:	00746e75 	rsbseq	r6, r4, r5, ror lr
     8f0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     8f4:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
     8f8:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
     8fc:	64707165 	ldrbtvs	r7, [r0], #-357	; 0xfffffe9b
     900:	685f006d 	ldmdavs	pc, {r0, r2, r3, r5, r6}^	; <UNPREDICTABLE>
		if(node_db->index == 0){
     904:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     908:	74006f6e 	strvc	r6, [r0], #-3950	; 0xfffff092
     90c:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
			proceed menu;
     910:	6f006f6c 	svcvs	0x00006f6c
fsm root {
     914:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     918:	6e700073 	mrcvs	0, 3, r0, cr0, cr3, {3}
		for (int i=0; i<node_db->index; i++) {
     91c:	5f006d75 	svcpl	0x00006d75
     920:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     924:	6d5f6261 	lfmvs	f6, 2, [pc, #-388]	; 7a8 <root+0x128>
		proceed menu;
     928:	00756e65 	rsbseq	r6, r5, r5, ror #28
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     92c:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     930:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     934:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
     938:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     93c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     940:	61755f69 	cmnvs	r5, r9, ror #30
     944:	41007472 	tstmi	r0, r2, ror r4
			strncpy(reason, "Error: improper ID", 50);
     948:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
     94c:	63655343 	cmnvs	r5, #201326593	; 0xc000001
     950:	00746547 	rsbseq	r6, r4, r7, asr #10
			proceed error;
     954:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     958:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
     95c:	78654e00 	stmdavc	r5!, {r9, sl, fp, lr}^
		ser_in(get_record_to_create, user_provided_record, 20);
     960:	63740074 	cmnvs	r4, #116	; 0x74
     964:	756f5f76 	strbvc	r5, [pc, #-3958]!	; fffff9f6 <_estack+0xdfffa9f6>
     968:	5f5f0074 	svcpl	0x005f0074
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     96c:	616c7473 	smcvs	51011	; 0xc743
		create_message->gid = node_db->gid;
     970:	69665f62 	stmdbvs	r6!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     974:	705f646e 	subsvc	r6, pc, lr, ror #8
     978:	6f746f72 	svcvs	0x00746f72
		create_message->tpe = CREATE_RECORD;
     97c:	6174735f 	cmnvs	r4, pc, asr r3
		create_message->request_number = generate_request_num();
     980:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
		create_message->sender_id = node_db->id;
     984:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
     988:	5f455645 	svcpl	0x00455645
     98c:	4f434552 	svcmi	0x00434552
		strncpy(create_message->record, user_provided_record, 20);
     990:	64004452 	strvs	r4, [r0], #-1106	; 0xfffffbae
		create_message->receiver_id = user_provided_receiver_id;
     994:	6f637369 	svcvs	0x00637369
		strncpy(create_message->record, user_provided_record, 20);
     998:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
		response_checker[0] = create_message->request_number;
     99c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
		call sender(create_message, wait);
     9a0:	6c665f74 	stclvs	15, cr5, [r6], #-464	; 0xfffffe30
		response_checker[1] = create_message->tpe;
     9a4:	5f006761 	svcpl	0x00006761
     9a8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		call sender(create_message, wait);
     9ac:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
     9b0:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     9b4:	6f665f64 	svcvs	0x00665f64
     9b8:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     9bc:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9c0:	44006576 	strmi	r6, [r0], #-1398	; 0xfffffa8a
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     9c4:	4f435349 	svcmi	0x00435349
     9c8:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
     9cc:	5345525f 	movtpl	r5, #21087	; 0x525f
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9d0:	534e4f50 	movtpl	r4, #61264	; 0xef50
     9d4:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
			strncpy(reason, "Error: improper node ID", 50);
     9d8:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9dc:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
			proceed error;
     9e0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     9e4:	5f5f0064 	svcpl	0x005f0064
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9e8:	685f6970 	ldmdavs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
     9ec:	655f7865 	ldrbvs	r7, [pc, #-2149]	; 18f <reset_array+0xb>
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9f0:	745f636e 	ldrbvc	r6, [pc], #-878	; 9f8 <root+0x378>
     9f4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     9f8:	735f5f00 	cmpvc	pc, #0, 30
		if (us_pr_in < 0 || us_pr_in > 40){
     9fc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
			strncpy(reason, "Error: invalid index", 50);
     a00:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     a04:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     a08:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			proceed error;
     a0c:	76655f69 	strbtvc	r5, [r5], -r9, ror #30
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a10:	5f746e65 	svcpl	0x00746e65
     a14:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
     a18:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		delete_record->gid = node_db->gid;
     a1c:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 854 <root+0x1d4>
		delete_record->tpe = DELETE_RECORD;
     a20:	61747362 	cmnvs	r4, r2, ror #6
		delete_record->request_number = generate_request_num();
     a24:	5f006574 	svcpl	0x00006574
     a28:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		call sender(delete_record, wait);
     a2c:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
		delete_record->sender_id = node_db->id;
     a30:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
		delete_record->receiver_id = user_provided_receiver_id;
     a34:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
		delete_record->record_index = us_pr_in;
     a38:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     a3c:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		response_checker[0] = delete_record->request_number;
     a40:	76656972 			; <UNDEFINED> instruction: 0x76656972
		call sender(delete_record, wait);
     a44:	5f5f0065 	svcpl	0x005f0065
     a48:	616c7473 	smcvs	51011	; 0xc743
     a4c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     a50:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     a54:	5f786564 	svcpl	0x00786564
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a58:	5f726f66 	svcpl	0x00726f66
     a5c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a60:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     a64:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     a68:	7300746d 	movwvc	r7, #1133	; 0x46d
		if (get_id < 1 || get_id > 25){
     a6c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     a70:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
			strncpy(reason, "Error: improper node ID", 50);
     a74:	735f5f00 	cmpvc	pc, #0, 30
     a78:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     a7c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
			proceed error;
     a80:	72635f74 	rsbvc	r5, r3, #116, 30	; 0x1d0
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a84:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     a88:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a8c:	5f64726f 	svcpl	0x0064726f
     a90:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     a94:	00656761 	rsbeq	r6, r5, r1, ror #14
		if (beg_for_index < 0 || beg_for_index > 40){
     a98:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     a9c:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
			strncpy(reason, "Error: invalid index", 50);
     aa0:	74736465 	ldrbtvc	r6, [r3], #-1125	; 0xfffffb9b
     aa4:	5f5f0073 	svcpl	0x005f0073
			proceed error;
     aa8:	70006673 	andvc	r6, r0, r3, ror r6
     aac:	6f696e69 	svcvs	0x00696e69
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ab0:	00745f64 	rsbseq	r5, r4, r4, ror #30
     ab4:	63775f5f 	cmnvs	r7, #380	; 0x17c
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	5f006268 	svcpl	0x00006268
     abc:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
     ac0:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
		retrieve_record->gid = node_db->gid;
     ac4:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
		retrieve_record->tpe = RETRIEVE_RECORD;
     ac8:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
		retrieve_record->request_number = generate_request_num();
     acc:	5f5f0072 	svcpl	0x005f0072
     ad0:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
		retrieve_record->receiver_id = get_id;
     ad4:	00726165 	rsbseq	r6, r2, r5, ror #2
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ad8:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
		retrieve_record->record_index = beg_for_index;
     adc:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
     ae0:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ae4:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
		response_checker[0] = retrieve_record->request_number;
     ae8:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     aec:	67617373 			; <UNDEFINED> instruction: 0x67617373
		response_checker[1] = retrieve_record->tpe;
     af0:	5f5f0065 	svcpl	0x005f0065
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     af4:	616c7473 	smcvs	51011	; 0xc743
     af8:	73615f62 	cmnvc	r1, #392	; 0x188
		call sender(retrieve_record, wait);
     afc:	6f665f6b 	svcvs	0x00665f6b
     b00:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
     b04:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     b08:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     b0c:	76656972 			; <UNDEFINED> instruction: 0x76656972
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     b10:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
     b14:	00786564 	rsbseq	r6, r8, r4, ror #10
		if(node_db->data_base.item_count != 0){
     b18:	52544552 	subspl	r4, r4, #343932928	; 0x14800000
     b1c:	45564549 	ldrbmi	r4, [r6, #-1353]	; 0xfffffab7
     b20:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
		ser_out(loop_through_data, "\r\n");
     b24:	5f00524f 	svcpl	0x0000524f
     b28:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		proceed menu;
     b2c:	655f6261 	ldrbvs	r6, [pc, #-609]	; 8d3 <root+0x253>
		delete_all(node_db);
     b30:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     b34:	4c454400 	cfstrdmi	mvd4, [r5], {-0}
		proceed menu;
     b38:	5f455445 	svcpl	0x00455445
     b3c:	4f434552 	svcmi	0x00434552
		delay(3000, timeout);
     b40:	5f004452 	svcpl	0x00004452
     b44:	61636f6c 	cmnvs	r3, ip, ror #30
		when(&response_flag, menu);
     b48:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
     b4c:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
		release;
     b50:	755f0066 	ldrbvc	r0, [pc, #-102]	; af2 <root+0x472>
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b54:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     b58:	635f0064 	cmpvs	pc, #100	; 0x64
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b5c:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
     b60:	6d5f006e 	ldclvs	0, cr0, [pc, #-440]	; 9b0 <root+0x330>
     b64:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
     b68:	6c5f0073 	mrrcvs	0, 7, r0, pc, cr3	; <UNPREDICTABLE>
		for (int i=0; i<node_db->index; i++) {
     b6c:	5f613436 	svcpl	0x00613436
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b70:	00667562 	rsbeq	r7, r6, r2, ror #10
     b74:	6b6c625f 	blvs	1b194f8 <__ccfg+0x1af9550>
     b78:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     b7c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; b84 <root+0x504>
     b80:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
     b84:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     b88:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b8c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     b90:	61765f5f 	cmnvs	r6, pc, asr pc
     b94:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     b98:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b9c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     ba0:	61657243 	cmnvs	r5, r3, asr #4
		ser_out(timeout, "\r\nFailed to reach the destination");
     ba4:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
     ba8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
		proceed menu;
     bac:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     bb0:	00656761 	rsbeq	r6, r5, r1, ror #14
     bb4:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     bb8:	00737365 	rsbseq	r7, r3, r5, ror #6
		proceed menu;
     bbc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
}
     bc0:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
     bc4:	63740072 	cmnvs	r4, #114	; 0x72
     bc8:	63725f76 	cmnvs	r2, #472	; 0x1d8
     bcc:	6e5f0076 	mrcvs	0, 2, r0, cr15, cr6, {3}
     bd0:	73626f69 	cmnvc	r2, #420	; 0x1a4
     bd4:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
     bd8:	00745f74 	rsbseq	r5, r4, r4, ror pc
     bdc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     be0:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
     be4:	5400745f 	strpl	r7, [r0], #-1119	; 0xfffffba1
     be8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     bec:	53494400 	movtpl	r4, #37888	; 0x9400
     bf0:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xfffff0bd
     bf4:	525f5952 	subspl	r5, pc, #1343488	; 0x148000
     bf8:	45555145 	ldrbmi	r5, [r5, #-325]	; 0xfffffebb
     bfc:	5f005453 	svcpl	0x00005453
     c00:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     c04:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
     c08:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     c0c:	6d5f4d52 	ldclvs	13, cr4, [pc, #-328]	; acc <root+0x44c>
     c10:	61737365 	cmnvs	r3, r5, ror #6
     c14:	5f006567 	svcpl	0x00006567
     c18:	5f6f7364 	svcpl	0x006f7364
     c1c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
     c20:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     c24:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; a74 <root+0x3f4>
     c28:	5f676e69 	svcpl	0x00676e69
     c2c:	6b636170 	blvs	18d91f4 <__ccfg+0x18b924c>
     c30:	5f007465 	svcpl	0x00007465
static void devinit_uart (int devnum) {
     c34:	5f69705f 	svcpl	0x0069705f
	adddevfunc (ioreq_uart_a, devnum);
     c38:	5f007473 	svcpl	0x00007473
     c3c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
void udelay (volatile word n) {
     c40:	695f6261 	ldmdbvs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     c44:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
	while (n) {
     c48:	7a696c61 	bvc	1a5bdd4 <__ccfg+0x1a3be2c>
     c4c:	6f6e5f65 	svcvs	0x006e5f65
}
     c50:	5f006564 	svcpl	0x00006564
	while (n--);
     c54:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
     c58:	75006675 	strvc	r6, [r0, #-1653]	; 0xfffff98b
     c5c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
		n--;
     c60:	2064656e 	rsbcs	r6, r4, lr, ror #10
     c64:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     c68:	705f5f00 	subsvc	r5, pc, r0, lsl #30
void mdelay (volatile word n) {
     c6c:	656e5f69 	strbvs	r5, [lr, #-3945]!	; 0xfffff097
     c70:	73660077 	cmnvc	r6, #119	; 0x77
	while (n) {
     c74:	646f636d 	strbtvs	r6, [pc], #-877	; c7c <mdelay+0x10>
     c78:	454e0065 	strbmi	r0, [lr, #-101]	; 0xffffff9b
}
     c7c:	4f4e5f57 	svcmi	0x004e5f57
		udelay (999);
     c80:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
     c84:	5f004449 	svcpl	0x00004449
		n--;
     c88:	4243505f 	submi	r5, r3, #95	; 0x5f
     c8c:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
     c90:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
     c94:	72655f65 	rsbvc	r5, r5, #404	; 0x194
void __pi_ondomain (lword d) {
     c98:	63740072 	cmnvs	r4, #114	; 0x72
     c9c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
		if (__pi_systat.effpdm > 1)
     ca0:	6174006d 	cmnvs	r4, sp, rrx
     ca4:	5f006c69 	svcpl	0x00006c69
			__pi_systat.effpdm = 1;
     ca8:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; ba8 <root+0x528>
	PRCMPowerDomainOn (d);
     cac:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     cb0:	6f6e5f74 	svcvs	0x006e5f74
     cb4:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     cb8:	665f6765 	ldrbvs	r6, [pc], -r5, ror #14
     cbc:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     cc0:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
	__pi_systat.ondmns |= d;
     cc4:	735f5f00 	cmpvc	pc, #0, 30
     cc8:	00667562 	rsbeq	r7, r6, r2, ror #10
}
     ccc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     cd0:	6400745f 	strvs	r7, [r0], #-1119	; 0xfffffba1
void __pi_offdomain (lword d) {
     cd4:	5f617461 	svcpl	0x00617461
     cd8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
	PRCMPowerDomainOff (d);
     cdc:	6c675f00 	stclvs	15, cr5, [r7], #-0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ce0:	5f006575 	svcpl	0x00006575
     ce4:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
     ce8:	5f006575 	svcpl	0x00006575
	if (d & PRCM_DOMAIN_RFCORE) {
     cec:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
     cf0:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cf4:	00747361 	rsbseq	r7, r4, r1, ror #6
     cf8:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cfc:	5f63776f 	svcpl	0x0063776f
     d00:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
	__pi_systat.ondmns &= ~d;
     d04:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
     d08:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
}
     d0c:	5f797265 	svcpl	0x00797265
     d10:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
void __pi_syserror (word ec, const char *m) {
     d14:	5f747365 	svcpl	0x00747365
	diag ("SYSERR: %x, %s", ec, m);
     d18:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     d1c:	00656761 	rsbeq	r6, r5, r1, ror #14
  __ASM volatile ("cpsid i" : : : "memory");
     d20:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     d24:	5f62616c 	svcpl	0x0062616c
     d28:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     d2c:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
		all_leds_blink;
     d30:	73677261 	cmnvc	r7, #268435462	; 0x10000006
     d34:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d38:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     d3c:	5f00745f 	svcpl	0x0000745f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d40:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     d44:	645f6261 	ldrbvs	r6, [pc], #-609	; d4c <__pi_syserror+0x38>
     d48:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     d4c:	6e5f7961 	vnmlavs.f16	s15, s30, s3	; <UNPREDICTABLE>
     d50:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     d54:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
	while (1) {
     d58:	646f6e5f 	strbtvs	r6, [pc], #-3679	; d60 <__pi_syserror+0x4c>
     d5c:	5f007365 	svcpl	0x00007365
     d60:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     d64:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
void tci_run_delay_timer () {
     d68:	2074726f 	rsbscs	r7, r4, pc, ror #4
	setdel = __pi_mintk - __pi_old;
     d6c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     d70:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     d74:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     d78:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d7c:	5f706461 	svcpl	0x00706461
     d80:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     d84:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     d88:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d8c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
	sti_tim;
     d90:	735f5f00 	cmpvc	pc, #0, 30
}
     d94:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     d98:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     d9c:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xfffff08c
     da0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     da4:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
	cli_aux;
     da8:	5f64726f 	svcpl	0x0064726f
     dac:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db0:	00656761 	rsbeq	r6, r5, r1, ror #14
     db4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     db8:	5f62616c 	svcpl	0x0062616c
     dbc:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xfffff09c
	sti_aux;
     dc0:	7361635f 	cmnvc	r1, #2080374785	; 0x7c000001
}
     dc4:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     dc8:	7079746e 	rsbsvc	r7, r9, lr, ror #8
     dcc:	5f007365 	svcpl	0x00007365
void AONRTCIntHandler () {
     dd0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     dd4:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
     dd8:	6f707365 	svcvs	0x00707365
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     ddc:	5f65736e 	svcpl	0x0065736e
		if (__pi_utims [0] == 0)
     de0:	72635f31 	rsbvc	r5, r3, #49, 30	; 0xc4
     de4:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
		if (*(__pi_utims [0])) {
     de8:	735f5f00 	cmpvc	pc, #0, 30
     dec:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
			(*(__pi_utims [0]))--;
     df0:	6b73615f 	blvs	1cd9374 <__ccfg+0x1cb93cc>
		if (__pi_utims [1] == 0)
     df4:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
		if (*(__pi_utims [1])) {
     df8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
			aux_timer_inactive = 0;
     dfc:	5f64726f 	svcpl	0x0064726f
			(*(__pi_utims [1]))--;
     e00:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
		if (__pi_utims [2] == 0)
     e04:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
		if (*(__pi_utims [2])) {
     e08:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
			(*(__pi_utims [2]))--;
     e0c:	2f656d6f 	svccs	0x00656d6f
		if (__pi_utims [3] != 0) {
     e10:	70657473 	rsbvc	r7, r5, r3, ror r4
			if (*(__pi_utims [3])) {
     e14:	2f6e6568 	svccs	0x006e6568
				aux_timer_inactive = 0;
     e18:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
				(*(__pi_utims [3]))--;
     e1c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
	if (__pi_systat.ledsts) {
     e20:	69472f73 	stmdbvs	r7, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     e24:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
		if (__pi_systat.ledblc++ == 0) {
     e28:	7369442f 	cmnvc	r9, #788529152	; 0x2f000000
     e2c:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
			if (__pi_systat.ledblk) {
     e30:	64657475 	strbtvs	r7, [r5], #-1141	; 0xfffffb8b
     e34:	7461442d 	strbtvc	r4, [r1], #-1069	; 0xfffffbd3
     e38:	74532d61 	ldrbvc	r2, [r3], #-3425	; 0xfffff29f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e3c:	67616f72 			; <UNDEFINED> instruction: 0x67616f72
     e40:	79532d65 	ldmdbvc	r3, {r0, r2, r5, r6, r8, sl, fp, sp}^
				if (__pi_systat.ledsts & 0x2)
     e44:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     e48:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
     e4c:	00745f66 	rsbseq	r5, r4, r6, ror #30
				if (__pi_systat.ledsts & 0x4)
     e50:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
				__pi_systat.ledblk = 0;
     e54:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
     e58:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
			if (__pi_systat.fstblk)
     e5c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     e60:	00656761 	rsbeq	r6, r5, r1, ror #14
				__pi_systat.ledblc = 200;
     e64:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
	if (events & AON_RTC_EVFLAGS_CH0) {
     e68:	755f0066 	ldrbvc	r0, [pc, #-102]	; e0a <AONRTCIntHandler+0x3a>
		cli_tim;
     e6c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
		__pi_new += setdel;
     e70:	61725f64 	cmnvs	r2, r4, ror #30
     e74:	5f00646e 	svcpl	0x0000646e
		setdel = 0;
     e78:	70736e75 	rsbsvc	r6, r3, r5, ror lr
		RISE_N_SHINE;
     e7c:	66696365 	strbtvs	r6, [r9], -r5, ror #6
		__pi_new += setdel;
     e80:	5f646569 	svcpl	0x00646569
		RISE_N_SHINE;
     e84:	61636f6c 	cmnvs	r3, ip, ror #30
     e88:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
		aux_timer_inactive = 1;
     e8c:	006f666e 	rsbeq	r6, pc, lr, ror #12
     e90:	494f4843 	stmdbmi	pc, {r0, r1, r6, fp, lr}^	; <UNPREDICTABLE>
				if (__pi_systat.ledsts & 0x1)
     e94:	5f004543 	svcpl	0x00004543
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e98:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     e9c:	73003273 	movwvc	r3, #627	; 0x273
				if (__pi_systat.ledsts & 0x2)
     ea0:	6e5f7465 	cdpvs	4, 5, cr7, cr15, cr5, {3}
     ea4:	5f65646f 	svcpl	0x0065646f
     ea8:	655f6264 	ldrbvs	r6, [pc, #-612]	; c4c <udelay+0xc>
				if (__pi_systat.ledsts & 0x8)
     eac:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
				__pi_systat.ledblk = 1;
     eb0:	756f635f 	strbvc	r6, [pc, #-863]!	; b59 <root+0x4d9>
     eb4:	5f00746e 	svcpl	0x0000746e
		if (aux_timer_inactive) {
     eb8:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
			cli_aux;
     ebc:	5f006178 	svcpl	0x00006178
     ec0:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     ec4:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     ec8:	5f5f0074 	svcpl	0x005f0074
     ecc:	61636f6c 	cmnvs	r3, ip, ror #30
     ed0:	745f656c 	ldrbvc	r6, [pc], #-1388	; ed8 <AONRTCIntHandler+0x108>
     ed4:	71657200 	cmnvc	r5, r0, lsl #4
     ed8:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
     edc:	6361705f 	cmnvs	r1, #95	; 0x5f
     ee0:	0074656b 	rsbseq	r6, r4, fp, ror #10
word tci_update_delay_ticks (Boolean force) {
     ee4:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
	cli_tim;
     ee8:	6552006b 	ldrbvs	r0, [r2, #-107]	; 0xffffff95
     eec:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
	if (setdel) {
     ef0:	65526576 	ldrbvs	r6, [r2, #-1398]	; 0xfffffa8a
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ef4:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ef8:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     efc:	00656761 	rsbeq	r6, r5, r1, ror #14
     f00:	5f77656e 	svcpl	0x0077656e
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f04:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
				AON_RTC_O_CH0CMP)) - gettav ());
     f08:	735f0079 	cmpvc	pc, #121	; 0x79
	return NO;
     f0c:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
			setdel = 0;
     f10:	6e5f0072 	mrcvs	0, 2, r0, cr15, cr2, {3}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f14:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
     f18:	5f00636f 	svcpl	0x0000636f
}
     f1c:	66756275 			; <UNDEFINED> instruction: 0x66756275
		sti_tim;
     f20:	45524300 	ldrbmi	r4, [r2, #-768]	; 0xfffffd00
		return YES;
     f24:	5f455441 	svcpl	0x00455441
     f28:	4f434552 	svcmi	0x00434552
     f2c:	64004452 	strvs	r4, [r0], #-1106	; 0xfffffbae
     f30:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f34:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
	UARTDisable (UART0_BASE);
     f38:	6665006c 	strbtvs	r0, [r5], -ip, rrx
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f3c:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
	UARTDisable (UART0_BASE);
     f40:	6e776f00 	cdpvs	15, 7, cr6, cr7, cr0, {0}
	UARTConfigSetExpClk (UART0_BASE,
     f44:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     f48:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
     f4c:	00746573 	rsbseq	r6, r4, r3, ror r5
     f50:	4f495047 	svcmi	0x00495047
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f54:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     f58:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     f5c:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     f64:	006f6944 	rsbeq	r6, pc, r4, asr #18
     f68:	424e4f41 	submi	r4, lr, #260	; 0x104
	urates [0] = rate;
     f6c:	6f4d7461 	svcvs	0x004d7461
}
     f70:	616e456e 	cmnvs	lr, lr, ror #10
     f74:	00656c62 	rsbeq	r6, r5, r2, ror #24
     f78:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     f7c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     f80:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     f84:	666f5f69 	strbtvs	r5, [pc], -r9, ror #30
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f88:	6d6f6466 	cfstrdvs	mvd6, [pc, #-408]!	; df8 <AONRTCIntHandler+0x28>
     f8c:	006e6961 	rsbeq	r6, lr, r1, ror #18
     f90:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f94:	75007661 	strvc	r7, [r0, #-1633]	; 0xfffff99f
     f98:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f9c:	5f5f0073 	svcpl	0x005f0073
     fa0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
	__pi_uart_setrate (urates [0], __pi_uart);
     fa4:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     fa8:	77007172 	smlsdxvc	r0, r2, r1, r7
     fac:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
     fb0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     fb4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     fb8:	5f6e7566 	svcpl	0x006e7566
     fbc:	4f410074 	svcmi	0x00410074
	switch (operation) {
     fc0:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
static int ioreq_uart_a (int operation, char *buf, int len) {
     fc4:	57787541 	ldrbpl	r7, [r8, -r1, asr #10]!
     fc8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
     fcc:	65764570 	ldrbvs	r4, [r6, #-1392]!	; 0xfffffa90
     fd0:	4100746e 	tstmi	r0, lr, ror #8
     fd4:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
				*buf++ = uart_a_read;
     fd8:	776f5043 	strbvc	r5, [pc, -r3, asr #32]!
     fdc:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
			while (len && uart_a_char_available) {
     fe0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     fe4:	00746547 	rsbseq	r6, r4, r7, asr #10
     fe8:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
			if (len != operation) {
     fec:	43746e49 	cmnmi	r4, #1168	; 0x490
}
     ff0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     ff4:	73797300 	cmnvc	r9, #0, 6
			uart_a_disable_int;
     ff8:	5f6d6574 	svcpl	0x006d6574
			if (uart_a_char_available) {
     ffc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
				*buf++ = uart_a_read;
    1000:	4e4f4100 	dvfmie	f4, f7, f0
			uart_a_disable_int;
    1004:	53435557 	movtpl	r5, #13655	; 0x3557
    1008:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
			if (uart_a_char_available) {
    100c:	456e776f 	strbmi	r7, [lr, #-1903]!	; 0xfffff891
    1010:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
				uart_a_enable_int;
    1014:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
    1018:	6c656474 	cfstrdvs	mvd6, [r5], #-464	; 0xfffffe30
				goto Redo_rx;
    101c:	43525000 	cmpmi	r2, #0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    1020:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
    1024:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
			return -2;
    1028:	66664f72 	uqsub16vs	r4, r6, r2
    102c:	735f5f00 	cmpvc	pc, #0, 30
				uart_a_write (*buf);
    1030:	4d5f7465 	cfldrdmi	mvd7, [pc, #-404]	; ea4 <AONRTCIntHandler+0xd4>
    1034:	64005053 	strvs	r5, [r0], #-83	; 0xffffffad
			while (len && uart_a_room_in_tx) {
    1038:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
    103c:	745f7469 	ldrbvc	r7, [pc], #-1129	; 1044 <ioreq_uart_a+0x84>
    1040:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			if (len != operation) {
    1044:	6e6f5f69 	cdpvs	15, 6, cr5, cr15, cr9, {3}
			uart_a_disable_int;
    1048:	616d6f64 	cmnvs	sp, r4, ror #30
    104c:	55006e69 	strpl	r6, [r0, #-3689]	; 0xfffff197
			if (uart_a_room_in_tx) {
    1050:	48545241 	ldmdami	r4, {r0, r6, r9, ip, lr}^
    1054:	6f6c4677 	svcvs	0x006c4677
				uart_a_enable_int;
    1058:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    105c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; e94 <AONRTCIntHandler+0xc4>
				*buf++ = uart_a_read;
    1060:	61736944 	cmnvs	r3, r4, asr #18
			if (uart_a_room_in_tx) {
    1064:	00656c62 	rsbeq	r6, r5, r2, ror #24
				uart_a_write (*buf);
    1068:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    106c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1070:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
    1074:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
			uart_a_enable_int;
    1078:	4f410065 	svcmi	0x00410065
    107c:	434f494e 	movtmi	r4, #63822	; 0xf94e
    1080:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
			return 0;
    1084:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
			if (len == UART_CNTRL_SETRATE) {
    1088:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
				if (__pi_uart_setrate (*((word*)buf),
    108c:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    1090:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
    1094:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
				syserror (EREQPAR, "uar");
    1098:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
			syserror (ENOOPER, "uai");
    109c:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
			if (len == UART_CNTRL_GETRATE) {
    10a0:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
				return 1;
    10a4:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    10a8:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
			syserror (ENOOPER, "uai");
    10ac:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
    10b0:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    10b4:	6f6c436c 	svcvs	0x006c436c
    10b8:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
    10bc:	52500074 	subspl	r0, r0, #116	; 0x74
    10c0:	61434d43 	cmpvs	r3, r3, asr #26
    10c4:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
    10c8:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
    10cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    10d0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
void UART0IntHandler () {
    10d4:	5000656c 	andpl	r6, r0, ip, ror #10
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10d8:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    10dc:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
    10e0:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    10e4:	45323369 	ldrmi	r3, [r2, #-873]!	; 0xfffffc97
    10e8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10ec:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
    10f0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		RISE_N_SHINE;
    10f4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    10f8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
		i_trigger (devevent (UART_A, READ));
    10fc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
    1100:	73747075 	cmnvc	r4, #117	; 0x75
    1104:	52415500 	subpl	r5, r1, #0, 10
    1108:	46494654 			; <UNDEFINED> instruction: 0x46494654
    110c:	616e454f 	cmnvs	lr, pc, asr #10
    1110:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1114:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1118:	46746e49 	ldrbtmi	r6, [r4], -r9, asr #28
    111c:	7367616c 	cmnvc	r7, #108, 2
    1120:	6f696400 	svcvs	0x00696400
    1124:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1128:	5f007265 	svcpl	0x00007265
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    112c:	5f69705f 	svcpl	0x0069705f
    1130:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    1134:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
		i_trigger (devevent (UART_A, WRITE));
    1138:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    113c:	776f5000 	strbvc	r5, [pc, -r0]!
    1140:	74437265 	strbvc	r7, [r3], #-613	; 0xfffffd9b
		RISE_N_SHINE;
    1144:	4f496c72 	svcmi	0x00496c72
    1148:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    114c:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
		i_trigger (devevent (UART_A, WRITE));
    1150:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1154:	52500065 	subspl	r0, r0, #101	; 0x65
    1158:	61434d43 	cmpvs	r3, r3, asr #26
    115c:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
    1160:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
    1164:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1168:	61736944 	cmnvs	r3, r4, asr #18
    116c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1170:	70746573 	rsbsvc	r6, r4, r3, ror r5
    1174:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    1178:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
}
    117c:	65706f00 	ldrbvs	r6, [r0, #-3840]!	; 0xfffff100
    1180:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1184:	61006e6f 	tstvs	r0, pc, ror #28
    1188:	745f7875 	ldrbvc	r7, [pc], #-2165	; 1190 <__buttons_setirq>
    118c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
void __buttons_setirq (int val) {
    1190:	616e695f 	cmnvs	lr, pc, asr r9
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1194:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1198:	6f700065 	svcvs	0x00700065
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    119c:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
    11a0:	73666e6f 	cmnvc	r6, #1776	; 0x6f0
    11a4:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
		bn = BUTTON_GPIO (__button_list [i]);
    11a8:	78745f6f 	ldmdavc	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11ac:	33697500 	cmncc	r9, #0, 10
    11b0:	636e4932 	cmnvs	lr, #819200	; 0xc8000
    11b4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    11b8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    11bc:	61423233 	cmpvs	r2, r3, lsr r2
    11c0:	5f006573 	svcpl	0x00006573
}
    11c4:	5f6f645f 	svcpl	0x006f645f
    11c8:	5f696677 	svcpl	0x00696677
    11cc:	6e5f7361 	cdpvs	3, 5, cr7, cr15, cr1, {3}
    11d0:	65646565 	strbvs	r6, [r4, #-1381]!	; 0xfffffa9b
void __pinlist_setirq (int val) {
    11d4:	4f410064 	svcmi	0x00410064
	for (i = 0; i < N_PINLIST; i++) {
    11d8:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11dc:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11e0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	for (i = 0; i < N_PINLIST; i++) {
    11e4:	53326843 	teqpl	r2, #4390912	; 0x430000
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11e8:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    11ec:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11f0:	755f7469 	ldrbvc	r7, [pc, #-1129]	; d8f <tci_run_delay_timer+0x27>
    11f4:	00747261 	rsbseq	r7, r4, r1, ror #4
    11f8:	524e4f41 	subpl	r4, lr, #260	; 0x104
	for (i = 0; i < N_PINLIST; i++) {
    11fc:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
}
    1200:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    1204:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1208:	72617000 	rsbvc	r7, r1, #0
    120c:	74006d61 	strvc	r6, [r0], #-3425	; 0xfffff29f
void GPIOIntHandler () {
    1210:	725f6963 	subsvc	r6, pc, #1622016	; 0x18c000
if (buttons_int) {
    1214:	645f6e75 	ldrbvs	r6, [pc], #-3701	; 121c <GPIOIntHandler+0xc>
    1218:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
	buttons_disable ();
    121c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1220:	5f007265 	svcpl	0x00007265
	i_trigger ((aword)&__button_list);
    1224:	5f69705f 	svcpl	0x0069705f
    1228:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    122c:	00657361 	rsbeq	r7, r5, r1, ror #6
    1230:	6f646552 	svcvs	0x00646552
    1234:	65727000 	ldrbvs	r7, [r2, #-0]!
    1238:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    123c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    1240:	6f660074 	svcvs	0x00660074
    1244:	00656372 	rsbeq	r6, r5, r2, ror r3
    1248:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    124c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	RISE_N_SHINE;
    1250:	4700656c 	strmi	r6, [r0, -ip, ror #10]
    1254:	5f4f4950 	svcpl	0x004f4950
    1258:	61656c63 	cmnvs	r5, r3, ror #24
if (pin_sensor_int) {
    125c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    1260:	6944746e 	stmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
	i_trigger ((aword)(&__input_pins));
    1264:	5f5f006f 	svcpl	0x005f006f
    1268:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    126c:	5f736e6f 	svcpl	0x00736e6f
    1270:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1274:	6d007172 	stfvss	f7, [r0, #-456]	; 0xfffffe38
    1278:	616c6564 	cmnvs	ip, r4, ror #10
    127c:	5f5f0079 	svcpl	0x005f0079
    1280:	61736964 	cmnvs	r3, r4, ror #18
    1284:	5f656c62 	svcpl	0x00656c62
    1288:	00717269 	rsbseq	r7, r1, r9, ror #4
    128c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 11d8 <__pinlist_setirq+0x4>
	__pinsen_disable_and_clear;
    1290:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	RISE_N_SHINE;
    1294:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1298:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    129c:	6f746b73 	svcvs	0x00746b73
}
    12a0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    12a4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    12a8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    12ac:	2f534f43 	svccs	0x00534f43
    12b0:	4f636950 	svcmi	0x00636950
void system_init () {
    12b4:	43432f53 	movtmi	r2, #16211	; 0x3f53
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12b8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    12bc:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12c0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    12c4:	4f495047 	svcmi	0x00495047
    12c8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    12cc:	69447261 	stmdbvs	r4, {r0, r5, r6, r9, ip, sp, lr}^
    12d0:	7953006f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6}^
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12d4:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    12d8:	6e6f416c 	powvsez	f4, f7, #4.0
    12dc:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12e0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12e4:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12e8:	666b6361 	strbtvs	r6, [fp], -r1, ror #6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ec:	00656572 	rsbeq	r6, r5, r2, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f0:	5f696374 	svcpl	0x00696374
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12f4:	5f6e7572 	svcpl	0x006e7572
		pin = (port_confs [i] >> 19) & 0x1f;
    12f8:	69787561 	ldmdbvs	r8!, {r0, r5, r6, r8, sl, ip, sp, lr}^
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12fc:	7261696c 	rsbvc	r6, r1, #108, 18	; 0x1b0000
		pin = (port_confs [i] >> 19) & 0x1f;
    1300:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1304:	0072656d 	rsbseq	r6, r2, sp, ror #10
    1308:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    130c:	73696c6e 	cmnvc	r9, #28160	; 0x6e00
    1310:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
		if (port_confs [i] & 0x80)
    1314:	71726974 	cmnvc	r2, r4, ror r9
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1318:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    131c:	746e494f 	strbtvc	r4, [lr], #-2383	; 0xfffff6b1
		if (port_confs [i] & 0x40)
    1320:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1324:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1328:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 1228 <GPIOIntHandler+0x18>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    132c:	006e6165 	rsbeq	r6, lr, r5, ror #2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1330:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1334:	4f464946 	svcmi	0x00464946
	all_leds_blink;
    1338:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    133c:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
    1340:	73795300 	cmnvc	r9, #0, 6
    1344:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    1348:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
    134c:	65526d65 	ldrbvs	r6, [r2, #-3429]	; 0xfffff29b
    1350:	00746573 	rsbseq	r6, r4, r3, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1354:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    1358:	65007661 	strvs	r7, [r0, #-1633]	; 0xfffff99f
    135c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1360:	64750073 	ldrbtvs	r0, [r5], #-115	; 0xffffff8d
    1364:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1368:	4e4f4100 	dvfmie	f4, f7, f0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    136c:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
    1370:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	IntEnable (INT_AON_RTC_COMB);
    1374:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1378:	5f5f0065 	svcpl	0x005f0065
    137c:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
	__pi_malloc_init ();
    1380:	6f6d7461 	svcvs	0x006d7461
	IntEnable (INT_AON_GPIO_EDGE);
    1384:	4f41006e 	svcmi	0x0041006e
    1388:	434f494e 	movtmi	r4, #63822	; 0xf94e
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    138c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1390:	6e45657a 	mcrvs	5, 2, r6, cr5, cr10, {3}
    1394:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1398:	4e4f4100 	dvfmie	f4, f7, f0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    139c:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
    13a0:	61426e6f 	cmpvs	r2, pc, ror #28
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    13a4:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
    13a8:	6c6f5679 	stclvs	6, cr5, [pc], #-484	; 11cc <__buttons_setirq+0x3c>
    13ac:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
	urates [0] = UART_RATE / 100;
    13b0:	00746547 	rsbseq	r6, r4, r7, asr #10
    13b4:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
	reinit_uart ();
    13b8:	61755f71 	cmnvs	r5, r1, ror pc
	EXTRA_INITIALIZERS;
    13bc:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
    13c0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    13c4:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
    13c8:	00736d69 	rsbseq	r6, r3, r9, ror #26
    13cc:	746e6973 	strbtvc	r6, [lr], #-2419	; 0xfffff68d
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    13d0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    13d4:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13d8:	6f694474 	svcvs	0x00694474
    13dc:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
			devinit [i] . init (devinit [i] . param);
    13e0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    13e8:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    13ec:	72726573 	rsbsvc	r6, r2, #482344960	; 0x1cc00000
	IntEnable (INT_UART0_COMB);
    13f0:	6400726f 	strvs	r7, [r0], #-623	; 0xfffffd91
    13f4:	756e7665 	strbvc	r7, [lr, #-1637]!	; 0xfffff99b
}
    13f8:	6975006d 	ldmdbvs	r5!, {r0, r2, r3, r5, r6}^
	tci_run_auxiliary_timer ();
    13fc:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
		diag ("");
    1400:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1404:	74614274 	strbtvc	r4, [r1], #-628	; 0xfffffd8c
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1408:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    140c:	52415500 	subpl	r5, r1, #0, 10
		diag ("Leftover RAM: %d bytes",
    1410:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
    1414:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1418:	5000656c 	andpl	r6, r0, ip, ror #10
    141c:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
    1420:	6c557563 	cfldr64vs	mvdx7, [r5], {99}	; 0x63
    1424:	6f436f64 	svcvs	0x00436f64
    1428:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    142c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1430:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    1434:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
    1438:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    143c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1440:	61680065 	cmnvs	r8, r5, rrx
    1444:	7400746c 	strvc	r7, [r0], #-1132	; 0xfffffb94
    1448:	664f706f 	strbvs	r7, [pc], -pc, rrx
    144c:	6e69614d 	powvsem	f6, f1, #5.0
    1450:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
    1454:	675f006b 	ldrbvs	r0, [pc, -fp, rrx]
    1458:	616c6564 	cmnvs	ip, r4, ror #10
    145c:	41550079 	cmpmi	r5, r9, ror r0
    1460:	49305452 	ldmdbmi	r0!, {r1, r4, r6, sl, ip, lr}
    1464:	6148746e 	cmpvs	r8, lr, ror #8
    1468:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    146c:	65440072 	strbvs	r0, [r4, #-114]	; 0xffffff8e
    1470:	6c537065 	mrrcvs	0, 6, r7, r3, cr5
    1474:	00706565 	rsbseq	r6, r0, r5, ror #10
    1478:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    147c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    1480:	00676966 	rsbeq	r6, r7, r6, ror #18
    1484:	5f696374 	svcpl	0x00696374
    1488:	61647075 	smcvs	18181	; 0x4705
}
    148c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1494 <__pi_release+0x4>
__attribute__ ((noreturn)) void __pi_release () {
    1490:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1494:	6369745f 	cmnvs	r9, #1593835520	; 0x5f000000
    1498:	4d00736b 	stcmi	3, cr7, [r0, #-428]	; 0xfffffe54
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    149c:	75736165 	ldrbvc	r6, [r3, #-357]!	; 0xfffffe9b
	check_stack_overflow;
    14a0:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
    14a4:	65727665 	ldrbvs	r7, [r2, #-1637]!	; 0xfffff99b
    14a8:	6e756671 	mrcvs	6, 3, r6, cr5, cr1, {3}
	update_n_wake (MAX_WORD, NO);
    14ac:	6b00745f 	blvs	1e630 <__exidx_end+0x18970>
    14b0:	656c6c69 	strbvs	r6, [ip, #-3177]!	; 0xfffff397
    14b4:	5f5f0076 	svcpl	0x005f0076
	for_all_tasks (__pi_curr) {
    14b8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    14bc:	70637274 	rsbvc	r7, r3, r4, ror r2
    14c0:	5f5f0079 	svcpl	0x005f0079
  __ASM volatile ("cpsid i" : : : "memory");
    14c4:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 13ec <system_init+0x138>	; <UNPREDICTABLE>
	__SLEEP;
    14c8:	6f6c6c61 	svcvs	0x006c6c61
    14cc:	6e750063 	cdpvs	0, 7, cr0, cr5, cr3, {3}
    14d0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    14d4:	72667100 	rsbvc	r7, r6, #0, 2
	system_event_count ++;
    14d8:	69006565 	stmdbvs	r0, {r0, r2, r5, r6, r8, sl, sp, lr}
    14dc:	7165726f 	cmnvc	r5, pc, ror #4
	switch (__pi_systat.effpdm) {
    14e0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    14e4:	6f665f69 	svcvs	0x00665f69
    14e8:	6b006b72 	blvs	1c2b8 <__exidx_end+0x165f8>
    14ec:	006c6c69 	rsbeq	r6, ip, r9, ror #24
			__WFI ();
    14f0:	6f6f706d 	svcvs	0x006f706d
    14f4:	7500736c 	strvc	r7, [r0, #-876]	; 0xfffffc94
    14f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	check_stack_overflow;
    14fc:	64615f72 	strbtvs	r5, [r1], #-3954	; 0xfffff08e
    1500:	41550064 	cmpmi	r5, r4, rrx
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1504:	75425452 	strbvc	r5, [r2, #-1106]	; 0xfffffbae
    1508:	5f007973 	svcpl	0x00007973
			(__pi_curr->code) (tstate (__pi_curr));
    150c:	5f69705f 	svcpl	0x0069705f
			goto Redo;
    1510:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
	for_all_tasks (__pi_curr) {
    1514:	695f636f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1518:	0074696e 	rsbseq	r6, r4, lr, ror #18
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    151c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1520:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1524:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1528:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    152c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1530:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    1534:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1538:	616d5f69 	cmnvs	sp, r9, ror #30
    153c:	65726678 	ldrbvs	r6, [r2, #-1656]!	; 0xfffff988
			__WFI ();
    1540:	72630065 	rsbvc	r0, r3, #101	; 0x65
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    1548:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
}
    154c:	006b6863 	rsbeq	r6, fp, r3, ror #16
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1550:	72666e6d 	rsbvc	r6, r6, #1744	; 0x6d0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1554:	70006565 	andvc	r6, r0, r5, ror #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1558:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
    155c:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1560:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1564:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1568:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    156c:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1570:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
    1574:	76656464 	strbtvc	r6, [r5], -r4, ror #8
    1578:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    157c:	64697000 	strbtvs	r7, [r9], #-0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1580:	00726576 	rsbseq	r6, r2, r6, ror r5
    1584:	67616964 	strbvs	r6, [r1, -r4, ror #18]!
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1588:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    158c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    1590:	74616372 	strbtvc	r6, [r1], #-882	; 0xfffffc8e
    1594:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
    1598:	5f746e65 	svcpl	0x00746e65
    159c:	636d0074 	cmnvs	sp, #116	; 0x74
			SysCtrlSetRechargeBeforePowerDown
    15a0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    15a4:	73617700 	cmnvc	r1, #0, 14
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15a8:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
    15ac:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15b0:	73656400 	cmnvc	r5, #0, 8
    15b4:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
    15b8:	2f007373 	svccs	0x00007373
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    15bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    15c0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15c4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    15cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    15d0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    15d4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			while (!(AONWUCPowerStatusGet () &
    15d8:	4349502f 	movtmi	r5, #36911	; 0x902f
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15dc:	502f534f 	eorpl	r5, pc, pc, asr #6
    15e0:	534f6369 	movtpl	r6, #62313	; 0xf369
    15e4:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15e8:	2f6c656e 	svccs	0x006c656e
    15ec:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    15f0:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
    15f4:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15f8:	00746e65 	rsbseq	r6, r4, r5, ror #28
    15fc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1600:	6461625f 	strbtvs	r6, [r1], #-607	; 0xfffffda1
    1604:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
			SysCtrlAdjustRechargeAfterPowerDown ();
    1608:	5f5f0065 	svcpl	0x005f0065
			reinit_uart ();
    160c:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
    1610:	00746961 	rsbseq	r6, r4, r1, ror #18
    1614:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
}
    1618:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    161c:	6d656d74 	stclvs	13, cr6, [r5, #-464]!	; 0xfffffe30
    1620:	6e726c00 	cdpvs	12, 7, cr6, cr2, cr0, {0}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1624:	5f5f0064 	svcpl	0x005f0064
    1628:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 1550 <__pi_release+0xc0>	; <UNPREDICTABLE>
    162c:	72666d65 	rsbvc	r6, r6, #6464	; 0x1940
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1630:	63006565 	movwvs	r6, #1381	; 0x565
    1634:	6b6e7568 	blvs	1b9ebdc <__ccfg+0x1b7ec34>
    1638:	64707500 	ldrbtvs	r7, [r0], #-1280	; 0xfffffb00
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    163c:	5f657461 	svcpl	0x00657461
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1640:	61775f6e 	cmnvs	r7, lr, ror #30
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1644:	5f00656b 	svcpl	0x0000656b
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1648:	5f69705f 	svcpl	0x0069705f
    164c:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1650:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1654:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1658:	656c6400 	strbvs	r6, [ip, #-1024]!	; 0xfffffc00
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    165c:	5f007466 	svcpl	0x00007466
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1660:	5f69705f 	svcpl	0x0069705f
    1664:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
			PRCMPowerDomainOff (
    1668:	64007970 	strvs	r7, [r0], #-2416	; 0xfffff690
    166c:	74756f67 	ldrbtvc	r6, [r5], #-3943	; 0xfffff099
	__SLEEP;
    1670:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1674:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
  __ASM volatile ("cpsie i" : : : "memory");
    1678:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
	goto Redo;
    167c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1680:	75667700 	strbvc	r7, [r6, #-1792]!	; 0xfffff900
    1684:	666e006e 	strbtvs	r0, [lr], -lr, rrx
    1688:	006c6961 	rsbeq	r6, ip, r1, ror #18
    168c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1690:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
    1694:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
    1698:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
    169c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    16a0:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
    16a4:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    16a8:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
    16ac:	6c6c616c 	stfvse	f6, [ip], #-432	; 0xfffffe50
    16b0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    16b4:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    16b8:	70636e72 	rsbvc	r6, r3, r2, ror lr
    16bc:	5f5f0079 	svcpl	0x005f0079
    16c0:	6a5f6970 	bvs	17dbc88 <__ccfg+0x17bbce0>
    16c4:	006e696f 	rsbeq	r6, lr, pc, ror #18
    16c8:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    16cc:	645f7265 	ldrbvs	r7, [pc], #-613	; 16d4 <__pi_release+0x244>
    16d0:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    16d4:	5f5f0065 	svcpl	0x005f0065
    16d8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    16dc:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    16e0:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
    16e4:	715f7663 	cmpvc	pc, r3, ror #12
	cli_tim;
    16e8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    16ec:	65727000 	ldrbvs	r7, [r2, #-0]!
    16f0:	5f5f0076 	svcpl	0x005f0076
	diag ("PicOS halted");
    16f4:	5f766374 	svcpl	0x00766374
	mdelay (500);
    16f8:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
    16fc:	00745f72 	rsbseq	r5, r4, r2, ror pc
	setpowermode (2);
    1700:	70766374 	rsbsvc	r6, r6, r4, ror r3
	__PCB = NULL;
    1704:	745f7968 	ldrbvc	r7, [pc], #-2408	; 170c <halt+0x24>
	release;
    1708:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
    170c:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
    1710:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1714:	74006c6f 	strvc	r6, [r0], #-3183	; 0xfffff391
int main (void) {
    1718:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    171c:	00646165 	rsbeq	r6, r4, r5, ror #2
    1720:	70766374 	rsbsvc	r6, r6, r4, ror r3
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1724:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1728:	65736f70 	ldrbvs	r6, [r3, #-3952]!	; 0xfffff090
	system_init ();
    172c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	tcv_init ();
    1730:	5f796870 	svcpl	0x00796870
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1734:	00676572 	rsbeq	r6, r7, r2, ror r5
    1738:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    173c:	5f6e7566 	svcpl	0x006e7566
    1740:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    1744:	2f656d6f 	svccs	0x00656d6f
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1748:	70657473 	rsbvc	r7, r5, r3, ror r4
    174c:	2f6e6568 	svccs	0x006e6568
	delay (16, 0);
    1750:	6b736544 	blvs	1cdac68 <__ccfg+0x1cbacc0>
    1754:	2f706f74 	svccs	0x00706f74
    1758:	4f534c4f 	svcmi	0x00534c4f
	__pi_release ();
    175c:	2f54454e 	svccs	0x0054454e
    1760:	4f434950 	svcmi	0x00434950
    1764:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1768:	2f534f63 	svccs	0x00534f63
    176c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1770:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    1774:	2f497465 	svccs	0x00497465
static void killev (__pi_pcb_t *pid) {
    1778:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
	wfun = (aword)(pid->code);
    177c:	63740063 	cmnvs	r4, #99	; 0x63
	for_all_tasks (i) {
    1780:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
		for (j = 0; j < nevents (i); j++) {
    1784:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    1788:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    178c:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
			    || i->Events [j] . Event == wfun
    1790:	6374006e 	cmnvs	r4, #110	; 0x6e
		for (j = 0; j < nevents (i); j++) {
    1794:	72645f76 	rsbvc	r5, r4, #472	; 0x1d8
			if (i->Events [j] . Event == (aword)pid
    1798:	7000706f 	andvc	r7, r0, pc, rrx
    179c:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
    17a0:	006f666e 	rsbeq	r6, pc, lr, ror #12
				wakeupev (i, j);
    17a4:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    17a8:	63740079 	cmnvs	r4, #121	; 0x79
	for_all_tasks (i) {
    17ac:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
}
    17b0:	6172655f 	cmnvs	r2, pc, asr r5
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b4:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
static void qfree (aword *ch) {
    17b8:	5f707663 	svcpl	0x00707663
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17bc:	61747461 	cmnvs	r4, r1, ror #8
	cc = (aword*)(mpools + MA_NP);
    17c0:	6f006863 	svcvs	0x00006863
	m_setnextp (ch, chunk);
    17c4:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
	m_setnextp (cc, ch);
    17c8:	5f007365 	svcpl	0x00007365
}
    17cc:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    17d0:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
    17d4:	735f6d65 	cmpvc	pc, #6464	; 0x1940
    17d8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 17e0 <qfree+0x2c>
			m_setnextp (cc, m_nextp (chunk));
    17dc:	715f7663 	cmpvc	pc, r3, ror #12
			m_size (chunk) += m_hdrlen + m_size (ch);
    17e0:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    17e4:	5f00745f 	svcpl	0x0000745f
    17e8:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    17ec:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17f0:	5f6b636f 	svcpl	0x006b636f
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17f4:	74610074 	strbtvc	r0, [r1], #-116	; 0xffffff8c
    17f8:	75007074 	strvc	r7, [r0, #-116]	; 0xffffff8c
    17fc:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
			m_setnextp (cc, m_nextp (chunk));
    1800:	72450074 	subvc	r0, r5, #116	; 0x74
			m_size (ch) += m_hdrlen + m_size (chunk);
    1804:	0074725f 	rsbseq	r7, r4, pc, asr r2
    1808:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
    180c:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
    1810:	0073726f 	rsbseq	r7, r3, pc, ror #4
    1814:	5f766374 	svcpl	0x00766374
    1818:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
			if (m_size (chunk) >= m_size (ch))
    181c:	63740065 	cmnvs	r4, #101	; 0x65
    1820:	6e655f76 	mcrvs	15, 3, r5, cr5, cr6, {3}
    1824:	74007064 	strvc	r7, [r0], #-100	; 0xffffff9c
		chunk = m_nextp (chunk))
    1828:	5f707663 	svcpl	0x00707663
    182c:	0077656e 	rsbseq	r6, r7, lr, ror #10
    1830:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0xfffffe8e
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1834:	70006575 	andvc	r6, r0, r5, ror r5
	diag_wait (a);
    1838:	00737274 	rsbseq	r7, r3, r4, ror r2
	diag_wchar (c, a);
    183c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    1840:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
}
    1844:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1848:	706e775f 	rsbvc	r7, lr, pc, asr r7
	syserror (ESTATE, "state");
    184c:	63740073 	cmnvs	r4, #115	; 0x73
    1850:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
    1854:	00657469 	rsbeq	r7, r5, r9, ror #8
    1858:	5f766374 	svcpl	0x00766374
	for (i = 0; i < MAX_UTIMERS; i++)
    185c:	736f6c63 	cmnvc	pc, #25344	; 0x6300
void utimer_add (address ut) {
    1860:	5f5f0065 	svcpl	0x005f0065
    1864:	5f766374 	svcpl	0x00766374
		if (__pi_utims [i] == NULL)
    1868:	64736573 	ldrbtvs	r6, [r3], #-1395	; 0xfffffa8d
	for (i = 0; i < MAX_UTIMERS; i++)
    186c:	5f637365 	svcpl	0x00637365
    1870:	68700074 	ldmdavs	r0!, {r2, r4, r5, r6}^
		syserror (ERESOURCE, "ut a");
    1874:	70007379 	andvc	r7, r0, r9, ror r3
	__pi_utims [i] = ut;
    1878:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
}
    187c:	006c6163 	rsbeq	r6, ip, r3, ror #2
    1880:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
    1884:	74006465 	strvc	r6, [r0], #-1125	; 0xfffffb9b
	*t = v;
    1888:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	TCI_RUN_AUXILIARY_TIMER;
    188c:	0074696e 	rsbseq	r6, r4, lr, ror #18
void update_n_wake (word min, Boolean force) {
    1890:	73736573 	cmnvc	r3, #482344960	; 0x1cc00000
	if (TCI_UPDATE_DELAY_TICKS (force))
    1894:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1898:	70766374 	rsbsvc	r6, r6, r4, ror r3
    189c:	6f6c635f 	svcvs	0x006c635f
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    18a0:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
    18a4:	5f707663 	svcpl	0x00707663
    18a8:	69737361 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    18ac:	70006e67 	andvc	r6, r0, r7, ror #28
    18b0:	0064696c 	rsbeq	r6, r4, ip, ror #18
    18b4:	70766374 	rsbsvc	r6, r6, r4, ror r3
    18b8:	655f7968 	ldrbvs	r7, [pc, #-2408]	; f58 <__pi_uart_setrate+0x24>
    18bc:	6100646e 	tstvs	r0, lr, ror #8
    18c0:	61707474 	cmnvs	r0, r4, ror r4
    18c4:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
    18c8:	6374006e 	cmnvs	r4, #110	; 0x6e
    18cc:	6c705f76 	ldclvs	15, cr5, [r0], #-472	; 0xfffffe28
    18d0:	61006775 	tstvs	r0, r5, ror r7
		for_all_tasks (i) {
    18d4:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
	__pi_mintk = znew + min;
    18d8:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
    18dc:	5f5f0073 	svcpl	0x005f0073
			if (!twaiting (i))
    18e0:	5f766374 	svcpl	0x00766374
    18e4:	61656871 	smcvs	22145	; 0x5681
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18e8:	00745f64 	rsbseq	r5, r4, r4, ror #30
    18ec:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    18f0:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
    18f4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    18f8:	69640068 	stmdbvs	r4!, {r3, r5, r6}^
    18fc:	74007073 	strvc	r7, [r0], #-115	; 0xffffff8d
    1900:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
    1904:	7400706e 	strvc	r7, [r0], #-110	; 0xffffff92
    1908:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    190c:	63725f79 	cmnvs	r2, #484	; 0x1e4
    1910:	71620076 	smcvc	8198	; 0x2006
    1914:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
				wakeuptm (i);
    1918:	756c7000 	strbvc	r7, [ip, #-0]!
    191c:	736e6967 	cmnvc	lr, #1687552	; 0x19c000
		for_all_tasks (i) {
    1920:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1928 <update_n_wake+0x98>
				d = i->Timer - znew;
    1924:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1928:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    192c:	00735f6b 	rsbseq	r5, r3, fp, ror #30
		if ((word)(__pi_mintk - znew) < min) 
    1930:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
    1934:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
    1938:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__pi_old = znew;
    193c:	6f635f70 	svcvs	0x00635f70
}
    1940:	6f72746e 	svcvs	0x0072746e
	TCI_RUN_DELAY_TIMER;
    1944:	655f006c 	ldrbvs	r0, [pc, #-108]	; 18e0 <update_n_wake+0x50>
}
    1948:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    194c:	7570006b 	ldrbvc	r0, [r0, #-107]!	; 0xffffff95
    1950:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    1954:	46006372 			; <UNDEFINED> instruction: 0x46006372
    1958:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
void proceed (word state) {
    195c:	48525349 	ldmdami	r2, {r0, r3, r6, r8, r9, ip, lr}^
	prcdstate (__pi_curr, state);
    1960:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1964:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
	release;
    1968:	5253696d 	subspl	r6, r3, #1785856	; 0x1b4000
    196c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
void __pi_wait (aword event, word state) {
    1970:	0072656c 	rsbseq	r6, r2, ip, ror #10
	sint j = nevents (__pi_curr);
    1974:	6574655f 	ldrbvs	r6, [r4, #-1375]!	; 0xfffffaa1
	if (j >= MAX_EVENTS_PER_TASK)
    1978:	5f007478 	svcpl	0x00007478
    197c:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
    1980:	6f682f00 	svcvs	0x00682f00
		syserror (ENEVENTS, "sw");
    1984:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    1988:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	setestate (__pi_curr->Events [j], state, event);
    198c:	442f6e65 	strtmi	r6, [pc], #-3685	; 1994 <__pi_wait+0x24>
	incwait (__pi_curr);
    1990:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	setestate (__pi_curr->Events [j], state, event);
    1994:	4f2f706f 	svcmi	0x002f706f
}
    1998:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    199c:	502f5445 	eorpl	r5, pc, r5, asr #8
    19a0:	534f4349 	movtpl	r4, #62281	; 0xf349
void __pi_trigger (aword event) {
    19a4:	6369502f 	cmnvs	r9, #47	; 0x2f
	for_all_tasks (i) {
    19a8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		for (j = 0; j < nevents (i); j++) {
    19ac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    19b0:	74732f58 	ldrbtvc	r2, [r3], #-3928	; 0xfffff0a8
    19b4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    19b8:	63675f70 	cmnvs	r7, #112, 30	; 0x1c0
			if (i->Events [j] . Event == event) {
    19bc:	00632e63 	rsbeq	r2, r3, r3, ror #28
    19c0:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
    19c4:	64655f00 	strbtvs	r5, [r5], #-3840	; 0xfffff100
				wakeupev (i, j);
    19c8:	00617461 	rsbeq	r7, r1, r1, ror #8
    19cc:	44746e49 	ldrbtmi	r6, [r4], #-3657	; 0xfffff1b7
	for_all_tasks (i) {
    19d0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
}
    19d4:	6148746c 	cmpvs	r8, ip, ror #8
aword __pi_join (aword pid, word st) {
    19d8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
	for_all_tasks (i) {
    19dc:	5f670072 	svcpl	0x00670072
    19e0:	566e6670 			; <UNDEFINED> instruction: 0x566e6670
	return 0;
    19e4:	6f746365 	svcvs	0x00746365
		if ((aword)i == pid) {
    19e8:	70007372 	andvc	r7, r0, r2, ror r3
			__pi_wait (pid, st);
    19ec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
}
    19f0:	74736544 	ldrbtvc	r6, [r3], #-1348	; 0xfffffabc
	for_all_tasks (i) {
    19f4:	73655200 	cmnvc	r5, #0, 4
    19f8:	53497465 	movtpl	r7, #37989	; 0x9465
void delay (word d, word state) {
    19fc:	43430052 	movtmi	r0, #12370	; 0x3052
	settstate (__pi_curr, state);
    1a00:	565f4746 	ldrbpl	r4, [pc], -r6, asr #14
    1a04:	5f544c4f 	svcpl	0x00544c4f
    1a08:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
    1a0c:	4300305f 	movwmi	r3, #95	; 0x5f
	update_n_wake (d, YES);
    1a10:	5f474643 	svcpl	0x00474643
    1a14:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
	__pi_curr->Timer = __pi_old + d;
    1a18:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
    1a1c:	00315f44 	eorseq	r5, r1, r4, asr #30
	inctimer (__pi_curr);
    1a20:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1a24:	5f4c425f 	svcpl	0x004c425f
    1a28:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
}
    1a2c:	43004749 	movwmi	r4, #1865	; 0x749
    1a30:	5f474643 	svcpl	0x00474643
	if (fun == NULL)
    1a34:	5f435452 	svcpl	0x00435452
		return (int) __pi_curr;
    1a38:	5346464f 	movtpl	r4, #26191	; 0x664f
    1a3c:	43005445 	movwmi	r5, #1093	; 0x445
	for_all_tasks (i)
    1a40:	5f474643 	svcpl	0x00474643
}
    1a44:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
		if (i->code == fun)
    1a48:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
	for_all_tasks (i)
    1a4c:	5f5f0046 	svcpl	0x005f0046
    1a50:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    1a54:	46434300 	strbmi	r4, [r3], -r0, lsl #6
int __pi_strlen (const char *s) {
    1a58:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
	for (i = 0; *(s+i) != '\0'; i++);
    1a5c:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
}
    1a60:	445f444e 	ldrbmi	r4, [pc], #-1102	; 1a68 <__pi_strcpy+0x2>
	for (i = 0; *(s+i) != '\0'; i++);
    1a64:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
	while ((Boolean)(*d++ = *s++));
    1a68:	5347414c 	movtpl	r4, #29004	; 0x714c
    1a6c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1a70:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
}
    1a74:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; 1968 <proceed+0xc>
	while (n-- && (*s != '\0'))
    1a78:	305f4341 	subscc	r4, pc, r1, asr #6
    1a7c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	*d = '\0';
    1a80:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
	while (n-- && (*s != '\0'))
    1a84:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; 1978 <__pi_wait+0x8>
    1a88:	315f4341 	cmpcc	pc, r1, asr #6
		*d++ = *s++;
    1a8c:	6f682f00 	svcvs	0x00682f00
    1a90:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	while (n--)
    1a94:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1a98:	442f6e65 	strtmi	r6, [pc], #-3685	; 1aa0 <__pi_memcpy+0xe>
		*dest++ = *src++;
    1a9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1aa0:	4f2f706f 	svcmi	0x002f706f
    1aa4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	while (n--)
    1aa8:	502f5445 	eorpl	r5, pc, r5, asr #8
}
    1aac:	534f4349 	movtpl	r4, #62281	; 0xf349
		*dest++ = c;
    1ab0:	6369502f 	cmnvs	r9, #47	; 0x2f
void adddevfunc (devreqfun_t rf, int loc) {
    1ab4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		syserror (EREQPAR, "addv");
    1ab8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		syserror (ERESOURCE, "addv");
    1abc:	63632f58 	cmnvs	r3, #88, 30	; 0x160
	if (ioreq [loc] != NULL)
    1ac0:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
    1ac4:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		syserror (ERESOURCE, "addv");
    1ac8:	4f4d5f47 	svcmi	0x004d5f47
	ioreq [loc] = rf;
    1acc:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
}
    1ad0:	5f464e4f 	svcpl	0x00464e4f
    1ad4:	43430031 	movtmi	r0, #12337	; 0x3031
sint io (word retry, word dev, word operation, char *buf, word len) {
    1ad8:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1adc:	5f474643 	svcpl	0x00474643
    1ae0:	5f504154 	svcpl	0x00504154
    1ae4:	5f504144 	svcpl	0x00504144
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ae8:	43430030 	movtmi	r0, #12336	; 0x3030
    1aec:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1af0:	5f474643 	svcpl	0x00474643
		syserror (ENODEVICE, "io");
    1af4:	5f504154 	svcpl	0x00504154
    1af8:	5f504144 	svcpl	0x00504144
	if (len == 0)
    1afc:	63630031 	cmnvs	r3, #49	; 0x31
	ret = (ioreq [dev]) (operation, buf, len);
    1b00:	745f6766 	ldrbvc	r6, [pc], #-1894	; 1b08 <io+0x30>
    1b04:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if (ret >= 0)
    1b08:	43435f47 	movtmi	r5, #16199	; 0x3f47
	if (ret == -1) {
    1b0c:	505f4746 	subspl	r4, pc, r6, asr #14
    1b10:	5f544f52 	svcpl	0x00544f52
		if (retry == WNONE)
    1b14:	5f373231 	svcpl	0x00373231
		iowait (dev, operation, retry);
    1b18:	43003639 	movwmi	r3, #1593	; 0x639
    1b1c:	5f474643 	svcpl	0x00474643
    1b20:	53415245 	movtpl	r5, #4677	; 0x1245
			release;
    1b24:	4f435f45 	svcmi	0x00435f45
	if (ret == -2) {
    1b28:	4300464e 	movwmi	r4, #1614	; 0x64e
		if (retry != WNONE) {
    1b2c:	5f474643 	svcpl	0x00474643
    1b30:	47464343 	strbmi	r4, [r6, -r3, asr #6]
			iowait (dev, operation, retry);
    1b34:	4f52505f 	svcmi	0x0052505f
    1b38:	31335f54 	teqcc	r3, r4, asr pc
			(ioreq [dev]) (NONE, buf, len);
    1b3c:	4300305f 	movwmi	r3, #95	; 0x5f
    1b40:	5f474643 	svcpl	0x00474643
    1b44:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
		(ioreq [dev]) (NONE, buf, len);
    1b48:	41565f45 	cmpmi	r6, r5, asr #30
    1b4c:	5f44494c 	svcpl	0x0044494c
    1b50:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
}
    1b54:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if (retry != WNONE) {
    1b58:	52465f47 	subpl	r5, r6, #284	; 0x11c
		delay (-ret - 2, retry);
    1b5c:	4f5f5145 	svcmi	0x005f5145
    1b60:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
    1b64:	43430054 	movtmi	r0, #12372	; 0x3054
    1b68:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
		release;
    1b6c:	5f474643 	svcpl	0x00474643
    1b70:	544f5250 	strbpl	r5, [pc], #-592	; 1b78 <__pi_malloc_init+0x4>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b74:	5f33365f 	svcpl	0x0033365f
    1b78:	43003233 	movwmi	r3, #563	; 0x233
    1b7c:	5f474643 	svcpl	0x00474643
    1b80:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1b84:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
		syserror (ERESOURCE, "mal1");
    1b88:	4300305f 	movwmi	r3, #95	; 0x5f
    1b8c:	5f474643 	svcpl	0x00474643
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b90:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1b94:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b98:	4300315f 	movwmi	r3, #351	; 0x15f
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b9c:	5f474643 	svcpl	0x00474643
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1ba0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1ba4:	4f52505f 	svcmi	0x0052505f
    1ba8:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
}
    1bac:	0034365f 	eorseq	r3, r4, pc, asr r6
    1bb0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1bb4:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    1bb8:	5f464c5f 	svcpl	0x00464c5f
    1bbc:	004b4c43 	subeq	r4, fp, r3, asr #24
    1bc0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
void __pi_free (aword *ch) {
    1bc4:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1bc8:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1bcc:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
		syserror (EMALLOC, "malg");
    1bd0:	534e4f49 	movtpl	r4, #61257	; 0xef49
    1bd4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
	mcfree [MA_NP] += m_size (ch);
    1bd8:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
		m_size (ch) ^= MALLOC_UMASK;
    1bdc:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    1be0:	682f006f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
	mcfree [MA_NP] += m_size (ch);
    1be4:	2f656d6f 	svccs	0x00656d6f
	QFREE;
    1be8:	70657473 	rsbvc	r7, r5, r3, ror r4
	if (mevent [MA_NP] . nwait) {
    1bec:	2f6e6568 	svccs	0x006e6568
    1bf0:	6b736544 	blvs	1cdb108 <__ccfg+0x1cbb160>
		trigger ((aword)(&(mevent [MA_NP])));
    1bf4:	2f706f74 	svccs	0x00706f74
		mevent [MA_NP] . nwait --;
    1bf8:	4f534c4f 	svcmi	0x00534c4f
}
    1bfc:	2f54454e 	svccs	0x0054454e
    1c00:	4f434950 	svcmi	0x00434950
    1c04:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1c08:	2f534f63 	svccs	0x00534f63
void kill (aword pid) {
    1c0c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		pid = (aword) __pi_curr;
    1c10:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
	j = NULL;
    1c14:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
	for_all_tasks (i) {
    1c18:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
	syserror (EREQPAR, "kpi");
    1c1c:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    1c20:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		if ((aword)i == pid) {
    1c24:	6a00632e 	bvs	1a8e4 <__exidx_end+0x14c24>
    1c28:	006b6e75 	rsbeq	r6, fp, r5, ror lr
				__PCB = i->Next;
    1c2c:	5f6e6970 	svcpl	0x006e6970
			killev (i);
    1c30:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
			ufree (i);
    1c34:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
			if (i == __pi_curr)
    1c38:	00646165 	rsbeq	r6, r4, r5, ror #2
    1c3c:	5f6e6970 	svcpl	0x006e6970
				release;
    1c40:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
				j->Next = i->Next;
    1c44:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    1c48:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1c4c:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
}
    1c50:	63616200 	cmnvs	r1, #0, 4
    1c54:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1c58:	62654400 	rsbvs	r4, r5, #0, 8
	if (size < 8)
    1c5c:	636e756f 	cmnvs	lr, #465567744	; 0x1bc00000
		_size = 2;
    1c60:	62700065 	rsbsvs	r0, r0, #101	; 0x65
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c64:	6f747475 	svcvs	0x00747475
		_size = (((aword)size) + 3) >> 2;
    1c68:	5f5f006e 	svcpl	0x005f006e
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c6c:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
		_size = (((aword)size) + 3) >> 2;
    1c70:	6f747475 	svcvs	0x00747475
		if (mevent [MA_NP] . nfail != 255)
    1c74:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
    1c78:	6f747475 	svcvs	0x00747475
			mevent [MA_NP] . nfail ++;
    1c7c:	615f736e 	cmpvs	pc, lr, ror #6
		mnfree [MA_NP] = 0;
    1c80:	6f697463 	svcvs	0x00697463
    1c84:	682f006e 	stmdavs	pc!, {r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c88:	2f656d6f 	svccs	0x00656d6f
    1c8c:	70657473 	rsbvc	r7, r5, r3, ror r4
			syserror (EMALLOC, "malc");
    1c90:	2f6e6568 	svccs	0x006e6568
    1c94:	6b736544 	blvs	1cdb1ac <__ccfg+0x1cbb204>
		if (m_size (chunk) >= _size)
    1c98:	2f706f74 	svccs	0x00706f74
    1c9c:	4f534c4f 	svcmi	0x00534c4f
		chunk = m_nextp (chunk)) {
    1ca0:	2f54454e 	svccs	0x0054454e
		m_setnextp (cc, m_nextp (chunk));
    1ca4:	4f434950 	svcmi	0x00434950
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1ca8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1cac:	2f534f63 	svccs	0x00534f63
			m_size (chunk) = _size;
    1cb0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			cc = chunk + _size + m_hdrlen;
    1cb4:	4f492f73 	svcmi	0x00492f73
    1cb8:	7475622f 	ldrbtvc	r6, [r5], #-559	; 0xfffffdd1
			m_size (cc) = waste - m_hdrlen;
    1cbc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
			QFREE;
    1cc0:	4500632e 	strmi	r6, [r0, #-814]	; 0xfffffcd2
		mevent [MA_NP] . nfail = 0;
    1cc4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
		mcfree [MA_NP] -= m_size (chunk);
    1cc8:	5f656500 	svcpl	0x00656500
    1ccc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1cd0:	6172655f 	cmnvs	r2, pc, asr r5
    1cd4:	75006573 	strvc	r6, [r0, #-1395]	; 0xfffffa8d
		m_size (chunk) |= MALLOC_UMASK;
    1cd8:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1cdc:	5f646d63 	svcpl	0x00646d63
		m_size (chunk) |= MALLOC_UMASK;
    1ce0:	65650030 	strbvs	r0, [r5, #-48]!	; 0xffffffd0
			mnfree [MA_NP] = mcfree [MA_NP];
    1ce4:	6f6c635f 	svcvs	0x006c635f
}
    1ce8:	65006573 	strvs	r6, [r0, #-1395]	; 0xfffffa8d
    1cec:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    1cf0:	00657361 	rsbeq	r7, r5, r1, ror #6
    1cf4:	775f6565 	ldrbvc	r6, [pc, -r5, ror #10]
    1cf8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1cfc:	706f6400 	rsbvc	r6, pc, r0, lsl #8
    1d00:	65006e65 	strvs	r6, [r0, #-3685]	; 0xfffff19b
aword __pi_fork (fsmcode func, aword data) {
    1d04:	706f5f65 	rsbvc	r5, pc, r5, ror #30
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1d08:	57006e65 	strpl	r6, [r0, -r5, ror #28]
    1d0c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    1d10:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
		if ((j = __PCB) == NULL)
    1d14:	6500335f 	strvs	r3, [r0, #-863]	; 0xfffffca1
	i->Next = NULL;
    1d18:	61705f65 	cmnvs	r0, r5, ror #30
	i->data = data;
    1d1c:	0063696e 	rsbeq	r6, r3, lr, ror #18
		if ((j = __PCB) == NULL)
    1d20:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
}
    1d24:	00636e79 	rsbeq	r6, r3, r9, ror lr
			for (; j->Next != NULL; j = j->Next);
    1d28:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 1b98 <__pi_malloc_init+0x24>
    1d2c:	5f656500 	svcpl	0x00656500
	return (aword) i;
    1d30:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1d34:	73647200 	cmnvc	r4, #0, 4
	if (mevent [MA_NP] . nwait != 255)
    1d38:	63630072 	cmnvs	r3, #114	; 0x72
    1d3c:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    1d40:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
		mevent [MA_NP] . nwait ++;
    1d44:	2f007461 	svccs	0x00007461
	wait ((aword)(&(mevent [MA_NP])), state);
    1d48:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1d4c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
void diag (const char *mess, ...) {
    1d50:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1d54:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1d58:	706f746b 	rsbvc	r7, pc, fp, ror #8
	diag_disable_int (a, is);
    1d5c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1d60:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1d64:	4349502f 	movtmi	r5, #36911	; 0x902f
				d = (bc == 16) ? 10000 : 1000000000;
    1d68:	502f534f 	eorpl	r5, pc, pc, asr #6
	diag_disable_int (a, is);
    1d6c:	534f6369 	movtpl	r6, #62313	; 0xf369
	while (*mess != '\0') {
    1d70:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
	dgout ('\r');
    1d74:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	dgout ('\n');
    1d78:	61726f74 	cmnvs	r2, r4, ror pc
    1d7c:	732f6567 			; <UNDEFINED> instruction: 0x732f6567
    1d80:	61726f74 	cmnvs	r2, r4, ror pc
	diag_wait (a);
    1d84:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 1bf0 <__pi_free+0x2c>
	diag_enable_int (a, is);
    1d88:	72353278 	eorsvc	r3, r5, #120, 4	; 0x80000007
    1d8c:	35333038 	ldrcc	r3, [r3, #-56]!	; 0xffffffc8
}
    1d90:	6300632e 	movwvs	r6, #814	; 0x32e
    1d94:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    1d98:	74706300 	ldrbtvc	r6, [r0], #-768	; 0xfffffd00
		if (*mess == '%') {
    1d9c:	65650072 	strbvs	r0, [r5, #-114]!	; 0xffffff8e
    1da0:	7a69735f 	bvc	1a5eb24 <__ccfg+0x1a3eb7c>
			if (*mess == 'l') {
    1da4:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    1da8:	00796461 	rsbseq	r6, r9, r1, ror #8
				mess++;
    1dac:	6e6f4445 	cdpvs	4, 6, cr4, cr15, cr5, {2}
				val = va_arg (ap, lword);
    1db0:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
				bc = 32;
    1db4:	006e776f 	rsbeq	r7, lr, pc, ror #14
				bc = 16;
    1db8:	69617777 	stmdbvs	r1!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
			switch (*mess) {
    1dbc:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    1dc0:	79625f74 	stmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1dc4:	70006574 	andvc	r6, r0, r4, ror r5
				dgout ('%');
    1dc8:	625f7475 	subsvs	r7, pc, #1962934272	; 0x75000000
    1dcc:	00657479 	rsbeq	r7, r5, r9, ror r4
				dgout (*mess);
    1dd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1d1c <__pi_fork+0x18>
    1dd4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
			switch (*mess) {
    1dd8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
					v = __pi_hex_enc_table [
    1ddc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
					i += 4;
    1de0:	6f746b73 	svcvs	0x00746b73
					(val >> (bc - i)) & 0xf];
    1de4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1de8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
					dgout (v);
    1dec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1df0:	2f534f43 	svccs	0x00534f43
				while (i < bc) {
    1df4:	4f636950 	svcmi	0x00636950
			mess++;
    1df8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
					d /= 10;
    1dfc:	2f736269 	svccs	0x00736269
				if ((val >> (bc - 1)) & 1) {
    1e00:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1e04:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
					dgout ('-');
    1e08:	6f5f7265 	svcvs	0x005f7265
    1e0c:	632e7475 			; <UNDEFINED> instruction: 0x632e7475
						val |= 0xffff0000;
    1e10:	72657300 	rsbvc	r7, r5, #0, 6
    1e14:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    1e18:	6f682f00 	svcvs	0x00682f00
				d = (bc == 16) ? 10000 : 1000000000;
    1e1c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    1e20:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1e24:	442f6e65 	strtmi	r6, [pc], #-3685	; 1e2c <diag+0xdc>
					v = (word) (val / d);
    1e28:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
					if (v || d == 1) break;
    1e2c:	4f2f706f 	svcmi	0x002f706f
    1e30:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
					d /= 10;
    1e34:	502f5445 	eorpl	r5, pc, r5, asr #8
				d = (bc == 16) ? 10000 : 1000000000;
    1e38:	534f4349 	movtpl	r4, #62281	; 0xf349
					dgout (v + '0');
    1e3c:	6369502f 	cmnvs	r9, #47	; 0x2f
    1e40:	502f534f 	eorpl	r5, pc, pc, asr #6
    1e44:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
					d /= 10;
    1e48:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
					val = val - (v * d);
    1e4c:	2f6c6169 	svccs	0x006c6169
					if (d == 0) break;
    1e50:	5f726573 	svcpl	0x00726573
					v = (word) (val / d);
    1e54:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    1e58:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
				if (bc == 16)
    1e5c:	696c706e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, ip, sp, lr}^
				d = (bc == 16) ? 10000 : 1000000000;
    1e60:	7300656e 	movwvc	r6, #1390	; 0x56e
					val &= 0xffff;
    1e64:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
					dgout (*s);
    1e68:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
					s++;
    1e6c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; f02 <tci_update_delay_ticks+0x1e>
				while (*s != '\0') {
    1e70:	2f006674 	svccs	0x00006674
    1e74:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			dgout (*mess++);
    1e78:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1e7c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1e80:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1e84:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1e88:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e8c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1e90:	4349502f 	movtmi	r5, #36911	; 0x902f
    1e94:	502f534f 	eorpl	r5, pc, pc, asr #6
    1e98:	534f6369 	movtpl	r6, #62313	; 0xf369
	^ entropy
    1e9c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
}
    1ea0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1ea4:	61697265 	cmnvs	r9, r5, ror #4
    1ea8:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    1eac:	756f5f72 	strbvc	r5, [pc, #-3954]!	; f42 <__pi_uart_setrate+0xe>
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1eb0:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
	word cs = size + hblenb;
    1eb4:	6f682f00 	svcvs	0x00682f00
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1eb8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    1ebc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	p -> length = size;
    1ec0:	442f6e65 	strtmi	r6, [pc], #-3685	; 1ec8 <deq+0x2>
}
    1ec4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	if (p->attributes.b.queued) {
    1ec8:	4f2f706f 	svcmi	0x002f706f
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1ecc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1ed0:	502f5445 	eorpl	r5, pc, r5, asr #8
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1ed4:	534f4349 	movtpl	r4, #62281	; 0xf349
		p->attributes.b.queued = 0;
    1ed8:	6369502f 	cmnvs	r9, #47	; 0x2f
    1edc:	502f534f 	eorpl	r5, pc, pc, asr #6
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ee0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
	deq (p);	// Remove from queue
    1ee4:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
}
    1ee8:	2f6c6169 	svccs	0x006c6169
	tfree ((address)p);
    1eec:	5f726573 	svcpl	0x00726573
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ef0:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    1ef4:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
    1ef8:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1efc:	73690066 	cmnvc	r9, #102	; 0x66
    1f00:	5f657573 	svcpl	0x00657573
	if (q_empty (q))
    1f04:	00646d63 	rsbeq	r6, r4, r3, ror #26
    1f08:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
		trigger (q);
    1f0c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
	if (p->attributes.b.urgent) {
    1f10:	63006e6f 	movwvs	r6, #3695	; 0xe6f
		p->u.bqueue.next = q->next;
    1f14:	616d6d6f 	cmnvs	sp, pc, ror #26
		p->u.bqueue.prev = q;
    1f18:	6f4e646e 	svcvs	0x004e646e
		q->next->prev = (qitem_t*) p;
    1f1c:	70416200 	subvc	r6, r1, r0, lsl #4
	p->attributes.b.queued = 1;
    1f20:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1f24:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
}
    1f28:	72007375 	andvc	r7, r0, #-738197503	; 0xd4000001
		p->u.bqueue.prev = q->prev;
    1f2c:	6e6f5f66 	cdpvs	15, 6, cr5, cr15, cr6, {3}
		q->prev->next = (qitem_t*) p;
    1f30:	54667200 	strbtpl	r7, [r6], #-512	; 0xfffffe00
		q->prev = (qitem_t*) p;
    1f34:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1f38:	72615662 	rsbvc	r5, r1, #102760448	; 0x6200000
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f3c:	006e654c 	rsbeq	r6, lr, ip, asr #10
	deq (p);	// Soft dequeue, timer and hook left intact
    1f40:	746b5070 	strbtvc	r5, [fp], #-112	; 0xffffff90
	switch (dv) {
    1f44:	6e656300 	cdpvs	3, 6, cr6, cr5, cr0, {0}
    1f48:	46726574 			; <UNDEFINED> instruction: 0x46726574
    1f4c:	00716572 	rsbseq	r6, r1, r2, ror r5
    1f50:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
			p->attributes.b.urgent = 1;
    1f54:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1f58:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
			verify_ses (p, "dispose ses");
    1f5c:	506b7366 	rsbpl	r7, fp, r6, ror #6
    1f60:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    1f64:	69687700 	stmdbvs	r8!, {r8, r9, sl, ip, sp, lr}^
    1f68:	4d6e6574 	cfstr64mi	mvdx6, [lr, #-464]!	; 0xfffffe30
    1f6c:	0065646f 	rsbeq	r6, r5, pc, ror #8
			verify_phy (p, "dispose phy");
    1f70:	5f636672 	svcpl	0x00636672
    1f74:	5f444d43 	svcpl	0x00444d43
}
    1f78:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
			enq (oqueues [p->attributes.b.phys], p);
    1f7c:	5f53435f 	svcpl	0x0053435f
			p->attributes.b.urgent = 1;
    1f80:	61700073 	cmnvs	r0, r3, ror r0
    1f84:	72547473 	subsvc	r7, r4, #1929379840	; 0x73000000
			verify_phy (p, "dispose phy");
    1f88:	72006769 	andvc	r6, r0, #27525120	; 0x1a40000
    1f8c:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
    1f90:	00745f6d 	rsbseq	r5, r4, sp, ror #30
    1f94:	66756272 			; <UNDEFINED> instruction: 0x66756272
    1f98:	44006c66 	strmi	r6, [r0], #-3174	; 0xfffff39a
    1f9c:	4f4c5f52 	svcmi	0x004c5f52
			enq (oqueues [p->attributes.b.phys], p);
    1fa0:	5f5f504f 	svcpl	0x005f504f
    1fa4:	754f7000 	strbvc	r7, [pc, #-0]	; 1fac <dispose+0x70>
}
    1fa8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
			rlp (p);
    1fac:	65526200 	ldrbvs	r6, [r2, #-512]	; 0xfffffe00
}
    1fb0:	74616570 	strbtvc	r6, [r1], #-1392	; 0xfffffa90
    1fb4:	6e006b4f 	vmlsvs.f64	d6, d0, d15
    1fb8:	67497852 	smlsldvs	r7, r9, r2, r8
    1fbc:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
    1fc0:	65660064 	strbvs	r0, [r6, #-100]!	; 0xffffff9c
    1fc4:	646f4d63 	strbtvs	r4, [pc], #-3427	; 1fcc <tcv_endp+0x4>
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1fc8:	526e0065 	rsbpl	r0, lr, #101	; 0x65
	if (b->attributes.b.outgoing) {
    1fcc:	6b6f4e78 	blvs	1bd59b4 <__ccfg+0x1bb5a0c>
	b = header (p);
    1fd0:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
	if (b->attributes.b.outgoing) {
    1fd4:	616c6564 	cmnvs	ip, r4, ror #10
		verify_ses (b, "tcv02");
    1fd8:	72700079 	rsbsvc	r0, r0, #121	; 0x79
    1fdc:	4d6d6165 	stfmie	f6, [sp, #-404]!	; 0xfffffe6c
    1fe0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1fe4:	72754370 	rsbsvc	r4, r5, #112, 6	; 0xc0000001
    1fe8:	746e4572 	strbtvc	r4, [lr], #-1394	; 0xfffffa8e
		verify_plg (b, tcv_out, "tcv03");
    1fec:	74007972 	strvc	r7, [r0], #-2418	; 0xfffff68e
    1ff0:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    1ff4:	706d6174 	rsbvc	r6, sp, r4, ror r1
    1ff8:	71726900 	cmnvc	r2, r0, lsl #18
    1ffc:	76746e49 	ldrbtvc	r6, [r4], -r9, asr #28
    2000:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
    2004:	6d635f74 	stclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    2008:	6f660064 	svcvs	0x00660064
    200c:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
		dispose (b, plugins [b->attributes.b.plugin] ->
    2010:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
}
    2014:	61747300 	cmnvs	r4, r0, lsl #6
		dispose (b, plugins [b->attributes.b.plugin] ->
    2018:	69547472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, ip, sp, lr}^
		rlp (b);
    201c:	6200656d 	andvs	r6, r0, #457179136	; 0x1b400000
}
    2020:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
		rlp (b);
    2024:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2028:	7473656d 	ldrbtvc	r6, [r3], #-1389	; 0xfffffa93
    202c:	00706d61 	rsbseq	r6, r0, r1, ror #26
    2030:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
    2034:	746e4574 	strbtvc	r4, [lr], #-1396	; 0xfffffa8c
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2038:	52007972 	andpl	r7, r0, #1867776	; 0x1c8000
    203c:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    2040:	6f725064 	svcvs	0x00725064
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2044:	64615270 	strbtvs	r5, [r1], #-624	; 0xfffffd90
	va_start (ap, plid);
    2048:	69446f69 	stmdbvs	r4, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    204c:	74655376 	strbtvc	r5, [r5], #-886	; 0xfffffc8a
    2050:	71007075 	tstvc	r0, r5, ror r0
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    2054:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    2058:	6b700074 	blvs	1c02230 <__ccfg+0x1be2288>
    205c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2060:	68700066 	ldmdavs	r0!, {r1, r2, r5, r6}^
			syserror (ENODEVICE, "tcv04");
    2064:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
		syserror (EMALLOC, "tcv05");
    2068:	35333163 	ldrcc	r3, [r3, #-355]!	; 0xfffffe9d
	attp.b.outgoing = 1;
    206c:	63630030 	cmnvs	r3, #48	; 0x30
    2070:	30353331 	eorscc	r3, r5, r1, lsr r3
    2074:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
    2078:	00726576 	rsbseq	r6, r2, r6, ror r5
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    207c:	5f636672 	svcpl	0x00636672
		if (descriptors [fd] == NULL)
    2080:	5f444d43 	svcpl	0x00444d43
    2084:	735f5346 	cmpvc	pc, #402653185	; 0x18000001
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2088:	63667200 	cmnvs	r6, #0, 4
		return ERROR;
    208c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
}
    2090:	5f53465f 	svcpl	0x0053465f
    2094:	78740074 	ldmdavc	r4!, {r2, r4, r5, r6}^
    2098:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
	s->attpattern.b.session = fd;
    209c:	78720072 	ldmdavc	r2!, {r1, r4, r5, r6}^
    20a0:	61007742 	tstvs	r0, r2, asr #14
	descriptors [fd] = s;
    20a4:	796c7070 	stmdbvc	ip!, {r4, r5, r6, ip, sp, lr}^
	q_init (&(s->rqueue));
    20a8:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    20ac:	61506b73 	cmpvs	r0, r3, ror fp
    20b0:	00686374 	rsbeq	r6, r8, r4, ror r3
    20b4:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
    20b8:	006c656e 	rsbeq	r6, ip, lr, ror #10
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    20bc:	746e7973 	strbtvc	r7, [lr], #-2419	; 0xfffff68d
    20c0:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    20c4:	45620066 	strbmi	r0, [r2, #-102]!	; 0xffffff9a
	descriptors [fd] = s;
    20c8:	7352616e 	cmpvc	r2, #-2147483621	; 0x8000001b
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    20cc:	62006973 	andvs	r6, r0, #1884160	; 0x1cc000
    20d0:	6f747541 	svcvs	0x00747541
	if (s == NULL)
    20d4:	73756c46 	cmnvc	r5, #17920	; 0x4600
		syserror (EMALLOC, "tcv05");
    20d8:	63724368 	cmnvs	r2, #104, 6	; 0xa0000001
    20dc:	00727245 	rsbseq	r7, r2, r5, asr #4
    20e0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    20e4:	66526769 	ldrbvs	r6, [r2], -r9, ror #14
    20e8:	6e6f7246 	cdpvs	2, 6, cr7, cr15, cr6, {2}
    20ec:	646e6574 	strbtvs	r6, [lr], #-1396	; 0xfffffa8c
    20f0:	78546200 	ldmdavc	r4, {r9, sp, lr}^
    20f4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20f8:	616e6100 	cmnvs	lr, r0, lsl #2
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20fc:	43676f6c 	cmnmi	r7, #108, 30	; 0x1b0
    2100:	6f4d6766 	svcvs	0x004d6766
    2104:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
	plugins [ord] = pl;
    2108:	43616e45 	cmnmi	r1, #1104	; 0x450
	return 0;
    210c:	6e00646d 	cdpvs	4, 0, cr6, cr0, cr13, {3}
		return ERROR;
    2110:	6f436d75 	svcvs	0x00436d75
}
    2114:	6e497272 	mcrvs	2, 2, r7, cr9, cr2, {3}
    2118:	49700076 	ldmdbmi	r0!, {r1, r2, r4, r5, r6}^
	verify_fds (fd, "tcv10");
    211c:	61507172 	cmpvs	r0, r2, ror r1
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    2120:	00686374 	rsbeq	r6, r8, r4, ror r3
	verify_fds (fd, "tcv10");
    2124:	74615070 	strbtvc	r5, [r1], #-112	; 0xffffff90
    2128:	65566863 	ldrbvs	r6, [r6, #-2147]	; 0xfffff79d
    212c:	46520063 	ldrbmi	r0, [r2], -r3, rrx
	verify_plg (b, tcv_frm, "tcv11");
    2130:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
	b = q_first (rq);
    2134:	44746e49 	ldrbtmi	r6, [r4], #-3657	; 0xfffff1b7
	if (q_end (b, rq)) {
    2138:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
		if (state != WNONE) {
    213c:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
    2140:	6b507861 	blvs	14202cc <__ccfg+0x1400324>
			when (rq, state);
    2144:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
			release;
    2148:	726f6300 	rsbvc	r6, pc, #0, 6
	deq (b);	// Dequeue the packet ...
    214c:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    2150:	00676966 	rsbeq	r6, r7, r6, ror #18
	p = ((address)(b + 1));
    2154:	30746172 	rsbscc	r6, r4, r2, ror r1
	verify_plg (b, tcv_frm, "tcv11");
    2158:	61696200 	cmnvs	r9, r0, lsl #4
    215c:	646f4d73 	strbtvs	r4, [pc], #-3443	; 2164 <tcv_rnp+0x48>
    2160:	46520065 	ldrbmi	r0, [r2], -r5, rrx
    2164:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    2168:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
    216c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2170:	6200656c 	andvs	r6, r0, #108, 10	; 0x1b000000
    2174:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2178:	43656475 	cmnmi	r5, #1962934272	; 0x75000000
    217c:	63006372 	movwvs	r6, #882	; 0x372
	b->u.pointers.tail =
    2180:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
}
    2184:	41664967 	cmnmi	r6, r7, ror #18
		return NULL;
    2188:	72006364 	andvc	r6, r0, #100, 6	; 0x90000001
    218c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2190:	505f444d 	subspl	r4, pc, sp, asr #8
    2194:	5f504f52 	svcpl	0x00504f52
    2198:	735f5852 	cmpvc	pc, #5373952	; 0x520000
	verify_fds (fd, "tcv16");
    219c:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
								Boolean urg) {
    21a0:	67697254 			; <UNDEFINED> instruction: 0x67697254
    21a4:	00726567 	rsbseq	r6, r2, r7, ror #10
	verify_fds (fd, "tcv16");
    21a8:	5f636672 	svcpl	0x00636672
    21ac:	5f444d43 	svcpl	0x00444d43
    21b0:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
	verify_pld (s, tcv_frm, "tcv17");
    21b4:	5f53435f 	svcpl	0x0053435f
    21b8:	72660074 	rsbvc	r0, r6, #116	; 0x74
    21bc:	45746e6f 	ldrbmi	r6, [r4, #-3695]!	; 0xfffff191
    21c0:	6f4d646e 	svcvs	0x004d646e
    21c4:	74006564 	strvc	r6, [r0], #-1380	; 0xfffffa9c
    21c8:	67676972 			; <UNDEFINED> instruction: 0x67676972
    21cc:	6f4e7265 	svcvs	0x004e7265
    21d0:	75517000 	ldrbvc	r7, [r1, #-0]
	ptrs.head = (word) fd;
    21d4:	00657565 	rsbeq	r7, r5, r5, ror #10
	ptrs.tail = (word) urg;
    21d8:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21dc:	00657079 	rsbeq	r7, r5, r9, ror r0
    21e0:	5f646d63 	svcpl	0x00646d63
		if (state != WNONE) {
    21e4:	72007363 	andvc	r7, r0, #-1946157055	; 0x8c000001
    21e8:	54697373 	strbtpl	r7, [r9], #-883	; 0xfffffc8d
}
    21ec:	6e007268 	cdpvs	2, 0, cr7, cr0, cr8, {3}
			when (eid, state);
    21f0:	6f436d75 	svcvs	0x00436d75
    21f4:	75427272 	strbvc	r7, [r2, #-626]	; 0xfffffd8e
			release;
    21f8:	52007973 	andpl	r7, r0, #1884160	; 0x1cc000
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21fc:	006c6156 	rsbeq	r6, ip, r6, asr r1
    2200:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2204:	6f697469 	svcvs	0x00697469
    2208:	4962006e 	stmdbmi	r2!, {r1, r2, r3, r5, r6}^
    220c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2210:	64486564 	strbvs	r6, [r8], #-1380	; 0xfffffa9c
    2214:	616c0072 	smcvs	49154	; 0xc002
    2218:	73527473 	cmpvc	r2, #1929379840	; 0x73000000
		if (state != WNONE) {
    221c:	6d006973 	vstrvs.16	s12, [r0, #-230]	; 0xffffff1a	; <UNPREDICTABLE>
    2220:	7954646f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
			tmwait (state);
    2224:	70006570 	andvc	r6, r0, r0, ror r5
    2228:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
	b->attributes = s->attpattern;
    222c:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
		b->attributes.b.urgent = 1;
    2230:	526e0079 	rsbpl	r0, lr, #121	; 0x79
    2234:	66754278 			; <UNDEFINED> instruction: 0x66754278
	b->u.pointers.head = ptrs.head;
    2238:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
	b->u.pointers.tail = length;
    223c:	5f787200 	svcpl	0x00787200
	return (address) (b + 1);
    2240:	75006361 	strvc	r6, [r0, #-865]	; 0xfffffc9f
    2244:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    2248:	006b7361 	rsbeq	r7, fp, r1, ror #6
    224c:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
    2250:	69725464 	ldmdbvs	r2!, {r2, r5, r6, sl, ip, lr}^
    2254:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2258:	69426200 	stmdbvs	r2, {r9, sp, lr}^
    225c:	76655274 			; <UNDEFINED> instruction: 0x76655274
    2260:	61737265 	cmnvs	r3, r5, ror #4
	verify_fph (phy, "tcv23");
    2264:	5f5f006c 	svcpl	0x005f006c
    2268:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    226c:	73003079 	movwvc	r3, #121	; 0x79
    2270:	6f626d79 	svcvs	0x00626d79
}
    2274:	7461526c 	strbtvc	r5, [r1], #-620	; 0xfffffd94
	return (physical [phy]) (opt, arg);
    2278:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    227c:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
    2280:	66667562 	strbtvs	r7, [r6], -r2, ror #10
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2284:	4e700073 	mrcmi	0, 3, r0, cr0, cr3, {3}
	if (opt < 0) {
    2288:	4f747865 	svcmi	0x00747865
		if (fd < 0)
    228c:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
		if (opt == PHYSOPT_PLUGINFO) {
    2290:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
			if (fd >= TCV_MAX_PLUGS)
    2294:	41620071 	smcmi	8193	; 0x2001
			if ((p = plugins [fd]) == NULL)
    2298:	466f7475 			; <UNDEFINED> instruction: 0x466f7475
    229c:	6873756c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
}
    22a0:	6f6e6749 	svcvs	0x006e6749
		if (fd >= TCV_MAX_PHYS)
    22a4:	00646572 	rsbeq	r6, r4, r2, ror r5
		return physinfo [fd];
    22a8:	5f636672 	svcpl	0x00636672
    22ac:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
	verify_fds (fd, "tcv22");
    22b0:	5f704f6f 	svcpl	0x00704f6f
    22b4:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    22b8:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
    22bc:	67676972 			; <UNDEFINED> instruction: 0x67676972
    22c0:	70007265 	andvc	r7, r0, r5, ror #4
}
    22c4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    22c8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    22cc:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
			return 0;
    22d0:	006b7366 	rsbeq	r7, fp, r6, ror #6
    22d4:	6f5f6672 	svcvs	0x005f6672
    22d8:	2f006666 	svccs	0x00006666
    22dc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    22e0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22e4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    22e8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	if (dsp != TCV_DSP_PASS) {
    22ec:	706f746b 	rsbvc	r7, pc, fp, ror #8
		if (ses == NONE)
    22f0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			syserror (EREQPAR, "tcv26");
    22f4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		verify_fds (ses, "tcv27");
    22f8:	4349502f 	movtmi	r5, #36911	; 0x902f
    22fc:	502f534f 	eorpl	r5, pc, pc, asr #6
    2300:	534f6369 	movtpl	r6, #62313	; 0xf369
    2304:	3143432f 	cmpcc	r3, pc, lsr #6
    2308:	2f585833 	svccs	0x00585833
		if ((p = apb (size)) != NULL) {
    230c:	72706672 	rsbsvc	r6, r0, #119537664	; 0x7200000
    2310:	632e706f 			; <UNDEFINED> instruction: 0x632e706f
		return NULL;
    2314:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
			p->attributes = descriptors [ses] -> attpattern;
    2318:	726f4361 	rsbvc	r4, pc, #-2080374783	; 0x84000001
			dispose (p, dsp);
    231c:	46620072 			; <UNDEFINED> instruction: 0x46620072
			p->attributes = descriptors [ses] -> attpattern;
    2320:	66664f73 	uqsub16vs	r4, r6, r3
			p->attributes.b.outgoing = 0;
    2324:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
			dispose (p, dsp);
    2328:	5f465200 	svcpl	0x00465200
			return (address)(p + 1);
    232c:	46646d63 	strbtmi	r6, [r4], -r3, ror #26
    2330:	72700073 	rsbsvc	r0, r0, #115	; 0x73
	if ((p = apb (size)) != NULL)
    2334:	436d6165 	cmnmi	sp, #1073741849	; 0x40000019
    2338:	00666e6f 	rsbeq	r6, r6, pc, ror #28
		return (address)(p + 1);
    233c:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    2340:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
    2344:	74706f00 	ldrbtvc	r6, [r0], #-3840	; 0xfffff100
    2348:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    234c:	63746170 	cmnvs	r4, #112, 2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2350:	6e654768 	cdpvs	7, 6, cr4, cr5, cr8, {3}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2354:	526b7366 	rsbpl	r7, fp, #-1744830463	; 0x98000001
    2358:	63006566 	movwvs	r6, #1382	; 0x566
		syserror (EREQPAR, "tcv28");
    235c:	646e4573 	strbtvs	r4, [lr], #-1395	; 0xfffffa8d
		syserror (EMALLOC, "tcv29");
    2360:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	physical [phy] = ps;
    2364:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
	physinfo [phy] = info;
    2368:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    236c:	6300745f 	movwvs	r7, #1119	; 0x45f
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2370:	5072726f 	rsbspl	r7, r2, pc, ror #4
    2374:	6f697265 	svcvs	0x00697265
    2378:	6c700064 	ldclvs	0, cr0, [r0], #-400	; 0xfffffe70
		syserror (EMALLOC, "tcv29");
    237c:	74726775 	ldrbtvc	r6, [r2], #-1909	; 0xfffff88b
    2380:	43465200 	movtmi	r5, #25088	; 0x6200
	q_init (q);
    2384:	49657043 	stmdbmi	r5!, {r0, r1, r6, ip, sp, lr}^
}
    2388:	6c43746e 	cfstrdvs	mvd7, [r3], {110}	; 0x6e
    238c:	00726165 	rsbseq	r6, r2, r5, ror #2
    2390:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    2394:	72006863 	andvc	r6, r0, #6488064	; 0x630000
    2398:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    239c:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
	verify_fph (phy, "tcv30");
    23a0:	6f656d69 	svcvs	0x00656d69
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    23a4:	65527475 	ldrbvs	r7, [r2, #-1141]	; 0xfffffb8b
    23a8:	72660073 	rsbvc	r0, r6, #115	; 0x73
	verify_fph (phy, "tcv30");
    23ac:	46746361 	ldrbtmi	r6, [r4], -r1, ror #6
    23b0:	00716572 	rsbseq	r6, r1, r2, ror r5
    23b4:	53657270 	cmnpl	r5, #112, 4
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23b8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    23bc:	77536e00 	ldrbvc	r6, [r3, -r0, lsl #28]
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23c0:	73746942 	cmnvc	r4, #1081344	; 0x108000
    23c4:	73756200 	cmnvc	r5, #0, 4
		if (plugins [plg] == NULL)
    23c8:	00704f79 	rsbseq	r4, r0, r9, ror pc
    23cc:	69446f6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    23d0:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
}
    23d4:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    23d8:	64697461 	strbtvs	r7, [r9], #-1121	; 0xfffffb9f
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23dc:	5f667200 	svcpl	0x00667200
    23e0:	63746170 	cmnvs	r4, #112, 2
    23e4:	70635f68 	rsbvc	r5, r3, r8, ror #30
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23e8:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    23ec:	6b73666e 	blvs	1cdbdac <__ccfg+0x1cbbe04>
    23f0:	43787200 	cmnmi	r8, #0, 4
    23f4:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    23f8:	466f4e62 	strbtmi	r4, [pc], -r2, ror #28
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23fc:	776f5073 			; <UNDEFINED> instruction: 0x776f5073
	len -= (ap.head + ap.tail);
    2400:	70557265 	subsvc	r7, r5, r5, ror #4
    2404:	45524f00 	ldrbmi	r4, [r2, #-3840]	; 0xfffff100
    2408:	00746e76 	rsbseq	r6, r4, r6, ror lr
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    240c:	4f734662 	svcmi	0x00734662
    2410:	75426666 	strbvc	r6, [r2, #-1638]	; 0xfffff99a
    2414:	76007973 			; <UNDEFINED> instruction: 0x76007973
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    2418:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    241c:	74787400 	ldrbtvc	r7, [r8], #-1024	; 0xfffffc00
    2420:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
	return 1;
    2424:	734d6200 	movtvc	r6, #53760	; 0xd200
    2428:	72694662 	rsbvc	r4, r9, #102760448	; 0x6200000
    242c:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
    2430:	65645f78 	strbvs	r5, [r4, #-3960]!	; 0xfffff088
    2434:	5f787200 	svcpl	0x00787200
	verify_fph (phy, "tcv32");
    2438:	5f746e69 	svcpl	0x00746e69
    243c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    2440:	6100656c 	tstvs	r0, ip, ror #10
    2444:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    2448:	00307373 	eorseq	r7, r0, r3, ror r3
    244c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
	oq = oqueues [phy];
    2450:	31737365 	cmncc	r3, r5, ror #6
	b = q_first (oq);
    2454:	63667200 	cmnvs	r6, #0, 4
	if (q_end (b, oq)) {
    2458:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	*len = b->length;
    245c:	4f52505f 	svcmi	0x0052505f
	deq (b);	// Dequeue the packet ...
    2460:	41525f50 	cmpmi	r2, r0, asr pc
}
    2464:	5f4f4944 	svcpl	0x004f4944
		return NULL;
    2468:	5f564944 	svcpl	0x00564944
    246c:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
    2470:	00735f50 	rsbseq	r5, r3, r0, asr pc
    2474:	5f636672 	svcpl	0x00636672
	verify_fph (phy, "tcv33");
    2478:	5f444d43 	svcpl	0x00444d43
    247c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    2480:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2484:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 248c <tcvphy_top+0x14>
    2488:	535f5649 	cmppl	pc, #76546048	; 0x4900000
    248c:	50555445 	subspl	r5, r5, r5, asr #8
	oq = oqueues [phy];
    2490:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
	b = q_first (oq);
    2494:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
		return NULL;
    2498:	505f444d 	subspl	r4, pc, sp, asr #8
	return (address)(b + 1);
    249c:	5f504f52 	svcpl	0x00504f52
}
    24a0:	745f5852 	ldrbvc	r5, [pc], #-2130	; 24a8 <tcvphy_top+0x30>
    24a4:	74617000 	strbtvc	r7, [r1], #-0
    24a8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    24ac:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
	verify_plg (b, tcv_xmt, "tcv34");
    24b0:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
	hblock_t *b = header (pkt);
    24b4:	00646570 	rsbeq	r6, r4, r0, ror r5
	verify_plg (b, tcv_xmt, "tcv34");
    24b8:	526d756e 	rsbpl	r7, sp, #461373440	; 0x1b800000
    24bc:	49697373 	stmdbmi	r9!, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    24c0:	00656c64 	rsbeq	r6, r5, r4, ror #24
    24c4:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    24c8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
    24cc:	73787200 	cmnvc	r8, #0, 4
    24d0:	00746174 	rsbseq	r6, r4, r4, ror r1
	dispose (b, plugins [b->attributes.b.plugin] ->
    24d4:	67655270 			; <UNDEFINED> instruction: 0x67655270
}
    24d8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
	dispose (b, plugins [b->attributes.b.plugin] ->
    24dc:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    24e0:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
    24e4:	745f726d 	ldrbvc	r7, [pc], #-621	; 24ec <FaultISR>
}
    24e8:	70416200 	subvc	r6, r1, r0, lsl #4
    while(1)
    24ec:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
{
    24f0:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    SetupTrimDevice();
    24f4:	63667200 	cmnvs	r6, #0, 4
    pui32Src = &_etext;
    24f8:	6f72705f 	svcvs	0x0072705f
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24fc:	4f785270 	svcmi	0x00785270
    __asm("    ldr     r0, =_bss\n"
    2500:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
    2504:	00735f74 	rsbseq	r5, r3, r4, ror pc
    2508:	5f636672 	svcpl	0x00636672
    250c:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    2510:	754f7852 	strbvc	r7, [pc, #-2130]	; 1cc6 <__pi_malloc+0x6a>
   main();
    2514:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    FaultISR();
    2518:	5200745f 	andpl	r7, r0, #1593835520	; 0x5f000000
        *pui32Dest++ = *pui32Src++;
    251c:	6c434346 	mcrrvs	3, 4, r4, r3, cr6
    2520:	446b636f 	strbtmi	r6, [fp], #-879	; 0xfffffc91
    2524:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    2528:	6300656c 	movwvs	r6, #1388	; 0x56c
    252c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2530:	6e795367 	cdpvs	3, 7, cr5, cr9, cr7, {3}
    2534:	74006874 	strvc	r6, [r0], #-2164	; 0xfffff78c
    2538:	756f6378 	strbvc	r6, [pc, #-888]!	; 21c8 <tcv_wnps+0x2c>
static byte get_byte () {
    253c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2540:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    2544:	72007a53 	andvc	r7, r0, #339968	; 0x53000
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2548:	725f6366 	subsvc	r6, pc, #-1744830463	; 0x98000001
    254c:	6f696461 	svcvs	0x00696461
		if (ee_inp)
    2550:	735f704f 	cmpvc	pc, #79	; 0x4f
			b |= 1;
    2554:	65526200 	ldrbvs	r6, [r2, #-512]	; 0xfffffe00
    2558:	74616570 	strbtvc	r6, [r1], #-1392	; 0xfffffa90
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    255c:	006b6f4e 	rsbeq	r6, fp, lr, asr #30
	for (b = 0, i = 0; i < 8; i++) {
    2560:	746c6966 	strbtvc	r6, [ip], #-2406	; 0xfffff69a
}
    2564:	704f7265 	subvc	r7, pc, r5, ror #4
    2568:	63667200 	cmnvs	r6, #0, 4
    256c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
static void put_byte (byte b) {
    2570:	746e4561 	strbtvc	r4, [lr], #-1377	; 0xfffffa9f
    2574:	65477972 	strbvs	r7, [r7, #-2418]	; 0xfffff68e
    2578:	6172656e 	cmnvs	r2, lr, ror #10
    257c:	00735f6c 	rsbseq	r5, r3, ip, ror #30
		if (b & 0x80)
    2580:	5f636672 	svcpl	0x00636672
    2584:	61746164 	cmnvs	r4, r4, ror #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2588:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
	for (i = 0; i < 8; i++) {
    258c:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
		b <<= 1;
    2590:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
	for (i = 0; i < 8; i++) {
    2594:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
}
    2598:	61705f66 	cmnvs	r0, r6, ror #30
    259c:	5f686374 	svcpl	0x00686374
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    25a0:	5f656672 	svcpl	0x00656672
    25a4:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
	put_byte (cmd);
    25a8:	6e006b73 	vmovvs.16	d0[1], r6
    25ac:	6b4f7852 	blvs	13e06fc <__ccfg+0x13c0754>
}
    25b0:	65525200 	ldrbvs	r5, [r2, #-512]	; 0xfffffe00
    25b4:	5f5f0074 	svcpl	0x005f0074
static void wwait (word st, word del) {
    25b8:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    25bc:	5f003179 	svcpl	0x00003179
    25c0:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
	while (dopen && (rdsr () & 1)) {
    25c4:	0032796d 	eorseq	r7, r2, sp, ror #18
    25c8:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    25cc:	33796d6d 	cmncc	r9, #6976	; 0x1b40
    25d0:	74496e00 	strbvc	r6, [r9], #-3584	; 0xfffff200
	put_byte (CMD_RDSR);
    25d4:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
	r = get_byte ();
    25d8:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    25dc:	746b7000 	strbtvc	r7, [fp], #-0
	while (dopen && (rdsr () & 1)) {
    25e0:	006e654c 	rsbeq	r6, lr, ip, asr #10
}
    25e4:	656c7572 	strbvs	r7, [ip, #-1394]!	; 0xfffffa8e
		if (st == WNONE)
    25e8:	5f465200 	svcpl	0x00465200
    25ec:	50646d63 	rsbpl	r6, r4, r3, ror #26
			mdelay (1);
    25f0:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    25f4:	46520078 			; <UNDEFINED> instruction: 0x46520078
			delay (del, st);
    25f8:	45504343 	ldrbmi	r4, [r0, #-835]	; 0xfffffcbd
    25fc:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
			release;
    2600:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    2604:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2608:	70767264 	rsbsvc	r7, r6, r4, ror #4
static void ready () {
    260c:	00736372 	rsbseq	r6, r3, r2, ror r3
	if (dopen) {
    2610:	6572506e 	ldrbvs	r5, [r2, #-110]!	; 0xffffff92
		wwait (WNONE, 1);
    2614:	79426d61 	stmdbvc	r2, {r0, r5, r6, r8, sl, fp, sp, lr}^
    2618:	00736574 	rsbseq	r6, r3, r4, ror r5
    261c:	666b6362 	strbtvs	r6, [fp], -r2, ror #6
	dstat = 0;
    2620:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
}
    2624:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
    2628:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    262c:	505f444d 	subspl	r4, pc, sp, asr #8
	udelay (1);
    2630:	5f504f52 	svcpl	0x00504f52
    2634:	745f5854 	ldrbvc	r5, [pc], #-2132	; 263c <ready+0x30>
	udelay (1);
    2638:	63667200 	cmnvs	r6, #0, 4
		dopen = DOPEN_TEMP;
    263c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2640:	4f52505f 	svcmi	0x0052505f
    2644:	58545f50 	ldmdapl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    2648:	6900735f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}
static void cclose () {
    264c:	4f656c64 	svcmi	0x00656c64
	if (dopen == DOPEN_TEMP) {
    2650:	72660070 	rsbvc	r0, r6, #112	; 0x70
    2654:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
		wwait (WNONE, 1);
    2658:	0079636e 	rsbseq	r6, r9, lr, ror #6
    265c:	74615070 	strbtvc	r5, [r1], #-112	; 0xffffff90
	cmd_0 (CMD_DP);
    2660:	61546863 	cmpvs	r4, r3, ror #16
    2664:	73630062 	cmnvc	r3, #98	; 0x62
		dopen = 0;
    2668:	6f437346 	svcvs	0x00437346
}
    266c:	6300666e 	movwvs	r6, #1646	; 0x66e
word ee_open () {
    2670:	735f646d 	cmpvc	pc, #1828716544	; 0x6d000000
	ready ();
    2674:	62007472 	andvs	r7, r0, #1912602624	; 0x72000000
	dopen = DOPEN_PERM;
    2678:	664f7346 	strbvs	r7, [pc], -r6, asr #6
    267c:	6f630066 	svcvs	0x00630066
}
    2680:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
	if (dopen) {
    2684:	6373694d 	cmnvs	r3, #1261568	; 0x134000
    2688:	00636441 	rsbeq	r6, r3, r1, asr #8
		dopen = DOPEN_TEMP;
    268c:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
		cclose ();
    2690:	00656d69 	rsbeq	r6, r5, r9, ror #26
}
    2694:	6b684362 	blvs	1a13424 <__ccfg+0x19f347c>
int ser_out (word st, const char *m) {
    2698:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
	if ((prcs = running (__outserial)) != 0) {
    269c:	00737365 	rsbseq	r7, r3, r5, ror #6
    26a0:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
    26a4:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
		join (prcs, st);
    26a8:	436b7366 	cmnmi	fp, #-1744830463	; 0x98000001
		release;
    26ac:	61506570 	cmpvs	r0, r0, ror r5
	if (*m)
    26b0:	00686374 	rsbeq	r6, r8, r4, ror r3
		prcs = strlen (m) +1;
    26b4:	5f636672 	svcpl	0x00636672
    26b8:	5f444d43 	svcpl	0x00444d43
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    26bc:	434e5953 	movtmi	r5, #59731	; 0xe953
    26c0:	4154535f 	cmpmi	r4, pc, asr r3
    26c4:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
		umwait (st);
    26c8:	735f5441 	cmpvc	pc, #1090519040	; 0x41000000
    26cc:	63667200 	cmnvs	r6, #0, 4
		prcs =  m [1] + 3;
    26d0:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	if (*m)
    26d4:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
		strcpy (buf, m);
    26d8:	54535f43 	ldrbpl	r5, [r3], #-3907	; 0xfffff0bd
    26dc:	5f545241 	svcpl	0x00545241
	if (runstrand (__outserial, buf) == 0) {
    26e0:	5f544152 	svcpl	0x00544152
    26e4:	61700074 	cmnvs	r0, r4, ror r0
		ufree (buf);
    26e8:	6e656c79 	mcrvs	12, 3, r6, cr5, cr9, {3}
    26ec:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
		memcpy (buf, m, prcs);
    26f0:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    26f4:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    26f8:	74737400 	ldrbtvc	r7, [r3], #-1024	; 0xfffffc00
}
    26fc:	62007461 	andvs	r7, r0, #1627389952	; 0x61000000
    2700:	43657355 	cmnmi	r5, #1409286145	; 0x54000001
int ser_in (word st, char *buf, int len) {
    2704:	65006372 	strvs	r6, [r0, #-882]	; 0xfffffc8e
    2708:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
	if (len == 0)
    270c:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
	if (__inpline == NULL) {
    2710:	79536b73 	ldmdbvc	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
		if ((prcs = running (__inserial)) == 0) {
    2714:	74615073 	strbtvc	r5, [r1], #-115	; 0xffffff8d
    2718:	64006863 	strvs	r6, [r0], #-2147	; 0xfffff79d
			prcs = runthread (__inserial);
    271c:	61697665 	cmnvs	r9, r5, ror #12
    2720:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			if (prcs == 0) {
    2724:	43736300 	cmnmi	r3, #0, 6
				npwait (st);
    2728:	00666e6f 	rsbeq	r6, r6, pc, ror #28
		release;
    272c:	61746164 	cmnvs	r4, r4, ror #2
		join (prcs, st);
    2730:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    2734:	00745f65 	rsbseq	r5, r4, r5, ror #30
	if (*__inpline == NULL) // bin cmd
    2738:	696b536e 	stmdbvs	fp!, {r1, r2, r3, r5, r6, r8, r9, ip, lr}^
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    273c:	68700070 	ldmdavs	r0!, {r4, r5, r6}^
	if (prcs >= len)
    2740:	64697379 	strbtvs	r7, [r9], #-889	; 0xfffffc87
		prcs = len-1;
    2744:	5f465200 	svcpl	0x00465200
	memcpy (buf, __inpline, prcs);
    2748:	50646d63 	rsbpl	r6, r4, r3, ror #26
    274c:	54706f72 	ldrbtpl	r6, [r0], #-3954	; 0xfffff08e
    2750:	65720078 	ldrbvs	r0, [r2, #-120]!	; 0xffffff88
	ufree (__inpline);
    2754:	65724666 	ldrbvs	r4, [r2, #-1638]!	; 0xfffff99a
	__inpline = NULL;
    2758:	46520071 			; <UNDEFINED> instruction: 0x46520071
	if (*buf) // if it's NULL, it's a bin cmd
    275c:	6f6c4343 	svcvs	0x006c4343
		buf [prcs] = '\0';
    2760:	6e456b63 	vmlsvs.f64	d22, d5, d19
}
    2764:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		prcs = strlen (__inpline);
    2768:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    276c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
		return 0;
    2770:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2774:	4d544b00 	vldrmi	d20, [r4, #-0]
    2778:	6c702f50 	ldclvs	15, cr2, [r0], #-320	; 0xfffffec0
int ser_outf (word st, const char *m, ...) {
    277c:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
    2780:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
	if ((prcs = running (__outserial)) != 0) {
    2784:	63740063 	cmnvs	r4, #99	; 0x63
    2788:	756f5f76 	strbvc	r5, [pc, #-3958]!	; 181a <qfree+0x66>
		join (prcs, st);
    278c:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
    2790:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
		release;
    2794:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2798:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
    279c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    27a0:	5f766374 	svcpl	0x00766374
		umwait (st);
    27a4:	5f65706f 	svcpl	0x0065706f
    27a8:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
	if (runstrand (__outserial, buf) == 0) {
    27ac:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    27b0:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
    27b4:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
		ufree (buf);
    27b8:	6374006c 	cmnvs	r4, #108	; 0x6c
		npwait (st);
    27bc:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
}
    27c0:	756e5f6f 	strbvc	r5, [lr, #-3951]!	; 0xfffff091
    27c4:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
    27c8:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    27cc:	6e5f746d 	cdpvs	4, 5, cr7, cr15, cr13, {3}
int ser_inf (word st, const char *fmt, ...) {
    27d0:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    27d4:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
	if (fmt == NULL)
    27d8:	6e007364 	cdpvs	3, 0, cr7, cr0, cr4, {3}
	if (__inpline == NULL) {
    27dc:	5f637364 	svcpl	0x00637364
		if ((prcs = running (__inserial)) == 0) {
    27e0:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    27e4:	61757100 	cmnvs	r5, r0, lsl #2
			prcs = runthread (__inserial);
    27e8:	2f00746e 	svccs	0x0000746e
    27ec:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			if (prcs == 0) {
    27f0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
				npwait (st);
    27f4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
		release;
    27f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		join (prcs, st);
    27fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2800:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	va_start (ap, fmt);
    2804:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	prcs = vscan (__inpline, fmt, ap);
    2808:	4349502f 	movtmi	r5, #36911	; 0x902f
    280c:	502f534f 	eorpl	r5, pc, pc, asr #6
	ufree (__inpline);
    2810:	534f6369 	movtpl	r6, #62313	; 0xf369
	__inpline = NULL;
    2814:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
}
    2818:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    281c:	61697265 	cmnvs	r9, r5, ror #4
    2820:	5f5f2f6c 	svcpl	0x005f2f6c
		return 0;
    2824:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    2828:	61697265 	cmnvs	r9, r5, ror #4
    282c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    2830:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 18d9 <update_n_wake+0x49>
    2834:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    2838:	006c6169 	rsbeq	r6, ip, r9, ror #2
	RF_cmdFs.frequency = 
    283c:	4d4f5f5f 	stclmi	15, cr5, [pc, #-380]	; 26c8 <ser_out+0x30>
}
    2840:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2844:	5f004554 	svcpl	0x00004554
    2848:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    284c:	61697265 	cmnvs	r9, r5, ror #4
static int option (int opt, address val) {
    2850:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    2854:	2f656d6f 	svccs	0x00656d6f
    2858:	70657473 	rsbvc	r7, r5, r3, ror r4
    285c:	2f6e6568 	svccs	0x006e6568
    2860:	6b736544 	blvs	1cdbd78 <__ccfg+0x1cbbdd0>
    2864:	2f706f74 	svccs	0x00706f74
    2868:	4f534c4f 	svcmi	0x00534c4f
    286c:	2f54454e 	svccs	0x0054454e
    2870:	4f434950 	svcmi	0x00434950
    2874:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2878:	2f534f63 	svccs	0x00534f63
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    287c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    2880:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
			goto RVal;
    2884:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
			_BIS (dstate, DSTATE_RXON);
    2888:	695f5f2f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    288c:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
	int ret = 0;
    2890:	2e6c6169 	powcsez	f6, f4, #1.0
			p_trigger (drvprcs, qevent);
    2894:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    2898:	2f656d6f 	svccs	0x00656d6f
    289c:	70657473 	rsbvc	r7, r5, r3, ror r4
    28a0:	2f6e6568 	svccs	0x006e6568
    28a4:	6b736544 	blvs	1cdbdbc <__ccfg+0x1cbbe14>
    28a8:	2f706f74 	svccs	0x00706f74
    28ac:	4f534c4f 	svcmi	0x00534c4f
    28b0:	2f54454e 	svccs	0x0054454e
    28b4:	4f434950 	svcmi	0x00434950
    28b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
    28bc:	2f534f63 	svccs	0x00534f63
			_BIC (dstate, DSTATE_RXON);
    28c0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    28c4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
			statid = (val == NULL) ? 0 : *val;
    28c8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    28cc:	6f66762f 	svcvs	0x0066762f
	int ret = 0;
    28d0:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
			ret = (int) statid;
    28d4:	61674100 	cmnvs	r7, r0, lsl #2
	if (val != NULL)
    28d8:	6f006e69 	svcvs	0x00006e69
		*val = ret;
    28dc:	00637475 	rsbeq	r7, r3, r5, ror r4
			ret = rbuffl + 2;
    28e0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    28e4:	7066765f 	rsbvc	r7, r6, pc, asr r6
			if (val != NULL) {
    28e8:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
				memcpy (val, &rxstat,
    28ec:	6f667600 	svcvs	0x00667600
    28f0:	52006d72 	andpl	r6, r0, #7296	; 0x1c80
				memset (&rxstat, 0, 
    28f4:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    28f8:	775f645f 			; <UNDEFINED> instruction: 0x775f645f
			if (val == NULL)
    28fc:	0064726f 	rsbeq	r7, r4, pc, ror #4
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2900:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 284c <plugch+0x1c>
    2904:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
				utimer_set (bckf_timer, *val);
    2908:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    290c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2910:	6f746b73 	svcvs	0x00746b73
			for (ret = 0; ret < 8; ret++)
    2914:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				if (RF_cmdPropRadioDivSetup.txPower
    2918:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
					== patable [ret])
    291c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
				if (RF_cmdPropRadioDivSetup.txPower
    2920:	2f534f43 	svccs	0x00534f43
			for (ret = 0; ret < 8; ret++)
    2924:	4f636950 	svcmi	0x00636950
    2928:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    292c:	2f736269 	svccs	0x00736269
    2930:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2934:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2938:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    293c:	7600632e 	strvc	r6, [r0], -lr, lsr #6
			_BIS (dstate, DSTATE_IRST);
    2940:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    2944:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    2948:	645f7972 	ldrbvs	r7, [pc], #-2418	; 2950 <option+0x100>
			ret = (int) channel;
    294c:	6f776c5f 	svcvs	0x00776c5f
			goto RVal;
    2950:	2f006472 	svccs	0x00006472
				(*val > 7) ? 7 : *val;
    2954:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2958:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    295c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    2960:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			plugch ();
    2964:	706f746b 	rsbvc	r7, pc, fp, ror #8
			_BIS (dstate, DSTATE_IRST);
    2968:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    296c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			ret = (int) vrate;
    2970:	4349502f 	movtmi	r5, #36911	; 0x902f
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2974:	502f534f 	eorpl	r5, pc, pc, asr #6
    2978:	534f6369 	movtpl	r6, #62313	; 0xf369
    297c:	3143432f 	cmpcc	r3, pc, lsr #6
    2980:	2f585833 	svccs	0x00585833
    2984:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    2988:	5f667274 	svcpl	0x00667274
    298c:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    2990:	73676e69 	cmnvc	r7, #1680	; 0x690
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2994:	5f706c5f 	svcpl	0x00706c5f
    2998:	632e7268 			; <UNDEFINED> instruction: 0x632e7268
    299c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    29a0:	72747074 	rsbsvc	r7, r4, #116	; 0x74
			syserror (EREQPAR, "cc13 op");
    29a4:	7000745f 	andvc	r7, r0, pc, asr r4
    29a8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    29ac:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    29b0:	5f5f0073 	svcpl	0x005f0073
    29b4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    29b8:	745f3233 	ldrbvc	r3, [pc], #-563	; 29c0 <option+0x170>
    29bc:	72496200 	subvc	r6, r9, #0, 4
    29c0:	616e4571 	smcvs	58449	; 0xe451
    29c4:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
    29c8:	66615300 	strbtvs	r5, [r1], -r0, lsl #6
    29cc:	70614865 	rsbvc	r4, r1, r5, ror #16
    29d0:	78754169 	ldmdavc	r5!, {r0, r3, r5, r6, r8, lr}^
    29d4:	53696441 	cmnpl	r9, #1090519040	; 0x41000000
    29d8:	63656c65 	cmnvs	r5, #25856	; 0x6500
    29dc:	50460074 	subpl	r0, r6, r4, ror r0
static void issue_cmd (lword cmd) {
    29e0:	565f5254 			; <UNDEFINED> instruction: 0x565f5254
    29e4:	5f44494f 	svcpl	0x0044494f
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29e8:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    29ec:	4e00545f 	cfmvsrmi	mvf0, r5
    29f0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 28bc <option+0x6c>
		if (res != 0x86)
    29f4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
			syserror (EHARDWARE, "hang ic0");
    29f8:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
    29fc:	4f4e0064 	svcmi	0x004e0064
		if (cnt-- == 0) {
    2a00:	5f4d4f52 	svcpl	0x004d4f52
			diag ("HUP %lx %lx", cmd, res);
    2a04:	63555043 	cmpvs	r5, #67	; 0x43
    2a08:	65697370 	strbvs	r7, [r9, #-880]!	; 0xfffffc90
			syserror (EHARDWARE, "hang ic0");
    2a0c:	66615300 	strbtvs	r5, [r1], -r0, lsl #6
		udelay (1);
    2a10:	70614865 	rsbvc	r4, r1, r5, ror #16
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    2a14:	696f5669 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
}
    2a18:	5f5f0064 	svcpl	0x005f0064
    2a1c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    2a20:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2a24:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
static void rx_de () {
    2a28:	2f2e2e2f 	svccs	0x002e2e2f
	if ((dstate & DSTATE_RXAC) == 0)
    2a2c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2a34 <rx_de+0xc>
    2a30:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    2a34:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
	_BIC (dstate, DSTATE_RXAC);
    2a38:	6964612f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sp, lr}^
    2a3c:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
}
    2a40:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    2a44:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
    2a48:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
static void rf_off () {
    2a4c:	30353130 	eorscc	r3, r5, r0, lsr r1
	if ((dstate & DSTATE_RFON) == 0)
    2a50:	20393235 	eorscs	r3, r9, r5, lsr r2
    2a54:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
	IntDisable (INT_RFC_CPE_0);
    2a58:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    2a5c:	415b2029 	cmpmi	fp, r9, lsr #32
    2a60:	652f4d52 	strvs	r4, [pc, #-3410]!	; 1d16 <__pi_fork+0x12>
	RFCAdi3VcoLdoVoltageMode (false);
    2a64:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
	RFCSynthPowerDown ();
    2a68:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a6c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    2a70:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a74:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a78:	73697665 	cmnvc	r9, #105906176	; 0x6500000
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a7c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a80:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
    2a84:	205d3737 	subscs	r3, sp, r7, lsr r7
    2a88:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
	_BIC (dstate, DSTATE_RFON);
    2a8c:	20626d75 	rsbcs	r6, r2, r5, ror sp
    2a90:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
}
    2a94:	6f633d75 	svcvs	0x00633d75
    2a98:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    2a9c:	20336d2d 	eorscs	r6, r3, sp, lsr #26
    2aa0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    2aa4:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2aa8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
    2aac:	20393963 	eorscs	r3, r9, r3, ror #18
    2ab0:	6f6e662d 	svcvs	0x006e662d
		if (cmd->status == tstat)
    2ab4:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
		if (timeout-- == 0) {
    2ab8:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2abc:	61696c61 	cmnvs	r9, r1, ror #24
    2ac0:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    2ac4:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
			syserror (EHARDWARE, "rt2");
    2ac8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
    2acc:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
		udelay (1);
    2ad0:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
		if (cmd->status == tstat)
    2ad4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
}
    2ad8:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
    2adc:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2ae0:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
    2ae4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
static void rf_on () {
    2ae8:	61662d20 	cmnvs	r6, r0, lsr #26
    2aec:	66006d73 			; <UNDEFINED> instruction: 0x66006d73
	OSCHF_TurnOnXosc();
    2af0:	00727450 	rsbseq	r7, r2, r0, asr r4
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2af4:	52545046 	subspl	r5, r4, #70	; 0x46
    2af8:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    2afc:	49555f44 	ldmdbmi	r5, {r2, r6, r8, r9, sl, fp, ip, lr}^
    2b00:	5f38544e 	svcpl	0x0038544e
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2b04:	3a430054 	bcc	10c2c5c <__ccfg+0x10a2cb4>
    2b08:	6e654a5c 			; <UNDEFINED> instruction: 0x6e654a5c
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2b0c:	736e696b 	cmnvc	lr, #1753088	; 0x1ac000
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2b10:	626f6a5c 	rsbvs	r6, pc, #92, 20	; 0x5c000
	issue_cmd (
    2b14:	57465c73 	smlsldxpl	r5, r6, r3, ip
    2b18:	756f7247 	strbvc	r7, [pc, #-583]!	; 28d9 <option+0x89>
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2b1c:	72442d70 	subvc	r2, r4, #112, 26	; 0x1c00
    2b20:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2b24:	5c62694c 			; <UNDEFINED> instruction: 0x5c62694c
   pPatchTab[80] = 0;
    2b28:	6b726f77 	blvs	1c9e90c <__ccfg+0x1c7e964>
   } while (--nIterations);
    2b2c:	63617073 	cmnvs	r1, #115	; 0x73
   pPatchTab[53] = 2;
    2b30:	6f6d5c65 	svcvs	0x006d5c65
    2b34:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
   pPatchTab[55] = 3;
    2b38:	756f5c73 	strbvc	r5, [pc, #-3187]!	; 1ecd <deq+0x7>
   pPatchTab[110] = 4;
    2b3c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
   pPatchTab[107] = 5;
    2b40:	3163635c 	cmncc	r3, ip, asr r3
   pPatchTab[65] = 6;
    2b44:	5f787833 	svcpl	0x00787833
    2b48:	5f616863 	svcpl	0x00616863
   pPatchTab[57] = 1;
    2b4c:	5f305f32 	svcpl	0x00305f32
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b50:	5c747865 	ldclpl	8, cr7, [r4], #-404	; 0xfffffe6c
   const uint32_t *pS = patchGenfskRfe;
    2b54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
      t2 = *pS++;
    2b58:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      t4 = *pS++;
    2b5c:	69625c62 	stmdbvs	r2!, {r1, r5, r6, sl, fp, ip, lr}^
      t6 = *pS++;
    2b60:	63675c6e 	cmnvs	r7, #28160	; 0x6e00
      t8 = *pS++;
    2b64:	74750063 	ldrbtvc	r0, [r5], #-99	; 0xffffff9d
      *pD++ = t1;
    2b68:	67695338 			; <UNDEFINED> instruction: 0x67695338
      *pD++ = t2;
    2b6c:	006c616e 	rsbeq	r6, ip, lr, ror #2
      *pD++ = t3;
    2b70:	4f524f4e 	svcmi	0x00524f4e
      *pD++ = t5;
    2b74:	4f415f4d 	svcmi	0x00415f4d
      *pD++ = t7;
    2b78:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
   } while (--nIterations);
    2b7c:	546e6f4d 	strbtpl	r6, [lr], #-3917	; 0xfffff0b3
    2b80:	65706d65 	ldrbvs	r6, [r0, #-3429]!	; 0xfffff29b
      *pD++ = t8;
    2b84:	75746172 	ldrbvc	r6, [r4, #-370]!	; 0xfffffe8e
   } while (--nIterations);
    2b88:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b8c:	67654474 			; <UNDEFINED> instruction: 0x67654474
   *pD++ = t2;
    2b90:	6f760043 	svcvs	0x00760043
   *pD++ = t3;
    2b94:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
   *pD++ = t4;
    2b98:	6f6c5365 	svcvs	0x006c5365
   *pD++ = t5;
    2b9c:	5f006570 	svcpl	0x00006570
    2ba0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	RFCAdi3VcoLdoVoltageMode (true);
    2ba4:	745f3233 	ldrbvc	r3, [pc], #-563	; 2bac <rf_on.part.0+0xcc>
    2ba8:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
       	RFCRfTrimSet (&rfTrim);
    2bac:	5f38746e 	svcpl	0x0038746e
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2bb0:	2f2e0074 	svccs	0x002e0074
    2bb4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2bb8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2bbc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
	issue_cmd ((lword)&cmd_srt);
    2bc0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2bc4:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
	issue_cmd ((lword)&RF_cmdFs);
    2bc8:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2bcc:	6f6d7461 	svcvs	0x006d7461
    2bd0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    2bd4:	706d6574 	rsbvc	r6, sp, r4, ror r5
	IntEnable (INT_RFC_CPE_0);
    2bd8:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
	_BIC (dstate, DSTATE_IRST);
    2bdc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2be0:	73006e6f 	movwvc	r6, #3695	; 0xe6f
    2be4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2be8:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bec:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0xffffff90
	IntEnable (INT_RFC_CPE_0);
    2bf0:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    2bf4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
}
    2bf8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
	IntEnable (INT_RFC_CPE_0);
    2bfc:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    2c00:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2c04:	63655374 	cmnvs	r5, #116, 6	; 0xd0000001
    2c08:	524f4e00 	subpl	r4, pc, #0, 28
    2c0c:	415f4d4f 	cmpmi	pc, pc, asr #26
    2c10:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    2c14:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
    2c18:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c1c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2c20:	56657261 	strbtpl	r7, [r5], -r1, ror #4
    2c24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2c28:	00746547 	rsbseq	r6, r4, r7, asr #10
    2c2c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2c30:	6f636553 	svcvs	0x00636553
    2c34:	6553646e 	ldrbvs	r6, [r3, #-1134]	; 0xfffffb92
    2c38:	61655263 	cmnvs	r5, r3, ror #4
    2c3c:	5f5f0064 	svcpl	0x005f0064
    2c40:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    2c44:	745f3436 	ldrbvc	r3, [pc], #-1078	; 2c4c <rf_on.part.0+0x16c>
    2c48:	33697500 	cmncc	r9, #0, 10
    2c4c:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
    2c50:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c54:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    2c58:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
    2c5c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2b28 <rf_on.part.0+0x48>
static void rx_int_enable () {
    2c60:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c64:	43435452 	movtmi	r5, #13394	; 0x3452
    2c68:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2c6c:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
    2c70:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c74:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c78:	00746547 	rsbseq	r6, r4, r7, asr #10
    2c7c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c80:	52746e65 	rsbspl	r6, r4, #1616	; 0x650
    2c84:	73006374 	movwvc	r6, #884	; 0x374
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c88:	6e416365 	cdpvs	3, 4, cr6, cr1, cr5, {3}
    2c8c:	62755364 	rsbsvs	r5, r5, #100, 6	; 0x90000001
    2c90:	00636553 	rsbeq	r6, r3, r3, asr r5
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c98:	2f2e2e2f 	svccs	0x002e2e2f
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c9c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2ca4 <rx_int_enable+0x44>
		if (db->status == DATA_ENTRY_FINISHED) {
    2ca0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2ca4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2ca8:	6e6f612f 	powvsep	f6, f7, #10.0
			nr++;
    2cac:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2cb0:	7300632e 	movwvc	r6, #814	; 0x32e
    2cb4:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
    2cb8:	00657079 	rsbeq	r7, r5, r9, ror r0
    2cbc:	4f524f4e 	svcmi	0x00524f4e
				__dp [pl + 1] = __dp [pl] - 128;
    2cc0:	50435f4d 	subpl	r5, r3, sp, asr #30
				pl = __dp [1] + 2;
    2cc4:	73616255 	cmnvc	r1, #1342177285	; 0x50000005
				__dp [pl + 1] = __dp [pl] - 128;
    2cc8:	69727065 	ldmdbvs	r2!, {r0, r2, r5, r6, ip, sp, lr}^
    2ccc:	00746547 	rsbseq	r6, r4, r7, asr #10
				__dp [pl] = 0;
    2cd0:	4f524f4e 	svcmi	0x00524f4e
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2cd4:	50435f4d 	subpl	r5, r3, sp, asr #30
    2cd8:	6c656455 	cfstrdvs	mvd6, [r5], #-340	; 0xfffffeac
    2cdc:	75007961 	strvc	r7, [r0, #-2401]	; 0xfffff69f
			db->status = DATA_ENTRY_PENDING;
    2ce0:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2ce4:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2ce8:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
				diag ("BAD RX");
    2cec:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2cf0:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
	if (nr) {
    2cf4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cf8:	2f2e2e2f 	svccs	0x002e2e2f
}
    2cfc:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2d00:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2d04:	70632f62 	rsbvc	r2, r3, r2, ror #30
    2d08:	00632e75 	rsbeq	r2, r3, r5, ror lr
}
    2d0c:	4f524f4e 	svcmi	0x00524f4e
    2d10:	50435f4d 	subpl	r5, r3, sp, asr #30
    2d14:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
    2d18:	6b73616d 	blvs	1cdb2d4 <__ccfg+0x1cbb32c>
    2d1c:	524f4e00 	subpl	r4, pc, #0, 28
    2d20:	4f5f4d4f 	svcmi	0x005f4d4f
    2d24:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    2d28:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    2d2c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
thread (cc1350_driver)
    2d30:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
    2d34:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2d38:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    2d3c:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    2d40:	32335245 	eorscc	r5, r3, #1342177284	; 0x50000004
		if (dstate & DSTATE_IRST) {
    2d44:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2d48:	5f525450 	svcpl	0x00525450
    2d4c:	44445453 	strbmi	r5, [r4], #-1107	; 0xfffffbad
			rf_off ();
    2d50:	5f4c4156 	svcpl	0x004c4156
			_BIC (dstate,
    2d54:	4f4e0054 	svcmi	0x004e0054
    2d58:	5f4d4f52 	svcpl	0x004d4f52
		if (dstate & DSTATE_RXAC) {
    2d5c:	4343534f 	movtmi	r5, #13135	; 0x334f
    2d60:	6b636f6c 	blvs	18deb18 <__ccfg+0x18beb70>
			if ((dstate & DSTATE_RXON) == 0)
    2d64:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
				rx_de ();
    2d68:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
		if (paylen == 0) {
    2d6c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2d70:	734f3233 	movtvc	r3, #62003	; 0xf233
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d74:	65530063 	ldrbvs	r0, [r3, #-99]	; 0xffffff9d
    2d78:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2d7c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2d80:	66655242 	strbtvs	r5, [r5], -r2, asr #4
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d84:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2d88:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2d8c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2d90:	5f344445 	svcpl	0x00344445
    2d94:	69740054 	ldmdbvs	r4!, {r2, r4, r6}^
    2d98:	6f58656d 	svcvs	0x0058656d
    2d9c:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2da0:	0056435f 	subseq	r4, r6, pc, asr r3
		} else if (dstate & DSTATE_RXON) {
    2da4:	4f524f4e 	svcmi	0x00524f4e
	if (dstate & DSTATE_RFON)
    2da8:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2dac:	5f464843 	svcpl	0x00464843
		re->status = DATA_ENTRY_PENDING;
    2db0:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2db4:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
	issue_cmd ((lword)&RF_cmdPropRx);
    2db8:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
	_BIS (dstate, DSTATE_RXAC);
    2dbc:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2dc0:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
    2dc4:	46480063 	strbmi	r0, [r8], -r3, rrx
    2dc8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
	if (dstate & DSTATE_RXAC)
    2dcc:	61536563 	cmpvs	r3, r3, ror #10
    2dd0:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
				if (statid != 0xffff)
    2dd4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2dd8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2ddc:	736f5870 	cmnvc	pc, #112, 16	; 0x700000
				RF_cmdPropTx.pktLen = (byte) paylen;
    2de0:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
		if (paylen == 0) {
    2de4:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
			wait (qevent, DR_LOOP);
    2de8:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2dec:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
			if (dstate & DSTATE_RXAC) {
    2df0:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2df4:	0073556e 	rsbseq	r5, r3, lr, ror #10
				rx_int_enable ();
    2df8:	61726170 	cmnvs	r2, r0, ror r1
			release;
    2dfc:	0031506d 	eorseq	r5, r1, sp, rrx
			} else if (dstate & DSTATE_RFON) {
    2e00:	61726170 	cmnvs	r2, r0, ror r1
				delay (offdelay, DR_GOOF);
    2e04:	0032506d 	eorseq	r5, r2, sp, rrx
    2e08:	61726170 	cmnvs	r2, r0, ror r1
    2e0c:	0033506d 	eorseq	r5, r3, sp, rrx
		if (bckf_timer) {
    2e10:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			wait (qevent, DR_LOOP);
    2e14:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    2e18:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    2e1c:	5f525450 	svcpl	0x00525450
			delay (bckf_timer, DR_LOOP);
    2e20:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2e24:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
			if (dstate & DSTATE_RXAC)
    2e28:	00545f33 	subseq	r5, r4, r3, lsr pc
    2e2c:	76657270 			; <UNDEFINED> instruction: 0x76657270
	if (dstate & DSTATE_RFON)
    2e30:	73756f69 	cmnvc	r5, #420	; 0x1a4
    2e34:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
		rx_de ();
    2e38:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
		RF_cmdPropTx . status = 0;
    2e3c:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e40:	0073556e 	rsbseq	r5, r3, lr, ror #10
    2e44:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2e48:	2f2e2e2f 	svccs	0x002e2e2f
		issue_cmd ((lword)&cmd_cs);
    2e4c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2e54 <cc1350_driver+0x124>
		if (dstate & DSTATE_IRST)
    2e50:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2e54:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2e58:	63736f2f 	cmnvs	r3, #47, 30	; 0xbc
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e5c:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    2e60:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
			delay (1, DR_XMIT);
    2e64:	5363736f 	cmnpl	r3, #-1140850687	; 0xbc000001
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e68:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    2e6c:	56435f65 	strbpl	r5, [r3], -r5, ror #30
    2e70:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e74:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    2e78:	6c006174 	stfvss	f6, [r0], {116}	; 0x74
				RF_cmdPropTx . status = 0;
    2e7c:	6854776f 	ldmdavs	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e80:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
				issue_cmd ((lword)&RF_cmdPropTx);
    2e84:	00646c6f 	rsbeq	r6, r4, pc, ror #24
				proceed (DR_XMIT);
    2e88:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2e8c:	76654474 			; <UNDEFINED> instruction: 0x76654474
			txtries++;
    2e90:	00656369 	rsbeq	r6, r5, r9, ror #6
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e94:	4f524f4e 	svcmi	0x00524f4e
    2e98:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2e9c:	5f464843 	svcpl	0x00464843
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2ea0:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
		goto DR_LOOP__;
    2ea4:	6f586e4f 	svcvs	0x00586e4f
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2ea8:	46006373 			; <UNDEFINED> instruction: 0x46006373
		paylen = 0;
    2eac:	5f525450 	svcpl	0x00525450
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2eb0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
		txtries = 0;
    2eb4:	56454454 			; <UNDEFINED> instruction: 0x56454454
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2eb8:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2ebc:	5f525450 	svcpl	0x00525450
    2ec0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2ec4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2ec8:	00545f32 	subseq	r5, r4, r2, lsr pc
		    tcvphy_top (physid) == NULL)
    2ecc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2ed0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2ed4:	61636f4c 	cmnvs	r3, ip, asr #30
    2ed8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			rf_off ();
    2edc:	6d610033 	stclvs	0, cr0, [r1, #-204]!	; 0xffffff34
endthread
    2ee0:	6c615670 	stclvs	6, cr5, [r1], #-448	; 0xfffffe40
    2ee4:	52006575 	andpl	r6, r0, #490733568	; 0x1d400000
    2ee8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    2eec:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2ef0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2ef4:	346e6f69 	strbtcc	r6, [lr], #-3945	; 0xfffff097
    2ef8:	524f4e00 	subpl	r4, pc, #0, 28
    2efc:	4f5f4d4f 	svcmi	0x005f4d4f
    2f00:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2f04:	6977535f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
    2f08:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2f0c:	4f63526f 	svcmi	0x0063526f
    2f10:	75546373 	ldrbvc	r6, [r4, #-883]	; 0xfffffc8d
    2f14:	664f6e72 			; <UNDEFINED> instruction: 0x664f6e72
    2f18:	736f5866 	cmnvc	pc, #6684672	; 0x660000
    2f1c:	50460063 	subpl	r0, r6, r3, rrx
void RFCCPE0IntHandler (void) {
    2f20:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2dd8 <cc1350_driver+0xa8>
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2f24:	41565841 	cmpmi	r6, r1, asr #16
		_BIS (dstate, DSTATE_IRST);
    2f28:	00545f4c 	subseq	r5, r4, ip, asr #30
    2f2c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2f30:	44417463 	strbmi	r7, [r1], #-1123	; 0xfffffb9d
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2f34:	6d6f4343 	stclvs	3, cr4, [pc, #-268]!	; 2e30 <cc1350_driver+0x100>
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f38:	6e494270 	mcrvs	2, 2, r4, cr9, cr0, {3}
    2f3c:	00747570 	rsbseq	r7, r4, r0, ror r5
	p_trigger (drvprcs, qevent);
    2f40:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f44:	6d695461 	cfstrdvs	mvd5, [r9, #-388]!	; 0xfffffe7c
    2f48:	614d0065 	cmpvs	sp, r5, rrx
    2f4c:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
    2f50:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    2f54:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e20 <cc1350_driver+0xf0>
    2f58:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2f5c:	4f50485f 	svcmi	0x0050485f
    2f60:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    2f64:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2f68:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
	RISE_N_SHINE;
    2f6c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    2f70:	4f79636e 	svcmi	0x0079636e
    2f74:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
}
    2f78:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    2f7c:	524f4e00 	subpl	r4, pc, #0, 28
    2f80:	4f5f4d4f 	svcmi	0x005f4d4f
    2f84:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2f88:	6265445f 	rsbvs	r4, r5, #1593835520	; 0x5f000000
    2f8c:	65476775 	strbvs	r6, [r7, #-1909]	; 0xfffff88b
void phys_cc1350 (int phy, int mbs) {
    2f90:	79724374 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, lr}^
	if (rbuffl != 0)
    2f94:	6c617473 	cfstrdvs	mvd7, [r1], #-460	; 0xfffffe34
    2f98:	6c706d41 	ldclvs	13, cr6, [r0], #-260	; 0xfffffefc
		syserror (ETOOMANY, "cc13");
    2f9c:	64757469 	ldrbtvs	r7, [r5], #-1129	; 0xfffffb97
		syserror (EREQPAR, "cc13 mb");
    2fa0:	654d0065 	strbvs	r0, [sp, #-101]	; 0xffffff9b
	if (mbs == 0)
    2fa4:	61566e61 	cmpvs	r6, r1, ror #28
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2fa8:	0065756c 	rsbeq	r7, r5, ip, ror #10
		syserror (EREQPAR, "cc13 mb");
    2fac:	52545046 	subspl	r5, r4, #70	; 0x46
    2fb0:	5345525f 	movtpl	r5, #21087	; 0x525f
	i = 0;
    2fb4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
	rbuffl = (byte) mbs;
    2fb8:	545f3144 	ldrbpl	r3, [pc], #-324	; 2fc0 <phys_cc1350+0x30>
		db->config.type = 0;	// General (data in structure)
    2fbc:	63724300 	cmnvs	r2, #0, 6
	rbuffl = (byte) mbs;
    2fc0:	46003233 			; <UNDEFINED> instruction: 0x46003233
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2fc4:	6374656c 	cmnvs	r4, #108, 10	; 0x1b000000
    2fc8:	33726568 	cmncc	r2, #104, 10	; 0x1a000000
		if (db == NULL)
    2fcc:	65470032 	strbvs	r0, [r7, #-50]	; 0xffffffce
			syserror (EMALLOC, "cc13");
    2fd0:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2fd4:	00644970 	rsbeq	r4, r4, r0, ror r9
    2fd8:	52545046 	subspl	r5, r4, #70	; 0x46
		db->status = DATA_ENTRY_PENDING;
    2fdc:	41454d5f 	cmpmi	r5, pc, asr sp
		if (i)
    2fe0:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
			da->pNextEntry = (byte*) db;
    2fe4:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
		db->length = rbuffl + 2;
    2fe8:	5f525450 	svcpl	0x00525450
    2fec:	43434441 	movtmi	r4, #13377	; 0x3441
		db->config.type = 0;	// General (data in structure)
    2ff0:	42504d4f 	subsmi	r4, r0, #5056	; 0x13c0
		db->length = rbuffl + 2;
    2ff4:	545f4e49 	ldrbpl	r4, [pc], #-3657	; 2ffc <phys_cc1350+0x6c>
	db->pNextEntry = (byte*) re;
    2ff8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2ffc:	4f435f52 	svcmi	0x00435f52
    3000:	5242504d 	subpl	r5, r2, #77	; 0x4d
	if (rbuffs == NULL)
    3004:	545f4645 	ldrbpl	r4, [pc], #-1605	; 300c <phys_cc1350+0x7c>
	rbuffs->pCurrEntry = (byte*) re;
    3008:	6c655300 	stclvs	3, cr5, [r5], #-0
	rbuffs->pLastEntry = NULL;
    300c:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    3010:	41706d6f 	cmnmi	r0, pc, ror #26
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3014:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    3018:	50460074 	subpl	r0, r6, r4, ror r0
    301c:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    3020:	41504d4f 	cmpmi	r0, pc, asr #26
	rbuffl -= 2;
    3024:	545f4e49 	ldrbpl	r4, [pc], #-3657	; 302c <phys_cc1350+0x9c>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3028:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
	rbuffl -= 2;
    302c:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
	physid = phy;
    3030:	32586174 	subscc	r6, r8, #116, 2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3034:	63736f00 	cmnvs	r3, #0, 30
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3038:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    303c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3040:	50480073 	subpl	r0, r8, r3, ror r0
    3044:	5f43534f 	svcpl	0x0043534f
	utimer_add (&bckf_timer);
    3048:	466c6552 			; <UNDEFINED> instruction: 0x466c6552
	drvprcs = runthread (cc1350_driver);
    304c:	4f716572 	svcmi	0x00716572
    3050:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    3054:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
	if (drvprcs == 0)
    3058:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
		syserror (ERESOURCE, "cc13");
    305c:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    3060:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3064:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3068:	6e496e4f 	cdpvs	14, 4, cr6, cr9, cr15, {2}
    306c:	6400734d 	strvs	r7, [r0], #-845	; 0xfffffcb3
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3070:	61746c65 	cmnvs	r4, r5, ror #24
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3074:	706d6554 	rsbvc	r6, sp, r4, asr r5
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3078:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    307c:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    3080:	006e4f63 	rsbeq	r4, lr, r3, ror #30
    3084:	50746966 	rsbspl	r6, r4, r6, ror #18
    3088:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    308c:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    3090:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    3094:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    3098:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
	plugch ();
    309c:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    30a0:	6f58656d 	svcvs	0x0058656d
    30a4:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    30a8:	56435f66 	strbpl	r5, [r3], -r6, ror #30
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    30ac:	43534f00 	cmpmi	r3, #0, 30
    30b0:	6f536648 	svcvs	0x00536648
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    30b4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
}
    30b8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    30bc:	6d610079 	stclvs	0, cr0, [r1, #-484]!	; 0xfffffe1c
    30c0:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2f08 <cc1350_driver+0x1d8>
    30c4:	31685470 	smccc	34112	; 0x8540
    30c8:	63734f00 	cmnvs	r3, #0, 30
    30cc:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    30d0:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    30d4:	00745f73 	rsbseq	r5, r4, r3, ror pc
    30d8:	44524148 	ldrbmi	r4, [r2], #-328	; 0xfffffeb8
    30dc:	4950415f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, lr}^
    30e0:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
    30e4:	55656d69 	strbpl	r6, [r5, #-3433]!	; 0xfffff297
    30e8:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    30ec:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    30f0:	6e497075 	mcrvs	0, 2, r7, cr9, cr5, {3}
    30f4:	7500734d 	strvc	r7, [r0, #-845]	; 0xfffffcb3
    30f8:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    30fc:	6c436372 	mcrrvs	3, 7, r6, r3, cr2
    3100:	534f006b 	movtpl	r0, #61547	; 0xf06b
    3104:	53664843 	cmnpl	r6, #4390912	; 0x430000
    3108:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    310c:	69775365 	ldmdbvs	r7!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    3110:	00686374 	rsbeq	r6, r8, r4, ror r3
    3114:	52545046 	subspl	r5, r4, #70	; 0x46
    3118:	4352435f 	cmpmi	r2, #2080374785	; 0x7c000001
    311c:	545f3233 	ldrbpl	r3, [pc], #-563	; 3124 <tcv_clo_null+0x20>
    3120:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    3124:	67654470 			; <UNDEFINED> instruction: 0x67654470
    3128:	50460043 	subpl	r0, r6, r3, asr #32
    312c:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2fe4 <phys_cc1350+0x54>
    3130:	41564e49 	cmpmi	r6, r9, asr #28
    3134:	00545f4c 	subseq	r5, r4, ip, asr #30
    3138:	52545046 	subspl	r5, r4, #70	; 0x46
    313c:	5346485f 	movtpl	r4, #26719	; 0x685f
    3140:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    3144:	46415345 	strbmi	r5, [r1], -r5, asr #6
    3148:	49575345 	ldmdbmi	r7, {r0, r2, r6, r8, r9, ip, lr}^
    314c:	5f484354 	svcpl	0x00484354
    3150:	694d0054 	stmdbvs	sp, {r2, r4, r6}^
    3154:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    3158:	70006575 	andvc	r6, r0, r5, ror r5
    315c:	4c766572 	cfldr64mi	mvdx6, [r6], #-456	; 0xfffffe38
    3160:	696d6d69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    3164:	49353274 	ldmdbmi	r5!, {r2, r4, r5, r6, r9, ip, sp}
    3168:	0073556e 	rsbseq	r5, r3, lr, ror #10
    316c:	4f524f4e 	svcmi	0x00524f4e
    3170:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    3174:	50485f43 	subpl	r5, r8, r3, asr #30
    3178:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
    317c:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
    3180:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    3184:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    3188:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    318c:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    3190:	6f547465 	svcvs	0x00547465
    3194:	6f434652 	svcvs	0x00434652
    3198:	6f466572 	svcvs	0x00466572
    319c:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    31a0:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
strand (__outserial, const char*)
    31a4:	00747265 	rsbseq	r7, r4, r5, ror #4
    31a8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    31ac:	6f437463 	svcvs	0x00437463
    31b0:	5241706d 	subpl	r7, r1, #109	; 0x6d
endstrand
    31b4:	75006665 	strvc	r6, [r0, #-1637]	; 0xfffff99b
    31b8:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
	ptr = data;
    31bc:	6b636f6c 	blvs	18def74 <__ccfg+0x18befcc>
    31c0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
	if (*ptr)
    31c4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
		len = strlen (ptr);
    31c8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    31cc:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    31d0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    31d4:	316e6f69 	cmncc	lr, r9, ror #30
    31d8:	73655200 	cmnvc	r5, #0, 4
    31dc:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    31e0:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
	len -= quant;
    31e4:	6f697461 	svcvs	0x00697461
    31e8:	5f00326e 	svcpl	0x0000326e
    31ec:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	if (len == 0) {
    31f0:	745f3631 	ldrbvc	r3, [pc], #-1585	; 31f8 <__outserial+0x54>
		ufree (data);
    31f4:	73655200 	cmnvc	r5, #0, 4
		finish;
    31f8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    31fc:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3200:	6f697461 	svcvs	0x00697461
    3204:	5300356e 	movwpl	r3, #1390	; 0x56e
    3208:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    320c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    3210:	6f697461 	svcvs	0x00697461
strand (__inserial, address)
    3214:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    3218:	72006575 	andvc	r6, r0, #490733568	; 0x1d400000
    321c:	726f4366 	rsbvc	r4, pc, #-1744830463	; 0x98000001
    3220:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    3224:	66664f71 	uqsub16vs	r4, r6, r1
	if (__inpline != NULL)
    3228:	00746573 	rsbseq	r6, r4, r3, ror r5
    322c:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
		finish;
    3230:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3234:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 3070 <phys_cc1350+0xe0>
    3238:	4f4e0064 	svcmi	0x004e0064
    323c:	5f4d4f52 	svcpl	0x004d4f52
    3240:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
		umwait (IM_INIT);
    3244:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
		release;
    3248:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
	savedata (data);
    324c:	78457465 	stmdavc	r5, {r0, r2, r5, r6, sl, ip, sp, lr}^
	len = MAX_LINE_LENGTH;
    3250:	74636570 	strbtvc	r6, [r3], #-1392	; 0xfffffa90
	io (IM_READ, __cport, READ, ptr, 1);
    3254:	76416465 	strbvc	r6, [r1], -r5, ror #8
    3258:	67617265 	strbvs	r7, [r1, -r5, ror #4]!
    325c:	79724365 	ldmdbvc	r2!, {r0, r2, r5, r6, r8, r9, lr}^
    3260:	6c617473 	cfstrdvs	mvd7, [r1], #-460	; 0xfffffe34
	if (ptr == (char*) data) { // new line
    3264:	6c706d41 	ldclvs	13, cr6, [r0], #-260	; 0xfffffefc
    3268:	64757469 	ldrbtvs	r7, [r5], #-1129	; 0xfffffb97
		if (*ptr == '\0') { // bin cmd
    326c:	736f0065 	cmnvc	pc, #101	; 0x65
			proceed (IM_BIN);
    3270:	67664363 	strbvs	r4, [r6, -r3, ror #6]!
    3274:	43676552 	cmnmi	r7, #343932928	; 0x14800000
		if (*ptr < 0x20)
    3278:	0079706f 	rsbseq	r7, r9, pc, rrx
    327c:	52545046 	subspl	r5, r4, #70	; 0x46
			proceed (IM_READ);
    3280:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
    3284:	49534c46 	ldmdbmi	r3, {r1, r2, r6, sl, fp, lr}^
	if (*ptr == '\n' || *ptr == '\r') {
    3288:	545f455a 	ldrbpl	r4, [pc], #-1370	; 3290 <__inserial+0x7c>
    328c:	524f4e00 	subpl	r4, pc, #0, 28
    3290:	4f5f4d4f 	svcmi	0x005f4d4f
		*ptr = '\0';
    3294:	46484353 			; <UNDEFINED> instruction: 0x46484353
		__inpline = (char*)data;
    3298:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
		finish;
    329c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
	if (len) {
    32a0:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
		ptr++;
    32a4:	00656d69 	rsbeq	r6, r5, r9, ror #26
    32a8:	73616c46 	cmnvc	r1, #17920	; 0x4600
		len--;
    32ac:	74654768 	strbtvc	r4, [r5], #-1896	; 0xfffff898
	proceed (IM_READ);
    32b0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
	io (IM_BIN, __cport, READ, ptr, 1);
    32b4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    32b8:	4f435f52 	svcmi	0x00435f52
    32bc:	5241504d 	subpl	r5, r1, #77	; 0x4d
    32c0:	545f4645 	ldrbpl	r4, [pc], #-1605	; 32c8 <__inserial+0xb4>
    32c4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	len -= 2;
    32c8:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
	if (len > *ptr + 1) // 1 for 0x04
    32cc:	49484354 	stmdbmi	r8, {r2, r4, r6, r8, r9, lr}^
    32d0:	5f444950 	svcpl	0x00444950
		len = *ptr + 1;
    32d4:	50460054 	subpl	r0, r6, r4, asr r0
    32d8:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
	ptr++;
    32dc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32e0:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
    32e4:	7000545f 	andvc	r5, r0, pc, asr r4
    32e8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    32ec:	4e003050 	mcrmi	0, 0, r3, cr0, cr0, {2}
    32f0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 31bc <__outserial+0x18>
    32f4:	4346525f 	movtmi	r5, #25183	; 0x625f
	len -= quant;
    32f8:	49657043 	stmdbmi	r5!, {r0, r1, r6, ip, sp, lr}^
		__inpline = (char*)data;
    32fc:	6547746e 	strbvs	r7, [r7, #-1134]	; 0xfffffb92
		finish;
    3300:	646e4174 	strbtvs	r4, [lr], #-372	; 0xfffffe8c
	ptr += quant;
    3304:	61656c43 	cmnvs	r5, r3, asr #24
    3308:	4f700072 	svcmi	0x00700072
endstrand
    330c:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    3310:	00656469 	rsbeq	r6, r5, r9, ror #8
	proceed (IM_BINL);
    3314:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
endstrand
    3318:	6f00745f 	svcvs	0x0000745f
    331c:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    3320:	5f656469 	svcpl	0x00656469
    3324:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
    3328:	4f4e0078 	svcmi	0x004e0078
    332c:	5f4d4f52 	svcpl	0x004d4f52
		if (res && (d < n))
    3330:	41434652 	cmpmi	r3, r2, asr r6
    3334:	56336964 	ldrtpl	r6, [r3], -r4, ror #18
    3338:	644c6f63 	strbvs	r6, [ip], #-3939	; 0xfffff09d
    333c:	6c6f566f 	stclvs	6, cr5, [pc], #-444	; 3188 <tcv_ope_null+0x2c>
			res [d] = (char) c;
    3340:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
		d++;
    3344:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3348:	63667200 	cmnvs	r6, #0, 4
    334c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3350:	4f52505f 	svcmi	0x0052505f
    3354:	41525f50 	cmpmi	r2, r0, asr pc
    3358:	5f4f4944 	svcpl	0x004f4944
				enci (10000);
    335c:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3360:	00745f50 	rsbseq	r5, r4, r0, asr pc
    3364:	4f524f4e 	svcmi	0x00524f4e
	d = 0;
    3368:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
		c = *fm++;
    336c:	54665243 	strbtpl	r5, [r6], #-579	; 0xfffffdbd
		if (c == '\\') {
    3370:	536d6972 	cmnpl	sp, #1867776	; 0x1c8000
			if ((c = *fm++) == '\0') {
    3374:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    3378:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3244 <__inserial+0x30>
				outc ('\\');
    337c:	4346525f 	movtmi	r5, #25183	; 0x625f
			if ((c = *fm++) == '\0') {
    3380:	746e7953 	strbtvc	r7, [lr], #-2387	; 0xfffff6ad
				outc ('\\');
    3384:	776f5068 	strbvc	r5, [pc, -r8, rrx]!
    3388:	6f447265 	svcvs	0x00447265
			outc (c);
    338c:	6f006e77 	svcvs	0x00006e77
    3390:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
			if (c == '\0')
    3394:	5f656469 	svcpl	0x00656469
    3398:	69727472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, sp, lr}^
			outc (c);
    339c:	4f70006d 	svcmi	0x0070006d
				outc (val);
    33a0:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
				val = (word) va_arg (ap, aword);
    33a4:	75007075 	strvc	r7, [r0, #-117]	; 0xffffff8b
		if (c == '%') {
    33a8:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    33ac:	72006766 	andvc	r6, r0, #26738688	; 0x1980000
			c = *fm++;
    33b0:	645f6366 	ldrbvs	r6, [pc], #-870	; 33b8 <__pi_vfparse+0x68>
			switch (c) {
    33b4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    33b8:	7249746c 	subvc	r7, r9, #108, 8	; 0x6c000000
    33bc:	64644171 	strbtvs	r4, [r4], #-369	; 0xfffffe8f
    33c0:	4f4e0072 	svcmi	0x004e0072
    33c4:	5f4d4f52 	svcpl	0x004d4f52
    33c8:	43434652 	movtmi	r4, #13906	; 0x3652
    33cc:	61504550 	cmpvs	r0, r0, asr r5
    33d0:	52686374 	rsbpl	r6, r8, #116, 6	; 0xd0000001
				outc ('%');
    33d4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    33d8:	63667200 	cmnvs	r6, #0, 4
				outc (c);
    33dc:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    33e0:	4f52505f 	svcmi	0x0052505f
    33e4:	41525f50 	cmpmi	r2, r0, asr pc
				if (c == '\0')
    33e8:	5f4f4944 	svcpl	0x004f4944
				return d;
    33ec:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
}
    33f0:	00735f50 	rsbseq	r5, r3, r0, asr pc
    33f4:	54665270 	strbtpl	r5, [r6], #-624	; 0xfffffd90
			switch (c) {
    33f8:	006d6972 	rsbeq	r6, sp, r2, ror r9
    33fc:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    3400:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
				for (i = 12; ; i -= 4) {
    3404:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
				val = (word) va_arg (ap, aword);
    3408:	2e006575 	cfrshl64cs	mvdx0, mvdx5, r6
						[ (val >> i) & 0xf ]);
    340c:	2f2e2e2f 	svccs	0x002e2e2f
    3410:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3414:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
					outc (__pi_hex_enc_table
    3418:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    341c:	2f62696c 	svccs	0x0062696c
					if (i == 0)
    3420:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    3424:	66720063 	ldrbtvs	r0, [r2], -r3, rrx
				for (i = 12; ; i -= 4) {
    3428:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
				val = (word) va_arg (ap, aword);
    342c:	41525f44 	cmpmi	r2, r4, asr #30
				if (c == 'd' && (val & 0x8000) != 0) {
    3430:	5f4f4944 	svcpl	0x004f4944
				val = (word) va_arg (ap, aword);
    3434:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
				if (c == 'd' && (val & 0x8000) != 0) {
    3438:	00735f50 	rsbseq	r5, r3, r0, asr pc
    343c:	5f636672 	svcpl	0x00636672
					outc ('-');
    3440:	5f444d43 	svcpl	0x00444d43
    3444:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
					val = (~val) + 1;
    3448:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
    344c:	5f505554 	svcpl	0x00505554
				for (i = 12; ; i -= 4) {
    3450:	45620074 	strbmi	r0, [r2, #-116]!	; 0xffffff8c
				enci (10000);
    3454:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    3458:	63660065 	cmnvs	r6, #101	; 0x65
    345c:	5f316766 	svcpl	0x00316766
    3460:	69727472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    3464:	4f4e006d 	svcmi	0x004e006d
    3468:	5f4d4f52 	svcpl	0x004d4f52
    346c:	52434652 	subpl	r4, r3, #85983232	; 0x5200000
    3470:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3474:	524f4e00 	subpl	r4, pc, #0, 28
    3478:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    347c:	6f444346 	svcvs	0x00444346
    3480:	6562726f 	strbvs	r7, [r2, #-623]!	; 0xfffffd91
    3484:	65536c6c 	ldrbvs	r6, [r3, #-3180]	; 0xfffff394
    3488:	6f54646e 	svcvs	0x0054646e
    348c:	43465200 	movtmi	r5, #25088	; 0x6200
    3490:	496b6341 	stmdbmi	fp!, {r0, r6, r8, r9, sp, lr}^
    3494:	6c43746e 	cfstrdvs	mvd7, [r3], {110}	; 0x6e
    3498:	00726165 	rsbseq	r6, r2, r5, ror #2
				if (c == 'd' || c == 'u') {
    349c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    34a0:	00726564 	rsbseq	r6, r2, r4, ror #10
					if (c == 'd' &&
    34a4:	4f524f4e 	svcmi	0x00524f4e
					val = va_arg (ap, lword);
    34a8:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
					fm++;
    34ac:	54665243 	strbtpl	r5, [r6], #-579	; 0xfffffdbd
					if (c == 'd' &&
    34b0:	526d6972 	rsbpl	r6, sp, #1867776	; 0x1c8000
    34b4:	00646165 	rsbeq	r6, r4, r5, ror #2
						outc ('-');
    34b8:	7231706d 	eorsvc	r7, r1, #109	; 0x6d
    34bc:	54007665 	strpl	r7, [r0], #-1637	; 0xfffff99b
						val = (~val) + 1;
    34c0:	416d6972 	smcmi	54930	; 0xd692
				enci (10000);
    34c4:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
					enci (1000000000UL);
    34c8:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    34cc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    34d0:	6b615774 	blvs	18592a8 <__ccfg+0x1839300>
    34d4:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    34d8:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    34dc:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    34e0:	006e776f 	rsbeq	r7, lr, pc, ror #14
    34e4:	4f524f4e 	svcmi	0x00524f4e
    34e8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    34ec:	41707574 	cmnmi	r0, r4, ror r5
    34f0:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    34f4:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    34f8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    34fc:	6b615774 	blvs	18592d4 <__ccfg+0x183932c>
    3500:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    3504:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    3508:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
				} else if (c == 'x') {
    350c:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
					for (i = 28; ; i -= 4) {
    3510:	00316766 	eorseq	r6, r1, r6, ror #14
					val = va_arg (ap, lword);
    3514:	4f524f4e 	svcmi	0x00524f4e
							[ (val >> i) & 0xf ]);
    3518:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    351c:	41707574 	cmnmi	r0, r4, ror r5
						outc (__pi_hex_enc_table
    3520:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    3524:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    3528:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
						if (i == 0)
    352c:	6b615774 	blvs	1859304 <__ccfg+0x183935c>
    3530:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
					for (i = 28; ; i -= 4) {
    3534:	536d6f72 	cmnpl	sp, #456	; 0x1c8
					outc ('%');
    3538:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    353c:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    3540:	00326766 	eorseq	r6, r2, r6, ror #14
					outc ('l');
    3544:	4f524f4e 	svcmi	0x00524f4e
    3548:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
				val = (word) va_arg (ap, aword);
    354c:	41707574 	cmnmi	r0, r4, ror r5
				outc (val);
    3550:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    3554:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
				while (*st != '\0') {
    3558:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    355c:	6b615774 	blvs	1859334 <__ccfg+0x183938c>
    3560:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    3564:	536d6f72 	cmnpl	sp, #456	; 0x1c8
					outc (*st);
    3568:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    356c:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
					st++;
    3570:	00336766 	eorseq	r6, r3, r6, ror #14
		c = *fm++;
    3574:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3578:	2f2e2e2f 	svccs	0x002e2e2f
    357c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 3584 <vform+0x4>
char *vform (char *res, const char *fm, va_list aq) {
    3580:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3584:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
	if (res != NULL) {
    3588:	7465732f 	strbtvc	r7, [r5], #-815	; 0xfffffcd1
		__pi_vfparse (res, MAX_WORD, fm, aq);
    358c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    3590:	524f4e00 	subpl	r4, pc, #0, 28
    3594:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
}
    3598:	70757465 	rsbsvc	r7, r5, r5, ror #8
    359c:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
	fml = strlen (fm) + 17;
    35a0:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    35a4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    35a8:	6f636341 	svcvs	0x00636341
	if ((res = (char*) umalloc (fml)) == NULL)
    35ac:	6e696472 	mcrvs	4, 3, r6, cr9, cr2, {3}
    35b0:	436f5467 	cmnmi	pc, #1728053248	; 0x67000000
    35b4:	53676663 	cmnpl	r7, #103809024	; 0x6300000
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    35b8:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    35bc:	7500676e 	strvc	r6, [r0, #-1902]	; 0xfffff892
    35c0:	46323369 	ldrtmi	r3, [r2], -r9, ror #6
    35c4:	31676663 	cmncc	r7, r3, ror #12
		ufree (res);
    35c8:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
		goto Again;
    35cc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
	if (buf == NULL || fmt == NULL)
    35d0:	4e4f4100 	dvfmie	f4, f7, f0
int vscan (const char *buf, const char *fmt, va_list ap) {
    35d4:	4a435557 	bmi	10d8b38 <__ccfg+0x10b8b90>
	if (buf == NULL || fmt == NULL)
    35d8:	50676174 	rsbpl	r6, r7, r4, ror r1
    35dc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    35e0:	0066664f 	rsbeq	r6, r6, pc, asr #12
		    	    case 'u': scanu (lword); break;
    35e4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			while (isspace (*buf)) buf++;
    35e8:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    35ec:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 342c <__pi_vfparse+0xdc>
	while (*fmt != '\0') {
    35f0:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
		if (*fmt++ != '%')
    35f4:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
		switch (*fmt++) {
    35f8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 34c4 <__pi_vfparse+0x174>
    35fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3600:	72547075 	subsvc	r7, r4, #117	; 0x75
    3604:	65446d69 	strbvs	r6, [r4, #-3433]	; 0xfffff297
    3608:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    360c:	72747600 	rsbsvc	r7, r4, #0, 12
    3610:	755f6d69 	ldrbvc	r6, [pc, #-3433]	; 28af <option+0x5f>
}
    3614:	00676964 	rsbeq	r6, r7, r4, ror #18
		switch (*fmt++) {
    3618:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    361c:	536e6f41 	cmnpl	lr, #260	; 0x104
    3620:	65527379 	ldrbvs	r7, [r2, #-889]	; 0xfffffc87
    3624:	63746573 	cmnvs	r4, #482344960	; 0x1cc00000
			while (isspace (*buf)) buf++;
    3628:	63006c74 	movwvs	r6, #3188	; 0xc74
    362c:	5f676663 	svcpl	0x00676663
    3630:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3634:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3638:	00676552 	rsbeq	r6, r7, r2, asr r5
    363c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			if (*buf == '\0')
    3640:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
			if (*buf != ',') {
    3644:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 3484 <__pi_vfparse+0x134>
			sap = va_arg (ap, char*);
    3648:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
			nc++;
    364c:	61577465 	cmpvs	r7, r5, ror #8
			if (*buf != ',') {
    3650:	7075656b 	rsbsvc	r6, r5, fp, ror #10
				while (!isspace (*buf) && *buf != ',' &&
    3654:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3544 <__pi_vfparse+0x1f4>
    3658:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    365c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3660:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    3664:	72467075 	subvc	r7, r6, #117	; 0x75
    3668:	6f506d6f 	svcvs	0x00506d6f
    366c:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
			while (isspace (*buf)) buf++;
    3670:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3674:	4f524f4e 	svcmi	0x00524f4e
    3678:	68545f4d 	ldmdavs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    367c:	6f437369 	svcvs	0x00437369
    3680:	73496564 	movtvc	r6, #38244	; 0x9564
			if (*buf == ',') buf++;
    3684:	6c697542 	cfstr64vs	mvdx7, [r9], #-264	; 0xfffffef8
    3688:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
			*sap = '\0';
    368c:	33314343 	teqcc	r1, #201326593	; 0xc000001
			break;
    3690:	77487878 	smlsldxvc	r7, r8, r8, r8
		    case 'd': scani (word); break;
    3694:	32766552 	rsbscc	r6, r6, #343932928	; 0x14800000
    3698:	646e4130 	strbtvs	r4, [lr], #-304	; 0xfffffed0
    369c:	6574614c 	ldrbvs	r6, [r4, #-332]!	; 0xfffffeb4
    36a0:	61485f72 	hvcvs	34290	; 0x85f2
    36a4:	6649746c 	strbvs	r7, [r9], -ip, ror #8
    36a8:	6c6f6956 			; <UNDEFINED> instruction: 0x6c6f6956
    36ac:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    36b0:	72747600 	rsbsvc	r7, r4, #0, 12
    36b4:	625f6d69 	subsvs	r6, pc, #6720	; 0x1a40
    36b8:	6300646f 	movwvs	r6, #1135	; 0x46f
    36bc:	45676663 	strbmi	r6, [r7, #-1635]!	; 0xfffff99d
    36c0:	664c7478 			; <UNDEFINED> instruction: 0x664c7478
    36c4:	006b6c43 	rsbeq	r6, fp, r3, asr #24
    36c8:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    36cc:	48746e65 	ldmdami	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    36d0:	6f6c4366 	svcvs	0x006c4366
    36d4:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
    36d8:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    36dc:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    36e0:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    36e4:	4e006c61 	cdpmi	12, 0, cr6, cr0, cr1, {3}
    36e8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 35b4 <vform+0x34>
    36ec:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    36f0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    36f4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    36f8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    36fc:	62616e41 	rsbvs	r6, r1, #1040	; 0x410
    3700:	73617079 	cmnvc	r1, #121	; 0x79
		    case 'u': scanu (word); break;
    3704:	6c615673 	stclvs	6, cr5, [r1], #-460	; 0xfffffe34
    3708:	00316575 	eorseq	r6, r1, r5, ror r5
    370c:	4f524f4e 	svcmi	0x00524f4e
    3710:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3714:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3718:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    371c:	6f466d69 	svcvs	0x00466d69
    3720:	6c624472 	cfstrdvs	mvd4, [r2], #-456	; 0xfffffe38
    3724:	6f6f4c72 	svcvs	0x006f4c72
    3728:	6c694670 	stclvs	6, cr4, [r9], #-448	; 0xfffffe40
    372c:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
    3730:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3734:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    3738:	00656761 	rsbeq	r6, r5, r1, ror #14
    373c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    3740:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    3744:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3748:	736d6976 	cmnvc	sp, #1933312	; 0x1d8000
		    case 'x': scanx (word); break;
    374c:	4d6c7443 	cfstrdmi	mvd7, [ip, #-268]!	; 0xfffffef4
    3750:	3065646f 	rsbcc	r6, r5, pc, ror #8
    3754:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    3758:	664f7361 	strbvs	r7, [pc], -r1, ror #6
    375c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    3760:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    3764:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3768:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    376c:	6863736f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3770:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    3774:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3778:	4f4e0065 	svcmi	0x004e0065
    377c:	5f4d4f52 	svcpl	0x004d4f52
    3780:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3784:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3788:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    378c:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3790:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3794:	73614666 	cmnvc	r1, #106954752	; 0x6600000
    3798:	61745374 	cmnvs	r4, r4, ror r3
    379c:	4e007472 	mcrmi	4, 0, r7, cr0, cr2, {3}
    37a0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 366c <vscan+0x9c>
    37a4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    37a8:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    37ac:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    37b0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    37b4:	734f6352 	movtvc	r6, #62290	; 0xf352
    37b8:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    37bc:	73616942 	cmnvc	r1, #1081344	; 0x108000
    37c0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			switch (*fmt++) {
    37c4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    37c8:	64416174 	strbvs	r6, [r1], #-372	; 0xfffffe8c
    37cc:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    37d0:	524f4e00 	subpl	r4, pc, #0, 28
    37d4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    37d8:	70757465 	rsbsvc	r7, r5, r5, ror #8
		    	    case 'd': scani (lword); break;
    37dc:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    37e0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    37e4:	6f58726f 	svcvs	0x0058726f
    37e8:	66486373 			; <UNDEFINED> instruction: 0x66486373
    37ec:	006c7443 	rsbeq	r7, ip, r3, asr #8
    37f0:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    37f4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    37f8:	6152726f 	cmpvs	r2, pc, ror #4
    37fc:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    3800:	67664374 			; <UNDEFINED> instruction: 0x67664374
    3804:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3808:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
    380c:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    3810:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3814:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3818:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    381c:	61466648 	cmpvs	r6, r8, asr #12
    3820:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    3824:	56747261 	ldrbtpl	r7, [r4], -r1, ror #4
    3828:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    382c:	524f4e00 	subpl	r4, pc, #0, 28
    3830:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3834:	70757465 	rsbsvc	r7, r5, r5, ror #8
		    	    case 'x': scanx (lword); break;
    3838:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    383c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3840:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    3844:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 368c <vscan+0xbc>
    3848:	31685470 	smccc	34112	; 0x8540
    384c:	524f4e00 	subpl	r4, pc, #0, 28
    3850:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3854:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3858:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    385c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3860:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    3864:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 36ac <vscan+0xdc>
    3868:	32685470 	rsbcc	r5, r8, #112, 8	; 0x70000000
    386c:	524f4e00 	subpl	r4, pc, #0, 28
    3870:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3874:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3878:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    387c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3880:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    3884:	56685363 	strbtpl	r5, [r8], -r3, ror #6
    3888:	45667562 	strbmi	r7, [r6, #-1378]!	; 0xfffffa9e
    388c:	4f4e006e 	svcmi	0x004e006e
    3890:	5f4d4f52 	svcpl	0x004d4f52
    3894:	33494444 	movtcc	r4, #37956	; 0x9444
    3898:	67655232 			; <UNDEFINED> instruction: 0x67655232
    389c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    38a0:	63660065 	cmnvs	r6, #101	; 0x65
    38a4:	44316766 	ldrtmi	r6, [r1], #-1894	; 0xfffff89a
		    	    case 'd': scani (lword); break;
    38a8:	00617461 	rsbeq	r7, r1, r1, ror #8
    38ac:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    38b0:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    38b4:	63734f63 	cmnvs	r3, #396	; 0x18c
    38b8:	4249664c 	submi	r6, r9, #76, 12	; 0x4c00000
    38bc:	54736169 	ldrbtpl	r6, [r3], #-361	; 0xfffffe97
    38c0:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
		    	    case 'u': scanu (lword); break;
    38c4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    38c8:	72617400 	rsbvc	r7, r1, #0, 8
    38cc:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    38d0:	006d6972 	rsbeq	r6, sp, r2, ror r9
    38d4:	4f524f4e 	svcmi	0x00524f4e
    38d8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    38dc:	47707574 			; <UNDEFINED> instruction: 0x47707574
    38e0:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    38e4:	6f466d69 	svcvs	0x00466d69
    38e8:	64615272 	strbtvs	r5, [r1], #-626	; 0xfffffd8e
    38ec:	74784563 	ldrbtvc	r4, [r8], #-1379	; 0xfffffa9d
    38f0:	00676643 	rsbeq	r6, r7, r3, asr #12
    38f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    38f8:	2f2e2e2f 	svccs	0x002e2e2f
    38fc:	642f2e2e 	strtvs	r2, [pc], #-3630	; 3904 <vscan+0x334>
    3900:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3904:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3908:	7465732f 	strbtvc	r7, [r5], #-815	; 0xfffffcd1
		    	    case 'x': scanx (lword); break;
    390c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    3910:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
			if ((c = *buf++) == '\0')
    3914:	62757300 	rsbsvs	r7, r5, #0, 6
    3918:	49636553 	stmdbmi	r3!, {r0, r1, r4, r6, r8, sl, sp, lr}^
			sap = va_arg (ap, char*);
    391c:	4e00636e 	cdpmi	3, 0, cr6, cr0, cr14, {3}
			nc++;
    3920:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 37ec <vscan+0x21c>
			break;
    3924:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
			while (isspace (*buf)) buf++;
    3928:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    392c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3930:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
						*sap++ = *buf++;
    3934:	734f6352 	movtvc	r6, #62290	; 0xf352
    3938:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
			while (isspace (*buf)) buf++;
    393c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    3940:	6e757443 	cdpvs	4, 7, cr7, cr5, cr3, {2}
    3944:	69725465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, lr}^
		return 0;
    3948:	4f4e006d 	svcmi	0x004e006d
    394c:	5f4d4f52 	svcpl	0x004d4f52
		    case 'x': scanx (word); break;
    3950:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3954:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
		    	    case 'x': scanx (lword); break;
    3958:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    395c:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3960:	4c63736f 	stclmi	3, cr7, [r3], #-444	; 0xfffffe44
    3964:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    3968:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    396c:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
    3970:	696d4364 	stmdbvs	sp!, {r2, r5, r6, r8, r9, lr}^
    3974:	72777272 	rsbsvc	r7, r7, #536870919	; 0x20000007
    3978:	69746152 	ldmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    397c:	6975006f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r6}^
    3980:	72543233 	subsvc	r3, r4, #805306371	; 0x30000003
    3984:	53006d69 	movwpl	r6, #3433	; 0xd69
    3988:	70757465 	rsbsvc	r7, r5, r5, ror #8
    398c:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    3990:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0xfffff7bb
    3994:	6456646e 	ldrbvs	r6, [r6], #-1134	; 0xfffffb92
    3998:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    399c:	61566d69 	cmpvs	r6, r9, ror #26
    39a0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    39a4:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    39a8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    39ac:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    39b0:	56685363 	strbtpl	r5, [r8], -r3, ror #6
    39b4:	45667562 	strbmi	r7, [r6, #-1378]!	; 0xfffffa9e
    39b8:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    39bc:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    39c0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 388c <vscan+0x2bc>
    39c4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    39c8:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    39cc:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    39d0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    39d4:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    39d8:	646f4d68 	strbtvs	r4, [pc], #-3432	; 39e0 <NOROM_AONRTCCurrent64BitValueGet+0x8>
    39dc:	006e4565 	rsbeq	r4, lr, r5, ror #10
    39e0:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    39e4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    39e8:	64645664 	strbtvs	r5, [r4], #-1636	; 0xfffff99c
    39ec:	6c615672 	stclvs	6, cr5, [r1], #-456	; 0xfffffe38
    39f0:	646f6d00 	strbtvs	r6, [pc], #-3328	; 39f8 <NOROM_CPUcpsie>
    39f4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    39f8:	75003166 	strvc	r3, [r0, #-358]	; 0xfffffe9a
    39fc:	46323369 	ldrtmi	r3, [r2], -r9, ror #6
    3a00:	31676663 	cmncc	r7, r3, ror #12
    3a04:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3a08:	4f4e0065 	svcmi	0x004e0065
    3a0c:	5f4d4f52 	svcpl	0x004d4f52
    3a10:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3a14:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3a18:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3a1c:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3a20:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3a24:	69624966 	stmdbvs	r2!, {r1, r2, r5, r6, r8, fp, lr}^
    3a28:	68747361 	ldmdavs	r4!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    3a2c:	006d7265 	rsbeq	r7, sp, r5, ror #4
    3a30:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    3a34:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3a38:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    3a3c:	4d685363 	stclmi	3, cr5, [r8, #-396]!	; 0xfffffe74
    3a40:	4565646f 	strbmi	r6, [r5, #-1135]!	; 0xfffffb91
    3a44:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    3a48:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    3a4c:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    3a50:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    3a54:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    3a58:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3a5c:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3a60:	63734f31 	cmnvs	r3, #49, 30	; 0xc4
    3a64:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3a68:	6c626400 	cfstrdvs	mvd6, [r2], #-0
    3a6c:	6f6f4c72 	svcvs	0x006f4c72
    3a70:	6c694670 	stclvs	6, cr4, [r9], #-448	; 0xfffffe40
    3a74:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
    3a78:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3a7c:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    3a80:	56656761 	strbtpl	r6, [r5], -r1, ror #14
    3a84:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3a88:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    3a8c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3a90:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3a94:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    3a98:	616c7567 	cmnvs	ip, r7, ror #10
    3a9c:	41726f74 	cmnmi	r2, r4, ror pc
    3aa0:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    3aa4:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    3aa8:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    3aac:	61566f69 	cmpvs	r6, r9, ror #30
    3ab0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3ab4:	61696269 	cmnvs	r9, r9, ror #4
    3ab8:	696e4973 	stmdbvs	lr!, {r0, r1, r4, r5, r6, r8, fp, lr}^
    3abc:	4f4e0074 	svcmi	0x004e0074
    3ac0:	5f4d4f52 	svcpl	0x004d4f52
    3ac4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3ac8:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    3acc:	526e6f41 	rsbpl	r6, lr, #260	; 0x104
    3ad0:	75536374 	ldrbvc	r6, [r3, #-884]	; 0xfffffc8c
    3ad4:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    3ad8:	00636e49 	rsbeq	r6, r3, r9, asr #28
    3adc:	4f524f4e 	svcmi	0x00524f4e
    3ae0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3ae4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3ae8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3aec:	6f466d69 	svcvs	0x00466d69
    3af0:	706d4172 	rsbvc	r4, sp, r2, ror r1
    3af4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    3af8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3afc:	33697500 	cmncc	r9, #0, 10
    3b00:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    3b04:	52664863 	rsbpl	r4, r6, #6488064	; 0x630000
    3b08:	7500776f 	strvc	r7, [r0, #-1903]	; 0xfffff891
    3b0c:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3b10:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3b14:	6c6f4366 	stclvs	3, cr4, [pc], #-408	; 3984 <SafeHapiVoid+0x24>
    3b18:	524f4e00 	subpl	r4, pc, #0, 28
    3b1c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3b20:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3b24:	56746553 			; <UNDEFINED> instruction: 0x56746553
    3b28:	4c726464 	cfldrdmi	mvd6, [r2], #-400	; 0xfffffe70
    3b2c:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    3b30:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    3b34:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3b38:	00776152 	rsbseq	r6, r7, r2, asr r1
    3b3c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3b40:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3b44:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3b48:	33690065 	cmncc	r9, #101	; 0x65
    3b4c:	73754332 	cmnvc	r5, #-939524096	; 0xc8000000
    3b50:	656d6f74 	strbvs	r6, [sp, #-3956]!	; 0xfffff08c
    3b54:	6c654472 	cfstrdvs	mvd4, [r5], #-456	; 0xfffffe38
    3b58:	64416174 	strbvs	r6, [r1], #-372	; 0xfffffe8c
    3b5c:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    3b60:	32336900 	eorscc	r6, r3, #0, 18
    3b64:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3b68:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3b6c:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    3b70:	76006174 			; <UNDEFINED> instruction: 0x76006174
    3b74:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    3b78:	416d6972 	smcmi	54930	; 0xd692
    3b7c:	65767463 	ldrbvs	r7, [r6, #-1123]!	; 0xfffffb9d
    3b80:	72756300 	rsbsvc	r6, r5, #0, 6
    3b84:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3b88:	66696400 	strbtvs	r6, [r9], -r0, lsl #8
    3b8c:	64645666 	strbtvs	r5, [r4], #-1638	; 0xfffff99a
    3b90:	74634172 	strbtvc	r4, [r3], #-370	; 0xfffffe8e
    3b94:	53657669 	cmnpl	r5, #110100480	; 0x6900000
    3b98:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3b9c:	63727000 	cmnvs	r2, #0
    3ba0:	6d61526d 	sfmvs	f5, 2, [r1, #-436]!	; 0xfffffe4c
    3ba4:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
    3ba8:	6f69746e 	svcvs	0x0069746e
    3bac:	6f6c006e 	svcvs	0x006c006e
    3bb0:	4e006461 	cdpmi	4, 0, cr6, cr0, cr1, {3}
    3bb4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3a80 <NOROM_OSCClockSourceGet+0x24>
    3bb8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3bbc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3bc0:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    3bc4:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
    3bc8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3bcc:	66416567 	strbvs	r6, [r1], -r7, ror #10
    3bd0:	50726574 	rsbspl	r6, r2, r4, ror r5
    3bd4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3bd8:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3bdc:	524f4e00 	subpl	r4, pc, #0, 28
    3be0:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3be4:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3be8:	65536c72 	ldrbvs	r6, [r3, #-3186]	; 0xfffff38e
    3bec:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    3bf0:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3bf4:	66654265 	strbtvs	r4, [r5], -r5, ror #4
    3bf8:	5065726f 	rsbpl	r7, r5, pc, ror #4
    3bfc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3c00:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3c04:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3c08:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3c0c:	2f2e2e2f 	svccs	0x002e2e2f
    3c10:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3c14:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3c18:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3c1c:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    3c20:	632e6c72 			; <UNDEFINED> instruction: 0x632e6c72
    3c24:	524f4e00 	subpl	r4, pc, #0, 28
    3c28:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3c2c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3c30:	65526c72 	ldrbvs	r6, [r2, #-3186]	; 0xfffff38e
    3c34:	53746573 	cmnpl	r4, #482344960	; 0x1cc00000
    3c38:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    3c3c:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    3c40:	33697500 	cmncc	r9, #0, 10
    3c44:	6d6f4432 	cfstrdvs	mvd4, [pc, #-200]!	; 3b84 <NOROM_RFCSynthPowerDown+0x28>
    3c48:	736e6961 	cmnvc	lr, #1589248	; 0x184000
    3c4c:	72657000 	rsbvc	r7, r5, #0
    3c50:	64700045 	ldrbtvs	r0, [r0], #-69	; 0xffffffbb
    3c54:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3c58:	33697500 	cmncc	r9, #0, 10
    3c5c:	78754132 	ldmdavc	r5!, {r1, r4, r5, r8, lr}^
    3c60:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3c64:	5000736b 	andpl	r7, r0, fp, ror #6
    3c68:	444d4352 	strbmi	r4, [sp], #-850	; 0xfffffcae
    3c6c:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3c70:	616e456e 	cmnvs	lr, lr, ror #10
    3c74:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3c78:	4d726570 	cfldr64mi	mvdx6, [r2, #-448]!	; 0xfffffe40
    3c7c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    3c80:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3c84:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3c88:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3c8c:	7600646f 	strvc	r6, [r0], -pc, ror #8
    3c90:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    3c94:	75007061 	strvc	r7, [r0, #-97]	; 0xffffff9f
    3c98:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3c9c:	70007864 	andvc	r7, r0, r4, ror #16
    3ca0:	61745364 	cmnvs	r4, r4, ror #6
    3ca4:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
    3ca8:	65676e6f 	strbvs	r6, [r7, #-3695]!	; 0xfffff191
    3cac:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
    3cb0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3cb4:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    3cb8:	646f6972 	strbtvs	r6, [pc], #-2418	; 3cc0 <NOROM_RFCRfTrimRead+0x118>
    3cbc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    3cc0:	64566174 	ldrbvs	r6, [r6], #-372	; 0xfffffe8c
    3cc4:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    3cc8:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    3ccc:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3cd0:	54746162 	ldrbtpl	r6, [r4], #-354	; 0xfffffe9e
    3cd4:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    3cd8:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    3cdc:	736f7800 	cmnvc	pc, #0, 16
    3ce0:	776f5063 	strbvc	r5, [pc, -r3, rrx]!
    3ce4:	6f4d7265 	svcvs	0x004d7265
    3ce8:	50006564 	andpl	r6, r0, r4, ror #10
    3cec:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    3cf0:	4764616f 	strbmi	r6, [r4, -pc, ror #2]!
    3cf4:	73007465 	movwvc	r7, #1125	; 0x465
    3cf8:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    3cfc:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
    3d00:	7400706d 	strvc	r7, [r0], #-109	; 0xffffff93
    3d04:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
    3d08:	67006174 	smlsdxvs	r0, r4, r1, r6
    3d0c:	6975705f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    3d10:	6f4d3233 	svcvs	0x004d3233
    3d14:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    3d18:	63004743 	movwvs	r4, #1859	; 0x743
    3d1c:	74537275 	ldrbvc	r7, [r3], #-629	; 0xfffffd8b
    3d20:	00657461 	rsbeq	r7, r5, r1, ror #8
    3d24:	536e6f61 	cmnpl	lr, #388	; 0x184
    3d28:	74637379 	strbtvc	r7, [r3], #-889	; 0xfffffc87
    3d2c:	7277506c 	rsbsvc	r5, r7, #108	; 0x6c
    3d30:	006c7463 	rsbeq	r7, ip, r3, ror #8
    3d34:	69546470 	ldmdbvs	r4, {r4, r5, r6, sl, sp, lr}^
    3d38:	4e00656d 	cfsh32mi	mvfx6, mvfx0, #61
    3d3c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3c08 <NOROM_RFCRfTrimRead+0x60>
    3d40:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3d44:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3d48:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3d4c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    3d50:	68747972 	ldmdavs	r4!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3d54:	00676e69 	rsbeq	r6, r7, r9, ror #28
    3d58:	6f6f4c70 	svcvs	0x006f4c70
    3d5c:	5470756b 	ldrbtpl	r7, [r0], #-1387	; 0xfffffa95
    3d60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3d64:	52647000 	rsbpl	r7, r4, #0
    3d68:	61686365 	cmnvs	r8, r5, ror #6
    3d6c:	50656772 	rsbpl	r6, r5, r2, ror r7
    3d70:	6f697265 	svcvs	0x00697265
    3d74:	6f610064 	svcvs	0x00610064
    3d78:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    3d7c:	426e6f6d 	rsbmi	r6, lr, #436	; 0x1b4
    3d80:	76007461 	strvc	r7, [r0], -r1, ror #8
    3d84:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    3d88:	536d6972 	cmnpl	sp, #1867776	; 0x1c8000
    3d8c:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3d90:	776f5000 	strbvc	r5, [pc, -r0]!
    3d94:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    3d98:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    3d9c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    3da0:	00745f73 	rsbseq	r5, r4, r3, ror pc
    3da4:	4f524f4e 	svcmi	0x00524f4e
    3da8:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3dac:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    3db0:	43445f6c 	movtmi	r5, #20332	; 0x4f6c
    3db4:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    3db8:	61746c6f 	cmnvs	r4, pc, ror #24
    3dbc:	6f436567 	svcvs	0x00436567
    3dc0:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    3dc4:	616e6f69 	cmnvs	lr, r9, ror #30
    3dc8:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    3dcc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 3c04 <NOROM_RFCRfTrimRead+0x5c>
    3dd0:	776f7000 	strbvc	r7, [pc, -r0]!
    3dd4:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    3dd8:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    3ddc:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    3de0:	52500073 	subspl	r0, r0, #115	; 0x73
    3de4:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3de8:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    3dec:	72505f54 	subsvc	r5, r0, #84, 30	; 0x150
    3df0:	6972706f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3df4:	72617465 	rsbvc	r7, r1, #1694498816	; 0x65000000
    3df8:	41500079 	cmpmi	r0, r9, ror r0
    3dfc:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3e00:	78345f45 	ldmdavc	r4!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    3e04:	48430034 	stmdami	r3, {r2, r4, r5}^
    3e08:	545f5049 	ldrbpl	r5, [pc], #-73	; 3e10 <NOROM_RFCRfTrimSet>
    3e0c:	5f455059 	svcpl	0x00455059
    3e10:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3e14:	77003034 	smladxvc	r0, r4, r0, r3
    3e18:	72656661 	rsbvc	r6, r5, #101711872	; 0x6100000
    3e1c:	46006449 	strmi	r6, [r0], -r9, asr #8
    3e20:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3e24:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3e28:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3e2c:	7a694c5f 	bvc	1a56fb0 <__ccfg+0x1a37008>
    3e30:	524f4e00 	subpl	r4, pc, #0, 28
    3e34:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3e38:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3e3c:	5f6f666e 	svcpl	0x006f666e
    3e40:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    3e44:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3e48:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    3e4c:	4f4e0079 	svcmi	0x004e0079
    3e50:	5f4d4f52 	svcpl	0x004d4f52
    3e54:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e58:	6f666e49 	svcvs	0x00666e49
    3e5c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3e60:	6b636150 	blvs	18dc3a8 <__ccfg+0x18bc400>
    3e64:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
    3e68:	00657079 	rsbeq	r7, r5, r9, ror r0
    3e6c:	4f524f4e 	svcmi	0x00524f4e
    3e70:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3e74:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3e78:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3e7c:	77487465 	strbvc	r7, [r8, -r5, ror #8]
    3e80:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    3e84:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3e88:	63617000 	cmnvs	r1, #0
    3e8c:	7079546b 	rsbsvc	r5, r9, fp, ror #8
    3e90:	68430065 	stmdavs	r3, {r0, r2, r5, r6}^
    3e94:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    3e98:	745f6570 	ldrbvc	r6, [pc], #-1392	; 3ea0 <TrimAfterColdResetWakeupFromShutDown+0x54>
    3e9c:	52774800 	rsbspl	r4, r7, #0, 16
    3ea0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    3ea4:	5f6e6f69 	svcpl	0x006e6f69
    3ea8:	48430074 	stmdami	r3, {r2, r4, r5, r6}^
    3eac:	545f5049 	ldrbpl	r5, [pc], #-73	; 3eb4 <TrimAfterColdResetWakeupFromShutDown+0x68>
    3eb0:	5f455059 	svcpl	0x00455059
    3eb4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3eb8:	43003031 	movwmi	r3, #49	; 0x31
    3ebc:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3ec0:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    3ec4:	00745f79 	rsbseq	r5, r4, r9, ror pc
    3ec8:	65527768 	ldrbvs	r7, [r2, #-1896]	; 0xfffff898
    3ecc:	48430076 	stmdami	r3, {r1, r2, r4, r5, r6}^
    3ed0:	545f5049 	ldrbpl	r5, [pc], #-73	; 3ed8 <TrimAfterColdResetWakeupFromShutDown+0x8c>
    3ed4:	5f455059 	svcpl	0x00455059
    3ed8:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3edc:	50003035 	andpl	r3, r0, r5, lsr r0
    3ee0:	414b4341 	cmpmi	fp, r1, asr #6
    3ee4:	575f4547 	ldrbpl	r4, [pc, -r7, asr #10]
    3ee8:	00505343 	subseq	r5, r0, r3, asr #6
    3eec:	6f6e696d 	svcvs	0x006e696d
    3ef0:	76655272 			; <UNDEFINED> instruction: 0x76655272
    3ef4:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3ef8:	5f594c49 	svcpl	0x00594c49
    3efc:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3f00:	525f7878 	subspl	r7, pc, #120, 16	; 0x780000
    3f04:	48430032 	stmdami	r3, {r1, r4, r5}^
    3f08:	545f5049 	ldrbpl	r5, [pc], #-73	; 3f10 <TrimAfterColdResetWakeupFromShutDown+0xc4>
    3f0c:	5f455059 	svcpl	0x00455059
    3f10:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f14:	43003035 	movwmi	r3, #53	; 0x35
    3f18:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3f1c:	5f6f666e 	svcpl	0x006f666e
    3f20:	70696843 	rsbvc	r6, r9, r3, asr #16
    3f24:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    3f28:	7349796c 	movtvc	r7, #39276	; 0x996c
    3f2c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f30:	46007878 			; <UNDEFINED> instruction: 0x46007878
    3f34:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3f38:	6e555f59 	mrcvs	15, 2, r5, cr5, cr9, {2}
    3f3c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3f40:	4843006e 	stmdami	r3, {r1, r2, r3, r5, r6}^
    3f44:	545f5049 	ldrbpl	r5, [pc], #-73	; 3f4c <NOROM_SetupTrimDevice+0x2c>
    3f48:	5f455059 	svcpl	0x00455059
    3f4c:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3f50:	66003032 			; <UNDEFINED> instruction: 0x66003032
    3f54:	31676663 	cmncc	r7, r3, ror #12
    3f58:	00766552 	rsbseq	r6, r6, r2, asr r5
    3f5c:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3f60:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    3f64:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    3f68:	68630078 	stmdavs	r3!, {r3, r4, r5, r6}^
    3f6c:	61467069 	cmpvs	r6, r9, rrx
    3f70:	5748006d 	strbpl	r0, [r8, -sp, rrx]
    3f74:	5f564552 	svcpl	0x00564552
    3f78:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3f7c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3f80:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3f84:	6f725031 	svcvs	0x00725031
    3f88:	6f636f74 	svcvs	0x00636f74
    3f8c:	7250006c 	subsvc	r0, r0, #108	; 0x6c
    3f90:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    3f94:	69426c6f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    3f98:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
    3f9c:	5f726f74 	svcpl	0x00726f74
    3fa0:	52500074 	subspl	r0, r0, #116	; 0x74
    3fa4:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3fa8:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    3fac:	45495f54 	strbmi	r5, [r9, #-3924]	; 0xfffff0ac
    3fb0:	385f4545 	ldmdacc	pc, {r0, r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    3fb4:	315f3230 	cmpcc	pc, r0, lsr r2	; <UNPREDICTABLE>
    3fb8:	00345f35 	eorseq	r5, r4, r5, lsr pc
    3fbc:	50494843 	subpl	r4, r9, r3, asr #16
    3fc0:	5059545f 	subspl	r5, r9, pc, asr r4
    3fc4:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    3fc8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3fcc:	5748006e 	strbpl	r0, [r8, -lr, rrx]
    3fd0:	5f564552 	svcpl	0x00564552
    3fd4:	00325f32 	eorseq	r5, r2, r2, lsr pc
    3fd8:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3fdc:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    3fe0:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    3fe4:	41500078 	cmpmi	r0, r8, ror r0
    3fe8:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3fec:	78375f45 	ldmdavc	r7!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    3ff0:	52500037 	subspl	r0, r0, #55	; 0x37
    3ff4:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3ff8:	555f4c4f 	ldrbpl	r4, [pc, #-3151]	; 33b1 <__pi_vfparse+0x61>
    3ffc:	6f6e6b6e 	svcvs	0x006e6b6e
    4000:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    4004:	56455257 			; <UNDEFINED> instruction: 0x56455257
    4008:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
    400c:	524f4e00 	subpl	r4, pc, #0, 28
    4010:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    4014:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    4018:	5f6f666e 	svcpl	0x006f666e
    401c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    4020:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    4024:	00657079 	rsbeq	r7, r5, r9, ror r0
    4028:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    402c:	5f325f56 	svcpl	0x00325f56
    4030:	52500031 	subspl	r0, r0, #49	; 0x31
    4034:	434f544f 	movtmi	r5, #62543	; 0xf44f
    4038:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    403c:	4c425f54 	mcrrmi	15, 5, r5, r2, cr4
    4040:	41460045 	cmpmi	r6, r5, asr #32
    4044:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    4048:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    404c:	5f787836 	svcpl	0x00787836
    4050:	00616741 	rsbeq	r6, r1, r1, asr #14
    4054:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    4058:	5f325f56 	svcpl	0x00325f56
    405c:	68630033 	stmdavs	r3!, {r0, r1, r4, r5}^
    4060:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    4064:	43006570 	movwmi	r6, #1392	; 0x570
    4068:	5f504948 	svcpl	0x00504948
    406c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    4070:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    4074:	5f4d4f54 	svcpl	0x004d4f54
    4078:	48430030 	stmdami	r3, {r4, r5}^
    407c:	545f5049 	ldrbpl	r5, [pc], #-73	; 4084 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x44>
    4080:	5f455059 	svcpl	0x00455059
    4084:	54535543 	ldrbpl	r5, [r3], #-1347	; 0xfffffabd
    4088:	315f4d4f 	cmpcc	pc, pc, asr #26
    408c:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    4090:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    4094:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    4098:	33363243 	teqcc	r6, #805306372	; 0x30000004
    409c:	57480030 	smlaldxpl	r0, r8, r0, r0
    40a0:	5f564552 	svcpl	0x00564552
    40a4:	00305f31 	eorseq	r5, r0, r1, lsr pc
    40a8:	4b434150 	blmi	10d45f0 <__ccfg+0x10b4648>
    40ac:	5f454741 	svcpl	0x00454741
    40b0:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    40b4:	006e776f 	rsbeq	r7, lr, pc, ror #14
    40b8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    40bc:	2f2e2e2f 	svccs	0x002e2e2f
    40c0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 40c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x88>
    40c4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    40c8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    40cc:	6968632f 	stmdbvs	r8!, {r0, r1, r2, r3, r5, r8, r9, sp, lr}^
    40d0:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    40d4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    40d8:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    40dc:	65735531 	ldrbvs	r5, [r3, #-1329]!	; 0xfffffacf
    40e0:	00644972 	rsbeq	r4, r4, r2, ror r9
    40e4:	70696843 	rsbvc	r6, r9, r3, asr #16
    40e8:	6f666e49 	svcvs	0x00666e49
    40ec:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    40f0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    40f4:	64496563 	strbvs	r6, [r9], #-1379	; 0xfffffa9d
    40f8:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    40fc:	646f4376 	strbtvs	r4, [pc], #-886	; 4104 <NOROM_SetupGetTrimForAnabypassValue1+0x18>
    4100:	68430065 	stmdavs	r3, {r0, r2, r5, r6}^
    4104:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    4108:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    410c:	694d7465 	stmdbvs	sp, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4110:	48726f6e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4114:	76655277 			; <UNDEFINED> instruction: 0x76655277
    4118:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    411c:	7748726f 	strbvc	r7, [r8, -pc, ror #4]
    4120:	00766552 	rsbseq	r6, r6, r2, asr r5
    4124:	4f524f4e 	svcmi	0x00524f4e
    4128:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    412c:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    4130:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    4134:	75537465 	ldrbvc	r7, [r3, #-1125]	; 0xfffffb9b
    4138:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    413c:	50646574 	rsbpl	r6, r4, r4, ror r5
    4140:	6f746f72 	svcvs	0x00746f72
    4144:	5f6c6f63 	svcpl	0x006c6f63
    4148:	50005642 	andpl	r5, r0, r2, asr #12
    414c:	414b4341 	cmpmi	fp, r1, asr #6
    4150:	575f4547 	ldrbpl	r4, [pc, -r7, asr #10]
    4154:	52454641 	subpl	r4, r5, #68157440	; 0x4100000
    4158:	43415000 	movtmi	r5, #4096	; 0x1000
    415c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    4160:	3578355f 	ldrbcc	r3, [r8, #-1375]!	; 0xfffffaa1
    4164:	63615000 	cmnvs	r1, #0
    4168:	6567616b 	strbvs	r6, [r7, #-363]!	; 0xfffffe95
    416c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    4170:	4300745f 	movwmi	r7, #1119	; 0x45f
    4174:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    4178:	5f6f666e 	svcpl	0x006f666e
    417c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    4180:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4184:	73496e6f 	movtvc	r6, #40559	; 0x9e6f
    4188:	4554475f 	ldrbmi	r4, [r4, #-1887]	; 0xfffff8a1
    418c:	5f325f51 	svcpl	0x00325f51
    4190:	68430030 	stmdavs	r3, {r4, r5}^
    4194:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    4198:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    419c:	73557465 	cmpvc	r5, #1694498816	; 0x65000000
    41a0:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    41a4:	33697500 	cmncc	r9, #0, 10
    41a8:	67655232 			; <UNDEFINED> instruction: 0x67655232
    41ac:	524f4e00 	subpl	r4, pc, #0, 28
    41b0:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 41b8 <NOROM_SetupGetTrimForAmpcompCtrl+0x34>
    41b4:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    41b8:	66746942 	ldrbtvs	r6, [r4], -r2, asr #18
    41bc:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    41c0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    41c4:	64416e00 	strbvs	r6, [r1], #-3584	; 0xfffff200
    41c8:	4e007264 	cdpmi	2, 0, cr7, cr0, cr4, {3}
    41cc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 4098 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x58>
    41d0:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    41d4:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    41d8:	61655274 	smcvs	21796	; 0x5524
    41dc:	526e0064 	rsbpl	r0, lr, #100	; 0x64
    41e0:	41007465 	tstmi	r0, r5, ror #8
    41e4:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    41e8:	69644469 	stmdbvs	r4!, {r0, r3, r5, r6, sl, lr}^
    41ec:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    41f0:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    41f4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    41f8:	61443631 	cmpvs	r4, r1, lsr r6
    41fc:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    4200:	57323369 	ldrpl	r3, [r2, -r9, ror #6]!
    4204:	74614472 	strbtvc	r4, [r1], #-1138	; 0xfffffb8e
    4208:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    420c:	61443233 	cmpvs	r4, r3, lsr r2
    4210:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    4214:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    4218:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    421c:	524f4e00 	subpl	r4, pc, #0, 28
    4220:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 4228 <NOROM_SetupGetTrimForXoscHfCtl+0x4>
    4224:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    4228:	66746942 	ldrbtvs	r6, [r4], -r2, asr #18
    422c:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    4230:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    4234:	446e0065 	strbtmi	r0, [lr], #-101	; 0xffffff9b
    4238:	00617461 	rsbeq	r7, r1, r1, ror #8
    423c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    4240:	006c6156 	rsbeq	r6, ip, r6, asr r1
    4244:	41787541 	cmnmi	r8, r1, asr #10
    4248:	64446964 	strbvs	r6, [r4], #-2404	; 0xfffff69c
    424c:	66615369 	strbtvs	r5, [r1], -r9, ror #6
    4250:	61655265 	cmnvs	r5, r5, ror #4
    4254:	4f4e0064 	svcmi	0x004e0064
    4258:	5f4d4f52 	svcpl	0x004d4f52
    425c:	31494444 	cmpcc	r9, r4, asr #8
    4260:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    4264:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    4268:	2f2e0065 	svccs	0x002e0065
    426c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4270:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4274:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4278:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    427c:	642f6269 	strtvs	r6, [pc], #-617	; 4284 <NOROM_SetupGetTrimForRadcExtCfg+0x28>
    4280:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    4284:	33697500 	cmncc	r9, #0, 10
    4288:	67655232 			; <UNDEFINED> instruction: 0x67655232
    428c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4290:	69536e00 	ldmdbvs	r3, {r9, sl, fp, sp, lr}^
    4294:	5f00657a 	svcpl	0x0000657a
    4298:	756e5f43 	strbvc	r5, [lr, #-3907]!	; 0xfffff0bd
    429c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    42a0:	6f6c5f63 	svcvs	0x006c5f63
    42a4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    42a8:	72756300 	rsbsvc	r6, r5, #0, 6
    42ac:	636e6572 	cmnvs	lr, #478150656	; 0x1c800000
    42b0:	79735f79 	ldmdbvc	r3!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    42b4:	6c6f626d 	sfmvs	f6, 2, [pc], #-436	; 4108 <NOROM_SetupGetTrimForAnabypassValue1+0x1c>
    42b8:	79746300 	ldmdbvc	r4!, {r8, r9, sp, lr}^
    42bc:	705f6570 	subsvc	r6, pc, r0, ror r5	; <UNPREDICTABLE>
    42c0:	64007274 	strvs	r7, [r0], #-628	; 0xfffffd8c
    42c4:	00307473 	eorseq	r7, r0, r3, ror r4
    42c8:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    42cc:	5f64656e 	svcpl	0x0064656e
    42d0:	00747364 	rsbseq	r7, r4, r4, ror #6
    42d4:	5f746e69 	svcpl	0x00746e69
    42d8:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    42dc:	79625f70 	stmdbvc	r2!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    42e0:	6170735f 	cmnvs	r0, pc, asr r3
    42e4:	6c006563 	cfstr32vs	mvfx6, [r0], {99}	; 0x63
    42e8:	766e6f63 	strbtvc	r6, [lr], -r3, ror #30
    42ec:	6b6a6300 	blvs	1a9cef4 <__ccfg+0x1a7cf4c>
    42f0:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    42f4:	636c0067 	cmnvs	ip, #103	; 0x67
    42f8:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    42fc:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    4300:	5f00545f 	svcpl	0x0000545f
    4304:	69745f43 	ldmdbvs	r4!, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    4308:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
    430c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4310:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    4314:	75635f74 	strbvc	r5, [r3, #-3956]!	; 0xfffff08c
    4318:	735f7272 	cmpvc	pc, #536870919	; 0x20000007
    431c:	6f626d79 	svcvs	0x00626d79
    4320:	636c006c 	cmnvs	ip, #108	; 0x6c
    4324:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    4328:	00545f65 	subseq	r5, r4, r5, ror #30
    432c:	5f746c61 	svcpl	0x00746c61
    4330:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    4334:	5f007374 	svcpl	0x00007374
    4338:	74635f43 	strbtvc	r5, [r3], #-3907	; 0xfffff0bd
    433c:	5f657079 	svcpl	0x00657079
    4340:	61636f6c 	cmnvs	r3, ip, ror #30
    4344:	6100656c 	tstvs	r0, ip, ror #10
    4348:	6d705f6d 	ldclvs	15, cr5, [r0, #-436]!	; 0xfffffe4c
    434c:	61726500 	cmnvs	r2, r0, lsl #10
    4350:	745f645f 	ldrbvc	r6, [pc], #-1119	; 4358 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xa8>
    4354:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    4358:	736f6e00 	cmnvc	pc, #0, 28
    435c:	6c007274 	sfmvs	f7, 4, [r0], {116}	; 0x74
    4360:	6f6d5f63 	svcvs	0x006d5f63
    4364:	6174656e 	cmnvs	r4, lr, ror #10
    4368:	545f7972 	ldrbpl	r7, [pc], #-2418	; 4370 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc0>
    436c:	73656d00 	cmnvc	r5, #0, 26
    4370:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4374:	646f635f 	strbtvs	r6, [pc], #-863	; 437c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xcc>
    4378:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    437c:	74626d00 	strbtvc	r6, [r2], #-3328	; 0xfffff300
    4380:	0063776f 	rsbeq	r7, r3, pc, ror #14
    4384:	6d5f435f 	ldclvs	3, cr4, [pc, #-380]	; 4210 <NOROM_SetupGetTrimForAdcShVbufEn>
    4388:	61737365 	cmnvs	r3, r5, ror #6
    438c:	5f736567 	svcpl	0x00736567
    4390:	61636f6c 	cmnvs	r3, ip, ror #30
    4394:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    4398:	705f746e 	subsvc	r7, pc, lr, ror #8
    439c:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    43a0:	6f705f6e 	svcvs	0x00705f6e
    43a4:	6d006e73 	stcvs	14, cr6, [r0, #-460]	; 0xfffffe34
    43a8:	675f6e6f 	ldrbvs	r6, [pc, -pc, ror #28]
    43ac:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    43b0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    43b4:	6d665f58 	stclvs	15, cr5, [r6, #-352]!	; 0xfffffea0
    43b8:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    43bc:	5f705f74 	svcpl	0x00705f74
    43c0:	705f7363 	subsvc	r7, pc, r3, ror #6
    43c4:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    43c8:	00736564 	rsbseq	r6, r3, r4, ror #10
    43cc:	5f6e6f6d 	svcpl	0x006e6f6d
    43d0:	69636564 	stmdbvs	r3!, {r2, r5, r6, r8, sl, sp, lr}^
    43d4:	5f6c616d 	svcpl	0x006c616d
    43d8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    43dc:	5f630074 	svcpl	0x00630074
    43e0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    43e4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    43e8:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    43ec:	67656e00 	strbvs	r6, [r5, -r0, lsl #28]!
    43f0:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    43f4:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    43f8:	6d006e67 	stcvs	14, cr6, [r0, #-412]	; 0xfffffe64
    43fc:	75635f62 	strbvc	r5, [r3, #-3938]!	; 0xfffff09e
    4400:	616d5f72 	smcvs	54770	; 0xd5f2
    4404:	63770078 	cmnvs	r7, #120	; 0x78
    4408:	5f726168 	svcpl	0x00726168
    440c:	6f700074 	svcvs	0x00700074
    4410:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4414:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
    4418:	006e6769 	rsbeq	r6, lr, r9, ror #14
    441c:	70797463 	rsbsvc	r7, r9, r3, ror #8
    4420:	6f635f65 	svcvs	0x00635f65
    4424:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
    4428:	6f6c0074 	svcvs	0x006c0074
    442c:	6420676e 	strtvs	r6, [r0], #-1902	; 0xfffff892
    4430:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    4434:	6f6e0065 	svcvs	0x006e0065
    4438:	72707865 	rsbsvc	r7, r0, #6619136	; 0x650000
    443c:	665f7800 	ldrbvs	r7, [pc], -r0, lsl #16
    4440:	7300746d 	movwvc	r7, #1133	; 0x46d
    4444:	706f6275 	rsbvc	r6, pc, r5, ror r2	; <UNPREDICTABLE>
    4448:	67726174 			; <UNDEFINED> instruction: 0x67726174
    444c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4450:	735f705f 	cmpvc	pc, #95	; 0x5f
    4454:	625f7065 	subsvs	r7, pc, #101	; 0x65
    4458:	70735f79 	rsbsvc	r5, r3, r9, ror pc
    445c:	00656361 	rsbeq	r6, r5, r1, ror #6
    4460:	5f746e69 	svcpl	0x00746e69
    4464:	73635f6e 	cmnvc	r3, #440	; 0x1b8
    4468:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    446c:	65646563 	strbvs	r6, [r4, #-1379]!	; 0xfffffa9d
    4470:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    4474:	2f2e2e2f 	svccs	0x002e2e2f
    4478:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    447c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4480:	2f2e2e2f 	svccs	0x002e2e2f
    4484:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4488:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    448c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4490:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4494:	616d2f63 	cmnvs	sp, r3, ror #30
    4498:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    449c:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    44a0:	656d2f6d 	strbvs	r2, [sp, #-3949]!	; 0xfffff093
    44a4:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    44a8:	7574732d 	ldrbvc	r7, [r4, #-813]!	; 0xfffffcd3
    44ac:	00632e62 	rsbeq	r2, r3, r2, ror #28
    44b0:	6f5f646d 	svcvs	0x005f646d
    44b4:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
    44b8:	73657900 	cmnvc	r5, #0, 18
    44bc:	00727473 	rsbseq	r7, r2, r3, ror r4
    44c0:	65736579 	ldrbvs	r6, [r3, #-1401]!	; 0xfffffa87
    44c4:	00727078 	rsbseq	r7, r2, r8, ror r0
    44c8:	5f617265 	svcpl	0x00617265
    44cc:	6d665f64 	stclvs	15, cr5, [r6, #-400]!	; 0xfffffe70
    44d0:	636c0074 	cmnvs	ip, #116	; 0x74
    44d4:	7974635f 	ldmdbvc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    44d8:	545f6570 	ldrbpl	r6, [pc], #-1392	; 44e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x94>
    44dc:	61726500 	cmnvs	r2, r0, lsl #10
    44e0:	665f745f 			; <UNDEFINED> instruction: 0x665f745f
    44e4:	7700746d 	strvc	r7, [r0, -sp, ror #8]
    44e8:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 4364 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xb4>
    44ec:	6f6d0062 	svcvs	0x006d0062
    44f0:	68745f6e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    44f4:	6173756f 	cmnvs	r3, pc, ror #10
    44f8:	5f73646e 	svcpl	0x0073646e
    44fc:	00706573 	rsbseq	r6, r0, r3, ror r5
    4500:	6d706d61 	ldclvs	13, cr6, [r0, #-388]!	; 0xfffffe7c
    4504:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    4508:	5f636c00 	svcpl	0x00636c00
    450c:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    4510:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    4514:	7700545f 	smlsdvc	r0, pc, r4, r5	; <UNPREDICTABLE>
    4518:	646b6565 	strbtvs	r6, [fp], #-1381	; 0xfffffa9b
    451c:	5f007961 	svcpl	0x00007961
    4520:	6f6d5f43 	svcvs	0x006d5f43
    4524:	6174656e 	cmnvs	r4, lr, ror #10
    4528:	6c5f7972 	mrrcvs	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
    452c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4530:	61630065 	cmnvs	r3, r5, rrx
    4534:	6f676574 	svcvs	0x00676574
    4538:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    453c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4540:	735f6e5f 	cmpvc	pc, #1520	; 0x5f0
    4544:	5f6e6769 	svcpl	0x006e6769
    4548:	6e736f70 	mrcvs	15, 3, r6, cr3, cr0, {3}
    454c:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    4550:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    4554:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
    4558:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    455c:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
    4560:	332e3820 			; <UNDEFINED> instruction: 0x332e3820
    4564:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
    4568:	30393130 	eorscc	r3, r9, r0, lsr r1
    456c:	20333037 	eorscs	r3, r3, r7, lsr r0
    4570:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    4574:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    4578:	675b2029 	ldrbvs	r2, [fp, -r9, lsr #32]
    457c:	382d6363 	stmdacc	sp!, {r0, r1, r5, r6, r8, r9, sp, lr}
    4580:	6172622d 	cmnvs	r2, sp, lsr #4
    4584:	2068636e 	rsbcs	r6, r8, lr, ror #6
    4588:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    458c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    4590:	33373220 	teqcc	r7, #32, 4
    4594:	5d373230 	lfmpl	f3, 4, [r7, #-192]!	; 0xffffff40
    4598:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
    459c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    45a0:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
    45a4:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
    45a8:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
    45ac:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    45b0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    45b4:	616f6c66 	cmnvs	pc, r6, ror #24
    45b8:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    45bc:	6f733d69 	svcvs	0x00733d69
    45c0:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    45c4:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    45c8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    45cc:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    45d0:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    45d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    45d8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    45dc:	20743476 	rsbscs	r3, r4, r6, ror r4
    45e0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    45e4:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    45e8:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 4458 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc>
    45ec:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    45f0:	006e6974 	rsbeq	r6, lr, r4, ror r9
    45f4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    45f8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    45fc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4600:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    4604:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    4608:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    460c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4610:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    4614:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    4618:	2f646c69 	svccs	0x00646c69
    461c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4620:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4624:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4628:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    462c:	2f626d75 	svccs	0x00626d75
    4630:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    4634:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4638:	2f62696c 	svccs	0x0062696c
    463c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4640:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    4644:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    4648:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    464c:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    4650:	6e690030 	mcrvs	0, 3, r0, cr9, cr0, {1}
    4654:	72665f74 	rsbvc	r5, r6, #116, 30	; 0x1d0
    4658:	645f6361 	ldrbvs	r6, [pc], #-865	; 4660 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc4>
    465c:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    4660:	72730073 	rsbsvc	r0, r3, #115	; 0x73
    4664:	61003063 	tstvs	r0, r3, rrx
    4668:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 44c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x74>
    466c:	68746e6f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4670:	2f2e2e00 	svccs	0x002e2e00
    4674:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4678:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    467c:	2f2e2e2f 	svccs	0x002e2e2f
    4680:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4684:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4688:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    468c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4690:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    4694:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    4698:	6e61722f 	cdpvs	2, 6, cr7, cr1, cr15, {1}
    469c:	00632e64 	rsbeq	r2, r3, r4, ror #28
    46a0:	6e617273 	mcrvs	2, 3, r7, cr1, cr3, {3}
    46a4:	622f0064 	eorvs	r0, pc, #100	; 0x64
    46a8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    46ac:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46b0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    46b4:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    46b8:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    46bc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46c0:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    46c4:	2f302e33 	svccs	0x00302e33
    46c8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    46cc:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    46d0:	6f6e2d6d 	svcvs	0x006e2d6d
    46d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    46d8:	2f696261 	svccs	0x00696261
    46dc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    46e0:	6f6e2f62 	svcvs	0x006e2f62
    46e4:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    46e8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46ec:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    46f0:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    46f4:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    46f8:	622f0062 	eorvs	r0, pc, #98	; 0x62
    46fc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4700:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4704:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4708:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    470c:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    4710:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4714:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    4718:	2f302e33 	svccs	0x00302e33
    471c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4720:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    4724:	6f6e2d6d 	svcvs	0x006e2d6d
    4728:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    472c:	2f696261 	svccs	0x00696261
    4730:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4734:	6f6e2f62 	svcvs	0x006e2f62
    4738:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    473c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4740:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4744:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    4748:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    474c:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    4750:	5f657275 	svcpl	0x00657275
    4754:	61746164 	cmnvs	r4, r4, ror #2
    4758:	2f2e2e00 	svccs	0x002e2e00
    475c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4760:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4764:	2f2e2e2f 	svccs	0x002e2e2f
    4768:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    476c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4770:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4774:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4778:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    477c:	2f746e65 	svccs	0x00746e65
    4780:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    4784:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
    4788:	52415400 	subpl	r5, r1, #0, 8
    478c:	5f544547 	svcpl	0x00544547
    4790:	5f555043 	svcpl	0x00555043
    4794:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4798:	31617865 	cmncc	r1, r5, ror #16
    479c:	726f6337 	rsbvc	r6, pc, #-603979776	; 0xdc000000
    47a0:	61786574 	cmnvs	r8, r4, ror r5
    47a4:	73690037 	cmnvc	r9, #55	; 0x37
    47a8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    47ac:	70665f74 	rsbvc	r5, r6, r4, ror pc
    47b0:	6c62645f 	cfstrdvs	mvd6, [r2], #-380	; 0xfffffe84
    47b4:	6d726100 	ldfvse	f6, [r2, #-0]
    47b8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    47bc:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    47c0:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    47c4:	52415400 	subpl	r5, r1, #0, 8
    47c8:	5f544547 	svcpl	0x00544547
    47cc:	5f555043 	svcpl	0x00555043
    47d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    47d4:	326d7865 	rsbcc	r7, sp, #6619136	; 0x650000
    47d8:	52410033 	subpl	r0, r1, #51	; 0x33
    47dc:	51455f4d 	cmppl	r5, sp, asr #30
    47e0:	52415400 	subpl	r5, r1, #0, 8
    47e4:	5f544547 	svcpl	0x00544547
    47e8:	5f555043 	svcpl	0x00555043
    47ec:	316d7261 	cmncc	sp, r1, ror #4
    47f0:	74363531 	ldrtvc	r3, [r6], #-1329	; 0xfffffacf
    47f4:	00736632 	rsbseq	r6, r3, r2, lsr r6
    47f8:	5f617369 	svcpl	0x00617369
    47fc:	5f746962 	svcpl	0x00746962
    4800:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4804:	41540062 	cmpmi	r4, r2, rrx
    4808:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    480c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4810:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4814:	61786574 	cmnvs	r8, r4, ror r5
    4818:	6f633735 	svcvs	0x00633735
    481c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4820:	00333561 	eorseq	r3, r3, r1, ror #10
    4824:	756d5f5f 	strbvc	r5, [sp, #-3935]!	; 0xfffff0a1
    4828:	3369646c 	cmncc	r9, #108, 8	; 0x6c000000
    482c:	53414200 	movtpl	r4, #4608	; 0x1200
    4830:	52415f45 	subpl	r5, r1, #276	; 0x114
    4834:	385f4843 	ldmdacc	pc, {r0, r1, r6, fp, lr}^	; <UNPREDICTABLE>
    4838:	41425f4d 	cmpmi	r2, sp, asr #30
    483c:	54004553 	strpl	r4, [r0], #-1363	; 0xfffffaad
    4840:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4844:	50435f54 	subpl	r5, r3, r4, asr pc
    4848:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    484c:	3031386d 	eorscc	r3, r1, sp, ror #16
    4850:	52415400 	subpl	r5, r1, #0, 8
    4854:	5f544547 	svcpl	0x00544547
    4858:	5f555043 	svcpl	0x00555043
    485c:	6e656778 	mcrvs	7, 3, r6, cr5, cr8, {3}
    4860:	41003165 	tstmi	r0, r5, ror #2
    4864:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4868:	415f5343 	cmpmi	pc, r3, asr #6
    486c:	53435041 	movtpl	r5, #12353	; 0x3041
    4870:	4d57495f 	vldrmi.16	s9, [r7, #-190]	; 0xffffff42	; <UNPREDICTABLE>
    4874:	0054584d 	subseq	r5, r4, sp, asr #16
    4878:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    487c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4880:	00305f48 	eorseq	r5, r0, r8, asr #30
    4884:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4888:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    488c:	00325f48 	eorseq	r5, r2, r8, asr #30
    4890:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4894:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4898:	00335f48 	eorseq	r5, r3, r8, asr #30
    489c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    48a0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    48a4:	00345f48 	eorseq	r5, r4, r8, asr #30
    48a8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    48ac:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    48b0:	00365f48 	eorseq	r5, r6, r8, asr #30
    48b4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    48b8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    48bc:	00375f48 	eorseq	r5, r7, r8, asr #30
    48c0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    48c4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    48c8:	785f5550 	ldmdavc	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    48cc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    48d0:	69680065 	stmdbvs	r8!, {r0, r2, r5, r6}^
    48d4:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    48d8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    48dc:	705f7469 	subsvc	r7, pc, r9, ror #8
    48e0:	72646572 	rsbvc	r6, r4, #478150656	; 0x1c800000
    48e4:	54007365 	strpl	r7, [r0], #-869	; 0xfffffc9b
    48e8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    48ec:	50435f54 	subpl	r5, r3, r4, asr pc
    48f0:	6f635f55 	svcvs	0x00635f55
    48f4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    48f8:	0033336d 	eorseq	r3, r3, sp, ror #6
    48fc:	74495355 	strbvc	r5, [r9], #-853	; 0xfffffcab
    4900:	00657079 	rsbeq	r7, r5, r9, ror r0
    4904:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4908:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    490c:	2f2e2e2f 	svccs	0x002e2e2f
    4910:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4860 <NOROM_ChipInfo_GetChipFamily+0x2c>
    4914:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    4918:	696c2f63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    491c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4920:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    4924:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4928:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    492c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4930:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4934:	00696d64 	rsbeq	r6, r9, r4, ror #26
    4938:	5f617369 	svcpl	0x00617369
    493c:	69626f6e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4940:	41540074 	cmpmi	r4, r4, ror r0
    4944:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4948:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    494c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4950:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4954:	73667a6a 	cmnvc	r6, #434176	; 0x6a000
    4958:	61736900 	cmnvs	r3, r0, lsl #18
    495c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4960:	7066765f 	rsbvc	r7, r6, pc, asr r6
    4964:	41003276 	tstmi	r0, r6, ror r2
    4968:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    496c:	555f5343 	ldrbpl	r5, [pc, #-835]	; 4631 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x95>
    4970:	4f4e4b4e 	svcmi	0x004e4b4e
    4974:	54004e57 	strpl	r4, [r0], #-3671	; 0xfffff1a9
    4978:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    497c:	50435f54 	subpl	r5, r3, r4, asr pc
    4980:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4984:	0065396d 	rsbeq	r3, r5, sp, ror #18
    4988:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    498c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4990:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4994:	61004a45 	tstvs	r0, r5, asr #20
    4998:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    499c:	6d736663 	ldclvs	6, cr6, [r3, #-396]!	; 0xfffffe74
    49a0:	6174735f 	cmnvs	r4, pc, asr r3
    49a4:	61006574 	tstvs	r0, r4, ror r5
    49a8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    49ac:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    49b0:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    49b4:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    49b8:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    49bc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    49c0:	73690073 	cmnvc	r9, #115	; 0x73
    49c4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    49c8:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    49cc:	5f5f0063 	svcpl	0x005f0063
    49d0:	5f7a6c63 	svcpl	0x007a6c63
    49d4:	00626174 	rsbeq	r6, r2, r4, ror r1
    49d8:	5f4d5241 	svcpl	0x004d5241
    49dc:	61004356 	tstvs	r0, r6, asr r3
    49e0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    49e4:	5f686372 	svcpl	0x00686372
    49e8:	61637378 	smcvs	14136	; 0x3738
    49ec:	4100656c 	tstmi	r0, ip, ror #10
    49f0:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    49f4:	57440045 	strbpl	r0, [r4, -r5, asr #32]
    49f8:	6f696e75 	svcvs	0x00696e75
    49fc:	5241006e 	subpl	r0, r1, #110	; 0x6e
    4a00:	53565f4d 	cmppl	r6, #308	; 0x134
    4a04:	4d524100 	ldfmie	f4, [r2, #-0]
    4a08:	0045475f 	subeq	r4, r5, pc, asr r7
    4a0c:	5f6d7261 	svcpl	0x006d7261
    4a10:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4a14:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    4a18:	61676e6f 	cmnvs	r7, pc, ror #28
    4a1c:	63006d72 	movwvs	r6, #3442	; 0xd72
    4a20:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    4a24:	66207865 	strtvs	r7, [r0], -r5, ror #16
    4a28:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    4a2c:	52415400 	subpl	r5, r1, #0, 8
    4a30:	5f544547 	svcpl	0x00544547
    4a34:	5f555043 	svcpl	0x00555043
    4a38:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a3c:	31617865 	cmncc	r1, r5, ror #16
    4a40:	41540035 	cmpmi	r4, r5, lsr r0
    4a44:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a48:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a4c:	3761665f 			; <UNDEFINED> instruction: 0x3761665f
    4a50:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    4a54:	52415400 	subpl	r5, r1, #0, 8
    4a58:	5f544547 	svcpl	0x00544547
    4a5c:	5f555043 	svcpl	0x00555043
    4a60:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a64:	31617865 	cmncc	r1, r5, ror #16
    4a68:	52410037 	subpl	r0, r1, #55	; 0x37
    4a6c:	54475f4d 	strbpl	r5, [r7], #-3917	; 0xfffff0b3
    4a70:	52415400 	subpl	r5, r1, #0, 8
    4a74:	5f544547 	svcpl	0x00544547
    4a78:	5f555043 	svcpl	0x00555043
    4a7c:	766f656e 	strbtvc	r6, [pc], -lr, ror #10
    4a80:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
    4a84:	5400316e 	strpl	r3, [r0], #-366	; 0xfffffe92
    4a88:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a8c:	50435f54 	subpl	r5, r3, r4, asr pc
    4a90:	6f635f55 	svcvs	0x00635f55
    4a94:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a98:	00663472 	rsbeq	r3, r6, r2, ror r4
    4a9c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4aa0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4aa4:	45375f48 	ldrmi	r5, [r7, #-3912]!	; 0xfffff0b8
    4aa8:	4e47004d 	cdpmi	0, 4, cr0, cr7, cr13, {2}
    4aac:	31432055 	qdaddcc	r2, r5, r3
    4ab0:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
    4ab4:	20312e32 	eorscs	r2, r1, r2, lsr lr
    4ab8:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    4abc:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
    4ac0:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    4ac4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4ac8:	5b202965 	blpl	80f064 <__ccfg+0x7ef0bc>
    4acc:	2f4d5241 	svccs	0x004d5241
    4ad0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4ad4:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    4ad8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    4adc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    4ae0:	6f697369 	svcvs	0x00697369
    4ae4:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    4ae8:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    4aec:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    4af0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4af4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    4af8:	616f6c66 	cmnvs	pc, r6, ror #24
    4afc:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    4b00:	6f733d69 	svcvs	0x00733d69
    4b04:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    4b08:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    4b0c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4b10:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    4b14:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    4b18:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4b1c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4b20:	20743476 	rsbscs	r3, r4, r6, ror r4
    4b24:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    4b28:	672d2067 	strvs	r2, [sp, -r7, rrx]!
    4b2c:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b30:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b34:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b38:	62662d20 	rsbvs	r2, r6, #32, 26	; 0x800
    4b3c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4b40:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	; 0xfffffe5c
    4b44:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    4b48:	2d206363 	stccs	3, cr6, [r0, #-396]!	; 0xfffffe74
    4b4c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 49bc <memcpy+0x88>
    4b50:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    4b54:	72702d6b 	rsbsvc	r2, r0, #6848	; 0x1ac0
    4b58:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    4b5c:	20726f74 	rsbscs	r6, r2, r4, ror pc
    4b60:	6f6e662d 	svcvs	0x006e662d
    4b64:	6c6e692d 			; <UNDEFINED> instruction: 0x6c6e692d
    4b68:	20656e69 	rsbcs	r6, r5, r9, ror #28
    4b6c:	6976662d 	ldmdbvs	r6!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    4b70:	69626973 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4b74:	7974696c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4b78:	6469683d 	strbtvs	r6, [r9], #-2109	; 0xfffff7c3
    4b7c:	006e6564 	rsbeq	r6, lr, r4, ror #10
    4b80:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4b84:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4b88:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4b8c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4b90:	32316178 	eorscc	r6, r1, #120, 2
    4b94:	73616800 	cmnvc	r1, #0, 16
    4b98:	6c617668 	stclvs	6, cr7, [r1], #-416	; 0xfffffe60
    4b9c:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
    4ba0:	5f455341 	svcpl	0x00455341
    4ba4:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4ba8:	5a4b365f 	bpl	12d252c <__ccfg+0x12b2584>
    4bac:	61736900 	cmnvs	r3, r0, lsl #18
    4bb0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4bb4:	72610073 	rsbvc	r0, r1, #115	; 0x73
    4bb8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4bbc:	615f6863 	cmpvs	pc, r3, ror #16
    4bc0:	685f6d72 	ldmdavs	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    4bc4:	76696477 			; <UNDEFINED> instruction: 0x76696477
    4bc8:	6d726100 	ldfvse	f6, [r2, #-0]
    4bcc:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4bd0:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    4bd4:	73690063 	cmnvc	r9, #99	; 0x63
    4bd8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4bdc:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4be0:	41003631 	tstmi	r0, r1, lsr r6
    4be4:	485f4d52 	ldmdami	pc, {r1, r4, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    4be8:	73690049 	cmnvc	r9, #73	; 0x49
    4bec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4bf0:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
    4bf4:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
    4bf8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4bfc:	50435f54 	subpl	r5, r3, r4, asr pc
    4c00:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4c04:	3331316d 	teqcc	r1, #1073741851	; 0x4000001b
    4c08:	00736a36 	rsbseq	r6, r3, r6, lsr sl
    4c0c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c10:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c14:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4c18:	00386d72 	eorseq	r6, r8, r2, ror sp
    4c1c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c20:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c24:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4c28:	00396d72 	eorseq	r6, r9, r2, ror sp
    4c2c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c30:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c34:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4c38:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    4c3c:	6d726100 	ldfvse	f6, [r2, #-0]
    4c40:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4c44:	6d635f68 	stclvs	15, cr5, [r3, #-416]!	; 0xfffffe60
    4c48:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    4c4c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c50:	50435f54 	subpl	r5, r3, r4, asr pc
    4c54:	6f635f55 	svcvs	0x00635f55
    4c58:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c5c:	5400346d 	strpl	r3, [r0], #-1133	; 0xfffffb93
    4c60:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c64:	50435f54 	subpl	r5, r3, r4, asr pc
    4c68:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4c6c:	6530316d 	ldrvs	r3, [r0, #-365]!	; 0xfffffe93
    4c70:	52415400 	subpl	r5, r1, #0, 8
    4c74:	5f544547 	svcpl	0x00544547
    4c78:	5f555043 	svcpl	0x00555043
    4c7c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c80:	376d7865 	strbcc	r7, [sp, -r5, ror #16]!
    4c84:	6d726100 	ldfvse	f6, [r2, #-0]
    4c88:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    4c8c:	6f635f64 	svcvs	0x00635f64
    4c90:	41006564 	tstmi	r0, r4, ror #10
    4c94:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4c98:	415f5343 	cmpmi	pc, r3, asr #6
    4c9c:	53435041 	movtpl	r5, #12353	; 0x3041
    4ca0:	61736900 	cmnvs	r3, r0, lsl #18
    4ca4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4ca8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4cac:	325f3876 	subscc	r3, pc, #7733248	; 0x760000
    4cb0:	53414200 	movtpl	r4, #4608	; 0x1200
    4cb4:	52415f45 	subpl	r5, r1, #276	; 0x114
    4cb8:	335f4843 	cmpcc	pc, #4390912	; 0x430000
    4cbc:	4154004d 	cmpmi	r4, sp, asr #32
    4cc0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4cc4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4cc8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4ccc:	74303137 	ldrtvc	r3, [r0], #-311	; 0xfffffec9
    4cd0:	6d726100 	ldfvse	f6, [r2, #-0]
    4cd4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4cd8:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    4cdc:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    4ce0:	73690032 	cmnvc	r9, #50	; 0x32
    4ce4:	756e5f61 	strbvc	r5, [lr, #-3937]!	; 0xfffff09f
    4ce8:	69625f6d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4cec:	54007374 	strpl	r7, [r0], #-884	; 0xfffffc8c
    4cf0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4cf4:	50435f54 	subpl	r5, r3, r4, asr pc
    4cf8:	6f635f55 	svcvs	0x00635f55
    4cfc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4d00:	6c70306d 	ldclvs	0, cr3, [r0], #-436	; 0xfffffe4c
    4d04:	6d737375 	ldclvs	3, cr7, [r3, #-468]!	; 0xfffffe2c
    4d08:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4d0c:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4d10:	00796c70 	rsbseq	r6, r9, r0, ror ip
    4d14:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d18:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d1c:	655f5550 	ldrbvs	r5, [pc, #-1360]	; 47d4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x18>
    4d20:	6f6e7978 	svcvs	0x006e7978
    4d24:	00316d73 	eorseq	r6, r1, r3, ror sp
    4d28:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d2c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d30:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4d34:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4d38:	32357278 	eorscc	r7, r5, #120, 4	; 0x80000007
    4d3c:	61736900 	cmnvs	r3, r0, lsl #18
    4d40:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4d44:	6964745f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    4d48:	72700076 	rsbsvc	r0, r0, #118	; 0x76
    4d4c:	72656665 	rsbvc	r6, r5, #105906176	; 0x6500000
    4d50:	6f656e5f 	svcvs	0x00656e5f
    4d54:	6f665f6e 	svcvs	0x00665f6e
    4d58:	34365f72 	ldrtcc	r5, [r6], #-3954	; 0xfffff08e
    4d5c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    4d60:	61736900 	cmnvs	r3, r0, lsl #18
    4d64:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4d68:	3170665f 	cmncc	r0, pc, asr r6
    4d6c:	6c6d6636 	stclvs	6, cr6, [sp], #-216	; 0xffffff28
    4d70:	52415400 	subpl	r5, r1, #0, 8
    4d74:	5f544547 	svcpl	0x00544547
    4d78:	5f555043 	svcpl	0x00555043
    4d7c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4d80:	33617865 	cmncc	r1, #6619136	; 0x650000
    4d84:	41540032 	cmpmi	r4, r2, lsr r0
    4d88:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d8c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d90:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4d94:	61786574 	cmnvs	r8, r4, ror r5
    4d98:	69003533 	stmdbvs	r0, {r0, r1, r4, r5, r8, sl, ip, sp}
    4d9c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4da0:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4da4:	63363170 	teqvs	r6, #112, 2
    4da8:	00766e6f 	rsbseq	r6, r6, pc, ror #28
    4dac:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    4db0:	5f766365 	svcpl	0x00766365
    4db4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4db8:	0073676e 	rsbseq	r6, r3, lr, ror #14
    4dbc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4dc0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4dc4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4dc8:	31316d72 	teqcc	r1, r2, ror sp
    4dcc:	32743635 	rsbscc	r3, r4, #55574528	; 0x3500000
    4dd0:	41540073 	cmpmi	r4, r3, ror r0
    4dd4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4dd8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4ddc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4de0:	61786574 	cmnvs	r8, r4, ror r5
    4de4:	6f633537 	svcvs	0x00633537
    4de8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4dec:	00353561 	eorseq	r3, r5, r1, ror #10
    4df0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4df4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4df8:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4dfc:	36303661 	ldrtcc	r3, [r0], -r1, ror #12
    4e00:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4e04:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4e08:	50435f54 	subpl	r5, r3, r4, asr pc
    4e0c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4e10:	3632396d 	ldrtcc	r3, [r2], -sp, ror #18
    4e14:	00736a65 	rsbseq	r6, r3, r5, ror #20
    4e18:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4e1c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4e20:	54345f48 	ldrtpl	r5, [r4], #-3912	; 0xfffff0b8
    4e24:	61736900 	cmnvs	r3, r0, lsl #18
    4e28:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4e2c:	7972635f 	ldmdbvc	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    4e30:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
    4e34:	5f6d7261 	svcpl	0x006d7261
    4e38:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    4e3c:	5f6e695f 	svcpl	0x006e695f
    4e40:	75716573 	ldrbvc	r6, [r1, #-1395]!	; 0xfffffa8d
    4e44:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xfffff19b
    4e48:	61736900 	cmnvs	r3, r0, lsl #18
    4e4c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4e50:	0062735f 	rsbeq	r7, r2, pc, asr r3
    4e54:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4e58:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4e5c:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4e60:	73690045 	cmnvc	r9, #69	; 0x45
    4e64:	65665f61 	strbvs	r5, [r6, #-3937]!	; 0xfffff09f
    4e68:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    4e6c:	73690065 	cmnvc	r9, #101	; 0x65
    4e70:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e74:	6d735f74 	ldclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    4e78:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4e7c:	61006c75 	tstvs	r0, r5, ror ip
    4e80:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    4e84:	5f676e61 	svcpl	0x00676e61
    4e88:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    4e8c:	6f5f7475 	svcvs	0x005f7475
    4e90:	63656a62 	cmnvs	r5, #401408	; 0x62000
    4e94:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
    4e98:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    4e9c:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
    4ea0:	6f6f685f 	svcvs	0x006f685f
    4ea4:	7369006b 	cmnvc	r9, #107	; 0x6b
    4ea8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4eac:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4eb0:	3233645f 	eorscc	r6, r3, #1593835520	; 0x5f000000
    4eb4:	4d524100 	ldfmie	f4, [r2, #-0]
    4eb8:	00454e5f 	subeq	r4, r5, pc, asr lr
    4ebc:	5f617369 	svcpl	0x00617369
    4ec0:	5f746962 	svcpl	0x00746962
    4ec4:	00386562 	eorseq	r6, r8, r2, ror #10
    4ec8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ecc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4ed0:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4ed4:	31316d72 	teqcc	r1, r2, ror sp
    4ed8:	7a6a3637 	bvc	1a927bc <__ccfg+0x1a72814>
    4edc:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    4ee0:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    4ee4:	5f726f73 	svcpl	0x00726f73
    4ee8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4eec:	6c6c6100 	stfvse	f6, [ip], #-0
    4ef0:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4ef4:	72610073 	rsbvc	r0, r1, #115	; 0x73
    4ef8:	63705f6d 	cmnvs	r0, #436	; 0x1b4
    4efc:	41420073 	hvcmi	8195	; 0x2003
    4f00:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4f04:	5f484352 	svcpl	0x00484352
    4f08:	61005435 	tstvs	r0, r5, lsr r4
    4f0c:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4f10:	34686372 	strbtcc	r6, [r8], #-882	; 0xfffffc8e
    4f14:	41540074 	cmpmi	r4, r4, ror r0
    4f18:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4f1c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4f20:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4f24:	61786574 	cmnvs	r8, r4, ror r5
    4f28:	6f633637 	svcvs	0x00633637
    4f2c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f30:	00353561 	eorseq	r3, r5, r1, ror #10
    4f34:	5f6d7261 	svcpl	0x006d7261
    4f38:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4f3c:	7562775f 	strbvc	r7, [r2, #-1887]!	; 0xfffff8a1
    4f40:	74680066 	strbtvc	r0, [r8], #-102	; 0xffffff9a
    4f44:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    4f48:	00687361 	rsbeq	r7, r8, r1, ror #6
    4f4c:	5f617369 	svcpl	0x00617369
    4f50:	5f746962 	svcpl	0x00746962
    4f54:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    4f58:	6f6e5f6b 	svcvs	0x006e5f6b
    4f5c:	6c6f765f 	stclvs	6, cr7, [pc], #-380	; 4de8 <__aeabi_lmul+0x3bc>
    4f60:	6c697461 	cfstrdvs	mvd7, [r9], #-388	; 0xfffffe7c
    4f64:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
    4f68:	52415400 	subpl	r5, r1, #0, 8
    4f6c:	5f544547 	svcpl	0x00544547
    4f70:	5f555043 	svcpl	0x00555043
    4f74:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f78:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4f7c:	52415400 	subpl	r5, r1, #0, 8
    4f80:	5f544547 	svcpl	0x00544547
    4f84:	5f555043 	svcpl	0x00555043
    4f88:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f8c:	316d7865 	cmncc	sp, r5, ror #16
    4f90:	52415400 	subpl	r5, r1, #0, 8
    4f94:	5f544547 	svcpl	0x00544547
    4f98:	5f555043 	svcpl	0x00555043
    4f9c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4fa0:	336d7865 	cmncc	sp, #6619136	; 0x650000
    4fa4:	61736900 	cmnvs	r3, r0, lsl #18
    4fa8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fac:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fb0:	315f3876 	cmpcc	pc, r6, ror r8	; <UNPREDICTABLE>
    4fb4:	6d726100 	ldfvse	f6, [r2, #-0]
    4fb8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4fbc:	616e5f68 	cmnvs	lr, r8, ror #30
    4fc0:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    4fc4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fc8:	615f7469 	cmpvs	pc, r9, ror #8
    4fcc:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fd0:	6900335f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
    4fd4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fd8:	615f7469 	cmpvs	pc, r9, ror #8
    4fdc:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fe0:	6900345f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
    4fe4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fe8:	615f7469 	cmpvs	pc, r9, ror #8
    4fec:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4ff0:	5400355f 	strpl	r3, [r0], #-1375	; 0xfffffaa1
    4ff4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4ff8:	50435f54 	subpl	r5, r3, r4, asr pc
    4ffc:	6f635f55 	svcvs	0x00635f55
    5000:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5004:	00333561 	eorseq	r3, r3, r1, ror #10
    5008:	47524154 			; <UNDEFINED> instruction: 0x47524154
    500c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5010:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5014:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5018:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    501c:	52415400 	subpl	r5, r1, #0, 8
    5020:	5f544547 	svcpl	0x00544547
    5024:	5f555043 	svcpl	0x00555043
    5028:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    502c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    5030:	41540037 	cmpmi	r4, r7, lsr r0
    5034:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5038:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    503c:	63706d5f 	cmnvs	r0, #6080	; 0x17c0
    5040:	0065726f 	rsbeq	r7, r5, pc, ror #4
    5044:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5048:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    504c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5050:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    5054:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    5058:	5f6d7261 	svcpl	0x006d7261
    505c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5060:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 5068 <__aeabi_lmul+0x63c>
    5064:	4154006d 	cmpmi	r4, sp, rrx
    5068:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    506c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5070:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5074:	36323031 			; <UNDEFINED> instruction: 0x36323031
    5078:	00736a65 	rsbseq	r6, r3, r5, ror #20
    507c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5080:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5084:	4a365f48 	bmi	d9cdac <__ccfg+0xd7ce04>
    5088:	53414200 	movtpl	r4, #4608	; 0x1200
    508c:	52415f45 	subpl	r5, r1, #276	; 0x114
    5090:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    5094:	4142004b 	cmpmi	r2, fp, asr #32
    5098:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    509c:	5f484352 	svcpl	0x00484352
    50a0:	69004d36 	stmdbvs	r0, {r1, r2, r4, r5, r8, sl, fp, lr}
    50a4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    50a8:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    50ac:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    50b0:	41540074 	cmpmi	r4, r4, ror r0
    50b4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    50b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    50bc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    50c0:	36333131 			; <UNDEFINED> instruction: 0x36333131
    50c4:	0073666a 	rsbseq	r6, r3, sl, ror #12
    50c8:	5f4d5241 	svcpl	0x004d5241
    50cc:	4100534c 	tstmi	r0, ip, asr #6
    50d0:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    50d4:	41420054 	qdaddmi	r0, r4, r2
    50d8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    50dc:	5f484352 	svcpl	0x00484352
    50e0:	41005a36 	tstmi	r0, r6, lsr sl
    50e4:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    50e8:	415f5343 	cmpmi	pc, r3, asr #6
    50ec:	53435041 	movtpl	r5, #12353	; 0x3041
    50f0:	5046565f 	subpl	r5, r6, pc, asr r6
    50f4:	52415400 	subpl	r5, r1, #0, 8
    50f8:	5f544547 	svcpl	0x00544547
    50fc:	5f555043 	svcpl	0x00555043
    5100:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    5104:	00327478 	eorseq	r7, r2, r8, ror r4
    5108:	5f617369 	svcpl	0x00617369
    510c:	5f746962 	svcpl	0x00746962
    5110:	6e6f656e 	cdpvs	5, 6, cr6, cr15, cr14, {3}
    5114:	6d726100 	ldfvse	f6, [r2, #-0]
    5118:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    511c:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    5120:	73690072 	cmnvc	r9, #114	; 0x72
    5124:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5128:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    512c:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0xfffff993
    5130:	4154006d 	cmpmi	r4, sp, rrx
    5134:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5138:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    513c:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    5140:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    5144:	52415400 	subpl	r5, r1, #0, 8
    5148:	5f544547 	svcpl	0x00544547
    514c:	5f555043 	svcpl	0x00555043
    5150:	7672616d 	ldrbtvc	r6, [r2], -sp, ror #2
    5154:	5f6c6c65 	svcpl	0x006c6c65
    5158:	00346a70 	eorseq	r6, r4, r0, ror sl
    515c:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    5160:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    5164:	6f705f68 	svcvs	0x00705f68
    5168:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    516c:	72610072 	rsbvc	r0, r1, #114	; 0x72
    5170:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    5174:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
    5178:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    517c:	39615f78 	stmdbcc	r1!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5180:	61736900 	cmnvs	r3, r0, lsl #18
    5184:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5188:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    518c:	3274786d 	rsbscc	r7, r4, #7143424	; 0x6d0000
    5190:	52415400 	subpl	r5, r1, #0, 8
    5194:	5f544547 	svcpl	0x00544547
    5198:	5f555043 	svcpl	0x00555043
    519c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    51a0:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    51a4:	726f6332 	rsbvc	r6, pc, #-939524096	; 0xc8000000
    51a8:	61786574 	cmnvs	r8, r4, ror r5
    51ac:	69003335 	stmdbvs	r0, {r0, r2, r4, r5, r8, r9, ip, sp}
    51b0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    51b4:	745f7469 	ldrbvc	r7, [pc], #-1129	; 51bc <port_confs+0x18>
    51b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    51bc:	41420032 	cmpmi	r2, r2, lsr r0
    51c0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    51c4:	5f484352 	svcpl	0x00484352
    51c8:	69004137 	stmdbvs	r0, {r0, r1, r2, r4, r5, r8, lr}
    51cc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    51d0:	645f7469 	ldrbvs	r7, [pc], #-1129	; 51d8 <port_confs+0x34>
    51d4:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
    51d8:	6100646f 	tstvs	r0, pc, ror #8
    51dc:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    51e0:	5f363170 	svcpl	0x00363170
    51e4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    51e8:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 51f0 <port_confs+0x4c>
    51ec:	52410065 	subpl	r0, r1, #101	; 0x65
    51f0:	494d5f4d 	stmdbmi	sp, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    51f4:	6d726100 	ldfvse	f6, [r2, #-0]
    51f8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    51fc:	006b3668 	rsbeq	r3, fp, r8, ror #12
    5200:	5f6d7261 	svcpl	0x006d7261
    5204:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5208:	42006d36 	andmi	r6, r0, #3456	; 0xd80
    520c:	5f455341 	svcpl	0x00455341
    5210:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    5214:	0052375f 	subseq	r3, r2, pc, asr r7
    5218:	6f705f5f 	svcvs	0x00705f5f
    521c:	756f6370 	strbvc	r6, [pc, #-880]!	; 4eb4 <__aeabi_lmul+0x488>
    5220:	745f746e 	ldrbvc	r7, [pc], #-1134	; 5228 <__pi_hex_enc_table+0x17>
    5224:	2f006261 	svccs	0x00006261
    5228:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    522c:	63672f64 	cmnvs	r7, #100, 30	; 0x190
    5230:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5234:	6f6e2d6d 	svcvs	0x006e2d6d
    5238:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    523c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5240:	6b396c47 	blvs	e60364 <__ccfg+0xe403bc>
    5244:	672f3954 			; <UNDEFINED> instruction: 0x672f3954
    5248:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    524c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5250:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5254:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5258:	322d392d 	eorcc	r3, sp, #737280	; 0xb4000
    525c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    5260:	622f3471 	eorvs	r3, pc, #1895825408	; 0x71000000
    5264:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5268:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    526c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5270:	61652d65 	cmnvs	r5, r5, ror #26
    5274:	742f6962 	strtvc	r6, [pc], #-2402	; 527c <__pi_hex_enc_table+0x6b>
    5278:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    527c:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    5280:	696c2f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    5284:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    5288:	61736900 	cmnvs	r3, r0, lsl #18
    528c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5290:	736d635f 	cmnvc	sp, #2080374785	; 0x7c000001
    5294:	41540065 	cmpmi	r4, r5, rrx
    5298:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    529c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    52a0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    52a4:	61786574 	cmnvs	r8, r4, ror r5
    52a8:	54003337 	strpl	r3, [r0], #-823	; 0xfffffcc9
    52ac:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    52b0:	50435f54 	subpl	r5, r3, r4, asr pc
    52b4:	65675f55 	strbvs	r5, [r7, #-3925]!	; 0xfffff0ab
    52b8:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    52bc:	61377663 	teqvs	r7, r3, ror #12
    52c0:	52415400 	subpl	r5, r1, #0, 8
    52c4:	5f544547 	svcpl	0x00544547
    52c8:	5f555043 	svcpl	0x00555043
    52cc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    52d0:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    52d4:	72610036 	rsbvc	r0, r1, #54	; 0x36
    52d8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    52dc:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    52e0:	6f765f6f 	svcvs	0x00765f6f
    52e4:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    52e8:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
    52ec:	41420065 	cmpmi	r2, r5, rrx
    52f0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    52f4:	5f484352 	svcpl	0x00484352
    52f8:	69004138 	stmdbvs	r0, {r3, r4, r5, r8, lr}
    52fc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5300:	615f7469 	cmpvs	pc, r9, ror #8
    5304:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    5308:	41420074 	hvcmi	8196	; 0x2004
    530c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5310:	5f484352 	svcpl	0x00484352
    5314:	54005238 	strpl	r5, [r0], #-568	; 0xfffffdc8
    5318:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    531c:	50435f54 	subpl	r5, r3, r4, asr pc
    5320:	6f635f55 	svcvs	0x00635f55
    5324:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5328:	63333761 	teqvs	r3, #25427968	; 0x1840000
    532c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5330:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    5334:	4d524100 	ldfmie	f4, [r2, #-0]
    5338:	00564e5f 	subseq	r4, r6, pc, asr lr
    533c:	5f6d7261 	svcpl	0x006d7261
    5340:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5344:	72610034 	rsbvc	r0, r1, #52	; 0x34
    5348:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    534c:	00366863 	eorseq	r6, r6, r3, ror #16
    5350:	5f6d7261 	svcpl	0x006d7261
    5354:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5358:	72610037 	rsbvc	r0, r1, #55	; 0x37
    535c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5360:	00386863 	eorseq	r6, r8, r3, ror #16
    5364:	79744944 	ldmdbvc	r4!, {r2, r6, r8, fp, lr}^
    5368:	61006570 	tstvs	r0, r0, ror r5
    536c:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 5374 <patchGenfskRfe+0x38>
    5370:	5f656e75 	svcpl	0x00656e75
    5374:	61637378 	smcvs	14136	; 0x3738
    5378:	4400656c 	strmi	r6, [r0], #-1388	; 0xfffffa94
    537c:	72747357 	rsbsvc	r7, r4, #1543503873	; 0x5c000001
    5380:	00746375 	rsbseq	r6, r4, r5, ror r3
    5384:	696b616d 	stmdbvs	fp!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5388:	635f676e 	cmpvs	pc, #28835840	; 0x1b80000
    538c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    5390:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    5394:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    5398:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    539c:	6c61635f 	stclvs	3, cr6, [r1], #-380	; 0xfffffe84
    53a0:	69765f6c 	ldmdbvs	r6!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    53a4:	616c5f61 	cmnvs	ip, r1, ror #30
    53a8:	006c6562 	rsbeq	r6, ip, r2, ror #10
    53ac:	5f617369 	svcpl	0x00617369
    53b0:	5f746962 	svcpl	0x00746962
    53b4:	35767066 	ldrbcc	r7, [r6, #-102]!	; 0xffffff9a
    53b8:	61736900 	cmnvs	r3, r0, lsl #18
    53bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    53c0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    53c4:	006b3676 	rsbeq	r3, fp, r6, ror r6
    53c8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53cc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53d0:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53d4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    53d8:	00376178 	eorseq	r6, r7, r8, ror r1
    53dc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53e0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53e4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53e8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    53ec:	00386178 	eorseq	r6, r8, r8, ror r1
    53f0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53f4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53f8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53fc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5400:	00396178 	eorseq	r6, r9, r8, ror r1
    5404:	5f4d5241 	svcpl	0x004d5241
    5408:	5f534350 	svcpl	0x00534350
    540c:	53435041 	movtpl	r5, #12353	; 0x3041
    5410:	4d524100 	ldfmie	f4, [r2, #-0]
    5414:	5343505f 	movtpl	r5, #12383	; 0x305f
    5418:	5054415f 	subspl	r4, r4, pc, asr r1
    541c:	63005343 	movwvs	r5, #835	; 0x343
    5420:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    5424:	64207865 	strtvs	r7, [r0], #-2149	; 0xfffff79b
    5428:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    542c:	41540065 	cmpmi	r4, r5, rrx
    5430:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5434:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5438:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    543c:	61786574 	cmnvs	r8, r4, ror r5
    5440:	6f633337 	svcvs	0x00633337
    5444:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5448:	00333561 	eorseq	r3, r3, r1, ror #10
    544c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5450:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5454:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5458:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    545c:	70306d78 	eorsvc	r6, r0, r8, ror sp
    5460:	0073756c 	rsbseq	r7, r3, ip, ror #10
    5464:	5f6d7261 	svcpl	0x006d7261
    5468:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    546c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5470:	785f7469 	ldmdavc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    5474:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    5478:	645f0065 	ldrbvs	r0, [pc], #-101	; 5480 <patchGenfskRfe+0x144>
    547c:	5f746e6f 	svcpl	0x00746e6f
    5480:	5f657375 	svcpl	0x00657375
    5484:	65657274 	strbvs	r7, [r5, #-628]!	; 0xfffffd8c
    5488:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    548c:	54005f65 	strpl	r5, [r0], #-3941	; 0xfffff09b
    5490:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5494:	50435f54 	subpl	r5, r3, r4, asr pc
    5498:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    549c:	7430316d 	ldrtvc	r3, [r0], #-365	; 0xfffffe93
    54a0:	00696d64 	rsbeq	r6, r9, r4, ror #26
    54a4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    54a8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    54ac:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    54b0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    54b4:	00356178 	eorseq	r6, r5, r8, ror r1
    54b8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    54bc:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    54c0:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
    54c4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    54c8:	72610065 	rsbvc	r0, r1, #101	; 0x65
    54cc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    54d0:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    54d4:	54006372 	strpl	r6, [r0], #-882	; 0xfffffc8e
    54d8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    54dc:	50435f54 	subpl	r5, r3, r4, asr pc
    54e0:	6f635f55 	svcvs	0x00635f55
    54e4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    54e8:	6d73316d 	ldfvse	f3, [r3, #-436]!	; 0xfffffe4c
    54ec:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    54f0:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    54f4:	00796c70 	rsbseq	r6, r9, r0, ror ip
    54f8:	5f6d7261 	svcpl	0x006d7261
    54fc:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    5500:	5f746e65 	svcpl	0x00746e65
    5504:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    5508:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    550c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    5510:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    5514:	4d524100 	ldfmie	f4, [r2, #-0]
    5518:	004c505f 	subeq	r5, ip, pc, asr r0
    551c:	5f617369 	svcpl	0x00617369
    5520:	5f746962 	svcpl	0x00746962
    5524:	76706676 			; <UNDEFINED> instruction: 0x76706676
    5528:	73690033 	cmnvc	r9, #51	; 0x33
    552c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5530:	66765f74 	uhsub16vs	r5, r6, r4
    5534:	00347670 	eorseq	r7, r4, r0, ror r6
    5538:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    553c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5540:	54365f48 	ldrtpl	r5, [r6], #-3912	; 0xfffff0b8
    5544:	41420032 	cmpmi	r2, r2, lsr r0
    5548:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    554c:	5f484352 	svcpl	0x00484352
    5550:	4d5f4d38 	ldclmi	13, cr4, [pc, #-224]	; 5478 <patchGenfskRfe+0x13c>
    5554:	004e4941 	subeq	r4, lr, r1, asr #18
    5558:	47524154 			; <UNDEFINED> instruction: 0x47524154
    555c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5560:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5564:	74396d72 	ldrtvc	r6, [r9], #-3442	; 0xfffff28e
    5568:	00696d64 	rsbeq	r6, r9, r4, ror #26
    556c:	5f4d5241 	svcpl	0x004d5241
    5570:	42004c41 	andmi	r4, r0, #16640	; 0x4100
    5574:	5f455341 	svcpl	0x00455341
    5578:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    557c:	004d375f 	subeq	r3, sp, pc, asr r7
    5580:	5f6d7261 	svcpl	0x006d7261
    5584:	67726174 			; <UNDEFINED> instruction: 0x67726174
    5588:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    558c:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    5590:	6d726100 	ldfvse	f6, [r2, #-0]
    5594:	7261745f 	rsbvc	r7, r1, #1593835520	; 0x5f000000
    5598:	5f746567 	svcpl	0x00746567
    559c:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    55a0:	52415400 	subpl	r5, r1, #0, 8
    55a4:	5f544547 	svcpl	0x00544547
    55a8:	5f555043 	svcpl	0x00555043
    55ac:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55b0:	35727865 	ldrbcc	r7, [r2, #-2149]!	; 0xfffff79b
    55b4:	52415400 	subpl	r5, r1, #0, 8
    55b8:	5f544547 	svcpl	0x00544547
    55bc:	5f555043 	svcpl	0x00555043
    55c0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55c4:	37727865 	ldrbcc	r7, [r2, -r5, ror #16]!
    55c8:	52415400 	subpl	r5, r1, #0, 8
    55cc:	5f544547 	svcpl	0x00544547
    55d0:	5f555043 	svcpl	0x00555043
    55d4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55d8:	38727865 	ldmdacc	r2!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    55dc:	61736900 	cmnvs	r3, r0, lsl #18
    55e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    55e4:	61706c5f 	cmnvs	r0, pc, asr ip
    55e8:	73690065 	cmnvc	r9, #101	; 0x65
    55ec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    55f0:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    55f4:	5f6b7269 	svcpl	0x006b7269
    55f8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    55fc:	007a6b36 	rsbseq	r6, sl, r6, lsr fp
    5600:	5f617369 	svcpl	0x00617369
    5604:	5f746962 	svcpl	0x00746962
    5608:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    560c:	61736900 	cmnvs	r3, r0, lsl #18
    5610:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5614:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5618:	69003476 	stmdbvs	r0, {r1, r2, r4, r5, r6, sl, ip, sp}
    561c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5620:	615f7469 	cmpvs	pc, r9, ror #8
    5624:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    5628:	61736900 	cmnvs	r3, r0, lsl #18
    562c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5630:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5634:	69003776 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, sp}
    5638:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    563c:	615f7469 	cmpvs	pc, r9, ror #8
    5640:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    5644:	6f645f00 	svcvs	0x00645f00
    5648:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 51e2 <port_confs+0x3e>
    564c:	725f6573 	subsvc	r6, pc, #482344960	; 0x1cc00000
    5650:	685f7874 	ldmdavs	pc, {r2, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    5654:	5f657265 	svcpl	0x00657265
    5658:	49515500 	ldmdbmi	r1, {r8, sl, ip, lr}^
    565c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5660:	61736900 	cmnvs	r3, r0, lsl #18
    5664:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5668:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    566c:	65743576 	ldrbvs	r3, [r4, #-1398]!	; 0xfffffa8a
    5670:	6d726100 	ldfvse	f6, [r2, #-0]
    5674:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    5678:	72610065 	rsbvc	r0, r1, #101	; 0x65
    567c:	70635f6d 	rsbvc	r5, r3, sp, ror #30
    5680:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
    5684:	77726574 			; <UNDEFINED> instruction: 0x77726574
    5688:	006b726f 	rsbeq	r7, fp, pc, ror #4
    568c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5690:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5694:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5698:	32396d72 	eorscc	r6, r9, #7296	; 0x1c80
    569c:	5f007430 	svcpl	0x00007430
    56a0:	0068755f 	rsbeq	r7, r8, pc, asr r5
    56a4:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    56a8:	0071655f 	rsbseq	r6, r1, pc, asr r5
    56ac:	47524154 			; <UNDEFINED> instruction: 0x47524154
    56b0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    56b4:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    56b8:	36323561 	ldrtcc	r3, [r2], -r1, ror #10
    56bc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 47c4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x8>
    56c0:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    56c4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    56c8:	745f6863 	ldrbvc	r6, [pc], #-2147	; 56d0 <patchGenfskRfe+0x394>
    56cc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    56d0:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    56d4:	68007669 	stmdavs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    56d8:	5f626174 	svcpl	0x00626174
    56dc:	705f7165 	subsvc	r7, pc, r5, ror #2
    56e0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    56e4:	61007265 	tstvs	r0, r5, ror #4
    56e8:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    56ec:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    56f0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    56f4:	00726574 	rsbseq	r6, r2, r4, ror r5
    56f8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    56fc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5700:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5704:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5708:	73306d78 	teqvc	r0, #120, 26	; 0x1e00
    570c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5710:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    5714:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    5718:	52415400 	subpl	r5, r1, #0, 8
    571c:	5f544547 	svcpl	0x00544547
    5720:	5f555043 	svcpl	0x00555043
    5724:	6f63706d 	svcvs	0x0063706d
    5728:	6f6e6572 	svcvs	0x006e6572
    572c:	00706676 	rsbseq	r6, r0, r6, ror r6
    5730:	5f617369 	svcpl	0x00617369
    5734:	5f746962 	svcpl	0x00746962
    5738:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    573c:	6d635f6b 	stclvs	15, cr5, [r3, #-428]!	; 0xfffffe54
    5740:	646c5f33 	strbtvs	r5, [ip], #-3891	; 0xfffff0cd
    5744:	41006472 	tstmi	r0, r2, ror r4
    5748:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    574c:	72610043 	rsbvc	r0, r1, #67	; 0x43
    5750:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5754:	5f386863 	svcpl	0x00386863
    5758:	72610032 	rsbvc	r0, r1, #50	; 0x32
    575c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5760:	5f386863 	svcpl	0x00386863
    5764:	72610033 	rsbvc	r0, r1, #51	; 0x33
    5768:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    576c:	5f386863 	svcpl	0x00386863
    5770:	41540034 	cmpmi	r4, r4, lsr r0
    5774:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5778:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    577c:	706d665f 	rsbvc	r6, sp, pc, asr r6
    5780:	00363236 	eorseq	r3, r6, r6, lsr r2
    5784:	5f4d5241 	svcpl	0x004d5241
    5788:	61005343 	tstvs	r0, r3, asr #6
    578c:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    5790:	5f363170 	svcpl	0x00363170
    5794:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xfffff197
    5798:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    579c:	72610068 	rsbvc	r0, r1, #104	; 0x68
    57a0:	61625f6d 	cmnvs	r2, sp, ror #30
    57a4:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    57a8:	00686372 	rsbeq	r6, r8, r2, ror r3
    57ac:	6c765f5f 	ldclvs	15, cr5, [r6], #-380	; 0xfffffe84
    57b0:	52415400 	subpl	r5, r1, #0, 8
    57b4:	5f544547 	svcpl	0x00544547
    57b8:	5f555043 	svcpl	0x00555043
    57bc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    57c0:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    57c4:	52415400 	subpl	r5, r1, #0, 8
    57c8:	5f544547 	svcpl	0x00544547
    57cc:	5f555043 	svcpl	0x00555043
    57d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    57d4:	31617865 	cmncc	r1, r5, ror #16
    57d8:	726f6335 	rsbvc	r6, pc, #-738197504	; 0xd4000000
    57dc:	61786574 	cmnvs	r8, r4, ror r5
    57e0:	72610037 	rsbvc	r0, r1, #55	; 0x37
    57e4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    57e8:	65376863 	ldrvs	r6, [r7, #-2147]!	; 0xfffff79d
    57ec:	4154006d 	cmpmi	r4, sp, rrx
    57f0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    57f4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    57f8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    57fc:	61786574 	cmnvs	r8, r4, ror r5
    5800:	61003237 	tstvs	r0, r7, lsr r2
    5804:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    5808:	645f7363 	ldrbvs	r7, [pc], #-867	; 5810 <patchGenfskRfe+0x4d4>
    580c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5810:	4100746c 	tstmi	r0, ip, ror #8
    5814:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5818:	415f5343 	cmpmi	pc, r3, asr #6
    581c:	53435041 	movtpl	r5, #12353	; 0x3041
    5820:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    5824:	54004c41 	strpl	r4, [r0], #-3137	; 0xfffff3bf
    5828:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    582c:	50435f54 	subpl	r5, r3, r4, asr pc
    5830:	6f635f55 	svcvs	0x00635f55
    5834:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5838:	00353761 	eorseq	r3, r5, r1, ror #14
    583c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5840:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5844:	735f5550 	cmpvc	pc, #80, 10	; 0x14000000
    5848:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    584c:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    5850:	6d726100 	ldfvse	f6, [r2, #-0]
    5854:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5858:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    585c:	31626d75 	smccc	9941	; 0x26d5
    5860:	6d726100 	ldfvse	f6, [r2, #-0]
    5864:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5868:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    586c:	32626d75 	rsbcc	r6, r2, #7488	; 0x1d40
    5870:	52415400 	subpl	r5, r1, #0, 8
    5874:	5f544547 	svcpl	0x00544547
    5878:	5f555043 	svcpl	0x00555043
    587c:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    5880:	61007478 	tstvs	r0, r8, ror r4
    5884:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5888:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    588c:	5f5f0074 	svcpl	0x005f0074
    5890:	5f003078 	svcpl	0x00003078
    5894:	0031785f 	eorseq	r7, r1, pc, asr r8
    5898:	32785f5f 	rsbscc	r5, r8, #380	; 0x17c
    589c:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    58a0:	73690033 	cmnvc	r9, #51	; 0x33
    58a4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    58a8:	706d5f74 	rsbvc	r5, sp, r4, ror pc
    58ac:	6d726100 	ldfvse	f6, [r2, #-0]
    58b0:	5f646c5f 	svcpl	0x00646c5f
    58b4:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    58b8:	72610064 	rsbvc	r0, r1, #100	; 0x64
    58bc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    58c0:	5f386863 	svcpl	0x00386863
    58c4:	Address 0x00000000000058c4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    return node->data_base.item_array[index];
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
};
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
			nq++;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	if (!button_still_pressed (__button_list [pbutton]))
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (baction == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
	(*baction) (pbutton);
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
endthread
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
endthread
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm sender(struct ResponseMessage *message) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
		packet[1] = message->gid;
  f0:	61656c65 	cmnvs	r5, r5, ror #24
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
		DEBUG_PRINT("SENDING PROCEDURE");
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
		*p = message->tpe;p++;
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		*p = message->request_number;p++;
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
		*p = message->sender_id;p++;
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
		*p = message->receiver_id;p++;
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
    return node->data_base.item_array[index];
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
};
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    return node->data_base.item_array[index];
      10:	00000034 	andeq	r0, r0, r4, lsr r0
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
};
      1c:	000000bc 	strheq	r0, [r0], -ip
      20:	83180e41 	tsthi	r8, #1040	; 0x410
      24:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
      28:	87038604 	strhi	r8, [r3, -r4, lsl #12]
      2c:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      30:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
      34:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
      38:	6d0b4200 	sfmvs	f4, 4, [fp, #-0]
      3c:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
			i = k;
      40:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
				j->Next = k;
      44:	000b4300 	andeq	r4, fp, r0, lsl #6
      48:	0000000c 	andeq	r0, r0, ip
	...
}
      54:	00000006 	andeq	r0, r0, r6
      58:	0000000c 	andeq	r0, r0, ip
	...
      64:	00000006 	andeq	r0, r0, r6
      68:	0000000c 	andeq	r0, r0, ip
	...
      74:	00000008 	andeq	r0, r0, r8
      78:	0000000c 	andeq	r0, r0, ip
      7c:	00000000 	andeq	r0, r0, r0
      80:	00000184 	andeq	r0, r0, r4, lsl #3
      84:	00000014 	andeq	r0, r0, r4, lsl r0
      88:	00000014 	andeq	r0, r0, r4, lsl r0
      8c:	00000000 	andeq	r0, r0, r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00000198 	muleq	r0, r8, r1
      94:	00000024 	andeq	r0, r0, r4, lsr #32
      98:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (baction == NULL)
      9c:	00018e02 	andeq	r8, r1, r2, lsl #28
      a0:	00000014 	andeq	r0, r0, r4, lsl r0
	(*baction) (pbutton);
      a4:	00000000 	andeq	r0, r0, r0
endthread
      a8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000012 	andeq	r0, r0, r2, lsl r0
      b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
endthread
      b4:	00018e02 	andeq	r8, r1, r2, lsl #28
      b8:	0000000c 	andeq	r0, r0, ip
	...
      c4:	0000000c 	andeq	r0, r0, ip
fsm sender(struct ResponseMessage *message) {
      c8:	0000000c 	andeq	r0, r0, ip
      cc:	00000000 	andeq	r0, r0, r0
      d0:	000001ce 	andeq	r0, r0, lr, asr #3
}
      d4:	00000016 	andeq	r0, r0, r6, lsl r0
      d8:	0000000c 	andeq	r0, r0, ip
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	00000000 	andeq	r0, r0, r0
      e0:	000001e4 	andeq	r0, r0, r4, ror #3
      e4:	0000001c 	andeq	r0, r0, ip, lsl r0
      e8:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		packet[1] = message->gid;
      f4:	0000001e 	andeq	r0, r0, lr, lsl r0
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      fc:	86038504 	strhi	r8, [r3], -r4, lsl #10
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	00018e02 	andeq	r8, r1, r2, lsl #28
     104:	00000014 	andeq	r0, r0, r4, lsl r0
		*p = message->tpe;p++;
     108:	00000000 	andeq	r0, r0, r0
		*p = message->request_number;p++;
     10c:	00000200 	andeq	r0, r0, r0, lsl #4
		*p = message->sender_id;p++;
     110:	00000026 	andeq	r0, r0, r6, lsr #32
		*p = message->receiver_id;p++;
     114:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		switch(message->tpe) {
     118:	00018e02 	andeq	r8, r1, r2, lsl #28
     11c:	00000020 	andeq	r0, r0, r0, lsr #32
     120:	00000000 	andeq	r0, r0, r0
		tcv_endp(packet);
     124:	00000226 	andeq	r0, r0, r6, lsr #4
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	00000052 	andeq	r0, r0, r2, asr r0
     12c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
}
     130:	86078508 	strhi	r8, [r7], -r8, lsl #10
		finish;
     134:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     138:	8a038904 	bhi	e2550 <__ccfg+0xc25a8>
     13c:	00018e02 	andeq	r8, r1, r2, lsl #28
				strncpy(p, message->record, sizeof(message->record));
     140:	00000028 	andeq	r0, r0, r8, lsr #32
				*p = message->padding;p++;
     144:	00000000 	andeq	r0, r0, r0
				strncpy(p, message->record, sizeof(message->record));
     148:	00000278 	andeq	r0, r0, r8, ror r2
     14c:	00000408 	andeq	r0, r0, r8, lsl #8
     150:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
				strncpy(p, message->record, sizeof(message->record));
     154:	86058506 	strhi	r8, [r5], -r6, lsl #10
     158:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
				strncpy(p, message->record, sizeof(message->record));
     15c:	42018e02 	andmi	r8, r1, #2, 28
				break;
     160:	bb02600e 	bllt	981a0 <__ccfg+0x781f8>
				*p = message->record_index;p++;
     164:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
				*p = message->padding;
     168:	0000000b 	andeq	r0, r0, fp
				break;
     16c:	00000024 	andeq	r0, r0, r4, lsr #32
     170:	00000000 	andeq	r0, r0, r0
     174:	00000680 	andeq	r0, r0, r0, lsl #13
     178:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     17c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     180:	86048505 	strhi	r8, [r4], -r5, lsl #10
		node->nnodes[i] = 0;
     184:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     188:	280e4101 	stmdacs	lr, {r0, r8, lr}
     18c:	0e029f03 	cdpeq	15, 0, cr9, cr2, cr3, {0}
     190:	00000014 	andeq	r0, r0, r4, lsl r0
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	0000000c 	andeq	r0, r0, ip
bool init_node(struct Node* node){
     198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    node->id  = 0;                  // default id value 0
     19c:	7c020001 	stcvc	0, cr0, [r2], {1}
    node->index = 0;                // default entry count 0
     1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    node->data_base.item_count = 0; // default no items in array
     1a4:	0000000c 	andeq	r0, r0, ip
	reset_array(node);
     1a8:	00000194 	muleq	r0, r4, r1
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	00000c34 	andeq	r0, r0, r4, lsr ip
     1b0:	0000000c 	andeq	r0, r0, ip
};
     1b4:	00000018 	andeq	r0, r0, r8, lsl r0
     1b8:	00000194 	muleq	r0, r4, r1
uint8_t generate_request_num(void){
     1bc:	00000c40 	andeq	r0, r0, r0, asr #24
    return (uint8_t) (rand() % 255);
     1c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     1c4:	47080e41 	strmi	r0, [r8, -r1, asr #28]
     1c8:	41000e0a 	tstmi	r0, sl, lsl #28
}
     1cc:	0000000b 	andeq	r0, r0, fp
            node->nnodes[i] = 0; // set to null byte
     1d0:	00000018 	andeq	r0, r0, r8, lsl r0
     1d4:	00000194 	muleq	r0, r4, r1
     1d8:	00000c6c 	andeq	r0, r0, ip, ror #24
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0000002a 	andeq	r0, r0, sl, lsr #32
};
     1e0:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     1e8:	000b4204 	andeq	r4, fp, r4, lsl #4
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	00000018 	andeq	r0, r0, r8, lsl r0
     1f0:	00000194 	muleq	r0, r4, r1
     1f4:	00000c98 	muleq	r0, r8, ip
        node->data_base.item_count -= 1;
     1f8:	0000003c 	andeq	r0, r0, ip, lsr r0
};
     1fc:	83100e41 	tsthi	r0, #1040	; 0x410
bool delete_all(struct Node *node){
     200:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	00018e02 	andeq	r8, r1, r2, lsl #28
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00000018 	andeq	r0, r0, r8, lsl r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00000194 	muleq	r0, r4, r1
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	00000cd4 	ldrdeq	r0, [r0], -r4
            node->data_base.item_array[i].timestamp = 0;
     214:	00000040 	andeq	r0, r0, r0, asr #32
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	83100e41 	tsthi	r0, #1040	; 0x410
    node->data_base.item_count = 0;
     21c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     220:	00018e02 	andeq	r8, r1, r2, lsl #28
        return true;
     224:	00000014 	andeq	r0, r0, r4, lsl r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00000194 	muleq	r0, r4, r1
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00000000 	andeq	r0, r0, r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	00000020 	andeq	r0, r0, r0, lsr #32
     234:	83080e42 	movwhi	r0, #36418	; 0x8e42
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00000014 	andeq	r0, r0, r4, lsl r0
	response_message->tpe = RESPONSE;
     240:	00000194 	muleq	r0, r4, r1
	response_message->status = status;
     244:	00000d14 	andeq	r0, r0, r4, lsl sp
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	00000054 	andeq	r0, r0, r4, asr r0
	response_message->gid = gid;
     24c:	87080e42 	strhi	r0, [r8, -r2, asr #28]
	response_message->sender_id = sender_id;
     250:	00018e02 	andeq	r8, r1, r2, lsl #28
	response_message->status = status;
     254:	00000014 	andeq	r0, r0, r4, lsl r0
	if (!padding){
     258:	00000194 	muleq	r0, r4, r1
		response_message->padding = padding;
     25c:	00000d68 	andeq	r0, r0, r8, ror #26
	if (rec != NULL){
     260:	00000040 	andeq	r0, r0, r0, asr #32
     264:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		strncpy(response_message->record, rec, 20);
     268:	00018e02 	andeq	r8, r1, r2, lsl #28
     26c:	00000014 	andeq	r0, r0, r4, lsl r0
     270:	00000194 	muleq	r0, r4, r1
};
     274:	00000da8 	andeq	r0, r0, r8, lsr #27
fsm receiver(struct Node* node_db) {
     278:	00000028 	andeq	r0, r0, r8, lsr #32
     27c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
     284:	00000014 	andeq	r0, r0, r4, lsl r0
     288:	00000194 	muleq	r0, r4, r1
     28c:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     290:	00000114 	andeq	r0, r0, r4, lsl r1
     294:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		DEBUG_PRINT("\r\nreceiving 0");
     298:	00018e02 	andeq	r8, r1, r2, lsl #28
     29c:	0000001c 	andeq	r0, r0, ip, lsl r0
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	00000194 	muleq	r0, r4, r1
     2a4:	00000ee4 	andeq	r0, r0, r4, ror #29
     2a8:	00000050 	andeq	r0, r0, r0, asr r0
		DEBUG_PRINT("\r\nreceiving 1");
     2ac:	83180e41 	tsthi	r8, #1040	; 0x410
     2b0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		DEBUG_PRINT("\r\nreceiving 2");
     2b4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     2b8:	00018e02 	andeq	r8, r1, r2, lsl #28
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2bc:	00000018 	andeq	r0, r0, r8, lsl r0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c0:	00000194 	muleq	r0, r4, r1
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2c4:	00000f34 	andeq	r0, r0, r4, lsr pc
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2c8:	00000054 	andeq	r0, r0, r4, asr r0
		DEBUG_PRINT("\r\nreceiving 3");
     2cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		switch (response_message_5->tpe){
     2d0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     2d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     2d8:	0000000c 	andeq	r0, r0, ip
     2dc:	00000194 	muleq	r0, r4, r1
     2e0:	00000f88 	andeq	r0, r0, r8, lsl #31
     2e4:	00000038 	andeq	r0, r0, r8, lsr r0
     2e8:	00000020 	andeq	r0, r0, r0, lsr #32
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2ec:	00000194 	muleq	r0, r4, r1
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2f0:	00000fc0 	andeq	r0, r0, r0, asr #31
				if (discovery_request_message->gid == node_db->gid){
     2f4:	00000110 	andeq	r0, r0, r0, lsl r1
     2f8:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
					DEBUG_PRINT("\r\nSending to sender");
     2fc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     300:	87058606 	strhi	r8, [r5, -r6, lsl #12]
					DEBUG_PRINT("\r\nSending to sender");
     304:	89038804 	stmdbhi	r3, {r2, fp, pc}
					response_message_0->tpe = DISCOVERY_RESPONSE;
     308:	00018e02 	andeq	r8, r1, r2, lsl #28
					response_message_0->request_number = discovery_request_message->request_number;
     30c:	0000000c 	andeq	r0, r0, ip
					response_message_0->sender_id = node_db->id;
     310:	00000194 	muleq	r0, r4, r1
					response_message_0->receiver_id = discovery_request_message->sender_id;
     314:	00000000 	andeq	r0, r0, r0
					DEBUG_PRINT("\r\nSending to sender");
     318:	0000000c 	andeq	r0, r0, ip
					call sender(response_message_0, done_case);
     31c:	00000018 	andeq	r0, r0, r8, lsl r0
     320:	00000194 	muleq	r0, r4, r1
     324:	000010d0 	ldrdeq	r1, [r0], -r0
     328:	000000c0 	andeq	r0, r0, r0, asr #1
     32c:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     330:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     334:	00000001 	andeq	r0, r0, r1
     338:	00000018 	andeq	r0, r0, r8, lsl r0
     33c:	00000194 	muleq	r0, r4, r1
     340:	00001190 	muleq	r0, r0, r1
     344:	00000044 	andeq	r0, r0, r4, asr #32
     348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     34c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     350:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     354:	0000001c 	andeq	r0, r0, ip, lsl r0
					node_db->index+=1;
     358:	00000194 	muleq	r0, r4, r1
     35c:	000011d4 	ldrdeq	r1, [r0], -r4
		DEBUG_PRINT("\r\nIn done_case");
     360:	0000003c 	andeq	r0, r0, ip, lsr r0
		tcv_endp(incoming_packet);
     364:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     368:	86048505 	strhi	r8, [r4], -r5, lsl #10
		DEBUG_PRINT("\r\nIn done_case");
     36c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     370:	00000001 	andeq	r0, r0, r1
		proceed receiving;
     374:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_out(response_1_create, "\r\nData Saved");
     378:	00000194 	muleq	r0, r4, r1
     37c:	00001210 	andeq	r1, r0, r0, lsl r2
		proceed receiving;
     380:	000000a4 	andeq	r0, r0, r4, lsr #1
     384:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		ser_out(response_1_delete, "\r\nRecord Deleted");
     388:	86038504 	strhi	r8, [r3], -r4, lsl #10
     38c:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed receiving;
     390:	00000030 	andeq	r0, r0, r0, lsr r0
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     394:	00000194 	muleq	r0, r4, r1
     398:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
     39c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     3a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     3a4:	86078508 	strhi	r8, [r7], -r8, lsl #10
		proceed receiving;
     3a8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     3ac:	8a038904 	bhi	e27c4 <__ccfg+0xc281c>
     3b0:	02018e02 	andeq	r8, r1, #2, 28
     3b4:	cace0aa2 	bgt	ff382e44 <_estack+0xdf37de44>
     3b8:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
		proceed receiving;
     3bc:	000ec4c5 	andeq	ip, lr, r5, asr #9
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3c0:	00000b42 	andeq	r0, r0, r2, asr #22
     3c4:	0000000c 	andeq	r0, r0, ip
     3c8:	00000194 	muleq	r0, r4, r1
     3cc:	0000146c 	andeq	r1, r0, ip, ror #8
		proceed receiving;
     3d0:	00000024 	andeq	r0, r0, r4, lsr #32
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3d4:	0000000c 	andeq	r0, r0, ip
     3d8:	00000194 	muleq	r0, r4, r1
     3dc:	00000000 	andeq	r0, r0, r0
     3e0:	00000028 	andeq	r0, r0, r8, lsr #32
		proceed receiving;
     3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3e8:	00000194 	muleq	r0, r4, r1
     3ec:	00001490 	muleq	r0, r0, r4
		proceed receiving;
     3f0:	00000258 	andeq	r0, r0, r8, asr r2
}
     3f4:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
     3f8:	8e028b03 	vmlahi.f64	d8, d2, d3
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3fc:	180e4101 	stmdane	lr, {r0, r8, lr}
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     400:	00070d42 	andeq	r0, r7, r2, asr #26
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     404:	00000014 	andeq	r0, r0, r4, lsl r0
     408:	00000194 	muleq	r0, r4, r1
     40c:	000016e8 	andeq	r1, r0, r8, ror #13
     410:	00000030 	andeq	r0, r0, r0, lsr r0
					DEBUG_PRINT("\r\nDelete rec first if");
     414:	83080e42 	movwhi	r0, #36418	; 0x8e42
					break;
     418:	00018e02 	andeq	r8, r1, r2, lsl #28
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     41c:	00000018 	andeq	r0, r0, r8, lsl r0
     420:	00000194 	muleq	r0, r4, r1
					DEBUG_PRINT("\r\nCreate rec second if");
     424:	00000000 	andeq	r0, r0, r0
    if (node->data_base.item_count == NUMB_OF_ENT){
     428:	0000005c 	andeq	r0, r0, ip, asr r0
     42c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
						DEBUG_PRINT("\r\nCreate rec third if");
     430:	86038504 	strhi	r8, [r3], -r4, lsl #10
     434:	00018e02 	andeq	r8, r1, r2, lsl #28
					DEBUG_PRINT("\r\nCreate rec out if");
     438:	00000014 	andeq	r0, r0, r4, lsl r0
     43c:	00000194 	muleq	r0, r4, r1
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     440:	00001718 	andeq	r1, r0, r8, lsl r7
     444:	00000060 	andeq	r0, r0, r0, rrx
     448:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
     450:	0000000c 	andeq	r0, r0, ip
     454:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     458:	7c020001 	stcvc	0, cr0, [r2], {1}
					call sender(response_message_2, done_case);
     45c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
						DEBUG_PRINT("\r\nCreate rec third else");
     460:	00000018 	andeq	r0, r0, r8, lsl r0
     464:	00000450 	andeq	r0, r0, r0, asr r4
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     468:	00001778 	andeq	r1, r0, r8, ror r7
     46c:	0000003c 	andeq	r0, r0, ip, lsr r0
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     470:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				DEBUG_PRINT("\r\nDelete rec");/*
     474:	86038504 	strhi	r8, [r3], -r4, lsl #10
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     478:	00018e02 	andeq	r8, r1, r2, lsl #28
     47c:	00000018 	andeq	r0, r0, r8, lsl r0
     480:	00000450 	andeq	r0, r0, r0, asr r4
     484:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     488:	00000080 	andeq	r0, r0, r0, lsl #1
     48c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     490:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     494:	00000001 	andeq	r0, r0, r1
					DEBUG_PRINT("\r\nDelete rec first if");
     498:	0000000c 	andeq	r0, r0, ip
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     49c:	00000450 	andeq	r0, r0, r0, asr r4
     4a0:	00001834 	andeq	r1, r0, r4, lsr r8
					DEBUG_PRINT("\r\nDelete rec second if");
     4a4:	00000018 	andeq	r0, r0, r8, lsl r0
					if (delete_record(node_db, delete_record_message->record_index)){
     4a8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ac:	00000450 	andeq	r0, r0, r0, asr r4
     4b0:	00000000 	andeq	r0, r0, r0
						DEBUG_PRINT("\r\nDelete rec third if");
     4b4:	00000024 	andeq	r0, r0, r4, lsr #32
						status = (uint8_t) SUCCESS;
     4b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
					DEBUG_PRINT("\r\nDelete assemble le response");
     4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4c0:	00000014 	andeq	r0, r0, r4, lsl r0
     4c4:	00000450 	andeq	r0, r0, r0, asr r4
     4c8:	0000184c 	andeq	r1, r0, ip, asr #16
     4cc:	00000010 	andeq	r0, r0, r0, lsl r0
     4d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	00000014 	andeq	r0, r0, r4, lsl r0
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4dc:	00000450 	andeq	r0, r0, r0, asr r4
     4e0:	0000185c 	andeq	r1, r0, ip, asr r8
     4e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e8:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     4ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     4f0:	00000014 	andeq	r0, r0, r4, lsl r0
     4f4:	00000450 	andeq	r0, r0, r0, asr r4
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	0000004c 	andeq	r0, r0, ip, asr #32
     500:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     504:	00018e02 	andeq	r8, r1, r2, lsl #28
     508:	0000000c 	andeq	r0, r0, ip
     50c:	00000450 	andeq	r0, r0, r0, asr r4
     510:	00001888 	andeq	r1, r0, r8, lsl #17
     514:	00000006 	andeq	r0, r0, r6
     518:	00000028 	andeq	r0, r0, r8, lsr #32
     51c:	00000450 	andeq	r0, r0, r0, asr r4
     520:	00001890 	muleq	r0, r0, r8
     524:	000000cc 	andeq	r0, r0, ip, asr #1
     528:	83180e41 	tsthi	r8, #1040	; 0x410
     52c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     530:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     534:	02018e02 	andeq	r8, r1, #2, 28
     538:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     53c:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
     540:	0b42000e 	bleq	1080580 <__ccfg+0x10605d8>
     544:	00000014 	andeq	r0, r0, r4, lsl r0
     548:	00000450 	andeq	r0, r0, r0, asr r4
     54c:	0000195c 	andeq	r1, r0, ip, asr r9
     550:	00000014 	andeq	r0, r0, r4, lsl r0
     554:	83080e41 	movwhi	r0, #36417	; 0x8e41
     558:	00018e02 	andeq	r8, r1, r2, lsl #28
     55c:	00000014 	andeq	r0, r0, r4, lsl r0
     560:	00000450 	andeq	r0, r0, r0, asr r4
     564:	00001970 	andeq	r1, r0, r0, ror r9
     568:	00000034 	andeq	r0, r0, r4, lsr r0
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     56c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     570:	00018e02 	andeq	r8, r1, r2, lsl #28
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     574:	00000018 	andeq	r0, r0, r8, lsl r0
				DEBUG_PRINT("\r\nretrieve rec");
     578:	00000450 	andeq	r0, r0, r0, asr r4
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     57c:	000019a4 	andeq	r1, r0, r4, lsr #19
     580:	00000034 	andeq	r0, r0, r4, lsr r0
     584:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     588:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     58c:	00000001 	andeq	r0, r0, r1
     590:	00000018 	andeq	r0, r0, r8, lsl r0
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     594:	00000450 	andeq	r0, r0, r0, asr r4
     598:	00000000 	andeq	r0, r0, r0
     59c:	0000002c 	andeq	r0, r0, ip, lsr #32
    return node->data_base.item_array[index];
     5a0:	83100e41 	tsthi	r0, #1040	; 0x410
     5a4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5ac:	00000014 	andeq	r0, r0, r4, lsl r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b0:	00000450 	andeq	r0, r0, r0, asr r4
    return node->data_base.item_array[index];
     5b4:	000019d8 	ldrdeq	r1, [r0], -r8
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     5b8:	00000024 	andeq	r0, r0, r4, lsr #32
     5bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5c0:	00018e02 	andeq	r8, r1, r2, lsl #28
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     5c4:	00000018 	andeq	r0, r0, r8, lsl r0
     5c8:	00000450 	andeq	r0, r0, r0, asr r4
     5cc:	000019fc 	strdeq	r1, [r0], -ip
     5d0:	00000038 	andeq	r0, r0, r8, lsr r0
     5d4:	83100e41 	tsthi	r0, #1040	; 0x410
     5d8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5e0:	0000000c 	andeq	r0, r0, ip
     5e4:	00000450 	andeq	r0, r0, r0, asr r4
				DEBUG_PRINT("\r\nResponse");
     5e8:	00000000 	andeq	r0, r0, r0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5ec:	00000014 	andeq	r0, r0, r4, lsl r0
     5f0:	00000014 	andeq	r0, r0, r4, lsl r0
     5f4:	00000450 	andeq	r0, r0, r0, asr r4
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00000040 	andeq	r0, r0, r0, asr #32
     600:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				if(!response_flag){
     604:	00018e02 	andeq	r8, r1, r2, lsl #28
					response_flag=1;
     608:	00000014 	andeq	r0, r0, r4, lsl r0
					trigger(&response_flag);
     60c:	00000450 	andeq	r0, r0, r0, asr r4
				switch(response_message_5->status){
     610:	00000000 	andeq	r0, r0, r0
     614:	00000018 	andeq	r0, r0, r8, lsl r0
     618:	83080e41 	movwhi	r0, #36417	; 0x8e41
     61c:	00018e02 	andeq	r8, r1, r2, lsl #28
     620:	0000000c 	andeq	r0, r0, ip
						if (response_checker[0] == response_message_5->request_number){
     624:	00000450 	andeq	r0, r0, r0, asr r4
     628:	00001a34 	andeq	r1, r0, r4, lsr sl
     62c:	00000024 	andeq	r0, r0, r4, lsr #32
							switch(response_checker[1]){
     630:	0000000c 	andeq	r0, r0, ip
     634:	00000450 	andeq	r0, r0, r0, asr r4
     638:	00000000 	andeq	r0, r0, r0
     63c:	00000020 	andeq	r0, r0, r0, lsr #32
									proceed response_1_create;
     640:	0000000c 	andeq	r0, r0, ip
						proceed response_2;
     644:	00000450 	andeq	r0, r0, r0, asr r4
									proceed response_1_delete;
     648:	00001a58 	andeq	r1, r0, r8, asr sl
									proceed response_1_retrieve;
     64c:	0000000e 	andeq	r0, r0, lr
						proceed response_2;
     650:	0000000c 	andeq	r0, r0, ip
						proceed response_3;
     654:	00000450 	andeq	r0, r0, r0, asr r4
						proceed response_4;
     658:	00001a66 	andeq	r1, r0, r6, ror #20
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     65c:	00000010 	andeq	r0, r0, r0, lsl r0
     660:	0000000c 	andeq	r0, r0, ip
				break;
     664:	00000450 	andeq	r0, r0, r0, asr r4
}
     668:	00001a76 	andeq	r1, r0, r6, ror sl
     66c:	0000001c 	andeq	r0, r0, ip, lsl r0
     670:	0000000c 	andeq	r0, r0, ip
     674:	00000450 	andeq	r0, r0, r0, asr r4
     678:	00000000 	andeq	r0, r0, r0
     67c:	00000010 	andeq	r0, r0, r0, lsl r0
fsm root {
     680:	0000000c 	andeq	r0, r0, ip
     684:	00000450 	andeq	r0, r0, r0, asr r4
     688:	00000000 	andeq	r0, r0, r0
     68c:	00000006 	andeq	r0, r0, r6
     690:	0000000c 	andeq	r0, r0, ip
     694:	00000450 	andeq	r0, r0, r0, asr r4
     698:	00001a92 	muleq	r0, r2, sl
     69c:	00000014 	andeq	r0, r0, r4, lsl r0
     6a0:	0000000c 	andeq	r0, r0, ip
     6a4:	00000450 	andeq	r0, r0, r0, asr r4
     6a8:	00001aa6 	andeq	r1, r0, r6, lsr #21
     6ac:	0000000e 	andeq	r0, r0, lr
     6b0:	00000014 	andeq	r0, r0, r4, lsl r0
     6b4:	00000450 	andeq	r0, r0, r0, asr r4
     6b8:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
     6bc:	00000024 	andeq	r0, r0, r4, lsr #32
     6c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c8:	00000020 	andeq	r0, r0, r0, lsr #32
     6cc:	00000450 	andeq	r0, r0, r0, asr r4
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     6d0:	00001ad8 	ldrdeq	r1, [r0], -r8
     6d4:	0000009c 	muleq	r0, ip, r0
     6d8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
		init_node(node_db);
     6dc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		phys_cc1350(0, MAX_PKT_LEN);
     6e0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     6e4:	89038804 	stmdbhi	r3, {r2, fp, pc}
		tcv_plug (0, &plug_null);
     6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ec:	00000014 	andeq	r0, r0, r4, lsl r0
		sfd = tcv_open (WNONE, 0, 0);
     6f0:	00000450 	andeq	r0, r0, r0, asr r4
     6f4:	00001b74 	andeq	r1, r0, r4, ror fp
     6f8:	00000050 	andeq	r0, r0, r0, asr r0
     6fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
     700:	00018e02 	andeq	r8, r1, r2, lsl #28
			diag("Cannot open tcv interface");
     704:	00000014 	andeq	r0, r0, r4, lsl r0
     708:	00000450 	andeq	r0, r0, r0, asr r4
			halt();
     70c:	00001bc4 	andeq	r1, r0, r4, asr #23
		tcv_control(sfd, PHYSOPT_ON, NULL);
     710:	00000048 	andeq	r0, r0, r8, asr #32
     714:	83080e41 	movwhi	r0, #36417	; 0x8e41
		runfsm receiver(node_db);
     718:	00018e02 	andeq	r8, r1, r2, lsl #28
     71c:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     720:	00000450 	andeq	r0, r0, r0, asr r4
     724:	00001c0c 	andeq	r1, r0, ip, lsl #24
     728:	00000050 	andeq	r0, r0, r0, asr r0
     72c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     730:	00018e02 	andeq	r8, r1, r2, lsl #28
     734:	00000020 	andeq	r0, r0, r0, lsr #32
		ser_inf(get_choice, "%c", &CHOICE);
     738:	00000450 	andeq	r0, r0, r0, asr r4
     73c:	00000000 	andeq	r0, r0, r0
     740:	00000058 	andeq	r0, r0, r8, asr r0
		switch(CHOICE) {
     744:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     748:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     74c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     750:	89038804 	stmdbhi	r3, {r2, fp, pc}
     754:	00018e02 	andeq	r8, r1, r2, lsl #28
     758:	00000018 	andeq	r0, r0, r8, lsl r0
     75c:	00000450 	andeq	r0, r0, r0, asr r4
     760:	00001c5c 	andeq	r1, r0, ip, asr ip
     764:	000000a8 	andeq	r0, r0, r8, lsr #1
     768:	83100e44 	tsthi	r0, #68, 28	; 0x440
     76c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     770:	00018e02 	andeq	r8, r1, r2, lsl #28
				proceed menu;
     774:	00000018 	andeq	r0, r0, r8, lsl r0
     778:	00000450 	andeq	r0, r0, r0, asr r4
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     77c:	00001d04 	andeq	r1, r0, r4, lsl #26
     780:	00000034 	andeq	r0, r0, r4, lsr r0
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     784:	83100e41 	tsthi	r0, #1040	; 0x410
     788:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     78c:	00018e02 	andeq	r8, r1, r2, lsl #28
		DEBUG_PRINT("setting node group ID");
     790:	0000000c 	andeq	r0, r0, ip
     794:	00000450 	andeq	r0, r0, r0, asr r4
    node->gid = gid; 
     798:	00001d38 	andeq	r1, r0, r8, lsr sp
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     79c:	00000018 	andeq	r0, r0, r8, lsl r0
    node->gid = gid; 
     7a0:	00000014 	andeq	r0, r0, r4, lsl r0
		proceed menu;
     7a4:	00000450 	andeq	r0, r0, r0, asr r4
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	00000030 	andeq	r0, r0, r0, lsr r0
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     7b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     7b8:	00000014 	andeq	r0, r0, r4, lsl r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     7bc:	00000450 	andeq	r0, r0, r0, asr r4
     7c0:	00000000 	andeq	r0, r0, r0
		if((node_db->id < 1) || (node_db->id > 25)){
     7c4:	00000038 	andeq	r0, r0, r8, lsr r0
     7c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7cc:	00018e02 	andeq	r8, r1, r2, lsl #28
			strncpy(reason, "Out of Range", 50);
     7d0:	00000040 	andeq	r0, r0, r0, asr #32
     7d4:	00000450 	andeq	r0, r0, r0, asr r4
			proceed invalid_node_id;
     7d8:	00001d50 	andeq	r1, r0, r0, asr sp
     7dc:	0000013c 	andeq	r0, r0, ip, lsr r1
				strncpy(reason, "ID is already in use", 50);
     7e0:	80100e41 	andshi	r0, r0, r1, asr #28
		for(int i = 0; i < node_db->index; i++){
     7e4:	82038104 	andhi	r8, r3, #4, 2
     7e8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7ec:	0b84380e 	bleq	fe10e82c <_estack+0xde10982c>
		proceed menu;
     7f0:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7f4:	07880887 	streq	r0, [r8, r7, lsl #17]
     7f8:	058e0689 	streq	r0, [lr, #1673]	; 0x689
     7fc:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     800:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
		proceed get_new_node_id;
     804:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     808:	c341100e 	movtgt	r1, #4110	; 0x100e
		if (!clear_node_neighbour_array(node_db)){
     80c:	0ec0c1c2 	acseqdm	f4, f2
     810:	000b4100 	andeq	r4, fp, r0, lsl #2
			strncpy(reason, "Error Clearing Node Array", 50);
     814:	0000000c 	andeq	r0, r0, ip
     818:	00000450 	andeq	r0, r0, r0, asr r4
     81c:	00001e8c 	andeq	r1, r0, ip, lsl #29
			proceed error;
     820:	00000024 	andeq	r0, r0, r4, lsr #32
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     824:	0000000c 	andeq	r0, r0, ip
     828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		request_packet->gid = node_db->gid;
     82c:	7c020001 	stcvc	0, cr0, [r2], {1}
     830:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		request_packet->tpe = DISCOVERY_REQUEST;
     834:	00000014 	andeq	r0, r0, r4, lsl r0
		request_packet->request_number = generate_request_num();
     838:	00000824 	andeq	r0, r0, r4, lsr #16
     83c:	00001eb0 			; <UNDEFINED> instruction: 0x00001eb0
		call sender(request_packet, wait_discovery);
     840:	00000016 	andeq	r0, r0, r6, lsl r0
     844:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		request_packet->receiver_id=0;
     848:	00018e02 	andeq	r8, r1, r2, lsl #28
		call sender(request_packet, wait_discovery);
     84c:	0000000c 	andeq	r0, r0, ip
     850:	00000824 	andeq	r0, r0, r4, lsr #16
     854:	00001ec6 	andeq	r1, r0, r6, asr #29
			release;
     858:	0000001a 	andeq	r0, r0, sl, lsl r0
				proceed get_new_node_id;
     85c:	00000018 	andeq	r0, r0, r8, lsl r0
				proceed clear_neighbour_array;
     860:	00000824 	andeq	r0, r0, r4, lsr #16
				proceed create_proto_start;
     864:	00001ee0 	andeq	r1, r0, r0, ror #29
				proceed start_delete_proto;
     868:	0000000e 	andeq	r0, r0, lr
				proceed start_retrieve_proto;
     86c:	83080e41 	movwhi	r0, #36417	; 0x8e41
				proceed display_db;
     870:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
				proceed del_local;
     874:	000ec3ce 	andeq	ip, lr, lr, asr #7
			if(node_db->id == node_db->nnodes[i]){
     878:	00000018 	andeq	r0, r0, r8, lsl r0
     87c:	00000824 	andeq	r0, r0, r4, lsr #16
     880:	00001ef0 	strdeq	r1, [r0], -r0
				strncpy(reason, "ID is already in use", 50);
     884:	0000004c 	andeq	r0, r0, ip, asr #32
     888:	83100e41 	tsthi	r0, #1040	; 0x410
				proceed invalid_node_id;
     88c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     890:	00018e02 	andeq	r8, r1, r2, lsl #28
		for(int i = 0; i < node_db->index; i++){
     894:	00000020 	andeq	r0, r0, r0, lsr #32
		if (discovery_wait_flag == 0){
     898:	00000824 	andeq	r0, r0, r4, lsr #16
			discovery_wait_flag=1;
     89c:	00001f3c 	andeq	r1, r0, ip, lsr pc
     8a0:	0000008c 	andeq	r0, r0, ip, lsl #1
			delay(3000, find_proto_start);
     8a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8a8:	5f018e02 	svcpl	0x00018e02
		if (discovery_wait_flag == 1){
     8ac:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			discovery_wait_flag=0;
     8b0:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     8b4:	000ec4ce 	andeq	ip, lr, lr, asr #9
			delay(3000, display_neighbour_nodes);
     8b8:	00000020 	andeq	r0, r0, r0, lsr #32
     8bc:	00000824 	andeq	r0, r0, r4, lsr #16
     8c0:	00001fc8 	andeq	r1, r0, r8, asr #31
     8c4:	00000070 	andeq	r0, r0, r0, ror r0
     8c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8cc:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     8d0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     8d4:	430b4200 	movwmi	r4, #45568	; 0xb200
     8d8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8dc:	0000003c 	andeq	r0, r0, ip, lsr r0
     8e0:	00000824 	andeq	r0, r0, r4, lsr #16
     8e4:	00002038 	andeq	r2, r0, r8, lsr r0
     8e8:	000000c0 	andeq	r0, r0, r0, asr #1
     8ec:	82080e41 	andhi	r0, r8, #1040	; 0x410
     8f0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     8f4:	0a84300e 	beq	fe10c934 <_estack+0xde107934>
     8f8:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
     8fc:	06880787 	streq	r0, [r8], r7, lsl #15
     900:	048a0589 	streq	r0, [sl], #1417	; 0x589
		if(node_db->index == 0){
     904:	0a6b038e 	beq	1ac1744 <__ccfg+0x1aa179c>
     908:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     90c:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
			proceed menu;
     910:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
fsm root {
     914:	c2c34108 	sbcgt	r4, r3, #8, 2
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     918:	0b41000e 	bleq	1040958 <__ccfg+0x10209b0>
		for (int i=0; i<node_db->index; i++) {
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
     920:	00000824 	andeq	r0, r0, r4, lsr #16
     924:	00000000 	andeq	r0, r0, r0
		proceed menu;
     928:	0000006c 	andeq	r0, r0, ip, rrx
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     92c:	83180e42 	tsthi	r8, #1056	; 0x420
     930:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     934:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     938:	00018e02 	andeq	r8, r1, r2, lsl #28
     93c:	0000000c 	andeq	r0, r0, ip
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     940:	00000824 	andeq	r0, r0, r4, lsr #16
     944:	000020f8 	strdeq	r2, [r0], -r8
			strncpy(reason, "Error: improper ID", 50);
     948:	00000024 	andeq	r0, r0, r4, lsr #32
     94c:	00000018 	andeq	r0, r0, r8, lsl r0
     950:	00000824 	andeq	r0, r0, r4, lsr #16
			proceed error;
     954:	0000211c 	andeq	r2, r0, ip, lsl r1
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     958:	00000080 	andeq	r0, r0, r0, lsl #1
     95c:	83100e42 	tsthi	r0, #1056	; 0x420
		ser_in(get_record_to_create, user_provided_record, 20);
     960:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
     968:	00000014 	andeq	r0, r0, r4, lsl r0
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     96c:	00000824 	andeq	r0, r0, r4, lsr #16
		create_message->gid = node_db->gid;
     970:	00000000 	andeq	r0, r0, r0
     974:	00000070 	andeq	r0, r0, r0, ror r0
     978:	83080e42 	movwhi	r0, #36418	; 0x8e42
		create_message->tpe = CREATE_RECORD;
     97c:	00018e02 	andeq	r8, r1, r2, lsl #28
		create_message->request_number = generate_request_num();
     980:	00000018 	andeq	r0, r0, r8, lsl r0
		create_message->sender_id = node_db->id;
     984:	00000824 	andeq	r0, r0, r4, lsr #16
     988:	00000000 	andeq	r0, r0, r0
     98c:	00000078 	andeq	r0, r0, r8, ror r0
		strncpy(create_message->record, user_provided_record, 20);
     990:	83100e42 	tsthi	r0, #1056	; 0x420
		create_message->receiver_id = user_provided_receiver_id;
     994:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		strncpy(create_message->record, user_provided_record, 20);
     998:	00018e02 	andeq	r8, r1, r2, lsl #28
		response_checker[0] = create_message->request_number;
     99c:	00000020 	andeq	r0, r0, r0, lsr #32
		call sender(create_message, wait);
     9a0:	00000824 	andeq	r0, r0, r4, lsr #16
		response_checker[1] = create_message->tpe;
     9a4:	0000219c 	muleq	r0, ip, r1
     9a8:	000000bc 	strheq	r0, [r0], -ip
		call sender(create_message, wait);
     9ac:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     9b0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     9b4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     9b8:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     9bc:	000b4114 	andeq	r4, fp, r4, lsl r1
     9c0:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     9c4:	00000824 	andeq	r0, r0, r4, lsr #16
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	0000003a 	andeq	r0, r0, sl, lsr r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9d0:	83100e41 	tsthi	r0, #1040	; 0x410
     9d4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			strncpy(reason, "Error: improper node ID", 50);
     9d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9dc:	00000018 	andeq	r0, r0, r8, lsl r0
			proceed error;
     9e0:	00000824 	andeq	r0, r0, r4, lsr #16
     9e4:	00000000 	andeq	r0, r0, r0
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9e8:	00000038 	andeq	r0, r0, r8, lsr r0
     9ec:	83100e41 	tsthi	r0, #1040	; 0x410
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9f0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     9f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     9f8:	0000000c 	andeq	r0, r0, ip
		if (us_pr_in < 0 || us_pr_in > 40){
     9fc:	00000824 	andeq	r0, r0, r4, lsr #16
			strncpy(reason, "Error: invalid index", 50);
     a00:	00000000 	andeq	r0, r0, r0
     a04:	0000000a 	andeq	r0, r0, sl
     a08:	00000018 	andeq	r0, r0, r8, lsl r0
			proceed error;
     a0c:	00000824 	andeq	r0, r0, r4, lsr #16
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a10:	00002258 	andeq	r2, r0, r8, asr r2
     a14:	0000002c 	andeq	r0, r0, ip, lsr #32
     a18:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		delete_record->gid = node_db->gid;
     a1c:	4c018e02 	stcmi	14, cr8, [r1], {2}
		delete_record->tpe = DELETE_RECORD;
     a20:	000ec4ce 	andeq	ip, lr, lr, asr #9
		delete_record->request_number = generate_request_num();
     a24:	0000001c 	andeq	r0, r0, ip, lsl r0
     a28:	00000824 	andeq	r0, r0, r4, lsr #16
		call sender(delete_record, wait);
     a2c:	00002284 	andeq	r2, r0, r4, lsl #5
		delete_record->sender_id = node_db->id;
     a30:	00000060 	andeq	r0, r0, r0, rrx
		delete_record->receiver_id = user_provided_receiver_id;
     a34:	83080e41 	movwhi	r0, #36417	; 0x8e41
		delete_record->record_index = us_pr_in;
     a38:	61018e02 	tstvs	r1, r2, lsl #28
     a3c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
		response_checker[0] = delete_record->request_number;
     a40:	000b4300 	andeq	r4, fp, r0, lsl #6
		call sender(delete_record, wait);
     a44:	00000014 	andeq	r0, r0, r4, lsl r0
     a48:	00000824 	andeq	r0, r0, r4, lsr #16
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	00000040 	andeq	r0, r0, r0, asr #32
     a54:	83080e42 	movwhi	r0, #36418	; 0x8e42
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a58:	00018e02 	andeq	r8, r1, r2, lsl #28
     a5c:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a60:	00000824 	andeq	r0, r0, r4, lsr #16
     a64:	00000000 	andeq	r0, r0, r0
     a68:	0000002c 	andeq	r0, r0, ip, lsr #32
		if (get_id < 1 || get_id > 25){
     a6c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a70:	00018e02 	andeq	r8, r1, r2, lsl #28
			strncpy(reason, "Error: improper node ID", 50);
     a74:	0000001c 	andeq	r0, r0, ip, lsl r0
     a78:	00000824 	andeq	r0, r0, r4, lsr #16
     a7c:	00000000 	andeq	r0, r0, r0
			proceed error;
     a80:	0000003c 	andeq	r0, r0, ip, lsr r0
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a84:	83180e41 	tsthi	r8, #1040	; 0x410
     a88:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     a90:	00018e02 	andeq	r8, r1, r2, lsl #28
     a94:	0000000c 	andeq	r0, r0, ip
		if (beg_for_index < 0 || beg_for_index > 40){
     a98:	00000824 	andeq	r0, r0, r4, lsr #16
     a9c:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error: invalid index", 50);
     aa0:	00000006 	andeq	r0, r0, r6
     aa4:	0000001c 	andeq	r0, r0, ip, lsl r0
			proceed error;
     aa8:	00000824 	andeq	r0, r0, r4, lsr #16
     aac:	000022e4 	andeq	r2, r0, r4, ror #5
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ab0:	00000068 	andeq	r0, r0, r8, rrx
     ab4:	83180e41 	tsthi	r8, #1040	; 0x410
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     ab8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     abc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
		retrieve_record->gid = node_db->gid;
     ac4:	00000014 	andeq	r0, r0, r4, lsl r0
		retrieve_record->tpe = RETRIEVE_RECORD;
     ac8:	00000824 	andeq	r0, r0, r4, lsr #16
		retrieve_record->request_number = generate_request_num();
     acc:	0000234c 	andeq	r2, r0, ip, asr #6
     ad0:	00000050 	andeq	r0, r0, r0, asr r0
		retrieve_record->receiver_id = get_id;
     ad4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ad8:	00018e02 	andeq	r8, r1, r2, lsl #28
		retrieve_record->record_index = beg_for_index;
     adc:	0000002c 	andeq	r0, r0, ip, lsr #32
     ae0:	00000824 	andeq	r0, r0, r4, lsr #16
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     ae4:	0000239c 	muleq	r0, ip, r3
		response_checker[0] = retrieve_record->request_number;
     ae8:	0000009c 	muleq	r0, ip, r0
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     aec:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
		response_checker[1] = retrieve_record->tpe;
     af0:	86088509 	strhi	r8, [r8], -r9, lsl #10
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     af4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     af8:	8a048905 	bhi	122f14 <__ccfg+0x102f6c>
		call sender(retrieve_record, wait);
     afc:	8e028b03 	vmlahi.f64	d8, d2, d3
     b00:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     b04:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     b08:	00000b42 	andeq	r0, r0, r2, asr #22
     b0c:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     b10:	00000824 	andeq	r0, r0, r4, lsr #16
     b14:	00002438 	andeq	r2, r0, r8, lsr r4
		if(node_db->data_base.item_count != 0){
     b18:	00000040 	andeq	r0, r0, r0, asr #32
     b1c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b20:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_out(loop_through_data, "\r\n");
     b24:	00000014 	andeq	r0, r0, r4, lsl r0
     b28:	00000824 	andeq	r0, r0, r4, lsr #16
		proceed menu;
     b2c:	00002478 	andeq	r2, r0, r8, ror r4
		delete_all(node_db);
     b30:	00000034 	andeq	r0, r0, r4, lsr r0
     b34:	83080e42 	movwhi	r0, #36418	; 0x8e42
		proceed menu;
     b38:	00018e02 	andeq	r8, r1, r2, lsl #28
     b3c:	00000018 	andeq	r0, r0, r8, lsl r0
		delay(3000, timeout);
     b40:	00000824 	andeq	r0, r0, r4, lsr #16
     b44:	000024ac 	andeq	r2, r0, ip, lsr #9
		when(&response_flag, menu);
     b48:	0000003c 	andeq	r0, r0, ip, lsr r0
     b4c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		release;
     b50:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b54:	000ec4ce 	andeq	ip, lr, lr, asr #9
     b58:	00000018 	andeq	r0, r0, r8, lsl r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b5c:	00000824 	andeq	r0, r0, r4, lsr #16
     b60:	00000000 	andeq	r0, r0, r0
     b64:	0000003c 	andeq	r0, r0, ip, lsr r0
     b68:	83100e42 	tsthi	r0, #1056	; 0x420
		for (int i=0; i<node_db->index; i++) {
     b6c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b70:	00018e02 	andeq	r8, r1, r2, lsl #28
     b74:	0000000c 	andeq	r0, r0, ip
     b78:	00000824 	andeq	r0, r0, r4, lsr #16
     b7c:	000024e8 	andeq	r2, r0, r8, ror #9
     b80:	00000002 	andeq	r0, r0, r2
     b84:	0000000c 	andeq	r0, r0, ip
     b88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     b90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b94:	0000000c 	andeq	r0, r0, ip
     b98:	00000b84 	andeq	r0, r0, r4, lsl #23
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b9c:	000024ea 	andeq	r2, r0, sl, ror #9
     ba0:	00000002 	andeq	r0, r0, r2
		ser_out(timeout, "\r\nFailed to reach the destination");
     ba4:	0000000c 	andeq	r0, r0, ip
     ba8:	00000b84 	andeq	r0, r0, r4, lsl #23
		proceed menu;
     bac:	000024ec 	andeq	r2, r0, ip, ror #9
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     bb0:	00000002 	andeq	r0, r0, r2
     bb4:	0000000c 	andeq	r0, r0, ip
     bb8:	00000b84 	andeq	r0, r0, r4, lsl #23
		proceed menu;
     bbc:	000024ee 	andeq	r2, r0, lr, ror #9
}
     bc0:	00000002 	andeq	r0, r0, r2
     bc4:	00000014 	andeq	r0, r0, r4, lsl r0
     bc8:	00000b84 	andeq	r0, r0, r4, lsl #23
     bcc:	000024f0 	strdeq	r2, [r0], -r0
     bd0:	00000044 	andeq	r0, r0, r4, asr #32
     bd4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bd8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bdc:	0000000c 	andeq	r0, r0, ip
     be0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     be4:	7c020001 	stcvc	0, cr0, [r2], {1}
     be8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bec:	0000000c 	andeq	r0, r0, ip
     bf0:	00000bdc 	ldrdeq	r0, [r0], -ip
     bf4:	00000000 	andeq	r0, r0, r0
     bf8:	00000002 	andeq	r0, r0, r2
     bfc:	00000018 	andeq	r0, r0, r8, lsl r0
     c00:	00000bdc 	ldrdeq	r0, [r0], -ip
     c04:	00000000 	andeq	r0, r0, r0
     c08:	00000058 	andeq	r0, r0, r8, asr r0
     c0c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     c10:	86038504 	strhi	r8, [r3], -r4, lsl #10
     c14:	00018e02 	andeq	r8, r1, r2, lsl #28
     c18:	0000000c 	andeq	r0, r0, ip
     c1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c20:	7c020001 	stcvc	0, cr0, [r2], {1}
     c24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c28:	0000002c 	andeq	r0, r0, ip, lsr #32
     c2c:	00000c18 	andeq	r0, r0, r8, lsl ip
     c30:	00000000 	andeq	r0, r0, r0
static void devinit_uart (int devnum) {
     c34:	000000cc 	andeq	r0, r0, ip, asr #1
	adddevfunc (ioreq_uart_a, devnum);
     c38:	83100e42 	tsthi	r0, #1056	; 0x420
     c3c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
void udelay (volatile word n) {
     c40:	02018e02 	andeq	r8, r1, #2, 28
     c44:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
	while (n) {
     c48:	000ec3c4 	andeq	ip, lr, r4, asr #7
     c4c:	ce420b44 	vmlsgt.f64	d16, d2, d4
}
     c50:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
	while (n--);
     c54:	00000000 	andeq	r0, r0, r0
     c58:	00000024 	andeq	r0, r0, r4, lsr #32
     c5c:	00000c18 	andeq	r0, r0, r8, lsl ip
		n--;
     c60:	00000000 	andeq	r0, r0, r0
     c64:	00000038 	andeq	r0, r0, r8, lsr r0
     c68:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
void mdelay (volatile word n) {
     c6c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     c70:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	while (n) {
     c74:	4a0b4300 	bmi	2d187c <__ccfg+0x2b18d4>
     c78:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
}
     c7c:	000b4300 	andeq	r4, fp, r0, lsl #6
		udelay (999);
     c80:	0000000c 	andeq	r0, r0, ip
     c84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		n--;
     c88:	7c020001 	stcvc	0, cr0, [r2], {1}
     c8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c90:	00000018 	andeq	r0, r0, r8, lsl r0
     c94:	00000c80 	andeq	r0, r0, r0, lsl #25
void __pi_ondomain (lword d) {
     c98:	0000253c 	andeq	r2, r0, ip, lsr r5
     c9c:	00000034 	andeq	r0, r0, r4, lsr r0
		if (__pi_systat.effpdm > 1)
     ca0:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     ca4:	86038504 	strhi	r8, [r3], -r4, lsl #10
			__pi_systat.effpdm = 1;
     ca8:	00018e02 	andeq	r8, r1, r2, lsl #28
	PRCMPowerDomainOn (d);
     cac:	00000018 	andeq	r0, r0, r8, lsl r0
     cb0:	00000c80 	andeq	r0, r0, r0, lsl #25
     cb4:	00002570 	andeq	r2, r0, r0, ror r5
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     cb8:	00000030 	andeq	r0, r0, r0, lsr r0
     cbc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     cc0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	__pi_systat.ondmns |= d;
     cc4:	00000001 	andeq	r0, r0, r1
     cc8:	00000014 	andeq	r0, r0, r4, lsl r0
}
     ccc:	00000c80 	andeq	r0, r0, r0, lsl #25
     cd0:	000025a0 	andeq	r2, r0, r0, lsr #11
void __pi_offdomain (lword d) {
     cd4:	00000018 	andeq	r0, r0, r8, lsl r0
     cd8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	PRCMPowerDomainOff (d);
     cdc:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ce0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ce4:	00000c80 	andeq	r0, r0, r0, lsl #25
     ce8:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
	if (d & PRCM_DOMAIN_RFCORE) {
     cec:	00000054 	andeq	r0, r0, r4, asr r0
     cf0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cf4:	86058506 	strhi	r8, [r5], -r6, lsl #10
     cf8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cfc:	00018e02 	andeq	r8, r1, r2, lsl #28
     d00:	0000001c 	andeq	r0, r0, ip, lsl r0
	__pi_systat.ondmns &= ~d;
     d04:	00000c80 	andeq	r0, r0, r0, lsl #25
     d08:	0000260c 	andeq	r2, r0, ip, lsl #12
}
     d0c:	00000040 	andeq	r0, r0, r0, asr #32
     d10:	83180e41 	tsthi	r8, #1040	; 0x410
void __pi_syserror (word ec, const char *m) {
     d14:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	diag ("SYSERR: %x, %s", ec, m);
     d18:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d1c:	00018e02 	andeq	r8, r1, r2, lsl #28
  __ASM volatile ("cpsid i" : : : "memory");
     d20:	00000014 	andeq	r0, r0, r4, lsl r0
     d24:	00000c80 	andeq	r0, r0, r0, lsl #25
     d28:	0000264c 	andeq	r2, r0, ip, asr #12
     d2c:	00000024 	andeq	r0, r0, r4, lsr #32
		all_leds_blink;
     d30:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	00000014 	andeq	r0, r0, r4, lsl r0
     d3c:	00000c80 	andeq	r0, r0, r0, lsl #25
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d40:	00002670 	andeq	r2, r0, r0, ror r6
     d44:	00000014 	andeq	r0, r0, r4, lsl r0
     d48:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d4c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d50:	0000000c 	andeq	r0, r0, ip
     d54:	00000c80 	andeq	r0, r0, r0, lsl #25
	while (1) {
     d58:	00002684 	andeq	r2, r0, r4, lsl #13
     d5c:	00000014 	andeq	r0, r0, r4, lsl r0
     d60:	0000001c 	andeq	r0, r0, ip, lsl r0
     d64:	00000c80 	andeq	r0, r0, r0, lsl #25
void tci_run_delay_timer () {
     d68:	00000000 	andeq	r0, r0, r0
	setdel = __pi_mintk - __pi_old;
     d6c:	00000064 	andeq	r0, r0, r4, rrx
     d70:	83180e41 	tsthi	r8, #1040	; 0x410
     d74:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d78:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d7c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d80:	0000001c 	andeq	r0, r0, ip, lsl r0
     d84:	00000c80 	andeq	r0, r0, r0, lsl #25
     d88:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d8c:	00000128 	andeq	r0, r0, r8, lsr #2
	sti_tim;
     d90:	83180e41 	tsthi	r8, #1040	; 0x410
}
     d94:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d98:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     da0:	00000024 	andeq	r0, r0, r4, lsr #32
     da4:	00000c80 	andeq	r0, r0, r0, lsl #25
	cli_aux;
     da8:	00000000 	andeq	r0, r0, r0
     dac:	000000ec 	andeq	r0, r0, ip, ror #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     db0:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     db4:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     db8:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     dbc:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
	sti_aux;
     dc0:	8b038a04 	blhi	e35d8 <__ccfg+0xc3630>
}
     dc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     dc8:	0000000c 	andeq	r0, r0, ip
     dcc:	00000c80 	andeq	r0, r0, r0, lsl #25
void AONRTCIntHandler () {
     dd0:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     dd4:	00000002 	andeq	r0, r0, r2
     dd8:	0000000c 	andeq	r0, r0, ip
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     ddc:	00000c80 	andeq	r0, r0, r0, lsl #25
		if (__pi_utims [0] == 0)
     de0:	00000000 	andeq	r0, r0, r0
     de4:	00000004 	andeq	r0, r0, r4
		if (*(__pi_utims [0])) {
     de8:	0000000c 	andeq	r0, r0, ip
     dec:	00000c80 	andeq	r0, r0, r0, lsl #25
			(*(__pi_utims [0]))--;
     df0:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [1] == 0)
     df4:	00000014 	andeq	r0, r0, r4, lsl r0
		if (*(__pi_utims [1])) {
     df8:	00000018 	andeq	r0, r0, r8, lsl r0
			aux_timer_inactive = 0;
     dfc:	00000c80 	andeq	r0, r0, r0, lsl #25
			(*(__pi_utims [1]))--;
     e00:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [2] == 0)
     e04:	0000001a 	andeq	r0, r0, sl, lsl r0
		if (*(__pi_utims [2])) {
     e08:	83080e41 	movwhi	r0, #36417	; 0x8e41
			(*(__pi_utims [2]))--;
     e0c:	4a018e02 	bmi	6461c <__ccfg+0x44674>
		if (__pi_utims [3] != 0) {
     e10:	000ec3ce 	andeq	ip, lr, lr, asr #7
			if (*(__pi_utims [3])) {
     e14:	0000000c 	andeq	r0, r0, ip
				aux_timer_inactive = 0;
     e18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				(*(__pi_utims [3]))--;
     e1c:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (__pi_systat.ledsts) {
     e20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e24:	0000001c 	andeq	r0, r0, ip, lsl r0
		if (__pi_systat.ledblc++ == 0) {
     e28:	00000e14 	andeq	r0, r0, r4, lsl lr
     e2c:	00002698 	muleq	r0, r8, r6
			if (__pi_systat.ledblk) {
     e30:	0000006c 	andeq	r0, r0, ip, rrx
     e34:	83180e41 	tsthi	r8, #1040	; 0x410
     e38:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e3c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e40:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x2)
     e44:	0000000c 	andeq	r0, r0, ip
     e48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e4c:	7c020001 	stcvc	0, cr0, [r2], {1}
				if (__pi_systat.ledsts & 0x4)
     e50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
				__pi_systat.ledblk = 0;
     e54:	0000001c 	andeq	r0, r0, ip, lsl r0
     e58:	00000e44 	andeq	r0, r0, r4, asr #28
			if (__pi_systat.fstblk)
     e5c:	00002704 	andeq	r2, r0, r4, lsl #14
     e60:	00000078 	andeq	r0, r0, r8, ror r0
				__pi_systat.ledblc = 200;
     e64:	83180e41 	tsthi	r8, #1040	; 0x410
	if (events & AON_RTC_EVFLAGS_CH0) {
     e68:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		cli_tim;
     e6c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		__pi_new += setdel;
     e70:	00018e02 	andeq	r8, r1, r2, lsl #28
     e74:	0000000c 	andeq	r0, r0, ip
		setdel = 0;
     e78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		RISE_N_SHINE;
     e7c:	7c020001 	stcvc	0, cr0, [r2], {1}
		__pi_new += setdel;
     e80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		RISE_N_SHINE;
     e84:	00000030 	andeq	r0, r0, r0, lsr r0
     e88:	00000e74 	andeq	r0, r0, r4, ror lr
		aux_timer_inactive = 1;
     e8c:	0000277c 	andeq	r2, r0, ip, ror r7
     e90:	00000054 	andeq	r0, r0, r4, asr r0
				if (__pi_systat.ledsts & 0x1)
     e94:	810c0e41 	tsthi	ip, r1, asr #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e98:	83028203 	movwhi	r8, #8707	; 0x2203
     e9c:	280e4101 	stmdacs	lr, {r0, r8, lr}
				if (__pi_systat.ledsts & 0x2)
     ea0:	06850784 	streq	r0, [r5], r4, lsl #15
     ea4:	048e0586 	streq	r0, [lr], #1414	; 0x586
     ea8:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
				if (__pi_systat.ledsts & 0x8)
     eac:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
				__pi_systat.ledblk = 1;
     eb0:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     eb4:	000ec1c2 	andeq	ip, lr, r2, asr #3
		if (aux_timer_inactive) {
     eb8:	0000000c 	andeq	r0, r0, ip
			cli_aux;
     ebc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ec0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ec4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ec8:	00000030 	andeq	r0, r0, r0, lsr r0
     ecc:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     ed0:	000027d0 	ldrdeq	r2, [r0], -r0
     ed4:	00000060 	andeq	r0, r0, r0, rrx
     ed8:	810c0e41 	tsthi	ip, r1, asr #28
     edc:	83028203 	movwhi	r8, #8707	; 0x2203
     ee0:	200e4101 	andcs	r4, lr, r1, lsl #2
word tci_update_delay_ticks (Boolean force) {
     ee4:	05850684 	streq	r0, [r5, #1668]	; 0x684
	cli_tim;
     ee8:	0a64048e 	beq	1902128 <__ccfg+0x18e2180>
     eec:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
	if (setdel) {
     ef0:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ef4:	c1c2c341 	bicgt	ip, r2, r1, asr #6
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ef8:	0b41000e 	bleq	1040f38 <__ccfg+0x1020f90>
     efc:	0000000c 	andeq	r0, r0, ip
     f00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f04:	7c020001 	stcvc	0, cr0, [r2], {1}
				AON_RTC_O_CH0CMP)) - gettav ());
     f08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	return NO;
     f0c:	0000000c 	andeq	r0, r0, ip
			setdel = 0;
     f10:	00000efc 	strdeq	r0, [r0], -ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     f14:	00002830 	andeq	r2, r0, r0, lsr r8
     f18:	00000020 	andeq	r0, r0, r0, lsr #32
}
     f1c:	00000018 	andeq	r0, r0, r8, lsl r0
		sti_tim;
     f20:	00000efc 	strdeq	r0, [r0], -ip
		return YES;
     f24:	00002850 	andeq	r2, r0, r0, asr r8
     f28:	00000190 	muleq	r0, r0, r1
     f2c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f30:	86038504 	strhi	r8, [r3], -r4, lsl #10
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f34:	00018e02 	andeq	r8, r1, r2, lsl #28
	UARTDisable (UART0_BASE);
     f38:	00000018 	andeq	r0, r0, r8, lsl r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f3c:	00000efc 	strdeq	r0, [r0], -ip
	UARTDisable (UART0_BASE);
     f40:	000029e0 	andeq	r2, r0, r0, ror #19
	UARTConfigSetExpClk (UART0_BASE,
     f44:	00000048 	andeq	r0, r0, r8, asr #32
     f48:	83100e41 	tsthi	r0, #1040	; 0x410
     f4c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f50:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f54:	00000014 	andeq	r0, r0, r4, lsl r0
     f58:	00000efc 	strdeq	r0, [r0], -ip
     f5c:	00002a28 	andeq	r2, r0, r8, lsr #20
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f60:	00000024 	andeq	r0, r0, r4, lsr #32
     f64:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f68:	00018e02 	andeq	r8, r1, r2, lsl #28
	urates [0] = rate;
     f6c:	00000018 	andeq	r0, r0, r8, lsl r0
}
     f70:	00000efc 	strdeq	r0, [r0], -ip
     f74:	00002a4c 	andeq	r2, r0, ip, asr #20
     f78:	0000005c 	andeq	r0, r0, ip, asr r0
     f7c:	83100e41 	tsthi	r0, #1040	; 0x410
     f80:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f84:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f88:	00000018 	andeq	r0, r0, r8, lsl r0
     f8c:	00000efc 	strdeq	r0, [r0], -ip
     f90:	00002aa8 	andeq	r2, r0, r8, lsr #21
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f94:	00000038 	andeq	r0, r0, r8, lsr r0
     f98:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f9c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     fa0:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_uart_setrate (urates [0], __pi_uart);
     fa4:	00000028 	andeq	r0, r0, r8, lsr #32
     fa8:	00000efc 	strdeq	r0, [r0], -ip
     fac:	00002ae0 	andeq	r2, r0, r0, ror #21
     fb0:	00000180 	andeq	r0, r0, r0, lsl #3
     fb4:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
     fb8:	86058506 	strhi	r8, [r5], -r6, lsl #10
     fbc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	switch (operation) {
     fc0:	02018e02 	andeq	r8, r1, #2, 28
static int ioreq_uart_a (int operation, char *buf, int len) {
     fc4:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
     fc8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	00000030 	andeq	r0, r0, r0, lsr r0
     fd4:	00000efc 	strdeq	r0, [r0], -ip
				*buf++ = uart_a_read;
     fd8:	00002c60 	andeq	r2, r0, r0, ror #24
     fdc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			while (len && uart_a_char_available) {
     fe0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     fe4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     fe8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
			if (len != operation) {
     fec:	89038804 	stmdbhi	r3, {r2, fp, pc}
}
     ff0:	02018e02 	andeq	r8, r1, #2, 28
     ff4:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
			uart_a_disable_int;
     ff8:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
			if (uart_a_char_available) {
     ffc:	000ec3c4 	andeq	ip, lr, r4, asr #7
				*buf++ = uart_a_read;
    1000:	00000b46 	andeq	r0, r0, r6, asr #22
			uart_a_disable_int;
    1004:	00000020 	andeq	r0, r0, r0, lsr #32
    1008:	00000efc 	strdeq	r0, [r0], -ip
			if (uart_a_char_available) {
    100c:	00002d30 	andeq	r2, r0, r0, lsr sp
    1010:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				uart_a_enable_int;
    1014:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    1018:	86038504 	strhi	r8, [r3], -r4, lsl #10
				goto Redo_rx;
    101c:	02018e02 	andeq	r8, r1, #2, 28
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
    1020:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
    1024:	00000ec4 	andeq	r0, r0, r4, asr #29
			return -2;
    1028:	00000018 	andeq	r0, r0, r8, lsl r0
    102c:	00000efc 	strdeq	r0, [r0], -ip
				uart_a_write (*buf);
    1030:	00002f20 	andeq	r2, r0, r0, lsr #30
    1034:	00000070 	andeq	r0, r0, r0, ror r0
			while (len && uart_a_room_in_tx) {
    1038:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    103c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1040:	00000001 	andeq	r0, r0, r1
			if (len != operation) {
    1044:	00000024 	andeq	r0, r0, r4, lsr #32
			uart_a_disable_int;
    1048:	00000efc 	strdeq	r0, [r0], -ip
    104c:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
			if (uart_a_room_in_tx) {
    1050:	00000174 	andeq	r0, r0, r4, ror r1
    1054:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
				uart_a_enable_int;
    1058:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    105c:	87078608 	strhi	r8, [r7, -r8, lsl #12]
				*buf++ = uart_a_read;
    1060:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
			if (uart_a_room_in_tx) {
    1064:	8b038a04 	blhi	e387c <__ccfg+0xc38d4>
				uart_a_write (*buf);
    1068:	00018e02 	andeq	r8, r1, r2, lsl #28
    106c:	0000000c 	andeq	r0, r0, ip
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1074:	7c020001 	stcvc	0, cr0, [r2], {1}
			uart_a_enable_int;
    1078:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    107c:	00000014 	andeq	r0, r0, r4, lsl r0
    1080:	0000106c 	andeq	r1, r0, ip, rrx
			return 0;
    1084:	00003104 	andeq	r3, r0, r4, lsl #2
			if (len == UART_CNTRL_SETRATE) {
    1088:	00000024 	andeq	r0, r0, r4, lsr #32
				if (__pi_uart_setrate (*((word*)buf),
    108c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1090:	00018e02 	andeq	r8, r1, r2, lsl #28
    1094:	0000000c 	andeq	r0, r0, ip
				syserror (EREQPAR, "uar");
    1098:	0000106c 	andeq	r1, r0, ip, rrx
			syserror (ENOOPER, "uai");
    109c:	00003128 	andeq	r3, r0, r8, lsr #2
			if (len == UART_CNTRL_GETRATE) {
    10a0:	00000024 	andeq	r0, r0, r4, lsr #32
				return 1;
    10a4:	0000000c 	andeq	r0, r0, ip
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    10a8:	0000106c 	andeq	r1, r0, ip, rrx
			syserror (ENOOPER, "uai");
    10ac:	0000314c 	andeq	r3, r0, ip, asr #2
    10b0:	00000008 	andeq	r0, r0, r8
    10b4:	0000000c 	andeq	r0, r0, ip
    10b8:	0000106c 	andeq	r1, r0, ip, rrx
    10bc:	00003154 	andeq	r3, r0, r4, asr r1
    10c0:	00000004 	andeq	r0, r0, r4
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	0000106c 	andeq	r1, r0, ip, rrx
    10cc:	00003158 	andeq	r3, r0, r8, asr r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    10d0:	00000004 	andeq	r0, r0, r4
void UART0IntHandler () {
    10d4:	00000018 	andeq	r0, r0, r8, lsl r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10d8:	0000106c 	andeq	r1, r0, ip, rrx
    10dc:	0000315c 	andeq	r3, r0, ip, asr r1
    10e0:	00000048 	andeq	r0, r0, r8, asr #32
    10e4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    10e8:	86038504 	strhi	r8, [r3], -r4, lsl #10
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    10f0:	0000000c 	andeq	r0, r0, ip
		RISE_N_SHINE;
    10f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10f8:	7c020001 	stcvc	0, cr0, [r2], {1}
		i_trigger (devevent (UART_A, READ));
    10fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1100:	00000028 	andeq	r0, r0, r8, lsr #32
    1104:	000010f0 	strdeq	r1, [r0], -r0
    1108:	000031a4 	andeq	r3, r0, r4, lsr #3
    110c:	00000070 	andeq	r0, r0, r0, ror r0
    1110:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1114:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1118:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    111c:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
    1120:	c7ce4214 	bfigt	r4, r4, #4, #11
    1124:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1128:	000b4200 	andeq	r4, fp, r0, lsl #4
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    112c:	0000000c 	andeq	r0, r0, ip
    1130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1134:	7c020001 	stcvc	0, cr0, [r2], {1}
		i_trigger (devevent (UART_A, WRITE));
    1138:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    113c:	00000028 	andeq	r0, r0, r8, lsr #32
    1140:	0000112c 	andeq	r1, r0, ip, lsr #2
		RISE_N_SHINE;
    1144:	00003214 	andeq	r3, r0, r4, lsl r2
    1148:	0000011c 	andeq	r0, r0, ip, lsl r1
    114c:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
		i_trigger (devevent (UART_A, WRITE));
    1150:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1154:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1158:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    115c:	c7ce4214 	bfigt	r4, r4, #4, #11
    1160:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1164:	00000000 	andeq	r0, r0, r0
    1168:	0000000c 	andeq	r0, r0, ip
    116c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1170:	7c020001 	stcvc	0, cr0, [r2], {1}
    1174:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1178:	0000000c 	andeq	r0, r0, ip
}
    117c:	00001168 	andeq	r1, r0, r8, ror #2
    1180:	00003330 	andeq	r3, r0, r0, lsr r3
    1184:	00000020 	andeq	r0, r0, r0, lsr #32
    1188:	00000028 	andeq	r0, r0, r8, lsr #32
    118c:	00001168 	andeq	r1, r0, r8, ror #2
void __buttons_setirq (int val) {
    1190:	00003350 	andeq	r3, r0, r0, asr r3
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1194:	00000230 	andeq	r0, r0, r0, lsr r2
    1198:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    119c:	86078508 	strhi	r8, [r7], -r8, lsl #10
    11a0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    11a4:	8a038904 	bhi	e35bc <__ccfg+0xc3614>
		bn = BUTTON_GPIO (__button_list [i]);
    11a8:	02018e02 	andeq	r8, r1, #2, 28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11ac:	200e0a4f 	andcs	r0, lr, pc, asr #20
    11b0:	00000b42 	andeq	r0, r0, r2, asr #22
    11b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    11b8:	00001168 	andeq	r1, r0, r8, ror #2
    11bc:	00003580 	andeq	r3, r0, r0, lsl #11
    11c0:	00000050 	andeq	r0, r0, r0, asr r0
}
    11c4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    11c8:	86058506 	strhi	r8, [r5], -r6, lsl #10
    11cc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    11d0:	00018e02 	andeq	r8, r1, r2, lsl #28
void __pinlist_setirq (int val) {
    11d4:	0000000c 	andeq	r0, r0, ip
	for (i = 0; i < N_PINLIST; i++) {
    11d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11dc:	7c020001 	stcvc	0, cr0, [r2], {1}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (i = 0; i < N_PINLIST; i++) {
    11e4:	00000020 	andeq	r0, r0, r0, lsr #32
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11e8:	000011d4 	ldrdeq	r1, [r0], -r4
    11ec:	000035d0 	ldrdeq	r3, [r0], -r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11f0:	00000390 	muleq	r0, r0, r3
    11f4:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
    11f8:	86068507 	strhi	r8, [r6], -r7, lsl #10
	for (i = 0; i < N_PINLIST; i++) {
    11fc:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
}
    1200:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    1204:	00000001 	andeq	r0, r0, r1
    1208:	0000000c 	andeq	r0, r0, ip
    120c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void GPIOIntHandler () {
    1210:	7c020001 	stcvc	0, cr0, [r2], {1}
if (buttons_int) {
    1214:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1218:	00000024 	andeq	r0, r0, r4, lsr #32
	buttons_disable ();
    121c:	00001208 	andeq	r1, r0, r8, lsl #4
    1220:	00003960 	andeq	r3, r0, r0, ror #18
	i_trigger ((aword)&__button_list);
    1224:	00000028 	andeq	r0, r0, r8, lsr #32
    1228:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    122c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1230:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    1234:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    1238:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    123c:	0000000b 	andeq	r0, r0, fp
    1240:	00000028 	andeq	r0, r0, r8, lsr #32
    1244:	00001208 	andeq	r1, r0, r8, lsl #4
    1248:	00000000 	andeq	r0, r0, r0
    124c:	0000002c 	andeq	r0, r0, ip, lsr #32
	RISE_N_SHINE;
    1250:	83180e41 	tsthi	r8, #1040	; 0x410
    1254:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1258:	87038604 	strhi	r8, [r3, -r4, lsl #12]
if (pin_sensor_int) {
    125c:	50018e02 	andpl	r8, r1, r2, lsl #28
    1260:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
	i_trigger ((aword)(&__input_pins));
    1264:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    1268:	000b4200 	andeq	r4, fp, r0, lsl #4
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1274:	7c020001 	stcvc	0, cr0, [r2], {1}
    1278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    127c:	0000000c 	andeq	r0, r0, ip
    1280:	0000126c 	andeq	r1, r0, ip, ror #4
    1284:	00003988 	andeq	r3, r0, r8, lsl #19
    1288:	00000030 	andeq	r0, r0, r0, lsr r0
    128c:	0000000c 	andeq	r0, r0, ip
	__pinsen_disable_and_clear;
    1290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	RISE_N_SHINE;
    1294:	7c020001 	stcvc	0, cr0, [r2], {1}
    1298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    129c:	0000000c 	andeq	r0, r0, ip
}
    12a0:	0000128c 	andeq	r1, r0, ip, lsl #5
    12a4:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
    12a8:	00000020 	andeq	r0, r0, r0, lsr #32
    12ac:	0000000c 	andeq	r0, r0, ip
    12b0:	0000128c 	andeq	r1, r0, ip, lsl #5
void system_init () {
    12b4:	000039d8 	ldrdeq	r3, [r0], -r8
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    12bc:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    12c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    12c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12cc:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    12d0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12d4:	000039f0 	strdeq	r3, [r0], -r0
    12d8:	00000008 	andeq	r0, r0, r8
    12dc:	0000000c 	andeq	r0, r0, ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12e0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12e4:	00000000 	andeq	r0, r0, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12e8:	00000006 	andeq	r0, r0, r6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ec:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12f4:	000039f8 	strdeq	r3, [r0], -r8
		pin = (port_confs [i] >> 19) & 0x1f;
    12f8:	00000008 	andeq	r0, r0, r8
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12fc:	0000000c 	andeq	r0, r0, ip
		pin = (port_confs [i] >> 19) & 0x1f;
    1300:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1304:	00000000 	andeq	r0, r0, r0
    1308:	00000006 	andeq	r0, r0, r6
    130c:	0000000c 	andeq	r0, r0, ip
    1310:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
		if (port_confs [i] & 0x80)
    1314:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1318:	00000008 	andeq	r0, r0, r8
    131c:	0000000c 	andeq	r0, r0, ip
		if (port_confs [i] & 0x40)
    1320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1324:	7c020001 	stcvc	0, cr0, [r2], {1}
    1328:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    132c:	0000001c 	andeq	r0, r0, ip, lsl r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1330:	0000131c 	andeq	r1, r0, ip, lsl r3
    1334:	00003a00 	andeq	r3, r0, r0, lsl #20
	all_leds_blink;
    1338:	0000005c 	andeq	r0, r0, ip, asr r0
    133c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1340:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1344:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    1348:	0000100e 	andeq	r1, r0, lr
    134c:	00000014 	andeq	r0, r0, r4, lsl r0
    1350:	0000131c 	andeq	r1, r0, ip, lsl r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1354:	00003a5c 	andeq	r3, r0, ip, asr sl
    1358:	0000002c 	andeq	r0, r0, ip, lsr #32
    135c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1360:	00018e02 	andeq	r8, r1, r2, lsl #28
    1364:	00000018 	andeq	r0, r0, r8, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1368:	0000131c 	andeq	r1, r0, ip, lsl r3
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    136c:	00000000 	andeq	r0, r0, r0
    1370:	00000090 	muleq	r0, r0, r0
	IntEnable (INT_AON_RTC_COMB);
    1374:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1378:	86038504 	strhi	r8, [r3], -r4, lsl #10
    137c:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_malloc_init ();
    1380:	00000014 	andeq	r0, r0, r4, lsl r0
	IntEnable (INT_AON_GPIO_EDGE);
    1384:	0000131c 	andeq	r1, r0, ip, lsl r3
    1388:	00003a88 	andeq	r3, r0, r8, lsl #21
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    138c:	00000018 	andeq	r0, r0, r8, lsl r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1390:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    139c:	0000131c 	andeq	r1, r0, ip, lsl r3
    13a0:	00003aa0 	andeq	r3, r0, r0, lsr #21
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    13a4:	00000060 	andeq	r0, r0, r0, rrx
    13a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
	urates [0] = UART_RATE / 100;
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
    13b4:	0000131c 	andeq	r1, r0, ip, lsl r3
	reinit_uart ();
    13b8:	00003b00 	andeq	r3, r0, r0, lsl #22
	EXTRA_INITIALIZERS;
    13bc:	00000034 	andeq	r0, r0, r4, lsr r0
    13c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    13c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13c8:	00000018 	andeq	r0, r0, r8, lsl r0
    13cc:	0000131c 	andeq	r1, r0, ip, lsl r3
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13d8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    13dc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			devinit [i] . init (devinit [i] . param);
    13e0:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13e4:	0000000c 	andeq	r0, r0, ip
    13e8:	0000131c 	andeq	r1, r0, ip, lsl r3
    13ec:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_UART0_COMB);
    13f0:	0000000c 	andeq	r0, r0, ip
    13f4:	00000018 	andeq	r0, r0, r8, lsl r0
}
    13f8:	0000131c 	andeq	r1, r0, ip, lsl r3
	tci_run_auxiliary_timer ();
    13fc:	00000000 	andeq	r0, r0, r0
		diag ("");
    1400:	00000034 	andeq	r0, r0, r4, lsr r0
    1404:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    1408:	86038504 	strhi	r8, [r3], -r4, lsl #10
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    140c:	00018e02 	andeq	r8, r1, r2, lsl #28
		diag ("Leftover RAM: %d bytes",
    1410:	0000000c 	andeq	r0, r0, ip
    1414:	0000131c 	andeq	r1, r0, ip, lsl r3
    1418:	00000000 	andeq	r0, r0, r0
    141c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1420:	0000000c 	andeq	r0, r0, ip
    1424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1428:	7c020001 	stcvc	0, cr0, [r2], {1}
    142c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1430:	0000000c 	andeq	r0, r0, ip
    1434:	00001420 	andeq	r1, r0, r0, lsr #8
    1438:	00000000 	andeq	r0, r0, r0
    143c:	00000014 	andeq	r0, r0, r4, lsl r0
    1440:	0000000c 	andeq	r0, r0, ip
    1444:	00001420 	andeq	r1, r0, r0, lsr #8
    1448:	00003b34 	andeq	r3, r0, r4, lsr fp
    144c:	00000028 	andeq	r0, r0, r8, lsr #32
    1450:	0000000c 	andeq	r0, r0, ip
    1454:	00001420 	andeq	r1, r0, r0, lsr #8
    1458:	00003b5c 	andeq	r3, r0, ip, asr fp
    145c:	0000004c 	andeq	r0, r0, ip, asr #32
    1460:	0000000c 	andeq	r0, r0, ip
    1464:	00001420 	andeq	r1, r0, r0, lsr #8
    1468:	00003ba8 	andeq	r3, r0, r8, lsr #23
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    146c:	00000150 	andeq	r0, r0, r0, asr r1
    1470:	00000018 	andeq	r0, r0, r8, lsl r0
    1474:	00001420 	andeq	r1, r0, r0, lsr #8
    1478:	00003cf8 	strdeq	r3, [r0], -r8
    147c:	00000118 	andeq	r0, r0, r8, lsl r1
    1480:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    1484:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1488:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
__attribute__ ((noreturn)) void __pi_release () {
    1490:	00001420 	andeq	r1, r0, r0, lsr #8
    1494:	00003e10 	andeq	r3, r0, r0, lsl lr
    1498:	00000020 	andeq	r0, r0, r0, lsr #32
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    149c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
	check_stack_overflow;
    14a0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    14a4:	00000001 	andeq	r0, r0, r1
    14a8:	00000014 	andeq	r0, r0, r4, lsl r0
	update_n_wake (MAX_WORD, NO);
    14ac:	00001420 	andeq	r1, r0, r0, lsr #8
    14b0:	00000000 	andeq	r0, r0, r0
    14b4:	00000060 	andeq	r0, r0, r0, rrx
	for_all_tasks (__pi_curr) {
    14b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    14c0:	0000000c 	andeq	r0, r0, ip
  __ASM volatile ("cpsid i" : : : "memory");
    14c4:	00001420 	andeq	r1, r0, r0, lsr #8
	__SLEEP;
    14c8:	00003e30 	andeq	r3, r0, r0, lsr lr
    14cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d0:	0000000c 	andeq	r0, r0, ip
    14d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	system_event_count ++;
    14d8:	7c020001 	stcvc	0, cr0, [r2], {1}
    14dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14e0:	00000018 	andeq	r0, r0, r8, lsl r0
	switch (__pi_systat.effpdm) {
    14e4:	000014d0 	ldrdeq	r1, [r0], -r0
    14e8:	00003e4c 	andeq	r3, r0, ip, asr #28
    14ec:	000000d4 	ldrdeq	r0, [r0], -r4
			__WFI ();
    14f0:	83100e41 	tsthi	r0, #1040	; 0x410
    14f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    14f8:	00018e02 	andeq	r8, r1, r2, lsl #28
	check_stack_overflow;
    14fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1500:	000014d0 	ldrdeq	r1, [r0], -r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1504:	00003f20 	andeq	r3, r0, r0, lsr #30
    1508:	000000a4 	andeq	r0, r0, r4, lsr #1
			(__pi_curr->code) (tstate (__pi_curr));
    150c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			goto Redo;
    1510:	00018e02 	andeq	r8, r1, r2, lsl #28
	for_all_tasks (__pi_curr) {
    1514:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    151c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1520:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1524:	00000018 	andeq	r0, r0, r8, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1528:	00001514 	andeq	r1, r0, r4, lsl r5
    152c:	00003fc4 	andeq	r3, r0, r4, asr #31
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    1530:	0000007c 	andeq	r0, r0, ip, ror r0
    1534:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1538:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    153c:	00000001 	andeq	r0, r0, r1
			__WFI ();
    1540:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	00001514 	andeq	r1, r0, r4, lsl r5
    1548:	00004040 	andeq	r4, r0, r0, asr #32
}
    154c:	000000ac 	andeq	r0, r0, ip, lsr #1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1550:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    1554:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1558:	0000000c 	andeq	r0, r0, ip
    155c:	00001514 	andeq	r1, r0, r4, lsl r5
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1560:	000040ec 	andeq	r4, r0, ip, ror #1
    1564:	0000005c 	andeq	r0, r0, ip, asr r0
    1568:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    156c:	00001514 	andeq	r1, r0, r4, lsl r5
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1570:	00004148 	andeq	r4, r0, r8, asr #2
    1574:	00000018 	andeq	r0, r0, r8, lsl r0
    1578:	0000000c 	andeq	r0, r0, ip
    157c:	00001514 	andeq	r1, r0, r4, lsl r5
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1580:	00000000 	andeq	r0, r0, r0
    1584:	00000010 	andeq	r0, r0, r0, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1588:	0000000c 	andeq	r0, r0, ip
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    158c:	00001514 	andeq	r1, r0, r4, lsl r5
    1590:	00004160 	andeq	r4, r0, r0, ror #2
    1594:	00000010 	andeq	r0, r0, r0, lsl r0
    1598:	0000000c 	andeq	r0, r0, ip
    159c:	00001514 	andeq	r1, r0, r4, lsl r5
			SysCtrlSetRechargeBeforePowerDown
    15a0:	00004170 	andeq	r4, r0, r0, ror r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    15a4:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    15a8:	00000018 	andeq	r0, r0, r8, lsl r0
    15ac:	00001514 	andeq	r1, r0, r4, lsl r5
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    15b0:	00004184 	andeq	r4, r0, r4, lsl #3
    15b4:	00000064 	andeq	r0, r0, r4, rrx
    15b8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    15bc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15c0:	00018e02 	andeq	r8, r1, r2, lsl #28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    15c4:	0000000c 	andeq	r0, r0, ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15c8:	00001514 	andeq	r1, r0, r4, lsl r5
    15cc:	000041e8 	andeq	r4, r0, r8, ror #3
    15d0:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    15d4:	0000000c 	andeq	r0, r0, ip
			while (!(AONWUCPowerStatusGet () &
    15d8:	00001514 	andeq	r1, r0, r4, lsl r5
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15dc:	000041fc 	strdeq	r4, [r0], -ip
    15e0:	00000014 	andeq	r0, r0, r4, lsl r0
    15e4:	0000000c 	andeq	r0, r0, ip
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15e8:	00001514 	andeq	r1, r0, r4, lsl r5
    15ec:	00004210 	andeq	r4, r0, r0, lsl r2
    15f0:	00000014 	andeq	r0, r0, r4, lsl r0
    15f4:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15f8:	00001514 	andeq	r1, r0, r4, lsl r5
    15fc:	00004224 	andeq	r4, r0, r4, lsr #4
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1600:	00000028 	andeq	r0, r0, r8, lsr #32
    1604:	0000000c 	andeq	r0, r0, ip
			SysCtrlAdjustRechargeAfterPowerDown ();
    1608:	00001514 	andeq	r1, r0, r4, lsl r5
			reinit_uart ();
    160c:	0000424c 	andeq	r4, r0, ip, asr #4
    1610:	00000010 	andeq	r0, r0, r0, lsl r0
    1614:	0000000c 	andeq	r0, r0, ip
}
    1618:	00001514 	andeq	r1, r0, r4, lsl r5
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    161c:	0000425c 	andeq	r4, r0, ip, asr r2
    1620:	0000002c 	andeq	r0, r0, ip, lsr #32
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    1624:	0000000c 	andeq	r0, r0, ip
    1628:	00001514 	andeq	r1, r0, r4, lsl r5
    162c:	00004288 	andeq	r4, r0, r8, lsl #5
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1630:	00000014 	andeq	r0, r0, r4, lsl r0
    1634:	0000000c 	andeq	r0, r0, ip
    1638:	00001514 	andeq	r1, r0, r4, lsl r5
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    163c:	0000429c 	muleq	r0, ip, r2
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1640:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    1644:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1648:	00001514 	andeq	r1, r0, r4, lsl r5
    164c:	000042b0 			; <UNDEFINED> instruction: 0x000042b0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1650:	00000110 	andeq	r0, r0, r0, lsl r1
    1654:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1658:	86038504 	strhi	r8, [r3], -r4, lsl #10
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    165c:	02018e02 	andeq	r8, r1, #2, 28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1660:	00100e76 	andseq	r0, r0, r6, ror lr
    1664:	00000018 	andeq	r0, r0, r8, lsl r0
			PRCMPowerDomainOff (
    1668:	00001514 	andeq	r1, r0, r4, lsl r5
    166c:	000043c0 	andeq	r4, r0, r0, asr #7
	__SLEEP;
    1670:	00000064 	andeq	r0, r0, r4, rrx
    1674:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  __ASM volatile ("cpsie i" : : : "memory");
    1678:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	goto Redo;
    167c:	00000001 	andeq	r0, r0, r1
    1680:	0000000c 	andeq	r0, r0, ip
    1684:	00001514 	andeq	r1, r0, r4, lsl r5
    1688:	00004424 	andeq	r4, r0, r4, lsr #8
    168c:	00000028 	andeq	r0, r0, r8, lsr #32
    1690:	00000014 	andeq	r0, r0, r4, lsl r0
    1694:	00001514 	andeq	r1, r0, r4, lsl r5
    1698:	0000444c 	andeq	r4, r0, ip, asr #8
    169c:	00000150 	andeq	r0, r0, r0, asr r1
    16a0:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    16a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    16a8:	0000000c 	andeq	r0, r0, ip
    16ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    16bc:	000016a8 	andeq	r1, r0, r8, lsr #13
    16c0:	00000000 	andeq	r0, r0, r0
    16c4:	000000f4 	strdeq	r0, [r0], -r4
    16c8:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    16cc:	86058506 	strhi	r8, [r5], -r6, lsl #10
    16d0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    16d4:	00018e02 	andeq	r8, r1, r2, lsl #28
    16d8:	00000028 	andeq	r0, r0, r8, lsr #32
    16dc:	000016a8 	andeq	r1, r0, r8, lsr #13
    16e0:	0000459c 	muleq	r0, ip, r5
    16e4:	00000220 	andeq	r0, r0, r0, lsr #4
	cli_tim;
    16e8:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    16ec:	86088509 	strhi	r8, [r8], -r9, lsl #10
    16f0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
	diag ("PicOS halted");
    16f4:	8a048905 	bhi	123b10 <__ccfg+0x103b68>
	mdelay (500);
    16f8:	8e028b03 	vmlahi.f64	d8, d2, d3
    16fc:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
	setpowermode (2);
    1700:	00000024 	andeq	r0, r0, r4, lsr #32
	__PCB = NULL;
    1704:	00000014 	andeq	r0, r0, r4, lsl r0
	release;
    1708:	000016a8 	andeq	r1, r0, r8, lsr #13
    170c:	000047bc 			; <UNDEFINED> instruction: 0x000047bc
    1710:	00000060 	andeq	r0, r0, r0, rrx
    1714:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
int main (void) {
    1718:	00018e02 	andeq	r8, r1, r2, lsl #28
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    171c:	00000014 	andeq	r0, r0, r4, lsl r0
    1720:	000016a8 	andeq	r1, r0, r8, lsr #13
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    1724:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1728:	00000078 	andeq	r0, r0, r8, ror r0
	system_init ();
    172c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	tcv_init ();
    1730:	00018e02 	andeq	r8, r1, r2, lsl #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    1734:	0000000c 	andeq	r0, r0, ip
    1738:	000016a8 	andeq	r1, r0, r8, lsr #13
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    173c:	0000481c 	andeq	r4, r0, ip, lsl r8
    1740:	00000018 	andeq	r0, r0, r8, lsl r0
    1744:	0000000c 	andeq	r0, r0, ip
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    174c:	7c020001 	stcvc	0, cr0, [r2], {1}
	delay (16, 0);
    1750:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1754:	0000000c 	andeq	r0, r0, ip
    1758:	00001744 	andeq	r1, r0, r4, asr #14
	__pi_release ();
    175c:	00000000 	andeq	r0, r0, r0
    1760:	00000010 	andeq	r0, r0, r0, lsl r0
    1764:	0000000c 	andeq	r0, r0, ip
    1768:	00001744 	andeq	r1, r0, r4, asr #14
    176c:	00000000 	andeq	r0, r0, r0
    1770:	00000018 	andeq	r0, r0, r8, lsl r0
    1774:	0000000c 	andeq	r0, r0, ip
static void killev (__pi_pcb_t *pid) {
    1778:	00001744 	andeq	r1, r0, r4, asr #14
	wfun = (aword)(pid->code);
    177c:	00004834 	andeq	r4, r0, r4, lsr r8
	for_all_tasks (i) {
    1780:	0000004c 	andeq	r0, r0, ip, asr #32
		for (j = 0; j < nevents (i); j++) {
    1784:	00000014 	andeq	r0, r0, r4, lsl r0
    1788:	00001744 	andeq	r1, r0, r4, asr #14
    178c:	00000000 	andeq	r0, r0, r0
			    || i->Events [j] . Event == wfun
    1790:	00000030 	andeq	r0, r0, r0, lsr r0
		for (j = 0; j < nevents (i); j++) {
    1794:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			if (i->Events [j] . Event == (aword)pid
    1798:	00018e02 	andeq	r8, r1, r2, lsl #28
    179c:	00000018 	andeq	r0, r0, r8, lsl r0
    17a0:	00001744 	andeq	r1, r0, r4, asr #14
				wakeupev (i, j);
    17a4:	00004880 	andeq	r4, r0, r0, lsl #17
    17a8:	0000006c 	andeq	r0, r0, ip, rrx
	for_all_tasks (i) {
    17ac:	83100e41 	tsthi	r0, #1040	; 0x410
}
    17b0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b4:	00018e02 	andeq	r8, r1, r2, lsl #28
static void qfree (aword *ch) {
    17b8:	00000014 	andeq	r0, r0, r4, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17bc:	00001744 	andeq	r1, r0, r4, asr #14
	cc = (aword*)(mpools + MA_NP);
    17c0:	000048ec 	andeq	r4, r0, ip, ror #17
	m_setnextp (ch, chunk);
    17c4:	00000016 	andeq	r0, r0, r6, lsl r0
	m_setnextp (cc, ch);
    17c8:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
    17cc:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    17d0:	0000000c 	andeq	r0, r0, ip
    17d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17d8:	7c020001 	stcvc	0, cr0, [r2], {1}
			m_setnextp (cc, m_nextp (chunk));
    17dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17e0:	00000024 	andeq	r0, r0, r4, lsr #32
			m_size (chunk) += m_hdrlen + m_size (ch);
    17e4:	000017d0 	ldrdeq	r1, [r0], -r0
    17e8:	00004904 	andeq	r4, r0, r4, lsl #18
    17ec:	00000028 	andeq	r0, r0, r8, lsr #32
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17f0:	83100e41 	tsthi	r0, #1040	; 0x410
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    17f8:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    17fc:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
			m_setnextp (cc, m_nextp (chunk));
    1800:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
			m_size (ch) += m_hdrlen + m_size (chunk);
    1804:	0000000b 	andeq	r0, r0, fp
    1808:	0000000c 	andeq	r0, r0, ip
    180c:	000017d0 	ldrdeq	r1, [r0], -r0
    1810:	0000492c 	andeq	r4, r0, ip, lsr #18
    1814:	00000008 	andeq	r0, r0, r8
    1818:	0000000c 	andeq	r0, r0, ip
			if (m_size (chunk) >= m_size (ch))
    181c:	000017d0 	ldrdeq	r1, [r0], -r0
    1820:	00000000 	andeq	r0, r0, r0
    1824:	00000022 	andeq	r0, r0, r2, lsr #32
		chunk = m_nextp (chunk))
    1828:	00000018 	andeq	r0, r0, r8, lsl r0
    182c:	000017d0 	ldrdeq	r1, [r0], -r0
    1830:	00000000 	andeq	r0, r0, r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1834:	0000002e 	andeq	r0, r0, lr, lsr #32
	diag_wait (a);
    1838:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	diag_wchar (c, a);
    183c:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
    1840:	000ec4ce 	andeq	ip, lr, lr, asr #9
}
    1844:	00000018 	andeq	r0, r0, r8, lsl r0
    1848:	000017d0 	ldrdeq	r1, [r0], -r0
	syserror (ESTATE, "state");
    184c:	00000000 	andeq	r0, r0, r0
    1850:	00000034 	andeq	r0, r0, r4, lsr r0
    1854:	83100e41 	tsthi	r0, #1040	; 0x410
    1858:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	for (i = 0; i < MAX_UTIMERS; i++)
    185c:	00018e02 	andeq	r8, r1, r2, lsl #28
void utimer_add (address ut) {
    1860:	00000018 	andeq	r0, r0, r8, lsl r0
    1864:	000017d0 	ldrdeq	r1, [r0], -r0
		if (__pi_utims [i] == NULL)
    1868:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    186c:	00000040 	andeq	r0, r0, r0, asr #32
    1870:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		syserror (ERESOURCE, "ut a");
    1874:	86038504 	strhi	r8, [r3], -r4, lsl #10
	__pi_utims [i] = ut;
    1878:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    187c:	0000000c 	andeq	r0, r0, ip
    1880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1884:	7c020001 	stcvc	0, cr0, [r2], {1}
	*t = v;
    1888:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	TCI_RUN_AUXILIARY_TIMER;
    188c:	00000020 	andeq	r0, r0, r0, lsr #32
void update_n_wake (word min, Boolean force) {
    1890:	0000187c 	andeq	r1, r0, ip, ror r8
	if (TCI_UPDATE_DELAY_TICKS (force))
    1894:	00004934 	andeq	r4, r0, r4, lsr r9
    1898:	000000aa 	andeq	r0, r0, sl, lsr #1
    189c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    18a0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    18a4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    18a8:	180e4201 	stmdane	lr, {r0, r9, lr}
    18ac:	00000688 	andeq	r0, r0, r8, lsl #13
    18b0:	0000000c 	andeq	r0, r0, ip
    18b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18b8:	7c020001 	stcvc	0, cr0, [r2], {1}
    18bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18c0:	0000000c 	andeq	r0, r0, ip
    18c4:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    18c8:	000049e0 	andeq	r4, r0, r0, ror #19
    18cc:	00000014 	andeq	r0, r0, r4, lsl r0
    18d0:	00000014 	andeq	r0, r0, r4, lsl r0
		for_all_tasks (i) {
    18d4:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
	__pi_mintk = znew + min;
    18d8:	000049f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    18dc:	00000038 	andeq	r0, r0, r8, lsr r0
			if (!twaiting (i))
    18e0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    18e4:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18e8:	0000000c 	andeq	r0, r0, ip
    18ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    18f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18f8:	00000020 	andeq	r0, r0, r0, lsr #32
    18fc:	000018e8 	andeq	r1, r0, r8, ror #17
    1900:	00004a2c 	andeq	r4, r0, ip, lsr #20
    1904:	00000054 	andeq	r0, r0, r4, asr r0
    1908:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    190c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1910:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1914:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
				wakeuptm (i);
    1918:	00000688 	andeq	r0, r0, r8, lsl #13
