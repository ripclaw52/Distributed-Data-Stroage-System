
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00002485 	andeq	r2, r0, r5, lsl #9
		// Called to issue a wait request
		if (st == WNONE)
       8:	0000247f 	andeq	r2, r0, pc, ror r4
       c:	00002481 	andeq	r2, r0, r1, lsl #9
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00002483 	andeq	r2, r0, r3, lsl #9
      14:	00002483 	andeq	r2, r0, r3, lsl #9
		when (&__input_pins, st);
      18:	00002483 	andeq	r2, r0, r3, lsl #9
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00002483 	andeq	r2, r0, r3, lsl #9
      30:	00002483 	andeq	r2, r0, r3, lsl #9
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	00002483 	andeq	r2, r0, r3, lsl #9
      3c:	00002483 	andeq	r2, r0, r3, lsl #9
      40:	000011a5 	andeq	r1, r0, r5, lsr #3
      44:	00002483 	andeq	r2, r0, r3, lsl #9
      48:	00002483 	andeq	r2, r0, r3, lsl #9
}
      4c:	00002483 	andeq	r2, r0, r3, lsl #9
      50:	00000d65 	andeq	r0, r0, r5, ror #26
      54:	00001065 	andeq	r1, r0, r5, rrx
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00002483 	andeq	r2, r0, r3, lsl #9
	    pbutton++) {
      5c:	00002483 	andeq	r2, r0, r3, lsl #9
      60:	00002483 	andeq	r2, r0, r3, lsl #9
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00002eb5 			; <UNDEFINED> instruction: 0x00002eb5
      68:	00002483 	andeq	r2, r0, r3, lsl #9
      6c:	00002483 	andeq	r2, r0, r3, lsl #9
      70:	00002483 	andeq	r2, r0, r3, lsl #9
      74:	00002483 	andeq	r2, r0, r3, lsl #9
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	00002483 	andeq	r2, r0, r3, lsl #9
      7c:	00002483 	andeq	r2, r0, r3, lsl #9
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	00002483 	andeq	r2, r0, r3, lsl #9
      84:	00002483 	andeq	r2, r0, r3, lsl #9
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	00002483 	andeq	r2, r0, r3, lsl #9
      8c:	00002483 	andeq	r2, r0, r3, lsl #9
      90:	00002483 	andeq	r2, r0, r3, lsl #9
      94:	00002483 	andeq	r2, r0, r3, lsl #9
      98:	00002483 	andeq	r2, r0, r3, lsl #9
		goto Done;

	if (baction == NULL)
      9c:	00002483 	andeq	r2, r0, r3, lsl #9
      a0:	00002483 	andeq	r2, r0, r3, lsl #9
		goto Term;

	(*baction) (pbutton);
      a4:	00002483 	andeq	r2, r0, r3, lsl #9

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	00002483 	andeq	r2, r0, r3, lsl #9
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00002483 	andeq	r2, r0, r3, lsl #9
      b0:	00002483 	andeq	r2, r0, r3, lsl #9
endthread
      b4:	00002483 	andeq	r2, r0, r3, lsl #9
      b8:	00002483 	andeq	r2, r0, r3, lsl #9
      bc:	00002483 	andeq	r2, r0, r3, lsl #9
      c0:	00002483 	andeq	r2, r0, r3, lsl #9
      c4:	00002483 	andeq	r2, r0, r3, lsl #9

000000c8 <sender>:
	return response_message;

};

// sends packet information to other nodes
fsm sender(struct ResponseMessage *message) {
      c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      ca:	4606      	mov	r6, r0
      cc:	b128      	cbz	r0, da <sender+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d02a      	beq.n	128 <_Min_Stack_Size+0x28>
	state CONFIRM_message:
		// Display message was sent
		ser_out(CONFIRM_message, "Message sent\r\n");
		// Exit out of fsm
		finish;
}
      d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      d6:	f001 bb83 	b.w	17e0 <__pi_badstate>
fsm sender(struct ResponseMessage *message) {
      da:	4b24      	ldr	r3, [pc, #144]	; (16c <_Min_Stack_Size+0x6c>)
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	4924      	ldr	r1, [pc, #144]	; (170 <_Min_Stack_Size+0x70>)
fsm sender(struct ResponseMessage *message) {
      de:	681b      	ldr	r3, [r3, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	2222      	movs	r2, #34	; 0x22
fsm sender(struct ResponseMessage *message) {
      e2:	689d      	ldr	r5, [r3, #8]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f002 f822 	bl	2130 <tcv_wnps>
      ec:	4604      	mov	r4, r0
		packet[0] = 0;
      ee:	8006      	strh	r6, [r0, #0]
		packet[1] = message->gid;
      f0:	882b      	ldrh	r3, [r5, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f2:	4f20      	ldr	r7, [pc, #128]	; (174 <_Min_Stack_Size+0x74>)
		packet[1] = message->gid;
      f4:	8043      	strh	r3, [r0, #2]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f6:	6038      	str	r0, [r7, #0]
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	481f      	ldr	r0, [pc, #124]	; (178 <_Min_Stack_Size+0x78>)
      fa:	f001 fdf3 	bl	1ce4 <diag>
		DEBUG_PRINT("I am th message GID %d", message->gid);
      fe:	8829      	ldrh	r1, [r5, #0]
     100:	481e      	ldr	r0, [pc, #120]	; (17c <_Min_Stack_Size+0x7c>)
     102:	f001 fdef 	bl	1ce4 <diag>
		*p = message->tpe;p++;
     106:	78ab      	ldrb	r3, [r5, #2]
     108:	7123      	strb	r3, [r4, #4]
		*p = message->request_number;p++;
     10a:	78eb      	ldrb	r3, [r5, #3]
     10c:	7163      	strb	r3, [r4, #5]
		*p = message->sender_id;p++;
     10e:	792b      	ldrb	r3, [r5, #4]
     110:	71a3      	strb	r3, [r4, #6]
		*p = message->receiver_id;p++;
     112:	796b      	ldrb	r3, [r5, #5]
     114:	71e3      	strb	r3, [r4, #7]
		switch(message->tpe) {
     116:	78ab      	ldrb	r3, [r5, #2]
     118:	2b04      	cmp	r3, #4
     11a:	d80e      	bhi.n	13a <_Min_Stack_Size+0x3a>
     11c:	2b02      	cmp	r3, #2
     11e:	d820      	bhi.n	162 <_Min_Stack_Size+0x62>
     120:	d017      	beq.n	152 <_Min_Stack_Size+0x52>
		tcv_endp(packet);
     122:	6838      	ldr	r0, [r7, #0]
     124:	f001 ff1a 	bl	1f5c <tcv_endp>
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2001      	movs	r0, #1
     12a:	4915      	ldr	r1, [pc, #84]	; (180 <_Min_Stack_Size+0x80>)
     12c:	f002 fa7e 	bl	262c <ser_out>
}
     130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		finish;
     134:	2000      	movs	r0, #0
     136:	f001 bd33 	b.w	1ba0 <kill>
     13a:	2b05      	cmp	r3, #5
     13c:	d1f1      	bne.n	122 <_Min_Stack_Size+0x22>
				*p = message->status;p++;
     13e:	79ab      	ldrb	r3, [r5, #6]
				strncpy(p, message->record, sizeof(message->record));
     140:	2214      	movs	r2, #20
				*p = message->status;p++;
     142:	7223      	strb	r3, [r4, #8]
				*p = message->padding;p++;
     144:	79eb      	ldrb	r3, [r5, #7]
				strncpy(p, message->record, sizeof(message->record));
     146:	f105 0108 	add.w	r1, r5, #8
				*p = message->padding;p++;
     14a:	7263      	strb	r3, [r4, #9]
				strncpy(p, message->record, sizeof(message->record));
     14c:	f104 000a 	add.w	r0, r4, #10
     150:	e004      	b.n	15c <_Min_Stack_Size+0x5c>
				strncpy(p, message->record, sizeof(message->record));
     152:	2214      	movs	r2, #20
     154:	f105 0108 	add.w	r1, r5, #8
     158:	f104 0008 	add.w	r0, r4, #8
				strncpy(p, message->record, sizeof(message->record));
     15c:	f001 fc55 	bl	1a0a <__pi_strncpy>
				break;
     160:	e7df      	b.n	122 <_Min_Stack_Size+0x22>
				*p = message->record_index;p++;
     162:	7f2b      	ldrb	r3, [r5, #28]
     164:	7223      	strb	r3, [r4, #8]
				*p = message->padding;
     166:	79eb      	ldrb	r3, [r5, #7]
     168:	7263      	strb	r3, [r4, #9]
				break;
     16a:	e7da      	b.n	122 <_Min_Stack_Size+0x22>
     16c:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     170:	20000000 	andcs	r0, r0, r0
     174:	2000055c 	andcs	r0, r0, ip, asr r5
     178:	00004a14 	andeq	r4, r0, r4, lsl sl
     17c:	00004a26 	andeq	r4, r0, r6, lsr #20
     180:	00004a3d 	andeq	r4, r0, sp, lsr sl

00000184 <reset_array>:
		node->nnodes[i] = 0;
     184:	2200      	movs	r2, #0
     186:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     18a:	f200 4081 	addw	r0, r0, #1153	; 0x481
     18e:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     192:	4283      	cmp	r3, r0
     194:	d1fb      	bne.n	18e <reset_array+0xa>
}
     196:	4770      	bx	lr

00000198 <init_node>:
bool init_node(struct Node* node){
     198:	b510      	push	{r4, lr}
    node->id  = 0;                  // default id value 0
     19a:	2400      	movs	r4, #0
     19c:	7004      	strb	r4, [r0, #0]
    node->gid = 0;                  // default gid value 0
     19e:	8044      	strh	r4, [r0, #2]
    node->index = 0;                // default entry count 0
     1a0:	f880 4481 	strb.w	r4, [r0, #1153]	; 0x481
    node->data_base.item_count = 0; // default no items in array
     1a4:	f880 4464 	strb.w	r4, [r0, #1124]	; 0x464
	reset_array(node);
     1a8:	f7ff ffec 	bl	184 <reset_array>
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	4802      	ldr	r0, [pc, #8]	; (1b8 <init_node+0x20>)
     1ae:	f001 fd99 	bl	1ce4 <diag>
};
     1b2:	4620      	mov	r0, r4
     1b4:	bd10      	pop	{r4, pc}
     1b6:	bf00      	nop
     1b8:	00004a4c 	andeq	r4, r0, ip, asr #20

000001bc <generate_request_num>:
uint8_t generate_request_num(void){
     1bc:	b508      	push	{r3, lr}
    return (uint8_t) (rand() % 255);
     1be:	f004 fbe3 	bl	4988 <rand>
     1c2:	23ff      	movs	r3, #255	; 0xff
     1c4:	fb90 f3f3 	sdiv	r3, r0, r3
     1c8:	4418      	add	r0, r3
}
     1ca:	b2c0      	uxtb	r0, r0
     1cc:	bd08      	pop	{r3, pc}

000001ce <clear_node_neighbour_array>:
            node->nnodes[i] = 0; // set to null byte
     1ce:	2200      	movs	r2, #0
     1d0:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     1d4:	f200 4081 	addw	r0, r0, #1153	; 0x481
     1d8:	f803 2b01 	strb.w	r2, [r3], #1
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	4283      	cmp	r3, r0
     1de:	d1fb      	bne.n	1d8 <clear_node_neighbour_array+0xa>
};
     1e0:	2001      	movs	r0, #1
     1e2:	4770      	bx	lr

000001e4 <delete_record>:
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	f890 3464 	ldrb.w	r3, [r0, #1124]	; 0x464
     1e8:	b143      	cbz	r3, 1fc <delete_record+0x18>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ea:	221c      	movs	r2, #28
     1ec:	fb02 0101 	mla	r1, r2, r1, r0
     1f0:	2200      	movs	r2, #0
        node->data_base.item_count -= 1;
     1f2:	3b01      	subs	r3, #1
        node->data_base.item_array[index].data_entry[0] = '\0';
     1f4:	714a      	strb	r2, [r1, #5]
        node->data_base.item_array[index].timestamp = 0;
     1f6:	61ca      	str	r2, [r1, #28]
        node->data_base.item_count -= 1;
     1f8:	f880 3464 	strb.w	r3, [r0, #1124]	; 0x464
};
     1fc:	2000      	movs	r0, #0
     1fe:	4770      	bx	lr

00000200 <delete_all>:
bool delete_all(struct Node *node){
     200:	b510      	push	{r4, lr}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     202:	f890 4464 	ldrb.w	r4, [r0, #1124]	; 0x464
     206:	b164      	cbz	r4, 222 <delete_all+0x22>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	2300      	movs	r3, #0
     20a:	4601      	mov	r1, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	461a      	mov	r2, r3
        for(int i = 0; i <= node->data_base.item_count; i++){
     20e:	3301      	adds	r3, #1
     210:	429c      	cmp	r4, r3
            node->data_base.item_array[i].data_entry[0] = '\0';
     212:	714a      	strb	r2, [r1, #5]
            node->data_base.item_array[i].timestamp = 0;
     214:	f841 2f1c 	str.w	r2, [r1, #28]!
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	daf9      	bge.n	20e <delete_all+0xe>
    node->data_base.item_count = 0;
     21a:	f880 2464 	strb.w	r2, [r0, #1124]	; 0x464
    	return false;
     21e:	2000      	movs	r0, #0
}
     220:	bd10      	pop	{r4, pc}
        return true;
     222:	2001      	movs	r0, #1
     224:	e7fc      	b.n	220 <delete_all+0x20>

00000226 <assemble_response_message>:
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     22a:	4680      	mov	r8, r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	201e      	movs	r0, #30
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     22e:	461d      	mov	r5, r3
     230:	460f      	mov	r7, r1
     232:	4616      	mov	r6, r2
     234:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
     238:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	f001 fcd8 	bl	1bf0 <__pi_malloc>
	response_message->tpe = RESPONSE;
     240:	2305      	movs	r3, #5
     242:	7083      	strb	r3, [r0, #2]
	response_message->status = status;
     244:	f89d 3020 	ldrb.w	r3, [sp, #32]
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	4604      	mov	r4, r0
	response_message->gid = gid;
     24a:	f8a0 8000 	strh.w	r8, [r0]
	response_message->request_number = request_number;
     24e:	70c7      	strb	r7, [r0, #3]
	response_message->sender_id = sender_id;
     250:	7106      	strb	r6, [r0, #4]
	response_message->receiver_id = receiver_id;
     252:	7145      	strb	r5, [r0, #5]
	response_message->status = status;
     254:	7183      	strb	r3, [r0, #6]
	if (!padding){
     256:	f1ba 0f00 	cmp.w	sl, #0
     25a:	d101      	bne.n	260 <assemble_response_message+0x3a>
		response_message->padding = padding;
     25c:	f880 a007 	strb.w	sl, [r0, #7]
	if (rec != NULL){
     260:	f1b9 0f00 	cmp.w	r9, #0
     264:	d005      	beq.n	272 <assemble_response_message+0x4c>
		strncpy(response_message->record, rec, 20);
     266:	2214      	movs	r2, #20
     268:	4649      	mov	r1, r9
     26a:	f104 0008 	add.w	r0, r4, #8
     26e:	f001 fbcc 	bl	1a0a <__pi_strncpy>
};
     272:	4620      	mov	r0, r4
     274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00000278 <receiver>:

// receives packet information from wireless connected nodes
fsm receiver(struct Node* node_db) {
     278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     27c:	4b90      	ldr	r3, [pc, #576]	; (4c0 <receiver+0x248>)
     27e:	b092      	sub	sp, #72	; 0x48
     280:	681b      	ldr	r3, [r3, #0]
     282:	689c      	ldr	r4, [r3, #8]
     284:	2809      	cmp	r0, #9
     286:	f200 81d2 	bhi.w	62e <receiver+0x3b6>
     28a:	e8df f000 	tbb	[pc, r0]
     28e:	635c0c05 	cmpvs	ip, #1280	; 0x500
     292:	877d716a 	ldrbhi	r7, [sp, -sl, ror #2]!
     296:	4b8a9b91 	blmi	fe2a70e2 <_estack+0xde2a20e2>
	address incoming_packet;
	char array[20];

	state receiving:
		// Get the next packet queued for input at the session (sfd)
		incoming_packet = tcv_rnp(receiving, sfd);
     29a:	2000      	movs	r0, #0
     29c:	6819      	ldr	r1, [r3, #0]
     29e:	f001 ff07 	bl	20b0 <tcv_rnp>
     2a2:	4b89      	ldr	r3, [pc, #548]	; (4c8 <receiver+0x250>)
     2a4:	6018      	str	r0, [r3, #0]
	state ok:
		//uint8_t tpe;
		//uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a6:	4d88      	ldr	r5, [pc, #544]	; (4c8 <receiver+0x250>)
     2a8:	4f88      	ldr	r7, [pc, #544]	; (4cc <receiver+0x254>)
     2aa:	682b      	ldr	r3, [r5, #0]
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	4888      	ldr	r0, [pc, #544]	; (4d0 <receiver+0x258>)
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2ae:	1c9a      	adds	r2, r3, #2
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2b0:	7919      	ldrb	r1, [r3, #4]
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2b2:	603a      	str	r2, [r7, #0]
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2b4:	f001 fd16 	bl	1ce4 <diag>

		//if (bytes_read != 1){
			//proceed error; //NOTE: NO ERROR STATE
		//};
		// in each switch case where we send a response using call (), we may be able to remove the return state...
		switch (response_message_5->tpe){
     2b8:	683b      	ldr	r3, [r7, #0]
     2ba:	789e      	ldrb	r6, [r3, #2]
     2bc:	2e05      	cmp	r6, #5
     2be:	f200 81b1 	bhi.w	624 <receiver+0x3ac>
     2c2:	e8df f016 	tbh	[pc, r6, lsl #1]
     2c6:	00290006 	eoreq	r0, r9, r6
     2ca:	00bf0088 	adcseq	r0, pc, r8, lsl #1
     2ce:	01710137 	cmneq	r1, r7, lsr r1
			
			Because this is one of the scenarios where the packets are the same we can send back the packet with any required modifications
			*/
			case DISCOVERY_REQUEST: ;
				// respondng with this
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d2:	201e      	movs	r0, #30
     2d4:	f001 fc8c 	bl	1bf0 <__pi_malloc>
				// receiving this
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
				DEBUG_PRINT("\r\ndiscover gid: %u\r\nNode gid:%u", discovery_request_message->gid, node_db->gid);*/
				// if the group_ids match
				if (discovery_request_message->gid == node_db->gid){
     2da:	8863      	ldrh	r3, [r4, #2]
     2dc:	886a      	ldrh	r2, [r5, #2]
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2de:	4606      	mov	r6, r0
				if (discovery_request_message->gid == node_db->gid){
     2e0:	429a      	cmp	r2, r3
     2e2:	d130      	bne.n	346 <receiver+0xce>
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	487b      	ldr	r0, [pc, #492]	; (4d4 <receiver+0x25c>)
     2e6:	f001 fcfd 	bl	1ce4 <diag>
					response_message_0->gid = discovery_request_message->gid;
     2ea:	886b      	ldrh	r3, [r5, #2]
					response_message_0->request_number = discovery_request_message->request_number;
					response_message_0->sender_id = node_db->id;
					response_message_0->receiver_id = discovery_request_message->sender_id;

					// NOTE: return_from_sender might be optional, in which case it should just return to here and then break
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	4879      	ldr	r0, [pc, #484]	; (4d4 <receiver+0x25c>)
					response_message_0->gid = discovery_request_message->gid;
     2ee:	8033      	strh	r3, [r6, #0]
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	2301      	movs	r3, #1
     2f2:	70b3      	strb	r3, [r6, #2]
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	796b      	ldrb	r3, [r5, #5]
     2f6:	70f3      	strb	r3, [r6, #3]
					response_message_0->sender_id = node_db->id;
     2f8:	7823      	ldrb	r3, [r4, #0]
     2fa:	7133      	strb	r3, [r6, #4]
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	79ab      	ldrb	r3, [r5, #6]
     2fe:	7173      	strb	r3, [r6, #5]
					DEBUG_PRINT("\r\nSending to sender");
     300:	f001 fcf0 	bl	1ce4 <diag>
					call sender(response_message_0, done_case);
     304:	4631      	mov	r1, r6
     306:	4874      	ldr	r0, [pc, #464]	; (4d8 <receiver+0x260>)
     308:	f001 fcc6 	bl	1c98 <__pi_fork>
     30c:	2102      	movs	r1, #2
     30e:	f001 fb2d 	bl	196c <__pi_join>
     312:	b1c0      	cbz	r0, 346 <receiver+0xce>
     314:	f001 f886 	bl	1424 <__pi_release>

			Based on the specifications, there is no response when this kind of message is received.
			*/
			case DISCOVERY_RESPONSE: ;
				// receiving this, no response.
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	6829      	ldr	r1, [r5, #0]
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
*/
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31a:	8862      	ldrh	r2, [r4, #2]
     31c:	884b      	ldrh	r3, [r1, #2]
     31e:	429a      	cmp	r2, r3
     320:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
     324:	d103      	bne.n	32e <receiver+0xb6>
     326:	798a      	ldrb	r2, [r1, #6]
     328:	1e50      	subs	r0, r2, #1
     32a:	2817      	cmp	r0, #23
     32c:	d902      	bls.n	334 <receiver+0xbc>
     32e:	18e2      	adds	r2, r4, r3
     330:	f892 2468 	ldrb.w	r2, [r2, #1128]	; 0x468
     334:	18e0      	adds	r0, r4, r3
     336:	f880 2468 	strb.w	r2, [r0, #1128]	; 0x468
				// increment the index if the insertion succeeded.
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33a:	7989      	ldrb	r1, [r1, #6]
     33c:	4291      	cmp	r1, r2
     33e:	d102      	bne.n	346 <receiver+0xce>
					node_db->index+=1;
     340:	3301      	adds	r3, #1
     342:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
				break;

		};
	state done_case:
		tcv_endp(incoming_packet);
     346:	4b60      	ldr	r3, [pc, #384]	; (4c8 <receiver+0x250>)
     348:	6818      	ldr	r0, [r3, #0]
     34a:	f001 fe07 	bl	1f5c <tcv_endp>
		proceed receiving;
     34e:	2000      	movs	r0, #0
     350:	f001 face 	bl	18f0 <proceed>
	
	// Succeeded in performing requested action
	state response_1_create:
		ser_out(response_1_create, "\r\nData Saved");
     354:	2003      	movs	r0, #3
     356:	4961      	ldr	r1, [pc, #388]	; (4dc <receiver+0x264>)
     358:	f002 f968 	bl	262c <ser_out>
		proceed receiving;
     35c:	2000      	movs	r0, #0
     35e:	f001 fac7 	bl	18f0 <proceed>
	state response_1_delete:
		ser_out(response_1_delete, "\r\nRecord Deleted");
     362:	2004      	movs	r0, #4
     364:	495e      	ldr	r1, [pc, #376]	; (4e0 <receiver+0x268>)
     366:	f002 f961 	bl	262c <ser_out>
		proceed receiving;
     36a:	2000      	movs	r0, #0
     36c:	f001 fac0 	bl	18f0 <proceed>
	state response_1_retrieve:
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	4b56      	ldr	r3, [pc, #344]	; (4cc <receiver+0x254>)
     372:	2005      	movs	r0, #5
     374:	681a      	ldr	r2, [r3, #0]
     376:	495b      	ldr	r1, [pc, #364]	; (4e4 <receiver+0x26c>)
     378:	f102 0308 	add.w	r3, r2, #8
     37c:	7912      	ldrb	r2, [r2, #4]
     37e:	f002 f9c7 	bl	2710 <ser_outf>
		proceed receiving;
     382:	2000      	movs	r0, #0
     384:	f001 fab4 	bl	18f0 <proceed>
	
	// Failed to perform requests action
	state response_2:
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	4b50      	ldr	r3, [pc, #320]	; (4cc <receiver+0x254>)
     38a:	2006      	movs	r0, #6
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	4956      	ldr	r1, [pc, #344]	; (4e8 <receiver+0x270>)
     390:	791a      	ldrb	r2, [r3, #4]
     392:	f002 f9bd 	bl	2710 <ser_outf>
		proceed receiving;
     396:	2000      	movs	r0, #0
     398:	f001 faaa 	bl	18f0 <proceed>
	state response_3:
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	4b4b      	ldr	r3, [pc, #300]	; (4cc <receiver+0x254>)
     39e:	2007      	movs	r0, #7
     3a0:	681b      	ldr	r3, [r3, #0]
     3a2:	4952      	ldr	r1, [pc, #328]	; (4ec <receiver+0x274>)
     3a4:	791a      	ldrb	r2, [r3, #4]
     3a6:	f002 f9b3 	bl	2710 <ser_outf>
		proceed receiving;
     3aa:	2000      	movs	r0, #0
     3ac:	f001 faa0 	bl	18f0 <proceed>
	state response_4:
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	4b46      	ldr	r3, [pc, #280]	; (4cc <receiver+0x254>)
     3b2:	2008      	movs	r0, #8
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	494e      	ldr	r1, [pc, #312]	; (4f0 <receiver+0x278>)
     3b8:	791a      	ldrb	r2, [r3, #4]
     3ba:	f002 f9a9 	bl	2710 <ser_outf>
		proceed receiving;
     3be:	2000      	movs	r0, #0
     3c0:	f001 fa96 	bl	18f0 <proceed>

	// likely want to respond with error message
	state error:
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	484b      	ldr	r0, [pc, #300]	; (4f4 <receiver+0x27c>)
     3c6:	f001 fc8d 	bl	1ce4 <diag>
		// handle error
		// retry?
		proceed receiving;
     3ca:	2000      	movs	r0, #0
     3cc:	f001 fa90 	bl	18f0 <proceed>
		
}
     3d0:	b012      	add	sp, #72	; 0x48
     3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d6:	201e      	movs	r0, #30
     3d8:	f001 fc0a 	bl	1bf0 <__pi_malloc>
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	682d      	ldr	r5, [r5, #0]
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3de:	7823      	ldrb	r3, [r4, #0]
     3e0:	79ea      	ldrb	r2, [r5, #7]
     3e2:	429a      	cmp	r2, r3
     3e4:	d103      	bne.n	3ee <receiver+0x176>
     3e6:	886a      	ldrh	r2, [r5, #2]
     3e8:	8863      	ldrh	r3, [r4, #2]
     3ea:	429a      	cmp	r2, r3
     3ec:	d003      	beq.n	3f6 <receiver+0x17e>
					DEBUG_PRINT("\r\nCreate rec we broke");
     3ee:	4842      	ldr	r0, [pc, #264]	; (4f8 <receiver+0x280>)
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	f001 fc78 	bl	1ce4 <diag>
					break;
     3f4:	e7a7      	b.n	346 <receiver+0xce>
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f6:	2114      	movs	r1, #20
     3f8:	4840      	ldr	r0, [pc, #256]	; (4fc <receiver+0x284>)
     3fa:	f001 fc73 	bl	1ce4 <diag>
					DEBUG_PRINT("\r\nCreate rec second if");
     3fe:	4840      	ldr	r0, [pc, #256]	; (500 <receiver+0x288>)
     400:	f001 fc70 	bl	1ce4 <diag>
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	f894 3464 	ldrb.w	r3, [r4, #1124]	; 0x464
     408:	2b28      	cmp	r3, #40	; 0x28
     40a:	d017      	beq.n	43c <receiver+0x1c4>
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	483d      	ldr	r0, [pc, #244]	; (504 <receiver+0x28c>)
     40e:	f001 fc69 	bl	1ce4 <diag>
						status = (uint8_t) SUCCESS;
     412:	2601      	movs	r6, #1
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	483c      	ldr	r0, [pc, #240]	; (508 <receiver+0x290>)
     416:	f001 fc65 	bl	1ce4 <diag>
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41a:	7822      	ldrb	r2, [r4, #0]
     41c:	8860      	ldrh	r0, [r4, #2]
     41e:	4c3b      	ldr	r4, [pc, #236]	; (50c <receiver+0x294>)
     420:	7969      	ldrb	r1, [r5, #5]
     422:	79eb      	ldrb	r3, [r5, #7]
     424:	9402      	str	r4, [sp, #8]
     426:	2400      	movs	r4, #0
     428:	e9cd 6400 	strd	r6, r4, [sp]
     42c:	f7ff fefb 	bl	226 <assemble_response_message>
     430:	4604      	mov	r4, r0
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     432:	4837      	ldr	r0, [pc, #220]	; (510 <receiver+0x298>)
     434:	f001 fc56 	bl	1ce4 <diag>
					call sender(response_message_2, done_case);
     438:	4621      	mov	r1, r4
     43a:	e764      	b.n	306 <receiver+0x8e>
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	4835      	ldr	r0, [pc, #212]	; (514 <receiver+0x29c>)
     43e:	f001 fc51 	bl	1ce4 <diag>
						status = (uint8_t) DB_FULL;
     442:	e7e7      	b.n	414 <receiver+0x19c>
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	201e      	movs	r0, #30
     446:	f001 fbd3 	bl	1bf0 <__pi_malloc>
				DEBUG_PRINT("\r\nDelete rec");
     44a:	4833      	ldr	r0, [pc, #204]	; (518 <receiver+0x2a0>)
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("\r\nDelete rec");
     44e:	f001 fc49 	bl	1ce4 <diag>
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     452:	7820      	ldrb	r0, [r4, #0]
     454:	79eb      	ldrb	r3, [r5, #7]
     456:	8862      	ldrh	r2, [r4, #2]
     458:	8869      	ldrh	r1, [r5, #2]
     45a:	9000      	str	r0, [sp, #0]
     45c:	482f      	ldr	r0, [pc, #188]	; (51c <receiver+0x2a4>)
     45e:	f001 fc41 	bl	1ce4 <diag>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     462:	886a      	ldrh	r2, [r5, #2]
     464:	8863      	ldrh	r3, [r4, #2]
     466:	429a      	cmp	r2, r3
     468:	d103      	bne.n	472 <receiver+0x1fa>
     46a:	79ea      	ldrb	r2, [r5, #7]
     46c:	7823      	ldrb	r3, [r4, #0]
     46e:	429a      	cmp	r2, r3
     470:	d001      	beq.n	476 <receiver+0x1fe>
					DEBUG_PRINT("\r\nDelete rec first if");
     472:	482b      	ldr	r0, [pc, #172]	; (520 <receiver+0x2a8>)
     474:	e7bc      	b.n	3f0 <receiver+0x178>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     476:	7a2b      	ldrb	r3, [r5, #8]
     478:	2b28      	cmp	r3, #40	; 0x28
     47a:	f63f af64 	bhi.w	346 <receiver+0xce>
					DEBUG_PRINT("\r\nDelete rec second if");
     47e:	4829      	ldr	r0, [pc, #164]	; (524 <receiver+0x2ac>)
     480:	f001 fc30 	bl	1ce4 <diag>
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	4620      	mov	r0, r4
     486:	7a29      	ldrb	r1, [r5, #8]
     488:	f7ff feac 	bl	1e4 <delete_record>
     48c:	b198      	cbz	r0, 4b6 <receiver+0x23e>
						DEBUG_PRINT("\r\nDelete rec third if");
     48e:	4826      	ldr	r0, [pc, #152]	; (528 <receiver+0x2b0>)
     490:	f001 fc28 	bl	1ce4 <diag>
						status = (uint8_t) SUCCESS;
     494:	2601      	movs	r6, #1
					DEBUG_PRINT("\r\nDelete assemble le response");
     496:	4825      	ldr	r0, [pc, #148]	; (52c <receiver+0x2b4>)
     498:	f001 fc24 	bl	1ce4 <diag>
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	7822      	ldrb	r2, [r4, #0]
     49e:	8860      	ldrh	r0, [r4, #2]
     4a0:	4c1a      	ldr	r4, [pc, #104]	; (50c <receiver+0x294>)
     4a2:	79eb      	ldrb	r3, [r5, #7]
     4a4:	7969      	ldrb	r1, [r5, #5]
     4a6:	9402      	str	r4, [sp, #8]
     4a8:	2400      	movs	r4, #0
     4aa:	e9cd 6400 	strd	r6, r4, [sp]
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4ae:	f7ff feba 	bl	226 <assemble_response_message>
     4b2:	4601      	mov	r1, r0
     4b4:	e727      	b.n	306 <receiver+0x8e>
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b6:	481e      	ldr	r0, [pc, #120]	; (530 <receiver+0x2b8>)
     4b8:	f001 fc14 	bl	1ce4 <diag>
     4bc:	e7eb      	b.n	496 <receiver+0x21e>
     4be:	bf00      	nop
     4c0:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     4c4:	20000000 	andcs	r0, r0, r0
     4c8:	20000558 	andcs	r0, r0, r8, asr r5
     4cc:	20000564 	andcs	r0, r0, r4, ror #10
     4d0:	00004a68 	andeq	r4, r0, r8, ror #20
     4d4:	00004a72 	andeq	r4, r0, r2, ror sl
     4d8:	000000c9 	andeq	r0, r0, r9, asr #1
     4dc:	00004c64 	andeq	r4, r0, r4, ror #24
     4e0:	00004c71 	andeq	r4, r0, r1, ror ip
     4e4:	00004c82 	andeq	r4, r0, r2, lsl #25
     4e8:	00004ca0 	andeq	r4, r0, r0, lsr #25
     4ec:	00004cc7 	andeq	r4, r0, r7, asr #25
     4f0:	00004cef 	andeq	r4, r0, pc, ror #25
     4f4:	00004d16 	andeq	r4, r0, r6, lsl sp
     4f8:	00004a86 	andeq	r4, r0, r6, lsl #21
     4fc:	00004a9c 	muleq	r0, ip, sl
     500:	00004ac8 	andeq	r4, r0, r8, asr #21
     504:	00004adf 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
     508:	00004b0d 	andeq	r4, r0, sp, lsl #22
     50c:	20000540 	andcs	r0, r0, r0, asr #10
     510:	00004b21 	andeq	r4, r0, r1, lsr #22
     514:	00004af5 	strdeq	r4, [r0], -r5
     518:	00004b40 	andeq	r4, r0, r0, asr #22
     51c:	00004b4d 	andeq	r4, r0, sp, asr #22
     520:	00004b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
     524:	00004bb5 			; <UNDEFINED> instruction: 0x00004bb5
     528:	00004bcc 	andeq	r4, r0, ip, asr #23
     52c:	00004bf9 	strdeq	r4, [r0], -r9
     530:	00004be2 	andeq	r4, r0, r2, ror #23
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	201e      	movs	r0, #30
     536:	f001 fb5b 	bl	1bf0 <__pi_malloc>
				DEBUG_PRINT("\r\nretrieve rec");
     53a:	483e      	ldr	r0, [pc, #248]	; (634 <receiver+0x3bc>)
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	f8d5 8000 	ldr.w	r8, [r5]
				DEBUG_PRINT("\r\nretrieve rec");
     540:	f001 fbd0 	bl	1ce4 <diag>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	2300      	movs	r3, #0
     546:	881a      	ldrh	r2, [r3, #0]
     548:	8863      	ldrh	r3, [r4, #2]
     54a:	429a      	cmp	r2, r3
     54c:	f47f aefb 	bne.w	346 <receiver+0xce>
     550:	2300      	movs	r3, #0
     552:	795a      	ldrb	r2, [r3, #5]
     554:	7823      	ldrb	r3, [r4, #0]
     556:	429a      	cmp	r2, r3
     558:	f47f aef5 	bne.w	346 <receiver+0xce>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	f898 5008 	ldrb.w	r5, [r8, #8]
     560:	2d28      	cmp	r5, #40	; 0x28
     562:	f63f aef0 	bhi.w	346 <receiver+0xce>
    return node->data_base.item_array[index];
     566:	231c      	movs	r3, #28
     568:	fb03 4505 	mla	r5, r3, r5, r4
     56c:	ae0b      	add	r6, sp, #44	; 0x2c
     56e:	3504      	adds	r5, #4
     570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     572:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	af0b      	add	r7, sp, #44	; 0x2c
     57a:	ad04      	add	r5, sp, #16
    return node->data_base.item_array[index];
     57c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     584:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     588:	e885 0007 	stmia.w	r5, {r0, r1, r2}
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	7822      	ldrb	r2, [r4, #0]
     58e:	8860      	ldrh	r0, [r4, #2]
     590:	f10d 0411 	add.w	r4, sp, #17
     594:	2500      	movs	r5, #0
     596:	f898 3007 	ldrb.w	r3, [r8, #7]
     59a:	f898 1005 	ldrb.w	r1, [r8, #5]
     59e:	9402      	str	r4, [sp, #8]
     5a0:	2401      	movs	r4, #1
     5a2:	e9cd 4500 	strd	r4, r5, [sp]
     5a6:	e782      	b.n	4ae <receiver+0x236>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	682b      	ldr	r3, [r5, #0]
				DEBUG_PRINT("\r\nResponse");
     5aa:	4823      	ldr	r0, [pc, #140]	; (638 <receiver+0x3c0>)
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5ac:	3302      	adds	r3, #2
     5ae:	603b      	str	r3, [r7, #0]
				DEBUG_PRINT("\r\nResponse");
     5b0:	f001 fb98 	bl	1ce4 <diag>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	683b      	ldr	r3, [r7, #0]
     5b6:	8862      	ldrh	r2, [r4, #2]
     5b8:	8819      	ldrh	r1, [r3, #0]
     5ba:	4291      	cmp	r1, r2
     5bc:	f47f aec3 	bne.w	346 <receiver+0xce>
     5c0:	795a      	ldrb	r2, [r3, #5]
     5c2:	7823      	ldrb	r3, [r4, #0]
     5c4:	429a      	cmp	r2, r3
     5c6:	f47f aebe 	bne.w	346 <receiver+0xce>
				if(!response_flag){
     5ca:	481c      	ldr	r0, [pc, #112]	; (63c <receiver+0x3c4>)
     5cc:	8803      	ldrh	r3, [r0, #0]
     5ce:	b91b      	cbnz	r3, 5d8 <receiver+0x360>
					response_flag=1;
     5d0:	2301      	movs	r3, #1
     5d2:	8003      	strh	r3, [r0, #0]
					trigger(&response_flag);
     5d4:	f001 f9b0 	bl	1938 <__pi_trigger>
				switch(response_message_5->status){
     5d8:	683a      	ldr	r2, [r7, #0]
     5da:	7993      	ldrb	r3, [r2, #6]
     5dc:	3b01      	subs	r3, #1
     5de:	2b03      	cmp	r3, #3
     5e0:	f63f aeb1 	bhi.w	346 <receiver+0xce>
     5e4:	e8df f003 	tbb	[pc, r3]
     5e8:	1c1a1802 	ldcne	8, cr1, [sl], {2}
						if (response_checker[0] == response_message_5->request_number){
     5ec:	4b14      	ldr	r3, [pc, #80]	; (640 <receiver+0x3c8>)
     5ee:	78d2      	ldrb	r2, [r2, #3]
     5f0:	6819      	ldr	r1, [r3, #0]
     5f2:	4291      	cmp	r1, r2
     5f4:	f47f aea7 	bne.w	346 <receiver+0xce>
							switch(response_checker[1]){
     5f8:	685b      	ldr	r3, [r3, #4]
     5fa:	2b03      	cmp	r3, #3
     5fc:	d008      	beq.n	610 <receiver+0x398>
     5fe:	2b04      	cmp	r3, #4
     600:	d008      	beq.n	614 <receiver+0x39c>
     602:	2b02      	cmp	r3, #2
     604:	f47f ae9f 	bne.w	346 <receiver+0xce>
									proceed response_1_create;
     608:	2003      	movs	r0, #3
						proceed response_2;
     60a:	f001 f971 	bl	18f0 <proceed>
						break;
     60e:	e69a      	b.n	346 <receiver+0xce>
									proceed response_1_delete;
     610:	2004      	movs	r0, #4
     612:	e7fa      	b.n	60a <receiver+0x392>
									proceed response_1_retrieve;
     614:	2005      	movs	r0, #5
     616:	e7f8      	b.n	60a <receiver+0x392>
						proceed response_2;
     618:	2006      	movs	r0, #6
     61a:	e7f6      	b.n	60a <receiver+0x392>
						proceed response_3;
     61c:	2007      	movs	r0, #7
     61e:	e7f4      	b.n	60a <receiver+0x392>
						proceed response_4;
     620:	2008      	movs	r0, #8
     622:	e7f2      	b.n	60a <receiver+0x392>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	4631      	mov	r1, r6
     626:	4807      	ldr	r0, [pc, #28]	; (644 <receiver+0x3cc>)
     628:	f001 fb5c 	bl	1ce4 <diag>
				break;
     62c:	e68b      	b.n	346 <receiver+0xce>
}
     62e:	f001 f8d7 	bl	17e0 <__pi_badstate>
     632:	e6cd      	b.n	3d0 <receiver+0x158>
     634:	00004c17 	andeq	r4, r0, r7, lsl ip
     638:	00004c26 	andeq	r4, r0, r6, lsr #24
     63c:	20000560 	andcs	r0, r0, r0, ror #10
     640:	20000660 	andcs	r0, r0, r0, ror #12
     644:	00004c31 	andeq	r4, r0, r1, lsr ip

00000648 <root>:

fsm root {
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	b085      	sub	sp, #20
     64c:	2820      	cmp	r0, #32
     64e:	f200 828c 	bhi.w	b6a <root+0x522>
     652:	e8df f010 	tbh	[pc, r0, lsl #1]
     656:	00480021 	subeq	r0, r8, r1, lsr #32
     65a:	00770055 	rsbseq	r0, r7, r5, asr r0
     65e:	008b007b 	addeq	r0, fp, fp, ror r0
     662:	00b1008f 	adcseq	r0, r1, pc, lsl #1
     666:	00c900bc 	strheq	r0, [r9], #12
     66a:	01390102 	teqeq	r9, r2, lsl #2
     66e:	015a0156 	cmpeq	sl, r6, asr r1
     672:	0170016c 	cmneq	r0, ip, ror #2
     676:	019d0175 	orrseq	r0, sp, r5, ror r1
     67a:	01b301a1 			; <UNDEFINED> instruction: 0x01b301a1
     67e:	01c801b7 	strheq	r0, [r8, #23]
     682:	01f001ec 	mvnseq	r0, ip, ror #3
     686:	02060202 	andeq	r0, r6, #536870912	; 0x20000000
     68a:	023f0217 	eorseq	r0, pc, #1879048193	; 0x70000001
     68e:	024f0243 	subeq	r0, pc, #805306372	; 0x30000004
     692:	02790256 	rsbseq	r0, r9, #1610612741	; 0x60000005
     696:	f2400280 	vhsub.s8	d16, d16, d0

	
	state initialize_node:
		// cast node_db to struct node * and malloc to it the size of a struct node
		// setup node structure
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     69a:	4084      	lsls	r4, r0
     69c:	f001 faa8 	bl	1bf0 <__pi_malloc>
     6a0:	4c76      	ldr	r4, [pc, #472]	; (87c <root+0x234>)
     6a2:	6020      	str	r0, [r4, #0]

		// Bool condition, check for failure
		init_node(node_db);
     6a4:	f7ff fd78 	bl	198 <init_node>

		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	21fa      	movs	r1, #250	; 0xfa
     6aa:	2000      	movs	r0, #0
     6ac:	f002 fc3a 	bl	2f24 <phys_cc1350>
				  the null plugin offers only a single session per physical interface. This session is explicitly 
				  setup (opened) through tcv_open().

			See docs section 3 pg11/20 for the struct of this plugin
		*/
		tcv_plug (0, &plug_null);
     6b0:	4973      	ldr	r1, [pc, #460]	; (880 <root+0x238>)
     6b2:	2000      	movs	r0, #0
     6b4:	f001 fcea 	bl	208c <tcv_plug>
		   the abbreviation "sfd"). A return of -1 means an Error has occured.

		   NOTE: the maxmium number of sessions that can be open at any time is default 8. We can redfine this in
		   options.h by setting TCV_MAX_DESC to something higher.
		*/
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	2200      	movs	r2, #0
     6ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
     6be:	4611      	mov	r1, r2
     6c0:	f001 fc84 	bl	1fcc <tcv_open>
     6c4:	4a6f      	ldr	r2, [pc, #444]	; (884 <root+0x23c>)

		if (sfd < 0) {
     6c6:	2800      	cmp	r0, #0
		sfd = tcv_open (WNONE, 0, 0);
     6c8:	6010      	str	r0, [r2, #0]
		if (sfd < 0) {
     6ca:	da04      	bge.n	6d6 <root+0x8e>
			diag("Cannot open tcv interface");
     6cc:	486e      	ldr	r0, [pc, #440]	; (888 <root+0x240>)
     6ce:	f001 fb09 	bl	1ce4 <diag>
			halt();
     6d2:	f000 ffd3 	bl	167c <halt>

		  This function is referenced only twice in the docs. To my understainding, it determines if the
		  sfd is interpreted as a plugin id or a physical module. 
		
		*/
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d6:	2104      	movs	r1, #4
     6d8:	2200      	movs	r2, #0
     6da:	f001 fd9d 	bl	2218 <tcv_control>

		runfsm receiver(node_db);
     6de:	6821      	ldr	r1, [r4, #0]
     6e0:	486a      	ldr	r0, [pc, #424]	; (88c <root+0x244>)
     6e2:	f001 fad9 	bl	1c98 <__pi_fork>

	state menu:
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e6:	2028      	movs	r0, #40	; 0x28
     6e8:	4b64      	ldr	r3, [pc, #400]	; (87c <root+0x234>)
     6ea:	6819      	ldr	r1, [r3, #0]
     6ec:	780b      	ldrb	r3, [r1, #0]
     6ee:	884a      	ldrh	r2, [r1, #2]
     6f0:	9001      	str	r0, [sp, #4]
     6f2:	f891 1481 	ldrb.w	r1, [r1, #1153]	; 0x481
     6f6:	2001      	movs	r0, #1
     6f8:	9100      	str	r1, [sp, #0]
     6fa:	4965      	ldr	r1, [pc, #404]	; (890 <root+0x248>)
     6fc:	f002 f808 	bl	2710 <ser_outf>

	state get_choice:
		ser_inf(get_choice, "%c", &CHOICE);
     700:	4c64      	ldr	r4, [pc, #400]	; (894 <root+0x24c>)
     702:	2002      	movs	r0, #2
     704:	4622      	mov	r2, r4
     706:	4964      	ldr	r1, [pc, #400]	; (898 <root+0x250>)
     708:	f002 f82c 	bl	2764 <ser_inf>
		switch(CHOICE) {
     70c:	7823      	ldrb	r3, [r4, #0]
     70e:	2b53      	cmp	r3, #83	; 0x53
     710:	d80f      	bhi.n	732 <root+0xea>
     712:	2b42      	cmp	r3, #66	; 0x42
     714:	d911      	bls.n	73a <root+0xf2>
     716:	3b43      	subs	r3, #67	; 0x43
     718:	2b10      	cmp	r3, #16
     71a:	d80e      	bhi.n	73a <root+0xf2>
     71c:	e8df f003 	tbb	[pc, r3]
     720:	818b8583 	orrhi	r8, fp, r3, lsl #11
     724:	0d0d0d0f 	stceq	13, cr0, [sp, #-60]	; 0xffffffc4
     728:	7f0d0d0d 	svcvc	0x000d0d0d
     72c:	870d0d0d 	strhi	r0, [sp, -sp, lsl #26]
     730:	3b630089 	blcc	18c095c <__ccfg+0x18a09b4>
     734:	b2da      	uxtb	r2, r3
     736:	2a10      	cmp	r2, #16
     738:	d9ee      	bls.n	718 <root+0xd0>
			case 'e':
			case 'E':
				proceed del_local;
				break;
			default:
				proceed menu;
     73a:	2001      	movs	r0, #1
     73c:	e000      	b.n	740 <root+0xf8>
				proceed get_new_group_id;
     73e:	2003      	movs	r0, #3
				proceed menu;
     740:	f001 f8d6 	bl	18f0 <proceed>
				break;
		}

	state get_new_group_id:
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	2003      	movs	r0, #3
     746:	4955      	ldr	r1, [pc, #340]	; (89c <root+0x254>)
     748:	f001 ff70 	bl	262c <ser_out>

	/*NOTE: Do we need to add new checks here? what are the limitations on group IDs*/
	state new_group_id:
		uint16_t NEW_NODE_GID;
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	aa03      	add	r2, sp, #12
     74e:	4954      	ldr	r1, [pc, #336]	; (8a0 <root+0x258>)
     750:	2004      	movs	r0, #4
     752:	f002 f807 	bl	2764 <ser_inf>
		
		DEBUG_PRINT("setting node group ID");
     756:	4853      	ldr	r0, [pc, #332]	; (8a4 <root+0x25c>)
     758:	f001 fac4 	bl	1ce4 <diag>

		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75c:	4b47      	ldr	r3, [pc, #284]	; (87c <root+0x234>)
    node->gid = gid; 
     75e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     762:	681b      	ldr	r3, [r3, #0]
			DEBUG_PRINT("setting node group ID failed");
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};

		proceed menu;
     764:	2001      	movs	r0, #1
    node->gid = gid; 
     766:	805a      	strh	r2, [r3, #2]
		proceed menu;
     768:	f001 f8c2 	bl	18f0 <proceed>

	state get_new_node_id:
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76c:	2005      	movs	r0, #5
     76e:	494e      	ldr	r1, [pc, #312]	; (8a8 <root+0x260>)
     770:	f001 ff5c 	bl	262c <ser_out>
	state new_node_id:
		uint8_t NEW_NODE_ID;
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);

		// Bool condition, check for failure
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     774:	4d41      	ldr	r5, [pc, #260]	; (87c <root+0x234>)
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     776:	494a      	ldr	r1, [pc, #296]	; (8a0 <root+0x258>)
     778:	aa03      	add	r2, sp, #12
     77a:	2006      	movs	r0, #6
     77c:	f001 fff2 	bl	2764 <ser_inf>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     780:	682a      	ldr	r2, [r5, #0]
     782:	f89d 100c 	ldrb.w	r1, [sp, #12]
    node->id = id;
     786:	7011      	strb	r1, [r2, #0]
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};
		
		// Check to see if the number given is within range.
		if((node_db->id < 1) || (node_db->id > 25)){
     788:	682a      	ldr	r2, [r5, #0]
     78a:	7812      	ldrb	r2, [r2, #0]
     78c:	3a01      	subs	r2, #1
     78e:	2a18      	cmp	r2, #24
     790:	d907      	bls.n	7a2 <root+0x15a>
			strncpy(reason, "Out of Range", 50);
     792:	4846      	ldr	r0, [pc, #280]	; (8ac <root+0x264>)
     794:	2232      	movs	r2, #50	; 0x32
     796:	4946      	ldr	r1, [pc, #280]	; (8b0 <root+0x268>)
     798:	f001 f937 	bl	1a0a <__pi_strncpy>
			proceed invalid_node_id;
     79c:	2007      	movs	r0, #7
     79e:	f001 f8a7 	bl	18f0 <proceed>
fsm root {
     7a2:	2400      	movs	r4, #0
		};
		
		// Check to see if the number give is unique
		for(int i = 0; i < node_db->index; i++){
			if(node_db->id == node_db->nnodes[i]){
				strncpy(reason, "ID is already in use", 50);
     7a4:	4e43      	ldr	r6, [pc, #268]	; (8b4 <root+0x26c>)
     7a6:	4f41      	ldr	r7, [pc, #260]	; (8ac <root+0x264>)
		for(int i = 0; i < node_db->index; i++){
     7a8:	682b      	ldr	r3, [r5, #0]
     7aa:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
     7ae:	42a2      	cmp	r2, r4
     7b0:	dc43      	bgt.n	83a <root+0x1f2>
				proceed invalid_node_id;
			};
		};
		
		proceed menu;
     7b2:	2001      	movs	r0, #1
     7b4:	f001 f89c 	bl	18f0 <proceed>

	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state invalid_node_id:
		// NOTE: node_db->id will not be set if they provide an invalid reason, so we can't do this like this
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7b8:	4b30      	ldr	r3, [pc, #192]	; (87c <root+0x234>)
     7ba:	2007      	movs	r0, #7
     7bc:	681a      	ldr	r2, [r3, #0]
     7be:	493e      	ldr	r1, [pc, #248]	; (8b8 <root+0x270>)
     7c0:	4b3a      	ldr	r3, [pc, #232]	; (8ac <root+0x264>)
     7c2:	7812      	ldrb	r2, [r2, #0]
     7c4:	f001 ffa4 	bl	2710 <ser_outf>
		proceed get_new_node_id;
     7c8:	2005      	movs	r0, #5
     7ca:	f001 f891 	bl	18f0 <proceed>
		   
	  Then prints the list of neighbours
	
	*/
	state clear_neighbour_array:
		if (!clear_node_neighbour_array(node_db)){
     7ce:	4b2b      	ldr	r3, [pc, #172]	; (87c <root+0x234>)
     7d0:	6818      	ldr	r0, [r3, #0]
     7d2:	f7ff fcfc 	bl	1ce <clear_node_neighbour_array>
     7d6:	b938      	cbnz	r0, 7e8 <root+0x1a0>
			strncpy(reason, "Error Clearing Node Array", 50);
     7d8:	4834      	ldr	r0, [pc, #208]	; (8ac <root+0x264>)
     7da:	2232      	movs	r2, #50	; 0x32
     7dc:	4937      	ldr	r1, [pc, #220]	; (8bc <root+0x274>)
     7de:	f001 f914 	bl	1a0a <__pi_strncpy>
			proceed error;
     7e2:	2020      	movs	r0, #32
     7e4:	f001 f884 	bl	18f0 <proceed>
		};

	state find_proto_start:

		struct ResponseMessage *request_packet;
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7e8:	201e      	movs	r0, #30
     7ea:	f001 fa01 	bl	1bf0 <__pi_malloc>

		request_packet->gid = node_db->gid;
		request_packet->tpe = DISCOVERY_REQUEST;
     7ee:	2500      	movs	r5, #0
		request_packet->gid = node_db->gid;
     7f0:	4e22      	ldr	r6, [pc, #136]	; (87c <root+0x234>)
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7f2:	4604      	mov	r4, r0
		request_packet->gid = node_db->gid;
     7f4:	6833      	ldr	r3, [r6, #0]
     7f6:	885b      	ldrh	r3, [r3, #2]
		request_packet->tpe = DISCOVERY_REQUEST;
     7f8:	7085      	strb	r5, [r0, #2]
		request_packet->gid = node_db->gid;
     7fa:	8003      	strh	r3, [r0, #0]
		request_packet->request_number = generate_request_num();
     7fc:	f7ff fcde 	bl	1bc <generate_request_num>
     800:	70e0      	strb	r0, [r4, #3]
		request_packet->sender_id = node_db->id;
     802:	6833      	ldr	r3, [r6, #0]
		request_packet->receiver_id=0;

		call sender(request_packet, wait_discovery);
     804:	4621      	mov	r1, r4
		request_packet->sender_id = node_db->id;
     806:	781b      	ldrb	r3, [r3, #0]
		call sender(request_packet, wait_discovery);
     808:	482d      	ldr	r0, [pc, #180]	; (8c0 <root+0x278>)
		request_packet->sender_id = node_db->id;
     80a:	7123      	strb	r3, [r4, #4]
		request_packet->receiver_id=0;
     80c:	7165      	strb	r5, [r4, #5]
		call sender(request_packet, wait_discovery);
     80e:	f001 fa43 	bl	1c98 <__pi_fork>
     812:	210a      	movs	r1, #10
     814:	f001 f8aa 	bl	196c <__pi_join>
     818:	b1f8      	cbz	r0, 85a <root+0x212>
	
	state wait_discovery:
		if (discovery_wait_flag == 0){
			discovery_wait_flag=1;
			delay(3000, find_proto_start);
			release;
     81a:	f000 fe03 	bl	1424 <__pi_release>
				proceed get_new_node_id;
     81e:	2005      	movs	r0, #5
     820:	e78e      	b.n	740 <root+0xf8>
				proceed clear_neighbour_array;
     822:	2008      	movs	r0, #8
     824:	e78c      	b.n	740 <root+0xf8>
				proceed create_proto_start;
     826:	200c      	movs	r0, #12
     828:	e78a      	b.n	740 <root+0xf8>
				proceed start_delete_proto;
     82a:	2011      	movs	r0, #17
     82c:	e788      	b.n	740 <root+0xf8>
				proceed retrieve_proto;
     82e:	201a      	movs	r0, #26
     830:	e786      	b.n	740 <root+0xf8>
				proceed display_db;
     832:	201b      	movs	r0, #27
     834:	e784      	b.n	740 <root+0xf8>
				proceed del_local;
     836:	201d      	movs	r0, #29
     838:	e782      	b.n	740 <root+0xf8>
			if(node_db->id == node_db->nnodes[i]){
     83a:	1919      	adds	r1, r3, r4
     83c:	781a      	ldrb	r2, [r3, #0]
     83e:	f891 3468 	ldrb.w	r3, [r1, #1128]	; 0x468
     842:	429a      	cmp	r2, r3
     844:	d107      	bne.n	856 <root+0x20e>
				strncpy(reason, "ID is already in use", 50);
     846:	4638      	mov	r0, r7
     848:	2232      	movs	r2, #50	; 0x32
     84a:	4631      	mov	r1, r6
     84c:	f001 f8dd 	bl	1a0a <__pi_strncpy>
				proceed invalid_node_id;
     850:	2007      	movs	r0, #7
     852:	f001 f84d 	bl	18f0 <proceed>
		for(int i = 0; i < node_db->index; i++){
     856:	3401      	adds	r4, #1
     858:	e7a6      	b.n	7a8 <root+0x160>
		if (discovery_wait_flag == 0){
     85a:	4b1a      	ldr	r3, [pc, #104]	; (8c4 <root+0x27c>)
     85c:	681a      	ldr	r2, [r3, #0]
     85e:	b93a      	cbnz	r2, 870 <root+0x228>
			discovery_wait_flag=1;
     860:	2201      	movs	r2, #1
			delay(3000, find_proto_start);
     862:	2109      	movs	r1, #9
			discovery_wait_flag=1;
     864:	601a      	str	r2, [r3, #0]
			delay(3000, find_proto_start);
     866:	f640 30b8 	movw	r0, #3000	; 0xbb8
     86a:	f001 f891 	bl	1990 <delay>
     86e:	e7d4      	b.n	81a <root+0x1d2>
		}
		if (discovery_wait_flag == 1){
     870:	2a01      	cmp	r2, #1
     872:	d129      	bne.n	8c8 <root+0x280>
			discovery_wait_flag=0;
     874:	2200      	movs	r2, #0
			delay(3000, display_neighbour_nodes);
     876:	210b      	movs	r1, #11
			discovery_wait_flag=0;
     878:	601a      	str	r2, [r3, #0]
			delay(3000, display_neighbour_nodes);
     87a:	e7f4      	b.n	866 <root+0x21e>
     87c:	2000069c 	mulcs	r0, ip, r6
     880:	00005be0 	andeq	r5, r0, r0, ror #23
     884:	20000000 	andcs	r0, r0, r0
     888:	00004d4b 	andeq	r4, r0, fp, asr #26
     88c:	00000279 	andeq	r0, r0, r9, ror r2
     890:	00004d65 	andeq	r4, r0, r5, ror #26
     894:	2000069a 	mulcs	r0, sl, r6
     898:	00004e51 	andeq	r4, r0, r1, asr lr
     89c:	00004e54 	andeq	r4, r0, r4, asr lr
     8a0:	00004e75 	andeq	r4, r0, r5, ror lr
     8a4:	00004e78 	andeq	r4, r0, r8, ror lr
     8a8:	00004e8e 	andeq	r4, r0, lr, lsl #29
     8ac:	20000668 	andcs	r0, r0, r8, ror #12
     8b0:	00004ec1 	andeq	r4, r0, r1, asr #29
     8b4:	00004ece 	andeq	r4, r0, lr, asr #29
     8b8:	00004ee3 	andeq	r4, r0, r3, ror #29
     8bc:	00004f10 	andeq	r4, r0, r0, lsl pc
     8c0:	000000c9 	andeq	r0, r0, r9, asr #1
     8c4:	20000554 	andcs	r0, r0, r4, asr r5
			release;
		}
	
	state display_neighbour_nodes:
		if(node_db->index == 0){
     8c8:	4da9      	ldr	r5, [pc, #676]	; (b70 <root+0x528>)
     8ca:	682a      	ldr	r2, [r5, #0]
     8cc:	f892 2481 	ldrb.w	r2, [r2, #1153]	; 0x481
     8d0:	b912      	cbnz	r2, 8d8 <root+0x290>
			proceed menu;
     8d2:	2001      	movs	r0, #1
     8d4:	f001 f80c 	bl	18f0 <proceed>
		}
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8d8:	200b      	movs	r0, #11
     8da:	49a6      	ldr	r1, [pc, #664]	; (b74 <root+0x52c>)
     8dc:	f001 fea6 	bl	262c <ser_out>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8e0:	2400      	movs	r4, #0
			if (node_db->nnodes[i] == 0) break;
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e2:	4ea5      	ldr	r6, [pc, #660]	; (b78 <root+0x530>)
			if (node_db->nnodes[i] == 0) break;
     8e4:	682b      	ldr	r3, [r5, #0]
     8e6:	4423      	add	r3, r4
     8e8:	f893 2468 	ldrb.w	r2, [r3, #1128]	; 0x468
     8ec:	b132      	cbz	r2, 8fc <root+0x2b4>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8ee:	4631      	mov	r1, r6
     8f0:	200b      	movs	r0, #11
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f2:	3401      	adds	r4, #1
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8f4:	f001 ff0c 	bl	2710 <ser_outf>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f8:	2c19      	cmp	r4, #25
     8fa:	d1f3      	bne.n	8e4 <root+0x29c>
		}
		proceed menu;
     8fc:	2001      	movs	r0, #1
     8fe:	f000 fff7 	bl	18f0 <proceed>
		4) if no repsone is received, the node indicates this to the user through UART
		5) if a response is received, the node sends through UART the appropriate response message
	
	*/
	state create_proto_start:
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     902:	200c      	movs	r0, #12
     904:	499d      	ldr	r1, [pc, #628]	; (b7c <root+0x534>)
     906:	f001 fe91 	bl	262c <ser_out>

	state get_id_for_create:
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
     90a:	4c9d      	ldr	r4, [pc, #628]	; (b80 <root+0x538>)
     90c:	200d      	movs	r0, #13
     90e:	4622      	mov	r2, r4
     910:	499c      	ldr	r1, [pc, #624]	; (b84 <root+0x53c>)
     912:	f001 ff27 	bl	2764 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     916:	7823      	ldrb	r3, [r4, #0]
     918:	3b01      	subs	r3, #1
     91a:	2b18      	cmp	r3, #24
     91c:	d907      	bls.n	92e <root+0x2e6>
			strncpy(reason, "Error: improper ID", 50);
     91e:	489a      	ldr	r0, [pc, #616]	; (b88 <root+0x540>)
     920:	2232      	movs	r2, #50	; 0x32
     922:	499a      	ldr	r1, [pc, #616]	; (b8c <root+0x544>)
     924:	f001 f871 	bl	1a0a <__pi_strncpy>
			proceed error;
     928:	2020      	movs	r0, #32
     92a:	f000 ffe1 	bl	18f0 <proceed>
		};

	state ask_for_record_to_create:
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     92e:	200e      	movs	r0, #14
     930:	4997      	ldr	r1, [pc, #604]	; (b90 <root+0x548>)
     932:	f001 fe7b 	bl	262c <ser_out>

	state get_record_to_create:
		ser_in(get_record_to_create, user_provided_record, 20);
     936:	2214      	movs	r2, #20
     938:	200f      	movs	r0, #15
     93a:	4996      	ldr	r1, [pc, #600]	; (b94 <root+0x54c>)
     93c:	f001 feac 	bl	2698 <ser_in>

	state init_create_record_message:

		struct ResponseMessage *create_message;
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     940:	201e      	movs	r0, #30
     942:	f001 f955 	bl	1bf0 <__pi_malloc>
		create_message->gid = node_db->gid;
     946:	4d8a      	ldr	r5, [pc, #552]	; (b70 <root+0x528>)
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     948:	4604      	mov	r4, r0
		create_message->gid = node_db->gid;
     94a:	682b      	ldr	r3, [r5, #0]
     94c:	885b      	ldrh	r3, [r3, #2]
     94e:	8003      	strh	r3, [r0, #0]
		create_message->tpe = CREATE_RECORD;
     950:	2302      	movs	r3, #2
     952:	7083      	strb	r3, [r0, #2]
		create_message->request_number = generate_request_num();
     954:	f7ff fc32 	bl	1bc <generate_request_num>
     958:	70e0      	strb	r0, [r4, #3]
		create_message->sender_id = node_db->id;
     95a:	682b      	ldr	r3, [r5, #0]
		create_message->receiver_id = user_provided_receiver_id;
		strncpy(create_message->record, user_provided_record, 20);
     95c:	2214      	movs	r2, #20
		create_message->sender_id = node_db->id;
     95e:	781b      	ldrb	r3, [r3, #0]
		strncpy(create_message->record, user_provided_record, 20);
     960:	498c      	ldr	r1, [pc, #560]	; (b94 <root+0x54c>)
		create_message->sender_id = node_db->id;
     962:	7123      	strb	r3, [r4, #4]
		create_message->receiver_id = user_provided_receiver_id;
     964:	4b86      	ldr	r3, [pc, #536]	; (b80 <root+0x538>)
		strncpy(create_message->record, user_provided_record, 20);
     966:	f104 0008 	add.w	r0, r4, #8
		create_message->receiver_id = user_provided_receiver_id;
     96a:	781b      	ldrb	r3, [r3, #0]
     96c:	7163      	strb	r3, [r4, #5]
		strncpy(create_message->record, user_provided_record, 20);
     96e:	f001 f84c 	bl	1a0a <__pi_strncpy>
		
		// Store create message type & request number for response message parsing
		response_checker[0] = create_message->request_number;
     972:	78e2      	ldrb	r2, [r4, #3]
     974:	4b88      	ldr	r3, [pc, #544]	; (b98 <root+0x550>)
		response_checker[1] = create_message->tpe;

		call sender(create_message, wait);
     976:	4621      	mov	r1, r4
		response_checker[0] = create_message->request_number;
     978:	601a      	str	r2, [r3, #0]
		response_checker[1] = create_message->tpe;
     97a:	78a2      	ldrb	r2, [r4, #2]
		call sender(create_message, wait);
     97c:	4887      	ldr	r0, [pc, #540]	; (b9c <root+0x554>)
		response_checker[1] = create_message->tpe;
     97e:	605a      	str	r2, [r3, #4]
		call sender(create_message, wait);
     980:	f001 f98a 	bl	1c98 <__pi_fork>
     984:	211e      	movs	r1, #30
     986:	f000 fff1 	bl	196c <__pi_join>
     98a:	2800      	cmp	r0, #0
     98c:	f47f af45 	bne.w	81a <root+0x1d2>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_delete_proto:
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     990:	2011      	movs	r0, #17
     992:	497a      	ldr	r1, [pc, #488]	; (b7c <root+0x534>)
     994:	f001 fe4a 	bl	262c <ser_out>

	state get_id_for_delete:
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
     998:	4c79      	ldr	r4, [pc, #484]	; (b80 <root+0x538>)
     99a:	2012      	movs	r0, #18
     99c:	4622      	mov	r2, r4
     99e:	4979      	ldr	r1, [pc, #484]	; (b84 <root+0x53c>)
     9a0:	f001 fee0 	bl	2764 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9a4:	7823      	ldrb	r3, [r4, #0]
     9a6:	3b01      	subs	r3, #1
     9a8:	2b18      	cmp	r3, #24
     9aa:	d907      	bls.n	9bc <root+0x374>
			strncpy(reason, "Error: improper node ID", 50);
     9ac:	4876      	ldr	r0, [pc, #472]	; (b88 <root+0x540>)
     9ae:	2232      	movs	r2, #50	; 0x32
     9b0:	497b      	ldr	r1, [pc, #492]	; (ba0 <root+0x558>)
     9b2:	f001 f82a 	bl	1a0a <__pi_strncpy>
			proceed error;
     9b6:	2020      	movs	r0, #32
     9b8:	f000 ff9a 	bl	18f0 <proceed>
		};

	state ask_for_record_index:
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9bc:	2013      	movs	r0, #19
     9be:	4979      	ldr	r1, [pc, #484]	; (ba4 <root+0x55c>)
     9c0:	f001 fe34 	bl	262c <ser_out>

	state get_index_for_delete:
		ser_inf(get_index_for_delete, "%u", &user_provided_index);
     9c4:	4c78      	ldr	r4, [pc, #480]	; (ba8 <root+0x560>)
     9c6:	2014      	movs	r0, #20
     9c8:	4622      	mov	r2, r4
     9ca:	496e      	ldr	r1, [pc, #440]	; (b84 <root+0x53c>)
     9cc:	f001 feca 	bl	2764 <ser_inf>

		if (user_provided_index < 0 || user_provided_index > 40){
     9d0:	7823      	ldrb	r3, [r4, #0]
     9d2:	2b28      	cmp	r3, #40	; 0x28
     9d4:	d907      	bls.n	9e6 <root+0x39e>
			strncpy(reason, "Error: invalid index", 50);
     9d6:	486c      	ldr	r0, [pc, #432]	; (b88 <root+0x540>)
     9d8:	2232      	movs	r2, #50	; 0x32
     9da:	4974      	ldr	r1, [pc, #464]	; (bac <root+0x564>)
     9dc:	f001 f815 	bl	1a0a <__pi_strncpy>
			proceed error;
     9e0:	2020      	movs	r0, #32
     9e2:	f000 ff85 	bl	18f0 <proceed>
		};

	state init_delete_record_message:

		struct ResponseMessage *delete_record;
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e6:	201e      	movs	r0, #30
     9e8:	f001 f902 	bl	1bf0 <__pi_malloc>
		delete_record->gid = node_db->gid;
     9ec:	4d60      	ldr	r5, [pc, #384]	; (b70 <root+0x528>)
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9ee:	4604      	mov	r4, r0
		delete_record->gid = node_db->gid;
     9f0:	682b      	ldr	r3, [r5, #0]
     9f2:	885b      	ldrh	r3, [r3, #2]
     9f4:	8003      	strh	r3, [r0, #0]
		delete_record->tpe = DELETE_RECORD;
     9f6:	2303      	movs	r3, #3
     9f8:	7083      	strb	r3, [r0, #2]
		delete_record->request_number = generate_request_num();
     9fa:	f7ff fbdf 	bl	1bc <generate_request_num>
     9fe:	70e0      	strb	r0, [r4, #3]
		delete_record->sender_id = node_db->id;
     a00:	682b      	ldr	r3, [r5, #0]

		// Store delete record message type & request number for response message parsing
		response_checker[0] = delete_record->request_number;
		response_checker[1] = delete_record->tpe;

		call sender(delete_record, wait);
     a02:	4621      	mov	r1, r4
		delete_record->sender_id = node_db->id;
     a04:	781b      	ldrb	r3, [r3, #0]
     a06:	7123      	strb	r3, [r4, #4]
		delete_record->receiver_id = user_provided_receiver_id;
     a08:	4b5d      	ldr	r3, [pc, #372]	; (b80 <root+0x538>)
     a0a:	781b      	ldrb	r3, [r3, #0]
     a0c:	7163      	strb	r3, [r4, #5]
		delete_record->record_index = user_provided_index;
     a0e:	4b66      	ldr	r3, [pc, #408]	; (ba8 <root+0x560>)
     a10:	781b      	ldrb	r3, [r3, #0]
     a12:	7723      	strb	r3, [r4, #28]
		response_checker[0] = delete_record->request_number;
     a14:	4b60      	ldr	r3, [pc, #384]	; (b98 <root+0x550>)
     a16:	6018      	str	r0, [r3, #0]
		response_checker[1] = delete_record->tpe;
     a18:	78a2      	ldrb	r2, [r4, #2]
		call sender(delete_record, wait);
     a1a:	4860      	ldr	r0, [pc, #384]	; (b9c <root+0x554>)
		response_checker[1] = delete_record->tpe;
     a1c:	605a      	str	r2, [r3, #4]
		call sender(delete_record, wait);
     a1e:	f001 f93b 	bl	1c98 <__pi_fork>
     a22:	211e      	movs	r1, #30
     a24:	f000 ffa2 	bl	196c <__pi_join>
     a28:	2800      	cmp	r0, #0
     a2a:	f47f aef6 	bne.w	81a <root+0x1d2>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_retrieve_proto:
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a2e:	2016      	movs	r0, #22
     a30:	4952      	ldr	r1, [pc, #328]	; (b7c <root+0x534>)
     a32:	f001 fdfb 	bl	262c <ser_out>

	state get_id_for_retrieve:
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
     a36:	4c52      	ldr	r4, [pc, #328]	; (b80 <root+0x538>)
     a38:	2017      	movs	r0, #23
     a3a:	4622      	mov	r2, r4
     a3c:	4951      	ldr	r1, [pc, #324]	; (b84 <root+0x53c>)
     a3e:	f001 fe91 	bl	2764 <ser_inf>

		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     a42:	7823      	ldrb	r3, [r4, #0]
     a44:	3b01      	subs	r3, #1
     a46:	2b18      	cmp	r3, #24
     a48:	d907      	bls.n	a5a <root+0x412>
			strncpy(reason, "Error: improper node ID", 50);
     a4a:	484f      	ldr	r0, [pc, #316]	; (b88 <root+0x540>)
     a4c:	2232      	movs	r2, #50	; 0x32
     a4e:	4954      	ldr	r1, [pc, #336]	; (ba0 <root+0x558>)
     a50:	f000 ffdb 	bl	1a0a <__pi_strncpy>
			proceed error;
     a54:	2020      	movs	r0, #32
     a56:	f000 ff4b 	bl	18f0 <proceed>
		};

	state ask_for_record_retrieve_index:
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a5a:	2018      	movs	r0, #24
     a5c:	4951      	ldr	r1, [pc, #324]	; (ba4 <root+0x55c>)
     a5e:	f001 fde5 	bl	262c <ser_out>

	state get_index_for_retrieve:
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
     a62:	4c51      	ldr	r4, [pc, #324]	; (ba8 <root+0x560>)
     a64:	2019      	movs	r0, #25
     a66:	4622      	mov	r2, r4
     a68:	4946      	ldr	r1, [pc, #280]	; (b84 <root+0x53c>)
     a6a:	f001 fe7b 	bl	2764 <ser_inf>

		if (user_provided_index < 0 || user_provided_index > 40){
     a6e:	7823      	ldrb	r3, [r4, #0]
     a70:	2b28      	cmp	r3, #40	; 0x28
     a72:	d907      	bls.n	a84 <root+0x43c>
			strncpy(reason, "Error: invalid index", 50);
     a74:	4844      	ldr	r0, [pc, #272]	; (b88 <root+0x540>)
     a76:	2232      	movs	r2, #50	; 0x32
     a78:	494c      	ldr	r1, [pc, #304]	; (bac <root+0x564>)
     a7a:	f000 ffc6 	bl	1a0a <__pi_strncpy>
			proceed error;
     a7e:	2020      	movs	r0, #32
     a80:	f000 ff36 	bl	18f0 <proceed>
		};

	state retrieve_proto:

		struct ResponseMessage *retrieve_record;
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a84:	201e      	movs	r0, #30
     a86:	f001 f8b3 	bl	1bf0 <__pi_malloc>
		retrieve_record->gid = node_db->gid;
		retrieve_record->tpe = RETRIEVE_RECORD;
     a8a:	2204      	movs	r2, #4
		retrieve_record->gid = node_db->gid;
     a8c:	4c38      	ldr	r4, [pc, #224]	; (b70 <root+0x528>)
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a8e:	9003      	str	r0, [sp, #12]
		retrieve_record->gid = node_db->gid;
     a90:	6823      	ldr	r3, [r4, #0]
     a92:	885b      	ldrh	r3, [r3, #2]
     a94:	8003      	strh	r3, [r0, #0]
		retrieve_record->tpe = RETRIEVE_RECORD;
     a96:	9b03      	ldr	r3, [sp, #12]
     a98:	709a      	strb	r2, [r3, #2]
		retrieve_record->request_number = generate_request_num();
     a9a:	9d03      	ldr	r5, [sp, #12]
     a9c:	f7ff fb8e 	bl	1bc <generate_request_num>
     aa0:	70e8      	strb	r0, [r5, #3]
		retrieve_record->sender_id = node_db->id;
     aa2:	6822      	ldr	r2, [r4, #0]
     aa4:	9b03      	ldr	r3, [sp, #12]
     aa6:	7812      	ldrb	r2, [r2, #0]
		retrieve_record->receiver_id = user_provided_receiver_id;
		retrieve_record->record_index = user_provided_index;
		// NOTE: something to do with padding here?

		// Store retrieve record message type & request number for response message parsing
		response_checker[0] = retrieve_record->request_number;
     aa8:	78d9      	ldrb	r1, [r3, #3]
		retrieve_record->sender_id = node_db->id;
     aaa:	711a      	strb	r2, [r3, #4]
		retrieve_record->receiver_id = user_provided_receiver_id;
     aac:	4a34      	ldr	r2, [pc, #208]	; (b80 <root+0x538>)
		response_checker[1] = retrieve_record->tpe;
		
		call sender(&retrieve_record, wait);
     aae:	483b      	ldr	r0, [pc, #236]	; (b9c <root+0x554>)
		retrieve_record->receiver_id = user_provided_receiver_id;
     ab0:	7812      	ldrb	r2, [r2, #0]
     ab2:	715a      	strb	r2, [r3, #5]
		retrieve_record->record_index = user_provided_index;
     ab4:	4a3c      	ldr	r2, [pc, #240]	; (ba8 <root+0x560>)
     ab6:	7812      	ldrb	r2, [r2, #0]
     ab8:	771a      	strb	r2, [r3, #28]
		response_checker[0] = retrieve_record->request_number;
     aba:	4a37      	ldr	r2, [pc, #220]	; (b98 <root+0x550>)
     abc:	6011      	str	r1, [r2, #0]
		response_checker[1] = retrieve_record->tpe;
     abe:	789b      	ldrb	r3, [r3, #2]
		call sender(&retrieve_record, wait);
     ac0:	a903      	add	r1, sp, #12
		response_checker[1] = retrieve_record->tpe;
     ac2:	6053      	str	r3, [r2, #4]
		call sender(&retrieve_record, wait);
     ac4:	f001 f8e8 	bl	1c98 <__pi_fork>
     ac8:	211e      	movs	r1, #30
     aca:	f000 ff4f 	bl	196c <__pi_join>
     ace:	2800      	cmp	r0, #0
     ad0:	f47f aea3 	bne.w	81a <root+0x1d2>
		
	state display_db:
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad4:	201b      	movs	r0, #27
     ad6:	4936      	ldr	r1, [pc, #216]	; (bb0 <root+0x568>)
     ad8:	f001 fda8 	bl	262c <ser_out>
		
	state loop_through_data:
		if(node_db->data_base.item_count != 0){
     adc:	4d24      	ldr	r5, [pc, #144]	; (b70 <root+0x528>)
     ade:	682a      	ldr	r2, [r5, #0]
     ae0:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
     ae4:	bb62      	cbnz	r2, b40 <root+0x4f8>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
			}
		}
		ser_out(loop_through_data, "\r\n");
     ae6:	201c      	movs	r0, #28
     ae8:	4932      	ldr	r1, [pc, #200]	; (bb4 <root+0x56c>)
     aea:	f001 fd9f 	bl	262c <ser_out>
		proceed menu;
     aee:	2001      	movs	r0, #1
     af0:	f000 fefe 	bl	18f0 <proceed>

	state del_local:
		delete_all(node_db);
     af4:	4b1e      	ldr	r3, [pc, #120]	; (b70 <root+0x528>)
     af6:	6818      	ldr	r0, [r3, #0]
     af8:	f7ff fb82 	bl	200 <delete_all>
		proceed menu;
     afc:	2001      	movs	r0, #1
     afe:	f000 fef7 	bl	18f0 <proceed>

	state wait:
		delay(3000, timeout);
     b02:	211f      	movs	r1, #31
     b04:	f640 30b8 	movw	r0, #3000	; 0xbb8
     b08:	f000 ff42 	bl	1990 <delay>
		when(&response_flag, menu);
     b0c:	2101      	movs	r1, #1
     b0e:	482a      	ldr	r0, [pc, #168]	; (bb8 <root+0x570>)
     b10:	f000 fef8 	bl	1904 <__pi_wait>
		release;
     b14:	e681      	b.n	81a <root+0x1d2>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b16:	fb06 f204 	mul.w	r2, r6, r4
     b1a:	1898      	adds	r0, r3, r2
     b1c:	3205      	adds	r2, #5
     b1e:	4413      	add	r3, r2
     b20:	9301      	str	r3, [sp, #4]
     b22:	7903      	ldrb	r3, [r0, #4]
     b24:	4622      	mov	r2, r4
     b26:	9300      	str	r3, [sp, #0]
     b28:	69c3      	ldr	r3, [r0, #28]
     b2a:	4639      	mov	r1, r7
     b2c:	201c      	movs	r0, #28
     b2e:	f001 fdef 	bl	2710 <ser_outf>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b32:	3401      	adds	r4, #1
     b34:	682b      	ldr	r3, [r5, #0]
     b36:	f893 2464 	ldrb.w	r2, [r3, #1124]	; 0x464
     b3a:	42a2      	cmp	r2, r4
     b3c:	daeb      	bge.n	b16 <root+0x4ce>
     b3e:	e7d2      	b.n	ae6 <root+0x49e>
     b40:	2400      	movs	r4, #0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b42:	261c      	movs	r6, #28
     b44:	4f1d      	ldr	r7, [pc, #116]	; (bbc <root+0x574>)
     b46:	e7f5      	b.n	b34 <root+0x4ec>
	
	state timeout:
		ser_out(timeout, "\r\nFailed to reach the destination");
     b48:	201f      	movs	r0, #31
     b4a:	491d      	ldr	r1, [pc, #116]	; (bc0 <root+0x578>)
     b4c:	f001 fd6e 	bl	262c <ser_out>
		proceed menu;
     b50:	2001      	movs	r0, #1
     b52:	f000 fecd 	bl	18f0 <proceed>
	
	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state error:
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b56:	2007      	movs	r0, #7
     b58:	4a0b      	ldr	r2, [pc, #44]	; (b88 <root+0x540>)
     b5a:	491a      	ldr	r1, [pc, #104]	; (bc4 <root+0x57c>)
     b5c:	f001 fdd8 	bl	2710 <ser_outf>
		proceed menu;
     b60:	2001      	movs	r0, #1
     b62:	f000 fec5 	bl	18f0 <proceed>
}
     b66:	b005      	add	sp, #20
     b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b6a:	f000 fe39 	bl	17e0 <__pi_badstate>
     b6e:	e7fa      	b.n	b66 <root+0x51e>
     b70:	2000069c 	mulcs	r0, ip, r6
     b74:	00004f2a 	andeq	r4, r0, sl, lsr #30
     b78:	00004f38 	andeq	r4, r0, r8, lsr pc
     b7c:	00004f3d 	andeq	r4, r0, sp, lsr pc
     b80:	20000569 	andcs	r0, r0, r9, ror #10
     b84:	00004e75 	andeq	r4, r0, r5, ror lr
     b88:	20000668 	andcs	r0, r0, r8, ror #12
     b8c:	00004f5f 	andeq	r4, r0, pc, asr pc
     b90:	00004f72 	andeq	r4, r0, r2, ror pc
     b94:	2000056a 	andcs	r0, r0, sl, ror #10
     b98:	20000660 	andcs	r0, r0, r0, ror #12
     b9c:	000000c9 	andeq	r0, r0, r9, asr #1
     ba0:	00004f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
     ba4:	00004fb3 			; <UNDEFINED> instruction: 0x00004fb3
     ba8:	20000568 	andcs	r0, r0, r8, ror #10
     bac:	00004fdc 	ldrdeq	r4, [r0], -ip
     bb0:	00004ff1 	strdeq	r4, [r0], -r1
     bb4:	00004a49 	andeq	r4, r0, r9, asr #20
     bb8:	20000560 	andcs	r0, r0, r0, ror #10
     bbc:	0000501a 	andeq	r5, r0, sl, lsl r0
     bc0:	0000502a 	andeq	r5, r0, sl, lsr #32
     bc4:	0000504c 	andeq	r5, r0, ip, asr #32

00000bc8 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     bc8:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     bca:	4801      	ldr	r0, [pc, #4]	; (bd0 <devinit_uart+0x8>)
     bcc:	f000 bf3c 	b.w	1a48 <adddevfunc>
     bd0:	00000f55 	andeq	r0, r0, r5, asr pc

00000bd4 <udelay>:
void udelay (volatile word n) {
     bd4:	b082      	sub	sp, #8
     bd6:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     bda:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     bde:	b29b      	uxth	r3, r3
     be0:	b90b      	cbnz	r3, be6 <udelay+0x12>
}
     be2:	b002      	add	sp, #8
     be4:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     be6:	2304      	movs	r3, #4
	while (n--);
     be8:	461a      	mov	r2, r3
     bea:	3b01      	subs	r3, #1
     bec:	b29b      	uxth	r3, r3
     bee:	2a00      	cmp	r2, #0
     bf0:	d1fa      	bne.n	be8 <udelay+0x14>
		n--;
     bf2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     bf6:	3b01      	subs	r3, #1
     bf8:	b29b      	uxth	r3, r3
     bfa:	f8ad 3006 	strh.w	r3, [sp, #6]
     bfe:	e7ec      	b.n	bda <udelay+0x6>

00000c00 <mdelay>:
void mdelay (volatile word n) {
     c00:	b507      	push	{r0, r1, r2, lr}
     c02:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     c06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c0a:	b29b      	uxth	r3, r3
     c0c:	b913      	cbnz	r3, c14 <mdelay+0x14>
}
     c0e:	b003      	add	sp, #12
     c10:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     c14:	f240 30e7 	movw	r0, #999	; 0x3e7
     c18:	f7ff ffdc 	bl	bd4 <udelay>
		n--;
     c1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c20:	3b01      	subs	r3, #1
     c22:	b29b      	uxth	r3, r3
     c24:	f8ad 3006 	strh.w	r3, [sp, #6]
     c28:	e7ed      	b.n	c06 <mdelay+0x6>
	...

00000c2c <__pi_ondomain>:
void __pi_ondomain (lword d) {
     c2c:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     c2e:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     c30:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     c32:	d505      	bpl.n	c40 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     c34:	4b0a      	ldr	r3, [pc, #40]	; (c60 <__pi_ondomain+0x34>)
     c36:	78da      	ldrb	r2, [r3, #3]
     c38:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     c3a:	bf84      	itt	hi
     c3c:	2201      	movhi	r2, #1
     c3e:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     c40:	4d08      	ldr	r5, [pc, #32]	; (c64 <__pi_ondomain+0x38>)
     c42:	4620      	mov	r0, r4
     c44:	682b      	ldr	r3, [r5, #0]
     c46:	695b      	ldr	r3, [r3, #20]
     c48:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c4a:	682b      	ldr	r3, [r5, #0]
     c4c:	4620      	mov	r0, r4
     c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     c50:	4798      	blx	r3
     c52:	2801      	cmp	r0, #1
     c54:	d1f9      	bne.n	c4a <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     c56:	4b02      	ldr	r3, [pc, #8]	; (c60 <__pi_ondomain+0x34>)
     c58:	6858      	ldr	r0, [r3, #4]
     c5a:	4304      	orrs	r4, r0
     c5c:	605c      	str	r4, [r3, #4]
}
     c5e:	bd38      	pop	{r3, r4, r5, pc}
     c60:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     c64:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000c68 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     c68:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     c6a:	4d0d      	ldr	r5, [pc, #52]	; (ca0 <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     c6c:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     c6e:	682b      	ldr	r3, [r5, #0]
     c70:	699b      	ldr	r3, [r3, #24]
     c72:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     c74:	682b      	ldr	r3, [r5, #0]
     c76:	4620      	mov	r0, r4
     c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     c7a:	4798      	blx	r3
     c7c:	2802      	cmp	r0, #2
     c7e:	d1f9      	bne.n	c74 <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     c80:	f014 0f01 	tst.w	r4, #1
     c84:	4b07      	ldr	r3, [pc, #28]	; (ca4 <__pi_offdomain+0x3c>)
     c86:	d006      	beq.n	c96 <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     c88:	7899      	ldrb	r1, [r3, #2]
     c8a:	78da      	ldrb	r2, [r3, #3]
     c8c:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     c8e:	bf82      	ittt	hi
     c90:	789a      	ldrbhi	r2, [r3, #2]
     c92:	b2d2      	uxtbhi	r2, r2
     c94:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     c96:	6858      	ldr	r0, [r3, #4]
     c98:	ea20 0404 	bic.w	r4, r0, r4
     c9c:	605c      	str	r4, [r3, #4]
}
     c9e:	bd38      	pop	{r3, r4, r5, pc}
     ca0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     ca4:	200006b4 			; <UNDEFINED> instruction: 0x200006b4

00000ca8 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     ca8:	460a      	mov	r2, r1
     caa:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     cac:	4601      	mov	r1, r0
     cae:	480f      	ldr	r0, [pc, #60]	; (cec <__pi_syserror+0x44>)
     cb0:	f001 f818 	bl	1ce4 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     cb4:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cb6:	2540      	movs	r5, #64	; 0x40
     cb8:	462f      	mov	r7, r5
     cba:	4e0d      	ldr	r6, [pc, #52]	; (cf0 <__pi_syserror+0x48>)
     cbc:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     cbe:	490d      	ldr	r1, [pc, #52]	; (cf4 <__pi_syserror+0x4c>)
     cc0:	6037      	str	r7, [r6, #0]
     cc2:	6034      	str	r4, [r6, #0]
     cc4:	780b      	ldrb	r3, [r1, #0]
     cc6:	780b      	ldrb	r3, [r1, #0]
     cc8:	20c8      	movs	r0, #200	; 0xc8
     cca:	f36f 1307 	bfc	r3, #4, #4
     cce:	700b      	strb	r3, [r1, #0]
     cd0:	f7ff ff96 	bl	c00 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     cd4:	4b08      	ldr	r3, [pc, #32]	; (cf8 <__pi_syserror+0x50>)
     cd6:	20c8      	movs	r0, #200	; 0xc8
     cd8:	601d      	str	r5, [r3, #0]
     cda:	601c      	str	r4, [r3, #0]
     cdc:	780b      	ldrb	r3, [r1, #0]
     cde:	780b      	ldrb	r3, [r1, #0]
     ce0:	f36f 1307 	bfc	r3, #4, #4
     ce4:	700b      	strb	r3, [r1, #0]
     ce6:	f7ff ff8b 	bl	c00 <mdelay>
	while (1) {
     cea:	e7e7      	b.n	cbc <__pi_syserror+0x14>
     cec:	00005058 	andeq	r5, r0, r8, asr r0
     cf0:	40022090 	mulmi	r2, r0, r0
     cf4:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     cf8:	400220a0 	andmi	r2, r2, r0, lsr #1

00000cfc <tci_run_delay_timer>:
void tci_run_delay_timer () {
     cfc:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     cfe:	4b0a      	ldr	r3, [pc, #40]	; (d28 <tci_run_delay_timer+0x2c>)
     d00:	881c      	ldrh	r4, [r3, #0]
     d02:	4b0a      	ldr	r3, [pc, #40]	; (d2c <tci_run_delay_timer+0x30>)
     d04:	8818      	ldrh	r0, [r3, #0]
     d06:	4b0a      	ldr	r3, [pc, #40]	; (d30 <tci_run_delay_timer+0x34>)
     d08:	1b00      	subs	r0, r0, r4
     d0a:	b284      	uxth	r4, r0
     d0c:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d0e:	f002 fe2d 	bl	396c <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     d12:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d14:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d16:	4b07      	ldr	r3, [pc, #28]	; (d34 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     d1c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d20:	6018      	str	r0, [r3, #0]
	sti_tim;
     d22:	4b05      	ldr	r3, [pc, #20]	; (d38 <tci_run_delay_timer+0x3c>)
     d24:	601a      	str	r2, [r3, #0]
}
     d26:	bd10      	pop	{r4, pc}
     d28:	200006b2 			; <UNDEFINED> instruction: 0x200006b2
     d2c:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
     d30:	2000057e 	andcs	r0, r0, lr, ror r5
     d34:	40092018 	andmi	r2, r9, r8, lsl r0
     d38:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000d3c <tci_run_auxiliary_timer>:
	cli_aux;
     d3c:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     d3e:	b510      	push	{r4, lr}
	cli_aux;
     d40:	4c06      	ldr	r4, [pc, #24]	; (d5c <tci_run_auxiliary_timer+0x20>)
     d42:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	f002 fe12 	bl	396c <NOROM_AONRTCCurrent64BitValueGet>
     d48:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     d50:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     d52:	6018      	str	r0, [r3, #0]
	sti_aux;
     d54:	2301      	movs	r3, #1
     d56:	6023      	str	r3, [r4, #0]
}
     d58:	bd10      	pop	{r4, pc}
     d5a:	bf00      	nop
     d5c:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     d60:	40092020 	andmi	r2, r9, r0, lsr #32

00000d64 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     d64:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d66:	4b3b      	ldr	r3, [pc, #236]	; (e54 <AONRTCIntHandler+0xf0>)
     d68:	6818      	ldr	r0, [r3, #0]
     d6a:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     d6e:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     d70:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     d72:	d542      	bpl.n	dfa <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     d74:	4b38      	ldr	r3, [pc, #224]	; (e58 <AONRTCIntHandler+0xf4>)
     d76:	6819      	ldr	r1, [r3, #0]
     d78:	2900      	cmp	r1, #0
     d7a:	d053      	beq.n	e24 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     d7c:	880a      	ldrh	r2, [r1, #0]
     d7e:	2a00      	cmp	r2, #0
     d80:	d04e      	beq.n	e20 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     d82:	3a01      	subs	r2, #1
     d84:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     d86:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     d88:	685c      	ldr	r4, [r3, #4]
     d8a:	b194      	cbz	r4, db2 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     d8c:	8821      	ldrh	r1, [r4, #0]
     d8e:	b111      	cbz	r1, d96 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     d90:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     d92:	3901      	subs	r1, #1
     d94:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     d96:	689c      	ldr	r4, [r3, #8]
     d98:	b15c      	cbz	r4, db2 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     d9a:	8821      	ldrh	r1, [r4, #0]
     d9c:	b111      	cbz	r1, da4 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     d9e:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     da0:	3901      	subs	r1, #1
     da2:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     da4:	68d9      	ldr	r1, [r3, #12]
     da6:	b121      	cbz	r1, db2 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     da8:	880b      	ldrh	r3, [r1, #0]
     daa:	b113      	cbz	r3, db2 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     dac:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     dae:	3b01      	subs	r3, #1
     db0:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     db2:	4b2a      	ldr	r3, [pc, #168]	; (e5c <AONRTCIntHandler+0xf8>)
     db4:	7819      	ldrb	r1, [r3, #0]
     db6:	0909      	lsrs	r1, r1, #4
     db8:	d047      	beq.n	e4a <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     dba:	7859      	ldrb	r1, [r3, #1]
     dbc:	1c4a      	adds	r2, r1, #1
     dbe:	b2d2      	uxtb	r2, r2
     dc0:	705a      	strb	r2, [r3, #1]
     dc2:	b9d1      	cbnz	r1, dfa <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     dc4:	781a      	ldrb	r2, [r3, #0]
     dc6:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     dca:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     dcc:	d02c      	beq.n	e28 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     dce:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd0:	bf42      	ittt	mi
     dd2:	2140      	movmi	r1, #64	; 0x40
     dd4:	4a22      	ldrmi	r2, [pc, #136]	; (e60 <AONRTCIntHandler+0xfc>)
     dd6:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     dd8:	781a      	ldrb	r2, [r3, #0]
     dda:	0692      	lsls	r2, r2, #26
     ddc:	bf42      	ittt	mi
     dde:	2180      	movmi	r1, #128	; 0x80
     de0:	4a1f      	ldrmi	r2, [pc, #124]	; (e60 <AONRTCIntHandler+0xfc>)
     de2:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     de4:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     de6:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     de8:	781a      	ldrb	r2, [r3, #0]
     dea:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     dee:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     df0:	781a      	ldrb	r2, [r3, #0]
     df2:	0752      	lsls	r2, r2, #29
     df4:	d501      	bpl.n	dfa <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     df6:	22c8      	movs	r2, #200	; 0xc8
     df8:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     dfa:	07c3      	lsls	r3, r0, #31
     dfc:	d50f      	bpl.n	e1e <AONRTCIntHandler+0xba>
		cli_tim;
     dfe:	2100      	movs	r1, #0
     e00:	4b18      	ldr	r3, [pc, #96]	; (e64 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     e02:	4a19      	ldr	r2, [pc, #100]	; (e68 <AONRTCIntHandler+0x104>)
     e04:	4819      	ldr	r0, [pc, #100]	; (e6c <AONRTCIntHandler+0x108>)
		cli_tim;
     e06:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     e08:	8803      	ldrh	r3, [r0, #0]
     e0a:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     e0c:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     e0e:	4423      	add	r3, r4
		RISE_N_SHINE;
     e10:	4a12      	ldr	r2, [pc, #72]	; (e5c <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     e12:	b29b      	uxth	r3, r3
     e14:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     e16:	7813      	ldrb	r3, [r2, #0]
     e18:	f043 0302 	orr.w	r3, r3, #2
     e1c:	7013      	strb	r3, [r2, #0]
}
     e1e:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     e20:	2201      	movs	r2, #1
     e22:	e7b1      	b.n	d88 <AONRTCIntHandler+0x24>
     e24:	2201      	movs	r2, #1
     e26:	e7c4      	b.n	db2 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     e28:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e2a:	bf42      	ittt	mi
     e2c:	2140      	movmi	r1, #64	; 0x40
     e2e:	4a10      	ldrmi	r2, [pc, #64]	; (e70 <AONRTCIntHandler+0x10c>)
     e30:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     e32:	781a      	ldrb	r2, [r3, #0]
     e34:	0691      	lsls	r1, r2, #26
     e36:	bf42      	ittt	mi
     e38:	2180      	movmi	r1, #128	; 0x80
     e3a:	4a0d      	ldrmi	r2, [pc, #52]	; (e70 <AONRTCIntHandler+0x10c>)
     e3c:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     e3e:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     e40:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     e42:	781a      	ldrb	r2, [r3, #0]
     e44:	f042 0208 	orr.w	r2, r2, #8
     e48:	e7d1      	b.n	dee <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     e4a:	2a00      	cmp	r2, #0
     e4c:	d0d5      	beq.n	dfa <AONRTCIntHandler+0x96>
			cli_aux;
     e4e:	4b09      	ldr	r3, [pc, #36]	; (e74 <AONRTCIntHandler+0x110>)
     e50:	6019      	str	r1, [r3, #0]
     e52:	e7d2      	b.n	dfa <AONRTCIntHandler+0x96>
     e54:	40092004 	andmi	r2, r9, r4
     e58:	200006c0 	andcs	r0, r0, r0, asr #13
     e5c:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     e60:	40022090 	mulmi	r2, r0, r0
     e64:	43240280 			; <UNDEFINED> instruction: 0x43240280
     e68:	2000057e 	andcs	r0, r0, lr, ror r5
     e6c:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
     e70:	400220a0 	andmi	r2, r2, r0, lsr #1
     e74:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000e78 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     e7a:	2600      	movs	r6, #0
     e7c:	4b0e      	ldr	r3, [pc, #56]	; (eb8 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     e7e:	4f0f      	ldr	r7, [pc, #60]	; (ebc <tci_update_delay_ticks+0x44>)
	cli_tim;
     e80:	601e      	str	r6, [r3, #0]
	if (setdel) {
     e82:	883d      	ldrh	r5, [r7, #0]
     e84:	b19d      	cbz	r5, eae <tci_update_delay_ticks+0x36>
		if (force) {
     e86:	b1a0      	cbz	r0, eb2 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e88:	4b0d      	ldr	r3, [pc, #52]	; (ec0 <tci_update_delay_ticks+0x48>)
     e8a:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     e8c:	f002 fd6e 	bl	396c <NOROM_AONRTCCurrent64BitValueGet>
     e90:	0d80      	lsrs	r0, r0, #22
     e92:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e96:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     e9a:	b280      	uxth	r0, r0
     e9c:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e9e:	1b2c      	subs	r4, r5, r4
	return NO;
     ea0:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ea2:	4b08      	ldr	r3, [pc, #32]	; (ec4 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     ea4:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ea6:	881a      	ldrh	r2, [r3, #0]
     ea8:	4414      	add	r4, r2
     eaa:	b2a4      	uxth	r4, r4
     eac:	801c      	strh	r4, [r3, #0]
}
     eae:	4628      	mov	r0, r5
     eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     eb2:	2501      	movs	r5, #1
     eb4:	601d      	str	r5, [r3, #0]
		return YES;
     eb6:	e7fa      	b.n	eae <tci_update_delay_ticks+0x36>
     eb8:	43240280 			; <UNDEFINED> instruction: 0x43240280
     ebc:	2000057e 	andcs	r0, r0, lr, ror r5
     ec0:	40092018 	andmi	r2, r9, r8, lsl r0
     ec4:	200006bc 			; <UNDEFINED> instruction: 0x200006bc

00000ec8 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ec8:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     eca:	4e0f      	ldr	r6, [pc, #60]	; (f08 <__pi_uart_setrate+0x40>)
     ecc:	4d0f      	ldr	r5, [pc, #60]	; (f0c <__pi_uart_setrate+0x44>)
     ece:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ed0:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     ed2:	68db      	ldr	r3, [r3, #12]
     ed4:	4628      	mov	r0, r5
     ed6:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     ed8:	2264      	movs	r2, #100	; 0x64
     eda:	6833      	ldr	r3, [r6, #0]
     edc:	4628      	mov	r0, r5
     ede:	4362      	muls	r2, r4
     ee0:	685e      	ldr	r6, [r3, #4]
     ee2:	490b      	ldr	r1, [pc, #44]	; (f10 <__pi_uart_setrate+0x48>)
     ee4:	2360      	movs	r3, #96	; 0x60
     ee6:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     ee8:	4a0a      	ldr	r2, [pc, #40]	; (f14 <__pi_uart_setrate+0x4c>)
}
     eea:	2001      	movs	r0, #1
     eec:	6813      	ldr	r3, [r2, #0]
     eee:	f043 0310 	orr.w	r3, r3, #16
     ef2:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     ef4:	6853      	ldr	r3, [r2, #4]
     ef6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     efa:	f043 0301 	orr.w	r3, r3, #1
     efe:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     f00:	4b05      	ldr	r3, [pc, #20]	; (f18 <__pi_uart_setrate+0x50>)
     f02:	801c      	strh	r4, [r3, #0]
}
     f04:	bd70      	pop	{r4, r5, r6, pc}
     f06:	bf00      	nop
     f08:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     f0c:	40001000 	andmi	r1, r0, r0
     f10:	02dc6c00 	sbcseq	r6, ip, #0, 24
     f14:	4000102c 	andmi	r1, r0, ip, lsr #32
     f18:	20000580 	andcs	r0, r0, r0, lsl #11

00000f1c <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	4a08      	ldr	r2, [pc, #32]	; (f40 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     f1e:	4909      	ldr	r1, [pc, #36]	; (f44 <reinit_uart+0x28>)
     f20:	6813      	ldr	r3, [r2, #0]
     f22:	f043 0310 	orr.w	r3, r3, #16
     f26:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f28:	2212      	movs	r2, #18
     f2a:	4b07      	ldr	r3, [pc, #28]	; (f48 <reinit_uart+0x2c>)
     f2c:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f2e:	4a07      	ldr	r2, [pc, #28]	; (f4c <reinit_uart+0x30>)
     f30:	6813      	ldr	r3, [r2, #0]
     f32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     f36:	6013      	str	r3, [r2, #0]
     f38:	4b05      	ldr	r3, [pc, #20]	; (f50 <reinit_uart+0x34>)
     f3a:	8818      	ldrh	r0, [r3, #0]
     f3c:	f7ff bfc4 	b.w	ec8 <__pi_uart_setrate>
     f40:	4000102c 	andmi	r1, r0, ip, lsr #32
     f44:	200006a0 	andcs	r0, r0, r0, lsr #13
     f48:	40001034 	andmi	r1, r0, r4, lsr r0
     f4c:	40001030 	andmi	r1, r0, r0, lsr r0
     f50:	20000580 	andcs	r0, r0, r0, lsl #11

00000f54 <ioreq_uart_a>:
	switch (operation) {
     f54:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     f56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f5a:	460d      	mov	r5, r1
     f5c:	4614      	mov	r4, r2
     f5e:	2803      	cmp	r0, #3
     f60:	d86e      	bhi.n	1040 <ioreq_uart_a+0xec>
     f62:	e8df f000 	tbb	[pc, r0]
     f66:	5a471253 	bpl	11c58ba <__ccfg+0x11a5912>
				*buf++ = uart_a_read;
     f6a:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     f6e:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     f70:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     f74:	b11e      	cbz	r6, f7e <ioreq_uart_a+0x2a>
     f76:	f8d8 3000 	ldr.w	r3, [r8]
     f7a:	06d8      	lsls	r0, r3, #27
     f7c:	d5f5      	bpl.n	f6a <ioreq_uart_a+0x16>
			if (len != operation) {
     f7e:	42a6      	cmp	r6, r4
     f80:	d00a      	beq.n	f98 <ioreq_uart_a+0x44>
				return operation - len;
     f82:	1ba4      	subs	r4, r4, r6
}
     f84:	4620      	mov	r0, r4
     f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     f8a:	4616      	mov	r6, r2
			uart_a_disable_int;
     f8c:	4f2e      	ldr	r7, [pc, #184]	; (1048 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     f8e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 105c <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     f92:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1060 <ioreq_uart_a+0x10c>
     f96:	e7ed      	b.n	f74 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     f98:	683b      	ldr	r3, [r7, #0]
     f9a:	2015      	movs	r0, #21
     f9c:	695b      	ldr	r3, [r3, #20]
     f9e:	4798      	blx	r3
			if (uart_a_char_available) {
     fa0:	f8d8 3000 	ldr.w	r3, [r8]
     fa4:	06d9      	lsls	r1, r3, #27
     fa6:	d404      	bmi.n	fb2 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     fa8:	683b      	ldr	r3, [r7, #0]
     faa:	2015      	movs	r0, #21
     fac:	691b      	ldr	r3, [r3, #16]
     fae:	4798      	blx	r3
				goto Redo_rx;
     fb0:	e7e0      	b.n	f74 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fb2:	4a26      	ldr	r2, [pc, #152]	; (104c <ioreq_uart_a+0xf8>)
     fb4:	7993      	ldrb	r3, [r2, #6]
     fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     fba:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     fbe:	7193      	strb	r3, [r2, #6]
			return -2;
     fc0:	e7e0      	b.n	f84 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     fc2:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     fc6:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     fc8:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     fcc:	b11e      	cbz	r6, fd6 <ioreq_uart_a+0x82>
     fce:	f8d8 3000 	ldr.w	r3, [r8]
     fd2:	069a      	lsls	r2, r3, #26
     fd4:	d5f5      	bpl.n	fc2 <ioreq_uart_a+0x6e>
			if (len != operation) {
     fd6:	42a6      	cmp	r6, r4
     fd8:	d1d3      	bne.n	f82 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     fda:	683b      	ldr	r3, [r7, #0]
     fdc:	2015      	movs	r0, #21
     fde:	695b      	ldr	r3, [r3, #20]
     fe0:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     fe2:	f8d8 3000 	ldr.w	r3, [r8]
     fe6:	069b      	lsls	r3, r3, #26
     fe8:	d40b      	bmi.n	1002 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     fea:	683b      	ldr	r3, [r7, #0]
     fec:	2015      	movs	r0, #21
     fee:	691b      	ldr	r3, [r3, #16]
     ff0:	4798      	blx	r3
				goto Redo_tx;
     ff2:	e7eb      	b.n	fcc <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     ff4:	4616      	mov	r6, r2
			uart_a_disable_int;
     ff6:	4f14      	ldr	r7, [pc, #80]	; (1048 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     ff8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 105c <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     ffc:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1060 <ioreq_uart_a+0x10c>
    1000:	e7e4      	b.n	fcc <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1002:	4a12      	ldr	r2, [pc, #72]	; (104c <ioreq_uart_a+0xf8>)
    1004:	7993      	ldrb	r3, [r2, #6]
    1006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    100a:	e7d6      	b.n	fba <ioreq_uart_a+0x66>
			uart_a_enable_int;
    100c:	4b0e      	ldr	r3, [pc, #56]	; (1048 <ioreq_uart_a+0xf4>)
    100e:	2015      	movs	r0, #21
    1010:	681b      	ldr	r3, [r3, #0]
			return 0;
    1012:	2400      	movs	r4, #0
			uart_a_enable_int;
    1014:	691b      	ldr	r3, [r3, #16]
    1016:	4798      	blx	r3
			return 0;
    1018:	e7b4      	b.n	f84 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
    101a:	2a01      	cmp	r2, #1
    101c:	d109      	bne.n	1032 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
    101e:	490b      	ldr	r1, [pc, #44]	; (104c <ioreq_uart_a+0xf8>)
    1020:	8828      	ldrh	r0, [r5, #0]
    1022:	f7ff ff51 	bl	ec8 <__pi_uart_setrate>
    1026:	2800      	cmp	r0, #0
    1028:	d1ac      	bne.n	f84 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
    102a:	2003      	movs	r0, #3
    102c:	4908      	ldr	r1, [pc, #32]	; (1050 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
    102e:	f7ff fe3b 	bl	ca8 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
    1032:	2a02      	cmp	r2, #2
    1034:	d104      	bne.n	1040 <ioreq_uart_a+0xec>
	return urates [0];
    1036:	4b07      	ldr	r3, [pc, #28]	; (1054 <ioreq_uart_a+0x100>)
				return 1;
    1038:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    103a:	881b      	ldrh	r3, [r3, #0]
    103c:	800b      	strh	r3, [r1, #0]
				return 1;
    103e:	e7a1      	b.n	f84 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
    1040:	2002      	movs	r0, #2
    1042:	4905      	ldr	r1, [pc, #20]	; (1058 <ioreq_uart_a+0x104>)
    1044:	e7f3      	b.n	102e <ioreq_uart_a+0xda>
    1046:	bf00      	nop
    1048:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    104c:	200006a0 	andcs	r0, r0, r0, lsr #13
    1050:	00005067 	andeq	r5, r0, r7, rrx
    1054:	20000580 	andcs	r0, r0, r0, lsl #11
    1058:	0000506b 	andeq	r5, r0, fp, rrx
    105c:	40001018 	andmi	r1, r0, r8, lsl r0
    1060:	40001000 	andmi	r1, r0, r0

00001064 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1064:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
    1068:	b530      	push	{r4, r5, lr}
    106a:	4b29      	ldr	r3, [pc, #164]	; (1110 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    106c:	4c29      	ldr	r4, [pc, #164]	; (1114 <UART0IntHandler+0xb0>)
    106e:	601a      	str	r2, [r3, #0]
    1070:	6822      	ldr	r2, [r4, #0]
    1072:	06d5      	lsls	r5, r2, #27
    1074:	d423      	bmi.n	10be <UART0IntHandler+0x5a>
    1076:	4b28      	ldr	r3, [pc, #160]	; (1118 <UART0IntHandler+0xb4>)
    1078:	799a      	ldrb	r2, [r3, #6]
    107a:	0610      	lsls	r0, r2, #24
    107c:	d51f      	bpl.n	10be <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    107e:	799a      	ldrb	r2, [r3, #6]
    1080:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1084:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    1086:	4a25      	ldr	r2, [pc, #148]	; (111c <UART0IntHandler+0xb8>)
    1088:	7813      	ldrb	r3, [r2, #0]
    108a:	f043 0302 	orr.w	r3, r3, #2
    108e:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
    1090:	4b23      	ldr	r3, [pc, #140]	; (1120 <UART0IntHandler+0xbc>)
    1092:	681a      	ldr	r2, [r3, #0]
    1094:	b19a      	cbz	r2, 10be <UART0IntHandler+0x5a>
    1096:	4610      	mov	r0, r2
    1098:	2300      	movs	r3, #0
    109a:	f830 1b10 	ldrh.w	r1, [r0], #16
    109e:	f001 0107 	and.w	r1, r1, #7
    10a2:	4299      	cmp	r1, r3
    10a4:	dd09      	ble.n	10ba <UART0IntHandler+0x56>
    10a6:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    10aa:	3301      	adds	r3, #1
    10ac:	f515 7f81 	cmn.w	r5, #258	; 0x102
    10b0:	d1f7      	bne.n	10a2 <UART0IntHandler+0x3e>
    10b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    10b6:	889b      	ldrh	r3, [r3, #4]
    10b8:	8013      	strh	r3, [r2, #0]
    10ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10bc:	e7ea      	b.n	1094 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10be:	6823      	ldr	r3, [r4, #0]
    10c0:	0699      	lsls	r1, r3, #26
    10c2:	d424      	bmi.n	110e <UART0IntHandler+0xaa>
    10c4:	4b14      	ldr	r3, [pc, #80]	; (1118 <UART0IntHandler+0xb4>)
    10c6:	799a      	ldrb	r2, [r3, #6]
    10c8:	0652      	lsls	r2, r2, #25
    10ca:	d520      	bpl.n	110e <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
    10cc:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    10d0:	799a      	ldrb	r2, [r3, #6]
    10d2:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    10d6:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    10d8:	4a10      	ldr	r2, [pc, #64]	; (111c <UART0IntHandler+0xb8>)
    10da:	7813      	ldrb	r3, [r2, #0]
    10dc:	f043 0302 	orr.w	r3, r3, #2
    10e0:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
    10e2:	4b0f      	ldr	r3, [pc, #60]	; (1120 <UART0IntHandler+0xbc>)
    10e4:	681a      	ldr	r2, [r3, #0]
    10e6:	b192      	cbz	r2, 110e <UART0IntHandler+0xaa>
    10e8:	4610      	mov	r0, r2
    10ea:	2300      	movs	r3, #0
    10ec:	f830 1b10 	ldrh.w	r1, [r0], #16
    10f0:	f001 0107 	and.w	r1, r1, #7
    10f4:	4299      	cmp	r1, r3
    10f6:	dd08      	ble.n	110a <UART0IntHandler+0xa6>
    10f8:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    10fc:	3301      	adds	r3, #1
    10fe:	42a5      	cmp	r5, r4
    1100:	d1f8      	bne.n	10f4 <UART0IntHandler+0x90>
    1102:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1106:	889b      	ldrh	r3, [r3, #4]
    1108:	8013      	strh	r3, [r2, #0]
    110a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    110c:	e7eb      	b.n	10e6 <UART0IntHandler+0x82>
	}

	RTNI;
}
    110e:	bd30      	pop	{r4, r5, pc}
    1110:	40001044 	andmi	r1, r0, r4, asr #32
    1114:	40001018 	andmi	r1, r0, r8, lsl r0
    1118:	200006a0 	andcs	r0, r0, r0, lsr #13
    111c:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    1120:	20000584 	andcs	r0, r0, r4, lsl #11

00001124 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
    1124:	b570      	push	{r4, r5, r6, lr}
    1126:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1128:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
    112a:	4e0c      	ldr	r6, [pc, #48]	; (115c <__buttons_setirq+0x38>)
    112c:	4d0c      	ldr	r5, [pc, #48]	; (1160 <__buttons_setirq+0x3c>)
    112e:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1130:	4c0c      	ldr	r4, [pc, #48]	; (1164 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
    1132:	0a1b      	lsrs	r3, r3, #8
    1134:	fa01 f203 	lsl.w	r2, r1, r3
    1138:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    113a:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
    113c:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    113e:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
    1142:	0a1b      	lsrs	r3, r3, #8
    1144:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1146:	01db      	lsls	r3, r3, #7
    1148:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    114c:	4322      	orrs	r2, r4
    114e:	4323      	orrs	r3, r4
    1150:	6010      	str	r0, [r2, #0]
    1152:	6029      	str	r1, [r5, #0]
    1154:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    1156:	b662      	cpsie	i
			val;
	}
	sti;
}
    1158:	bd70      	pop	{r4, r5, r6, pc}
    115a:	bf00      	nop
    115c:	00005202 	andeq	r5, r0, r2, lsl #4
    1160:	400220e0 	andmi	r2, r2, r0, ror #1
    1164:	42000048 	andmi	r0, r0, #72	; 0x48

00001168 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
    1168:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    116a:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
    116c:	2200      	movs	r2, #0
    116e:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1170:	4f09      	ldr	r7, [pc, #36]	; (1198 <__pinlist_setirq+0x30>)
    1172:	4c0a      	ldr	r4, [pc, #40]	; (119c <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	490a      	ldr	r1, [pc, #40]	; (11a0 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1176:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
    1178:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    117a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    117e:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1182:	01db      	lsls	r3, r3, #7
    1184:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    1188:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
    118a:	2a04      	cmp	r2, #4
    118c:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    118e:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
    1190:	d1f1      	bne.n	1176 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
    1192:	b662      	cpsie	i
			val;
	}
	sti;
}
    1194:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1196:	bf00      	nop
    1198:	000051fd 	strdeq	r5, [r0], -sp
    119c:	400220e0 	andmi	r2, r2, r0, ror #1
    11a0:	42000048 	andmi	r0, r0, #72	; 0x48

000011a4 <GPIOIntHandler>:
void GPIOIntHandler () {
    11a4:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
    11a6:	4c23      	ldr	r4, [pc, #140]	; (1234 <GPIOIntHandler+0x90>)
    11a8:	6822      	ldr	r2, [r4, #0]
    11aa:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
    11ae:	d01e      	beq.n	11ee <GPIOIntHandler+0x4a>
	buttons_disable ();
    11b0:	2000      	movs	r0, #0
    11b2:	f7ff ffb7 	bl	1124 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
    11b6:	4b20      	ldr	r3, [pc, #128]	; (1238 <GPIOIntHandler+0x94>)
    11b8:	4d20      	ldr	r5, [pc, #128]	; (123c <GPIOIntHandler+0x98>)
    11ba:	681a      	ldr	r2, [r3, #0]
    11bc:	b192      	cbz	r2, 11e4 <GPIOIntHandler+0x40>
    11be:	4610      	mov	r0, r2
    11c0:	2300      	movs	r3, #0
    11c2:	f830 1b10 	ldrh.w	r1, [r0], #16
    11c6:	f001 0107 	and.w	r1, r1, #7
    11ca:	4299      	cmp	r1, r3
    11cc:	dd08      	ble.n	11e0 <GPIOIntHandler+0x3c>
    11ce:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
    11d2:	3301      	adds	r3, #1
    11d4:	42ae      	cmp	r6, r5
    11d6:	d1f8      	bne.n	11ca <GPIOIntHandler+0x26>
    11d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    11dc:	889b      	ldrh	r3, [r3, #4]
    11de:	8013      	strh	r3, [r2, #0]
    11e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    11e2:	e7eb      	b.n	11bc <GPIOIntHandler+0x18>
	RISE_N_SHINE;
    11e4:	4a16      	ldr	r2, [pc, #88]	; (1240 <GPIOIntHandler+0x9c>)
    11e6:	7813      	ldrb	r3, [r2, #0]
    11e8:	f043 0302 	orr.w	r3, r3, #2
    11ec:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
    11ee:	6823      	ldr	r3, [r4, #0]
    11f0:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
    11f4:	d01d      	beq.n	1232 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
    11f6:	4b10      	ldr	r3, [pc, #64]	; (1238 <GPIOIntHandler+0x94>)
    11f8:	4c12      	ldr	r4, [pc, #72]	; (1244 <GPIOIntHandler+0xa0>)
    11fa:	6818      	ldr	r0, [r3, #0]
    11fc:	b190      	cbz	r0, 1224 <GPIOIntHandler+0x80>
    11fe:	4601      	mov	r1, r0
    1200:	2300      	movs	r3, #0
    1202:	f831 2b10 	ldrh.w	r2, [r1], #16
    1206:	f002 0207 	and.w	r2, r2, #7
    120a:	429a      	cmp	r2, r3
    120c:	dd08      	ble.n	1220 <GPIOIntHandler+0x7c>
    120e:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    1212:	3301      	adds	r3, #1
    1214:	42a5      	cmp	r5, r4
    1216:	d1f8      	bne.n	120a <GPIOIntHandler+0x66>
    1218:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    121c:	889b      	ldrh	r3, [r3, #4]
    121e:	8003      	strh	r3, [r0, #0]
    1220:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1222:	e7eb      	b.n	11fc <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
    1224:	f7ff ffa0 	bl	1168 <__pinlist_setirq>
	RISE_N_SHINE;
    1228:	4a05      	ldr	r2, [pc, #20]	; (1240 <GPIOIntHandler+0x9c>)
    122a:	7813      	ldrb	r3, [r2, #0]
    122c:	f043 0302 	orr.w	r3, r3, #2
    1230:	7013      	strb	r3, [r2, #0]
}
    1232:	bd70      	pop	{r4, r5, r6, pc}
    1234:	400220e0 	andmi	r2, r2, r0, ror #1
    1238:	20000584 	andcs	r0, r0, r4, lsl #11
    123c:	00005202 	andeq	r5, r0, r2, lsl #4
    1240:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    1244:	000051fd 	strdeq	r5, [r0], -sp

00001248 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
    1248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    124c:	4c58      	ldr	r4, [pc, #352]	; (13b0 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    124e:	2004      	movs	r0, #4
    1250:	f7ff fcec 	bl	c2c <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1254:	6823      	ldr	r3, [r4, #0]
    1256:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    125a:	69db      	ldr	r3, [r3, #28]
    125c:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    125e:	6823      	ldr	r3, [r4, #0]
    1260:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    1264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1266:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1268:	6823      	ldr	r3, [r4, #0]
    126a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1270:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1272:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1274:	2600      	movs	r6, #0
    1276:	4c4f      	ldr	r4, [pc, #316]	; (13b4 <system_init+0x16c>)
    1278:	4f4f      	ldr	r7, [pc, #316]	; (13b8 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    127a:	f8df c17c 	ldr.w	ip, [pc, #380]	; 13f8 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    127e:	f8df e17c 	ldr.w	lr, [pc, #380]	; 13fc <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1282:	f8df 8140 	ldr.w	r8, [pc, #320]	; 13c4 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1286:	f8df 9134 	ldr.w	r9, [pc, #308]	; 13bc <system_init+0x174>
    128a:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
    128c:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1290:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
    1292:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1296:	0091      	lsls	r1, r2, #2
    1298:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
    129c:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
    12a0:	ea05 0a0c 	and.w	sl, r5, ip
    12a4:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
    12a8:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12aa:	bf44      	itt	mi
    12ac:	ea41 010e 	orrmi.w	r1, r1, lr
    12b0:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
    12b2:	fa03 f202 	lsl.w	r2, r3, r2
    12b6:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12b8:	bf4c      	ite	mi
    12ba:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12be:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c2:	2e11      	cmp	r6, #17
    12c4:	d1e2      	bne.n	128c <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12c6:	2540      	movs	r5, #64	; 0x40
    12c8:	2680      	movs	r6, #128	; 0x80
    12ca:	4b3c      	ldr	r3, [pc, #240]	; (13bc <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
    12cc:	493c      	ldr	r1, [pc, #240]	; (13c0 <system_init+0x178>)
    12ce:	601d      	str	r5, [r3, #0]
    12d0:	601e      	str	r6, [r3, #0]
    12d2:	780b      	ldrb	r3, [r1, #0]
    12d4:	780b      	ldrb	r3, [r1, #0]
    12d6:	20c8      	movs	r0, #200	; 0xc8
    12d8:	f36f 1307 	bfc	r3, #4, #4
    12dc:	700b      	strb	r3, [r1, #0]
    12de:	f7ff fc8f 	bl	c00 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12e2:	4b38      	ldr	r3, [pc, #224]	; (13c4 <system_init+0x17c>)
    12e4:	20c8      	movs	r0, #200	; 0xc8
    12e6:	601d      	str	r5, [r3, #0]
    12e8:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    12ea:	2601      	movs	r6, #1
	all_leds_blink;
    12ec:	780b      	ldrb	r3, [r1, #0]
    12ee:	780b      	ldrb	r3, [r1, #0]
    12f0:	f36f 1307 	bfc	r3, #4, #4
    12f4:	700b      	strb	r3, [r1, #0]
    12f6:	f7ff fc83 	bl	c00 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
    12fa:	4b33      	ldr	r3, [pc, #204]	; (13c8 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    12fc:	4a33      	ldr	r2, [pc, #204]	; (13cc <system_init+0x184>)
    12fe:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1300:	4b33      	ldr	r3, [pc, #204]	; (13d0 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
    1302:	4d34      	ldr	r5, [pc, #208]	; (13d4 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1304:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1306:	4b34      	ldr	r3, [pc, #208]	; (13d8 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
    1308:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    130a:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
    130c:	682b      	ldr	r3, [r5, #0]
    130e:	691b      	ldr	r3, [r3, #16]
    1310:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
    1312:	f000 fbf9 	bl	1b08 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
    1316:	682b      	ldr	r3, [r5, #0]
    1318:	2010      	movs	r0, #16
    131a:	691b      	ldr	r3, [r3, #16]
    131c:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    131e:	2002      	movs	r0, #2
    1320:	f7ff fc84 	bl	c2c <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1324:	68ab      	ldr	r3, [r5, #8]
    1326:	f44f 7000 	mov.w	r0, #512	; 0x200
    132a:	69db      	ldr	r3, [r3, #28]
    132c:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    132e:	68ab      	ldr	r3, [r5, #8]
    1330:	f44f 7000 	mov.w	r0, #512	; 0x200
    1334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1336:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1338:	68ab      	ldr	r3, [r5, #8]
    133a:	f44f 7000 	mov.w	r0, #512	; 0x200
    133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1340:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
    1342:	2260      	movs	r2, #96	; 0x60
    1344:	4b25      	ldr	r3, [pc, #148]	; (13dc <system_init+0x194>)
    1346:	6026      	str	r6, [r4, #0]
    1348:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
    134a:	f7ff fde7 	bl	f1c <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
    134e:	f001 f959 	bl	2604 <ee_open>
    1352:	f001 f961 	bl	2618 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1356:	f003 fa2b 	bl	47b0 <NOROM_SysCtrlResetSourceGet>
    135a:	2808      	cmp	r0, #8
    135c:	d11a      	bne.n	1394 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    135e:	4b20      	ldr	r3, [pc, #128]	; (13e0 <system_init+0x198>)
    1360:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1362:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1366:	3b04      	subs	r3, #4
    1368:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    136a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    136e:	3324      	adds	r3, #36	; 0x24
    1370:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
    1372:	2000      	movs	r0, #0
    1374:	f7ff fc28 	bl	bc8 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1378:	4a1a      	ldr	r2, [pc, #104]	; (13e4 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
    137a:	2015      	movs	r0, #21
    137c:	6813      	ldr	r3, [r2, #0]
    137e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    1382:	6013      	str	r3, [r2, #0]
    1384:	4b13      	ldr	r3, [pc, #76]	; (13d4 <system_init+0x18c>)
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	691b      	ldr	r3, [r3, #16]
    138a:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
    138c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
    1390:	f7ff bcd4 	b.w	d3c <tci_run_auxiliary_timer>
		diag ("");
    1394:	4814      	ldr	r0, [pc, #80]	; (13e8 <system_init+0x1a0>)
    1396:	f000 fca5 	bl	1ce4 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    139a:	4814      	ldr	r0, [pc, #80]	; (13ec <system_init+0x1a4>)
    139c:	f000 fca2 	bl	1ce4 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13a0:	4913      	ldr	r1, [pc, #76]	; (13f0 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
    13a2:	4814      	ldr	r0, [pc, #80]	; (13f4 <system_init+0x1ac>)
    13a4:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
    13a8:	b289      	uxth	r1, r1
    13aa:	f000 fc9b 	bl	1ce4 <diag>
    13ae:	e7e0      	b.n	1372 <system_init+0x12a>
    13b0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    13b4:	60082028 	andvs	r2, r8, r8, lsr #32
    13b8:	000050e4 	andeq	r5, r0, r4, ror #1
    13bc:	40022090 	mulmi	r2, r0, r0
    13c0:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    13c4:	400220a0 	andmi	r2, r2, r0, lsr #1
    13c8:	40092024 	andmi	r2, r9, r4, lsr #32
    13cc:	00050003 	andeq	r0, r5, r3
    13d0:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
    13d4:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    13d8:	40092000 	andmi	r2, r9, r0
    13dc:	20000580 	andcs	r0, r0, r0, lsl #11
    13e0:	4009400c 	andmi	r4, r9, ip
    13e4:	40001038 	andmi	r1, r0, r8, lsr r0
    13e8:	00004a4b 	andeq	r4, r0, fp, asr #20
    13ec:	0000506f 	andeq	r5, r0, pc, rrx
    13f0:	200006d4 	ldrdcs	r0, [r0], -r4
    13f4:	000050bb 	strheq	r5, [r0], -fp
    13f8:	7f077f3f 	svcvc	0x00077f3f
    13fc:	42441a00 	submi	r1, r4, #0, 20

00001400 <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1400:	2803      	cmp	r0, #3
    1402:	4603      	mov	r3, r0
    1404:	bf28      	it	cs
    1406:	2303      	movcs	r3, #3
    1408:	4a05      	ldr	r2, [pc, #20]	; (1420 <setpowermode+0x20>)
    140a:	b2db      	uxtb	r3, r3
    140c:	2801      	cmp	r0, #1
    140e:	7093      	strb	r3, [r2, #2]
    1410:	d904      	bls.n	141c <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
    1412:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1414:	f011 0f01 	tst.w	r1, #1
    1418:	bf18      	it	ne
    141a:	2301      	movne	r3, #1
    141c:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
    141e:	4770      	bx	lr
    1420:	200006b4 			; <UNDEFINED> instruction: 0x200006b4

00001424 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
    1424:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    1428:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    142a:	4b79      	ldr	r3, [pc, #484]	; (1610 <__pi_release+0x1ec>)
    142c:	af00      	add	r7, sp, #0
    142e:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
    1432:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
    1436:	681a      	ldr	r2, [r3, #0]
    1438:	4b76      	ldr	r3, [pc, #472]	; (1614 <__pi_release+0x1f0>)
    143a:	429a      	cmp	r2, r3
    143c:	d127      	bne.n	148e <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    143e:	4e76      	ldr	r6, [pc, #472]	; (1618 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
    1440:	2100      	movs	r1, #0
    1442:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1446:	f000 f9ed 	bl	1824 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
    144a:	4a74      	ldr	r2, [pc, #464]	; (161c <__pi_release+0x1f8>)
    144c:	4b74      	ldr	r3, [pc, #464]	; (1620 <__pi_release+0x1fc>)
    144e:	6812      	ldr	r2, [r2, #0]
    1450:	601a      	str	r2, [r3, #0]
    1452:	681a      	ldr	r2, [r3, #0]
    1454:	b9fa      	cbnz	r2, 1496 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1456:	4c73      	ldr	r4, [pc, #460]	; (1624 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
    1458:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
    145a:	4d73      	ldr	r5, [pc, #460]	; (1628 <__pi_release+0x204>)
    145c:	782b      	ldrb	r3, [r5, #0]
    145e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1462:	0798      	lsls	r0, r3, #30
    1464:	607a      	str	r2, [r7, #4]
    1466:	f100 80cd 	bmi.w	1604 <__pi_release+0x1e0>
	system_event_count ++;
    146a:	4a70      	ldr	r2, [pc, #448]	; (162c <__pi_release+0x208>)
    146c:	6813      	ldr	r3, [r2, #0]
    146e:	3301      	adds	r3, #1
    1470:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
    1472:	78ea      	ldrb	r2, [r5, #3]
    1474:	2a01      	cmp	r2, #1
    1476:	b2d3      	uxtb	r3, r2
    1478:	d017      	beq.n	14aa <__pi_release+0x86>
    147a:	2b02      	cmp	r3, #2
    147c:	d031      	beq.n	14e2 <__pi_release+0xbe>
    147e:	2b00      	cmp	r3, #0
    1480:	f040 8095 	bne.w	15ae <__pi_release+0x18a>
			__WFI ();
    1484:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
    1486:	b662      	cpsie	i
    1488:	bf00      	nop
    148a:	bf00      	nop
    148c:	e7e4      	b.n	1458 <__pi_release+0x34>
	check_stack_overflow;
    148e:	200b      	movs	r0, #11
    1490:	4967      	ldr	r1, [pc, #412]	; (1630 <__pi_release+0x20c>)
    1492:	f7ff fc09 	bl	ca8 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1496:	6851      	ldr	r1, [r2, #4]
    1498:	b129      	cbz	r1, 14a6 <__pi_release+0x82>
    149a:	8810      	ldrh	r0, [r2, #0]
    149c:	0704      	lsls	r4, r0, #28
    149e:	d102      	bne.n	14a6 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
    14a0:	0900      	lsrs	r0, r0, #4
    14a2:	4788      	blx	r1
			goto Redo;
    14a4:	e7cc      	b.n	1440 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
    14a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    14a8:	e7d2      	b.n	1450 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14aa:	4a62      	ldr	r2, [pc, #392]	; (1634 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14ac:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14ae:	6813      	ldr	r3, [r2, #0]
    14b0:	f043 0301 	orr.w	r3, r3, #1
    14b4:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14b6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    14ba:	f043 0303 	orr.w	r3, r3, #3
    14be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14c2:	4b5d      	ldr	r3, [pc, #372]	; (1638 <__pi_release+0x214>)
    14c4:	681b      	ldr	r3, [r3, #0]
    14c6:	699b      	ldr	r3, [r3, #24]
    14c8:	4798      	blx	r3
    14ca:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14cc:	6823      	ldr	r3, [r4, #0]
    14ce:	f043 0304 	orr.w	r3, r3, #4
    14d2:	6023      	str	r3, [r4, #0]
			__WFI ();
    14d4:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14d6:	6823      	ldr	r3, [r4, #0]
    14d8:	f023 0304 	bic.w	r3, r3, #4
    14dc:	6023      	str	r3, [r4, #0]
    14de:	6833      	ldr	r3, [r6, #0]
}
    14e0:	e7d1      	b.n	1486 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14e2:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    14e6:	687a      	ldr	r2, [r7, #4]
    14e8:	4b54      	ldr	r3, [pc, #336]	; (163c <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14ea:	f8df b188 	ldr.w	fp, [pc, #392]	; 1674 <__pi_release+0x250>
    14ee:	601a      	str	r2, [r3, #0]
    14f0:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    14f2:	f8df a144 	ldr.w	sl, [pc, #324]	; 1638 <__pi_release+0x214>
    14f6:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    14fa:	6833      	ldr	r3, [r6, #0]
    14fc:	4b50      	ldr	r3, [pc, #320]	; (1640 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    14fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1678 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1502:	f8c3 8000 	str.w	r8, [r3]
    1506:	6868      	ldr	r0, [r5, #4]
    1508:	f8da 3000 	ldr.w	r3, [sl]
    150c:	f040 0020 	orr.w	r0, r0, #32
    1510:	699b      	ldr	r3, [r3, #24]
    1512:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1514:	4b4b      	ldr	r3, [pc, #300]	; (1644 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1516:	2103      	movs	r1, #3
    1518:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    151c:	f8d9 3000 	ldr.w	r3, [r9]
    1520:	4849      	ldr	r0, [pc, #292]	; (1648 <__pi_release+0x224>)
    1522:	f023 0303 	bic.w	r3, r3, #3
    1526:	f8c9 3000 	str.w	r3, [r9]
    152a:	4b48      	ldr	r3, [pc, #288]	; (164c <__pi_release+0x228>)
    152c:	681a      	ldr	r2, [r3, #0]
    152e:	6852      	ldr	r2, [r2, #4]
    1530:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
    1532:	6878      	ldr	r0, [r7, #4]
    1534:	f002 fffc 	bl	4530 <NOROM_SysCtrlSetRechargeBeforePowerDown>
    1538:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    153a:	6822      	ldr	r2, [r4, #0]
    153c:	f042 0204 	orr.w	r2, r2, #4
    1540:	6022      	str	r2, [r4, #0]
			__WFI ();
    1542:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1546:	4b41      	ldr	r3, [pc, #260]	; (164c <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1548:	f022 0204 	bic.w	r2, r2, #4
    154c:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	4641      	mov	r1, r8
    1552:	685b      	ldr	r3, [r3, #4]
    1554:	483c      	ldr	r0, [pc, #240]	; (1648 <__pi_release+0x224>)
    1556:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1558:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    155c:	4a3c      	ldr	r2, [pc, #240]	; (1650 <__pi_release+0x22c>)
    155e:	f043 0303 	orr.w	r3, r3, #3
    1562:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1566:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    156a:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
    156c:	0699      	lsls	r1, r3, #26
    156e:	d5fc      	bpl.n	156a <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1570:	f8da 3000 	ldr.w	r3, [sl]
    1574:	6868      	ldr	r0, [r5, #4]
    1576:	695b      	ldr	r3, [r3, #20]
    1578:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    157a:	4d2f      	ldr	r5, [pc, #188]	; (1638 <__pi_release+0x214>)
    157c:	4b2a      	ldr	r3, [pc, #168]	; (1628 <__pi_release+0x204>)
    157e:	6858      	ldr	r0, [r3, #4]
    1580:	682b      	ldr	r3, [r5, #0]
    1582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1584:	4798      	blx	r3
    1586:	2801      	cmp	r0, #1
    1588:	d1f8      	bne.n	157c <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    158a:	4b2d      	ldr	r3, [pc, #180]	; (1640 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    158c:	4a2d      	ldr	r2, [pc, #180]	; (1644 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    158e:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1590:	2300      	movs	r3, #0
    1592:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1594:	4b29      	ldr	r3, [pc, #164]	; (163c <__pi_release+0x218>)
    1596:	6018      	str	r0, [r3, #0]
    1598:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
    159a:	f003 f8d9 	bl	4750 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
    159e:	f7ff fcbd 	bl	f1c <reinit_uart>
    15a2:	4a2c      	ldr	r2, [pc, #176]	; (1654 <__pi_release+0x230>)
    15a4:	6813      	ldr	r3, [r2, #0]
    15a6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    15aa:	6013      	str	r3, [r2, #0]
}
    15ac:	e76b      	b.n	1486 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15ae:	4b2a      	ldr	r3, [pc, #168]	; (1658 <__pi_release+0x234>)
    15b0:	2001      	movs	r0, #1
    15b2:	681b      	ldr	r3, [r3, #0]
    15b4:	68db      	ldr	r3, [r3, #12]
    15b6:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15b8:	4a28      	ldr	r2, [pc, #160]	; (165c <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15ba:	4929      	ldr	r1, [pc, #164]	; (1660 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15bc:	6813      	ldr	r3, [r2, #0]
    15be:	f023 0301 	bic.w	r3, r3, #1
    15c2:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15c4:	4b27      	ldr	r3, [pc, #156]	; (1664 <__pi_release+0x240>)
    15c6:	681a      	ldr	r2, [r3, #0]
    15c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    15cc:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15ce:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
    15d2:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    15d4:	604a      	str	r2, [r1, #4]
    15d6:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    15d8:	687a      	ldr	r2, [r7, #4]
    15da:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    15dc:	687a      	ldr	r2, [r7, #4]
    15de:	4b22      	ldr	r3, [pc, #136]	; (1668 <__pi_release+0x244>)
    15e0:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    15e2:	2201      	movs	r2, #1
    15e4:	4b21      	ldr	r3, [pc, #132]	; (166c <__pi_release+0x248>)
    15e6:	601a      	str	r2, [r3, #0]
    15e8:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15ea:	4a19      	ldr	r2, [pc, #100]	; (1650 <__pi_release+0x22c>)
    15ec:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    15ee:	069b      	lsls	r3, r3, #26
    15f0:	d4fc      	bmi.n	15ec <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    15f2:	2201      	movs	r2, #1
    15f4:	4b1e      	ldr	r3, [pc, #120]	; (1670 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
    15f6:	2037      	movs	r0, #55	; 0x37
    15f8:	601a      	str	r2, [r3, #0]
    15fa:	4b0f      	ldr	r3, [pc, #60]	; (1638 <__pi_release+0x214>)
    15fc:	681b      	ldr	r3, [r3, #0]
    15fe:	699b      	ldr	r3, [r3, #24]
    1600:	4798      	blx	r3
			goto DeepSleep;
    1602:	e763      	b.n	14cc <__pi_release+0xa8>
	__SLEEP;
    1604:	782b      	ldrb	r3, [r5, #0]
    1606:	f36f 0341 	bfc	r3, #1, #1
    160a:	702b      	strb	r3, [r5, #0]
    160c:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
    160e:	e717      	b.n	1440 <__pi_release+0x1c>
    1610:	20005000 	andcs	r5, r0, r0
    1614:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1618:	4009202c 	andmi	r2, r9, ip, lsr #32
    161c:	20000584 	andcs	r0, r0, r4, lsl #11
    1620:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1624:	e000ed10 	and	lr, r0, r0, lsl sp
    1628:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    162c:	200006a8 	andcs	r0, r0, r8, lsr #13
    1630:	000050d2 	ldrdeq	r5, [r0], -r2
    1634:	4008218c 	andmi	r2, r8, ip, lsl #3
    1638:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    163c:	4009400c 	andmi	r4, r9, ip
    1640:	60082028 	andvs	r2, r8, r8, lsr #32
    1644:	43040180 	movwmi	r0, #16768	; 0x4180
    1648:	40034000 	andmi	r4, r3, r0
    164c:	100001d8 	ldrdne	r0, [r0], -r8
    1650:	40091014 	andmi	r1, r9, r4, lsl r0
    1654:	40001038 	andmi	r1, r0, r8, lsr r0
    1658:	100001a0 	andne	r0, r0, r0, lsr #3
    165c:	40091010 	andmi	r1, r9, r0, lsl r0
    1660:	40093000 	andmi	r3, r9, r0
    1664:	40091040 	andmi	r1, r9, r0, asr #32
    1668:	43220420 			; <UNDEFINED> instruction: 0x43220420
    166c:	40091018 	andmi	r1, r9, r8, lsl r0
    1670:	43040188 	movwmi	r0, #16776	; 0x4188
    1674:	43220200 			; <UNDEFINED> instruction: 0x43220200
    1678:	40082224 	andmi	r2, r8, r4, lsr #4

0000167c <halt>:
	cli_tim;
    167c:	2400      	movs	r4, #0
void halt (void) {
    167e:	b508      	push	{r3, lr}
	cli_tim;
    1680:	4b07      	ldr	r3, [pc, #28]	; (16a0 <halt+0x24>)
	diag ("PicOS halted");
    1682:	4808      	ldr	r0, [pc, #32]	; (16a4 <halt+0x28>)
	cli_tim;
    1684:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
    1686:	f000 fb2d 	bl	1ce4 <diag>
	mdelay (500);
    168a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    168e:	f7ff fab7 	bl	c00 <mdelay>
	setpowermode (2);
    1692:	2002      	movs	r0, #2
    1694:	f7ff feb4 	bl	1400 <setpowermode>
	__PCB = NULL;
    1698:	4b03      	ldr	r3, [pc, #12]	; (16a8 <halt+0x2c>)
    169a:	601c      	str	r4, [r3, #0]
	release;
    169c:	f7ff fec2 	bl	1424 <__pi_release>
    16a0:	43240280 			; <UNDEFINED> instruction: 0x43240280
    16a4:	000050d5 	ldrdeq	r5, [r0], -r5	; <UNPREDICTABLE>
    16a8:	20000584 	andcs	r0, r0, r4, lsl #11

000016ac <main>:

#include "scheduler.h"

}

int main (void) {
    16ac:	b510      	push	{r4, lr}
    16ae:	4b11      	ldr	r3, [pc, #68]	; (16f4 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16b0:	4911      	ldr	r1, [pc, #68]	; (16f8 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16b2:	4a12      	ldr	r2, [pc, #72]	; (16fc <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16b4:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16b8:	4293      	cmp	r3, r2
    16ba:	d1fb      	bne.n	16b4 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16bc:	4c10      	ldr	r4, [pc, #64]	; (1700 <main+0x54>)
	system_init ();
    16be:	f7ff fdc3 	bl	1248 <system_init>
	tcv_init ();
    16c2:	f000 fedb 	bl	247c <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16c6:	6823      	ldr	r3, [r4, #0]
    16c8:	2129      	movs	r1, #41	; 0x29
    16ca:	2000      	movs	r0, #0
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    16d0:	6823      	ldr	r3, [r4, #0]
    16d2:	2120      	movs	r1, #32
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	2001      	movs	r0, #1
    16d8:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    16da:	2100      	movs	r1, #0
    16dc:	4809      	ldr	r0, [pc, #36]	; (1704 <main+0x58>)
    16de:	f000 fadb 	bl	1c98 <__pi_fork>
    16e2:	4b09      	ldr	r3, [pc, #36]	; (1708 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
    16e4:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    16e6:	6018      	str	r0, [r3, #0]
	delay (16, 0);
    16e8:	2010      	movs	r0, #16
    16ea:	f000 f951 	bl	1990 <delay>
    16ee:	b662      	cpsie	i

	sti;

	__pi_release ();
    16f0:	f7ff fe98 	bl	1424 <__pi_release>
    16f4:	20004bfc 	strdcs	r4, [r0], -ip
    16f8:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    16fc:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    1700:	10000184 	andne	r0, r0, r4, lsl #3
    1704:	00000649 	andeq	r0, r0, r9, asr #12
    1708:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0000170c <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
    170c:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
    170e:	4b0d      	ldr	r3, [pc, #52]	; (1744 <killev+0x38>)
	wfun = (aword)(pid->code);
    1710:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
    1712:	681a      	ldr	r2, [r3, #0]
    1714:	b1aa      	cbz	r2, 1742 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
    1716:	4614      	mov	r4, r2
    1718:	f834 1b10 	ldrh.w	r1, [r4], #16
    171c:	2300      	movs	r3, #0
    171e:	f001 0107 	and.w	r1, r1, #7
    1722:	e001      	b.n	1728 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
    1724:	42b5      	cmp	r5, r6
    1726:	d006      	beq.n	1736 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
    1728:	4299      	cmp	r1, r3
    172a:	dd08      	ble.n	173e <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
    172c:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1730:	3301      	adds	r3, #1
    1732:	42a8      	cmp	r0, r5
    1734:	d1f6      	bne.n	1724 <killev+0x18>
			    ) {
				wakeupev (i, j);
    1736:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    173a:	889b      	ldrh	r3, [r3, #4]
    173c:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    173e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1740:	e7e8      	b.n	1714 <killev+0x8>
				break;
			}
		}
	}
}
    1742:	bd70      	pop	{r4, r5, r6, pc}
    1744:	20000584 	andcs	r0, r0, r4, lsl #11

00001748 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1748:	4a1d      	ldr	r2, [pc, #116]	; (17c0 <qfree+0x78>)
static void qfree (aword *ch) {
    174a:	b530      	push	{r4, r5, lr}
    174c:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    174e:	6813      	ldr	r3, [r2, #0]
    1750:	b93b      	cbnz	r3, 1762 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1752:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
    1754:	4a1a      	ldr	r2, [pc, #104]	; (17c0 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1756:	bb53      	cbnz	r3, 17ae <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
    1758:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
    175a:	4b1a      	ldr	r3, [pc, #104]	; (17c4 <qfree+0x7c>)
	m_setnextp (cc, ch);
    175c:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
    175e:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
    1760:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1762:	e953 1501 	ldrd	r1, r5, [r3, #-4]
    1766:	3101      	adds	r1, #1
    1768:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    176c:	4288      	cmp	r0, r1
    176e:	d10b      	bne.n	1788 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
    1770:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
    1772:	f850 0c04 	ldr.w	r0, [r0, #-4]
    1776:	f853 1c04 	ldr.w	r1, [r3, #-4]
    177a:	4401      	add	r1, r0
    177c:	4618      	mov	r0, r3
    177e:	3101      	adds	r1, #1
    1780:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	e7e3      	b.n	1750 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1788:	f850 1c04 	ldr.w	r1, [r0, #-4]
    178c:	3101      	adds	r1, #1
    178e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    1792:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
    1794:	bf03      	ittte	eq
    1796:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
    1798:	f850 1c04 	ldreq.w	r1, [r0, #-4]
    179c:	f853 5c04 	ldreq.w	r5, [r3, #-4]
    17a0:	461a      	movne	r2, r3
    17a2:	bf02      	ittt	eq
    17a4:	1949      	addeq	r1, r1, r5
    17a6:	3101      	addeq	r1, #1
    17a8:	f840 1c04 	streq.w	r1, [r0, #-4]
    17ac:	e7ea      	b.n	1784 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
    17ae:	f853 4c04 	ldr.w	r4, [r3, #-4]
    17b2:	f850 1c04 	ldr.w	r1, [r0, #-4]
    17b6:	428c      	cmp	r4, r1
    17b8:	d2ce      	bcs.n	1758 <qfree+0x10>
		chunk = m_nextp (chunk))
    17ba:	461a      	mov	r2, r3
    17bc:	681b      	ldr	r3, [r3, #0]
    17be:	e7ca      	b.n	1756 <qfree+0xe>
    17c0:	20000598 	mulcs	r0, r8, r5
    17c4:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

000017c8 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17c8:	4a03      	ldr	r2, [pc, #12]	; (17d8 <dgout+0x10>)
    17ca:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    17cc:	071b      	lsls	r3, r3, #28
    17ce:	d4fc      	bmi.n	17ca <dgout+0x2>
	diag_wchar (c, a);
    17d0:	4b02      	ldr	r3, [pc, #8]	; (17dc <dgout+0x14>)
    17d2:	b2c0      	uxtb	r0, r0
    17d4:	6018      	str	r0, [r3, #0]
}
    17d6:	4770      	bx	lr
    17d8:	40001018 	andmi	r1, r0, r8, lsl r0
    17dc:	40001000 	andmi	r1, r0, r0

000017e0 <__pi_badstate>:
	syserror (ESTATE, "state");
    17e0:	2007      	movs	r0, #7
void __pi_badstate (void) {
    17e2:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    17e4:	4901      	ldr	r1, [pc, #4]	; (17ec <__pi_badstate+0xc>)
    17e6:	f7ff fa5f 	bl	ca8 <__pi_syserror>
    17ea:	bf00      	nop
    17ec:	00005128 	andeq	r5, r0, r8, lsr #2

000017f0 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    17f0:	4a08      	ldr	r2, [pc, #32]	; (1814 <utimer_add+0x24>)
void utimer_add (address ut) {
    17f2:	4603      	mov	r3, r0
    17f4:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    17f6:	2000      	movs	r0, #0
void utimer_add (address ut) {
    17f8:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    17fa:	f852 4b04 	ldr.w	r4, [r2], #4
    17fe:	b12c      	cbz	r4, 180c <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    1800:	3001      	adds	r0, #1
    1802:	2804      	cmp	r0, #4
    1804:	d1f9      	bne.n	17fa <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    1806:	4904      	ldr	r1, [pc, #16]	; (1818 <utimer_add+0x28>)
    1808:	f7ff fa4e 	bl	ca8 <__pi_syserror>
	__pi_utims [i] = ut;
    180c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    1810:	bd10      	pop	{r4, pc}
    1812:	bf00      	nop
    1814:	200006c0 	andcs	r0, r0, r0, asr #13
    1818:	0000512e 	andeq	r5, r0, lr, lsr #2

0000181c <__pi_utimer_set>:
	*t = v;
    181c:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    181e:	f7ff ba8d 	b.w	d3c <tci_run_auxiliary_timer>
	...

00001824 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    1824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1826:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1828:	4608      	mov	r0, r1
    182a:	f7ff fb25 	bl	e78 <tci_update_delay_ticks>
    182e:	2800      	cmp	r0, #0
    1830:	d154      	bne.n	18dc <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1832:	4b2b      	ldr	r3, [pc, #172]	; (18e0 <update_n_wake+0xbc>)
    1834:	4d2b      	ldr	r5, [pc, #172]	; (18e4 <update_n_wake+0xc0>)
    1836:	8819      	ldrh	r1, [r3, #0]
    1838:	882a      	ldrh	r2, [r5, #0]
    183a:	b289      	uxth	r1, r1
    183c:	428a      	cmp	r2, r1
    183e:	492a      	ldr	r1, [pc, #168]	; (18e8 <update_n_wake+0xc4>)
    1840:	d803      	bhi.n	184a <update_n_wake+0x26>
    1842:	8808      	ldrh	r0, [r1, #0]
    1844:	b280      	uxth	r0, r0
    1846:	4282      	cmp	r2, r0
    1848:	d20d      	bcs.n	1866 <update_n_wake+0x42>
    184a:	881e      	ldrh	r6, [r3, #0]
    184c:	8808      	ldrh	r0, [r1, #0]
    184e:	b2b6      	uxth	r6, r6
    1850:	b280      	uxth	r0, r0
    1852:	4286      	cmp	r6, r0
    1854:	d236      	bcs.n	18c4 <update_n_wake+0xa0>
    1856:	8818      	ldrh	r0, [r3, #0]
    1858:	b280      	uxth	r0, r0
    185a:	4282      	cmp	r2, r0
    185c:	d903      	bls.n	1866 <update_n_wake+0x42>
    185e:	8808      	ldrh	r0, [r1, #0]
    1860:	b280      	uxth	r0, r0
    1862:	4282      	cmp	r2, r0
    1864:	d32e      	bcc.n	18c4 <update_n_wake+0xa0>
		for_all_tasks (i) {
    1866:	4a21      	ldr	r2, [pc, #132]	; (18ec <update_n_wake+0xc8>)
    1868:	6810      	ldr	r0, [r2, #0]
    186a:	b918      	cbnz	r0, 1874 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    186c:	8818      	ldrh	r0, [r3, #0]
    186e:	4404      	add	r4, r0
    1870:	802c      	strh	r4, [r5, #0]
    1872:	e02c      	b.n	18ce <update_n_wake+0xaa>
			if (!twaiting (i))
    1874:	8806      	ldrh	r6, [r0, #0]
    1876:	0732      	lsls	r2, r6, #28
    1878:	d51b      	bpl.n	18b2 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    187a:	881f      	ldrh	r7, [r3, #0]
    187c:	8842      	ldrh	r2, [r0, #2]
    187e:	b2bf      	uxth	r7, r7
    1880:	42ba      	cmp	r2, r7
    1882:	d803      	bhi.n	188c <update_n_wake+0x68>
    1884:	880f      	ldrh	r7, [r1, #0]
    1886:	b2bf      	uxth	r7, r7
    1888:	42ba      	cmp	r2, r7
    188a:	d20f      	bcs.n	18ac <update_n_wake+0x88>
    188c:	f8b3 c000 	ldrh.w	ip, [r3]
    1890:	880f      	ldrh	r7, [r1, #0]
    1892:	fa1f fc8c 	uxth.w	ip, ip
    1896:	b2bf      	uxth	r7, r7
    1898:	45bc      	cmp	ip, r7
    189a:	d20c      	bcs.n	18b6 <update_n_wake+0x92>
    189c:	881f      	ldrh	r7, [r3, #0]
    189e:	b2bf      	uxth	r7, r7
    18a0:	42ba      	cmp	r2, r7
    18a2:	d903      	bls.n	18ac <update_n_wake+0x88>
    18a4:	880f      	ldrh	r7, [r1, #0]
    18a6:	b2bf      	uxth	r7, r7
    18a8:	42ba      	cmp	r2, r7
    18aa:	d304      	bcc.n	18b6 <update_n_wake+0x92>
				wakeuptm (i);
    18ac:	f026 060f 	bic.w	r6, r6, #15
    18b0:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    18b2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    18b4:	e7d9      	b.n	186a <update_n_wake+0x46>
				d = i->Timer - znew;
    18b6:	881e      	ldrh	r6, [r3, #0]
    18b8:	1b92      	subs	r2, r2, r6
    18ba:	b292      	uxth	r2, r2
    18bc:	4294      	cmp	r4, r2
    18be:	bf28      	it	cs
    18c0:	4614      	movcs	r4, r2
    18c2:	e7f6      	b.n	18b2 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    18c4:	8818      	ldrh	r0, [r3, #0]
    18c6:	1a12      	subs	r2, r2, r0
    18c8:	b292      	uxth	r2, r2
    18ca:	4294      	cmp	r4, r2
    18cc:	d9ce      	bls.n	186c <update_n_wake+0x48>
	__pi_old = znew;
    18ce:	881b      	ldrh	r3, [r3, #0]
    18d0:	b29b      	uxth	r3, r3
    18d2:	800b      	strh	r3, [r1, #0]
}
    18d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    18d8:	f7ff ba10 	b.w	cfc <tci_run_delay_timer>
}
    18dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18de:	bf00      	nop
    18e0:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
    18e4:	200006b0 			; <UNDEFINED> instruction: 0x200006b0
    18e8:	200006b2 			; <UNDEFINED> instruction: 0x200006b2
    18ec:	20000584 	andcs	r0, r0, r4, lsl #11

000018f0 <proceed>:
void proceed (word state) {
    18f0:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    18f2:	4b03      	ldr	r3, [pc, #12]	; (1900 <proceed+0x10>)
    18f4:	0100      	lsls	r0, r0, #4
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	8018      	strh	r0, [r3, #0]
	release;
    18fa:	f7ff fd93 	bl	1424 <__pi_release>
    18fe:	bf00      	nop
    1900:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

00001904 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1904:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    1906:	4b0a      	ldr	r3, [pc, #40]	; (1930 <__pi_wait+0x2c>)
    1908:	681c      	ldr	r4, [r3, #0]
    190a:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    190c:	f013 0f04 	tst.w	r3, #4
    1910:	f003 0207 	and.w	r2, r3, #7
    1914:	d003      	beq.n	191e <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    1916:	2005      	movs	r0, #5
    1918:	4906      	ldr	r1, [pc, #24]	; (1934 <__pi_wait+0x30>)
    191a:	f7ff f9c5 	bl	ca8 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    191e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    1922:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1924:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    1926:	8191      	strh	r1, [r2, #12]
    1928:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    192a:	8023      	strh	r3, [r4, #0]
}
    192c:	bd10      	pop	{r4, pc}
    192e:	bf00      	nop
    1930:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1934:	00005133 	andeq	r5, r0, r3, lsr r1

00001938 <__pi_trigger>:
void __pi_trigger (aword event) {
    1938:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    193a:	4b0b      	ldr	r3, [pc, #44]	; (1968 <__pi_trigger+0x30>)
    193c:	681a      	ldr	r2, [r3, #0]
    193e:	b192      	cbz	r2, 1966 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    1940:	4614      	mov	r4, r2
    1942:	2300      	movs	r3, #0
    1944:	f834 1b10 	ldrh.w	r1, [r4], #16
    1948:	f001 0107 	and.w	r1, r1, #7
    194c:	4299      	cmp	r1, r3
    194e:	dd08      	ble.n	1962 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    1950:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1954:	3301      	adds	r3, #1
    1956:	4285      	cmp	r5, r0
    1958:	d1f8      	bne.n	194c <__pi_trigger+0x14>
				wakeupev (i, j);
    195a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    195e:	889b      	ldrh	r3, [r3, #4]
    1960:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1962:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1964:	e7eb      	b.n	193e <__pi_trigger+0x6>
}
    1966:	bd30      	pop	{r4, r5, pc}
    1968:	20000584 	andcs	r0, r0, r4, lsl #11

0000196c <__pi_join>:
aword __pi_join (aword pid, word st) {
    196c:	b510      	push	{r4, lr}
    196e:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1970:	4b06      	ldr	r3, [pc, #24]	; (198c <__pi_join+0x20>)
    1972:	681b      	ldr	r3, [r3, #0]
    1974:	b90b      	cbnz	r3, 197a <__pi_join+0xe>
	return 0;
    1976:	461c      	mov	r4, r3
    1978:	e004      	b.n	1984 <__pi_join+0x18>
		if ((aword)i == pid) {
    197a:	42a3      	cmp	r3, r4
    197c:	d104      	bne.n	1988 <__pi_join+0x1c>
			__pi_wait (pid, st);
    197e:	4620      	mov	r0, r4
    1980:	f7ff ffc0 	bl	1904 <__pi_wait>
}
    1984:	4620      	mov	r0, r4
    1986:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    1988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    198a:	e7f3      	b.n	1974 <__pi_join+0x8>
    198c:	20000584 	andcs	r0, r0, r4, lsl #11

00001990 <delay>:
void delay (word d, word state) {
    1990:	b538      	push	{r3, r4, r5, lr}
    1992:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    1994:	4d0a      	ldr	r5, [pc, #40]	; (19c0 <delay+0x30>)
    1996:	682a      	ldr	r2, [r5, #0]
    1998:	8813      	ldrh	r3, [r2, #0]
    199a:	f003 0307 	and.w	r3, r3, #7
    199e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    19a2:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    19a4:	2101      	movs	r1, #1
    19a6:	f7ff ff3d 	bl	1824 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    19aa:	4b06      	ldr	r3, [pc, #24]	; (19c4 <delay+0x34>)
    19ac:	8818      	ldrh	r0, [r3, #0]
    19ae:	682b      	ldr	r3, [r5, #0]
    19b0:	4404      	add	r4, r0
    19b2:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    19b4:	682a      	ldr	r2, [r5, #0]
    19b6:	8813      	ldrh	r3, [r2, #0]
    19b8:	f043 0308 	orr.w	r3, r3, #8
    19bc:	8013      	strh	r3, [r2, #0]
}
    19be:	bd38      	pop	{r3, r4, r5, pc}
    19c0:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    19c4:	200006b2 			; <UNDEFINED> instruction: 0x200006b2

000019c8 <running>:
	if (fun == NULL)
    19c8:	4603      	mov	r3, r0
    19ca:	b910      	cbnz	r0, 19d2 <running+0xa>
		return (int) __pi_curr;
    19cc:	4b05      	ldr	r3, [pc, #20]	; (19e4 <running+0x1c>)
    19ce:	6818      	ldr	r0, [r3, #0]
    19d0:	4770      	bx	lr
	for_all_tasks (i)
    19d2:	4a05      	ldr	r2, [pc, #20]	; (19e8 <running+0x20>)
    19d4:	6810      	ldr	r0, [r2, #0]
    19d6:	b900      	cbnz	r0, 19da <running+0x12>
}
    19d8:	4770      	bx	lr
		if (i->code == fun)
    19da:	6842      	ldr	r2, [r0, #4]
    19dc:	429a      	cmp	r2, r3
    19de:	d0fb      	beq.n	19d8 <running+0x10>
	for_all_tasks (i)
    19e0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    19e2:	e7f8      	b.n	19d6 <running+0xe>
    19e4:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    19e8:	20000584 	andcs	r0, r0, r4, lsl #11

000019ec <__pi_strlen>:
int __pi_strlen (const char *s) {
    19ec:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    19ee:	2000      	movs	r0, #0
    19f0:	5c1a      	ldrb	r2, [r3, r0]
    19f2:	b902      	cbnz	r2, 19f6 <__pi_strlen+0xa>
}
    19f4:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    19f6:	3001      	adds	r0, #1
    19f8:	e7fa      	b.n	19f0 <__pi_strlen+0x4>

000019fa <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    19fa:	3801      	subs	r0, #1
    19fc:	f811 3b01 	ldrb.w	r3, [r1], #1
    1a00:	f800 3f01 	strb.w	r3, [r0, #1]!
    1a04:	2b00      	cmp	r3, #0
    1a06:	d1f9      	bne.n	19fc <__pi_strcpy+0x2>
}
    1a08:	4770      	bx	lr

00001a0a <__pi_strncpy>:
	while (n-- && (*s != '\0'))
    1a0a:	3901      	subs	r1, #1
    1a0c:	4402      	add	r2, r0
    1a0e:	4290      	cmp	r0, r2
    1a10:	d102      	bne.n	1a18 <__pi_strncpy+0xe>
	*d = '\0';
    1a12:	2300      	movs	r3, #0
    1a14:	7003      	strb	r3, [r0, #0]
}
    1a16:	4770      	bx	lr
	while (n-- && (*s != '\0'))
    1a18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d0f8      	beq.n	1a12 <__pi_strncpy+0x8>
		*d++ = *s++;
    1a20:	f800 3b01 	strb.w	r3, [r0], #1
    1a24:	e7f3      	b.n	1a0e <__pi_strncpy+0x4>

00001a26 <__pi_memcpy>:
	while (n--)
    1a26:	3801      	subs	r0, #1
    1a28:	440a      	add	r2, r1
    1a2a:	4291      	cmp	r1, r2
    1a2c:	d100      	bne.n	1a30 <__pi_memcpy+0xa>
}
    1a2e:	4770      	bx	lr
		*dest++ = *src++;
    1a30:	f811 3b01 	ldrb.w	r3, [r1], #1
    1a34:	f800 3f01 	strb.w	r3, [r0, #1]!
    1a38:	e7f7      	b.n	1a2a <__pi_memcpy+0x4>

00001a3a <__pi_memset>:
	while (n--)
    1a3a:	4402      	add	r2, r0
    1a3c:	4290      	cmp	r0, r2
    1a3e:	d100      	bne.n	1a42 <__pi_memset+0x8>
}
    1a40:	4770      	bx	lr
		*dest++ = c;
    1a42:	f800 1b01 	strb.w	r1, [r0], #1
    1a46:	e7f9      	b.n	1a3c <__pi_memset+0x2>

00001a48 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1a48:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    1a4a:	b119      	cbz	r1, 1a54 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1a4c:	2003      	movs	r0, #3
    1a4e:	4905      	ldr	r1, [pc, #20]	; (1a64 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1a50:	f7ff f92a 	bl	ca8 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1a54:	4b04      	ldr	r3, [pc, #16]	; (1a68 <adddevfunc+0x20>)
    1a56:	681a      	ldr	r2, [r3, #0]
    1a58:	b112      	cbz	r2, 1a60 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1a5a:	2004      	movs	r0, #4
    1a5c:	4901      	ldr	r1, [pc, #4]	; (1a64 <adddevfunc+0x1c>)
    1a5e:	e7f7      	b.n	1a50 <adddevfunc+0x8>
	ioreq [loc] = rf;
    1a60:	6018      	str	r0, [r3, #0]
}
    1a62:	bd08      	pop	{r3, pc}
    1a64:	00005136 	andeq	r5, r0, r6, lsr r1
    1a68:	20000588 	andcs	r0, r0, r8, lsl #11

00001a6c <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a70:	4604      	mov	r4, r0
    1a72:	4616      	mov	r6, r2
    1a74:	461d      	mov	r5, r3
    1a76:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1a7a:	b921      	cbnz	r1, 1a86 <io+0x1a>
    1a7c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1b04 <io+0x98>
    1a80:	f8d9 3000 	ldr.w	r3, [r9]
    1a84:	b91b      	cbnz	r3, 1a8e <io+0x22>
		syserror (ENODEVICE, "io");
    1a86:	2001      	movs	r0, #1
    1a88:	491d      	ldr	r1, [pc, #116]	; (1b00 <io+0x94>)
    1a8a:	f7ff f90d 	bl	ca8 <__pi_syserror>
	if (len == 0)
    1a8e:	f1b8 0f00 	cmp.w	r8, #0
    1a92:	d028      	beq.n	1ae6 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1a94:	4642      	mov	r2, r8
    1a96:	4629      	mov	r1, r5
    1a98:	4630      	mov	r0, r6
    1a9a:	4798      	blx	r3
	if (ret >= 0)
    1a9c:	2800      	cmp	r0, #0
    1a9e:	da23      	bge.n	1ae8 <io+0x7c>
	if (ret == -1) {
    1aa0:	1c41      	adds	r1, r0, #1
    1aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1aa6:	d108      	bne.n	1aba <io+0x4e>
		if (retry == WNONE)
    1aa8:	429c      	cmp	r4, r3
    1aaa:	d01c      	beq.n	1ae6 <io+0x7a>
		iowait (dev, operation, retry);
    1aac:	4621      	mov	r1, r4
    1aae:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1ab2:	f7ff ff27 	bl	1904 <__pi_wait>
			release;
    1ab6:	f7ff fcb5 	bl	1424 <__pi_release>
	if (ret == -2) {
    1aba:	1c82      	adds	r2, r0, #2
    1abc:	d116      	bne.n	1aec <io+0x80>
		if (retry != WNONE) {
    1abe:	429c      	cmp	r4, r3
    1ac0:	f8d9 9000 	ldr.w	r9, [r9]
    1ac4:	d00a      	beq.n	1adc <io+0x70>
			iowait (dev, operation, retry);
    1ac6:	4621      	mov	r1, r4
    1ac8:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1acc:	f7ff ff1a 	bl	1904 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1ad0:	4642      	mov	r2, r8
    1ad2:	4629      	mov	r1, r5
    1ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ad8:	47c8      	blx	r9
    1ada:	e7ec      	b.n	1ab6 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1adc:	4642      	mov	r2, r8
    1ade:	4629      	mov	r1, r5
    1ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ae4:	47c8      	blx	r9
		return 0;
    1ae6:	2000      	movs	r0, #0
}
    1ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1aec:	429c      	cmp	r4, r3
    1aee:	d0fa      	beq.n	1ae6 <io+0x7a>
		delay (-ret - 2, retry);
    1af0:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1af4:	30fe      	adds	r0, #254	; 0xfe
    1af6:	4621      	mov	r1, r4
    1af8:	b280      	uxth	r0, r0
    1afa:	f7ff ff49 	bl	1990 <delay>
		release;
    1afe:	e7da      	b.n	1ab6 <io+0x4a>
    1b00:	0000513b 	andeq	r5, r0, fp, lsr r1
    1b04:	20000588 	andcs	r0, r0, r8, lsl #11

00001b08 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b08:	4a0d      	ldr	r2, [pc, #52]	; (1b40 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1b0a:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b0c:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1b10:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1b14:	089b      	lsrs	r3, r3, #2
    1b16:	1e59      	subs	r1, r3, #1
    1b18:	29ff      	cmp	r1, #255	; 0xff
    1b1a:	d803      	bhi.n	1b24 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1b1c:	2004      	movs	r0, #4
    1b1e:	4909      	ldr	r1, [pc, #36]	; (1b44 <__pi_malloc_init+0x3c>)
    1b20:	f7ff f8c2 	bl	ca8 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b24:	4908      	ldr	r1, [pc, #32]	; (1b48 <__pi_malloc_init+0x40>)
    1b26:	1d10      	adds	r0, r2, #4
    1b28:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b2a:	2000      	movs	r0, #0
    1b2c:	4907      	ldr	r1, [pc, #28]	; (1b4c <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b2e:	3b02      	subs	r3, #2
    1b30:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b32:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b36:	4a06      	ldr	r2, [pc, #24]	; (1b50 <__pi_malloc_init+0x48>)
    1b38:	6013      	str	r3, [r2, #0]
    1b3a:	4a06      	ldr	r2, [pc, #24]	; (1b54 <__pi_malloc_init+0x4c>)
    1b3c:	6013      	str	r3, [r2, #0]
}
    1b3e:	bd08      	pop	{r3, pc}
    1b40:	200006d4 	ldrdcs	r0, [r0], -r4
    1b44:	0000513e 	andeq	r5, r0, lr, lsr r1
    1b48:	20000598 	mulcs	r0, r8, r5
    1b4c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1b50:	2000058c 	andcs	r0, r0, ip, lsl #11
    1b54:	20000594 	mulcs	r0, r4, r5

00001b58 <__pi_free>:
void __pi_free (aword *ch) {
    1b58:	b508      	push	{r3, lr}
	if (ch == NULL)
    1b5a:	b1c8      	cbz	r0, 1b90 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b5c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1b60:	2b00      	cmp	r3, #0
    1b62:	db03      	blt.n	1b6c <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1b64:	2006      	movs	r0, #6
    1b66:	490b      	ldr	r1, [pc, #44]	; (1b94 <__pi_free+0x3c>)
    1b68:	f7ff f89e 	bl	ca8 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1b6c:	490a      	ldr	r1, [pc, #40]	; (1b98 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1b6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1b72:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1b74:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1b78:	4413      	add	r3, r2
    1b7a:	600b      	str	r3, [r1, #0]
	QFREE;
    1b7c:	f7ff fde4 	bl	1748 <qfree>
	if (mevent [MA_NP] . nwait) {
    1b80:	4806      	ldr	r0, [pc, #24]	; (1b9c <__pi_free+0x44>)
    1b82:	7803      	ldrb	r3, [r0, #0]
    1b84:	b123      	cbz	r3, 1b90 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1b86:	f7ff fed7 	bl	1938 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1b8a:	7803      	ldrb	r3, [r0, #0]
    1b8c:	3b01      	subs	r3, #1
    1b8e:	7003      	strb	r3, [r0, #0]
}
    1b90:	bd08      	pop	{r3, pc}
    1b92:	bf00      	nop
    1b94:	00005143 	andeq	r5, r0, r3, asr #2
    1b98:	2000058c 	andcs	r0, r0, ip, lsl #11
    1b9c:	20000590 	mulcs	r0, r0, r5

00001ba0 <kill>:
void kill (aword pid) {
    1ba0:	b510      	push	{r4, lr}
	if (pid == 0)
    1ba2:	b908      	cbnz	r0, 1ba8 <kill+0x8>
		pid = (aword) __pi_curr;
    1ba4:	4b0f      	ldr	r3, [pc, #60]	; (1be4 <kill+0x44>)
    1ba6:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1ba8:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1baa:	4b0f      	ldr	r3, [pc, #60]	; (1be8 <kill+0x48>)
    1bac:	681c      	ldr	r4, [r3, #0]
    1bae:	b91c      	cbnz	r4, 1bb8 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1bb0:	2003      	movs	r0, #3
    1bb2:	490e      	ldr	r1, [pc, #56]	; (1bec <kill+0x4c>)
    1bb4:	f7ff f878 	bl	ca8 <__pi_syserror>
		if ((aword)i == pid) {
    1bb8:	4284      	cmp	r4, r0
    1bba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1bbc:	d10e      	bne.n	1bdc <kill+0x3c>
			if (j == NULL)
    1bbe:	b95a      	cbnz	r2, 1bd8 <kill+0x38>
				__PCB = i->Next;
    1bc0:	6019      	str	r1, [r3, #0]
			killev (i);
    1bc2:	4620      	mov	r0, r4
    1bc4:	f7ff fda2 	bl	170c <killev>
			ufree (i);
    1bc8:	f7ff ffc6 	bl	1b58 <__pi_free>
			if (i == __pi_curr)
    1bcc:	4b05      	ldr	r3, [pc, #20]	; (1be4 <kill+0x44>)
    1bce:	681b      	ldr	r3, [r3, #0]
    1bd0:	42a3      	cmp	r3, r4
    1bd2:	d106      	bne.n	1be2 <kill+0x42>
				release;
    1bd4:	f7ff fc26 	bl	1424 <__pi_release>
				j->Next = i->Next;
    1bd8:	62d1      	str	r1, [r2, #44]	; 0x2c
    1bda:	e7f2      	b.n	1bc2 <kill+0x22>
    1bdc:	4622      	mov	r2, r4
    1bde:	460c      	mov	r4, r1
    1be0:	e7e5      	b.n	1bae <kill+0xe>
}
    1be2:	bd10      	pop	{r4, pc}
    1be4:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1be8:	20000584 	andcs	r0, r0, r4, lsl #11
    1bec:	00005148 	andeq	r5, r0, r8, asr #2

00001bf0 <__pi_malloc>:
	if (size < 8)
    1bf0:	2807      	cmp	r0, #7
		_size = 2;
    1bf2:	bf98      	it	ls
    1bf4:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    1bf6:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1bf8:	4b21      	ldr	r3, [pc, #132]	; (1c80 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    1bfa:	bf88      	it	hi
    1bfc:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1bfe:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c00:	4920      	ldr	r1, [pc, #128]	; (1c84 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1c02:	bf88      	it	hi
    1c04:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c06:	b94c      	cbnz	r4, 1c1c <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1c08:	4a1f      	ldr	r2, [pc, #124]	; (1c88 <__pi_malloc+0x98>)
    1c0a:	7853      	ldrb	r3, [r2, #1]
    1c0c:	2bff      	cmp	r3, #255	; 0xff
    1c0e:	d001      	beq.n	1c14 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1c10:	3301      	adds	r3, #1
    1c12:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1c14:	2200      	movs	r2, #0
    1c16:	4b1d      	ldr	r3, [pc, #116]	; (1c8c <__pi_malloc+0x9c>)
    1c18:	601a      	str	r2, [r3, #0]
	return chunk;
    1c1a:	e02f      	b.n	1c7c <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c1c:	6862      	ldr	r2, [r4, #4]
    1c1e:	428a      	cmp	r2, r1
    1c20:	d003      	beq.n	1c2a <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1c22:	2006      	movs	r0, #6
    1c24:	491a      	ldr	r1, [pc, #104]	; (1c90 <__pi_malloc+0xa0>)
    1c26:	f7ff f83f 	bl	ca8 <__pi_syserror>
		if (m_size (chunk) >= _size)
    1c2a:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1c2e:	4285      	cmp	r5, r0
    1c30:	d202      	bcs.n	1c38 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1c32:	4623      	mov	r3, r4
    1c34:	4614      	mov	r4, r2
    1c36:	e7e6      	b.n	1c06 <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1c38:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c3a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1c3e:	1a1b      	subs	r3, r3, r0
    1c40:	2b08      	cmp	r3, #8
    1c42:	d909      	bls.n	1c58 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1c44:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1c48:	3001      	adds	r0, #1
    1c4a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1c4e:	3b01      	subs	r3, #1
    1c50:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1c54:	f7ff fd78 	bl	1748 <qfree>
		mevent [MA_NP] . nfail = 0;
    1c58:	2200      	movs	r2, #0
    1c5a:	4b0b      	ldr	r3, [pc, #44]	; (1c88 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1c5c:	490d      	ldr	r1, [pc, #52]	; (1c94 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1c5e:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1c60:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1c64:	680b      	ldr	r3, [r1, #0]
    1c66:	1a9b      	subs	r3, r3, r2
    1c68:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1c6a:	4908      	ldr	r1, [pc, #32]	; (1c8c <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1c6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1c70:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1c72:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1c76:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1c78:	bf38      	it	cc
    1c7a:	600b      	strcc	r3, [r1, #0]
}
    1c7c:	4620      	mov	r0, r4
    1c7e:	bd38      	pop	{r3, r4, r5, pc}
    1c80:	20000598 	mulcs	r0, r8, r5
    1c84:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1c88:	20000590 	mulcs	r0, r0, r5
    1c8c:	20000594 	mulcs	r0, r4, r5
    1c90:	0000514c 	andeq	r5, r0, ip, asr #2
    1c94:	2000058c 	andcs	r0, r0, ip, lsl #11

00001c98 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1c98:	b538      	push	{r3, r4, r5, lr}
    1c9a:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c9c:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1c9e:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1ca0:	f7ff ffa6 	bl	1bf0 <__pi_malloc>
    1ca4:	2300      	movs	r3, #0
    1ca6:	b138      	cbz	r0, 1cb8 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1ca8:	4a07      	ldr	r2, [pc, #28]	; (1cc8 <__pi_fork+0x30>)
	i->Status = 0;
    1caa:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1cac:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1cae:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1cb0:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1cb4:	b90b      	cbnz	r3, 1cba <__pi_fork+0x22>
			__PCB = i;
    1cb6:	6010      	str	r0, [r2, #0]
}
    1cb8:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1cba:	461a      	mov	r2, r3
    1cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d1fb      	bne.n	1cba <__pi_fork+0x22>
			j->Next = i;
    1cc2:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1cc4:	e7f8      	b.n	1cb8 <__pi_fork+0x20>
    1cc6:	bf00      	nop
    1cc8:	20000584 	andcs	r0, r0, r4, lsl #11

00001ccc <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1ccc:	4a04      	ldr	r2, [pc, #16]	; (1ce0 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1cce:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1cd0:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1cd2:	4803      	ldr	r0, [pc, #12]	; (1ce0 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1cd4:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1cd6:	bf1c      	itt	ne
    1cd8:	3301      	addne	r3, #1
    1cda:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1cdc:	f7ff be12 	b.w	1904 <__pi_wait>
    1ce0:	20000590 	mulcs	r0, r0, r5

00001ce4 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1ce4:	b40f      	push	{r0, r1, r2, r3}
    1ce6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1cea:	ab0a      	add	r3, sp, #40	; 0x28
    1cec:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1cf0:	2015      	movs	r0, #21
	va_start (ap, mess);
    1cf2:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1cf4:	4b46      	ldr	r3, [pc, #280]	; (1e10 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1cf6:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1cf8:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    1cfa:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1e18 <diag+0x134>
	diag_disable_int (a, is);
    1cfe:	695b      	ldr	r3, [r3, #20]
    1d00:	4798      	blx	r3
	while (*mess != '\0') {
    1d02:	7820      	ldrb	r0, [r4, #0]
    1d04:	b998      	cbnz	r0, 1d2e <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    1d06:	200d      	movs	r0, #13
    1d08:	f7ff fd5e 	bl	17c8 <dgout>
	dgout ('\n');
    1d0c:	200a      	movs	r0, #10
    1d0e:	f7ff fd5b 	bl	17c8 <dgout>
    1d12:	4a40      	ldr	r2, [pc, #256]	; (1e14 <diag+0x130>)
    1d14:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    1d16:	071b      	lsls	r3, r3, #28
    1d18:	d4fc      	bmi.n	1d14 <diag+0x30>
	diag_enable_int (a, is);
    1d1a:	4b3d      	ldr	r3, [pc, #244]	; (1e10 <diag+0x12c>)
    1d1c:	2015      	movs	r0, #21
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	691b      	ldr	r3, [r3, #16]
    1d22:	4798      	blx	r3
}
    1d24:	b003      	add	sp, #12
    1d26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d2a:	b004      	add	sp, #16
    1d2c:	4770      	bx	lr
		if (*mess == '%') {
    1d2e:	2825      	cmp	r0, #37	; 0x25
    1d30:	f104 0601 	add.w	r6, r4, #1
    1d34:	d169      	bne.n	1e0a <diag+0x126>
			if (*mess == 'l') {
    1d36:	9b01      	ldr	r3, [sp, #4]
    1d38:	7862      	ldrb	r2, [r4, #1]
    1d3a:	f853 1b04 	ldr.w	r1, [r3], #4
    1d3e:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1d40:	bf08      	it	eq
    1d42:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1d44:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1d46:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1d48:	bf0c      	ite	eq
    1d4a:	2520      	moveq	r5, #32
				bc = 16;
    1d4c:	2510      	movne	r5, #16
			switch (*mess) {
    1d4e:	2b75      	cmp	r3, #117	; 0x75
    1d50:	d04e      	beq.n	1df0 <diag+0x10c>
    1d52:	d80a      	bhi.n	1d6a <diag+0x86>
    1d54:	2b64      	cmp	r3, #100	; 0x64
    1d56:	d01c      	beq.n	1d92 <diag+0xae>
    1d58:	2b73      	cmp	r3, #115	; 0x73
    1d5a:	d052      	beq.n	1e02 <diag+0x11e>
				dgout ('%');
    1d5c:	2025      	movs	r0, #37	; 0x25
    1d5e:	f7ff fd33 	bl	17c8 <dgout>
				dgout (*mess);
    1d62:	7830      	ldrb	r0, [r6, #0]
    1d64:	f7ff fd30 	bl	17c8 <dgout>
    1d68:	e010      	b.n	1d8c <diag+0xa8>
			switch (*mess) {
    1d6a:	2b78      	cmp	r3, #120	; 0x78
    1d6c:	d1f6      	bne.n	1d5c <diag+0x78>
    1d6e:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1d70:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1e1c <diag+0x138>
					i += 4;
    1d74:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1d76:	1b2b      	subs	r3, r5, r4
    1d78:	fa21 f303 	lsr.w	r3, r1, r3
    1d7c:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1d80:	f819 0003 	ldrb.w	r0, [r9, r3]
    1d84:	f7ff fd20 	bl	17c8 <dgout>
				while (i < bc) {
    1d88:	42a5      	cmp	r5, r4
    1d8a:	dcf3      	bgt.n	1d74 <diag+0x90>
			mess++;
    1d8c:	3601      	adds	r6, #1
					d /= 10;
    1d8e:	4634      	mov	r4, r6
    1d90:	e7b7      	b.n	1d02 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1d92:	1e6b      	subs	r3, r5, #1
    1d94:	fa21 f303 	lsr.w	r3, r1, r3
    1d98:	07da      	lsls	r2, r3, #31
    1d9a:	d509      	bpl.n	1db0 <diag+0xcc>
					dgout ('-');
    1d9c:	202d      	movs	r0, #45	; 0x2d
    1d9e:	f7ff fd13 	bl	17c8 <dgout>
					if (bc == 16)
    1da2:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1da4:	bf04      	itt	eq
    1da6:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1daa:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1dae:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1db0:	f242 7410 	movw	r4, #10000	; 0x2710
    1db4:	2d10      	cmp	r5, #16
    1db6:	bf18      	it	ne
    1db8:	4644      	movne	r4, r8
					v = (word) (val / d);
    1dba:	fbb1 f5f4 	udiv	r5, r1, r4
    1dbe:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1dc0:	b935      	cbnz	r5, 1dd0 <diag+0xec>
    1dc2:	2c01      	cmp	r4, #1
    1dc4:	d004      	beq.n	1dd0 <diag+0xec>
					d /= 10;
    1dc6:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1dca:	e7f6      	b.n	1dba <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1dcc:	4c12      	ldr	r4, [pc, #72]	; (1e18 <diag+0x134>)
    1dce:	e7f4      	b.n	1dba <diag+0xd6>
					dgout (v + '0');
    1dd0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1dd4:	b280      	uxth	r0, r0
    1dd6:	f7ff fcf7 	bl	17c8 <dgout>
					if (d == 0) break;
    1dda:	2c09      	cmp	r4, #9
					d /= 10;
    1ddc:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1de0:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1de4:	d9d2      	bls.n	1d8c <diag+0xa8>
					v = (word) (val / d);
    1de6:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1dea:	461c      	mov	r4, r3
					v = (word) (val / d);
    1dec:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1dee:	e7ef      	b.n	1dd0 <diag+0xec>
				if (bc == 16)
    1df0:	2d10      	cmp	r5, #16
    1df2:	d1eb      	bne.n	1dcc <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1df4:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1df8:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1dfa:	e7de      	b.n	1dba <diag+0xd6>
					dgout (*s);
    1dfc:	f7ff fce4 	bl	17c8 <dgout>
					s++;
    1e00:	3101      	adds	r1, #1
				while (*s != '\0') {
    1e02:	7808      	ldrb	r0, [r1, #0]
    1e04:	2800      	cmp	r0, #0
    1e06:	d1f9      	bne.n	1dfc <diag+0x118>
    1e08:	e7c0      	b.n	1d8c <diag+0xa8>
			dgout (*mess++);
    1e0a:	f7ff fcdd 	bl	17c8 <dgout>
    1e0e:	e7be      	b.n	1d8e <diag+0xaa>
    1e10:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1e14:	40001018 	andmi	r1, r0, r8, lsl r0
    1e18:	3b9aca00 	blcc	fe6b4620 <_estack+0xde6af620>
    1e1c:	00005151 	andeq	r5, r0, r1, asr r1

00001e20 <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e20:	f243 0039 	movw	r0, #12345	; 0x3039
    1e24:	4a04      	ldr	r2, [pc, #16]	; (1e38 <lrnd+0x18>)
    1e26:	4905      	ldr	r1, [pc, #20]	; (1e3c <lrnd+0x1c>)
    1e28:	6813      	ldr	r3, [r2, #0]
    1e2a:	fb01 0303 	mla	r3, r1, r3, r0
    1e2e:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1e30:	4a03      	ldr	r2, [pc, #12]	; (1e40 <lrnd+0x20>)
    1e32:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1e34:	4058      	eors	r0, r3
    1e36:	4770      	bx	lr
    1e38:	20000004 	andcs	r0, r0, r4
    1e3c:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1e40:	200006ac 	andcs	r0, r0, ip, lsr #13

00001e44 <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e44:	b510      	push	{r4, lr}
    1e46:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1e48:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e4a:	b280      	uxth	r0, r0
    1e4c:	f7ff fed0 	bl	1bf0 <__pi_malloc>
    1e50:	b110      	cbz	r0, 1e58 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1e52:	2300      	movs	r3, #0
	p -> length = size;
    1e54:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1e56:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1e58:	bd10      	pop	{r4, pc}

00001e5a <deq>:
	if (p->attributes.b.queued) {
    1e5a:	7a83      	ldrb	r3, [r0, #10]
    1e5c:	07db      	lsls	r3, r3, #31
    1e5e:	d508      	bpl.n	1e72 <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e60:	e9d0 2300 	ldrd	r2, r3, [r0]
    1e64:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e66:	6802      	ldr	r2, [r0, #0]
    1e68:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1e6a:	7a83      	ldrb	r3, [r0, #10]
    1e6c:	f36f 0300 	bfc	r3, #0, #1
    1e70:	7283      	strb	r3, [r0, #10]
}
    1e72:	4770      	bx	lr

00001e74 <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1e74:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1e76:	f7ff fff0 	bl	1e5a <deq>
}
    1e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1e7e:	f7ff be6b 	b.w	1b58 <__pi_free>
	...

00001e84 <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1e84:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1e86:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1e88:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1e8a:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1e8c:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1e8e:	d503      	bpl.n	1e98 <enq+0x14>
    1e90:	200a      	movs	r0, #10
    1e92:	490e      	ldr	r1, [pc, #56]	; (1ecc <enq+0x48>)
    1e94:	f7fe ff08 	bl	ca8 <__pi_syserror>
	if (q_empty (q))
    1e98:	6803      	ldr	r3, [r0, #0]
    1e9a:	4283      	cmp	r3, r0
    1e9c:	d101      	bne.n	1ea2 <enq+0x1e>
		trigger (q);
    1e9e:	f7ff fd4b 	bl	1938 <__pi_trigger>
	if (p->attributes.b.urgent) {
    1ea2:	7aa3      	ldrb	r3, [r4, #10]
    1ea4:	075b      	lsls	r3, r3, #29
    1ea6:	d50a      	bpl.n	1ebe <enq+0x3a>
		p->u.bqueue.next = q->next;
    1ea8:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1eaa:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    1eae:	682b      	ldr	r3, [r5, #0]
    1eb0:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    1eb2:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    1eb4:	7aa3      	ldrb	r3, [r4, #10]
    1eb6:	f043 0301 	orr.w	r3, r3, #1
    1eba:	72a3      	strb	r3, [r4, #10]
}
    1ebc:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    1ebe:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    1ec0:	686b      	ldr	r3, [r5, #4]
    1ec2:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1ec4:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1ec6:	606c      	str	r4, [r5, #4]
    1ec8:	e7f4      	b.n	1eb4 <enq+0x30>
    1eca:	bf00      	nop
    1ecc:	00005161 	andeq	r5, r0, r1, ror #2

00001ed0 <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1ed0:	b510      	push	{r4, lr}
    1ed2:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1ed4:	f7ff ffc1 	bl	1e5a <deq>
	switch (dv) {
    1ed8:	3901      	subs	r1, #1
    1eda:	2904      	cmp	r1, #4
    1edc:	d832      	bhi.n	1f44 <dispose+0x74>
    1ede:	e8df f001 	tbb	[pc, r1]
    1ee2:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    1ee6:	7a830019 	bvc	fe0c1f52 <_estack+0xde0bcf52>
			p->attributes.b.urgent = 1;
    1eea:	f043 0304 	orr.w	r3, r3, #4
    1eee:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1ef0:	8963      	ldrh	r3, [r4, #10]
    1ef2:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    1ef6:	2b07      	cmp	r3, #7
    1ef8:	d803      	bhi.n	1f02 <dispose+0x32>
    1efa:	4a13      	ldr	r2, [pc, #76]	; (1f48 <dispose+0x78>)
    1efc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1f00:	b918      	cbnz	r0, 1f0a <dispose+0x3a>
    1f02:	4912      	ldr	r1, [pc, #72]	; (1f4c <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1f04:	200a      	movs	r0, #10
    1f06:	f7fe fecf 	bl	ca8 <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    1f0a:	4621      	mov	r1, r4
}
    1f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1f10:	f7ff bfb8 	b.w	1e84 <enq>
			p->attributes.b.urgent = 1;
    1f14:	7a83      	ldrb	r3, [r0, #10]
    1f16:	f043 0304 	orr.w	r3, r3, #4
    1f1a:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    1f1c:	7ae2      	ldrb	r2, [r4, #11]
    1f1e:	2a5f      	cmp	r2, #95	; 0x5f
    1f20:	ea4f 1352 	mov.w	r3, r2, lsr #5
    1f24:	d803      	bhi.n	1f2e <dispose+0x5e>
    1f26:	4a0a      	ldr	r2, [pc, #40]	; (1f50 <dispose+0x80>)
    1f28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1f2c:	b90a      	cbnz	r2, 1f32 <dispose+0x62>
    1f2e:	4909      	ldr	r1, [pc, #36]	; (1f54 <dispose+0x84>)
    1f30:	e7e8      	b.n	1f04 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    1f32:	4a09      	ldr	r2, [pc, #36]	; (1f58 <dispose+0x88>)
    1f34:	4621      	mov	r1, r4
    1f36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1f3a:	e7e7      	b.n	1f0c <dispose+0x3c>
}
    1f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    1f40:	f7ff bf98 	b.w	1e74 <rlp>
}
    1f44:	bd10      	pop	{r4, pc}
    1f46:	bf00      	nop
    1f48:	2000059c 	mulcs	r0, ip, r5
    1f4c:	00005167 	andeq	r5, r0, r7, ror #2
    1f50:	200005c8 	andcs	r0, r0, r8, asr #11
    1f54:	00005173 	andeq	r5, r0, r3, ror r1
    1f58:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

00001f5c <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f5c:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    1f5e:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    1f62:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    1f66:	0792      	lsls	r2, r2, #30
    1f68:	d522      	bpl.n	1fb0 <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    1f6a:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    1f6e:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    1f72:	2a07      	cmp	r2, #7
    1f74:	d803      	bhi.n	1f7e <tcv_endp+0x22>
    1f76:	4911      	ldr	r1, [pc, #68]	; (1fbc <tcv_endp+0x60>)
    1f78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1f7c:	b91a      	cbnz	r2, 1f86 <tcv_endp+0x2a>
    1f7e:	4910      	ldr	r1, [pc, #64]	; (1fc0 <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1f80:	200a      	movs	r0, #10
    1f82:	f7fe fe91 	bl	ca8 <__pi_syserror>
    1f86:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1f8a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1f8e:	2b02      	cmp	r3, #2
    1f90:	d805      	bhi.n	1f9e <tcv_endp+0x42>
    1f92:	4a0c      	ldr	r2, [pc, #48]	; (1fc4 <tcv_endp+0x68>)
    1f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f98:	b10b      	cbz	r3, 1f9e <tcv_endp+0x42>
    1f9a:	691b      	ldr	r3, [r3, #16]
    1f9c:	b90b      	cbnz	r3, 1fa2 <tcv_endp+0x46>
    1f9e:	490a      	ldr	r1, [pc, #40]	; (1fc8 <tcv_endp+0x6c>)
    1fa0:	e7ee      	b.n	1f80 <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fa2:	4798      	blx	r3
    1fa4:	4601      	mov	r1, r0
    1fa6:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    1fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fac:	f7ff bf90 	b.w	1ed0 <dispose>
		rlp (b);
    1fb0:	4620      	mov	r0, r4
}
    1fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    1fb6:	f7ff bf5d 	b.w	1e74 <rlp>
    1fba:	bf00      	nop
    1fbc:	2000059c 	mulcs	r0, ip, r5
    1fc0:	0000517f 	andeq	r5, r0, pc, ror r1
    1fc4:	200005e0 	andcs	r0, r0, r0, ror #11
    1fc8:	00005185 	andeq	r5, r0, r5, lsl #3

00001fcc <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1fcc:	b40c      	push	{r2, r3}
    1fce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1fd2:	ab0a      	add	r3, sp, #40	; 0x28
    1fd4:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fd8:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1fda:	460f      	mov	r7, r1
	va_start (ap, plid);
    1fdc:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fde:	d80b      	bhi.n	1ff8 <tcv_open+0x2c>
    1fe0:	4b24      	ldr	r3, [pc, #144]	; (2074 <tcv_open+0xa8>)
    1fe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1fe6:	b13b      	cbz	r3, 1ff8 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1fe8:	f1b8 0f02 	cmp.w	r8, #2
    1fec:	d804      	bhi.n	1ff8 <tcv_open+0x2c>
    1fee:	4b22      	ldr	r3, [pc, #136]	; (2078 <tcv_open+0xac>)
    1ff0:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    1ff4:	4699      	mov	r9, r3
    1ff6:	b91a      	cbnz	r2, 2000 <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    1ff8:	2001      	movs	r0, #1
    1ffa:	4920      	ldr	r1, [pc, #128]	; (207c <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    1ffc:	f7fe fe54 	bl	ca8 <__pi_syserror>
	attp.b.outgoing = 1;
    2000:	f008 0307 	and.w	r3, r8, #7
    2004:	029b      	lsls	r3, r3, #10
    2006:	f043 0302 	orr.w	r3, r3, #2
    200a:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    200e:	4b1c      	ldr	r3, [pc, #112]	; (2080 <tcv_open+0xb4>)
    2010:	2600      	movs	r6, #0
    2012:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    2014:	f853 2b04 	ldr.w	r2, [r3], #4
    2018:	b312      	cbz	r2, 2060 <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    201a:	3601      	adds	r6, #1
    201c:	2e08      	cmp	r6, #8
    201e:	d1f9      	bne.n	2014 <tcv_open+0x48>
		return ERROR;
    2020:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    2024:	4630      	mov	r0, r6
    2026:	b002      	add	sp, #8
    2028:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    202c:	b002      	add	sp, #8
    202e:	4770      	bx	lr
	s->attpattern.b.session = fd;
    2030:	462b      	mov	r3, r5
    2032:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    2036:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    203a:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    203c:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2040:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    2044:	681b      	ldr	r3, [r3, #0]
    2046:	b913      	cbnz	r3, 204e <tcv_open+0x82>
    2048:	200a      	movs	r0, #10
    204a:	490e      	ldr	r1, [pc, #56]	; (2084 <tcv_open+0xb8>)
    204c:	e7d6      	b.n	1ffc <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    204e:	4631      	mov	r1, r6
    2050:	4638      	mov	r0, r7
    2052:	9a01      	ldr	r2, [sp, #4]
    2054:	4798      	blx	r3
    2056:	2800      	cmp	r0, #0
    2058:	d1e2      	bne.n	2020 <tcv_open+0x54>
	descriptors [fd] = s;
    205a:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    205e:	e7e1      	b.n	2024 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2060:	200c      	movs	r0, #12
    2062:	f7ff fdc5 	bl	1bf0 <__pi_malloc>
	if (s == NULL)
    2066:	4604      	mov	r4, r0
    2068:	2800      	cmp	r0, #0
    206a:	d1e1      	bne.n	2030 <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    206c:	2006      	movs	r0, #6
    206e:	4906      	ldr	r1, [pc, #24]	; (2088 <tcv_open+0xbc>)
    2070:	e7c4      	b.n	1ffc <tcv_open+0x30>
    2072:	bf00      	nop
    2074:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2078:	200005e0 	andcs	r0, r0, r0, ror #11
    207c:	0000518b 	andeq	r5, r0, fp, lsl #3
    2080:	2000059c 	mulcs	r0, ip, r5
    2084:	00005197 	muleq	r0, r7, r1
    2088:	00005191 	muleq	r0, r1, r1

0000208c <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    208c:	2802      	cmp	r0, #2
    208e:	d809      	bhi.n	20a4 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    2090:	4b06      	ldr	r3, [pc, #24]	; (20ac <tcv_plug+0x20>)
    2092:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    2096:	b10a      	cbz	r2, 209c <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    2098:	428a      	cmp	r2, r1
    209a:	d103      	bne.n	20a4 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    209c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    20a0:	2000      	movs	r0, #0
    20a2:	4770      	bx	lr
		return ERROR;
    20a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    20a8:	4770      	bx	lr
    20aa:	bf00      	nop
    20ac:	200005e0 	andcs	r0, r0, r0, ror #11

000020b0 <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    20b0:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20b2:	b538      	push	{r3, r4, r5, lr}
    20b4:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    20b6:	d803      	bhi.n	20c0 <tcv_rnp+0x10>
    20b8:	4a19      	ldr	r2, [pc, #100]	; (2120 <tcv_rnp+0x70>)
    20ba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    20be:	b918      	cbnz	r0, 20c8 <tcv_rnp+0x18>
    20c0:	4918      	ldr	r1, [pc, #96]	; (2124 <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    20c2:	200a      	movs	r0, #10
    20c4:	f7fe fdf0 	bl	ca8 <__pi_syserror>
	b = q_first (rq);
    20c8:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    20ca:	42a0      	cmp	r0, r4
    20cc:	d108      	bne.n	20e0 <tcv_rnp+0x30>
		if (state != WNONE) {
    20ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    20d2:	4293      	cmp	r3, r2
    20d4:	d021      	beq.n	211a <tcv_rnp+0x6a>
			when (rq, state);
    20d6:	4619      	mov	r1, r3
    20d8:	f7ff fc14 	bl	1904 <__pi_wait>
			release;
    20dc:	f7ff f9a2 	bl	1424 <__pi_release>
	deq (b);	// Dequeue the packet ...
    20e0:	4620      	mov	r0, r4
    20e2:	f7ff feba 	bl	1e5a <deq>
	verify_plg (b, tcv_frm, "tcv11");
    20e6:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    20e8:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    20ec:	f3c3 0382 	ubfx	r3, r3, #2, #3
    20f0:	2b02      	cmp	r3, #2
    20f2:	d805      	bhi.n	2100 <tcv_rnp+0x50>
    20f4:	4a0c      	ldr	r2, [pc, #48]	; (2128 <tcv_rnp+0x78>)
    20f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    20fa:	b10b      	cbz	r3, 2100 <tcv_rnp+0x50>
    20fc:	68db      	ldr	r3, [r3, #12]
    20fe:	b90b      	cbnz	r3, 2104 <tcv_rnp+0x54>
    2100:	490a      	ldr	r1, [pc, #40]	; (212c <tcv_rnp+0x7c>)
    2102:	e7de      	b.n	20c2 <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2104:	4621      	mov	r1, r4
    2106:	4628      	mov	r0, r5
    2108:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    210a:	8823      	ldrh	r3, [r4, #0]
    210c:	8862      	ldrh	r2, [r4, #2]
    210e:	441a      	add	r2, r3
    2110:	8923      	ldrh	r3, [r4, #8]
    2112:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    2114:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    2116:	4628      	mov	r0, r5
    2118:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    211a:	2500      	movs	r5, #0
    211c:	e7fb      	b.n	2116 <tcv_rnp+0x66>
    211e:	bf00      	nop
    2120:	2000059c 	mulcs	r0, ip, r5
    2124:	0000519d 	muleq	r0, sp, r1
    2128:	200005e0 	andcs	r0, r0, r0, ror #11
    212c:	000051a3 	andeq	r5, r0, r3, lsr #3

00002130 <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    2130:	2908      	cmp	r1, #8
								Boolean urg) {
    2132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2134:	4605      	mov	r5, r0
    2136:	4614      	mov	r4, r2
    2138:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    213a:	d803      	bhi.n	2144 <tcv_wnps+0x14>
    213c:	4b26      	ldr	r3, [pc, #152]	; (21d8 <tcv_wnps+0xa8>)
    213e:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    2142:	b91f      	cbnz	r7, 214c <tcv_wnps+0x1c>
    2144:	4925      	ldr	r1, [pc, #148]	; (21dc <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    2146:	200a      	movs	r0, #10
    2148:	f7fe fdae 	bl	ca8 <__pi_syserror>
    214c:	7a7b      	ldrb	r3, [r7, #9]
    214e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2152:	2b02      	cmp	r3, #2
    2154:	d805      	bhi.n	2162 <tcv_wnps+0x32>
    2156:	4a22      	ldr	r2, [pc, #136]	; (21e0 <tcv_wnps+0xb0>)
    2158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    215c:	b10b      	cbz	r3, 2162 <tcv_wnps+0x32>
    215e:	68db      	ldr	r3, [r3, #12]
    2160:	b90b      	cbnz	r3, 2166 <tcv_wnps+0x36>
    2162:	4920      	ldr	r1, [pc, #128]	; (21e4 <tcv_wnps+0xb4>)
    2164:	e7ef      	b.n	2146 <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    2166:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    216a:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    216c:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2170:	a901      	add	r1, sp, #4
    2172:	4798      	blx	r3
    2174:	b158      	cbz	r0, 218e <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    2176:	f64f 73ff 	movw	r3, #65535	; 0xffff
    217a:	429d      	cmp	r5, r3
    217c:	d102      	bne.n	2184 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    217e:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    2180:	b003      	add	sp, #12
    2182:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    2184:	4629      	mov	r1, r5
    2186:	f7ff fbbd 	bl	1904 <__pi_wait>
			release;
    218a:	f7ff f94b 	bl	1424 <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    218e:	7a3b      	ldrb	r3, [r7, #8]
    2190:	07db      	lsls	r3, r3, #31
    2192:	d501      	bpl.n	2198 <tcv_wnps+0x68>
    2194:	4914      	ldr	r1, [pc, #80]	; (21e8 <tcv_wnps+0xb8>)
    2196:	e7d6      	b.n	2146 <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2198:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    219c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    21a0:	b2a4      	uxth	r4, r4
    21a2:	4418      	add	r0, r3
    21a4:	4420      	add	r0, r4
    21a6:	b280      	uxth	r0, r0
    21a8:	f7ff fe4c 	bl	1e44 <apb>
    21ac:	b938      	cbnz	r0, 21be <tcv_wnps+0x8e>
		if (state != WNONE) {
    21ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    21b2:	429d      	cmp	r5, r3
    21b4:	d0e3      	beq.n	217e <tcv_wnps+0x4e>
			tmwait (state);
    21b6:	4628      	mov	r0, r5
    21b8:	f7ff fd88 	bl	1ccc <__pi_waitmem>
    21bc:	e7e5      	b.n	218a <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    21be:	893b      	ldrh	r3, [r7, #8]
    21c0:	8143      	strh	r3, [r0, #10]
	if (urg)
    21c2:	b11e      	cbz	r6, 21cc <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    21c4:	7a83      	ldrb	r3, [r0, #10]
    21c6:	f043 0304 	orr.w	r3, r3, #4
    21ca:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    21cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    21d0:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    21d2:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    21d4:	300c      	adds	r0, #12
    21d6:	e7d3      	b.n	2180 <tcv_wnps+0x50>
    21d8:	2000059c 	mulcs	r0, ip, r5
    21dc:	000051a9 	andeq	r5, r0, r9, lsr #3
    21e0:	200005e0 	andcs	r0, r0, r0, ror #11
    21e4:	000051af 	andeq	r5, r0, pc, lsr #3
    21e8:	000051b5 			; <UNDEFINED> instruction: 0x000051b5

000021ec <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    21ec:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    21ee:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    21f0:	4608      	mov	r0, r1
    21f2:	b510      	push	{r4, lr}
    21f4:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    21f6:	d803      	bhi.n	2200 <tcvp_control+0x14>
    21f8:	4a05      	ldr	r2, [pc, #20]	; (2210 <tcvp_control+0x24>)
    21fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21fe:	b91b      	cbnz	r3, 2208 <tcvp_control+0x1c>
    2200:	200a      	movs	r0, #10
    2202:	4904      	ldr	r1, [pc, #16]	; (2214 <tcvp_control+0x28>)
    2204:	f7fe fd50 	bl	ca8 <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    2208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    220c:	4718      	bx	r3
    220e:	bf00      	nop
    2210:	200005c8 	andcs	r0, r0, r8, asr #11
    2214:	000051bb 			; <UNDEFINED> instruction: 0x000051bb

00002218 <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2218:	b508      	push	{r3, lr}
	if (opt < 0) {
    221a:	1e0b      	subs	r3, r1, #0
    221c:	da11      	bge.n	2242 <tcv_control+0x2a>
		if (fd < 0)
    221e:	2800      	cmp	r0, #0
    2220:	db1f      	blt.n	2262 <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    2222:	3301      	adds	r3, #1
    2224:	d107      	bne.n	2236 <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    2226:	2802      	cmp	r0, #2
    2228:	dc1b      	bgt.n	2262 <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    222a:	4b0f      	ldr	r3, [pc, #60]	; (2268 <tcv_control+0x50>)
    222c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2230:	b100      	cbz	r0, 2234 <tcv_control+0x1c>
			return p->tcv_info;
    2232:	69c0      	ldr	r0, [r0, #28]
}
    2234:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    2236:	2802      	cmp	r0, #2
    2238:	dc13      	bgt.n	2262 <tcv_control+0x4a>
		return physinfo [fd];
    223a:	4b0c      	ldr	r3, [pc, #48]	; (226c <tcv_control+0x54>)
    223c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2240:	e7f8      	b.n	2234 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    2242:	2808      	cmp	r0, #8
    2244:	d803      	bhi.n	224e <tcv_control+0x36>
    2246:	4b0a      	ldr	r3, [pc, #40]	; (2270 <tcv_control+0x58>)
    2248:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    224c:	b91b      	cbnz	r3, 2256 <tcv_control+0x3e>
    224e:	200a      	movs	r0, #10
    2250:	4908      	ldr	r1, [pc, #32]	; (2274 <tcv_control+0x5c>)
    2252:	f7fe fd29 	bl	ca8 <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2256:	7a58      	ldrb	r0, [r3, #9]
}
    2258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    225c:	0940      	lsrs	r0, r0, #5
    225e:	f7ff bfc5 	b.w	21ec <tcvp_control>
			return 0;
    2262:	2000      	movs	r0, #0
    2264:	e7e6      	b.n	2234 <tcv_control+0x1c>
    2266:	bf00      	nop
    2268:	200005e0 	andcs	r0, r0, r0, ror #11
    226c:	200005d4 	ldrdcs	r0, [r0], -r4
    2270:	2000059c 	mulcs	r0, ip, r5
    2274:	000051c1 	andeq	r5, r0, r1, asr #3

00002278 <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    227a:	b280      	uxth	r0, r0
    227c:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    227e:	460e      	mov	r6, r1
    2280:	b309      	cbz	r1, 22c6 <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    2282:	1c53      	adds	r3, r2, #1
    2284:	d103      	bne.n	228e <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    2286:	2003      	movs	r0, #3
    2288:	4912      	ldr	r1, [pc, #72]	; (22d4 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    228a:	f7fe fd0d 	bl	ca8 <__pi_syserror>
    228e:	2a08      	cmp	r2, #8
    2290:	d803      	bhi.n	229a <tcvp_new+0x22>
    2292:	4f11      	ldr	r7, [pc, #68]	; (22d8 <tcvp_new+0x60>)
    2294:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    2298:	b913      	cbnz	r3, 22a0 <tcvp_new+0x28>
    229a:	200a      	movs	r0, #10
    229c:	490f      	ldr	r1, [pc, #60]	; (22dc <tcvp_new+0x64>)
    229e:	e7f4      	b.n	228a <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    22a0:	f7ff fdd0 	bl	1e44 <apb>
    22a4:	4604      	mov	r4, r0
    22a6:	b908      	cbnz	r0, 22ac <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    22a8:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    22aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    22ac:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    22b0:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    22b2:	891b      	ldrh	r3, [r3, #8]
    22b4:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    22b6:	f36f 0341 	bfc	r3, #1, #1
    22ba:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    22bc:	f7ff fe08 	bl	1ed0 <dispose>
			return (address)(p + 1);
    22c0:	f104 000c 	add.w	r0, r4, #12
    22c4:	e7f1      	b.n	22aa <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    22c6:	f7ff fdbd 	bl	1e44 <apb>
    22ca:	2800      	cmp	r0, #0
    22cc:	d0ec      	beq.n	22a8 <tcvp_new+0x30>
		return (address)(p + 1);
    22ce:	300c      	adds	r0, #12
    22d0:	e7eb      	b.n	22aa <tcvp_new+0x32>
    22d2:	bf00      	nop
    22d4:	000051c7 	andeq	r5, r0, r7, asr #3
    22d8:	2000059c 	mulcs	r0, ip, r5
    22dc:	000051cd 	andeq	r5, r0, sp, asr #3

000022e0 <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e0:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    22e2:	b510      	push	{r4, lr}
    22e4:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e6:	d803      	bhi.n	22f0 <tcvphy_reg+0x10>
    22e8:	4b0c      	ldr	r3, [pc, #48]	; (231c <tcvphy_reg+0x3c>)
    22ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    22ee:	b118      	cbz	r0, 22f8 <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    22f0:	2003      	movs	r0, #3
    22f2:	490b      	ldr	r1, [pc, #44]	; (2320 <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    22f4:	f7fe fcd8 	bl	ca8 <__pi_syserror>
	physical [phy] = ps;
    22f8:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    22fc:	4b09      	ldr	r3, [pc, #36]	; (2324 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    22fe:	2008      	movs	r0, #8
	physinfo [phy] = info;
    2300:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2304:	f7ff fc74 	bl	1bf0 <__pi_malloc>
    2308:	4a07      	ldr	r2, [pc, #28]	; (2328 <tcvphy_reg+0x48>)
    230a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    230e:	b910      	cbnz	r0, 2316 <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    2310:	2006      	movs	r0, #6
    2312:	4906      	ldr	r1, [pc, #24]	; (232c <tcvphy_reg+0x4c>)
    2314:	e7ee      	b.n	22f4 <tcvphy_reg+0x14>
	q_init (q);
    2316:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    231a:	bd10      	pop	{r4, pc}
    231c:	200005c8 	andcs	r0, r0, r8, asr #11
    2320:	000051d3 	ldrdeq	r5, [r0], -r3
    2324:	200005d4 	ldrdcs	r0, [r0], -r4
    2328:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    232c:	000051d9 	ldrdeq	r5, [r0], -r9

00002330 <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    2334:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2336:	4605      	mov	r5, r0
    2338:	460f      	mov	r7, r1
    233a:	4614      	mov	r4, r2
    233c:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    233e:	d803      	bhi.n	2348 <tcvphy_rcv+0x18>
    2340:	4b1e      	ldr	r3, [pc, #120]	; (23bc <tcvphy_rcv+0x8c>)
    2342:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2346:	b91b      	cbnz	r3, 2350 <tcvphy_rcv+0x20>
    2348:	491d      	ldr	r1, [pc, #116]	; (23c0 <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    234a:	200a      	movs	r0, #10
    234c:	f7fe fcac 	bl	ca8 <__pi_syserror>
    2350:	4e1c      	ldr	r6, [pc, #112]	; (23c4 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2352:	f10d 080c 	add.w	r8, sp, #12
    2356:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    235a:	6833      	ldr	r3, [r6, #0]
    235c:	46b1      	mov	r9, r6
    235e:	3e04      	subs	r6, #4
    2360:	b92b      	cbnz	r3, 236e <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2362:	45ca      	cmp	sl, r9
    2364:	d1f9      	bne.n	235a <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    2366:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    2368:	b005      	add	sp, #20
    236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    236e:	f8d3 b008 	ldr.w	fp, [r3, #8]
    2372:	f1bb 0f00 	cmp.w	fp, #0
    2376:	d101      	bne.n	237c <tcvphy_rcv+0x4c>
    2378:	4913      	ldr	r1, [pc, #76]	; (23c8 <tcvphy_rcv+0x98>)
    237a:	e7e6      	b.n	234a <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    237c:	4639      	mov	r1, r7
    237e:	4622      	mov	r2, r4
    2380:	4628      	mov	r0, r5
    2382:	f8cd 8000 	str.w	r8, [sp]
    2386:	ab02      	add	r3, sp, #8
    2388:	47d8      	blx	fp
    238a:	4601      	mov	r1, r0
    238c:	2800      	cmp	r0, #0
    238e:	d0e8      	beq.n	2362 <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2390:	2801      	cmp	r0, #1
    2392:	d0e8      	beq.n	2366 <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    2394:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    2398:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    239c:	441a      	add	r2, r3
    239e:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23a0:	4620      	mov	r0, r4
    23a2:	9a02      	ldr	r2, [sp, #8]
    23a4:	f7ff ff68 	bl	2278 <tcvp_new>
    23a8:	2800      	cmp	r0, #0
    23aa:	d0dc      	beq.n	2366 <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23ac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    23b0:	4622      	mov	r2, r4
    23b2:	4439      	add	r1, r7
    23b4:	f7ff fb37 	bl	1a26 <__pi_memcpy>
	return 1;
    23b8:	2001      	movs	r0, #1
    23ba:	e7d5      	b.n	2368 <tcvphy_rcv+0x38>
    23bc:	200005c8 	andcs	r0, r0, r8, asr #11
    23c0:	000051df 	ldrdeq	r5, [r0], -pc	; <UNPREDICTABLE>
    23c4:	200005e8 	andcs	r0, r0, r8, ror #11
    23c8:	000051e5 	andeq	r5, r0, r5, ror #3

000023cc <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    23cc:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    23ce:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    23d0:	d803      	bhi.n	23da <tcvphy_get+0xe>
    23d2:	4b0b      	ldr	r3, [pc, #44]	; (2400 <tcvphy_get+0x34>)
    23d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    23d8:	b91b      	cbnz	r3, 23e2 <tcvphy_get+0x16>
    23da:	200a      	movs	r0, #10
    23dc:	4909      	ldr	r1, [pc, #36]	; (2404 <tcvphy_get+0x38>)
    23de:	f7fe fc63 	bl	ca8 <__pi_syserror>

	oq = oqueues [phy];
    23e2:	4b09      	ldr	r3, [pc, #36]	; (2408 <tcvphy_get+0x3c>)
    23e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    23e8:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    23ea:	4283      	cmp	r3, r0
    23ec:	d005      	beq.n	23fa <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    23ee:	8903      	ldrh	r3, [r0, #8]
    23f0:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    23f2:	f7ff fd32 	bl	1e5a <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    23f6:	300c      	adds	r0, #12
}
    23f8:	bd08      	pop	{r3, pc}
		return NULL;
    23fa:	2000      	movs	r0, #0
    23fc:	e7fc      	b.n	23f8 <tcvphy_get+0x2c>
    23fe:	bf00      	nop
    2400:	200005c8 	andcs	r0, r0, r8, asr #11
    2404:	000051eb 	andeq	r5, r0, fp, ror #3
    2408:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

0000240c <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    240c:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    240e:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    2410:	d803      	bhi.n	241a <tcvphy_top+0xe>
    2412:	4b08      	ldr	r3, [pc, #32]	; (2434 <tcvphy_top+0x28>)
    2414:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2418:	b91b      	cbnz	r3, 2422 <tcvphy_top+0x16>
    241a:	200a      	movs	r0, #10
    241c:	4906      	ldr	r1, [pc, #24]	; (2438 <tcvphy_top+0x2c>)
    241e:	f7fe fc43 	bl	ca8 <__pi_syserror>

	oq = oqueues [phy];
    2422:	4b06      	ldr	r3, [pc, #24]	; (243c <tcvphy_top+0x30>)
    2424:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    2428:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    242a:	4283      	cmp	r3, r0
		return NULL;
    242c:	bf0c      	ite	eq
    242e:	2000      	moveq	r0, #0

	return (address)(b + 1);
    2430:	300c      	addne	r0, #12
}
    2432:	bd08      	pop	{r3, pc}
    2434:	200005c8 	andcs	r0, r0, r8, asr #11
    2438:	000051f1 	strdeq	r5, [r0], -r1
    243c:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

00002440 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2440:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    2442:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    2446:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    244a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    244e:	2b02      	cmp	r3, #2
    2450:	d805      	bhi.n	245e <tcvphy_end+0x1e>
    2452:	4a08      	ldr	r2, [pc, #32]	; (2474 <tcvphy_end+0x34>)
    2454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2458:	b10b      	cbz	r3, 245e <tcvphy_end+0x1e>
    245a:	695b      	ldr	r3, [r3, #20]
    245c:	b91b      	cbnz	r3, 2466 <tcvphy_end+0x26>
    245e:	200a      	movs	r0, #10
    2460:	4905      	ldr	r1, [pc, #20]	; (2478 <tcvphy_end+0x38>)
    2462:	f7fe fc21 	bl	ca8 <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    2466:	4798      	blx	r3
    2468:	4601      	mov	r1, r0
    246a:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    246c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    2470:	f7ff bd2e 	b.w	1ed0 <dispose>
    2474:	200005e0 	andcs	r0, r0, r0, ror #11
    2478:	000051f7 	strdeq	r5, [r0], -r7

0000247c <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    247c:	4770      	bx	lr

0000247e <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    247e:	e7fe      	b.n	247e <NmiSR>

00002480 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    2480:	e7fe      	b.n	2480 <FaultISR>

00002482 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    2482:	e7fe      	b.n	2482 <AONIntHandler>

00002484 <ResetISR>:
{
    2484:	b508      	push	{r3, lr}
    SetupTrimDevice();
    2486:	f001 fd15 	bl	3eb4 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    248a:	4b0c      	ldr	r3, [pc, #48]	; (24bc <zero_loop+0x20>)
    pui32Src = &_etext;
    248c:	4a0c      	ldr	r2, [pc, #48]	; (24c0 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    248e:	490d      	ldr	r1, [pc, #52]	; (24c4 <zero_loop+0x28>)
    2490:	428b      	cmp	r3, r1
    2492:	d30d      	bcc.n	24b0 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    2494:	480c      	ldr	r0, [pc, #48]	; (24c8 <zero_loop+0x2c>)
    2496:	490d      	ldr	r1, [pc, #52]	; (24cc <zero_loop+0x30>)
    2498:	f04f 0200 	mov.w	r2, #0

0000249c <zero_loop>:
    249c:	4288      	cmp	r0, r1
    249e:	bfb8      	it	lt
    24a0:	f840 2b04 	strlt.w	r2, [r0], #4
    24a4:	dbfa      	blt.n	249c <zero_loop>
   main();
    24a6:	f7ff f901 	bl	16ac <main>
    FaultISR();
    24aa:	f7ff ffe9 	bl	2480 <FaultISR>
}
    24ae:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    24b0:	f852 0b04 	ldr.w	r0, [r2], #4
    24b4:	f843 0b04 	str.w	r0, [r3], #4
    24b8:	e7ea      	b.n	2490 <ResetISR+0xc>
    24ba:	bf00      	nop
    24bc:	20000000 	andcs	r0, r0, r0
    24c0:	00005c00 	andeq	r5, r0, r0, lsl #24
    24c4:	20000540 	andcs	r0, r0, r0, asr #10
    24c8:	20000540 	andcs	r0, r0, r0, asr #10
    24cc:	200006d4 	ldrdcs	r0, [r0], -r4

000024d0 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    24d0:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    24d2:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    24d8:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24da:	4907      	ldr	r1, [pc, #28]	; (24f8 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    24dc:	4d07      	ldr	r5, [pc, #28]	; (24fc <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24de:	4c08      	ldr	r4, [pc, #32]	; (2500 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    24e0:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    24e2:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    24e4:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    24e6:	b2c0      	uxtb	r0, r0
			b |= 1;
    24e8:	bf48      	it	mi
    24ea:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    24ee:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24f0:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    24f2:	600a      	str	r2, [r1, #0]
    24f4:	d1f4      	bne.n	24e0 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    24f6:	bd70      	pop	{r4, r5, r6, pc}
    24f8:	400220a0 	andmi	r2, r2, r0, lsr #1
    24fc:	400220c0 	andmi	r2, r2, r0, asr #1
    2500:	40022090 	mulmi	r2, r0, r0

00002504 <put_byte>:

static void put_byte (byte b) {
    2504:	b530      	push	{r4, r5, lr}
    2506:	2308      	movs	r3, #8
    2508:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    250c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2510:	4c06      	ldr	r4, [pc, #24]	; (252c <put_byte+0x28>)
    2512:	4a07      	ldr	r2, [pc, #28]	; (2530 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    2514:	f010 0f80 	tst.w	r0, #128	; 0x80
    2518:	bf14      	ite	ne
    251a:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    251c:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    251e:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    2520:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2522:	6021      	str	r1, [r4, #0]
		b <<= 1;
    2524:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2526:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    2528:	d1f4      	bne.n	2514 <put_byte+0x10>
	}
}
    252a:	bd30      	pop	{r4, r5, pc}
    252c:	40022090 	mulmi	r2, r0, r0
    2530:	400220a0 	andmi	r2, r2, r0, lsr #1

00002534 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2534:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    2536:	b510      	push	{r4, lr}
    2538:	4c03      	ldr	r4, [pc, #12]	; (2548 <cmd_0+0x14>)
    253a:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    253c:	f7ff ffe2 	bl	2504 <put_byte>
    2540:	2300      	movs	r3, #0
    2542:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    2544:	bd10      	pop	{r4, pc}
    2546:	bf00      	nop
    2548:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

0000254c <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    254c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2550:	4604      	mov	r4, r0
    2552:	460d      	mov	r5, r1
    2554:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    2556:	f8df 8044 	ldr.w	r8, [pc, #68]	; 259c <wwait+0x50>
    255a:	4e0f      	ldr	r6, [pc, #60]	; (2598 <wwait+0x4c>)
    255c:	f898 3000 	ldrb.w	r3, [r8]
    2560:	b14b      	cbz	r3, 2576 <wwait+0x2a>
	put_byte (CMD_RDSR);
    2562:	2005      	movs	r0, #5
    2564:	6037      	str	r7, [r6, #0]
    2566:	f7ff ffcd 	bl	2504 <put_byte>
	r = get_byte ();
    256a:	f7ff ffb1 	bl	24d0 <get_byte>
    256e:	2300      	movs	r3, #0
    2570:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    2572:	07c3      	lsls	r3, r0, #31
    2574:	d401      	bmi.n	257a <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    2576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    257a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    257e:	429c      	cmp	r4, r3
    2580:	d103      	bne.n	258a <wwait+0x3e>
			mdelay (1);
    2582:	2001      	movs	r0, #1
    2584:	f7fe fb3c 	bl	c00 <mdelay>
    2588:	e7e8      	b.n	255c <wwait+0x10>
			delay (del, st);
    258a:	4621      	mov	r1, r4
    258c:	4628      	mov	r0, r5
    258e:	f7ff f9ff 	bl	1990 <delay>
			release;
    2592:	f7fe ff47 	bl	1424 <__pi_release>
    2596:	bf00      	nop
    2598:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    259c:	200005ec 	andcs	r0, r0, ip, ror #11

000025a0 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    25a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    25a2:	4d0c      	ldr	r5, [pc, #48]	; (25d4 <ready+0x34>)
    25a4:	782f      	ldrb	r7, [r5, #0]
    25a6:	b147      	cbz	r7, 25ba <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    25a8:	2101      	movs	r1, #1
    25aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    25ae:	f7ff ffcd 	bl	254c <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    25b2:	2200      	movs	r2, #0
    25b4:	4b08      	ldr	r3, [pc, #32]	; (25d8 <ready+0x38>)
    25b6:	701a      	strb	r2, [r3, #0]
}
    25b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25ba:	2401      	movs	r4, #1
    25bc:	4e07      	ldr	r6, [pc, #28]	; (25dc <ready+0x3c>)
	udelay (1);
    25be:	4620      	mov	r0, r4
    25c0:	6034      	str	r4, [r6, #0]
    25c2:	f7fe fb07 	bl	bd4 <udelay>
	udelay (1);
    25c6:	4620      	mov	r0, r4
    25c8:	6037      	str	r7, [r6, #0]
    25ca:	f7fe fb03 	bl	bd4 <udelay>
		dopen = DOPEN_TEMP;
    25ce:	2302      	movs	r3, #2
    25d0:	702b      	strb	r3, [r5, #0]
    25d2:	e7ee      	b.n	25b2 <ready+0x12>
    25d4:	200005ec 	andcs	r0, r0, ip, ror #11
    25d8:	200005ed 	andcs	r0, r0, sp, ror #11
    25dc:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000025e0 <cclose>:
static void cclose () {
    25e0:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    25e2:	4c07      	ldr	r4, [pc, #28]	; (2600 <cclose+0x20>)
    25e4:	7823      	ldrb	r3, [r4, #0]
    25e6:	2b02      	cmp	r3, #2
    25e8:	d109      	bne.n	25fe <cclose+0x1e>
		wwait (WNONE, 1);
    25ea:	2101      	movs	r1, #1
    25ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
    25f0:	f7ff ffac 	bl	254c <wwait>
	cmd_0 (CMD_DP);
    25f4:	20b9      	movs	r0, #185	; 0xb9
    25f6:	f7ff ff9d 	bl	2534 <cmd_0>
		dopen = 0;
    25fa:	2300      	movs	r3, #0
    25fc:	7023      	strb	r3, [r4, #0]
}
    25fe:	bd10      	pop	{r4, pc}
    2600:	200005ec 	andcs	r0, r0, ip, ror #11

00002604 <ee_open>:

// ============================================================================

word ee_open () {
    2604:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    2606:	f7ff ffcb 	bl	25a0 <ready>
	dopen = DOPEN_PERM;
    260a:	2201      	movs	r2, #1
    260c:	4b01      	ldr	r3, [pc, #4]	; (2614 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    260e:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    2610:	701a      	strb	r2, [r3, #0]
}
    2612:	bd08      	pop	{r3, pc}
    2614:	200005ec 	andcs	r0, r0, ip, ror #11

00002618 <ee_close>:

void ee_close () {

	if (dopen) {
    2618:	4b03      	ldr	r3, [pc, #12]	; (2628 <ee_close+0x10>)
    261a:	781a      	ldrb	r2, [r3, #0]
    261c:	b11a      	cbz	r2, 2626 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    261e:	2202      	movs	r2, #2
    2620:	701a      	strb	r2, [r3, #0]
		cclose ();
    2622:	f7ff bfdd 	b.w	25e0 <cclose>
	}
}
    2626:	4770      	bx	lr
    2628:	200005ec 	andcs	r0, r0, ip, ror #11

0000262c <ser_out>:

//+++ "__outserial.c"

procname (__outserial);

int ser_out (word st, const char *m) {
    262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    262e:	4606      	mov	r6, r0

	int prcs;
	char *buf;

	if ((prcs = running (__outserial)) != 0) {
    2630:	4818      	ldr	r0, [pc, #96]	; (2694 <ser_out+0x68>)
int ser_out (word st, const char *m) {
    2632:	460c      	mov	r4, r1
	if ((prcs = running (__outserial)) != 0) {
    2634:	f7ff f9c8 	bl	19c8 <running>
    2638:	b120      	cbz	r0, 2644 <ser_out+0x18>
		/* We have to wait */
		join (prcs, st);
    263a:	4631      	mov	r1, r6
    263c:	f7ff f996 	bl	196c <__pi_join>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
		/*
		 * We have to wait for memory
		 */
		umwait (st);
		release;
    2640:	f7fe fef0 	bl	1424 <__pi_release>
	if (*m)
    2644:	7823      	ldrb	r3, [r4, #0]
    2646:	b163      	cbz	r3, 2662 <ser_out+0x36>
		prcs = strlen (m) +1;
    2648:	4620      	mov	r0, r4
    264a:	f7ff f9cf 	bl	19ec <__pi_strlen>
    264e:	1c45      	adds	r5, r0, #1
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2650:	b2a8      	uxth	r0, r5
    2652:	f7ff facd 	bl	1bf0 <__pi_malloc>
    2656:	4607      	mov	r7, r0
    2658:	b930      	cbnz	r0, 2668 <ser_out+0x3c>
		umwait (st);
    265a:	4630      	mov	r0, r6
    265c:	f7ff fb36 	bl	1ccc <__pi_waitmem>
    2660:	e7ee      	b.n	2640 <ser_out+0x14>
		prcs =  m [1] + 3;
    2662:	7865      	ldrb	r5, [r4, #1]
    2664:	3503      	adds	r5, #3
    2666:	e7f3      	b.n	2650 <ser_out+0x24>
	}

	if (*m)
    2668:	7823      	ldrb	r3, [r4, #0]
    266a:	b15b      	cbz	r3, 2684 <ser_out+0x58>
		strcpy (buf, m);
    266c:	4621      	mov	r1, r4
    266e:	f7ff f9c4 	bl	19fa <__pi_strcpy>
	else
		memcpy (buf, m, prcs);

	if (runstrand (__outserial, buf) == 0) {
    2672:	4639      	mov	r1, r7
    2674:	4807      	ldr	r0, [pc, #28]	; (2694 <ser_out+0x68>)
    2676:	f7ff fb0f 	bl	1c98 <__pi_fork>
    267a:	b940      	cbnz	r0, 268e <ser_out+0x62>
		// fork has failed, deallocate buf
		ufree (buf);
    267c:	4638      	mov	r0, r7
    267e:	f7ff fa6b 	bl	1b58 <__pi_free>
		// and wait for a process slot
		npwait (st);
    2682:	e7ea      	b.n	265a <ser_out+0x2e>
		memcpy (buf, m, prcs);
    2684:	462a      	mov	r2, r5
    2686:	4621      	mov	r1, r4
    2688:	f7ff f9cd 	bl	1a26 <__pi_memcpy>
    268c:	e7f1      	b.n	2672 <ser_out+0x46>
		release;
	}

	return 0;
}
    268e:	2000      	movs	r0, #0
    2690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2692:	bf00      	nop
    2694:	00003139 	andeq	r3, r0, r9, lsr r1

00002698 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    2698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    269a:	4604      	mov	r4, r0
    269c:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    269e:	4615      	mov	r5, r2
    26a0:	b37a      	cbz	r2, 2702 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    26a2:	4e19      	ldr	r6, [pc, #100]	; (2708 <ser_in+0x70>)
    26a4:	6830      	ldr	r0, [r6, #0]
    26a6:	b988      	cbnz	r0, 26cc <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    26a8:	4818      	ldr	r0, [pc, #96]	; (270c <ser_in+0x74>)
    26aa:	f7ff f98d 	bl	19c8 <running>
    26ae:	b948      	cbnz	r0, 26c4 <ser_in+0x2c>
			prcs = runthread (__inserial);
    26b0:	4601      	mov	r1, r0
    26b2:	4816      	ldr	r0, [pc, #88]	; (270c <ser_in+0x74>)
    26b4:	f7ff faf0 	bl	1c98 <__pi_fork>
			if (prcs == 0) {
    26b8:	b920      	cbnz	r0, 26c4 <ser_in+0x2c>
				npwait (st);
    26ba:	4620      	mov	r0, r4
    26bc:	f7ff fb06 	bl	1ccc <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    26c0:	f7fe feb0 	bl	1424 <__pi_release>
		join (prcs, st);
    26c4:	4621      	mov	r1, r4
    26c6:	f7ff f951 	bl	196c <__pi_join>
    26ca:	e7f9      	b.n	26c0 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    26cc:	7803      	ldrb	r3, [r0, #0]
    26ce:	b9a3      	cbnz	r3, 26fa <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    26d0:	7844      	ldrb	r4, [r0, #1]
    26d2:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    26d4:	42ac      	cmp	r4, r5
		prcs = len-1;
    26d6:	bfa8      	it	ge
    26d8:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    26dc:	4622      	mov	r2, r4
    26de:	4638      	mov	r0, r7
    26e0:	6831      	ldr	r1, [r6, #0]
    26e2:	f7ff f9a0 	bl	1a26 <__pi_memcpy>
	ufree (__inpline);
    26e6:	6830      	ldr	r0, [r6, #0]
    26e8:	f7ff fa36 	bl	1b58 <__pi_free>
	__inpline = NULL;
    26ec:	2300      	movs	r3, #0
    26ee:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    26f0:	783a      	ldrb	r2, [r7, #0]
    26f2:	b102      	cbz	r2, 26f6 <ser_in+0x5e>
		buf [prcs] = '\0';
    26f4:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    26f6:	4620      	mov	r0, r4
    26f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    26fa:	f7ff f977 	bl	19ec <__pi_strlen>
    26fe:	4604      	mov	r4, r0
    2700:	e7e8      	b.n	26d4 <ser_in+0x3c>
		return 0;
    2702:	4614      	mov	r4, r2
    2704:	e7f7      	b.n	26f6 <ser_in+0x5e>
    2706:	bf00      	nop
    2708:	20000638 	andcs	r0, r0, r8, lsr r6
    270c:	000031a9 	andeq	r3, r0, r9, lsr #3

00002710 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    2710:	b40e      	push	{r1, r2, r3}
    2712:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    2714:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    2716:	4812      	ldr	r0, [pc, #72]	; (2760 <ser_outf+0x50>)
    2718:	f7ff f956 	bl	19c8 <running>
    271c:	4606      	mov	r6, r0
    271e:	b120      	cbz	r0, 272a <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    2720:	4621      	mov	r1, r4
    2722:	f7ff f923 	bl	196c <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    2726:	f7fe fe7d 	bl	1424 <__pi_release>
	va_start (ap, m);
    272a:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    272c:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    272e:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2730:	f000 fef0 	bl	3514 <vform>
    2734:	4605      	mov	r5, r0
    2736:	b918      	cbnz	r0, 2740 <ser_outf+0x30>
		umwait (st);
    2738:	4620      	mov	r0, r4
    273a:	f7ff fac7 	bl	1ccc <__pi_waitmem>
    273e:	e7f2      	b.n	2726 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    2740:	4601      	mov	r1, r0
    2742:	4807      	ldr	r0, [pc, #28]	; (2760 <ser_outf+0x50>)
    2744:	f7ff faa8 	bl	1c98 <__pi_fork>
    2748:	b918      	cbnz	r0, 2752 <ser_outf+0x42>
		ufree (buf);
    274a:	4628      	mov	r0, r5
    274c:	f7ff fa04 	bl	1b58 <__pi_free>
		npwait (st);
    2750:	e7f2      	b.n	2738 <ser_outf+0x28>
		release;
	}

	return 0;
}
    2752:	4630      	mov	r0, r6
    2754:	b003      	add	sp, #12
    2756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    275a:	b003      	add	sp, #12
    275c:	4770      	bx	lr
    275e:	bf00      	nop
    2760:	00003139 	andeq	r3, r0, r9, lsr r1

00002764 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    2764:	b40e      	push	{r1, r2, r3}
    2766:	b533      	push	{r0, r1, r4, r5, lr}
    2768:	9905      	ldr	r1, [sp, #20]
    276a:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    276c:	b321      	cbz	r1, 27b8 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    276e:	4d13      	ldr	r5, [pc, #76]	; (27bc <ser_inf+0x58>)
    2770:	6828      	ldr	r0, [r5, #0]
    2772:	b988      	cbnz	r0, 2798 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    2774:	4812      	ldr	r0, [pc, #72]	; (27c0 <ser_inf+0x5c>)
    2776:	f7ff f927 	bl	19c8 <running>
    277a:	b948      	cbnz	r0, 2790 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    277c:	4601      	mov	r1, r0
    277e:	4810      	ldr	r0, [pc, #64]	; (27c0 <ser_inf+0x5c>)
    2780:	f7ff fa8a 	bl	1c98 <__pi_fork>
			if (prcs == 0) {
    2784:	b920      	cbnz	r0, 2790 <ser_inf+0x2c>
				npwait (st);
    2786:	4620      	mov	r0, r4
    2788:	f7ff faa0 	bl	1ccc <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    278c:	f7fe fe4a 	bl	1424 <__pi_release>
		join (prcs, st);
    2790:	4621      	mov	r1, r4
    2792:	f7ff f8eb 	bl	196c <__pi_join>
    2796:	e7f9      	b.n	278c <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    2798:	aa06      	add	r2, sp, #24
    279a:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    279c:	f000 fee2 	bl	3564 <vscan>
    27a0:	4604      	mov	r4, r0

	ufree (__inpline);
    27a2:	6828      	ldr	r0, [r5, #0]
    27a4:	f7ff f9d8 	bl	1b58 <__pi_free>
	__inpline = NULL;
    27a8:	2300      	movs	r3, #0
    27aa:	602b      	str	r3, [r5, #0]

	return prcs;
}
    27ac:	4620      	mov	r0, r4
    27ae:	b002      	add	sp, #8
    27b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    27b4:	b003      	add	sp, #12
    27b6:	4770      	bx	lr
		return 0;
    27b8:	460c      	mov	r4, r1
    27ba:	e7f7      	b.n	27ac <ser_inf+0x48>
    27bc:	20000638 	andcs	r0, r0, r8, lsr r6
    27c0:	000031a9 	andeq	r3, r0, r9, lsr #3

000027c4 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27c4:	4b04      	ldr	r3, [pc, #16]	; (27d8 <plugch+0x14>)
    27c6:	4a05      	ldr	r2, [pc, #20]	; (27dc <plugch+0x18>)
    27c8:	781b      	ldrb	r3, [r3, #0]
    27ca:	f503 7359 	add.w	r3, r3, #868	; 0x364
    27ce:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    27d0:	4a03      	ldr	r2, [pc, #12]	; (27e0 <plugch+0x1c>)
    27d2:	81d3      	strh	r3, [r2, #14]
}
    27d4:	4770      	bx	lr
    27d6:	bf00      	nop
    27d8:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    27dc:	20000054 	andcs	r0, r0, r4, asr r0
    27e0:	2000003c 	andcs	r0, r0, ip, lsr r0

000027e4 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    27e4:	b570      	push	{r4, r5, r6, lr}
    27e6:	460c      	mov	r4, r1
    27e8:	281a      	cmp	r0, #26
    27ea:	f200 80a4 	bhi.w	2936 <option+0x152>
    27ee:	e8df f000 	tbb	[pc, r0]
    27f2:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    27f6:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    27fa:	3b35445b 	blcc	d5396e <__ccfg+0xd339c6>
    27fe:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    2802:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    2806:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    280a:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    280e:	4b4c      	ldr	r3, [pc, #304]	; (2940 <option+0x15c>)
    2810:	7818      	ldrb	r0, [r3, #0]
    2812:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    2816:	3002      	adds	r0, #2
			goto RVal;
    2818:	e028      	b.n	286c <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    281a:	4a49      	ldr	r2, [pc, #292]	; (2940 <option+0x15c>)
    281c:	7813      	ldrb	r3, [r2, #0]
    281e:	f043 0301 	orr.w	r3, r3, #1
    2822:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    2824:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    2826:	4b47      	ldr	r3, [pc, #284]	; (2944 <option+0x160>)
    2828:	6819      	ldr	r1, [r3, #0]
    282a:	4b47      	ldr	r3, [pc, #284]	; (2948 <option+0x164>)
    282c:	460c      	mov	r4, r1
    282e:	681d      	ldr	r5, [r3, #0]
    2830:	2300      	movs	r3, #0
    2832:	f834 2b10 	ldrh.w	r2, [r4], #16
    2836:	f002 0207 	and.w	r2, r2, #7
    283a:	429a      	cmp	r2, r3
    283c:	dd08      	ble.n	2850 <option+0x6c>
    283e:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    2842:	3301      	adds	r3, #1
    2844:	42ae      	cmp	r6, r5
    2846:	d1f8      	bne.n	283a <option+0x56>
    2848:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    284c:	889b      	ldrh	r3, [r3, #4]
    284e:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    2850:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    2852:	4a3b      	ldr	r2, [pc, #236]	; (2940 <option+0x15c>)
    2854:	7813      	ldrb	r3, [r2, #0]
    2856:	f023 0301 	bic.w	r3, r3, #1
    285a:	e7e2      	b.n	2822 <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    285c:	b101      	cbz	r1, 2860 <option+0x7c>
    285e:	880c      	ldrh	r4, [r1, #0]
    2860:	4b3a      	ldr	r3, [pc, #232]	; (294c <option+0x168>)
    2862:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    2864:	2000      	movs	r0, #0
    2866:	e7f3      	b.n	2850 <option+0x6c>
			ret = (int) statid;
    2868:	4b38      	ldr	r3, [pc, #224]	; (294c <option+0x168>)
    286a:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    286c:	2c00      	cmp	r4, #0
    286e:	d0ef      	beq.n	2850 <option+0x6c>
		*val = ret;
    2870:	8020      	strh	r0, [r4, #0]
	return ret;
    2872:	e7ed      	b.n	2850 <option+0x6c>
			ret = rbuffl + 2;
    2874:	4b36      	ldr	r3, [pc, #216]	; (2950 <option+0x16c>)
    2876:	7818      	ldrb	r0, [r3, #0]
    2878:	e7cd      	b.n	2816 <option+0x32>
				memcpy (val, &rxstat,
    287a:	220c      	movs	r2, #12
			if (val != NULL) {
    287c:	b121      	cbz	r1, 2888 <option+0xa4>
				memcpy (val, &rxstat,
    287e:	4620      	mov	r0, r4
    2880:	4934      	ldr	r1, [pc, #208]	; (2954 <option+0x170>)
    2882:	f7ff f8d0 	bl	1a26 <__pi_memcpy>
    2886:	e7ed      	b.n	2864 <option+0x80>
				memset (&rxstat, 0, 
    2888:	4832      	ldr	r0, [pc, #200]	; (2954 <option+0x170>)
    288a:	f7ff f8d6 	bl	1a3a <__pi_memset>
    288e:	e7e9      	b.n	2864 <option+0x80>
			if (val == NULL)
    2890:	b941      	cbnz	r1, 28a4 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2892:	f7ff fac5 	bl	1e20 <lrnd>
    2896:	f3c0 4105 	ubfx	r1, r0, #16, #6
    289a:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    289c:	482e      	ldr	r0, [pc, #184]	; (2958 <option+0x174>)
    289e:	f7fe ffbd 	bl	181c <__pi_utimer_set>
    28a2:	e7bf      	b.n	2824 <option+0x40>
    28a4:	8809      	ldrh	r1, [r1, #0]
    28a6:	e7f9      	b.n	289c <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    28a8:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    28aa:	4b2c      	ldr	r3, [pc, #176]	; (295c <option+0x178>)
    28ac:	8b5a      	ldrh	r2, [r3, #26]
    28ae:	4b2c      	ldr	r3, [pc, #176]	; (2960 <option+0x17c>)
					== patable [ret])
    28b0:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    28b4:	428a      	cmp	r2, r1
    28b6:	d0d9      	beq.n	286c <option+0x88>
			for (ret = 0; ret < 8; ret++)
    28b8:	3001      	adds	r0, #1
    28ba:	2808      	cmp	r0, #8
    28bc:	d1f8      	bne.n	28b0 <option+0xcc>
    28be:	e7d5      	b.n	286c <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28c0:	b119      	cbz	r1, 28ca <option+0xe6>
				(*val > 7) ? 7 : *val;
    28c2:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28c4:	2807      	cmp	r0, #7
    28c6:	bf28      	it	cs
    28c8:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    28ca:	4b25      	ldr	r3, [pc, #148]	; (2960 <option+0x17c>)
    28cc:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    28d0:	4b22      	ldr	r3, [pc, #136]	; (295c <option+0x178>)
    28d2:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    28d4:	4a1a      	ldr	r2, [pc, #104]	; (2940 <option+0x15c>)
    28d6:	7813      	ldrb	r3, [r2, #0]
    28d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    28dc:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    28de:	e7a2      	b.n	2826 <option+0x42>
			ret = (int) channel;
    28e0:	4b20      	ldr	r3, [pc, #128]	; (2964 <option+0x180>)
			ret = (int) vrate;
    28e2:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    28e4:	e7c2      	b.n	286c <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    28e6:	b121      	cbz	r1, 28f2 <option+0x10e>
				(*val > 7) ? 7 : *val;
    28e8:	880c      	ldrh	r4, [r1, #0]
    28ea:	2c07      	cmp	r4, #7
    28ec:	bf28      	it	cs
    28ee:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    28f0:	b2e4      	uxtb	r4, r4
    28f2:	4b1c      	ldr	r3, [pc, #112]	; (2964 <option+0x180>)
    28f4:	701c      	strb	r4, [r3, #0]
			plugch ();
    28f6:	f7ff ff65 	bl	27c4 <plugch>
			_BIS (dstate, DSTATE_IRST);
    28fa:	4a11      	ldr	r2, [pc, #68]	; (2940 <option+0x15c>)
    28fc:	7813      	ldrb	r3, [r2, #0]
    28fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2902:	e78e      	b.n	2822 <option+0x3e>
			ret = (int) vrate;
    2904:	4b18      	ldr	r3, [pc, #96]	; (2968 <option+0x184>)
    2906:	e7ec      	b.n	28e2 <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2908:	b139      	cbz	r1, 291a <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    290a:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    290c:	2b03      	cmp	r3, #3
    290e:	d806      	bhi.n	291e <option+0x13a>
    2910:	b13b      	cbz	r3, 2922 <option+0x13e>
    2912:	b2db      	uxtb	r3, r3
    2914:	4a14      	ldr	r2, [pc, #80]	; (2968 <option+0x184>)
    2916:	7013      	strb	r3, [r2, #0]
    2918:	e7ed      	b.n	28f6 <option+0x112>
    291a:	2302      	movs	r3, #2
    291c:	e7fa      	b.n	2914 <option+0x130>
    291e:	2303      	movs	r3, #3
    2920:	e7f8      	b.n	2914 <option+0x130>
    2922:	2301      	movs	r3, #1
    2924:	e7f6      	b.n	2914 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2926:	b119      	cbz	r1, 2930 <option+0x14c>
    2928:	880b      	ldrh	r3, [r1, #0]
    292a:	4a10      	ldr	r2, [pc, #64]	; (296c <option+0x188>)
    292c:	8013      	strh	r3, [r2, #0]
			goto RRet;
    292e:	e799      	b.n	2864 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2930:	f44f 7380 	mov.w	r3, #256	; 0x100
    2934:	e7f9      	b.n	292a <option+0x146>
			syserror (EREQPAR, "cc13 op");
    2936:	2003      	movs	r0, #3
    2938:	490d      	ldr	r1, [pc, #52]	; (2970 <option+0x18c>)
    293a:	f7fe f9b5 	bl	ca8 <__pi_syserror>
    293e:	bf00      	nop
    2940:	200005f8 	strdcs	r0, [r0], -r8
    2944:	200005f4 	strdcs	r0, [r0], -r4
    2948:	20000604 	andcs	r0, r0, r4, lsl #12
    294c:	20000628 	andcs	r0, r0, r8, lsr #12
    2950:	20000608 	andcs	r0, r0, r8, lsl #12
    2954:	2000061c 	andcs	r0, r0, ip, lsl r6
    2958:	200005ee 	andcs	r0, r0, lr, ror #11
    295c:	20000054 	andcs	r0, r0, r4, asr r0
    2960:	0000526a 	andeq	r5, r0, sl, ror #4
    2964:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2968:	2000003a 	andcs	r0, r0, sl, lsr r0
    296c:	20000038 	andcs	r0, r0, r8, lsr r0
    2970:	00005206 	andeq	r5, r0, r6, lsl #4

00002974 <issue_cmd>:
static void issue_cmd (lword cmd) {
    2974:	b538      	push	{r3, r4, r5, lr}
    2976:	4604      	mov	r4, r0
    2978:	4d0c      	ldr	r5, [pc, #48]	; (29ac <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    297a:	4620      	mov	r0, r4
    297c:	f001 f8a4 	bl	3ac8 <NOROM_RFCDoorbellSendTo>
    2980:	b2c2      	uxtb	r2, r0
    2982:	2a01      	cmp	r2, #1
    2984:	d011      	beq.n	29aa <issue_cmd+0x36>
		if (res != 0x86)
    2986:	2a86      	cmp	r2, #134	; 0x86
    2988:	d003      	beq.n	2992 <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    298a:	4909      	ldr	r1, [pc, #36]	; (29b0 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    298c:	2008      	movs	r0, #8
    298e:	f7fe f98b 	bl	ca8 <__pi_syserror>
		if (cnt-- == 0) {
    2992:	3d01      	subs	r5, #1
    2994:	d105      	bne.n	29a2 <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    2996:	4621      	mov	r1, r4
    2998:	4806      	ldr	r0, [pc, #24]	; (29b4 <issue_cmd+0x40>)
    299a:	f7ff f9a3 	bl	1ce4 <diag>
			syserror (EHARDWARE, "hang ic0");
    299e:	4906      	ldr	r1, [pc, #24]	; (29b8 <issue_cmd+0x44>)
    29a0:	e7f4      	b.n	298c <issue_cmd+0x18>
		udelay (1);
    29a2:	2001      	movs	r0, #1
    29a4:	f7fe f916 	bl	bd4 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29a8:	e7e7      	b.n	297a <issue_cmd+0x6>
}
    29aa:	bd38      	pop	{r3, r4, r5, pc}
    29ac:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    29b0:	0000520e 	andeq	r5, r0, lr, lsl #4
    29b4:	00005212 	andeq	r5, r0, r2, lsl r2
    29b8:	0000521e 	andeq	r5, r0, lr, lsl r2

000029bc <rx_de>:
static void rx_de () {
    29bc:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    29be:	4c06      	ldr	r4, [pc, #24]	; (29d8 <rx_de+0x1c>)
    29c0:	7823      	ldrb	r3, [r4, #0]
    29c2:	079b      	lsls	r3, r3, #30
    29c4:	d506      	bpl.n	29d4 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29c6:	4805      	ldr	r0, [pc, #20]	; (29dc <rx_de+0x20>)
    29c8:	f7ff ffd4 	bl	2974 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    29cc:	7823      	ldrb	r3, [r4, #0]
    29ce:	f023 0302 	bic.w	r3, r3, #2
    29d2:	7023      	strb	r3, [r4, #0]
}
    29d4:	bd10      	pop	{r4, pc}
    29d6:	bf00      	nop
    29d8:	200005f8 	strdcs	r0, [r0], -r8
    29dc:	04010001 	streq	r0, [r1], #-1

000029e0 <rf_off>:
static void rf_off () {
    29e0:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    29e2:	4c11      	ldr	r4, [pc, #68]	; (2a28 <rf_off+0x48>)
    29e4:	7823      	ldrb	r3, [r4, #0]
    29e6:	06db      	lsls	r3, r3, #27
    29e8:	d51d      	bpl.n	2a26 <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    29ea:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    29ec:	4b0f      	ldr	r3, [pc, #60]	; (2a2c <rf_off+0x4c>)
    29ee:	2019      	movs	r0, #25
    29f0:	681b      	ldr	r3, [r3, #0]
    29f2:	695b      	ldr	r3, [r3, #20]
    29f4:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    29f6:	2000      	movs	r0, #0
    29f8:	f001 f9e4 	bl	3dc4 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    29fc:	f001 f878 	bl	3af0 <NOROM_RFCSynthPowerDown>
    2a00:	4b0b      	ldr	r3, [pc, #44]	; (2a30 <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a02:	2001      	movs	r0, #1
    2a04:	601d      	str	r5, [r3, #0]
    2a06:	f7fe f92f 	bl	c68 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a0a:	4b0a      	ldr	r3, [pc, #40]	; (2a34 <rf_off+0x54>)
    2a0c:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a0e:	f001 f841 	bl	3a94 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a16:	4b08      	ldr	r3, [pc, #32]	; (2a38 <rf_off+0x58>)
    2a18:	601a      	str	r2, [r3, #0]
    2a1a:	2202      	movs	r2, #2
    2a1c:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    2a1e:	7823      	ldrb	r3, [r4, #0]
    2a20:	f023 0310 	bic.w	r3, r3, #16
    2a24:	7023      	strb	r3, [r4, #0]
}
    2a26:	bd38      	pop	{r3, r4, r5, pc}
    2a28:	200005f8 	strdcs	r0, [r0], -r8
    2a2c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    2a30:	60040000 	andvs	r0, r4, r0
    2a34:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2a38:	400220a0 	andmi	r2, r2, r0, lsr #1

00002a3c <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a3c:	b570      	push	{r4, r5, r6, lr}
    2a3e:	4604      	mov	r4, r0
    2a40:	460d      	mov	r5, r1
    2a42:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    2a46:	8862      	ldrh	r2, [r4, #2]
    2a48:	42aa      	cmp	r2, r5
    2a4a:	d00e      	beq.n	2a6a <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    2a4c:	3e01      	subs	r6, #1
    2a4e:	d108      	bne.n	2a62 <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a50:	8821      	ldrh	r1, [r4, #0]
    2a52:	4806      	ldr	r0, [pc, #24]	; (2a6c <wait_cmd.constprop.0+0x30>)
    2a54:	462b      	mov	r3, r5
    2a56:	f7ff f945 	bl	1ce4 <diag>
			syserror (EHARDWARE, "rt2");
    2a5a:	2008      	movs	r0, #8
    2a5c:	4904      	ldr	r1, [pc, #16]	; (2a70 <wait_cmd.constprop.0+0x34>)
    2a5e:	f7fe f923 	bl	ca8 <__pi_syserror>
		udelay (1);
    2a62:	2001      	movs	r0, #1
    2a64:	f7fe f8b6 	bl	bd4 <udelay>
		if (cmd->status == tstat)
    2a68:	e7ed      	b.n	2a46 <wait_cmd.constprop.0+0xa>
}
    2a6a:	bd70      	pop	{r4, r5, r6, pc}
    2a6c:	00005227 	andeq	r5, r0, r7, lsr #4
    2a70:	00005237 	andeq	r5, r0, r7, lsr r2

00002a74 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a78:	4b46      	ldr	r3, [pc, #280]	; (2b94 <rf_on.part.0+0x120>)
static void rf_on () {
    2a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a7e:	601a      	str	r2, [r3, #0]
    2a80:	2202      	movs	r2, #2
    2a82:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    2a84:	f000 ffca 	bl	3a1c <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a88:	200a      	movs	r0, #10
    2a8a:	f7fe f8a3 	bl	bd4 <udelay>
    2a8e:	f000 ffd1 	bl	3a34 <NOROM_OSCHF_AttemptToSwitchToXosc>
    2a92:	2800      	cmp	r0, #0
    2a94:	d0f8      	beq.n	2a88 <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a96:	2401      	movs	r4, #1
    2a98:	4b3f      	ldr	r3, [pc, #252]	; (2b98 <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a9a:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a9c:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2a9e:	f7fe f8c5 	bl	c2c <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2aa2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2aa6:	4b3d      	ldr	r3, [pc, #244]	; (2b9c <rf_on.part.0+0x128>)
	issue_cmd (
    2aa8:	483d      	ldr	r0, [pc, #244]	; (2ba0 <rf_on.part.0+0x12c>)
    2aaa:	601a      	str	r2, [r3, #0]
    2aac:	f7ff ff62 	bl	2974 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ab0:	f44f 7223 	mov.w	r2, #652	; 0x28c
    2ab4:	493b      	ldr	r1, [pc, #236]	; (2ba4 <rf_on.part.0+0x130>)
    2ab6:	483c      	ldr	r0, [pc, #240]	; (2ba8 <rf_on.part.0+0x134>)
    2ab8:	f001 ff06 	bl	48c8 <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    2abc:	2200      	movs	r2, #0
    2abe:	4b3b      	ldr	r3, [pc, #236]	; (2bac <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    2ac0:	493b      	ldr	r1, [pc, #236]	; (2bb0 <rf_on.part.0+0x13c>)
    2ac2:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2ac4:	2202      	movs	r2, #2
    2ac6:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    2aca:	2203      	movs	r2, #3
    2acc:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    2ad0:	2204      	movs	r2, #4
    2ad2:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2ad4:	2205      	movs	r2, #5
    2ad6:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2ad8:	2206      	movs	r2, #6
    2ada:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2ade:	4a35      	ldr	r2, [pc, #212]	; (2bb4 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2ae0:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2ae4:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    2ae6:	4b34      	ldr	r3, [pc, #208]	; (2bb8 <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2ae8:	4a34      	ldr	r2, [pc, #208]	; (2bbc <rf_on.part.0+0x148>)
      t7 = *pS++;
    2aea:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2aec:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2af0:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2af4:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2af8:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    2afa:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    2afe:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    2b02:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    2b06:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    2b08:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    2b0a:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    2b0c:	6198      	str	r0, [r3, #24]
    2b0e:	4618      	mov	r0, r3
   } while (--nIterations);
    2b10:	4288      	cmp	r0, r1
    2b12:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    2b16:	f103 0320 	add.w	r3, r3, #32
    2b1a:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    2b1c:	d1e5      	bne.n	2aea <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2b1e:	4b28      	ldr	r3, [pc, #160]	; (2bc0 <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b20:	4828      	ldr	r0, [pc, #160]	; (2bc4 <rf_on.part.0+0x150>)
    2b22:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    2b24:	4b28      	ldr	r3, [pc, #160]	; (2bc8 <rf_on.part.0+0x154>)
    2b26:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    2b28:	4b28      	ldr	r3, [pc, #160]	; (2bcc <rf_on.part.0+0x158>)
    2b2a:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    2b2c:	4b28      	ldr	r3, [pc, #160]	; (2bd0 <rf_on.part.0+0x15c>)
    2b2e:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2b30:	4b28      	ldr	r3, [pc, #160]	; (2bd4 <rf_on.part.0+0x160>)
    2b32:	630b      	str	r3, [r1, #48]	; 0x30
    2b34:	f7ff ff1e 	bl	2974 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    2b38:	2001      	movs	r0, #1
    2b3a:	f001 f943 	bl	3dc4 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2b3e:	4826      	ldr	r0, [pc, #152]	; (2bd8 <rf_on.part.0+0x164>)
    2b40:	f001 f930 	bl	3da4 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b44:	4825      	ldr	r0, [pc, #148]	; (2bdc <rf_on.part.0+0x168>)
    2b46:	f7ff ff15 	bl	2974 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b4a:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    2b4e:	4823      	ldr	r0, [pc, #140]	; (2bdc <rf_on.part.0+0x168>)
    2b50:	f7ff ff74 	bl	2a3c <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    2b54:	4822      	ldr	r0, [pc, #136]	; (2be0 <rf_on.part.0+0x16c>)
    2b56:	f7ff ff0d 	bl	2974 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    2b5a:	4822      	ldr	r0, [pc, #136]	; (2be4 <rf_on.part.0+0x170>)
    2b5c:	f7ff ff0a 	bl	2974 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b60:	4820      	ldr	r0, [pc, #128]	; (2be4 <rf_on.part.0+0x170>)
    2b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2b66:	f7ff ff69 	bl	2a3c <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2b6a:	4a1f      	ldr	r2, [pc, #124]	; (2be8 <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2b6c:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2b6e:	7813      	ldrb	r3, [r2, #0]
    2b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b74:	f043 0310 	orr.w	r3, r3, #16
    2b78:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b7a:	2300      	movs	r3, #0
    2b7c:	4a1b      	ldr	r2, [pc, #108]	; (2bec <rf_on.part.0+0x178>)
    2b7e:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b80:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    2b84:	4b1a      	ldr	r3, [pc, #104]	; (2bf0 <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b86:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    2b88:	681b      	ldr	r3, [r3, #0]
}
    2b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    2b8e:	691b      	ldr	r3, [r3, #16]
    2b90:	4718      	bx	r3
    2b92:	bf00      	nop
    2b94:	40022090 	mulmi	r2, r0, r0
    2b98:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2b9c:	60040000 	andvs	r0, r4, r0
    2ba0:	06070051 			; <UNDEFINED> instruction: 0x06070051
    2ba4:	00005930 	andeq	r5, r0, r0, lsr r9
    2ba8:	2100041c 	tstcs	r0, ip, lsl r4
    2bac:	21000390 			; <UNDEFINED> instruction: 0x21000390
    2bb0:	2100c680 	smlabbcs	r0, r0, r6, ip
    2bb4:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2bb8:	2100c000 	mrscs	ip, (UNDEF: 0)
    2bbc:	0000527c 	andeq	r5, r0, ip, ror r2
    2bc0:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2bc4:	06070001 	streq	r0, [r7], -r1
    2bc8:	1a101020 	bne	406c50 <__ccfg+0x3e6ca8>
    2bcc:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2bd0:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2bd4:	70006b54 	andvc	r6, r0, r4, asr fp
    2bd8:	2000060c 	andcs	r0, r0, ip, lsl #12
    2bdc:	20000054 	andcs	r0, r0, r4, asr r0
    2be0:	20000024 	andcs	r0, r0, r4, lsr #32
    2be4:	2000003c 	andcs	r0, r0, ip, lsr r0
    2be8:	200005f8 	strdcs	r0, [r0], -r8
    2bec:	40041014 	andmi	r1, r4, r4, lsl r0
    2bf0:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002bf4 <rx_int_enable>:
static void rx_int_enable () {
    2bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2bf8:	4a2a      	ldr	r2, [pc, #168]	; (2ca4 <rx_int_enable+0xb0>)
    2bfa:	6813      	ldr	r3, [r2, #0]
    2bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2c04:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c06:	2200      	movs	r2, #0
    2c08:	4b27      	ldr	r3, [pc, #156]	; (2ca8 <rx_int_enable+0xb4>)
    2c0a:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c0c:	681d      	ldr	r5, [r3, #0]
    2c0e:	2d00      	cmp	r5, #0
    2c10:	d1fb      	bne.n	2c0a <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c12:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c14:	4a25      	ldr	r2, [pc, #148]	; (2cac <rx_int_enable+0xb8>)
				diag ("BAD RX");
    2c16:	4f26      	ldr	r7, [pc, #152]	; (2cb0 <rx_int_enable+0xbc>)
    2c18:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c1a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2cbc <rx_int_enable+0xc8>
    2c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2c26:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c28:	4b22      	ldr	r3, [pc, #136]	; (2cb4 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c2a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2cc0 <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c2e:	69db      	ldr	r3, [r3, #28]
    2c30:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2c32:	7923      	ldrb	r3, [r4, #4]
    2c34:	2b03      	cmp	r3, #3
    2c36:	d11e      	bne.n	2c76 <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c38:	7a63      	ldrb	r3, [r4, #9]
    2c3a:	7a21      	ldrb	r1, [r4, #8]
    2c3c:	1cda      	adds	r2, r3, #3
    2c3e:	4291      	cmp	r1, r2
			nr++;
    2c40:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c44:	d11c      	bne.n	2c80 <rx_int_enable+0x8c>
    2c46:	f898 2000 	ldrb.w	r2, [r8]
    2c4a:	429a      	cmp	r2, r3
    2c4c:	d318      	bcc.n	2c80 <rx_int_enable+0x8c>
    2c4e:	f013 0c01 	ands.w	ip, r3, #1
    2c52:	d115      	bne.n	2c80 <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2c54:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2c58:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    2c5a:	5c88      	ldrb	r0, [r1, r2]
    2c5c:	440b      	add	r3, r1
    2c5e:	3880      	subs	r0, #128	; 0x80
    2c60:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    2c62:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c66:	f8b9 0000 	ldrh.w	r0, [r9]
    2c6a:	f104 010a 	add.w	r1, r4, #10
    2c6e:	f7ff fb5f 	bl	2330 <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    2c72:	2300      	movs	r3, #0
    2c74:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c76:	2e01      	cmp	r6, #1
    2c78:	d006      	beq.n	2c88 <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c7a:	2601      	movs	r6, #1
    2c7c:	6824      	ldr	r4, [r4, #0]
    2c7e:	e7d8      	b.n	2c32 <rx_int_enable+0x3e>
				diag ("BAD RX");
    2c80:	4638      	mov	r0, r7
    2c82:	f7ff f82f 	bl	1ce4 <diag>
    2c86:	e7f4      	b.n	2c72 <rx_int_enable+0x7e>
	if (nr) {
    2c88:	b14d      	cbz	r5, 2c9e <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c8a:	f7ff f8c9 	bl	1e20 <lrnd>
}
    2c8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c92:	f3c0 4102 	ubfx	r1, r0, #16, #3
    2c96:	3102      	adds	r1, #2
    2c98:	4807      	ldr	r0, [pc, #28]	; (2cb8 <rx_int_enable+0xc4>)
    2c9a:	f7fe bdbf 	b.w	181c <__pi_utimer_set>
}
    2c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ca2:	bf00      	nop
    2ca4:	40041018 	andmi	r1, r4, r8, lsl r0
    2ca8:	40041010 	andmi	r1, r4, r0, lsl r0
    2cac:	40041014 	andmi	r1, r4, r4, lsl r0
    2cb0:	0000523b 	andeq	r5, r0, fp, lsr r2
    2cb4:	2000007c 	andcs	r0, r0, ip, ror r0
    2cb8:	200005ee 	andcs	r0, r0, lr, ror #11
    2cbc:	20000608 	andcs	r0, r0, r8, lsl #12
    2cc0:	20000600 	andcs	r0, r0, r0, lsl #12

00002cc4 <cc1350_driver>:
thread (cc1350_driver)
    2cc4:	2801      	cmp	r0, #1
    2cc6:	b570      	push	{r4, r5, r6, lr}
    2cc8:	f000 808b 	beq.w	2de2 <cc1350_driver+0x11e>
    2ccc:	2802      	cmp	r0, #2
    2cce:	f000 80bd 	beq.w	2e4c <cc1350_driver+0x188>
    2cd2:	2800      	cmp	r0, #0
    2cd4:	f040 80ce 	bne.w	2e74 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2cd8:	4c68      	ldr	r4, [pc, #416]	; (2e7c <cc1350_driver+0x1b8>)
    2cda:	f994 3000 	ldrsb.w	r3, [r4]
    2cde:	2b00      	cmp	r3, #0
    2ce0:	da05      	bge.n	2cee <cc1350_driver+0x2a>
			rf_off ();
    2ce2:	f7ff fe7d 	bl	29e0 <rf_off>
			_BIC (dstate,
    2ce6:	7823      	ldrb	r3, [r4, #0]
    2ce8:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2cec:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2cee:	7823      	ldrb	r3, [r4, #0]
    2cf0:	0798      	lsls	r0, r3, #30
    2cf2:	f003 0201 	and.w	r2, r3, #1
    2cf6:	d51e      	bpl.n	2d36 <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2cf8:	b90a      	cbnz	r2, 2cfe <cc1350_driver+0x3a>
				rx_de ();
    2cfa:	f7ff fe5f 	bl	29bc <rx_de>
		if (paylen == 0) {
    2cfe:	4d60      	ldr	r5, [pc, #384]	; (2e80 <cc1350_driver+0x1bc>)
    2d00:	4e60      	ldr	r6, [pc, #384]	; (2e84 <cc1350_driver+0x1c0>)
    2d02:	682b      	ldr	r3, [r5, #0]
    2d04:	2b00      	cmp	r3, #0
    2d06:	d14c      	bne.n	2da2 <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d08:	4b5f      	ldr	r3, [pc, #380]	; (2e88 <cc1350_driver+0x1c4>)
    2d0a:	4629      	mov	r1, r5
    2d0c:	8818      	ldrh	r0, [r3, #0]
    2d0e:	f7ff fb5d 	bl	23cc <tcvphy_get>
    2d12:	6170      	str	r0, [r6, #20]
    2d14:	2800      	cmp	r0, #0
    2d16:	d02f      	beq.n	2d78 <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d18:	4a5c      	ldr	r2, [pc, #368]	; (2e8c <cc1350_driver+0x1c8>)
				paylen -= 2;
    2d1a:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d1c:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2d1e:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d20:	4293      	cmp	r3, r2
				paylen -= 2;
    2d22:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d24:	dc03      	bgt.n	2d2e <cc1350_driver+0x6a>
    2d26:	2b00      	cmp	r3, #0
    2d28:	dd01      	ble.n	2d2e <cc1350_driver+0x6a>
    2d2a:	07db      	lsls	r3, r3, #31
    2d2c:	d51b      	bpl.n	2d66 <cc1350_driver+0xa2>
    2d2e:	200a      	movs	r0, #10
    2d30:	4957      	ldr	r1, [pc, #348]	; (2e90 <cc1350_driver+0x1cc>)
    2d32:	f7fd ffb9 	bl	ca8 <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2d36:	2a00      	cmp	r2, #0
    2d38:	d0e1      	beq.n	2cfe <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    2d3a:	06d9      	lsls	r1, r3, #27
    2d3c:	d50d      	bpl.n	2d5a <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d3e:	4855      	ldr	r0, [pc, #340]	; (2e94 <cc1350_driver+0x1d0>)
    2d40:	69c3      	ldr	r3, [r0, #28]
    2d42:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2d44:	2300      	movs	r3, #0
    2d46:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d48:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2d4a:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2d4c:	f7ff fe12 	bl	2974 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2d50:	7823      	ldrb	r3, [r4, #0]
    2d52:	f043 0302 	orr.w	r3, r3, #2
    2d56:	7023      	strb	r3, [r4, #0]
    2d58:	e7d1      	b.n	2cfe <cc1350_driver+0x3a>
    2d5a:	f7ff fe8b 	bl	2a74 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2d5e:	7823      	ldrb	r3, [r4, #0]
    2d60:	079a      	lsls	r2, r3, #30
    2d62:	d5ec      	bpl.n	2d3e <cc1350_driver+0x7a>
    2d64:	e7cb      	b.n	2cfe <cc1350_driver+0x3a>
				if (statid != 0xffff)
    2d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d6a:	4b4b      	ldr	r3, [pc, #300]	; (2e98 <cc1350_driver+0x1d4>)
    2d6c:	881b      	ldrh	r3, [r3, #0]
    2d6e:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d70:	bf18      	it	ne
    2d72:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d74:	682b      	ldr	r3, [r5, #0]
    2d76:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    2d78:	6829      	ldr	r1, [r5, #0]
    2d7a:	b991      	cbnz	r1, 2da2 <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    2d7c:	4b47      	ldr	r3, [pc, #284]	; (2e9c <cc1350_driver+0x1d8>)
    2d7e:	6818      	ldr	r0, [r3, #0]
    2d80:	f7fe fdc0 	bl	1904 <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    2d84:	7823      	ldrb	r3, [r4, #0]
    2d86:	079d      	lsls	r5, r3, #30
    2d88:	d503      	bpl.n	2d92 <cc1350_driver+0xce>
				rx_int_enable ();
    2d8a:	f7ff ff33 	bl	2bf4 <rx_int_enable>
			release;
    2d8e:	f7fe fb49 	bl	1424 <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    2d92:	06dc      	lsls	r4, r3, #27
    2d94:	d5fb      	bpl.n	2d8e <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    2d96:	2102      	movs	r1, #2
    2d98:	4b41      	ldr	r3, [pc, #260]	; (2ea0 <cc1350_driver+0x1dc>)
    2d9a:	8818      	ldrh	r0, [r3, #0]
    2d9c:	f7fe fdf8 	bl	1990 <delay>
    2da0:	e7f5      	b.n	2d8e <cc1350_driver+0xca>
		if (bckf_timer) {
    2da2:	4d40      	ldr	r5, [pc, #256]	; (2ea4 <cc1350_driver+0x1e0>)
    2da4:	882b      	ldrh	r3, [r5, #0]
    2da6:	b163      	cbz	r3, 2dc2 <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    2da8:	4b3c      	ldr	r3, [pc, #240]	; (2e9c <cc1350_driver+0x1d8>)
    2daa:	2100      	movs	r1, #0
    2dac:	6818      	ldr	r0, [r3, #0]
    2dae:	f7fe fda9 	bl	1904 <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    2db2:	8828      	ldrh	r0, [r5, #0]
    2db4:	2100      	movs	r1, #0
    2db6:	f7fe fdeb 	bl	1990 <delay>
			if (dstate & DSTATE_RXAC)
    2dba:	7823      	ldrb	r3, [r4, #0]
    2dbc:	0798      	lsls	r0, r3, #30
    2dbe:	d5e6      	bpl.n	2d8e <cc1350_driver+0xca>
    2dc0:	e7e3      	b.n	2d8a <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    2dc2:	7823      	ldrb	r3, [r4, #0]
    2dc4:	06d9      	lsls	r1, r3, #27
    2dc6:	d401      	bmi.n	2dcc <cc1350_driver+0x108>
    2dc8:	f7ff fe54 	bl	2a74 <rf_on.part.0>
		rx_de ();
    2dcc:	f7ff fdf6 	bl	29bc <rx_de>
		RF_cmdPropTx . status = 0;
    2dd0:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2dd2:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2dd6:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2dd8:	4b33      	ldr	r3, [pc, #204]	; (2ea8 <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2dda:	4834      	ldr	r0, [pc, #208]	; (2eac <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2ddc:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2dde:	f7ff fdc9 	bl	2974 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2de2:	4b26      	ldr	r3, [pc, #152]	; (2e7c <cc1350_driver+0x1b8>)
    2de4:	f993 3000 	ldrsb.w	r3, [r3]
    2de8:	2b00      	cmp	r3, #0
    2dea:	f6ff af75 	blt.w	2cd8 <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2dee:	4b2e      	ldr	r3, [pc, #184]	; (2ea8 <cc1350_driver+0x1e4>)
    2df0:	681a      	ldr	r2, [r3, #0]
    2df2:	0792      	lsls	r2, r2, #30
    2df4:	d402      	bmi.n	2dfc <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2df6:	2101      	movs	r1, #1
    2df8:	4608      	mov	r0, r1
    2dfa:	e7cf      	b.n	2d9c <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2dfc:	4821      	ldr	r0, [pc, #132]	; (2e84 <cc1350_driver+0x1c0>)
    2dfe:	4c2c      	ldr	r4, [pc, #176]	; (2eb0 <cc1350_driver+0x1ec>)
    2e00:	8842      	ldrh	r2, [r0, #2]
    2e02:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    2e06:	d018      	beq.n	2e3a <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e08:	7822      	ldrb	r2, [r4, #0]
    2e0a:	2a0f      	cmp	r2, #15
    2e0c:	d909      	bls.n	2e22 <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2e0e:	2200      	movs	r2, #0
    2e10:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e12:	f06f 0202 	mvn.w	r2, #2
    2e16:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2e18:	f7ff fdac 	bl	2974 <issue_cmd>
				proceed (DR_XMIT);
    2e1c:	2001      	movs	r0, #1
    2e1e:	f7fe fd67 	bl	18f0 <proceed>
			txtries++;
    2e22:	7823      	ldrb	r3, [r4, #0]
    2e24:	3301      	adds	r3, #1
    2e26:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e28:	f7fe fffa 	bl	1e20 <lrnd>
    2e2c:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2e30:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e32:	481c      	ldr	r0, [pc, #112]	; (2ea4 <cc1350_driver+0x1e0>)
    2e34:	f7fe fcf2 	bl	181c <__pi_utimer_set>
		goto DR_LOOP__;
    2e38:	e74e      	b.n	2cd8 <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e3a:	6940      	ldr	r0, [r0, #20]
    2e3c:	f7ff fb00 	bl	2440 <tcvphy_end>
		paylen = 0;
    2e40:	2300      	movs	r3, #0
    2e42:	4a0f      	ldr	r2, [pc, #60]	; (2e80 <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e44:	2102      	movs	r1, #2
		paylen = 0;
    2e46:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2e48:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e4a:	e7f2      	b.n	2e32 <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e4c:	4b0b      	ldr	r3, [pc, #44]	; (2e7c <cc1350_driver+0x1b8>)
    2e4e:	781a      	ldrb	r2, [r3, #0]
    2e50:	f993 3000 	ldrsb.w	r3, [r3]
    2e54:	2b00      	cmp	r3, #0
    2e56:	f6ff af3f 	blt.w	2cd8 <cc1350_driver+0x14>
    2e5a:	07d3      	lsls	r3, r2, #31
    2e5c:	f53f af3c 	bmi.w	2cd8 <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2e60:	4b09      	ldr	r3, [pc, #36]	; (2e88 <cc1350_driver+0x1c4>)
    2e62:	8818      	ldrh	r0, [r3, #0]
    2e64:	f7ff fad2 	bl	240c <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e68:	2800      	cmp	r0, #0
    2e6a:	f47f af35 	bne.w	2cd8 <cc1350_driver+0x14>
			rf_off ();
    2e6e:	f7ff fdb7 	bl	29e0 <rf_off>
    2e72:	e731      	b.n	2cd8 <cc1350_driver+0x14>
endthread
    2e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2e78:	f7fe bcb2 	b.w	17e0 <__pi_badstate>
    2e7c:	200005f8 	strdcs	r0, [r0], -r8
    2e80:	200005fc 	strdcs	r0, [r0], -ip
    2e84:	200000a0 	andcs	r0, r0, r0, lsr #1
    2e88:	20000600 	andcs	r0, r0, r0, lsl #12
    2e8c:	20000608 	andcs	r0, r0, r8, lsl #12
    2e90:	00005242 	andeq	r5, r0, r2, asr #4
    2e94:	2000007c 	andcs	r0, r0, ip, ror r0
    2e98:	20000628 	andcs	r0, r0, r8, lsr #12
    2e9c:	20000604 	andcs	r0, r0, r4, lsl #12
    2ea0:	20000038 	andcs	r0, r0, r8, lsr r0
    2ea4:	200005ee 	andcs	r0, r0, lr, ror #11
    2ea8:	40041010 	andmi	r1, r4, r0, lsl r0
    2eac:	20000008 	andcs	r0, r0, r8
    2eb0:	2000062a 	andcs	r0, r0, sl, lsr #12

00002eb4 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    2eb4:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eb6:	4a15      	ldr	r2, [pc, #84]	; (2f0c <RFCCPE0IntHandler+0x58>)
    2eb8:	6813      	ldr	r3, [r2, #0]
    2eba:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    2ebc:	bfbf      	itttt	lt
    2ebe:	4914      	ldrlt	r1, [pc, #80]	; (2f10 <RFCCPE0IntHandler+0x5c>)
    2ec0:	780b      	ldrblt	r3, [r1, #0]
    2ec2:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2ec6:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2ec8:	2100      	movs	r1, #0
    2eca:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2ecc:	6813      	ldr	r3, [r2, #0]
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d1fb      	bne.n	2eca <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ed2:	4a10      	ldr	r2, [pc, #64]	; (2f14 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2ed4:	4c10      	ldr	r4, [pc, #64]	; (2f18 <RFCCPE0IntHandler+0x64>)
    2ed6:	6811      	ldr	r1, [r2, #0]
    2ed8:	6013      	str	r3, [r2, #0]
    2eda:	4a10      	ldr	r2, [pc, #64]	; (2f1c <RFCCPE0IntHandler+0x68>)
    2edc:	6824      	ldr	r4, [r4, #0]
    2ede:	6811      	ldr	r1, [r2, #0]
    2ee0:	4608      	mov	r0, r1
    2ee2:	f830 2b10 	ldrh.w	r2, [r0], #16
    2ee6:	f002 0207 	and.w	r2, r2, #7
    2eea:	429a      	cmp	r2, r3
    2eec:	dd08      	ble.n	2f00 <RFCCPE0IntHandler+0x4c>
    2eee:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2ef2:	3301      	adds	r3, #1
    2ef4:	42a5      	cmp	r5, r4
    2ef6:	d1f8      	bne.n	2eea <RFCCPE0IntHandler+0x36>
    2ef8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2efc:	889b      	ldrh	r3, [r3, #4]
    2efe:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2f00:	4a07      	ldr	r2, [pc, #28]	; (2f20 <RFCCPE0IntHandler+0x6c>)
    2f02:	7813      	ldrb	r3, [r2, #0]
    2f04:	f043 0302 	orr.w	r3, r3, #2
    2f08:	7013      	strb	r3, [r2, #0]
}
    2f0a:	bd30      	pop	{r4, r5, pc}
    2f0c:	40041010 	andmi	r1, r4, r0, lsl r0
    2f10:	200005f8 	strdcs	r0, [r0], -r8
    2f14:	40041014 	andmi	r1, r4, r4, lsl r0
    2f18:	20000604 	andcs	r0, r0, r4, lsl #12
    2f1c:	200005f4 	strdcs	r0, [r0], -r4
    2f20:	200006b4 			; <UNDEFINED> instruction: 0x200006b4

00002f24 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2f28:	4c49      	ldr	r4, [pc, #292]	; (3050 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    2f2a:	4606      	mov	r6, r0
	if (rbuffl != 0)
    2f2c:	7822      	ldrb	r2, [r4, #0]
    2f2e:	b11a      	cbz	r2, 2f38 <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2f30:	2009      	movs	r0, #9
    2f32:	4948      	ldr	r1, [pc, #288]	; (3054 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2f34:	f7fd feb8 	bl	ca8 <__pi_syserror>
	if (mbs == 0)
    2f38:	b129      	cbz	r1, 2f46 <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f3a:	1f8a      	subs	r2, r1, #6
    2f3c:	2af4      	cmp	r2, #244	; 0xf4
    2f3e:	d903      	bls.n	2f48 <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2f40:	2003      	movs	r0, #3
    2f42:	4945      	ldr	r1, [pc, #276]	; (3058 <phys_cc1350+0x134>)
    2f44:	e7f6      	b.n	2f34 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    2f46:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2f48:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    2f4a:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    2f4e:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2f50:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2f54:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f56:	7820      	ldrb	r0, [r4, #0]
    2f58:	469b      	mov	fp, r3
    2f5a:	300d      	adds	r0, #13
    2f5c:	f7fe fe48 	bl	1bf0 <__pi_malloc>
		if (db == NULL)
    2f60:	4603      	mov	r3, r0
    2f62:	b920      	cbnz	r0, 2f6e <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2f64:	2006      	movs	r0, #6
    2f66:	493b      	ldr	r1, [pc, #236]	; (3054 <phys_cc1350+0x130>)
    2f68:	e7e4      	b.n	2f34 <phys_cc1350+0x10>
    2f6a:	46b8      	mov	r8, r7
    2f6c:	e7f3      	b.n	2f56 <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    2f6e:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    2f72:	2f00      	cmp	r7, #0
    2f74:	d03e      	beq.n	2ff4 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    2f76:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    2f7a:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    2f7c:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    2f7e:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    2f80:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    2f84:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    2f88:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    2f8a:	d1ee      	bne.n	2f6a <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    2f8c:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f8e:	2008      	movs	r0, #8
    2f90:	f7fe fe2e 	bl	1bf0 <__pi_malloc>
    2f94:	4b31      	ldr	r3, [pc, #196]	; (305c <phys_cc1350+0x138>)
    2f96:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    2f98:	2800      	cmp	r0, #0
    2f9a:	d0e3      	beq.n	2f64 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    2f9c:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    2f9e:	2500      	movs	r5, #0
    2fa0:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fa2:	492f      	ldr	r1, [pc, #188]	; (3060 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    2fa4:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2fa6:	4a2f      	ldr	r2, [pc, #188]	; (3064 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fa8:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2faa:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fac:	89da      	ldrh	r2, [r3, #14]
    2fae:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    2fb2:	f042 0206 	orr.w	r2, r2, #6
    2fb6:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    2fb8:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fba:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    2fbe:	3b02      	subs	r3, #2
    2fc0:	7023      	strb	r3, [r4, #0]
	physid = phy;
    2fc2:	4b29      	ldr	r3, [pc, #164]	; (3068 <phys_cc1350+0x144>)
    2fc4:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fc6:	f7ff f98b 	bl	22e0 <tcvphy_reg>
    2fca:	4b28      	ldr	r3, [pc, #160]	; (306c <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fcc:	2207      	movs	r2, #7
    2fce:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fd0:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fd2:	462b      	mov	r3, r5
    2fd4:	4826      	ldr	r0, [pc, #152]	; (3070 <phys_cc1350+0x14c>)
    2fd6:	f7fe fe85 	bl	1ce4 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    2fda:	4826      	ldr	r0, [pc, #152]	; (3074 <phys_cc1350+0x150>)
    2fdc:	f7fe fc08 	bl	17f0 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    2fe0:	4629      	mov	r1, r5
    2fe2:	4825      	ldr	r0, [pc, #148]	; (3078 <phys_cc1350+0x154>)
    2fe4:	f7fe fe58 	bl	1c98 <__pi_fork>
    2fe8:	4b24      	ldr	r3, [pc, #144]	; (307c <phys_cc1350+0x158>)
    2fea:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    2fec:	b920      	cbnz	r0, 2ff8 <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    2fee:	2004      	movs	r0, #4
    2ff0:	4918      	ldr	r1, [pc, #96]	; (3054 <phys_cc1350+0x130>)
    2ff2:	e79f      	b.n	2f34 <phys_cc1350+0x10>
    2ff4:	4605      	mov	r5, r0
    2ff6:	e7c0      	b.n	2f7a <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2ff8:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    2ffc:	4c20      	ldr	r4, [pc, #128]	; (3080 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2ffe:	4921      	ldr	r1, [pc, #132]	; (3084 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3000:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3002:	4b21      	ldr	r3, [pc, #132]	; (3088 <phys_cc1350+0x164>)
    3004:	781a      	ldrb	r2, [r3, #0]
    3006:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3008:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    300c:	8858      	ldrh	r0, [r3, #2]
    300e:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    3012:	6922      	ldr	r2, [r4, #16]
    3014:	f003 030f 	and.w	r3, r3, #15
    3018:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    301c:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    3020:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3024:	f022 020f 	bic.w	r2, r2, #15
    3028:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    302c:	4313      	orrs	r3, r2
    302e:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    3030:	f7ff fbc8 	bl	27c4 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3034:	4b15      	ldr	r3, [pc, #84]	; (308c <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3036:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3038:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    303a:	f000 fe27 	bl	3c8c <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    303e:	4620      	mov	r0, r4
    3040:	4913      	ldr	r1, [pc, #76]	; (3090 <phys_cc1350+0x16c>)
    3042:	f000 fd7b 	bl	3b3c <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3046:	4b13      	ldr	r3, [pc, #76]	; (3094 <phys_cc1350+0x170>)
    3048:	601d      	str	r5, [r3, #0]
}
    304a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    304e:	bf00      	nop
    3050:	20000608 	andcs	r0, r0, r8, lsl #12
    3054:	0000524a 	andeq	r5, r0, sl, asr #4
    3058:	0000524f 	andeq	r5, r0, pc, asr #4
    305c:	2000007c 	andcs	r0, r0, ip, ror r0
    3060:	000027e5 	andeq	r2, r0, r5, ror #15
    3064:	2000061c 	andcs	r0, r0, ip, lsl r6
    3068:	20000600 	andcs	r0, r0, r0, lsl #12
    306c:	20000604 	andcs	r0, r0, r4, lsl #12
    3070:	00005257 	andeq	r5, r0, r7, asr r2
    3074:	200005ee 	andcs	r0, r0, lr, ror #11
    3078:	00002cc5 	andeq	r2, r0, r5, asr #25
    307c:	200005f4 	strdcs	r0, [r0], -r4
    3080:	20000054 	andcs	r0, r0, r4, asr r0
    3084:	00005bbc 			; <UNDEFINED> instruction: 0x00005bbc
    3088:	2000003a 	andcs	r0, r0, sl, lsr r0
    308c:	400821d0 	ldrdmi	r2, [r8], -r0
    3090:	2000060c 	andcs	r0, r0, ip, lsl #12
    3094:	40041018 	andmi	r1, r4, r8, lsl r0

00003098 <tcv_clo_null>:
    3098:	b510      	push	{r4, lr}
    309a:	4a07      	ldr	r2, [pc, #28]	; (30b8 <tcv_clo_null+0x20>)
    309c:	4603      	mov	r3, r0
    309e:	6812      	ldr	r2, [r2, #0]
    30a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    30a4:	b132      	cbz	r2, 30b4 <tcv_clo_null+0x1c>
    30a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    30aa:	428c      	cmp	r4, r1
    30ac:	bf04      	itt	eq
    30ae:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    30b2:	2000      	moveq	r0, #0
    30b4:	bd10      	pop	{r4, pc}
    30b6:	bf00      	nop
    30b8:	2000062c 	andcs	r0, r0, ip, lsr #12

000030bc <tcv_rcv_null>:
    30bc:	4907      	ldr	r1, [pc, #28]	; (30dc <tcv_rcv_null+0x20>)
    30be:	9a00      	ldr	r2, [sp, #0]
    30c0:	6809      	ldr	r1, [r1, #0]
    30c2:	b909      	cbnz	r1, 30c8 <tcv_rcv_null+0xc>
    30c4:	2000      	movs	r0, #0
    30c6:	4770      	bx	lr
    30c8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    30cc:	6019      	str	r1, [r3, #0]
    30ce:	3101      	adds	r1, #1
    30d0:	d0f8      	beq.n	30c4 <tcv_rcv_null+0x8>
    30d2:	2300      	movs	r3, #0
    30d4:	2002      	movs	r0, #2
    30d6:	8053      	strh	r3, [r2, #2]
    30d8:	8013      	strh	r3, [r2, #0]
    30da:	4770      	bx	lr
    30dc:	2000062c 	andcs	r0, r0, ip, lsr #12

000030e0 <tcv_frm_null>:
    30e0:	2000      	movs	r0, #0
    30e2:	8048      	strh	r0, [r1, #2]
    30e4:	8008      	strh	r0, [r1, #0]
    30e6:	4770      	bx	lr

000030e8 <tcv_out_null>:
    30e8:	2004      	movs	r0, #4
    30ea:	4770      	bx	lr

000030ec <tcv_xmt_null>:
    30ec:	2001      	movs	r0, #1
    30ee:	4770      	bx	lr

000030f0 <tcv_ope_null>:
    30f0:	b570      	push	{r4, r5, r6, lr}
    30f2:	4c0f      	ldr	r4, [pc, #60]	; (3130 <tcv_ope_null+0x40>)
    30f4:	4605      	mov	r5, r0
    30f6:	6823      	ldr	r3, [r4, #0]
    30f8:	460e      	mov	r6, r1
    30fa:	b94b      	cbnz	r3, 3110 <tcv_ope_null+0x20>
    30fc:	200c      	movs	r0, #12
    30fe:	f7fe fd77 	bl	1bf0 <__pi_malloc>
    3102:	6020      	str	r0, [r4, #0]
    3104:	b178      	cbz	r0, 3126 <tcv_ope_null+0x36>
    3106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    310a:	e9c0 3300 	strd	r3, r3, [r0]
    310e:	6083      	str	r3, [r0, #8]
    3110:	6823      	ldr	r3, [r4, #0]
    3112:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    3116:	3201      	adds	r2, #1
    3118:	bf06      	itte	eq
    311a:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    311e:	2000      	moveq	r0, #0
    3120:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3124:	bd70      	pop	{r4, r5, r6, pc}
    3126:	2006      	movs	r0, #6
    3128:	4902      	ldr	r1, [pc, #8]	; (3134 <tcv_ope_null+0x44>)
    312a:	f7fd fdbd 	bl	ca8 <__pi_syserror>
    312e:	bf00      	nop
    3130:	2000062c 	andcs	r0, r0, ip, lsr #12
    3134:	00005bc8 	andeq	r5, r0, r8, asr #23

00003138 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    3138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    313a:	4b18      	ldr	r3, [pc, #96]	; (319c <__outserial+0x64>)
    313c:	681b      	ldr	r3, [r3, #0]
    313e:	689d      	ldr	r5, [r3, #8]
    3140:	b130      	cbz	r0, 3150 <__outserial+0x18>
    3142:	280a      	cmp	r0, #10
    3144:	d00d      	beq.n	3162 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    3146:	b003      	add	sp, #12
    3148:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    314c:	f7fe bb48 	b.w	17e0 <__pi_badstate>
	ptr = data;
    3150:	4b13      	ldr	r3, [pc, #76]	; (31a0 <__outserial+0x68>)
    3152:	4c14      	ldr	r4, [pc, #80]	; (31a4 <__outserial+0x6c>)
    3154:	601d      	str	r5, [r3, #0]
	if (*ptr)
    3156:	782b      	ldrb	r3, [r5, #0]
    3158:	b1e3      	cbz	r3, 3194 <__outserial+0x5c>
		len = strlen (ptr);
    315a:	4628      	mov	r0, r5
    315c:	f7fe fc46 	bl	19ec <__pi_strlen>
    3160:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3162:	4e0f      	ldr	r6, [pc, #60]	; (31a0 <__outserial+0x68>)
    3164:	4f0f      	ldr	r7, [pc, #60]	; (31a4 <__outserial+0x6c>)
    3166:	883b      	ldrh	r3, [r7, #0]
    3168:	2201      	movs	r2, #1
    316a:	9300      	str	r3, [sp, #0]
    316c:	2100      	movs	r1, #0
    316e:	6833      	ldr	r3, [r6, #0]
    3170:	200a      	movs	r0, #10
    3172:	f7fe fc7b 	bl	1a6c <io>
	ptr += quant;
    3176:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    3178:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    317a:	4403      	add	r3, r0
	len -= quant;
    317c:	1a24      	subs	r4, r4, r0
	ptr += quant;
    317e:	6033      	str	r3, [r6, #0]
	len -= quant;
    3180:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    3182:	2c00      	cmp	r4, #0
    3184:	d1ef      	bne.n	3166 <__outserial+0x2e>
		ufree (data);
    3186:	4628      	mov	r0, r5
    3188:	f7fe fce6 	bl	1b58 <__pi_free>
		finish;
    318c:	4620      	mov	r0, r4
    318e:	f7fe fd07 	bl	1ba0 <kill>
    3192:	e7e8      	b.n	3166 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3194:	786b      	ldrb	r3, [r5, #1]
    3196:	3303      	adds	r3, #3
    3198:	6023      	str	r3, [r4, #0]
    319a:	e7e2      	b.n	3162 <__outserial+0x2a>
    319c:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    31a0:	20000634 	andcs	r0, r0, r4, lsr r6
    31a4:	20000630 	andcs	r0, r0, r0, lsr r6

000031a8 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    31a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31aa:	4d42      	ldr	r5, [pc, #264]	; (32b4 <__inserial+0x10c>)
    31ac:	682a      	ldr	r2, [r5, #0]
    31ae:	6894      	ldr	r4, [r2, #8]
    31b0:	2803      	cmp	r0, #3
    31b2:	d87a      	bhi.n	32aa <__inserial+0x102>
    31b4:	e8df f000 	tbb	[pc, r0]
    31b8:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    31bc:	4b3e      	ldr	r3, [pc, #248]	; (32b8 <__inserial+0x110>)
    31be:	681b      	ldr	r3, [r3, #0]
    31c0:	b113      	cbz	r3, 31c8 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    31c2:	2000      	movs	r0, #0
    31c4:	f7fe fcec 	bl	1ba0 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31c8:	2040      	movs	r0, #64	; 0x40
    31ca:	f7fe fd11 	bl	1bf0 <__pi_malloc>
    31ce:	4b3b      	ldr	r3, [pc, #236]	; (32bc <__inserial+0x114>)
    31d0:	4604      	mov	r4, r0
    31d2:	6018      	str	r0, [r3, #0]
    31d4:	b918      	cbnz	r0, 31de <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    31d6:	f7fe fd79 	bl	1ccc <__pi_waitmem>
		release;
    31da:	f7fe f923 	bl	1424 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    31de:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    31e0:	682b      	ldr	r3, [r5, #0]
    31e2:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    31e4:	4b36      	ldr	r3, [pc, #216]	; (32c0 <__inserial+0x118>)
    31e6:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    31e8:	2001      	movs	r0, #1
    31ea:	2200      	movs	r2, #0
    31ec:	4d33      	ldr	r5, [pc, #204]	; (32bc <__inserial+0x114>)
    31ee:	9000      	str	r0, [sp, #0]
    31f0:	682b      	ldr	r3, [r5, #0]
    31f2:	4611      	mov	r1, r2
    31f4:	f7fe fc3a 	bl	1a6c <io>
	if (ptr == (char*) data) { // new line
    31f8:	682b      	ldr	r3, [r5, #0]
    31fa:	42a3      	cmp	r3, r4
    31fc:	d10d      	bne.n	321a <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    31fe:	7823      	ldrb	r3, [r4, #0]
    3200:	b923      	cbnz	r3, 320c <__inserial+0x64>
			ptr++;
    3202:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    3204:	2002      	movs	r0, #2
			ptr++;
    3206:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    3208:	f7fe fb72 	bl	18f0 <proceed>
		}

		if (*ptr < 0x20)
    320c:	682b      	ldr	r3, [r5, #0]
    320e:	781b      	ldrb	r3, [r3, #0]
    3210:	2b1f      	cmp	r3, #31
    3212:	d802      	bhi.n	321a <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    3214:	2001      	movs	r0, #1
    3216:	f7fe fb6b 	bl	18f0 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    321a:	682b      	ldr	r3, [r5, #0]
    321c:	781a      	ldrb	r2, [r3, #0]
    321e:	2a0a      	cmp	r2, #10
    3220:	d001      	beq.n	3226 <__inserial+0x7e>
    3222:	2a0d      	cmp	r2, #13
    3224:	d105      	bne.n	3232 <__inserial+0x8a>
		*ptr = '\0';
    3226:	2000      	movs	r0, #0
    3228:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    322a:	4b23      	ldr	r3, [pc, #140]	; (32b8 <__inserial+0x110>)
    322c:	601c      	str	r4, [r3, #0]
		finish;
    322e:	f7fe fcb7 	bl	1ba0 <kill>
	}

	if (len) {
    3232:	4923      	ldr	r1, [pc, #140]	; (32c0 <__inserial+0x118>)
    3234:	680b      	ldr	r3, [r1, #0]
    3236:	b123      	cbz	r3, 3242 <__inserial+0x9a>
		ptr++;
    3238:	682a      	ldr	r2, [r5, #0]
		len--;
    323a:	3b01      	subs	r3, #1
		ptr++;
    323c:	3201      	adds	r2, #1
    323e:	602a      	str	r2, [r5, #0]
		len--;
    3240:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    3242:	2001      	movs	r0, #1
    3244:	f7fe fb54 	bl	18f0 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    3248:	2301      	movs	r3, #1
    324a:	2200      	movs	r2, #0
    324c:	4d1b      	ldr	r5, [pc, #108]	; (32bc <__inserial+0x114>)
    324e:	9300      	str	r3, [sp, #0]
    3250:	4611      	mov	r1, r2
    3252:	682b      	ldr	r3, [r5, #0]
    3254:	2002      	movs	r0, #2
    3256:	f7fe fc09 	bl	1a6c <io>
	len -= 2;
    325a:	4819      	ldr	r0, [pc, #100]	; (32c0 <__inserial+0x118>)
    325c:	6803      	ldr	r3, [r0, #0]
    325e:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    3260:	682b      	ldr	r3, [r5, #0]
    3262:	f813 1b01 	ldrb.w	r1, [r3], #1
    3266:	3101      	adds	r1, #1
		len = *ptr + 1;
    3268:	4291      	cmp	r1, r2
    326a:	bfd4      	ite	le
    326c:	6001      	strle	r1, [r0, #0]
    326e:	6002      	strgt	r2, [r0, #0]
	ptr++;
    3270:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    3272:	2200      	movs	r2, #0
    3274:	4f12      	ldr	r7, [pc, #72]	; (32c0 <__inserial+0x118>)
    3276:	4d11      	ldr	r5, [pc, #68]	; (32bc <__inserial+0x114>)
    3278:	883b      	ldrh	r3, [r7, #0]
    327a:	4611      	mov	r1, r2
    327c:	9300      	str	r3, [sp, #0]
    327e:	682b      	ldr	r3, [r5, #0]
    3280:	2003      	movs	r0, #3
    3282:	f7fe fbf3 	bl	1a6c <io>
	len -= quant;
    3286:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3288:	4606      	mov	r6, r0
	len -= quant;
    328a:	1a18      	subs	r0, r3, r0
    328c:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    328e:	b918      	cbnz	r0, 3298 <__inserial+0xf0>
		__inpline = (char*)data;
    3290:	4b09      	ldr	r3, [pc, #36]	; (32b8 <__inserial+0x110>)
    3292:	601c      	str	r4, [r3, #0]
		finish;
    3294:	f7fe fc84 	bl	1ba0 <kill>
	}
	ptr += quant;
    3298:	6828      	ldr	r0, [r5, #0]
    329a:	4430      	add	r0, r6
    329c:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    329e:	2003      	movs	r0, #3

endstrand
    32a0:	b003      	add	sp, #12
    32a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    32a6:	f7fe bb23 	b.w	18f0 <proceed>
endstrand
    32aa:	b003      	add	sp, #12
    32ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    32b0:	f7fe ba96 	b.w	17e0 <__pi_badstate>
    32b4:	200006d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    32b8:	20000638 	andcs	r0, r0, r8, lsr r6
    32bc:	20000640 	andcs	r0, r0, r0, asr #12
    32c0:	2000063c 	andcs	r0, r0, ip, lsr r6

000032c4 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    32c4:	f8dc 2000 	ldr.w	r2, [ip]
    32c8:	b132      	cbz	r2, 32d8 <outc.5724+0x14>
    32ca:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    32ce:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    32d2:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    32d4:	bf88      	it	hi
    32d6:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    32d8:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    32dc:	3301      	adds	r3, #1
    32de:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    32e2:	4770      	bx	lr

000032e4 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    32e8:	461c      	mov	r4, r3
    32ea:	ab0c      	add	r3, sp, #48	; 0x30
    32ec:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    32ee:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    32f0:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    32f2:	4f86      	ldr	r7, [pc, #536]	; (350c <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32f4:	9001      	str	r0, [sp, #4]
    32f6:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    32fa:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    32fe:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    3302:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    3306:	d118      	bne.n	333a <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    3308:	f892 9001 	ldrb.w	r9, [r2, #1]
    330c:	1c95      	adds	r5, r2, #2
				outc ('\\');
    330e:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    3312:	f1b9 0f00 	cmp.w	r9, #0
    3316:	d10b      	bne.n	3330 <__pi_vfparse+0x4c>
				outc ('\\');
    3318:	205c      	movs	r0, #92	; 0x5c
    331a:	f7ff ffd3 	bl	32c4 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    331e:	4648      	mov	r0, r9
    3320:	f10d 0c04 	add.w	ip, sp, #4
    3324:	f7ff ffce 	bl	32c4 <outc.5724>
			if (c == '\0')
    3328:	f1b9 0f00 	cmp.w	r9, #0
    332c:	d103      	bne.n	3336 <__pi_vfparse+0x52>
    332e:	e027      	b.n	3380 <__pi_vfparse+0x9c>
			outc (c);
    3330:	4648      	mov	r0, r9
				outc (val);
    3332:	f7ff ffc7 	bl	32c4 <outc.5724>
				val = (word) va_arg (ap, aword);
    3336:	462a      	mov	r2, r5
    3338:	e7e1      	b.n	32fe <__pi_vfparse+0x1a>
		if (c == '%') {
    333a:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    333e:	f040 80e2 	bne.w	3506 <__pi_vfparse+0x222>
			c = *fm++;
    3342:	f892 8001 	ldrb.w	r8, [r2, #1]
    3346:	1c95      	adds	r5, r2, #2
			switch (c) {
    3348:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    334c:	f000 80cd 	beq.w	34ea <__pi_vfparse+0x206>
    3350:	d81b      	bhi.n	338a <__pi_vfparse+0xa6>
    3352:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    3356:	d033      	beq.n	33c0 <__pi_vfparse+0xdc>
    3358:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    335c:	d067      	beq.n	342e <__pi_vfparse+0x14a>
    335e:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    3362:	f000 80bc 	beq.w	34de <__pi_vfparse+0x1fa>
				outc ('%');
    3366:	2025      	movs	r0, #37	; 0x25
    3368:	f10d 0c04 	add.w	ip, sp, #4
    336c:	f7ff ffaa 	bl	32c4 <outc.5724>
				outc (c);
    3370:	4640      	mov	r0, r8
    3372:	f10d 0c04 	add.w	ip, sp, #4
    3376:	f7ff ffa5 	bl	32c4 <outc.5724>
				if (c == '\0')
    337a:	f1b8 0f00 	cmp.w	r8, #0
    337e:	d1da      	bne.n	3336 <__pi_vfparse+0x52>
Ret:
				return d;
    3380:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    3384:	b004      	add	sp, #16
    3386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    338a:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    338e:	d017      	beq.n	33c0 <__pi_vfparse+0xdc>
    3390:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    3394:	d1e7      	bne.n	3366 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    3396:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    339a:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    339e:	fa1f f983 	uxth.w	r9, r3
    33a2:	fa49 f308 	asr.w	r3, r9, r8
    33a6:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    33aa:	5cf8      	ldrb	r0, [r7, r3]
    33ac:	f10d 0c04 	add.w	ip, sp, #4
    33b0:	f7ff ff88 	bl	32c4 <outc.5724>
					if (i == 0)
    33b4:	f1b8 0f00 	cmp.w	r8, #0
    33b8:	d0bd      	beq.n	3336 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    33ba:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    33be:	e7f0      	b.n	33a2 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    33c0:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    33c4:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    33c8:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    33cc:	d10a      	bne.n	33e4 <__pi_vfparse+0x100>
    33ce:	041b      	lsls	r3, r3, #16
    33d0:	d508      	bpl.n	33e4 <__pi_vfparse+0x100>
					outc ('-');
    33d2:	202d      	movs	r0, #45	; 0x2d
    33d4:	f10d 0c04 	add.w	ip, sp, #4
    33d8:	f7ff ff74 	bl	32c4 <outc.5724>
					val = (~val) + 1;
    33dc:	f1c9 0900 	rsb	r9, r9, #0
    33e0:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    33e4:	2305      	movs	r3, #5
				enci (10000);
    33e6:	f242 7810 	movw	r8, #10000	; 0x2710
    33ea:	fbb9 f0f8 	udiv	r0, r9, r8
    33ee:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    33f2:	d103      	bne.n	33fc <__pi_vfparse+0x118>
    33f4:	3b01      	subs	r3, #1
    33f6:	d117      	bne.n	3428 <__pi_vfparse+0x144>
    33f8:	f04f 0801 	mov.w	r8, #1
    33fc:	fa1f fa80 	uxth.w	sl, r0
    3400:	f10d 0c04 	add.w	ip, sp, #4
    3404:	3030      	adds	r0, #48	; 0x30
    3406:	f7ff ff5d 	bl	32c4 <outc.5724>
    340a:	fbb8 f3f6 	udiv	r3, r8, r6
    340e:	fb08 991a 	mls	r9, r8, sl, r9
    3412:	f1b8 0f09 	cmp.w	r8, #9
    3416:	fa1f f989 	uxth.w	r9, r9
    341a:	b29b      	uxth	r3, r3
    341c:	d98b      	bls.n	3336 <__pi_vfparse+0x52>
    341e:	fbb9 f0f3 	udiv	r0, r9, r3
    3422:	4698      	mov	r8, r3
    3424:	b2c0      	uxtb	r0, r0
    3426:	e7e9      	b.n	33fc <__pi_vfparse+0x118>
    3428:	fbb8 f8f6 	udiv	r8, r8, r6
    342c:	e7dd      	b.n	33ea <__pi_vfparse+0x106>
				c = *fm;
    342e:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    3430:	2b64      	cmp	r3, #100	; 0x64
    3432:	d001      	beq.n	3438 <__pi_vfparse+0x154>
    3434:	2b75      	cmp	r3, #117	; 0x75
    3436:	d132      	bne.n	349e <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    3438:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    343a:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    343e:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    3442:	d109      	bne.n	3458 <__pi_vfparse+0x174>
    3444:	f1ba 0f00 	cmp.w	sl, #0
    3448:	da06      	bge.n	3458 <__pi_vfparse+0x174>
						outc ('-');
    344a:	202d      	movs	r0, #45	; 0x2d
    344c:	f10d 0c04 	add.w	ip, sp, #4
    3450:	f7ff ff38 	bl	32c4 <outc.5724>
						val = (~val) + 1;
    3454:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    3458:	230a      	movs	r3, #10
					enci (1000000000UL);
    345a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3510 <__pi_vfparse+0x22c>
    345e:	fbba f9f8 	udiv	r9, sl, r8
    3462:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    3466:	d103      	bne.n	3470 <__pi_vfparse+0x18c>
    3468:	3b01      	subs	r3, #1
    346a:	d115      	bne.n	3498 <__pi_vfparse+0x1b4>
    346c:	f04f 0801 	mov.w	r8, #1
    3470:	f10d 0c04 	add.w	ip, sp, #4
    3474:	f109 0030 	add.w	r0, r9, #48	; 0x30
    3478:	f7ff ff24 	bl	32c4 <outc.5724>
    347c:	f1b8 0f09 	cmp.w	r8, #9
    3480:	fbb8 f3f6 	udiv	r3, r8, r6
    3484:	fb08 aa19 	mls	sl, r8, r9, sl
    3488:	f67f af55 	bls.w	3336 <__pi_vfparse+0x52>
    348c:	fbba f9f3 	udiv	r9, sl, r3
    3490:	4698      	mov	r8, r3
    3492:	fa5f f989 	uxtb.w	r9, r9
    3496:	e7eb      	b.n	3470 <__pi_vfparse+0x18c>
    3498:	fbb8 f8f6 	udiv	r8, r8, r6
    349c:	e7df      	b.n	345e <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    349e:	2b78      	cmp	r3, #120	; 0x78
    34a0:	d114      	bne.n	34cc <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    34a2:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    34a6:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    34aa:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    34ac:	fa29 f308 	lsr.w	r3, r9, r8
    34b0:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    34b4:	5cf8      	ldrb	r0, [r7, r3]
    34b6:	f10d 0c04 	add.w	ip, sp, #4
    34ba:	f7ff ff03 	bl	32c4 <outc.5724>
						if (i == 0)
    34be:	f1b8 0f00 	cmp.w	r8, #0
    34c2:	f43f af38 	beq.w	3336 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    34c6:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    34ca:	e7ef      	b.n	34ac <__pi_vfparse+0x1c8>
					outc ('%');
    34cc:	4648      	mov	r0, r9
    34ce:	f10d 0c04 	add.w	ip, sp, #4
    34d2:	f7ff fef7 	bl	32c4 <outc.5724>
					outc ('l');
    34d6:	4640      	mov	r0, r8
    34d8:	f10d 0c04 	add.w	ip, sp, #4
    34dc:	e729      	b.n	3332 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    34de:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    34e2:	f10d 0c04 	add.w	ip, sp, #4
    34e6:	b280      	uxth	r0, r0
    34e8:	e723      	b.n	3332 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    34ea:	f854 3b04 	ldr.w	r3, [r4], #4
    34ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    34f2:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    34f6:	2800      	cmp	r0, #0
    34f8:	f43f af1d 	beq.w	3336 <__pi_vfparse+0x52>
					outc (*st);
    34fc:	f10d 0c04 	add.w	ip, sp, #4
    3500:	f7ff fee0 	bl	32c4 <outc.5724>
					st++;
    3504:	e7f5      	b.n	34f2 <__pi_vfparse+0x20e>
		c = *fm++;
    3506:	1c55      	adds	r5, r2, #1
    3508:	e709      	b.n	331e <__pi_vfparse+0x3a>
    350a:	bf00      	nop
    350c:	00005151 	andeq	r5, r0, r1, asr r1
    3510:	3b9aca00 	blcc	fe6b5d18 <_estack+0xde6b0d18>

00003514 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    3514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3518:	460e      	mov	r6, r1
    351a:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    351c:	4604      	mov	r4, r0
    351e:	b140      	cbz	r0, 3532 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3520:	4613      	mov	r3, r2
    3522:	460a      	mov	r2, r1
    3524:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3528:	f7ff fedc 	bl	32e4 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    352c:	4620      	mov	r0, r4
    352e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    3532:	4608      	mov	r0, r1
    3534:	f7fe fa5a 	bl	19ec <__pi_strlen>
    3538:	f100 0511 	add.w	r5, r0, #17
    353c:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    353e:	4628      	mov	r0, r5
    3540:	f7fe fb56 	bl	1bf0 <__pi_malloc>
    3544:	4604      	mov	r4, r0
    3546:	2800      	cmp	r0, #0
    3548:	d0f0      	beq.n	352c <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    354a:	463b      	mov	r3, r7
    354c:	4632      	mov	r2, r6
    354e:	4629      	mov	r1, r5
    3550:	f7ff fec8 	bl	32e4 <__pi_vfparse>
    3554:	4285      	cmp	r5, r0
    3556:	4680      	mov	r8, r0
    3558:	d2e8      	bcs.n	352c <vform+0x18>
		ufree (res);
    355a:	4620      	mov	r0, r4
    355c:	f7fe fafc 	bl	1b58 <__pi_free>
		goto Again;
    3560:	4645      	mov	r5, r8
    3562:	e7ec      	b.n	353e <vform+0x2a>

00003564 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    3564:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    3566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    356a:	2800      	cmp	r0, #0
    356c:	f000 81b5 	beq.w	38da <vscan+0x376>
    3570:	2900      	cmp	r1, #0
    3572:	f000 81b4 	beq.w	38de <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    3576:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    3578:	270a      	movs	r7, #10
    357a:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    357c:	f8df c370 	ldr.w	ip, [pc, #880]	; 38f0 <vscan+0x38c>
    3580:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    3582:	f811 0b01 	ldrb.w	r0, [r1], #1
    3586:	b170      	cbz	r0, 35a6 <vscan+0x42>
		if (*fmt++ != '%')
    3588:	2825      	cmp	r0, #37	; 0x25
    358a:	d1f9      	bne.n	3580 <vscan+0x1c>
		switch (*fmt++) {
    358c:	7870      	ldrb	r0, [r6, #1]
    358e:	1cb1      	adds	r1, r6, #2
    3590:	286c      	cmp	r0, #108	; 0x6c
    3592:	f000 80e1 	beq.w	3758 <vscan+0x1f4>
    3596:	d809      	bhi.n	35ac <vscan+0x48>
    3598:	2863      	cmp	r0, #99	; 0x63
    359a:	f000 8184 	beq.w	38a6 <vscan+0x342>
    359e:	2864      	cmp	r0, #100	; 0x64
    35a0:	d043      	beq.n	362a <vscan+0xc6>
    35a2:	2800      	cmp	r0, #0
    35a4:	d1ec      	bne.n	3580 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    35a6:	4620      	mov	r0, r4
    35a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    35ac:	2875      	cmp	r0, #117	; 0x75
    35ae:	d074      	beq.n	369a <vscan+0x136>
    35b0:	2878      	cmp	r0, #120	; 0x78
    35b2:	f000 8098 	beq.w	36e6 <vscan+0x182>
    35b6:	2873      	cmp	r0, #115	; 0x73
    35b8:	d1e2      	bne.n	3580 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    35ba:	7818      	ldrb	r0, [r3, #0]
    35bc:	461e      	mov	r6, r3
    35be:	f1a0 0e09 	sub.w	lr, r0, #9
    35c2:	fa5f fe8e 	uxtb.w	lr, lr
    35c6:	f1be 0f17 	cmp.w	lr, #23
    35ca:	4698      	mov	r8, r3
    35cc:	f103 0301 	add.w	r3, r3, #1
    35d0:	f240 8173 	bls.w	38ba <vscan+0x356>
			if (*buf == '\0')
    35d4:	2800      	cmp	r0, #0
    35d6:	d0e6      	beq.n	35a6 <vscan+0x42>
			if (*buf != ',') {
    35d8:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    35da:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    35de:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    35e2:	d00e      	beq.n	3602 <vscan+0x9e>
    35e4:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    35e6:	f818 3b01 	ldrb.w	r3, [r8], #1
    35ea:	f1a3 0009 	sub.w	r0, r3, #9
    35ee:	2801      	cmp	r0, #1
    35f0:	d907      	bls.n	3602 <vscan+0x9e>
    35f2:	2b0d      	cmp	r3, #13
    35f4:	d005      	beq.n	3602 <vscan+0x9e>
    35f6:	2b2c      	cmp	r3, #44	; 0x2c
    35f8:	d003      	beq.n	3602 <vscan+0x9e>
    35fa:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    35fe:	f040 8163 	bne.w	38c8 <vscan+0x364>
			while (isspace (*buf)) buf++;
    3602:	f896 8000 	ldrb.w	r8, [r6]
    3606:	4633      	mov	r3, r6
    3608:	f1a8 0009 	sub.w	r0, r8, #9
    360c:	b2c0      	uxtb	r0, r0
    360e:	2817      	cmp	r0, #23
    3610:	f106 0601 	add.w	r6, r6, #1
    3614:	f240 815b 	bls.w	38ce <vscan+0x36a>
			if (*buf == ',') buf++;
    3618:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    361c:	bf08      	it	eq
    361e:	4633      	moveq	r3, r6
			*sap = '\0';
    3620:	f88e 5000 	strb.w	r5, [lr]
			break;
    3624:	e7ac      	b.n	3580 <vscan+0x1c>
		    case 'd': scani (word); break;
    3626:	2e00      	cmp	r6, #0
    3628:	d0bd      	beq.n	35a6 <vscan+0x42>
    362a:	469e      	mov	lr, r3
    362c:	f813 6b01 	ldrb.w	r6, [r3], #1
    3630:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    3634:	2809      	cmp	r0, #9
    3636:	d923      	bls.n	3680 <vscan+0x11c>
    3638:	2e2d      	cmp	r6, #45	; 0x2d
    363a:	d001      	beq.n	3640 <vscan+0xdc>
    363c:	2e2b      	cmp	r6, #43	; 0x2b
    363e:	d1f2      	bne.n	3626 <vscan+0xc2>
    3640:	7818      	ldrb	r0, [r3, #0]
    3642:	469e      	mov	lr, r3
    3644:	3830      	subs	r0, #48	; 0x30
    3646:	2809      	cmp	r0, #9
    3648:	d8ef      	bhi.n	362a <vscan+0xc6>
    364a:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    364e:	f1d9 0800 	rsbs	r8, r9, #0
    3652:	eb48 0809 	adc.w	r8, r8, r9
    3656:	f852 6b04 	ldr.w	r6, [r2], #4
    365a:	3401      	adds	r4, #1
    365c:	8035      	strh	r5, [r6, #0]
    365e:	f89e 0000 	ldrb.w	r0, [lr]
    3662:	4673      	mov	r3, lr
    3664:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    3668:	f1b9 0f09 	cmp.w	r9, #9
    366c:	f10e 0e01 	add.w	lr, lr, #1
    3670:	d909      	bls.n	3686 <vscan+0x122>
    3672:	f1b8 0f00 	cmp.w	r8, #0
    3676:	d183      	bne.n	3580 <vscan+0x1c>
    3678:	8830      	ldrh	r0, [r6, #0]
    367a:	4240      	negs	r0, r0
    367c:	8030      	strh	r0, [r6, #0]
    367e:	e77f      	b.n	3580 <vscan+0x1c>
    3680:	f04f 0800 	mov.w	r8, #0
    3684:	e7e7      	b.n	3656 <vscan+0xf2>
    3686:	8833      	ldrh	r3, [r6, #0]
    3688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    368c:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    3690:	3030      	adds	r0, #48	; 0x30
    3692:	8030      	strh	r0, [r6, #0]
    3694:	e7e3      	b.n	365e <vscan+0xfa>
		    case 'u': scanu (word); break;
    3696:	2800      	cmp	r0, #0
    3698:	d085      	beq.n	35a6 <vscan+0x42>
    369a:	7818      	ldrb	r0, [r3, #0]
    369c:	461e      	mov	r6, r3
    369e:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    36a2:	f1be 0f09 	cmp.w	lr, #9
    36a6:	f103 0301 	add.w	r3, r3, #1
    36aa:	d8f4      	bhi.n	3696 <vscan+0x132>
    36ac:	f852 eb04 	ldr.w	lr, [r2], #4
    36b0:	3401      	adds	r4, #1
    36b2:	f8ae 5000 	strh.w	r5, [lr]
    36b6:	7830      	ldrb	r0, [r6, #0]
    36b8:	4633      	mov	r3, r6
    36ba:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    36be:	f1b8 0f09 	cmp.w	r8, #9
    36c2:	f106 0601 	add.w	r6, r6, #1
    36c6:	f63f af5b 	bhi.w	3580 <vscan+0x1c>
    36ca:	f8be 3000 	ldrh.w	r3, [lr]
    36ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    36d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    36d6:	3830      	subs	r0, #48	; 0x30
    36d8:	f8ae 0000 	strh.w	r0, [lr]
    36dc:	e7eb      	b.n	36b6 <vscan+0x152>
		    case 'x': scanx (word); break;
    36de:	f1be 0f00 	cmp.w	lr, #0
    36e2:	f43f af60 	beq.w	35a6 <vscan+0x42>
    36e6:	f893 e000 	ldrb.w	lr, [r3]
    36ea:	461e      	mov	r6, r3
    36ec:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    36f0:	2809      	cmp	r0, #9
    36f2:	f103 0301 	add.w	r3, r3, #1
    36f6:	d904      	bls.n	3702 <vscan+0x19e>
    36f8:	f02e 0020 	bic.w	r0, lr, #32
    36fc:	3841      	subs	r0, #65	; 0x41
    36fe:	2805      	cmp	r0, #5
    3700:	d8ed      	bhi.n	36de <vscan+0x17a>
    3702:	f852 eb04 	ldr.w	lr, [r2], #4
    3706:	3401      	adds	r4, #1
    3708:	f8ae 5000 	strh.w	r5, [lr]
    370c:	f106 0805 	add.w	r8, r6, #5
    3710:	f896 9000 	ldrb.w	r9, [r6]
    3714:	4633      	mov	r3, r6
    3716:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    371a:	b2c0      	uxtb	r0, r0
    371c:	2809      	cmp	r0, #9
    371e:	f106 0601 	add.w	r6, r6, #1
    3722:	f240 80de 	bls.w	38e2 <vscan+0x37e>
    3726:	f029 0020 	bic.w	r0, r9, #32
    372a:	3841      	subs	r0, #65	; 0x41
    372c:	2805      	cmp	r0, #5
    372e:	f63f af27 	bhi.w	3580 <vscan+0x1c>
    3732:	4546      	cmp	r6, r8
    3734:	f43f af24 	beq.w	3580 <vscan+0x1c>
    3738:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    373c:	2b05      	cmp	r3, #5
    373e:	bf94      	ite	ls
    3740:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    3744:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    3748:	b2c0      	uxtb	r0, r0
    374a:	f8be 3000 	ldrh.w	r3, [lr]
    374e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    3752:	f8ae 0000 	strh.w	r0, [lr]
    3756:	e7db      	b.n	3710 <vscan+0x1ac>
			switch (*fmt++) {
    3758:	78b0      	ldrb	r0, [r6, #2]
    375a:	1cf1      	adds	r1, r6, #3
    375c:	2875      	cmp	r0, #117	; 0x75
    375e:	d07d      	beq.n	385c <vscan+0x2f8>
    3760:	d831      	bhi.n	37c6 <vscan+0x262>
    3762:	2800      	cmp	r0, #0
    3764:	f43f af1f 	beq.w	35a6 <vscan+0x42>
    3768:	2864      	cmp	r0, #100	; 0x64
    376a:	f47f af09 	bne.w	3580 <vscan+0x1c>
    376e:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    3770:	f813 6b01 	ldrb.w	r6, [r3], #1
    3774:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    3778:	2809      	cmp	r0, #9
    377a:	d962      	bls.n	3842 <vscan+0x2de>
    377c:	2e2d      	cmp	r6, #45	; 0x2d
    377e:	d001      	beq.n	3784 <vscan+0x220>
    3780:	2e2b      	cmp	r6, #43	; 0x2b
    3782:	d15b      	bne.n	383c <vscan+0x2d8>
    3784:	7818      	ldrb	r0, [r3, #0]
    3786:	4698      	mov	r8, r3
    3788:	3830      	subs	r0, #48	; 0x30
    378a:	2809      	cmp	r0, #9
    378c:	d8ef      	bhi.n	376e <vscan+0x20a>
    378e:	3e2d      	subs	r6, #45	; 0x2d
    3790:	4270      	negs	r0, r6
    3792:	4170      	adcs	r0, r6
    3794:	f852 eb04 	ldr.w	lr, [r2], #4
    3798:	3401      	adds	r4, #1
    379a:	f8ce 5000 	str.w	r5, [lr]
    379e:	f898 6000 	ldrb.w	r6, [r8]
    37a2:	4643      	mov	r3, r8
    37a4:	3e30      	subs	r6, #48	; 0x30
    37a6:	fa5f f986 	uxtb.w	r9, r6
    37aa:	f1b9 0f09 	cmp.w	r9, #9
    37ae:	f108 0801 	add.w	r8, r8, #1
    37b2:	d948      	bls.n	3846 <vscan+0x2e2>
    37b4:	2800      	cmp	r0, #0
    37b6:	f47f aee3 	bne.w	3580 <vscan+0x1c>
    37ba:	f8de 0000 	ldr.w	r0, [lr]
    37be:	4240      	negs	r0, r0
    37c0:	f8ce 0000 	str.w	r0, [lr]
    37c4:	e6dc      	b.n	3580 <vscan+0x1c>
    37c6:	2878      	cmp	r0, #120	; 0x78
    37c8:	f47f aeda 	bne.w	3580 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    37cc:	f893 e000 	ldrb.w	lr, [r3]
    37d0:	461e      	mov	r6, r3
    37d2:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    37d6:	2809      	cmp	r0, #9
    37d8:	f103 0301 	add.w	r3, r3, #1
    37dc:	d904      	bls.n	37e8 <vscan+0x284>
    37de:	f02e 0020 	bic.w	r0, lr, #32
    37e2:	3841      	subs	r0, #65	; 0x41
    37e4:	2805      	cmp	r0, #5
    37e6:	d85a      	bhi.n	389e <vscan+0x33a>
    37e8:	f852 eb04 	ldr.w	lr, [r2], #4
    37ec:	3401      	adds	r4, #1
    37ee:	f8ce 5000 	str.w	r5, [lr]
    37f2:	f106 0809 	add.w	r8, r6, #9
    37f6:	f896 9000 	ldrb.w	r9, [r6]
    37fa:	4633      	mov	r3, r6
    37fc:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    3800:	b2c0      	uxtb	r0, r0
    3802:	2809      	cmp	r0, #9
    3804:	f106 0601 	add.w	r6, r6, #1
    3808:	d96f      	bls.n	38ea <vscan+0x386>
    380a:	f029 0020 	bic.w	r0, r9, #32
    380e:	3841      	subs	r0, #65	; 0x41
    3810:	2805      	cmp	r0, #5
    3812:	f63f aeb5 	bhi.w	3580 <vscan+0x1c>
    3816:	4546      	cmp	r6, r8
    3818:	f43f aeb2 	beq.w	3580 <vscan+0x1c>
    381c:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    3820:	2b05      	cmp	r3, #5
    3822:	bf94      	ite	ls
    3824:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    3828:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    382c:	b2c0      	uxtb	r0, r0
    382e:	f8de 3000 	ldr.w	r3, [lr]
    3832:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    3836:	f8ce 0000 	str.w	r0, [lr]
    383a:	e7dc      	b.n	37f6 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    383c:	2e00      	cmp	r6, #0
    383e:	d196      	bne.n	376e <vscan+0x20a>
    3840:	e6b1      	b.n	35a6 <vscan+0x42>
    3842:	2000      	movs	r0, #0
    3844:	e7a6      	b.n	3794 <vscan+0x230>
    3846:	f8de 3000 	ldr.w	r3, [lr]
    384a:	b2b6      	uxth	r6, r6
    384c:	437b      	muls	r3, r7
    384e:	1b9e      	subs	r6, r3, r6
    3850:	f8ce 6000 	str.w	r6, [lr]
    3854:	e7a3      	b.n	379e <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    3856:	2800      	cmp	r0, #0
    3858:	f43f aea5 	beq.w	35a6 <vscan+0x42>
    385c:	7818      	ldrb	r0, [r3, #0]
    385e:	461e      	mov	r6, r3
    3860:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    3864:	f1be 0f09 	cmp.w	lr, #9
    3868:	f103 0301 	add.w	r3, r3, #1
    386c:	d8f3      	bhi.n	3856 <vscan+0x2f2>
    386e:	f852 eb04 	ldr.w	lr, [r2], #4
    3872:	3401      	adds	r4, #1
    3874:	f8ce 5000 	str.w	r5, [lr]
    3878:	7830      	ldrb	r0, [r6, #0]
    387a:	4633      	mov	r3, r6
    387c:	3830      	subs	r0, #48	; 0x30
    387e:	fa5f f880 	uxtb.w	r8, r0
    3882:	f1b8 0f09 	cmp.w	r8, #9
    3886:	f106 0601 	add.w	r6, r6, #1
    388a:	f63f ae79 	bhi.w	3580 <vscan+0x1c>
    388e:	f8de 3000 	ldr.w	r3, [lr]
    3892:	b280      	uxth	r0, r0
    3894:	fb07 0003 	mla	r0, r7, r3, r0
    3898:	f8ce 0000 	str.w	r0, [lr]
    389c:	e7ec      	b.n	3878 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    389e:	f1be 0f00 	cmp.w	lr, #0
    38a2:	d193      	bne.n	37cc <vscan+0x268>
    38a4:	e67f      	b.n	35a6 <vscan+0x42>
			if ((c = *buf++) == '\0')
    38a6:	f813 0b01 	ldrb.w	r0, [r3], #1
    38aa:	2800      	cmp	r0, #0
    38ac:	f43f ae7b 	beq.w	35a6 <vscan+0x42>
			sap = va_arg (ap, char*);
    38b0:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    38b4:	3401      	adds	r4, #1
			*sap = c;
    38b6:	7030      	strb	r0, [r6, #0]
			break;
    38b8:	e662      	b.n	3580 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    38ba:	fa2c fe0e 	lsr.w	lr, ip, lr
    38be:	f01e 0f01 	tst.w	lr, #1
    38c2:	f47f ae7a 	bne.w	35ba <vscan+0x56>
    38c6:	e687      	b.n	35d8 <vscan+0x74>
						*sap++ = *buf++;
    38c8:	f80e 3b01 	strb.w	r3, [lr], #1
    38cc:	e68a      	b.n	35e4 <vscan+0x80>
			while (isspace (*buf)) buf++;
    38ce:	fa2c f000 	lsr.w	r0, ip, r0
    38d2:	07c0      	lsls	r0, r0, #31
    38d4:	f53f ae95 	bmi.w	3602 <vscan+0x9e>
    38d8:	e6a2      	b.n	3620 <vscan+0xbc>
		return 0;
    38da:	4604      	mov	r4, r0
    38dc:	e663      	b.n	35a6 <vscan+0x42>
    38de:	460c      	mov	r4, r1
    38e0:	e661      	b.n	35a6 <vscan+0x42>
		    case 'x': scanx (word); break;
    38e2:	4546      	cmp	r6, r8
    38e4:	f47f af31 	bne.w	374a <vscan+0x1e6>
    38e8:	e64a      	b.n	3580 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    38ea:	4546      	cmp	r6, r8
    38ec:	d19f      	bne.n	382e <vscan+0x2ca>
    38ee:	e647      	b.n	3580 <vscan+0x1c>
    38f0:	00800013 	addeq	r0, r0, r3, lsl r0

000038f4 <SafeHapiVoid>:
    38f4:	b570      	push	{r4, r5, r6, lr}
    38f6:	4606      	mov	r6, r0
    38f8:	f000 f844 	bl	3984 <NOROM_CPUcpsid>
    38fc:	4605      	mov	r5, r0
    38fe:	4c06      	ldr	r4, [pc, #24]	; (3918 <SafeHapiVoid+0x24>)
    3900:	6823      	ldr	r3, [r4, #0]
    3902:	2b00      	cmp	r3, #0
    3904:	d0fb      	beq.n	38fe <SafeHapiVoid+0xa>
    3906:	47b0      	blx	r6
    3908:	2301      	movs	r3, #1
    390a:	6023      	str	r3, [r4, #0]
    390c:	b91d      	cbnz	r5, 3916 <SafeHapiVoid+0x22>
    390e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3912:	f000 b83b 	b.w	398c <NOROM_CPUcpsie>
    3916:	bd70      	pop	{r4, r5, r6, pc}
    3918:	400c8000 	andmi	r8, ip, r0

0000391c <NOROM_AONBatMonTemperatureGetDegC>:
    391c:	4b08      	ldr	r3, [pc, #32]	; (3940 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    391e:	6818      	ldr	r0, [r3, #0]
    3920:	4b08      	ldr	r3, [pc, #32]	; (3944 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    3922:	7819      	ldrb	r1, [r3, #0]
    3924:	4b08      	ldr	r3, [pc, #32]	; (3948 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    3926:	681a      	ldr	r2, [r3, #0]
    3928:	f340 0310 	sbfx	r3, r0, #0, #17
    392c:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    3930:	b248      	sxtb	r0, r1
    3932:	4350      	muls	r0, r2
    3934:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    3938:	3080      	adds	r0, #128	; 0x80
    393a:	1200      	asrs	r0, r0, #8
    393c:	4770      	bx	lr
    393e:	bf00      	nop
    3940:	40095030 	andmi	r5, r9, r0, lsr r0
    3944:	5000130c 	andpl	r1, r0, ip, lsl #6
    3948:	40095028 	andmi	r5, r9, r8, lsr #32

0000394c <NOROM_AONRTCCurrentCompareValueGet>:
    394c:	4a05      	ldr	r2, [pc, #20]	; (3964 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    394e:	4906      	ldr	r1, [pc, #24]	; (3968 <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    3950:	6813      	ldr	r3, [r2, #0]
    3952:	6808      	ldr	r0, [r1, #0]
    3954:	6812      	ldr	r2, [r2, #0]
    3956:	4293      	cmp	r3, r2
    3958:	d1f8      	bne.n	394c <NOROM_AONRTCCurrentCompareValueGet>
    395a:	041b      	lsls	r3, r3, #16
    395c:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    3960:	4770      	bx	lr
    3962:	bf00      	nop
    3964:	40092008 	andmi	r2, r9, r8
    3968:	4009200c 	andmi	r2, r9, ip

0000396c <NOROM_AONRTCCurrent64BitValueGet>:
    396c:	4b03      	ldr	r3, [pc, #12]	; (397c <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    396e:	4904      	ldr	r1, [pc, #16]	; (3980 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    3970:	681a      	ldr	r2, [r3, #0]
    3972:	6808      	ldr	r0, [r1, #0]
    3974:	6819      	ldr	r1, [r3, #0]
    3976:	4291      	cmp	r1, r2
    3978:	d1f8      	bne.n	396c <NOROM_AONRTCCurrent64BitValueGet>
    397a:	4770      	bx	lr
    397c:	40092008 	andmi	r2, r9, r8
    3980:	4009200c 	andmi	r2, r9, ip

00003984 <NOROM_CPUcpsid>:
    3984:	f3ef 8010 	mrs	r0, PRIMASK
    3988:	b672      	cpsid	i
    398a:	4770      	bx	lr

0000398c <NOROM_CPUcpsie>:
    398c:	f3ef 8010 	mrs	r0, PRIMASK
    3990:	b662      	cpsie	i
    3992:	4770      	bx	lr

00003994 <NOROM_OSCClockSourceSet>:
    3994:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3996:	460c      	mov	r4, r1
    3998:	07c1      	lsls	r1, r0, #31
    399a:	4605      	mov	r5, r0
    399c:	d509      	bpl.n	39b2 <NOROM_OSCClockSourceSet+0x1e>
    399e:	4b12      	ldr	r3, [pc, #72]	; (39e8 <NOROM_OSCClockSourceSet+0x54>)
    39a0:	b2a2      	uxth	r2, r4
    39a2:	681b      	ldr	r3, [r3, #0]
    39a4:	2100      	movs	r1, #0
    39a6:	9200      	str	r2, [sp, #0]
    39a8:	685e      	ldr	r6, [r3, #4]
    39aa:	4810      	ldr	r0, [pc, #64]	; (39ec <NOROM_OSCClockSourceSet+0x58>)
    39ac:	2201      	movs	r2, #1
    39ae:	460b      	mov	r3, r1
    39b0:	47b0      	blx	r6
    39b2:	07aa      	lsls	r2, r5, #30
    39b4:	d509      	bpl.n	39ca <NOROM_OSCClockSourceSet+0x36>
    39b6:	4b0c      	ldr	r3, [pc, #48]	; (39e8 <NOROM_OSCClockSourceSet+0x54>)
    39b8:	b2a2      	uxth	r2, r4
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	9200      	str	r2, [sp, #0]
    39be:	685e      	ldr	r6, [r3, #4]
    39c0:	480a      	ldr	r0, [pc, #40]	; (39ec <NOROM_OSCClockSourceSet+0x58>)
    39c2:	2100      	movs	r1, #0
    39c4:	2202      	movs	r2, #2
    39c6:	2301      	movs	r3, #1
    39c8:	47b0      	blx	r6
    39ca:	076b      	lsls	r3, r5, #29
    39cc:	d509      	bpl.n	39e2 <NOROM_OSCClockSourceSet+0x4e>
    39ce:	4b06      	ldr	r3, [pc, #24]	; (39e8 <NOROM_OSCClockSourceSet+0x54>)
    39d0:	b2a4      	uxth	r4, r4
    39d2:	681b      	ldr	r3, [r3, #0]
    39d4:	9400      	str	r4, [sp, #0]
    39d6:	685c      	ldr	r4, [r3, #4]
    39d8:	4804      	ldr	r0, [pc, #16]	; (39ec <NOROM_OSCClockSourceSet+0x58>)
    39da:	2100      	movs	r1, #0
    39dc:	220c      	movs	r2, #12
    39de:	2302      	movs	r3, #2
    39e0:	47a0      	blx	r4
    39e2:	b002      	add	sp, #8
    39e4:	bd70      	pop	{r4, r5, r6, pc}
    39e6:	bf00      	nop
    39e8:	100001a4 	andne	r0, r0, r4, lsr #3
    39ec:	400ca000 	andmi	sl, ip, r0

000039f0 <NOROM_OSCClockSourceGet>:
    39f0:	b510      	push	{r4, lr}
    39f2:	4b08      	ldr	r3, [pc, #32]	; (3a14 <NOROM_OSCClockSourceGet+0x24>)
    39f4:	2804      	cmp	r0, #4
    39f6:	681b      	ldr	r3, [r3, #0]
    39f8:	f04f 0134 	mov.w	r1, #52	; 0x34
    39fc:	68dc      	ldr	r4, [r3, #12]
    39fe:	bf07      	ittee	eq
    3a00:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    3a04:	231d      	moveq	r3, #29
    3a06:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    3a0a:	231c      	movne	r3, #28
    3a0c:	4802      	ldr	r0, [pc, #8]	; (3a18 <NOROM_OSCClockSourceGet+0x28>)
    3a0e:	47a0      	blx	r4
    3a10:	bd10      	pop	{r4, pc}
    3a12:	bf00      	nop
    3a14:	100001a4 	andne	r0, r0, r4, lsr #3
    3a18:	400ca000 	andmi	sl, ip, r0

00003a1c <NOROM_OSCHF_TurnOnXosc>:
    3a1c:	b508      	push	{r3, lr}
    3a1e:	2003      	movs	r0, #3
    3a20:	2101      	movs	r1, #1
    3a22:	f7ff ffb7 	bl	3994 <NOROM_OSCClockSourceSet>
    3a26:	f7ff ff91 	bl	394c <NOROM_AONRTCCurrentCompareValueGet>
    3a2a:	4b01      	ldr	r3, [pc, #4]	; (3a30 <NOROM_OSCHF_TurnOnXosc+0x14>)
    3a2c:	6098      	str	r0, [r3, #8]
    3a2e:	bd08      	pop	{r3, pc}
    3a30:	20000644 	andcs	r0, r0, r4, asr #12

00003a34 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    3a34:	b510      	push	{r4, lr}
    3a36:	2001      	movs	r0, #1
    3a38:	f7ff ffda 	bl	39f0 <NOROM_OSCClockSourceGet>
    3a3c:	2801      	cmp	r0, #1
    3a3e:	d01c      	beq.n	3a7a <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3a40:	4b0f      	ldr	r3, [pc, #60]	; (3a80 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    3a42:	4810      	ldr	r0, [pc, #64]	; (3a84 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    3a44:	681b      	ldr	r3, [r3, #0]
    3a46:	2134      	movs	r1, #52	; 0x34
    3a48:	68dc      	ldr	r4, [r3, #12]
    3a4a:	2201      	movs	r2, #1
    3a4c:	2300      	movs	r3, #0
    3a4e:	47a0      	blx	r4
    3a50:	b1a0      	cbz	r0, 3a7c <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    3a52:	4b0d      	ldr	r3, [pc, #52]	; (3a88 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    3a54:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3a56:	f7ff ff4d 	bl	38f4 <SafeHapiVoid>
    3a5a:	f7ff ff77 	bl	394c <NOROM_AONRTCCurrentCompareValueGet>
    3a5e:	4a0b      	ldr	r2, [pc, #44]	; (3a8c <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3a60:	6893      	ldr	r3, [r2, #8]
    3a62:	60d0      	str	r0, [r2, #12]
    3a64:	1ac0      	subs	r0, r0, r3
    3a66:	4b0a      	ldr	r3, [pc, #40]	; (3a90 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    3a68:	4358      	muls	r0, r3
    3a6a:	6813      	ldr	r3, [r2, #0]
    3a6c:	0c00      	lsrs	r0, r0, #16
    3a6e:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    3a72:	4283      	cmp	r3, r0
    3a74:	bf94      	ite	ls
    3a76:	6010      	strls	r0, [r2, #0]
    3a78:	6013      	strhi	r3, [r2, #0]
    3a7a:	2001      	movs	r0, #1
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	bf00      	nop
    3a80:	100001a4 	andne	r0, r0, r4, lsr #3
    3a84:	400ca000 	andmi	sl, ip, r0
    3a88:	10000048 	andne	r0, r0, r8, asr #32
    3a8c:	20000644 	andcs	r0, r0, r4, asr #12
    3a90:	000f4240 	andeq	r4, pc, r0, asr #4

00003a94 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    3a94:	b510      	push	{r4, lr}
    3a96:	2003      	movs	r0, #3
    3a98:	2100      	movs	r1, #0
    3a9a:	f7ff ff7b 	bl	3994 <NOROM_OSCClockSourceSet>
    3a9e:	2001      	movs	r0, #1
    3aa0:	f7ff ffa6 	bl	39f0 <NOROM_OSCClockSourceGet>
    3aa4:	b118      	cbz	r0, 3aae <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    3aa6:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    3aa8:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3aaa:	f7ff ff23 	bl	38f4 <SafeHapiVoid>
    3aae:	f7ff ff4d 	bl	394c <NOROM_AONRTCCurrentCompareValueGet>
    3ab2:	4c04      	ldr	r4, [pc, #16]	; (3ac4 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    3ab4:	6060      	str	r0, [r4, #4]
    3ab6:	f7ff ff31 	bl	391c <NOROM_AONBatMonTemperatureGetDegC>
    3aba:	6120      	str	r0, [r4, #16]
    3abc:	bd10      	pop	{r4, pc}
    3abe:	bf00      	nop
    3ac0:	10000048 	andne	r0, r0, r8, asr #32
    3ac4:	20000644 	andcs	r0, r0, r4, asr #12

00003ac8 <NOROM_RFCDoorbellSendTo>:
    3ac8:	4a07      	ldr	r2, [pc, #28]	; (3ae8 <NOROM_RFCDoorbellSendTo+0x20>)
    3aca:	6811      	ldr	r1, [r2, #0]
    3acc:	2900      	cmp	r1, #0
    3ace:	d1fb      	bne.n	3ac8 <NOROM_RFCDoorbellSendTo>
    3ad0:	4b06      	ldr	r3, [pc, #24]	; (3aec <NOROM_RFCDoorbellSendTo+0x24>)
    3ad2:	6019      	str	r1, [r3, #0]
    3ad4:	6010      	str	r0, [r2, #0]
    3ad6:	681a      	ldr	r2, [r3, #0]
    3ad8:	2a00      	cmp	r2, #0
    3ada:	d0fc      	beq.n	3ad6 <NOROM_RFCDoorbellSendTo+0xe>
    3adc:	4b03      	ldr	r3, [pc, #12]	; (3aec <NOROM_RFCDoorbellSendTo+0x24>)
    3ade:	2200      	movs	r2, #0
    3ae0:	601a      	str	r2, [r3, #0]
    3ae2:	f853 0c18 	ldr.w	r0, [r3, #-24]
    3ae6:	4770      	bx	lr
    3ae8:	40041000 	andmi	r1, r4, r0
    3aec:	4004101c 	andmi	r1, r4, ip, lsl r0

00003af0 <NOROM_RFCSynthPowerDown>:
    3af0:	4a0e      	ldr	r2, [pc, #56]	; (3b2c <NOROM_RFCSynthPowerDown+0x3c>)
    3af2:	490f      	ldr	r1, [pc, #60]	; (3b30 <NOROM_RFCSynthPowerDown+0x40>)
    3af4:	6813      	ldr	r3, [r2, #0]
    3af6:	2050      	movs	r0, #80	; 0x50
    3af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3afc:	f023 0302 	bic.w	r3, r3, #2
    3b00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3b04:	6013      	str	r3, [r2, #0]
    3b06:	4b0b      	ldr	r3, [pc, #44]	; (3b34 <NOROM_RFCSynthPowerDown+0x44>)
    3b08:	2203      	movs	r2, #3
    3b0a:	601a      	str	r2, [r3, #0]
    3b0c:	f241 0330 	movw	r3, #4144	; 0x1030
    3b10:	4a09      	ldr	r2, [pc, #36]	; (3b38 <NOROM_RFCSynthPowerDown+0x48>)
    3b12:	600b      	str	r3, [r1, #0]
    3b14:	2301      	movs	r3, #1
    3b16:	6013      	str	r3, [r2, #0]
    3b18:	6008      	str	r0, [r1, #0]
    3b1a:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3b1e:	6013      	str	r3, [r2, #0]
    3b20:	6008      	str	r0, [r1, #0]
    3b22:	6013      	str	r3, [r2, #0]
    3b24:	f842 3c0c 	str.w	r3, [r2, #-12]
    3b28:	4770      	bx	lr
    3b2a:	bf00      	nop
    3b2c:	60040000 	andvs	r0, r4, r0
    3b30:	40044114 	andmi	r4, r4, r4, lsl r1
    3b34:	40044108 	andmi	r4, r4, r8, lsl #2
    3b38:	4004410c 	andmi	r4, r4, ip, lsl #2

00003b3c <NOROM_RFCRfTrimRead>:
    3b3c:	f640 0202 	movw	r2, #2050	; 0x802
    3b40:	8803      	ldrh	r3, [r0, #0]
    3b42:	4293      	cmp	r3, r2
    3b44:	d006      	beq.n	3b54 <NOROM_RFCRfTrimRead+0x18>
    3b46:	f643 0207 	movw	r2, #14343	; 0x3807
    3b4a:	4293      	cmp	r3, r2
    3b4c:	d104      	bne.n	3b58 <NOROM_RFCRfTrimRead+0x1c>
    3b4e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3b52:	e002      	b.n	3b5a <NOROM_RFCRfTrimRead+0x1e>
    3b54:	7bc3      	ldrb	r3, [r0, #15]
    3b56:	e000      	b.n	3b5a <NOROM_RFCRfTrimRead+0x1e>
    3b58:	2300      	movs	r3, #0
    3b5a:	4a36      	ldr	r2, [pc, #216]	; (3c34 <NOROM_RFCRfTrimRead+0xf8>)
    3b5c:	2b0a      	cmp	r3, #10
    3b5e:	6812      	ldr	r2, [r2, #0]
    3b60:	600a      	str	r2, [r1, #0]
    3b62:	d031      	beq.n	3bc8 <NOROM_RFCRfTrimRead+0x8c>
    3b64:	dc10      	bgt.n	3b88 <NOROM_RFCRfTrimRead+0x4c>
    3b66:	2b05      	cmp	r3, #5
    3b68:	d021      	beq.n	3bae <NOROM_RFCRfTrimRead+0x72>
    3b6a:	2b06      	cmp	r3, #6
    3b6c:	d153      	bne.n	3c16 <NOROM_RFCRfTrimRead+0xda>
    3b6e:	4b32      	ldr	r3, [pc, #200]	; (3c38 <NOROM_RFCRfTrimRead+0xfc>)
    3b70:	681b      	ldr	r3, [r3, #0]
    3b72:	604b      	str	r3, [r1, #4]
    3b74:	4b31      	ldr	r3, [pc, #196]	; (3c3c <NOROM_RFCRfTrimRead+0x100>)
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	608b      	str	r3, [r1, #8]
    3b7a:	4b31      	ldr	r3, [pc, #196]	; (3c40 <NOROM_RFCRfTrimRead+0x104>)
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3b82:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3b86:	e052      	b.n	3c2e <NOROM_RFCRfTrimRead+0xf2>
    3b88:	2b0f      	cmp	r3, #15
    3b8a:	d02a      	beq.n	3be2 <NOROM_RFCRfTrimRead+0xa6>
    3b8c:	2b1e      	cmp	r3, #30
    3b8e:	d035      	beq.n	3bfc <NOROM_RFCRfTrimRead+0xc0>
    3b90:	2b0c      	cmp	r3, #12
    3b92:	d140      	bne.n	3c16 <NOROM_RFCRfTrimRead+0xda>
    3b94:	4b2b      	ldr	r3, [pc, #172]	; (3c44 <NOROM_RFCRfTrimRead+0x108>)
    3b96:	681b      	ldr	r3, [r3, #0]
    3b98:	604b      	str	r3, [r1, #4]
    3b9a:	4b2b      	ldr	r3, [pc, #172]	; (3c48 <NOROM_RFCRfTrimRead+0x10c>)
    3b9c:	681b      	ldr	r3, [r3, #0]
    3b9e:	608b      	str	r3, [r1, #8]
    3ba0:	4b2a      	ldr	r3, [pc, #168]	; (3c4c <NOROM_RFCRfTrimRead+0x110>)
    3ba2:	681b      	ldr	r3, [r3, #0]
    3ba4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3ba8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    3bac:	e03f      	b.n	3c2e <NOROM_RFCRfTrimRead+0xf2>
    3bae:	4b28      	ldr	r3, [pc, #160]	; (3c50 <NOROM_RFCRfTrimRead+0x114>)
    3bb0:	681b      	ldr	r3, [r3, #0]
    3bb2:	604b      	str	r3, [r1, #4]
    3bb4:	4b27      	ldr	r3, [pc, #156]	; (3c54 <NOROM_RFCRfTrimRead+0x118>)
    3bb6:	681b      	ldr	r3, [r3, #0]
    3bb8:	608b      	str	r3, [r1, #8]
    3bba:	4b27      	ldr	r3, [pc, #156]	; (3c58 <NOROM_RFCRfTrimRead+0x11c>)
    3bbc:	681b      	ldr	r3, [r3, #0]
    3bbe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bc2:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3bc6:	e032      	b.n	3c2e <NOROM_RFCRfTrimRead+0xf2>
    3bc8:	4b24      	ldr	r3, [pc, #144]	; (3c5c <NOROM_RFCRfTrimRead+0x120>)
    3bca:	681b      	ldr	r3, [r3, #0]
    3bcc:	604b      	str	r3, [r1, #4]
    3bce:	4b24      	ldr	r3, [pc, #144]	; (3c60 <NOROM_RFCRfTrimRead+0x124>)
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	608b      	str	r3, [r1, #8]
    3bd4:	4b23      	ldr	r3, [pc, #140]	; (3c64 <NOROM_RFCRfTrimRead+0x128>)
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bdc:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3be0:	e025      	b.n	3c2e <NOROM_RFCRfTrimRead+0xf2>
    3be2:	4b21      	ldr	r3, [pc, #132]	; (3c68 <NOROM_RFCRfTrimRead+0x12c>)
    3be4:	681b      	ldr	r3, [r3, #0]
    3be6:	604b      	str	r3, [r1, #4]
    3be8:	4b20      	ldr	r3, [pc, #128]	; (3c6c <NOROM_RFCRfTrimRead+0x130>)
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	608b      	str	r3, [r1, #8]
    3bee:	4b20      	ldr	r3, [pc, #128]	; (3c70 <NOROM_RFCRfTrimRead+0x134>)
    3bf0:	681b      	ldr	r3, [r3, #0]
    3bf2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bf6:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3bfa:	e018      	b.n	3c2e <NOROM_RFCRfTrimRead+0xf2>
    3bfc:	4b1d      	ldr	r3, [pc, #116]	; (3c74 <NOROM_RFCRfTrimRead+0x138>)
    3bfe:	681b      	ldr	r3, [r3, #0]
    3c00:	604b      	str	r3, [r1, #4]
    3c02:	4b1d      	ldr	r3, [pc, #116]	; (3c78 <NOROM_RFCRfTrimRead+0x13c>)
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	608b      	str	r3, [r1, #8]
    3c08:	4b1c      	ldr	r3, [pc, #112]	; (3c7c <NOROM_RFCRfTrimRead+0x140>)
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3c14:	e00b      	b.n	3c2e <NOROM_RFCRfTrimRead+0xf2>
    3c16:	4b1a      	ldr	r3, [pc, #104]	; (3c80 <NOROM_RFCRfTrimRead+0x144>)
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	604b      	str	r3, [r1, #4]
    3c1c:	4b19      	ldr	r3, [pc, #100]	; (3c84 <NOROM_RFCRfTrimRead+0x148>)
    3c1e:	681b      	ldr	r3, [r3, #0]
    3c20:	608b      	str	r3, [r1, #8]
    3c22:	4b19      	ldr	r3, [pc, #100]	; (3c88 <NOROM_RFCRfTrimRead+0x14c>)
    3c24:	681b      	ldr	r3, [r3, #0]
    3c26:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c2e:	60cb      	str	r3, [r1, #12]
    3c30:	4770      	bx	lr
    3c32:	bf00      	nop
    3c34:	5000134c 	andpl	r1, r0, ip, asr #6
    3c38:	500010c8 	andpl	r1, r0, r8, asr #1
    3c3c:	500010e0 	andpl	r1, r0, r0, ror #1
    3c40:	500010f8 	strdpl	r1, [r0], -r8
    3c44:	500010d0 	ldrdpl	r1, [r0], -r0
    3c48:	500010e8 	andpl	r1, r0, r8, ror #1
    3c4c:	50001100 	andpl	r1, r0, r0, lsl #2
    3c50:	500010c4 	andpl	r1, r0, r4, asr #1
    3c54:	500010dc 	ldrdpl	r1, [r0], -ip
    3c58:	500010f4 	strdpl	r1, [r0], -r4
    3c5c:	500010cc 	andpl	r1, r0, ip, asr #1
    3c60:	500010e4 	andpl	r1, r0, r4, ror #1
    3c64:	500010fc 	strdpl	r1, [r0], -ip
    3c68:	500010d4 	ldrdpl	r1, [r0], -r4
    3c6c:	500010ec 	andpl	r1, r0, ip, ror #1
    3c70:	50001104 	andpl	r1, r0, r4, lsl #2
    3c74:	500010d8 	ldrdpl	r1, [r0], -r8
    3c78:	500010f0 	strdpl	r1, [r0], -r0
    3c7c:	50001108 	andpl	r1, r0, r8, lsl #2
    3c80:	50001354 	andpl	r1, r0, r4, asr r3
    3c84:	50001358 	andpl	r1, r0, r8, asr r3
    3c88:	50001380 	andpl	r1, r0, r0, lsl #7

00003c8c <NOROM_RFCRTrim>:
    3c8c:	f643 0206 	movw	r2, #14342	; 0x3806
    3c90:	b570      	push	{r4, r5, r6, lr}
    3c92:	8803      	ldrh	r3, [r0, #0]
    3c94:	4293      	cmp	r3, r2
    3c96:	d00a      	beq.n	3cae <NOROM_RFCRTrim+0x22>
    3c98:	f643 0207 	movw	r2, #14343	; 0x3807
    3c9c:	4293      	cmp	r3, r2
    3c9e:	d009      	beq.n	3cb4 <NOROM_RFCRTrim+0x28>
    3ca0:	f640 0202 	movw	r2, #2050	; 0x802
    3ca4:	4293      	cmp	r3, r2
    3ca6:	d16b      	bne.n	3d80 <NOROM_RFCRTrim+0xf4>
    3ca8:	7bc1      	ldrb	r1, [r0, #15]
    3caa:	6943      	ldr	r3, [r0, #20]
    3cac:	e005      	b.n	3cba <NOROM_RFCRTrim+0x2e>
    3cae:	69c3      	ldr	r3, [r0, #28]
    3cb0:	2102      	movs	r1, #2
    3cb2:	e002      	b.n	3cba <NOROM_RFCRTrim+0x2e>
    3cb4:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    3cb8:	69c3      	ldr	r3, [r0, #28]
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d060      	beq.n	3d80 <NOROM_RFCRTrim+0xf4>
    3cbe:	f103 0414 	add.w	r4, r3, #20
    3cc2:	f244 0538 	movw	r5, #16440	; 0x4038
    3cc6:	681a      	ldr	r2, [r3, #0]
    3cc8:	4618      	mov	r0, r3
    3cca:	b296      	uxth	r6, r2
    3ccc:	42ae      	cmp	r6, r5
    3cce:	f103 0304 	add.w	r3, r3, #4
    3cd2:	d103      	bne.n	3cdc <NOROM_RFCRTrim+0x50>
    3cd4:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3cd8:	b91c      	cbnz	r4, 3ce2 <NOROM_RFCRTrim+0x56>
    3cda:	bd70      	pop	{r4, r5, r6, pc}
    3cdc:	42a3      	cmp	r3, r4
    3cde:	d1f0      	bne.n	3cc2 <NOROM_RFCRTrim+0x36>
    3ce0:	bd70      	pop	{r4, r5, r6, pc}
    3ce2:	290a      	cmp	r1, #10
    3ce4:	d01d      	beq.n	3d22 <NOROM_RFCRTrim+0x96>
    3ce6:	dc06      	bgt.n	3cf6 <NOROM_RFCRTrim+0x6a>
    3ce8:	2905      	cmp	r1, #5
    3cea:	d013      	beq.n	3d14 <NOROM_RFCRTrim+0x88>
    3cec:	2906      	cmp	r1, #6
    3cee:	d016      	beq.n	3d1e <NOROM_RFCRTrim+0x92>
    3cf0:	2902      	cmp	r1, #2
    3cf2:	d11f      	bne.n	3d34 <NOROM_RFCRTrim+0xa8>
    3cf4:	e007      	b.n	3d06 <NOROM_RFCRTrim+0x7a>
    3cf6:	290f      	cmp	r1, #15
    3cf8:	d015      	beq.n	3d26 <NOROM_RFCRTrim+0x9a>
    3cfa:	291e      	cmp	r1, #30
    3cfc:	d015      	beq.n	3d2a <NOROM_RFCRTrim+0x9e>
    3cfe:	290c      	cmp	r1, #12
    3d00:	d118      	bne.n	3d34 <NOROM_RFCRTrim+0xa8>
    3d02:	4b20      	ldr	r3, [pc, #128]	; (3d84 <NOROM_RFCRTrim+0xf8>)
    3d04:	e012      	b.n	3d2c <NOROM_RFCRTrim+0xa0>
    3d06:	4b20      	ldr	r3, [pc, #128]	; (3d88 <NOROM_RFCRTrim+0xfc>)
    3d08:	681b      	ldr	r3, [r3, #0]
    3d0a:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3d0e:	2b0f      	cmp	r3, #15
    3d10:	d12a      	bne.n	3d68 <NOROM_RFCRTrim+0xdc>
    3d12:	e023      	b.n	3d5c <NOROM_RFCRTrim+0xd0>
    3d14:	4b1d      	ldr	r3, [pc, #116]	; (3d8c <NOROM_RFCRTrim+0x100>)
    3d16:	681b      	ldr	r3, [r3, #0]
    3d18:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3d1c:	e02c      	b.n	3d78 <NOROM_RFCRTrim+0xec>
    3d1e:	4b1c      	ldr	r3, [pc, #112]	; (3d90 <NOROM_RFCRTrim+0x104>)
    3d20:	e004      	b.n	3d2c <NOROM_RFCRTrim+0xa0>
    3d22:	4b1c      	ldr	r3, [pc, #112]	; (3d94 <NOROM_RFCRTrim+0x108>)
    3d24:	e002      	b.n	3d2c <NOROM_RFCRTrim+0xa0>
    3d26:	4b1c      	ldr	r3, [pc, #112]	; (3d98 <NOROM_RFCRTrim+0x10c>)
    3d28:	e000      	b.n	3d2c <NOROM_RFCRTrim+0xa0>
    3d2a:	4b1c      	ldr	r3, [pc, #112]	; (3d9c <NOROM_RFCRTrim+0x110>)
    3d2c:	681b      	ldr	r3, [r3, #0]
    3d2e:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3d32:	e021      	b.n	3d78 <NOROM_RFCRTrim+0xec>
    3d34:	4b14      	ldr	r3, [pc, #80]	; (3d88 <NOROM_RFCRTrim+0xfc>)
    3d36:	681b      	ldr	r3, [r3, #0]
    3d38:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3d3c:	2b0f      	cmp	r3, #15
    3d3e:	d113      	bne.n	3d68 <NOROM_RFCRTrim+0xdc>
    3d40:	3905      	subs	r1, #5
    3d42:	2919      	cmp	r1, #25
    3d44:	d80a      	bhi.n	3d5c <NOROM_RFCRTrim+0xd0>
    3d46:	2301      	movs	r3, #1
    3d48:	fa03 f101 	lsl.w	r1, r3, r1
    3d4c:	4b14      	ldr	r3, [pc, #80]	; (3da0 <NOROM_RFCRTrim+0x114>)
    3d4e:	400b      	ands	r3, r1
    3d50:	b123      	cbz	r3, 3d5c <NOROM_RFCRTrim+0xd0>
    3d52:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3d56:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3d5a:	e003      	b.n	3d64 <NOROM_RFCRTrim+0xd8>
    3d5c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3d60:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3d64:	6002      	str	r2, [r0, #0]
    3d66:	bd70      	pop	{r4, r5, r6, pc}
    3d68:	429c      	cmp	r4, r3
    3d6a:	d209      	bcs.n	3d80 <NOROM_RFCRTrim+0xf4>
    3d6c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3d70:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3d74:	6003      	str	r3, [r0, #0]
    3d76:	bd70      	pop	{r4, r5, r6, pc}
    3d78:	2b0f      	cmp	r3, #15
    3d7a:	d1f5      	bne.n	3d68 <NOROM_RFCRTrim+0xdc>
    3d7c:	3905      	subs	r1, #5
    3d7e:	e7e2      	b.n	3d46 <NOROM_RFCRTrim+0xba>
    3d80:	bd70      	pop	{r4, r5, r6, pc}
    3d82:	bf00      	nop
    3d84:	50001100 	andpl	r1, r0, r0, lsl #2
    3d88:	50001380 	andpl	r1, r0, r0, lsl #7
    3d8c:	50001320 	andpl	r1, r0, r0, lsr #6
    3d90:	500010f8 	strdpl	r1, [r0], -r8
    3d94:	500010fc 	strdpl	r1, [r0], -ip
    3d98:	50001104 	andpl	r1, r0, r4, lsl #2
    3d9c:	50001108 	andpl	r1, r0, r8, lsl #2
    3da0:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

00003da4 <NOROM_RFCRfTrimSet>:
    3da4:	4603      	mov	r3, r0
    3da6:	b530      	push	{r4, r5, lr}
    3da8:	4c05      	ldr	r4, [pc, #20]	; (3dc0 <NOROM_RFCRfTrimSet+0x1c>)
    3daa:	f100 0510 	add.w	r5, r0, #16
    3dae:	4622      	mov	r2, r4
    3db0:	6818      	ldr	r0, [r3, #0]
    3db2:	6859      	ldr	r1, [r3, #4]
    3db4:	3308      	adds	r3, #8
    3db6:	c203      	stmia	r2!, {r0, r1}
    3db8:	42ab      	cmp	r3, r5
    3dba:	4614      	mov	r4, r2
    3dbc:	d1f7      	bne.n	3dae <NOROM_RFCRfTrimSet+0xa>
    3dbe:	bd30      	pop	{r4, r5, pc}
    3dc0:	21000018 	tstcs	r0, r8, lsl r0

00003dc4 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3dc4:	4b04      	ldr	r3, [pc, #16]	; (3dd8 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3dc6:	b128      	cbz	r0, 3dd4 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3dc8:	4a04      	ldr	r2, [pc, #16]	; (3ddc <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    3dca:	2100      	movs	r1, #0
    3dcc:	7011      	strb	r1, [r2, #0]
    3dce:	2220      	movs	r2, #32
    3dd0:	701a      	strb	r2, [r3, #0]
    3dd2:	4770      	bx	lr
    3dd4:	7018      	strb	r0, [r3, #0]
    3dd6:	4770      	bx	lr
    3dd8:	40086202 	andmi	r6, r8, r2, lsl #4
    3ddc:	40086200 	andmi	r6, r8, r0, lsl #4

00003de0 <TrimAfterColdResetWakeupFromShutDown>:
    3de0:	b538      	push	{r3, r4, r5, lr}
    3de2:	4605      	mov	r5, r0
    3de4:	4b26      	ldr	r3, [pc, #152]	; (3e80 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3de6:	2201      	movs	r2, #1
    3de8:	601a      	str	r2, [r3, #0]
    3dea:	4b26      	ldr	r3, [pc, #152]	; (3e84 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3dec:	681b      	ldr	r3, [r3, #0]
    3dee:	2b00      	cmp	r3, #0
    3df0:	d0fb      	beq.n	3dea <TrimAfterColdResetWakeupFromShutDown+0xa>
    3df2:	4b25      	ldr	r3, [pc, #148]	; (3e88 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3df4:	22c0      	movs	r2, #192	; 0xc0
    3df6:	601a      	str	r2, [r3, #0]
    3df8:	4b24      	ldr	r3, [pc, #144]	; (3e8c <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3dfa:	681b      	ldr	r3, [r3, #0]
    3dfc:	079b      	lsls	r3, r3, #30
    3dfe:	bf5f      	itttt	pl
    3e00:	4b23      	ldrpl	r3, [pc, #140]	; (3e90 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3e02:	4a24      	ldrpl	r2, [pc, #144]	; (3e94 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3e04:	681b      	ldrpl	r3, [r3, #0]
    3e06:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3e0a:	bf5c      	itt	pl
    3e0c:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3e10:	7013      	strbpl	r3, [r2, #0]
    3e12:	4b21      	ldr	r3, [pc, #132]	; (3e98 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3e14:	2200      	movs	r2, #0
    3e16:	601a      	str	r2, [r3, #0]
    3e18:	4b20      	ldr	r3, [pc, #128]	; (3e9c <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3e1a:	681c      	ldr	r4, [r3, #0]
    3e1c:	4620      	mov	r0, r4
    3e1e:	f000 f8d9 	bl	3fd4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3e22:	4628      	mov	r0, r5
    3e24:	4621      	mov	r1, r4
    3e26:	f000 fa0d 	bl	4244 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3e2a:	f240 221d 	movw	r2, #541	; 0x21d
    3e2e:	4b1c      	ldr	r3, [pc, #112]	; (3ea0 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3e30:	681b      	ldr	r3, [r3, #0]
    3e32:	b29b      	uxth	r3, r3
    3e34:	4293      	cmp	r3, r2
    3e36:	d814      	bhi.n	3e62 <TrimAfterColdResetWakeupFromShutDown+0x82>
    3e38:	4a1a      	ldr	r2, [pc, #104]	; (3ea4 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3e3a:	6813      	ldr	r3, [r2, #0]
    3e3c:	6812      	ldr	r2, [r2, #0]
    3e3e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3e42:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3e46:	b103      	cbz	r3, 3e4a <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3e48:	3b01      	subs	r3, #1
    3e4a:	1f91      	subs	r1, r2, #6
    3e4c:	2901      	cmp	r1, #1
    3e4e:	bf86      	itte	hi
    3e50:	3202      	addhi	r2, #2
    3e52:	f002 020f 	andhi.w	r2, r2, #15
    3e56:	2207      	movls	r2, #7
    3e58:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3e5c:	4a12      	ldr	r2, [pc, #72]	; (3ea8 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3e5e:	b2db      	uxtb	r3, r3
    3e60:	7013      	strb	r3, [r2, #0]
    3e62:	4620      	mov	r0, r4
    3e64:	f000 fabc 	bl	43e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3e68:	4b10      	ldr	r3, [pc, #64]	; (3eac <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3e6a:	2002      	movs	r0, #2
    3e6c:	681b      	ldr	r3, [r3, #0]
    3e6e:	68db      	ldr	r3, [r3, #12]
    3e70:	4798      	blx	r3
    3e72:	4b05      	ldr	r3, [pc, #20]	; (3e88 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3e74:	2240      	movs	r2, #64	; 0x40
    3e76:	601a      	str	r2, [r3, #0]
    3e78:	4b0d      	ldr	r3, [pc, #52]	; (3eb0 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    3e7a:	2201      	movs	r2, #1
    3e7c:	601a      	str	r2, [r3, #0]
    3e7e:	bd38      	pop	{r3, r4, r5, pc}
    3e80:	40091010 	andmi	r1, r9, r0, lsl r0
    3e84:	43220294 			; <UNDEFINED> instruction: 0x43220294
    3e88:	400c6000 	andmi	r6, ip, r0
    3e8c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3e90:	50003fac 	andpl	r3, r0, ip, lsr #31
    3e94:	40086256 	andmi	r6, r8, r6, asr r2
    3e98:	40091040 	andmi	r1, r9, r0, asr #32
    3e9c:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3ea0:	50001314 	andpl	r1, r0, r4, lsl r3
    3ea4:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    3ea8:	40086002 	andmi	r6, r8, r2
    3eac:	100001a0 	andne	r0, r0, r0, lsr #3
    3eb0:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00003eb4 <NOROM_SetupTrimDevice>:
    3eb4:	b510      	push	{r4, lr}
    3eb6:	4b1f      	ldr	r3, [pc, #124]	; (3f34 <NOROM_SetupTrimDevice+0x80>)
    3eb8:	681c      	ldr	r4, [r3, #0]
    3eba:	1c63      	adds	r3, r4, #1
    3ebc:	bf08      	it	eq
    3ebe:	2400      	moveq	r4, #0
    3ec0:	f000 fcde 	bl	4880 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3ec4:	4b1c      	ldr	r3, [pc, #112]	; (3f38 <NOROM_SetupTrimDevice+0x84>)
    3ec6:	2200      	movs	r2, #0
    3ec8:	601a      	str	r2, [r3, #0]
    3eca:	4a1c      	ldr	r2, [pc, #112]	; (3f3c <NOROM_SetupTrimDevice+0x88>)
    3ecc:	2301      	movs	r3, #1
    3ece:	6013      	str	r3, [r2, #0]
    3ed0:	4a1b      	ldr	r2, [pc, #108]	; (3f40 <NOROM_SetupTrimDevice+0x8c>)
    3ed2:	6013      	str	r3, [r2, #0]
    3ed4:	f000 fa3e 	bl	4354 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3ed8:	4b1a      	ldr	r3, [pc, #104]	; (3f44 <NOROM_SetupTrimDevice+0x90>)
    3eda:	681b      	ldr	r3, [r3, #0]
    3edc:	b123      	cbz	r3, 3ee8 <NOROM_SetupTrimDevice+0x34>
    3ede:	4b1a      	ldr	r3, [pc, #104]	; (3f48 <NOROM_SetupTrimDevice+0x94>)
    3ee0:	4620      	mov	r0, r4
    3ee2:	681b      	ldr	r3, [r3, #0]
    3ee4:	f7ff ff7c 	bl	3de0 <TrimAfterColdResetWakeupFromShutDown>
    3ee8:	4b18      	ldr	r3, [pc, #96]	; (3f4c <NOROM_SetupTrimDevice+0x98>)
    3eea:	2200      	movs	r2, #0
    3eec:	601a      	str	r2, [r3, #0]
    3eee:	4a18      	ldr	r2, [pc, #96]	; (3f50 <NOROM_SetupTrimDevice+0x9c>)
    3ef0:	6813      	ldr	r3, [r2, #0]
    3ef2:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    3ef6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3efa:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f02:	6013      	str	r3, [r2, #0]
    3f04:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3f08:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3f0c:	6813      	ldr	r3, [r2, #0]
    3f0e:	f3c3 3301 	ubfx	r3, r3, #12, #2
    3f12:	2b01      	cmp	r3, #1
    3f14:	bf01      	itttt	eq
    3f16:	6813      	ldreq	r3, [r2, #0]
    3f18:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3f1c:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3f20:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    3f24:	bf04      	itt	eq
    3f26:	6011      	streq	r1, [r2, #0]
    3f28:	6013      	streq	r3, [r2, #0]
    3f2a:	4b0a      	ldr	r3, [pc, #40]	; (3f54 <NOROM_SetupTrimDevice+0xa0>)
    3f2c:	681b      	ldr	r3, [r3, #0]
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d1fb      	bne.n	3f2a <NOROM_SetupTrimDevice+0x76>
    3f32:	bd10      	pop	{r4, pc}
    3f34:	5000131c 	andpl	r1, r0, ip, lsl r3
    3f38:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3f3c:	400c605c 	andmi	r6, ip, ip, asr r0
    3f40:	43042208 	movwmi	r2, #16904	; 0x4208
    3f44:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3f48:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3f4c:	4008218c 	andmi	r2, r8, ip, lsl #3
    3f50:	40032048 	andmi	r2, r3, r8, asr #32
    3f54:	4268000c 	rsbmi	r0, r8, #12

00003f58 <NOROM_SetupSetVddrLevel>:
    3f58:	b530      	push	{r4, r5, lr}
    3f5a:	4b19      	ldr	r3, [pc, #100]	; (3fc0 <NOROM_SetupSetVddrLevel+0x68>)
    3f5c:	681a      	ldr	r2, [r3, #0]
    3f5e:	4b19      	ldr	r3, [pc, #100]	; (3fc4 <NOROM_SetupSetVddrLevel+0x6c>)
    3f60:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3f64:	781b      	ldrb	r3, [r3, #0]
    3f66:	2a15      	cmp	r2, #21
    3f68:	f003 031f 	and.w	r3, r3, #31
    3f6c:	bf88      	it	hi
    3f6e:	3a20      	subhi	r2, #32
    3f70:	2b15      	cmp	r3, #21
    3f72:	bf88      	it	hi
    3f74:	3b20      	subhi	r3, #32
    3f76:	4293      	cmp	r3, r2
    3f78:	d020      	beq.n	3fbc <NOROM_SetupSetVddrLevel+0x64>
    3f7a:	4913      	ldr	r1, [pc, #76]	; (3fc8 <NOROM_SetupSetVddrLevel+0x70>)
    3f7c:	2000      	movs	r0, #0
    3f7e:	6008      	str	r0, [r1, #0]
    3f80:	4608      	mov	r0, r1
    3f82:	1ad1      	subs	r1, r2, r3
    3f84:	2902      	cmp	r1, #2
    3f86:	dc05      	bgt.n	3f94 <NOROM_SetupSetVddrLevel+0x3c>
    3f88:	f06f 0401 	mvn.w	r4, #1
    3f8c:	42a1      	cmp	r1, r4
    3f8e:	bfb8      	it	lt
    3f90:	4621      	movlt	r1, r4
    3f92:	e000      	b.n	3f96 <NOROM_SetupSetVddrLevel+0x3e>
    3f94:	2102      	movs	r1, #2
    3f96:	440b      	add	r3, r1
    3f98:	490c      	ldr	r1, [pc, #48]	; (3fcc <NOROM_SetupSetVddrLevel+0x74>)
    3f9a:	4d0d      	ldr	r5, [pc, #52]	; (3fd0 <NOROM_SetupSetVddrLevel+0x78>)
    3f9c:	680c      	ldr	r4, [r1, #0]
    3f9e:	f003 041f 	and.w	r4, r3, #31
    3fa2:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    3fa6:	802c      	strh	r4, [r5, #0]
    3fa8:	4293      	cmp	r3, r2
    3faa:	f04f 0401 	mov.w	r4, #1
    3fae:	600c      	str	r4, [r1, #0]
    3fb0:	d1e7      	bne.n	3f82 <NOROM_SetupSetVddrLevel+0x2a>
    3fb2:	680b      	ldr	r3, [r1, #0]
    3fb4:	600c      	str	r4, [r1, #0]
    3fb6:	680b      	ldr	r3, [r1, #0]
    3fb8:	6004      	str	r4, [r0, #0]
    3fba:	680b      	ldr	r3, [r1, #0]
    3fbc:	bd30      	pop	{r4, r5, pc}
    3fbe:	bf00      	nop
    3fc0:	50001388 	andpl	r1, r0, r8, lsl #7
    3fc4:	40086206 	andmi	r6, r8, r6, lsl #4
    3fc8:	43200098 			; <UNDEFINED> instruction: 0x43200098
    3fcc:	4009202c 	andmi	r2, r9, ip, lsr #32
    3fd0:	4008626c 	andmi	r6, r8, ip, ror #4

00003fd4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    3fd4:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    3fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3fdc:	b510      	push	{r4, lr}
    3fde:	4604      	mov	r4, r0
    3fe0:	d10f      	bne.n	4002 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    3fe2:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    3fe6:	4a1e      	ldr	r2, [pc, #120]	; (4060 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    3fe8:	2380      	movs	r3, #128	; 0x80
    3fea:	7013      	strb	r3, [r2, #0]
    3fec:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    3ff0:	f802 3c10 	strb.w	r3, [r2, #-16]
    3ff4:	f7ff ffb0 	bl	3f58 <NOROM_SetupSetVddrLevel>
    3ff8:	4b1a      	ldr	r3, [pc, #104]	; (4064 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    3ffa:	681b      	ldr	r3, [r3, #0]
    3ffc:	f3c3 2304 	ubfx	r3, r3, #8, #5
    4000:	e003      	b.n	400a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    4002:	4b19      	ldr	r3, [pc, #100]	; (4068 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    4004:	681b      	ldr	r3, [r3, #0]
    4006:	f3c3 6304 	ubfx	r3, r3, #24, #5
    400a:	2b15      	cmp	r3, #21
    400c:	bf88      	it	hi
    400e:	3b20      	subhi	r3, #32
    4010:	eb03 7324 	add.w	r3, r3, r4, asr #28
    4014:	3301      	adds	r3, #1
    4016:	2b15      	cmp	r3, #21
    4018:	dc05      	bgt.n	4026 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    401a:	f06f 0209 	mvn.w	r2, #9
    401e:	4293      	cmp	r3, r2
    4020:	bfb8      	it	lt
    4022:	4613      	movlt	r3, r2
    4024:	e000      	b.n	4028 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    4026:	2315      	movs	r3, #21
    4028:	4a10      	ldr	r2, [pc, #64]	; (406c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    402a:	f003 031f 	and.w	r3, r3, #31
    402e:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    4032:	8013      	strh	r3, [r2, #0]
    4034:	4b0e      	ldr	r3, [pc, #56]	; (4070 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    4036:	681b      	ldr	r3, [r3, #0]
    4038:	f013 0302 	ands.w	r3, r3, #2
    403c:	bf0a      	itet	eq
    403e:	4a0d      	ldreq	r2, [pc, #52]	; (4074 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    4040:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    4044:	6013      	streq	r3, [r2, #0]
    4046:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    404a:	4a0b      	ldr	r2, [pc, #44]	; (4078 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    404c:	f083 0301 	eor.w	r3, r3, #1
    4050:	6013      	str	r3, [r2, #0]
    4052:	f3c4 6480 	ubfx	r4, r4, #26, #1
    4056:	4b09      	ldr	r3, [pc, #36]	; (407c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    4058:	f084 0401 	eor.w	r4, r4, #1
    405c:	601c      	str	r4, [r3, #0]
    405e:	bd10      	pop	{r4, pc}
    4060:	40086225 	andmi	r6, r8, r5, lsr #4
    4064:	50001388 	andpl	r1, r0, r8, lsl #7
    4068:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    406c:	4008626e 	andmi	r6, r8, lr, ror #4
    4070:	40090000 	andmi	r0, r9, r0
    4074:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    4078:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    407c:	43200008 			; <UNDEFINED> instruction: 0x43200008

00004080 <NOROM_SetupGetTrimForAnabypassValue1>:
    4080:	4b15      	ldr	r3, [pc, #84]	; (40d8 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    4082:	0381      	lsls	r1, r0, #14
    4084:	681b      	ldr	r3, [r3, #0]
    4086:	f3c3 6283 	ubfx	r2, r3, #26, #4
    408a:	f3c3 238f 	ubfx	r3, r3, #10, #16
    408e:	d41f      	bmi.n	40d0 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    4090:	f340 2007 	sbfx	r0, r0, #8, #8
    4094:	2800      	cmp	r0, #0
    4096:	da19      	bge.n	40cc <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    4098:	085b      	lsrs	r3, r3, #1
    409a:	d105      	bne.n	40a8 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    409c:	0852      	lsrs	r2, r2, #1
    409e:	bf06      	itte	eq
    40a0:	2301      	moveq	r3, #1
    40a2:	461a      	moveq	r2, r3
    40a4:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    40a8:	3001      	adds	r0, #1
    40aa:	e7f3      	b.n	4094 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    40ac:	005b      	lsls	r3, r3, #1
    40ae:	f043 0301 	orr.w	r3, r3, #1
    40b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    40b6:	d308      	bcc.n	40ca <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    40b8:	0052      	lsls	r2, r2, #1
    40ba:	f042 0201 	orr.w	r2, r2, #1
    40be:	2a0f      	cmp	r2, #15
    40c0:	bf86      	itte	hi
    40c2:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    40c6:	220f      	movhi	r2, #15
    40c8:	2301      	movls	r3, #1
    40ca:	3801      	subs	r0, #1
    40cc:	2800      	cmp	r0, #0
    40ce:	d1ed      	bne.n	40ac <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    40d0:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    40d4:	4770      	bx	lr
    40d6:	bf00      	nop
    40d8:	50001350 	andpl	r1, r0, r0, asr r3

000040dc <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    40dc:	4a04      	ldr	r2, [pc, #16]	; (40f0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    40de:	6813      	ldr	r3, [r2, #0]
    40e0:	6810      	ldr	r0, [r2, #0]
    40e2:	f3c3 0387 	ubfx	r3, r3, #2, #8
    40e6:	f000 0003 	and.w	r0, r0, #3
    40ea:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    40ee:	4770      	bx	lr
    40f0:	50001350 	andpl	r1, r0, r0, asr r3

000040f4 <NOROM_SetupGetTrimForAmpcompTh2>:
    40f4:	4b02      	ldr	r3, [pc, #8]	; (4100 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    40f6:	6818      	ldr	r0, [r3, #0]
    40f8:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    40fc:	4770      	bx	lr
    40fe:	bf00      	nop
    4100:	50001374 	andpl	r1, r0, r4, ror r3

00004104 <NOROM_SetupGetTrimForAmpcompTh1>:
    4104:	4b03      	ldr	r3, [pc, #12]	; (4114 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    4106:	6818      	ldr	r0, [r3, #0]
    4108:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    410c:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    4110:	4770      	bx	lr
    4112:	bf00      	nop
    4114:	50001370 	andpl	r1, r0, r0, ror r3

00004118 <NOROM_SetupGetTrimForAmpcompCtrl>:
    4118:	b570      	push	{r4, r5, r6, lr}
    411a:	4b15      	ldr	r3, [pc, #84]	; (4170 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    411c:	4915      	ldr	r1, [pc, #84]	; (4174 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    411e:	681c      	ldr	r4, [r3, #0]
    4120:	6809      	ldr	r1, [r1, #0]
    4122:	f3c4 5203 	ubfx	r2, r4, #20, #4
    4126:	f011 0501 	ands.w	r5, r1, #1
    412a:	f3c4 4303 	ubfx	r3, r4, #16, #4
    412e:	d113      	bne.n	4158 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    4130:	4911      	ldr	r1, [pc, #68]	; (4178 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    4132:	6809      	ldr	r1, [r1, #0]
    4134:	f341 2603 	sbfx	r6, r1, #8, #4
    4138:	18b2      	adds	r2, r6, r2
    413a:	d403      	bmi.n	4144 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    413c:	2a0f      	cmp	r2, #15
    413e:	bfa8      	it	ge
    4140:	220f      	movge	r2, #15
    4142:	e000      	b.n	4146 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    4144:	462a      	mov	r2, r5
    4146:	f341 3103 	sbfx	r1, r1, #12, #4
    414a:	18cb      	adds	r3, r1, r3
    414c:	d403      	bmi.n	4156 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    414e:	2b0f      	cmp	r3, #15
    4150:	bfa8      	it	ge
    4152:	230f      	movge	r3, #15
    4154:	e000      	b.n	4158 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    4156:	2300      	movs	r3, #0
    4158:	b2a1      	uxth	r1, r4
    415a:	2821      	cmp	r0, #33	; 0x21
    415c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    4160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    4164:	bf84      	itt	hi
    4166:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    416a:	4323      	orrhi	r3, r4
    416c:	4618      	mov	r0, r3
    416e:	bd70      	pop	{r4, r5, r6, pc}
    4170:	50001378 	andpl	r1, r0, r8, ror r3
    4174:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4178:	50003fac 	andpl	r3, r0, ip, lsr #31

0000417c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    417c:	281f      	cmp	r0, #31
    417e:	bf83      	ittte	hi
    4180:	4b02      	ldrhi	r3, [pc, #8]	; (418c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    4182:	6818      	ldrhi	r0, [r3, #0]
    4184:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    4188:	2000      	movls	r0, #0
    418a:	4770      	bx	lr
    418c:	50001398 	mulpl	r0, r8, r3

00004190 <NOROM_SetupGetTrimForAdcShModeEn>:
    4190:	2821      	cmp	r0, #33	; 0x21
    4192:	bf83      	ittte	hi
    4194:	4b02      	ldrhi	r3, [pc, #8]	; (41a0 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    4196:	6818      	ldrhi	r0, [r3, #0]
    4198:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    419c:	2001      	movls	r0, #1
    419e:	4770      	bx	lr
    41a0:	5000138c 	andpl	r1, r0, ip, lsl #7

000041a4 <NOROM_SetupGetTrimForAdcShVbufEn>:
    41a4:	2821      	cmp	r0, #33	; 0x21
    41a6:	bf83      	ittte	hi
    41a8:	4b02      	ldrhi	r3, [pc, #8]	; (41b4 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    41aa:	6818      	ldrhi	r0, [r3, #0]
    41ac:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    41b0:	2001      	movls	r0, #1
    41b2:	4770      	bx	lr
    41b4:	5000138c 	andpl	r1, r0, ip, lsl #7

000041b8 <NOROM_SetupGetTrimForXoscHfCtl>:
    41b8:	281f      	cmp	r0, #31
    41ba:	bf81      	itttt	hi
    41bc:	4b07      	ldrhi	r3, [pc, #28]	; (41dc <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    41be:	681b      	ldrhi	r3, [r3, #0]
    41c0:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    41c4:	0080      	lslhi	r0, r0, #2
    41c6:	bf81      	itttt	hi
    41c8:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    41cc:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    41d0:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    41d4:	4318      	orrhi	r0, r3
    41d6:	bf98      	it	ls
    41d8:	2000      	movls	r0, #0
    41da:	4770      	bx	lr
    41dc:	50001398 	mulpl	r0, r8, r3

000041e0 <NOROM_SetupGetTrimForXoscHfFastStart>:
    41e0:	4b02      	ldr	r3, [pc, #8]	; (41ec <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    41e2:	6818      	ldr	r0, [r3, #0]
    41e4:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    41e8:	4770      	bx	lr
    41ea:	bf00      	nop
    41ec:	5000138c 	andpl	r1, r0, ip, lsl #7

000041f0 <NOROM_SetupGetTrimForRadcExtCfg>:
    41f0:	281f      	cmp	r0, #31
    41f2:	bf81      	itttt	hi
    41f4:	4b07      	ldrhi	r3, [pc, #28]	; (4214 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    41f6:	681b      	ldrhi	r3, [r3, #0]
    41f8:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    41fc:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    4200:	bf81      	itttt	hi
    4202:	0400      	lslhi	r0, r0, #16
    4204:	031b      	lslhi	r3, r3, #12
    4206:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    420a:	b29b      	uxthhi	r3, r3
    420c:	bf8c      	ite	hi
    420e:	4318      	orrhi	r0, r3
    4210:	4801      	ldrls	r0, [pc, #4]	; (4218 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    4212:	4770      	bx	lr
    4214:	50001398 	mulpl	r0, r8, r3
    4218:	403f8000 	eorsmi	r8, pc, r0

0000421c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    421c:	2821      	cmp	r0, #33	; 0x21
    421e:	bf83      	ittte	hi
    4220:	4b02      	ldrhi	r3, [pc, #8]	; (422c <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    4222:	6818      	ldrhi	r0, [r3, #0]
    4224:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    4228:	2000      	movls	r0, #0
    422a:	4770      	bx	lr
    422c:	5000138c 	andpl	r1, r0, ip, lsl #7

00004230 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    4230:	2821      	cmp	r0, #33	; 0x21
    4232:	bf83      	ittte	hi
    4234:	4b02      	ldrhi	r3, [pc, #8]	; (4240 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    4236:	6818      	ldrhi	r0, [r3, #0]
    4238:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    423c:	2000      	movls	r0, #0
    423e:	4770      	bx	lr
    4240:	5000138c 	andpl	r1, r0, ip, lsl #7

00004244 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    4244:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4246:	4605      	mov	r5, r0
    4248:	4608      	mov	r0, r1
    424a:	f7ff ff19 	bl	4080 <NOROM_SetupGetTrimForAnabypassValue1>
    424e:	4c39      	ldr	r4, [pc, #228]	; (4334 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    4250:	4602      	mov	r2, r0
    4252:	2118      	movs	r1, #24
    4254:	4620      	mov	r0, r4
    4256:	f000 fb33 	bl	48c0 <NOROM_DDI32RegWrite>
    425a:	f7ff ff3f 	bl	40dc <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    425e:	4b36      	ldr	r3, [pc, #216]	; (4338 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    4260:	b280      	uxth	r0, r0
    4262:	681b      	ldr	r3, [r3, #0]
    4264:	9000      	str	r0, [sp, #0]
    4266:	685e      	ldr	r6, [r3, #4]
    4268:	4620      	mov	r0, r4
    426a:	212c      	movs	r1, #44	; 0x2c
    426c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4270:	2300      	movs	r3, #0
    4272:	47b0      	blx	r6
    4274:	4b31      	ldr	r3, [pc, #196]	; (433c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    4276:	4620      	mov	r0, r4
    4278:	681a      	ldr	r2, [r3, #0]
    427a:	211c      	movs	r1, #28
    427c:	f3c2 020d 	ubfx	r2, r2, #0, #14
    4280:	f000 fb1e 	bl	48c0 <NOROM_DDI32RegWrite>
    4284:	f7ff ff36 	bl	40f4 <NOROM_SetupGetTrimForAmpcompTh2>
    4288:	2114      	movs	r1, #20
    428a:	4602      	mov	r2, r0
    428c:	4620      	mov	r0, r4
    428e:	f000 fb17 	bl	48c0 <NOROM_DDI32RegWrite>
    4292:	f7ff ff37 	bl	4104 <NOROM_SetupGetTrimForAmpcompTh1>
    4296:	2110      	movs	r1, #16
    4298:	4602      	mov	r2, r0
    429a:	4620      	mov	r0, r4
    429c:	f000 fb10 	bl	48c0 <NOROM_DDI32RegWrite>
    42a0:	4628      	mov	r0, r5
    42a2:	f7ff ff39 	bl	4118 <NOROM_SetupGetTrimForAmpcompCtrl>
    42a6:	210c      	movs	r1, #12
    42a8:	4602      	mov	r2, r0
    42aa:	4620      	mov	r0, r4
    42ac:	f000 fb08 	bl	48c0 <NOROM_DDI32RegWrite>
    42b0:	4628      	mov	r0, r5
    42b2:	f7ff ff6d 	bl	4190 <NOROM_SetupGetTrimForAdcShModeEn>
    42b6:	0040      	lsls	r0, r0, #1
    42b8:	4e21      	ldr	r6, [pc, #132]	; (4340 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    42ba:	f040 0020 	orr.w	r0, r0, #32
    42be:	b2c0      	uxtb	r0, r0
    42c0:	7030      	strb	r0, [r6, #0]
    42c2:	4628      	mov	r0, r5
    42c4:	f7ff ff6e 	bl	41a4 <NOROM_SetupGetTrimForAdcShVbufEn>
    42c8:	f040 0010 	orr.w	r0, r0, #16
    42cc:	b2c0      	uxtb	r0, r0
    42ce:	7030      	strb	r0, [r6, #0]
    42d0:	4628      	mov	r0, r5
    42d2:	f7ff ff71 	bl	41b8 <NOROM_SetupGetTrimForXoscHfCtl>
    42d6:	2128      	movs	r1, #40	; 0x28
    42d8:	4602      	mov	r2, r0
    42da:	4620      	mov	r0, r4
    42dc:	f000 faf0 	bl	48c0 <NOROM_DDI32RegWrite>
    42e0:	4628      	mov	r0, r5
    42e2:	f7ff ff4b 	bl	417c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    42e6:	0040      	lsls	r0, r0, #1
    42e8:	4b16      	ldr	r3, [pc, #88]	; (4344 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    42ea:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    42ee:	b2c0      	uxtb	r0, r0
    42f0:	7018      	strb	r0, [r3, #0]
    42f2:	4628      	mov	r0, r5
    42f4:	f7ff ff92 	bl	421c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    42f8:	00c0      	lsls	r0, r0, #3
    42fa:	4b13      	ldr	r3, [pc, #76]	; (4348 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    42fc:	f060 007f 	orn	r0, r0, #127	; 0x7f
    4300:	b2c0      	uxtb	r0, r0
    4302:	7018      	strb	r0, [r3, #0]
    4304:	4628      	mov	r0, r5
    4306:	f7ff ff93 	bl	4230 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    430a:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    430e:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    4312:	4b0e      	ldr	r3, [pc, #56]	; (434c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    4314:	b280      	uxth	r0, r0
    4316:	8018      	strh	r0, [r3, #0]
    4318:	4628      	mov	r0, r5
    431a:	f7ff ff69 	bl	41f0 <NOROM_SetupGetTrimForRadcExtCfg>
    431e:	2108      	movs	r1, #8
    4320:	4602      	mov	r2, r0
    4322:	4620      	mov	r0, r4
    4324:	f000 facc 	bl	48c0 <NOROM_DDI32RegWrite>
    4328:	4b09      	ldr	r3, [pc, #36]	; (4350 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    432a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    432e:	601a      	str	r2, [r3, #0]
    4330:	b002      	add	sp, #8
    4332:	bd70      	pop	{r4, r5, r6, pc}
    4334:	400ca000 	andmi	sl, ip, r0
    4338:	100001a4 	andne	r0, r0, r4, lsr #3
    433c:	5000137c 	andpl	r1, r0, ip, ror r3
    4340:	400ca149 	andmi	sl, ip, r9, asr #2
    4344:	400ca14c 	andmi	sl, ip, ip, asr #2
    4348:	400ca141 	andmi	sl, ip, r1, asr #2
    434c:	400ca1dc 	ldrdmi	sl, [ip], -ip
    4350:	400ca040 	andmi	sl, ip, r0, asr #32

00004354 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    4354:	b530      	push	{r4, r5, lr}
    4356:	4b14      	ldr	r3, [pc, #80]	; (43a8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    4358:	681b      	ldr	r3, [r3, #0]
    435a:	2b00      	cmp	r3, #0
    435c:	d1fb      	bne.n	4356 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    435e:	4a13      	ldr	r2, [pc, #76]	; (43ac <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    4360:	4913      	ldr	r1, [pc, #76]	; (43b0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    4362:	6813      	ldr	r3, [r2, #0]
    4364:	6809      	ldr	r1, [r1, #0]
    4366:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    436a:	f023 0307 	bic.w	r3, r3, #7
    436e:	f011 0f04 	tst.w	r1, #4
    4372:	4614      	mov	r4, r2
    4374:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    4378:	d003      	beq.n	4382 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    437a:	f043 0305 	orr.w	r3, r3, #5
    437e:	6013      	str	r3, [r2, #0]
    4380:	bd30      	pop	{r4, r5, pc}
    4382:	490c      	ldr	r1, [pc, #48]	; (43b4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    4384:	f043 0004 	orr.w	r0, r3, #4
    4388:	680d      	ldr	r5, [r1, #0]
    438a:	07ad      	lsls	r5, r5, #30
    438c:	d009      	beq.n	43a2 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    438e:	f043 0307 	orr.w	r3, r3, #7
    4392:	6013      	str	r3, [r2, #0]
    4394:	680b      	ldr	r3, [r1, #0]
    4396:	f003 0303 	and.w	r3, r3, #3
    439a:	2b03      	cmp	r3, #3
    439c:	d1fa      	bne.n	4394 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    439e:	6020      	str	r0, [r4, #0]
    43a0:	bd30      	pop	{r4, r5, pc}
    43a2:	6010      	str	r0, [r2, #0]
    43a4:	bd30      	pop	{r4, r5, pc}
    43a6:	bf00      	nop
    43a8:	4268000c 	rsbmi	r0, r8, #12
    43ac:	40034004 	andmi	r4, r3, r4
    43b0:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    43b4:	40034000 	andmi	r4, r3, r0

000043b8 <NOROM_SetupSetAonRtcSubSecInc>:
    43b8:	4b07      	ldr	r3, [pc, #28]	; (43d8 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    43ba:	b282      	uxth	r2, r0
    43bc:	f3c0 4007 	ubfx	r0, r0, #16, #8
    43c0:	601a      	str	r2, [r3, #0]
    43c2:	6058      	str	r0, [r3, #4]
    43c4:	2201      	movs	r2, #1
    43c6:	3308      	adds	r3, #8
    43c8:	601a      	str	r2, [r3, #0]
    43ca:	4a04      	ldr	r2, [pc, #16]	; (43dc <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    43cc:	6812      	ldr	r2, [r2, #0]
    43ce:	2a00      	cmp	r2, #0
    43d0:	d0fb      	beq.n	43ca <NOROM_SetupSetAonRtcSubSecInc+0x12>
    43d2:	2200      	movs	r2, #0
    43d4:	601a      	str	r2, [r3, #0]
    43d6:	4770      	bx	lr
    43d8:	400c603c 	andmi	r6, ip, ip, lsr r0
    43dc:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000043e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    43e0:	f3c0 4381 	ubfx	r3, r0, #18, #2
    43e4:	2b01      	cmp	r3, #1
    43e6:	b510      	push	{r4, lr}
    43e8:	4604      	mov	r4, r0
    43ea:	d002      	beq.n	43f2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    43ec:	2b02      	cmp	r3, #2
    43ee:	d02f      	beq.n	4450 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    43f0:	e02a      	b.n	4448 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    43f2:	4b42      	ldr	r3, [pc, #264]	; (44fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    43f4:	681b      	ldr	r3, [r3, #0]
    43f6:	039a      	lsls	r2, r3, #14
    43f8:	d426      	bmi.n	4448 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    43fa:	4a41      	ldr	r2, [pc, #260]	; (4500 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    43fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4400:	6011      	str	r1, [r2, #0]
    4402:	4940      	ldr	r1, [pc, #256]	; (4504 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    4404:	f3c3 3003 	ubfx	r0, r3, #12, #4
    4408:	680a      	ldr	r2, [r1, #0]
    440a:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    440e:	4302      	orrs	r2, r0
    4410:	f3c3 4000 	ubfx	r0, r3, #16, #1
    4414:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    4418:	600a      	str	r2, [r1, #0]
    441a:	f851 2c01 	ldr.w	r2, [r1, #-1]
    441e:	f3c3 2003 	ubfx	r0, r3, #8, #4
    4422:	f022 020f 	bic.w	r2, r2, #15
    4426:	4302      	orrs	r2, r0
    4428:	f851 0c01 	ldr.w	r0, [r1, #-1]
    442c:	f841 2c01 	str.w	r2, [r1, #-1]
    4430:	f851 2c02 	ldr.w	r2, [r1, #-2]
    4434:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    4438:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    443c:	4313      	orrs	r3, r2
    443e:	f851 2c02 	ldr.w	r2, [r1, #-2]
    4442:	f841 3c02 	str.w	r3, [r1, #-2]
    4446:	e003      	b.n	4450 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    4448:	4b2d      	ldr	r3, [pc, #180]	; (4500 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    444a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    444e:	601a      	str	r2, [r3, #0]
    4450:	4b2d      	ldr	r3, [pc, #180]	; (4508 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    4452:	681b      	ldr	r3, [r3, #0]
    4454:	071b      	lsls	r3, r3, #28
    4456:	bf5e      	ittt	pl
    4458:	4b2c      	ldrpl	r3, [pc, #176]	; (450c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    445a:	2240      	movpl	r2, #64	; 0x40
    445c:	601a      	strpl	r2, [r3, #0]
    445e:	4b2c      	ldr	r3, [pc, #176]	; (4510 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    4460:	f44f 7200 	mov.w	r2, #512	; 0x200
    4464:	601a      	str	r2, [r3, #0]
    4466:	f7ff febb 	bl	41e0 <NOROM_SetupGetTrimForXoscHfFastStart>
    446a:	4b2a      	ldr	r3, [pc, #168]	; (4514 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    446c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    4470:	b2c0      	uxtb	r0, r0
    4472:	7018      	strb	r0, [r3, #0]
    4474:	f3c4 5081 	ubfx	r0, r4, #22, #2
    4478:	2801      	cmp	r0, #1
    447a:	d00b      	beq.n	4494 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    447c:	d302      	bcc.n	4484 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    447e:	2802      	cmp	r0, #2
    4480:	d026      	beq.n	44d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    4482:	e028      	b.n	44d6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    4484:	2004      	movs	r0, #4
    4486:	2101      	movs	r1, #1
    4488:	f7ff fa84 	bl	3994 <NOROM_OSCClockSourceSet>
    448c:	4822      	ldr	r0, [pc, #136]	; (4518 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    448e:	f7ff ff93 	bl	43b8 <NOROM_SetupSetAonRtcSubSecInc>
    4492:	e024      	b.n	44de <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    4494:	f7ff faac 	bl	39f0 <NOROM_OSCClockSourceGet>
    4498:	4604      	mov	r4, r0
    449a:	2004      	movs	r0, #4
    449c:	4621      	mov	r1, r4
    449e:	f7ff fa79 	bl	3994 <NOROM_OSCClockSourceSet>
    44a2:	2004      	movs	r0, #4
    44a4:	f7ff faa4 	bl	39f0 <NOROM_OSCClockSourceGet>
    44a8:	42a0      	cmp	r0, r4
    44aa:	d1fa      	bne.n	44a2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    44ac:	4b1b      	ldr	r3, [pc, #108]	; (451c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    44ae:	681c      	ldr	r4, [r3, #0]
    44b0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    44b4:	f7ff ff80 	bl	43b8 <NOROM_SetupSetAonRtcSubSecInc>
    44b8:	4b19      	ldr	r3, [pc, #100]	; (4520 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    44ba:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    44be:	681b      	ldr	r3, [r3, #0]
    44c0:	0e20      	lsrs	r0, r4, #24
    44c2:	681b      	ldr	r3, [r3, #0]
    44c4:	2107      	movs	r1, #7
    44c6:	4798      	blx	r3
    44c8:	4b0d      	ldr	r3, [pc, #52]	; (4500 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    44ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    44ce:	601a      	str	r2, [r3, #0]
    44d0:	2004      	movs	r0, #4
    44d2:	2103      	movs	r1, #3
    44d4:	e001      	b.n	44da <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    44d6:	2004      	movs	r0, #4
    44d8:	2102      	movs	r1, #2
    44da:	f7ff fa5b 	bl	3994 <NOROM_OSCClockSourceSet>
    44de:	4b11      	ldr	r3, [pc, #68]	; (4524 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    44e0:	4a11      	ldr	r2, [pc, #68]	; (4528 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    44e2:	681b      	ldr	r3, [r3, #0]
    44e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    44e8:	7013      	strb	r3, [r2, #0]
    44ea:	f647 0218 	movw	r2, #30744	; 0x7818
    44ee:	4b0f      	ldr	r3, [pc, #60]	; (452c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    44f0:	801a      	strh	r2, [r3, #0]
    44f2:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    44f6:	3b44      	subs	r3, #68	; 0x44
    44f8:	681b      	ldr	r3, [r3, #0]
    44fa:	bd10      	pop	{r4, pc}
    44fc:	5000138c 	andpl	r1, r0, ip, lsl #7
    4500:	400ca040 	andmi	sl, ip, r0, asr #32
    4504:	4008600c 	andmi	r6, r8, ip
    4508:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    450c:	400ca068 	andmi	sl, ip, r8, rrx
    4510:	400ca080 	andmi	sl, ip, r0, lsl #1
    4514:	400ca108 	andmi	sl, ip, r8, lsl #2
    4518:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    451c:	50003fa8 	andpl	r3, r0, r8, lsr #31
    4520:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    4524:	5000136c 	andpl	r1, r0, ip, ror #6
    4528:	400cb00b 	andmi	fp, ip, fp
    452c:	400cb070 	andmi	fp, ip, r0, ror r0

00004530 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    4530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4534:	4b77      	ldr	r3, [pc, #476]	; (4714 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    4536:	4607      	mov	r7, r0
    4538:	681b      	ldr	r3, [r3, #0]
    453a:	4e77      	ldr	r6, [pc, #476]	; (4718 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    453c:	f013 0f02 	tst.w	r3, #2
    4540:	d004      	beq.n	454c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    4542:	2308      	movs	r3, #8
    4544:	71b3      	strb	r3, [r6, #6]
    4546:	4a75      	ldr	r2, [pc, #468]	; (471c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    4548:	4b75      	ldr	r3, [pc, #468]	; (4720 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    454a:	e0df      	b.n	470c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    454c:	f7ff f9e6 	bl	391c <NOROM_AONBatMonTemperatureGetDegC>
    4550:	4b74      	ldr	r3, [pc, #464]	; (4724 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    4552:	681d      	ldr	r5, [r3, #0]
    4554:	172a      	asrs	r2, r5, #28
    4556:	02ac      	lsls	r4, r5, #10
    4558:	f102 0101 	add.w	r1, r2, #1
    455c:	d408      	bmi.n	4570 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    455e:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    4562:	10db      	asrs	r3, r3, #3
    4564:	2b08      	cmp	r3, #8
    4566:	bfa8      	it	ge
    4568:	2308      	movge	r3, #8
    456a:	4299      	cmp	r1, r3
    456c:	bfb8      	it	lt
    456e:	4619      	movlt	r1, r3
    4570:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    4574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4578:	d10a      	bne.n	4590 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    457a:	4b6b      	ldr	r3, [pc, #428]	; (4728 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    457c:	681a      	ldr	r2, [r3, #0]
    457e:	681b      	ldr	r3, [r3, #0]
    4580:	f3c2 2204 	ubfx	r2, r2, #8, #5
    4584:	2a15      	cmp	r2, #21
    4586:	bf88      	it	hi
    4588:	3a20      	subhi	r2, #32
    458a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    458e:	e00a      	b.n	45a6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    4590:	4b66      	ldr	r3, [pc, #408]	; (472c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    4592:	681a      	ldr	r2, [r3, #0]
    4594:	4b66      	ldr	r3, [pc, #408]	; (4730 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    4596:	f3c2 6204 	ubfx	r2, r2, #24, #5
    459a:	681b      	ldr	r3, [r3, #0]
    459c:	2a15      	cmp	r2, #21
    459e:	bf88      	it	hi
    45a0:	3a20      	subhi	r2, #32
    45a2:	f3c3 4304 	ubfx	r3, r3, #16, #5
    45a6:	2b15      	cmp	r3, #21
    45a8:	440a      	add	r2, r1
    45aa:	bf88      	it	hi
    45ac:	3b20      	subhi	r3, #32
    45ae:	2a15      	cmp	r2, #21
    45b0:	dc05      	bgt.n	45be <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    45b2:	f06f 0109 	mvn.w	r1, #9
    45b6:	428a      	cmp	r2, r1
    45b8:	bfb8      	it	lt
    45ba:	460a      	movlt	r2, r1
    45bc:	e000      	b.n	45c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    45be:	2215      	movs	r2, #21
    45c0:	4c5c      	ldr	r4, [pc, #368]	; (4734 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    45c2:	f002 011f 	and.w	r1, r2, #31
    45c6:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    45ca:	8021      	strh	r1, [r4, #0]
    45cc:	495a      	ldr	r1, [pc, #360]	; (4738 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    45ce:	6809      	ldr	r1, [r1, #0]
    45d0:	f011 0403 	ands.w	r4, r1, #3
    45d4:	bf18      	it	ne
    45d6:	2401      	movne	r4, #1
    45d8:	0749      	lsls	r1, r1, #29
    45da:	bf48      	it	mi
    45dc:	f044 0402 	orrmi.w	r4, r4, #2
    45e0:	b10f      	cbz	r7, 45e6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    45e2:	f044 0404 	orr.w	r4, r4, #4
    45e6:	f996 1007 	ldrsb.w	r1, [r6, #7]
    45ea:	1a41      	subs	r1, r0, r1
    45ec:	2904      	cmp	r1, #4
    45ee:	dc03      	bgt.n	45f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    45f0:	4949      	ldr	r1, [pc, #292]	; (4718 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    45f2:	7989      	ldrb	r1, [r1, #6]
    45f4:	428c      	cmp	r4, r1
    45f6:	d06f      	beq.n	46d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    45f8:	f1b0 010f 	subs.w	r1, r0, #15
    45fc:	9101      	str	r1, [sp, #4]
    45fe:	f004 0101 	and.w	r1, r4, #1
    4602:	f8df a144 	ldr.w	sl, [pc, #324]	; 4748 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    4606:	f004 0904 	and.w	r9, r4, #4
    460a:	f004 0802 	and.w	r8, r4, #2
    460e:	460f      	mov	r7, r1
    4610:	d42a      	bmi.n	4668 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    4612:	9901      	ldr	r1, [sp, #4]
    4614:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    4618:	ea4f 2e21 	mov.w	lr, r1, asr #8
    461c:	f1be 0f07 	cmp.w	lr, #7
    4620:	9101      	str	r1, [sp, #4]
    4622:	d801      	bhi.n	4628 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    4624:	d104      	bne.n	4630 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    4626:	e001      	b.n	462c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    4628:	f04f 0e07 	mov.w	lr, #7
    462c:	2106      	movs	r1, #6
    462e:	e000      	b.n	4632 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    4630:	4671      	mov	r1, lr
    4632:	f8df b118 	ldr.w	fp, [pc, #280]	; 474c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    4636:	3101      	adds	r1, #1
    4638:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    463c:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    4640:	ebc1 0c0c 	rsb	ip, r1, ip
    4644:	fa5f f18c 	uxtb.w	r1, ip
    4648:	f1b9 0f00 	cmp.w	r9, #0
    464c:	d002      	beq.n	4654 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    464e:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    4652:	4459      	add	r1, fp
    4654:	f1b8 0f00 	cmp.w	r8, #0
    4658:	d002      	beq.n	4660 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    465a:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    465e:	4459      	add	r1, fp
    4660:	b12f      	cbz	r7, 466e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    4662:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    4666:	e002      	b.n	466e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    4668:	f04f 0e00 	mov.w	lr, #0
    466c:	4671      	mov	r1, lr
    466e:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    4672:	fa5f fc8a 	uxtb.w	ip, sl
    4676:	f1b9 0f00 	cmp.w	r9, #0
    467a:	d002      	beq.n	4682 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    467c:	f3ca 2907 	ubfx	r9, sl, #8, #8
    4680:	44cc      	add	ip, r9
    4682:	f1b8 0f00 	cmp.w	r8, #0
    4686:	d002      	beq.n	468e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    4688:	f3ca 4807 	ubfx	r8, sl, #16, #8
    468c:	44c4      	add	ip, r8
    468e:	b10f      	cbz	r7, 4694 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    4690:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    4694:	1a9b      	subs	r3, r3, r2
    4696:	2b01      	cmp	r3, #1
    4698:	bfb8      	it	lt
    469a:	2301      	movlt	r3, #1
    469c:	9f01      	ldr	r7, [sp, #4]
    469e:	2234      	movs	r2, #52	; 0x34
    46a0:	4353      	muls	r3, r2
    46a2:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    46a6:	4379      	muls	r1, r7
    46a8:	b2ed      	uxtb	r5, r5
    46aa:	436b      	muls	r3, r5
    46ac:	3180      	adds	r1, #128	; 0x80
    46ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    46b2:	fbb3 f1f1 	udiv	r1, r3, r1
    46b6:	f64f 7cff 	movw	ip, #65535	; 0xffff
    46ba:	4561      	cmp	r1, ip
    46bc:	bf28      	it	cs
    46be:	4661      	movcs	r1, ip
    46c0:	287f      	cmp	r0, #127	; 0x7f
    46c2:	80b1      	strh	r1, [r6, #4]
    46c4:	dc05      	bgt.n	46d2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    46c6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    46ca:	4298      	cmp	r0, r3
    46cc:	bfb8      	it	lt
    46ce:	4618      	movlt	r0, r3
    46d0:	e000      	b.n	46d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    46d2:	207f      	movs	r0, #127	; 0x7f
    46d4:	71f0      	strb	r0, [r6, #7]
    46d6:	71b4      	strb	r4, [r6, #6]
    46d8:	4b18      	ldr	r3, [pc, #96]	; (473c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    46da:	2100      	movs	r1, #0
    46dc:	681b      	ldr	r3, [r3, #0]
    46de:	6033      	str	r3, [r6, #0]
    46e0:	88b3      	ldrh	r3, [r6, #4]
    46e2:	2b1e      	cmp	r3, #30
    46e4:	bf9e      	ittt	ls
    46e6:	4a0c      	ldrls	r2, [pc, #48]	; (4718 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    46e8:	231f      	movls	r3, #31
    46ea:	8093      	strhls	r3, [r2, #4]
    46ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    46f0:	d302      	bcc.n	46f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    46f2:	085b      	lsrs	r3, r3, #1
    46f4:	3101      	adds	r1, #1
    46f6:	e7f9      	b.n	46ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    46f8:	4a11      	ldr	r2, [pc, #68]	; (4740 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    46fa:	3b0f      	subs	r3, #15
    46fc:	430a      	orrs	r2, r1
    46fe:	091b      	lsrs	r3, r3, #4
    4700:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    4704:	4a06      	ldr	r2, [pc, #24]	; (4720 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    4706:	6013      	str	r3, [r2, #0]
    4708:	4b0e      	ldr	r3, [pc, #56]	; (4744 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    470a:	2200      	movs	r2, #0
    470c:	601a      	str	r2, [r3, #0]
    470e:	b003      	add	sp, #12
    4710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4714:	40090000 	andmi	r0, r9, r0
    4718:	20000658 	andcs	r0, r0, r8, asr r6
    471c:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    4720:	40091030 	andmi	r1, r9, r0, lsr r0
    4724:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    4728:	50001388 	andpl	r1, r0, r8, lsl #7
    472c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    4730:	5000113c 	andpl	r1, r0, ip, lsr r1
    4734:	4008626e 	andmi	r6, r8, lr, ror #4
    4738:	40082224 	andmi	r2, r8, r4, lsr #4
    473c:	40092008 	andmi	r2, r9, r8
    4740:	80a4e700 	adchi	lr, r4, r0, lsl #14
    4744:	40091034 	andmi	r1, r9, r4, lsr r0
    4748:	5000139c 	mulpl	r0, ip, r3
    474c:	50001398 	mulpl	r0, r8, r3

00004750 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    4750:	b510      	push	{r4, lr}
    4752:	4b14      	ldr	r3, [pc, #80]	; (47a4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    4754:	681c      	ldr	r4, [r3, #0]
    4756:	b2a4      	uxth	r4, r4
    4758:	b314      	cbz	r4, 47a0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    475a:	f7ff f8df 	bl	391c <NOROM_AONBatMonTemperatureGetDegC>
    475e:	4b12      	ldr	r3, [pc, #72]	; (47a8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    4760:	f993 2007 	ldrsb.w	r2, [r3, #7]
    4764:	4290      	cmp	r0, r2
    4766:	da05      	bge.n	4774 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    4768:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    476c:	4290      	cmp	r0, r2
    476e:	bfb8      	it	lt
    4770:	4610      	movlt	r0, r2
    4772:	71d8      	strb	r0, [r3, #7]
    4774:	889a      	ldrh	r2, [r3, #4]
    4776:	490c      	ldr	r1, [pc, #48]	; (47a8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    4778:	4294      	cmp	r4, r2
    477a:	d310      	bcc.n	479e <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    477c:	4b0b      	ldr	r3, [pc, #44]	; (47ac <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    477e:	6808      	ldr	r0, [r1, #0]
    4780:	681b      	ldr	r3, [r3, #0]
    4782:	1aa4      	subs	r4, r4, r2
    4784:	3302      	adds	r3, #2
    4786:	1a1b      	subs	r3, r3, r0
    4788:	2b1f      	cmp	r3, #31
    478a:	bf28      	it	cs
    478c:	231f      	movcs	r3, #31
    478e:	085b      	lsrs	r3, r3, #1
    4790:	40dc      	lsrs	r4, r3
    4792:	4414      	add	r4, r2
    4794:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4798:	4294      	cmp	r4, r2
    479a:	bf28      	it	cs
    479c:	4614      	movcs	r4, r2
    479e:	808c      	strh	r4, [r1, #4]
    47a0:	bd10      	pop	{r4, pc}
    47a2:	bf00      	nop
    47a4:	40091034 	andmi	r1, r9, r4, lsr r0
    47a8:	20000658 	andcs	r0, r0, r8, asr r6
    47ac:	40092008 	andmi	r2, r9, r8

000047b0 <NOROM_SysCtrlResetSourceGet>:
    47b0:	4b04      	ldr	r3, [pc, #16]	; (47c4 <NOROM_SysCtrlResetSourceGet+0x14>)
    47b2:	681a      	ldr	r2, [r3, #0]
    47b4:	0412      	lsls	r2, r2, #16
    47b6:	bf5a      	itte	pl
    47b8:	6818      	ldrpl	r0, [r3, #0]
    47ba:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    47be:	2008      	movmi	r0, #8
    47c0:	4770      	bx	lr
    47c2:	bf00      	nop
    47c4:	40090004 	andmi	r0, r9, r4

000047c8 <NOROM_ChipInfo_GetChipFamily>:
    47c8:	f64b 129a 	movw	r2, #47514	; 0xb99a
    47cc:	4b10      	ldr	r3, [pc, #64]	; (4810 <NOROM_ChipInfo_GetChipFamily+0x48>)
    47ce:	6818      	ldr	r0, [r3, #0]
    47d0:	f3c0 300f 	ubfx	r0, r0, #12, #16
    47d4:	4290      	cmp	r0, r2
    47d6:	d106      	bne.n	47e6 <NOROM_ChipInfo_GetChipFamily+0x1e>
    47d8:	681b      	ldr	r3, [r3, #0]
    47da:	0f1b      	lsrs	r3, r3, #28
    47dc:	2b0b      	cmp	r3, #11
    47de:	bf0c      	ite	eq
    47e0:	2004      	moveq	r0, #4
    47e2:	2000      	movne	r0, #0
    47e4:	e011      	b.n	480a <NOROM_ChipInfo_GetChipFamily+0x42>
    47e6:	f64b 13be 	movw	r3, #47550	; 0xb9be
    47ea:	4298      	cmp	r0, r3
    47ec:	d00a      	beq.n	4804 <NOROM_ChipInfo_GetChipFamily+0x3c>
    47ee:	f64b 3341 	movw	r3, #47937	; 0xbb41
    47f2:	4298      	cmp	r0, r3
    47f4:	d008      	beq.n	4808 <NOROM_ChipInfo_GetChipFamily+0x40>
    47f6:	f64b 3320 	movw	r3, #47904	; 0xbb20
    47fa:	4298      	cmp	r0, r3
    47fc:	bf14      	ite	ne
    47fe:	20ff      	movne	r0, #255	; 0xff
    4800:	2002      	moveq	r0, #2
    4802:	e002      	b.n	480a <NOROM_ChipInfo_GetChipFamily+0x42>
    4804:	2001      	movs	r0, #1
    4806:	e000      	b.n	480a <NOROM_ChipInfo_GetChipFamily+0x42>
    4808:	2003      	movs	r0, #3
    480a:	b240      	sxtb	r0, r0
    480c:	4770      	bx	lr
    480e:	bf00      	nop
    4810:	50001318 	andpl	r1, r0, r8, lsl r3

00004814 <NOROM_ChipInfo_GetHwRevision>:
    4814:	b538      	push	{r3, r4, r5, lr}
    4816:	4b19      	ldr	r3, [pc, #100]	; (487c <NOROM_ChipInfo_GetHwRevision+0x68>)
    4818:	681d      	ldr	r5, [r3, #0]
    481a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    481e:	6818      	ldr	r0, [r3, #0]
    4820:	0f2d      	lsrs	r5, r5, #28
    4822:	b2c4      	uxtb	r4, r0
    4824:	2c80      	cmp	r4, #128	; 0x80
    4826:	bf28      	it	cs
    4828:	2400      	movcs	r4, #0
    482a:	f7ff ffcd 	bl	47c8 <NOROM_ChipInfo_GetChipFamily>
    482e:	2804      	cmp	r0, #4
    4830:	d821      	bhi.n	4876 <NOROM_ChipInfo_GetHwRevision+0x62>
    4832:	e8df f000 	tbb	[pc, r0]
    4836:	1b1b1303 	blne	6c944a <__ccfg+0x6a94a2>
    483a:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    483e:	2d07      	cmp	r5, #7
    4840:	d819      	bhi.n	4876 <NOROM_ChipInfo_GetHwRevision+0x62>
    4842:	e8df f005 	tbb	[pc, r5]
    4846:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    484a:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    484e:	2014      	movs	r0, #20
    4850:	e012      	b.n	4878 <NOROM_ChipInfo_GetHwRevision+0x64>
    4852:	2015      	movs	r0, #21
    4854:	e010      	b.n	4878 <NOROM_ChipInfo_GetHwRevision+0x64>
    4856:	f104 0016 	add.w	r0, r4, #22
    485a:	e00a      	b.n	4872 <NOROM_ChipInfo_GetHwRevision+0x5e>
    485c:	b125      	cbz	r5, 4868 <NOROM_ChipInfo_GetHwRevision+0x54>
    485e:	2d02      	cmp	r5, #2
    4860:	d109      	bne.n	4876 <NOROM_ChipInfo_GetHwRevision+0x62>
    4862:	f104 0014 	add.w	r0, r4, #20
    4866:	e004      	b.n	4872 <NOROM_ChipInfo_GetHwRevision+0x5e>
    4868:	200a      	movs	r0, #10
    486a:	e005      	b.n	4878 <NOROM_ChipInfo_GetHwRevision+0x64>
    486c:	b91d      	cbnz	r5, 4876 <NOROM_ChipInfo_GetHwRevision+0x62>
    486e:	f104 000a 	add.w	r0, r4, #10
    4872:	b2c0      	uxtb	r0, r0
    4874:	e000      	b.n	4878 <NOROM_ChipInfo_GetHwRevision+0x64>
    4876:	20ff      	movs	r0, #255	; 0xff
    4878:	b240      	sxtb	r0, r0
    487a:	bd38      	pop	{r3, r4, r5, pc}
    487c:	50001318 	andpl	r1, r0, r8, lsl r3

00004880 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    4880:	b508      	push	{r3, lr}
    4882:	f7ff ffa1 	bl	47c8 <NOROM_ChipInfo_GetChipFamily>
    4886:	2801      	cmp	r0, #1
    4888:	d103      	bne.n	4892 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    488a:	f7ff ffc3 	bl	4814 <NOROM_ChipInfo_GetHwRevision>
    488e:	2813      	cmp	r0, #19
    4890:	dc00      	bgt.n	4894 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    4892:	e7fe      	b.n	4892 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    4894:	bd08      	pop	{r3, pc}
	...

00004898 <AuxAdiDdiSafeWrite.constprop.1>:
    4898:	b538      	push	{r3, r4, r5, lr}
    489a:	4604      	mov	r4, r0
    489c:	460d      	mov	r5, r1
    489e:	f7ff f871 	bl	3984 <NOROM_CPUcpsid>
    48a2:	4b06      	ldr	r3, [pc, #24]	; (48bc <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    48a4:	681a      	ldr	r2, [r3, #0]
    48a6:	2a00      	cmp	r2, #0
    48a8:	d0fb      	beq.n	48a2 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    48aa:	2201      	movs	r2, #1
    48ac:	6025      	str	r5, [r4, #0]
    48ae:	601a      	str	r2, [r3, #0]
    48b0:	b918      	cbnz	r0, 48ba <AuxAdiDdiSafeWrite.constprop.1+0x22>
    48b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    48b6:	f7ff b869 	b.w	398c <NOROM_CPUcpsie>
    48ba:	bd38      	pop	{r3, r4, r5, pc}
    48bc:	400c8000 	andmi	r8, ip, r0

000048c0 <NOROM_DDI32RegWrite>:
    48c0:	4408      	add	r0, r1
    48c2:	4611      	mov	r1, r2
    48c4:	f7ff bfe8 	b.w	4898 <AuxAdiDdiSafeWrite.constprop.1>

000048c8 <memcpy>:
    48c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ca:	46c6      	mov	lr, r8
    48cc:	b500      	push	{lr}
    48ce:	2a0f      	cmp	r2, #15
    48d0:	d945      	bls.n	495e <memcpy+0x96>
    48d2:	000b      	movs	r3, r1
    48d4:	2603      	movs	r6, #3
    48d6:	4303      	orrs	r3, r0
    48d8:	401e      	ands	r6, r3
    48da:	000c      	movs	r4, r1
    48dc:	0003      	movs	r3, r0
    48de:	2e00      	cmp	r6, #0
    48e0:	d142      	bne.n	4968 <memcpy+0xa0>
    48e2:	0015      	movs	r5, r2
    48e4:	3d10      	subs	r5, #16
    48e6:	092d      	lsrs	r5, r5, #4
    48e8:	46ac      	mov	ip, r5
    48ea:	012d      	lsls	r5, r5, #4
    48ec:	46a8      	mov	r8, r5
    48ee:	4480      	add	r8, r0
    48f0:	e000      	b.n	48f4 <memcpy+0x2c>
    48f2:	003b      	movs	r3, r7
    48f4:	6867      	ldr	r7, [r4, #4]
    48f6:	605f      	str	r7, [r3, #4]
    48f8:	68e7      	ldr	r7, [r4, #12]
    48fa:	60df      	str	r7, [r3, #12]
    48fc:	001f      	movs	r7, r3
    48fe:	6825      	ldr	r5, [r4, #0]
    4900:	601d      	str	r5, [r3, #0]
    4902:	68a5      	ldr	r5, [r4, #8]
    4904:	3710      	adds	r7, #16
    4906:	609d      	str	r5, [r3, #8]
    4908:	3410      	adds	r4, #16
    490a:	4543      	cmp	r3, r8
    490c:	d1f1      	bne.n	48f2 <memcpy+0x2a>
    490e:	4665      	mov	r5, ip
    4910:	230f      	movs	r3, #15
    4912:	240c      	movs	r4, #12
    4914:	3501      	adds	r5, #1
    4916:	012d      	lsls	r5, r5, #4
    4918:	1949      	adds	r1, r1, r5
    491a:	4013      	ands	r3, r2
    491c:	1945      	adds	r5, r0, r5
    491e:	4214      	tst	r4, r2
    4920:	d025      	beq.n	496e <memcpy+0xa6>
    4922:	598c      	ldr	r4, [r1, r6]
    4924:	51ac      	str	r4, [r5, r6]
    4926:	3604      	adds	r6, #4
    4928:	1b9c      	subs	r4, r3, r6
    492a:	2c03      	cmp	r4, #3
    492c:	d8f9      	bhi.n	4922 <memcpy+0x5a>
    492e:	2403      	movs	r4, #3
    4930:	3b04      	subs	r3, #4
    4932:	089b      	lsrs	r3, r3, #2
    4934:	3301      	adds	r3, #1
    4936:	009b      	lsls	r3, r3, #2
    4938:	4022      	ands	r2, r4
    493a:	18ed      	adds	r5, r5, r3
    493c:	18c9      	adds	r1, r1, r3
    493e:	1e56      	subs	r6, r2, #1
    4940:	2a00      	cmp	r2, #0
    4942:	d007      	beq.n	4954 <memcpy+0x8c>
    4944:	2300      	movs	r3, #0
    4946:	e000      	b.n	494a <memcpy+0x82>
    4948:	0023      	movs	r3, r4
    494a:	5cca      	ldrb	r2, [r1, r3]
    494c:	1c5c      	adds	r4, r3, #1
    494e:	54ea      	strb	r2, [r5, r3]
    4950:	429e      	cmp	r6, r3
    4952:	d1f9      	bne.n	4948 <memcpy+0x80>
    4954:	bc04      	pop	{r2}
    4956:	4690      	mov	r8, r2
    4958:	bcf0      	pop	{r4, r5, r6, r7}
    495a:	bc02      	pop	{r1}
    495c:	4708      	bx	r1
    495e:	0005      	movs	r5, r0
    4960:	1e56      	subs	r6, r2, #1
    4962:	2a00      	cmp	r2, #0
    4964:	d1ee      	bne.n	4944 <memcpy+0x7c>
    4966:	e7f5      	b.n	4954 <memcpy+0x8c>
    4968:	1e56      	subs	r6, r2, #1
    496a:	0005      	movs	r5, r0
    496c:	e7ea      	b.n	4944 <memcpy+0x7c>
    496e:	001a      	movs	r2, r3
    4970:	e7f6      	b.n	4960 <memcpy+0x98>
    4972:	46c0      	nop			; (mov r8, r8)

00004974 <srand>:
    4974:	2200      	movs	r2, #0
    4976:	4b03      	ldr	r3, [pc, #12]	; (4984 <srand+0x10>)
    4978:	681b      	ldr	r3, [r3, #0]
    497a:	33a8      	adds	r3, #168	; 0xa8
    497c:	6018      	str	r0, [r3, #0]
    497e:	605a      	str	r2, [r3, #4]
    4980:	4770      	bx	lr
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	20000110 	andcs	r0, r0, r0, lsl r1

00004988 <rand>:
    4988:	4b0a      	ldr	r3, [pc, #40]	; (49b4 <rand+0x2c>)
    498a:	b510      	push	{r4, lr}
    498c:	681c      	ldr	r4, [r3, #0]
    498e:	34a8      	adds	r4, #168	; 0xa8
    4990:	6820      	ldr	r0, [r4, #0]
    4992:	6861      	ldr	r1, [r4, #4]
    4994:	4a08      	ldr	r2, [pc, #32]	; (49b8 <rand+0x30>)
    4996:	4b09      	ldr	r3, [pc, #36]	; (49bc <rand+0x34>)
    4998:	f000 f812 	bl	49c0 <__aeabi_lmul>
    499c:	2201      	movs	r2, #1
    499e:	2300      	movs	r3, #0
    49a0:	1880      	adds	r0, r0, r2
    49a2:	4159      	adcs	r1, r3
    49a4:	6020      	str	r0, [r4, #0]
    49a6:	6061      	str	r1, [r4, #4]
    49a8:	0048      	lsls	r0, r1, #1
    49aa:	0840      	lsrs	r0, r0, #1
    49ac:	bc10      	pop	{r4}
    49ae:	bc02      	pop	{r1}
    49b0:	4708      	bx	r1
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	20000110 	andcs	r0, r0, r0, lsl r1
    49b8:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    49bc:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

000049c0 <__aeabi_lmul>:
    49c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    49c2:	000f      	movs	r7, r1
    49c4:	0001      	movs	r1, r0
    49c6:	46c6      	mov	lr, r8
    49c8:	4684      	mov	ip, r0
    49ca:	0415      	lsls	r5, r2, #16
    49cc:	0400      	lsls	r0, r0, #16
    49ce:	0c14      	lsrs	r4, r2, #16
    49d0:	0c00      	lsrs	r0, r0, #16
    49d2:	0c09      	lsrs	r1, r1, #16
    49d4:	0c2d      	lsrs	r5, r5, #16
    49d6:	002e      	movs	r6, r5
    49d8:	4346      	muls	r6, r0
    49da:	434d      	muls	r5, r1
    49dc:	4360      	muls	r0, r4
    49de:	4361      	muls	r1, r4
    49e0:	1940      	adds	r0, r0, r5
    49e2:	0c34      	lsrs	r4, r6, #16
    49e4:	1824      	adds	r4, r4, r0
    49e6:	b500      	push	{lr}
    49e8:	42a5      	cmp	r5, r4
    49ea:	d903      	bls.n	49f4 <__aeabi_lmul+0x34>
    49ec:	2080      	movs	r0, #128	; 0x80
    49ee:	0240      	lsls	r0, r0, #9
    49f0:	4680      	mov	r8, r0
    49f2:	4441      	add	r1, r8
    49f4:	0c25      	lsrs	r5, r4, #16
    49f6:	186d      	adds	r5, r5, r1
    49f8:	4661      	mov	r1, ip
    49fa:	4359      	muls	r1, r3
    49fc:	437a      	muls	r2, r7
    49fe:	0430      	lsls	r0, r6, #16
    4a00:	1949      	adds	r1, r1, r5
    4a02:	0424      	lsls	r4, r4, #16
    4a04:	0c00      	lsrs	r0, r0, #16
    4a06:	1820      	adds	r0, r4, r0
    4a08:	1889      	adds	r1, r1, r2
    4a0a:	bc04      	pop	{r2}
    4a0c:	4690      	mov	r8, r2
    4a0e:	bcf0      	pop	{r4, r5, r6, r7}
    4a10:	bc04      	pop	{r2}
    4a12:	4710      	bx	r2
    4a14:	444e4553 	strbmi	r4, [lr], #-1363	; 0xfffffaad
    4a18:	20474e49 	subcs	r4, r7, r9, asr #28
    4a1c:	434f5250 	movtmi	r5, #62032	; 0xf250
    4a20:	52554445 	subspl	r4, r5, #1157627904	; 0x45000000
    4a24:	20490045 	subcs	r0, r9, r5, asr #32
    4a28:	74206d61 	strtvc	r6, [r0], #-3425	; 0xfffff29f
    4a2c:	656d2068 	strbvs	r2, [sp, #-104]!	; 0xffffff98
    4a30:	67617373 			; <UNDEFINED> instruction: 0x67617373
    4a34:	49472065 	stmdbmi	r7, {r0, r2, r5, r6, sp}^
    4a38:	64252044 	strtvs	r2, [r5], #-68	; 0xffffffbc
    4a3c:	73654d00 	cmnvc	r5, #0, 26
    4a40:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4a44:	6e657320 	cdpvs	3, 6, cr7, cr5, cr0, {1}
    4a48:	000a0d74 	andeq	r0, sl, r4, ror sp
    4a4c:	6f727245 	svcvs	0x00727245
    4a50:	6e692072 	mcrvs	0, 3, r2, cr9, cr2, {3}
    4a54:	61697469 	cmnvs	r9, r9, ror #8
    4a58:	697a696c 	ldmdbvs	sl!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4a5c:	6e20676e 	cdpvs	7, 2, cr6, cr0, cr14, {3}
    4a60:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
    4a64:	000a2e2e 	andeq	r2, sl, lr, lsr #28
    4a68:	50540a0d 	subspl	r0, r4, sp, lsl #20
    4a6c:	25203a45 	strcs	r3, [r0, #-2629]!	; 0xfffff5bb
    4a70:	0a0d0064 	beq	344c08 <__ccfg+0x324c60>
    4a74:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    4a78:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4a7c:	73206f74 			; <UNDEFINED> instruction: 0x73206f74
    4a80:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
    4a84:	0a0d0072 	beq	344c54 <__ccfg+0x324cac>
    4a88:	61657243 	cmnvs	r5, r3, asr #4
    4a8c:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4a90:	77206365 	strvc	r6, [r0, -r5, ror #6]!
    4a94:	72622065 	rsbvc	r2, r2, #101	; 0x65
    4a98:	00656b6f 	rsbeq	r6, r5, pc, ror #22
    4a9c:	72430a0d 	subvc	r0, r3, #53248	; 0xd000
    4aa0:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4aa4:	63657220 	cmnvs	r5, #32, 4
    4aa8:	626e6920 	rsbvs	r6, lr, #32, 18	; 0x80000
    4aac:	65777465 	ldrbvs	r7, [r7, #-1125]!	; 0xfffffb9b
    4ab0:	69206e65 	stmdbvs	r0!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
    4ab4:	53203a66 			; <UNDEFINED> instruction: 0x53203a66
    4ab8:	20657a69 	rsbcs	r7, r5, r9, ror #20
    4abc:	7220666f 	eorvc	r6, r0, #116391936	; 0x6f00000
    4ac0:	3d206365 	stccc	3, cr6, [r0, #-404]!	; 0xfffffe6c
    4ac4:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4ac8:	72430a0d 	subvc	r0, r3, #53248	; 0xd000
    4acc:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4ad0:	63657220 	cmnvs	r5, #32, 4
    4ad4:	63657320 	cmnvs	r5, #32, 6	; 0x80000000
    4ad8:	20646e6f 	rsbcs	r6, r4, pc, ror #28
    4adc:	0d006669 	stceq	6, cr6, [r0, #-420]	; 0xfffffe5c
    4ae0:	6572430a 	ldrbvs	r4, [r2, #-778]!	; 0xfffffcf6
    4ae4:	20657461 	rsbcs	r7, r5, r1, ror #8
    4ae8:	20636572 	rsbcs	r6, r3, r2, ror r5
    4aec:	72696874 	rsbvc	r6, r9, #116, 16	; 0x740000
    4af0:	66692064 	strbtvs	r2, [r9], -r4, rrx
    4af4:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4af8:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4afc:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4b00:	68742063 	ldmdavs	r4!, {r0, r1, r5, r6, sp}^
    4b04:	20647269 	rsbcs	r7, r4, r9, ror #4
    4b08:	65736c65 	ldrbvs	r6, [r3, #-3173]!	; 0xfffff39b
    4b0c:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4b10:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4b14:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4b18:	756f2063 	strbvc	r2, [pc, #-99]!	; 4abd <__aeabi_lmul+0xfd>
    4b1c:	66692074 			; <UNDEFINED> instruction: 0x66692074
    4b20:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4b24:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4b28:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4b2c:	65732063 	ldrbvs	r2, [r3, #-99]!	; 0xffffff9d
    4b30:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    4b34:	6f742067 	svcvs	0x00742067
    4b38:	6e657320 	cdpvs	3, 6, cr7, cr5, cr0, {1}
    4b3c:	00726564 	rsbseq	r6, r2, r4, ror #10
    4b40:	65440a0d 	strbvs	r0, [r4, #-2573]	; 0xfffff5f3
    4b44:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4b48:	63657220 	cmnvs	r5, #32, 4
    4b4c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    4b50:	20657465 	rsbcs	r7, r5, r5, ror #8
    4b54:	6f636572 	svcvs	0x00636572
    4b58:	67206472 			; <UNDEFINED> instruction: 0x67206472
    4b5c:	25206469 	strcs	r6, [r0, #-1129]!	; 0xfffffb97
    4b60:	6f6e0a64 	svcvs	0x006e0a64
    4b64:	645f6564 	ldrbvs	r6, [pc], #-1380	; 4b6c <__aeabi_lmul+0x1ac>
    4b68:	69672062 	stmdbvs	r7!, {r1, r5, r6, sp}^
    4b6c:	64252064 	strtvs	r2, [r5], #-100	; 0xffffff9c
    4b70:	6564200a 	strbvs	r2, [r4, #-10]!
    4b74:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4b78:	63657220 	cmnvs	r5, #32, 4
    4b7c:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4b80:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4b84:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4b88:	20646920 	rsbcs	r6, r4, r0, lsr #18
    4b8c:	2c0a6425 	cfstrscs	mvf6, [sl], {37}	; 0x25
    4b90:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4b98 <__aeabi_lmul+0x1d8>
    4b94:	62642065 	rsbvs	r2, r4, #101	; 0x65
    4b98:	20646920 	rsbcs	r6, r4, r0, lsr #18
    4b9c:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4ba0:	6c65440a 	cfstrdvs	mvd4, [r5], #-40	; 0xffffffd8
    4ba4:	20657465 	rsbcs	r7, r5, r5, ror #8
    4ba8:	20636572 	rsbcs	r6, r3, r2, ror r5
    4bac:	73726966 	cmnvc	r2, #1671168	; 0x198000
    4bb0:	66692074 			; <UNDEFINED> instruction: 0x66692074
    4bb4:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4bb8:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4bbc:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4bc0:	65732063 	ldrbvs	r2, [r3, #-99]!	; 0xffffff9d
    4bc4:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    4bc8:	00666920 	rsbeq	r6, r6, r0, lsr #18
    4bcc:	65440a0d 	strbvs	r0, [r4, #-2573]	; 0xfffff5f3
    4bd0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4bd4:	63657220 	cmnvs	r5, #32, 4
    4bd8:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    4bdc:	69206472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, sp, lr}
    4be0:	0a0d0066 	beq	344d80 <__ccfg+0x324dd8>
    4be4:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    4be8:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4bec:	66206365 	strtvs	r6, [r0], -r5, ror #6
    4bf0:	7472756f 	ldrbtvc	r7, [r2], #-1391	; 0xfffffa91
    4bf4:	66692068 	strbtvs	r2, [r9], -r8, rrx
    4bf8:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4bfc:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4c00:	73612065 	cmnvc	r1, #101	; 0x65
    4c04:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
    4c08:	6c20656c 	cfstr32vs	mvfx6, [r0], #-432	; 0xfffffe50
    4c0c:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4c10:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
    4c14:	0d006573 	cfstr32eq	mvfx6, [r0, #-460]	; 0xfffffe34
    4c18:	7465720a 	strbtvc	r7, [r5], #-522	; 0xfffffdf6
    4c1c:	76656972 			; <UNDEFINED> instruction: 0x76656972
    4c20:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4c24:	0a0d0063 	beq	344db8 <__ccfg+0x324e10>
    4c28:	70736552 	rsbsvc	r6, r3, r2, asr r5
    4c2c:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
    4c30:	52524500 	subspl	r4, r2, #0, 10
    4c34:	203a524f 	eorscs	r5, sl, pc, asr #4
    4c38:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4c3c:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
    4c40:	70797420 	rsbsvc	r7, r9, r0, lsr #8
    4c44:	255b2065 	ldrbcs	r2, [fp, #-101]	; 0xffffff9b
    4c48:	69205d64 	stmdbvs	r0!, {r2, r5, r6, r8, sl, fp, ip, lr}
    4c4c:	6f6e2073 	svcvs	0x006e2073
    4c50:	656c2074 	strbvs	r2, [ip, #-116]!	; 0xffffff8c
    4c54:	206c6167 	rsbcs	r6, ip, r7, ror #2
    4c58:	6b636170 	blvs	18dd220 <__ccfg+0x18bd278>
    4c5c:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
    4c60:	00657079 	rsbeq	r7, r5, r9, ror r0
    4c64:	61440a0d 	cmpvs	r4, sp, lsl #20
    4c68:	53206174 			; <UNDEFINED> instruction: 0x53206174
    4c6c:	64657661 	strbtvs	r7, [r5], #-1633	; 0xfffff99f
    4c70:	520a0d00 	andpl	r0, sl, #0, 26
    4c74:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4c78:	65442064 	strbvs	r2, [r4, #-100]	; 0xffffff9c
    4c7c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4c80:	0a0d0064 	beq	344e18 <__ccfg+0x324e70>
    4c84:	6f636552 	svcvs	0x00636552
    4c88:	52206472 	eorpl	r6, r0, #1912602624	; 0x72000000
    4c8c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4c90:	20646576 	rsbcs	r6, r4, r6, ror r5
    4c94:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 4b04 <__aeabi_lmul+0x144>
    4c98:	3a642520 	bcc	190e120 <__ccfg+0x18ee178>
    4c9c:	00732520 	rsbseq	r2, r3, r0, lsr #10
    4ca0:	68540a0d 	ldmdavs	r4, {r0, r2, r3, r9, fp}^
    4ca4:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4ca8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4cac:	6e616320 	cdpvs	3, 6, cr6, cr1, cr0, {1}
    4cb0:	62207427 	eorvs	r7, r0, #654311424	; 0x27000000
    4cb4:	61732065 	cmnvs	r3, r5, rrx
    4cb8:	20646576 	rsbcs	r6, r4, r6, ror r5
    4cbc:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4cc0:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4cc4:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4cc8:	6568540a 	strbvs	r5, [r8, #-1034]!	; 0xfffffbf6
    4ccc:	63657220 	cmnvs	r5, #32, 4
    4cd0:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4cd4:	73656f64 	cmnvc	r5, #100, 30	; 0x190
    4cd8:	746f6e20 	strbtvc	r6, [pc], #-3616	; 4ce0 <__aeabi_lmul+0x320>
    4cdc:	69786520 	ldmdbvs	r8!, {r5, r8, sl, sp, lr}^
    4ce0:	20737473 	rsbscs	r7, r3, r3, ror r4
    4ce4:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4ce8:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4cec:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4cf0:	6568540a 	strbvs	r5, [r8, #-1034]!	; 0xfffffbf6
    4cf4:	63657220 	cmnvs	r5, #32, 4
    4cf8:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4cfc:	73656f64 	cmnvc	r5, #100, 30	; 0x190
    4d00:	746f6e20 	strbtvc	r6, [pc], #-3616	; 4d08 <__aeabi_lmul+0x348>
    4d04:	69786520 	ldmdbvs	r8!, {r5, r8, sl, sp, lr}^
    4d08:	6f207473 	svcvs	0x00207473
    4d0c:	6f6e206e 	svcvs	0x006e206e
    4d10:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
    4d14:	52450064 	subpl	r0, r5, #100	; 0x64
    4d18:	3a524f52 	bcc	1498a68 <__ccfg+0x1478ac0>
    4d1c:	6d6f7320 	stclvs	3, cr7, [pc, #-128]!	; 4ca4 <__aeabi_lmul+0x2e4>
    4d20:	6e697465 	cdpvs	4, 6, cr7, cr9, cr5, {3}
    4d24:	65772067 	ldrbvs	r2, [r7, #-103]!	; 0xffffff99
    4d28:	7720746e 	strvc	r7, [r0, -lr, ror #8]!
    4d2c:	676e6f72 			; <UNDEFINED> instruction: 0x676e6f72
    4d30:	65687720 	strbvs	r7, [r8, #-1824]!	; 0xfffff8e0
    4d34:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0xffffff92
    4d38:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4d3c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4d40:	20656874 	rsbcs	r6, r5, r4, ror r8
    4d44:	6b636170 	blvs	18dd30c <__ccfg+0x18bd364>
    4d48:	43007465 	movwmi	r7, #1125	; 0x465
    4d4c:	6f6e6e61 	svcvs	0x006e6e61
    4d50:	706f2074 	rsbvc	r2, pc, r4, ror r0	; <UNPREDICTABLE>
    4d54:	74206e65 	strtvc	r6, [r0], #-3685	; 0xfffff19b
    4d58:	69207663 	stmdbvs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}
    4d5c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4d60:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    4d64:	470a0d00 	strmi	r0, [sl, -r0, lsl #26]
    4d68:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4d6c:	20642520 	rsbcs	r2, r4, r0, lsr #10
    4d70:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    4d74:	23206563 			; <UNDEFINED> instruction: 0x23206563
    4d78:	28206425 	stmdacs	r0!, {r0, r2, r5, sl, sp, lr}
    4d7c:	252f6425 	strcs	r6, [pc, #-1061]!	; 495f <memcpy+0x97>
    4d80:	65722064 	ldrbvs	r2, [r2, #-100]!	; 0xffffff9c
    4d84:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4d88:	0a0d2973 	beq	34f35c <__ccfg+0x32f3b4>
    4d8c:	72294728 	eorvc	r4, r9, #40, 14	; 0xa00000
    4d90:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4d94:	0a0d4449 	beq	355ec0 <__ccfg+0x335f18>
    4d98:	65294e28 	strvs	r4, [r9, #-3624]!	; 0xfffff1d8
    4d9c:	65642077 	strbvs	r2, [r4, #-119]!	; 0xffffff89
    4da0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4da4:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    4da8:	2946280a 	stmdbcs	r6, {r1, r3, fp, sp}^
    4dac:	20646e69 	rsbcs	r6, r4, r9, ror #28
    4db0:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4db4:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4db8:	280a0d73 	stmdacs	sl, {r0, r1, r4, r5, r6, r8, sl, fp}
    4dbc:	65722943 	ldrbvs	r2, [r2, #-2371]!	; 0xfffff6bd
    4dc0:	20657461 	rsbcs	r7, r5, r1, ror #8
    4dc4:	6f636572 	svcvs	0x00636572
    4dc8:	6f206472 	svcvs	0x00206472
    4dcc:	656e206e 	strbvs	r2, [lr, #-110]!	; 0xffffff92
    4dd0:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    4dd4:	0a0d726f 	beq	361798 <__ccfg+0x3417f0>
    4dd8:	65294428 	strvs	r4, [r9, #-1064]!	; 0xfffffbd8
    4ddc:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4de0:	63657220 	cmnvs	r5, #32, 4
    4de4:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4de8:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4dec:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4df0:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    4df4:	2952280a 	ldmdbcs	r2, {r1, r3, fp, sp}^
    4df8:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4dfc:	20657665 	rsbcs	r7, r5, r5, ror #12
    4e00:	6f636572 	svcvs	0x00636572
    4e04:	66206472 			; <UNDEFINED> instruction: 0x66206472
    4e08:	206d6f72 	rsbcs	r6, sp, r2, ror pc
    4e0c:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4e10:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4e14:	53280a0d 			; <UNDEFINED> instruction: 0x53280a0d
    4e18:	776f6829 	strbvc	r6, [pc, -r9, lsr #16]!
    4e1c:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    4e20:	72206c61 	eorvc	r6, r0, #24832	; 0x6100
    4e24:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4e28:	0a0d7364 	beq	361bc0 <__ccfg+0x341c18>
    4e2c:	29652852 	stmdbcs	r5!, {r1, r4, r6, fp, sp}^
    4e30:	20746573 	rsbscs	r6, r4, r3, ror r5
    4e34:	61636f6c 	cmnvs	r3, ip, ror #30
    4e38:	7473206c 	ldrbtvc	r2, [r3], #-108	; 0xffffff94
    4e3c:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4e40:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
    4e44:	6c65530a 	stclvs	3, cr5, [r5], #-40	; 0xffffffd8
    4e48:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4e4c:	203a6e6f 	eorscs	r6, sl, pc, ror #28
    4e50:	00632500 	rsbeq	r2, r3, r0, lsl #10
    4e54:	61656c50 	cmnvs	r5, r0, asr ip
    4e58:	70206573 	eorvc	r6, r0, r3, ror r5
    4e5c:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4e60:	61206564 			; <UNDEFINED> instruction: 0x61206564
    4e64:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
    4e68:	6f726720 	svcvs	0x00726720
    4e6c:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    4e70:	203a2344 	eorscs	r2, sl, r4, asr #6
    4e74:	00752500 	rsbseq	r2, r5, r0, lsl #10
    4e78:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    4e7c:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4e80:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4e84:	6f726720 	svcvs	0x00726720
    4e88:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    4e8c:	0a0d0044 	beq	344fa4 <__ccfg+0x324ffc>
    4e90:	61656c50 	cmnvs	r5, r0, asr ip
    4e94:	70206573 	eorvc	r6, r0, r3, ror r5
    4e98:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4e9c:	61206564 			; <UNDEFINED> instruction: 0x61206564
    4ea0:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
    4ea4:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4eac <__aeabi_lmul+0x4ec>
    4ea8:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    4eac:	31282023 			; <UNDEFINED> instruction: 0x31282023
    4eb0:	2035322d 	eorscs	r3, r5, sp, lsr #4
    4eb4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4eb8:	76697375 			; <UNDEFINED> instruction: 0x76697375
    4ebc:	203a2965 	eorscs	r2, sl, r5, ror #18
    4ec0:	74754f00 	ldrbtvc	r4, [r5], #-3840	; 0xfffff100
    4ec4:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    4ec8:	676e6152 			; <UNDEFINED> instruction: 0x676e6152
    4ecc:	44490065 	strbmi	r0, [r9], #-101	; 0xffffff9b
    4ed0:	20736920 	rsbscs	r6, r3, r0, lsr #18
    4ed4:	65726c61 	ldrbvs	r6, [r2, #-3169]!	; 0xfffff39f
    4ed8:	20796461 	rsbscs	r6, r9, r1, ror #8
    4edc:	75206e69 	strvc	r6, [r0, #-3689]!	; 0xfffff197
    4ee0:	0d006573 	cfstr32eq	mvfx6, [r0, #-460]	; 0xfffffe34
    4ee4:	2344490a 	movtcs	r4, #18698	; 0x490a
    4ee8:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
    4eec:	7369202c 	cmnvc	r9, #44	; 0x2c
    4ef0:	206e6120 	rsbcs	r6, lr, r0, lsr #2
    4ef4:	61766e69 	cmnvs	r6, r9, ror #28
    4ef8:	2064696c 	rsbcs	r6, r4, ip, ror #18
    4efc:	696f6863 	stmdbvs	pc!, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    4f00:	202e6563 	eorcs	r6, lr, r3, ror #10
    4f04:	73616552 	cmnvc	r1, #343932928	; 0x14800000
    4f08:	203a6e6f 	eorscs	r6, sl, pc, ror #28
    4f0c:	002e7325 	eoreq	r7, lr, r5, lsr #6
    4f10:	6f727245 	svcvs	0x00727245
    4f14:	6c432072 	mcrrvs	0, 7, r2, r3, cr2
    4f18:	69726165 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4f1c:	4e20676e 	cdpmi	7, 2, cr6, cr0, cr14, {3}
    4f20:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4f24:	61727241 	cmnvs	r2, r1, asr #4
    4f28:	0a0d0079 	beq	345114 <__ccfg+0x32516c>
    4f2c:	6769654e 	strbvs	r6, [r9, -lr, asr #10]!
    4f30:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4f34:	00203a73 	eoreq	r3, r0, r3, ror sl
    4f38:	202c7525 	eorcs	r7, ip, r5, lsr #10
    4f3c:	656c5000 	strbvs	r5, [ip, #-0]!
    4f40:	20657361 	rsbcs	r7, r5, r1, ror #6
    4f44:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4f48:	20656469 	rsbcs	r6, r5, r9, ror #8
    4f4c:	6f6e2061 	svcvs	0x006e2061
    4f50:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    4f54:	30282044 	eorcc	r2, r8, r4, asr #32
    4f58:	2935322d 	ldmdbcs	r5!, {r0, r2, r3, r5, r9, ip, sp}
    4f5c:	4500203a 	strmi	r2, [r0, #-58]	; 0xffffffc6
    4f60:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    4f64:	6d69203a 	stclvs	0, cr2, [r9, #-232]!	; 0xffffff18
    4f68:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    4f6c:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
    4f70:	6c500044 	mrrcvs	0, 4, r0, r0, cr4	; <UNPREDICTABLE>
    4f74:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    4f78:	6f727020 	svcvs	0x00727020
    4f7c:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    4f80:	72206120 	eorvc	r6, r0, #32, 2
    4f84:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4f88:	6c282064 	stcvs	0, cr2, [r8], #-400	; 0xfffffe70
    4f8c:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    4f90:	3d3c2068 	ldccc	0, cr2, [ip, #-416]!	; 0xfffffe60
    4f94:	29303220 	ldmdbcs	r0!, {r5, r9, ip, sp}
    4f98:	4500203a 	strmi	r2, [r0, #-58]	; 0xffffffc6
    4f9c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    4fa0:	6d69203a 	stclvs	0, cr2, [r9, #-232]!	; 0xffffff18
    4fa4:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    4fa8:	6e207265 	cdpvs	2, 2, cr7, cr0, cr5, {3}
    4fac:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4fb0:	50004449 	andpl	r4, r0, r9, asr #8
    4fb4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4fb8:	72702065 	rsbsvc	r2, r0, #101	; 0x65
    4fbc:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
    4fc0:	68742065 	ldmdavs	r4!, {r0, r2, r5, r6, sp}^
    4fc4:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4fc8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4fcc:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
    4fd0:	28207865 	stmdacs	r0!, {r0, r2, r5, r6, fp, ip, sp, lr}
    4fd4:	30342d30 	eorscc	r2, r4, r0, lsr sp
    4fd8:	00203a29 	eoreq	r3, r0, r9, lsr #20
    4fdc:	6f727245 	svcvs	0x00727245
    4fe0:	69203a72 	stmdbvs	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    4fe4:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    4fe8:	69206469 	stmdbvs	r0!, {r0, r3, r5, r6, sl, sp, lr}
    4fec:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    4ff0:	490a0d00 	stmdbmi	sl, {r8, sl, fp}
    4ff4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    4ff8:	6d695409 	cfstrdvs	mvd5, [r9, #-36]!	; 0xffffffdc
    4ffc:	74532065 	ldrbvc	r2, [r3], #-101	; 0xffffff9b
    5000:	09706d61 	ldmdbeq	r0!, {r0, r5, r6, r8, sl, fp, sp, lr}^
    5004:	6e774f09 	cdpvs	15, 7, cr4, cr7, cr9, {0}
    5008:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
    500c:	65520944 	ldrbvs	r0, [r2, #-2372]	; 0xfffff6bc
    5010:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    5014:	74614420 	strbtvc	r4, [r1], #-1056	; 0xfffffbe0
    5018:	0a0d0061 	beq	3451a4 <__ccfg+0x3251fc>
    501c:	25096425 	strcs	r6, [r9, #-1061]	; 0xfffffbdb
    5020:	09090975 	stmdbeq	r9, {r0, r2, r4, r5, r6, r8, fp}
    5024:	25097525 	strcs	r7, [r9, #-1317]	; 0xfffffadb
    5028:	0a0d0073 	beq	3451fc <__ccfg+0x325254>
    502c:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
    5030:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
    5034:	6572206f 	ldrbvs	r2, [r2, #-111]!	; 0xffffff91
    5038:	20686361 	rsbcs	r6, r8, r1, ror #6
    503c:	20656874 	rsbcs	r6, r5, r4, ror r8
    5040:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
    5044:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
    5048:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    504c:	72450a0d 	subvc	r0, r5, #53248	; 0xd000
    5050:	3a726f72 	bcc	1ca0e20 <__ccfg+0x1c80e78>
    5054:	00732520 	rsbseq	r2, r3, r0, lsr #10
    5058:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    505c:	203a5252 	eorscs	r5, sl, r2, asr r2
    5060:	202c7825 	eorcs	r7, ip, r5, lsr #16
    5064:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    5068:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    506c:	50006961 	andpl	r6, r0, r1, ror #18
    5070:	534f6369 	movtpl	r6, #62313	; 0xf369
    5074:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    5078:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    507c:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    5080:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    5084:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5088:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    508c:	434e5541 	movtmi	r5, #58689	; 0xe541
    5090:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    5094:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    5098:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    509c:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    50a0:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 5028 <__aeabi_lmul+0x668>
    50a4:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    50a8:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    50ac:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    50b0:	30303220 	eorscc	r3, r0, r0, lsr #4
    50b4:	30322d32 	eorscc	r2, r2, r2, lsr sp
    50b8:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    50bc:	6f746665 	svcvs	0x00746665
    50c0:	20726576 	rsbscs	r6, r2, r6, ror r5
    50c4:	3a4d4152 	bcc	1355614 <__ccfg+0x133566c>
    50c8:	20642520 	rsbcs	r2, r4, r0, lsr #10
    50cc:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    50d0:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    50d4:	63695000 	cmnvs	r9, #0
    50d8:	6820534f 	stmdavs	r0!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
    50dc:	65746c61 	ldrbvs	r6, [r4, #-3169]!	; 0xfffff39f
    50e0:	00000064 	andeq	r0, r0, r4, rrx

000050e4 <port_confs>:
    50e4:	00306080 	eorseq	r6, r0, r0, lsl #1
    50e8:	00386080 	eorseq	r6, r8, r0, lsl #1
    50ec:	00186010 	andseq	r6, r8, r0, lsl r0
    50f0:	2010400f 	andscs	r4, r0, pc
    50f4:	30694000 	rsbcc	r4, r9, r0
    50f8:	30714000 	rsbscc	r4, r1, r0
    50fc:	00b86008 	adcseq	r6, r8, r8
    5100:	60c94000 	sbcvs	r4, r9, r0
    5104:	60d14000 	sbcsvs	r4, r1, r0
    5108:	60d94000 	sbcsvs	r4, r9, r0
    510c:	60e14000 	rscvs	r4, r1, r0
    5110:	00096380 	andeq	r6, r9, r0, lsl #7
    5114:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    5118:	20402000 	subcs	r2, r0, r0
    511c:	00486080 	subeq	r6, r8, r0, lsl #1
    5120:	00506080 	subseq	r6, r0, r0, lsl #1
    5124:	00a06000 	adceq	r6, r0, r0
    5128:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    512c:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    5130:	73006120 	movwvc	r6, #288	; 0x120
    5134:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    5138:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    513c:	616d006f 	cmnvs	sp, pc, rrx
    5140:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    5144:	00676c61 	rsbeq	r6, r7, r1, ror #24
    5148:	0069706b 	rsbeq	r7, r9, fp, rrx
    514c:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

00005151 <__pi_hex_enc_table>:
    5151:	33323130 	teqcc	r2, #48, 2
    5155:	37363534 			; <UNDEFINED> instruction: 0x37363534
    5159:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    515d:	46454443 	strbmi	r4, [r5], -r3, asr #8
    5161:	30766374 	rsbscc	r6, r6, r4, ror r3
    5165:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    5169:	736f7073 	cmnvc	pc, #115	; 0x73
    516d:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    5171:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    5175:	736f7073 	cmnvc	pc, #115	; 0x73
    5179:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    517d:	63740079 	cmnvs	r4, #121	; 0x79
    5181:	00323076 	eorseq	r3, r2, r6, ror r0
    5185:	30766374 	rsbscc	r6, r6, r4, ror r3
    5189:	63740033 	cmnvs	r4, #51	; 0x33
    518d:	00343076 	eorseq	r3, r4, r6, ror r0
    5191:	30766374 	rsbscc	r6, r6, r4, ror r3
    5195:	63740035 	cmnvs	r4, #53	; 0x35
    5199:	00363076 	eorseq	r3, r6, r6, ror r0
    519d:	31766374 	cmncc	r6, r4, ror r3
    51a1:	63740030 	cmnvs	r4, #48	; 0x30
    51a5:	00313176 	eorseq	r3, r1, r6, ror r1
    51a9:	31766374 	cmncc	r6, r4, ror r3
    51ad:	63740036 	cmnvs	r4, #54	; 0x36
    51b1:	00373176 	eorseq	r3, r7, r6, ror r1
    51b5:	31766374 	cmncc	r6, r4, ror r3
    51b9:	63740038 	cmnvs	r4, #56	; 0x38
    51bd:	00333276 	eorseq	r3, r3, r6, ror r2
    51c1:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    51c5:	63740032 	cmnvs	r4, #50	; 0x32
    51c9:	00363276 	eorseq	r3, r6, r6, ror r2
    51cd:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    51d1:	63740037 	cmnvs	r4, #55	; 0x37
    51d5:	00383276 	eorseq	r3, r8, r6, ror r2
    51d9:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    51dd:	63740039 	cmnvs	r4, #57	; 0x39
    51e1:	00303376 	eorseq	r3, r0, r6, ror r3
    51e5:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    51e9:	63740031 	cmnvs	r4, #49	; 0x31
    51ed:	00323376 	eorseq	r3, r2, r6, ror r3
    51f1:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    51f5:	63740033 	cmnvs	r4, #51	; 0x33
    51f9:	00343376 	eorseq	r3, r4, r6, ror r3

000051fd <__input_pins>:
    51fd:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

00005202 <__button_list>:
    5202:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    5206:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    520a:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    520e:	00317472 	eorseq	r7, r1, r2, ror r4
    5212:	20505548 	subscs	r5, r0, r8, asr #10
    5216:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    521a:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    521e:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    5222:	30636920 	rsbcc	r6, r3, r0, lsr #18
    5226:	50554800 	subspl	r4, r5, r0, lsl #16
    522a:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    522e:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    5232:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    5236:	32747200 	rsbscc	r7, r4, #0, 4
    523a:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    523e:	00585220 	subseq	r5, r8, r0, lsr #4
    5242:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    5246:	00797020 	rsbseq	r7, r9, r0, lsr #32
    524a:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    524e:	31636300 	cmncc	r3, r0, lsl #6
    5252:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    5256:	31434300 	mrscc	r4, (UNDEF: 115)
    525a:	3a303533 	bcc	c1272e <__ccfg+0xbf2786>
    525e:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    5262:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    5266:	00642520 	rsbeq	r2, r4, r0, lsr #10

0000526a <patable>:
    526a:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    526e:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    5272:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    5276:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

0000527c <patchGenfskRfe>:
    527c:	000061a3 	andeq	r6, r0, r3, lsr #3
    5280:	1307147f 	movwne	r1, #29823	; 0x747f
    5284:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    5288:	3f131f2e 	svccc	0x00131f2e
    528c:	003f0ab0 	ldrhteq	r0, [pc], -r0
    5290:	0000ff07 	andeq	pc, r0, r7, lsl #30
    5294:	40004030 	andmi	r4, r0, r0, lsr r0
    5298:	40034001 	andmi	r4, r3, r1
    529c:	400f4007 	andmi	r4, pc, r7
    52a0:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    52a4:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    52a8:	4fcf47cf 	svcmi	0x00cf47cf
    52ac:	2fcf3fcf 	svccs	0x00cf3fcf
    52b0:	0fcf1fcf 	svceq	0x00cf1fcf
    52b4:	00000000 	andeq	r0, r0, r0
    52b8:	0008000f 	andeq	r0, r8, pc
    52bc:	003f0000 	eorseq	r0, pc, r0
    52c0:	00400000 	subeq	r0, r0, r0
    52c4:	0000003f 	andeq	r0, r0, pc, lsr r0
    52c8:	00680004 	rsbeq	r0, r8, r4
    52cc:	00dc000e 	sbcseq	r0, ip, lr
    52d0:	00430006 	subeq	r0, r3, r6
    52d4:	0005001a 	andeq	r0, r5, sl, lsl r0
    52d8:	00000000 	andeq	r0, r0, r0
    52dc:	00000002 	andeq	r0, r0, r2
    52e0:	0000003f 	andeq	r0, r0, pc, lsr r0
    52e4:	00040000 	andeq	r0, r4, r0
    52e8:	000000c0 	andeq	r0, r0, r0, asr #1
    52ec:	00c00004 	sbceq	r0, r0, r4
    52f0:	00070000 	andeq	r0, r7, r0
    52f4:	9100c050 	qaddls	ip, r0, r0
    52f8:	c0707000 	rsbsgt	r7, r0, r0
    52fc:	70009100 	andvc	r9, r0, r0, lsl #2
    5300:	00213182 	eoreq	r3, r1, r2, lsl #3
    5304:	b1109131 	tstlt	r0, r1, lsr r1
    5308:	81017000 	mrshi	r7, (UNDEF: 1)
    530c:	a100b101 	tstge	r0, r1, lsl #2
    5310:	91323182 	teqls	r2, r2, lsl #3
    5314:	9101b110 	tstls	r1, r0, lsl r1
    5318:	81411011 	cmphi	r1, r1, lsl r0
    531c:	404f2241 	submi	r2, pc, r1, asr #4
    5320:	700006f1 	strdvc	r0, [r0], -r1
    5324:	9101c051 	qaddls	ip, r1, r1
    5328:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    532c:	d0083183 	andle	r3, r8, r3, lsl #3
    5330:	6f413118 	svcvs	0x00413118
    5334:	91310031 	teqls	r1, r1, lsr r0
    5338:	1483b110 	strne	fp, [r3], #272	; 0x110
    533c:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    5340:	10257000 	eorne	r7, r5, r0
    5344:	9100c050 	qaddls	ip, r0, r0
    5348:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    534c:	6f031420 	svcvs	0x00031420
    5350:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5354:	3182c022 	orrcc	ip, r2, r2, lsr #32
    5358:	91310021 	teqls	r1, r1, lsr #32
    535c:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    5360:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5364:	3182c082 	orrcc	ip, r2, r2, lsl #1
    5368:	91310021 	teqls	r1, r1, lsr #32
    536c:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    5370:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    5374:	00213182 	eoreq	r3, r1, r2, lsl #3
    5378:	b1109131 	tstlt	r0, r1, lsr r1
    537c:	31151050 	tstcc	r5, r0, asr r0
    5380:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    5384:	643f7000 	ldrtvs	r7, [pc], #-0	; 538c <patchGenfskRfe+0x110>
    5388:	1031c052 	eorsne	ip, r1, r2, asr r0
    538c:	31610631 	cmncc	r1, r1, lsr r6
    5390:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    5394:	1031c112 	eorsne	ip, r1, r2, lsl r1
    5398:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    539c:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    53a0:	70006442 	andvc	r6, r0, r2, asr #8
    53a4:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    53a8:	8220c088 	eorhi	ip, r0, #136	; 0x88
    53ac:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    53b0:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    53b4:	3001c041 	andcc	ip, r1, r1, asr #32
    53b8:	1a181418 	bne	60a420 <__ccfg+0x5ea478>
    53bc:	8230c089 	eorshi	ip, r0, #137	; 0x89
    53c0:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    53c4:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    53c8:	3001c041 	andcc	ip, r1, r1, asr #32
    53cc:	1a191419 	bne	64a438 <__ccfg+0x62a490>
    53d0:	9136643c 	teqls	r6, ip, lsr r4
    53d4:	9134b110 	teqls	r4, r0, lsl r1
    53d8:	b054b110 	subslt	fp, r4, r0, lsl r1
    53dc:	a0547100 	subsge	r7, r4, r0, lsl #2
    53e0:	80f0b064 	rscshi	fp, r0, r4, rrx
    53e4:	40af2200 	adcmi	r2, pc, r0, lsl #4
    53e8:	90b01240 	adcsls	r1, r0, r0, asr #4
    53ec:	8253b032 	subshi	fp, r3, #50	; 0x32
    53f0:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    53f4:	643f6485 	ldrtvs	r6, [pc], #-1157	; 53fc <patchGenfskRfe+0x180>
    53f8:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    53fc:	c1706442 	cmngt	r0, r2, asr #8
    5400:	c11168c2 	tstgt	r1, r2, asr #17
    5404:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    5408:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    540c:	9100c050 	qaddls	ip, r0, r0
    5410:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    5414:	16141615 			; <UNDEFINED> instruction: 0x16141615
    5418:	10531042 	subsne	r1, r3, r2, asr #32
    541c:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    5420:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    5424:	31313981 	teqcc	r1, r1, lsl #19
    5428:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    542c:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    5430:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    5434:	10731062 	rsbsne	r1, r3, r2, rrx
    5438:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    543c:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    5440:	101b3981 	andsne	r3, fp, r1, lsl #19
    5444:	c0e26572 	rscgt	r6, r2, r2, ror r5
    5448:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    544c:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    5450:	b0610002 	rsblt	r0, r1, r2
    5454:	91327100 	teqls	r2, r0, lsl #2
    5458:	a051b110 	subsge	fp, r1, r0, lsl r1
    545c:	7227b061 	eorvc	fp, r7, #97	; 0x61
    5460:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    5464:	12800000 	addne	r0, r0, #0
    5468:	b03290b0 	ldrhtlt	r9, [r2], -r0
    546c:	c0507000 	subsgt	r7, r0, r0
    5470:	72279100 	eorvc	r9, r7, #0, 2
    5474:	10629299 	mlsne	r2, r9, r2, r9
    5478:	c3f01073 	mvnsgt	r1, #115	; 0x73
    547c:	31218231 			; <UNDEFINED> instruction: 0x31218231
    5480:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    5484:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    5488:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    548c:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    5490:	10531042 	subsne	r1, r3, r2, asr #32
    5494:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    5498:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    549c:	31313981 	teqcc	r1, r1, lsl #19
    54a0:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    54a4:	b061a051 	rsblt	sl, r1, r1, asr r0
    54a8:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    54ac:	643f6918 	ldrtvs	r6, [pc], #-2328	; 54b4 <patchGenfskRfe+0x238>
    54b0:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    54b4:	c1016442 	tstgt	r1, r2, asr #8
    54b8:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    54bc:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    54c0:	b1109135 	tstlt	r0, r5, lsr r1
    54c4:	64858253 	strvs	r8, [r5], #595	; 0x253
    54c8:	90b012c0 	adcsls	r1, r0, r0, asr #5
    54cc:	7000b032 	andvc	fp, r0, r2, lsr r0
    54d0:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    54d4:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    54d8:	c111c122 	tstgt	r1, r2, lsr #2
    54dc:	c0026442 	andgt	r6, r2, r2, asr #8
    54e0:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    54e4:	c331c062 	teqgt	r1, #98	; 0x62
    54e8:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    54ec:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    54f0:	c111c302 	tstgt	r1, r2, lsl #6
    54f4:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    54f8:	64853953 	strvs	r3, [r5], #2387	; 0x953
    54fc:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    5500:	41402211 	cmpmi	r0, r1, lsl r2
    5504:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    5508:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    550c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5510:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    5514:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    5518:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    551c:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    5520:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    5524:	70006954 	andvc	r6, r0, r4, asr r9
    5528:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    552c:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    5530:	c011c252 	andsgt	ip, r1, r2, asr r2
    5534:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    5538:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    553c:	c101c002 	tstgt	r1, r2
    5540:	c0626442 	rsbgt	r6, r2, r2, asr #8
    5544:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    5548:	c101c122 	tstgt	r1, r2, lsr #2
    554c:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    5550:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    5554:	c101c302 	tstgt	r1, r2, lsl #6
    5558:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    555c:	70006485 	andvc	r6, r0, r5, lsl #9
    5560:	7100b061 	tstvc	r0, r1, rrx
    5564:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    5568:	91334d7a 	teqls	r3, sl, ror sp
    556c:	7000b110 	andvc	fp, r0, r0, lsl r1
    5570:	b1109132 	tstlt	r0, r2, lsr r1
    5574:	70006972 	andvc	r6, r0, r2, ror r9
    5578:	7100b061 	tstvc	r0, r1, rrx
    557c:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    5580:	91324986 	teqls	r2, r6, lsl #19
    5584:	7000b110 	andvc	fp, r0, r0, lsl r1
    5588:	b1109133 	tstlt	r0, r3, lsr r1
    558c:	7000697e 	andvc	r6, r0, lr, ror r9
    5590:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    5594:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    5598:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    559c:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    55a0:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    55a4:	10541405 	subsne	r1, r4, r5, lsl #8
    55a8:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    55ac:	c0e67000 	rscgt	r7, r6, r0
    55b0:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    55b4:	10671416 	rsbne	r1, r7, r6, lsl r4
    55b8:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    55bc:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    55c0:	73067000 	movwvc	r7, #24576	; 0x6000
    55c4:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    55c8:	b050720e 	subslt	r7, r0, lr, lsl #4
    55cc:	80817100 	addhi	r7, r1, r0, lsl #2
    55d0:	a050b060 	subsge	fp, r0, r0, rrx
    55d4:	22418092 	subcs	r8, r1, #146	; 0x92
    55d8:	808045c3 	addhi	r4, r0, r3, asr #11
    55dc:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    55e0:	11011630 	tstne	r1, r0, lsr r6
    55e4:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    55e8:	61d761d6 	ldrsbvs	r6, [r7, #22]
    55ec:	61d961d8 	ldrsbvs	r6, [r9, #24]
    55f0:	61db61da 	ldrsbvs	r6, [fp, #26]
    55f4:	61de61dc 	ldrsbvs	r6, [lr, #28]
    55f8:	61e261e0 	mvnvs	r6, r0, ror #3
    55fc:	633661e4 	teqvs	r6, #228, 2	; 0x39
    5600:	80916339 	addshi	r6, r1, r9, lsr r3
    5604:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    5608:	80823121 	addhi	r3, r2, r1, lsr #2
    560c:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    5610:	11011632 	tstne	r1, r2, lsr r6
    5614:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    5618:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    561c:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    5620:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    5624:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    5628:	61e661e6 	mvnvs	r6, r6, ror #3
    562c:	61e661e6 	mvnvs	r6, r6, ror #3
    5630:	61e661e6 	mvnvs	r6, r6, ror #3
    5634:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    5638:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    563c:	61e6652a 	mvnvs	r6, sl, lsr #10
    5640:	61e66556 	mvnvs	r6, r6, asr r5
    5644:	61e66746 	mvnvs	r6, r6, asr #14
    5648:	90b01210 	adcsls	r1, r0, r0, lsl r2
    564c:	7306720e 	movwvc	r7, #25102	; 0x620e
    5650:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    5654:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    5658:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    565c:	c003c1d4 	ldrdgt	ip, [r3], -r4
    5660:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    5664:	91507840 	cmpls	r0, r0, asr #16
    5668:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    566c:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    5670:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    5674:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    5678:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    567c:	91907830 	orrsls	r7, r0, r0, lsr r8
    5680:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    5684:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    5688:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    568c:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    5690:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    5694:	a054a0e2 	subsge	sl, r4, r2, ror #1
    5698:	225080f0 	subscs	r8, r0, #240	; 0xf0
    569c:	80404615 	subhi	r4, r0, r5, lsl r6
    56a0:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    56a4:	a040620d 	subge	r6, r0, sp, lsl #4
    56a8:	318d822d 	orrcc	r8, sp, sp, lsr #4
    56ac:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    56b0:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    56b4:	821a1009 	andshi	r1, sl, #9
    56b8:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    56bc:	39808210 	stmibcc	r0, {r4, r9, pc}
    56c0:	100e0410 	andne	r0, lr, r0, lsl r4
    56c4:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    56c8:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    56cc:	cfe07229 	svcgt	0x00e07229
    56d0:	b013673c 	andslt	r6, r3, ip, lsr r7
    56d4:	66c8b003 	strbvs	fp, [r8], r3
    56d8:	b050b053 	subslt	fp, r0, r3, asr r0
    56dc:	b064b054 	rsblt	fp, r4, r4, asr r0
    56e0:	66a5b013 	ssatvs	fp, #6, r3
    56e4:	22e08210 	rsccs	r8, r0, #16, 4
    56e8:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    56ec:	80417100 	subhi	r7, r1, r0, lsl #2
    56f0:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    56f4:	221080f0 	andscs	r8, r0, #240	; 0xf0
    56f8:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    56fc:	b0644718 	rsblt	r4, r4, r8, lsl r7
    5700:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    5704:	66ceb063 	strbvs	fp, [lr], r3, rrx
    5708:	22e08210 	rsccs	r8, r0, #16, 4
    570c:	66704638 			; <UNDEFINED> instruction: 0x66704638
    5710:	b0646238 	rsblt	r6, r4, r8, lsr r2
    5714:	318f816f 	orrcc	r8, pc, pc, ror #2
    5718:	dfd03d8f 	svcle	0x00d03d8f
    571c:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    5720:	80417100 	subhi	r7, r1, r0, lsl #2
    5724:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    5728:	80f0b064 	rscshi	fp, r0, r4, rrx
    572c:	42652250 	rsbmi	r2, r5, #80, 4
    5730:	8211b063 	andshi	fp, r1, #99	; 0x63
    5734:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    5738:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    573c:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    5740:	66704652 			; <UNDEFINED> instruction: 0x66704652
    5744:	81616252 	cmnhi	r1, r2, asr r2
    5748:	31818172 	orrcc	r8, r1, r2, ror r1
    574c:	31823d81 	orrcc	r3, r2, r1, lsl #27
    5750:	efc03d82 	svc	0x00c03d82
    5754:	930292f1 	movwls	r9, #8945	; 0x22f1
    5758:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    575c:	91c081b0 	strhls	r8, [r0, #16]
    5760:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    5764:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    5768:	0bf34e7f 	bleq	ffcd916c <_estack+0xdfcd416c>
    576c:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    5770:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    5774:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    5778:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    577c:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    5780:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    5784:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    5788:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    578c:	1a1ba290 	bne	6ee1d4 <__ccfg+0x6ce22c>
    5790:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    5794:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    5798:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    579c:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    57a0:	4aa21c9b 	bmi	fe88ca14 <_estack+0xde887a14>
    57a4:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    57a8:	821010b2 	andshi	r1, r0, #178	; 0xb2
    57ac:	429d22d0 	addsmi	r2, sp, #208, 4
    57b0:	221080f0 	andscs	r8, r0, #240	; 0xf0
    57b4:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    57b8:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    57bc:	629410ab 	addsvs	r1, r4, #171	; 0xab
    57c0:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    57c4:	82307000 	eorshi	r7, r0, #0
    57c8:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    57cc:	7100b063 	tstvc	r0, r3, rrx
    57d0:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    57d4:	7000b0e0 	andvc	fp, r0, r0, ror #1
    57d8:	91c281b2 	strhls	r8, [r2, #18]
    57dc:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    57e0:	81511812 	cmphi	r1, r2, lsl r8
    57e4:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    57e8:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    57ec:	4abf1c12 	bmi	fefcc83c <_estack+0xdefc783c>
    57f0:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    57f4:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    57f8:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    57fc:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    5800:	9162c812 	cmnls	r2, r2, lsl r8
    5804:	b0319172 	eorslt	r9, r1, r2, ror r1
    5808:	7000b0e1 	andvc	fp, r0, r1, ror #1
    580c:	c006c008 	andgt	ip, r6, r8
    5810:	9160c800 	cmnls	r0, r0, lsl #16
    5814:	70009170 	andvc	r9, r0, r0, ror r1
    5818:	81b08201 	lslshi	r8, r1, #4
    581c:	81d091c0 	bicshi	r9, r0, r0, asr #3
    5820:	81511810 	cmphi	r1, r0, lsl r8
    5824:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    5828:	824280e1 	subhi	r8, r2, #225	; 0xe1
    582c:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    5830:	4ae41c20 	bmi	ff90c8b8 <_estack+0xdf9078b8>
    5834:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    5838:	b03246e8 	eorslt	r4, r2, r8, ror #13
    583c:	dfa01005 	svcle	0x00a01005
    5840:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    5844:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    5848:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    584c:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    5850:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    5854:	42f61e01 	rscsmi	r1, r6, #1, 28
    5858:	c0101618 	andsgt	r1, r0, r8, lsl r6
    585c:	1c083010 	stcne	0, cr3, [r8], {16}
    5860:	10604704 	rsbne	r4, r0, r4, lsl #14
    5864:	10063c10 	andne	r3, r6, r0, lsl ip
    5868:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    586c:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    5870:	81719166 	cmnhi	r1, r6, ror #2
    5874:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    5878:	4b011c16 	blmi	4c8d8 <__ccfg+0x2c930>
    587c:	b0319176 	eorslt	r9, r1, r6, ror r1
    5880:	c008c006 	andgt	ip, r8, r6
    5884:	81617000 	cmnhi	r1, r0
    5888:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    588c:	39808240 	stmibcc	r0, {r6, r9, pc}
    5890:	1cf11801 	ldclne	8, cr1, [r1], #4
    5894:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    5898:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    589c:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    58a0:	ef90b033 	svc	0x0090b033
    58a4:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    58a8:	7000673c 	andvc	r6, r0, ip, lsr r7
    58ac:	b063a003 	rsblt	sl, r3, r3
    58b0:	b0efb064 	rsclt	fp, pc, r4, rrx
    58b4:	71006556 	tstvc	r0, r6, asr r5
    58b8:	22008040 	andcs	r8, r0, #64	; 0x40
    58bc:	b064472b 	rsblt	r4, r4, fp, lsr #14
    58c0:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    58c4:	80407100 	subhi	r7, r0, r0, lsl #2
    58c8:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    58cc:	b003b064 	andlt	fp, r3, r4, rrx
    58d0:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    58d4:	31828162 	orrcc	r8, r2, r2, ror #2
    58d8:	ef803d82 	svc	0x00803d82
    58dc:	930292f1 	movwls	r9, #8945	; 0x22f1
    58e0:	a003673c 	andge	r6, r3, ip, lsr r7
    58e4:	61e66556 	mvnvs	r6, r6, asr r5
    58e8:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    58ec:	b05061e6 	subslt	r6, r0, r6, ror #3
    58f0:	61e67100 	mvnvs	r7, r0, lsl #2
    58f4:	82d092e0 	sbcshi	r9, r0, #224, 4
    58f8:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    58fc:	7000b2c0 	andvc	fp, r0, r0, asr #5
    5900:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    5904:	b0304359 	eorslt	r4, r0, r9, asr r3
    5908:	3162c102 	cmncc	r2, r2, lsl #2
    590c:	80a0c001 	adchi	ip, r0, r1
    5910:	43521e00 	cmpmi	r2, #0, 28
    5914:	435322f0 	cmpmi	r3, #240, 4
    5918:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    591c:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    5920:	1a101020 	bne	4099a8 <__ccfg+0x3e9a00>
    5924:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    5928:	16121611 			; <UNDEFINED> instruction: 0x16121611
    592c:	70006b54 	andvc	r6, r0, r4, asr fp

00005930 <patchImageGenfsk>:
    5930:	210004ad 	smlatbcs	r0, sp, r4, r0
    5934:	21000449 	tstcs	r0, r9, asr #8
    5938:	2100047d 	tstcs	r0, sp, ror r4
    593c:	21000481 	smlabbcs	r0, r1, r4, r0
    5940:	21000511 	tstcs	r0, r1, lsl r5
    5944:	21000591 			; <UNDEFINED> instruction: 0x21000591
    5948:	21000641 	tstcs	r0, r1, asr #12
    594c:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    5950:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    5954:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    5958:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    595c:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    5960:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    5964:	d00b079b 	mulle	fp, fp, r7
    5968:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    596c:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    5970:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    5974:	240f490e 	strcs	r4, [pc], #-2318	; 597c <patchImageGenfsk+0x4c>
    5978:	43200224 			; <UNDEFINED> instruction: 0x43200224
    597c:	82c83160 	sbchi	r3, r8, #96, 2
    5980:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    5984:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    5988:	2100026b 	tstcs	r0, fp, ror #4
    598c:	00004ce5 	andeq	r4, r0, r5, ror #25
    5990:	e0014809 	and	r4, r1, r9, lsl #16
    5994:	0c004808 	stceq	8, cr4, [r0], {8}
    5998:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    599c:	2aff7822 	bcs	fffe3a2c <_estack+0xdffdea2c>
    59a0:	7acad101 	bvc	ff2b9dac <_estack+0xdf2b4dac>
    59a4:	31607022 	cmncc	r0, r2, lsr #32
    59a8:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    59ac:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    59b0:	40086200 	andmi	r6, r8, r0, lsl #4
    59b4:	210006a4 	smlatbcs	r0, r4, r6, r0
    59b8:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    59bc:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    59c0:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    59c4:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    59c8:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    59cc:	4a11d006 	bmi	4799ec <__ccfg+0x459a44>
    59d0:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    59d4:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    59d8:	e000480f 	and	r4, r0, pc, lsl #16
    59dc:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    59e0:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    59e4:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    59e8:	dcf92c00 	ldclle	12, cr2, [r9]
    59ec:	200140e3 	andcs	r4, r1, r3, ror #1
    59f0:	18180340 	ldmdane	r8, {r6, r8, r9}
    59f4:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    59f8:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    59fc:	31802300 	orrcc	r2, r0, r0, lsl #6
    5a00:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    5a04:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    5a08:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    5a0c:	316c4b04 	cmncc	ip, r4, lsl #22
    5a10:	0000e7f6 	strdeq	lr, [r0], -r6
    5a14:	00005c83 	andeq	r5, r0, r3, lsl #25
    5a18:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    5a1c:	230d8300 	movwcs	r8, #54016	; 0xd300
    5a20:	21000674 	tstcs	r0, r4, ror r6
    5a24:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    5a28:	6b714605 	blvs	1c57244 <__ccfg+0x1c3729c>
    5a2c:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    5a30:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    5a34:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    5a38:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    5a3c:	7b00d00f 	blvc	39a80 <__ccfg+0x19ad8>
    5a40:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    5a44:	4f152001 	svcmi	0x00152001
    5a48:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    5a4c:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    5a50:	09c18800 	stmibeq	r1, {fp, pc}^
    5a54:	d00407c9 	andle	r0, r4, r9, asr #15
    5a58:	7ac0e016 	bvc	ff03dab8 <_estack+0xdf038ab8>
    5a5c:	7b40e7f0 	blvc	103fa24 <__ccfg+0x101fa7c>
    5a60:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    5a64:	61cc6374 	bicvs	r6, ip, r4, ror r3
    5a68:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    5a6c:	2001d00c 	andcs	sp, r1, ip
    5a70:	6b310380 	blvs	c46878 <__ccfg+0xc268d0>
    5a74:	d0012d00 	andle	r2, r1, r0, lsl #26
    5a78:	e0004301 	and	r4, r0, r1, lsl #6
    5a7c:	46084381 	strmi	r4, [r8], -r1, lsl #7
    5a80:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    5a84:	63483940 	movtvs	r3, #35136	; 0x8940
    5a88:	47b82000 	ldrmi	r2, [r8, r0]!
    5a8c:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    5a90:	21000280 	smlabbcs	r0, r0, r2, r0
    5a94:	21000088 	smlabbcs	r0, r8, r0, r0
    5a98:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    5a9c:	00003f7b 	andeq	r3, r0, fp, ror pc
    5aa0:	40044040 	andmi	r4, r4, r0, asr #32
    5aa4:	4a22b510 	bmi	8b2eec <__ccfg+0x892f44>
    5aa8:	61512100 	cmpvs	r1, r0, lsl #2
    5aac:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    5ab0:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    5ab4:	4b204921 	blmi	817f40 <__ccfg+0x7f7f98>
    5ab8:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    5abc:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    5ac0:	e0004313 	and	r4, r0, r3, lsl r3
    5ac4:	634b4393 	movtvs	r4, #45971	; 0xb393
    5ac8:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    5acc:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    5ad0:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    5ad4:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    5ad8:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    5adc:	09c08800 	stmibeq	r0, {fp, pc}^
    5ae0:	d12207c0 	smlawtle	r2, r0, r7, r0
    5ae4:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    5ae8:	d11e2800 	tstle	lr, r0, lsl #16
    5aec:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    5af0:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    5af4:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    5af8:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    5afc:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    5b00:	2008d213 	andcs	sp, r8, r3, lsl r2
    5b04:	6a686160 	bvs	1a1e08c <__ccfg+0x19fe0e4>
    5b08:	01400940 	cmpeq	r0, r0, asr #18
    5b0c:	4a0e6020 	bmi	39db94 <__ccfg+0x37dbec>
    5b10:	62d12100 	sbcsvs	r2, r1, #0, 2
    5b14:	21024a0d 	tstcs	r2, sp, lsl #20
    5b18:	21016011 	tstcs	r1, r1, lsl r0
    5b1c:	60204308 	eorvs	r4, r0, r8, lsl #6
    5b20:	43082103 	movwmi	r2, #33027	; 0x8103
    5b24:	60206268 	eorvs	r6, r0, r8, ror #4
    5b28:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    5b2c:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    5b30:	40044000 	andmi	r4, r4, r0
    5b34:	21000018 	tstcs	r0, r8, lsl r0
    5b38:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    5b3c:	21000280 	smlabbcs	r0, r0, r2, r0
    5b40:	000068cf 	andeq	r6, r0, pc, asr #17
    5b44:	21000068 	tstcs	r0, r8, rrx
    5b48:	40041100 	andmi	r1, r4, r0, lsl #2
    5b4c:	e000e280 	and	lr, r0, r0, lsl #5
    5b50:	00003bc3 	andeq	r3, r0, r3, asr #23
    5b54:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    5b58:	2004d000 	andcs	sp, r4, r0
    5b5c:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    5b60:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    5b64:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    5b68:	2080e000 	addcs	lr, r0, r0
    5b6c:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    5b70:	00004770 	andeq	r4, r0, r0, ror r7
    5b74:	2100026b 	tstcs	r0, fp, ror #4
    5b78:	40046058 	andmi	r6, r4, r8, asr r0
    5b7c:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    5b80:	bd019001 	stclt	0, cr9, [r1, #-4]
    5b84:	00006fa5 	andeq	r6, r0, r5, lsr #31
    5b88:	00000000 	andeq	r0, r0, r0
    5b8c:	00030001 	andeq	r0, r3, r1
    5b90:	001f000a 	andseq	r0, pc, sl
    5b94:	00eb0059 	rsceq	r0, fp, r9, asr r0
    5b98:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    5b9c:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    5ba0:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    5ba4:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    5ba8:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    5bac:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    5bb0:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    5bb4:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    5bb8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00005bbc <ratable>:
    5bbc:	12c5000b 	sbcne	r0, r5, #11
    5bc0:	2de00007 	stclcs	0, cr0, [r0, #28]!
    5bc4:	8000000f 	andhi	r0, r0, pc
    5bc8:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    5bcc:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    5bd0:	6374206c 	cmnvs	r4, #108	; 0x6c
    5bd4:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    5bd8:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    5bdc:	00006c6c 	andeq	r6, r0, ip, ror #24

00005be0 <plug_null>:
    5be0:	000030f1 	strdeq	r3, [r0], -r1
    5be4:	00003099 	muleq	r0, r9, r0
    5be8:	000030bd 	strheq	r3, [r0], -sp
    5bec:	000030e1 	andeq	r3, r0, r1, ror #1
    5bf0:	000030e9 	andeq	r3, r0, r9, ror #1
    5bf4:	000030ed 	andeq	r3, r0, sp, ror #1
    5bf8:	00000000 	andeq	r0, r0, r0
    5bfc:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <array.6522>:
	...

20000554 <discovery_wait_flag.6580>:
20000554:	00000000 	andeq	r0, r0, r0

20000558 <incoming_packet.6521>:
20000558:	00000000 	andeq	r0, r0, r0

2000055c <packet.6501>:
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <response_flag>:
word response_flag=0;
20000560:	00000000 	andeq	r0, r0, r0

20000564 <response_message_5.6520>:
20000564:	00000000 	andeq	r0, r0, r0

20000568 <user_provided_index.6582>:
	...

20000569 <user_provided_receiver_id.6583>:
	...

2000056a <user_provided_record.6581>:
	...

2000057e <setdel>:
	...

20000580 <urates>:
static word urates [N_UARTS];
20000580:	00000000 	andeq	r0, r0, r0

20000584 <__PCB>:
20000584:	00000000 	andeq	r0, r0, r0

20000588 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000588:	00000000 	andeq	r0, r0, r0

2000058c <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
2000058c:	00000000 	andeq	r0, r0, r0

20000590 <mevent>:
20000590:	00000000 	andeq	r0, r0, r0

20000594 <mnfree>:
20000594:	00000000 	andeq	r0, r0, r0

20000598 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000598:	00000000 	andeq	r0, r0, r0

2000059c <descriptors>:
	...

200005bc <oqueues>:
	...

200005c8 <physical>:
	...

200005d4 <physinfo>:
	...

200005e0 <plugins>:
	...

200005ec <dopen>:
	...

200005ed <dstat>:
	...

200005ee <bckf_timer>:
	...

200005f0 <channel>:
200005f0:	00000000 	andeq	r0, r0, r0

200005f4 <drvprcs>:
static aword drvprcs, qevent;
200005f4:	00000000 	andeq	r0, r0, r0

200005f8 <dstate>:
200005f8:	00000000 	andeq	r0, r0, r0

200005fc <paylen>:
static	int paylen = 0;			// Current TX payload length
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <physid>:
static word	physid,
20000600:	00000000 	andeq	r0, r0, r0

20000604 <qevent>:
static aword drvprcs, qevent;
20000604:	00000000 	andeq	r0, r0, r0

20000608 <rbuffl>:
20000608:	00000000 	andeq	r0, r0, r0

2000060c <rfTrim>:
	...

2000061c <rxstat>:
	...

20000628 <statid>:
	...

2000062a <txtries>:
	...

2000062c <ndsc_null>:
2000062c:	00000000 	andeq	r0, r0, r0

20000630 <len.5699>:
20000630:	00000000 	andeq	r0, r0, r0

20000634 <ptr.5698>:
20000634:	00000000 	andeq	r0, r0, r0

20000638 <__inpline>:
char *__inpline = NULL;
20000638:	00000000 	andeq	r0, r0, r0

2000063c <len.5700>:
2000063c:	00000000 	andeq	r0, r0, r0

20000640 <ptr.5699>:
20000640:	00000000 	andeq	r0, r0, r0

20000644 <oscHfGlobals>:
	...

20000658 <powerQualGlobals>:
	...

20000660 <response_checker>:
	...

20000668 <reason>:
	...

2000069a <CHOICE>:
	...

2000069c <node_db>:
struct Node *node_db; // globally defined struct, represents the node.
2000069c:	00000000 	andeq	r0, r0, r0

200006a0 <__pi_uart>:
	...

200006a8 <system_event_count>:
200006a8:	00000000 	andeq	r0, r0, r0

200006ac <entropy>:
200006ac:	00000000 	andeq	r0, r0, r0

200006b0 <__pi_mintk>:
	...

200006b2 <__pi_old>:
	...

200006b4 <__pi_systat>:
	...

200006bc <__pi_new>:
200006bc:	00000000 	andeq	r0, r0, r0

200006c0 <__pi_utims>:
	...

200006d0 <__pi_curr>:
200006d0:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200006d4 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001c0a 	andeq	r1, r0, sl, lsl #24
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000a3 	andeq	r0, r0, r3, lsr #1
    return node->data_base.item_array[index];
      10:	0008270c 	andeq	r2, r8, ip, lsl #14
      14:	000dec00 	andeq	lr, sp, r0, lsl #24
      18:	00015000 	andeq	r5, r1, r0
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	00000422 	andeq	r0, r0, r2, lsr #8
      2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
      30:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
      34:	00000bc5 	andeq	r0, r0, r5, asr #23
      38:	16015e02 	strne	r5, [r1], -r2, lsl #28
      3c:	00000025 	andeq	r0, r0, r5, lsr #32
			i = k;
      40:	4d060102 	stfmis	f0, [r6, #-8]
				j->Next = k;
      44:	0200000c 	andeq	r0, r0, #12
      48:	0c4b0801 	mcrreq	8, 0, r0, fp, cr1
}
      4c:	02020000 	andeq	r0, r2, #0
      50:	000a5b05 	andeq	r5, sl, r5, lsl #22
      54:	07020200 	streq	r0, [r2, -r0, lsl #4]
		release;
      58:	00000d48 	andeq	r0, r0, r8, asr #26
      5c:	ed050402 	cfstrs	mvf0, [r5, #-8]
			nq++;
      60:	02000007 	andeq	r0, r0, #7
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
      68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      6c:	0007e805 	andeq	lr, r7, r5, lsl #16
      70:	07080200 	streq	r0, [r8, -r0, lsl #4]
      74:	00000418 	andeq	r0, r0, r8, lsl r4
      78:	000e2b05 	andeq	r2, lr, r5, lsl #22
      7c:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
      80:	0000005c 	andeq	r0, r0, ip, asr r0
      84:	0002f605 	andeq	pc, r2, r5, lsl #12
      88:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
      8c:	0000005c 	andeq	r0, r0, ip, asr r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	a5030406 	strge	r0, [r3, #-1030]	; 0xfffffbfa
      94:	0000b203 	andeq	fp, r0, r3, lsl #4
      98:	075c0700 	ldrbeq	r0, [ip, -r0, lsl #14]
	if (baction == NULL)
      9c:	a7030000 	strge	r0, [r3, -r0]
      a0:	0000330c 	andeq	r3, r0, ip, lsl #6
	(*baction) (pbutton);
      a4:	0aa40700 	beq	fe901cac <_estack+0xde8fccac>
endthread
      a8:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000b213 	andeq	fp, r0, r3, lsl r2
      b0:	47080000 	strmi	r0, [r8, -r0]
endthread
      b4:	c2000000 	andgt	r0, r0, #0
      b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      bc:	00000025 	andeq	r0, r0, r5, lsr #32
      c0:	080a0003 	stmdaeq	sl, {r0, r1}
      c4:	e609a203 	str	sl, [r9], -r3, lsl #4
fsm sender(struct ResponseMessage *message) {
      c8:	0b000000 	bleq	d0 <sender+0x8>
      cc:	00000385 	andeq	r0, r0, r5, lsl #7
      d0:	2c07a403 	cfstrscs	mvf10, [r7], {3}
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	0005f10b 	andeq	pc, r5, fp, lsl #2
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	05a90300 	streq	r0, [r9, #768]!	; 0x300
      e0:	00000090 	muleq	r0, r0, r0
      e4:	a5050004 	strge	r0, [r5, #-4]
      e8:	03000008 	movweq	r0, #8
      ec:	00c203aa 	sbceq	r0, r2, sl, lsr #7
		packet[1] = message->gid;
      f0:	040c0000 	streq	r0, [ip], #-0
      f4:	000b800d 	andeq	r8, fp, sp
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	00110400 	andseq	r0, r1, r0, lsl #8
      fc:	0000010c 	andeq	r0, r0, ip, lsl #2
		DEBUG_PRINT("I am th message GID %d", message->gid);
     100:	00085d0e 	andeq	r5, r8, lr, lsl #26
     104:	0000f200 	andeq	pc, r0, r0, lsl #4
		*p = message->tpe;p++;
     108:	00010000 	andeq	r0, r1, r0
		*p = message->request_number;p++;
     10c:	00083205 	andeq	r3, r8, r5, lsl #4
		*p = message->sender_id;p++;
     110:	17160400 	ldrne	r0, [r6, -r0, lsl #8]
		*p = message->receiver_id;p++;
     114:	00000063 	andeq	r0, r0, r3, rrx
		switch(message->tpe) {
     118:	00024a05 	andeq	r4, r2, r5, lsl #20
     11c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
     120:	0000002c 	andeq	r0, r0, ip, lsr #32
		tcv_endp(packet);
     124:	00071a05 	andeq	r1, r7, r5, lsl #20
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	1b230400 	blne	8c1130 <__ccfg+0x8a1188>
     12c:	00000118 	andeq	r0, r0, r8, lsl r1
}
     130:	0003290f 	andeq	r2, r3, pc, lsl #18
		finish;
     134:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
     138:	00018a08 	andeq	r8, r1, r8, lsl #20
     13c:	0ea60b00 	vfmaeq.f64	d0, d6, d0
				strncpy(p, message->record, sizeof(message->record));
     140:	36040000 	strcc	r0, [r4], -r0
				*p = message->padding;p++;
     144:	00018a13 	andeq	r8, r1, r3, lsl sl
				strncpy(p, message->record, sizeof(message->record));
     148:	5f100000 	svcpl	0x00100000
     14c:	3704006b 	strcc	r0, [r4, -fp, rrx]
     150:	00002c07 	andeq	r2, r0, r7, lsl #24
				strncpy(p, message->record, sizeof(message->record));
     154:	520b0400 	andpl	r0, fp, #0, 8
     158:	0400000b 	streq	r0, [r0], #-11
				strncpy(p, message->record, sizeof(message->record));
     15c:	002c0b37 	eoreq	r0, ip, r7, lsr fp
				break;
     160:	0b080000 	bleq	200168 <__ccfg+0x1e01c0>
				*p = message->record_index;p++;
     164:	000043d7 	ldrdeq	r4, [r0], -r7
				*p = message->padding;
     168:	2c143704 	ldccs	7, cr3, [r4], {4}
				break;
     16c:	0c000000 	stceq	0, cr0, [r0], {-0}
     170:	00044c0b 	andeq	r4, r4, fp, lsl #24
     174:	1b370400 	blne	dc117c <__ccfg+0xda11d4>
     178:	0000002c 	andeq	r0, r0, ip, lsr #32
     17c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
     180:	0b380400 	bleq	e01188 <__ccfg+0xde11e0>
		node->nnodes[i] = 0;
     184:	00000190 	muleq	r0, r0, r1
     188:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
     18c:	00000130 	andeq	r0, r0, r0, lsr r1
     190:	00010c08 	andeq	r0, r1, r8, lsl #24
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	0001a000 	andeq	sl, r1, r0
bool init_node(struct Node* node){
     198:	00250900 	eoreq	r0, r5, r0, lsl #18
    node->id  = 0;                  // default id value 0
     19c:	00000000 	andeq	r0, r0, r0
    node->index = 0;                // default entry count 0
     1a0:	000b6d0f 	andeq	r6, fp, pc, lsl #26
    node->data_base.item_count = 0; // default no items in array
     1a4:	3c042400 	cfstrscc	mvf2, [r4], {-0}
	reset_array(node);
     1a8:	00022308 	andeq	r2, r2, r8, lsl #6
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	055c0b00 	ldrbeq	r0, [ip, #-2816]	; 0xfffff500
     1b0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
};
     1b4:	00002c07 	andeq	r2, r0, r7, lsl #24
     1b8:	ae0b0000 	cdpge	0, 0, cr0, cr11, cr0, {0}
uint8_t generate_request_num(void){
     1bc:	04000003 	streq	r0, [r0], #-3
    return (uint8_t) (rand() % 255);
     1c0:	002c073f 	eoreq	r0, ip, pc, lsr r7
     1c4:	0b040000 	bleq	1001cc <__ccfg+0xe0224>
     1c8:	0000034f 	andeq	r0, r0, pc, asr #6
}
     1cc:	2c074004 	stccs	0, cr4, [r7], {4}
            node->nnodes[i] = 0; // set to null byte
     1d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     1d4:	0006640b 	andeq	r6, r6, fp, lsl #8
     1d8:	07410400 	strbeq	r0, [r1, -r0, lsl #8]
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
};
     1e0:	09440b0c 	stmdbeq	r4, {r2, r3, r8, r9, fp}^
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	42040000 	andmi	r0, r4, #0
     1e8:	00002c07 	andeq	r2, r0, r7, lsl #24
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	be0b1000 	cdplt	0, 0, cr1, cr11, cr0, {0}
     1f0:	0400000a 	streq	r0, [r0], #-10
     1f4:	002c0743 	eoreq	r0, ip, r3, asr #14
        node->data_base.item_count -= 1;
     1f8:	0b140000 	bleq	500200 <__ccfg+0x4e0258>
};
     1fc:	0000033d 	andeq	r0, r0, sp, lsr r3
bool delete_all(struct Node *node){
     200:	2c074404 	cfstrscs	mvf4, [r7], {4}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	0005650b 	andeq	r6, r5, fp, lsl #10
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	07450400 	strbeq	r0, [r5, -r0, lsl #8]
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	0000002c 	andeq	r0, r0, ip, lsr #32
            node->data_base.item_array[i].timestamp = 0;
     214:	08e00b1c 	stmiaeq	r0!, {r2, r3, r4, r8, r9, fp}^
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	46040000 	strmi	r0, [r4], -r0
    node->data_base.item_count = 0;
     21c:	00002c07 	andeq	r2, r0, r7, lsl #24
}
     220:	12002000 	andne	r2, r0, #0
        return true;
     224:	00000032 	andeq	r0, r0, r2, lsr r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	4f040108 	svcmi	0x00040108
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00026808 	andeq	r6, r2, r8, lsl #16
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	0d0f0b00 	vstreq	d0, [pc, #-0]	; 238 <assemble_response_message+0x12>
     234:	50040000 	andpl	r0, r4, r0
     238:	00026809 	andeq	r6, r2, r9, lsl #16
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	070b0000 	streq	r0, [fp, -r0]
	response_message->tpe = RESPONSE;
     240:	0400000c 	streq	r0, [r0], #-12
	response_message->status = status;
     244:	02680951 	rsbeq	r0, r8, #1327104	; 0x144000
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	13800000 	orrne	r0, r0, #0
	response_message->gid = gid;
     24c:	00000da8 	andeq	r0, r0, r8, lsr #27
	response_message->sender_id = sender_id;
     250:	0c0a5304 	stceq	3, cr5, [sl], {4}
	response_message->status = status;
     254:	00000001 	andeq	r0, r0, r1
	if (!padding){
     258:	0e991301 	cdpeq	3, 9, cr1, cr9, cr1, {0}
		response_message->padding = padding;
     25c:	56040000 	strpl	r0, [r4], -r0
	if (rec != NULL){
     260:	00010c0a 	andeq	r0, r1, sl, lsl #24
     264:	00010400 	andeq	r0, r1, r0, lsl #8
		strncpy(response_message->record, rec, 20);
     268:	0000f208 	andeq	pc, r0, r8, lsl #4
     26c:	00027800 	andeq	r7, r2, r0, lsl #16
     270:	00250900 	eoreq	r0, r5, r0, lsl #18
};
     274:	001f0000 	andseq	r0, pc, r0
fsm receiver(struct Node* node_db) {
     278:	000a0612 	andeq	r0, sl, r2, lsl r6
     27c:	04019000 	streq	r9, [r1], #-0
     280:	02bb0862 	adcseq	r0, fp, #6422528	; 0x620000
     284:	a60b0000 	strge	r0, [fp], -r0
     288:	0400000e 	streq	r0, [r0], #-14
     28c:	02bb1263 	adcseq	r1, fp, #805306374	; 0x30000006
     290:	0b000000 	bleq	298 <receiver+0x20>
     294:	00000574 	andeq	r0, r0, r4, ror r5
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	2c066404 	cfstrscs	mvf6, [r6], {4}
     29c:	04000000 	streq	r0, [r0], #-0
     2a0:	0002fe0b 	andeq	pc, r2, fp, lsl #28
     2a4:	09660400 	stmdbeq	r6!, {sl}^
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	000002c1 	andeq	r0, r0, r1, asr #5
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	00320b08 	eorseq	r0, r2, r8, lsl #22
     2b0:	67040000 	strvs	r0, [r4, -r0]
     2b4:	0002231e 	andeq	r2, r2, lr, lsl r3
		switch (response_message_5->tpe){
     2b8:	11008800 	tstne	r0, r0, lsl #16
     2bc:	00027804 	andeq	r7, r2, r4, lsl #16
     2c0:	02d10800 	sbcseq	r0, r1, #0, 16
     2c4:	02d10000 	sbcseq	r0, r1, #0
     2c8:	25090000 	strcs	r0, [r9, #-0]
     2cc:	1f000000 	svcne	0x00000000
     2d0:	d7041100 	strle	r1, [r4, -r0, lsl #2]
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	14000002 	strne	r0, [r0], #-2
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	0ca70f01 	stceq	15, cr0, [r7], #4
				if (discovery_request_message->gid == node_db->gid){
     2dc:	04080000 	streq	r0, [r8], #-0
     2e0:	0301087a 	movweq	r0, #6266	; 0x187a
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	b90b0000 	stmdblt	fp, {}	; <UNPREDICTABLE>
     2e8:	0400000c 	streq	r0, [r0], #-12
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	0301117b 	movweq	r1, #4475	; 0x117b
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	0b000000 	bleq	2f8 <receiver+0x80>
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	00001d82 	andeq	r1, r0, r2, lsl #27
					response_message_0->sender_id = node_db->id;
     2f8:	2c067c04 	stccs	12, cr7, [r6], {4}
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	04000000 	streq	r0, [r0], #-0
					DEBUG_PRINT("\r\nSending to sender");
     300:	47041100 	strmi	r1, [r4, -r0, lsl #2]
					call sender(response_message_0, done_case);
     304:	0f000000 	svceq	0x00000000
     308:	00000444 	andeq	r0, r0, r4, asr #8
     30c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
     310:	0000044a 	andeq	r0, r0, sl, asr #8
     314:	00705f10 	rsbseq	r5, r0, r0, lsl pc
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	0112bb04 	tsteq	r2, r4, lsl #22
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	00000003 	andeq	r0, r0, r3
     320:	00725f10 	rsbseq	r5, r2, r0, lsl pc
     324:	2c07bc04 	stccs	12, cr11, [r7], {4}
     328:	04000000 	streq	r0, [r0], #-0
     32c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
     330:	2c07bd04 	stccs	13, cr11, [r7], {4}
     334:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     338:	0001bb0b 	andeq	fp, r1, fp, lsl #22
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	09be0400 	ldmibeq	lr!, {sl}
					node_db->index+=1;
     340:	0000004e 	andeq	r0, r0, lr, asr #32
     344:	08490b0c 	stmdaeq	r9, {r2, r3, r8, r9, fp}^
		tcv_endp(incoming_packet);
     348:	bf040000 	svclt	0x00040000
     34c:	00004e09 	andeq	r4, r0, r9, lsl #28
		proceed receiving;
     350:	5f100e00 	svcpl	0x00100e00
		ser_out(response_1_create, "\r\nData Saved");
     354:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
     358:	02d911c0 	sbcseq	r1, r9, #192, 2	; 0x30
		proceed receiving;
     35c:	0b100000 	bleq	400364 <__ccfg+0x3e03bc>
     360:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	2c07c104 	stfcsd	f4, [r7], {4}
     368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
		proceed receiving;
     36c:	0003030b 	andeq	r0, r3, fp, lsl #6
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	0ac80400 	beq	ff201378 <_estack+0xdf1fc378>
     374:	000000f2 	strdeq	r0, [r0], -r2
     378:	1d110b1c 	vldrne	d0, [r1, #-112]	; 0xffffff90
     37c:	ca040000 	bgt	100384 <__ccfg+0xe03dc>
     380:	0005cf09 	andeq	ip, r5, r9, lsl #30
		proceed receiving;
     384:	d80b2000 	stmdale	fp, {sp}
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
     38c:	05fa09cc 	ldrbeq	r0, [sl, #2508]!	; 0x9cc
     390:	0b240000 	bleq	900398 <__ccfg+0x8e03f0>
     394:	00000ec6 	andeq	r0, r0, r6, asr #29
		proceed receiving;
     398:	1f0dcf04 	svcne	0x000dcf04
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	28000006 	stmdacs	r0, {r1, r2}
     3a0:	001cc60b 	andseq	ip, ip, fp, lsl #12
     3a4:	09d00400 	ldmibeq	r0, {sl}^
     3a8:	0000063a 	andeq	r0, r0, sl, lsr r6
		proceed receiving;
     3ac:	755f102c 	ldrbvc	r1, [pc, #-44]	; 388 <receiver+0x110>
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	d3040062 	movwle	r0, #16482	; 0x4062
     3b4:	0002d911 	andeq	sp, r2, r1, lsl r9
     3b8:	5f103000 	svcpl	0x00103000
     3bc:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
		proceed receiving;
     3c0:	030112d4 	movweq	r1, #4820	; 0x12d4
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	10380000 	eorsne	r0, r8, r0
     3c8:	0072755f 	rsbseq	r7, r2, pc, asr r5
		proceed receiving;
     3cc:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
}
     3d0:	3c000000 	stccc	0, cr0, [r0], {-0}
     3d4:	000efd0b 	andeq	pc, lr, fp, lsl #26
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	11d80400 	bicsne	r0, r8, r0, lsl #8
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	00000640 	andeq	r0, r0, r0, asr #12
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	0e460b40 	vmlseq.f64	d16, d6, d0
     3e4:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
     3e8:	00065011 	andeq	r5, r6, r1, lsl r0
     3ec:	5f104300 	svcpl	0x00104300
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
					break;
     3f4:	02d911dc 	sbcseq	r1, r9, #220, 2	; 0x37
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	0b440000 	bleq	1100400 <__ccfg+0x10e0458>
     3fc:	00000b64 	andeq	r0, r0, r4, ror #22
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	2c07df04 	stccs	15, cr13, [r7], {4}
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	4c000000 	stcmi	0, cr0, [r0], {-0}
     408:	0004780b 	andeq	r7, r4, fp, lsl #16
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	0ae00400 	beq	ff801414 <_estack+0xdf7fc414>
     410:	00000078 	andeq	r0, r0, r8, ror r0
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	47350b50 			; <UNDEFINED> instruction: 0x47350b50
     418:	e3040000 	movw	r0, #16384	; 0x4000
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	00046912 	andeq	r6, r4, r2, lsl r9
     420:	8a0b5400 	bhi	2d5428 <__ccfg+0x2b5480>
     424:	0400000b 	streq	r0, [r0], #-11
     428:	01240ce7 	smulwteq	r4, r7, ip
     42c:	0b580000 	bleq	1600434 <__ccfg+0x15e048c>
     430:	00000a0e 	andeq	r0, r0, lr, lsl #20
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	e60ee904 	str	lr, [lr], -r4, lsl #18
					call sender(response_message_2, done_case);
     438:	5c000000 	stcpl	0, cr0, [r0], {-0}
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	000e790b 	andeq	r7, lr, fp, lsl #18
     440:	07ea0400 	strbeq	r0, [sl, r0, lsl #8]!
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	0000002c 	andeq	r0, r0, ip, lsr #32
     448:	01150064 	tsteq	r5, r4, rrx
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	0000002c 	andeq	r0, r0, ip, lsr #32
				DEBUG_PRINT("\r\nDelete rec");
     450:	00000469 	andeq	r0, r0, r9, ror #8
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	00046916 	andeq	r6, r4, r6, lsl r9
     458:	00f21600 	rscseq	r1, r2, r0, lsl #12
     45c:	bd160000 	ldclt	0, cr0, [r6, #-0]
     460:	16000005 	strne	r0, [r0], -r5
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	0000002c 	andeq	r0, r0, ip, lsr #32
     468:	74041100 	strvc	r1, [r4], #-256	; 0xffffff00
     46c:	17000004 	strne	r0, [r0, -r4]
     470:	00000469 	andeq	r0, r0, r9, ror #8
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	000d4118 	andeq	r4, sp, r8, lsl r1
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
     47c:	bd080265 	sfmlt	f0, 4, [r8, #-404]	; 0xfffffe6c
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	19000005 	stmdbne	r0, {r0, r2}
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	000008f4 	strdeq	r0, [r0], -r4
     488:	07026704 	streq	r6, [r2, -r4, lsl #14]
     48c:	0000002c 	andeq	r0, r0, ip, lsr #32
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	07d21900 	ldrbeq	r1, [r2, r0, lsl #18]
						status = (uint8_t) SUCCESS;
     494:	6c040000 	stcvs	0, cr0, [r4], {-0}
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	06ac0b02 	strteq	r0, [ip], r2, lsl #22
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4a0:	000002ee 	andeq	r0, r0, lr, ror #5
     4a4:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
     4a8:	000006ac 	andeq	r0, r0, ip, lsr #13
     4ac:	0eec1908 	vfmaeq.f16	s3, s24, s16	; <UNPREDICTABLE>
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	6c040000 	stcvs	0, cr0, [r4], {-0}
     4b4:	06ac1e02 	strteq	r1, [ip], r2, lsl #28
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     4bc:	0000056f 	andeq	r0, r0, pc, ror #10
     4c0:	07026e04 	streq	r6, [r2, -r4, lsl #28]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c8:	04c41910 	strbeq	r1, [r4], #2320	; 0x910
     4cc:	6f040000 	svcvs	0x00040000
     4d0:	08ac0802 	stmiaeq	ip!, {r1, fp}
     4d4:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     4d8:	00000e59 	andeq	r0, r0, r9, asr lr
     4dc:	07027204 	streq	r7, [r2, -r4, lsl #4]
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e4:	42831930 	addmi	r1, r3, #48, 18	; 0xc0000
     4e8:	73040000 	movwvc	r0, #16384	; 0x4000
     4ec:	08c21602 	stmiaeq	r2, {r1, r9, sl, ip}^
     4f0:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     4f4:	0000077a 	andeq	r0, r0, sl, ror r7
     4f8:	07027504 	streq	r7, [r2, -r4, lsl #10]
     4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     500:	08741938 	ldmdaeq	r4!, {r3, r4, r5, r8, fp, ip}^
     504:	77040000 	strvc	r0, [r4, -r0]
     508:	08d40a02 	ldmeq	r4, {r1, r9, fp}^
     50c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
     510:	00000347 	andeq	r0, r0, r7, asr #6
     514:	13027a04 	movwne	r7, #10756	; 0x2a04
     518:	0000018a 	andeq	r0, r0, sl, lsl #3
     51c:	04021940 	streq	r1, [r2], #-2368	; 0xfffff6c0
     520:	7b040000 	blvc	100528 <__ccfg+0xe0580>
     524:	002c0702 	eoreq	r0, ip, r2, lsl #14
     528:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     52c:	000005f9 	strdeq	r0, [r0], -r9
     530:	13027c04 	movwne	r7, #11268	; 0x2c04
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	0000018a 	andeq	r0, r0, sl, lsl #3
     538:	080f1948 	stmdaeq	pc, {r3, r6, r8, fp, ip}	; <UNPREDICTABLE>
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	7d040000 	stcvc	0, cr0, [r4, #-0]
				DEBUG_PRINT("\r\nretrieve rec");
     540:	08da1402 	ldmeq	sl, {r1, sl, ip}^
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
     548:	00000b4a 	andeq	r0, r0, sl, asr #22
     54c:	07028004 	streq	r8, [r2, -r4]
     550:	0000002c 	andeq	r0, r0, ip, lsr #32
     554:	0c431950 	mcrreq	9, 5, r1, r3, cr0	; <UNPREDICTABLE>
     558:	81040000 	mrshi	r0, (UNDEF: 4)
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	05bd0902 	ldreq	r0, [sp, #2306]!	; 0x902
     560:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
     564:	00000c5d 	andeq	r0, r0, sp, asr ip
    return node->data_base.item_array[index];
     568:	0702a404 	streq	sl, [r2, -r4, lsl #8]
     56c:	00000887 	andeq	r0, r0, r7, lsl #17
     570:	0a061a58 	beq	186ed8 <__ccfg+0x166f30>
     574:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	02bb1302 	adcseq	r1, fp, #134217728	; 0x8000000
    return node->data_base.item_array[index];
     57c:	01480000 	mrseq	r0, (UNDEF: 72)
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	00069e1a 	andeq	r9, r6, sl, lsl lr
     584:	02a90400 	adceq	r0, r9, #0, 8
     588:	00027812 	andeq	r7, r2, r2, lsl r8
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	1a014c00 	bne	53594 <__ccfg+0x335ec>
     590:	00000685 	andeq	r0, r0, r5, lsl #13
     594:	0c02ad04 	stceq	13, cr10, [r2], {4}
     598:	000008ec 	andeq	r0, r0, ip, ror #17
     59c:	c51a02dc 	ldrgt	r0, [sl, #-732]	; 0xfffffd24
     5a0:	0400000c 	streq	r0, [r0], #-12
     5a4:	6d1002b2 	lfmvs	f0, 4, [r0, #-712]	; 0xfffffd38
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	e0000006 	and	r0, r0, r6
     5ac:	0a961a02 	beq	fe586dbc <_estack+0xde581dbc>
				DEBUG_PRINT("\r\nResponse");
     5b0:	b4040000 	strlt	r0, [r4], #-0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	08f80a02 	ldmeq	r8!, {r1, r9, fp}^
     5b8:	02ec0000 	rsceq	r0, ip, #0
     5bc:	c3041100 	movwgt	r1, #16640	; 0x4100
     5c0:	02000005 	andeq	r0, r0, #5
     5c4:	0c540801 	mrrceq	8, 0, r0, r4, cr1
     5c8:	c3170000 	tstgt	r7, #0
				if(!response_flag){
     5cc:	11000005 	tstne	r0, r5
					response_flag=1;
     5d0:	00044a04 	andeq	r4, r4, r4, lsl #20
					trigger(&response_flag);
     5d4:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
				switch(response_message_5->status){
     5d8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5dc:	16000005 	strne	r0, [r0], -r5
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
     5e4:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     5e8:	05f41600 	ldrbeq	r1, [r4, #1536]!	; 0x600
						if (response_checker[0] == response_message_5->request_number){
     5ec:	2c160000 	ldccs	0, cr0, [r6], {-0}
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	05ca0411 	strbeq	r0, [sl, #1041]	; 0x411
							switch(response_checker[1]){
     5f8:	04110000 	ldreq	r0, [r1], #-0
     5fc:	000005d5 	ldrdeq	r0, [r0], -r5
     600:	00840115 	addeq	r0, r4, r5, lsl r1
     604:	061f0000 	ldreq	r0, [pc], -r0
									proceed response_1_create;
     608:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
						proceed response_2;
     60c:	16000004 	strne	r0, [r0], -r4
									proceed response_1_delete;
     610:	000000f2 	strdeq	r0, [r0], -r2
									proceed response_1_retrieve;
     614:	00008416 	andeq	r8, r0, r6, lsl r4
						proceed response_2;
     618:	002c1600 	eoreq	r1, ip, r0, lsl #12
						proceed response_3;
     61c:	11000000 	mrsne	r0, (UNDEF: 0)
						proceed response_4;
     620:	00060004 	andeq	r0, r6, r4
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     628:	3a000000 	bcc	630 <receiver+0x3b8>
				break;
     62c:	16000006 	strne	r0, [r0], -r6
}
     630:	00000469 	andeq	r0, r0, r9, ror #8
     634:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     638:	04110000 	ldreq	r0, [r1], #-0
     63c:	00000625 	andeq	r0, r0, r5, lsr #12
     640:	00004708 	andeq	r4, r0, r8, lsl #14
     644:	00065000 	andeq	r5, r6, r0
fsm root {
     648:	00250900 	eoreq	r0, r5, r0, lsl #18
     64c:	00020000 	andeq	r0, r2, r0
     650:	00004708 	andeq	r4, r0, r8, lsl #14
     654:	00066000 	andeq	r6, r6, r0
     658:	00250900 	eoreq	r0, r5, r0, lsl #18
     65c:	00000000 	andeq	r0, r0, r0
     660:	00046504 	andeq	r6, r4, r4, lsl #10
     664:	01240400 			; <UNDEFINED> instruction: 0x01240400
     668:	00030718 	andeq	r0, r3, r8, lsl r7
     66c:	0cbf1b00 	vldmiaeq	pc!, {d1-d0}
     670:	040c0000 	streq	r0, [ip], #-0
     674:	a6080128 	strge	r0, [r8], -r8, lsr #2
     678:	19000006 	stmdbne	r0, {r1, r2}
     67c:	00000ea6 	andeq	r0, r0, r6, lsr #29
     680:	11012a04 	tstne	r1, r4, lsl #20
     684:	000006a6 	andeq	r0, r0, r6, lsr #13
     688:	0bbe1900 	bleq	fef86a90 <_estack+0xdef81a90>
     68c:	2b040000 	blcs	100694 <__ccfg+0xe06ec>
     690:	002c0701 	eoreq	r0, ip, r1, lsl #14
     694:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	00000762 	andeq	r0, r0, r2, ror #14
     69c:	0b012c04 	bleq	4b6b4 <__ccfg+0x2b70c>
     6a0:	000006ac 	andeq	r0, r0, ip, lsr #13
		init_node(node_db);
     6a4:	04110008 	ldreq	r0, [r1], #-8
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	0000066d 	andeq	r0, r0, sp, ror #12
     6ac:	06600411 			; <UNDEFINED> instruction: 0x06600411
		tcv_plug (0, &plug_null);
     6b0:	d11b0000 	tstle	fp, r0
     6b4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	08014404 	stmdaeq	r1, {r2, sl, lr}
     6bc:	000006eb 	andeq	r0, r0, fp, ror #13
     6c0:	00162d19 	andseq	r2, r6, r9, lsl sp
     6c4:	01450400 	cmpeq	r5, r0, lsl #8
     6c8:	0006eb12 	andeq	lr, r6, r2, lsl fp
			diag("Cannot open tcv interface");
     6cc:	21190000 	tstcs	r9, r0
     6d0:	04000008 	streq	r0, [r0], #-8
			halt();
     6d4:	eb120146 	bl	480bf4 <__ccfg+0x460c4c>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	06000006 	streq	r0, [r0], -r6
     6dc:	0014df19 	andseq	sp, r4, r9, lsl pc
		runfsm receiver(node_db);
     6e0:	01470400 	cmpeq	r7, r0, lsl #8
     6e4:	00005512 	andeq	r5, r0, r2, lsl r5
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	08000c00 	stmdaeq	r0, {sl, fp}
     6ec:	00000055 	andeq	r0, r0, r5, asr r0
     6f0:	000006fb 	strdeq	r0, [r0], -fp
     6f4:	00002509 	andeq	r2, r0, r9, lsl #10
     6f8:	1c000200 	sfmne	f0, 4, [r0], {-0}
     6fc:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
		ser_inf(get_choice, "%c", &CHOICE);
     700:	00081007 	andeq	r1, r8, r7
     704:	0e4c1900 	vmlaeq.f16	s3, s24, s0	; <UNPREDICTABLE>
     708:	87040000 	strhi	r0, [r4, -r0]
		switch(CHOICE) {
     70c:	00251802 	eoreq	r1, r5, r2, lsl #16
     710:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     714:	00000ccd 	andeq	r0, r0, sp, asr #25
     718:	12028804 	andne	r8, r2, #4, 16	; 0x40000
     71c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
     720:	042f1904 	strteq	r1, [pc], #-2308	; 728 <root+0xe0>
     724:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
     728:	08101002 	ldmdaeq	r0, {r1, ip}
     72c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     730:	00000b33 	andeq	r0, r0, r3, lsr fp
     734:	17028a04 	strne	r8, [r2, -r4, lsl #20]
     738:	000001a0 	andeq	r0, r0, r0, lsr #3
				proceed menu;
     73c:	07d91924 	ldrbeq	r1, [r9, r4, lsr #18]
     740:	8b040000 	blhi	100748 <__ccfg+0xe07a0>
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     748:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	00000ea1 	andeq	r0, r0, r1, lsr #29
     750:	2c028c04 	stccs	12, cr8, [r2], {4}
     754:	00000071 	andeq	r0, r0, r1, ror r0
		DEBUG_PRINT("setting node group ID");
     758:	00761950 	rsbseq	r1, r6, r0, asr r9
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75c:	8d040000 	stchi	0, cr0, [r4, #-0]
    node->gid = gid; 
     760:	06b21a02 	ldrteq	r1, [r2], r2, lsl #20
		proceed menu;
     764:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     768:	00000629 	andeq	r0, r0, r9, lsr #12
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76c:	16028e04 	strne	r8, [r2], -r4, lsl #28
     770:	000000e6 	andeq	r0, r0, r6, ror #1
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     774:	0cda1968 			; <UNDEFINED> instruction: 0x0cda1968
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	8f040000 	svchi	0x00040000
     77c:	00e61602 	rsceq	r1, r6, r2, lsl #12
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     780:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
     784:	00000068 	andeq	r0, r0, r8, rrx
		if((node_db->id < 1) || (node_db->id > 25)){
     788:	16029004 	strne	r9, [r2], -r4
     78c:	000000e6 	andeq	r0, r0, r6, ror #1
     790:	0b5a1978 	bleq	1686d78 <__ccfg+0x1666dd0>
			strncpy(reason, "Out of Range", 50);
     794:	91040000 	mrsls	r0, (UNDEF: 4)
     798:	08201002 	stmdaeq	r0!, {r1, ip}
			proceed invalid_node_id;
     79c:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
     7a0:	0000040c 	andeq	r0, r0, ip, lsl #8
				strncpy(reason, "ID is already in use", 50);
     7a4:	10029204 	andne	r9, r2, r4, lsl #4
		for(int i = 0; i < node_db->index; i++){
     7a8:	00000830 	andeq	r0, r0, r0, lsr r8
     7ac:	0c7d1988 			; <UNDEFINED> instruction: 0x0c7d1988
     7b0:	93040000 	movwls	r0, #16384	; 0x4000
		proceed menu;
     7b4:	002c0f02 	eoreq	r0, ip, r2, lsl #30
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7b8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
     7bc:	000002a3 	andeq	r0, r0, r3, lsr #5
     7c0:	16029404 	strne	r9, [r2], -r4, lsl #8
     7c4:	000000e6 	andeq	r0, r0, r6, ror #1
		proceed get_new_node_id;
     7c8:	068f19a4 	streq	r1, [pc], r4, lsr #19
     7cc:	95040000 	strls	r0, [r4, #-0]
		if (!clear_node_neighbour_array(node_db)){
     7d0:	00e61602 	rsceq	r1, r6, r2, lsl #12
     7d4:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
			strncpy(reason, "Error Clearing Node Array", 50);
     7d8:	000005ab 	andeq	r0, r0, fp, lsr #11
     7dc:	16029604 	strne	r9, [r2], -r4, lsl #12
     7e0:	000000e6 	andeq	r0, r0, r6, ror #1
			proceed error;
     7e4:	083a19b4 	ldmdaeq	sl!, {r2, r4, r5, r7, r8, fp, ip}
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7e8:	97040000 	strls	r0, [r4, -r0]
     7ec:	00e61602 	rsceq	r1, r6, r2, lsl #12
		request_packet->gid = node_db->gid;
     7f0:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     7f4:	00000618 	andeq	r0, r0, r8, lsl r6
		request_packet->tpe = DISCOVERY_REQUEST;
     7f8:	16029804 	strne	r9, [r2], -r4, lsl #16
		request_packet->request_number = generate_request_num();
     7fc:	000000e6 	andeq	r0, r0, r6, ror #1
     800:	08f219c4 	ldmeq	r2!, {r2, r6, r7, r8, fp, ip}^
		call sender(request_packet, wait_discovery);
     804:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
     808:	002c0802 	eoreq	r0, ip, r2, lsl #16
		request_packet->receiver_id=0;
     80c:	00cc0000 	sbceq	r0, ip, r0
		call sender(request_packet, wait_discovery);
     810:	0005c308 	andeq	ip, r5, r8, lsl #6
     814:	00082000 	andeq	r2, r8, r0
     818:	00250900 	eoreq	r0, r5, r0, lsl #18
			release;
     81c:	00190000 	andseq	r0, r9, r0
				proceed get_new_node_id;
     820:	0005c308 	andeq	ip, r5, r8, lsl #6
				proceed clear_neighbour_array;
     824:	00083000 	andeq	r3, r8, r0
				proceed create_proto_start;
     828:	00250900 	eoreq	r0, r5, r0, lsl #18
				proceed start_delete_proto;
     82c:	00070000 	andeq	r0, r7, r0
				proceed retrieve_proto;
     830:	0005c308 	andeq	ip, r5, r8, lsl #6
				proceed display_db;
     834:	00084000 	andeq	r4, r8, r0
				proceed del_local;
     838:	00250900 	eoreq	r0, r5, r0, lsl #18
			if(node_db->id == node_db->nnodes[i]){
     83c:	00170000 	andseq	r0, r7, r0
     840:	9e04f01c 	mcrls	0, 0, pc, cr4, cr12, {0}	; <UNPREDICTABLE>
     844:	08670702 	stmdaeq	r7!, {r1, r8, r9, sl}^
				strncpy(reason, "ID is already in use", 50);
     848:	b7190000 	ldrlt	r0, [r9, -r0]
     84c:	04000003 	streq	r0, [r0], #-3
				proceed invalid_node_id;
     850:	671b02a1 	ldrvs	r0, [fp, -r1, lsr #5]
     854:	00000008 	andeq	r0, r0, r8
		for(int i = 0; i < node_db->index; i++){
     858:	000ef419 	andeq	pc, lr, r9, lsl r4	; <UNPREDICTABLE>
		if (discovery_wait_flag == 0){
     85c:	02a20400 	adceq	r0, r2, #0, 8
			discovery_wait_flag=1;
     860:	00087718 	andeq	r7, r8, r8, lsl r7
     864:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
			delay(3000, find_proto_start);
     868:	00000301 	andeq	r0, r0, r1, lsl #6
     86c:	00000877 	andeq	r0, r0, r7, ror r8
		if (discovery_wait_flag == 1){
     870:	00002509 	andeq	r2, r0, r9, lsl #10
			discovery_wait_flag=0;
     874:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
     878:	00000025 	andeq	r0, r0, r5, lsr #32
			delay(3000, display_neighbour_nodes);
     87c:	00000887 	andeq	r0, r0, r7, lsl #17
     880:	00002509 	andeq	r2, r0, r9, lsl #10
     884:	1d001d00 	stcne	13, cr1, [r0, #-0]
     888:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
     88c:	0008ac03 	andeq	sl, r8, r3, lsl #24
     890:	0d411e00 	stcleq	14, cr1, [r1, #-0]
     894:	9a040000 	bls	10089c <__ccfg+0xe08f4>
     898:	06fb0b02 	ldrbteq	r0, [fp], r2, lsl #22
     89c:	421e0000 	andsmi	r0, lr, #0
     8a0:	0400000b 	streq	r0, [r0], #-11
     8a4:	400b02a3 	andmi	r0, fp, r3, lsr #5
     8a8:	00000008 	andeq	r0, r0, r8
     8ac:	0005c308 	andeq	ip, r5, r8, lsl #6
     8b0:	0008bc00 	andeq	fp, r8, r0, lsl #24
     8b4:	00250900 	eoreq	r0, r5, r0, lsl #18
     8b8:	00180000 	andseq	r0, r8, r0
     8bc:	000eac1f 	andeq	sl, lr, pc, lsl ip
     8c0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
     8c4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
		if(node_db->index == 0){
     8c8:	08d40120 	ldmeq	r4, {r5, r8}^
     8cc:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
     8d0:	00000004 	andeq	r0, r0, r4
			proceed menu;
     8d4:	08c80411 	stmiaeq	r8, {r0, r4, sl}^
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8d8:	04110000 	ldreq	r0, [r1], #-0
     8dc:	0000018a 	andeq	r0, r0, sl, lsl #3
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8e0:	08ec0120 	stmiaeq	ip!, {r5, r8}^
			if (node_db->nnodes[i] == 0) break;
     8e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	08f20411 	ldmeq	r2!, {r0, r4, sl}^
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8f0:	04110000 	ldreq	r0, [r1], #-0
     8f4:	000008e0 	andeq	r0, r0, r0, ror #17
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f8:	00066008 	andeq	r6, r6, r8
		proceed menu;
     8fc:	00090800 	andeq	r0, r9, r0, lsl #16
     900:	00250900 	eoreq	r0, r5, r0, lsl #18
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     904:	00020000 	andeq	r0, r2, r0
     908:	000ab221 	andeq	fp, sl, r1, lsr #4
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
     90c:	03330400 	teqeq	r3, #0, 8
     910:	00046917 	andeq	r6, r4, r7, lsl r9
     914:	21010100 	mrscs	r0, (UNDEF: 17)
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     918:	00000aab 	andeq	r0, r0, fp, lsr #21
     91c:	1d033404 	cfstrsne	mvf3, [r3, #-16]
			strncpy(reason, "Error: improper ID", 50);
     920:	0000046f 	andeq	r0, r0, pc, ror #8
     924:	fe050101 	cdp2	1, 0, cr0, cr5, cr1, {0}
			proceed error;
     928:	06000029 	streq	r0, [r0], -r9, lsr #32
     92c:	0047172e 	subeq	r1, r7, lr, lsr #14
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     930:	f4050000 	vst4.8	{d0-d3}, [r5], r0
     934:	0600002d 	streq	r0, [r0], -sp, lsr #32
		ser_in(get_record_to_create, user_provided_record, 20);
     938:	00551c31 	subseq	r1, r5, r1, lsr ip
     93c:	96050000 	strls	r0, [r5], -r0
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     940:	06000029 	streq	r0, [r0], -r9, lsr #32
     944:	00631b34 	rsbeq	r1, r3, r4, lsr fp
     948:	0e050000 	cdpeq	0, 0, cr0, cr5, cr0, {0}
		create_message->gid = node_db->gid;
     94c:	07000005 	streq	r0, [r0, -r5]
		create_message->tpe = CREATE_RECORD;
     950:	00f41b28 	rscseq	r1, r4, r8, lsr #22
		create_message->request_number = generate_request_num();
     954:	82050000 	andhi	r0, r5, #0
     958:	0700000b 	streq	r0, [r0, -fp]
		strncpy(create_message->record, user_provided_record, 20);
     95c:	094a1863 	stmdbeq	sl, {r0, r1, r5, r6, fp, ip}^
     960:	dd050000 	stcle	0, cr0, [r5, #-0]
		create_message->receiver_id = user_provided_receiver_id;
     964:	08000028 	stmdaeq	r0, {r3, r5}
		strncpy(create_message->record, user_provided_record, 20);
     968:	09321227 	ldmdbeq	r2!, {r0, r1, r2, r5, r9, ip}
		create_message->receiver_id = user_provided_receiver_id;
     96c:	62170000 	andsvs	r0, r7, #0
		strncpy(create_message->record, user_provided_record, 20);
     970:	22000009 	andcs	r0, r0, #9
		response_checker[0] = create_message->request_number;
     974:	00000962 	andeq	r0, r0, r2, ror #18
     978:	001da405 	andseq	sl, sp, r5, lsl #8
		call sender(create_message, wait);
     97c:	112b0800 			; <UNDEFINED> instruction: 0x112b0800
     980:	00000926 	andeq	r0, r0, r6, lsr #18
     984:	00097822 	andeq	r7, r9, r2, lsr #16
     988:	292f0500 	stmdbcs	pc!, {r8, sl}	; <UNPREDICTABLE>
     98c:	2c080000 	stccs	0, cr0, [r8], {-0}
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     990:	00093e12 	andeq	r3, r9, r2, lsl lr
     994:	09891700 	stmibeq	r9, {r8, r9, sl, ip}
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
     998:	36050000 	strcc	r0, [r5], -r0
     99c:	08000006 	stmdaeq	r0, {r1, r2}
     9a0:	093e122d 	ldmdbeq	lr!, {r0, r2, r3, r5, r9, ip}
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9a4:	a4050000 	strge	r0, [r5], #-0
     9a8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
			strncpy(reason, "Error: improper node ID", 50);
     9ac:	09b20f2e 	ldmibeq	r2!, {r1, r2, r3, r5, r8, r9, sl, fp}
     9b0:	04110000 	ldreq	r0, [r1], #-0
     9b4:	00000962 	andeq	r0, r0, r2, ror #18
			proceed error;
     9b8:	3208080a 	andcc	r0, r8, #655360	; 0xa0000
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9bc:	000a4609 	andeq	r4, sl, r9, lsl #12
     9c0:	002b2300 	eoreq	r2, fp, r0, lsl #6
		ser_inf(get_index_for_delete, "%u", &user_provided_index);
     9c4:	34080000 	strcc	r0, [r8], #-0
     9c8:	00097807 	andeq	r7, r9, r7, lsl #16
     9cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
		if (user_provided_index < 0 || user_provided_index > 40){
     9d0:	063c2300 	ldrteq	r2, [ip], -r0, lsl #6
     9d4:	35080000 	strcc	r0, [r8, #-0]
			strncpy(reason, "Error: invalid index", 50);
     9d8:	00097803 	andeq	r7, r9, r3, lsl #16
     9dc:	06010100 	streq	r0, [r1], -r0, lsl #2
			proceed error;
     9e0:	02de2300 	sbcseq	r2, lr, #0, 6
     9e4:	36080000 	strcc	r0, [r8], -r0
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	00097803 	andeq	r7, r9, r3, lsl #16
		delete_record->gid = node_db->gid;
     9ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     9f0:	06a72300 	strteq	r2, [r7], r0, lsl #6
     9f4:	37080000 	strcc	r0, [r8, -r0]
		delete_record->tpe = DELETE_RECORD;
     9f8:	00097803 	andeq	r7, r9, r3, lsl #16
		delete_record->request_number = generate_request_num();
     9fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
		delete_record->sender_id = node_db->id;
     a00:	0a8f2300 	beq	fe3c9608 <_estack+0xde3c4608>
     a04:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
		delete_record->receiver_id = user_provided_receiver_id;
     a08:	00097803 	andeq	r7, r9, r3, lsl #16
     a0c:	00040100 	andeq	r0, r4, r0, lsl #2
		delete_record->record_index = user_provided_index;
     a10:	064b0b00 	strbeq	r0, [fp], -r0, lsl #22
		response_checker[0] = delete_record->request_number;
     a14:	3a080000 	bcc	200a1c <__ccfg+0x1e0a74>
		response_checker[1] = delete_record->tpe;
     a18:	00097807 	andeq	r7, r9, r7, lsl #16
     a1c:	eb0b0100 	bl	2c0e24 <__ccfg+0x2a0e7c>
		call sender(delete_record, wait);
     a20:	08000008 	stmdaeq	r0, {r3}
     a24:	0978033c 	ldmdbeq	r8!, {r2, r3, r4, r5, r8, r9}^
     a28:	0b020000 	bleq	80a30 <__ccfg+0x60a88>
     a2c:	00000f1c 	andeq	r0, r0, ip, lsl pc
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a30:	78033d08 	stmdavc	r3, {r3, r8, sl, fp, ip, sp}
     a34:	03000009 	movweq	r0, #9
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
     a38:	0009030b 	andeq	r0, r9, fp, lsl #6
     a3c:	083f0800 	ldmdaeq	pc!, {fp}	; <UNPREDICTABLE>
     a40:	00000989 	andeq	r0, r0, r9, lsl #19
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     a44:	14050004 	strne	r0, [r5], #-4
     a48:	08000003 	stmdaeq	r0, {r0, r1}
			strncpy(reason, "Error: improper node ID", 50);
     a4c:	09b80341 	ldmibeq	r8!, {r0, r6, r8, r9}
     a50:	46220000 	strtmi	r0, [r2], -r0
			proceed error;
     a54:	2400000a 	strcs	r0, [r0], #-10
     a58:	000006ae 	andeq	r0, r0, lr, lsr #13
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a5c:	521a4308 	andspl	r4, sl, #8, 6	; 0x20000000
     a60:	0100000a 	tsteq	r0, sl
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
     a64:	01972401 	orrseq	r2, r7, r1, lsl #8
     a68:	45080000 	strmi	r0, [r8, #-0]
     a6c:	0005bd0e 	andeq	fp, r5, lr, lsl #26
		if (user_provided_index < 0 || user_provided_index > 40){
     a70:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
			strncpy(reason, "Error: invalid index", 50);
     a74:	0000031d 	andeq	r0, r0, sp, lsl r3
     a78:	bd1e4508 	cfldr32lt	mvfx4, [lr, #-32]	; 0xffffffe0
     a7c:	01000005 	tsteq	r0, r5
			proceed error;
     a80:	09080a01 	stmdbeq	r8, {r0, r9, fp}
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a84:	0ab2098f 	beq	fec830c8 <_estack+0xdec7e0c8>
     a88:	ba0b0000 	blt	2c0a90 <__ccfg+0x2a0ae8>
		retrieve_record->gid = node_db->gid;
     a8c:	0900000c 	stmdbeq	r0, {r2, r3}
     a90:	093e0b90 	ldmdbeq	lr!, {r4, r7, r8, r9, fp}
     a94:	0b000000 	bleq	a9c <root+0x454>
		retrieve_record->tpe = RETRIEVE_RECORD;
     a98:	00001057 	andeq	r1, r0, r7, asr r0
		retrieve_record->request_number = generate_request_num();
     a9c:	62079109 	andvs	r9, r7, #1073741826	; 0x40000002
     aa0:	04000009 	streq	r0, [r0], #-9
		retrieve_record->sender_id = node_db->id;
     aa4:	0001bc0b 	andeq	fp, r1, fp, lsl #24
		response_checker[0] = retrieve_record->request_number;
     aa8:	10920900 	addsne	r0, r2, r0, lsl #18
		retrieve_record->receiver_id = user_provided_receiver_id;
     aac:	00000984 	andeq	r0, r0, r4, lsl #19
     ab0:	ae050006 	cdpge	0, 0, cr0, cr5, cr6, {0}
		retrieve_record->record_index = user_provided_index;
     ab4:	0900000c 	stmdbeq	r0, {r2, r3}
     ab8:	0a810393 	beq	fe04190c <_estack+0xde03c90c>
		response_checker[0] = retrieve_record->request_number;
     abc:	b2080000 	andlt	r0, r8, #0
		call sender(&retrieve_record, wait);
     ac0:	c900000a 	stmdbgt	r0, {r1, r3}
     ac4:	2500000a 	strcs	r0, [r0, #-10]
     ac8:	092d2400 	pusheq	{sl, sp}
     acc:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
     ad0:	000abe0f 	andeq	fp, sl, pc, lsl #28
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad4:	0a010100 	beq	40edc <__ccfg+0x20f34>
     ad8:	09910a01 	ldmibeq	r1, {r0, r9, fp}
		if(node_db->data_base.item_count != 0){
     adc:	00000b01 	andeq	r0, r0, r1, lsl #22
     ae0:	00090a23 	andeq	r0, r9, r3, lsr #20
     ae4:	07930a00 	ldreq	r0, [r3, r0, lsl #20]
		ser_out(loop_through_data, "\r\n");
     ae8:	00000978 	andeq	r0, r0, r8, ror r9
     aec:	00010701 	andeq	r0, r1, r1, lsl #14
		proceed menu;
     af0:	0005bc23 	andeq	fp, r5, r3, lsr #24
		delete_all(node_db);
     af4:	03940a00 	orrseq	r0, r4, #0, 20
     af8:	00000978 	andeq	r0, r0, r8, ror r9
		proceed menu;
     afc:	00000101 	andeq	r0, r0, r1, lsl #2
     b00:	0a9b0500 	beq	fe6c1f08 <_estack+0xde6bcf08>
		delay(3000, timeout);
     b04:	960a0000 	strls	r0, [sl], -r0
     b08:	000ad703 	andeq	sp, sl, r3, lsl #14
		when(&response_flag, menu);
     b0c:	0b011700 	bleq	46714 <__ccfg+0x2676c>
     b10:	0d080000 	stceq	0, cr0, [r8, #-0]
		release;
     b14:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b18:	2500000b 	strcs	r0, [r0, #-11]
     b1c:	0b121700 	bleq	486724 <__ccfg+0x46677c>
     b20:	a1240000 			; <UNDEFINED> instruction: 0xa1240000
     b24:	0a000003 	beq	b38 <root+0x4f0>
     b28:	0b1d179c 	bleq	7469a0 <__ccfg+0x7269f8>
     b2c:	01010000 	mrseq	r0, (UNDEF: 1)
     b30:	00096e08 	andeq	r6, r9, r8, lsl #28
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b34:	000b3b00 	andeq	r3, fp, r0, lsl #22
     b38:	17002500 	strne	r2, [r0, -r0, lsl #10]
     b3c:	00000b30 	andeq	r0, r0, r0, lsr fp
     b40:	0005fe24 	andeq	pc, r5, r4, lsr #28
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b44:	13060b00 	movwne	r0, #27392	; 0x6b00
		ser_out(timeout, "\r\nFailed to reach the destination");
     b48:	00000b3b 	andeq	r0, r0, fp, lsr fp
     b4c:	cd240101 	stfgts	f0, [r4, #-4]!
		proceed menu;
     b50:	09000008 	stmdbeq	r0, {r3}
     b54:	09890ec3 	stmibeq	r9, {r0, r1, r6, r7, r9, sl, fp}
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b58:	01010000 	mrseq	r0, (UNDEF: 1)
     b5c:	000c6204 	andeq	r6, ip, r4, lsl #4
		proceed menu;
     b60:	016e0c00 	cmneq	lr, r0, lsl #24
     b64:	000b6910 	andeq	r6, fp, r0, lsl r9
}
     b68:	6f041100 	svcvs	0x00041100
     b6c:	2000000b 	andcs	r0, r0, fp
     b70:	000b7b01 	andeq	r7, fp, r1, lsl #22
     b74:	09621600 	stmdbeq	r2!, {r9, sl, ip}^
     b78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b7c:	000005ca 	andeq	r0, r0, sl, asr #11
     b80:	00000b86 	andeq	r0, r0, r6, lsl #23
     b84:	7b170025 	blvc	5c0c20 <__ccfg+0x5a0c78>
     b88:	2100000b 	tstcs	r0, fp
     b8c:	000009d6 	ldrdeq	r0, [r0], -r6
     b90:	13017f0c 	movwne	r7, #7948	; 0x1f0c
     b94:	00000b86 	andeq	r0, r0, r6, lsl #23
     b98:	8d210101 	stfhis	f0, [r1, #-4]!
     b9c:	0c000003 	stceq	0, cr0, [r0], {3}
     ba0:	95140182 	ldrls	r0, [r4, #-386]	; 0xfffffe7e
     ba4:	01000009 	tsteq	r0, r9
     ba8:	0d040a01 	vstreq	s0, [r4, #-4]
     bac:	0bcd0908 	bleq	ff342fd4 <_estack+0xdf33dfd4>
     bb0:	c20b0000 	andgt	r0, fp, #0
     bb4:	0d000001 	stceq	0, cr0, [r0, #-4]
     bb8:	0962070f 	stmdbeq	r2!, {r0, r1, r2, r3, r8, r9, sl}^
     bbc:	0b000000 	bleq	bc4 <root+0x57c>
     bc0:	00000c92 	muleq	r0, r2, ip
     bc4:	6203100d 	andvs	r1, r3, #13
static void devinit_uart (int devnum) {
     bc8:	02000009 	andeq	r0, r0, #9
	adddevfunc (ioreq_uart_a, devnum);
     bcc:	0d5b0500 	cfldr64eq	mvdx0, [fp, #-0]
     bd0:	110d0000 	mrsne	r0, (UNDEF: 13)
void udelay (volatile word n) {
     bd4:	000ba903 	andeq	sl, fp, r3, lsl #18
     bd8:	0d200a00 	vstmdbeq	r0!, {s0-s-1}
	while (n) {
     bdc:	0c4b0916 	mcrreq	9, 1, r0, fp, cr6	; <UNPREDICTABLE>
     be0:	a80b0000 	stmdage	fp, {}	; <UNPREDICTABLE>
}
     be4:	0d000004 	stceq	0, cr0, [r0, #-16]
	while (n--);
     be8:	0c650817 	stcleq	8, cr0, [r5], #-92	; 0xffffffa4
     bec:	0b000000 	bleq	bf4 <udelay+0x20>
     bf0:	000008fb 	strdeq	r0, [r0], -fp
		n--;
     bf4:	8008180d 	andhi	r1, r8, sp, lsl #16
     bf8:	0400000c 	streq	r0, [r0], #-12
     bfc:	000bb60b 	andeq	fp, fp, fp, lsl #12
void mdelay (volatile word n) {
     c00:	08190d00 	ldmdaeq	r9, {r8, sl, fp}
     c04:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
	while (n) {
     c08:	0c8a0b08 	vstmiaeq	sl, {d0-d3}
     c0c:	1a0d0000 	bne	340c14 <__ccfg+0x320c6c>
}
     c10:	000cd108 	andeq	sp, ip, r8, lsl #2
		udelay (999);
     c14:	520b0c00 	andpl	r0, fp, #0, 24
     c18:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
		n--;
     c1c:	0ce7081b 	stcleq	8, cr0, [r7], #108	; 0x6c
     c20:	0b100000 	bleq	400c28 <__ccfg+0x3e0c80>
     c24:	00000a53 	andeq	r0, r0, r3, asr sl
     c28:	e7081c0d 	str	r1, [r8, -sp, lsl #24]
void __pi_ondomain (lword d) {
     c2c:	1400000c 	strne	r0, [r0], #-12
     c30:	0001a50b 	andeq	sl, r1, fp, lsl #10
		if (__pi_systat.effpdm > 1)
     c34:	081d0d00 	ldmdaeq	sp, {r8, sl, fp}
     c38:	00000ce7 	andeq	r0, r0, r7, ror #25
			__pi_systat.effpdm = 1;
     c3c:	030b0b18 	movweq	r0, #47896	; 0xbb18
	PRCMPowerDomainOn (d);
     c40:	1e0d0000 	cdpne	0, 0, cr0, cr13, cr0, {0}
     c44:	00002c06 	andeq	r2, r0, r6, lsl #24
     c48:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c4c:	00002c01 	andeq	r2, r0, r1, lsl #24
     c50:	000c6500 	andeq	r6, ip, r0, lsl #10
     c54:	002c1600 	eoreq	r1, ip, r0, lsl #12
	__pi_systat.ondmns |= d;
     c58:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c5c:	16000000 	strne	r0, [r0], -r0
}
     c60:	00000956 	andeq	r0, r0, r6, asr r9
     c64:	4b041100 	blmi	10506c <__ccfg+0xe50c4>
void __pi_offdomain (lword d) {
     c68:	1500000c 	strne	r0, [r0, #-12]
     c6c:	00002c01 	andeq	r2, r0, r1, lsl #24
	PRCMPowerDomainOff (d);
     c70:	000c8000 	andeq	r8, ip, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     c74:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c78:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c7c:	00000000 	andeq	r0, r0, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     c80:	0c6b0411 	cfstrdeq	mvd0, [fp], #-68	; 0xffffffbc
     c84:	01150000 	tsteq	r5, r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     c88:	0000002c 	andeq	r0, r0, ip, lsr #32
     c8c:	00000caa 	andeq	r0, r0, sl, lsr #25
			__pi_systat.effpdm = __pi_systat.reqpdm;
     c90:	00002c16 	andeq	r2, r0, r6, lsl ip
     c94:	09a61600 	stmibeq	r6!, {r9, sl, ip}
	__pi_systat.ondmns &= ~d;
     c98:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c9c:	16000000 	strne	r0, [r0], -r0
}
     ca0:	00000caa 	andeq	r0, r0, sl, lsr #25
     ca4:	000cb016 	andeq	fp, ip, r6, lsl r0
void __pi_syserror (word ec, const char *m) {
     ca8:	04110000 	ldreq	r0, [r1], #-0
	diag ("SYSERR: %x, %s", ec, m);
     cac:	0000002c 	andeq	r0, r0, ip, lsr #32
     cb0:	0bcd0411 	bleq	ff341cfc <_estack+0xdf33ccfc>
  __ASM volatile ("cpsid i" : : : "memory");
     cb4:	04110000 	ldreq	r0, [r1], #-0
     cb8:	00000c86 	andeq	r0, r0, r6, lsl #25
     cbc:	002c0115 	eoreq	r0, ip, r5, lsl r1
     cc0:	0cd10000 	ldcleq	0, cr0, [r1], {0}
		all_leds_blink;
     cc4:	a6160000 	ldrge	r0, [r6], -r0
     cc8:	16000009 	strne	r0, [r0], -r9
     ccc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cd0:	bc041100 	stflts	f1, [r4], {-0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     cd4:	1500000c 	strne	r0, [r0, #-12]
     cd8:	00002c01 	andeq	r2, r0, r1, lsl #24
     cdc:	000ce700 	andeq	lr, ip, r0, lsl #14
     ce0:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     ce4:	11000000 	mrsne	r0, (UNDEF: 0)
     ce8:	000cd704 	andeq	sp, ip, r4, lsl #14
	while (1) {
     cec:	0d170500 	cfldr32eq	mvfx0, [r7, #-0]
     cf0:	1f0d0000 	svcne	0x000d0000
     cf4:	000bd903 	andeq	sp, fp, r3, lsl #18
     cf8:	0ced1700 	stcleq	7, cr1, [sp]
void tci_run_delay_timer () {
     cfc:	65210000 	strvs	r0, [r1, #-0]!
	setdel = __pi_mintk - __pi_old;
     d00:	0c000003 	stceq	0, cr0, [r0], {3}
     d04:	890e02d8 	stmdbhi	lr, {r3, r4, r6, r7, r9}
     d08:	01000009 	tsteq	r0, r9
     d0c:	0c081c01 	stceq	12, cr1, [r8], {1}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d10:	34090303 	strcc	r0, [r9], #-771	; 0xfffffcfd
     d14:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d18:	00003c83 	andeq	r3, r0, r3, lsl #25
     d1c:	0703070c 	streq	r0, [r3, -ip, lsl #14]
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d20:	00000962 	andeq	r0, r0, r2, ror #18
	sti_tim;
     d24:	0faf1900 	svceq	0x00af1900
}
     d28:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     d2c:	099a0803 	ldmibeq	sl, {r0, r1, fp}
     d30:	00040000 	andeq	r0, r4, r0
     d34:	0009f904 	andeq	pc, r9, r4, lsl #18
     d38:	03090c00 	movweq	r0, #39936	; 0x9c00
	cli_aux;
     d3c:	000d0d03 	andeq	r0, sp, r3, lsl #26
     d40:	00201b00 	eoreq	r1, r0, r0, lsl #22
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	0c300000 	ldceq	0, cr0, [r0], #-0
     d48:	a408030b 	strge	r0, [r8], #-779	; 0xfffffcf5
     d4c:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d50:	00001f06 	andeq	r1, r0, r6, lsl #30
	sti_aux;
     d54:	0703140c 	streq	r1, [r3, -ip, lsl #8]
}
     d58:	00000962 	andeq	r0, r0, r2, ror #18
     d5c:	0bd71900 	bleq	ff5c7164 <_estack+0xdf5c2164>
     d60:	150c0000 	strne	r0, [ip, #-0]
void AONRTCIntHandler () {
     d64:	09620703 	stmdbeq	r2!, {r0, r1, r8, r9, sl}^
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d68:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     d6c:	00004c70 	andeq	r4, r0, r0, ror ip
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     d70:	0a03160c 	beq	c65a8 <__ccfg+0xa6600>
		if (__pi_utims [0] == 0)
     d74:	00000b5c 	andeq	r0, r0, ip, asr fp
     d78:	47361904 	ldrmi	r1, [r6, -r4, lsl #18]!
		if (*(__pi_utims [0])) {
     d7c:	170c0000 	strne	r0, [ip, -r0]
     d80:	099a0803 	ldmibeq	sl, {r0, r1, fp}
			(*(__pi_utims [0]))--;
     d84:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
		if (__pi_utims [1] == 0)
     d88:	0000000f 	andeq	r0, r0, pc
		if (*(__pi_utims [1])) {
     d8c:	0f03180c 	svceq	0x0003180c
			aux_timer_inactive = 0;
     d90:	00000da4 	andeq	r0, r0, r4, lsr #27
			(*(__pi_utims [1]))--;
     d94:	094d190c 	stmdbeq	sp, {r2, r3, r8, fp, ip}^
		if (__pi_utims [2] == 0)
     d98:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
		if (*(__pi_utims [2])) {
     d9c:	0db41503 	cfldr32eq	mvfx1, [r4, #12]!
			(*(__pi_utims [2]))--;
     da0:	002c0000 	eoreq	r0, ip, r0
		if (__pi_utims [3] != 0) {
     da4:	000d3408 	andeq	r3, sp, r8, lsl #8
			if (*(__pi_utims [3])) {
     da8:	000db400 	andeq	fp, sp, r0, lsl #8
				aux_timer_inactive = 0;
     dac:	00250900 	eoreq	r0, r5, r0, lsl #18
				(*(__pi_utims [3]))--;
     db0:	00030000 	andeq	r0, r3, r0
	if (__pi_systat.ledsts) {
     db4:	0d410411 	cfstrdeq	mvd0, [r1, #-68]	; 0xffffffbc
     db8:	cc040000 	stcgt	0, cr0, [r4], {-0}
		if (__pi_systat.ledblc++ == 0) {
     dbc:	0c00000b 	stceq	0, cr0, [r0], {11}
     dc0:	411b031c 	tstmi	fp, ip, lsl r3
			if (__pi_systat.ledblk) {
     dc4:	2100000d 	tstcs	r0, sp
     dc8:	00000bac 	andeq	r0, r0, ip, lsr #23
     dcc:	14031e0c 	strne	r1, [r3], #-3596	; 0xfffff1f4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd0:	00000dd6 	ldrdeq	r0, [r0], -r6
     dd4:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
				if (__pi_systat.ledsts & 0x2)
     dd8:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
     ddc:	0006ff24 	andeq	pc, r6, r4, lsr #30
     de0:	0d1d0e00 	ldceq	14, cr0, [sp, #-0]
				if (__pi_systat.ledsts & 0x4)
     de4:	00000962 	andeq	r0, r0, r2, ror #18
				__pi_systat.ledblk = 0;
     de8:	e5240101 	str	r0, [r4, #-257]!	; 0xfffffeff
     dec:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
			if (__pi_systat.fstblk)
     df0:	0973161e 	ldmdbeq	r3!, {r1, r2, r3, r4, r9, sl, ip}^
     df4:	01010000 	mrseq	r0, (UNDEF: 1)
				__pi_systat.ledblc = 200;
     df8:	000c5924 	andeq	r5, ip, r4, lsr #18
	if (events & AON_RTC_EVFLAGS_CH0) {
     dfc:	201e0e00 	andscs	r0, lr, r0, lsl #28
		cli_tim;
     e00:	00000973 	andeq	r0, r0, r3, ror r9
		__pi_new += setdel;
     e04:	77240101 	strvc	r0, [r4, -r1, lsl #2]!
     e08:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
		setdel = 0;
     e0c:	0dd61422 	cfldrdeq	mvd1, [r6, #136]	; 0x88
		RISE_N_SHINE;
     e10:	01010000 	mrseq	r0, (UNDEF: 1)
		__pi_new += setdel;
     e14:	00001624 	andeq	r1, r0, r4, lsr #12
		RISE_N_SHINE;
     e18:	180c0f00 	stmdane	ip, {r8, r9, sl, fp}
     e1c:	00000cf9 	strdeq	r0, [r0], -r9
		aux_timer_inactive = 1;
     e20:	0c260101 	stfeqs	f0, [r6], #-4
     e24:	01000006 	tsteq	r0, r6
				if (__pi_systat.ledsts & 0x1)
     e28:	00000047 	andeq	r0, r0, r7, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e2c:	58061910 	stmdapl	r6, {r4, r8, fp, ip}
     e30:	2700000e 	strcs	r0, [r0, -lr]
				if (__pi_systat.ledsts & 0x2)
     e34:	00000bdd 	ldrdeq	r0, [r0], -sp
     e38:	09b32700 	ldmibeq	r3!, {r8, r9, sl, sp}
     e3c:	27010000 	strcs	r0, [r1, -r0]
				if (__pi_systat.ledsts & 0x8)
     e40:	00000f03 	andeq	r0, r0, r3, lsl #30
				__pi_systat.ledblk = 1;
     e44:	0b252702 	bleq	94aa54 <__ccfg+0x92aaac>
     e48:	27030000 	strcs	r0, [r3, -r0]
		if (aux_timer_inactive) {
     e4c:	00000973 	andeq	r0, r0, r3, ror r9
			cli_aux;
     e50:	09bd2704 	ldmibeq	sp!, {r2, r8, r9, sl, sp}
     e54:	00050000 	andeq	r0, r5, r0
     e58:	001f0626 	andseq	r0, pc, r6, lsr #12
     e5c:	00470100 	subeq	r0, r7, r0, lsl #2
     e60:	22100000 	andscs	r0, r0, #0
     e64:	000e8806 	andeq	r8, lr, r6, lsl #16
     e68:	03312700 	teqeq	r1, #0, 14
     e6c:	27000000 	strcs	r0, [r0, -r0]
     e70:	00000643 	andeq	r0, r0, r3, asr #12
     e74:	045d2701 	ldrbeq	r2, [sp], #-1793	; 0xfffff8ff
word tci_update_delay_ticks (Boolean force) {
     e78:	27020000 	strcs	r0, [r2, -r0]
	cli_tim;
     e7c:	00000898 	muleq	r0, r8, r8
     e80:	0b082703 	bleq	20aa94 <__ccfg+0x1eaaec>
	if (setdel) {
     e84:	00040000 	andeq	r0, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e88:	00048e0f 	andeq	r8, r4, pc, lsl #28
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     e8c:	2c101c00 	ldccs	12, cr1, [r0], {-0}
     e90:	000ebd08 	andeq	fp, lr, r8, lsl #26
     e94:	0f230b00 	svceq	0x00230b00
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e98:	2d100000 	ldccs	0, cr0, [r0, #-0]
				AON_RTC_O_CH0CMP)) - gettav ());
     e9c:	0009260a 	andeq	r2, r9, sl, lsl #12
	return NO;
     ea0:	6f0b0000 	svcvs	0x000b0000
			setdel = 0;
     ea4:	10000007 	andne	r0, r0, r7
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ea8:	0ebd072e 	cdpeq	7, 11, cr0, cr13, cr14, {1}
     eac:	0b010000 	bleq	40eb4 <__ccfg+0x20f0c>
}
     eb0:	000005cc 	andeq	r0, r0, ip, asr #11
		sti_tim;
     eb4:	63102f10 	tstvs	r0, #16, 30	; 0x40
		return YES;
     eb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     ebc:	05c30800 	strbeq	r0, [r3, #2048]	; 0x800
     ec0:	0ecd0000 	cdpeq	0, 12, cr0, cr13, cr0, {0}
     ec4:	25090000 	strcs	r0, [r9, #-0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ec8:	13000000 	movwne	r0, #0
	UARTDisable (UART0_BASE);
     ecc:	47361200 	ldrmi	r1, [r6, -r0, lsl #4]!
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ed0:	04640000 	strbteq	r0, [r4], #-0
	UARTDisable (UART0_BASE);
     ed4:	f7083310 			; <UNDEFINED> instruction: 0xf7083310
	UARTConfigSetExpClk (UART0_BASE,
     ed8:	0b00000e 	bleq	f18 <__pi_uart_setrate+0x50>
     edc:	00000040 	andeq	r0, r0, r0, asr #32
     ee0:	f7103410 			; <UNDEFINED> instruction: 0xf7103410
     ee4:	0000000e 	andeq	r0, r0, lr
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     ee8:	00051d13 	andeq	r1, r5, r3, lsl sp
     eec:	0a351000 	beq	d44ef4 <__ccfg+0xd24f4c>
     ef0:	00000926 	andeq	r0, r0, r6, lsr #18
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     ef4:	08000460 	stmdaeq	r0, {r5, r6, sl}
     ef8:	00000e88 	andeq	r0, r0, r8, lsl #29
     efc:	00000f07 	andeq	r0, r0, r7, lsl #30
	urates [0] = rate;
     f00:	00002509 	andeq	r2, r0, r9, lsl #10
}
     f04:	12002700 	andne	r2, r0, #0, 14
     f08:	00000458 	andeq	r0, r0, r8, asr r4
     f0c:	3c100484 	cfldrscc	mvf0, [r0], {132}	; 0x84
     f10:	000f5808 	andeq	r5, pc, r8, lsl #16
     f14:	64691000 	strbtvs	r1, [r9], #-0
     f18:	0a3d1000 	beq	f44f20 <__ccfg+0xf24f78>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	00000926 	andeq	r0, r0, r6, lsr #18
     f20:	69671000 	stmdbvs	r7!, {ip}^
     f24:	3e100064 	cdpcc	0, 1, cr0, cr0, cr4, {3}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f28:	0009320b 	andeq	r3, r9, fp, lsl #4
     f2c:	b50b0200 	strlt	r0, [fp, #-512]	; 0xfffffe00
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f30:	1000000c 	andne	r0, r0, ip
     f34:	0ecd0e3f 	mcreq	14, 6, r0, cr13, cr15, {1}
	__pi_uart_setrate (urates [0], __pi_uart);
     f38:	13040000 	movwne	r0, #16384	; 0x4000
     f3c:	0000029c 	muleq	r0, ip, r2
     f40:	580a4010 	stmdapl	sl, {r4, lr}
     f44:	6800000f 	stmdavs	r0, {r0, r1, r2, r3}
     f48:	04be1304 	ldrteq	r1, [lr], #772	; 0x304
     f4c:	41100000 	tstmi	r0, r0
     f50:	0009260a 	andeq	r2, r9, sl, lsl #12
	switch (operation) {
     f54:	00048100 	andeq	r8, r4, r0, lsl #2
static int ioreq_uart_a (int operation, char *buf, int len) {
     f58:	00092608 	andeq	r2, r9, r8, lsl #12
     f5c:	000f6800 	andeq	r6, pc, r0, lsl #16
     f60:	00250900 	eoreq	r0, r5, r0, lsl #18
     f64:	00180000 	andseq	r0, r8, r0
     f68:	0006e70f 	andeq	lr, r6, pc, lsl #14
				*buf++ = uart_a_read;
     f6c:	44100600 	ldrmi	r0, [r0], #-1536	; 0xfffffa00
     f70:	000fb708 	andeq	fp, pc, r8, lsl #14
			while (len && uart_a_char_available) {
     f74:	69671000 	stmdbvs	r7!, {ip}^
     f78:	45100064 	ldrmi	r0, [r0, #-100]	; 0xffffff9c
     f7c:	0009320b 	andeq	r3, r9, fp, lsl #4
			if (len != operation) {
     f80:	74100000 	ldrvc	r0, [r0], #-0
}
     f84:	10006570 	andne	r6, r0, r0, ror r5
     f88:	09260a46 	stmdbeq	r6!, {r1, r2, r6, r9, fp}
			uart_a_disable_int;
     f8c:	0b020000 	bleq	80f94 <__ccfg+0x60fec>
			if (uart_a_char_available) {
     f90:	00000d64 	andeq	r0, r0, r4, ror #26
				*buf++ = uart_a_read;
     f94:	260a4710 			; <UNDEFINED> instruction: 0x260a4710
			uart_a_disable_int;
     f98:	03000009 	movweq	r0, #9
     f9c:	0004cf0b 	andeq	ip, r4, fp, lsl #30
			if (uart_a_char_available) {
     fa0:	0a481000 	beq	1204fa8 <__ccfg+0x11e5000>
     fa4:	00000926 	andeq	r0, r0, r6, lsr #18
				uart_a_enable_int;
     fa8:	02900b04 	addseq	r0, r0, #4, 22	; 0x1000
     fac:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
				goto Redo_rx;
     fb0:	0009260a 	andeq	r2, r9, sl, lsl #12
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fb4:	0f000500 	svceq	0x00000500
     fb8:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
			return -2;
     fbc:	084c1006 	stmdaeq	ip, {r1, r2, ip}^
     fc0:	00001006 	andeq	r1, r0, r6
				uart_a_write (*buf);
     fc4:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
     fc8:	0b4d1000 	bleq	1344fd0 <__ccfg+0x1325028>
			while (len && uart_a_room_in_tx) {
     fcc:	00000932 	andeq	r0, r0, r2, lsr r9
     fd0:	70741000 	rsbsvc	r1, r4, r0
     fd4:	4e100065 	cdpmi	0, 1, cr0, cr0, cr5, {3}
			if (len != operation) {
     fd8:	0009260a 	andeq	r2, r9, sl, lsl #12
			uart_a_disable_int;
     fdc:	640b0200 	strvs	r0, [fp], #-512	; 0xfffffe00
     fe0:	1000000d 	andne	r0, r0, sp
			if (uart_a_room_in_tx) {
     fe4:	09260a4f 	stmdbeq	r6!, {r0, r1, r2, r3, r6, r9, fp}
     fe8:	0b030000 	bleq	c0ff0 <__ccfg+0xa1048>
				uart_a_enable_int;
     fec:	000004cf 	andeq	r0, r0, pc, asr #9
     ff0:	260a5010 			; <UNDEFINED> instruction: 0x260a5010
				*buf++ = uart_a_read;
     ff4:	04000009 	streq	r0, [r0], #-9
			if (uart_a_room_in_tx) {
     ff8:	0002900b 	andeq	r9, r2, fp
				uart_a_write (*buf);
     ffc:	0a511000 	beq	1445004 <__ccfg+0x142505c>
    1000:	00000926 	andeq	r0, r0, r6, lsr #18
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1004:	900f0005 	andls	r0, pc, r5
    1008:	1a00000b 	bne	103c <ioreq_uart_a+0xe8>
			uart_a_enable_int;
    100c:	62085410 	andvs	r5, r8, #16, 8	; 0x10000000
    1010:	10000010 	andne	r0, r0, r0, lsl r0
    1014:	00646967 	rsbeq	r6, r4, r7, ror #18
			return 0;
    1018:	320b5510 	andcc	r5, fp, #16, 10	; 0x4000000
			if (len == UART_CNTRL_SETRATE) {
    101c:	00000009 	andeq	r0, r0, r9
				if (__pi_uart_setrate (*((word*)buf),
    1020:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1024:	0a561000 	beq	158502c <__ccfg+0x1565084>
    1028:	00000926 	andeq	r0, r0, r6, lsr #18
				syserror (EREQPAR, "uar");
    102c:	0d640b02 	vstmdbeq	r4!, {d16}
			syserror (ENOOPER, "uai");
    1030:	57100000 	ldrpl	r0, [r0, -r0]
			if (len == UART_CNTRL_GETRATE) {
    1034:	0009260a 	andeq	r2, r9, sl, lsl #12
				return 1;
    1038:	cf0b0300 	svcgt	0x000b0300
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    103c:	10000004 	andne	r0, r0, r4
			syserror (ENOOPER, "uai");
    1040:	09260a58 	stmdbeq	r6!, {r3, r4, r6, r9, fp}
    1044:	0b040000 	bleq	10104c <__ccfg+0xe10a4>
    1048:	00000290 	muleq	r0, r0, r2
    104c:	260a5910 			; <UNDEFINED> instruction: 0x260a5910
    1050:	05000009 	streq	r0, [r0, #-9]
    1054:	00048e0b 	andeq	r8, r4, fp, lsl #28
    1058:	075a1000 	ldrbeq	r1, [sl, -r0]
    105c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    1060:	320f0006 	andcc	r0, pc, #6
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1064:	0800000e 	stmdaeq	r0, {r1, r2, r3}
void UART0IntHandler () {
    1068:	cb085d10 	blgt	2184b0 <__ccfg+0x1f8508>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    106c:	10000010 	andne	r0, r0, r0, lsl r0
    1070:	00646967 	rsbeq	r6, r4, r7, ror #18
    1074:	320b5e10 	andcc	r5, fp, #16, 28	; 0x100
    1078:	00000009 	andeq	r0, r0, r9
    107c:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    1080:	0a5f1000 	beq	17c5088 <__ccfg+0x17a50e0>
    1084:	00000926 	andeq	r0, r0, r6, lsr #18
		RISE_N_SHINE;
    1088:	0d640b02 	vstmdbeq	r4!, {d16}
    108c:	60100000 	andsvs	r0, r0, r0
		i_trigger (devevent (UART_A, READ));
    1090:	0009260a 	andeq	r2, r9, sl, lsl #12
    1094:	cf0b0300 	svcgt	0x000b0300
    1098:	10000004 	andne	r0, r0, r4
    109c:	09260a61 	stmdbeq	r6!, {r0, r5, r6, r9, fp}
    10a0:	0b040000 	bleq	1010a8 <__ccfg+0xe1100>
    10a4:	00000290 	muleq	r0, r0, r2
    10a8:	260a6210 			; <UNDEFINED> instruction: 0x260a6210
    10ac:	05000009 	streq	r0, [r0, #-9]
    10b0:	00005b0b 	andeq	r5, r0, fp, lsl #22
    10b4:	0a631000 	beq	18c50bc <__ccfg+0x18a5114>
    10b8:	00000926 	andeq	r0, r0, r6, lsr #18
    10bc:	08190b06 	ldmdaeq	r9, {r1, r2, r8, r9, fp}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10c0:	64100000 	ldrvs	r0, [r0], #-0
    10c4:	0009260a 	andeq	r2, r9, sl, lsl #12
    10c8:	0f000700 	svceq	0x00000700
		i_trigger (devevent (UART_A, WRITE));
    10cc:	00000ecc 	andeq	r0, r0, ip, asr #29
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    10d0:	08681008 	stmdaeq	r8!, {r3, ip}^
    10d4:	00001134 	andeq	r1, r0, r4, lsr r1
		RISE_N_SHINE;
    10d8:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
    10dc:	0b691000 	bleq	1a450e4 <__ccfg+0x1a2513c>
    10e0:	00000932 	andeq	r0, r0, r2, lsr r9
		i_trigger (devevent (UART_A, WRITE));
    10e4:	70741000 	rsbsvc	r1, r4, r0
    10e8:	6a100065 	bvs	401284 <__ccfg+0x3e12dc>
    10ec:	0009260a 	andeq	r2, r9, sl, lsl #12
    10f0:	640b0200 	strvs	r0, [fp], #-512	; 0xfffffe00
    10f4:	1000000d 	andne	r0, r0, sp
    10f8:	09260a6b 	stmdbeq	r6!, {r0, r1, r3, r5, r6, r9, fp}
    10fc:	0b030000 	bleq	c1104 <__ccfg+0xa115c>
    1100:	000004cf 	andeq	r0, r0, pc, asr #9
    1104:	260a6c10 			; <UNDEFINED> instruction: 0x260a6c10
    1108:	04000009 	streq	r0, [r0], #-9
    110c:	0002900b 	andeq	r9, r2, fp
}
    1110:	0a6d1000 	beq	1b45118 <__ccfg+0x1b25170>
    1114:	00000926 	andeq	r0, r0, r6, lsr #18
    1118:	005b0b05 	subseq	r0, fp, r5, lsl #22
    111c:	6e100000 	cdpvs	0, 1, cr0, cr0, cr0, {0}
    1120:	0009260a 	andeq	r2, r9, sl, lsl #12
void __buttons_setirq (int val) {
    1124:	190b0600 	stmdbne	fp, {r9, sl}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1128:	10000008 	andne	r0, r0, r8
    112c:	09260a6f 	stmdbeq	r6!, {r0, r1, r2, r3, r5, r6, r9, fp}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1130:	00070000 	andeq	r0, r7, r0
    1134:	0002ba0f 	andeq	fp, r2, pc, lsl #20
    1138:	76101e00 	ldrvc	r1, [r0], -r0, lsl #28
		bn = BUTTON_GPIO (__button_list [i]);
    113c:	0011b708 	andseq	fp, r1, r8, lsl #14
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1140:	69671000 	stmdbvs	r7!, {ip}^
    1144:	77100064 	ldrvc	r0, [r0, -r4, rrx]
    1148:	0009320b 	andeq	r3, r9, fp, lsl #4
    114c:	74100000 	ldrvc	r0, [r0], #-0
    1150:	10006570 	andne	r6, r0, r0, ror r5
    1154:	09260a78 	stmdbeq	r6!, {r3, r4, r5, r6, r9, fp}
}
    1158:	0b020000 	bleq	81160 <__ccfg+0x611b8>
    115c:	00000d64 	andeq	r0, r0, r4, ror #26
    1160:	260a7910 			; <UNDEFINED> instruction: 0x260a7910
    1164:	03000009 	movweq	r0, #9
void __pinlist_setirq (int val) {
    1168:	0004cf0b 	andeq	ip, r4, fp, lsl #30
	for (i = 0; i < N_PINLIST; i++) {
    116c:	0a7a1000 	beq	1e85174 <__ccfg+0x1e651cc>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1170:	00000926 	andeq	r0, r0, r6, lsr #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	02900b04 	addseq	r0, r0, #4, 22	; 0x1000
	for (i = 0; i < N_PINLIST; i++) {
    1178:	7b100000 	blvc	401180 <__ccfg+0x3e11d8>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    117c:	0009260a 	andeq	r2, r9, sl, lsl #12
    1180:	680b0500 	stmdavs	fp, {r8, sl}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1184:	10000007 	andne	r0, r0, r7
    1188:	09260a7c 	stmdbeq	r6!, {r2, r3, r4, r5, r6, r9, fp}
    118c:	0b060000 	bleq	181194 <__ccfg+0x1611ec>
	for (i = 0; i < N_PINLIST; i++) {
    1190:	00000819 	andeq	r0, r0, r9, lsl r8
}
    1194:	260a7d10 			; <UNDEFINED> instruction: 0x260a7d10
    1198:	07000009 	streq	r0, [r0, -r9]
    119c:	00048e0b 	andeq	r8, r4, fp, lsl #28
    11a0:	077e1000 	ldrbeq	r1, [lr, -r0]!
void GPIOIntHandler () {
    11a4:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
if (buttons_int) {
    11a8:	005b0b08 	subseq	r0, fp, r8, lsl #22
    11ac:	7f100000 	svcvc	0x00100000
	buttons_disable ();
    11b0:	0009260a 	andeq	r2, r9, sl, lsl #12
    11b4:	28001c00 	stmdacs	r0, {sl, fp, ip}
	i_trigger ((aword)&__button_list);
    11b8:	00000e72 	andeq	r0, r0, r2, ror lr
    11bc:	c3060301 	movwgt	r0, #25345	; 0x6301
    11c0:	01000005 	tsteq	r0, r5
    11c4:	069a0305 	ldreq	r0, [sl], r5, lsl #6
    11c8:	c3082000 	movwgt	r2, #32768	; 0x8000
    11cc:	da000005 	ble	11e8 <GPIOIntHandler+0x44>
    11d0:	09000011 	stmdbeq	r0, {r0, r4}
    11d4:	00000025 	andeq	r0, r0, r5, lsr #32
    11d8:	51280031 			; <UNDEFINED> instruction: 0x51280031
    11dc:	01000004 	tsteq	r0, r4
    11e0:	11ca0604 	bicne	r0, sl, r4, lsl #12
	RISE_N_SHINE;
    11e4:	05010000 	streq	r0, [r1, #-0]
    11e8:	00066803 	andeq	r6, r6, r3, lsl #16
    11ec:	66732920 	ldrbtvs	r2, [r3], -r0, lsr #18
if (pin_sensor_int) {
    11f0:	05010064 	streq	r0, [r1, #-100]	; 0xffffff9c
    11f4:	00002c05 	andeq	r2, r0, r5, lsl #24
	i_trigger ((aword)(&__input_pins));
    11f8:	03050100 	movweq	r0, #20736	; 0x5100
    11fc:	20000000 	andcs	r0, r0, r0
    1200:	00002c08 	andeq	r2, r0, r8, lsl #24
    1204:	00121000 	andseq	r1, r2, r0
    1208:	00250900 	eoreq	r0, r5, r0, lsl #18
    120c:	00010000 	andeq	r0, r1, r0
    1210:	0006d628 	andeq	sp, r6, r8, lsr #12
    1214:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    1218:	00001200 	andeq	r1, r0, r0, lsl #4
    121c:	60030501 	andvs	r0, r3, r1, lsl #10
    1220:	28200006 	stmdacs	r0!, {r1, r2}
	__pinsen_disable_and_clear;
    1224:	0000084f 	andeq	r0, r0, pc, asr #16
	RISE_N_SHINE;
    1228:	62060a01 	andvs	r0, r6, #4096	; 0x1000
    122c:	01000009 	tsteq	r0, r9
    1230:	05600305 	strbeq	r0, [r0, #-773]!	; 0xfffffcfb
}
    1234:	3c282000 	stccc	0, cr2, [r8], #-0
    1238:	01000004 	tsteq	r0, r4
    123c:	12490e0c 	subne	r0, r9, #12, 28	; 0xc0
    1240:	05010000 	streq	r0, [r1, #-0]
    1244:	00069c03 	andeq	r9, r6, r3, lsl #24
void system_init () {
    1248:	07041120 	streq	r1, [r4, -r0, lsr #2]
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    124c:	2a00000f 	bcs	1290 <system_init+0x48>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1250:	0001ad01 	andeq	sl, r1, r1, lsl #26
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1254:	02170100 	andseq	r0, r7, #0, 2
    1258:	06480106 	strbeq	r0, [r8], -r6, lsl #2
    125c:	0bc80000 	bleq	ff201264 <_estack+0xdf1fc264>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1260:	9c010000 	stcls	0, cr0, [r1], {-0}
    1264:	000015bf 			; <UNDEFINED> instruction: 0x000015bf
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1268:	000c232b 	andeq	r2, ip, fp, lsr #6
    126c:	02170100 	andseq	r0, r7, #0, 2
    1270:	00096211 	andeq	r6, r9, r1, lsl r2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1274:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1278:	0c2b2c00 	stceq	12, cr2, [fp], #-0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    127c:	25010000 	strcs	r0, [r1, #-0]
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1280:	06981902 	ldreq	r1, [r8], r2, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1284:	0f2c0000 	svceq	0x002c0000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1288:	01000009 	tsteq	r0, r9
		pin = (port_confs [i] >> 19) & 0x1f;
    128c:	e610025d 			; <UNDEFINED> instruction: 0xe610025d
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1290:	2c000006 	stccs	0, cr0, [r0], {6}
		pin = (port_confs [i] >> 19) & 0x1f;
    1294:	00000084 	andeq	r0, r0, r4, lsl #1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1298:	16026001 	strne	r6, [r2], -r1
    129c:	00000700 	andeq	r0, r0, r0, lsl #14
    12a0:	0007f62c 	andeq	pc, r7, ip, lsr #12
    12a4:	02890100 	addeq	r0, r9, #0, 2
		if (port_confs [i] & 0x80)
    12a8:	0007441c 	andeq	r4, r7, ip, lsl r4
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ac:	01e22c00 	mvneq	r2, r0, lsl #24
    12b0:	8d010000 	stchi	0, cr0, [r1, #-0]
		if (port_confs [i] & 0x40)
    12b4:	074c1802 	strbeq	r1, [ip, -r2, lsl #16]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12b8:	6d2c0000 	stcvs	0, cr0, [ip, #-0]
    12bc:	01000003 	tsteq	r0, r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12c0:	6c1b029b 	lfmvs	f0, 4, [fp], {155}	; 0x9b
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	2c000007 	stccs	0, cr0, [r0], {7}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12c8:	000002ca 	andeq	r0, r0, sl, asr #5
	all_leds_blink;
    12cc:	17029e01 	strne	r9, [r2, -r1, lsl #28]
    12d0:	00000774 	andeq	r0, r0, r4, ror r7
    12d4:	0007852c 	andeq	r8, r7, ip, lsr #10
    12d8:	02b90100 	adcseq	r0, r9, #0, 2
    12dc:	0007b81b 	andeq	fp, r7, fp, lsl r8
    12e0:	04f02c00 	ldrbteq	r2, [r0], #3072	; 0xc00
    12e4:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12e8:	07ce2102 	strbeq	r2, [lr, r2, lsl #2]
    12ec:	5a2c0000 	bpl	b012f4 <__ccfg+0xae134c>
    12f0:	01000009 	tsteq	r0, r9
    12f4:	e81c02cf 	ldmda	ip, {r0, r1, r2, r3, r6, r7, r9}
    12f8:	2c000007 	stccs	0, cr0, [r0], {7}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    12fc:	0000066e 	andeq	r0, r0, lr, ror #12
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1300:	1a02dc01 	bne	b830c <__ccfg+0x98364>
    1304:	0000085a 	andeq	r0, r0, sl, asr r8
	IntEnable (INT_AON_RTC_COMB);
    1308:	000d212c 	andeq	r2, sp, ip, lsr #2
    130c:	02e80100 	rsceq	r0, r8, #0, 2
    1310:	0008c823 	andeq	ip, r8, r3, lsr #16
	__pi_malloc_init ();
    1314:	03e72c00 	mvneq	r2, #0, 24
	IntEnable (INT_AON_GPIO_EDGE);
    1318:	fd010000 	stc2	0, cr0, [r1, #-0]
    131c:	09021e02 	stmdbeq	r2, {r1, r9, sl, fp, ip}
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1320:	422c0000 	eormi	r0, ip, #0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1324:	01000005 	tsteq	r0, r5
    1328:	0a1d0300 	beq	741f30 <__ccfg+0x721f88>
    132c:	2c000009 	stccs	0, cr0, [r0], {9}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1330:	00000dcb 	andeq	r0, r0, fp, asr #27
    1334:	24030801 	strcs	r0, [r3], #-2049	; 0xfffff7ff
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1338:	0000092e 	andeq	r0, r0, lr, lsr #18
    133c:	00079d2c 	andeq	r9, r7, ip, lsr #26
    1340:	030b0100 	movweq	r0, #45312	; 0xb100
	urates [0] = UART_RATE / 100;
    1344:	00093620 	andeq	r3, r9, r0, lsr #12
    1348:	0a652c00 	beq	194c350 <__ccfg+0x192c3a8>
	reinit_uart ();
    134c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
	EXTRA_INITIALIZERS;
    1350:	09402603 	stmdbeq	r0, {r0, r1, r9, sl, sp}^
    1354:	c72c0000 	strgt	r0, [ip, -r0]!
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1358:	01000001 	tsteq	r0, r1
    135c:	901e0328 	andsls	r0, lr, r8, lsr #6
    1360:	2c000009 	stccs	0, cr0, [r0], {9}
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1364:	000001f7 	strdeq	r0, [r0], -r7
    1368:	1d032b01 	vstrne	d2, [r3, #-4]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    136c:	00000998 	muleq	r0, r8, r9
    1370:	00004b2c 	andeq	r4, r0, ip, lsr #22
			devinit [i] . init (devinit [i] . param);
    1374:	03330100 	teqeq	r3, #0, 2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1378:	0009bc20 	andeq	fp, r9, r0, lsr #24
    137c:	0a362c00 	beq	d8c384 <__ccfg+0xd6c3dc>
    1380:	36010000 	strcc	r0, [r1], -r0
	IntEnable (INT_UART0_COMB);
    1384:	09c42003 	stmibeq	r4, {r0, r1, sp}^
    1388:	732c0000 			; <UNDEFINED> instruction: 0x732c0000
}
    138c:	0100000d 	tsteq	r0, sp
	tci_run_auxiliary_timer ();
    1390:	e626033e 			; <UNDEFINED> instruction: 0xe626033e
		diag ("");
    1394:	2c000009 	stccs	0, cr0, [r0], {9}
    1398:	0000058e 	andeq	r0, r0, lr, lsl #11
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    139c:	20035901 	andcs	r5, r3, r1, lsl #18
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13a0:	00000a2e 	andeq	r0, r0, lr, lsr #20
		diag ("Leftover RAM: %d bytes",
    13a4:	0009972c 	andeq	r9, r9, ip, lsr #14
    13a8:	035c0100 	cmpeq	ip, #0, 2
    13ac:	000a361f 	andeq	r3, sl, pc, lsl r6
    13b0:	0ae22c00 	beq	ff88c3b8 <_estack+0xdf8873b8>
    13b4:	64010000 	strvs	r0, [r1], #-0
    13b8:	0a5a2903 	beq	168b7cc <__ccfg+0x166b824>
    13bc:	172c0000 	strne	r0, [ip, -r0]!
    13c0:	0100000a 	tsteq	r0, sl
    13c4:	62220367 	eorvs	r0, r2, #-1677721599	; 0x9c000001
    13c8:	2c00000a 	stccs	0, cr0, [r0], {10}
    13cc:	000004d9 	ldrdeq	r0, [r0], -r9
    13d0:	1a036f01 	bne	dcfdc <__ccfg+0xbd034>
    13d4:	00000a84 	andeq	r0, r0, r4, lsl #21
    13d8:	0004952c 	andeq	r9, r4, ip, lsr #10
    13dc:	03810100 	orreq	r0, r1, #0, 2
    13e0:	000ad416 	andeq	sp, sl, r6, lsl r4
    13e4:	087e2c00 	ldmdaeq	lr!, {sl, fp, sp}^
    13e8:	84010000 	strhi	r0, [r1], #-0
    13ec:	0adc1d03 	beq	ff708800 <_estack+0xdf703800>
    13f0:	622c0000 	eorvs	r0, ip, #0
    13f4:	01000008 	tsteq	r0, r8
    13f8:	f415038d 			; <UNDEFINED> instruction: 0xf415038d
    13fc:	2c00000a 	stccs	0, cr0, [r0], {10}
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1400:	00000d02 	andeq	r0, r0, r2, lsl #26
    1404:	10039101 	andne	r9, r3, r1, lsl #2
    1408:	00000b02 	andeq	r0, r0, r2, lsl #22
    140c:	00070a2c 	andeq	r0, r7, ip, lsr #20
    1410:	03960100 	orrseq	r0, r6, #0, 2
    1414:	000b4813 	andeq	r4, fp, r3, lsl r8
    1418:	0b172c00 	bleq	5cc420 <__ccfg+0x5ac478>
    141c:	9b010000 	blls	41424 <__ccfg+0x2147c>
}
    1420:	0b561103 	bleq	1585834 <__ccfg+0x156588c>
__attribute__ ((noreturn)) void __pi_release () {
    1424:	c02d0000 	eorgt	r0, sp, r0
    1428:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    142c:	00000983 	andeq	r0, r0, r3, lsl #19
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1430:	0d021d01 	stceq	13, cr1, [r2, #-4]
	check_stack_overflow;
    1434:	0000002c 	andeq	r0, r0, ip, lsr #32
    1438:	05540305 	ldrbeq	r0, [r4, #-773]	; 0xfffffcfb
    143c:	802e2000 	eorhi	r2, lr, r0
	update_n_wake (MAX_WORD, NO);
    1440:	01000004 	tsteq	r0, r4
    1444:	bd0e021e 	sfmlt	f0, 4, [lr, #-120]	; 0xffffff88
    1448:	0500000e 	streq	r0, [r0, #-14]
	for_all_tasks (__pi_curr) {
    144c:	00056a03 	andeq	r6, r5, r3, lsl #20
    1450:	04b02e20 	ldrteq	r2, [r0], #3616	; 0xe20
    1454:	1f010000 	svcne	0x00010000
  __ASM volatile ("cpsid i" : : : "memory");
    1458:	09261102 	stmdbeq	r6!, {r1, r8, ip}
	__SLEEP;
    145c:	03050000 	movweq	r0, #20480	; 0x5000
    1460:	20000568 	andcs	r0, r0, r8, ror #10
    1464:	0002822e 	andeq	r8, r2, lr, lsr #4
    1468:	02200100 	eoreq	r0, r0, #0, 2
	system_event_count ++;
    146c:	00092611 	andeq	r2, r9, r1, lsl r6
    1470:	69030500 	stmdbvs	r3, {r8, sl}
	switch (__pi_systat.effpdm) {
    1474:	2f200005 	svccs	0x00200005
    1478:	0000074c 	andeq	r0, r0, ip, asr #14
    147c:	0000076c 	andeq	r0, r0, ip, ror #14
    1480:	000014b9 			; <UNDEFINED> instruction: 0x000014b9
			__WFI ();
    1484:	000c6a2e 	andeq	r6, ip, lr, lsr #20
    1488:	028e0100 	addeq	r0, lr, #0, 2
    148c:	0009320c 	andeq	r3, r9, ip, lsl #4
	check_stack_overflow;
    1490:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1494:	001ae030 	andseq	lr, sl, r0, lsr r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1498:	00075e00 	andeq	r5, r7, r0, lsl #28
    149c:	0000e000 	andeq	lr, r0, r0
			(__pi_curr->code) (tstate (__pi_curr));
    14a0:	02930100 	addseq	r0, r3, #0, 2
			goto Redo;
    14a4:	1aff3108 	bne	fffcd8cc <_estack+0xdffc88cc>
	for_all_tasks (__pi_curr) {
    14a8:	00290000 	eoreq	r0, r9, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14ac:	f3310000 	vhadd.u<illegal width 64>	d0, d1, d0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14b0:	3d00001a 	stccc	0, cr0, [r0, #-104]	; 0xffffff98
    14b4:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14b8:	01003200 	mrseq	r3, R8_usr
    14bc:	15100000 	ldrne	r0, [r0, #-0]
    14c0:	592e0000 	stmdbpl	lr!, {}	; <UNPREDICTABLE>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14c4:	01000003 	tsteq	r0, r3
    14c8:	260b029f 			; <UNDEFINED> instruction: 0x260b029f
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14cc:	02000009 	andeq	r0, r0, #9
    14d0:	20326491 	mlascs	r2, r1, r4, r6
			__WFI ();
    14d4:	eb000001 	bl	14e0 <__pi_release+0xbc>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14d8:	33000014 	movwcc	r0, #20
    14dc:	af010069 	svcge	0x00010069
}
    14e0:	002c0b02 	eoreq	r0, ip, r2, lsl #22
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14e4:	00500000 	subseq	r0, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    14e8:	34000000 	strcc	r0, [r0], #-0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14ec:	00001b0c 	andeq	r1, r0, ip, lsl #22
    14f0:	00000786 	andeq	r0, r0, r6, lsl #15
			PRCMPowerDomainOff (__pi_systat.ondmns |
    14f4:	00000788 	andeq	r0, r0, r8, lsl #15
    14f8:	0802a301 	stmdaeq	r2, {r0, r8, r9, sp, pc}
    14fc:	001b2b31 	andseq	r2, fp, r1, lsr fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1500:	00006e00 	andeq	r6, r0, r0, lsl #28
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1504:	1b1f3100 	blne	7cd90c <__ccfg+0x7ad964>
    1508:	00810000 	addeq	r0, r1, r0
    150c:	00000000 	andeq	r0, r0, r0
    1510:	00013832 	andeq	r3, r1, r2, lsr r8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1514:	00152b00 	andseq	r2, r5, r0, lsl #22
    1518:	0eb73500 	cdpeq	5, 11, cr3, cr7, cr0, {0}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    151c:	d1010000 	mrsle	r0, (UNDEF: 1)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1520:	15bf1b02 	ldrne	r1, [pc, #2818]!	; 202a <tcv_open+0x5e>
    1524:	00940000 	addseq	r0, r4, r0
    1528:	2f000000 	svccs	0x00000000
    152c:	000008e0 	andeq	r0, r0, r0, ror #17
    1530:	000008fc 	strdeq	r0, [r0], -ip
			SysCtrlSetRechargeBeforePowerDown
    1534:	00001548 	andeq	r1, r0, r8, asr #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1538:	01006933 	tsteq	r0, r3, lsr r9
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    153c:	2c0c02ed 	sfmcs	f0, 4, [ip], {237}	; 0xed
    1540:	b2000000 	andlt	r0, r0, #0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	00000000 	andeq	r0, r0, r0
    1548:	0009402f 	andeq	r4, r9, pc, lsr #32
    154c:	00099000 	andeq	r9, r9, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1550:	00156700 	andseq	r6, r5, r0, lsl #14
    1554:	00003500 	andeq	r3, r0, r0, lsl #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1558:	10010000 	andne	r0, r1, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    155c:	15bf1b03 	ldrne	r1, [pc, #2819]!	; 2067 <tcv_open+0x9b>
    1560:	00d00000 	sbcseq	r0, r0, r0
    1564:	2f000000 	svccs	0x00000000
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1568:	000009e6 	andeq	r0, r0, r6, ror #19
			while (!(AONWUCPowerStatusGet () &
    156c:	00000a2e 	andeq	r0, r0, lr, lsr #20
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1570:	00001586 	andeq	r1, r0, r6, lsl #11
    1574:	000b7235 	andeq	r7, fp, r5, lsr r2
    1578:	03400100 	movteq	r0, #256	; 0x100
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    157c:	0015bf1b 	andseq	fp, r5, fp, lsl pc
    1580:	0000ee00 	andeq	lr, r0, r0, lsl #28
    1584:	842f0000 	strthi	r0, [pc], #-0	; 158c <__pi_release+0x168>
    1588:	d400000a 	strle	r0, [r0], #-10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    158c:	a400000a 	strge	r0, [r0], #-10
    1590:	2e000015 	mcrcs	0, 0, r0, cr0, cr5, {0}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1594:	000009c6 	andeq	r0, r0, r6, asr #19
    1598:	1b037101 	blne	dd9a4 <__ccfg+0xbd9fc>
			SysCtrlAdjustRechargeAfterPowerDown ();
    159c:	000015bf 			; <UNDEFINED> instruction: 0x000015bf
			reinit_uart ();
    15a0:	00649102 	rsbeq	r9, r4, r2, lsl #2
    15a4:	000b1636 	andeq	r1, fp, r6, lsr r6
    15a8:	000b4800 	andeq	r4, fp, r0, lsl #16
}
    15ac:	00693300 	rsbeq	r3, r9, r0, lsl #6
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15b0:	0c038601 	stceq	6, cr8, [r3], {1}
    15b4:	0000002c 	andeq	r0, r0, ip, lsr #32
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15b8:	0000010c 	andeq	r0, r0, ip, lsl #2
    15bc:	11000000 	mrsne	r0, (UNDEF: 0)
    15c0:	00113404 	andseq	r3, r1, r4, lsl #8
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15c4:	7b013700 	blvc	4f1cc <__ccfg+0x2f224>
    15c8:	01000000 	mrseq	r0, (UNDEF: 0)
    15cc:	780106f3 	stmdavc	r1, {r0, r1, r4, r5, r6, r7, r9, sl}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15d0:	48000002 	stmdami	r0, {r1}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    15d4:	01000006 	tsteq	r0, r6
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    15d8:	0017c89c 	mulseq	r7, ip, r8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    15dc:	0c233800 	stceq	8, cr3, [r3], #-0
    15e0:	f3010000 	vhadd.u8	d0, d1, d0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    15e4:	00096215 	andeq	r6, r9, r5, lsl r2
    15e8:	00011f00 	andeq	r1, r1, r0, lsl #30
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15ec:	043c3900 	ldrteq	r3, [ip], #-2304	; 0xfffff700
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    15f0:	f3010000 	vhadd.u8	d0, d1, d0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    15f4:	0012492e 	andseq	r4, r2, lr, lsr #18
    15f8:	00013d00 	andeq	r3, r1, r0, lsl #26
			PRCMPowerDomainOff (
    15fc:	06523a00 	ldrbeq	r3, [r2], -r0, lsl #20
    1600:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
	__SLEEP;
    1604:	00029813 	andeq	r9, r2, r3, lsl r8
    1608:	05c13a00 	strbeq	r3, [r1, #2560]	; 0xa00
  __ASM volatile ("cpsie i" : : : "memory");
    160c:	fc010000 	stc2	0, cr0, [r1], {-0}
	goto Redo;
    1610:	0002a60e 	andeq	sl, r2, lr, lsl #12
    1614:	0d962c00 	ldceq	12, cr2, [r6]
    1618:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    161c:	03461501 	movteq	r1, #25857	; 0x6501
    1620:	b12c0000 			; <UNDEFINED> instruction: 0xb12c0000
    1624:	0100000d 	tsteq	r0, sp
    1628:	541d01f9 	ldrpl	r0, [sp], #-505	; 0xfffffe07
    162c:	2c000003 	stccs	0, cr0, [r0], {3}
    1630:	00000528 	andeq	r0, r0, r8, lsr #10
    1634:	1d01fc01 	stcne	12, cr15, [r1, #-4]
    1638:	00000362 	andeq	r0, r0, r2, ror #6
    163c:	0006ba2c 	andeq	fp, r6, ip, lsr #20
    1640:	01ff0100 	mvnseq	r0, r0, lsl #2
    1644:	0003701f 	andeq	r7, r3, pc, lsl r0
    1648:	07232c00 	streq	r2, [r3, -r0, lsl #24]!
    164c:	04010000 	streq	r0, [r1], #-0
    1650:	03881602 	orreq	r1, r8, #2097152	; 0x200000
    1654:	362c0000 	strtcc	r0, [ip], -r0
    1658:	01000007 	tsteq	r0, r7
    165c:	9c160207 	lfmls	f0, 4, [r6], {7}
    1660:	2c000003 	stccs	0, cr0, [r0], {3}
    1664:	00000749 	andeq	r0, r0, r9, asr #14
    1668:	16020a01 	strne	r0, [r2], -r1, lsl #20
    166c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    1670:	000b172c 	andeq	r1, fp, ip, lsr #14
    1674:	020f0100 	andeq	r0, pc, #0, 2
    1678:	0003c411 	andeq	ip, r3, r1, lsl r4
	cli_tim;
    167c:	00602d00 	rsbeq	r2, r0, r0, lsl #26
    1680:	6f3b0000 	svcvs	0x003b0000
    1684:	01000002 	tsteq	r0, r2
	diag ("PicOS halted");
    1688:	15bf21f4 	ldrne	r2, [pc, #500]!	; 1884 <update_n_wake+0x60>
	mdelay (500);
    168c:	03050000 	movweq	r0, #20480	; 0x5000
    1690:	20000564 	andcs	r0, r0, r4, ror #10
	setpowermode (2);
    1694:	000c133b 	andeq	r1, ip, fp, lsr r3
	__PCB = NULL;
    1698:	11f60100 	mvnsne	r0, r0, lsl #2
	release;
    169c:	000009a6 	andeq	r0, r0, r6, lsr #19
    16a0:	05580305 	ldrbeq	r0, [r8, #-773]	; 0xfffffcfb
    16a4:	453b2000 	ldrmi	r2, [fp, #-0]!
    16a8:	01000000 	mrseq	r0, (UNDEF: 0)
int main (void) {
    16ac:	0ebd0ef7 	mrceq	14, 5, r0, cr13, cr7, {7}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16b0:	03050000 	movweq	r0, #20480	; 0x5000
    16b4:	20000540 	andcs	r0, r0, r0, asr #10
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16b8:	0000782d 	andeq	r7, r0, sp, lsr #16
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16bc:	02113500 	andseq	r3, r1, #0, 10
	system_init ();
    16c0:	16010000 	strne	r0, [r1], -r0
	tcv_init ();
    16c4:	15bf1d01 	ldrne	r1, [pc, #3329]!	; 23cd <tcvphy_get+0x1>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16c8:	01870000 	orreq	r0, r7, r0
    16cc:	e83c0000 	ldmda	ip!, {}	; <UNPREDICTABLE>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    16d0:	0100000c 	tsteq	r0, ip
    16d4:	c8250118 	stmdagt	r5!, {r3, r4, r8}
    16d8:	3c000017 	stccc	0, cr0, [r0], {23}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    16dc:	00000224 	andeq	r0, r0, r4, lsr #4
    16e0:	26013d01 	strcs	r3, [r1], -r1, lsl #26
	delay (16, 0);
    16e4:	000017ce 	andeq	r1, r0, lr, asr #15
    16e8:	00023735 	andeq	r3, r2, r5, lsr r7
    16ec:	01530100 	cmpeq	r3, r0, lsl #2
	__pi_release ();
    16f0:	0015bf1d 	andseq	fp, r5, sp, lsl pc
    16f4:	0001a500 	andeq	sl, r1, r0, lsl #10
    16f8:	0a723c00 	beq	1c90700 <__ccfg+0x1c70758>
    16fc:	54010000 	strpl	r0, [r1], #-0
    1700:	17d42101 	ldrbne	r2, [r4, r1, lsl #2]
    1704:	b03c0000 	eorslt	r0, ip, r0
    1708:	01000008 	tsteq	r0, r8
static void killev (__pi_pcb_t *pid) {
    170c:	da090155 	ble	241c68 <__ccfg+0x221cc0>
	wfun = (aword)(pid->code);
    1710:	35000017 	strcc	r0, [r0, #-23]	; 0xffffffe9
	for_all_tasks (i) {
    1714:	00000768 	andeq	r0, r0, r8, ror #14
		for (j = 0; j < nevents (i); j++) {
    1718:	0d015601 	stceq	6, cr5, [r1, #-4]
    171c:	00000926 	andeq	r0, r0, r6, lsr #18
    1720:	000001c3 	andeq	r0, r0, r3, asr #3
			    || i->Events [j] . Event == wfun
    1724:	0003be3c 	andeq	fp, r3, ip, lsr lr
		for (j = 0; j < nevents (i); j++) {
    1728:	017d0100 	cmneq	sp, r0, lsl #2
			if (i->Events [j] . Event == (aword)pid
    172c:	0015bf1d 	andseq	fp, r5, sp, lsl pc
    1730:	0d803c00 	stceq	12, cr3, [r0]
    1734:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
				wakeupev (i, j);
    1738:	17e12101 	strbne	r2, [r1, r1, lsl #2]!
    173c:	5c3c0000 	ldcpl	0, cr0, [ip], #-0
	for_all_tasks (i) {
    1740:	01000002 	tsteq	r0, r2
}
    1744:	bf1d019f 	svclt	0x001d019f
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1748:	3c000015 	stccc	0, cr0, [r0], {21}
static void qfree (aword *ch) {
    174c:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1750:	2301a001 	movwcs	sl, #4097	; 0x1001
	cc = (aword*)(mpools + MA_NP);
    1754:	000017e7 	andeq	r1, r0, r7, ror #15
	m_setnextp (ch, chunk);
    1758:	00091c2e 	andeq	r1, r9, lr, lsr #24
	m_setnextp (cc, ch);
    175c:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
}
    1760:	000e8813 	andeq	r8, lr, r3, lsl r8
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1764:	b0910300 	addslt	r0, r1, r0, lsl #6
    1768:	1a003d7f 	bne	10d6c <__exidx_end+0xb16c>
    176c:	04040000 	streq	r0, [r4], #-0
			m_setnextp (cc, m_nextp (chunk));
    1770:	00900000 	addseq	r0, r0, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
    1774:	6c010000 	stcvs	0, cr0, [r1], {-0}
    1778:	17a10a01 	strne	r0, [r1, r1, lsl #20]!
    177c:	2b310000 	blcs	c41784 <__ccfg+0xc217dc>
    1780:	e100001a 	tst	r0, sl, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1788:	00001a1f 	andeq	r1, r0, pc, lsl sl
    178c:	001a1331 	andseq	r1, sl, r1, lsr r3
    1790:	0001f500 	andeq	pc, r1, r0, lsl #10
			m_setnextp (cc, m_nextp (chunk));
    1794:	00902d00 	addseq	r2, r0, r0, lsl #26
			m_size (ch) += m_hdrlen + m_size (chunk);
    1798:	373f0000 	ldrcc	r0, [pc, -r0]!
    179c:	0000001a 	andeq	r0, r0, sl, lsl r0
    17a0:	19563000 	ldmdbne	r6, {ip, sp}^
    17a4:	05660000 	strbeq	r0, [r6, #-0]!
    17a8:	00a80000 	adceq	r0, r8, r0
    17ac:	ac010000 	stcge	0, cr0, [r1], {-0}
			if (m_size (chunk) >= m_size (ch))
    17b0:	75311901 	ldrvc	r1, [r1, #-2305]!	; 0xfffff6ff
    17b4:	08000019 	stmdaeq	r0, {r0, r3, r4}
    17b8:	31000002 	tstcc	r0, r2
		chunk = m_nextp (chunk))
    17bc:	00001969 	andeq	r1, r0, r9, ror #18
    17c0:	00000227 	andeq	r0, r0, r7, lsr #4
    17c4:	00000000 	andeq	r0, r0, r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17c8:	0f680411 	svceq	0x00680411
	diag_wait (a);
    17cc:	04110000 	ldreq	r0, [r1], #-0
	diag_wchar (c, a);
    17d0:	00000fb7 			; <UNDEFINED> instruction: 0x00000fb7
    17d4:	10060411 	andne	r0, r6, r1, lsl r4
}
    17d8:	01020000 	mrseq	r0, (UNDEF: 2)
    17dc:	000c9702 	andeq	r9, ip, r2, lsl #14
	syserror (ESTATE, "state");
    17e0:	62041100 	andvs	r1, r4, #0, 2
    17e4:	11000010 	tstne	r0, r0, lsl r0
    17e8:	0010cb04 	andseq	ip, r0, r4, lsl #22
    17ec:	88013700 	stmdahi	r1, {r8, r9, sl, ip, sp}
	for (i = 0; i < MAX_UTIMERS; i++)
    17f0:	0100000a 	tsteq	r0, sl
void utimer_add (address ut) {
    17f4:	c80106b6 	stmdagt	r1, {r1, r2, r4, r5, r7, r9, sl}
    17f8:	84000000 	strhi	r0, [r0], #-0
		if (__pi_utims [i] == NULL)
    17fc:	01000001 	tsteq	r0, r1
	for (i = 0; i < MAX_UTIMERS; i++)
    1800:	0018779c 	mulseq	r8, ip, r7
    1804:	0c233800 	stceq	8, cr3, [r3], #-0
		syserror (ERESOURCE, "ut a");
    1808:	b6010000 	strlt	r0, [r1], -r0
	__pi_utims [i] = ut;
    180c:	00096213 	andeq	r6, r9, r3, lsl r2
}
    1810:	00023a00 	andeq	r3, r2, r0, lsl #20
    1814:	0bff3900 	bleq	fffcfc1c <_estack+0xdffcac1c>
    1818:	b6010000 	strlt	r0, [r1], -r0
	*t = v;
    181c:	0015bf37 	andseq	fp, r5, r7, lsr pc
	TCI_RUN_AUXILIARY_TIMER;
    1820:	00025800 	andeq	r5, r2, r0, lsl #16
void update_n_wake (word min, Boolean force) {
    1824:	09e93a00 	stmibeq	r9!, {r9, fp, ip, sp}^
	if (TCI_UPDATE_DELAY_TICKS (force))
    1828:	bb010000 	bllt	41830 <__ccfg+0x21888>
    182c:	0000da11 	andeq	sp, r0, r1, lsl sl
    1830:	0bef3a00 	bleq	ffbd0038 <_estack+0xdfbcb038>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1834:	eb010000 	bl	4183c <__ccfg+0x21894>
    1838:	0001281b 	andeq	r2, r1, fp, lsl r8
    183c:	00002d00 	andeq	r2, r0, r0, lsl #26
    1840:	1c3b0000 	ldcne	0, cr0, [fp], #-0
    1844:	0100000c 	tsteq	r0, ip
    1848:	09a611b7 	stmibeq	r6!, {r0, r1, r2, r4, r5, r7, r8, ip}
    184c:	03050000 	movweq	r0, #20480	; 0x5000
    1850:	2000055c 	andcs	r0, r0, ip, asr r5
    1854:	00039540 	andeq	r9, r3, r0, asr #10
    1858:	0db90100 	ldfeqs	f0, [r9]
    185c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1860:	00382d1e 	eorseq	r2, r8, lr, lsl sp
    1864:	70410000 	subvc	r0, r1, r0
		for_all_tasks (i) {
    1868:	0abf0100 	beq	fefc1c70 <_estack+0xdefbcc70>
	__pi_mintk = znew + min;
    186c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    1870:	0000026f 	andeq	r0, r0, pc, ror #4
			if (!twaiting (i))
    1874:	42000000 	andmi	r0, r0, #0
    1878:	000ac801 	andeq	ip, sl, r1, lsl #16
			if (twakecnd (__pi_old, znew, i->Timer)) {
    187c:	19a10100 	stmibne	r1!, {r8}
    1880:	0015bf01 	andseq	fp, r5, r1, lsl #30
    1884:	00022600 	andeq	r2, r2, r0, lsl #12
    1888:	00027800 	andeq	r7, r2, r0, lsl #16
    188c:	119c0100 	orrsne	r0, ip, r0, lsl #2
    1890:	43000019 	movwmi	r0, #25
    1894:	00646967 	rsbeq	r6, r4, r7, ror #18
    1898:	323ca101 	eorscc	sl, ip, #1073741824	; 0x40000000
    189c:	82000009 	andhi	r0, r0, #9
    18a0:	38000002 	stmdacc	r0, {r1}
    18a4:	00000d64 	andeq	r0, r0, r4, ror #26
    18a8:	2649a101 	strbcs	sl, [r9], -r1, lsl #2
				wakeuptm (i);
    18ac:	95000009 	strls	r0, [r0, #-9]
    18b0:	38000002 	stmdacc	r0, {r1}
		for_all_tasks (i) {
    18b4:	000004cf 	andeq	r0, r0, pc, asr #9
				d = i->Timer - znew;
    18b8:	2661a101 	strbtcs	sl, [r1], -r1, lsl #2
    18bc:	a8000009 	stmdage	r0, {r0, r3}
    18c0:	38000002 	stmdacc	r0, {r1}
		if ((word)(__pi_mintk - znew) < min) 
    18c4:	00000290 	muleq	r0, r0, r2
    18c8:	2674a101 	ldrbtcs	sl, [r4], -r1, lsl #2
    18cc:	bb000009 	bllt	18f8 <proceed+0x8>
	__pi_old = znew;
    18d0:	44000002 	strmi	r0, [r0], #-2
}
    18d4:	00000768 	andeq	r0, r0, r8, ror #14
	TCI_RUN_DELAY_TIMER;
    18d8:	2689a101 	strcs	sl, [r9], r1, lsl #2
}
    18dc:	02000009 	andeq	r0, r0, #9
    18e0:	19440091 	stmdbne	r4, {r0, r4, r7}^
    18e4:	01000008 	tsteq	r0, r8
    18e8:	092699a1 	stmdbeq	r6!, {r0, r5, r7, r8, fp, ip, pc}
    18ec:	91020000 	mrsls	r0, (UNDEF: 2)
void proceed (word state) {
    18f0:	65724504 	ldrbvs	r4, [r2, #-1284]!	; 0xfffffafc
	prcdstate (__pi_curr, state);
    18f4:	a1010063 	tstge	r1, r3, rrx
    18f8:	0005bda7 	andeq	fp, r5, r7, lsr #27
	release;
    18fc:	08910200 	ldmeq	r1, {r9}
    1900:	000ad139 	andeq	sp, sl, r9, lsr r1
void __pi_wait (aword event, word state) {
    1904:	1aa20100 	bne	fe881d0c <_estack+0xde87cd0c>
	sint j = nevents (__pi_curr);
    1908:	000015bf 			; <UNDEFINED> instruction: 0x000015bf
	if (j >= MAX_EVENTS_PER_TASK)
    190c:	000002ce 	andeq	r0, r0, lr, asr #5
    1910:	11014200 	mrsne	r4, R9_usr
    1914:	0100000f 	tsteq	r0, pc
		syserror (ENEVENTS, "sw");
    1918:	da01058e 	ble	42f58 <__ccfg+0x22fb0>
    191c:	00000017 	andeq	r0, r0, r7, lsl r0
	setestate (__pi_curr->Events [j], state, event);
    1920:	26000002 	strcs	r0, [r0], -r2
	incwait (__pi_curr);
    1924:	01000002 	tsteq	r0, r2
	setestate (__pi_curr->Events [j], state, event);
    1928:	0019569c 	mulseq	r9, ip, r6
}
    192c:	51cb3800 	bicpl	r3, fp, r0, lsl #16
    1930:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1934:	0012491d 	andseq	r4, r2, sp, lsl r9
void __pi_trigger (aword event) {
    1938:	0002ec00 	andeq	lr, r2, r0, lsl #24
	for_all_tasks (i) {
    193c:	02083600 	andeq	r3, r8, #0, 12
		for (j = 0; j < nevents (i); j++) {
    1940:	021a0000 	andseq	r0, sl, #0
    1944:	69410000 	stmdbvs	r1, {}^	; <UNPREDICTABLE>
    1948:	11940100 	orrsne	r0, r4, r0, lsl #2
    194c:	0000002c 	andeq	r0, r0, ip, lsr #32
			if (i->Events [j] . Event == event) {
    1950:	0000030a 	andeq	r0, r0, sl, lsl #6
    1954:	01460000 	mrseq	r0, (UNDEF: 70)
    1958:	000009c6 	andeq	r0, r0, r6, asr #19
				wakeupev (i, j);
    195c:	010f8601 	tsteq	pc, r1, lsl #12
    1960:	00000e88 	andeq	r0, r0, r8, lsl #29
	for_all_tasks (i) {
    1964:	00198201 	andseq	r8, r9, r1, lsl #4
}
    1968:	51cb4700 	bicpl	r4, fp, r0, lsl #14
aword __pi_join (aword pid, word st) {
    196c:	86010000 	strhi	r0, [r1], -r0
	for_all_tasks (i) {
    1970:	0012492c 	andseq	r4, r2, ip, lsr #18
    1974:	04be4700 	ldrteq	r4, [lr], #1792	; 0x700
	return 0;
    1978:	86010000 	strhi	r0, [r1], -r0
		if ((aword)i == pid) {
    197c:	0009263a 	andeq	r2, r9, sl, lsr r6
			__pi_wait (pid, st);
    1980:	01420000 	mrseq	r0, (UNDEF: 66)
}
    1984:	00000b72 	andeq	r0, r0, r2, ror fp
	for_all_tasks (i) {
    1988:	01057201 	tsteq	r5, r1, lsl #4
    198c:	000017da 	ldrdeq	r1, [r0], -sl
void delay (word d, word state) {
    1990:	000001e4 	andeq	r0, r0, r4, ror #3
	settstate (__pi_curr, state);
    1994:	00000200 	andeq	r0, r0, r0, lsl #4
    1998:	19bf9c01 	ldmibne	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    199c:	cb380000 	blgt	e019a4 <__ccfg+0xde19fc>
    19a0:	01000051 	qaddeq	r0, r1, r0
	update_n_wake (d, YES);
    19a4:	12492072 	subne	r2, r9, #114	; 0x72
    19a8:	03280000 			; <UNDEFINED> instruction: 0x03280000
	__pi_curr->Timer = __pi_old + d;
    19ac:	be380000 	cdplt	0, 3, cr0, cr8, cr0, {0}
    19b0:	01000004 	tsteq	r0, r4
	inctimer (__pi_curr);
    19b4:	09262e72 	stmdbeq	r6!, {r1, r4, r5, r6, r9, sl, fp, sp}
    19b8:	033b0000 	teqeq	fp, #0
    19bc:	42000000 	andmi	r0, r0, #0
}
    19c0:	0005d601 	andeq	sp, r5, r1, lsl #12
    19c4:	05620100 	strbeq	r0, [r2, #-256]!	; 0xffffff00
	if (fun == NULL)
    19c8:	0017da01 	andseq	sp, r7, r1, lsl #20
		return (int) __pi_curr;
    19cc:	0001ce00 	andeq	ip, r1, r0, lsl #28
    19d0:	0001e400 	andeq	lr, r1, r0, lsl #8
	for_all_tasks (i)
    19d4:	009c0100 	addseq	r0, ip, r0, lsl #2
}
    19d8:	3800001a 	stmdacc	r0, {r1, r3, r4}
		if (i->code == fun)
    19dc:	000051cb 	andeq	r5, r0, fp, asr #3
	for_all_tasks (i)
    19e0:	492d6201 	pushmi	{r0, r9, sp, lr}
    19e4:	4e000012 	mcrmi	0, 0, r0, cr0, cr2, {0}
    19e8:	36000003 	strcc	r0, [r0], -r3
int __pi_strlen (const char *s) {
    19ec:	000001ce 	andeq	r0, r0, lr, asr #3
	for (i = 0; *(s+i) != '\0'; i++);
    19f0:	000001e0 	andeq	r0, r0, r0, ror #3
}
    19f4:	01006948 	tsteq	r0, r8, asr #18
	for (i = 0; *(s+i) != '\0'; i++);
    19f8:	002c1267 	eoreq	r1, ip, r7, ror #4
	while ((Boolean)(*d++ = *s++));
    19fc:	00000000 	andeq	r0, r0, r0
    1a00:	03d90146 	bicseq	r0, r9, #-2147483631	; 0x80000011
    1a04:	42010000 	andmi	r0, r1, #0
}
    1a08:	17da0105 	ldrbne	r0, [sl, r5, lsl #2]
	while (n-- && (*s != '\0'))
    1a0c:	50010000 	andpl	r0, r1, r0
    1a10:	4700001a 	smladmi	r0, sl, r0, r0
	*d = '\0';
    1a14:	000051cb 	andeq	r5, r0, fp, asr #3
	while (n-- && (*s != '\0'))
    1a18:	49204201 	stmdbmi	r0!, {r0, r9, lr}
    1a1c:	47000012 	smladmi	r0, r2, r0, r0
		*d++ = *s++;
    1a20:	00000ee2 	andeq	r0, r0, r2, ror #29
    1a24:	bd2c4201 	sfmlt	f4, 4, [ip, #-4]!
	while (n--)
    1a28:	47000005 	strmi	r0, [r0, -r5]
    1a2c:	00000f23 	andeq	r0, r0, r3, lsr #30
		*dest++ = *src++;
    1a30:	263f4201 	ldrtcs	r4, [pc], -r1, lsl #4
    1a34:	48000009 	stmdami	r0, {r0, r3}
    1a38:	006d756e 	rsbeq	r7, sp, lr, ror #10
	while (n--)
    1a3c:	2c094501 	cfstr32cs	mvfx4, [r9], {1}
}
    1a40:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
		*dest++ = c;
    1a44:	01006948 	tsteq	r0, r8, asr #18
void adddevfunc (devreqfun_t rf, int loc) {
    1a48:	002c124d 	eoreq	r1, ip, sp, asr #4
		syserror (EREQPAR, "addv");
    1a4c:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "addv");
    1a50:	0579014a 	ldrbeq	r0, [r9, #-330]!	; 0xfffffeb6
	if (ioreq [loc] != NULL)
    1a54:	3d010000 	stccc	0, cr0, [r1, #-0]
    1a58:	09260109 	stmdbeq	r6!, {r0, r3, r8}
		syserror (ERESOURCE, "addv");
    1a5c:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
	ioreq [loc] = rf;
    1a60:	01ce0000 	biceq	r0, lr, r0
}
    1a64:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a68:	00970137 	addseq	r0, r7, r7, lsr r1
sint io (word retry, word dev, word operation, char *buf, word len) {
    1a6c:	36010000 	strcc	r0, [r1], -r0
    1a70:	01840106 	orreq	r0, r4, r6, lsl #2
    1a74:	01980000 	orrseq	r0, r8, r0
    1a78:	9c010000 	stcls	0, cr0, [r1], {-0}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1a7c:	00001aa5 	andeq	r1, r0, r5, lsr #21
    1a80:	0051cb38 	subseq	ip, r1, r8, lsr fp
    1a84:	1f360100 	svcne	0x00360100
		syserror (ENODEVICE, "io");
    1a88:	00001249 	andeq	r1, r0, r9, asr #4
    1a8c:	00000361 	andeq	r0, r0, r1, ror #6
	if (len == 0)
    1a90:	00018436 	andeq	r8, r1, r6, lsr r4
	ret = (ioreq [dev]) (operation, buf, len);
    1a94:	00019600 	andeq	r9, r1, r0, lsl #12
    1a98:	00694800 	rsbeq	r4, r9, r0, lsl #16
	if (ret >= 0)
    1a9c:	2c0b3701 	stccs	7, cr3, [fp], {1}
	if (ret == -1) {
    1aa0:	00000000 	andeq	r0, r0, r0
    1aa4:	81014200 	mrshi	r4, R9_usr
		if (retry == WNONE)
    1aa8:	0100000e 	tsteq	r0, lr
		iowait (dev, operation, retry);
    1aac:	da01052f 	ble	42f70 <__ccfg+0x22fc8>
    1ab0:	00000017 	andeq	r0, r0, r7, lsl r0
    1ab4:	00000000 	andeq	r0, r0, r0
			release;
    1ab8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (ret == -2) {
    1abc:	001ae09c 	mulseq	sl, ip, r0
		if (retry != WNONE) {
    1ac0:	51cb3800 	bicpl	r3, fp, r0, lsl #16
    1ac4:	2f010000 	svccs	0x00010000
			iowait (dev, operation, retry);
    1ac8:	0012492a 	andseq	r4, r2, sl, lsr #18
    1acc:	00037400 	andeq	r7, r3, r0, lsl #8
			(ioreq [dev]) (NONE, buf, len);
    1ad0:	03874400 	orreq	r4, r7, #0, 8
    1ad4:	2f010000 	svccs	0x00010000
    1ad8:	00092638 	andeq	r2, r9, r8, lsr r6
		(ioreq [dev]) (NONE, buf, len);
    1adc:	00510100 	subseq	r0, r1, r0, lsl #2
    1ae0:	08c00146 	stmiaeq	r0, {r1, r2, r6, r8}^
    1ae4:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
}
    1ae8:	17da0105 	ldrbne	r0, [sl, r5, lsl #2]
	if (retry != WNONE) {
    1aec:	0c010000 	stceq	0, cr0, [r1], {-0}
		delay (-ret - 2, retry);
    1af0:	4700001b 	smladmi	r0, fp, r0, r0
    1af4:	000051cb 	andeq	r5, r0, fp, asr #3
    1af8:	491f2901 	ldmdbmi	pc, {r0, r8, fp, sp}	; <UNPREDICTABLE>
    1afc:	4b000012 	blmi	1b4c <__pi_malloc_init+0x44>
		release;
    1b00:	00646967 	rsbeq	r6, r4, r7, ror #18
    1b04:	322e2901 	eorcc	r2, lr, #16384	; 0x4000
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b08:	00000009 	andeq	r0, r0, r9
    1b0c:	046c0146 	strbteq	r0, [ip], #-326	; 0xfffffeba
    1b10:	24010000 	strcs	r0, [r1], #-0
    1b14:	17da0105 	ldrbne	r0, [sl, r5, lsl #2]
    1b18:	37010000 	strcc	r0, [r1, -r0]
		syserror (ERESOURCE, "mal1");
    1b1c:	4700001b 	smladmi	r0, fp, r0, r0
    1b20:	000051cb 	andeq	r5, r0, fp, asr #3
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b24:	491e2401 	ldmdbmi	lr, {r0, sl, sp}
    1b28:	4b000012 	blmi	1b78 <__pi_free+0x20>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b2c:	01006469 	tsteq	r0, r9, ror #8
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b30:	09262c24 	stmdbeq	r6!, {r2, r5, sl, fp, sp}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b34:	42000000 	andmi	r0, r0, #0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b38:	000c9d01 	andeq	r9, ip, r1, lsl #26
    1b3c:	05110100 	ldreq	r0, [r1, #-256]	; 0xffffff00
}
    1b40:	0017da01 	andseq	sp, r7, r1, lsl #20
    1b44:	00019800 	andeq	r9, r1, r0, lsl #16
    1b48:	0001bc00 	andeq	fp, r1, r0, lsl #24
    1b4c:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
    1b50:	3800001b 	stmdacc	r0, {r0, r1, r3, r4}
    1b54:	000051cb 	andeq	r5, r0, fp, asr #3
void __pi_free (aword *ch) {
    1b58:	491c1101 	ldmdbmi	ip, {r0, r8, ip}
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b5c:	87000012 	smladhi	r0, r2, r0, r0
    1b60:	00000003 	andeq	r0, r0, r3
		syserror (EMALLOC, "malg");
    1b64:	0009374c 	andeq	r3, r9, ip, asr #14
    1b68:	01d31200 	bicseq	r1, r3, r0, lsl #4
	mcfree [MA_NP] += m_size (ch);
    1b6c:	093e0101 	ldmdbeq	lr!, {r0, r8}
		m_size (ch) ^= MALLOC_UMASK;
    1b70:	4d030000 	stcmi	0, cr0, [r3, #-0]
    1b74:	00001b0c 	andeq	r1, r0, ip, lsl #22
	...
	if (mevent [MA_NP] . nwait) {
    1b80:	1b979c01 	blne	fe5e8b8c <_estack+0xde5e3b8c>
    1b84:	1f310000 	svcne	0x00310000
		trigger ((aword)(&(mevent [MA_NP])));
    1b88:	9a00001b 	bls	1bfc <__pi_malloc+0xc>
		mevent [MA_NP] . nwait --;
    1b8c:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
}
    1b90:	00001b2b 	andeq	r1, r0, fp, lsr #22
    1b94:	4d005101 	stfmis	f5, [r0, #-4]
    1b98:	00001ae0 	andeq	r1, r0, r0, ror #21
	...
		pid = (aword) __pi_curr;
    1ba4:	1bbb9c01 	blne	feee8bb0 <_estack+0xdeee3bb0>
	j = NULL;
    1ba8:	f3310000 	vhadd.u<illegal width 64>	d0, d1, d0
	for_all_tasks (i) {
    1bac:	ad00001a 	stcge	0, cr0, [r0, #-104]	; 0xffffff98
	syserror (EREQPAR, "kpi");
    1bb0:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
    1bb4:	00001aff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
		if ((aword)i == pid) {
    1bb8:	4d005101 	stfmis	f5, [r0, #-4]
    1bbc:	00001a00 	andeq	r1, r0, r0, lsl #20
	...
			ufree (i);
    1bc8:	1beb9c01 	blne	ffae8bd4 <_estack+0xdfae3bd4>
			if (i == __pi_curr)
    1bcc:	13310000 	teqne	r1, #0
    1bd0:	c000001a 	andgt	r0, r0, sl, lsl r0
				release;
    1bd4:	4e000003 	cdpmi	0, 0, cr0, cr0, cr3, {0}
				j->Next = i->Next;
    1bd8:	00001a1f 	andeq	r1, r0, pc, lsl sl
    1bdc:	2b4e5101 	blcs	1395fe8 <__ccfg+0x1376040>
    1be0:	0100001a 	tsteq	r0, sl, lsl r0
}
    1be4:	1a373f52 	bne	dd1934 <__ccfg+0xdb198c>
    1be8:	4f000000 	svcmi	0x00000000
    1bec:	00001956 	andeq	r1, r0, r6, asr r9
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1bf8:	69319c01 	ldmdbvs	r1!, {r0, sl, fp, ip, pc}
		_size = (((aword)size) + 3) >> 2;
    1bfc:	d3000019 	movwle	r0, #25
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c00:	31000003 	tstcc	r0, r3
		_size = (((aword)size) + 3) >> 2;
    1c04:	00001975 	andeq	r1, r0, r5, ror r9
		if (mevent [MA_NP] . nfail != 255)
    1c08:	000003e6 	andeq	r0, r0, r6, ror #7
    1c0c:	148c0000 	strne	r0, [ip], #0
			mevent [MA_NP] . nfail ++;
    1c10:	00030000 	andeq	r0, r3, r0
		mnfree [MA_NP] = 0;
    1c14:	00000486 	andeq	r0, r0, r6, lsl #9
    1c18:	00a30104 	adceq	r0, r3, r4, lsl #2
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c1c:	6e0c0000 	cdpvs	0, 0, cr0, cr12, cr0, {0}
    1c20:	ec000012 	stc	0, cr0, [r0], {18}
			syserror (EMALLOC, "malc");
    1c24:	3800000d 	stmdacc	r0, {r0, r2, r3}
    1c28:	00000006 	andeq	r0, r0, r6
		if (m_size (chunk) >= _size)
    1c2c:	6a000000 	bvs	1c34 <__pi_malloc+0x44>
    1c30:	0200000d 	andeq	r0, r0, #13
		chunk = m_nextp (chunk)) {
    1c34:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
		m_setnextp (cc, m_nextp (chunk));
    1c38:	02020000 	andeq	r0, r2, #0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c3c:	000a5b05 	andeq	r5, sl, r5, lsl #22
    1c40:	2b830300 	blcs	fe0c2848 <_estack+0xde0bd848>
			m_size (chunk) = _size;
    1c44:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
			cc = chunk + _size + m_hdrlen;
    1c48:	00003f18 	andeq	r3, r0, r8, lsl pc
    1c4c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
			m_size (cc) = waste - m_hdrlen;
    1c50:	000007ed 	andeq	r0, r0, sp, ror #15
			QFREE;
    1c54:	e8050802 	stmda	r5, {r1, fp}
		mevent [MA_NP] . nfail = 0;
    1c58:	03000007 	movweq	r0, #7
		mcfree [MA_NP] -= m_size (chunk);
    1c5c:	000029fe 	strdeq	r2, [r0], -lr
    1c60:	59182e10 	ldmdbpl	r8, {r4, r9, sl, fp, sp}
    1c64:	02000000 	andeq	r0, r0, #0
    1c68:	0c4b0801 	mcrreq	8, 0, r0, fp, cr1
		m_size (chunk) |= MALLOC_UMASK;
    1c6c:	f4030000 	vst4.8	{d0-d3}, [r3], r0
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1c70:	1000002d 	andne	r0, r0, sp, lsr #32
		m_size (chunk) |= MALLOC_UMASK;
    1c74:	006c1931 	rsbeq	r1, ip, r1, lsr r9
			mnfree [MA_NP] = mcfree [MA_NP];
    1c78:	02020000 	andeq	r0, r2, #0
}
    1c7c:	000d4807 	andeq	r4, sp, r7, lsl #16
    1c80:	29960300 	ldmibcs	r6, {r8, r9}
    1c84:	34100000 	ldrcc	r0, [r0], #-0
    1c88:	00007f19 	andeq	r7, r0, r9, lsl pc
    1c8c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1c90:	0000041d 	andeq	r0, r0, sp, lsl r4
    1c94:	18070802 	stmdane	r7, {r1, fp}
aword __pi_fork (fsmcode func, aword data) {
    1c98:	04000004 	streq	r0, [r0], #-4
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c9c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    1ca0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    1ca4:	00042207 	andeq	r2, r4, r7, lsl #4
		if ((j = __PCB) == NULL)
    1ca8:	130a0300 	movwne	r0, #41728	; 0xa300
	i->Next = NULL;
    1cac:	26110000 	ldrcs	r0, [r1], -r0
	i->data = data;
    1cb0:	00004d12 	andeq	r4, r0, r2, lsl sp
		if ((j = __PCB) == NULL)
    1cb4:	28dd0300 	ldmcs	sp, {r8, r9}^
}
    1cb8:	27110000 	ldrcs	r0, [r1, -r0]
			for (; j->Next != NULL; j = j->Next);
    1cbc:	00006012 	andeq	r6, r0, r2, lsl r0
    1cc0:	00a70500 	adceq	r0, r7, r0, lsl #10
	return (aword) i;
    1cc4:	a7060000 	strge	r0, [r6, -r0]
    1cc8:	03000000 	movweq	r0, #0
	if (mevent [MA_NP] . nwait != 255)
    1ccc:	000013ae 	andeq	r1, r0, lr, lsr #7
    1cd0:	33122811 	tstcc	r2, #1114112	; 0x110000
    1cd4:	03000000 	movweq	r0, #0
		mevent [MA_NP] . nwait ++;
    1cd8:	00001da4 	andeq	r1, r0, r4, lsr #27
	wait ((aword)(&(mevent [MA_NP])), state);
    1cdc:	4d122b11 	vldrmi	d2, [r2, #-68]	; 0xffffffbc
    1ce0:	06000000 	streq	r0, [r0], -r0
void diag (const char *mess, ...) {
    1ce4:	000000c9 	andeq	r0, r0, r9, asr #1
    1ce8:	0000c905 	andeq	ip, r0, r5, lsl #18
    1cec:	292f0300 	stmdbcs	pc!, {r8, r9}	; <UNPREDICTABLE>
	diag_disable_int (a, is);
    1cf0:	2c110000 	ldccs	0, cr0, [r1], {-0}
    1cf4:	00007312 	andeq	r7, r0, r2, lsl r3
    1cf8:	00df0500 	sbcseq	r0, pc, r0, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	36030000 	strcc	r0, [r3], -r0
	diag_disable_int (a, is);
    1d00:	11000006 	tstne	r0, r6
	while (*mess != '\0') {
    1d04:	0073122d 	rsbseq	r1, r3, sp, lsr #4
	dgout ('\r');
    1d08:	a4030000 	strge	r0, [r3], #-0
	dgout ('\n');
    1d0c:	1100000b 	tstne	r0, fp
    1d10:	0108102e 	tsteq	r8, lr, lsr #32
    1d14:	04070000 	streq	r0, [r7], #-0
	diag_wait (a);
    1d18:	000000a7 	andeq	r0, r0, r7, lsr #1
	diag_enable_int (a, is);
    1d1c:	32110808 	andscc	r0, r1, #8, 16	; 0x80000
    1d20:	00019c09 	andeq	r9, r1, r9, lsl #24
}
    1d24:	002b0900 	eoreq	r0, fp, r0, lsl #18
    1d28:	34110000 	ldrcc	r0, [r1], #-0
    1d2c:	0000c907 	andeq	ip, r0, r7, lsl #18
		if (*mess == '%') {
    1d30:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1d34:	063c0900 	ldrteq	r0, [ip], -r0, lsl #18
			if (*mess == 'l') {
    1d38:	35110000 	ldrcc	r0, [r1, #-0]
    1d3c:	0000c903 	andeq	ip, r0, r3, lsl #18
				mess++;
    1d40:	06010100 	streq	r0, [r1], -r0, lsl #2
				val = va_arg (ap, lword);
    1d44:	02de0900 	sbcseq	r0, lr, #0, 18
				bc = 32;
    1d48:	36110000 	ldrcc	r0, [r1], -r0
				bc = 16;
    1d4c:	0000c903 	andeq	ip, r0, r3, lsl #18
			switch (*mess) {
    1d50:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1d54:	06a70900 	strteq	r0, [r7], r0, lsl #18
    1d58:	37110000 	ldrcc	r0, [r1, -r0]
				dgout ('%');
    1d5c:	0000c903 	andeq	ip, r0, r3, lsl #18
    1d60:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
				dgout (*mess);
    1d64:	0a8f0900 	beq	fe3c416c <_estack+0xde3bf16c>
    1d68:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
			switch (*mess) {
    1d6c:	0000c903 	andeq	ip, r0, r3, lsl #18
					v = __pi_hex_enc_table [
    1d70:	00040100 	andeq	r0, r4, r0, lsl #2
					i += 4;
    1d74:	064b0a00 	strbeq	r0, [fp], -r0, lsl #20
					(val >> (bc - i)) & 0xf];
    1d78:	3a110000 	bcc	441d80 <__ccfg+0x421dd8>
    1d7c:	0000c907 	andeq	ip, r0, r7, lsl #18
					dgout (v);
    1d80:	eb0a0100 	bl	282188 <__ccfg+0x2621e0>
    1d84:	11000008 	tstne	r0, r8
				while (i < bc) {
    1d88:	00c9033c 	sbceq	r0, r9, ip, lsr r3
			mess++;
    1d8c:	0a020000 	beq	81d94 <__ccfg+0x61dec>
					d /= 10;
    1d90:	00000f1c 	andeq	r0, r0, ip, lsl pc
				if ((val >> (bc - 1)) & 1) {
    1d94:	c9033d11 	stmdbgt	r3, {r0, r4, r8, sl, fp, ip, sp}
    1d98:	03000000 	movweq	r0, #0
					dgout ('-');
    1d9c:	0009030a 	andeq	r0, r9, sl, lsl #6
    1da0:	083f1100 	ldmdaeq	pc!, {r8, ip}	; <UNPREDICTABLE>
						val |= 0xffff0000;
    1da4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1da8:	14030004 	strne	r0, [r3], #-4
    1dac:	11000003 	tstne	r0, r3
				d = (bc == 16) ? 10000 : 1000000000;
    1db0:	010e0341 	tsteq	lr, r1, asr #6
    1db4:	9c060000 	stcls	0, cr0, [r6], {-0}
    1db8:	0b000001 	bleq	1dc4 <diag+0xe0>
					v = (word) (val / d);
    1dbc:	000006ae 	andeq	r0, r0, lr, lsr #13
					if (v || d == 1) break;
    1dc0:	a81a4311 	ldmdage	sl, {r0, r4, r8, r9, lr}
    1dc4:	01000001 	tsteq	r0, r1
					d /= 10;
    1dc8:	01970b01 	orrseq	r0, r7, r1, lsl #22
				d = (bc == 16) ? 10000 : 1000000000;
    1dcc:	45110000 	ldrmi	r0, [r1, #-0]
					dgout (v + '0');
    1dd0:	0001c90e 	andeq	ip, r1, lr, lsl #18
    1dd4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1dd8:	0001cf04 	andeq	ip, r1, r4, lsl #30
					d /= 10;
    1ddc:	08010200 	stmdaeq	r1, {r9}
					val = val - (v * d);
    1de0:	00000c54 	andeq	r0, r0, r4, asr ip
					if (d == 0) break;
    1de4:	0001cf05 	andeq	ip, r1, r5, lsl #30
					v = (word) (val / d);
    1de8:	031d0b00 	tsteq	sp, #0, 22
    1dec:	45110000 	ldrmi	r0, [r1, #-0]
				if (bc == 16)
    1df0:	0001c91e 	andeq	ip, r1, lr, lsl r9
				d = (bc == 16) ? 10000 : 1000000000;
    1df4:	08010100 	stmdaeq	r1, {r8}
					val &= 0xffff;
    1df8:	098f1208 	stmibeq	pc, {r3, r9, ip}	; <UNPREDICTABLE>
					dgout (*s);
    1dfc:	0000021a 	andeq	r0, r0, sl, lsl r2
					s++;
    1e00:	000cba0a 	andeq	fp, ip, sl, lsl #20
				while (*s != '\0') {
    1e04:	0b901200 	bleq	fe40660c <_estack+0xde40160c>
    1e08:	00000073 	andeq	r0, r0, r3, ror r0
			dgout (*mess++);
    1e0c:	10570a00 	subsne	r0, r7, r0, lsl #20
    1e10:	91120000 	tstls	r2, r0
    1e14:	0000a708 	andeq	sl, r0, r8, lsl #14
    1e18:	bc0a0400 	cfstrslt	mvf0, [sl], {-0}
    1e1c:	12000001 	andne	r0, r0, #1
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e20:	00d51092 	smullseq	r1, r5, r2, r0
    1e24:	00060000 	andeq	r0, r6, r0
    1e28:	000cae03 	andeq	sl, ip, r3, lsl #28
    1e2c:	03931200 	orrseq	r1, r3, #0, 4
	^ entropy
    1e30:	000001e9 	andeq	r0, r0, r9, ror #3
}
    1e34:	00021a05 	andeq	r1, r2, r5, lsl #20
    1e38:	021a0c00 	andseq	r0, sl, #0, 24
    1e3c:	02360000 	eorseq	r0, r6, #0
    1e40:	000d0000 	andeq	r0, sp, r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e44:	00092d0b 	andeq	r2, r9, fp, lsl #26
	word cs = size + hblenb;
    1e48:	0f991200 	svceq	0x00991200
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e4c:	0000022b 	andeq	r0, r0, fp, lsr #4
    1e50:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
	p -> length = size;
    1e54:	000000da 	ldrdeq	r0, [r0], -sl
}
    1e58:	91130108 	tstls	r3, r8, lsl #2
	if (p->attributes.b.queued) {
    1e5c:	00027409 	andeq	r7, r2, r9, lsl #8
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e60:	090a0900 	stmdbeq	sl, {r8, fp}
    1e64:	93130000 	tstls	r3, #0
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e68:	0000c907 	andeq	ip, r0, r7, lsl #18
		p->attributes.b.queued = 0;
    1e6c:	01070100 	mrseq	r0, (UNDEF: 23)
    1e70:	05bc0900 	ldreq	r0, [ip, #2304]!	; 0x900
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1e74:	94130000 	ldrls	r0, [r3], #-0
	deq (p);	// Remove from queue
    1e78:	0000c903 	andeq	ip, r0, r3, lsl #18
}
    1e7c:	00010100 	andeq	r0, r1, r0, lsl #2
	tfree ((address)p);
    1e80:	9b030000 	blls	c1e88 <__ccfg+0xa1ee0>
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1e84:	1300000a 	movwne	r0, #10
    1e88:	024a0396 	subeq	r0, sl, #1476395010	; 0x58000002
    1e8c:	74050000 	strvc	r0, [r5], #-0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1e90:	0c000002 	stceq	0, cr0, [r0], {2}
    1e94:	00000280 	andeq	r0, r0, r0, lsl #5
	if (q_empty (q))
    1e98:	00000290 	muleq	r0, r0, r2
    1e9c:	8505000d 	strhi	r0, [r5, #-13]
		trigger (q);
    1ea0:	0b000002 	bleq	1eb0 <enq+0x2c>
	if (p->attributes.b.urgent) {
    1ea4:	000003a1 	andeq	r0, r0, r1, lsr #7
		p->u.bqueue.next = q->next;
    1ea8:	90179c13 	andsls	r9, r7, r3, lsl ip
		p->u.bqueue.prev = q;
    1eac:	01000002 	tsteq	r0, r2
		q->next->prev = (qitem_t*) p;
    1eb0:	00b30c01 	adcseq	r0, r3, r1, lsl #24
	p->attributes.b.queued = 1;
    1eb4:	02ae0000 	adceq	r0, lr, #0
    1eb8:	000d0000 	andeq	r0, sp, r0
}
    1ebc:	0002a305 	andeq	sl, r2, r5, lsl #6
		p->u.bqueue.prev = q->prev;
    1ec0:	05fe0b00 	ldrbeq	r0, [lr, #2816]!	; 0xb00
		q->prev->next = (qitem_t*) p;
    1ec4:	06140000 	ldreq	r0, [r4], -r0
		q->prev = (qitem_t*) p;
    1ec8:	0002ae13 	andeq	sl, r2, r3, lsl lr
    1ecc:	0b010100 	bleq	422d4 <__ccfg+0x2232c>
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1ed0:	000008cd 	andeq	r0, r0, sp, asr #17
	deq (p);	// Soft dequeue, timer and hook left intact
    1ed4:	df0ec312 	svcle	0x000ec312
	switch (dv) {
    1ed8:	01000000 	mrseq	r0, (UNDEF: 0)
    1edc:	0c620e01 	stcleq	14, cr0, [r2], #-4
    1ee0:	6e150000 	cdpvs	0, 1, cr0, cr5, cr0, {0}
    1ee4:	02dc1001 	sbcseq	r1, ip, #1
			p->attributes.b.urgent = 1;
    1ee8:	04070000 	streq	r0, [r7], #-0
    1eec:	000002e2 	andeq	r0, r0, r2, ror #5
			verify_ses (p, "dispose ses");
    1ef0:	02ee010f 	rsceq	r0, lr, #-1073741821	; 0xc0000003
    1ef4:	a7100000 	ldrge	r0, [r0, -r0]
    1ef8:	00000000 	andeq	r0, r0, r0
    1efc:	0001d60c 	andeq	sp, r1, ip, lsl #12
    1f00:	0002f900 	andeq	pc, r2, r0, lsl #18
			verify_phy (p, "dispose phy");
    1f04:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    1f08:	000002ee 	andeq	r0, r0, lr, ror #5
}
    1f0c:	0009d611 	andeq	sp, r9, r1, lsl r6
			enq (oqueues [p->attributes.b.phys], p);
    1f10:	017f1500 	cmneq	pc, r0, lsl #10
			p->attributes.b.urgent = 1;
    1f14:	0002f916 	andeq	pc, r2, r6, lsl r9	; <UNPREDICTABLE>
    1f18:	11010100 	mrsne	r0, (UNDEF: 17)
			verify_phy (p, "dispose phy");
    1f1c:	0000038d 	andeq	r0, r0, sp, lsl #7
    1f20:	14018215 	strne	r8, [r1], #-533	; 0xfffffdeb
    1f24:	000000eb 	andeq	r0, r0, fp, ror #1
    1f28:	65110101 	ldrvs	r0, [r1, #-257]	; 0xfffffeff
    1f2c:	15000003 	strne	r0, [r0, #-3]
    1f30:	df0e02d8 	svcle	0x000e02d8
			enq (oqueues [p->attributes.b.phys], p);
    1f34:	01000000 	mrseq	r0, (UNDEF: 0)
    1f38:	15081201 	strne	r1, [r8, #-513]	; 0xfffffdff
}
    1f3c:	52090303 	andpl	r0, r9, #201326592	; 0xc000000
			rlp (p);
    1f40:	13000003 	movwne	r0, #3
}
    1f44:	00003c83 	andeq	r3, r0, r3, lsl #25
    1f48:	07030715 	smladeq	r3, r5, r7, r0
    1f4c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f50:	0faf1300 	svceq	0x00af1300
    1f54:	08150000 	ldmdaeq	r5, {}	; <UNPREDICTABLE>
    1f58:	00f00803 	rscseq	r0, r0, r3, lsl #16
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f5c:	00040000 	andeq	r0, r4, r0
	if (b->attributes.b.outgoing) {
    1f60:	0009f90e 	andeq	pc, r9, lr, lsl #18
	b = header (p);
    1f64:	03091500 	movweq	r1, #38144	; 0x9500
	if (b->attributes.b.outgoing) {
    1f68:	00032b03 	andeq	r2, r3, r3, lsl #22
		verify_ses (b, "tcv02");
    1f6c:	00201400 	eoreq	r1, r0, r0, lsl #8
    1f70:	15300000 	ldrne	r0, [r0, #-0]!
    1f74:	c208030b 	andgt	r0, r8, #738197504	; 0x2c000000
    1f78:	13000003 	movwne	r0, #3
    1f7c:	00001f06 	andeq	r1, r0, r6, lsl #30
		verify_plg (b, tcv_out, "tcv03");
    1f80:	08031415 	stmdaeq	r3, {r0, r2, r4, sl, ip}
    1f84:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f88:	0bd71300 	bleq	ff5c6b90 <_estack+0xdf5c1b90>
    1f8c:	15150000 	ldrne	r0, [r5, #-0]
    1f90:	00a70803 	adceq	r0, r7, r3, lsl #16
    1f94:	13020000 	movwne	r0, #8192	; 0x2000
    1f98:	00004c70 	andeq	r4, r0, r0, ror ip
    1f9c:	0b031615 	bleq	c77f8 <__ccfg+0xa7850>
    1fa0:	000002cf 	andeq	r0, r0, pc, asr #5
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fa4:	47361304 	ldrmi	r1, [r6, -r4, lsl #6]!
}
    1fa8:	17150000 	ldrne	r0, [r5, -r0]
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fac:	00f00903 	rscseq	r0, r0, r3, lsl #18
		rlp (b);
    1fb0:	13080000 	movwne	r0, #32768	; 0x8000
}
    1fb4:	0000000f 	andeq	r0, r0, pc
		rlp (b);
    1fb8:	0f031815 	svceq	0x00031815
    1fbc:	000003c2 	andeq	r0, r0, r2, asr #7
    1fc0:	094d130c 	stmdbeq	sp, {r2, r3, r8, r9, ip}^
    1fc4:	19150000 	ldmdbne	r5, {}	; <UNPREDICTABLE>
    1fc8:	03d21503 	bicseq	r1, r2, #12582912	; 0xc00000
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1fcc:	002c0000 	eoreq	r0, ip, r0
    1fd0:	0003520c 	andeq	r5, r3, ip, lsl #4
    1fd4:	0003d200 	andeq	sp, r3, r0, lsl #4
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fd8:	00941500 	addseq	r1, r4, r0, lsl #10
	va_start (ap, plid);
    1fdc:	00030000 	andeq	r0, r3, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fe0:	035f0407 	cmpeq	pc, #117440512	; 0x7000000
    1fe4:	cc0e0000 	stcgt	0, cr0, [lr], {-0}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1fe8:	1500000b 	strne	r0, [r0, #-11]
    1fec:	5f1b031c 	svcpl	0x001b031c
    1ff0:	11000003 	tstne	r0, r3
    1ff4:	00000bac 	andeq	r0, r0, ip, lsr #23
			syserror (ENODEVICE, "tcv04");
    1ff8:	14031e15 	strne	r1, [r3], #-3605	; 0xfffff1eb
		syserror (EMALLOC, "tcv05");
    1ffc:	000003f4 	strdeq	r0, [r0], -r4
	attp.b.outgoing = 1;
    2000:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    2004:	000003d8 	ldrdeq	r0, [r0], -r8
    2008:	0006ff0b 	andeq	pc, r6, fp, lsl #30
    200c:	131d1600 	tstne	sp, #0, 12
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2010:	000000a7 	andeq	r0, r0, r7, lsr #1
		if (descriptors [fd] == NULL)
    2014:	e50b0101 	str	r0, [fp, #-257]	; 0xfffffeff
    2018:	16000002 	strne	r0, [r0], -r2
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    201c:	00b81a1e 	adcseq	r1, r8, lr, lsl sl
		return ERROR;
    2020:	01010000 	mrseq	r0, (UNDEF: 1)
}
    2024:	000c590b 	andeq	r5, ip, fp, lsl #18
    2028:	241e1600 	ldrcs	r1, [lr], #-1536	; 0xfffffa00
    202c:	000000b8 	strheq	r0, [r0], -r8
	s->attpattern.b.session = fd;
    2030:	770b0101 	strvc	r0, [fp, -r1, lsl #2]
    2034:	1600000c 	strne	r0, [r0], -ip
	descriptors [fd] = s;
    2038:	03f41422 	mvnseq	r1, #570425344	; 0x22000000
	q_init (&(s->rqueue));
    203c:	01010000 	mrseq	r0, (UNDEF: 1)
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2040:	000f9303 	andeq	r9, pc, r3, lsl #6
    2044:	10431600 	subne	r1, r3, r0, lsl #12
    2048:	0000043e 	andeq	r0, r0, lr, lsr r4
    204c:	04440407 	strbeq	r0, [r4], #-1031	; 0xfffffbf9
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2050:	010f0000 	mrseq	r0, CPSR
    2054:	00000450 	andeq	r0, r0, r0, asr r4
    2058:	00008d10 	andeq	r8, r0, r0, lsl sp
	descriptors [fd] = s;
    205c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2060:	74094616 	strvc	r4, [r9], #-1558	; 0xfffff9ea
    2064:	0a000004 	beq	207c <tcv_open+0xb0>
	if (s == NULL)
    2068:	000014f9 	strdeq	r1, [r0], -r9
		syserror (EMALLOC, "tcv05");
    206c:	320f4a16 	andcc	r4, pc, #90112	; 0x16000
    2070:	00000004 	andeq	r0, r0, r4
    2074:	0011eb0a 	andseq	lr, r1, sl, lsl #22
    2078:	074b1600 	strbeq	r1, [fp, -r0, lsl #12]
    207c:	0000008d 	andeq	r0, r0, sp, lsl #1
    2080:	19030004 	stmdbne	r3, {r2}
    2084:	16000010 			; <UNDEFINED> instruction: 0x16000010
    2088:	0450034c 	ldrbeq	r0, [r0], #-844	; 0xfffffcb4
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    208c:	74050000 	strvc	r0, [r5], #-0
	    (plugins [ord] != NULL && plugins [ord] != pl))
    2090:	0c000004 	stceq	0, cr0, [r0], {4}
    2094:	000000fc 	strdeq	r0, [r0], -ip
    2098:	00000495 	muleq	r0, r5, r4
	plugins [ord] = pl;
    209c:	00009415 	andeq	r9, r0, r5, lsl r4
	return 0;
    20a0:	0b000300 	bleq	2ca8 <rx_int_enable+0xb4>
		return ERROR;
    20a4:	000013a3 	andeq	r1, r0, r3, lsr #7
}
    20a8:	85120d01 	ldrhi	r0, [r2, #-3329]	; 0xfffff2ff
    20ac:	01000004 	tsteq	r0, r4
	verify_fds (fd, "tcv10");
    20b0:	04800c01 	streq	r0, [r0], #3073	; 0xc01
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20b4:	04b30000 	ldrteq	r0, [r3], #0
	verify_fds (fd, "tcv10");
    20b8:	94150000 	ldrls	r0, [r5], #-0
    20bc:	01000000 	mrseq	r0, (UNDEF: 0)
    20c0:	04a30500 	strteq	r0, [r3], #1280	; 0x500
	verify_plg (b, tcv_frm, "tcv11");
    20c4:	bf160000 	svclt	0x00160000
	b = q_first (rq);
    20c8:	01000013 	tsteq	r0, r3, lsl r0
	if (q_end (b, rq)) {
    20cc:	04b318cf 	ldrteq	r1, [r3], #2255	; 0x8cf
		if (state != WNONE) {
    20d0:	eb0c0000 	bl	3020d8 <__ccfg+0x2e2130>
    20d4:	d4000000 	strle	r0, [r0], #-0
			when (rq, state);
    20d8:	15000004 	strne	r0, [r0, #-4]
			release;
    20dc:	00000094 	muleq	r0, r4, r0
	deq (b);	// Dequeue the packet ...
    20e0:	c4050010 	strgt	r0, [r5], #-16
    20e4:	17000004 	strne	r0, [r0, -r4]
	p = ((address)(b + 1));
    20e8:	0000117c 	andeq	r1, r0, ip, ror r1
	verify_plg (b, tcv_frm, "tcv11");
    20ec:	d40dec01 	strle	lr, [sp], #-3073	; 0xfffff3ff
    20f0:	01000004 	tsteq	r0, r4
    20f4:	50e40305 	rscpl	r0, r4, r5, lsl #6
    20f8:	f8180000 			; <UNDEFINED> instruction: 0xf8180000
    20fc:	0100000f 	tsteq	r0, pc
    2100:	a70d010c 	strge	r0, [sp, -ip, lsl #2]
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2104:	05000000 	streq	r0, [r0, #-0]
    2108:	00057e03 	andeq	r7, r5, r3, lsl #28
		b->length - b->u.pointers.head - b->u.pointers.tail;
    210c:	02361920 	eorseq	r1, r6, #32, 18	; 0x80000
    2110:	d0010000 	andle	r0, r1, r0
	b->u.pointers.tail =
    2114:	03050802 	movweq	r0, #22530	; 0x5802
}
    2118:	200006a0 	andcs	r0, r0, r0, lsr #13
		return NULL;
    211c:	0000a70c 	andeq	sl, r0, ip, lsl #14
    2120:	00051e00 	andeq	r1, r5, r0, lsl #28
    2124:	00941500 	addseq	r1, r4, r0, lsl #10
    2128:	00000000 	andeq	r0, r0, r0
    212c:	000f7918 	andeq	r7, pc, r8, lsl r9	; <UNPREDICTABLE>
	verify_fds (fd, "tcv16");
    2130:	02d20100 	sbcseq	r0, r2, #0, 2
								Boolean urg) {
    2134:	00050e0d 	andeq	r0, r5, sp, lsl #28
    2138:	80030500 	andhi	r0, r3, r0, lsl #10
	verify_fds (fd, "tcv16");
    213c:	19200005 	stmdbne	r0!, {r0, r2}
    2140:	000002c1 	andeq	r0, r0, r1, asr #5
    2144:	07048c01 	streq	r8, [r4, -r1, lsl #24]
	verify_pld (s, tcv_frm, "tcv17");
    2148:	06a80305 	strteq	r0, [r8], r5, lsl #6
    214c:	011a2000 	tsteq	sl, r0
    2150:	00000f6d 	andeq	r0, r0, sp, ror #30
    2154:	05057201 	streq	r7, [r5, #-513]	; 0xfffffdff
    2158:	00008d01 	andeq	r8, r0, r1, lsl #26
    215c:	0016ac00 	andseq	sl, r6, r0, lsl #24
    2160:	00170c00 	andseq	r0, r7, r0, lsl #24
    2164:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
	ptrs.head = (word) fd;
    2168:	1b000005 	blne	2184 <tcv_wnps+0x54>
	ptrs.tail = (word) urg;
    216c:	00000620 	andeq	r0, r0, r0, lsr #12
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2170:	00000572 	andeq	r0, r0, r2, ror r5
    2174:	0100691c 	tsteq	r0, ip, lsl r9
		if (state != WNONE) {
    2178:	bd110576 	cfldr32lt	mvfx0, [r1, #-472]	; 0xfffffe28
    217c:	00000000 	andeq	r0, r0, r0
}
    2180:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
			when (eid, state);
    2184:	0016ee00 	andseq	lr, r6, r0, lsl #28
    2188:	0016f000 	andseq	pc, r6, r0
			release;
    218c:	058d0100 	streq	r0, [sp, #256]	; 0x100
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2190:	011e0002 	tsteq	lr, r2
    2194:	00001205 	andeq	r1, r0, r5, lsl #4
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2198:	21056801 	tstcs	r5, r1, lsl #16
    219c:	00001424 	andeq	r1, r0, r4, lsr #8
    21a0:	0000167c 	andeq	r1, r0, ip, ror r6
    21a4:	07e49c01 	strbeq	r9, [r4, r1, lsl #24]!
    21a8:	121f0000 	andsne	r0, pc, #0
    21ac:	0d000012 	stceq	0, cr0, [r0, #-72]	; 0xffffffb8
		if (state != WNONE) {
    21b0:	d0200108 	eorle	r0, r0, r8, lsl #2
    21b4:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
			tmwait (state);
    21b8:	80000014 	andhi	r0, r0, r4, lsl r0
    21bc:	01000004 	tsteq	r0, r4
	b->attributes = s->attpattern;
    21c0:	bf02056a 	svclt	0x0002056a
		b->attributes.b.urgent = 1;
    21c4:	21000005 	tstcs	r0, r5
    21c8:	000011df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
	b->u.pointers.head = ptrs.head;
    21cc:	08122200 	ldmdaeq	r2, {r9, sp}
	b->u.pointers.tail = length;
    21d0:	143e0000 	ldrtne	r0, [lr], #-0
	return (address) (b + 1);
    21d4:	04a00000 	strteq	r0, [r0], #0
    21d8:	270d0000 	strcs	r0, [sp, -r0]
    21dc:	0007b302 	andeq	fp, r7, r2, lsl #6
    21e0:	04a02300 	strteq	r2, [r0], #768	; 0x300
    21e4:	20240000 	eorcs	r0, r4, r0
    21e8:	cc000008 	stcgt	0, cr0, [r0], {8}
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    21ec:	25000014 	strcs	r0, [r0, #-20]	; 0xffffffec
    21f0:	0000125c 	andeq	r1, r0, ip, asr r2
    21f4:	0000143e 	andeq	r1, r0, lr, lsr r4
	verify_fph (phy, "tcv23");
    21f8:	000004c8 	andeq	r0, r0, r8, asr #9
    21fc:	0404b301 	streq	fp, [r4], #-769	; 0xfffffcff
    2200:	0014381d 	andseq	r3, r4, sp, lsl r8
    2204:	0014b600 	andseq	fp, r4, r0, lsl #12
}
    2208:	0014c200 	andseq	ip, r4, r0, lsl #4
	return (physical [phy]) (opt, arg);
    220c:	04a40100 	strteq	r0, [r4], #256	; 0x100
    2210:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
    2214:	14ca0000 	strbne	r0, [sl], #0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2218:	14cc0000 	strbne	r0, [ip], #0
	if (opt < 0) {
    221c:	aa010000 	bge	42224 <__ccfg+0x2227c>
		if (fd < 0)
    2220:	c0250404 	eorgt	r0, r5, r4, lsl #8
		if (opt == PHYSOPT_PLUGINFO) {
    2224:	e2000012 	and	r0, r0, #18
			if (fd >= TCV_MAX_PLUGS)
    2228:	e0000014 	and	r0, r0, r4, lsl r0
			if ((p = plugins [fd]) == NULL)
    222c:	01000004 	tsteq	r0, r4
    2230:	250404bb 	strcs	r0, [r4, #-1211]	; 0xfffffb45
}
    2234:	00001443 	andeq	r1, r0, r3, asr #8
		if (fd >= TCV_MAX_PHYS)
    2238:	000014e2 	andeq	r1, r0, r2, ror #9
		return physinfo [fd];
    223c:	00000500 	andeq	r0, r0, r0, lsl #10
    2240:	0404c501 	streq	ip, [r4], #-1281	; 0xfffffaff
	verify_fds (fd, "tcv22");
    2244:	00128e20 	andseq	r8, r2, r0, lsr #28
    2248:	0014ea00 	andseq	lr, r4, r0, lsl #20
    224c:	00052000 	andeq	r2, r5, r0
    2250:	04c00100 	strbeq	r0, [r0], #256	; 0x100
    2254:	00065104 	andeq	r5, r6, r4, lsl #2
}
    2258:	129d2100 	addsne	r2, sp, #0, 2
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    225c:	1d000000 	stcne	0, cr0, [r0, #-0]
    2260:	0000125c 	andeq	r1, r0, ip, asr r2
			return 0;
    2264:	000014fa 	strdeq	r1, [r0], -sl
    2268:	000014fc 	strdeq	r1, [r0], -ip
    226c:	0404c301 	streq	ip, [r4], #-769	; 0xfffffcff
    2270:	00142d25 	andseq	r2, r4, r5, lsr #26
    2274:	0014fe00 	andseq	pc, r4, r0, lsl #28
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2278:	00054000 	andeq	r4, r5, r0
    227c:	04d50100 	ldrbeq	r0, [r5], #256	; 0x100
	if (dsp != TCV_DSP_PASS) {
    2280:	144e2004 	strbne	r2, [lr], #-4
		if (ses == NONE)
    2284:	15140000 	ldrne	r0, [r4, #-0]
			syserror (EREQPAR, "tcv26");
    2288:	05600000 	strbeq	r0, [r0, #-0]!
		verify_fds (ses, "tcv27");
    228c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2290:	068e0404 	streq	r0, [lr], r4, lsl #8
    2294:	5d210000 	stcpl	0, cr0, [r1, #-0]
    2298:	00000014 	andeq	r0, r0, r4, lsl r0
    229c:	00125c1d 	andseq	r5, r2, sp, lsl ip
		if ((p = apb (size)) != NULL) {
    22a0:	00153800 	andseq	r3, r5, r0, lsl #16
    22a4:	00153a00 	andseq	r3, r5, r0, lsl #20
		return NULL;
    22a8:	04df0100 	ldrbeq	r0, [pc], #256	; 22b0 <tcvp_new+0x38>
			p->attributes = descriptors [ses] -> attpattern;
    22ac:	14382504 	ldrtne	r2, [r8], #-1284	; 0xfffffafc
			dispose (p, dsp);
    22b0:	15580000 	ldrbne	r0, [r8, #-0]
			p->attributes = descriptors [ses] -> attpattern;
    22b4:	05780000 	ldrbeq	r0, [r8, #-0]!
			p->attributes.b.outgoing = 0;
    22b8:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
			dispose (p, dsp);
    22bc:	7f250404 	svcvc	0x00250404
			return (address)(p + 1);
    22c0:	5c000012 	stcpl	0, cr0, [r0], {18}
    22c4:	90000015 	andls	r0, r0, r5, lsl r0
	if ((p = apb (size)) != NULL)
    22c8:	01000005 	tsteq	r0, r5
    22cc:	260d04ee 	strcs	r0, [sp], -lr, ror #9
		return (address)(p + 1);
    22d0:	0000128e 	andeq	r1, r0, lr, lsl #5
    22d4:	00001566 	andeq	r1, r0, r6, ror #10
    22d8:	0000156a 	andeq	r1, r0, sl, ror #10
    22dc:	0404ed01 	streq	lr, [r4], #-3329	; 0xfffff2ff
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e0:	000006dc 	ldrdeq	r0, [r0], -ip
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    22e4:	00129d21 	andseq	r9, r2, r1, lsr #26
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e8:	43250000 			; <UNDEFINED> instruction: 0x43250000
    22ec:	8a000014 	bhi	2344 <tcvphy_rcv+0x14>
		syserror (EREQPAR, "tcv28");
    22f0:	a8000015 	stmdage	r0, {r0, r2, r4}
		syserror (EMALLOC, "tcv29");
    22f4:	01000005 	tsteq	r0, r5
	physical [phy] = ps;
    22f8:	200404f7 	strdcs	r0, [r4], -r7
	physinfo [phy] = info;
    22fc:	0000144e 	andeq	r1, r0, lr, asr #8
    2300:	0000158c 	andeq	r1, r0, ip, lsl #11
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2304:	000005c0 	andeq	r0, r0, r0, asr #11
    2308:	0404fa01 	streq	pc, [r4], #-2561	; 0xfffff5ff
    230c:	00000708 	andeq	r0, r0, r8, lsl #14
		syserror (EMALLOC, "tcv29");
    2310:	00145d21 	andseq	r5, r4, r1, lsr #26
    2314:	b61d0000 	ldrlt	r0, [sp], -r0
	q_init (q);
    2318:	94000012 	strls	r0, [r0], #-18	; 0xffffffee
}
    231c:	98000015 	stmdals	r0, {r0, r2, r4}
    2320:	01000015 	tsteq	r0, r5, lsl r0
    2324:	1d0404fd 	cfstrsne	mvf0, [r4, #-1012]	; 0xfffffc0c
    2328:	0000125c 	andeq	r1, r0, ip, asr r2
    232c:	00001598 	muleq	r0, r8, r5
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2330:	0000159a 	muleq	r0, sl, r5
	verify_fph (phy, "tcv30");
    2334:	04050001 	streq	r0, [r5], #-1
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2338:	000b9526 	andeq	r9, fp, r6, lsr #10
    233c:	0015a200 	andseq	sl, r5, r0, lsl #4
	verify_fph (phy, "tcv30");
    2340:	0015ae00 	andseq	sl, r5, r0, lsl #28
    2344:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    2348:	00075c04 	andeq	r5, r7, r4, lsl #24
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    234c:	13112700 	tstne	r1, #0, 14
    2350:	15a20000 	strne	r0, [r2, #0]!
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2354:	15ac0000 	strne	r0, [ip, #0]!
    2358:	bd010000 	stclt	0, cr0, [r1, #-0]
		if (plugins [plg] == NULL)
    235c:	2d210203 	sfmcs	f0, 4, [r1, #-12]!
    2360:	21000013 	tstcs	r0, r3, lsl r0
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2364:	00001320 	andeq	r1, r0, r0, lsr #6
}
    2368:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
    236c:	d6000012 			; <UNDEFINED> instruction: 0xd6000012
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2370:	d8000015 	stmdale	r0, {r0, r2, r4}
    2374:	01000015 	tsteq	r0, r5, lsl r0
    2378:	1d04053e 	cfstr32ne	mvfx0, [r4, #-248]	; 0xffffff08
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    237c:	00001274 	andeq	r1, r0, r4, ror r2
    2380:	000015d8 	ldrdeq	r1, [r0], -r8
    2384:	000015e8 	andeq	r1, r0, r8, ror #11
    2388:	04054101 	streq	r4, [r5], #-257	; 0xfffffeff
    238c:	00125c1d 	andseq	r5, r2, sp, lsl ip
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2390:	0015e800 	andseq	lr, r5, r0, lsl #16
	len -= (ap.head + ap.tail);
    2394:	0015ea00 	andseq	lr, r5, r0, lsl #20
    2398:	05440100 	strbeq	r0, [r4, #-256]	; 0xffffff00
    239c:	127f2504 	rsbsne	r2, pc, #4, 10	; 0x1000000
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23a0:	15ea0000 	strbne	r0, [sl, #0]!
    23a4:	05d80000 	ldrbeq	r0, [r8]
    23a8:	47010000 	strmi	r0, [r1, -r0]
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23ac:	6b250b05 	blvs	944fc8 <__ccfg+0x925020>
    23b0:	f2000014 	vqadd.s8	d0, d0, d4
    23b4:	f0000015 			; <UNDEFINED> instruction: 0xf0000015
	return 1;
    23b8:	01000005 	tsteq	r0, r5
    23bc:	0004054b 	andeq	r0, r4, fp, asr #10
    23c0:	11ed2800 	mvnne	r2, r0, lsl #16
    23c4:	14580000 	ldrbne	r0, [r8], #-0
    23c8:	145a0000 	ldrbne	r0, [sl], #-0
	verify_fph (phy, "tcv32");
    23cc:	270d0000 	strcs	r0, [sp, -r0]
    23d0:	11f72802 	mvnsne	r2, r2, lsl #16
    23d4:	14860000 	strne	r0, [r6], #0
    23d8:	14880000 	strne	r0, [r8], #0
    23dc:	270d0000 	strcs	r0, [sp, -r0]
    23e0:	11f72802 	mvnsne	r2, r2, lsl #16
	oq = oqueues [phy];
    23e4:	160c0000 	strne	r0, [ip], -r0
	b = q_first (oq);
    23e8:	160e0000 	strne	r0, [lr], -r0
	if (q_end (b, oq)) {
    23ec:	270d0000 	strcs	r0, [sp, -r0]
	*len = b->length;
    23f0:	011a0002 	tsteq	sl, r2
	deq (b);	// Dequeue the packet ...
    23f4:	000012c3 	andeq	r1, r0, r3, asr #5
}
    23f8:	06055c01 	streq	r5, [r5], -r1, lsl #24
		return NULL;
    23fc:	0000a701 	andeq	sl, r0, r1, lsl #14
	...
    2408:	129c0100 	addsne	r0, ip, #0, 2
	verify_fph (phy, "tcv33");
    240c:	29000008 	stmdbcs	r0, {r3}
    2410:	01006373 	tsteq	r0, r3, ror r3
    2414:	a707055e 	smlsdge	r7, lr, r5, r0
    2418:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    241c:	00000003 	andeq	r0, r0, r3
    2420:	0011a52a 	andseq	sl, r1, sl, lsr #10
	oq = oqueues [phy];
    2424:	048e0100 	streq	r0, [lr], #256	; 0x100
	b = q_first (oq);
    2428:	082a0314 	stmdaeq	sl!, {r2, r4, r8, r9}
		return NULL;
    242c:	502b0000 	eorpl	r0, fp, r0
	return (address)(b + 1);
    2430:	01000014 	tsteq	r0, r4, lsl r0
}
    2434:	000104ad 	andeq	r0, r1, sp, lsr #9
    2438:	1152012c 	cmpne	r2, ip, lsr #2
    243c:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2440:	00010604 	andeq	r0, r1, r4, lsl #12
	verify_plg (b, tcv_xmt, "tcv34");
    2444:	24000014 	strcs	r0, [r0], #-20	; 0xffffffec
	hblock_t *b = header (pkt);
    2448:	01000014 	tsteq	r0, r4, lsl r0
	verify_plg (b, tcv_xmt, "tcv34");
    244c:	0008559c 	muleq	r8, ip, r5
    2450:	002d2d00 	eoreq	r2, sp, r0, lsl #26
    2454:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    2458:	00a71904 	adceq	r1, r7, r4, lsl #18
    245c:	040c0000 	streq	r0, [ip], #-0
    2460:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2464:	000fd701 	andeq	sp, pc, r1, lsl #14
	dispose (b, plugins [b->attributes.b.plugin] ->
    2468:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
}
    246c:	00124806 	andseq	r4, r2, r6, lsl #16
	dispose (b, plugins [b->attributes.b.plugin] ->
    2470:	00140000 	andseq	r0, r4, r0
    2474:	1e9c0100 	fmlnee	f0, f4, f0
    2478:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
}
    247c:	00001372 	andeq	r1, r0, r2, ror r3
    while(1)
    2480:	00001378 	andeq	r1, r0, r8, ror r3
{
    2484:	00000886 	andeq	r0, r0, r6, lsl #17
    SetupTrimDevice();
    2488:	0100691c 	tsteq	r0, ip, lsl r9
    pui32Src = &_etext;
    248c:	8d0b046b 	cfstrshi	mvf0, [fp, #-428]	; 0xfffffe54
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2490:	00000000 	andeq	r0, r0, r0
    __asm("    ldr     r0, =_bss\n"
    2494:	00144325 	andseq	r4, r4, r5, lsr #6
    2498:	00127200 	andseq	r7, r2, r0, lsl #4
    249c:	00036000 	andeq	r6, r3, r0
    24a0:	04080100 	streq	r0, [r8], #-256	; 0xffffff00
    24a4:	0f542002 	svceq	0x00542002
   main();
    24a8:	12740000 	rsbsne	r0, r4, #0
    FaultISR();
    24ac:	03800000 	orreq	r0, r0, #0
        *pui32Dest++ = *pui32Src++;
    24b0:	0b010000 	bleq	424b8 <__ccfg+0x22510>
    24b4:	091a0204 	ldmdbeq	sl, {r2, r9}
    24b8:	80230000 	eorhi	r0, r3, r0
    24bc:	2f000003 	svccs	0x00000003
    24c0:	00000f61 	andeq	r0, r0, r1, ror #30
    24c4:	000f6d30 	andeq	r6, pc, r0, lsr sp	; <UNPREDICTABLE>
    24c8:	00038000 	andeq	r8, r3, r0
    24cc:	0f6e3100 	svceq	0x006e3100
static byte get_byte () {
    24d0:	041f0000 	ldreq	r0, [pc], #-0	; 24d8 <get_byte+0x8>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24d4:	c9220000 	stmdbgt	r2!, {}	; <UNPREDICTABLE>
    24d8:	7e000013 	mcrvc	0, 0, r0, cr0, cr3, {0}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    24dc:	a0000012 	andge	r0, r0, r2, lsl r0
    24e0:	01000003 	tsteq	r0, r3
		if (ee_inp)
    24e4:	08e704fa 	stmiaeq	r7!, {r1, r3, r4, r5, r6, r7, sl}^
			b |= 1;
    24e8:	e5210000 	str	r0, [r1, #-0]!
    24ec:	21000013 	tstcs	r0, r3, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24f0:	000013d8 	ldrdeq	r1, [r0], -r8
	for (b = 0, i = 0; i < 8; i++) {
    24f4:	13f32200 	mvnsne	r2, #0, 4
}
    24f8:	12820000 	addne	r0, r2, #0
    24fc:	03b80000 			; <UNDEFINED> instruction: 0x03b80000
    2500:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
static void put_byte (byte b) {
    2504:	00090104 	andeq	r0, r9, r4, lsl #2
    2508:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    250c:	32000000 	andcc	r0, r0, #0
    2510:	00001410 	andeq	r1, r0, r0, lsl r4
		if (b & 0x80)
    2514:	00001286 	andeq	r1, r0, r6, lsl #5
    2518:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    251c:	2104fc01 	tstcs	r4, r1, lsl #24	; <UNPREDICTABLE>
	for (i = 0; i < 8; i++) {
    2520:	0000141f 	andeq	r1, r0, pc, lsl r4
		b <<= 1;
    2524:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < 8; i++) {
    2528:	00141020 	andseq	r1, r4, r0, lsr #32
}
    252c:	0012c600 	andseq	ip, r2, r0, lsl #12
    2530:	0003e800 	andeq	lr, r3, r0, lsl #16
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2534:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    2538:	00093502 	andeq	r3, r9, r2, lsl #10
	put_byte (cmd);
    253c:	141f2100 	ldrne	r2, [pc], #-256	; 2544 <cmd_0+0x10>
    2540:	20000000 	andcs	r0, r0, r0
}
    2544:	00001410 	andeq	r1, r0, r0, lsl r4
    2548:	000012c8 	andeq	r1, r0, r8, asr #5
static void wwait (word st, word del) {
    254c:	00000408 	andeq	r0, r0, r8, lsl #8
    2550:	02040e01 	andeq	r0, r4, #1, 28
    2554:	00000950 	andeq	r0, r0, r0, asr r9
	while (dopen && (rdsr () & 1)) {
    2558:	00141f21 	andseq	r1, r4, r1, lsr #30
    255c:	f3200000 	vhadd.u32	d0, d0, d0
    2560:	e2000013 	and	r0, r0, #19
    2564:	20000012 	andcs	r0, r0, r2, lsl r0
	put_byte (CMD_RDSR);
    2568:	01000004 	tsteq	r0, r4
	r = get_byte ();
    256c:	6b02040e 	blvs	835ac <__ccfg+0x63604>
    2570:	21000009 	tstcs	r0, r9
	while (dopen && (rdsr () & 1)) {
    2574:	00001402 	andeq	r1, r0, r2, lsl #8
}
    2578:	13f32600 	mvnsne	r2, #0, 12
		if (st == WNONE)
    257c:	12e80000 	rscne	r0, r8, #0
    2580:	12ea0000 	rscne	r0, sl, #0
			mdelay (1);
    2584:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2588:	09860204 	stmibeq	r6, {r2, r9}
			delay (del, st);
    258c:	02210000 	eoreq	r0, r1, #0
    2590:	00000014 	andeq	r0, r0, r4, lsl r0
			release;
    2594:	00123420 	andseq	r3, r2, r0, lsr #8
    2598:	0012fa00 	andseq	pc, r2, r0, lsl #20
    259c:	00043800 	andeq	r3, r4, r0, lsl #16
static void ready () {
    25a0:	041b0100 	ldreq	r0, [fp], #-256	; 0xffffff00
	if (dopen) {
    25a4:	0009a102 	andeq	sl, r9, r2, lsl #2
		wwait (WNONE, 1);
    25a8:	12432100 	subne	r2, r3, #0, 2
    25ac:	26000000 	strcs	r0, [r0], -r0
    25b0:	00000ccb 	andeq	r0, r0, fp, asr #25
	dstat = 0;
    25b4:	00001324 	andeq	r1, r0, r4, lsr #6
}
    25b8:	0000134e 	andeq	r1, r0, lr, asr #6
    25bc:	02043e01 	andeq	r3, r4, #1, 28
    25c0:	000009c8 	andeq	r0, r0, r8, asr #19
	udelay (1);
    25c4:	00144325 	andseq	r4, r4, r5, lsr #6
    25c8:	00134200 	andseq	r4, r3, r0, lsl #4
	udelay (1);
    25cc:	00045000 	andeq	r5, r4, r0
		dopen = DOPEN_TEMP;
    25d0:	03010100 	movweq	r0, #4352	; 0x1100
    25d4:	ab260002 	blge	9825e4 <__ccfg+0x96263c>
    25d8:	5e000012 	mcrpl	0, 0, r0, cr0, cr2, {0}
    25dc:	72000013 	andvc	r0, r0, #19
static void cclose () {
    25e0:	01000013 	tsteq	r0, r3, lsl r0
	if (dopen == DOPEN_TEMP) {
    25e4:	ef030451 	svc	0x00030451
    25e8:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
		wwait (WNONE, 1);
    25ec:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
    25f0:	0000135e 	andeq	r1, r0, lr, asr r3
	cmd_0 (CMD_DP);
    25f4:	00001362 	andeq	r1, r0, r2, ror #6
    25f8:	0501140b 	streq	r1, [r1, #-1035]	; 0xfffffbf5
		dopen = 0;
    25fc:	0b953300 	bleq	fe54f204 <_estack+0xde54a204>
}
    2600:	13780000 	cmnne	r8, #0
word ee_open () {
    2604:	04680000 	strbteq	r0, [r8], #-0
	ready ();
    2608:	72010000 	andvc	r0, r1, #0
	dopen = DOPEN_PERM;
    260c:	11330204 	teqne	r3, r4, lsl #4
    2610:	78000013 	stmdavc	r0, {r0, r1, r4}
}
    2614:	68000013 	stmdavs	r0, {r0, r1, r4}
	if (dopen) {
    2618:	01000004 	tsteq	r0, r4
    261c:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
		dopen = DOPEN_TEMP;
    2620:	0000132d 	andeq	r1, r0, sp, lsr #6
		cclose ();
    2624:	00132021 	andseq	r2, r3, r1, lsr #32
}
    2628:	00000000 	andeq	r0, r0, r0
int ser_out (word st, const char *m) {
    262c:	12ea012c 	rscne	r0, sl, #44, 2
	if ((prcs = running (__outserial)) != 0) {
    2630:	ed010000 	stc	0, cr0, [r1, #-0]
    2634:	68010603 	stmdavs	r1, {r0, r1, r9, sl}
    2638:	a4000011 	strge	r0, [r0], #-17	; 0xffffffef
		join (prcs, st);
    263c:	01000011 	tsteq	r0, r1, lsl r0
		release;
    2640:	000aa79c 	muleq	sl, ip, r7
	if (*m)
    2644:	61763400 	cmnvs	r6, r0, lsl #8
		prcs = strlen (m) +1;
    2648:	ed01006c 	stc	0, cr0, [r1, #-432]	; 0xfffffe50
    264c:	008d1c03 	addeq	r1, sp, r3, lsl #24
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2650:	50010000 	andpl	r0, r1, r0
    2654:	01006929 	tsteq	r0, r9, lsr #18
    2658:	8d0603ef 	stchi	3, cr0, [r6, #-956]	; 0xfffffc44
		umwait (st);
    265c:	3d000000 	stccc	0, cr0, [r0, #-0]
    2660:	29000004 	stmdbcs	r0, {r2}
		prcs =  m [1] + 3;
    2664:	01006e62 	tsteq	r0, r2, ror #28
	if (*m)
    2668:	df0803f0 	svcle	0x000803f0
		strcpy (buf, m);
    266c:	5b000000 	blpl	2674 <ser_out+0x48>
    2670:	25000004 	strcs	r0, [r0, #-4]
	if (runstrand (__outserial, buf) == 0) {
    2674:	000011ed 	andeq	r1, r0, sp, ror #3
    2678:	00001168 	andeq	r1, r0, r8, ror #2
		ufree (buf);
    267c:	00000320 	andeq	r0, r0, r0, lsr #6
    2680:	0203f201 	andeq	pc, r3, #268435456	; 0x10000000
		memcpy (buf, m, prcs);
    2684:	0013ac20 	andseq	sl, r3, r0, lsr #24
    2688:	00116e00 	andseq	r6, r1, r0, lsl #28
    268c:	00033800 	andeq	r3, r3, r0, lsl #16
}
    2690:	03f50100 	mvnseq	r0, #0, 2
    2694:	000a9503 	andeq	r9, sl, r3, lsl #10
int ser_in (word st, char *buf, int len) {
    2698:	13bb3500 			; <UNDEFINED> instruction: 0x13bb3500
    269c:	045b0000 	ldrbeq	r0, [fp], #-0
	if (len == 0)
    26a0:	1d000000 	stcne	0, cr0, [r0, #-0]
	if (__inpline == NULL) {
    26a4:	000011f7 	strdeq	r1, [r0], -r7
		if ((prcs = running (__inserial)) == 0) {
    26a8:	00001192 	muleq	r0, r2, r1
    26ac:	00001194 	muleq	r0, r4, r1
			prcs = runthread (__inserial);
    26b0:	0203f901 	andeq	pc, r3, #16384	; 0x4000
    26b4:	48012c00 	stmdami	r1, {sl, fp, sp}
			if (prcs == 0) {
    26b8:	01000012 	tsteq	r0, r2, lsl r0
				npwait (st);
    26bc:	010603da 	ldrdeq	r0, [r6, -sl]
		release;
    26c0:	00001124 	andeq	r1, r0, r4, lsr #2
		join (prcs, st);
    26c4:	00001168 	andeq	r1, r0, r8, ror #2
    26c8:	0b2c9c01 	bleq	b296d4 <__ccfg+0xb0972c>
	if (*__inpline == NULL) // bin cmd
    26cc:	76340000 	ldrtvc	r0, [r4], -r0
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    26d0:	01006c61 	tsteq	r0, r1, ror #24
	if (prcs >= len)
    26d4:	8d1c03da 	ldchi	3, cr0, [ip, #-872]	; 0xfffffc98
		prcs = len-1;
    26d8:	01000000 	mrseq	r0, (UNDEF: 0)
	memcpy (buf, __inpline, prcs);
    26dc:	00691c50 	rsbeq	r1, r9, r0, asr ip
    26e0:	0603dc01 	streq	sp, [r3], -r1, lsl #24
    26e4:	0000008d 	andeq	r0, r0, sp, lsl #1
	ufree (__inpline);
    26e8:	006e6229 	rsbeq	r6, lr, r9, lsr #4
	__inpline = NULL;
    26ec:	0803dd01 	stmdaeq	r3, {r0, r8, sl, fp, ip, lr, pc}
	if (*buf) // if it's NULL, it's a bin cmd
    26f0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
		buf [prcs] = '\0';
    26f4:	0000046e 	andeq	r0, r0, lr, ror #8
}
    26f8:	0011ed25 	andseq	lr, r1, r5, lsr #26
		prcs = strlen (__inpline);
    26fc:	00112400 	andseq	r2, r1, r0, lsl #8
    2700:	0002d800 	andeq	sp, r2, r0, lsl #16
		return 0;
    2704:	03df0100 	bicseq	r0, pc, #0, 2
    2708:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
    270c:	11280000 			; <UNDEFINED> instruction: 0x11280000
int ser_outf (word st, const char *m, ...) {
    2710:	02f00000 	rscseq	r0, r0, #0
    2714:	e2010000 	and	r0, r1, #0
	if ((prcs = running (__outserial)) != 0) {
    2718:	0b1a0303 	bleq	68332c <__ccfg+0x663384>
    271c:	bb350000 	bllt	d42724 <__ccfg+0xd2277c>
		join (prcs, st);
    2720:	81000013 	tsthi	r0, r3, lsl r0
    2724:	00000004 	andeq	r0, r0, r4
		release;
    2728:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    272c:	00115600 	andseq	r5, r1, r0, lsl #12
    2730:	00115800 	andseq	r5, r1, r0, lsl #16
    2734:	03e60100 	mvneq	r0, #0, 2
		umwait (st);
    2738:	011e0002 	tsteq	lr, r2
    273c:	000012fb 	strdeq	r1, [r0], -fp
	if (runstrand (__outserial, buf) == 0) {
    2740:	0603c601 	streq	ip, [r3], -r1, lsl #12
    2744:	000011a4 	andeq	r1, r0, r4, lsr #3
    2748:	00001248 	andeq	r1, r0, r8, asr #4
		ufree (buf);
    274c:	0b959c01 	bleq	fe569758 <_estack+0xde564758>
		npwait (st);
    2750:	b62e0000 	strtlt	r0, [lr], -r0
}
    2754:	e4000011 	str	r0, [r0], #-17	; 0xffffffef
    2758:	6e000011 	mcrvs	0, 0, r0, cr0, cr1, {0}
    275c:	3600000b 	strcc	r0, [r0], -fp
    2760:	0307006a 	movweq	r0, #28778	; 0x706a
int ser_inf (word st, const char *fmt, ...) {
    2764:	00008d02 	andeq	r8, r0, r2, lsl #26
    2768:	00049400 	andeq	r9, r4, r0, lsl #8
	if (fmt == NULL)
    276c:	00693600 	rsbeq	r3, r9, r0, lsl #12
	if (__inpline == NULL) {
    2770:	f4020307 	vst2.8	{d0-d3}, [r2], r7
		if ((prcs = running (__inserial)) == 0) {
    2774:	a7000003 	strge	r0, [r0, -r3]
    2778:	00000004 	andeq	r0, r0, r4
			prcs = runthread (__inserial);
    277c:	0011f637 	andseq	pc, r1, r7, lsr r6	; <UNPREDICTABLE>
    2780:	00122400 	andseq	r2, r2, r0, lsl #8
			if (prcs == 0) {
    2784:	006a3600 	rsbeq	r3, sl, r0, lsl #12
				npwait (st);
    2788:	8d020208 	sfmhi	f0, 4, [r2, #-32]	; 0xffffffe0
		release;
    278c:	ba000000 	blt	2794 <ser_inf+0x30>
		join (prcs, st);
    2790:	36000004 	strcc	r0, [r0], -r4
    2794:	02080069 	andeq	r0, r8, #105	; 0x69
	va_start (ap, fmt);
    2798:	0003f402 	andeq	pc, r3, r2, lsl #8
	prcs = vscan (__inpline, fmt, ap);
    279c:	0004cd00 	andeq	ip, r4, r0, lsl #26
    27a0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
	ufree (__inpline);
    27a4:	000010d0 	ldrdeq	r1, [r0], -r0
	__inpline = NULL;
    27a8:	1403bb01 	strne	fp, [r3], #-2817	; 0xfffff4ff
}
    27ac:	40011e03 	andmi	r1, r1, r3, lsl #28
    27b0:	01000014 	tsteq	r0, r4, lsl r0
    27b4:	64060382 	strvs	r0, [r6], #-898	; 0xfffffc7e
		return 0;
    27b8:	24000010 	strcs	r0, [r0], #-16
    27bc:	01000011 	tsteq	r0, r1, lsl r0
    27c0:	000c289c 	muleq	ip, ip, r8
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27c4:	10902e00 	addsne	r2, r0, r0, lsl #28
    27c8:	10be0000 	adcsne	r0, lr, r0
    27cc:	0be30000 	bleq	ff8c27d4 <_estack+0xdf8bd7d4>
	RF_cmdFs.frequency = 
    27d0:	6a290000 	bvs	a427d8 <__ccfg+0xa22830>
}
    27d4:	03890100 	orreq	r0, r9, #0, 2
    27d8:	00008d03 	andeq	r8, r0, r3, lsl #26
    27dc:	0004e000 	andeq	lr, r4, r0
    27e0:	00692900 	rsbeq	r2, r9, r0, lsl #18
static int option (int opt, address val) {
    27e4:	03038901 	movweq	r8, #14593	; 0x3901
    27e8:	000003f4 	strdeq	r0, [r0], -r4
    27ec:	000004f3 	strdeq	r0, [r0], -r3
    27f0:	02c01b00 	sbceq	r1, r0, #0, 22
    27f4:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    27f8:	6a290000 	bvs	a42800 <__ccfg+0xa22858>
    27fc:	038f0100 	orreq	r0, pc, #0, 2
    2800:	00008d03 	andeq	r8, r0, r3, lsl #26
    2804:	00050600 	andeq	r0, r5, r0, lsl #12
    2808:	00692900 	rsbeq	r2, r9, r0, lsl #18
    280c:	03038f01 	movweq	r8, #16129	; 0x3f01
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2810:	000003f4 	strdeq	r0, [r0], -r4
    2814:	00000519 	andeq	r0, r0, r9, lsl r5
			goto RVal;
    2818:	12e73300 	rscne	r3, r7, #0, 6
			_BIS (dstate, DSTATE_RXON);
    281c:	10640000 	rsbne	r0, r4, r0
    2820:	02a00000 	adceq	r0, r0, #0
	int ret = 0;
    2824:	84010000 	strhi	r0, [r1], #-0
			p_trigger (drvprcs, qevent);
    2828:	03210203 			; <UNDEFINED> instruction: 0x03210203
    282c:	21000013 	tstcs	r0, r3, lsl r0
    2830:	000012f6 	strdeq	r1, [r0], -r6
    2834:	cd390000 	ldcgt	0, cr0, [r9, #-0]
    2838:	01000011 	tsteq	r0, r1, lsl r0
    283c:	010d037d 	tsteq	sp, sp, ror r3
    2840:	00000bc8 	andeq	r0, r0, r8, asr #23
    2844:	00000bd4 	ldrdeq	r0, [r0], -r4
    2848:	0c529c01 	mrrceq	12, 0, r9, r2, cr1
    284c:	d52d0000 	strle	r0, [sp, #-0]!
}
    2850:	01000013 	tsteq	r0, r3, lsl r0
			_BIC (dstate, DSTATE_RXON);
    2854:	8d1f037d 	ldchi	3, cr0, [pc, #-500]	; 2668 <ser_out+0x3c>
    2858:	2c000000 	stccs	0, cr0, [r0], {-0}
			statid = (val == NULL) ? 0 : *val;
    285c:	00000005 	andeq	r0, r0, r5
    2860:	0013963a 	andseq	r9, r3, sl, lsr r6
	int ret = 0;
    2864:	03100100 	tsteq	r0, #0, 2
			ret = (int) statid;
    2868:	008d010c 	addeq	r0, sp, ip, lsl #2
	if (val != NULL)
    286c:	0f540000 	svceq	0x00540000
		*val = ret;
    2870:	10640000 	rsbne	r0, r4, r0
			ret = rbuffl + 2;
    2874:	9c010000 	stcls	0, cr0, [r1], {-0}
    2878:	00000ccb 	andeq	r0, r0, fp, asr #25
			if (val != NULL) {
    287c:	00115f2d 	andseq	r5, r1, sp, lsr #30
				memcpy (val, &rxstat,
    2880:	03100100 	tsteq	r0, #0, 2
    2884:	00008d1e 	andeq	r8, r0, lr, lsl sp
				memset (&rxstat, 0, 
    2888:	00054a00 	andeq	r4, r5, r0, lsl #20
    288c:	75623b00 	strbvc	r3, [r2, #-2816]!	; 0xfffff500
			if (val == NULL)
    2890:	10010066 	andne	r0, r1, r6, rrx
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2894:	01c92f03 	biceq	r2, r9, r3, lsl #30
    2898:	055d0000 	ldrbeq	r0, [sp, #-0]
				utimer_set (bckf_timer, *val);
    289c:	6c3b0000 	ldcvs	0, cr0, [fp], #-0
    28a0:	01006e65 	tsteq	r0, r5, ror #28
    28a4:	8d380310 	ldchi	3, cr0, [r8, #-64]!	; 0xffffffc0
			for (ret = 0; ret < 8; ret++)
    28a8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
				if (RF_cmdPropRadioDivSetup.txPower
    28ac:	2b000005 	blcs	28c8 <option+0xe4>
					== patable [ret])
    28b0:	0000107c 	andeq	r1, r0, ip, ror r0
				if (RF_cmdPropRadioDivSetup.txPower
    28b4:	01031801 	tsteq	r3, r1, lsl #16
			for (ret = 0; ret < 8; ret++)
    28b8:	0011872b 	andseq	r8, r1, fp, lsr #14
    28bc:	033d0100 	teqeq	sp, #0, 2
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28c0:	0d442701 	stcleq	7, cr2, [r4, #-4]
    28c4:	10360000 	eorsne	r0, r6, r0
    28c8:	10380000 	eorsne	r0, r8, r0
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    28cc:	65010000 	strvs	r0, [r1, #-0]
    28d0:	58211503 	stmdapl	r1!, {r0, r1, r8, sl, ip}
			_BIS (dstate, DSTATE_IRST);
    28d4:	0000000d 	andeq	r0, r0, sp
    28d8:	12173800 	andsne	r3, r7, #0, 16
    28dc:	fc010000 	stc2	0, cr0, [r1], {-0}
			ret = (int) channel;
    28e0:	3c010d02 	stccc	13, cr0, [r1], {2}
			goto RVal;
    28e4:	00001218 	andeq	r1, r0, r8, lsl r2
				(*val > 7) ? 7 : *val;
    28e8:	0d02f001 	stceq	0, cr15, [r2, #-4]
    28ec:	00000f1c 	andeq	r0, r0, ip, lsl pc
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    28f0:	00000f54 	andeq	r0, r0, r4, asr pc
    28f4:	0d449c01 	stcleq	12, cr9, [r4, #-4]
			plugch ();
    28f8:	3b200000 	blcc	802900 <__ccfg+0x7e2958>
			_BIS (dstate, DSTATE_IRST);
    28fc:	1c000013 	stcne	0, cr0, [r0], {19}
    2900:	8800000f 	stmdahi	r0, {r0, r1, r2, r3}
			ret = (int) vrate;
    2904:	01000002 	tsteq	r0, r2
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2908:	070202f5 			; <UNDEFINED> instruction: 0x070202f5
    290c:	2100000d 	tstcs	r0, sp
    2910:	0000134a 	andeq	r1, r0, sl, asr #6
    2914:	13752600 	cmnne	r5, #0, 12
    2918:	0f280000 	svceq	0x00280000
    291c:	0f2e0000 	svceq	0x002e0000
    2920:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    2924:	0d2c0202 	sfmeq	f0, 4, [ip, #-8]!
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2928:	9e210000 	cdpls	0, 2, cr0, cr1, cr0, {0}
    292c:	21000013 	tstcs	r0, r3, lsl r0
    2930:	00001391 	muleq	r0, r1, r3
    2934:	00138421 	andseq	r8, r3, r1, lsr #8
			syserror (EREQPAR, "cc13 op");
    2938:	ca270000 	bgt	9c2940 <__ccfg+0x9a2998>
    293c:	2e000012 	mcrcs	0, 0, r0, cr0, cr2, {0}
    2940:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    2944:	0100000f 	tsteq	r0, pc
    2948:	210202f7 	strdcs	r0, [r2, -r7]
    294c:	000012d9 	ldrdeq	r1, [r0], -r9
    2950:	013d0000 	teqeq	sp, r0
    2954:	0000104a 	andeq	r1, r0, sl, asr #32
    2958:	0602eb01 	streq	lr, [r2], -r1, lsl #22
    295c:	0000a701 	andeq	sl, r0, r1, lsl #14
    2960:	0d650100 	stfeqe	f0, [r5, #-0]
    2964:	753e0000 	ldrvc	r0, [lr, #-0]!
    2968:	eb010061 	bl	42af4 <__ccfg+0x22b4c>
    296c:	0d652702 	stcleq	7, cr2, [r5, #-8]!
    2970:	07000000 	streq	r0, [r0, -r0]
static void issue_cmd (lword cmd) {
    2974:	00022604 	andeq	r2, r2, r4, lsl #12
    2978:	0d011a00 	vstreq	s2, [r1, #-0]
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    297c:	01000011 	tsteq	r0, r1, lsl r0
    2980:	010902d4 	ldrdeq	r0, [r9, -r4]
    2984:	0000009b 	muleq	r0, fp, r0
		if (res != 0x86)
    2988:	00000ec8 	andeq	r0, r0, r8, asr #29
			syserror (EHARDWARE, "hang ic0");
    298c:	00000f1c 	andeq	r0, r0, ip, lsl pc
    2990:	0dc19c01 	stcleq	12, cr9, [r1, #4]
		if (cnt-- == 0) {
    2994:	572d0000 	strpl	r0, [sp, -r0]!
			diag ("HUP %lx %lx", cmd, res);
    2998:	01000010 	tsteq	r0, r0, lsl r0
    299c:	a72102d4 			; <UNDEFINED> instruction: 0xa72102d4
			syserror (EHARDWARE, "hang ic0");
    29a0:	8b000000 	blhi	29a8 <issue_cmd+0x34>
		udelay (1);
    29a4:	3b000006 	blcc	29c4 <rx_de+0x8>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29a8:	01006175 	tsteq	r0, r5, ror r1
}
    29ac:	c12f02d4 	ldrdgt	r0, [pc, -r4]!
    29b0:	9e00000d 	cdpls	0, 0, cr0, cr0, cr13, {0}
    29b4:	33000006 	movwcc	r0, #6
    29b8:	00001358 	andeq	r1, r0, r8, asr r3
static void rx_de () {
    29bc:	00000ee8 	andeq	r0, r0, r8, ror #29
	if ((dstate & DSTATE_RXAC) == 0)
    29c0:	00000270 	andeq	r0, r0, r0, ror r2
    29c4:	0202e601 	andeq	lr, r2, #1048576	; 0x100000
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29c8:	00136721 	andseq	r6, r3, r1, lsr #14
	_BIC (dstate, DSTATE_RXAC);
    29cc:	07000000 	streq	r0, [r0, -r0]
    29d0:	00021a04 	andeq	r1, r2, r4, lsl #20
}
    29d4:	66011a00 	strvs	r1, [r1], -r0, lsl #20
    29d8:	01000014 	tsteq	r0, r4, lsl r0
    29dc:	0106018a 	smlabbeq	r6, sl, r1, r0
static void rf_off () {
    29e0:	000000a7 	andeq	r0, r0, r7, lsr #1
	if ((dstate & DSTATE_RFON) == 0)
    29e4:	00000e78 	andeq	r0, r0, r8, ror lr
    29e8:	00000ec8 	andeq	r0, r0, r8, asr #29
	IntDisable (INT_RFC_CPE_0);
    29ec:	0e0f9c01 	cdpeq	12, 0, cr9, cr15, cr1, {0}
    29f0:	242d0000 	strtcs	r0, [sp], #-0
    29f4:	01000012 	tsteq	r0, r2, lsl r0
	RFCAdi3VcoLdoVoltageMode (false);
    29f8:	9b26018a 	blls	983028 <__ccfg+0x963080>
	RFCSynthPowerDown ();
    29fc:	b1000000 	mrslt	r0, (UNDEF: 0)
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a00:	3f000006 	svccc	0x00000006
    2a04:	01005845 	tsteq	r0, r5, asr #16
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a08:	1d0101a4 	stfnes	f0, [r1, #-656]	; 0xfffffd70
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a0c:	00000f46 	andeq	r0, r0, r6, asr #30
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a10:	00000e8c 	andeq	r0, r0, ip, lsl #29
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a14:	00000e96 	muleq	r0, r6, lr
    2a18:	1a019c01 	bne	69a24 <__ccfg+0x49a7c>
    2a1c:	da011e00 	ble	4a224 <__ccfg+0x2a27c>
	_BIC (dstate, DSTATE_RFON);
    2a20:	01000011 	tsteq	r0, r1, lsl r0
    2a24:	64060138 	strvs	r0, [r6], #-312	; 0xfffffec8
}
    2a28:	7800000d 	stmdavc	r0, {r0, r2, r3}
    2a2c:	0100000e 	tsteq	r0, lr
    2a30:	000ec19c 	muleq	lr, ip, r1
    2a34:	133d4000 	teqne	sp, #0
    2a38:	3a010000 	bcc	42a40 <__ccfg+0x22a98>
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a3c:	00df0801 	sbcseq	r0, pc, r1, lsl #16
    2a40:	06cf0000 	strbeq	r0, [pc], r0
    2a44:	45410000 	strbmi	r0, [r1, #-0]
		if (cmd->status == tstat)
    2a48:	01005455 	tsteq	r0, r5, asr r4
		if (timeout-- == 0) {
    2a4c:	b2010168 	andlt	r0, r1, #104, 2
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a50:	2300000d 	movwcs	r0, #13
    2a54:	00000258 	andeq	r0, r0, r8, asr r2
    2a58:	00116940 	andseq	r6, r1, r0, asr #18
			syserror (EHARDWARE, "rt2");
    2a5c:	01470100 	mrseq	r0, (UNDEF: 87)
    2a60:	00009b0b 	andeq	r9, r0, fp, lsl #22
		udelay (1);
    2a64:	00071a00 	andeq	r1, r7, r0, lsl #20
		if (cmd->status == tstat)
    2a68:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
}
    2a6c:	0dd00000 	ldcleq	0, cr0, [r0]
    2a70:	0dd80000 	ldcleq	0, cr0, [r8]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a74:	0d050000 	stceq	0, cr0, [r5, #-0]
    2a78:	000e7506 	andeq	r7, lr, r6, lsl #10
static void rf_on () {
    2a7c:	141f2100 	ldrne	r2, [pc], #-256	; 2a84 <rf_on.part.0+0x10>
    2a80:	42000000 	andmi	r0, r0, #0
	OSCHF_TurnOnXosc();
    2a84:	00001410 	andeq	r1, r0, r0, lsl r4
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a88:	00000ddc 	ldrdeq	r0, [r0], -ip
    2a8c:	00000de4 	andeq	r0, r0, r4, ror #27
    2a90:	8f060f05 	svchi	0x00060f05
    2a94:	2100000e 	tstcs	r0, lr
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a98:	0000141f 	andeq	r1, r0, pc, lsl r4
    2a9c:	13f34200 	mvnsne	r4, #0, 4
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2aa0:	0e2a0000 	cdpeq	0, 2, cr0, cr10, cr0, {0}
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2aa4:	0e320000 	cdpeq	0, 3, cr0, cr2, cr0, {0}
	issue_cmd (
    2aa8:	17050000 	strne	r0, [r5, -r0]
    2aac:	000ea906 	andeq	sl, lr, r6, lsl #18
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ab0:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    2ab4:	43000000 	movwmi	r0, #0
    2ab8:	000013f3 	strdeq	r1, [r0], -r3
   pPatchTab[80] = 0;
    2abc:	00000e36 	andeq	r0, r0, r6, lsr lr
   } while (--nIterations);
    2ac0:	00000e3e 	andeq	r0, r0, lr, lsr lr
   pPatchTab[53] = 2;
    2ac4:	21061905 	tstcs	r6, r5, lsl #18
    2ac8:	00001402 	andeq	r1, r0, r2, lsl #8
   pPatchTab[55] = 3;
    2acc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   pPatchTab[110] = 4;
    2ad0:	0012d201 	andseq	sp, r2, r1, lsl #4
   pPatchTab[107] = 5;
    2ad4:	012b0100 			; <UNDEFINED> instruction: 0x012b0100
   pPatchTab[65] = 6;
    2ad8:	000d3c06 	andeq	r3, sp, r6, lsl #24
    2adc:	000d6400 	andeq	r6, sp, r0, lsl #8
   pPatchTab[57] = 1;
    2ae0:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
   pIrqPatch[1] = _IRQ_PATCH_0;
    2ae4:	3300000e 	movwcc	r0, #14
   const uint32_t *pS = patchGenfskRfe;
    2ae8:	00000f25 	andeq	r0, r0, r5, lsr #30
      t2 = *pS++;
    2aec:	00000d44 	andeq	r0, r0, r4, asr #26
      t4 = *pS++;
    2af0:	00000240 	andeq	r0, r0, r0, asr #4
      t6 = *pS++;
    2af4:	2c013201 	sfmcs	f3, 4, [r1], {1}
      t8 = *pS++;
    2af8:	000f3821 	andeq	r3, pc, r1, lsr #16
      *pD++ = t1;
    2afc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
      *pD++ = t2;
    2b00:	0011f101 	andseq	pc, r1, r1, lsl #2
      *pD++ = t3;
    2b04:	011e0100 	tsteq	lr, r0, lsl #2
      *pD++ = t5;
    2b08:	000cfc06 	andeq	pc, ip, r6, lsl #24
      *pD++ = t7;
    2b0c:	000d3c00 	andeq	r3, sp, r0, lsl #24
   } while (--nIterations);
    2b10:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    2b14:	3300000f 	movwcc	r0, #15
      *pD++ = t8;
    2b18:	00000f25 	andeq	r0, r0, r5, lsr #30
   } while (--nIterations);
    2b1c:	00000d0e 	andeq	r0, r0, lr, lsl #26
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b20:	00000220 	andeq	r0, r0, r0, lsr #4
   *pD++ = t2;
    2b24:	2c012501 	cfstr32cs	mvfx2, [r1], {1}
   *pD++ = t3;
    2b28:	000f3835 	andeq	r3, pc, r5, lsr r8	; <UNPREDICTABLE>
   *pD++ = t4;
    2b2c:	00075900 	andeq	r5, r7, r0, lsl #18
   *pD++ = t5;
    2b30:	44000000 	strmi	r0, [r0], #-0
    2b34:	00001336 	andeq	r1, r0, r6, lsr r3
	RFCAdi3VcoLdoVoltageMode (true);
    2b38:	15011701 	strne	r1, [r1, #-1793]	; 0xfffff8ff
    2b3c:	0000df01 	andeq	sp, r0, r1, lsl #30
       	RFCRfTrimSet (&rfTrim);
    2b40:	0f460300 	svceq	0x00460300
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b44:	643e0000 	ldrtvs	r0, [lr], #-0
    2b48:	01006c65 	tsteq	r0, r5, ror #24
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b4c:	a7220117 			; <UNDEFINED> instruction: 0xa7220117
    2b50:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&cmd_srt);
    2b54:	000f7245 	andeq	r7, pc, r5, asr #4
    2b58:	010e0100 	mrseq	r0, (UNDEF: 30)
	issue_cmd ((lword)&RF_cmdFs);
    2b5c:	0000a714 	andeq	sl, r0, r4, lsl r7
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b60:	5a460300 	bpl	1183768 <__ccfg+0x11637c0>
    2b64:	01000014 	tsteq	r0, r4, lsl r0
    2b68:	7a0314ee 	bvc	c7f28 <__ccfg+0xa7f80>
	IntEnable (INT_RFC_CPE_0);
    2b6c:	4700000f 	strmi	r0, [r0, -pc]
	_BIC (dstate, DSTATE_IRST);
    2b70:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2b74:	8d06f201 	sfmhi	f7, 1, [r6, #-4]
    2b78:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b7c:	01006947 	tsteq	r0, r7, asr #18
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b80:	008d0bf4 	strdeq	r0, [sp], r4
	IntEnable (INT_RFC_CPE_0);
    2b84:	00000000 	andeq	r0, r0, r0
    2b88:	13c70149 	bicne	r0, r7, #1073741842	; 0x40000012
}
    2b8c:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
	IntEnable (INT_RFC_CPE_0);
    2b90:	0ca80106 	stfeqs	f0, [r8], #24
    2b94:	0cfc0000 	ldcleq	0, cr0, [ip]
    2b98:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b9c:	00001024 	andeq	r1, r0, r4, lsr #32
    2ba0:	0063654a 	rsbeq	r6, r3, sl, asr #10
    2ba4:	a71a9801 	ldrge	r9, [sl, -r1, lsl #16]
    2ba8:	6c000000 	stcvs	0, cr0, [r0], {-0}
    2bac:	4a000007 	bmi	2bd0 <rf_on.part.0+0x15c>
    2bb0:	9801006d 	stmdals	r1, {r0, r2, r3, r5, r6}
    2bb4:	0010242a 	andseq	r2, r0, sl, lsr #8
    2bb8:	00077f00 	andeq	r7, r7, r0, lsl #30
    2bbc:	11ed2800 	mvnne	r2, r0, lsl #16
    2bc0:	0cb40000 	ldceq	0, cr0, [r4]
    2bc4:	0cb60000 	ldceq	0, cr0, [r6]
    2bc8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2bcc:	14102202 	ldrne	r2, [r0], #-514	; 0xfffffdfe
    2bd0:	0cb60000 	ldceq	0, cr0, [r6]
    2bd4:	01d00000 	bicseq	r0, r0, r0
    2bd8:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2bdc:	000fd903 	andeq	sp, pc, r3, lsl #18
    2be0:	141f2100 	ldrne	r2, [pc], #-256	; 2be8 <rf_on.part.0+0x174>
    2be4:	22000000 	andcs	r0, r0, #0
    2be8:	00001410 	andeq	r1, r0, r0, lsl r4
    2bec:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
    2bf0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
static void rx_int_enable () {
    2bf4:	f303b801 	vsub.i8	d11, d3, d1
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2bf8:	2100000f 	tstcs	r0, pc
    2bfc:	0000141f 	andeq	r1, r0, pc, lsl r4
    2c00:	13f32200 	mvnsne	r2, #0, 4
    2c04:	0cd40000 	ldcleq	0, cr0, [r4], {0}
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c08:	02080000 	andeq	r0, r8, #0
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c0c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2c10:	00100d03 	andseq	r0, r0, r3, lsl #26
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c14:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    2c18:	43000000 	movwmi	r0, #0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c1c:	000013f3 	strdeq	r1, [r0], -r3
    2c20:	00000cda 	ldrdeq	r0, [r0], -sl
    2c24:	00000cdc 	ldrdeq	r0, [r0], -ip
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c28:	2103b801 	tstcs	r3, r1, lsl #16
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c2c:	00001402 	andeq	r1, r0, r2, lsl #8
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c30:	04070000 	streq	r0, [r7], #-0
		if (db->status == DATA_ENTRY_FINISHED) {
    2c34:	000001d6 	ldrdeq	r0, [r0], -r6
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c38:	135c0149 	cmpne	ip, #1073741842	; 0x40000012
    2c3c:	72010000 	andvc	r0, r1, #0
			nr++;
    2c40:	00000106 	andeq	r0, r0, r6, lsl #2
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c44:	00000000 	andeq	r0, r0, r0
    2c48:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c4c:	000010ca 	andeq	r1, r0, sl, asr #1
    2c50:	0074734a 	rsbseq	r7, r4, sl, asr #6
				__dp [pl + 1] = __dp [pl] - 128;
    2c54:	a7187201 	ldrge	r7, [r8, -r1, lsl #4]
				pl = __dp [1] + 2;
    2c58:	9d000000 	stcls	0, cr0, [r0, #-0]
				__dp [pl + 1] = __dp [pl] - 128;
    2c5c:	4a000007 	bmi	2c80 <rx_int_enable+0x8c>
    2c60:	006e6573 	rsbeq	r6, lr, r3, ror r5
				__dp [pl] = 0;
    2c64:	44287201 	strtmi	r7, [r8], #-513	; 0xfffffdff
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c68:	b0000002 	andlt	r0, r0, r2
    2c6c:	4a000007 	bmi	2c90 <rx_int_enable+0x9c>
    2c70:	006c6176 	rsbeq	r6, ip, r6, ror r1
			db->status = DATA_ENTRY_PENDING;
    2c74:	fc357201 	ldc2	2, cr7, [r5], #-4
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c78:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c7c:	4b000007 	blmi	2ca0 <rx_int_enable+0xac>
				diag ("BAD RX");
    2c80:	00000f8d 	andeq	r0, r0, sp, lsl #31
    2c84:	c90e7401 	stmdbgt	lr, {r0, sl, ip, sp, lr}
	if (nr) {
    2c88:	05000000 	streq	r0, [r0, #-0]
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c8c:	00000003 	andeq	r0, r0, r3
}
    2c90:	147d4c00 	ldrbtne	r4, [sp], #-3072	; 0xfffff400
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c94:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2c98:	00000001 	andeq	r0, r0, r1
    2c9c:	12204d00 	eorne	r4, r0, #0, 26
}
    2ca0:	00000000 	andeq	r0, r0, r0
    2ca4:	06080000 	streq	r0, [r8], -r0
    2ca8:	81010000 	mrshi	r0, (UNDEF: 1)
    2cac:	12014203 	andne	r4, r1, #805306368	; 0x30000000
	...
    2cb8:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    2cbc:	0010b912 	andseq	fp, r0, r2, lsl r9
    2cc0:	12132f00 	andsne	r2, r3, #0, 30
thread (cc1350_driver)
    2cc4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2cc8:	0000122a 	andeq	r1, r0, sl, lsr #4
	...
    2cd4:	00038401 	andeq	r8, r3, r1, lsl #8
		if (dstate & DSTATE_IRST) {
    2cd8:	1424014e 	strtne	r0, [r4], #-334	; 0xfffffeb2
    2cdc:	62010000 	andvs	r0, r1, #0
    2ce0:	167c0106 	ldrbtne	r0, [ip], -r6, lsl #2
			rf_off ();
    2ce4:	16ac0000 	strtne	r0, [ip], r0
			_BIC (dstate,
    2ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cec:	0f2c0149 	svceq	0x002c0149
		if (dstate & DSTATE_RXAC) {
    2cf0:	4f010000 	svcmi	0x00010000
    2cf4:	00000106 	andeq	r0, r0, r6, lsl #2
			if ((dstate & DSTATE_RXON) == 0)
    2cf8:	00000000 	andeq	r0, r0, r0
				rx_de ();
    2cfc:	9c010000 	stcls	0, cr0, [r1], {-0}
		if (paylen == 0) {
    2d00:	00001107 	andeq	r1, r0, r7, lsl #2
    2d04:	00125128 	andseq	r5, r2, r8, lsr #2
	...
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d10:	035f0100 	cmpeq	pc, #0, 2
    2d14:	63014900 	movwvs	r4, #6400	; 0x1900
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d18:	0100000f 	tsteq	r0, pc
    2d1c:	6801063b 	stmdavs	r1, {r0, r1, r3, r4, r5, r9, sl}
    2d20:	a800000c 	stmdage	r0, {r2, r3}
    2d24:	0100000c 	tsteq	r0, ip
    2d28:	00112e9c 	mulseq	r1, ip, lr
    2d2c:	00644a00 	rsbeq	r4, r4, r0, lsl #20
    2d30:	df1c3b01 	svcle	0x001c3b01
    2d34:	ec000000 	stc	0, cr0, [r0], {-0}
		} else if (dstate & DSTATE_RXON) {
    2d38:	00000007 	andeq	r0, r0, r7
	if (dstate & DSTATE_RFON)
    2d3c:	10230149 	eorne	r0, r3, r9, asr #2
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d40:	2b010000 	blcs	42d48 <__ccfg+0x22da0>
		re->status = DATA_ENTRY_PENDING;
    2d44:	0c2c0106 	stfeqs	f0, [ip], #-24	; 0xffffffe8
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d48:	0c680000 	stcleq	0, cr0, [r8], #-0
	issue_cmd ((lword)&RF_cmdPropRx);
    2d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
	_BIS (dstate, DSTATE_RXAC);
    2d50:	00001155 	andeq	r1, r0, r5, asr r1
    2d54:	0100644a 	tsteq	r0, sl, asr #8
    2d58:	00df1b2b 	sbcseq	r1, pc, fp, lsr #22
    2d5c:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
	if (dstate & DSTATE_RXAC)
    2d60:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    2d64:	00125901 	andseq	r5, r2, r1, lsl #18
				if (statid != 0xffff)
    2d68:	06200100 	strteq	r0, [r0], -r0, lsl #2
    2d6c:	000c0001 	andeq	r0, ip, r1
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d70:	000c2a00 	andeq	r2, ip, r0, lsl #20
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d74:	7c9c0100 	ldfvcs	f0, [ip], {0}
		if (paylen == 0) {
    2d78:	4a000011 	bmi	2dc4 <cc1350_driver+0x100>
			wait (qevent, DR_LOOP);
    2d7c:	2001006e 	andcs	r0, r1, lr, rrx
    2d80:	0000b81c 	andeq	fp, r0, ip, lsl r8
			if (dstate & DSTATE_RXAC) {
    2d84:	00082800 	andeq	r2, r8, r0, lsl #16
    2d88:	01490000 	mrseq	r0, (UNDEF: 73)
				rx_int_enable ();
    2d8c:	00001344 	andeq	r1, r0, r4, asr #6
			release;
    2d90:	01061901 	tsteq	r6, r1, lsl #18
			} else if (dstate & DSTATE_RFON) {
    2d94:	00000bd4 	ldrdeq	r0, [r0], -r4
				delay (offdelay, DR_GOOF);
    2d98:	00000c00 	andeq	r0, r0, r0, lsl #24
    2d9c:	11b79c01 			; <UNDEFINED> instruction: 0x11b79c01
    2da0:	6e4f0000 	cdpvs	0, 4, cr0, cr15, cr0, {0}
		if (bckf_timer) {
    2da4:	1c190100 	ldfnes	f0, [r9], {-0}
			wait (qevent, DR_LOOP);
    2da8:	000000b8 	strheq	r0, [r0], -r8
    2dac:	b7435001 	strblt	r5, [r3, -r1]
    2db0:	e8000011 	stmda	r0, {r0, r4}
			delay (bckf_timer, DR_LOOP);
    2db4:	f200000b 	vhadd.s8	d0, d0, d11
    2db8:	0100000b 	tsteq	r0, fp
			if (dstate & DSTATE_RXAC)
    2dbc:	c521031b 	strgt	r0, [r1, #-795]!	; 0xfffffce5
    2dc0:	00000011 	andeq	r0, r0, r1, lsl r0
	if (dstate & DSTATE_RFON)
    2dc4:	14385000 	ldrtne	r5, [r8], #-0
    2dc8:	15010000 	strne	r0, [r1, #-0]
		rx_de ();
    2dcc:	d0030114 	andle	r0, r3, r4, lsl r1
		RF_cmdPropTx . status = 0;
    2dd0:	51000011 	tstpl	r0, r1, lsl r0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2dd4:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
    2dd8:	0000b82b 	andeq	fp, r0, fp, lsr #16
    2ddc:	0f520000 	svceq	0x00520000
		issue_cmd ((lword)&cmd_cs);
    2de0:	03000010 	movweq	r0, #16
		if (dstate & DSTATE_IRST)
    2de4:	0135011a 	teqeq	r5, sl, lsl r1
    2de8:	0011ed03 	andseq	lr, r1, r3, lsl #26
    2dec:	14295300 	strtne	r5, [r9], #-768	; 0xfffffd00
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2df0:	1a030000 	bne	c2df8 <__ccfg+0xa2e50>
    2df4:	00734801 	rsbseq	r4, r3, r1, lsl #16
			delay (1, DR_XMIT);
    2df8:	54000000 	strpl	r0, [r0], #-0
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2dfc:	00001260 	andeq	r1, r0, r0, ror #4
    2e00:	01355b03 	teqeq	r5, r3, lsl #22
    2e04:	0f805403 	svceq	0x00805403
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e08:	50030000 	andpl	r0, r3, r0
    2e0c:	55030135 	strpl	r0, [r3, #-309]	; 0xfffffecb
				RF_cmdPropTx . status = 0;
    2e10:	0000137b 	andeq	r1, r0, fp, ror r3
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e14:	0101bf0f 	tsteq	r1, pc, lsl #30
				issue_cmd ((lword)&RF_cmdPropTx);
    2e18:	00000073 	andeq	r0, r0, r3, ror r0
				proceed (DR_XMIT);
    2e1c:	00122003 	andseq	r2, r2, r3
    2e20:	13dc1600 	bicsne	r1, ip, #0, 12
			txtries++;
    2e24:	c10f0000 	mrsgt	r0, CPSR
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e28:	0000730e 	andeq	r7, r0, lr, lsl #6
    2e2c:	4b540000 	blmi	1502e34 <__ccfg+0x14e2e8c>
    2e30:	0f000013 	svceq	0x00000013
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e34:	03010190 	movweq	r0, #4496	; 0x1190
		goto DR_LOOP__;
    2e38:	000f4a54 	andeq	r4, pc, r4, asr sl	; <UNPREDICTABLE>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e3c:	017b0f00 	cmneq	fp, r0, lsl #30
		paylen = 0;
    2e40:	b8520301 	ldmdalt	r2, {r0, r8, r9}^
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e44:	0a000011 	beq	2e90 <cc1350_driver+0x1cc>
		txtries = 0;
    2e48:	01010366 	tsteq	r1, r6, ror #6
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e4c:	00125103 	andseq	r5, r2, r3, lsl #2
    2e50:	118f5300 	orrne	r5, pc, r0, lsl #6
    2e54:	660a0000 	strvs	r0, [sl], -r0
    2e58:	00731f03 	rsbseq	r1, r3, r3, lsl #30
    2e5c:	56000000 	strpl	r0, [r0], -r0
		    tcvphy_top (physid) == NULL)
    2e60:	00001323 	andeq	r1, r0, r3, lsr #6
    2e64:	01014c02 	tsteq	r1, r2, lsl #24
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e68:	b4540301 	ldrblt	r0, [r4], #-769	; 0xfffffcff
    2e6c:	02000012 	andeq	r0, r0, #18
			rf_off ();
    2e70:	030101c4 	movweq	r0, #4548	; 0x11c4
endthread
    2e74:	00109057 	andseq	r9, r0, r7, asr r0
    2e78:	01ad0200 			; <UNDEFINED> instruction: 0x01ad0200
    2e7c:	00007301 	andeq	r7, r0, r1, lsl #6
    2e80:	e3560300 	cmp	r6, #0, 6
    2e84:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    2e88:	01010245 	tsteq	r1, r5, asr #4
    2e8c:	0fb55803 	svceq	0x00b55803
    2e90:	2c0e0000 	stccs	0, cr0, [lr], {-0}
    2e94:	73010102 	movwvc	r0, #4354	; 0x1102
    2e98:	03000000 	movweq	r0, #0
    2e9c:	000fa052 	andeq	sl, pc, r2, asr r0	; <UNPREDICTABLE>
    2ea0:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
    2ea4:	ab030101 	blge	c32b0 <__ccfg+0xa3308>
    2ea8:	53000012 	movwpl	r0, #18
    2eac:	00000f5a 	andeq	r0, r0, sl, asr pc
    2eb0:	1f01dc0e 	svcne	0x0001dc0e
void RFCCPE0IntHandler (void) {
    2eb4:	00000073 	andeq	r0, r0, r3, ror r0
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eb8:	111f5600 	tstne	pc, r0, lsl #12
		_BIS (dstate, DSTATE_IRST);
    2ebc:	0f0b0000 	svceq	0x000b0000
    2ec0:	03010101 	movweq	r0, #4353	; 0x1101
    2ec4:	00105c54 	andseq	r5, r0, r4, asr ip
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2ec8:	01ed0c00 	mvneq	r0, r0, lsl #24
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2ecc:	68540301 	ldmdavs	r4, {r0, r8, r9}^
    2ed0:	0c000013 	stceq	0, cr0, [r0], {19}
	p_trigger (drvprcs, qevent);
    2ed4:	030101d6 	movweq	r0, #4566	; 0x11d6
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ed8:	00103152 	andseq	r3, r0, r2, asr r1
    2edc:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
    2ee0:	e7030101 	str	r0, [r3, -r1, lsl #2]
    2ee4:	53000012 	movwpl	r0, #18
    2ee8:	0000119c 	muleq	r0, ip, r1
    2eec:	24044006 	strcs	r4, [r4], #-6
    2ef0:	00000073 	andeq	r0, r0, r3, ror r0
    2ef4:	0fca5200 	svceq	0x00ca5200
    2ef8:	91060000 	mrsls	r0, (UNDEF: 6)
    2efc:	03010103 	movweq	r0, #4355	; 0x1103
	RISE_N_SHINE;
    2f00:	00001311 	andeq	r1, r0, r1, lsl r3
    2f04:	00119c53 	andseq	r9, r1, r3, asr ip
    2f08:	03910600 	orrseq	r0, r1, #0, 12
}
    2f0c:	00007317 	andeq	r7, r0, r7, lsl r3
    2f10:	10f65300 	rscsne	r5, r6, r0, lsl #6
    2f14:	91060000 	mrsls	r0, (UNDEF: 6)
    2f18:	00732a03 	rsbseq	r2, r3, r3, lsl #20
    2f1c:	52000000 	andpl	r0, r0, #0
    2f20:	000013ef 	andeq	r1, r0, pc, ror #7
void phys_cc1350 (int phy, int mbs) {
    2f24:	01030c06 	tsteq	r3, r6, lsl #24
	if (rbuffl != 0)
    2f28:	133b0301 	teqne	fp, #67108864	; 0x4000000
    2f2c:	9c530000 	mrals	r0, r3, acc0
		syserror (ETOOMANY, "cc13");
    2f30:	06000011 			; <UNDEFINED> instruction: 0x06000011
		syserror (EREQPAR, "cc13 mb");
    2f34:	7318030c 	tstvc	r8, #12, 6	; 0x30000000
	if (mbs == 0)
    2f38:	53000000 	movwpl	r0, #0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f3c:	000010f6 	strdeq	r1, [r0], -r6
		syserror (EREQPAR, "cc13 mb");
    2f40:	2b030c06 	blcs	c5f60 <__ccfg+0xa5fb8>
    2f44:	00000073 	andeq	r0, r0, r3, ror r0
	i = 0;
    2f48:	10e75200 	rscne	r5, r7, r0, lsl #4
	rbuffl = (byte) mbs;
    2f4c:	e7060000 	str	r0, [r6, -r0]
		db->config.type = 0;	// General (data in structure)
    2f50:	03010101 	movweq	r0, #4353	; 0x1101
	rbuffl = (byte) mbs;
    2f54:	00001358 	andeq	r1, r0, r8, asr r3
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f58:	00119c53 	andseq	r9, r1, r3, asr ip
    2f5c:	01e70600 	mvneq	r0, r0, lsl #12
		if (db == NULL)
    2f60:	00007319 	andeq	r7, r0, r9, lsl r3
			syserror (EMALLOC, "cc13");
    2f64:	2a520000 	bcs	1482f6c <__ccfg+0x1462fc4>
    2f68:	06000012 			; <UNDEFINED> instruction: 0x06000012
    2f6c:	010101ba 			; <UNDEFINED> instruction: 0x010101ba
		db->status = DATA_ENTRY_PENDING;
    2f70:	00137503 	andseq	r7, r3, r3, lsl #10
		if (i)
    2f74:	119c5300 	orrsne	r5, ip, r0, lsl #6
			da->pNextEntry = (byte*) db;
    2f78:	ba060000 	blt	182f80 <__ccfg+0x162fd8>
		db->length = rbuffl + 2;
    2f7c:	00731501 	rsbseq	r1, r3, r1, lsl #10
    2f80:	52000000 	andpl	r0, r0, #0
		db->config.type = 0;	// General (data in structure)
    2f84:	00001312 	andeq	r1, r0, r2, lsl r3
		db->length = rbuffl + 2;
    2f88:	01013906 	tsteq	r1, r6, lsl #18
	db->pNextEntry = (byte*) re;
    2f8c:	13ac0301 			; <UNDEFINED> instruction: 0x13ac0301
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f90:	9c530000 	mrals	r0, r3, acc0
    2f94:	06000011 			; <UNDEFINED> instruction: 0x06000011
	if (rbuffs == NULL)
    2f98:	731b0139 	tstvc	fp, #1073741838	; 0x4000000e
	rbuffs->pCurrEntry = (byte*) re;
    2f9c:	53000000 	movwpl	r0, #0
	rbuffs->pLastEntry = NULL;
    2fa0:	00001084 	andeq	r1, r0, r4, lsl #1
    2fa4:	2e013906 	vmlacs.f16	s6, s2, s12	; <UNPREDICTABLE>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fa8:	00000073 	andeq	r0, r0, r3, ror r0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fac:	00107053 	andseq	r7, r0, r3, asr r0
    2fb0:	013a0600 	teqeq	sl, r0, lsl #12
    2fb4:	0000731b 	andeq	r7, r0, fp, lsl r3
	rbuffl -= 2;
    2fb8:	35520000 	ldrbcc	r0, [r2, #-0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fbc:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
	rbuffl -= 2;
    2fc0:	01010284 	smlabbeq	r1, r4, r2, r0
	physid = phy;
    2fc4:	0013c903 	andseq	ip, r3, r3, lsl #18
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fc8:	11035300 	mrsne	r5, SP_svc
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fcc:	84040000 	strhi	r0, [r4], #-0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fd0:	00731e02 	rsbseq	r1, r3, r2, lsl #28
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fd4:	52000000 	andpl	r0, r0, #0
    2fd8:	00000f32 	andeq	r0, r0, r2, lsr pc
	utimer_add (&bckf_timer);
    2fdc:	01020604 	tsteq	r2, r4, lsl #12
	drvprcs = runthread (cc1350_driver);
    2fe0:	13f30301 	mvnsne	r0, #67108864	; 0x4000000
    2fe4:	03530000 	cmpeq	r3, #0
    2fe8:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
	if (drvprcs == 0)
    2fec:	73230206 			; <UNDEFINED> instruction: 0x73230206
		syserror (ERESOURCE, "cc13");
    2ff0:	53000000 	movwpl	r0, #0
    2ff4:	00001412 	andeq	r1, r0, r2, lsl r4
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2ff8:	37020604 	strcc	r0, [r2, -r4, lsl #12]
    2ffc:	00000073 	andeq	r0, r0, r3, ror r0
    3000:	12a65200 	adcne	r5, r6, #0, 4
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3004:	54040000 	strpl	r0, [r4], #-0
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3008:	03010101 	movweq	r0, #4353	; 0x1101
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    300c:	00001410 	andeq	r1, r0, r0, lsl r4
    3010:	00110353 	andseq	r0, r1, r3, asr r3
    3014:	01540400 	cmpeq	r4, r0, lsl #8
    3018:	00007319 	andeq	r7, r0, r9, lsl r3
    301c:	b3520000 	cmplt	r2, #0
    3020:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3024:	0101011e 	tsteq	r1, lr, lsl r1
    3028:	00142d03 	andseq	r2, r4, r3, lsl #26
    302c:	11035300 	mrsne	r5, SP_svc
	plugch ();
    3030:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3034:	00731701 	rsbseq	r1, r3, r1, lsl #14
    3038:	56000000 	strpl	r0, [r0], -r0
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    303c:	00001138 	andeq	r1, r0, r8, lsr r1
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3040:	01046309 	tsteq	r4, r9, lsl #6
    3044:	a0560301 	subsge	r0, r6, r1, lsl #6
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3048:	09000010 	stmdbeq	r0, {r4}
}
    304c:	01010454 	tsteq	r1, r4, asr r4
    3050:	10b95603 	adcsne	r5, r9, r3, lsl #12
    3054:	2a090000 	bcs	24305c <__ccfg+0x2230b4>
    3058:	03010102 	movweq	r0, #4354	; 0x1102
    305c:	0013fd52 	andseq	pc, r3, r2, asr sp	; <UNPREDICTABLE>
    3060:	01680900 	cmneq	r8, r0, lsl #18
    3064:	6b030101 	blvs	c3470 <__ccfg+0xa34c8>
    3068:	53000014 	movwpl	r0, #20
    306c:	000010c5 	andeq	r1, r0, r5, asr #1
    3070:	1f016809 	svcne	0x00016809
    3074:	00000073 	andeq	r0, r0, r3, ror r0
    3078:	0fff5600 	svceq	0x00ff5600
    307c:	32090000 	andcc	r0, r9, #0
    3080:	03010101 	movweq	r0, #4353	; 0x1101
    3084:	000d4459 	andeq	r4, sp, r9, asr r4
	...
    3090:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    3094:	00000d58 	andeq	r0, r0, r8, asr sp
    3098:	0000083b 	andeq	r0, r0, fp, lsr r8
    309c:	121f0000 	andsne	r0, pc, #0
    30a0:	00030000 	andeq	r0, r3, r0
    30a4:	000009f2 	strdeq	r0, [r0], -r2
    30a8:	00a30104 	adceq	r0, r3, r4, lsl #2
    30ac:	9d0c0000 	stcls	0, cr0, [ip, #-0]
    30b0:	ec000015 	stc	0, cr0, [r0], {21}
    30b4:	b000000d 	andlt	r0, r0, sp
    30b8:	00000007 	andeq	r0, r0, r7
    30bc:	d0000000 	andle	r0, r0, r0
    30c0:	02000022 	andeq	r0, r0, #34	; 0x22
    30c4:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
    30c8:	02020000 	andeq	r0, r2, #0
    30cc:	000a5b05 	andeq	r5, sl, r5, lsl #22
    30d0:	2b830300 	blcs	fe0c3cd8 <_estack+0xde0becd8>
    30d4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    30d8:	00003f18 	andeq	r3, r0, r8, lsl pc
    30dc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    30e0:	000007ed 	andeq	r0, r0, sp, ror #15
    30e4:	e8050802 	stmda	r5, {r1, fp}
    30e8:	03000007 	movweq	r0, #7
    30ec:	000029fe 	strdeq	r2, [r0], -lr
    30f0:	59182e03 	ldmdbpl	r8, {r0, r1, r9, sl, fp, sp}
    30f4:	02000000 	andeq	r0, r0, #0
    30f8:	0c4b0801 	mcrreq	8, 0, r0, fp, cr1
    30fc:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    3100:	0300002d 	movweq	r0, #45	; 0x2d
    3104:	006c1931 	rsbeq	r1, ip, r1, lsr r9
    3108:	02020000 	andeq	r0, r2, #0
    310c:	000d4807 	andeq	r4, sp, r7, lsl #16
    3110:	29960300 	ldmibcs	r6, {r8, r9}
    3114:	34030000 	strcc	r0, [r3], #-0
    3118:	00007f19 	andeq	r7, r0, r9, lsl pc
    311c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3120:	0000041d 	andeq	r0, r0, sp, lsl r4
    3124:	18070802 	stmdane	r7, {r1, fp}
    3128:	04000004 	streq	r0, [r0], #-4
    312c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3130:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3134:	00042207 	andeq	r2, r4, r7, lsl #4
strand (__outserial, const char*)
    3138:	050e0300 	streq	r0, [lr, #-768]	; 0xfffffd00
    313c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    3140:	0000a71b 	andeq	sl, r0, fp, lsl r7
    3144:	0b800500 	bleq	fe00454c <_estack+0xddfff54c>
endstrand
    3148:	0b040000 	bleq	103150 <__ccfg+0xe31a8>
    314c:	0000bf00 	andeq	fp, r0, r0, lsl #30
	ptr = data;
    3150:	085d0600 	ldmdaeq	sp, {r9, sl}^
    3154:	00bf0000 	adcseq	r0, pc, r0
	if (*ptr)
    3158:	01000000 	mrseq	r0, (UNDEF: 0)
		len = strlen (ptr);
    315c:	03040700 	movweq	r0, #18176	; 0x4700
    3160:	00000b82 	andeq	r0, r0, r2, lsl #23
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3164:	9b186304 	blls	61bd7c <__ccfg+0x5fbdd4>
    3168:	03000000 	movweq	r0, #0
    316c:	0000130a 	andeq	r1, r0, sl, lsl #6
    3170:	4d122605 	ldcmi	6, cr2, [r2, #-20]	; 0xffffffec
    3174:	03000000 	movweq	r0, #0
	len -= quant;
    3178:	000028dd 	ldrdeq	r2, [r0], -sp
    317c:	60122705 	andsvs	r2, r2, r5, lsl #14
    3180:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	if (len == 0) {
    3184:	000000d9 	ldrdeq	r0, [r0], -r9
		ufree (data);
    3188:	0000d909 	andeq	sp, r0, r9, lsl #18
		finish;
    318c:	13ae0300 			; <UNDEFINED> instruction: 0x13ae0300
    3190:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3194:	00003312 	andeq	r3, r0, r2, lsl r3
    3198:	1da40300 	stcne	3, cr0, [r4]
    319c:	2b050000 	blcs	1431a4 <__ccfg+0x1231fc>
    31a0:	00004d12 	andeq	r4, r0, r2, lsl sp
    31a4:	00fb0900 	rscseq	r0, fp, r0, lsl #18
strand (__inserial, address)
    31a8:	2f030000 	svccs	0x00030000
    31ac:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    31b0:	0073122c 	rsbseq	r1, r3, ip, lsr #4
    31b4:	0c080000 	stceq	0, cr0, [r8], {-0}
    31b8:	03000001 	movweq	r0, #1
	if (__inpline != NULL)
    31bc:	00000636 	andeq	r0, r0, r6, lsr r6
    31c0:	73122d05 	tstvc	r2, #320	; 0x140
		finish;
    31c4:	03000000 	movweq	r0, #0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31c8:	00000ba4 	andeq	r0, r0, r4, lsr #23
    31cc:	35102e05 	ldrcc	r2, [r0, #-3589]	; 0xfffff1fb
    31d0:	0a000001 	beq	31dc <__inserial+0x34>
    31d4:	0000d904 	andeq	sp, r0, r4, lsl #18
		umwait (IM_INIT);
    31d8:	05080b00 	streq	r0, [r8, #-2816]	; 0xfffff500
		release;
    31dc:	01c90932 	biceq	r0, r9, r2, lsr r9
	savedata (data);
    31e0:	2b0c0000 	blcs	3031e8 <__ccfg+0x2e3240>
	len = MAX_LINE_LENGTH;
    31e4:	05000000 	streq	r0, [r0, #-0]
	io (IM_READ, __cport, READ, ptr, 1);
    31e8:	00fb0734 	rscseq	r0, fp, r4, lsr r7
    31ec:	01010000 	mrseq	r0, (UNDEF: 1)
    31f0:	3c0c0007 	stccc	0, cr0, [ip], {7}
    31f4:	05000006 	streq	r0, [r0, #-6]
	if (ptr == (char*) data) { // new line
    31f8:	00fb0335 	rscseq	r0, fp, r5, lsr r3
    31fc:	01010000 	mrseq	r0, (UNDEF: 1)
		if (*ptr == '\0') { // bin cmd
    3200:	de0c0006 	cdple	0, 0, cr0, cr12, cr6, {0}
			proceed (IM_BIN);
    3204:	05000002 	streq	r0, [r0, #-2]
    3208:	00fb0336 	rscseq	r0, fp, r6, lsr r3
		if (*ptr < 0x20)
    320c:	01010000 	mrseq	r0, (UNDEF: 1)
    3210:	a70c0005 	strge	r0, [ip, -r5]
			proceed (IM_READ);
    3214:	05000006 	streq	r0, [r0, #-6]
    3218:	00fb0337 	rscseq	r0, fp, r7, lsr r3
	if (*ptr == '\n' || *ptr == '\r') {
    321c:	01010000 	mrseq	r0, (UNDEF: 1)
    3220:	8f0c0004 	svchi	0x000c0004
    3224:	0500000a 	streq	r0, [r0, #-10]
		*ptr = '\0';
    3228:	00fb0338 	rscseq	r0, fp, r8, lsr r3
		__inpline = (char*)data;
    322c:	04010000 	streq	r0, [r1], #-0
		finish;
    3230:	4b0d0000 	blmi	343238 <__ccfg+0x323290>
	if (len) {
    3234:	05000006 	streq	r0, [r0, #-6]
		ptr++;
    3238:	00fb073a 	rscseq	r0, fp, sl, lsr r7
    323c:	0d010000 	stceq	0, cr0, [r1, #-0]
		len--;
    3240:	000008eb 	andeq	r0, r0, fp, ror #17
	proceed (IM_READ);
    3244:	fb033c05 	blx	d2262 <__ccfg+0xb22ba>
	io (IM_BIN, __cport, READ, ptr, 1);
    3248:	02000000 	andeq	r0, r0, #0
    324c:	000f1c0d 	andeq	r1, pc, sp, lsl #24
    3250:	033d0500 	teqeq	sp, #0, 10
    3254:	000000fb 	strdeq	r0, [r0], -fp
    3258:	09030d03 	stmdbeq	r3, {r0, r1, r8, sl, fp}
	len -= 2;
    325c:	3f050000 	svccc	0x00050000
	if (len > *ptr + 1) // 1 for 0x04
    3260:	00010c08 	andeq	r0, r1, r8, lsl #24
    3264:	03000400 	movweq	r0, #1024	; 0x400
		len = *ptr + 1;
    3268:	00000314 	andeq	r0, r0, r4, lsl r3
    326c:	3b034105 	blcc	d3688 <__ccfg+0xb36e0>
	ptr++;
    3270:	09000001 	stmdbeq	r0, {r0}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3274:	000001c9 	andeq	r0, r0, r9, asr #3
    3278:	0006ae0e 	andeq	sl, r6, lr, lsl #28
    327c:	1a430500 	bne	10c4684 <__ccfg+0x10a46dc>
    3280:	000001d5 	ldrdeq	r0, [r0], -r5
    3284:	970e0101 	strls	r0, [lr, -r1, lsl #2]
    3288:	05000001 	streq	r0, [r0, #-1]
	len -= quant;
    328c:	01f60e45 	mvnseq	r0, r5, asr #28
		__inpline = (char*)data;
    3290:	01010000 	mrseq	r0, (UNDEF: 1)
		finish;
    3294:	01fc040a 	mvnseq	r0, sl, lsl #8
	ptr += quant;
    3298:	01020000 	mrseq	r0, (UNDEF: 2)
    329c:	000c5408 	andeq	r5, ip, r8, lsl #8
endstrand
    32a0:	01fc0800 	mvnseq	r0, r0, lsl #16
    32a4:	1d0e0000 	stcne	0, cr0, [lr, #-0]
	proceed (IM_BINL);
    32a8:	05000003 	streq	r0, [r0, #-3]
endstrand
    32ac:	01f61e45 	mvnseq	r1, r5, asr #28
    32b0:	01010000 	mrseq	r0, (UNDEF: 1)
    32b4:	8f06080b 	svchi	0x0006080b
    32b8:	00024709 	andeq	r4, r2, r9, lsl #14
    32bc:	0cba0d00 	ldceq	13, cr0, [sl]
    32c0:	90060000 	andls	r0, r6, r0
		if (res && (d < n))
    32c4:	0000730b 	andeq	r7, r0, fp, lsl #6
    32c8:	570d0000 	strpl	r0, [sp, -r0]
    32cc:	06000010 			; <UNDEFINED> instruction: 0x06000010
    32d0:	00d90891 	smullseq	r0, r9, r1, r8
			res [d] = (char) c;
    32d4:	0d040000 	stceq	0, cr0, [r4, #-0]
		d++;
    32d8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    32dc:	07109206 	ldreq	r9, [r0, -r6, lsl #4]
    32e0:	06000001 	streq	r0, [r0], -r1
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32e4:	0cae0300 	stceq	3, cr0, [lr]
    32e8:	93060000 	movwls	r0, #24576	; 0x6000
    32ec:	00021603 	andeq	r1, r2, r3, lsl #12
				enci (10000);
    32f0:	02470f00 	subeq	r0, r7, #0, 30
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32f4:	025e0000 	subseq	r0, lr, #0
    32f8:	00100000 	andseq	r0, r0, r0
	d = 0;
    32fc:	00092d0e 	andeq	r2, r9, lr, lsl #26
		c = *fm++;
    3300:	0f990600 	svceq	0x00990600
		if (c == '\\') {
    3304:	00000253 	andeq	r0, r0, r3, asr r2
			if ((c = *fm++) == '\0') {
    3308:	010b0101 	tsteq	fp, r1, lsl #2
    330c:	96099107 	strls	r9, [r9], -r7, lsl #2
				outc ('\\');
    3310:	0c000002 	stceq	0, cr0, [r0], {2}
			if ((c = *fm++) == '\0') {
    3314:	0000090a 	andeq	r0, r0, sl, lsl #18
				outc ('\\');
    3318:	fb079307 	blx	1e7f3e <__ccfg+0x1c7f96>
    331c:	01000000 	mrseq	r0, (UNDEF: 0)
			outc (c);
    3320:	0c000107 	stfeqs	f0, [r0], {7}
    3324:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
			if (c == '\0')
    3328:	fb039407 	blx	e834e <__ccfg+0xc83a6>
    332c:	01000000 	mrseq	r0, (UNDEF: 0)
			outc (c);
    3330:	00000001 	andeq	r0, r0, r1
				outc (val);
    3334:	000a9b03 	andeq	r9, sl, r3, lsl #22
				val = (word) va_arg (ap, aword);
    3338:	03960700 	orrseq	r0, r6, #0, 14
		if (c == '%') {
    333c:	0000026c 	andeq	r0, r0, ip, ror #4
    3340:	00029608 	andeq	r9, r2, r8, lsl #12
			c = *fm++;
    3344:	02a20f00 	adceq	r0, r2, #0, 30
			switch (c) {
    3348:	02b20000 	adcseq	r0, r2, #0
    334c:	00100000 	andseq	r0, r0, r0
    3350:	0002a708 	andeq	sl, r2, r8, lsl #14
    3354:	03a10e00 			; <UNDEFINED> instruction: 0x03a10e00
    3358:	9c070000 	stcls	0, cr0, [r7], {-0}
    335c:	0002b217 	andeq	fp, r2, r7, lsl r2
    3360:	0f010100 	svceq	0x00010100
    3364:	000000e5 	andeq	r0, r0, r5, ror #1
				outc ('%');
    3368:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    336c:	c5080010 	strgt	r0, [r8, #-16]
				outc (c);
    3370:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3374:	000005fe 	strdeq	r0, [r0], -lr
    3378:	d0130608 	andsle	r0, r3, r8, lsl #12
				if (c == '\0')
    337c:	01000002 	tsteq	r0, r2
				return d;
    3380:	08cd0e01 	stmiaeq	sp, {r0, r9, sl, fp}^
}
    3384:	c3060000 	movwgt	r0, #24576	; 0x6000
    3388:	00010c0e 	andeq	r0, r1, lr, lsl #24
			switch (c) {
    338c:	11010100 	mrsne	r0, (UNDEF: 17)
    3390:	00000c62 	andeq	r0, r0, r2, ror #24
    3394:	10016e09 	andne	r6, r1, r9, lsl #28
				for (i = 12; ; i -= 4) {
    3398:	000002fe 	strdeq	r0, [r0], -lr
				val = (word) va_arg (ap, aword);
    339c:	0304040a 	movweq	r0, #17418	; 0x440a
						[ (val >> i) & 0xf ]);
    33a0:	01120000 	tsteq	r2, r0
    33a4:	00000310 	andeq	r0, r0, r0, lsl r3
    33a8:	0000d913 	andeq	sp, r0, r3, lsl r9
					outc (__pi_hex_enc_table
    33ac:	030f0000 	movweq	r0, #61440	; 0xf000
    33b0:	1b000002 	blne	33c0 <__pi_vfparse+0xdc>
					if (i == 0)
    33b4:	10000003 	andne	r0, r0, r3
    33b8:	03100800 	tsteq	r0, #0, 16
				for (i = 12; ; i -= 4) {
    33bc:	d6140000 	ldrle	r0, [r4], -r0
				val = (word) va_arg (ap, aword);
    33c0:	09000009 	stmdbeq	r0, {r0, r3}
				if (c == 'd' && (val & 0x8000) != 0) {
    33c4:	1b16017f 	blne	5839c8 <__ccfg+0x563a20>
				val = (word) va_arg (ap, aword);
    33c8:	01000003 	tsteq	r0, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    33cc:	038d1401 	orreq	r1, sp, #16777216	; 0x1000000
    33d0:	82090000 	andhi	r0, r9, #0
					outc ('-');
    33d4:	01181401 	tsteq	r8, r1, lsl #8
    33d8:	01010000 	mrseq	r0, (UNDEF: 1)
					val = (~val) + 1;
    33dc:	00036514 	andeq	r6, r3, r4, lsl r5
    33e0:	02d80900 	sbcseq	r0, r8, #0, 18
				for (i = 12; ; i -= 4) {
    33e4:	00010c0e 	andeq	r0, r1, lr, lsl #24
				enci (10000);
    33e8:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    33ec:	03030908 	movweq	r0, #14600	; 0x3908
    33f0:	00037409 	andeq	r7, r3, r9, lsl #8
    33f4:	3c831600 	stccc	6, cr1, [r3], {0}
    33f8:	07090000 	streq	r0, [r9, -r0]
    33fc:	00d90703 	sbcseq	r0, r9, r3, lsl #14
    3400:	16000000 	strne	r0, [r0], -r0
    3404:	00000faf 	andeq	r0, r0, pc, lsr #31
    3408:	08030809 	stmdaeq	r3, {r0, r3, fp}
    340c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3410:	f9110004 			; <UNDEFINED> instruction: 0xf9110004
    3414:	09000009 	stmdbeq	r0, {r0, r3}
    3418:	4d030309 	stcmi	3, cr0, [r3, #-36]	; 0xffffffdc
    341c:	17000003 	strne	r0, [r0, -r3]
    3420:	00000020 	andeq	r0, r0, r0, lsr #32
    3424:	030b0930 	movweq	r0, #47408	; 0xb930
    3428:	0003e408 	andeq	lr, r3, r8, lsl #8
    342c:	1f061600 	svcne	0x00061600
				if (c == 'd' || c == 'u') {
    3430:	14090000 	strne	r0, [r9], #-0
    3434:	00d90803 	sbcseq	r0, r9, r3, lsl #16
					if (c == 'd' &&
    3438:	16000000 	strne	r0, [r0], -r0
					val = va_arg (ap, lword);
    343c:	00000bd7 	ldrdeq	r0, [r0], -r7
					fm++;
    3440:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
					if (c == 'd' &&
    3444:	000000d9 	ldrdeq	r0, [r0], -r9
    3448:	4c701602 	ldclmi	6, cr1, [r0], #-8
						outc ('-');
    344c:	16090000 	strne	r0, [r9], -r0
    3450:	02f10b03 	rscseq	r0, r1, #3072	; 0xc00
						val = (~val) + 1;
    3454:	16040000 	strne	r0, [r4], -r0
				enci (10000);
    3458:	00004736 	andeq	r4, r0, r6, lsr r7
					enci (1000000000UL);
    345c:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    3460:	0000011d 	andeq	r0, r0, sp, lsl r1
    3464:	000f1608 	andeq	r1, pc, r8, lsl #12
    3468:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    346c:	03e40f03 	mvneq	r0, #3, 30
    3470:	160c0000 	strne	r0, [ip], -r0
    3474:	0000094d 	andeq	r0, r0, sp, asr #18
    3478:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    347c:	000003f4 	strdeq	r0, [r0], -r4
    3480:	740f002c 	strvc	r0, [pc], #-44	; 3488 <__pi_vfparse+0x1a4>
    3484:	f4000003 	vst4.8	{d0-d3}, [r0], r3
    3488:	18000003 	stmdane	r0, {r0, r1}
    348c:	00000094 	muleq	r0, r4, r0
    3490:	040a0003 	streq	r0, [sl], #-3
    3494:	00000381 	andeq	r0, r0, r1, lsl #7
    3498:	000bcc11 	andeq	ip, fp, r1, lsl ip
    349c:	031c0900 	tsteq	ip, #0, 18
				} else if (c == 'x') {
    34a0:	0003811b 	andeq	r8, r3, fp, lsl r1
					for (i = 28; ; i -= 4) {
    34a4:	0bac1400 	bleq	feb084ac <_estack+0xdeb034ac>
					val = va_arg (ap, lword);
    34a8:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
							[ (val >> i) & 0xf ]);
    34ac:	04161403 	ldreq	r1, [r6], #-1027	; 0xfffffbfd
    34b0:	01010000 	mrseq	r0, (UNDEF: 1)
						outc (__pi_hex_enc_table
    34b4:	03fa040a 	mvnseq	r0, #167772160	; 0xa000000
    34b8:	ff0e0000 			; <UNDEFINED> instruction: 0xff0e0000
    34bc:	0a000006 	beq	34dc <__pi_vfparse+0x1f8>
						if (i == 0)
    34c0:	00d9131d 	sbcseq	r1, r9, sp, lsl r3
    34c4:	01010000 	mrseq	r0, (UNDEF: 1)
					for (i = 28; ; i -= 4) {
    34c8:	0002e50e 	andeq	lr, r2, lr, lsl #10
					outc ('%');
    34cc:	1a1e0a00 	bne	785cd4 <__ccfg+0x765d2c>
    34d0:	000000ea 	andeq	r0, r0, sl, ror #1
    34d4:	590e0101 	stmdbpl	lr, {r0, r8}
					outc ('l');
    34d8:	0a00000c 	beq	3510 <__pi_vfparse+0x22c>
    34dc:	00ea241e 	rsceq	r2, sl, lr, lsl r4
				val = (word) va_arg (ap, aword);
    34e0:	01010000 	mrseq	r0, (UNDEF: 1)
				outc (val);
    34e4:	000c770e 	andeq	r7, ip, lr, lsl #14
    34e8:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
				while (*st != '\0') {
    34ec:	00000416 	andeq	r0, r0, r6, lsl r4
    34f0:	85030101 	strhi	r0, [r3, #-257]	; 0xfffffeff
    34f4:	0a000014 	beq	354c <vform+0x38>
    34f8:	04600f44 	strbteq	r0, [r0], #-3908	; 0xfffff0bc
					outc (*st);
    34fc:	040a0000 	streq	r0, [sl], #-0
    3500:	00000466 	andeq	r0, r0, r6, ror #8
					st++;
    3504:	008d0119 	addeq	r0, sp, r9, lsl r1
		c = *fm++;
    3508:	04800000 	streq	r0, [r0], #0
    350c:	8d130000 	ldchi	0, cr0, [r3, #-0]
    3510:	13000000 	movwne	r0, #0
char *vform (char *res, const char *fm, va_list aq) {
    3514:	000001f6 	strdeq	r0, [r0], -r6
    3518:	00008d13 	andeq	r8, r0, r3, lsl sp
	if (res != NULL) {
    351c:	3e1a0000 	cdpcc	0, 1, cr0, cr10, cr0, {0}
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3520:	01000003 	tsteq	r0, r3
    3524:	0305070c 	movweq	r0, #22284	; 0x570c
    3528:	200006ac 	andcs	r0, r0, ip, lsr #13
}
    352c:	0016291b 	andseq	r2, r6, fp, lsl r9
    3530:	07100100 	ldreq	r0, [r0, -r0, lsl #2]
	fml = strlen (fm) + 17;
    3534:	0000010c 	andeq	r0, r0, ip, lsl #2
    3538:	04030501 	streq	r0, [r3], #-1281	; 0xfffffaff
    353c:	1a200000 	bne	803544 <__ccfg+0x7e359c>
	if ((res = (char*) umalloc (fml)) == NULL)
    3540:	00000446 	andeq	r0, r0, r6, asr #8
    3544:	050d1a01 	streq	r1, [sp, #-2561]	; 0xfffff5ff
    3548:	00058403 	andeq	r8, r5, r3, lsl #8
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    354c:	04540f20 	ldrbeq	r0, [r4], #-3872	; 0xfffff0e0
    3550:	04bf0000 	ldrteq	r0, [pc], #0	; 3558 <vform+0x44>
    3554:	94180000 	ldrls	r0, [r8], #-0
    3558:	00000000 	andeq	r0, r0, r0
		ufree (res);
    355c:	14bd1c00 	ldrtne	r1, [sp], #3072	; 0xc00
		goto Again;
    3560:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
	if (buf == NULL || fmt == NULL)
    3564:	0004af14 	andeq	sl, r4, r4, lsl pc
int vscan (const char *buf, const char *fmt, va_list ap) {
    3568:	88030500 	stmdahi	r3, {r8, sl}
	if (buf == NULL || fmt == NULL)
    356c:	1a200005 	bne	803588 <__ccfg+0x7e35e0>
    3570:	000001da 	ldrdeq	r0, [r0], -sl
    3574:	05132201 	ldreq	r2, [r3, #-513]	; 0xfffffdff
		    	    case 'u': scanu (lword); break;
    3578:	0006b403 	andeq	fp, r6, r3, lsl #8
			while (isspace (*buf)) buf++;
    357c:	04071a20 	streq	r1, [r7], #-2592	; 0xfffff5e0
    3580:	27010000 	strcs	r0, [r1, -r0]
	while (*fmt != '\0') {
    3584:	d003050d 	andle	r0, r3, sp, lsl #10
		if (*fmt++ != '%')
    3588:	1a200006 	bne	8035a8 <__ccfg+0x7e3600>
		switch (*fmt++) {
    358c:	0000041c 	andeq	r0, r0, ip, lsl r4
    3590:	05073001 	streq	r3, [r7, #-1]
    3594:	0006b003 	andeq	fp, r6, r3
    3598:	042a1a20 	strteq	r1, [sl], #-2592	; 0xfffff5e0
    359c:	31010000 	mrscc	r0, (UNDEF: 1)
    35a0:	b203050f 	andlt	r0, r3, #62914560	; 0x3c00000
    35a4:	1a200006 	bne	8035c4 <__ccfg+0x7e361c>
}
    35a8:	00000438 	andeq	r0, r0, r8, lsr r4
		switch (*fmt++) {
    35ac:	05193101 	ldreq	r3, [r9, #-257]	; 0xfffffeff
    35b0:	0006bc03 	andeq	fp, r6, r3, lsl #24
    35b4:	01290f20 			; <UNDEFINED> instruction: 0x01290f20
    35b8:	05270000 	streq	r0, [r7, #-0]!
			while (isspace (*buf)) buf++;
    35bc:	94180000 	ldrls	r0, [r8], #-0
    35c0:	03000000 	movweq	r0, #0
    35c4:	13a31b00 			; <UNDEFINED> instruction: 0x13a31b00
    35c8:	36010000 	strcc	r0, [r1], -r0
    35cc:	0005170a 	andeq	r1, r5, sl, lsl #14
    35d0:	03050100 	movweq	r0, #20736	; 0x5100
			if (*buf == '\0')
    35d4:	200006c0 	andcs	r0, r0, r0, asr #13
			if (*buf != ',') {
    35d8:	0003201a 	andeq	r2, r3, sl, lsl r0
			sap = va_arg (ap, char*);
    35dc:	0c3f0100 	ldfeqs	f0, [pc], #-0	; 35e4 <vscan+0x80>
			nc++;
    35e0:	51510305 	cmppl	r1, r5, lsl #6
			if (*buf != ',') {
    35e4:	2f1a0000 	svccs	0x001a0000
				while (!isspace (*buf) && *buf != ',' &&
    35e8:	01000003 	tsteq	r0, r3
    35ec:	03050d45 	movweq	r0, #23877	; 0x5d45
    35f0:	00000000 	andeq	r0, r0, r0
    35f4:	4901020b 	stmdbmi	r1, {r0, r1, r3, r9}
    35f8:	00057a09 	andeq	r7, r5, r9, lsl #20
    35fc:	14b10d00 	ldrtne	r0, [r1], #3328	; 0xd00
    3600:	4a010000 	bmi	43608 <__ccfg+0x23660>
			while (isspace (*buf)) buf++;
    3604:	0000fb07 	andeq	pc, r0, r7, lsl #22
    3608:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    360c:	01000016 	tsteq	r0, r6, lsl r0
    3610:	00fb074b 	rscseq	r0, fp, fp, asr #14
    3614:	00010000 	andeq	r0, r1, r0
			if (*buf == ',') buf++;
    3618:	00157703 	andseq	r7, r5, r3, lsl #14
    361c:	034c0100 	movteq	r0, #49408	; 0xc100
			*sap = '\0';
    3620:	00000556 	andeq	r0, r0, r6, asr r5
			break;
    3624:	00057a0f 	andeq	r7, r5, pc, lsl #20
		    case 'd': scani (word); break;
    3628:	00059600 	andeq	r9, r5, r0, lsl #12
    362c:	00941800 	addseq	r1, r4, r0, lsl #16
    3630:	00000000 	andeq	r0, r0, r0
    3634:	0015d71c 	andseq	sp, r5, ip, lsl r7
    3638:	114e0100 	mrsne	r0, (UNDEF: 94)
    363c:	00000586 	andeq	r0, r0, r6, lsl #11
    3640:	05900305 	ldreq	r0, [r0, #773]	; 0x305
    3644:	b80f2000 	stmdalt	pc, {sp}	; <UNPREDICTABLE>
    3648:	b8000005 	stmdalt	r0, {r0, r2}
    364c:	18000005 	stmdane	r0, {r0, r2}
    3650:	00000094 	muleq	r0, r4, r0
    3654:	040a0000 	streq	r0, [sl], #-0
    3658:	0000011d 	andeq	r0, r0, sp, lsl r1
    365c:	0014d21d 	andseq	sp, r4, sp, lsl r2
    3660:	02bd0100 	adcseq	r0, sp, #0, 2
    3664:	0005a80f 	andeq	sl, r5, pc, lsl #16
    3668:	98030500 	stmdals	r3, {r8, sl}
    366c:	0f200005 	svceq	0x00200005
    3670:	0000011d 	andeq	r0, r0, sp, lsl r1
    3674:	000005e1 	andeq	r0, r0, r1, ror #11
    3678:	00009418 	andeq	r9, r0, r8, lsl r4
    367c:	1d000000 	stcne	0, cr0, [r0, #-0]
    3680:	00001532 	andeq	r1, r0, r2, lsr r5
    3684:	0e02c201 	cdpeq	2, 0, cr12, cr2, cr1, {0}
    3688:	000005d1 	ldrdeq	r0, [r0], -r1
    368c:	05940305 	ldreq	r0, [r4, #773]	; 0x305
    3690:	801d2000 	andshi	r2, sp, r0
    3694:	01000015 	tsteq	r0, r5, lsl r0
		    case 'u': scanu (word); break;
    3698:	d12602c2 	smlawtle	r6, r2, r2, r0
    369c:	05000005 	streq	r0, [r0, #-5]
    36a0:	00058c03 	andeq	r8, r5, r3, lsl #24
    36a4:	03011e20 	movweq	r1, #7712	; 0x1e20
    36a8:	01000016 	tsteq	r0, r6, lsl r0
    36ac:	0107052f 	tsteq	r7, pc, lsr #10
    36b0:	0000010c 	andeq	r0, r0, ip, lsl #2
    36b4:	00001e20 	andeq	r1, r0, r0, lsr #28
    36b8:	00001e44 	andeq	r1, r0, r4, asr #28
    36bc:	011f9c01 	tsteq	pc, r1, lsl #24
    36c0:	00001566 	andeq	r1, r0, r6, ror #10
    36c4:	06048201 	streq	r8, [r4], -r1, lsl #4
    36c8:	001ce401 	andseq	lr, ip, r1, lsl #8
    36cc:	001e2000 	andseq	r2, lr, r0
    36d0:	0e9c0100 	fmleqe	f0, f4, f0
    36d4:	20000007 	andcs	r0, r0, r7
    36d8:	00001598 	muleq	r0, r8, r5
    36dc:	18048201 	stmdane	r4, {r0, r9, pc}
		    case 'x': scanx (word); break;
    36e0:	0000070e 	andeq	r0, r0, lr, lsl #14
    36e4:	0000084e 	andeq	r0, r0, lr, asr #16
    36e8:	61762221 	cmnvs	r6, r1, lsr #4
    36ec:	8701006c 	strhi	r0, [r1, -ip, rrx]
    36f0:	010c0804 	tsteq	ip, r4, lsl #16
    36f4:	088e0000 	stmeq	lr, {}	; <UNPREDICTABLE>
    36f8:	61230000 			; <UNDEFINED> instruction: 0x61230000
    36fc:	88010070 	stmdahi	r1, {r4, r5, r6}
    3700:	00c10a04 	sbceq	r0, r1, r4, lsl #20
    3704:	91020000 	mrsls	r0, (UNDEF: 2)
    3708:	6362224c 	cmnvs	r2, #76, 4	; 0xc0000004
    370c:	04890100 	streq	r0, [r9], #256	; 0x100
    3710:	0000ef07 	andeq	lr, r0, r7, lsl #30
    3714:	0008cd00 	andeq	ip, r8, r0, lsl #26
    3718:	00762200 	rsbseq	r2, r6, r0, lsl #4
    371c:	07048a01 	streq	r8, [r4, -r1, lsl #20]
    3720:	000000d9 	ldrdeq	r0, [r0], -r9
    3724:	00000901 	andeq	r0, r0, r1, lsl #18
    3728:	00736924 	rsbseq	r6, r3, r4, lsr #18
    372c:	07048b01 	streq	r8, [r4, -r1, lsl #22]
    3730:	000000fb 	strdeq	r0, [r0], -fp
    3734:	00167825 	andseq	r7, r6, r5, lsr #16
    3738:	04b00100 	ldrteq	r0, [r0], #256	; 0x100
    373c:	001db001 	andseq	fp, sp, r1
    3740:	1d702600 	ldclne	6, cr2, [r0, #-0]
    3744:	1d8c0000 	stcne	0, cr0, [ip]
    3748:	06c00000 	strbeq	r0, [r0], r0
    374c:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3750:	049f0100 	ldreq	r0, [pc], #256	; 3758 <vscan+0x1f4>
    3754:	0000ef0a 	andeq	lr, r0, sl, lsl #30
			switch (*fmt++) {
    3758:	00092a00 	andeq	r2, r9, r0, lsl #20
    375c:	68270000 	stmdavs	r7!, {}	; <UNPREDICTABLE>
    3760:	d9000007 	stmdble	r0, {r0, r1, r2}
    3764:	22000006 	andcs	r0, r0, #6
    3768:	a9010064 	stmdbge	r1, {r2, r5, r6}
    376c:	010c0b04 	tsteq	ip, r4, lsl #22
		    	    case 'd': scani (lword); break;
    3770:	093d0000 	ldmdbeq	sp!, {}	; <UNPREDICTABLE>
    3774:	26000000 	strcs	r0, [r0], -r0
    3778:	00001dfc 	strdeq	r1, [r0], -ip
    377c:	00001e0a 	andeq	r1, r0, sl, lsl #28
    3780:	000006f6 	strdeq	r0, [r0], -r6
    3784:	01007322 	tsteq	r0, r2, lsr #6
    3788:	f60b04c6 			; <UNDEFINED> instruction: 0xf60b04c6
    378c:	66000001 	strvs	r0, [r0], -r1
    3790:	00000009 	andeq	r0, r0, r9
    3794:	0010c128 	andseq	ip, r0, r8, lsr #2
    3798:	001d1200 	andseq	r1, sp, r0, lsl #4
    379c:	00079800 	andeq	r9, r7, r0, lsl #16
    37a0:	04d90100 	ldrbeq	r0, [r9], #256	; 0x100
    37a4:	10d42902 	sbcsne	r2, r4, r2, lsl #18
    37a8:	00000000 	andeq	r0, r0, r0
    37ac:	0203040a 	andeq	r0, r3, #167772160	; 0xa000000
    37b0:	4d2a0000 	stcmi	0, cr0, [sl, #-0]
    37b4:	01000016 	tsteq	r0, r6, lsl r0
    37b8:	010d0447 	tsteq	sp, r7, asr #8
    37bc:	000017c8 	andeq	r1, r0, r8, asr #15
    37c0:	000017e0 	andeq	r1, r0, r0, ror #15
    37c4:	07539c01 	ldrbeq	r9, [r3, -r1, lsl #24]
    37c8:	632b0000 			; <UNDEFINED> instruction: 0x632b0000
		    	    case 'x': scanx (lword); break;
    37cc:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    37d0:	0000d919 	andeq	sp, r0, r9, lsl r9
    37d4:	00097900 	andeq	r7, r9, r0, lsl #18
    37d8:	10c12800 	sbcne	r2, r1, r0, lsl #16
    37dc:	17c80000 	strbne	r0, [r8, r0]
    37e0:	07100000 	ldreq	r0, [r0, -r0]
    37e4:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    37e8:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    37ec:	00000010 	andeq	r0, r0, r0, lsl r0
    37f0:	17012c00 	strne	r2, [r1, -r0, lsl #24]
    37f4:	01000015 	tsteq	r0, r5, lsl r0
    37f8:	01060428 	tsteq	r6, r8, lsr #8
    37fc:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3808:	07b49c01 	ldreq	r9, [r4, r1, lsl #24]!
    380c:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    3810:	28010063 	stmdacs	r1, {r0, r1, r5, r6}
    3814:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    3818:	098c0000 	stmibeq	ip, {}	; <UNPREDICTABLE>
    381c:	152d0000 	strne	r0, [sp, #-0]!
    3820:	01000016 	tsteq	r0, r6, lsl r0
    3824:	b8090431 	stmdalt	r9, {r0, r4, r5, sl}
    3828:	aa000005 	bge	3844 <vscan+0x2e0>
    382c:	22000009 	andcs	r0, r0, #9
    3830:	0078616d 	rsbseq	r6, r8, sp, ror #2
    3834:	08043201 	stmdaeq	r4, {r0, r9, ip, sp}
    3838:	0000011d 	andeq	r0, r0, sp, lsl r1
		    	    case 'd': scani (lword); break;
    383c:	000009c8 	andeq	r0, r0, r8, asr #19
    3840:	00152d2d 	andseq	r2, r5, sp, lsr #26
    3844:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    3848:	00011d0d 	andeq	r1, r1, sp, lsl #26
    384c:	0009e600 	andeq	lr, r9, r0, lsl #12
    3850:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3854:	00001608 	andeq	r1, r0, r8, lsl #12
		    	    case 'u': scanu (lword); break;
    3858:	06041501 	streq	r1, [r4], -r1, lsl #10
    385c:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    3868:	e39c0100 	orrs	r0, ip, #0, 2
    386c:	2b000007 	blcs	3890 <vscan+0x32c>
    3870:	006e696d 	rsbeq	r6, lr, sp, ror #18
    3874:	1c041501 	cfstr32ne	mvfx1, [r4], {1}
    3878:	00000129 	andeq	r0, r0, r9, lsr #2
    387c:	00000a0f 	andeq	r0, r0, pc, lsl #20
    3880:	f6011f00 			; <UNDEFINED> instruction: 0xf6011f00
    3884:	01000015 	tsteq	r0, r5, lsl r0
    3888:	01060402 	tsteq	r6, r2, lsl #8
    388c:	00001ccc 	andeq	r1, r0, ip, asr #25
    3890:	00001ce4 	andeq	r1, r0, r4, ror #25
    3894:	080e9c01 	stmdaeq	lr, {r0, sl, fp, ip, pc}
    3898:	70200000 	eorvc	r0, r0, r0
    389c:	01000000 	mrseq	r0, (UNDEF: 0)
		    	    case 'x': scanx (lword); break;
    38a0:	d9190402 	ldmdble	r9, {r1, sl}
    38a4:	22000000 	andcs	r0, r0, #0
			if ((c = *buf++) == '\0')
    38a8:	0000000a 	andeq	r0, r0, sl
    38ac:	14a4012c 	strtne	r0, [r4], #300	; 0x12c
			sap = va_arg (ap, char*);
    38b0:	a3010000 	movwge	r0, #4096	; 0x1000
			nc++;
    38b4:	b8010803 	stmdalt	r1, {r0, r1, fp}
			break;
    38b8:	f0000005 			; <UNDEFINED> instruction: 0xf0000005
			while (isspace (*buf)) buf++;
    38bc:	9800001b 	stmdals	r0, {r0, r1, r3, r4}
    38c0:	0100001c 	tsteq	r0, ip, lsl r0
    38c4:	0008809c 	muleq	r8, ip, r0
						*sap++ = *buf++;
    38c8:	1d832000 	stcne	0, cr2, [r3]
    38cc:	a3010000 	movwge	r0, #4096	; 0x1000
			while (isspace (*buf)) buf++;
    38d0:	00d91a03 	sbcseq	r1, r9, r3, lsl #20
    38d4:	0a350000 	beq	d438dc <__ccfg+0xd23934>
    38d8:	152d0000 	strne	r0, [sp, #-0]!
		return 0;
    38dc:	01000016 	tsteq	r0, r6, lsl r0
    38e0:	b80903ab 	stmdalt	r9, {r0, r1, r3, r5, r7, r8, r9}
		    case 'x': scanx (word); break;
    38e4:	48000005 	stmdami	r0, {r0, r2}
    38e8:	2200000a 	andcs	r0, r0, #10
		    	    case 'x': scanx (lword); break;
    38ec:	01006363 	tsteq	r0, r3, ror #6
    38f0:	b81103ab 	ldmdalt	r1, {r0, r1, r3, r5, r7, r8, r9}
    38f4:	7c000005 	stcvc	0, cr0, [r0], {5}
    38f8:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    38fc:	00001587 	andeq	r1, r0, r7, lsl #11
    3900:	1503ab01 	strne	sl, [r3, #-2817]	; 0xfffff4ff
    3904:	0000011d 	andeq	r0, r0, sp, lsl r1
    3908:	00000aa5 	andeq	r0, r0, r5, lsr #21
    390c:	001d822d 	andseq	r8, sp, sp, lsr #4
    3910:	03af0100 			; <UNDEFINED> instruction: 0x03af0100
    3914:	00011d08 	andeq	r1, r1, r8, lsl #26
    3918:	000ab800 	andeq	fp, sl, r0, lsl #16
    391c:	012e0000 			; <UNDEFINED> instruction: 0x012e0000
    3920:	0000166e 	andeq	r1, r0, lr, ror #12
    3924:	06037c01 	streq	r7, [r3], -r1, lsl #24
    3928:	089d0101 	ldmeq	sp, {r0, r8}
    392c:	632f0000 			; <UNDEFINED> instruction: 0x632f0000
    3930:	7c010068 	stcvc	0, cr0, [r1], {104}	; 0x68
    3934:	05b81803 	ldreq	r1, [r8, #2051]!	; 0x803
    3938:	2a000000 	bcs	3940 <NOROM_AONBatMonTemperatureGetDegC+0x24>
    393c:	000014b7 			; <UNDEFINED> instruction: 0x000014b7
    3940:	0d034a01 	vstreq	s8, [r3, #-4]
    3944:	00174801 	andseq	r4, r7, r1, lsl #16
    3948:	0017c800 	andseq	ip, r7, r0, lsl #16
    394c:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    3950:	2b000008 	blcs	3978 <NOROM_AONRTCCurrent64BitValueGet+0xc>
    3954:	01006863 	tsteq	r0, r3, ror #16
    3958:	b81b034a 	ldmdalt	fp, {r1, r3, r6, r8, r9}
    395c:	e2000005 	and	r0, r0, #5
    3960:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    3964:	00001615 	andeq	r1, r0, r5, lsl r6
    3968:	09035701 	stmdbeq	r3, {r0, r8, r9, sl, ip, lr}
    396c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3970:	00000b00 	andeq	r0, r0, r0, lsl #22
    3974:	00636322 	rsbeq	r6, r3, r2, lsr #6
    3978:	11035701 	tstne	r3, r1, lsl #14
    397c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3980:	00000b41 	andeq	r0, r0, r1, asr #22
    3984:	ed013000 	stc	0, cr3, [r1, #-0]
    3988:	01000014 	tsteq	r0, r4, lsl r0
    398c:	080602f0 	stmdaeq	r6, {r4, r5, r6, r7, r9}
    3990:	5800001b 	stmdapl	r0, {r0, r1, r3, r4}
    3994:	0100001b 	tsteq	r0, fp, lsl r0
    3998:	0009119c 	muleq	r9, ip, r1
    399c:	15412d00 	strbne	r2, [r1, #-3328]	; 0xfffff300
    39a0:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    39a4:	011d0802 	tsteq	sp, r2, lsl #16
    39a8:	0b750000 	bleq	1d439b0 <__ccfg+0x1d23a08>
    39ac:	31000000 	mrscc	r0, (UNDEF: 0)
    39b0:	006f6901 	rsbeq	r6, pc, r1, lsl #18
    39b4:	06027901 	streq	r7, [r2], -r1, lsl #18
    39b8:	0000ef01 	andeq	lr, r0, r1, lsl #30
    39bc:	001a6c00 	andseq	r6, sl, r0, lsl #24
    39c0:	001b0800 	andseq	r0, fp, r0, lsl #16
    39c4:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    39c8:	20000009 	andcs	r0, r0, r9
    39cc:	0000158d 	andeq	r1, r0, sp, lsl #11
    39d0:	0f027901 	svceq	0x00027901
    39d4:	000000d9 	ldrdeq	r0, [r0], -r9
    39d8:	00000b93 	muleq	r0, r3, fp
    39dc:	7665642b 	strbtvc	r6, [r5], -fp, lsr #8
    39e0:	02790100 	rsbseq	r0, r9, #0, 2
    39e4:	0000d91b 	andeq	sp, r0, fp, lsl r9
    39e8:	000bb100 	andeq	fp, fp, r0, lsl #2
    39ec:	115f2000 	cmpne	pc, r0
    39f0:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    39f4:	00d92502 	sbcseq	r2, r9, r2, lsl #10
    39f8:	0bcf0000 	bleq	ff3c3a00 <_estack+0xdf3bea00>
    39fc:	622b0000 	eorvs	r0, fp, #0
    3a00:	01006675 	tsteq	r0, r5, ror r6
    3a04:	f6360279 			; <UNDEFINED> instruction: 0xf6360279
    3a08:	ed000001 	stc	0, cr0, [r0, #-4]
    3a0c:	2b00000b 	blcs	3a40 <NOROM_OSCHF_AttemptToSwitchToXosc+0xc>
    3a10:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3a14:	40027901 	andmi	r7, r2, r1, lsl #18
    3a18:	000000d9 	ldrdeq	r0, [r0], -r9
    3a1c:	00000c0b 	andeq	r0, r0, fp, lsl #24
    3a20:	74657222 	strbtvc	r7, [r5], #-546	; 0xfffffdde
    3a24:	027b0100 	rsbseq	r0, fp, #0, 2
    3a28:	0000ef07 	andeq	lr, r0, r7, lsl #30
    3a2c:	000c2b00 	andeq	r2, ip, r0, lsl #22
    3a30:	011f0000 	tsteq	pc, r0
    3a34:	00001554 	andeq	r1, r0, r4, asr r5
    3a38:	06026901 	streq	r6, [r2], -r1, lsl #18
    3a3c:	001a4801 	andseq	r4, sl, r1, lsl #16
    3a40:	001a6c00 	andseq	r6, sl, r0, lsl #24
    3a44:	cf9c0100 	svcgt	0x009c0100
    3a48:	2b000009 	blcs	3a74 <NOROM_OSCHF_AttemptToSwitchToXosc+0x40>
    3a4c:	01006672 	tsteq	r0, r2, ror r6
    3a50:	541e0269 	ldrpl	r0, [lr], #-617	; 0xfffffd97
    3a54:	5f000004 	svcpl	0x00000004
    3a58:	2b00000c 	blcs	3a90 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>
    3a5c:	00636f6c 	rsbeq	r6, r3, ip, ror #30
    3a60:	26026901 	strcs	r6, [r2], -r1, lsl #18
    3a64:	0000008d 	andeq	r0, r0, sp, lsl #1
    3a68:	00000c88 	andeq	r0, r0, r8, lsl #25
    3a6c:	7f011f00 	svcvc	0x00011f00
    3a70:	01000016 	tsteq	r0, r6, lsl r0
    3a74:	0106025f 	tsteq	r6, pc, asr r2
    3a78:	00001a3a 	andeq	r1, r0, sl, lsr sl
    3a7c:	00001a48 	andeq	r1, r0, r8, asr #20
    3a80:	0a169c01 	beq	5aaa8c <__ccfg+0x58aae4>
    3a84:	93200000 	nopls	{0}	; <UNPREDICTABLE>
    3a88:	01000015 	tsteq	r0, r5, lsl r0
    3a8c:	f619025f 			; <UNDEFINED> instruction: 0xf619025f
    3a90:	b1000001 	tstlt	r0, r1
    3a94:	3200000c 	andcc	r0, r0, #12
    3a98:	5f010063 	svcpl	0x00010063
    3a9c:	01fc2402 	mvnseq	r2, r2, lsl #8
    3aa0:	51010000 	mrspl	r0, (UNDEF: 1)
    3aa4:	01006e2b 	tsteq	r0, fp, lsr #28
    3aa8:	8d2b025f 	sfmhi	f0, 4, [fp, #-380]!	; 0xfffffe84
    3aac:	cf000000 	svcgt	0x00000000
    3ab0:	0000000c 	andeq	r0, r0, ip
    3ab4:	1641011f 			; <UNDEFINED> instruction: 0x1641011f
    3ab8:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3abc:	26010602 	strcs	r0, [r1], -r2, lsl #12
    3ac0:	3a00001a 	bcc	3b30 <NOROM_RFCSynthPowerDown+0x40>
    3ac4:	0100001a 	tsteq	r0, sl, lsl r0
    3ac8:	000a619c 	muleq	sl, ip, r1
    3acc:	15932000 	ldrne	r2, [r3]
    3ad0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3ad4:	01f61902 	mvnseq	r1, r2, lsl #18
    3ad8:	0ce20000 	stcleq	0, cr0, [r2]
    3adc:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3ae0:	01006372 	tsteq	r0, r2, ror r3
    3ae4:	0e2b0259 	mcreq	2, 1, r0, cr11, cr9, {2}
    3ae8:	f5000007 			; <UNDEFINED> instruction: 0xf5000007
    3aec:	2b00000c 	blcs	3b24 <NOROM_RFCSynthPowerDown+0x34>
    3af0:	5901006e 	stmdbpl	r1, {r1, r2, r3, r5, r6}
    3af4:	008d3402 	addeq	r3, sp, r2, lsl #8
    3af8:	0d130000 	ldceq	0, cr0, [r3, #-0]
    3afc:	1f000000 	svcne	0x00000000
    3b00:	0016b801 	andseq	fp, r6, r1, lsl #16
    3b04:	02540100 	subseq	r0, r4, #0, 2
    3b08:	00000106 	andeq	r0, r0, r6, lsl #2
    3b0c:	00000000 	andeq	r0, r0, r0
    3b10:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b14:	00000aa6 	andeq	r0, r0, r6, lsr #21
    3b18:	0100642b 	tsteq	r0, fp, lsr #8
    3b1c:	f61a0254 			; <UNDEFINED> instruction: 0xf61a0254
    3b20:	26000001 	strcs	r0, [r0], -r1
    3b24:	2b00000d 	blcs	3b60 <NOROM_RFCRfTrimRead+0x24>
    3b28:	54010073 	strpl	r0, [r1], #-115	; 0xffffff8d
    3b2c:	070e2902 	streq	r2, [lr, -r2, lsl #18]
    3b30:	0d390000 	ldceq	0, cr0, [r9, #-0]
    3b34:	6e320000 	cdpvs	0, 3, cr0, cr2, cr0, {0}
    3b38:	02540100 	subseq	r0, r4, #0, 2
    3b3c:	00008d30 	andeq	r8, r0, r0, lsr sp
    3b40:	00520100 	subseq	r0, r2, r0, lsl #2
    3b44:	156b011f 	strbne	r0, [fp, #-287]!	; 0xfffffee1
    3b48:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    3b4c:	00010602 	andeq	r0, r1, r2, lsl #12
    3b50:	00000000 	andeq	r0, r0, r0
    3b54:	01000000 	mrseq	r0, (UNDEF: 0)
    3b58:	000ade9c 	muleq	sl, ip, lr
    3b5c:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3b60:	19024e01 	stmdbne	r2, {r0, r9, sl, fp, lr}
    3b64:	000001f6 	strdeq	r0, [r0], -r6
    3b68:	00000d4c 	andeq	r0, r0, ip, asr #26
    3b6c:	0100732b 	tsteq	r0, fp, lsr #6
    3b70:	0e28024e 	cdpeq	2, 2, cr0, cr8, cr14, {2}
    3b74:	6a000007 	bvs	3b98 <NOROM_RFCRfTrimRead+0x5c>
    3b78:	0000000d 	andeq	r0, r0, sp
    3b7c:	1693011f 			; <UNDEFINED> instruction: 0x1693011f
    3b80:	47010000 	strmi	r0, [r1, -r0]
    3b84:	0a010602 	beq	45394 <__ccfg+0x253ec>
    3b88:	2600001a 			; <UNDEFINED> instruction: 0x2600001a
    3b8c:	0100001a 	tsteq	r0, sl, lsl r0
    3b90:	000b259c 	muleq	fp, ip, r5
    3b94:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3b98:	1a024701 	bne	957a4 <__ccfg+0x757fc>
    3b9c:	000001f6 	strdeq	r0, [r0], -r6
    3ba0:	00000d7d 	andeq	r0, r0, sp, ror sp
    3ba4:	0100732b 	tsteq	r0, fp, lsr #6
    3ba8:	0e290247 	cdpeq	2, 2, cr0, cr9, cr7, {2}
    3bac:	9b000007 	blls	3bd0 <NOROM_RFCRfTrimRead+0x94>
    3bb0:	2b00000d 	blcs	3bec <NOROM_RFCRfTrimRead+0xb0>
    3bb4:	4701006e 	strmi	r0, [r1, -lr, rrx]
    3bb8:	008d3002 	addeq	r3, sp, r2
    3bbc:	0dae0000 	stceq	0, cr0, [lr]
    3bc0:	1f000000 	svcne	0x00000000
    3bc4:	00149801 	andseq	r9, r4, r1, lsl #16
    3bc8:	02420100 	subeq	r0, r2, #0, 2
    3bcc:	19fa0106 	ldmibne	sl!, {r1, r2, r8}^
    3bd0:	1a0a0000 	bne	283bd8 <__ccfg+0x263c30>
    3bd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3bd8:	00000b5d 	andeq	r0, r0, sp, asr fp
    3bdc:	0100642b 	tsteq	r0, fp, lsr #8
    3be0:	f6190242 			; <UNDEFINED> instruction: 0xf6190242
    3be4:	c1000001 	tstgt	r0, r1
    3be8:	2b00000d 	blcs	3c24 <NOROM_RFCRfTrimRead+0xe8>
    3bec:	42010073 	andmi	r0, r1, #115	; 0x73
    3bf0:	070e2802 	streq	r2, [lr, -r2, lsl #16]
    3bf4:	0dd40000 	ldcleq	0, cr0, [r4]
    3bf8:	2c000000 	stccs	0, cr0, [r0], {-0}
    3bfc:	00150b01 	andseq	r0, r5, r1, lsl #22
    3c00:	02390100 	eorseq	r0, r9, #0, 2
    3c04:	008d0105 	addeq	r0, sp, r5, lsl #2
    3c08:	19ec0000 	stmibne	ip!, {}^	; <UNPREDICTABLE>
    3c0c:	19fa0000 	ldmibne	sl!, {}^	; <UNPREDICTABLE>
    3c10:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c14:	00000b99 	muleq	r0, r9, fp
    3c18:	0100732b 	tsteq	r0, fp, lsr #6
    3c1c:	0e1e0239 	mrceq	2, 0, r0, cr14, cr9, {1}
    3c20:	f2000007 	vhadd.s8	d0, d0, d7
    3c24:	2200000d 	andcs	r0, r0, #13
    3c28:	3b010069 	blcc	43dd4 <__ccfg+0x23e2c>
    3c2c:	008d0602 	addeq	r0, sp, r2, lsl #12
    3c30:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    3c34:	2c000000 	stccs	0, cr0, [r0], {-0}
    3c38:	00152401 	andseq	r2, r5, r1, lsl #8
    3c3c:	022d0100 	eoreq	r0, sp, #0, 2
    3c40:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    3c4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c50:	00000be6 	andeq	r0, r0, r6, ror #23
    3c54:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    3c58:	022d0100 	eoreq	r0, sp, #0, 2
    3c5c:	0002f118 	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
    3c60:	000e2300 	andeq	r2, lr, r0, lsl #6
    3c64:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3c68:	0e022f01 	cdpeq	15, 0, cr2, cr2, cr1, {0}
    3c6c:	00000416 	andeq	r0, r0, r6, lsl r4
    3c70:	00000e41 	andeq	r0, r0, r1, asr #28
    3c74:	01006322 	tsteq	r0, r2, lsr #6
    3c78:	d9070230 	stmdble	r7, {r4, r5, r9}
    3c7c:	5f000000 	svcpl	0x00000000
    3c80:	0000000e 	andeq	r0, r0, lr
    3c84:	1525012c 	strne	r0, [r5, #-300]!	; 0xfffffed4
    3c88:	1f010000 	svcne	0x00010000
    3c8c:	1d010702 	stcne	7, cr0, [r1, #-8]
    3c90:	c8000001 	stmdagt	r0, {r0}
    3c94:	ec000019 	stc	0, cr0, [r0], {25}
    3c98:	01000019 	tsteq	r0, r9, lsl r0
    3c9c:	000c229c 	muleq	ip, ip, r2
    3ca0:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3ca4:	1f01006e 	svcne	0x0001006e
    3ca8:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    3cac:	0e720000 	cdpeq	0, 7, cr0, cr2, cr0, {0}
    3cb0:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3cb4:	02210100 	eoreq	r0, r1, #0, 2
    3cb8:	0004160e 	andeq	r1, r4, lr, lsl #12
    3cbc:	00500100 	subseq	r0, r0, r0, lsl #2
    3cc0:	1633012c 	ldrtne	r0, [r3], -ip, lsr #2
    3cc4:	13010000 	movwne	r0, #4096	; 0x1000
    3cc8:	f1010902 			; <UNDEFINED> instruction: 0xf1010902
    3ccc:	00000002 	andeq	r0, r0, r2
    3cd0:	00000000 	andeq	r0, r0, r0
    3cd4:	01000000 	mrseq	r0, (UNDEF: 0)
    3cd8:	000c609c 	muleq	ip, ip, r0
    3cdc:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3ce0:	13010064 	movwne	r0, #4196	; 0x1064
    3ce4:	011d1802 	tsteq	sp, r2, lsl #16
    3ce8:	0e9b0000 	cdpeq	0, 9, cr0, cr11, cr0, {0}
    3cec:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3cf0:	02150100 	andseq	r0, r5, #0, 2
    3cf4:	0004160e 	andeq	r1, r4, lr, lsl #12
    3cf8:	000eb900 	andeq	fp, lr, r0, lsl #18
    3cfc:	011f0000 	tsteq	pc, r0
    3d00:	0000168b 	andeq	r1, r0, fp, lsl #13
    3d04:	0601f501 	streq	pc, [r1], -r1, lsl #10
    3d08:	00000001 	andeq	r0, r0, r1
    3d0c:	00000000 	andeq	r0, r0, r0
    3d10:	c99c0100 	ldmibgt	ip, {r8}
    3d14:	2b00000c 	blcs	3d4c <NOROM_RFCRTrim+0xc0>
    3d18:	006e7566 	rsbeq	r7, lr, r6, ror #10
    3d1c:	1701f501 	strne	pc, [r1, -r1, lsl #10]
    3d20:	000002f1 	strdeq	r0, [r0], -r1
    3d24:	00000ed7 	ldrdeq	r0, [r0], -r7
    3d28:	6c657222 	sfmvs	f7, 2, [r5], #-136	; 0xffffff78
    3d2c:	01f90100 	mvnseq	r0, r0, lsl #2
    3d30:	0000cd0a 	andeq	ip, r0, sl, lsl #26
    3d34:	000ef500 	andeq	pc, lr, r0, lsl #10
    3d38:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3d3c:	0e01fa01 	vmlaeq.f32	s30, s2, s2
    3d40:	00000416 	andeq	r0, r0, r6, lsl r4
    3d44:	00000f08 	andeq	r0, r0, r8, lsl #30
    3d48:	01006a22 	tsteq	r0, r2, lsr #20
    3d4c:	161201fa 			; <UNDEFINED> instruction: 0x161201fa
    3d50:	3c000004 	stccc	0, cr0, [r0], {4}
    3d54:	2200000f 	andcs	r0, r0, #15
    3d58:	fa01006b 	blx	43f0c <__ccfg+0x23f64>
    3d5c:	04161601 	ldreq	r1, [r6], #-1537	; 0xfffff9ff
    3d60:	0f5a0000 	svceq	0x005a0000
    3d64:	1f000000 	svcne	0x00000000
    3d68:	0014cd01 	andseq	ip, r4, r1, lsl #26
    3d6c:	01d90100 	bicseq	r0, r9, r0, lsl #2
    3d70:	1ba00106 	blne	fe804190 <_estack+0xde7ff190>
    3d74:	1bf00000 	blne	ffc03d7c <_estack+0xdfbfed7c>
    3d78:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d7c:	00000d0e 	andeq	r0, r0, lr, lsl #26
    3d80:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3d84:	01d90100 	bicseq	r0, r9, r0, lsl #2
    3d88:	00011d12 	andeq	r1, r1, r2, lsl sp
    3d8c:	000f7800 	andeq	r7, pc, r0, lsl #16
    3d90:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3d94:	0e01dd01 	cdpeq	13, 0, cr13, cr1, cr1, {0}
    3d98:	00000416 	andeq	r0, r0, r6, lsl r4
    3d9c:	00000fac 	andeq	r0, r0, ip, lsr #31
    3da0:	01006a24 	tsteq	r0, r4, lsr #20
    3da4:	161201dd 			; <UNDEFINED> instruction: 0x161201dd
    3da8:	00000004 	andeq	r0, r0, r4
    3dac:	0014912a 	andseq	r9, r4, sl, lsr #2
    3db0:	01c40100 	biceq	r0, r4, r0, lsl #2
    3db4:	170c010d 	strne	r0, [ip, -sp, lsl #2]
    3db8:	17480000 	strbne	r0, [r8, -r0]
    3dbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3dc0:	00000d63 	andeq	r0, r0, r3, ror #26
    3dc4:	64697032 	strbtvs	r7, [r9], #-50	; 0xffffffce
    3dc8:	01c40100 	biceq	r0, r4, r0, lsl #2
    3dcc:	00041621 	andeq	r1, r4, r1, lsr #12
    3dd0:	2d500100 	ldfcse	f0, [r0, #-0]
    3dd4:	00001663 	andeq	r1, r0, r3, ror #12
    3dd8:	0801c801 	stmdaeq	r1, {r0, fp, lr, pc}
    3ddc:	0000011d 	andeq	r0, r0, sp, lsl r1
    3de0:	00000fd5 	ldrdeq	r0, [r0], -r5
    3de4:	01006a22 	tsteq	r0, r2, lsr #20
    3de8:	8d0601c9 	stfhis	f0, [r6, #-804]	; 0xfffffcdc
    3dec:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    3df0:	2300000f 	movwcs	r0, #15
    3df4:	ca010069 	bgt	43fa0 <__ccfg+0x23ff8>
    3df8:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3dfc:	52010000 	andpl	r0, r1, #0
    3e00:	3b012c00 	blcc	4ee08 <__ccfg+0x2ee60>
    3e04:	01000016 	tsteq	r0, r6, lsl r0
    3e08:	010601b3 			; <UNDEFINED> instruction: 0x010601b3
    3e0c:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3e18:	0da19c01 	stceq	12, cr9, [r1, #4]!
    3e1c:	702b0000 	eorvc	r0, fp, r0
    3e20:	01006469 	tsteq	r0, r9, ror #8
    3e24:	1d1301b3 	ldfnes	f0, [r3, #-716]	; 0xfffffd34
    3e28:	fb000001 	blx	3e36 <TrimAfterColdResetWakeupFromShutDown+0x56>
    3e2c:	2200000f 	andcs	r0, r0, #15
    3e30:	b5010069 	strlt	r0, [r1, #-105]	; 0xffffff97
    3e34:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3e38:	10190000 	andsne	r0, r9, r0
    3e3c:	33000000 	movwcc	r0, #0
    3e40:	0014b001 	andseq	fp, r4, r1
    3e44:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    3e48:	00000106 	andeq	r0, r0, r6, lsl #2
    3e4c:	00000000 	andeq	r0, r0, r0
    3e50:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e54:	2cbb011f 	ldfcss	f0, [fp], #124	; 0x7c
    3e58:	9a010000 	bls	43e60 <__ccfg+0x23eb8>
    3e5c:	90010601 	andls	r0, r1, r1, lsl #12
    3e60:	c8000019 	stmdagt	r0, {r0, r3, r4}
    3e64:	01000019 	tsteq	r0, r9, lsl r0
    3e68:	000df09c 	muleq	sp, ip, r0
    3e6c:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3e70:	12019a01 	andne	r9, r1, #4096	; 0x1000
    3e74:	000000d9 	ldrdeq	r0, [r0], -r9
    3e78:	00001037 	andeq	r1, r0, r7, lsr r0
    3e7c:	00007020 	andeq	r7, r0, r0, lsr #32
    3e80:	019a0100 	orrseq	r0, sl, r0, lsl #2
    3e84:	0000d91a 	andeq	sp, r0, sl, lsl r9
    3e88:	00104a00 	andseq	r4, r0, r0, lsl #20
    3e8c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3e90:	000016a0 	andeq	r1, r0, r0, lsr #13
    3e94:	07018801 	streq	r8, [r1, -r1, lsl #16]
    3e98:	00011d01 	andeq	r1, r1, r1, lsl #26
    3e9c:	00196c00 	andseq	r6, r9, r0, lsl #24
    3ea0:	00199000 	andseq	r9, r9, r0
    3ea4:	3e9c0100 	fmlcce	f0, f4, f0
    3ea8:	2b00000e 	blcs	3ee8 <NOROM_SetupTrimDevice+0x34>
    3eac:	00646970 	rsbeq	r6, r4, r0, ror r9
    3eb0:	18018801 	stmdane	r1, {r0, fp, pc}
    3eb4:	0000011d 	andeq	r0, r0, sp, lsl r1
    3eb8:	0000105d 	andeq	r1, r0, sp, asr r0
    3ebc:	0074732b 	rsbseq	r7, r4, fp, lsr #6
    3ec0:	22018801 	andcs	r8, r1, #65536	; 0x10000
    3ec4:	000000d9 	ldrdeq	r0, [r0], -r9
    3ec8:	00001086 	andeq	r1, r0, r6, lsl #1
    3ecc:	01006922 	tsteq	r0, r2, lsr #18
    3ed0:	160e018a 	strne	r0, [lr], -sl, lsl #3
    3ed4:	a4000004 	strge	r0, [r0], #-4
    3ed8:	00000010 	andeq	r0, r0, r0, lsl r0
    3edc:	1546011f 	strbne	r0, [r6, #-287]	; 0xfffffee1
    3ee0:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3ee4:	00010601 	andeq	r0, r1, r1, lsl #12
    3ee8:	00000000 	andeq	r0, r0, r0
    3eec:	01000000 	mrseq	r0, (UNDEF: 0)
    3ef0:	000e969c 	muleq	lr, ip, r6
    3ef4:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3ef8:	78010064 	stmdavc	r1, {r2, r5, r6}
    3efc:	011d1b01 	tsteq	sp, r1, lsl #22
    3f00:	10c20000 	sbcne	r0, r2, r0
    3f04:	d8200000 	stmdale	r0!, {}	; <UNPREDICTABLE>
    3f08:	01000015 	tsteq	r0, r5, lsl r0
    3f0c:	1d260178 	stfnes	f0, [r6, #-480]!	; 0xfffffe20
    3f10:	d5000001 	strle	r0, [r0, #-1]
    3f14:	23000010 	movwcs	r0, #16
    3f18:	7c010069 	stcvc	0, cr0, [r1], {105}	; 0x69
    3f1c:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3f20:	50010000 	andpl	r0, r1, r0
    3f24:	01006a22 	tsteq	r0, r2, lsr #20
    3f28:	8d07017d 	stfhis	f0, [r7, #-500]	; 0xfffffe0c
    3f2c:	f3000000 	vhadd.u8	d0, d0, d0
    3f30:	00000010 	andeq	r0, r0, r0, lsl r0
    3f34:	14fe011f 	ldrbtne	r0, [lr], #287	; 0x11f
    3f38:	66010000 	strvs	r0, [r1], -r0
    3f3c:	38010601 	stmdacc	r1, {r0, r9, sl}
    3f40:	6c000019 	stcvs	0, cr0, [r0], {25}
    3f44:	01000019 	tsteq	r0, r9, lsl r0
    3f48:	000edb9c 	muleq	lr, ip, fp
    3f4c:	15d83400 	ldrbne	r3, [r8, #1024]	; 0x400
    3f50:	66010000 	strvs	r0, [r1], -r0
    3f54:	011d1a01 	tsteq	sp, r1, lsl #20
    3f58:	50010000 	andpl	r0, r1, r0
    3f5c:	01006a22 	tsteq	r0, r2, lsr #20
    3f60:	8d06016a 	stfhis	f0, [r6, #-424]	; 0xfffffe58
    3f64:	11000000 	mrsne	r0, (UNDEF: 0)
    3f68:	23000011 	movwcs	r0, #17
    3f6c:	6b010069 	blvs	44118 <__ccfg+0x24170>
    3f70:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3f74:	52010000 	andpl	r0, r1, #0
    3f78:	ec012e00 	stc	14, cr2, [r1], {-0}
    3f7c:	01000015 	tsteq	r0, r5, lsl r0
    3f80:	01060159 	tsteq	r6, r9, asr r1
    3f84:	000f1101 	andeq	r1, pc, r1, lsl #2
    3f88:	15d83500 	ldrbne	r3, [r8, #1280]	; 0x500
    3f8c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    3f90:	011d1701 	tsteq	sp, r1, lsl #14
    3f94:	70350000 	eorsvc	r0, r5, r0
    3f98:	01000000 	mrseq	r0, (UNDEF: 0)
    3f9c:	d9230159 	stmdble	r3!, {r0, r3, r4, r6, r8}
    3fa0:	24000000 	strcs	r0, [r0], #-0
    3fa4:	5d01006a 	stcpl	0, cr0, [r1, #-424]	; 0xfffffe58
    3fa8:	00ef0701 	rsceq	r0, pc, r1, lsl #14
    3fac:	1f000000 	svcne	0x00000000
    3fb0:	00153901 	andseq	r3, r5, r1, lsl #18
    3fb4:	01530100 	cmpeq	r3, r0, lsl #2
    3fb8:	18f00106 	ldmne	r0!, {r1, r2, r8}^
    3fbc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    3fc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3fc4:	00000f3c 	andeq	r0, r0, ip, lsr pc
    3fc8:	00007020 	andeq	r7, r0, r0, lsr #32
    3fcc:	01530100 	cmpeq	r3, r0, lsl #2
    3fd0:	0000d914 	andeq	sp, r0, r4, lsl r9
    3fd4:	00112400 	andseq	r2, r1, r0, lsl #8
    3fd8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3fdc:	000014c3 	andeq	r1, r0, r3, asr #9
    3fe0:	07012c01 	streq	r2, [r1, -r1, lsl #24]
    3fe4:	00011d01 	andeq	r1, r1, r1, lsl #26
    3fe8:	001c9800 	andseq	r9, ip, r0, lsl #16
    3fec:	001ccc00 	andseq	ip, ip, r0, lsl #24
    3ff0:	9e9c0100 	fmllse	f0, f4, f0
    3ff4:	2000000f 	andcs	r0, r0, pc
    3ff8:	0000068a 	andeq	r0, r0, sl, lsl #13
    3ffc:	1a012c01 	bne	4f008 <__ccfg+0x2f060>
    4000:	000002f1 	strdeq	r0, [r0], -r1
    4004:	00001137 	andeq	r1, r0, r7, lsr r1
    4008:	00473620 	subeq	r3, r7, r0, lsr #12
    400c:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    4010:	00011d26 	andeq	r1, r1, r6, lsr #26
    4014:	00115500 	andseq	r5, r1, r0, lsl #10
    4018:	00692300 	rsbeq	r2, r9, r0, lsl #6
    401c:	0e012e01 	cdpeq	14, 0, cr2, cr1, cr1, {0}
    4020:	00000416 	andeq	r0, r0, r6, lsl r4
    4024:	40365001 	eorsmi	r5, r6, r1
    4028:	22000007 	andcs	r0, r0, #7
    402c:	3d01006a 	stccc	0, cr0, [r1, #-424]	; 0xfffffe58
    4030:	04160f01 	ldreq	r0, [r6], #-3841	; 0xfffff0ff
    4034:	11730000 	cmnne	r3, r0
    4038:	00000000 	andeq	r0, r0, r0
    403c:	161b0137 			; <UNDEFINED> instruction: 0x161b0137
    4040:	af010000 	svcge	0x00010000
    4044:	e3010106 	movw	r0, #4358	; 0x1106
    4048:	3800000f 	stmdacc	r0, {r0, r1, r2, r3}
    404c:	006e696d 	rsbeq	r6, lr, sp, ror #18
    4050:	d91aaf01 	ldmdble	sl, {r0, r8, r9, sl, fp, sp, pc}
    4054:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    4058:	00001224 	andeq	r1, r0, r4, lsr #4
    405c:	cd27af01 	stcgt	15, cr10, [r7, #-4]!
    4060:	3a000000 	bcc	4068 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>
    4064:	bd010069 	stclt	0, cr0, [r1, #-420]	; 0xfffffe5c
    4068:	0004160e 	andeq	r1, r4, lr, lsl #12
    406c:	00643a00 	rsbeq	r3, r4, r0, lsl #20
    4070:	d907be01 	stmdble	r7, {r0, r9, sl, fp, ip, sp, pc}
    4074:	3b000000 	blcc	407c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>
    4078:	004b4f4d 	subeq	r4, fp, sp, asr #30
    407c:	01010901 	tsteq	r1, r1, lsl #18
    4080:	53013c00 	movwpl	r3, #7168	; 0x1c00
    4084:	01000016 	tsteq	r0, r6, lsl r0
    4088:	1c0106a7 	stcne	6, cr0, [r1], {167}	; 0xa7
    408c:	22000018 	andcs	r0, r0, #24
    4090:	01000018 	tsteq	r0, r8, lsl r0
    4094:	0010189c 	mulseq	r0, ip, r8
    4098:	00743d00 	rsbseq	r3, r4, r0, lsl #26
    409c:	291fa701 	ldmdbcs	pc, {r0, r8, r9, sl, sp, pc}	; <UNPREDICTABLE>
    40a0:	9c000001 	stcls	0, cr0, [r0], {1}
    40a4:	3d000011 	stccc	0, cr0, [r0, #-68]	; 0xffffffbc
    40a8:	a7010076 	smlsdxge	r1, r6, r0, r0
    40ac:	0000d927 	andeq	sp, r0, r7, lsr #18
    40b0:	0011af00 	andseq	sl, r1, r0, lsl #30
    40b4:	013c0000 	teqeq	ip, r0
    40b8:	000016aa 	andeq	r1, r0, sl, lsr #13
    40bc:	01068f01 	tsteq	r6, r1, lsl #30
	...
    40c8:	104e9c01 	subne	r9, lr, r1, lsl #24
    40cc:	753d0000 	ldrvc	r0, [sp, #-0]!
    40d0:	8f010074 	svchi	0x00010074
    40d4:	0001291d 	andeq	r2, r1, sp, lsl r9
    40d8:	0011c200 	andseq	ip, r1, r0, lsl #4
    40dc:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    40e0:	8d069301 	stchi	3, cr9, [r6, #-4]
    40e4:	e0000000 	and	r0, r0, r0
    40e8:	00000011 	andeq	r0, r0, r1, lsl r0
    40ec:	14d9013c 	ldrbne	r0, [r9], #316	; 0x13c
    40f0:	7f010000 	svcvc	0x00010000
    40f4:	17f00106 	ldrbne	r0, [r0, r6, lsl #2]!
    40f8:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    40fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4100:	00001084 	andeq	r1, r0, r4, lsl #1
    4104:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    4108:	291a7f01 	ldmdbcs	sl, {r0, r8, r9, sl, fp, ip, sp, lr}
    410c:	fe000001 	cdp2	0, 0, cr0, cr0, cr1, {0}
    4110:	3e000011 	mcrcc	0, 0, r0, cr0, cr1, {0}
    4114:	83010069 	movwhi	r0, #4201	; 0x1069
    4118:	00008d06 	andeq	r8, r0, r6, lsl #26
    411c:	00122700 	andseq	r2, r2, r0, lsl #14
    4120:	013f0000 	teqeq	pc, r0
    4124:	000015de 	ldrdeq	r1, [r0], -lr
    4128:	01067b01 	tsteq	r6, r1, lsl #22
    412c:	000017e0 	andeq	r1, r0, r0, ror #15
    4130:	000017f0 	strdeq	r1, [r0], -r0
    4134:	5f409c01 	svcpl	0x00409c01
    4138:	01000015 	tsteq	r0, r5, lsl r0
    413c:	1601145f 			; <UNDEFINED> instruction: 0x1601145f
    4140:	01000004 	tsteq	r0, r4
    4144:	000010c1 	andeq	r1, r0, r1, asr #1
    4148:	64697038 	strbtvs	r7, [r9], #-56	; 0xffffffc8
    414c:	225f0100 	subscs	r0, pc, #0, 2
    4150:	0000011d 	andeq	r0, r0, sp, lsl r1
    4154:	0100693a 	tsteq	r0, sl, lsr r9
    4158:	04161761 	ldreq	r1, [r6], #-1889	; 0xfffff89f
    415c:	41000000 	mrsmi	r0, (UNDEF: 0)
    4160:	000014e4 	andeq	r1, r0, r4, ror #9
    4164:	01029e02 	tsteq	r2, r2, lsl #28
    4168:	0010e201 	andseq	lr, r0, r1, lsl #4
    416c:	10e20300 	rscne	r0, r2, r0, lsl #6
    4170:	9c350000 	ldcls	0, cr0, [r5], #-0
    4174:	02000011 	andeq	r0, r0, #17
    4178:	7313029e 	tstvc	r3, #-536870903	; 0xe0000009
    417c:	00000000 	andeq	r0, r0, r0
    4180:	97020102 	strls	r0, [r2, -r2, lsl #2]
    4184:	4200000c 	andmi	r0, r0, #12
    4188:	00001098 	muleq	r0, r8, r0
	...
    4194:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
    4198:	aa430000 	bge	10c41a0 <__ccfg+0x10a41f8>
    419c:	45000010 	strmi	r0, [r0, #-16]
    41a0:	44000012 	strmi	r0, [r0], #-18	; 0xffffffee
    41a4:	000010b6 	strheq	r1, [r0], -r6
    41a8:	0000126e 	andeq	r1, r0, lr, ror #4
    41ac:	00109845 	andseq	r9, r0, r5, asr #16
	...
    41b8:	145f0100 	ldrbne	r0, [pc], #-256	; 41c0 <NOROM_SetupGetTrimForXoscHfCtl+0x8>
    41bc:	0010aa43 	andseq	sl, r0, r3, asr #20
    41c0:	00128c00 	andseq	r8, r2, r0, lsl #24
    41c4:	10b64600 	adcsne	r4, r6, r0, lsl #12
    41c8:	00000000 	andeq	r0, r0, r0
    41cc:	000f9e42 	andeq	r9, pc, r2, asr #28
    41d0:	00182400 	andseq	r2, r8, r0, lsl #8
    41d4:	0018f000 	andseq	pc, r8, r0
    41d8:	9a9c0100 	bls	fe7045e0 <_estack+0xde6ff5e0>
    41dc:	43000011 	movwmi	r0, #17
    41e0:	00000fad 	andeq	r0, r0, sp, lsr #31
    41e4:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    41e8:	000fb943 	andeq	fp, pc, r3, asr #18
    41ec:	0012b200 	andseq	fp, r2, r0, lsl #4
    41f0:	0fc54600 	svceq	0x00c54600
    41f4:	cf460000 	svcgt	0x00460000
    41f8:	4700000f 	strmi	r0, [r0, -pc]
    41fc:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    4200:	00001832 	andeq	r1, r0, r2, lsr r8
    4204:	00000728 	andeq	r0, r0, r8, lsr #14
    4208:	2906af01 	stmdbcs	r6, {r0, r8, r9, sl, fp, sp, pc}
    420c:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    4210:	000fad43 	andeq	sl, pc, r3, asr #26
    4214:	0012c500 	andseq	ip, r2, r0, lsl #10
    4218:	07283600 	streq	r3, [r8, -r0, lsl #12]!
    421c:	c5440000 	strbgt	r0, [r4, #-0]
    4220:	ee00000f 	cdp	0, 0, cr0, cr0, cr15, {0}
    4224:	46000012 			; <UNDEFINED> instruction: 0x46000012
    4228:	00000fcf 	andeq	r0, r0, pc, asr #31
    422c:	000fd948 	andeq	sp, pc, r8, asr #18
    4230:	0018ce00 	andseq	ip, r8, r0, lsl #28
    4234:	00000000 	andeq	r0, r0, r0
    4238:	000edb42 	andeq	sp, lr, r2, asr #22
    423c:	00190400 	andseq	r0, r9, r0, lsl #8
    4240:	00193800 	andseq	r3, r9, r0, lsl #16
    4244:	ee9c0100 	fmle	f0, f4, f0
    4248:	43000011 	movwmi	r0, #17
    424c:	00000eeb 	andeq	r0, r0, fp, ror #29
    4250:	0000130c 	andeq	r1, r0, ip, lsl #6
    4254:	000ef843 	andeq	pc, lr, r3, asr #16
    4258:	00132a00 	andseq	r2, r3, r0, lsl #20
    425c:	0f054600 	svceq	0x00054600
    4260:	db490000 	blle	1244268 <__ccfg+0x12242c0>
    4264:	1600000e 	strne	r0, [r0], -lr
    4268:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
    426c:	01000019 	tsteq	r0, r9, lsl r0
    4270:	43060159 	movwmi	r0, #24921	; 0x6159
    4274:	00000eeb 	andeq	r0, r0, fp, ror #29
    4278:	00001348 	andeq	r1, r0, r8, asr #6
    427c:	000ef843 	andeq	pc, lr, r3, asr #16
    4280:	00135b00 	andseq	r5, r3, r0, lsl #22
    4284:	0f054600 	svceq	0x00054600
    4288:	00000000 	andeq	r0, r0, r0
    428c:	0008804a 	andeq	r8, r8, sl, asr #32
    4290:	001b5800 	andseq	r5, fp, r0, lsl #16
    4294:	001ba000 	andseq	sl, fp, r0
    4298:	439c0100 	orrsmi	r0, ip, #0, 2
    429c:	00000890 	muleq	r0, r0, r8
    42a0:	0000136e 	andeq	r1, r0, lr, ror #6
    42a4:	00088049 	andeq	r8, r8, r9, asr #32
    42a8:	001b6400 	andseq	r6, fp, r0, lsl #8
    42ac:	001b6c00 	andseq	r6, fp, r0, lsl #24
    42b0:	037c0100 	cmneq	ip, #0, 2
    42b4:	08904306 	ldmeq	r0, {r1, r2, r8, r9, lr}
    42b8:	138c0000 	orrne	r0, ip, #0
    42bc:	00000000 	andeq	r0, r0, r0
    42c0:	00133300 	andseq	r3, r3, r0, lsl #6
    42c4:	61000300 	mrsvs	r0, LR_irq
    42c8:	0400000e 	streq	r0, [r0], #-14
    42cc:	0000a301 	andeq	sl, r0, r1, lsl #6
    42d0:	17240c00 	strne	r0, [r4, -r0, lsl #24]!
    42d4:	0dec0000 	stcleq	0, cr0, [ip]
    42d8:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    42dc:	00000000 	andeq	r0, r0, r0
    42e0:	31b80000 			; <UNDEFINED> instruction: 0x31b80000
    42e4:	01020000 	mrseq	r0, (UNDEF: 2)
    42e8:	000c4d06 	andeq	r4, ip, r6, lsl #26
    42ec:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    42f0:	00000a5b 	andeq	r0, r0, fp, asr sl
    42f4:	ed050402 	cfstrs	mvf0, [r5, #-8]
    42f8:	02000007 	andeq	r0, r0, #7
    42fc:	07e80508 	strbeq	r0, [r8, r8, lsl #10]!
    4300:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    4304:	02000029 	andeq	r0, r0, #41	; 0x29
    4308:	004d182e 	subeq	r1, sp, lr, lsr #16
    430c:	01020000 	mrseq	r0, (UNDEF: 2)
    4310:	000c4b08 	andeq	r4, ip, r8, lsl #22
    4314:	2df40300 	ldclcs	3, cr0, [r4]
    4318:	31020000 	mrscc	r0, (UNDEF: 2)
    431c:	00006019 	andeq	r6, r0, r9, lsl r0
    4320:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4324:	00000d48 	andeq	r0, r0, r8, asr #26
    4328:	00299603 	eoreq	r9, r9, r3, lsl #12
    432c:	19340200 	ldmdbne	r4!, {r9}
    4330:	00000073 	andeq	r0, r0, r3, ror r0
    4334:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    4338:	02000004 	andeq	r0, r0, #4
    433c:	04180708 	ldreq	r0, [r8], #-1800	; 0xfffff8f8
    4340:	04040000 	streq	r0, [r4], #-0
    4344:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4348:	07040200 	streq	r0, [r4, -r0, lsl #4]
    434c:	00000422 	andeq	r0, r0, r2, lsr #8
    4350:	00050e03 	andeq	r0, r5, r3, lsl #28
    4354:	1b280300 	blne	a04f5c <__ccfg+0x9e4fb4>
    4358:	0000009b 	muleq	r0, fp, r0
    435c:	000b8005 	andeq	r8, fp, r5
    4360:	000d0400 	andeq	r0, sp, r0, lsl #8
    4364:	000000b3 	strheq	r0, [r0], -r3
    4368:	00085d06 	andeq	r5, r8, r6, lsl #26
    436c:	0000b300 	andeq	fp, r0, r0, lsl #6
    4370:	00010000 	andeq	r0, r1, r0
    4374:	82030407 	andhi	r0, r3, #117440512	; 0x7000000
    4378:	0300000b 	movweq	r0, #11
    437c:	008f1863 	addeq	r1, pc, r3, ror #16
    4380:	0a030000 	beq	c4388 <__ccfg+0xa43e0>
    4384:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4388:	00411226 	subeq	r1, r1, r6, lsr #4
    438c:	dd030000 	stcle	0, cr0, [r3, #-0]
    4390:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    4394:	00541227 	subseq	r1, r4, r7, lsr #4
    4398:	cd080000 	stcgt	0, cr0, [r8, #-0]
    439c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    43a0:	000000cd 	andeq	r0, r0, sp, asr #1
    43a4:	001da403 	andseq	sl, sp, r3, lsl #8
    43a8:	122b0400 	eorne	r0, fp, #0, 8
    43ac:	00000041 	andeq	r0, r0, r1, asr #32
    43b0:	0000e309 	andeq	lr, r0, r9, lsl #6
    43b4:	00e30800 	rsceq	r0, r3, r0, lsl #16
    43b8:	2f030000 	svccs	0x00030000
    43bc:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    43c0:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    43c4:	f9080000 			; <UNDEFINED> instruction: 0xf9080000
    43c8:	03000000 	movweq	r0, #0
    43cc:	00000636 	andeq	r0, r0, r6, lsr r6
    43d0:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    43d4:	03000000 	movweq	r0, #0
    43d8:	00000ba4 	andeq	r0, r0, r4, lsr #23
    43dc:	22102e04 	andscs	r2, r0, #4, 28	; 0x40
    43e0:	0a000001 	beq	43ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc>
    43e4:	0000cd04 	andeq	ip, r0, r4, lsl #26
    43e8:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
    43ec:	01b60932 			; <UNDEFINED> instruction: 0x01b60932
    43f0:	2b0c0000 	blcs	3043f8 <__ccfg+0x2e4450>
    43f4:	04000000 	streq	r0, [r0], #-0
    43f8:	00e30734 	rsceq	r0, r3, r4, lsr r7
    43fc:	01010000 	mrseq	r0, (UNDEF: 1)
    4400:	3c0c0007 	stccc	0, cr0, [ip], {7}
    4404:	04000006 	streq	r0, [r0], #-6
    4408:	00e30335 	rsceq	r0, r3, r5, lsr r3
    440c:	01010000 	mrseq	r0, (UNDEF: 1)
    4410:	de0c0006 	cdple	0, 0, cr0, cr12, cr6, {0}
    4414:	04000002 	streq	r0, [r0], #-2
    4418:	00e30336 	rsceq	r0, r3, r6, lsr r3
    441c:	01010000 	mrseq	r0, (UNDEF: 1)
    4420:	a70c0005 	strge	r0, [ip, -r5]
    4424:	04000006 	streq	r0, [r0], #-6
    4428:	00e30337 	rsceq	r0, r3, r7, lsr r3
    442c:	01010000 	mrseq	r0, (UNDEF: 1)
    4430:	8f0c0004 	svchi	0x000c0004
    4434:	0400000a 	streq	r0, [r0], #-10
    4438:	00e30338 	rsceq	r0, r3, r8, lsr r3
    443c:	04010000 	streq	r0, [r1], #-0
    4440:	4b0d0000 	blmi	344448 <__ccfg+0x3244a0>
    4444:	04000006 	streq	r0, [r0], #-6
    4448:	00e3073a 	rsceq	r0, r3, sl, lsr r7
    444c:	0d010000 	stceq	0, cr0, [r1, #-0]
    4450:	000008eb 	andeq	r0, r0, fp, ror #17
    4454:	e3033c04 	movw	r3, #15364	; 0x3c04
    4458:	02000000 	andeq	r0, r0, #0
    445c:	000f1c0d 	andeq	r1, pc, sp, lsl #24
    4460:	033d0400 	teqeq	sp, #0, 8
    4464:	000000e3 	andeq	r0, r0, r3, ror #1
    4468:	09030d03 	stmdbeq	r3, {r0, r1, r8, sl, fp}
    446c:	3f040000 	svccc	0x00040000
    4470:	0000f908 	andeq	pc, r0, r8, lsl #18
    4474:	03000400 	movweq	r0, #1024	; 0x400
    4478:	00000314 	andeq	r0, r0, r4, lsl r3
    447c:	28034104 	stmdacs	r3, {r2, r8, lr}
    4480:	09000001 	stmdbeq	r0, {r0}
    4484:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    4488:	0006ae0e 	andeq	sl, r6, lr, lsl #28
    448c:	1a430400 	bne	10c5494 <__ccfg+0x10a54ec>
    4490:	000001c2 	andeq	r0, r0, r2, asr #3
    4494:	970e0101 	strls	r0, [lr, -r1, lsl #2]
    4498:	04000001 	streq	r0, [r0], #-1
    449c:	01e30e45 	mvneq	r0, r5, asr #28
    44a0:	01010000 	mrseq	r0, (UNDEF: 1)
    44a4:	01e9040a 	mvneq	r0, sl, lsl #8
    44a8:	01020000 	mrseq	r0, (UNDEF: 2)
    44ac:	000c5408 	andeq	r5, ip, r8, lsl #8
    44b0:	01e90800 	mvneq	r0, r0, lsl #16
    44b4:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    44b8:	04000003 	streq	r0, [r0], #-3
    44bc:	01e31e45 	mvneq	r1, r5, asr #28
    44c0:	01010000 	mrseq	r0, (UNDEF: 1)
    44c4:	8f05080b 	svchi	0x0005080b
    44c8:	00023409 	andeq	r3, r2, r9, lsl #8
    44cc:	0cba0d00 	ldceq	13, cr0, [sl]
    44d0:	90050000 	andls	r0, r5, r0
    44d4:	0000670b 	andeq	r6, r0, fp, lsl #14
    44d8:	570d0000 	strpl	r0, [sp, -r0]
    44dc:	05000010 	streq	r0, [r0, #-16]
    44e0:	00cd0891 	smulleq	r0, sp, r1, r8
    44e4:	0d040000 	stceq	0, cr0, [r4, #-0]
    44e8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    44ec:	ef109205 	svc	0x00109205
    44f0:	06000000 	streq	r0, [r0], -r0
    44f4:	0cae0300 	stceq	3, cr0, [lr]
    44f8:	93050000 	movwls	r0, #20480	; 0x5000
    44fc:	00020303 	andeq	r0, r2, r3, lsl #6
    4500:	02340f00 	eorseq	r0, r4, #0, 30
    4504:	024b0000 	subeq	r0, fp, #0
    4508:	00100000 	andseq	r0, r0, r0
    450c:	00092d0e 	andeq	r2, r9, lr, lsl #26
    4510:	0f990500 	svceq	0x00990500
    4514:	00000240 	andeq	r0, r0, r0, asr #4
    4518:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    451c:	000000f4 	strdeq	r0, [r0], -r4
    4520:	9106010b 	tstls	r6, fp, lsl #2
    4524:	00028909 	andeq	r8, r2, r9, lsl #18
    4528:	090a0c00 	stmdbeq	sl, {sl, fp}
    452c:	93060000 	movwls	r0, #24576	; 0x6000
    4530:	0000e307 	andeq	lr, r0, r7, lsl #6
    4534:	01070100 	mrseq	r0, (UNDEF: 23)
    4538:	05bc0c00 	ldreq	r0, [ip, #3072]!	; 0xc00
    453c:	94060000 	strls	r0, [r6], #-0
    4540:	0000e303 	andeq	lr, r0, r3, lsl #6
    4544:	00010100 	andeq	r0, r1, r0, lsl #2
    4548:	9b030000 	blls	c4550 <__ccfg+0xa45a8>
    454c:	0600000a 	streq	r0, [r0], -sl
    4550:	025f0396 	subseq	r0, pc, #1476395010	; 0x58000002
    4554:	89080000 	stmdbhi	r8, {}	; <UNPREDICTABLE>
    4558:	0f000002 	svceq	0x00000002
    455c:	00000295 	muleq	r0, r5, r2
    4560:	000002a5 	andeq	r0, r0, r5, lsr #5
    4564:	9a080010 	bls	2045ac <__ccfg+0x1e4604>
    4568:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    456c:	000003a1 	andeq	r0, r0, r1, lsr #7
    4570:	a5179c06 	ldrge	r9, [r7, #-3078]	; 0xfffff3fa
    4574:	01000002 	tsteq	r0, r2
    4578:	00d90f01 	sbcseq	r0, r9, r1, lsl #30
    457c:	02c30000 	sbceq	r0, r3, #0
    4580:	00100000 	andseq	r0, r0, r0
    4584:	0002b808 	andeq	fp, r2, r8, lsl #16
    4588:	05fe0e00 	ldrbeq	r0, [lr, #3584]!	; 0xe00
    458c:	06070000 	streq	r0, [r7], -r0
    4590:	0002c313 	andeq	ip, r2, r3, lsl r3
    4594:	0e010100 	adfeqs	f0, f1, f0
    4598:	000008cd 	andeq	r0, r0, sp, asr #17
    459c:	f90ec305 			; <UNDEFINED> instruction: 0xf90ec305
    45a0:	01000000 	mrseq	r0, (UNDEF: 0)
    45a4:	0c621101 	stfeqe	f1, [r2], #-4
    45a8:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    45ac:	02f11001 	rscseq	r1, r1, #1
    45b0:	040a0000 	streq	r0, [sl], #-0
    45b4:	000002f7 	strdeq	r0, [r0], -r7
    45b8:	03030112 	movweq	r0, #12562	; 0x3112
    45bc:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    45c0:	00000000 	andeq	r0, r0, r0
    45c4:	0001f00f 	andeq	pc, r1, pc
    45c8:	00030e00 	andeq	r0, r3, r0, lsl #28
    45cc:	08001000 	stmdaeq	r0, {ip}
    45d0:	00000303 	andeq	r0, r0, r3, lsl #6
    45d4:	0009d614 	andeq	sp, r9, r4, lsl r6
    45d8:	017f0800 	cmneq	pc, r0, lsl #16
    45dc:	00030e16 	andeq	r0, r3, r6, lsl lr
    45e0:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    45e4:	0000038d 	andeq	r0, r0, sp, lsl #7
    45e8:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    45ec:	00000105 	andeq	r0, r0, r5, lsl #2
    45f0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    45f4:	55090809 	strpl	r0, [r9, #-2057]	; 0xfffff7f7
    45f8:	0d000003 	stceq	0, cr0, [r0, #-12]
    45fc:	000001c2 	andeq	r0, r0, r2, asr #3
    4600:	cd070f09 	stcgt	15, cr0, [r7, #-36]	; 0xffffffdc
    4604:	00000000 	andeq	r0, r0, r0
    4608:	000c920d 	andeq	r9, ip, sp, lsl #4
    460c:	03100900 	tsteq	r0, #0, 18
    4610:	000000cd 	andeq	r0, r0, sp, asr #1
    4614:	5b030002 	blpl	c4624 <__ccfg+0xa467c>
    4618:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    461c:	03310311 	teqeq	r1, #1140850688	; 0x44000000
    4620:	200b0000 	andcs	r0, fp, r0
    4624:	d3091609 	movwle	r1, #38409	; 0x9609
    4628:	0d000003 	stceq	0, cr0, [r0, #-12]
    462c:	000004a8 	andeq	r0, r0, r8, lsr #9
    4630:	ed081709 	stc	7, cr1, [r8, #-36]	; 0xffffffdc
    4634:	00000003 	andeq	r0, r0, r3
    4638:	0008fb0d 	andeq	pc, r8, sp, lsl #22
    463c:	08180900 	ldmdaeq	r8, {r8, fp}
    4640:	00000408 	andeq	r0, r0, r8, lsl #8
    4644:	0bb60d04 	bleq	fed87a5c <_estack+0xded82a5c>
    4648:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    464c:	00043e08 	andeq	r3, r4, r8, lsl #28
    4650:	8a0d0800 	bhi	346658 <__ccfg+0x3266b0>
    4654:	0900000c 	stmdbeq	r0, {r2, r3}
    4658:	0459081a 	ldrbeq	r0, [r9], #-2074	; 0xfffff7e6
    465c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    4660:	00000952 	andeq	r0, r0, r2, asr r9
    4664:	6f081b09 	svcvs	0x00081b09
    4668:	10000004 	andne	r0, r0, r4
    466c:	000a530d 	andeq	r5, sl, sp, lsl #6
    4670:	081c0900 	ldmdaeq	ip, {r8, fp}
    4674:	0000046f 	andeq	r0, r0, pc, ror #8
    4678:	01a50d14 			; <UNDEFINED> instruction: 0x01a50d14
    467c:	1d090000 	stcne	0, cr0, [r9, #-0]
    4680:	00046f08 	andeq	r6, r4, r8, lsl #30
    4684:	0b0d1800 	bleq	34a68c <__ccfg+0x32a6e4>
    4688:	09000003 	stmdbeq	r0, {r0, r1}
    468c:	0081061e 	addeq	r0, r1, lr, lsl r6
    4690:	001c0000 	andseq	r0, ip, r0
    4694:	00810115 	addeq	r0, r1, r5, lsl r1
    4698:	03ed0000 	mvneq	r0, #0
    469c:	81130000 	tsthi	r3, r0
    46a0:	13000000 	movwne	r0, #0
    46a4:	00000081 	andeq	r0, r0, r1, lsl #1
    46a8:	0000b513 	andeq	fp, r0, r3, lsl r5
    46ac:	040a0000 	streq	r0, [sl], #-0
    46b0:	000003d3 	ldrdeq	r0, [r0], -r3
    46b4:	00810115 	addeq	r0, r1, r5, lsl r1
    46b8:	04080000 	streq	r0, [r8], #-0
    46bc:	81130000 	tsthi	r3, r0
    46c0:	13000000 	movwne	r0, #0
    46c4:	00000081 	andeq	r0, r0, r1, lsl #1
    46c8:	f3040a00 	vpmax.u8	d0, d4, d0
    46cc:	15000003 	strne	r0, [r0, #-3]
    46d0:	00008101 	andeq	r8, r0, r1, lsl #2
    46d4:	00043200 	andeq	r3, r4, r0, lsl #4
    46d8:	00811300 	addeq	r1, r1, r0, lsl #6
    46dc:	16130000 	ldrne	r0, [r3], -r0
    46e0:	13000001 	movwne	r0, #1
    46e4:	00000081 	andeq	r0, r0, r1, lsl #1
    46e8:	00043213 	andeq	r3, r4, r3, lsl r2
    46ec:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    46f0:	0a000000 	beq	46f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    46f4:	00008104 	andeq	r8, r0, r4, lsl #2
    46f8:	55040a00 	strpl	r0, [r4, #-2560]	; 0xfffff600
    46fc:	0a000003 	beq	4710 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e0>
    4700:	00040e04 	andeq	r0, r4, r4, lsl #28
    4704:	81011500 	tsthi	r1, r0, lsl #10
    4708:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    470c:	13000004 	movwne	r0, #4
    4710:	00000116 	andeq	r0, r0, r6, lsl r1
    4714:	00043813 	andeq	r3, r4, r3, lsl r8
    4718:	040a0000 	streq	r0, [sl], #-0
    471c:	00000444 	andeq	r0, r0, r4, asr #8
    4720:	00810115 	addeq	r0, r1, r5, lsl r1
    4724:	046f0000 	strbteq	r0, [pc], #-0	; 472c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>
    4728:	16130000 	ldrne	r0, [r3], -r0
    472c:	00000001 	andeq	r0, r0, r1
    4730:	045f040a 	ldrbeq	r0, [pc], #-1034	; 4738 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>
    4734:	17030000 	strne	r0, [r3, -r0]
    4738:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    473c:	0361031f 	cmneq	r1, #2080374784	; 0x7c000000
    4740:	75080000 	strvc	r0, [r8, #-0]
    4744:	16000004 	strne	r0, [r0], -r4
    4748:	000017ad 	andeq	r1, r0, sp, lsr #15
    474c:	08240908 	stmdaeq	r4!, {r3, r8, fp}
    4750:	000004ae 	andeq	r0, r0, lr, lsr #9
    4754:	000ea70d 	andeq	sl, lr, sp, lsl #14
    4758:	18250900 	stmdane	r5!, {r8, fp}
    475c:	000004ae 	andeq	r0, r0, lr, lsr #9
    4760:	16cf0d00 	strbne	r0, [pc], r0, lsl #26
    4764:	26090000 	strcs	r0, [r9], -r0
    4768:	0004ae06 	andeq	sl, r4, r6, lsl #28
    476c:	0a000400 	beq	5774 <patchGenfskRfe+0x4f8>
    4770:	00048604 	andeq	r8, r4, r4, lsl #12
    4774:	17bb0300 	ldrne	r0, [fp, r0, lsl #6]!
    4778:	29090000 	stmdbcs	r9, {}	; <UNPREDICTABLE>
    477c:	0004861e 	andeq	r8, r4, lr, lsl r6
    4780:	18c00300 	stmiane	r0, {r8, r9}^
    4784:	2a090000 	bcs	24478c <__ccfg+0x2247e4>
    4788:	0004861e 	andeq	r8, r4, lr, lsl r6
    478c:	09020b00 	stmdbeq	r2, {r8, r9, fp}
    4790:	0536023f 	ldreq	r0, [r6, #-575]!	; 0xfffffdc1
    4794:	620c0000 	andvs	r0, ip, #0
    4798:	09000018 	stmdbeq	r0, {r3, r4}
    479c:	00cd0940 	sbceq	r0, sp, r0, asr #18
    47a0:	01020000 	mrseq	r0, (UNDEF: 2)
    47a4:	120c000f 	andne	r0, ip, #15
    47a8:	09000019 	stmdbeq	r0, {r0, r3, r4}
    47ac:	00cd0441 	sbceq	r0, sp, r1, asr #8
    47b0:	01020000 	mrseq	r0, (UNDEF: 2)
    47b4:	dd0c000e 	stcle	0, cr0, [ip, #-56]	; 0xffffffc8
    47b8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    47bc:	00cd0442 	sbceq	r0, sp, r2, asr #8
    47c0:	01020000 	mrseq	r0, (UNDEF: 2)
    47c4:	720c000d 	andvc	r0, ip, #13
    47c8:	09000018 	stmdbeq	r0, {r3, r4}
    47cc:	00cd0443 	sbceq	r0, sp, r3, asr #8
    47d0:	07020000 	streq	r0, [r2, -r0]
    47d4:	ce0c0006 	cdpgt	0, 0, cr0, cr12, cr6, {0}
    47d8:	09000018 	stmdbeq	r0, {r3, r4}
    47dc:	00cd0444 	sbceq	r0, sp, r4, asr #8
    47e0:	03020000 	movweq	r0, #8192	; 0x2000
    47e4:	540c0003 	strpl	r0, [ip], #-3
    47e8:	09000018 	stmdbeq	r0, {r3, r4}
    47ec:	00cd0445 	sbceq	r0, sp, r5, asr #8
    47f0:	03020000 	movweq	r0, #8192	; 0x2000
    47f4:	17000000 	strne	r0, [r0, -r0]
    47f8:	093d0902 	ldmdbeq	sp!, {r1, r8, fp}
    47fc:	00000556 	andeq	r0, r0, r6, asr r5
    4800:	0005f318 	andeq	pc, r5, r8, lsl r3	; <UNPREDICTABLE>
    4804:	073e0900 	ldreq	r0, [lr, -r0, lsl #18]!
    4808:	000000cd 	andeq	r0, r0, sp, asr #1
    480c:	09006219 	stmdbeq	r0, {r0, r3, r4, r9, sp, lr}
    4810:	04cc0446 	strbeq	r0, [ip], #1094	; 0x446
    4814:	03000000 	movweq	r0, #0
    4818:	000016d4 	ldrdeq	r1, [r0], -r4
    481c:	36034709 	strcc	r4, [r3], -r9, lsl #14
    4820:	17000005 	strne	r0, [r0, -r5]
    4824:	05500908 	ldrbeq	r0, [r0, #-2312]	; 0xfffff6f8
    4828:	00000584 	andeq	r0, r0, r4, lsl #11
    482c:	0018f418 	andseq	pc, r8, r8, lsl r4	; <UNPREDICTABLE>
    4830:	10510900 	subsne	r0, r1, r0, lsl #18
    4834:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    4838:	00181e18 	andseq	r1, r8, r8, lsl lr
    483c:	0b520900 	bleq	1486c44 <__ccfg+0x1466c9c>
    4840:	00000355 	andeq	r0, r0, r5, asr r3
    4844:	19031600 	stmdbne	r3, {r9, sl, ip}
    4848:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    484c:	05b7084c 	ldreq	r0, [r7, #2124]!	; 0x84c
    4850:	751a0000 	ldrvc	r0, [sl, #-0]
    4854:	07580900 	ldrbeq	r0, [r8, -r0, lsl #18]
    4858:	00000562 	andeq	r0, r0, r2, ror #10
    485c:	18d50d00 	ldmne	r5, {r8, sl, fp}^
    4860:	63090000 	movwvs	r0, #36864	; 0x9000
    4864:	0000cd07 	andeq	ip, r0, r7, lsl #26
    4868:	b50d0800 	strlt	r0, [sp, #-2048]	; 0xfffff800
    486c:	09000018 	stmdbeq	r0, {r3, r4}
    4870:	05561068 	ldrbeq	r1, [r6, #-104]	; 0xffffff98
    4874:	000a0000 	andeq	r0, sl, r0
    4878:	0017c903 	andseq	ip, r7, r3, lsl #18
    487c:	1f790900 	svcne	0x00790900
    4880:	00000584 	andeq	r0, r0, r4, lsl #11
    4884:	7b090c0b 	blvc	2478b8 <__ccfg+0x227910>
    4888:	0005e709 	andeq	lr, r5, r9, lsl #14
    488c:	18120d00 	ldmdane	r2, {r8, sl, fp}
    4890:	7f090000 	svcvc	0x00090000
    4894:	0004c011 	andeq	ip, r4, r1, lsl r0
    4898:	a10d0000 	mrsge	r0, (UNDEF: 13)
    489c:	09000018 	stmdbeq	r0, {r3, r4}
    48a0:	05561183 	ldrbeq	r1, [r6, #-387]	; 0xfffffe7d
    48a4:	00080000 	andeq	r0, r8, r0
    48a8:	00184403 	andseq	r4, r8, r3, lsl #8
    48ac:	03920900 	orrseq	r0, r2, #0, 18
    48b0:	000005c3 	andeq	r0, r0, r3, asr #11
    48b4:	00036514 	andeq	r6, r3, r4, lsl r5
    48b8:	02d80800 	sbcseq	r0, r8, #0, 16
    48bc:	0000f90e 	andeq	pc, r0, lr, lsl #18
    48c0:	1b010100 	blne	44cc8 <__ccfg+0x24d20>
    48c4:	03030808 	movweq	r0, #14344	; 0x3808
    48c8:	00062909 	andeq	r2, r6, r9, lsl #18
    48cc:	3c831c00 	stccc	12, cr1, [r3], {0}
    48d0:	07080000 	streq	r0, [r8, -r0]
    48d4:	00cd0703 	sbceq	r0, sp, r3, lsl #14
    48d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    48dc:	00000faf 	andeq	r0, r0, pc, lsr #31
    48e0:	08030808 	stmdaeq	r3, {r3, fp}
    48e4:	0000010a 	andeq	r0, r0, sl, lsl #2
    48e8:	f9110004 			; <UNDEFINED> instruction: 0xf9110004
    48ec:	08000009 	stmdaeq	r0, {r0, r3}
    48f0:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    48f4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    48f8:	00000020 	andeq	r0, r0, r0, lsr #32
    48fc:	030b0830 	movweq	r0, #47152	; 0xb830
    4900:	00069908 	andeq	r9, r6, r8, lsl #18
    4904:	1f061c00 	svcne	0x00061c00
    4908:	14080000 	strne	r0, [r8], #-0
    490c:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    4910:	1c000000 	stcne	0, cr0, [r0], {-0}
    4914:	00000bd7 	ldrdeq	r0, [r0], -r7
    4918:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    491c:	000000cd 	andeq	r0, r0, sp, asr #1
    4920:	4c701c02 	ldclmi	12, cr1, [r0], #-8
    4924:	16080000 	strne	r0, [r8], -r0
    4928:	02e40b03 	rsceq	r0, r4, #3072	; 0xc00
    492c:	1c040000 	stcne	0, cr0, [r4], {-0}
    4930:	00004736 	andeq	r4, r0, r6, lsr r7
    4934:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    4938:	0000010a 	andeq	r0, r0, sl, lsl #2
    493c:	000f1c08 	andeq	r1, pc, r8, lsl #24
    4940:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    4944:	06990f03 	ldreq	r0, [r9], r3, lsl #30
    4948:	1c0c0000 	stcne	0, cr0, [ip], {-0}
    494c:	0000094d 	andeq	r0, r0, sp, asr #18
    4950:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    4954:	000006a9 	andeq	r0, r0, r9, lsr #13
    4958:	290f002c 	stmdbcs	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    495c:	a9000006 	stmdbge	r0, {r1, r2}
    4960:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    4964:	00000088 	andeq	r0, r0, r8, lsl #1
    4968:	040a0003 	streq	r0, [sl], #-3
    496c:	00000636 	andeq	r0, r0, r6, lsr r6
    4970:	000bcc11 	andeq	ip, fp, r1, lsl ip
    4974:	031c0800 	tsteq	ip, #0, 16
    4978:	0006361b 	andeq	r3, r6, fp, lsl r6
    497c:	0bac1400 	bleq	feb09984 <_estack+0xdeb04984>
    4980:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    4984:	06cb1403 	strbeq	r1, [fp], r3, lsl #8
    4988:	01010000 	mrseq	r0, (UNDEF: 1)
    498c:	06af040a 	strteq	r0, [pc], sl, lsl #8
    4990:	ff0e0000 			; <UNDEFINED> instruction: 0xff0e0000
    4994:	0a000006 	beq	49b4 <rand+0x2c>
    4998:	00cd131d 	sbceq	r1, sp, sp, lsl r3
    499c:	01010000 	mrseq	r0, (UNDEF: 1)
    49a0:	0002e50e 	andeq	lr, r2, lr, lsl #10
    49a4:	1a1e0a00 	bne	7871ac <__ccfg+0x767204>
    49a8:	000000de 	ldrdeq	r0, [r0], -lr
    49ac:	590e0101 	stmdbpl	lr, {r0, r8}
    49b0:	0a00000c 	beq	49e8 <__aeabi_lmul+0x28>
    49b4:	00de241e 	sbcseq	r2, lr, lr, lsl r4
    49b8:	01010000 	mrseq	r0, (UNDEF: 1)
    49bc:	000c770e 	andeq	r7, ip, lr, lsl #14
    49c0:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    49c4:	000006cb 	andeq	r0, r0, fp, asr #13
    49c8:	1a030101 	bne	c4dd4 <__ccfg+0xa4e2c>
    49cc:	0b000017 	bleq	4a30 <__aeabi_lmul+0x70>
    49d0:	07150f0e 	ldreq	r0, [r5, -lr, lsl #30]
    49d4:	040a0000 	streq	r0, [sl], #-0
    49d8:	0000071b 	andeq	r0, r0, fp, lsl r7
    49dc:	00810115 	addeq	r0, r1, r5, lsl r1
    49e0:	07300000 	ldreq	r0, [r0, -r0]!
    49e4:	81130000 	tsthi	r3, r0
    49e8:	13000000 	movwne	r0, #0
    49ec:	00000116 	andeq	r0, r0, r6, lsl r1
    49f0:	07400f00 	strbeq	r0, [r0, -r0, lsl #30]
    49f4:	07400000 	strbeq	r0, [r0, -r0]
    49f8:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    49fc:	07000000 	streq	r0, [r0, -r0]
    4a00:	e7040a00 	str	r0, [r4, -r0, lsl #20]
    4a04:	1f000005 	svcne	0x00000005
    4a08:	000017ea 	andeq	r1, r0, sl, ror #15
    4a0c:	30150d0c 	andscc	r0, r5, ip, lsl #26
    4a10:	05000007 	streq	r0, [r0, #-7]
    4a14:	00059c03 	andeq	r9, r5, r3, lsl #24
    4a18:	07090f20 	streq	r0, [r9, -r0, lsr #30]
    4a1c:	07680000 	strbeq	r0, [r8, -r0]!
    4a20:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4a24:	02000000 	andeq	r0, r0, #0
    4a28:	18591f00 	ldmdane	r9, {r8, r9, sl, fp, ip}^
    4a2c:	130c0000 	movwne	r0, #49152	; 0xc000
    4a30:	00075814 	andeq	r5, r7, r4, lsl r8
    4a34:	c8030500 	stmdagt	r3, {r8, sl}
    4a38:	0f200005 	svceq	0x00200005
    4a3c:	0000078a 	andeq	r0, r0, sl, lsl #15
    4a40:	0000078a 	andeq	r0, r0, sl, lsl #15
    4a44:	0000881e 	andeq	r8, r0, lr, lsl r8
    4a48:	0a000200 	beq	5250 <__button_list+0x4e>
    4a4c:	0004c004 	andeq	ip, r4, r4
    4a50:	17a51f00 	strne	r1, [r5, r0, lsl #30]!
    4a54:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    4a58:	00077a13 	andeq	r7, r7, r3, lsl sl
    4a5c:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    4a60:	0f200005 	svceq	0x00200005
    4a64:	00000081 	andeq	r0, r0, r1, lsl #1
    4a68:	000007b2 			; <UNDEFINED> instruction: 0x000007b2
    4a6c:	0000881e 	andeq	r8, r0, lr, lsl r8
    4a70:	1f000200 	svcne	0x00000200
    4a74:	0000177d 	andeq	r1, r0, sp, ror r7
    4a78:	a20f1e0c 	andge	r1, pc, #12, 28	; 0xc0
    4a7c:	05000007 	streq	r0, [r0, #-7]
    4a80:	0005d403 	andeq	sp, r5, r3, lsl #8
    4a84:	07d40f20 	ldrbeq	r0, [r4, r0, lsr #30]
    4a88:	07d40000 	ldrbeq	r0, [r4, r0]
    4a8c:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4a90:	02000000 	andeq	r0, r0, #0
    4a94:	81040a00 	tsthi	r4, r0, lsl #20
    4a98:	1f000004 	svcne	0x00000004
    4a9c:	000018fb 	strdeq	r1, [r0], -fp
    4aa0:	c41b230c 	ldrgt	r2, [fp], #-780	; 0xfffffcf4
    4aa4:	05000007 	streq	r0, [r0, #-7]
    4aa8:	0005e003 	andeq	lr, r5, r3
    4aac:	69012020 	stmdbvs	r1, {r5, sp}
    4ab0:	01000018 	tsteq	r0, r8, lsl r0
    4ab4:	0101050d 	tsteq	r1, sp, lsl #10
    4ab8:	0000247c 	andeq	r2, r0, ip, ror r4
    4abc:	0000247e 	andeq	r2, r0, lr, ror r4
    4ac0:	01219c01 			; <UNDEFINED> instruction: 0x01219c01
    4ac4:	0000178c 	andeq	r1, r0, ip, lsl #15
    4ac8:	01050501 	tsteq	r5, r1, lsl #10
    4acc:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4ad8:	639c0100 	orrsvs	r0, ip, #0, 2
    4adc:	22000008 	andcs	r0, r0, #8
    4ae0:	00796870 	rsbseq	r6, r9, r0, ror r8
    4ae4:	2d050501 	cfstr32cs	mvfx0, [r5, #-4]
    4ae8:	00000081 	andeq	r0, r0, r1, lsl #1
    4aec:	0000139f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    4af0:	00114e23 	andseq	r4, r1, r3, lsr #28
    4af4:	00000000 	andeq	r0, r0, r0
    4af8:	00091800 	andeq	r1, r9, r0, lsl #16
    4afc:	050a0100 	streq	r0, [sl, #-256]	; 0xffffff00
    4b00:	11602409 	cmnne	r0, r9, lsl #8
    4b04:	13bd0000 			; <UNDEFINED> instruction: 0x13bd0000
    4b08:	18250000 	stmdane	r5!, {}	; <UNPREDICTABLE>
    4b0c:	26000009 	strcs	r0, [r0], -r9
    4b10:	0000116b 	andeq	r1, r0, fp, ror #2
    4b14:	000013d0 	ldrdeq	r1, [r0], -r0
    4b18:	00117626 	andseq	r7, r1, r6, lsr #12
    4b1c:	0013ee00 	andseq	lr, r3, r0, lsl #28
    4b20:	00000000 	andeq	r0, r0, r0
    4b24:	18960127 	ldmne	r6, {r0, r1, r2, r5, r8}
    4b28:	fa010000 	blx	44b30 <__ccfg+0x24b88>
    4b2c:	40010104 	andmi	r0, r1, r4, lsl #2
    4b30:	7c000024 	stcvc	0, cr0, [r0], {36}	; 0x24
    4b34:	01000024 	tsteq	r0, r4, lsr #32
    4b38:	00089d9c 	muleq	r8, ip, sp
    4b3c:	6b702200 	blvs	1c0d344 <__ccfg+0x1bed39c>
    4b40:	fa010074 	blx	44d18 <__ccfg+0x24d70>
    4b44:	01163004 	tsteq	r6, r4
    4b48:	14180000 	ldrne	r0, [r8], #-0
    4b4c:	62280000 	eorvs	r0, r8, #0
    4b50:	04fe0100 	ldrbteq	r0, [lr], #256	; 0x100
    4b54:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4b58:	00143600 	andseq	r3, r4, r0, lsl #12
    4b5c:	040a0000 	streq	r0, [sl], #-0
    4b60:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    4b64:	16e20121 	strbtne	r0, [r2], r1, lsr #2
    4b68:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    4b6c:	16010104 	strne	r0, [r1], -r4, lsl #2
    4b70:	0c000001 	stceq	0, cr0, [r0], {1}
    4b74:	40000024 	andmi	r0, r0, r4, lsr #32
    4b78:	01000024 	tsteq	r0, r4, lsr #32
    4b7c:	0008f19c 	muleq	r8, ip, r1
    4b80:	68702200 	ldmdavs	r0!, {r9, sp}^
    4b84:	e9010079 	stmdb	r1, {r0, r3, r4, r5, r6}
    4b88:	00812f04 	addeq	r2, r1, r4, lsl #30
    4b8c:	14540000 	ldrbne	r0, [r4], #-0
    4b90:	6f280000 	svcvs	0x00280000
    4b94:	ed010071 	stc	0, cr0, [r1, #-452]	; 0xfffffe3c
    4b98:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    4b9c:	14720000 	ldrbtne	r0, [r2], #-0
    4ba0:	62280000 	eorvs	r0, r8, #0
    4ba4:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    4ba8:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4bac:	00148500 	andseq	r8, r4, r0, lsl #10
    4bb0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4bb4:	00001760 	andeq	r1, r0, r0, ror #14
    4bb8:	0104d201 	tsteq	r4, r1, lsl #4
    4bbc:	00011601 	andeq	r1, r1, r1, lsl #12
    4bc0:	0023cc00 	eoreq	ip, r3, r0, lsl #24
    4bc4:	00240c00 	eoreq	r0, r4, r0, lsl #24
    4bc8:	509c0100 	addspl	r0, ip, r0, lsl #2
    4bcc:	22000009 	andcs	r0, r0, #9
    4bd0:	00796870 	rsbseq	r6, r9, r0, ror r8
    4bd4:	2f04d201 	svccs	0x0004d201
    4bd8:	00000081 	andeq	r0, r0, r1, lsl #1
    4bdc:	000014a4 	andeq	r1, r0, r4, lsr #9
    4be0:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4be4:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    4be8:	00043239 	andeq	r3, r4, r9, lsr r2
    4bec:	0014c200 	andseq	ip, r4, r0, lsl #4
    4bf0:	716f2800 	cmnvc	pc, r0, lsl #16
    4bf4:	04d70100 	ldrbeq	r0, [r7], #256	; 0x100
    4bf8:	00078a0b 	andeq	r8, r7, fp, lsl #20
    4bfc:	0014e000 	andseq	lr, r4, r0
    4c00:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4c04:	0c04d801 	stceq	8, cr13, [r4], {1}
    4c08:	0000089d 	muleq	r0, sp, r8
    4c0c:	000014fe 	strdeq	r1, [r0], -lr
    4c10:	e9012100 	stmdb	r1, {r8, sp}
    4c14:	01000018 	tsteq	r0, r8, lsl r0
    4c18:	010104a1 	smlatbeq	r1, r1, r4, r0
    4c1c:	00000081 	andeq	r0, r0, r1, lsl #1
    4c20:	00002330 	andeq	r2, r0, r0, lsr r3
    4c24:	000023cc 	andeq	r2, r0, ip, asr #7
    4c28:	09eb9c01 	stmibeq	fp!, {r0, sl, fp, ip, pc}^
    4c2c:	70220000 	eorvc	r0, r2, r0
    4c30:	01007968 	tsteq	r0, r8, ror #18
    4c34:	812b04a1 	smulwbhi	fp, r1, r4
    4c38:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4c3c:	22000015 	andcs	r0, r0, #21
    4c40:	a1010070 	tstge	r1, r0, ror r0
    4c44:	01163804 	tsteq	r6, r4, lsl #16
    4c48:	155c0000 	ldrbne	r0, [ip, #-0]
    4c4c:	6c220000 	stcvs	0, cr0, [r2], #-0
    4c50:	01006e65 	tsteq	r0, r5, ror #28
    4c54:	813f04a1 	teqhi	pc, r1, lsr #9
    4c58:	90000000 	andls	r0, r0, r0
    4c5c:	29000015 	stmdbcs	r0, {r0, r2, r4}
    4c60:	00676c70 	rsbeq	r6, r7, r0, ror ip
    4c64:	0604a601 	streq	sl, [r4], -r1, lsl #12
    4c68:	00000081 	andeq	r0, r0, r1, lsl #1
    4c6c:	70736428 	rsbsvc	r6, r3, r8, lsr #8
    4c70:	04a60100 	strteq	r0, [r6], #256	; 0x100
    4c74:	0000810b 	andeq	r8, r0, fp, lsl #2
    4c78:	0015c400 	andseq	ip, r5, r0, lsl #8
    4c7c:	65732a00 	ldrbvs	r2, [r3, #-2560]!	; 0xfffff600
    4c80:	a6010073 			; <UNDEFINED> instruction: 0xa6010073
    4c84:	00811004 	addeq	r1, r1, r4
    4c88:	91020000 	mrsls	r0, (UNDEF: 2)
    4c8c:	70612a50 	rsbvc	r2, r1, r0, asr sl
    4c90:	04a70100 	strteq	r0, [r7], #256	; 0x100
    4c94:	0003550b 	andeq	r5, r3, fp, lsl #10
    4c98:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4c9c:	01006328 	tsteq	r0, r8, lsr #6
    4ca0:	160a04a8 	strne	r0, [sl], -r8, lsr #9
    4ca4:	e2000001 	and	r0, r0, #1
    4ca8:	00000015 	andeq	r0, r0, r5, lsl r0
    4cac:	170f0121 	strne	r0, [pc, -r1, lsr #2]
    4cb0:	87010000 	strhi	r0, [r1, -r0]
    4cb4:	81010104 	tsthi	r1, r4, lsl #2
    4cb8:	e0000000 	and	r0, r0, r0
    4cbc:	30000022 	andcc	r0, r0, r2, lsr #32
    4cc0:	01000023 	tsteq	r0, r3, lsr #32
    4cc4:	000a4a9c 	muleq	sl, ip, sl
    4cc8:	68702200 	ldmdavs	r0!, {r9, sp}^
    4ccc:	87010079 	smlsdxhi	r1, r9, r0, r0
    4cd0:	00812b04 	addeq	r2, r1, r4, lsl #22
    4cd4:	15f50000 	ldrbne	r0, [r5, #0]!
    4cd8:	70220000 	eorvc	r0, r2, r0
    4cdc:	87010073 	smlsdxhi	r1, r3, r0, r0
    4ce0:	07093a04 	streq	r3, [r9, -r4, lsl #20]
    4ce4:	16130000 	ldrne	r0, [r3], -r0
    4ce8:	6d2b0000 	stcvs	0, cr0, [fp, #-0]
    4cec:	0100000e 	tsteq	r0, lr
    4cf0:	81420487 	smlalbbhi	r0, r2, r7, r4
    4cf4:	31000000 	mrscc	r0, (UNDEF: 0)
    4cf8:	28000016 	stmdacs	r0, {r1, r2, r4}
    4cfc:	8d010071 	stchi	0, cr0, [r1, #-452]	; 0xfffffe3c
    4d00:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    4d04:	164f0000 	strbne	r0, [pc], -r0
    4d08:	2c000000 	stccs	0, cr0, [r0], {-0}
    4d0c:	00180901 	andseq	r0, r8, r1, lsl #18
    4d10:	03860100 	orreq	r0, r6, #0, 2
    4d14:	01160101 	tsteq	r6, r1, lsl #2
    4d18:	91010000 	mrsls	r0, (UNDEF: 1)
    4d1c:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    4d20:	00001d83 	andeq	r1, r0, r3, lsl #27
    4d24:	2d038601 	stccs	6, cr8, [r3, #-4]
    4d28:	00000081 	andeq	r0, r0, r1, lsl #1
    4d2c:	7073642e 	rsbsvc	r6, r3, lr, lsr #8
    4d30:	03860100 	orreq	r0, r6, #0, 2
    4d34:	00008137 	andeq	r8, r0, r7, lsr r1
    4d38:	65732e00 	ldrbvs	r2, [r3, #-3584]!	; 0xfffff200
    4d3c:	86010073 			; <UNDEFINED> instruction: 0x86010073
    4d40:	00814003 	addeq	r4, r1, r3
    4d44:	70290000 	eorvc	r0, r9, r0
    4d48:	038a0100 	orreq	r0, sl, #0, 2
    4d4c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4d50:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4d54:	00001702 	andeq	r1, r0, r2, lsl #14
    4d58:	01037f01 	tsteq	r3, r1, lsl #30
    4d5c:	00000001 	andeq	r0, r0, r1
    4d60:	00000000 	andeq	r0, r0, r0
    4d64:	cb9c0100 	blgt	fe70516c <_estack+0xde70016c>
    4d68:	2200000a 	andcs	r0, r0, #10
    4d6c:	7f010070 	svcvc	0x00010070
    4d70:	01163203 	tsteq	r6, r3, lsl #4
    4d74:	167e0000 	ldrbtne	r0, [lr], -r0
    4d78:	64220000 	strtvs	r0, [r2], #-0
    4d7c:	01007073 	tsteq	r0, r3, ror r0
    4d80:	8139037f 	teqhi	r9, pc, ror r3
    4d84:	91000000 	mrsls	r0, (UNDEF: 0)
    4d88:	00000016 	andeq	r0, r0, r6, lsl r0
    4d8c:	187a0121 	ldmdane	sl!, {r0, r5, r8}^
    4d90:	6b010000 	blvs	44d98 <__ccfg+0x24df0>
    4d94:	16010103 	strne	r0, [r1], -r3, lsl #2
    4d98:	00000001 	andeq	r0, r0, r1
    4d9c:	00000000 	andeq	r0, r0, r0
    4da0:	01000000 	mrseq	r0, (UNDEF: 0)
    4da4:	000b259c 	muleq	fp, ip, r5
    4da8:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4dac:	33036b01 	movwcc	r6, #15105	; 0x3b01
    4db0:	00000116 	andeq	r0, r0, r6, lsl r1
    4db4:	000016a4 	andeq	r1, r0, r4, lsr #13
    4db8:	0018dc2b 	andseq	sp, r8, fp, lsr #24
    4dbc:	036b0100 	cmneq	fp, #0, 2
    4dc0:	0000813a 	andeq	r8, r0, sl, lsr r1
    4dc4:	0016c200 	andseq	ip, r6, r0, lsl #4
    4dc8:	63702800 	cmnvs	r0, #0, 16
    4dcc:	036f0100 	cmneq	pc, #0, 2
    4dd0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4dd4:	0016e000 	andseq	lr, r6, r0
    4dd8:	70702900 	rsbsvc	r2, r0, r0, lsl #18
    4ddc:	036f0100 	cmneq	pc, #0, 2
    4de0:	00089d11 	andeq	r9, r8, r1, lsl sp
    4de4:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4de8:	00001799 	muleq	r0, r9, r7
    4dec:	01036301 	tsteq	r3, r1, lsl #6
    4df0:	00000001 	andeq	r0, r0, r1
    4df4:	00000000 	andeq	r0, r0, r0
    4df8:	5f9c0100 	svcpl	0x009c0100
    4dfc:	2200000b 	andcs	r0, r0, #11
    4e00:	63010070 	movwvs	r0, #4208	; 0x1070
    4e04:	01163103 	tsteq	r6, r3, lsl #2
    4e08:	16fe0000 	ldrbtne	r0, [lr], r0
    4e0c:	70220000 	eorvc	r0, r2, r0
    4e10:	01007968 	tsteq	r0, r8, ror #18
    4e14:	81380363 	teqhi	r8, r3, ror #6
    4e18:	1c000000 	stcne	0, cr0, [r0], {-0}
    4e1c:	00000017 	andeq	r0, r0, r7, lsl r0
    4e20:	18850127 	stmne	r5, {r0, r1, r2, r5, r8}
    4e24:	5a010000 	bpl	44e2c <__ccfg+0x24e84>
    4e28:	00010103 	andeq	r0, r1, r3, lsl #2
    4e2c:	00000000 	andeq	r0, r0, r0
    4e30:	01000000 	mrseq	r0, (UNDEF: 0)
    4e34:	000b999c 	muleq	fp, ip, r9
    4e38:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4e3c:	31035a01 	tstcc	r3, r1, lsl #20
    4e40:	00000116 	andeq	r0, r0, r6, lsl r1
    4e44:	0000173a 	andeq	r1, r0, sl, lsr r7
    4e48:	73657322 	cmnvc	r5, #-2013265920	; 0x88000000
    4e4c:	035a0100 	cmpeq	sl, #0, 2
    4e50:	00008138 	andeq	r8, r0, r8, lsr r1
    4e54:	00175800 	andseq	r5, r7, r0, lsl #16
    4e58:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    4e5c:	0000191b 	andeq	r1, r0, fp, lsl r9
    4e60:	01035201 	tsteq	r3, r1, lsl #4
    4e64:	00008101 	andeq	r8, r0, r1, lsl #2
    4e68:	0bd50100 	bleq	ff545270 <_estack+0xdf540270>
    4e6c:	702e0000 	eorvc	r0, lr, r0
    4e70:	01007968 	tsteq	r0, r8, ror #18
    4e74:	812d0352 			; <UNDEFINED> instruction: 0x812d0352
    4e78:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    4e7c:	0074706f 	rsbseq	r7, r4, pc, rrx
    4e80:	36035201 	strcc	r5, [r3], -r1, lsl #4
    4e84:	00000081 	andeq	r0, r0, r1, lsl #1
    4e88:	6772612e 	ldrbvs	r6, [r2, -lr, lsr #2]!
    4e8c:	03520100 	cmpeq	r2, #0, 2
    4e90:	00011643 	andeq	r1, r1, r3, asr #12
    4e94:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4e98:	000016ed 	andeq	r1, r0, sp, ror #13
    4e9c:	01033301 	tsteq	r3, r1, lsl #6
    4ea0:	00008101 	andeq	r8, r0, r1, lsl #2
    4ea4:	00221800 	eoreq	r1, r2, r0, lsl #16
    4ea8:	00227800 	eoreq	r7, r2, r0, lsl #16
    4eac:	3e9c0100 	fmlcce	f0, f4, f0
    4eb0:	2200000c 	andcs	r0, r0, #12
    4eb4:	01006466 	tsteq	r0, r6, ror #8
    4eb8:	812c0333 			; <UNDEFINED> instruction: 0x812c0333
    4ebc:	76000000 	strvc	r0, [r0], -r0
    4ec0:	22000017 	andcs	r0, r0, #23
    4ec4:	0074706f 	rsbseq	r7, r4, pc, rrx
    4ec8:	34033301 	strcc	r3, [r3], #-769	; 0xfffffcff
    4ecc:	00000081 	andeq	r0, r0, r1, lsl #1
    4ed0:	000017b5 			; <UNDEFINED> instruction: 0x000017b5
    4ed4:	67726122 	ldrbvs	r6, [r2, -r2, lsr #2]!
    4ed8:	03330100 	teqeq	r3, #0, 2
    4edc:	00011641 	andeq	r1, r1, r1, asr #12
    4ee0:	0017de00 	andseq	sp, r7, r0, lsl #28
    4ee4:	22262f00 	eorcs	r2, r6, #0, 30
    4ee8:	22340000 	eorscs	r0, r4, #0
    4eec:	70280000 	eorvc	r0, r8, r0
    4ef0:	033c0100 	teqeq	ip, #0, 2
    4ef4:	0007d415 	andeq	sp, r7, r5, lsl r4
    4ef8:	00180700 	andseq	r0, r8, r0, lsl #14
    4efc:	27000000 	strcs	r0, [r0, -r0]
    4f00:	00177401 	andseq	r7, r7, r1, lsl #8
    4f04:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    4f08:	00000101 	andeq	r0, r0, r1, lsl #2
    4f0c:	00000000 	andeq	r0, r0, r0
    4f10:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f14:	00000c67 	andeq	r0, r0, r7, ror #24
    4f18:	01007022 	tsteq	r0, r2, lsr #32
    4f1c:	162e032b 	strtne	r0, [lr], -fp, lsr #6
    4f20:	1a000001 	bne	4f2c <__aeabi_lmul+0x56c>
    4f24:	00000018 	andeq	r0, r0, r8, lsl r0
    4f28:	18300121 	ldmdane	r0!, {r0, r5, r8}
    4f2c:	1a010000 	bne	44f34 <__ccfg+0x24f8c>
    4f30:	81010103 	tsthi	r1, r3, lsl #2
	...
    4f3c:	01000000 	mrseq	r0, (UNDEF: 0)
    4f40:	000cc19c 	muleq	ip, ip, r1
    4f44:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4f48:	2e031a01 	vmlacs.f32	s2, s6, s2
    4f4c:	00000116 	andeq	r0, r0, r6, lsl r1
    4f50:	00001838 	andeq	r1, r0, r8, lsr r8
    4f54:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    4f58:	031a0100 	tsteq	sl, #0, 2
    4f5c:	0002593d 	andeq	r5, r2, sp, lsr r9
    4f60:	00185600 	andseq	r5, r8, r0, lsl #12
    4f64:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    4f68:	1a01006e 	bne	45128 <__ccfg+0x25180>
    4f6c:	00814603 	addeq	r4, r1, r3, lsl #12
    4f70:	18690000 	stmdane	r9!, {}^	; <UNPREDICTABLE>
    4f74:	62290000 	eorvs	r0, r9, #0
    4f78:	031e0100 	tsteq	lr, #0, 2
    4f7c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4f80:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4f84:	000016f9 	strdeq	r1, [r0], -r9
    4f88:	01030801 	tsteq	r3, r1, lsl #16
    4f8c:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4f98:	1b9c0100 	blne	fe7053a0 <_estack+0xde7003a0>
    4f9c:	2200000d 	andcs	r0, r0, #13
    4fa0:	08010070 	stmdaeq	r1, {r4, r5, r6}
    4fa4:	01162d03 	tsteq	r6, r3, lsl #26
    4fa8:	18870000 	stmne	r7, {}	; <UNPREDICTABLE>
    4fac:	62220000 	eorvs	r0, r2, #0
    4fb0:	01006675 	tsteq	r0, r5, ror r6
    4fb4:	1b360308 	blne	d85bdc <__ccfg+0xd65c34>
    4fb8:	a500000d 	strge	r0, [r0, #-13]
    4fbc:	22000018 	andcs	r0, r0, #24
    4fc0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    4fc4:	3f030801 	svccc	0x00030801
    4fc8:	00000081 	andeq	r0, r0, r1, lsl #1
    4fcc:	000018c3 	andeq	r1, r0, r3, asr #17
    4fd0:	01006229 	tsteq	r0, r9, lsr #4
    4fd4:	9d0c030c 	stcls	3, cr0, [ip, #-48]	; 0xffffffd0
    4fd8:	00000008 	andeq	r0, r0, r8
    4fdc:	00e3040a 	rsceq	r0, r3, sl, lsl #8
    4fe0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4fe4:	00001827 	andeq	r1, r0, r7, lsr #16
    4fe8:	0102cd01 	tsteq	r2, r1, lsl #26
    4fec:	00011601 	andeq	r1, r1, r1, lsl #12
    4ff0:	00213000 	eoreq	r3, r1, r0
    4ff4:	0021ec00 	eoreq	lr, r1, r0, lsl #24
    4ff8:	bf9c0100 	svclt	0x009c0100
    4ffc:	2b00000d 	blcs	5038 <__aeabi_lmul+0x678>
    5000:	00000070 	andeq	r0, r0, r0, ror r0
    5004:	2e02cd01 	cdpcs	13, 0, cr12, cr2, cr1, {0}
    5008:	000000cd 	andeq	r0, r0, sp, asr #1
    500c:	000018e1 	andeq	r1, r0, r1, ror #17
    5010:	00646622 	rsbeq	r6, r4, r2, lsr #12
    5014:	3902cd01 	stmdbcc	r2, {r0, r8, sl, fp, lr, pc}
    5018:	00000081 	andeq	r0, r0, r1, lsl #1
    501c:	000018ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    5020:	0018d52b 	andseq	sp, r8, fp, lsr #10
    5024:	02cd0100 	sbceq	r0, sp, #0, 2
    5028:	00008141 	andeq	r8, r0, r1, asr #2
    502c:	00192800 	andseq	r2, r9, r0, lsl #16
    5030:	72752200 	rsbsvc	r2, r5, #0, 4
    5034:	ce010067 	cdpgt	0, 0, cr0, cr1, cr7, {3}
    5038:	00c11102 	sbceq	r1, r1, r2, lsl #2
    503c:	19720000 	ldmdbne	r2!, {}^	; <UNPREDICTABLE>
    5040:	62280000 	eorvs	r0, r8, #0
    5044:	02cf0100 	sbceq	r0, pc, #0, 2
    5048:	00089d0c 	andeq	r9, r8, ip, lsl #26
    504c:	00198500 	andseq	r8, r9, r0, lsl #10
    5050:	18193000 	ldmdane	r9, {ip, sp}
    5054:	d0010000 	andle	r0, r1, r0
    5058:	03550b02 	cmpeq	r5, #2048	; 0x800
    505c:	91020000 	mrsls	r0, (UNDEF: 2)
    5060:	00732a64 	rsbseq	r2, r3, r4, ror #20
    5064:	0d02d101 	stfeqd	f5, [r2, #-4]
    5068:	00000740 	andeq	r0, r0, r0, asr #14
    506c:	65285701 	strvs	r5, [r8, #-1793]!	; 0xfffff8ff
    5070:	01006469 	tsteq	r0, r9, ror #8
    5074:	810602d2 	ldrdhi	r0, [r6, -r2]
    5078:	a3000000 	movwge	r0, #0
    507c:	00000019 	andeq	r0, r0, r9, lsl r0
    5080:	17f60121 	ldrbne	r0, [r6, r1, lsr #2]!
    5084:	a4010000 	strge	r0, [r1], #-0
    5088:	81010102 	tsthi	r1, r2, lsl #2
	...
    5094:	01000000 	mrseq	r0, (UNDEF: 0)
    5098:	000e729c 	muleq	lr, ip, r2
    509c:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    50a0:	02a40100 	adceq	r0, r4, #0, 2
    50a4:	0000812a 	andeq	r8, r0, sl, lsr #2
    50a8:	0019cc00 	andseq	ip, r9, r0, lsl #24
    50ac:	18dc2b00 	ldmne	ip, {r8, r9, fp, sp}^
    50b0:	a4010000 	strge	r0, [r1], #-0
    50b4:	00813202 	addeq	r3, r1, r2, lsl #4
    50b8:	1a000000 	bne	50c0 <__aeabi_lmul+0x700>
    50bc:	73280000 			; <UNDEFINED> instruction: 0x73280000
    50c0:	02a80100 	adceq	r0, r8, #0, 2
    50c4:	0007400d 	andeq	r4, r7, sp
    50c8:	001a3400 	andseq	r3, sl, r0, lsl #8
    50cc:	716e2800 	cmnvc	lr, r0, lsl #16
    50d0:	02a90100 	adceq	r0, r9, #0, 2
    50d4:	00008106 	andeq	r8, r0, r6, lsl #2
    50d8:	001a9900 	andseq	r9, sl, r0, lsl #18
    50dc:	71722800 	cmnvc	r2, r0, lsl #16
    50e0:	02aa0100 	adceq	r0, sl, #0, 2
    50e4:	00078a0b 	andeq	r8, r7, fp, lsl #20
    50e8:	001ab700 	andseq	fp, sl, r0, lsl #14
    50ec:	00622800 	rsbeq	r2, r2, r0, lsl #16
    50f0:	0c02ab01 			; <UNDEFINED> instruction: 0x0c02ab01
    50f4:	0000089d 	muleq	r0, sp, r8
    50f8:	00001ad5 	ldrdeq	r1, [r0], -r5
    50fc:	0017e431 	andseq	lr, r7, r1, lsr r4
    5100:	02c00100 	sbceq	r0, r0, #0, 2
    5104:	00000001 	andeq	r0, r0, r1
    5108:	114e3200 	mrsne	r3, SPSR_fiq
	...
    5114:	bb010000 	bllt	4511c <__ccfg+0x25174>
    5118:	60330a02 	eorsvs	r0, r3, r2, lsl #20
    511c:	26000011 			; <UNDEFINED> instruction: 0x26000011
    5120:	0000116b 	andeq	r1, r0, fp, ror #2
    5124:	00001afe 	strdeq	r1, [r0], -lr
    5128:	00117626 	andseq	r7, r1, r6, lsr #12
    512c:	001b1100 	andseq	r1, fp, r0, lsl #2
    5130:	21000000 	mrscs	r0, (UNDEF: 0)
    5134:	0016c501 	andseq	ip, r6, r1, lsl #10
    5138:	027d0100 	rsbseq	r0, sp, #0, 2
    513c:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    5148:	9c010000 	stcls	0, cr0, [r1], {-0}
    514c:	00000eef 	andeq	r0, r0, pc, ror #29
    5150:	00646622 	rsbeq	r6, r4, r2, lsr #12
    5154:	2a027d01 	bcs	a4560 <__ccfg+0x845b8>
    5158:	00000081 	andeq	r0, r0, r1, lsl #1
    515c:	00001b24 	andeq	r1, r0, r4, lsr #22
    5160:	0018dc2b 	andseq	sp, r8, fp, lsr #24
    5164:	027d0100 	rsbseq	r0, sp, #0, 2
    5168:	00008132 	andeq	r8, r0, r2, lsr r1
    516c:	001b5800 	andseq	r5, fp, r0, lsl #16
    5170:	00732800 	rsbseq	r2, r3, r0, lsl #16
    5174:	0d028101 	stfeqd	f0, [r2, #-4]
    5178:	00000740 	andeq	r0, r0, r0, asr #14
    517c:	00001b81 	andeq	r1, r0, r1, lsl #23
    5180:	00716e28 	rsbseq	r6, r1, r8, lsr #28
    5184:	06028201 	streq	r8, [r2], -r1, lsl #4
    5188:	00000081 	andeq	r0, r0, r1, lsl #1
    518c:	00001be6 	andeq	r1, r0, r6, ror #23
    5190:	00717228 	rsbseq	r7, r1, r8, lsr #4
    5194:	0b028301 	bleq	a5da0 <__ccfg+0x85df8>
    5198:	0000078a 	andeq	r0, r0, sl, lsl #15
    519c:	00001c04 	andeq	r1, r0, r4, lsl #24
    51a0:	01006228 	tsteq	r0, r8, lsr #4
    51a4:	9d0c0284 	sfmls	f0, 4, [ip, #-528]	; 0xfffffdf0
    51a8:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
    51ac:	0000001c 	andeq	r0, r0, ip, lsl r0
    51b0:	18e10121 	stmiane	r1!, {r0, r5, r8}^
    51b4:	56010000 	strpl	r0, [r1], -r0
    51b8:	16010102 	strne	r0, [r1], -r2, lsl #2
    51bc:	b0000001 	andlt	r0, r0, r1
    51c0:	30000020 	andcc	r0, r0, r0, lsr #32
    51c4:	01000021 	tsteq	r0, r1, lsr #32
    51c8:	000f5c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    51cc:	00702b00 	rsbseq	r2, r0, r0, lsl #22
    51d0:	56010000 	strpl	r0, [r1], -r0
    51d4:	00cd2d02 	sbceq	r2, sp, r2, lsl #26
    51d8:	1c610000 	stclne	0, cr0, [r1], #-0
    51dc:	66220000 	strtvs	r0, [r2], -r0
    51e0:	56010064 	strpl	r0, [r1], -r4, rrx
    51e4:	00813802 	addeq	r3, r1, r2, lsl #16
    51e8:	1c740000 	ldclne	0, cr0, [r4], #-0
    51ec:	70280000 	eorvc	r0, r8, r0
    51f0:	025d0100 	subseq	r0, sp, #0, 2
    51f4:	0001160a 	andeq	r1, r1, sl, lsl #12
    51f8:	001cb300 	andseq	fp, ip, r0, lsl #6
    51fc:	00622800 	rsbeq	r2, r2, r0, lsl #16
    5200:	0c025e01 	stceq	14, cr5, [r2], {1}
    5204:	0000089d 	muleq	r0, sp, r8
    5208:	00001cc6 	andeq	r1, r0, r6, asr #25
    520c:	00717228 	rsbseq	r7, r1, r8, lsr #4
    5210:	0b025f01 	bleq	9ce1c <__ccfg+0x7ce74>
    5214:	0000078a 	andeq	r0, r0, sl, lsl #15
    5218:	00001cef 	andeq	r1, r0, pc, ror #25
    521c:	ac012100 	stfges	f2, [r1], {-0}
    5220:	01000018 	tsteq	r0, r8, lsl r0
    5224:	0101024a 	tsteq	r1, sl, asr #4
    5228:	00000081 	andeq	r0, r0, r1, lsl #1
    522c:	0000208c 	andeq	r2, r0, ip, lsl #1
    5230:	000020b0 	strheq	r2, [r0], -r0
    5234:	0f999c01 	svceq	0x00999c01
    5238:	6f220000 	svcvs	0x00220000
    523c:	01006472 	tsteq	r0, r2, ror r4
    5240:	8129024a 			; <UNDEFINED> instruction: 0x8129024a
    5244:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    5248:	3400001d 	strcc	r0, [r0], #-29	; 0xffffffe3
    524c:	01006c70 	tsteq	r0, r0, ror ip
    5250:	d43f024a 	ldrtle	r0, [pc], #-586	; 5258 <__button_list+0x56>
    5254:	01000007 	tsteq	r0, r7
    5258:	01210051 	qsubeq	r0, r1, r1
    525c:	0000183a 	andeq	r1, r0, sl, lsr r8
    5260:	01022901 	tsteq	r2, r1, lsl #18
    5264:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    5270:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5274:	2b00000f 	blcs	52b8 <patchGenfskRfe+0x3c>
    5278:	00000070 	andeq	r0, r0, r0, ror r0
    527c:	2b022901 	blcs	8f688 <__ccfg+0x6f6e0>
    5280:	000000cd 	andeq	r0, r0, sp, asr #1
    5284:	00001d47 	andeq	r1, r0, r7, asr #26
    5288:	00646622 	rsbeq	r6, r4, r2, lsr #12
    528c:	36022901 	strcc	r2, [r2], -r1, lsl #18
    5290:	00000081 	andeq	r0, r0, r1, lsl #1
    5294:	00001d65 	andeq	r1, r0, r5, ror #26
    5298:	01007328 	tsteq	r0, r8, lsr #6
    529c:	400d022b 	andmi	r0, sp, fp, lsr #4
    52a0:	af000007 	svcge	0x00000007
    52a4:	2800001d 	stmdacs	r0, {r0, r2, r3, r4}
    52a8:	2c010062 	stccs	0, cr0, [r1], {98}	; 0x62
    52ac:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    52b0:	1dc20000 	stclne	0, cr0, [r2]
    52b4:	21000000 	mrscs	r0, (UNDEF: 0)
    52b8:	00176b01 	andseq	r6, r7, r1, lsl #22
    52bc:	01f60100 	mvnseq	r0, r0, lsl #2
    52c0:	00810101 	addeq	r0, r1, r1, lsl #2
    52c4:	1fcc0000 	svcne	0x00cc0000
    52c8:	208c0000 	addcs	r0, ip, r0
    52cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    52d0:	00001083 	andeq	r1, r0, r3, lsl #1
    52d4:	0000702b 	andeq	r7, r0, fp, lsr #32
    52d8:	01f60100 	mvnseq	r0, r0, lsl #2
    52dc:	0000cd2a 	andeq	ip, r0, sl, lsr #26
    52e0:	001dd500 	andseq	sp, sp, r0, lsl #10
    52e4:	68702200 	ldmdavs	r0!, {r9, sp}^
    52e8:	f6010079 			; <UNDEFINED> instruction: 0xf6010079
    52ec:	00813501 	addeq	r3, r1, r1, lsl #10
    52f0:	1dfe0000 	ldclne	0, cr0, [lr]
    52f4:	912b0000 			; <UNDEFINED> instruction: 0x912b0000
    52f8:	01000018 	tsteq	r0, r8, lsl r0
    52fc:	813e01f6 	teqhi	lr, r6	; <illegal shifter operand>
    5300:	53000000 	movwpl	r0, #0
    5304:	3500001e 	strcc	r0, [r0, #-30]	; 0xffffffe2
    5308:	00646628 	rsbeq	r6, r4, r8, lsr #12
    530c:	0601f801 	streq	pc, [r1], -r1, lsl #16
    5310:	00000081 	andeq	r0, r0, r1, lsl #1
    5314:	00001e8b 	andeq	r1, r0, fp, lsl #29
    5318:	0017d836 	andseq	sp, r7, r6, lsr r8
    531c:	01f90100 	mvnseq	r0, r0, lsl #2
    5320:	0005560a 	andeq	r5, r5, sl, lsl #12
    5324:	00732800 	rsbseq	r2, r3, r0, lsl #16
    5328:	0d01fa01 	vstreq	s30, [r1, #-4]
    532c:	00000740 	andeq	r0, r0, r0, asr #14
    5330:	00001ea9 	andeq	r1, r0, r9, lsr #29
    5334:	0070612a 	rsbseq	r6, r0, sl, lsr #2
    5338:	0b01fc01 	bleq	84344 <__ccfg+0x6439c>
    533c:	000000b5 	strheq	r0, [r0], -r5
    5340:	00549102 	subseq	r9, r4, r2, lsl #2
    5344:	18000127 	stmdane	r0, {r0, r1, r2, r5, r8}
    5348:	3b010000 	blcc	45350 <__ccfg+0x253a8>
    534c:	5c010101 	stfpls	f0, [r1], {1}
    5350:	cc00001f 	stcgt	0, cr0, [r0], {31}
    5354:	0100001f 	tsteq	r0, pc, lsl r0
    5358:	0010bb9c 	mulseq	r0, ip, fp
    535c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    5360:	2e013b01 	vmlacs.f64	d3, d1, d1
    5364:	00000116 	andeq	r0, r0, r6, lsl r1
    5368:	00001ef3 	strdeq	r1, [r0], -r3
    536c:	01006228 	tsteq	r0, r8, lsr #4
    5370:	9d0c0141 	stflss	f0, [ip, #-260]	; 0xfffffefc
    5374:	1c000008 	stcne	0, cr0, [r0], {8}
    5378:	0000001f 	andeq	r0, r0, pc, lsl r0
    537c:	62706137 	rsbsvs	r6, r0, #-1073741811	; 0xc000000d
    5380:	01140100 	tsteq	r4, r0, lsl #2
    5384:	089d0101 	ldmeq	sp, {r0, r8}
    5388:	1e440000 	cdpne	0, 4, cr0, cr4, cr0, {0}
    538c:	1e5a0000 	cdpne	0, 5, cr0, cr10, cr0, {0}
    5390:	9c010000 	stcls	0, cr0, [r1], {-0}
    5394:	00001102 	andeq	r1, r0, r2, lsl #2
    5398:	001d832b 	andseq	r8, sp, fp, lsr #6
    539c:	01140100 	tsteq	r4, r0, lsl #2
    53a0:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    53a4:	001f5000 	andseq	r5, pc, r0
    53a8:	00702a00 	rsbseq	r2, r0, r0, lsl #20
    53ac:	0c011901 			; <UNDEFINED> instruction: 0x0c011901
    53b0:	0000089d 	muleq	r0, sp, r8
    53b4:	63295001 			; <UNDEFINED> instruction: 0x63295001
    53b8:	1a010073 	bne	4558c <__ccfg+0x255e4>
    53bc:	00cd0701 	sbceq	r0, sp, r1, lsl #14
    53c0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    53c4:	00706c72 	rsbseq	r6, r0, r2, ror ip
    53c8:	01010401 	tsteq	r1, r1, lsl #8
    53cc:	001e7401 	andseq	r7, lr, r1, lsl #8
    53d0:	001e8200 	andseq	r8, lr, r0, lsl #4
    53d4:	2a9c0100 	bcs	fe7057dc <_estack+0xde7007dc>
    53d8:	22000011 	andcs	r0, r0, #17
    53dc:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    53e0:	089d2b01 	ldmeq	sp, {r0, r8, r9, fp, sp}
    53e4:	1f630000 	svcne	0x00630000
    53e8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    53ec:	00001707 	andeq	r1, r0, r7, lsl #14
    53f0:	0101e001 	tsteq	r1, r1
    53f4:	00114e01 	andseq	r4, r1, r1, lsl #28
    53f8:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    53fc:	9d2fe001 	stcls	0, cr14, [pc, #-4]!	; 5400 <patchGenfskRfe+0x184>
    5400:	3a000008 	bcc	5428 <patchGenfskRfe+0x1ac>
    5404:	01007664 	tsteq	r0, r4, ror #12
    5408:	008136e0 	addeq	r3, r1, r0, ror #13
    540c:	3b000000 	blcc	5414 <patchGenfskRfe+0x198>
    5410:	00001786 	andeq	r1, r0, r6, lsl #15
    5414:	0101cf01 	tsteq	r1, r1, lsl #30
    5418:	00000081 	andeq	r0, r0, r1, lsl #1
    541c:	00118101 	andseq	r8, r1, r1, lsl #2
    5420:	716f3a00 	cmnvc	pc, r0, lsl #20
    5424:	2bcf0100 	blcs	ff3c582c <_estack+0xdf3c082c>
    5428:	0000078a 	andeq	r0, r0, sl, lsl #15
    542c:	00716e3c 	rsbseq	r6, r1, ip, lsr lr
    5430:	8106d301 	tsthi	r6, r1, lsl #6
    5434:	3c000000 	stccc	0, cr0, [r0], {-0}
    5438:	d4010062 	strle	r0, [r1], #-98	; 0xffffff9e
    543c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5440:	653d0000 	ldrvs	r0, [sp, #-0]!
    5444:	0100716e 	tsteq	r0, lr, ror #2
    5448:	010101a8 	smlatbeq	r1, r8, r1, r0
    544c:	000011a4 	andeq	r1, r0, r4, lsr #3
    5450:	0100713a 	tsteq	r0, sl, lsr r1
    5454:	078a2aa8 	streq	r2, [sl, r8, lsr #21]
    5458:	703a0000 	eorsvc	r0, sl, r0
    545c:	37a80100 	strcc	r0, [r8, r0, lsl #2]!
    5460:	0000089d 	muleq	r0, sp, r8
    5464:	65643d00 	strbvs	r3, [r4, #-3328]!	; 0xfffff300
    5468:	7f010071 	svcvc	0x00010071
    546c:	bd010101 	stflts	f0, [r1, #-4]
    5470:	3a000011 	bcc	54bc <patchGenfskRfe+0x240>
    5474:	7f010070 	svcvc	0x00010070
    5478:	00089d2b 	andeq	r9, r8, fp, lsr #26
    547c:	a43e0000 	ldrtge	r0, [lr], #-0
    5480:	5a000011 	bpl	54cc <patchGenfskRfe+0x250>
    5484:	7400001e 	strvc	r0, [r0], #-30	; 0xffffffe2
    5488:	0100001e 	tsteq	r0, lr, lsl r0
    548c:	0011f29c 	mulseq	r1, ip, r2
    5490:	11b23f00 			; <UNDEFINED> instruction: 0x11b23f00
    5494:	50010000 	andpl	r0, r1, r0
    5498:	0011a440 	andseq	sl, r1, r0, asr #8
    549c:	001e6000 	andseq	r6, lr, r0
    54a0:	001e7200 	andseq	r7, lr, r0, lsl #4
    54a4:	017f0100 	cmneq	pc, r0, lsl #2
    54a8:	0011b224 	andseq	fp, r1, r4, lsr #4
    54ac:	001f7600 	andseq	r7, pc, r0, lsl #12
    54b0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    54b4:	00001181 	andeq	r1, r0, r1, lsl #3
    54b8:	00001e84 	andeq	r1, r0, r4, lsl #29
    54bc:	00001ed0 	ldrdeq	r1, [r0], -r0
    54c0:	123b9c01 	eorsne	r9, fp, #256	; 0x100
    54c4:	8f240000 	svchi	0x00240000
    54c8:	89000011 	stmdbhi	r0, {r0, r4}
    54cc:	2400001f 	strcs	r0, [r0], #-31	; 0xffffffe1
    54d0:	00001199 	muleq	r0, r9, r1
    54d4:	00001fbd 			; <UNDEFINED> instruction: 0x00001fbd
    54d8:	00118140 	andseq	r8, r1, r0, asr #2
    54dc:	001e9000 	andseq	r9, lr, r0
    54e0:	001e9800 	andseq	r9, lr, r0, lsl #16
    54e4:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    54e8:	00118f24 	andseq	r8, r1, r4, lsr #30
    54ec:	001ff100 	andseq	pc, pc, r0, lsl #2
    54f0:	11992400 	orrsne	r2, r9, r0, lsl #8
    54f4:	200f0000 	andcs	r0, pc, r0
    54f8:	00000000 	andeq	r0, r0, r0
    54fc:	00112a3e 	andseq	r2, r1, lr, lsr sl
    5500:	001ed000 	andseq	sp, lr, r0
    5504:	001f5c00 	andseq	r5, pc, r0, lsl #24
    5508:	809c0100 	addshi	r0, ip, r0, lsl #2
    550c:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    5510:	00001138 	andeq	r1, r0, r8, lsr r1
    5514:	0000202d 	andeq	r2, r0, sp, lsr #32
    5518:	00114224 	andseq	r4, r1, r4, lsr #4
    551c:	00208200 	eoreq	r8, r0, r0, lsl #4
    5520:	112a4100 			; <UNDEFINED> instruction: 0x112a4100
    5524:	1f040000 	svcne	0x00040000
    5528:	08f80000 	ldmeq	r8!, {}^	; <UNPREDICTABLE>
    552c:	e0010000 	and	r0, r1, r0
    5530:	11423301 	cmpne	r2, r1, lsl #6
    5534:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    5538:	95000011 	strls	r0, [r0, #-17]	; 0xffffffef
    553c:	00000020 	andeq	r0, r0, r0, lsr #32
    5540:	0b993e00 	bleq	fe654d48 <_estack+0xde64fd48>
    5544:	21ec0000 	mvncs	r0, r0
    5548:	22180000 	andscs	r0, r8, #0
    554c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5550:	000012d8 	ldrdeq	r1, [r0], -r8
    5554:	000bad24 	andeq	sl, fp, r4, lsr #26
    5558:	0020b300 	eoreq	fp, r0, r0, lsl #6
    555c:	0bba2400 	bleq	fee8e564 <_estack+0xdee89564>
    5560:	20d10000 	sbcscs	r0, r1, r0
    5564:	c7240000 	strgt	r0, [r4, -r0]!
    5568:	fa00000b 	blx	559c <patchGenfskRfe+0x320>
    556c:	32000020 	andcc	r0, r0, #32
    5570:	00000b99 	muleq	r0, r9, fp
    5574:	00002200 	andeq	r2, r0, r0, lsl #4
    5578:	00002208 	andeq	r2, r0, r8, lsl #4
    557c:	01035201 	tsteq	r3, r1, lsl #4
    5580:	000bad33 	andeq	sl, fp, r3, lsr sp
    5584:	0bba2400 	bleq	fee8e58c <_estack+0xdee8958c>
    5588:	21230000 			; <UNDEFINED> instruction: 0x21230000
    558c:	c7240000 	strgt	r0, [r4, -r0]!
    5590:	3600000b 	strcc	r0, [r0], -fp
    5594:	00000021 	andeq	r0, r0, r1, lsr #32
    5598:	0a4a4200 	beq	1295da0 <__ccfg+0x1275df8>
    559c:	22780000 	rsbscs	r0, r8, #0
    55a0:	22e00000 	rsccs	r0, r0, #0
    55a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    55a8:	000a5e24 	andeq	r5, sl, r4, lsr #28
    55ac:	00214900 	eoreq	r4, r1, r0, lsl #18
    55b0:	0a6b2400 	beq	1ace5b8 <__ccfg+0x1aae610>
    55b4:	215c0000 	cmpcs	ip, r0
    55b8:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
    55bc:	bc00000a 	stclt	0, cr0, [r0], {10}
    55c0:	26000021 	strcs	r0, [r0], -r1, lsr #32
    55c4:	00000a85 	andeq	r0, r0, r5, lsl #21
    55c8:	00002206 	andeq	r2, r0, r6, lsl #4
    55cc:	000a4a32 	andeq	r4, sl, r2, lsr sl
    55d0:	00228600 	eoreq	r8, r2, r0, lsl #12
    55d4:	00228a00 	eoreq	r8, r2, r0, lsl #20
    55d8:	03860100 	orreq	r0, r6, #0, 2
    55dc:	0a5e3301 	beq	17921e8 <__ccfg+0x1772240>
    55e0:	6b240000 	blvs	9055e8 <__ccfg+0x8e5640>
    55e4:	3a00000a 	bcc	5614 <patchGenfskRfe+0x398>
    55e8:	33000022 	movwcc	r0, #34	; 0x22
    55ec:	00000a78 	andeq	r0, r0, r8, ror sl
    55f0:	000a8543 	andeq	r8, sl, r3, asr #10
    55f4:	00000000 	andeq	r0, r0, r0
    55f8:	00000174 	andeq	r0, r0, r4, ror r1
    55fc:	123d0003 	eorsne	r0, sp, #3
    5600:	01040000 	mrseq	r0, (UNDEF: 4)
    5604:	000000a3 	andeq	r0, r0, r3, lsr #1
    5608:	0019630c 	andseq	r6, r9, ip, lsl #6
    560c:	000dec00 	andeq	lr, sp, r0, lsl #24
    5610:	000a2800 	andeq	r2, sl, r0, lsl #16
    5614:	00000000 	andeq	r0, r0, r0
    5618:	003e7700 	eorseq	r7, lr, r0, lsl #14
    561c:	06010200 	streq	r0, [r1], -r0, lsl #4
    5620:	00000c4d 	andeq	r0, r0, sp, asr #24
    5624:	5b050202 	blpl	145e34 <__ccfg+0x125e8c>
    5628:	0200000a 	andeq	r0, r0, #10
    562c:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    5630:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5634:	0007e805 	andeq	lr, r7, r5, lsl #16
    5638:	08010200 	stmdaeq	r1, {r9}
    563c:	00000c4b 	andeq	r0, r0, fp, asr #24
    5640:	48070202 	stmdami	r7, {r1, r9}
    5644:	0300000d 	movweq	r0, #13
    5648:	00002996 	muleq	r0, r6, r9
    564c:	5b193402 	blpl	65265c <__ccfg+0x6326b4>
    5650:	02000000 	andeq	r0, r0, #0
    5654:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
    5658:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    565c:	00041807 	andeq	r1, r4, r7, lsl #16
    5660:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5664:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5668:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    566c:	05000004 	streq	r0, [r0, #-4]
    5670:	00008204 	andeq	r8, r0, r4, lsl #4
    5674:	00770600 	rsbseq	r0, r7, r0, lsl #12
    5678:	01070000 	mrseq	r0, (UNDEF: 7)
    567c:	004f0405 	subeq	r0, pc, r5, lsl #8
    5680:	56080000 	strpl	r0, [r8], -r0
    5684:	01000019 	tsteq	r0, r9, lsl r0
    5688:	004f117f 	subeq	r1, pc, pc, ror r1	; <UNPREDICTABLE>
    568c:	01010000 	mrseq	r0, (UNDEF: 1)
    5690:	00473508 	subeq	r3, r7, r8, lsl #10
    5694:	11800100 	orrne	r0, r0, r0, lsl #2
    5698:	0000004f 	andeq	r0, r0, pc, asr #32
    569c:	a7080101 	strge	r0, [r8, -r1, lsl #2]
    56a0:	01000019 	tsteq	r0, r9, lsl r0
    56a4:	004f1181 	subeq	r1, pc, r1, lsl #3
    56a8:	01010000 	mrseq	r0, (UNDEF: 1)
    56ac:	0019a208 	andseq	sl, r9, r8, lsl #4
    56b0:	11820100 	orrne	r0, r2, r0, lsl #2
    56b4:	0000004f 	andeq	r0, r0, pc, asr #32
    56b8:	5d080101 	stfpls	f0, [r8, #-4]
    56bc:	01000019 	tsteq	r0, r9, lsl r0
    56c0:	004f1183 	subeq	r1, pc, r3, lsl #3
    56c4:	01010000 	mrseq	r0, (UNDEF: 1)
    56c8:	00192808 	andseq	r2, r9, r8, lsl #16
    56cc:	11840100 	orrne	r0, r4, r0, lsl #2
    56d0:	0000004f 	andeq	r0, r0, pc, asr #32
    56d4:	7d090101 	stfvcs	f0, [r9, #-4]
    56d8:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    56dc:	0a000000 	beq	56e4 <patchGenfskRfe+0x468>
    56e0:	00000070 	andeq	r0, r0, r0, ror r0
    56e4:	de060031 	mcrle	0, 0, r0, cr6, cr1, {1}
    56e8:	0b000000 	bleq	56f0 <patchGenfskRfe+0x474>
    56ec:	000019c0 	andeq	r1, r0, r0, asr #19
    56f0:	ee0f8e01 	cdp	14, 0, cr8, cr15, cr1, {0}
    56f4:	01000000 	mrseq	r0, (UNDEF: 0)
    56f8:	00000305 	andeq	r0, r0, r5, lsl #6
    56fc:	ae0c0000 	cdpge	0, 0, cr0, cr12, cr0, {0}
    5700:	01000019 	tsteq	r0, r9, lsl r0
    5704:	01010128 	tsteq	r1, r8, lsr #2
    5708:	00002482 	andeq	r2, r0, r2, lsl #9
    570c:	00002484 	andeq	r2, r0, r4, lsl #9
    5710:	390c9c01 	stmdbcc	ip, {r0, sl, fp, ip, pc}
    5714:	01000019 	tsteq	r0, r9, lsl r0
    5718:	01010116 	tsteq	r1, r6, lsl r1
    571c:	00002480 	andeq	r2, r0, r0, lsl #9
    5720:	00002482 	andeq	r2, r0, r2, lsl #9
    5724:	490c9c01 	stmdbmi	ip, {r0, sl, fp, ip, pc}
    5728:	01000019 	tsteq	r0, r9, lsl r0
    572c:	01010104 	tsteq	r1, r4, lsl #2
    5730:	0000247e 	andeq	r2, r0, lr, ror r4
    5734:	00002480 	andeq	r2, r0, r0, lsl #9
    5738:	010d9c01 	tsteq	sp, r1, lsl #24
    573c:	000019d7 	ldrdeq	r1, [r0], -r7
    5740:	0101d201 	tsteq	r1, r1, lsl #4
    5744:	00002484 	andeq	r2, r0, r4, lsl #9
    5748:	000024c8 	andeq	r2, r0, r8, asr #9
    574c:	300e9c01 	andcc	r9, lr, r1, lsl #24
    5750:	01000019 	tsteq	r0, r9, lsl r0
    5754:	00840fd4 	ldrdeq	r0, [r4], r4
    5758:	224d0000 	subcs	r0, sp, #0
    575c:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
    5760:	01000019 	tsteq	r0, r9, lsl r0
    5764:	00841ad4 	ldrdeq	r1, [r4], r4
    5768:	226b0000 	rsbcs	r0, fp, #0
    576c:	00000000 	andeq	r0, r0, r0
    5770:	00000537 	andeq	r0, r0, r7, lsr r5
    5774:	13020003 	movwne	r0, #8195	; 0x2003
    5778:	01040000 	mrseq	r0, (UNDEF: 4)
    577c:	000000a3 	andeq	r0, r0, r3, lsr #1
    5780:	001a6f0c 	andseq	r6, sl, ip, lsl #30
    5784:	000dec00 	andeq	lr, sp, r0, lsl #24
    5788:	003f9f00 	eorseq	r9, pc, r0, lsl #30
    578c:	06010200 	streq	r0, [r1], -r0, lsl #4
    5790:	00000c4d 	andeq	r0, r0, sp, asr #24
    5794:	5b050202 	blpl	145fa4 <__ccfg+0x125ffc>
    5798:	0200000a 	andeq	r0, r0, #10
    579c:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    57a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    57a4:	0007e805 	andeq	lr, r7, r5, lsl #16
    57a8:	29fe0300 	ldmibcs	lr!, {r8, r9}^
    57ac:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    57b0:	00004518 	andeq	r4, r0, r8, lsl r5
    57b4:	08010200 	stmdaeq	r1, {r9}
    57b8:	00000c4b 	andeq	r0, r0, fp, asr #24
    57bc:	002df403 	eoreq	pc, sp, r3, lsl #8
    57c0:	19310100 	ldmdbne	r1!, {r8}
    57c4:	00000058 	andeq	r0, r0, r8, asr r0
    57c8:	48070202 	stmdami	r7, {r1, r9}
    57cc:	0300000d 	movweq	r0, #13
    57d0:	00002996 	muleq	r0, r6, r9
    57d4:	6b193401 	blvs	6527e0 <__ccfg+0x632838>
    57d8:	02000000 	andeq	r0, r0, #0
    57dc:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
    57e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    57e4:	00041807 	andeq	r1, r4, r7, lsl #16
    57e8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    57ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
    57f0:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    57f4:	05000004 	streq	r0, [r0, #-4]
    57f8:	092f0258 	stmdbeq	pc!, {r3, r4, r6, r9}	; <UNPREDICTABLE>
    57fc:	000001af 	andeq	r0, r0, pc, lsr #3
    5800:	001b9206 	andseq	r9, fp, r6, lsl #4
    5804:	10310200 	eorsne	r0, r1, r0, lsl #4
    5808:	0000005f 	andeq	r0, r0, pc, asr r0
    580c:	1aa70600 	bne	fe9c7014 <_estack+0xde9c2014>
    5810:	32020000 	andcc	r0, r2, #0
    5814:	00005f10 	andeq	r5, r0, r0, lsl pc
    5818:	37060400 	strcc	r0, [r6, -r0, lsl #8]
    581c:	0200001a 	andeq	r0, r0, #26
    5820:	005f1033 	subseq	r1, pc, r3, lsr r0	; <UNPREDICTABLE>
    5824:	06080000 	streq	r0, [r8], -r0
    5828:	00001a21 	andeq	r1, r0, r1, lsr #20
    582c:	5f103402 	svcpl	0x00103402
    5830:	0c000000 	stceq	0, cr0, [r0], {-0}
    5834:	0019e006 	andseq	lr, r9, r6
    5838:	10350200 	eorsne	r0, r5, r0, lsl #4
    583c:	0000005f 	andeq	r0, r0, pc, asr r0
    5840:	19f10610 	ldmibne	r1!, {r4, r9, sl}^
    5844:	36020000 	strcc	r0, [r2], -r0
    5848:	00005f10 	andeq	r5, r0, r0, lsl pc
    584c:	11061400 	tstne	r6, r0, lsl #8
    5850:	0200001a 	andeq	r0, r0, #26
    5854:	005f1037 	subseq	r1, pc, r7, lsr r0	; <UNPREDICTABLE>
    5858:	06180000 	ldreq	r0, [r8], -r0
    585c:	00001b37 	andeq	r1, r0, r7, lsr fp
    5860:	5f103802 	svcpl	0x00103802
    5864:	1c000000 	stcne	0, cr0, [r0], {-0}
    5868:	001a4f06 	andseq	r4, sl, r6, lsl #30
    586c:	10390200 	eorsne	r0, r9, r0, lsl #4
    5870:	0000005f 	andeq	r0, r0, pc, asr r0
    5874:	1a5f0620 	bne	17c70fc <__ccfg+0x17a7154>
    5878:	3a020000 	bcc	85880 <__ccfg+0x658d8>
    587c:	00005f10 	andeq	r5, r0, r0, lsl pc
    5880:	5d062400 	cfstrspl	mvf2, [r6, #-0]
    5884:	0200001b 	andeq	r0, r0, #27
    5888:	005f103b 	subseq	r1, pc, fp, lsr r0	; <UNPREDICTABLE>
    588c:	06280000 	strteq	r0, [r8], -r0
    5890:	00001b6d 	andeq	r1, r0, sp, ror #22
    5894:	5f103c02 	svcpl	0x00103c02
    5898:	2c000000 	stccs	0, cr0, [r0], {-0}
    589c:	001a0206 	andseq	r0, sl, r6, lsl #4
    58a0:	103d0200 	eorsne	r0, sp, r0, lsl #4
    58a4:	0000005f 	andeq	r0, r0, pc, asr r0
    58a8:	1afd0630 	bne	fff47170 <_estack+0xdff42170>
    58ac:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    58b0:	00005f10 	andeq	r5, r0, r0, lsl pc
    58b4:	a2063400 	andge	r3, r6, #0, 8
    58b8:	0200001b 	andeq	r0, r0, #27
    58bc:	005f103f 	subseq	r1, pc, pc, lsr r0	; <UNPREDICTABLE>
    58c0:	06380000 	ldrteq	r0, [r8], -r0
    58c4:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    58c8:	5f104002 	svcpl	0x00104002
    58cc:	3c000000 	stccc	0, cr0, [r0], {-0}
    58d0:	001acc06 	andseq	ip, sl, r6, lsl #24
    58d4:	10410200 	subne	r0, r1, r0, lsl #4
    58d8:	0000005f 	andeq	r0, r0, pc, asr r0
    58dc:	1b210640 	blne	8471e4 <__ccfg+0x82723c>
    58e0:	42020000 	andmi	r0, r2, #0
    58e4:	00005f10 	andeq	r5, r0, r0, lsl pc
    58e8:	0d064400 	cfstrseq	mvf4, [r6, #-0]
    58ec:	0200001b 	andeq	r0, r0, #27
    58f0:	005f1043 	subseq	r1, pc, r3, asr #32
    58f4:	06480000 	strbeq	r0, [r8], -r0
    58f8:	00001b48 	andeq	r1, r0, r8, asr #22
    58fc:	5f104402 	svcpl	0x00104402
    5900:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5904:	001b7d06 	andseq	r7, fp, r6, lsl #26
    5908:	10450200 	subne	r0, r5, r0, lsl #4
    590c:	0000005f 	andeq	r0, r0, pc, asr r0
    5910:	1ae70650 	bne	ff9c7258 <_estack+0xdf9c2258>
    5914:	46020000 	strmi	r0, [r2], -r0
    5918:	00005f10 	andeq	r5, r0, r0, lsl pc
    591c:	03005400 	movweq	r5, #1024	; 0x400
    5920:	00001ae0 	andeq	r1, r0, r0, ror #21
    5924:	87034702 	strhi	r4, [r3, -r2, lsl #14]
    5928:	07000000 	streq	r0, [r0, -r0]
    592c:	000001af 	andeq	r0, r0, pc, lsr #3
    5930:	001a3008 	andseq	r3, sl, r8
    5934:	154e0200 	strbne	r0, [lr, #-512]	; 0xfffffe00
    5938:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    593c:	dd030101 	stfles	f0, [r3, #-4]
    5940:	03000028 	movweq	r0, #40	; 0x28
    5944:	004c1227 	subeq	r1, ip, r7, lsr #4
    5948:	ce070000 	cdpgt	0, 0, cr0, cr7, cr0, {0}
    594c:	09000001 	stmdbeq	r0, {r0}
    5950:	000001ce 	andeq	r0, r0, lr, asr #3
    5954:	001da403 	andseq	sl, sp, r3, lsl #8
    5958:	122b0300 	eorne	r0, fp, #0, 6
    595c:	00000039 	andeq	r0, r0, r9, lsr r0
    5960:	0001e409 	andeq	lr, r1, r9, lsl #8
    5964:	292f0300 	stmdbcs	pc!, {r8, r9}	; <UNPREDICTABLE>
    5968:	2c030000 	stccs	0, cr0, [r3], {-0}
    596c:	00005f12 	andeq	r5, r0, r2, lsl pc
    5970:	01f50700 	mvnseq	r0, r0, lsl #14
    5974:	36030000 	strcc	r0, [r3], -r0
    5978:	03000006 	movweq	r0, #6
    597c:	005f122d 	subseq	r1, pc, sp, lsr #4
    5980:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    5984:	a0093203 	andge	r3, r9, r3, lsl #4
    5988:	0a000002 	beq	5998 <patchImageGenfsk+0x68>
    598c:	0000002b 	andeq	r0, r0, fp, lsr #32
    5990:	e4073403 	str	r3, [r7], #-1027	; 0xfffffbfd
    5994:	01000001 	tsteq	r0, r1
    5998:	0a000701 	beq	75a4 <__exidx_end+0x19a4>
    599c:	0000063c 	andeq	r0, r0, ip, lsr r6
    59a0:	e4033503 	str	r3, [r3], #-1283	; 0xfffffafd
    59a4:	01000001 	tsteq	r0, r1
    59a8:	0a000601 	beq	71b4 <__exidx_end+0x15b4>
    59ac:	000002de 	ldrdeq	r0, [r0], -lr
    59b0:	e4033603 	str	r3, [r3], #-1539	; 0xfffff9fd
    59b4:	01000001 	tsteq	r0, r1
    59b8:	0a000501 	beq	6dc4 <__exidx_end+0x11c4>
    59bc:	000006a7 	andeq	r0, r0, r7, lsr #13
    59c0:	e4033703 	str	r3, [r3], #-1795	; 0xfffff8fd
    59c4:	01000001 	tsteq	r0, r1
    59c8:	0a000401 	beq	69d4 <__exidx_end+0xdd4>
    59cc:	00000a8f 	andeq	r0, r0, pc, lsl #21
    59d0:	e4033803 	str	r3, [r3], #-2051	; 0xfffff7fd
    59d4:	01000001 	tsteq	r0, r1
    59d8:	06000004 	streq	r0, [r0], -r4
    59dc:	0000064b 	andeq	r0, r0, fp, asr #12
    59e0:	e4073a03 	str	r3, [r7], #-2563	; 0xfffff5fd
    59e4:	01000001 	tsteq	r0, r1
    59e8:	0008eb06 	andeq	lr, r8, r6, lsl #22
    59ec:	033c0300 	teqeq	ip, #0, 6
    59f0:	000001e4 	andeq	r0, r0, r4, ror #3
    59f4:	0f1c0602 	svceq	0x001c0602
    59f8:	3d030000 	stccc	0, cr0, [r3, #-0]
    59fc:	0001e403 	andeq	lr, r1, r3, lsl #8
    5a00:	03060300 	movweq	r0, #25344	; 0x6300
    5a04:	03000009 	movweq	r0, #9
    5a08:	01f5083f 	mvnseq	r0, pc, lsr r8
    5a0c:	00040000 	andeq	r0, r4, r0
    5a10:	00031403 	andeq	r1, r3, r3, lsl #8
    5a14:	03410300 	movteq	r0, #4864	; 0x1300
    5a18:	00000212 	andeq	r0, r0, r2, lsl r2
    5a1c:	0002a009 	andeq	sl, r2, r9
    5a20:	06ae0800 	strteq	r0, [lr], r0, lsl #16
    5a24:	43030000 	movwmi	r0, #12288	; 0x3000
    5a28:	0002ac1a 	andeq	sl, r2, sl, lsl ip
    5a2c:	08010100 	stmdaeq	r1, {r8}
    5a30:	00000197 	muleq	r0, r7, r1
    5a34:	cd0e4503 	cfstr32gt	mvfx4, [lr, #-12]
    5a38:	01000002 	tsteq	r0, r2
    5a3c:	d3040b01 	movwle	r0, #19201	; 0x4b01
    5a40:	02000002 	andeq	r0, r0, #2
    5a44:	0c540801 	mrrceq	8, 0, r0, r4, cr1
    5a48:	d3070000 	movwle	r0, #28672	; 0x7000
    5a4c:	08000002 	stmdaeq	r0, {r1}
    5a50:	0000031d 	andeq	r0, r0, sp, lsl r3
    5a54:	cd1e4503 	cfldr32gt	mvfx4, [lr, #-12]
    5a58:	01000002 	tsteq	r0, r2
    5a5c:	04080501 	streq	r0, [r8], #-1281	; 0xfffffaff
    5a60:	031e098f 	tsteq	lr, #2342912	; 0x23c000
    5a64:	ba060000 	blt	185a6c <__ccfg+0x165ac4>
    5a68:	0400000c 	streq	r0, [r0], #-12
    5a6c:	005f0b90 			; <UNDEFINED> instruction: 0x005f0b90
    5a70:	06000000 	streq	r0, [r0], -r0
    5a74:	00001057 	andeq	r1, r0, r7, asr r0
    5a78:	ce089104 	mvfgte	f1, f4
    5a7c:	04000001 	streq	r0, [r0], #-1
    5a80:	0001bc06 	andeq	fp, r1, r6, lsl #24
    5a84:	10920400 	addsne	r0, r2, r0, lsl #8
    5a88:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5a8c:	ae030006 	cdpge	0, 0, cr0, cr3, cr6, {0}
    5a90:	0400000c 	streq	r0, [r0], #-12
    5a94:	02ed0393 	rsceq	r0, sp, #1275068418	; 0x4c000002
    5a98:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    5a9c:	35000003 	strcc	r0, [r0, #-3]
    5aa0:	0d000003 	stceq	0, cr0, [r0, #-12]
    5aa4:	092d0800 	stmfdeq	sp!, {fp}
    5aa8:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    5aac:	00032a0f 	andeq	r2, r3, pc, lsl #20
    5ab0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5ab4:	09910501 	ldmibeq	r1, {r0, r8, sl}
    5ab8:	0000036d 	andeq	r0, r0, sp, ror #6
    5abc:	00090a0a 	andeq	r0, r9, sl, lsl #20
    5ac0:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    5ac4:	000001e4 	andeq	r0, r0, r4, ror #3
    5ac8:	00010701 	andeq	r0, r1, r1, lsl #14
    5acc:	0005bc0a 	andeq	fp, r5, sl, lsl #24
    5ad0:	03940500 	orrseq	r0, r4, #0, 10
    5ad4:	000001e4 	andeq	r0, r0, r4, ror #3
    5ad8:	00000101 	andeq	r0, r0, r1, lsl #2
    5adc:	0a9b0300 	beq	fe6c66e4 <_estack+0xde6c16e4>
    5ae0:	96050000 	strls	r0, [r5], -r0
    5ae4:	00034303 	andeq	r4, r3, r3, lsl #6
    5ae8:	036d0700 	cmneq	sp, #0, 14
    5aec:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    5af0:	89000003 	stmdbhi	r0, {r0, r1}
    5af4:	0d000003 	stceq	0, cr0, [r0, #-12]
    5af8:	037e0700 	cmneq	lr, #0, 14
    5afc:	a1080000 	mrsge	r0, (UNDEF: 8)
    5b00:	05000003 	streq	r0, [r0, #-3]
    5b04:	0389179c 	orreq	r1, r9, #156, 14	; 0x2700000
    5b08:	01010000 	mrseq	r0, (UNDEF: 1)
    5b0c:	0001da0c 	andeq	sp, r1, ip, lsl #20
    5b10:	0003a700 	andeq	sl, r3, r0, lsl #14
    5b14:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    5b18:	0000039c 	muleq	r0, ip, r3
    5b1c:	0005fe08 	andeq	pc, r5, r8, lsl #28
    5b20:	13060600 	movwne	r0, #26112	; 0x6600
    5b24:	000003a7 	andeq	r0, r0, r7, lsr #7
    5b28:	cd080101 	stfgts	f0, [r8, #-4]
    5b2c:	04000008 	streq	r0, [r0], #-8
    5b30:	01f50ec3 	mvnseq	r0, r3, asr #29
    5b34:	01010000 	mrseq	r0, (UNDEF: 1)
    5b38:	000c620e 	andeq	r6, ip, lr, lsl #4
    5b3c:	016e0700 	cmneq	lr, r0, lsl #14
    5b40:	0003d510 	andeq	sp, r3, r0, lsl r5
    5b44:	db040b00 	blle	10874c <__ccfg+0xe87a4>
    5b48:	0f000003 	svceq	0x00000003
    5b4c:	0003e701 	andeq	lr, r3, r1, lsl #14
    5b50:	01ce1000 	biceq	r1, lr, r0
    5b54:	0c000000 	stceq	0, cr0, [r0], {-0}
    5b58:	000002da 	ldrdeq	r0, [r0], -sl
    5b5c:	000003f2 	strdeq	r0, [r0], -r2
    5b60:	e707000d 	str	r0, [r7, -sp]
    5b64:	11000003 	tstne	r0, r3
    5b68:	000009d6 	ldrdeq	r0, [r0], -r6
    5b6c:	16017f07 	strne	r7, [r1], -r7, lsl #30
    5b70:	000003f2 	strdeq	r0, [r0], -r2
    5b74:	8d110101 	ldfhis	f0, [r1, #-4]
    5b78:	07000003 	streq	r0, [r0, -r3]
    5b7c:	01140182 	tsteq	r4, r2, lsl #3
    5b80:	01000002 	tsteq	r0, r2
    5b84:	03651101 	cmneq	r5, #1073741824	; 0x40000000
    5b88:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    5b8c:	01f50e02 	mvnseq	r0, r2, lsl #28
    5b90:	01010000 	mrseq	r0, (UNDEF: 1)
    5b94:	03070812 	movweq	r0, #30738	; 0x7812
    5b98:	044b0903 	strbeq	r0, [fp], #-2307	; 0xfffff6fd
    5b9c:	83130000 	tsthi	r3, #0
    5ba0:	0700003c 	smladxeq	r0, ip, r0, r0
    5ba4:	ce070307 	cdpgt	3, 0, cr0, cr7, cr7, {0}
    5ba8:	00000001 	andeq	r0, r0, r1
    5bac:	000faf13 	andeq	sl, pc, r3, lsl pc	; <UNPREDICTABLE>
    5bb0:	03080700 	movweq	r0, #34560	; 0x8700
    5bb4:	00020608 	andeq	r0, r2, r8, lsl #12
    5bb8:	0e000400 	cfcpyseq	mvf0, mvf0
    5bbc:	000009f9 	strdeq	r0, [r0], -r9
    5bc0:	03030907 	movweq	r0, #14599	; 0x3907
    5bc4:	00000424 	andeq	r0, r0, r4, lsr #8
    5bc8:	00002014 	andeq	r2, r0, r4, lsl r0
    5bcc:	0b073000 	bleq	1d1bd4 <__ccfg+0x1b1c2c>
    5bd0:	04bb0803 	ldrteq	r0, [fp], #2051	; 0x803
    5bd4:	06130000 	ldreq	r0, [r3], -r0
    5bd8:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    5bdc:	ce080314 	mcrgt	3, 0, r0, cr8, cr4, {0}
    5be0:	00000001 	andeq	r0, r0, r1
    5be4:	000bd713 	andeq	sp, fp, r3, lsl r7
    5be8:	03150700 	tsteq	r5, #0, 14
    5bec:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5bf0:	70130200 	andsvc	r0, r3, r0, lsl #4
    5bf4:	0700004c 	streq	r0, [r0, -ip, asr #32]
    5bf8:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    5bfc:	04000003 	streq	r0, [r0], #-3
    5c00:	00473613 	subeq	r3, r7, r3, lsl r6
    5c04:	03170700 	tsteq	r7, #0, 14
    5c08:	00020609 	andeq	r0, r2, r9, lsl #12
    5c0c:	0f130800 	svceq	0x00130800
    5c10:	07000000 	streq	r0, [r0, -r0]
    5c14:	bb0f0318 	bllt	3c687c <__ccfg+0x3a68d4>
    5c18:	0c000004 	stceq	0, cr0, [r0], {4}
    5c1c:	00094d13 	andeq	r4, r9, r3, lsl sp
    5c20:	03190700 	tsteq	r9, #0, 14
    5c24:	0004cb15 	andeq	ip, r4, r5, lsl fp
    5c28:	0c002c00 	stceq	12, cr2, [r0], {-0}
    5c2c:	0000044b 	andeq	r0, r0, fp, asr #8
    5c30:	000004cb 	andeq	r0, r0, fp, asr #9
    5c34:	00008015 	andeq	r8, r0, r5, lsl r0
    5c38:	0b000300 	bleq	6840 <__exidx_end+0xc40>
    5c3c:	00045804 	andeq	r5, r4, r4, lsl #16
    5c40:	0bcc0e00 	bleq	ff309448 <_estack+0xdf304448>
    5c44:	1c070000 	stcne	0, cr0, [r7], {-0}
    5c48:	04581b03 	ldrbeq	r1, [r8], #-2819	; 0xfffff4fd
    5c4c:	ac110000 	ldcge	0, cr0, [r1], {-0}
    5c50:	0700000b 	streq	r0, [r0, -fp]
    5c54:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    5c58:	01000004 	tsteq	r0, r4
    5c5c:	d1040b01 	tstle	r4, r1, lsl #22
    5c60:	08000004 	stmdaeq	r0, {r2}
    5c64:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5c68:	ce131d08 	cdpgt	13, 1, cr1, cr3, cr8, {0}
    5c6c:	01000001 	tsteq	r0, r1
    5c70:	02e50801 	rsceq	r0, r5, #65536	; 0x10000
    5c74:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    5c78:	0001df1a 	andeq	sp, r1, sl, lsl pc
    5c7c:	08010100 	stmdaeq	r1, {r8}
    5c80:	00000c59 	andeq	r0, r0, r9, asr ip
    5c84:	df241e08 	svcle	0x00241e08
    5c88:	01000001 	tsteq	r0, r1
    5c8c:	0c770801 	ldcleq	8, cr0, [r7], #-4
    5c90:	22080000 	andcs	r0, r8, #0
    5c94:	0004ed14 	andeq	lr, r4, r4, lsl sp
    5c98:	16010100 	strne	r0, [r1], -r0, lsl #2
    5c9c:	000001c0 	andeq	r0, r0, r0, asr #3
    5ca0:	0e021709 	cdpeq	7, 0, cr1, cr2, cr9, {0}
    5ca4:	ffa80305 			; <UNDEFINED> instruction: 0xffa80305
    5ca8:	00000001 	andeq	r0, r0, r1
    5cac:	03000005 	movweq	r0, #5
    5cb0:	00142100 	andseq	r2, r4, r0, lsl #2
    5cb4:	a3010400 	movwge	r0, #5120	; 0x1400
    5cb8:	0c000000 	stceq	0, cr0, [r0], {-0}
    5cbc:	00001bc4 	andeq	r1, r0, r4, asr #23
    5cc0:	00000dec 	andeq	r0, r0, ip, ror #27
    5cc4:	00000a78 	andeq	r0, r0, r8, ror sl
    5cc8:	00000000 	andeq	r0, r0, r0
    5ccc:	0000412c 	andeq	r4, r0, ip, lsr #2
    5cd0:	4d060102 	stfmis	f0, [r6, #-8]
    5cd4:	0200000c 	andeq	r0, r0, #12
    5cd8:	0a5b0502 	beq	16c70e8 <__ccfg+0x16a7140>
    5cdc:	04020000 	streq	r0, [r2], #-0
    5ce0:	0007ed05 	andeq	lr, r7, r5, lsl #26
    5ce4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5ce8:	000007e8 	andeq	r0, r0, r8, ror #15
    5cec:	0029fe03 	eoreq	pc, r9, r3, lsl #28
    5cf0:	182e0400 	stmdane	lr!, {sl}
    5cf4:	0000004d 	andeq	r0, r0, sp, asr #32
    5cf8:	4b080102 	blmi	206108 <__ccfg+0x1e6160>
    5cfc:	0300000c 	movweq	r0, #12
    5d00:	00002df4 	strdeq	r2, [r0], -r4
    5d04:	60193104 	andsvs	r3, r9, r4, lsl #2
    5d08:	02000000 	andeq	r0, r0, #0
    5d0c:	0d480702 	stcleq	7, cr0, [r8, #-8]
    5d10:	96030000 	strls	r0, [r3], -r0
    5d14:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    5d18:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5d1c:	04020000 	streq	r0, [r2], #-0
    5d20:	00041d07 	andeq	r1, r4, r7, lsl #26
    5d24:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5d28:	00000418 	andeq	r0, r0, r8, lsl r4
    5d2c:	69050404 	stmdbvs	r5, {r2, sl}
    5d30:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5d34:	04220704 	strteq	r0, [r2], #-1796	; 0xfffff8fc
    5d38:	dd030000 	stcle	0, cr0, [r3, #-0]
    5d3c:	05000028 	streq	r0, [r0, #-40]	; 0xffffffd8
    5d40:	00541227 	subseq	r1, r4, r7, lsr #4
    5d44:	8f050000 	svchi	0x00050000
    5d48:	06000000 	streq	r0, [r0], -r0
    5d4c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5d50:	001da403 	andseq	sl, sp, r3, lsl #8
    5d54:	122b0500 	eorne	r0, fp, #0, 10
    5d58:	00000041 	andeq	r0, r0, r1, asr #32
    5d5c:	0000a506 	andeq	sl, r0, r6, lsl #10
    5d60:	00a50500 	adceq	r0, r5, r0, lsl #10
    5d64:	2f030000 	svccs	0x00030000
    5d68:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    5d6c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5d70:	bb050000 	bllt	145d78 <__ccfg+0x125dd0>
    5d74:	03000000 	movweq	r0, #0
    5d78:	00000636 	andeq	r0, r0, r6, lsr r6
    5d7c:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    5d80:	03000000 	movweq	r0, #0
    5d84:	00000ba4 	andeq	r0, r0, r4, lsr #23
    5d88:	e4102e05 	ldr	r2, [r0], #-3589	; 0xfffff1fb
    5d8c:	07000000 	streq	r0, [r0, -r0]
    5d90:	00008f04 	andeq	r8, r0, r4, lsl #30
    5d94:	05080800 	streq	r0, [r8, #-2048]	; 0xfffff800
    5d98:	01780932 	cmneq	r8, r2, lsr r9
    5d9c:	2b090000 	blcs	245da4 <__ccfg+0x225dfc>
    5da0:	05000000 	streq	r0, [r0, #-0]
    5da4:	00a50734 	adceq	r0, r5, r4, lsr r7
    5da8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dac:	3c090007 	stccc	0, cr0, [r9], {7}
    5db0:	05000006 	streq	r0, [r0, #-6]
    5db4:	00a50335 	adceq	r0, r5, r5, lsr r3
    5db8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dbc:	de090006 	cdple	0, 0, cr0, cr9, cr6, {0}
    5dc0:	05000002 	streq	r0, [r0, #-2]
    5dc4:	00a50336 	adceq	r0, r5, r6, lsr r3
    5dc8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dcc:	a7090005 	strge	r0, [r9, -r5]
    5dd0:	05000006 	streq	r0, [r0, #-6]
    5dd4:	00a50337 	adceq	r0, r5, r7, lsr r3
    5dd8:	01010000 	mrseq	r0, (UNDEF: 1)
    5ddc:	8f090004 	svchi	0x00090004
    5de0:	0500000a 	streq	r0, [r0, #-10]
    5de4:	00a50338 	adceq	r0, r5, r8, lsr r3
    5de8:	04010000 	streq	r0, [r1], #-0
    5dec:	4b0a0000 	blmi	285df4 <__ccfg+0x265e4c>
    5df0:	05000006 	streq	r0, [r0, #-6]
    5df4:	00a5073a 	adceq	r0, r5, sl, lsr r7
    5df8:	0a010000 	beq	45e00 <__ccfg+0x25e58>
    5dfc:	000008eb 	andeq	r0, r0, fp, ror #17
    5e00:	a5033c05 	strge	r3, [r3, #-3077]	; 0xfffff3fb
    5e04:	02000000 	andeq	r0, r0, #0
    5e08:	000f1c0a 	andeq	r1, pc, sl, lsl #24
    5e0c:	033d0500 	teqeq	sp, #0, 10
    5e10:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e14:	09030a03 	stmdbeq	r3, {r0, r1, r9, fp}
    5e18:	3f050000 	svccc	0x00050000
    5e1c:	0000bb08 	andeq	fp, r0, r8, lsl #22
    5e20:	03000400 	movweq	r0, #1024	; 0x400
    5e24:	00000314 	andeq	r0, r0, r4, lsl r3
    5e28:	ea034105 	b	d6244 <__ccfg+0xb629c>
    5e2c:	06000000 	streq	r0, [r0], -r0
    5e30:	00000178 	andeq	r0, r0, r8, ror r1
    5e34:	0006ae0b 	andeq	sl, r6, fp, lsl #28
    5e38:	1a430500 	bne	10c7240 <__ccfg+0x10a7298>
    5e3c:	00000184 	andeq	r0, r0, r4, lsl #3
    5e40:	970b0101 	strls	r0, [fp, -r1, lsl #2]
    5e44:	05000001 	streq	r0, [r0, #-1]
    5e48:	01a50e45 			; <UNDEFINED> instruction: 0x01a50e45
    5e4c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e50:	01ab0407 			; <UNDEFINED> instruction: 0x01ab0407
    5e54:	01020000 	mrseq	r0, (UNDEF: 2)
    5e58:	000c5408 	andeq	r5, ip, r8, lsl #8
    5e5c:	01ab0500 			; <UNDEFINED> instruction: 0x01ab0500
    5e60:	1d0b0000 	stcne	0, cr0, [fp, #-0]
    5e64:	05000003 	streq	r0, [r0, #-3]
    5e68:	01a51e45 			; <UNDEFINED> instruction: 0x01a51e45
    5e6c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e70:	8f060808 	svchi	0x00060808
    5e74:	0001f609 	andeq	pc, r1, r9, lsl #12
    5e78:	0cba0a00 	vldmiaeq	sl!, {s0-s-1}
    5e7c:	90060000 	andls	r0, r6, r0
    5e80:	0000670b 	andeq	r6, r0, fp, lsl #14
    5e84:	570a0000 	strpl	r0, [sl, -r0]
    5e88:	06000010 			; <UNDEFINED> instruction: 0x06000010
    5e8c:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    5e90:	0a040000 	beq	105e98 <__ccfg+0xe5ef0>
    5e94:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    5e98:	b1109206 	tstlt	r0, r6, lsl #4
    5e9c:	06000000 	streq	r0, [r0], -r0
    5ea0:	0cae0300 	stceq	3, cr0, [lr]
    5ea4:	93060000 	movwls	r0, #24576	; 0x6000
    5ea8:	0001c503 	andeq	ip, r1, r3, lsl #10
    5eac:	01f60c00 	mvnseq	r0, r0, lsl #24
    5eb0:	020d0000 	andeq	r0, sp, #0
    5eb4:	000d0000 	andeq	r0, sp, r0
    5eb8:	00092d0b 	andeq	r2, r9, fp, lsl #26
    5ebc:	0f990600 	svceq	0x00990600
    5ec0:	00000202 	andeq	r0, r0, r2, lsl #4
    5ec4:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    5ec8:	000000b6 	strheq	r0, [r0], -r6
    5ecc:	91070108 	tstls	r7, r8, lsl #2
    5ed0:	00024b09 	andeq	r4, r2, r9, lsl #22
    5ed4:	090a0900 	stmdbeq	sl, {r8, fp}
    5ed8:	93070000 	movwls	r0, #28672	; 0x7000
    5edc:	0000a507 	andeq	sl, r0, r7, lsl #10
    5ee0:	01070100 	mrseq	r0, (UNDEF: 23)
    5ee4:	05bc0900 	ldreq	r0, [ip, #2304]!	; 0x900
    5ee8:	94070000 	strls	r0, [r7], #-0
    5eec:	0000a503 	andeq	sl, r0, r3, lsl #10
    5ef0:	00010100 	andeq	r0, r1, r0, lsl #2
    5ef4:	9b030000 	blls	c5efc <__ccfg+0xa5f54>
    5ef8:	0700000a 	streq	r0, [r0, -sl]
    5efc:	02210396 	eoreq	r0, r1, #1476395010	; 0x58000002
    5f00:	4b050000 	blmi	145f08 <__ccfg+0x125f60>
    5f04:	0c000002 	stceq	0, cr0, [r0], {2}
    5f08:	00000257 	andeq	r0, r0, r7, asr r2
    5f0c:	00000267 	andeq	r0, r0, r7, ror #4
    5f10:	5c05000d 	stcpl	0, cr0, [r5], {13}
    5f14:	0b000002 	bleq	5f24 <__exidx_end+0x324>
    5f18:	000003a1 	andeq	r0, r0, r1, lsr #7
    5f1c:	67179c07 	ldrvs	r9, [r7, -r7, lsl #24]
    5f20:	01000002 	tsteq	r0, r2
    5f24:	009b0c01 	addseq	r0, fp, r1, lsl #24
    5f28:	02850000 	addeq	r0, r5, #0
    5f2c:	000d0000 	andeq	r0, sp, r0
    5f30:	00027a05 	andeq	r7, r2, r5, lsl #20
    5f34:	05fe0b00 	ldrbeq	r0, [lr, #2816]!	; 0xb00
    5f38:	06080000 	streq	r0, [r8], -r0
    5f3c:	00028513 	andeq	r8, r2, r3, lsl r5
    5f40:	0b010100 	bleq	46348 <__ccfg+0x263a0>
    5f44:	000008cd 	andeq	r0, r0, sp, asr #17
    5f48:	bb0ec306 	bllt	3b6b68 <__ccfg+0x396bc0>
    5f4c:	01000000 	mrseq	r0, (UNDEF: 0)
    5f50:	0c620e01 	stcleq	14, cr0, [r2], #-4
    5f54:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    5f58:	02b31001 	adcseq	r1, r3, #1
    5f5c:	04070000 	streq	r0, [r7], #-0
    5f60:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
    5f64:	02c5010f 	sbceq	r0, r5, #-1073741821	; 0xc0000003
    5f68:	8f100000 	svchi	0x00100000
    5f6c:	00000000 	andeq	r0, r0, r0
    5f70:	0001b20c 	andeq	fp, r1, ip, lsl #4
    5f74:	0002d000 	andeq	sp, r2, r0
    5f78:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5f7c:	000002c5 	andeq	r0, r0, r5, asr #5
    5f80:	0009d611 	andeq	sp, r9, r1, lsl r6
    5f84:	017f0900 	cmneq	pc, r0, lsl #18
    5f88:	0002d016 	andeq	sp, r2, r6, lsl r0
    5f8c:	11010100 	mrsne	r0, (UNDEF: 17)
    5f90:	0000038d 	andeq	r0, r0, sp, lsl #7
    5f94:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    5f98:	000000c7 	andeq	r0, r0, r7, asr #1
    5f9c:	65110101 	ldrvs	r0, [r1, #-257]	; 0xfffffeff
    5fa0:	09000003 	stmdbeq	r0, {r0, r1}
    5fa4:	bb0e02d8 	bllt	386b0c <__ccfg+0x366b64>
    5fa8:	01000000 	mrseq	r0, (UNDEF: 0)
    5fac:	09081201 	stmdbeq	r8, {r0, r9, ip}
    5fb0:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    5fb4:	13000003 	movwne	r0, #3
    5fb8:	00003c83 	andeq	r3, r0, r3, lsl #25
    5fbc:	07030709 	streq	r0, [r3, -r9, lsl #14]
    5fc0:	0000008f 	andeq	r0, r0, pc, lsl #1
    5fc4:	0faf1300 	svceq	0x00af1300
    5fc8:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    5fcc:	00cc0803 	sbceq	r0, ip, r3, lsl #16
    5fd0:	00040000 	andeq	r0, r4, r0
    5fd4:	0009f90e 	andeq	pc, r9, lr, lsl #18
    5fd8:	03090900 	movweq	r0, #39168	; 0x9900
    5fdc:	00030203 	andeq	r0, r3, r3, lsl #4
    5fe0:	00201400 	eoreq	r1, r0, r0, lsl #8
    5fe4:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    5fe8:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    5fec:	13000003 	movwne	r0, #3
    5ff0:	00001f06 	andeq	r1, r0, r6, lsl #30
    5ff4:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    5ff8:	0000008f 	andeq	r0, r0, pc, lsl #1
    5ffc:	0bd71300 	bleq	ff5cac04 <_estack+0xdf5c5c04>
    6000:	15090000 	strne	r0, [r9, #-0]
    6004:	008f0803 	addeq	r0, pc, r3, lsl #16
    6008:	13020000 	movwne	r0, #8192	; 0x2000
    600c:	00004c70 	andeq	r4, r0, r0, ror ip
    6010:	0b031609 	bleq	cb83c <__ccfg+0xab894>
    6014:	000002a6 	andeq	r0, r0, r6, lsr #5
    6018:	47361304 	ldrmi	r1, [r6, -r4, lsl #6]!
    601c:	17090000 	strne	r0, [r9, -r0]
    6020:	00cc0903 	sbceq	r0, ip, r3, lsl #18
    6024:	13080000 	movwne	r0, #32768	; 0x8000
    6028:	0000000f 	andeq	r0, r0, pc
    602c:	0f031809 	svceq	0x00031809
    6030:	00000399 	muleq	r0, r9, r3
    6034:	094d130c 	stmdbeq	sp, {r2, r3, r8, r9, ip}^
    6038:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    603c:	03a91503 			; <UNDEFINED> instruction: 0x03a91503
    6040:	002c0000 	eoreq	r0, ip, r0
    6044:	0003290c 	andeq	r2, r3, ip, lsl #18
    6048:	0003a900 	andeq	sl, r3, r0, lsl #18
    604c:	00881500 	addeq	r1, r8, r0, lsl #10
    6050:	00030000 	andeq	r0, r3, r0
    6054:	03360407 	teqeq	r6, #117440512	; 0x7000000
    6058:	cc0e0000 	stcgt	0, cr0, [lr], {-0}
    605c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6060:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    6064:	11000003 	tstne	r0, r3
    6068:	00000bac 	andeq	r0, r0, ip, lsr #23
    606c:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    6070:	000003cb 	andeq	r0, r0, fp, asr #7
    6074:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    6078:	000003af 	andeq	r0, r0, pc, lsr #7
    607c:	0006ff0b 	andeq	pc, r6, fp, lsl #30
    6080:	131d0a00 	tstne	sp, #0, 20
    6084:	0000008f 	andeq	r0, r0, pc, lsl #1
    6088:	e50b0101 	str	r0, [fp, #-257]	; 0xfffffeff
    608c:	0a000002 	beq	609c <__exidx_end+0x49c>
    6090:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    6094:	01010000 	mrseq	r0, (UNDEF: 1)
    6098:	000c590b 	andeq	r5, ip, fp, lsl #18
    609c:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    60a0:	000000a0 	andeq	r0, r0, r0, lsr #1
    60a4:	770b0101 	strvc	r0, [fp, -r1, lsl #2]
    60a8:	0a00000c 	beq	60e0 <__exidx_end+0x4e0>
    60ac:	03cb1422 	biceq	r1, fp, #570425344	; 0x22000000
    60b0:	01010000 	mrseq	r0, (UNDEF: 1)
    60b4:	00026c16 	andeq	r6, r2, r6, lsl ip
    60b8:	100d0100 	andne	r0, sp, r0, lsl #2
    60bc:	51fd0305 	mvnspl	r0, r5, lsl #6
    60c0:	01170000 	tsteq	r7, r0
    60c4:	00001c0e 	andeq	r1, r0, lr, lsl #24
    60c8:	01061101 	tsteq	r6, r1, lsl #2
	...
    60d4:	04bb9c01 	ldrteq	r9, [fp], #3073	; 0xc01
    60d8:	73180000 	tstvc	r8, #0
    60dc:	11010074 	tstne	r1, r4, ror r0
    60e0:	00008f1c 	andeq	r8, r0, ip, lsl pc
    60e4:	00228900 	eoreq	r8, r2, r0, lsl #18
    60e8:	1c091900 			; <UNDEFINED> instruction: 0x1c091900
    60ec:	11010000 	mrsne	r0, (UNDEF: 1)
    60f0:	00021b2c 	andeq	r1, r2, ip, lsr #22
    60f4:	0022a700 	eoreq	sl, r2, r0, lsl #14
    60f8:	61761800 	cmnvs	r6, r0, lsl #16
    60fc:	1101006c 	tstne	r1, ip, rrx
    6100:	0000d83a 	andeq	sp, r0, sl, lsr r8
    6104:	0022c500 	eoreq	ip, r2, r0, lsl #10
    6108:	00701a00 	rsbseq	r1, r0, r0, lsl #20
    610c:	bb121301 	bllt	48ad18 <__ccfg+0x46ad70>
    6110:	1b000004 	blne	6128 <__exidx_end+0x528>
    6114:	14010069 	strne	r0, [r1], #-105	; 0xffffff97
    6118:	00008f07 	andeq	r8, r0, r7, lsl #30
    611c:	0022e300 	eoreq	lr, r2, r0, lsl #6
    6120:	00761a00 	rsbseq	r1, r6, r0, lsl #20
    6124:	a5071501 	strge	r1, [r7, #-1281]	; 0xfffffaff
    6128:	1c000000 	stcne	0, cr0, [r0], {-0}
    612c:	000004d4 	ldrdeq	r0, [r0], -r4
	...
    6138:	1c031c01 	stcne	12, cr1, [r3], {1}
    613c:	000004de 	ldrdeq	r0, [r0], -lr
	...
    6148:	1d031f01 	stcne	15, cr1, [r3, #-4]
    614c:	000004e8 	andeq	r0, r0, r8, ror #9
    6150:	00000000 	andeq	r0, r0, r0
    6154:	00000a50 	andeq	r0, r0, r0, asr sl
    6158:	1e0b2601 	cfmadd32ne	mvax0, mvfx2, mvfx11, mvfx1
    615c:	000004f6 	strdeq	r0, [r0], -r6
    6160:	000022f6 	strdeq	r2, [r0], -r6
    6164:	04070000 	streq	r0, [r7], #-0
    6168:	00000257 	andeq	r0, r0, r7, asr r2
    616c:	1c1e011f 	ldfnes	f0, [lr], {31}
    6170:	0f010000 	svceq	0x00010000
    6174:	00000006 	andeq	r0, r0, r6
    6178:	00000000 	andeq	r0, r0, r0
    617c:	209c0100 	addscs	r0, ip, r0, lsl #2
    6180:	00001260 	andeq	r1, r0, r0, ror #4
    6184:	01355b02 	teqeq	r5, r2, lsl #22
    6188:	0f802003 	svceq	0x00802003
    618c:	50020000 	andpl	r0, r2, r0
    6190:	21030135 	tstcs	r3, r5, lsr r1
    6194:	00001bb7 			; <UNDEFINED> instruction: 0x00001bb7
    6198:	0101a403 	tsteq	r1, r3, lsl #8
    619c:	00000067 	andeq	r0, r0, r7, rrx
    61a0:	11032203 	tstne	r3, r3, lsl #4
    61a4:	a4030000 	strge	r0, [r3], #-0
    61a8:	00006718 	andeq	r6, r0, r8, lsl r7
    61ac:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    61b0:	03000004 	movweq	r0, #4
    61b4:	00161200 	andseq	r1, r6, r0, lsl #4
    61b8:	a3010400 	movwge	r0, #5120	; 0x1400
    61bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    61c0:	00001c68 	andeq	r1, r0, r8, ror #24
    61c4:	00000dec 	andeq	r0, r0, ip, ror #27
    61c8:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    61cc:	00000000 	andeq	r0, r0, r0
    61d0:	000043ce 	andeq	r4, r0, lr, asr #7
    61d4:	4d060102 	stfmis	f0, [r6, #-8]
    61d8:	0200000c 	andeq	r0, r0, #12
    61dc:	0a5b0502 	beq	16c75ec <__ccfg+0x16a7644>
    61e0:	04020000 	streq	r0, [r2], #-0
    61e4:	0007ed05 	andeq	lr, r7, r5, lsl #26
    61e8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    61ec:	000007e8 	andeq	r0, r0, r8, ror #15
    61f0:	0029fe03 	eoreq	pc, r9, r3, lsl #28
    61f4:	182e0300 	stmdane	lr!, {r8, r9}
    61f8:	0000004d 	andeq	r0, r0, sp, asr #32
    61fc:	4b080102 	blmi	20660c <__ccfg+0x1e6664>
    6200:	0300000c 	movweq	r0, #12
    6204:	00002df4 	strdeq	r2, [r0], -r4
    6208:	60193103 	andsvs	r3, r9, r3, lsl #2
    620c:	02000000 	andeq	r0, r0, #0
    6210:	0d480702 	stcleq	7, cr0, [r8, #-8]
    6214:	96030000 	strls	r0, [r3], -r0
    6218:	03000029 	movweq	r0, #41	; 0x29
    621c:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6220:	04020000 	streq	r0, [r2], #-0
    6224:	00041d07 	andeq	r1, r4, r7, lsl #26
    6228:	07080200 	streq	r0, [r8, -r0, lsl #4]
    622c:	00000418 	andeq	r0, r0, r8, lsl r4
    6230:	69050404 	stmdbvs	r5, {r2, sl}
    6234:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6238:	04220704 	strteq	r0, [r2], #-1796	; 0xfffff8fc
    623c:	dd030000 	stcle	0, cr0, [r3, #-0]
    6240:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    6244:	00541227 	subseq	r1, r4, r7, lsr #4
    6248:	8f050000 	svchi	0x00050000
    624c:	06000000 	streq	r0, [r0], -r0
    6250:	0000008f 	andeq	r0, r0, pc, lsl #1
    6254:	001da403 	andseq	sl, sp, r3, lsl #8
    6258:	122b0400 	eorne	r0, fp, #0, 8
    625c:	00000041 	andeq	r0, r0, r1, asr #32
    6260:	0000a506 	andeq	sl, r0, r6, lsl #10
    6264:	292f0300 	stmdbcs	pc!, {r8, r9}	; <UNPREDICTABLE>
    6268:	2c040000 	stccs	0, cr0, [r4], {-0}
    626c:	00006712 	andeq	r6, r0, r2, lsl r7
    6270:	00b60500 	adcseq	r0, r6, r0, lsl #10
    6274:	36030000 	strcc	r0, [r3], -r0
    6278:	04000006 	streq	r0, [r0], #-6
    627c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    6280:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6284:	61093204 	tstvs	r9, r4, lsl #4
    6288:	08000001 	stmdaeq	r0, {r0}
    628c:	0000002b 	andeq	r0, r0, fp, lsr #32
    6290:	a5073404 	strge	r3, [r7, #-1028]	; 0xfffffbfc
    6294:	01000000 	mrseq	r0, (UNDEF: 0)
    6298:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    629c:	0000063c 	andeq	r0, r0, ip, lsr r6
    62a0:	a5033504 	strge	r3, [r3, #-1284]	; 0xfffffafc
    62a4:	01000000 	mrseq	r0, (UNDEF: 0)
    62a8:	08000601 	stmdaeq	r0, {r0, r9, sl}
    62ac:	000002de 	ldrdeq	r0, [r0], -lr
    62b0:	a5033604 	strge	r3, [r3, #-1540]	; 0xfffff9fc
    62b4:	01000000 	mrseq	r0, (UNDEF: 0)
    62b8:	08000501 	stmdaeq	r0, {r0, r8, sl}
    62bc:	000006a7 	andeq	r0, r0, r7, lsr #13
    62c0:	a5033704 	strge	r3, [r3, #-1796]	; 0xfffff8fc
    62c4:	01000000 	mrseq	r0, (UNDEF: 0)
    62c8:	08000401 	stmdaeq	r0, {r0, sl}
    62cc:	00000a8f 	andeq	r0, r0, pc, lsl #21
    62d0:	a5033804 	strge	r3, [r3, #-2052]	; 0xfffff7fc
    62d4:	01000000 	mrseq	r0, (UNDEF: 0)
    62d8:	09000004 	stmdbeq	r0, {r2}
    62dc:	0000064b 	andeq	r0, r0, fp, asr #12
    62e0:	a5073a04 	strge	r3, [r7, #-2564]	; 0xfffff5fc
    62e4:	01000000 	mrseq	r0, (UNDEF: 0)
    62e8:	0008eb09 	andeq	lr, r8, r9, lsl #22
    62ec:	033c0400 	teqeq	ip, #0, 8
    62f0:	000000a5 	andeq	r0, r0, r5, lsr #1
    62f4:	0f1c0902 	svceq	0x001c0902
    62f8:	3d040000 	stccc	0, cr0, [r4, #-0]
    62fc:	0000a503 	andeq	sl, r0, r3, lsl #10
    6300:	03090300 	movweq	r0, #37632	; 0x9300
    6304:	04000009 	streq	r0, [r0], #-9
    6308:	00b6083f 	adcseq	r0, r6, pc, lsr r8
    630c:	00040000 	andeq	r0, r4, r0
    6310:	00031403 	andeq	r1, r3, r3, lsl #8
    6314:	03410400 	movteq	r0, #5120	; 0x1400
    6318:	000000d3 	ldrdeq	r0, [r0], -r3
    631c:	00016106 	andeq	r6, r1, r6, lsl #2
    6320:	06ae0a00 	strteq	r0, [lr], r0, lsl #20
    6324:	43040000 	movwmi	r0, #16384	; 0x4000
    6328:	00016d1a 	andeq	r6, r1, sl, lsl sp
    632c:	0a010100 	beq	46734 <__ccfg+0x2678c>
    6330:	00000197 	muleq	r0, r7, r1
    6334:	8e0e4504 	cfsh32hi	mvfx4, mvfx14, #4
    6338:	01000001 	tsteq	r0, r1
    633c:	94040b01 	strls	r0, [r4], #-2817	; 0xfffff4ff
    6340:	02000001 	andeq	r0, r0, #1
    6344:	0c540801 	mrrceq	8, 0, r0, r4, cr1
    6348:	94050000 	strls	r0, [r5], #-0
    634c:	0a000001 	beq	6358 <__exidx_end+0x758>
    6350:	0000031d 	andeq	r0, r0, sp, lsl r3
    6354:	8e1e4504 	cfmul32hi	mvfx4, mvfx14, mvfx4
    6358:	01000001 	tsteq	r0, r1
    635c:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
    6360:	01df098f 	bicseq	r0, pc, pc, lsl #19
    6364:	ba090000 	blt	24636c <__ccfg+0x2263c4>
    6368:	0500000c 	streq	r0, [r0, #-12]
    636c:	00670b90 	mlseq	r7, r0, fp, r0
    6370:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6374:	00001057 	andeq	r1, r0, r7, asr r0
    6378:	8f089105 	svchi	0x00089105
    637c:	04000000 	streq	r0, [r0], #-0
    6380:	0001bc09 	andeq	fp, r1, r9, lsl #24
    6384:	10920500 	addsne	r0, r2, r0, lsl #10
    6388:	000000b1 	strheq	r0, [r0], -r1
    638c:	ae030006 	cdpge	0, 0, cr0, cr3, cr6, {0}
    6390:	0500000c 	streq	r0, [r0, #-12]
    6394:	01ae0393 			; <UNDEFINED> instruction: 0x01ae0393
    6398:	df0c0000 	svcle	0x000c0000
    639c:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
    63a0:	0d000001 	stceq	0, cr0, [r0, #-4]
    63a4:	092d0a00 	pusheq	{r9, fp}
    63a8:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    63ac:	0001eb0f 	andeq	lr, r1, pc, lsl #22
    63b0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    63b4:	09910601 	ldmibeq	r1, {r0, r9, sl}
    63b8:	0000022e 	andeq	r0, r0, lr, lsr #4
    63bc:	00090a08 	andeq	r0, r9, r8, lsl #20
    63c0:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    63c4:	000000a5 	andeq	r0, r0, r5, lsr #1
    63c8:	00010701 	andeq	r0, r1, r1, lsl #14
    63cc:	0005bc08 	andeq	fp, r5, r8, lsl #24
    63d0:	03940600 	orrseq	r0, r4, #0, 12
    63d4:	000000a5 	andeq	r0, r0, r5, lsr #1
    63d8:	00000101 	andeq	r0, r0, r1, lsl #2
    63dc:	0a9b0300 	beq	fe6c6fe4 <_estack+0xde6c1fe4>
    63e0:	96060000 	strls	r0, [r6], -r0
    63e4:	00020403 	andeq	r0, r2, r3, lsl #8
    63e8:	022e0500 	eoreq	r0, lr, #0, 10
    63ec:	3a0c0000 	bcc	3063f4 <__ccfg+0x2e644c>
    63f0:	4a000002 	bmi	6400 <__exidx_end+0x800>
    63f4:	0d000002 	stceq	0, cr0, [r0, #-8]
    63f8:	023f0500 	eorseq	r0, pc, #0, 10
    63fc:	a10a0000 	mrsge	r0, (UNDEF: 10)
    6400:	06000003 	streq	r0, [r0], -r3
    6404:	024a179c 	subeq	r1, sl, #156, 14	; 0x2700000
    6408:	01010000 	mrseq	r0, (UNDEF: 1)
    640c:	00009b0c 	andeq	r9, r0, ip, lsl #22
    6410:	00026800 	andeq	r6, r2, r0, lsl #16
    6414:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6418:	0000025d 	andeq	r0, r0, sp, asr r2
    641c:	0005fe0a 	andeq	pc, r5, sl, lsl #28
    6420:	13060700 	movwne	r0, #26368	; 0x6700
    6424:	00000268 	andeq	r0, r0, r8, ror #4
    6428:	cd0a0101 	stfgts	f0, [sl, #-4]
    642c:	05000008 	streq	r0, [r0, #-8]
    6430:	00b60ec3 	adcseq	r0, r6, r3, asr #29
    6434:	01010000 	mrseq	r0, (UNDEF: 1)
    6438:	000c620e 	andeq	r6, ip, lr, lsl #4
    643c:	016e0800 	cmneq	lr, r0, lsl #16
    6440:	00029610 	andeq	r9, r2, r0, lsl r6
    6444:	9c040b00 			; <UNDEFINED> instruction: 0x9c040b00
    6448:	0f000002 	svceq	0x00000002
    644c:	0002a801 	andeq	sl, r2, r1, lsl #16
    6450:	008f1000 	addeq	r1, pc, r0
    6454:	0c000000 	stceq	0, cr0, [r0], {-0}
    6458:	0000019b 	muleq	r0, fp, r1
    645c:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6460:	a805000d 	stmdage	r5, {r0, r2, r3}
    6464:	11000002 	tstne	r0, r2
    6468:	000009d6 	ldrdeq	r0, [r0], -r6
    646c:	16017f08 	strne	r7, [r1], -r8, lsl #30
    6470:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    6474:	8d110101 	ldfhis	f0, [r1, #-4]
    6478:	08000003 	stmdaeq	r0, {r0, r1}
    647c:	c2140182 	andsgt	r0, r4, #-2147483616	; 0x80000020
    6480:	01000000 	mrseq	r0, (UNDEF: 0)
    6484:	03651101 	cmneq	r5, #1073741824	; 0x40000000
    6488:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    648c:	00b60e02 	adcseq	r0, r6, r2, lsl #28
    6490:	01010000 	mrseq	r0, (UNDEF: 1)
    6494:	03080812 	movweq	r0, #34834	; 0x8812
    6498:	030c0903 	movweq	r0, #51459	; 0xc903
    649c:	83130000 	tsthi	r3, #0
    64a0:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    64a4:	8f070307 	svchi	0x00070307
    64a8:	00000000 	andeq	r0, r0, r0
    64ac:	000faf13 	andeq	sl, pc, r3, lsl pc	; <UNPREDICTABLE>
    64b0:	03080800 	movweq	r0, #34816	; 0x8800
    64b4:	0000c708 	andeq	ip, r0, r8, lsl #14
    64b8:	0e000400 	cfcpyseq	mvf0, mvf0
    64bc:	000009f9 	strdeq	r0, [r0], -r9
    64c0:	03030908 	movweq	r0, #14600	; 0x3908
    64c4:	000002e5 	andeq	r0, r0, r5, ror #5
    64c8:	00002014 	andeq	r2, r0, r4, lsl r0
    64cc:	0b083000 	bleq	2124d4 <__ccfg+0x1f252c>
    64d0:	037c0803 	cmneq	ip, #196608	; 0x30000
    64d4:	06130000 	ldreq	r0, [r3], -r0
    64d8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    64dc:	8f080314 	svchi	0x00080314
    64e0:	00000000 	andeq	r0, r0, r0
    64e4:	000bd713 	andeq	sp, fp, r3, lsl r7
    64e8:	03150800 	tsteq	r5, #0, 16
    64ec:	00008f08 	andeq	r8, r0, r8, lsl #30
    64f0:	70130200 	andsvc	r0, r3, r0, lsl #4
    64f4:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    64f8:	890b0316 	stmdbhi	fp, {r1, r2, r4, r8, r9}
    64fc:	04000002 	streq	r0, [r0], #-2
    6500:	00473613 	subeq	r3, r7, r3, lsl r6
    6504:	03170800 	tsteq	r7, #0, 16
    6508:	0000c709 	andeq	ip, r0, r9, lsl #14
    650c:	0f130800 	svceq	0x00130800
    6510:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6514:	7c0f0318 	stcvc	3, cr0, [pc], {24}
    6518:	0c000003 	stceq	0, cr0, [r0], {3}
    651c:	00094d13 	andeq	r4, r9, r3, lsl sp
    6520:	03190800 	tsteq	r9, #0, 16
    6524:	00038c15 	andeq	r8, r3, r5, lsl ip
    6528:	0c002c00 	stceq	12, cr2, [r0], {-0}
    652c:	0000030c 	andeq	r0, r0, ip, lsl #6
    6530:	0000038c 	andeq	r0, r0, ip, lsl #7
    6534:	00008815 	andeq	r8, r0, r5, lsl r8
    6538:	0b000300 	bleq	7140 <__exidx_end+0x1540>
    653c:	00031904 	andeq	r1, r3, r4, lsl #18
    6540:	0bcc0e00 	bleq	ff309d48 <_estack+0xdf304d48>
    6544:	1c080000 	stcne	0, cr0, [r8], {-0}
    6548:	03191b03 	tsteq	r9, #3072	; 0xc00
    654c:	ac110000 	ldcge	0, cr0, [r1], {-0}
    6550:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    6554:	ae14031e 	mrcge	3, 0, r0, cr4, cr14, {0}
    6558:	01000003 	tsteq	r0, r3
    655c:	92040b01 	andls	r0, r4, #1024	; 0x400
    6560:	0a000003 	beq	6574 <__exidx_end+0x974>
    6564:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6568:	8f131d09 	svchi	0x00131d09
    656c:	01000000 	mrseq	r0, (UNDEF: 0)
    6570:	02e50a01 	rsceq	r0, r5, #4096	; 0x1000
    6574:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    6578:	0000a01a 	andeq	sl, r0, sl, lsl r0
    657c:	0a010100 	beq	46984 <__ccfg+0x269dc>
    6580:	00000c59 	andeq	r0, r0, r9, asr ip
    6584:	a0241e09 	eorge	r1, r4, r9, lsl #28
    6588:	01000000 	mrseq	r0, (UNDEF: 0)
    658c:	0c770a01 			; <UNDEFINED> instruction: 0x0c770a01
    6590:	22090000 	andcs	r0, r9, #0
    6594:	0003ae14 	andeq	sl, r3, r4, lsl lr
    6598:	16010100 	strne	r0, [r1], -r0, lsl #2
    659c:	00001c33 	andeq	r1, r0, r3, lsr ip
    65a0:	960f0801 	strls	r0, [pc], -r1, lsl #16
    65a4:	05000002 	streq	r0, [r0, #-2]
    65a8:	00000003 	andeq	r0, r0, r3
    65ac:	1c441600 	mcrrne	6, 0, r1, r4, cr0
    65b0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    65b4:	00008f0d 	andeq	r8, r0, sp, lsl #30
    65b8:	00030500 	andeq	r0, r3, r0, lsl #10
    65bc:	17000000 	strne	r0, [r0, -r0]
    65c0:	0000026d 	andeq	r0, r0, sp, ror #4
    65c4:	050c0a01 	streq	r0, [ip, #-2561]	; 0xfffff5ff
    65c8:	00520203 	subseq	r0, r2, r3, lsl #4
    65cc:	59011800 	stmdbpl	r1, {fp, ip}
    65d0:	0100001c 	tsteq	r0, ip, lsl r0
    65d4:	00010658 	andeq	r0, r1, r8, asr r6
    65d8:	00000000 	andeq	r0, r0, r0
    65dc:	01000000 	mrseq	r0, (UNDEF: 0)
    65e0:	0004479c 	muleq	r4, ip, r7
    65e4:	63611900 	cmnvs	r1, #0, 18
    65e8:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    65ec:	0002961d 	andeq	r9, r2, sp, lsl r6
    65f0:	00230900 	eoreq	r0, r3, r0, lsl #18
    65f4:	01180000 	tsteq	r8, r0
    65f8:	00001c4c 	andeq	r1, r0, ip, asr #24
    65fc:	01011c01 	tsteq	r1, r1, lsl #24
	...
    6608:	04de9c01 	ldrbeq	r9, [lr], #3073	; 0xc01
    660c:	231a0000 	tstcs	sl, #0
    6610:	0100000c 	tsteq	r0, ip
    6614:	008f011c 	addeq	r0, pc, ip, lsl r1	; <UNPREDICTABLE>
    6618:	23450000 	movtcs	r0, #20480	; 0x5000
    661c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    6620:	0100001c 	tsteq	r0, ip, lsl r0
    6624:	00000121 	andeq	r0, r0, r1, lsr #2
    6628:	3b1b0000 	blcc	6c6630 <__ccfg+0x6a6688>
    662c:	0100001c 	tsteq	r0, ip, lsl r0
    6630:	00000130 	andeq	r0, r0, r0, lsr r1
    6634:	8f1b0000 	svchi	0x001b0000
    6638:	0100001d 	tsteq	r0, sp, lsl r0
    663c:	00000137 	andeq	r0, r0, r7, lsr r1
    6640:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    6644:	00000004 	andeq	r0, r0, r4
    6648:	90000000 	andls	r0, r0, r0
    664c:	0100000a 	tsteq	r0, sl
    6650:	04ad072b 	strteq	r0, [sp], #1835	; 0x72b
    6654:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    6658:	00000004 	andeq	r0, r0, r4
    665c:	0004de1c 	andeq	sp, r4, ip, lsl lr
    6660:	00000000 	andeq	r0, r0, r0
    6664:	000ab800 	andeq	fp, sl, r0, lsl #16
    6668:	073e0100 	ldreq	r0, [lr, -r0, lsl #2]!
    666c:	000004c7 	andeq	r0, r0, r7, asr #9
    6670:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    6674:	de1e0000 	cdple	0, 1, cr0, cr14, cr0, {0}
    6678:	00000004 	andeq	r0, r0, r4
    667c:	d0000000 	andle	r0, r0, r0
    6680:	0100000a 	tsteq	r0, sl
    6684:	ec1d074a 	ldc	7, cr0, [sp], {74}	; 0x4a
    6688:	00000004 	andeq	r0, r0, r4
    668c:	1bb71f00 	blne	fedce294 <_estack+0xdedc9294>
    6690:	a4020000 	strge	r0, [r2], #-0
    6694:	00670101 	rsbeq	r0, r7, r1, lsl #2
    6698:	20030000 	andcs	r0, r3, r0
    669c:	00001103 	andeq	r1, r0, r3, lsl #2
    66a0:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    66a4:	00000000 	andeq	r0, r0, r0
    66a8:	000aa700 	andeq	sl, sl, r0, lsl #14
    66ac:	dd000300 	stcle	3, cr0, [r0, #-0]
    66b0:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    66b4:	0000a301 	andeq	sl, r0, r1, lsl #6
    66b8:	1d290c00 	stcne	12, cr0, [r9, #-0]
    66bc:	0dec0000 	stcleq	0, cr0, [ip]
    66c0:	0c900000 	ldceq	0, cr0, [r0], {0}
    66c4:	00000000 	andeq	r0, r0, r0
    66c8:	47130000 	ldrmi	r0, [r3, -r0]
    66cc:	01020000 	mrseq	r0, (UNDEF: 2)
    66d0:	000c4d06 	andeq	r4, ip, r6, lsl #26
    66d4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    66d8:	00000a5b 	andeq	r0, r0, fp, asr sl
    66dc:	ed050402 	cfstrs	mvf0, [r5, #-8]
    66e0:	02000007 	andeq	r0, r0, #7
    66e4:	07e80508 	strbeq	r0, [r8, r8, lsl #10]!
    66e8:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    66ec:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    66f0:	004d182e 	subeq	r1, sp, lr, lsr #16
    66f4:	01020000 	mrseq	r0, (UNDEF: 2)
    66f8:	000c4b08 	andeq	r4, ip, r8, lsl #22
    66fc:	2df40300 	ldclcs	3, cr0, [r4]
    6700:	31040000 	mrscc	r0, (UNDEF: 4)
    6704:	00006019 	andeq	r6, r0, r9, lsl r0
    6708:	07020200 	streq	r0, [r2, -r0, lsl #4]
    670c:	00000d48 	andeq	r0, r0, r8, asr #26
    6710:	00299603 	eoreq	r9, r9, r3, lsl #12
    6714:	19340400 	ldmdbne	r4!, {sl}
    6718:	00000073 	andeq	r0, r0, r3, ror r0
    671c:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    6720:	02000004 	andeq	r0, r0, #4
    6724:	04180708 	ldreq	r0, [r8], #-1800	; 0xfffff8f8
    6728:	04040000 	streq	r0, [r4], #-0
    672c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6730:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6734:	00000422 	andeq	r0, r0, r2, lsr #8
    6738:	00130a03 	andseq	r0, r3, r3, lsl #20
    673c:	12260500 	eorne	r0, r6, #0, 10
    6740:	00000041 	andeq	r0, r0, r1, asr #32
    6744:	0028dd03 	eoreq	sp, r8, r3, lsl #26
    6748:	12270500 	eorne	r0, r7, #0, 10
    674c:	00000054 	andeq	r0, r0, r4, asr r0
    6750:	00009b05 	andeq	r9, r0, r5, lsl #22
    6754:	009b0600 	addseq	r0, fp, r0, lsl #12
    6758:	a4030000 	strge	r0, [r3], #-0
    675c:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    6760:	0041122b 	subeq	r1, r1, fp, lsr #4
    6764:	b1060000 	mrslt	r0, (UNDEF: 6)
    6768:	05000000 	streq	r0, [r0, #-0]
    676c:	000000b1 	strheq	r0, [r0], -r1
    6770:	00292f03 	eoreq	r2, r9, r3, lsl #30
    6774:	122c0500 	eorne	r0, ip, #0, 10
    6778:	00000067 	andeq	r0, r0, r7, rrx
    677c:	0000c705 	andeq	ip, r0, r5, lsl #14
    6780:	06360300 	ldrteq	r0, [r6], -r0, lsl #6
    6784:	2d050000 	stccs	0, cr0, [r5, #-0]
    6788:	00006712 	andeq	r6, r0, r2, lsl r7
    678c:	05080700 	streq	r0, [r8, #-1792]	; 0xfffff900
    6790:	01720932 	cmneq	r2, r2, lsr r9
    6794:	2b080000 	blcs	20679c <__ccfg+0x1e67f4>
    6798:	05000000 	streq	r0, [r0, #-0]
    679c:	00b10734 	adcseq	r0, r1, r4, lsr r7
    67a0:	01010000 	mrseq	r0, (UNDEF: 1)
    67a4:	3c080007 	stccc	0, cr0, [r8], {7}
    67a8:	05000006 	streq	r0, [r0, #-6]
    67ac:	00b10335 	adcseq	r0, r1, r5, lsr r3
    67b0:	01010000 	mrseq	r0, (UNDEF: 1)
    67b4:	de080006 	cdple	0, 0, cr0, cr8, cr6, {0}
    67b8:	05000002 	streq	r0, [r0, #-2]
    67bc:	00b10336 	adcseq	r0, r1, r6, lsr r3
    67c0:	01010000 	mrseq	r0, (UNDEF: 1)
    67c4:	a7080005 	strge	r0, [r8, -r5]
    67c8:	05000006 	streq	r0, [r0, #-6]
    67cc:	00b10337 	adcseq	r0, r1, r7, lsr r3
    67d0:	01010000 	mrseq	r0, (UNDEF: 1)
    67d4:	8f080004 	svchi	0x00080004
    67d8:	0500000a 	streq	r0, [r0, #-10]
    67dc:	00b10338 	adcseq	r0, r1, r8, lsr r3
    67e0:	04010000 	streq	r0, [r1], #-0
    67e4:	4b090000 	blmi	2467ec <__ccfg+0x226844>
    67e8:	05000006 	streq	r0, [r0, #-6]
    67ec:	00b1073a 	adcseq	r0, r1, sl, lsr r7
    67f0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    67f4:	000008eb 	andeq	r0, r0, fp, ror #17
    67f8:	b1033c05 	tstlt	r3, r5, lsl #24
    67fc:	02000000 	andeq	r0, r0, #0
    6800:	000f1c09 	andeq	r1, pc, r9, lsl #24
    6804:	033d0500 	teqeq	sp, #0, 10
    6808:	000000b1 	strheq	r0, [r0], -r1
    680c:	09030903 	stmdbeq	r3, {r0, r1, r8, fp}
    6810:	3f050000 	svccc	0x00050000
    6814:	0000c708 	andeq	ip, r0, r8, lsl #14
    6818:	03000400 	movweq	r0, #1024	; 0x400
    681c:	00000314 	andeq	r0, r0, r4, lsl r3
    6820:	e4034105 	str	r4, [r3], #-261	; 0xfffffefb
    6824:	06000000 	streq	r0, [r0], -r0
    6828:	00000172 	andeq	r0, r0, r2, ror r1
    682c:	0006ae0a 	andeq	sl, r6, sl, lsl #28
    6830:	1a430500 	bne	10c7c38 <__ccfg+0x10a7c90>
    6834:	0000017e 	andeq	r0, r0, lr, ror r1
    6838:	970a0101 	strls	r0, [sl, -r1, lsl #2]
    683c:	05000001 	streq	r0, [r0, #-1]
    6840:	019f0e45 	orrseq	r0, pc, r5, asr #28
    6844:	01010000 	mrseq	r0, (UNDEF: 1)
    6848:	01a5040b 			; <UNDEFINED> instruction: 0x01a5040b
    684c:	01020000 	mrseq	r0, (UNDEF: 2)
    6850:	000c5408 	andeq	r5, ip, r8, lsl #8
    6854:	01a50500 			; <UNDEFINED> instruction: 0x01a50500
    6858:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    685c:	05000003 	streq	r0, [r0, #-3]
    6860:	019f1e45 	orrseq	r1, pc, r5, asr #28
    6864:	01010000 	mrseq	r0, (UNDEF: 1)
    6868:	8f060807 	svchi	0x00060807
    686c:	0001f009 	andeq	pc, r1, r9
    6870:	0cba0900 			; <UNDEFINED> instruction: 0x0cba0900
    6874:	90060000 	andls	r0, r6, r0
    6878:	0000670b 	andeq	r6, r0, fp, lsl #14
    687c:	57090000 	strpl	r0, [r9, -r0]
    6880:	06000010 			; <UNDEFINED> instruction: 0x06000010
    6884:	009b0891 	umullseq	r0, fp, r1, r8
    6888:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    688c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    6890:	bd109206 	lfmlt	f1, 1, [r0, #-24]	; 0xffffffe8
    6894:	06000000 	streq	r0, [r0], -r0
    6898:	0cae0300 	stceq	3, cr0, [lr]
    689c:	93060000 	movwls	r0, #24576	; 0x6000
    68a0:	0001bf03 	andeq	fp, r1, r3, lsl #30
    68a4:	01f00c00 	mvnseq	r0, r0, lsl #24
    68a8:	02070000 	andeq	r0, r7, #0
    68ac:	000d0000 	andeq	r0, sp, r0
    68b0:	00092d0a 	andeq	r2, r9, sl, lsl #26
    68b4:	0f990600 	svceq	0x00990600
    68b8:	000001fc 	strdeq	r0, [r0], -ip
    68bc:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    68c0:	000000c2 	andeq	r0, r0, r2, asr #1
    68c4:	91070107 	tstls	r7, r7, lsl #2
    68c8:	00024509 	andeq	r4, r2, r9, lsl #10
    68cc:	090a0800 	stmdbeq	sl, {fp}
    68d0:	93070000 	movwls	r0, #28672	; 0x7000
    68d4:	0000b107 	andeq	fp, r0, r7, lsl #2
    68d8:	01070100 	mrseq	r0, (UNDEF: 23)
    68dc:	05bc0800 	ldreq	r0, [ip, #2048]!	; 0x800
    68e0:	94070000 	strls	r0, [r7], #-0
    68e4:	0000b103 	andeq	fp, r0, r3, lsl #2
    68e8:	00010100 	andeq	r0, r1, r0, lsl #2
    68ec:	9b030000 	blls	c68f4 <__ccfg+0xa694c>
    68f0:	0700000a 	streq	r0, [r0, -sl]
    68f4:	021b0396 	andseq	r0, fp, #1476395010	; 0x58000002
    68f8:	45050000 	strmi	r0, [r5, #-0]
    68fc:	0c000002 	stceq	0, cr0, [r0], {2}
    6900:	00000251 	andeq	r0, r0, r1, asr r2
    6904:	00000261 	andeq	r0, r0, r1, ror #4
    6908:	5605000d 	strpl	r0, [r5], -sp
    690c:	0a000002 	beq	691c <__exidx_end+0xd1c>
    6910:	000003a1 	andeq	r0, r0, r1, lsr #7
    6914:	61179c07 	tstvs	r7, r7, lsl #24
    6918:	01000002 	tsteq	r0, r2
    691c:	00a70c01 	adceq	r0, r7, r1, lsl #24
    6920:	027f0000 	rsbseq	r0, pc, #0
    6924:	000d0000 	andeq	r0, sp, r0
    6928:	00027405 	andeq	r7, r2, r5, lsl #8
    692c:	05fe0a00 	ldrbeq	r0, [lr, #2560]!	; 0xa00
    6930:	06080000 	streq	r0, [r8], -r0
    6934:	00027f13 	andeq	r7, r2, r3, lsl pc
    6938:	0a010100 	beq	46d40 <__ccfg+0x26d98>
    693c:	000008cd 	andeq	r0, r0, sp, asr #17
    6940:	c70ec306 	strgt	ip, [lr, -r6, lsl #6]
    6944:	01000000 	mrseq	r0, (UNDEF: 0)
    6948:	0c620e01 	stcleq	14, cr0, [r2], #-4
    694c:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    6950:	02ad1001 	adceq	r1, sp, #1
    6954:	040b0000 	streq	r0, [fp], #-0
    6958:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    695c:	02bf010f 	adcseq	r0, pc, #-1073741821	; 0xc0000003
    6960:	9b100000 	blls	406968 <__ccfg+0x3e69c0>
    6964:	00000000 	andeq	r0, r0, r0
    6968:	0001ac0c 	andeq	sl, r1, ip, lsl #24
    696c:	0002ca00 	andeq	ip, r2, r0, lsl #20
    6970:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6974:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    6978:	0009d611 	andeq	sp, r9, r1, lsl r6
    697c:	017f0900 	cmneq	pc, r0, lsl #18
    6980:	0002ca16 	andeq	ip, r2, r6, lsl sl
    6984:	11010100 	mrsne	r0, (UNDEF: 17)
    6988:	0000038d 	andeq	r0, r0, sp, lsl #7
    698c:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
    6990:	000000d3 	ldrdeq	r0, [r0], -r3
    6994:	65110101 	ldrvs	r0, [r1, #-257]	; 0xfffffeff
    6998:	09000003 	stmdbeq	r0, {r0, r1}
    699c:	c70e02d8 			; <UNDEFINED> instruction: 0xc70e02d8
    69a0:	01000000 	mrseq	r0, (UNDEF: 0)
    69a4:	09081201 	stmdbeq	r8, {r0, r9, ip}
    69a8:	23090303 	movwcs	r0, #37635	; 0x9303
    69ac:	13000003 	movwne	r0, #3
    69b0:	00003c83 	andeq	r3, r0, r3, lsl #25
    69b4:	07030709 	streq	r0, [r3, -r9, lsl #14]
    69b8:	0000009b 	muleq	r0, fp, r0
    69bc:	0faf1300 	svceq	0x00af1300
    69c0:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    69c4:	00d80803 	sbcseq	r0, r8, r3, lsl #16
    69c8:	00040000 	andeq	r0, r4, r0
    69cc:	0009f90e 	andeq	pc, r9, lr, lsl #18
    69d0:	03090900 	movweq	r0, #39168	; 0x9900
    69d4:	0002fc03 	andeq	pc, r2, r3, lsl #24
    69d8:	00201400 	eoreq	r1, r0, r0, lsl #8
    69dc:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    69e0:	9308030b 	movwls	r0, #33547	; 0x830b
    69e4:	13000003 	movwne	r0, #3
    69e8:	00001f06 	andeq	r1, r0, r6, lsl #30
    69ec:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    69f0:	0000009b 	muleq	r0, fp, r0
    69f4:	0bd71300 	bleq	ff5cb5fc <_estack+0xdf5c65fc>
    69f8:	15090000 	strne	r0, [r9, #-0]
    69fc:	009b0803 	addseq	r0, fp, r3, lsl #16
    6a00:	13020000 	movwne	r0, #8192	; 0x2000
    6a04:	00004c70 	andeq	r4, r0, r0, ror ip
    6a08:	0b031609 	bleq	cc234 <__ccfg+0xac28c>
    6a0c:	000002a0 	andeq	r0, r0, r0, lsr #5
    6a10:	47361304 	ldrmi	r1, [r6, -r4, lsl #6]!
    6a14:	17090000 	strne	r0, [r9, -r0]
    6a18:	00d80903 	sbcseq	r0, r8, r3, lsl #18
    6a1c:	13080000 	movwne	r0, #32768	; 0x8000
    6a20:	0000000f 	andeq	r0, r0, pc
    6a24:	0f031809 	svceq	0x00031809
    6a28:	00000393 	muleq	r0, r3, r3
    6a2c:	094d130c 	stmdbeq	sp, {r2, r3, r8, r9, ip}^
    6a30:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    6a34:	03a31503 			; <UNDEFINED> instruction: 0x03a31503
    6a38:	002c0000 	eoreq	r0, ip, r0
    6a3c:	0003230c 	andeq	r2, r3, ip, lsl #6
    6a40:	0003a300 	andeq	sl, r3, r0, lsl #6
    6a44:	00881500 	addeq	r1, r8, r0, lsl #10
    6a48:	00030000 	andeq	r0, r3, r0
    6a4c:	0330040b 	teqeq	r0, #184549376	; 0xb000000
    6a50:	cc0e0000 	stcgt	0, cr0, [lr], {-0}
    6a54:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6a58:	301b031c 	andscc	r0, fp, ip, lsl r3
    6a5c:	11000003 	tstne	r0, r3
    6a60:	00000bac 	andeq	r0, r0, ip, lsr #23
    6a64:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    6a68:	000003c5 	andeq	r0, r0, r5, asr #7
    6a6c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6a70:	000003a9 	andeq	r0, r0, r9, lsr #7
    6a74:	0006ff0a 	andeq	pc, r6, sl, lsl #30
    6a78:	131d0a00 	tstne	sp, #0, 20
    6a7c:	0000009b 	muleq	r0, fp, r0
    6a80:	e50a0101 	str	r0, [sl, #-257]	; 0xfffffeff
    6a84:	0a000002 	beq	6a94 <__exidx_end+0xe94>
    6a88:	00ac1a1e 	adceq	r1, ip, lr, lsl sl
    6a8c:	01010000 	mrseq	r0, (UNDEF: 1)
    6a90:	000c590a 	andeq	r5, ip, sl, lsl #18
    6a94:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    6a98:	000000ac 	andeq	r0, r0, ip, lsr #1
    6a9c:	770a0101 	strvc	r0, [sl, -r1, lsl #2]
    6aa0:	0a00000c 	beq	6ad8 <__exidx_end+0xed8>
    6aa4:	03c51422 	biceq	r1, r5, #570425344	; 0x22000000
    6aa8:	01010000 	mrseq	r0, (UNDEF: 1)
    6aac:	000bb116 	andeq	fp, fp, r6, lsl r1
    6ab0:	0f0f0100 	svceq	0x000f0100
    6ab4:	000000c7 	andeq	r0, r0, r7, asr #1
    6ab8:	00000305 	andeq	r0, r0, r5, lsl #6
    6abc:	d5160000 	ldrle	r0, [r6, #-0]
    6ac0:	0100000c 	tsteq	r0, ip
    6ac4:	00c7150f 	sbceq	r1, r7, pc, lsl #10
    6ac8:	03050000 	movweq	r0, #20480	; 0x5000
    6acc:	00000000 	andeq	r0, r0, r0
    6ad0:	001d7b16 	andseq	r7, sp, r6, lsl fp
    6ad4:	14100100 	ldrne	r0, [r0], #-256	; 0xffffff00
    6ad8:	00000215 	andeq	r0, r0, r5, lsl r2
    6adc:	00000305 	andeq	r0, r0, r5, lsl #6
    6ae0:	df160000 	svcle	0x00160000
    6ae4:	0100001c 	tsteq	r0, ip, lsl r0
    6ae8:	00b10d12 	adcseq	r0, r1, r2, lsl sp
    6aec:	03050000 	movweq	r0, #20480	; 0x5000
    6af0:	200005ec 	andcs	r0, r0, ip, ror #11
    6af4:	001d2316 	andseq	r2, sp, r6, lsl r3
    6af8:	03130100 	tsteq	r3, #0, 2
    6afc:	000000b1 	strheq	r0, [r0], -r1
    6b00:	05ed0305 	strbeq	r0, [sp, #773]!	; 0x305
    6b04:	3c162000 	ldccc	0, cr2, [r6], {-0}
    6b08:	01000016 	tsteq	r0, r6, lsl r0
    6b0c:	009b0d15 	addseq	r0, fp, r5, lsl sp
    6b10:	03050000 	movweq	r0, #20480	; 0x5000
    6b14:	00000000 	andeq	r0, r0, r0
    6b18:	1cab0117 	stfnes	f0, [fp], #92	; 0x5c
    6b1c:	13030000 	movwne	r0, #12288	; 0x3000
    6b20:	00000006 	andeq	r0, r0, r6
    6b24:	00000000 	andeq	r0, r0, r0
    6b28:	189c0100 	ldmne	ip, {r8}
    6b2c:	001d8001 	andseq	r8, sp, r1
    6b30:	07080300 	streq	r0, [r8, -r0, lsl #6]
    6b34:	0000c701 	andeq	ip, r0, r1, lsl #14
	...
    6b40:	bc9c0100 	ldflts	f0, [ip], {0}
    6b44:	19000004 	stmdbne	r0, {r2}
    6b48:	03007265 	movweq	r7, #613	; 0x265
    6b4c:	04bc1908 	ldrteq	r1, [ip], #2312	; 0x908
    6b50:	23790000 	cmncs	r9, #0
    6b54:	651a0000 	ldrvs	r0, [sl, #-0]
    6b58:	03007572 	movweq	r7, #1394	; 0x572
    6b5c:	04c22408 	strbeq	r2, [r2], #1032	; 0x408
    6b60:	51010000 	mrspl	r0, (UNDEF: 1)
    6b64:	8f040b00 	svchi	0x00040b00
    6b68:	0b000000 	bleq	6b70 <__exidx_end+0xf70>
    6b6c:	0000c704 	andeq	ip, r0, r4, lsl #14
    6b70:	02011b00 	andeq	r1, r1, #0, 22
    6b74:	0100001d 	tsteq	r0, sp, lsl r0
    6b78:	01060160 	tsteq	r6, r0, ror #2
    6b7c:	0000009b 	muleq	r0, fp, r0
	...
    6b88:	04f69c01 	ldrbteq	r9, [r6], #3073	; 0xc01
    6b8c:	731c0000 	tstvc	ip, #0
    6b90:	60010074 	andvs	r0, r1, r4, ror r0
    6b94:	009b1401 	addseq	r1, fp, r1, lsl #8
    6b98:	238c0000 	orrcs	r0, ip, #0
    6b9c:	1d000000 	stcne	0, cr0, [r0, #-0]
    6ba0:	001cf901 	andseq	pc, ip, r1, lsl #18
    6ba4:	015b0100 	cmpeq	fp, r0, lsl #2
    6ba8:	00000006 	andeq	r0, r0, r6
    6bac:	00000000 	andeq	r0, r0, r0
    6bb0:	1b9c0100 	blne	fe706fb8 <_estack+0xde701fb8>
    6bb4:	001cd601 	andseq	sp, ip, r1, lsl #12
    6bb8:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6bbc:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6bc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    6bcc:	000005c0 	andeq	r0, r0, r0, asr #11
    6bd0:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    6bd4:	15012101 	strne	r2, [r1, #-257]	; 0xfffffeff
    6bd8:	0000009b 	muleq	r0, fp, r0
    6bdc:	0000239f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    6be0:	0100611c 	tsteq	r0, ip, lsl r1
    6be4:	c71f0121 	ldrgt	r0, [pc, -r1, lsr #2]
    6be8:	b2000000 	andlt	r0, r0, #0
    6bec:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    6bf0:	21010073 	tstcs	r1, r3, ror r0
    6bf4:	02152e01 	andseq	r2, r5, #1, 28
    6bf8:	23d00000 	bicscs	r0, r0, #0
    6bfc:	6c1c0000 	ldcvs	0, cr0, [ip], {-0}
    6c00:	01006e65 	tsteq	r0, r5, ror #28
    6c04:	9b360121 	blls	d87090 <__ccfg+0xd670e8>
    6c08:	e3000000 	movw	r0, #0
    6c0c:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    6c10:	01006c62 	tsteq	r0, r2, ror #24
    6c14:	9b070123 	blls	1c70a8 <__ccfg+0x1a7100>
    6c18:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    6c1c:	1f000023 	svcne	0x00000023
    6c20:	00001ced 	andeq	r1, r0, sp, ror #25
    6c24:	01013201 	tsteq	r1, r1, lsl #4
    6c28:	00000000 	andeq	r0, r0, r0
    6c2c:	0009f620 	andeq	pc, r9, r0, lsr #12
    6c30:	00000000 	andeq	r0, r0, r0
    6c34:	000c7800 	andeq	r7, ip, r0, lsl #16
    6c38:	01430100 	mrseq	r0, (UNDEF: 83)
    6c3c:	0005a303 	andeq	sl, r5, r3, lsl #6
    6c40:	0a122100 	beq	48f048 <__ccfg+0x46f0a0>
    6c44:	05210000 	streq	r0, [r1, #-0]!
    6c48:	0000000a 	andeq	r0, r0, sl
    6c4c:	0009f622 	andeq	pc, r9, r2, lsr #12
	...
    6c58:	01500100 	cmpeq	r0, r0, lsl #2
    6c5c:	0a122103 	beq	48f070 <__ccfg+0x46f0c8>
    6c60:	05210000 	streq	r0, [r1, #-0]!
    6c64:	0000000a 	andeq	r0, r0, sl
    6c68:	cd011800 	stcgt	8, cr1, [r1, #-0]
    6c6c:	0100001c 	tsteq	r0, ip, lsl r0
    6c70:	9b0106cb 	blls	487a4 <__ccfg+0x287fc>
	...
    6c7c:	01000000 	mrseq	r0, (UNDEF: 0)
    6c80:	0006819c 	muleq	r6, ip, r1
    6c84:	74731900 	ldrbtvc	r1, [r3], #-2304	; 0xfffff700
    6c88:	15cb0100 	strbne	r0, [fp, #256]	; 0x100
    6c8c:	0000009b 	muleq	r0, fp, r0
    6c90:	0000241f 	andeq	r2, r0, pc, lsl r4
    6c94:	001d0a23 	andseq	r0, sp, r3, lsr #20
    6c98:	1fcb0100 	svcne	0x00cb0100
    6c9c:	000000c7 	andeq	r0, r0, r7, asr #1
    6ca0:	0000243d 	andeq	r2, r0, sp, lsr r4
    6ca4:	001cb923 	andseq	fp, ip, r3, lsr #18
    6ca8:	2bcb0100 	blcs	ff2c70b0 <_estack+0xdf2c20b0>
    6cac:	000000c7 	andeq	r0, r0, r7, asr #1
    6cb0:	00002466 	andeq	r2, r0, r6, ror #8
    6cb4:	001ca524 	andseq	sl, ip, r4, lsr #10
    6cb8:	01e60100 	mvneq	r0, r0, lsl #2
    6cbc:	00000000 	andeq	r0, r0, r0
    6cc0:	001d8e24 	andseq	r8, sp, r4, lsr #28
    6cc4:	01ea0100 	mvneq	r0, r0, lsl #2
    6cc8:	00000000 	andeq	r0, r0, r0
    6ccc:	00085e25 	andeq	r5, r8, r5, lsr #28
    6cd0:	00000000 	andeq	r0, r0, r0
    6cd4:	000c4800 	andeq	r4, ip, r0, lsl #16
    6cd8:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
    6cdc:	00087826 	andeq	r7, r8, r6, lsr #16
    6ce0:	00248400 	eoreq	r8, r4, r0, lsl #8
    6ce4:	086c2600 	stmdaeq	ip!, {r9, sl, sp}^
    6ce8:	24970000 	ldrcs	r0, [r7], #0
    6cec:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6cf0:	00000009 	andeq	r0, r0, r9
    6cf4:	60000000 	andvs	r0, r0, r0
    6cf8:	0100000c 	tsteq	r0, ip
    6cfc:	06640243 	strbteq	r0, [r4], -r3, asr #4
    6d00:	12210000 	eorne	r0, r1, #0
    6d04:	2100000a 	tstcs	r0, sl
    6d08:	00000a05 	andeq	r0, r0, r5, lsl #20
    6d0c:	09f62800 	ldmibeq	r6!, {fp, sp}^
	...
    6d18:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    6d1c:	0a122102 	beq	48f12c <__ccfg+0x46f184>
    6d20:	05210000 	streq	r0, [r1, #-0]!
    6d24:	0000000a 	andeq	r0, r0, sl
    6d28:	01180000 	tsteq	r8, r0
    6d2c:	00001d0f 	andeq	r1, r0, pc, lsl #26
    6d30:	0106b001 	tsteq	r6, r1
    6d34:	0000009b 	muleq	r0, fp, r0
	...
    6d40:	07049c01 	streq	r9, [r4, -r1, lsl #24]
    6d44:	61190000 	tstvs	r9, r0
    6d48:	15b00100 	ldrne	r0, [r0, #256]!	; 0x100
    6d4c:	000000c7 	andeq	r0, r0, r7, asr #1
    6d50:	000024aa 	andeq	r2, r0, sl, lsr #9
    6d54:	01007319 	tsteq	r0, r9, lsl r3
    6d58:	07041eb0 			; <UNDEFINED> instruction: 0x07041eb0
    6d5c:	24d30000 	ldrbcs	r0, [r3], #0
    6d60:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    6d64:	01006e65 	tsteq	r0, r5, ror #28
    6d68:	009b26b0 			; <UNDEFINED> instruction: 0x009b26b0
    6d6c:	25070000 	strcs	r0, [r7, #-0]
    6d70:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6d74:	00000009 	andeq	r0, r0, r9
    6d78:	30000000 	andcc	r0, r0, r0
    6d7c:	0100000c 	tsteq	r0, ip
    6d80:	06e802ba 			; <UNDEFINED> instruction: 0x06e802ba
    6d84:	12210000 	eorne	r0, r1, #0
    6d88:	2100000a 	tstcs	r0, sl
    6d8c:	00000a05 	andeq	r0, r0, r5, lsl #20
    6d90:	09f62800 	ldmibeq	r6!, {fp, sp}^
	...
    6d9c:	c4010000 	strgt	r0, [r1], #-0
    6da0:	0a122102 	beq	48f1b0 <__ccfg+0x46f208>
    6da4:	05210000 	streq	r0, [r1, #-0]!
    6da8:	0000000a 	andeq	r0, r0, sl
    6dac:	b1040b00 	tstlt	r4, r0, lsl #22
    6db0:	17000000 	strne	r0, [r0, -r0]
    6db4:	001cc401 	andseq	ip, ip, r1, lsl #8
    6db8:	06a80100 	strteq	r0, [r8], r0, lsl #2
    6dbc:	00002618 	andeq	r2, r0, r8, lsl r6
    6dc0:	0000262c 	andeq	r2, r0, ip, lsr #12
    6dc4:	01299c01 			; <UNDEFINED> instruction: 0x01299c01
    6dc8:	00001ce5 	andeq	r1, r0, r5, ror #25
    6dcc:	9b069301 	blls	1ab9d8 <__ccfg+0x18ba30>
    6dd0:	04000000 	streq	r0, [r0], #-0
    6dd4:	18000026 	stmdane	r0, {r1, r2, r5}
    6dd8:	01000026 	tsteq	r0, r6, lsr #32
    6ddc:	1d882a9c 	vstrne	s4, [r8, #624]	; 0x270
    6de0:	82010000 	andhi	r0, r1, #0
    6de4:	0025a00d 	eoreq	sl, r5, sp
    6de8:	0025e000 	eoreq	lr, r5, r0
    6dec:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    6df0:	28000007 	stmdacs	r0, {r0, r1, r2}
    6df4:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    6df8:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
    6dfc:	000025ce 	andeq	r2, r0, lr, asr #11
    6e00:	27038a01 	strcs	r8, [r3, -r1, lsl #20]
    6e04:	000009f6 	strdeq	r0, [r0], -r6
    6e08:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
    6e0c:	00000c00 	andeq	r0, r0, r0, lsl #24
    6e10:	79027201 	stmdbvc	r2, {r0, r9, ip, sp, lr}
    6e14:	21000007 	tstcs	r0, r7
    6e18:	00000a12 	andeq	r0, r0, r2, lsl sl
    6e1c:	000a0521 	andeq	r0, sl, r1, lsr #10
    6e20:	f6250000 			; <UNDEFINED> instruction: 0xf6250000
    6e24:	c6000009 	strgt	r0, [r0], -r9
    6e28:	18000025 	stmdane	r0, {r0, r2, r5}
    6e2c:	0100000c 	tsteq	r0, ip
    6e30:	12210274 	eorne	r0, r1, #116, 4	; 0x40000007
    6e34:	2100000a 	tstcs	r0, sl
    6e38:	00000a05 	andeq	r0, r0, r5, lsl #20
    6e3c:	2b000000 	blcs	6e44 <__exidx_end+0x1244>
    6e40:	00001d1c 	andeq	r1, r0, ip, lsl sp
    6e44:	010d7801 	tsteq	sp, r1, lsl #16
    6e48:	001d752b 	andseq	r7, sp, fp, lsr #10
    6e4c:	0d6d0100 	stfeqe	f0, [sp, #-0]
    6e50:	1d942b01 	vldrne	d2, [r4, #4]
    6e54:	66010000 	strvs	r0, [r1], -r0
    6e58:	9a2c010d 	bls	b07294 <__ccfg+0xae72ec>
    6e5c:	0100001d 	tsteq	r0, sp, lsl r0
    6e60:	4c010d58 	stcmi	13, cr0, [r1], {88}	; 0x58
    6e64:	a0000025 	andge	r0, r0, r5, lsr #32
    6e68:	01000025 	tsteq	r0, r5, lsr #32
    6e6c:	0008429c 	muleq	r8, ip, r2
    6e70:	74731900 	ldrbtvc	r1, [r3], #-2304	; 0xfffff700
    6e74:	19580100 	ldmdbne	r8, {r8}^
    6e78:	0000009b 	muleq	r0, fp, r0
    6e7c:	00002525 	andeq	r2, r0, r5, lsr #10
    6e80:	6c656419 	cfstrdvs	mvd6, [r5], #-100	; 0xffffff9c
    6e84:	22580100 	subscs	r0, r8, #0, 2
    6e88:	0000009b 	muleq	r0, fp, r0
    6e8c:	00002538 	andeq	r2, r0, r8, lsr r5
    6e90:	00084225 	andeq	r4, r8, r5, lsr #4
    6e94:	00255400 	eoreq	r5, r5, r0, lsl #8
    6e98:	000bb800 	andeq	fp, fp, r0, lsl #16
    6e9c:	135c0100 	cmpne	ip, #0, 2
    6ea0:	000bb82d 	andeq	fp, fp, sp, lsr #16
    6ea4:	08532e00 	ldmdaeq	r3, {r9, sl, fp, sp}^
    6ea8:	254b0000 	strbcs	r0, [fp, #-0]
    6eac:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    6eb0:	54000009 	strpl	r0, [r0], #-9
    6eb4:	d8000025 	stmdale	r0, {r0, r2, r5}
    6eb8:	0100000b 	tsteq	r0, fp
    6ebc:	08240251 	stmdaeq	r4!, {r0, r4, r6, r9}
    6ec0:	12210000 	eorne	r0, r1, #0
    6ec4:	2100000a 	tstcs	r0, sl
    6ec8:	00000a05 	andeq	r0, r0, r5, lsl #20
    6ecc:	09f62800 	ldmibeq	r6!, {fp, sp}^
    6ed0:	256e0000 	strbcs	r0, [lr, #-0]!
    6ed4:	25720000 	ldrbcs	r0, [r2, #-0]!
    6ed8:	54010000 	strpl	r0, [r1], #-0
    6edc:	0a122102 	beq	48f2ec <__ccfg+0x46f344>
    6ee0:	05210000 	streq	r0, [r1, #-0]!
    6ee4:	0000000a 	andeq	r0, r0, sl
    6ee8:	2f000000 	svccs	0x00000000
    6eec:	00001d17 	andeq	r1, r0, r7, lsl sp
    6ef0:	b10d4b01 	tstlt	sp, r1, lsl #22
    6ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    6ef8:	0000085e 	andeq	r0, r0, lr, asr r8
    6efc:	01007230 	tsteq	r0, r0, lsr r2
    6f00:	00b1074f 	adcseq	r0, r1, pc, asr #14
    6f04:	31000000 	mrscc	r0, (UNDEF: 0)
    6f08:	00001cf3 	strdeq	r1, [r0], -r3
    6f0c:	010d4101 	tsteq	sp, r1, lsl #2
    6f10:	00088301 	andeq	r8, r8, r1, lsl #6
    6f14:	6d633200 	sfmvs	f3, 2, [r3, #-0]
    6f18:	41010064 	tstmi	r1, r4, rrx
    6f1c:	0000b119 	andeq	fp, r0, r9, lsl r1
    6f20:	00613200 	rsbeq	r3, r1, r0, lsl #4
    6f24:	c7244101 	strgt	r4, [r4, -r1, lsl #2]!
    6f28:	00000000 	andeq	r0, r0, r0
    6f2c:	001cbe2c 	andseq	fp, ip, ip, lsr #28
    6f30:	0d3a0100 	ldfeqs	f0, [sl, #-0]
    6f34:	00253401 	eoreq	r3, r5, r1, lsl #8
    6f38:	00254c00 	eoreq	r4, r5, r0, lsl #24
    6f3c:	e59c0100 	ldr	r0, [ip, #256]	; 0x100
    6f40:	19000008 	stmdbne	r0, {r3}
    6f44:	00646d63 	rsbeq	r6, r4, r3, ror #26
    6f48:	b1193a01 	tstlt	r9, r1, lsl #20
    6f4c:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    6f50:	27000025 	strcs	r0, [r0, -r5, lsr #32]
    6f54:	000009f6 	strdeq	r0, [r0], -r6
    6f58:	00002534 	andeq	r2, r0, r4, lsr r5
    6f5c:	00000ba0 	andeq	r0, r0, r0, lsr #23
    6f60:	c9023c01 	stmdbgt	r2, {r0, sl, fp, ip, sp}
    6f64:	21000008 	tstcs	r0, r8
    6f68:	00000a12 	andeq	r0, r0, r2, lsl sl
    6f6c:	000a0521 	andeq	r0, sl, r1, lsr #10
    6f70:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    6f74:	40000009 	andmi	r0, r0, r9
    6f78:	44000025 	strmi	r0, [r0], #-37	; 0xffffffdb
    6f7c:	01000025 	tsteq	r0, r5, lsr #32
    6f80:	1221023e 	eorne	r0, r1, #-536870909	; 0xe0000003
    6f84:	2100000a 	tstcs	r0, sl
    6f88:	00000a05 	andeq	r0, r0, r5, lsl #20
    6f8c:	a92c0000 	stmdbge	ip!, {}	; <UNPREDICTABLE>
    6f90:	0100001d 	tsteq	r0, sp, lsl r0
    6f94:	04010d29 	streq	r0, [r1], #-3369	; 0xfffff2d7
    6f98:	34000025 	strcc	r0, [r0], #-37	; 0xffffffdb
    6f9c:	01000025 	tsteq	r0, r5, lsr #32
    6fa0:	0009799c 	muleq	r9, ip, r9
    6fa4:	00621900 	rsbeq	r1, r2, r0, lsl #18
    6fa8:	b11c2901 	tstlt	ip, r1, lsl #18
    6fac:	71000000 	mrsvc	r0, (UNDEF: 0)
    6fb0:	30000025 	andcc	r0, r0, r5, lsr #32
    6fb4:	2b010069 	blcs	47160 <__ccfg+0x271b8>
    6fb8:	00008106 	andeq	r8, r0, r6, lsl #2
    6fbc:	0a3d2700 	beq	f50bc4 <__ccfg+0xf30c1c>
    6fc0:	250c0000 	strcs	r0, [ip, #-0]
    6fc4:	0b680000 	bleq	1a06fcc <__ccfg+0x19e7024>
    6fc8:	32010000 	andcc	r0, r1, #0
    6fcc:	00092e03 	andeq	r2, r9, r3, lsl #28
    6fd0:	0a4c2100 	beq	130f3d8 <__ccfg+0x12ef430>
    6fd4:	33000000 	movwcc	r0, #0
    6fd8:	00000a3d 	andeq	r0, r0, sp, lsr sl
    6fdc:	00002518 	andeq	r2, r0, r8, lsl r5
    6fe0:	0000251c 	andeq	r2, r0, ip, lsl r5
    6fe4:	48042f01 	stmdami	r4, {r0, r8, r9, sl, fp, sp}
    6fe8:	21000009 	tstcs	r0, r9
    6fec:	00000a4c 	andeq	r0, r0, ip, asr #20
    6ff0:	0a203300 	beq	813bf8 <__ccfg+0x7f3c50>
    6ff4:	251c0000 	ldrcs	r0, [ip, #-0]
    6ff8:	251e0000 	ldrcs	r0, [lr, #-0]
    6ffc:	31010000 	mrscc	r0, (UNDEF: 1)
    7000:	00096204 	andeq	r6, r9, r4, lsl #4
    7004:	0a2f2100 	beq	bcf40c <__ccfg+0xbaf464>
    7008:	25000000 	strcs	r0, [r0, #-0]
    700c:	00000a20 	andeq	r0, r0, r0, lsr #20
    7010:	00002524 	andeq	r2, r0, r4, lsr #10
    7014:	00000b88 	andeq	r0, r0, r8, lsl #23
    7018:	21033301 	tstcs	r3, r1, lsl #6
    701c:	00000a2f 	andeq	r0, r0, pc, lsr #20
    7020:	a0340000 	eorsge	r0, r4, r0
    7024:	0100001d 	tsteq	r0, sp, lsl r0
    7028:	00b10d19 	adcseq	r0, r1, r9, lsl sp
    702c:	24d00000 	ldrbcs	r0, [r0], #0
    7030:	25040000 	strcs	r0, [r4, #-0]
    7034:	9c010000 	stcls	0, cr0, [r1], {-0}
    7038:	000009f6 	strdeq	r0, [r0], -r6
    703c:	01006930 	tsteq	r0, r0, lsr r9
    7040:	0081061b 	addeq	r0, r1, fp, lsl r6
    7044:	62350000 	eorsvs	r0, r5, #0
    7048:	071c0100 	ldreq	r0, [ip, -r0, lsl #2]
    704c:	000000b1 	strheq	r0, [r0], -r1
    7050:	0000258f 	andeq	r2, r0, pc, lsl #11
    7054:	000a3d27 	andeq	r3, sl, r7, lsr #26
    7058:	0024d400 	eoreq	sp, r4, r0, lsl #8
    705c:	000b0800 	andeq	r0, fp, r0, lsl #16
    7060:	03220100 			; <UNDEFINED> instruction: 0x03220100
    7064:	000009c5 	andeq	r0, r0, r5, asr #19
    7068:	000a4c21 	andeq	r4, sl, r1, lsr #24
    706c:	20270000 	eorcs	r0, r7, r0
    7070:	da00000a 	ble	70a0 <__exidx_end+0x14a0>
    7074:	30000024 	andcc	r0, r0, r4, lsr #32
    7078:	0100000b 	tsteq	r0, fp
    707c:	09df0323 	ldmibeq	pc, {r0, r1, r5, r8, r9}^	; <UNPREDICTABLE>
    7080:	2f210000 	svccs	0x00210000
    7084:	0000000a 	andeq	r0, r0, sl
    7088:	000a5a25 	andeq	r5, sl, r5, lsr #20
    708c:	0024dc00 	eoreq	sp, r4, r0, lsl #24
    7090:	000b4800 	andeq	r4, fp, r0, lsl #16
    7094:	07200100 	streq	r0, [r0, -r0, lsl #2]!
    7098:	000a6c21 	andeq	r6, sl, r1, lsr #24
    709c:	36000000 	strcc	r0, [r0], -r0
    70a0:	00000f32 	andeq	r0, r0, r2, lsr pc
    70a4:	01020602 	tsteq	r2, r2, lsl #12
    70a8:	0a200301 	beq	807cb4 <__ccfg+0x7e7d0c>
    70ac:	03370000 	teqeq	r7, #0
    70b0:	02000011 	andeq	r0, r0, #17
    70b4:	67230206 	strvs	r0, [r3, -r6, lsl #4]!
    70b8:	37000000 	strcc	r0, [r0, -r0]
    70bc:	00001412 	andeq	r1, r0, r2, lsl r4
    70c0:	37020602 	strcc	r0, [r2, -r2, lsl #12]
    70c4:	00000067 	andeq	r0, r0, r7, rrx
    70c8:	12a63600 	adcne	r3, r6, #0, 12
    70cc:	54020000 	strpl	r0, [r2], #-0
    70d0:	03010101 	movweq	r0, #4353	; 0x1101
    70d4:	00000a3d 	andeq	r0, r0, sp, lsr sl
    70d8:	00110337 	andseq	r0, r1, r7, lsr r3
    70dc:	01540200 	cmpeq	r4, r0, lsl #4
    70e0:	00006719 	andeq	r6, r0, r9, lsl r7
    70e4:	b3360000 	teqlt	r6, #0
    70e8:	02000013 	andeq	r0, r0, #19
    70ec:	0101011e 	tsteq	r1, lr, lsl r1
    70f0:	000a5a03 	andeq	r5, sl, r3, lsl #20
    70f4:	11033700 	tstne	r3, r0, lsl #14
    70f8:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    70fc:	00671701 	rsbeq	r1, r7, r1, lsl #14
    7100:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    7104:	00001bb7 			; <UNDEFINED> instruction: 0x00001bb7
    7108:	0101a402 	tsteq	r1, r2, lsl #8
    710c:	00000067 	andeq	r0, r0, r7, rrx
    7110:	000a7903 	andeq	r7, sl, r3, lsl #18
    7114:	11033900 	tstne	r3, r0, lsl #18
    7118:	a4020000 	strge	r0, [r2], #-0
    711c:	00006718 	andeq	r6, r0, r8, lsl r7
    7120:	963a0000 	ldrtls	r0, [sl], -r0
    7124:	e0000007 	and	r0, r0, r7
    7128:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    712c:	01000026 	tsteq	r0, r6, lsr #32
    7130:	0796289c 			; <UNDEFINED> instruction: 0x0796289c
    7134:	25ea0000 	strbcs	r0, [sl, #0]!
    7138:	25fe0000 	ldrbcs	r0, [lr, #0]!
    713c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    7140:	07a83b0d 	streq	r3, [r8, sp, lsl #22]!
    7144:	25f40000 	ldrbcs	r0, [r4, #0]!
    7148:	25fa0000 	ldrbcs	r0, [sl, #0]!
    714c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    7150:	00000003 	andeq	r0, r0, r3
    7154:	0000041e 	andeq	r0, r0, lr, lsl r4
    7158:	1b830003 	blne	fe0c716c <_estack+0xde0c216c>
    715c:	01040000 	mrseq	r0, (UNDEF: 4)
    7160:	000000a3 	andeq	r0, r0, r3, lsr #1
    7164:	001db20c 	andseq	fp, sp, ip, lsl #4
    7168:	000dec00 	andeq	lr, sp, r0, lsl #24
    716c:	000d1000 	andeq	r1, sp, r0
    7170:	00000000 	andeq	r0, r0, r0
    7174:	00504d00 	subseq	r4, r0, r0, lsl #26
    7178:	06010200 	streq	r0, [r1], -r0, lsl #4
    717c:	00000c4d 	andeq	r0, r0, sp, asr #24
    7180:	5b050202 	blpl	147990 <__ccfg+0x1279e8>
    7184:	0200000a 	andeq	r0, r0, #10
    7188:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    718c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7190:	0007e805 	andeq	lr, r7, r5, lsl #16
    7194:	29fe0300 	ldmibcs	lr!, {r8, r9}^
    7198:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    719c:	00004d18 	andeq	r4, r0, r8, lsl sp
    71a0:	08010200 	stmdaeq	r1, {r9}
    71a4:	00000c4b 	andeq	r0, r0, fp, asr #24
    71a8:	002df403 	eoreq	pc, sp, r3, lsl #8
    71ac:	19310200 	ldmdbne	r1!, {r9}
    71b0:	00000060 	andeq	r0, r0, r0, rrx
    71b4:	48070202 	stmdami	r7, {r1, r9}
    71b8:	0300000d 	movweq	r0, #13
    71bc:	00002996 	muleq	r0, r6, r9
    71c0:	73193402 	tstvc	r9, #33554432	; 0x2000000
    71c4:	02000000 	andeq	r0, r0, #0
    71c8:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
    71cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    71d0:	00041807 	andeq	r1, r4, r7, lsl #16
    71d4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    71d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    71dc:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    71e0:	03000004 	movweq	r0, #4
    71e4:	000028dd 	ldrdeq	r2, [r0], -sp
    71e8:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    71ec:	05000000 	streq	r0, [r0, #-0]
    71f0:	0000008f 	andeq	r0, r0, pc, lsl #1
    71f4:	001da403 	andseq	sl, sp, r3, lsl #8
    71f8:	122b0300 	eorne	r0, fp, #0, 6
    71fc:	00000041 	andeq	r0, r0, r1, asr #32
    7200:	0000a006 	andeq	sl, r0, r6
    7204:	292f0300 	stmdbcs	pc!, {r8, r9}	; <UNPREDICTABLE>
    7208:	2c030000 	stccs	0, cr0, [r3], {-0}
    720c:	00006712 	andeq	r6, r0, r2, lsl r7
    7210:	00b10500 	adcseq	r0, r1, r0, lsl #10
    7214:	36030000 	strcc	r0, [r3], -r0
    7218:	03000006 	movweq	r0, #6
    721c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7220:	a4030000 	strge	r0, [r3], #-0
    7224:	0300000b 	movweq	r0, #11
    7228:	00da102e 	sbcseq	r1, sl, lr, lsr #32
    722c:	04070000 	streq	r0, [r7], #-0
    7230:	0000008f 	andeq	r0, r0, pc, lsl #1
    7234:	32030808 	andcc	r0, r3, #8, 16	; 0x80000
    7238:	00016e09 	andeq	r6, r1, r9, lsl #28
    723c:	002b0900 	eoreq	r0, fp, r0, lsl #18
    7240:	34030000 	strcc	r0, [r3], #-0
    7244:	0000a007 	andeq	sl, r0, r7
    7248:	07010100 	streq	r0, [r1, -r0, lsl #2]
    724c:	063c0900 	ldrteq	r0, [ip], -r0, lsl #18
    7250:	35030000 	strcc	r0, [r3, #-0]
    7254:	0000a003 	andeq	sl, r0, r3
    7258:	06010100 	streq	r0, [r1], -r0, lsl #2
    725c:	02de0900 	sbcseq	r0, lr, #0, 18
    7260:	36030000 	strcc	r0, [r3], -r0
    7264:	0000a003 	andeq	sl, r0, r3
    7268:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    726c:	06a70900 	strteq	r0, [r7], r0, lsl #18
    7270:	37030000 	strcc	r0, [r3, -r0]
    7274:	0000a003 	andeq	sl, r0, r3
    7278:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    727c:	0a8f0900 	beq	fe3c9684 <_estack+0xde3c4684>
    7280:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    7284:	0000a003 	andeq	sl, r0, r3
    7288:	00040100 	andeq	r0, r4, r0, lsl #2
    728c:	064b0a00 	strbeq	r0, [fp], -r0, lsl #20
    7290:	3a030000 	bcc	c7298 <__ccfg+0xa72f0>
    7294:	0000a007 	andeq	sl, r0, r7
    7298:	eb0a0100 	bl	2876a0 <__ccfg+0x2676f8>
    729c:	03000008 	movweq	r0, #8
    72a0:	00a0033c 	adceq	r0, r0, ip, lsr r3
    72a4:	0a020000 	beq	872ac <__ccfg+0x67304>
    72a8:	00000f1c 	andeq	r0, r0, ip, lsl pc
    72ac:	a0033d03 	andge	r3, r3, r3, lsl #26
    72b0:	03000000 	movweq	r0, #0
    72b4:	0009030a 	andeq	r0, r9, sl, lsl #6
    72b8:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    72bc:	000000b1 	strheq	r0, [r0], -r1
    72c0:	14030004 	strne	r0, [r3], #-4
    72c4:	03000003 	movweq	r0, #3
    72c8:	00e00341 	rsceq	r0, r0, r1, asr #6
    72cc:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    72d0:	0b000001 	bleq	72dc <__exidx_end+0x16dc>
    72d4:	000006ae 	andeq	r0, r0, lr, lsr #13
    72d8:	7a1a4303 	bvc	697eec <__ccfg+0x677f44>
    72dc:	01000001 	tsteq	r0, r1
    72e0:	01970b01 	orrseq	r0, r7, r1, lsl #22
    72e4:	45030000 	strmi	r0, [r3, #-0]
    72e8:	00019b0e 	andeq	r9, r1, lr, lsl #22
    72ec:	07010100 	streq	r0, [r1, -r0, lsl #2]
    72f0:	0001a104 	andeq	sl, r1, r4, lsl #2
    72f4:	08010200 	stmdaeq	r1, {r9}
    72f8:	00000c54 	andeq	r0, r0, r4, asr ip
    72fc:	0001a105 	andeq	sl, r1, r5, lsl #2
    7300:	031d0b00 	tsteq	sp, #0, 22
    7304:	45030000 	strmi	r0, [r3, #-0]
    7308:	00019b1e 	andeq	r9, r1, lr, lsl fp
    730c:	08010100 	stmdaeq	r1, {r8}
    7310:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    7314:	000001ec 	andeq	r0, r0, ip, ror #3
    7318:	000cba0a 	andeq	fp, ip, sl, lsl #20
    731c:	0b900400 	bleq	fe408324 <_estack+0xde403324>
    7320:	00000067 	andeq	r0, r0, r7, rrx
    7324:	10570a00 	subsne	r0, r7, r0, lsl #20
    7328:	91040000 	mrsls	r0, (UNDEF: 4)
    732c:	00008f08 	andeq	r8, r0, r8, lsl #30
    7330:	bc0a0400 	cfstrslt	mvf0, [sl], {-0}
    7334:	04000001 	streq	r0, [r0], #-1
    7338:	00ac1092 	umlaleq	r1, ip, r2, r0
    733c:	00060000 	andeq	r0, r6, r0
    7340:	000cae03 	andeq	sl, ip, r3, lsl #28
    7344:	03930400 	orrseq	r0, r3, #0, 8
    7348:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    734c:	0001ec0c 	andeq	lr, r1, ip, lsl #24
    7350:	00020300 	andeq	r0, r2, r0, lsl #6
    7354:	0b000d00 	bleq	a75c <__exidx_end+0x4b5c>
    7358:	0000092d 	andeq	r0, r0, sp, lsr #18
    735c:	f80f9904 			; <UNDEFINED> instruction: 0xf80f9904
    7360:	01000001 	tsteq	r0, r1
    7364:	05010801 	streq	r0, [r1, #-2049]	; 0xfffff7ff
    7368:	023b0991 	eorseq	r0, fp, #2375680	; 0x244000
    736c:	0a090000 	beq	247374 <__ccfg+0x2273cc>
    7370:	05000009 	streq	r0, [r0, #-9]
    7374:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    7378:	07010000 	streq	r0, [r1, -r0]
    737c:	bc090001 	stclt	0, cr0, [r9], {1}
    7380:	05000005 	streq	r0, [r0, #-5]
    7384:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    7388:	01010000 	mrseq	r0, (UNDEF: 1)
    738c:	03000000 	movweq	r0, #0
    7390:	00000a9b 	muleq	r0, fp, sl
    7394:	11039605 	tstne	r3, r5, lsl #12
    7398:	05000002 	streq	r0, [r0, #-2]
    739c:	0000023b 	andeq	r0, r0, fp, lsr r2
    73a0:	0002470c 	andeq	r4, r2, ip, lsl #14
    73a4:	00025700 	andeq	r5, r2, r0, lsl #14
    73a8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    73ac:	0000024c 	andeq	r0, r0, ip, asr #4
    73b0:	0003a10b 	andeq	sl, r3, fp, lsl #2
    73b4:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    73b8:	00000257 	andeq	r0, r0, r7, asr r2
    73bc:	9b0c0101 	blls	3077c8 <__ccfg+0x2e7820>
    73c0:	75000000 	strvc	r0, [r0, #-0]
    73c4:	0d000002 	stceq	0, cr0, [r0, #-8]
    73c8:	026a0500 	rsbeq	r0, sl, #0, 10
    73cc:	fe0b0000 	cdp2	0, 0, cr0, cr11, cr0, {0}
    73d0:	06000005 	streq	r0, [r0], -r5
    73d4:	02751306 	rsbseq	r1, r5, #402653184	; 0x18000000
    73d8:	01010000 	mrseq	r0, (UNDEF: 1)
    73dc:	0008cd0b 	andeq	ip, r8, fp, lsl #26
    73e0:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    73e4:	000000b1 	strheq	r0, [r0], -r1
    73e8:	620e0101 	andvs	r0, lr, #1073741824	; 0x40000000
    73ec:	0700000c 	streq	r0, [r0, -ip]
    73f0:	a310016e 	tstge	r0, #-2147483621	; 0x8000001b
    73f4:	07000002 	streq	r0, [r0, -r2]
    73f8:	0002a904 	andeq	sl, r2, r4, lsl #18
    73fc:	b5010f00 	strlt	r0, [r1, #-3840]	; 0xfffff100
    7400:	10000002 	andne	r0, r0, r2
    7404:	0000008f 	andeq	r0, r0, pc, lsl #1
    7408:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    740c:	02c00000 	sbceq	r0, r0, #0
    7410:	000d0000 	andeq	r0, sp, r0
    7414:	0002b505 	andeq	fp, r2, r5, lsl #10
    7418:	09d61100 	ldmibeq	r6, {r8, ip}^
    741c:	7f070000 	svcvc	0x00070000
    7420:	02c01601 	sbceq	r1, r0, #1048576	; 0x100000
    7424:	01010000 	mrseq	r0, (UNDEF: 1)
    7428:	00038d11 	andeq	r8, r3, r1, lsl sp
    742c:	01820700 	orreq	r0, r2, r0, lsl #14
    7430:	0000bd14 	andeq	fp, r0, r4, lsl sp
    7434:	11010100 	mrsne	r0, (UNDEF: 17)
    7438:	00000365 	andeq	r0, r0, r5, ror #6
    743c:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    7440:	000000b1 	strheq	r0, [r0], -r1
    7444:	08120101 	ldmdaeq	r2, {r0, r8}
    7448:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    744c:	00000319 	andeq	r0, r0, r9, lsl r3
    7450:	003c8313 	eorseq	r8, ip, r3, lsl r3
    7454:	03070700 	movweq	r0, #30464	; 0x7700
    7458:	00008f07 	andeq	r8, r0, r7, lsl #30
    745c:	af130000 	svcge	0x00130000
    7460:	0700000f 	streq	r0, [r0, -pc]
    7464:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    7468:	04000000 	streq	r0, [r0], #-0
    746c:	09f90e00 	ldmibeq	r9!, {r9, sl, fp}^
    7470:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    7474:	02f20303 	rscseq	r0, r2, #201326592	; 0xc000000
    7478:	20140000 	andscs	r0, r4, r0
    747c:	30000000 	andcc	r0, r0, r0
    7480:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    7484:	00000389 	andeq	r0, r0, r9, lsl #7
    7488:	001f0613 	andseq	r0, pc, r3, lsl r6	; <UNPREDICTABLE>
    748c:	03140700 	tsteq	r4, #0, 14
    7490:	00008f08 	andeq	r8, r0, r8, lsl #30
    7494:	d7130000 	ldrle	r0, [r3, -r0]
    7498:	0700000b 	streq	r0, [r0, -fp]
    749c:	8f080315 	svchi	0x00080315
    74a0:	02000000 	andeq	r0, r0, #0
    74a4:	004c7013 	subeq	r7, ip, r3, lsl r0
    74a8:	03160700 	tsteq	r6, #0, 14
    74ac:	0002960b 	andeq	r9, r2, fp, lsl #12
    74b0:	36130400 	ldrcc	r0, [r3], -r0, lsl #8
    74b4:	07000047 	streq	r0, [r0, -r7, asr #32]
    74b8:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    74bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    74c0:	00000f13 	andeq	r0, r0, r3, lsl pc
    74c4:	03180700 	tsteq	r8, #0, 14
    74c8:	0003890f 	andeq	r8, r3, pc, lsl #18
    74cc:	4d130c00 	ldcmi	12, cr0, [r3, #-0]
    74d0:	07000009 	streq	r0, [r0, -r9]
    74d4:	99150319 	ldmdbls	r5, {r0, r3, r4, r8, r9}
    74d8:	2c000003 	stccs	0, cr0, [r0], {3}
    74dc:	03190c00 	tsteq	r9, #0, 24
    74e0:	03990000 	orrseq	r0, r9, #0
    74e4:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    74e8:	03000000 	movweq	r0, #0
    74ec:	26040700 	strcs	r0, [r4], -r0, lsl #14
    74f0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    74f4:	00000bcc 	andeq	r0, r0, ip, asr #23
    74f8:	1b031c07 	blne	ce51c <__ccfg+0xae574>
    74fc:	00000326 	andeq	r0, r0, r6, lsr #6
    7500:	000bac11 	andeq	sl, fp, r1, lsl ip
    7504:	031e0700 	tsteq	lr, #0, 14
    7508:	0003bb14 	andeq	fp, r3, r4, lsl fp
    750c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7510:	00039f04 	andeq	r9, r3, r4, lsl #30
    7514:	f3011600 	vmax.u8	d1, d1, d0
    7518:	0100001d 	tsteq	r0, sp, lsl r0
    751c:	8101050b 	tsthi	r1, fp, lsl #10
    7520:	2c000000 	stccs	0, cr0, [r0], {-0}
    7524:	98000026 	stmdals	r0, {r1, r2, r5}
    7528:	01000026 	tsteq	r0, r6, lsr #32
    752c:	00041b9c 	muleq	r4, ip, fp
    7530:	74731700 	ldrbtvc	r1, [r3], #-1792	; 0xfffff900
    7534:	130b0100 	movwne	r0, #45312	; 0xb100
    7538:	0000008f 	andeq	r0, r0, pc, lsl #1
    753c:	000025ad 	andeq	r2, r0, sp, lsr #11
    7540:	01006d17 	tsteq	r0, r7, lsl sp
    7544:	041b230b 	ldreq	r2, [fp], #-779	; 0xfffffcf5
    7548:	25c00000 	strbcs	r0, [r0]
    754c:	ed180000 	ldc	0, cr0, [r8, #-0]
    7550:	01000025 	tsteq	r0, r5, lsr #32
    7554:	0081060d 	addeq	r0, r1, sp, lsl #12
    7558:	25de0000 	ldrbcs	r0, [lr]
    755c:	62190000 	andsvs	r0, r9, #0
    7560:	01006675 	tsteq	r0, r5, ror r6
    7564:	019b080e 	orrseq	r0, fp, lr, lsl #16
    7568:	261d0000 	ldrcs	r0, [sp], -r0
    756c:	07000000 	streq	r0, [r0, -r0]
    7570:	0001a804 	andeq	sl, r1, r4, lsl #16
    7574:	04120000 	ldreq	r0, [r2], #-0
    7578:	00030000 	andeq	r0, r3, r0
    757c:	00001ce5 	andeq	r1, r0, r5, ror #25
    7580:	00a30104 	adceq	r0, r3, r4, lsl #2
    7584:	fb0c0000 	blx	30758e <__ccfg+0x2e75e6>
    7588:	ec00001d 	stc	0, cr0, [r0], {29}
    758c:	2000000d 	andcs	r0, r0, sp
    7590:	0000000d 	andeq	r0, r0, sp
    7594:	01000000 	mrseq	r0, (UNDEF: 0)
    7598:	02000052 	andeq	r0, r0, #82	; 0x52
    759c:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
    75a0:	02020000 	andeq	r0, r2, #0
    75a4:	000a5b05 	andeq	r5, sl, r5, lsl #22
    75a8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    75ac:	000007ed 	andeq	r0, r0, sp, ror #15
    75b0:	e8050802 	stmda	r5, {r1, fp}
    75b4:	03000007 	movweq	r0, #7
    75b8:	000029fe 	strdeq	r2, [r0], -lr
    75bc:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    75c0:	02000000 	andeq	r0, r0, #0
    75c4:	0c4b0801 	mcrreq	8, 0, r0, fp, cr1
    75c8:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    75cc:	0200002d 	andeq	r0, r0, #45	; 0x2d
    75d0:	00601931 	rsbeq	r1, r0, r1, lsr r9
    75d4:	02020000 	andeq	r0, r2, #0
    75d8:	000d4807 	andeq	r4, sp, r7, lsl #16
    75dc:	29960300 	ldmibcs	r6, {r8, r9}
    75e0:	34020000 	strcc	r0, [r2], #-0
    75e4:	00007319 	andeq	r7, r0, r9, lsl r3
    75e8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    75ec:	0000041d 	andeq	r0, r0, sp, lsl r4
    75f0:	18070802 	stmdane	r7, {r1, fp}
    75f4:	04000004 	streq	r0, [r0], #-4
    75f8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    75fc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7600:	00042207 	andeq	r2, r4, r7, lsl #4
    7604:	28dd0300 	ldmcs	sp, {r8, r9}^
    7608:	27030000 	strcs	r0, [r3, -r0]
    760c:	00005412 	andeq	r5, r0, r2, lsl r4
    7610:	008f0500 	addeq	r0, pc, r0, lsl #10
    7614:	a4030000 	strge	r0, [r3], #-0
    7618:	0300001d 	movweq	r0, #29
    761c:	0041122b 	subeq	r1, r1, fp, lsr #4
    7620:	a0060000 	andge	r0, r6, r0
    7624:	03000000 	movweq	r0, #0
    7628:	0000292f 	andeq	r2, r0, pc, lsr #18
    762c:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    7630:	05000000 	streq	r0, [r0, #-0]
    7634:	000000b1 	strheq	r0, [r0], -r1
    7638:	00063603 	andeq	r3, r6, r3, lsl #12
    763c:	122d0300 	eorne	r0, sp, #0, 6
    7640:	00000067 	andeq	r0, r0, r7, rrx
    7644:	32030807 	andcc	r0, r3, #458752	; 0x70000
    7648:	00015c09 	andeq	r5, r1, r9, lsl #24
    764c:	002b0800 	eoreq	r0, fp, r0, lsl #16
    7650:	34030000 	strcc	r0, [r3], #-0
    7654:	0000a007 	andeq	sl, r0, r7
    7658:	07010100 	streq	r0, [r1, -r0, lsl #2]
    765c:	063c0800 	ldrteq	r0, [ip], -r0, lsl #16
    7660:	35030000 	strcc	r0, [r3, #-0]
    7664:	0000a003 	andeq	sl, r0, r3
    7668:	06010100 	streq	r0, [r1], -r0, lsl #2
    766c:	02de0800 	sbcseq	r0, lr, #0, 16
    7670:	36030000 	strcc	r0, [r3], -r0
    7674:	0000a003 	andeq	sl, r0, r3
    7678:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    767c:	06a70800 	strteq	r0, [r7], r0, lsl #16
    7680:	37030000 	strcc	r0, [r3, -r0]
    7684:	0000a003 	andeq	sl, r0, r3
    7688:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    768c:	0a8f0800 	beq	fe3c9694 <_estack+0xde3c4694>
    7690:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    7694:	0000a003 	andeq	sl, r0, r3
    7698:	00040100 	andeq	r0, r4, r0, lsl #2
    769c:	064b0900 	strbeq	r0, [fp], -r0, lsl #18
    76a0:	3a030000 	bcc	c76a8 <__ccfg+0xa7700>
    76a4:	0000a007 	andeq	sl, r0, r7
    76a8:	eb090100 	bl	247ab0 <__ccfg+0x227b08>
    76ac:	03000008 	movweq	r0, #8
    76b0:	00a0033c 	adceq	r0, r0, ip, lsr r3
    76b4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    76b8:	00000f1c 	andeq	r0, r0, ip, lsl pc
    76bc:	a0033d03 	andge	r3, r3, r3, lsl #26
    76c0:	03000000 	movweq	r0, #0
    76c4:	00090309 	andeq	r0, r9, r9, lsl #6
    76c8:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    76cc:	000000b1 	strheq	r0, [r0], -r1
    76d0:	14030004 	strne	r0, [r3], #-4
    76d4:	03000003 	movweq	r0, #3
    76d8:	00ce0341 	sbceq	r0, lr, r1, asr #6
    76dc:	5c060000 	stcpl	0, cr0, [r6], {-0}
    76e0:	0a000001 	beq	76ec <__exidx_end+0x1aec>
    76e4:	000006ae 	andeq	r0, r0, lr, lsr #13
    76e8:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    76ec:	01000001 	tsteq	r0, r1
    76f0:	01970a01 	orrseq	r0, r7, r1, lsl #20
    76f4:	45030000 	strmi	r0, [r3, #-0]
    76f8:	0001890e 	andeq	r8, r1, lr, lsl #18
    76fc:	0b010100 	bleq	47b04 <__ccfg+0x27b5c>
    7700:	00018f04 	andeq	r8, r1, r4, lsl #30
    7704:	08010200 	stmdaeq	r1, {r9}
    7708:	00000c54 	andeq	r0, r0, r4, asr ip
    770c:	00018f05 	andeq	r8, r1, r5, lsl #30
    7710:	031d0a00 	tsteq	sp, #0, 20
    7714:	45030000 	strmi	r0, [r3, #-0]
    7718:	0001891e 	andeq	r8, r1, lr, lsl r9
    771c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7720:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    7724:	000001da 	ldrdeq	r0, [r0], -sl
    7728:	000cba09 	andeq	fp, ip, r9, lsl #20
    772c:	0b900400 	bleq	fe408734 <_estack+0xde403734>
    7730:	00000067 	andeq	r0, r0, r7, rrx
    7734:	10570900 	subsne	r0, r7, r0, lsl #18
    7738:	91040000 	mrsls	r0, (UNDEF: 4)
    773c:	00008f08 	andeq	r8, r0, r8, lsl #30
    7740:	bc090400 	cfstrslt	mvf0, [r9], {-0}
    7744:	04000001 	streq	r0, [r0], #-1
    7748:	00ac1092 	umlaleq	r1, ip, r2, r0
    774c:	00060000 	andeq	r0, r6, r0
    7750:	000cae03 	andeq	sl, ip, r3, lsl #28
    7754:	03930400 	orrseq	r0, r3, #0, 8
    7758:	000001a9 	andeq	r0, r0, r9, lsr #3
    775c:	0001da0c 	andeq	sp, r1, ip, lsl #20
    7760:	0001f100 	andeq	pc, r1, r0, lsl #2
    7764:	0a000d00 	beq	ab6c <__exidx_end+0x4f6c>
    7768:	0000092d 	andeq	r0, r0, sp, lsr #18
    776c:	e60f9904 	str	r9, [pc], -r4, lsl #18
    7770:	01000001 	tsteq	r0, r1
    7774:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    7778:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    777c:	0a080000 	beq	207784 <__ccfg+0x1e77dc>
    7780:	05000009 	streq	r0, [r0, #-9]
    7784:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    7788:	07010000 	streq	r0, [r1, -r0]
    778c:	bc080001 	stclt	0, cr0, [r8], {1}
    7790:	05000005 	streq	r0, [r0, #-5]
    7794:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    7798:	01010000 	mrseq	r0, (UNDEF: 1)
    779c:	03000000 	movweq	r0, #0
    77a0:	00000a9b 	muleq	r0, fp, sl
    77a4:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    77a8:	05000001 	streq	r0, [r0, #-1]
    77ac:	00000229 	andeq	r0, r0, r9, lsr #4
    77b0:	0002350c 	andeq	r3, r2, ip, lsl #10
    77b4:	00024500 	andeq	r4, r2, r0, lsl #10
    77b8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    77bc:	0000023a 	andeq	r0, r0, sl, lsr r2
    77c0:	0003a10a 	andeq	sl, r3, sl, lsl #2
    77c4:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    77c8:	00000245 	andeq	r0, r0, r5, asr #4
    77cc:	9b0c0101 	blls	307bd8 <__ccfg+0x2e7c30>
    77d0:	63000000 	movwvs	r0, #0
    77d4:	0d000002 	stceq	0, cr0, [r0, #-8]
    77d8:	02580500 	subseq	r0, r8, #0, 10
    77dc:	fe0a0000 	cdp2	0, 0, cr0, cr10, cr0, {0}
    77e0:	06000005 	streq	r0, [r0], -r5
    77e4:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    77e8:	01010000 	mrseq	r0, (UNDEF: 1)
    77ec:	0008cd0a 	andeq	ip, r8, sl, lsl #26
    77f0:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    77f4:	000000b1 	strheq	r0, [r0], -r1
    77f8:	620e0101 	andvs	r0, lr, #1073741824	; 0x40000000
    77fc:	0700000c 	streq	r0, [r0, -ip]
    7800:	9110016e 	tstls	r0, lr, ror #2
    7804:	0b000002 	bleq	7814 <__exidx_end+0x1c14>
    7808:	00029704 	andeq	r9, r2, r4, lsl #14
    780c:	a3010f00 	movwge	r0, #7936	; 0x1f00
    7810:	10000002 	andne	r0, r0, r2
    7814:	0000008f 	andeq	r0, r0, pc, lsl #1
    7818:	01960c00 	orrseq	r0, r6, r0, lsl #24
    781c:	02ae0000 	adceq	r0, lr, #0
    7820:	000d0000 	andeq	r0, sp, r0
    7824:	0002a305 	andeq	sl, r2, r5, lsl #6
    7828:	09d61100 	ldmibeq	r6, {r8, ip}^
    782c:	7f070000 	svcvc	0x00070000
    7830:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    7834:	01010000 	mrseq	r0, (UNDEF: 1)
    7838:	00038d11 	andeq	r8, r3, r1, lsl sp
    783c:	01820700 	orreq	r0, r2, r0, lsl #14
    7840:	0000bd14 	andeq	fp, r0, r4, lsl sp
    7844:	11010100 	mrsne	r0, (UNDEF: 17)
    7848:	00000365 	andeq	r0, r0, r5, ror #6
    784c:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    7850:	000000b1 	strheq	r0, [r0], -r1
    7854:	08120101 	ldmdaeq	r2, {r0, r8}
    7858:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    785c:	00000307 	andeq	r0, r0, r7, lsl #6
    7860:	003c8313 	eorseq	r8, ip, r3, lsl r3
    7864:	03070700 	movweq	r0, #30464	; 0x7700
    7868:	00008f07 	andeq	r8, r0, r7, lsl #30
    786c:	af130000 	svcge	0x00130000
    7870:	0700000f 	streq	r0, [r0, -pc]
    7874:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    7878:	04000000 	streq	r0, [r0], #-0
    787c:	09f90e00 	ldmibeq	r9!, {r9, sl, fp}^
    7880:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    7884:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    7888:	20140000 	andscs	r0, r4, r0
    788c:	30000000 	andcc	r0, r0, r0
    7890:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    7894:	00000377 	andeq	r0, r0, r7, ror r3
    7898:	001f0613 	andseq	r0, pc, r3, lsl r6	; <UNPREDICTABLE>
    789c:	03140700 	tsteq	r4, #0, 14
    78a0:	00008f08 	andeq	r8, r0, r8, lsl #30
    78a4:	d7130000 	ldrle	r0, [r3, -r0]
    78a8:	0700000b 	streq	r0, [r0, -fp]
    78ac:	8f080315 	svchi	0x00080315
    78b0:	02000000 	andeq	r0, r0, #0
    78b4:	004c7013 	subeq	r7, ip, r3, lsl r0
    78b8:	03160700 	tsteq	r6, #0, 14
    78bc:	0002840b 	andeq	r8, r2, fp, lsl #8
    78c0:	36130400 	ldrcc	r0, [r3], -r0, lsl #8
    78c4:	07000047 	streq	r0, [r0, -r7, asr #32]
    78c8:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    78cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    78d0:	00000f13 	andeq	r0, r0, r3, lsl pc
    78d4:	03180700 	tsteq	r8, #0, 14
    78d8:	0003770f 	andeq	r7, r3, pc, lsl #14
    78dc:	4d130c00 	ldcmi	12, cr0, [r3, #-0]
    78e0:	07000009 	streq	r0, [r0, -r9]
    78e4:	87150319 			; <UNDEFINED> instruction: 0x87150319
    78e8:	2c000003 	stccs	0, cr0, [r0], {3}
    78ec:	03070c00 	movweq	r0, #31744	; 0x7c00
    78f0:	03870000 	orreq	r0, r7, #0
    78f4:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    78f8:	03000000 	movweq	r0, #0
    78fc:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    7900:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    7904:	00000bcc 	andeq	r0, r0, ip, asr #23
    7908:	1b031c07 	blne	ce92c <__ccfg+0xae984>
    790c:	00000314 	andeq	r0, r0, r4, lsl r3
    7910:	000bac11 	andeq	sl, fp, r1, lsl ip
    7914:	031e0700 	tsteq	lr, #0, 14
    7918:	0003a914 	andeq	sl, r3, r4, lsl r9
    791c:	0b010100 	bleq	47d24 <__ccfg+0x27d7c>
    7920:	00038d04 	andeq	r8, r3, r4, lsl #26
    7924:	1e3b0a00 	vaddne.f32	s0, s22, s0
    7928:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    792c:	0001890e 	andeq	r8, r1, lr, lsl #18
    7930:	16010100 	strne	r0, [r1], -r0, lsl #2
    7934:	001e4501 	andseq	r4, lr, r1, lsl #10
    7938:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    793c:	00008101 	andeq	r8, r0, r1, lsl #2
    7940:	00269800 	eoreq	r9, r6, r0, lsl #16
    7944:	00271000 	eoreq	r1, r7, r0
    7948:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    794c:	01007473 	tsteq	r0, r3, ror r4
    7950:	008f120d 	addeq	r1, pc, sp, lsl #4
    7954:	26670000 	strbtcs	r0, [r7], -r0
    7958:	62170000 	andsvs	r0, r7, #0
    795c:	01006675 	tsteq	r0, r5, ror r6
    7960:	01891c0d 	orreq	r1, r9, sp, lsl #24
    7964:	26850000 	strcs	r0, [r5], r0
    7968:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    796c:	01006e65 	tsteq	r0, r5, ror #28
    7970:	0081250d 	addeq	r2, r1, sp, lsl #10
    7974:	26da0000 	ldrbcs	r0, [sl], r0
    7978:	ed180000 	ldc	0, cr0, [r8, #-0]
    797c:	01000025 	tsteq	r0, r5, lsr #32
    7980:	00810611 	addeq	r0, r1, r1, lsl r6
    7984:	272f0000 	strcs	r0, [pc, -r0]!
    7988:	00000000 	andeq	r0, r0, r0
    798c:	0000044c 	andeq	r0, r0, ip, asr #8
    7990:	1e340003 	cdpne	0, 3, cr0, cr4, cr3, {0}
    7994:	01040000 	mrseq	r0, (UNDEF: 4)
    7998:	000000a3 	andeq	r0, r0, r3, lsr #1
    799c:	001e550c 	andseq	r5, lr, ip, lsl #10
    79a0:	000dec00 	andeq	lr, sp, r0, lsl #24
    79a4:	000d3000 	andeq	r3, sp, r0
    79a8:	00000000 	andeq	r0, r0, r0
    79ac:	0053c900 	subseq	ip, r3, r0, lsl #18
    79b0:	06010200 	streq	r0, [r1], -r0, lsl #4
    79b4:	00000c4d 	andeq	r0, r0, sp, asr #24
    79b8:	5b050202 	blpl	1481c8 <__ccfg+0x128220>
    79bc:	0200000a 	andeq	r0, r0, #10
    79c0:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    79c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    79c8:	0007e805 	andeq	lr, r7, r5, lsl #16
    79cc:	29fe0300 	ldmibcs	lr!, {r8, r9}^
    79d0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    79d4:	00004d18 	andeq	r4, r0, r8, lsl sp
    79d8:	08010200 	stmdaeq	r1, {r9}
    79dc:	00000c4b 	andeq	r0, r0, fp, asr #24
    79e0:	002df403 	eoreq	pc, sp, r3, lsl #8
    79e4:	19310200 	ldmdbne	r1!, {r9}
    79e8:	00000060 	andeq	r0, r0, r0, rrx
    79ec:	48070202 	stmdami	r7, {r1, r9}
    79f0:	0300000d 	movweq	r0, #13
    79f4:	00002996 	muleq	r0, r6, r9
    79f8:	73193402 	tstvc	r9, #33554432	; 0x2000000
    79fc:	02000000 	andeq	r0, r0, #0
    7a00:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
    7a04:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7a08:	00041807 	andeq	r1, r4, r7, lsl #16
    7a0c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7a10:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7a14:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    7a18:	03000004 	movweq	r0, #4
    7a1c:	0000050e 	andeq	r0, r0, lr, lsl #10
    7a20:	9b1b2803 	blls	6d1a34 <__ccfg+0x6b1a8c>
    7a24:	05000000 	streq	r0, [r0, #-0]
    7a28:	00000b80 	andeq	r0, r0, r0, lsl #23
    7a2c:	b3000904 	movwlt	r0, #2308	; 0x904
    7a30:	06000000 	streq	r0, [r0], -r0
    7a34:	0000085d 	andeq	r0, r0, sp, asr r8
    7a38:	000000b3 	strheq	r0, [r0], -r3
    7a3c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    7a40:	0b820304 	bleq	fe088658 <_estack+0xde083658>
    7a44:	63030000 	movwvs	r0, #12288	; 0x3000
    7a48:	00008f18 	andeq	r8, r0, r8, lsl pc
    7a4c:	28dd0300 	ldmcs	sp, {r8, r9}^
    7a50:	27040000 	strcs	r0, [r4, -r0]
    7a54:	00005412 	andeq	r5, r0, r2, lsl r4
    7a58:	00c10800 	sbceq	r0, r1, r0, lsl #16
    7a5c:	a4030000 	strge	r0, [r3], #-0
    7a60:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    7a64:	0041122b 	subeq	r1, r1, fp, lsr #4
    7a68:	d2090000 	andle	r0, r9, #0
    7a6c:	03000000 	movweq	r0, #0
    7a70:	0000292f 	andeq	r2, r0, pc, lsr #18
    7a74:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7a78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7a7c:	000000e3 	andeq	r0, r0, r3, ror #1
    7a80:	00063603 	andeq	r3, r6, r3, lsl #12
    7a84:	122d0400 	eorne	r0, sp, #0, 8
    7a88:	00000067 	andeq	r0, r0, r7, rrx
    7a8c:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    7a90:	00018e09 	andeq	r8, r1, r9, lsl #28
    7a94:	002b0b00 	eoreq	r0, fp, r0, lsl #22
    7a98:	34040000 	strcc	r0, [r4], #-0
    7a9c:	0000d207 	andeq	sp, r0, r7, lsl #4
    7aa0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7aa4:	063c0b00 	ldrteq	r0, [ip], -r0, lsl #22
    7aa8:	35040000 	strcc	r0, [r4, #-0]
    7aac:	0000d203 	andeq	sp, r0, r3, lsl #4
    7ab0:	06010100 	streq	r0, [r1], -r0, lsl #2
    7ab4:	02de0b00 	sbcseq	r0, lr, #0, 22
    7ab8:	36040000 	strcc	r0, [r4], -r0
    7abc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7ac0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7ac4:	06a70b00 	strteq	r0, [r7], r0, lsl #22
    7ac8:	37040000 	strcc	r0, [r4, -r0]
    7acc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7ad0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7ad4:	0a8f0b00 	beq	fe3ca6dc <_estack+0xde3c56dc>
    7ad8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7adc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7ae0:	00040100 	andeq	r0, r4, r0, lsl #2
    7ae4:	064b0c00 	strbeq	r0, [fp], -r0, lsl #24
    7ae8:	3a040000 	bcc	107af0 <__ccfg+0xe7b48>
    7aec:	0000d207 	andeq	sp, r0, r7, lsl #4
    7af0:	eb0c0100 	bl	307ef8 <__ccfg+0x2e7f50>
    7af4:	04000008 	streq	r0, [r0], #-8
    7af8:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7afc:	0c020000 	stceq	0, cr0, [r2], {-0}
    7b00:	00000f1c 	andeq	r0, r0, ip, lsl pc
    7b04:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    7b08:	03000000 	movweq	r0, #0
    7b0c:	0009030c 	andeq	r0, r9, ip, lsl #6
    7b10:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    7b14:	000000e3 	andeq	r0, r0, r3, ror #1
    7b18:	14030004 	strne	r0, [r3], #-4
    7b1c:	04000003 	streq	r0, [r0], #-3
    7b20:	01000341 	tsteq	r0, r1, asr #6
    7b24:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    7b28:	0d000001 	stceq	0, cr0, [r0, #-4]
    7b2c:	000006ae 	andeq	r0, r0, lr, lsr #13
    7b30:	9a1a4304 	bls	698748 <__ccfg+0x6787a0>
    7b34:	01000001 	tsteq	r0, r1
    7b38:	01970d01 	orrseq	r0, r7, r1, lsl #26
    7b3c:	45040000 	strmi	r0, [r4, #-0]
    7b40:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    7b44:	0e010100 	adfeqs	f0, f1, f0
    7b48:	0001c104 	andeq	ip, r1, r4, lsl #2
    7b4c:	08010200 	stmdaeq	r1, {r9}
    7b50:	00000c54 	andeq	r0, r0, r4, asr ip
    7b54:	0001c108 	andeq	ip, r1, r8, lsl #2
    7b58:	031d0d00 	tsteq	sp, #0, 26
    7b5c:	45040000 	strmi	r0, [r4, #-0]
    7b60:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    7b64:	0a010100 	beq	47f6c <__ccfg+0x27fc4>
    7b68:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    7b6c:	0000020c 	andeq	r0, r0, ip, lsl #4
    7b70:	000cba0c 	andeq	fp, ip, ip, lsl #20
    7b74:	0b900500 	bleq	fe408f7c <_estack+0xde403f7c>
    7b78:	00000067 	andeq	r0, r0, r7, rrx
    7b7c:	10570c00 	subsne	r0, r7, r0, lsl #24
    7b80:	91050000 	mrsls	r0, (UNDEF: 5)
    7b84:	0000c108 	andeq	ip, r0, r8, lsl #2
    7b88:	bc0c0400 	cfstrslt	mvf0, [ip], {-0}
    7b8c:	05000001 	streq	r0, [r0, #-1]
    7b90:	00de1092 	smullseq	r1, lr, r2, r0
    7b94:	00060000 	andeq	r0, r6, r0
    7b98:	000cae03 	andeq	sl, ip, r3, lsl #28
    7b9c:	03930500 	orrseq	r0, r3, #0, 10
    7ba0:	000001db 	ldrdeq	r0, [r0], -fp
    7ba4:	00020c0f 	andeq	r0, r2, pc, lsl #24
    7ba8:	00022300 	andeq	r2, r2, r0, lsl #6
    7bac:	0d001000 	stceq	0, cr1, [r0, #-0]
    7bb0:	0000092d 	andeq	r0, r0, sp, lsr #18
    7bb4:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    7bb8:	01000002 	tsteq	r0, r2
    7bbc:	06010a01 	streq	r0, [r1], -r1, lsl #20
    7bc0:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    7bc4:	0a0b0000 	beq	2c7bcc <__ccfg+0x2a7c24>
    7bc8:	06000009 	streq	r0, [r0], -r9
    7bcc:	00d20793 	smullseq	r0, r2, r3, r7
    7bd0:	07010000 	streq	r0, [r1, -r0]
    7bd4:	bc0b0001 	stclt	0, cr0, [fp], {1}
    7bd8:	06000005 	streq	r0, [r0], -r5
    7bdc:	00d20394 	smullseq	r0, r2, r4, r3
    7be0:	01010000 	mrseq	r0, (UNDEF: 1)
    7be4:	03000000 	movweq	r0, #0
    7be8:	00000a9b 	muleq	r0, fp, sl
    7bec:	31039606 	tstcc	r3, r6, lsl #12
    7bf0:	08000002 	stmdaeq	r0, {r1}
    7bf4:	0000025b 	andeq	r0, r0, fp, asr r2
    7bf8:	0002670f 	andeq	r6, r2, pc, lsl #14
    7bfc:	00027700 	andeq	r7, r2, r0, lsl #14
    7c00:	08001000 	stmdaeq	r0, {ip}
    7c04:	0000026c 	andeq	r0, r0, ip, ror #4
    7c08:	0003a10d 	andeq	sl, r3, sp, lsl #2
    7c0c:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7c10:	00000277 	andeq	r0, r0, r7, ror r2
    7c14:	cd0f0101 	stfgts	f0, [pc, #-4]	; 7c18 <__exidx_end+0x2018>
    7c18:	95000000 	strls	r0, [r0, #-0]
    7c1c:	10000002 	andne	r0, r0, r2
    7c20:	028a0800 	addeq	r0, sl, #0, 16
    7c24:	fe0d0000 	cdp2	0, 0, cr0, cr13, cr0, {0}
    7c28:	07000005 	streq	r0, [r0, -r5]
    7c2c:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    7c30:	01010000 	mrseq	r0, (UNDEF: 1)
    7c34:	0008cd0d 	andeq	ip, r8, sp, lsl #26
    7c38:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    7c3c:	000000e3 	andeq	r0, r0, r3, ror #1
    7c40:	62110101 	andsvs	r0, r1, #1073741824	; 0x40000000
    7c44:	0800000c 	stmdaeq	r0, {r2, r3}
    7c48:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    7c4c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7c50:	0002c904 	andeq	ip, r2, r4, lsl #18
    7c54:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    7c58:	13000002 	movwne	r0, #2
    7c5c:	000000c1 	andeq	r0, r0, r1, asr #1
    7c60:	01c80f00 	biceq	r0, r8, r0, lsl #30
    7c64:	02e00000 	rsceq	r0, r0, #0
    7c68:	00100000 	andseq	r0, r0, r0
    7c6c:	0002d508 	andeq	sp, r2, r8, lsl #10
    7c70:	09d61400 	ldmibeq	r6, {sl, ip}^
    7c74:	7f080000 	svcvc	0x00080000
    7c78:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    7c7c:	01010000 	mrseq	r0, (UNDEF: 1)
    7c80:	00038d14 	andeq	r8, r3, r4, lsl sp
    7c84:	01820800 	orreq	r0, r2, r0, lsl #16
    7c88:	0000ef14 	andeq	lr, r0, r4, lsl pc
    7c8c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7c90:	00000365 	andeq	r0, r0, r5, ror #6
    7c94:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7c98:	000000e3 	andeq	r0, r0, r3, ror #1
    7c9c:	08150101 	ldmdaeq	r5, {r0, r8}
    7ca0:	09030308 	stmdbeq	r3, {r3, r8, r9}
    7ca4:	00000339 	andeq	r0, r0, r9, lsr r3
    7ca8:	003c8316 	eorseq	r8, ip, r6, lsl r3
    7cac:	03070800 	movweq	r0, #30720	; 0x7800
    7cb0:	0000c107 	andeq	ip, r0, r7, lsl #2
    7cb4:	af160000 	svcge	0x00160000
    7cb8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7cbc:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    7cc0:	04000000 	streq	r0, [r0], #-0
    7cc4:	09f91100 	ldmibeq	r9!, {r8, ip}^
    7cc8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7ccc:	03120303 	tsteq	r2, #201326592	; 0xc000000
    7cd0:	20170000 	andscs	r0, r7, r0
    7cd4:	30000000 	andcc	r0, r0, r0
    7cd8:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7cdc:	000003a9 	andeq	r0, r0, r9, lsr #7
    7ce0:	001f0616 	andseq	r0, pc, r6, lsl r6	; <UNPREDICTABLE>
    7ce4:	03140800 	tsteq	r4, #0, 16
    7ce8:	0000c108 	andeq	ip, r0, r8, lsl #2
    7cec:	d7160000 	ldrle	r0, [r6, -r0]
    7cf0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    7cf4:	c1080315 	tstgt	r8, r5, lsl r3
    7cf8:	02000000 	andeq	r0, r0, #0
    7cfc:	004c7016 	subeq	r7, ip, r6, lsl r0
    7d00:	03160800 	tsteq	r6, #0, 16
    7d04:	0002b60b 	andeq	fp, r2, fp, lsl #12
    7d08:	36160400 	ldrcc	r0, [r6], -r0, lsl #8
    7d0c:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    7d10:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    7d14:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7d18:	00000f16 	andeq	r0, r0, r6, lsl pc
    7d1c:	03180800 	tsteq	r8, #0, 16
    7d20:	0003a90f 	andeq	sl, r3, pc, lsl #18
    7d24:	4d160c00 	ldcmi	12, cr0, [r6, #-0]
    7d28:	08000009 	stmdaeq	r0, {r0, r3}
    7d2c:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    7d30:	2c000003 	stccs	0, cr0, [r0], {3}
    7d34:	03390f00 	teqeq	r9, #0, 30
    7d38:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    7d3c:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7d40:	03000000 	movweq	r0, #0
    7d44:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    7d48:	11000003 	tstne	r0, r3
    7d4c:	00000bcc 	andeq	r0, r0, ip, asr #23
    7d50:	1b031c08 	blne	ced78 <__ccfg+0xaedd0>
    7d54:	00000346 	andeq	r0, r0, r6, asr #6
    7d58:	000bac14 	andeq	sl, fp, r4, lsl ip
    7d5c:	031e0800 	tsteq	lr, #0, 16
    7d60:	0003db14 	andeq	sp, r3, r4, lsl fp
    7d64:	0e010100 	adfeqs	f0, f1, f0
    7d68:	0003bf04 	andeq	fp, r3, r4, lsl #30
    7d6c:	4c011900 			; <UNDEFINED> instruction: 0x4c011900
    7d70:	0100001e 	tsteq	r0, lr, lsl r0
    7d74:	8101050c 	tsthi	r1, ip, lsl #10
    7d78:	10000000 	andne	r0, r0, r0
    7d7c:	64000027 	strvs	r0, [r0], #-39	; 0xffffffd9
    7d80:	01000027 	tsteq	r0, r7, lsr #32
    7d84:	0004499c 	muleq	r4, ip, r9
    7d88:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    7d8c:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    7d90:	000000c1 	andeq	r0, r0, r1, asr #1
    7d94:	00002779 	andeq	r2, r0, r9, ror r7
    7d98:	01006d1b 	tsteq	r0, fp, lsl sp
    7d9c:	0449240c 	strbeq	r2, [r9], #-1036	; 0xfffffbf4
    7da0:	91020000 	mrsls	r0, (UNDEF: 2)
    7da4:	ed1d1c74 	ldc	12, cr1, [sp, #-464]	; 0xfffffe30
    7da8:	01000025 	tsteq	r0, r5, lsr #32
    7dac:	0081060e 	addeq	r0, r1, lr, lsl #12
    7db0:	278c0000 	strcs	r0, [ip, r0]
    7db4:	621e0000 	andsvs	r0, lr, #0
    7db8:	01006675 	tsteq	r0, r5, ror r6
    7dbc:	01bb080f 			; <UNDEFINED> instruction: 0x01bb080f
    7dc0:	27cb0000 	strbcs	r0, [fp, r0]
    7dc4:	611f0000 	tstvs	pc, r0
    7dc8:	10010070 	andne	r0, r1, r0, ror r0
    7dcc:	0000b50a 	andeq	fp, r0, sl, lsl #10
    7dd0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    7dd4:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    7dd8:	00000001 	andeq	r0, r0, r1
    7ddc:	0000044c 	andeq	r0, r0, ip, asr #8
    7de0:	1fe00003 	svcne	0x00e00003
    7de4:	01040000 	mrseq	r0, (UNDEF: 4)
    7de8:	000000a3 	andeq	r0, r0, r3, lsr #1
    7dec:	001e970c 	andseq	r9, lr, ip, lsl #14
    7df0:	000dec00 	andeq	lr, sp, r0, lsl #24
    7df4:	000d4000 	andeq	r4, sp, r0
    7df8:	00000000 	andeq	r0, r0, r0
    7dfc:	00556e00 	subseq	r6, r5, r0, lsl #28
    7e00:	06010200 	streq	r0, [r1], -r0, lsl #4
    7e04:	00000c4d 	andeq	r0, r0, sp, asr #24
    7e08:	5b050202 	blpl	148618 <__ccfg+0x128670>
    7e0c:	0200000a 	andeq	r0, r0, #10
    7e10:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    7e14:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7e18:	0007e805 	andeq	lr, r7, r5, lsl #16
    7e1c:	29fe0300 	ldmibcs	lr!, {r8, r9}^
    7e20:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7e24:	00004d18 	andeq	r4, r0, r8, lsl sp
    7e28:	08010200 	stmdaeq	r1, {r9}
    7e2c:	00000c4b 	andeq	r0, r0, fp, asr #24
    7e30:	002df403 	eoreq	pc, sp, r3, lsl #8
    7e34:	19310200 	ldmdbne	r1!, {r9}
    7e38:	00000060 	andeq	r0, r0, r0, rrx
    7e3c:	48070202 	stmdami	r7, {r1, r9}
    7e40:	0300000d 	movweq	r0, #13
    7e44:	00002996 	muleq	r0, r6, r9
    7e48:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7e4c:	02000000 	andeq	r0, r0, #0
    7e50:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
    7e54:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7e58:	00041807 	andeq	r1, r4, r7, lsl #16
    7e5c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7e60:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7e64:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    7e68:	03000004 	movweq	r0, #4
    7e6c:	0000050e 	andeq	r0, r0, lr, lsl #10
    7e70:	9b1b2803 	blls	6d1e84 <__ccfg+0x6b1edc>
    7e74:	05000000 	streq	r0, [r0, #-0]
    7e78:	00000b80 	andeq	r0, r0, r0, lsl #23
    7e7c:	b3000904 	movwlt	r0, #2308	; 0x904
    7e80:	06000000 	streq	r0, [r0], -r0
    7e84:	0000085d 	andeq	r0, r0, sp, asr r8
    7e88:	000000b3 	strheq	r0, [r0], -r3
    7e8c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    7e90:	0b820304 	bleq	fe088aa8 <_estack+0xde083aa8>
    7e94:	63030000 	movwvs	r0, #12288	; 0x3000
    7e98:	00008f18 	andeq	r8, r0, r8, lsl pc
    7e9c:	28dd0300 	ldmcs	sp, {r8, r9}^
    7ea0:	27040000 	strcs	r0, [r4, -r0]
    7ea4:	00005412 	andeq	r5, r0, r2, lsl r4
    7ea8:	00c10800 	sbceq	r0, r1, r0, lsl #16
    7eac:	a4030000 	strge	r0, [r3], #-0
    7eb0:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    7eb4:	0041122b 	subeq	r1, r1, fp, lsr #4
    7eb8:	d2090000 	andle	r0, r9, #0
    7ebc:	03000000 	movweq	r0, #0
    7ec0:	0000292f 	andeq	r2, r0, pc, lsr #18
    7ec4:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7ec8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7ecc:	000000e3 	andeq	r0, r0, r3, ror #1
    7ed0:	00063603 	andeq	r3, r6, r3, lsl #12
    7ed4:	122d0400 	eorne	r0, sp, #0, 8
    7ed8:	00000067 	andeq	r0, r0, r7, rrx
    7edc:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    7ee0:	00018e09 	andeq	r8, r1, r9, lsl #28
    7ee4:	002b0b00 	eoreq	r0, fp, r0, lsl #22
    7ee8:	34040000 	strcc	r0, [r4], #-0
    7eec:	0000d207 	andeq	sp, r0, r7, lsl #4
    7ef0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7ef4:	063c0b00 	ldrteq	r0, [ip], -r0, lsl #22
    7ef8:	35040000 	strcc	r0, [r4, #-0]
    7efc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7f00:	06010100 	streq	r0, [r1], -r0, lsl #2
    7f04:	02de0b00 	sbcseq	r0, lr, #0, 22
    7f08:	36040000 	strcc	r0, [r4], -r0
    7f0c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7f10:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7f14:	06a70b00 	strteq	r0, [r7], r0, lsl #22
    7f18:	37040000 	strcc	r0, [r4, -r0]
    7f1c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7f20:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7f24:	0a8f0b00 	beq	fe3cab2c <_estack+0xde3c5b2c>
    7f28:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7f2c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7f30:	00040100 	andeq	r0, r4, r0, lsl #2
    7f34:	064b0c00 	strbeq	r0, [fp], -r0, lsl #24
    7f38:	3a040000 	bcc	107f40 <__ccfg+0xe7f98>
    7f3c:	0000d207 	andeq	sp, r0, r7, lsl #4
    7f40:	eb0c0100 	bl	308348 <__ccfg+0x2e83a0>
    7f44:	04000008 	streq	r0, [r0], #-8
    7f48:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7f4c:	0c020000 	stceq	0, cr0, [r2], {-0}
    7f50:	00000f1c 	andeq	r0, r0, ip, lsl pc
    7f54:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    7f58:	03000000 	movweq	r0, #0
    7f5c:	0009030c 	andeq	r0, r9, ip, lsl #6
    7f60:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    7f64:	000000e3 	andeq	r0, r0, r3, ror #1
    7f68:	14030004 	strne	r0, [r3], #-4
    7f6c:	04000003 	streq	r0, [r0], #-3
    7f70:	01000341 	tsteq	r0, r1, asr #6
    7f74:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    7f78:	0d000001 	stceq	0, cr0, [r0, #-4]
    7f7c:	000006ae 	andeq	r0, r0, lr, lsr #13
    7f80:	9a1a4304 	bls	698b98 <__ccfg+0x678bf0>
    7f84:	01000001 	tsteq	r0, r1
    7f88:	01970d01 	orrseq	r0, r7, r1, lsl #26
    7f8c:	45040000 	strmi	r0, [r4, #-0]
    7f90:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    7f94:	0e010100 	adfeqs	f0, f1, f0
    7f98:	0001c104 	andeq	ip, r1, r4, lsl #2
    7f9c:	08010200 	stmdaeq	r1, {r9}
    7fa0:	00000c54 	andeq	r0, r0, r4, asr ip
    7fa4:	0001c108 	andeq	ip, r1, r8, lsl #2
    7fa8:	031d0d00 	tsteq	sp, #0, 26
    7fac:	45040000 	strmi	r0, [r4, #-0]
    7fb0:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    7fb4:	0a010100 	beq	483bc <__ccfg+0x28414>
    7fb8:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    7fbc:	0000020c 	andeq	r0, r0, ip, lsl #4
    7fc0:	000cba0c 	andeq	fp, ip, ip, lsl #20
    7fc4:	0b900500 	bleq	fe4093cc <_estack+0xde4043cc>
    7fc8:	00000067 	andeq	r0, r0, r7, rrx
    7fcc:	10570c00 	subsne	r0, r7, r0, lsl #24
    7fd0:	91050000 	mrsls	r0, (UNDEF: 5)
    7fd4:	0000c108 	andeq	ip, r0, r8, lsl #2
    7fd8:	bc0c0400 	cfstrslt	mvf0, [ip], {-0}
    7fdc:	05000001 	streq	r0, [r0, #-1]
    7fe0:	00de1092 	smullseq	r1, lr, r2, r0
    7fe4:	00060000 	andeq	r0, r6, r0
    7fe8:	000cae03 	andeq	sl, ip, r3, lsl #28
    7fec:	03930500 	orrseq	r0, r3, #0, 10
    7ff0:	000001db 	ldrdeq	r0, [r0], -fp
    7ff4:	00020c0f 	andeq	r0, r2, pc, lsl #24
    7ff8:	00022300 	andeq	r2, r2, r0, lsl #6
    7ffc:	0d001000 	stceq	0, cr1, [r0, #-0]
    8000:	0000092d 	andeq	r0, r0, sp, lsr #18
    8004:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    8008:	01000002 	tsteq	r0, r2
    800c:	06010a01 	streq	r0, [r1], -r1, lsl #20
    8010:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    8014:	0a0b0000 	beq	2c801c <__ccfg+0x2a8074>
    8018:	06000009 	streq	r0, [r0], -r9
    801c:	00d20793 	smullseq	r0, r2, r3, r7
    8020:	07010000 	streq	r0, [r1, -r0]
    8024:	bc0b0001 	stclt	0, cr0, [fp], {1}
    8028:	06000005 	streq	r0, [r0], -r5
    802c:	00d20394 	smullseq	r0, r2, r4, r3
    8030:	01010000 	mrseq	r0, (UNDEF: 1)
    8034:	03000000 	movweq	r0, #0
    8038:	00000a9b 	muleq	r0, fp, sl
    803c:	31039606 	tstcc	r3, r6, lsl #12
    8040:	08000002 	stmdaeq	r0, {r1}
    8044:	0000025b 	andeq	r0, r0, fp, asr r2
    8048:	0002670f 	andeq	r6, r2, pc, lsl #14
    804c:	00027700 	andeq	r7, r2, r0, lsl #14
    8050:	08001000 	stmdaeq	r0, {ip}
    8054:	0000026c 	andeq	r0, r0, ip, ror #4
    8058:	0003a10d 	andeq	sl, r3, sp, lsl #2
    805c:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    8060:	00000277 	andeq	r0, r0, r7, ror r2
    8064:	cd0f0101 	stfgts	f0, [pc, #-4]	; 8068 <__exidx_end+0x2468>
    8068:	95000000 	strls	r0, [r0, #-0]
    806c:	10000002 	andne	r0, r0, r2
    8070:	028a0800 	addeq	r0, sl, #0, 16
    8074:	fe0d0000 	cdp2	0, 0, cr0, cr13, cr0, {0}
    8078:	07000005 	streq	r0, [r0, -r5]
    807c:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    8080:	01010000 	mrseq	r0, (UNDEF: 1)
    8084:	0008cd0d 	andeq	ip, r8, sp, lsl #26
    8088:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    808c:	000000e3 	andeq	r0, r0, r3, ror #1
    8090:	62110101 	andsvs	r0, r1, #1073741824	; 0x40000000
    8094:	0800000c 	stmdaeq	r0, {r2, r3}
    8098:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    809c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    80a0:	0002c904 	andeq	ip, r2, r4, lsl #18
    80a4:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    80a8:	13000002 	movwne	r0, #2
    80ac:	000000c1 	andeq	r0, r0, r1, asr #1
    80b0:	01c80f00 	biceq	r0, r8, r0, lsl #30
    80b4:	02e00000 	rsceq	r0, r0, #0
    80b8:	00100000 	andseq	r0, r0, r0
    80bc:	0002d508 	andeq	sp, r2, r8, lsl #10
    80c0:	09d61400 	ldmibeq	r6, {sl, ip}^
    80c4:	7f080000 	svcvc	0x00080000
    80c8:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    80cc:	01010000 	mrseq	r0, (UNDEF: 1)
    80d0:	00038d14 	andeq	r8, r3, r4, lsl sp
    80d4:	01820800 	orreq	r0, r2, r0, lsl #16
    80d8:	0000ef14 	andeq	lr, r0, r4, lsl pc
    80dc:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    80e0:	00000365 	andeq	r0, r0, r5, ror #6
    80e4:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    80e8:	000000e3 	andeq	r0, r0, r3, ror #1
    80ec:	08150101 	ldmdaeq	r5, {r0, r8}
    80f0:	09030308 	stmdbeq	r3, {r3, r8, r9}
    80f4:	00000339 	andeq	r0, r0, r9, lsr r3
    80f8:	003c8316 	eorseq	r8, ip, r6, lsl r3
    80fc:	03070800 	movweq	r0, #30720	; 0x7800
    8100:	0000c107 	andeq	ip, r0, r7, lsl #2
    8104:	af160000 	svcge	0x00160000
    8108:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    810c:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    8110:	04000000 	streq	r0, [r0], #-0
    8114:	09f91100 	ldmibeq	r9!, {r8, ip}^
    8118:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    811c:	03120303 	tsteq	r2, #201326592	; 0xc000000
    8120:	20170000 	andscs	r0, r7, r0
    8124:	30000000 	andcc	r0, r0, r0
    8128:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    812c:	000003a9 	andeq	r0, r0, r9, lsr #7
    8130:	001f0616 	andseq	r0, pc, r6, lsl r6	; <UNPREDICTABLE>
    8134:	03140800 	tsteq	r4, #0, 16
    8138:	0000c108 	andeq	ip, r0, r8, lsl #2
    813c:	d7160000 	ldrle	r0, [r6, -r0]
    8140:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    8144:	c1080315 	tstgt	r8, r5, lsl r3
    8148:	02000000 	andeq	r0, r0, #0
    814c:	004c7016 	subeq	r7, ip, r6, lsl r0
    8150:	03160800 	tsteq	r6, #0, 16
    8154:	0002b60b 	andeq	fp, r2, fp, lsl #12
    8158:	36160400 	ldrcc	r0, [r6], -r0, lsl #8
    815c:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    8160:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    8164:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8168:	00000f16 	andeq	r0, r0, r6, lsl pc
    816c:	03180800 	tsteq	r8, #0, 16
    8170:	0003a90f 	andeq	sl, r3, pc, lsl #18
    8174:	4d160c00 	ldcmi	12, cr0, [r6, #-0]
    8178:	08000009 	stmdaeq	r0, {r0, r3}
    817c:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    8180:	2c000003 	stccs	0, cr0, [r0], {3}
    8184:	03390f00 	teqeq	r9, #0, 30
    8188:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    818c:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    8190:	03000000 	movweq	r0, #0
    8194:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    8198:	11000003 	tstne	r0, r3
    819c:	00000bcc 	andeq	r0, r0, ip, asr #23
    81a0:	1b031c08 	blne	cf1c8 <__ccfg+0xaf220>
    81a4:	00000346 	andeq	r0, r0, r6, asr #6
    81a8:	000bac14 	andeq	sl, fp, r4, lsl ip
    81ac:	031e0800 	tsteq	lr, #0, 16
    81b0:	0003db14 	andeq	sp, r3, r4, lsl fp
    81b4:	0e010100 	adfeqs	f0, f1, f0
    81b8:	0003bf04 	andeq	fp, r3, r4, lsl #30
    81bc:	1e3b0d00 	cdpne	13, 3, cr0, cr11, cr0, {0}
    81c0:	0a010000 	beq	481c8 <__ccfg+0x28220>
    81c4:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    81c8:	19010100 	stmdbne	r1, {r8}
    81cc:	001ed801 	andseq	sp, lr, r1, lsl #16
    81d0:	050e0100 	streq	r0, [lr, #-256]	; 0xffffff00
    81d4:	00008101 	andeq	r8, r0, r1, lsl #2
    81d8:	00276400 	eoreq	r6, r7, r0, lsl #8
    81dc:	0027c400 	eoreq	ip, r7, r0, lsl #8
    81e0:	499c0100 	ldmibmi	ip, {r8}
    81e4:	1a000004 	bne	81fc <__exidx_end+0x25fc>
    81e8:	01007473 	tsteq	r0, r3, ror r4
    81ec:	00c1130e 	sbceq	r1, r1, lr, lsl #6
    81f0:	27ff0000 	ldrbcs	r0, [pc, r0]!
    81f4:	661b0000 	ldrvs	r0, [fp], -r0
    81f8:	0100746d 	tsteq	r0, sp, ror #8
    81fc:	0449230e 	strbeq	r2, [r9], #-782	; 0xfffffcf2
    8200:	91020000 	mrsls	r0, (UNDEF: 2)
    8204:	ed1d1c74 	ldc	12, cr1, [sp, #-464]	; 0xfffffe30
    8208:	01000025 	tsteq	r0, r5, lsr #32
    820c:	00810613 	addeq	r0, r1, r3, lsl r6
    8210:	281d0000 	ldmdacs	sp, {}	; <UNPREDICTABLE>
    8214:	611e0000 	tstvs	lr, r0
    8218:	14010070 	strne	r0, [r1], #-112	; 0xffffff90
    821c:	0000b50a 	andeq	fp, r0, sl, lsl #10
    8220:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    8224:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    8228:	00000001 	andeq	r0, r0, r1
    822c:	00002474 	andeq	r2, r0, r4, ror r4
    8230:	217b0003 	cmncs	fp, r3
    8234:	01040000 	mrseq	r0, (UNDEF: 4)
    8238:	000000a3 	andeq	r0, r0, r3, lsr #1
    823c:	0022bd0c 	eoreq	fp, r2, ip, lsl #26
    8240:	000dec00 	andeq	lr, sp, r0, lsl #24
    8244:	000ec800 	andeq	ip, lr, r0, lsl #16
    8248:	00000000 	andeq	r0, r0, r0
    824c:	00572400 	subseq	r2, r7, r0, lsl #8
    8250:	2b8d0200 	blcs	fe348a58 <_estack+0xde343a58>
    8254:	22060000 	andcs	r0, r6, #0
    8258:	00003117 	andeq	r3, r0, r7, lsl r1
    825c:	06010300 	streq	r0, [r1], -r0, lsl #6
    8260:	00000c4d 	andeq	r0, r0, sp, asr #24
    8264:	0031cf02 	eorseq	ip, r1, r2, lsl #30
    8268:	18250600 	stmdane	r5!, {r9, sl}
    826c:	00000044 	andeq	r0, r0, r4, asr #32
    8270:	5b050203 	blpl	148a84 <__ccfg+0x128adc>
    8274:	0300000a 	movweq	r0, #10
    8278:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    827c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8280:	0007e805 	andeq	lr, r7, r5, lsl #16
    8284:	29fe0200 	ldmibcs	lr!, {r9}^
    8288:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    828c:	00006518 	andeq	r6, r0, r8, lsl r5
    8290:	08010300 	stmdaeq	r1, {r8, r9}
    8294:	00000c4b 	andeq	r0, r0, fp, asr #24
    8298:	002df402 	eoreq	pc, sp, r2, lsl #8
    829c:	19310600 	ldmdbne	r1!, {r9, sl}
    82a0:	00000078 	andeq	r0, r0, r8, ror r0
    82a4:	48070203 	stmdami	r7, {r0, r1, r9}
    82a8:	0200000d 	andeq	r0, r0, #13
    82ac:	00002996 	muleq	r0, r6, r9
    82b0:	90193406 	andsls	r3, r9, r6, lsl #8
    82b4:	04000000 	streq	r0, [r0], #-0
    82b8:	0000007f 	andeq	r0, r0, pc, ror r0
    82bc:	1d070403 	cfstrsne	mvf0, [r7, #-12]
    82c0:	05000004 	streq	r0, [r0, #-4]
    82c4:	00000090 	muleq	r0, r0, r0
    82c8:	18070803 	stmdane	r7, {r0, r1, fp}
    82cc:	06000004 	streq	r0, [r0], -r4
    82d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    82d4:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    82d8:	00042207 	andeq	r2, r4, r7, lsl #4
    82dc:	0bc50700 	bleq	ff149ee4 <_estack+0xdf144ee4>
    82e0:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    82e4:	00aa1701 	adceq	r1, sl, r1, lsl #14
    82e8:	2b020000 	blcs	882f0 <__ccfg+0x68348>
    82ec:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    82f0:	004b0e2e 	subeq	r0, fp, lr, lsr #28
    82f4:	f6020000 			; <UNDEFINED> instruction: 0xf6020000
    82f8:	08000002 	stmdaeq	r0, {r1}
    82fc:	004b0e74 	subeq	r0, fp, r4, ror lr
    8300:	04080000 	streq	r0, [r8], #-0
    8304:	f803a508 			; <UNDEFINED> instruction: 0xf803a508
    8308:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    830c:	0000075c 	andeq	r0, r0, ip, asr r7
    8310:	b10ca708 	tstlt	ip, r8, lsl #14
    8314:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8318:	00000aa4 	andeq	r0, r0, r4, lsr #21
    831c:	f813a808 			; <UNDEFINED> instruction: 0xf813a808
    8320:	00000000 	andeq	r0, r0, r0
    8324:	0000650a 	andeq	r6, r0, sl, lsl #10
    8328:	00010800 	andeq	r0, r1, r0, lsl #16
    832c:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8330:	00030000 	andeq	r0, r3, r0
    8334:	a208080c 	andge	r0, r8, #12, 16	; 0xc0000
    8338:	00012c09 	andeq	r2, r1, r9, lsl #24
    833c:	03850d00 	orreq	r0, r5, #0, 26
    8340:	a4080000 	strge	r0, [r8], #-0
    8344:	0000a307 	andeq	sl, r0, r7, lsl #6
    8348:	f10d0000 			; <UNDEFINED> instruction: 0xf10d0000
    834c:	08000005 	stmdaeq	r0, {r0, r2}
    8350:	00d605a9 	sbcseq	r0, r6, r9, lsr #11
    8354:	00040000 	andeq	r0, r4, r0
    8358:	0008a502 	andeq	sl, r8, r2, lsl #10
    835c:	03aa0800 			; <UNDEFINED> instruction: 0x03aa0800
    8360:	00000108 	andeq	r0, r0, r8, lsl #2
    8364:	3202040e 	andcc	r0, r2, #234881024	; 0xe000000
    8368:	09000008 	stmdbeq	r0, {r3}
    836c:	00901916 	addseq	r1, r0, r6, lsl r9
    8370:	4a020000 	bmi	88378 <__ccfg+0x683d0>
    8374:	0a000002 	beq	8384 <__exidx_end+0x2784>
    8378:	00a30d0c 	adceq	r0, r3, ip, lsl #26
    837c:	1a020000 	bne	88384 <__ccfg+0x683dc>
    8380:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8384:	01461b23 	cmpeq	r6, r3, lsr #22
    8388:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    838c:	18000003 	stmdane	r0, {r0, r1}
    8390:	b8083409 	stmdalt	r8, {r0, r3, sl, ip, sp}
    8394:	0d000001 	stceq	0, cr0, [r0, #-4]
    8398:	00000ea6 	andeq	r0, r0, r6, lsr #29
    839c:	b8133609 	ldmdalt	r3, {r0, r3, r9, sl, ip, sp}
    83a0:	00000001 	andeq	r0, r0, r1
    83a4:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
    83a8:	a3073709 	movwge	r3, #30473	; 0x7709
    83ac:	04000000 	streq	r0, [r0], #-0
    83b0:	000b520d 	andeq	r5, fp, sp, lsl #4
    83b4:	0b370900 	bleq	dca7bc <__ccfg+0xdaa814>
    83b8:	000000a3 	andeq	r0, r0, r3, lsr #1
    83bc:	43d70d08 	bicsmi	r0, r7, #8, 26	; 0x200
    83c0:	37090000 	strcc	r0, [r9, -r0]
    83c4:	0000a314 	andeq	sl, r0, r4, lsl r3
    83c8:	4c0d0c00 	stcmi	12, cr0, [sp], {-0}
    83cc:	09000004 	stmdbeq	r0, {r2}
    83d0:	00a31b37 	adceq	r1, r3, r7, lsr fp
    83d4:	10100000 	andsne	r0, r0, r0
    83d8:	0900785f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    83dc:	01be0b38 			; <UNDEFINED> instruction: 0x01be0b38
    83e0:	00140000 	andseq	r0, r4, r0
    83e4:	015e0411 	cmpeq	lr, r1, lsl r4
    83e8:	3a0a0000 	bcc	2883f0 <__ccfg+0x268448>
    83ec:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    83f0:	0b000001 	bleq	83fc <__exidx_end+0x27fc>
    83f4:	000000aa 	andeq	r0, r0, sl, lsr #1
    83f8:	6d0f0000 	stcvs	0, cr0, [pc, #-0]	; 8400 <__exidx_end+0x2800>
    83fc:	2400000b 	strcs	r0, [r0], #-11
    8400:	51083c09 	tstpl	r8, r9, lsl #24
    8404:	0d000002 	stceq	0, cr0, [r0, #-8]
    8408:	0000055c 	andeq	r0, r0, ip, asr r5
    840c:	a3093e09 	movwge	r3, #40457	; 0x9e09
    8410:	00000000 	andeq	r0, r0, r0
    8414:	0003ae0d 	andeq	sl, r3, sp, lsl #28
    8418:	093f0900 	ldmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    841c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8420:	034f0d04 	movteq	r0, #64772	; 0xfd04
    8424:	40090000 	andmi	r0, r9, r0
    8428:	0000a309 	andeq	sl, r0, r9, lsl #6
    842c:	640d0800 	strvs	r0, [sp], #-2048	; 0xfffff800
    8430:	09000006 	stmdbeq	r0, {r1, r2}
    8434:	00a30941 	adceq	r0, r3, r1, asr #18
    8438:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    843c:	00000944 	andeq	r0, r0, r4, asr #18
    8440:	a3094209 	movwge	r4, #37385	; 0x9209
    8444:	10000000 	andne	r0, r0, r0
    8448:	000abe0d 	andeq	fp, sl, sp, lsl #28
    844c:	09430900 	stmdbeq	r3, {r8, fp}^
    8450:	000000a3 	andeq	r0, r0, r3, lsr #1
    8454:	033d0d14 	teqeq	sp, #20, 26	; 0x500
    8458:	44090000 	strmi	r0, [r9], #-0
    845c:	0000a309 	andeq	sl, r0, r9, lsl #6
    8460:	650d1800 	strvs	r1, [sp, #-2048]	; 0xfffff800
    8464:	09000005 	stmdbeq	r0, {r0, r2}
    8468:	00a30945 	adceq	r0, r3, r5, asr #18
    846c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    8470:	000008e0 	andeq	r0, r0, r0, ror #17
    8474:	a3094609 	movwge	r4, #38409	; 0x9609
    8478:	20000000 	andcs	r0, r0, r0
    847c:	00321200 	eorseq	r1, r2, r0, lsl #4
    8480:	01080000 	mrseq	r0, (UNDEF: 8)
    8484:	96084f09 	strls	r4, [r8], -r9, lsl #30
    8488:	0d000002 	stceq	0, cr0, [r0, #-8]
    848c:	00000d0f 	andeq	r0, r0, pc, lsl #26
    8490:	960a5009 	strls	r5, [sl], -r9
    8494:	00000002 	andeq	r0, r0, r2
    8498:	000c070d 	andeq	r0, ip, sp, lsl #14
    849c:	09510900 	ldmdbeq	r1, {r8, fp}^
    84a0:	00000296 	muleq	r0, r6, r2
    84a4:	0da81380 	stceq	3, cr1, [r8, #512]!	; 0x200
    84a8:	53090000 	movwpl	r0, #36864	; 0x9000
    84ac:	00013a0a 	andeq	r3, r1, sl, lsl #20
    84b0:	13010000 	movwne	r0, #4096	; 0x1000
    84b4:	00000e99 	muleq	r0, r9, lr
    84b8:	3a0a5609 	bcc	29dce4 <__ccfg+0x27dd3c>
    84bc:	04000001 	streq	r0, [r0], #-1
    84c0:	380a0001 	stmdacc	sl, {r0}
    84c4:	a6000001 	strge	r0, [r0], -r1
    84c8:	0b000002 	bleq	84d8 <__exidx_end+0x28d8>
    84cc:	000000aa 	andeq	r0, r0, sl, lsr #1
    84d0:	0612001f 			; <UNDEFINED> instruction: 0x0612001f
    84d4:	9000000a 	andls	r0, r0, sl
    84d8:	08620901 	stmdaeq	r2!, {r0, r8, fp}^
    84dc:	000002e9 	andeq	r0, r0, r9, ror #5
    84e0:	000ea60d 	andeq	sl, lr, sp, lsl #12
    84e4:	12630900 	rsbne	r0, r3, #0, 18
    84e8:	000002e9 	andeq	r0, r0, r9, ror #5
    84ec:	05740d00 	ldrbeq	r0, [r4, #-3328]!	; 0xfffff300
    84f0:	64090000 	strvs	r0, [r9], #-0
    84f4:	0000a306 	andeq	sl, r0, r6, lsl #6
    84f8:	fe0d0400 	cdp2	4, 0, cr0, cr13, cr0, {0}
    84fc:	09000002 	stmdbeq	r0, {r1}
    8500:	02ef0966 	rsceq	r0, pc, #1671168	; 0x198000
    8504:	0d080000 	stceq	0, cr0, [r8, #-0]
    8508:	00000032 	andeq	r0, r0, r2, lsr r0
    850c:	511e6709 	tstpl	lr, r9, lsl #14
    8510:	88000002 	stmdahi	r0, {r1}
    8514:	a6041100 	strge	r1, [r4], -r0, lsl #2
    8518:	0a000002 	beq	8528 <__exidx_end+0x2928>
    851c:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8520:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    8524:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8528:	11001f00 	tstne	r0, r0, lsl #30
    852c:	00030504 	andeq	r0, r3, r4, lsl #10
    8530:	0f011400 	svceq	0x00011400
    8534:	00000ca7 	andeq	r0, r0, r7, lsr #25
    8538:	087a0908 	ldmdaeq	sl!, {r3, r8, fp}^
    853c:	0000032f 	andeq	r0, r0, pc, lsr #6
    8540:	000cb90d 	andeq	fp, ip, sp, lsl #18
    8544:	117b0900 	cmnne	fp, r0, lsl #18
    8548:	0000032f 	andeq	r0, r0, pc, lsr #6
    854c:	1d820d00 	stcne	13, cr0, [r2]
    8550:	7c090000 	stcvc	0, cr0, [r9], {-0}
    8554:	0000a306 	andeq	sl, r0, r6, lsl #6
    8558:	11000400 	tstne	r0, r0, lsl #8
    855c:	00006504 	andeq	r6, r0, r4, lsl #10
    8560:	04440f00 	strbeq	r0, [r4], #-3840	; 0xfffff100
    8564:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    8568:	047808ba 	ldrbteq	r0, [r8], #-2234	; 0xfffff746
    856c:	5f100000 	svcpl	0x00100000
    8570:	bb090070 	bllt	248738 <__ccfg+0x228790>
    8574:	00032f12 	andeq	r2, r3, r2, lsl pc
    8578:	5f100000 	svcpl	0x00100000
    857c:	bc090072 	stclt	0, cr0, [r9], {114}	; 0x72
    8580:	0000a307 	andeq	sl, r0, r7, lsl #6
    8584:	5f100400 	svcpl	0x00100400
    8588:	bd090077 	stclt	0, cr0, [r9, #-476]	; 0xfffffe24
    858c:	0000a307 	andeq	sl, r0, r7, lsl #6
    8590:	bb0d0800 	bllt	34a598 <__ccfg+0x32a5f0>
    8594:	09000001 	stmdbeq	r0, {r0}
    8598:	004409be 	strheq	r0, [r4], #-158	; 0xffffff62
    859c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    85a0:	00000849 	andeq	r0, r0, r9, asr #16
    85a4:	4409bf09 	strmi	fp, [r9], #-3849	; 0xfffff0f7
    85a8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    85ac:	66625f10 	uqadd16vs	r5, r2, r0
    85b0:	11c00900 	bicne	r0, r0, r0, lsl #18
    85b4:	00000307 	andeq	r0, r0, r7, lsl #6
    85b8:	01b20d10 			; <UNDEFINED> instruction: 0x01b20d10
    85bc:	c1090000 	mrsgt	r0, (UNDEF: 9)
    85c0:	0000a307 	andeq	sl, r0, r7, lsl #6
    85c4:	030d1800 	movweq	r1, #55296	; 0xd800
    85c8:	09000003 	stmdbeq	r0, {r0, r1}
    85cc:	01380ac8 	teqeq	r8, r8, asr #21
    85d0:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    85d4:	00001d11 	andeq	r1, r0, r1, lsl sp
    85d8:	fd1dca09 	ldc2	10, cr12, [sp, #-36]	; 0xffffffdc	; <UNPREDICTABLE>
    85dc:	20000005 	andcs	r0, r0, r5
    85e0:	001cd80d 	andseq	sp, ip, sp, lsl #16
    85e4:	1dcc0900 	vstrne.16	s1, [ip]	; <UNPREDICTABLE>
    85e8:	00000628 	andeq	r0, r0, r8, lsr #12
    85ec:	0ec60d24 	cdpeq	13, 12, cr0, cr6, cr4, {1}
    85f0:	cf090000 	svcgt	0x00090000
    85f4:	00064d0d 	andeq	r4, r6, sp, lsl #26
    85f8:	c60d2800 	strgt	r2, [sp], -r0, lsl #16
    85fc:	0900001c 	stmdbeq	r0, {r2, r3, r4}
    8600:	066809d0 			; <UNDEFINED> instruction: 0x066809d0
    8604:	102c0000 	eorne	r0, ip, r0
    8608:	0062755f 	rsbeq	r7, r2, pc, asr r5
    860c:	0711d309 	ldreq	sp, [r1, -r9, lsl #6]
    8610:	30000003 	andcc	r0, r0, r3
    8614:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    8618:	12d40900 	sbcsne	r0, r4, #0, 18
    861c:	0000032f 	andeq	r0, r0, pc, lsr #6
    8620:	755f1038 	ldrbvc	r1, [pc, #-56]	; 85f0 <__exidx_end+0x29f0>
    8624:	d5090072 	strle	r0, [r9, #-114]	; 0xffffff8e
    8628:	0000a307 	andeq	sl, r0, r7, lsl #6
    862c:	fd0d3c00 	stc2	12, cr3, [sp, #-0]
    8630:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8634:	066e11d8 			; <UNDEFINED> instruction: 0x066e11d8
    8638:	0d400000 	stcleq	0, cr0, [r0, #-0]
    863c:	00000e46 	andeq	r0, r0, r6, asr #28
    8640:	7e11d909 	vnmlsvc.f16	s26, s2, s18	; <UNPREDICTABLE>
    8644:	43000006 	movwmi	r0, #6
    8648:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    864c:	11dc0900 	bicsne	r0, ip, r0, lsl #18
    8650:	00000307 	andeq	r0, r0, r7, lsl #6
    8654:	0b640d44 	bleq	190bb6c <__ccfg+0x18ebbc4>
    8658:	df090000 	svcle	0x00090000
    865c:	0000a307 	andeq	sl, r0, r7, lsl #6
    8660:	780d4c00 	stmdavc	sp, {sl, fp, lr}
    8664:	09000004 	stmdbeq	r0, {r2}
    8668:	00be0ae0 	adcseq	r0, lr, r0, ror #21
    866c:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    8670:	00004735 	andeq	r4, r0, r5, lsr r7
    8674:	9712e309 	ldrls	lr, [r2, -r9, lsl #6]
    8678:	54000004 	strpl	r0, [r0], #-4
    867c:	000b8a0d 	andeq	r8, fp, sp, lsl #20
    8680:	0ce70900 			; <UNDEFINED> instruction: 0x0ce70900
    8684:	00000152 	andeq	r0, r0, r2, asr r1
    8688:	0a0e0d58 	beq	38bbf0 <__ccfg+0x36bc48>
    868c:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
    8690:	00012c0e 	andeq	r2, r1, lr, lsl #24
    8694:	790d5c00 	stmdbvc	sp, {sl, fp, ip, lr}
    8698:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    869c:	00a309ea 	adceq	r0, r3, sl, ror #19
    86a0:	00640000 	rsbeq	r0, r4, r0
    86a4:	00a30115 	adceq	r0, r3, r5, lsl r1
    86a8:	04970000 	ldreq	r0, [r7], #0
    86ac:	97160000 	ldrls	r0, [r6, -r0]
    86b0:	16000004 	strne	r0, [r0], -r4
    86b4:	00000138 	andeq	r0, r0, r8, lsr r1
    86b8:	0005eb16 	andeq	lr, r5, r6, lsl fp
    86bc:	00a31600 	adceq	r1, r3, r0, lsl #12
    86c0:	11000000 	mrsne	r0, (UNDEF: 0)
    86c4:	0004a204 	andeq	sl, r4, r4, lsl #4
    86c8:	04970400 	ldreq	r0, [r7], #1024	; 0x400
    86cc:	41170000 	tstmi	r7, r0
    86d0:	2800000d 	stmdacs	r0, {r0, r2, r3}
    86d4:	02650904 	rsbeq	r0, r5, #4, 18	; 0x10000
    86d8:	0005eb08 	andeq	lr, r5, r8, lsl #22
    86dc:	08f41800 	ldmeq	r4!, {fp, ip}^
    86e0:	67090000 	strvs	r0, [r9, -r0]
    86e4:	00a30702 	adceq	r0, r3, r2, lsl #14
    86e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    86ec:	000007d2 	ldrdeq	r0, [r0], -r2
    86f0:	0b026c09 	bleq	a371c <__ccfg+0x83774>
    86f4:	000006da 	ldrdeq	r0, [r0], -sl
    86f8:	02ee1804 	rsceq	r1, lr, #4, 16	; 0x40000
    86fc:	6c090000 	stcvs	0, cr0, [r9], {-0}
    8700:	06da1402 	ldrbeq	r1, [sl], r2, lsl #8
    8704:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8708:	00000eec 	andeq	r0, r0, ip, ror #29
    870c:	1e026c09 	cdpne	12, 0, cr6, cr2, cr9, {0}
    8710:	000006da 	ldrdeq	r0, [r0], -sl
    8714:	056f180c 	strbeq	r1, [pc, #-2060]!	; 7f10 <__exidx_end+0x2310>
    8718:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    871c:	00a30802 	adceq	r0, r3, r2, lsl #16
    8720:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    8724:	000004c4 	andeq	r0, r0, r4, asr #9
    8728:	08026f09 	stmdaeq	r2, {r0, r3, r8, r9, sl, fp, sp, lr}
    872c:	000008da 	ldrdeq	r0, [r0], -sl
    8730:	0e591814 	mrceq	8, 2, r1, cr9, cr4, {0}
    8734:	72090000 	andvc	r0, r9, #0
    8738:	00a30702 	adceq	r0, r3, r2, lsl #14
    873c:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    8740:	00004283 	andeq	r4, r0, r3, lsl #5
    8744:	16027309 	strne	r7, [r2], -r9, lsl #6
    8748:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    874c:	077a1834 			; <UNDEFINED> instruction: 0x077a1834
    8750:	75090000 	strvc	r0, [r9, #-0]
    8754:	00a30702 	adceq	r0, r3, r2, lsl #14
    8758:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    875c:	00000874 	andeq	r0, r0, r4, ror r8
    8760:	0a027709 	beq	a638c <__ccfg+0x863e4>
    8764:	00000902 	andeq	r0, r0, r2, lsl #18
    8768:	0347183c 	movteq	r1, #30780	; 0x783c
    876c:	7a090000 	bvc	248774 <__ccfg+0x2287cc>
    8770:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    8774:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    8778:	00000402 	andeq	r0, r0, r2, lsl #8
    877c:	07027b09 	streq	r7, [r2, -r9, lsl #22]
    8780:	000000a3 	andeq	r0, r0, r3, lsr #1
    8784:	05f91844 	ldrbeq	r1, [r9, #2116]!	; 0x844
    8788:	7c090000 	stcvc	0, cr0, [r9], {-0}
    878c:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    8790:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    8794:	0000080f 	andeq	r0, r0, pc, lsl #16
    8798:	14027d09 	strne	r7, [r2], #-3337	; 0xfffff2f7
    879c:	00000908 	andeq	r0, r0, r8, lsl #18
    87a0:	0b4a184c 	bleq	128e8d8 <__ccfg+0x126e930>
    87a4:	80090000 	andhi	r0, r9, r0
    87a8:	00a30702 	adceq	r0, r3, r2, lsl #14
    87ac:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    87b0:	00000c43 	andeq	r0, r0, r3, asr #24
    87b4:	09028109 	stmdbeq	r2, {r0, r3, r8, pc}
    87b8:	000005eb 	andeq	r0, r0, fp, ror #11
    87bc:	0c5d1854 	mrrceq	8, 5, r1, sp, cr4
    87c0:	a4090000 	strge	r0, [r9], #-0
    87c4:	08b50702 	ldmeq	r5!, {r1, r8, r9, sl}
    87c8:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    87cc:	00000a06 	andeq	r0, r0, r6, lsl #20
    87d0:	1302a809 	movwne	sl, #10249	; 0x2809
    87d4:	000002e9 	andeq	r0, r0, r9, ror #5
    87d8:	9e190148 	muflsem	f0, f1, #0.0
    87dc:	09000006 	stmdbeq	r0, {r1, r2}
    87e0:	a61202a9 	ldrge	r0, [r2], -r9, lsr #5
    87e4:	4c000002 	stcmi	0, cr0, [r0], {2}
    87e8:	06851901 	streq	r1, [r5], r1, lsl #18
    87ec:	ad090000 	stcge	0, cr0, [r9, #-0]
    87f0:	091a0c02 	ldmdbeq	sl, {r1, sl, fp}
    87f4:	02dc0000 	sbcseq	r0, ip, #0
    87f8:	000cc519 	andeq	ip, ip, r9, lsl r5
    87fc:	02b20900 	adcseq	r0, r2, #0, 18
    8800:	00069b10 	andeq	r9, r6, r0, lsl fp
    8804:	1902e000 	stmdbne	r2, {sp, lr, pc}
    8808:	00000a96 	muleq	r0, r6, sl
    880c:	0a02b409 	beq	b5838 <__ccfg+0x95890>
    8810:	00000926 	andeq	r0, r0, r6, lsr #18
    8814:	110002ec 	smlattne	r0, ip, r2, r0
    8818:	0005f104 	andeq	pc, r5, r4, lsl #2
    881c:	08010300 	stmdaeq	r1, {r8, r9}
    8820:	00000c54 	andeq	r0, r0, r4, asr ip
    8824:	0005f104 	andeq	pc, r5, r4, lsl #2
    8828:	78041100 	stmdavc	r4, {r8, ip}
    882c:	15000004 	strne	r0, [r0, #-4]
    8830:	0000a301 	andeq	sl, r0, r1, lsl #6
    8834:	00062200 	andeq	r2, r6, r0, lsl #4
    8838:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    883c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    8840:	16000001 	strne	r0, [r0], -r1
    8844:	00000622 	andeq	r0, r0, r2, lsr #12
    8848:	0000a316 	andeq	sl, r0, r6, lsl r3
    884c:	04110000 	ldreq	r0, [r1], #-0
    8850:	000005f8 	strdeq	r0, [r0], -r8
    8854:	06030411 			; <UNDEFINED> instruction: 0x06030411
    8858:	01150000 	tsteq	r5, r0
    885c:	000000ca 	andeq	r0, r0, sl, asr #1
    8860:	0000064d 	andeq	r0, r0, sp, asr #12
    8864:	00049716 	andeq	r9, r4, r6, lsl r7
    8868:	01381600 	teqeq	r8, r0, lsl #12
    886c:	ca160000 	bgt	588874 <__ccfg+0x5688cc>
    8870:	16000000 	strne	r0, [r0], -r0
    8874:	000000a3 	andeq	r0, r0, r3, lsr #1
    8878:	2e041100 	adfcss	f1, f4, f0
    887c:	15000006 	strne	r0, [r0, #-6]
    8880:	0000a301 	andeq	sl, r0, r1, lsl #6
    8884:	00066800 	andeq	r6, r6, r0, lsl #16
    8888:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    888c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    8890:	00000001 	andeq	r0, r0, r1
    8894:	06530411 			; <UNDEFINED> instruction: 0x06530411
    8898:	650a0000 	strvs	r0, [sl, #-0]
    889c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    88a0:	0b000006 	bleq	88c0 <__exidx_end+0x2cc0>
    88a4:	000000aa 	andeq	r0, r0, sl, lsr #1
    88a8:	650a0002 	strvs	r0, [sl, #-2]
    88ac:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    88b0:	0b000006 	bleq	88d0 <__exidx_end+0x2cd0>
    88b4:	000000aa 	andeq	r0, r0, sl, lsr #1
    88b8:	65070000 	strvs	r0, [r7, #-0]
    88bc:	09000004 	stmdbeq	r0, {r2}
    88c0:	351a0124 	ldrcc	r0, [sl, #-292]	; 0xfffffedc
    88c4:	1a000003 	bne	88d8 <__exidx_end+0x2cd8>
    88c8:	00000cbf 			; <UNDEFINED> instruction: 0x00000cbf
    88cc:	0128090c 			; <UNDEFINED> instruction: 0x0128090c
    88d0:	0006d408 	andeq	sp, r6, r8, lsl #8
    88d4:	0ea61800 	cdpeq	8, 10, cr1, cr6, cr0, {0}
    88d8:	2a090000 	bcs	2488e0 <__ccfg+0x228938>
    88dc:	06d41101 	ldrbeq	r1, [r4], r1, lsl #2
    88e0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    88e4:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
    88e8:	07012b09 	streq	r2, [r1, -r9, lsl #22]
    88ec:	000000a3 	andeq	r0, r0, r3, lsr #1
    88f0:	07621804 	strbeq	r1, [r2, -r4, lsl #16]!
    88f4:	2c090000 	stccs	0, cr0, [r9], {-0}
    88f8:	06da0b01 	ldrbeq	r0, [sl], r1, lsl #22
    88fc:	00080000 	andeq	r0, r8, r0
    8900:	069b0411 			; <UNDEFINED> instruction: 0x069b0411
    8904:	04110000 	ldreq	r0, [r1], #-0
    8908:	0000068e 	andeq	r0, r0, lr, lsl #13
    890c:	0003d11a 	andeq	sp, r3, sl, lsl r1
    8910:	44090e00 	strmi	r0, [r9], #-3584	; 0xfffff200
    8914:	07190801 	ldreq	r0, [r9, -r1, lsl #16]
    8918:	2d180000 	ldccs	0, cr0, [r8, #-0]
    891c:	09000016 	stmdbeq	r0, {r1, r2, r4}
    8920:	19120145 	ldmdbne	r2, {r0, r2, r6, r8}
    8924:	00000007 	andeq	r0, r0, r7
    8928:	00082118 	andeq	r2, r8, r8, lsl r1
    892c:	01460900 	cmpeq	r6, r0, lsl #18
    8930:	00071912 	andeq	r1, r7, r2, lsl r9
    8934:	df180600 	svcle	0x00180600
    8938:	09000014 	stmdbeq	r0, {r2, r4}
    893c:	78120147 	ldmdavc	r2, {r0, r1, r2, r6, r8}
    8940:	0c000000 	stceq	0, cr0, [r0], {-0}
    8944:	00780a00 	rsbseq	r0, r8, r0, lsl #20
    8948:	07290000 	streq	r0, [r9, -r0]!
    894c:	aa0b0000 	bge	2c8954 <__ccfg+0x2a89ac>
    8950:	02000000 	andeq	r0, r0, #0
    8954:	09d01b00 	ldmibeq	r0, {r8, r9, fp, ip}^
    8958:	3e070285 	cdpcc	2, 0, cr0, cr7, cr5, {4}
    895c:	18000008 	stmdane	r0, {r3}
    8960:	00000e4c 	andeq	r0, r0, ip, asr #28
    8964:	18028709 	stmdane	r2, {r0, r3, r8, r9, sl, pc}
    8968:	000000aa 	andeq	r0, r0, sl, lsr #1
    896c:	0ccd1800 	stcleq	8, cr1, [sp], {0}
    8970:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    8974:	05eb1202 	strbeq	r1, [fp, #514]!	; 0x202
    8978:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    897c:	0000042f 	andeq	r0, r0, pc, lsr #8
    8980:	10028909 	andne	r8, r2, r9, lsl #18
    8984:	0000083e 	andeq	r0, r0, lr, lsr r8
    8988:	0b331808 	bleq	cce9b0 <__ccfg+0xcaea08>
    898c:	8a090000 	bhi	248994 <__ccfg+0x2289ec>
    8990:	01ce1702 	biceq	r1, lr, r2, lsl #14
    8994:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    8998:	000007d9 	ldrdeq	r0, [r0], -r9
    899c:	0f028b09 	svceq	0x00028b09
    89a0:	000000a3 	andeq	r0, r0, r3, lsr #1
    89a4:	0ea11848 	cdpeq	8, 10, cr1, cr1, cr8, {2}
    89a8:	8c090000 	stchi	0, cr0, [r9], {-0}
    89ac:	009c2c02 	addseq	r2, ip, r2, lsl #24
    89b0:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    89b4:	00000076 	andeq	r0, r0, r6, ror r0
    89b8:	1a028d09 	bne	abde4 <__ccfg+0x8be3c>
    89bc:	000006e0 	andeq	r0, r0, r0, ror #13
    89c0:	06291858 			; <UNDEFINED> instruction: 0x06291858
    89c4:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    89c8:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    89cc:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    89d0:	00000cda 	ldrdeq	r0, [r0], -sl
    89d4:	16028f09 	strne	r8, [r2], -r9, lsl #30
    89d8:	0000012c 	andeq	r0, r0, ip, lsr #2
    89dc:	00681870 	rsbeq	r1, r8, r0, ror r8
    89e0:	90090000 	andls	r0, r9, r0
    89e4:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    89e8:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    89ec:	00000b5a 	andeq	r0, r0, sl, asr fp
    89f0:	10029109 	andne	r9, r2, r9, lsl #2
    89f4:	0000084e 	andeq	r0, r0, lr, asr #16
    89f8:	040c1880 	streq	r1, [ip], #-2176	; 0xfffff780
    89fc:	92090000 	andls	r0, r9, #0
    8a00:	085e1002 	ldmdaeq	lr, {r1, ip}^
    8a04:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    8a08:	00000c7d 	andeq	r0, r0, sp, ror ip
    8a0c:	0f029309 	svceq	0x00029309
    8a10:	000000a3 	andeq	r0, r0, r3, lsr #1
    8a14:	02a318a0 	adceq	r1, r3, #160, 16	; 0xa00000
    8a18:	94090000 	strls	r0, [r9], #-0
    8a1c:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a20:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    8a24:	0000068f 	andeq	r0, r0, pc, lsl #13
    8a28:	16029509 	strne	r9, [r2], -r9, lsl #10
    8a2c:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a30:	05ab18ac 	streq	r1, [fp, #2220]!	; 0x8ac
    8a34:	96090000 	strls	r0, [r9], -r0
    8a38:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a3c:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    8a40:	0000083a 	andeq	r0, r0, sl, lsr r8
    8a44:	16029709 	strne	r9, [r2], -r9, lsl #14
    8a48:	0000012c 	andeq	r0, r0, ip, lsr #2
    8a4c:	061818bc 			; <UNDEFINED> instruction: 0x061818bc
    8a50:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    8a54:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    8a58:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    8a5c:	000008f2 	strdeq	r0, [r0], -r2
    8a60:	08029909 	stmdaeq	r2, {r0, r3, r8, fp, ip, pc}
    8a64:	000000a3 	andeq	r0, r0, r3, lsr #1
    8a68:	f10a00cc 	cpsie	if,#12
    8a6c:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    8a70:	0b000008 	bleq	8a98 <__exidx_end+0x2e98>
    8a74:	000000aa 	andeq	r0, r0, sl, lsr #1
    8a78:	f10a0019 	cpsie	,#25
    8a7c:	5e000005 	cdppl	0, 0, cr0, cr0, cr5, {0}
    8a80:	0b000008 	bleq	8aa8 <__exidx_end+0x2ea8>
    8a84:	000000aa 	andeq	r0, r0, sl, lsr #1
    8a88:	f10a0007 	cpsie	,#7
    8a8c:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
    8a90:	0b000008 	bleq	8ab8 <__exidx_end+0x2eb8>
    8a94:	000000aa 	andeq	r0, r0, sl, lsr #1
    8a98:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    8a9c:	07029e09 	streq	r9, [r2, -r9, lsl #28]
    8aa0:	00000895 	muleq	r0, r5, r8
    8aa4:	0003b718 	andeq	fp, r3, r8, lsl r7
    8aa8:	02a10900 	adceq	r0, r1, #0, 18
    8aac:	0008951b 	andeq	r9, r8, fp, lsl r5
    8ab0:	f4180000 			; <UNDEFINED> instruction: 0xf4180000
    8ab4:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8ab8:	a51802a2 	ldrge	r0, [r8, #-674]	; 0xfffffd5e
    8abc:	78000008 	stmdavc	r0, {r3}
    8ac0:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
    8ac4:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
    8ac8:	aa0b0000 	bge	2c8ad0 <__ccfg+0x2a8b28>
    8acc:	1d000000 	stcne	0, cr0, [r0, #-0]
    8ad0:	00aa0a00 	adceq	r0, sl, r0, lsl #20
    8ad4:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    8ad8:	aa0b0000 	bge	2c8ae0 <__ccfg+0x2a8b38>
    8adc:	1d000000 	stcne	0, cr0, [r0, #-0]
    8ae0:	09f01c00 	ldmibeq	r0!, {sl, fp, ip}^
    8ae4:	da030283 	ble	c94f8 <__ccfg+0xa9550>
    8ae8:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    8aec:	00000d41 	andeq	r0, r0, r1, asr #26
    8af0:	0b029a09 	bleq	af31c <__ccfg+0x8f374>
    8af4:	00000729 	andeq	r0, r0, r9, lsr #14
    8af8:	000b421d 	andeq	r4, fp, sp, lsl r2
    8afc:	02a30900 	adceq	r0, r3, #0, 18
    8b00:	00086e0b 	andeq	r6, r8, fp, lsl #28
    8b04:	f10a0000 	cpsie	,#0
    8b08:	ea000005 	b	8b24 <__exidx_end+0x2f24>
    8b0c:	0b000008 	bleq	8b34 <__exidx_end+0x2f34>
    8b10:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b14:	ac1e0018 	ldcge	0, cr0, [lr], {24}
    8b18:	0100000e 	tsteq	r0, lr
    8b1c:	08ea0411 	stmiaeq	sl!, {r0, r4, sl}^
    8b20:	011f0000 	tsteq	pc, r0
    8b24:	00000902 	andeq	r0, r0, r2, lsl #18
    8b28:	00049716 	andeq	r9, r4, r6, lsl r7
    8b2c:	04110000 	ldreq	r0, [r1], #-0
    8b30:	000008f6 	strdeq	r0, [r0], -r6
    8b34:	01b80411 			; <UNDEFINED> instruction: 0x01b80411
    8b38:	011f0000 	tsteq	pc, r0
    8b3c:	0000091a 	andeq	r0, r0, sl, lsl r9
    8b40:	0000a316 	andeq	sl, r0, r6, lsl r3
    8b44:	04110000 	ldreq	r0, [r1], #-0
    8b48:	00000920 	andeq	r0, r0, r0, lsr #18
    8b4c:	090e0411 	stmdbeq	lr, {r0, r4, sl}
    8b50:	8e0a0000 	cdphi	0, 0, cr0, cr10, cr0, {0}
    8b54:	36000006 	strcc	r0, [r0], -r6
    8b58:	0b000009 	bleq	8b84 <__exidx_end+0x2f84>
    8b5c:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b60:	b2200002 	eorlt	r0, r0, #2
    8b64:	0900000a 	stmdbeq	r0, {r1, r3}
    8b68:	97170333 			; <UNDEFINED> instruction: 0x97170333
    8b6c:	01000004 	tsteq	r0, r4
    8b70:	0aab2001 	beq	fead0b7c <_estack+0xdeacbb7c>
    8b74:	34090000 	strcc	r0, [r9], #-0
    8b78:	049d1d03 	ldreq	r1, [sp], #3331	; 0xd03
    8b7c:	01010000 	mrseq	r0, (UNDEF: 1)
    8b80:	0024c302 	eoreq	ip, r4, r2, lsl #6
    8b84:	123b0b00 	eorsne	r0, fp, #0, 22
    8b88:	0000007f 	andeq	r0, r0, pc, ror r0
    8b8c:	400b080c 	andmi	r0, fp, ip, lsl #16
    8b90:	00098409 	andeq	r8, r9, r9, lsl #8
    8b94:	1fc60d00 	svcne	0x00c60d00
    8b98:	410b0000 	mrsmi	r0, (UNDEF: 11)
    8b9c:	0009840d 	andeq	r8, r9, sp, lsl #8
    8ba0:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    8ba4:	0b000022 	bleq	8c34 <__exidx_end+0x3034>
    8ba8:	09840d42 	stmibeq	r4, {r1, r6, r8, sl, fp}
    8bac:	00040000 	andeq	r0, r4, r0
    8bb0:	00590411 	subseq	r0, r9, r1, lsl r4
    8bb4:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    8bb8:	0b000027 	bleq	8c5c <__exidx_end+0x305c>
    8bbc:	09600343 	stmdbeq	r0!, {r0, r1, r6, r8, r9}^
    8bc0:	8a020000 	bhi	88bc8 <__ccfg+0x68c20>
    8bc4:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8bc8:	09a22b3c 	stmibeq	r2!, {r2, r3, r4, r5, r8, r9, fp, sp}
    8bcc:	290f0000 	stmdbcs	pc, {}	; <UNPREDICTABLE>
    8bd0:	10000025 	andne	r0, r0, r5, lsr #32
    8bd4:	fe156f0c 	cdp2	15, 1, cr6, cr5, cr12, {0}
    8bd8:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    8bdc:	00001ef5 	strdeq	r1, [r0], -r5
    8be0:	6c0d700c 	stcvs	0, cr7, [sp], {12}
    8be4:	00000000 	andeq	r0, r0, r0
    8be8:	0007680d 	andeq	r6, r7, sp, lsl #16
    8bec:	0d710c00 	ldcleq	12, cr0, [r1, #-0]
    8bf0:	0000006c 	andeq	r0, r0, ip, rrx
    8bf4:	22680d02 	rsbcs	r0, r8, #2, 26	; 0x80
    8bf8:	740c0000 	strvc	r0, [ip], #-0
    8bfc:	000bc013 	andeq	ip, fp, r3, lsl r0
    8c00:	f70d0400 			; <UNDEFINED> instruction: 0xf70d0400
    8c04:	0c00001f 	stceq	0, cr0, [r0], {31}
    8c08:	09540c75 	ldmdbeq	r4, {r0, r2, r4, r5, r6, sl, fp}^
    8c0c:	0d080000 	stceq	0, cr0, [r8, #-0]
    8c10:	00002298 	muleq	r0, r8, r2
    8c14:	4c067d0c 	stcmi	13, cr7, [r6], {12}
    8c18:	0c00000b 	stceq	0, cr0, [r0], {11}
    8c1c:	0021e20d 	eoreq	lr, r1, sp, lsl #4
    8c20:	06810c00 	streq	r0, [r1], r0, lsl #24
    8c24:	00000b96 	muleq	r0, r6, fp
    8c28:	6b02000d 	blvs	88c64 <__ccfg+0x68cbc>
    8c2c:	0c000020 	stceq	0, cr0, [r0], {32}
    8c30:	0a0a2a3f 	beq	293534 <__ccfg+0x27358c>
    8c34:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
    8c38:	18000020 	stmdane	r0, {r5}
    8c3c:	c115e00c 	tstgt	r5, ip
    8c40:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    8c44:	00001ef5 	strdeq	r1, [r0], -r5
    8c48:	6c0de10c 	stfvsd	f6, [sp], {12}
    8c4c:	00000000 	andeq	r0, r0, r0
    8c50:	0007680d 	andeq	r6, r7, sp, lsl #16
    8c54:	0de20c00 	stcleq	12, cr0, [r2]
    8c58:	0000006c 	andeq	r0, r0, ip, rrx
    8c5c:	22680d02 	rsbcs	r0, r8, #2, 26	; 0x80
    8c60:	e50c0000 	str	r0, [ip, #-0]
    8c64:	000bc013 	andeq	ip, fp, r3, lsl r0
    8c68:	f70d0400 			; <UNDEFINED> instruction: 0xf70d0400
    8c6c:	0c00001f 	stceq	0, cr0, [r0], {31}
    8c70:	09540ce6 	ldmdbeq	r4, {r1, r2, r5, r6, r7, sl, fp}^
    8c74:	0d080000 	stceq	0, cr0, [r8, #-0]
    8c78:	00002298 	muleq	r0, r8, r2
    8c7c:	cc06ee0c 	stcgt	14, cr14, [r6], {12}
    8c80:	0c00000b 	stceq	0, cr0, [r0], {11}
    8c84:	0021e20d 	eoreq	lr, r1, sp, lsl #4
    8c88:	06f20c00 	ldrbteq	r0, [r2], r0, lsl #24
    8c8c:	00000c16 	andeq	r0, r0, r6, lsl ip
    8c90:	26340d0d 	ldrtcs	r0, [r4], -sp, lsl #26
    8c94:	f30c0000 	vhadd.u8	d0, d12, d0
    8c98:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8c9c:	8c0d0e00 	stchi	14, cr0, [sp], {-0}
    8ca0:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    8ca4:	006c0df4 	strdeq	r0, [ip], #-212	; 0xffffff2c	; <UNPREDICTABLE>
    8ca8:	0d100000 	ldceq	0, cr0, [r0, #-0]
    8cac:	0000209e 	muleq	r0, lr, r0
    8cb0:	4006fa0c 	andmi	pc, r6, ip, lsl #20
    8cb4:	1200000c 	andne	r0, r0, #12
    8cb8:	0022480d 	eoreq	r4, r2, sp, lsl #16
    8cbc:	0cfb0c00 	ldcleq	12, cr0, [fp]
    8cc0:	00000059 	andeq	r0, r0, r9, asr r0
    8cc4:	25980d13 	ldrcs	r0, [r8, #3347]	; 0xd13
    8cc8:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    8ccc:	0000590c 	andeq	r5, r0, ip, lsl #18
    8cd0:	a10d1400 	tstge	sp, r0, lsl #8
    8cd4:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    8cd8:	00590cfd 	ldrsheq	r0, [r9], #-205	; 0xffffff33
    8cdc:	0d150000 	ldceq	0, cr0, [r5, #-0]
    8ce0:	000025aa 	andeq	r2, r0, sl, lsr #11
    8ce4:	6c0dfe0c 	stcvs	14, cr15, [sp], {12}
    8ce8:	16000000 	strne	r0, [r0], -r0
    8cec:	26af0200 	strtcs	r0, [pc], r0, lsl #4
    8cf0:	440c0000 	strmi	r0, [ip], #-0
    8cf4:	000acd36 	andeq	ip, sl, r6, lsr sp
    8cf8:	26961a00 	ldrcs	r1, [r6], r0, lsl #20
    8cfc:	0c140000 	ldceq	0, cr0, [r4], {-0}
    8d00:	4c15019f 	ldfmis	f0, [r5], {159}	; 0x9f
    8d04:	1800000b 	stmdane	r0, {r0, r1, r3}
    8d08:	00001ef5 	strdeq	r1, [r0], -r5
    8d0c:	0d01a00c 	stceq	0, cr10, [r1, #-48]	; 0xffffffd0
    8d10:	0000006c 	andeq	r0, r0, ip, rrx
    8d14:	07681800 	strbeq	r1, [r8, -r0, lsl #16]!
    8d18:	a10c0000 	mrsge	r0, (UNDEF: 12)
    8d1c:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8d20:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    8d24:	00002268 	andeq	r2, r0, r8, ror #4
    8d28:	1301a40c 	movwne	sl, #5132	; 0x140c
    8d2c:	00000bc0 	andeq	r0, r0, r0, asr #23
    8d30:	1ff71804 	svcne	0x00f71804
    8d34:	a50c0000 	strge	r0, [ip, #-0]
    8d38:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8d3c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8d40:	00002298 	muleq	r0, r8, r2
    8d44:	0601ad0c 	streq	sl, [r1], -ip, lsl #26
    8d48:	00000c6a 	andeq	r0, r0, sl, ror #24
    8d4c:	21e2180c 	mvncs	r1, ip, lsl #16
    8d50:	b10c0000 	mrslt	r0, (UNDEF: 12)
    8d54:	0cb90601 	ldceq	6, cr0, [r9], #4
    8d58:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    8d5c:	00002248 	andeq	r2, r0, r8, asr #4
    8d60:	0d01b20c 	sfmeq	f3, 1, [r1, #-48]	; 0xffffffd0
    8d64:	0000006c 	andeq	r0, r0, ip, rrx
    8d68:	2136180e 	teqcs	r6, lr, lsl #16
    8d6c:	b30c0000 	movwlt	r0, #49152	; 0xc000
    8d70:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8d74:	00100000 	andseq	r0, r0, r0
    8d78:	760c010c 	strvc	r0, [ip], -ip, lsl #2
    8d7c:	000b9604 	andeq	r9, fp, r4, lsl #12
    8d80:	274b2100 	strbcs	r2, [fp, -r0, lsl #2]
    8d84:	770c0000 	strvc	r0, [ip, -r0]
    8d88:	0000590f 	andeq	r5, r0, pc, lsl #18
    8d8c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8d90:	20e92100 	rsccs	r2, r9, r0, lsl #2
    8d94:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    8d98:	0000590f 	andeq	r5, r0, pc, lsl #18
    8d9c:	03010100 	movweq	r0, #4352	; 0x1100
    8da0:	21a92100 			; <UNDEFINED> instruction: 0x21a92100
    8da4:	7a0c0000 	bvc	308dac <__ccfg+0x2e8e04>
    8da8:	0000590f 	andeq	r5, r0, pc, lsl #18
    8dac:	01020100 	mrseq	r0, (UNDEF: 18)
    8db0:	1f642100 	svcne	0x00642100
    8db4:	7b0c0000 	blvc	308dbc <__ccfg+0x2e8e14>
    8db8:	0000590f 	andeq	r5, r0, pc, lsl #18
    8dbc:	00010100 	andeq	r0, r1, r0, lsl #2
    8dc0:	010c0000 	mrseq	r0, (UNDEF: 12)
    8dc4:	c0047e0c 	andgt	r7, r4, ip, lsl #28
    8dc8:	2100000b 	tstcs	r0, fp
    8dcc:	000025c6 	andeq	r2, r0, r6, asr #11
    8dd0:	590f7f0c 	stmdbpl	pc, {r2, r3, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    8dd4:	01000000 	mrseq	r0, (UNDEF: 0)
    8dd8:	21000404 	tstcs	r0, r4, lsl #8
    8ddc:	0000271a 	andeq	r2, r0, sl, lsl r7
    8de0:	590f800c 	stmdbpl	pc, {r2, r3, pc}	; <UNPREDICTABLE>
    8de4:	01000000 	mrseq	r0, (UNDEF: 0)
    8de8:	00000004 	andeq	r0, r0, r4
    8dec:	09960411 	ldmibeq	r6, {r0, r4, sl}
    8df0:	04110000 	ldreq	r0, [r1], #-0
    8df4:	0000007f 	andeq	r0, r0, pc, ror r0
    8df8:	e70c010c 	str	r0, [ip, -ip, lsl #2]
    8dfc:	000c1604 	andeq	r1, ip, r4, lsl #12
    8e00:	274b2100 	strbcs	r2, [fp, -r0, lsl #2]
    8e04:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    8e08:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e0c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8e10:	20e92100 	rsccs	r2, r9, r0, lsl #2
    8e14:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
    8e18:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e1c:	03010100 	movweq	r0, #4352	; 0x1100
    8e20:	21a92100 			; <UNDEFINED> instruction: 0x21a92100
    8e24:	eb0c0000 	bl	308e2c <__ccfg+0x2e8e84>
    8e28:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e2c:	01020100 	mrseq	r0, (UNDEF: 18)
    8e30:	1f642100 	svcne	0x00642100
    8e34:	ec0c0000 	stc	0, cr0, [ip], {-0}
    8e38:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e3c:	00010100 	andeq	r0, r1, r0, lsl #2
    8e40:	010c0000 	mrseq	r0, (UNDEF: 12)
    8e44:	4004ef0c 	andmi	lr, r4, ip, lsl #30
    8e48:	2100000c 	tstcs	r0, ip
    8e4c:	000025c6 	andeq	r2, r0, r6, asr #11
    8e50:	590ff00c 	stmdbpl	pc, {r2, r3, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8e54:	01000000 	mrseq	r0, (UNDEF: 0)
    8e58:	21000404 	tstcs	r0, r4, lsl #8
    8e5c:	0000271a 	andeq	r2, r0, sl, lsl r7
    8e60:	590ff10c 	stmdbpl	pc, {r2, r3, r8, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8e64:	01000000 	mrseq	r0, (UNDEF: 0)
    8e68:	00000004 	andeq	r0, r0, r4
    8e6c:	f50c010c 			; <UNDEFINED> instruction: 0xf50c010c
    8e70:	000c6a04 	andeq	r6, ip, r4, lsl #20
    8e74:	20d32100 	sbcscs	r2, r3, r0, lsl #2
    8e78:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    8e7c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e80:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8e84:	27342100 	ldrcs	r2, [r4, -r0, lsl #2]!
    8e88:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    8e8c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8e90:	01060100 	mrseq	r0, (UNDEF: 22)
    8e94:	011b0000 	tsteq	fp, r0
    8e98:	0401a60c 	streq	sl, [r1], #-1548	; 0xfffff9f4
    8e9c:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    8ea0:	00274b22 	eoreq	r4, r7, r2, lsr #22
    8ea4:	01a70c00 			; <UNDEFINED> instruction: 0x01a70c00
    8ea8:	0000590f 	andeq	r5, r0, pc, lsl #18
    8eac:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8eb0:	20e92200 	rsccs	r2, r9, r0, lsl #4
    8eb4:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    8eb8:	00590f01 	subseq	r0, r9, r1, lsl #30
    8ebc:	01010000 	mrseq	r0, (UNDEF: 1)
    8ec0:	a9220003 	stmdbge	r2!, {r0, r1}
    8ec4:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8ec8:	590f01aa 	stmdbpl	pc, {r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    8ecc:	01000000 	mrseq	r0, (UNDEF: 0)
    8ed0:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    8ed4:	00001f64 	andeq	r1, r0, r4, ror #30
    8ed8:	0f01ab0c 	svceq	0x0001ab0c
    8edc:	00000059 	andeq	r0, r0, r9, asr r0
    8ee0:	00000101 	andeq	r0, r0, r1, lsl #2
    8ee4:	0c011b00 			; <UNDEFINED> instruction: 0x0c011b00
    8ee8:	e60401ae 	str	r0, [r4], -lr, lsr #3
    8eec:	2200000c 	andcs	r0, r0, #12
    8ef0:	000025c6 	andeq	r2, r0, r6, asr #11
    8ef4:	0f01af0c 	svceq	0x0001af0c
    8ef8:	00000059 	andeq	r0, r0, r9, asr r0
    8efc:	00040401 	andeq	r0, r4, r1, lsl #8
    8f00:	00271a22 	eoreq	r1, r7, r2, lsr #20
    8f04:	01b00c00 	lslseq	r0, r0, #24
    8f08:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f0c:	00040100 	andeq	r0, r4, r0, lsl #2
    8f10:	04110000 	ldreq	r0, [r1], #-0
    8f14:	0000098a 	andeq	r0, r0, sl, lsl #19
    8f18:	00260902 	eoreq	r0, r6, r2, lsl #18
    8f1c:	2f3d0d00 	svccs	0x003d0d00
    8f20:	00000cf8 	strdeq	r0, [r0], -r8
    8f24:	00261b0f 	eoreq	r1, r6, pc, lsl #22
    8f28:	780d1800 	stmdavc	sp, {fp, ip}
    8f2c:	000d8815 	andeq	r8, sp, r5, lsl r8
    8f30:	1ef50d00 	cdpne	13, 15, cr0, cr5, cr0, {0}
    8f34:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    8f38:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8f3c:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    8f40:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    8f44:	006c0d7a 	rsbeq	r0, ip, sl, ror sp
    8f48:	0d020000 	stceq	0, cr0, [r2, #-0]
    8f4c:	00002268 	andeq	r2, r0, r8, ror #4
    8f50:	c0137d0d 	andsgt	r7, r3, sp, lsl #26
    8f54:	0400000b 	streq	r0, [r0], #-11
    8f58:	001ff70d 	andseq	pc, pc, sp, lsl #14
    8f5c:	0c7e0d00 	ldcleq	13, cr0, [lr], #-0
    8f60:	00000954 	andeq	r0, r0, r4, asr r9
    8f64:	22980d08 	addscs	r0, r8, #8, 26	; 0x200
    8f68:	860d0000 	strhi	r0, [sp], -r0
    8f6c:	0010f306 	andseq	pc, r0, r6, lsl #6
    8f70:	e20d0c00 	and	r0, sp, #0, 24
    8f74:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    8f78:	113d068a 	teqne	sp, sl, lsl #13
    8f7c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    8f80:	0000203c 	andeq	r2, r0, ip, lsr r0
    8f84:	6706930d 	strvs	r9, [r6, -sp, lsl #6]
    8f88:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    8f8c:	0025bf0d 	eoreq	fp, r5, sp, lsl #30
    8f90:	0c940d00 	ldceq	13, cr0, [r4], {0}
    8f94:	00000059 	andeq	r0, r0, r9, asr r0
    8f98:	231e0d0f 	tstcs	lr, #960	; 0x3c0
    8f9c:	950d0000 	strls	r0, [sp, #-0]
    8fa0:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8fa4:	220d1000 	andcs	r1, sp, #0
    8fa8:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    8fac:	09840d96 	stmibeq	r4, {r1, r2, r4, r7, r8, sl, fp}
    8fb0:	00140000 	andseq	r0, r4, r0
    8fb4:	00247502 	eoreq	r7, r4, r2, lsl #10
    8fb8:	2f3e0d00 	svccs	0x003e0d00
    8fbc:	00000d94 	muleq	r0, r4, sp
    8fc0:	00216d0f 	eoreq	r6, r1, pc, lsl #26
    8fc4:	9f0d2400 	svcls	0x000d2400
    8fc8:	000e7215 	andeq	r7, lr, r5, lsl r2
    8fcc:	1ef50d00 	cdpne	13, 15, cr0, cr5, cr0, {0}
    8fd0:	a00d0000 	andge	r0, sp, r0
    8fd4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8fd8:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    8fdc:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    8fe0:	006c0da1 	rsbeq	r0, ip, r1, lsr #27
    8fe4:	0d020000 	stceq	0, cr0, [r2, #-0]
    8fe8:	00002268 	andeq	r2, r0, r8, ror #4
    8fec:	c013a40d 	andsgt	sl, r3, sp, lsl #8
    8ff0:	0400000b 	streq	r0, [r0], #-11
    8ff4:	001ff70d 	andseq	pc, pc, sp, lsl #14
    8ff8:	0ca50d00 	stceq	13, cr0, [r5]
    8ffc:	00000954 	andeq	r0, r0, r4, asr r9
    9000:	22980d08 	addscs	r0, r8, #8, 26	; 0x200
    9004:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    9008:	0011a106 	andseq	sl, r1, r6, lsl #2
    900c:	e20d0c00 	and	r0, sp, #0, 24
    9010:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9014:	11eb06b1 	strhne	r0, [fp, #97]!	; 0x61
    9018:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    901c:	0000203c 	andeq	r2, r0, ip, lsr r0
    9020:	1506c30d 	strne	ip, [r6, #-781]	; 0xfffffcf3
    9024:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    9028:	0023d30d 	eoreq	sp, r3, sp, lsl #6
    902c:	06cd0d00 	strbeq	r0, [sp], r0, lsl #26
    9030:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    9034:	231e0d0f 	tstcs	lr, #960	; 0x3c0
    9038:	ce0d0000 	cdpgt	0, 0, cr0, cr13, cr0, {0}
    903c:	00007f0d 	andeq	r7, r0, sp, lsl #30
    9040:	210d1000 	mrscs	r1, (UNDEF: 13)
    9044:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9048:	00590ccf 	subseq	r0, r9, pc, asr #25
    904c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    9050:	00002425 	andeq	r2, r0, r5, lsr #8
    9054:	590cd10d 	stmdbpl	ip, {r0, r2, r3, r8, ip, lr, pc}
    9058:	15000000 	strne	r0, [r0, #-0]
    905c:	00242e0d 	eoreq	r2, r4, sp, lsl #28
    9060:	0cd20d00 	ldcleq	13, cr0, [r2], {0}
    9064:	00000059 	andeq	r0, r0, r9, asr r0
    9068:	217f0d16 	cmncs	pc, r6, lsl sp	; <UNPREDICTABLE>
    906c:	db0d0000 	blle	349074 <__ccfg+0x3290cc>
    9070:	00131906 	andseq	r1, r3, r6, lsl #18
    9074:	6e0d1700 	cdpvs	7, 0, cr1, cr13, cr0, {0}
    9078:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    907c:	09540cdc 	ldmdbeq	r4, {r2, r3, r4, r6, r7, sl, fp}^
    9080:	0d180000 	ldceq	0, cr0, [r8, #-0]
    9084:	000021b3 			; <UNDEFINED> instruction: 0x000021b3
    9088:	e611dd0d 	ldr	sp, [r1], -sp, lsl #26
    908c:	1c00000c 	stcne	0, cr0, [r0], {12}
    9090:	001f870d 	andseq	r8, pc, sp, lsl #14
    9094:	0dde0d00 	ldcleq	13, cr0, [lr]
    9098:	00000984 	andeq	r0, r0, r4, lsl #19
    909c:	8a020020 	bhi	89124 <__ccfg+0x6917c>
    90a0:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    90a4:	0e7e2f41 	cdpeq	15, 7, cr2, cr14, cr1, {2}
    90a8:	521a0000 	andspl	r0, sl, #0
    90ac:	1c00001f 	stcne	0, cr0, [r0], {31}
    90b0:	15017d0d 	strne	r7, [r1, #-3341]	; 0xfffff2f3
    90b4:	00000f6d 	andeq	r0, r0, sp, ror #30
    90b8:	001ef518 	andseq	pc, lr, r8, lsl r5	; <UNPREDICTABLE>
    90bc:	017e0d00 	cmneq	lr, r0, lsl #26
    90c0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    90c4:	68180000 	ldmdavs	r8, {}	; <UNPREDICTABLE>
    90c8:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    90cc:	6c0d017f 	stfvss	f0, [sp], {127}	; 0x7f
    90d0:	02000000 	andeq	r0, r0, #0
    90d4:	00226818 	eoreq	r6, r2, r8, lsl r8
    90d8:	01820d00 	orreq	r0, r2, r0, lsl #26
    90dc:	000bc013 	andeq	ip, fp, r3, lsl r0
    90e0:	f7180400 			; <UNDEFINED> instruction: 0xf7180400
    90e4:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    90e8:	540c0183 	strpl	r0, [ip], #-387	; 0xfffffe7d
    90ec:	08000009 	stmdaeq	r0, {r0, r3}
    90f0:	00229818 	eoreq	r9, r2, r8, lsl r8
    90f4:	018b0d00 	orreq	r0, fp, r0, lsl #26
    90f8:	00136306 	andseq	r6, r3, r6, lsl #6
    90fc:	e2180c00 	ands	r0, r8, #0, 24
    9100:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9104:	b206018f 	andlt	r0, r6, #-1073741789	; 0xc0000023
    9108:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    910c:	00264818 	eoreq	r4, r6, r8, lsl r8
    9110:	01950d00 	orrseq	r0, r5, r0, lsl #26
    9114:	0013df06 	andseq	sp, r3, r6, lsl #30
    9118:	48180e00 	ldmdami	r8, {r9, sl, fp}
    911c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9120:	590c0196 	stmdbpl	ip, {r1, r2, r4, r7, r8}
    9124:	0f000000 	svceq	0x00000000
    9128:	00270718 	eoreq	r0, r7, r8, lsl r7
    912c:	01a30d00 			; <UNDEFINED> instruction: 0x01a30d00
    9130:	00140c06 	andseq	r0, r4, r6, lsl #24
    9134:	c9181000 	ldmdbgt	r8, {ip}
    9138:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    913c:	250b01a4 	strcs	r0, [fp, #-420]	; 0xfffffe5c
    9140:	11000000 	mrsne	r0, (UNDEF: 0)
    9144:	00249a18 	eoreq	r9, r4, r8, lsl sl
    9148:	01a50d00 			; <UNDEFINED> instruction: 0x01a50d00
    914c:	0000590c 	andeq	r5, r0, ip, lsl #18
    9150:	cf181200 	svcgt	0x00181200
    9154:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9158:	590c01a7 	stmdbpl	ip, {r0, r1, r2, r5, r7, r8}
    915c:	13000000 	movwne	r0, #0
    9160:	00235118 	eoreq	r5, r3, r8, lsl r1
    9164:	01a90d00 			; <UNDEFINED> instruction: 0x01a90d00
    9168:	00006c0d 	andeq	r6, r0, sp, lsl #24
    916c:	2b181400 	blcs	60e174 <__ccfg+0x5ee1cc>
    9170:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9174:	7d0601af 	stfvcs	f0, [r6, #-700]	; 0xfffffd44
    9178:	16000014 			; <UNDEFINED> instruction: 0x16000014
    917c:	00222e18 	eoreq	r2, r2, r8, lsl lr
    9180:	01b70d00 			; <UNDEFINED> instruction: 0x01b70d00
    9184:	0014aa06 	andseq	sl, r4, r6, lsl #20
    9188:	3d181700 	ldccc	7, cr1, [r8, #-0]
    918c:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    9190:	540c01b8 	strpl	r0, [ip], #-440	; 0xfffffe48
    9194:	18000009 	stmdane	r0, {r0, r3}
    9198:	24560200 	ldrbcs	r0, [r6], #-512	; 0xfffffe00
    919c:	430d0000 	movwmi	r0, #53248	; 0xd000
    91a0:	000f793c 	andeq	r7, pc, ip, lsr r9	; <UNPREDICTABLE>
    91a4:	24371a00 	ldrtcs	r1, [r7], #-2560	; 0xfffff600
    91a8:	0d280000 	stceq	0, cr0, [r8, #-0]
    91ac:	7615021a 			; <UNDEFINED> instruction: 0x7615021a
    91b0:	18000010 	stmdane	r0, {r4}
    91b4:	00001ef5 	strdeq	r1, [r0], -r5
    91b8:	0d021b0d 	vstreq	d1, [r2, #-52]	; 0xffffffcc
    91bc:	0000006c 	andeq	r0, r0, ip, rrx
    91c0:	07681800 	strbeq	r1, [r8, -r0, lsl #16]!
    91c4:	1d0d0000 	stcne	0, cr0, [sp, #-0]
    91c8:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    91cc:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    91d0:	00002268 	andeq	r2, r0, r8, ror #4
    91d4:	1302200d 	movwne	r2, #8205	; 0x200d
    91d8:	00000bc0 	andeq	r0, r0, r0, asr #23
    91dc:	1ff71804 	svcne	0x00f71804
    91e0:	210d0000 	mrscs	r0, (UNDEF: 13)
    91e4:	09540c02 	ldmdbeq	r4, {r1, sl, fp}^
    91e8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    91ec:	00002298 	muleq	r0, r8, r2
    91f0:	0602290d 	streq	r2, [r2], -sp, lsl #18
    91f4:	000014f9 	strdeq	r1, [r0], -r9
    91f8:	21e2180c 	mvncs	r1, ip, lsl #16
    91fc:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    9200:	15480602 	strbne	r0, [r8, #-1538]	; 0xfffff9fe
    9204:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    9208:	00001eea 	andeq	r1, r0, sl, ror #29
    920c:	0602330d 	streq	r3, [r2], -sp, lsl #6
    9210:	00001575 	andeq	r1, r0, r5, ror r5
    9214:	2251180e 	subscs	r1, r1, #917504	; 0xe0000
    9218:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    921c:	15a20602 	strne	r0, [r2, #1538]!	; 0x602
    9220:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    9224:	00002080 	andeq	r2, r0, r0, lsl #1
    9228:	0c02390d 			; <UNDEFINED> instruction: 0x0c02390d
    922c:	00000059 	andeq	r0, r0, r9, asr r0
    9230:	23141814 	tstcs	r4, #20, 16	; 0x140000
    9234:	410d0000 	mrsmi	r0, (UNDEF: 13)
    9238:	15cf0602 	strbne	r0, [pc, #1538]	; 9842 <__exidx_end+0x3c42>
    923c:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    9240:	00001fec 	andeq	r1, r0, ip, ror #31
    9244:	0602550d 	streq	r5, [r2], -sp, lsl #10
    9248:	000015fc 	strdeq	r1, [r0], -ip
    924c:	145f1816 	ldrbne	r1, [pc], #-2070	; 9254 <__exidx_end+0x3654>
    9250:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    9254:	165c0602 	ldrbne	r0, [ip], -r2, lsl #12
    9258:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    925c:	00002078 	andeq	r2, r0, r8, ror r0
    9260:	0d02690d 	vstreq.16	s12, [r2, #-26]	; 0xffffffe6	; <UNPREDICTABLE>
    9264:	0000006c 	andeq	r0, r0, ip, rrx
    9268:	24b6181a 	ldrtcs	r1, [r6], #2074	; 0x81a
    926c:	6a0d0000 	bvs	349274 <__ccfg+0x3292cc>
    9270:	0bc60e02 	bleq	ff18ca80 <_estack+0xdf187a80>
    9274:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    9278:	00001f27 	andeq	r1, r0, r7, lsr #30
    927c:	0d026c0d 	stceq	12, cr6, [r2, #-52]	; 0xffffffcc
    9280:	0000006c 	andeq	r0, r0, ip, rrx
    9284:	22701820 	rsbscs	r1, r0, #32, 16	; 0x200000
    9288:	700d0000 	andvc	r0, sp, r0
    928c:	00380c02 	eorseq	r0, r8, r2, lsl #24
    9290:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    9294:	000023ae 	andeq	r2, r0, lr, lsr #7
    9298:	0c02730d 	stceq	3, cr7, [r2], {13}
    929c:	00000059 	andeq	r0, r0, r9, asr r0
    92a0:	ea020024 	b	89338 <__ccfg+0x69390>
    92a4:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    92a8:	10823048 	addne	r3, r2, r8, asr #32
    92ac:	d71a0000 	ldrle	r0, [sl, -r0]
    92b0:	0c000024 	stceq	0, cr0, [r0], {36}	; 0x24
    92b4:	1503750d 	strne	r7, [r3, #-1293]	; 0xfffffaf3
    92b8:	000010f3 	strdeq	r1, [r0], -r3
    92bc:	00258d18 	eoreq	r8, r5, r8, lsl sp
    92c0:	03760d00 	cmneq	r6, #0, 26
    92c4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    92c8:	ac180000 	ldcge	0, cr0, [r8], {-0}
    92cc:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    92d0:	6c0d0377 	stcvs	3, cr0, [sp], {119}	; 0x77
    92d4:	02000000 	andeq	r0, r0, #0
    92d8:	001f9918 	andseq	r9, pc, r8, lsl r9	; <UNPREDICTABLE>
    92dc:	03780d00 	cmneq	r8, #0, 26
    92e0:	0000590c 	andeq	r5, r0, ip, lsl #18
    92e4:	8f180400 	svchi	0x00180400
    92e8:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    92ec:	590c0379 	stmdbpl	ip, {r0, r3, r4, r5, r6, r8, r9}
    92f0:	05000000 	streq	r0, [r0, #-0]
    92f4:	00221418 	eoreq	r1, r2, r8, lsl r4
    92f8:	037a0d00 	cmneq	sl, #0, 26
    92fc:	0000590c 	andeq	r5, r0, ip, lsl #18
    9300:	f8180600 			; <UNDEFINED> instruction: 0xf8180600
    9304:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9308:	250b037b 	strcs	r0, [fp, #-891]	; 0xfffffc85
    930c:	07000000 	streq	r0, [r0, -r0]
    9310:	001fd118 	andseq	sp, pc, r8, lsl r1	; <UNPREDICTABLE>
    9314:	037c0d00 	cmneq	ip, #0, 26
    9318:	0009540c 	andeq	r5, r9, ip, lsl #8
    931c:	0c000800 	stceq	8, cr0, [r0], {-0}
    9320:	047f0d01 	ldrbteq	r0, [pc], #-3329	; 9328 <__exidx_end+0x3728>
    9324:	0000113d 	andeq	r1, r0, sp, lsr r1
    9328:	00274b21 	eoreq	r4, r7, r1, lsr #22
    932c:	0f800d00 	svceq	0x00800d00
    9330:	00000059 	andeq	r0, r0, r9, asr r0
    9334:	00040401 	andeq	r0, r4, r1, lsl #8
    9338:	0020e921 	eoreq	lr, r0, r1, lsr #18
    933c:	0f810d00 	svceq	0x00810d00
    9340:	00000059 	andeq	r0, r0, r9, asr r0
    9344:	00030101 	andeq	r0, r3, r1, lsl #2
    9348:	0021a921 	eoreq	sl, r1, r1, lsr #18
    934c:	0f830d00 	svceq	0x00830d00
    9350:	00000059 	andeq	r0, r0, r9, asr r0
    9354:	00010201 	andeq	r0, r1, r1, lsl #4
    9358:	001f6421 	andseq	r6, pc, r1, lsr #8
    935c:	0f840d00 	svceq	0x00840d00
    9360:	00000059 	andeq	r0, r0, r9, asr r0
    9364:	00000101 	andeq	r0, r0, r1, lsl #2
    9368:	0d010c00 	stceq	12, cr0, [r1, #-0]
    936c:	11670487 	smulbbne	r7, r7, r4
    9370:	c6210000 	strtgt	r0, [r1], -r0
    9374:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9378:	00590f88 	subseq	r0, r9, r8, lsl #31
    937c:	04010000 	streq	r0, [r1], #-0
    9380:	1a210004 	bne	849398 <__ccfg+0x8293f0>
    9384:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9388:	00590f89 	subseq	r0, r9, r9, lsl #31
    938c:	04010000 	streq	r0, [r1], #-0
    9390:	0c000000 	stceq	0, cr0, [r0], {-0}
    9394:	048b0d01 	streq	r0, [fp], #3329	; 0xd01
    9398:	000011a1 	andeq	r1, r0, r1, lsr #3
    939c:	00265921 	eoreq	r5, r6, r1, lsr #18
    93a0:	0f8c0d00 	svceq	0x008c0d00
    93a4:	00000059 	andeq	r0, r0, r9, asr r0
    93a8:	00070101 	andeq	r0, r7, r1, lsl #2
    93ac:	0026e121 	eoreq	lr, r6, r1, lsr #2
    93b0:	0f8f0d00 	svceq	0x008f0d00
    93b4:	00000059 	andeq	r0, r0, r9, asr r0
    93b8:	00040101 	andeq	r0, r4, r1, lsl #2
    93bc:	001f1a21 	andseq	r1, pc, r1, lsr #20
    93c0:	0f910d00 	svceq	0x00910d00
    93c4:	00000059 	andeq	r0, r0, r9, asr r0
    93c8:	00030101 	andeq	r0, r3, r1, lsl #2
    93cc:	0d010c00 	stceq	12, cr0, [r1, #-0]
    93d0:	11eb04a6 	mvnne	r0, r6, lsr #9
    93d4:	4b210000 	blmi	8493dc <__ccfg+0x829434>
    93d8:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    93dc:	00590fa7 	subseq	r0, r9, r7, lsr #31
    93e0:	04010000 	streq	r0, [r1], #-0
    93e4:	e9210004 	stmdb	r1!, {r2}
    93e8:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    93ec:	00590fa8 	subseq	r0, r9, r8, lsr #31
    93f0:	01010000 	mrseq	r0, (UNDEF: 1)
    93f4:	a9210003 	stmdbge	r1!, {r0, r1}
    93f8:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    93fc:	00590faa 	subseq	r0, r9, sl, lsr #31
    9400:	02010000 	andeq	r0, r1, #0
    9404:	64210001 	strtvs	r0, [r1], #-1
    9408:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    940c:	00590fab 	subseq	r0, r9, fp, lsr #31
    9410:	01010000 	mrseq	r0, (UNDEF: 1)
    9414:	0c000000 	stceq	0, cr0, [r0], {-0}
    9418:	04ae0d01 	strteq	r0, [lr], #3329	; 0xd01
    941c:	00001215 	andeq	r1, r0, r5, lsl r2
    9420:	0025c621 	eoreq	ip, r5, r1, lsr #12
    9424:	0faf0d00 	svceq	0x00af0d00
    9428:	00000059 	andeq	r0, r0, r9, asr r0
    942c:	00040401 	andeq	r0, r4, r1, lsl #8
    9430:	00271a21 	eoreq	r1, r7, r1, lsr #20
    9434:	0fb00d00 	svceq	0x00b00d00
    9438:	00000059 	andeq	r0, r0, r9, asr r0
    943c:	00000401 	andeq	r0, r0, r1, lsl #8
    9440:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9444:	129f04b2 	addsne	r0, pc, #-1308622848	; 0xb2000000
    9448:	59210000 	stmdbpl	r1!, {}	; <UNPREDICTABLE>
    944c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9450:	00590fb3 	ldrheq	r0, [r9], #-243	; 0xffffff0d
    9454:	01010000 	mrseq	r0, (UNDEF: 1)
    9458:	8f210007 	svchi	0x00210007
    945c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9460:	00590fb5 	ldrheq	r0, [r9], #-245	; 0xffffff0b
    9464:	01010000 	mrseq	r0, (UNDEF: 1)
    9468:	37210006 	strcc	r0, [r1, -r6]!
    946c:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9470:	00590fb7 	ldrheq	r0, [r9], #-247	; 0xffffff09
    9474:	01010000 	mrseq	r0, (UNDEF: 1)
    9478:	e1210005 			; <UNDEFINED> instruction: 0xe1210005
    947c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    9480:	00590fb9 	ldrheq	r0, [r9], #-249	; 0xffffff07
    9484:	01010000 	mrseq	r0, (UNDEF: 1)
    9488:	1a210004 	bne	8494a0 <__ccfg+0x8294f8>
    948c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9490:	00590fbb 	ldrheq	r0, [r9], #-251	; 0xffffff05
    9494:	01010000 	mrseq	r0, (UNDEF: 1)
    9498:	76210003 	strtvc	r0, [r1], -r3
    949c:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    94a0:	00590fbd 	ldrheq	r0, [r9], #-253	; 0xffffff03
    94a4:	01010000 	mrseq	r0, (UNDEF: 1)
    94a8:	ba210002 	blt	8494b8 <__ccfg+0x829510>
    94ac:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    94b0:	00590fbf 	ldrheq	r0, [r9], #-255	; 0xffffff01
    94b4:	01010000 	mrseq	r0, (UNDEF: 1)
    94b8:	42210001 	eormi	r0, r1, #1
    94bc:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    94c0:	00590fc1 	subseq	r0, r9, r1, asr #31
    94c4:	01010000 	mrseq	r0, (UNDEF: 1)
    94c8:	0c000000 	stceq	0, cr0, [r0], {-0}
    94cc:	04c40d01 	strbeq	r0, [r4], #3329	; 0xd01
    94d0:	00001319 	andeq	r1, r0, r9, lsl r3
    94d4:	00227821 	eoreq	r7, r2, r1, lsr #16
    94d8:	0fc50d00 	svceq	0x00c50d00
    94dc:	00000059 	andeq	r0, r0, r9, asr r0
    94e0:	00070101 	andeq	r0, r7, r1, lsl #2
    94e4:	0020b121 	eoreq	fp, r0, r1, lsr #2
    94e8:	0fc60d00 	svceq	0x00c60d00
    94ec:	00000059 	andeq	r0, r0, r9, asr r0
    94f0:	00060101 	andeq	r0, r6, r1, lsl #2
    94f4:	0021ec21 	eoreq	lr, r1, r1, lsr #24
    94f8:	0fc80d00 	svceq	0x00c80d00
    94fc:	00000059 	andeq	r0, r0, r9, asr r0
    9500:	00040101 	andeq	r0, r4, r1, lsl #2
    9504:	00215521 	eoreq	r5, r1, r1, lsr #10
    9508:	0fc90d00 	svceq	0x00c90d00
    950c:	00000059 	andeq	r0, r0, r9, asr r0
    9510:	00030101 	andeq	r0, r3, r1, lsl #2
    9514:	0024cb21 	eoreq	ip, r4, r1, lsr #22
    9518:	0fca0d00 	svceq	0x00ca0d00
    951c:	00000059 	andeq	r0, r0, r9, asr r0
    9520:	00020101 	andeq	r0, r2, r1, lsl #2
    9524:	00200121 	eoreq	r0, r0, r1, lsr #2
    9528:	0fcb0d00 	svceq	0x00cb0d00
    952c:	00000059 	andeq	r0, r0, r9, asr r0
    9530:	00010101 	andeq	r0, r1, r1, lsl #2
    9534:	001eff21 	andseq	pc, lr, r1, lsr #30
    9538:	0fcc0d00 	svceq	0x00cc0d00
    953c:	00000059 	andeq	r0, r0, r9, asr r0
    9540:	00000101 	andeq	r0, r0, r1, lsl #2
    9544:	0d010c00 	stceq	12, cr0, [r1, #-0]
    9548:	136304d4 	cmnne	r3, #212, 8	; 0xd4000000
    954c:	4b210000 	blmi	849554 <__ccfg+0x8295ac>
    9550:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9554:	00590fd5 	ldrsbeq	r0, [r9], #-245	; 0xffffff0b
    9558:	04010000 	streq	r0, [r1], #-0
    955c:	e9210004 	stmdb	r1!, {r2}
    9560:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9564:	00590fd6 	ldrsbeq	r0, [r9], #-246	; 0xffffff0a
    9568:	01010000 	mrseq	r0, (UNDEF: 1)
    956c:	a9210003 	stmdbge	r1!, {r0, r1}
    9570:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9574:	00590fd8 	ldrsbeq	r0, [r9], #-248	; 0xffffff08
    9578:	02010000 	andeq	r0, r1, #0
    957c:	64210001 	strtvs	r0, [r1], #-1
    9580:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9584:	00590fd9 	ldrsbeq	r0, [r9], #-249	; 0xffffff07
    9588:	01010000 	mrseq	r0, (UNDEF: 1)
    958c:	1b000000 	blne	9594 <__exidx_end+0x3994>
    9590:	01840d01 	orreq	r0, r4, r1, lsl #26
    9594:	0013b204 	andseq	fp, r3, r4, lsl #4
    9598:	274b2200 	strbcs	r2, [fp, -r0, lsl #4]
    959c:	850d0000 	strhi	r0, [sp, #-0]
    95a0:	00590f01 	subseq	r0, r9, r1, lsl #30
    95a4:	04010000 	streq	r0, [r1], #-0
    95a8:	e9220004 	stmdb	r2!, {r2}
    95ac:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    95b0:	590f0186 	stmdbpl	pc, {r1, r2, r7, r8}	; <UNPREDICTABLE>
    95b4:	01000000 	mrseq	r0, (UNDEF: 0)
    95b8:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    95bc:	000021a9 	andeq	r2, r0, r9, lsr #3
    95c0:	0f01880d 	svceq	0x0001880d
    95c4:	00000059 	andeq	r0, r0, r9, asr r0
    95c8:	00010201 	andeq	r0, r1, r1, lsl #4
    95cc:	001f6422 	andseq	r6, pc, r2, lsr #8
    95d0:	01890d00 	orreq	r0, r9, r0, lsl #26
    95d4:	0000590f 	andeq	r5, r0, pc, lsl #18
    95d8:	00010100 	andeq	r0, r1, r0, lsl #2
    95dc:	011b0000 	tsteq	fp, r0
    95e0:	04018c0d 	streq	r8, [r1], #-3085	; 0xfffff3f3
    95e4:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    95e8:	0025c622 	eoreq	ip, r5, r2, lsr #12
    95ec:	018d0d00 	orreq	r0, sp, r0, lsl #26
    95f0:	0000590f 	andeq	r5, r0, pc, lsl #18
    95f4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    95f8:	271a2200 	ldrcs	r2, [sl, -r0, lsl #4]
    95fc:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    9600:	00590f01 	subseq	r0, r9, r1, lsl #30
    9604:	04010000 	streq	r0, [r1], #-0
    9608:	1b000000 	blne	9610 <__exidx_end+0x3a10>
    960c:	01900d01 	orrseq	r0, r0, r1, lsl #26
    9610:	00140c04 	andseq	r0, r4, r4, lsl #24
    9614:	23002200 	movwcs	r2, #512	; 0x200
    9618:	910d0000 	mrsls	r0, (UNDEF: 13)
    961c:	00590f01 	subseq	r0, r9, r1, lsl #30
    9620:	01010000 	mrseq	r0, (UNDEF: 1)
    9624:	ee220007 	cdp	0, 2, cr0, cr2, cr7, {0}
    9628:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    962c:	590f0193 	stmdbpl	pc, {r0, r1, r4, r7, r8}	; <UNPREDICTABLE>
    9630:	01000000 	mrseq	r0, (UNDEF: 0)
    9634:	00000601 	andeq	r0, r0, r1, lsl #12
    9638:	970d011b 	smladls	sp, fp, r1, r0
    963c:	147d0401 	ldrbtne	r0, [sp], #-1025	; 0xfffffbff
    9640:	a8220000 	stmdage	r2!, {}	; <UNPREDICTABLE>
    9644:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9648:	590f0198 	stmdbpl	pc, {r3, r4, r7, r8}	; <UNPREDICTABLE>
    964c:	01000000 	mrseq	r0, (UNDEF: 0)
    9650:	22000701 	andcs	r0, r0, #262144	; 0x40000
    9654:	000022f7 	strdeq	r2, [r0], -r7
    9658:	0f01990d 	svceq	0x0001990d
    965c:	00000059 	andeq	r0, r0, r9, asr r0
    9660:	00060101 	andeq	r0, r6, r1, lsl #2
    9664:	00115f22 	andseq	r5, r1, r2, lsr #30
    9668:	019a0d00 	orrseq	r0, sl, r0, lsl #26
    966c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9670:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    9674:	23a72200 			; <UNDEFINED> instruction: 0x23a72200
    9678:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    967c:	00590f01 	subseq	r0, r9, r1, lsl #30
    9680:	01010000 	mrseq	r0, (UNDEF: 1)
    9684:	2d220004 	stccs	0, cr0, [r2, #-16]!
    9688:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    968c:	590f019f 	stmdbpl	pc, {r0, r1, r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    9690:	01000000 	mrseq	r0, (UNDEF: 0)
    9694:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    9698:	00002381 	andeq	r2, r0, r1, lsl #7
    969c:	0f01a10d 	svceq	0x0001a10d
    96a0:	00000059 	andeq	r0, r0, r9, asr r0
    96a4:	00020101 	andeq	r0, r2, r1, lsl #2
    96a8:	0d011b00 	vstreq	d1, [r1, #-0]
    96ac:	aa0401aa 	bge	109d5c <__ccfg+0xe9db4>
    96b0:	22000014 	andcs	r0, r0, #20
    96b4:	000020f1 	strdeq	r2, [r0], -r1
    96b8:	0f01ab0d 	svceq	0x0001ab0d
    96bc:	00000059 	andeq	r0, r0, r9, asr r0
    96c0:	00040401 	andeq	r0, r4, r1, lsl #8
    96c4:	0021d122 	eoreq	sp, r1, r2, lsr #2
    96c8:	01ad0d00 			; <UNDEFINED> instruction: 0x01ad0d00
    96cc:	0000590f 	andeq	r5, r0, pc, lsl #18
    96d0:	00040100 	andeq	r0, r4, r0, lsl #2
    96d4:	011b0000 	tsteq	fp, r0
    96d8:	0401b00d 	streq	fp, [r1], #-13
    96dc:	000014f9 	strdeq	r1, [r0], -r9
    96e0:	00274b22 	eoreq	r4, r7, r2, lsr #22
    96e4:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
    96e8:	0000590f 	andeq	r5, r0, pc, lsl #18
    96ec:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    96f0:	20e92200 	rsccs	r2, r9, r0, lsl #4
    96f4:	b20d0000 	andlt	r0, sp, #0
    96f8:	00590f01 	subseq	r0, r9, r1, lsl #30
    96fc:	01010000 	mrseq	r0, (UNDEF: 1)
    9700:	a9220003 	stmdbge	r2!, {r0, r1}
    9704:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9708:	590f01b4 	stmdbpl	pc, {r2, r4, r5, r7, r8}	; <UNPREDICTABLE>
    970c:	01000000 	mrseq	r0, (UNDEF: 0)
    9710:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    9714:	00001f64 	andeq	r1, r0, r4, ror #30
    9718:	0f01b50d 	svceq	0x0001b50d
    971c:	00000059 	andeq	r0, r0, r9, asr r0
    9720:	00000101 	andeq	r0, r0, r1, lsl #2
    9724:	0d011b00 	vstreq	d1, [r1, #-0]
    9728:	48040222 	stmdami	r4, {r1, r5, r9}
    972c:	22000015 	andcs	r0, r0, #21
    9730:	0000274b 	andeq	r2, r0, fp, asr #14
    9734:	0f02230d 	svceq	0x0002230d
    9738:	00000059 	andeq	r0, r0, r9, asr r0
    973c:	00040401 	andeq	r0, r4, r1, lsl #8
    9740:	0020e922 	eoreq	lr, r0, r2, lsr #18
    9744:	02240d00 	eoreq	r0, r4, #0, 26
    9748:	0000590f 	andeq	r5, r0, pc, lsl #18
    974c:	03010100 	movweq	r0, #4352	; 0x1100
    9750:	21a92200 			; <UNDEFINED> instruction: 0x21a92200
    9754:	260d0000 	strcs	r0, [sp], -r0
    9758:	00590f02 	subseq	r0, r9, r2, lsl #30
    975c:	02010000 	andeq	r0, r1, #0
    9760:	64220001 	strtvs	r0, [r2], #-1
    9764:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9768:	590f0227 	stmdbpl	pc, {r0, r1, r2, r5, r9}	; <UNPREDICTABLE>
    976c:	01000000 	mrseq	r0, (UNDEF: 0)
    9770:	00000001 	andeq	r0, r0, r1
    9774:	2a0d011b 	bcs	349be8 <__ccfg+0x329c40>
    9778:	15750402 	ldrbne	r0, [r5, #-1026]!	; 0xfffffbfe
    977c:	c6220000 	strtgt	r0, [r2], -r0
    9780:	0d000025 	stceq	0, cr0, [r0, #-148]	; 0xffffff6c
    9784:	590f022b 	stmdbpl	pc, {r0, r1, r3, r5, r9}	; <UNPREDICTABLE>
    9788:	01000000 	mrseq	r0, (UNDEF: 0)
    978c:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    9790:	0000271a 	andeq	r2, r0, sl, lsl r7
    9794:	0f022c0d 	svceq	0x00022c0d
    9798:	00000059 	andeq	r0, r0, r9, asr r0
    979c:	00000401 	andeq	r0, r0, r1, lsl #8
    97a0:	0d021b00 	vstreq	d1, [r2, #-0]
    97a4:	a204022e 	andge	r0, r4, #-536870910	; 0xe0000002
    97a8:	22000015 	andcs	r0, r0, #21
    97ac:	00002201 	andeq	r2, r0, r1, lsl #4
    97b0:	10022f0d 	andne	r2, r2, sp, lsl #30
    97b4:	0000006c 	andeq	r0, r0, ip, rrx
    97b8:	000d0302 	andeq	r0, sp, r2, lsl #6
    97bc:	0026fd22 	eoreq	pc, r6, r2, lsr #26
    97c0:	02320d00 	eorseq	r0, r2, #0, 26
    97c4:	00006c10 	andeq	r6, r0, r0, lsl ip
    97c8:	000d0200 	andeq	r0, sp, r0, lsl #4
    97cc:	041b0000 	ldreq	r0, [fp], #-0
    97d0:	0402340d 	streq	r3, [r2], #-1037	; 0xfffffbf3
    97d4:	000015cf 	andeq	r1, r0, pc, asr #11
    97d8:	00239622 	eoreq	r9, r3, r2, lsr #12
    97dc:	02350d00 	eorseq	r0, r5, #0, 26
    97e0:	00007f10 	andeq	r7, r0, r0, lsl pc
    97e4:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    97e8:	24a62200 	strtcs	r2, [r6], #512	; 0x200
    97ec:	370d0000 	strcc	r0, [sp, -r0]
    97f0:	007f1002 	rsbseq	r1, pc, r2
    97f4:	15040000 	strne	r0, [r4, #-0]
    97f8:	1b000003 	blne	980c <__exidx_end+0x3c0c>
    97fc:	023a0d01 	eorseq	r0, sl, #1, 26	; 0x40
    9800:	0015fc04 	andseq	pc, r5, r4, lsl #24
    9804:	25f22200 	ldrbcs	r2, [r2, #512]!	; 0x200
    9808:	3b0d0000 	blcc	349810 <__ccfg+0x329868>
    980c:	00590f02 	subseq	r0, r9, r2, lsl #30
    9810:	06010000 	streq	r0, [r1], -r0
    9814:	bc220002 	stclt	0, cr0, [r2], #-8
    9818:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    981c:	590f023d 	stmdbpl	pc, {r0, r2, r3, r4, r5, r9}	; <UNPREDICTABLE>
    9820:	01000000 	mrseq	r0, (UNDEF: 0)
    9824:	00000002 	andeq	r0, r0, r2
    9828:	420d021b 	andmi	r0, sp, #-1342177279	; 0xb0000001
    982c:	165c0402 	ldrbne	r0, [ip], -r2, lsl #8
    9830:	9f220000 	svcls	0x00220000
    9834:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    9838:	6c100243 	lfmvs	f0, 4, [r0], {67}	; 0x43
    983c:	02000000 	andeq	r0, r0, #0
    9840:	22000a06 	andcs	r0, r0, #24576	; 0x6000
    9844:	0000223b 	andeq	r2, r0, fp, lsr r2
    9848:	1002440d 	andne	r4, r2, sp, lsl #8
    984c:	0000006c 	andeq	r0, r0, ip, rrx
    9850:	00090102 	andeq	r0, r9, r2, lsl #2
    9854:	00240722 	eoreq	r0, r4, r2, lsr #14
    9858:	02460d00 	subeq	r0, r6, #0, 26
    985c:	00006c10 	andeq	r6, r0, r0, lsl ip
    9860:	08010200 	stmdaeq	r1, {r9}
    9864:	1fa42200 	svcne	0x00a42200
    9868:	480d0000 	stmdami	sp, {}	; <UNPREDICTABLE>
    986c:	006c1002 	rsbeq	r1, ip, r2
    9870:	04020000 	streq	r0, [r2], #-0
    9874:	47220004 	strmi	r0, [r2, -r4]!
    9878:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    987c:	6c10024d 	lfmvs	f0, 4, [r0], {77}	; 0x4d
    9880:	02000000 	andeq	r0, r0, #0
    9884:	00000003 	andeq	r0, r0, r3
    9888:	560d021b 			; <UNDEFINED> instruction: 0x560d021b
    988c:	16ab0402 	strtne	r0, [fp], r2, lsl #8
    9890:	9c220000 	stcls	0, cr0, [r2], #-0
    9894:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9898:	6c100257 	lfmvs	f0, 4, [r0], {87}	; 0x57
    989c:	02000000 	andeq	r0, r0, #0
    98a0:	22000d03 	andcs	r0, r0, #3, 26	; 0xc0
    98a4:	0000213b 	andeq	r2, r0, fp, lsr r1
    98a8:	10025d0d 	andne	r5, r2, sp, lsl #26
    98ac:	0000006c 	andeq	r0, r0, ip, rrx
    98b0:	000c0102 	andeq	r0, ip, r2, lsl #2
    98b4:	0020db22 	eoreq	sp, r0, r2, lsr #22
    98b8:	025f0d00 	subseq	r0, pc, #0, 26
    98bc:	00006c10 	andeq	r6, r0, r0, lsl ip
    98c0:	06060200 	streq	r0, [r6], -r0, lsl #4
    98c4:	23da2200 	bicscs	r2, sl, #0, 4
    98c8:	660d0000 	strvs	r0, [sp], -r0
    98cc:	006c1002 	rsbeq	r1, ip, r2
    98d0:	01020000 	mrseq	r0, (UNDEF: 2)
    98d4:	02000005 	andeq	r0, r0, #5
    98d8:	00002562 	andeq	r2, r0, r2, ror #10
    98dc:	b7343c0e 	ldrlt	r3, [r4, -lr, lsl #24]!
    98e0:	0f000016 	svceq	0x00000016
    98e4:	0000254b 	andeq	r2, r0, fp, asr #10
    98e8:	155e0e0c 	ldrbne	r0, [lr, #-3596]	; 0xfffff1f4
    98ec:	00001706 	andeq	r1, r0, r6, lsl #14
    98f0:	0020120d 	eoreq	r1, r0, sp, lsl #4
    98f4:	0d5f0e00 	ldcleq	14, cr0, [pc, #-0]	; 98fc <__exidx_end+0x3cfc>
    98f8:	00000984 	andeq	r0, r0, r4, lsl #19
    98fc:	07680d00 	strbeq	r0, [r8, -r0, lsl #26]!
    9900:	600e0000 	andvs	r0, lr, r0
    9904:	0000590c 	andeq	r5, r0, ip, lsl #18
    9908:	5f0d0400 	svcpl	0x000d0400
    990c:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    9910:	1706066e 	strne	r0, [r6, -lr, ror #12]
    9914:	0d050000 	stceq	0, cr0, [r5, #-0]
    9918:	000018d5 	ldrdeq	r1, [r0], -r5
    991c:	6c0d6f0e 	stcvs	15, cr6, [sp], {14}
    9920:	06000000 	streq	r0, [r0], -r0
    9924:	0047360d 	subeq	r3, r7, sp, lsl #12
    9928:	0c710e00 	ldcleq	14, cr0, [r1], #-0
    992c:	00000059 	andeq	r0, r0, r9, asr r0
    9930:	010c0008 	tsteq	ip, r8
    9934:	4004610e 	andmi	r6, r4, lr, lsl #2
    9938:	21000017 	tstcs	r0, r7, lsl r0
    993c:	00005348 	andeq	r5, r0, r8, asr #6
    9940:	590f620e 	stmdbpl	pc, {r1, r2, r3, r9, sp, lr}	; <UNPREDICTABLE>
    9944:	01000000 	mrseq	r0, (UNDEF: 0)
    9948:	21000602 	tstcs	r0, r2, lsl #12
    994c:	00002523 	andeq	r2, r0, r3, lsr #10
    9950:	590f670e 	stmdbpl	pc, {r1, r2, r3, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
    9954:	01000000 	mrseq	r0, (UNDEF: 0)
    9958:	21000402 	tstcs	r0, r2, lsl #8
    995c:	00001fdb 	ldrdeq	r1, [r0], -fp
    9960:	590f6c0e 	stmdbpl	pc, {r1, r2, r3, sl, fp, sp, lr}	; <UNPREDICTABLE>
    9964:	01000000 	mrseq	r0, (UNDEF: 0)
    9968:	00000004 	andeq	r0, r0, r4
    996c:	4802100c 	stmdami	r2, {r2, r3, ip}
    9970:	00177e09 	andseq	r7, r7, r9, lsl #28
    9974:	21610d00 	cmncs	r1, r0, lsl #26
    9978:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    997c:	00007f0d 	andeq	r7, r0, sp, lsl #30
    9980:	c20d0000 	andgt	r0, sp, #0
    9984:	02000020 	andeq	r0, r0, #32
    9988:	007f0d4a 	rsbseq	r0, pc, sl, asr #26
    998c:	0d040000 	stceq	0, cr0, [r4, #-0]
    9990:	0000250d 	andeq	r2, r0, sp, lsl #10
    9994:	7f0d4b02 	svcvc	0x000d4b02
    9998:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    999c:	0026600d 	eoreq	r6, r6, sp
    99a0:	0d4c0200 	sfmeq	f0, 2, [ip, #-0]
    99a4:	0000007f 	andeq	r0, r0, pc, ror r0
    99a8:	6d02000c 	stcvs	0, cr0, [r2, #-48]	; 0xffffffd0
    99ac:	0200001f 	andeq	r0, r0, #31
    99b0:	1740034d 	strbne	r0, [r0, -sp, asr #6]
    99b4:	8b0a0000 	blhi	2899bc <__ccfg+0x269a14>
    99b8:	9a000000 	bls	99c0 <__exidx_end+0x3dc0>
    99bc:	0b000017 	bleq	9a20 <__exidx_end+0x3e20>
    99c0:	000000aa 	andeq	r0, r0, sl, lsr #1
    99c4:	8a0400a2 	bhi	109c54 <__ccfg+0xe9cac>
    99c8:	23000017 	movwcs	r0, #23
    99cc:	000022a5 	andeq	r2, r0, r5, lsr #5
    99d0:	9a104904 	bls	41bde8 <__ccfg+0x3fbe40>
    99d4:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    99d8:	00593003 	subseq	r3, r9, r3
    99dc:	008b0a00 	addeq	r0, fp, r0, lsl #20
    99e0:	17c20000 	strbne	r0, [r2, r0]
    99e4:	aa240000 	bge	9099ec <__ccfg+0x8e9a44>
    99e8:	ac000000 	stcge	0, cr0, [r0], {-0}
    99ec:	b1040001 	tstlt	r4, r1
    99f0:	23000017 	movwcs	r0, #23
    99f4:	0000232e 	andeq	r2, r0, lr, lsr #6
    99f8:	c2103a05 	andsgt	r3, r0, #20480	; 0x5000
    99fc:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9a00:	00527c03 	subseq	r7, r2, r3, lsl #24
    9a04:	28dd0200 	ldmcs	sp, {r9}^
    9a08:	270f0000 	strcs	r0, [pc, -r0]
    9a0c:	00006c12 	andeq	r6, r0, r2, lsl ip
    9a10:	17d90400 	ldrbne	r0, [r9, r0, lsl #8]
    9a14:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    9a18:	02000017 	andeq	r0, r0, #23
    9a1c:	00001da4 	andeq	r1, r0, r4, lsr #27
    9a20:	59122b0f 	ldmdbpl	r2, {r0, r1, r2, r3, r8, r9, fp, sp}
    9a24:	05000000 	streq	r0, [r0, #-0]
    9a28:	000017ef 	andeq	r1, r0, pc, ror #15
    9a2c:	00292f02 	eoreq	r2, r9, r2, lsl #30
    9a30:	122c0f00 	eorne	r0, ip, #0, 30
    9a34:	0000007f 	andeq	r0, r0, pc, ror r0
    9a38:	00180004 	andseq	r0, r8, r4
    9a3c:	06360200 	ldrteq	r0, [r6], -r0, lsl #4
    9a40:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 9a48 <__exidx_end+0x3e48>
    9a44:	00007f12 	andeq	r7, r0, r2, lsl pc
    9a48:	0ba40200 	bleq	fe90a250 <_estack+0xde905250>
    9a4c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    9a50:	00182910 	andseq	r2, r8, r0, lsl r9
    9a54:	d9041100 	stmdble	r4, {r8, ip}
    9a58:	0c000017 	stceq	0, cr0, [r0], {23}
    9a5c:	09320f08 	ldmdbeq	r2!, {r3, r8, r9, sl, fp}
    9a60:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    9a64:	00002b21 	andeq	r2, r0, r1, lsr #22
    9a68:	07340f00 	ldreq	r0, [r4, -r0, lsl #30]!
    9a6c:	000017ef 	andeq	r1, r0, pc, ror #15
    9a70:	00070101 	andeq	r0, r7, r1, lsl #2
    9a74:	00063c21 	andeq	r3, r6, r1, lsr #24
    9a78:	03350f00 	teqeq	r5, #0, 30
    9a7c:	000017ef 	andeq	r1, r0, pc, ror #15
    9a80:	00060101 	andeq	r0, r6, r1, lsl #2
    9a84:	0002de21 	andeq	sp, r2, r1, lsr #28
    9a88:	03360f00 	teqeq	r6, #0, 30
    9a8c:	000017ef 	andeq	r1, r0, pc, ror #15
    9a90:	00050101 	andeq	r0, r5, r1, lsl #2
    9a94:	0006a721 	andeq	sl, r6, r1, lsr #14
    9a98:	03370f00 	teqeq	r7, #0, 30
    9a9c:	000017ef 	andeq	r1, r0, pc, ror #15
    9aa0:	00040101 	andeq	r0, r4, r1, lsl #2
    9aa4:	000a8f21 	andeq	r8, sl, r1, lsr #30
    9aa8:	03380f00 	teqeq	r8, #0, 30
    9aac:	000017ef 	andeq	r1, r0, pc, ror #15
    9ab0:	00000401 	andeq	r0, r0, r1, lsl #8
    9ab4:	00064b0d 	andeq	r4, r6, sp, lsl #22
    9ab8:	073a0f00 	ldreq	r0, [sl, -r0, lsl #30]!
    9abc:	000017ef 	andeq	r1, r0, pc, ror #15
    9ac0:	08eb0d01 	stmiaeq	fp!, {r0, r8, sl, fp}^
    9ac4:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    9ac8:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9acc:	1c0d0200 	sfmne	f0, 4, [sp], {-0}
    9ad0:	0f00000f 	svceq	0x0000000f
    9ad4:	17ef033d 			; <UNDEFINED> instruction: 0x17ef033d
    9ad8:	0d030000 	stceq	0, cr0, [r3, #-0]
    9adc:	00000903 	andeq	r0, r0, r3, lsl #18
    9ae0:	00083f0f 	andeq	r3, r8, pc, lsl #30
    9ae4:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    9ae8:	03140200 	tsteq	r4, #0, 4
    9aec:	410f0000 	mrsmi	r0, CPSR
    9af0:	00182f03 	andseq	r2, r8, r3, lsl #30
    9af4:	18bd0500 	popne	{r8, sl}
    9af8:	ae250000 	cdpge	0, 2, cr0, cr5, cr0, {0}
    9afc:	0f000006 	svceq	0x00000006
    9b00:	18c91a43 	stmiane	r9, {r0, r1, r6, r9, fp, ip}^
    9b04:	01010000 	mrseq	r0, (UNDEF: 1)
    9b08:	00019725 	andeq	r9, r1, r5, lsr #14
    9b0c:	0e450f00 	cdpeq	15, 4, cr0, cr5, cr0, {0}
    9b10:	000005eb 	andeq	r0, r0, fp, ror #11
    9b14:	1d250101 	stfnes	f0, [r5, #-4]!
    9b18:	0f000003 	svceq	0x00000003
    9b1c:	05eb1e45 	strbeq	r1, [fp, #3653]!	; 0xe45
    9b20:	01010000 	mrseq	r0, (UNDEF: 1)
    9b24:	8f10080c 	svchi	0x0010080c
    9b28:	00192909 	andseq	r2, r9, r9, lsl #18
    9b2c:	0cba0d00 	ldceq	13, cr0, [sl]
    9b30:	90100000 	andsls	r0, r0, r0
    9b34:	00007f0b 	andeq	r7, r0, fp, lsl #30
    9b38:	570d0000 	strpl	r0, [sp, -r0]
    9b3c:	10000010 	andne	r0, r0, r0, lsl r0
    9b40:	17d90891 	bfine	r0, r1, #17, #9
    9b44:	0d040000 	stceq	0, cr0, [r4, #-0]
    9b48:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    9b4c:	fb109210 	blx	42e396 <__ccfg+0x40e3ee>
    9b50:	06000017 			; <UNDEFINED> instruction: 0x06000017
    9b54:	0cae0200 	sfmeq	f0, 4, [lr]
    9b58:	93100000 	tstls	r0, #0
    9b5c:	0018f803 	andseq	pc, r8, r3, lsl #16
    9b60:	19290a00 	stmdbne	r9!, {r9, fp}
    9b64:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    9b68:	00260000 	eoreq	r0, r6, r0
    9b6c:	00092d25 	andeq	r2, r9, r5, lsr #26
    9b70:	0f991000 	svceq	0x00991000
    9b74:	00001935 	andeq	r1, r0, r5, lsr r9
    9b78:	010c0101 	tsteq	ip, r1, lsl #2
    9b7c:	78099111 	stmdavc	r9, {r0, r4, r8, ip, pc}
    9b80:	21000019 	tstcs	r0, r9, lsl r0
    9b84:	0000090a 	andeq	r0, r0, sl, lsl #18
    9b88:	ef079311 	svc	0x00079311
    9b8c:	01000017 	tsteq	r0, r7, lsl r0
    9b90:	21000107 	tstcs	r0, r7, lsl #2
    9b94:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    9b98:	ef039411 	svc	0x00039411
    9b9c:	01000017 	tsteq	r0, r7, lsl r0
    9ba0:	00000001 	andeq	r0, r0, r1
    9ba4:	000a9b02 	andeq	r9, sl, r2, lsl #22
    9ba8:	03961100 	orrseq	r1, r6, #0, 2
    9bac:	0000194e 	andeq	r1, r0, lr, asr #18
    9bb0:	00197804 	andseq	r7, r9, r4, lsl #16
    9bb4:	19840a00 	stmibne	r4, {r9, fp}
    9bb8:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    9bbc:	00260000 	eoreq	r0, r6, r0
    9bc0:	00198904 	andseq	r8, r9, r4, lsl #18
    9bc4:	03a12500 			; <UNDEFINED> instruction: 0x03a12500
    9bc8:	9c110000 	ldcls	0, cr0, [r1], {-0}
    9bcc:	00199417 	andseq	r9, r9, r7, lsl r4
    9bd0:	0a010100 	beq	49fd8 <__ccfg+0x2a030>
    9bd4:	000017e5 	andeq	r1, r0, r5, ror #15
    9bd8:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    9bdc:	a7040026 	strge	r0, [r4, -r6, lsr #32]
    9be0:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    9be4:	000005fe 	strdeq	r0, [r0], -lr
    9be8:	b2130612 	andslt	r0, r3, #18874368	; 0x1200000
    9bec:	01000019 	tsteq	r0, r9, lsl r0
    9bf0:	08cd2501 	stmiaeq	sp, {r0, r8, sl, sp}^
    9bf4:	c3100000 	tstgt	r0, #0
    9bf8:	0018000e 	andseq	r0, r8, lr
    9bfc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9c00:	00000c62 	andeq	r0, r0, r2, ror #24
    9c04:	10016e13 	andne	r6, r1, r3, lsl lr
    9c08:	000019e0 	andeq	r1, r0, r0, ror #19
    9c0c:	19e60411 	stmibne	r6!, {r0, r4, sl}^
    9c10:	011f0000 	tsteq	pc, r0
    9c14:	000019f2 	strdeq	r1, [r0], -r2
    9c18:	0017d916 	andseq	sp, r7, r6, lsl r9
    9c1c:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    9c20:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    9c24:	26000019 			; <UNDEFINED> instruction: 0x26000019
    9c28:	19f20400 	ldmibne	r2!, {sl}^
    9c2c:	d6200000 	strtle	r0, [r0], -r0
    9c30:	13000009 	movwne	r0, #9
    9c34:	fd16017f 	ldc2	1, cr0, [r6, #-508]	; 0xfffffe04
    9c38:	01000019 	tsteq	r0, r9, lsl r0
    9c3c:	038d2001 	orreq	r2, sp, #1
    9c40:	82130000 	andshi	r0, r3, #0
    9c44:	180c1401 	stmdane	ip, {r0, sl, ip}
    9c48:	01010000 	mrseq	r0, (UNDEF: 1)
    9c4c:	00036520 	andeq	r6, r3, r0, lsr #10
    9c50:	02d81300 	sbcseq	r1, r8, #0, 6
    9c54:	0018000e 	andseq	r0, r8, lr
    9c58:	1b010100 	blne	4a060 <__ccfg+0x2a0b8>
    9c5c:	03031308 	movweq	r1, #13064	; 0x3308
    9c60:	001a5609 	andseq	r5, sl, r9, lsl #12
    9c64:	3c831800 	stccc	8, cr1, [r3], {0}
    9c68:	07130000 	ldreq	r0, [r3, -r0]
    9c6c:	17d90703 	ldrbne	r0, [r9, r3, lsl #14]
    9c70:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9c74:	00000faf 	andeq	r0, r0, pc, lsr #31
    9c78:	08030813 	stmdaeq	r3, {r0, r1, r4, fp}
    9c7c:	00001811 	andeq	r1, r0, r1, lsl r8
    9c80:	f9070004 			; <UNDEFINED> instruction: 0xf9070004
    9c84:	13000009 	movwne	r0, #9
    9c88:	2f030309 	svccs	0x00030309
    9c8c:	1a00001a 	bne	9cfc <__exidx_end+0x40fc>
    9c90:	00000020 	andeq	r0, r0, r0, lsr #32
    9c94:	030b1330 	movweq	r1, #45872	; 0xb330
    9c98:	001ac608 	andseq	ip, sl, r8, lsl #12
    9c9c:	1f061800 	svcne	0x00061800
    9ca0:	14130000 	ldrne	r0, [r3], #-0
    9ca4:	17d90803 	ldrbne	r0, [r9, r3, lsl #16]
    9ca8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    9cac:	00000bd7 	ldrdeq	r0, [r0], -r7
    9cb0:	08031513 	stmdaeq	r3, {r0, r1, r4, r8, sl, ip}
    9cb4:	000017d9 	ldrdeq	r1, [r0], -r9
    9cb8:	4c701802 	ldclmi	8, cr1, [r0], #-8
    9cbc:	16130000 	ldrne	r0, [r3], -r0
    9cc0:	19d30b03 	ldmibne	r3, {r0, r1, r8, r9, fp}^
    9cc4:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    9cc8:	00004736 	andeq	r4, r0, r6, lsr r7
    9ccc:	09031713 	stmdbeq	r3, {r0, r1, r4, r8, r9, sl, ip}
    9cd0:	00001811 	andeq	r1, r0, r1, lsl r8
    9cd4:	000f1808 	andeq	r1, pc, r8, lsl #16
    9cd8:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    9cdc:	1ac60f03 	bne	ff18d8f0 <_estack+0xdf1888f0>
    9ce0:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    9ce4:	0000094d 	andeq	r0, r0, sp, asr #18
    9ce8:	15031913 	strne	r1, [r3, #-2323]	; 0xfffff6ed
    9cec:	00001ad6 	ldrdeq	r1, [r0], -r6
    9cf0:	560a002c 	strpl	r0, [sl], -ip, lsr #32
    9cf4:	d600001a 			; <UNDEFINED> instruction: 0xd600001a
    9cf8:	0b00001a 	bleq	9d68 <__exidx_end+0x4168>
    9cfc:	000000aa 	andeq	r0, r0, sl, lsr #1
    9d00:	04110003 	ldreq	r0, [r1], #-3
    9d04:	00001a63 	andeq	r1, r0, r3, ror #20
    9d08:	000bcc07 	andeq	ip, fp, r7, lsl #24
    9d0c:	031c1300 	tsteq	ip, #0, 6
    9d10:	001a631b 	andseq	r6, sl, fp, lsl r3
    9d14:	0bac2000 	bleq	feb11d1c <_estack+0xdeb0cd1c>
    9d18:	1e130000 	cdpne	0, 1, cr0, cr3, cr0, {0}
    9d1c:	1af81403 	bne	ffe0ed30 <_estack+0xdfe09d30>
    9d20:	01010000 	mrseq	r0, (UNDEF: 1)
    9d24:	1adc0411 	bne	ff70ad70 <_estack+0xdf705d70>
    9d28:	ff250000 			; <UNDEFINED> instruction: 0xff250000
    9d2c:	14000006 	strne	r0, [r0], #-6
    9d30:	17d9131d 	bfine	r1, sp, #6, #20
    9d34:	01010000 	mrseq	r0, (UNDEF: 1)
    9d38:	0002e525 	andeq	lr, r2, r5, lsr #10
    9d3c:	1a1e1400 	bne	78ed44 <__ccfg+0x76ed9c>
    9d40:	000017ea 	andeq	r1, r0, sl, ror #15
    9d44:	59250101 	stmdbpl	r5!, {r0, r8}
    9d48:	1400000c 	strne	r0, [r0], #-12
    9d4c:	17ea241e 			; <UNDEFINED> instruction: 0x17ea241e
    9d50:	01010000 	mrseq	r0, (UNDEF: 1)
    9d54:	000c7725 	andeq	r7, ip, r5, lsr #14
    9d58:	14221400 	strtne	r1, [r2], #-1024	; 0xfffffc00
    9d5c:	00001af8 	strdeq	r1, [r0], -r8
    9d60:	1d250101 	stfnes	f0, [r5, #-4]!
    9d64:	15000020 	strne	r0, [r0, #-32]	; 0xffffffe0
    9d68:	0f6d2739 	svceq	0x006d2739
    9d6c:	01010000 	mrseq	r0, (UNDEF: 1)
    9d70:	00230b25 	eoreq	r0, r3, r5, lsr #22
    9d74:	153a1500 	ldrne	r1, [sl, #-1280]!	; 0xfffffb00
    9d78:	000009fe 	strdeq	r0, [r0], -lr
    9d7c:	27250101 	strcs	r0, [r5, -r1, lsl #2]!
    9d80:	15000027 	strne	r0, [r0, #-39]	; 0xffffffd9
    9d84:	0cec1a3b 	vstmiaeq	ip!, {s3-s61}
    9d88:	01010000 	mrseq	r0, (UNDEF: 1)
    9d8c:	0025cb25 	eoreq	ip, r5, r5, lsr #22
    9d90:	1a3c1500 	bne	f0f198 <__ccfg+0xeef1f0>
    9d94:	00000d88 	andeq	r0, r0, r8, lsl #27
    9d98:	c8230101 	stmdagt	r3!, {r0, r8}
    9d9c:	01000026 	tsteq	r0, r6, lsr #32
    9da0:	00a30c24 	adceq	r0, r3, r4, lsr #24
    9da4:	03050000 	movweq	r0, #20480	; 0x5000
    9da8:	200005fc 	strdcs	r0, [r0], -ip
    9dac:	001f7623 	andseq	r7, pc, r3, lsr #12
    9db0:	0d260100 	stfeqs	f0, [r6, #-0]
    9db4:	000017ef 	andeq	r1, r0, pc, ror #15
    9db8:	06080305 	streq	r0, [r8], -r5, lsl #6
    9dbc:	e5232000 	str	r2, [r3, #-0]!
    9dc0:	01000015 	tsteq	r0, r5, lsl r0
    9dc4:	17ef0327 	strbne	r0, [pc, r7, lsr #6]!
    9dc8:	03050000 	movweq	r0, #20480	; 0x5000
    9dcc:	200005f8 	strdcs	r0, [r0], -r8
    9dd0:	0023ff23 	eoreq	pc, r3, r3, lsr #30
    9dd4:	0d2a0100 	stfeqs	f0, [sl, #-0]
    9dd8:	000017ef 	andeq	r1, r0, pc, ror #15
    9ddc:	062a0305 	strteq	r0, [sl], -r5, lsl #6
    9de0:	f9232000 			; <UNDEFINED> instruction: 0xf9232000
    9de4:	01000023 	tsteq	r0, r3, lsr #32
    9de8:	17ef0d43 	strbne	r0, [pc, r3, asr #26]!
    9dec:	03050000 	movweq	r0, #20480	; 0x5000
    9df0:	2000003a 	andcs	r0, r0, sl, lsr r0
    9df4:	00209623 	eoreq	r9, r0, r3, lsr #12
    9df8:	0d470100 	stfeqe	f0, [r7, #-0]
    9dfc:	000017ef 	andeq	r1, r0, pc, ror #15
    9e00:	05f00305 	ldrbeq	r0, [r0, #773]!	; 0x305
    9e04:	e50a2000 	str	r2, [sl, #-0]
    9e08:	ea000017 	b	9e6c <__exidx_end+0x426c>
    9e0c:	0b00001b 	bleq	9e80 <__exidx_end+0x4280>
    9e10:	000000aa 	andeq	r0, r0, sl, lsr #1
    9e14:	da040007 	ble	109e38 <__ccfg+0xe9e90>
    9e18:	2300001b 	movwcs	r0, #27
    9e1c:	00002487 	andeq	r2, r0, r7, lsl #9
    9e20:	ea134e01 	b	4dd62c <__ccfg+0x4bd684>
    9e24:	0500001b 	streq	r0, [r0, #-27]	; 0xffffffe5
    9e28:	00526a03 	subseq	r6, r2, r3, lsl #20
    9e2c:	27202300 	strcs	r2, [r0, -r0, lsl #6]!
    9e30:	52010000 	andpl	r0, r1, #0
    9e34:	0017d90d 	andseq	sp, r7, sp, lsl #18
    9e38:	00030500 	andeq	r0, r3, r0, lsl #10
    9e3c:	23200006 			; <UNDEFINED> instruction: 0x23200006
    9e40:	000023b8 			; <UNDEFINED> instruction: 0x000023b8
    9e44:	d9035301 	stmdble	r3, {r0, r8, r9, ip, lr}
    9e48:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9e4c:	00062803 	andeq	r2, r6, r3, lsl #16
    9e50:	25fe2320 	ldrbcs	r2, [lr, #800]!	; 0x320
    9e54:	54010000 	strpl	r0, [r1], #-0
    9e58:	0017d903 	andseq	sp, r7, r3, lsl #18
    9e5c:	ee030500 	cfsh32	mvfx0, mvfx3, #0
    9e60:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9e64:	00001fb3 			; <UNDEFINED> instruction: 0x00001fb3
    9e68:	d9035501 	stmdble	r3, {r0, r8, sl, ip, lr}
    9e6c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9e70:	00003803 	andeq	r3, r0, r3, lsl #16
    9e74:	01040c20 	tsteq	r4, r0, lsr #24
    9e78:	1c6b0959 			; <UNDEFINED> instruction: 0x1c6b0959
    9e7c:	70100000 	andsvc	r0, r0, r0
    9e80:	5a010073 	bpl	4a054 <__ccfg+0x2a0ac>
    9e84:	0017d908 	andseq	sp, r7, r8, lsl #18
    9e88:	72100000 	andsvc	r0, r0, #0
    9e8c:	5b010077 	blpl	4a070 <__ccfg+0x2a0c8>
    9e90:	0017d904 	andseq	sp, r7, r4, lsl #18
    9e94:	02000200 	andeq	r0, r0, #0, 4
    9e98:	00002347 	andeq	r2, r0, r7, asr #6
    9e9c:	49035c01 	stmdbmi	r3, {r0, sl, fp, ip, lr}
    9ea0:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    9ea4:	00001c6b 	andeq	r1, r0, fp, ror #24
    9ea8:	001c770a 	andseq	r7, ip, sl, lsl #14
    9eac:	001c8c00 	andseq	r8, ip, r0, lsl #24
    9eb0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    9eb4:	00020000 	andeq	r0, r2, r0
    9eb8:	001c7c04 	andseq	r7, ip, r4, lsl #24
    9ebc:	23792300 	cmncs	r9, #0, 6
    9ec0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    9ec4:	001c8c18 	andseq	r8, ip, r8, lsl ip
    9ec8:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    9ecc:	2300005b 	movwcs	r0, #91	; 0x5b
    9ed0:	000024af 	andeq	r2, r0, pc, lsr #9
    9ed4:	761b6601 	ldrvc	r6, [fp], -r1, lsl #12
    9ed8:	05000010 	streq	r0, [r0, #-16]
    9edc:	00061c03 	andeq	r1, r6, r3, lsl #24
    9ee0:	25ea2320 	strbcs	r2, [sl, #800]!	; 0x320
    9ee4:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    9ee8:	0018110e 	andseq	r1, r8, lr, lsl #2
    9eec:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    9ef0:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9ef4:	00002035 	andeq	r2, r0, r5, lsr r0
    9ef8:	11176901 	tstne	r7, r1, lsl #18
    9efc:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    9f00:	00060403 	andeq	r0, r6, r3, lsl #8
    9f04:	26512320 	ldrbcs	r2, [r1], -r0, lsr #6
    9f08:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    9f0c:	000ac121 	andeq	ip, sl, r1, lsr #2
    9f10:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    9f14:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    9f18:	000021c2 	andeq	r2, r0, r2, asr #3
    9f1c:	721a8301 	andsvc	r8, sl, #67108864	; 0x4000000
    9f20:	0500000e 	streq	r0, [r0, #-14]
    9f24:	00000803 	andeq	r0, r0, r3, lsl #16
    9f28:	1f132320 	svcne	0x00132320
    9f2c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    9f30:	00177e11 	andseq	r7, r7, r1, lsl lr
    9f34:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
    9f38:	27200006 	strcs	r0, [r0, -r6]!
    9f3c:	00002519 	andeq	r2, r0, r9, lsl r5
    9f40:	0c020a01 			; <UNDEFINED> instruction: 0x0c020a01
    9f44:	000000a3 	andeq	r0, r0, r3, lsr #1
    9f48:	20440128 	subcs	r0, r4, r8, lsr #2
    9f4c:	d7010000 	strle	r0, [r1, -r0]
    9f50:	24010603 	strcs	r0, [r1], #-1539	; 0xfffff9fd
    9f54:	9800002f 	stmdals	r0, {r0, r1, r2, r3, r5}
    9f58:	01000030 	tsteq	r0, r0, lsr r0
    9f5c:	001da59c 	mulseq	sp, ip, r5
    9f60:	68702900 	ldmdavs	r0!, {r8, fp, sp}^
    9f64:	d7010079 	smlsdxle	r1, r9, r0, r0
    9f68:	00a31703 	adceq	r1, r3, r3, lsl #14
    9f6c:	28670000 	stmdacs	r7!, {}^	; <UNPREDICTABLE>
    9f70:	6d290000 	stcvs	0, cr0, [r9, #-0]
    9f74:	01007362 	tsteq	r0, r2, ror #6
    9f78:	a32003d7 			; <UNDEFINED> instruction: 0xa32003d7
    9f7c:	b1000000 	mrslt	r0, (UNDEF: 0)
    9f80:	2a000028 	bcs	a028 <__exidx_end+0x4428>
    9f84:	00001e35 	andeq	r1, r0, r5, lsr lr
    9f88:	00002f48 	andeq	r2, r0, r8, asr #30
    9f8c:	00000e70 	andeq	r0, r0, r0, ror lr
    9f90:	0203f001 	andeq	pc, r3, #1
    9f94:	00001d93 	muleq	r0, r3, sp
    9f98:	000e702b 	andeq	r7, lr, fp, lsr #32
    9f9c:	1e432c00 	cdpne	12, 4, cr2, cr3, cr0, {0}
    9fa0:	4e2d0000 	cdpmi	0, 2, cr0, cr13, cr0, {0}
    9fa4:	da00001e 	ble	a024 <__exidx_end+0x4424>
    9fa8:	2d000028 	stccs	0, cr0, [r0, #-160]	; 0xffffff60
    9fac:	00001e5a 	andeq	r1, r0, sl, asr lr
    9fb0:	000028f9 	strdeq	r2, [r0], -r9
    9fb4:	001e662d 	andseq	r6, lr, sp, lsr #12
    9fb8:	00292200 	eoreq	r2, r9, r0, lsl #4
    9fbc:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    9fc0:	00001fcc 	andeq	r1, r0, ip, asr #31
    9fc4:	00002ffe 	strdeq	r2, [r0], -lr
    9fc8:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
    9fcc:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    9fd0:	23272f00 			; <UNDEFINED> instruction: 0x23272f00
    9fd4:	4a010000 	bmi	49fdc <__ccfg+0x2a034>
    9fd8:	a3010c03 	movwge	r0, #7171	; 0x1c03
    9fdc:	e4000000 	str	r0, [r0], #-0
    9fe0:	74000027 	strvc	r0, [r0], #-39	; 0xffffffd9
    9fe4:	01000029 	tsteq	r0, r9, lsr #32
    9fe8:	001e359c 	mulseq	lr, ip, r5
    9fec:	706f2900 	rsbvc	r2, pc, r0, lsl #18
    9ff0:	4a010074 	bmi	4a1c8 <__ccfg+0x2a220>
    9ff4:	00a31803 	adceq	r1, r3, r3, lsl #16
    9ff8:	29560000 	ldmdbcs	r6, {}^	; <UNPREDICTABLE>
    9ffc:	76290000 	strtvc	r0, [r9], -r0
    a000:	01006c61 	tsteq	r0, r1, ror #24
    a004:	1d25034a 	stcne	3, cr0, [r5, #-296]!	; 0xfffffed8
    a008:	e2000018 	and	r0, r0, #24
    a00c:	30000029 	andcc	r0, r0, r9, lsr #32
    a010:	00746572 	rsbseq	r6, r4, r2, ror r5
    a014:	06034c01 	streq	r4, [r3], -r1, lsl #24
    a018:	000000a3 	andeq	r0, r0, r3, lsr #1
    a01c:	00002a9a 	muleq	r0, sl, sl
    a020:	0021dd31 	eoreq	sp, r1, r1, lsr sp
    a024:	03cf0100 	biceq	r0, pc, #0, 2
    a028:	00286c01 	eoreq	r6, r8, r1, lsl #24
    a02c:	23e73100 	mvncs	r3, #0, 2
    a030:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    a034:	28260103 	stmdacs	r6!, {r0, r1, r8}
    a038:	93310000 	teqls	r1, #0
    a03c:	01000025 	tsteq	r0, r5, lsr #32
    a040:	700103cd 	andvc	r0, r1, sp, asr #7
    a044:	32000028 	andcc	r0, r0, #40	; 0x28
    a048:	00002826 	andeq	r2, r0, r6, lsr #16
    a04c:	00002850 	andeq	r2, r0, r0, asr r8
    a050:	01006a30 	tsteq	r0, r0, lsr sl
    a054:	a3040359 	movwge	r0, #17241	; 0x4359
    a058:	e4000000 	str	r0, [r0], #-0
    a05c:	0000002a 	andeq	r0, r0, sl, lsr #32
    a060:	225c3300 	subscs	r3, ip, #0, 6
    a064:	07010000 	streq	r0, [r1, -r0]
    a068:	73010d03 	movwvc	r0, #7427	; 0x1d03
    a06c:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    a070:	0b010069 	bleq	4a21c <__ccfg+0x2a274>
    a074:	00a30603 	adceq	r0, r3, r3, lsl #12
    a078:	72340000 	eorsvc	r0, r4, #0
    a07c:	0c010065 	stceq	0, cr0, [r1], {101}	; 0x65
    a080:	1e731a03 	vaddne.f32	s3, s6, s6
    a084:	64340000 	ldrtvs	r0, [r4], #-0
    a088:	0c010061 	stceq	0, cr0, [r1], {97}	; 0x61
    a08c:	1e731f03 	cdpne	15, 7, cr1, cr3, cr3, {0}
    a090:	64340000 	ldrtvs	r0, [r4], #-0
    a094:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    a098:	1e732403 	cdpne	4, 7, cr2, cr3, cr3, {0}
    a09c:	11000000 	mrsne	r0, (UNDEF: 0)
    a0a0:	0016ab04 	andseq	sl, r6, r4, lsl #22
    a0a4:	50012800 	andpl	r2, r1, r0, lsl #16
    a0a8:	01000020 	tsteq	r0, r0, lsr #32
    a0ac:	0101020d 	tsteq	r1, sp, lsl #4
    a0b0:	00002cc4 	andeq	r2, r0, r4, asr #25
    a0b4:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
    a0b8:	1efd9c01 	cdpne	12, 15, cr9, cr13, cr1, {0}
    a0bc:	23350000 	teqcs	r5, #0
    a0c0:	0100000c 	tsteq	r0, ip
    a0c4:	d901020d 	stmdble	r1, {r0, r2, r3, r9}
    a0c8:	f7000017 			; <UNDEFINED> instruction: 0xf7000017
    a0cc:	3100002a 	tstcc	r0, sl, lsr #32
    a0d0:	00001f7d 	andeq	r1, r0, sp, ror pc
    a0d4:	01021601 	tsteq	r2, r1, lsl #12
    a0d8:	00002cd8 	ldrdeq	r2, [r0], -r8
    a0dc:	0020232e 	eoreq	r2, r0, lr, lsr #6
    a0e0:	002d3a00 	eoreq	r3, sp, r0, lsl #20
    a0e4:	000e1000 	andeq	r1, lr, r0
    a0e8:	02250100 	eoreq	r0, r5, #0, 2
    a0ec:	1ff32a04 	svcne	0x00f32a04
    a0f0:	2d3e0000 	ldccs	0, cr0, [lr, #-0]
    a0f4:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    a0f8:	26010000 	strcs	r0, [r1], -r0
    a0fc:	1eeb0402 	cdpne	4, 14, cr0, cr11, cr2, {0}
    a100:	282b0000 	stmdacs	fp!, {}	; <UNPREDICTABLE>
    a104:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
    a108:	00002001 	andeq	r2, r0, r1
    a10c:	00002b20 	andeq	r2, r0, r0, lsr #22
    a110:	00200d2c 	eoreq	r0, r0, ip, lsr #26
    a114:	36000000 	strcc	r0, [r0], -r0
    a118:	00002023 	andeq	r2, r0, r3, lsr #32
    a11c:	00002dc2 	andeq	r2, r0, r2, asr #27
    a120:	00002dcc 	andeq	r2, r0, ip, asr #27
    a124:	03026501 	movweq	r6, #9473	; 0x2501
    a128:	d8012800 	stmdale	r1, {fp, sp}
    a12c:	01000025 	tsteq	r0, r5, lsr #32
    a130:	010601ec 	smlatteq	r6, ip, r1, r0
    a134:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
    a138:	00002f24 	andeq	r2, r0, r4, lsr #30
    a13c:	1f629c01 	svcne	0x00629c01
    a140:	58370000 	ldmdapl	r7!, {}	; <UNPREDICTABLE>
    a144:	2f00000e 	svccs	0x0000000e
    a148:	3000001f 	andcc	r0, r0, pc, lsl r0
    a14c:	fe01006a 	cdp2	0, 0, cr0, cr1, cr10, {3}
    a150:	00a30201 	adceq	r0, r3, r1, lsl #4
    a154:	2b3f0000 	blcs	fca15c <__ccfg+0xfaa1b4>
    a158:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a15c:	000021d5 	ldrdeq	r2, [r0], -r5
    a160:	00002ec8 	andeq	r2, r0, r8, asr #29
    a164:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a168:	0201f801 	andeq	pc, r1, #65536	; 0x10000
    a16c:	00001f4a 	andeq	r1, r0, sl, asr #30
    a170:	0021e439 	eoreq	lr, r1, r9, lsr r4
    a174:	f23a0000 	vhadd.s<illegal width 64>	d0, d10, d0
    a178:	d2000021 	andle	r0, r0, #33	; 0x21
    a17c:	4000002e 	andmi	r0, r0, lr, lsr #32
    a180:	0100000e 	tsteq	r0, lr
    a184:	390201fb 	stmdbcc	r2, {r0, r1, r3, r4, r5, r6, r7, r8}
    a188:	00002200 	andeq	r2, r0, r0, lsl #4
    a18c:	173b0000 	ldrne	r0, [fp, -r0]!
    a190:	01000024 	tsteq	r0, r4, lsr #32
    a194:	f40d01b5 	vst4.32	{d0,d2,d4,d6}, [sp :256], r5
    a198:	c400002b 	strgt	r0, [r0], #-43	; 0xffffffd5
    a19c:	0100002c 	tsteq	r0, ip, lsr #32
    a1a0:	001fcc9c 	mulseq	pc, ip, ip	; <UNPREDICTABLE>
    a1a4:	62643000 	rsbvs	r3, r4, #0
    a1a8:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    a1ac:	001e731a 	andseq	r7, lr, sl, lsl r3
    a1b0:	002b5200 	eoreq	r5, fp, r0, lsl #4
    a1b4:	00693400 	rsbeq	r3, r9, r0, lsl #8
    a1b8:	0601b801 	streq	fp, [r1], -r1, lsl #16
    a1bc:	000000a3 	andeq	r0, r0, r3, lsr #1
    a1c0:	006c7030 	rsbeq	r7, ip, r0, lsr r0
    a1c4:	0901b801 	stmdbeq	r1, {r0, fp, ip, sp, pc}
    a1c8:	000000a3 	andeq	r0, r0, r3, lsr #1
    a1cc:	00002b94 	muleq	r0, r4, fp
    a1d0:	00726e30 	rsbseq	r6, r2, r0, lsr lr
    a1d4:	0d01b801 	stceq	8, cr11, [r1, #-4]
    a1d8:	000000a3 	andeq	r0, r0, r3, lsr #1
    a1dc:	00002ba7 	andeq	r2, r0, r7, lsr #23
    a1e0:	00220d3a 	eoreq	r0, r2, sl, lsr sp
    a1e4:	002bf400 	eoreq	pc, fp, r0, lsl #8
    a1e8:	000de000 	andeq	lr, sp, r0
    a1ec:	01c10100 	biceq	r0, r1, r0, lsl #2
    a1f0:	221b3902 	andscs	r3, fp, #32768	; 0x8000
    a1f4:	00000000 	andeq	r0, r0, r0
    a1f8:	00235c3c 	eoreq	r5, r3, ip, lsr ip
    a1fc:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    a200:	723d010d 	eorsvc	r0, sp, #1073741827	; 0x40000003
    a204:	01000023 	tsteq	r0, r3, lsr #32
    a208:	c40d01a0 	strgt	r0, [sp], #-416	; 0xfffffe60
    a20c:	e4000027 	str	r0, [r0], #-39	; 0xffffffd9
    a210:	01000027 	tsteq	r0, r7, lsr #32
    a214:	24113c9c 	ldrcs	r3, [r1], #-3228	; 0xfffff364
    a218:	95010000 	strls	r0, [r1, #-0]
    a21c:	33010d01 	movwcc	r0, #7425	; 0x1d01
    a220:	0000221f 	andeq	r2, r0, pc, lsl r2
    a224:	0d018001 	stceq	0, cr8, [r1, #-4]
    a228:	00201901 	eoreq	r1, r0, r1, lsl #18
    a22c:	65723400 	ldrbvs	r3, [r2, #-1024]!	; 0xfffffc00
    a230:	01840100 	orreq	r0, r4, r0, lsl #2
    a234:	001e731a 	andseq	r7, lr, sl, lsl r3
    a238:	00693400 	rsbeq	r3, r9, r0, lsl #8
    a23c:	06018501 	streq	r8, [r1], -r1, lsl #10
    a240:	000000a3 	andeq	r0, r0, r3, lsr #1
    a244:	22b63c00 	adcscs	r3, r6, #0, 24
    a248:	61010000 	mrsvs	r0, (UNDEF: 1)
    a24c:	3e010d01 	cdpcc	13, 0, cr0, cr1, cr1, {0}
    a250:	00001f0d 	andeq	r1, r0, sp, lsl #30
    a254:	010dff01 	tsteq	sp, r1, lsl #30	; <UNPREDICTABLE>
    a258:	001fe33f 	andseq	lr, pc, pc, lsr r3	; <UNPREDICTABLE>
    a25c:	0de20100 	stfeqe	f0, [r2]
    a260:	205f0101 	subscs	r0, pc, r1, lsl #2
    a264:	63400000 	movtvs	r0, #0
    a268:	0100646d 	tsteq	r0, sp, ror #8
    a26c:	0bc026e2 	bleq	ff013dfc <_estack+0xdf00edfc>
    a270:	db410000 	blle	104a278 <__ccfg+0x102a2d0>
    a274:	01000026 	tsteq	r0, r6, lsr #32
    a278:	180031e2 	stmdane	r0, {r1, r5, r6, r7, r8, ip, sp}
    a27c:	12410000 	subne	r0, r1, #0
    a280:	01000007 	tsteq	r0, r7
    a284:	18003ee2 	stmdane	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
    a288:	3f000000 	svccc	0x00000000
    a28c:	00001ee0 	andeq	r1, r0, r0, ror #29
    a290:	010dc501 	tsteq	sp, r1, lsl #10
    a294:	00209201 	eoreq	r9, r0, r1, lsl #4
    a298:	6d634000 	stclvs	0, cr4, [r3, #-0]
    a29c:	c5010064 	strgt	r0, [r1, #-100]	; 0xffffff9c
    a2a0:	0018001e 	andseq	r0, r8, lr, lsl r0
    a2a4:	65724200 	ldrbvs	r4, [r2, #-512]!	; 0xfffffe00
    a2a8:	ca010073 	bgt	4a47c <__ccfg+0x2a4d4>
    a2ac:	0000a306 	andeq	sl, r0, r6, lsl #6
    a2b0:	6e634200 	cdpvs	2, 6, cr4, cr3, cr0, {0}
    a2b4:	cd010074 	stcgt	0, cr0, [r1, #-464]	; 0xfffffe30
    a2b8:	0000a306 	andeq	sl, r0, r6, lsl #6
    a2bc:	a6430000 	strbge	r0, [r3], -r0
    a2c0:	03000012 	movweq	r0, #18
    a2c4:	01010154 	tsteq	r1, r4, asr r1
    a2c8:	0020af03 	eoreq	sl, r0, r3, lsl #30
    a2cc:	11034400 	tstne	r3, r0, lsl #8
    a2d0:	54030000 	strpl	r0, [r3], #-0
    a2d4:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    a2d8:	43000000 	movwmi	r0, #0
    a2dc:	000013b3 			; <UNDEFINED> instruction: 0x000013b3
    a2e0:	01011e03 	tsteq	r1, r3, lsl #28
    a2e4:	20cc0301 	sbccs	r0, ip, r1, lsl #6
    a2e8:	03440000 	movteq	r0, #16384	; 0x4000
    a2ec:	03000011 	movweq	r0, #17
    a2f0:	7f17011e 	svcvc	0x0017011e
    a2f4:	00000000 	andeq	r0, r0, r0
    a2f8:	00257943 	eoreq	r7, r5, r3, asr #18
    a2fc:	01ea0500 	mvneq	r0, r0, lsl #10
    a300:	61030115 	tstvs	r3, r5, lsl r1
    a304:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a308:	05005370 	streq	r5, [r0, #-880]	; 0xfffffc90
    a30c:	611401f2 			; <UNDEFINED> instruction: 0x611401f2
    a310:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a314:	05004470 	streq	r4, [r0, #-1136]	; 0xfffffb90
    a318:	671c01f3 			; <UNDEFINED> instruction: 0x671c01f3
    a31c:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    a320:	05003174 	streq	r3, [r0, #-372]	; 0xfffffe8c
    a324:	7f0d01f4 	svcvc	0x000d01f4
    a328:	34000000 	strcc	r0, [r0], #-0
    a32c:	05003274 	streq	r3, [r0, #-628]	; 0xfffffd8c
    a330:	7f1101f4 	svcvc	0x001101f4
    a334:	34000000 	strcc	r0, [r0], #-0
    a338:	05003374 	streq	r3, [r0, #-884]	; 0xfffffc8c
    a33c:	7f1501f4 	svcvc	0x001501f4
    a340:	34000000 	strcc	r0, [r0], #-0
    a344:	05003474 	streq	r3, [r0, #-1140]	; 0xfffffb8c
    a348:	7f1901f4 	svcvc	0x001901f4
    a34c:	34000000 	strcc	r0, [r0], #-0
    a350:	05003574 	streq	r3, [r0, #-1396]	; 0xfffffa8c
    a354:	7f1d01f4 	svcvc	0x001d01f4
    a358:	34000000 	strcc	r0, [r0], #-0
    a35c:	05003674 	streq	r3, [r0, #-1652]	; 0xfffff98c
    a360:	7f2101f4 	svcvc	0x002101f4
    a364:	34000000 	strcc	r0, [r0], #-0
    a368:	05003774 	streq	r3, [r0, #-1908]	; 0xfffff88c
    a36c:	7f2501f4 	svcvc	0x002501f4
    a370:	34000000 	strcc	r0, [r0], #-0
    a374:	05003874 	streq	r3, [r0, #-2164]	; 0xfffff78c
    a378:	7f2901f4 	svcvc	0x002901f4
    a37c:	27000000 	strcs	r0, [r0, -r0]
    a380:	000025b3 			; <UNDEFINED> instruction: 0x000025b3
    a384:	0d01f505 	cfstr32eq	mvfx15, [r1, #-20]	; 0xffffffec
    a388:	0000007f 	andeq	r0, r0, pc, ror r0
    a38c:	8b041100 	blhi	10e794 <__ccfg+0xee7ec>
    a390:	11000000 	mrsne	r0, (UNDEF: 0)
    a394:	00009704 	andeq	r9, r0, r4, lsl #14
    a398:	23bf4500 			; <UNDEFINED> instruction: 0x23bf4500
    a39c:	2f040000 	svccs	0x00040000
    a3a0:	03011501 	movweq	r1, #5377	; 0x1501
    a3a4:	00208545 	eoreq	r8, r0, r5, asr #10
    a3a8:	01220400 			; <UNDEFINED> instruction: 0x01220400
    a3ac:	43030115 	movwmi	r0, #12565	; 0x3115
    a3b0:	00001f32 	andeq	r1, r0, r2, lsr pc
    a3b4:	15011104 	strne	r1, [r1, #-260]	; 0xfffffefc
    a3b8:	21ad0301 			; <UNDEFINED> instruction: 0x21ad0301
    a3bc:	3e270000 	cdpcc	0, 2, cr0, cr7, cr0, {0}
    a3c0:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    a3c4:	840d0113 	strhi	r0, [sp], #-275	; 0xfffffeed
    a3c8:	27000009 	strcs	r0, [r0, -r9]
    a3cc:	000020fc 	strdeq	r2, [r0], -ip
    a3d0:	0e011404 	cdpeq	4, 0, cr1, cr1, cr4, {0}
    a3d4:	00000bc6 	andeq	r0, r0, r6, asr #23
    a3d8:	26e94500 	strbtcs	r4, [r9], r0, lsl #10
    a3dc:	0d040000 	stceq	0, cr0, [r4, #-0]
    a3e0:	03011501 	movweq	r1, #5377	; 0x1501
    a3e4:	00268243 	eoreq	r8, r6, r3, asr #4
    a3e8:	01040400 	tsteq	r4, r0, lsl #8
    a3ec:	d5030115 	strle	r0, [r3, #-277]	; 0xfffffeeb
    a3f0:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    a3f4:	00002106 	andeq	r2, r0, r6, lsl #2
    a3f8:	0e010604 	cfmadd32eq	mvax0, mvfx0, mvfx1, mvfx4
    a3fc:	00000bc6 	andeq	r0, r0, r6, asr #23
    a400:	23634300 	cmncs	r3, #0, 6
    a404:	1d020000 	stcne	0, cr0, [r2, #-0]
    a408:	03010101 	movweq	r0, #4353	; 0x1101
    a40c:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a410:	00222544 	eoreq	r2, r2, r4, asr #10
    a414:	011d0200 	tsteq	sp, r0, lsl #4
    a418:	00007f19 	andeq	r7, r0, r9, lsl pc
    a41c:	103f0000 	eorsne	r0, pc, r0
    a420:	02000021 	andeq	r0, r0, #33	; 0x21
    a424:	030101f7 	movweq	r0, #4599	; 0x11f7
    a428:	0000220d 	andeq	r2, r0, sp, lsl #4
    a42c:	00222541 	eoreq	r2, r2, r1, asr #10
    a430:	1bf70200 	blne	ffdcac38 <_estack+0xdfdc5c38>
    a434:	0000007f 	andeq	r0, r0, pc, ror r0
    a438:	21443f00 	cmpcs	r4, r0, lsl #30
    a43c:	aa020000 	bge	8a444 <__ccfg+0x6a49c>
    a440:	28030101 	stmdacs	r3, {r0, r8}
    a444:	41000022 	tstmi	r0, r2, lsr #32
    a448:	00002225 	andeq	r2, r0, r5, lsr #4
    a44c:	7f1baa02 	svcvc	0x001baa02
    a450:	00000000 	andeq	r0, r0, r0
    a454:	0024fd46 	eoreq	pc, r4, r6, asr #26
    a458:	019c0200 	orrseq	r0, ip, r0, lsl #4
    a45c:	3c460301 	mcrrcc	3, 0, r0, r6, cr1
    a460:	02000027 	andeq	r0, r0, #39	; 0x27
    a464:	03010179 	movweq	r0, #4473	; 0x1179
    a468:	00205f47 	eoreq	r5, r0, r7, asr #30
    a46c:	00297400 	eoreq	r7, r9, r0, lsl #8
    a470:	0029bc00 	eoreq	fp, r9, r0, lsl #24
    a474:	8b9c0100 	blhi	fe70a87c <_estack+0xde70587c>
    a478:	48000022 	stmdami	r0, {r1, r5}
    a47c:	0000206d 	andeq	r2, r0, sp, rrx
    a480:	00002bc5 	andeq	r2, r0, r5, asr #23
    a484:	0020792d 	eoreq	r7, r0, sp, lsr #18
    a488:	002be300 	eoreq	lr, fp, r0, lsl #6
    a48c:	20852c00 	addcs	r2, r5, r0, lsl #24
    a490:	5f490000 	svcpl	0x00490000
    a494:	8a000020 	bhi	a51c <__exidx_end+0x491c>
    a498:	8c000029 	stchi	0, cr0, [r0], {41}	; 0x29
    a49c:	01000029 	tsteq	r0, r9, lsr #32
    a4a0:	6d480dc5 	stclvs	13, cr0, [r8, #-788]	; 0xfffffcec
    a4a4:	17000020 	strne	r0, [r0, -r0, lsr #32]
    a4a8:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a4ac:	00002079 	andeq	r2, r0, r9, ror r0
    a4b0:	0020852c 	eoreq	r8, r0, ip, lsr #10
    a4b4:	47000000 	strmi	r0, [r0, -r0]
    a4b8:	00001fe9 	andeq	r1, r0, r9, ror #31
    a4bc:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
    a4c0:	000029e0 	andeq	r2, r0, r0, ror #19
    a4c4:	22b09c01 	adcscs	r9, r0, #256	; 0x100
    a4c8:	e9360000 	ldmdb	r6!, {}	; <UNPREDICTABLE>
    a4cc:	c600001f 			; <UNDEFINED> instruction: 0xc600001f
    a4d0:	d4000029 	strle	r0, [r0], #-41	; 0xffffffd7
    a4d4:	01000029 	tsteq	r0, r9, lsr #32
    a4d8:	000d0195 	muleq	sp, r5, r1
    a4dc:	00201947 	eoreq	r1, r0, r7, asr #18
    a4e0:	0029e000 	eoreq	lr, r9, r0
    a4e4:	002a3c00 	eoreq	r3, sl, r0, lsl #24
    a4e8:	199c0100 	ldmibne	ip, {r8}
    a4ec:	4a000023 	bmi	a580 <__exidx_end+0x4980>
    a4f0:	00002019 	andeq	r2, r0, r9, lsl r0
    a4f4:	000029ea 	andeq	r2, r0, sl, ror #19
    a4f8:	00002a26 	andeq	r2, r0, r6, lsr #20
    a4fc:	0d016101 	stfeqs	f6, [r1, #-4]
    a500:	0022282e 	eoreq	r2, r2, lr, lsr #16
    a504:	0029ea00 	eoreq	lr, r9, r0, lsl #20
    a508:	000d5000 	andeq	r5, sp, r0
    a50c:	016f0100 	cmneq	pc, r0, lsl #2
    a510:	20923802 	addscs	r3, r2, r2, lsl #16
    a514:	2a120000 	bcs	48a51c <__ccfg+0x46a574>
    a518:	2a1a0000 	bcs	68a520 <__ccfg+0x66a578>
    a51c:	7a010000 	bvc	4a524 <__ccfg+0x2a57c>
    a520:	23000201 	movwcs	r0, #513	; 0x201
    a524:	a1390000 	teqge	r9, r0
    a528:	00000020 	andeq	r0, r0, r0, lsr #32
    a52c:	0020924a 	eoreq	r9, r0, sl, asr #4
    a530:	002a1a00 	eoreq	r1, sl, r0, lsl #20
    a534:	002a1e00 	eoreq	r1, sl, r0, lsl #28
    a538:	017a0100 	cmneq	sl, r0, lsl #2
    a53c:	20a13902 	adccs	r3, r1, r2, lsl #18
    a540:	00000000 	andeq	r0, r0, r0
    a544:	202c4700 	eorcs	r4, ip, r0, lsl #14
    a548:	2a3c0000 	bcs	f0a550 <__ccfg+0xeea5a8>
    a54c:	2a740000 	bcs	1d0a554 <__ccfg+0x1cea5ac>
    a550:	9c010000 	stcls	0, cr0, [r1], {-0}
    a554:	00002344 	andeq	r2, r0, r4, asr #6
    a558:	00203a48 	eoreq	r3, r0, r8, asr #20
    a55c:	002c2a00 	eoreq	r2, ip, r0, lsl #20
    a560:	20464800 	subcs	r4, r6, r0, lsl #16
    a564:	2c480000 	marcs	acc0, r0, r8
    a568:	52390000 	eorspl	r0, r9, #0
    a56c:	00000020 	andeq	r0, r0, r0, lsr #32
    a570:	0020234b 	eoreq	r2, r0, fp, asr #6
    a574:	002a7400 	eoreq	r7, sl, r0, lsl #8
    a578:	002bf400 	eoreq	pc, fp, r0, lsl #8
    a57c:	2a9c0100 	bcs	fe70a984 <_estack+0xde705984>
    a580:	000020af 	andeq	r2, r0, pc, lsr #1
    a584:	00002a74 	andeq	r2, r0, r4, ror sl
    a588:	00000d70 	andeq	r0, r0, r0, ror sp
    a58c:	02010801 	andeq	r0, r1, #65536	; 0x10000
    a590:	0000236e 	andeq	r2, r0, lr, ror #6
    a594:	0020be39 	eoreq	fp, r0, r9, lsr lr
    a598:	af380000 	svcge	0x00380000
    a59c:	80000020 	andhi	r0, r0, r0, lsr #32
    a5a0:	8400002a 	strhi	r0, [r0], #-42	; 0xffffffd6
    a5a4:	0100002a 	tsteq	r0, sl, lsr #32
    a5a8:	89020108 	stmdbhi	r2, {r3, r8}
    a5ac:	39000023 	stmdbcc	r0, {r0, r1, r5}
    a5b0:	000020be 	strheq	r2, [r0], -lr
    a5b4:	22322e00 	eorscs	r2, r2, #0, 28
    a5b8:	2aa20000 	bcs	fe88a5c0 <_estack+0xde8855c0>
    a5bc:	0d880000 	stceq	0, cr0, [r8]
    a5c0:	1a010000 	bne	4a5c8 <__ccfg+0x2a620>
    a5c4:	6d2a0201 	sfmvs	f0, 4, [sl, #-4]!
    a5c8:	b0000021 	andlt	r0, r0, r1, lsr #32
    a5cc:	a000002a 	andge	r0, r0, sl, lsr #32
    a5d0:	0100000d 	tsteq	r0, sp
    a5d4:	0b020121 	bleq	8aa60 <__ccfg+0x6aab8>
    a5d8:	3a000024 	bcc	a670 <__exidx_end+0x4a70>
    a5dc:	00002178 	andeq	r2, r0, r8, ror r1
    a5e0:	00002ab0 			; <UNDEFINED> instruction: 0x00002ab0
    a5e4:	00000da0 	andeq	r0, r0, r0, lsr #27
    a5e8:	04013104 	streq	r3, [r1], #-260	; 0xfffffefc
    a5ec:	0021b838 	eoreq	fp, r1, r8, lsr r8
    a5f0:	002ab000 	eoreq	fp, sl, r0
    a5f4:	002abc00 	eoreq	fp, sl, r0, lsl #24
    a5f8:	01250400 			; <UNDEFINED> instruction: 0x01250400
    a5fc:	0023df04 	eoreq	sp, r3, r4, lsl #30
    a600:	21c74c00 	biccs	r4, r7, r0, lsl #24
    a604:	041c0000 	ldreq	r0, [ip], #-0
    a608:	3a002100 	bcc	12a10 <__exidx_end+0xce10>
    a60c:	00002183 	andeq	r2, r0, r3, lsl #3
    a610:	00002abc 			; <UNDEFINED> instruction: 0x00002abc
    a614:	00000da8 	andeq	r0, r0, r8, lsr #27
    a618:	04012604 	streq	r2, [r1], #-1540	; 0xfffff9fc
    a61c:	000da82b 	andeq	sl, sp, fp, lsr #16
    a620:	21924c00 	orrscs	r4, r2, r0, lsl #24
    a624:	03400000 	movteq	r0, #0
    a628:	9f4c2100 	svcls	0x004c2100
    a62c:	bc000021 	stclt	0, cr0, [r0], {33}	; 0x21
    a630:	00210003 	eoreq	r0, r1, r3
    a634:	3a000000 	bcc	a63c <__exidx_end+0x4a3c>
    a638:	000020cc 	andeq	r2, r0, ip, asr #1
    a63c:	00002ac0 	andeq	r2, r0, r0, asr #21
    a640:	00000dc0 	andeq	r0, r0, r0, asr #27
    a644:	02012201 	andeq	r2, r1, #268435456	; 0x10000000
    a648:	000dc02b 	andeq	ip, sp, fp, lsr #32
    a64c:	20db2d00 	sbcscs	r2, fp, r0, lsl #26
    a650:	2c660000 	stclcs	0, cr0, [r6], #-0
    a654:	e72d0000 	str	r0, [sp, -r0]!
    a658:	79000020 	stmdbvc	r0, {r5}
    a65c:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a660:	000020f3 	strdeq	r2, [r0], -r3
    a664:	0020ff2d 	eoreq	pc, r0, sp, lsr #30
    a668:	002c9700 	eoreq	r9, ip, r0, lsl #14
    a66c:	210b2c00 	tstcs	fp, r0, lsl #24
    a670:	172d0000 	strne	r0, [sp, -r0]!
    a674:	aa000021 	bge	a700 <__exidx_end+0x4b00>
    a678:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a67c:	00002123 	andeq	r2, r0, r3, lsr #2
    a680:	00212f2d 	eoreq	r2, r1, sp, lsr #30
    a684:	002cbd00 	eoreq	fp, ip, r0, lsl #26
    a688:	213b2d00 	teqcs	fp, r0, lsl #26
    a68c:	2cd00000 	ldclcs	0, cr0, [r0], {0}
    a690:	472d0000 	strmi	r0, [sp, -r0]!
    a694:	fb000021 	blx	a722 <__exidx_end+0x4b22>
    a698:	2c00002c 	stccs	0, cr0, [r0], {44}	; 0x2c
    a69c:	00002153 	andeq	r2, r0, r3, asr r1
    a6a0:	00000000 	andeq	r0, r0, r0
    a6a4:	00000731 	andeq	r0, r0, r1, lsr r7
    a6a8:	25ca0003 	strbcs	r0, [sl, #3]
    a6ac:	01040000 	mrseq	r0, (UNDEF: 4)
    a6b0:	000000a3 	andeq	r0, r0, r3, lsr #1
    a6b4:	0027570c 	eoreq	r5, r7, ip, lsl #14
    a6b8:	000dec00 	andeq	lr, sp, r0, lsl #24
    a6bc:	000f2800 	andeq	r2, pc, r0, lsl #16
    a6c0:	00000000 	andeq	r0, r0, r0
    a6c4:	0063d600 	rsbeq	sp, r3, r0, lsl #12
    a6c8:	06010200 	streq	r0, [r1], -r0, lsl #4
    a6cc:	00000c4d 	andeq	r0, r0, sp, asr #24
    a6d0:	5b050202 	blpl	14aee0 <__ccfg+0x12af38>
    a6d4:	0200000a 	andeq	r0, r0, #10
    a6d8:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    a6dc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a6e0:	0007e805 	andeq	lr, r7, r5, lsl #16
    a6e4:	29fe0300 	ldmibcs	lr!, {r8, r9}^
    a6e8:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    a6ec:	00004d17 	andeq	r4, r0, r7, lsl sp
    a6f0:	08010200 	stmdaeq	r1, {r9}
    a6f4:	00000c4b 	andeq	r0, r0, fp, asr #24
    a6f8:	002df403 	eoreq	pc, sp, r3, lsl #8
    a6fc:	1c310200 	lfmne	f0, 4, [r1], #-0
    a700:	00000060 	andeq	r0, r0, r0, rrx
    a704:	48070202 	stmdami	r7, {r1, r9}
    a708:	0300000d 	movweq	r0, #13
    a70c:	00002996 	muleq	r0, r6, r9
    a710:	731b3402 	tstvc	fp, #33554432	; 0x2000000
    a714:	02000000 	andeq	r0, r0, #0
    a718:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
    a71c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a720:	00041807 	andeq	r1, r4, r7, lsl #16
    a724:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a728:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a72c:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    a730:	03000004 	movweq	r0, #4
    a734:	0000050e 	andeq	r0, r0, lr, lsl #10
    a738:	9b1b2803 	blls	6d474c <__ccfg+0x6b47a4>
    a73c:	05000000 	streq	r0, [r0, #-0]
    a740:	00000b80 	andeq	r0, r0, r0, lsl #23
    a744:	b3000a04 	movwlt	r0, #2564	; 0xa04
    a748:	06000000 	streq	r0, [r0], -r0
    a74c:	0000085d 	andeq	r0, r0, sp, asr r8
    a750:	000000b3 	strheq	r0, [r0], -r3
    a754:	07000100 	streq	r0, [r0, -r0, lsl #2]
    a758:	0b820304 	bleq	fe08b370 <_estack+0xde086370>
    a75c:	63030000 	movwvs	r0, #12288	; 0x3000
    a760:	00008f18 	andeq	r8, r0, r8, lsl pc
    a764:	28dd0300 	ldmcs	sp, {r8, r9}^
    a768:	27040000 	strcs	r0, [r4, -r0]
    a76c:	00005412 	andeq	r5, r0, r2, lsl r4
    a770:	00c10800 	sbceq	r0, r1, r0, lsl #16
    a774:	a4030000 	strge	r0, [r3], #-0
    a778:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    a77c:	0041112b 	subeq	r1, r1, fp, lsr #2
    a780:	d2090000 	andle	r0, r9, #0
    a784:	03000000 	movweq	r0, #0
    a788:	0000292f 	andeq	r2, r0, pc, lsr #18
    a78c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    a790:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a794:	000000e3 	andeq	r0, r0, r3, ror #1
    a798:	00063603 	andeq	r3, r6, r3, lsl #12
    a79c:	122d0400 	eorne	r0, sp, #0, 8
    a7a0:	00000067 	andeq	r0, r0, r7, rrx
    a7a4:	000ba403 	andeq	sl, fp, r3, lsl #8
    a7a8:	0f2e0400 	svceq	0x002e0400
    a7ac:	0000010c 	andeq	r0, r0, ip, lsl #2
    a7b0:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    a7b4:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    a7b8:	a0093204 	andge	r3, r9, r4, lsl #4
    a7bc:	0c000001 	stceq	0, cr0, [r0], {1}
    a7c0:	0000002b 	andeq	r0, r0, fp, lsr #32
    a7c4:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    a7c8:	01000000 	mrseq	r0, (UNDEF: 0)
    a7cc:	0c000701 	stceq	7, cr0, [r0], {1}
    a7d0:	0000063c 	andeq	r0, r0, ip, lsr r6
    a7d4:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    a7d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a7dc:	0c000601 	stceq	6, cr0, [r0], {1}
    a7e0:	000002de 	ldrdeq	r0, [r0], -lr
    a7e4:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    a7e8:	01000000 	mrseq	r0, (UNDEF: 0)
    a7ec:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    a7f0:	000006a7 	andeq	r0, r0, r7, lsr #13
    a7f4:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    a7f8:	01000000 	mrseq	r0, (UNDEF: 0)
    a7fc:	0c000401 	cfstrseq	mvf0, [r0], {1}
    a800:	00000a8f 	andeq	r0, r0, pc, lsl #21
    a804:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    a808:	01000000 	mrseq	r0, (UNDEF: 0)
    a80c:	0d000004 	stceq	0, cr0, [r0, #-16]
    a810:	0000064b 	andeq	r0, r0, fp, asr #12
    a814:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    a818:	01000000 	mrseq	r0, (UNDEF: 0)
    a81c:	0008eb0d 	andeq	lr, r8, sp, lsl #22
    a820:	033c0400 	teqeq	ip, #0, 8
    a824:	000000d2 	ldrdeq	r0, [r0], -r2
    a828:	0f1c0d02 	svceq	0x001c0d02
    a82c:	3d040000 	stccc	0, cr0, [r4, #-0]
    a830:	0000d203 	andeq	sp, r0, r3, lsl #4
    a834:	030d0300 	movweq	r0, #54016	; 0xd300
    a838:	04000009 	streq	r0, [r0], #-9
    a83c:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    a840:	00040000 	andeq	r0, r4, r0
    a844:	00031403 	andeq	r1, r3, r3, lsl #8
    a848:	03410400 	movteq	r0, #5120	; 0x1400
    a84c:	00000112 	andeq	r0, r0, r2, lsl r1
    a850:	0001a009 	andeq	sl, r1, r9
    a854:	06ae0e00 	strteq	r0, [lr], r0, lsl #28
    a858:	43040000 	movwmi	r0, #16384	; 0x4000
    a85c:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    a860:	0e010100 	adfeqs	f0, f1, f0
    a864:	00000197 	muleq	r0, r7, r1
    a868:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    a86c:	01000001 	tsteq	r0, r1
    a870:	d3040a01 	movwle	r0, #18945	; 0x4a01
    a874:	02000001 	andeq	r0, r0, #1
    a878:	0c540801 	mrrceq	8, 0, r0, r4, cr1
    a87c:	d3080000 	movwle	r0, #32768	; 0x8000
    a880:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    a884:	0000031d 	andeq	r0, r0, sp, lsl r3
    a888:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    a88c:	01000001 	tsteq	r0, r1
    a890:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    a894:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    a898:	ba0d0000 	blt	34a8a0 <__ccfg+0x32a8f8>
    a89c:	0500000c 	streq	r0, [r0, #-12]
    a8a0:	00670b90 	mlseq	r7, r0, fp, r0
    a8a4:	0d000000 	stceq	0, cr0, [r0, #-0]
    a8a8:	00001057 	andeq	r1, r0, r7, asr r0
    a8ac:	c1079105 	tstgt	r7, r5, lsl #2
    a8b0:	04000000 	streq	r0, [r0], #-0
    a8b4:	0001bc0d 	andeq	fp, r1, sp, lsl #24
    a8b8:	10920500 	addsne	r0, r2, r0, lsl #10
    a8bc:	000000de 	ldrdeq	r0, [r0], -lr
    a8c0:	ae030006 	cdpge	0, 0, cr0, cr3, cr6, {0}
    a8c4:	0500000c 	streq	r0, [r0, #-12]
    a8c8:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    a8cc:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    a8d0:	35000002 	strcc	r0, [r0, #-2]
    a8d4:	10000002 	andne	r0, r0, r2
    a8d8:	092d0e00 	pusheq	{r9, sl, fp}
    a8dc:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    a8e0:	00022a0f 	andeq	r2, r2, pc, lsl #20
    a8e4:	0b010100 	bleq	4acec <__ccfg+0x2ad44>
    a8e8:	09910601 	ldmibeq	r1, {r0, r9, sl}
    a8ec:	0000026d 	andeq	r0, r0, sp, ror #4
    a8f0:	00090a0c 	andeq	r0, r9, ip, lsl #20
    a8f4:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    a8f8:	000000d2 	ldrdeq	r0, [r0], -r2
    a8fc:	00010701 	andeq	r0, r1, r1, lsl #14
    a900:	0005bc0c 	andeq	fp, r5, ip, lsl #24
    a904:	03940600 	orrseq	r0, r4, #0, 12
    a908:	000000d2 	ldrdeq	r0, [r0], -r2
    a90c:	00000101 	andeq	r0, r0, r1, lsl #2
    a910:	0a9b0300 	beq	fe6cb518 <_estack+0xde6c6518>
    a914:	96060000 	strls	r0, [r6], -r0
    a918:	00024303 	andeq	r4, r2, r3, lsl #6
    a91c:	026d0800 	rsbeq	r0, sp, #0, 16
    a920:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    a924:	89000002 	stmdbhi	r0, {r1}
    a928:	10000002 	andne	r0, r0, r2
    a92c:	027e0800 	rsbseq	r0, lr, #0, 16
    a930:	a10e0000 	mrsge	r0, (UNDEF: 14)
    a934:	06000003 	streq	r0, [r0], -r3
    a938:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    a93c:	01010000 	mrseq	r0, (UNDEF: 1)
    a940:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    a944:	0002a700 	andeq	sl, r2, r0, lsl #14
    a948:	08001000 	stmdaeq	r0, {ip}
    a94c:	0000029c 	muleq	r0, ip, r2
    a950:	0005fe0e 	andeq	pc, r5, lr, lsl #28
    a954:	13060700 	movwne	r0, #26368	; 0x6700
    a958:	000002a7 	andeq	r0, r0, r7, lsr #5
    a95c:	cd0e0101 	stfgts	f0, [lr, #-4]
    a960:	05000008 	streq	r0, [r0, #-8]
    a964:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    a968:	01010000 	mrseq	r0, (UNDEF: 1)
    a96c:	000c6211 	andeq	r6, ip, r1, lsl r2
    a970:	016e0800 	cmneq	lr, r0, lsl #16
    a974:	0002d510 	andeq	sp, r2, r0, lsl r5
    a978:	db040a00 	blle	10d180 <__ccfg+0xed1d8>
    a97c:	12000002 	andne	r0, r0, #2
    a980:	0002e701 	andeq	lr, r2, r1, lsl #14
    a984:	00c11300 	sbceq	r1, r1, r0, lsl #6
    a988:	0f000000 	svceq	0x00000000
    a98c:	000001da 	ldrdeq	r0, [r0], -sl
    a990:	000002f2 	strdeq	r0, [r0], -r2
    a994:	e7080010 	smlad	r8, r0, r0, r0
    a998:	14000002 	strne	r0, [r0], #-2
    a99c:	000009d6 	ldrdeq	r0, [r0], -r6
    a9a0:	13017f08 	movwne	r7, #7944	; 0x1f08
    a9a4:	000002f2 	strdeq	r0, [r0], -r2
    a9a8:	8d140101 	ldfhis	f0, [r4, #-4]
    a9ac:	08000003 	stmdaeq	r0, {r0, r1}
    a9b0:	ef140182 	svc	0x00140182
    a9b4:	01000000 	mrseq	r0, (UNDEF: 0)
    a9b8:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    a9bc:	03390908 	teqeq	r9, #8, 18	; 0x20000
    a9c0:	c20d0000 	andgt	r0, sp, #0
    a9c4:	09000001 	stmdbeq	r0, {r0}
    a9c8:	00c1070f 	sbceq	r0, r1, pc, lsl #14
    a9cc:	0d000000 	stceq	0, cr0, [r0, #-0]
    a9d0:	00000c92 	muleq	r0, r2, ip
    a9d4:	c1031009 	tstgt	r3, r9
    a9d8:	02000000 	andeq	r0, r0, #0
    a9dc:	0d5b0300 	ldcleq	3, cr0, [fp, #-0]
    a9e0:	11090000 	mrsne	r0, (UNDEF: 9)
    a9e4:	00031503 	andeq	r1, r3, r3, lsl #10
    a9e8:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    a9ec:	03b70916 			; <UNDEFINED> instruction: 0x03b70916
    a9f0:	a80d0000 	stmdage	sp, {}	; <UNPREDICTABLE>
    a9f4:	09000004 	stmdbeq	r0, {r2}
    a9f8:	03d10817 	bicseq	r0, r1, #1507328	; 0x170000
    a9fc:	0d000000 	stceq	0, cr0, [r0, #-0]
    aa00:	000008fb 	strdeq	r0, [r0], -fp
    aa04:	ec081809 	stc	8, cr1, [r8], {9}
    aa08:	04000003 	streq	r0, [r0], #-3
    aa0c:	000bb60d 	andeq	fp, fp, sp, lsl #12
    aa10:	08190900 	ldmdaeq	r9, {r8, fp}
    aa14:	00000422 	andeq	r0, r0, r2, lsr #8
    aa18:	0c8a0d08 	stceq	13, cr0, [sl], {8}
    aa1c:	1a090000 	bne	24aa24 <__ccfg+0x22aa7c>
    aa20:	00043d08 	andeq	r3, r4, r8, lsl #26
    aa24:	520d0c00 	andpl	r0, sp, #0, 24
    aa28:	09000009 	stmdbeq	r0, {r0, r3}
    aa2c:	0453081b 	ldrbeq	r0, [r3], #-2075	; 0xfffff7e5
    aa30:	0d100000 	ldceq	0, cr0, [r0, #-0]
    aa34:	00000a53 	andeq	r0, r0, r3, asr sl
    aa38:	53081c09 	movwpl	r1, #35849	; 0x8c09
    aa3c:	14000004 	strne	r0, [r0], #-4
    aa40:	0001a50d 	andeq	sl, r1, sp, lsl #10
    aa44:	081d0900 	ldmdaeq	sp, {r8, fp}
    aa48:	00000453 	andeq	r0, r0, r3, asr r4
    aa4c:	030b0d18 	movweq	r0, #48408	; 0xbd18
    aa50:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    aa54:	00008106 	andeq	r8, r0, r6, lsl #2
    aa58:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    aa5c:	00008101 	andeq	r8, r0, r1, lsl #2
    aa60:	0003d100 	andeq	sp, r3, r0, lsl #2
    aa64:	00811300 	addeq	r1, r1, r0, lsl #6
    aa68:	81130000 	tsthi	r3, r0
    aa6c:	13000000 	movwne	r0, #0
    aa70:	000000b5 	strheq	r0, [r0], -r5
    aa74:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    aa78:	15000003 	strne	r0, [r0, #-3]
    aa7c:	00008101 	andeq	r8, r0, r1, lsl #2
    aa80:	0003ec00 	andeq	lr, r3, r0, lsl #24
    aa84:	00811300 	addeq	r1, r1, r0, lsl #6
    aa88:	81130000 	tsthi	r3, r0
    aa8c:	00000000 	andeq	r0, r0, r0
    aa90:	03d7040a 	bicseq	r0, r7, #167772160	; 0xa000000
    aa94:	01150000 	tsteq	r5, r0
    aa98:	00000081 	andeq	r0, r0, r1, lsl #1
    aa9c:	00000416 	andeq	r0, r0, r6, lsl r4
    aaa0:	00008113 	andeq	r8, r0, r3, lsl r1
    aaa4:	01001300 	mrseq	r1, LR_irq
    aaa8:	81130000 	tsthi	r3, r0
    aaac:	13000000 	movwne	r0, #0
    aab0:	00000416 	andeq	r0, r0, r6, lsl r4
    aab4:	00041c13 	andeq	r1, r4, r3, lsl ip
    aab8:	040a0000 	streq	r0, [sl], #-0
    aabc:	00000081 	andeq	r0, r0, r1, lsl #1
    aac0:	0339040a 	teqeq	r9, #167772160	; 0xa000000
    aac4:	040a0000 	streq	r0, [sl], #-0
    aac8:	000003f2 	strdeq	r0, [r0], -r2
    aacc:	00810115 	addeq	r0, r1, r5, lsl r1
    aad0:	043d0000 	ldrteq	r0, [sp], #-0
    aad4:	00130000 	andseq	r0, r3, r0
    aad8:	13000001 	movwne	r0, #1
    aadc:	0000041c 	andeq	r0, r0, ip, lsl r4
    aae0:	28040a00 	stmdacs	r4, {r9, fp}
    aae4:	15000004 	strne	r0, [r0, #-4]
    aae8:	00008101 	andeq	r8, r0, r1, lsl #2
    aaec:	00045300 	andeq	r5, r4, r0, lsl #6
    aaf0:	01001300 	mrseq	r1, LR_irq
    aaf4:	0a000000 	beq	aafc <__exidx_end+0x4efc>
    aaf8:	00044304 	andeq	r4, r4, r4, lsl #6
    aafc:	0d170300 	ldceq	3, cr0, [r7, #-0]
    ab00:	1f090000 	svcne	0x00090000
    ab04:	00034503 	andeq	r4, r3, r3, lsl #10
    ab08:	04590800 	ldrbeq	r0, [r9], #-2048	; 0xfffff800
    ab0c:	65140000 	ldrvs	r0, [r4, #-0]
    ab10:	08000003 	stmdaeq	r0, {r0, r1}
    ab14:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    ab18:	01000000 	mrseq	r0, (UNDEF: 0)
    ab1c:	08081601 	stmdaeq	r8, {r0, r9, sl, ip}
    ab20:	a0090303 	andge	r0, r9, r3, lsl #6
    ab24:	17000004 	strne	r0, [r0, -r4]
    ab28:	00003c83 	andeq	r3, r0, r3, lsl #25
    ab2c:	07030708 	streq	r0, [r3, -r8, lsl #14]
    ab30:	000000c1 	andeq	r0, r0, r1, asr #1
    ab34:	0faf1700 	svceq	0x00af1700
    ab38:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    ab3c:	00f40803 	rscseq	r0, r4, r3, lsl #16
    ab40:	00040000 	andeq	r0, r4, r0
    ab44:	0009f911 	andeq	pc, r9, r1, lsl r9	; <UNPREDICTABLE>
    ab48:	03090800 	movweq	r0, #38912	; 0x9800
    ab4c:	00047903 	andeq	r7, r4, r3, lsl #18
    ab50:	00201800 	eoreq	r1, r0, r0, lsl #16
    ab54:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    ab58:	1008030b 	andne	r0, r8, fp, lsl #6
    ab5c:	17000005 	strne	r0, [r0, -r5]
    ab60:	00001f06 	andeq	r1, r0, r6, lsl #30
    ab64:	07031408 	streq	r1, [r3, -r8, lsl #8]
    ab68:	000000c1 	andeq	r0, r0, r1, asr #1
    ab6c:	0bd71700 	bleq	ff5d0774 <_estack+0xdf5cb774>
    ab70:	15080000 	strne	r0, [r8, #-0]
    ab74:	00c10703 	sbceq	r0, r1, r3, lsl #14
    ab78:	17020000 	strne	r0, [r2, -r0]
    ab7c:	00004c70 	andeq	r4, r0, r0, ror ip
    ab80:	0a031608 	beq	d03a8 <__ccfg+0xb0400>
    ab84:	000002c8 	andeq	r0, r0, r8, asr #5
    ab88:	47361704 	ldrmi	r1, [r6, -r4, lsl #14]!
    ab8c:	17080000 	strne	r0, [r8, -r0]
    ab90:	00f40803 	rscseq	r0, r4, r3, lsl #16
    ab94:	17080000 	strne	r0, [r8, -r0]
    ab98:	0000000f 	andeq	r0, r0, pc
    ab9c:	0f031808 	svceq	0x00031808
    aba0:	00000510 	andeq	r0, r0, r0, lsl r5
    aba4:	094d170c 	stmdbeq	sp, {r2, r3, r8, r9, sl, ip}^
    aba8:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    abac:	05201503 	streq	r1, [r0, #-1283]!	; 0xfffffafd
    abb0:	002c0000 	eoreq	r0, ip, r0
    abb4:	0004a00f 	andeq	sl, r4, pc
    abb8:	00052000 	andeq	r2, r5, r0
    abbc:	00881900 	addeq	r1, r8, r0, lsl #18
    abc0:	00030000 	andeq	r0, r3, r0
    abc4:	04ad040a 	strteq	r0, [sp], #1034	; 0x40a
    abc8:	cc110000 	ldcgt	0, cr0, [r1], {-0}
    abcc:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    abd0:	ad1b031c 	ldcge	3, cr0, [fp, #-112]	; 0xffffff90
    abd4:	14000004 	strne	r0, [r0], #-4
    abd8:	00000bac 	andeq	r0, r0, ip, lsr #23
    abdc:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    abe0:	00000542 	andeq	r0, r0, r2, asr #10
    abe4:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    abe8:	00000526 	andeq	r0, r0, r6, lsr #10
    abec:	0000161a 	andeq	r1, r0, sl, lsl r6
    abf0:	111a0100 	tstne	sl, r0, lsl #2
    abf4:	00000465 	andeq	r0, r0, r5, ror #8
    abf8:	e0030501 	and	r0, r3, r1, lsl #10
    abfc:	1b00005b 	blne	ad70 <__exidx_end+0x5170>
    ac00:	000027bd 			; <UNDEFINED> instruction: 0x000027bd
    ac04:	160d1f01 	strne	r1, [sp], -r1, lsl #30
    ac08:	05000004 	streq	r0, [r0, #-4]
    ac0c:	00062c03 	andeq	r2, r6, r3, lsl #24
    ac10:	27a91c20 	strcs	r1, [r9, r0, lsr #24]!
    ac14:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    ac18:	0081010c 	addeq	r0, r1, ip, lsl #2
    ac1c:	30ec0000 	rsccc	r0, ip, r0
    ac20:	30f00000 	rscscc	r0, r0, r0
    ac24:	9c010000 	stcls	0, cr0, [r1], {-0}
    ac28:	00000597 	muleq	r0, r7, r5
    ac2c:	0100701d 	tsteq	r0, sp, lsl r0
    ac30:	01002258 	tsteq	r0, r8, asr r2
    ac34:	2d0e0000 	stccs	0, cr0, [lr, #-0]
    ac38:	1c000000 	stcne	0, cr0, [r0], {-0}
    ac3c:	00002768 	andeq	r2, r0, r8, ror #14
    ac40:	010c5201 	tsteq	ip, r1, lsl #4
    ac44:	00000081 	andeq	r0, r0, r1, lsl #1
    ac48:	000030e8 	andeq	r3, r0, r8, ror #1
    ac4c:	000030ec 	andeq	r3, r0, ip, ror #1
    ac50:	05c19c01 	strbeq	r9, [r1, #3073]	; 0xc01
    ac54:	701d0000 	andsvc	r0, sp, r0
    ac58:	22520100 	subscs	r0, r2, #0, 2
    ac5c:	00000100 	andeq	r0, r0, r0, lsl #2
    ac60:	00002d21 	andeq	r2, r0, r1, lsr #26
    ac64:	278f1c00 	strcs	r1, [pc, r0, lsl #24]
    ac68:	4d010000 	stcmi	0, cr0, [r1, #-0]
    ac6c:	0081010c 	addeq	r0, r1, ip, lsl #2
    ac70:	30e00000 	rsccc	r0, r0, r0
    ac74:	30e80000 	rsccc	r0, r8, r0
    ac78:	9c010000 	stcls	0, cr0, [r1], {-0}
    ac7c:	000005f9 	strdeq	r0, [r0], -r9
    ac80:	0100701d 	tsteq	r0, sp, lsl r0
    ac84:	0100224d 	tsteq	r0, sp, asr #4
    ac88:	2d340000 	ldccs	0, cr0, [r4, #-0]
    ac8c:	b61e0000 	ldrlt	r0, [lr], -r0
    ac90:	01000027 	tsteq	r0, r7, lsr #32
    ac94:	041c2f4d 	ldreq	r2, [ip], #-3917	; 0xfffff0b3
    ac98:	51010000 	mrspl	r0, (UNDEF: 1)
    ac9c:	27751c00 	ldrbcs	r1, [r5, -r0, lsl #24]!
    aca0:	42010000 	andmi	r0, r1, #0
    aca4:	0081010c 	addeq	r0, r1, ip, lsl #2
    aca8:	30bc0000 	adcscc	r0, ip, r0
    acac:	30e00000 	rsccc	r0, r0, r0
    acb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    acb4:	00000662 	andeq	r0, r0, r2, ror #12
    acb8:	7968701d 	stmdbvc	r8!, {r0, r2, r3, r4, ip, sp, lr}^
    acbc:	1e420100 	dvfnes	f0, f2, f0
    acc0:	00000081 	andeq	r0, r0, r1, lsl #1
    acc4:	00002d47 	andeq	r2, r0, r7, asr #26
    acc8:	0100701d 	tsteq	r0, sp, lsl r0
    accc:	01002b42 	tsteq	r0, r2, asr #22
    acd0:	2d650000 	stclcs	0, cr0, [r5, #-0]
    acd4:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    acd8:	01006e65 	tsteq	r0, r5, ror #28
    acdc:	00813242 	addeq	r3, r1, r2, asr #4
    ace0:	2d780000 	ldclcs	0, cr0, [r8, #-0]
    ace4:	731d0000 	tstvc	sp, #0
    ace8:	01007365 	tsteq	r0, r5, ror #6
    acec:	04163c42 	ldreq	r3, [r6], #-3138	; 0xfffff3be
    acf0:	2d8b0000 	stccs	0, cr0, [fp]
    acf4:	b61e0000 	ldrlt	r0, [lr], -r0
    acf8:	01000027 	tsteq	r0, r7, lsr #32
    acfc:	041c1743 	ldreq	r1, [ip], #-1859	; 0xfffff8bd
    ad00:	91020000 	mrsls	r0, (UNDEF: 2)
    ad04:	9c1c0000 	ldcls	0, cr0, [ip], {-0}
    ad08:	01000027 	tsteq	r0, r7, lsr #32
    ad0c:	81010c37 	tsthi	r1, r7, lsr ip
    ad10:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    ad14:	bc000030 	stclt	0, cr0, [r0], {48}	; 0x30
    ad18:	01000030 	tsteq	r0, r0, lsr r0
    ad1c:	00069b9c 	muleq	r6, ip, fp
    ad20:	68701d00 	ldmdavs	r0!, {r8, sl, fp, ip}^
    ad24:	37010079 	smlsdxcc	r1, r9, r0, r0
    ad28:	0000811e 	andeq	r8, r0, lr, lsl r1
    ad2c:	002d9e00 	eoreq	r9, sp, r0, lsl #28
    ad30:	64661f00 	strbtvs	r1, [r6], #-3840	; 0xfffff100
    ad34:	27370100 	ldrcs	r0, [r7, -r0, lsl #2]!
    ad38:	00000081 	andeq	r0, r0, r1, lsl #1
    ad3c:	20005101 	andcs	r5, r0, r1, lsl #2
    ad40:	00002782 	andeq	r2, r0, r2, lsl #15
    ad44:	010c2101 	tsteq	ip, r1, lsl #2
    ad48:	00000081 	andeq	r0, r0, r1, lsl #1
    ad4c:	0006db01 	andeq	sp, r6, r1, lsl #22
    ad50:	68702100 	ldmdavs	r0!, {r8, sp}^
    ad54:	21010079 	tstcs	r1, r9, ror r0
    ad58:	0000811e 	andeq	r8, r0, lr, lsl r1
    ad5c:	64662100 	strbtvs	r2, [r6], #-256	; 0xffffff00
    ad60:	27210100 	strcs	r0, [r1, -r0, lsl #2]!
    ad64:	00000081 	andeq	r0, r0, r1, lsl #1
    ad68:	00189122 	andseq	r9, r8, r2, lsr #2
    ad6c:	33210100 			; <UNDEFINED> instruction: 0x33210100
    ad70:	000000b5 	strheq	r0, [r0], -r5
    ad74:	01006923 	tsteq	r0, r3, lsr #18
    ad78:	00810625 	addeq	r0, r1, r5, lsr #12
    ad7c:	24000000 	strcs	r0, [r0], #-0
    ad80:	0000069b 	muleq	r0, fp, r6
    ad84:	000030f0 	strdeq	r3, [r0], -r0
    ad88:	00003138 	andeq	r3, r0, r8, lsr r1
    ad8c:	ad259c01 	stcge	12, cr9, [r5, #-4]!
    ad90:	bc000006 	stclt	0, cr0, [r0], {6}
    ad94:	2500002d 	strcs	r0, [r0, #-45]	; 0xffffffd3
    ad98:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    ad9c:	00002dda 	ldrdeq	r2, [r0], -sl
    ada0:	0006c425 	andeq	ip, r6, r5, lsr #8
    ada4:	002df800 	eoreq	pc, sp, r0, lsl #16
    ada8:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    adac:	9b270000 	blls	9cadb4 <__ccfg+0x9aae0c>
    adb0:	26000006 	strcs	r0, [r0], -r6
    adb4:	38000031 	stmdacc	r0, {r0, r4, r5}
    adb8:	01000031 	tsteq	r0, r1, lsr r0
    adbc:	ad280c21 	stcge	12, cr0, [r8, #-132]!	; 0xffffff7c
    adc0:	01000006 	tsteq	r0, r6
    adc4:	06b92855 	ssateq	r2, #26, r5, asr #16
    adc8:	56010000 	strpl	r0, [r1], -r0
    adcc:	0006c429 	andeq	ip, r6, r9, lsr #8
    add0:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    add4:	00000000 	andeq	r0, r0, r0
    add8:	00042d00 	andeq	r2, r4, r0, lsl #26
    addc:	fc000300 	stc2	3, cr0, [r0], {-0}
    ade0:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    ade4:	0000a301 	andeq	sl, r0, r1, lsl #6
    ade8:	27cd0c00 	strbcs	r0, [sp, r0, lsl #24]
    adec:	0dec0000 	stcleq	0, cr0, [ip]
    adf0:	0f780000 	svceq	0x00780000
    adf4:	00000000 	andeq	r0, r0, r0
    adf8:	66850000 	strvs	r0, [r5], r0
    adfc:	01020000 	mrseq	r0, (UNDEF: 2)
    ae00:	000c4d06 	andeq	r4, ip, r6, lsl #26
    ae04:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    ae08:	00000a5b 	andeq	r0, r0, fp, asr sl
    ae0c:	ed050402 	cfstrs	mvf0, [r5, #-8]
    ae10:	02000007 	andeq	r0, r0, #7
    ae14:	07e80508 	strbeq	r0, [r8, r8, lsl #10]!
    ae18:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    ae1c:	02000029 	andeq	r0, r0, #41	; 0x29
    ae20:	004d182e 	subeq	r1, sp, lr, lsr #16
    ae24:	01020000 	mrseq	r0, (UNDEF: 2)
    ae28:	000c4b08 	andeq	r4, ip, r8, lsl #22
    ae2c:	2df40300 	ldclcs	3, cr0, [r4]
    ae30:	31020000 	mrscc	r0, (UNDEF: 2)
    ae34:	00006019 	andeq	r6, r0, r9, lsl r0
    ae38:	07020200 	streq	r0, [r2, -r0, lsl #4]
    ae3c:	00000d48 	andeq	r0, r0, r8, asr #26
    ae40:	00299603 	eoreq	r9, r9, r3, lsl #12
    ae44:	19340200 	ldmdbne	r4!, {r9}
    ae48:	00000073 	andeq	r0, r0, r3, ror r0
    ae4c:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    ae50:	02000004 	andeq	r0, r0, #4
    ae54:	04180708 	ldreq	r0, [r8], #-1800	; 0xfffff8f8
    ae58:	04040000 	streq	r0, [r4], #-0
    ae5c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    ae60:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ae64:	00000422 	andeq	r0, r0, r2, lsr #8
    ae68:	0028dd03 	eoreq	sp, r8, r3, lsl #26
    ae6c:	12270300 	eorne	r0, r7, #0, 6
    ae70:	00000054 	andeq	r0, r0, r4, asr r0
    ae74:	00008f05 	andeq	r8, r0, r5, lsl #30
    ae78:	1da40300 	stcne	3, cr0, [r4]
    ae7c:	2b030000 	blcs	cae84 <__ccfg+0xaaedc>
    ae80:	00004112 	andeq	r4, r0, r2, lsl r1
    ae84:	00a00600 	adceq	r0, r0, r0, lsl #12
    ae88:	2f030000 	svccs	0x00030000
    ae8c:	03000029 	movweq	r0, #41	; 0x29
    ae90:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    ae94:	b1050000 	mrslt	r0, (UNDEF: 5)
    ae98:	03000000 	movweq	r0, #0
    ae9c:	00000636 	andeq	r0, r0, r6, lsr r6
    aea0:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    aea4:	07000000 	streq	r0, [r0, -r0]
    aea8:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    aeac:	0000015c 	andeq	r0, r0, ip, asr r1
    aeb0:	00002b08 	andeq	r2, r0, r8, lsl #22
    aeb4:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    aeb8:	000000a0 	andeq	r0, r0, r0, lsr #1
    aebc:	00070101 	andeq	r0, r7, r1, lsl #2
    aec0:	00063c08 	andeq	r3, r6, r8, lsl #24
    aec4:	03350300 	teqeq	r5, #0, 6
    aec8:	000000a0 	andeq	r0, r0, r0, lsr #1
    aecc:	00060101 	andeq	r0, r6, r1, lsl #2
    aed0:	0002de08 	andeq	sp, r2, r8, lsl #28
    aed4:	03360300 	teqeq	r6, #0, 6
    aed8:	000000a0 	andeq	r0, r0, r0, lsr #1
    aedc:	00050101 	andeq	r0, r5, r1, lsl #2
    aee0:	0006a708 	andeq	sl, r6, r8, lsl #14
    aee4:	03370300 	teqeq	r7, #0, 6
    aee8:	000000a0 	andeq	r0, r0, r0, lsr #1
    aeec:	00040101 	andeq	r0, r4, r1, lsl #2
    aef0:	000a8f08 	andeq	r8, sl, r8, lsl #30
    aef4:	03380300 	teqeq	r8, #0, 6
    aef8:	000000a0 	andeq	r0, r0, r0, lsr #1
    aefc:	00000401 	andeq	r0, r0, r1, lsl #8
    af00:	00064b09 	andeq	r4, r6, r9, lsl #22
    af04:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    af08:	000000a0 	andeq	r0, r0, r0, lsr #1
    af0c:	08eb0901 	stmiaeq	fp!, {r0, r8, fp}^
    af10:	3c030000 	stccc	0, cr0, [r3], {-0}
    af14:	0000a003 	andeq	sl, r0, r3
    af18:	1c090200 	sfmne	f0, 4, [r9], {-0}
    af1c:	0300000f 	movweq	r0, #15
    af20:	00a0033d 	adceq	r0, r0, sp, lsr r3
    af24:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    af28:	00000903 	andeq	r0, r0, r3, lsl #18
    af2c:	b1083f03 	tstlt	r8, r3, lsl #30
    af30:	04000000 	streq	r0, [r0], #-0
    af34:	03140300 	tsteq	r4, #0, 6
    af38:	41030000 	mrsmi	r0, (UNDEF: 3)
    af3c:	0000ce03 	andeq	ip, r0, r3, lsl #28
    af40:	015c0600 	cmpeq	ip, r0, lsl #12
    af44:	ae0a0000 	cdpge	0, 0, cr0, cr10, cr0, {0}
    af48:	03000006 	movweq	r0, #6
    af4c:	01681a43 	cmneq	r8, r3, asr #20
    af50:	01010000 	mrseq	r0, (UNDEF: 1)
    af54:	0001970a 	andeq	r9, r1, sl, lsl #14
    af58:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    af5c:	00000189 	andeq	r0, r0, r9, lsl #3
    af60:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    af64:	0000018f 	andeq	r0, r0, pc, lsl #3
    af68:	54080102 	strpl	r0, [r8], #-258	; 0xfffffefe
    af6c:	0500000c 	streq	r0, [r0, #-12]
    af70:	0000018f 	andeq	r0, r0, pc, lsl #3
    af74:	00031d0a 	andeq	r1, r3, sl, lsl #26
    af78:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    af7c:	00000189 	andeq	r0, r0, r9, lsl #3
    af80:	08070101 	stmdaeq	r7, {r0, r8}
    af84:	da098f04 	ble	26eb9c <__ccfg+0x24ebf4>
    af88:	09000001 	stmdbeq	r0, {r0}
    af8c:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
    af90:	670b9004 	strvs	r9, [fp, -r4]
    af94:	00000000 	andeq	r0, r0, r0
    af98:	00105709 	andseq	r5, r0, r9, lsl #14
    af9c:	08910400 	ldmeq	r1, {sl}
    afa0:	0000008f 	andeq	r0, r0, pc, lsl #1
    afa4:	01bc0904 			; <UNDEFINED> instruction: 0x01bc0904
    afa8:	92040000 	andls	r0, r4, #0
    afac:	0000ac10 	andeq	sl, r0, r0, lsl ip
    afb0:	03000600 	movweq	r0, #1536	; 0x600
    afb4:	00000cae 	andeq	r0, r0, lr, lsr #25
    afb8:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    afbc:	0c000001 	stceq	0, cr0, [r0], {1}
    afc0:	000001da 	ldrdeq	r0, [r0], -sl
    afc4:	000001f1 	strdeq	r0, [r0], -r1
    afc8:	2d0a000d 	stccs	0, cr0, [sl, #-52]	; 0xffffffcc
    afcc:	04000009 	streq	r0, [r0], #-9
    afd0:	01e60f99 	strexheq	r0, r9, [r6]
    afd4:	01010000 	mrseq	r0, (UNDEF: 1)
    afd8:	91050107 	tstls	r5, r7, lsl #2
    afdc:	00022909 	andeq	r2, r2, r9, lsl #18
    afe0:	090a0800 	stmdbeq	sl, {fp}
    afe4:	93050000 	movwls	r0, #20480	; 0x5000
    afe8:	0000a007 	andeq	sl, r0, r7
    afec:	01070100 	mrseq	r0, (UNDEF: 23)
    aff0:	05bc0800 	ldreq	r0, [ip, #2048]!	; 0x800
    aff4:	94050000 	strls	r0, [r5], #-0
    aff8:	0000a003 	andeq	sl, r0, r3
    affc:	00010100 	andeq	r0, r1, r0, lsl #2
    b000:	9b030000 	blls	cb008 <__ccfg+0xab060>
    b004:	0500000a 	streq	r0, [r0, #-10]
    b008:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    b00c:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    b010:	0c000002 	stceq	0, cr0, [r0], {2}
    b014:	00000235 	andeq	r0, r0, r5, lsr r2
    b018:	00000245 	andeq	r0, r0, r5, asr #4
    b01c:	3a05000d 	bcc	14b058 <__ccfg+0x12b0b0>
    b020:	0a000002 	beq	b030 <__exidx_end+0x5430>
    b024:	000003a1 	andeq	r0, r0, r1, lsr #7
    b028:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    b02c:	01000002 	tsteq	r0, r2
    b030:	009b0c01 	addseq	r0, fp, r1, lsl #24
    b034:	02630000 	rsbeq	r0, r3, #0
    b038:	000d0000 	andeq	r0, sp, r0
    b03c:	00025805 	andeq	r5, r2, r5, lsl #16
    b040:	05fe0a00 	ldrbeq	r0, [lr, #2560]!	; 0xa00
    b044:	06060000 	streq	r0, [r6], -r0
    b048:	00026313 	andeq	r6, r2, r3, lsl r3
    b04c:	0a010100 	beq	4b454 <__ccfg+0x2b4ac>
    b050:	000008cd 	andeq	r0, r0, sp, asr #17
    b054:	b10ec304 	tstlt	lr, r4, lsl #6
    b058:	01000000 	mrseq	r0, (UNDEF: 0)
    b05c:	0c620e01 	stcleq	14, cr0, [r2], #-4
    b060:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    b064:	02911001 	addseq	r1, r1, #1
    b068:	040b0000 	streq	r0, [fp], #-0
    b06c:	00000297 	muleq	r0, r7, r2
    b070:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    b074:	8f100000 	svchi	0x00100000
    b078:	00000000 	andeq	r0, r0, r0
    b07c:	0001960c 	andeq	r9, r1, ip, lsl #12
    b080:	0002ae00 	andeq	sl, r2, r0, lsl #28
    b084:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b088:	000002a3 	andeq	r0, r0, r3, lsr #5
    b08c:	0009d611 	andeq	sp, r9, r1, lsl r6
    b090:	017f0700 	cmneq	pc, r0, lsl #14
    b094:	0002ae16 	andeq	sl, r2, r6, lsl lr
    b098:	11010100 	mrsne	r0, (UNDEF: 17)
    b09c:	0000038d 	andeq	r0, r0, sp, lsl #7
    b0a0:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    b0a4:	000000bd 	strheq	r0, [r0], -sp
    b0a8:	65110101 	ldrvs	r0, [r1, #-257]	; 0xfffffeff
    b0ac:	07000003 	streq	r0, [r0, -r3]
    b0b0:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    b0b4:	01000000 	mrseq	r0, (UNDEF: 0)
    b0b8:	07081201 	streq	r1, [r8, -r1, lsl #4]
    b0bc:	07090303 	streq	r0, [r9, -r3, lsl #6]
    b0c0:	13000003 	movwne	r0, #3
    b0c4:	00003c83 	andeq	r3, r0, r3, lsl #25
    b0c8:	07030707 	streq	r0, [r3, -r7, lsl #14]
    b0cc:	0000008f 	andeq	r0, r0, pc, lsl #1
    b0d0:	0faf1300 	svceq	0x00af1300
    b0d4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    b0d8:	00c20803 	sbceq	r0, r2, r3, lsl #16
    b0dc:	00040000 	andeq	r0, r4, r0
    b0e0:	0009f90e 	andeq	pc, r9, lr, lsl #18
    b0e4:	03090700 	movweq	r0, #38656	; 0x9700
    b0e8:	0002e003 	andeq	lr, r2, r3
    b0ec:	00201400 	eoreq	r1, r0, r0, lsl #8
    b0f0:	07300000 	ldreq	r0, [r0, -r0]!
    b0f4:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    b0f8:	13000003 	movwne	r0, #3
    b0fc:	00001f06 	andeq	r1, r0, r6, lsl #30
    b100:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    b104:	0000008f 	andeq	r0, r0, pc, lsl #1
    b108:	0bd71300 	bleq	ff5cfd10 <_estack+0xdf5cad10>
    b10c:	15070000 	strne	r0, [r7, #-0]
    b110:	008f0803 	addeq	r0, pc, r3, lsl #16
    b114:	13020000 	movwne	r0, #8192	; 0x2000
    b118:	00004c70 	andeq	r4, r0, r0, ror ip
    b11c:	0b031607 	bleq	d0940 <__ccfg+0xb0998>
    b120:	00000284 	andeq	r0, r0, r4, lsl #5
    b124:	47361304 	ldrmi	r1, [r6, -r4, lsl #6]!
    b128:	17070000 	strne	r0, [r7, -r0]
    b12c:	00c20903 	sbceq	r0, r2, r3, lsl #18
    b130:	13080000 	movwne	r0, #32768	; 0x8000
    b134:	0000000f 	andeq	r0, r0, pc
    b138:	0f031807 	svceq	0x00031807
    b13c:	00000377 	andeq	r0, r0, r7, ror r3
    b140:	094d130c 	stmdbeq	sp, {r2, r3, r8, r9, ip}^
    b144:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    b148:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    b14c:	002c0000 	eoreq	r0, ip, r0
    b150:	0003070c 	andeq	r0, r3, ip, lsl #14
    b154:	00038700 	andeq	r8, r3, r0, lsl #14
    b158:	00881500 	addeq	r1, r8, r0, lsl #10
    b15c:	00030000 	andeq	r0, r3, r0
    b160:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    b164:	cc0e0000 	stcgt	0, cr0, [lr], {-0}
    b168:	0700000b 	streq	r0, [r0, -fp]
    b16c:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    b170:	11000003 	tstne	r0, r3
    b174:	00000bac 	andeq	r0, r0, ip, lsr #23
    b178:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    b17c:	000003a9 	andeq	r0, r0, r9, lsr #7
    b180:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    b184:	0000038d 	andeq	r0, r0, sp, lsl #7
    b188:	28120116 	ldmdacs	r2, {r1, r2, r4, r8}
    b18c:	1d010000 	stcne	0, cr0, [r1, #-0]
    b190:	31380101 	teqcc	r8, r1, lsl #2
    b194:	31a80000 			; <UNDEFINED> instruction: 0x31a80000
    b198:	9c010000 	stcls	0, cr0, [r1], {-0}
    b19c:	0000042a 	andeq	r0, r0, sl, lsr #8
    b1a0:	000c2317 	andeq	r2, ip, r7, lsl r3
    b1a4:	011d0100 	tsteq	sp, r0, lsl #2
    b1a8:	0000008f 	andeq	r0, r0, pc, lsl #1
    b1ac:	00002e16 	andeq	r2, r0, r6, lsl lr
    b1b0:	00473618 	subeq	r3, r7, r8, lsl r6
    b1b4:	011d0100 	tsteq	sp, r0, lsl #2
    b1b8:	0000042a 	andeq	r0, r0, sl, lsr #8
    b1bc:	00002e3f 	andeq	r2, r0, pc, lsr lr
    b1c0:	00281e19 	eoreq	r1, r8, r9, lsl lr
    b1c4:	01300100 	teqeq	r0, r0, lsl #2
    b1c8:	000f601a 	andeq	r6, pc, sl, lsl r0	; <UNPREDICTABLE>
    b1cc:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    b1d0:	22010072 	andcs	r0, r1, #114	; 0x72
    b1d4:	00042a15 	andeq	r2, r4, r5, lsl sl
    b1d8:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    b1dc:	1b200006 	blne	80b1fc <__ccfg+0x7eb254>
    b1e0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    b1e4:	810d2301 	tsthi	sp, r1, lsl #6
    b1e8:	05000000 	streq	r0, [r0, #-0]
    b1ec:	00063003 	andeq	r3, r6, r3
    b1f0:	27c71820 	strbcs	r1, [r7, r0, lsr #16]
    b1f4:	24010000 	strcs	r0, [r1], #-0
    b1f8:	00008106 	andeq	r8, r0, r6, lsl #2
    b1fc:	002e6900 	eoreq	r6, lr, r0, lsl #18
    b200:	0b000000 	bleq	b208 <__exidx_end+0x5608>
    b204:	00019604 	andeq	r9, r1, r4, lsl #12
    b208:	04400000 	strbeq	r0, [r0], #-0
    b20c:	00030000 	andeq	r0, r3, r0
    b210:	00002970 	andeq	r2, r0, r0, ror r9
    b214:	00a30104 	adceq	r0, r3, r4, lsl #2
    b218:	340c0000 	strcc	r0, [ip], #-0
    b21c:	ec000028 	stc	0, cr0, [r0], {40}	; 0x28
    b220:	a800000d 	stmdage	r0, {r0, r2, r3}
    b224:	0000000f 	andeq	r0, r0, pc
    b228:	2d000000 	stccs	0, cr0, [r0, #-0]
    b22c:	02000068 	andeq	r0, r0, #104	; 0x68
    b230:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
    b234:	02020000 	andeq	r0, r2, #0
    b238:	000a5b05 	andeq	r5, sl, r5, lsl #22
    b23c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    b240:	000007ed 	andeq	r0, r0, sp, ror #15
    b244:	e8050802 	stmda	r5, {r1, fp}
    b248:	03000007 	movweq	r0, #7
    b24c:	000029fe 	strdeq	r2, [r0], -lr
    b250:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    b254:	02000000 	andeq	r0, r0, #0
    b258:	0c4b0801 	mcrreq	8, 0, r0, fp, cr1
    b25c:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    b260:	0200002d 	andeq	r0, r0, #45	; 0x2d
    b264:	00601931 	rsbeq	r1, r0, r1, lsr r9
    b268:	02020000 	andeq	r0, r2, #0
    b26c:	000d4807 	andeq	r4, sp, r7, lsl #16
    b270:	29960300 	ldmibcs	r6, {r8, r9}
    b274:	34020000 	strcc	r0, [r2], #-0
    b278:	00007319 	andeq	r7, r0, r9, lsl r3
    b27c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b280:	0000041d 	andeq	r0, r0, sp, lsl r4
    b284:	18070802 	stmdane	r7, {r1, fp}
    b288:	04000004 	streq	r0, [r0], #-4
    b28c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b290:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b294:	00042207 	andeq	r2, r4, r7, lsl #4
    b298:	28dd0300 	ldmcs	sp, {r8, r9}^
    b29c:	27030000 	strcs	r0, [r3, -r0]
    b2a0:	00005412 	andeq	r5, r0, r2, lsl r4
    b2a4:	008f0500 	addeq	r0, pc, r0, lsl #10
    b2a8:	a4030000 	strge	r0, [r3], #-0
    b2ac:	0300001d 	movweq	r0, #29
    b2b0:	0041122b 	subeq	r1, r1, fp, lsr #4
    b2b4:	a0060000 	andge	r0, r6, r0
    b2b8:	03000000 	movweq	r0, #0
    b2bc:	0000292f 	andeq	r2, r0, pc, lsr #18
    b2c0:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    b2c4:	05000000 	streq	r0, [r0, #-0]
    b2c8:	000000b1 	strheq	r0, [r0], -r1
    b2cc:	00063603 	andeq	r3, r6, r3, lsl #12
    b2d0:	122d0300 	eorne	r0, sp, #0, 6
    b2d4:	00000067 	andeq	r0, r0, r7, rrx
    b2d8:	000ba403 	andeq	sl, fp, r3, lsl #8
    b2dc:	102e0300 	eorne	r0, lr, r0, lsl #6
    b2e0:	000000da 	ldrdeq	r0, [r0], -sl
    b2e4:	008f0407 	addeq	r0, pc, r7, lsl #8
    b2e8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    b2ec:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    b2f0:	09000001 	stmdbeq	r0, {r0}
    b2f4:	0000002b 	andeq	r0, r0, fp, lsr #32
    b2f8:	a0073403 	andge	r3, r7, r3, lsl #8
    b2fc:	01000000 	mrseq	r0, (UNDEF: 0)
    b300:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    b304:	0000063c 	andeq	r0, r0, ip, lsr r6
    b308:	a0033503 	andge	r3, r3, r3, lsl #10
    b30c:	01000000 	mrseq	r0, (UNDEF: 0)
    b310:	09000601 	stmdbeq	r0, {r0, r9, sl}
    b314:	000002de 	ldrdeq	r0, [r0], -lr
    b318:	a0033603 	andge	r3, r3, r3, lsl #12
    b31c:	01000000 	mrseq	r0, (UNDEF: 0)
    b320:	09000501 	stmdbeq	r0, {r0, r8, sl}
    b324:	000006a7 	andeq	r0, r0, r7, lsr #13
    b328:	a0033703 	andge	r3, r3, r3, lsl #14
    b32c:	01000000 	mrseq	r0, (UNDEF: 0)
    b330:	09000401 	stmdbeq	r0, {r0, sl}
    b334:	00000a8f 	andeq	r0, r0, pc, lsl #21
    b338:	a0033803 	andge	r3, r3, r3, lsl #16
    b33c:	01000000 	mrseq	r0, (UNDEF: 0)
    b340:	0a000004 	beq	b358 <__exidx_end+0x5758>
    b344:	0000064b 	andeq	r0, r0, fp, asr #12
    b348:	a0073a03 	andge	r3, r7, r3, lsl #20
    b34c:	01000000 	mrseq	r0, (UNDEF: 0)
    b350:	0008eb0a 	andeq	lr, r8, sl, lsl #22
    b354:	033c0300 	teqeq	ip, #0, 6
    b358:	000000a0 	andeq	r0, r0, r0, lsr #1
    b35c:	0f1c0a02 	svceq	0x001c0a02
    b360:	3d030000 	stccc	0, cr0, [r3, #-0]
    b364:	0000a003 	andeq	sl, r0, r3
    b368:	030a0300 	movweq	r0, #41728	; 0xa300
    b36c:	03000009 	movweq	r0, #9
    b370:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    b374:	00040000 	andeq	r0, r4, r0
    b378:	00031403 	andeq	r1, r3, r3, lsl #8
    b37c:	03410300 	movteq	r0, #4864	; 0x1300
    b380:	000000e0 	andeq	r0, r0, r0, ror #1
    b384:	00016e06 	andeq	r6, r1, r6, lsl #28
    b388:	06ae0b00 	strteq	r0, [lr], r0, lsl #22
    b38c:	43030000 	movwmi	r0, #12288	; 0x3000
    b390:	00017a1a 	andeq	r7, r1, sl, lsl sl
    b394:	0b010100 	bleq	4b79c <__ccfg+0x2b7f4>
    b398:	00000197 	muleq	r0, r7, r1
    b39c:	9b0e4503 	blls	39c7b0 <__ccfg+0x37c808>
    b3a0:	01000001 	tsteq	r0, r1
    b3a4:	a1040701 	tstge	r4, r1, lsl #14
    b3a8:	02000001 	andeq	r0, r0, #1
    b3ac:	0c540801 	mrrceq	8, 0, r0, r4, cr1
    b3b0:	a1050000 	mrsge	r0, (UNDEF: 5)
    b3b4:	0b000001 	bleq	b3c0 <__exidx_end+0x57c0>
    b3b8:	0000031d 	andeq	r0, r0, sp, lsl r3
    b3bc:	9b1e4503 	blls	79c7d0 <__ccfg+0x77c828>
    b3c0:	01000001 	tsteq	r0, r1
    b3c4:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    b3c8:	01ec098f 	mvneq	r0, pc, lsl #19
    b3cc:	ba0a0000 	blt	28b3d4 <__ccfg+0x26b42c>
    b3d0:	0400000c 	streq	r0, [r0], #-12
    b3d4:	00670b90 	mlseq	r7, r0, fp, r0
    b3d8:	0a000000 	beq	b3e0 <__exidx_end+0x57e0>
    b3dc:	00001057 	andeq	r1, r0, r7, asr r0
    b3e0:	8f089104 	svchi	0x00089104
    b3e4:	04000000 	streq	r0, [r0], #-0
    b3e8:	0001bc0a 	andeq	fp, r1, sl, lsl #24
    b3ec:	10920400 	addsne	r0, r2, r0, lsl #8
    b3f0:	000000ac 	andeq	r0, r0, ip, lsr #1
    b3f4:	ae030006 	cdpge	0, 0, cr0, cr3, cr6, {0}
    b3f8:	0400000c 	streq	r0, [r0], #-12
    b3fc:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    b400:	ec0c0000 	stc	0, cr0, [ip], {-0}
    b404:	03000001 	movweq	r0, #1
    b408:	0d000002 	stceq	0, cr0, [r0, #-8]
    b40c:	092d0b00 	pusheq	{r8, r9, fp}
    b410:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    b414:	0001f80f 	andeq	pc, r1, pc, lsl #16
    b418:	08010100 	stmdaeq	r1, {r8}
    b41c:	09910501 	ldmibeq	r1, {r0, r8, sl}
    b420:	0000023b 	andeq	r0, r0, fp, lsr r2
    b424:	00090a09 	andeq	r0, r9, r9, lsl #20
    b428:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    b42c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b430:	00010701 	andeq	r0, r1, r1, lsl #14
    b434:	0005bc09 	andeq	fp, r5, r9, lsl #24
    b438:	03940500 	orrseq	r0, r4, #0, 10
    b43c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b440:	00000101 	andeq	r0, r0, r1, lsl #2
    b444:	0a9b0300 	beq	fe6cc04c <_estack+0xde6c704c>
    b448:	96050000 	strls	r0, [r5], -r0
    b44c:	00021103 	andeq	r1, r2, r3, lsl #2
    b450:	023b0500 	eorseq	r0, fp, #0, 10
    b454:	470c0000 	strmi	r0, [ip, -r0]
    b458:	57000002 	strpl	r0, [r0, -r2]
    b45c:	0d000002 	stceq	0, cr0, [r0, #-8]
    b460:	024c0500 	subeq	r0, ip, #0, 10
    b464:	a10b0000 	mrsge	r0, (UNDEF: 11)
    b468:	05000003 	streq	r0, [r0, #-3]
    b46c:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    b470:	01010000 	mrseq	r0, (UNDEF: 1)
    b474:	00009b0c 	andeq	r9, r0, ip, lsl #22
    b478:	00027500 	andeq	r7, r2, r0, lsl #10
    b47c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b480:	0000026a 	andeq	r0, r0, sl, ror #4
    b484:	0005fe0b 	andeq	pc, r5, fp, lsl #28
    b488:	13060600 	movwne	r0, #26112	; 0x6600
    b48c:	00000275 	andeq	r0, r0, r5, ror r2
    b490:	cd0b0101 	stfgts	f0, [fp, #-4]
    b494:	04000008 	streq	r0, [r0], #-8
    b498:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    b49c:	01010000 	mrseq	r0, (UNDEF: 1)
    b4a0:	000c620e 	andeq	r6, ip, lr, lsl #4
    b4a4:	016e0700 	cmneq	lr, r0, lsl #14
    b4a8:	0002a310 	andeq	sl, r2, r0, lsl r3
    b4ac:	a9040700 	stmdbge	r4, {r8, r9, sl}
    b4b0:	0f000002 	svceq	0x00000002
    b4b4:	0002b501 	andeq	fp, r2, r1, lsl #10
    b4b8:	008f1000 	addeq	r1, pc, r0
    b4bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    b4c0:	000001a8 	andeq	r0, r0, r8, lsr #3
    b4c4:	000002c0 	andeq	r0, r0, r0, asr #5
    b4c8:	b505000d 	strlt	r0, [r5, #-13]
    b4cc:	11000002 	tstne	r0, r2
    b4d0:	000009d6 	ldrdeq	r0, [r0], -r6
    b4d4:	16017f07 	strne	r7, [r1], -r7, lsl #30
    b4d8:	000002c0 	andeq	r0, r0, r0, asr #5
    b4dc:	8d110101 	ldfhis	f0, [r1, #-4]
    b4e0:	07000003 	streq	r0, [r0, -r3]
    b4e4:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    b4e8:	01000000 	mrseq	r0, (UNDEF: 0)
    b4ec:	03651101 	cmneq	r5, #1073741824	; 0x40000000
    b4f0:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    b4f4:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    b4f8:	01010000 	mrseq	r0, (UNDEF: 1)
    b4fc:	03070812 	movweq	r0, #30738	; 0x7812
    b500:	03190903 	tsteq	r9, #49152	; 0xc000
    b504:	83130000 	tsthi	r3, #0
    b508:	0700003c 	smladxeq	r0, ip, r0, r0
    b50c:	8f070307 	svchi	0x00070307
    b510:	00000000 	andeq	r0, r0, r0
    b514:	000faf13 	andeq	sl, pc, r3, lsl pc	; <UNPREDICTABLE>
    b518:	03080700 	movweq	r0, #34560	; 0x8700
    b51c:	0000c208 	andeq	ip, r0, r8, lsl #4
    b520:	0e000400 	cfcpyseq	mvf0, mvf0
    b524:	000009f9 	strdeq	r0, [r0], -r9
    b528:	03030907 	movweq	r0, #14599	; 0x3907
    b52c:	000002f2 	strdeq	r0, [r0], -r2
    b530:	00002014 	andeq	r2, r0, r4, lsl r0
    b534:	0b073000 	bleq	1d753c <__ccfg+0x1b7594>
    b538:	03890803 	orreq	r0, r9, #196608	; 0x30000
    b53c:	06130000 	ldreq	r0, [r3], -r0
    b540:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    b544:	8f080314 	svchi	0x00080314
    b548:	00000000 	andeq	r0, r0, r0
    b54c:	000bd713 	andeq	sp, fp, r3, lsl r7
    b550:	03150700 	tsteq	r5, #0, 14
    b554:	00008f08 	andeq	r8, r0, r8, lsl #30
    b558:	70130200 	andsvc	r0, r3, r0, lsl #4
    b55c:	0700004c 	streq	r0, [r0, -ip, asr #32]
    b560:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    b564:	04000002 	streq	r0, [r0], #-2
    b568:	00473613 	subeq	r3, r7, r3, lsl r6
    b56c:	03170700 	tsteq	r7, #0, 14
    b570:	0000c209 	andeq	ip, r0, r9, lsl #4
    b574:	0f130800 	svceq	0x00130800
    b578:	07000000 	streq	r0, [r0, -r0]
    b57c:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    b580:	0c000003 	stceq	0, cr0, [r0], {3}
    b584:	00094d13 	andeq	r4, r9, r3, lsl sp
    b588:	03190700 	tsteq	r9, #0, 14
    b58c:	00039915 	andeq	r9, r3, r5, lsl r9
    b590:	0c002c00 	stceq	12, cr2, [r0], {-0}
    b594:	00000319 	andeq	r0, r0, r9, lsl r3
    b598:	00000399 	muleq	r0, r9, r3
    b59c:	00008815 	andeq	r8, r0, r5, lsl r8
    b5a0:	07000300 	streq	r0, [r0, -r0, lsl #6]
    b5a4:	00032604 	andeq	r2, r3, r4, lsl #12
    b5a8:	0bcc0e00 	bleq	ff30edb0 <_estack+0xdf309db0>
    b5ac:	1c070000 	stcne	0, cr0, [r7], {-0}
    b5b0:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    b5b4:	ac110000 	ldcge	0, cr0, [r1], {-0}
    b5b8:	0700000b 	streq	r0, [r0, -fp]
    b5bc:	bb14031e 	bllt	50c23c <__ccfg+0x4ec294>
    b5c0:	01000003 	tsteq	r0, r3
    b5c4:	9f040701 	svcls	0x00040701
    b5c8:	16000003 	strne	r0, [r0], -r3
    b5cc:	00001e3b 	andeq	r1, r0, fp, lsr lr
    b5d0:	9b070d01 	blls	1ce9dc <__ccfg+0x1aea34>
    b5d4:	01000001 	tsteq	r0, r1
    b5d8:	06380305 	ldrteq	r0, [r8], -r5, lsl #6
    b5dc:	01172000 	tsteq	r7, r0
    b5e0:	00002829 	andeq	r2, r0, r9, lsr #16
    b5e4:	01012301 	tsteq	r1, r1, lsl #6
    b5e8:	000031a8 	andeq	r3, r0, r8, lsr #3
    b5ec:	000032c4 	andeq	r3, r0, r4, asr #5
    b5f0:	23189c01 	tstcs	r8, #256	; 0x100
    b5f4:	0100000c 	tsteq	r0, ip
    b5f8:	008f0123 	addeq	r0, pc, r3, lsr #2
    b5fc:	2e7c0000 	cdpcs	0, 7, cr0, cr12, cr0, {0}
    b600:	36190000 	ldrcc	r0, [r9], -r0
    b604:	01000047 	tsteq	r0, r7, asr #32
    b608:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    b60c:	2e9a0000 	cdpcs	0, 9, cr0, cr10, cr0, {0}
    b610:	881a0000 	ldmdahi	sl, {}	; <UNPREDICTABLE>
    b614:	1b00000f 	blne	b658 <__exidx_end+0x5a58>
    b618:	00727470 	rsbseq	r7, r2, r0, ror r4
    b61c:	9b0f2801 	blls	3d5628 <__ccfg+0x3b5680>
    b620:	05000001 	streq	r0, [r0, #-1]
    b624:	00064003 	andeq	r4, r6, r3
    b628:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    b62c:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    b630:	0000810d 	andeq	r8, r0, sp, lsl #2
    b634:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    b638:	19200006 	stmdbne	r0!, {r1, r2}
    b63c:	000027c7 	andeq	r2, r0, r7, asr #15
    b640:	81062a01 	tsthi	r6, r1, lsl #20
    b644:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    b648:	0000002e 	andeq	r0, r0, lr, lsr #32
    b64c:	05f00000 	ldrbeq	r0, [r0, #0]!
    b650:	00030000 	andeq	r0, r3, r0
    b654:	00002ae8 	andeq	r2, r0, r8, ror #21
    b658:	00a30104 	adceq	r0, r3, r4, lsl #2
    b65c:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    b660:	ec000028 	stc	0, cr0, [r0], {40}	; 0x28
    b664:	3000000d 	andcc	r0, r0, sp
    b668:	00000010 	andeq	r0, r0, r0, lsl r0
    b66c:	7f000000 	svcvc	0x00000000
    b670:	0200006a 	andeq	r0, r0, #106	; 0x6a
    b674:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
    b678:	02020000 	andeq	r0, r2, #0
    b67c:	000a5b05 	andeq	r5, sl, r5, lsl #22
    b680:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    b684:	000007ed 	andeq	r0, r0, sp, ror #15
    b688:	e8050802 	stmda	r5, {r1, fp}
    b68c:	03000007 	movweq	r0, #7
    b690:	000029fe 	strdeq	r2, [r0], -lr
    b694:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    b698:	02000000 	andeq	r0, r0, #0
    b69c:	0c4b0801 	mcrreq	8, 0, r0, fp, cr1
    b6a0:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    b6a4:	0200002d 	andeq	r0, r0, #45	; 0x2d
    b6a8:	00601931 	rsbeq	r1, r0, r1, lsr r9
    b6ac:	02020000 	andeq	r0, r2, #0
    b6b0:	000d4807 	andeq	r4, sp, r7, lsl #16
    b6b4:	29960300 	ldmibcs	r6, {r8, r9}
    b6b8:	34020000 	strcc	r0, [r2], #-0
    b6bc:	00007319 	andeq	r7, r0, r9, lsl r3
    b6c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b6c4:	0000041d 	andeq	r0, r0, sp, lsl r4
    b6c8:	18070802 	stmdane	r7, {r1, fp}
    b6cc:	04000004 	streq	r0, [r0], #-4
    b6d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b6d4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b6d8:	00042207 	andeq	r2, r4, r7, lsl #4
    b6dc:	050e0300 	streq	r0, [lr, #-768]	; 0xfffffd00
    b6e0:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    b6e4:	00009b1b 	andeq	r9, r0, fp, lsl fp
    b6e8:	0b800500 	bleq	fe00caf0 <_estack+0xde007af0>
    b6ec:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    b6f0:	0000b300 	andeq	fp, r0, r0, lsl #6
    b6f4:	085d0600 	ldmdaeq	sp, {r9, sl}^
    b6f8:	00b30000 	adcseq	r0, r3, r0
    b6fc:	01000000 	mrseq	r0, (UNDEF: 0)
    b700:	03040700 	movweq	r0, #18176	; 0x4700
    b704:	00000b82 	andeq	r0, r0, r2, lsl #23
    b708:	8f186303 	svchi	0x00186303
    b70c:	03000000 	movweq	r0, #0
    b710:	000028dd 	ldrdeq	r2, [r0], -sp
    b714:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    b718:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b71c:	000000c1 	andeq	r0, r0, r1, asr #1
    b720:	001da403 	andseq	sl, sp, r3, lsl #8
    b724:	122b0400 	eorne	r0, fp, #0, 8
    b728:	00000041 	andeq	r0, r0, r1, asr #32
    b72c:	0000d209 	andeq	sp, r0, r9, lsl #4
    b730:	292f0300 	stmdbcs	pc!, {r8, r9}	; <UNPREDICTABLE>
    b734:	2c040000 	stccs	0, cr0, [r4], {-0}
    b738:	00006712 	andeq	r6, r0, r2, lsl r7
    b73c:	00e30800 	rsceq	r0, r3, r0, lsl #16
    b740:	36030000 	strcc	r0, [r3], -r0
    b744:	04000006 	streq	r0, [r0], #-6
    b748:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    b74c:	a4030000 	strge	r0, [r3], #-0
    b750:	0400000b 	streq	r0, [r0], #-11
    b754:	010c102e 	tsteq	ip, lr, lsr #32
    b758:	040a0000 	streq	r0, [sl], #-0
    b75c:	000000c1 	andeq	r0, r0, r1, asr #1
    b760:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    b764:	0001a009 	andeq	sl, r1, r9
    b768:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    b76c:	34040000 	strcc	r0, [r4], #-0
    b770:	0000d207 	andeq	sp, r0, r7, lsl #4
    b774:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b778:	063c0c00 	ldrteq	r0, [ip], -r0, lsl #24
    b77c:	35040000 	strcc	r0, [r4, #-0]
    b780:	0000d203 	andeq	sp, r0, r3, lsl #4
    b784:	06010100 	streq	r0, [r1], -r0, lsl #2
    b788:	02de0c00 	sbcseq	r0, lr, #0, 24
    b78c:	36040000 	strcc	r0, [r4], -r0
    b790:	0000d203 	andeq	sp, r0, r3, lsl #4
    b794:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    b798:	06a70c00 	strteq	r0, [r7], r0, lsl #24
    b79c:	37040000 	strcc	r0, [r4, -r0]
    b7a0:	0000d203 	andeq	sp, r0, r3, lsl #4
    b7a4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    b7a8:	0a8f0c00 	beq	fe3ce7b0 <_estack+0xde3c97b0>
    b7ac:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    b7b0:	0000d203 	andeq	sp, r0, r3, lsl #4
    b7b4:	00040100 	andeq	r0, r4, r0, lsl #2
    b7b8:	064b0d00 	strbeq	r0, [fp], -r0, lsl #26
    b7bc:	3a040000 	bcc	10b7c4 <__ccfg+0xeb81c>
    b7c0:	0000d207 	andeq	sp, r0, r7, lsl #4
    b7c4:	eb0d0100 	bl	34bbcc <__ccfg+0x32bc24>
    b7c8:	04000008 	streq	r0, [r0], #-8
    b7cc:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    b7d0:	0d020000 	stceq	0, cr0, [r2, #-0]
    b7d4:	00000f1c 	andeq	r0, r0, ip, lsl pc
    b7d8:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    b7dc:	03000000 	movweq	r0, #0
    b7e0:	0009030d 	andeq	r0, r9, sp, lsl #6
    b7e4:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    b7e8:	000000e3 	andeq	r0, r0, r3, ror #1
    b7ec:	14030004 	strne	r0, [r3], #-4
    b7f0:	04000003 	streq	r0, [r0], #-3
    b7f4:	01120341 	tsteq	r2, r1, asr #6
    b7f8:	a0090000 	andge	r0, r9, r0
    b7fc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    b800:	000006ae 	andeq	r0, r0, lr, lsr #13
    b804:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    b808:	01000001 	tsteq	r0, r1
    b80c:	01970e01 	orrseq	r0, r7, r1, lsl #28
    b810:	45040000 	strmi	r0, [r4, #-0]
    b814:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    b818:	0a010100 	beq	4bc20 <__ccfg+0x2bc78>
    b81c:	0001d304 	andeq	sp, r1, r4, lsl #6
    b820:	08010200 	stmdaeq	r1, {r9}
    b824:	00000c54 	andeq	r0, r0, r4, asr ip
    b828:	0001d308 	andeq	sp, r1, r8, lsl #6
    b82c:	031d0e00 	tsteq	sp, #0, 28
    b830:	45040000 	strmi	r0, [r4, #-0]
    b834:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    b838:	0b010100 	bleq	4bc40 <__ccfg+0x2bc98>
    b83c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    b840:	0000021e 	andeq	r0, r0, lr, lsl r2
    b844:	000cba0d 	andeq	fp, ip, sp, lsl #20
    b848:	0b900500 	bleq	fe40cc50 <_estack+0xde407c50>
    b84c:	00000067 	andeq	r0, r0, r7, rrx
    b850:	10570d00 	subsne	r0, r7, r0, lsl #26
    b854:	91050000 	mrsls	r0, (UNDEF: 5)
    b858:	0000c108 	andeq	ip, r0, r8, lsl #2
    b85c:	bc0d0400 	cfstrslt	mvf0, [sp], {-0}
    b860:	05000001 	streq	r0, [r0, #-1]
    b864:	00de1092 	smullseq	r1, lr, r2, r0
    b868:	00060000 	andeq	r0, r6, r0
    b86c:	000cae03 	andeq	sl, ip, r3, lsl #28
    b870:	03930500 	orrseq	r0, r3, #0, 10
    b874:	000001ed 	andeq	r0, r0, sp, ror #3
    b878:	00021e0f 	andeq	r1, r2, pc, lsl #28
    b87c:	00023500 	andeq	r3, r2, r0, lsl #10
    b880:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    b884:	0000092d 	andeq	r0, r0, sp, lsr #18
    b888:	2a0f9905 	bcs	3f1ca4 <__ccfg+0x3d1cfc>
    b88c:	01000002 	tsteq	r0, r2
    b890:	06010b01 	streq	r0, [r1], -r1, lsl #22
    b894:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    b898:	0a0c0000 	beq	30b8a0 <__ccfg+0x2eb8f8>
    b89c:	06000009 	streq	r0, [r0], -r9
    b8a0:	00d20793 	smullseq	r0, r2, r3, r7
    b8a4:	07010000 	streq	r0, [r1, -r0]
    b8a8:	bc0c0001 	stclt	0, cr0, [ip], {1}
    b8ac:	06000005 	streq	r0, [r0], -r5
    b8b0:	00d20394 	smullseq	r0, r2, r4, r3
    b8b4:	01010000 	mrseq	r0, (UNDEF: 1)
    b8b8:	03000000 	movweq	r0, #0
    b8bc:	00000a9b 	muleq	r0, fp, sl
    b8c0:	43039606 	movwmi	r9, #13830	; 0x3606
    b8c4:	08000002 	stmdaeq	r0, {r1}
    b8c8:	0000026d 	andeq	r0, r0, sp, ror #4
    b8cc:	0002790f 	andeq	r7, r2, pc, lsl #18
    b8d0:	00028900 	andeq	r8, r2, r0, lsl #18
    b8d4:	08001000 	stmdaeq	r0, {ip}
    b8d8:	0000027e 	andeq	r0, r0, lr, ror r2
    b8dc:	0003a10e 	andeq	sl, r3, lr, lsl #2
    b8e0:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    b8e4:	00000289 	andeq	r0, r0, r9, lsl #5
    b8e8:	cd0f0101 	stfgts	f0, [pc, #-4]	; b8ec <__exidx_end+0x5cec>
    b8ec:	a7000000 	strge	r0, [r0, -r0]
    b8f0:	10000002 	andne	r0, r0, r2
    b8f4:	029c0800 	addseq	r0, ip, #0, 16
    b8f8:	fe0e0000 	cdp2	0, 0, cr0, cr14, cr0, {0}
    b8fc:	07000005 	streq	r0, [r0, -r5]
    b900:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    b904:	01010000 	mrseq	r0, (UNDEF: 1)
    b908:	0008cd0e 	andeq	ip, r8, lr, lsl #26
    b90c:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    b910:	000000e3 	andeq	r0, r0, r3, ror #1
    b914:	62110101 	andsvs	r0, r1, #1073741824	; 0x40000000
    b918:	0800000c 	stmdaeq	r0, {r2, r3}
    b91c:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    b920:	0a000002 	beq	b930 <__exidx_end+0x5d30>
    b924:	0002db04 	andeq	sp, r2, r4, lsl #22
    b928:	e7011200 	str	r1, [r1, -r0, lsl #4]
    b92c:	13000002 	movwne	r0, #2
    b930:	000000c1 	andeq	r0, r0, r1, asr #1
    b934:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    b938:	02f20000 	rscseq	r0, r2, #0
    b93c:	00100000 	andseq	r0, r0, r0
    b940:	0002e708 	andeq	lr, r2, r8, lsl #14
    b944:	09d61400 	ldmibeq	r6, {sl, ip}^
    b948:	7f080000 	svcvc	0x00080000
    b94c:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    b950:	01010000 	mrseq	r0, (UNDEF: 1)
    b954:	00038d14 	andeq	r8, r3, r4, lsl sp
    b958:	01820800 	orreq	r0, r2, r0, lsl #16
    b95c:	0000ef14 	andeq	lr, r0, r4, lsl pc
    b960:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    b964:	00000365 	andeq	r0, r0, r5, ror #6
    b968:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    b96c:	000000e3 	andeq	r0, r0, r3, ror #1
    b970:	08150101 	ldmdaeq	r5, {r0, r8}
    b974:	09030308 	stmdbeq	r3, {r3, r8, r9}
    b978:	0000034b 	andeq	r0, r0, fp, asr #6
    b97c:	003c8316 	eorseq	r8, ip, r6, lsl r3
    b980:	03070800 	movweq	r0, #30720	; 0x7800
    b984:	0000c107 	andeq	ip, r0, r7, lsl #2
    b988:	af160000 	svcge	0x00160000
    b98c:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    b990:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    b994:	04000000 	streq	r0, [r0], #-0
    b998:	09f91100 	ldmibeq	r9!, {r8, ip}^
    b99c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    b9a0:	03240303 			; <UNDEFINED> instruction: 0x03240303
    b9a4:	20170000 	andscs	r0, r7, r0
    b9a8:	30000000 	andcc	r0, r0, r0
    b9ac:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    b9b0:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    b9b4:	001f0616 	andseq	r0, pc, r6, lsl r6	; <UNPREDICTABLE>
    b9b8:	03140800 	tsteq	r4, #0, 16
    b9bc:	0000c108 	andeq	ip, r0, r8, lsl #2
    b9c0:	d7160000 	ldrle	r0, [r6, -r0]
    b9c4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    b9c8:	c1080315 	tstgt	r8, r5, lsl r3
    b9cc:	02000000 	andeq	r0, r0, #0
    b9d0:	004c7016 	subeq	r7, ip, r6, lsl r0
    b9d4:	03160800 	tsteq	r6, #0, 16
    b9d8:	0002c80b 	andeq	ip, r2, fp, lsl #16
    b9dc:	36160400 	ldrcc	r0, [r6], -r0, lsl #8
    b9e0:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    b9e4:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    b9e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b9ec:	00000f16 	andeq	r0, r0, r6, lsl pc
    b9f0:	03180800 	tsteq	r8, #0, 16
    b9f4:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    b9f8:	4d160c00 	ldcmi	12, cr0, [r6, #-0]
    b9fc:	08000009 	stmdaeq	r0, {r0, r3}
    ba00:	cb150319 	blgt	54c66c <__ccfg+0x52c6c4>
    ba04:	2c000003 	stccs	0, cr0, [r0], {3}
    ba08:	034b0f00 	movteq	r0, #48896	; 0xbf00
    ba0c:	03cb0000 	biceq	r0, fp, #0
    ba10:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    ba14:	03000000 	movweq	r0, #0
    ba18:	58040a00 	stmdapl	r4, {r9, fp}
    ba1c:	11000003 	tstne	r0, r3
    ba20:	00000bcc 	andeq	r0, r0, ip, asr #23
    ba24:	1b031c08 	blne	d2a4c <__ccfg+0xb2aa4>
    ba28:	00000358 	andeq	r0, r0, r8, asr r3
    ba2c:	000bac14 	andeq	sl, fp, r4, lsl ip
    ba30:	031e0800 	tsteq	lr, #0, 16
    ba34:	0003ed14 	andeq	lr, r3, r4, lsl sp
    ba38:	0a010100 	beq	4be40 <__ccfg+0x2be98>
    ba3c:	0003d104 	andeq	sp, r3, r4, lsl #2
    ba40:	cf011900 	svcgt	0x00011900
    ba44:	01000028 	tsteq	r0, r8, lsr #32
    ba48:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    ba4c:	14000001 	strne	r0, [r0], #-1
    ba50:	64000035 	strvs	r0, [r0], #-53	; 0xffffffcb
    ba54:	01000035 	tsteq	r0, r5, lsr r0
    ba58:	0004689c 	muleq	r4, ip, r8
    ba5c:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    ba60:	91010073 	tstls	r1, r3, ror r0
    ba64:	0001cd14 	andeq	ip, r1, r4, lsl sp
    ba68:	002f0e00 	eoreq	r0, pc, r0, lsl #28
    ba6c:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    ba70:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    ba74:	00000468 	andeq	r0, r0, r8, ror #8
    ba78:	00002f58 	andeq	r2, r0, r8, asr pc
    ba7c:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    ba80:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    ba84:	97000000 	strls	r0, [r0, -r0]
    ba88:	1b00002f 	blne	bb4c <__exidx_end+0x5f4c>
    ba8c:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    ba90:	c1079301 	tstgt	r7, r1, lsl #6
    ba94:	cb000000 	blgt	ba9c <__exidx_end+0x5e9c>
    ba98:	1b00002f 	blne	bb5c <__exidx_end+0x5f5c>
    ba9c:	93010064 	movwls	r0, #4196	; 0x1064
    baa0:	0000c10c 	andeq	ip, r0, ip, lsl #2
    baa4:	002fe900 	eoreq	lr, pc, r0, lsl #18
    baa8:	28b71c00 	ldmcs	r7!, {sl, fp, ip}
    baac:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    bab0:	00353e01 	eorseq	r3, r5, r1, lsl #28
    bab4:	040a0000 	streq	r0, [sl], #-0
    bab8:	000001da 	ldrdeq	r0, [r0], -sl
    babc:	28c2011d 	stmiacs	r2, {r0, r2, r3, r4, r8}^
    bac0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    bac4:	00c10106 	sbceq	r0, r1, r6, lsl #2
    bac8:	32e40000 	rsccc	r0, r4, #0
    bacc:	35140000 	ldrcc	r0, [r4, #-0]
    bad0:	9c010000 	stcls	0, cr0, [r1], {-0}
    bad4:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    bad8:	1a080100 	bne	20bee0 <__ccfg+0x1ebf38>
    badc:	000001cd 	andeq	r0, r0, sp, asr #3
    bae0:	00002ffc 	strdeq	r2, [r0], -ip
    bae4:	01006e1a 	tsteq	r0, sl, lsl lr
    bae8:	00c12408 	sbceq	r2, r1, r8, lsl #8
    baec:	300f0000 	andcc	r0, pc, r0
    baf0:	661a0000 	ldrvs	r0, [sl], -r0
    baf4:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    baf8:	00046833 	andeq	r6, r4, r3, lsr r8
    bafc:	00302200 	eorseq	r2, r0, r0, lsl #4
    bb00:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    bb04:	3f080100 	svccc	0x00080100
    bb08:	000000b5 	strheq	r0, [r0], -r5
    bb0c:	0000304b 	andeq	r3, r0, fp, asr #32
    bb10:	0100631b 	tsteq	r0, fp, lsl r3
    bb14:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    bb18:	30ed0000 	rsccc	r0, sp, r0
    bb1c:	641e0000 	ldrvs	r0, [lr], #-0
    bb20:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    bb24:	000000c1 	andeq	r0, r0, r1, asr #1
    bb28:	23549104 	cmpcs	r4, #4, 2
    bb2c:	28bd1f06 	popcs	{r1, r2, r8, r9, sl, fp, ip}
    bb30:	0d010000 	stceq	0, cr0, [r1, #-0]
    bb34:	32c40107 	sbccc	r0, r4, #-1073741823	; 0xc0000001
    bb38:	32e40000 	rsccc	r0, r4, #0
    bb3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    bb40:	23007c05 	movwcs	r7, #3077	; 0xc05
    bb44:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    bb48:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    bb4c:	120d0100 	andne	r0, sp, #0, 2
    bb50:	000000c1 	andeq	r0, r0, r1, asr #1
    bb54:	21005001 	tstcs	r0, r1
    bb58:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    bb5c:	1e018801 	cdpne	8, 0, cr8, cr1, cr1, {0}
    bb60:	21000033 	tstcs	r0, r3, lsr r0
    bb64:	00746552 	rsbseq	r6, r4, r2, asr r5
    bb68:	80018b01 	andhi	r8, r1, r1, lsl #22
    bb6c:	22000033 	andcs	r0, r0, #51	; 0x33
    bb70:	00000fe0 	andeq	r0, r0, r0, ror #31
    bb74:	00000545 	andeq	r0, r0, r5, asr #10
    bb78:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    bb7c:	0a3a0100 	beq	e8bf84 <__ccfg+0xe6bfdc>
    bb80:	000000c1 	andeq	r0, r0, r1, asr #1
    bb84:	0100691b 	tsteq	r0, fp, lsl r9
    bb88:	0081133a 	addeq	r1, r1, sl, lsr r3
    bb8c:	31d30000 	bicscc	r0, r3, r0
    bb90:	22000000 	andcs	r0, r0, #0
    bb94:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    bb98:	0000056d 	andeq	r0, r0, sp, ror #10
    bb9c:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    bba0:	0a460100 	beq	118bfa8 <__ccfg+0x116c000>
    bba4:	000000c1 	andeq	r0, r0, r1, asr #1
    bba8:	000031e6 	andeq	r3, r0, r6, ror #3
    bbac:	0100691b 	tsteq	r0, fp, lsl r9
    bbb0:	00c10f46 	sbceq	r0, r1, r6, asr #30
    bbb4:	320f0000 	andcc	r0, pc, #0
    bbb8:	22000000 	andcs	r0, r0, #0
    bbbc:	00001018 	andeq	r1, r0, r8, lsl r0
    bbc0:	00000595 	muleq	r0, r5, r5
    bbc4:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    bbc8:	0c550100 	ldfeqe	f0, [r5], {-0}
    bbcc:	000000e3 	andeq	r0, r0, r3, ror #1
    bbd0:	00003238 	andeq	r3, r0, r8, lsr r2
    bbd4:	0100691b 	tsteq	r0, fp, lsl r9
    bbd8:	00e31155 	rsceq	r1, r3, r5, asr r1
    bbdc:	324b0000 	subcc	r0, fp, #0
    bbe0:	24000000 	strcs	r0, [r0], #-0
    bbe4:	000034a2 	andeq	r3, r0, r2, lsr #9
    bbe8:	000034cc 	andeq	r3, r0, ip, asr #9
    bbec:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    bbf0:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    bbf4:	0c600100 	stfeqe	f0, [r0], #-0
    bbf8:	000000e3 	andeq	r0, r0, r3, ror #1
    bbfc:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    bc00:	0a610100 	beq	184c008 <__ccfg+0x182c060>
    bc04:	00000081 	andeq	r0, r0, r1, lsl #1
    bc08:	00003274 	andeq	r3, r0, r4, ror r2
    bc0c:	10002200 	andne	r2, r0, r0, lsl #4
    bc10:	05d90000 	ldrbeq	r0, [r9]
    bc14:	761b0000 	ldrvc	r0, [fp], -r0
    bc18:	01006c61 	tsteq	r0, r1, ror #24
    bc1c:	00c10a71 	sbceq	r0, r1, r1, ror sl
    bc20:	32870000 	addcc	r0, r7, #0
    bc24:	25000000 	strcs	r0, [r0, #-0]
    bc28:	000034ea 	andeq	r3, r0, sl, ror #9
    bc2c:	00003506 	andeq	r3, r0, r6, lsl #10
    bc30:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    bc34:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    bc38:	a7000001 	strge	r0, [r0, -r1]
    bc3c:	00000032 	andeq	r0, r0, r2, lsr r0
    bc40:	058f0000 	streq	r0, [pc]	; bc48 <__exidx_end+0x6048>
    bc44:	00030000 	andeq	r0, r3, r0
    bc48:	00002cfa 	strdeq	r2, [r0], -sl
    bc4c:	00a30104 	adceq	r0, r3, r4, lsl #2
    bc50:	e20c0000 	and	r0, ip, #0
    bc54:	ec000028 	stc	0, cr0, [r0], {40}	; 0x28
    bc58:	d800000d 	stmdale	r0, {r0, r2, r3}
    bc5c:	00000010 	andeq	r0, r0, r0, lsl r0
    bc60:	43000000 	movwmi	r0, #0
    bc64:	0200006e 	andeq	r0, r0, #110	; 0x6e
    bc68:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
    bc6c:	02020000 	andeq	r0, r2, #0
    bc70:	000a5b05 	andeq	r5, sl, r5, lsl #22
    bc74:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    bc78:	000007ed 	andeq	r0, r0, sp, ror #15
    bc7c:	e8050802 	stmda	r5, {r1, fp}
    bc80:	03000007 	movweq	r0, #7
    bc84:	000029fe 	strdeq	r2, [r0], -lr
    bc88:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    bc8c:	02000000 	andeq	r0, r0, #0
    bc90:	0c4b0801 	mcrreq	8, 0, r0, fp, cr1
    bc94:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    bc98:	0200002d 	andeq	r0, r0, #45	; 0x2d
    bc9c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    bca0:	02020000 	andeq	r0, r2, #0
    bca4:	000d4807 	andeq	r4, sp, r7, lsl #16
    bca8:	29960300 	ldmibcs	r6, {r8, r9}
    bcac:	34020000 	strcc	r0, [r2], #-0
    bcb0:	00007319 	andeq	r7, r0, r9, lsl r3
    bcb4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bcb8:	0000041d 	andeq	r0, r0, sp, lsl r4
    bcbc:	18070802 	stmdane	r7, {r1, fp}
    bcc0:	04000004 	streq	r0, [r0], #-4
    bcc4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    bcc8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    bccc:	00042207 	andeq	r2, r4, r7, lsl #4
    bcd0:	050e0300 	streq	r0, [lr, #-768]	; 0xfffffd00
    bcd4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    bcd8:	00009b1b 	andeq	r9, r0, fp, lsl fp
    bcdc:	0b800500 	bleq	fe00d0e4 <_estack+0xde0080e4>
    bce0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    bce4:	0000b300 	andeq	fp, r0, r0, lsl #6
    bce8:	085d0600 	ldmdaeq	sp, {r9, sl}^
    bcec:	00b30000 	adcseq	r0, r3, r0
    bcf0:	01000000 	mrseq	r0, (UNDEF: 0)
    bcf4:	03040700 	movweq	r0, #18176	; 0x4700
    bcf8:	00000b82 	andeq	r0, r0, r2, lsl #23
    bcfc:	8f186303 	svchi	0x00186303
    bd00:	03000000 	movweq	r0, #0
    bd04:	0000130a 	andeq	r1, r0, sl, lsl #6
    bd08:	41122604 	tstmi	r2, r4, lsl #12
    bd0c:	03000000 	movweq	r0, #0
    bd10:	000028dd 	ldrdeq	r2, [r0], -sp
    bd14:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    bd18:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    bd1c:	000000cd 	andeq	r0, r0, sp, asr #1
    bd20:	001da403 	andseq	sl, sp, r3, lsl #8
    bd24:	122b0400 	eorne	r0, fp, #0, 8
    bd28:	00000041 	andeq	r0, r0, r1, asr #32
    bd2c:	0000de09 	andeq	sp, r0, r9, lsl #28
    bd30:	292f0300 	stmdbcs	pc!, {r8, r9}	; <UNPREDICTABLE>
    bd34:	2c040000 	stccs	0, cr0, [r4], {-0}
    bd38:	00006712 	andeq	r6, r0, r2, lsl r7
    bd3c:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    bd40:	36030000 	strcc	r0, [r3], -r0
    bd44:	04000006 	streq	r0, [r0], #-6
    bd48:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    bd4c:	040a0000 	streq	r0, [sl], #-0
    bd50:	000000cd 	andeq	r0, r0, sp, asr #1
    bd54:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    bd58:	0001a009 	andeq	sl, r1, r9
    bd5c:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    bd60:	34040000 	strcc	r0, [r4], #-0
    bd64:	0000de07 	andeq	sp, r0, r7, lsl #28
    bd68:	07010100 	streq	r0, [r1, -r0, lsl #2]
    bd6c:	063c0c00 	ldrteq	r0, [ip], -r0, lsl #24
    bd70:	35040000 	strcc	r0, [r4, #-0]
    bd74:	0000de03 	andeq	sp, r0, r3, lsl #28
    bd78:	06010100 	streq	r0, [r1], -r0, lsl #2
    bd7c:	02de0c00 	sbcseq	r0, lr, #0, 24
    bd80:	36040000 	strcc	r0, [r4], -r0
    bd84:	0000de03 	andeq	sp, r0, r3, lsl #28
    bd88:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    bd8c:	06a70c00 	strteq	r0, [r7], r0, lsl #24
    bd90:	37040000 	strcc	r0, [r4, -r0]
    bd94:	0000de03 	andeq	sp, r0, r3, lsl #28
    bd98:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    bd9c:	0a8f0c00 	beq	fe3ceda4 <_estack+0xde3c9da4>
    bda0:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    bda4:	0000de03 	andeq	sp, r0, r3, lsl #28
    bda8:	00040100 	andeq	r0, r4, r0, lsl #2
    bdac:	064b0d00 	strbeq	r0, [fp], -r0, lsl #26
    bdb0:	3a040000 	bcc	10bdb8 <__ccfg+0xebe10>
    bdb4:	0000de07 	andeq	sp, r0, r7, lsl #28
    bdb8:	eb0d0100 	bl	34c1c0 <__ccfg+0x32c218>
    bdbc:	04000008 	streq	r0, [r0], #-8
    bdc0:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    bdc4:	0d020000 	stceq	0, cr0, [r2, #-0]
    bdc8:	00000f1c 	andeq	r0, r0, ip, lsl pc
    bdcc:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    bdd0:	03000000 	movweq	r0, #0
    bdd4:	0009030d 	andeq	r0, r9, sp, lsl #6
    bdd8:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    bddc:	000000ef 	andeq	r0, r0, pc, ror #1
    bde0:	14030004 	strne	r0, [r3], #-4
    bde4:	04000003 	streq	r0, [r0], #-3
    bde8:	01120341 	tsteq	r2, r1, asr #6
    bdec:	a0090000 	andge	r0, r9, r0
    bdf0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    bdf4:	000006ae 	andeq	r0, r0, lr, lsr #13
    bdf8:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    bdfc:	01000001 	tsteq	r0, r1
    be00:	01970e01 	orrseq	r0, r7, r1, lsl #28
    be04:	45040000 	strmi	r0, [r4, #-0]
    be08:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    be0c:	0a010100 	beq	4c214 <__ccfg+0x2c26c>
    be10:	0001d304 	andeq	sp, r1, r4, lsl #6
    be14:	08010200 	stmdaeq	r1, {r9}
    be18:	00000c54 	andeq	r0, r0, r4, asr ip
    be1c:	0001d308 	andeq	sp, r1, r8, lsl #6
    be20:	031d0e00 	tsteq	sp, #0, 28
    be24:	45040000 	strmi	r0, [r4, #-0]
    be28:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    be2c:	0b010100 	bleq	4c234 <__ccfg+0x2c28c>
    be30:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    be34:	0000021e 	andeq	r0, r0, lr, lsl r2
    be38:	000cba0d 	andeq	fp, ip, sp, lsl #20
    be3c:	0b900500 	bleq	fe40d244 <_estack+0xde408244>
    be40:	00000067 	andeq	r0, r0, r7, rrx
    be44:	10570d00 	subsne	r0, r7, r0, lsl #26
    be48:	91050000 	mrsls	r0, (UNDEF: 5)
    be4c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    be50:	bc0d0400 	cfstrslt	mvf0, [sp], {-0}
    be54:	05000001 	streq	r0, [r0, #-1]
    be58:	00ea1092 	smlaleq	r1, sl, r2, r0
    be5c:	00060000 	andeq	r0, r6, r0
    be60:	000cae03 	andeq	sl, ip, r3, lsl #28
    be64:	03930500 	orrseq	r0, r3, #0, 10
    be68:	000001ed 	andeq	r0, r0, sp, ror #3
    be6c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    be70:	00023500 	andeq	r3, r2, r0, lsl #10
    be74:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    be78:	0000092d 	andeq	r0, r0, sp, lsr #18
    be7c:	2a0f9905 	bcs	3f2298 <__ccfg+0x3d22f0>
    be80:	01000002 	tsteq	r0, r2
    be84:	06010b01 	streq	r0, [r1], -r1, lsl #22
    be88:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    be8c:	0a0c0000 	beq	30be94 <__ccfg+0x2ebeec>
    be90:	06000009 	streq	r0, [r0], -r9
    be94:	00de0793 	smullseq	r0, lr, r3, r7
    be98:	07010000 	streq	r0, [r1, -r0]
    be9c:	bc0c0001 	stclt	0, cr0, [ip], {1}
    bea0:	06000005 	streq	r0, [r0], -r5
    bea4:	00de0394 	smullseq	r0, lr, r4, r3
    bea8:	01010000 	mrseq	r0, (UNDEF: 1)
    beac:	03000000 	movweq	r0, #0
    beb0:	00000a9b 	muleq	r0, fp, sl
    beb4:	43039606 	movwmi	r9, #13830	; 0x3606
    beb8:	08000002 	stmdaeq	r0, {r1}
    bebc:	0000026d 	andeq	r0, r0, sp, ror #4
    bec0:	0002790f 	andeq	r7, r2, pc, lsl #18
    bec4:	00028900 	andeq	r8, r2, r0, lsl #18
    bec8:	08001000 	stmdaeq	r0, {ip}
    becc:	0000027e 	andeq	r0, r0, lr, ror r2
    bed0:	0003a10e 	andeq	sl, r3, lr, lsl #2
    bed4:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    bed8:	00000289 	andeq	r0, r0, r9, lsl #5
    bedc:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    bee0:	a7000000 	strge	r0, [r0, -r0]
    bee4:	10000002 	andne	r0, r0, r2
    bee8:	029c0800 	addseq	r0, ip, #0, 16
    beec:	fe0e0000 	cdp2	0, 0, cr0, cr14, cr0, {0}
    bef0:	07000005 	streq	r0, [r0, -r5]
    bef4:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    bef8:	01010000 	mrseq	r0, (UNDEF: 1)
    befc:	0008cd0e 	andeq	ip, r8, lr, lsl #26
    bf00:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    bf04:	000000ef 	andeq	r0, r0, pc, ror #1
    bf08:	62110101 	andsvs	r0, r1, #1073741824	; 0x40000000
    bf0c:	0800000c 	stmdaeq	r0, {r2, r3}
    bf10:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    bf14:	0a000002 	beq	bf24 <__exidx_end+0x6324>
    bf18:	0002db04 	andeq	sp, r2, r4, lsl #22
    bf1c:	e7011200 	str	r1, [r1, -r0, lsl #4]
    bf20:	13000002 	movwne	r0, #2
    bf24:	000000cd 	andeq	r0, r0, sp, asr #1
    bf28:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    bf2c:	02f20000 	rscseq	r0, r2, #0
    bf30:	00100000 	andseq	r0, r0, r0
    bf34:	0002e708 	andeq	lr, r2, r8, lsl #14
    bf38:	09d61400 	ldmibeq	r6, {sl, ip}^
    bf3c:	7f080000 	svcvc	0x00080000
    bf40:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    bf44:	01010000 	mrseq	r0, (UNDEF: 1)
    bf48:	00038d14 	andeq	r8, r3, r4, lsl sp
    bf4c:	01820800 	orreq	r0, r2, r0, lsl #16
    bf50:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    bf54:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    bf58:	00000365 	andeq	r0, r0, r5, ror #6
    bf5c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    bf60:	000000ef 	andeq	r0, r0, pc, ror #1
    bf64:	08150101 	ldmdaeq	r5, {r0, r8}
    bf68:	09030308 	stmdbeq	r3, {r3, r8, r9}
    bf6c:	0000034b 	andeq	r0, r0, fp, asr #6
    bf70:	003c8316 	eorseq	r8, ip, r6, lsl r3
    bf74:	03070800 	movweq	r0, #30720	; 0x7800
    bf78:	0000cd07 	andeq	ip, r0, r7, lsl #26
    bf7c:	af160000 	svcge	0x00160000
    bf80:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    bf84:	00080308 	andeq	r0, r8, r8, lsl #6
    bf88:	04000001 	streq	r0, [r0], #-1
    bf8c:	09f91100 	ldmibeq	r9!, {r8, ip}^
    bf90:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    bf94:	03240303 			; <UNDEFINED> instruction: 0x03240303
    bf98:	20170000 	andscs	r0, r7, r0
    bf9c:	30000000 	andcc	r0, r0, r0
    bfa0:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    bfa4:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    bfa8:	001f0616 	andseq	r0, pc, r6, lsl r6	; <UNPREDICTABLE>
    bfac:	03140800 	tsteq	r4, #0, 16
    bfb0:	0000cd08 	andeq	ip, r0, r8, lsl #26
    bfb4:	d7160000 	ldrle	r0, [r6, -r0]
    bfb8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    bfbc:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    bfc0:	02000000 	andeq	r0, r0, #0
    bfc4:	004c7016 	subeq	r7, ip, r6, lsl r0
    bfc8:	03160800 	tsteq	r6, #0, 16
    bfcc:	0002c80b 	andeq	ip, r2, fp, lsl #16
    bfd0:	36160400 	ldrcc	r0, [r6], -r0, lsl #8
    bfd4:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    bfd8:	00090317 	andeq	r0, r9, r7, lsl r3
    bfdc:	08000001 	stmdaeq	r0, {r0}
    bfe0:	00000f16 	andeq	r0, r0, r6, lsl pc
    bfe4:	03180800 	tsteq	r8, #0, 16
    bfe8:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    bfec:	4d160c00 	ldcmi	12, cr0, [r6, #-0]
    bff0:	08000009 	stmdaeq	r0, {r0, r3}
    bff4:	cb150319 	blgt	54cc60 <__ccfg+0x52ccb8>
    bff8:	2c000003 	stccs	0, cr0, [r0], {3}
    bffc:	034b0f00 	movteq	r0, #48896	; 0xbf00
    c000:	03cb0000 	biceq	r0, fp, #0
    c004:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    c008:	03000000 	movweq	r0, #0
    c00c:	58040a00 	stmdapl	r4, {r9, fp}
    c010:	11000003 	tstne	r0, r3
    c014:	00000bcc 	andeq	r0, r0, ip, asr #23
    c018:	1b031c08 	blne	d3040 <__ccfg+0xb3098>
    c01c:	00000358 	andeq	r0, r0, r8, asr r3
    c020:	000bac14 	andeq	sl, fp, r4, lsl ip
    c024:	031e0800 	tsteq	lr, #0, 16
    c028:	0003ed14 	andeq	lr, r3, r4, lsl sp
    c02c:	0a010100 	beq	4c434 <__ccfg+0x2c48c>
    c030:	0003d104 	andeq	sp, r3, r4, lsl #2
    c034:	21011900 	tstcs	r1, r0, lsl #18
    c038:	01000029 	tsteq	r0, r9, lsr #32
    c03c:	81010508 	tsthi	r1, r8, lsl #10
    c040:	64000000 	strvs	r0, [r0], #-0
    c044:	f4000035 	vst4.8	{d0-d3}, [r0 :256], r5
    c048:	01000038 	tsteq	r0, r8, lsr r0
    c04c:	0005869c 	muleq	r5, ip, r6
    c050:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    c054:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    c058:	00058618 	andeq	r8, r5, r8, lsl r6
    c05c:	0032ba00 	eorseq	fp, r2, r0, lsl #20
    c060:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    c064:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    c068:	00058629 	andeq	r8, r5, r9, lsr #12
    c06c:	0034b100 	eorseq	fp, r4, r0, lsl #2
    c070:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    c074:	36080100 	strcc	r0, [r8], -r0, lsl #2
    c078:	000000b5 	strheq	r0, [r0], -r5
    c07c:	000034e5 	andeq	r3, r0, r5, ror #9
    c080:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    c084:	81060a01 	tsthi	r6, r1, lsl #20
    c088:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    c08c:	1c000035 	stcne	0, cr0, [r0], {53}	; 0x35
    c090:	000028d5 	ldrdeq	r2, [r0], -r5
    c094:	1c114e01 	ldcne	14, cr4, [r1], {1}
    c098:	00002927 	andeq	r2, r0, r7, lsr #18
    c09c:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    c0a0:	00003626 	andeq	r3, r0, r6, lsr #12
    c0a4:	00003696 	muleq	r0, r6, r6
    c0a8:	00000488 	andeq	r0, r0, r8, lsl #9
    c0ac:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c0b0:	114e0100 	mrsne	r0, (UNDEF: 94)
    c0b4:	0000010c 	andeq	r0, r0, ip, lsl #2
    c0b8:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    c0bc:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    c0c0:	0000c111 	andeq	ip, r0, r1, lsl r1
    c0c4:	0035ff00 	eorseq	pc, r5, r0, lsl #30
    c0c8:	961d0000 	ldrls	r0, [sp], -r0
    c0cc:	de000036 	mcrle	0, 0, r0, cr0, cr6, {1}
    c0d0:	a4000036 	strge	r0, [r0], #-54	; 0xffffffca
    c0d4:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c0d8:	00706176 	rsbseq	r6, r0, r6, ror r1
    c0dc:	0c114f01 	ldceq	15, cr4, [r1], {1}
    c0e0:	01000001 	tsteq	r0, r1
    c0e4:	881f005e 	ldmdahi	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    c0e8:	d5000010 	strle	r0, [r0, #-16]
    c0ec:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    c0f0:	00706176 	rsbseq	r6, r0, r6, ror r1
    c0f4:	0c115001 	ldceq	0, cr5, [r1], {1}
    c0f8:	01000001 	tsteq	r0, r1
    c0fc:	6364205e 	cmnvs	r4, #94	; 0x5e
    c100:	11500100 	cmpne	r0, r0, lsl #2
    c104:	00000081 	andeq	r0, r0, r1, lsl #1
    c108:	0100631b 	tsteq	r0, fp, lsl r3
    c10c:	01d31150 	bicseq	r1, r3, r0, asr r1
    c110:	361d0000 	ldrcc	r0, [sp], -r0
    c114:	1f000000 	svcne	0x00000000
    c118:	000010a0 	andeq	r1, r0, r0, lsr #1
    c11c:	000004fc 	strdeq	r0, [r0], -ip
    c120:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c124:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    c128:	0000058c 	andeq	r0, r0, ip, lsl #11
    c12c:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    c130:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    c134:	0000c116 	andeq	ip, r0, r6, lsl r1
    c138:	00363b00 	eorseq	r3, r6, r0, lsl #22
    c13c:	501f0000 	andspl	r0, pc, r0
    c140:	14000010 	strne	r0, [r0], #-16
    c144:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    c148:	00706176 	rsbseq	r6, r0, r6, ror r1
    c14c:	8c165601 	ldchi	6, cr5, [r6], {1}
    c150:	01000005 	tsteq	r0, r5
    c154:	b81f005e 	ldmdalt	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    c158:	45000010 	strmi	r0, [r0, #-16]
    c15c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    c160:	00706176 	rsbseq	r6, r0, r6, ror r1
    c164:	8c165701 	ldchi	7, cr5, [r6], {1}
    c168:	01000005 	tsteq	r0, r5
    c16c:	6364205e 	cmnvs	r4, #94	; 0x5e
    c170:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    c174:	00000081 	andeq	r0, r0, r1, lsl #1
    c178:	0100631b 	tsteq	r0, fp, lsl r3
    c17c:	01d31657 	bicseq	r1, r3, r7, asr r6
    c180:	36590000 	ldrbcc	r0, [r9], -r0
    c184:	1d000000 	stcne	0, cr0, [r0, #-0]
    c188:	000038a6 	andeq	r3, r0, r6, lsr #17
    c18c:	000038ba 			; <UNDEFINED> instruction: 0x000038ba
    c190:	0000056f 	andeq	r0, r0, pc, ror #10
    c194:	0100631b 	tsteq	r0, fp, lsl r3
    c198:	01d3095c 	bicseq	r0, r3, ip, asr r9
    c19c:	36770000 	ldrbtcc	r0, [r7], -r0
    c1a0:	731e0000 	tstvc	lr, #0
    c1a4:	01007061 	tsteq	r0, r1, rrx
    c1a8:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    c1ac:	56010000 	strpl	r0, [r1], -r0
    c1b0:	10682100 	rsbne	r2, r8, r0, lsl #2
    c1b4:	731b0000 	tstvc	fp, #0
    c1b8:	01007061 	tsteq	r0, r1, rrx
    c1bc:	01cd0a66 	biceq	r0, sp, r6, ror #20
    c1c0:	368a0000 	strcc	r0, [sl], r0
    c1c4:	00000000 	andeq	r0, r0, r0
    c1c8:	01da040a 	bicseq	r0, sl, sl, lsl #8
    c1cc:	040a0000 	streq	r0, [sl], #-0
    c1d0:	000000ef 	andeq	r0, r0, pc, ror #1
    c1d4:	001fea00 	andseq	lr, pc, r0, lsl #20
    c1d8:	b6000300 	strlt	r0, [r0], -r0, lsl #6
    c1dc:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    c1e0:	0000a301 	andeq	sl, r0, r1, lsl #6
    c1e4:	29350c00 	ldmdbcs	r5!, {sl, fp}
    c1e8:	0dec0000 	stcleq	0, cr0, [ip]
    c1ec:	71100000 	tstvc	r0, r0
    c1f0:	01020000 	mrseq	r0, (UNDEF: 2)
    c1f4:	000c4d06 	andeq	r4, ip, r6, lsl #26
    c1f8:	31cf0300 	biccc	r0, pc, r0, lsl #6
    c1fc:	25010000 	strcs	r0, [r1, #-0]
    c200:	00003018 	andeq	r3, r0, r8, lsl r0
    c204:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    c208:	00000a5b 	andeq	r0, r0, fp, asr sl
    c20c:	ed050402 	cfstrs	mvf0, [r5, #-8]
    c210:	02000007 	andeq	r0, r0, #7
    c214:	07e80508 	strbeq	r0, [r8, r8, lsl #10]!
    c218:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    c21c:	01000029 	tsteq	r0, r9, lsr #32
    c220:	0051182e 	subseq	r1, r1, lr, lsr #16
    c224:	01020000 	mrseq	r0, (UNDEF: 2)
    c228:	000c4b08 	andeq	r4, ip, r8, lsl #22
    c22c:	2df40300 	ldclcs	3, cr0, [r4]
    c230:	31010000 	mrscc	r0, (UNDEF: 1)
    c234:	00006419 	andeq	r6, r0, r9, lsl r4
    c238:	07020200 	streq	r0, [r2, -r0, lsl #4]
    c23c:	00000d48 	andeq	r0, r0, r8, asr #26
    c240:	00299603 	eoreq	r9, r9, r3, lsl #12
    c244:	19340100 	ldmdbne	r4!, {r8}
    c248:	0000007c 	andeq	r0, r0, ip, ror r0
    c24c:	00006b04 	andeq	r6, r0, r4, lsl #22
    c250:	07040200 	streq	r0, [r4, -r0, lsl #4]
    c254:	0000041d 	andeq	r0, r0, sp, lsl r4
    c258:	18070802 	stmdane	r7, {r1, fp}
    c25c:	05000004 	streq	r0, [r0, #-4]
    c260:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c264:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    c268:	00042207 	andeq	r2, r4, r7, lsl #4
    c26c:	297f0300 	ldmdbcs	pc!, {r8, r9}^	; <UNPREDICTABLE>
    c270:	56010000 	strpl	r0, [r1], -r0
    c274:	0000911a 	andeq	r9, r0, sl, lsl r1
    c278:	0bc50600 	bleq	ff14da80 <_estack+0xdf148a80>
    c27c:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    c280:	00911701 	addseq	r1, r1, r1, lsl #14
    c284:	2b030000 	blcs	cc28c <__ccfg+0xac2e4>
    c288:	0300000e 	movweq	r0, #14
    c28c:	00370e2e 	eorseq	r0, r7, lr, lsr #28
    c290:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    c294:	03000002 	movweq	r0, #2
    c298:	00370e74 	eorseq	r0, r7, r4, ror lr
    c29c:	04070000 	streq	r0, [r7], #-0
    c2a0:	eb03a503 	bl	f56b4 <__ccfg+0xd570c>
    c2a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c2a8:	0000075c 	andeq	r0, r0, ip, asr r7
    c2ac:	a40ca703 	strge	sl, [ip], #-1795	; 0xfffff8fd
    c2b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c2b4:	00000aa4 	andeq	r0, r0, r4, lsr #21
    c2b8:	eb13a803 	bl	4f62cc <__ccfg+0x4d6324>
    c2bc:	00000000 	andeq	r0, r0, r0
    c2c0:	00005109 	andeq	r5, r0, r9, lsl #2
    c2c4:	0000fb00 	andeq	pc, r0, r0, lsl #22
    c2c8:	00910a00 	addseq	r0, r1, r0, lsl #20
    c2cc:	00030000 	andeq	r0, r3, r0
    c2d0:	a203080b 	andge	r0, r3, #720896	; 0xb0000
    c2d4:	00011f09 	andeq	r1, r1, r9, lsl #30
    c2d8:	03850c00 	orreq	r0, r5, #0, 24
    c2dc:	a4030000 	strge	r0, [r3], #-0
    c2e0:	00008a07 	andeq	r8, r0, r7, lsl #20
    c2e4:	f10c0000 	cpsid	
    c2e8:	03000005 	movweq	r0, #5
    c2ec:	00c905a9 	sbceq	r0, r9, r9, lsr #11
    c2f0:	00040000 	andeq	r0, r4, r0
    c2f4:	0008a503 	andeq	sl, r8, r3, lsl #10
    c2f8:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    c2fc:	000000fb 	strdeq	r0, [r0], -fp
    c300:	3203040d 	andcc	r0, r3, #218103808	; 0xd000000
    c304:	04000008 	streq	r0, [r0], #-8
    c308:	007c1916 	rsbseq	r1, ip, r6, lsl r9
    c30c:	4a030000 	bmi	cc314 <__ccfg+0xac36c>
    c310:	05000002 	streq	r0, [r0, #-2]
    c314:	008a0d0c 	addeq	r0, sl, ip, lsl #26
    c318:	1a030000 	bne	cc320 <__ccfg+0xac378>
    c31c:	04000007 	streq	r0, [r0], #-7
    c320:	01391b23 	teqeq	r9, r3, lsr #22
    c324:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
    c328:	18000003 	stmdane	r0, {r0, r1}
    c32c:	ab083404 	blge	219344 <__ccfg+0x1f939c>
    c330:	0c000001 	stceq	0, cr0, [r0], {1}
    c334:	00000ea6 	andeq	r0, r0, r6, lsr #29
    c338:	ab133604 	blge	4d9b50 <__ccfg+0x4b9ba8>
    c33c:	00000001 	andeq	r0, r0, r1
    c340:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    c344:	8a073704 	bhi	1d9f5c <__ccfg+0x1b9fb4>
    c348:	04000000 	streq	r0, [r0], #-0
    c34c:	000b520c 	andeq	r5, fp, ip, lsl #4
    c350:	0b370400 	bleq	dcd358 <__ccfg+0xdad3b0>
    c354:	0000008a 	andeq	r0, r0, sl, lsl #1
    c358:	43d70c08 	bicsmi	r0, r7, #8, 24	; 0x800
    c35c:	37040000 	strcc	r0, [r4, -r0]
    c360:	00008a14 	andeq	r8, r0, r4, lsl sl
    c364:	4c0c0c00 	stcmi	12, cr0, [ip], {-0}
    c368:	04000004 	streq	r0, [r0], #-4
    c36c:	008a1b37 	addeq	r1, sl, r7, lsr fp
    c370:	0f100000 	svceq	0x00100000
    c374:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    c378:	01b10b38 			; <UNDEFINED> instruction: 0x01b10b38
    c37c:	00140000 	andseq	r0, r4, r0
    c380:	01510410 	cmpeq	r1, r0, lsl r4
    c384:	2d090000 	stccs	0, cr0, [r9, #-0]
    c388:	c1000001 	tstgt	r0, r1
    c38c:	0a000001 	beq	c398 <__exidx_end+0x6798>
    c390:	00000091 	muleq	r0, r1, r0
    c394:	6d0e0000 	stcvs	0, cr0, [lr, #-0]
    c398:	2400000b 	strcs	r0, [r0], #-11
    c39c:	44083c04 	strmi	r3, [r8], #-3076	; 0xfffff3fc
    c3a0:	0c000002 	stceq	0, cr0, [r0], {2}
    c3a4:	0000055c 	andeq	r0, r0, ip, asr r5
    c3a8:	8a093e04 	bhi	25bbc0 <__ccfg+0x23bc18>
    c3ac:	00000000 	andeq	r0, r0, r0
    c3b0:	0003ae0c 	andeq	sl, r3, ip, lsl #28
    c3b4:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    c3b8:	0000008a 	andeq	r0, r0, sl, lsl #1
    c3bc:	034f0c04 	movteq	r0, #64516	; 0xfc04
    c3c0:	40040000 	andmi	r0, r4, r0
    c3c4:	00008a09 	andeq	r8, r0, r9, lsl #20
    c3c8:	640c0800 	strvs	r0, [ip], #-2048	; 0xfffff800
    c3cc:	04000006 	streq	r0, [r0], #-6
    c3d0:	008a0941 	addeq	r0, sl, r1, asr #18
    c3d4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c3d8:	00000944 	andeq	r0, r0, r4, asr #18
    c3dc:	8a094204 	bhi	25cbf4 <__ccfg+0x23cc4c>
    c3e0:	10000000 	andne	r0, r0, r0
    c3e4:	000abe0c 	andeq	fp, sl, ip, lsl #28
    c3e8:	09430400 	stmdbeq	r3, {sl}^
    c3ec:	0000008a 	andeq	r0, r0, sl, lsl #1
    c3f0:	033d0c14 	teqeq	sp, #20, 24	; 0x1400
    c3f4:	44040000 	strmi	r0, [r4], #-0
    c3f8:	00008a09 	andeq	r8, r0, r9, lsl #20
    c3fc:	650c1800 	strvs	r1, [ip, #-2048]	; 0xfffff800
    c400:	04000005 	streq	r0, [r0], #-5
    c404:	008a0945 	addeq	r0, sl, r5, asr #18
    c408:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    c40c:	000008e0 	andeq	r0, r0, r0, ror #17
    c410:	8a094604 	bhi	25dc28 <__ccfg+0x23dc80>
    c414:	20000000 	andcs	r0, r0, r0
    c418:	00321100 	eorseq	r1, r2, r0, lsl #2
    c41c:	01080000 	mrseq	r0, (UNDEF: 8)
    c420:	89084f04 	stmdbhi	r8, {r2, r8, r9, sl, fp, lr}
    c424:	0c000002 	stceq	0, cr0, [r0], {2}
    c428:	00000d0f 	andeq	r0, r0, pc, lsl #26
    c42c:	890a5004 	stmdbhi	sl, {r2, ip, lr}
    c430:	00000002 	andeq	r0, r0, r2
    c434:	000c070c 	andeq	r0, ip, ip, lsl #14
    c438:	09510400 	ldmdbeq	r1, {sl}^
    c43c:	00000289 	andeq	r0, r0, r9, lsl #5
    c440:	0da81280 	sfmeq	f1, 4, [r8, #512]!	; 0x200
    c444:	53040000 	movwpl	r0, #16384	; 0x4000
    c448:	00012d0a 	andeq	r2, r1, sl, lsl #26
    c44c:	12010000 	andne	r0, r1, #0
    c450:	00000e99 	muleq	r0, r9, lr
    c454:	2d0a5604 	stccs	6, cr5, [sl, #-16]
    c458:	04000001 	streq	r0, [r0], #-1
    c45c:	2b090001 	blcs	24c468 <__ccfg+0x22c4c0>
    c460:	99000001 	stmdbls	r0, {r0}
    c464:	0a000002 	beq	c474 <__exidx_end+0x6874>
    c468:	00000091 	muleq	r0, r1, r0
    c46c:	0611001f 			; <UNDEFINED> instruction: 0x0611001f
    c470:	9000000a 	andls	r0, r0, sl
    c474:	08620401 	stmdaeq	r2!, {r0, sl}^
    c478:	000002dc 	ldrdeq	r0, [r0], -ip
    c47c:	000ea60c 	andeq	sl, lr, ip, lsl #12
    c480:	12630400 	rsbne	r0, r3, #0, 8
    c484:	000002dc 	ldrdeq	r0, [r0], -ip
    c488:	05740c00 	ldrbeq	r0, [r4, #-3072]!	; 0xfffff400
    c48c:	64040000 	strvs	r0, [r4], #-0
    c490:	00008a06 	andeq	r8, r0, r6, lsl #20
    c494:	fe0c0400 	cdp2	4, 0, cr0, cr12, cr0, {0}
    c498:	04000002 	streq	r0, [r0], #-2
    c49c:	02e20966 	rsceq	r0, r2, #1671168	; 0x198000
    c4a0:	0c080000 	stceq	0, cr0, [r8], {-0}
    c4a4:	00000032 	andeq	r0, r0, r2, lsr r0
    c4a8:	441e6704 	ldrmi	r6, [lr], #-1796	; 0xfffff8fc
    c4ac:	88000002 	stmdahi	r0, {r1}
    c4b0:	99041000 	stmdbls	r4, {ip}
    c4b4:	09000002 	stmdbeq	r0, {r1}
    c4b8:	000002f2 	strdeq	r0, [r0], -r2
    c4bc:	000002f2 	strdeq	r0, [r0], -r2
    c4c0:	0000910a 	andeq	r9, r0, sl, lsl #2
    c4c4:	10001f00 	andne	r1, r0, r0, lsl #30
    c4c8:	0002f804 	andeq	pc, r2, r4, lsl #16
    c4cc:	0e011300 	cdpeq	3, 0, cr1, cr1, cr0, {0}
    c4d0:	00000ca7 	andeq	r0, r0, r7, lsr #25
    c4d4:	087a0408 	ldmdaeq	sl!, {r3, sl}^
    c4d8:	00000322 	andeq	r0, r0, r2, lsr #6
    c4dc:	000cb90c 	andeq	fp, ip, ip, lsl #18
    c4e0:	117b0400 	cmnne	fp, r0, lsl #8
    c4e4:	00000322 	andeq	r0, r0, r2, lsr #6
    c4e8:	1d820c00 	stcne	12, cr0, [r2]
    c4ec:	7c040000 	stcvc	0, cr0, [r4], {-0}
    c4f0:	00008a06 	andeq	r8, r0, r6, lsl #20
    c4f4:	10000400 	andne	r0, r0, r0, lsl #8
    c4f8:	00005104 	andeq	r5, r0, r4, lsl #2
    c4fc:	04440e00 	strbeq	r0, [r4], #-3584	; 0xfffff200
    c500:	04680000 	strbteq	r0, [r8], #-0
    c504:	046b08ba 	strbteq	r0, [fp], #-2234	; 0xfffff746
    c508:	5f0f0000 	svcpl	0x000f0000
    c50c:	bb040070 	bllt	10c6d4 <__ccfg+0xec72c>
    c510:	00032212 	andeq	r2, r3, r2, lsl r2
    c514:	5f0f0000 	svcpl	0x000f0000
    c518:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
    c51c:	00008a07 	andeq	r8, r0, r7, lsl #20
    c520:	5f0f0400 	svcpl	0x000f0400
    c524:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
    c528:	00008a07 	andeq	r8, r0, r7, lsl #20
    c52c:	bb0c0800 	bllt	30e534 <__ccfg+0x2ee58c>
    c530:	04000001 	streq	r0, [r0], #-1
    c534:	003009be 	ldrhteq	r0, [r0], -lr
    c538:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c53c:	00000849 	andeq	r0, r0, r9, asr #16
    c540:	3009bf04 	andcc	fp, r9, r4, lsl #30
    c544:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    c548:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    c54c:	11c00400 	bicne	r0, r0, r0, lsl #8
    c550:	000002fa 	strdeq	r0, [r0], -sl
    c554:	01b20c10 			; <UNDEFINED> instruction: 0x01b20c10
    c558:	c1040000 	mrsgt	r0, (UNDEF: 4)
    c55c:	00008a07 	andeq	r8, r0, r7, lsl #20
    c560:	030c1800 	movweq	r1, #51200	; 0xc800
    c564:	04000003 	streq	r0, [r0], #-3
    c568:	012b0ac8 	smlawteq	fp, r8, sl, r0
    c56c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    c570:	00001d11 	andeq	r1, r0, r1, lsl sp
    c574:	f01dca04 			; <UNDEFINED> instruction: 0xf01dca04
    c578:	20000005 	andcs	r0, r0, r5
    c57c:	001cd80c 	andseq	sp, ip, ip, lsl #16
    c580:	1dcc0400 	cfstrdne	mvd0, [ip]
    c584:	0000061b 	andeq	r0, r0, fp, lsl r6
    c588:	0ec60c24 	cdpeq	12, 12, cr0, cr6, cr4, {1}
    c58c:	cf040000 	svcgt	0x00040000
    c590:	0006400d 	andeq	r4, r6, sp
    c594:	c60c2800 	strgt	r2, [ip], -r0, lsl #16
    c598:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    c59c:	065b09d0 			; <UNDEFINED> instruction: 0x065b09d0
    c5a0:	0f2c0000 	svceq	0x002c0000
    c5a4:	0062755f 	rsbeq	r7, r2, pc, asr r5
    c5a8:	fa11d304 	blx	4811c0 <__ccfg+0x461218>
    c5ac:	30000002 	andcc	r0, r0, r2
    c5b0:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    c5b4:	12d40400 	sbcsne	r0, r4, #0, 8
    c5b8:	00000322 	andeq	r0, r0, r2, lsr #6
    c5bc:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; b68c <__exidx_end+0x5a8c>
    c5c0:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
    c5c4:	00008a07 	andeq	r8, r0, r7, lsl #20
    c5c8:	fd0c3c00 	stc2	12, cr3, [ip, #-0]
    c5cc:	0400000e 	streq	r0, [r0], #-14
    c5d0:	066111d8 			; <UNDEFINED> instruction: 0x066111d8
    c5d4:	0c400000 	mareq	acc0, r0, r0
    c5d8:	00000e46 	andeq	r0, r0, r6, asr #28
    c5dc:	7111d904 	tstvc	r1, r4, lsl #18
    c5e0:	43000006 	movwmi	r0, #6
    c5e4:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    c5e8:	11dc0400 	bicsne	r0, ip, r0, lsl #8
    c5ec:	000002fa 	strdeq	r0, [r0], -sl
    c5f0:	0b640c44 	bleq	190f708 <__ccfg+0x18ef760>
    c5f4:	df040000 	svcle	0x00040000
    c5f8:	00008a07 	andeq	r8, r0, r7, lsl #20
    c5fc:	780c4c00 	stmdavc	ip, {sl, fp, lr}
    c600:	04000004 	streq	r0, [r0], #-4
    c604:	00b10ae0 	adcseq	r0, r1, r0, ror #21
    c608:	0c500000 	mraeq	r0, r0, acc0
    c60c:	00004735 	andeq	r4, r0, r5, lsr r7
    c610:	8a12e304 	bhi	4c5228 <__ccfg+0x4a5280>
    c614:	54000004 	strpl	r0, [r0], #-4
    c618:	000b8a0c 	andeq	r8, fp, ip, lsl #20
    c61c:	0ce70400 	cfstrdeq	mvd0, [r7]
    c620:	00000145 	andeq	r0, r0, r5, asr #2
    c624:	0a0e0c58 	beq	38f78c <__ccfg+0x36f7e4>
    c628:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    c62c:	00011f0e 	andeq	r1, r1, lr, lsl #30
    c630:	790c5c00 	stmdbvc	ip, {sl, fp, ip, lr}
    c634:	0400000e 	streq	r0, [r0], #-14
    c638:	008a09ea 	addeq	r0, sl, sl, ror #19
    c63c:	00640000 	rsbeq	r0, r4, r0
    c640:	008a0114 	addeq	r0, sl, r4, lsl r1
    c644:	048a0000 	streq	r0, [sl], #0
    c648:	8a150000 	bhi	54c650 <__ccfg+0x52c6a8>
    c64c:	15000004 	strne	r0, [r0, #-4]
    c650:	0000012b 	andeq	r0, r0, fp, lsr #2
    c654:	0005de15 	andeq	sp, r5, r5, lsl lr
    c658:	008a1500 	addeq	r1, sl, r0, lsl #10
    c65c:	10000000 	andne	r0, r0, r0
    c660:	00049504 	andeq	r9, r4, r4, lsl #10
    c664:	048a0400 	streq	r0, [sl], #1024	; 0x400
    c668:	41160000 	tstmi	r6, r0
    c66c:	2800000d 	stmdacs	r0, {r0, r2, r3}
    c670:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
    c674:	0005de08 	andeq	sp, r5, r8, lsl #28
    c678:	08f41700 	ldmeq	r4!, {r8, r9, sl, ip}^
    c67c:	67040000 	strvs	r0, [r4, -r0]
    c680:	008a0702 	addeq	r0, sl, r2, lsl #14
    c684:	17000000 	strne	r0, [r0, -r0]
    c688:	000007d2 	ldrdeq	r0, [r0], -r2
    c68c:	0b026c04 	bleq	a76a4 <__ccfg+0x876fc>
    c690:	000006cd 	andeq	r0, r0, sp, asr #13
    c694:	02ee1704 	rsceq	r1, lr, #4, 14	; 0x100000
    c698:	6c040000 	stcvs	0, cr0, [r4], {-0}
    c69c:	06cd1402 	strbeq	r1, [sp], r2, lsl #8
    c6a0:	17080000 	strne	r0, [r8, -r0]
    c6a4:	00000eec 	andeq	r0, r0, ip, ror #29
    c6a8:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
    c6ac:	000006cd 	andeq	r0, r0, sp, asr #13
    c6b0:	056f170c 	strbeq	r1, [pc, #-1804]!	; bfac <__exidx_end+0x63ac>
    c6b4:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    c6b8:	008a0802 	addeq	r0, sl, r2, lsl #16
    c6bc:	17100000 	ldrne	r0, [r0, -r0]
    c6c0:	000004c4 	andeq	r0, r0, r4, asr #9
    c6c4:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
    c6c8:	000008cd 	andeq	r0, r0, sp, asr #17
    c6cc:	0e591714 	mrceq	7, 2, r1, cr9, cr4, {0}
    c6d0:	72040000 	andvc	r0, r4, #0
    c6d4:	008a0702 	addeq	r0, sl, r2, lsl #14
    c6d8:	17300000 	ldrne	r0, [r0, -r0]!
    c6dc:	00004283 	andeq	r4, r0, r3, lsl #5
    c6e0:	16027304 	strne	r7, [r2], -r4, lsl #6
    c6e4:	000008e3 	andeq	r0, r0, r3, ror #17
    c6e8:	077a1734 			; <UNDEFINED> instruction: 0x077a1734
    c6ec:	75040000 	strvc	r0, [r4, #-0]
    c6f0:	008a0702 	addeq	r0, sl, r2, lsl #14
    c6f4:	17380000 	ldrne	r0, [r8, -r0]!
    c6f8:	00000874 	andeq	r0, r0, r4, ror r8
    c6fc:	0a027704 	beq	aa314 <__ccfg+0x8a36c>
    c700:	000008f5 	strdeq	r0, [r0], -r5
    c704:	0347173c 	movteq	r1, #30524	; 0x773c
    c708:	7a040000 	bvc	10c710 <__ccfg+0xec768>
    c70c:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    c710:	17400000 	strbne	r0, [r0, -r0]
    c714:	00000402 	andeq	r0, r0, r2, lsl #8
    c718:	07027b04 	streq	r7, [r2, -r4, lsl #22]
    c71c:	0000008a 	andeq	r0, r0, sl, lsl #1
    c720:	05f91744 	ldrbeq	r1, [r9, #1860]!	; 0x744
    c724:	7c040000 	stcvc	0, cr0, [r4], {-0}
    c728:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    c72c:	17480000 	strbne	r0, [r8, -r0]
    c730:	0000080f 	andeq	r0, r0, pc, lsl #16
    c734:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
    c738:	000008fb 	strdeq	r0, [r0], -fp
    c73c:	0b4a174c 	bleq	1292474 <__ccfg+0x12724cc>
    c740:	80040000 	andhi	r0, r4, r0
    c744:	008a0702 	addeq	r0, sl, r2, lsl #14
    c748:	17500000 	ldrbne	r0, [r0, -r0]
    c74c:	00000c43 	andeq	r0, r0, r3, asr #24
    c750:	09028104 	stmdbeq	r2, {r2, r8, pc}
    c754:	000005de 	ldrdeq	r0, [r0], -lr
    c758:	0c5d1754 	mrrceq	7, 5, r1, sp, cr4
    c75c:	a4040000 	strge	r0, [r4], #-0
    c760:	08a80702 	stmiaeq	r8!, {r1, r8, r9, sl}
    c764:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    c768:	00000a06 	andeq	r0, r0, r6, lsl #20
    c76c:	1302a804 	movwne	sl, #10244	; 0x2804
    c770:	000002dc 	ldrdeq	r0, [r0], -ip
    c774:	9e180148 	muflsem	f0, f0, #0.0
    c778:	04000006 	streq	r0, [r0], #-6
    c77c:	991202a9 	ldmdbls	r2, {r0, r3, r5, r7, r9}
    c780:	4c000002 	stcmi	0, cr0, [r0], {2}
    c784:	06851801 	streq	r1, [r5], r1, lsl #16
    c788:	ad040000 	stcge	0, cr0, [r4, #-0]
    c78c:	090d0c02 	stmdbeq	sp, {r1, sl, fp}
    c790:	02dc0000 	sbcseq	r0, ip, #0
    c794:	000cc518 	andeq	ip, ip, r8, lsl r5
    c798:	02b20400 	adcseq	r0, r2, #0, 8
    c79c:	00068e10 	andeq	r8, r6, r0, lsl lr
    c7a0:	1802e000 	stmdane	r2, {sp, lr, pc}
    c7a4:	00000a96 	muleq	r0, r6, sl
    c7a8:	0a02b404 	beq	b97c0 <__ccfg+0x99818>
    c7ac:	00000919 	andeq	r0, r0, r9, lsl r9
    c7b0:	100002ec 	andne	r0, r0, ip, ror #5
    c7b4:	0005e404 	andeq	lr, r5, r4, lsl #8
    c7b8:	08010200 	stmdaeq	r1, {r9}
    c7bc:	00000c54 	andeq	r0, r0, r4, asr ip
    c7c0:	0005e404 	andeq	lr, r5, r4, lsl #8
    c7c4:	6b041000 	blvs	1107cc <__ccfg+0xf0824>
    c7c8:	14000004 	strne	r0, [r0], #-4
    c7cc:	00008a01 	andeq	r8, r0, r1, lsl #20
    c7d0:	00061500 	andeq	r1, r6, r0, lsl #10
    c7d4:	048a1500 	streq	r1, [sl], #1280	; 0x500
    c7d8:	2b150000 	blcs	54c7e0 <__ccfg+0x52c838>
    c7dc:	15000001 	strne	r0, [r0, #-1]
    c7e0:	00000615 	andeq	r0, r0, r5, lsl r6
    c7e4:	00008a15 	andeq	r8, r0, r5, lsl sl
    c7e8:	04100000 	ldreq	r0, [r0], #-0
    c7ec:	000005eb 	andeq	r0, r0, fp, ror #11
    c7f0:	05f60410 	ldrbeq	r0, [r6, #1040]!	; 0x410
    c7f4:	01140000 	tsteq	r4, r0
    c7f8:	000000bd 	strheq	r0, [r0], -sp
    c7fc:	00000640 	andeq	r0, r0, r0, asr #12
    c800:	00048a15 	andeq	r8, r4, r5, lsl sl
    c804:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    c808:	bd150000 	ldclt	0, cr0, [r5, #-0]
    c80c:	15000000 	strne	r0, [r0, #-0]
    c810:	0000008a 	andeq	r0, r0, sl, lsl #1
    c814:	21041000 	mrscs	r1, (UNDEF: 4)
    c818:	14000006 	strne	r0, [r0], #-6
    c81c:	00008a01 	andeq	r8, r0, r1, lsl #20
    c820:	00065b00 	andeq	r5, r6, r0, lsl #22
    c824:	048a1500 	streq	r1, [sl], #1280	; 0x500
    c828:	2b150000 	blcs	54c830 <__ccfg+0x52c888>
    c82c:	00000001 	andeq	r0, r0, r1
    c830:	06460410 			; <UNDEFINED> instruction: 0x06460410
    c834:	51090000 	mrspl	r0, (UNDEF: 9)
    c838:	71000000 	mrsvc	r0, (UNDEF: 0)
    c83c:	0a000006 	beq	c85c <__exidx_end+0x6c5c>
    c840:	00000091 	muleq	r0, r1, r0
    c844:	51090002 	tstpl	r9, r2
    c848:	81000000 	mrshi	r0, (UNDEF: 0)
    c84c:	0a000006 	beq	c86c <__exidx_end+0x6c6c>
    c850:	00000091 	muleq	r0, r1, r0
    c854:	65060000 	strvs	r0, [r6, #-0]
    c858:	04000004 	streq	r0, [r0], #-4
    c85c:	281a0124 	ldmdacs	sl, {r2, r5, r8}
    c860:	19000003 	stmdbne	r0, {r0, r1}
    c864:	00000cbf 			; <UNDEFINED> instruction: 0x00000cbf
    c868:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
    c86c:	0006c708 	andeq	ip, r6, r8, lsl #14
    c870:	0ea61700 	cdpeq	7, 10, cr1, cr6, cr0, {0}
    c874:	2a040000 	bcs	10c87c <__ccfg+0xec8d4>
    c878:	06c71101 	strbeq	r1, [r7], r1, lsl #2
    c87c:	17000000 	strne	r0, [r0, -r0]
    c880:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
    c884:	07012b04 	streq	r2, [r1, -r4, lsl #22]
    c888:	0000008a 	andeq	r0, r0, sl, lsl #1
    c88c:	07621704 	strbeq	r1, [r2, -r4, lsl #14]!
    c890:	2c040000 	stccs	0, cr0, [r4], {-0}
    c894:	06cd0b01 	strbeq	r0, [sp], r1, lsl #22
    c898:	00080000 	andeq	r0, r8, r0
    c89c:	068e0410 	pkhbteq	r0, lr, r0, lsl #8
    c8a0:	04100000 	ldreq	r0, [r0], #-0
    c8a4:	00000681 	andeq	r0, r0, r1, lsl #13
    c8a8:	0003d119 	andeq	sp, r3, r9, lsl r1
    c8ac:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
    c8b0:	070c0801 	streq	r0, [ip, -r1, lsl #16]
    c8b4:	2d170000 	ldccs	0, cr0, [r7, #-0]
    c8b8:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    c8bc:	0c120145 	ldfeqs	f0, [r2], {69}	; 0x45
    c8c0:	00000007 	andeq	r0, r0, r7
    c8c4:	00082117 	andeq	r2, r8, r7, lsl r1
    c8c8:	01460400 	cmpeq	r6, r0, lsl #8
    c8cc:	00070c12 	andeq	r0, r7, r2, lsl ip
    c8d0:	df170600 	svcle	0x00170600
    c8d4:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    c8d8:	64120147 	ldrvs	r0, [r2], #-327	; 0xfffffeb9
    c8dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    c8e0:	00640900 	rsbeq	r0, r4, r0, lsl #18
    c8e4:	071c0000 	ldreq	r0, [ip, -r0]
    c8e8:	910a0000 	mrsls	r0, (UNDEF: 10)
    c8ec:	02000000 	andeq	r0, r0, #0
    c8f0:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
    c8f4:	31070285 	smlabbcc	r7, r5, r2, r0
    c8f8:	17000008 	strne	r0, [r0, -r8]
    c8fc:	00000e4c 	andeq	r0, r0, ip, asr #28
    c900:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
    c904:	00000091 	muleq	r0, r1, r0
    c908:	0ccd1700 	stcleq	7, cr1, [sp], {0}
    c90c:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    c910:	05de1202 	ldrbeq	r1, [lr, #514]	; 0x202
    c914:	17040000 	strne	r0, [r4, -r0]
    c918:	0000042f 	andeq	r0, r0, pc, lsr #8
    c91c:	10028904 	andne	r8, r2, r4, lsl #18
    c920:	00000831 	andeq	r0, r0, r1, lsr r8
    c924:	0b331708 	bleq	cd254c <__ccfg+0xcb25a4>
    c928:	8a040000 	bhi	10c930 <__ccfg+0xec988>
    c92c:	01c11702 	biceq	r1, r1, r2, lsl #14
    c930:	17240000 	strne	r0, [r4, -r0]!
    c934:	000007d9 	ldrdeq	r0, [r0], -r9
    c938:	0f028b04 	svceq	0x00028b04
    c93c:	0000008a 	andeq	r0, r0, sl, lsl #1
    c940:	0ea11748 	cdpeq	7, 10, cr1, cr1, cr8, {2}
    c944:	8c040000 	stchi	0, cr0, [r4], {-0}
    c948:	00832c02 	addeq	r2, r3, r2, lsl #24
    c94c:	17500000 	ldrbne	r0, [r0, -r0]
    c950:	00000076 	andeq	r0, r0, r6, ror r0
    c954:	1a028d04 	bne	afd6c <__ccfg+0x8fdc4>
    c958:	000006d3 	ldrdeq	r0, [r0], -r3
    c95c:	06291758 			; <UNDEFINED> instruction: 0x06291758
    c960:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    c964:	011f1602 	tsteq	pc, r2, lsl #12
    c968:	17680000 	strbne	r0, [r8, -r0]!
    c96c:	00000cda 	ldrdeq	r0, [r0], -sl
    c970:	16028f04 	strne	r8, [r2], -r4, lsl #30
    c974:	0000011f 	andeq	r0, r0, pc, lsl r1
    c978:	00681770 	rsbeq	r1, r8, r0, ror r7
    c97c:	90040000 	andls	r0, r4, r0
    c980:	011f1602 	tsteq	pc, r2, lsl #12
    c984:	17780000 	ldrbne	r0, [r8, -r0]!
    c988:	00000b5a 	andeq	r0, r0, sl, asr fp
    c98c:	10029104 	andne	r9, r2, r4, lsl #2
    c990:	00000841 	andeq	r0, r0, r1, asr #16
    c994:	040c1780 	streq	r1, [ip], #-1920	; 0xfffff880
    c998:	92040000 	andls	r0, r4, #0
    c99c:	08511002 	ldmdaeq	r1, {r1, ip}^
    c9a0:	17880000 	strne	r0, [r8, r0]
    c9a4:	00000c7d 	andeq	r0, r0, sp, ror ip
    c9a8:	0f029304 	svceq	0x00029304
    c9ac:	0000008a 	andeq	r0, r0, sl, lsl #1
    c9b0:	02a317a0 	adceq	r1, r3, #160, 14	; 0x2800000
    c9b4:	94040000 	strls	r0, [r4], #-0
    c9b8:	011f1602 	tsteq	pc, r2, lsl #12
    c9bc:	17a40000 	strne	r0, [r4, r0]!
    c9c0:	0000068f 	andeq	r0, r0, pc, lsl #13
    c9c4:	16029504 	strne	r9, [r2], -r4, lsl #10
    c9c8:	0000011f 	andeq	r0, r0, pc, lsl r1
    c9cc:	05ab17ac 	streq	r1, [fp, #1964]!	; 0x7ac
    c9d0:	96040000 	strls	r0, [r4], -r0
    c9d4:	011f1602 	tsteq	pc, r2, lsl #12
    c9d8:	17b40000 	ldrne	r0, [r4, r0]!
    c9dc:	0000083a 	andeq	r0, r0, sl, lsr r8
    c9e0:	16029704 	strne	r9, [r2], -r4, lsl #14
    c9e4:	0000011f 	andeq	r0, r0, pc, lsl r1
    c9e8:	061817bc 			; <UNDEFINED> instruction: 0x061817bc
    c9ec:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    c9f0:	011f1602 	tsteq	pc, r2, lsl #12
    c9f4:	17c40000 	strbne	r0, [r4, r0]
    c9f8:	000008f2 	strdeq	r0, [r0], -r2
    c9fc:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
    ca00:	0000008a 	andeq	r0, r0, sl, lsl #1
    ca04:	e40900cc 	str	r0, [r9], #-204	; 0xffffff34
    ca08:	41000005 	tstmi	r0, r5
    ca0c:	0a000008 	beq	ca34 <__exidx_end+0x6e34>
    ca10:	00000091 	muleq	r0, r1, r0
    ca14:	e4090019 	str	r0, [r9], #-25	; 0xffffffe7
    ca18:	51000005 	tstpl	r0, r5
    ca1c:	0a000008 	beq	ca44 <__exidx_end+0x6e44>
    ca20:	00000091 	muleq	r0, r1, r0
    ca24:	e4090007 	str	r0, [r9], #-7
    ca28:	61000005 	tstvs	r0, r5
    ca2c:	0a000008 	beq	ca54 <__exidx_end+0x6e54>
    ca30:	00000091 	muleq	r0, r1, r0
    ca34:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
    ca38:	07029e04 	streq	r9, [r2, -r4, lsl #28]
    ca3c:	00000888 	andeq	r0, r0, r8, lsl #17
    ca40:	0003b717 	andeq	fp, r3, r7, lsl r7
    ca44:	02a10400 	adceq	r0, r1, #0, 8
    ca48:	0008881b 	andeq	r8, r8, fp, lsl r8
    ca4c:	f4170000 			; <UNDEFINED> instruction: 0xf4170000
    ca50:	0400000e 	streq	r0, [r0], #-14
    ca54:	981802a2 	ldmdals	r8, {r1, r5, r7, r9}
    ca58:	78000008 	stmdavc	r0, {r3}
    ca5c:	03220900 			; <UNDEFINED> instruction: 0x03220900
    ca60:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    ca64:	910a0000 	mrsls	r0, (UNDEF: 10)
    ca68:	1d000000 	stcne	0, cr0, [r0, #-0]
    ca6c:	00910900 	addseq	r0, r1, r0, lsl #18
    ca70:	08a80000 	stmiaeq	r8!, {}	; <UNPREDICTABLE>
    ca74:	910a0000 	mrsls	r0, (UNDEF: 10)
    ca78:	1d000000 	stcne	0, cr0, [r0, #-0]
    ca7c:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
    ca80:	cd030283 	sfmgt	f0, 4, [r3, #-524]	; 0xfffffdf4
    ca84:	1c000008 	stcne	0, cr0, [r0], {8}
    ca88:	00000d41 	andeq	r0, r0, r1, asr #26
    ca8c:	0b029a04 	bleq	b32a4 <__ccfg+0x932fc>
    ca90:	0000071c 	andeq	r0, r0, ip, lsl r7
    ca94:	000b421c 	andeq	r4, fp, ip, lsl r2
    ca98:	02a30400 	adceq	r0, r3, #0, 8
    ca9c:	0008610b 	andeq	r6, r8, fp, lsl #2
    caa0:	e4090000 	str	r0, [r9], #-0
    caa4:	dd000005 	stcle	0, cr0, [r0, #-20]	; 0xffffffec
    caa8:	0a000008 	beq	cad0 <__exidx_end+0x6ed0>
    caac:	00000091 	muleq	r0, r1, r0
    cab0:	ac1d0018 	ldcge	0, cr0, [sp], {24}
    cab4:	0100000e 	tsteq	r0, lr
    cab8:	08dd0410 	ldmeq	sp, {r4, sl}^
    cabc:	011e0000 	tsteq	lr, r0
    cac0:	000008f5 	strdeq	r0, [r0], -r5
    cac4:	00048a15 	andeq	r8, r4, r5, lsl sl
    cac8:	04100000 	ldreq	r0, [r0], #-0
    cacc:	000008e9 	andeq	r0, r0, r9, ror #17
    cad0:	01ab0410 			; <UNDEFINED> instruction: 0x01ab0410
    cad4:	011e0000 	tsteq	lr, r0
    cad8:	0000090d 	andeq	r0, r0, sp, lsl #18
    cadc:	00008a15 	andeq	r8, r0, r5, lsl sl
    cae0:	04100000 	ldreq	r0, [r0], #-0
    cae4:	00000913 	andeq	r0, r0, r3, lsl r9
    cae8:	09010410 	stmdbeq	r1, {r4, sl}
    caec:	81090000 	mrshi	r0, (UNDEF: 9)
    caf0:	29000006 	stmdbcs	r0, {r1, r2}
    caf4:	0a000009 	beq	cb20 <__exidx_end+0x6f20>
    caf8:	00000091 	muleq	r0, r1, r0
    cafc:	b21f0002 	andslt	r0, pc, #2
    cb00:	0400000a 	streq	r0, [r0], #-10
    cb04:	8a170333 	bhi	5cd7d8 <__ccfg+0x5ad830>
    cb08:	01000004 	tsteq	r0, r4
    cb0c:	0aab1f01 	beq	fead4718 <_estack+0xdeacf718>
    cb10:	34040000 	strcc	r0, [r4], #-0
    cb14:	04901d03 	ldreq	r1, [r0], #3331	; 0xd03
    cb18:	01010000 	mrseq	r0, (UNDEF: 1)
    cb1c:	0024c303 	eoreq	ip, r4, r3, lsl #6
    cb20:	123b0600 	eorsne	r0, fp, #0, 12
    cb24:	0000006b 	andeq	r0, r0, fp, rrx
    cb28:	4006080b 	andmi	r0, r6, fp, lsl #16
    cb2c:	00097709 	andeq	r7, r9, r9, lsl #14
    cb30:	1fc60c00 	svcne	0x00c60c00
    cb34:	41060000 	mrsmi	r0, (UNDEF: 6)
    cb38:	0009770d 	andeq	r7, r9, sp, lsl #14
    cb3c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    cb40:	06000022 	streq	r0, [r0], -r2, lsr #32
    cb44:	09770d42 	ldmdbeq	r7!, {r1, r6, r8, sl, fp}^
    cb48:	00040000 	andeq	r0, r4, r0
    cb4c:	00450410 	subeq	r0, r5, r0, lsl r4
    cb50:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    cb54:	06000027 	streq	r0, [r0], -r7, lsr #32
    cb58:	09530343 	ldmdbeq	r3, {r0, r1, r6, r8, r9}^
    cb5c:	8a030000 	bhi	ccb64 <__ccfg+0xacbbc>
    cb60:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cb64:	09952b3c 	ldmibeq	r5, {r2, r3, r4, r5, r8, r9, fp, sp}
    cb68:	290e0000 	stmdbcs	lr, {}	; <UNPREDICTABLE>
    cb6c:	10000025 	andne	r0, r0, r5, lsr #32
    cb70:	f1156f07 			; <UNDEFINED> instruction: 0xf1156f07
    cb74:	0c000009 	stceq	0, cr0, [r0], {9}
    cb78:	00001ef5 	strdeq	r1, [r0], -r5
    cb7c:	580d7007 	stmdapl	sp, {r0, r1, r2, ip, sp, lr}
    cb80:	00000000 	andeq	r0, r0, r0
    cb84:	0007680c 	andeq	r6, r7, ip, lsl #16
    cb88:	0d710700 	ldcleq	7, cr0, [r1, #-0]
    cb8c:	00000058 	andeq	r0, r0, r8, asr r0
    cb90:	22680c02 	rsbcs	r0, r8, #512	; 0x200
    cb94:	74070000 	strvc	r0, [r7], #-0
    cb98:	000b2813 	andeq	r2, fp, r3, lsl r8
    cb9c:	f70c0400 			; <UNDEFINED> instruction: 0xf70c0400
    cba0:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cba4:	09470c75 	stmdbeq	r7, {r0, r2, r4, r5, r6, sl, fp}^
    cba8:	0c080000 	stceq	0, cr0, [r8], {-0}
    cbac:	00002298 	muleq	r0, r8, r2
    cbb0:	b4067d07 	strlt	r7, [r6], #-3335	; 0xfffff2f9
    cbb4:	0c00000a 	stceq	0, cr0, [r0], {10}
    cbb8:	0021e20c 	eoreq	lr, r1, ip, lsl #4
    cbbc:	06810700 	streq	r0, [r1], r0, lsl #14
    cbc0:	00000afe 	strdeq	r0, [r0], -lr
    cbc4:	6b03000d 	blvs	ccc00 <__ccfg+0xacc58>
    cbc8:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cbcc:	09fd2a3f 	ldmibeq	sp!, {r0, r1, r2, r3, r4, r5, r9, fp, sp}^
    cbd0:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    cbd4:	18000020 	stmdane	r0, {r5}
    cbd8:	b415e007 	ldrlt	lr, [r5], #-7
    cbdc:	0c00000a 	stceq	0, cr0, [r0], {10}
    cbe0:	00001ef5 	strdeq	r1, [r0], -r5
    cbe4:	580de107 	stmdapl	sp, {r0, r1, r2, r8, sp, lr, pc}
    cbe8:	00000000 	andeq	r0, r0, r0
    cbec:	0007680c 	andeq	r6, r7, ip, lsl #16
    cbf0:	0de20700 	stcleq	7, cr0, [r2]
    cbf4:	00000058 	andeq	r0, r0, r8, asr r0
    cbf8:	22680c02 	rsbcs	r0, r8, #512	; 0x200
    cbfc:	e5070000 	str	r0, [r7, #-0]
    cc00:	000b2813 	andeq	r2, fp, r3, lsl r8
    cc04:	f70c0400 			; <UNDEFINED> instruction: 0xf70c0400
    cc08:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cc0c:	09470ce6 	stmdbeq	r7, {r1, r2, r5, r6, r7, sl, fp}^
    cc10:	0c080000 	stceq	0, cr0, [r8], {-0}
    cc14:	00002298 	muleq	r0, r8, r2
    cc18:	3406ee07 	strcc	lr, [r6], #-3591	; 0xfffff1f9
    cc1c:	0c00000b 	stceq	0, cr0, [r0], {11}
    cc20:	0021e20c 	eoreq	lr, r1, ip, lsl #4
    cc24:	06f20700 	ldrbteq	r0, [r2], r0, lsl #14
    cc28:	00000b7e 	andeq	r0, r0, lr, ror fp
    cc2c:	26340c0d 	ldrtcs	r0, [r4], -sp, lsl #24
    cc30:	f3070000 	vhadd.u8	d0, d7, d0
    cc34:	0000580d 	andeq	r5, r0, sp, lsl #16
    cc38:	8c0c0e00 	stchi	14, cr0, [ip], {-0}
    cc3c:	07000023 	streq	r0, [r0, -r3, lsr #32]
    cc40:	00580df4 	ldrsheq	r0, [r8], #-212	; 0xffffff2c
    cc44:	0c100000 	ldceq	0, cr0, [r0], {-0}
    cc48:	0000209e 	muleq	r0, lr, r0
    cc4c:	a806fa07 	stmdage	r6, {r0, r1, r2, r9, fp, ip, sp, lr, pc}
    cc50:	1200000b 	andne	r0, r0, #11
    cc54:	0022480c 	eoreq	r4, r2, ip, lsl #16
    cc58:	0cfb0700 	ldcleq	7, cr0, [fp]
    cc5c:	00000045 	andeq	r0, r0, r5, asr #32
    cc60:	25980c13 	ldrcs	r0, [r8, #3091]	; 0xc13
    cc64:	fc070000 	stc2	0, cr0, [r7], {-0}
    cc68:	0000450c 	andeq	r4, r0, ip, lsl #10
    cc6c:	a10c1400 	tstge	ip, r0, lsl #8
    cc70:	07000025 	streq	r0, [r0, -r5, lsr #32]
    cc74:	00450cfd 	strdeq	r0, [r5], #-205	; 0xffffff33
    cc78:	0c150000 	ldceq	0, cr0, [r5], {-0}
    cc7c:	000025aa 	andeq	r2, r0, sl, lsr #11
    cc80:	580dfe07 	stmdapl	sp, {r0, r1, r2, r9, sl, fp, ip, sp, lr, pc}
    cc84:	16000000 	strne	r0, [r0], -r0
    cc88:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cc8c:	0afe0476 	beq	fff8de6c <_estack+0xdff88e6c>
    cc90:	4b200000 	blmi	80cc98 <__ccfg+0x7eccf0>
    cc94:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cc98:	00450f77 	subeq	r0, r5, r7, ror pc
    cc9c:	04010000 	streq	r0, [r1], #-0
    cca0:	e9200004 	stmdb	r0!, {r2}
    cca4:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cca8:	00450f78 	subeq	r0, r5, r8, ror pc
    ccac:	01010000 	mrseq	r0, (UNDEF: 1)
    ccb0:	a9200003 	stmdbge	r0!, {r0, r1}
    ccb4:	07000021 	streq	r0, [r0, -r1, lsr #32]
    ccb8:	00450f7a 	subeq	r0, r5, sl, ror pc
    ccbc:	02010000 	andeq	r0, r1, #0
    ccc0:	64200001 	strtvs	r0, [r0], #-1
    ccc4:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    ccc8:	00450f7b 	subeq	r0, r5, fp, ror pc
    cccc:	01010000 	mrseq	r0, (UNDEF: 1)
    ccd0:	0b000000 	bleq	ccd8 <__exidx_end+0x70d8>
    ccd4:	047e0701 	ldrbteq	r0, [lr], #-1793	; 0xfffff8ff
    ccd8:	00000b28 	andeq	r0, r0, r8, lsr #22
    ccdc:	0025c620 	eoreq	ip, r5, r0, lsr #12
    cce0:	0f7f0700 	svceq	0x007f0700
    cce4:	00000045 	andeq	r0, r0, r5, asr #32
    cce8:	00040401 	andeq	r0, r4, r1, lsl #8
    ccec:	00271a20 	eoreq	r1, r7, r0, lsr #20
    ccf0:	0f800700 	svceq	0x00800700
    ccf4:	00000045 	andeq	r0, r0, r5, asr #32
    ccf8:	00000401 	andeq	r0, r0, r1, lsl #8
    ccfc:	89041000 	stmdbhi	r4, {ip}
    cd00:	10000009 	andne	r0, r0, r9
    cd04:	00006b04 	andeq	r6, r0, r4, lsl #22
    cd08:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cd0c:	0b7e04e7 	bleq	1f8e0b0 <__ccfg+0x1f6e108>
    cd10:	4b200000 	blmi	80cd18 <__ccfg+0x7ecd70>
    cd14:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cd18:	00450fe8 	subeq	r0, r5, r8, ror #31
    cd1c:	04010000 	streq	r0, [r1], #-0
    cd20:	e9200004 	stmdb	r0!, {r2}
    cd24:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cd28:	00450fe9 	subeq	r0, r5, r9, ror #31
    cd2c:	01010000 	mrseq	r0, (UNDEF: 1)
    cd30:	a9200003 	stmdbge	r0!, {r0, r1}
    cd34:	07000021 	streq	r0, [r0, -r1, lsr #32]
    cd38:	00450feb 	subeq	r0, r5, fp, ror #31
    cd3c:	02010000 	andeq	r0, r1, #0
    cd40:	64200001 	strtvs	r0, [r0], #-1
    cd44:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    cd48:	00450fec 	subeq	r0, r5, ip, ror #31
    cd4c:	01010000 	mrseq	r0, (UNDEF: 1)
    cd50:	0b000000 	bleq	cd58 <__exidx_end+0x7158>
    cd54:	04ef0701 	strbteq	r0, [pc], #1793	; cd5c <__exidx_end+0x715c>
    cd58:	00000ba8 	andeq	r0, r0, r8, lsr #23
    cd5c:	0025c620 	eoreq	ip, r5, r0, lsr #12
    cd60:	0ff00700 	svceq	0x00f00700
    cd64:	00000045 	andeq	r0, r0, r5, asr #32
    cd68:	00040401 	andeq	r0, r4, r1, lsl #8
    cd6c:	00271a20 	eoreq	r1, r7, r0, lsr #20
    cd70:	0ff10700 	svceq	0x00f10700
    cd74:	00000045 	andeq	r0, r0, r5, asr #32
    cd78:	00000401 	andeq	r0, r0, r1, lsl #8
    cd7c:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    cd80:	0bd204f5 	bleq	ff48e15c <_estack+0xdf48915c>
    cd84:	d3200000 	nople	{0}	; <UNPREDICTABLE>
    cd88:	07000020 	streq	r0, [r0, -r0, lsr #32]
    cd8c:	00450ff6 	strdeq	r0, [r5], #-246	; 0xffffff0a
    cd90:	01010000 	mrseq	r0, (UNDEF: 1)
    cd94:	34200007 	strtcc	r0, [r0], #-7
    cd98:	07000027 	streq	r0, [r0, -r7, lsr #32]
    cd9c:	00450ff8 	strdeq	r0, [r5], #-248	; 0xffffff08
    cda0:	06010000 	streq	r0, [r1], -r0
    cda4:	10000001 	andne	r0, r0, r1
    cda8:	00097d04 	andeq	r7, r9, r4, lsl #26
    cdac:	26090300 	strcs	r0, [r9], -r0, lsl #6
    cdb0:	3d080000 	stccc	0, cr0, [r8, #-0]
    cdb4:	000be42f 	andeq	lr, fp, pc, lsr #8
    cdb8:	261b0e00 	ldrcs	r0, [fp], -r0, lsl #28
    cdbc:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    cdc0:	0c741578 	cfldr64eq	mvdx1, [r4], #-480	; 0xfffffe20
    cdc4:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
    cdc8:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    cdcc:	00580d79 	subseq	r0, r8, r9, ror sp
    cdd0:	0c000000 	stceq	0, cr0, [r0], {-0}
    cdd4:	00000768 	andeq	r0, r0, r8, ror #14
    cdd8:	580d7a08 	stmdapl	sp, {r3, r9, fp, ip, sp, lr}
    cddc:	02000000 	andeq	r0, r0, #0
    cde0:	0022680c 	eoreq	r6, r2, ip, lsl #16
    cde4:	137d0800 	cmnne	sp, #0, 16
    cde8:	00000b28 	andeq	r0, r0, r8, lsr #22
    cdec:	1ff70c04 	svcne	0x00f70c04
    cdf0:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    cdf4:	0009470c 	andeq	r4, r9, ip, lsl #14
    cdf8:	980c0800 	stmdals	ip, {fp}
    cdfc:	08000022 	stmdaeq	r0, {r1, r5}
    ce00:	0e670686 	cdpeq	6, 6, cr0, cr7, cr6, {4}
    ce04:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ce08:	000021e2 	andeq	r2, r0, r2, ror #3
    ce0c:	b1068a08 	tstlt	r6, r8, lsl #20
    ce10:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    ce14:	00203c0c 	eoreq	r3, r0, ip, lsl #24
    ce18:	06930800 	ldreq	r0, [r3], r0, lsl #16
    ce1c:	00000edb 	ldrdeq	r0, [r0], -fp
    ce20:	25bf0c0e 	ldrcs	r0, [pc, #3086]!	; da36 <__exidx_end+0x7e36>
    ce24:	94080000 	strls	r0, [r8], #-0
    ce28:	0000450c 	andeq	r4, r0, ip, lsl #10
    ce2c:	1e0c0f00 	cdpne	15, 0, cr0, cr12, cr0, {0}
    ce30:	08000023 	stmdaeq	r0, {r0, r1, r5}
    ce34:	006b0d95 	mlseq	fp, r5, sp, r0
    ce38:	0c100000 	ldceq	0, cr0, [r0], {-0}
    ce3c:	00001f22 	andeq	r1, r0, r2, lsr #30
    ce40:	770d9608 	strvc	r9, [sp, -r8, lsl #12]
    ce44:	14000009 	strne	r0, [r0], #-9
    ce48:	24750300 	ldrbtcs	r0, [r5], #-768	; 0xfffffd00
    ce4c:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    ce50:	000c802f 	andeq	r8, ip, pc, lsr #32
    ce54:	216d0e00 	cmncs	sp, r0, lsl #28
    ce58:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    ce5c:	0d5e159f 	cfldr64eq	mvdx1, [lr, #-636]	; 0xfffffd84
    ce60:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
    ce64:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    ce68:	00580da0 	subseq	r0, r8, r0, lsr #27
    ce6c:	0c000000 	stceq	0, cr0, [r0], {-0}
    ce70:	00000768 	andeq	r0, r0, r8, ror #14
    ce74:	580da108 	stmdapl	sp, {r3, r8, sp, pc}
    ce78:	02000000 	andeq	r0, r0, #0
    ce7c:	0022680c 	eoreq	r6, r2, ip, lsl #16
    ce80:	13a40800 			; <UNDEFINED> instruction: 0x13a40800
    ce84:	00000b28 	andeq	r0, r0, r8, lsr #22
    ce88:	1ff70c04 	svcne	0x00f70c04
    ce8c:	a5080000 	strge	r0, [r8, #-0]
    ce90:	0009470c 	andeq	r4, r9, ip, lsl #14
    ce94:	980c0800 	stmdals	ip, {fp}
    ce98:	08000022 	stmdaeq	r0, {r1, r5}
    ce9c:	0f1506ad 	svceq	0x001506ad
    cea0:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    cea4:	000021e2 	andeq	r2, r0, r2, ror #3
    cea8:	5f06b108 	svcpl	0x0006b108
    ceac:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    ceb0:	00203c0c 	eoreq	r3, r0, ip, lsl #24
    ceb4:	06c30800 	strbeq	r0, [r3], r0, lsl #16
    ceb8:	00000f89 	andeq	r0, r0, r9, lsl #31
    cebc:	23d30c0e 	bicscs	r0, r3, #3584	; 0xe00
    cec0:	cd080000 	stcgt	0, cr0, [r8, #-0]
    cec4:	00101306 	andseq	r1, r0, r6, lsl #6
    cec8:	1e0c0f00 	cdpne	15, 0, cr0, cr12, cr0, {0}
    cecc:	08000023 	stmdaeq	r0, {r0, r1, r5}
    ced0:	006b0dce 	rsbeq	r0, fp, lr, asr #27
    ced4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    ced8:	00002121 	andeq	r2, r0, r1, lsr #2
    cedc:	450ccf08 	strmi	ip, [ip, #-3848]	; 0xfffff0f8
    cee0:	14000000 	strne	r0, [r0], #-0
    cee4:	0024250c 	eoreq	r2, r4, ip, lsl #10
    cee8:	0cd10800 	ldcleq	8, cr0, [r1], {0}
    ceec:	00000045 	andeq	r0, r0, r5, asr #32
    cef0:	242e0c15 	strtcs	r0, [lr], #-3093	; 0xfffff3eb
    cef4:	d2080000 	andle	r0, r8, #0
    cef8:	0000450c 	andeq	r4, r0, ip, lsl #10
    cefc:	7f0c1600 	svcvc	0x000c1600
    cf00:	08000021 	stmdaeq	r0, {r0, r5}
    cf04:	108d06db 	ldrdne	r0, [sp], fp
    cf08:	0c170000 	ldceq	0, cr0, [r7], {-0}
    cf0c:	0000266e 	andeq	r2, r0, lr, ror #12
    cf10:	470cdc08 	strmi	sp, [ip, -r8, lsl #24]
    cf14:	18000009 	stmdane	r0, {r0, r3}
    cf18:	0021b30c 	eoreq	fp, r1, ip, lsl #6
    cf1c:	11dd0800 	bicsne	r0, sp, r0, lsl #16
    cf20:	00000bd2 	ldrdeq	r0, [r0], -r2
    cf24:	1f870c1c 	svcne	0x00870c1c
    cf28:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    cf2c:	0009770d 	andeq	r7, r9, sp, lsl #14
    cf30:	03002000 	movweq	r2, #0
    cf34:	00002456 	andeq	r2, r0, r6, asr r4
    cf38:	6a3c4308 	bvs	f1db60 <__ccfg+0xefdbb8>
    cf3c:	1900000d 	stmdbne	r0, {r0, r2, r3}
    cf40:	00002437 	andeq	r2, r0, r7, lsr r4
    cf44:	021a0828 	andseq	r0, sl, #40, 16	; 0x280000
    cf48:	000e6715 	andeq	r6, lr, r5, lsl r7
    cf4c:	1ef51700 	cdpne	7, 15, cr1, cr5, cr0, {0}
    cf50:	1b080000 	blne	20cf58 <__ccfg+0x1ecfb0>
    cf54:	00580d02 	subseq	r0, r8, r2, lsl #26
    cf58:	17000000 	strne	r0, [r0, -r0]
    cf5c:	00000768 	andeq	r0, r0, r8, ror #14
    cf60:	0d021d08 	stceq	13, cr1, [r2, #-32]	; 0xffffffe0
    cf64:	00000058 	andeq	r0, r0, r8, asr r0
    cf68:	22681702 	rsbcs	r1, r8, #524288	; 0x80000
    cf6c:	20080000 	andcs	r0, r8, r0
    cf70:	0b281302 	bleq	a11b80 <__ccfg+0x9f1bd8>
    cf74:	17040000 	strne	r0, [r4, -r0]
    cf78:	00001ff7 	strdeq	r1, [r0], -r7
    cf7c:	0c022108 	stfeqs	f2, [r2], {8}
    cf80:	00000947 	andeq	r0, r0, r7, asr #18
    cf84:	22981708 	addscs	r1, r8, #8, 14	; 0x200000
    cf88:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    cf8c:	10d70602 	sbcsne	r0, r7, r2, lsl #12
    cf90:	170c0000 	strne	r0, [ip, -r0]
    cf94:	000021e2 	andeq	r2, r0, r2, ror #3
    cf98:	06022d08 	streq	r2, [r2], -r8, lsl #26
    cf9c:	00001126 	andeq	r1, r0, r6, lsr #2
    cfa0:	1eea170d 	cdpne	7, 14, cr1, cr10, cr13, {0}
    cfa4:	33080000 	movwcc	r0, #32768	; 0x8000
    cfa8:	11530602 	cmpne	r3, r2, lsl #12
    cfac:	170e0000 	strne	r0, [lr, -r0]
    cfb0:	00002251 	andeq	r2, r0, r1, asr r2
    cfb4:	06023808 	streq	r3, [r2], -r8, lsl #16
    cfb8:	00001180 	andeq	r1, r0, r0, lsl #3
    cfbc:	20801710 	addcs	r1, r0, r0, lsl r7
    cfc0:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    cfc4:	00450c02 	subeq	r0, r5, r2, lsl #24
    cfc8:	17140000 	ldrne	r0, [r4, -r0]
    cfcc:	00002314 	andeq	r2, r0, r4, lsl r3
    cfd0:	06024108 	streq	r4, [r2], -r8, lsl #2
    cfd4:	000011ad 	andeq	r1, r0, sp, lsr #3
    cfd8:	1fec1715 	svcne	0x00ec1715
    cfdc:	55080000 	strpl	r0, [r8, #-0]
    cfe0:	11da0602 	bicsne	r0, sl, r2, lsl #12
    cfe4:	17160000 	ldrne	r0, [r6, -r0]
    cfe8:	0000145f 	andeq	r1, r0, pc, asr r4
    cfec:	06026808 	streq	r6, [r2], -r8, lsl #16
    cff0:	0000123a 	andeq	r1, r0, sl, lsr r2
    cff4:	20781718 	rsbscs	r1, r8, r8, lsl r7
    cff8:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    cffc:	00580d02 	subseq	r0, r8, r2, lsl #26
    d000:	171a0000 	ldrne	r0, [sl, -r0]
    d004:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
    d008:	0e026a08 	vmlaeq.f32	s12, s4, s16
    d00c:	00000b2e 	andeq	r0, r0, lr, lsr #22
    d010:	1f27171c 	svcne	0x0027171c
    d014:	6c080000 	stcvs	0, cr0, [r8], {-0}
    d018:	00580d02 	subseq	r0, r8, r2, lsl #26
    d01c:	17200000 	strne	r0, [r0, -r0]!
    d020:	00002270 	andeq	r2, r0, r0, ror r2
    d024:	0c027008 	stceq	0, cr7, [r2], {8}
    d028:	00000024 	andeq	r0, r0, r4, lsr #32
    d02c:	23ae1722 			; <UNDEFINED> instruction: 0x23ae1722
    d030:	73080000 	movwvc	r0, #32768	; 0x8000
    d034:	00450c02 	subeq	r0, r5, r2, lsl #24
    d038:	00240000 	eoreq	r0, r4, r0
    d03c:	7f08010b 	svcvc	0x0008010b
    d040:	000eb104 	andeq	fp, lr, r4, lsl #2
    d044:	274b2000 	strbcs	r2, [fp, -r0]
    d048:	80080000 	andhi	r0, r8, r0
    d04c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d050:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d054:	20e92000 	rsccs	r2, r9, r0
    d058:	81080000 	mrshi	r0, (UNDEF: 8)
    d05c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d060:	03010100 	movweq	r0, #4352	; 0x1100
    d064:	21a92000 			; <UNDEFINED> instruction: 0x21a92000
    d068:	83080000 	movwhi	r0, #32768	; 0x8000
    d06c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d070:	01020100 	mrseq	r0, (UNDEF: 18)
    d074:	1f642000 	svcne	0x00642000
    d078:	84080000 	strhi	r0, [r8], #-0
    d07c:	0000450f 	andeq	r4, r0, pc, lsl #10
    d080:	00010100 	andeq	r0, r1, r0, lsl #2
    d084:	010b0000 	mrseq	r0, (UNDEF: 11)
    d088:	db048708 	blle	12ecb0 <__ccfg+0x10ed08>
    d08c:	2000000e 	andcs	r0, r0, lr
    d090:	000025c6 	andeq	r2, r0, r6, asr #11
    d094:	450f8808 	strmi	r8, [pc, #-2056]	; c894 <__exidx_end+0x6c94>
    d098:	01000000 	mrseq	r0, (UNDEF: 0)
    d09c:	20000404 	andcs	r0, r0, r4, lsl #8
    d0a0:	0000271a 	andeq	r2, r0, sl, lsl r7
    d0a4:	450f8908 	strmi	r8, [pc, #-2312]	; c7a4 <__exidx_end+0x6ba4>
    d0a8:	01000000 	mrseq	r0, (UNDEF: 0)
    d0ac:	00000004 	andeq	r0, r0, r4
    d0b0:	8b08010b 	blhi	20d4e4 <__ccfg+0x1ed53c>
    d0b4:	000f1504 	andeq	r1, pc, r4, lsl #10
    d0b8:	26592000 	ldrbcs	r2, [r9], -r0
    d0bc:	8c080000 	stchi	0, cr0, [r8], {-0}
    d0c0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d0c4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d0c8:	26e12000 	strbtcs	r2, [r1], r0
    d0cc:	8f080000 	svchi	0x00080000
    d0d0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d0d4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d0d8:	1f1a2000 	svcne	0x001a2000
    d0dc:	91080000 	mrsls	r0, (UNDEF: 8)
    d0e0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d0e4:	03010100 	movweq	r0, #4352	; 0x1100
    d0e8:	010b0000 	mrseq	r0, (UNDEF: 11)
    d0ec:	5f04a608 	svcpl	0x0004a608
    d0f0:	2000000f 	andcs	r0, r0, pc
    d0f4:	0000274b 	andeq	r2, r0, fp, asr #14
    d0f8:	450fa708 	strmi	sl, [pc, #-1800]	; c9f8 <__exidx_end+0x6df8>
    d0fc:	01000000 	mrseq	r0, (UNDEF: 0)
    d100:	20000404 	andcs	r0, r0, r4, lsl #8
    d104:	000020e9 	andeq	r2, r0, r9, ror #1
    d108:	450fa808 	strmi	sl, [pc, #-2056]	; c908 <__exidx_end+0x6d08>
    d10c:	01000000 	mrseq	r0, (UNDEF: 0)
    d110:	20000301 	andcs	r0, r0, r1, lsl #6
    d114:	000021a9 	andeq	r2, r0, r9, lsr #3
    d118:	450faa08 	strmi	sl, [pc, #-2568]	; c718 <__exidx_end+0x6b18>
    d11c:	01000000 	mrseq	r0, (UNDEF: 0)
    d120:	20000102 	andcs	r0, r0, r2, lsl #2
    d124:	00001f64 	andeq	r1, r0, r4, ror #30
    d128:	450fab08 	strmi	sl, [pc, #-2824]	; c628 <__exidx_end+0x6a28>
    d12c:	01000000 	mrseq	r0, (UNDEF: 0)
    d130:	00000001 	andeq	r0, r0, r1
    d134:	ae08010b 	adfgee	f0, f0, #3.0
    d138:	000f8904 	andeq	r8, pc, r4, lsl #18
    d13c:	25c62000 	strbcs	r2, [r6]
    d140:	af080000 	svcge	0x00080000
    d144:	0000450f 	andeq	r4, r0, pc, lsl #10
    d148:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    d14c:	271a2000 	ldrcs	r2, [sl, -r0]
    d150:	b0080000 	andlt	r0, r8, r0
    d154:	0000450f 	andeq	r4, r0, pc, lsl #10
    d158:	00040100 	andeq	r0, r4, r0, lsl #2
    d15c:	010b0000 	mrseq	r0, (UNDEF: 11)
    d160:	1304b208 	movwne	fp, #16904	; 0x4208
    d164:	20000010 	andcs	r0, r0, r0, lsl r0
    d168:	00002659 	andeq	r2, r0, r9, asr r6
    d16c:	450fb308 	strmi	fp, [pc, #-776]	; ce6c <__exidx_end+0x726c>
    d170:	01000000 	mrseq	r0, (UNDEF: 0)
    d174:	20000701 	andcs	r0, r0, r1, lsl #14
    d178:	00001f8f 	andeq	r1, r0, pc, lsl #31
    d17c:	450fb508 	strmi	fp, [pc, #-1288]	; cc7c <__exidx_end+0x707c>
    d180:	01000000 	mrseq	r0, (UNDEF: 0)
    d184:	20000601 	andcs	r0, r0, r1, lsl #12
    d188:	00002537 	andeq	r2, r0, r7, lsr r5
    d18c:	450fb708 	strmi	fp, [pc, #-1800]	; ca8c <__exidx_end+0x6e8c>
    d190:	01000000 	mrseq	r0, (UNDEF: 0)
    d194:	20000501 	andcs	r0, r0, r1, lsl #10
    d198:	000026e1 	andeq	r2, r0, r1, ror #13
    d19c:	450fb908 	strmi	fp, [pc, #-2312]	; c89c <__exidx_end+0x6c9c>
    d1a0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1a4:	20000401 	andcs	r0, r0, r1, lsl #8
    d1a8:	00001f1a 	andeq	r1, r0, sl, lsl pc
    d1ac:	450fbb08 	strmi	fp, [pc, #-2824]	; c6ac <__exidx_end+0x6aac>
    d1b0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1b4:	20000301 	andcs	r0, r0, r1, lsl #6
    d1b8:	00002676 	andeq	r2, r0, r6, ror r6
    d1bc:	450fbd08 	strmi	fp, [pc, #-3336]	; c4bc <__exidx_end+0x68bc>
    d1c0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1c4:	20000201 	andcs	r0, r0, r1, lsl #4
    d1c8:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
    d1cc:	450fbf08 	strmi	fp, [pc, #-3848]	; c2cc <__exidx_end+0x66cc>
    d1d0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1d4:	20000101 	andcs	r0, r0, r1, lsl #2
    d1d8:	00002542 	andeq	r2, r0, r2, asr #10
    d1dc:	450fc108 	strmi	ip, [pc, #-264]	; d0dc <__exidx_end+0x74dc>
    d1e0:	01000000 	mrseq	r0, (UNDEF: 0)
    d1e4:	00000001 	andeq	r0, r0, r1
    d1e8:	c408010b 	strgt	r0, [r8], #-267	; 0xfffffef5
    d1ec:	00108d04 	andseq	r8, r0, r4, lsl #26
    d1f0:	22782000 	rsbscs	r2, r8, #0
    d1f4:	c5080000 	strgt	r0, [r8, #-0]
    d1f8:	0000450f 	andeq	r4, r0, pc, lsl #10
    d1fc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d200:	20b12000 	adcscs	r2, r1, r0
    d204:	c6080000 	strgt	r0, [r8], -r0
    d208:	0000450f 	andeq	r4, r0, pc, lsl #10
    d20c:	06010100 	streq	r0, [r1], -r0, lsl #2
    d210:	21ec2000 	mvncs	r2, r0
    d214:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    d218:	0000450f 	andeq	r4, r0, pc, lsl #10
    d21c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d220:	21552000 	cmpcs	r5, r0
    d224:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    d228:	0000450f 	andeq	r4, r0, pc, lsl #10
    d22c:	03010100 	movweq	r0, #4352	; 0x1100
    d230:	24cb2000 	strbcs	r2, [fp], #0
    d234:	ca080000 	bgt	20d23c <__ccfg+0x1ed294>
    d238:	0000450f 	andeq	r4, r0, pc, lsl #10
    d23c:	02010100 	andeq	r0, r1, #0, 2
    d240:	20012000 	andcs	r2, r1, r0
    d244:	cb080000 	blgt	20d24c <__ccfg+0x1ed2a4>
    d248:	0000450f 	andeq	r4, r0, pc, lsl #10
    d24c:	01010100 	mrseq	r0, (UNDEF: 17)
    d250:	1eff2000 	cdpne	0, 15, cr2, cr15, cr0, {0}
    d254:	cc080000 	stcgt	0, cr0, [r8], {-0}
    d258:	0000450f 	andeq	r4, r0, pc, lsl #10
    d25c:	00010100 	andeq	r0, r1, r0, lsl #2
    d260:	010b0000 	mrseq	r0, (UNDEF: 11)
    d264:	d704d408 	strle	sp, [r4, -r8, lsl #8]
    d268:	20000010 	andcs	r0, r0, r0, lsl r0
    d26c:	0000274b 	andeq	r2, r0, fp, asr #14
    d270:	450fd508 	strmi	sp, [pc, #-1288]	; cd70 <__exidx_end+0x7170>
    d274:	01000000 	mrseq	r0, (UNDEF: 0)
    d278:	20000404 	andcs	r0, r0, r4, lsl #8
    d27c:	000020e9 	andeq	r2, r0, r9, ror #1
    d280:	450fd608 	strmi	sp, [pc, #-1544]	; cc80 <__exidx_end+0x7080>
    d284:	01000000 	mrseq	r0, (UNDEF: 0)
    d288:	20000301 	andcs	r0, r0, r1, lsl #6
    d28c:	000021a9 	andeq	r2, r0, r9, lsr #3
    d290:	450fd808 	strmi	sp, [pc, #-2056]	; ca90 <__exidx_end+0x6e90>
    d294:	01000000 	mrseq	r0, (UNDEF: 0)
    d298:	20000102 	andcs	r0, r0, r2, lsl #2
    d29c:	00001f64 	andeq	r1, r0, r4, ror #30
    d2a0:	450fd908 	strmi	sp, [pc, #-2312]	; c9a0 <__exidx_end+0x6da0>
    d2a4:	01000000 	mrseq	r0, (UNDEF: 0)
    d2a8:	00000001 	andeq	r0, r0, r1
    d2ac:	2208011a 	andcs	r0, r8, #-2147483642	; 0x80000006
    d2b0:	11260402 			; <UNDEFINED> instruction: 0x11260402
    d2b4:	4b210000 	blmi	84d2bc <__ccfg+0x82d314>
    d2b8:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d2bc:	450f0223 	strmi	r0, [pc, #-547]	; d0a1 <__exidx_end+0x74a1>
    d2c0:	01000000 	mrseq	r0, (UNDEF: 0)
    d2c4:	21000404 	tstcs	r0, r4, lsl #8
    d2c8:	000020e9 	andeq	r2, r0, r9, ror #1
    d2cc:	0f022408 	svceq	0x00022408
    d2d0:	00000045 	andeq	r0, r0, r5, asr #32
    d2d4:	00030101 	andeq	r0, r3, r1, lsl #2
    d2d8:	0021a921 	eoreq	sl, r1, r1, lsr #18
    d2dc:	02260800 	eoreq	r0, r6, #0, 16
    d2e0:	0000450f 	andeq	r4, r0, pc, lsl #10
    d2e4:	01020100 	mrseq	r0, (UNDEF: 18)
    d2e8:	1f642100 	svcne	0x00642100
    d2ec:	27080000 	strcs	r0, [r8, -r0]
    d2f0:	00450f02 	subeq	r0, r5, r2, lsl #30
    d2f4:	01010000 	mrseq	r0, (UNDEF: 1)
    d2f8:	1a000000 	bne	d300 <__exidx_end+0x7700>
    d2fc:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    d300:	00115304 	andseq	r5, r1, r4, lsl #6
    d304:	25c62100 	strbcs	r2, [r6, #256]	; 0x100
    d308:	2b080000 	blcs	20d310 <__ccfg+0x1ed368>
    d30c:	00450f02 	subeq	r0, r5, r2, lsl #30
    d310:	04010000 	streq	r0, [r1], #-0
    d314:	1a210004 	bne	84d32c <__ccfg+0x82d384>
    d318:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d31c:	450f022c 	strmi	r0, [pc, #-556]	; d0f8 <__exidx_end+0x74f8>
    d320:	01000000 	mrseq	r0, (UNDEF: 0)
    d324:	00000004 	andeq	r0, r0, r4
    d328:	2e08021a 	mcrcs	2, 0, r0, cr8, cr10, {0}
    d32c:	11800402 	orrne	r0, r0, r2, lsl #8
    d330:	01210000 			; <UNDEFINED> instruction: 0x01210000
    d334:	08000022 	stmdaeq	r0, {r1, r5}
    d338:	5810022f 	ldmdapl	r0, {r0, r1, r2, r3, r5, r9}
    d33c:	02000000 	andeq	r0, r0, #0
    d340:	21000d03 	tstcs	r0, r3, lsl #26
    d344:	000026fd 	strdeq	r2, [r0], -sp
    d348:	10023208 	andne	r3, r2, r8, lsl #4
    d34c:	00000058 	andeq	r0, r0, r8, asr r0
    d350:	00000d02 	andeq	r0, r0, r2, lsl #26
    d354:	08041a00 	stmdaeq	r4, {r9, fp, ip}
    d358:	ad040234 	sfmge	f0, 4, [r4, #-208]	; 0xffffff30
    d35c:	21000011 	tstcs	r0, r1, lsl r0
    d360:	00002396 	muleq	r0, r6, r3
    d364:	10023508 	andne	r3, r2, r8, lsl #10
    d368:	0000006b 	andeq	r0, r0, fp, rrx
    d36c:	001c0404 	andseq	r0, ip, r4, lsl #8
    d370:	0024a621 	eoreq	sl, r4, r1, lsr #12
    d374:	02370800 	eorseq	r0, r7, #0, 16
    d378:	00006b10 	andeq	r6, r0, r0, lsl fp
    d37c:	03150400 	tsteq	r5, #0, 8
    d380:	011a0000 	tsteq	sl, r0
    d384:	04023a08 	streq	r3, [r2], #-2568	; 0xfffff5f8
    d388:	000011da 	ldrdeq	r1, [r0], -sl
    d38c:	0025f221 	eoreq	pc, r5, r1, lsr #4
    d390:	023b0800 	eorseq	r0, fp, #0, 16
    d394:	0000450f 	andeq	r4, r0, pc, lsl #10
    d398:	02060100 	andeq	r0, r6, #0, 2
    d39c:	1fbc2100 	svcne	0x00bc2100
    d3a0:	3d080000 	stccc	0, cr0, [r8, #-0]
    d3a4:	00450f02 	subeq	r0, r5, r2, lsl #30
    d3a8:	02010000 	andeq	r0, r1, #0
    d3ac:	1a000000 	bne	d3b4 <__exidx_end+0x77b4>
    d3b0:	02420802 	subeq	r0, r2, #131072	; 0x20000
    d3b4:	00123a04 	andseq	r3, r2, r4, lsl #20
    d3b8:	239f2100 	orrscs	r2, pc, #0, 2
    d3bc:	43080000 	movwmi	r0, #32768	; 0x8000
    d3c0:	00581002 	subseq	r1, r8, r2
    d3c4:	06020000 	streq	r0, [r2], -r0
    d3c8:	3b21000a 	blcc	84d3f8 <__ccfg+0x82d450>
    d3cc:	08000022 	stmdaeq	r0, {r1, r5}
    d3d0:	58100244 	ldmdapl	r0, {r2, r6, r9}
    d3d4:	02000000 	andeq	r0, r0, #0
    d3d8:	21000901 	tstcs	r0, r1, lsl #18
    d3dc:	00002407 	andeq	r2, r0, r7, lsl #8
    d3e0:	10024608 	andne	r4, r2, r8, lsl #12
    d3e4:	00000058 	andeq	r0, r0, r8, asr r0
    d3e8:	00080102 	andeq	r0, r8, r2, lsl #2
    d3ec:	001fa421 	andseq	sl, pc, r1, lsr #8
    d3f0:	02480800 	subeq	r0, r8, #0, 16
    d3f4:	00005810 	andeq	r5, r0, r0, lsl r8
    d3f8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    d3fc:	1f472100 	svcne	0x00472100
    d400:	4d080000 	stcmi	0, cr0, [r8, #-0]
    d404:	00581002 	subseq	r1, r8, r2
    d408:	03020000 	movweq	r0, #8192	; 0x2000
    d40c:	1a000000 	bne	d414 <__exidx_end+0x7814>
    d410:	02560802 	subseq	r0, r6, #131072	; 0x20000
    d414:	00128904 	andseq	r8, r2, r4, lsl #18
    d418:	219c2100 	orrscs	r2, ip, r0, lsl #2
    d41c:	57080000 	strpl	r0, [r8, -r0]
    d420:	00581002 	subseq	r1, r8, r2
    d424:	03020000 	movweq	r0, #8192	; 0x2000
    d428:	3b21000d 	blcc	84d464 <__ccfg+0x82d4bc>
    d42c:	08000021 	stmdaeq	r0, {r0, r5}
    d430:	5810025d 	ldmdapl	r0, {r0, r2, r3, r4, r6, r9}
    d434:	02000000 	andeq	r0, r0, #0
    d438:	21000c01 	tstcs	r0, r1, lsl #24
    d43c:	000020db 	ldrdeq	r2, [r0], -fp
    d440:	10025f08 	andne	r5, r2, r8, lsl #30
    d444:	00000058 	andeq	r0, r0, r8, asr r0
    d448:	00060602 	andeq	r0, r6, r2, lsl #12
    d44c:	0023da21 	eoreq	sp, r3, r1, lsr #20
    d450:	02660800 	rsbeq	r0, r6, #0, 16
    d454:	00005810 	andeq	r5, r0, r0, lsl r8
    d458:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    d45c:	77090000 	strvc	r0, [r9, -r0]
    d460:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    d464:	0a000012 	beq	d4b4 <__exidx_end+0x78b4>
    d468:	00000091 	muleq	r0, r1, r0
    d46c:	890400a2 	stmdbhi	r4, {r1, r5, r7}
    d470:	22000012 	andcs	r0, r0, #18
    d474:	000022a5 	andeq	r2, r0, r5, lsr #5
    d478:	99104909 	ldmdbls	r0, {r0, r3, r8, fp, lr}
    d47c:	8c000012 	stchi	0, cr0, [r0], {18}
    d480:	0004ad02 	andeq	sl, r4, r2, lsl #26
    d484:	00044921 	andeq	r4, r4, r1, lsr #18
    d488:	00047d21 	andeq	r7, r4, r1, lsr #26
    d48c:	00048121 	andeq	r8, r4, r1, lsr #2
    d490:	00051121 	andeq	r1, r5, r1, lsr #2
    d494:	00059121 	andeq	r9, r5, r1, lsr #2
    d498:	00064121 	andeq	r4, r6, r1, lsr #2
    d49c:	10b5f821 	adcsne	pc, r5, r1, lsr #16
    d4a0:	0eb5f847 	cdpeq	8, 11, cr15, cr5, cr7, {2}
    d4a4:	01210046 			; <UNDEFINED> instruction: 0x01210046
    d4a8:	3004ad25 	andcc	sl, r4, r5, lsr #26
    d4ac:	03480a47 	movteq	r0, #35399	; 0x8a47
    d4b0:	0ff00078 	svceq	0x00f00078
    d4b4:	0b079bf8 	bleq	1f449c <__ccfg+0x1d44f4>
    d4b8:	204c12d0 	ldrdcs	r1, [ip], #-32	; 0xffffffe0
    d4bc:	0728ff78 			; <UNDEFINED> instruction: 0x0728ff78
    d4c0:	2121ffd0 	ldrdcs	pc, [r1, -r0]!
    d4c4:	0f490e70 	svceq	0x00490e70
    d4c8:	20022424 	andcs	r2, r2, r4, lsr #8
    d4cc:	c8316043 	ldmdagt	r1!, {r0, r1, r6, sp, lr}
    d4d0:	f8bdf882 			; <UNDEFINED> instruction: 0xf8bdf882
    d4d4:	004801b5 	strheq	r0, [r8], #-21	; 0xffffffeb
    d4d8:	00026b47 	andeq	r6, r2, r7, asr #22
    d4dc:	004ce521 	subeq	lr, ip, r1, lsr #10
    d4e0:	01480900 	cmpeq	r8, r0, lsl #18
    d4e4:	004808e0 	subeq	r0, r8, r0, ror #17
    d4e8:	054c060c 	strbeq	r0, [ip, #-1548]	; 0xfffff9f4
    d4ec:	ff782249 			; <UNDEFINED> instruction: 0xff782249
    d4f0:	cad1012a 	bgt	ff44d9a0 <_estack+0xdf4489a0>
    d4f4:	6070227a 	rsbsvs	r2, r0, sl, ror r2
    d4f8:	7082c831 	addvc	ip, r2, r1, lsr r8
    d4fc:	001c8046 	andseq	r8, ip, r6, asr #32
    d500:	08620047 	stmdaeq	r2!, {r0, r1, r2, r6}^
    d504:	0006a440 	andeq	sl, r6, r0, asr #8
    d508:	080f0721 	stmdaeq	pc, {r0, r5, r8, r9, sl}	; <UNPREDICTABLE>
    d50c:	08b4f008 	ldmeq	r4!, {r3, ip, sp, lr, pc}
    d510:	03b57047 			; <UNDEFINED> instruction: 0x03b57047
    d514:	01461546 	cmpeq	r6, r6, asr #10
    d518:	00d00629 	sbcseq	r0, r0, r9, lsr #12
    d51c:	11d00629 	bicsne	r0, r0, r9, lsr #12
    d520:	ff46284a 			; <UNDEFINED> instruction: 0xff46284a
    d524:	70ffbbf7 	ldrshtvc	fp, [pc], #183
    d528:	00480fbd 	strheq	r0, [r8], #-253	; 0xffffff03
    d52c:	05480fe0 	strbeq	r0, [r8, #-4064]	; 0xfffff020
    d530:	03428324 	movteq	r8, #8996	; 0x2324
    d534:	640840d8 	strvs	r4, [r8], #-216	; 0xffffff28
    d538:	f92c001e 			; <UNDEFINED> instruction: 0xf92c001e
    d53c:	0140e3dc 	ldrdeq	lr, [r0, #-60]	; 0xffffffc4
    d540:	18034020 	stmdane	r3, {r5, lr}
    d544:	010b8218 	tsteq	fp, r8, lsl r2
    d548:	06d00729 	ldrbeq	r0, [r0], r9, lsr #14
    d54c:	80230049 	eorhi	r0, r3, r9, asr #32
    d550:	ff462831 			; <UNDEFINED> instruction: 0xff462831
    d554:	e0ffa5f7 	ldrsht	sl, [pc], #87
    d558:	02bd70b2 	adcseq	r7, sp, #178	; 0xb2
    d55c:	6c4b0449 	cfstrdvs	mvd0, [fp], {73}	; 0x49
    d560:	00e7f631 	rsceq	pc, r7, r1, lsr r6	; <UNPREDICTABLE>
    d564:	005c8300 	subseq	r8, ip, r0, lsl #6
    d568:	86bca000 	ldrthi	sl, [ip], r0
    d56c:	0d830023 	stceq	0, cr0, [r3, #140]	; 0x8c
    d570:	00067423 	andeq	r7, r6, r3, lsr #8
    d574:	1ab5f821 	bne	fed8b600 <_estack+0xded86600>
    d578:	7146054e 	cmpvc	r6, lr, asr #10
    d57c:	cc48196b 	mcrrgt	9, 6, r1, r8, cr11	; <UNPREDICTABLE>
    d580:	0001e409 	andeq	lr, r1, r9, lsl #8
    d584:	18d0112d 	ldmne	r0, {r0, r2, r3, r5, r8, ip}^
    d588:	02780949 	rsbseq	r0, r8, #1196032	; 0x124000
    d58c:	00d00f29 	sbcseq	r0, r0, r9, lsr #30
    d590:	7243047b 	subvc	r0, r3, #2063597568	; 0x7b000000
    d594:	152001b6 	strne	r0, [r0, #-438]!	; 0xfffffe4a
    d598:	b802404f 	stmdalt	r2, {r0, r1, r2, r3, r6, lr}
    d59c:	20481147 	subcs	r1, r8, r7, asr #2
    d5a0:	c1880038 	orrgt	r0, r8, r8, lsr r0
    d5a4:	0407c909 	streq	ip, [r7], #-2313	; 0xfffff6f7
    d5a8:	c0e016d0 	ldrdgt	r1, [r0], #96	; 0x60	; <UNPREDICTABLE>
    d5ac:	40e7f07a 	rscmi	pc, r7, sl, ror r0	; <UNPREDICTABLE>
    d5b0:	0fe7ee7b 	svceq	0x00e7ee7b
    d5b4:	cc637449 	cfstrdgt	mvd7, [r3], #-292	; 0xfffffedc
    d5b8:	c00a4061 	andgt	r4, sl, r1, rrx
    d5bc:	01d00c07 	bicseq	r0, r0, r7, lsl #24
    d5c0:	31038020 	tstcc	r3, r0, lsr #32
    d5c4:	012d006b 			; <UNDEFINED> instruction: 0x012d006b
    d5c8:	004301d0 	ldrdeq	r0, [r3], #-16
    d5cc:	084381e0 	stmdaeq	r3, {r5, r6, r7, r8, pc}^
    d5d0:	07633146 	strbeq	r3, [r3, -r6, asr #2]!
    d5d4:	48394049 	ldmdami	r9!, {r0, r3, r6, lr}
    d5d8:	b8200063 	stmdalt	r0!, {r0, r1, r5, r6}
    d5dc:	f8b66247 			; <UNDEFINED> instruction: 0xf8b66247
    d5e0:	000280bd 	strheq	r8, [r2], -sp
    d5e4:	00008821 	andeq	r8, r0, r1, lsr #16
    d5e8:	00029b21 	andeq	r9, r2, r1, lsr #22
    d5ec:	003f7b21 	eorseq	r7, pc, r1, lsr #22
    d5f0:	04404000 	strbeq	r4, [r0], #-0
    d5f4:	22b51040 	adcscs	r1, r5, #64	; 0x40
    d5f8:	5121004a 			; <UNDEFINED> instruction: 0x5121004a
    d5fc:	89492161 	stmdbhi	r9, {r0, r5, r6, r8, sp}^
    d600:	0900c968 	stmdbeq	r0, {r3, r5, r6, r8, fp, lr, pc}
    d604:	204921d4 	ldrdcs	r2, [r9], #-20	; 0xffffffec
    d608:	9805ca4b 	stmdals	r5, {r0, r1, r3, r6, r9, fp, lr, pc}
    d60c:	016b4b42 	cmneq	fp, r2, asr #22
    d610:	004313d8 	ldrdeq	r1, [r3], #-56	; 0xffffffc8
    d614:	4b4393e0 	blmi	10f259c <__ccfg+0x10d25f4>
    d618:	ff491d63 			; <UNDEFINED> instruction: 0xff491d63
    d61c:	10ff77f7 	ldrshtne	r7, [pc], #119
    d620:	1ab538bd 	bne	fed5b91c <_estack+0xded5691c>
    d624:	007f284d 	rsbseq	r2, pc, sp, asr #16
    d628:	1ad12728 	bne	ff4572d0 <_estack+0xdf4522d0>
    d62c:	c0880048 	addgt	r0, r8, r8, asr #32
    d630:	2207c009 	andcs	ip, r7, #9
    d634:	604c12d1 	ldrdvs	r1, [ip], #-33	; 0xffffffdf
    d638:	1e280069 	cdpne	0, 2, cr0, cr8, cr9, {3}
    d63c:	004668d1 	ldrdeq	r6, [r6], #-129	; 0xffffff7f
    d640:	68f845f0 	ldmvs	r8!, {r4, r5, r6, r7, r8, sl, lr}^
    d644:	01780046 	cmneq	r8, r6, asr #32
    d648:	68d11728 	ldmvs	r1, {r3, r5, r8, r9, sl, ip}^
    d64c:	10784046 	rsbsne	r4, r8, r6, asr #32
    d650:	08d21328 	ldmeq	r2, {r3, r5, r8, r9, ip}^
    d654:	68616020 	stmdavs	r1!, {r5, sp, lr}^
    d658:	4009406a 	andmi	r4, r9, sl, rrx
    d65c:	0e602001 	cdpeq	0, 6, cr2, cr0, cr1, {0}
    d660:	d121004a 			; <UNDEFINED> instruction: 0xd121004a
    d664:	024a0d62 	subeq	r0, sl, #6272	; 0x1880
    d668:	01601121 	cmneq	r0, r1, lsr #2
    d66c:	20430821 	subcs	r0, r3, r1, lsr #16
    d670:	08210360 	stmdaeq	r1!, {r5, r6, r8, r9}
    d674:	20626843 	rsbcs	r6, r2, r3, asr #16
    d678:	09bd3860 	ldmibeq	sp!, {r5, r6, fp, ip, sp}
    d67c:	38478048 	stmdacc	r7, {r3, r6, pc}^
    d680:	044000bd 	strbeq	r0, [r0], #-189	; 0xffffff43
    d684:	00001840 	andeq	r1, r0, r0, asr #16
    d688:	93000021 	movwls	r0, #33	; 0x21
    d68c:	00028008 	andeq	r8, r2, r8
    d690:	0068cf21 	rsbeq	ip, r8, r1, lsr #30
    d694:	00006800 	andeq	r6, r0, r0, lsl #16
    d698:	04110021 	ldreq	r0, [r1], #-33	; 0xffffffdf
    d69c:	00e28040 	rsceq	r8, r2, r0, asr #32
    d6a0:	003bc3e0 	eorseq	ip, fp, r0, ror #7
    d6a4:	00490700 	subeq	r0, r9, r0, lsl #14
    d6a8:	04d00028 	ldrbeq	r0, [r0], #40	; 0x28
    d6ac:	724a0620 	subvc	r0, sl, #32, 12	; 0x2000000
    d6b0:	c97809b6 	ldmdbgt	r8!, {r1, r2, r4, r5, r7, r8, fp}^
    d6b4:	10d00107 	sbcsne	r0, r0, r7, lsl #2
    d6b8:	80e00058 	rschi	r0, r0, r8, asr r0
    d6bc:	40b66220 	adcsmi	r6, r6, r0, lsr #4
    d6c0:	004770b2 	strheq	r7, [r7], #-2
    d6c4:	00026b00 	andeq	r6, r2, r0, lsl #22
    d6c8:	04605821 	strbteq	r5, [r0], #-2081	; 0xfffff7df
    d6cc:	01b40340 			; <UNDEFINED> instruction: 0x01b40340
    d6d0:	01900148 	orrseq	r0, r0, r8, asr #2
    d6d4:	006fa5bd 	strhteq	sl, [pc], #-93
    d6d8:	00000000 	andeq	r0, r0, r0
    d6dc:	03000100 	movweq	r0, #256	; 0x100
    d6e0:	1f000a00 	svcne	0x00000a00
    d6e4:	eb005900 	bl	23aec <__ccfg+0x3b44>
    d6e8:	ea023900 	b	9baf0 <__ccfg+0x7bb48>
    d6ec:	9709f904 	strls	pc, [r9, -r4, lsl #18]
    d6f0:	a11feb12 	tstge	pc, r2, lsl fp	; <UNPREDICTABLE>
    d6f4:	0a4a7832 	beq	12ab7c4 <__ccfg+0x128b81c>
    d6f8:	8c82fa66 	vstmiahi	r2, {s30-s131}
    d6fc:	17b6639e 			; <UNDEFINED> instruction: 0x17b6639e
    d700:	edd664c9 	cfldrd	mvd6, [r6, #804]	; 0x324
    d704:	e0e3c1de 	ldrd	ip, [r3], #30	; <UNPREDICTABLE>
    d708:	0000ffe5 	andeq	pc, r0, r5, ror #31
    d70c:	00770900 	rsbseq	r0, r7, r0, lsl #18
    d710:	15490000 	strbne	r0, [r9, #-0]
    d714:	91230000 			; <UNDEFINED> instruction: 0x91230000
    d718:	ac000000 	stcge	0, cr0, [r0], {-0}
    d71c:	38040001 	stmdacc	r4, {r0}
    d720:	22000015 	andcs	r0, r0, #21
    d724:	0000232e 	andeq	r2, r0, lr, lsr #6
    d728:	49103a0a 	ldmdbmi	r0, {r1, r3, r9, fp, ip, sp}
    d72c:	b4000015 	strlt	r0, [r0], #-21	; 0xffffffeb
    d730:	0061a306 	rsbeq	sl, r1, r6, lsl #6
    d734:	07147f00 	ldreq	r7, [r4, -r0, lsl #30]
    d738:	f1004d13 			; <UNDEFINED> instruction: 0xf1004d13
    d73c:	131f2e24 	tstne	pc, #36, 28	; 0x240
    d740:	3f0ab03f 	svccc	0x000ab03f
    d744:	00ff0700 	rscseq	r0, pc, r0, lsl #14
    d748:	00403000 	subeq	r3, r0, r0
    d74c:	03400140 	movteq	r0, #320	; 0x140
    d750:	0f400740 	svceq	0x00400740
    d754:	cf404f40 	svcgt	0x00404f40
    d758:	cf41cf40 	svcgt	0x0041cf40
    d75c:	cf47cf43 	svcgt	0x0047cf43
    d760:	cf3fcf4f 	svcgt	0x003fcf4f
    d764:	cf1fcf2f 	svcgt	0x001fcf2f
    d768:	0000000f 	andeq	r0, r0, pc
    d76c:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    d770:	3f000000 	svccc	0x00000000
    d774:	40000000 	andmi	r0, r0, r0
    d778:	00003f00 	andeq	r3, r0, r0, lsl #30
    d77c:	68000400 	stmdavs	r0, {sl}
    d780:	dc000e00 	stcle	14, cr0, [r0], {-0}
    d784:	43000600 	movwmi	r0, #1536	; 0x600
    d788:	05001a00 	streq	r1, [r0, #-2560]	; 0xfffff600
    d78c:	00000000 	andeq	r0, r0, r0
    d790:	00000200 	andeq	r0, r0, r0, lsl #4
    d794:	00003f00 	andeq	r3, r0, r0, lsl #30
    d798:	04000000 	streq	r0, [r0], #-0
    d79c:	0000c000 	andeq	ip, r0, r0
    d7a0:	c0000400 	andgt	r0, r0, r0, lsl #8
    d7a4:	07000000 	streq	r0, [r0, -r0]
    d7a8:	00c05000 	sbceq	r5, r0, r0
    d7ac:	70700091 			; <UNDEFINED> instruction: 0x70700091
    d7b0:	009100c0 	addseq	r0, r1, r0, asr #1
    d7b4:	21318270 	teqcs	r1, r0, ror r2
    d7b8:	10913100 	addsne	r3, r1, r0, lsl #2
    d7bc:	017000b1 	ldrheq	r0, [r0, #-1]!
    d7c0:	00b10181 	adcseq	r0, r1, r1, lsl #3
    d7c4:	323182a1 	eorscc	r8, r1, #268435466	; 0x1000000a
    d7c8:	01b11091 			; <UNDEFINED> instruction: 0x01b11091
    d7cc:	41101191 			; <UNDEFINED> instruction: 0x41101191
    d7d0:	4f224181 	svcmi	0x00224181
    d7d4:	0006f140 	andeq	pc, r6, r0, asr #2
    d7d8:	01c05170 	biceq	r5, r0, r0, ror r1
    d7dc:	10183091 	mulsne	r8, r1, r0
    d7e0:	08318339 	ldmdaeq	r1!, {r0, r3, r4, r5, r8, r9, pc}
    d7e4:	413118d0 	teqmi	r1, r0	; <illegal shifter operand>
    d7e8:	3100316f 	tstcc	r0, pc, ror #2
    d7ec:	83b11091 			; <UNDEFINED> instruction: 0x83b11091
    d7f0:	5b161414 	blpl	592848 <__ccfg+0x5728a0>
    d7f4:	25700068 	ldrbcs	r0, [r0, #-104]!	; 0xffffff98
    d7f8:	00c05010 	sbceq	r5, r0, r0, lsl r0
    d7fc:	c0c3f491 	smullgt	pc, r3, r1, r4	; <UNPREDICTABLE>
    d800:	031420c0 	tsteq	r4, #192	; 0xc0
    d804:	4110316f 	tstmi	r0, pc, ror #2
    d808:	82c02204 	sbchi	r2, r0, #4, 4	; 0x40000000
    d80c:	31002131 	tstcc	r0, r1, lsr r1
    d810:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    d814:	41103139 	tstmi	r0, r9, lsr r1
    d818:	82c08204 	sbchi	r8, r0, #4, 4	; 0x40000000
    d81c:	31002131 	tstcc	r0, r1, lsr r1
    d820:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    d824:	a2103139 	andsge	r3, r0, #1073741838	; 0x4000000e
    d828:	213182c0 	teqcs	r1, r0, asr #5
    d82c:	10913100 	addsne	r3, r1, r0, lsl #2
    d830:	151050b1 	ldrne	r5, [r0, #-177]	; 0xffffff4f
    d834:	05140531 	ldreq	r0, [r4, #-1329]	; 0xfffffacf
    d838:	3f700092 	svccc	0x00700092
    d83c:	31c05264 	biccc	r5, r0, r4, ror #4
    d840:	61063110 	tstvs	r6, r0, lsl r1
    d844:	4202c131 	andmi	ip, r2, #1073741836	; 0x4000000c
    d848:	31c11264 	biccc	r1, r1, r4, ror #4
    d84c:	71392110 	teqvc	r9, r0, lsl r1
    d850:	e1315106 	teq	r1, r6, lsl #2
    d854:	00644202 	rsbeq	r4, r4, r2, lsl #4
    d858:	99658a70 	stmdbls	r5!, {r4, r5, r6, r9, fp, pc}^
    d85c:	20c08865 	sbccs	r8, r0, r5, ror #16
    d860:	80395082 	eorshi	r5, r9, r2, lsl #1
    d864:	9f1e0039 	svcls	0x001e0039
    d868:	01c04140 	biceq	r4, r0, r0, asr #2
    d86c:	18141830 	ldmdane	r4, {r4, r5, fp, ip}
    d870:	30c0891a 	sbccc	r8, r0, sl, lsl r9
    d874:	80396082 	eorshi	r6, r9, r2, lsl #1
    d878:	a91e0039 	ldmdbge	lr, {r0, r3, r4, r5}
    d87c:	01c04140 	biceq	r4, r0, r0, asr #2
    d880:	19141930 	ldmdbne	r4, {r4, r5, r8, fp, ip}
    d884:	36643c1a 			; <UNDEFINED> instruction: 0x36643c1a
    d888:	34b11091 	ldrtcc	r1, [r1], #145	; 0x91
    d88c:	54b11091 	ldrtpl	r1, [r1], #145	; 0x91
    d890:	547100b0 	ldrbtpl	r0, [r1], #-176	; 0xffffff50
    d894:	f0b064a0 			; <UNDEFINED> instruction: 0xf0b064a0
    d898:	af220080 	svcge	0x00220080
    d89c:	b0124040 	andslt	r4, r2, r0, asr #32
    d8a0:	53b03290 	movspl	r3, #144, 4
    d8a4:	53395382 	teqpl	r9, #134217730	; 0x8000002
    d8a8:	3f648539 	svccc	0x00648539
    d8ac:	22c11164 	sbccs	r1, r1, #100, 2
    d8b0:	706442c1 	rsbvc	r4, r4, r1, asr #5
    d8b4:	1168c2c1 	cmnne	r8, r1, asr #5
    d8b8:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    d8bc:	c7c17064 	strbgt	r7, [r1, r4, rrx]
    d8c0:	00c05068 	sbceq	r5, r0, r8, rrx
    d8c4:	98722791 	ldmdals	r2!, {r0, r4, r7, r8, r9, sl, sp}^
    d8c8:	14161592 	ldrne	r1, [r6], #-1426	; 0xfffffa6e
    d8cc:	53104216 	tstpl	r0, #1610612737	; 0x60000001
    d8d0:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    d8d4:	31313182 	teqcc	r1, r2, lsl #3
    d8d8:	31398139 	teqcc	r9, r9, lsr r1
    d8dc:	70b05131 	adcsvc	r5, r0, r1, lsr r1
    d8e0:	276572b2 			; <UNDEFINED> instruction: 0x276572b2
    d8e4:	70929972 	addsvc	r9, r2, r2, ror r9
    d8e8:	731062b2 	tstvc	r0, #536870923	; 0x2000000b
    d8ec:	31c3f010 	biccc	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
    d8f0:	21312182 	teqcs	r1, r2, lsl #3
    d8f4:	1b398139 	blne	e6dde0 <__ccfg+0xe4de38>
    d8f8:	e2657210 	rsb	r7, r5, #16, 4
    d8fc:	603182c0 	eorsvs	r8, r1, r0, asr #5
    d900:	80318082 	eorshi	r8, r1, r2, lsl #1
    d904:	61000239 	tstvs	r0, r9, lsr r2
    d908:	327100b0 	rsbscc	r0, r1, #176	; 0xb0
    d90c:	51b11091 			; <UNDEFINED> instruction: 0x51b11091
    d910:	27b061a0 	ldrcs	r6, [r0, r0, lsr #3]!
    d914:	f3c23072 	vmvn.i32	<illegal reg q9.5>, #162	; 0x000000a2
    d918:	80000068 	andhi	r0, r0, r8, rrx
    d91c:	3290b012 	addscc	fp, r0, #18
    d920:	507000b0 	ldrhtpl	r0, [r0], #-0
    d924:	279100c0 	ldrcs	r0, [r1, r0, asr #1]
    d928:	62929972 	addsvs	r9, r2, #1867776	; 0x1c8000
    d92c:	f0107310 			; <UNDEFINED> instruction: 0xf0107310
    d930:	218231c3 	orrcs	r3, r2, r3, asr #3
    d934:	81392131 	teqhi	r9, r1, lsr r1
    d938:	70b05139 	adcsvc	r5, r0, r9, lsr r1
    d93c:	27657eb2 			; <UNDEFINED> instruction: 0x27657eb2
    d940:	70929872 	addsvc	r9, r2, r2, ror r8
    d944:	531042b2 	tstpl	r0, #536870923	; 0x2000000b
    d948:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    d94c:	31313182 	teqcc	r1, r2, lsl #3
    d950:	31398139 	teqcc	r9, r9, lsr r1
    d954:	7e101a31 			; <UNDEFINED> instruction: 0x7e101a31
    d958:	61a05165 	rorvs	r5, r5, #2
    d95c:	b07227b0 	ldrhtlt	r2, [r2], #-112	; 0xffffff90
    d960:	3f6918c0 	svccc	0x006918c0
    d964:	22c10164 	sbccs	r0, r1, #100, 2
    d968:	016442c1 	cmneq	r4, r1, asr #5
    d96c:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    d970:	3c1a1564 	cfldr32cc	mvfx1, [sl], {100}	; 0x64
    d974:	10913564 	addsne	r3, r1, r4, ror #10
    d978:	858253b1 	strhi	r5, [r2, #945]	; 0x3b1
    d97c:	b012c064 	andslt	ip, r2, r4, rrx
    d980:	00b03290 	umlalseq	r3, r0, r0, r2
    d984:	72643f70 	rsbvc	r3, r4, #112, 30	; 0x1c0
    d988:	42c081c2 	sbcmi	r8, r0, #-2147483600	; 0x80000030
    d98c:	11c12264 	bicne	r2, r1, r4, ror #4
    d990:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    d994:	42c111c0 	sbcmi	r1, r1, #192, 2	; 0x30
    d998:	31c06264 	biccc	r6, r0, r4, ror #4
    d99c:	626442c3 	rsbvs	r4, r4, #805306380	; 0x3000000c
    d9a0:	42c111c3 	sbcmi	r1, r1, #-1073741776	; 0xc0000030
    d9a4:	11c30264 	bicne	r0, r3, r4, ror #4
    d9a8:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    d9ac:	85395382 	ldrhi	r5, [r9, #-898]!	; 0xfffffc7e
    d9b0:	47c3e264 	strbmi	lr, [r3, r4, ror #4]
    d9b4:	40221164 	eormi	r1, r2, r4, ror #2
    d9b8:	81c24241 	bichi	r4, r2, r1, asr #4
    d9bc:	526442c8 	rsbpl	r4, r4, #200, 4	; 0x8000000c
    d9c0:	42c111c2 	sbcmi	r1, r1, #-2147483600	; 0x80000030
    d9c4:	e1c27264 	bic	r7, r2, r4, ror #4
    d9c8:	026442ce 	rsbeq	r4, r4, #-536870900	; 0xe000000c
    d9cc:	42c881c2 	sbcmi	r8, r8, #-2147483600	; 0x80000030
    d9d0:	01c20264 	biceq	r0, r2, r4, ror #4
    d9d4:	b06442c8 	rsblt	r4, r4, r8, asr #5
    d9d8:	006954c0 	rsbeq	r5, r9, r0, asr #9
    d9dc:	42643f70 	rsbmi	r3, r4, #112, 30	; 0x1c0
    d9e0:	42c801c2 	sbcmi	r0, r8, #-2147483600	; 0x80000030
    d9e4:	11c25264 	bicne	r5, r2, r4, ror #4
    d9e8:	726442c0 	rsbvc	r4, r4, #192, 4
    d9ec:	42c0e1c2 	sbcmi	lr, r0, #-2147483600	; 0x80000030
    d9f0:	01c00264 	biceq	r0, r0, r4, ror #4
    d9f4:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    d9f8:	42c301c0 	sbcmi	r0, r3, #192, 2	; 0x30
    d9fc:	01c12264 	biceq	r2, r1, r4, ror #4
    da00:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    da04:	42c101c3 	sbcmi	r0, r1, #-1073741776	; 0xc0000030
    da08:	01c30264 	biceq	r0, r3, r4, ror #4
    da0c:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    da10:	00648582 	rsbeq	r8, r4, r2, lsl #11
    da14:	00b06170 	adcseq	r6, r0, r0, ror r1
    da18:	23141271 	tstcs	r4, #268435463	; 0x10000007
    da1c:	334d7a1c 	movtcc	r7, #55836	; 0xda1c
    da20:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    da24:	10913270 	addsne	r3, r1, r0, ror r2
    da28:	006972b1 	strhteq	r7, [r9], #-33	; 0xffffffdf
    da2c:	00b06170 	adcseq	r6, r0, r0, ror r1
    da30:	32181371 	andscc	r1, r8, #-1006632959	; 0xc4000001
    da34:	3249861c 	subcc	r8, r9, #28, 12	; 0x1c00000
    da38:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    da3c:	10913370 	addsne	r3, r1, r0, ror r3
    da40:	00697eb1 	strhteq	r7, [r9], #-225	; 0xffffff1f
    da44:	47c0c270 			; <UNDEFINED> instruction: 0x47c0c270
    da48:	c2101564 	andsgt	r1, r0, #100, 10	; 0x19000000
    da4c:	471612c0 	ldrmi	r1, [r6, -r0, asr #5]
    da50:	15314164 	ldrne	r4, [r1, #-356]!	; 0xfffffe9c
    da54:	80c0c014 	sbchi	ip, r0, r4, lsl r0
    da58:	54140531 	ldrpl	r0, [r4], #-1329	; 0xfffffacf
    da5c:	0478a010 	ldrbteq	sl, [r8], #-16
    da60:	e6700004 	ldrbt	r0, [r0], -r4
    da64:	013186c0 	teqeq	r1, r0, asr #13
    da68:	671416cc 	ldrvs	r1, [r4, -ip, asr #13]
    da6c:	f0826110 			; <UNDEFINED> instruction: 0xf0826110
    da70:	170401c3 	strne	r0, [r4, -r3, asr #3]
    da74:	06700014 			; <UNDEFINED> instruction: 0x06700014
    da78:	0b720573 	bleq	1c8f04c <__ccfg+0x1c6f0a4>
    da7c:	50720e72 	rsbspl	r0, r2, r2, ror lr
    da80:	817100b0 	ldrhhi	r0, [r1, #-0]!
    da84:	50b06080 	adcspl	r6, r0, r0, lsl #1
    da88:	418092a0 	orrmi	r9, r0, r0, lsr #5
    da8c:	8045c322 	subhi	ip, r5, r2, lsr #6
    da90:	10c1f180 	sbcne	pc, r1, r0, lsl #3
    da94:	01163004 	tsteq	r6, r4
    da98:	01140111 	tsteq	r4, r1, lsl r1
    da9c:	d761d66c 	strble	sp, [r1, -ip, ror #12]!
    daa0:	d961d861 	stmdble	r1!, {r0, r5, r6, fp, ip, lr, pc}^
    daa4:	db61da61 	blle	1884430 <__ccfg+0x1864488>
    daa8:	de61dc61 	cdple	12, 6, cr13, cr1, cr1, {3}
    daac:	e261e061 	rsb	lr, r1, #97	; 0x61
    dab0:	3661e461 	strbtcc	lr, [r1], -r1, ror #8
    dab4:	91633963 	cmnls	r3, r3, ror #18
    dab8:	21c0f280 	biccs	pc, r0, r0, lsl #5
    dabc:	82312104 	eorshi	r2, r1, #4, 2
    dac0:	122a4280 	eorne	r4, sl, #128, 4
    dac4:	01163214 	tsteq	r6, r4, lsl r2
    dac8:	01142111 	tsteq	r4, r1, lsl r1
    dacc:	0b61ee6c 	bleq	1889484 <__ccfg+0x18694dc>
    dad0:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    dad4:	0b61ee63 	bleq	1889468 <__ccfg+0x18694c0>
    dad8:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    dadc:	e661e663 	strbt	lr, [r1], -r3, ror #12
    dae0:	e661e661 	strbt	lr, [r1], -r1, ror #12
    dae4:	e661e661 	strbt	lr, [r1], -r1, ror #12
    dae8:	e6649461 	strbt	r9, [r4], -r1, ror #8
    daec:	e664f961 	strbt	pc, [r4], -r1, ror #18	; <UNPREDICTABLE>
    daf0:	e6652a61 	strbt	r2, [r5], -r1, ror #20
    daf4:	e6655661 	strbt	r5, [r5], -r1, ror #12
    daf8:	e6674661 	strbt	r4, [r7], -r1, ror #12
    dafc:	b0121061 	andslt	r1, r2, r1, rrx
    db00:	06720e90 			; <UNDEFINED> instruction: 0x06720e90
    db04:	10720573 	rsbsne	r0, r2, r3, ror r5
    db08:	a7903012 			; <UNDEFINED> instruction: 0xa7903012
    db0c:	3ccff061 	stclcc	0, cr15, [pc], {97}	; 0x61
    db10:	03c1d467 	biceq	sp, r1, #1728053248	; 0x67000000
    db14:	54c3c0c0 	strbpl	ip, [r3], #192	; 0xc0
    db18:	50784064 	rsbspl	r4, r8, r4, rrx
    db1c:	10785091 			; <UNDEFINED> instruction: 0x10785091
    db20:	20786092 			; <UNDEFINED> instruction: 0x20786092
    db24:	30787092 			; <UNDEFINED> instruction: 0x30787092
    db28:	40788092 			; <UNDEFINED> instruction: 0x40788092
    db2c:	60789092 			; <UNDEFINED> instruction: 0x60789092
    db30:	90783092 			; <UNDEFINED> instruction: 0x90783092
    db34:	40821091 	umullmi	r1, r2, r1, r0
    db38:	0106f039 	tsteq	r6, r9, lsr r0	; <UNPREDICTABLE>
    db3c:	10311010 	eorsne	r1, r1, r0, lsl r0
    db40:	42920014 	addsmi	r0, r2, #20
    db44:	bc61e667 	stcllt	6, cr14, [r1], #-412	; 0xfffffe64
    db48:	54a0e2a0 	strtpl	lr, [r0], #672	; 0x2a0
    db4c:	5080f0a0 	addpl	pc, r0, r0, lsr #1
    db50:	40461522 	submi	r1, r6, r2, lsr #10
    db54:	2b220080 	blcs	88dd5c <__ccfg+0x86ddb4>
    db58:	40620d47 	rsbmi	r0, r2, r7, asr #26
    db5c:	8d822da0 	stchi	13, cr2, [r2, #640]	; 0x280
    db60:	10398d31 	eorsne	r8, r9, r1, lsr sp
    db64:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    db68:	1a100904 	bne	40ff80 <__ccfg+0x3effd8>
    db6c:	1a394a82 	bne	e6057c <__ccfg+0xe405d4>
    db70:	80821004 	addhi	r1, r2, r4
    db74:	0e041039 	mcreq	0, 0, r1, cr4, cr9, {1}
    db78:	bc10ab10 			; <UNDEFINED> instruction: 0xbc10ab10
    db7c:	6310c210 	tstvs	r0, #16, 4
    db80:	e0722964 	rsbs	r2, r2, r4, ror #18
    db84:	13673ccf 	cmnne	r7, #52992	; 0xcf00
    db88:	c8b003b0 	ldmgt	r0!, {r4, r5, r7, r8, r9}
    db8c:	50b05366 	adcspl	r5, r0, r6, ror #6
    db90:	64b054b0 	ldrtvs	r5, [r0], #1200	; 0x4b0
    db94:	a5b013b0 	ldrge	r1, [r0, #944]!	; 0x3b0
    db98:	e0821066 	add	r1, r2, r6, rrx
    db9c:	ae463822 	cdpge	8, 4, cr3, cr6, cr2, {1}
    dba0:	41710066 	cmnmi	r1, r6, rrx
    dba4:	2b220180 	blcs	88e1ac <__ccfg+0x86e204>
    dba8:	1080f047 	addne	pc, r0, r7, asr #32
    dbac:	f0464b22 			; <UNDEFINED> instruction: 0xf0464b22
    dbb0:	64471822 	strbvs	r1, [r7], #-2082	; 0xfffff7de
    dbb4:	382231b0 	stmdacc	r2!, {r4, r5, r7, r8, ip, sp}
    dbb8:	ceb06342 	cdpgt	3, 11, cr6, cr0, cr2, {2}
    dbbc:	e0821066 	add	r1, r2, r6, rrx
    dbc0:	70463822 	subvc	r3, r6, r2, lsr #16
    dbc4:	64623866 	strbtvs	r3, [r2], #-2150	; 0xfffff79a
    dbc8:	8f816fb0 	svchi	0x00816fb0
    dbcc:	d03d8f31 	eorsle	r8, sp, r1, lsr pc
    dbd0:	3c92ffdf 	ldccc	15, cr15, [r2], {223}	; 0xdf
    dbd4:	41710067 	cmnmi	r1, r7, rrx
    dbd8:	2b220180 	blcs	88e1e0 <__ccfg+0x86e238>
    dbdc:	f0b06447 			; <UNDEFINED> instruction: 0xf0b06447
    dbe0:	65225080 	strvs	r5, [r2, #-128]!	; 0xffffff80
    dbe4:	11b06342 	asrsne	r6, r2, #6
    dbe8:	6022c182 	eorvs	ip, r2, r2, lsl #3
    dbec:	0566ce46 	strbeq	ip, [r6, #-3654]!	; 0xfffff1ba
    dbf0:	d1821167 	orrle	r1, r2, r7, ror #2
    dbf4:	70465222 	subvc	r5, r6, r2, lsr #4
    dbf8:	61625266 	cmnvs	r2, r6, ror #4
    dbfc:	81817281 	orrhi	r7, r1, r1, lsl #5
    dc00:	823d8131 	eorshi	r8, sp, #1073741836	; 0x4000000c
    dc04:	c03d8231 	eorsgt	r8, sp, r1, lsr r2
    dc08:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    dc0c:	0b673c93 	bleq	19dce60 <__ccfg+0x19bceb8>
    dc10:	c081b062 	addgt	fp, r1, r2, rrx
    dc14:	9781d391 			; <UNDEFINED> instruction: 0x9781d391
    dc18:	d3a29082 			; <UNDEFINED> instruction: 0xd3a29082
    dc1c:	f34e7f18 	vmaxnm.f32	d23, d14, d8
    dc20:	e316130b 	tst	r6, #738197504	; 0x2c000000
    dc24:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    dc28:	3b81e391 	blcc	fe086a74 <_estack+0xde081a74>
    dc2c:	ba629014 	blt	18b1c84 <__ccfg+0x1891cdc>
    dc30:	23468b1c 	movtcs	r8, #27420	; 0x6b1c
    dc34:	e34a8b1e 	movt	r8, #43806	; 0xab1e
    dc38:	904e8b1c 	subls	r8, lr, ip, lsl fp
    dc3c:	8b2207b2 	blhi	88fb0c <__ccfg+0x86fb64>
    dc40:	1ba29042 	blne	fe8b1d50 <_estack+0xde8acd50>
    dc44:	e362961a 	cmn	r2, #27262976	; 0x1a00000
    dc48:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    dc4c:	3b81e391 	blcc	fe086a98 <_estack+0xde081a98>
    dc50:	a01cab18 	andsge	sl, ip, r8, lsl fp
    dc54:	a21c9b4e 	andsge	r9, ip, #79872	; 0x13800
    dc58:	a41cbc4a 	ldrge	fp, [ip], #-3146	; 0xfffff3b6
    dc5c:	1010b242 	andsne	fp, r0, r2, asr #4
    dc60:	9d22d082 	stcls	0, cr13, [r2, #-520]!	; 0xfffffdf8
    dc64:	1080f042 	addne	pc, r0, r2, asr #32
    dc68:	6346a422 	movtvs	sl, #25634	; 0x6422
    dc6c:	a466a564 	strbtge	sl, [r6], #-1380	; 0xfffffa9c
    dc70:	9410ab62 	ldrls	sl, [r0], #-2914	; 0xfffff49e
    dc74:	94109b62 	ldrls	r9, [r0], #-2914	; 0xfffff49e
    dc78:	30700062 	rsbscc	r0, r0, r2, rrx
    dc7c:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    dc80:	00b06304 	adcseq	r6, r0, r4, lsl #6
    dc84:	bc6aa871 	stcllt	8, cr10, [sl], #-452	; 0xfffffe3c
    dc88:	00b0e010 	adcseq	lr, r0, r0, lsl r0
    dc8c:	c281b270 	addgt	fp, r1, #112, 4
    dc90:	0181d291 			; <UNDEFINED> instruction: 0x0181d291
    dc94:	51181282 	tstpl	r8, r2, lsl #5
    dc98:	41181281 	tstmi	r8, r1, lsl #5
    dc9c:	81318182 	teqhi	r1, r2, lsl #3
    dca0:	bf1c123d 	svclt	0x001c123d
    dca4:	32b0e24a 	adcscc	lr, r0, #-1610612732	; 0xa0000004
    dca8:	f2dfb0b0 	vshr.s64	d27, d16, #33
    dcac:	f1673c92 			; <UNDEFINED> instruction: 0xf1673c92
    dcb0:	c31421c7 	tstgt	r4, #-1073741775	; 0xc0000031
    dcb4:	62c8124e 	sbcvs	r1, r8, #-536870908	; 0xe0000004
    dcb8:	31917291 			; <UNDEFINED> instruction: 0x31917291
    dcbc:	00b0e1b0 	ldrhteq	lr, [r0], r0
    dcc0:	06c00870 	uxtab16eq	r0, r0, r0, ror #16
    dcc4:	60c800c0 	sbcvs	r0, r8, r0, asr #1
    dcc8:	00917091 	umullseq	r7, r1, r1, r0
    dccc:	b0820170 	addlt	r0, r2, r0, ror r1
    dcd0:	d091c081 	addsle	ip, r1, r1, lsl #1
    dcd4:	51181081 	tstpl	r8, r1, lsl #1
    dcd8:	06181081 	ldreq	r1, [r8], -r1, lsl #1
    dcdc:	4280e114 	addmi	lr, r0, #20, 2
    dce0:	82318282 	eorshi	r8, r1, #536870920	; 0x20000008
    dce4:	e41c203d 	ldr	r2, [ip], #-61	; 0xffffffc3
    dce8:	21b0e24a 	asrscs	lr, sl, #4
    dcec:	3246e822 	subcc	lr, r6, #2228224	; 0x220000
    dcf0:	a01005b0 			; <UNDEFINED> instruction: 0xa01005b0
    dcf4:	3c92f5df 	cfldr32cc	mvfx15, [r2], {223}	; 0xdf
    dcf8:	e8222167 	stmda	r2!, {r0, r1, r2, r5, r6, r8, sp}
    dcfc:	32a0e242 	adccc	lr, r0, #536870916	; 0x20000004
    dd00:	418231b0 			; <UNDEFINED> instruction: 0x418231b0
    dd04:	01c0f039 	biceq	pc, r0, r9, lsr r0	; <UNPREDICTABLE>
    dd08:	f61e0104 			; <UNDEFINED> instruction: 0xf61e0104
    dd0c:	10161842 	andsne	r1, r6, r2, asr #16
    dd10:	083010c0 	ldmdaeq	r0!, {r6, r7, ip}
    dd14:	6047041c 	subvs	r0, r7, ip, lsl r4
    dd18:	063c1010 			; <UNDEFINED> instruction: 0x063c1010
    dd1c:	61c7f110 	bicvs	pc, r7, r0, lsl r1	; <UNPREDICTABLE>
    dd20:	164efa14 			; <UNDEFINED> instruction: 0x164efa14
    dd24:	719166c8 	orrsvc	r6, r1, r8, asr #13
    dd28:	81318181 	teqhi	r1, r1, lsl #3
    dd2c:	011c163d 	tsteq	ip, sp, lsr r6
    dd30:	3191764b 	orrscc	r7, r1, fp, asr #12
    dd34:	08c006b0 	stmiaeq	r0, {r4, r5, r7, r9, sl}^
    dd38:	617000c0 	cmnvs	r0, r0, asr #1
    dd3c:	81318181 	teqhi	r1, r1, lsl #3
    dd40:	8082403d 	addhi	r4, r2, sp, lsr r0
    dd44:	f1180139 			; <UNDEFINED> instruction: 0xf1180139
    dd48:	014b171c 	cmpeq	fp, ip, lsl r7
    dd4c:	c080b014 	addgt	fp, r0, r4, lsl r0
    dd50:	bc471722 	mcrrlt	7, 2, r1, r7, cr2
    dd54:	90b033b0 	ldrhtls	r3, [r0], r0
    dd58:	0f92f1ef 	svceq	0x0092f1ef
    dd5c:	00673c93 	mlseq	r7, r3, ip, r3
    dd60:	63a00370 	movvs	r0, #112, 6	; 0xc0000001
    dd64:	efb064b0 	svc	0x00b064b0
    dd68:	006556b0 	strhteq	r5, [r5], #-96	; 0xffffffa0
    dd6c:	00804071 	addeq	r4, r0, r1, ror r0
    dd70:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    dd74:	ef652ab0 	svc	0x00652ab0
    dd78:	407100a0 	rsbsmi	r0, r1, r0, lsr #1
    dd7c:	2b220080 	blcs	88df84 <__ccfg+0x86dfdc>
    dd80:	03b06447 	movseq	r6, #1191182336	; 0x47000000
    dd84:	016238b0 	strheq	r3, [r2, #-128]!	; 0xffffff80
    dd88:	82816282 	addhi	r6, r1, #536870920	; 0x20000008
    dd8c:	803d8231 	eorshi	r8, sp, r1, lsr r2
    dd90:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    dd94:	03673c93 	cmneq	r7, #37632	; 0x9300
    dd98:	e66556a0 	strbt	r5, [r5], -r0, lsr #13
    dd9c:	6380a261 	orrvs	sl, r0, #268435462	; 0x10000006
    dda0:	5061e664 	rsbpl	lr, r1, r4, ror #12
    dda4:	e67100b0 			; <UNDEFINED> instruction: 0xe67100b0
    dda8:	d092e061 	addsle	lr, r2, r1, rrx
    ddac:	3d220082 	stccc	0, cr0, [r2, #-520]!	; 0xfffffdf8
    ddb0:	00b2c047 	adcseq	ip, r2, r7, asr #32
    ddb4:	f080a070 			; <UNDEFINED> instruction: 0xf080a070
    ddb8:	30435922 	subcc	r5, r3, r2, lsr #18
    ddbc:	62c102b0 	sbcvs	r0, r1, #176, 4
    ddc0:	a0c00131 	sbcge	r0, r0, r1, lsr r1
    ddc4:	521e0080 	andspl	r0, lr, #128	; 0x80
    ddc8:	5322f043 	msrpl	CPSR_x, #67	; 0x43
    ddcc:	60f5a043 	rscsvs	sl, r5, r3, asr #32
    ddd0:	53396031 	teqpl	r9, #49	; 0x31
    ddd4:	10102063 	andsne	r2, r0, r3, rrx
    ddd8:	236f131a 	cmncs	pc, #1744830464	; 0x68000000
    dddc:	1216116e 	andsne	r1, r6, #-2147483621	; 0x8000001b
    dde0:	006b5416 	rsbeq	r5, fp, r6, lsl r4
    dde4:	28dd0370 	ldmcs	sp, {r4, r5, r6, r8, r9}^
    dde8:	270b0000 	strcs	r0, [fp, -r0]
    ddec:	00005812 	andeq	r5, r0, r2, lsl r8
    ddf0:	1c100400 	cfldrsne	mvf0, [r0], {-0}
    ddf4:	10240000 	eorne	r0, r4, r0
    ddf8:	0300001c 	movweq	r0, #28
    ddfc:	00001da4 	andeq	r1, r0, r4, lsr #27
    de00:	45122b0b 	ldrmi	r2, [r2, #-2827]	; 0xfffff4f5
    de04:	24000000 	strcs	r0, [r0], #-0
    de08:	00001c26 	andeq	r1, r0, r6, lsr #24
    de0c:	00292f03 	eoreq	r2, r9, r3, lsl #30
    de10:	122c0b00 	eorne	r0, ip, #0, 22
    de14:	0000006b 	andeq	r0, r0, fp, rrx
    de18:	001c3704 	andseq	r3, ip, r4, lsl #14
    de1c:	06360300 	ldrteq	r0, [r6], -r0, lsl #6
    de20:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    de24:	00006b12 	andeq	r6, r0, r2, lsl fp
    de28:	0b080b00 	bleq	210a30 <__ccfg+0x1f0a88>
    de2c:	1ce20932 			; <UNDEFINED> instruction: 0x1ce20932
    de30:	2b200000 	blcs	80de38 <__ccfg+0x7ede90>
    de34:	0b000000 	bleq	de3c <__exidx_end+0x823c>
    de38:	1c260734 	stcne	7, cr0, [r6], #-208	; 0xffffff30
    de3c:	01010000 	mrseq	r0, (UNDEF: 1)
    de40:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
    de44:	0b000006 	bleq	de64 <__exidx_end+0x8264>
    de48:	1c260335 	stcne	3, cr0, [r6], #-212	; 0xffffff2c
    de4c:	01010000 	mrseq	r0, (UNDEF: 1)
    de50:	de200006 	cdple	0, 2, cr0, cr0, cr6, {0}
    de54:	0b000002 	bleq	de64 <__exidx_end+0x8264>
    de58:	1c260336 	stcne	3, cr0, [r6], #-216	; 0xffffff28
    de5c:	01010000 	mrseq	r0, (UNDEF: 1)
    de60:	a7200005 	strge	r0, [r0, -r5]!
    de64:	0b000006 	bleq	de84 <__exidx_end+0x8284>
    de68:	1c260337 	stcne	3, cr0, [r6], #-220	; 0xffffff24
    de6c:	01010000 	mrseq	r0, (UNDEF: 1)
    de70:	8f200004 	svchi	0x00200004
    de74:	0b00000a 	bleq	dea4 <__exidx_end+0x82a4>
    de78:	1c260338 	stcne	3, cr0, [r6], #-224	; 0xffffff20
    de7c:	04010000 	streq	r0, [r1], #-0
    de80:	4b0c0000 	blmi	30de88 <__ccfg+0x2edee0>
    de84:	0b000006 	bleq	dea4 <__exidx_end+0x82a4>
    de88:	1c26073a 	stcne	7, cr0, [r6], #-232	; 0xffffff18
    de8c:	0c010000 	stceq	0, cr0, [r1], {-0}
    de90:	000008eb 	andeq	r0, r0, fp, ror #17
    de94:	26033c0b 	strcs	r3, [r3], -fp, lsl #24
    de98:	0200001c 	andeq	r0, r0, #28
    de9c:	000f1c0c 	andeq	r1, pc, ip, lsl #24
    dea0:	033d0b00 	teqeq	sp, #0, 22
    dea4:	00001c26 	andeq	r1, r0, r6, lsr #24
    dea8:	09030c03 	stmdbeq	r3, {r0, r1, sl, fp}
    deac:	3f0b0000 	svccc	0x000b0000
    deb0:	001c3708 	andseq	r3, ip, r8, lsl #14
    deb4:	03000400 	movweq	r0, #1024	; 0x400
    deb8:	00000314 	andeq	r0, r0, r4, lsl r3
    debc:	5403410b 	strpl	r4, [r3], #-267	; 0xfffffef5
    dec0:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    dec4:	00001ce2 	andeq	r1, r0, r2, ror #25
    dec8:	0006ae25 	andeq	sl, r6, r5, lsr #28
    decc:	1a430b00 	bne	10d0ad4 <__ccfg+0x10b0b2c>
    ded0:	00001cee 	andeq	r1, r0, lr, ror #25
    ded4:	97250101 	strls	r0, [r5, -r1, lsl #2]!
    ded8:	0b000001 	bleq	dee4 <__exidx_end+0x82e4>
    dedc:	05de0e45 	ldrbeq	r0, [lr, #3653]	; 0xe45
    dee0:	01010000 	mrseq	r0, (UNDEF: 1)
    dee4:	00031d25 	andeq	r1, r3, r5, lsr #26
    dee8:	1e450b00 	vmlane.f64	d16, d5, d0
    deec:	000005de 	ldrdeq	r0, [r0], -lr
    def0:	080b0101 	stmdaeq	fp, {r0, r8}
    def4:	4e098f0c 	cdpmi	15, 0, cr8, cr9, cr12, {0}
    def8:	0c00001d 	stceq	0, cr0, [r0], {29}
    defc:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
    df00:	6b0b900c 	blvs	2f1f38 <__ccfg+0x2d1f90>
    df04:	00000000 	andeq	r0, r0, r0
    df08:	0010570c 	andseq	r5, r0, ip, lsl #14
    df0c:	08910c00 	ldmeq	r1, {sl, fp}
    df10:	00001c10 	andeq	r1, r0, r0, lsl ip
    df14:	01bc0c04 			; <UNDEFINED> instruction: 0x01bc0c04
    df18:	920c0000 	andls	r0, ip, #0
    df1c:	001c3210 	andseq	r3, ip, r0, lsl r2
    df20:	03000600 	movweq	r0, #1536	; 0x600
    df24:	00000cae 	andeq	r0, r0, lr, lsr #25
    df28:	1d03930c 	stcne	3, cr9, [r3, #-48]	; 0xffffffd0
    df2c:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    df30:	00001d4e 	andeq	r1, r0, lr, asr #26
    df34:	00001d65 	andeq	r1, r0, r5, ror #26
    df38:	2d250026 	stccs	0, cr0, [r5, #-152]!	; 0xffffff68
    df3c:	0c000009 	stceq	0, cr0, [r0], {9}
    df40:	1d5a0f99 	ldclne	15, cr0, [sl, #-612]	; 0xfffffd9c
    df44:	01010000 	mrseq	r0, (UNDEF: 1)
    df48:	910d010b 	tstls	sp, fp, lsl #2
    df4c:	001d9d09 	andseq	r9, sp, r9, lsl #26
    df50:	090a2000 	stmdbeq	sl, {sp}
    df54:	930d0000 	movwls	r0, #53248	; 0xd000
    df58:	001c2607 	andseq	r2, ip, r7, lsl #12
    df5c:	01070100 	mrseq	r0, (UNDEF: 23)
    df60:	05bc2000 	ldreq	r2, [ip, #0]!
    df64:	940d0000 	strls	r0, [sp], #-0
    df68:	001c2603 	andseq	r2, ip, r3, lsl #12
    df6c:	00010100 	andeq	r0, r1, r0, lsl #2
    df70:	9b030000 	blls	cdf78 <__ccfg+0xadfd0>
    df74:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    df78:	1d730396 	ldclne	3, cr0, [r3, #-600]!	; 0xfffffda8
    df7c:	9d040000 	stcls	0, cr0, [r4, #-0]
    df80:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    df84:	00001da9 	andeq	r1, r0, r9, lsr #27
    df88:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    df8c:	ae040026 	cdpge	0, 0, cr0, cr4, cr6, {1}
    df90:	2500001d 	strcs	r0, [r0, #-29]	; 0xffffffe3
    df94:	000003a1 	andeq	r0, r0, r1, lsr #7
    df98:	b9179c0d 	ldmdblt	r7, {r0, r2, r3, sl, fp, ip, pc}
    df9c:	0100001d 	tsteq	r0, sp, lsl r0
    dfa0:	1c1c0901 			; <UNDEFINED> instruction: 0x1c1c0901
    dfa4:	1dd70000 	ldclne	0, cr0, [r7]
    dfa8:	00260000 	eoreq	r0, r6, r0
    dfac:	001dcc04 	andseq	ip, sp, r4, lsl #24
    dfb0:	05fe2500 	ldrbeq	r2, [lr, #1280]!	; 0x500
    dfb4:	060e0000 	streq	r0, [lr], -r0
    dfb8:	001dd713 	andseq	sp, sp, r3, lsl r7
    dfbc:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    dfc0:	000008cd 	andeq	r0, r0, sp, asr #17
    dfc4:	370ec30c 	strcc	ip, [lr, -ip, lsl #6]
    dfc8:	0100001c 	tsteq	r0, ip, lsl r0
    dfcc:	0c620601 	stcleq	6, cr0, [r2], #-4
    dfd0:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    dfd4:	1e051001 	cdpne	0, 0, cr1, cr5, cr1, {0}
    dfd8:	04100000 	ldreq	r0, [r0], #-0
    dfdc:	00001e0b 	andeq	r1, r0, fp, lsl #28
    dfe0:	1e17011e 	mrcne	1, 0, r0, cr7, cr14, {0}
    dfe4:	10150000 	andsne	r0, r5, r0
    dfe8:	0000001c 	andeq	r0, r0, ip, lsl r0
    dfec:	0005eb09 	andeq	lr, r5, r9, lsl #22
    dff0:	001e2200 	andseq	r2, lr, r0, lsl #4
    dff4:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    dff8:	00001e17 	andeq	r1, r0, r7, lsl lr
    dffc:	0009d61f 	andeq	sp, r9, pc, lsl r6
    e000:	017f0f00 	cmneq	pc, r0, lsl #30
    e004:	001e2216 	andseq	r2, lr, r6, lsl r2
    e008:	1f010100 	svcne	0x00010100
    e00c:	0000038d 	andeq	r0, r0, sp, lsl #7
    e010:	1401820f 	strne	r8, [r1], #-527	; 0xfffffdf1
    e014:	00001c43 	andeq	r1, r0, r3, asr #24
    e018:	651f0101 	ldrvs	r0, [pc, #-257]	; df1f <__exidx_end+0x831f>
    e01c:	0f000003 	svceq	0x00000003
    e020:	370e02d8 			; <UNDEFINED> instruction: 0x370e02d8
    e024:	0100001c 	tsteq	r0, ip, lsl r0
    e028:	0f081a01 	svceq	0x00081a01
    e02c:	7b090303 	blvc	24ec40 <__ccfg+0x22ec98>
    e030:	1700001e 	smladne	r0, lr, r0, r0
    e034:	00003c83 	andeq	r3, r0, r3, lsl #25
    e038:	0703070f 	streq	r0, [r3, -pc, lsl #14]
    e03c:	00001c10 	andeq	r1, r0, r0, lsl ip
    e040:	0faf1700 	svceq	0x00af1700
    e044:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    e048:	1c480803 	mcrrne	8, 0, r0, r8, cr3
    e04c:	00040000 	andeq	r0, r4, r0
    e050:	0009f906 	andeq	pc, r9, r6, lsl #18
    e054:	03090f00 	movweq	r0, #40704	; 0x9f00
    e058:	001e5403 	andseq	r5, lr, r3, lsl #8
    e05c:	00201900 	eoreq	r1, r0, r0, lsl #18
    e060:	0f300000 	svceq	0x00300000
    e064:	eb08030b 	bl	20ec98 <__ccfg+0x1eecf0>
    e068:	1700001e 	smladne	r0, lr, r0, r0
    e06c:	00001f06 	andeq	r1, r0, r6, lsl #30
    e070:	0803140f 	stmdaeq	r3, {r0, r1, r2, r3, sl, ip}
    e074:	00001c10 	andeq	r1, r0, r0, lsl ip
    e078:	0bd71700 	bleq	ff5d3c80 <_estack+0xdf5cec80>
    e07c:	150f0000 	strne	r0, [pc, #-0]	; e084 <__exidx_end+0x8484>
    e080:	1c100803 	ldcne	8, cr0, [r0], {3}
    e084:	17020000 	strne	r0, [r2, -r0]
    e088:	00004c70 	andeq	r4, r0, r0, ror ip
    e08c:	0b03160f 	bleq	d38d0 <__ccfg+0xb3928>
    e090:	00001df8 	strdeq	r1, [r0], -r8
    e094:	47361704 	ldrmi	r1, [r6, -r4, lsl #14]!
    e098:	170f0000 	strne	r0, [pc, -r0]
    e09c:	1c480903 	mcrrne	9, 0, r0, r8, cr3	; <UNPREDICTABLE>
    e0a0:	17080000 	strne	r0, [r8, -r0]
    e0a4:	0000000f 	andeq	r0, r0, pc
    e0a8:	0f03180f 	svceq	0x0003180f
    e0ac:	00001eeb 	andeq	r1, r0, fp, ror #29
    e0b0:	094d170c 	stmdbeq	sp, {r2, r3, r8, r9, sl, ip}^
    e0b4:	190f0000 	stmdbne	pc, {}	; <UNPREDICTABLE>
    e0b8:	1efb1503 	cdpne	5, 15, cr1, cr11, cr3, {0}
    e0bc:	002c0000 	eoreq	r0, ip, r0
    e0c0:	001e7b09 	andseq	r7, lr, r9, lsl #22
    e0c4:	001efb00 	andseq	pc, lr, r0, lsl #22
    e0c8:	00910a00 	addseq	r0, r1, r0, lsl #20
    e0cc:	00030000 	andeq	r0, r3, r0
    e0d0:	1e880410 	mcrne	4, 4, r0, cr8, cr0, {0}
    e0d4:	cc060000 	stcgt	0, cr0, [r6], {-0}
    e0d8:	0f00000b 	svceq	0x0000000b
    e0dc:	881b031c 	ldmdahi	fp, {r2, r3, r4, r8, r9}
    e0e0:	1f00001e 	svcne	0x0000001e
    e0e4:	00000bac 	andeq	r0, r0, ip, lsr #23
    e0e8:	14031e0f 	strne	r1, [r3], #-3599	; 0xfffff1f1
    e0ec:	00001f1d 	andeq	r1, r0, sp, lsl pc
    e0f0:	04100101 	ldreq	r0, [r0], #-257	; 0xfffffeff
    e0f4:	00001f01 	andeq	r1, r0, r1, lsl #30
    e0f8:	0006ff25 	andeq	pc, r6, r5, lsr #30
    e0fc:	131d1000 	tstne	sp, #0
    e100:	00001c10 	andeq	r1, r0, r0, lsl ip
    e104:	e5250101 	str	r0, [r5, #-257]!	; 0xfffffeff
    e108:	10000002 	andne	r0, r0, r2
    e10c:	1c211a1e 			; <UNDEFINED> instruction: 0x1c211a1e
    e110:	01010000 	mrseq	r0, (UNDEF: 1)
    e114:	000c5925 	andeq	r5, ip, r5, lsr #18
    e118:	241e1000 	ldrcs	r1, [lr], #-0
    e11c:	00001c21 	andeq	r1, r0, r1, lsr #24
    e120:	77250101 	strvc	r0, [r5, -r1, lsl #2]!
    e124:	1000000c 	andne	r0, r0, ip
    e128:	1f1d1422 	svcne	0x001d1422
    e12c:	01010000 	mrseq	r0, (UNDEF: 1)
    e130:	00201d25 	eoreq	r1, r0, r5, lsr #26
    e134:	27391100 	ldrcs	r1, [r9, -r0, lsl #2]!
    e138:	00000d5e 	andeq	r0, r0, lr, asr sp
    e13c:	0b250101 	bleq	94e548 <__ccfg+0x92e5a0>
    e140:	11000023 	tstne	r0, r3, lsr #32
    e144:	09f1153a 	ldmibeq	r1!, {r1, r3, r4, r5, r8, sl, ip}^
    e148:	01010000 	mrseq	r0, (UNDEF: 1)
    e14c:	00272725 	eoreq	r2, r7, r5, lsr #14
    e150:	1a3b1100 	bne	ed2558 <__ccfg+0xeb25b0>
    e154:	00000bd8 	ldrdeq	r0, [r0], -r8
    e158:	cb250101 	blgt	94e564 <__ccfg+0x92e5bc>
    e15c:	11000025 	tstne	r0, r5, lsr #32
    e160:	0c741a3c 			; <UNDEFINED> instruction: 0x0c741a3c
    e164:	01010000 	mrseq	r0, (UNDEF: 1)
    e168:	00006b09 	andeq	r6, r0, r9, lsl #22
    e16c:	001fa300 	andseq	sl, pc, r0, lsl #6
    e170:	00910a00 	addseq	r0, r1, r0, lsl #20
    e174:	00140000 	andseq	r0, r4, r0
    e178:	00298927 	eoreq	r8, r9, r7, lsr #18
    e17c:	113d1200 	teqne	sp, r0, lsl #4
    e180:	00001f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    e184:	00b80305 	adcseq	r0, r8, r5, lsl #6
    e188:	5b282000 	blpl	a16190 <__ccfg+0x9f61e8>
    e18c:	1200001f 	andne	r0, r0, #31
    e190:	03052072 	movweq	r2, #20594	; 0x5072
    e194:	20000054 	andcs	r0, r0, r4, asr r0
    e198:	001f6928 	andseq	r6, pc, r8, lsr #18
    e19c:	0e961200 	cdpeq	2, 9, cr1, cr6, cr0, {0}
    e1a0:	003c0305 	eorseq	r0, ip, r5, lsl #6
    e1a4:	77282000 	strvc	r2, [r8, -r0]!
    e1a8:	1200001f 	andne	r0, r0, #31
    e1ac:	030513ad 	movweq	r1, #21421	; 0x53ad
    e1b0:	200000a0 	andcs	r0, r0, r0, lsr #1
    e1b4:	001f8528 	andseq	r8, pc, r8, lsr #10
    e1b8:	13c21200 	bicne	r1, r2, #0, 4
    e1bc:	007c0305 	rsbseq	r0, ip, r5, lsl #6
    e1c0:	8a002000 	bhi	161c8 <__exidx_end+0x105c8>
    e1c4:	04000001 	streq	r0, [r0], #-1
    e1c8:	0030db00 	eorseq	sp, r0, r0, lsl #22
    e1cc:	21010400 	tstcs	r1, r0, lsl #8
    e1d0:	0100002a 	tsteq	r0, sl, lsr #32
    e1d4:	00002a06 	andeq	r2, r0, r6, lsl #20
    e1d8:	00002ae8 	andeq	r2, r0, r8, ror #21
    e1dc:	000010e8 	andeq	r1, r0, r8, ror #1
    e1e0:	00000000 	andeq	r0, r0, r0
    e1e4:	000073a2 	andeq	r7, r0, r2, lsr #7
    e1e8:	4d060102 	stfmis	f0, [r6, #-8]
    e1ec:	0300000c 	movweq	r0, #12
    e1f0:	000029fc 	strdeq	r2, [r0], -ip
    e1f4:	00371d02 	eorseq	r1, r7, r2, lsl #26
    e1f8:	01020000 	mrseq	r0, (UNDEF: 2)
    e1fc:	000c4b08 	andeq	r4, ip, r8, lsl #22
    e200:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e204:	00000a5b 	andeq	r0, r0, fp, asr sl
    e208:	48070202 	stmdami	r7, {r1, r9}
    e20c:	0200000d 	andeq	r0, r0, #13
    e210:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    e214:	94030000 	strls	r0, [r3], #-0
    e218:	02000029 	andeq	r0, r0, #41	; 0x29
    e21c:	00005e41 	andeq	r5, r0, r1, asr #28
    e220:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e224:	0000041d 	andeq	r0, r0, sp, lsl r4
    e228:	e8050802 	stmda	r5, {r1, fp}
    e22c:	02000007 	andeq	r0, r0, #7
    e230:	04180708 	ldreq	r0, [r8], #-1800	; 0xfffff8f8
    e234:	04040000 	streq	r0, [r4], #-0
    e238:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e23c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e240:	00000422 	andeq	r0, r0, r2, lsr #8
    e244:	0029fe03 	eoreq	pc, r9, r3, lsl #28
    e248:	2c140300 	ldccs	3, cr0, [r4], {-0}
    e24c:	03000000 	movweq	r0, #0
    e250:	00002996 	muleq	r0, r6, r9
    e254:	00532003 	subseq	r2, r3, r3
    e258:	c0030000 	andgt	r0, r3, r0
    e25c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    e260:	0000a233 	andeq	sl, r0, r3, lsr r2
    e264:	a8040500 	stmdage	r4, {r8, sl}
    e268:	06000000 	streq	r0, [r0], -r0
    e26c:	002ad603 	eoreq	sp, sl, r3, lsl #12
    e270:	b4340400 	ldrtlt	r0, [r4], #-1024	; 0xfffffc00
    e274:	05000000 	streq	r0, [r0, #-0]
    e278:	0000ba04 	andeq	fp, r0, r4, lsl #20
    e27c:	00c50700 	sbceq	r0, r5, r0, lsl #14
    e280:	81080000 	mrshi	r0, (UNDEF: 8)
    e284:	00000000 	andeq	r0, r0, r0
    e288:	0029ef09 	eoreq	lr, r9, r9, lsl #30
    e28c:	f4990500 			; <UNDEFINED> instruction: 0xf4990500
    e290:	28000038 	stmdacs	r0, {r3, r4, r5}
    e294:	01000000 	mrseq	r0, (UNDEF: 0)
    e298:	00010b9c 	muleq	r1, ip, fp
    e29c:	2ad10a00 	bcs	ff450aa4 <_estack+0xdf44baa4>
    e2a0:	35010000 	strcc	r0, [r1, #-0]
    e2a4:	00000097 	muleq	r0, r7, r0
    e2a8:	000036a8 	andeq	r3, r0, r8, lsr #13
    e2ac:	00299f0b 	eoreq	r9, r9, fp, lsl #30
    e2b0:	0b370100 	bleq	dce6b8 <__ccfg+0xdae710>
    e2b4:	ed000001 	stc	0, cr0, [r0, #-4]
    e2b8:	0c000036 	stceq	0, cr0, [r0], {54}	; 0x36
    e2bc:	000038fc 	strdeq	r3, [r0], -ip
    e2c0:	00000177 	andeq	r0, r0, r7, ror r1
    e2c4:	0039160d 	eorseq	r1, r9, sp, lsl #12
    e2c8:	00018200 	andeq	r8, r1, r0, lsl #4
    e2cc:	01020000 	mrseq	r0, (UNDEF: 2)
    e2d0:	000c9702 	andeq	r9, ip, r2, lsl #14
    e2d4:	29ab0e00 	stmibcs	fp!, {r9, sl, fp}
    e2d8:	9a050000 	bls	14e2e0 <__ccfg+0x12e338>
    e2dc:	00000000 	andeq	r0, r0, r0
    e2e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    e2e4:	01779c01 	cmneq	r7, r1, lsl #24
    e2e8:	d10a0000 	mrsle	r0, (UNDEF: 10)
    e2ec:	0100002a 	tsteq	r0, sl, lsr #32
    e2f0:	0000a940 	andeq	sl, r0, r0, asr #18
    e2f4:	00372200 	eorseq	r2, r7, r0, lsl #4
    e2f8:	2b480a00 	blcs	1210b00 <__ccfg+0x11f0b58>
    e2fc:	40010000 	andmi	r0, r1, r0
    e300:	00000081 	andeq	r0, r0, r1, lsl #1
    e304:	00003767 	andeq	r3, r0, r7, ror #14
    e308:	00299f0b 	eoreq	r9, r9, fp, lsl #30
    e30c:	0b420100 	bleq	108e714 <__ccfg+0x106e76c>
    e310:	88000001 	stmdahi	r0, {r0}
    e314:	0c000037 	stceq	0, cr0, [r0], {55}	; 0x37
    e318:	00000000 	andeq	r0, r0, r0
    e31c:	00000177 	andeq	r0, r0, r7, ror r1
    e320:	0000000f 	andeq	r0, r0, pc
    e324:	00016d00 	andeq	r6, r1, r0, lsl #26
    e328:	50011000 	andpl	r1, r1, r0
    e32c:	00007702 	andeq	r7, r0, r2, lsl #14
    e330:	0000000d 	andeq	r0, r0, sp
    e334:	00018200 	andeq	r8, r1, r0, lsl #4
    e338:	d1110000 	tstle	r1, r0
    e33c:	06000029 	streq	r0, [r0], -r9, lsr #32
    e340:	00008c6a 	andeq	r8, r0, sl, ror #24
    e344:	29e01100 	stmibcs	r0!, {r8, ip}^
    e348:	84060000 	strhi	r0, [r6], #-0
    e34c:	0000008c 	andeq	r0, r0, ip, lsl #1
    e350:	0000d500 	andeq	sp, r0, r0, lsl #10
    e354:	c7000400 	strgt	r0, [r0, -r0, lsl #8]
    e358:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    e35c:	002a2101 	eoreq	r2, sl, r1, lsl #2
    e360:	2b940100 	blcs	fe50e768 <_estack+0xde509768>
    e364:	2ae80000 	bcs	ffa0e36c <_estack+0xdfa0936c>
    e368:	11000000 	mrsne	r0, (UNDEF: 0)
    e36c:	00000000 	andeq	r0, r0, r0
    e370:	75420000 	strbvc	r0, [r2, #-0]
    e374:	8b020000 	blhi	8e37c <__ccfg+0x6e3d4>
    e378:	0200002b 	andeq	r0, r0, #43	; 0x2b
    e37c:	0000301b 	andeq	r3, r0, fp, lsl r0
    e380:	06010300 	streq	r0, [r1], -r0, lsl #6
    e384:	00000c4d 	andeq	r0, r0, sp, asr #24
    e388:	4b080103 	blmi	20e79c <__ccfg+0x1ee7f4>
    e38c:	0300000c 	movweq	r0, #12
    e390:	0a5b0502 	beq	16cf7a0 <__ccfg+0x16af7f8>
    e394:	02030000 	andeq	r0, r3, #0
    e398:	000d4807 	andeq	r4, sp, r7, lsl #16
    e39c:	2b810200 	blcs	fe04eba4 <_estack+0xde049ba4>
    e3a0:	3f020000 	svccc	0x00020000
    e3a4:	00000057 	andeq	r0, r0, r7, asr r0
    e3a8:	ed050403 	cfstrs	mvf0, [r5, #-12]
    e3ac:	03000007 	movweq	r0, #7
    e3b0:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
    e3b4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    e3b8:	0007e805 	andeq	lr, r7, r5, lsl #16
    e3bc:	07080300 	streq	r0, [r8, -r0, lsl #6]
    e3c0:	00000418 	andeq	r0, r0, r8, lsl r4
    e3c4:	69050404 	stmdbvs	r5, {r2, sl}
    e3c8:	0300746e 	movweq	r7, #1134	; 0x46e
    e3cc:	04220704 	strteq	r0, [r2], #-1796	; 0xfffff8fc
    e3d0:	8d020000 	stchi	0, cr0, [r2, #-0]
    e3d4:	0300002b 	movweq	r0, #43	; 0x2b
    e3d8:	00002513 	andeq	r2, r0, r3, lsl r5
    e3dc:	2b830200 	blcs	fe0cebe4 <_estack+0xde0c9be4>
    e3e0:	1f030000 	svcne	0x00030000
    e3e4:	0000004c 	andeq	r0, r0, ip, asr #32
    e3e8:	002b5205 	eoreq	r5, fp, r5, lsl #4
    e3ec:	8caa0400 	cfstrshi	mvf0, [sl]
    e3f0:	1c000000 	stcne	0, cr0, [r0], {-0}
    e3f4:	30000039 	andcc	r0, r0, r9, lsr r0
    e3f8:	01000000 	mrseq	r0, (UNDEF: 0)
    e3fc:	2bc5069c 	blcs	ff14fe74 <_estack+0xdf14ae74>
    e400:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    e404:	0000008c 	andeq	r0, r0, ip, lsl #1
    e408:	000037bd 			; <UNDEFINED> instruction: 0x000037bd
    e40c:	002bb606 	eoreq	fp, fp, r6, lsl #12
    e410:	8c3f0100 	ldfhis	f0, [pc], #-0	; e418 <__exidx_end+0x8818>
    e414:	d6000000 	strle	r0, [r0], -r0
    e418:	07000037 	smladxeq	r0, r7, r0, r0
    e41c:	00002b74 	andeq	r2, r0, r4, ror fp
    e420:	00814001 	addeq	r4, r1, r1
    e424:	51010000 	mrspl	r0, (UNDEF: 1)
    e428:	01430000 	mrseq	r0, (UNDEF: 67)
    e42c:	00040000 	andeq	r0, r4, r0
    e430:	00003236 	andeq	r3, r0, r6, lsr r2
    e434:	2a210104 	bcs	84e84c <__ccfg+0x82e8a4>
    e438:	76010000 	strvc	r0, [r1], -r0
    e43c:	e800002c 	stmda	r0, {r2, r3, r5}
    e440:	1000002a 	andne	r0, r0, sl, lsr #32
    e444:	00000011 	andeq	r0, r0, r1, lsl r0
    e448:	ad000000 	stcge	0, cr0, [r0, #-0]
    e44c:	02000076 	andeq	r0, r0, #118	; 0x76
    e450:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
    e454:	01020000 	mrseq	r0, (UNDEF: 2)
    e458:	000c4b08 	andeq	r4, ip, r8, lsl #22
    e45c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e460:	00000a5b 	andeq	r0, r0, fp, asr sl
    e464:	48070202 	stmdami	r7, {r1, r9}
    e468:	0200000d 	andeq	r0, r0, #13
    e46c:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    e470:	94030000 	strls	r0, [r3], #-0
    e474:	02000029 	andeq	r0, r0, #41	; 0x29
    e478:	00005341 	andeq	r5, r0, r1, asr #6
    e47c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e480:	0000041d 	andeq	r0, r0, sp, lsl r4
    e484:	e8050802 	stmda	r5, {r1, fp}
    e488:	03000007 	movweq	r0, #7
    e48c:	00002c20 	andeq	r2, r0, r0, lsr #24
    e490:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    e494:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e498:	00041807 	andeq	r1, r4, r7, lsl #16
    e49c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e4a0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e4a4:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    e4a8:	03000004 	movweq	r0, #4
    e4ac:	00002996 	muleq	r0, r6, r9
    e4b0:	00482003 	subeq	r2, r8, r3
    e4b4:	22030000 	andcs	r0, r3, #0
    e4b8:	0300002c 	movweq	r0, #44	; 0x2c
    e4bc:	00006126 	andeq	r6, r0, r6, lsr #2
    e4c0:	2beb0500 	blcs	ffacf8c8 <_estack+0xdfaca8c8>
    e4c4:	45040000 	strmi	r0, [r4, #-0]
    e4c8:	00008103 	andeq	r8, r0, r3, lsl #2
    e4cc:	00394c00 	eorseq	r4, r9, r0, lsl #24
    e4d0:	00002000 	andeq	r2, r0, r0
    e4d4:	dd9c0100 	ldfles	f0, [ip]
    e4d8:	06000000 	streq	r0, [r0], -r0
    e4dc:	00002bdc 	ldrdeq	r2, [r0], -ip
    e4e0:	00814001 	addeq	r4, r1, r1
    e4e4:	380b0000 	stmdacc	fp, {}	; <UNPREDICTABLE>
    e4e8:	2b060000 	blcs	18e4f0 <__ccfg+0x16e548>
    e4ec:	0100002c 	tsteq	r0, ip, lsr #32
    e4f0:	00008141 	andeq	r8, r0, r1, asr #2
    e4f4:	00381e00 	eorseq	r1, r8, r0, lsl #28
    e4f8:	2c0e0700 	stccs	7, cr0, [lr], {-0}
    e4fc:	42010000 	andmi	r0, r1, #0
    e500:	00000081 	andeq	r0, r0, r1, lsl #1
    e504:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    e508:	00002c3d 	andeq	r2, r0, sp, lsr ip
    e50c:	8c035304 	stchi	3, cr5, [r3], {4}
    e510:	6c000000 	stcvs	0, cr0, [r0], {-0}
    e514:	18000039 	stmdane	r0, {r0, r3, r4, r5}
    e518:	01000000 	mrseq	r0, (UNDEF: 0)
    e51c:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    e520:	01080800 	tsteq	r8, r0, lsl #16
    e524:	00011659 	andeq	r1, r1, r9, asr r6
    e528:	2bd00900 	blcs	ff410930 <_estack+0xdf40b930>
    e52c:	5a010000 	bpl	4e534 <__ccfg+0x2e58c>
    e530:	0000008c 	andeq	r0, r0, ip, lsl #1
    e534:	002c6909 	eoreq	r6, ip, r9, lsl #18
    e538:	2f5b0100 	svccs	0x005b0100
    e53c:	00000001 	andeq	r0, r0, r1
    e540:	002c5e0a 	eoreq	r5, ip, sl, lsl #28
    e544:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    e548:	07000000 	streq	r0, [r0, -r0]
    e54c:	00002c0e 	andeq	r2, r0, lr, lsl #24
    e550:	00815d01 	addeq	r5, r1, r1, lsl #26
    e554:	51010000 	mrspl	r0, (UNDEF: 1)
    e558:	00810b00 	addeq	r0, r1, r0, lsl #22
    e55c:	013f0000 	teqeq	pc, r0
    e560:	3f0c0000 	svccc	0x000c0000
    e564:	01000001 	tsteq	r0, r1
    e568:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e56c:	00002c95 	muleq	r0, r5, ip
    e570:	00013600 	andeq	r3, r1, r0, lsl #12
    e574:	e0000400 	and	r0, r0, r0, lsl #8
    e578:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    e57c:	002a2101 	eoreq	r2, sl, r1, lsl #2
    e580:	2cd30100 	ldfcse	f0, [r3], {0}
    e584:	2ae80000 	bcs	ffa0e58c <_estack+0xdfa0958c>
    e588:	11280000 			; <UNDEFINED> instruction: 0x11280000
    e58c:	00000000 	andeq	r0, r0, r0
    e590:	785a0000 	ldmdavc	sl, {}^	; <UNPREDICTABLE>
    e594:	01020000 	mrseq	r0, (UNDEF: 2)
    e598:	000c4d06 	andeq	r4, ip, r6, lsl #26
    e59c:	08010200 	stmdaeq	r1, {r9}
    e5a0:	00000c4b 	andeq	r0, r0, fp, asr #24
    e5a4:	5b050202 	blpl	14edb4 <__ccfg+0x12ee0c>
    e5a8:	0200000a 	andeq	r0, r0, #10
    e5ac:	0d480702 	stcleq	7, cr0, [r8, #-8]
    e5b0:	04020000 	streq	r0, [r2], #-0
    e5b4:	0007ed05 	andeq	lr, r7, r5, lsl #26
    e5b8:	29940300 	ldmibcs	r4, {r8, r9}
    e5bc:	41020000 	mrsmi	r0, (UNDEF: 2)
    e5c0:	00000053 	andeq	r0, r0, r3, asr r0
    e5c4:	1d070402 	cfstrsne	mvf0, [r7, #-8]
    e5c8:	02000004 	andeq	r0, r0, #4
    e5cc:	07e80508 	strbeq	r0, [r8, r8, lsl #10]!
    e5d0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e5d4:	00041807 	andeq	r1, r4, r7, lsl #16
    e5d8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e5dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e5e0:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
    e5e4:	03000004 	movweq	r0, #4
    e5e8:	00002996 	muleq	r0, r6, r9
    e5ec:	00482003 	subeq	r2, r8, r3
    e5f0:	d1050000 	mrsle	r0, (UNDEF: 5)
    e5f4:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    e5f8:	0000766a 	andeq	r7, r0, sl, ror #12
    e5fc:	00398400 	eorseq	r8, r9, r0, lsl #8
    e600:	00000800 	andeq	r0, r0, r0, lsl #16
    e604:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    e608:	06000000 	streq	r0, [r0], -r0
    e60c:	00002cc1 	andeq	r2, r0, r1, asr #25
    e610:	00767701 	rsbseq	r7, r6, r1, lsl #14
    e614:	05000000 	streq	r0, [r0, #-0]
    e618:	00002cee 	andeq	r2, r0, lr, ror #25
    e61c:	00767804 	rsbseq	r7, r6, r4, lsl #16
    e620:	00000000 	andeq	r0, r0, r0
    e624:	00060000 	andeq	r0, r6, r0
    e628:	9c010000 	stcls	0, cr0, [r1], {-0}
    e62c:	000000cb 	andeq	r0, r0, fp, asr #1
    e630:	002cc106 	eoreq	ip, ip, r6, lsl #2
    e634:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    e638:	00000000 	andeq	r0, r0, r0
    e63c:	0029e005 	eoreq	lr, r9, r5
    e640:	76840400 	strvc	r0, [r4], r0, lsl #8
    e644:	8c000000 	stchi	0, cr0, [r0], {-0}
    e648:	08000039 	stmdaeq	r0, {r0, r3, r4, r5}
    e64c:	01000000 	mrseq	r0, (UNDEF: 0)
    e650:	0000f19c 	muleq	r0, ip, r1
    e654:	2cc10700 	stclcs	7, cr0, [r1], {0}
    e658:	0f010000 	svceq	0x00010000
    e65c:	00007601 	andeq	r7, r0, r1, lsl #12
    e660:	9e080000 	cdpls	0, 0, cr0, cr8, cr0, {0}
    e664:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    e668:	0076015b 	rsbseq	r0, r6, fp, asr r1
    e66c:	00000000 	andeq	r0, r0, r0
    e670:	00060000 	andeq	r0, r6, r0
    e674:	9c010000 	stcls	0, cr0, [r1], {-0}
    e678:	00000118 	andeq	r0, r0, r8, lsl r1
    e67c:	002cc107 	eoreq	ip, ip, r7, lsl #2
    e680:	015a0100 	cmpeq	sl, r0, lsl #2
    e684:	00000076 	andeq	r0, r0, r6, ror r0
    e688:	2cb20900 			; <UNDEFINED> instruction: 0x2cb20900
    e68c:	6c040000 	stcvs	0, cr0, [r4], {-0}
    e690:	00000001 	andeq	r0, r0, r1
    e694:	00000800 	andeq	r0, r0, r0, lsl #16
    e698:	0a9c0100 	beq	fe70eaa0 <_estack+0xde709aa0>
    e69c:	00002cc9 	andeq	r2, r0, r9, asr #25
    e6a0:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    e6a4:	01000000 	mrseq	r0, (UNDEF: 0)
    e6a8:	bf000050 	svclt	0x00000050
    e6ac:	04000008 	streq	r0, [r0], #-8
    e6b0:	00339000 	eorseq	r9, r3, r0
    e6b4:	21010400 	tstcs	r1, r0, lsl #8
    e6b8:	0100002a 	tsteq	r0, sl, lsr #32
    e6bc:	00002e26 	andeq	r2, r0, r6, lsr #28
    e6c0:	00002ae8 	andeq	r2, r0, r8, ror #21
    e6c4:	00001170 	andeq	r1, r0, r0, ror r1
    e6c8:	00000000 	andeq	r0, r0, r0
    e6cc:	000079fa 	strdeq	r7, [r0], -sl
    e6d0:	4d060102 	stfmis	f0, [r6, #-8]
    e6d4:	0300000c 	movweq	r0, #12
    e6d8:	000029fc 	strdeq	r2, [r0], -ip
    e6dc:	00371d03 	eorseq	r1, r7, r3, lsl #26
    e6e0:	01020000 	mrseq	r0, (UNDEF: 2)
    e6e4:	000c4b08 	andeq	r4, ip, r8, lsl #22
    e6e8:	31cd0300 	biccc	r0, sp, r0, lsl #6
    e6ec:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    e6f0:	00000049 	andeq	r0, r0, r9, asr #32
    e6f4:	5b050202 	blpl	14ef04 <__ccfg+0x12ef5c>
    e6f8:	0300000a 	movweq	r0, #10
    e6fc:	00002df2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    e700:	005b2b03 	subseq	r2, fp, r3, lsl #22
    e704:	02020000 	andeq	r0, r2, #0
    e708:	000d4807 	andeq	r4, sp, r7, lsl #16
    e70c:	2b810300 	blcs	fe04f314 <_estack+0xde04a314>
    e710:	3f030000 	svccc	0x00030000
    e714:	0000006d 	andeq	r0, r0, sp, rrx
    e718:	ed050402 	cfstrs	mvf0, [r5, #-8]
    e71c:	03000007 	movweq	r0, #7
    e720:	00002994 	muleq	r0, r4, r9
    e724:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    e728:	04020000 	streq	r0, [r2], #-0
    e72c:	00041d07 	andeq	r1, r4, r7, lsl #26
    e730:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    e734:	000007e8 	andeq	r0, r0, r8, ror #15
    e738:	18070802 	stmdane	r7, {r1, fp}
    e73c:	04000004 	streq	r0, [r0], #-4
    e740:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e744:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    e748:	00042207 	andeq	r2, r4, r7, lsl #4
    e74c:	29fe0300 	ldmibcs	lr!, {r8, r9}^
    e750:	14040000 	strne	r0, [r4], #-0
    e754:	0000002c 	andeq	r0, r0, ip, lsr #32
    e758:	0031cf03 	eorseq	ip, r1, r3, lsl #30
    e75c:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    e760:	03000000 	movweq	r0, #0
    e764:	00002df4 	strdeq	r2, [r0], -r4
    e768:	00501a04 	subseq	r1, r0, r4, lsl #20
    e76c:	83030000 	movwhi	r0, #12288	; 0x3000
    e770:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    e774:	0000621f 	andeq	r6, r0, pc, lsl r2
    e778:	29960300 	ldmibcs	r6, {r8, r9}
    e77c:	20040000 	andcs	r0, r4, r0
    e780:	00000074 	andeq	r0, r0, r4, ror r0
    e784:	0029c003 	eoreq	ip, r9, r3
    e788:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    e78c:	05000000 	streq	r0, [r0, #-0]
    e790:	0000ea04 	andeq	lr, r0, r4, lsl #20
    e794:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    e798:	000000f1 	strdeq	r0, [r0], -r1
    e79c:	0000fc07 	andeq	pc, r0, r7, lsl #24
    e7a0:	00a20800 	adceq	r0, r2, r0, lsl #16
    e7a4:	03000000 	movweq	r0, #0
    e7a8:	000030f6 	strdeq	r3, [r0], -r6
    e7ac:	01074206 	tsteq	r7, r6, lsl #4
    e7b0:	04050000 	streq	r0, [r5], #-0
    e7b4:	0000010d 	andeq	r0, r0, sp, lsl #2
    e7b8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    e7bc:	00012600 	andeq	r2, r1, r0, lsl #12
    e7c0:	01260800 			; <UNDEFINED> instruction: 0x01260800
    e7c4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e7c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e7cc:	000000ce 	andeq	r0, r0, lr, asr #1
    e7d0:	a2040500 	andge	r0, r4, #0, 10
    e7d4:	03000000 	movweq	r0, #0
    e7d8:	0000325e 	andeq	r3, r0, lr, asr r2
    e7dc:	01374606 	teqeq	r7, r6, lsl #12
    e7e0:	04050000 	streq	r0, [r5], #-0
    e7e4:	0000013d 	andeq	r0, r0, sp, lsr r1
    e7e8:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    e7ec:	32a70300 	adccc	r0, r7, #0, 6
    e7f0:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    e7f4:	00000137 	andeq	r0, r0, r7, lsr r1
    e7f8:	002f8e03 	eoreq	r8, pc, r3, lsl #28
    e7fc:	584a0600 	stmdapl	sl, {r9, sl}^
    e800:	05000001 	streq	r0, [r0, #-1]
    e804:	00015e04 	andeq	r5, r1, r4, lsl #28
    e808:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    e80c:	016d0000 	cmneq	sp, r0
    e810:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e814:	00000000 	andeq	r0, r0, r0
    e818:	002e9d03 	eoreq	r9, lr, r3, lsl #26
    e81c:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    e820:	03000001 	movweq	r0, #1
    e824:	00002dfd 	strdeq	r2, [r0], -sp
    e828:	01074e06 	tsteq	r7, r6, lsl #28
    e82c:	8d030000 	stchi	0, cr0, [r3, #-0]
    e830:	0600002e 	streq	r0, [r0], -lr, lsr #32
    e834:	0000e451 	andeq	lr, r0, r1, asr r4
    e838:	2d170300 	ldccs	3, cr0, [r7, #-0]
    e83c:	53060000 	movwpl	r0, #24576	; 0x6000
    e840:	00000199 	muleq	r0, r9, r1
    e844:	019f0405 	orrseq	r0, pc, r5, lsl #8
    e848:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e84c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    e850:	08000001 	stmdaeq	r0, {r0}
    e854:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    e858:	0000b808 	andeq	fp, r0, r8, lsl #16
    e85c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    e860:	05000000 	streq	r0, [r0, #-0]
    e864:	0000b804 	andeq	fp, r0, r4, lsl #16
    e868:	310c0300 	mrscc	r0, LR_mon
    e86c:	57060000 	strpl	r0, [r6, -r0]
    e870:	000001c9 	andeq	r0, r0, r9, asr #3
    e874:	01cf0405 	biceq	r0, pc, r5, lsl #8
    e878:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e87c:	e3000000 	movw	r0, #0
    e880:	08000001 	stmdaeq	r0, {r0}
    e884:	000001e3 	andeq	r0, r0, r3, ror #3
    e888:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e88c:	04050000 	streq	r0, [r5], #-0
    e890:	000000ce 	andeq	r0, r0, lr, asr #1
    e894:	002f0003 	eoreq	r0, pc, r3
    e898:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    e89c:	03000001 	movweq	r0, #1
    e8a0:	00002fba 			; <UNDEFINED> instruction: 0x00002fba
    e8a4:	01c95d06 	biceq	r5, r9, r6, lsl #26
    e8a8:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    e8ac:	0600002d 	streq	r0, [r0], -sp, lsr #32
    e8b0:	0001c960 	andeq	ip, r1, r0, ror #18
    e8b4:	311a0300 	tstcc	sl, r0, lsl #6
    e8b8:	63060000 	movwvs	r0, #24576	; 0x6000
    e8bc:	000000e4 	andeq	r0, r0, r4, ror #1
    e8c0:	002d6703 	eoreq	r6, sp, r3, lsl #14
    e8c4:	20650600 	rsbcs	r0, r5, r0, lsl #12
    e8c8:	05000002 	streq	r0, [r0, #-2]
    e8cc:	00022604 	andeq	r2, r2, r4, lsl #12
    e8d0:	02310700 	eorseq	r0, r1, #0, 14
    e8d4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    e8d8:	00000000 	andeq	r0, r0, r0
    e8dc:	0032b803 	eorseq	fp, r2, r3, lsl #16
    e8e0:	20670600 	rsbcs	r0, r7, r0, lsl #12
    e8e4:	03000002 	movweq	r0, #2
    e8e8:	00002ffc 	strdeq	r2, [r0], -ip
    e8ec:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    e8f0:	97030000 	strls	r0, [r3, -r0]
    e8f4:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e8f8:	0000eb6b 	andeq	lr, r0, fp, ror #22
    e8fc:	2fc90300 	svccs	0x00c90300
    e900:	6d060000 	stcvs	0, cr0, [r6, #-0]
    e904:	000000eb 	andeq	r0, r0, fp, ror #1
    e908:	002fdb03 	eoreq	sp, pc, r3, lsl #22
    e90c:	eb6f0600 	bl	1bd0114 <__ccfg+0x1bb016c>
    e910:	0b000000 	bleq	e918 <__exidx_end+0x8d18>
    e914:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    e918:	0c000003 	stceq	0, cr0, [r0], {3}
    e91c:	00002f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
    e920:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    e924:	0c000000 	stceq	0, cr0, [r0], {-0}
    e928:	0000328a 	andeq	r3, r0, sl, lsl #5
    e92c:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    e930:	0c040000 	stceq	0, cr0, [r4], {-0}
    e934:	00002fb0 			; <UNDEFINED> instruction: 0x00002fb0
    e938:	01427e06 	cmpeq	r2, r6, lsl #28
    e93c:	0c080000 	stceq	0, cr0, [r8], {-0}
    e940:	000031a9 	andeq	r3, r0, r9, lsr #3
    e944:	014d7f06 	cmpeq	sp, r6, lsl #30
    e948:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    e94c:	000031bb 			; <UNDEFINED> instruction: 0x000031bb
    e950:	016d8006 	cmneq	sp, r6
    e954:	0c100000 	ldceq	0, cr0, [r0], {-0}
    e958:	00002eae 	andeq	r2, r0, lr, lsr #29
    e95c:	01788106 	cmneq	r8, r6, lsl #2
    e960:	0c140000 	ldceq	0, cr0, [r4], {-0}
    e964:	00002e6a 	andeq	r2, r0, sl, ror #28
    e968:	01838206 	orreq	r8, r3, r6, lsl #4
    e96c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    e970:	00002fa5 	andeq	r2, r0, r5, lsr #31
    e974:	018e8306 	orreq	r8, lr, r6, lsl #6
    e978:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    e97c:	00003134 	andeq	r3, r0, r4, lsr r1
    e980:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    e984:	0c200000 	stceq	0, cr0, [r0], #-0
    e988:	00002f2c 	andeq	r2, r0, ip, lsr #30
    e98c:	01e98506 	mvneq	r8, r6, lsl #10
    e990:	0c240000 	stceq	0, cr0, [r4], #-0
    e994:	00002f84 	andeq	r2, r0, r4, lsl #31
    e998:	01f48606 	mvnseq	r8, r6, lsl #12
    e99c:	0c280000 	stceq	0, cr0, [r8], #-0
    e9a0:	000031e9 	andeq	r3, r0, r9, ror #3
    e9a4:	01ff8706 	mvnseq	r8, r6, lsl #14
    e9a8:	0c2c0000 	stceq	0, cr0, [ip], #-0
    e9ac:	00002ec9 	andeq	r2, r0, r9, asr #29
    e9b0:	02158806 	andseq	r8, r5, #393216	; 0x60000
    e9b4:	0c300000 	ldceq	0, cr0, [r0], #-0
    e9b8:	000031d7 	ldrdeq	r3, [r0], -r7
    e9bc:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    e9c0:	0c340000 	ldceq	0, cr0, [r4], #-0
    e9c4:	00002da8 	andeq	r2, r0, r8, lsr #27
    e9c8:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    e9cc:	0c380000 	ldceq	0, cr0, [r8], #-0
    e9d0:	00002feb 	andeq	r2, r0, fp, ror #31
    e9d4:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    e9d8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    e9dc:	0000318a 	andeq	r3, r0, sl, lsl #3
    e9e0:	02478c06 	subeq	r8, r7, #1536	; 0x600
    e9e4:	0c400000 	mareq	acc0, r0, r0
    e9e8:	00002f0e 	andeq	r2, r0, lr, lsl #30
    e9ec:	02528d06 	subseq	r8, r2, #384	; 0x180
    e9f0:	0c440000 	mareq	acc0, r0, r4
    e9f4:	00002d58 	andeq	r2, r0, r8, asr sp
    e9f8:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    e9fc:	00480000 	subeq	r0, r8, r0
    ea00:	0030ba03 	eorseq	fp, r0, r3, lsl #20
    ea04:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    ea08:	0b000002 	bleq	ea18 <__exidx_end+0x8e18>
    ea0c:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    ea10:	0c000003 	stceq	0, cr0, [r0], {3}
    ea14:	00002e0e 	andeq	r2, r0, lr, lsl #28
    ea18:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    ea1c:	0c000000 	stceq	0, cr0, [r0], {-0}
    ea20:	00003080 	andeq	r3, r0, r0, lsl #1
    ea24:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    ea28:	0c040000 	stceq	0, cr0, [r4], {-0}
    ea2c:	00002d78 	andeq	r2, r0, r8, ror sp
    ea30:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    ea34:	0c080000 	stceq	0, cr0, [r8], {-0}
    ea38:	00002e41 	andeq	r2, r0, r1, asr #28
    ea3c:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    ea40:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ea44:	00002dbb 			; <UNDEFINED> instruction: 0x00002dbb
    ea48:	00c35901 	sbceq	r5, r3, r1, lsl #18
    ea4c:	00100000 	andseq	r0, r0, r0
    ea50:	0030ab03 	eorseq	sl, r0, r3, lsl #22
    ea54:	605a0100 	subsvs	r0, sl, r0, lsl #2
    ea58:	0d000003 	stceq	0, cr0, [r0, #-12]
    ea5c:	00002cff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    ea60:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    ea64:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    ea68:	000030d9 	ldrdeq	r3, [r0], -r9
    ea6c:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    ea70:	500e0000 	andpl	r0, lr, r0
    ea74:	0100002d 	tsteq	r0, sp, lsr #32
    ea78:	0000ce65 	andeq	ip, r0, r5, ror #28
    ea7c:	380f0000 	stmdacc	pc, {}	; <UNPREDICTABLE>
    ea80:	0200002d 	andeq	r0, r0, #45	; 0x2d
    ea84:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    ea88:	fb010000 	blx	4ea92 <__ccfg+0x2eaea>
    ea8c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    ea90:	000030d9 	ldrdeq	r3, [r0], -r9
    ea94:	00cea001 	sbceq	sl, lr, r1
    ea98:	99100000 	ldmdbls	r0, {}	; <UNPREDICTABLE>
    ea9c:	01000031 	tsteq	r0, r1, lsr r0
    eaa0:	0000cea2 	andeq	ip, r0, r2, lsr #29
    eaa4:	b0110000 	andslt	r0, r1, r0
    eaa8:	94000003 	strls	r0, [r0], #-3
    eaac:	5c000039 	stcpl	0, cr0, [r0], {57}	; 0x39
    eab0:	01000000 	mrseq	r0, (UNDEF: 0)
    eab4:	0004b69c 	muleq	r4, ip, r6
    eab8:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    eabc:	38310000 	ldmdacc	r1!, {}	; <UNPREDICTABLE>
    eac0:	c7120000 	ldrgt	r0, [r2, -r0]
    eac4:	5d000003 	stcpl	0, cr0, [r0, #-12]
    eac8:	13000038 	movwne	r0, #56	; 0x38
    eacc:	000039ce 	andeq	r3, r0, lr, asr #19
    ead0:	00000014 	andeq	r0, r0, r4, lsl r0
    ead4:	00000461 	andeq	r0, r0, r1, ror #8
    ead8:	0003bc12 	andeq	fp, r3, r2, lsl ip
    eadc:	00388900 	eorseq	r8, r8, r0, lsl #18
    eae0:	03c71200 	biceq	r1, r7, #0, 4
    eae4:	389c0000 	ldmcc	ip, {}	; <UNPREDICTABLE>
    eae8:	e2140000 	ands	r0, r4, #0
    eaec:	02000039 	andeq	r0, r0, #57	; 0x39
    eaf0:	01150074 	tsteq	r5, r4, ror r0
    eaf4:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    eaf8:	3c015201 	sfmcc	f5, 4, [r1], {1}
    eafc:	01510115 	cmpeq	r1, r5, lsl r1
    eb00:	50011530 	andpl	r1, r1, r0, lsr r5
    eb04:	a0000c05 	andge	r0, r0, r5, lsl #24
    eb08:	0000400c 	andeq	r4, r0, ip
    eb0c:	0039b216 	eorseq	fp, r9, r6, lsl r2
    eb10:	00760200 	rsbseq	r0, r6, r0, lsl #4
    eb14:	0000048d 	andeq	r0, r0, sp, lsl #9
    eb18:	01530115 	cmpeq	r3, r5, lsl r1
    eb1c:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    eb20:	01153101 	tsteq	r5, r1, lsl #2
    eb24:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    eb28:	0c055001 	stceq	0, cr5, [r5], {1}
    eb2c:	400ca000 	andmi	sl, ip, r0
    eb30:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    eb34:	00007402 	andeq	r7, r0, r2, lsl #8
    eb38:	0039ca14 	eorseq	ip, r9, r4, lsl sl
    eb3c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    eb40:	01530115 	cmpeq	r3, r5, lsl r1
    eb44:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    eb48:	01153201 	tsteq	r5, r1, lsl #4
    eb4c:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    eb50:	0c055001 	stceq	0, cr5, [r5], {1}
    eb54:	400ca000 	andmi	sl, ip, r0
    eb58:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    eb5c:	00007402 	andeq	r7, r0, r2, lsl #8
    eb60:	03d31100 	bicseq	r1, r3, #0, 2
    eb64:	39f00000 	ldmibcc	r0!, {}^	; <UNPREDICTABLE>
    eb68:	002c0000 	eoreq	r0, ip, r0
    eb6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    eb70:	0000050d 	andeq	r0, r0, sp, lsl #10
    eb74:	0003e412 	andeq	lr, r3, r2, lsl r4
    eb78:	0038bd00 	eorseq	fp, r8, r0, lsl #26
    eb7c:	03ef1700 	mvneq	r1, #0, 14
    eb80:	50010000 	andpl	r0, r1, r0
    eb84:	00115818 	andseq	r5, r1, r8, lsl r8
    eb88:	0004f400 	andeq	pc, r4, r0, lsl #8
    eb8c:	03e41900 	mvneq	r1, #0, 18
    eb90:	1a040000 	bne	10eb98 <__ccfg+0xeebf0>
    eb94:	00001158 	andeq	r1, r0, r8, asr r1
    eb98:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    eb9c:	14000000 	strne	r0, [r0], #-0
    eba0:	00003a10 	andeq	r3, r0, r0, lsl sl
    eba4:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    eba8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    ebac:	50011534 	andpl	r1, r1, r4, lsr r5
    ebb0:	a0000c05 	andge	r0, r0, r5, lsl #24
    ebb4:	0000400c 	andeq	r4, r0, ip
    ebb8:	00326f1c 	eorseq	r6, r2, ip, lsl pc
    ebbc:	01840200 	orreq	r0, r4, r0, lsl #4
    ebc0:	000000ce 	andeq	r0, r0, lr, asr #1
    ebc4:	00000000 	andeq	r0, r0, r0
    ebc8:	00000090 	muleq	r0, r0, r0
    ebcc:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    ebd0:	c51d0000 	ldrgt	r0, [sp, #-0]
    ebd4:	01000030 	tsteq	r0, r0, lsr r0
    ebd8:	0000cec2 	andeq	ip, r0, r2, asr #29
    ebdc:	0038de00 	eorseq	sp, r8, r0, lsl #28
    ebe0:	30381e00 	eorscc	r1, r8, r0, lsl #28
    ebe4:	c4010000 	strgt	r0, [r1], #-0
    ebe8:	000000ce 	andeq	r0, r0, lr, asr #1
    ebec:	0000390a 	andeq	r3, r0, sl, lsl #18
    ebf0:	0030511e 	eorseq	r5, r0, lr, lsl r1
    ebf4:	c3c50100 	bicgt	r0, r5, #0, 2
    ebf8:	1d000000 	stcne	0, cr0, [r0, #-0]
    ebfc:	1e000039 	mcrne	0, 0, r0, cr0, cr9, {1}
    ec00:	00002dc7 	andeq	r2, r0, r7, asr #27
    ec04:	00cec601 	sbceq	ip, lr, r1, lsl #12
    ec08:	39440000 	stmdbcc	r4, {}^	; <UNPREDICTABLE>
    ec0c:	001f0000 	andseq	r0, pc, r0
    ec10:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    ec14:	1f000008 	svcne	0x00000008
    ec18:	00000000 	andeq	r0, r0, r0
    ec1c:	000008aa 	andeq	r0, r0, sl, lsr #17
    ec20:	2e762000 	cdpcs	0, 7, cr2, cr6, cr0, {0}
    ec24:	91020000 	mrsls	r0, (UNDEF: 2)
    ec28:	003a1c01 	eorseq	r1, sl, r1, lsl #24
    ec2c:	00001800 	andeq	r1, r0, r0, lsl #16
    ec30:	ae9c0100 	fmlgee	f0, f4, f0
    ec34:	21000005 	tstcs	r0, r5
    ec38:	00003a26 	andeq	r3, r0, r6, lsr #20
    ec3c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    ec40:	000005a4 	andeq	r0, r0, r4, lsr #11
    ec44:	01510115 	cmpeq	r1, r5, lsl r1
    ec48:	50011531 	andpl	r1, r1, r1, lsr r5
    ec4c:	1f003301 	svcne	0x00003301
    ec50:	00003a2a 	andeq	r3, r0, sl, lsr #20
    ec54:	0000089e 	muleq	r0, lr, r8
    ec58:	308f2200 	addcc	r2, pc, r0, lsl #4
    ec5c:	22020000 	andcs	r0, r2, #0
    ec60:	0005bb01 	andeq	fp, r5, r1, lsl #22
    ec64:	01020300 	mrseq	r0, LR_svc
    ec68:	000c9702 	andeq	r9, ip, r2, lsl #14
    ec6c:	30e42300 	rsccc	r2, r4, r0, lsl #6
    ec70:	40020000 	andmi	r0, r2, r0
    ec74:	861c0301 	ldrhi	r0, [ip], -r1, lsl #6
    ec78:	0200002d 	andeq	r0, r0, #45	; 0x2d
    ec7c:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    ec80:	3a340000 	bcc	d0ec88 <__ccfg+0xceece0>
    ec84:	00600000 	rsbeq	r0, r0, r0
    ec88:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec8c:	00000677 	andeq	r0, r0, r7, ror r6
    ec90:	00307024 	eorseq	r7, r0, r4, lsr #32
    ec94:	01020100 	mrseq	r0, (UNDEF: 18)
    ec98:	000000ce 	andeq	r0, r0, lr, asr #1
    ec9c:	00003998 	muleq	r0, r8, r9
    eca0:	00313d24 	eorseq	r3, r1, r4, lsr #26
    eca4:	01030100 	mrseq	r0, (UNDEF: 19)
    eca8:	000000ce 	andeq	r0, r0, lr, asr #1
    ecac:	000039ab 	andeq	r3, r0, fp, lsr #19
    ecb0:	0005ae25 	andeq	sl, r5, r5, lsr #28
    ecb4:	003a4000 	eorseq	r4, sl, r0
    ecb8:	00001000 	andeq	r1, r0, r0
    ecbc:	01090100 	mrseq	r0, (UNDEF: 25)
    ecc0:	0000063c 	andeq	r0, r0, ip, lsr r6
    ecc4:	003a5014 	eorseq	r5, sl, r4, lsl r0
    ecc8:	00740200 	rsbseq	r0, r4, r0, lsl #4
    eccc:	01530115 	cmpeq	r3, r5, lsl r1
    ecd0:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    ecd4:	01153101 	tsteq	r5, r1, lsl #2
    ecd8:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    ecdc:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    ece0:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    ece4:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    ece8:	000005c2 	andeq	r0, r0, r2, asr #11
    ecec:	00003a52 	andeq	r3, r0, r2, asr sl
    ecf0:	00000008 	andeq	r0, r0, r8
    ecf4:	5a010a01 	bpl	51500 <__ccfg+0x31558>
    ecf8:	1f000006 	svcne	0x00000006
    ecfc:	00003a5a 	andeq	r3, r0, sl, asr sl
    ed00:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    ed04:	3a3c2100 	bcc	f1710c <__ccfg+0xef7164>
    ed08:	03d30000 	bicseq	r0, r3, #0
    ed0c:	066d0000 	strbteq	r0, [sp], -r0
    ed10:	01150000 	tsteq	r5, r0
    ed14:	00310150 	eorseq	r0, r1, r0, asr r1
    ed18:	003a5e1f 	eorseq	r5, sl, pc, lsl lr
    ed1c:	00089e00 	andeq	r9, r8, r0, lsl #28
    ed20:	db200000 	blle	80ed28 <__ccfg+0x7eed80>
    ed24:	0200002e 	andeq	r0, r0, #46	; 0x2e
    ed28:	3a9401ae 	bcc	fe50f3e8 <_estack+0xde50a3e8>
    ed2c:	00340000 	eorseq	r0, r4, r0
    ed30:	9c010000 	stcls	0, cr0, [r1], {-0}
    ed34:	000006e9 	andeq	r0, r0, r9, ror #13
    ed38:	0005c225 	andeq	ip, r5, r5, lsr #4
    ed3c:	003aa600 	eorseq	sl, sl, r0, lsl #12
    ed40:	00000800 	andeq	r0, r0, r0, lsl #16
    ed44:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    ed48:	000006ab 	andeq	r0, r0, fp, lsr #13
    ed4c:	003aae1f 	eorseq	sl, sl, pc, lsl lr
    ed50:	0008b500 	andeq	fp, r8, r0, lsl #10
    ed54:	9e210000 	cdpls	0, 2, cr0, cr1, cr0, {0}
    ed58:	b000003a 	andlt	r0, r0, sl, lsr r0
    ed5c:	c3000003 	movwgt	r0, #3
    ed60:	15000006 	strne	r0, [r0, #-6]
    ed64:	30015101 	andcc	r5, r1, r1, lsl #2
    ed68:	01500115 	cmpeq	r0, r5, lsl r1
    ed6c:	a4210033 	strtge	r0, [r1], #-51	; 0xffffffcd
    ed70:	d300003a 	movwle	r0, #58	; 0x3a
    ed74:	d6000003 	strle	r0, [r0], -r3
    ed78:	15000006 	strne	r0, [r0, #-6]
    ed7c:	31015001 	tstcc	r1, r1
    ed80:	3ab21f00 	bcc	fec96988 <_estack+0xdec91988>
    ed84:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ed88:	ba1f0000 	blt	7ced90 <__ccfg+0x7aede8>
    ed8c:	aa00003a 	bge	ee7c <__exidx_end+0x927c>
    ed90:	00000008 	andeq	r0, r0, r8
    ed94:	002f351c 	eoreq	r3, pc, ip, lsl r5	; <UNPREDICTABLE>
    ed98:	01f20200 	mvnseq	r0, r0, lsl #4
    ed9c:	000000c3 	andeq	r0, r0, r3, asr #1
    eda0:	00000000 	andeq	r0, r0, r0
    eda4:	00000038 	andeq	r0, r0, r8, lsr r0
    eda8:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    edac:	03260000 			; <UNDEFINED> instruction: 0x03260000
    edb0:	01000031 	tsteq	r0, r1, lsr r0
    edb4:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    edb8:	39be0000 	ldmibcc	lr!, {}	; <UNPREDICTABLE>
    edbc:	66270000 	strtvs	r0, [r7], -r0
    edc0:	01000030 	tsteq	r0, r0, lsr r0
    edc4:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    edc8:	51010000 	mrspl	r0, (UNDEF: 1)
    edcc:	0032c927 	eorseq	ip, r2, r7, lsr #18
    edd0:	01410100 	mrseq	r0, (UNDEF: 81)
    edd4:	000000c3 	andeq	r0, r0, r3, asr #1
    edd8:	40007105 	andmi	r7, r0, r5, lsl #2
    eddc:	da279f26 	ble	9f6a7c <__ccfg+0x9d6ad4>
    ede0:	0100002d 	tsteq	r0, sp, lsr #32
    ede4:	00c30143 	sbceq	r0, r3, r3, asr #2
    ede8:	71070000 	mrsvc	r0, (UNDEF: 7)
    edec:	48244000 	stmdami	r4!, {lr}
    edf0:	e2279f26 	eor	r9, r7, #38, 30	; 0x98
    edf4:	0100002d 	tsteq	r0, sp, lsr #32
    edf8:	00c30145 	sbceq	r0, r3, r5, asr #2
    edfc:	71070000 	mrsvc	r0, (UNDEF: 7)
    ee00:	48244800 	stmdami	r4!, {fp, lr}
    ee04:	ea249f26 	b	936aa4 <__ccfg+0x916afc>
    ee08:	0100002d 	tsteq	r0, sp, lsr #32
    ee0c:	00c30147 	sbceq	r0, r3, r7, asr #2
    ee10:	39ec0000 	stmibcc	ip!, {}^	; <UNPREDICTABLE>
    ee14:	53240000 			; <UNDEFINED> instruction: 0x53240000
    ee18:	0100002e 	tsteq	r0, lr, lsr #32
    ee1c:	00c30156 	sbceq	r0, r3, r6, asr r1
    ee20:	3a050000 	bcc	14ee28 <__ccfg+0x12ee80>
    ee24:	0b240000 	bleq	90ee2c <__ccfg+0x8eee84>
    ee28:	01000030 	tsteq	r0, r0, lsr r0
    ee2c:	00c30157 	sbceq	r0, r3, r7, asr r1
    ee30:	3a280000 	bcc	a0ee38 <__ccfg+0x9eee90>
    ee34:	64280000 	strtvs	r0, [r8], #-0
    ee38:	01580100 	cmpeq	r8, r0, lsl #2
    ee3c:	000000c3 	andeq	r0, r0, r3, asr #1
    ee40:	00003a51 	andeq	r3, r0, r1, asr sl
    ee44:	314e1c00 	cmpcc	lr, r0, lsl #24
    ee48:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    ee4c:	0000ad02 	andeq	sl, r0, r2, lsl #26
    ee50:	00000000 	andeq	r0, r0, r0
    ee54:	00000c00 	andeq	r0, r0, r0, lsl #24
    ee58:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    ee5c:	26000007 	strcs	r0, [r0], -r7
    ee60:	00003024 	andeq	r3, r0, r4, lsr #32
    ee64:	c3016301 	movwgt	r6, #4865	; 0x1301
    ee68:	cb000000 	blgt	ee70 <__exidx_end+0x9270>
    ee6c:	2400003a 	strcs	r0, [r0], #-58	; 0xffffffc6
    ee70:	000031fd 	strdeq	r3, [r0], -sp
    ee74:	c3018501 	movwgt	r8, #5377	; 0x1501
    ee78:	ec000000 	stc	0, cr0, [r0], {-0}
    ee7c:	0000003a 	andeq	r0, r0, sl, lsr r0
    ee80:	002f5f1c 	eoreq	r5, pc, ip, lsl pc	; <UNPREDICTABLE>
    ee84:	01c20200 	biceq	r0, r2, r0, lsl #4
    ee88:	000000ce 	andeq	r0, r0, lr, asr #1
    ee8c:	00000000 	andeq	r0, r0, r0
    ee90:	00000034 	andeq	r0, r0, r4, lsr r0
    ee94:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    ee98:	50240000 	eorpl	r0, r4, r0
    ee9c:	01000032 	tsteq	r0, r2, lsr r0
    eea0:	00ce0192 	smulleq	r0, lr, r2, r1
    eea4:	3b2c0000 	blcc	b0eeac <__ccfg+0xaeef04>
    eea8:	f7240000 			; <UNDEFINED> instruction: 0xf7240000
    eeac:	0100001f 	tsteq	r0, pc, lsl r0
    eeb0:	00ce0193 	smulleq	r0, lr, r3, r1
    eeb4:	3b4e0000 	blcc	138eebc <__ccfg+0x136ef14>
    eeb8:	22240000 	eorcs	r0, r4, #0
    eebc:	0100002f 	tsteq	r0, pc, lsr #32
    eec0:	00ce0194 	smulleq	r0, lr, r4, r1
    eec4:	3b610000 	blcc	184eecc <__ccfg+0x182ef24>
    eec8:	c0240000 	eorgt	r0, r4, r0
    eecc:	0100002e 	tsteq	r0, lr, lsr #32
    eed0:	00ce0195 	smulleq	r0, lr, r5, r1
    eed4:	3b840000 	blcc	fe10eedc <_estack+0xde109edc>
    eed8:	001f0000 	andseq	r0, pc, r0
    eedc:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    eee0:	1f000008 	svcne	0x00000008
    eee4:	00000000 	andeq	r0, r0, r0
    eee8:	0000089e 	muleq	r0, lr, r8
    eeec:	321c1c00 	andscc	r1, ip, #0, 24
    eef0:	d3020000 	movwle	r0, #8192	; 0x2000
    eef4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    eef8:	00000000 	andeq	r0, r0, r0
    eefc:	00001c00 	andeq	r1, r0, r0, lsl #24
    ef00:	8d9c0100 	ldfhis	f0, [ip]
    ef04:	24000008 	strcs	r0, [r0], #-8
    ef08:	000030a0 	andeq	r3, r0, r0, lsr #1
    ef0c:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    ef10:	a0000000 	andge	r0, r0, r0
    ef14:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    ef18:	0000320e 	andeq	r3, r0, lr, lsl #4
    ef1c:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    ef20:	b3000000 	movwlt	r0, #0
    ef24:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    ef28:	00002e5d 	andeq	r2, r0, sp, asr lr
    ef2c:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    ef30:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    ef34:	0000003b 	andeq	r0, r0, fp, lsr r0
    ef38:	00301729 	eorseq	r1, r0, r9, lsr #14
    ef3c:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    ef40:	05000003 	streq	r0, [r0, #-3]
    ef44:	00064403 	andeq	r4, r6, r3, lsl #8
    ef48:	2beb2a20 	blcs	ffad97d0 <_estack+0xdfad47d0>
    ef4c:	45070000 	strmi	r0, [r7, #-0]
    ef50:	0000ce03 	andeq	ip, r0, r3, lsl #28
    ef54:	2b522b00 	blcs	1499b5c <__ccfg+0x1479bb4>
    ef58:	aa080000 	bge	20ef60 <__ccfg+0x1eefb8>
    ef5c:	000000c3 	andeq	r0, r0, r3, asr #1
    ef60:	0029ef2c 	eoreq	lr, r9, ip, lsr #30
    ef64:	08990600 	ldmeq	r9, {r9, sl}
    ef68:	000000d9 	ldrdeq	r0, [r0], -r9
    ef6c:	0ab40000 	beq	fed0ef74 <_estack+0xded09f74>
    ef70:	00040000 	andeq	r0, r4, r0
    ef74:	000035ed 	andeq	r3, r0, sp, ror #11
    ef78:	2a210104 	bcs	84f390 <__ccfg+0x82f3e8>
    ef7c:	ed010000 	stc	0, cr0, [r1, #-0]
    ef80:	e8000033 	stmda	r0, {r0, r1, r4, r5}
    ef84:	c800002a 	stmdagt	r0, {r1, r3, r5}
    ef88:	00000011 	andeq	r0, r0, r1, lsl r0
    ef8c:	d4000000 	strle	r0, [r0], #-0
    ef90:	0200007c 	andeq	r0, r0, #124	; 0x7c
    ef94:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
    ef98:	fc030000 	stc2	0, cr0, [r3], {-0}
    ef9c:	03000029 	movweq	r0, #41	; 0x29
    efa0:	0000371d 	andeq	r3, r0, sp, lsl r7
    efa4:	08010200 	stmdaeq	r1, {r9}
    efa8:	00000c4b 	andeq	r0, r0, fp, asr #24
    efac:	0031cd03 	eorseq	ip, r1, r3, lsl #26
    efb0:	49290300 	stmdbmi	r9!, {r8, r9}
    efb4:	02000000 	andeq	r0, r0, #0
    efb8:	0a5b0502 	beq	16d03c8 <__ccfg+0x16b0420>
    efbc:	f2030000 	vhadd.s8	d0, d3, d0
    efc0:	0300002d 	movweq	r0, #45	; 0x2d
    efc4:	00005b2b 	andeq	r5, r0, fp, lsr #22
    efc8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    efcc:	00000d48 	andeq	r0, r0, r8, asr #26
    efd0:	002b8103 	eoreq	r8, fp, r3, lsl #2
    efd4:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; efdc <__exidx_end+0x93dc>
    efd8:	02000000 	andeq	r0, r0, #0
    efdc:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    efe0:	94030000 	strls	r0, [r3], #-0
    efe4:	03000029 	movweq	r0, #41	; 0x29
    efe8:	00007f41 	andeq	r7, r0, r1, asr #30
    efec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    eff0:	0000041d 	andeq	r0, r0, sp, lsl r4
    eff4:	e8050802 	stmda	r5, {r1, fp}
    eff8:	02000007 	andeq	r0, r0, #7
    effc:	04180708 	ldreq	r0, [r8], #-1800	; 0xfffff8f8
    f000:	04040000 	streq	r0, [r4], #-0
    f004:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    f008:	07040200 	streq	r0, [r4, -r0, lsl #4]
    f00c:	00000422 	andeq	r0, r0, r2, lsr #8
    f010:	0029fe03 	eoreq	pc, r9, r3, lsl #28
    f014:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    f018:	03000000 	movweq	r0, #0
    f01c:	000031cf 	andeq	r3, r0, pc, asr #3
    f020:	003e1904 	eorseq	r1, lr, r4, lsl #18
    f024:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    f028:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    f02c:	0000501a 	andeq	r5, r0, sl, lsl r0
    f030:	2b830300 	blcs	fe0cfc38 <_estack+0xde0cac38>
    f034:	1f040000 	svcne	0x00040000
    f038:	00000062 	andeq	r0, r0, r2, rrx
    f03c:	00299603 	eoreq	r9, r9, r3, lsl #12
    f040:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    f044:	03000000 	movweq	r0, #0
    f048:	000032f6 	strdeq	r3, [r0], -r6
    f04c:	009bd405 	addseq	sp, fp, r5, lsl #8
    f050:	04020000 	streq	r0, [r2], #-0
    f054:	002c9507 	eoreq	r9, ip, r7, lsl #10
    f058:	02040500 	andeq	r0, r4, #0, 10
    f05c:	0c540801 	mrrceq	8, 0, r0, r4, cr1
    f060:	c3030000 	movwgt	r0, #12288	; 0x3000
    f064:	06000024 	streq	r0, [r0], -r4, lsr #32
    f068:	0000ce3b 	andeq	ip, r0, fp, lsr lr
    f06c:	a2040600 	andge	r0, r4, #0, 12
    f070:	03000000 	movweq	r0, #0
    f074:	0000228a 	andeq	r2, r0, sl, lsl #5
    f078:	01103c07 	tsteq	r0, r7, lsl #24
    f07c:	29070000 	stmdbcs	r7, {}	; <UNPREDICTABLE>
    f080:	10000025 	andne	r0, r0, r5, lsr #32
    f084:	01656f07 	cmneq	r5, r7, lsl #30
    f088:	f5080000 			; <UNDEFINED> instruction: 0xf5080000
    f08c:	0700001e 	smladeq	r0, lr, r0, r0
    f090:	0000b870 	andeq	fp, r0, r0, ror r8
    f094:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
    f098:	07000007 	streq	r0, [r0, -r7]
    f09c:	0000b871 	andeq	fp, r0, r1, ror r8
    f0a0:	68080200 	stmdavs	r8, {r9}
    f0a4:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f0a8:	00026d74 	andeq	r6, r2, r4, ror sp
    f0ac:	f7080400 			; <UNDEFINED> instruction: 0xf7080400
    f0b0:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f0b4:	0000f475 	andeq	pc, r0, r5, ror r4	; <UNPREDICTABLE>
    f0b8:	98080800 	stmdals	r8, {fp}
    f0bc:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f0c0:	0002017d 	andeq	r0, r2, sp, ror r1
    f0c4:	e2080c00 	and	r0, r8, #0, 24
    f0c8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f0cc:	00024681 	andeq	r4, r2, r1, lsl #13
    f0d0:	03000d00 	movweq	r0, #3328	; 0xd00
    f0d4:	0000341e 	andeq	r3, r0, lr, lsl r4
    f0d8:	01703e07 	cmneq	r0, r7, lsl #28
    f0dc:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    f0e0:	18000034 	stmdane	r0, {r2, r4, r5}
    f0e4:	0201a507 	andeq	sl, r1, #29360128	; 0x1c00000
    f0e8:	f5080000 			; <UNDEFINED> instruction: 0xf5080000
    f0ec:	0700001e 	smladeq	r0, lr, r0, r0
    f0f0:	0000b8a6 	andeq	fp, r0, r6, lsr #17
    f0f4:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
    f0f8:	07000007 	streq	r0, [r0, -r7]
    f0fc:	0000b8a7 	andeq	fp, r0, r7, lsr #17
    f100:	68080200 	stmdavs	r8, {r9}
    f104:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f108:	00026daa 	andeq	r6, r2, sl, lsr #27
    f10c:	f7080400 			; <UNDEFINED> instruction: 0xf7080400
    f110:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f114:	0000f4ab 	andeq	pc, r0, fp, lsr #9
    f118:	98080800 	stmdals	r8, {fp}
    f11c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    f120:	000273b3 			; <UNDEFINED> instruction: 0x000273b3
    f124:	e2080c00 	and	r0, r8, #0, 24
    f128:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f12c:	0002b8b7 			; <UNDEFINED> instruction: 0x0002b8b7
    f130:	2d080d00 	stccs	13, cr0, [r8, #-0]
    f134:	07000000 	streq	r0, [r0, -r0]
    f138:	0000a2b8 			; <UNDEFINED> instruction: 0x0000a2b8
    f13c:	ae080e00 	cdpge	14, 0, cr0, cr8, cr0, {0}
    f140:	07000023 	streq	r0, [r0, -r3, lsr #32]
    f144:	0000a2bf 			; <UNDEFINED> instruction: 0x0000a2bf
    f148:	5f080f00 	svcpl	0x00080f00
    f14c:	07000014 	smladeq	r0, r4, r0, r0
    f150:	0002dfd4 	ldrdeq	sp, [r2], -r4
    f154:	78081000 	stmdavc	r8, {ip}
    f158:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f15c:	0000b8d5 	ldrdeq	fp, [r0], -r5
    f160:	b6081200 	strlt	r1, [r8], -r0, lsl #4
    f164:	07000024 	streq	r0, [r0, -r4, lsr #32]
    f168:	000324d6 	ldrdeq	r2, [r3], -r6
    f16c:	09001400 	stmdbeq	r0, {sl, ip}
    f170:	46760701 	ldrbtmi	r0, [r6], -r1, lsl #14
    f174:	0a000002 	beq	f184 <__exidx_end+0x9584>
    f178:	0000274b 	andeq	r2, r0, fp, asr #14
    f17c:	00a27707 	adceq	r7, r2, r7, lsl #14
    f180:	04010000 	streq	r0, [r1], #-0
    f184:	e90a0004 	stmdb	sl, {r2}
    f188:	07000020 	streq	r0, [r0, -r0, lsr #32]
    f18c:	0000a278 	andeq	sl, r0, r8, ror r2
    f190:	03010100 	movweq	r0, #4352	; 0x1100
    f194:	21a90a00 			; <UNDEFINED> instruction: 0x21a90a00
    f198:	7a070000 	bvc	1cf1a0 <__ccfg+0x1af1f8>
    f19c:	000000a2 	andeq	r0, r0, r2, lsr #1
    f1a0:	00010201 	andeq	r0, r1, r1, lsl #4
    f1a4:	001f640a 	andseq	r6, pc, sl, lsl #8
    f1a8:	a27b0700 	rsbsge	r0, fp, #0, 14
    f1ac:	01000000 	mrseq	r0, (UNDEF: 0)
    f1b0:	00000001 	andeq	r0, r0, r1
    f1b4:	7e070109 	adfvcs	f0, f7, #1.0
    f1b8:	0000026d 	andeq	r0, r0, sp, ror #4
    f1bc:	0025c60a 	eoreq	ip, r5, sl, lsl #12
    f1c0:	a27f0700 	rsbsge	r0, pc, #0, 14
    f1c4:	01000000 	mrseq	r0, (UNDEF: 0)
    f1c8:	0a000404 	beq	101e0 <__exidx_end+0xa5e0>
    f1cc:	0000271a 	andeq	r2, r0, sl, lsl r7
    f1d0:	00a28007 	adceq	r8, r2, r7
    f1d4:	04010000 	streq	r0, [r1], #-0
    f1d8:	06000000 	streq	r0, [r0], -r0
    f1dc:	00010504 	andeq	r0, r1, r4, lsl #10
    f1e0:	07010900 	streq	r0, [r1, -r0, lsl #18]
    f1e4:	0002b8ac 	andeq	fp, r2, ip, lsr #17
    f1e8:	274b0a00 	strbcs	r0, [fp, -r0, lsl #20]
    f1ec:	ad070000 	stcge	0, cr0, [r7, #-0]
    f1f0:	000000a2 	andeq	r0, r0, r2, lsr #1
    f1f4:	00040401 	andeq	r0, r4, r1, lsl #8
    f1f8:	0020e90a 	eoreq	lr, r0, sl, lsl #18
    f1fc:	a2ae0700 	adcge	r0, lr, #0, 14
    f200:	01000000 	mrseq	r0, (UNDEF: 0)
    f204:	0a000301 	beq	fe10 <__exidx_end+0xa210>
    f208:	000021a9 	andeq	r2, r0, r9, lsr #3
    f20c:	00a2b007 	adceq	fp, r2, r7
    f210:	02010000 	andeq	r0, r1, #0
    f214:	640a0001 	strvs	r0, [sl], #-1
    f218:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    f21c:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    f220:	00010100 	andeq	r0, r1, r0, lsl #2
    f224:	01090000 	mrseq	r0, (UNDEF: 9)
    f228:	02dfb407 	sbcseq	fp, pc, #117440512	; 0x7000000
    f22c:	c60a0000 	strgt	r0, [sl], -r0
    f230:	07000025 	streq	r0, [r0, -r5, lsr #32]
    f234:	0000a2b5 			; <UNDEFINED> instruction: 0x0000a2b5
    f238:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f23c:	271a0a00 	ldrcs	r0, [sl, -r0, lsl #20]
    f240:	b6070000 	strlt	r0, [r7], -r0
    f244:	000000a2 	andeq	r0, r0, r2, lsr #1
    f248:	00000401 	andeq	r0, r0, r1, lsl #8
    f24c:	07020900 	streq	r0, [r2, -r0, lsl #18]
    f250:	000324c2 	andeq	r2, r3, r2, asr #9
    f254:	219c0a00 	orrscs	r0, ip, r0, lsl #20
    f258:	c3070000 	movwgt	r0, #28672	; 0x7000
    f25c:	000000b8 	strheq	r0, [r0], -r8
    f260:	000d0302 	andeq	r0, sp, r2, lsl #6
    f264:	00213b0a 	eoreq	r3, r1, sl, lsl #22
    f268:	b8c90700 	stmialt	r9, {r8, r9, sl}^
    f26c:	02000000 	andeq	r0, r0, #0
    f270:	0a000c01 	beq	1227c <__exidx_end+0xc67c>
    f274:	000020db 	ldrdeq	r2, [r0], -fp
    f278:	00b8cb07 	adcseq	ip, r8, r7, lsl #22
    f27c:	06020000 	streq	r0, [r2], -r0
    f280:	da0a0006 	ble	28f2a0 <__ccfg+0x26f2f8>
    f284:	07000023 	streq	r0, [r0, -r3, lsr #32]
    f288:	0000b8d2 	ldrdeq	fp, [r0], -r2
    f28c:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    f290:	04060000 	streq	r0, [r6], #-0
    f294:	000000ce 	andeq	r0, r0, lr, asr #1
    f298:	00332b03 	eorseq	r2, r3, r3, lsl #22
    f29c:	35420800 	strbcc	r0, [r2, #-2048]	; 0xfffff800
    f2a0:	0b000003 	bleq	f2b4 <__exidx_end+0x96b4>
    f2a4:	000033bb 			; <UNDEFINED> instruction: 0x000033bb
    f2a8:	01c10820 	biceq	r0, r1, r0, lsr #16
    f2ac:	000003f9 	strdeq	r0, [r0], -r9
    f2b0:	001ef50c 	andseq	pc, lr, ip, lsl #10
    f2b4:	01c20800 	biceq	r0, r2, r0, lsl #16
    f2b8:	000000b8 	strheq	r0, [r0], -r8
    f2bc:	07680c00 	strbeq	r0, [r8, -r0, lsl #24]!
    f2c0:	c3080000 	movwgt	r0, #32768	; 0x8000
    f2c4:	0000b801 	andeq	fp, r0, r1, lsl #16
    f2c8:	680c0200 	stmdavs	ip, {r9}
    f2cc:	08000022 	stmdaeq	r0, {r1, r5}
    f2d0:	026d01c6 	rsbeq	r0, sp, #-2147483599	; 0x80000031
    f2d4:	0c040000 	stceq	0, cr0, [r4], {-0}
    f2d8:	00001ff7 	strdeq	r1, [r0], -r7
    f2dc:	f401c708 	vst1.8	{d12}, [r1], r8
    f2e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f2e4:	0022980c 	eoreq	r9, r2, ip, lsl #16
    f2e8:	01cf0800 	biceq	r0, pc, r0, lsl #16
    f2ec:	000004ef 	andeq	r0, r0, pc, ror #9
    f2f0:	21e20c0c 	mvncs	r0, ip, lsl #24
    f2f4:	d3080000 	movwle	r0, #32768	; 0x8000
    f2f8:	00053901 	andeq	r3, r5, r1, lsl #18
    f2fc:	ea0c0d00 	b	312704 <__ccfg+0x2f275c>
    f300:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    f304:	056301d9 	strbeq	r0, [r3, #-473]!	; 0xfffffe27
    f308:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    f30c:	00002251 	andeq	r2, r0, r1, asr r2
    f310:	8d01de08 	stchi	14, cr13, [r1, #-32]	; 0xffffffe0
    f314:	10000005 	andne	r0, r0, r5
    f318:	0020800c 	eoreq	r8, r0, ip
    f31c:	01df0800 	bicseq	r0, pc, r0, lsl #16
    f320:	000000a2 	andeq	r0, r0, r2, lsr #1
    f324:	23140c14 	tstcs	r4, #20, 24	; 0x1400
    f328:	e7080000 	str	r0, [r8, -r0]
    f32c:	0005b701 	andeq	fp, r5, r1, lsl #14
    f330:	ec0c1500 	cfstr32	mvfx1, [ip], {-0}
    f334:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f338:	05e101fb 	strbeq	r0, [r1, #507]!	; 0x1fb
    f33c:	0c160000 	ldceq	0, cr0, [r6], {-0}
    f340:	0000145f 	andeq	r1, r0, pc, asr r4
    f344:	3b020e08 	blcc	92b6c <__ccfg+0x72bc4>
    f348:	18000006 	stmdane	r0, {r1, r2}
    f34c:	0020780c 	eoreq	r7, r0, ip, lsl #16
    f350:	020f0800 	andeq	r0, pc, #0, 16
    f354:	000000b8 	strheq	r0, [r0], -r8
    f358:	24b60c1a 	ldrtcs	r0, [r6], #3098	; 0xc1a
    f35c:	10080000 	andne	r0, r8, r0
    f360:	00032402 	andeq	r2, r3, r2, lsl #8
    f364:	03001c00 	movweq	r1, #3072	; 0xc00
    f368:	00002456 	andeq	r2, r0, r6, asr r4
    f36c:	04044308 	streq	r4, [r4], #-776	; 0xfffffcf8
    f370:	370b0000 	strcc	r0, [fp, -r0]
    f374:	28000024 	stmdacs	r0, {r2, r5}
    f378:	ef021a08 	svc	0x00021a08
    f37c:	0c000004 	stceq	0, cr0, [r0], {4}
    f380:	00001ef5 	strdeq	r1, [r0], -r5
    f384:	b8021b08 	stmdalt	r2, {r3, r8, r9, fp, ip}
    f388:	00000000 	andeq	r0, r0, r0
    f38c:	0007680c 	andeq	r6, r7, ip, lsl #16
    f390:	021d0800 	andseq	r0, sp, #0, 16
    f394:	000000b8 	strheq	r0, [r0], -r8
    f398:	22680c02 	rsbcs	r0, r8, #512	; 0x200
    f39c:	20080000 	andcs	r0, r8, r0
    f3a0:	00026d02 	andeq	r6, r2, r2, lsl #26
    f3a4:	f70c0400 			; <UNDEFINED> instruction: 0xf70c0400
    f3a8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f3ac:	00f40221 	rscseq	r0, r4, r1, lsr #4
    f3b0:	0c080000 	stceq	0, cr0, [r8], {-0}
    f3b4:	00002298 	muleq	r0, r8, r2
    f3b8:	85022908 	strhi	r2, [r2, #-2312]	; 0xfffff6f8
    f3bc:	0c000006 	stceq	0, cr0, [r0], {6}
    f3c0:	0021e20c 	eoreq	lr, r1, ip, lsl #4
    f3c4:	022d0800 	eoreq	r0, sp, #0, 16
    f3c8:	000006cf 	andeq	r0, r0, pc, asr #13
    f3cc:	1eea0c0d 	cdpne	12, 14, cr0, cr10, cr13, {0}
    f3d0:	33080000 	movwcc	r0, #32768	; 0x8000
    f3d4:	0006f902 	andeq	pc, r6, r2, lsl #18
    f3d8:	510c0e00 	tstpl	ip, r0, lsl #28
    f3dc:	08000022 	stmdaeq	r0, {r1, r5}
    f3e0:	07230238 			; <UNDEFINED> instruction: 0x07230238
    f3e4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    f3e8:	00002080 	andeq	r2, r0, r0, lsl #1
    f3ec:	a2023908 	andge	r3, r2, #8, 18	; 0x20000
    f3f0:	14000000 	strne	r0, [r0], #-0
    f3f4:	0023140c 	eoreq	r1, r3, ip, lsl #8
    f3f8:	02410800 	subeq	r0, r1, #0, 16
    f3fc:	0000074d 	andeq	r0, r0, sp, asr #14
    f400:	1fec0c15 	svcne	0x00ec0c15
    f404:	55080000 	strpl	r0, [r8, #-0]
    f408:	00077702 	andeq	r7, r7, r2, lsl #14
    f40c:	5f0c1600 	svcpl	0x000c1600
    f410:	08000014 	stmdaeq	r0, {r2, r4}
    f414:	07d10268 	ldrbeq	r0, [r1, r8, ror #4]
    f418:	0c180000 	ldceq	0, cr0, [r8], {-0}
    f41c:	00002078 	andeq	r2, r0, r8, ror r0
    f420:	b8026908 	stmdalt	r2, {r3, r8, fp, sp, lr}
    f424:	1a000000 	bne	f42c <__exidx_end+0x982c>
    f428:	0024b60c 	eoreq	fp, r4, ip, lsl #12
    f42c:	026a0800 	rsbeq	r0, sl, #0, 16
    f430:	00000324 	andeq	r0, r0, r4, lsr #6
    f434:	1f270c1c 	svcne	0x00270c1c
    f438:	6c080000 	stcvs	0, cr0, [r8], {-0}
    f43c:	0000b802 	andeq	fp, r0, r2, lsl #16
    f440:	700c2000 	andvc	r2, ip, r0
    f444:	08000022 	stmdaeq	r0, {r1, r5}
    f448:	00ad0270 	adceq	r0, sp, r0, ror r2
    f44c:	0c220000 	stceq	0, cr0, [r2], #-0
    f450:	000023ae 	andeq	r2, r0, lr, lsr #7
    f454:	a2027308 	andge	r7, r2, #8, 6	; 0x20000000
    f458:	24000000 	strcs	r0, [r0], #-0
    f45c:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f460:	053901c8 	ldreq	r0, [r9, #-456]!	; 0xfffffe38
    f464:	4b0e0000 	blmi	38f46c <__ccfg+0x36f4c4>
    f468:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f46c:	00a201c9 	adceq	r0, r2, r9, asr #3
    f470:	04010000 	streq	r0, [r1], #-0
    f474:	e90e0004 	stmdb	lr, {r2}
    f478:	08000020 	stmdaeq	r0, {r5}
    f47c:	00a201ca 	adceq	r0, r2, sl, asr #3
    f480:	01010000 	mrseq	r0, (UNDEF: 1)
    f484:	a90e0003 	stmdbge	lr, {r0, r1}
    f488:	08000021 	stmdaeq	r0, {r0, r5}
    f48c:	00a201cc 	adceq	r0, r2, ip, asr #3
    f490:	02010000 	andeq	r0, r1, #0
    f494:	640e0001 	strvs	r0, [lr], #-1
    f498:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f49c:	00a201cd 	adceq	r0, r2, sp, asr #3
    f4a0:	01010000 	mrseq	r0, (UNDEF: 1)
    f4a4:	0d000000 	stceq	0, cr0, [r0, #-0]
    f4a8:	01d00801 	bicseq	r0, r0, r1, lsl #16
    f4ac:	00000563 	andeq	r0, r0, r3, ror #10
    f4b0:	0025c60e 	eoreq	ip, r5, lr, lsl #12
    f4b4:	01d10800 	bicseq	r0, r1, r0, lsl #16
    f4b8:	000000a2 	andeq	r0, r0, r2, lsr #1
    f4bc:	00040401 	andeq	r0, r4, r1, lsl #8
    f4c0:	00271a0e 	eoreq	r1, r7, lr, lsl #20
    f4c4:	01d20800 	bicseq	r0, r2, r0, lsl #16
    f4c8:	000000a2 	andeq	r0, r0, r2, lsr #1
    f4cc:	00000401 	andeq	r0, r0, r1, lsl #8
    f4d0:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f4d4:	058d01d4 	streq	r0, [sp, #468]	; 0x1d4
    f4d8:	010e0000 	mrseq	r0, (UNDEF: 14)
    f4dc:	08000022 	stmdaeq	r0, {r1, r5}
    f4e0:	00b801d5 	ldrsbteq	r0, [r8], r5
    f4e4:	03020000 	movweq	r0, #8192	; 0x2000
    f4e8:	fd0e000d 	stc2	0, cr0, [lr, #-52]	; 0xffffffcc
    f4ec:	08000026 	stmdaeq	r0, {r1, r2, r5}
    f4f0:	00b801d8 	ldrsbteq	r0, [r8], r8
    f4f4:	0d020000 	stceq	0, cr0, [r2, #-0]
    f4f8:	0d000000 	stceq	0, cr0, [r0, #-0]
    f4fc:	01da0804 	bicseq	r0, sl, r4, lsl #16
    f500:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    f504:	0023960e 	eoreq	r9, r3, lr, lsl #12
    f508:	01db0800 	bicseq	r0, fp, r0, lsl #16
    f50c:	000000ce 	andeq	r0, r0, lr, asr #1
    f510:	001c0404 	andseq	r0, ip, r4, lsl #8
    f514:	0024a60e 	eoreq	sl, r4, lr, lsl #12
    f518:	01dd0800 	bicseq	r0, sp, r0, lsl #16
    f51c:	000000ce 	andeq	r0, r0, lr, asr #1
    f520:	00031504 	andeq	r1, r3, r4, lsl #10
    f524:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f528:	05e101e0 	strbeq	r0, [r1, #480]!	; 0x1e0
    f52c:	f20e0000 	vhadd.s8	d0, d14, d0
    f530:	08000025 	stmdaeq	r0, {r0, r2, r5}
    f534:	00a201e1 	adceq	r0, r2, r1, ror #3
    f538:	06010000 	streq	r0, [r1], -r0
    f53c:	bc0e0002 	stclt	0, cr0, [lr], {2}
    f540:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f544:	00a201e3 	adceq	r0, r2, r3, ror #3
    f548:	02010000 	andeq	r0, r1, #0
    f54c:	0d000000 	stceq	0, cr0, [r0, #-0]
    f550:	01e80802 	mvneq	r0, r2, lsl #16
    f554:	0000063b 	andeq	r0, r0, fp, lsr r6
    f558:	00239f0e 	eoreq	r9, r3, lr, lsl #30
    f55c:	01e90800 	mvneq	r0, r0, lsl #16
    f560:	000000b8 	strheq	r0, [r0], -r8
    f564:	000a0602 	andeq	r0, sl, r2, lsl #12
    f568:	00223b0e 	eoreq	r3, r2, lr, lsl #22
    f56c:	01ea0800 	mvneq	r0, r0, lsl #16
    f570:	000000b8 	strheq	r0, [r0], -r8
    f574:	00090102 	andeq	r0, r9, r2, lsl #2
    f578:	0024070e 	eoreq	r0, r4, lr, lsl #14
    f57c:	01ec0800 	mvneq	r0, r0, lsl #16
    f580:	000000b8 	strheq	r0, [r0], -r8
    f584:	00080102 	andeq	r0, r8, r2, lsl #2
    f588:	001fa40e 	andseq	sl, pc, lr, lsl #8
    f58c:	01ee0800 	mvneq	r0, r0, lsl #16
    f590:	000000b8 	strheq	r0, [r0], -r8
    f594:	00040402 	andeq	r0, r4, r2, lsl #8
    f598:	001f470e 	andseq	r4, pc, lr, lsl #14
    f59c:	01f30800 	mvnseq	r0, r0, lsl #16
    f5a0:	000000b8 	strheq	r0, [r0], -r8
    f5a4:	00000302 	andeq	r0, r0, r2, lsl #6
    f5a8:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f5ac:	068501fc 			; <UNDEFINED> instruction: 0x068501fc
    f5b0:	9c0e0000 	stcls	0, cr0, [lr], {-0}
    f5b4:	08000021 	stmdaeq	r0, {r0, r5}
    f5b8:	00b801fd 	ldrshteq	r0, [r8], sp
    f5bc:	03020000 	movweq	r0, #8192	; 0x2000
    f5c0:	3b0e000d 	blcc	38f5fc <__ccfg+0x36f654>
    f5c4:	08000021 	stmdaeq	r0, {r0, r5}
    f5c8:	00b80203 	adcseq	r0, r8, r3, lsl #4
    f5cc:	01020000 	mrseq	r0, (UNDEF: 2)
    f5d0:	db0e000c 	blle	38f608 <__ccfg+0x36f660>
    f5d4:	08000020 	stmdaeq	r0, {r5}
    f5d8:	00b80205 	adcseq	r0, r8, r5, lsl #4
    f5dc:	06020000 	streq	r0, [r2], -r0
    f5e0:	da0e0006 	ble	38f600 <__ccfg+0x36f658>
    f5e4:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f5e8:	00b8020c 	adcseq	r0, r8, ip, lsl #4
    f5ec:	01020000 	mrseq	r0, (UNDEF: 2)
    f5f0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    f5f4:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    f5f8:	000006cf 	andeq	r0, r0, pc, asr #13
    f5fc:	00274b0e 	eoreq	r4, r7, lr, lsl #22
    f600:	02230800 	eoreq	r0, r3, #0, 16
    f604:	000000a2 	andeq	r0, r0, r2, lsr #1
    f608:	00040401 	andeq	r0, r4, r1, lsl #8
    f60c:	0020e90e 	eoreq	lr, r0, lr, lsl #18
    f610:	02240800 	eoreq	r0, r4, #0, 16
    f614:	000000a2 	andeq	r0, r0, r2, lsr #1
    f618:	00030101 	andeq	r0, r3, r1, lsl #2
    f61c:	0021a90e 	eoreq	sl, r1, lr, lsl #18
    f620:	02260800 	eoreq	r0, r6, #0, 16
    f624:	000000a2 	andeq	r0, r0, r2, lsr #1
    f628:	00010201 	andeq	r0, r1, r1, lsl #4
    f62c:	001f640e 	andseq	r6, pc, lr, lsl #8
    f630:	02270800 	eoreq	r0, r7, #0, 16
    f634:	000000a2 	andeq	r0, r0, r2, lsr #1
    f638:	00000101 	andeq	r0, r0, r1, lsl #2
    f63c:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    f640:	06f9022a 	ldrbteq	r0, [r9], sl, lsr #4
    f644:	c60e0000 	strgt	r0, [lr], -r0
    f648:	08000025 	stmdaeq	r0, {r0, r2, r5}
    f64c:	00a2022b 	adceq	r0, r2, fp, lsr #4
    f650:	04010000 	streq	r0, [r1], #-0
    f654:	1a0e0004 	bne	38f66c <__ccfg+0x36f6c4>
    f658:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    f65c:	00a2022c 	adceq	r0, r2, ip, lsr #4
    f660:	04010000 	streq	r0, [r1], #-0
    f664:	0d000000 	stceq	0, cr0, [r0, #-0]
    f668:	022e0802 	eoreq	r0, lr, #131072	; 0x20000
    f66c:	00000723 	andeq	r0, r0, r3, lsr #14
    f670:	0022010e 	eoreq	r0, r2, lr, lsl #2
    f674:	022f0800 	eoreq	r0, pc, #0, 16
    f678:	000000b8 	strheq	r0, [r0], -r8
    f67c:	000d0302 	andeq	r0, sp, r2, lsl #6
    f680:	0026fd0e 	eoreq	pc, r6, lr, lsl #26
    f684:	02320800 	eorseq	r0, r2, #0, 16
    f688:	000000b8 	strheq	r0, [r0], -r8
    f68c:	00000d02 	andeq	r0, r0, r2, lsl #26
    f690:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    f694:	074d0234 	smlaldxeq	r0, sp, r4, r2
    f698:	960e0000 	strls	r0, [lr], -r0
    f69c:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f6a0:	00ce0235 	sbceq	r0, lr, r5, lsr r2
    f6a4:	04040000 	streq	r0, [r4], #-0
    f6a8:	a60e001c 			; <UNDEFINED> instruction: 0xa60e001c
    f6ac:	08000024 	stmdaeq	r0, {r2, r5}
    f6b0:	00ce0237 	sbceq	r0, lr, r7, lsr r2
    f6b4:	15040000 	strne	r0, [r4, #-0]
    f6b8:	0d000003 	stceq	0, cr0, [r0, #-12]
    f6bc:	023a0801 	eorseq	r0, sl, #65536	; 0x10000
    f6c0:	00000777 	andeq	r0, r0, r7, ror r7
    f6c4:	0025f20e 	eoreq	pc, r5, lr, lsl #4
    f6c8:	023b0800 	eorseq	r0, fp, #0, 16
    f6cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6d0:	00020601 	andeq	r0, r2, r1, lsl #12
    f6d4:	001fbc0e 	andseq	fp, pc, lr, lsl #24
    f6d8:	023d0800 	eorseq	r0, sp, #0, 16
    f6dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f6e0:	00000201 	andeq	r0, r0, r1, lsl #4
    f6e4:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    f6e8:	07d10242 	ldrbeq	r0, [r1, r2, asr #4]
    f6ec:	9f0e0000 	svcls	0x000e0000
    f6f0:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f6f4:	00b80243 	adcseq	r0, r8, r3, asr #4
    f6f8:	06020000 	streq	r0, [r2], -r0
    f6fc:	3b0e000a 	blcc	38f72c <__ccfg+0x36f784>
    f700:	08000022 	stmdaeq	r0, {r1, r5}
    f704:	00b80244 	adcseq	r0, r8, r4, asr #4
    f708:	01020000 	mrseq	r0, (UNDEF: 2)
    f70c:	070e0009 	streq	r0, [lr, -r9]
    f710:	08000024 	stmdaeq	r0, {r2, r5}
    f714:	00b80246 	adcseq	r0, r8, r6, asr #4
    f718:	01020000 	mrseq	r0, (UNDEF: 2)
    f71c:	a40e0008 	strge	r0, [lr], #-8
    f720:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f724:	00b80248 	adcseq	r0, r8, r8, asr #4
    f728:	04020000 	streq	r0, [r2], #-0
    f72c:	470e0004 	strmi	r0, [lr, -r4]
    f730:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f734:	00b8024d 	adcseq	r0, r8, sp, asr #4
    f738:	03020000 	movweq	r0, #8192	; 0x2000
    f73c:	0d000000 	stceq	0, cr0, [r0, #-0]
    f740:	02560802 	subseq	r0, r6, #131072	; 0x20000
    f744:	0000081b 	andeq	r0, r0, fp, lsl r8
    f748:	00219c0e 	eoreq	r9, r1, lr, lsl #24
    f74c:	02570800 	subseq	r0, r7, #0, 16
    f750:	000000b8 	strheq	r0, [r0], -r8
    f754:	000d0302 	andeq	r0, sp, r2, lsl #6
    f758:	00213b0e 	eoreq	r3, r1, lr, lsl #22
    f75c:	025d0800 	subseq	r0, sp, #0, 16
    f760:	000000b8 	strheq	r0, [r0], -r8
    f764:	000c0102 	andeq	r0, ip, r2, lsl #2
    f768:	0020db0e 	eoreq	sp, r0, lr, lsl #22
    f76c:	025f0800 	subseq	r0, pc, #0, 16
    f770:	000000b8 	strheq	r0, [r0], -r8
    f774:	00060602 	andeq	r0, r6, r2, lsl #12
    f778:	0023da0e 	eoreq	sp, r3, lr, lsl #20
    f77c:	02660800 	rsbeq	r0, r6, #0, 16
    f780:	000000b8 	strheq	r0, [r0], -r8
    f784:	00050102 	andeq	r0, r5, r2, lsl #2
    f788:	02100900 	andseq	r0, r0, #0, 18
    f78c:	00085448 	andeq	r5, r8, r8, asr #8
    f790:	21610800 	cmncs	r1, r0, lsl #16
    f794:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    f798:	000000ce 	andeq	r0, r0, lr, asr #1
    f79c:	20c20800 	sbccs	r0, r2, r0, lsl #16
    f7a0:	4a020000 	bmi	8f7a8 <__ccfg+0x6f800>
    f7a4:	000000ce 	andeq	r0, r0, lr, asr #1
    f7a8:	250d0804 	strcs	r0, [sp, #-2052]	; 0xfffff7fc
    f7ac:	4b020000 	blmi	8f7b4 <__ccfg+0x6f80c>
    f7b0:	000000ce 	andeq	r0, r0, lr, asr #1
    f7b4:	26600808 	strbtcs	r0, [r0], -r8, lsl #16
    f7b8:	4c020000 	stcmi	0, cr0, [r2], {-0}
    f7bc:	000000ce 	andeq	r0, r0, lr, asr #1
    f7c0:	6d03000c 	stcvs	0, cr0, [r3, #-48]	; 0xffffffd0
    f7c4:	0200001f 	andeq	r0, r0, #31
    f7c8:	00081b4d 	andeq	r1, r8, sp, asr #22
    f7cc:	346f0f00 	strbtcc	r0, [pc], #-3840	; f7d4 <__exidx_end+0x9bd4>
    f7d0:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    f7d4:	d1100301 	tstle	r0, r1, lsl #6
    f7d8:	02000032 	andeq	r0, r0, #50	; 0x32
    f7dc:	00ce0114 	sbceq	r0, lr, r4, lsl r1
    f7e0:	00000000 	andeq	r0, r0, r0
    f7e4:	00140000 	andseq	r0, r4, r0
    f7e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    f7ec:	00000890 	muleq	r0, r0, r8
    f7f0:	00338911 	eorseq	r8, r3, r1, lsl r9
    f7f4:	ce6a0100 	powgte	f0, f2, f0
    f7f8:	01000000 	mrseq	r0, (UNDEF: 0)
    f7fc:	57100050 			; <UNDEFINED> instruction: 0x57100050
    f800:	02000034 	andeq	r0, r0, #52	; 0x34
    f804:	00ce014c 	sbceq	r0, lr, ip, asr #2
    f808:	3ac80000 	bcc	ff20f810 <_estack+0xdf20a810>
    f80c:	00280000 	eoreq	r0, r8, r0
    f810:	9c010000 	stcls	0, cr0, [r1], {-0}
    f814:	000008d8 	ldrdeq	r0, [r0], -r8
    f818:	704f7012 	subvc	r7, pc, r2, lsl r0	; <UNPREDICTABLE>
    f81c:	ce7a0100 	rpwgte	f0, f2, f0
    f820:	ea000000 	b	f828 <__exidx_end+0x9c28>
    f824:	1300003b 	movwne	r0, #59	; 0x3b
    f828:	0000085f 	andeq	r0, r0, pc, asr r8
    f82c:	00003ad0 	ldrdeq	r3, [r0], -r0
    f830:	00000004 	andeq	r0, r0, r4
    f834:	5f137e01 	svcpl	0x00137e01
    f838:	dc000008 	stcle	0, cr0, [r0], {8}
    f83c:	0600003a 			; <UNDEFINED> instruction: 0x0600003a
    f840:	01000000 	mrseq	r0, (UNDEF: 0)
    f844:	59140083 	ldmdbpl	r4, {r0, r1, r7}
    f848:	02000033 	andeq	r0, r0, #51	; 0x33
    f84c:	3af00154 	bcc	ffc0fda4 <_estack+0xdfc0ada4>
    f850:	004c0000 	subeq	r0, ip, r0
    f854:	9c010000 	stcls	0, cr0, [r1], {-0}
    f858:	00348615 	eorseq	r8, r4, r5, lsl r6
    f85c:	015c0200 	cmpeq	ip, r0, lsl #4
    f860:	00003b3c 	andeq	r3, r0, ip, lsr fp
    f864:	00000150 	andeq	r0, r0, r0, asr r1
    f868:	092a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}
    f86c:	80160000 	andshi	r0, r6, r0
    f870:	01000033 	tsteq	r0, r3, lsr r0
    f874:	00026da4 	andeq	r6, r2, r4, lsr #27
    f878:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    f87c:	000033d6 	ldrdeq	r3, [r0], -r6
    f880:	092aa401 	stmdbeq	sl!, {r0, sl, sp, pc}
    f884:	51010000 	mrspl	r0, (UNDEF: 1)
    f888:	00347e17 	eorseq	r7, r4, r7, lsl lr
    f88c:	94a60100 	strtls	r0, [r6], #256	; 0x100
    f890:	0b000000 	bleq	f898 <__exidx_end+0x9c98>
    f894:	0000003c 	andeq	r0, r0, ip, lsr r0
    f898:	08540406 	ldmdaeq	r4, {r1, r2, sl}^
    f89c:	48150000 	ldmdami	r5, {}	; <UNPREDICTABLE>
    f8a0:	02000034 	andeq	r0, r0, #52	; 0x34
    f8a4:	3c8c016c 	stfccs	f0, [ip], {108}	; 0x6c
    f8a8:	01180000 	tsteq	r8, r0
    f8ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    f8b0:	000009ac 	andeq	r0, r0, ip, lsr #19
    f8b4:	00338018 	eorseq	r8, r3, r8, lsl r0
    f8b8:	6df30100 	ldfvse	f0, [r3]
    f8bc:	29000002 	stmdbcs	r0, {r1}
    f8c0:	1700003c 	smladxne	r0, ip, r0, r0
    f8c4:	0000347e 	andeq	r3, r0, lr, ror r4
    f8c8:	00c3f501 	sbceq	pc, r3, r1, lsl #10
    f8cc:	3c4a0000 	marcc	acc0, r0, sl
    f8d0:	3c170000 	ldccc	0, cr0, [r7], {-0}
    f8d4:	01000034 	tsteq	r0, r4, lsr r0
    f8d8:	0000cef6 	strdeq	ip, [r0], -r6
    f8dc:	003c9900 	eorseq	r9, ip, r0, lsl #18
    f8e0:	32ec1700 	rsccc	r1, ip, #0, 14
    f8e4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    f8e8:	00000324 	andeq	r0, r0, r4, lsr #6
    f8ec:	00003ce3 	andeq	r3, r0, r3, ror #25
    f8f0:	0032fd19 	eorseq	pc, r2, r9, lsl sp	; <UNPREDICTABLE>
    f8f4:	c3f80100 	mvnsgt	r0, #0, 2
    f8f8:	17000000 	strne	r0, [r0, -r0]
    f8fc:	000033de 	ldrdeq	r3, [r0], -lr
    f900:	00cef901 	sbceq	pc, lr, r1, lsl #18
    f904:	3d260000 	stccc	0, cr0, [r6, #-0]
    f908:	71170000 	tstvc	r7, r0
    f90c:	01000033 	tsteq	r0, r3, lsr r0
    f910:	0000cefa 	strdeq	ip, [r0], -sl
    f914:	003d7e00 	eorseq	r7, sp, r0, lsl #28
    f918:	46150000 	ldrmi	r0, [r5], -r0
    f91c:	02000033 	andeq	r0, r0, #51	; 0x33
    f920:	3da40164 	stfccs	f0, [r4, #400]!	; 0x190
    f924:	00200000 	eoreq	r0, r0, r0
    f928:	9c010000 	stcls	0, cr0, [r1], {-0}
    f92c:	000009d3 	ldrdeq	r0, [r0], -r3
    f930:	0033d61a 	eorseq	sp, r3, sl, lsl r6
    f934:	01770100 	cmneq	r7, r0, lsl #2
    f938:	0000092a 	andeq	r0, r0, sl, lsr #18
    f93c:	00003db4 			; <UNDEFINED> instruction: 0x00003db4
    f940:	33a41500 			; <UNDEFINED> instruction: 0x33a41500
    f944:	74020000 	strvc	r0, [r2], #-0
    f948:	00000001 	andeq	r0, r0, r1
    f94c:	00006000 	andeq	r6, r0, r0
    f950:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    f954:	1b00000a 	blne	f984 <__exidx_end+0x9d84>
    f958:	0000263e 	andeq	r2, r0, lr, lsr r6
    f95c:	ff018401 			; <UNDEFINED> instruction: 0xff018401
    f960:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    f964:	1b210003 	blne	84f978 <__ccfg+0x82f9d0>
    f968:	000020fc 	strdeq	r2, [r0], -ip
    f96c:	24018501 	strcs	r8, [r1], #-1281	; 0xfffffaff
    f970:	bc000003 	stclt	0, cr0, [r0], {3}
    f974:	1c210003 	stcne	0, cr0, [r1], #-12
    f978:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    f97c:	00009401 	andeq	r9, r0, r1, lsl #8
    f980:	003de200 	eorseq	lr, sp, r0, lsl #4
    f984:	00001d00 	andeq	r1, r0, r0, lsl #26
    f988:	0a9c0000 	beq	fe70f990 <_estack+0xde70a990>
    f98c:	011e0000 	tsteq	lr, r0
    f990:	84080252 	strhi	r0, [r8], #-594	; 0xfffffdae
    f994:	0251011e 	subseq	r0, r1, #-2147483641	; 0x80000007
    f998:	011eff08 	tsteq	lr, r8, lsl #30	; <UNPREDICTABLE>
    f99c:	380c0550 	stmdacc	ip, {r4, r6, r8, sl}
    f9a0:	00210003 	eoreq	r0, r1, r3
    f9a4:	330c1500 	movwcc	r1, #50432	; 0xc500
    f9a8:	7c020000 	stcvc	0, cr0, [r2], {-0}
    f9ac:	003dc401 	eorseq	ip, sp, r1, lsl #8
    f9b0:	00001c00 	andeq	r1, r0, r0, lsl #24
    f9b4:	5c9c0100 	ldfpls	f0, [ip], {0}
    f9b8:	1f00000a 	svcne	0x0000000a
    f9bc:	00003434 	andeq	r3, r0, r4, lsr r4
    f9c0:	5c019601 	stcpl	6, cr9, [r1], {1}
    f9c4:	0100000a 	tsteq	r0, sl
    f9c8:	01020050 	qaddeq	r0, r0, r2
    f9cc:	000c9702 	andeq	r9, ip, r2, lsl #14
    f9d0:	00b82000 	adcseq	r2, r8, r0
    f9d4:	0a730000 	beq	1ccf9dc <__ccfg+0x1cafa34>
    f9d8:	e4210000 	strt	r0, [r1], #-0
    f9dc:	0b000000 	bleq	f9e4 <__exidx_end+0x9de4>
    f9e0:	33912200 	orrscc	r2, r1, #0, 4
    f9e4:	52010000 	andpl	r0, r1, #0
    f9e8:	00000a97 	muleq	r0, r7, sl
    f9ec:	3d3bc318 	ldccc	3, cr12, [fp, #-96]!	; 0xffffffa0
    f9f0:	713a5d3a 	teqvc	sl, sl, lsr sp
    f9f4:	8f0aa13a 	svchi	0x000aa13a
    f9f8:	b33b0f3a 	teqlt	fp, #58, 30	; 0xe8
    f9fc:	855e4909 	ldrbhi	r4, [lr, #-2313]	; 0xfffff6f7
    fa00:	853b2f0a 	ldrhi	r2, [fp, #-3850]!	; 0xfffff0f6
    fa04:	0a63233b 	beq	18d86f8 <__ccfg+0x18b8750>
    fa08:	84240000 	strthi	r0, [r4], #-0
    fa0c:	09000016 	stmdbeq	r0, {r1, r2, r4}
    fa10:	0000eb19 	andeq	lr, r0, r9, lsl fp
    fa14:	00eb2500 	rsceq	r2, fp, r0, lsl #10
    fa18:	94250000 	strtls	r0, [r5], #-0
    fa1c:	25000000 	strcs	r0, [r0, #-0]
    fa20:	000000d9 	ldrdeq	r0, [r0], -r9
    fa24:	02070000 	andeq	r0, r7, #0
    fa28:	00040000 	andeq	r0, r4, r0
    fa2c:	0000380d 	andeq	r3, r0, sp, lsl #16
    fa30:	2a210104 	bcs	84fe48 <__ccfg+0x82fea0>
    fa34:	56010000 	strpl	r0, [r1], -r0
    fa38:	e8000035 	stmda	r0, {r0, r2, r4, r5}
    fa3c:	1000002a 	andne	r0, r0, sl, lsr #32
    fa40:	00000012 	andeq	r0, r0, r2, lsl r0
    fa44:	7f000000 	svcvc	0x00000000
    fa48:	02000080 	andeq	r0, r0, #128	; 0x80
    fa4c:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
    fa50:	01020000 	mrseq	r0, (UNDEF: 2)
    fa54:	000c4b08 	andeq	r4, ip, r8, lsl #22
    fa58:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    fa5c:	00000a5b 	andeq	r0, r0, fp, asr sl
    fa60:	48070202 	stmdami	r7, {r1, r9}
    fa64:	0200000d 	andeq	r0, r0, #13
    fa68:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
    fa6c:	94030000 	strls	r0, [r3], #-0
    fa70:	03000029 	movweq	r0, #41	; 0x29
    fa74:	00005341 	andeq	r5, r0, r1, asr #6
    fa78:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fa7c:	0000041d 	andeq	r0, r0, sp, lsl r4
    fa80:	e8050802 	stmda	r5, {r1, fp}
    fa84:	02000007 	andeq	r0, r0, #7
    fa88:	04180708 	ldreq	r0, [r8], #-1800	; 0xfffff8f8
    fa8c:	04040000 	streq	r0, [r4], #-0
    fa90:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    fa94:	07040200 	streq	r0, [r4, -r0, lsl #4]
    fa98:	00000422 	andeq	r0, r0, r2, lsr #8
    fa9c:	00299603 	eoreq	r9, r9, r3, lsl #12
    faa0:	48200400 	stmdami	r0!, {sl}
    faa4:	05000000 	streq	r0, [r0, #-0]
    faa8:	000035b3 			; <UNDEFINED> instruction: 0x000035b3
    faac:	03033002 	movweq	r3, #12290	; 0x3002
    fab0:	00361e06 	eorseq	r1, r6, r6, lsl #28
    fab4:	01fd0100 	mvnseq	r0, r0, lsl #2
    fab8:	0035c605 	eorseq	ip, r5, r5, lsl #12
    fabc:	01820100 	orreq	r0, r2, r0, lsl #2
    fac0:	34a10701 	strtcc	r0, [r1], #1793	; 0x701
    fac4:	0d010000 	stceq	0, cr0, [r1, #-0]
    fac8:	003de001 	eorseq	lr, sp, r1
    facc:	0000d400 	andeq	sp, r0, r0, lsl #8
    fad0:	6d9c0100 	ldfvss	f0, [ip]
    fad4:	08000001 	stmdaeq	r0, {r0}
    fad8:	000035a1 	andeq	r3, r0, r1, lsr #11
    fadc:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    fae0:	86000000 	strhi	r0, [r0], -r0
    fae4:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
    fae8:	0000360d 	andeq	r3, r0, sp, lsl #12
    faec:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    faf0:	b2000000 	andlt	r0, r0, #0
    faf4:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
    faf8:	0000349a 	muleq	r0, sl, r4
    fafc:	76011001 	strvc	r1, [r1], -r1
    fb00:	c5000000 	strgt	r0, [r0, #-0]
    fb04:	0a00003e 	beq	fc04 <__exidx_end+0xa004>
    fb08:	00000081 	andeq	r0, r0, r1, lsl #1
    fb0c:	00003e12 	andeq	r3, r0, r2, lsl lr
    fb10:	00000006 	andeq	r0, r0, r6
    fb14:	0b013601 	bleq	5d320 <__ccfg+0x3d378>
    fb18:	00003e38 	andeq	r3, r0, r8, lsr lr
    fb1c:	0000002a 	andeq	r0, r0, sl, lsr #32
    fb20:	0000011f 	andeq	r0, r0, pc, lsl r1
    fb24:	00369309 	eorseq	r9, r6, r9, lsl #6
    fb28:	01530100 	cmpeq	r3, r0, lsl #2
    fb2c:	00000076 	andeq	r0, r0, r6, ror r0
    fb30:	00003ede 	ldrdeq	r3, [r0], -lr
    fb34:	0035ef09 	eorseq	lr, r5, r9, lsl #30
    fb38:	01540100 	cmpeq	r4, r0, lsl #2
    fb3c:	00000076 	andeq	r0, r0, r6, ror r0
    fb40:	00003ef1 	strdeq	r3, [r0], -r1
    fb44:	3e220c00 	cdpcc	12, 2, cr0, cr2, cr0, {0}
    fb48:	01c30000 	biceq	r0, r3, r0
    fb4c:	01330000 	teqeq	r3, r0
    fb50:	010d0000 	mrseq	r0, (UNDEF: 13)
    fb54:	00740250 	rsbseq	r0, r4, r0, asr r2
    fb58:	3e2a0c00 	cdpcc	12, 2, cr0, cr10, cr0, {0}
    fb5c:	01d40000 	bicseq	r0, r4, r0
    fb60:	014d0000 	mrseq	r0, (UNDEF: 77)
    fb64:	010d0000 	mrseq	r0, (UNDEF: 13)
    fb68:	00740251 	rsbseq	r0, r4, r1, asr r2
    fb6c:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fb70:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    fb74:	00003e68 	andeq	r3, r0, r8, ror #28
    fb78:	000001ea 	andeq	r0, r0, sl, ror #3
    fb7c:	00000161 	andeq	r0, r0, r1, ror #2
    fb80:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    fb84:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    fb88:	00003e72 	andeq	r3, r0, r2, ror lr
    fb8c:	0150010d 	cmpeq	r0, sp, lsl #2
    fb90:	0f000032 	svceq	0x00000032
    fb94:	000035d9 	ldrdeq	r3, [r0], -r9
    fb98:	3eb45f07 	cdpcc	15, 11, cr5, cr4, cr7, {0}
    fb9c:	00a40000 	adceq	r0, r4, r0
    fba0:	9c010000 	stcls	0, cr0, [r1], {-0}
    fba4:	000001c3 	andeq	r0, r0, r3, asr #3
    fba8:	0035a110 	eorseq	sl, r5, r0, lsl r1
    fbac:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    fbb0:	1c000000 	stcne	0, cr0, [r0], {-0}
    fbb4:	1000003f 	andne	r0, r0, pc, lsr r0
    fbb8:	000035fa 	strdeq	r3, [r0], -sl
    fbbc:	00767301 	rsbseq	r7, r6, r1, lsl #6
    fbc0:	3f2f0000 	svccc	0x002f0000
    fbc4:	c4110000 	ldrgt	r0, [r1], #-0
    fbc8:	fb00003e 	blx	fcca <__exidx_end+0xa0ca>
    fbcc:	11000001 	tstne	r0, r1
    fbd0:	00003ed8 	ldrdeq	r3, [r0], -r8
    fbd4:	00000203 	andeq	r0, r0, r3, lsl #4
    fbd8:	003ee812 	eorseq	lr, lr, r2, lsl r8
    fbdc:	00009b00 	andeq	r9, r0, r0, lsl #22
    fbe0:	50010d00 	andpl	r0, r1, r0, lsl #26
    fbe4:	00007402 	andeq	r7, r0, r2, lsl #8
    fbe8:	34c61300 	strbcc	r1, [r6], #768	; 0x300
    fbec:	6c050000 	stcvs	0, cr0, [r5], {-0}
    fbf0:	000001d4 	ldrdeq	r0, [r0], -r4
    fbf4:	00007614 	andeq	r7, r0, r4, lsl r6
    fbf8:	f6130000 			; <UNDEFINED> instruction: 0xf6130000
    fbfc:	05000034 	streq	r0, [r0, #-52]	; 0xffffffcc
    fc00:	0001ea73 	andeq	lr, r1, r3, ror sl
    fc04:	00761400 	rsbseq	r1, r6, r0, lsl #8
    fc08:	76140000 	ldrvc	r0, [r4], -r0
    fc0c:	00000000 	andeq	r0, r0, r0
    fc10:	00352613 	eorseq	r2, r5, r3, lsl r6
    fc14:	fb7a0500 	blx	1e9101e <__ccfg+0x1e71076>
    fc18:	14000001 	strne	r0, [r0], #-1
    fc1c:	00000076 	andeq	r0, r0, r6, ror r0
    fc20:	36561500 	ldrbcc	r1, [r6], -r0, lsl #10
    fc24:	43060000 	movwmi	r0, #24576	; 0x6000
    fc28:	35731602 	ldrbcc	r1, [r3, #-1538]!	; 0xfffff9fe
    fc2c:	fd050000 	stc2	0, cr0, [r5, #-0]
    fc30:	000b1700 	andeq	r1, fp, r0, lsl #14
    fc34:	4f000400 	svcmi	0x00000400
    fc38:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    fc3c:	002a2101 	eoreq	r2, sl, r1, lsl #2
    fc40:	38d60100 	ldmcc	r6, {r8}^
    fc44:	2ae80000 	bcs	ffa0fc4c <_estack+0xdfa0ac4c>
    fc48:	12580000 	subsne	r0, r8, #0
    fc4c:	00000000 	andeq	r0, r0, r0
    fc50:	826c0000 	rsbhi	r0, ip, #0
    fc54:	01020000 	mrseq	r0, (UNDEF: 2)
    fc58:	000c4d06 	andeq	r4, ip, r6, lsl #26
    fc5c:	08010200 	stmdaeq	r1, {r9}
    fc60:	00000c4b 	andeq	r0, r0, fp, asr #24
    fc64:	5b050202 	blpl	150474 <__ccfg+0x1304cc>
    fc68:	0200000a 	andeq	r0, r0, #10
    fc6c:	0d480702 	stcleq	7, cr0, [r8, #-8]
    fc70:	81030000 	mrshi	r0, (UNDEF: 3)
    fc74:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    fc78:	00004c3f 	andeq	r4, r0, pc, lsr ip
    fc7c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    fc80:	000007ed 	andeq	r0, r0, sp, ror #15
    fc84:	00299403 	eoreq	r9, r9, r3, lsl #8
    fc88:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    fc8c:	02000000 	andeq	r0, r0, #0
    fc90:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
    fc94:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    fc98:	0007e805 	andeq	lr, r7, r5, lsl #16
    fc9c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    fca0:	00000418 	andeq	r0, r0, r8, lsl r4
    fca4:	69050404 	stmdbvs	r5, {r2, sl}
    fca8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    fcac:	04220704 	strteq	r0, [r2], #-1796	; 0xfffff8fc
    fcb0:	83030000 	movwhi	r0, #12288	; 0x3000
    fcb4:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    fcb8:	0000411f 	andeq	r4, r0, pc, lsl r1
    fcbc:	29960300 	ldmibcs	r6, {r8, r9}
    fcc0:	20050000 	andcs	r0, r5, r0
    fcc4:	00000053 	andeq	r0, r0, r3, asr r0
    fcc8:	00396905 	eorseq	r6, r9, r5, lsl #18
    fccc:	81e90200 	mvnhi	r0, r0, lsl #4
    fcd0:	03000000 	movweq	r0, #0
    fcd4:	000000be 	strheq	r0, [r0], -lr
    fcd8:	0036b906 	eorseq	fp, r6, r6, lsl #18
    fcdc:	8ce90200 	sfmhi	f0, 2, [r9]
    fce0:	07000000 	streq	r0, [r0, -r0]
    fce4:	000039c2 	andeq	r3, r0, r2, asr #19
    fce8:	0081ef02 	addeq	lr, r1, r2, lsl #30
    fcec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fcf0:	000036ee 	andeq	r3, r0, lr, ror #13
    fcf4:	008cab02 	addeq	sl, ip, r2, lsl #22
    fcf8:	e7010000 	str	r0, [r1, -r0]
    fcfc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    fd00:	000035a1 	andeq	r3, r0, r1, lsr #11
    fd04:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    fd08:	0a000000 	beq	fd10 <__exidx_end+0xa110>
    fd0c:	00003a4b 	andeq	r3, r0, fp, asr #20
    fd10:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    fd14:	00000000 	andeq	r0, r0, r0
    fd18:	0039a108 	eorseq	sl, r9, r8, lsl #2
    fd1c:	8c810200 	sfmhi	f0, 4, [r1], {0}
    fd20:	01000000 	mrseq	r0, (UNDEF: 0)
    fd24:	00000110 	andeq	r0, r0, r0, lsl r1
    fd28:	0035a109 	eorseq	sl, r5, r9, lsl #2
    fd2c:	033c0100 	teqeq	ip, #0, 2
    fd30:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd34:	003a120a 	eorseq	r1, sl, sl, lsl #4
    fd38:	033e0100 	teqeq	lr, #0, 2
    fd3c:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd40:	384f0800 	stmdacc	pc, {fp}^	; <UNPREDICTABLE>
    fd44:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    fd48:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd4c:	00013901 	andeq	r3, r1, r1, lsl #18
    fd50:	35a10900 	strcc	r0, [r1, #2304]!	; 0x900
    fd54:	4f010000 	svcmi	0x00010000
    fd58:	00008c03 	andeq	r8, r0, r3, lsl #24
    fd5c:	39860a00 	stmibcc	r6, {r9, fp}
    fd60:	51010000 	mrspl	r0, (UNDEF: 1)
    fd64:	00008c03 	andeq	r8, r0, r3, lsl #24
    fd68:	b3080000 	movwlt	r0, #32768	; 0x8000
    fd6c:	02000037 	andeq	r0, r0, #55	; 0x37
    fd70:	00008cc8 	andeq	r8, r0, r8, asr #25
    fd74:	016e0100 	cmneq	lr, r0, lsl #2
    fd78:	a1090000 	mrsge	r0, (UNDEF: 9)
    fd7c:	01000035 	tsteq	r0, r5, lsr r0
    fd80:	008c0362 	addeq	r0, ip, r2, ror #6
    fd84:	430a0000 	movwmi	r0, #40960	; 0xa000
    fd88:	01000037 	tsteq	r0, r7, lsr r0
    fd8c:	008c0364 	addeq	r0, ip, r4, ror #6
    fd90:	840a0000 	strhi	r0, [sl], #-0
    fd94:	01000038 	tsteq	r0, r8, lsr r0
    fd98:	008c0365 	addeq	r0, ip, r5, ror #6
    fd9c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fda0:	000038b6 			; <UNDEFINED> instruction: 0x000038b6
    fda4:	008cb202 	addeq	fp, ip, r2, lsl #4
    fda8:	a3010000 	movwge	r0, #4096	; 0x1000
    fdac:	09000001 	stmdbeq	r0, {r0}
    fdb0:	000035a1 	andeq	r3, r0, r1, lsr #11
    fdb4:	8c039401 	cfstrshi	mvf9, [r3], {1}
    fdb8:	0a000000 	beq	fdc0 <__exidx_end+0xa1c0>
    fdbc:	000037d2 	ldrdeq	r3, [r0], -r2
    fdc0:	8c039601 	stchi	6, cr9, [r3], {1}
    fdc4:	0a000000 	beq	fdcc <__exidx_end+0xa1cc>
    fdc8:	00003884 	andeq	r3, r0, r4, lsl #17
    fdcc:	8c039701 	stchi	7, cr9, [r3], {1}
    fdd0:	00000000 	andeq	r0, r0, r0
    fdd4:	00378108 	eorseq	r8, r7, r8, lsl #2
    fdd8:	8cb90200 	lfmhi	f0, 4, [r9]
    fddc:	01000000 	mrseq	r0, (UNDEF: 0)
    fde0:	000001cc 	andeq	r0, r0, ip, asr #3
    fde4:	0035a109 	eorseq	sl, r5, r9, lsl #2
    fde8:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    fdec:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdf0:	00388e0a 	eorseq	r8, r8, sl, lsl #28
    fdf4:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    fdf8:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdfc:	392c0800 	stmdbcc	ip!, {fp}
    fe00:	df020000 	svcle	0x00020000
    fe04:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe08:	0001f501 	andeq	pc, r1, r1, lsl #10
    fe0c:	35a10900 	strcc	r0, [r1, #2304]!	; 0x900
    fe10:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    fe14:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe18:	3a6b0a00 	bcc	1ad2620 <__ccfg+0x1ab2678>
    fe1c:	ca010000 	bgt	4fe24 <__ccfg+0x2fe7c>
    fe20:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe24:	ec080000 	stc	0, cr0, [r8], {-0}
    fe28:	02000039 	andeq	r0, r0, #57	; 0x39
    fe2c:	00008cd7 	ldrdeq	r8, [r0], -r7
    fe30:	02120100 	andseq	r0, r2, #0, 2
    fe34:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    fe38:	0100003b 	tsteq	r0, fp, lsr r0
    fe3c:	008c0283 	addeq	r0, ip, r3, lsl #5
    fe40:	0b000000 	bleq	fe48 <__exidx_end+0xa248>
    fe44:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    fe48:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    fe4c:	00003afb 	strdeq	r3, [r0], -fp
    fe50:	58010f02 	stmdapl	r1, {r1, r8, r9, sl, fp}
    fe54:	7c00003f 	stcvc	0, cr0, [r0], {63}	; 0x3f
    fe58:	01000000 	mrseq	r0, (UNDEF: 0)
    fe5c:	0002c49c 	muleq	r2, ip, r4
    fe60:	360d0d00 	strcc	r0, [sp], -r0, lsl #26
    fe64:	7f010000 	svcvc	0x00010000
    fe68:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe6c:	00003f42 	andeq	r3, r0, r2, asr #30
    fe70:	003b1307 	eorseq	r1, fp, r7, lsl #6
    fe74:	8c810100 	stfhis	f0, [r1], {0}
    fe78:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    fe7c:	000038ab 	andeq	r3, r0, fp, lsr #17
    fe80:	00818201 	addeq	r8, r1, r1, lsl #4
    fe84:	52010000 	andpl	r0, r1, #0
    fe88:	00371e0f 	eorseq	r1, r7, pc, lsl #28
    fe8c:	81830100 	orrhi	r0, r3, r0, lsl #2
    fe90:	63000000 	movwvs	r0, #0
    fe94:	0f00003f 	svceq	0x0000003f
    fe98:	000037ec 	andeq	r3, r0, ip, ror #15
    fe9c:	00818401 	addeq	r8, r1, r1, lsl #8
    fea0:	3f760000 	svccc	0x00760000
    fea4:	97100000 	ldrls	r0, [r0, -r0]
    fea8:	66000000 	strvs	r0, [r0], -r0
    feac:	2800003f 	stmdacs	r0, {r0, r1, r2, r3, r4, r5}
    feb0:	01000012 	tsteq	r0, r2, lsl r0
    feb4:	00029b97 	muleq	r2, r7, fp
    feb8:	00a71100 	adceq	r1, r7, r0, lsl #2
    febc:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
    fec0:	13000012 	movwne	r0, #18
    fec4:	000000b2 	strheq	r0, [r0], -r2
    fec8:	00005201 	andeq	r5, r0, r1, lsl #4
    fecc:	00009714 	andeq	r9, r0, r4, lsl r7
    fed0:	003f7000 	eorseq	r7, pc, r0
    fed4:	00000600 	andeq	r0, r0, r0, lsl #12
    fed8:	11980100 	orrsne	r0, r8, r0, lsl #2
    fedc:	000000a7 	andeq	r0, r0, r7, lsr #1
    fee0:	003f7015 	eorseq	r7, pc, r5, lsl r0	; <UNPREDICTABLE>
    fee4:	00000600 	andeq	r0, r0, r0, lsl #12
    fee8:	00b21600 	adcseq	r1, r2, r0, lsl #12
    feec:	3fa40000 	svccc	0x00a40000
    fef0:	00000000 	andeq	r0, r0, r0
    fef4:	34c61700 	strbcc	r1, [r6], #1792	; 0x700
    fef8:	6c020000 	stcvs	0, cr0, [r2], {-0}
    fefc:	00003fd4 	ldrdeq	r3, [r0], -r4
    ff00:	000000ac 	andeq	r0, r0, ip, lsr #1
    ff04:	03439c01 	movteq	r9, #15361	; 0x3c01
    ff08:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    ff0c:	01000036 	tsteq	r0, r6, lsr r0
    ff10:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    ff14:	003fb700 	eorseq	fp, pc, r0, lsl #14
    ff18:	3a2d0f00 	bcc	b53b20 <__ccfg+0xb33b78>
    ff1c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    ff20:	00000081 	andeq	r0, r0, r1, lsl #1
    ff24:	00003feb 	andeq	r3, r0, fp, ror #31
    ff28:	003b430f 	eorseq	r4, fp, pc, lsl #6
    ff2c:	81c20100 	bichi	r0, r2, r0, lsl #2
    ff30:	14000000 	strne	r0, [r0], #-0
    ff34:	18000040 	stmdane	r0, {r6}
    ff38:	00000097 	muleq	r0, r7, r0
    ff3c:	0000400a 	andeq	r4, r0, sl
    ff40:	00000006 	andeq	r0, r0, r6
    ff44:	0332ee01 	teqeq	r2, #1, 28
    ff48:	a7110000 	ldrge	r0, [r1, -r0]
    ff4c:	15000000 	strne	r0, [r0, #-0]
    ff50:	0000400a 	andeq	r4, r0, sl
    ff54:	00000006 	andeq	r0, r0, r6
    ff58:	0000b216 	andeq	fp, r0, r6, lsl r2
    ff5c:	00403b00 	subeq	r3, r0, r0, lsl #22
    ff60:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    ff64:	00003ff8 	strdeq	r3, [r0], -r8
    ff68:	0000021a 	andeq	r0, r0, sl, lsl r2
    ff6c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    ff70:	00000074 	andeq	r0, r0, r4, ror r0
    ff74:	0036c91b 	eorseq	ip, r6, fp, lsl r9
    ff78:	8ca40200 	sfmhi	f0, 4, [r4]
    ff7c:	80000000 	andhi	r0, r0, r0
    ff80:	5c000040 	stcpl	0, cr0, [r0], {64}	; 0x40
    ff84:	01000000 	mrseq	r0, (UNDEF: 0)
    ff88:	0003bd9c 	muleq	r3, ip, sp
    ff8c:	360d1c00 	strcc	r1, [sp], -r0, lsl #24
    ff90:	1f010000 	svcne	0x00010000
    ff94:	00008c02 	andeq	r8, r0, r2, lsl #24
    ff98:	00404e00 	subeq	r4, r0, r0, lsl #28
    ff9c:	39dd1d00 	ldmibcc	sp, {r8, sl, fp, ip}^
    ffa0:	21010000 	mrscs	r0, (UNDEF: 1)
    ffa4:	00008c02 	andeq	r8, r0, r2, lsl #24
    ffa8:	00406f00 	subeq	r6, r0, r0, lsl #30
    ffac:	3adf1d00 	bcc	ff7d73b4 <_estack+0xdf7d23b4>
    ffb0:	22010000 	andcs	r0, r1, #0
    ffb4:	00008c02 	andeq	r8, r0, r2, lsl #24
    ffb8:	00408200 	subeq	r8, r0, r0, lsl #4
    ffbc:	3aed1d00 	bcc	ffb573c4 <_estack+0xdfb523c4>
    ffc0:	23010000 	movwcs	r0, #4096	; 0x1000
    ffc4:	00008c02 	andeq	r8, r0, r2, lsl #24
    ffc8:	0040d000 	subeq	sp, r0, r0
    ffcc:	3b2c1d00 	blcc	b173d4 <__ccfg+0xaf742c>
    ffd0:	24010000 	strcs	r0, [r1], #-0
    ffd4:	00008102 	andeq	r8, r0, r2, lsl #2
    ffd8:	00413800 	subeq	r3, r1, r0, lsl #16
    ffdc:	3b1e1d00 	blcc	7973e4 <__ccfg+0x77743c>
    ffe0:	25010000 	strcs	r0, [r1, #-0]
    ffe4:	00008c02 	andeq	r8, r0, r2, lsl #24
    ffe8:	00415700 	subeq	r5, r1, r0, lsl #14
    ffec:	011b0000 	tsteq	fp, r0
    fff0:	02000039 	andeq	r0, r0, #57	; 0x39
    fff4:	00008cc1 	andeq	r8, r0, r1, asr #25
    fff8:	0040dc00 	subeq	sp, r0, r0, lsl #24
    fffc:	00001800 	andeq	r1, r0, r0, lsl #16
   10000:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
   10004:	1d000003 	stcne	0, cr0, [r0, #-12]
   10008:	00003b1e 	andeq	r3, r0, lr, lsl fp
   1000c:	8c026701 	stchi	7, cr6, [r2], {1}
   10010:	7c000000 	stcvc	0, cr0, [r0], {-0}
   10014:	00000041 	andeq	r0, r0, r1, asr #32
   10018:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
   1001c:	00000000 	andeq	r0, r0, r0
   10020:	00001000 	andeq	r1, r0, r0
   10024:	049c0100 	ldreq	r0, [ip], #256	; 0x100
   10028:	16000004 	strne	r0, [r0], -r4
   1002c:	00000205 	andeq	r0, r0, r5, lsl #4
   10030:	000041a3 	andeq	r4, r0, r3, lsr #3
   10034:	382f1b00 	stmdacc	pc!, {r8, r9, fp, ip}	; <UNPREDICTABLE>
   10038:	9d020000 	stcls	0, cr0, [r2, #-0]
   1003c:	0000008c 	andeq	r0, r0, ip, lsl #1
   10040:	000040f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10044:	00000010 	andeq	r0, r0, r0, lsl r0
   10048:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
   1004c:	1e1d0000 	cdpne	0, 1, cr0, cr13, cr0, {0}
   10050:	0100003b 	tsteq	r0, fp, lsr r0
   10054:	008c0297 	umulleq	r0, ip, r7, r2
   10058:	41bc0000 			; <UNDEFINED> instruction: 0x41bc0000
   1005c:	dd1d0000 	ldcle	0, cr0, [sp, #-0]
   10060:	01000039 	tsteq	r0, r9, lsr r0
   10064:	008c0298 	umulleq	r0, ip, r8, r2
   10068:	41dd0000 	bicsmi	r0, sp, r0
   1006c:	1b000000 	blne	10074 <__exidx_end+0xa474>
   10070:	0000380f 	andeq	r3, r0, pc, lsl #16
   10074:	008c9602 	addeq	r9, ip, r2, lsl #12
   10078:	41040000 	mrsmi	r0, (UNDEF: 4)
   1007c:	00140000 	andseq	r0, r4, r0
   10080:	9c010000 	stcls	0, cr0, [r1], {-0}
   10084:	00000478 	andeq	r0, r0, r8, ror r4
   10088:	003b1e1d 	eorseq	r1, fp, sp, lsl lr
   1008c:	02ba0100 	adcseq	r0, sl, #0, 2
   10090:	0000008c 	andeq	r0, r0, ip, lsl #1
   10094:	000041f0 	strdeq	r4, [r0], -r0
   10098:	0039dd1d 	eorseq	sp, r9, sp, lsl sp
   1009c:	02bb0100 	adcseq	r0, fp, #0, 2
   100a0:	0000008c 	andeq	r0, r0, ip, lsl #1
   100a4:	00004211 	andeq	r4, r0, r1, lsl r2
   100a8:	3abe1b00 	bcc	fef96cb0 <_estack+0xdef91cb0>
   100ac:	8f020000 	svchi	0x00020000
   100b0:	0000008c 	andeq	r0, r0, ip, lsl #1
   100b4:	00004118 	andeq	r4, r0, r8, lsl r1
   100b8:	00000064 	andeq	r0, r0, r4, rrx
   100bc:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
   100c0:	a11c0000 	tstge	ip, r0
   100c4:	01000035 	tsteq	r0, r5, lsr r0
   100c8:	008c02db 	ldrdeq	r0, [ip], fp
   100cc:	42240000 	eormi	r0, r4, #0
   100d0:	1e1d0000 	cdpne	0, 1, cr0, cr13, cr0, {0}
   100d4:	0100003b 	tsteq	r0, fp, lsr r0
   100d8:	008c02dd 	ldrdeq	r0, [ip], sp
   100dc:	42450000 	submi	r0, r5, #0
   100e0:	dd1d0000 	ldcle	0, cr0, [sp, #-0]
   100e4:	01000039 	tsteq	r0, r9, lsr r0
   100e8:	008c02de 	ldrdeq	r0, [ip], lr
   100ec:	42790000 	rsbsmi	r0, r9, #0
   100f0:	371d0000 	ldrcc	r0, [sp, -r0]
   100f4:	01000037 	tsteq	r0, r7, lsr r0
   100f8:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
   100fc:	428c0000 	addmi	r0, ip, #0
   10100:	961d0000 	ldrls	r0, [sp], -r0
   10104:	0100003a 	tsteq	r0, sl, lsr r0
   10108:	008c02e0 	addeq	r0, ip, r0, ror #5
   1010c:	42ba0000 	adcsmi	r0, sl, #0
   10110:	d30a0000 	movwle	r0, #40960	; 0xa000
   10114:	01000039 	tsteq	r0, r9, lsr r0
   10118:	008c02e1 	addeq	r0, ip, r1, ror #5
   1011c:	a71d0000 	ldrge	r0, [sp, -r0]
   10120:	01000037 	tsteq	r0, r7, lsr r0
   10124:	008102e2 	addeq	r0, r1, r2, ror #5
   10128:	42e80000 	rscmi	r0, r8, #0
   1012c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10130:	000000be 	strheq	r0, [r0], -lr
   10134:	0000417c 	andeq	r4, r0, ip, ror r1
   10138:	00000014 	andeq	r0, r0, r4, lsl r0
   1013c:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
   10140:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
   10144:	63000000 	movwvs	r0, #0
   10148:	16000043 	strne	r0, [r0], -r3, asr #32
   1014c:	000000da 	ldrdeq	r0, [r0], -sl
   10150:	00004384 	andeq	r4, r0, r4, lsl #7
   10154:	00417e15 	subeq	r7, r1, r5, lsl lr
   10158:	00000a00 	andeq	r0, r0, r0, lsl #20
   1015c:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
   10160:	43a30000 			; <UNDEFINED> instruction: 0x43a30000
   10164:	7e150000 	cdpvc	0, 1, cr0, cr5, cr0, {0}
   10168:	0a000041 	beq	10274 <__exidx_end+0xa674>
   1016c:	16000000 	strne	r0, [r0], -r0
   10170:	000000da 	ldrdeq	r0, [r0], -sl
   10174:	000043c4 	andeq	r4, r0, r4, asr #7
   10178:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   1017c:	000000e7 	andeq	r0, r0, r7, ror #1
   10180:	00004190 	muleq	r0, r0, r1
   10184:	00000014 	andeq	r0, r0, r4, lsl r0
   10188:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
   1018c:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
   10190:	d7000000 	strle	r0, [r0, -r0]
   10194:	16000043 	strne	r0, [r0], -r3, asr #32
   10198:	00000103 	andeq	r0, r0, r3, lsl #2
   1019c:	000043f8 	strdeq	r4, [r0], -r8
   101a0:	00419215 	subeq	r9, r1, r5, lsl r2
   101a4:	00000a00 	andeq	r0, r0, r0, lsl #20
   101a8:	00f71f00 	rscseq	r1, r7, r0, lsl #30
   101ac:	44170000 	ldrmi	r0, [r7], #-0
   101b0:	92150000 	andsls	r0, r5, #0
   101b4:	0a000041 	beq	102c0 <__exidx_end+0xa6c0>
   101b8:	16000000 	strne	r0, [r0], -r0
   101bc:	00000103 	andeq	r0, r0, r3, lsl #2
   101c0:	00004438 	andeq	r4, r0, r8, lsr r4
   101c4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   101c8:	00000110 	andeq	r0, r0, r0, lsl r1
   101cc:	000041a4 	andeq	r4, r0, r4, lsr #3
   101d0:	00000014 	andeq	r0, r0, r4, lsl r0
   101d4:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
   101d8:	201f0000 	andscs	r0, pc, r0
   101dc:	4b000001 	blmi	101e8 <__exidx_end+0xa5e8>
   101e0:	16000044 	strne	r0, [r0], -r4, asr #32
   101e4:	0000012c 	andeq	r0, r0, ip, lsr #2
   101e8:	0000446c 	andeq	r4, r0, ip, ror #8
   101ec:	0041a615 	subeq	sl, r1, r5, lsl r6
   101f0:	00000a00 	andeq	r0, r0, r0, lsl #20
   101f4:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
   101f8:	448b0000 	strmi	r0, [fp], #0
   101fc:	a6150000 	ldrge	r0, [r5], -r0
   10200:	0a000041 	beq	1030c <__exidx_end+0xa70c>
   10204:	16000000 	strne	r0, [r0], -r0
   10208:	0000012c 	andeq	r0, r0, ip, lsr #2
   1020c:	000044ac 	andeq	r4, r0, ip, lsr #9
   10210:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10214:	00000139 	andeq	r0, r0, r9, lsr r1
   10218:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
   1021c:	00000028 	andeq	r0, r0, r8, lsr #32
   10220:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
   10224:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
   10228:	bf000001 	svclt	0x00000001
   1022c:	16000044 	strne	r0, [r0], -r4, asr #32
   10230:	00000155 	andeq	r0, r0, r5, asr r1
   10234:	000044e0 	andeq	r4, r0, r0, ror #9
   10238:	00016120 	andeq	r6, r1, r0, lsr #2
   1023c:	41ba1500 			; <UNDEFINED> instruction: 0x41ba1500
   10240:	001c0000 	andseq	r0, ip, r0
   10244:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
   10248:	ff000001 			; <UNDEFINED> instruction: 0xff000001
   1024c:	15000044 	strne	r0, [r0, #-68]	; 0xffffffbc
   10250:	000041ba 			; <UNDEFINED> instruction: 0x000041ba
   10254:	0000001c 	andeq	r0, r0, ip, lsl r0
   10258:	00015516 	andeq	r5, r1, r6, lsl r5
   1025c:	00452000 	subeq	r2, r5, r0
   10260:	01611600 	cmneq	r1, r0, lsl #12
   10264:	454d0000 	strbmi	r0, [sp, #-0]
   10268:	00000000 	andeq	r0, r0, r0
   1026c:	375c1b00 	ldrbcc	r1, [ip, -r0, lsl #22]
   10270:	cf020000 	svcgt	0x00020000
   10274:	0000008c 	andeq	r0, r0, ip, lsl #1
   10278:	000041e0 	andeq	r4, r0, r0, ror #3
   1027c:	00000010 	andeq	r0, r0, r0, lsl r0
   10280:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
   10284:	f61d0000 			; <UNDEFINED> instruction: 0xf61d0000
   10288:	01000037 	tsteq	r0, r7, lsr r0
   1028c:	008c0384 	addeq	r0, ip, r4, lsl #7
   10290:	45600000 	strbmi	r0, [r0, #-0]!
   10294:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10298:	0000016e 	andeq	r0, r0, lr, ror #2
   1029c:	000041f0 	strdeq	r4, [r0], -r0
   102a0:	0000002c 	andeq	r0, r0, ip, lsr #32
   102a4:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
   102a8:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
   102ac:	7b000001 	blvc	102b8 <__exidx_end+0xa6b8>
   102b0:	16000045 	strne	r0, [r0], -r5, asr #32
   102b4:	0000018a 	andeq	r0, r0, sl, lsl #3
   102b8:	0000459c 	muleq	r0, ip, r5
   102bc:	00019620 	andeq	r9, r1, r0, lsr #12
   102c0:	41f21500 	mvnsmi	r1, r0, lsl #10
   102c4:	001e0000 	andseq	r0, lr, r0
   102c8:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
   102cc:	bf000001 	svclt	0x00000001
   102d0:	15000045 	strne	r0, [r0, #-69]	; 0xffffffbb
   102d4:	000041f2 	strdeq	r4, [r0], -r2
   102d8:	0000001e 	andeq	r0, r0, lr, lsl r0
   102dc:	00018a16 	andeq	r8, r1, r6, lsl sl
   102e0:	0045e000 	subeq	lr, r5, r0
   102e4:	01961600 	orrseq	r1, r6, r0, lsl #12
   102e8:	460d0000 	strmi	r0, [sp], -r0
   102ec:	00000000 	andeq	r0, r0, r0
   102f0:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
   102f4:	421c0000 	andsmi	r0, ip, #0
   102f8:	00140000 	andseq	r0, r4, r0
   102fc:	9c010000 	stcls	0, cr0, [r1], {-0}
   10300:	0000070c 	andeq	r0, r0, ip, lsl #14
   10304:	0001b31f 	andeq	fp, r1, pc, lsl r3
   10308:	00462000 	subeq	r2, r6, r0
   1030c:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
   10310:	46410000 	strbmi	r0, [r1], -r0
   10314:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
   10318:	0a000042 	beq	10428 <__exidx_end+0xa828>
   1031c:	1f000000 	svcne	0x00000000
   10320:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
   10324:	00004660 	andeq	r4, r0, r0, ror #12
   10328:	00421e15 	subeq	r1, r2, r5, lsl lr
   1032c:	00000a00 	andeq	r0, r0, r0, lsl #20
   10330:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
   10334:	46810000 	strmi	r0, [r1], r0
   10338:	00000000 	andeq	r0, r0, r0
   1033c:	01cc1e00 	biceq	r1, ip, r0, lsl #28
   10340:	42300000 	eorsmi	r0, r0, #0
   10344:	00140000 	andseq	r0, r4, r0
   10348:	9c010000 	stcls	0, cr0, [r1], {-0}
   1034c:	00000758 	andeq	r0, r0, r8, asr r7
   10350:	0001dc1f 	andeq	sp, r1, pc, lsl ip
   10354:	00469400 	subeq	r9, r6, r0, lsl #8
   10358:	01e81600 	mvneq	r1, r0, lsl #12
   1035c:	46b50000 	ldrtmi	r0, [r5], r0
   10360:	32150000 	andscc	r0, r5, #0
   10364:	0a000042 	beq	10474 <__exidx_end+0xa874>
   10368:	1f000000 	svcne	0x00000000
   1036c:	000001dc 	ldrdeq	r0, [r0], -ip
   10370:	000046d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10374:	00423215 	subeq	r3, r2, r5, lsl r2
   10378:	00000a00 	andeq	r0, r0, r0, lsl #20
   1037c:	01e81600 	mvneq	r1, r0, lsl #12
   10380:	46f50000 	ldrbtmi	r0, [r5], r0
   10384:	00000000 	andeq	r0, r0, r0
   10388:	34f61700 	ldrbtcc	r1, [r6], #1792	; 0x700
   1038c:	73020000 	movwvc	r0, #8192	; 0x2000
   10390:	00004244 	andeq	r4, r0, r4, asr #4
   10394:	00000110 	andeq	r0, r0, r0, lsl r1
   10398:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
   1039c:	a11c0000 	tstge	ip, r0
   103a0:	01000035 	tsteq	r0, r5, lsr r0
   103a4:	008c0127 	addeq	r0, ip, r7, lsr #2
   103a8:	47080000 	strmi	r0, [r8, -r0]
   103ac:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
   103b0:	01000036 	tsteq	r0, r6, lsr r0
   103b4:	008c0127 	addeq	r0, ip, r7, lsr #2
   103b8:	47340000 	ldrmi	r0, [r4, -r0]!
   103bc:	601d0000 	andsvs	r0, sp, r0
   103c0:	01000039 	tsteq	r0, r9, lsr r0
   103c4:	008c0129 	addeq	r0, ip, r9, lsr #2
   103c8:	47550000 	ldrbmi	r0, [r5, -r0]
   103cc:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
   103d0:	74000001 	strvc	r0, [r0], #-1
   103d4:	40000042 	andmi	r0, r0, r2, asr #32
   103d8:	01000012 	tsteq	r0, r2, lsl r0
   103dc:	07c10140 	strbeq	r0, [r1, r0, asr #2]
   103e0:	40120000 	andsmi	r0, r2, r0
   103e4:	16000012 			; <UNDEFINED> instruction: 0x16000012
   103e8:	00000205 	andeq	r0, r0, r5, lsl #4
   103ec:	00004823 	andeq	r4, r0, r3, lsr #16
   103f0:	4e220000 	cdpmi	0, 2, cr0, cr2, cr0, {0}
   103f4:	43000042 	movwmi	r0, #66	; 0x42
   103f8:	d6000003 	strle	r0, [r0], -r3
   103fc:	1a000007 	bne	10420 <__exidx_end+0xa820>
   10400:	f3035001 	vhadd.u8	d5, d3, d1
   10404:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
   10408:	0000425a 	andeq	r4, r0, sl, asr r2
   1040c:	00000ad6 	ldrdeq	r0, [r0], -r6
   10410:	000007ef 	andeq	r0, r0, pc, ror #15
   10414:	0151011a 	cmpeq	r1, sl, lsl r1
   10418:	50011a48 	andpl	r1, r1, r8, asr #20
   1041c:	00007402 	andeq	r7, r0, r2, lsl #8
   10420:	00425e23 	subeq	r5, r2, r3, lsr #28
   10424:	0003bd00 	andeq	fp, r3, r0, lsl #26
   10428:	42742400 	rsbsmi	r2, r4, #0, 8
   1042c:	76020000 	strvc	r0, [r2], -r0
   10430:	00081d00 	andeq	r1, r8, r0, lsl #26
   10434:	53011a00 	movwpl	r1, #6656	; 0x1a00
   10438:	011a3001 	tsteq	sl, r1
   1043c:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
   10440:	51011a03 	tstpl	r1, r3, lsl #20
   10444:	1a2c0802 	bne	b12454 <__ccfg+0xaf24ac>
   10448:	74025001 	strvc	r5, [r2], #-1
   1044c:	84220000 	strthi	r0, [r2], #-0
   10450:	d6000042 	strle	r0, [r0], -r2, asr #32
   10454:	3600000a 	strcc	r0, [r0], -sl
   10458:	1a000008 	bne	10480 <__exidx_end+0xa880>
   1045c:	4c015101 	stfmis	f5, [r1], {1}
   10460:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10464:	23000074 	movwcs	r0, #116	; 0x74
   10468:	00004288 	andeq	r4, r0, r8, lsl #5
   1046c:	00000404 	andeq	r0, r0, r4, lsl #8
   10470:	00429222 	subeq	r9, r2, r2, lsr #4
   10474:	000ad600 	andeq	sp, sl, r0, lsl #12
   10478:	00085800 	andeq	r5, r8, r0, lsl #16
   1047c:	51011a00 	tstpl	r1, r0, lsl #20
   10480:	011a4401 	tsteq	sl, r1, lsl #8
   10484:	00740250 	rsbseq	r0, r4, r0, asr r2
   10488:	42962300 	addsmi	r2, r6, #0, 6
   1048c:	043e0000 	ldrteq	r0, [lr], #-0
   10490:	a0220000 	eorge	r0, r2, r0
   10494:	d6000042 	strle	r0, [r0], -r2, asr #32
   10498:	7a00000a 	bvc	104c8 <__exidx_end+0xa8c8>
   1049c:	1a000008 	bne	104c4 <__exidx_end+0xa8c4>
   104a0:	40015101 	andmi	r5, r1, r1, lsl #2
   104a4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   104a8:	22000074 	andcs	r0, r0, #116	; 0x74
   104ac:	000042a6 	andeq	r4, r0, r6, lsr #5
   104b0:	00000478 	andeq	r0, r0, r8, ror r4
   104b4:	0000088e 	andeq	r0, r0, lr, lsl #17
   104b8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   104bc:	22000075 	andcs	r0, r0, #117	; 0x75
   104c0:	000042b0 			; <UNDEFINED> instruction: 0x000042b0
   104c4:	00000ad6 	ldrdeq	r0, [r0], -r6
   104c8:	000008a7 	andeq	r0, r0, r7, lsr #17
   104cc:	0151011a 	cmpeq	r1, sl, lsl r1
   104d0:	50011a3c 	andpl	r1, r1, ip, lsr sl
   104d4:	00007402 	andeq	r7, r0, r2, lsl #8
   104d8:	0042b622 	subeq	fp, r2, r2, lsr #12
   104dc:	0000e700 	andeq	lr, r0, r0, lsl #14
   104e0:	0008bb00 	andeq	fp, r8, r0, lsl #22
   104e4:	50011a00 	andpl	r1, r1, r0, lsl #20
   104e8:	00007502 	andeq	r7, r0, r2, lsl #10
   104ec:	0042c822 	subeq	ip, r2, r2, lsr #16
   104f0:	00011000 	andeq	r1, r1, r0
   104f4:	0008cf00 	andeq	ip, r8, r0, lsl #30
   104f8:	50011a00 	andpl	r1, r1, r0, lsl #20
   104fc:	00007502 	andeq	r7, r0, r2, lsl #10
   10500:	0042d622 	subeq	sp, r2, r2, lsr #12
   10504:	00013900 	andeq	r3, r1, r0, lsl #18
   10508:	0008e300 	andeq	lr, r8, r0, lsl #6
   1050c:	50011a00 	andpl	r1, r1, r0, lsl #20
   10510:	00007502 	andeq	r7, r0, r2, lsl #10
   10514:	0042e022 	subeq	lr, r2, r2, lsr #32
   10518:	000ad600 	andeq	sp, sl, r0, lsl #12
   1051c:	0008fd00 	andeq	pc, r8, r0, lsl #26
   10520:	51011a00 	tstpl	r1, r0, lsl #20
   10524:	1a280802 	bne	a12534 <__ccfg+0x9f258c>
   10528:	74025001 	strvc	r5, [r2], #-1
   1052c:	e6220000 	strt	r0, [r2], -r0
   10530:	be000042 	cdplt	0, 0, cr0, cr0, cr2, {2}
   10534:	11000000 	mrsne	r0, (UNDEF: 0)
   10538:	1a000009 	bne	10564 <__exidx_end+0xa964>
   1053c:	75025001 	strvc	r5, [r2, #-1]
   10540:	f8220000 			; <UNDEFINED> instruction: 0xf8220000
   10544:	a3000042 	movwge	r0, #66	; 0x42
   10548:	25000001 	strcs	r0, [r0, #-1]
   1054c:	1a000009 	bne	10578 <__exidx_end+0xa978>
   10550:	75025001 	strvc	r5, [r2, #-1]
   10554:	0a220000 	beq	89055c <__ccfg+0x8705b4>
   10558:	cc000043 	stcgt	0, cr0, [r0], {67}	; 0x43
   1055c:	39000001 	stmdbcc	r0, {r0}
   10560:	1a000009 	bne	1058c <__exidx_end+0xa98c>
   10564:	75025001 	strvc	r5, [r2, #-1]
   10568:	1e220000 	cdpne	0, 2, cr0, cr2, cr0, {0}
   1056c:	6e000043 	cdpvs	0, 0, cr0, cr0, cr3, {2}
   10570:	4d000001 	stcmi	0, cr0, [r0, #-4]
   10574:	1a000009 	bne	105a0 <__exidx_end+0xa9a0>
   10578:	75025001 	strvc	r5, [r2, #-1]
   1057c:	28190000 	ldmdacs	r9, {}	; <UNPREDICTABLE>
   10580:	d6000043 	strle	r0, [r0], -r3, asr #32
   10584:	1a00000a 	bne	105b4 <__exidx_end+0xa9b4>
   10588:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
   1058c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10590:	00000074 	andeq	r0, r0, r4, ror r0
   10594:	00357317 	eorseq	r7, r5, r7, lsl r3
   10598:	54fd0200 	ldrbtpl	r0, [sp], #512	; 0x200
   1059c:	64000043 	strvs	r0, [r0], #-67	; 0xffffffbd
   105a0:	01000000 	mrseq	r0, (UNDEF: 0)
   105a4:	0009899c 	muleq	r9, ip, r9
   105a8:	372a1d00 	strcc	r1, [sl, -r0, lsl #26]!
   105ac:	eb010000 	bl	505b4 <__ccfg+0x3060c>
   105b0:	00008c03 	andeq	r8, r0, r3, lsl #24
   105b4:	00483c00 	subeq	r3, r8, r0, lsl #24
   105b8:	a00c0000 	andge	r0, ip, r0
   105bc:	0200003a 	andeq	r0, r0, #58	; 0x3a
   105c0:	43b80106 			; <UNDEFINED> instruction: 0x43b80106
   105c4:	00280000 	eoreq	r0, r8, r0
   105c8:	9c010000 	stcls	0, cr0, [r1], {-0}
   105cc:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
   105d0:	0038f71c 	eorseq	pc, r8, ip, lsl r7	; <UNPREDICTABLE>
   105d4:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
   105d8:	0000008c 	andeq	r0, r0, ip, lsl #1
   105dc:	00004857 	andeq	r4, r0, r7, asr r8
   105e0:	35261700 	strcc	r1, [r6, #-1792]!	; 0xfffff900
   105e4:	7a020000 	bvc	905ec <__ccfg+0x70644>
   105e8:	000043e0 	andeq	r4, r0, r0, ror #7
   105ec:	00000150 	andeq	r0, r0, r0, asr r1
   105f0:	0ad69c01 	beq	ff5b75fc <_estack+0xdf5b25fc>
   105f4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
   105f8:	01000036 	tsteq	r0, r6, lsr r0
   105fc:	008c019b 	umulleq	r0, ip, fp, r1
   10600:	48780000 	ldmdami	r8!, {}^	; <UNPREDICTABLE>
   10604:	3e1d0000 	cdpcc	0, 1, cr0, cr13, cr0, {0}
   10608:	0100003a 	tsteq	r0, sl, lsr r0
   1060c:	008c019d 	umulleq	r0, ip, sp, r1
   10610:	48d30000 	ldmmi	r3, {}^	; <UNPREDICTABLE>
   10614:	601d0000 	andsvs	r0, sp, r0
   10618:	01000039 	tsteq	r0, r9, lsr r0
   1061c:	008c019e 	umulleq	r0, ip, lr, r1
   10620:	48e60000 	stmiami	r6!, {}^	; <UNPREDICTABLE>
   10624:	aa1d0000 	bge	75062c <__ccfg+0x730684>
   10628:	01000036 	tsteq	r0, r6, lsr r0
   1062c:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
   10630:	48f90000 	ldmmi	r9!, {}^	; <UNPREDICTABLE>
   10634:	9d1d0000 	ldcls	0, cr0, [sp, #-0]
   10638:	01000036 	tsteq	r0, r6, lsr r0
   1063c:	008c01a0 	addeq	r0, ip, r0, lsr #3
   10640:	49170000 	ldmdbmi	r7, {}	; <UNPREDICTABLE>
   10644:	12250000 	eorne	r0, r5, #0
   10648:	f2000002 	vhadd.s8	d0, d0, d2
   1064c:	3e000044 	cdpcc	0, 0, cr0, cr0, cr4, {2}
   10650:	01000000 	mrseq	r0, (UNDEF: 0)
   10654:	6a230216 	bvs	8d0eb4 <__ccfg+0x8b0f0c>
   10658:	3c000044 	stccc	0, cr0, [r0], {68}	; 0x44
   1065c:	22000006 	andcs	r0, r0, #6
   10660:	0000448c 	andeq	r4, r0, ip, lsl #9
   10664:	00000af2 	strdeq	r0, [r0], -r2
   10668:	00000a46 	andeq	r0, r0, r6, asr #20
   1066c:	0151011a 	cmpeq	r1, sl, lsl r1
   10670:	50011a31 	andpl	r1, r1, r1, lsr sl
   10674:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
   10678:	00004492 	muleq	r0, r2, r4
   1067c:	00000989 	andeq	r0, r0, r9, lsl #19
   10680:	00000a5d 	andeq	r0, r0, sp, asr sl
   10684:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
   10688:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
   1068c:	98230000 	stmdals	r3!, {}	; <UNPREDICTABLE>
   10690:	08000044 	stmdaeq	r0, {r2, r6}
   10694:	2200000b 	andcs	r0, r0, #11
   10698:	000044a2 	andeq	r4, r0, r2, lsr #9
   1069c:	00000af2 	strdeq	r0, [r0], -r2
   106a0:	00000a7f 	andeq	r0, r0, pc, ror sl
   106a4:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
   106a8:	011a0074 	tsteq	sl, r4, ror r0
   106ac:	00340150 	eorseq	r0, r4, r0, asr r1
   106b0:	0044a822 	subeq	sl, r4, r2, lsr #16
   106b4:	000b0800 	andeq	r0, fp, r0, lsl #16
   106b8:	000a9200 	andeq	r9, sl, r0, lsl #4
   106bc:	50011a00 	andpl	r1, r1, r0, lsl #20
   106c0:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
   106c4:	000044b8 			; <UNDEFINED> instruction: 0x000044b8
   106c8:	00000989 	andeq	r0, r0, r9, lsl #19
   106cc:	00000aac 	andeq	r0, r0, ip, lsr #21
   106d0:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
   106d4:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
   106d8:	1a00ffff 	bne	506dc <__ccfg+0x30734>
   106dc:	44c82600 	strbmi	r2, [r8], #1536	; 0x600
   106e0:	0acc0000 	beq	ff3106e8 <_estack+0xdf30b6e8>
   106e4:	011a0000 	tsteq	sl, r0
   106e8:	000c0552 	andeq	r0, ip, r2, asr r5
   106ec:	1a600060 	bne	1810874 <__ccfg+0x17f08cc>
   106f0:	37015101 	strcc	r5, [r1, -r1, lsl #2]
   106f4:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
   106f8:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
   106fc:	44de2300 	ldrbmi	r2, [lr], #768	; 0x300
   10700:	0af20000 	beq	ffc90708 <_estack+0xdfc8b708>
   10704:	27000000 	strcs	r0, [r0, -r0]
   10708:	00003870 	andeq	r3, r0, r0, ror r8
   1070c:	f201ca06 	vpmax.s8	d12, d1, d6
   10710:	2800000a 	stmdacs	r0, {r1, r3}
   10714:	0000008c 	andeq	r0, r0, ip, lsl #1
   10718:	00008c28 	andeq	r8, r0, r8, lsr #24
   1071c:	008c2800 	addeq	r2, ip, r0, lsl #16
   10720:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
   10724:	00002cff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   10728:	0b08f907 	bleq	24eb4c <__ccfg+0x22eba4>
   1072c:	8c280000 	stchi	0, cr0, [r8], #-0
   10730:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
   10734:	0000008c 	andeq	r0, r0, ip, lsl #1
   10738:	2d382a00 	vldmdbcs	r8!, {s4-s3}
   1073c:	10070000 	andne	r0, r7, r0
   10740:	00008c01 	andeq	r8, r0, r1, lsl #24
   10744:	008c2800 	addeq	r2, ip, r0, lsl #16
   10748:	00000000 	andeq	r0, r0, r0
   1074c:	00000923 	andeq	r0, r0, r3, lsr #18
   10750:	3bb00004 	blcc	fec10768 <_estack+0xdec0b768>
   10754:	01040000 	mrseq	r0, (UNDEF: 4)
   10758:	00002a21 	andeq	r2, r0, r1, lsr #20
   1075c:	003be701 	eorseq	lr, fp, r1, lsl #14
   10760:	002ae800 	eoreq	lr, sl, r0, lsl #16
   10764:	00133000 	andseq	r3, r3, r0
   10768:	00000000 	andeq	r0, r0, r0
   1076c:	0086c700 	addeq	ip, r6, r0, lsl #14
   10770:	2b8b0200 	blcs	fe2d0f78 <_estack+0xde2cbf78>
   10774:	1b060000 	blne	19077c <__ccfg+0x1707d4>
   10778:	00000030 	andeq	r0, r0, r0, lsr r0
   1077c:	4d060103 	stfmis	f0, [r6, #-12]
   10780:	0200000c 	andeq	r0, r0, #12
   10784:	000029fc 	strdeq	r2, [r0], -ip
   10788:	00421d06 	subeq	r1, r2, r6, lsl #26
   1078c:	01030000 	mrseq	r0, (UNDEF: 3)
   10790:	000c4b08 	andeq	r4, ip, r8, lsl #22
   10794:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   10798:	00000a5b 	andeq	r0, r0, fp, asr sl
   1079c:	002df202 	eoreq	pc, sp, r2, lsl #4
   107a0:	5b2b0600 	blpl	ad1fa8 <__ccfg+0xab2000>
   107a4:	03000000 	movweq	r0, #0
   107a8:	0d480702 	stcleq	7, cr0, [r8, #-8]
   107ac:	81020000 	mrshi	r0, (UNDEF: 2)
   107b0:	0600002b 	streq	r0, [r0], -fp, lsr #32
   107b4:	00006d3f 	andeq	r6, r0, pc, lsr sp
   107b8:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   107bc:	000007ed 	andeq	r0, r0, sp, ror #15
   107c0:	00299402 	eoreq	r9, r9, r2, lsl #8
   107c4:	7f410600 	svcvc	0x00410600
   107c8:	03000000 	movweq	r0, #0
   107cc:	041d0704 	ldreq	r0, [sp], #-1796	; 0xfffff8fc
   107d0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   107d4:	0007e805 	andeq	lr, r7, r5, lsl #16
   107d8:	07080300 	streq	r0, [r8, -r0, lsl #6]
   107dc:	00000418 	andeq	r0, r0, r8, lsl r4
   107e0:	69050404 	stmdbvs	r5, {r2, sl}
   107e4:	0300746e 	movweq	r7, #1134	; 0x46e
   107e8:	04220704 	strteq	r0, [r2], #-1796	; 0xfffff8fc
   107ec:	8d020000 	stchi	0, cr0, [r2, #-0]
   107f0:	0700002b 	streq	r0, [r0, -fp, lsr #32]
   107f4:	00002513 	andeq	r2, r0, r3, lsl r5
   107f8:	29fe0200 	ldmibcs	lr!, {r9}^
   107fc:	14070000 	strne	r0, [r7], #-0
   10800:	00000037 	andeq	r0, r0, r7, lsr r0
   10804:	002df402 	eoreq	pc, sp, r2, lsl #8
   10808:	501a0700 	andspl	r0, sl, r0, lsl #14
   1080c:	02000000 	andeq	r0, r0, #0
   10810:	00002b83 	andeq	r2, r0, r3, lsl #23
   10814:	00621f07 	rsbeq	r1, r2, r7, lsl #30
   10818:	96020000 	strls	r0, [r2], -r0
   1081c:	07000029 	streq	r0, [r0, -r9, lsr #32]
   10820:	00007420 	andeq	r7, r0, r0, lsr #8
   10824:	29c00200 	stmibcs	r0, {r9}^
   10828:	33080000 	movwcc	r0, #32768	; 0x8000
   1082c:	000000e4 	andeq	r0, r0, r4, ror #1
   10830:	00ea0405 	rsceq	r0, sl, r5, lsl #8
   10834:	05060000 	streq	r0, [r6, #-0]
   10838:	0000f104 	andeq	pc, r0, r4, lsl #2
   1083c:	00fc0700 	rscseq	r0, ip, r0, lsl #14
   10840:	ad080000 	stcge	0, cr0, [r8, #-0]
   10844:	00000000 	andeq	r0, r0, r0
   10848:	0030f602 	eorseq	pc, r0, r2, lsl #12
   1084c:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
   10850:	05000001 	streq	r0, [r0, #-1]
   10854:	00010d04 	andeq	r0, r1, r4, lsl #26
   10858:	00ce0900 	sbceq	r0, lr, r0, lsl #18
   1085c:	01260000 			; <UNDEFINED> instruction: 0x01260000
   10860:	26080000 	strcs	r0, [r8], -r0
   10864:	08000001 	stmdaeq	r0, {r0}
   10868:	000000ce 	andeq	r0, r0, lr, asr #1
   1086c:	0000ce08 	andeq	ip, r0, r8, lsl #28
   10870:	04050000 	streq	r0, [r5], #-0
   10874:	000000ad 	andeq	r0, r0, sp, lsr #1
   10878:	00325e02 	eorseq	r5, r2, r2, lsl #28
   1087c:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
   10880:	05000001 	streq	r0, [r0, #-1]
   10884:	00013d04 	andeq	r3, r1, r4, lsl #26
   10888:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
   1088c:	a7020000 	strge	r0, [r2, -r0]
   10890:	09000032 	stmdbeq	r0, {r1, r4, r5}
   10894:	00013748 	andeq	r3, r1, r8, asr #14
   10898:	2f8e0200 	svccs	0x008e0200
   1089c:	4a090000 	bmi	2508a4 <__ccfg+0x2308fc>
   108a0:	00000158 	andeq	r0, r0, r8, asr r1
   108a4:	015e0405 	cmpeq	lr, r5, lsl #8
   108a8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   108ac:	6d000000 	stcvs	0, cr0, [r0, #-0]
   108b0:	08000001 	stmdaeq	r0, {r0}
   108b4:	000000ce 	andeq	r0, r0, lr, asr #1
   108b8:	2e9d0200 	cdpcs	2, 9, cr0, cr13, cr0, {0}
   108bc:	4c090000 	stcmi	0, cr0, [r9], {-0}
   108c0:	00000137 	andeq	r0, r0, r7, lsr r1
   108c4:	002dfd02 	eoreq	pc, sp, r2, lsl #26
   108c8:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
   108cc:	02000001 	andeq	r0, r0, #1
   108d0:	00002e8d 	andeq	r2, r0, sp, lsl #29
   108d4:	00e45109 	rsceq	r5, r4, r9, lsl #2
   108d8:	17020000 	strne	r0, [r2, -r0]
   108dc:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   108e0:	00019953 	andeq	r9, r1, r3, asr r9
   108e4:	9f040500 	svcls	0x00040500
   108e8:	09000001 	stmdbeq	r0, {r0}
   108ec:	000000ce 	andeq	r0, r0, lr, asr #1
   108f0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
   108f4:	0001b808 	andeq	fp, r1, r8, lsl #16
   108f8:	00b80800 	adcseq	r0, r8, r0, lsl #16
   108fc:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   10900:	00000000 	andeq	r0, r0, r0
   10904:	00b80405 	adcseq	r0, r8, r5, lsl #8
   10908:	0c020000 	stceq	0, cr0, [r2], {-0}
   1090c:	09000031 	stmdbeq	r0, {r0, r4, r5}
   10910:	0001c957 	andeq	ip, r1, r7, asr r9
   10914:	cf040500 	svcgt	0x00040500
   10918:	09000001 	stmdbeq	r0, {r0}
   1091c:	000000ce 	andeq	r0, r0, lr, asr #1
   10920:	000001e3 	andeq	r0, r0, r3, ror #3
   10924:	0001e308 	andeq	lr, r1, r8, lsl #6
   10928:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   1092c:	05000000 	streq	r0, [r0, #-0]
   10930:	0000ce04 	andeq	ip, r0, r4, lsl #28
   10934:	2f000200 	svccs	0x00000200
   10938:	5a090000 	bpl	250940 <__ccfg+0x230998>
   1093c:	000001c9 	andeq	r0, r0, r9, asr #3
   10940:	002fba02 	eoreq	fp, pc, r2, lsl #20
   10944:	c95d0900 	ldmdbgt	sp, {r8, fp}^
   10948:	02000001 	andeq	r0, r0, #1
   1094c:	00002d29 	andeq	r2, r0, r9, lsr #26
   10950:	01c96009 	biceq	r6, r9, r9
   10954:	1a020000 	bne	9095c <__ccfg+0x709b4>
   10958:	09000031 	stmdbeq	r0, {r0, r4, r5}
   1095c:	0000e463 	andeq	lr, r0, r3, ror #8
   10960:	2d670200 	sfmcs	f0, 2, [r7, #-0]
   10964:	65090000 	strvs	r0, [r9, #-0]
   10968:	00000220 	andeq	r0, r0, r0, lsr #4
   1096c:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
   10970:	31070000 	mrscc	r0, (UNDEF: 7)
   10974:	08000002 	stmdaeq	r0, {r1}
   10978:	000000ce 	andeq	r0, r0, lr, asr #1
   1097c:	32b80200 	adcscc	r0, r8, #0, 4
   10980:	67090000 	strvs	r0, [r9, -r0]
   10984:	00000220 	andeq	r0, r0, r0, lsr #4
   10988:	002ffc02 	eoreq	pc, pc, r2, lsl #24
   1098c:	eb690900 	bl	1a52d94 <__ccfg+0x1a32dec>
   10990:	02000000 	andeq	r0, r0, #0
   10994:	00003297 	muleq	r0, r7, r2
   10998:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
   1099c:	c9020000 	stmdbgt	r2, {}	; <UNPREDICTABLE>
   109a0:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   109a4:	0000eb6d 	andeq	lr, r0, sp, ror #22
   109a8:	2fdb0200 	svccs	0x00db0200
   109ac:	6f090000 	svcvs	0x00090000
   109b0:	000000eb 	andeq	r0, r0, fp, ror #1
   109b4:	7a094c0b 	bvc	2639e8 <__ccfg+0x243a40>
   109b8:	00000355 	andeq	r0, r0, r5, asr r3
   109bc:	002f9f0c 	eoreq	r9, pc, ip, lsl #30
   109c0:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
   109c4:	00000000 	andeq	r0, r0, r0
   109c8:	00328a0c 	eorseq	r8, r2, ip, lsl #20
   109cc:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
   109d0:	04000001 	streq	r0, [r0], #-1
   109d4:	002fb00c 	eoreq	fp, pc, ip
   109d8:	427e0900 	rsbsmi	r0, lr, #0, 18
   109dc:	08000001 	stmdaeq	r0, {r0}
   109e0:	0031a90c 	eorseq	sl, r1, ip, lsl #18
   109e4:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
   109e8:	0c000001 	stceq	0, cr0, [r0], {1}
   109ec:	0031bb0c 	eorseq	fp, r1, ip, lsl #22
   109f0:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
   109f4:	10000001 	andne	r0, r0, r1
   109f8:	002eae0c 	eoreq	sl, lr, ip, lsl #28
   109fc:	78810900 	stmvc	r1, {r8, fp}
   10a00:	14000001 	strne	r0, [r0], #-1
   10a04:	002e6a0c 	eoreq	r6, lr, ip, lsl #20
   10a08:	83820900 	orrhi	r0, r2, #0, 18
   10a0c:	18000001 	stmdane	r0, {r0}
   10a10:	002fa50c 	eoreq	sl, pc, ip, lsl #10
   10a14:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
   10a18:	1c000001 	stcne	0, cr0, [r0], {1}
   10a1c:	0031340c 	eorseq	r3, r1, ip, lsl #8
   10a20:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
   10a24:	20000001 	andcs	r0, r0, r1
   10a28:	002f2c0c 	eoreq	r2, pc, ip, lsl #24
   10a2c:	e9850900 	stmib	r5, {r8, fp}
   10a30:	24000001 	strcs	r0, [r0], #-1
   10a34:	002f840c 	eoreq	r8, pc, ip, lsl #8
   10a38:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
   10a3c:	28000001 	stmdacs	r0, {r0}
   10a40:	0031e90c 	eorseq	lr, r1, ip, lsl #18
   10a44:	ff870900 			; <UNDEFINED> instruction: 0xff870900
   10a48:	2c000001 	stccs	0, cr0, [r0], {1}
   10a4c:	002ec90c 	eoreq	ip, lr, ip, lsl #18
   10a50:	15880900 	strne	r0, [r8, #2304]	; 0x900
   10a54:	30000002 	andcc	r0, r0, r2
   10a58:	0031d70c 	eorseq	sp, r1, ip, lsl #14
   10a5c:	31890900 	orrcc	r0, r9, r0, lsl #18
   10a60:	34000002 	strcc	r0, [r0], #-2
   10a64:	002da80c 	eoreq	sl, sp, ip, lsl #16
   10a68:	0a8a0900 	beq	fe292e70 <_estack+0xde28de70>
   10a6c:	38000002 	stmdacc	r0, {r1}
   10a70:	002feb0c 	eoreq	lr, pc, ip, lsl #22
   10a74:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
   10a78:	3c000002 	stccc	0, cr0, [r0], {2}
   10a7c:	00318a0c 	eorseq	r8, r1, ip, lsl #20
   10a80:	478c0900 	strmi	r0, [ip, r0, lsl #18]
   10a84:	40000002 	andmi	r0, r0, r2
   10a88:	002f0e0c 	eoreq	r0, pc, ip, lsl #28
   10a8c:	528d0900 	addpl	r0, sp, #0, 18
   10a90:	44000002 	strmi	r0, [r0], #-2
   10a94:	002d580c 	eoreq	r5, sp, ip, lsl #16
   10a98:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
   10a9c:	48000002 	stmdami	r0, {r1}
   10aa0:	30ba0200 	adcscc	r0, sl, r0, lsl #4
   10aa4:	8f090000 	svchi	0x00090000
   10aa8:	00000268 	andeq	r0, r0, r8, ror #4
   10aac:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
   10ab0:	00000399 	muleq	r0, r9, r3
   10ab4:	003d160c 	eorseq	r1, sp, ip, lsl #12
   10ab8:	ce4f0100 	dvfgte	f0, f7, f0
   10abc:	00000000 	andeq	r0, r0, r0
   10ac0:	003d470c 	eorseq	r4, sp, ip, lsl #14
   10ac4:	b8500100 	ldmdalt	r0, {r8}^
   10ac8:	04000000 	streq	r0, [r0], #-0
   10acc:	003c810c 	eorseq	r8, ip, ip, lsl #2
   10ad0:	ad510100 	ldfgee	f0, [r1, #-0]
   10ad4:	06000000 	streq	r0, [r0], -r0
   10ad8:	003c340c 	eorseq	r3, ip, ip, lsl #8
   10adc:	a2520100 	subsge	r0, r2, #0, 2
   10ae0:	07000000 	streq	r0, [r0, -r0]
   10ae4:	3d730200 	lfmcc	f0, 2, [r3, #-0]
   10ae8:	53010000 	movwpl	r0, #4096	; 0x1000
   10aec:	00000360 	andeq	r0, r0, r0, ror #6
   10af0:	000fa00d 	andeq	sl, pc, sp
   10af4:	01dc0200 	bicseq	r0, ip, r0, lsl #4
   10af8:	0003be03 	andeq	fp, r3, r3, lsl #28
   10afc:	0f5a0e00 	svceq	0x005a0e00
   10b00:	dc020000 	stcle	0, cr0, [r2], {-0}
   10b04:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10b08:	b50f0000 	strlt	r0, [pc, #-0]	; 10b10 <__exidx_end+0xaf10>
   10b0c:	0200000f 	andeq	r0, r0, #15
   10b10:	00ce022c 	sbceq	r0, lr, ip, lsr #4
   10b14:	10030000 	andne	r0, r3, r0
   10b18:	000010b9 	strheq	r1, [r0], -r9
   10b1c:	03022a04 	movweq	r2, #10756	; 0x2a04
   10b20:	00396911 	eorseq	r6, r9, r1, lsl r9
   10b24:	c3e90500 	mvngt	r0, #0, 10
   10b28:	03000000 	movweq	r0, #0
   10b2c:	000003fb 	strdeq	r0, [r0], -fp
   10b30:	0036b912 	eorseq	fp, r6, r2, lsl r9
   10b34:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
   10b38:	13000000 	movwne	r0, #0
   10b3c:	000039c2 	andeq	r3, r0, r2, asr #19
   10b40:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
   10b44:	0d000000 	stceq	0, cr0, [r0, #-0]
   10b48:	00003c49 	andeq	r3, r0, r9, asr #24
   10b4c:	03025c04 	movweq	r5, #11268	; 0x2c04
   10b50:	00000415 	andeq	r0, r0, r5, lsl r4
   10b54:	003c230e 	eorseq	r2, ip, lr, lsl #6
   10b58:	025c0400 	subseq	r0, ip, #0, 8
   10b5c:	000000ce 	andeq	r0, r0, lr, asr #1
   10b60:	30e41000 	rsccc	r1, r4, r0
   10b64:	40030000 	andmi	r0, r3, r0
   10b68:	cd0f0301 	stcgt	3, cr0, [pc, #-4]	; 10b6c <__exidx_end+0xaf6c>
   10b6c:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
   10b70:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
   10b74:	03030000 	movweq	r0, #12288	; 0x3000
   10b78:	0c970201 	lfmeq	f0, 4, [r7], {1}
   10b7c:	1d140000 	ldcne	0, cr0, [r4, #-0]
   10b80:	0a00003d 	beq	10c7c <__exidx_end+0xb07c>
   10b84:	0000009e 	muleq	r0, lr, r0
   10b88:	0000f400 	andeq	pc, r0, r0, lsl #8
   10b8c:	cd9c0100 	ldfgts	f0, [ip]
   10b90:	15000005 	strne	r0, [r0, #-5]
   10b94:	00003c79 	andeq	r3, r0, r9, ror ip
   10b98:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
   10b9c:	492a0000 	stmdbmi	sl!, {}	; <UNPREDICTABLE>
   10ba0:	3b160000 	blcc	590ba8 <__ccfg+0x570c00>
   10ba4:	0100003c 	tsteq	r0, ip, lsr r0
   10ba8:	0000ce7c 	andeq	ip, r0, ip, ror lr
   10bac:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
   10bb0:	000003a4 	andeq	r0, r0, r4, lsr #7
   10bb4:	00000000 	andeq	r0, r0, r0
   10bb8:	00001300 	andeq	r1, r0, r0, lsl #6
   10bbc:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
   10bc0:	b1180000 	tstlt	r8, r0
   10bc4:	01000003 	tsteq	r0, r3
   10bc8:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
   10bcc:	00000000 	andeq	r0, r0, r0
   10bd0:	00040000 	andeq	r0, r4, r0
   10bd4:	82010000 	andhi	r0, r1, #0
   10bd8:	0004151a 	andeq	r1, r4, sl, lsl r5
   10bdc:	00000000 	andeq	r0, r0, r0
   10be0:	00000800 	andeq	r0, r0, r0, lsl #16
   10be4:	a9a10100 	stmibge	r1!, {r8}
   10be8:	1b000004 	blne	10c00 <__exidx_end+0xb000>
   10bec:	00000000 	andeq	r0, r0, r0
   10bf0:	000008de 	ldrdeq	r0, [r0], -lr
   10bf4:	03cb1900 	biceq	r1, fp, #0, 18
   10bf8:	00000000 	andeq	r0, r0, r0
   10bfc:	00060000 	andeq	r0, r6, r0
   10c00:	b1010000 	mrslt	r0, (UNDEF: 1)
   10c04:	00041e19 	andeq	r1, r4, r9, lsl lr
   10c08:	00000000 	andeq	r0, r0, r0
   10c0c:	00000400 	andeq	r0, r0, r0, lsl #8
   10c10:	1ab20100 	bne	fec91018 <_estack+0xdec8c018>
   10c14:	000003fb 	strdeq	r0, [r0], -fp
   10c18:	00000000 	andeq	r0, r0, r0
   10c1c:	0000000a 	andeq	r0, r0, sl
   10c20:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
   10c24:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
   10c28:	11000004 	tstne	r0, r4
   10c2c:	03cb1900 	biceq	r1, fp, #0, 18
   10c30:	00000000 	andeq	r0, r0, r0
   10c34:	00040000 	andeq	r0, r4, r0
   10c38:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   10c3c:	00041e19 	andeq	r1, r4, r9, lsl lr
   10c40:	00000000 	andeq	r0, r0, r0
   10c44:	00000200 	andeq	r0, r0, r0, lsl #4
   10c48:	19ba0100 	ldmibne	sl!, {r8}
   10c4c:	000003cb 	andeq	r0, r0, fp, asr #7
   10c50:	00000000 	andeq	r0, r0, r0
   10c54:	00000006 	andeq	r0, r0, r6
   10c58:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
   10c5c:	00000004 	andeq	r0, r0, r4
   10c60:	02000000 	andeq	r0, r0, #0
   10c64:	01000000 	mrseq	r0, (UNDEF: 0)
   10c68:	00001cd0 	ldrdeq	r1, [r0], -r0
   10c6c:	052e0000 	streq	r0, [lr, #-0]!
   10c70:	011d0000 	tsteq	sp, r0
   10c74:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
   10c78:	001c0007 	andseq	r0, ip, r7
   10c7c:	3f000000 	svccc	0x00000000
   10c80:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10c84:	0a035001 	beq	e4c90 <__ccfg+0xc4ce8>
   10c88:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
   10c8c:	00000000 	andeq	r0, r0, r0
   10c90:	000008ef 	andeq	r0, r0, pc, ror #17
   10c94:	00000557 	andeq	r0, r0, r7, asr r5
   10c98:	0151011d 	cmpeq	r1, sp, lsl r1
   10c9c:	50011d31 	andpl	r1, r1, r1, lsr sp
   10ca0:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
   10ca4:	00000000 	andeq	r0, r0, r0
   10ca8:	000008ef 	andeq	r0, r0, pc, ror #17
   10cac:	0000056f 	andeq	r0, r0, pc, ror #10
   10cb0:	0151011d 	cmpeq	r1, sp, lsl r1
   10cb4:	50011d33 	andpl	r1, r1, r3, lsr sp
   10cb8:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
   10cbc:	00000000 	andeq	r0, r0, r0
   10cc0:	00000905 	andeq	r0, r0, r5, lsl #18
   10cc4:	00000582 	andeq	r0, r0, r2, lsl #11
   10cc8:	0150011d 	cmpeq	r0, sp, lsl r1
   10ccc:	001c0031 	andseq	r0, ip, r1, lsr r0
   10cd0:	91000000 	mrsls	r0, (UNDEF: 0)
   10cd4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10cd8:	37015001 	strcc	r5, [r1, -r1]
   10cdc:	00001c00 	andeq	r1, r0, r0, lsl #24
   10ce0:	05a00000 	streq	r0, [r0, #0]!
   10ce4:	011d0000 	tsteq	sp, r0
   10ce8:	00370150 	eorseq	r0, r7, r0, asr r1
   10cec:	0000001c 	andeq	r0, r0, ip, lsl r0
   10cf0:	0005b000 	andeq	fp, r5, r0
   10cf4:	50011d00 	andpl	r1, r1, r0, lsl #26
   10cf8:	00007602 	andeq	r7, r0, r2, lsl #12
   10cfc:	0000001c 	andeq	r0, r0, ip, lsl r0
   10d00:	0005c000 	andeq	ip, r5, r0
   10d04:	50011d00 	andpl	r1, r1, r0, lsl #26
   10d08:	00007602 	andeq	r7, r0, r2, lsl #12
   10d0c:	0000001f 	andeq	r0, r0, pc, lsl r0
   10d10:	50011d00 	andpl	r1, r1, r0, lsl #26
   10d14:	00007602 	andeq	r7, r0, r2, lsl #12
   10d18:	3bbf2000 	blcc	fefd8d20 <_estack+0xdefd3d20>
   10d1c:	010a0000 	mrseq	r0, (UNDEF: 10)
   10d20:	00453001 	subeq	r3, r5, r1
   10d24:	00022000 	andeq	r2, r2, r0
   10d28:	c89c0100 	ldmgt	ip, {r8}
   10d2c:	21000007 	tstcs	r0, r7
   10d30:	00003cbf 			; <UNDEFINED> instruction: 0x00003cbf
   10d34:	00ceda01 	sbceq	sp, lr, r1, lsl #20
   10d38:	49550000 	ldmdbmi	r5, {}^	; <UNPREDICTABLE>
   10d3c:	63150000 	tstvs	r5, #0
   10d40:	0100003b 	tsteq	r0, fp, lsr r0
   10d44:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   10d48:	00498100 	subeq	r8, r9, r0, lsl #2
   10d4c:	3cd91500 	cfldr64cc	mvdx1, [r9], {0}
   10d50:	dd010000 	stcle	0, cr0, [r1, #-0]
   10d54:	000000c3 	andeq	r0, r0, r3, asr #1
   10d58:	0000499f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
   10d5c:	003c9f15 	eorseq	r9, ip, r5, lsl pc
   10d60:	c3de0100 	bicsgt	r0, lr, #0, 2
   10d64:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
   10d68:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
   10d6c:	00003d65 	andeq	r3, r0, r5, ror #26
   10d70:	00c3df01 	sbceq	sp, r3, r1, lsl #30
   10d74:	4a170000 	bmi	5d0d7c <__ccfg+0x5b0dd4>
   10d78:	55150000 	ldrpl	r0, [r5, #-0]
   10d7c:	0100003b 	tsteq	r0, fp, lsr r0
   10d80:	0000c3e0 	andeq	ip, r0, r0, ror #7
   10d84:	004a3500 	subeq	r3, sl, r0, lsl #10
   10d88:	3b6b2200 	blcc	1ad9590 <__ccfg+0x1ab95e8>
   10d8c:	e1010000 	mrs	r0, (UNDEF: 1)
   10d90:	000000c3 	andeq	r0, r0, r3, asr #1
   10d94:	0d155301 	ldceq	3, cr5, [r5, #-4]
   10d98:	01000036 	tsteq	r0, r6, lsr r0
   10d9c:	0000cee2 	andeq	ip, r0, r2, ror #29
   10da0:	004a4800 	subeq	r4, sl, r0, lsl #16
   10da4:	3cfd1500 	cfldr64cc	mvdx1, [sp]
   10da8:	e3010000 	movw	r0, #4096	; 0x1000
   10dac:	000000ce 	andeq	r0, r0, lr, asr #1
   10db0:	00004a5b 	andeq	r4, r0, fp, asr sl
   10db4:	003b7f15 	eorseq	r7, fp, r5, lsl pc
   10db8:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
   10dbc:	7a000000 	bvc	10dc4 <__exidx_end+0xb1c4>
   10dc0:	2300004a 	movwcs	r0, #74	; 0x4a
   10dc4:	01006964 	tsteq	r0, r4, ror #18
   10dc8:	0000cee5 	andeq	ip, r0, r5, ror #29
   10dcc:	004a8d00 	subeq	r8, sl, r0, lsl #26
   10dd0:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
   10dd4:	e6010069 	str	r0, [r1], -r9, rrx
   10dd8:	000000ce 	andeq	r0, r0, lr, asr #1
   10ddc:	00004ac3 	andeq	r4, r0, r3, asr #21
   10de0:	00697423 	rsbeq	r7, r9, r3, lsr #8
   10de4:	00cee701 	sbceq	lr, lr, r1, lsl #14
   10de8:	4af90000 	bmi	ffe50df0 <_estack+0xdfe4bdf0>
   10dec:	63230000 			; <UNDEFINED> instruction: 0x63230000
   10df0:	e8010064 	stmda	r1, {r2, r5, r6}
   10df4:	000000ce 	andeq	r0, r0, lr, asr #1
   10df8:	00004b69 	andeq	r4, r0, r9, ror #22
   10dfc:	006c6323 	rsbeq	r6, ip, r3, lsr #6
   10e00:	00cee901 	sbceq	lr, lr, r1, lsl #18
   10e04:	4b7c0000 	blmi	1f10e0c <__ccfg+0x1ef0e64>
   10e08:	90150000 	andsls	r0, r5, r0
   10e0c:	0100003b 	tsteq	r0, fp, lsr r0
   10e10:	0000ceea 	andeq	ip, r0, sl, ror #29
   10e14:	004b8f00 	subeq	r8, fp, r0, lsl #30
   10e18:	006b2400 	rsbeq	r2, fp, r0, lsl #8
   10e1c:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
   10e20:	71130000 	tstvc	r3, r0
   10e24:	0100003c 	tsteq	r0, ip, lsr r0
   10e28:	0000ceec 	andeq	ip, r0, ip, ror #29
   10e2c:	3c5f1500 	cfldr64cc	mvdx1, [pc], {-0}
   10e30:	ed010000 	stc	0, cr0, [r1, #-0]
   10e34:	000000ce 	andeq	r0, r0, lr, asr #1
   10e38:	00004bad 	andeq	r4, r0, sp, lsr #23
   10e3c:	003c2f15 	eorseq	r2, ip, r5, lsl pc
   10e40:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
   10e44:	d6000000 	strle	r0, [r0], -r0
   10e48:	1500004b 	strne	r0, [r0, #-75]	; 0xffffffb5
   10e4c:	00003c5a 	andeq	r3, r0, sl, asr ip
   10e50:	00ceef01 	sbceq	lr, lr, r1, lsl #30
   10e54:	4bf50000 	blmi	ffd50e5c <_estack+0xdfd4be5c>
   10e58:	3a150000 	bcc	550e60 <__ccfg+0x530eb8>
   10e5c:	0100003d 	tsteq	r0, sp, lsr r0
   10e60:	0007c8f0 	strdeq	ip, [r7], -r0
   10e64:	004c3900 	subeq	r3, ip, r0, lsl #18
   10e68:	455e2500 	ldrbmi	r2, [lr, #-1280]	; 0xfffffb00
   10e6c:	00120000 	andseq	r0, r2, r0
   10e70:	073b0000 	ldreq	r0, [fp, -r0]!
   10e74:	e5260000 	str	r0, [r6, #-0]!
   10e78:	0100003c 	tsteq	r0, ip, lsr r0
   10e7c:	00c3010a 	sbceq	r0, r3, sl, lsl #2
   10e80:	4c510000 	mrami	r0, r1, acc0
   10e84:	27000000 	strcs	r0, [r0, -r0]
   10e88:	000003d4 	ldrdeq	r0, [r0], -r4
   10e8c:	00004584 	andeq	r4, r0, r4, lsl #11
   10e90:	00000006 	andeq	r0, r0, r6
   10e94:	68011101 	stmdavs	r1, {r0, r8, ip}
   10e98:	28000007 	stmdacs	r0, {r0, r1, r2}
   10e9c:	000003e4 	andeq	r0, r0, r4, ror #7
   10ea0:	00458429 	subeq	r8, r5, r9, lsr #8
   10ea4:	00000600 	andeq	r0, r0, r0, lsl #12
   10ea8:	03ef2a00 	mvneq	r2, #0, 20
   10eac:	4c640000 	stclmi	0, cr0, [r4], #-0
   10eb0:	00000000 	andeq	r0, r0, r0
   10eb4:	0003d427 	andeq	sp, r3, r7, lsr #8
   10eb8:	00459c00 	subeq	r9, r5, r0, lsl #24
   10ebc:	00000600 	andeq	r0, r0, r0, lsl #12
   10ec0:	011b0100 	tsteq	fp, r0, lsl #2
   10ec4:	00000795 	muleq	r0, r5, r7
   10ec8:	0003e428 	andeq	lr, r3, r8, lsr #8
   10ecc:	459c2900 	ldrmi	r2, [ip, #2304]	; 0x900
   10ed0:	00060000 	andeq	r0, r6, r0
   10ed4:	ef2a0000 	svc	0x002a0000
   10ed8:	77000003 	strvc	r0, [r0, -r3]
   10edc:	0000004c 	andeq	r0, r0, ip, asr #32
   10ee0:	03d42b00 	bicseq	r2, r4, #0, 22
   10ee4:	45a60000 	strmi	r0, [r6, #0]!
   10ee8:	13180000 	tstne	r8, #0
   10eec:	1f010000 	svcne	0x00010000
   10ef0:	0007be01 	andeq	fp, r7, r1, lsl #28
   10ef4:	03e42800 	mvneq	r2, #0, 16
   10ef8:	182c0000 	stmdane	ip!, {}	; <UNPREDICTABLE>
   10efc:	2a000013 	bcs	10f50 <__exidx_end+0xb350>
   10f00:	000003ef 	andeq	r0, r0, pc, ror #7
   10f04:	00004c8a 	andeq	r4, r0, sl, lsl #25
   10f08:	501b0000 	andspl	r0, fp, r0
   10f0c:	1b000045 	blne	11028 <__exidx_end+0xb428>
   10f10:	00000009 	andeq	r0, r0, r9
   10f14:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
   10f18:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
   10f1c:	20000000 	andcs	r0, r0, r0
   10f20:	00003b95 	muleq	r0, r5, fp
   10f24:	5001170a 	andpl	r1, r1, sl, lsl #14
   10f28:	60000047 	andvs	r0, r0, r7, asr #32
   10f2c:	01000000 	mrseq	r0, (UNDEF: 0)
   10f30:	0008339c 	muleq	r8, ip, r3
   10f34:	3b632600 	blcc	18da73c <__ccfg+0x18ba794>
   10f38:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
   10f3c:	0000c301 	andeq	ip, r0, r1, lsl #6
   10f40:	004c9d00 	subeq	r9, ip, r0, lsl #26
   10f44:	3c892600 	stccc	6, cr2, [r9], {0}
   10f48:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   10f4c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10f50:	004cc800 	subeq	ip, ip, r0, lsl #16
   10f54:	2f222600 	svccs	0x00222600
   10f58:	ba010000 	blt	50f60 <__ccfg+0x30fb8>
   10f5c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10f60:	004cdb00 	subeq	sp, ip, r0, lsl #22
   10f64:	3c5f2600 	mrrccc	6, 0, r2, pc, cr0	; <UNPREDICTABLE>
   10f68:	bb010000 	bllt	50f70 <__ccfg+0x30fc8>
   10f6c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10f70:	004d0200 	subeq	r0, sp, r0, lsl #4
   10f74:	475e1b00 	ldrbmi	r1, [lr, -r0, lsl #22]
   10f78:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
   10f7c:	20000000 	andcs	r0, r0, r0
   10f80:	00003d86 	andeq	r3, r0, r6, lsl #27
   10f84:	0001290a 	andeq	r2, r1, sl, lsl #18
   10f88:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   10f8c:	01000000 	mrseq	r0, (UNDEF: 0)
   10f90:	00088a9c 	muleq	r8, ip, sl
   10f94:	3cb22600 	ldccc	6, cr2, [r2]
   10f98:	e7010000 	str	r0, [r1, -r0]
   10f9c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10fa0:	004d2b00 	subeq	r2, sp, r0, lsl #22
   10fa4:	3d582600 	ldclcc	6, cr2, [r8, #-0]
   10fa8:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
   10fac:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10fb0:	004d3e00 	subeq	r3, sp, r0, lsl #28
   10fb4:	360d2600 	strcc	r2, [sp], -r0, lsl #12
   10fb8:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
   10fbc:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10fc0:	004d5100 	subeq	r5, sp, r0, lsl #2
   10fc4:	3d062600 	stccc	6, cr2, [r6, #-0]
   10fc8:	ea010000 	b	50fd0 <__ccfg+0x31028>
   10fcc:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10fd0:	004d6400 	subeq	r6, sp, r0, lsl #8
   10fd4:	072e0000 	streq	r0, [lr, -r0]!
   10fd8:	0a00003c 	beq	110d0 <__exidx_end+0xb4d0>
   10fdc:	00ce0142 	sbceq	r0, lr, r2, asr #2
   10fe0:	47b00000 	ldrmi	r0, [r0, r0]!
   10fe4:	00180000 	andseq	r0, r8, r0
   10fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
   10fec:	003db322 	eorseq	fp, sp, r2, lsr #6
   10ff0:	99550100 	ldmdbls	r5, {r8}^
   10ff4:	05000003 	streq	r0, [r0, #-3]
   10ff8:	00065803 	andeq	r5, r6, r3, lsl #16
   10ffc:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
   11000:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
   11004:	c1300000 	teqgt	r0, r0
   11008:	0c000008 	stceq	0, cr0, [r0], {8}
   1100c:	07040300 	streq	r0, [r4, -r0, lsl #6]
   11010:	00002c95 	muleq	r0, r5, ip
   11014:	003ced22 	eorseq	lr, ip, r2, lsr #26
   11018:	d9610100 	stmdble	r1!, {r8}^
   1101c:	05000008 	streq	r0, [r0, #-8]
   11020:	00000003 	andeq	r0, r0, r3
   11024:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
   11028:	ef310000 	svc	0x00310000
   1102c:	09000029 	stmdbeq	r0, {r0, r3, r5}
   11030:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
   11034:	00d90800 	sbcseq	r0, r9, r0, lsl #16
   11038:	31000000 	mrscc	r0, (UNDEF: 0)
   1103c:	00002cff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   11040:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
   11044:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   11048:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1104c:	000000ce 	andeq	r0, r0, lr, asr #1
   11050:	2d383200 	lfmcs	f3, 4, [r8, #-0]
   11054:	10030000 	andne	r0, r3, r0
   11058:	0000ce01 	andeq	ip, r0, r1, lsl #28
   1105c:	00091b00 	andeq	r1, r9, r0, lsl #22
   11060:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   11064:	33000000 	movwcc	r0, #0
   11068:	00002b52 	andeq	r2, r0, r2, asr fp
   1106c:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
   11070:	cc000000 	stcgt	0, cr0, [r0], {-0}
   11074:	04000003 	streq	r0, [r0], #-3
   11078:	003e6a00 	eorseq	r6, lr, r0, lsl #20
   1107c:	21010400 	tstcs	r1, r0, lsl #8
   11080:	0100002a 	tsteq	r0, sl, lsr #32
   11084:	0000409a 	muleq	r0, sl, r0
   11088:	00002ae8 	andeq	r2, r0, r8, ror #21
   1108c:	00001390 	muleq	r0, r0, r3
   11090:	00000000 	andeq	r0, r0, r0
   11094:	00008a30 	andeq	r8, r0, r0, lsr sl
   11098:	4d060102 	stfmis	f0, [r6, #-8]
   1109c:	0200000c 	andeq	r0, r0, #12
   110a0:	0c4b0801 	mcrreq	8, 0, r0, fp, cr1
   110a4:	02020000 	andeq	r0, r2, #0
   110a8:	000a5b05 	andeq	r5, sl, r5, lsl #22
   110ac:	07020200 	streq	r0, [r2, -r0, lsl #4]
   110b0:	00000d48 	andeq	r0, r0, r8, asr #26
   110b4:	ed050402 	cfstrs	mvf0, [r5, #-8]
   110b8:	03000007 	movweq	r0, #7
   110bc:	00002994 	muleq	r0, r4, r9
   110c0:	00534103 	subseq	r4, r3, r3, lsl #2
   110c4:	04020000 	streq	r0, [r2], #-0
   110c8:	00041d07 	andeq	r1, r4, r7, lsl #26
   110cc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   110d0:	000007e8 	andeq	r0, r0, r8, ror #15
   110d4:	18070802 	stmdane	r7, {r1, fp}
   110d8:	04000004 	streq	r0, [r0], #-4
   110dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   110e0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   110e4:	00042207 	andeq	r2, r4, r7, lsl #4
   110e8:	29960300 	ldmibcs	r6, {r8, r9}
   110ec:	20040000 	andcs	r0, r4, r0
   110f0:	00000048 	andeq	r0, r0, r8, asr #32
   110f4:	63020105 	movwvs	r0, #8453	; 0x2105
   110f8:	000000a2 	andeq	r0, r0, r2, lsr #1
   110fc:	003fd406 	eorseq	sp, pc, r6, lsl #8
   11100:	14060000 	strne	r0, [r6], #-0
   11104:	02000040 	andeq	r0, r0, #64	; 0x40
   11108:	003f8406 	eorseq	r8, pc, r6, lsl #8
   1110c:	c4060400 	strgt	r0, [r6], #-1024	; 0xfffffc00
   11110:	0800003d 	stmdaeq	r0, {r0, r2, r3, r4, r5}
   11114:	3f700300 	svccc	0x00700300
   11118:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
   1111c:	00000081 	andeq	r0, r0, r1, lsl #1
   11120:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
   11124:	000000da 	ldrdeq	r0, [r0], -sl
   11128:	00408a06 	subeq	r8, r0, r6, lsl #20
   1112c:	dc067f00 	stcle	15, cr7, [r6], {-0}
   11130:	0000003d 	andeq	r0, r0, sp, lsr r0
   11134:	00413b06 	subeq	r3, r1, r6, lsl #22
   11138:	c8060100 	stmdagt	r6, {r8}
   1113c:	0200003f 	andeq	r0, r0, #63	; 0x3f
   11140:	00412d06 	subeq	r2, r1, r6, lsl #26
   11144:	c1060300 	mrsgt	r0, LR_und
   11148:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   1114c:	41470300 	mrsmi	r0, (UNDEF: 119)
   11150:	ac020000 	stcge	0, cr0, [r2], {-0}
   11154:	000000ad 	andeq	r0, r0, sp, lsr #1
   11158:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
   1115c:	00012501 	andeq	r2, r1, r1, lsl #10
   11160:	3f9e0600 	svccc	0x009e0600
   11164:	067f0000 	ldrbteq	r0, [pc], -r0
   11168:	00003e8c 	andeq	r3, r0, ip, lsl #29
   1116c:	3ee80600 	cdpcc	6, 14, cr0, cr8, cr0, {0}
   11170:	06010000 	streq	r0, [r1], -r0
   11174:	00003f24 	andeq	r3, r0, r4, lsr #30
   11178:	406f0602 	rsbmi	r0, pc, r2, lsl #12
   1117c:	06030000 	streq	r0, [r3], -r0
   11180:	00003de8 	andeq	r3, r0, r8, ror #27
   11184:	3eb00604 	cdpcc	6, 11, cr0, cr0, cr4, {0}
   11188:	06050000 	streq	r0, [r5], -r0
   1118c:	00004049 	andeq	r4, r0, r9, asr #32
   11190:	405c0606 	subsmi	r0, ip, r6, lsl #12
   11194:	00070000 	andeq	r0, r7, r0
   11198:	003e7408 	eorseq	r7, lr, r8, lsl #8
   1119c:	01470200 	mrseq	r0, (UNDEF: 103)
   111a0:	000000e5 	andeq	r0, r0, r5, ror #1
   111a4:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
   111a8:	00015f01 	andeq	r5, r1, r1, lsl #30
   111ac:	3f150600 	svccc	0x00150600
   111b0:	067f0000 	ldrbteq	r0, [pc], -r0
   111b4:	00003f3e 	andeq	r3, r0, lr, lsr pc
   111b8:	3fba0600 	svccc	0x00ba0600
   111bc:	06010000 	streq	r0, [r1], -r0
   111c0:	00003e01 	andeq	r3, r0, r1, lsl #28
   111c4:	40240602 	eormi	r0, r4, r2, lsl #12
   111c8:	06030000 	streq	r0, [r3], -r0
   111cc:	00003ed7 	ldrdeq	r3, [r0], -r7
   111d0:	9d080004 	stcls	0, cr0, [r8, #-16]
   111d4:	0200003e 	andeq	r0, r0, #62	; 0x3e
   111d8:	01310160 	teqeq	r1, r0, ror #2
   111dc:	01070000 	mrseq	r0, (UNDEF: 7)
   111e0:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
   111e4:	06000001 	streq	r0, [r0], -r1
   111e8:	00003f54 	andeq	r3, r0, r4, asr pc
   111ec:	4080067f 	addmi	r0, r0, pc, ror r6
   111f0:	060a0000 	streq	r0, [sl], -r0
   111f4:	00003fe5 	andeq	r3, r0, r5, ror #31
   111f8:	400a0614 	andmi	r0, sl, r4, lsl r6
   111fc:	06150000 	ldreq	r0, [r5], -r0
   11200:	00003fb0 			; <UNDEFINED> instruction: 0x00003fb0
   11204:	40360616 	eorsmi	r0, r6, r6, lsl r6
   11208:	00170000 	andseq	r0, r7, r0
   1120c:	003e7f08 	eorseq	r7, lr, r8, lsl #30
   11210:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
   11214:	0000016b 	andeq	r0, r0, fp, ror #2
   11218:	0040c609 	subeq	ip, r0, r9, lsl #12
   1121c:	01070200 	mrseq	r0, (UNDEF: 39)
   11220:	00000076 	andeq	r0, r0, r6, ror r0
   11224:	3e130a03 	vnmlscc.f32	s0, s6, s6
   11228:	6a020000 	bvs	91230 <__ccfg+0x71288>
   1122c:	00015f01 	andeq	r5, r1, r1, lsl #30
   11230:	01da0100 	bicseq	r0, sl, r0, lsl #2
   11234:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
   11238:	0100003f 	tsteq	r0, pc, lsr r0
   1123c:	00015f68 	andeq	r5, r1, r8, ror #30
   11240:	3df90b00 			; <UNDEFINED> instruction: 0x3df90b00
   11244:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
   11248:	00000076 	andeq	r0, r0, r6, ror r0
   1124c:	41740900 	cmnmi	r4, r0, lsl #18
   11250:	32020000 	andcc	r0, r2, #0
   11254:	00007601 	andeq	r7, r0, r1, lsl #12
   11258:	060c0300 	streq	r0, [ip], -r0, lsl #6
   1125c:	02000041 	andeq	r0, r0, #65	; 0x41
   11260:	0000a272 	andeq	sl, r0, r2, ror r2
   11264:	00000000 	andeq	r0, r0, r0
   11268:	00001000 	andeq	r1, r0, r0
   1126c:	0d9c0100 	ldfeqs	f0, [ip]
   11270:	00003e30 	andeq	r3, r0, r0, lsr lr
   11274:	00dab602 	sbcseq	fp, sl, r2, lsl #12
   11278:	00000000 	andeq	r0, r0, r0
   1127c:	00180000 	andseq	r0, r8, r0
   11280:	9c010000 	stcls	0, cr0, [r1], {-0}
   11284:	00000225 	andeq	r0, r0, r5, lsr #4
   11288:	003e6b0e 	eorseq	r6, lr, lr, lsl #22
   1128c:	da520100 	ble	1491694 <__ccfg+0x14716ec>
   11290:	77000000 	strvc	r0, [r0, -r0]
   11294:	0000004d 	andeq	r0, r0, sp, asr #32
   11298:	0001b20f 	andeq	fp, r1, pc, lsl #4
   1129c:	0047c800 	subeq	ip, r7, r0, lsl #16
   112a0:	00004c00 	andeq	r4, r0, r0, lsl #24
   112a4:	6e9c0100 	fmlvse	f0, f4, f0
   112a8:	10000002 	andne	r0, r0, r2
   112ac:	000001c3 	andeq	r0, r0, r3, asr #3
   112b0:	00004d9f 	muleq	r0, pc, sp	; <UNPREDICTABLE>
   112b4:	0001ce10 	andeq	ip, r1, r0, lsl lr
   112b8:	004dbf00 	subeq	fp, sp, r0, lsl #30
   112bc:	47d81100 	ldrbmi	r1, [r8, r0, lsl #2]
   112c0:	000e0000 	andeq	r0, lr, r0
   112c4:	c3120000 	tstgt	r2, #0
   112c8:	12000001 	andne	r0, r0, #1
   112cc:	000001ce 	andeq	r0, r0, lr, asr #3
   112d0:	0001a513 	andeq	sl, r1, r3, lsl r5
   112d4:	0047d800 	subeq	sp, r7, r0, lsl #16
   112d8:	00000400 	andeq	r0, r0, r0, lsl #8
   112dc:	00700100 	rsbseq	r0, r0, r0, lsl #2
   112e0:	3fef1400 	svccc	0x00ef1400
   112e4:	51020000 	mrspl	r0, (UNDEF: 2)
   112e8:	00012501 	andeq	r2, r1, r1, lsl #10
   112ec:	00000000 	andeq	r0, r0, r0
   112f0:	00003000 	andeq	r3, r0, r0
   112f4:	ca9c0100 	bgt	fe7116fc <_estack+0xde70c6fc>
   112f8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
   112fc:	00004040 	andeq	r4, r0, r0, asr #32
   11300:	01258501 			; <UNDEFINED> instruction: 0x01258501
   11304:	4df30000 	ldclmi	0, cr0, [r3]
   11308:	ba0b0000 	blt	2d1310 <__ccfg+0x2b1368>
   1130c:	01000040 	tsteq	r0, r0, asr #32
   11310:	00007686 	andeq	r7, r0, r6, lsl #13
   11314:	3f620e00 	svccc	0x00620e00
   11318:	87010000 	strhi	r0, [r1, -r0]
   1131c:	00000076 	andeq	r0, r0, r6, ror r0
   11320:	00004e13 	andeq	r4, r0, r3, lsl lr
   11324:	0001da13 	andeq	sp, r1, r3, lsl sl
   11328:	00000000 	andeq	r0, r0, r0
   1132c:	00000400 	andeq	r0, r0, r0, lsl #8
   11330:	15860100 	strne	r0, [r6, #256]	; 0x100
   11334:	00000000 	andeq	r0, r0, r0
   11338:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   1133c:	40e41600 	rscmi	r1, r4, r0, lsl #12
   11340:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
   11344:	00007601 	andeq	r7, r0, r1, lsl #12
   11348:	02e80300 	rsceq	r0, r8, #0, 6
   1134c:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
   11350:	0200003e 	andeq	r0, r0, #62	; 0x3e
   11354:	0076011b 	rsbseq	r0, r6, fp, lsl r1
   11358:	14000000 	strne	r0, [r0], #-0
   1135c:	00003e4e 	andeq	r3, r0, lr, asr #28
   11360:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
   11364:	14000001 	strne	r0, [r0], #-1
   11368:	6c000048 	stcvs	0, cr0, [r0], {72}	; 0x48
   1136c:	01000000 	mrseq	r0, (UNDEF: 0)
   11370:	0003659c 	muleq	r3, ip, r5
   11374:	3eaa0e00 	cdpcc	14, 10, cr0, cr10, cr0, {0}
   11378:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
   1137c:	00000199 	muleq	r0, r9, r1
   11380:	00004e26 	andeq	r4, r0, r6, lsr #28
   11384:	003f350b 	eorseq	r3, pc, fp, lsl #10
   11388:	76a90100 	strtvc	r0, [r9], r0, lsl #2
   1138c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11390:	000040fb 	strdeq	r4, [r0], -fp
   11394:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
   11398:	54010000 	strpl	r0, [r1], #-0
   1139c:	0001a519 	andeq	sl, r1, r9, lsl r5
   113a0:	00481600 	subeq	r1, r8, r0, lsl #12
   113a4:	00136000 	andseq	r6, r3, r0
   113a8:	1aa90100 	bne	fea517b0 <_estack+0xdea4c7b0>
   113ac:	000002ca 	andeq	r0, r0, sl, asr #5
   113b0:	0000481a 	andeq	r4, r0, sl, lsl r8
   113b4:	00001378 	andeq	r1, r0, r8, ror r3
   113b8:	035baa01 	cmpeq	fp, #4096	; 0x1000
   113bc:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
   113c0:	10000013 	andne	r0, r0, r3, lsl r0
   113c4:	000002db 	ldrdeq	r0, [r0], -fp
   113c8:	00004e83 	andeq	r4, r0, r3, lsl #29
   113cc:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
   113d0:	b2000048 	andlt	r0, r0, #72	; 0x48
   113d4:	00000001 	andeq	r0, r0, r1
   113d8:	003ef909 	eorseq	pc, lr, r9, lsl #18
   113dc:	01830200 	orreq	r0, r3, r0, lsl #4
   113e0:	00000372 	andeq	r0, r0, r2, ror r3
   113e4:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
   113e8:	00000c97 	muleq	r0, r7, ip
   113ec:	00415509 	subeq	r5, r1, r9, lsl #10
   113f0:	01f00200 	mvnseq	r0, r0, lsl #4
   113f4:	00000372 	andeq	r0, r0, r2, ror r3
   113f8:	36561c03 	ldrbcc	r1, [r6], -r3, lsl #24
   113fc:	43020000 	movwmi	r0, #8192	; 0x2000
   11400:	00488002 	subeq	r8, r8, r2
   11404:	00001600 	andeq	r1, r0, r0, lsl #12
   11408:	1d9c0100 	ldfnes	f0, [ip]
   1140c:	00000365 	andeq	r0, r0, r5, ror #6
   11410:	00004882 	andeq	r4, r0, r2, lsl #17
   11414:	00000004 	andeq	r0, r0, r4
   11418:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
   1141c:	86150000 	ldrhi	r0, [r5], -r0
   11420:	b2000048 	andlt	r0, r0, #72	; 0x48
   11424:	00000001 	andeq	r0, r0, r1
   11428:	0003791e 	andeq	r7, r3, lr, lsl r9
   1142c:	00488a00 	subeq	r8, r8, r0, lsl #20
   11430:	00000400 	andeq	r0, r0, r0, lsl #8
   11434:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
   11438:	0000488e 	andeq	r4, r0, lr, lsl #17
   1143c:	000002e8 	andeq	r0, r0, r8, ror #5
   11440:	a7000000 	strge	r0, [r0, -r0]
   11444:	04000005 	streq	r0, [r0], #-5
   11448:	00403800 	subeq	r3, r0, r0, lsl #16
   1144c:	21010400 	tstcs	r1, r0, lsl #8
   11450:	0100002a 	tsteq	r0, sl, lsr #32
   11454:	0000424c 	andeq	r4, r0, ip, asr #4
   11458:	00002ae8 	andeq	r2, r0, r8, ror #21
   1145c:	000013c8 	andeq	r1, r0, r8, asr #7
   11460:	00000000 	andeq	r0, r0, r0
   11464:	00008c5f 	andeq	r8, r0, pc, asr ip
   11468:	4d060102 	stfmis	f0, [r6, #-8]
   1146c:	0300000c 	movweq	r0, #12
   11470:	000029fc 	strdeq	r2, [r0], -ip
   11474:	00371d03 	eorseq	r1, r7, r3, lsl #26
   11478:	01020000 	mrseq	r0, (UNDEF: 2)
   1147c:	000c4b08 	andeq	r4, ip, r8, lsl #22
   11480:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   11484:	00000a5b 	andeq	r0, r0, fp, asr sl
   11488:	002df203 	eoreq	pc, sp, r3, lsl #4
   1148c:	502b0300 	eorpl	r0, fp, r0, lsl #6
   11490:	02000000 	andeq	r0, r0, #0
   11494:	0d480702 	stcleq	7, cr0, [r8, #-8]
   11498:	04020000 	streq	r0, [r2], #-0
   1149c:	0007ed05 	andeq	lr, r7, r5, lsl #26
   114a0:	29940300 	ldmibcs	r4, {r8, r9}
   114a4:	41030000 	mrsmi	r0, (UNDEF: 3)
   114a8:	00000069 	andeq	r0, r0, r9, rrx
   114ac:	1d070402 	cfstrsne	mvf0, [r7, #-8]
   114b0:	02000004 	andeq	r0, r0, #4
   114b4:	07e80508 	strbeq	r0, [r8, r8, lsl #10]!
   114b8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   114bc:	00041807 	andeq	r1, r4, r7, lsl #16
   114c0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   114c4:	00746e69 	rsbseq	r6, r4, r9, ror #28
   114c8:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
   114cc:	03000004 	movweq	r0, #4
   114d0:	000029fe 	strdeq	r2, [r0], -lr
   114d4:	002c1404 	eoreq	r1, ip, r4, lsl #8
   114d8:	f4030000 	vst4.8	{d0-d3}, [r3], r0
   114dc:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
   114e0:	0000451a 	andeq	r4, r0, sl, lsl r5
   114e4:	29960300 	ldmibcs	r6, {r8, r9}
   114e8:	20040000 	andcs	r0, r4, r0
   114ec:	0000005e 	andeq	r0, r0, lr, asr r0
   114f0:	0041c505 	subeq	ip, r1, r5, lsl #10
   114f4:	03890100 	orreq	r0, r9, #0, 2
   114f8:	000000e6 	andeq	r0, r0, r6, ror #1
   114fc:	0041a706 	subeq	sl, r1, r6, lsl #14
   11500:	a2890100 	addge	r0, r9, #0, 2
   11504:	06000000 	streq	r0, [r0], -r0
   11508:	00004218 	andeq	r4, r0, r8, lsl r2
   1150c:	00a28901 	adceq	r8, r2, r1, lsl #18
   11510:	73060000 	movwvc	r0, #24576	; 0x6000
   11514:	01000042 	tsteq	r0, r2, asr #32
   11518:	0000a289 	andeq	sl, r0, r9, lsl #5
   1151c:	299f0700 	ldmibcs	pc, {r8, r9, sl}	; <UNPREDICTABLE>
   11520:	8c010000 	stchi	0, cr0, [r1], {-0}
   11524:	000000e6 	andeq	r0, r0, r6, ror #1
   11528:	02010200 	andeq	r0, r1, #0, 4
   1152c:	00000c97 	muleq	r0, r7, ip
   11530:	00422608 	subeq	r2, r2, r8, lsl #12
   11534:	a2a90100 	adcge	r0, r9, #0, 2
   11538:	03000000 	movweq	r0, #0
   1153c:	0000012a 	andeq	r0, r0, sl, lsr #2
   11540:	0041a706 	subeq	sl, r1, r6, lsl #14
   11544:	a2a90100 	adcge	r0, r9, #0, 2
   11548:	06000000 	streq	r0, [r0], -r0
   1154c:	00004273 	andeq	r4, r0, r3, ror r2
   11550:	00a2a901 	adceq	sl, r2, r1, lsl #18
   11554:	c0070000 	andgt	r0, r7, r0
   11558:	01000041 	tsteq	r0, r1, asr #32
   1155c:	0000a2ab 	andeq	sl, r0, fp, lsr #5
   11560:	299f0700 	ldmibcs	pc, {r8, r9, sl}	; <UNPREDICTABLE>
   11564:	ad010000 	stcge	0, cr0, [r1, #-0]
   11568:	000000e6 	andeq	r0, r0, r6, ror #1
   1156c:	00ad0900 	adceq	r0, sp, r0, lsl #18
   11570:	48980000 	ldmmi	r8, {}	; <UNPREDICTABLE>
   11574:	00280000 	eoreq	r0, r8, r0
   11578:	9c010000 	stcls	0, cr0, [r1], {-0}
   1157c:	00000171 	andeq	r0, r0, r1, ror r1
   11580:	0000b90a 	andeq	fp, r0, sl, lsl #18
   11584:	004e9600 	subeq	r9, lr, r0, lsl #12
   11588:	00c40a00 	sbceq	r0, r4, r0, lsl #20
   1158c:	4edb0000 	cdpmi	0, 13, cr0, cr11, cr0, {0}
   11590:	da0b0000 	ble	2d1598 <__ccfg+0x2b15f0>
   11594:	20000000 	andcs	r0, r0, r0
   11598:	0c00004f 	stceq	0, cr0, [r0], {79}	; 0x4f
   1159c:	000000cf 	andeq	r0, r0, pc, asr #1
   115a0:	48a20d04 	stmiami	r2!, {r2, r8, sl, fp}
   115a4:	05940000 	ldreq	r0, [r4]
   115a8:	ba0e0000 	blt	3915b0 <__ccfg+0x371608>
   115ac:	9f000048 	svcls	0x00000048
   115b0:	00000005 	andeq	r0, r0, r5
   115b4:	0038700f 	eorseq	r7, r8, pc
   115b8:	01ca0100 	biceq	r0, sl, r0, lsl #2
   115bc:	000048c0 	andeq	r4, r0, r0, asr #17
   115c0:	00000008 	andeq	r0, r0, r8
   115c4:	01d19c01 	bicseq	r9, r1, r1, lsl #24
   115c8:	9c100000 	ldcls	0, cr0, [r0], {-0}
   115cc:	02000011 	andeq	r0, r0, #17
   115d0:	0000a242 	andeq	sl, r0, r2, asr #4
   115d4:	004f4600 	subeq	r4, pc, r0, lsl #12
   115d8:	41871000 	orrmi	r1, r7, r0
   115dc:	42020000 	andmi	r0, r2, #0
   115e0:	000000a2 	andeq	r0, r0, r2, lsr #1
   115e4:	00004f67 	andeq	r4, r0, r7, ror #30
   115e8:	00421e10 	subeq	r1, r2, r0, lsl lr
   115ec:	a2430200 	subge	r0, r3, #0, 4
   115f0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
   115f4:	1100004f 	tstne	r0, pc, asr #32
   115f8:	000048c8 	andeq	r4, r0, r8, asr #17
   115fc:	0000012a 	andeq	r0, r0, sl, lsr #2
   11600:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
   11604:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
   11608:	f3075001 	vhadd.u8	d5, d7, d1
   1160c:	01f35001 	mvnseq	r5, r1
   11610:	00002251 	andeq	r2, r0, r1, asr r2
   11614:	0042380f 	subeq	r3, r2, pc, lsl #16
   11618:	01df0100 	bicseq	r0, pc, r0, lsl #2
   1161c:	00000000 	andeq	r0, r0, r0
   11620:	00000022 	andeq	r0, r0, r2, lsr #32
   11624:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
   11628:	9c100000 	ldcls	0, cr0, [r0], {-0}
   1162c:	02000011 	andeq	r0, r0, #17
   11630:	0000a257 	andeq	sl, r0, r7, asr r2
   11634:	004fa900 	subeq	sl, pc, r0, lsl #18
   11638:	41871000 	orrmi	r1, r7, r0
   1163c:	57020000 	strpl	r0, [r2, -r0]
   11640:	000000a2 	andeq	r0, r0, r2, lsr #1
   11644:	00004fca 	andeq	r4, r0, sl, asr #31
   11648:	00222510 	eoreq	r2, r2, r0, lsl r5
   1164c:	a2580200 	subsge	r0, r8, #0, 4
   11650:	eb000000 	bl	11658 <__exidx_end+0xba58>
   11654:	1000004f 	andne	r0, r0, pc, asr #32
   11658:	000041e1 	andeq	r4, r0, r1, ror #3
   1165c:	00a25802 	adceq	r5, r2, r2, lsl #16
   11660:	50360000 	eorspl	r0, r6, r0
   11664:	67130000 	ldrvs	r0, [r3, -r0]
   11668:	02000042 	andeq	r0, r0, #66	; 0x42
   1166c:	0000a25a 	andeq	sl, r0, sl, asr r2
   11670:	00505700 	subseq	r5, r0, r0, lsl #14
   11674:	41ec1300 	mvnmi	r1, r0, lsl #6
   11678:	5b020000 	blpl	91680 <__ccfg+0x716d8>
   1167c:	000000a2 	andeq	r0, r0, r2, lsr #1
   11680:	000050eb 	andeq	r5, r0, fp, ror #1
   11684:	00000011 	andeq	r0, r0, r1, lsl r0
   11688:	00012a00 	andeq	r2, r1, r0, lsl #20
   1168c:	51011200 	mrspl	r1, R9_usr
   11690:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
   11694:	01f32540 	mvnseq	r2, r0, asr #10
   11698:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
   1169c:	2e302540 	cfneg32cs	mvfx2, mvfx0
   116a0:	16000128 	strne	r0, [r0], -r8, lsr #2
   116a4:	30244013 	eorcc	r4, r4, r3, lsl r0
   116a8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   116ac:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   116b0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   116b4:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
   116b8:	13160001 	tstne	r6, #1
   116bc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   116c0:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
   116c4:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   116c8:	f3131600 	vmax.u16	d1, d3, d0
   116cc:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
   116d0:	16000128 	strne	r0, [r0], -r8, lsr #2
   116d4:	01122113 	tsteq	r2, r3, lsl r1
   116d8:	01f35150 	mvnseq	r5, r0, asr r1
   116dc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   116e0:	23225001 			; <UNDEFINED> instruction: 0x23225001
   116e4:	01f30480 	mvnseq	r0, r0, lsl #9
   116e8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   116ec:	f3225001 	vhadd.u32	d5, d2, d1
   116f0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   116f4:	01282930 			; <UNDEFINED> instruction: 0x01282930
   116f8:	23131600 	tstcs	r3, #0, 12
   116fc:	01f30484 	mvnseq	r0, r4, lsl #9
   11700:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   11704:	23225001 			; <UNDEFINED> instruction: 0x23225001
   11708:	01f30480 	mvnseq	r0, r0, lsl #9
   1170c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   11710:	f3225001 	vhadd.u32	d5, d2, d1
   11714:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   11718:	01282930 			; <UNDEFINED> instruction: 0x01282930
   1171c:	f3131600 	vmax.u16	d1, d3, d0
   11720:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   11724:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   11728:	00131600 	andseq	r1, r3, r0, lsl #12
   1172c:	41ff0f00 	mvnsmi	r0, r0, lsl #30
   11730:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
   11734:	00000001 	andeq	r0, r0, r1
   11738:	00002e00 	andeq	r2, r0, r0, lsl #28
   1173c:	1f9c0100 	svcne	0x009c0100
   11740:	10000004 	andne	r0, r0, r4
   11744:	0000119c 	muleq	r0, ip, r1
   11748:	00a28302 	adceq	r8, r2, r2, lsl #6
   1174c:	51370000 	teqpl	r7, r0
   11750:	87100000 	ldrhi	r0, [r0, -r0]
   11754:	02000041 	andeq	r0, r0, #65	; 0x41
   11758:	0000a283 	andeq	sl, r0, r3, lsl #5
   1175c:	00515800 	subseq	r5, r1, r0, lsl #16
   11760:	22251000 	eorcs	r1, r5, #0
   11764:	84020000 	strhi	r0, [r2], #-0
   11768:	000000a2 	andeq	r0, r0, r2, lsr #1
   1176c:	00005179 	andeq	r5, r0, r9, ror r1
   11770:	0041f510 	subeq	pc, r1, r0, lsl r5	; <UNPREDICTABLE>
   11774:	a2840200 	addge	r0, r4, #0, 4
   11778:	ca000000 	bgt	11780 <__exidx_end+0xbb80>
   1177c:	10000051 	andne	r0, r0, r1, asr r0
   11780:	000041ec 	andeq	r4, r0, ip, ror #3
   11784:	00978502 	addseq	r8, r7, r2, lsl #10
   11788:	521b0000 	andspl	r0, fp, #0
   1178c:	67130000 	ldrvs	r0, [r3, -r0]
   11790:	02000042 	andeq	r0, r0, #66	; 0x42
   11794:	0000a287 	andeq	sl, r0, r7, lsl #5
   11798:	00523b00 	subseq	r3, r2, r0, lsl #22
   1179c:	41e11300 	mvnmi	r1, r0, lsl #6
   117a0:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
   117a4:	000000a2 	andeq	r0, r0, r2, lsr #1
   117a8:	000052e1 	andeq	r5, r0, r1, ror #5
   117ac:	00000011 	andeq	r0, r0, r1, lsl r0
   117b0:	00012a00 	andeq	r2, r1, r0, lsl #20
   117b4:	51011200 	mrspl	r1, R9_usr
   117b8:	5201f340 	andpl	pc, r1, #64, 6
   117bc:	01f32540 	mvnseq	r2, r0, asr #10
   117c0:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
   117c4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   117c8:	00000f0c 	andeq	r0, r0, ip, lsl #30
   117cc:	01282b80 	smlawbeq	r8, r0, fp, r2
   117d0:	40131600 	andsmi	r1, r3, r0, lsl #12
   117d4:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
   117d8:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
   117dc:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
   117e0:	01f31c40 	mvnseq	r1, r0, asr #24
   117e4:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
   117e8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   117ec:	00000f0c 	andeq	r0, r0, ip, lsl #30
   117f0:	01282b80 	smlawbeq	r8, r0, fp, r2
   117f4:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
   117f8:	50011221 	andpl	r1, r1, r1, lsr #4
   117fc:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
   11800:	01f32431 	mvnseq	r2, r1, lsr r4
   11804:	80232250 	eorhi	r2, r3, r0, asr r2
   11808:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   1180c:	01f32431 	mvnseq	r2, r1, lsr r4
   11810:	01f32250 	mvnseq	r2, r0, asr r2
   11814:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   11818:	000f0c22 	andeq	r0, pc, r2, lsr #24
   1181c:	282c8000 	stmdacs	ip!, {pc}
   11820:	13160001 	tstne	r6, #1
   11824:	f3048423 	vshl.u8	d8, d19, d4
   11828:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   1182c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   11830:	f3048023 	vhadd.u8	d8, d4, d19
   11834:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   11838:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   1183c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   11840:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   11844:	8000000f 	andhi	r0, r0, pc
   11848:	0001282c 	andeq	r2, r1, ip, lsr #16
   1184c:	01f31316 	mvnseq	r1, r6, lsl r3
   11850:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   11854:	000f0c22 	andeq	r0, pc, r2, lsr #24
   11858:	282b8000 	stmdacs	fp!, {pc}
   1185c:	13160001 	tstne	r6, #1
   11860:	ad140000 	ldcge	0, cr0, [r4, #-0]
   11864:	01000041 	tsteq	r0, r1, asr #32
   11868:	00970208 	addseq	r0, r7, r8, lsl #4
   1186c:	00000000 	andeq	r0, r0, r0
   11870:	00340000 	eorseq	r0, r4, r0
   11874:	9c010000 	stcls	0, cr0, [r1], {-0}
   11878:	000004d2 	ldrdeq	r0, [r0], -r2
   1187c:	00119c10 	andseq	r9, r1, r0, lsl ip
   11880:	a2af0200 	adcge	r0, pc, #0, 4
   11884:	41000000 	mrsmi	r0, (UNDEF: 0)
   11888:	10000053 	andne	r0, r0, r3, asr r0
   1188c:	00004187 	andeq	r4, r0, r7, lsl #3
   11890:	00a2af02 	adceq	sl, r2, r2, lsl #30
   11894:	53620000 	cmnpl	r2, #0
   11898:	25100000 	ldrcs	r0, [r0, #-0]
   1189c:	02000022 	andeq	r0, r0, #34	; 0x22
   118a0:	0000a2af 	andeq	sl, r0, pc, lsr #5
   118a4:	00538300 	subseq	r8, r3, r0, lsl #6
   118a8:	42671300 	rsbmi	r1, r7, #0, 6
   118ac:	b1020000 	mrslt	r0, (UNDEF: 2)
   118b0:	000000a2 	andeq	r0, r0, r2, lsr #1
   118b4:	000053c0 	andeq	r5, r0, r0, asr #7
   118b8:	0041d813 	subeq	sp, r1, r3, lsl r8
   118bc:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
   118c0:	fa000000 	blx	118c8 <__exidx_end+0xbcc8>
   118c4:	15000053 	strne	r0, [r0, #-83]	; 0xffffffad
   118c8:	000000ed 	andeq	r0, r0, sp, ror #1
   118cc:	00000000 	andeq	r0, r0, r0
   118d0:	0000001a 	andeq	r0, r0, sl, lsl r0
   118d4:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
   118d8:	02000001 	andeq	r0, r0, #1
   118dc:	0000fd0a 	andeq	pc, r0, sl, lsl #26
   118e0:	00541200 	subseq	r1, r4, r0, lsl #4
   118e4:	00001600 	andeq	r1, r0, r0, lsl #12
   118e8:	001a0000 	andseq	r0, sl, r0
   118ec:	130b0000 	movwne	r0, #45056	; 0xb000
   118f0:	4c000001 	stcmi	0, cr0, [r0], {1}
   118f4:	0b000054 	bleq	11a4c <__exidx_end+0xbe4c>
   118f8:	0000011e 	andeq	r0, r0, lr, lsl r1
   118fc:	00005465 	andeq	r5, r0, r5, ror #8
   11900:	0000000d 	andeq	r0, r0, sp
   11904:	00059400 	andeq	r9, r5, r0, lsl #8
   11908:	00000d00 	andeq	r0, r0, r0, lsl #26
   1190c:	059f0000 	ldreq	r0, [pc]	; 11914 <__exidx_end+0xbd14>
   11910:	00000000 	andeq	r0, r0, r0
   11914:	418f1400 	orrmi	r1, pc, r0, lsl #8
   11918:	1d010000 	stcne	0, cr0, [r1, #-0]
   1191c:	00009702 	andeq	r9, r0, r2, lsl #14
   11920:	00000000 	andeq	r0, r0, r0
   11924:	00004000 	andeq	r4, r0, r0
   11928:	949c0100 	ldrls	r0, [ip], #256	; 0x100
   1192c:	10000005 	andne	r0, r0, r5
   11930:	0000119c 	muleq	r0, ip, r1
   11934:	00a2dd02 	adceq	sp, r2, r2, lsl #26
   11938:	547c0000 	ldrbtpl	r0, [ip], #-0
   1193c:	87100000 	ldrhi	r0, [r0, -r0]
   11940:	02000041 	andeq	r0, r0, #65	; 0x41
   11944:	0000a2dd 	ldrdeq	sl, [r0], -sp
   11948:	00549d00 	subseq	r9, r4, r0, lsl #26
   1194c:	22251000 	eorcs	r1, r5, #0
   11950:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   11954:	000000a2 	andeq	r0, r0, r2, lsr #1
   11958:	000054be 			; <UNDEFINED> instruction: 0x000054be
   1195c:	0041f510 	subeq	pc, r1, r0, lsl r5	; <UNPREDICTABLE>
   11960:	a2de0200 	sbcsge	r0, lr, #0, 4
   11964:	01000000 	mrseq	r0, (UNDEF: 0)
   11968:	13000055 	movwne	r0, #85	; 0x55
   1196c:	00004267 	andeq	r4, r0, r7, ror #4
   11970:	00a2e002 	adceq	lr, r2, r2
   11974:	55440000 	strbpl	r0, [r4, #-0]
   11978:	d8130000 	ldmdale	r3, {}	; <UNPREDICTABLE>
   1197c:	02000041 	andeq	r0, r0, #65	; 0x41
   11980:	000097e1 	andeq	r9, r0, r1, ror #15
   11984:	00559f00 	subseq	r9, r5, r0, lsl #30
   11988:	00ed1500 	rsceq	r1, sp, r0, lsl #10
   1198c:	00000000 	andeq	r0, r0, r0
   11990:	001a0000 	andseq	r0, sl, r0
   11994:	fa020000 	blx	9199c <__ccfg+0x719f4>
   11998:	0001080c 	andeq	r0, r1, ip, lsl #16
   1199c:	fd0a0200 	stc2	2, cr0, [sl, #-0]
   119a0:	c2000000 	andgt	r0, r0, #0
   119a4:	16000055 			; <UNDEFINED> instruction: 0x16000055
   119a8:	00000000 	andeq	r0, r0, r0
   119ac:	0000001a 	andeq	r0, r0, sl, lsl r0
   119b0:	0001130b 	andeq	r1, r1, fp, lsl #6
   119b4:	00560200 	subseq	r0, r6, r0, lsl #4
   119b8:	011e0b00 	tsteq	lr, r0, lsl #22
   119bc:	561b0000 	ldrpl	r0, [fp], -r0
   119c0:	000d0000 	andeq	r0, sp, r0
   119c4:	94000000 	strls	r0, [r0], #-0
   119c8:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   119cc:	00000000 	andeq	r0, r0, r0
   119d0:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   119d4:	17000000 	strne	r0, [r0, -r0]
   119d8:	000029d1 	ldrdeq	r2, [r0], -r1
   119dc:	00a26a05 	adceq	r6, r2, r5, lsl #20
   119e0:	e0170000 	ands	r0, r7, r0
   119e4:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
   119e8:	0000a284 	andeq	sl, r0, r4, lsl #5
   119ec:	0f310000 	svceq	0x00310000
   119f0:	00040000 	andeq	r0, r4, r0
   119f4:	0000418c 	andeq	r4, r0, ip, lsl #3
   119f8:	453b0104 	ldrmi	r0, [fp, #-260]!	; 0xfffffefc
   119fc:	540c0000 	strpl	r0, [ip], #-0
   11a00:	d6000044 	strle	r0, [r0], -r4, asr #32
   11a04:	c8000045 	stmdagt	r0, {r0, r2, r6}
   11a08:	aa000048 	bge	11b30 <__exidx_end+0xbf30>
   11a0c:	81000000 	mrshi	r0, (UNDEF: 0)
   11a10:	0200008e 	andeq	r0, r0, #142	; 0x8e
   11a14:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11a18:	f6030074 			; <UNDEFINED> instruction: 0xf6030074
   11a1c:	02000032 	andeq	r0, r0, #50	; 0x32
   11a20:	003817d8 	ldrsbteq	r1, [r8], -r8
   11a24:	04040000 	streq	r0, [r4], #-0
   11a28:	00042207 	andeq	r2, r4, r7, lsl #4
   11a2c:	43e80500 	mvnmi	r0, #0, 10
   11a30:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
   11a34:	00381801 	eorseq	r1, r8, r1, lsl #16
   11a38:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11a3c:	0007e805 	andeq	lr, r7, r5, lsl #16
   11a40:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   11a44:	0000440c 	andeq	r4, r0, ip, lsl #8
   11a48:	000bc505 	andeq	ip, fp, r5, lsl #10
   11a4c:	01650200 	cmneq	r5, r0, lsl #4
   11a50:	00003817 	andeq	r3, r0, r7, lsl r8
   11a54:	06010400 	streq	r0, [r1], -r0, lsl #8
   11a58:	00000c4d 	andeq	r0, r0, sp, asr #24
   11a5c:	4b080104 	blmi	211e74 <__ccfg+0x1f1ecc>
   11a60:	0400000c 	streq	r0, [r0], #-12
   11a64:	0a5b0502 	beq	16d2e74 <__ccfg+0x16b2ecc>
   11a68:	02040000 	andeq	r0, r4, #0
   11a6c:	000d4807 	andeq	r4, sp, r7, lsl #16
   11a70:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   11a74:	000007ed 	andeq	r0, r0, sp, ror #15
   11a78:	00008306 	andeq	r8, r0, r6, lsl #6
   11a7c:	07040400 	streq	r0, [r4, -r0, lsl #8]
   11a80:	0000041d 	andeq	r0, r0, sp, lsl r4
   11a84:	18070804 	stmdane	r7, {r2, fp}
   11a88:	03000004 	movweq	r0, #4
   11a8c:	00000e2b 	andeq	r0, r0, fp, lsr #28
   11a90:	830e2e03 	movwhi	r2, #60931	; 0xee03
   11a94:	03000000 	movweq	r0, #0
   11a98:	000002f6 	strdeq	r0, [r0], -r6
   11a9c:	830e7403 	movwhi	r7, #58371	; 0xe403
   11aa0:	07000000 	streq	r0, [r0, -r0]
   11aa4:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   11aa8:	000000d7 	ldrdeq	r0, [r0], -r7
   11aac:	00075c08 	andeq	r5, r7, r8, lsl #24
   11ab0:	0ca70300 	stceq	3, cr0, [r7]
   11ab4:	0000005a 	andeq	r0, r0, sl, asr r0
   11ab8:	000aa408 	andeq	sl, sl, r8, lsl #8
   11abc:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   11ac0:	000000d7 	ldrdeq	r0, [r0], -r7
   11ac4:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   11ac8:	00e70000 	rsceq	r0, r7, r0
   11acc:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11ad0:	03000000 	movweq	r0, #0
   11ad4:	03080b00 	movweq	r0, #35584	; 0x8b00
   11ad8:	010b09a2 	smlatbeq	fp, r2, r9, r0
   11adc:	850c0000 	strhi	r0, [ip, #-0]
   11ae0:	03000003 	movweq	r0, #3
   11ae4:	002507a4 	eoreq	r0, r5, r4, lsr #15
   11ae8:	0c000000 	stceq	0, cr0, [r0], {-0}
   11aec:	000005f1 	strdeq	r0, [r0], -r1
   11af0:	b505a903 	strlt	sl, [r5, #-2307]	; 0xfffff6fd
   11af4:	04000000 	streq	r0, [r0], #-0
   11af8:	08a50300 	stmiaeq	r5!, {r8, r9}
   11afc:	aa030000 	bge	d1b04 <__ccfg+0xb1b5c>
   11b00:	0000e703 	andeq	lr, r0, r3, lsl #14
   11b04:	0e040d00 	cdpeq	13, 0, cr0, cr4, cr0, {0}
   11b08:	00000117 	andeq	r0, r0, r7, lsl r1
   11b0c:	00083203 	andeq	r3, r8, r3, lsl #4
   11b10:	19160400 	ldmdbne	r6, {sl}
   11b14:	0000008f 	andeq	r0, r0, pc, lsl #1
   11b18:	00024a03 	andeq	r4, r2, r3, lsl #20
   11b1c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
   11b20:	00000025 	andeq	r0, r0, r5, lsr #32
   11b24:	00071a03 	andeq	r1, r7, r3, lsl #20
   11b28:	1b230400 	blne	8d2b30 <__ccfg+0x8b2b88>
   11b2c:	0000012a 	andeq	r0, r0, sl, lsr #2
   11b30:	0003290f 	andeq	r2, r3, pc, lsl #18
   11b34:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
   11b38:	00019c08 	andeq	r9, r1, r8, lsl #24
   11b3c:	0ea60c00 	cdpeq	12, 10, cr0, cr6, cr0, {0}
   11b40:	36040000 	strcc	r0, [r4], -r0
   11b44:	00019c13 	andeq	r9, r1, r3, lsl ip
   11b48:	5f100000 	svcpl	0x00100000
   11b4c:	3704006b 	strcc	r0, [r4, -fp, rrx]
   11b50:	00002507 	andeq	r2, r0, r7, lsl #10
   11b54:	520c0400 	andpl	r0, ip, #0, 8
   11b58:	0400000b 	streq	r0, [r0], #-11
   11b5c:	00250b37 	eoreq	r0, r5, r7, lsr fp
   11b60:	0c080000 	stceq	0, cr0, [r8], {-0}
   11b64:	000043d7 	ldrdeq	r4, [r0], -r7
   11b68:	25143704 	ldrcs	r3, [r4, #-1796]	; 0xfffff8fc
   11b6c:	0c000000 	stceq	0, cr0, [r0], {-0}
   11b70:	00044c0c 	andeq	r4, r4, ip, lsl #24
   11b74:	1b370400 	blne	dd2b7c <__ccfg+0xdb2bd4>
   11b78:	00000025 	andeq	r0, r0, r5, lsr #32
   11b7c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
   11b80:	0b380400 	bleq	e12b88 <__ccfg+0xdf2be0>
   11b84:	000001a2 	andeq	r0, r0, r2, lsr #3
   11b88:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
   11b8c:	00000142 	andeq	r0, r0, r2, asr #2
   11b90:	00011e09 	andeq	r1, r1, r9, lsl #28
   11b94:	0001b200 	andeq	fp, r1, r0, lsl #4
   11b98:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11b9c:	00000000 	andeq	r0, r0, r0
   11ba0:	000b6d0f 	andeq	r6, fp, pc, lsl #26
   11ba4:	3c042400 	cfstrscc	mvf2, [r4], {-0}
   11ba8:	00023508 	andeq	r3, r2, r8, lsl #10
   11bac:	055c0c00 	ldrbeq	r0, [ip, #-3072]	; 0xfffff400
   11bb0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   11bb4:	00002509 	andeq	r2, r0, r9, lsl #10
   11bb8:	ae0c0000 	cdpge	0, 0, cr0, cr12, cr0, {0}
   11bbc:	04000003 	streq	r0, [r0], #-3
   11bc0:	0025093f 	eoreq	r0, r5, pc, lsr r9
   11bc4:	0c040000 	stceq	0, cr0, [r4], {-0}
   11bc8:	0000034f 	andeq	r0, r0, pc, asr #6
   11bcc:	25094004 	strcs	r4, [r9, #-4]
   11bd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11bd4:	0006640c 	andeq	r6, r6, ip, lsl #8
   11bd8:	09410400 	stmdbeq	r1, {sl}^
   11bdc:	00000025 	andeq	r0, r0, r5, lsr #32
   11be0:	09440c0c 	stmdbeq	r4, {r2, r3, sl, fp}^
   11be4:	42040000 	andmi	r0, r4, #0
   11be8:	00002509 	andeq	r2, r0, r9, lsl #10
   11bec:	be0c1000 	cdplt	0, 0, cr1, cr12, cr0, {0}
   11bf0:	0400000a 	streq	r0, [r0], #-10
   11bf4:	00250943 	eoreq	r0, r5, r3, asr #18
   11bf8:	0c140000 	ldceq	0, cr0, [r4], {-0}
   11bfc:	0000033d 	andeq	r0, r0, sp, lsr r3
   11c00:	25094404 	strcs	r4, [r9, #-1028]	; 0xfffffbfc
   11c04:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11c08:	0005650c 	andeq	r6, r5, ip, lsl #10
   11c0c:	09450400 	stmdbeq	r5, {sl}^
   11c10:	00000025 	andeq	r0, r0, r5, lsr #32
   11c14:	08e00c1c 	stmiaeq	r0!, {r2, r3, r4, sl, fp}^
   11c18:	46040000 	strmi	r0, [r4], -r0
   11c1c:	00002509 	andeq	r2, r0, r9, lsl #10
   11c20:	12002000 	andne	r2, r0, #0
   11c24:	00000032 	andeq	r0, r0, r2, lsr r0
   11c28:	4f040108 	svcmi	0x00040108
   11c2c:	00027a08 	andeq	r7, r2, r8, lsl #20
   11c30:	0d0f0c00 	stceq	12, cr0, [pc, #-0]	; 11c38 <__exidx_end+0xc038>
   11c34:	50040000 	andpl	r0, r4, r0
   11c38:	00027a0a 	andeq	r7, r2, sl, lsl #20
   11c3c:	070c0000 	streq	r0, [ip, -r0]
   11c40:	0400000c 	streq	r0, [r0], #-12
   11c44:	027a0951 	rsbseq	r0, sl, #1327104	; 0x144000
   11c48:	13800000 	orrne	r0, r0, #0
   11c4c:	00000da8 	andeq	r0, r0, r8, lsr #27
   11c50:	1e0a5304 	cdpne	3, 0, cr5, cr10, cr4, {0}
   11c54:	00000001 	andeq	r0, r0, r1
   11c58:	0e991301 	cdpeq	3, 9, cr1, cr9, cr1, {0}
   11c5c:	56040000 	strpl	r0, [r4], -r0
   11c60:	00011e0a 	andeq	r1, r1, sl, lsl #28
   11c64:	00010400 	andeq	r0, r1, r0, lsl #8
   11c68:	00011709 	andeq	r1, r1, r9, lsl #14
   11c6c:	00028a00 	andeq	r8, r2, r0, lsl #20
   11c70:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11c74:	001f0000 	andseq	r0, pc, r0
   11c78:	000a0612 	andeq	r0, sl, r2, lsl r6
   11c7c:	04019000 	streq	r9, [r1], #-0
   11c80:	02cd0862 	sbceq	r0, sp, #6422528	; 0x620000
   11c84:	a60c0000 	strge	r0, [ip], -r0
   11c88:	0400000e 	streq	r0, [r0], #-14
   11c8c:	02cd1263 	sbceq	r1, sp, #805306374	; 0x30000006
   11c90:	0c000000 	stceq	0, cr0, [r0], {-0}
   11c94:	00000574 	andeq	r0, r0, r4, ror r5
   11c98:	25066404 	strcs	r6, [r6, #-1028]	; 0xfffffbfc
   11c9c:	04000000 	streq	r0, [r0], #-0
   11ca0:	0002fe0c 	andeq	pc, r2, ip, lsl #28
   11ca4:	09660400 	stmdbeq	r6!, {sl}^
   11ca8:	000002d3 	ldrdeq	r0, [r0], -r3
   11cac:	00320c08 	eorseq	r0, r2, r8, lsl #24
   11cb0:	67040000 	strvs	r0, [r4, -r0]
   11cb4:	0002351e 	andeq	r3, r2, lr, lsl r5
   11cb8:	11008800 	tstne	r0, r0, lsl #16
   11cbc:	00028a04 	andeq	r8, r2, r4, lsl #20
   11cc0:	02e30900 	rsceq	r0, r3, #0, 18
   11cc4:	02e30000 	rsceq	r0, r3, #0
   11cc8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11ccc:	1f000000 	svcne	0x00000000
   11cd0:	e9041100 	stmdb	r4, {r8, ip}
   11cd4:	14000002 	strne	r0, [r0], #-2
   11cd8:	000ca70f 	andeq	sl, ip, pc, lsl #14
   11cdc:	7a040800 	bvc	113ce4 <__ccfg+0xf3d3c>
   11ce0:	00031208 	andeq	r1, r3, r8, lsl #4
   11ce4:	0cb90c00 	ldceq	12, cr0, [r9]
   11ce8:	7b040000 	blvc	111cf0 <__ccfg+0xf1d48>
   11cec:	00031211 	andeq	r1, r3, r1, lsl r2
   11cf0:	820c0000 	andhi	r0, ip, #0
   11cf4:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   11cf8:	0025067c 	eoreq	r0, r5, ip, ror r6
   11cfc:	00040000 	andeq	r0, r4, r0
   11d00:	006e0411 	rsbeq	r0, lr, r1, lsl r4
   11d04:	440f0000 	strmi	r0, [pc], #-0	; 11d0c <__exidx_end+0xc10c>
   11d08:	68000004 	stmdavs	r0, {r2}
   11d0c:	5b08ba04 	blpl	240524 <__ccfg+0x22057c>
   11d10:	10000004 	andne	r0, r0, r4
   11d14:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
   11d18:	031212bb 	tsteq	r2, #-1342177269	; 0xb000000b
   11d1c:	10000000 	andne	r0, r0, r0
   11d20:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
   11d24:	002507bc 	strhteq	r0, [r5], -ip
   11d28:	10040000 	andne	r0, r4, r0
   11d2c:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
   11d30:	002507bd 	strhteq	r0, [r5], -sp
   11d34:	0c080000 	stceq	0, cr0, [r8], {-0}
   11d38:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   11d3c:	7509be04 	strvc	fp, [r9, #-3588]	; 0xfffff1fc
   11d40:	0c000000 	stceq	0, cr0, [r0], {-0}
   11d44:	0008490c 	andeq	r4, r8, ip, lsl #18
   11d48:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
   11d4c:	00000075 	andeq	r0, r0, r5, ror r0
   11d50:	625f100e 	subsvs	r1, pc, #14
   11d54:	c0040066 	andgt	r0, r4, r6, rrx
   11d58:	0002ea11 	andeq	lr, r2, r1, lsl sl
   11d5c:	b20c1000 	andlt	r1, ip, #0
   11d60:	04000001 	streq	r0, [r0], #-1
   11d64:	002507c1 	eoreq	r0, r5, r1, asr #15
   11d68:	0c180000 	ldceq	0, cr0, [r8], {-0}
   11d6c:	00000303 	andeq	r0, r0, r3, lsl #6
   11d70:	170ac804 	strne	ip, [sl, -r4, lsl #16]
   11d74:	1c000001 	stcne	0, cr0, [r0], {1}
   11d78:	001d110c 	andseq	r1, sp, ip, lsl #2
   11d7c:	1dca0400 	cfstrdne	mvd0, [sl]
   11d80:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11d84:	1cd80c20 	ldclne	12, cr0, [r8], {32}
   11d88:	cc040000 	stcgt	0, cr0, [r4], {-0}
   11d8c:	0006091d 	andeq	r0, r6, sp, lsl r9
   11d90:	c60c2400 	strgt	r2, [ip], -r0, lsl #8
   11d94:	0400000e 	streq	r0, [r0], #-14
   11d98:	062d0dcf 	strteq	r0, [sp], -pc, asr #27
   11d9c:	0c280000 	stceq	0, cr0, [r8], #-0
   11da0:	00001cc6 	andeq	r1, r0, r6, asr #25
   11da4:	4709d004 	strmi	sp, [r9, -r4]
   11da8:	2c000006 	stccs	0, cr0, [r0], {6}
   11dac:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
   11db0:	11d30400 	bicsne	r0, r3, r0, lsl #8
   11db4:	000002ea 	andeq	r0, r0, sl, ror #5
   11db8:	755f1030 	ldrbvc	r1, [pc, #-48]	; 11d90 <__exidx_end+0xc190>
   11dbc:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
   11dc0:	00031212 	andeq	r1, r3, r2, lsl r2
   11dc4:	5f103800 	svcpl	0x00103800
   11dc8:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
   11dcc:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   11dd0:	0c3c0000 	ldceq	0, cr0, [ip], #-0
   11dd4:	00000efd 	strdeq	r0, [r0], -sp
   11dd8:	4d11d804 	ldcmi	8, cr13, [r1, #-16]
   11ddc:	40000006 	andmi	r0, r0, r6
   11de0:	000e460c 	andeq	r4, lr, ip, lsl #12
   11de4:	11d90400 	bicsne	r0, r9, r0, lsl #8
   11de8:	0000065d 	andeq	r0, r0, sp, asr r6
   11dec:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
   11df0:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
   11df4:	0002ea11 	andeq	lr, r2, r1, lsl sl
   11df8:	640c4400 	strvs	r4, [ip], #-1024	; 0xfffffc00
   11dfc:	0400000b 	streq	r0, [r0], #-11
   11e00:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   11e04:	0c4c0000 	mareq	acc0, r0, ip
   11e08:	00000478 	andeq	r0, r0, r8, ror r4
   11e0c:	9d0ae004 	stcls	0, cr14, [sl, #-16]
   11e10:	50000000 	andpl	r0, r0, r0
   11e14:	0047350c 	subeq	r3, r7, ip, lsl #10
   11e18:	12e30400 	rscne	r0, r3, #0, 8
   11e1c:	00000479 	andeq	r0, r0, r9, ror r4
   11e20:	0b8a0c54 	bleq	fe294f78 <_estack+0xde28ff78>
   11e24:	e7040000 	str	r0, [r4, -r0]
   11e28:	0001360c 	andeq	r3, r1, ip, lsl #12
   11e2c:	0e0c5800 	cdpeq	8, 0, cr5, cr12, cr0, {0}
   11e30:	0400000a 	streq	r0, [r0], #-10
   11e34:	010b0ee9 	smlatteq	fp, r9, lr, r0
   11e38:	0c5c0000 	mraeq	r0, ip, acc0
   11e3c:	00000e79 	andeq	r0, r0, r9, ror lr
   11e40:	2509ea04 	strcs	lr, [r9, #-2564]	; 0xfffff5fc
   11e44:	64000000 	strvs	r0, [r0], #-0
   11e48:	00251500 	eoreq	r1, r5, r0, lsl #10
   11e4c:	04790000 	ldrbteq	r0, [r9], #-0
   11e50:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   11e54:	16000004 	strne	r0, [r0], -r4
   11e58:	00000117 	andeq	r0, r0, r7, lsl r1
   11e5c:	0005cd16 	andeq	ip, r5, r6, lsl sp
   11e60:	00251600 	eoreq	r1, r5, r0, lsl #12
   11e64:	11000000 	mrsne	r0, (UNDEF: 0)
   11e68:	00048404 	andeq	r8, r4, r4, lsl #8
   11e6c:	04790600 	ldrbteq	r0, [r9], #-1536	; 0xfffffa00
   11e70:	41170000 	tstmi	r7, r0
   11e74:	2800000d 	stmdacs	r0, {r0, r2, r3}
   11e78:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
   11e7c:	0005cd08 	andeq	ip, r5, r8, lsl #26
   11e80:	08f41800 	ldmeq	r4!, {fp, ip}^
   11e84:	67040000 	strvs	r0, [r4, -r0]
   11e88:	00250702 	eoreq	r0, r5, r2, lsl #14
   11e8c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11e90:	000007d2 	ldrdeq	r0, [r0], -r2
   11e94:	0b026c04 	bleq	aceac <__ccfg+0x8cf04>
   11e98:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   11e9c:	02ee1804 	rsceq	r1, lr, #4, 16	; 0x40000
   11ea0:	6c040000 	stcvs	0, cr0, [r4], {-0}
   11ea4:	06b91402 	ldrteq	r1, [r9], r2, lsl #8
   11ea8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
   11eac:	00000eec 	andeq	r0, r0, ip, ror #29
   11eb0:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
   11eb4:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   11eb8:	056f180c 	strbeq	r1, [pc, #-2060]!	; 116b4 <__exidx_end+0xbab4>
   11ebc:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   11ec0:	00250802 	eoreq	r0, r5, r2, lsl #16
   11ec4:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
   11ec8:	000004c4 	andeq	r0, r0, r4, asr #9
   11ecc:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
   11ed0:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   11ed4:	0e591814 	mrceq	8, 2, r1, cr9, cr4, {0}
   11ed8:	72040000 	andvc	r0, r4, #0
   11edc:	00250702 	eoreq	r0, r5, r2, lsl #14
   11ee0:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
   11ee4:	00004283 	andeq	r4, r0, r3, lsl #5
   11ee8:	16027304 	strne	r7, [r2], -r4, lsl #6
   11eec:	00000950 	andeq	r0, r0, r0, asr r9
   11ef0:	077a1834 			; <UNDEFINED> instruction: 0x077a1834
   11ef4:	75040000 	strvc	r0, [r4, #-0]
   11ef8:	00250702 	eoreq	r0, r5, r2, lsl #14
   11efc:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
   11f00:	00000874 	andeq	r0, r0, r4, ror r8
   11f04:	0a027704 	beq	afb1c <__ccfg+0x8fb74>
   11f08:	00000961 	andeq	r0, r0, r1, ror #18
   11f0c:	0347183c 	movteq	r1, #30780	; 0x783c
   11f10:	7a040000 	bvc	111f18 <__ccfg+0xf1f70>
   11f14:	019c1302 	orrseq	r1, ip, r2, lsl #6
   11f18:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
   11f1c:	00000402 	andeq	r0, r0, r2, lsl #8
   11f20:	07027b04 	streq	r7, [r2, -r4, lsl #22]
   11f24:	00000025 	andeq	r0, r0, r5, lsr #32
   11f28:	05f91844 	ldrbeq	r1, [r9, #2116]!	; 0x844
   11f2c:	7c040000 	stcvc	0, cr0, [r4], {-0}
   11f30:	019c1302 	orrseq	r1, ip, r2, lsl #6
   11f34:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
   11f38:	0000080f 	andeq	r0, r0, pc, lsl #16
   11f3c:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
   11f40:	00000967 	andeq	r0, r0, r7, ror #18
   11f44:	0b4a184c 	bleq	129807c <__ccfg+0x12780d4>
   11f48:	80040000 	andhi	r0, r4, r0
   11f4c:	00250702 	eoreq	r0, r5, r2, lsl #14
   11f50:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
   11f54:	00000c43 	andeq	r0, r0, r3, asr #24
   11f58:	09028104 	stmdbeq	r2, {r2, r8, pc}
   11f5c:	000005cd 	andeq	r0, r0, sp, asr #11
   11f60:	0c5d1854 	mrrceq	8, 5, r1, sp, cr4
   11f64:	a4040000 	strge	r0, [r4], #-0
   11f68:	08940702 	ldmeq	r4, {r1, r8, r9, sl}
   11f6c:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
   11f70:	00000a06 	andeq	r0, r0, r6, lsl #20
   11f74:	1302a804 	movwne	sl, #10244	; 0x2804
   11f78:	000002cd 	andeq	r0, r0, sp, asr #5
   11f7c:	9e190148 	muflsem	f0, f1, #0.0
   11f80:	04000006 	streq	r0, [r0], #-6
   11f84:	8a1202a9 	bhi	492a30 <__ccfg+0x472a88>
   11f88:	4c000002 	stcmi	0, cr0, [r0], {2}
   11f8c:	06851901 	streq	r1, [r5], r1, lsl #18
   11f90:	ad040000 	stcge	0, cr0, [r4, #-0]
   11f94:	09780c02 	ldmdbeq	r8!, {r1, sl, fp}^
   11f98:	02dc0000 	sbcseq	r0, ip, #0
   11f9c:	000cc519 	andeq	ip, ip, r9, lsl r5
   11fa0:	02b20400 	adcseq	r0, r2, #0, 8
   11fa4:	00067a10 	andeq	r7, r6, r0, lsl sl
   11fa8:	1902e000 	stmdbne	r2, {sp, lr, pc}
   11fac:	00000a96 	muleq	r0, r6, sl
   11fb0:	0a02b404 	beq	befc8 <__ccfg+0x9f020>
   11fb4:	00000984 	andeq	r0, r0, r4, lsl #19
   11fb8:	110002ec 	smlattne	r0, ip, r2, r0
   11fbc:	0005d304 	andeq	sp, r5, r4, lsl #6
   11fc0:	08010400 	stmdaeq	r1, {sl}
   11fc4:	00000c54 	andeq	r0, r0, r4, asr ip
   11fc8:	0005d306 	andeq	sp, r5, r6, lsl #6
   11fcc:	5b041100 	blpl	1163d4 <__ccfg+0xf642c>
   11fd0:	15000004 	strne	r0, [r0, #-4]
   11fd4:	00000025 	andeq	r0, r0, r5, lsr #32
   11fd8:	00000603 	andeq	r0, r0, r3, lsl #12
   11fdc:	00047916 	andeq	r7, r4, r6, lsl r9
   11fe0:	01171600 	tsteq	r7, r0, lsl #12
   11fe4:	03160000 	tsteq	r6, #0
   11fe8:	16000006 	strne	r0, [r0], -r6
   11fec:	00000025 	andeq	r0, r0, r5, lsr #32
   11ff0:	da041100 	ble	1163f8 <__ccfg+0xf6450>
   11ff4:	11000005 	tstne	r0, r5
   11ff8:	0005e504 	andeq	lr, r5, r4, lsl #10
   11ffc:	00a91500 	adceq	r1, r9, r0, lsl #10
   12000:	062d0000 	strteq	r0, [sp], -r0
   12004:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   12008:	16000004 	strne	r0, [r0], -r4
   1200c:	00000117 	andeq	r0, r0, r7, lsl r1
   12010:	0000a916 	andeq	sl, r0, r6, lsl r9
   12014:	00251600 	eoreq	r1, r5, r0, lsl #12
   12018:	11000000 	mrsne	r0, (UNDEF: 0)
   1201c:	00060f04 	andeq	r0, r6, r4, lsl #30
   12020:	00251500 	eoreq	r1, r5, r0, lsl #10
   12024:	06470000 	strbeq	r0, [r7], -r0
   12028:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   1202c:	16000004 	strne	r0, [r0], -r4
   12030:	00000117 	andeq	r0, r0, r7, lsl r1
   12034:	33041100 	movwcc	r1, #16640	; 0x4100
   12038:	09000006 	stmdbeq	r0, {r1, r2}
   1203c:	0000006e 	andeq	r0, r0, lr, rrx
   12040:	0000065d 	andeq	r0, r0, sp, asr r6
   12044:	0000380a 	andeq	r3, r0, sl, lsl #16
   12048:	09000200 	stmdbeq	r0, {r9}
   1204c:	0000006e 	andeq	r0, r0, lr, rrx
   12050:	0000066d 	andeq	r0, r0, sp, ror #12
   12054:	0000380a 	andeq	r3, r0, sl, lsl #16
   12058:	05000000 	streq	r0, [r0, #-0]
   1205c:	00000465 	andeq	r0, r0, r5, ror #8
   12060:	1a012404 	bne	5b078 <__ccfg+0x3b0d0>
   12064:	00000318 	andeq	r0, r0, r8, lsl r3
   12068:	000cbf1a 	andeq	fp, ip, sl, lsl pc
   1206c:	28040c00 	stmdacs	r4, {sl, fp}
   12070:	06b30801 	ldrteq	r0, [r3], r1, lsl #16
   12074:	a6180000 	ldrge	r0, [r8], -r0
   12078:	0400000e 	streq	r0, [r0], #-14
   1207c:	b311012a 	tstlt	r1, #-2147483638	; 0x8000000a
   12080:	00000006 	andeq	r0, r0, r6
   12084:	000bbe18 	andeq	fp, fp, r8, lsl lr
   12088:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
   1208c:	00002507 	andeq	r2, r0, r7, lsl #10
   12090:	62180400 	andsvs	r0, r8, #0, 8
   12094:	04000007 	streq	r0, [r0], #-7
   12098:	b90b012c 	stmdblt	fp, {r2, r3, r5, r8}
   1209c:	08000006 	stmdaeq	r0, {r1, r2}
   120a0:	7a041100 	bvc	1164a8 <__ccfg+0xf6500>
   120a4:	11000006 	tstne	r0, r6
   120a8:	00066d04 	andeq	r6, r6, r4, lsl #26
   120ac:	03d11a00 	bicseq	r1, r1, #0, 20
   120b0:	040e0000 	streq	r0, [lr], #-0
   120b4:	f8080144 			; <UNDEFINED> instruction: 0xf8080144
   120b8:	18000006 	stmdane	r0, {r1, r2}
   120bc:	0000162d 	andeq	r1, r0, sp, lsr #12
   120c0:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
   120c4:	000006f8 	strdeq	r0, [r0], -r8
   120c8:	08211800 	stmdaeq	r1!, {fp, ip}
   120cc:	46040000 	strmi	r0, [r4], -r0
   120d0:	06f81201 	ldrbteq	r1, [r8], r1, lsl #4
   120d4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
   120d8:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   120dc:	12014704 	andne	r4, r1, #4, 14	; 0x100000
   120e0:	0000007c 	andeq	r0, r0, ip, ror r0
   120e4:	7c09000c 	stcvc	0, cr0, [r9], {12}
   120e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   120ec:	0a000007 	beq	12110 <__exidx_end+0xc510>
   120f0:	00000038 	andeq	r0, r0, r8, lsr r0
   120f4:	d01b0002 	andsle	r0, fp, r2
   120f8:	07028504 	streq	r8, [r2, -r4, lsl #10]
   120fc:	0000081d 	andeq	r0, r0, sp, lsl r8
   12100:	000e4c18 	andeq	r4, lr, r8, lsl ip
   12104:	02870400 	addeq	r0, r7, #0, 8
   12108:	00003818 	andeq	r3, r0, r8, lsl r8
   1210c:	cd180000 	ldcgt	0, cr0, [r8, #-0]
   12110:	0400000c 	streq	r0, [r0], #-12
   12114:	cd120288 	lfmgt	f0, 4, [r2, #-544]	; 0xfffffde0
   12118:	04000005 	streq	r0, [r0], #-5
   1211c:	00042f18 	andeq	r2, r4, r8, lsl pc
   12120:	02890400 	addeq	r0, r9, #0, 8
   12124:	00081d10 	andeq	r1, r8, r0, lsl sp
   12128:	33180800 	tstcc	r8, #0, 16
   1212c:	0400000b 	streq	r0, [r0], #-11
   12130:	b217028a 	andslt	r0, r7, #-1610612728	; 0xa0000008
   12134:	24000001 	strcs	r0, [r0], #-1
   12138:	0007d918 	andeq	sp, r7, r8, lsl r9
   1213c:	028b0400 	addeq	r0, fp, #0, 8
   12140:	0000250f 	andeq	r2, r0, pc, lsl #10
   12144:	a1184800 	tstge	r8, r0, lsl #16
   12148:	0400000e 	streq	r0, [r0], #-14
   1214c:	962c028c 	strtls	r0, [ip], -ip, lsl #5
   12150:	50000000 	andpl	r0, r0, r0
   12154:	00007618 	andeq	r7, r0, r8, lsl r6
   12158:	028d0400 	addeq	r0, sp, #0, 8
   1215c:	0006bf1a 	andeq	fp, r6, sl, lsl pc
   12160:	29185800 	ldmdbcs	r8, {fp, ip, lr}
   12164:	04000006 	streq	r0, [r0], #-6
   12168:	0b16028e 	bleq	592ba8 <__ccfg+0x572c00>
   1216c:	68000001 	stmdavs	r0, {r0}
   12170:	000cda18 	andeq	sp, ip, r8, lsl sl
   12174:	028f0400 	addeq	r0, pc, #0, 8
   12178:	00010b16 	andeq	r0, r1, r6, lsl fp
   1217c:	68187000 	ldmdavs	r8, {ip, sp, lr}
   12180:	04000000 	streq	r0, [r0], #-0
   12184:	0b160290 	bleq	592bcc <__ccfg+0x572c24>
   12188:	78000001 	stmdavc	r0, {r0}
   1218c:	000b5a18 	andeq	r5, fp, r8, lsl sl
   12190:	02910400 	addseq	r0, r1, #0, 8
   12194:	00082d10 	andeq	r2, r8, r0, lsl sp
   12198:	0c188000 	ldceq	0, cr8, [r8], {-0}
   1219c:	04000004 	streq	r0, [r0], #-4
   121a0:	3d100292 	lfmcc	f0, 4, [r0, #-584]	; 0xfffffdb8
   121a4:	88000008 	stmdahi	r0, {r3}
   121a8:	000c7d18 	andeq	r7, ip, r8, lsl sp
   121ac:	02930400 	addseq	r0, r3, #0, 8
   121b0:	0000250f 	andeq	r2, r0, pc, lsl #10
   121b4:	a318a000 	tstge	r8, #0
   121b8:	04000002 	streq	r0, [r0], #-2
   121bc:	0b160294 	bleq	592c14 <__ccfg+0x572c6c>
   121c0:	a4000001 	strge	r0, [r0], #-1
   121c4:	00068f18 	andeq	r8, r6, r8, lsl pc
   121c8:	02950400 	addseq	r0, r5, #0, 8
   121cc:	00010b16 	andeq	r0, r1, r6, lsl fp
   121d0:	ab18ac00 	blge	63d1d8 <__ccfg+0x61d230>
   121d4:	04000005 	streq	r0, [r0], #-5
   121d8:	0b160296 	bleq	592c38 <__ccfg+0x572c90>
   121dc:	b4000001 	strlt	r0, [r0], #-1
   121e0:	00083a18 	andeq	r3, r8, r8, lsl sl
   121e4:	02970400 	addseq	r0, r7, #0, 8
   121e8:	00010b16 	andeq	r0, r1, r6, lsl fp
   121ec:	1818bc00 	ldmdane	r8, {sl, fp, ip, sp, pc}
   121f0:	04000006 	streq	r0, [r0], #-6
   121f4:	0b160298 	bleq	592c5c <__ccfg+0x572cb4>
   121f8:	c4000001 	strgt	r0, [r0], #-1
   121fc:	0008f218 	andeq	pc, r8, r8, lsl r2	; <UNPREDICTABLE>
   12200:	02990400 	addseq	r0, r9, #0, 8
   12204:	00002508 	andeq	r2, r0, r8, lsl #10
   12208:	0900cc00 	stmdbeq	r0, {sl, fp, lr, pc}
   1220c:	000005d3 	ldrdeq	r0, [r0], -r3
   12210:	0000082d 	andeq	r0, r0, sp, lsr #16
   12214:	0000380a 	andeq	r3, r0, sl, lsl #16
   12218:	09001900 	stmdbeq	r0, {r8, fp, ip}
   1221c:	000005d3 	ldrdeq	r0, [r0], -r3
   12220:	0000083d 	andeq	r0, r0, sp, lsr r8
   12224:	0000380a 	andeq	r3, r0, sl, lsl #16
   12228:	09000700 	stmdbeq	r0, {r8, r9, sl}
   1222c:	000005d3 	ldrdeq	r0, [r0], -r3
   12230:	0000084d 	andeq	r0, r0, sp, asr #16
   12234:	0000380a 	andeq	r3, r0, sl, lsl #16
   12238:	1b001700 	blne	17e40 <__exidx_end+0x12240>
   1223c:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
   12240:	00087407 	andeq	r7, r8, r7, lsl #8
   12244:	03b71800 			; <UNDEFINED> instruction: 0x03b71800
   12248:	a1040000 	mrsge	r0, (UNDEF: 4)
   1224c:	08741b02 	ldmdaeq	r4!, {r1, r8, r9, fp, ip}^
   12250:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   12254:	00000ef4 	strdeq	r0, [r0], -r4
   12258:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
   1225c:	00000884 	andeq	r0, r0, r4, lsl #17
   12260:	12090078 	andne	r0, r9, #120	; 0x78
   12264:	84000003 	strhi	r0, [r0], #-3
   12268:	0a000008 	beq	12290 <__exidx_end+0xc690>
   1226c:	00000038 	andeq	r0, r0, r8, lsr r0
   12270:	3809001d 	stmdacc	r9, {r0, r2, r3, r4}
   12274:	94000000 	strls	r0, [r0], #-0
   12278:	0a000008 	beq	122a0 <__exidx_end+0xc6a0>
   1227c:	00000038 	andeq	r0, r0, r8, lsr r0
   12280:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
   12284:	03028304 	movweq	r8, #8964	; 0x2304
   12288:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   1228c:	000d411d 	andeq	r4, sp, sp, lsl r1
   12290:	029a0400 	addseq	r0, sl, #0, 8
   12294:	0007080b 	andeq	r0, r7, fp, lsl #16
   12298:	0b421d00 	bleq	10996a0 <__ccfg+0x10796f8>
   1229c:	a3040000 	movwge	r0, #16384	; 0x4000
   122a0:	084d0b02 	stmdaeq	sp, {r1, r8, r9, fp}^
   122a4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   122a8:	000005d3 	ldrdeq	r0, [r0], -r3
   122ac:	000008c9 	andeq	r0, r0, r9, asr #17
   122b0:	0000380a 	andeq	r3, r0, sl, lsl #16
   122b4:	12001800 	andne	r1, r0, #0, 16
   122b8:	00000eac 	andeq	r0, r0, ip, lsr #29
   122bc:	b206016c 	andlt	r0, r6, #108, 2
   122c0:	00095008 	andeq	r5, r9, r8
   122c4:	45140c00 	ldrmi	r0, [r4, #-3072]	; 0xfffff400
   122c8:	b4060000 	strlt	r0, [r6], #-0
   122cc:	000df80b 	andeq	pc, sp, fp, lsl #16
   122d0:	c90c0000 	stmdbgt	ip, {}	; <UNPREDICTABLE>
   122d4:	06000044 	streq	r0, [r0], -r4, asr #32
   122d8:	0e320bb5 	vmoveq.s16	r0, d18[2]
   122dc:	0ce00000 	stcleq	0, cr0, [r0]
   122e0:	0000435f 	andeq	r4, r0, pc, asr r3
   122e4:	610bb706 	tstvs	fp, r6, lsl #14
   122e8:	e400000e 	str	r0, [r0], #-14
   122ec:	0042cf0c 	subeq	ip, r2, ip, lsl #30
   122f0:	0ab90600 	beq	fee53af8 <_estack+0xdee4eaf8>
   122f4:	00000025 	andeq	r0, r0, r5, lsr #32
   122f8:	429b0ce8 	addsmi	r0, fp, #232, 24	; 0xe800
   122fc:	ba060000 	blt	192304 <__ccfg+0x17235c>
   12300:	0005cd0b 	andeq	ip, r5, fp, lsl #26
   12304:	c90cec00 	stmdbgt	ip, {sl, fp, sp, lr, pc}
   12308:	06000042 	streq	r0, [r0], -r2, asr #32
   1230c:	09d212bb 	ldmibeq	r2, {r0, r1, r3, r4, r5, r7, r9, ip}^
   12310:	13f00000 	mvnsne	r0, #0
   12314:	000043dd 	ldrdeq	r4, [r0], -sp
   12318:	670bbd06 	strvs	fp, [fp, -r6, lsl #26]
   1231c:	2800000e 	stmdacs	r0, {r1, r2, r3}
   12320:	43fe1301 	mvnsmi	r1, #67108864	; 0x4000000
   12324:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
   12328:	000e770b 	andeq	r7, lr, fp, lsl #14
   1232c:	13012a00 	movwne	r2, #6656	; 0x1a00
   12330:	0000434f 	andeq	r4, r0, pc, asr #6
   12334:	770bbf06 	strvc	fp, [fp, -r6, lsl #30]
   12338:	4a00000e 	bmi	12378 <__exidx_end+0xc778>
   1233c:	04110001 	ldreq	r0, [r1], #-1
   12340:	000008c9 	andeq	r0, r0, r9, asr #17
   12344:	0009611e 	andeq	r6, r9, lr, lsl r1
   12348:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   1234c:	11000000 	mrsne	r0, (UNDEF: 0)
   12350:	00095604 	andeq	r5, r9, r4, lsl #12
   12354:	9c041100 	stflss	f1, [r4], {-0}
   12358:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   1235c:	00000978 	andeq	r0, r0, r8, ror r9
   12360:	00002516 	andeq	r2, r0, r6, lsl r5
   12364:	04110000 	ldreq	r0, [r1], #-0
   12368:	0000097e 	andeq	r0, r0, lr, ror r9
   1236c:	096d0411 	stmdbeq	sp!, {r0, r4, sl}^
   12370:	6d090000 	stcvs	0, cr0, [r9, #-0]
   12374:	94000006 	strls	r0, [r0], #-6
   12378:	0a000009 	beq	123a4 <__exidx_end+0xc7a4>
   1237c:	00000038 	andeq	r0, r0, r8, lsr r0
   12380:	b21f0002 	andslt	r0, pc, #2
   12384:	0400000a 	streq	r0, [r0], #-10
   12388:	79170333 	ldmdbvc	r7, {r0, r1, r4, r5, r8, r9}
   1238c:	1f000004 	svcne	0x00000004
   12390:	00000aab 	andeq	r0, r0, fp, lsr #21
   12394:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   12398:	0000047f 	andeq	r0, r0, pc, ror r4
   1239c:	09b90411 	ldmibeq	r9!, {r0, r4, sl}
   123a0:	ae0e0000 	cdpge	0, 0, cr0, cr14, cr0, {0}
   123a4:	20000009 	andcs	r0, r0, r9
   123a8:	00442521 	subeq	r2, r4, r1, lsr #10
   123ac:	0e670700 	cdpeq	7, 6, cr0, cr7, cr0, {0}
   123b0:	000005cd 	andeq	r0, r0, sp, asr #11
   123b4:	0008a603 	andeq	sl, r8, r3, lsl #12
   123b8:	14560800 	ldrbne	r0, [r6], #-2048	; 0xfffff800
   123bc:	0000010b 	andeq	r0, r0, fp, lsl #2
   123c0:	0042c90f 	subeq	ip, r2, pc, lsl #18
   123c4:	2a093800 	bcs	2603cc <__ccfg+0x240424>
   123c8:	000b1808 	andeq	r1, fp, r8, lsl #16
   123cc:	43b20c00 			; <UNDEFINED> instruction: 0x43b20c00
   123d0:	2c090000 	stccs	0, cr0, [r9], {-0}
   123d4:	0005cd09 	andeq	ip, r5, r9, lsl #26
   123d8:	d40c0000 	strle	r0, [ip], #-0
   123dc:	09000044 	stmdbeq	r0, {r2, r6}
   123e0:	05cd092d 	strbeq	r0, [sp, #2349]	; 0x92d
   123e4:	0c040000 	stceq	0, cr0, [r4], {-0}
   123e8:	0000438d 	andeq	r4, r0, sp, lsl #7
   123ec:	cd092e09 	stcgt	14, cr2, [r9, #-36]	; 0xffffffdc
   123f0:	08000005 	stmdaeq	r0, {r0, r2}
   123f4:	0042f40c 	subeq	pc, r2, ip, lsl #8
   123f8:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   123fc:	000005cd 	andeq	r0, r0, sp, asr #11
   12400:	428b0c0c 	addmi	r0, fp, #12, 24	; 0xc00
   12404:	30090000 	andcc	r0, r9, r0
   12408:	0005cd09 	andeq	ip, r5, r9, lsl #26
   1240c:	ae0c1000 	cdpge	0, 0, cr1, cr12, cr0, {0}
   12410:	09000043 	stmdbeq	r0, {r0, r1, r6}
   12414:	05cd0931 	strbeq	r0, [sp, #2353]	; 0x931
   12418:	0c140000 	ldceq	0, cr0, [r4], {-0}
   1241c:	000044d0 	ldrdeq	r4, [r0], -r0
   12420:	cd093209 	sfmgt	f3, 4, [r9, #-36]	; 0xffffffdc
   12424:	18000005 	stmdane	r0, {r0, r2}
   12428:	0043890c 	subeq	r8, r3, ip, lsl #18
   1242c:	09330900 	ldmdbeq	r3!, {r8, fp}
   12430:	000005cd 	andeq	r0, r0, sp, asr #11
   12434:	43f00c1c 	mvnsmi	r0, #28, 24	; 0x1c00
   12438:	34090000 	strcc	r0, [r9], #-0
   1243c:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12440:	cf0c2000 	svcgt	0x000c2000
   12444:	09000043 	stmdbeq	r0, {r0, r1, r6}
   12448:	05cd0935 	strbeq	r0, [sp, #2357]	; 0x935
   1244c:	0c240000 	stceq	0, cr0, [r4], #-0
   12450:	00004634 	andeq	r4, r0, r4, lsr r6
   12454:	d3083609 	movwle	r3, #34313	; 0x8609
   12458:	28000005 	stmdacs	r0, {r0, r2}
   1245c:	0046380c 	subeq	r3, r6, ip, lsl #16
   12460:	08370900 	ldmdaeq	r7!, {r8, fp}
   12464:	000005d3 	ldrdeq	r0, [r0], -r3
   12468:	43a00c29 	movmi	r0, #10496	; 0x2900
   1246c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
   12470:	0005d308 	andeq	sp, r5, r8, lsl #6
   12474:	330c2a00 	movwcc	r2, #51712	; 0xca00
   12478:	09000044 	stmdbeq	r0, {r2, r6}
   1247c:	05d30839 	ldrbeq	r0, [r3, #2105]	; 0x839
   12480:	0c2b0000 	stceq	0, cr0, [fp], #-0
   12484:	00004446 	andeq	r4, r0, r6, asr #8
   12488:	d3083a09 	movwle	r3, #35337	; 0x8a09
   1248c:	2c000005 	stccs	0, cr0, [r0], {5}
   12490:	0042ba0c 	subeq	fp, r2, ip, lsl #20
   12494:	083b0900 	ldmdaeq	fp!, {r8, fp}
   12498:	000005d3 	ldrdeq	r0, [r0], -r3
   1249c:	437d0c2d 	cmnmi	sp, #11520	; 0x2d00
   124a0:	3c090000 	stccc	0, cr0, [r9], {-0}
   124a4:	0005d308 	andeq	sp, r5, r8, lsl #6
   124a8:	230c2e00 	movwcs	r2, #52736	; 0xce00
   124ac:	09000045 	stmdbeq	r0, {r0, r2, r6}
   124b0:	05d3083d 	ldrbeq	r0, [r3, #2109]	; 0x83d
   124b4:	0c2f0000 	stceq	0, cr0, [pc], #-0	; 124bc <__exidx_end+0xc8bc>
   124b8:	00004442 	andeq	r4, r0, r2, asr #8
   124bc:	d3083e09 	movwle	r3, #36361	; 0x8e09
   124c0:	30000005 	andcc	r0, r0, r5
   124c4:	0042b60c 	subeq	fp, r2, ip, lsl #12
   124c8:	083f0900 	ldmdaeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   124cc:	000005d3 	ldrdeq	r0, [r0], -r3
   124d0:	451f0c31 	ldrmi	r0, [pc, #-3121]	; 118a7 <__exidx_end+0xbca7>
   124d4:	40090000 	andmi	r0, r9, r0
   124d8:	0005d308 	andeq	sp, r5, r8, lsl #6
   124dc:	9c0c3200 	sfmls	f3, 4, [ip], {-0}
   124e0:	09000043 	stmdbeq	r0, {r0, r1, r6}
   124e4:	05d30841 	ldrbeq	r0, [r3, #2113]	; 0x841
   124e8:	0c330000 	ldceq	0, cr0, [r3], #-0
   124ec:	0000442f 	andeq	r4, r0, pc, lsr #8
   124f0:	d3084209 	movwle	r4, #33289	; 0x8209
   124f4:	34000005 	strcc	r0, [r0], #-5
   124f8:	0043790c 	subeq	r7, r3, ip, lsl #18
   124fc:	08430900 	stmdaeq	r3, {r8, fp}^
   12500:	000005d3 	ldrdeq	r0, [r0], -r3
   12504:	b40f0035 	strlt	r0, [pc], #-53	; 1250c <__exidx_end+0xc90c>
   12508:	08000044 	stmdaeq	r0, {r2, r6}
   1250c:	40083906 	andmi	r3, r8, r6, lsl #18
   12510:	0c00000b 	stceq	0, cr0, [r0], {11}
   12514:	00004357 	andeq	r4, r0, r7, asr r3
   12518:	030f3b06 	movweq	r3, #64262	; 0xfb06
   1251c:	00000006 	andeq	r0, r0, r6
   12520:	0043dd0c 	subeq	sp, r3, ip, lsl #26
   12524:	0f3c0600 	svceq	0x003c0600
   12528:	00000603 	andeq	r0, r0, r3, lsl #12
   1252c:	18060004 	stmdane	r6, {r2}
   12530:	2100000b 	tstcs	r0, fp
   12534:	00004319 	andeq	r4, r0, r9, lsl r3
   12538:	40204206 	eormi	r4, r0, r6, lsl #4
   1253c:	0f00000b 	svceq	0x0000000b
   12540:	00004341 	andeq	r4, r0, r1, asr #6
   12544:	0844063c 	stmdaeq	r4, {r2, r3, r4, r5, r9, sl}^
   12548:	00000c22 	andeq	r0, r0, r2, lsr #24
   1254c:	0042f40c 	subeq	pc, r2, ip, lsl #8
   12550:	0f460600 	svceq	0x00460600
   12554:	00000603 	andeq	r0, r0, r3, lsl #12
   12558:	428b0c00 	addmi	r0, fp, #0, 24
   1255c:	47060000 	strmi	r0, [r6, -r0]
   12560:	0006030f 	andeq	r0, r6, pc, lsl #6
   12564:	ae0c0400 	cfcpysge	mvf0, mvf12
   12568:	06000043 	streq	r0, [r0], -r3, asr #32
   1256c:	06030f48 	streq	r0, [r3], -r8, asr #30
   12570:	0c080000 	stceq	0, cr0, [r8], {-0}
   12574:	000044d0 	ldrdeq	r4, [r0], -r0
   12578:	030f4906 	movweq	r4, #63750	; 0xf906
   1257c:	0c000006 	stceq	0, cr0, [r0], {6}
   12580:	0043890c 	subeq	r8, r3, ip, lsl #18
   12584:	0f4a0600 	svceq	0x004a0600
   12588:	00000603 	andeq	r0, r0, r3, lsl #12
   1258c:	43f00c10 	mvnsmi	r0, #16, 24	; 0x1000
   12590:	4b060000 	blmi	192598 <__ccfg+0x1725f0>
   12594:	0006030f 	andeq	r0, r6, pc, lsl #6
   12598:	cf0c1400 	svcgt	0x000c1400
   1259c:	06000043 	streq	r0, [r0], -r3, asr #32
   125a0:	06030f4c 	streq	r0, [r3], -ip, asr #30
   125a4:	0c180000 	ldceq	0, cr0, [r8], {-0}
   125a8:	00004634 	andeq	r4, r0, r4, lsr r6
   125ac:	030f4d06 	movweq	r4, #64774	; 0xfd06
   125b0:	1c000006 	stcne	0, cr0, [r0], {6}
   125b4:	0046380c 	subeq	r3, r6, ip, lsl #16
   125b8:	0f4e0600 	svceq	0x004e0600
   125bc:	00000603 	andeq	r0, r0, r3, lsl #12
   125c0:	43a00c20 	movmi	r0, #32, 24	; 0x2000
   125c4:	4f060000 	svcmi	0x00060000
   125c8:	0006030f 	andeq	r0, r6, pc, lsl #6
   125cc:	330c2400 	movwcc	r2, #50176	; 0xc400
   125d0:	06000044 	streq	r0, [r0], -r4, asr #32
   125d4:	06030f50 			; <UNDEFINED> instruction: 0x06030f50
   125d8:	0c280000 	stceq	0, cr0, [r8], #-0
   125dc:	00004446 	andeq	r4, r0, r6, asr #8
   125e0:	030f5106 	movweq	r5, #61702	; 0xf106
   125e4:	2c000006 	stccs	0, cr0, [r0], {6}
   125e8:	0042ba0c 	subeq	fp, r2, ip, lsl #20
   125ec:	0f520600 	svceq	0x00520600
   125f0:	00000603 	andeq	r0, r0, r3, lsl #12
   125f4:	437d0c30 	cmnmi	sp, #48, 24	; 0x3000
   125f8:	53060000 	movwpl	r0, #24576	; 0x6000
   125fc:	0006030f 	andeq	r0, r6, pc, lsl #6
   12600:	230c3400 	movwcs	r3, #50176	; 0xc400
   12604:	06000045 	streq	r0, [r0], -r5, asr #32
   12608:	06030f54 			; <UNDEFINED> instruction: 0x06030f54
   1260c:	00380000 	eorseq	r0, r8, r0
   12610:	000b5106 	andeq	r5, fp, r6, lsl #2
   12614:	45012100 	strmi	r2, [r1, #-256]	; 0xffffff00
   12618:	65060000 	strvs	r0, [r6, #-0]
   1261c:	000c2223 	andeq	r2, ip, r3, lsr #4
   12620:	42d80f00 	sbcsmi	r0, r8, #0, 30
   12624:	060c0000 	streq	r0, [ip], -r0
   12628:	0c680867 	stcleq	8, cr0, [r8], #-412	; 0xfffffe64
   1262c:	b20c0000 	andlt	r0, ip, #0
   12630:	06000043 	streq	r0, [r0], -r3, asr #32
   12634:	06030f69 	streq	r0, [r3], -r9, ror #30
   12638:	0c000000 	stceq	0, cr0, [r0], {-0}
   1263c:	000044d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   12640:	030f6a06 	movweq	r6, #64006	; 0xfa06
   12644:	04000006 	streq	r0, [r0], #-6
   12648:	00438d0c 	subeq	r8, r3, ip, lsl #26
   1264c:	0f6b0600 	svceq	0x006b0600
   12650:	00000603 	andeq	r0, r0, r3, lsl #12
   12654:	33060008 	movwcc	r0, #24584	; 0x6008
   12658:	2100000c 	tstcs	r0, ip
   1265c:	00004279 	andeq	r4, r0, r9, ror r2
   12660:	68227206 	stmdavs	r2!, {r1, r2, r9, ip, sp, lr}
   12664:	0f00000c 	svceq	0x0000000c
   12668:	00004304 	andeq	r4, r0, r4, lsl #6
   1266c:	087406fc 	ldmdaeq	r4!, {r2, r3, r4, r5, r6, r7, r9, sl}^
   12670:	00000d64 	andeq	r0, r0, r4, ror #26
   12674:	6e6f6d10 	mcrvs	13, 3, r6, cr15, cr0, {0}
   12678:	0f760600 	svceq	0x00760600
   1267c:	00000d69 	andeq	r0, r0, r9, ror #26
   12680:	464d0c00 	strbmi	r0, [sp], -r0, lsl #24
   12684:	77060000 	strvc	r0, [r6, -r0]
   12688:	000d690f 	andeq	r6, sp, pc, lsl #18
   1268c:	420c3000 	andmi	r3, ip, #0
   12690:	06000003 	streq	r0, [r0], -r3
   12694:	0d790f78 	ldcleq	15, cr0, [r9, #-480]!	; 0xfffffe20
   12698:	0c600000 	stcleq	0, cr0, [r0], #-0
   1269c:	000044f9 	strdeq	r4, [r0], -r9
   126a0:	790f7906 	stmdbvc	pc, {r1, r2, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
   126a4:	7c00000d 	stcvc	0, cr0, [r0], {13}
   126a8:	0043960c 	subeq	r9, r3, ip, lsl #12
   126ac:	0f7a0600 	svceq	0x007a0600
   126b0:	00000603 	andeq	r0, r0, r3, lsl #12
   126b4:	441f0c98 	ldrmi	r0, [pc], #-3224	; 126bc <__exidx_end+0xcabc>
   126b8:	7b060000 	blvc	1926c0 <__ccfg+0x172718>
   126bc:	0006030f 	andeq	r0, r6, pc, lsl #6
   126c0:	c00c9c00 	andgt	r9, ip, r0, lsl #24
   126c4:	06000043 	streq	r0, [r0], -r3, asr #32
   126c8:	06030f7c 			; <UNDEFINED> instruction: 0x06030f7c
   126cc:	0ca00000 	stceq	0, cr0, [r0]
   126d0:	00004329 	andeq	r4, r0, r9, lsr #6
   126d4:	890f7d06 	stmdbhi	pc, {r1, r2, r8, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
   126d8:	a400000d 	strge	r0, [r0], #-13
   126dc:	0043c60c 	subeq	ip, r3, ip, lsl #12
   126e0:	0f7e0600 	svceq	0x007e0600
   126e4:	00000603 	andeq	r0, r0, r3, lsl #12
   126e8:	46490cac 	strbmi	r0, [r9], -ip, lsr #25
   126ec:	7f060000 	svcvc	0x00060000
   126f0:	000d690f 	andeq	r6, sp, pc, lsl #18
   126f4:	920cb000 	andls	fp, ip, #0
   126f8:	06000044 	streq	r0, [r0], -r4, asr #32
   126fc:	06030f80 	streq	r0, [r3], -r0, lsl #31
   12700:	0ce00000 	stcleq	0, cr0, [r0]
   12704:	000044e2 	andeq	r4, r0, r2, ror #9
   12708:	030f8106 	movweq	r8, #61702	; 0xf106
   1270c:	e4000006 	str	r0, [r0], #-6
   12710:	61726510 	cmnvs	r2, r0, lsl r5
   12714:	0f820600 	svceq	0x00820600
   12718:	00000603 	andeq	r0, r0, r3, lsl #12
   1271c:	44aa0ce8 	strtmi	r0, [sl], #3304	; 0xce8
   12720:	83060000 	movwhi	r0, #24576	; 0x6000
   12724:	0006030f 	andeq	r0, r6, pc, lsl #6
   12728:	2f0cec00 	svccs	0x000cec00
   1272c:	06000043 	streq	r0, [r0], -r3, asr #32
   12730:	06030f84 	streq	r0, [r3], -r4, lsl #31
   12734:	0cf00000 	ldcleq	0, cr0, [r0]
   12738:	000044bf 			; <UNDEFINED> instruction: 0x000044bf
   1273c:	030f8506 	movweq	r8, #62726	; 0xf506
   12740:	f4000006 	vst4.8	{d0-d3}, [r0], r6
   12744:	00430e0c 	subeq	r0, r3, ip, lsl #28
   12748:	0f860600 	svceq	0x00860600
   1274c:	00000603 	andeq	r0, r0, r3, lsl #12
   12750:	790600f8 	stmdbvc	r6, {r3, r4, r5, r6, r7}
   12754:	0900000c 	stmdbeq	r0, {r2, r3}
   12758:	00000603 	andeq	r0, r0, r3, lsl #12
   1275c:	00000d79 	andeq	r0, r0, r9, ror sp
   12760:	0000380a 	andeq	r3, r0, sl, lsl #16
   12764:	09000b00 	stmdbeq	r0, {r8, r9, fp}
   12768:	00000603 	andeq	r0, r0, r3, lsl #12
   1276c:	00000d89 	andeq	r0, r0, r9, lsl #27
   12770:	0000380a 	andeq	r3, r0, sl, lsl #16
   12774:	09000600 	stmdbeq	r0, {r9, sl}
   12778:	00000603 	andeq	r0, r0, r3, lsl #12
   1277c:	00000d99 	muleq	r0, r9, sp
   12780:	0000380a 	andeq	r3, r0, sl, lsl #16
   12784:	21000100 	mrscs	r0, (UNDEF: 16)
   12788:	000042e5 	andeq	r4, r0, r5, ror #5
   1278c:	641f9a06 	ldrvs	r9, [pc], #-2566	; 12794 <__exidx_end+0xcb94>
   12790:	0f00000d 	svceq	0x0000000d
   12794:	000044eb 	andeq	r4, r0, fp, ror #9
   12798:	089c0610 	ldmeq	ip, {r4, r9, sl}
   1279c:	00000de7 	andeq	r0, r0, r7, ror #27
   127a0:	0044a20c 	subeq	sl, r4, ip, lsl #4
   127a4:	0f9e0600 	svceq	0x009e0600
   127a8:	00000603 	andeq	r0, r0, r3, lsl #12
   127ac:	44180c00 	ldrmi	r0, [r8], #-3072	; 0xfffff400
   127b0:	9f060000 	svcls	0x00060000
   127b4:	0006030f 	andeq	r0, r6, pc, lsl #6
   127b8:	9b0c0400 	blls	3137c0 <__ccfg+0x2f3818>
   127bc:	06000044 	streq	r0, [r0], -r4, asr #32
   127c0:	06030fa0 	streq	r0, [r3], -r0, lsr #31
   127c4:	0c080000 	stceq	0, cr0, [r8], {-0}
   127c8:	0000433b 	andeq	r4, r0, fp, lsr r3
   127cc:	030fa106 	movweq	sl, #61702	; 0xf106
   127d0:	0c000006 	stceq	0, cr0, [r0], {6}
   127d4:	0da50600 	stceq	6, cr0, [r5]
   127d8:	66210000 	strtvs	r0, [r1], -r0
   127dc:	06000043 	streq	r0, [r0], -r3, asr #32
   127e0:	0de723aa 	stcleq	3, cr2, [r7, #680]!	; 0x2a8
   127e4:	d3090000 	movwle	r0, #36864	; 0x9000
   127e8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
   127ec:	0a00000e 	beq	1282c <__exidx_end+0xcc2c>
   127f0:	00000038 	andeq	r0, r0, r8, lsr r0
   127f4:	00380a06 	eorseq	r0, r8, r6, lsl #20
   127f8:	001f0000 	andseq	r0, pc, r0
   127fc:	00002515 	andeq	r2, r0, r5, lsl r5
   12800:	000e2c00 	andeq	r2, lr, r0, lsl #24
   12804:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   12808:	cd160000 	ldcgt	0, cr0, [r6, #-0]
   1280c:	16000005 	strne	r0, [r0], -r5
   12810:	0000003f 	andeq	r0, r0, pc, lsr r0
   12814:	000e2c16 	andeq	r2, lr, r6, lsl ip
   12818:	04110000 	ldreq	r0, [r1], #-0
   1281c:	000009c6 	andeq	r0, r0, r6, asr #19
   12820:	0e0e0411 	cfmvdlreq	mvd14, r0
   12824:	25150000 	ldrcs	r0, [r5, #-0]
   12828:	5b000000 	blpl	12830 <__exidx_end+0xcc30>
   1282c:	1600000e 	strne	r0, [r0], -lr
   12830:	00000479 	andeq	r0, r0, r9, ror r4
   12834:	000e5b16 	andeq	r5, lr, r6, lsl fp
   12838:	06031600 	streq	r1, [r3], -r0, lsl #12
   1283c:	2c160000 	ldccs	0, cr0, [r6], {-0}
   12840:	16000000 	strne	r0, [r0], -r0
   12844:	00000e2c 	andeq	r0, r0, ip, lsr #28
   12848:	3f041100 	svccc	0x00041100
   1284c:	11000000 	mrsne	r0, (UNDEF: 0)
   12850:	000e3804 	andeq	r3, lr, r4, lsl #16
   12854:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   12858:	0e770000 	cdpeq	0, 7, cr0, cr7, cr0, {0}
   1285c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12860:	01000000 	mrseq	r0, (UNDEF: 0)
   12864:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   12868:	0e870000 	cdpeq	0, 8, cr0, cr7, cr0, {0}
   1286c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   12870:	1f000000 	svcne	0x00000000
   12874:	16462200 	strbne	r2, [r6], -r0, lsl #4
   12878:	1f0a0000 	svcne	0x000a0000
   1287c:	00011709 	andeq	r1, r1, r9, lsl #14
   12880:	0048c800 	subeq	ip, r8, r0, lsl #16
   12884:	0000aa00 	andeq	sl, r0, r0, lsl #20
   12888:	289c0100 	ldmcs	ip, {r8}
   1288c:	2300000f 	movwcs	r0, #15
   12890:	000042a5 	andeq	r4, r0, r5, lsr #5
   12894:	191a3101 	ldmdbne	sl, {r0, r8, ip, sp}
   12898:	01000001 	tsteq	r0, r1
   1289c:	46442450 			; <UNDEFINED> instruction: 0x46442450
   128a0:	32010000 	andcc	r0, r1, #0
   128a4:	0009b419 	andeq	fp, r9, r9, lsl r4
   128a8:	00563e00 	subseq	r3, r6, r0, lsl #28
   128ac:	00563200 	subseq	r3, r6, r0, lsl #4
   128b0:	462f2400 	strtmi	r2, [pc], -r0, lsl #8
   128b4:	33010000 	movwcc	r0, #4096	; 0x1000
   128b8:	00002c09 	andeq	r2, r0, r9, lsl #24
   128bc:	0056b900 	subseq	fp, r6, r0, lsl #18
   128c0:	00569100 	subseq	r9, r6, r0, lsl #2
   128c4:	73642500 	cmnvc	r4, #0, 10
   128c8:	42010074 	andmi	r0, r1, #116	; 0x74
   128cc:	0005cd09 	andeq	ip, r5, r9, lsl #26
   128d0:	0057f800 	subseq	pc, r7, r0, lsl #16
   128d4:	0057e800 	subseq	lr, r7, r0, lsl #16
   128d8:	72732500 	rsbsvc	r2, r3, #0, 10
   128dc:	43010063 	movwmi	r0, #4195	; 0x1063
   128e0:	0006030f 	andeq	r0, r6, pc, lsl #6
   128e4:	00587b00 	subseq	r7, r8, r0, lsl #22
   128e8:	00586b00 	subseq	r6, r8, r0, lsl #22
   128ec:	42aa2600 	adcmi	r2, sl, #0, 12
   128f0:	44010000 	strmi	r0, [r1], #-0
   128f4:	000f2809 	andeq	r2, pc, r9, lsl #16
   128f8:	00590c00 	subseq	r0, r9, r0, lsl #24
   128fc:	0058f400 	subseq	pc, r8, r0, lsl #8
   12900:	452f2600 	strmi	r2, [pc, #-1536]!	; 12308 <__exidx_end+0xc708>
   12904:	45010000 	strmi	r0, [r1, #-0]
   12908:	000f2e0f 	andeq	r2, pc, pc, lsl #28
   1290c:	005a0300 	subseq	r0, sl, r0, lsl #6
   12910:	0059eb00 	subseq	lr, r9, r0, lsl #22
   12914:	04110000 	ldreq	r0, [r1], #-0
   12918:	00000083 	andeq	r0, r0, r3, lsl #1
   1291c:	008a0411 	addeq	r0, sl, r1, lsl r4
   12920:	76000000 	strvc	r0, [r0], -r0
   12924:	04000009 	streq	r0, [r0], #-9
   12928:	0043af00 	subeq	sl, r3, r0, lsl #30
   1292c:	3b010400 	blcc	53934 <__ccfg+0x3398c>
   12930:	0c000045 	stceq	0, cr0, [r0], {69}	; 0x45
   12934:	00004653 	andeq	r4, r0, r3, asr r6
   12938:	00004688 	andeq	r4, r0, r8, lsl #13
   1293c:	00004974 	andeq	r4, r0, r4, ror r9
   12940:	0000004c 	andeq	r0, r0, ip, asr #32
   12944:	000090c8 	andeq	r9, r0, r8, asr #1
   12948:	22070402 	andcs	r0, r7, #33554432	; 0x2000000
   1294c:	03000004 	movweq	r0, #4
   12950:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   12954:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
   12958:	0007e805 	andeq	lr, r7, r5, lsl #16
   1295c:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   12960:	0000440c 	andeq	r4, r0, ip, lsl #8
   12964:	000bc504 	andeq	ip, fp, r4, lsl #10
   12968:	01650200 	cmneq	r5, r0, lsl #4
   1296c:	00002517 	andeq	r2, r0, r7, lsl r5
   12970:	06010200 	streq	r0, [r1], -r0, lsl #4
   12974:	00000c4d 	andeq	r0, r0, sp, asr #24
   12978:	4b080102 	blmi	212d88 <__ccfg+0x1f2de0>
   1297c:	0200000c 	andeq	r0, r0, #12
   12980:	0a5b0502 	beq	16d3d90 <__ccfg+0x16b3de8>
   12984:	02020000 	andeq	r0, r2, #0
   12988:	000d4807 	andeq	r4, sp, r7, lsl #16
   1298c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   12990:	000007ed 	andeq	r0, r0, sp, ror #15
   12994:	1d070402 	cfstrsne	mvf0, [r7, #-8]
   12998:	02000004 	andeq	r0, r0, #4
   1299c:	04180708 	ldreq	r0, [r8], #-1800	; 0xfffff8f8
   129a0:	2b050000 	blcs	1529a8 <__ccfg+0x132a00>
   129a4:	0300000e 	movweq	r0, #14
   129a8:	006a0e2e 	rsbeq	r0, sl, lr, lsr #28
   129ac:	f6050000 			; <UNDEFINED> instruction: 0xf6050000
   129b0:	03000002 	movweq	r0, #2
   129b4:	006a0e74 	rsbeq	r0, sl, r4, ror lr
   129b8:	04060000 	streq	r0, [r6], #-0
   129bc:	b903a503 	stmdblt	r3, {r0, r1, r8, sl, sp, pc}
   129c0:	07000000 	streq	r0, [r0, -r0]
   129c4:	0000075c 	andeq	r0, r0, ip, asr r7
   129c8:	410ca703 	tstmi	ip, r3, lsl #14
   129cc:	07000000 	streq	r0, [r0, -r0]
   129d0:	00000aa4 	andeq	r0, r0, r4, lsr #21
   129d4:	b913a803 	ldmdblt	r3, {r0, r1, fp, sp, pc}
   129d8:	00000000 	andeq	r0, r0, r0
   129dc:	00005508 	andeq	r5, r0, r8, lsl #10
   129e0:	0000c900 	andeq	ip, r0, r0, lsl #18
   129e4:	00250900 	eoreq	r0, r5, r0, lsl #18
   129e8:	00030000 	andeq	r0, r3, r0
   129ec:	a203080a 	andge	r0, r3, #655360	; 0xa0000
   129f0:	0000ed09 	andeq	lr, r0, r9, lsl #26
   129f4:	03850b00 	orreq	r0, r5, #0, 22
   129f8:	a4030000 	strge	r0, [r3], #-0
   129fc:	00002c07 	andeq	r2, r0, r7, lsl #24
   12a00:	f10b0000 			; <UNDEFINED> instruction: 0xf10b0000
   12a04:	03000005 	movweq	r0, #5
   12a08:	009705a9 	addseq	r0, r7, r9, lsr #11
   12a0c:	00040000 	andeq	r0, r4, r0
   12a10:	0008a505 	andeq	sl, r8, r5, lsl #10
   12a14:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
   12a18:	000000c9 	andeq	r0, r0, r9, asr #1
   12a1c:	3205040c 	andcc	r0, r5, #12, 8	; 0xc000000
   12a20:	04000008 	streq	r0, [r0], #-8
   12a24:	00711916 	rsbseq	r1, r1, r6, lsl r9
   12a28:	4a050000 	bmi	152a30 <__ccfg+0x132a88>
   12a2c:	05000002 	streq	r0, [r0, #-2]
   12a30:	002c0d0c 	eoreq	r0, ip, ip, lsl #26
   12a34:	1a050000 	bne	152a3c <__ccfg+0x132a94>
   12a38:	04000007 	streq	r0, [r0], #-7
   12a3c:	01071b23 	tsteq	r7, r3, lsr #22
   12a40:	290d0000 	stmdbcs	sp, {}	; <UNPREDICTABLE>
   12a44:	18000003 	stmdane	r0, {r0, r1}
   12a48:	79083404 	stmdbvc	r8, {r2, sl, ip, sp}
   12a4c:	0b000001 	bleq	12a58 <__exidx_end+0xce58>
   12a50:	00000ea6 	andeq	r0, r0, r6, lsr #29
   12a54:	79133604 	ldmdbvc	r3, {r2, r9, sl, ip, sp}
   12a58:	00000001 	andeq	r0, r0, r1
   12a5c:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   12a60:	2c073704 	stccs	7, cr3, [r7], {4}
   12a64:	04000000 	streq	r0, [r0], #-0
   12a68:	000b520b 	andeq	r5, fp, fp, lsl #4
   12a6c:	0b370400 	bleq	dd3a74 <__ccfg+0xdb3acc>
   12a70:	0000002c 	andeq	r0, r0, ip, lsr #32
   12a74:	43d70b08 	bicsmi	r0, r7, #8, 22	; 0x2000
   12a78:	37040000 	strcc	r0, [r4, -r0]
   12a7c:	00002c14 	andeq	r2, r0, r4, lsl ip
   12a80:	4c0b0c00 	stcmi	12, cr0, [fp], {-0}
   12a84:	04000004 	streq	r0, [r0], #-4
   12a88:	002c1b37 	eoreq	r1, ip, r7, lsr fp
   12a8c:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   12a90:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
   12a94:	017f0b38 	cmneq	pc, r8, lsr fp	; <UNPREDICTABLE>
   12a98:	00140000 	andseq	r0, r4, r0
   12a9c:	011f040f 	tsteq	pc, pc, lsl #8
   12aa0:	fb080000 	blx	212aaa <__ccfg+0x1f2b02>
   12aa4:	8f000000 	svchi	0x00000000
   12aa8:	09000001 	stmdbeq	r0, {r0}
   12aac:	00000025 	andeq	r0, r0, r5, lsr #32
   12ab0:	6d0d0000 	stcvs	0, cr0, [sp, #-0]
   12ab4:	2400000b 	strcs	r0, [r0], #-11
   12ab8:	12083c04 	andne	r3, r8, #4, 24	; 0x400
   12abc:	0b000002 	bleq	12acc <__exidx_end+0xcecc>
   12ac0:	0000055c 	andeq	r0, r0, ip, asr r5
   12ac4:	2c093e04 	stccs	14, cr3, [r9], {4}
   12ac8:	00000000 	andeq	r0, r0, r0
   12acc:	0003ae0b 	andeq	sl, r3, fp, lsl #28
   12ad0:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
   12ad4:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ad8:	034f0b04 	movteq	r0, #64260	; 0xfb04
   12adc:	40040000 	andmi	r0, r4, r0
   12ae0:	00002c09 	andeq	r2, r0, r9, lsl #24
   12ae4:	640b0800 	strvs	r0, [fp], #-2048	; 0xfffff800
   12ae8:	04000006 	streq	r0, [r0], #-6
   12aec:	002c0941 	eoreq	r0, ip, r1, asr #18
   12af0:	0b0c0000 	bleq	312af8 <__ccfg+0x2f2b50>
   12af4:	00000944 	andeq	r0, r0, r4, asr #18
   12af8:	2c094204 	sfmcs	f4, 4, [r9], {4}
   12afc:	10000000 	andne	r0, r0, r0
   12b00:	000abe0b 	andeq	fp, sl, fp, lsl #28
   12b04:	09430400 	stmdbeq	r3, {sl}^
   12b08:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b0c:	033d0b14 	teqeq	sp, #20, 22	; 0x5000
   12b10:	44040000 	strmi	r0, [r4], #-0
   12b14:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b18:	650b1800 	strvs	r1, [fp, #-2048]	; 0xfffff800
   12b1c:	04000005 	streq	r0, [r0], #-5
   12b20:	002c0945 	eoreq	r0, ip, r5, asr #18
   12b24:	0b1c0000 	bleq	712b2c <__ccfg+0x6f2b84>
   12b28:	000008e0 	andeq	r0, r0, r0, ror #17
   12b2c:	2c094604 	stccs	6, cr4, [r9], {4}
   12b30:	20000000 	andcs	r0, r0, r0
   12b34:	00321000 	eorseq	r1, r2, r0
   12b38:	01080000 	mrseq	r0, (UNDEF: 8)
   12b3c:	57084f04 	strpl	r4, [r8, -r4, lsl #30]
   12b40:	0b000002 	bleq	12b50 <__exidx_end+0xcf50>
   12b44:	00000d0f 	andeq	r0, r0, pc, lsl #26
   12b48:	570a5004 	strpl	r5, [sl, -r4]
   12b4c:	00000002 	andeq	r0, r0, r2
   12b50:	000c070b 	andeq	r0, ip, fp, lsl #14
   12b54:	09510400 	ldmdbeq	r1, {sl}^
   12b58:	00000257 	andeq	r0, r0, r7, asr r2
   12b5c:	0da81180 	stfeqs	f1, [r8, #512]!	; 0x200
   12b60:	53040000 	movwpl	r0, #16384	; 0x4000
   12b64:	0000fb0a 	andeq	pc, r0, sl, lsl #22
   12b68:	11010000 	mrsne	r0, (UNDEF: 1)
   12b6c:	00000e99 	muleq	r0, r9, lr
   12b70:	fb0a5604 	blx	2a838a <__ccfg+0x2883e2>
   12b74:	04000000 	streq	r0, [r0], #-0
   12b78:	f9080001 			; <UNDEFINED> instruction: 0xf9080001
   12b7c:	67000000 	strvs	r0, [r0, -r0]
   12b80:	09000002 	stmdbeq	r0, {r1}
   12b84:	00000025 	andeq	r0, r0, r5, lsr #32
   12b88:	0610001f 			; <UNDEFINED> instruction: 0x0610001f
   12b8c:	9000000a 	andls	r0, r0, sl
   12b90:	08620401 	stmdaeq	r2!, {r0, sl}^
   12b94:	000002aa 	andeq	r0, r0, sl, lsr #5
   12b98:	000ea60b 	andeq	sl, lr, fp, lsl #12
   12b9c:	12630400 	rsbne	r0, r3, #0, 8
   12ba0:	000002aa 	andeq	r0, r0, sl, lsr #5
   12ba4:	05740b00 	ldrbeq	r0, [r4, #-2816]!	; 0xfffff500
   12ba8:	64040000 	strvs	r0, [r4], #-0
   12bac:	00002c06 	andeq	r2, r0, r6, lsl #24
   12bb0:	fe0b0400 	cdp2	4, 0, cr0, cr11, cr0, {0}
   12bb4:	04000002 	streq	r0, [r0], #-2
   12bb8:	02b00966 	adcseq	r0, r0, #1671168	; 0x198000
   12bbc:	0b080000 	bleq	212bc4 <__ccfg+0x1f2c1c>
   12bc0:	00000032 	andeq	r0, r0, r2, lsr r0
   12bc4:	121e6704 	andsne	r6, lr, #4, 14	; 0x100000
   12bc8:	88000002 	stmdahi	r0, {r1}
   12bcc:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
   12bd0:	08000002 	stmdaeq	r0, {r1}
   12bd4:	000002c0 	andeq	r0, r0, r0, asr #5
   12bd8:	000002c0 	andeq	r0, r0, r0, asr #5
   12bdc:	00002509 	andeq	r2, r0, r9, lsl #10
   12be0:	0f001f00 	svceq	0x00001f00
   12be4:	0002c604 	andeq	ip, r2, r4, lsl #12
   12be8:	a70d1200 	strge	r1, [sp, -r0, lsl #4]
   12bec:	0800000c 	stmdaeq	r0, {r2, r3}
   12bf0:	ef087a04 	svc	0x00087a04
   12bf4:	0b000002 	bleq	12c04 <__exidx_end+0xd004>
   12bf8:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
   12bfc:	ef117b04 	svc	0x00117b04
   12c00:	00000002 	andeq	r0, r0, r2
   12c04:	001d820b 	andseq	r8, sp, fp, lsl #4
   12c08:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
   12c0c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12c10:	040f0004 	streq	r0, [pc], #-4	; 12c18 <__exidx_end+0xd018>
   12c14:	00000055 	andeq	r0, r0, r5, asr r0
   12c18:	0004440d 	andeq	r4, r4, sp, lsl #8
   12c1c:	ba046800 	blt	12cc24 <__ccfg+0x10cc7c>
   12c20:	00043808 	andeq	r3, r4, r8, lsl #16
   12c24:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   12c28:	12bb0400 	adcsne	r0, fp, #0, 8
   12c2c:	000002ef 	andeq	r0, r0, pc, ror #5
   12c30:	725f0e00 	subsvc	r0, pc, #0, 28
   12c34:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
   12c38:	0000002c 	andeq	r0, r0, ip, lsr #32
   12c3c:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   12c40:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
   12c44:	0000002c 	andeq	r0, r0, ip, lsr #32
   12c48:	01bb0b08 			; <UNDEFINED> instruction: 0x01bb0b08
   12c4c:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
   12c50:	00005c09 	andeq	r5, r0, r9, lsl #24
   12c54:	490b0c00 	stmdbmi	fp, {sl, fp}
   12c58:	04000008 	streq	r0, [r0], #-8
   12c5c:	005c09bf 	ldrheq	r0, [ip], #-159	; 0xffffff61
   12c60:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   12c64:	0066625f 	rsbeq	r6, r6, pc, asr r2
   12c68:	c711c004 	ldrgt	ip, [r1, -r4]
   12c6c:	10000002 	andne	r0, r0, r2
   12c70:	0001b20b 	andeq	fp, r1, fp, lsl #4
   12c74:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
   12c78:	0000002c 	andeq	r0, r0, ip, lsr #32
   12c7c:	03030b18 	movweq	r0, #15128	; 0x3b18
   12c80:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
   12c84:	0000f90a 	andeq	pc, r0, sl, lsl #18
   12c88:	110b1c00 	tstne	fp, r0, lsl #24
   12c8c:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
   12c90:	05bc1dca 	ldreq	r1, [ip, #3530]!	; 0xdca
   12c94:	0b200000 	bleq	812c9c <__ccfg+0x7f2cf4>
   12c98:	00001cd8 	ldrdeq	r1, [r0], -r8
   12c9c:	e61dcc04 	ldr	ip, [sp], -r4, lsl #24
   12ca0:	24000005 	strcs	r0, [r0], #-5
   12ca4:	000ec60b 	andeq	ip, lr, fp, lsl #12
   12ca8:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 12cb0 <__exidx_end+0xd0b0>
   12cac:	0000060a 	andeq	r0, r0, sl, lsl #12
   12cb0:	1cc60b28 	vstmiane	r6, {d16-<overflow reg d35>}
   12cb4:	d0040000 	andle	r0, r4, r0
   12cb8:	00062409 	andeq	r2, r6, r9, lsl #8
   12cbc:	5f0e2c00 	svcpl	0x000e2c00
   12cc0:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
   12cc4:	02c711d3 	sbceq	r1, r7, #-1073741772	; 0xc0000034
   12cc8:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   12ccc:	0070755f 	rsbseq	r7, r0, pc, asr r5
   12cd0:	ef12d404 	svc	0x0012d404
   12cd4:	38000002 	stmdacc	r0, {r1}
   12cd8:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   12cdc:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
   12ce0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ce4:	0efd0b3c 	vmoveq.u8	r0, d13[5]
   12ce8:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   12cec:	00062a11 	andeq	r2, r6, r1, lsl sl
   12cf0:	460b4000 	strmi	r4, [fp], -r0
   12cf4:	0400000e 	streq	r0, [r0], #-14
   12cf8:	063a11d9 			; <UNDEFINED> instruction: 0x063a11d9
   12cfc:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
   12d00:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   12d04:	c711dc04 	ldrgt	sp, [r1, -r4, lsl #24]
   12d08:	44000002 	strmi	r0, [r0], #-2
   12d0c:	000b640b 	andeq	r6, fp, fp, lsl #8
   12d10:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
   12d14:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d18:	04780b4c 	ldrbteq	r0, [r8], #-2892	; 0xfffff4b4
   12d1c:	e0040000 	and	r0, r4, r0
   12d20:	00007f0a 	andeq	r7, r0, sl, lsl #30
   12d24:	350b5000 	strcc	r5, [fp, #-0]
   12d28:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
   12d2c:	045612e3 	ldrbeq	r1, [r6], #-739	; 0xfffffd1d
   12d30:	0b540000 	bleq	1512d38 <__ccfg+0x14f2d90>
   12d34:	00000b8a 	andeq	r0, r0, sl, lsl #23
   12d38:	130ce704 	movwne	lr, #50948	; 0xc704
   12d3c:	58000001 	stmdapl	r0, {r0}
   12d40:	000a0e0b 	andeq	r0, sl, fp, lsl #28
   12d44:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
   12d48:	000000ed 	andeq	r0, r0, sp, ror #1
   12d4c:	0e790b5c 	vmoveq.s8	r0, d9[6]
   12d50:	ea040000 	b	112d58 <__ccfg+0xf2db0>
   12d54:	00002c09 	andeq	r2, r0, r9, lsl #24
   12d58:	13006400 	movwne	r6, #1024	; 0x400
   12d5c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d60:	00000456 	andeq	r0, r0, r6, asr r4
   12d64:	00045614 	andeq	r5, r4, r4, lsl r6
   12d68:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12d6c:	aa140000 	bge	512d74 <__ccfg+0x4f2dcc>
   12d70:	14000005 	strne	r0, [r0], #-5
   12d74:	0000002c 	andeq	r0, r0, ip, lsr #32
   12d78:	61040f00 	tstvs	r4, r0, lsl #30
   12d7c:	15000004 	strne	r0, [r0, #-4]
   12d80:	00000456 	andeq	r0, r0, r6, asr r4
   12d84:	000d4116 	andeq	r4, sp, r6, lsl r1
   12d88:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
   12d8c:	aa080265 	bge	213728 <__ccfg+0x1f3780>
   12d90:	17000005 	strne	r0, [r0, -r5]
   12d94:	000008f4 	strdeq	r0, [r0], -r4
   12d98:	07026704 	streq	r6, [r2, -r4, lsl #14]
   12d9c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12da0:	07d21700 	ldrbeq	r1, [r2, r0, lsl #14]
   12da4:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12da8:	06960b02 	ldreq	r0, [r6], r2, lsl #22
   12dac:	17040000 	strne	r0, [r4, -r0]
   12db0:	000002ee 	andeq	r0, r0, lr, ror #5
   12db4:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
   12db8:	00000696 	muleq	r0, r6, r6
   12dbc:	0eec1708 	cdpeq	7, 14, cr1, cr12, cr8, {0}
   12dc0:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12dc4:	06961e02 	ldreq	r1, [r6], r2, lsl #28
   12dc8:	170c0000 	strne	r0, [ip, -r0]
   12dcc:	0000056f 	andeq	r0, r0, pc, ror #10
   12dd0:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
   12dd4:	0000002c 	andeq	r0, r0, ip, lsr #32
   12dd8:	04c41710 	strbeq	r1, [r4], #1808	; 0x710
   12ddc:	6f040000 	svcvs	0x00040000
   12de0:	08960802 	ldmeq	r6, {r1, fp}
   12de4:	17140000 	ldrne	r0, [r4, -r0]
   12de8:	00000e59 	andeq	r0, r0, r9, asr lr
   12dec:	07027204 	streq	r7, [r2, -r4, lsl #4]
   12df0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12df4:	42831730 	addmi	r1, r3, #48, 14	; 0xc00000
   12df8:	73040000 	movwvc	r0, #16384	; 0x4000
   12dfc:	08ab1602 	stmiaeq	fp!, {r1, r9, sl, ip}
   12e00:	17340000 	ldrne	r0, [r4, -r0]!
   12e04:	0000077a 	andeq	r0, r0, sl, ror r7
   12e08:	07027504 	streq	r7, [r2, -r4, lsl #10]
   12e0c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e10:	08741738 	ldmdaeq	r4!, {r3, r4, r5, r8, r9, sl, ip}^
   12e14:	77040000 	strvc	r0, [r4, -r0]
   12e18:	08bc0a02 	ldmeq	ip!, {r1, r9, fp}
   12e1c:	173c0000 	ldrne	r0, [ip, -r0]!
   12e20:	00000347 	andeq	r0, r0, r7, asr #6
   12e24:	13027a04 	movwne	r7, #10756	; 0x2a04
   12e28:	00000179 	andeq	r0, r0, r9, ror r1
   12e2c:	04021740 	streq	r1, [r2], #-1856	; 0xfffff8c0
   12e30:	7b040000 	blvc	112e38 <__ccfg+0xf2e90>
   12e34:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12e38:	17440000 	strbne	r0, [r4, -r0]
   12e3c:	000005f9 	strdeq	r0, [r0], -r9
   12e40:	13027c04 	movwne	r7, #11268	; 0x2c04
   12e44:	00000179 	andeq	r0, r0, r9, ror r1
   12e48:	080f1748 	stmdaeq	pc, {r3, r6, r8, r9, sl, ip}	; <UNPREDICTABLE>
   12e4c:	7d040000 	stcvc	0, cr0, [r4, #-0]
   12e50:	08c21402 	stmiaeq	r2, {r1, sl, ip}^
   12e54:	174c0000 	strbne	r0, [ip, -r0]
   12e58:	00000b4a 	andeq	r0, r0, sl, asr #22
   12e5c:	07028004 	streq	r8, [r2, -r4]
   12e60:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e64:	0c431750 	mcrreq	7, 5, r1, r3, cr0
   12e68:	81040000 	mrshi	r0, (UNDEF: 4)
   12e6c:	05aa0902 	streq	r0, [sl, #2306]!	; 0x902
   12e70:	17540000 	ldrbne	r0, [r4, -r0]
   12e74:	00000c5d 	andeq	r0, r0, sp, asr ip
   12e78:	0702a404 	streq	sl, [r2, -r4, lsl #8]
   12e7c:	00000871 	andeq	r0, r0, r1, ror r8
   12e80:	0a061858 	beq	198fe8 <__ccfg+0x179040>
   12e84:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   12e88:	02aa1302 	adceq	r1, sl, #134217728	; 0x8000000
   12e8c:	01480000 	mrseq	r0, (UNDEF: 72)
   12e90:	00069e18 	andeq	r9, r6, r8, lsl lr
   12e94:	02a90400 	adceq	r0, r9, #0, 8
   12e98:	00026712 	andeq	r6, r2, r2, lsl r7
   12e9c:	18014c00 	stmdane	r1, {sl, fp, lr}
   12ea0:	00000685 	andeq	r0, r0, r5, lsl #13
   12ea4:	0c02ad04 	stceq	13, cr10, [r2], {4}
   12ea8:	000008d3 	ldrdeq	r0, [r0], -r3
   12eac:	c51802dc 	ldrgt	r0, [r8, #-732]	; 0xfffffd24
   12eb0:	0400000c 	streq	r0, [r0], #-12
   12eb4:	571002b2 			; <UNDEFINED> instruction: 0x571002b2
   12eb8:	e0000006 	and	r0, r0, r6
   12ebc:	0a961802 	beq	fe598ecc <_estack+0xde593ecc>
   12ec0:	b4040000 	strlt	r0, [r4], #-0
   12ec4:	08df0a02 	ldmeq	pc, {r1, r9, fp}^	; <UNPREDICTABLE>
   12ec8:	02ec0000 	rsceq	r0, ip, #0
   12ecc:	b0040f00 	andlt	r0, r4, r0, lsl #30
   12ed0:	02000005 	andeq	r0, r0, #5
   12ed4:	0c540801 	mrrceq	8, 0, r0, r4, cr1
   12ed8:	b0150000 	andslt	r0, r5, r0
   12edc:	0f000005 	svceq	0x00000005
   12ee0:	00043804 	andeq	r3, r4, r4, lsl #16
   12ee4:	002c1300 	eoreq	r1, ip, r0, lsl #6
   12ee8:	05e00000 	strbeq	r0, [r0, #0]!
   12eec:	56140000 	ldrpl	r0, [r4], -r0
   12ef0:	14000004 	strne	r0, [r0], #-4
   12ef4:	000000f9 	strdeq	r0, [r0], -r9
   12ef8:	0005e014 	andeq	lr, r5, r4, lsl r0
   12efc:	002c1400 	eoreq	r1, ip, r0, lsl #8
   12f00:	0f000000 	svceq	0x00000000
   12f04:	0005b704 	andeq	fp, r5, r4, lsl #14
   12f08:	c2040f00 	andgt	r0, r4, #0, 30
   12f0c:	13000005 	movwne	r0, #5
   12f10:	0000008b 	andeq	r0, r0, fp, lsl #1
   12f14:	0000060a 	andeq	r0, r0, sl, lsl #12
   12f18:	00045614 	andeq	r5, r4, r4, lsl r6
   12f1c:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12f20:	8b140000 	blhi	512f28 <__ccfg+0x4f2f80>
   12f24:	14000000 	strne	r0, [r0], #-0
   12f28:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f2c:	ec040f00 	stc	15, cr0, [r4], {-0}
   12f30:	13000005 	movwne	r0, #5
   12f34:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f38:	00000624 	andeq	r0, r0, r4, lsr #12
   12f3c:	00045614 	andeq	r5, r4, r4, lsl r6
   12f40:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12f44:	0f000000 	svceq	0x00000000
   12f48:	00061004 	andeq	r1, r6, r4
   12f4c:	00550800 	subseq	r0, r5, r0, lsl #16
   12f50:	063a0000 	ldrteq	r0, [sl], -r0
   12f54:	25090000 	strcs	r0, [r9, #-0]
   12f58:	02000000 	andeq	r0, r0, #0
   12f5c:	00550800 	subseq	r0, r5, r0, lsl #16
   12f60:	064a0000 	strbeq	r0, [sl], -r0
   12f64:	25090000 	strcs	r0, [r9, #-0]
   12f68:	00000000 	andeq	r0, r0, r0
   12f6c:	04650400 	strbteq	r0, [r5], #-1024	; 0xfffffc00
   12f70:	24040000 	strcs	r0, [r4], #-0
   12f74:	02f51a01 	rscseq	r1, r5, #4096	; 0x1000
   12f78:	bf190000 	svclt	0x00190000
   12f7c:	0c00000c 	stceq	0, cr0, [r0], {12}
   12f80:	08012804 	stmdaeq	r1, {r2, fp, sp}
   12f84:	00000690 	muleq	r0, r0, r6
   12f88:	000ea617 	andeq	sl, lr, r7, lsl r6
   12f8c:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
   12f90:	00069011 	andeq	r9, r6, r1, lsl r0
   12f94:	be170000 	cdplt	0, 1, cr0, cr7, cr0, {0}
   12f98:	0400000b 	streq	r0, [r0], #-11
   12f9c:	2c07012b 	stfcss	f0, [r7], {43}	; 0x2b
   12fa0:	04000000 	streq	r0, [r0], #-0
   12fa4:	00076217 	andeq	r6, r7, r7, lsl r2
   12fa8:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
   12fac:	0006960b 	andeq	r9, r6, fp, lsl #12
   12fb0:	0f000800 	svceq	0x00000800
   12fb4:	00065704 	andeq	r5, r6, r4, lsl #14
   12fb8:	4a040f00 	bmi	116bc0 <__ccfg+0xf6c18>
   12fbc:	19000006 	stmdbne	r0, {r1, r2}
   12fc0:	000003d1 	ldrdeq	r0, [r0], -r1
   12fc4:	0144040e 	cmpeq	r4, lr, lsl #8
   12fc8:	0006d508 	andeq	sp, r6, r8, lsl #10
   12fcc:	162d1700 	strtne	r1, [sp], -r0, lsl #14
   12fd0:	45040000 	strmi	r0, [r4, #-0]
   12fd4:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
   12fd8:	17000000 	strne	r0, [r0, -r0]
   12fdc:	00000821 	andeq	r0, r0, r1, lsr #16
   12fe0:	12014604 	andne	r4, r1, #4, 12	; 0x400000
   12fe4:	000006d5 	ldrdeq	r0, [r0], -r5
   12fe8:	14df1706 	ldrbne	r1, [pc], #1798	; 12ff0 <__exidx_end+0xd3f0>
   12fec:	47040000 	strmi	r0, [r4, -r0]
   12ff0:	00631201 	rsbeq	r1, r3, r1, lsl #4
   12ff4:	000c0000 	andeq	r0, ip, r0
   12ff8:	00006308 	andeq	r6, r0, r8, lsl #6
   12ffc:	0006e500 	andeq	lr, r6, r0, lsl #10
   13000:	00250900 	eoreq	r0, r5, r0, lsl #18
   13004:	00020000 	andeq	r0, r2, r0
   13008:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
   1300c:	07fa0702 	ldrbeq	r0, [sl, r2, lsl #14]!
   13010:	4c170000 	ldcmi	0, cr0, [r7], {-0}
   13014:	0400000e 	streq	r0, [r0], #-14
   13018:	25180287 	ldrcs	r0, [r8, #-647]	; 0xfffffd79
   1301c:	00000000 	andeq	r0, r0, r0
   13020:	000ccd17 	andeq	ip, ip, r7, lsl sp
   13024:	02880400 	addeq	r0, r8, #0, 8
   13028:	0005aa12 	andeq	sl, r5, r2, lsl sl
   1302c:	2f170400 	svccs	0x00170400
   13030:	04000004 	streq	r0, [r0], #-4
   13034:	fa100289 	blx	413a60 <__ccfg+0x3f3ab8>
   13038:	08000007 	stmdaeq	r0, {r0, r1, r2}
   1303c:	000b3317 	andeq	r3, fp, r7, lsl r3
   13040:	028a0400 	addeq	r0, sl, #0, 8
   13044:	00018f17 	andeq	r8, r1, r7, lsl pc
   13048:	d9172400 	ldmdble	r7, {sl, sp}
   1304c:	04000007 	streq	r0, [r0], #-7
   13050:	2c0f028b 	sfmcs	f0, 4, [pc], {139}	; 0x8b
   13054:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   13058:	000ea117 	andeq	sl, lr, r7, lsl r1
   1305c:	028c0400 	addeq	r0, ip, #0, 8
   13060:	0000782c 	andeq	r7, r0, ip, lsr #16
   13064:	76175000 	ldrvc	r5, [r7], -r0
   13068:	04000000 	streq	r0, [r0], #-0
   1306c:	9c1a028d 	lfmls	f0, 4, [sl], {141}	; 0x8d
   13070:	58000006 	stmdapl	r0, {r1, r2}
   13074:	00062917 	andeq	r2, r6, r7, lsl r9
   13078:	028e0400 	addeq	r0, lr, #0, 8
   1307c:	0000ed16 	andeq	lr, r0, r6, lsl sp
   13080:	da176800 	ble	5ed088 <__ccfg+0x5cd0e0>
   13084:	0400000c 	streq	r0, [r0], #-12
   13088:	ed16028f 	lfm	f0, 4, [r6, #-572]	; 0xfffffdc4
   1308c:	70000000 	andvc	r0, r0, r0
   13090:	00006817 	andeq	r6, r0, r7, lsl r8
   13094:	02900400 	addseq	r0, r0, #0, 8
   13098:	0000ed16 	andeq	lr, r0, r6, lsl sp
   1309c:	5a177800 	bpl	5f10a4 <__ccfg+0x5d10fc>
   130a0:	0400000b 	streq	r0, [r0], #-11
   130a4:	0a100291 	beq	413af0 <__ccfg+0x3f3b48>
   130a8:	80000008 	andhi	r0, r0, r8
   130ac:	00040c17 	andeq	r0, r4, r7, lsl ip
   130b0:	02920400 	addseq	r0, r2, #0, 8
   130b4:	00081a10 	andeq	r1, r8, r0, lsl sl
   130b8:	7d178800 	ldcvc	8, cr8, [r7, #-0]
   130bc:	0400000c 	streq	r0, [r0], #-12
   130c0:	2c0f0293 	sfmcs	f0, 4, [pc], {147}	; 0x93
   130c4:	a0000000 	andge	r0, r0, r0
   130c8:	0002a317 	andeq	sl, r2, r7, lsl r3
   130cc:	02940400 	addseq	r0, r4, #0, 8
   130d0:	0000ed16 	andeq	lr, r0, r6, lsl sp
   130d4:	8f17a400 	svchi	0x0017a400
   130d8:	04000006 	streq	r0, [r0], #-6
   130dc:	ed160295 	lfm	f0, 4, [r6, #-596]	; 0xfffffdac
   130e0:	ac000000 	stcge	0, cr0, [r0], {-0}
   130e4:	0005ab17 	andeq	sl, r5, r7, lsl fp
   130e8:	02960400 	addseq	r0, r6, #0, 8
   130ec:	0000ed16 	andeq	lr, r0, r6, lsl sp
   130f0:	3a17b400 	bcc	6000f8 <__ccfg+0x5e0150>
   130f4:	04000008 	streq	r0, [r0], #-8
   130f8:	ed160297 	lfm	f0, 4, [r6, #-604]	; 0xfffffda4
   130fc:	bc000000 	stclt	0, cr0, [r0], {-0}
   13100:	00061817 	andeq	r1, r6, r7, lsl r8
   13104:	02980400 	addseq	r0, r8, #0, 8
   13108:	0000ed16 	andeq	lr, r0, r6, lsl sp
   1310c:	f217c400 	vshl.s16	d12, d0, d7
   13110:	04000008 	streq	r0, [r0], #-8
   13114:	2c080299 	sfmcs	f0, 4, [r8], {153}	; 0x99
   13118:	cc000000 	stcgt	0, cr0, [r0], {-0}
   1311c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   13120:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
   13124:	25090000 	strcs	r0, [r9, #-0]
   13128:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   1312c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   13130:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
   13134:	25090000 	strcs	r0, [r9, #-0]
   13138:	07000000 	streq	r0, [r0, -r0]
   1313c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   13140:	082a0000 	stmdaeq	sl!, {}	; <UNPREDICTABLE>
   13144:	25090000 	strcs	r0, [r9, #-0]
   13148:	17000000 	strne	r0, [r0, -r0]
   1314c:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
   13150:	5107029e 			; <UNDEFINED> instruction: 0x5107029e
   13154:	17000008 	strne	r0, [r0, -r8]
   13158:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
   1315c:	1b02a104 	blne	bb574 <__ccfg+0x9b5cc>
   13160:	00000851 	andeq	r0, r0, r1, asr r8
   13164:	0ef41700 	cdpeq	7, 15, cr1, cr4, cr0, {0}
   13168:	a2040000 	andge	r0, r4, #0
   1316c:	08611802 	stmdaeq	r1!, {r1, fp, ip}^
   13170:	00780000 	rsbseq	r0, r8, r0
   13174:	0002ef08 	andeq	lr, r2, r8, lsl #30
   13178:	00086100 	andeq	r6, r8, r0, lsl #2
   1317c:	00250900 	eoreq	r0, r5, r0, lsl #18
   13180:	001d0000 	andseq	r0, sp, r0
   13184:	00002508 	andeq	r2, r0, r8, lsl #10
   13188:	00087100 	andeq	r7, r8, r0, lsl #2
   1318c:	00250900 	eoreq	r0, r5, r0, lsl #18
   13190:	001d0000 	andseq	r0, sp, r0
   13194:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
   13198:	08960302 	ldmeq	r6, {r1, r8, r9}
   1319c:	411c0000 	tstmi	ip, r0
   131a0:	0400000d 	streq	r0, [r0], #-13
   131a4:	e50b029a 	str	r0, [fp, #-666]	; 0xfffffd66
   131a8:	1c000006 	stcne	0, cr0, [r0], {6}
   131ac:	00000b42 	andeq	r0, r0, r2, asr #22
   131b0:	0b02a304 	bleq	bbdc8 <__ccfg+0x9be20>
   131b4:	0000082a 	andeq	r0, r0, sl, lsr #16
   131b8:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   131bc:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
   131c0:	25090000 	strcs	r0, [r9, #-0]
   131c4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   131c8:	0eac1d00 	cdpeq	13, 10, cr1, cr12, cr0, {0}
   131cc:	040f0000 	streq	r0, [pc], #-0	; 131d4 <__exidx_end+0xd5d4>
   131d0:	000008a6 	andeq	r0, r0, r6, lsr #17
   131d4:	0008bc1e 	andeq	fp, r8, lr, lsl ip
   131d8:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   131dc:	0f000000 	svceq	0x00000000
   131e0:	0008b104 	andeq	fp, r8, r4, lsl #2
   131e4:	79040f00 	stmdbvc	r4, {r8, r9, sl, fp}
   131e8:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   131ec:	000008d3 	ldrdeq	r0, [r0], -r3
   131f0:	00002c14 	andeq	r2, r0, r4, lsl ip
   131f4:	040f0000 	streq	r0, [pc], #-0	; 131fc <__exidx_end+0xd5fc>
   131f8:	000008d9 	ldrdeq	r0, [r0], -r9
   131fc:	08c8040f 	stmiaeq	r8, {r0, r1, r2, r3, sl}^
   13200:	4a080000 	bmi	213208 <__ccfg+0x1f3260>
   13204:	ef000006 	svc	0x00000006
   13208:	09000008 	stmdbeq	r0, {r3}
   1320c:	00000025 	andeq	r0, r0, r5, lsr #32
   13210:	b21f0002 	andslt	r0, pc, #2
   13214:	0400000a 	streq	r0, [r0], #-10
   13218:	56170333 			; <UNDEFINED> instruction: 0x56170333
   1321c:	1f000004 	svcne	0x00000004
   13220:	00000aab 	andeq	r0, r0, fp, lsr #21
   13224:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   13228:	0000045c 	andeq	r0, r0, ip, asr r4
   1322c:	00442520 	subeq	r2, r4, r0, lsr #10
   13230:	0e670600 	cdpeq	6, 6, cr0, cr7, cr0, {0}
   13234:	000005aa 	andeq	r0, r0, sl, lsr #11
   13238:	000e5421 	andeq	r5, lr, r1, lsr #8
   1323c:	05900600 	ldreq	r0, [r0, #1536]	; 0x600
   13240:	0000002c 	andeq	r0, r0, ip, lsr #32
   13244:	00004988 	andeq	r4, r0, r8, lsl #19
   13248:	00000038 	andeq	r0, r0, r8, lsr r0
   1324c:	09449c01 	stmdbeq	r4, {r0, sl, fp, ip, pc}^
   13250:	29220000 	stmdbcs	r2!, {}	; <UNPREDICTABLE>
   13254:	01000047 	tsteq	r0, r7, asr #32
   13258:	04561249 	ldrbeq	r1, [r6], #-585	; 0xfffffdb7
   1325c:	5ab90000 	bpl	fee53264 <_estack+0xdee4e264>
   13260:	5ab30000 	bpl	fecd3268 <_estack+0xdecce268>
   13264:	23000000 	movwcs	r0, #0
   13268:	00004682 	andeq	r4, r0, r2, lsl #13
   1326c:	74069f06 	strvc	r9, [r6], #-3846	; 0xfffff0fa
   13270:	14000049 	strne	r0, [r0], #-73	; 0xffffffb7
   13274:	01000000 	mrseq	r0, (UNDEF: 0)
   13278:	162e249c 			; <UNDEFINED> instruction: 0x162e249c
   1327c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
   13280:	00002515 	andeq	r2, r0, r5, lsl r5
   13284:	22500100 	subscs	r0, r0, #0, 2
   13288:	00004729 	andeq	r4, r0, r9, lsr #14
   1328c:	56124001 	ldrpl	r4, [r2], -r1
   13290:	ea000004 	b	132a8 <__exidx_end+0xd6a8>
   13294:	e600005a 			; <UNDEFINED> instruction: 0xe600005a
   13298:	0000005a 	andeq	r0, r0, sl, asr r0
   1329c:	00092600 	andeq	r2, r9, r0, lsl #12
   132a0:	c1000400 	tstgt	r0, r0, lsl #8
   132a4:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
   132a8:	00453b01 	subeq	r3, r5, r1, lsl #22
   132ac:	473b0c00 	ldrmi	r0, [fp, -r0, lsl #24]!
   132b0:	46dc0000 	ldrbmi	r0, [ip], r0
   132b4:	923d0000 	eorsls	r0, sp, #0
   132b8:	04020000 	streq	r0, [r2], #-0
   132bc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   132c0:	07040300 	streq	r0, [r4, -r0, lsl #6]
   132c4:	00000422 	andeq	r0, r0, r2, lsr #8
   132c8:	e8050803 	stmda	r5, {r0, r1, fp}
   132cc:	03000007 	movweq	r0, #7
   132d0:	440c0408 	strmi	r0, [ip], #-1032	; 0xfffffbf8
   132d4:	c5040000 	strgt	r0, [r4, #-0]
   132d8:	0100000b 	tsteq	r0, fp
   132dc:	24170165 	ldrcs	r0, [r7], #-357	; 0xfffffe9b
   132e0:	03000000 	movweq	r0, #0
   132e4:	0c4d0601 	mcrreq	6, 0, r0, sp, cr1
   132e8:	01030000 	mrseq	r0, (UNDEF: 3)
   132ec:	000c4b08 	andeq	r4, ip, r8, lsl #22
   132f0:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   132f4:	00000a5b 	andeq	r0, r0, fp, asr sl
   132f8:	48070203 	stmdami	r7, {r0, r1, r9}
   132fc:	0300000d 	movweq	r0, #13
   13300:	07ed0504 	strbeq	r0, [sp, r4, lsl #10]!
   13304:	04030000 	streq	r0, [r3], #-0
   13308:	00041d07 	andeq	r1, r4, r7, lsl #26
   1330c:	07080300 	streq	r0, [r8, -r0, lsl #6]
   13310:	00000418 	andeq	r0, r0, r8, lsl r4
   13314:	000e2b05 	andeq	r2, lr, r5, lsl #22
   13318:	0e2e0200 	cdpeq	2, 2, cr0, cr14, cr0, {0}
   1331c:	00000062 	andeq	r0, r0, r2, rrx
   13320:	0002f605 	andeq	pc, r2, r5, lsl #12
   13324:	0e740200 	cdpeq	2, 7, cr0, cr4, cr0, {0}
   13328:	00000062 	andeq	r0, r0, r2, rrx
   1332c:	a5020406 	strge	r0, [r2, #-1030]	; 0xfffffbfa
   13330:	0000b103 	andeq	fp, r0, r3, lsl #2
   13334:	075c0700 	ldrbeq	r0, [ip, -r0, lsl #14]
   13338:	a7020000 	strge	r0, [r2, -r0]
   1333c:	0000390c 	andeq	r3, r0, ip, lsl #18
   13340:	0aa40700 	beq	fe914f48 <_estack+0xde90ff48>
   13344:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
   13348:	0000b113 	andeq	fp, r0, r3, lsl r1
   1334c:	4d080000 	stcmi	0, cr0, [r8, #-0]
   13350:	c1000000 	mrsgt	r0, (UNDEF: 0)
   13354:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   13358:	00000024 	andeq	r0, r0, r4, lsr #32
   1335c:	080a0003 	stmdaeq	sl, {r0, r1}
   13360:	e509a202 	str	sl, [r9, #-514]	; 0xfffffdfe
   13364:	0b000000 	bleq	1336c <__exidx_end+0xd76c>
   13368:	00000385 	andeq	r0, r0, r5, lsl #7
   1336c:	1d07a402 	cfstrsne	mvf10, [r7, #-8]
   13370:	00000000 	andeq	r0, r0, r0
   13374:	0005f10b 	andeq	pc, r5, fp, lsl #2
   13378:	05a90200 	streq	r0, [r9, #512]!	; 0x200
   1337c:	0000008f 	andeq	r0, r0, pc, lsl #1
   13380:	a5050004 	strge	r0, [r5, #-4]
   13384:	02000008 	andeq	r0, r0, #8
   13388:	00c103aa 	sbceq	r0, r1, sl, lsr #7
   1338c:	040c0000 	streq	r0, [ip], #-0
   13390:	00083205 	andeq	r3, r8, r5, lsl #4
   13394:	19160300 	ldmdbne	r6, {r8, r9}
   13398:	00000069 	andeq	r0, r0, r9, rrx
   1339c:	00024a05 	andeq	r4, r2, r5, lsl #20
   133a0:	0d0c0400 	cfstrseq	mvf0, [ip, #-0]
   133a4:	0000001d 	andeq	r0, r0, sp, lsl r0
   133a8:	00071a05 	andeq	r1, r7, r5, lsl #20
   133ac:	1b230300 	blne	8d3fb4 <__ccfg+0x8b400c>
   133b0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   133b4:	0003290d 	andeq	r2, r3, sp, lsl #18
   133b8:	34031800 	strcc	r1, [r3], #-2048	; 0xfffff800
   133bc:	00017108 	andeq	r7, r1, r8, lsl #2
   133c0:	0ea60b00 	vfmaeq.f64	d0, d6, d0
   133c4:	36030000 	strcc	r0, [r3], -r0
   133c8:	00017113 	andeq	r7, r1, r3, lsl r1
   133cc:	5f0e0000 	svcpl	0x000e0000
   133d0:	3703006b 	strcc	r0, [r3, -fp, rrx]
   133d4:	00001d07 	andeq	r1, r0, r7, lsl #26
   133d8:	520b0400 	andpl	r0, fp, #0, 8
   133dc:	0300000b 	movweq	r0, #11
   133e0:	001d0b37 	andseq	r0, sp, r7, lsr fp
   133e4:	0b080000 	bleq	2133ec <__ccfg+0x1f3444>
   133e8:	000043d7 	ldrdeq	r4, [r0], -r7
   133ec:	1d143703 	ldcne	7, cr3, [r4, #-12]
   133f0:	0c000000 	stceq	0, cr0, [r0], {-0}
   133f4:	00044c0b 	andeq	r4, r4, fp, lsl #24
   133f8:	1b370300 	blne	dd4000 <__ccfg+0xdb4058>
   133fc:	0000001d 	andeq	r0, r0, sp, lsl r0
   13400:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   13404:	0b380300 	bleq	e1400c <__ccfg+0xdf4064>
   13408:	00000177 	andeq	r0, r0, r7, ror r1
   1340c:	040f0014 	streq	r0, [pc], #-20	; 13414 <__exidx_end+0xd814>
   13410:	00000117 	andeq	r0, r0, r7, lsl r1
   13414:	0000f308 	andeq	pc, r0, r8, lsl #6
   13418:	00018700 	andeq	r8, r1, r0, lsl #14
   1341c:	00240900 	eoreq	r0, r4, r0, lsl #18
   13420:	00000000 	andeq	r0, r0, r0
   13424:	000b6d0d 	andeq	r6, fp, sp, lsl #26
   13428:	3c032400 	cfstrscc	mvf2, [r3], {-0}
   1342c:	00020a08 	andeq	r0, r2, r8, lsl #20
   13430:	055c0b00 	ldrbeq	r0, [ip, #-2816]	; 0xfffff500
   13434:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
   13438:	00001d09 	andeq	r1, r0, r9, lsl #26
   1343c:	ae0b0000 	cdpge	0, 0, cr0, cr11, cr0, {0}
   13440:	03000003 	movweq	r0, #3
   13444:	001d093f 	andseq	r0, sp, pc, lsr r9
   13448:	0b040000 	bleq	113450 <__ccfg+0xf34a8>
   1344c:	0000034f 	andeq	r0, r0, pc, asr #6
   13450:	1d094003 	stcne	0, cr4, [r9, #-12]
   13454:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13458:	0006640b 	andeq	r6, r6, fp, lsl #8
   1345c:	09410300 	stmdbeq	r1, {r8, r9}^
   13460:	0000001d 	andeq	r0, r0, sp, lsl r0
   13464:	09440b0c 	stmdbeq	r4, {r2, r3, r8, r9, fp}^
   13468:	42030000 	andmi	r0, r3, #0
   1346c:	00001d09 	andeq	r1, r0, r9, lsl #26
   13470:	be0b1000 	cdplt	0, 0, cr1, cr11, cr0, {0}
   13474:	0300000a 	movweq	r0, #10
   13478:	001d0943 	andseq	r0, sp, r3, asr #18
   1347c:	0b140000 	bleq	513484 <__ccfg+0x4f34dc>
   13480:	0000033d 	andeq	r0, r0, sp, lsr r3
   13484:	1d094403 	cfstrsne	mvf4, [r9, #-12]
   13488:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1348c:	0005650b 	andeq	r6, r5, fp, lsl #10
   13490:	09450300 	stmdbeq	r5, {r8, r9}^
   13494:	0000001d 	andeq	r0, r0, sp, lsl r0
   13498:	08e00b1c 	stmiaeq	r0!, {r2, r3, r4, r8, r9, fp}^
   1349c:	46030000 	strmi	r0, [r3], -r0
   134a0:	00001d09 	andeq	r1, r0, r9, lsl #26
   134a4:	10002000 	andne	r2, r0, r0
   134a8:	00000032 	andeq	r0, r0, r2, lsr r0
   134ac:	4f030108 	svcmi	0x00030108
   134b0:	00024f08 	andeq	r4, r2, r8, lsl #30
   134b4:	0d0f0b00 	vstreq	d0, [pc, #-0]	; 134bc <__exidx_end+0xd8bc>
   134b8:	50030000 	andpl	r0, r3, r0
   134bc:	00024f0a 	andeq	r4, r2, sl, lsl #30
   134c0:	070b0000 	streq	r0, [fp, -r0]
   134c4:	0300000c 	movweq	r0, #12
   134c8:	024f0951 	subeq	r0, pc, #1327104	; 0x144000
   134cc:	11800000 	orrne	r0, r0, r0
   134d0:	00000da8 	andeq	r0, r0, r8, lsr #27
   134d4:	f30a5303 	vcgt.u8	d5, d10, d3
   134d8:	00000000 	andeq	r0, r0, r0
   134dc:	0e991101 	fmleqe	f1, f1, f1
   134e0:	56030000 	strpl	r0, [r3], -r0
   134e4:	0000f30a 	andeq	pc, r0, sl, lsl #6
   134e8:	00010400 	andeq	r0, r1, r0, lsl #8
   134ec:	0000f108 	andeq	pc, r0, r8, lsl #2
   134f0:	00025f00 	andeq	r5, r2, r0, lsl #30
   134f4:	00240900 	eoreq	r0, r4, r0, lsl #18
   134f8:	001f0000 	andseq	r0, pc, r0
   134fc:	000a0610 	andeq	r0, sl, r0, lsl r6
   13500:	03019000 	movweq	r9, #4096	; 0x1000
   13504:	02a20862 	adceq	r0, r2, #6422528	; 0x620000
   13508:	a60b0000 	strge	r0, [fp], -r0
   1350c:	0300000e 	movweq	r0, #14
   13510:	02a21263 	adceq	r1, r2, #805306374	; 0x30000006
   13514:	0b000000 	bleq	1351c <__exidx_end+0xd91c>
   13518:	00000574 	andeq	r0, r0, r4, ror r5
   1351c:	1d066403 	cfstrsne	mvf6, [r6, #-12]
   13520:	04000000 	streq	r0, [r0], #-0
   13524:	0002fe0b 	andeq	pc, r2, fp, lsl #28
   13528:	09660300 	stmdbeq	r6!, {r8, r9}^
   1352c:	000002a8 	andeq	r0, r0, r8, lsr #5
   13530:	00320b08 	eorseq	r0, r2, r8, lsl #22
   13534:	67030000 	strvs	r0, [r3, -r0]
   13538:	00020a1e 	andeq	r0, r2, lr, lsl sl
   1353c:	0f008800 	svceq	0x00008800
   13540:	00025f04 	andeq	r5, r2, r4, lsl #30
   13544:	02b80800 	adcseq	r0, r8, #0, 16
   13548:	02b80000 	adcseq	r0, r8, #0
   1354c:	24090000 	strcs	r0, [r9], #-0
   13550:	1f000000 	svcne	0x00000000
   13554:	be040f00 	cdplt	15, 0, cr0, cr4, cr0, {0}
   13558:	12000002 	andne	r0, r0, #2
   1355c:	000ca70d 	andeq	sl, ip, sp, lsl #14
   13560:	7a030800 	bvc	d5568 <__ccfg+0xb55c0>
   13564:	0002e708 	andeq	lr, r2, r8, lsl #14
   13568:	0cb90b00 	vldmiaeq	r9!, {d0-d-1}
   1356c:	7b030000 	blvc	d3574 <__ccfg+0xb35cc>
   13570:	0002e711 	andeq	lr, r2, r1, lsl r7
   13574:	820b0000 	andhi	r0, fp, #0
   13578:	0300001d 	movweq	r0, #29
   1357c:	001d067c 	andseq	r0, sp, ip, ror r6
   13580:	00040000 	andeq	r0, r4, r0
   13584:	004d040f 	subeq	r0, sp, pc, lsl #8
   13588:	440d0000 	strmi	r0, [sp], #-0
   1358c:	68000004 	stmdavs	r0, {r2}
   13590:	3008ba03 	andcc	fp, r8, r3, lsl #20
   13594:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   13598:	0300705f 	movweq	r7, #95	; 0x5f
   1359c:	02e712bb 	rsceq	r1, r7, #-1342177269	; 0xb000000b
   135a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   135a4:	0300725f 	movweq	r7, #607	; 0x25f
   135a8:	001d07bc 			; <UNDEFINED> instruction: 0x001d07bc
   135ac:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   135b0:	0300775f 	movweq	r7, #1887	; 0x75f
   135b4:	001d07bd 			; <UNDEFINED> instruction: 0x001d07bd
   135b8:	0b080000 	bleq	2135c0 <__ccfg+0x1f3618>
   135bc:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   135c0:	5409be03 	strpl	fp, [r9], #-3587	; 0xfffff1fd
   135c4:	0c000000 	stceq	0, cr0, [r0], {-0}
   135c8:	0008490b 	andeq	r4, r8, fp, lsl #18
   135cc:	09bf0300 	ldmibeq	pc!, {r8, r9}	; <UNPREDICTABLE>
   135d0:	00000054 	andeq	r0, r0, r4, asr r0
   135d4:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   135d8:	c0030066 	andgt	r0, r3, r6, rrx
   135dc:	0002bf11 	andeq	fp, r2, r1, lsl pc
   135e0:	b20b1000 	andlt	r1, fp, #0
   135e4:	03000001 	movweq	r0, #1
   135e8:	001d07c1 	andseq	r0, sp, r1, asr #15
   135ec:	0b180000 	bleq	6135f4 <__ccfg+0x5f364c>
   135f0:	00000303 	andeq	r0, r0, r3, lsl #6
   135f4:	f10ac803 			; <UNDEFINED> instruction: 0xf10ac803
   135f8:	1c000000 	stcne	0, cr0, [r0], {-0}
   135fc:	001d110b 	andseq	r1, sp, fp, lsl #2
   13600:	1dca0300 	stclne	3, cr0, [sl]
   13604:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
   13608:	1cd80b20 	vldmiane	r8, {d16-d31}
   1360c:	cc030000 	stcgt	0, cr0, [r3], {-0}
   13610:	0005de1d 	andeq	sp, r5, sp, lsl lr
   13614:	c60b2400 	strgt	r2, [fp], -r0, lsl #8
   13618:	0300000e 	movweq	r0, #14
   1361c:	06020dcf 	streq	r0, [r2], -pc, asr #27
   13620:	0b280000 	bleq	a13628 <__ccfg+0x9f3680>
   13624:	00001cc6 	andeq	r1, r0, r6, asr #25
   13628:	1c09d003 	stcne	0, cr13, [r9], {3}
   1362c:	2c000006 	stccs	0, cr0, [r0], {6}
   13630:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   13634:	11d30300 	bicsne	r0, r3, r0, lsl #6
   13638:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
   1363c:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 12814 <__exidx_end+0xcc14>
   13640:	d4030070 	strle	r0, [r3], #-112	; 0xffffff90
   13644:	0002e712 	andeq	lr, r2, r2, lsl r7
   13648:	5f0e3800 	svcpl	0x000e3800
   1364c:	03007275 	movweq	r7, #629	; 0x275
   13650:	001d07d5 			; <UNDEFINED> instruction: 0x001d07d5
   13654:	0b3c0000 	bleq	f1365c <__ccfg+0xef36b4>
   13658:	00000efd 	strdeq	r0, [r0], -sp
   1365c:	2211d803 	andscs	sp, r1, #196608	; 0x30000
   13660:	40000006 	andmi	r0, r0, r6
   13664:	000e460b 	andeq	r4, lr, fp, lsl #12
   13668:	11d90300 	bicsne	r0, r9, r0, lsl #6
   1366c:	00000632 	andeq	r0, r0, r2, lsr r6
   13670:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   13674:	dc030062 	stcle	0, cr0, [r3], {98}	; 0x62
   13678:	0002bf11 	andeq	fp, r2, r1, lsl pc
   1367c:	640b4400 	strvs	r4, [fp], #-1024	; 0xfffffc00
   13680:	0300000b 	movweq	r0, #11
   13684:	001d07df 			; <UNDEFINED> instruction: 0x001d07df
   13688:	0b4c0000 	bleq	1313690 <__ccfg+0x12f36e8>
   1368c:	00000478 	andeq	r0, r0, r8, ror r4
   13690:	770ae003 	strvc	lr, [sl, -r3]
   13694:	50000000 	andpl	r0, r0, r0
   13698:	0047350b 	subeq	r3, r7, fp, lsl #10
   1369c:	12e30300 	rscne	r0, r3, #0, 6
   136a0:	0000044e 	andeq	r0, r0, lr, asr #8
   136a4:	0b8a0b54 	bleq	fe2963fc <_estack+0xde2913fc>
   136a8:	e7030000 	str	r0, [r3, -r0]
   136ac:	00010b0c 	andeq	r0, r1, ip, lsl #22
   136b0:	0e0b5800 	cdpeq	8, 0, cr5, cr11, cr0, {0}
   136b4:	0300000a 	movweq	r0, #10
   136b8:	00e50ee9 	rsceq	r0, r5, r9, ror #29
   136bc:	0b5c0000 	bleq	17136c4 <__ccfg+0x16f371c>
   136c0:	00000e79 	andeq	r0, r0, r9, ror lr
   136c4:	1d09ea03 	vstrne	s28, [r9, #-12]
   136c8:	64000000 	strvs	r0, [r0], #-0
   136cc:	001d1300 	andseq	r1, sp, r0, lsl #6
   136d0:	044e0000 	strbeq	r0, [lr], #-0
   136d4:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   136d8:	14000004 	strne	r0, [r0], #-4
   136dc:	000000f1 	strdeq	r0, [r0], -r1
   136e0:	0005a214 	andeq	sl, r5, r4, lsl r2
   136e4:	001d1400 	andseq	r1, sp, r0, lsl #8
   136e8:	0f000000 	svceq	0x00000000
   136ec:	00045904 	andeq	r5, r4, r4, lsl #18
   136f0:	044e1500 	strbeq	r1, [lr], #-1280	; 0xfffffb00
   136f4:	41160000 	tstmi	r6, r0
   136f8:	2800000d 	stmdacs	r0, {r0, r2, r3}
   136fc:	02650304 	rsbeq	r0, r5, #4, 6	; 0x10000000
   13700:	0005a208 	andeq	sl, r5, r8, lsl #4
   13704:	08f41700 	ldmeq	r4!, {r8, r9, sl, ip}^
   13708:	67030000 	strvs	r0, [r3, -r0]
   1370c:	001d0702 	andseq	r0, sp, r2, lsl #14
   13710:	17000000 	strne	r0, [r0, -r0]
   13714:	000007d2 	ldrdeq	r0, [r0], -r2
   13718:	0b026c03 	bleq	ae72c <__ccfg+0x8e784>
   1371c:	0000068e 	andeq	r0, r0, lr, lsl #13
   13720:	02ee1704 	rsceq	r1, lr, #4, 14	; 0x100000
   13724:	6c030000 	stcvs	0, cr0, [r3], {-0}
   13728:	068e1402 	streq	r1, [lr], r2, lsl #8
   1372c:	17080000 	strne	r0, [r8, -r0]
   13730:	00000eec 	andeq	r0, r0, ip, ror #29
   13734:	1e026c03 	cdpne	12, 0, cr6, cr2, cr3, {0}
   13738:	0000068e 	andeq	r0, r0, lr, lsl #13
   1373c:	056f170c 	strbeq	r1, [pc, #-1804]!	; 13038 <__exidx_end+0xd438>
   13740:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
   13744:	001d0802 	andseq	r0, sp, r2, lsl #16
   13748:	17100000 	ldrne	r0, [r0, -r0]
   1374c:	000004c4 	andeq	r0, r0, r4, asr #9
   13750:	08026f03 	stmdaeq	r2, {r0, r1, r8, r9, sl, fp, sp, lr}
   13754:	0000088e 	andeq	r0, r0, lr, lsl #17
   13758:	0e591714 	mrceq	7, 2, r1, cr9, cr4, {0}
   1375c:	72030000 	andvc	r0, r3, #0
   13760:	001d0702 	andseq	r0, sp, r2, lsl #14
   13764:	17300000 	ldrne	r0, [r0, -r0]!
   13768:	00004283 	andeq	r4, r0, r3, lsl #5
   1376c:	16027303 	strne	r7, [r2], -r3, lsl #6
   13770:	000008a3 	andeq	r0, r0, r3, lsr #17
   13774:	077a1734 			; <UNDEFINED> instruction: 0x077a1734
   13778:	75030000 	strvc	r0, [r3, #-0]
   1377c:	001d0702 	andseq	r0, sp, r2, lsl #14
   13780:	17380000 	ldrne	r0, [r8, -r0]!
   13784:	00000874 	andeq	r0, r0, r4, ror r8
   13788:	0a027703 	beq	b139c <__ccfg+0x913f4>
   1378c:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
   13790:	0347173c 	movteq	r1, #30524	; 0x773c
   13794:	7a030000 	bvc	d379c <__ccfg+0xb37f4>
   13798:	01711302 	cmneq	r1, r2, lsl #6
   1379c:	17400000 	strbne	r0, [r0, -r0]
   137a0:	00000402 	andeq	r0, r0, r2, lsl #8
   137a4:	07027b03 	streq	r7, [r2, -r3, lsl #22]
   137a8:	0000001d 	andeq	r0, r0, sp, lsl r0
   137ac:	05f91744 	ldrbeq	r1, [r9, #1860]!	; 0x744
   137b0:	7c030000 	stcvc	0, cr0, [r3], {-0}
   137b4:	01711302 	cmneq	r1, r2, lsl #6
   137b8:	17480000 	strbne	r0, [r8, -r0]
   137bc:	0000080f 	andeq	r0, r0, pc, lsl #16
   137c0:	14027d03 	strne	r7, [r2], #-3331	; 0xfffff2fd
   137c4:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
   137c8:	0b4a174c 	bleq	1299500 <__ccfg+0x1279558>
   137cc:	80030000 	andhi	r0, r3, r0
   137d0:	001d0702 	andseq	r0, sp, r2, lsl #14
   137d4:	17500000 	ldrbne	r0, [r0, -r0]
   137d8:	00000c43 	andeq	r0, r0, r3, asr #24
   137dc:	09028103 	stmdbeq	r2, {r0, r1, r8, pc}
   137e0:	000005a2 	andeq	r0, r0, r2, lsr #11
   137e4:	0c5d1754 	mrrceq	7, 5, r1, sp, cr4
   137e8:	a4030000 	strge	r0, [r3], #-0
   137ec:	08690702 	stmdaeq	r9!, {r1, r8, r9, sl}^
   137f0:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   137f4:	00000a06 	andeq	r0, r0, r6, lsl #20
   137f8:	1302a803 	movwne	sl, #10243	; 0x2803
   137fc:	000002a2 	andeq	r0, r0, r2, lsr #5
   13800:	9e180148 	muflsem	f0, f0, #0.0
   13804:	03000006 	movweq	r0, #6
   13808:	5f1202a9 	svcpl	0x001202a9
   1380c:	4c000002 	stcmi	0, cr0, [r0], {2}
   13810:	06851801 	streq	r1, [r5], r1, lsl #16
   13814:	ad030000 	stcge	0, cr0, [r3, #-0]
   13818:	08cb0c02 	stmiaeq	fp, {r1, sl, fp}^
   1381c:	02dc0000 	sbcseq	r0, ip, #0
   13820:	000cc518 	andeq	ip, ip, r8, lsl r5
   13824:	02b20300 	adcseq	r0, r2, #0, 6
   13828:	00064f10 	andeq	r4, r6, r0, lsl pc
   1382c:	1802e000 	stmdane	r2, {sp, lr, pc}
   13830:	00000a96 	muleq	r0, r6, sl
   13834:	0a02b403 	beq	c0848 <__ccfg+0xa08a0>
   13838:	000008d7 	ldrdeq	r0, [r0], -r7
   1383c:	0f0002ec 	svceq	0x000002ec
   13840:	0005a804 	andeq	sl, r5, r4, lsl #16
   13844:	08010300 	stmdaeq	r1, {r8, r9}
   13848:	00000c54 	andeq	r0, r0, r4, asr ip
   1384c:	0005a815 	andeq	sl, r5, r5, lsl r8
   13850:	30040f00 	andcc	r0, r4, r0, lsl #30
   13854:	13000004 	movwne	r0, #4
   13858:	0000001d 	andeq	r0, r0, sp, lsl r0
   1385c:	000005d8 	ldrdeq	r0, [r0], -r8
   13860:	00044e14 	andeq	r4, r4, r4, lsl lr
   13864:	00f11400 	rscseq	r1, r1, r0, lsl #8
   13868:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
   1386c:	14000005 	strne	r0, [r0], #-5
   13870:	0000001d 	andeq	r0, r0, sp, lsl r0
   13874:	af040f00 	svcge	0x00040f00
   13878:	0f000005 	svceq	0x00000005
   1387c:	0005ba04 	andeq	fp, r5, r4, lsl #20
   13880:	00831300 	addeq	r1, r3, r0, lsl #6
   13884:	06020000 	streq	r0, [r2], -r0
   13888:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   1388c:	14000004 	strne	r0, [r0], #-4
   13890:	000000f1 	strdeq	r0, [r0], -r1
   13894:	00008314 	andeq	r8, r0, r4, lsl r3
   13898:	001d1400 	andseq	r1, sp, r0, lsl #8
   1389c:	0f000000 	svceq	0x00000000
   138a0:	0005e404 	andeq	lr, r5, r4, lsl #8
   138a4:	001d1300 	andseq	r1, sp, r0, lsl #6
   138a8:	061c0000 	ldreq	r0, [ip], -r0
   138ac:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   138b0:	14000004 	strne	r0, [r0], #-4
   138b4:	000000f1 	strdeq	r0, [r0], -r1
   138b8:	08040f00 	stmdaeq	r4, {r8, r9, sl, fp}
   138bc:	08000006 	stmdaeq	r0, {r1, r2}
   138c0:	0000004d 	andeq	r0, r0, sp, asr #32
   138c4:	00000632 	andeq	r0, r0, r2, lsr r6
   138c8:	00002409 	andeq	r2, r0, r9, lsl #8
   138cc:	08000200 	stmdaeq	r0, {r9}
   138d0:	0000004d 	andeq	r0, r0, sp, asr #32
   138d4:	00000642 	andeq	r0, r0, r2, asr #12
   138d8:	00002409 	andeq	r2, r0, r9, lsl #8
   138dc:	04000000 	streq	r0, [r0], #-0
   138e0:	00000465 	andeq	r0, r0, r5, ror #8
   138e4:	1a012403 	bne	5c8f8 <__ccfg+0x3c950>
   138e8:	000002ed 	andeq	r0, r0, sp, ror #5
   138ec:	000cbf19 	andeq	fp, ip, r9, lsl pc
   138f0:	28030c00 	stmdacs	r3, {sl, fp}
   138f4:	06880801 	streq	r0, [r8], r1, lsl #16
   138f8:	a6170000 	ldrge	r0, [r7], -r0
   138fc:	0300000e 	movweq	r0, #14
   13900:	8811012a 	ldmdahi	r1, {r1, r3, r5, r8}
   13904:	00000006 	andeq	r0, r0, r6
   13908:	000bbe17 	andeq	fp, fp, r7, lsl lr
   1390c:	012b0300 			; <UNDEFINED> instruction: 0x012b0300
   13910:	00001d07 	andeq	r1, r0, r7, lsl #26
   13914:	62170400 	andsvs	r0, r7, #0, 8
   13918:	03000007 	movweq	r0, #7
   1391c:	8e0b012c 	adfhiep	f0, f3, #4.0
   13920:	08000006 	stmdaeq	r0, {r1, r2}
   13924:	4f040f00 	svcmi	0x00040f00
   13928:	0f000006 	svceq	0x00000006
   1392c:	00064204 	andeq	r4, r6, r4, lsl #4
   13930:	03d11900 	bicseq	r1, r1, #0, 18
   13934:	030e0000 	movweq	r0, #57344	; 0xe000
   13938:	cd080144 	stfgts	f0, [r8, #-272]	; 0xfffffef0
   1393c:	17000006 	strne	r0, [r0, -r6]
   13940:	0000162d 	andeq	r1, r0, sp, lsr #12
   13944:	12014503 	andne	r4, r1, #12582912	; 0xc00000
   13948:	000006cd 	andeq	r0, r0, sp, asr #13
   1394c:	08211700 	stmdaeq	r1!, {r8, r9, sl, ip}
   13950:	46030000 	strmi	r0, [r3], -r0
   13954:	06cd1201 	strbeq	r1, [sp], r1, lsl #4
   13958:	17060000 	strne	r0, [r6, -r0]
   1395c:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   13960:	12014703 	andne	r4, r1, #786432	; 0xc0000
   13964:	0000005b 	andeq	r0, r0, fp, asr r0
   13968:	5b08000c 	blpl	2139a0 <__ccfg+0x1f39f8>
   1396c:	dd000000 	stcle	0, cr0, [r0, #-0]
   13970:	09000006 	stmdbeq	r0, {r1, r2}
   13974:	00000024 	andeq	r0, r0, r4, lsr #32
   13978:	d01a0002 	andsle	r0, sl, r2
   1397c:	07028503 	streq	r8, [r2, -r3, lsl #10]
   13980:	000007f2 	strdeq	r0, [r0], -r2
   13984:	000e4c17 	andeq	r4, lr, r7, lsl ip
   13988:	02870300 	addeq	r0, r7, #0, 6
   1398c:	00002418 	andeq	r2, r0, r8, lsl r4
   13990:	cd170000 	ldcgt	0, cr0, [r7, #-0]
   13994:	0300000c 	movweq	r0, #12
   13998:	a2120288 	andsge	r0, r2, #136, 4	; 0x80000008
   1399c:	04000005 	streq	r0, [r0], #-5
   139a0:	00042f17 	andeq	r2, r4, r7, lsl pc
   139a4:	02890300 	addeq	r0, r9, #0, 6
   139a8:	0007f210 	andeq	pc, r7, r0, lsl r2	; <UNPREDICTABLE>
   139ac:	33170800 	tstcc	r7, #0, 16
   139b0:	0300000b 	movweq	r0, #11
   139b4:	8717028a 	ldrhi	r0, [r7, -sl, lsl #5]
   139b8:	24000001 	strcs	r0, [r0], #-1
   139bc:	0007d917 	andeq	sp, r7, r7, lsl r9
   139c0:	028b0300 	addeq	r0, fp, #0, 6
   139c4:	00001d0f 	andeq	r1, r0, pc, lsl #26
   139c8:	a1174800 	tstge	r7, r0, lsl #16
   139cc:	0300000e 	movweq	r0, #14
   139d0:	702c028c 	eorvc	r0, ip, ip, lsl #5
   139d4:	50000000 	andpl	r0, r0, r0
   139d8:	00007617 	andeq	r7, r0, r7, lsl r6
   139dc:	028d0300 	addeq	r0, sp, #0, 6
   139e0:	0006941a 	andeq	r9, r6, sl, lsl r4
   139e4:	29175800 	ldmdbcs	r7, {fp, ip, lr}
   139e8:	03000006 	movweq	r0, #6
   139ec:	e516028e 	ldr	r0, [r6, #-654]	; 0xfffffd72
   139f0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   139f4:	000cda17 	andeq	sp, ip, r7, lsl sl
   139f8:	028f0300 	addeq	r0, pc, #0, 6
   139fc:	0000e516 	andeq	lr, r0, r6, lsl r5
   13a00:	68177000 	ldmdavs	r7, {ip, sp, lr}
   13a04:	03000000 	movweq	r0, #0
   13a08:	e5160290 	ldr	r0, [r6, #-656]	; 0xfffffd70
   13a0c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   13a10:	000b5a17 	andeq	r5, fp, r7, lsl sl
   13a14:	02910300 	addseq	r0, r1, #0, 6
   13a18:	00080210 	andeq	r0, r8, r0, lsl r2
   13a1c:	0c178000 	ldceq	0, cr8, [r7], {-0}
   13a20:	03000004 	movweq	r0, #4
   13a24:	12100292 	andsne	r0, r0, #536870921	; 0x20000009
   13a28:	88000008 	stmdahi	r0, {r3}
   13a2c:	000c7d17 	andeq	r7, ip, r7, lsl sp
   13a30:	02930300 	addseq	r0, r3, #0, 6
   13a34:	00001d0f 	andeq	r1, r0, pc, lsl #26
   13a38:	a317a000 	tstge	r7, #0
   13a3c:	03000002 	movweq	r0, #2
   13a40:	e5160294 	ldr	r0, [r6, #-660]	; 0xfffffd6c
   13a44:	a4000000 	strge	r0, [r0], #-0
   13a48:	00068f17 	andeq	r8, r6, r7, lsl pc
   13a4c:	02950300 	addseq	r0, r5, #0, 6
   13a50:	0000e516 	andeq	lr, r0, r6, lsl r5
   13a54:	ab17ac00 	blge	5fea5c <__ccfg+0x5deab4>
   13a58:	03000005 	movweq	r0, #5
   13a5c:	e5160296 	ldr	r0, [r6, #-662]	; 0xfffffd6a
   13a60:	b4000000 	strlt	r0, [r0], #-0
   13a64:	00083a17 	andeq	r3, r8, r7, lsl sl
   13a68:	02970300 	addseq	r0, r7, #0, 6
   13a6c:	0000e516 	andeq	lr, r0, r6, lsl r5
   13a70:	1817bc00 	ldmdane	r7, {sl, fp, ip, sp, pc}
   13a74:	03000006 	movweq	r0, #6
   13a78:	e5160298 	ldr	r0, [r6, #-664]	; 0xfffffd68
   13a7c:	c4000000 	strgt	r0, [r0], #-0
   13a80:	0008f217 	andeq	pc, r8, r7, lsl r2	; <UNPREDICTABLE>
   13a84:	02990300 	addseq	r0, r9, #0, 6
   13a88:	00001d08 	andeq	r1, r0, r8, lsl #26
   13a8c:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   13a90:	000005a8 	andeq	r0, r0, r8, lsr #11
   13a94:	00000802 	andeq	r0, r0, r2, lsl #16
   13a98:	00002409 	andeq	r2, r0, r9, lsl #8
   13a9c:	08001900 	stmdaeq	r0, {r8, fp, ip}
   13aa0:	000005a8 	andeq	r0, r0, r8, lsr #11
   13aa4:	00000812 	andeq	r0, r0, r2, lsl r8
   13aa8:	00002409 	andeq	r2, r0, r9, lsl #8
   13aac:	08000700 	stmdaeq	r0, {r8, r9, sl}
   13ab0:	000005a8 	andeq	r0, r0, r8, lsr #11
   13ab4:	00000822 	andeq	r0, r0, r2, lsr #16
   13ab8:	00002409 	andeq	r2, r0, r9, lsl #8
   13abc:	1a001700 	bne	196c4 <__exidx_end+0x13ac4>
   13ac0:	029e03f0 	addseq	r0, lr, #240, 6	; 0xc0000003
   13ac4:	00084907 	andeq	r4, r8, r7, lsl #18
   13ac8:	03b71700 			; <UNDEFINED> instruction: 0x03b71700
   13acc:	a1030000 	mrsge	r0, (UNDEF: 3)
   13ad0:	08491b02 	stmdaeq	r9, {r1, r8, r9, fp, ip}^
   13ad4:	17000000 	strne	r0, [r0, -r0]
   13ad8:	00000ef4 	strdeq	r0, [r0], -r4
   13adc:	1802a203 	stmdane	r2, {r0, r1, r9, sp, pc}
   13ae0:	00000859 	andeq	r0, r0, r9, asr r8
   13ae4:	e7080078 	smlsdx	r8, r8, r0, r0
   13ae8:	59000002 	stmdbpl	r0, {r1}
   13aec:	09000008 	stmdbeq	r0, {r3}
   13af0:	00000024 	andeq	r0, r0, r4, lsr #32
   13af4:	2408001d 	strcs	r0, [r8], #-29	; 0xffffffe3
   13af8:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
   13afc:	09000008 	stmdbeq	r0, {r3}
   13b00:	00000024 	andeq	r0, r0, r4, lsr #32
   13b04:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   13b08:	03028303 	movweq	r8, #8963	; 0x2303
   13b0c:	0000088e 	andeq	r0, r0, lr, lsl #17
   13b10:	000d411c 	andeq	r4, sp, ip, lsl r1
   13b14:	029a0300 	addseq	r0, sl, #0, 6
   13b18:	0006dd0b 	andeq	sp, r6, fp, lsl #26
   13b1c:	0b421c00 	bleq	109ab24 <__ccfg+0x107ab7c>
   13b20:	a3030000 	movwge	r0, #12288	; 0x3000
   13b24:	08220b02 	stmdaeq	r2!, {r1, r8, r9, fp}
   13b28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13b2c:	000005a8 	andeq	r0, r0, r8, lsr #11
   13b30:	0000089e 	muleq	r0, lr, r8
   13b34:	00002409 	andeq	r2, r0, r9, lsl #8
   13b38:	1d001800 	stcne	8, cr1, [r0, #-0]
   13b3c:	00000eac 	andeq	r0, r0, ip, lsr #29
   13b40:	089e040f 	ldmeq	lr, {r0, r1, r2, r3, sl}
   13b44:	b41e0000 	ldrlt	r0, [lr], #-0
   13b48:	14000008 	strne	r0, [r0], #-8
   13b4c:	0000044e 	andeq	r0, r0, lr, asr #8
   13b50:	a9040f00 	stmdbge	r4, {r8, r9, sl, fp}
   13b54:	0f000008 	svceq	0x00000008
   13b58:	00017104 	andeq	r7, r1, r4, lsl #2
   13b5c:	08cb1e00 	stmiaeq	fp, {r9, sl, fp, ip}^
   13b60:	1d140000 	ldcne	0, cr0, [r4, #-0]
   13b64:	00000000 	andeq	r0, r0, r0
   13b68:	08d1040f 	ldmeq	r1, {r0, r1, r2, r3, sl}^
   13b6c:	040f0000 	streq	r0, [pc], #-0	; 13b74 <__exidx_end+0xdf74>
   13b70:	000008c0 	andeq	r0, r0, r0, asr #17
   13b74:	00064208 	andeq	r4, r6, r8, lsl #4
   13b78:	0008e700 	andeq	lr, r8, r0, lsl #14
   13b7c:	00240900 	eoreq	r0, r4, r0, lsl #18
   13b80:	00020000 	andeq	r0, r2, r0
   13b84:	000ab21f 	andeq	fp, sl, pc, lsl r2
   13b88:	03330300 	teqeq	r3, #0, 6
   13b8c:	00044e17 	andeq	r4, r4, r7, lsl lr
   13b90:	0aab1f00 	beq	feadb798 <_estack+0xdead6798>
   13b94:	34030000 	strcc	r0, [r3], #-0
   13b98:	04541d03 	ldrbeq	r1, [r4], #-3331	; 0xfffff2fd
   13b9c:	2f200000 	svccs	0x00200000
   13ba0:	05000047 	streq	r0, [r0, #-71]	; 0xffffffb9
   13ba4:	04593017 	ldrbeq	r3, [r9], #-23	; 0xffffffe9
   13ba8:	03050000 	movweq	r0, #20480	; 0x5000
   13bac:	20000118 	andcs	r0, r0, r8, lsl r1
   13bb0:	0008e721 	andeq	lr, r8, r1, lsr #14
   13bb4:	10030500 	andne	r0, r3, r0, lsl #10
   13bb8:	21200001 			; <UNDEFINED> instruction: 0x21200001
   13bbc:	000008f4 	strdeq	r0, [r0], -r4
   13bc0:	00000305 	andeq	r0, r0, r5, lsl #6
   13bc4:	92000000 	andls	r0, r0, #0
   13bc8:	0400000a 	streq	r0, [r0], #-10
   13bcc:	00477900 	subeq	r7, r7, r0, lsl #18
   13bd0:	8c010400 	cfstrshi	mvf0, [r1], {-0}
   13bd4:	0c00004a 	stceq	0, cr0, [r0], {74}	; 0x4a
   13bd8:	000048e6 	andeq	r4, r0, r6, ror #17
   13bdc:	00005209 	andeq	r5, r0, r9, lsl #4
   13be0:	000049c0 	andeq	r4, r0, r0, asr #19
   13be4:	00000054 	andeq	r0, r0, r4, asr r0
   13be8:	0000931d 	andeq	r9, r0, sp, lsl r3
   13bec:	18070802 	stmdane	r7, {r1, fp}
   13bf0:	03000004 	movweq	r0, #4
   13bf4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   13bf8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   13bfc:	00042207 	andeq	r2, r4, r7, lsl #4
   13c00:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   13c04:	000007e8 	andeq	r0, r0, r8, ror #15
   13c08:	0c040802 	stceq	8, cr0, [r4], {2}
   13c0c:	04000044 	streq	r0, [r0], #-68	; 0xffffffbc
   13c10:	00004b77 	andeq	r4, r0, r7, ror fp
   13c14:	33162a02 	tstcc	r6, #8192	; 0x2000
   13c18:	04000000 	streq	r0, [r0], #-0
   13c1c:	00004f24 	andeq	r4, r0, r4, lsr #30
   13c20:	60152f02 	andsvs	r2, r5, r2, lsl #30
   13c24:	05000000 	streq	r0, [r0, #-0]
   13c28:	00006604 	andeq	r6, r0, r4, lsl #12
   13c2c:	00480600 	subeq	r0, r8, r0, lsl #12
   13c30:	00750000 	rsbseq	r0, r5, r0
   13c34:	75070000 	strvc	r0, [r7, #-0]
   13c38:	00000000 	andeq	r0, r0, r0
   13c3c:	007b0405 	rsbseq	r0, fp, r5, lsl #8
   13c40:	04080000 	streq	r0, [r8], #-0
   13c44:	00005686 	andeq	r5, r0, r6, lsl #13
   13c48:	880f3602 	stmdahi	pc, {r1, r9, sl, ip, sp}	; <UNPREDICTABLE>
   13c4c:	05000000 	streq	r0, [r0, #-0]
   13c50:	00008e04 	andeq	r8, r0, r4, lsl #28
   13c54:	002c0600 	eoreq	r0, ip, r0, lsl #12
   13c58:	00a20000 	adceq	r0, r2, r0
   13c5c:	75070000 	strvc	r0, [r7, #-0]
   13c60:	07000000 	streq	r0, [r0, -r0]
   13c64:	00000075 	andeq	r0, r0, r5, ror r0
   13c68:	08010200 	stmdaeq	r1, {r9}
   13c6c:	00000c4b 	andeq	r0, r0, fp, asr #24
   13c70:	00513e09 	subseq	r3, r1, r9, lsl #28
   13c74:	12bb0200 	adcsne	r0, fp, #0, 4
   13c78:	00000054 	andeq	r0, r0, r4, asr r0
   13c7c:	0056b909 	subseq	fp, r6, r9, lsl #18
   13c80:	10be0200 	adcsne	r0, lr, r0, lsl #4
   13c84:	0000007c 	andeq	r0, r0, ip, ror r0
   13c88:	4d060102 	stfmis	f0, [r6, #-8]
   13c8c:	0a00000c 	beq	13cc4 <__exidx_end+0xe0c4>
   13c90:	00004e44 	andeq	r4, r0, r4, asr #28
   13c94:	00a20107 	adceq	r0, r2, r7, lsl #2
   13c98:	17030000 	strne	r0, [r3, -r0]
   13c9c:	0001f506 	andeq	pc, r1, r6, lsl #10
   13ca0:	491a0b00 	ldmdbmi	sl, {r8, r9, fp}
   13ca4:	0b000000 	bleq	13cac <__exidx_end+0xe0ac>
   13ca8:	00004d43 	andeq	r4, r0, r3, asr #26
   13cac:	526b0b01 	rsbpl	r0, fp, #1024	; 0x400
   13cb0:	0b020000 	bleq	93cb8 <__ccfg+0x73d10>
   13cb4:	000055cc 	andeq	r5, r0, ip, asr #11
   13cb8:	51ad0b03 			; <UNDEFINED> instruction: 0x51ad0b03
   13cbc:	0b040000 	bleq	113cc4 <__ccfg+0xf3d1c>
   13cc0:	000054e9 	andeq	r5, r0, r9, ror #9
   13cc4:	544d0b05 	strbpl	r0, [sp], #-2821	; 0xfffff4fb
   13cc8:	0b060000 	bleq	193cd0 <__ccfg+0x173d28>
   13ccc:	0000493b 	andeq	r4, r0, fp, lsr r9
   13cd0:	54fe0b07 	ldrbtpl	r0, [lr], #2823	; 0xb07
   13cd4:	0b080000 	bleq	213cdc <__ccfg+0x1f3d34>
   13cd8:	0000550c 	andeq	r5, r0, ip, lsl #10
   13cdc:	55bf0b09 	ldrpl	r0, [pc, #2825]!	; 147ed <__exidx_end+0xebed>
   13ce0:	0b0a0000 	bleq	293ce8 <__ccfg+0x273d40>
   13ce4:	00005104 	andeq	r5, r0, r4, lsl #2
   13ce8:	4bb80b0b 	blmi	fee1691c <_estack+0xdee1191c>
   13cec:	0b0c0000 	bleq	313cf4 <__ccfg+0x2f3d4c>
   13cf0:	00004bcc 	andeq	r4, r0, ip, asr #23
   13cf4:	4e880b0d 	vdivmi.f64	d0, d8, d13
   13cf8:	0b0e0000 	bleq	393d00 <__ccfg+0x373d58>
   13cfc:	00004e9e 	muleq	r0, lr, lr
   13d00:	4d7d0b0f 	fldmdbxmi	sp!, {d16-d22}	;@ Deprecated
   13d04:	0b100000 	bleq	413d0c <__ccfg+0x3f3d64>
   13d08:	00005191 	muleq	r0, r1, r1
   13d0c:	4e070b11 	vmovmi.32	d7[0], r0
   13d10:	0b120000 	bleq	493d18 <__ccfg+0x473d70>
   13d14:	00005884 	andeq	r5, r0, r4, lsl #17
   13d18:	49a40b13 	stmibmi	r4!, {r0, r1, r4, r8, r9, fp}
   13d1c:	0b140000 	bleq	513d24 <__ccfg+0x4f3d7c>
   13d20:	00004e2b 	andeq	r4, r0, fp, lsr #28
   13d24:	48b90b15 	ldmmi	r9!, {r0, r2, r4, r8, r9, fp}
   13d28:	0b160000 	bleq	593d30 <__ccfg+0x573d88>
   13d2c:	000055ef 	andeq	r5, r0, pc, ror #11
   13d30:	57120b17 			; <UNDEFINED> instruction: 0x57120b17
   13d34:	0b180000 	bleq	613d3c <__ccfg+0x5f3d94>
   13d38:	00004e50 	andeq	r4, r0, r0, asr lr
   13d3c:	52dd0b19 	sbcspl	r0, sp, #25600	; 0x6400
   13d40:	0b1a0000 	bleq	693d48 <__ccfg+0x673da0>
   13d44:	000055fd 	strdeq	r5, [r0], -sp
   13d48:	47da0b1b 	bfimi	r0, fp, #22, #5
   13d4c:	0b1c0000 	bleq	713d54 <__ccfg+0x6f3dac>
   13d50:	0000560b 	andeq	r5, r0, fp, lsl #12
   13d54:	56190b1d 			; <UNDEFINED> instruction: 0x56190b1d
   13d58:	0b1e0000 	bleq	793d60 <__ccfg+0x773db8>
   13d5c:	00004788 	andeq	r4, r0, r8, lsl #15
   13d60:	56430b1f 			; <UNDEFINED> instruction: 0x56430b1f
   13d64:	0b200000 	bleq	813d6c <__ccfg+0x7f3dc4>
   13d68:	0000538e 	andeq	r5, r0, lr, lsl #7
   13d6c:	51630b21 	cmnpl	r3, r1, lsr #22
   13d70:	0b220000 	bleq	893d78 <__ccfg+0x873dd0>
   13d74:	000055e2 	andeq	r5, r0, r2, ror #11
   13d78:	50850b23 	addpl	r0, r5, r3, lsr #22
   13d7c:	0b240000 	bleq	913d84 <__ccfg+0x8f3ddc>
   13d80:	00004f87 	andeq	r4, r0, r7, lsl #31
   13d84:	4c830b25 	fstmiaxmi	r3, {d0-d17}	;@ Deprecated
   13d88:	0b260000 	bleq	993d90 <__ccfg+0x973de8>
   13d8c:	00004fa5 	andeq	r4, r0, r5, lsr #31
   13d90:	4d1f0b27 	vldrmi	d0, [pc, #-156]	; 13cfc <__exidx_end+0xe0fc>
   13d94:	0b280000 	bleq	a13d9c <__ccfg+0x9f3df4>
   13d98:	00004fb5 			; <UNDEFINED> instruction: 0x00004fb5
   13d9c:	4fc50b29 	svcmi	0x00c50b29
   13da0:	0b2a0000 	bleq	a93da8 <__ccfg+0xa73e00>
   13da4:	000050ea 	andeq	r5, r0, sl, ror #1
   13da8:	4f2e0b2b 	svcmi	0x002e0b2b
   13dac:	0b2c0000 	bleq	b13db4 <__ccfg+0xaf3e0c>
   13db0:	0000539b 	muleq	r0, fp, r3
   13db4:	4cc40b2d 	fstmiaxmi	r4, {d16-d37}	;@ Deprecated
   13db8:	002e0000 	eoreq	r0, lr, r0
   13dbc:	004ec00a 	subeq	ip, lr, sl
   13dc0:	a2010700 	andge	r0, r1, #0, 14
   13dc4:	04000000 	streq	r0, [r0], #-0
   13dc8:	03d60617 	bicseq	r0, r6, #24117248	; 0x1700000
   13dcc:	ee0b0000 	cdp	0, 0, cr0, cr11, cr0, {0}
   13dd0:	0000004b 	andeq	r0, r0, fp, asr #32
   13dd4:	0048210b 	subeq	r2, r8, fp, lsl #2
   13dd8:	1e0b0100 	adfnee	f0, f3, f0
   13ddc:	02000058 	andeq	r0, r0, #88	; 0x58
   13de0:	00568e0b 	subseq	r8, r6, fp, lsl #28
   13de4:	0e0b0300 	cdpeq	3, 0, cr0, cr11, cr0, {0}
   13de8:	0400004c 	streq	r0, [r0], #-76	; 0xffffffb4
   13dec:	0049060b 	subeq	r0, r9, fp, lsl #12
   13df0:	a00b0500 	andge	r0, fp, r0, lsl #10
   13df4:	0600004c 	streq	r0, [r0], -ip, asr #32
   13df8:	004bfe0b 	subeq	pc, fp, fp, lsl #28
   13dfc:	3a0b0700 	bcc	2d5a04 <__ccfg+0x2b5a5c>
   13e00:	08000055 	stmdaeq	r0, {r0, r2, r4, r6}
   13e04:	00566e0b 	subseq	r6, r6, fp, lsl #28
   13e08:	710b0900 	tstvc	fp, r0, lsl #18
   13e0c:	0a000054 	beq	13f64 <__exidx_end+0xe364>
   13e10:	0049590b 	subeq	r5, r9, fp, lsl #18
   13e14:	410b0b00 	tstmi	fp, r0, lsl #22
   13e18:	0c00004c 	stceq	0, cr0, [r0], {76}	; 0x4c
   13e1c:	0048a20b 	subeq	sl, r8, fp, lsl #4
   13e20:	530b0d00 	movwpl	r0, #48384	; 0xbd00
   13e24:	0e000058 	mcreq	0, 0, r0, cr0, cr8, {2}
   13e28:	0050d70b 	subseq	sp, r0, fp, lsl #14
   13e2c:	d20b0f00 	andle	r0, fp, #0, 30
   13e30:	1000004d 	andne	r0, r0, sp, asr #32
   13e34:	0051140b 	subseq	r1, r1, fp, lsl #8
   13e38:	540b1100 	strpl	r1, [fp], #-256	; 0xffffff00
   13e3c:	12000057 	andne	r0, r0, #87	; 0x57
   13e40:	004a240b 	subeq	r2, sl, fp, lsl #8
   13e44:	e50b1300 	str	r1, [fp, #-768]	; 0xfffffd00
   13e48:	1400004d 	strne	r0, [r0], #-77	; 0xffffffb3
   13e4c:	0050480b 	subseq	r4, r0, fp, lsl #16
   13e50:	d90b1500 	stmdble	fp, {r8, sl, ip}
   13e54:	1600004b 	strne	r0, [r0], -fp, asr #32
   13e58:	0050940b 	subseq	r9, r0, fp, lsl #8
   13e5c:	aa0b1700 	bge	2d9a64 <__ccfg+0x2b9abc>
   13e60:	1800004e 	stmdane	r0, {r1, r2, r3, r6}
   13e64:	0049240b 	subeq	r2, r9, fp, lsl #8
   13e68:	fb0b1900 	blx	2da272 <__ccfg+0x2ba2ca>
   13e6c:	1a000056 	bne	13fcc <__exidx_end+0xe3cc>
   13e70:	0050140b 	subseq	r1, r0, fp, lsl #8
   13e74:	9e0b1b00 	vmlals.f64	d1, d11, d0
   13e78:	1c00004d 	stcne	0, cr0, [r0], {77}	; 0x4d
   13e7c:	0047c30b 	subeq	ip, r7, fp, lsl #6
   13e80:	5f0b1d00 	svcpl	0x000b1d00
   13e84:	1e00004f 	cdpne	0, 0, cr0, cr0, cr15, {2}
   13e88:	004f4b0b 	subeq	r4, pc, fp, lsl #22
   13e8c:	2e0b1f00 	cdpcs	15, 0, cr1, cr11, cr0, {0}
   13e90:	20000054 	andcs	r0, r0, r4, asr r0
   13e94:	0054b90b 	subseq	fp, r4, fp, lsl #18
   13e98:	da0b2100 	ble	2dc2a0 <__ccfg+0x2bc2f8>
   13e9c:	22000056 	andcs	r0, r0, #86	; 0x56
   13ea0:	004cd10b 	subeq	sp, ip, fp, lsl #2
   13ea4:	8d0b2300 	stchi	3, cr2, [fp, #-0]
   13ea8:	24000052 	strcs	r0, [r0], #-82	; 0xffffffae
   13eac:	0054860b 	subseq	r8, r4, fp, lsl #12
   13eb0:	aa0b2500 	bge	2dd2b8 <__ccfg+0x2bd310>
   13eb4:	26000053 			; <UNDEFINED> instruction: 0x26000053
   13eb8:	0053be0b 	subseq	fp, r3, fp, lsl #28
   13ebc:	d20b2700 	andle	r2, fp, #0, 14
   13ec0:	28000053 	stmdacs	r0, {r0, r1, r4, r6}
   13ec4:	004b620b 	subeq	r6, fp, fp, lsl #4
   13ec8:	0f0b2900 	svceq	0x000b2900
   13ecc:	2a00004a 	bcs	13ffc <__exidx_end+0xe3fc>
   13ed0:	004a370b 	subeq	r3, sl, fp, lsl #14
   13ed4:	930b2b00 	movwls	r2, #47872	; 0xbb00
   13ed8:	2c000057 	stccs	0, cr0, [r0], {87}	; 0x57
   13edc:	004a690b 	subeq	r6, sl, fp, lsl #18
   13ee0:	830b2d00 	movwhi	r2, #48384	; 0xbd00
   13ee4:	2e000055 	mcrcs	0, 0, r0, cr0, cr5, {2}
   13ee8:	0055970b 	subseq	r9, r5, fp, lsl #14
   13eec:	ab0b2f00 	blge	2dfaf4 <__ccfg+0x2bfb4c>
   13ef0:	30000055 	andcc	r0, r0, r5, asr r0
   13ef4:	004c530b 	subeq	r5, ip, fp, lsl #6
   13ef8:	2d0b3100 	stfcss	f3, [fp, #-0]
   13efc:	3200004c 	andcc	r0, r0, #76	; 0x4c
   13f00:	004f730b 	subeq	r7, pc, fp, lsl #6
   13f04:	270b3300 	strcs	r3, [fp, -r0, lsl #6]
   13f08:	34000051 	strcc	r0, [r0], #-81	; 0xffffffaf
   13f0c:	0057a70b 	subseq	sl, r7, fp, lsl #14
   13f10:	6b0b3500 	blvs	2e1318 <__ccfg+0x2c1370>
   13f14:	36000047 	strcc	r0, [r0], -r7, asr #32
   13f18:	004d530b 	subeq	r5, sp, fp, lsl #6
   13f1c:	680b3700 	stmdavs	fp, {r8, r9, sl, ip, sp}
   13f20:	3800004d 	stmdacc	r0, {r0, r2, r3, r6}
   13f24:	004fd50b 	subeq	sp, pc, fp, lsl #10
   13f28:	ff0b3900 			; <UNDEFINED> instruction: 0xff0b3900
   13f2c:	3a00004f 	bcc	14070 <__exidx_end+0xe470>
   13f30:	0057d00b 	subseq	sp, r7, fp
   13f34:	780b3b00 	stmdavc	fp, {r8, r9, fp, ip, sp}
   13f38:	3c000052 	stccc	0, cr0, [r0], {82}	; 0x52
   13f3c:	004cf60b 	subeq	pc, ip, fp, lsl #12
   13f40:	330b3d00 	movwcc	r3, #48384	; 0xbd00
   13f44:	3e000048 	cdpcc	0, 0, cr0, cr0, cr8, {2}
   13f48:	0047e80b 	subeq	lr, r7, fp, lsl #16
   13f4c:	730b3f00 	movwvc	r3, #48896	; 0xbf00
   13f50:	40000051 	andmi	r0, r0, r1, asr r0
   13f54:	0052f90b 	subseq	pc, r2, fp, lsl #18
   13f58:	100b4100 	andne	r4, fp, r0, lsl #2
   13f5c:	42000054 	andmi	r0, r0, #84	; 0x54
   13f60:	004fea0b 	subeq	lr, pc, fp, lsl #20
   13f64:	090b4300 	stmdbeq	fp, {r8, r9, lr}
   13f68:	44000058 	strmi	r0, [r0], #-88	; 0xffffffa8
   13f6c:	0052a30b 	subseq	sl, r2, fp, lsl #6
   13f70:	530b4500 	movwpl	r4, #46336	; 0xb500
   13f74:	4600004a 	strmi	r0, [r0], -sl, asr #32
   13f78:	004db40b 	subeq	fp, sp, fp, lsl #8
   13f7c:	f80b4700 			; <UNDEFINED> instruction: 0xf80b4700
   13f80:	4800004e 	stmdami	r0, {r1, r2, r3, r6}
   13f84:	0047a70b 	subeq	sl, r7, fp, lsl #14
   13f88:	c90b4900 	stmdbgt	fp, {r8, fp, lr}
   13f8c:	4a000048 	bmi	140b4 <__exidx_end+0xe4b4>
   13f90:	004d0a0b 	subeq	r0, sp, fp, lsl #20
   13f94:	260b4b00 	strcs	r4, [fp], -r0, lsl #22
   13f98:	4c000050 	stcmi	0, cr0, [r0], {80}	; 0x50
   13f9c:	07020200 	streq	r0, [r2, -r0, lsl #4]
   13fa0:	00000d48 	andeq	r0, r0, r8, asr #26
   13fa4:	0003f30c 	andeq	pc, r3, ip, lsl #6
   13fa8:	0003e800 	andeq	lr, r3, r0, lsl #16
   13fac:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
   13fb0:	000003dd 	ldrdeq	r0, [r0], -sp
   13fb4:	03ff0405 	mvnseq	r0, #83886080	; 0x5000000
   13fb8:	ed0e0000 	stc	0, cr0, [lr, #-0]
   13fbc:	02000003 	andeq	r0, r0, #3
   13fc0:	0c540801 	mrrceq	8, 0, r0, r4, cr1
   13fc4:	f80e0000 			; <UNDEFINED> instruction: 0xf80e0000
   13fc8:	0f000003 	svceq	0x00000003
   13fcc:	00004995 	muleq	r0, r5, r9
   13fd0:	1a014c05 	bne	66fec <__ccfg+0x47044>
   13fd4:	000003e8 	andeq	r0, r0, r8, ror #7
   13fd8:	004d8e0f 	subeq	r8, sp, pc, lsl #28
   13fdc:	01820500 	orreq	r0, r2, r0, lsl #10
   13fe0:	0003e81a 	andeq	lr, r3, sl, lsl r8
   13fe4:	03f80c00 	mvnseq	r0, #0, 24
   13fe8:	04290000 	strteq	r0, [r9], #-0
   13fec:	000d0000 	andeq	r0, sp, r0
   13ff0:	004f9709 	subeq	r9, pc, r9, lsl #14
   13ff4:	0d2d0600 	stceq	6, cr0, [sp, #-0]
   13ff8:	0000041e 	andeq	r0, r0, lr, lsl r4
   13ffc:	00565309 	subseq	r5, r6, r9, lsl #6
   14000:	1c380600 	ldcne	6, cr0, [r8], #-0
   14004:	000001f5 	strdeq	r0, [r0], -r5
   14008:	004c670a 	subeq	r6, ip, sl, lsl #14
   1400c:	a2010700 	andge	r0, r1, #0, 14
   14010:	06000000 	streq	r0, [r0], -r0
   14014:	04b40e3a 	ldrteq	r0, [r4], #3642	; 0xe3a
   14018:	bc0b0000 	stclt	0, cr0, [fp], {-0}
   1401c:	00000047 	andeq	r0, r0, r7, asr #32
   14020:	004e970b 	subeq	r9, lr, fp, lsl #14
   14024:	660b0100 	strvs	r0, [fp], -r0, lsl #2
   14028:	02000057 	andeq	r0, r0, #87	; 0x57
   1402c:	0057290b 	subseq	r2, r7, fp, lsl #18
   14030:	d00b0300 	andle	r0, fp, r0, lsl #6
   14034:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
   14038:	0054f70b 	subseq	pc, r4, fp, lsl #14
   1403c:	e00b0500 	and	r0, fp, r0, lsl #10
   14040:	06000049 	streq	r0, [r0], -r9, asr #32
   14044:	0049ba0b 	subeq	fp, r9, fp, lsl #20
   14048:	c50b0700 	strgt	r0, [fp, #-1792]	; 0xfffff900
   1404c:	0800004b 	stmdaeq	r0, {r0, r1, r3, r6}
   14050:	0050aa0b 	subseq	sl, r0, fp, lsl #20
   14054:	e70b0900 	str	r0, [fp, -r0, lsl #18]
   14058:	0a000049 	beq	14184 <__exidx_end+0xe584>
   1405c:	0050b10b 	subseq	fp, r0, fp, lsl #2
   14060:	4c0b0b00 			; <UNDEFINED> instruction: 0x4c0b0b00
   14064:	0c00004a 	stceq	0, cr0, [r0], {74}	; 0x4a
   14068:	0049d10b 	subeq	sp, r9, fp, lsl #2
   1406c:	4e0b0d00 	cdpmi	13, 0, cr0, cr11, cr0, {0}
   14070:	0e000055 	mcreq	0, 0, r0, cr0, cr5, {2}
   14074:	0053170b 	subseq	r1, r3, fp, lsl #14
   14078:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
   1407c:	00005446 	andeq	r5, r0, r6, asr #8
   14080:	41013f06 	tstmi	r1, r6, lsl #30
   14084:	09000004 	stmdbeq	r0, {r2}
   14088:	000054da 	ldrdeq	r5, [r0], -sl
   1408c:	b40f4106 	strlt	r4, [pc], #-262	; 14094 <__exidx_end+0xe494>
   14090:	09000004 	stmdbeq	r0, {r2}
   14094:	00005562 	andeq	r5, r0, r2, ror #10
   14098:	2c0c4a06 			; <UNDEFINED> instruction: 0x2c0c4a06
   1409c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   140a0:	00004979 	andeq	r4, r0, r9, ror r9
   140a4:	2c0c4b06 			; <UNDEFINED> instruction: 0x2c0c4b06
   140a8:	10000000 	andne	r0, r0, r0
   140ac:	00005627 	andeq	r5, r0, r7, lsr #12
   140b0:	00557309 	subseq	r7, r5, r9, lsl #6
   140b4:	144c0600 	strbne	r0, [ip], #-1536	; 0xfffffa00
   140b8:	000004f5 	strdeq	r0, [r0], -r5
   140bc:	04e40405 	strbteq	r0, [r4], #1029	; 0x405
   140c0:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
   140c4:	00004e61 	andeq	r4, r0, r1, ror #28
   140c8:	080f4e06 	stmdaeq	pc, {r1, r2, r9, sl, fp, lr}	; <UNPREDICTABLE>
   140cc:	05000005 	streq	r0, [r0, #-5]
   140d0:	0004fb04 	andeq	pc, r4, r4, lsl #22
   140d4:	545c1200 	ldrbpl	r1, [ip], #-512	; 0xfffffe00
   140d8:	bd090000 	stclt	0, cr0, [r9, #-0]
   140dc:	06000051 			; <UNDEFINED> instruction: 0x06000051
   140e0:	051f0d52 	ldreq	r0, [pc, #-3410]	; 13396 <__exidx_end+0xd796>
   140e4:	04050000 	streq	r0, [r5], #-0
   140e8:	0000050e 	andeq	r0, r0, lr, lsl #10
   140ec:	004bab13 	subeq	sl, fp, r3, lsl fp
   140f0:	67063400 	strvs	r3, [r6, -r0, lsl #8]
   140f4:	05501501 	ldrbeq	r1, [r0, #-1281]	; 0xfffffaff
   140f8:	a0140000 	andsge	r0, r4, r0
   140fc:	0600004f 	streq	r0, [r0], -pc, asr #32
   14100:	ed0f0169 	stfs	f0, [pc, #-420]	; 13f64 <__exidx_end+0xe364>
   14104:	00000003 	andeq	r0, r0, r3
   14108:	004b8f14 	subeq	r8, fp, r4, lsl pc
   1410c:	016a0600 	cmneq	sl, r0, lsl #12
   14110:	00055514 	andeq	r5, r5, r4, lsl r5
   14114:	0e000400 	cfcpyseq	mvf0, mvf0
   14118:	00000525 	andeq	r0, r0, r5, lsr #10
   1411c:	0000c80c 	andeq	ip, r0, ip, lsl #16
   14120:	00056500 	andeq	r6, r5, r0, lsl #10
   14124:	00331500 	eorseq	r1, r3, r0, lsl #10
   14128:	002d0000 	eoreq	r0, sp, r0
   1412c:	0005500c 	andeq	r5, r5, ip
   14130:	00057000 	andeq	r7, r5, r0
   14134:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
   14138:	00000565 	andeq	r0, r0, r5, ror #10
   1413c:	004ecf0f 	subeq	ip, lr, pc, lsl #30
   14140:	016b0600 	cmneq	fp, r0, lsl #12
   14144:	00057003 	andeq	r7, r5, r3
   14148:	50f70f00 	rscspl	r0, r7, r0, lsl #30
   1414c:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
   14150:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14154:	9a160000 	bls	59415c <__ccfg+0x5741b4>
   14158:	07000054 	smlsdeq	r0, r4, r0, r0
   1415c:	0000a201 	andeq	sl, r0, r1, lsl #4
   14160:	01810600 	orreq	r0, r1, r0, lsl #12
   14164:	00063906 	andeq	r3, r6, r6, lsl #18
   14168:	485a0b00 	ldmdami	sl, {r8, r9, fp}^
   1416c:	0b000000 	bleq	14174 <__exidx_end+0xe574>
   14170:	00004866 	andeq	r4, r0, r6, ror #16
   14174:	48720b02 	ldmdami	r2!, {r1, r8, r9, fp}^
   14178:	0b030000 	bleq	d4180 <__ccfg+0xb41d8>
   1417c:	00004c93 	muleq	r0, r3, ip
   14180:	487e0b03 	ldmdami	lr!, {r0, r1, r8, r9, fp}^
   14184:	0b040000 	bleq	11418c <__ccfg+0xf41e4>
   14188:	00004dfa 	strdeq	r4, [r0], -sl
   1418c:	4ee00b04 	vfmami.f64	d16, d0, d4
   14190:	0b050000 	bleq	154198 <__ccfg+0x1341f0>
   14194:	00004e36 	andeq	r4, r0, r6, lsr lr
   14198:	496a0b05 	stmdbmi	sl!, {r0, r2, r8, r9, fp}^
   1419c:	0b050000 	bleq	1541a4 <__ccfg+0x1341fc>
   141a0:	0000488a 	andeq	r4, r0, sl, lsl #17
   141a4:	505e0b06 	subspl	r0, lr, r6, lsl #22
   141a8:	0b060000 	bleq	1941b0 <__ccfg+0x174208>
   141ac:	00004b81 	andeq	r4, r0, r1, lsl #23
   141b0:	506b0b06 	rsbpl	r0, fp, r6, lsl #22
   141b4:	0b060000 	bleq	1941bc <__ccfg+0x174214>
   141b8:	0000551a 	andeq	r5, r0, sl, lsl r5
   141bc:	50780b06 	rsbspl	r0, r8, r6, lsl #22
   141c0:	0b060000 	bleq	1941c8 <__ccfg+0x174220>
   141c4:	000050b8 	strheq	r5, [r0], -r8
   141c8:	48960b06 	ldmmi	r6, {r1, r2, r8, r9, fp}
   141cc:	0b070000 	bleq	1d41d4 <__ccfg+0x1b422c>
   141d0:	000051a0 	andeq	r5, r0, r0, lsr #3
   141d4:	51ed0b07 	mvnpl	r0, r7, lsl #22
   141d8:	0b070000 	bleq	1d41e0 <__ccfg+0x1b4238>
   141dc:	00005555 	andeq	r5, r0, r5, asr r5
   141e0:	4a7e0b07 	bmi	1f96e04 <__ccfg+0x1f76e5c>
   141e4:	0b070000 	bleq	1d41ec <__ccfg+0x1b4244>
   141e8:	000052d0 	ldrdeq	r5, [r0], -r0
   141ec:	480f0b08 	stmdami	pc, {r3, r8, r9, fp}	; <UNPREDICTABLE>
   141f0:	0b080000 	bleq	2141f8 <__ccfg+0x1f4250>
   141f4:	00005528 	andeq	r5, r0, r8, lsr #10
   141f8:	52ec0b08 	rscpl	r0, ip, #8, 22	; 0x2000
   141fc:	00080000 	andeq	r0, r8, r0
   14200:	0057800f 	subseq	r8, r7, pc
   14204:	019f0600 	orrseq	r0, pc, r0, lsl #12
   14208:	00058f1f 	andeq	r8, r5, pc, lsl pc
   1420c:	531e0f00 	tstpl	lr, #0, 30
   14210:	a2060000 	andge	r0, r6, #0
   14214:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14218:	ed0f0000 	stc	0, cr0, [pc, #-0]	; 14220 <__exidx_end+0xe620>
   1421c:	0600004e 	streq	r0, [r0], -lr, asr #32
   14220:	2c0c01a5 	stfcss	f0, [ip], {165}	; 0xa5
   14224:	0f000000 	svceq	0x00000000
   14228:	00005865 	andeq	r5, r0, r5, ror #16
   1422c:	0c01a806 	stceq	8, cr10, [r1], {6}
   14230:	0000002c 	andeq	r0, r0, ip, lsr #32
   14234:	0049890f 	subeq	r8, r9, pc, lsl #18
   14238:	01ab0600 			; <UNDEFINED> instruction: 0x01ab0600
   1423c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14240:	53280f00 			; <UNDEFINED> instruction: 0x53280f00
   14244:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
   14248:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1424c:	d70f0000 	strle	r0, [pc, -r0]
   14250:	06000051 			; <UNDEFINED> instruction: 0x06000051
   14254:	2c0c01b1 	stfcss	f0, [ip], {177}	; 0xb1
   14258:	0f000000 	svceq	0x00000000
   1425c:	000051e2 	andeq	r5, r0, r2, ror #3
   14260:	0c01b406 	cfstrseq	mvf11, [r1], {6}
   14264:	0000002c 	andeq	r0, r0, ip, lsr #32
   14268:	0053320f 	subseq	r3, r3, pc, lsl #4
   1426c:	01b70600 			; <UNDEFINED> instruction: 0x01b70600
   14270:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14274:	503a0f00 	eorspl	r0, sl, r0, lsl #30
   14278:	ba060000 	blt	194280 <__ccfg+0x1742d8>
   1427c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14280:	c40f0000 	strgt	r0, [pc], #-0	; 14288 <__exidx_end+0xe688>
   14284:	06000057 			; <UNDEFINED> instruction: 0x06000057
   14288:	2c0c01bd 	stfcss	f0, [ip], {189}	; 0xbd
   1428c:	0f000000 	svceq	0x00000000
   14290:	0000533c 	andeq	r5, r0, ip, lsr r3
   14294:	0c01c006 	stceq	0, cr12, [r1], {6}
   14298:	0000002c 	andeq	r0, r0, ip, lsr #32
   1429c:	00589c0f 	subseq	r9, r8, pc, lsl #24
   142a0:	01c30600 	biceq	r0, r3, r0, lsl #12
   142a4:	00002c0c 	andeq	r2, r0, ip, lsl #24
   142a8:	57300f00 	ldrpl	r0, [r0, -r0, lsl #30]!
   142ac:	c6060000 	strgt	r0, [r6], -r0
   142b0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142b4:	3c0f0000 	stccc	0, cr0, [pc], {-0}
   142b8:	06000057 			; <UNDEFINED> instruction: 0x06000057
   142bc:	2c0c01c9 	stfcss	f0, [ip], {201}	; 0xc9
   142c0:	0f000000 	svceq	0x00000000
   142c4:	00005748 	andeq	r5, r0, r8, asr #14
   142c8:	0c01cc06 	stceq	12, cr12, [r1], {6}
   142cc:	0000002c 	andeq	r0, r0, ip, lsr #32
   142d0:	00576d0f 	subseq	r6, r7, pc, lsl #26
   142d4:	01d00600 	bicseq	r0, r0, r0, lsl #12
   142d8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   142dc:	588f0f00 	stmpl	pc, {r8, r9, sl, fp}	; <UNPREDICTABLE>
   142e0:	d3060000 	movwle	r0, #24576	; 0x6000
   142e4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142e8:	ee0f0000 	cdp	0, 0, cr0, cr15, cr0, {0}
   142ec:	06000049 	streq	r0, [r0], -r9, asr #32
   142f0:	2c0c01d6 	stfcss	f0, [ip], {214}	; 0xd6
   142f4:	0f000000 	svceq	0x00000000
   142f8:	00004797 	muleq	r0, r7, r7
   142fc:	0c01d906 			; <UNDEFINED> instruction: 0x0c01d906
   14300:	0000002c 	andeq	r0, r0, ip, lsr #32
   14304:	004cb30f 	subeq	fp, ip, pc, lsl #6
   14308:	01dc0600 	bicseq	r0, ip, r0, lsl #12
   1430c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14310:	49c10f00 	stmibmi	r1, {r8, r9, sl, fp}^
   14314:	df060000 	svcle	0x00060000
   14318:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1431c:	4d0f0000 	stcmi	0, cr0, [pc, #-0]	; 14324 <__exidx_end+0xe724>
   14320:	06000053 			; <UNDEFINED> instruction: 0x06000053
   14324:	2c0c01e2 	stfcss	f0, [ip], {226}	; 0xe2
   14328:	0f000000 	svceq	0x00000000
   1432c:	00004f16 	andeq	r4, r0, r6, lsl pc
   14330:	0c01e506 	cfstr32eq	mvfx14, [r1], {6}
   14334:	0000002c 	andeq	r0, r0, ip, lsr #32
   14338:	0051500f 	subseq	r5, r1, pc
   1433c:	01e80600 	mvneq	r0, r0, lsl #12
   14340:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14344:	565c0f00 	ldrbpl	r0, [ip], -r0, lsl #30
   14348:	ef060000 	svc	0x00060000
   1434c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14350:	330f0000 	movwcc	r0, #61440	; 0xf000
   14354:	06000058 			; <UNDEFINED> instruction: 0x06000058
   14358:	2c0c01f2 	stfcss	f0, [ip], {242}	; 0xf2
   1435c:	0f000000 	svceq	0x00000000
   14360:	00005843 	andeq	r5, r0, r3, asr #16
   14364:	0c01f506 	cfstr32eq	mvfx15, [r1], {6}
   14368:	0000002c 	andeq	r0, r0, ip, lsr #32
   1436c:	004b980f 	subeq	r9, fp, pc, lsl #16
   14370:	01f80600 	mvnseq	r0, r0, lsl #12
   14374:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14378:	56a40f00 	strtpl	r0, [r4], r0, lsl #30
   1437c:	fb060000 	blx	194386 <__ccfg+0x1743de>
   14380:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14384:	b80f0000 	stmdalt	pc, {}	; <UNPREDICTABLE>
   14388:	06000052 			; <UNDEFINED> instruction: 0x06000052
   1438c:	2c0c01fe 	stfcss	f0, [ip], {254}	; 0xfe
   14390:	0f000000 	svceq	0x00000000
   14394:	00004d2c 	andeq	r4, r0, ip, lsr #26
   14398:	0c020206 	sfmeq	f0, 4, [r2], {6}
   1439c:	0000002c 	andeq	r0, r0, ip, lsr #32
   143a0:	0054ac0f 	subseq	sl, r4, pc, lsl #24
   143a4:	020a0600 	andeq	r0, sl, #0, 12
   143a8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143ac:	4c1f0f00 	ldcmi	15, cr0, [pc], {-0}
   143b0:	0d060000 	stceq	0, cr0, [r6, #-0]
   143b4:	002c0c02 	eoreq	r0, ip, r2, lsl #24
   143b8:	2c0c0000 	stccs	0, cr0, [ip], {-0}
   143bc:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
   143c0:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
   143c4:	4e160f00 	cdpmi	15, 1, cr0, cr6, cr0, {0}
   143c8:	fb060000 	blx	1943d2 <__ccfg+0x17442a>
   143cc:	07f30c03 	ldrbeq	r0, [r3, r3, lsl #24]!
   143d0:	f50c0000 			; <UNDEFINED> instruction: 0xf50c0000
   143d4:	1b000004 	blne	143ec <__exidx_end+0xe7ec>
   143d8:	15000008 	strne	r0, [r0, #-8]
   143dc:	00000033 	andeq	r0, r0, r3, lsr r0
   143e0:	790f000d 	stmdbvc	pc, {r0, r2, r3}	; <UNPREDICTABLE>
   143e4:	06000053 			; <UNDEFINED> instruction: 0x06000053
   143e8:	0b140584 	bleq	515a00 <__ccfg+0x4f5a58>
   143ec:	16000008 	strne	r0, [r0], -r8
   143f0:	00004ed8 	ldrdeq	r4, [r0], -r8
   143f4:	00a20107 	adceq	r0, r2, r7, lsl #2
   143f8:	8b060000 	blhi	194400 <__ccfg+0x174458>
   143fc:	08660605 	stmdaeq	r6!, {r0, r2, r9, sl}^
   14400:	750b0000 	strvc	r0, [fp, #-0]
   14404:	0000004c 	andeq	r0, r0, ip, asr #32
   14408:	0050c50b 	subseq	ip, r0, fp, lsl #10
   1440c:	450b0100 	strmi	r0, [fp, #-256]	; 0xffffff00
   14410:	02000048 	andeq	r0, r0, #72	; 0x48
   14414:	0057f50b 	subseq	pc, r7, fp, lsl #10
   14418:	f30b0300 	vcgt.u8	d0, d11, d0
   1441c:	04000053 	streq	r0, [r0], #-83	; 0xffffffad
   14420:	0053e60b 	subseq	lr, r3, fp, lsl #12
   14424:	490b0500 	stmdbmi	fp, {r8, sl}
   14428:	06000049 	streq	r0, [r0], -r9, asr #32
   1442c:	57e50f00 	strbpl	r0, [r5, r0, lsl #30]!
   14430:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
   14434:	08281505 	stmdaeq	r8!, {r0, r2, r8, sl, ip}
   14438:	c90f0000 	stmdbgt	pc, {}	; <UNPREDICTABLE>
   1443c:	06000056 			; <UNDEFINED> instruction: 0x06000056
   14440:	33110799 	tstcc	r1, #40108032	; 0x2640000
   14444:	0f000000 	svceq	0x00000000
   14448:	00005366 	andeq	r5, r0, r6, ror #6
   1444c:	0c07ae06 	stceq	14, cr10, [r7], {6}
   14450:	0000002c 	andeq	r0, r0, ip, lsr #32
   14454:	00563b04 	subseq	r3, r6, r4, lsl #22
   14458:	167b0700 	ldrbtne	r0, [fp], -r0, lsl #14
   1445c:	000000a2 	andeq	r0, r0, r2, lsr #1
   14460:	00088d0e 	andeq	r8, r8, lr, lsl #26
   14464:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   14468:	00000a5b 	andeq	r0, r0, fp, asr sl
   1446c:	0048df04 	subeq	sp, r8, r4, lsl #30
   14470:	0f800700 	svceq	0x00800700
   14474:	0000002c 	andeq	r0, r0, ip, lsr #32
   14478:	0048de04 	subeq	sp, r8, r4, lsl #28
   1447c:	16810700 	strne	r0, [r1], r0, lsl #14
   14480:	00000033 	andeq	r0, r0, r3, lsr r0
   14484:	00534604 	subseq	r4, r3, r4, lsl #12
   14488:	0f840700 	svceq	0x00840700
   1448c:	0000003a 	andeq	r0, r0, sl, lsr r0
   14490:	09040402 	stmdbeq	r4, {r1, sl}
   14494:	0200004a 	andeq	r0, r0, #74	; 0x4a
   14498:	4a010308 	bmi	550c0 <__ccfg+0x35118>
   1449c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   144a0:	00441104 	subeq	r1, r4, r4, lsl #2
   144a4:	03100200 	tsteq	r0, #0, 4
   144a8:	00005401 	andeq	r5, r0, r1, lsl #8
   144ac:	00535d13 	subseq	r5, r3, r3, lsl sp
   144b0:	ed070800 	stc	8, cr0, [r7, #-0]
   144b4:	09100a01 	ldmdbeq	r0, {r0, r9, fp}
   144b8:	6c170000 	ldcvs	0, cr0, [r7], {-0}
   144bc:	0700776f 	streq	r7, [r0, -pc, ror #14]
   144c0:	a51a01ed 	ldrge	r0, [sl, #-493]	; 0xfffffe13
   144c4:	00000008 	andeq	r0, r0, r8
   144c8:	0048b414 	subeq	fp, r8, r4, lsl r4
   144cc:	01ed0700 	mvneq	r0, r0, lsl #14
   144d0:	0008a51f 	andeq	sl, r8, pc, lsl r5
   144d4:	18000400 	stmdane	r0, {sl}
   144d8:	01f40708 	mvnseq	r0, r8, lsl #14
   144dc:	00093209 	andeq	r3, r9, r9, lsl #4
   144e0:	00731900 	rsbseq	r1, r3, r0, lsl #18
   144e4:	1301f607 	movwne	pc, #5639	; 0x1607	; <UNPREDICTABLE>
   144e8:	000008e5 	andeq	r0, r0, r5, ror #17
   144ec:	006c6c19 	rsbeq	r6, ip, r9, lsl ip
   144f0:	0a01f707 	beq	92114 <__ccfg+0x7216c>
   144f4:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   144f8:	49d81a00 	ldmibmi	r8, {r9, fp, ip}^
   144fc:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
   14500:	09100301 	ldmdbeq	r0, {r0, r8, r9}
   14504:	320e0000 	andcc	r0, lr, #0
   14508:	0c000009 	stceq	0, cr0, [r0], {9}
   1450c:	00000899 	muleq	r0, r9, r8
   14510:	00000954 	andeq	r0, r0, r4, asr r9
   14514:	00003315 	andeq	r3, r0, r5, lsl r3
   14518:	0e00ff00 	cdpeq	15, 0, cr15, cr0, cr0, {0}
   1451c:	00000944 	andeq	r0, r0, r4, asr #18
   14520:	0051fa0f 	subseq	pc, r1, pc, lsl #20
   14524:	01fc0700 	mvnseq	r0, r0, lsl #14
   14528:	00095416 	andeq	r5, r9, r6, lsl r4
   1452c:	49b00f00 	ldmibmi	r0!, {r8, r9, sl, fp}
   14530:	02070000 	andeq	r0, r7, #0
   14534:	09541602 	ldmdbeq	r4, {r1, r9, sl, ip}^
   14538:	061b0000 	ldreq	r0, [fp], -r0
   1453c:	01000048 	tsteq	r0, r8, asr #32
   14540:	bd010224 	sfmlt	f0, 4, [r1, #-144]	; 0xffffff70
   14544:	c0000008 	andgt	r0, r0, r8
   14548:	54000049 	strpl	r0, [r0], #-73	; 0xffffffb7
   1454c:	01000000 	mrseq	r0, (UNDEF: 0)
   14550:	00751c9c 			; <UNDEFINED> instruction: 0x00751c9c
   14554:	12022401 	andne	r2, r2, #16777216	; 0x1000000
   14558:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   1455c:	00005b0d 	andeq	r5, r0, sp, lsl #22
   14560:	00005b09 	andeq	r5, r0, r9, lsl #22
   14564:	0100761c 	tsteq	r0, ip, lsl r6
   14568:	bd1c0224 	lfmlt	f0, 4, [ip, #-144]	; 0xffffff70
   1456c:	39000008 	stmdbcc	r0, {r3}
   14570:	3500005b 	strcc	r0, [r0, #-91]	; 0xffffffa5
   14574:	1d00005b 	stcne	0, cr0, [r0, #-364]	; 0xfffffe94
   14578:	01007575 	tsteq	r0, r5, ror r5
   1457c:	3f110226 	svccc	0x00110226
   14580:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
   14584:	01007676 	tsteq	r0, r6, ror r6
   14588:	3f110227 	svccc	0x00110227
   1458c:	1d000009 	stcne	0, cr0, [r0, #-36]	; 0xffffffdc
   14590:	28010077 	stmdacs	r1, {r0, r1, r2, r4, r5, r6}
   14594:	09320b02 	ldmdbeq	r2!, {r1, r8, r9, fp}
   14598:	001e0000 	andseq	r0, lr, r0
   1459c:	1d000014 	stcne	0, cr0, [r0, #-80]	; 0xffffffb0
   145a0:	00775f5f 	rsbseq	r5, r7, pc, asr pc
   145a4:	16022801 	strne	r2, [r2], -r1, lsl #16
   145a8:	00000932 	andeq	r0, r0, r2, lsr r9
   145ac:	0014001e 	andseq	r0, r4, lr, lsl r0
   145b0:	58701f00 	ldmdapl	r0!, {r8, r9, sl, fp, ip}^
   145b4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   145b8:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   145bc:	5b630000 	blpl	18d45c4 <__ccfg+0x18b461c>
   145c0:	5b610000 	blpl	18545c8 <__ccfg+0x1834620>
   145c4:	751f0000 	ldrvc	r0, [pc, #-0]	; 145cc <__exidx_end+0xe9cc>
   145c8:	01000058 	qaddeq	r0, r8, r0
   145cc:	b1160228 	tstlt	r6, r8, lsr #4
   145d0:	7c000008 	stcvc	0, cr0, [r0], {8}
   145d4:	7600005b 			; <UNDEFINED> instruction: 0x7600005b
   145d8:	1f00005b 	svcne	0x0000005b
   145dc:	0000587a 	andeq	r5, r0, sl, ror r8
   145e0:	16022801 	strne	r2, [r2], -r1, lsl #16
   145e4:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   145e8:	00005bae 	andeq	r5, r0, lr, lsr #23
   145ec:	00005baa 	andeq	r5, r0, sl, lsr #23
   145f0:	00587f1f 	subseq	r7, r8, pc, lsl pc
   145f4:	02280100 	eoreq	r0, r8, #0, 2
   145f8:	0008b116 	andeq	fp, r8, r6, lsl r1
   145fc:	005bd900 	subseq	sp, fp, r0, lsl #18
   14600:	005bd700 	subseq	sp, fp, r0, lsl #14
   14604:	569f1f00 	ldrpl	r1, [pc], r0, lsl #30
   14608:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   1460c:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   14610:	5bf00000 	blpl	ffc14618 <_estack+0xdfc0f618>
   14614:	5bec0000 	blpl	ffb1461c <_estack+0xdfb0f61c>
   14618:	8e1f0000 	cdphi	0, 1, cr0, cr15, cr0, {0}
   1461c:	01000057 	qaddeq	r0, r7, r0
   14620:	b1160228 	tstlt	r6, r8, lsr #4
   14624:	18000008 	stmdane	r0, {r3}
   14628:	1400005c 	strne	r0, [r0], #-92	; 0xffffffa4
   1462c:	1f00005c 	svcne	0x0000005c
   14630:	00005681 	andeq	r5, r0, r1, lsl #13
   14634:	16022801 	strne	r2, [r2], -r1, lsl #16
   14638:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   1463c:	00005c40 	andeq	r5, r0, r0, asr #24
   14640:	00005c3c 	andeq	r5, r0, ip, lsr ip
   14644:	00577b1f 	subseq	r7, r7, pc, lsl fp
   14648:	02280100 	eoreq	r0, r8, #0, 2
   1464c:	0008b116 	andeq	fp, r8, r6, lsl r1
   14650:	005c6600 	subseq	r6, ip, r0, lsl #12
   14654:	005c6200 	subseq	r6, ip, r0, lsl #4
   14658:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
    return node->data_base.item_array[index];
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
};
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	0008030b 	andeq	r0, r8, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__ccfg+0xe63898>
      30:	0b39053b 	bleq	e41524 <__ccfg+0xe2157c>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nq++;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!button_still_pressed (__button_list [pbutton]))
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
	if (baction == NULL)
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
	(*baction) (pbutton);
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
endthread
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
endthread
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm sender(struct ResponseMessage *message) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0b000f11 	bleq	3d28 <NOROM_RFCRTrim+0x9c>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
		packet[1] = message->gid;
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		DEBUG_PRINT("I am th message GID %d", message->gid);
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     104:	14000005 	strne	r0, [r0], #-5
		*p = message->tpe;p++;
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
		*p = message->request_number;p++;
     10c:	15150000 	ldrne	r0, [r5, #-0]
		*p = message->sender_id;p++;
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
		*p = message->receiver_id;p++;
     114:	00130113 	andseq	r0, r3, r3, lsl r1
		switch(message->tpe) {
     118:	00051600 	andeq	r1, r5, r0, lsl #12
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
		tcv_endp(packet);
     124:	18000013 	stmdane	r0, {r0, r1, r4}
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
}
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
		finish;
     134:	00001301 	andeq	r1, r0, r1, lsl #6
     138:	03000d19 	movweq	r0, #3353	; 0xd19
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
				strncpy(p, message->record, sizeof(message->record));
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				*p = message->padding;p++;
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
				strncpy(p, message->record, sizeof(message->record));
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
				strncpy(p, message->record, sizeof(message->record));
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     158:	131b0000 	tstne	fp, #0
				strncpy(p, message->record, sizeof(message->record));
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
				break;
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
				*p = message->record_index;p++;
     164:	010b3905 	tsteq	fp, r5, lsl #18
				*p = message->padding;
     168:	1c000013 	stcne	0, cr0, [r0], {19}
				break;
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		node->nnodes[i] = 0;
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	00001349 	andeq	r1, r0, r9, asr #6
bool init_node(struct Node* node){
     198:	0300131f 	movweq	r1, #799	; 0x31f
    node->id  = 0;                  // default id value 0
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
    node->index = 0;                // default entry count 0
     1a0:	01152000 	tsteq	r5, r0
    node->data_base.item_count = 0; // default no items in array
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
	reset_array(node);
     1a8:	34210000 	strtcc	r0, [r1], #-0
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
};
     1b4:	3f13490b 	svccc	0x0013490b
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
uint8_t generate_request_num(void){
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
    return (uint8_t) (rand() % 255);
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
}
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
            node->nnodes[i] = 0; // set to null byte
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
};
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0e030104 	adfeqs	f0, f3, f4
        node->data_base.item_count -= 1;
     1f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
};
     1fc:	0b3b0b3a 	bleq	ec2eec <__ccfg+0xea2f44>
bool delete_all(struct Node *node){
     200:	13010b39 	movwne	r0, #6969	; 0x1b39
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	28270000 	stmdacs	r7!, {}	; <UNPREDICTABLE>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	1c0e0300 	stcne	3, cr0, [lr], {-0}
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	2800000b 	stmdacs	r0, {r0, r1, r3}
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
            node->data_base.item_array[i].timestamp = 0;
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	13490b39 	movtne	r0, #39737	; 0x9b39
    node->data_base.item_count = 0;
     21c:	0a020c3f 	beq	83320 <__ccfg+0x63378>
}
     220:	34290000 	strtcc	r0, [r9], #-0
        return true;
     224:	3a080300 	bcc	200e2c <__ccfg+0x1e0e84>
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	3f13490b 	svccc	0x0013490b
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	000a020c 	andeq	r0, sl, ip, lsl #4
     234:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     238:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	response_message->tpe = RESPONSE;
     240:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	response_message->status = status;
     244:	01120111 	tsteq	r2, r1, lsl r1
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	13010a40 	movwne	r0, #6720	; 0x1a40
	response_message->gid = gid;
     24c:	052b0000 	streq	r0, [fp, #-0]!
	response_message->sender_id = sender_id;
     250:	3a0e0300 	bcc	380e58 <__ccfg+0x360eb0>
	response_message->status = status;
     254:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!padding){
     258:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		response_message->padding = padding;
     25c:	2c000006 	stccs	0, cr0, [r0], {6}
	if (rec != NULL){
     260:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		strncpy(response_message->record, rec, 20);
     268:	01110b39 	tsteq	r1, r9, lsr fp
     26c:	0b2d0000 	bleq	b40274 <__ccfg+0xb202cc>
     270:	00065501 	andeq	r5, r6, r1, lsl #10
};
     274:	00342e00 	eorseq	r2, r4, r0, lsl #28
fsm receiver(struct Node* node_db) {
     278:	0b3a0e03 	bleq	e83a8c <__ccfg+0xe63ae4>
     27c:	0b39053b 	bleq	e41770 <__ccfg+0xe217c8>
     280:	0a021349 	beq	84fac <__ccfg+0x65004>
     284:	0b2f0000 	bleq	bc028c <__ccfg+0xba02e4>
     288:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     28c:	00130101 	andseq	r0, r3, r1, lsl #2
     290:	011d3000 	tsteq	sp, r0
     294:	01521331 	cmpeq	r2, r1, lsr r3
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	0b580655 	bleq	1601bf4 <__ccfg+0x15e1c4c>
     29c:	0b570559 	bleq	15c1808 <__ccfg+0x15a1860>
     2a0:	05310000 	ldreq	r0, [r1, #-0]!
     2a4:	02133100 	andseq	r3, r3, #0, 2
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	32000006 	andcc	r0, r0, #6
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     2b0:	00001301 	andeq	r1, r0, r1, lsl #6
     2b4:	03003433 	movweq	r3, #1075	; 0x433
		switch (response_message_5->tpe){
     2b8:	3b0b3a08 	blcc	2ceae0 <__ccfg+0x2aeb38>
     2bc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     2c0:	00060213 	andeq	r0, r6, r3, lsl r2
     2c4:	011d3400 	tsteq	sp, r0, lsl #8
     2c8:	01111331 	tsteq	r1, r1, lsr r3
     2cc:	0b580112 	bleq	160071c <__ccfg+0x15e0774>
     2d0:	0b570559 	bleq	15c183c <__ccfg+0x15a1894>
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	34350000 	ldrtcc	r0, [r5], #-0
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	3a0e0300 	bcc	380ee0 <__ccfg+0x360f38>
				if (discovery_request_message->gid == node_db->gid){
     2dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     2e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	36000006 	strcc	r0, [r0], -r6
     2e8:	0111010b 	tsteq	r1, fp, lsl #2
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	00000112 	andeq	r0, r0, r2, lsl r1
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	3f012e37 	svccc	0x00012e37
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	3a0e030c 	bcc	380f2c <__ccfg+0x360f84>
					response_message_0->sender_id = node_db->id;
     2f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	110c270b 	tstne	ip, fp, lsl #14
					DEBUG_PRINT("\r\nSending to sender");
     300:	40011201 	andmi	r1, r1, r1, lsl #4
					call sender(response_message_0, done_case);
     304:	0013010a 	andseq	r0, r3, sl, lsl #2
     308:	00053800 	andeq	r3, r5, r0, lsl #16
     30c:	0b3a0e03 	bleq	e83b20 <__ccfg+0xe63b78>
     310:	0b390b3b 	bleq	e43004 <__ccfg+0xe2305c>
     314:	06021349 	streq	r1, [r2], -r9, asr #6
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	34390000 	ldrtcc	r0, [r9], #-0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	3a0e0300 	bcc	380f24 <__ccfg+0x360f7c>
     320:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     324:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     328:	3a000006 	bcc	348 <receiver+0xd0>
     32c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     330:	0b3b0b3a 	bleq	ec3020 <__ccfg+0xea3078>
     334:	01110b39 	tsteq	r1, r9, lsr fp
     338:	343b0000 	ldrtcc	r0, [fp], #-0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	3a0e0300 	bcc	380f44 <__ccfg+0x360f9c>
					node_db->index+=1;
     340:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		tcv_endp(incoming_packet);
     348:	3c00000a 	stccc	0, cr0, [r0], {10}
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		proceed receiving;
     350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		ser_out(response_1_create, "\r\nData Saved");
     354:	13490b39 	movtne	r0, #39737	; 0x9b39
     358:	1d3d0000 	ldcne	0, cr0, [sp, #-0]
		proceed receiving;
     35c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     360:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     368:	0013010b 	andseq	r0, r3, fp, lsl #2
		proceed receiving;
     36c:	00053e00 	andeq	r3, r5, r0, lsl #28
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	00001331 	andeq	r1, r0, r1, lsr r3
     374:	3100343f 	tstcc	r0, pc, lsr r4
     378:	40000013 	andmi	r0, r0, r3, lsl r0
     37c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     380:	0b3b0b3a 	bleq	ec3070 <__ccfg+0xea30c8>
		proceed receiving;
     384:	13490b39 	movtne	r0, #39737	; 0x9b39
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	00000b1c 	andeq	r0, r0, ip, lsl fp
     38c:	03003441 	movweq	r3, #1089	; 0x441
     390:	3b0b3a08 	blcc	2cebb8 <__ccfg+0x2aec10>
     394:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		proceed receiving;
     398:	00060213 	andeq	r0, r6, r3, lsl r2
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
     3a0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     3a4:	0b3b0b3a 	bleq	ec3094 <__ccfg+0xea30ec>
     3a8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		proceed receiving;
     3ac:	01111349 	tsteq	r1, r9, asr #6
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	0a400112 	beq	1000800 <__ccfg+0xfe0858>
     3b4:	00001301 	andeq	r1, r0, r1, lsl #6
     3b8:	03000543 	movweq	r0, #1347	; 0x543
     3bc:	3b0b3a08 	blcc	2cebe4 <__ccfg+0x2aec3c>
		proceed receiving;
     3c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	00060213 	andeq	r0, r6, r3, lsl r2
     3c8:	00054400 	andeq	r4, r5, r0, lsl #8
		proceed receiving;
     3cc:	0b3a0e03 	bleq	e83be0 <__ccfg+0xe63c38>
}
     3d0:	0b390b3b 	bleq	e430c4 <__ccfg+0xe2311c>
     3d4:	0a021349 	beq	85100 <__ccfg+0x65158>
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	05450000 	strbeq	r0, [r5, #-0]
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	3a080300 	bcc	200fe4 <__ccfg+0x1e103c>
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3e8:	4600000a 	strmi	r0, [r0], -sl
     3ec:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 33c <receiver+0xc4>
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	0b3a0e03 	bleq	e83c04 <__ccfg+0xe63c5c>
					break;
     3f4:	0b390b3b 	bleq	e430e8 <__ccfg+0xe23140>
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	13490c27 	movtne	r0, #39975	; 0x9c27
     3fc:	13010b20 	movwne	r0, #6944	; 0x1b20
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	05470000 	strbeq	r0, [r7, #-0]
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	3a0e0300 	bcc	38100c <__ccfg+0x361064>
     408:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	0013490b 	andseq	r4, r3, fp, lsl #18
     410:	00344800 	eorseq	r4, r4, r0, lsl #16
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	0b3a0803 	bleq	e82428 <__ccfg+0xe62480>
     418:	0b390b3b 	bleq	e4310c <__ccfg+0xe23164>
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	00001349 	andeq	r1, r0, r9, asr #6
     420:	00010b49 	andeq	r0, r1, r9, asr #22
     424:	002e4a00 	eoreq	r4, lr, r0, lsl #20
     428:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     42c:	0b3b0b3a 	bleq	ec311c <__ccfg+0xea3174>
     430:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	01111349 	tsteq	r1, r9, asr #6
					call sender(response_message_2, done_case);
     438:	0a400112 	beq	1000888 <__ccfg+0xfe08e0>
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	054b0000 	strbeq	r0, [fp, #-0]
     440:	3a080300 	bcc	201048 <__ccfg+0x1e10a0>
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     448:	0013490b 	andseq	r4, r3, fp, lsl #18
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	002e4c00 	eoreq	r4, lr, r0, lsl #24
				DEBUG_PRINT("\r\nDelete rec");
     450:	0b3a0e03 	bleq	e83c64 <__ccfg+0xe63cbc>
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	0b39053b 	bleq	e41948 <__ccfg+0xe219a0>
     458:	13490c27 	movtne	r0, #39975	; 0x9c27
     45c:	00000b20 	andeq	r0, r0, r0, lsr #22
     460:	31012e4d 	tstcc	r1, sp, asr #28
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     468:	010a4001 	tsteq	sl, r1
     46c:	4e000013 	mcrmi	0, 0, r0, cr0, cr3, {0}
     470:	13310005 	teqne	r1, #5
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	00000a02 	andeq	r0, r0, r2, lsl #20
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	31012e4f 	tstcc	r1, pc, asr #28
     47c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	000a4001 	andeq	r4, sl, r1
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	11010000 	mrsne	r0, (UNDEF: 1)
     488:	130e2501 	movwne	r2, #58625	; 0xe501
     48c:	1b0e030b 	blne	3810c0 <__ccfg+0x361118>
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	1106550e 	tstne	r6, lr, lsl #10
						status = (uint8_t) SUCCESS;
     494:	00061001 	andeq	r1, r6, r1
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	00240200 	eoreq	r0, r4, r0, lsl #4
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	0b3e0b0b 	bleq	f830d0 <__ccfg+0xf63128>
     4a0:	00000e03 	andeq	r0, r0, r3, lsl #28
     4a4:	03001603 	movweq	r1, #1539	; 0x603
     4a8:	3b0b3a0e 	blcc	2cece8 <__ccfg+0x2aed40>
     4ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     4b4:	0b0b0024 	bleq	2c054c <__ccfg+0x2a05a4>
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4bc:	26050000 	strcs	r0, [r5], -r0
     4c0:	00134900 	andseq	r4, r3, r0, lsl #18
     4c4:	00350600 	eorseq	r0, r5, r0, lsl #12
     4c8:	00001349 	andeq	r1, r0, r9, asr #6
     4cc:	0b000f07 	bleq	40f0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>
     4d0:	0013490b 	andseq	r4, r3, fp, lsl #18
     4d4:	01130800 	tsteq	r3, r0, lsl #16
     4d8:	0b3a0b0b 	bleq	e8310c <__ccfg+0xe63164>
     4dc:	0b390b3b 	bleq	e431d0 <__ccfg+0xe23228>
     4e0:	00001301 	andeq	r1, r0, r1, lsl #6
     4e4:	03000d09 	movweq	r0, #3337	; 0xd09
     4e8:	3b0b3a0e 	blcc	2ced28 <__ccfg+0x2aed80>
     4ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4f0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     4f4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     4f8:	0a00000b 	beq	52c <receiver+0x2b4>
     4fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     500:	0b3b0b3a 	bleq	ec31f0 <__ccfg+0xea3248>
     504:	13490b39 	movtne	r0, #39737	; 0x9b39
     508:	00000b38 	andeq	r0, r0, r8, lsr fp
     50c:	0300340b 	movweq	r3, #1035	; 0x40b
     510:	3b0b3a0e 	blcc	2ced50 <__ccfg+0x2aeda8>
     514:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     518:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     51c:	0c00000c 	stceq	0, cr0, [r0], {12}
     520:	13490101 	movtne	r0, #37121	; 0x9101
     524:	00001301 	andeq	r1, r0, r1, lsl #6
     528:	0000210d 	andeq	r2, r0, sp, lsl #2
     52c:	00160e00 	andseq	r0, r6, r0, lsl #28
     530:	0b3a0e03 	bleq	e83d44 <__ccfg+0xe63d9c>
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	0b39053b 	bleq	e41a28 <__ccfg+0xe21a80>
     538:	00001349 	andeq	r1, r0, r9, asr #6
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
				DEBUG_PRINT("\r\nretrieve rec");
     540:	0013010c 	andseq	r0, r3, ip, lsl #2
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00051000 	andeq	r1, r5, r0
     548:	00001349 	andeq	r1, r0, r9, asr #6
     54c:	03003411 	movweq	r3, #1041	; 0x411
     550:	3b0b3a0e 	blcc	2ced90 <__ccfg+0x2aede8>
     554:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     558:	3c0c3f13 	stccc	15, cr3, [ip], {19}
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	1200000c 	andne	r0, r0, #12
     560:	0b0b0113 	bleq	2c09b4 <__ccfg+0x2a0a0c>
     564:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    return node->data_base.item_array[index];
     568:	13010b39 	movwne	r0, #6969	; 0x1b39
     56c:	0d130000 	ldceq	0, cr0, [r3, #-0]
     570:	3a0e0300 	bcc	381178 <__ccfg+0x3611d0>
     574:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    return node->data_base.item_array[index];
     57c:	1400000b 	strne	r0, [r0], #-11
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     584:	0b3a0b0b 	bleq	e831b8 <__ccfg+0xe63210>
     588:	0b39053b 	bleq	e41a7c <__ccfg+0xe21ad4>
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	00001301 	andeq	r1, r0, r1, lsl #6
     590:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
     594:	000b2f13 	andeq	r2, fp, r3, lsl pc
     598:	00341600 	eorseq	r1, r4, r0, lsl #12
     59c:	0b3a0e03 	bleq	e83db0 <__ccfg+0xe63e08>
     5a0:	0b390b3b 	bleq	e43294 <__ccfg+0xe232ec>
     5a4:	00001349 	andeq	r1, r0, r9, asr #6
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	03003417 	movweq	r3, #1047	; 0x417
     5ac:	3b0b3a0e 	blcc	2cedec <__ccfg+0x2aee44>
				DEBUG_PRINT("\r\nResponse");
     5b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     5b8:	1800000a 	stmdane	r0, {r1, r3}
     5bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     5c4:	13490b39 	movtne	r0, #39737	; 0x9b39
     5c8:	00000a02 	andeq	r0, r0, r2, lsl #20
				if(!response_flag){
     5cc:	47003419 	smladmi	r0, r9, r4, r3
					response_flag=1;
     5d0:	3b0b3a13 	blcc	2cee24 <__ccfg+0x2aee7c>
					trigger(&response_flag);
     5d4:	020b3905 	andeq	r3, fp, #81920	; 0x14000
				switch(response_message_5->status){
     5d8:	1a00000a 	bne	608 <receiver+0x390>
     5dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 52c <receiver+0x2b4>
     5e0:	0b3a0e03 	bleq	e83df4 <__ccfg+0xe63e4c>
     5e4:	0b39053b 	bleq	e41ad8 <__ccfg+0xe21b30>
     5e8:	13490c27 	movtne	r0, #39975	; 0x9c27
						if (response_checker[0] == response_message_5->request_number){
     5ec:	01120111 	tsteq	r2, r1, lsl r1
     5f0:	13010a40 	movwne	r0, #6720	; 0x1a40
     5f4:	0b1b0000 	bleq	6c05fc <__ccfg+0x6a0654>
							switch(response_checker[1]){
     5f8:	01065501 	tsteq	r6, r1, lsl #10
     5fc:	1c000013 	stcne	0, cr0, [r0], {19}
     600:	08030034 	stmdaeq	r3, {r2, r4, r5}
     604:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
									proceed response_1_create;
     608:	13490b39 	movtne	r0, #39737	; 0x9b39
						proceed response_2;
     60c:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
									proceed response_1_delete;
     610:	11133100 	tstne	r3, r0, lsl #2
									proceed response_1_retrieve;
     614:	58011201 	stmdapl	r1, {r0, r9, ip}
						proceed response_2;
     618:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
						proceed response_3;
     61c:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
						proceed response_4;
     620:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 570 <receiver+0x2f8>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	0b3a0e03 	bleq	e83e38 <__ccfg+0xe63e90>
     628:	0b39053b 	bleq	e41b1c <__ccfg+0xe21b74>
				break;
     62c:	01120111 	tsteq	r2, r1, lsl r1
}
     630:	13010a40 	movwne	r0, #6720	; 0x1a40
     634:	0a1f0000 	beq	7c063c <__ccfg+0x7a0694>
     638:	3a0e0300 	bcc	381240 <__ccfg+0x361298>
     63c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     640:	2000000b 	andcs	r0, r0, fp
     644:	1331011d 	teqne	r1, #1073741831	; 0x40000007
fsm root {
     648:	06550152 			; <UNDEFINED> instruction: 0x06550152
     64c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     650:	13010b57 	movwne	r0, #6999	; 0x1b57
     654:	05210000 	streq	r0, [r1, #-0]!
     658:	00133100 	andseq	r3, r3, r0, lsl #2
     65c:	011d2200 	tsteq	sp, r0, lsl #4
     660:	01521331 	cmpeq	r2, r1, lsr r3
     664:	0b580655 	bleq	1601fc0 <__ccfg+0x15e2018>
     668:	0b570b59 	bleq	15c33d4 <__ccfg+0x15a342c>
     66c:	00001301 	andeq	r1, r0, r1, lsl #6
     670:	55010b23 	strpl	r0, [r1, #-2851]	; 0xfffff4dd
     674:	24000006 	strcs	r0, [r0], #-6
     678:	1331000a 	teqne	r1, #10
     67c:	00000111 	andeq	r0, r0, r1, lsl r1
     680:	31001d25 	tstcc	r0, r5, lsr #26
     684:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     688:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     68c:	000b5705 	andeq	r5, fp, r5, lsl #14
     690:	011d2600 	tsteq	sp, r0, lsl #12
     694:	01111331 	tsteq	r1, r1, lsr r3
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	0b580112 	bleq	1600ae8 <__ccfg+0x15e0b40>
     69c:	0b570559 	bleq	15c1c08 <__ccfg+0x15a1c60>
     6a0:	00001301 	andeq	r1, r0, r1, lsl #6
		init_node(node_db);
     6a4:	31011d27 	tstcc	r1, r7, lsr #26
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6ac:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
		tcv_plug (0, &plug_null);
     6b0:	000b5705 	andeq	r5, fp, r5, lsl #14
     6b4:	001d2800 	andseq	r2, sp, r0, lsl #16
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	01111331 	tsteq	r1, r1, lsr r3
     6bc:	0b580112 	bleq	1600b0c <__ccfg+0x15e0b64>
     6c0:	0b570b59 	bleq	15c342c <__ccfg+0x15a3484>
     6c4:	34290000 	strtcc	r0, [r9], #-0
     6c8:	3a080300 	bcc	2012d0 <__ccfg+0x1e1328>
			diag("Cannot open tcv interface");
     6cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			halt();
     6d4:	2a000006 	bcs	6f4 <root+0xac>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	0e03012e 	adfeqsp	f0, f3, #0.5
     6dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		runfsm receiver(node_db);
     6e0:	0b200b39 	bleq	8033cc <__ccfg+0x7e3424>
     6e4:	00001301 	andeq	r1, r0, r1, lsl #6
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	03000a2b 	movweq	r0, #2603	; 0xa2b
     6ec:	3b0b3a0e 	blcc	2cef2c <__ccfg+0x2aef84>
     6f0:	000b3905 	andeq	r3, fp, r5, lsl #18
     6f4:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     6f8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		ser_inf(get_choice, "%c", &CHOICE);
     700:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     704:	01120111 	tsteq	r2, r1, lsl r1
     708:	13010a40 	movwne	r0, #6720	; 0x1a40
		switch(CHOICE) {
     70c:	052d0000 	streq	r0, [sp, #-0]!
     710:	3a0e0300 	bcc	381318 <__ccfg+0x361370>
     714:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     718:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     71c:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
     720:	0111010b 	tsteq	r1, fp, lsl #2
     724:	13010112 	movwne	r0, #4370	; 0x1112
     728:	342f0000 	strtcc	r0, [pc], #-0	; 730 <root+0xe8>
     72c:	00133100 	andseq	r3, r3, r0, lsl #2
     730:	010b3000 	mrseq	r3, (UNDEF: 11)
     734:	06551331 			; <UNDEFINED> instruction: 0x06551331
     738:	34310000 	ldrtcc	r0, [r1], #-0
				proceed menu;
     73c:	02133100 	andseq	r3, r3, #0, 2
     740:	32000006 	andcc	r0, r0, #6
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     748:	06550152 			; <UNDEFINED> instruction: 0x06550152
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	0b590b58 	bleq	16434b4 <__ccfg+0x162350c>
     750:	00000b57 	andeq	r0, r0, r7, asr fp
     754:	31011d33 	tstcc	r1, r3, lsr sp
		DEBUG_PRINT("setting node group ID");
     758:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    node->gid = gid; 
     760:	000b5705 	andeq	r5, fp, r5, lsl #14
		proceed menu;
     764:	00053400 	andeq	r3, r5, r0, lsl #8
     768:	0b3a0803 	bleq	e8277c <__ccfg+0xe627d4>
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76c:	0b39053b 	bleq	e41c60 <__ccfg+0xe21cb8>
     770:	0a021349 	beq	8549c <__ccfg+0x654f4>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     774:	05350000 	ldreq	r0, [r5, #-0]!
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	02133100 	andseq	r3, r3, #0, 2
     77c:	36000006 	strcc	r0, [r0], -r6
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     780:	08030034 	stmdaeq	r3, {r2, r4, r5}
     784:	0b3b0b3a 	bleq	ec3474 <__ccfg+0xea34cc>
		if((node_db->id < 1) || (node_db->id > 25)){
     788:	13490b39 	movtne	r0, #39737	; 0x9b39
     78c:	00000602 	andeq	r0, r0, r2, lsl #12
     790:	11010b37 	tstne	r1, r7, lsr fp
			strncpy(reason, "Out of Range", 50);
     794:	00011201 	andeq	r1, r1, r1, lsl #4
     798:	002e3800 	eoreq	r3, lr, r0, lsl #16
			proceed invalid_node_id;
     79c:	0b3a0e03 	bleq	e83fb0 <__ccfg+0xe64008>
     7a0:	0b39053b 	bleq	e41c94 <__ccfg+0xe21cec>
				strncpy(reason, "ID is already in use", 50);
     7a4:	00000b20 	andeq	r0, r0, r0, lsr #22
		for(int i = 0; i < node_db->index; i++){
     7a8:	03012e39 	movweq	r2, #7737	; 0x1e39
     7ac:	3b0b3a0e 	blcc	2cefec <__ccfg+0x2af044>
     7b0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		proceed menu;
     7b4:	1201110c 	andne	r1, r1, #12, 2
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7b8:	010a4001 	tsteq	sl, r1
     7bc:	3a000013 	bcc	810 <root+0x1c8>
     7c0:	0e03012e 	adfeqsp	f0, f3, #0.5
     7c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		proceed get_new_node_id;
     7c8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     7cc:	01111349 	tsteq	r1, r9, asr #6
		if (!clear_node_neighbour_array(node_db)){
     7d0:	0a400112 	beq	1000c20 <__ccfg+0xfe0c78>
     7d4:	00001301 	andeq	r1, r0, r1, lsl #6
			strncpy(reason, "Error Clearing Node Array", 50);
     7d8:	0300053b 	movweq	r0, #1339	; 0x53b
     7dc:	3b0b3a08 	blcc	2cf004 <__ccfg+0x2af05c>
     7e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			proceed error;
     7e4:	00060213 	andeq	r0, r6, r3, lsl r2
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7e8:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     7ec:	0b3a0e03 	bleq	e84000 <__ccfg+0xe64058>
		request_packet->gid = node_db->gid;
     7f0:	0b39053b 	bleq	e41ce4 <__ccfg+0xe21d3c>
     7f4:	01120111 	tsteq	r2, r1, lsl r1
		request_packet->tpe = DISCOVERY_REQUEST;
     7f8:	13010a40 	movwne	r0, #6720	; 0x1a40
		request_packet->request_number = generate_request_num();
     7fc:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     800:	030c3f01 	movweq	r3, #52993	; 0xcf01
		call sender(request_packet, wait_discovery);
     804:	3b0b3a0e 	blcc	2cf044 <__ccfg+0x2af09c>
     808:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		request_packet->receiver_id=0;
     80c:	2013490c 	andscs	r4, r3, ip, lsl #18
		call sender(request_packet, wait_discovery);
     810:	0013010b 	andseq	r0, r3, fp, lsl #2
     814:	00053e00 	andeq	r3, r5, r0, lsl #28
     818:	0b3a0803 	bleq	e8282c <__ccfg+0xe62884>
			release;
     81c:	0b39053b 	bleq	e41d10 <__ccfg+0xe21d68>
				proceed get_new_node_id;
     820:	00001349 	andeq	r1, r0, r9, asr #6
				proceed clear_neighbour_array;
     824:	03000a3f 	movweq	r0, #2623	; 0xa3f
				proceed create_proto_start;
     828:	3b0b3a08 	blcc	2cf050 <__ccfg+0x2af0a8>
				proceed start_delete_proto;
     82c:	000b3905 	andeq	r3, fp, r5, lsl #18
				proceed retrieve_proto;
     830:	00344000 	eorseq	r4, r4, r0
				proceed display_db;
     834:	0b3a0e03 	bleq	e84048 <__ccfg+0xe640a0>
				proceed del_local;
     838:	0b39053b 	bleq	e41d2c <__ccfg+0xe21d84>
			if(node_db->id == node_db->nnodes[i]){
     83c:	06021349 	streq	r1, [r2], -r9, asr #6
     840:	0a410000 	beq	1040848 <__ccfg+0x10208a0>
     844:	3a080300 	bcc	20144c <__ccfg+0x1e14a4>
				strncpy(reason, "ID is already in use", 50);
     848:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     84c:	0001110b 	andeq	r1, r1, fp, lsl #2
				proceed invalid_node_id;
     850:	011d4200 	tsteq	sp, r0, lsl #4
     854:	01111331 	tsteq	r1, r1, lsr r3
		for(int i = 0; i < node_db->index; i++){
     858:	0b580112 	bleq	1600ca8 <__ccfg+0x15e0d00>
		if (discovery_wait_flag == 0){
     85c:	0b570b59 	bleq	15c35c8 <__ccfg+0x15a3620>
			discovery_wait_flag=1;
     860:	00001301 	andeq	r1, r0, r1, lsl #6
     864:	31011d43 	tstcc	r1, r3, asr #26
			delay(3000, find_proto_start);
     868:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     86c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
		if (discovery_wait_flag == 1){
     870:	000b570b 	andeq	r5, fp, fp, lsl #14
			discovery_wait_flag=0;
     874:	012e4400 			; <UNDEFINED> instruction: 0x012e4400
     878:	0b3a0e03 	bleq	e8408c <__ccfg+0xe640e4>
			delay(3000, display_neighbour_nodes);
     87c:	0b39053b 	bleq	e41d70 <__ccfg+0xe21dc8>
     880:	13490c27 	movtne	r0, #39975	; 0x9c27
     884:	13010b20 	movwne	r0, #6944	; 0x1b20
     888:	2e450000 	cdpcs	0, 4, cr0, cr5, cr0, {0}
     88c:	3a0e0300 	bcc	381494 <__ccfg+0x3614ec>
     890:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     894:	2013490b 	andscs	r4, r3, fp, lsl #18
     898:	4600000b 	strmi	r0, [r0], -fp
     89c:	0e03012e 	adfeqsp	f0, f3, #0.5
     8a0:	0b3b0b3a 	bleq	ec3590 <__ccfg+0xea35e8>
     8a4:	0b200b39 	bleq	803590 <__ccfg+0x7e35e8>
     8a8:	00001301 	andeq	r1, r0, r1, lsl #6
     8ac:	03003447 	movweq	r3, #1095	; 0x447
     8b0:	3b0b3a08 	blcc	2cf0d8 <__ccfg+0x2af130>
     8b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     8b8:	48000013 	stmdami	r0, {r0, r1, r4}
     8bc:	0000010b 	andeq	r0, r0, fp, lsl #2
     8c0:	3f012e49 	svccc	0x00012e49
     8c4:	3a0e030c 	bcc	3814fc <__ccfg+0x361554>
		if(node_db->index == 0){
     8c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8cc:	110c270b 	tstne	ip, fp, lsl #14
     8d0:	40011201 	andmi	r1, r1, r1, lsl #4
			proceed menu;
     8d4:	0013010a 	andseq	r0, r3, sl, lsl #2
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8d8:	00054a00 	andeq	r4, r5, r0, lsl #20
     8dc:	0b3a0803 	bleq	e828f0 <__ccfg+0xe62948>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8e0:	0b390b3b 	bleq	e435d4 <__ccfg+0xe2362c>
			if (node_db->nnodes[i] == 0) break;
     8e4:	06021349 	streq	r1, [r2], -r9, asr #6
     8e8:	344b0000 	strbcc	r0, [fp], #-0
     8ec:	3a0e0300 	bcc	3814f4 <__ccfg+0x36154c>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f8:	4c00000a 	stcmi	0, cr0, [r0], {10}
		proceed menu;
     8fc:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     900:	0b3b0b3a 	bleq	ec35f0 <__ccfg+0xea3648>
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     904:	01110b39 	tsteq	r1, r9, lsr fp
     908:	1d4d0000 	stclne	0, cr0, [sp, #-0]
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
     90c:	52133100 	andspl	r3, r3, #0, 2
     910:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     914:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     918:	4e00000b 	cdpmi	0, 0, cr0, cr0, cr11, {0}
     91c:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 86c <root+0x224>
			strncpy(reason, "Error: improper ID", 50);
     920:	0b3a0e03 	bleq	e84134 <__ccfg+0xe6418c>
     924:	0b390b3b 	bleq	e43618 <__ccfg+0xe23670>
			proceed error;
     928:	01110c27 	tsteq	r1, r7, lsr #24
     92c:	0a400112 	beq	1000d7c <__ccfg+0xfe0dd4>
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     930:	054f0000 	strbeq	r0, [pc, #-0]	; 938 <root+0x2f0>
     934:	3a080300 	bcc	20153c <__ccfg+0x1e1594>
		ser_in(get_record_to_create, user_provided_record, 20);
     938:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     93c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     940:	5000000a 	andpl	r0, r0, sl
     944:	0e03012e 	adfeqsp	f0, f3, #0.5
     948:	0b3b0b3a 	bleq	ec3638 <__ccfg+0xea3690>
		create_message->gid = node_db->gid;
     94c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		create_message->tpe = CREATE_RECORD;
     950:	13010b20 	movwne	r0, #6944	; 0x1b20
		create_message->request_number = generate_request_num();
     954:	05510000 	ldrbeq	r0, [r1, #-0]
     958:	3a080300 	bcc	201560 <__ccfg+0x1e15b8>
		strncpy(create_message->record, user_provided_record, 20);
     95c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     960:	0013490b 	andseq	r4, r3, fp, lsl #18
		create_message->receiver_id = user_provided_receiver_id;
     964:	012e5200 			; <UNDEFINED> instruction: 0x012e5200
		strncpy(create_message->record, user_provided_record, 20);
     968:	0b3a0e03 	bleq	e8417c <__ccfg+0xe641d4>
		create_message->receiver_id = user_provided_receiver_id;
     96c:	0b39053b 	bleq	e41e60 <__ccfg+0xe21eb8>
		strncpy(create_message->record, user_provided_record, 20);
     970:	0b200c27 	bleq	803a14 <__ccfg+0x7e3a6c>
		response_checker[0] = create_message->request_number;
     974:	00001301 	andeq	r1, r0, r1, lsl #6
     978:	03000553 	movweq	r0, #1363	; 0x553
		call sender(create_message, wait);
     97c:	3b0b3a0e 	blcc	2cf1bc <__ccfg+0x2af214>
     980:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     984:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
     988:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     98c:	0b3b0b3a 	bleq	ec367c <__ccfg+0xea36d4>
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     990:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     994:	00000b20 	andeq	r0, r0, r0, lsr #22
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
     998:	03012e55 	movweq	r2, #7765	; 0x1e55
     99c:	3b0b3a0e 	blcc	2cf1dc <__ccfg+0x2af234>
     9a0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9a4:	2013490c 	andscs	r4, r3, ip, lsl #18
     9a8:	0013010b 	andseq	r0, r3, fp, lsl #2
			strncpy(reason, "Error: improper node ID", 50);
     9ac:	002e5600 	eoreq	r5, lr, r0, lsl #12
     9b0:	0b3a0e03 	bleq	e841c4 <__ccfg+0xe6421c>
     9b4:	0b39053b 	bleq	e41ea8 <__ccfg+0xe21f00>
			proceed error;
     9b8:	0b200c27 	bleq	803a5c <__ccfg+0x7e3ab4>
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9bc:	2e570000 	cdpcs	0, 5, cr0, cr7, cr0, {0}
     9c0:	3a0e0300 	bcc	3815c8 <__ccfg+0x361620>
		ser_inf(get_index_for_delete, "%u", &user_provided_index);
     9c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     9cc:	000b2013 	andeq	r2, fp, r3, lsl r0
		if (user_provided_index < 0 || user_provided_index > 40){
     9d0:	002e5800 	eoreq	r5, lr, r0, lsl #16
     9d4:	0b3a0e03 	bleq	e841e8 <__ccfg+0xe64240>
			strncpy(reason, "Error: invalid index", 50);
     9d8:	0b39053b 	bleq	e41ecc <__ccfg+0xe21f24>
     9dc:	13490c27 	movtne	r0, #39975	; 0x9c27
			proceed error;
     9e0:	00000b20 	andeq	r0, r0, r0, lsr #22
     9e4:	31012e59 	tstcc	r1, r9, asr lr
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		delete_record->gid = node_db->gid;
     9ec:	000a4001 	andeq	r4, sl, r1
     9f0:	11010000 	mrsne	r0, (UNDEF: 1)
     9f4:	130e2501 	movwne	r2, #58625	; 0xe501
		delete_record->tpe = DELETE_RECORD;
     9f8:	1b0e030b 	blne	38162c <__ccfg+0x361684>
		delete_record->request_number = generate_request_num();
     9fc:	1106550e 	tstne	r6, lr, lsl #10
		delete_record->sender_id = node_db->id;
     a00:	00061001 	andeq	r1, r6, r1
     a04:	00240200 	eoreq	r0, r4, r0, lsl #4
		delete_record->receiver_id = user_provided_receiver_id;
     a08:	0b3e0b0b 	bleq	f8363c <__ccfg+0xf63694>
     a0c:	00000e03 	andeq	r0, r0, r3, lsl #28
		delete_record->record_index = user_provided_index;
     a10:	03001603 	movweq	r1, #1539	; 0x603
		response_checker[0] = delete_record->request_number;
     a14:	3b0b3a0e 	blcc	2cf254 <__ccfg+0x2af2ac>
		response_checker[1] = delete_record->tpe;
     a18:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     a1c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		call sender(delete_record, wait);
     a20:	0b0b0024 	bleq	2c0ab8 <__ccfg+0x2a0b10>
     a24:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     a28:	13050000 	movwne	r0, #20480	; 0x5000
     a2c:	0b0e0301 	bleq	381638 <__ccfg+0x361690>
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a30:	3b0b3a0b 	blcc	2cf264 <__ccfg+0x2af2bc>
     a34:	0013010b 	andseq	r0, r3, fp, lsl #2
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
     a38:	000d0600 	andeq	r0, sp, r0, lsl #12
     a3c:	13490e03 	movtne	r0, #40451	; 0x9e03
     a40:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     a44:	0f070000 	svceq	0x00070000
     a48:	000b0b00 	andeq	r0, fp, r0, lsl #22
			strncpy(reason, "Error: improper node ID", 50);
     a4c:	00260800 	eoreq	r0, r6, r0, lsl #16
     a50:	00001349 	andeq	r1, r0, r9, asr #6
			proceed error;
     a54:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
     a58:	0a000013 	beq	aac <root+0x464>
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a5c:	0b0b000f 	bleq	2c0aa0 <__ccfg+0x2a0af8>
     a60:	00001349 	andeq	r1, r0, r9, asr #6
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
     a64:	0b01130b 	bleq	45698 <__ccfg+0x256f0>
     a68:	3b0b3a0b 	blcc	2cf29c <__ccfg+0x2af2f4>
     a6c:	010b390b 	tsteq	fp, fp, lsl #18
		if (user_provided_index < 0 || user_provided_index > 40){
     a70:	0c000013 	stceq	0, cr0, [r0], {19}
			strncpy(reason, "Error: invalid index", 50);
     a74:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a78:	0b3b0b3a 	bleq	ec3768 <__ccfg+0xea37c0>
     a7c:	13490b39 	movtne	r0, #39737	; 0x9b39
			proceed error;
     a80:	0b0d0b0b 	bleq	3436b4 <__ccfg+0x32370c>
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a84:	0b380b0c 	bleq	e036bc <__ccfg+0xde3714>
     a88:	0d0d0000 	stceq	0, cr0, [sp, #-0]
		retrieve_record->gid = node_db->gid;
     a8c:	3a0e0300 	bcc	381694 <__ccfg+0x3616ec>
     a90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a94:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		retrieve_record->tpe = RETRIEVE_RECORD;
     a98:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
		retrieve_record->request_number = generate_request_num();
     a9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     aa0:	0b3b0b3a 	bleq	ec3790 <__ccfg+0xea37e8>
		retrieve_record->sender_id = node_db->id;
     aa4:	13490b39 	movtne	r0, #39737	; 0x9b39
		response_checker[0] = retrieve_record->request_number;
     aa8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		retrieve_record->receiver_id = user_provided_receiver_id;
     aac:	010f0000 	mrseq	r0, CPSR
     ab0:	01134901 	tsteq	r3, r1, lsl #18
		retrieve_record->record_index = user_provided_index;
     ab4:	10000013 	andne	r0, r0, r3, lsl r0
     ab8:	00000021 	andeq	r0, r0, r1, lsr #32
		response_checker[0] = retrieve_record->request_number;
     abc:	03001611 	movweq	r1, #1553	; 0x611
		call sender(&retrieve_record, wait);
     ac0:	3b0b3a0e 	blcc	2cf300 <__ccfg+0x2af358>
     ac4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ac8:	12000013 	andne	r0, r0, #19
     acc:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     ad0:	00001301 	andeq	r1, r0, r1, lsl #6
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad4:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
     ad8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
		if(node_db->data_base.item_count != 0){
     adc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ae0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ae4:	13490b39 	movtne	r0, #39737	; 0x9b39
		ser_out(loop_through_data, "\r\n");
     ae8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     aec:	13150000 	tstne	r5, #0
		proceed menu;
     af0:	3a0b0b01 	bcc	2c36fc <__ccfg+0x2a3754>
		delete_all(node_db);
     af4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     af8:	0013010b 	andseq	r0, r3, fp, lsl #2
		proceed menu;
     afc:	000d1600 	andeq	r1, sp, r0, lsl #12
     b00:	0b3a0e03 	bleq	e84314 <__ccfg+0xe6436c>
		delay(3000, timeout);
     b04:	0b39053b 	bleq	e41ff8 <__ccfg+0xe22050>
     b08:	0b381349 	bleq	e05834 <__ccfg+0xde588c>
		when(&response_flag, menu);
     b0c:	13170000 	tstne	r7, #0
     b10:	0b0e0301 	bleq	38171c <__ccfg+0x361774>
		release;
     b14:	3b0b3a0b 	blcc	2cf348 <__ccfg+0x2af3a0>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b18:	010b3905 	tsteq	fp, r5, lsl #18
     b1c:	18000013 	stmdane	r0, {r0, r1, r4}
     b20:	13490021 	movtne	r0, #36897	; 0x9021
     b24:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b28:	27011519 	smladcs	r1, r9, r5, r1
     b2c:	0113490c 	tsteq	r3, ip, lsl #18
     b30:	1a000013 	bne	b84 <root+0x53c>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b34:	13470034 	movtne	r0, #28724	; 0x7034
     b38:	0b3b0b3a 	bleq	ec3828 <__ccfg+0xea3880>
     b3c:	0a020b39 	beq	83828 <__ccfg+0x63880>
     b40:	341b0000 	ldrcc	r0, [fp], #-0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b44:	3a0e0300 	bcc	38174c <__ccfg+0x3617a4>
		ser_out(timeout, "\r\nFailed to reach the destination");
     b48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b4c:	3f13490b 	svccc	0x0013490b
		proceed menu;
     b50:	000a020c 	andeq	r0, sl, ip, lsl #4
     b54:	00341c00 	eorseq	r1, r4, r0, lsl #24
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b58:	0b3a0e03 	bleq	e8436c <__ccfg+0xe643c4>
     b5c:	0b390b3b 	bleq	e43850 <__ccfg+0xe238a8>
		proceed menu;
     b60:	0a021349 	beq	8588c <__ccfg+0x658e4>
     b64:	341d0000 	ldrcc	r0, [sp], #-0
}
     b68:	3a0e0300 	bcc	381770 <__ccfg+0x3617c8>
     b6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b74:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     b78:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; ac8 <root+0x480>
     b7c:	0b3a0e03 	bleq	e84390 <__ccfg+0xe643e8>
     b80:	0b39053b 	bleq	e42074 <__ccfg+0xe220cc>
     b84:	13490c27 	movtne	r0, #39975	; 0x9c27
     b88:	01120111 	tsteq	r2, r1, lsl r1
     b8c:	00000a40 	andeq	r0, r0, r0, asr #20
     b90:	3f012e1f 	svccc	0x00012e1f
     b94:	3a0e030c 	bcc	3817cc <__ccfg+0x361824>
     b98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b9c:	110c270b 	tstne	ip, fp, lsl #14
     ba0:	40011201 	andmi	r1, r1, r1, lsl #4
     ba4:	0013010a 	andseq	r0, r3, sl, lsl #2
     ba8:	00052000 	andeq	r2, r5, r0
     bac:	0b3a0e03 	bleq	e843c0 <__ccfg+0xe64418>
     bb0:	0b39053b 	bleq	e420a4 <__ccfg+0xe220fc>
     bb4:	06021349 	streq	r1, [r2], -r9, asr #6
     bb8:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
     bbc:	22000000 	andcs	r0, r0, #0
     bc0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     bc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
static void devinit_uart (int devnum) {
     bc8:	13490b39 	movtne	r0, #39737	; 0x9b39
	adddevfunc (ioreq_uart_a, devnum);
     bcc:	00000602 	andeq	r0, r0, r2, lsl #12
     bd0:	03003423 	movweq	r3, #1059	; 0x423
void udelay (volatile word n) {
     bd4:	3b0b3a08 	blcc	2cf3fc <__ccfg+0x2af454>
     bd8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	while (n) {
     bdc:	000a0213 	andeq	r0, sl, r3, lsl r2
     be0:	00342400 	eorseq	r2, r4, r0, lsl #8
}
     be4:	0b3a0803 	bleq	e82bf8 <__ccfg+0xe62c50>
	while (n--);
     be8:	0b39053b 	bleq	e420dc <__ccfg+0xe22134>
     bec:	00001349 	andeq	r1, r0, r9, asr #6
     bf0:	03000a25 	movweq	r0, #2597	; 0xa25
		n--;
     bf4:	3b0b3a0e 	blcc	2cf434 <__ccfg+0x2af48c>
     bf8:	110b3905 	tstne	fp, r5, lsl #18
     bfc:	26000001 	strcs	r0, [r0], -r1
void mdelay (volatile word n) {
     c00:	0111010b 	tsteq	r1, fp, lsl #2
     c04:	13010112 	movwne	r0, #4370	; 0x1112
	while (n) {
     c08:	0b270000 	bleq	9c0c10 <__ccfg+0x9a0c68>
     c0c:	01065501 	tsteq	r6, r1, lsl #10
}
     c10:	28000013 	stmdacs	r0, {r0, r1, r4}
		udelay (999);
     c14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c18:	06550152 			; <UNDEFINED> instruction: 0x06550152
		n--;
     c1c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     c20:	00000b57 	andeq	r0, r0, r7, asr fp
     c24:	31000529 	tstcc	r0, r9, lsr #10
     c28:	2a000013 	bcs	c7c <__pi_offdomain+0x14>
void __pi_ondomain (lword d) {
     c2c:	0e03012e 	adfeqsp	f0, f3, #0.5
     c30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (__pi_systat.effpdm > 1)
     c34:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     c38:	01120111 	tsteq	r2, r1, lsl r1
			__pi_systat.effpdm = 1;
     c3c:	13010a40 	movwne	r0, #6720	; 0x1a40
	PRCMPowerDomainOn (d);
     c40:	052b0000 	streq	r0, [fp, #-0]!
     c44:	3a080300 	bcc	20184c <__ccfg+0x1e18a4>
     c48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c50:	2c000006 	stccs	0, cr0, [r0], {6}
     c54:	0c3f012e 	ldfeqs	f0, [pc], #-184	; ba4 <root+0x55c>
	__pi_systat.ondmns |= d;
     c58:	0b3a0e03 	bleq	e8446c <__ccfg+0xe644c4>
     c5c:	0b39053b 	bleq	e42150 <__ccfg+0xe221a8>
}
     c60:	13490c27 	movtne	r0, #39975	; 0x9c27
     c64:	01120111 	tsteq	r2, r1, lsl r1
void __pi_offdomain (lword d) {
     c68:	13010a40 	movwne	r0, #6720	; 0x1a40
     c6c:	342d0000 	strtcc	r0, [sp], #-0
	PRCMPowerDomainOff (d);
     c70:	3a0e0300 	bcc	381878 <__ccfg+0x3618d0>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     c74:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c7c:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
	if (d & PRCM_DOMAIN_RFCORE) {
     c80:	0c3f012e 	ldfeqs	f0, [pc], #-184	; bd0 <devinit_uart+0x8>
     c84:	0b3a0e03 	bleq	e84498 <__ccfg+0xe644f0>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     c88:	0b39053b 	bleq	e4217c <__ccfg+0xe221d4>
     c8c:	0b200c27 	bleq	803d30 <__ccfg+0x7e3d88>
			__pi_systat.effpdm = __pi_systat.reqpdm;
     c90:	00001301 	andeq	r1, r0, r1, lsl #6
     c94:	0300052f 	movweq	r0, #1327	; 0x52f
	__pi_systat.ondmns &= ~d;
     c98:	3b0b3a08 	blcc	2cf4c0 <__ccfg+0x2af518>
     c9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
     ca0:	30000013 	andcc	r0, r0, r3, lsl r0
     ca4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; bf4 <udelay+0x20>
void __pi_syserror (word ec, const char *m) {
     ca8:	0b3a0e03 	bleq	e844bc <__ccfg+0xe64514>
	diag ("SYSERR: %x, %s", ec, m);
     cac:	0b39053b 	bleq	e421a0 <__ccfg+0xe221f8>
     cb0:	01120111 	tsteq	r2, r1, lsl r1
  __ASM volatile ("cpsid i" : : : "memory");
     cb4:	13010a40 	movwne	r0, #6720	; 0x1a40
     cb8:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
     cbc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     cc0:	3b0b3a08 	blcc	2cf4e8 <__ccfg+0x2af540>
		all_leds_blink;
     cc4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     cc8:	1113490c 	tstne	r3, ip, lsl #18
     ccc:	40011201 	andmi	r1, r1, r1, lsl #4
     cd0:	0013010a 	andseq	r0, r3, sl, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     cd4:	00053200 	andeq	r3, r5, r0, lsl #4
     cd8:	0b3a0803 	bleq	e82cec <__ccfg+0xe62d44>
     cdc:	0b39053b 	bleq	e421d0 <__ccfg+0xe22228>
     ce0:	0a021349 	beq	85a0c <__ccfg+0x65a64>
     ce4:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
     ce8:	030c3f00 	movweq	r3, #52992	; 0xcf00
	while (1) {
     cec:	3b0b3a0e 	blcc	2cf52c <__ccfg+0x2af584>
     cf0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     cf4:	1201110c 	andne	r1, r1, #12, 2
     cf8:	000a4001 	andeq	r4, sl, r1
void tci_run_delay_timer () {
     cfc:	00053400 	andeq	r3, r5, r0, lsl #8
	setdel = __pi_mintk - __pi_old;
     d00:	0b3a0e03 	bleq	e84514 <__ccfg+0xe6456c>
     d04:	0b39053b 	bleq	e421f8 <__ccfg+0xe22250>
     d08:	0a021349 	beq	85a34 <__ccfg+0x65a8c>
     d0c:	05350000 	ldreq	r0, [r5, #-0]!
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d10:	3a0e0300 	bcc	381918 <__ccfg+0x361970>
     d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d18:	0013490b 	andseq	r4, r3, fp, lsl #18
     d1c:	010b3600 	tsteq	fp, r0, lsl #12
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d20:	00000655 	andeq	r0, r0, r5, asr r6
	sti_tim;
     d24:	3f012e37 	svccc	0x00012e37
}
     d28:	3a0e030c 	bcc	381960 <__ccfg+0x3619b8>
     d2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d30:	200c270b 	andcs	r2, ip, fp, lsl #14
     d34:	0013010b 	andseq	r0, r3, fp, lsl #2
     d38:	00053800 	andeq	r3, r5, r0, lsl #16
	cli_aux;
     d3c:	0b3a0803 	bleq	e82d50 <__ccfg+0xe62da8>
     d40:	0b390b3b 	bleq	e43a34 <__ccfg+0xe23a8c>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	00001349 	andeq	r1, r0, r9, asr #6
     d48:	03000539 	movweq	r0, #1337	; 0x539
     d4c:	3b0b3a0e 	blcc	2cf58c <__ccfg+0x2af5e4>
     d50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	sti_aux;
     d54:	3a000013 	bcc	da8 <AONRTCIntHandler+0x44>
}
     d58:	08030034 	stmdaeq	r3, {r2, r4, r5}
     d5c:	0b3b0b3a 	bleq	ec3a4c <__ccfg+0xea3aa4>
     d60:	13490b39 	movtne	r0, #39737	; 0x9b39
void AONRTCIntHandler () {
     d64:	0a3b0000 	beq	ec0d6c <__ccfg+0xea0dc4>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d68:	3a080300 	bcc	201970 <__ccfg+0x1e19c8>
     d6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     d70:	3c00000b 	stccc	0, cr0, [r0], {11}
		if (__pi_utims [0] == 0)
     d74:	0c3f012e 	ldfeqs	f0, [pc], #-184	; cc4 <__pi_syserror+0x1c>
     d78:	0b3a0e03 	bleq	e8458c <__ccfg+0xe645e4>
		if (*(__pi_utims [0])) {
     d7c:	0b390b3b 	bleq	e43a70 <__ccfg+0xe23ac8>
     d80:	01110c27 	tsteq	r1, r7, lsr #24
			(*(__pi_utims [0]))--;
     d84:	0a400112 	beq	10011d4 <__ccfg+0xfe122c>
		if (__pi_utims [1] == 0)
     d88:	00001301 	andeq	r1, r0, r1, lsl #6
		if (*(__pi_utims [1])) {
     d8c:	0300053d 	movweq	r0, #1341	; 0x53d
			aux_timer_inactive = 0;
     d90:	3b0b3a08 	blcc	2cf5b8 <__ccfg+0x2af610>
			(*(__pi_utims [1]))--;
     d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (__pi_utims [2] == 0)
     d98:	00060213 	andeq	r0, r6, r3, lsl r2
		if (*(__pi_utims [2])) {
     d9c:	00343e00 	eorseq	r3, r4, r0, lsl #28
			(*(__pi_utims [2]))--;
     da0:	0b3a0803 	bleq	e82db4 <__ccfg+0xe62e0c>
		if (__pi_utims [3] != 0) {
     da4:	0b390b3b 	bleq	e43a98 <__ccfg+0xe23af0>
			if (*(__pi_utims [3])) {
     da8:	06021349 	streq	r1, [r2], -r9, asr #6
				aux_timer_inactive = 0;
     dac:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
				(*(__pi_utims [3]))--;
     db0:	030c3f00 	movweq	r3, #52992	; 0xcf00
	if (__pi_systat.ledsts) {
     db4:	3b0b3a0e 	blcc	2cf5f4 <__ccfg+0x2af64c>
     db8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		if (__pi_systat.ledblc++ == 0) {
     dbc:	1201110c 	andne	r1, r1, #12, 2
     dc0:	000a4001 	andeq	r4, sl, r1
			if (__pi_systat.ledblk) {
     dc4:	012e4000 			; <UNDEFINED> instruction: 0x012e4000
     dc8:	0b3a0e03 	bleq	e845dc <__ccfg+0xe64634>
     dcc:	0b390b3b 	bleq	e43ac0 <__ccfg+0xe23b18>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd0:	13490c27 	movtne	r0, #39975	; 0x9c27
     dd4:	13010b20 	movwne	r0, #6944	; 0x1b20
				if (__pi_systat.ledsts & 0x2)
     dd8:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     ddc:	3a0e0301 	bcc	3819e8 <__ccfg+0x361a40>
     de0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (__pi_systat.ledsts & 0x4)
     de4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
				__pi_systat.ledblk = 0;
     de8:	010b2013 	tsteq	fp, r3, lsl r0
     dec:	42000013 	andmi	r0, r0, #19
			if (__pi_systat.fstblk)
     df0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     df4:	01120111 	tsteq	r2, r1, lsl r1
				__pi_systat.ledblc = 200;
     df8:	13010a40 	movwne	r0, #6720	; 0x1a40
	if (events & AON_RTC_EVFLAGS_CH0) {
     dfc:	05430000 	strbeq	r0, [r3, #-0]
		cli_tim;
     e00:	02133100 	andseq	r3, r3, #0, 2
		__pi_new += setdel;
     e04:	44000006 	strmi	r0, [r0], #-6
     e08:	13310034 	teqne	r1, #52	; 0x34
		setdel = 0;
     e0c:	00000602 	andeq	r0, r0, r2, lsl #12
		RISE_N_SHINE;
     e10:	31011d45 	tstcc	r1, r5, asr #26
		__pi_new += setdel;
     e14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		RISE_N_SHINE;
     e18:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     e1c:	000b570b 	andeq	r5, fp, fp, lsl #14
		aux_timer_inactive = 1;
     e20:	00344600 	eorseq	r4, r4, r0, lsl #12
     e24:	00001331 	andeq	r1, r0, r1, lsr r3
				if (__pi_systat.ledsts & 0x1)
     e28:	31011d47 	tstcc	r1, r7, asr #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e2c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     e30:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
				if (__pi_systat.ledsts & 0x2)
     e34:	000b570b 	andeq	r5, fp, fp, lsl #14
     e38:	000a4800 	andeq	r4, sl, r0, lsl #16
     e3c:	01111331 	tsteq	r1, r1, lsr r3
				if (__pi_systat.ledsts & 0x8)
     e40:	1d490000 	stclne	0, cr0, [r9, #-0]
				__pi_systat.ledblk = 1;
     e44:	11133101 	tstne	r3, r1, lsl #2
     e48:	58011201 	stmdapl	r1, {r0, r9, ip}
		if (aux_timer_inactive) {
     e4c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			cli_aux;
     e50:	4a00000b 	bmi	e84 <tci_update_delay_ticks+0xc>
     e54:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     e58:	01120111 	tsteq	r2, r1, lsl r1
     e5c:	00000a40 	andeq	r0, r0, r0, asr #20
     e60:	01110100 	tsteq	r1, r0, lsl #2
     e64:	0b130e25 	bleq	4c4700 <__ccfg+0x4a4758>
     e68:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e6c:	01110655 	tsteq	r1, r5, asr r6
     e70:	00000610 	andeq	r0, r0, r0, lsl r6
     e74:	0b002402 	bleq	9e84 <__exidx_end+0x4284>
word tci_update_delay_ticks (Boolean force) {
     e78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	cli_tim;
     e7c:	0300000e 	movweq	r0, #14
     e80:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	if (setdel) {
     e84:	0b3b0b3a 	bleq	ec3b74 <__ccfg+0xea3bcc>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e88:	13490b39 	movtne	r0, #39737	; 0x9b39
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     e8c:	24040000 	strcs	r0, [r4], #-0
     e90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e94:	0008030b 	andeq	r0, r8, fp, lsl #6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e98:	01130500 	tsteq	r3, r0, lsl #10
				AON_RTC_O_CH0CMP)) - gettav ());
     e9c:	0b0b0e03 	bleq	2c46b0 <__ccfg+0x2a4708>
	return NO;
     ea0:	0b3b0b3a 	bleq	ec3b90 <__ccfg+0xea3be8>
			setdel = 0;
     ea4:	00001301 	andeq	r1, r0, r1, lsl #6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ea8:	03000d06 	movweq	r0, #3334	; 0xd06
     eac:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
}
     eb0:	000c340b 	andeq	r3, ip, fp, lsl #8
		sti_tim;
     eb4:	000f0700 	andeq	r0, pc, r0, lsl #14
		return YES;
     eb8:	00000b0b 	andeq	r0, r0, fp, lsl #22
     ebc:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
     ec0:	09000013 	stmdbeq	r0, {r0, r1, r4}
     ec4:	13490035 	movtne	r0, #36917	; 0x9035
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ec8:	0f0a0000 	svceq	0x000a0000
	UARTDisable (UART0_BASE);
     ecc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ed0:	0b000013 	bleq	f24 <reinit_uart+0x8>
	UARTDisable (UART0_BASE);
     ed4:	0b0b0113 	bleq	2c1328 <__ccfg+0x2a1380>
	UARTConfigSetExpClk (UART0_BASE,
     ed8:	0b3b0b3a 	bleq	ec3bc8 <__ccfg+0xea3c20>
     edc:	13010b39 	movwne	r0, #6969	; 0x1b39
     ee0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     ee4:	3a0e0300 	bcc	381aec <__ccfg+0x361b44>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     ee8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     eec:	0b13490b 	bleq	4d3320 <__ccfg+0x4b3378>
     ef0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     ef4:	000b380b 	andeq	r3, fp, fp, lsl #16
     ef8:	000d0d00 	andeq	r0, sp, r0, lsl #26
     efc:	0b3a0e03 	bleq	e84710 <__ccfg+0xe64768>
	urates [0] = rate;
     f00:	0b390b3b 	bleq	e43bf4 <__ccfg+0xe23c4c>
}
     f04:	0b381349 	bleq	e05c30 <__ccfg+0xde5c88>
     f08:	340e0000 	strcc	r0, [lr], #-0
     f0c:	3a0e0300 	bcc	381b14 <__ccfg+0x361b6c>
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f14:	3f13490b 	svccc	0x0013490b
     f18:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	01010f00 	tsteq	r1, r0, lsl #30
     f20:	13011349 	movwne	r1, #4937	; 0x1349
     f24:	21100000 	tstcs	r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f28:	11000000 	mrsne	r0, (UNDEF: 0)
     f2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f34:	13490b39 	movtne	r0, #39737	; 0x9b39
	__pi_uart_setrate (urates [0], __pi_uart);
     f38:	15120000 	ldrne	r0, [r2, #-0]
     f3c:	010c2701 	tsteq	ip, r1, lsl #14
     f40:	13000013 	movwne	r0, #19
     f44:	13490005 	movtne	r0, #36869	; 0x9005
     f48:	34140000 	ldrcc	r0, [r4], #-0
     f4c:	3a0e0300 	bcc	381b54 <__ccfg+0x361bac>
     f50:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	switch (operation) {
     f54:	3f13490b 	svccc	0x0013490b
static int ioreq_uart_a (int operation, char *buf, int len) {
     f58:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     f5c:	01151500 	tsteq	r5, r0, lsl #10
     f60:	13490c27 	movtne	r0, #39975	; 0x9c27
     f64:	00001301 	andeq	r1, r0, r1, lsl #6
     f68:	03011316 	movweq	r1, #4886	; 0x1316
				*buf++ = uart_a_read;
     f6c:	3a0b0b0e 	bcc	2c3bac <__ccfg+0x2a3c04>
     f70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (len && uart_a_char_available) {
     f74:	0013010b 	andseq	r0, r3, fp, lsl #2
     f78:	01171700 	tsteq	r7, r0, lsl #14
     f7c:	0b3a0b0b 	bleq	e83bb0 <__ccfg+0xe63c08>
			if (len != operation) {
     f80:	0b390b3b 	bleq	e43c74 <__ccfg+0xe23ccc>
}
     f84:	00001301 	andeq	r1, r0, r1, lsl #6
     f88:	03000d18 	movweq	r0, #3352	; 0xd18
			uart_a_disable_int;
     f8c:	3b0b3a0e 	blcc	2cf7cc <__ccfg+0x2af824>
			if (uart_a_char_available) {
     f90:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				*buf++ = uart_a_read;
     f94:	19000013 	stmdbne	r0, {r0, r1, r4}
			uart_a_disable_int;
     f98:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     f9c:	0b3b0b3a 	bleq	ec3c8c <__ccfg+0xea3ce4>
			if (uart_a_char_available) {
     fa0:	13490b39 	movtne	r0, #39737	; 0x9b39
     fa4:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
				uart_a_enable_int;
     fa8:	3a080300 	bcc	201bb0 <__ccfg+0x1e1c08>
     fac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				goto Redo_rx;
     fb0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fb4:	1b00000b 	blne	fe8 <ioreq_uart_a+0x94>
     fb8:	0b0b0113 	bleq	2c140c <__ccfg+0x2a1464>
			return -2;
     fbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fc0:	13010b39 	movwne	r0, #6969	; 0x1b39
				uart_a_write (*buf);
     fc4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     fc8:	3a0e0300 	bcc	381bd0 <__ccfg+0x361c28>
			while (len && uart_a_room_in_tx) {
     fcc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fd0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     fd4:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
			if (len != operation) {
     fd8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			uart_a_disable_int;
     fdc:	0b3a0b0b 	bleq	e83c10 <__ccfg+0xe63c68>
     fe0:	0b39053b 	bleq	e424d4 <__ccfg+0xe2252c>
			if (uart_a_room_in_tx) {
     fe4:	00001301 	andeq	r1, r0, r1, lsl #6
     fe8:	4900211e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sp}
				uart_a_enable_int;
     fec:	000b2f13 	andeq	r2, fp, r3, lsl pc
     ff0:	00341f00 	eorseq	r1, r4, r0, lsl #30
				*buf++ = uart_a_read;
     ff4:	0b3a0e03 	bleq	e84808 <__ccfg+0xe64860>
			if (uart_a_room_in_tx) {
     ff8:	0b390b3b 	bleq	e43cec <__ccfg+0xe23d44>
				uart_a_write (*buf);
     ffc:	0a021349 	beq	85d28 <__ccfg+0x65d80>
    1000:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1004:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1008:	3b0b3a0e 	blcc	2cf848 <__ccfg+0x2af8a0>
			uart_a_enable_int;
    100c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1010:	1201110c 	andne	r1, r1, #12, 2
    1014:	000a4001 	andeq	r4, sl, r1
			return 0;
    1018:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
			if (len == UART_CNTRL_SETRATE) {
    101c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				if (__pi_uart_setrate (*((word*)buf),
    1020:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1024:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1028:	01111349 	tsteq	r1, r9, asr #6
				syserror (EREQPAR, "uar");
    102c:	0a400112 	beq	100147c <__ccfg+0xfe14d4>
			syserror (ENOOPER, "uai");
    1030:	00001301 	andeq	r1, r0, r1, lsl #6
			if (len == UART_CNTRL_GETRATE) {
    1034:	03000522 	movweq	r0, #1314	; 0x522
				return 1;
    1038:	3b0b3a08 	blcc	2cf860 <__ccfg+0x2af8b8>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    103c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			syserror (ENOOPER, "uai");
    1040:	00060213 	andeq	r0, r6, r3, lsl r2
    1044:	011d2300 	tsteq	sp, r0, lsl #6
    1048:	01521331 	cmpeq	r2, r1, lsr r3
    104c:	0b580655 	bleq	16029a8 <__ccfg+0x15e2a00>
    1050:	0b570559 	bleq	15c25bc <__ccfg+0x15a2614>
    1054:	05240000 	streq	r0, [r4, #-0]!
    1058:	02133100 	andseq	r3, r3, #0, 2
    105c:	25000006 	strcs	r0, [r0, #-6]
    1060:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1064:	34260000 	strtcc	r0, [r6], #-0
void UART0IntHandler () {
    1068:	02133100 	andseq	r3, r3, #0, 2
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    106c:	27000006 	strcs	r0, [r0, -r6]
    1070:	0c3f012e 	ldfeqs	f0, [pc], #-184	; fc0 <ioreq_uart_a+0x6c>
    1074:	0b3a0e03 	bleq	e84888 <__ccfg+0xe648e0>
    1078:	0b39053b 	bleq	e4256c <__ccfg+0xe225c4>
    107c:	01110c27 	tsteq	r1, r7, lsr #24
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    1080:	0a400112 	beq	10014d0 <__ccfg+0xfe1528>
    1084:	00001301 	andeq	r1, r0, r1, lsl #6
		RISE_N_SHINE;
    1088:	03003428 	movweq	r3, #1064	; 0x428
    108c:	3b0b3a08 	blcc	2cf8b4 <__ccfg+0x2af90c>
		i_trigger (devevent (UART_A, READ));
    1090:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1094:	00060213 	andeq	r0, r6, r3, lsl r2
    1098:	00342900 	eorseq	r2, r4, r0, lsl #18
    109c:	0b3a0803 	bleq	e830b0 <__ccfg+0xe63108>
    10a0:	0b39053b 	bleq	e42594 <__ccfg+0xe225ec>
    10a4:	00001349 	andeq	r1, r0, r9, asr #6
    10a8:	0300342a 	movweq	r3, #1066	; 0x42a
    10ac:	3b0b3a08 	blcc	2cf8d4 <__ccfg+0x2af92c>
    10b0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    10b4:	000a0213 	andeq	r0, sl, r3, lsl r2
    10b8:	00052b00 	andeq	r2, r5, r0, lsl #22
    10bc:	0b3a0e03 	bleq	e848d0 <__ccfg+0xe64928>
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10c0:	0b39053b 	bleq	e425b4 <__ccfg+0xe2260c>
    10c4:	06021349 	streq	r1, [r2], -r9, asr #6
    10c8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
		i_trigger (devevent (UART_A, WRITE));
    10cc:	030c3f01 	movweq	r3, #52993	; 0xcf01
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    10d0:	3b0b3a0e 	blcc	2cf910 <__ccfg+0x2af968>
    10d4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		RISE_N_SHINE;
    10d8:	2013490c 	andscs	r4, r3, ip, lsl #18
    10dc:	0013010b 	andseq	r0, r3, fp, lsl #2
    10e0:	00052d00 	andeq	r2, r5, r0, lsl #26
		i_trigger (devevent (UART_A, WRITE));
    10e4:	0b3a0e03 	bleq	e848f8 <__ccfg+0xe64950>
    10e8:	0b39053b 	bleq	e425dc <__ccfg+0xe22634>
    10ec:	00001349 	andeq	r1, r0, r9, asr #6
    10f0:	0300052e 	movweq	r0, #1326	; 0x52e
    10f4:	3b0b3a08 	blcc	2cf91c <__ccfg+0x2af974>
    10f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    10fc:	2f000013 	svccs	0x00000013
    1100:	0111010b 	tsteq	r1, fp, lsl #2
    1104:	00000112 	andeq	r0, r0, r2, lsl r1
    1108:	03003430 	movweq	r3, #1072	; 0x430
    110c:	3b0b3a0e 	blcc	2cf94c <__ccfg+0x2af9a4>
}
    1110:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1114:	000a0213 	andeq	r0, sl, r3, lsl r2
    1118:	000a3100 	andeq	r3, sl, r0, lsl #2
    111c:	0b3a0e03 	bleq	e84930 <__ccfg+0xe64988>
    1120:	0b39053b 	bleq	e42614 <__ccfg+0xe2266c>
void __buttons_setirq (int val) {
    1124:	00000111 	andeq	r0, r0, r1, lsl r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1128:	31011d32 	tstcc	r1, r2, lsr sp
    112c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1130:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1134:	000b5705 	andeq	r5, fp, r5, lsl #14
    1138:	00053300 	andeq	r3, r5, r0, lsl #6
		bn = BUTTON_GPIO (__button_list [i]);
    113c:	00001331 	andeq	r1, r0, r1, lsr r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1140:	03000534 	movweq	r0, #1332	; 0x534
    1144:	3b0b3a08 	blcc	2cf96c <__ccfg+0x2af9c4>
    1148:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    114c:	000a0213 	andeq	r0, sl, r3, lsl r2
    1150:	00183500 	andseq	r3, r8, r0, lsl #10
    1154:	34360000 	ldrtcc	r0, [r6], #-0
}
    1158:	3a0e0300 	bcc	381d60 <__ccfg+0x361db8>
    115c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1160:	0013490b 	andseq	r4, r3, fp, lsl #18
    1164:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
void __pinlist_setirq (int val) {
    1168:	0b3a0803 	bleq	e8317c <__ccfg+0xe631d4>
	for (i = 0; i < N_PINLIST; i++) {
    116c:	0b39053b 	bleq	e42660 <__ccfg+0xe226b8>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1170:	13490c27 	movtne	r0, #39975	; 0x9c27
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	01120111 	tsteq	r2, r1, lsl r1
	for (i = 0; i < N_PINLIST; i++) {
    1178:	13010a40 	movwne	r0, #6720	; 0x1a40
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    117c:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    1180:	3a080301 	bcc	201d8c <__ccfg+0x1e1de4>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1184:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1188:	110c270b 	tstne	ip, fp, lsl #14
    118c:	40011201 	andmi	r1, r1, r1, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
    1190:	0013010a 	andseq	r0, r3, sl, lsl #2
}
    1194:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
    1198:	0b3a0e03 	bleq	e849ac <__ccfg+0xe64a04>
    119c:	0b390b3b 	bleq	e43e90 <__ccfg+0xe23ee8>
    11a0:	0b200c27 	bleq	804244 <__ccfg+0x7e429c>
void GPIOIntHandler () {
    11a4:	00001301 	andeq	r1, r0, r1, lsl #6
if (buttons_int) {
    11a8:	0300053a 	movweq	r0, #1338	; 0x53a
    11ac:	3b0b3a08 	blcc	2cf9d4 <__ccfg+0x2afa2c>
	buttons_disable ();
    11b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    11b4:	3b000013 	blcc	1208 <GPIOIntHandler+0x64>
	i_trigger ((aword)&__button_list);
    11b8:	0e03012e 	adfeqsp	f0, f3, #0.5
    11bc:	0b3b0b3a 	bleq	ec3eac <__ccfg+0xea3f04>
    11c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    11c4:	0b201349 	bleq	805ef0 <__ccfg+0x7e5f48>
    11c8:	00001301 	andeq	r1, r0, r1, lsl #6
    11cc:	0300343c 	movweq	r3, #1084	; 0x43c
    11d0:	3b0b3a08 	blcc	2cf9f8 <__ccfg+0x2afa50>
    11d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    11d8:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
    11dc:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
    11e0:	0b3b0b3a 	bleq	ec3ed0 <__ccfg+0xea3f28>
	RISE_N_SHINE;
    11e4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    11e8:	13010b20 	movwne	r0, #6944	; 0x1b20
    11ec:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
if (pin_sensor_int) {
    11f0:	11133101 	tstne	r3, r1, lsl #2
    11f4:	40011201 	andmi	r1, r1, r1, lsl #4
	i_trigger ((aword)(&__input_pins));
    11f8:	0013010a 	andseq	r0, r3, sl, lsl #2
    11fc:	00053f00 	andeq	r3, r5, r0, lsl #30
    1200:	0a021331 	beq	85ecc <__ccfg+0x65f24>
    1204:	1d400000 	stclne	0, cr0, [r0, #-0]
    1208:	11133101 	tstne	r3, r1, lsl #2
    120c:	58011201 	stmdapl	r1, {r0, r9, ip}
    1210:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1214:	4100000b 	tstmi	r0, fp
    1218:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    121c:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1220:	0b590b58 	bleq	1643f88 <__ccfg+0x1623fe0>
	__pinsen_disable_and_clear;
    1224:	00000b57 	andeq	r0, r0, r7, asr fp
	RISE_N_SHINE;
    1228:	31012e42 	tstcc	r1, r2, asr #28
    122c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1230:	000a4001 	andeq	r4, sl, r1
}
    1234:	00344300 	eorseq	r4, r4, r0, lsl #6
    1238:	00001331 	andeq	r1, r0, r1, lsr r3
    123c:	01110100 	tsteq	r1, r0, lsl #2
    1240:	0b130e25 	bleq	4c4adc <__ccfg+0x4a4b34>
    1244:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
void system_init () {
    1248:	01110655 	tsteq	r1, r5, asr r6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    124c:	00000610 	andeq	r0, r0, r0, lsl r6
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1250:	0b002402 	bleq	a260 <__exidx_end+0x4660>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1258:	0300000e 	movweq	r0, #14
    125c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1260:	0b3b0b3a 	bleq	ec3f50 <__ccfg+0xea3fa8>
    1264:	13490b39 	movtne	r0, #39737	; 0x9b39
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1268:	24040000 	strcs	r0, [r4], #-0
    126c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1270:	0008030b 	andeq	r0, r8, fp, lsl #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1274:	000f0500 	andeq	r0, pc, r0, lsl #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1278:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    127c:	26060000 	strcs	r0, [r6], -r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1280:	00134900 	andseq	r4, r3, r0, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1284:	00150700 	andseq	r0, r5, r0, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1288:	00000c27 	andeq	r0, r0, r7, lsr #24
		pin = (port_confs [i] >> 19) & 0x1f;
    128c:	03003408 	movweq	r3, #1032	; 0x408
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1290:	3b0b3a0e 	blcc	2cfad0 <__ccfg+0x2afb28>
		pin = (port_confs [i] >> 19) & 0x1f;
    1294:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1298:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    129c:	0900000c 	stmdbeq	r0, {r2, r3}
    12a0:	13490101 	movtne	r0, #37121	; 0x9101
    12a4:	00001301 	andeq	r1, r0, r1, lsl #6
		if (port_confs [i] & 0x80)
    12a8:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ac:	000b2f13 	andeq	r2, fp, r3, lsl pc
    12b0:	00340b00 	eorseq	r0, r4, r0, lsl #22
		if (port_confs [i] & 0x40)
    12b4:	0b3a0e03 	bleq	e84ac8 <__ccfg+0xe64b20>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12b8:	0b390b3b 	bleq	e43fac <__ccfg+0xe24004>
    12bc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 11a0 <__pinlist_setirq+0x38>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12c0:	00000a02 	andeq	r0, r0, r2, lsl #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	03002e0c 	movweq	r2, #3596	; 0xe0c
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12c8:	3b0b3a0e 	blcc	2cfb08 <__ccfg+0x2afb60>
	all_leds_blink;
    12cc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    12d0:	1201110c 	andne	r1, r1, #12, 2
    12d4:	000a4001 	andeq	r4, sl, r1
    12d8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    12dc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    12e0:	0b3b0b3a 	bleq	ec3fd0 <__ccfg+0xea4028>
    12e4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12e8:	01120111 	tsteq	r2, r1, lsl r1
    12ec:	00000a40 	andeq	r0, r0, r0, asr #20
    12f0:	0300340e 	movweq	r3, #1038	; 0x40e
    12f4:	3b0b3a0e 	blcc	2cfb34 <__ccfg+0x2afb8c>
    12f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    12fc:	00060213 	andeq	r0, r6, r3, lsl r2
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1300:	11010000 	mrsne	r0, (UNDEF: 1)
    1304:	130e2501 	movwne	r2, #58625	; 0xe501
	IntEnable (INT_AON_RTC_COMB);
    1308:	1b0e030b 	blne	381f3c <__ccfg+0x361f94>
    130c:	0006100e 	andeq	r1, r6, lr
    1310:	00240200 	eoreq	r0, r4, r0, lsl #4
	__pi_malloc_init ();
    1314:	0b3e0b0b 	bleq	f83f48 <__ccfg+0xf63fa0>
	IntEnable (INT_AON_GPIO_EDGE);
    1318:	00000e03 	andeq	r0, r0, r3, lsl #28
    131c:	03001603 	movweq	r1, #1539	; 0x603
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1320:	3b0b3a0e 	blcc	2cfb60 <__ccfg+0x2afbb8>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1324:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1328:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    132c:	0b0b0024 	bleq	2c13c4 <__ccfg+0x2a141c>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1330:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1334:	13050000 	movwne	r0, #20480	; 0x5000
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1338:	3a0b0b01 	bcc	2c3f44 <__ccfg+0x2a3f9c>
    133c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1340:	0013010b 	andseq	r0, r3, fp, lsl #2
	urates [0] = UART_RATE / 100;
    1344:	000d0600 	andeq	r0, sp, r0, lsl #12
    1348:	0b3a0e03 	bleq	e84b5c <__ccfg+0xe64bb4>
	reinit_uart ();
    134c:	0b390b3b 	bleq	e44040 <__ccfg+0xe24098>
	EXTRA_INITIALIZERS;
    1350:	0b381349 	bleq	e0607c <__ccfg+0xde60d4>
    1354:	26070000 	strcs	r0, [r7], -r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1358:	00134900 	andseq	r4, r3, r0, lsl #18
    135c:	00340800 	eorseq	r0, r4, r0, lsl #16
    1360:	0b3a0e03 	bleq	e84b74 <__ccfg+0xe64bcc>
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1364:	0b390b3b 	bleq	e44058 <__ccfg+0xe240b0>
    1368:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 124c <system_init+0x4>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    136c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1370:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
			devinit [i] . init (devinit [i] . param);
    1374:	0a000013 	beq	13c8 <system_init+0x180>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1378:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    137c:	0b3b0b3a 	bleq	ec406c <__ccfg+0xea40c4>
    1380:	13490b39 	movtne	r0, #39737	; 0x9b39
	IntEnable (INT_UART0_COMB);
    1384:	0b0d0b0b 	bleq	343fb8 <__ccfg+0x324010>
    1388:	0b380b0c 	bleq	e03fc0 <__ccfg+0xde4018>
}
    138c:	0f0b0000 	svceq	0x000b0000
	tci_run_auxiliary_timer ();
    1390:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		diag ("");
    1394:	0c000013 	stceq	0, cr0, [r0], {19}
    1398:	13490101 	movtne	r0, #37121	; 0x9101
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    139c:	00001301 	andeq	r1, r0, r1, lsl #6
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13a0:	0000210d 	andeq	r2, r0, sp, lsl #2
		diag ("Leftover RAM: %d bytes",
    13a4:	00160e00 	andseq	r0, r6, r0, lsl #28
    13a8:	0b3a0e03 	bleq	e84bbc <__ccfg+0xe64c14>
    13ac:	0b39053b 	bleq	e428a0 <__ccfg+0xe228f8>
    13b0:	00001349 	andeq	r1, r0, r9, asr #6
    13b4:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    13b8:	0013010c 	andseq	r0, r3, ip, lsl #2
    13bc:	00051000 	andeq	r1, r5, r0
    13c0:	00001349 	andeq	r1, r0, r9, asr #6
    13c4:	03003411 	movweq	r3, #1041	; 0x411
    13c8:	3b0b3a0e 	blcc	2cfc08 <__ccfg+0x2afc60>
    13cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    13d0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    13d4:	1200000c 	andne	r0, r0, #12
    13d8:	0b0b0113 	bleq	2c182c <__ccfg+0x2a1884>
    13dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13e0:	13010b39 	movwne	r0, #6969	; 0x1b39
    13e4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    13e8:	3a0e0300 	bcc	381ff0 <__ccfg+0x362048>
    13ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    13f4:	1400000b 	strne	r0, [r0], #-11
    13f8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    13fc:	0b3a0b0b 	bleq	e84030 <__ccfg+0xe64088>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1400:	0b39053b 	bleq	e428f4 <__ccfg+0xe2294c>
    1404:	00001301 	andeq	r1, r0, r1, lsl #6
    1408:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    140c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1410:	00341600 	eorseq	r1, r4, r0, lsl #12
    1414:	0b3a1347 	bleq	e86138 <__ccfg+0xe66190>
    1418:	0b39053b 	bleq	e4290c <__ccfg+0xe22964>
    141c:	00000a02 	andeq	r0, r0, r2, lsl #20
}
    1420:	01110100 	tsteq	r1, r0, lsl #2
__attribute__ ((noreturn)) void __pi_release () {
    1424:	0b130e25 	bleq	4c4cc0 <__ccfg+0x4a4d18>
    1428:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    142c:	01110655 	tsteq	r1, r5, asr r6
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1430:	00000610 	andeq	r0, r0, r0, lsl r6
	check_stack_overflow;
    1434:	0b002402 	bleq	a444 <__exidx_end+0x4844>
    1438:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    143c:	0300000e 	movweq	r0, #14
	update_n_wake (MAX_WORD, NO);
    1440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1444:	0b3b0b3a 	bleq	ec4134 <__ccfg+0xea418c>
    1448:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (__pi_curr) {
    144c:	24040000 	strcs	r0, [r4], #-0
    1450:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1454:	0008030b 	andeq	r0, r8, fp, lsl #6
  __ASM volatile ("cpsid i" : : : "memory");
    1458:	00260500 	eoreq	r0, r6, r0, lsl #10
	__SLEEP;
    145c:	00001349 	andeq	r1, r0, r9, asr #6
    1460:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1464:	07000013 	smladeq	r0, r3, r0, r0
    1468:	0b0b000f 	bleq	2c14ac <__ccfg+0x2a1504>
	system_event_count ++;
    146c:	00001349 	andeq	r1, r0, r9, asr #6
    1470:	0b011308 	bleq	46098 <__ccfg+0x260f0>
	switch (__pi_systat.effpdm) {
    1474:	3b0b3a0b 	blcc	2cfca8 <__ccfg+0x2afd00>
    1478:	010b390b 	tsteq	fp, fp, lsl #18
    147c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1480:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			__WFI ();
    1484:	0b3b0b3a 	bleq	ec4174 <__ccfg+0xea41cc>
    1488:	13490b39 	movtne	r0, #39737	; 0x9b39
    148c:	0b0d0b0b 	bleq	3440c0 <__ccfg+0x324118>
	check_stack_overflow;
    1490:	0b380b0c 	bleq	e040c8 <__ccfg+0xde4120>
    1494:	0d0a0000 	stceq	0, cr0, [sl, #-0]
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1498:	3a0e0300 	bcc	3820a0 <__ccfg+0x3620f8>
    149c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			(__pi_curr->code) (tstate (__pi_curr));
    14a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			goto Redo;
    14a4:	0b00000b 	bleq	14d8 <__pi_release+0xb4>
	for_all_tasks (__pi_curr) {
    14a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14ac:	0b3b0b3a 	bleq	ec419c <__ccfg+0xea41f4>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14b0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14b4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14b8:	010c0000 	mrseq	r0, (UNDEF: 12)
    14bc:	01134901 	tsteq	r3, r1, lsl #18
    14c0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14c4:	00000021 	andeq	r0, r0, r1, lsr #32
    14c8:	0300160e 	movweq	r1, #1550	; 0x60e
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14cc:	3b0b3a0e 	blcc	2cfd0c <__ccfg+0x2afd64>
    14d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			__WFI ();
    14d4:	0f000013 	svceq	0x00000013
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14d8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    14dc:	00001301 	andeq	r1, r0, r1, lsl #6
}
    14e0:	49000510 	stmdbmi	r0, {r4, r8, sl}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14e4:	11000013 	tstne	r0, r3, lsl r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    14e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14f0:	13490b39 	movtne	r0, #39737	; 0x9b39
			PRCMPowerDomainOff (__pi_systat.ondmns |
    14f4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    14f8:	13120000 	tstne	r2, #0
    14fc:	3a0b0b01 	bcc	2c4108 <__ccfg+0x2a4160>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1500:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1504:	0013010b 	andseq	r0, r3, fp, lsl #2
    1508:	000d1300 	andeq	r1, sp, r0, lsl #6
    150c:	0b3a0e03 	bleq	e84d20 <__ccfg+0xe64d78>
    1510:	0b39053b 	bleq	e42a04 <__ccfg+0xe22a5c>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1514:	0b381349 	bleq	e06240 <__ccfg+0xde6298>
    1518:	13140000 	tstne	r4, #0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    151c:	0b0e0301 	bleq	382128 <__ccfg+0x362180>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1520:	3b0b3a0b 	blcc	2cfd54 <__ccfg+0x2afdac>
    1524:	010b3905 	tsteq	fp, r5, lsl #18
    1528:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    152c:	13490021 	movtne	r0, #36897	; 0x9021
    1530:	00000b2f 	andeq	r0, r0, pc, lsr #22
			SysCtrlSetRechargeBeforePowerDown
    1534:	47003416 	smladmi	r0, r6, r4, r3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1538:	3b0b3a13 	blcc	2cfd8c <__ccfg+0x2afde4>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    153c:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
    1540:	1700000a 	strne	r0, [r0, -sl]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1494 <__pi_release+0x70>
    1548:	0b3a0e03 	bleq	e84d5c <__ccfg+0xe64db4>
    154c:	0b390b3b 	bleq	e44240 <__ccfg+0xe24298>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1550:	01110c27 	tsteq	r1, r7, lsr #24
    1554:	0a400112 	beq	10019a4 <__ccfg+0xfe19fc>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1558:	00001301 	andeq	r1, r0, r1, lsl #6
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    155c:	03000518 	movweq	r0, #1304	; 0x518
    1560:	3b0b3a08 	blcc	2cfd88 <__ccfg+0x2afde0>
    1564:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1568:	00060213 	andeq	r0, r6, r3, lsl r2
			while (!(AONWUCPowerStatusGet () &
    156c:	00051900 	andeq	r1, r5, r0, lsl #18
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1570:	0b3a0e03 	bleq	e84d84 <__ccfg+0xe64ddc>
    1574:	0b390b3b 	bleq	e44268 <__ccfg+0xe242c0>
    1578:	06021349 	streq	r1, [r2], -r9, asr #6
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    157c:	341a0000 	ldrcc	r0, [sl], #-0
    1580:	3a080300 	bcc	202188 <__ccfg+0x1e21e0>
    1584:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1588:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    158c:	00341b00 	eorseq	r1, r4, r0, lsl #22
    1590:	0b3a0803 	bleq	e835a4 <__ccfg+0xe635fc>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1594:	0b390b3b 	bleq	e44288 <__ccfg+0xe242e0>
    1598:	06021349 	streq	r1, [r2], -r9, asr #6
			SysCtrlAdjustRechargeAfterPowerDown ();
    159c:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
			reinit_uart ();
    15a0:	11133100 	tstne	r3, r0, lsl #2
    15a4:	58011201 	stmdapl	r1, {r0, r9, ip}
    15a8:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
}
    15ac:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    15b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15b8:	0b590b58 	bleq	1644320 <__ccfg+0x1624378>
    15bc:	00000b57 	andeq	r0, r0, r7, asr fp
    15c0:	3100051e 	tstcc	r0, lr, lsl r5
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15c4:	00060213 	andeq	r0, r6, r3, lsl r2
    15c8:	002e1f00 	eoreq	r1, lr, r0, lsl #30
    15cc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15d0:	0b3b0b3a 	bleq	ec42c0 <__ccfg+0xea4318>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    15d4:	01110b39 	tsteq	r1, r9, lsr fp
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    15d8:	0a400112 	beq	1001a28 <__ccfg+0xfe1a80>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    15dc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    15e0:	3a0e0300 	bcc	3821e8 <__ccfg+0x362240>
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    15e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15e8:	200c270b 	andcs	r2, ip, fp, lsl #14
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15ec:	2100000b 	tstcs	r0, fp
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    15f0:	0e03012e 	adfeqsp	f0, f3, #0.5
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    15f4:	0b3b0b3a 	bleq	ec42e4 <__ccfg+0xea433c>
    15f8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			PRCMPowerDomainOff (
    15fc:	0b201349 	bleq	806328 <__ccfg+0x7e6380>
    1600:	05220000 	streq	r0, [r2, #-0]!
	__SLEEP;
    1604:	3a0e0300 	bcc	38220c <__ccfg+0x362264>
    1608:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  __ASM volatile ("cpsie i" : : : "memory");
    160c:	0013490b 	andseq	r4, r3, fp, lsl #18
	goto Redo;
    1610:	11010000 	mrsne	r0, (UNDEF: 1)
    1614:	130e2501 	movwne	r2, #58625	; 0xe501
    1618:	1b0e030b 	blne	38224c <__ccfg+0x3622a4>
    161c:	1106550e 	tstne	r6, lr, lsl #10
    1620:	00061001 	andeq	r1, r6, r1
    1624:	00240200 	eoreq	r0, r4, r0, lsl #4
    1628:	0b3e0b0b 	bleq	f8425c <__ccfg+0xf642b4>
    162c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1630:	03001603 	movweq	r1, #1539	; 0x603
    1634:	3b0b3a0e 	blcc	2cfe74 <__ccfg+0x2afecc>
    1638:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    163c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1640:	0b0b0024 	bleq	2c16d8 <__ccfg+0x2a1730>
    1644:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1648:	26050000 	strcs	r0, [r5], -r0
    164c:	00134900 	andseq	r4, r3, r0, lsl #18
    1650:	00350600 	eorseq	r0, r5, r0, lsl #12
    1654:	00001349 	andeq	r1, r0, r9, asr #6
    1658:	0b011307 	bleq	4627c <__ccfg+0x262d4>
    165c:	3b0b3a0b 	blcc	2cfe90 <__ccfg+0x2afee8>
    1660:	010b390b 	tsteq	fp, fp, lsl #18
    1664:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1668:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    166c:	0b3b0b3a 	bleq	ec435c <__ccfg+0xea43b4>
    1670:	13490b39 	movtne	r0, #39737	; 0x9b39
    1674:	0b0d0b0b 	bleq	3442a8 <__ccfg+0x324300>
    1678:	0b380b0c 	bleq	e042b0 <__ccfg+0xde4308>
	cli_tim;
    167c:	0d090000 	stceq	0, cr0, [r9, #-0]
    1680:	3a0e0300 	bcc	382288 <__ccfg+0x3622e0>
    1684:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag ("PicOS halted");
    1688:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	mdelay (500);
    168c:	0a00000b 	beq	16c0 <main+0x14>
    1690:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	setpowermode (2);
    1694:	0b3b0b3a 	bleq	ec4384 <__ccfg+0xea43dc>
	__PCB = NULL;
    1698:	13490b39 	movtne	r0, #39737	; 0x9b39
	release;
    169c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    16a0:	0f0b0000 	svceq	0x000b0000
    16a4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    16a8:	0c000013 	stceq	0, cr0, [r0], {19}
int main (void) {
    16ac:	13490101 	movtne	r0, #37121	; 0x9101
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16b0:	00001301 	andeq	r1, r0, r1, lsl #6
    16b4:	0000210d 	andeq	r2, r0, sp, lsl #2
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16b8:	00160e00 	andseq	r0, r6, r0, lsl #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16bc:	0b3a0e03 	bleq	e84ed0 <__ccfg+0xe64f28>
	system_init ();
    16c0:	0b39053b 	bleq	e42bb4 <__ccfg+0xe22c0c>
	tcv_init ();
    16c4:	00001349 	andeq	r1, r0, r9, asr #6
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16c8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    16cc:	0013010c 	andseq	r0, r3, ip, lsl #2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    16d0:	00051000 	andeq	r1, r5, r0
    16d4:	00001349 	andeq	r1, r0, r9, asr #6
    16d8:	03003411 	movweq	r3, #1041	; 0x411
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    16dc:	3b0b3a0e 	blcc	2cff1c <__ccfg+0x2aff74>
    16e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	delay (16, 0);
    16e4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    16e8:	1200000c 	andne	r0, r0, #12
    16ec:	0b0b0113 	bleq	2c1b40 <__ccfg+0x2a1b98>
	__pi_release ();
    16f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16f4:	13010b39 	movwne	r0, #6969	; 0x1b39
    16f8:	0d130000 	ldceq	0, cr0, [r3, #-0]
    16fc:	3a0e0300 	bcc	382304 <__ccfg+0x36235c>
    1700:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1704:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1708:	1400000b 	strne	r0, [r0], #-11
static void killev (__pi_pcb_t *pid) {
    170c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	wfun = (aword)(pid->code);
    1710:	0b3a0b0b 	bleq	e84344 <__ccfg+0xe6439c>
	for_all_tasks (i) {
    1714:	0b39053b 	bleq	e42c08 <__ccfg+0xe22c60>
		for (j = 0; j < nevents (i); j++) {
    1718:	00001301 	andeq	r1, r0, r1, lsl #6
    171c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1720:	000b2f13 	andeq	r2, fp, r3, lsl pc
			    || i->Events [j] . Event == wfun
    1724:	00341600 	eorseq	r1, r4, r0, lsl #12
		for (j = 0; j < nevents (i); j++) {
    1728:	0b3a0e03 	bleq	e84f3c <__ccfg+0xe64f94>
			if (i->Events [j] . Event == (aword)pid
    172c:	0b390b3b 	bleq	e44420 <__ccfg+0xe24478>
    1730:	0a021349 	beq	8645c <__ccfg+0x664b4>
    1734:	34170000 	ldrcc	r0, [r7], #-0
				wakeupev (i, j);
    1738:	3a134700 	bcc	4d3340 <__ccfg+0x4b3398>
    173c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for_all_tasks (i) {
    1740:	000a020b 	andeq	r0, sl, fp, lsl #4
}
    1744:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1748:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
static void qfree (aword *ch) {
    174c:	0b3b0b3a 	bleq	ec443c <__ccfg+0xea4494>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1750:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	cc = (aword*)(mpools + MA_NP);
    1754:	01120111 	tsteq	r2, r1, lsl r1
	m_setnextp (ch, chunk);
    1758:	13010a40 	movwne	r0, #6720	; 0x1a40
	m_setnextp (cc, ch);
    175c:	05190000 	ldreq	r0, [r9, #-0]
}
    1760:	3a080300 	bcc	202368 <__ccfg+0x1e23c0>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1768:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    176c:	1a000006 	bne	178c <qfree+0x44>
			m_setnextp (cc, m_nextp (chunk));
    1770:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			m_size (chunk) += m_hdrlen + m_size (ch);
    1774:	0b3b0b3a 	bleq	ec4464 <__ccfg+0xea44bc>
    1778:	13490b39 	movtne	r0, #39737	; 0x9b39
    177c:	00000602 	andeq	r0, r0, r2, lsl #12
    1780:	03000a1b 	movweq	r0, #2587	; 0xa1b
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	3b0b3a0e 	blcc	2cffc4 <__ccfg+0x2b001c>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1788:	110b390b 	tstne	fp, fp, lsl #18
    178c:	1c000001 	stcne	0, cr0, [r0], {1}
    1790:	1331011d 	teqne	r1, #1073741831	; 0x40000007
			m_setnextp (cc, m_nextp (chunk));
    1794:	06550152 			; <UNDEFINED> instruction: 0x06550152
			m_size (ch) += m_hdrlen + m_size (chunk);
    1798:	0b590b58 	bleq	1644500 <__ccfg+0x1624558>
    179c:	13010b57 	movwne	r0, #6999	; 0x1b57
    17a0:	051d0000 	ldreq	r0, [sp, #-0]
    17a4:	00133100 	andseq	r3, r3, r0, lsl #2
    17a8:	011d1e00 	tsteq	sp, r0, lsl #28
    17ac:	01521331 	cmpeq	r2, r1, lsr r3
			if (m_size (chunk) >= m_size (ch))
    17b0:	0b580655 	bleq	160310c <__ccfg+0x15e3164>
    17b4:	0b570b59 	bleq	15c4520 <__ccfg+0x15a4578>
    17b8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
		chunk = m_nextp (chunk))
    17bc:	3a0e0301 	bcc	3823c8 <__ccfg+0x362420>
    17c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17c4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17c8:	000b2013 	andeq	r2, fp, r3, lsl r0
	diag_wait (a);
    17cc:	00052000 	andeq	r2, r5, r0
	diag_wchar (c, a);
    17d0:	0b3a0e03 	bleq	e84fe4 <__ccfg+0xe6503c>
    17d4:	0b390b3b 	bleq	e444c8 <__ccfg+0xe24520>
}
    17d8:	00001349 	andeq	r1, r0, r9, asr #6
    17dc:	01110100 	tsteq	r1, r0, lsl #2
	syserror (ESTATE, "state");
    17e0:	0b130e25 	bleq	4c507c <__ccfg+0x4a50d4>
    17e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    17e8:	01110655 	tsteq	r1, r5, asr r6
    17ec:	00000610 	andeq	r0, r0, r0, lsl r6
	for (i = 0; i < MAX_UTIMERS; i++)
    17f0:	0b002402 	bleq	a800 <__exidx_end+0x4c00>
void utimer_add (address ut) {
    17f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    17f8:	0300000e 	movweq	r0, #14
		if (__pi_utims [i] == NULL)
    17fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	for (i = 0; i < MAX_UTIMERS; i++)
    1800:	0b3b0b3a 	bleq	ec44f0 <__ccfg+0xea4548>
    1804:	13490b39 	movtne	r0, #39737	; 0x9b39
		syserror (ERESOURCE, "ut a");
    1808:	24040000 	strcs	r0, [r4], #-0
	__pi_utims [i] = ut;
    180c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
}
    1810:	0008030b 	andeq	r0, r8, fp, lsl #6
    1814:	00260500 	eoreq	r0, r6, r0, lsl #10
    1818:	00001349 	andeq	r1, r0, r9, asr #6
	*t = v;
    181c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
	TCI_RUN_AUXILIARY_TIMER;
    1820:	07000013 	smladeq	r0, r3, r0, r0
void update_n_wake (word min, Boolean force) {
    1824:	0b0b0113 	bleq	2c1c78 <__ccfg+0x2a1cd0>
	if (TCI_UPDATE_DELAY_TICKS (force))
    1828:	0b3b0b3a 	bleq	ec4518 <__ccfg+0xea4570>
    182c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1830:	0d080000 	stceq	0, cr0, [r8, #-0]
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1834:	3a0e0300 	bcc	38243c <__ccfg+0x362494>
    1838:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    183c:	0b13490b 	bleq	4d3c70 <__ccfg+0x4b3cc8>
    1840:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1844:	000b380b 	andeq	r3, fp, fp, lsl #16
    1848:	000d0900 	andeq	r0, sp, r0, lsl #18
    184c:	0b3a0e03 	bleq	e85060 <__ccfg+0xe650b8>
    1850:	0b390b3b 	bleq	e44544 <__ccfg+0xe2459c>
    1854:	0b381349 	bleq	e06580 <__ccfg+0xde65d8>
    1858:	340a0000 	strcc	r0, [sl], #-0
    185c:	3a0e0300 	bcc	382464 <__ccfg+0x3624bc>
    1860:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1864:	3f13490b 	svccc	0x0013490b
		for_all_tasks (i) {
    1868:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	__pi_mintk = znew + min;
    186c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1870:	13490b0b 	movtne	r0, #39691	; 0x9b0b
			if (!twaiting (i))
    1874:	010c0000 	mrseq	r0, (UNDEF: 12)
    1878:	01134901 	tsteq	r3, r1, lsl #18
			if (twakecnd (__pi_old, znew, i->Timer)) {
    187c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1880:	00000021 	andeq	r0, r0, r1, lsr #32
    1884:	0300160e 	movweq	r1, #1550	; 0x60e
    1888:	3b0b3a0e 	blcc	2d00c8 <__ccfg+0x2b0120>
    188c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1890:	0f000013 	svceq	0x00000013
    1894:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1898:	00001301 	andeq	r1, r0, r1, lsl #6
    189c:	49000510 	stmdbmi	r0, {r4, r8, sl}
    18a0:	11000013 	tstne	r0, r3, lsl r0
    18a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				wakeuptm (i);
    18ac:	13490b39 	movtne	r0, #39737	; 0x9b39
    18b0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		for_all_tasks (i) {
    18b4:	13120000 	tstne	r2, #0
				d = i->Timer - znew;
    18b8:	3a0b0b01 	bcc	2c44c4 <__ccfg+0x2a451c>
    18bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18c0:	0013010b 	andseq	r0, r3, fp, lsl #2
		if ((word)(__pi_mintk - znew) < min) 
    18c4:	000d1300 	andeq	r1, sp, r0, lsl #6
    18c8:	0b3a0e03 	bleq	e850dc <__ccfg+0xe65134>
    18cc:	0b39053b 	bleq	e42dc0 <__ccfg+0xe22e18>
	__pi_old = znew;
    18d0:	0b381349 	bleq	e065fc <__ccfg+0xde6654>
}
    18d4:	13140000 	tstne	r4, #0
	TCI_RUN_DELAY_TIMER;
    18d8:	0b0e0301 	bleq	3824e4 <__ccfg+0x36253c>
}
    18dc:	3b0b3a0b 	blcc	2d0110 <__ccfg+0x2b0168>
    18e0:	010b3905 	tsteq	fp, r5, lsl #18
    18e4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    18e8:	13490021 	movtne	r0, #36897	; 0x9021
    18ec:	00000b2f 	andeq	r0, r0, pc, lsr #22
void proceed (word state) {
    18f0:	03003416 	movweq	r3, #1046	; 0x416
	prcdstate (__pi_curr, state);
    18f4:	3b0b3a0e 	blcc	2d0134 <__ccfg+0x2b018c>
    18f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	release;
    18fc:	000a0213 	andeq	r0, sl, r3, lsl r2
    1900:	002e1700 	eoreq	r1, lr, r0, lsl #14
void __pi_wait (aword event, word state) {
    1904:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	sint j = nevents (__pi_curr);
    1908:	0b3b0b3a 	bleq	ec45f8 <__ccfg+0xea4650>
	if (j >= MAX_EVENTS_PER_TASK)
    190c:	01110b39 	tsteq	r1, r9, lsr fp
    1910:	0a400112 	beq	1001d60 <__ccfg+0xfe1db8>
    1914:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
		syserror (ENEVENTS, "sw");
    1918:	030c3f01 	movweq	r3, #52993	; 0xcf01
    191c:	3b0b3a0e 	blcc	2d015c <__ccfg+0x2b01b4>
	setestate (__pi_curr->Events [j], state, event);
    1920:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	incwait (__pi_curr);
    1924:	1113490c 	tstne	r3, ip, lsl #18
	setestate (__pi_curr->Events [j], state, event);
    1928:	40011201 	andmi	r1, r1, r1, lsl #4
}
    192c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1930:	00051900 	andeq	r1, r5, r0, lsl #18
    1934:	0b3a0803 	bleq	e83948 <__ccfg+0xe639a0>
void __pi_trigger (aword event) {
    1938:	0b390b3b 	bleq	e4462c <__ccfg+0xe24684>
	for_all_tasks (i) {
    193c:	06021349 	streq	r1, [r2], -r9, asr #6
		for (j = 0; j < nevents (i); j++) {
    1940:	051a0000 	ldreq	r0, [sl, #-0]
    1944:	3a080300 	bcc	20254c <__ccfg+0x1e25a4>
    1948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    194c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			if (i->Events [j] . Event == event) {
    1950:	1b00000a 	blne	1980 <__pi_join+0x14>
    1954:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 18a4 <update_n_wake+0x80>
    1958:	0b3a0e03 	bleq	e8516c <__ccfg+0xe651c4>
				wakeupev (i, j);
    195c:	0b39053b 	bleq	e42e50 <__ccfg+0xe22ea8>
    1960:	13490c27 	movtne	r0, #39975	; 0x9c27
	for_all_tasks (i) {
    1964:	01120111 	tsteq	r2, r1, lsl r1
}
    1968:	13010a40 	movwne	r0, #6720	; 0x1a40
aword __pi_join (aword pid, word st) {
    196c:	051c0000 	ldreq	r0, [ip, #-0]
	for_all_tasks (i) {
    1970:	3a080300 	bcc	202578 <__ccfg+0x1e25d0>
    1974:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	return 0;
    1978:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if ((aword)i == pid) {
    197c:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
			__pi_wait (pid, st);
    1980:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 18d0 <update_n_wake+0xac>
}
    1984:	0b3a0e03 	bleq	e85198 <__ccfg+0xe651f0>
	for_all_tasks (i) {
    1988:	0b39053b 	bleq	e42e7c <__ccfg+0xe22ed4>
    198c:	01120111 	tsteq	r2, r1, lsl r1
void delay (word d, word state) {
    1990:	00000a40 	andeq	r0, r0, r0, asr #20
	settstate (__pi_curr, state);
    1994:	0300341e 	movweq	r3, #1054	; 0x41e
    1998:	3b0b3a08 	blcc	2d01c0 <__ccfg+0x2b0218>
    199c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    19a0:	00060213 	andeq	r0, r6, r3, lsl r2
	update_n_wake (d, YES);
    19a4:	000a1f00 	andeq	r1, sl, r0, lsl #30
    19a8:	0b3a0e03 	bleq	e851bc <__ccfg+0xe65214>
	__pi_curr->Timer = __pi_old + d;
    19ac:	0b39053b 	bleq	e42ea0 <__ccfg+0xe22ef8>
    19b0:	00000111 	andeq	r0, r0, r1, lsl r1
	inctimer (__pi_curr);
    19b4:	31011d20 	tstcc	r1, r0, lsr #26
    19b8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    19bc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
}
    19c0:	010b5705 	tsteq	fp, r5, lsl #14
    19c4:	21000013 	tstcs	r0, r3, lsl r0
	if (fun == NULL)
    19c8:	13310005 	teqne	r1, #5
		return (int) __pi_curr;
    19cc:	1d220000 	stcne	0, cr0, [r2, #-0]
    19d0:	11133101 	tstne	r3, r1, lsl #2
	for_all_tasks (i)
    19d4:	58011201 	stmdapl	r1, {r0, r9, ip}
}
    19d8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		if (i->code == fun)
    19dc:	2300000b 	movwcs	r0, #11
	for_all_tasks (i)
    19e0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    19e4:	0b3b0b3a 	bleq	ec46d4 <__ccfg+0xea472c>
    19e8:	13490b39 	movtne	r0, #39737	; 0x9b39
int __pi_strlen (const char *s) {
    19ec:	00000602 	andeq	r0, r0, r2, lsl #12
	for (i = 0; *(s+i) != '\0'; i++);
    19f0:	03000a24 	movweq	r0, #2596	; 0xa24
}
    19f4:	3b0b3a0e 	blcc	2d0234 <__ccfg+0x2b028c>
	for (i = 0; *(s+i) != '\0'; i++);
    19f8:	110b390b 	tstne	fp, fp, lsl #18
	while ((Boolean)(*d++ = *s++));
    19fc:	25000001 	strcs	r0, [r0, #-1]
    1a00:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1a04:	06550152 			; <UNDEFINED> instruction: 0x06550152
}
    1a08:	0b590b58 	bleq	1644770 <__ccfg+0x16247c8>
	while (n-- && (*s != '\0'))
    1a0c:	00000b57 	andeq	r0, r0, r7, asr fp
    1a10:	31000526 	tstcc	r0, r6, lsr #10
	*d = '\0';
    1a14:	00060213 	andeq	r0, r6, r3, lsl r2
	while (n-- && (*s != '\0'))
    1a18:	011d2700 	tsteq	sp, r0, lsl #14
    1a1c:	01521331 	cmpeq	r2, r1, lsr r3
		*d++ = *s++;
    1a20:	0b580655 	bleq	160337c <__ccfg+0x15e33d4>
    1a24:	0b570b59 	bleq	15c4790 <__ccfg+0x15a47e8>
	while (n--)
    1a28:	00001301 	andeq	r1, r0, r1, lsl #6
    1a2c:	31011d28 	tstcc	r1, r8, lsr #26
		*dest++ = *src++;
    1a30:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a34:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1a38:	000b570b 	andeq	r5, fp, fp, lsl #14
	while (n--)
    1a3c:	002e2900 	eoreq	r2, lr, r0, lsl #18
}
    1a40:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		*dest++ = c;
    1a44:	0b3b0b3a 	bleq	ec4734 <__ccfg+0xea478c>
void adddevfunc (devreqfun_t rf, int loc) {
    1a48:	13490b39 	movtne	r0, #39737	; 0x9b39
		syserror (EREQPAR, "addv");
    1a4c:	01120111 	tsteq	r2, r1, lsl r1
		syserror (ERESOURCE, "addv");
    1a50:	00000a40 	andeq	r0, r0, r0, asr #20
	if (ioreq [loc] != NULL)
    1a54:	03012e2a 	movweq	r2, #7722	; 0x1e2a
    1a58:	3b0b3a0e 	blcc	2d0298 <__ccfg+0x2b02f0>
		syserror (ERESOURCE, "addv");
    1a5c:	110b390b 	tstne	fp, fp, lsl #18
	ioreq [loc] = rf;
    1a60:	40011201 	andmi	r1, r1, r1, lsl #4
}
    1a64:	0013010a 	andseq	r0, r3, sl, lsl #2
    1a68:	002e2b00 	eoreq	r2, lr, r0, lsl #22
sint io (word retry, word dev, word operation, char *buf, word len) {
    1a6c:	0b3a0e03 	bleq	e85280 <__ccfg+0xe652d8>
    1a70:	0b390b3b 	bleq	e44764 <__ccfg+0xe247bc>
    1a74:	00000b20 	andeq	r0, r0, r0, lsr #22
    1a78:	03012e2c 	movweq	r2, #7724	; 0x1e2c
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1a7c:	3b0b3a0e 	blcc	2d02bc <__ccfg+0x2b0314>
    1a80:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1a84:	1201110c 	andne	r1, r1, #12, 2
		syserror (ENODEVICE, "io");
    1a88:	010a4001 	tsteq	sl, r1
    1a8c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
	if (len == 0)
    1a90:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	ret = (ioreq [dev]) (operation, buf, len);
    1a94:	342e0000 	strtcc	r0, [lr], #-0
    1a98:	02133100 	andseq	r3, r3, #0, 2
	if (ret >= 0)
    1a9c:	2f000006 	svccs	0x00000006
	if (ret == -1) {
    1aa0:	0e03012e 	adfeqsp	f0, f3, #0.5
    1aa4:	0b3b0b3a 	bleq	ec4794 <__ccfg+0xea47ec>
		if (retry == WNONE)
    1aa8:	13490b39 	movtne	r0, #39737	; 0x9b39
		iowait (dev, operation, retry);
    1aac:	13010b20 	movwne	r0, #6944	; 0x1b20
    1ab0:	34300000 	ldrtcc	r0, [r0], #-0
    1ab4:	3a080300 	bcc	2026bc <__ccfg+0x1e2714>
			release;
    1ab8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (ret == -2) {
    1abc:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (retry != WNONE) {
    1ac0:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
    1ac4:	0b3a0e03 	bleq	e852d8 <__ccfg+0xe65330>
			iowait (dev, operation, retry);
    1ac8:	0b390b3b 	bleq	e447bc <__ccfg+0xe24814>
    1acc:	0b200c27 	bleq	804b70 <__ccfg+0x7e4bc8>
			(ioreq [dev]) (NONE, buf, len);
    1ad0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ad4:	03000532 	movweq	r0, #1330	; 0x532
    1ad8:	3b0b3a08 	blcc	2d0300 <__ccfg+0x2b0358>
		(ioreq [dev]) (NONE, buf, len);
    1adc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ae0:	33000013 	movwcc	r0, #19
    1ae4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
    1ae8:	01120111 	tsteq	r2, r1, lsl r1
	if (retry != WNONE) {
    1aec:	0b590b58 	bleq	1644854 <__ccfg+0x16248ac>
		delay (-ret - 2, retry);
    1af0:	13010b57 	movwne	r0, #6999	; 0x1b57
    1af4:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
    1af8:	3a0e0301 	bcc	382704 <__ccfg+0x36275c>
    1afc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		release;
    1b00:	1113490b 	tstne	r3, fp, lsl #18
    1b04:	40011201 	andmi	r1, r1, r1, lsl #4
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b08:	0013010a 	andseq	r0, r3, sl, lsl #2
    1b0c:	00343500 	eorseq	r3, r4, r0, lsl #10
    1b10:	0b3a0803 	bleq	e83b24 <__ccfg+0xe63b7c>
    1b14:	0b390b3b 	bleq	e44808 <__ccfg+0xe24860>
    1b18:	06021349 	streq	r1, [r2], -r9, asr #6
		syserror (ERESOURCE, "mal1");
    1b1c:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
    1b20:	3a0e0301 	bcc	38272c <__ccfg+0x362784>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b24:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b28:	200c270b 	andcs	r2, ip, fp, lsl #14
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b2c:	0013010b 	andseq	r0, r3, fp, lsl #2
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b30:	00053700 	andeq	r3, r5, r0, lsl #14
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b34:	0b3a0e03 	bleq	e85348 <__ccfg+0xe653a0>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b38:	0b39053b 	bleq	e4302c <__ccfg+0xe23084>
    1b3c:	00001349 	andeq	r1, r0, r9, asr #6
}
    1b40:	03012e38 	movweq	r2, #7736	; 0x1e38
    1b44:	3b0b3a0e 	blcc	2d0384 <__ccfg+0x2b03dc>
    1b48:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1b4c:	2013490c 	andscs	r4, r3, ip, lsl #18
    1b50:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b54:	00053900 	andeq	r3, r5, r0, lsl #18
void __pi_free (aword *ch) {
    1b58:	0b3a0e03 	bleq	e8536c <__ccfg+0xe653c4>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b5c:	0b390b3b 	bleq	e44850 <__ccfg+0xe248a8>
    1b60:	00001349 	andeq	r1, r0, r9, asr #6
		syserror (EMALLOC, "malg");
    1b64:	31012e3a 	tstcc	r1, sl, lsr lr
    1b68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	mcfree [MA_NP] += m_size (ch);
    1b6c:	000a4001 	andeq	r4, sl, r1
		m_size (ch) ^= MALLOC_UMASK;
    1b70:	001d3b00 	andseq	r3, sp, r0, lsl #22
    1b74:	01111331 	tsteq	r1, r1, lsr r3
	mcfree [MA_NP] += m_size (ch);
    1b78:	0b580112 	bleq	1601fc8 <__ccfg+0x15e2020>
	QFREE;
    1b7c:	0b570b59 	bleq	15c48e8 <__ccfg+0x15a4940>
	if (mevent [MA_NP] . nwait) {
    1b80:	01000000 	mrseq	r0, (UNDEF: 0)
    1b84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		trigger ((aword)(&(mevent [MA_NP])));
    1b88:	0e030b13 	vmoveq.32	d3[0], r0
		mevent [MA_NP] . nwait --;
    1b8c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
}
    1b90:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1b94:	24020000 	strcs	r0, [r2], #-0
    1b98:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1b9c:	000e030b 	andeq	r0, lr, fp, lsl #6
void kill (aword pid) {
    1ba0:	00160300 	andseq	r0, r6, r0, lsl #6
		pid = (aword) __pi_curr;
    1ba4:	0b3a0e03 	bleq	e853b8 <__ccfg+0xe65410>
	j = NULL;
    1ba8:	0b390b3b 	bleq	e4489c <__ccfg+0xe248f4>
	for_all_tasks (i) {
    1bac:	00001349 	andeq	r1, r0, r9, asr #6
	syserror (EREQPAR, "kpi");
    1bb0:	0b002404 	bleq	abc8 <__exidx_end+0x4fc8>
    1bb4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		if ((aword)i == pid) {
    1bb8:	05000008 	streq	r0, [r0, #-8]
    1bbc:	13490026 	movtne	r0, #36902	; 0x9026
				__PCB = i->Next;
    1bc0:	35060000 	strcc	r0, [r6, #-0]
			killev (i);
    1bc4:	00134900 	andseq	r4, r3, r0, lsl #18
			ufree (i);
    1bc8:	000f0700 	andeq	r0, pc, r0, lsl #14
			if (i == __pi_curr)
    1bcc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1bd0:	13080000 	movwne	r0, #32768	; 0x8000
				release;
    1bd4:	3a0b0b01 	bcc	2c47e0 <__ccfg+0x2a4838>
				j->Next = i->Next;
    1bd8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bdc:	0013010b 	andseq	r0, r3, fp, lsl #2
    1be0:	000d0900 	andeq	r0, sp, r0, lsl #18
}
    1be4:	0b3a0e03 	bleq	e853f8 <__ccfg+0xe65450>
    1be8:	0b390b3b 	bleq	e448dc <__ccfg+0xe24934>
    1bec:	0b0b1349 	bleq	2c6918 <__ccfg+0x2a6970>
	if (size < 8)
    1bf0:	0b0c0b0d 	bleq	30482c <__ccfg+0x2e4884>
		_size = 2;
    1bf4:	00000b38 	andeq	r0, r0, r8, lsr fp
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1bf8:	03000d0a 	movweq	r0, #3338	; 0xd0a
		_size = (((aword)size) + 3) >> 2;
    1bfc:	3b0b3a0e 	blcc	2d043c <__ccfg+0x2b0494>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c00:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		_size = (((aword)size) + 3) >> 2;
    1c04:	000b3813 	andeq	r3, fp, r3, lsl r8
		if (mevent [MA_NP] . nfail != 255)
    1c08:	00340b00 	eorseq	r0, r4, r0, lsl #22
    1c0c:	0b3a0e03 	bleq	e85420 <__ccfg+0xe65478>
			mevent [MA_NP] . nfail ++;
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
		mnfree [MA_NP] = 0;
    1c14:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1af8 <io+0x8c>
    1c18:	00000c3c 	andeq	r0, r0, ip, lsr ip
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c1c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1c20:	00130113 	andseq	r0, r3, r3, lsl r1
			syserror (EMALLOC, "malc");
    1c24:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1c28:	160e0000 	strne	r0, [lr], -r0
		if (m_size (chunk) >= _size)
    1c2c:	3a0e0300 	bcc	382834 <__ccfg+0x36288c>
    1c30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		chunk = m_nextp (chunk)) {
    1c34:	0013490b 	andseq	r4, r3, fp, lsl #18
		m_setnextp (cc, m_nextp (chunk));
    1c38:	01150f00 	tsteq	r5, r0, lsl #30
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c3c:	13010c27 	movwne	r0, #7207	; 0x1c27
    1c40:	05100000 	ldreq	r0, [r0, #-0]
			m_size (chunk) = _size;
    1c44:	00134900 	andseq	r4, r3, r0, lsl #18
			cc = chunk + _size + m_hdrlen;
    1c48:	00341100 	eorseq	r1, r4, r0, lsl #2
    1c4c:	0b3a0e03 	bleq	e85460 <__ccfg+0xe654b8>
			m_size (cc) = waste - m_hdrlen;
    1c50:	0b39053b 	bleq	e43144 <__ccfg+0xe2319c>
			QFREE;
    1c54:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1b38 <__pi_malloc_init+0x30>
		mevent [MA_NP] . nfail = 0;
    1c58:	00000c3c 	andeq	r0, r0, ip, lsr ip
		mcfree [MA_NP] -= m_size (chunk);
    1c5c:	0b011312 	bleq	468ac <__ccfg+0x26904>
    1c60:	3b0b3a0b 	blcc	2d0494 <__ccfg+0x2b04ec>
    1c64:	010b3905 	tsteq	fp, r5, lsl #18
    1c68:	13000013 	movwne	r0, #19
		m_size (chunk) |= MALLOC_UMASK;
    1c6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1c70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		m_size (chunk) |= MALLOC_UMASK;
    1c74:	13490b39 	movtne	r0, #39737	; 0x9b39
			mnfree [MA_NP] = mcfree [MA_NP];
    1c78:	00000b38 	andeq	r0, r0, r8, lsr fp
}
    1c7c:	03011314 	movweq	r1, #4884	; 0x1314
    1c80:	3a0b0b0e 	bcc	2c48c0 <__ccfg+0x2a4918>
    1c84:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c88:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c8c:	00211500 	eoreq	r1, r1, r0, lsl #10
    1c90:	0b2f1349 	bleq	bc69bc <__ccfg+0xba6a14>
    1c94:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
aword __pi_fork (fsmcode func, aword data) {
    1c98:	030c3f01 	movweq	r3, #52993	; 0xcf01
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c9c:	3b0b3a0e 	blcc	2d04dc <__ccfg+0x2b0534>
    1ca0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1ca4:	1113490c 	tstne	r3, ip, lsl #18
		if ((j = __PCB) == NULL)
    1ca8:	40011201 	andmi	r1, r1, r1, lsl #4
	i->Next = NULL;
    1cac:	0013010a 	andseq	r0, r3, sl, lsl #2
	i->data = data;
    1cb0:	00051700 	andeq	r1, r5, r0, lsl #14
		if ((j = __PCB) == NULL)
    1cb4:	0b3a0803 	bleq	e83cc8 <__ccfg+0xe63d20>
}
    1cb8:	0b390b3b 	bleq	e449ac <__ccfg+0xe24a04>
			for (; j->Next != NULL; j = j->Next);
    1cbc:	06021349 	streq	r1, [r2], -r9, asr #6
    1cc0:	34180000 	ldrcc	r0, [r8], #-0
	return (aword) i;
    1cc4:	3a0e0300 	bcc	3828cc <__ccfg+0x362924>
    1cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (mevent [MA_NP] . nwait != 255)
    1ccc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1cd0:	19000006 	stmdbne	r0, {r1, r2}
    1cd4:	08030034 	stmdaeq	r3, {r2, r4, r5}
		mevent [MA_NP] . nwait ++;
    1cd8:	0b3b0b3a 	bleq	ec49c8 <__ccfg+0xea4a20>
	wait ((aword)(&(mevent [MA_NP])), state);
    1cdc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ce0:	00000602 	andeq	r0, r0, r2, lsl #12
void diag (const char *mess, ...) {
    1ce4:	01110100 	tsteq	r1, r0, lsl #2
    1ce8:	0b130e25 	bleq	4c5584 <__ccfg+0x4a55dc>
    1cec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	diag_disable_int (a, is);
    1cf0:	01110655 	tsteq	r1, r5, asr r6
    1cf4:	00000610 	andeq	r0, r0, r0, lsl r6
    1cf8:	0b002402 	bleq	ad08 <__exidx_end+0x5108>
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	diag_disable_int (a, is);
    1d00:	0300000e 	movweq	r0, #14
	while (*mess != '\0') {
    1d04:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	dgout ('\r');
    1d08:	0b3b0b3a 	bleq	ec49f8 <__ccfg+0xea4a50>
	dgout ('\n');
    1d0c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d10:	24040000 	strcs	r0, [r4], #-0
    1d14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	diag_wait (a);
    1d18:	0008030b 	andeq	r0, r8, fp, lsl #6
	diag_enable_int (a, is);
    1d1c:	00260500 	eoreq	r0, r6, r0, lsl #10
    1d20:	00001349 	andeq	r1, r0, r9, asr #6
}
    1d24:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1d28:	07000013 	smladeq	r0, r3, r0, r0
    1d2c:	0b0b0113 	bleq	2c2180 <__ccfg+0x2a21d8>
		if (*mess == '%') {
    1d30:	0b3b0b3a 	bleq	ec4a20 <__ccfg+0xea4a78>
    1d34:	13010b39 	movwne	r0, #6969	; 0x1b39
			if (*mess == 'l') {
    1d38:	0d080000 	stceq	0, cr0, [r8, #-0]
    1d3c:	3a0e0300 	bcc	382944 <__ccfg+0x36299c>
				mess++;
    1d40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				val = va_arg (ap, lword);
    1d44:	0b13490b 	bleq	4d4178 <__ccfg+0x4b41d0>
				bc = 32;
    1d48:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
				bc = 16;
    1d4c:	000b380b 	andeq	r3, fp, fp, lsl #16
			switch (*mess) {
    1d50:	000d0900 	andeq	r0, sp, r0, lsl #18
    1d54:	0b3a0e03 	bleq	e85568 <__ccfg+0xe655c0>
    1d58:	0b390b3b 	bleq	e44a4c <__ccfg+0xe24aa4>
				dgout ('%');
    1d5c:	0b381349 	bleq	e06a88 <__ccfg+0xde6ae0>
    1d60:	340a0000 	strcc	r0, [sl], #-0
				dgout (*mess);
    1d64:	3a0e0300 	bcc	38296c <__ccfg+0x3629c4>
    1d68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			switch (*mess) {
    1d6c:	3f13490b 	svccc	0x0013490b
					v = __pi_hex_enc_table [
    1d70:	000c3c0c 	andeq	r3, ip, ip, lsl #24
					i += 4;
    1d74:	000f0b00 	andeq	r0, pc, r0, lsl #22
					(val >> (bc - i)) & 0xf];
    1d78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1d7c:	010c0000 	mrseq	r0, (UNDEF: 12)
					dgout (v);
    1d80:	01134901 	tsteq	r3, r1, lsl #18
    1d84:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
				while (i < bc) {
    1d88:	00000021 	andeq	r0, r0, r1, lsr #32
			mess++;
    1d8c:	0300160e 	movweq	r1, #1550	; 0x60e
					d /= 10;
    1d90:	3b0b3a0e 	blcc	2d05d0 <__ccfg+0x2b0628>
				if ((val >> (bc - 1)) & 1) {
    1d94:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1d98:	0f000013 	svceq	0x00000013
					dgout ('-');
    1d9c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1da0:	00001301 	andeq	r1, r0, r1, lsl #6
						val |= 0xffff0000;
    1da4:	49000510 	stmdbmi	r0, {r4, r8, sl}
    1da8:	11000013 	tstne	r0, r3, lsl r0
    1dac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				d = (bc == 16) ? 10000 : 1000000000;
    1db0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1db4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1db8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
					v = (word) (val / d);
    1dbc:	13120000 	tstne	r2, #0
					if (v || d == 1) break;
    1dc0:	3a0b0b01 	bcc	2c49cc <__ccfg+0x2a4a24>
    1dc4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					d /= 10;
    1dc8:	0013010b 	andseq	r0, r3, fp, lsl #2
				d = (bc == 16) ? 10000 : 1000000000;
    1dcc:	000d1300 	andeq	r1, sp, r0, lsl #6
					dgout (v + '0');
    1dd0:	0b3a0e03 	bleq	e855e4 <__ccfg+0xe6563c>
    1dd4:	0b39053b 	bleq	e432c8 <__ccfg+0xe23320>
    1dd8:	0b381349 	bleq	e06b04 <__ccfg+0xde6b5c>
					d /= 10;
    1ddc:	13140000 	tstne	r4, #0
					val = val - (v * d);
    1de0:	0b0e0301 	bleq	3829ec <__ccfg+0x362a44>
					if (d == 0) break;
    1de4:	3b0b3a0b 	blcc	2d0618 <__ccfg+0x2b0670>
					v = (word) (val / d);
    1de8:	010b3905 	tsteq	fp, r5, lsl #18
    1dec:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
				if (bc == 16)
    1df0:	13490021 	movtne	r0, #36897	; 0x9021
				d = (bc == 16) ? 10000 : 1000000000;
    1df4:	00000b2f 	andeq	r0, r0, pc, lsr #22
					val &= 0xffff;
    1df8:	3f012e16 	svccc	0x00012e16
					dgout (*s);
    1dfc:	3a0e030c 	bcc	382a34 <__ccfg+0x362a8c>
					s++;
    1e00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				while (*s != '\0') {
    1e04:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1e08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			dgout (*mess++);
    1e0c:	000a4001 	andeq	r4, sl, r1
    1e10:	00051700 	andeq	r1, r5, r0, lsl #14
    1e14:	0b3a0803 	bleq	e83e28 <__ccfg+0xe63e80>
    1e18:	0b390b3b 	bleq	e44b0c <__ccfg+0xe24b64>
    1e1c:	06021349 	streq	r1, [r2], -r9, asr #6
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e20:	34180000 	ldrcc	r0, [r8], #-0
    1e24:	3a0e0300 	bcc	382a2c <__ccfg+0x362a84>
    1e28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	^ entropy
    1e30:	00000006 	andeq	r0, r0, r6
}
    1e34:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1e38:	030b130e 	movweq	r1, #45838	; 0xb30e
    1e3c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1e40:	10011106 	andne	r1, r1, r6, lsl #2
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e44:	02000006 	andeq	r0, r0, #6
	word cs = size + hblenb;
    1e48:	0b0b0024 	bleq	2c1ee0 <__ccfg+0x2a1f38>
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e4c:	0e030b3e 	vmoveq.16	d3[0], r0
    1e50:	16030000 	strne	r0, [r3], -r0
	p -> length = size;
    1e54:	3a0e0300 	bcc	382a5c <__ccfg+0x362ab4>
}
    1e58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (p->attributes.b.queued) {
    1e5c:	0013490b 	andseq	r4, r3, fp, lsl #18
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e60:	00240400 	eoreq	r0, r4, r0, lsl #8
    1e64:	0b3e0b0b 	bleq	f84a98 <__ccfg+0xf64af0>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e68:	00000803 	andeq	r0, r0, r3, lsl #16
		p->attributes.b.queued = 0;
    1e6c:	03011305 	movweq	r1, #4869	; 0x1305
    1e70:	3a0b0b0e 	bcc	2c4ab0 <__ccfg+0x2a4b08>
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1e74:	010b3b0b 	tsteq	fp, fp, lsl #22
	deq (p);	// Remove from queue
    1e78:	06000013 			; <UNDEFINED> instruction: 0x06000013
}
    1e7c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	tfree ((address)p);
    1e80:	0b381349 	bleq	e06bac <__ccfg+0xde6c04>
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1e84:	00000c34 	andeq	r0, r0, r4, lsr ip
    1e88:	0b000f07 	bleq	5aac <patchImageGenfsk+0x17c>
    1e8c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1e90:	13490026 	movtne	r0, #36902	; 0x9026
    1e94:	35090000 	strcc	r0, [r9, #-0]
	if (q_empty (q))
    1e98:	00134900 	andseq	r4, r3, r0, lsl #18
    1e9c:	01130a00 	tsteq	r3, r0, lsl #20
		trigger (q);
    1ea0:	0b3a0b0b 	bleq	e84ad4 <__ccfg+0xe64b2c>
	if (p->attributes.b.urgent) {
    1ea4:	0b390b3b 	bleq	e44b98 <__ccfg+0xe24bf0>
		p->u.bqueue.next = q->next;
    1ea8:	00001301 	andeq	r1, r0, r1, lsl #6
		p->u.bqueue.prev = q;
    1eac:	03000d0b 	movweq	r0, #3339	; 0xd0b
		q->next->prev = (qitem_t*) p;
    1eb0:	3b0b3a0e 	blcc	2d06f0 <__ccfg+0x2b0748>
	p->attributes.b.queued = 1;
    1eb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1eb8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
}
    1ebc:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
		p->u.bqueue.prev = q->prev;
    1ec0:	0c00000b 	stceq	0, cr0, [r0], {11}
		q->prev->next = (qitem_t*) p;
    1ec4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		q->prev = (qitem_t*) p;
    1ec8:	0b3b0b3a 	bleq	ec4bb8 <__ccfg+0xea4c10>
    1ecc:	13490b39 	movtne	r0, #39737	; 0x9b39
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1ed0:	00000b38 	andeq	r0, r0, r8, lsr fp
	deq (p);	// Soft dequeue, timer and hook left intact
    1ed4:	0300340d 	movweq	r3, #1037	; 0x40d
	switch (dv) {
    1ed8:	3b0b3a0e 	blcc	2d0718 <__ccfg+0x2b0770>
    1edc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ee0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1ee4:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
			p->attributes.b.urgent = 1;
    1ee8:	0b0b000f 	bleq	2c1f2c <__ccfg+0x2a1f84>
    1eec:	00001349 	andeq	r1, r0, r9, asr #6
			verify_ses (p, "dispose ses");
    1ef0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1ef4:	00130113 	andseq	r0, r3, r3, lsl r1
    1ef8:	00211000 	eoreq	r1, r1, r0
    1efc:	16110000 	ldrne	r0, [r1], -r0
    1f00:	3a0e0300 	bcc	382b08 <__ccfg+0x362b60>
			verify_phy (p, "dispose phy");
    1f04:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f08:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    1f0c:	01151200 	tsteq	r5, r0, lsl #4
			enq (oqueues [p->attributes.b.phys], p);
    1f10:	13010c27 	movwne	r0, #7207	; 0x1c27
			p->attributes.b.urgent = 1;
    1f14:	05130000 	ldreq	r0, [r3, #-0]
    1f18:	00134900 	andseq	r4, r3, r0, lsl #18
			verify_phy (p, "dispose phy");
    1f1c:	00341400 	eorseq	r1, r4, r0, lsl #8
    1f20:	0b3a0e03 	bleq	e85734 <__ccfg+0xe6578c>
    1f24:	0b39053b 	bleq	e43418 <__ccfg+0xe23470>
    1f28:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1e0c <diag+0x128>
    1f2c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1f30:	0b011315 	bleq	46b8c <__ccfg+0x26be4>
			enq (oqueues [p->attributes.b.phys], p);
    1f34:	3b0b3a0b 	blcc	2d0768 <__ccfg+0x2b07c0>
    1f38:	010b3905 	tsteq	fp, r5, lsl #18
}
    1f3c:	16000013 			; <UNDEFINED> instruction: 0x16000013
			rlp (p);
    1f40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    1f44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1f48:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f4c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1f50:	03011317 	movweq	r1, #4887	; 0x1317
    1f54:	3a0b0b0e 	bcc	2c4b94 <__ccfg+0x2a4bec>
    1f58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f5c:	0013010b 	andseq	r0, r3, fp, lsl #2
	if (b->attributes.b.outgoing) {
    1f60:	00211800 	eoreq	r1, r1, r0, lsl #16
	b = header (p);
    1f64:	0b2f1349 	bleq	bc6c90 <__ccfg+0xba6ce8>
	if (b->attributes.b.outgoing) {
    1f68:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
		verify_ses (b, "tcv02");
    1f6c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1f70:	3b0b3a0e 	blcc	2d07b0 <__ccfg+0x2b0808>
    1f74:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1f78:	1113490c 	tstne	r3, ip, lsl #18
    1f7c:	40011201 	andmi	r1, r1, r1, lsl #4
		verify_plg (b, tcv_out, "tcv03");
    1f80:	0013010a 	andseq	r0, r3, sl, lsl #2
    1f84:	00051a00 	andeq	r1, r5, r0, lsl #20
    1f88:	0b3a0803 	bleq	e83f9c <__ccfg+0xe63ff4>
    1f8c:	0b390b3b 	bleq	e44c80 <__ccfg+0xe24cd8>
    1f90:	06021349 	streq	r1, [r2], -r9, asr #6
    1f94:	051b0000 	ldreq	r0, [fp, #-0]
    1f98:	3a080300 	bcc	202ba0 <__ccfg+0x1e2bf8>
    1f9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fa4:	1c00000a 	stcne	0, cr0, [r0], {10}
}
    1fa8:	00000018 	andeq	r0, r0, r8, lsl r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fac:	0300341d 	movweq	r3, #1053	; 0x41d
		rlp (b);
    1fb0:	3b0b3a0e 	blcc	2d07f0 <__ccfg+0x2b0848>
}
    1fb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		rlp (b);
    1fb8:	00060213 	andeq	r0, r6, r3, lsl r2
    1fbc:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1fc0:	0b3a0803 	bleq	e83fd4 <__ccfg+0xe6402c>
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
    1fc8:	06021349 	streq	r1, [r2], -r9, asr #6
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1fcc:	341f0000 	ldrcc	r0, [pc], #-0	; 1fd4 <tcv_open+0x8>
    1fd0:	3a080300 	bcc	202bd8 <__ccfg+0x1e2c30>
    1fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fd8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	va_start (ap, plid);
    1fdc:	0000000a 	andeq	r0, r0, sl
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fe0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1fe4:	030b130e 	movweq	r1, #45838	; 0xb30e
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1fe8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1fec:	10011106 	andne	r1, r1, r6, lsl #2
    1ff0:	02000006 	andeq	r0, r0, #6
    1ff4:	0b0b0024 	bleq	2c208c <__ccfg+0x2a20e4>
			syserror (ENODEVICE, "tcv04");
    1ff8:	0e030b3e 	vmoveq.16	d3[0], r0
		syserror (EMALLOC, "tcv05");
    1ffc:	16030000 	strne	r0, [r3], -r0
	attp.b.outgoing = 1;
    2000:	3a0e0300 	bcc	382c08 <__ccfg+0x362c60>
    2004:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2008:	0013490b 	andseq	r4, r3, fp, lsl #18
    200c:	00240400 	eoreq	r0, r4, r0, lsl #8
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2010:	0b3e0b0b 	bleq	f84c44 <__ccfg+0xf64c9c>
		if (descriptors [fd] == NULL)
    2014:	00000803 	andeq	r0, r0, r3, lsl #16
    2018:	03011305 	movweq	r1, #4869	; 0x1305
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    201c:	3a0b0b0e 	bcc	2c4c5c <__ccfg+0x2a4cb4>
		return ERROR;
    2020:	010b3b0b 	tsteq	fp, fp, lsl #22
}
    2024:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2028:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    202c:	0b381349 	bleq	e06d58 <__ccfg+0xde6db0>
	s->attpattern.b.session = fd;
    2030:	00000c34 	andeq	r0, r0, r4, lsr ip
    2034:	0b000f07 	bleq	5c58 <__exidx_end+0x58>
	descriptors [fd] = s;
    2038:	0800000b 	stmdaeq	r0, {r0, r1, r3}
	q_init (&(s->rqueue));
    203c:	13490026 	movtne	r0, #36902	; 0x9026
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2040:	35090000 	strcc	r0, [r9, #-0]
    2044:	00134900 	andseq	r4, r3, r0, lsl #18
    2048:	01130a00 	tsteq	r3, r0, lsl #20
    204c:	0b3a0b0b 	bleq	e84c80 <__ccfg+0xe64cd8>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2050:	0b390b3b 	bleq	e44d44 <__ccfg+0xe24d9c>
    2054:	00001301 	andeq	r1, r0, r1, lsl #6
    2058:	03000d0b 	movweq	r0, #3339	; 0xd0b
	descriptors [fd] = s;
    205c:	3b0b3a0e 	blcc	2d089c <__ccfg+0x2b08f4>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2060:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2064:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	if (s == NULL)
    2068:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
		syserror (EMALLOC, "tcv05");
    206c:	0c00000b 	stceq	0, cr0, [r0], {11}
    2070:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2074:	0b3b0b3a 	bleq	ec4d64 <__ccfg+0xea4dbc>
    2078:	13490b39 	movtne	r0, #39737	; 0x9b39
    207c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2080:	0300340d 	movweq	r3, #1037	; 0x40d
    2084:	3b0b3a0e 	blcc	2d08c4 <__ccfg+0x2b091c>
    2088:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    208c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	    (plugins [ord] != NULL && plugins [ord] != pl))
    2090:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    2094:	0b0b000f 	bleq	2c20d8 <__ccfg+0x2a2130>
    2098:	00001349 	andeq	r1, r0, r9, asr #6
	plugins [ord] = pl;
    209c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
	return 0;
    20a0:	00130113 	andseq	r0, r3, r3, lsl r1
		return ERROR;
    20a4:	00211000 	eoreq	r1, r1, r0
}
    20a8:	16110000 	ldrne	r0, [r1], -r0
    20ac:	3a0e0300 	bcc	382cb4 <__ccfg+0x362d0c>
	verify_fds (fd, "tcv10");
    20b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20b4:	0013490b 	andseq	r4, r3, fp, lsl #18
	verify_fds (fd, "tcv10");
    20b8:	01151200 	tsteq	r5, r0, lsl #4
    20bc:	13010c27 	movwne	r0, #7207	; 0x1c27
    20c0:	05130000 	ldreq	r0, [r3, #-0]
	verify_plg (b, tcv_frm, "tcv11");
    20c4:	00134900 	andseq	r4, r3, r0, lsl #18
	b = q_first (rq);
    20c8:	00341400 	eorseq	r1, r4, r0, lsl #8
	if (q_end (b, rq)) {
    20cc:	0b3a0e03 	bleq	e858e0 <__ccfg+0xe65938>
		if (state != WNONE) {
    20d0:	0b39053b 	bleq	e435c4 <__ccfg+0xe2361c>
    20d4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1fb8 <tcv_endp+0x5c>
			when (rq, state);
    20d8:	00000c3c 	andeq	r0, r0, ip, lsr ip
			release;
    20dc:	0b011315 	bleq	46d38 <__ccfg+0x26d90>
	deq (b);	// Dequeue the packet ...
    20e0:	3b0b3a0b 	blcc	2d0914 <__ccfg+0x2b096c>
    20e4:	010b3905 	tsteq	fp, r5, lsl #18
	p = ((address)(b + 1));
    20e8:	16000013 			; <UNDEFINED> instruction: 0x16000013
	verify_plg (b, tcv_frm, "tcv11");
    20ec:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    20f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20f4:	13490b39 	movtne	r0, #39737	; 0x9b39
    20f8:	00000b38 	andeq	r0, r0, r8, lsr fp
    20fc:	03011317 	movweq	r1, #4887	; 0x1317
    2100:	3a0b0b0e 	bcc	2c4d40 <__ccfg+0x2a4d98>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2104:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2108:	0013010b 	andseq	r0, r3, fp, lsl #2
		b->length - b->u.pointers.head - b->u.pointers.tail;
    210c:	00211800 	eoreq	r1, r1, r0, lsl #16
    2110:	0b2f1349 	bleq	bc6e3c <__ccfg+0xba6e94>
	b->u.pointers.tail =
    2114:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
}
    2118:	030c3f01 	movweq	r3, #52993	; 0xcf01
		return NULL;
    211c:	3b0b3a0e 	blcc	2d095c <__ccfg+0x2b09b4>
    2120:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2124:	1113490c 	tstne	r3, ip, lsl #18
    2128:	40011201 	andmi	r1, r1, r1, lsl #4
    212c:	0013010a 	andseq	r0, r3, sl, lsl #2
	verify_fds (fd, "tcv16");
    2130:	00051a00 	andeq	r1, r5, r0, lsl #20
								Boolean urg) {
    2134:	0b3a0803 	bleq	e84148 <__ccfg+0xe641a0>
    2138:	0b390b3b 	bleq	e44e2c <__ccfg+0xe24e84>
	verify_fds (fd, "tcv16");
    213c:	06021349 	streq	r1, [r2], -r9, asr #6
    2140:	051b0000 	ldreq	r0, [fp, #-0]
    2144:	3a080300 	bcc	202d4c <__ccfg+0x1e2da4>
	verify_pld (s, tcv_frm, "tcv17");
    2148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    214c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2150:	1c00000a 	stcne	0, cr0, [r0], {10}
    2154:	00000018 	andeq	r0, r0, r8, lsl r0
    2158:	0300341d 	movweq	r3, #1053	; 0x41d
    215c:	3b0b3a0e 	blcc	2d099c <__ccfg+0x2b09f4>
    2160:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2164:	00060213 	andeq	r0, r6, r3, lsl r2
	ptrs.head = (word) fd;
    2168:	00341e00 	eorseq	r1, r4, r0, lsl #28
	ptrs.tail = (word) urg;
    216c:	0b3a0803 	bleq	e84180 <__ccfg+0xe641d8>
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2170:	0b390b3b 	bleq	e44e64 <__ccfg+0xe24ebc>
    2174:	0a021349 	beq	86ea0 <__ccfg+0x66ef8>
		if (state != WNONE) {
    2178:	01000000 	mrseq	r0, (UNDEF: 0)
    217c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
}
    2180:	0e030b13 	vmoveq.32	d3[0], r0
			when (eid, state);
    2184:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    2188:	06100111 			; <UNDEFINED> instruction: 0x06100111
			release;
    218c:	16020000 	strne	r0, [r2], -r0
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2190:	3a0e0300 	bcc	382d98 <__ccfg+0x362df0>
    2194:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2198:	0013490b 	andseq	r4, r3, fp, lsl #18
    219c:	00240300 	eoreq	r0, r4, r0, lsl #6
    21a0:	0b3e0b0b 	bleq	f84dd4 <__ccfg+0xf64e2c>
    21a4:	00000e03 	andeq	r0, r0, r3, lsl #28
    21a8:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
    21ac:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
		if (state != WNONE) {
    21b0:	13490035 	movtne	r0, #36917	; 0x9035
    21b4:	24060000 	strcs	r0, [r6], #-0
			tmwait (state);
    21b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21bc:	0008030b 	andeq	r0, r8, fp, lsl #6
	b->attributes = s->attpattern;
    21c0:	00160700 	andseq	r0, r6, r0, lsl #14
		b->attributes.b.urgent = 1;
    21c4:	0b3a0e03 	bleq	e859d8 <__ccfg+0xe65a30>
    21c8:	0b39053b 	bleq	e436bc <__ccfg+0xe23714>
	b->u.pointers.head = ptrs.head;
    21cc:	00001349 	andeq	r1, r0, r9, asr #6
	b->u.pointers.tail = length;
    21d0:	0b011708 	bleq	47df8 <__ccfg+0x27e50>
	return (address) (b + 1);
    21d4:	3b0b3a0b 	blcc	2d0a08 <__ccfg+0x2b0a60>
    21d8:	010b390b 	tsteq	fp, fp, lsl #18
    21dc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    21e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    21e4:	0b3b0b3a 	bleq	ec4ed4 <__ccfg+0xea4f2c>
    21e8:	13490b39 	movtne	r0, #39737	; 0x9b39
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    21ec:	010a0000 	mrseq	r0, (UNDEF: 10)
    21f0:	01134901 	tsteq	r3, r1, lsl #18
    21f4:	0b000013 	bleq	2248 <tcv_control+0x30>
	verify_fph (phy, "tcv23");
    21f8:	13490021 	movtne	r0, #36897	; 0x9021
    21fc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2200:	0b01130c 	bleq	46e38 <__ccfg+0x26e90>
    2204:	3b0b3a0b 	blcc	2d0a38 <__ccfg+0x2b0a90>
}
    2208:	010b390b 	tsteq	fp, fp, lsl #18
	return (physical [phy]) (opt, arg);
    220c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2210:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2214:	0b3b0b3a 	bleq	ec4f04 <__ccfg+0xea4f5c>
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2218:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (opt < 0) {
    221c:	00000b38 	andeq	r0, r0, r8, lsr fp
		if (fd < 0)
    2220:	0b000f0e 	bleq	5e60 <__exidx_end+0x260>
		if (opt == PHYSOPT_PLUGINFO) {
    2224:	0f00000b 	svceq	0x0000000b
			if (fd >= TCV_MAX_PLUGS)
    2228:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			if ((p = plugins [fd]) == NULL)
    222c:	0b3a0b0b 	bleq	e84e60 <__ccfg+0xe64eb8>
    2230:	0b390b3b 	bleq	e44f24 <__ccfg+0xe24f7c>
}
    2234:	00001301 	andeq	r1, r0, r1, lsl #6
		if (fd >= TCV_MAX_PHYS)
    2238:	03000d10 	movweq	r0, #3344	; 0xd10
		return physinfo [fd];
    223c:	3b0b3a08 	blcc	2d0a64 <__ccfg+0x2b0abc>
    2240:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	verify_fds (fd, "tcv22");
    2244:	000b3813 	andeq	r3, fp, r3, lsl r8
    2248:	000f1100 	andeq	r1, pc, r0, lsl #2
    224c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2250:	13120000 	tstne	r2, #0
    2254:	0b0e0301 	bleq	382e60 <__ccfg+0x362eb8>
}
    2258:	3b0b3a05 	blcc	2d0a74 <__ccfg+0x2b0acc>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    225c:	010b390b 	tsteq	fp, fp, lsl #18
    2260:	13000013 	movwne	r0, #19
			return 0;
    2264:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2268:	0b3b0b3a 	bleq	ec4f58 <__ccfg+0xea4fb0>
    226c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2270:	00000538 	andeq	r0, r0, r8, lsr r5
    2274:	27001514 	smladcs	r0, r4, r5, r1
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2278:	1500000c 	strne	r0, [r0, #-12]
    227c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	if (dsp != TCV_DSP_PASS) {
    2280:	13011349 	movwne	r1, #4937	; 0x1349
		if (ses == NONE)
    2284:	05160000 	ldreq	r0, [r6, #-0]
			syserror (EREQPAR, "tcv26");
    2288:	00134900 	andseq	r4, r3, r0, lsl #18
		verify_fds (ses, "tcv27");
    228c:	01131700 	tsteq	r3, r0, lsl #14
    2290:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2294:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2298:	13010b39 	movwne	r0, #6969	; 0x1b39
    229c:	0d180000 	ldceq	0, cr0, [r8, #-0]
		if ((p = apb (size)) != NULL) {
    22a0:	3a0e0300 	bcc	382ea8 <__ccfg+0x362f00>
    22a4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		return NULL;
    22a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			p->attributes = descriptors [ses] -> attpattern;
    22ac:	1900000b 	stmdbne	r0, {r0, r1, r3}
			dispose (p, dsp);
    22b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			p->attributes = descriptors [ses] -> attpattern;
    22b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			p->attributes.b.outgoing = 0;
    22b8:	13490b39 	movtne	r0, #39737	; 0x9b39
			dispose (p, dsp);
    22bc:	00000538 	andeq	r0, r0, r8, lsr r5
			return (address)(p + 1);
    22c0:	0301131a 	movweq	r1, #4890	; 0x131a
    22c4:	3a0b0b0e 	bcc	2c4f04 <__ccfg+0x2a4f5c>
	if ((p = apb (size)) != NULL)
    22c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22cc:	0013010b 	andseq	r0, r3, fp, lsl #2
		return (address)(p + 1);
    22d0:	01131b00 	tsteq	r3, r0, lsl #22
    22d4:	0b3a0b0b 	bleq	e84f08 <__ccfg+0xe64f60>
    22d8:	0b39053b 	bleq	e437cc <__ccfg+0xe23824>
    22dc:	00001301 	andeq	r1, r0, r1, lsl #6
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e0:	0b01171c 	bleq	47f58 <__ccfg+0x27fb0>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    22e4:	3b0b3a0b 	blcc	2d0b18 <__ccfg+0x2b0b70>
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e8:	010b3905 	tsteq	fp, r5, lsl #18
    22ec:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
		syserror (EREQPAR, "tcv28");
    22f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		syserror (EMALLOC, "tcv29");
    22f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	physical [phy] = ps;
    22f8:	13490b39 	movtne	r0, #39737	; 0x9b39
	physinfo [phy] = info;
    22fc:	131e0000 	tstne	lr, #0
    2300:	3c0e0300 	stccc	3, cr0, [lr], {-0}
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2304:	1f00000c 	svcne	0x0000000c
    2308:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    230c:	00001301 	andeq	r1, r0, r1, lsl #6
		syserror (EMALLOC, "tcv29");
    2310:	03003420 	movweq	r3, #1056	; 0x420
    2314:	3b0b3a0e 	blcc	2d0b54 <__ccfg+0x2b0bac>
	q_init (q);
    2318:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    231c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2320:	2100000c 	tstcs	r0, ip
    2324:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2328:	0b3b0b3a 	bleq	ec5018 <__ccfg+0xea5070>
    232c:	13490b39 	movtne	r0, #39737	; 0x9b39
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2330:	0b0d0b0b 	bleq	344f64 <__ccfg+0x324fbc>
	verify_fph (phy, "tcv30");
    2334:	0b380b0c 	bleq	e04f6c <__ccfg+0xde4fc4>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2338:	0d220000 	stceq	0, cr0, [r2, #-0]
    233c:	3a0e0300 	bcc	382f44 <__ccfg+0x362f9c>
	verify_fph (phy, "tcv30");
    2340:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2344:	0b13490b 	bleq	4d4778 <__ccfg+0x4b47d0>
    2348:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    234c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2350:	00342300 	eorseq	r2, r4, r0, lsl #6
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2354:	0b3a0e03 	bleq	e85b68 <__ccfg+0xe65bc0>
    2358:	0b390b3b 	bleq	e4504c <__ccfg+0xe250a4>
		if (plugins [plg] == NULL)
    235c:	0a021349 	beq	87088 <__ccfg+0x670e0>
    2360:	21240000 			; <UNDEFINED> instruction: 0x21240000
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2364:	2f134900 	svccs	0x00134900
}
    2368:	25000005 	strcs	r0, [r0, #-5]
    236c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2370:	0b3b0b3a 	bleq	ec5060 <__ccfg+0xea50b8>
    2374:	13490b39 	movtne	r0, #39737	; 0x9b39
    2378:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    237c:	21260000 			; <UNDEFINED> instruction: 0x21260000
    2380:	27000000 	strcs	r0, [r0, -r0]
    2384:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    238c:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2390:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
	len -= (ap.head + ap.tail);
    2394:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2398:	3b0b3a0e 	blcc	2d0bd8 <__ccfg+0x2b0c30>
    239c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23a0:	1201110c 	andne	r1, r1, #12, 2
    23a4:	010a4001 	tsteq	sl, r1
    23a8:	29000013 	stmdbcs	r0, {r0, r1, r4}
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23ac:	08030005 	stmdaeq	r3, {r0, r2}
    23b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23b4:	13490b39 	movtne	r0, #39737	; 0x9b39
	return 1;
    23b8:	00000602 	andeq	r0, r0, r2, lsl #12
    23bc:	31011d2a 	tstcc	r1, sl, lsr #26
    23c0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    23c4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    23c8:	010b5705 	tsteq	fp, r5, lsl #14
	verify_fph (phy, "tcv32");
    23cc:	2b000013 	blcs	2420 <tcvphy_top+0x14>
    23d0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    23d4:	342c0000 	strtcc	r0, [ip], #-0
    23d8:	00133100 	andseq	r3, r3, r0, lsl #2
    23dc:	00342d00 	eorseq	r2, r4, r0, lsl #26
    23e0:	06021331 			; <UNDEFINED> instruction: 0x06021331
	oq = oqueues [phy];
    23e4:	1d2e0000 	stcne	0, cr0, [lr, #-0]
	b = q_first (oq);
    23e8:	52133100 	andspl	r3, r3, #0, 2
	if (q_end (b, oq)) {
    23ec:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	*len = b->length;
    23f0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	deq (b);	// Dequeue the packet ...
    23f4:	2f00000b 	svccs	0x0000000b
}
    23f8:	0e03012e 	adfeqsp	f0, f3, #0.5
		return NULL;
    23fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2400:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2404:	01111349 	tsteq	r1, r9, asr #6
    2408:	0a400112 	beq	1002858 <__ccfg+0xfe28b0>
	verify_fph (phy, "tcv33");
    240c:	00001301 	andeq	r1, r0, r1, lsl #6
    2410:	03003430 	movweq	r3, #1072	; 0x430
    2414:	3b0b3a08 	blcc	2d0c3c <__ccfg+0x2b0c94>
    2418:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    241c:	00060213 	andeq	r0, r6, r3, lsl r2
    2420:	000a3100 	andeq	r3, sl, r0, lsl #2
	oq = oqueues [phy];
    2424:	0b3a0e03 	bleq	e85c38 <__ccfg+0xe65c90>
	b = q_first (oq);
    2428:	0b39053b 	bleq	e4391c <__ccfg+0xe23974>
		return NULL;
    242c:	00000111 	andeq	r0, r0, r1, lsl r1
	return (address)(b + 1);
    2430:	11010b32 	tstne	r1, r2, lsr fp
}
    2434:	00011201 	andeq	r1, r1, r1, lsl #4
    2438:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
    243c:	0b3a0e03 	bleq	e85c50 <__ccfg+0xe65ca8>
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2440:	0b39053b 	bleq	e43934 <__ccfg+0xe2398c>
	verify_plg (b, tcv_xmt, "tcv34");
    2444:	13010b20 	movwne	r0, #6944	; 0x1b20
	hblock_t *b = header (pkt);
    2448:	34340000 	ldrtcc	r0, [r4], #-0
	verify_plg (b, tcv_xmt, "tcv34");
    244c:	3a080300 	bcc	203054 <__ccfg+0x1e30ac>
    2450:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2454:	0013490b 	andseq	r4, r3, fp, lsl #18
    2458:	00053500 	andeq	r3, r5, r0, lsl #10
    245c:	0b3a0e03 	bleq	e85c70 <__ccfg+0xe65cc8>
    2460:	0b39053b 	bleq	e43954 <__ccfg+0xe239ac>
    2464:	06021349 	streq	r1, [r2], -r9, asr #6
	dispose (b, plugins [b->attributes.b.plugin] ->
    2468:	1d360000 	ldcne	0, cr0, [r6, #-0]
}
    246c:	11133100 	tstne	r3, r0, lsl #2
	dispose (b, plugins [b->attributes.b.plugin] ->
    2470:	58011201 	stmdapl	r1, {r0, r9, ip}
    2474:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    2478:	3700000b 	strcc	r0, [r0, -fp]
}
    247c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    while(1)
    2480:	00001301 	andeq	r1, r0, r1, lsl #6
{
    2484:	31011d38 	tstcc	r1, r8, lsr sp
    SetupTrimDevice();
    2488:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    pui32Src = &_etext;
    248c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2490:	010b5705 	tsteq	fp, r5, lsl #14
    __asm("    ldr     r0, =_bss\n"
    2494:	39000013 	stmdbcc	r0, {r0, r1, r4}
    2498:	13310005 	teqne	r1, #5
    249c:	1d3a0000 	ldcne	0, cr0, [sl, #-0]
    24a0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    24a4:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
   main();
    24a8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    FaultISR();
    24ac:	3b00000b 	blcc	24e0 <get_byte+0x10>
        *pui32Dest++ = *pui32Src++;
    24b0:	0e03012e 	adfeqsp	f0, f3, #0.5
    24b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    24b8:	01110b39 	tsteq	r1, r9, lsr fp
    24bc:	0a400112 	beq	100290c <__ccfg+0xfe2964>
    24c0:	00001301 	andeq	r1, r0, r1, lsl #6
    24c4:	03002e3c 	movweq	r2, #3644	; 0xe3c
    24c8:	3b0b3a0e 	blcc	2d0d08 <__ccfg+0x2b0d60>
    24cc:	200b3905 	andcs	r3, fp, r5, lsl #18
static byte get_byte () {
    24d0:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24d4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    24d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    24dc:	01110b39 	tsteq	r1, r9, lsr fp
    24e0:	0a400112 	beq	1002930 <__ccfg+0xfe2988>
		if (ee_inp)
    24e4:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
			b |= 1;
    24e8:	3a0e0300 	bcc	3830f0 <__ccfg+0x363148>
    24ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24f0:	000b200b 	andeq	r2, fp, fp
	for (b = 0, i = 0; i < 8; i++) {
    24f4:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
}
    24f8:	0b3a0e03 	bleq	e85d0c <__ccfg+0xe65d64>
    24fc:	0b390b3b 	bleq	e451f0 <__ccfg+0xe25248>
    2500:	0b200c27 	bleq	8055a4 <__ccfg+0x7e55fc>
static void put_byte (byte b) {
    2504:	00001301 	andeq	r1, r0, r1, lsl #6
    2508:	03000540 	movweq	r0, #1344	; 0x540
    250c:	3b0b3a08 	blcc	2d0d34 <__ccfg+0x2b0d8c>
    2510:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (b & 0x80)
    2514:	41000013 	tstmi	r0, r3, lsl r0
    2518:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    251c:	0b3b0b3a 	bleq	ec520c <__ccfg+0xea5264>
	for (i = 0; i < 8; i++) {
    2520:	13490b39 	movtne	r0, #39737	; 0x9b39
		b <<= 1;
    2524:	34420000 	strbcc	r0, [r2], #-0
	for (i = 0; i < 8; i++) {
    2528:	3a080300 	bcc	203130 <__ccfg+0x1e3188>
}
    252c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2530:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2534:	012e4300 			; <UNDEFINED> instruction: 0x012e4300
    2538:	0b3a0e03 	bleq	e85d4c <__ccfg+0xe65da4>
	put_byte (cmd);
    253c:	0b39053b 	bleq	e43a30 <__ccfg+0xe23a88>
    2540:	0b200c27 	bleq	8055e4 <__ccfg+0x7e563c>
}
    2544:	00001301 	andeq	r1, r0, r1, lsl #6
    2548:	03000544 	movweq	r0, #1348	; 0x544
static void wwait (word st, word del) {
    254c:	3b0b3a0e 	blcc	2d0d8c <__ccfg+0x2b0de4>
    2550:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2554:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
	while (dopen && (rdsr () & 1)) {
    2558:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    255c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2560:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2564:	00000b20 	andeq	r0, r0, r0, lsr #22
	put_byte (CMD_RDSR);
    2568:	03002e46 	movweq	r2, #3654	; 0xe46
	r = get_byte ();
    256c:	3b0b3a0e 	blcc	2d0dac <__ccfg+0x2b0e04>
    2570:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	while (dopen && (rdsr () & 1)) {
    2574:	000b200c 	andeq	r2, fp, ip
}
    2578:	012e4700 			; <UNDEFINED> instruction: 0x012e4700
		if (st == WNONE)
    257c:	01111331 	tsteq	r1, r1, lsr r3
    2580:	0a400112 	beq	10029d0 <__ccfg+0xfe2a28>
			mdelay (1);
    2584:	00001301 	andeq	r1, r0, r1, lsl #6
    2588:	31000548 	tstcc	r0, r8, asr #10
			delay (del, st);
    258c:	00060213 	andeq	r0, r6, r3, lsl r2
    2590:	011d4900 	tsteq	sp, r0, lsl #18
			release;
    2594:	01111331 	tsteq	r1, r1, lsr r3
    2598:	0b580112 	bleq	16029e8 <__ccfg+0x15e2a40>
    259c:	0b570b59 	bleq	15c5308 <__ccfg+0x15a5360>
static void ready () {
    25a0:	1d4a0000 	stclne	0, cr0, [sl, #-0]
	if (dopen) {
    25a4:	11133101 	tstne	r3, r1, lsl #2
		wwait (WNONE, 1);
    25a8:	58011201 	stmdapl	r1, {r0, r9, ip}
    25ac:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    25b0:	4b00000b 	blmi	25e4 <cclose+0x4>
	dstat = 0;
    25b4:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
}
    25b8:	01120111 	tsteq	r2, r1, lsl r1
    25bc:	00000a40 	andeq	r0, r0, r0, asr #20
    25c0:	3100344c 	tstcc	r0, ip, asr #8
	udelay (1);
    25c4:	00061c13 	andeq	r1, r6, r3, lsl ip
    25c8:	11010000 	mrsne	r0, (UNDEF: 1)
	udelay (1);
    25cc:	130e2501 	movwne	r2, #58625	; 0xe501
		dopen = DOPEN_TEMP;
    25d0:	1b0e030b 	blne	383204 <__ccfg+0x36325c>
    25d4:	1106550e 	tstne	r6, lr, lsl #10
    25d8:	00061001 	andeq	r1, r6, r1
    25dc:	00240200 	eoreq	r0, r4, r0, lsl #4
static void cclose () {
    25e0:	0b3e0b0b 	bleq	f85214 <__ccfg+0xf6526c>
	if (dopen == DOPEN_TEMP) {
    25e4:	00000e03 	andeq	r0, r0, r3, lsl #28
    25e8:	03001603 	movweq	r1, #1539	; 0x603
		wwait (WNONE, 1);
    25ec:	3b0b3a0e 	blcc	2d0e2c <__ccfg+0x2b0e84>
    25f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	cmd_0 (CMD_DP);
    25f4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    25f8:	0b0b0024 	bleq	2c2690 <__ccfg+0x2a26e8>
		dopen = 0;
    25fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
}
    2600:	13050000 	movwne	r0, #20480	; 0x5000
word ee_open () {
    2604:	0b0e0301 	bleq	383210 <__ccfg+0x363268>
	ready ();
    2608:	3b0b3a0b 	blcc	2d0e3c <__ccfg+0x2b0e94>
	dopen = DOPEN_PERM;
    260c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2610:	000d0600 	andeq	r0, sp, r0, lsl #12
}
    2614:	13490e03 	movtne	r0, #40451	; 0x9e03
	if (dopen) {
    2618:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    261c:	0f070000 	svceq	0x00070000
		dopen = DOPEN_TEMP;
    2620:	000b0b00 	andeq	r0, fp, r0, lsl #22
		cclose ();
    2624:	00260800 	eoreq	r0, r6, r0, lsl #16
}
    2628:	00001349 	andeq	r1, r0, r9, asr #6
int ser_out (word st, const char *m) {
    262c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
	if ((prcs = running (__outserial)) != 0) {
    2630:	0a000013 	beq	2684 <ser_out+0x58>
    2634:	0b0b000f 	bleq	2c2678 <__ccfg+0x2a26d0>
    2638:	00001349 	andeq	r1, r0, r9, asr #6
		join (prcs, st);
    263c:	0b01130b 	bleq	47270 <__ccfg+0x272c8>
		release;
    2640:	3b0b3a0b 	blcc	2d0e74 <__ccfg+0x2b0ecc>
	if (*m)
    2644:	010b390b 	tsteq	fp, fp, lsl #18
		prcs = strlen (m) +1;
    2648:	0c000013 	stceq	0, cr0, [r0], {19}
    264c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2650:	0b3b0b3a 	bleq	ec5340 <__ccfg+0xea5398>
    2654:	13490b39 	movtne	r0, #39737	; 0x9b39
    2658:	0b0d0b0b 	bleq	34528c <__ccfg+0x3252e4>
		umwait (st);
    265c:	0b380b0c 	bleq	e05294 <__ccfg+0xde52ec>
    2660:	0d0d0000 	stceq	0, cr0, [sp, #-0]
		prcs =  m [1] + 3;
    2664:	3a0e0300 	bcc	38326c <__ccfg+0x3632c4>
	if (*m)
    2668:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		strcpy (buf, m);
    266c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2670:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
	if (runstrand (__outserial, buf) == 0) {
    2674:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2678:	0b3b0b3a 	bleq	ec5368 <__ccfg+0xea53c0>
		ufree (buf);
    267c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2680:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		memcpy (buf, m, prcs);
    2684:	010f0000 	mrseq	r0, CPSR
    2688:	01134901 	tsteq	r3, r1, lsl #18
    268c:	10000013 	andne	r0, r0, r3, lsl r0
}
    2690:	00000021 	andeq	r0, r0, r1, lsr #32
    2694:	03001611 	movweq	r1, #1553	; 0x611
int ser_in (word st, char *buf, int len) {
    2698:	3b0b3a0e 	blcc	2d0ed8 <__ccfg+0x2b0f30>
    269c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (len == 0)
    26a0:	12000013 	andne	r0, r0, #19
	if (__inpline == NULL) {
    26a4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		if ((prcs = running (__inserial)) == 0) {
    26a8:	00001301 	andeq	r1, r0, r1, lsl #6
    26ac:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
			prcs = runthread (__inserial);
    26b0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    26b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			if (prcs == 0) {
    26b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				npwait (st);
    26bc:	13490b39 	movtne	r0, #39737	; 0x9b39
		release;
    26c0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		join (prcs, st);
    26c4:	15150000 	ldrne	r0, [r5, #-0]
    26c8:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
	if (*__inpline == NULL) // bin cmd
    26cc:	00130113 	andseq	r0, r3, r3, lsl r1
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    26d0:	01131600 	tsteq	r3, r0, lsl #12
	if (prcs >= len)
    26d4:	0b3a0b0b 	bleq	e85308 <__ccfg+0xe65360>
		prcs = len-1;
    26d8:	0b39053b 	bleq	e43bcc <__ccfg+0xe23c24>
	memcpy (buf, __inpline, prcs);
    26dc:	00001301 	andeq	r1, r0, r1, lsl #6
    26e0:	03000d17 	movweq	r0, #3351	; 0xd17
    26e4:	3b0b3a0e 	blcc	2d0f24 <__ccfg+0x2b0f7c>
	ufree (__inpline);
    26e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	__inpline = NULL;
    26ec:	000b3813 	andeq	r3, fp, r3, lsl r8
	if (*buf) // if it's NULL, it's a bin cmd
    26f0:	01131800 	tsteq	r3, r0, lsl #16
		buf [prcs] = '\0';
    26f4:	0b0b0e03 	bleq	2c5f08 <__ccfg+0x2a5f60>
}
    26f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		prcs = strlen (__inpline);
    26fc:	13010b39 	movwne	r0, #6969	; 0x1b39
    2700:	21190000 	tstcs	r9, r0
		return 0;
    2704:	2f134900 	svccs	0x00134900
    2708:	1a00000b 	bne	273c <ser_outf+0x2c>
    270c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
int ser_outf (word st, const char *m, ...) {
    2710:	0b3b0b3a 	bleq	ec5400 <__ccfg+0xea5458>
    2714:	13490b39 	movtne	r0, #39737	; 0x9b39
	if ((prcs = running (__outserial)) != 0) {
    2718:	0a020c3f 	beq	8581c <__ccfg+0x65874>
    271c:	341b0000 	ldrcc	r0, [fp], #-0
		join (prcs, st);
    2720:	3a0e0300 	bcc	383328 <__ccfg+0x363380>
    2724:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		release;
    2728:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if ((buf = vform (NULL, m, ap)) == NULL) {
    272c:	1c00000a 	stcne	0, cr0, [r0], {10}
    2730:	0e03012e 	adfeqsp	f0, f3, #0.5
    2734:	0b3b0b3a 	bleq	ec5424 <__ccfg+0xea547c>
		umwait (st);
    2738:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    273c:	01111349 	tsteq	r1, r9, asr #6
	if (runstrand (__outserial, buf) == 0) {
    2740:	0a400112 	beq	1002b90 <__ccfg+0xfe2be8>
    2744:	00001301 	andeq	r1, r0, r1, lsl #6
    2748:	0300051d 	movweq	r0, #1309	; 0x51d
		ufree (buf);
    274c:	3b0b3a08 	blcc	2d0f74 <__ccfg+0x2b0fcc>
		npwait (st);
    2750:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    2754:	00060213 	andeq	r0, r6, r3, lsl r2
    2758:	00051e00 	andeq	r1, r5, r0, lsl #28
    275c:	0b3a0e03 	bleq	e85f70 <__ccfg+0xe65fc8>
    2760:	0b390b3b 	bleq	e45454 <__ccfg+0xe254ac>
int ser_inf (word st, const char *fmt, ...) {
    2764:	0a021349 	beq	87490 <__ccfg+0x674e8>
    2768:	051f0000 	ldreq	r0, [pc, #-0]	; 2770 <ser_inf+0xc>
	if (fmt == NULL)
    276c:	3a080300 	bcc	203374 <__ccfg+0x1e33cc>
	if (__inpline == NULL) {
    2770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((prcs = running (__inserial)) == 0) {
    2774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2778:	2000000a 	andcs	r0, r0, sl
			prcs = runthread (__inserial);
    277c:	0e03012e 	adfeqsp	f0, f3, #0.5
    2780:	0b3b0b3a 	bleq	ec5470 <__ccfg+0xea54c8>
			if (prcs == 0) {
    2784:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				npwait (st);
    2788:	0b201349 	bleq	8074b4 <__ccfg+0x7e750c>
		release;
    278c:	00001301 	andeq	r1, r0, r1, lsl #6
		join (prcs, st);
    2790:	03000521 	movweq	r0, #1313	; 0x521
    2794:	3b0b3a08 	blcc	2d0fbc <__ccfg+0x2b1014>
	va_start (ap, fmt);
    2798:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	prcs = vscan (__inpline, fmt, ap);
    279c:	22000013 	andcs	r0, r0, #19
    27a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	ufree (__inpline);
    27a4:	0b3b0b3a 	bleq	ec5494 <__ccfg+0xea54ec>
	__inpline = NULL;
    27a8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    27ac:	34230000 	strtcc	r0, [r3], #-0
    27b0:	3a080300 	bcc	2033b8 <__ccfg+0x1e3410>
    27b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		return 0;
    27b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    27bc:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
    27c0:	01111331 	tsteq	r1, r1, lsr r3
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27c4:	0a400112 	beq	1002c14 <__ccfg+0xfe2c6c>
    27c8:	05250000 	streq	r0, [r5, #-0]!
    27cc:	02133100 	andseq	r3, r3, #0, 2
	RF_cmdFs.frequency = 
    27d0:	26000006 	strcs	r0, [r0], -r6
}
    27d4:	13310034 	teqne	r1, #52	; 0x34
    27d8:	1d270000 	stcne	0, cr0, [r7, #-0]
    27dc:	11133101 	tstne	r3, r1, lsl #2
    27e0:	58011201 	stmdapl	r1, {r0, r9, ip}
static int option (int opt, address val) {
    27e4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    27e8:	2800000b 	stmdacs	r0, {r0, r1, r3}
    27ec:	13310005 	teqne	r1, #5
    27f0:	00000a02 	andeq	r0, r0, r2, lsl #20
    27f4:	31000529 	tstcc	r0, r9, lsr #10
    27f8:	00000013 	andeq	r0, r0, r3, lsl r0
    27fc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2800:	030b130e 	movweq	r1, #45838	; 0xb30e
    2804:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2808:	10011106 	andne	r1, r1, r6, lsl #2
    280c:	02000006 	andeq	r0, r0, #6
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2810:	0b0b0024 	bleq	2c28a8 <__ccfg+0x2a2900>
    2814:	0e030b3e 	vmoveq.16	d3[0], r0
			goto RVal;
    2818:	16030000 	strne	r0, [r3], -r0
			_BIS (dstate, DSTATE_RXON);
    281c:	3a0e0300 	bcc	383424 <__ccfg+0x36347c>
    2820:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	int ret = 0;
    2824:	0013490b 	andseq	r4, r3, fp, lsl #18
			p_trigger (drvprcs, qevent);
    2828:	00240400 	eoreq	r0, r4, r0, lsl #8
    282c:	0b3e0b0b 	bleq	f85460 <__ccfg+0xf654b8>
    2830:	00000803 	andeq	r0, r0, r3, lsl #16
    2834:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2838:	06000013 			; <UNDEFINED> instruction: 0x06000013
    283c:	13490035 	movtne	r0, #36917	; 0x9035
    2840:	13070000 	movwne	r0, #28672	; 0x7000
    2844:	3a0b0b01 	bcc	2c5450 <__ccfg+0x2a54a8>
    2848:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    284c:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    2850:	000d0800 	andeq	r0, sp, r0, lsl #16
			_BIC (dstate, DSTATE_RXON);
    2854:	0b3a0e03 	bleq	e86068 <__ccfg+0xe660c0>
    2858:	0b390b3b 	bleq	e4554c <__ccfg+0xe255a4>
			statid = (val == NULL) ? 0 : *val;
    285c:	0b0b1349 	bleq	2c7588 <__ccfg+0x2a75e0>
    2860:	0b0c0b0d 	bleq	30549c <__ccfg+0x2e54f4>
	int ret = 0;
    2864:	00000b38 	andeq	r0, r0, r8, lsr fp
			ret = (int) statid;
    2868:	03000d09 	movweq	r0, #3337	; 0xd09
	if (val != NULL)
    286c:	3b0b3a0e 	blcc	2d10ac <__ccfg+0x2b1104>
		*val = ret;
    2870:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			ret = rbuffl + 2;
    2874:	000b3813 	andeq	r3, fp, r3, lsl r8
    2878:	00340a00 	eorseq	r0, r4, r0, lsl #20
			if (val != NULL) {
    287c:	0b3a0e03 	bleq	e86090 <__ccfg+0xe660e8>
				memcpy (val, &rxstat,
    2880:	0b390b3b 	bleq	e45574 <__ccfg+0xe255cc>
    2884:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2768 <ser_inf+0x4>
				memset (&rxstat, 0, 
    2888:	00000c3c 	andeq	r0, r0, ip, lsr ip
    288c:	0b000f0b 	bleq	64c0 <__exidx_end+0x8c0>
			if (val == NULL)
    2890:	0013490b 	andseq	r4, r3, fp, lsl #18
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2894:	01010c00 	tsteq	r1, r0, lsl #24
    2898:	13011349 	movwne	r1, #4937	; 0x1349
				utimer_set (bckf_timer, *val);
    289c:	210d0000 	mrscs	r0, (UNDEF: 13)
    28a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    28a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			for (ret = 0; ret < 8; ret++)
    28a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				if (RF_cmdPropRadioDivSetup.txPower
    28ac:	13490b39 	movtne	r0, #39737	; 0x9b39
					== patable [ret])
    28b0:	150f0000 	strne	r0, [pc, #-0]	; 28b8 <option+0xd4>
				if (RF_cmdPropRadioDivSetup.txPower
    28b4:	010c2701 	tsteq	ip, r1, lsl #14
			for (ret = 0; ret < 8; ret++)
    28b8:	10000013 	andne	r0, r0, r3, lsl r0
    28bc:	13490005 	movtne	r0, #36869	; 0x9005
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28c0:	34110000 	ldrcc	r0, [r1], #-0
    28c4:	3a0e0300 	bcc	3834cc <__ccfg+0x363524>
    28c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    28cc:	3f13490b 	svccc	0x0013490b
    28d0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			_BIS (dstate, DSTATE_IRST);
    28d4:	01131200 	tsteq	r3, r0, lsl #4
    28d8:	0b3a0b0b 	bleq	e8550c <__ccfg+0xe65564>
    28dc:	0b39053b 	bleq	e43dd0 <__ccfg+0xe23e28>
			ret = (int) channel;
    28e0:	00001301 	andeq	r1, r0, r1, lsl #6
			goto RVal;
    28e4:	03000d13 	movweq	r0, #3347	; 0xd13
				(*val > 7) ? 7 : *val;
    28e8:	3b0b3a0e 	blcc	2d1128 <__ccfg+0x2b1180>
    28ec:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    28f0:	000b3813 	andeq	r3, fp, r3, lsl r8
    28f4:	01131400 	tsteq	r3, r0, lsl #8
			plugch ();
    28f8:	0b0b0e03 	bleq	2c610c <__ccfg+0x2a6164>
			_BIS (dstate, DSTATE_IRST);
    28fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2900:	13010b39 	movwne	r0, #6969	; 0x1b39
			ret = (int) vrate;
    2904:	21150000 	tstcs	r5, r0
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2908:	2f134900 	svccs	0x00134900
    290c:	1600000b 	strne	r0, [r0], -fp
    2910:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2860 <option+0x7c>
    2914:	0b3a0e03 	bleq	e86128 <__ccfg+0xe66180>
    2918:	0b390b3b 	bleq	e4560c <__ccfg+0xe25664>
    291c:	01110c27 	tsteq	r1, r7, lsr #24
    2920:	0a400112 	beq	1002d70 <__ccfg+0xfe2dc8>
    2924:	00001301 	andeq	r1, r0, r1, lsl #6
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2928:	03000517 	movweq	r0, #1303	; 0x517
    292c:	3b0b3a0e 	blcc	2d116c <__ccfg+0x2b11c4>
    2930:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2934:	00060213 	andeq	r0, r6, r3, lsl r2
			syserror (EREQPAR, "cc13 op");
    2938:	00341800 	eorseq	r1, r4, r0, lsl #16
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
    2940:	0b390b3b 	bleq	e45634 <__ccfg+0xe2568c>
    2944:	06021349 	streq	r1, [r2], -r9, asr #6
    2948:	0a190000 	beq	642950 <__ccfg+0x6229a8>
    294c:	3a0e0300 	bcc	383554 <__ccfg+0x3635ac>
    2950:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2954:	1a00000b 	bne	2988 <issue_cmd+0x14>
    2958:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    295c:	341b0000 	ldrcc	r0, [fp], #-0
    2960:	3a080300 	bcc	203568 <__ccfg+0x1e35c0>
    2964:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2968:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    296c:	0000000a 	andeq	r0, r0, sl
    2970:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
static void issue_cmd (lword cmd) {
    2974:	030b130e 	movweq	r1, #45838	; 0xb30e
    2978:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    297c:	10011106 	andne	r1, r1, r6, lsl #2
    2980:	02000006 	andeq	r0, r0, #6
    2984:	0b0b0024 	bleq	2c2a1c <__ccfg+0x2a2a74>
		if (res != 0x86)
    2988:	0e030b3e 	vmoveq.16	d3[0], r0
			syserror (EHARDWARE, "hang ic0");
    298c:	16030000 	strne	r0, [r3], -r0
    2990:	3a0e0300 	bcc	383598 <__ccfg+0x3635f0>
		if (cnt-- == 0) {
    2994:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			diag ("HUP %lx %lx", cmd, res);
    2998:	0013490b 	andseq	r4, r3, fp, lsl #18
    299c:	00240400 	eoreq	r0, r4, r0, lsl #8
			syserror (EHARDWARE, "hang ic0");
    29a0:	0b3e0b0b 	bleq	f855d4 <__ccfg+0xf6562c>
		udelay (1);
    29a4:	00000803 	andeq	r0, r0, r3, lsl #16
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29a8:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
}
    29ac:	06000013 			; <UNDEFINED> instruction: 0x06000013
    29b0:	13490035 	movtne	r0, #36917	; 0x9035
    29b4:	0f070000 	svceq	0x00070000
    29b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
static void rx_de () {
    29bc:	08000013 	stmdaeq	r0, {r0, r1, r4}
	if ((dstate & DSTATE_RXAC) == 0)
    29c0:	0b0b0113 	bleq	2c2e14 <__ccfg+0x2a2e6c>
    29c4:	0b3b0b3a 	bleq	ec56b4 <__ccfg+0xea570c>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29c8:	13010b39 	movwne	r0, #6969	; 0x1b39
	_BIC (dstate, DSTATE_RXAC);
    29cc:	0d090000 	stceq	0, cr0, [r9, #-0]
    29d0:	3a0e0300 	bcc	3835d8 <__ccfg+0x363630>
}
    29d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    29d8:	0b13490b 	bleq	4d4e0c <__ccfg+0x4b4e64>
    29dc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
static void rf_off () {
    29e0:	000b380b 	andeq	r3, fp, fp, lsl #16
	if ((dstate & DSTATE_RFON) == 0)
    29e4:	000d0a00 	andeq	r0, sp, r0, lsl #20
    29e8:	0b3a0e03 	bleq	e861fc <__ccfg+0xe66254>
	IntDisable (INT_RFC_CPE_0);
    29ec:	0b390b3b 	bleq	e456e0 <__ccfg+0xe25738>
    29f0:	0b381349 	bleq	e0771c <__ccfg+0xde7774>
    29f4:	340b0000 	strcc	r0, [fp], #-0
	RFCAdi3VcoLdoVoltageMode (false);
    29f8:	3a0e0300 	bcc	383600 <__ccfg+0x363658>
	RFCSynthPowerDown ();
    29fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a00:	3f13490b 	svccc	0x0013490b
    2a04:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a08:	01010c00 	tsteq	r1, r0, lsl #24
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a0c:	13011349 	movwne	r1, #4937	; 0x1349
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a10:	210d0000 	mrscs	r0, (UNDEF: 13)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a14:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2a18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2a1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	_BIC (dstate, DSTATE_RFON);
    2a20:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a24:	150f0000 	strne	r0, [pc, #-0]	; 2a2c <rf_off+0x4c>
}
    2a28:	010c2701 	tsteq	ip, r1, lsl #14
    2a2c:	10000013 	andne	r0, r0, r3, lsl r0
    2a30:	13490005 	movtne	r0, #36869	; 0x9005
    2a34:	34110000 	ldrcc	r0, [r1], #-0
    2a38:	3a0e0300 	bcc	383640 <__ccfg+0x363698>
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a3c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a40:	3f13490b 	svccc	0x0013490b
    2a44:	000c3c0c 	andeq	r3, ip, ip, lsl #24
		if (cmd->status == tstat)
    2a48:	01131200 	tsteq	r3, r0, lsl #4
		if (timeout-- == 0) {
    2a4c:	0b3a0b0b 	bleq	e85680 <__ccfg+0xe656d8>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a50:	0b39053b 	bleq	e43f44 <__ccfg+0xe23f9c>
    2a54:	00001301 	andeq	r1, r0, r1, lsl #6
    2a58:	03000d13 	movweq	r0, #3347	; 0xd13
			syserror (EHARDWARE, "rt2");
    2a5c:	3b0b3a0e 	blcc	2d129c <__ccfg+0x2b12f4>
    2a60:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		udelay (1);
    2a64:	000b3813 	andeq	r3, fp, r3, lsl r8
		if (cmd->status == tstat)
    2a68:	01131400 	tsteq	r3, r0, lsl #8
}
    2a6c:	0b0b0e03 	bleq	2c6280 <__ccfg+0x2a62d8>
    2a70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a74:	13010b39 	movwne	r0, #6969	; 0x1b39
    2a78:	21150000 	tstcs	r5, r0
static void rf_on () {
    2a7c:	2f134900 	svccs	0x00134900
    2a80:	1600000b 	strne	r0, [r0], -fp
	OSCHF_TurnOnXosc();
    2a84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a88:	0b3b0b3a 	bleq	ec5778 <__ccfg+0xea57d0>
    2a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a90:	0a020c3f 	beq	85b94 <__ccfg+0x65bec>
    2a94:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a98:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2a9c:	3b0b3a0e 	blcc	2d12dc <__ccfg+0x2b1334>
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2aa0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2aa4:	1201110c 	andne	r1, r1, #12, 2
	issue_cmd (
    2aa8:	000a4001 	andeq	r4, sl, r1
    2aac:	00051800 	andeq	r1, r5, r0, lsl #16
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ab0:	0b3a0e03 	bleq	e862c4 <__ccfg+0xe6631c>
    2ab4:	0b390b3b 	bleq	e457a8 <__ccfg+0xe25800>
    2ab8:	06021349 	streq	r1, [r2], -r9, asr #6
   pPatchTab[80] = 0;
    2abc:	34190000 	ldrcc	r0, [r9], #-0
   } while (--nIterations);
    2ac0:	3a0e0300 	bcc	3836c8 <__ccfg+0x363720>
   pPatchTab[53] = 2;
    2ac4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ac8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
   pPatchTab[55] = 3;
    2acc:	1a000006 	bne	2aec <rf_on.part.0+0x78>
   pPatchTab[110] = 4;
    2ad0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
   pPatchTab[107] = 5;
    2ad4:	341b0000 	ldrcc	r0, [fp], #-0
   pPatchTab[65] = 6;
    2ad8:	3a080300 	bcc	2036e0 <__ccfg+0x1e3738>
    2adc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   pPatchTab[57] = 1;
    2ae0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
   pIrqPatch[1] = _IRQ_PATCH_0;
    2ae4:	0000000a 	andeq	r0, r0, sl
   const uint32_t *pS = patchGenfskRfe;
    2ae8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
      t2 = *pS++;
    2aec:	030b130e 	movweq	r1, #45838	; 0xb30e
      t4 = *pS++;
    2af0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
      t6 = *pS++;
    2af4:	10011106 	andne	r1, r1, r6, lsl #2
      t8 = *pS++;
    2af8:	02000006 	andeq	r0, r0, #6
      *pD++ = t1;
    2afc:	0b0b0024 	bleq	2c2b94 <__ccfg+0x2a2bec>
      *pD++ = t2;
    2b00:	0e030b3e 	vmoveq.16	d3[0], r0
      *pD++ = t3;
    2b04:	16030000 	strne	r0, [r3], -r0
      *pD++ = t5;
    2b08:	3a0e0300 	bcc	383710 <__ccfg+0x363768>
      *pD++ = t7;
    2b0c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   } while (--nIterations);
    2b10:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b14:	00240400 	eoreq	r0, r4, r0, lsl #8
      *pD++ = t8;
    2b18:	0b3e0b0b 	bleq	f8574c <__ccfg+0xf657a4>
   } while (--nIterations);
    2b1c:	00000803 	andeq	r0, r0, r3, lsl #16
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b20:	03011305 	movweq	r1, #4869	; 0x1305
   *pD++ = t2;
    2b24:	3a0b0b0e 	bcc	2c5764 <__ccfg+0x2a57bc>
   *pD++ = t3;
    2b28:	010b3b0b 	tsteq	fp, fp, lsl #22
   *pD++ = t4;
    2b2c:	06000013 			; <UNDEFINED> instruction: 0x06000013
   *pD++ = t5;
    2b30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2b34:	0b381349 	bleq	e07860 <__ccfg+0xde78b8>
	RFCAdi3VcoLdoVoltageMode (true);
    2b38:	00000c34 	andeq	r0, r0, r4, lsr ip
    2b3c:	0b000f07 	bleq	6760 <__exidx_end+0xb60>
       	RFCRfTrimSet (&rfTrim);
    2b40:	0800000b 	stmdaeq	r0, {r0, r1, r3}
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b44:	13490026 	movtne	r0, #36902	; 0x9026
    2b48:	35090000 	strcc	r0, [r9, #-0]
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b4c:	00134900 	andseq	r4, r3, r0, lsl #18
    2b50:	000f0a00 	andeq	r0, pc, r0, lsl #20
	issue_cmd ((lword)&cmd_srt);
    2b54:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2b58:	130b0000 	movwne	r0, #45056	; 0xb000
	issue_cmd ((lword)&RF_cmdFs);
    2b5c:	3a0b0b01 	bcc	2c5768 <__ccfg+0x2a57c0>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b64:	0013010b 	andseq	r0, r3, fp, lsl #2
    2b68:	000d0c00 	andeq	r0, sp, r0, lsl #24
	IntEnable (INT_RFC_CPE_0);
    2b6c:	0b3a0e03 	bleq	e86380 <__ccfg+0xe663d8>
	_BIC (dstate, DSTATE_IRST);
    2b70:	0b390b3b 	bleq	e45864 <__ccfg+0xe258bc>
    2b74:	0b0b1349 	bleq	2c78a0 <__ccfg+0x2a78f8>
    2b78:	0b0c0b0d 	bleq	3057b4 <__ccfg+0x2e580c>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b7c:	00000b38 	andeq	r0, r0, r8, lsr fp
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b80:	03000d0d 	movweq	r0, #3341	; 0xd0d
	IntEnable (INT_RFC_CPE_0);
    2b84:	3b0b3a0e 	blcc	2d13c4 <__ccfg+0x2b141c>
    2b88:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    2b8c:	000b3813 	andeq	r3, fp, r3, lsl r8
	IntEnable (INT_RFC_CPE_0);
    2b90:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2b94:	0b3a0e03 	bleq	e863a8 <__ccfg+0xe66400>
    2b98:	0b390b3b 	bleq	e4588c <__ccfg+0xe258e4>
    2b9c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2a80 <rf_on.part.0+0xc>
    2ba0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2ba4:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    2ba8:	00130113 	andseq	r0, r3, r3, lsl r1
    2bac:	00211000 	eoreq	r1, r1, r0
    2bb0:	16110000 	ldrne	r0, [r1], -r0
    2bb4:	3a0e0300 	bcc	3837bc <__ccfg+0x363814>
    2bb8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bbc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2bc0:	01151200 	tsteq	r5, r0, lsl #4
    2bc4:	13010c27 	movwne	r0, #7207	; 0x1c27
    2bc8:	05130000 	ldreq	r0, [r3, #-0]
    2bcc:	00134900 	andseq	r4, r3, r0, lsl #18
    2bd0:	00341400 	eorseq	r1, r4, r0, lsl #8
    2bd4:	0b3a0e03 	bleq	e863e8 <__ccfg+0xe66440>
    2bd8:	0b39053b 	bleq	e440cc <__ccfg+0xe24124>
    2bdc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2ac0 <rf_on.part.0+0x4c>
    2be0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2be4:	0b011315 	bleq	47840 <__ccfg+0x27898>
    2be8:	3b0b3a0b 	blcc	2d141c <__ccfg+0x2b1474>
    2bec:	010b3905 	tsteq	fp, r5, lsl #18
    2bf0:	16000013 			; <UNDEFINED> instruction: 0x16000013
static void rx_int_enable () {
    2bf4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2bf8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2bfc:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c00:	00000b38 	andeq	r0, r0, r8, lsr fp
    2c04:	03011317 	movweq	r1, #4887	; 0x1317
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c08:	3a0b0b0e 	bcc	2c5848 <__ccfg+0x2a58a0>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c0c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c10:	0013010b 	andseq	r0, r3, fp, lsl #2
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c14:	00211800 	eoreq	r1, r1, r0, lsl #16
    2c18:	0b2f1349 	bleq	bc7944 <__ccfg+0xba799c>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c1c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2c20:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2c24:	3b0b3a0e 	blcc	2d1464 <__ccfg+0x2b14bc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c2c:	1113490c 	tstne	r3, ip, lsl #18
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c30:	40011201 	andmi	r1, r1, r1, lsl #4
		if (db->status == DATA_ENTRY_FINISHED) {
    2c34:	0013010a 	andseq	r0, r3, sl, lsl #2
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c38:	00051a00 	andeq	r1, r5, r0, lsl #20
    2c3c:	0b3a0803 	bleq	e84c50 <__ccfg+0xe64ca8>
			nr++;
    2c40:	0b390b3b 	bleq	e45934 <__ccfg+0xe2598c>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c44:	06021349 	streq	r1, [r2], -r9, asr #6
    2c48:	341b0000 	ldrcc	r0, [fp], #-0
    2c4c:	3a080300 	bcc	203854 <__ccfg+0x1e38ac>
    2c50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				__dp [pl + 1] = __dp [pl] - 128;
    2c54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				pl = __dp [1] + 2;
    2c58:	1c000006 	stcne	0, cr0, [r0], {6}
				__dp [pl + 1] = __dp [pl] - 128;
    2c5c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2c60:	0b3b0b3a 	bleq	ec5950 <__ccfg+0xea59a8>
				__dp [pl] = 0;
    2c64:	01110b39 	tsteq	r1, r9, lsr fp
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c68:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    2c6c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2c70:	3b0b3a0e 	blcc	2d14b0 <__ccfg+0x2b1508>
			db->status = DATA_ENTRY_PENDING;
    2c74:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c78:	1113490c 	tstne	r3, ip, lsl #18
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c7c:	40011201 	andmi	r1, r1, r1, lsl #4
				diag ("BAD RX");
    2c80:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    2c84:	08030034 	stmdaeq	r3, {r2, r4, r5}
	if (nr) {
    2c88:	0b3b0b3a 	bleq	ec5978 <__ccfg+0xea59d0>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c8c:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    2c90:	00000a02 	andeq	r0, r0, r2, lsl #20
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c94:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    2c98:	3b0b3a0e 	blcc	2d14d8 <__ccfg+0x2b1530>
    2c9c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
}
    2ca0:	1201110c 	andne	r1, r1, #12, 2
    2ca4:	480a4001 	stmdami	sl, {r0, lr}
    2ca8:	0013010a 	andseq	r0, r3, sl, lsl #2
    2cac:	00052000 	andeq	r2, r5, r0
    2cb0:	0b3a0803 	bleq	e84cc4 <__ccfg+0xe64d1c>
    2cb4:	0b390b3b 	bleq	e459a8 <__ccfg+0xe25a00>
    2cb8:	0a021349 	beq	879e4 <__ccfg+0x67a3c>
    2cbc:	0a210000 	beq	842cc4 <__ccfg+0x822d1c>
    2cc0:	3a080300 	bcc	2038c8 <__ccfg+0x1e3920>
thread (cc1350_driver)
    2cc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2cc8:	0001110b 	andeq	r1, r1, fp, lsl #2
    2ccc:	010b2200 	mrseq	r2, R11_fiq
    2cd0:	13010655 	movwne	r0, #5717	; 0x1655
    2cd4:	34230000 	strtcc	r0, [r3], #-0
		if (dstate & DSTATE_IRST) {
    2cd8:	3a080300 	bcc	2038e0 <__ccfg+0x1e3938>
    2cdc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ce0:	0013490b 	andseq	r4, r3, fp, lsl #18
			rf_off ();
    2ce4:	010b2400 	tsteq	fp, r0, lsl #8
			_BIC (dstate,
    2ce8:	01120111 	tsteq	r2, r1, lsl r1
    2cec:	00001301 	andeq	r1, r0, r1, lsl #6
		if (dstate & DSTATE_RXAC) {
    2cf0:	11010b25 	tstne	r1, r5, lsr #22
    2cf4:	00011201 	andeq	r1, r1, r1, lsl #4
			if ((dstate & DSTATE_RXON) == 0)
    2cf8:	11010000 	mrsne	r0, (UNDEF: 1)
				rx_de ();
    2cfc:	130e2501 	movwne	r2, #58625	; 0xe501
		if (paylen == 0) {
    2d00:	1b0e030b 	blne	383934 <__ccfg+0x36398c>
    2d04:	1106550e 	tstne	r6, lr, lsl #10
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d08:	00061001 	andeq	r1, r6, r1
    2d0c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2d10:	0b3e0b0b 	bleq	f85944 <__ccfg+0xf6599c>
    2d14:	00000e03 	andeq	r0, r0, r3, lsl #28
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d18:	03001603 	movweq	r1, #1539	; 0x603
    2d1c:	3b0b3a0e 	blcc	2d155c <__ccfg+0x2b15b4>
    2d20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2d24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2d28:	0b0b0024 	bleq	2c2dc0 <__ccfg+0x2a2e18>
    2d2c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2d30:	13050000 	movwne	r0, #20480	; 0x5000
    2d34:	0b0e0301 	bleq	383940 <__ccfg+0x363998>
		} else if (dstate & DSTATE_RXON) {
    2d38:	3b0b3a0b 	blcc	2d156c <__ccfg+0x2b15c4>
	if (dstate & DSTATE_RFON)
    2d3c:	0013010b 	andseq	r0, r3, fp, lsl #2
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d40:	000d0600 	andeq	r0, sp, r0, lsl #12
		re->status = DATA_ENTRY_PENDING;
    2d44:	13490e03 	movtne	r0, #40451	; 0x9e03
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d48:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
	issue_cmd ((lword)&RF_cmdPropRx);
    2d4c:	0f070000 	svceq	0x00070000
	_BIS (dstate, DSTATE_RXAC);
    2d50:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2d54:	00260800 	eoreq	r0, r6, r0, lsl #16
    2d58:	00001349 	andeq	r1, r0, r9, asr #6
    2d5c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
	if (dstate & DSTATE_RXAC)
    2d60:	0a000013 	beq	2db4 <cc1350_driver+0xf0>
    2d64:	0b0b000f 	bleq	2c2da8 <__ccfg+0x2a2e00>
				if (statid != 0xffff)
    2d68:	00001349 	andeq	r1, r0, r9, asr #6
    2d6c:	0b01130b 	bleq	479a0 <__ccfg+0x279f8>
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d70:	3b0b3a0b 	blcc	2d15a4 <__ccfg+0x2b15fc>
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d74:	010b390b 	tsteq	fp, fp, lsl #18
		if (paylen == 0) {
    2d78:	0c000013 	stceq	0, cr0, [r0], {19}
			wait (qevent, DR_LOOP);
    2d7c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2d80:	0b3b0b3a 	bleq	ec5a70 <__ccfg+0xea5ac8>
			if (dstate & DSTATE_RXAC) {
    2d84:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d88:	0b0d0b0b 	bleq	3459bc <__ccfg+0x325a14>
				rx_int_enable ();
    2d8c:	0b380b0c 	bleq	e059c4 <__ccfg+0xde5a1c>
			release;
    2d90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
			} else if (dstate & DSTATE_RFON) {
    2d94:	3a0e0300 	bcc	38399c <__ccfg+0x3639f4>
				delay (offdelay, DR_GOOF);
    2d98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d9c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2da0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
		if (bckf_timer) {
    2da4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			wait (qevent, DR_LOOP);
    2da8:	0b3b0b3a 	bleq	ec5a98 <__ccfg+0xea5af0>
    2dac:	13490b39 	movtne	r0, #39737	; 0x9b39
    2db0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			delay (bckf_timer, DR_LOOP);
    2db4:	010f0000 	mrseq	r0, CPSR
    2db8:	01134901 	tsteq	r3, r1, lsl #18
			if (dstate & DSTATE_RXAC)
    2dbc:	10000013 	andne	r0, r0, r3, lsl r0
    2dc0:	00000021 	andeq	r0, r0, r1, lsr #32
	if (dstate & DSTATE_RFON)
    2dc4:	03001611 	movweq	r1, #1553	; 0x611
    2dc8:	3b0b3a0e 	blcc	2d1608 <__ccfg+0x2b1660>
		rx_de ();
    2dcc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		RF_cmdPropTx . status = 0;
    2dd0:	12000013 	andne	r0, r0, #19
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2dd4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2dd8:	00001301 	andeq	r1, r0, r1, lsl #6
    2ddc:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
		issue_cmd ((lword)&cmd_cs);
    2de0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
		if (dstate & DSTATE_IRST)
    2de4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2de8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2dec:	13490b39 	movtne	r0, #39737	; 0x9b39
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2df0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2df4:	13150000 	tstne	r5, #0
			delay (1, DR_XMIT);
    2df8:	3a0b0b01 	bcc	2c5a04 <__ccfg+0x2a5a5c>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2dfc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e00:	0013010b 	andseq	r0, r3, fp, lsl #2
    2e04:	000d1600 	andeq	r1, sp, r0, lsl #12
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e08:	0b3a0e03 	bleq	e8661c <__ccfg+0xe66674>
    2e0c:	0b39053b 	bleq	e44300 <__ccfg+0xe24358>
				RF_cmdPropTx . status = 0;
    2e10:	0b381349 	bleq	e07b3c <__ccfg+0xde7b94>
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e14:	13170000 	tstne	r7, #0
				issue_cmd ((lword)&RF_cmdPropTx);
    2e18:	0b0e0301 	bleq	383a24 <__ccfg+0x363a7c>
				proceed (DR_XMIT);
    2e1c:	3b0b3a0b 	blcc	2d1650 <__ccfg+0x2b16a8>
    2e20:	010b3905 	tsteq	fp, r5, lsl #18
			txtries++;
    2e24:	18000013 	stmdane	r0, {r0, r1, r4}
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e28:	13490021 	movtne	r0, #36897	; 0x9021
    2e2c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2e30:	3f012e19 	svccc	0x00012e19
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e34:	3a0e030c 	bcc	383a6c <__ccfg+0x363ac4>
		goto DR_LOOP__;
    2e38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e3c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		paylen = 0;
    2e40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e44:	010a4001 	tsteq	sl, r1
		txtries = 0;
    2e48:	1a000013 	bne	2e9c <cc1350_driver+0x1d8>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e4c:	08030005 	stmdaeq	r3, {r0, r2}
    2e50:	0b3b0b3a 	bleq	ec5b40 <__ccfg+0xea5b98>
    2e54:	13490b39 	movtne	r0, #39737	; 0x9b39
    2e58:	00000602 	andeq	r0, r0, r2, lsl #12
    2e5c:	0300341b 	movweq	r3, #1051	; 0x41b
		    tcvphy_top (physid) == NULL)
    2e60:	3b0b3a08 	blcc	2d1688 <__ccfg+0x2b16e0>
    2e64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e68:	00060213 	andeq	r0, r6, r3, lsl r2
    2e6c:	000a1c00 	andeq	r1, sl, r0, lsl #24
			rf_off ();
    2e70:	0b3a0e03 	bleq	e86684 <__ccfg+0xe666dc>
endthread
    2e74:	0b390b3b 	bleq	e45b68 <__ccfg+0xe25bc0>
    2e78:	0b1d0000 	bleq	742e80 <__ccfg+0x722ed8>
    2e7c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2e80:	00130101 	andseq	r0, r3, r1, lsl #2
    2e84:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2e88:	0b3a0803 	bleq	e84e9c <__ccfg+0xe64ef4>
    2e8c:	0b390b3b 	bleq	e45b80 <__ccfg+0xe25bd8>
    2e90:	0a021349 	beq	87bbc <__ccfg+0x67c14>
    2e94:	0b1f0000 	bleq	7c2e9c <__ccfg+0x7a2ef4>
    2e98:	01065501 	tsteq	r6, r1, lsl #10
    2e9c:	20000013 	andcs	r0, r0, r3, lsl r0
    2ea0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2ea4:	0b3b0b3a 	bleq	ec5b94 <__ccfg+0xea5bec>
    2ea8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2eac:	0b210000 	bleq	842eb4 <__ccfg+0x822f0c>
    2eb0:	00065501 	andeq	r5, r6, r1, lsl #10
void RFCCPE0IntHandler (void) {
    2eb4:	11010000 	mrsne	r0, (UNDEF: 1)
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eb8:	130e2501 	movwne	r2, #58625	; 0xe501
		_BIS (dstate, DSTATE_IRST);
    2ebc:	1b0e030b 	blne	383af0 <__ccfg+0x363b48>
    2ec0:	0006100e 	andeq	r1, r6, lr
    2ec4:	00240200 	eoreq	r0, r4, r0, lsl #4
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2ec8:	0b3e0b0b 	bleq	f85afc <__ccfg+0xf65b54>
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2ecc:	00000e03 	andeq	r0, r0, r3, lsl #28
    2ed0:	03001603 	movweq	r1, #1539	; 0x603
	p_trigger (drvprcs, qevent);
    2ed4:	3b0b3a0e 	blcc	2d1714 <__ccfg+0x2b176c>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ed8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2edc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2ee0:	13490026 	movtne	r0, #36902	; 0x9026
    2ee4:	24050000 	strcs	r0, [r5], #-0
    2ee8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2eec:	0008030b 	andeq	r0, r8, fp, lsl #6
    2ef0:	00160600 	andseq	r0, r6, r0, lsl #12
    2ef4:	0b3a0e03 	bleq	e86708 <__ccfg+0xe66760>
    2ef8:	0b39053b 	bleq	e443ec <__ccfg+0xe24444>
    2efc:	00001349 	andeq	r1, r0, r9, asr #6
	RISE_N_SHINE;
    2f00:	0b011707 	bleq	48b24 <__ccfg+0x28b7c>
    2f04:	3b0b3a0b 	blcc	2d1738 <__ccfg+0x2b1790>
    2f08:	010b390b 	tsteq	fp, fp, lsl #18
}
    2f0c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2f10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f14:	0b3b0b3a 	bleq	ec5c04 <__ccfg+0xea5c5c>
    2f18:	13490b39 	movtne	r0, #39737	; 0x9b39
    2f1c:	01090000 	mrseq	r0, (UNDEF: 9)
    2f20:	01134901 	tsteq	r3, r1, lsl #18
void phys_cc1350 (int phy, int mbs) {
    2f24:	0a000013 	beq	2f78 <phys_cc1350+0x54>
	if (rbuffl != 0)
    2f28:	13490021 	movtne	r0, #36897	; 0x9021
    2f2c:	00000b2f 	andeq	r0, r0, pc, lsr #22
		syserror (ETOOMANY, "cc13");
    2f30:	0b01130b 	bleq	47b64 <__ccfg+0x27bbc>
		syserror (EREQPAR, "cc13 mb");
    2f34:	3b0b3a0b 	blcc	2d1768 <__ccfg+0x2b17c0>
	if (mbs == 0)
    2f38:	010b390b 	tsteq	fp, fp, lsl #18
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f3c:	0c000013 	stceq	0, cr0, [r0], {19}
		syserror (EREQPAR, "cc13 mb");
    2f40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f44:	0b3b0b3a 	bleq	ec5c34 <__ccfg+0xea5c8c>
	i = 0;
    2f48:	13490b39 	movtne	r0, #39737	; 0x9b39
	rbuffl = (byte) mbs;
    2f4c:	00000b38 	andeq	r0, r0, r8, lsr fp
		db->config.type = 0;	// General (data in structure)
    2f50:	0b000f0d 	bleq	6b8c <__exidx_end+0xf8c>
	rbuffl = (byte) mbs;
    2f54:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f58:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2f5c:	0b3a0b0b 	bleq	e85b90 <__ccfg+0xe65be8>
		if (db == NULL)
    2f60:	0b390b3b 	bleq	e45c54 <__ccfg+0xe25cac>
			syserror (EMALLOC, "cc13");
    2f64:	00001301 	andeq	r1, r0, r1, lsl #6
    2f68:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2f6c:	3b0b3a08 	blcc	2d1794 <__ccfg+0x2b17ec>
		db->status = DATA_ENTRY_PENDING;
    2f70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (i)
    2f74:	000b3813 	andeq	r3, fp, r3, lsl r8
			da->pNextEntry = (byte*) db;
    2f78:	000f1000 	andeq	r1, pc, r0
		db->length = rbuffl + 2;
    2f7c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2f80:	13110000 	tstne	r1, #0
		db->config.type = 0;	// General (data in structure)
    2f84:	0b0e0301 	bleq	383b90 <__ccfg+0x363be8>
		db->length = rbuffl + 2;
    2f88:	3b0b3a05 	blcc	2d17a4 <__ccfg+0x2b17fc>
	db->pNextEntry = (byte*) re;
    2f8c:	010b390b 	tsteq	fp, fp, lsl #18
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f90:	12000013 	andne	r0, r0, #19
    2f94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (rbuffs == NULL)
    2f98:	0b3b0b3a 	bleq	ec5c88 <__ccfg+0xea5ce0>
	rbuffs->pCurrEntry = (byte*) re;
    2f9c:	13490b39 	movtne	r0, #39737	; 0x9b39
	rbuffs->pLastEntry = NULL;
    2fa0:	00000538 	andeq	r0, r0, r8, lsr r5
    2fa4:	27001513 	smladcs	r0, r3, r5, r1
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fa8:	1400000c 	strne	r0, [r0], #-12
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fac:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2fb0:	13011349 	movwne	r1, #4937	; 0x1349
    2fb4:	05150000 	ldreq	r0, [r5, #-0]
	rbuffl -= 2;
    2fb8:	00134900 	andseq	r4, r3, r0, lsl #18
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fbc:	01131600 	tsteq	r3, r0, lsl #12
	rbuffl -= 2;
    2fc0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
	physid = phy;
    2fc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fc8:	13010b39 	movwne	r0, #6969	; 0x1b39
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fcc:	0d170000 	ldceq	0, cr0, [r7, #-0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fd0:	3a0e0300 	bcc	383bd8 <__ccfg+0x363c30>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fd4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fd8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	utimer_add (&bckf_timer);
    2fdc:	1800000b 	stmdane	r0, {r0, r1, r3}
	drvprcs = runthread (cc1350_driver);
    2fe0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2fe4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (drvprcs == 0)
    2fec:	00000538 	andeq	r0, r0, r8, lsr r5
		syserror (ERESOURCE, "cc13");
    2ff0:	03011319 	movweq	r1, #4889	; 0x1319
    2ff4:	3a0b0b0e 	bcc	2c5c34 <__ccfg+0x2a5c8c>
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2ff8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ffc:	0013010b 	andseq	r0, r3, fp, lsl #2
    3000:	01131a00 	tsteq	r3, r0, lsl #20
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3004:	0b3a0b0b 	bleq	e85c38 <__ccfg+0xe65c90>
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3008:	0b39053b 	bleq	e444fc <__ccfg+0xe24554>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    300c:	00001301 	andeq	r1, r0, r1, lsl #6
    3010:	0b01171b 	bleq	48c84 <__ccfg+0x28cdc>
    3014:	3b0b3a0b 	blcc	2d1848 <__ccfg+0x2b18a0>
    3018:	010b3905 	tsteq	fp, r5, lsl #18
    301c:	1c000013 	stcne	0, cr0, [r0], {19}
    3020:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3024:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3028:	13490b39 	movtne	r0, #39737	; 0x9b39
    302c:	131d0000 	tstne	sp, #0
	plugch ();
    3030:	3c0e0300 	stccc	3, cr0, [lr], {-0}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3034:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    3038:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    303c:	00001301 	andeq	r1, r0, r1, lsl #6
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3040:	0300341f 	movweq	r3, #1055	; 0x41f
    3044:	3b0b3a0e 	blcc	2d1884 <__ccfg+0x2b18dc>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3048:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    304c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    3050:	2000000c 	andcs	r0, r0, ip
    3054:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3058:	0b3b0b3a 	bleq	ec5d48 <__ccfg+0xea5da0>
    305c:	13490b39 	movtne	r0, #39737	; 0x9b39
    3060:	0b0d0b0b 	bleq	345c94 <__ccfg+0x325cec>
    3064:	0b380b0c 	bleq	e05c9c <__ccfg+0xde5cf4>
    3068:	0d210000 	stceq	0, cr0, [r1, #-0]
    306c:	3a0e0300 	bcc	383c74 <__ccfg+0x363ccc>
    3070:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3074:	0b13490b 	bleq	4d54a8 <__ccfg+0x4b5500>
    3078:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    307c:	000b380b 	andeq	r3, fp, fp, lsl #16
    3080:	00342200 	eorseq	r2, r4, r0, lsl #4
    3084:	0b3a0e03 	bleq	e86898 <__ccfg+0xe668f0>
    3088:	0b390b3b 	bleq	e45d7c <__ccfg+0xe25dd4>
    308c:	031c1349 	tsteq	ip, #603979777	; 0x24000001
    3090:	21230000 			; <UNDEFINED> instruction: 0x21230000
    3094:	2f134900 	svccs	0x00134900
    3098:	24000005 	strcs	r0, [r0], #-5
    309c:	13490035 	movtne	r0, #36917	; 0x9035
    30a0:	34250000 	strtcc	r0, [r5], #-0
    30a4:	3a0e0300 	bcc	383cac <__ccfg+0x363d04>
    30a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30ac:	3f13490b 	svccc	0x0013490b
    30b0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    30b4:	00212600 	eoreq	r2, r1, r0, lsl #12
    30b8:	34270000 	strtcc	r0, [r7], #-0
    30bc:	3a0e0300 	bcc	383cc4 <__ccfg+0x363d1c>
    30c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    30c8:	2800000a 	stmdacs	r0, {r1, r3}
    30cc:	13470034 	movtne	r0, #28724	; 0x7034
    30d0:	0b3b0b3a 	bleq	ec5dc0 <__ccfg+0xea5e18>
    30d4:	0a020b39 	beq	85dc0 <__ccfg+0x65e18>
    30d8:	01000000 	mrseq	r0, (UNDEF: 0)
    30dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    30e0:	0e030b13 	vmoveq.32	d3[0], r0
    30e4:	17550e1b 	smmlane	r5, fp, lr, r0
    30e8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    30ec:	24020000 	strcs	r0, [r2], #-0
    30f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    30f4:	000e030b 	andeq	r0, lr, fp, lsl #6
    30f8:	00160300 	andseq	r0, r6, r0, lsl #6
    30fc:	0b3a0e03 	bleq	e86910 <__ccfg+0xe66968>
    3100:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3104:	24040000 	strcs	r0, [r4], #-0
    3108:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    310c:	0008030b 	andeq	r0, r8, fp, lsl #6
    3110:	000f0500 	andeq	r0, pc, r0, lsl #10
    3114:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    3118:	15060000 	strne	r0, [r6, #-0]
    311c:	00192700 	andseq	r2, r9, r0, lsl #14
    3120:	01150700 	tsteq	r5, r0, lsl #14
    3124:	13011927 	movwne	r1, #6439	; 0x1927
    3128:	05080000 	streq	r0, [r8, #-0]
    312c:	00134900 	andseq	r4, r3, r0, lsl #18
    3130:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    3134:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
strand (__outserial, const char*)
    3138:	0b3b0b3a 	bleq	ec5e28 <__ccfg+0xea5e80>
    313c:	01111927 	tsteq	r1, r7, lsr #18
    3140:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3144:	01194296 			; <UNDEFINED> instruction: 0x01194296
endstrand
    3148:	0a000013 	beq	319c <__outserial+0x64>
    314c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	ptr = data;
    3150:	0b3b0b3a 	bleq	ec5e40 <__ccfg+0xea5e98>
    3154:	17021349 	strne	r1, [r2, -r9, asr #6]
	if (*ptr)
    3158:	340b0000 	strcc	r0, [fp], #-0
		len = strlen (ptr);
    315c:	3a0e0300 	bcc	383d64 <__ccfg+0x363dbc>
    3160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3164:	00170213 	andseq	r0, r7, r3, lsl r2
    3168:	82890c00 	addhi	r0, r9, #0, 24
    316c:	01110001 	tsteq	r1, r1
    3170:	00001331 	andeq	r1, r0, r1, lsr r3
    3174:	0182890d 	orreq	r8, r2, sp, lsl #18
	len -= quant;
    3178:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    317c:	13311942 	teqne	r1, #1081344	; 0x108000
    3180:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
	if (len == 0) {
    3184:	03193f01 	tsteq	r9, #1, 30
		ufree (data);
    3188:	3b0b3a0e 	blcc	2d19c8 <__ccfg+0x2b1a20>
		finish;
    318c:	1119270b 	tstne	r9, fp, lsl #14
    3190:	40061201 	andmi	r1, r6, r1, lsl #4
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3194:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3198:	00001301 	andeq	r1, r0, r1, lsl #6
    319c:	0182890f 	orreq	r8, r2, pc, lsl #18
    31a0:	01011101 	tsteq	r1, r1, lsl #2
    31a4:	10000013 	andne	r0, r0, r3, lsl r0
strand (__inserial, address)
    31a8:	0001828a 	andeq	r8, r1, sl, lsl #5
    31ac:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    31b0:	11000018 	tstne	r0, r8, lsl r0
    31b4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    31b8:	0b3a0e03 	bleq	e869cc <__ccfg+0xe66a24>
	if (__inpline != NULL)
    31bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    31c0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
		finish;
    31c4:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31c8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    31cc:	0e030b13 	vmoveq.32	d3[0], r0
    31d0:	17550e1b 	smmlane	r5, fp, lr, r0
    31d4:	17100111 			; <UNDEFINED> instruction: 0x17100111
		umwait (IM_INIT);
    31d8:	16020000 	strne	r0, [r2], -r0
		release;
    31dc:	3a0e0300 	bcc	383de4 <__ccfg+0x363e3c>
	savedata (data);
    31e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	len = MAX_LINE_LENGTH;
    31e4:	03000013 	movweq	r0, #19
	io (IM_READ, __cport, READ, ptr, 1);
    31e8:	0b0b0024 	bleq	2c3280 <__ccfg+0x2a32d8>
    31ec:	0e030b3e 	vmoveq.16	d3[0], r0
    31f0:	24040000 	strcs	r0, [r4], #-0
    31f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (ptr == (char*) data) { // new line
    31f8:	0008030b 	andeq	r0, r8, fp, lsl #6
    31fc:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
		if (*ptr == '\0') { // bin cmd
    3200:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
			proceed (IM_BIN);
    3204:	0b3b0b3a 	bleq	ec5ef4 <__ccfg+0xea5f4c>
    3208:	13491927 	movtne	r1, #39207	; 0x9927
		if (*ptr < 0x20)
    320c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
			proceed (IM_READ);
    3214:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3218:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	if (*ptr == '\n' || *ptr == '\r') {
    321c:	0b3b0b3a 	bleq	ec5f0c <__ccfg+0xea5f64>
    3220:	17021349 	strne	r1, [r2, -r9, asr #6]
    3224:	34070000 	strcc	r0, [r7], #-0
		*ptr = '\0';
    3228:	3a0e0300 	bcc	383e30 <__ccfg+0x363e88>
		__inpline = (char*)data;
    322c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		finish;
    3230:	00180213 	andseq	r0, r8, r3, lsl r2
	if (len) {
    3234:	11010000 	mrsne	r0, (UNDEF: 1)
		ptr++;
    3238:	130e2501 	movwne	r2, #58625	; 0xe501
    323c:	1b0e030b 	blne	383e70 <__ccfg+0x363ec8>
		len--;
    3240:	1117550e 	tstne	r7, lr, lsl #10
	proceed (IM_READ);
    3244:	00171001 	andseq	r1, r7, r1
	io (IM_BIN, __cport, READ, ptr, 1);
    3248:	00240200 	eoreq	r0, r4, r0, lsl #4
    324c:	0b3e0b0b 	bleq	f85e80 <__ccfg+0xf65ed8>
    3250:	00000e03 	andeq	r0, r0, r3, lsl #28
    3254:	03001603 	movweq	r1, #1539	; 0x603
    3258:	3b0b3a0e 	blcc	2d1a98 <__ccfg+0x2b1af0>
	len -= 2;
    325c:	0013490b 	andseq	r4, r3, fp, lsl #18
	if (len > *ptr + 1) // 1 for 0x04
    3260:	00240400 	eoreq	r0, r4, r0, lsl #8
    3264:	0b3e0b0b 	bleq	f85e98 <__ccfg+0xf65ef0>
		len = *ptr + 1;
    3268:	00000803 	andeq	r0, r0, r3, lsl #16
    326c:	3f012e05 	svccc	0x00012e05
	ptr++;
    3270:	3a0e0319 	bcc	383edc <__ccfg+0x363f34>
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3274:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3278:	11134919 	tstne	r3, r9, lsl r9
    327c:	40061201 	andmi	r1, r6, r1, lsl #4
    3280:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3284:	00001301 	andeq	r1, r0, r1, lsl #6
    3288:	03003406 	movweq	r3, #1030	; 0x406
	len -= quant;
    328c:	3b0b3a0e 	blcc	2d1acc <__ccfg+0x2b1b24>
		__inpline = (char*)data;
    3290:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		finish;
    3294:	07000017 	smladeq	r0, r7, r0, r0
	ptr += quant;
    3298:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    329c:	0b3b0b3a 	bleq	ec5f8c <__ccfg+0xea5fe4>
endstrand
    32a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    32a4:	17080000 	strne	r0, [r8, -r0]
	proceed (IM_BINL);
    32a8:	3a0b0b01 	bcc	2c5eb4 <__ccfg+0x2a5f0c>
endstrand
    32ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    32b0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    32b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    32b8:	0b3b0b3a 	bleq	ec5fa8 <__ccfg+0xea6000>
    32bc:	00001349 	andeq	r1, r0, r9, asr #6
    32c0:	0300340a 	movweq	r3, #1034	; 0x40a
		if (res && (d < n))
    32c4:	3b0b3a0e 	blcc	2d1b04 <__ccfg+0x2b1b5c>
    32c8:	0013490b 	andseq	r4, r3, fp, lsl #18
    32cc:	01010b00 	tsteq	r1, r0, lsl #22
    32d0:	13011349 	movwne	r1, #4937	; 0x1349
			res [d] = (char) c;
    32d4:	210c0000 	mrscs	r0, (UNDEF: 12)
		d++;
    32d8:	2f134900 	svccs	0x00134900
    32dc:	0000000b 	andeq	r0, r0, fp
    32e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32e4:	030b130e 	movweq	r1, #45838	; 0xb30e
    32e8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    32ec:	10011117 	andne	r1, r1, r7, lsl r1
				enci (10000);
    32f0:	02000017 	andeq	r0, r0, #23
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32f4:	0b0b0024 	bleq	2c338c <__ccfg+0x2a33e4>
    32f8:	0e030b3e 	vmoveq.16	d3[0], r0
	d = 0;
    32fc:	16030000 	strne	r0, [r3], -r0
		c = *fm++;
    3300:	3a0e0300 	bcc	383f08 <__ccfg+0x363f60>
		if (c == '\\') {
    3304:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if ((c = *fm++) == '\0') {
    3308:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    330c:	0b0b0024 	bleq	2c33a4 <__ccfg+0x2a33fc>
				outc ('\\');
    3310:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
			if ((c = *fm++) == '\0') {
    3314:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
				outc ('\\');
    3318:	03193f01 	tsteq	r9, #1, 30
    331c:	3b0b3a0e 	blcc	2d1b5c <__ccfg+0x2b1bb4>
			outc (c);
    3320:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3324:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			if (c == '\0')
    3328:	97184006 	ldrls	r4, [r8, -r6]
    332c:	13011942 	movwne	r1, #6466	; 0x1942
			outc (c);
    3330:	34060000 	strcc	r0, [r6], #-0
				outc (val);
    3334:	3a0e0300 	bcc	383f3c <__ccfg+0x363f94>
				val = (word) va_arg (ap, aword);
    3338:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (c == '%') {
    333c:	07000013 	smladeq	r0, r3, r0, r0
    3340:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			c = *fm++;
    3344:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			switch (c) {
    3348:	00001349 	andeq	r1, r0, r9, asr #6
    334c:	3f012e08 	svccc	0x00012e08
    3350:	3a0e0319 	bcc	383fbc <__ccfg+0x364014>
    3354:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3358:	11134919 	tstne	r3, r9, lsl r9
    335c:	40061201 	andmi	r1, r6, r1, lsl #4
    3360:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3364:	00001301 	andeq	r1, r0, r1, lsl #6
				outc ('%');
    3368:	3f012e09 	svccc	0x00012e09
    336c:	3a0e0319 	bcc	383fd8 <__ccfg+0x364030>
				outc (c);
    3370:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3374:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3378:	97184006 	ldrls	r4, [r8, -r6]
				if (c == '\0')
    337c:	00001942 	andeq	r1, r0, r2, asr #18
				return d;
    3380:	0300050a 	movweq	r0, #1290	; 0x50a
}
    3384:	3b0b3a0e 	blcc	2d1bc4 <__ccfg+0x2b1c1c>
    3388:	02134905 	andseq	r4, r3, #81920	; 0x14000
			switch (c) {
    338c:	00000018 	andeq	r0, r0, r8, lsl r0
    3390:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3394:	030b130e 	movweq	r1, #45838	; 0xb30e
				for (i = 12; ; i -= 4) {
    3398:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				val = (word) va_arg (ap, aword);
    339c:	10011117 	andne	r1, r1, r7, lsl r1
						[ (val >> i) & 0xf ]);
    33a0:	02000017 	andeq	r0, r0, #23
    33a4:	0b0b0024 	bleq	2c343c <__ccfg+0x2a3494>
    33a8:	0e030b3e 	vmoveq.16	d3[0], r0
					outc (__pi_hex_enc_table
    33ac:	16030000 	strne	r0, [r3], -r0
    33b0:	3a0e0300 	bcc	383fb8 <__ccfg+0x364010>
					if (i == 0)
    33b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    33b8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
				for (i = 12; ; i -= 4) {
    33bc:	0b0b0024 	bleq	2c3454 <__ccfg+0x2a34ac>
				val = (word) va_arg (ap, aword);
    33c0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
				if (c == 'd' && (val & 0x8000) != 0) {
    33c4:	0f050000 	svceq	0x00050000
				val = (word) va_arg (ap, aword);
    33c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
				if (c == 'd' && (val & 0x8000) != 0) {
    33cc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    33d0:	19270015 	stmdbne	r7!, {r0, r2, r4}
					outc ('-');
    33d4:	15070000 	strne	r0, [r7, #-0]
    33d8:	01192701 	tsteq	r9, r1, lsl #14
					val = (~val) + 1;
    33dc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    33e0:	13490005 	movtne	r0, #36869	; 0x9005
				for (i = 12; ; i -= 4) {
    33e4:	15090000 	strne	r0, [r9, #-0]
				enci (10000);
    33e8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    33ec:	00130113 	andseq	r0, r3, r3, lsl r1
    33f0:	00150a00 	andseq	r0, r5, r0, lsl #20
    33f4:	13491927 	movtne	r1, #39207	; 0x9927
    33f8:	130b0000 	movwne	r0, #45056	; 0xb000
    33fc:	3a0b0b01 	bcc	2c6008 <__ccfg+0x2a6060>
    3400:	010b3b0b 	tsteq	fp, fp, lsl #22
    3404:	0c000013 	stceq	0, cr0, [r0], {19}
    3408:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    340c:	0b3b0b3a 	bleq	ec60fc <__ccfg+0xea6154>
    3410:	0b381349 	bleq	e0813c <__ccfg+0xde8194>
    3414:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3418:	03193f01 	tsteq	r9, #1, 30
    341c:	3b0b3a0e 	blcc	2d1c5c <__ccfg+0x2b1cb4>
    3420:	2019270b 	andscs	r2, r9, fp, lsl #14
    3424:	0013010b 	andseq	r0, r3, fp, lsl #2
    3428:	00050e00 	andeq	r0, r5, r0, lsl #28
    342c:	0b3a0e03 	bleq	e86c40 <__ccfg+0xe66c98>
				if (c == 'd' || c == 'u') {
    3430:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3434:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
					if (c == 'd' &&
    3438:	03193f01 	tsteq	r9, #1, 30
					val = va_arg (ap, lword);
    343c:	3b0b3a0e 	blcc	2d1c7c <__ccfg+0x2b1cd4>
					fm++;
    3440:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
					if (c == 'd' &&
    3444:	010b2013 	tsteq	fp, r3, lsl r0
    3448:	10000013 	andne	r0, r0, r3, lsl r0
						outc ('-');
    344c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3450:	0b3b0b3a 	bleq	ec6140 <__ccfg+0xea6198>
						val = (~val) + 1;
    3454:	00001349 	andeq	r1, r0, r9, asr #6
				enci (10000);
    3458:	31012e11 	tstcc	r1, r1, lsl lr
					enci (1000000000UL);
    345c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3460:	97184006 	ldrls	r4, [r8, -r6]
    3464:	13011942 	movwne	r1, #6466	; 0x1942
    3468:	05120000 	ldreq	r0, [r2, #-0]
    346c:	02133100 	andseq	r3, r3, #0, 2
    3470:	13000017 	movwne	r0, #23
    3474:	0111010b 	tsteq	r1, fp, lsl #2
    3478:	13010612 	movwne	r0, #5650	; 0x1612
    347c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    3480:	11010182 	smlabbne	r1, r2, r1, r0
    3484:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3488:	8a150000 	bhi	543490 <__ccfg+0x5234e8>
    348c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3490:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3494:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3498:	11010182 	smlabbne	r1, r2, r1, r0
    349c:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
				} else if (c == 'x') {
    34a0:	00001301 	andeq	r1, r0, r1, lsl #6
					for (i = 28; ; i -= 4) {
    34a4:	31003417 	tstcc	r0, r7, lsl r4
					val = va_arg (ap, lword);
    34a8:	00180213 	andseq	r0, r8, r3, lsl r2
							[ (val >> i) & 0xf ]);
    34ac:	010b1800 	tsteq	fp, r0, lsl #16
    34b0:	13011755 	movwne	r1, #5973	; 0x1755
						outc (__pi_hex_enc_table
    34b4:	05190000 	ldreq	r0, [r9, #-0]
    34b8:	1c133100 	ldfnes	f3, [r3], {-0}
    34bc:	1a00000b 	bne	34f0 <__pi_vfparse+0x20c>
						if (i == 0)
    34c0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    34c4:	341b0000 	ldrcc	r0, [fp], #-0
					for (i = 28; ; i -= 4) {
    34c8:	00133100 	andseq	r3, r3, r0, lsl #2
					outc ('%');
    34cc:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    34d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    34d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					outc ('l');
    34d8:	13491927 	movtne	r1, #39207	; 0x9927
    34dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
				val = (word) va_arg (ap, aword);
    34e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
				outc (val);
    34e4:	00130119 	andseq	r0, r3, r9, lsl r1
    34e8:	00051d00 	andeq	r1, r5, r0, lsl #26
				while (*st != '\0') {
    34ec:	0b3a0e03 	bleq	e86d00 <__ccfg+0xe66d58>
    34f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    34f4:	00001702 	andeq	r1, r0, r2, lsl #14
    34f8:	0300341e 	movweq	r3, #1054	; 0x41e
					outc (*st);
    34fc:	3b0b3a0e 	blcc	2d1d3c <__ccfg+0x2b1d94>
    3500:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					st++;
    3504:	1f000017 	svcne	0x00000017
		c = *fm++;
    3508:	00018289 	andeq	r8, r1, r9, lsl #5
    350c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3510:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
char *vform (char *res, const char *fm, va_list aq) {
    3514:	03193f01 	tsteq	r9, #1, 30
    3518:	3b0b3a0e 	blcc	2d1d58 <__ccfg+0x2b1db0>
	if (res != NULL) {
    351c:	11192705 	tstne	r9, r5, lsl #14
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3520:	40061201 	andmi	r1, r6, r1, lsl #4
    3524:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3528:	00001301 	andeq	r1, r0, r1, lsl #6
}
    352c:	01828921 	orreq	r8, r2, r1, lsr #18
    3530:	31011101 	tstcc	r1, r1, lsl #2
	fml = strlen (fm) + 17;
    3534:	00130113 	andseq	r0, r3, r3, lsl r1
    3538:	002e2200 	eoreq	r2, lr, r0, lsl #4
    353c:	0b3a0e03 	bleq	e86d50 <__ccfg+0xe66da8>
	if ((res = (char*) umalloc (fml)) == NULL)
    3540:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3544:	0b201349 	bleq	808270 <__ccfg+0x7e82c8>
    3548:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    354c:	3a0e0300 	bcc	384154 <__ccfg+0x3641ac>
    3550:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3554:	000b2019 	andeq	r2, fp, r9, lsl r0
    3558:	00342400 	eorseq	r2, r4, r0, lsl #8
		ufree (res);
    355c:	0b3a0e03 	bleq	e86d70 <__ccfg+0xe66dc8>
		goto Again;
    3560:	1349053b 	movtne	r0, #38203	; 0x953b
	if (buf == NULL || fmt == NULL)
    3564:	00001702 	andeq	r1, r0, r2, lsl #14
int vscan (const char *buf, const char *fmt, va_list ap) {
    3568:	31011d25 	tstcc	r1, r5, lsr #26
	if (buf == NULL || fmt == NULL)
    356c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3570:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3574:	00130105 	andseq	r0, r3, r5, lsl #2
		    	    case 'u': scanu (lword); break;
    3578:	00052600 	andeq	r2, r5, r0, lsl #12
			while (isspace (*buf)) buf++;
    357c:	0b3a0e03 	bleq	e86d90 <__ccfg+0xe66de8>
    3580:	1349053b 	movtne	r0, #38203	; 0x953b
	while (*fmt != '\0') {
    3584:	00001702 	andeq	r1, r0, r2, lsl #14
		if (*fmt++ != '%')
    3588:	03003427 	movweq	r3, #1063	; 0x427
		switch (*fmt++) {
    358c:	3b0b3a0e 	blcc	2d1dcc <__ccfg+0x2b1e24>
    3590:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3594:	28000018 	stmdacs	r0, {r3, r4}
    3598:	08030034 	stmdaeq	r3, {r2, r4, r5}
    359c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    35a0:	17021349 	strne	r1, [r2, -r9, asr #6]
    35a4:	34290000 	strtcc	r0, [r9], #-0
}
    35a8:	3a0e0300 	bcc	3841b0 <__ccfg+0x364208>
		switch (*fmt++) {
    35ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    35b0:	00180213 	andseq	r0, r8, r3, lsl r2
    35b4:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    35b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
			while (isspace (*buf)) buf++;
    35bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    35c0:	13491927 	movtne	r1, #39207	; 0x9927
    35c4:	0000193c 	andeq	r1, r0, ip, lsr r9
    35c8:	3f002e2b 	svccc	0x00002e2b
    35cc:	3a0e0319 	bcc	384238 <__ccfg+0x364290>
    35d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
			if (*buf == '\0')
    35d4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
			if (*buf != ',') {
    35d8:	2c000019 	stccs	0, cr0, [r0], {25}
			sap = va_arg (ap, char*);
    35dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
			nc++;
    35e0:	0b3a0e03 	bleq	e86df4 <__ccfg+0xe66e4c>
			if (*buf != ',') {
    35e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
				while (!isspace (*buf) && *buf != ',' &&
    35e8:	0000193c 	andeq	r1, r0, ip, lsr r9
    35ec:	01110100 	tsteq	r1, r0, lsl #2
    35f0:	0b130e25 	bleq	4c6e8c <__ccfg+0x4a6ee4>
    35f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    35f8:	01111755 	tsteq	r1, r5, asr r7
    35fc:	00001710 	andeq	r1, r0, r0, lsl r7
    3600:	0b002402 	bleq	c610 <__exidx_end+0x6a10>
			while (isspace (*buf)) buf++;
    3604:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3608:	0300000e 	movweq	r0, #14
    360c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3610:	0b3b0b3a 	bleq	ec6300 <__ccfg+0xea6358>
    3614:	00001349 	andeq	r1, r0, r9, asr #6
			if (*buf == ',') buf++;
    3618:	0b002404 	bleq	c630 <__exidx_end+0x6a30>
    361c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			*sap = '\0';
    3620:	05000008 	streq	r0, [r0, #-8]
			break;
    3624:	0b0b000f 	bleq	2c3668 <__ccfg+0x2a36c0>
		    case 'd': scani (word); break;
    3628:	0f060000 	svceq	0x00060000
    362c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3630:	07000013 	smladeq	r0, r3, r0, r0
    3634:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3638:	0b3a0b0b 	bleq	e8626c <__ccfg+0xe662c4>
    363c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3640:	0d080000 	stceq	0, cr0, [r8, #-0]
    3644:	3a0e0300 	bcc	38424c <__ccfg+0x3642a4>
    3648:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    364c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3650:	01130900 	tsteq	r3, r0, lsl #18
    3654:	0b3a0b0b 	bleq	e86288 <__ccfg+0xe662e0>
    3658:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    365c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    3660:	3a0e0300 	bcc	384268 <__ccfg+0x3642c0>
    3664:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3668:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    366c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3670:	0b00000b 	bleq	36a4 <vscan+0x140>
    3674:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3678:	0b3a0b0b 	bleq	e862ac <__ccfg+0xe66304>
    367c:	1301053b 	movwne	r0, #5435	; 0x153b
    3680:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3684:	3a0e0300 	bcc	38428c <__ccfg+0x3642e4>
    3688:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    368c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3690:	01130d00 	tsteq	r3, r0, lsl #26
    3694:	0b3a0b0b 	bleq	e862c8 <__ccfg+0xe66320>
		    case 'u': scanu (word); break;
    3698:	1301053b 	movwne	r0, #5435	; 0x153b
    369c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    36a0:	3a0e0300 	bcc	3842a8 <__ccfg+0x364300>
    36a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    36a8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    36ac:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    36b0:	0f00000b 	svceq	0x0000000b
    36b4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    36b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    36bc:	0b201927 	bleq	809b60 <__ccfg+0x7e9bb8>
    36c0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    36c4:	03193f01 	tsteq	r9, #1, 30
    36c8:	3b0b3a0e 	blcc	2d1f08 <__ccfg+0x2b1f60>
    36cc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    36d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    36d4:	97184006 	ldrls	r4, [r8, -r6]
    36d8:	13011942 	movwne	r1, #6466	; 0x1942
    36dc:	34110000 	ldrcc	r0, [r1], #-0
		    case 'x': scanx (word); break;
    36e0:	3a0e0300 	bcc	3842e8 <__ccfg+0x364340>
    36e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    36e8:	00180213 	andseq	r0, r8, r3, lsl r2
    36ec:	00051200 	andeq	r1, r5, r0, lsl #4
    36f0:	0b3a0803 	bleq	e85704 <__ccfg+0xe6575c>
    36f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36f8:	00001702 	andeq	r1, r0, r2, lsl #14
    36fc:	31001d13 	tstcc	r0, r3, lsl sp
    3700:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3704:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3708:	1400000b 	strne	r0, [r0], #-11
    370c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3710:	0b3a0e03 	bleq	e86f24 <__ccfg+0xe66f7c>
    3714:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3718:	06120111 			; <UNDEFINED> instruction: 0x06120111
    371c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3720:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    3724:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3728:	0b3a0e03 	bleq	e86f3c <__ccfg+0xe66f94>
    372c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3730:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3734:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3738:	00130119 	andseq	r0, r3, r9, lsl r1
    373c:	00051600 	andeq	r1, r5, r0, lsl #12
    3740:	0b3a0e03 	bleq	e86f54 <__ccfg+0xe66fac>
    3744:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3748:	00001802 	andeq	r1, r0, r2, lsl #16
    374c:	03003417 	movweq	r3, #1047	; 0x417
    3750:	3b0b3a0e 	blcc	2d1f90 <__ccfg+0x2b1fe8>
    3754:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			switch (*fmt++) {
    3758:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    375c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3760:	0b3b0b3a 	bleq	ec6450 <__ccfg+0xea64a8>
    3764:	17021349 	strne	r1, [r2, -r9, asr #6]
    3768:	34190000 	ldrcc	r0, [r9], #-0
    376c:	3a0e0300 	bcc	384374 <__ccfg+0x3643cc>
		    	    case 'd': scani (lword); break;
    3770:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3774:	1a000013 	bne	37c8 <vscan+0x264>
    3778:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    377c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3780:	17021349 	strne	r1, [r2, -r9, asr #6]
    3784:	341b0000 	ldrcc	r0, [fp], #-0
    3788:	3a0e0300 	bcc	384390 <__ccfg+0x3643e8>
    378c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3790:	00061c13 	andeq	r1, r6, r3, lsl ip
    3794:	00341c00 	eorseq	r1, r4, r0, lsl #24
    3798:	0b3a0803 	bleq	e857ac <__ccfg+0xe65804>
    379c:	1349053b 	movtne	r0, #38203	; 0x953b
    37a0:	00001702 	andeq	r1, r0, r2, lsl #14
    37a4:	0182891d 	orreq	r8, r2, sp, lsl r9
    37a8:	31011101 	tstcc	r1, r1, lsl #2
    37ac:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    37b0:	0001828a 	andeq	r8, r1, sl, lsl #5
    37b4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    37b8:	1f000018 	svcne	0x00000018
    37bc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    37c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    37c8:	01200000 			; <UNDEFINED> instruction: 0x01200000
		    	    case 'x': scanx (lword); break;
    37cc:	01134901 	tsteq	r3, r1, lsl #18
    37d0:	21000013 	tstcs	r0, r3, lsl r0
    37d4:	13490021 	movtne	r0, #36897	; 0x9021
    37d8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    37dc:	03003422 	movweq	r3, #1058	; 0x422
    37e0:	3b0b3a0e 	blcc	2d2020 <__ccfg+0x2b2078>
    37e4:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    37e8:	2300000a 	movwcs	r0, #10
    37ec:	13490026 	movtne	r0, #36902	; 0x9026
    37f0:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    37f4:	03193f01 	tsteq	r9, #1, 30
    37f8:	3b0b3a0e 	blcc	2d2038 <__ccfg+0x2b2090>
    37fc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3800:	00193c13 	andseq	r3, r9, r3, lsl ip
    3804:	00052500 	andeq	r2, r5, r0, lsl #10
    3808:	00001349 	andeq	r1, r0, r9, asr #6
    380c:	01110100 	tsteq	r1, r0, lsl #2
    3810:	0b130e25 	bleq	4c70ac <__ccfg+0x4a7104>
    3814:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3818:	01111755 	tsteq	r1, r5, asr r7
    381c:	00001710 	andeq	r1, r0, r0, lsl r7
    3820:	0b002402 	bleq	c830 <__exidx_end+0x6c30>
    3824:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3828:	0300000e 	movweq	r0, #14
    382c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3830:	0b3b0b3a 	bleq	ec6520 <__ccfg+0xea6578>
    3834:	00001349 	andeq	r1, r0, r9, asr #6
    3838:	0b002404 	bleq	c850 <__exidx_end+0x6c50>
		    	    case 'd': scani (lword); break;
    383c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3840:	05000008 	streq	r0, [r0, #-8]
    3844:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3848:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    384c:	0b201927 	bleq	809cf0 <__ccfg+0x7e9d48>
    3850:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    3854:	3a0e0300 	bcc	38445c <__ccfg+0x3644b4>
		    	    case 'u': scanu (lword); break;
    3858:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    385c:	000b2019 	andeq	r2, fp, r9, lsl r0
    3860:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    3864:	0b3a0e03 	bleq	e87078 <__ccfg+0xe670d0>
    3868:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    386c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3870:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3874:	00130119 	andseq	r0, r3, r9, lsl r1
    3878:	00050800 	andeq	r0, r5, r0, lsl #16
    387c:	0b3a0e03 	bleq	e87090 <__ccfg+0xe670e8>
    3880:	1349053b 	movtne	r0, #38203	; 0x953b
    3884:	00001702 	andeq	r1, r0, r2, lsl #14
    3888:	03003409 	movweq	r3, #1033	; 0x409
    388c:	3b0b3a0e 	blcc	2d20cc <__ccfg+0x2b2124>
    3890:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3894:	0a000017 	beq	38f8 <SafeHapiVoid+0x4>
    3898:	1331001d 	teqne	r1, #29
    389c:	06120111 			; <UNDEFINED> instruction: 0x06120111
		    	    case 'x': scanx (lword); break;
    38a0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    38a4:	0b0b0000 	bleq	2c38ac <__ccfg+0x2a3904>
			if ((c = *buf++) == '\0')
    38a8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    38ac:	00130106 	andseq	r0, r3, r6, lsl #2
			sap = va_arg (ap, char*);
    38b0:	82890c00 	addhi	r0, r9, #0, 24
			nc++;
    38b4:	01110101 	tsteq	r1, r1, lsl #2
			break;
    38b8:	13011331 	movwne	r1, #4913	; 0x1331
			while (isspace (*buf)) buf++;
    38bc:	8a0d0000 	bhi	3438c4 <__ccfg+0x32391c>
    38c0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    38c4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
						*sap++ = *buf++;
    38c8:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    38cc:	11010182 	smlabbne	r1, r2, r1, r0
			while (isspace (*buf)) buf++;
    38d0:	0f000001 	svceq	0x00000001
    38d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    38d8:	0b3a0e03 	bleq	e870ec <__ccfg+0xe67144>
		return 0;
    38dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    38e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
		    case 'x': scanx (word); break;
    38e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    38e8:	00130119 	andseq	r0, r3, r9, lsl r1
		    	    case 'x': scanx (lword); break;
    38ec:	00341000 	eorseq	r1, r4, r0
    38f0:	0b3a0e03 	bleq	e87104 <__ccfg+0xe6715c>
    38f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    38f8:	00001702 	andeq	r1, r0, r2, lsl #14
    38fc:	01828911 	orreq	r8, r2, r1, lsl r9
    3900:	31011100 	mrscc	r1, (UNDEF: 17)
    3904:	12000013 	andne	r0, r0, #19
    3908:	01018289 	smlabbeq	r1, r9, r2, r8
    390c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3910:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    3914:	03193f01 	tsteq	r9, #1, 30
    3918:	3b0b3a0e 	blcc	2d2158 <__ccfg+0x2b21b0>
    391c:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3920:	00130119 	andseq	r0, r3, r9, lsl r1
    3924:	00051400 	andeq	r1, r5, r0, lsl #8
    3928:	00001349 	andeq	r1, r0, r9, asr #6
    392c:	3f002e15 	svccc	0x00002e15
    3930:	3a0e0319 	bcc	38459c <__ccfg+0x3645f4>
    3934:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3938:	00193c19 	andseq	r3, r9, r9, lsl ip
    393c:	002e1600 	eoreq	r1, lr, r0, lsl #12
    3940:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3944:	0b3b0b3a 	bleq	ec6634 <__ccfg+0xea668c>
    3948:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    394c:	01000000 	mrseq	r0, (UNDEF: 0)
    3950:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3954:	0e030b13 	vmoveq.32	d3[0], r0
    3958:	17550e1b 	smmlane	r5, fp, lr, r0
    395c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3960:	24020000 	strcs	r0, [r2], #-0
    3964:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3968:	000e030b 	andeq	r0, lr, fp, lsl #6
    396c:	00160300 	andseq	r0, r6, r0, lsl #6
    3970:	0b3a0e03 	bleq	e87184 <__ccfg+0xe671dc>
    3974:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3978:	24040000 	strcs	r0, [r4], #-0
    397c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3980:	0008030b 	andeq	r0, r8, fp, lsl #6
    3984:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3988:	0b3a0e03 	bleq	e8719c <__ccfg+0xe671f4>
    398c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3990:	0b201349 	bleq	8086bc <__ccfg+0x7e8714>
    3994:	00001301 	andeq	r1, r0, r1, lsl #6
    3998:	03000506 	movweq	r0, #1286	; 0x506
    399c:	3b0b3a0e 	blcc	2d21dc <__ccfg+0x2b2234>
    39a0:	0013490b 	andseq	r4, r3, fp, lsl #18
    39a4:	00340700 	eorseq	r0, r4, r0, lsl #14
    39a8:	0b3a0e03 	bleq	e871bc <__ccfg+0xe67214>
    39ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    39b0:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    39b4:	03193f01 	tsteq	r9, #1, 30
    39b8:	3b0b3a0e 	blcc	2d21f8 <__ccfg+0x2b2250>
    39bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    39c0:	010b2013 	tsteq	fp, r3, lsl r0
    39c4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    39c8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    39cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    39d0:	00001349 	andeq	r1, r0, r9, asr #6
    39d4:	0300340a 	movweq	r3, #1034	; 0x40a
    39d8:	3b0b3a0e 	blcc	2d2218 <__ccfg+0x2b2270>
    39dc:	00134905 	andseq	r4, r3, r5, lsl #18
    39e0:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    39e4:	0b3a0e03 	bleq	e871f8 <__ccfg+0xe67250>
    39e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    39ec:	00000b20 	andeq	r0, r0, r0, lsr #22
    39f0:	3f012e0c 	svccc	0x00012e0c
    39f4:	3a0e0319 	bcc	384660 <__ccfg+0x3646b8>
    39f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    39fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3a00:	97184006 	ldrls	r4, [r8, -r6]
    3a04:	13011942 	movwne	r1, #6466	; 0x1942
    3a08:	050d0000 	streq	r0, [sp, #-0]
    3a0c:	3a0e0300 	bcc	384614 <__ccfg+0x36466c>
    3a10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a14:	00170213 	andseq	r0, r7, r3, lsl r2
    3a18:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3a1c:	0b3a0e03 	bleq	e87230 <__ccfg+0xe67288>
    3a20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a24:	00001802 	andeq	r1, r0, r2, lsl #16
    3a28:	0300340f 	movweq	r3, #1039	; 0x40f
    3a2c:	3b0b3a0e 	blcc	2d226c <__ccfg+0x2b22c4>
    3a30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3a34:	10000017 	andne	r0, r0, r7, lsl r0
    3a38:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a3c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3a40:	0b590b58 	bleq	16467a8 <__ccfg+0x1626800>
    3a44:	00001301 	andeq	r1, r0, r1, lsl #6
    3a48:	31000511 	tstcc	r0, r1, lsl r5
    3a4c:	12000013 	andne	r0, r0, #19
    3a50:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3a54:	34130000 	ldrcc	r0, [r3], #-0
    3a58:	02133100 	andseq	r3, r3, #0, 2
    3a5c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    3a60:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a64:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3a68:	0b590b58 	bleq	16467d0 <__ccfg+0x1626828>
    3a6c:	0b150000 	bleq	543a74 <__ccfg+0x523acc>
    3a70:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3a74:	16000006 	strne	r0, [r0], -r6
    3a78:	13310034 	teqne	r1, #52	; 0x34
    3a7c:	00001702 	andeq	r1, r0, r2, lsl #14
    3a80:	3f012e17 	svccc	0x00012e17
    3a84:	3a0e0319 	bcc	3846f0 <__ccfg+0x364748>
    3a88:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3a8c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3a90:	97184006 	ldrls	r4, [r8, -r6]
    3a94:	13011942 	movwne	r1, #6466	; 0x1942
    3a98:	1d180000 	ldcne	0, cr0, [r8, #-0]
    3a9c:	11133101 	tstne	r3, r1, lsl #2
    3aa0:	58061201 	stmdapl	r6, {r0, r9, ip}
    3aa4:	010b590b 	tsteq	fp, fp, lsl #18
    3aa8:	19000013 	stmdbne	r0, {r0, r1, r4}
    3aac:	01018289 	smlabbeq	r1, r9, r2, r8
    3ab0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3ab4:	8a1a0000 	bhi	683abc <__ccfg+0x663b14>
    3ab8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3abc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3ac0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    3ac4:	03193f01 	tsteq	r9, #1, 30
    3ac8:	3b0b3a0e 	blcc	2d2308 <__ccfg+0x2b2360>
    3acc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3ad0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3ad4:	97184006 	ldrls	r4, [r8, -r6]
    3ad8:	13011942 	movwne	r1, #6466	; 0x1942
    3adc:	051c0000 	ldreq	r0, [ip, #-0]
    3ae0:	3a0e0300 	bcc	3846e8 <__ccfg+0x364740>
    3ae4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ae8:	00170213 	andseq	r0, r7, r3, lsl r2
    3aec:	00341d00 	eorseq	r1, r4, r0, lsl #26
    3af0:	0b3a0e03 	bleq	e87304 <__ccfg+0xe6735c>
    3af4:	1349053b 	movtne	r0, #38203	; 0x953b
    3af8:	00001702 	andeq	r1, r0, r2, lsl #14
    3afc:	31012e1e 	tstcc	r1, lr, lsl lr
    3b00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3b04:	97184006 	ldrls	r4, [r8, -r6]
    3b08:	13011942 	movwne	r1, #6466	; 0x1942
    3b0c:	051f0000 	ldreq	r0, [pc, #-0]	; 3b14 <NOROM_RFCSynthPowerDown+0x24>
    3b10:	02133100 	andseq	r3, r3, #0, 2
    3b14:	20000017 	andcs	r0, r0, r7, lsl r0
    3b18:	13310034 	teqne	r1, #52	; 0x34
    3b1c:	1d210000 	stcne	0, cr0, [r1, #-0]
    3b20:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3b24:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3b28:	0105590b 	tsteq	r5, fp, lsl #18
    3b2c:	22000013 	andcs	r0, r0, #19
    3b30:	01018289 	smlabbeq	r1, r9, r2, r8
    3b34:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3b38:	00001301 	andeq	r1, r0, r1, lsl #6
    3b3c:	01828923 	orreq	r8, r2, r3, lsr #18
    3b40:	31011100 	mrscc	r1, (UNDEF: 17)
    3b44:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3b48:	01018289 	smlabbeq	r1, r9, r2, r8
    3b4c:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3b50:	00130118 	andseq	r0, r3, r8, lsl r1
    3b54:	001d2500 	andseq	r2, sp, r0, lsl #10
    3b58:	01111331 	tsteq	r1, r1, lsr r3
    3b5c:	0b580612 	bleq	16053ac <__ccfg+0x15e5404>
    3b60:	00000559 	andeq	r0, r0, r9, asr r5
    3b64:	01828926 	orreq	r8, r2, r6, lsr #18
    3b68:	01011101 	tsteq	r1, r1, lsl #2
    3b6c:	27000013 	smladcs	r0, r3, r0, r0
    3b70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3b74:	0b3a0e03 	bleq	e87388 <__ccfg+0xe673e0>
    3b78:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3b7c:	1301193c 	movwne	r1, #6460	; 0x193c
    3b80:	05280000 	streq	r0, [r8, #-0]!
    3b84:	00134900 	andseq	r4, r3, r0, lsl #18
    3b88:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    3b8c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3b90:	0b3b0b3a 	bleq	ec6880 <__ccfg+0xea68d8>
    3b94:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3b98:	00001301 	andeq	r1, r0, r1, lsl #6
    3b9c:	3f012e2a 	svccc	0x00012e2a
    3ba0:	3a0e0319 	bcc	38480c <__ccfg+0x364864>
    3ba4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3ba8:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3bac:	00000019 	andeq	r0, r0, r9, lsl r0
    3bb0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3bb4:	030b130e 	movweq	r1, #45838	; 0xb30e
    3bb8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3bbc:	10011117 	andne	r1, r1, r7, lsl r1
    3bc0:	02000017 	andeq	r0, r0, #23
    3bc4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3bc8:	0b3b0b3a 	bleq	ec68b8 <__ccfg+0xea6910>
    3bcc:	00001349 	andeq	r1, r0, r9, asr #6
    3bd0:	0b002403 	bleq	cbe4 <__exidx_end+0x6fe4>
    3bd4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3bd8:	0400000e 	streq	r0, [r0], #-14
    3bdc:	0b0b0024 	bleq	2c3c74 <__ccfg+0x2a3ccc>
    3be0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3be4:	0f050000 	svceq	0x00050000
    3be8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3bec:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3bf0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3bf4:	15070000 	strne	r0, [r7, #-0]
    3bf8:	01192701 	tsteq	r9, r1, lsl #14
    3bfc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3c00:	13490005 	movtne	r0, #36869	; 0x9005
    3c04:	15090000 	strne	r0, [r9, #-0]
    3c08:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3c0c:	00130113 	andseq	r0, r3, r3, lsl r1
    3c10:	00150a00 	andseq	r0, r5, r0, lsl #20
    3c14:	13491927 	movtne	r1, #39207	; 0x9927
    3c18:	130b0000 	movwne	r0, #45056	; 0xb000
    3c1c:	3a0b0b01 	bcc	2c6828 <__ccfg+0x2a6880>
    3c20:	010b3b0b 	tsteq	fp, fp, lsl #22
    3c24:	0c000013 	stceq	0, cr0, [r0], {19}
    3c28:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3c2c:	0b3b0b3a 	bleq	ec691c <__ccfg+0xea6974>
    3c30:	0b381349 	bleq	e0895c <__ccfg+0xde89b4>
    3c34:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3c38:	3a0e0301 	bcc	384844 <__ccfg+0x36489c>
    3c3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3c40:	010b2019 	tsteq	fp, r9, lsl r0
    3c44:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3c48:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c50:	00001349 	andeq	r1, r0, r9, asr #6
    3c54:	03002e0f 	movweq	r2, #3599	; 0xe0f
    3c58:	3b0b3a0e 	blcc	2d2498 <__ccfg+0x2b24f0>
    3c5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3c60:	000b2013 	andeq	r2, fp, r3, lsl r0
    3c64:	002e1000 	eoreq	r1, lr, r0
    3c68:	0b3a0e03 	bleq	e8747c <__ccfg+0xe674d4>
    3c6c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3c70:	00000b20 	andeq	r0, r0, r0, lsr #22
    3c74:	03012e11 	movweq	r2, #7697	; 0x1e11
    3c78:	3b0b3a0e 	blcc	2d24b8 <__ccfg+0x2b2510>
    3c7c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3c80:	010b2013 	tsteq	fp, r3, lsl r0
    3c84:	12000013 	andne	r0, r0, #19
    3c88:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3c8c:	0b3b0b3a 	bleq	ec697c <__ccfg+0xea69d4>
    3c90:	00001349 	andeq	r1, r0, r9, asr #6
    3c94:	03003413 	movweq	r3, #1043	; 0x413
    3c98:	3b0b3a0e 	blcc	2d24d8 <__ccfg+0x2b2530>
    3c9c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3ca0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    3ca4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3ca8:	0b3b0b3a 	bleq	ec6998 <__ccfg+0xea69f0>
    3cac:	01111927 	tsteq	r1, r7, lsr #18
    3cb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3cb4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3cb8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3cbc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3cc0:	0b3b0b3a 	bleq	ec69b0 <__ccfg+0xea6a08>
    3cc4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3cc8:	34160000 	ldrcc	r0, [r6], #-0
    3ccc:	3a0e0300 	bcc	3848d4 <__ccfg+0x36492c>
    3cd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cd4:	00051c13 	andeq	r1, r5, r3, lsl ip
    3cd8:	011d1700 	tsteq	sp, r0, lsl #14
    3cdc:	01521331 	cmpeq	r2, r1, lsr r3
    3ce0:	0b581755 	bleq	1609a3c <__ccfg+0x15e9a94>
    3ce4:	13010b59 	movwne	r0, #7001	; 0x1b59
    3ce8:	05180000 	ldreq	r0, [r8, #-0]
    3cec:	1c133100 	ldfnes	f3, [r3], {-0}
    3cf0:	1900000b 	stmdbne	r0, {r0, r1, r3}
    3cf4:	1331001d 	teqne	r1, #29
    3cf8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3cfc:	0b590b58 	bleq	1646a64 <__ccfg+0x1626abc>
    3d00:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3d04:	11133101 	tstne	r3, r1, lsl #2
    3d08:	58061201 	stmdapl	r6, {r0, r9, ip}
    3d0c:	010b590b 	tsteq	fp, fp, lsl #18
    3d10:	1b000013 	blne	3d64 <NOROM_RFCRTrim+0xd8>
    3d14:	00018289 	andeq	r8, r1, r9, lsl #5
    3d18:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3d1c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    3d20:	11010182 	smlabbne	r1, r2, r1, r0
    3d24:	00130101 	andseq	r0, r3, r1, lsl #2
    3d28:	828a1d00 	addhi	r1, sl, #0, 26
    3d2c:	18020001 	stmdane	r2, {r0}
    3d30:	00184291 	mulseq	r8, r1, r2
    3d34:	82891e00 	addhi	r1, r9, #0, 28
    3d38:	01110101 	tsteq	r1, r1, lsl #2
    3d3c:	13011331 	movwne	r1, #4913	; 0x1331
    3d40:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    3d44:	11010182 	smlabbne	r1, r2, r1, r0
    3d48:	20000001 	andcs	r0, r0, r1
    3d4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3d50:	0b3a0e03 	bleq	e87564 <__ccfg+0xe675bc>
    3d54:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3d58:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d5c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3d60:	00130119 	andseq	r0, r3, r9, lsl r1
    3d64:	00052100 	andeq	r2, r5, r0, lsl #2
    3d68:	0b3a0e03 	bleq	e8757c <__ccfg+0xe675d4>
    3d6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d70:	00001702 	andeq	r1, r0, r2, lsl #14
    3d74:	03003422 	movweq	r3, #1058	; 0x422
    3d78:	3b0b3a0e 	blcc	2d25b8 <__ccfg+0x2b2610>
    3d7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3d80:	23000018 	movwcs	r0, #24
    3d84:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3d88:	0b3b0b3a 	bleq	ec6a78 <__ccfg+0xea6ad0>
    3d8c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3d90:	34240000 	strtcc	r0, [r4], #-0
    3d94:	3a080300 	bcc	20499c <__ccfg+0x1e49f4>
    3d98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3d9c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    3da0:	0111010b 	tsteq	r1, fp, lsl #2
    3da4:	13010612 	movwne	r0, #5650	; 0x1612
    3da8:	34260000 	strtcc	r0, [r6], #-0
    3dac:	3a0e0300 	bcc	3849b4 <__ccfg+0x364a0c>
    3db0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3db4:	00170213 	andseq	r0, r7, r3, lsl r2
    3db8:	011d2700 	tsteq	sp, r0, lsl #14
    3dbc:	01111331 	tsteq	r1, r1, lsr r3
    3dc0:	0b580612 	bleq	1605610 <__ccfg+0x15e5668>
    3dc4:	13010559 	movwne	r0, #5465	; 0x1559
    3dc8:	05280000 	streq	r0, [r8, #-0]!
    3dcc:	00133100 	andseq	r3, r3, r0, lsl #2
    3dd0:	010b2900 	tsteq	fp, r0, lsl #18
    3dd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3dd8:	342a0000 	strtcc	r0, [sl], #-0
    3ddc:	02133100 	andseq	r3, r3, #0, 2
    3de0:	2b000017 	blcs	3e44 <TrimAfterColdResetWakeupFromShutDown+0x64>
    3de4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3de8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3dec:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3df0:	00001301 	andeq	r1, r0, r1, lsl #6
    3df4:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    3df8:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    3dfc:	13490026 	movtne	r0, #36902	; 0x9026
    3e00:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    3e04:	03193f00 	tsteq	r9, #0, 30
    3e08:	3b0b3a0e 	blcc	2d2648 <__ccfg+0x2b26a0>
    3e0c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3e10:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e14:	97184006 	ldrls	r4, [r8, -r6]
    3e18:	00001942 	andeq	r1, r0, r2, asr #18
    3e1c:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    3e20:	00130113 	andseq	r0, r3, r3, lsl r1
    3e24:	00213000 	eoreq	r3, r1, r0
    3e28:	0b2f1349 	bleq	bc8b54 <__ccfg+0xba8bac>
    3e2c:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    3e30:	03193f01 	tsteq	r9, #1, 30
    3e34:	3b0b3a0e 	blcc	2d2674 <__ccfg+0x2b26cc>
    3e38:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3e3c:	00130119 	andseq	r0, r3, r9, lsl r1
    3e40:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    3e44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3e48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3e4c:	13491927 	movtne	r1, #39207	; 0x9927
    3e50:	1301193c 	movwne	r1, #6460	; 0x193c
    3e54:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    3e58:	03193f00 	tsteq	r9, #0, 30
    3e5c:	3b0b3a0e 	blcc	2d269c <__ccfg+0x2b26f4>
    3e60:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3e64:	00193c13 	andseq	r3, r9, r3, lsl ip
    3e68:	11010000 	mrsne	r0, (UNDEF: 1)
    3e6c:	130e2501 	movwne	r2, #58625	; 0xe501
    3e70:	1b0e030b 	blne	384aa4 <__ccfg+0x364afc>
    3e74:	1117550e 	tstne	r7, lr, lsl #10
    3e78:	00171001 	andseq	r1, r7, r1
    3e7c:	00240200 	eoreq	r0, r4, r0, lsl #4
    3e80:	0b3e0b0b 	bleq	f86ab4 <__ccfg+0xf66b0c>
    3e84:	00000e03 	andeq	r0, r0, r3, lsl #28
    3e88:	03001603 	movweq	r1, #1539	; 0x603
    3e8c:	3b0b3a0e 	blcc	2d26cc <__ccfg+0x2b2724>
    3e90:	0013490b 	andseq	r4, r3, fp, lsl #18
    3e94:	00240400 	eoreq	r0, r4, r0, lsl #8
    3e98:	0b3e0b0b 	bleq	f86acc <__ccfg+0xf66b24>
    3e9c:	00000803 	andeq	r0, r0, r3, lsl #16
    3ea0:	0b010405 	bleq	44ebc <__ccfg+0x24f14>
    3ea4:	3b0b3a0b 	blcc	2d26d8 <__ccfg+0x2b2730>
    3ea8:	0013010b 	andseq	r0, r3, fp, lsl #2
    3eac:	00280600 	eoreq	r0, r8, r0, lsl #12
    3eb0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    3eb4:	04070000 	streq	r0, [r7], #-0
    3eb8:	3a0b0b01 	bcc	2c6ac4 <__ccfg+0x2a6b1c>
    3ebc:	01053b0b 	tsteq	r5, fp, lsl #22
    3ec0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3ec4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3ec8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3ecc:	00001349 	andeq	r1, r0, r9, asr #6
    3ed0:	03002e09 	movweq	r2, #3593	; 0xe09
    3ed4:	3b0b3a0e 	blcc	2d2714 <__ccfg+0x2b276c>
    3ed8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3edc:	000b2013 	andeq	r2, fp, r3, lsl r0
    3ee0:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    3ee4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3ee8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3eec:	13491927 	movtne	r1, #39207	; 0x9927
    3ef0:	13010b20 	movwne	r0, #6944	; 0x1b20
    3ef4:	340b0000 	strcc	r0, [fp], #-0
    3ef8:	3a0e0300 	bcc	384b00 <__ccfg+0x364b58>
    3efc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f00:	0c000013 	stceq	0, cr0, [r0], {19}
    3f04:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3f08:	0b3a0e03 	bleq	e8771c <__ccfg+0xe67774>
    3f0c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3f10:	01111349 	tsteq	r1, r9, asr #6
    3f14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3f18:	00194297 	mulseq	r9, r7, r2
    3f1c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3f20:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3f24:	0b3b0b3a 	bleq	ec6c14 <__ccfg+0xea6c6c>
    3f28:	13491927 	movtne	r1, #39207	; 0x9927
    3f2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3f30:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3f34:	00130119 	andseq	r0, r3, r9, lsl r1
    3f38:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3f3c:	0b3a0e03 	bleq	e87750 <__ccfg+0xe677a8>
    3f40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f44:	00001702 	andeq	r1, r0, r2, lsl #14
    3f48:	31012e0f 	tstcc	r1, pc, lsl #28
    3f4c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f50:	97184006 	ldrls	r4, [r8, -r6]
    3f54:	13011942 	movwne	r1, #6466	; 0x1942
    3f58:	34100000 	ldrcc	r0, [r0], #-0
    3f5c:	02133100 	andseq	r3, r3, #0, 2
    3f60:	11000017 	tstne	r0, r7, lsl r0
    3f64:	0111010b 	tsteq	r1, fp, lsl #2
    3f68:	00000612 	andeq	r0, r0, r2, lsl r6
    3f6c:	31003412 	tstcc	r0, r2, lsl r4
    3f70:	13000013 	movwne	r0, #19
    3f74:	1331001d 	teqne	r1, #29
    3f78:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3f7c:	0b590b58 	bleq	1646ce4 <__ccfg+0x1626d3c>
    3f80:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3f84:	03193f01 	tsteq	r9, #1, 30
    3f88:	3b0b3a0e 	blcc	2d27c8 <__ccfg+0x2b2820>
    3f8c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3f90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f94:	97184006 	ldrls	r4, [r8, -r6]
    3f98:	13011942 	movwne	r1, #6466	; 0x1942
    3f9c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    3fa0:	11000182 	smlabbne	r0, r2, r1, r0
    3fa4:	00133101 	andseq	r3, r3, r1, lsl #2
    3fa8:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    3fac:	0b3a0e03 	bleq	e877c0 <__ccfg+0xe67818>
    3fb0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3fb4:	0b201349 	bleq	808ce0 <__ccfg+0x7e8d38>
    3fb8:	00001301 	andeq	r1, r0, r1, lsl #6
    3fbc:	03003417 	movweq	r3, #1047	; 0x417
    3fc0:	3b0b3a0e 	blcc	2d2800 <__ccfg+0x2b2858>
    3fc4:	00134905 	andseq	r4, r3, r5, lsl #18
    3fc8:	00341800 	eorseq	r1, r4, r0, lsl #16
    3fcc:	0b3a0e03 	bleq	e877e0 <__ccfg+0xe67838>
    3fd0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3fd4:	00001802 	andeq	r1, r0, r2, lsl #16
    3fd8:	31001d19 	tstcc	r0, r9, lsl sp
    3fdc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3fe0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3fe4:	1a00000b 	bne	4018 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x44>
    3fe8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3fec:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3ff0:	0b590b58 	bleq	1646d58 <__ccfg+0x1626db0>
    3ff4:	00001301 	andeq	r1, r0, r1, lsl #6
    3ff8:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    3ffc:	1c000017 	stcne	0, cr0, [r0], {23}
    4000:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4004:	0b3a0e03 	bleq	e87818 <__ccfg+0xe67870>
    4008:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    400c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4010:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    4014:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    4018:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    401c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4020:	0b590b58 	bleq	1646d88 <__ccfg+0x1626de0>
    4024:	00001301 	andeq	r1, r0, r1, lsl #6
    4028:	31011d1e 	tstcc	r1, lr, lsl sp
    402c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4030:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    4034:	0000000b 	andeq	r0, r0, fp
    4038:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    403c:	030b130e 	movweq	r1, #45838	; 0xb30e
    4040:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    4044:	10011117 	andne	r1, r1, r7, lsl r1
    4048:	02000017 	andeq	r0, r0, #23
    404c:	0b0b0024 	bleq	2c40e4 <__ccfg+0x2a413c>
    4050:	0e030b3e 	vmoveq.16	d3[0], r0
    4054:	16030000 	strne	r0, [r3], -r0
    4058:	3a0e0300 	bcc	384c60 <__ccfg+0x364cb8>
    405c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4060:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4064:	0b0b0024 	bleq	2c40fc <__ccfg+0x2a4154>
    4068:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    406c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    4070:	3a0e0301 	bcc	384c7c <__ccfg+0x364cd4>
    4074:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    4078:	010b2019 	tsteq	fp, r9, lsl r0
    407c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4080:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    4084:	0b3b0b3a 	bleq	ec6d74 <__ccfg+0xea6dcc>
    4088:	00001349 	andeq	r1, r0, r9, asr #6
    408c:	03003407 	movweq	r3, #1031	; 0x407
    4090:	3b0b3a0e 	blcc	2d28d0 <__ccfg+0x2b2928>
    4094:	0013490b 	andseq	r4, r3, fp, lsl #18
    4098:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    409c:	0b3a0e03 	bleq	e878b0 <__ccfg+0xe67908>
    40a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    40a4:	0b201349 	bleq	808dd0 <__ccfg+0x7e8e28>
    40a8:	00001301 	andeq	r1, r0, r1, lsl #6
    40ac:	31012e09 	tstcc	r1, r9, lsl #28
    40b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    40b4:	97184006 	ldrls	r4, [r8, -r6]
    40b8:	13011942 	movwne	r1, #6466	; 0x1942
    40bc:	050a0000 	streq	r0, [sl, #-0]
    40c0:	02133100 	andseq	r3, r3, #0, 2
    40c4:	0b000017 	bleq	4128 <NOROM_SetupGetTrimForAmpcompCtrl+0x10>
    40c8:	13310034 	teqne	r1, #52	; 0x34
    40cc:	00001702 	andeq	r1, r0, r2, lsl #14
    40d0:	3100050c 	tstcc	r0, ip, lsl #10
    40d4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    40d8:	82890d00 	addhi	r0, r9, #0, 26
    40dc:	01110001 	tsteq	r1, r1
    40e0:	00001331 	andeq	r1, r0, r1, lsr r3
    40e4:	0182890e 	orreq	r8, r2, lr, lsl #18
    40e8:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    40ec:	13311942 	teqne	r1, #1081344	; 0x108000
    40f0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    40f4:	03193f01 	tsteq	r9, #1, 30
    40f8:	3b0b3a0e 	blcc	2d2938 <__ccfg+0x2b2990>
    40fc:	11192705 	tstne	r9, r5, lsl #14
    4100:	40061201 	andmi	r1, r6, r1, lsl #4
    4104:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    4108:	00001301 	andeq	r1, r0, r1, lsl #6
    410c:	03000510 	movweq	r0, #1296	; 0x510
    4110:	3b0b3a0e 	blcc	2d2950 <__ccfg+0x2b29a8>
    4114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4118:	11000017 	tstne	r0, r7, lsl r0
    411c:	01018289 	smlabbeq	r1, r9, r2, r8
    4120:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    4124:	00133119 	andseq	r3, r3, r9, lsl r1
    4128:	828a1200 	addhi	r1, sl, #0, 4
    412c:	18020001 	stmdane	r2, {r0}
    4130:	00184291 	mulseq	r8, r1, r2
    4134:	00341300 	eorseq	r1, r4, r0, lsl #6
    4138:	0b3a0e03 	bleq	e8794c <__ccfg+0xe679a4>
    413c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4140:	00001702 	andeq	r1, r0, r2, lsl #14
    4144:	3f012e14 	svccc	0x00012e14
    4148:	3a0e0319 	bcc	384db4 <__ccfg+0x364e0c>
    414c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    4150:	11134919 	tstne	r3, r9, lsl r9
    4154:	40061201 	andmi	r1, r6, r1, lsl #4
    4158:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    415c:	00001301 	andeq	r1, r0, r1, lsl #6
    4160:	31011d15 	tstcc	r1, r5, lsl sp
    4164:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4168:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    416c:	1600000b 	strne	r0, [r0], -fp
    4170:	0111010b 	tsteq	r1, fp, lsl #2
    4174:	00000612 	andeq	r0, r0, r2, lsl r6
    4178:	3f002e17 	svccc	0x00002e17
    417c:	3a0e0319 	bcc	384de8 <__ccfg+0x364e40>
    4180:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    4184:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    4188:	00000019 	andeq	r0, r0, r9, lsl r0
    418c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4190:	030b130e 	movweq	r1, #45838	; 0xb30e
    4194:	110e1b0e 	tstne	lr, lr, lsl #22
    4198:	10061201 	andne	r1, r6, r1, lsl #4
    419c:	02000017 	andeq	r0, r0, #23
    41a0:	0b0b0024 	bleq	2c4238 <__ccfg+0x2a4290>
    41a4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    41a8:	16030000 	strne	r0, [r3], -r0
    41ac:	3a0e0300 	bcc	384db4 <__ccfg+0x364e0c>
    41b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    41b8:	00240400 	eoreq	r0, r4, r0, lsl #8
    41bc:	0b3e0b0b 	bleq	f86df0 <__ccfg+0xf66e48>
    41c0:	00000e03 	andeq	r0, r0, r3, lsl #28
    41c4:	03001605 	movweq	r1, #1541	; 0x605
    41c8:	3b0b3a0e 	blcc	2d2a08 <__ccfg+0x2b2a60>
    41cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    41d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    41d4:	13490026 	movtne	r0, #36902	; 0x9026
    41d8:	17070000 	strne	r0, [r7, -r0]
    41dc:	3a0b0b01 	bcc	2c6de8 <__ccfg+0x2a6e40>
    41e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41e4:	0013010b 	andseq	r0, r3, fp, lsl #2
    41e8:	000d0800 	andeq	r0, sp, r0, lsl #16
    41ec:	0b3a0e03 	bleq	e87a00 <__ccfg+0xe67a58>
    41f0:	0b390b3b 	bleq	e46ee4 <__ccfg+0xe26f3c>
    41f4:	00001349 	andeq	r1, r0, r9, asr #6
    41f8:	49010109 	stmdbmi	r1, {r0, r3, r8}
    41fc:	00130113 	andseq	r0, r3, r3, lsl r1
    4200:	00210a00 	eoreq	r0, r1, r0, lsl #20
    4204:	0b2f1349 	bleq	bc8f30 <__ccfg+0xba8f88>
    4208:	130b0000 	movwne	r0, #45056	; 0xb000
    420c:	3a0b0b01 	bcc	2c6e18 <__ccfg+0x2a6e70>
    4210:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4214:	0013010b 	andseq	r0, r3, fp, lsl #2
    4218:	000d0c00 	andeq	r0, sp, r0, lsl #24
    421c:	0b3a0e03 	bleq	e87a30 <__ccfg+0xe67a88>
    4220:	0b390b3b 	bleq	e46f14 <__ccfg+0xe26f6c>
    4224:	0b381349 	bleq	e08f50 <__ccfg+0xde8fa8>
    4228:	0f0d0000 	svceq	0x000d0000
    422c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4230:	00370e00 	eorseq	r0, r7, r0, lsl #28
    4234:	00001349 	andeq	r1, r0, r9, asr #6
    4238:	0301130f 	movweq	r1, #4879	; 0x130f
    423c:	3a0b0b0e 	bcc	2c6e7c <__ccfg+0x2a6ed4>
    4240:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4244:	0013010b 	andseq	r0, r3, fp, lsl #2
    4248:	000d1000 	andeq	r1, sp, r0
    424c:	0b3a0803 	bleq	e86260 <__ccfg+0xe662b8>
    4250:	0b390b3b 	bleq	e46f44 <__ccfg+0xe26f9c>
    4254:	0b381349 	bleq	e08f80 <__ccfg+0xde8fd8>
    4258:	0f110000 	svceq	0x00110000
    425c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4260:	12000013 	andne	r0, r0, #19
    4264:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4268:	0b3a050b 	bleq	e8569c <__ccfg+0xe656f4>
    426c:	0b390b3b 	bleq	e46f60 <__ccfg+0xe26fb8>
    4270:	00001301 	andeq	r1, r0, r1, lsl #6
    4274:	03000d13 	movweq	r0, #3347	; 0xd13
    4278:	3b0b3a0e 	blcc	2d2ab8 <__ccfg+0x2b2b10>
    427c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4280:	00053813 	andeq	r3, r5, r3, lsl r8
    4284:	00151400 	andseq	r1, r5, r0, lsl #8
    4288:	00001927 	andeq	r1, r0, r7, lsr #18
    428c:	27011515 	smladcs	r1, r5, r5, r1
    4290:	01134919 	tsteq	r3, r9, lsl r9
    4294:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4298:	13490005 	movtne	r0, #36869	; 0x9005
    429c:	13170000 	tstne	r7, #0
    42a0:	0b0e0301 	bleq	384eac <__ccfg+0x364f04>
    42a4:	3b0b3a05 	blcc	2d2ac0 <__ccfg+0x2b2b18>
    42a8:	010b3905 	tsteq	fp, r5, lsl #18
    42ac:	18000013 	stmdane	r0, {r0, r1, r4}
    42b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    42b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    42bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    42c0:	03000d19 	movweq	r0, #3353	; 0xd19
    42c4:	3b0b3a0e 	blcc	2d2b04 <__ccfg+0x2b2b5c>
    42c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42cc:	00053813 	andeq	r3, r5, r3, lsl r8
    42d0:	01131a00 	tsteq	r3, r0, lsl #20
    42d4:	0b0b0e03 	bleq	2c7ae8 <__ccfg+0x2a7b40>
    42d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42dc:	13010b39 	movwne	r0, #6969	; 0x1b39
    42e0:	131b0000 	tstne	fp, #0
    42e4:	3a0b0b01 	bcc	2c6ef0 <__ccfg+0x2a6f48>
    42e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    42ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    42f0:	01171c00 	tsteq	r7, r0, lsl #24
    42f4:	0b3a0b0b 	bleq	e86f28 <__ccfg+0xe66f80>
    42f8:	0b39053b 	bleq	e457ec <__ccfg+0xe25844>
    42fc:	00001301 	andeq	r1, r0, r1, lsl #6
    4300:	03000d1d 	movweq	r0, #3357	; 0xd1d
    4304:	3b0b3a0e 	blcc	2d2b44 <__ccfg+0x2b2b9c>
    4308:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    430c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4310:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4314:	00001301 	andeq	r1, r0, r1, lsl #6
    4318:	0300341f 	movweq	r3, #1055	; 0x41f
    431c:	3b0b3a0e 	blcc	2d2b5c <__ccfg+0x2b2bb4>
    4320:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4324:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4328:	20000019 	andcs	r0, r0, r9, lsl r0
    432c:	00000026 	andeq	r0, r0, r6, lsr #32
    4330:	03003421 	movweq	r3, #1057	; 0x421
    4334:	3b0b3a0e 	blcc	2d2b74 <__ccfg+0x2b2bcc>
    4338:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    433c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4340:	22000019 	andcs	r0, r0, #25
    4344:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4348:	0b3a0e03 	bleq	e87b5c <__ccfg+0xe67bb4>
    434c:	0b390b3b 	bleq	e47040 <__ccfg+0xe27098>
    4350:	13491927 	movtne	r1, #39207	; 0x9927
    4354:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    435c:	00130119 	andseq	r0, r3, r9, lsl r1
    4360:	00052300 	andeq	r2, r5, r0, lsl #6
    4364:	0b3a0e03 	bleq	e87b78 <__ccfg+0xe67bd0>
    4368:	0b390b3b 	bleq	e4705c <__ccfg+0xe270b4>
    436c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    4370:	05240000 	streq	r0, [r4, #-0]!
    4374:	3a0e0300 	bcc	384f7c <__ccfg+0x364fd4>
    4378:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    437c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4380:	1742b717 	smlaldne	fp, r2, r7, r7
    4384:	34250000 	strtcc	r0, [r5], #-0
    4388:	3a080300 	bcc	204f90 <__ccfg+0x1e4fe8>
    438c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4390:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4394:	1742b717 	smlaldne	fp, r2, r7, r7
    4398:	34260000 	strtcc	r0, [r6], #-0
    439c:	3a0e0300 	bcc	384fa4 <__ccfg+0x364ffc>
    43a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    43a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    43a8:	1742b717 	smlaldne	fp, r2, r7, r7
    43ac:	01000000 	mrseq	r0, (UNDEF: 0)
    43b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    43b4:	0e030b13 	vmoveq.32	d3[0], r0
    43b8:	01110e1b 	tsteq	r1, fp, lsl lr
    43bc:	17100612 			; <UNDEFINED> instruction: 0x17100612
    43c0:	24020000 	strcs	r0, [r2], #-0
    43c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    43c8:	000e030b 	andeq	r0, lr, fp, lsl #6
    43cc:	00240300 	eoreq	r0, r4, r0, lsl #6
    43d0:	0b3e0b0b 	bleq	f87004 <__ccfg+0xf6705c>
    43d4:	00000803 	andeq	r0, r0, r3, lsl #16
    43d8:	03001604 	movweq	r1, #1540	; 0x604
    43dc:	3b0b3a0e 	blcc	2d2c1c <__ccfg+0x2b2c74>
    43e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    43e4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    43e8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    43ec:	0b3b0b3a 	bleq	ec70dc <__ccfg+0xea7134>
    43f0:	13490b39 	movtne	r0, #39737	; 0x9b39
    43f4:	17060000 	strne	r0, [r6, -r0]
    43f8:	3a0b0b01 	bcc	2c7004 <__ccfg+0x2a705c>
    43fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4400:	0013010b 	andseq	r0, r3, fp, lsl #2
    4404:	000d0700 	andeq	r0, sp, r0, lsl #14
    4408:	0b3a0e03 	bleq	e87c1c <__ccfg+0xe67c74>
    440c:	0b390b3b 	bleq	e47100 <__ccfg+0xe27158>
    4410:	00001349 	andeq	r1, r0, r9, asr #6
    4414:	49010108 	stmdbmi	r1, {r3, r8}
    4418:	00130113 	andseq	r0, r3, r3, lsl r1
    441c:	00210900 	eoreq	r0, r1, r0, lsl #18
    4420:	0b2f1349 	bleq	bc914c <__ccfg+0xba91a4>
    4424:	130a0000 	movwne	r0, #40960	; 0xa000
    4428:	3a0b0b01 	bcc	2c7034 <__ccfg+0x2a708c>
    442c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4430:	0013010b 	andseq	r0, r3, fp, lsl #2
    4434:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4438:	0b3a0e03 	bleq	e87c4c <__ccfg+0xe67ca4>
    443c:	0b390b3b 	bleq	e47130 <__ccfg+0xe27188>
    4440:	0b381349 	bleq	e0916c <__ccfg+0xde91c4>
    4444:	0f0c0000 	svceq	0x000c0000
    4448:	000b0b00 	andeq	r0, fp, r0, lsl #22
    444c:	01130d00 	tsteq	r3, r0, lsl #26
    4450:	0b0b0e03 	bleq	2c7c64 <__ccfg+0x2a7cbc>
    4454:	0b3b0b3a 	bleq	ec7144 <__ccfg+0xea719c>
    4458:	13010b39 	movwne	r0, #6969	; 0x1b39
    445c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4460:	3a080300 	bcc	205068 <__ccfg+0x1e50c0>
    4464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4468:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    446c:	0f00000b 	svceq	0x0000000b
    4470:	0b0b000f 	bleq	2c44b4 <__ccfg+0x2a450c>
    4474:	00001349 	andeq	r1, r0, r9, asr #6
    4478:	03011310 	movweq	r1, #4880	; 0x1310
    447c:	3a050b0e 	bcc	1470bc <__ccfg+0x127114>
    4480:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4484:	0013010b 	andseq	r0, r3, fp, lsl #2
    4488:	000d1100 	andeq	r1, sp, r0, lsl #2
    448c:	0b3a0e03 	bleq	e87ca0 <__ccfg+0xe67cf8>
    4490:	0b390b3b 	bleq	e47184 <__ccfg+0xe271dc>
    4494:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4498:	15120000 	ldrne	r0, [r2, #-0]
    449c:	00192700 	andseq	r2, r9, r0, lsl #14
    44a0:	01151300 	tsteq	r5, r0, lsl #6
    44a4:	13491927 	movtne	r1, #39207	; 0x9927
    44a8:	00001301 	andeq	r1, r0, r1, lsl #6
    44ac:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    44b0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    44b4:	13490026 	movtne	r0, #36902	; 0x9026
    44b8:	13160000 	tstne	r6, #0
    44bc:	0b0e0301 	bleq	3850c8 <__ccfg+0x365120>
    44c0:	3b0b3a05 	blcc	2d2cdc <__ccfg+0x2b2d34>
    44c4:	010b3905 	tsteq	fp, r5, lsl #18
    44c8:	17000013 	smladne	r0, r3, r0, r0
    44cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    44d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    44d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    44dc:	03000d18 	movweq	r0, #3352	; 0xd18
    44e0:	3b0b3a0e 	blcc	2d2d20 <__ccfg+0x2b2d78>
    44e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    44e8:	00053813 	andeq	r3, r5, r3, lsl r8
    44ec:	01131900 	tsteq	r3, r0, lsl #18
    44f0:	0b0b0e03 	bleq	2c7d04 <__ccfg+0x2a7d5c>
    44f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44f8:	13010b39 	movwne	r0, #6969	; 0x1b39
    44fc:	131a0000 	tstne	sl, #0
    4500:	3a0b0b01 	bcc	2c710c <__ccfg+0x2a7164>
    4504:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4508:	0013010b 	andseq	r0, r3, fp, lsl #2
    450c:	01171b00 	tsteq	r7, r0, lsl #22
    4510:	0b3a0b0b 	bleq	e87144 <__ccfg+0xe6719c>
    4514:	0b39053b 	bleq	e45a08 <__ccfg+0xe25a60>
    4518:	00001301 	andeq	r1, r0, r1, lsl #6
    451c:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4520:	3b0b3a0e 	blcc	2d2d60 <__ccfg+0x2b2db8>
    4524:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4528:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    452c:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4530:	0000193c 	andeq	r1, r0, ip, lsr r9
    4534:	2701151e 	smladcs	r1, lr, r5, r1
    4538:	00130119 	andseq	r0, r3, r9, lsl r1
    453c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4540:	0b3a0e03 	bleq	e87d54 <__ccfg+0xe67dac>
    4544:	0b39053b 	bleq	e45a38 <__ccfg+0xe25a90>
    4548:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    454c:	0000193c 	andeq	r1, r0, ip, lsr r9
    4550:	03003420 	movweq	r3, #1056	; 0x420
    4554:	3b0b3a0e 	blcc	2d2d94 <__ccfg+0x2b2dec>
    4558:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    455c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4560:	21000019 	tstcs	r0, r9, lsl r0
    4564:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4568:	0b3a0e03 	bleq	e87d7c <__ccfg+0xe67dd4>
    456c:	0b390b3b 	bleq	e47260 <__ccfg+0xe272b8>
    4570:	13491927 	movtne	r1, #39207	; 0x9927
    4574:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4578:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    457c:	00130119 	andseq	r0, r3, r9, lsl r1
    4580:	00342200 	eorseq	r2, r4, r0, lsl #4
    4584:	0b3a0e03 	bleq	e87d98 <__ccfg+0xe67df0>
    4588:	0b390b3b 	bleq	e4727c <__ccfg+0xe272d4>
    458c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4590:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4594:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    4598:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    459c:	0b3b0b3a 	bleq	ec728c <__ccfg+0xea72e4>
    45a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    45a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    45a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    45ac:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    45b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    45b4:	0b3b0b3a 	bleq	ec72a4 <__ccfg+0xea72fc>
    45b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    45bc:	00001802 	andeq	r1, r0, r2, lsl #16
    45c0:	01110100 	tsteq	r1, r0, lsl #2
    45c4:	0b130e25 	bleq	4c7e60 <__ccfg+0x4a7eb8>
    45c8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    45cc:	00001710 	andeq	r1, r0, r0, lsl r7
    45d0:	0b002402 	bleq	d5e0 <__exidx_end+0x79e0>
    45d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    45d8:	03000008 	movweq	r0, #8
    45dc:	0b0b0024 	bleq	2c4674 <__ccfg+0x2a46cc>
    45e0:	0e030b3e 	vmoveq.16	d3[0], r0
    45e4:	16040000 	strne	r0, [r4], -r0
    45e8:	3a0e0300 	bcc	3851f0 <__ccfg+0x365248>
    45ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    45f0:	0013490b 	andseq	r4, r3, fp, lsl #18
    45f4:	00160500 	andseq	r0, r6, r0, lsl #10
    45f8:	0b3a0e03 	bleq	e87e0c <__ccfg+0xe67e64>
    45fc:	0b390b3b 	bleq	e472f0 <__ccfg+0xe27348>
    4600:	00001349 	andeq	r1, r0, r9, asr #6
    4604:	0b011706 	bleq	4a224 <__ccfg+0x2a27c>
    4608:	3b0b3a0b 	blcc	2d2e3c <__ccfg+0x2b2e94>
    460c:	010b390b 	tsteq	fp, fp, lsl #18
    4610:	07000013 	smladeq	r0, r3, r0, r0
    4614:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4618:	0b3b0b3a 	bleq	ec7308 <__ccfg+0xea7360>
    461c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4620:	01080000 	mrseq	r0, (UNDEF: 8)
    4624:	01134901 	tsteq	r3, r1, lsl #18
    4628:	09000013 	stmdbeq	r0, {r0, r1, r4}
    462c:	13490021 	movtne	r0, #36897	; 0x9021
    4630:	00000b2f 	andeq	r0, r0, pc, lsr #22
    4634:	0b01130a 	bleq	49264 <__ccfg+0x292bc>
    4638:	3b0b3a0b 	blcc	2d2e6c <__ccfg+0x2b2ec4>
    463c:	010b390b 	tsteq	fp, fp, lsl #18
    4640:	0b000013 	bleq	4694 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    4644:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4648:	0b3b0b3a 	bleq	ec7338 <__ccfg+0xea7390>
    464c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4650:	00000b38 	andeq	r0, r0, r8, lsr fp
    4654:	0b000f0c 	bleq	828c <__exidx_end+0x268c>
    4658:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    465c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4660:	0b3a0b0b 	bleq	e87294 <__ccfg+0xe672ec>
    4664:	0b390b3b 	bleq	e47358 <__ccfg+0xe273b0>
    4668:	00001301 	andeq	r1, r0, r1, lsl #6
    466c:	03000d0e 	movweq	r0, #3342	; 0xd0e
    4670:	3b0b3a08 	blcc	2d2e98 <__ccfg+0x2b2ef0>
    4674:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4678:	000b3813 	andeq	r3, fp, r3, lsl r8
    467c:	000f0f00 	andeq	r0, pc, r0, lsl #30
    4680:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4684:	13100000 	tstne	r0, #0
    4688:	0b0e0301 	bleq	385294 <__ccfg+0x3652ec>
    468c:	3b0b3a05 	blcc	2d2ea8 <__ccfg+0x2b2f00>
    4690:	010b390b 	tsteq	fp, fp, lsl #18
    4694:	11000013 	tstne	r0, r3, lsl r0
    4698:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    469c:	0b3b0b3a 	bleq	ec738c <__ccfg+0xea73e4>
    46a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    46a4:	00000538 	andeq	r0, r0, r8, lsr r5
    46a8:	27001512 	smladcs	r0, r2, r5, r1
    46ac:	13000019 	movwne	r0, #25
    46b0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    46b4:	13011349 	movwne	r1, #4937	; 0x1349
    46b8:	05140000 	ldreq	r0, [r4, #-0]
    46bc:	00134900 	andseq	r4, r3, r0, lsl #18
    46c0:	00261500 	eoreq	r1, r6, r0, lsl #10
    46c4:	00001349 	andeq	r1, r0, r9, asr #6
    46c8:	03011316 	movweq	r1, #4886	; 0x1316
    46cc:	3a050b0e 	bcc	14730c <__ccfg+0x127364>
    46d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    46d8:	000d1700 	andeq	r1, sp, r0, lsl #14
    46dc:	0b3a0e03 	bleq	e87ef0 <__ccfg+0xe67f48>
    46e0:	0b39053b 	bleq	e45bd4 <__ccfg+0xe25c2c>
    46e4:	0b381349 	bleq	e09410 <__ccfg+0xde9468>
    46e8:	0d180000 	ldceq	0, cr0, [r8, #-0]
    46ec:	3a0e0300 	bcc	3852f4 <__ccfg+0x36534c>
    46f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    46f8:	19000005 	stmdbne	r0, {r0, r2}
    46fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4700:	0b3a0b0b 	bleq	e87334 <__ccfg+0xe6738c>
    4704:	0b39053b 	bleq	e45bf8 <__ccfg+0xe25c50>
    4708:	00001301 	andeq	r1, r0, r1, lsl #6
    470c:	0b01131a 	bleq	4937c <__ccfg+0x293d4>
    4710:	3b0b3a0b 	blcc	2d2f44 <__ccfg+0x2b2f9c>
    4714:	010b3905 	tsteq	fp, r5, lsl #18
    4718:	1b000013 	blne	476c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x1c>
    471c:	0b0b0117 	bleq	2c4b80 <__ccfg+0x2a4bd8>
    4720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4724:	13010b39 	movwne	r0, #6969	; 0x1b39
    4728:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    472c:	3a0e0300 	bcc	385334 <__ccfg+0x36538c>
    4730:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4734:	0013490b 	andseq	r4, r3, fp, lsl #18
    4738:	00131d00 	andseq	r1, r3, r0, lsl #26
    473c:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4740:	151e0000 	ldrne	r0, [lr, #-0]
    4744:	01192701 	tsteq	r9, r1, lsl #14
    4748:	1f000013 	svcne	0x00000013
    474c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4750:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4754:	13490b39 	movtne	r0, #39737	; 0x9b39
    4758:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    475c:	34200000 	strtcc	r0, [r0], #-0
    4760:	3a0e0300 	bcc	385368 <__ccfg+0x3653c0>
    4764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4768:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    476c:	21000018 	tstcs	r0, r8, lsl r0
    4770:	13470034 	movtne	r0, #28724	; 0x7034
    4774:	00001802 	andeq	r1, r0, r2, lsl #16
    4778:	01110100 	tsteq	r1, r0, lsl #2
    477c:	0b130e25 	bleq	4c8018 <__ccfg+0x4a8070>
    4780:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    4784:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4788:	00001710 	andeq	r1, r0, r0, lsl r7
    478c:	0b002402 	bleq	d79c <__exidx_end+0x7b9c>
    4790:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4794:	0300000e 	movweq	r0, #14
    4798:	0b0b0024 	bleq	2c4830 <__ccfg+0x2a4888>
    479c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    47a0:	16040000 	strne	r0, [r4], -r0
    47a4:	3a0e0300 	bcc	3853ac <__ccfg+0x365404>
    47a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    47b0:	000f0500 	andeq	r0, pc, r0, lsl #10
    47b4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    47b8:	15060000 	strne	r0, [r6, #-0]
    47bc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    47c0:	00130113 	andseq	r0, r3, r3, lsl r1
    47c4:	00050700 	andeq	r0, r5, r0, lsl #14
    47c8:	00001349 	andeq	r1, r0, r9, asr #6
    47cc:	00002608 	andeq	r2, r0, r8, lsl #12
    47d0:	00340900 	eorseq	r0, r4, r0, lsl #18
    47d4:	0b3a0e03 	bleq	e87fe8 <__ccfg+0xe68040>
    47d8:	0b390b3b 	bleq	e474cc <__ccfg+0xe27524>
    47dc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    47e0:	0000193c 	andeq	r1, r0, ip, lsr r9
    47e4:	0301040a 	movweq	r0, #5130	; 0x140a
    47e8:	0b0b3e0e 	bleq	2d4028 <__ccfg+0x2b4080>
    47ec:	3a13490b 	bcc	4d6c20 <__ccfg+0x4b6c78>
    47f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    47f8:	00280b00 	eoreq	r0, r8, r0, lsl #22
    47fc:	0b1c0e03 	bleq	708010 <__ccfg+0x6e8068>
    4800:	010c0000 	mrseq	r0, (UNDEF: 12)
    4804:	01134901 	tsteq	r3, r1, lsl #18
    4808:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    480c:	00000021 	andeq	r0, r0, r1, lsr #32
    4810:	4900260e 	stmdbmi	r0, {r1, r2, r3, r9, sl, sp}
    4814:	0f000013 	svceq	0x00000013
    4818:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    481c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4820:	13490b39 	movtne	r0, #39737	; 0x9b39
    4824:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    4828:	13100000 	tstne	r0, #0
    482c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4830:	11000019 	tstne	r0, r9, lsl r0
    4834:	19270015 	stmdbne	r7!, {r0, r2, r4}
    4838:	17120000 	ldrne	r0, [r2, -r0]
    483c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4840:	13000019 	movwne	r0, #25
    4844:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4848:	0b3a0b0b 	bleq	e8747c <__ccfg+0xe674d4>
    484c:	0b39053b 	bleq	e45d40 <__ccfg+0xe25d98>
    4850:	00001301 	andeq	r1, r0, r1, lsl #6
    4854:	03000d14 	movweq	r0, #3348	; 0xd14
    4858:	3b0b3a0e 	blcc	2d3098 <__ccfg+0x2b30f0>
    485c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4860:	000b3813 	andeq	r3, fp, r3, lsl r8
    4864:	00211500 	eoreq	r1, r1, r0, lsl #10
    4868:	0b2f1349 	bleq	bc9594 <__ccfg+0xba95ec>
    486c:	04160000 	ldreq	r0, [r6], #-0
    4870:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
    4874:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
    4878:	3b0b3a13 	blcc	2d30cc <__ccfg+0x2b3124>
    487c:	010b3905 	tsteq	fp, r5, lsl #18
    4880:	17000013 	smladne	r0, r3, r0, r0
    4884:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4888:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    488c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4890:	00000b38 	andeq	r0, r0, r8, lsr fp
    4894:	0b011718 	bleq	4a4fc <__ccfg+0x2a554>
    4898:	3b0b3a0b 	blcc	2d30cc <__ccfg+0x2b3124>
    489c:	010b3905 	tsteq	fp, r5, lsl #18
    48a0:	19000013 	stmdbne	r0, {r0, r1, r4}
    48a4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    48a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48ac:	13490b39 	movtne	r0, #39737	; 0x9b39
    48b0:	161a0000 	ldrne	r0, [sl], -r0
    48b4:	3a0e0300 	bcc	3854bc <__ccfg+0x365514>
    48b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    48bc:	0013490b 	andseq	r4, r3, fp, lsl #18
    48c0:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    48c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    48c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48cc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    48d0:	01111349 	tsteq	r1, r9, asr #6
    48d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    48d8:	00194297 	mulseq	r9, r7, r2
    48dc:	00051c00 	andeq	r1, r5, r0, lsl #24
    48e0:	0b3a0803 	bleq	e868f4 <__ccfg+0xe6694c>
    48e4:	0b39053b 	bleq	e45dd8 <__ccfg+0xe25e30>
    48e8:	17021349 	strne	r1, [r2, -r9, asr #6]
    48ec:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    48f0:	00341d00 	eorseq	r1, r4, r0, lsl #26
    48f4:	0b3a0803 	bleq	e86908 <__ccfg+0xe66960>
    48f8:	0b39053b 	bleq	e45dec <__ccfg+0xe25e44>
    48fc:	00001349 	andeq	r1, r0, r9, asr #6
    4900:	55010b1e 	strpl	r0, [r1, #-2846]	; 0xfffff4e2
    4904:	1f000017 	svcne	0x00000017
    4908:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    490c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4910:	13490b39 	movtne	r0, #39737	; 0x9b39
    4914:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4918:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000648 	andeq	r0, r0, r8, asr #12
       4:	0000069c 	muleq	r0, ip, r6
       8:	48500001 	ldmdami	r0, {r0}^
       c:	4a00000b 	bmi	40 <g_pfnVectors+0x40>
    return node->data_base.item_array[index];
      10:	0100000b 	tsteq	r0, fp
      14:	0b6a5000 	bleq	1a9401c <__ccfg+0x1a74074>
      18:	0b6d0000 	bleq	1b40020 <__ccfg+0x1b20078>
};
      1c:	00010000 	andeq	r0, r1, r0
      20:	00000050 	andeq	r0, r0, r0, asr r0
      24:	00000000 	andeq	r0, r0, r0
      28:	00076400 	andeq	r6, r7, r0, lsl #8
      2c:	00076800 	andeq	r6, r7, r0, lsl #16
      30:	91000200 	mrsls	r0, R8_usr
      34:	00000064 	andeq	r0, r0, r4, rrx
      38:	00000000 	andeq	r0, r0, r0
      3c:	00076400 	andeq	r6, r7, r0, lsl #8
			i = k;
      40:	00076800 	andeq	r6, r7, r0, lsl #16
				j->Next = k;
      44:	53000100 	movwpl	r0, #256	; 0x100
	...
}
      50:	000007a8 	andeq	r0, r0, r8, lsr #15
      54:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
		release;
      58:	3a540001 	bcc	1500064 <__ccfg+0x14e00bc>
      5c:	5a000008 	bpl	84 <g_pfnVectors+0x84>
			nq++;
      60:	01000008 	tsteq	r0, r8
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00005400 	andeq	r5, r0, r0, lsl #8
      68:	00000000 	andeq	r0, r0, r0
      6c:	07860000 	streq	r0, [r6, r0]
      70:	07880000 	streq	r0, [r8, r0]
      74:	00010000 	andeq	r0, r1, r0
      78:	00000051 	andeq	r0, r0, r1, asr r0
      7c:	00000000 	andeq	r0, r0, r0
      80:	00078600 	andeq	r8, r7, r0, lsl #12
      84:	00078800 	andeq	r8, r7, r0, lsl #16
      88:	52000100 	andpl	r0, r0, #0, 2
	...
	if (!button_still_pressed (__button_list [pbutton]))
      94:	000007f4 	strdeq	r0, [r0], -r4
      98:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	if (baction == NULL)
      9c:	ff500001 			; <UNDEFINED> instruction: 0xff500001
      a0:	1a000007 	bne	c4 <g_pfnVectors+0xc4>
	(*baction) (pbutton);
      a4:	01000008 	tsteq	r0, r8
endthread
      a8:	00005400 	andeq	r5, r0, r0, lsl #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000000 	andeq	r0, r0, r0
      b0:	08e40000 	stmiaeq	r4!, {}^	; <UNPREDICTABLE>
endthread
      b4:	08f40000 	ldmeq	r4!, {}^	; <UNPREDICTABLE>
      b8:	00010000 	andeq	r0, r1, r0
      bc:	0008f854 	andeq	pc, r8, r4, asr r8	; <UNPREDICTABLE>
      c0:	00090200 	andeq	r0, r9, r0, lsl #4
      c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
fsm sender(struct ResponseMessage *message) {
      d0:	0000094a 	andeq	r0, r0, sl, asr #18
}
      d4:	00000957 	andeq	r0, r0, r7, asr r9
      d8:	57500001 	ldrbpl	r0, [r0, -r1]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	90000009 	andls	r0, r0, r9
      e0:	01000009 	tsteq	r0, r9
      e4:	00005400 	andeq	r5, r0, r0, lsl #8
      e8:	00000000 	andeq	r0, r0, r0
      ec:	09f00000 	ldmibeq	r0!, {}^	; <UNPREDICTABLE>
		packet[1] = message->gid;
      f0:	09fd0000 	ldmibeq	sp!, {}^	; <UNPREDICTABLE>
      f4:	00010000 	andeq	r0, r1, r0
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	0009fd50 	andeq	pc, r9, r0, asr sp	; <UNPREDICTABLE>
      fc:	000a2e00 	andeq	r2, sl, r0, lsl #28
		DEBUG_PRINT("I am th message GID %d", message->gid);
     100:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		*p = message->request_number;p++;
     10c:	00000b16 	andeq	r0, r0, r6, lsl fp
		*p = message->sender_id;p++;
     110:	00000b40 	andeq	r0, r0, r0, asr #22
		*p = message->receiver_id;p++;
     114:	00540001 	subseq	r0, r4, r1
		switch(message->tpe) {
     118:	00000000 	andeq	r0, r0, r0
     11c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     120:	9c000002 	stcls	0, cr0, [r0], {2}
		tcv_endp(packet);
     124:	01000002 	tsteq	r0, r2
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	062e5000 	strteq	r5, [lr], -r0
     12c:	06310000 	ldrteq	r0, [r1], -r0
}
     130:	00010000 	andeq	r0, r1, r0
		finish;
     134:	00000050 	andeq	r0, r0, r0, asr r0
     138:	00000000 	andeq	r0, r0, r0
     13c:	00028400 	andeq	r8, r2, r0, lsl #8
				strncpy(p, message->record, sizeof(message->record));
     140:	00030600 	andeq	r0, r3, r0, lsl #12
				*p = message->padding;p++;
     144:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
				strncpy(p, message->record, sizeof(message->record));
     148:	00000318 	andeq	r0, r0, r8, lsl r3
     14c:	00000346 	andeq	r0, r0, r6, asr #6
     150:	d6540001 	ldrble	r0, [r4], -r1
				strncpy(p, message->record, sizeof(message->record));
     154:	20000003 	andcs	r0, r0, r3
     158:	01000004 	tsteq	r0, r4
				strncpy(p, message->record, sizeof(message->record));
     15c:	043c5400 	ldrteq	r5, [ip], #-1024	; 0xfffffc00
				break;
     160:	04a20000 	strteq	r0, [r2], #0
				*p = message->record_index;p++;
     164:	00010000 	andeq	r0, r1, r0
				*p = message->padding;
     168:	0004b654 	andeq	fp, r4, r4, asr r6
				break;
     16c:	00059400 	andeq	r9, r5, r0, lsl #8
     170:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     174:	000005a8 	andeq	r0, r0, r8, lsr #11
     178:	00000648 	andeq	r0, r0, r8, asr #12
     17c:	00540001 	subseq	r0, r4, r1
     180:	00000000 	andeq	r0, r0, r0
		node->nnodes[i] = 0;
     184:	e0000000 	and	r0, r0, r0
     188:	e6000002 	str	r0, [r0], -r2
     18c:	01000002 	tsteq	r0, r2
     190:	02e65000 	rsceq	r5, r6, #0
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	03060000 	movweq	r0, #24576	; 0x6000
bool init_node(struct Node* node){
     198:	00010000 	andeq	r0, r1, r0
    node->id  = 0;                  // default id value 0
     19c:	00000056 	andeq	r0, r0, r6, asr r0
    node->index = 0;                // default entry count 0
     1a0:	00000000 	andeq	r0, r0, r0
    node->data_base.item_count = 0; // default no items in array
     1a4:	00043200 	andeq	r3, r4, r0, lsl #4
	reset_array(node);
     1a8:	00043400 	andeq	r3, r4, r0, lsl #8
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	50000100 	andpl	r0, r0, r0, lsl #2
     1b0:	00000434 	andeq	r0, r0, r4, lsr r4
};
     1b4:	0000043c 	andeq	r0, r0, ip, lsr r4
     1b8:	00540001 	subseq	r0, r4, r1
uint8_t generate_request_num(void){
     1bc:	00000000 	andeq	r0, r0, r0
    return (uint8_t) (rand() % 255);
     1c0:	14000000 	strne	r0, [r0], #-0
     1c4:	3c000004 	stccc	0, cr0, [r0], {4}
     1c8:	01000004 	tsteq	r0, r4
}
     1cc:	04965600 	ldreq	r5, [r6], #1536	; 0x600
            node->nnodes[i] = 0; // set to null byte
     1d0:	04ae0000 	strteq	r0, [lr], #0
     1d4:	00010000 	andeq	r0, r1, r0
     1d8:	00000056 	andeq	r0, r0, r6, asr r0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00000000 	andeq	r0, r0, r0
};
     1e0:	00040400 	andeq	r0, r4, r0, lsl #8
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	00040c00 	andeq	r0, r4, r0, lsl #24
     1e8:	75000200 	strvc	r0, [r0, #-512]	; 0xfffffe00
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	00000006 	andeq	r0, r0, r6
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	00040400 	andeq	r0, r4, r0, lsl #8
        node->data_base.item_count -= 1;
     1f8:	00040c00 	andeq	r0, r4, r0, lsl #24
};
     1fc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00000566 	andeq	r0, r0, r6, ror #10
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	0000056c 	andeq	r0, r0, ip, ror #10
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	6c550001 	mrrcvs	0, 0, r0, r5, cr1
            node->data_base.item_array[i].timestamp = 0;
     214:	80000005 	andhi	r0, r0, r5
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	02000005 	andeq	r0, r0, #5
    node->data_base.item_count = 0;
     21c:	00087800 	andeq	r7, r8, r0, lsl #16
}
     220:	00000000 	andeq	r0, r0, r0
        return true;
     224:	66000000 	strvs	r0, [r0], -r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	80000005 	andhi	r0, r0, r5
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	01000005 	tsteq	r0, r5
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	00005400 	andeq	r5, r0, r0, lsl #8
     234:	00000000 	andeq	r0, r0, r0
     238:	00c80000 	sbceq	r0, r8, r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00d90000 	sbcseq	r0, r9, r0
	response_message->tpe = RESPONSE;
     240:	00010000 	andeq	r0, r1, r0
	response_message->status = status;
     244:	0000da50 	andeq	sp, r0, r0, asr sl
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	0000eb00 	andeq	lr, r0, r0, lsl #22
	response_message->gid = gid;
     24c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (!padding){
     258:	000000dc 	ldrdeq	r0, [r0], -ip
		response_message->padding = padding;
     25c:	000000e0 	andeq	r0, r0, r0, ror #1
	if (rec != NULL){
     260:	00730005 	rsbseq	r0, r3, r5
     264:	00082306 	andeq	r2, r8, r6, lsl #6
		strncpy(response_message->record, rec, 20);
     268:	00000000 	andeq	r0, r0, r0
     26c:	50000000 	andpl	r0, r0, r0
     270:	52000001 	andpl	r0, r0, #1
};
     274:	01000001 	tsteq	r0, r1
fsm receiver(struct Node* node_db) {
     278:	00005000 	andeq	r5, r0, r0
     27c:	00000000 	andeq	r0, r0, r0
     280:	02260000 	eoreq	r0, r6, #0
     284:	022e0000 	eoreq	r0, lr, #0
     288:	00010000 	andeq	r0, r1, r0
     28c:	00000050 	andeq	r0, r0, r0, asr r0
     290:	00000000 	andeq	r0, r0, r0
     294:	00022600 	andeq	r2, r2, r0, lsl #12
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	00023f00 	andeq	r3, r2, r0, lsl #30
     29c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	00000226 	andeq	r0, r0, r6, lsr #4
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	0000023f 	andeq	r0, r0, pc, lsr r2
     2b0:	00520001 	subseq	r0, r2, r1
     2b4:	00000000 	andeq	r0, r0, r0
		switch (response_message_5->tpe){
     2b8:	26000000 	strcs	r0, [r0], -r0
     2bc:	3f000002 	svccc	0x00000002
     2c0:	01000002 	tsteq	r0, r2
     2c4:	00005300 	andeq	r5, r0, r0, lsl #6
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	024a0000 	subeq	r0, sl, #0
     2d0:	026e0000 	rsbeq	r0, lr, #0
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	00010000 	andeq	r0, r1, r0
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	00026e50 	andeq	r6, r2, r0, asr lr
				if (discovery_request_message->gid == node_db->gid){
     2dc:	00027800 	andeq	r7, r2, r0, lsl #16
     2e0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	00000200 	andeq	r0, r0, r0, lsl #4
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	00000220 	andeq	r0, r0, r0, lsr #4
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	22500001 	subscs	r0, r0, #1
					response_message_0->sender_id = node_db->id;
     2f8:	24000002 	strcs	r0, [r0], #-2
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	01000002 	tsteq	r0, r2
					DEBUG_PRINT("\r\nSending to sender");
     300:	00005000 	andeq	r5, r0, r0
					call sender(response_message_0, done_case);
     304:	00000000 	andeq	r0, r0, r0
     308:	020e0000 	andeq	r0, lr, #0
     30c:	02100000 	andseq	r0, r0, #0
     310:	00010000 	andeq	r0, r1, r0
     314:	00021853 	andeq	r1, r2, r3, asr r8
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	00022000 	andeq	r2, r2, r0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	53000100 	movwpl	r0, #256	; 0x100
	...
     328:	000001e4 	andeq	r0, r0, r4, ror #3
     32c:	000001fe 	strdeq	r0, [r0], -lr
     330:	00500001 	subseq	r0, r0, r1
     334:	00000000 	andeq	r0, r0, r0
     338:	e4000000 	str	r0, [r0], #-0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
					node_db->index+=1;
     340:	01000001 	tsteq	r0, r1
     344:	00005100 	andeq	r5, r0, r0, lsl #2
		tcv_endp(incoming_packet);
     348:	00000000 	andeq	r0, r0, r0
     34c:	01ce0000 	biceq	r0, lr, r0
		proceed receiving;
     350:	01d80000 	bicseq	r0, r8, r0
		ser_out(response_1_create, "\r\nData Saved");
     354:	00010000 	andeq	r0, r1, r0
     358:	00000050 	andeq	r0, r0, r0, asr r0
		proceed receiving;
     35c:	00000000 	andeq	r0, r0, r0
     360:	00018400 	andeq	r8, r1, r0, lsl #8
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	00018e00 	andeq	r8, r1, r0, lsl #28
     368:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     37c:	00500001 	subseq	r0, r0, r1
     380:	00000000 	andeq	r0, r0, r0
		proceed receiving;
     384:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	ab000001 	blge	394 <receiver+0x11c>
     38c:	01000001 	tsteq	r0, r1
     390:	00005000 	andeq	r5, r0, r0
	...
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3a0:	00010000 	andeq	r0, r1, r0
     3a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c8:	00500001 	subseq	r0, r0, r1
	...
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	01000000 	mrseq	r0, (UNDEF: 0)
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	00005100 	andeq	r5, r0, r0, lsl #2
	...
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3ec:	00010000 	andeq	r0, r1, r0
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	00000052 	andeq	r0, r0, r2, asr r0
	...
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	50000100 	andpl	r0, r0, r0, lsl #2
	...
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	00001400 	andeq	r1, r0, r0, lsl #8
     410:	00001400 	andeq	r1, r0, r0, lsl #8
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	00500001 	subseq	r0, r0, r1
     418:	00000000 	andeq	r0, r0, r0
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	8c000000 	stchi	0, cr0, [r0], {-0}
     420:	92000012 	andls	r0, r0, #18
     424:	01000012 	tsteq	r0, r2, lsl r0
     428:	12c25600 	sbcne	r5, r2, #0, 12
     42c:	12c60000 	sbcne	r0, r6, #0
     430:	00010000 	andeq	r0, r1, r0
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	00000056 	andeq	r0, r0, r6, asr r0
					call sender(response_message_2, done_case);
     438:	00000000 	andeq	r0, r0, r0
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	00117600 	andseq	r7, r1, r0, lsl #12
     440:	00117a00 	andseq	r7, r1, r0, lsl #20
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	52000100 	andpl	r0, r0, #0, 2
     448:	00001190 	muleq	r0, r0, r1
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	000011a4 	andeq	r1, r0, r4, lsr #3
				DEBUG_PRINT("\r\nDelete rec");
     450:	00520001 	subseq	r0, r2, r1
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	00000000 	andeq	r0, r0, r0
     458:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
     45c:	84000011 	strhi	r0, [r0], #-17	; 0xffffffef
     460:	01000011 	tsteq	r0, r1, lsl r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	00005300 	andeq	r5, r0, r0, lsl #6
     468:	00000000 	andeq	r0, r0, r0
     46c:	11340000 	teqne	r4, r0
     470:	113e0000 	teqne	lr, r0
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	00010000 	andeq	r0, r1, r0
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	00000053 	andeq	r0, r0, r3, asr r0
     47c:	00000000 	andeq	r0, r0, r0
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	00113400 	andseq	r3, r1, r0, lsl #8
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	00113a00 	andseq	r3, r1, r0, lsl #20
     488:	53000100 	movwpl	r0, #256	; 0x100
	...
						status = (uint8_t) SUCCESS;
     494:	000011ca 	andeq	r1, r0, sl, asr #3
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	000011d4 	ldrdeq	r1, [r0], -r4
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	00530001 	subseq	r0, r3, r1
     4a0:	00000000 	andeq	r0, r0, r0
     4a4:	bc000000 	stclt	0, cr0, [r0], {-0}
     4a8:	e6000011 			; <UNDEFINED> instruction: 0xe6000011
     4ac:	01000011 	tsteq	r0, r1, lsl r0
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	00005200 	andeq	r5, r0, r0, lsl #4
     4b4:	00000000 	andeq	r0, r0, r0
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	120a0000 	andne	r0, sl, #0
     4bc:	12140000 	andsne	r0, r4, #0
     4c0:	00010000 	andeq	r0, r1, r0
     4c4:	00000053 	andeq	r0, r0, r3, asr r0
     4c8:	00000000 	andeq	r0, r0, r0
     4cc:	0011fc00 	andseq	pc, r1, r0, lsl #24
     4d0:	00123200 	andseq	r3, r2, r0, lsl #4
     4d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     4e0:	000010a2 	andeq	r1, r0, r2, lsr #1
     4e4:	000010ac 	andeq	r1, r0, ip, lsr #1
     4e8:	00530001 	subseq	r0, r3, r1
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	94000000 	strls	r0, [r0], #-0
     4f4:	be000010 	mcrlt	0, 0, r0, cr0, cr0, {0}
     4f8:	01000010 	tsteq	r0, r0, lsl r0
     4fc:	00005200 	andeq	r5, r0, r0, lsl #4
     500:	00000000 	andeq	r0, r0, r0
     504:	10f40000 	rscsne	r0, r4, r0
     508:	10fe0000 	rscsne	r0, lr, r0
     50c:	00010000 	andeq	r0, r1, r0
     510:	00000053 	andeq	r0, r0, r3, asr r0
     514:	00000000 	andeq	r0, r0, r0
     518:	0010e600 	andseq	lr, r0, r0, lsl #12
     51c:	00110e00 	andseq	r0, r1, r0, lsl #28
     520:	52000100 	andpl	r0, r0, #0, 2
	...
     52c:	00000bc8 	andeq	r0, r0, r8, asr #23
     530:	00000bcc 	andeq	r0, r0, ip, asr #23
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     538:	cf00000b 	svcgt	0x0000000b
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	0100000b 	tsteq	r0, fp
				DEBUG_PRINT("\r\nretrieve rec");
     540:	00005100 	andeq	r5, r0, r0, lsl #2
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00000000 	andeq	r0, r0, r0
     548:	0f540000 	svceq	0x00540000
     54c:	0f560000 	svceq	0x00560000
     550:	00010000 	andeq	r0, r1, r0
     554:	00000050 	andeq	r0, r0, r0, asr r0
     558:	00000000 	andeq	r0, r0, r0
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	000f5400 	andeq	r5, pc, r0, lsl #8
     560:	000f6a00 	andeq	r6, pc, r0, lsl #20
     564:	51000100 	mrspl	r0, (UNDEF: 16)
    return node->data_base.item_array[index];
     568:	00000f6a 	andeq	r0, r0, sl, ror #30
     56c:	00000f6e 	andeq	r0, r0, lr, ror #30
     570:	74550001 	ldrbvc	r0, [r5], #-1
     574:	8a00000f 	bhi	5b8 <receiver+0x340>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	0100000f 	tsteq	r0, pc
    return node->data_base.item_array[index];
     57c:	0f8a5500 	svceq	0x008a5500
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	0f980000 	svceq	0x00980000
     584:	00010000 	andeq	r0, r1, r0
     588:	000f9851 	andeq	r9, pc, r1, asr r8	; <UNPREDICTABLE>
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	000fc600 	andeq	ip, pc, r0, lsl #12
     590:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     594:	00000fcc 	andeq	r0, r0, ip, asr #31
     598:	00000ff4 	strdeq	r0, [r0], -r4
     59c:	f4550001 			; <UNDEFINED> instruction: 0xf4550001
     5a0:	0200000f 	andeq	r0, r0, #15
     5a4:	01000010 	tsteq	r0, r0, lsl r0
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	10025100 	andne	r5, r2, r0, lsl #2
     5ac:	100c0000 	andne	r0, ip, r0
				DEBUG_PRINT("\r\nResponse");
     5b0:	00010000 	andeq	r0, r1, r0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	00100c55 	andseq	r0, r0, r5, asr ip
     5b8:	00101700 	andseq	r1, r0, r0, lsl #14
     5bc:	51000100 	mrspl	r0, (UNDEF: 16)
     5c0:	00001017 	andeq	r1, r0, r7, lsl r0
     5c4:	0000101a 	andeq	r1, r0, sl, lsl r0
     5c8:	1a550001 	bne	15405d4 <__ccfg+0x152062c>
				if(!response_flag){
     5cc:	20000010 	andcs	r0, r0, r0, lsl r0
					response_flag=1;
     5d0:	01000010 	tsteq	r0, r0, lsl r0
					trigger(&response_flag);
     5d4:	10205100 	eorne	r5, r0, r0, lsl #2
				switch(response_message_5->status){
     5d8:	10320000 	eorsne	r0, r2, r0
     5dc:	00010000 	andeq	r0, r1, r0
     5e0:	00103255 	andseq	r3, r0, r5, asr r2
     5e4:	00104400 	andseq	r4, r0, r0, lsl #8
     5e8:	51000100 	mrspl	r0, (UNDEF: 16)
						if (response_checker[0] == response_message_5->request_number){
     5ec:	00001044 	andeq	r1, r0, r4, asr #32
     5f0:	00001064 	andeq	r1, r0, r4, rrx
     5f4:	00550001 	subseq	r0, r5, r1
							switch(response_checker[1]){
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	54000000 	strpl	r0, [r0], #-0
     600:	6a00000f 	bvs	644 <receiver+0x3cc>
     604:	0100000f 	tsteq	r0, pc
									proceed response_1_create;
     608:	0f6a5200 	svceq	0x006a5200
						proceed response_2;
     60c:	0f700000 	svceq	0x00700000
									proceed response_1_delete;
     610:	00010000 	andeq	r0, r1, r0
									proceed response_1_retrieve;
     614:	000f7456 	andeq	r7, pc, r6, asr r4	; <UNPREDICTABLE>
						proceed response_2;
     618:	000f8400 	andeq	r8, pc, r0, lsl #8
						proceed response_3;
     61c:	56000100 	strpl	r0, [r0], -r0, lsl #2
						proceed response_4;
     620:	00000f8a 	andeq	r0, r0, sl, lsl #31
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     628:	98520001 	ldmdals	r2, {r0}^
				break;
     62c:	c800000f 	stmdagt	r0, {r0, r1, r2, r3}
}
     630:	0100000f 	tsteq	r0, pc
     634:	0fcc5600 	svceq	0x00cc5600
     638:	0ff40000 	svceq	0x00f40000
     63c:	00010000 	andeq	r0, r1, r0
     640:	000ff456 	andeq	pc, pc, r6, asr r4	; <UNPREDICTABLE>
     644:	00100200 	andseq	r0, r0, r0, lsl #4
fsm root {
     648:	52000100 	andpl	r0, r0, #0, 2
     64c:	00001002 	andeq	r1, r0, r2
     650:	0000100c 	andeq	r1, r0, ip
     654:	0c560001 	mrrceq	0, 0, r0, r6, cr1
     658:	17000010 	smladne	r0, r0, r0, r0
     65c:	01000010 	tsteq	r0, r0, lsl r0
     660:	101a5200 	andsne	r5, sl, r0, lsl #4
     664:	10250000 	eorne	r0, r5, r0
     668:	00010000 	andeq	r0, r1, r0
     66c:	00102552 	andseq	r2, r0, r2, asr r5
     670:	00103200 	andseq	r3, r0, r0, lsl #4
     674:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     678:	00001032 	andeq	r1, r0, r2, lsr r0
     67c:	00001064 	andeq	r1, r0, r4, rrx
     680:	00520001 	subseq	r0, r2, r1
     684:	00000000 	andeq	r0, r0, r0
     688:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     68c:	d600000e 	strle	r0, [r0], -lr
     690:	0100000e 	tsteq	r0, lr
     694:	00005000 	andeq	r5, r0, r0
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	00000000 	andeq	r0, r0, r0
     69c:	0ec80000 	cdpeq	0, 12, cr0, cr8, cr0, {0}
     6a0:	0ed70000 	cdpeq	0, 13, cr0, cr7, cr0, {0}
		init_node(node_db);
     6a4:	00010000 	andeq	r0, r1, r0
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	00000051 	andeq	r0, r0, r1, asr r0
     6ac:	00000000 	andeq	r0, r0, r0
		tcv_plug (0, &plug_null);
     6b0:	000e7800 	andeq	r7, lr, r0, lsl #16
     6b4:	000e8f00 	andeq	r8, lr, r0, lsl #30
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	50000100 	andpl	r0, r0, r0, lsl #2
     6bc:	00000eb2 			; <UNDEFINED> instruction: 0x00000eb2
     6c0:	00000ec8 	andeq	r0, r0, r8, asr #29
     6c4:	00500001 	subseq	r0, r0, r1
     6c8:	00000000 	andeq	r0, r0, r0
			diag("Cannot open tcv interface");
     6cc:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     6d0:	7e00000d 	cdpvc	0, 0, cr0, cr0, cr13, {0}
			halt();
     6d4:	0100000d 	tsteq	r0, sp
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	0d7e5200 	lfmeq	f5, 2, [lr, #-0]
     6dc:	0d860000 	stceq	0, cr0, [r6]
		runfsm receiver(node_db);
     6e0:	00050000 	andeq	r0, r5, r0
     6e4:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	000e2040 	andeq	r2, lr, r0, asr #32
     6ec:	000e2400 	andeq	r2, lr, r0, lsl #8
     6f0:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     6f4:	40092004 	andmi	r2, r9, r4
     6f8:	00000e24 	andeq	r0, r0, r4, lsr #28
     6fc:	00000e26 	andeq	r0, r0, r6, lsr #28
		ser_inf(get_choice, "%c", &CHOICE);
     700:	26520001 	ldrbcs	r0, [r2], -r1
     704:	2800000e 	stmdacs	r0, {r1, r2, r3}
     708:	0500000e 	streq	r0, [r0, #-14]
		switch(CHOICE) {
     70c:	20040c00 	andcs	r0, r4, r0, lsl #24
     710:	00004009 	andeq	r4, r0, r9
     714:	00000000 	andeq	r0, r0, r0
     718:	0d880000 	stceq	0, cr0, [r8]
     71c:	0d920000 	ldceq	0, cr0, [r2]
     720:	00010000 	andeq	r0, r1, r0
     724:	000d9652 	andeq	r9, sp, r2, asr r6
     728:	000da000 	andeq	sl, sp, r0
     72c:	52000100 	andpl	r0, r0, #0, 2
     730:	00000da4 	andeq	r0, r0, r4, lsr #27
     734:	00000dae 	andeq	r0, r0, lr, lsr #27
     738:	b2520001 	subslt	r0, r2, #1
				proceed menu;
     73c:	be00000d 	cdplt	0, 0, cr0, cr0, cr13, {0}
     740:	0100000d 	tsteq	r0, sp
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	0e4a5200 	cdpeq	2, 4, cr5, cr10, cr0, {0}
     748:	0e4e0000 	cdpeq	0, 4, cr0, cr14, cr0, {0}
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	00010000 	andeq	r0, r1, r0
     750:	00000052 	andeq	r0, r0, r2, asr r0
     754:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("setting node group ID");
     758:	000d0e00 	andeq	r0, sp, r0, lsl #28
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75c:	000d2000 	andeq	r2, sp, r0
    node->gid = gid; 
     760:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76c:	00000ca8 	andeq	r0, r0, r8, lsr #25
     770:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     774:	00500001 	subseq	r0, r0, r1
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	00000000 	andeq	r0, r0, r0
     77c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     780:	ae00000c 	cdpge	0, 0, cr0, cr0, cr12, {0}
     784:	0100000c 	tsteq	r0, ip
		if((node_db->id < 1) || (node_db->id > 25)){
     788:	0cae5100 	stfeqs	f5, [lr]
     78c:	0cb30000 	ldceq	0, cr0, [r3]
     790:	00010000 	andeq	r0, r1, r0
			strncpy(reason, "Out of Range", 50);
     794:	00000052 	andeq	r0, r0, r2, asr r0
	...
				strncpy(reason, "ID is already in use", 50);
     7a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7b8:	00510001 	subseq	r0, r1, r1
     7bc:	00000000 	andeq	r0, r0, r0
     7c0:	01000000 	mrseq	r0, (UNDEF: 0)
     7c4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		if (!clear_node_neighbour_array(node_db)){
     7d4:	00010000 	andeq	r0, r1, r0
			strncpy(reason, "Error Clearing Node Array", 50);
     7d8:	00000052 	andeq	r0, r0, r2, asr r0
     7dc:	00000000 	andeq	r0, r0, r0
     7e0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7ec:	00000c68 	andeq	r0, r0, r8, ror #24
		request_packet->gid = node_db->gid;
     7f0:	00000c73 	andeq	r0, r0, r3, ror ip
     7f4:	73500001 	cmpvc	r0, #1
		request_packet->tpe = DISCOVERY_REQUEST;
     7f8:	9c00000c 	stcls	0, cr0, [r0], {12}
		request_packet->request_number = generate_request_num();
     7fc:	0100000c 	tsteq	r0, ip
     800:	00005400 	andeq	r5, r0, r0, lsl #8
		call sender(request_packet, wait_discovery);
     804:	00000000 	andeq	r0, r0, r0
     808:	0c2c0000 	stceq	0, cr0, [ip], #-0
		request_packet->receiver_id=0;
     80c:	0c440000 	mareq	acc0, r0, r4
		call sender(request_packet, wait_discovery);
     810:	00010000 	andeq	r0, r1, r0
     814:	000c4450 	andeq	r4, ip, r0, asr r4
     818:	000c5c00 	andeq	r5, ip, r0, lsl #24
			release;
     81c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				proceed create_proto_start;
     828:	00000c00 	andeq	r0, r0, r0, lsl #24
				proceed start_delete_proto;
     82c:	00000c06 	andeq	r0, r0, r6, lsl #24
				proceed retrieve_proto;
     830:	00500001 	subseq	r0, r0, r1
	...
			if(node_db->id == node_db->nnodes[i]){
     840:	01000000 	mrseq	r0, (UNDEF: 0)
     844:	00005000 	andeq	r5, r0, r0
				strncpy(reason, "ID is already in use", 50);
     848:	00000000 	andeq	r0, r0, r0
     84c:	1ce40000 	stclne	0, cr0, [r4]
				proceed invalid_node_id;
     850:	1d020000 	stcne	0, cr0, [r2, #-0]
     854:	00020000 	andeq	r0, r2, r0
		for(int i = 0; i < node_db->index; i++){
     858:	1d027091 	stcne	0, cr7, [r2, #-580]	; 0xfffffdbc
		if (discovery_wait_flag == 0){
     85c:	1d2a0000 	stcne	0, cr0, [sl, #-0]
			discovery_wait_flag=1;
     860:	00010000 	andeq	r0, r1, r0
     864:	001d2e54 	andseq	r2, sp, r4, asr lr
			delay(3000, find_proto_start);
     868:	001d3600 	andseq	r3, sp, r0, lsl #12
     86c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		if (discovery_wait_flag == 1){
     870:	00001d44 	andeq	r1, r0, r4, asr #26
			discovery_wait_flag=0;
     874:	00001d8e 	andeq	r1, r0, lr, lsl #27
     878:	92560001 	subsls	r0, r6, #1
			delay(3000, display_neighbour_nodes);
     87c:	0a00001d 	beq	8f8 <root+0x2b0>
     880:	0100001e 	tsteq	r0, lr, lsl r0
     884:	00005600 	andeq	r5, r0, r0, lsl #12
     888:	00000000 	andeq	r0, r0, r0
     88c:	1d4e0000 	stclne	0, cr0, [lr, #-0]
     890:	1d8c0000 	stcne	0, cr0, [ip]
     894:	00010000 	andeq	r0, r1, r0
     898:	001d9251 	andseq	r9, sp, r1, asr r2
     89c:	001da400 	andseq	sl, sp, r0, lsl #8
     8a0:	51000100 	mrspl	r0, (UNDEF: 16)
     8a4:	00001db0 			; <UNDEFINED> instruction: 0x00001db0
     8a8:	00001dba 			; <UNDEFINED> instruction: 0x00001dba
     8ac:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
     8b0:	d000001d 	andle	r0, r0, sp, lsl r0
     8b4:	0100001d 	tsteq	r0, sp, lsl r0
     8b8:	1df05100 	ldfnee	f5, [r0]
     8bc:	1df40000 	ldclne	0, cr0, [r4]
     8c0:	00010000 	andeq	r0, r1, r0
     8c4:	00000051 	andeq	r0, r0, r1, asr r0
		if(node_db->index == 0){
     8c8:	00000000 	andeq	r0, r0, r0
     8cc:	001d4e00 	andseq	r4, sp, r0, lsl #28
     8d0:	001d8c00 	andseq	r8, sp, r0, lsl #24
			proceed menu;
     8d4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8d8:	00001d92 	muleq	r0, r2, sp
     8dc:	00001dba 			; <UNDEFINED> instruction: 0x00001dba
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8e0:	cc550001 	mrrcgt	0, 0, r0, r5, cr1
			if (node_db->nnodes[i] == 0) break;
     8e4:	d000001d 	andle	r0, r0, sp, lsl r0
     8e8:	0100001d 	tsteq	r0, sp, lsl r0
     8ec:	1df05500 	cfldr64ne	mvdx5, [r0]
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8f0:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
     8f4:	00010000 	andeq	r0, r1, r0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f8:	00000055 	andeq	r0, r0, r5, asr r0
		proceed menu;
     8fc:	00000000 	andeq	r0, r0, r0
     900:	001dc000 	andseq	ip, sp, r0
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     904:	001dcc00 	andseq	ip, sp, r0, lsl #24
     908:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
     90c:	00001dd0 	ldrdeq	r1, [r0], -r0
     910:	00001dea 	andeq	r1, r0, sl, ror #27
     914:	ee550001 	cdp	0, 5, cr0, cr5, cr1, {0}
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     918:	f000001d 			; <UNDEFINED> instruction: 0xf000001d
     91c:	0100001d 	tsteq	r0, sp, lsl r0
			strncpy(reason, "Error: improper ID", 50);
     920:	00005500 	andeq	r5, r0, r0, lsl #10
     924:	00000000 	andeq	r0, r0, r0
			proceed error;
     928:	1d740000 	ldclne	0, cr0, [r4, #-0]
     92c:	1d8c0000 	stcne	0, cr0, [ip]
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     930:	00010000 	andeq	r0, r1, r0
     934:	00000054 	andeq	r0, r0, r4, asr r0
		ser_in(get_record_to_create, user_provided_record, 20);
     938:	00000000 	andeq	r0, r0, r0
     93c:	001dba00 	andseq	fp, sp, r0, lsl #20
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     940:	001dcc00 	andseq	ip, sp, r0, lsl #24
     944:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     948:	00001dd0 	ldrdeq	r1, [r0], -r0
		create_message->gid = node_db->gid;
     94c:	00001de4 	andeq	r1, r0, r4, ror #27
		create_message->tpe = CREATE_RECORD;
     950:	e4540001 	ldrb	r0, [r4], #-1
		create_message->request_number = generate_request_num();
     954:	f000001d 			; <UNDEFINED> instruction: 0xf000001d
     958:	0100001d 	tsteq	r0, sp, lsl r0
		strncpy(create_message->record, user_provided_record, 20);
     95c:	00005300 	andeq	r5, r0, r0, lsl #6
     960:	00000000 	andeq	r0, r0, r0
		create_message->receiver_id = user_provided_receiver_id;
     964:	1dfc0000 	ldclne	0, cr0, [ip]
		strncpy(create_message->record, user_provided_record, 20);
     968:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
		create_message->receiver_id = user_provided_receiver_id;
     96c:	00010000 	andeq	r0, r1, r0
		strncpy(create_message->record, user_provided_record, 20);
     970:	00000051 	andeq	r0, r0, r1, asr r0
		response_checker[0] = create_message->request_number;
     974:	00000000 	andeq	r0, r0, r0
     978:	0017c800 	andseq	ip, r7, r0, lsl #16
		call sender(create_message, wait);
     97c:	0017d400 	andseq	sp, r7, r0, lsl #8
     980:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     994:	00500001 	subseq	r0, r0, r1
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
     998:	00000000 	andeq	r0, r0, r0
     99c:	01000000 	mrseq	r0, (UNDEF: 0)
     9a0:	00005000 	andeq	r5, r0, r0
	...
			strncpy(reason, "Error: improper node ID", 50);
     9b0:	00010000 	andeq	r0, r1, r0
     9b4:	00000051 	andeq	r0, r0, r1, asr r0
			proceed error;
     9b8:	00000000 	andeq	r0, r0, r0
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (user_provided_index < 0 || user_provided_index > 40){
     9d0:	00520001 	subseq	r0, r2, r1
     9d4:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error: invalid index", 50);
     9d8:	01000000 	mrseq	r0, (UNDEF: 0)
     9dc:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		delete_record->gid = node_db->gid;
     9ec:	00010000 	andeq	r0, r1, r0
     9f0:	00000053 	andeq	r0, r0, r3, asr r0
     9f4:	00000000 	andeq	r0, r0, r0
		delete_record->tpe = DELETE_RECORD;
     9f8:	53000100 	movwpl	r0, #256	; 0x100
	...
		delete_record->sender_id = node_db->id;
     a04:	00530001 	subseq	r0, r3, r1
	...
		response_checker[0] = delete_record->request_number;
     a14:	01000000 	mrseq	r0, (UNDEF: 0)
		response_checker[1] = delete_record->tpe;
     a18:	00005000 	andeq	r5, r0, r0
     a1c:	00000000 	andeq	r0, r0, r0
		call sender(delete_record, wait);
     a20:	1ccc0000 	stclne	0, cr0, [ip], {0}
     a24:	1cd40000 	ldclne	0, cr0, [r4], {0}
     a28:	00010000 	andeq	r0, r1, r0
     a2c:	00000050 	andeq	r0, r0, r0, asr r0
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a30:	00000000 	andeq	r0, r0, r0
     a34:	001bf000 	andseq	pc, fp, r0
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
     a38:	001bf600 	andseq	pc, fp, r0, lsl #12
     a3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     a48:	00001c06 	andeq	r1, r0, r6, lsl #24
			strncpy(reason, "Error: improper node ID", 50);
     a4c:	00001c32 	andeq	r1, r0, r2, lsr ip
     a50:	32540001 	subscc	r0, r4, #1
			proceed error;
     a54:	3800001c 	stmdacc	r0, {r2, r3, r4}
     a58:	0100001c 	tsteq	r0, ip, lsl r0
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a5c:	1c385200 	lfmne	f5, 4, [r8], #-0
     a60:	1c800000 	stcne	0, cr0, [r0], {0}
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
     a64:	00010000 	andeq	r0, r1, r0
     a68:	001c8054 	andseq	r8, ip, r4, asr r0
     a6c:	001c9800 	andseq	r9, ip, r0, lsl #16
		if (user_provided_index < 0 || user_provided_index > 40){
     a70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			strncpy(reason, "Error: invalid index", 50);
     a7c:	00001c32 	andeq	r1, r0, r2, lsr ip
			proceed error;
     a80:	00001c36 	andeq	r1, r0, r6, lsr ip
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a84:	36540001 	ldrbcc	r0, [r4], -r1
     a88:	3800001c 	stmdacc	r0, {r2, r3, r4}
		retrieve_record->gid = node_db->gid;
     a8c:	0100001c 	tsteq	r0, ip, lsl r0
     a90:	1c4e5300 	mcrrne	3, 0, r5, lr, cr0
     a94:	1c570000 	mrane	r0, r7, acc0
		retrieve_record->tpe = RETRIEVE_RECORD;
     a98:	00010000 	andeq	r0, r1, r0
		retrieve_record->request_number = generate_request_num();
     a9c:	00000050 	andeq	r0, r0, r0, asr r0
     aa0:	00000000 	andeq	r0, r0, r0
		retrieve_record->sender_id = node_db->id;
     aa4:	001c4000 	andseq	r4, ip, r0
		response_checker[0] = retrieve_record->request_number;
     aa8:	001c5000 	andseq	r5, ip, r0
		retrieve_record->receiver_id = user_provided_receiver_id;
     aac:	53000100 	movwpl	r0, #256	; 0x100
	...
		retrieve_record->record_index = user_provided_index;
     ab8:	00001c06 	andeq	r1, r0, r6, lsl #24
		response_checker[0] = retrieve_record->request_number;
     abc:	00001c24 	andeq	r1, r0, r4, lsr #24
		call sender(&retrieve_record, wait);
     ac0:	2a500001 	bcs	1400acc <__ccfg+0x13e0b24>
     ac4:	4a00001c 	bmi	b3c <root+0x4f4>
     ac8:	0100001c 	tsteq	r0, ip, lsl r0
     acc:	1c4a5000 	marne	acc0, r5, sl
     ad0:	1c540000 	mrane	r0, r4, acc0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad4:	00020000 	andeq	r0, r2, r0
     ad8:	00007c74 	andeq	r7, r0, r4, ror ip
		if(node_db->data_base.item_count != 0){
     adc:	00000000 	andeq	r0, r0, r0
     ae0:	17480000 	strbne	r0, [r8, -r0]
     ae4:	17760000 	ldrbne	r0, [r6, -r0]!
		ser_out(loop_through_data, "\r\n");
     ae8:	00010000 	andeq	r0, r1, r0
     aec:	00178450 	andseq	r8, r7, r0, asr r4
		proceed menu;
     af0:	0017c800 	andseq	ip, r7, r0, lsl #16
		delete_all(node_db);
     af4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		proceed menu;
     b00:	00001750 	andeq	r1, r0, r0, asr r7
		delay(3000, timeout);
     b04:	0000175c 	andeq	r1, r0, ip, asr r7
     b08:	5c530001 	mrrcpl	0, 0, r0, r3, cr1
		when(&response_flag, menu);
     b0c:	5e000017 	mcrpl	0, 0, r0, cr0, cr7, {0}
     b10:	02000017 	andeq	r0, r0, #23
		release;
     b14:	62007000 	andvs	r7, r0, #0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b18:	ba000017 	blt	b7c <root+0x534>
     b1c:	01000017 	tsteq	r0, r7, lsl r0
     b20:	17ba5300 	ldrne	r5, [sl, r0, lsl #6]!
     b24:	17be0000 	ldrne	r0, [lr, r0]!
     b28:	00020000 	andeq	r0, r2, r0
     b2c:	17be0073 			; <UNDEFINED> instruction: 0x17be0073
     b30:	17c80000 	strbne	r0, [r8, r0]
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b34:	00010000 	andeq	r0, r1, r0
     b38:	00000053 	andeq	r0, r0, r3, asr r0
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	00175000 	andseq	r5, r7, r0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b44:	00175200 	andseq	r5, r7, r0, lsl #4
		ser_out(timeout, "\r\nFailed to reach the destination");
     b48:	52000100 	andpl	r0, r0, #0, 2
     b4c:	00001762 	andeq	r1, r0, r2, ror #14
		proceed menu;
     b50:	000017a2 	andeq	r1, r0, r2, lsr #15
     b54:	ba520001 	blt	1480b60 <__ccfg+0x1460bb8>
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b58:	be000017 	mcrlt	0, 0, r0, cr0, cr7, {0}
     b5c:	01000017 	tsteq	r0, r7, lsl r0
		proceed menu;
     b60:	17be5300 	ldrne	r5, [lr, r0, lsl #6]!
     b64:	17c80000 	strbne	r0, [r8, r0]
}
     b68:	00010000 	andeq	r0, r1, r0
     b6c:	00000052 	andeq	r0, r0, r2, asr r0
     b70:	00000000 	andeq	r0, r0, r0
     b74:	001b1800 	andseq	r1, fp, r0, lsl #16
     b78:	001b2000 	andseq	r2, fp, r0
     b7c:	51000100 	mrspl	r0, (UNDEF: 16)
     b80:	00001b24 	andeq	r1, r0, r4, lsr #22
     b84:	00001b26 	andeq	r1, r0, r6, lsr #22
     b88:	00510001 	subseq	r0, r1, r1
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	6c000000 	stcvs	0, cr0, [r0], {-0}
     b94:	8800001a 	stmdahi	r0, {r1, r3, r4}
     b98:	0100001a 	tsteq	r0, sl, lsl r0
     b9c:	1a8e5000 	bne	fe394ba4 <_estack+0xde38fba4>
     ba0:	1a9a0000 	bne	fe680ba8 <_estack+0xde67bba8>
     ba4:	00010000 	andeq	r0, r1, r0
     ba8:	00000050 	andeq	r0, r0, r0, asr r0
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	001a6c00 	andseq	r6, sl, r0, lsl #24
     bb4:	001a8a00 	andseq	r8, sl, r0, lsl #20
     bb8:	51000100 	mrspl	r0, (UNDEF: 16)
     bbc:	00001a8e 	andeq	r1, r0, lr, lsl #21
     bc0:	00001a98 	muleq	r0, r8, sl
     bc4:	00510001 	subseq	r0, r1, r1
static void devinit_uart (int devnum) {
     bc8:	00000000 	andeq	r0, r0, r0
	adddevfunc (ioreq_uart_a, devnum);
     bcc:	6c000000 	stcvs	0, cr0, [r0], {-0}
     bd0:	8d00001a 	stchi	0, cr0, [r0, #-104]	; 0xffffff98
void udelay (volatile word n) {
     bd4:	0100001a 	tsteq	r0, sl, lsl r0
     bd8:	1a8e5200 	bne	fe3953e0 <_estack+0xde3903e0>
	while (n) {
     bdc:	1a960000 	bne	fe580be4 <_estack+0xde57bbe4>
     be0:	00010000 	andeq	r0, r1, r0
}
     be4:	00000052 	andeq	r0, r0, r2, asr r0
	while (n--);
     be8:	00000000 	andeq	r0, r0, r0
     bec:	001a6c00 	andseq	r6, sl, r0, lsl #24
     bf0:	001a8400 	andseq	r8, sl, r0, lsl #8
		n--;
     bf4:	53000100 	movwpl	r0, #256	; 0x100
     bf8:	00001a84 	andeq	r1, r0, r4, lsl #21
     bfc:	00001b08 	andeq	r1, r0, r8, lsl #22
void mdelay (volatile word n) {
     c00:	00550001 	subseq	r0, r5, r1
     c04:	00000000 	andeq	r0, r0, r0
	while (n) {
     c08:	6c000000 	stcvs	0, cr0, [r0], {-0}
     c0c:	ec00001a 	stc	0, cr0, [r0], {26}
}
     c10:	0200001a 	andeq	r0, r0, #26
		udelay (999);
     c14:	ec009100 	stfd	f1, [r0], {-0}
     c18:	0800001a 	stmdaeq	r0, {r1, r3, r4}
		n--;
     c1c:	0200001b 	andeq	r0, r0, #27
     c20:	00009100 	andeq	r9, r0, r0, lsl #2
     c24:	00000000 	andeq	r0, r0, r0
     c28:	9c000000 	stcls	0, cr0, [r0], {-0}
void __pi_ondomain (lword d) {
     c2c:	b200001a 	andlt	r0, r0, #26
     c30:	0100001a 	tsteq	r0, sl, lsl r0
		if (__pi_systat.effpdm > 1)
     c34:	1aba5000 	bne	fee94c3c <_estack+0xdee8fc3c>
     c38:	1acc0000 	bne	ff300c40 <_estack+0xdf2fbc40>
			__pi_systat.effpdm = 1;
     c3c:	00010000 	andeq	r0, r1, r0
	PRCMPowerDomainOn (d);
     c40:	001adc50 	andseq	sp, sl, r0, asr ip
     c44:	001ae400 	andseq	lr, sl, r0, lsl #8
     c48:	50000100 	andpl	r0, r0, r0, lsl #2
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c4c:	00001aec 	andeq	r1, r0, ip, ror #21
     c50:	00001af4 	strdeq	r1, [r0], -r4
     c54:	00500001 	subseq	r0, r0, r1
	__pi_systat.ondmns |= d;
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
}
     c60:	4e00001a 	mcrmi	0, 0, r0, cr0, cr10, {0}
     c64:	0100001a 	tsteq	r0, sl, lsl r0
void __pi_offdomain (lword d) {
     c68:	1a545000 	bne	1514c70 <__ccfg+0x14f4cc8>
     c6c:	1a5c0000 	bne	1700c74 <__ccfg+0x16e0ccc>
	PRCMPowerDomainOff (d);
     c70:	00010000 	andeq	r0, r1, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     c74:	001a6050 	andseq	r6, sl, r0, asr r0
     c78:	001a6c00 	andseq	r6, sl, r0, lsl #24
     c7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     c88:	00001a48 	andeq	r1, r0, r8, asr #20
     c8c:	00001a50 	andeq	r1, r0, r0, asr sl
			__pi_systat.effpdm = __pi_systat.reqpdm;
     c90:	54510001 	ldrbpl	r0, [r1], #-1
     c94:	5e00001a 	mcrpl	0, 0, r0, cr0, cr10, {0}
	__pi_systat.ondmns &= ~d;
     c98:	0100001a 	tsteq	r0, sl, lsl r0
     c9c:	1a605100 	bne	18150a4 <__ccfg+0x17f50fc>
}
     ca0:	1a6c0000 	bne	1b00ca8 <__ccfg+0x1ae0d00>
     ca4:	00010000 	andeq	r0, r1, r0
void __pi_syserror (word ec, const char *m) {
     ca8:	00000051 	andeq	r0, r0, r1, asr r0
	diag ("SYSERR: %x, %s", ec, m);
     cac:	00000000 	andeq	r0, r0, r0
     cb0:	001a3a00 	andseq	r3, sl, r0, lsl #20
  __ASM volatile ("cpsid i" : : : "memory");
     cb4:	001a4200 	andseq	r4, sl, r0, lsl #4
     cb8:	50000100 	andpl	r0, r0, r0, lsl #2
     cbc:	00001a46 	andeq	r1, r0, r6, asr #20
     cc0:	00001a48 	andeq	r1, r0, r8, asr #20
		all_leds_blink;
     cc4:	00500001 	subseq	r0, r0, r1
     cc8:	00000000 	andeq	r0, r0, r0
     ccc:	3a000000 	bcc	cd4 <__pi_syserror+0x2c>
     cd0:	3c00001a 	stccc	0, cr0, [r0], {26}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     cd4:	0100001a 	tsteq	r0, sl, lsl r0
     cd8:	00005200 	andeq	r5, r0, r0, lsl #4
     cdc:	00000000 	andeq	r0, r0, r0
     ce0:	1a260000 	bne	980ce8 <__ccfg+0x960d40>
     ce4:	1a280000 	bne	a00cec <__ccfg+0x9e0d44>
     ce8:	00010000 	andeq	r0, r1, r0
	while (1) {
     cec:	00000050 	andeq	r0, r0, r0, asr r0
     cf0:	00000000 	andeq	r0, r0, r0
     cf4:	001a2600 	andseq	r2, sl, r0, lsl #12
     cf8:	001a3000 	andseq	r3, sl, r0
void tci_run_delay_timer () {
     cfc:	51000100 	mrspl	r0, (UNDEF: 16)
	setdel = __pi_mintk - __pi_old;
     d00:	00001a34 	andeq	r1, r0, r4, lsr sl
     d04:	00001a3a 	andeq	r1, r0, sl, lsr sl
     d08:	00510001 	subseq	r0, r1, r1
     d0c:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d10:	26000000 	strcs	r0, [r0], -r0
     d14:	2a00001a 	bcs	d84 <AONRTCIntHandler+0x20>
     d18:	0100001a 	tsteq	r0, sl, lsl r0
     d1c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
}
     d2c:	00010000 	andeq	r0, r1, r0
     d30:	00000050 	andeq	r0, r0, r0, asr r0
	...
	cli_aux;
     d40:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	sti_aux;
     d54:	00500001 	subseq	r0, r0, r1
}
     d58:	00000000 	andeq	r0, r0, r0
     d5c:	01000000 	mrseq	r0, (UNDEF: 0)
     d60:	00005000 	andeq	r5, r0, r0
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     d70:	00010000 	andeq	r0, r1, r0
		if (__pi_utims [0] == 0)
     d74:	00000051 	andeq	r0, r0, r1, asr r0
     d78:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [0])) {
     d7c:	001a0a00 	andseq	r0, sl, r0, lsl #20
     d80:	001a2000 	andseq	r2, sl, r0
			(*(__pi_utims [0]))--;
     d84:	50000100 	andpl	r0, r0, r0, lsl #2
		if (__pi_utims [1] == 0)
     d88:	00001a24 	andeq	r1, r0, r4, lsr #20
		if (*(__pi_utims [1])) {
     d8c:	00001a26 	andeq	r1, r0, r6, lsr #20
			aux_timer_inactive = 0;
     d90:	00500001 	subseq	r0, r0, r1
			(*(__pi_utims [1]))--;
     d94:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [2] == 0)
     d98:	0a000000 	beq	da0 <AONRTCIntHandler+0x3c>
		if (*(__pi_utims [2])) {
     d9c:	0c00001a 	stceq	0, cr0, [r0], {26}
			(*(__pi_utims [2]))--;
     da0:	0100001a 	tsteq	r0, sl, lsl r0
		if (__pi_utims [3] != 0) {
     da4:	00005100 	andeq	r5, r0, r0, lsl #2
			if (*(__pi_utims [3])) {
     da8:	00000000 	andeq	r0, r0, r0
				aux_timer_inactive = 0;
     dac:	1a0a0000 	bne	280db4 <__ccfg+0x260e0c>
				(*(__pi_utims [3]))--;
     db0:	1a0e0000 	bne	380db8 <__ccfg+0x360e10>
	if (__pi_systat.ledsts) {
     db4:	00010000 	andeq	r0, r1, r0
     db8:	00000052 	andeq	r0, r0, r2, asr r0
		if (__pi_systat.ledblc++ == 0) {
     dbc:	00000000 	andeq	r0, r0, r0
     dc0:	0019fa00 	andseq	pc, r9, r0, lsl #20
			if (__pi_systat.ledblk) {
     dc4:	0019fc00 	andseq	pc, r9, r0, lsl #24
     dc8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd4:	000019fa 	strdeq	r1, [r0], -sl
				if (__pi_systat.ledsts & 0x2)
     dd8:	000019fc 	strdeq	r1, [r0], -ip
     ddc:	00510001 	subseq	r0, r1, r1
     de0:	0a00001a 	beq	e50 <AONRTCIntHandler+0xec>
				if (__pi_systat.ledsts & 0x4)
     de4:	0100001a 	tsteq	r0, sl, lsl r0
				__pi_systat.ledblk = 0;
     de8:	00005100 	andeq	r5, r0, r0, lsl #2
     dec:	00000000 	andeq	r0, r0, r0
			if (__pi_systat.fstblk)
     df0:	19ec0000 	stmibne	ip!, {}^	; <UNPREDICTABLE>
     df4:	19f00000 	ldmibne	r0!, {}^	; <UNPREDICTABLE>
				__pi_systat.ledblc = 200;
     df8:	00010000 	andeq	r0, r1, r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     dfc:	0019f050 	andseq	pc, r9, r0, asr r0	; <UNPREDICTABLE>
		cli_tim;
     e00:	0019fa00 	andseq	pc, r9, r0, lsl #20
		__pi_new += setdel;
     e04:	53000100 	movwpl	r0, #256	; 0x100
	...
		RISE_N_SHINE;
     e10:	000019f0 	strdeq	r1, [r0], -r0
		__pi_new += setdel;
     e14:	000019fa 	strdeq	r1, [r0], -sl
		RISE_N_SHINE;
     e18:	00500001 	subseq	r0, r0, r1
	...
				if (__pi_systat.ledsts & 0x1)
     e28:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e2c:	00005000 	andeq	r5, r0, r0
     e30:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
     e34:	00010000 	andeq	r0, r1, r0
     e38:	00000051 	andeq	r0, r0, r1, asr r0
	...
				__pi_systat.ledblk = 1;
     e48:	52000100 	andpl	r0, r0, #0, 2
	...
			cli_aux;
     e54:	00520001 	subseq	r0, r2, r1
	...
     e64:	01000000 	mrseq	r0, (UNDEF: 0)
     e68:	00005000 	andeq	r5, r0, r0
     e6c:	00000000 	andeq	r0, r0, r0
     e70:	19c80000 	stmibne	r8, {}^	; <UNPREDICTABLE>
     e74:	19d00000 	ldmibne	r0, {}^	; <UNPREDICTABLE>
word tci_update_delay_ticks (Boolean force) {
     e78:	00010000 	andeq	r0, r1, r0
	cli_tim;
     e7c:	0019d250 	andseq	sp, r9, r0, asr r2
     e80:	0019d600 	andseq	sp, r9, r0, lsl #12
	if (setdel) {
     e84:	50000100 	andpl	r0, r0, r0, lsl #2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e88:	000019d6 	ldrdeq	r1, [r0], -r6
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     e8c:	000019ec 	andeq	r1, r0, ip, ror #19
     e90:	00530001 	subseq	r0, r3, r1
	...
	return NO;
     ea0:	01000000 	mrseq	r0, (UNDEF: 0)
			setdel = 0;
     ea4:	00005000 	andeq	r5, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ea8:	00000000 	andeq	r0, r0, r0
     eac:	00010000 	andeq	r0, r1, r0
}
     eb0:	00000050 	andeq	r0, r0, r0, asr r0
	...
		return YES;
     ec0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	UARTDisable (UART0_BASE);
     ecc:	00500001 	subseq	r0, r0, r1
	...
	UARTConfigSetExpClk (UART0_BASE,
     edc:	01000000 	mrseq	r0, (UNDEF: 0)
     ee0:	00005000 	andeq	r5, r0, r0
     ee4:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     ee8:	00010000 	andeq	r0, r1, r0
     eec:	00000057 	andeq	r0, r0, r7, asr r0
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     efc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
}
     f10:	00500001 	subseq	r0, r0, r1
     f14:	00000000 	andeq	r0, r0, r0
     f18:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	00005000 	andeq	r5, r0, r0
     f20:	00000000 	andeq	r0, r0, r0
     f24:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f28:	00000058 	andeq	r0, r0, r8, asr r0
     f2c:	00000000 	andeq	r0, r0, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_uart_setrate (urates [0], __pi_uart);
     f44:	00540001 	subseq	r0, r4, r1
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	01000000 	mrseq	r0, (UNDEF: 0)
     f50:	00005400 	andeq	r5, r0, r0, lsl #8
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     f60:	00010000 	andeq	r0, r1, r0
     f64:	00000058 	andeq	r0, r0, r8, asr r0
     f68:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     f6c:	58000100 	stmdapl	r0, {r8}
	...
			while (len && uart_a_char_available) {
     f78:	00001ba0 	andeq	r1, r0, r0, lsr #23
     f7c:	00001ba8 	andeq	r1, r0, r8, lsr #23
			if (len != operation) {
     f80:	a8500001 	ldmdage	r0, {r0}^
}
     f84:	b200001b 	andlt	r0, r0, #27
     f88:	0100001b 	tsteq	r0, fp, lsl r0
			uart_a_disable_int;
     f8c:	1bb85000 	blne	fee14f94 <_estack+0xdee0ff94>
			if (uart_a_char_available) {
     f90:	1bc40000 	blne	ff100f98 <_estack+0xdf0fbf98>
				*buf++ = uart_a_read;
     f94:	00010000 	andeq	r0, r1, r0
			uart_a_disable_int;
     f98:	001bd850 	andseq	sp, fp, r0, asr r8
     f9c:	001be200 	andseq	lr, fp, r0, lsl #4
			if (uart_a_char_available) {
     fa0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				uart_a_enable_int;
     fac:	00001bae 	andeq	r1, r0, lr, lsr #23
				goto Redo_rx;
     fb0:	00001be0 	andeq	r1, r0, r0, ror #23
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fb4:	e0540001 	subs	r0, r4, r1
     fb8:	e200001b 	and	r0, r0, #27
			return -2;
     fbc:	0100001b 	tsteq	r0, fp, lsl r0
     fc0:	1be25200 	blne	ff8957c8 <_estack+0xdf8907c8>
				uart_a_write (*buf);
     fc4:	1be40000 	blne	ff900fcc <_estack+0xdf8fbfcc>
     fc8:	00010000 	andeq	r0, r1, r0
			while (len && uart_a_room_in_tx) {
     fcc:	00000054 	andeq	r0, r0, r4, asr r0
     fd0:	00000000 	andeq	r0, r0, r0
     fd4:	00171200 	andseq	r1, r7, r0, lsl #4
			if (len != operation) {
     fd8:	00174400 	andseq	r4, r7, r0, lsl #8
			uart_a_disable_int;
     fdc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			if (uart_a_room_in_tx) {
     fe8:	00001728 	andeq	r1, r0, r8, lsr #14
				uart_a_enable_int;
     fec:	00001732 	andeq	r1, r0, r2, lsr r7
     ff0:	00530001 	subseq	r0, r3, r1
	...
				uart_a_write (*buf);
    1000:	01000000 	mrseq	r0, (UNDEF: 0)
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1004:	00005000 	andeq	r5, r0, r0
    1008:	00000000 	andeq	r0, r0, r0
			uart_a_enable_int;
    100c:	00010000 	andeq	r0, r1, r0
    1010:	00000054 	andeq	r0, r0, r4, asr r0
	...
				if (__pi_uart_setrate (*((word*)buf),
    1020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				syserror (EREQPAR, "uar");
    102c:	00500001 	subseq	r0, r0, r1
			syserror (ENOOPER, "uai");
    1030:	00000000 	andeq	r0, r0, r0
			if (len == UART_CNTRL_GETRATE) {
    1034:	90000000 	andls	r0, r0, r0
				return 1;
    1038:	a9000019 	stmdbge	r0, {r0, r3, r4}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    103c:	01000019 	tsteq	r0, r9, lsl r0
			syserror (ENOOPER, "uai");
    1040:	00005000 	andeq	r5, r0, r0
    1044:	00000000 	andeq	r0, r0, r0
    1048:	19900000 	ldmibne	r0, {}	; <UNPREDICTABLE>
    104c:	19a60000 	stmibne	r6!, {}	; <UNPREDICTABLE>
    1050:	00010000 	andeq	r0, r1, r0
    1054:	00000051 	andeq	r0, r0, r1, asr r0
    1058:	00000000 	andeq	r0, r0, r0
    105c:	00196c00 	andseq	r6, r9, r0, lsl #24
    1060:	00198000 	andseq	r8, r9, r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1064:	50000100 	andpl	r0, r0, r0, lsl #2
void UART0IntHandler () {
    1068:	00001980 	andeq	r1, r0, r0, lsl #19
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    106c:	00001984 	andeq	r1, r0, r4, lsl #19
    1070:	88540001 	ldmdahi	r4, {r0}^
    1074:	90000019 	andls	r0, r0, r9, lsl r0
    1078:	01000019 	tsteq	r0, r9, lsl r0
    107c:	00005000 	andeq	r5, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    1080:	00000000 	andeq	r0, r0, r0
    1084:	196c0000 	stmdbne	ip!, {}^	; <UNPREDICTABLE>
		RISE_N_SHINE;
    1088:	19830000 	stmibne	r3, {}	; <UNPREDICTABLE>
    108c:	00010000 	andeq	r0, r1, r0
		i_trigger (devevent (UART_A, READ));
    1090:	00198851 	andseq	r8, r9, r1, asr r8
    1094:	00199000 	andseq	r9, r9, r0
    1098:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    10a4:	00001974 	andeq	r1, r0, r4, ror r9
    10a8:	00001983 	andeq	r1, r0, r3, lsl #19
    10ac:	88530001 	ldmdahi	r3, {r0}^
    10b0:	90000019 	andls	r0, r0, r9, lsl r0
    10b4:	01000019 	tsteq	r0, r9, lsl r0
    10b8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10c8:	00010000 	andeq	r0, r1, r0
		i_trigger (devevent (UART_A, WRITE));
    10cc:	00000050 	andeq	r0, r0, r0, asr r0
	...
		RISE_N_SHINE;
    10dc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		i_trigger (devevent (UART_A, WRITE));
    10e8:	00550001 	subseq	r0, r5, r1
	...
    10f8:	01000000 	mrseq	r0, (UNDEF: 0)
    10fc:	00005200 	andeq	r5, r0, r0, lsl #4
    1100:	00000000 	andeq	r0, r0, r0
    1104:	00010000 	andeq	r0, r1, r0
    1108:	00000052 	andeq	r0, r0, r2, asr r0
    110c:	00000000 	andeq	r0, r0, r0
}
    1110:	00194c00 	andseq	r4, r9, r0, lsl #24
    1114:	00195600 	andseq	r5, r9, r0, lsl #12
    1118:	53000100 	movwpl	r0, #256	; 0x100
	...
void __buttons_setirq (int val) {
    1124:	000018f0 	strdeq	r1, [r0], -r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1128:	000018f6 	strdeq	r1, [r0], -r6
    112c:	00500001 	subseq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1130:	00000000 	andeq	r0, r0, r0
    1134:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1138:	9e00001c 	mcrls	0, 0, r0, cr0, cr12, {0}
		bn = BUTTON_GPIO (__button_list [i]);
    113c:	0100001c 	tsteq	r0, ip, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1140:	1c9e5000 	ldcne	0, cr5, [lr], {0}
    1144:	1ccc0000 	stclne	0, cr0, [ip], {0}
    1148:	00010000 	andeq	r0, r1, r0
    114c:	00000055 	andeq	r0, r0, r5, asr r0
    1150:	00000000 	andeq	r0, r0, r0
    1154:	001c9800 	andseq	r9, ip, r0, lsl #16
}
    1158:	001ca300 	andseq	sl, ip, r0, lsl #6
    115c:	51000100 	mrspl	r0, (UNDEF: 16)
    1160:	00001ca3 	andeq	r1, r0, r3, lsr #25
    1164:	00001ccc 	andeq	r1, r0, ip, asr #25
void __pinlist_setirq (int val) {
    1168:	00540001 	subseq	r0, r4, r1
	for (i = 0; i < N_PINLIST; i++) {
    116c:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1170:	b4000000 	strlt	r0, [r0], #-0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	b800001c 	stmdalt	r0, {r2, r3, r4}
	for (i = 0; i < N_PINLIST; i++) {
    1178:	0100001c 	tsteq	r0, ip, lsl r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    117c:	1cba5300 	ldcne	3, cr5, [sl]
    1180:	1cbe0000 	ldcne	0, cr0, [lr]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1184:	00010000 	andeq	r0, r1, r0
    1188:	001cbe53 	andseq	fp, ip, r3, asr lr
    118c:	001ccc00 	andseq	ip, ip, r0, lsl #24
	for (i = 0; i < N_PINLIST; i++) {
    1190:	52000100 	andpl	r0, r0, #0, 2
	...
}
    119c:	0000181c 	andeq	r1, r0, ip, lsl r8
    11a0:	00001821 	andeq	r1, r0, r1, lsr #16
void GPIOIntHandler () {
    11a4:	00500001 	subseq	r0, r0, r1
if (buttons_int) {
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	1c000000 	stcne	0, cr0, [r0], {-0}
	buttons_disable ();
    11b0:	21000018 	tstcs	r0, r8, lsl r0
    11b4:	01000018 	tsteq	r0, r8, lsl r0
	i_trigger ((aword)&__button_list);
    11b8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    11c8:	00010000 	andeq	r0, r1, r0
    11cc:	00000050 	andeq	r0, r0, r0, asr r0
    11d0:	00000000 	andeq	r0, r0, r0
    11d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	RISE_N_SHINE;
    11e8:	00530001 	subseq	r0, r3, r1
    11ec:	00000000 	andeq	r0, r0, r0
if (pin_sensor_int) {
    11f0:	01000000 	mrseq	r0, (UNDEF: 0)
    11f4:	00005300 	andeq	r5, r0, r0, lsl #6
	i_trigger ((aword)(&__input_pins));
    11f8:	00000000 	andeq	r0, r0, r0
    11fc:	17f00000 	ldrbne	r0, [r0, r0]!
    1200:	17f80000 	ldrbne	r0, [r8, r0]!
    1204:	00010000 	andeq	r0, r1, r0
    1208:	0017f850 	andseq	pc, r7, r0, asr r8	; <UNPREDICTABLE>
    120c:	00180b00 	andseq	r0, r8, r0, lsl #22
    1210:	53000100 	movwpl	r0, #256	; 0x100
    1214:	0000180c 	andeq	r1, r0, ip, lsl #16
    1218:	0000181c 	andeq	r1, r0, ip, lsl r8
    121c:	00530001 	subseq	r0, r3, r1
    1220:	00000000 	andeq	r0, r0, r0
	__pinsen_disable_and_clear;
    1224:	fa000000 	blx	122c <GPIOIntHandler+0x88>
	RISE_N_SHINE;
    1228:	0b000017 	bleq	128c <system_init+0x44>
    122c:	01000018 	tsteq	r0, r8, lsl r0
    1230:	180c5000 	stmdane	ip, {ip, lr}
}
    1234:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1238:	00010000 	andeq	r0, r1, r0
    123c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    124c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1258:	00530001 	subseq	r0, r3, r1
    125c:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1260:	01000000 	mrseq	r0, (UNDEF: 0)
    1264:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1274:	00010000 	andeq	r0, r1, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1278:	00000050 	andeq	r0, r0, r0, asr r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    127c:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1280:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		pin = (port_confs [i] >> 19) & 0x1f;
    1294:	00530001 	subseq	r0, r3, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1298:	00000000 	andeq	r0, r0, r0
    129c:	24000000 	strcs	r0, [r0], #-0
    12a0:	2a000018 	bcs	1308 <system_init+0xc0>
    12a4:	01000018 	tsteq	r0, r8, lsl r0
		if (port_confs [i] & 0x80)
    12a8:	00005000 	andeq	r5, r0, r0
    12ac:	00000000 	andeq	r0, r0, r0
    12b0:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
		if (port_confs [i] & 0x40)
    12b4:	182d0000 	stmdane	sp!, {}	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12b8:	00010000 	andeq	r0, r1, r0
    12bc:	00000051 	andeq	r0, r0, r1, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12c0:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	00183200 	andseq	r3, r8, r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12c8:	00187000 	andseq	r7, r8, r0
	all_leds_blink;
    12cc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    12d0:	00001874 	andeq	r1, r0, r4, ror r8
    12d4:	000018c2 	andeq	r1, r0, r2, asr #17
    12d8:	c4540001 	ldrbgt	r0, [r4], #-1
    12dc:	ce000018 	mcrgt	0, 0, r0, cr0, cr8, {0}
    12e0:	01000018 	tsteq	r0, r8, lsl r0
    12e4:	00005400 	andeq	r5, r0, r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	186a0000 	stmdane	sl!, {}^	; <UNPREDICTABLE>
    12f0:	186c0000 	stmdane	ip!, {}^	; <UNPREDICTABLE>
    12f4:	00010000 	andeq	r0, r1, r0
    12f8:	00187450 	andseq	r7, r8, r0, asr r4
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    12fc:	0018c400 	andseq	ip, r8, r0, lsl #8
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1300:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	IntEnable (INT_AON_RTC_COMB);
    130c:	00001904 	andeq	r1, r0, r4, lsl #18
    1310:	00001918 	andeq	r1, r0, r8, lsl r9
	__pi_malloc_init ();
    1314:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
	IntEnable (INT_AON_GPIO_EDGE);
    1318:	38000019 	stmdacc	r0, {r0, r3, r4}
    131c:	01000019 	tsteq	r0, r9, lsl r0
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1320:	00005000 	andeq	r5, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1324:	00000000 	andeq	r0, r0, r0
    1328:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    132c:	191a0000 	ldmdbne	sl, {}	; <UNPREDICTABLE>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1330:	00010000 	andeq	r0, r1, r0
    1334:	00191e51 	andseq	r1, r9, r1, asr lr
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1338:	00192400 	andseq	r2, r9, r0, lsl #8
    133c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	urates [0] = UART_RATE / 100;
    1348:	00001916 	andeq	r1, r0, r6, lsl r9
	reinit_uart ();
    134c:	00001918 	andeq	r1, r0, r8, lsl r9
	EXTRA_INITIALIZERS;
    1350:	00500001 	subseq	r0, r0, r1
    1354:	00000000 	andeq	r0, r0, r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1358:	16000000 	strne	r0, [r0], -r0
    135c:	1a000019 	bne	13c8 <system_init+0x180>
    1360:	01000019 	tsteq	r0, r9, lsl r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1364:	00005100 	andeq	r5, r0, r0, lsl #2
    1368:	00000000 	andeq	r0, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    136c:	1b580000 	blne	1601374 <__ccfg+0x15e13cc>
    1370:	1b660000 	blne	1981378 <__ccfg+0x19613d0>
			devinit [i] . init (devinit [i] . param);
    1374:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1378:	001b6c50 	andseq	r6, fp, r0, asr ip
    137c:	001b7f00 	andseq	r7, fp, r0, lsl #30
    1380:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    138c:	00001b64 	andeq	r1, r0, r4, ror #22
	tci_run_auxiliary_timer ();
    1390:	00001b66 	andeq	r1, r0, r6, ror #22
		diag ("");
    1394:	00500001 	subseq	r0, r0, r1
	...
		diag ("Leftover RAM: %d bytes",
    13a4:	01000000 	mrseq	r0, (UNDEF: 0)
    13a8:	00005000 	andeq	r5, r0, r0
    13ac:	00000000 	andeq	r0, r0, r0
    13b0:	00010000 	andeq	r0, r1, r0
    13b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    13c4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    13d8:	00540001 	subseq	r0, r4, r1
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	01000000 	mrseq	r0, (UNDEF: 0)
    13e4:	00005000 	andeq	r5, r0, r0
	...
    13f4:	00010000 	andeq	r0, r1, r0
    13f8:	00000050 	andeq	r0, r0, r0, asr r0
    13fc:	00000000 	andeq	r0, r0, r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1400:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    140c:	00750002 	rsbseq	r0, r5, r2
	...
    1418:	00002440 	andeq	r2, r0, r0, asr #8
    141c:	00002460 	andeq	r2, r0, r0, ror #8
}
    1420:	66500001 	ldrbvs	r0, [r0], -r1
__attribute__ ((noreturn)) void __pi_release () {
    1424:	67000024 	strvs	r0, [r0, -r4, lsr #32]
    1428:	01000024 	tsteq	r0, r4, lsr #32
    142c:	00005000 	andeq	r5, r0, r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1430:	00000000 	andeq	r0, r0, r0
	check_stack_overflow;
    1434:	244a0000 	strbcs	r0, [sl], #-0
    1438:	24700000 	ldrbtcs	r0, [r0], #-0
    143c:	00010000 	andeq	r0, r1, r0
	update_n_wake (MAX_WORD, NO);
    1440:	00247054 	eoreq	r7, r4, r4, asr r0
    1444:	00247300 	eoreq	r7, r4, r0, lsl #6
    1448:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (__pi_curr) {
    1454:	0000240c 	andeq	r2, r0, ip, lsl #8
  __ASM volatile ("cpsid i" : : : "memory");
    1458:	0000241c 	andeq	r2, r0, ip, lsl r4
	__SLEEP;
    145c:	22500001 	subscs	r0, r0, #1
    1460:	2a000024 	bcs	14f8 <__pi_release+0xd4>
    1464:	01000024 	tsteq	r0, r4, lsr #32
    1468:	00005000 	andeq	r5, r0, r0
	system_event_count ++;
    146c:	00000000 	andeq	r0, r0, r0
    1470:	24280000 	strtcs	r0, [r8], #-0
	switch (__pi_systat.effpdm) {
    1474:	24340000 	ldrtcs	r0, [r4], #-0
    1478:	00010000 	andeq	r0, r1, r0
    147c:	00000053 	andeq	r0, r0, r3, asr r0
    1480:	00000000 	andeq	r0, r0, r0
			__WFI ();
    1484:	00242a00 	eoreq	r2, r4, r0, lsl #20
    1488:	00243000 	eoreq	r3, r4, r0
    148c:	50000100 	andpl	r0, r0, r0, lsl #2
	check_stack_overflow;
    1490:	00002430 	andeq	r2, r0, r0, lsr r4
    1494:	00002434 	andeq	r2, r0, r4, lsr r4
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1498:	00730002 	rsbseq	r0, r3, r2
	...
			goto Redo;
    14a4:	000023cc 	andeq	r2, r0, ip, asr #7
	for_all_tasks (__pi_curr) {
    14a8:	000023dc 	ldrdeq	r2, [r0], -ip
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14ac:	e2500001 	subs	r0, r0, #1
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14b0:	ea000023 	b	1544 <__pi_release+0x120>
    14b4:	01000023 	tsteq	r0, r3, lsr #32
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14b8:	00005000 	andeq	r5, r0, r0
    14bc:	00000000 	andeq	r0, r0, r0
    14c0:	23cc0000 	biccs	r0, ip, #0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14c4:	23de0000 	bicscs	r0, lr, #0
    14c8:	00010000 	andeq	r0, r1, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14cc:	0023e251 	eoreq	lr, r3, r1, asr r2
    14d0:	00240c00 	eoreq	r0, r4, r0, lsl #24
			__WFI ();
    14d4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    14e0:	000023e8 	andeq	r2, r0, r8, ror #7
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14e4:	000023f0 	strdeq	r2, [r0], -r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    14e8:	fa530001 	blx	14c14f4 <__ccfg+0x14a154c>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14ec:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    14f0:	01000024 	tsteq	r0, r4, lsr #32
			PRCMPowerDomainOff (__pi_systat.ondmns |
    14f4:	00005300 	andeq	r5, r0, r0, lsl #6
    14f8:	00000000 	andeq	r0, r0, r0
    14fc:	23ea0000 	mvncs	r0, #0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1500:	23f80000 	mvnscs	r0, #0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1504:	00010000 	andeq	r0, r1, r0
    1508:	0023fa50 	eoreq	pc, r3, r0, asr sl	; <UNPREDICTABLE>
    150c:	0023fc00 	eoreq	pc, r3, r0, lsl #24
    1510:	50000100 	andpl	r0, r0, r0, lsl #2
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1514:	000023fc 	strdeq	r2, [r0], -ip
    1518:	0000240c 	andeq	r2, r0, ip, lsl #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    151c:	00730002 	rsbseq	r0, r3, r2
	...
    1528:	00002330 	andeq	r2, r0, r0, lsr r3
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    152c:	0000234a 	andeq	r2, r0, sl, asr #6
    1530:	4a500001 	bmi	140153c <__ccfg+0x13e1594>
			SysCtrlSetRechargeBeforePowerDown
    1534:	50000023 	andpl	r0, r0, r3, lsr #32
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1538:	01000023 	tsteq	r0, r3, lsr #32
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    153c:	23505500 	cmpcs	r0, #0, 10
    1540:	235a0000 	cmpcs	sl, #0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	00010000 	andeq	r0, r1, r0
    1548:	00235a50 	eoreq	r5, r3, r0, asr sl
    154c:	0023cc00 	eoreq	ip, r3, r0, lsl #24
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1550:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    155c:	00002330 	andeq	r2, r0, r0, lsr r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1560:	0000234a 	andeq	r2, r0, sl, asr #6
    1564:	4a510001 	bmi	1441570 <__ccfg+0x14215c8>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1568:	50000023 	andpl	r0, r0, r3, lsr #32
			while (!(AONWUCPowerStatusGet () &
    156c:	01000023 	tsteq	r0, r3, lsr #32
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1570:	23505700 	cmpcs	r0, #0, 14
    1574:	235a0000 	cmpcs	sl, #0
    1578:	00010000 	andeq	r0, r1, r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    157c:	00235a51 	eoreq	r5, r3, r1, asr sl
    1580:	0023cc00 	eoreq	ip, r3, r0, lsl #24
    1584:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1590:	00002330 	andeq	r2, r0, r0, lsr r3
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1594:	0000234a 	andeq	r2, r0, sl, asr #6
    1598:	4a520001 	bmi	14815a4 <__ccfg+0x14615fc>
			SysCtrlAdjustRechargeAfterPowerDown ();
    159c:	50000023 	andpl	r0, r0, r3, lsr #32
			reinit_uart ();
    15a0:	01000023 	tsteq	r0, r3, lsr #32
    15a4:	23505400 	cmpcs	r0, #0, 8
    15a8:	235a0000 	cmpcs	sl, #0
}
    15ac:	00010000 	andeq	r0, r1, r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15b0:	00235a52 	eoreq	r5, r3, r2, asr sl
    15b4:	0023cc00 	eoreq	ip, r3, r0, lsl #24
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15b8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15c4:	0000238a 	andeq	r2, r0, sl, lsl #7
    15c8:	000023a2 	andeq	r2, r0, r2, lsr #7
    15cc:	a2500001 	subsge	r0, r0, #1
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15d0:	a7000023 	strge	r0, [r0, -r3, lsr #32]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    15d4:	01000023 	tsteq	r0, r3, lsr #32
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    15d8:	00005100 	andeq	r5, r0, r0, lsl #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	23a80000 			; <UNDEFINED> instruction: 0x23a80000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    15e4:	23b70000 			; <UNDEFINED> instruction: 0x23b70000
    15e8:	00010000 	andeq	r0, r1, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15ec:	00000050 	andeq	r0, r0, r0, asr r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    15f0:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    15f4:	0022e000 	eoreq	lr, r2, r0
    15f8:	0022ee00 	eoreq	lr, r2, r0, lsl #28
			PRCMPowerDomainOff (
    15fc:	50000100 	andpl	r0, r0, r0, lsl #2
    1600:	000022ee 	andeq	r2, r0, lr, ror #5
	__SLEEP;
    1604:	0000231c 	andeq	r2, r0, ip, lsl r3
    1608:	00540001 	subseq	r0, r4, r1
  __ASM volatile ("cpsie i" : : : "memory");
    160c:	00000000 	andeq	r0, r0, r0
	goto Redo;
    1610:	e0000000 	and	r0, r0, r0
    1614:	f4000022 	vst4.8	{d0-d3}, [r0 :128], r2
    1618:	01000022 	tsteq	r0, r2, lsr #32
    161c:	22f85100 	rscscs	r5, r8, #0, 2
    1620:	23070000 	movwcs	r0, #28672	; 0x7000
    1624:	00010000 	andeq	r0, r1, r0
    1628:	00000051 	andeq	r0, r0, r1, asr r0
    162c:	00000000 	andeq	r0, r0, r0
    1630:	0022e000 	eoreq	lr, r2, r0
    1634:	0022f400 	eoreq	pc, r2, r0, lsl #8
    1638:	52000100 	andpl	r0, r0, #0, 2
    163c:	000022f8 	strdeq	r2, [r0], -r8
    1640:	00002307 	andeq	r2, r0, r7, lsl #6
    1644:	00520001 	subseq	r0, r2, r1
    1648:	00000000 	andeq	r0, r0, r0
    164c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1650:	12000023 	andne	r0, r0, #35	; 0x23
    1654:	01000023 	tsteq	r0, r3, lsr #32
    1658:	23125000 	tstcs	r2, #0
    165c:	23160000 	tstcs	r6, #0
    1660:	00070000 	andeq	r0, r7, r0
    1664:	24320074 	ldrtcs	r0, [r2], #-116	; 0xffffff8c
    1668:	16220072 			; <UNDEFINED> instruction: 0x16220072
    166c:	30000023 	andcc	r0, r0, r3, lsr #32
    1670:	01000023 	tsteq	r0, r3, lsr #32
    1674:	00005000 	andeq	r5, r0, r0
	...
	cli_tim;
    1684:	00010000 	andeq	r0, r1, r0
	diag ("PicOS halted");
    1688:	00000050 	andeq	r0, r0, r0, asr r0
	...
	__PCB = NULL;
    1698:	51000100 	mrspl	r0, (UNDEF: 16)
	...
int main (void) {
    16ac:	00500001 	subseq	r0, r0, r1
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16b0:	00000000 	andeq	r0, r0, r0
    16b4:	01000000 	mrseq	r0, (UNDEF: 0)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16b8:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16c8:	00010000 	andeq	r0, r1, r0
    16cc:	00000051 	andeq	r0, r0, r1, asr r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	delay (16, 0);
    16e8:	00500001 	subseq	r0, r0, r1
    16ec:	00000000 	andeq	r0, r0, r0
	__pi_release ();
    16f0:	01000000 	mrseq	r0, (UNDEF: 0)
    16f4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    1704:	00010000 	andeq	r0, r1, r0
    1708:	00000050 	andeq	r0, r0, r0, asr r0
static void killev (__pi_pcb_t *pid) {
    170c:	00000000 	andeq	r0, r0, r0
	wfun = (aword)(pid->code);
    1710:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			    || i->Events [j] . Event == wfun
    1724:	00510001 	subseq	r0, r1, r1
		for (j = 0; j < nevents (i); j++) {
    1728:	00000000 	andeq	r0, r0, r0
			if (i->Events [j] . Event == (aword)pid
    172c:	01000000 	mrseq	r0, (UNDEF: 0)
    1730:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	for_all_tasks (i) {
    1740:	00010000 	andeq	r0, r1, r0
}
    1744:	00000050 	andeq	r0, r0, r0, asr r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1748:	00000000 	andeq	r0, r0, r0
static void qfree (aword *ch) {
    174c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1760:	00510001 	subseq	r0, r1, r1
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1764:	00000000 	andeq	r0, r0, r0
    1768:	01000000 	mrseq	r0, (UNDEF: 0)
    176c:	00005100 	andeq	r5, r0, r0, lsl #2
			m_setnextp (cc, m_nextp (chunk));
    1770:	00000000 	andeq	r0, r0, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
    1774:	22180000 	andscs	r0, r8, #0
    1778:	22300000 	eorscs	r0, r0, #0
    177c:	00010000 	andeq	r0, r1, r0
    1780:	00223650 	eoreq	r3, r2, r0, asr r6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	00224000 	eoreq	r4, r2, r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1788:	50000100 	andpl	r0, r0, r0, lsl #2
    178c:	00002242 	andeq	r2, r0, r2, asr #4
    1790:	00002250 	andeq	r2, r0, r0, asr r2
			m_setnextp (cc, m_nextp (chunk));
    1794:	56500001 	ldrbpl	r0, [r0], -r1
			m_size (ch) += m_hdrlen + m_size (chunk);
    1798:	58000022 	stmdapl	r0, {r1, r5}
    179c:	01000022 	tsteq	r0, r2, lsr #32
    17a0:	22625000 	rsbcs	r5, r2, #0
    17a4:	22640000 	rsbcs	r0, r4, #0
    17a8:	00010000 	andeq	r0, r1, r0
    17ac:	00000050 	andeq	r0, r0, r0, asr r0
			if (m_size (chunk) >= m_size (ch))
    17b0:	00000000 	andeq	r0, r0, r0
    17b4:	00221800 	eoreq	r1, r2, r0, lsl #16
    17b8:	00225200 	eoreq	r5, r2, r0, lsl #4
		chunk = m_nextp (chunk))
    17bc:	51000100 	mrspl	r0, (UNDEF: 16)
    17c0:	00002256 	andeq	r2, r0, r6, asr r2
    17c4:	00002261 	andeq	r2, r0, r1, ror #4
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17c8:	62510001 	subsvs	r0, r1, #1
	diag_wait (a);
    17cc:	78000022 	stmdavc	r0, {r1, r5}
	diag_wchar (c, a);
    17d0:	01000022 	tsteq	r0, r2, lsr #32
    17d4:	00005100 	andeq	r5, r0, r0, lsl #2
}
    17d8:	00000000 	andeq	r0, r0, r0
    17dc:	22180000 	andscs	r0, r8, #0
	syserror (ESTATE, "state");
    17e0:	22550000 	subscs	r0, r5, #0
    17e4:	00010000 	andeq	r0, r1, r0
    17e8:	00225652 	eoreq	r5, r2, r2, asr r6
    17ec:	00226100 	eoreq	r6, r2, r0, lsl #2
	for (i = 0; i < MAX_UTIMERS; i++)
    17f0:	52000100 	andpl	r0, r0, #0, 2
void utimer_add (address ut) {
    17f4:	00002262 	andeq	r2, r0, r2, ror #4
    17f8:	00002278 	andeq	r2, r0, r8, ror r2
		if (__pi_utims [i] == NULL)
    17fc:	00520001 	subseq	r0, r2, r1
	for (i = 0; i < MAX_UTIMERS; i++)
    1800:	00000000 	andeq	r0, r0, r0
    1804:	30000000 	andcc	r0, r0, r0
		syserror (ERESOURCE, "ut a");
    1808:	34000022 	strcc	r0, [r0], #-34	; 0xffffffde
	__pi_utims [i] = ut;
    180c:	01000022 	tsteq	r0, r2, lsr #32
}
    1810:	00005000 	andeq	r5, r0, r0
	...
	TCI_RUN_AUXILIARY_TIMER;
    1820:	00010000 	andeq	r0, r1, r0
void update_n_wake (word min, Boolean force) {
    1824:	00000050 	andeq	r0, r0, r0, asr r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1828:	00000000 	andeq	r0, r0, r0
    182c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1840:	00500001 	subseq	r0, r0, r1
    1844:	00000000 	andeq	r0, r0, r0
    1848:	01000000 	mrseq	r0, (UNDEF: 0)
    184c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    185c:	00010000 	andeq	r0, r1, r0
    1860:	00000051 	andeq	r0, r0, r1, asr r0
	...
	__pi_mintk = znew + min;
    1870:	52000100 	andpl	r0, r0, #0, 2
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    187c:	00550001 	subseq	r0, r5, r1
	...
    188c:	01000000 	mrseq	r0, (UNDEF: 0)
    1890:	00005000 	andeq	r5, r0, r0
    1894:	00000000 	andeq	r0, r0, r0
    1898:	00010000 	andeq	r0, r1, r0
    189c:	00000054 	andeq	r0, r0, r4, asr r0
	...
				wakeuptm (i);
    18ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				d = i->Timer - znew;
    18b8:	00500001 	subseq	r0, r0, r1
	...
		if ((word)(__pi_mintk - znew) < min) 
    18c8:	01000000 	mrseq	r0, (UNDEF: 0)
    18cc:	00005200 	andeq	r5, r0, r0, lsl #4
	__pi_old = znew;
    18d0:	00000000 	andeq	r0, r0, r0
}
    18d4:	00010000 	andeq	r0, r1, r0
	TCI_RUN_DELAY_TIMER;
    18d8:	00000055 	andeq	r0, r0, r5, asr r0
}
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	00213000 	eoreq	r3, r1, r0
    18e4:	00214600 	eoreq	r4, r1, r0, lsl #12
    18e8:	50000100 	andpl	r0, r0, r0, lsl #2
    18ec:	0000214c 	andeq	r2, r0, ip, asr #2
void proceed (word state) {
    18f0:	0000216c 	andeq	r2, r0, ip, ror #2
	prcdstate (__pi_curr, state);
    18f4:	00500001 	subseq	r0, r0, r1
    18f8:	00000000 	andeq	r0, r0, r0
	release;
    18fc:	30000000 	andcc	r0, r0, r0
    1900:	46000021 	strmi	r0, [r0], -r1, lsr #32
void __pi_wait (aword event, word state) {
    1904:	01000021 	tsteq	r0, r1, lsr #32
	sint j = nevents (__pi_curr);
    1908:	214c5100 	mrscs	r5, (UNDEF: 92)
	if (j >= MAX_EVENTS_PER_TASK)
    190c:	21640000 	cmncs	r4, r0
    1910:	00010000 	andeq	r0, r1, r0
    1914:	00216651 	eoreq	r6, r1, r1, asr r6
		syserror (ENEVENTS, "sw");
    1918:	00217200 	eoreq	r7, r1, r0, lsl #4
    191c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	setestate (__pi_curr->Events [j], state, event);
    1928:	00002130 	andeq	r2, r0, r0, lsr r1
}
    192c:	00002146 	andeq	r2, r0, r6, asr #2
    1930:	46520001 	ldrbmi	r0, [r2], -r1
    1934:	4c000021 	stcmi	0, cr0, [r0], {33}	; 0x21
void __pi_trigger (aword event) {
    1938:	01000021 	tsteq	r0, r1, lsr #32
	for_all_tasks (i) {
    193c:	214c5400 	cmpcs	ip, r0, lsl #8
		for (j = 0; j < nevents (i); j++) {
    1940:	21580000 	cmpcs	r8, r0
    1944:	00010000 	andeq	r0, r1, r0
    1948:	00215852 	eoreq	r5, r1, r2, asr r8
    194c:	00217e00 	eoreq	r7, r1, r0, lsl #28
			if (i->Events [j] . Event == event) {
    1950:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1954:	00002184 	andeq	r2, r0, r4, lsl #3
    1958:	0000218a 	andeq	r2, r0, sl, lsl #3
				wakeupev (i, j);
    195c:	8e540001 	cdphi	0, 5, cr0, cr4, cr1, {0}
    1960:	a2000021 	andge	r0, r0, #33	; 0x21
	for_all_tasks (i) {
    1964:	01000021 	tsteq	r0, r1, lsr #32
}
    1968:	00005400 	andeq	r5, r0, r0, lsl #8
aword __pi_join (aword pid, word st) {
    196c:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    1970:	21300000 	teqcs	r0, r0
    1974:	213e0000 	teqcs	lr, r0
	return 0;
    1978:	00010000 	andeq	r0, r1, r0
		if ((aword)i == pid) {
    197c:	00000053 	andeq	r0, r0, r3, asr r0
			__pi_wait (pid, st);
    1980:	00000000 	andeq	r0, r0, r0
}
    1984:	0021ac00 	eoreq	sl, r1, r0, lsl #24
	for_all_tasks (i) {
    1988:	0021b800 	eoreq	fp, r1, r0, lsl #16
    198c:	50000100 	andpl	r0, r0, r0, lsl #2
void delay (word d, word state) {
    1990:	000021be 			; <UNDEFINED> instruction: 0x000021be
	settstate (__pi_curr, state);
    1994:	000021d6 	ldrdeq	r2, [r0], -r6
    1998:	00500001 	subseq	r0, r0, r1
    199c:	00000000 	andeq	r0, r0, r0
    19a0:	74000000 	strvc	r0, [r0], #-0
	update_n_wake (d, YES);
    19a4:	7e000021 	cdpvc	0, 0, cr0, cr0, cr1, {1}
    19a8:	01000021 	tsteq	r0, r1, lsr #32
	__pi_curr->Timer = __pi_old + d;
    19ac:	21845000 	orrcs	r5, r4, r0
    19b0:	21890000 	orrcs	r0, r9, r0
	inctimer (__pi_curr);
    19b4:	00010000 	andeq	r0, r1, r0
    19b8:	00218e50 	eoreq	r8, r1, r0, asr lr
    19bc:	00219c00 	eoreq	r9, r1, r0, lsl #24
}
    19c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (i)
    19d4:	00500001 	subseq	r0, r0, r1
}
    19d8:	00000000 	andeq	r0, r0, r0
		if (i->code == fun)
    19dc:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i)
    19e0:	00005000 	andeq	r5, r0, r0
    19e4:	00000000 	andeq	r0, r0, r0
    19e8:	00010000 	andeq	r0, r1, r0
int __pi_strlen (const char *s) {
    19ec:	00000050 	andeq	r0, r0, r0, asr r0
	for (i = 0; *(s+i) != '\0'; i++);
    19f0:	00000000 	andeq	r0, r0, r0
}
    19f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1a08:	00510001 	subseq	r0, r1, r1
	while (n-- && (*s != '\0'))
    1a0c:	00000000 	andeq	r0, r0, r0
    1a10:	01000000 	mrseq	r0, (UNDEF: 0)
	*d = '\0';
    1a14:	00005100 	andeq	r5, r0, r0, lsl #2
	while (n-- && (*s != '\0'))
    1a18:	00000000 	andeq	r0, r0, r0
    1a1c:	00010000 	andeq	r0, r1, r0
		*d++ = *s++;
    1a20:	00000051 	andeq	r0, r0, r1, asr r0
    1a24:	00000000 	andeq	r0, r0, r0
	while (n--)
    1a28:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	while (n--)
    1a3c:	00540001 	subseq	r0, r4, r1
}
    1a40:	00000000 	andeq	r0, r0, r0
		*dest++ = c;
    1a44:	0a000000 	beq	1a4c <adddevfunc+0x4>
void adddevfunc (devreqfun_t rf, int loc) {
    1a48:	32007000 	andcc	r7, r0, #0
		syserror (EREQPAR, "addv");
    1a4c:	059c0324 	ldreq	r0, [ip, #804]	; 0x324
		syserror (ERESOURCE, "addv");
    1a50:	00222000 	eoreq	r2, r2, r0
	if (ioreq [loc] != NULL)
    1a54:	00000000 	andeq	r0, r0, r0
    1a58:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (ERESOURCE, "addv");
    1a5c:	00005400 	andeq	r5, r0, r0, lsl #8
	ioreq [loc] = rf;
    1a60:	00000000 	andeq	r0, r0, r0
}
    1a64:	000a0000 	andeq	r0, sl, r0
    1a68:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
sint io (word retry, word dev, word operation, char *buf, word len) {
    1a6c:	00059c03 	andeq	r9, r5, r3, lsl #24
    1a70:	00002220 	andeq	r2, r0, r0, lsr #4
    1a74:	00000000 	andeq	r0, r0, r0
    1a78:	00010000 	andeq	r0, r1, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1a7c:	00000054 	andeq	r0, r0, r4, asr r0
    1a80:	00000000 	andeq	r0, r0, r0
    1a84:	70000a00 	andvc	r0, r0, r0, lsl #20
		syserror (ENODEVICE, "io");
    1a88:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1a8c:	2000059c 	mulcs	r0, ip, r5
	if (len == 0)
    1a90:	00000022 	andeq	r0, r0, r2, lsr #32
	...
	if (ret == -1) {
    1aa0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		iowait (dev, operation, retry);
    1aac:	00550001 	subseq	r0, r5, r1
	...
	if (ret == -2) {
    1abc:	01000000 	mrseq	r0, (UNDEF: 0)
		if (retry != WNONE) {
    1ac0:	00005400 	andeq	r5, r0, r0, lsl #8
    1ac4:	00000000 	andeq	r0, r0, r0
			iowait (dev, operation, retry);
    1ac8:	00010000 	andeq	r0, r1, r0
    1acc:	00000054 	andeq	r0, r0, r4, asr r0
	...
		(ioreq [dev]) (NONE, buf, len);
    1adc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1ae8:	00500001 	subseq	r0, r0, r1
	if (retry != WNONE) {
    1aec:	00000000 	andeq	r0, r0, r0
		delay (-ret - 2, retry);
    1af0:	01000000 	mrseq	r0, (UNDEF: 0)
    1af4:	00005000 	andeq	r5, r0, r0
	...
		release;
    1b04:	00010000 	andeq	r0, r1, r0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b08:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1b18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b2c:	00500001 	subseq	r0, r0, r1
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b30:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b38:	00005000 	andeq	r5, r0, r0
    1b3c:	00000000 	andeq	r0, r0, r0
}
    1b40:	00010000 	andeq	r0, r1, r0
    1b44:	00000050 	andeq	r0, r0, r0, asr r0
    1b48:	00000000 	andeq	r0, r0, r0
    1b4c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b60:	00510001 	subseq	r0, r1, r1
		syserror (EMALLOC, "malg");
    1b64:	00000000 	andeq	r0, r0, r0
    1b68:	01000000 	mrseq	r0, (UNDEF: 0)
	mcfree [MA_NP] += m_size (ch);
    1b6c:	00005100 	andeq	r5, r0, r0, lsl #2
		m_size (ch) ^= MALLOC_UMASK;
    1b70:	00000000 	andeq	r0, r0, r0
    1b74:	00010000 	andeq	r0, r1, r0
	mcfree [MA_NP] += m_size (ch);
    1b78:	00000051 	andeq	r0, r0, r1, asr r0
	...
		trigger ((aword)(&(mevent [MA_NP])));
    1b88:	53000100 	movwpl	r0, #256	; 0x100
	...
}
    1b94:	0070000a 	rsbseq	r0, r0, sl
    1b98:	9c032432 	cfstrsls	mvf2, [r3], {50}	; 0x32
    1b9c:	22200005 	eorcs	r0, r0, #5
	...
	j = NULL;
    1ba8:	00530001 	subseq	r0, r3, r1
	for_all_tasks (i) {
    1bac:	00000000 	andeq	r0, r0, r0
	syserror (EREQPAR, "kpi");
    1bb0:	0a000000 	beq	1bb8 <kill+0x18>
    1bb4:	32007000 	andcc	r7, r0, #0
		if ((aword)i == pid) {
    1bb8:	059c0324 	ldreq	r0, [ip, #804]	; 0x324
    1bbc:	00222000 	eoreq	r2, r2, r0
				__PCB = i->Next;
    1bc0:	00000000 	andeq	r0, r0, r0
			killev (i);
    1bc4:	01000000 	mrseq	r0, (UNDEF: 0)
			ufree (i);
    1bc8:	00005300 	andeq	r5, r0, r0, lsl #6
			if (i == __pi_curr)
    1bcc:	00000000 	andeq	r0, r0, r0
    1bd0:	000a0000 	andeq	r0, sl, r0
				release;
    1bd4:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
				j->Next = i->Next;
    1bd8:	00059c03 	andeq	r9, r5, r3, lsl #24
    1bdc:	00002220 	andeq	r2, r0, r0, lsr #4
	...
}
    1bec:	00010000 	andeq	r0, r1, r0
	if (size < 8)
    1bf0:	00000050 	andeq	r0, r0, r0, asr r0
		_size = 2;
    1bf4:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1bf8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (mevent [MA_NP] . nfail != 255)
    1c0c:	00530001 	subseq	r0, r3, r1
			mevent [MA_NP] . nfail ++;
    1c10:	00000000 	andeq	r0, r0, r0
		mnfree [MA_NP] = 0;
    1c14:	01000000 	mrseq	r0, (UNDEF: 0)
    1c18:	00005300 	andeq	r5, r0, r0, lsl #6
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c1c:	00000000 	andeq	r0, r0, r0
    1c20:	00010000 	andeq	r0, r1, r0
			syserror (EMALLOC, "malc");
    1c24:	00000053 	andeq	r0, r0, r3, asr r0
	...
		chunk = m_nextp (chunk)) {
    1c34:	52000100 	andpl	r0, r0, #0, 2
	...
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c40:	00520001 	subseq	r0, r2, r1
			m_size (chunk) = _size;
    1c44:	00000000 	andeq	r0, r0, r0
			cc = chunk + _size + m_hdrlen;
    1c48:	01000000 	mrseq	r0, (UNDEF: 0)
    1c4c:	00005200 	andeq	r5, r0, r0, lsl #4
			m_size (cc) = waste - m_hdrlen;
    1c50:	00000000 	andeq	r0, r0, r0
			QFREE;
    1c54:	00010000 	andeq	r0, r1, r0
		mevent [MA_NP] . nfail = 0;
    1c58:	00000052 	andeq	r0, r0, r2, asr r0
		mcfree [MA_NP] -= m_size (chunk);
    1c5c:	00000000 	andeq	r0, r0, r0
    1c60:	0020b000 	eoreq	fp, r0, r0
    1c64:	0020be00 	eoreq	fp, r0, r0, lsl #28
    1c68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		m_size (chunk) |= MALLOC_UMASK;
    1c74:	000020b0 	strheq	r2, [r0], -r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1c78:	000020c2 	andeq	r2, r0, r2, asr #1
}
    1c7c:	c8510001 	ldmdagt	r1, {r0}^
    1c80:	d8000020 	stmdale	r0, {r5}
    1c84:	01000020 	tsteq	r0, r0, lsr #32
    1c88:	20e05100 	rsccs	r5, r0, r0, lsl #2
    1c8c:	21020000 	mrscs	r0, (UNDEF: 2)
    1c90:	00010000 	andeq	r0, r1, r0
    1c94:	00210451 	eoreq	r0, r1, r1, asr r4
aword __pi_fork (fsmcode func, aword data) {
    1c98:	00210600 	eoreq	r0, r1, r0, lsl #12
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c9c:	51000100 	mrspl	r0, (UNDEF: 16)
    1ca0:	0000211a 	andeq	r2, r0, sl, lsl r1
    1ca4:	00002130 	andeq	r2, r0, r0, lsr r1
		if ((j = __PCB) == NULL)
    1ca8:	00510001 	subseq	r0, r1, r1
	i->Next = NULL;
    1cac:	00000000 	andeq	r0, r0, r0
	i->data = data;
    1cb0:	ec000000 	stc	0, cr0, [r0], {-0}
		if ((j = __PCB) == NULL)
    1cb4:	16000020 	strne	r0, [r0], -r0, lsr #32
}
    1cb8:	01000021 	tsteq	r0, r1, lsr #32
			for (; j->Next != NULL; j = j->Next);
    1cbc:	00005500 	andeq	r5, r0, r0, lsl #10
    1cc0:	00000000 	andeq	r0, r0, r0
	return (aword) i;
    1cc4:	20ca0000 	sbccs	r0, sl, r0
    1cc8:	20f40000 	rscscs	r0, r4, r0
	if (mevent [MA_NP] . nwait != 255)
    1ccc:	00010000 	andeq	r0, r1, r0
    1cd0:	0020f454 	eoreq	pc, r0, r4, asr r4	; <UNPREDICTABLE>
    1cd4:	00210800 	eoreq	r0, r1, r0, lsl #16
		mevent [MA_NP] . nwait ++;
    1cd8:	50000100 	andpl	r0, r0, r0, lsl #2
	wait ((aword)(&(mevent [MA_NP])), state);
    1cdc:	00002108 	andeq	r2, r0, r8, lsl #2
    1ce0:	00002130 	andeq	r2, r0, r0, lsr r1
void diag (const char *mess, ...) {
    1ce4:	00540001 	subseq	r0, r4, r1
    1ce8:	00000000 	andeq	r0, r0, r0
    1cec:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
	diag_disable_int (a, is);
    1cf0:	db000020 	blle	1d78 <diag+0x94>
    1cf4:	01000020 	tsteq	r0, r0, lsr #32
    1cf8:	20e05000 	rsccs	r5, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	20e20000 	rsccs	r0, r2, r0
	diag_disable_int (a, is);
    1d00:	00010000 	andeq	r0, r1, r0
	while (*mess != '\0') {
    1d04:	0020e250 	eoreq	lr, r0, r0, asr r2
	dgout ('\r');
    1d08:	0020e500 	eoreq	lr, r0, r0, lsl #10
	dgout ('\n');
    1d0c:	71000700 	tstvc	r0, r0, lsl #14
    1d10:	72243200 	eorvc	r3, r4, #0, 4
    1d14:	211a2200 	tstcs	sl, r0, lsl #4
	diag_wait (a);
    1d18:	21300000 	teqcs	r0, r0
	diag_enable_int (a, is);
    1d1c:	00010000 	andeq	r0, r1, r0
    1d20:	00000050 	andeq	r0, r0, r0, asr r0
}
    1d24:	00000000 	andeq	r0, r0, r0
    1d28:	00208c00 	eoreq	r8, r0, r0, lsl #24
    1d2c:	0020a200 	eoreq	sl, r0, r0, lsl #4
		if (*mess == '%') {
    1d30:	50000100 	andpl	r0, r0, r0, lsl #2
    1d34:	000020a4 	andeq	r2, r0, r4, lsr #1
			if (*mess == 'l') {
    1d38:	000020a8 	andeq	r2, r0, r8, lsr #1
    1d3c:	00500001 	subseq	r0, r0, r1
	...
				bc = 16;
    1d4c:	01000000 	mrseq	r0, (UNDEF: 0)
			switch (*mess) {
    1d50:	00005000 	andeq	r5, r0, r0
    1d54:	00000000 	andeq	r0, r0, r0
    1d58:	00010000 	andeq	r0, r1, r0
				dgout ('%');
    1d5c:	00000050 	andeq	r0, r0, r0, asr r0
	...
			switch (*mess) {
    1d6c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					(val >> (bc - i)) & 0xf];
    1d78:	00550001 	subseq	r0, r5, r1
    1d7c:	00000000 	andeq	r0, r0, r0
					dgout (v);
    1d80:	01000000 	mrseq	r0, (UNDEF: 0)
    1d84:	00005100 	andeq	r5, r0, r0, lsl #2
				while (i < bc) {
    1d88:	00000000 	andeq	r0, r0, r0
			mess++;
    1d8c:	00010000 	andeq	r0, r1, r0
					d /= 10;
    1d90:	00000055 	andeq	r0, r0, r5, asr r0
				if ((val >> (bc - 1)) & 1) {
    1d94:	00000000 	andeq	r0, r0, r0
    1d98:	51000100 	mrspl	r0, (UNDEF: 16)
	...
						val |= 0xffff0000;
    1da4:	00550001 	subseq	r0, r5, r1
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1db4:	01000000 	mrseq	r0, (UNDEF: 0)
    1db8:	00005600 	andeq	r5, r0, r0, lsl #12
	...
					d /= 10;
    1dc8:	00010000 	andeq	r0, r1, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1dcc:	00000050 	andeq	r0, r0, r0, asr r0
					dgout (v + '0');
    1dd0:	00000000 	andeq	r0, r0, r0
    1dd4:	001fcc00 	andseq	ip, pc, r0, lsl #24
    1dd8:	001ffa00 	andseq	pc, pc, r0, lsl #20
					d /= 10;
    1ddc:	50000100 	andpl	r0, r0, r0, lsl #2
					val = val - (v * d);
    1de0:	00002000 	andeq	r2, r0, r0
					if (d == 0) break;
    1de4:	00002020 	andeq	r2, r0, r0, lsr #32
					v = (word) (val / d);
    1de8:	60500001 	subsvs	r0, r0, r1
    1dec:	62000020 	andvs	r0, r0, #32
				if (bc == 16)
    1df0:	01000020 	tsteq	r0, r0, lsr #32
				d = (bc == 16) ? 10000 : 1000000000;
    1df4:	00005000 	andeq	r5, r0, r0
					val &= 0xffff;
    1df8:	00000000 	andeq	r0, r0, r0
					dgout (*s);
    1dfc:	1fcc0000 	svcne	0x00cc0000
					s++;
    1e00:	1ffc0000 	svcne	0x00fc0000
				while (*s != '\0') {
    1e04:	00010000 	andeq	r0, r1, r0
    1e08:	001ffc51 	andseq	pc, pc, r1, asr ip	; <UNPREDICTABLE>
			dgout (*mess++);
    1e0c:	00200000 	eoreq	r0, r0, r0
    1e10:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    1e14:	00002000 	andeq	r2, r0, r0
    1e18:	00002020 	andeq	r2, r0, r0, lsr #32
    1e1c:	20510001 	subscs	r0, r1, r1
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e20:	2c000020 	stccs	0, cr0, [r0], {32}
    1e24:	01000020 	tsteq	r0, r0, lsr #32
    1e28:	20305700 	eorscs	r5, r0, r0, lsl #14
    1e2c:	20600000 	rsbcs	r0, r0, r0
	^ entropy
    1e30:	00010000 	andeq	r0, r1, r0
}
    1e34:	00206057 	eoreq	r6, r0, r7, asr r0
    1e38:	00206500 	eoreq	r6, r0, r0, lsl #10
    1e3c:	51000100 	mrspl	r0, (UNDEF: 16)
    1e40:	00002065 	andeq	r2, r0, r5, rrx
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e44:	0000208c 	andeq	r2, r0, ip, lsl #1
	word cs = size + hblenb;
    1e48:	00570001 	subseq	r0, r7, r1
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e4c:	00000000 	andeq	r0, r0, r0
    1e50:	cc000000 	stcgt	0, cr0, [r0], {-0}
	p -> length = size;
    1e54:	fc00001f 	stc2	0, cr0, [r0], {31}
}
    1e58:	0200001f 	andeq	r0, r0, #31
	if (p->attributes.b.queued) {
    1e5c:	00789100 	rsbseq	r9, r8, r0, lsl #2
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e60:	20000020 	andcs	r0, r0, r0, lsr #32
    1e64:	02000020 	andeq	r0, r0, #32
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e68:	30789100 	rsbscc	r9, r8, r0, lsl #2
		p->attributes.b.queued = 0;
    1e6c:	3c000020 	stccc	0, cr0, [r0], {32}
    1e70:	02000020 	andeq	r0, r0, #32
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1e74:	60789100 	rsbsvs	r9, r8, r0, lsl #2
	deq (p);	// Remove from queue
    1e78:	8c000020 	stchi	0, cr0, [r0], {32}
}
    1e7c:	02000020 	andeq	r0, r0, #32
	tfree ((address)p);
    1e80:	00789100 	rsbseq	r9, r8, r0, lsl #2
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1e84:	00000000 	andeq	r0, r0, r0
    1e88:	14000000 	strne	r0, [r0], #-0
    1e8c:	24000020 	strcs	r0, [r0], #-32	; 0xffffffe0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1e90:	01000020 	tsteq	r0, r0, lsr #32
    1e94:	20305600 	eorscs	r5, r0, r0, lsl #12
	if (q_empty (q))
    1e98:	208c0000 	addcs	r0, ip, r0
    1e9c:	00010000 	andeq	r0, r1, r0
		trigger (q);
    1ea0:	00000056 	andeq	r0, r0, r6, asr r0
	if (p->attributes.b.urgent) {
    1ea4:	00000000 	andeq	r0, r0, r0
		p->u.bqueue.next = q->next;
    1ea8:	00203000 	eoreq	r3, r0, r0
		p->u.bqueue.prev = q;
    1eac:	00204a00 	eoreq	r4, r0, r0, lsl #20
		q->next->prev = (qitem_t*) p;
    1eb0:	50000100 	andpl	r0, r0, r0, lsl #2
	p->attributes.b.queued = 1;
    1eb4:	0000204a 	andeq	r2, r0, sl, asr #32
    1eb8:	0000204e 	andeq	r2, r0, lr, asr #32
}
    1ebc:	4e540001 	cdpmi	0, 5, cr0, cr4, cr1, {0}
		p->u.bqueue.prev = q->prev;
    1ec0:	52000020 	andpl	r0, r0, #32
		q->prev->next = (qitem_t*) p;
    1ec4:	01000020 	tsteq	r0, r0, lsr #32
		q->prev = (qitem_t*) p;
    1ec8:	20525000 	subscs	r5, r2, r0
    1ecc:	20600000 	rsbcs	r0, r0, r0
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1ed0:	00010000 	andeq	r0, r1, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1ed4:	00206654 	eoreq	r6, r0, r4, asr r6
	switch (dv) {
    1ed8:	00206e00 	eoreq	r6, r0, r0, lsl #28
    1edc:	50000100 	andpl	r0, r0, r0, lsl #2
    1ee0:	0000206e 	andeq	r2, r0, lr, rrx
    1ee4:	0000208c 	andeq	r2, r0, ip, lsl #1
			p->attributes.b.urgent = 1;
    1ee8:	00540001 	subseq	r0, r4, r1
    1eec:	00000000 	andeq	r0, r0, r0
			verify_ses (p, "dispose ses");
    1ef0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    1ef4:	8200001f 	andhi	r0, r0, #31
    1ef8:	0100001f 	tsteq	r0, pc, lsl r0
    1efc:	1f865000 	svcne	0x00865000
    1f00:	1fa30000 	svcne	0x00a30000
			verify_phy (p, "dispose phy");
    1f04:	00010000 	andeq	r0, r1, r0
    1f08:	001fb050 	andseq	fp, pc, r0, asr r0	; <UNPREDICTABLE>
}
    1f0c:	001fb200 	andseq	fp, pc, r0, lsl #4
			enq (oqueues [p->attributes.b.phys], p);
    1f10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			verify_phy (p, "dispose phy");
    1f1c:	00001f66 	andeq	r1, r0, r6, ror #30
    1f20:	00001fac 	andeq	r1, r0, ip, lsr #31
    1f24:	ac540001 	mrrcge	0, 0, r0, r4, cr1
    1f28:	af00001f 	svcge	0x0000001f
    1f2c:	0100001f 	tsteq	r0, pc, lsl r0
    1f30:	1fb05000 	svcne	0x00b05000
			enq (oqueues [p->attributes.b.phys], p);
    1f34:	1fb60000 	svcne	0x00b60000
    1f38:	00010000 	andeq	r0, r1, r0
}
    1f3c:	001fb654 	andseq	fp, pc, r4, asr r6	; <UNPREDICTABLE>
			rlp (p);
    1f40:	001fb900 	andseq	fp, pc, r0, lsl #18
}
    1f44:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f50:	00001e44 	andeq	r1, r0, r4, asr #28
    1f54:	00001e4a 	andeq	r1, r0, sl, asr #28
    1f58:	00500001 	subseq	r0, r0, r1
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f5c:	00000000 	andeq	r0, r0, r0
	if (b->attributes.b.outgoing) {
    1f60:	74000000 	strvc	r0, [r0], #-0
	b = header (p);
    1f64:	8100001e 	tsthi	r0, lr, lsl r0
	if (b->attributes.b.outgoing) {
    1f68:	0100001e 	tsteq	r0, lr, lsl r0
		verify_ses (b, "tcv02");
    1f6c:	00005000 	andeq	r5, r0, r0
    1f70:	00000000 	andeq	r0, r0, r0
    1f74:	1e600000 	cdpne	0, 6, cr0, cr0, cr0, {0}
    1f78:	1e720000 	cdpne	0, 7, cr0, cr2, cr0, {0}
    1f7c:	00010000 	andeq	r0, r1, r0
		verify_plg (b, tcv_out, "tcv03");
    1f80:	00000050 	andeq	r0, r0, r0, asr r0
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	001e8400 	andseq	r8, lr, r0, lsl #8
    1f8c:	001e9200 	andseq	r9, lr, r0, lsl #4
    1f90:	50000100 	andpl	r0, r0, r0, lsl #2
    1f94:	00001e92 	muleq	r0, r2, lr
    1f98:	00001e98 	muleq	r0, r8, lr
    1f9c:	98550001 	ldmdals	r5, {r0}^
    1fa0:	a100001e 	tstge	r0, lr, lsl r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fa4:	0100001e 	tsteq	r0, lr, lsl r0
}
    1fa8:	1ea15000 	cdpne	0, 10, cr5, cr1, cr0, {0}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fac:	1ed00000 	cdpne	0, 13, cr0, cr0, cr0, {0}
		rlp (b);
    1fb0:	00010000 	andeq	r0, r1, r0
}
    1fb4:	00000055 	andeq	r0, r0, r5, asr r0
		rlp (b);
    1fb8:	00000000 	andeq	r0, r0, r0
    1fbc:	001e8400 	andseq	r8, lr, r0, lsl #8
    1fc0:	001e9400 	andseq	r9, lr, r0, lsl #8
    1fc4:	51000100 	mrspl	r0, (UNDEF: 16)
    1fc8:	00001e94 	muleq	r0, r4, lr
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1fcc:	00001e98 	muleq	r0, r8, lr
    1fd0:	98540001 	ldmdals	r4, {r0}^
    1fd4:	a100001e 	tstge	r0, lr, lsl r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fd8:	0100001e 	tsteq	r0, lr, lsl r0
	va_start (ap, plid);
    1fdc:	1ea15100 	fdvnes	f5, f1, f0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fe0:	1ed00000 	cdpne	0, 13, cr0, cr0, cr0, {0}
    1fe4:	00010000 	andeq	r0, r1, r0
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1fe8:	00000054 	andeq	r0, r0, r4, asr r0
    1fec:	00000000 	andeq	r0, r0, r0
    1ff0:	001e9000 	andseq	r9, lr, r0
    1ff4:	001e9200 	andseq	r9, lr, r0, lsl #4
			syserror (ENODEVICE, "tcv04");
    1ff8:	50000100 	andpl	r0, r0, r0, lsl #2
		syserror (EMALLOC, "tcv05");
    1ffc:	00001e92 	muleq	r0, r2, lr
	attp.b.outgoing = 1;
    2000:	00001e98 	muleq	r0, r8, lr
    2004:	00550001 	subseq	r0, r5, r1
    2008:	00000000 	andeq	r0, r0, r0
    200c:	90000000 	andls	r0, r0, r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2010:	9400001e 	strls	r0, [r0], #-30	; 0xffffffe2
		if (descriptors [fd] == NULL)
    2014:	0100001e 	tsteq	r0, lr, lsl r0
    2018:	1e945100 	fmlnes	f5, f4, f0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    201c:	1e980000 	cdpne	0, 9, cr0, cr8, cr0, {0}
		return ERROR;
    2020:	00010000 	andeq	r0, r1, r0
}
    2024:	00000054 	andeq	r0, r0, r4, asr r0
    2028:	00000000 	andeq	r0, r0, r0
    202c:	001ed000 	andseq	sp, lr, r0
	s->attpattern.b.session = fd;
    2030:	001f0000 	andseq	r0, pc, r0
    2034:	50000100 	andpl	r0, r0, r0, lsl #2
	descriptors [fd] = s;
    2038:	00001f00 	andeq	r1, r0, r0, lsl #30
	q_init (&(s->rqueue));
    203c:	00001f0c 	andeq	r1, r0, ip, lsl #30
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2040:	0c540001 	mrrceq	0, 0, r0, r4, cr1
    2044:	1300001f 	movwne	r0, #31
    2048:	0100001f 	tsteq	r0, pc, lsl r0
    204c:	1f145100 	svcne	0x00145100
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2050:	1f3a0000 	svcne	0x003a0000
    2054:	00010000 	andeq	r0, r1, r0
    2058:	001f3a50 	andseq	r3, pc, r0, asr sl	; <UNPREDICTABLE>
	descriptors [fd] = s;
    205c:	001f3c00 	andseq	r3, pc, r0, lsl #24
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2060:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2064:	00001f3c 	andeq	r1, r0, ip, lsr pc
	if (s == NULL)
    2068:	00001f43 	andeq	r1, r0, r3, asr #30
		syserror (EMALLOC, "tcv05");
    206c:	44500001 	ldrbmi	r0, [r0], #-1
    2070:	5c00001f 	stcpl	0, cr0, [r0], {31}
    2074:	0100001f 	tsteq	r0, pc, lsl r0
    2078:	00005000 	andeq	r5, r0, r0
    207c:	00000000 	andeq	r0, r0, r0
    2080:	1ed00000 	cdpne	0, 13, cr0, cr0, cr0, {0}
    2084:	1eda0000 	cdpne	0, 13, cr0, cr10, cr0, {0}
    2088:	00010000 	andeq	r0, r1, r0
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    208c:	00000051 	andeq	r0, r0, r1, asr r0
	    (plugins [ord] != NULL && plugins [ord] != pl))
    2090:	00000000 	andeq	r0, r0, r0
    2094:	001f1c00 	andseq	r1, pc, r0, lsl #24
    2098:	001f3a00 	andseq	r3, pc, r0, lsl #20
	plugins [ord] = pl;
    209c:	50000100 	andpl	r0, r0, r0, lsl #2
	return 0;
    20a0:	00001f3a 	andeq	r1, r0, sl, lsr pc
		return ERROR;
    20a4:	00001f3c 	andeq	r1, r0, ip, lsr pc
}
    20a8:	00540001 	subseq	r0, r4, r1
    20ac:	00000000 	andeq	r0, r0, r0
	verify_fds (fd, "tcv10");
    20b0:	ec000000 	stc	0, cr0, [r0], {-0}
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20b4:	f2000021 	vhadd.s8	d0, d0, d17
	verify_fds (fd, "tcv10");
    20b8:	01000021 	tsteq	r0, r1, lsr #32
    20bc:	21f25000 	mvnscs	r5, r0
    20c0:	21fe0000 	mvnscs	r0, r0
	verify_plg (b, tcv_frm, "tcv11");
    20c4:	00010000 	andeq	r0, r1, r0
	b = q_first (rq);
    20c8:	00000053 	andeq	r0, r0, r3, asr r0
	if (q_end (b, rq)) {
    20cc:	00000000 	andeq	r0, r0, r0
		if (state != WNONE) {
    20d0:	0021ec00 	eoreq	lr, r1, r0, lsl #24
    20d4:	0021f600 	eoreq	pc, r1, r0, lsl #12
			when (rq, state);
    20d8:	51000100 	mrspl	r0, (UNDEF: 16)
			release;
    20dc:	000021f6 	strdeq	r2, [r0], -r6
	deq (b);	// Dequeue the packet ...
    20e0:	00002202 	andeq	r2, r0, r2, lsl #4
    20e4:	08500001 	ldmdaeq	r0, {r0}^
	p = ((address)(b + 1));
    20e8:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
	verify_plg (b, tcv_frm, "tcv11");
    20ec:	01000022 	tsteq	r0, r2, lsr #32
    20f0:	00005000 	andeq	r5, r0, r0
    20f4:	00000000 	andeq	r0, r0, r0
    20f8:	21ec0000 	mvncs	r0, r0
    20fc:	21fa0000 	mvnscs	r0, r0
    2100:	00010000 	andeq	r0, r1, r0
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2104:	0021fa52 	eoreq	pc, r1, r2, asr sl	; <UNPREDICTABLE>
    2108:	00220400 	eoreq	r0, r2, r0, lsl #8
		b->length - b->u.pointers.head - b->u.pointers.tail;
    210c:	51000100 	mrspl	r0, (UNDEF: 16)
    2110:	00002208 	andeq	r2, r0, r8, lsl #4
	b->u.pointers.tail =
    2114:	0000220d 	andeq	r2, r0, sp, lsl #4
}
    2118:	00510001 	subseq	r0, r1, r1
	...
		return NULL;
    2124:	02000022 	andeq	r0, r0, #34	; 0x22
    2128:	01000022 	tsteq	r0, r2, lsr #32
    212c:	00005000 	andeq	r5, r0, r0
	verify_fds (fd, "tcv16");
    2130:	00000000 	andeq	r0, r0, r0
								Boolean urg) {
    2134:	22000000 	andcs	r0, r0, #0
    2138:	22040000 	andcs	r0, r4, #0
	verify_fds (fd, "tcv16");
    213c:	00010000 	andeq	r0, r1, r0
    2140:	00000051 	andeq	r0, r0, r1, asr r0
    2144:	00000000 	andeq	r0, r0, r0
	verify_pld (s, tcv_frm, "tcv17");
    2148:	00227800 	eoreq	r7, r2, r0, lsl #16
    214c:	00227c00 	eoreq	r7, r2, r0, lsl #24
    2150:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    215c:	00002278 	andeq	r2, r0, r8, ror r2
    2160:	0000228a 	andeq	r2, r0, sl, lsl #5
    2164:	8a510001 	bhi	1442170 <__ccfg+0x14221c8>
	ptrs.head = (word) fd;
    2168:	8e000022 	cdphi	0, 0, cr0, cr0, cr2, {1}
	ptrs.tail = (word) urg;
    216c:	01000022 	tsteq	r0, r2, lsr #32
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2170:	228e5600 	addcs	r5, lr, #0, 12
    2174:	229e0000 	addscs	r0, lr, #0
		if (state != WNONE) {
    2178:	00010000 	andeq	r0, r1, r0
    217c:	00229e51 	eoreq	r9, r2, r1, asr lr
}
    2180:	0022a000 	eoreq	sl, r2, r0
			when (eid, state);
    2184:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2188:	000022a0 	andeq	r2, r0, r0, lsr #5
			release;
    218c:	000022a3 	andeq	r2, r0, r3, lsr #5
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2190:	a3510001 	cmpge	r1, #1
    2194:	c6000022 	strgt	r0, [r0], -r2, lsr #32
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2198:	01000022 	tsteq	r0, r2, lsr #32
    219c:	22c65600 	sbccs	r5, r6, #0, 12
    21a0:	22c90000 	sbccs	r0, r9, #0
    21a4:	00010000 	andeq	r0, r1, r0
    21a8:	0022c951 	eoreq	ip, r2, r1, asr r9
    21ac:	0022e000 	eoreq	lr, r2, r0
		if (state != WNONE) {
    21b0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			tmwait (state);
    21bc:	00002278 	andeq	r2, r0, r8, ror r2
	b->attributes = s->attpattern;
    21c0:	0000228d 	andeq	r2, r0, sp, lsl #5
		b->attributes.b.urgent = 1;
    21c4:	8d520001 	ldclhi	0, cr0, [r2, #-4]
    21c8:	8e000022 	cdphi	0, 0, cr0, cr0, cr2, {1}
	b->u.pointers.head = ptrs.head;
    21cc:	01000022 	tsteq	r0, r2, lsr #32
	b->u.pointers.tail = length;
    21d0:	228e5500 	addcs	r5, lr, #0, 10
	return (address) (b + 1);
    21d4:	22a30000 	adccs	r0, r3, #0
    21d8:	00010000 	andeq	r0, r1, r0
    21dc:	0022a352 	eoreq	sl, r2, r2, asr r3
    21e0:	0022c600 	eoreq	ip, r2, r0, lsl #12
    21e4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    21e8:	000022c6 	andeq	r2, r0, r6, asr #5
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    21ec:	000022c9 	andeq	r2, r0, r9, asr #5
    21f0:	c9520001 	ldmdbgt	r2, {r0}^
    21f4:	e0000022 	and	r0, r0, r2, lsr #32
	verify_fph (phy, "tcv23");
    21f8:	01000022 	tsteq	r0, r2, lsr #32
    21fc:	00005500 	andeq	r5, r0, r0, lsl #10
    2200:	00000000 	andeq	r0, r0, r0
    2204:	22a40000 	adccs	r0, r4, #0
}
    2208:	22aa0000 	adccs	r0, sl, #0
	return (physical [phy]) (opt, arg);
    220c:	00010000 	andeq	r0, r1, r0
    2210:	0022ac50 	eoreq	sl, r2, r0, asr ip
    2214:	0022bf00 	eoreq	fp, r2, r0, lsl #30
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2218:	50000100 	andpl	r0, r0, r0, lsl #2
	if (opt < 0) {
    221c:	000022bf 			; <UNDEFINED> instruction: 0x000022bf
		if (fd < 0)
    2220:	000022c6 	andeq	r2, r0, r6, asr #5
		if (opt == PHYSOPT_PLUGINFO) {
    2224:	ca540001 	bgt	1502230 <__ccfg+0x14e2288>
			if (fd >= TCV_MAX_PLUGS)
    2228:	d0000022 	andle	r0, r0, r2, lsr #32
			if ((p = plugins [fd]) == NULL)
    222c:	01000022 	tsteq	r0, r2, lsr #32
    2230:	00005000 	andeq	r5, r0, r0
}
    2234:	00000000 	andeq	r0, r0, r0
		if (fd >= TCV_MAX_PHYS)
    2238:	22860000 	addcs	r0, r6, #0
		return physinfo [fd];
    223c:	228a0000 	addcs	r0, sl, #0
    2240:	00010000 	andeq	r0, r1, r0
	verify_fds (fd, "tcv22");
    2244:	00000051 	andeq	r0, r0, r1, asr r0
    2248:	00000000 	andeq	r0, r0, r0
    224c:	00249000 	eoreq	r9, r4, r0
    2250:	0024a900 	eoreq	sl, r4, r0, lsl #18
    2254:	52000100 	andpl	r0, r0, #0, 2
}
    2258:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    225c:	000024c8 	andeq	r2, r0, r8, asr #9
    2260:	00520001 	subseq	r0, r2, r1
			return 0;
    2264:	00000000 	andeq	r0, r0, r0
    2268:	90000000 	andls	r0, r0, r0
    226c:	a9000024 	stmdbge	r0, {r2, r5}
    2270:	01000024 	tsteq	r0, r4, lsr #32
    2274:	24b85300 	ldrtcs	r5, [r8], #768	; 0x300
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2278:	24c80000 	strbcs	r0, [r8], #0
    227c:	00010000 	andeq	r0, r1, r0
	if (dsp != TCV_DSP_PASS) {
    2280:	00000053 	andeq	r0, r0, r3, asr r0
	...
		verify_fds (ses, "tcv27");
    2290:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    229c:	00500001 	subseq	r0, r0, r1
	...
			p->attributes = descriptors [ses] -> attpattern;
    22ac:	01000000 	mrseq	r0, (UNDEF: 0)
			dispose (p, dsp);
    22b0:	00005100 	andeq	r5, r0, r0, lsl #2
			p->attributes = descriptors [ses] -> attpattern;
    22b4:	00000000 	andeq	r0, r0, r0
			p->attributes.b.outgoing = 0;
    22b8:	00010000 	andeq	r0, r1, r0
			dispose (p, dsp);
    22bc:	00000051 	andeq	r0, r0, r1, asr r0
	...
	if ((p = apb (size)) != NULL)
    22cc:	52000100 	andpl	r0, r0, #0, 2
	...
		return (address)(p + 1);
    22d8:	00520001 	subseq	r0, r2, r1
	...
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e8:	01000000 	mrseq	r0, (UNDEF: 0)
    22ec:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	physinfo [phy] = info;
    22fc:	00010000 	andeq	r0, r1, r0
    2300:	00000050 	andeq	r0, r0, r0, asr r0
	...
		syserror (EMALLOC, "tcv29");
    2310:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    231c:	00030005 	andeq	r0, r3, r5
	...
    2328:	01000000 	mrseq	r0, (UNDEF: 0)
    232c:	00005000 	andeq	r5, r0, r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2330:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv30");
    2334:	00050000 	andeq	r0, r5, r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2338:	00000003 	andeq	r0, r0, r3
	...
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    234c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2358:	00500001 	subseq	r0, r0, r1
		if (plugins [plg] == NULL)
    235c:	00000000 	andeq	r0, r0, r0
    2360:	01000000 	mrseq	r0, (UNDEF: 0)
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2364:	00005000 	andeq	r5, r0, r0
}
    2368:	00000000 	andeq	r0, r0, r0
    236c:	00010000 	andeq	r0, r1, r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2370:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2380:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	len -= (ap.head + ap.tail);
    2394:	00500001 	subseq	r0, r0, r1
	...
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23a4:	01000000 	mrseq	r0, (UNDEF: 0)
    23a8:	00005000 	andeq	r5, r0, r0
	...
	return 1;
    23b8:	00010000 	andeq	r0, r1, r0
    23bc:	00000051 	andeq	r0, r0, r1, asr r0
    23c0:	00000000 	andeq	r0, r0, r0
    23c4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	verify_fph (phy, "tcv32");
    23d8:	00520001 	subseq	r0, r2, r1
	...
	b = q_first (oq);
    23e8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (q_end (b, oq)) {
    23ec:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		return NULL;
    23fc:	00010000 	andeq	r0, r1, r0
    2400:	00000054 	andeq	r0, r0, r4, asr r0
    2404:	00000000 	andeq	r0, r0, r0
    2408:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	verify_fph (phy, "tcv33");
    2414:	00540001 	subseq	r0, r4, r1
	...
	oq = oqueues [phy];
    2424:	01000000 	mrseq	r0, (UNDEF: 0)
	b = q_first (oq);
    2428:	00005000 	andeq	r5, r0, r0
		return NULL;
    242c:	00000000 	andeq	r0, r0, r0
	return (address)(b + 1);
    2430:	00010000 	andeq	r0, r1, r0
}
    2434:	00000050 	andeq	r0, r0, r0, asr r0
	...
	verify_plg (b, tcv_xmt, "tcv34");
    2444:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2450:	00560001 	subseq	r0, r6, r1
    2454:	00000000 	andeq	r0, r0, r0
    2458:	01000000 	mrseq	r0, (UNDEF: 0)
    245c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
}
    246c:	00010000 	andeq	r0, r1, r0
	dispose (b, plugins [b->attributes.b.plugin] ->
    2470:	00000052 	andeq	r0, r0, r2, asr r0
    2474:	00000000 	andeq	r0, r0, r0
    2478:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    pui32Src = &_etext;
    248c:	00540001 	subseq	r0, r4, r1
	...
    __asm("    ldr     r0, =_bss\n"
    249c:	01000000 	mrseq	r0, (UNDEF: 0)
    24a0:	00005000 	andeq	r5, r0, r0
	...
        *pui32Dest++ = *pui32Src++;
    24b0:	00010000 	andeq	r0, r1, r0
    24b4:	00000050 	andeq	r0, r0, r0, asr r0
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    24c8:	00500001 	subseq	r0, r0, r1
	...
static byte get_byte () {
    24d8:	01000000 	mrseq	r0, (UNDEF: 0)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    24dc:	00005100 	andeq	r5, r0, r0, lsl #2
    24e0:	00000000 	andeq	r0, r0, r0
		if (ee_inp)
    24e4:	00010000 	andeq	r0, r1, r0
			b |= 1;
    24e8:	00000056 	andeq	r0, r0, r6, asr r0
    24ec:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24f0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
}
    24fc:	00510001 	subseq	r0, r1, r1
	...
    250c:	01000000 	mrseq	r0, (UNDEF: 0)
    2510:	00005200 	andeq	r5, r0, r0, lsl #4
		if (b & 0x80)
    2514:	00000000 	andeq	r0, r0, r0
    2518:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    251c:	00000052 	andeq	r0, r0, r2, asr r0
	for (i = 0; i < 8; i++) {
    2520:	00000000 	andeq	r0, r0, r0
		b <<= 1;
    2524:	00254c00 	eoreq	r4, r5, r0, lsl #24
	for (i = 0; i < 8; i++) {
    2528:	00255c00 	eoreq	r5, r5, r0, lsl #24
}
    252c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2538:	0000254c 	andeq	r2, r0, ip, asr #10
	put_byte (cmd);
    253c:	0000255c 	andeq	r2, r0, ip, asr r5
    2540:	00510001 	subseq	r0, r1, r1
}
    2544:	00000000 	andeq	r0, r0, r0
    2548:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
static void wwait (word st, word del) {
    254c:	72000025 	andvc	r0, r0, #37	; 0x25
    2550:	01000025 	tsteq	r0, r5, lsr #32
    2554:	00005000 	andeq	r5, r0, r0
	while (dopen && (rdsr () & 1)) {
    2558:	00000000 	andeq	r0, r0, r0
    255c:	25340000 	ldrcs	r0, [r4, #-0]!
    2560:	253f0000 	ldrcs	r0, [pc, #-0]!	; 2568 <wwait+0x1c>
    2564:	00010000 	andeq	r0, r1, r0
	put_byte (CMD_RDSR);
    2568:	00000050 	andeq	r0, r0, r0, asr r0
	r = get_byte ();
    256c:	00000000 	andeq	r0, r0, r0
    2570:	00250400 	eoreq	r0, r5, r0, lsl #8
	while (dopen && (rdsr () & 1)) {
    2574:	00252000 	eoreq	r2, r5, r0
}
    2578:	50000100 	andpl	r0, r0, r0, lsl #2
		if (st == WNONE)
    257c:	00002528 	andeq	r2, r0, r8, lsr #10
    2580:	00002534 	andeq	r2, r0, r4, lsr r5
			mdelay (1);
    2584:	00500001 	subseq	r0, r0, r1
    2588:	00000000 	andeq	r0, r0, r0
			delay (del, st);
    258c:	e0000000 	and	r0, r0, r0
    2590:	e4000024 	str	r0, [r0], #-36	; 0xffffffdc
			release;
    2594:	01000024 	tsteq	r0, r4, lsr #32
    2598:	24e85000 	strbtcs	r5, [r8], #0
    259c:	25040000 	strcs	r0, [r4, #-0]
static void ready () {
    25a0:	00010000 	andeq	r0, r1, r0
	if (dopen) {
    25a4:	00000050 	andeq	r0, r0, r0, asr r0
		wwait (WNONE, 1);
    25a8:	00000000 	andeq	r0, r0, r0
    25ac:	00262c00 	eoreq	r2, r6, r0, lsl #24
    25b0:	00263200 	eoreq	r3, r6, r0, lsl #4
	dstat = 0;
    25b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    25c0:	0000262c 	andeq	r2, r0, ip, lsr #12
	udelay (1);
    25c4:	00002637 	andeq	r2, r0, r7, lsr r6
    25c8:	37510001 	ldrbcc	r0, [r1, -r1]
	udelay (1);
    25cc:	92000026 	andls	r0, r0, #38	; 0x26
		dopen = DOPEN_TEMP;
    25d0:	01000026 	tsteq	r0, r6, lsr #32
    25d4:	00005400 	andeq	r5, r0, r0, lsl #8
    25d8:	00000000 	andeq	r0, r0, r0
    25dc:	26380000 	ldrtcs	r0, [r8], -r0
static void cclose () {
    25e0:	263f0000 	ldrtcs	r0, [pc], -r0
	if (dopen == DOPEN_TEMP) {
    25e4:	00010000 	andeq	r0, r1, r0
    25e8:	00264450 	eoreq	r4, r6, r0, asr r4
		wwait (WNONE, 1);
    25ec:	00264a00 	eoreq	r4, r6, r0, lsl #20
    25f0:	50000100 	andpl	r0, r0, r0, lsl #2
	cmd_0 (CMD_DP);
    25f4:	00002650 	andeq	r2, r0, r0, asr r6
    25f8:	00002662 	andeq	r2, r0, r2, ror #12
		dopen = 0;
    25fc:	62550001 	subsvs	r0, r5, #1
}
    2600:	66000026 	strvs	r0, [r0], -r6, lsr #32
word ee_open () {
    2604:	01000026 	tsteq	r0, r6, lsr #32
	ready ();
    2608:	26665000 	strbtcs	r5, [r6], -r0
	dopen = DOPEN_PERM;
    260c:	26920000 	ldrcs	r0, [r2], r0
    2610:	00010000 	andeq	r0, r1, r0
}
    2614:	00000055 	andeq	r0, r0, r5, asr r0
	if (dopen) {
    2618:	00000000 	andeq	r0, r0, r0
    261c:	00265600 	eoreq	r5, r6, r0, lsl #12
		dopen = DOPEN_TEMP;
    2620:	00265a00 	eoreq	r5, r6, r0, lsl #20
		cclose ();
    2624:	50000100 	andpl	r0, r0, r0, lsl #2
}
    2628:	0000265a 	andeq	r2, r0, sl, asr r6
int ser_out (word st, const char *m) {
    262c:	00002662 	andeq	r2, r0, r2, ror #12
	if ((prcs = running (__outserial)) != 0) {
    2630:	68570001 	ldmdavs	r7, {r0}^
    2634:	71000026 	tstvc	r0, r6, lsr #32
    2638:	01000026 	tsteq	r0, r6, lsr #32
		join (prcs, st);
    263c:	26715000 	ldrbtcs	r5, [r1], -r0
		release;
    2640:	26840000 	strcs	r0, [r4], r0
	if (*m)
    2644:	00010000 	andeq	r0, r1, r0
		prcs = strlen (m) +1;
    2648:	00268457 	eoreq	r8, r6, r7, asr r4
    264c:	00268b00 	eoreq	r8, r6, r0, lsl #22
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2650:	50000100 	andpl	r0, r0, r0, lsl #2
    2654:	0000268b 	andeq	r2, r0, fp, lsl #13
    2658:	00002692 	muleq	r0, r2, r6
		umwait (st);
    265c:	00570001 	subseq	r0, r7, r1
    2660:	00000000 	andeq	r0, r0, r0
		prcs =  m [1] + 3;
    2664:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
	if (*m)
    2668:	a6000026 	strge	r0, [r0], -r6, lsr #32
		strcpy (buf, m);
    266c:	01000026 	tsteq	r0, r6, lsr #32
    2670:	27025000 	strcs	r5, [r2, -r0]
	if (runstrand (__outserial, buf) == 0) {
    2674:	27100000 	ldrcs	r0, [r0, -r0]
    2678:	00010000 	andeq	r0, r1, r0
		ufree (buf);
    267c:	00000050 	andeq	r0, r0, r0, asr r0
    2680:	00000000 	andeq	r0, r0, r0
		memcpy (buf, m, prcs);
    2684:	00269800 	eoreq	r9, r6, r0, lsl #16
    2688:	0026ad00 	eoreq	sl, r6, r0, lsl #26
    268c:	51000100 	mrspl	r0, (UNDEF: 16)
}
    2690:	000026ad 	andeq	r2, r0, sp, lsr #13
    2694:	000026cc 	andeq	r2, r0, ip, asr #13
int ser_in (word st, char *buf, int len) {
    2698:	cc570001 	mrrcgt	0, 0, r0, r7, cr1
    269c:	d4000026 	strle	r0, [r0], #-38	; 0xffffffda
	if (len == 0)
    26a0:	01000026 	tsteq	r0, r6, lsr #32
	if (__inpline == NULL) {
    26a4:	26d45100 	ldrbcs	r5, [r4], r0, lsl #2
		if ((prcs = running (__inserial)) == 0) {
    26a8:	26fa0000 	ldrbtcs	r0, [sl], r0
    26ac:	00010000 	andeq	r0, r1, r0
			prcs = runthread (__inserial);
    26b0:	0026fa57 	eoreq	pc, r6, r7, asr sl	; <UNPREDICTABLE>
    26b4:	0026fd00 	eoreq	pc, r6, r0, lsl #26
			if (prcs == 0) {
    26b8:	51000100 	mrspl	r0, (UNDEF: 16)
				npwait (st);
    26bc:	000026fd 	strdeq	r2, [r0], -sp
		release;
    26c0:	00002702 	andeq	r2, r0, r2, lsl #14
		join (prcs, st);
    26c4:	02570001 	subseq	r0, r7, #1
    26c8:	10000027 	andne	r0, r0, r7, lsr #32
	if (*__inpline == NULL) // bin cmd
    26cc:	01000027 	tsteq	r0, r7, lsr #32
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    26d0:	00005100 	andeq	r5, r0, r0, lsl #2
	if (prcs >= len)
    26d4:	00000000 	andeq	r0, r0, r0
		prcs = len-1;
    26d8:	26980000 	ldrcs	r0, [r8], r0
	memcpy (buf, __inpline, prcs);
    26dc:	26ad0000 	strtcs	r0, [sp], r0
    26e0:	00010000 	andeq	r0, r1, r0
    26e4:	0026ad52 	eoreq	sl, r6, r2, asr sp
	ufree (__inpline);
    26e8:	0026cc00 	eoreq	ip, r6, r0, lsl #24
	__inpline = NULL;
    26ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	if (*buf) // if it's NULL, it's a bin cmd
    26f0:	000026cc 	andeq	r2, r0, ip, asr #13
		buf [prcs] = '\0';
    26f4:	000026d4 	ldrdeq	r2, [r0], -r4
}
    26f8:	d4520001 	ldrble	r0, [r2], #-1
		prcs = strlen (__inpline);
    26fc:	fa000026 	blx	279c <ser_inf+0x38>
    2700:	01000026 	tsteq	r0, r6, lsr #32
		return 0;
    2704:	26fa5500 	ldrbtcs	r5, [sl], r0, lsl #10
    2708:	26fd0000 	ldrbtcs	r0, [sp], r0
    270c:	00010000 	andeq	r0, r1, r0
int ser_outf (word st, const char *m, ...) {
    2710:	0026fd52 	eoreq	pc, r6, r2, asr sp	; <UNPREDICTABLE>
    2714:	00270200 	eoreq	r0, r7, r0, lsl #4
	if ((prcs = running (__outserial)) != 0) {
    2718:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    271c:	00002702 	andeq	r2, r0, r2, lsl #14
		join (prcs, st);
    2720:	00002710 	andeq	r2, r0, r0, lsl r7
    2724:	00520001 	subseq	r0, r2, r1
		release;
    2728:	00000000 	andeq	r0, r0, r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    272c:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    2730:	b4000026 	strlt	r0, [r0], #-38	; 0xffffffda
    2734:	01000026 	tsteq	r0, r6, lsr #32
		umwait (st);
    2738:	26b45000 	ldrtcs	r5, [r4], r0
    273c:	26b70000 	ldrtcs	r0, [r7], r0
	if (runstrand (__outserial, buf) == 0) {
    2740:	00010000 	andeq	r0, r1, r0
    2744:	0026b851 	eoreq	fp, r6, r1, asr r8
    2748:	0026bc00 	eoreq	fp, r6, r0, lsl #24
		ufree (buf);
    274c:	50000100 	andpl	r0, r0, r0, lsl #2
		npwait (st);
    2750:	000026c4 	andeq	r2, r0, r4, asr #13
}
    2754:	000026c9 	andeq	r2, r0, r9, asr #13
    2758:	d4500001 	ldrble	r0, [r0], #-1
    275c:	f6000026 			; <UNDEFINED> instruction: 0xf6000026
    2760:	01000026 	tsteq	r0, r6, lsr #32
int ser_inf (word st, const char *fmt, ...) {
    2764:	27005400 	strcs	r5, [r0, -r0, lsl #8]
    2768:	27020000 	strcs	r0, [r2, -r0]
	if (fmt == NULL)
    276c:	00010000 	andeq	r0, r1, r0
	if (__inpline == NULL) {
    2770:	00000050 	andeq	r0, r0, r0, asr r0
		if ((prcs = running (__inserial)) == 0) {
    2774:	00000000 	andeq	r0, r0, r0
    2778:	00271000 	eoreq	r1, r7, r0
			prcs = runthread (__inserial);
    277c:	00271800 	eoreq	r1, r7, r0, lsl #16
    2780:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		release;
    278c:	0000271c 	andeq	r2, r0, ip, lsl r7
		join (prcs, st);
    2790:	00002725 	andeq	r2, r0, r5, lsr #14
    2794:	25500001 	ldrbcs	r0, [r0, #-1]
	va_start (ap, fmt);
    2798:	2a000027 	bcs	283c <option+0x58>
	prcs = vscan (__inpline, fmt, ap);
    279c:	01000027 	tsteq	r0, r7, lsr #32
    27a0:	272a5600 	strcs	r5, [sl, -r0, lsl #12]!
	ufree (__inpline);
    27a4:	27330000 	ldrcs	r0, [r3, -r0]!
	__inpline = NULL;
    27a8:	00010000 	andeq	r0, r1, r0
}
    27ac:	00273350 	eoreq	r3, r7, r0, asr r3
    27b0:	00275a00 	eoreq	r5, r7, r0, lsl #20
    27b4:	56000100 	strpl	r0, [r0], -r0, lsl #2
		return 0;
    27b8:	0000275a 	andeq	r2, r0, sl, asr r7
    27bc:	00002764 	andeq	r2, r0, r4, ror #14
    27c0:	00500001 	subseq	r0, r0, r1
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27c4:	00000000 	andeq	r0, r0, r0
    27c8:	34000000 	strcc	r0, [r0], #-0
    27cc:	38000027 	stmdacc	r0, {r0, r1, r2, r5}
	RF_cmdFs.frequency = 
    27d0:	01000027 	tsteq	r0, r7, lsr #32
}
    27d4:	27385000 	ldrcs	r5, [r8, -r0]!
    27d8:	27400000 	strbcs	r0, [r0, -r0]
    27dc:	00010000 	andeq	r0, r1, r0
    27e0:	00274055 	eoreq	r4, r7, r5, asr r0
static int option (int opt, address val) {
    27e4:	00274400 	eoreq	r4, r7, r0, lsl #8
    27e8:	50000100 	andpl	r0, r0, r0, lsl #2
    27ec:	00002744 	andeq	r2, r0, r4, asr #14
    27f0:	0000275a 	andeq	r2, r0, sl, asr r7
    27f4:	00550001 	subseq	r0, r5, r1
    27f8:	00000000 	andeq	r0, r0, r0
    27fc:	64000000 	strvs	r0, [r0], #-0
    2800:	72000027 	andvc	r0, r0, #39	; 0x27
    2804:	01000027 	tsteq	r0, r7, lsr #32
    2808:	27b85000 	ldrcs	r5, [r8, r0]!
    280c:	27c40000 	strbcs	r0, [r4, r0]
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2810:	00010000 	andeq	r0, r1, r0
    2814:	00000050 	andeq	r0, r0, r0, asr r0
			goto RVal;
    2818:	00000000 	andeq	r0, r0, r0
			_BIS (dstate, DSTATE_RXON);
    281c:	00277a00 	eoreq	r7, r7, r0, lsl #20
    2820:	00278000 	eoreq	r8, r7, r0
	int ret = 0;
    2824:	50000100 	andpl	r0, r0, r0, lsl #2
			p_trigger (drvprcs, qevent);
    2828:	00002780 	andeq	r2, r0, r0, lsl #15
    282c:	00002783 	andeq	r2, r0, r3, lsl #15
    2830:	84510001 	ldrbhi	r0, [r1], #-1
    2834:	88000027 	stmdahi	r0, {r0, r1, r2, r5}
    2838:	01000027 	tsteq	r0, r7, lsr #32
    283c:	27905000 	ldrcs	r5, [r0, r0]
    2840:	27950000 	ldrcs	r0, [r5, r0]
    2844:	00010000 	andeq	r0, r1, r0
    2848:	0027a250 	eoreq	sl, r7, r0, asr r2
    284c:	0027a400 	eoreq	sl, r7, r0, lsl #8
}
    2850:	50000100 	andpl	r0, r0, r0, lsl #2
			_BIC (dstate, DSTATE_RXON);
    2854:	000027a4 	andeq	r2, r0, r4, lsr #15
    2858:	000027ac 	andeq	r2, r0, ip, lsr #15
			statid = (val == NULL) ? 0 : *val;
    285c:	00540001 	subseq	r0, r4, r1
    2860:	00000000 	andeq	r0, r0, r0
	int ret = 0;
    2864:	24000000 	strcs	r0, [r0], #-0
			ret = (int) statid;
    2868:	3200002f 	andcc	r0, r0, #47	; 0x2f
	if (val != NULL)
    286c:	0100002f 	tsteq	r0, pc, lsr #32
		*val = ret;
    2870:	2f325000 	svccs	0x00325000
			ret = rbuffl + 2;
    2874:	2f380000 	svccs	0x00380000
    2878:	00010000 	andeq	r0, r1, r0
			if (val != NULL) {
    287c:	002f3856 	eoreq	r3, pc, r6, asr r8	; <UNPREDICTABLE>
				memcpy (val, &rxstat,
    2880:	002f4200 	eoreq	r4, pc, r0, lsl #4
    2884:	50000100 	andpl	r0, r0, r0, lsl #2
				memset (&rxstat, 0, 
    2888:	00002f42 	andeq	r2, r0, r2, asr #30
    288c:	00002f46 	andeq	r2, r0, r6, asr #30
			if (val == NULL)
    2890:	46560001 	ldrbmi	r0, [r6], -r1
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2894:	5600002f 	strpl	r0, [r0], -pc, lsr #32
    2898:	0100002f 	tsteq	r0, pc, lsr #32
				utimer_set (bckf_timer, *val);
    289c:	2f565000 	svccs	0x00565000
    28a0:	304e0000 	subcc	r0, lr, r0
    28a4:	00010000 	andeq	r0, r1, r0
			for (ret = 0; ret < 8; ret++)
    28a8:	00000056 	andeq	r0, r0, r6, asr r0
				if (RF_cmdPropRadioDivSetup.txPower
    28ac:	00000000 	andeq	r0, r0, r0
					== patable [ret])
    28b0:	002f2400 	eoreq	r2, pc, r0, lsl #8
				if (RF_cmdPropRadioDivSetup.txPower
    28b4:	002f3400 	eoreq	r3, pc, r0, lsl #8
			for (ret = 0; ret < 8; ret++)
    28b8:	51000100 	mrspl	r0, (UNDEF: 16)
    28bc:	00002f38 	andeq	r2, r0, r8, lsr pc
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28c0:	00002f44 	andeq	r2, r0, r4, asr #30
    28c4:	46510001 	ldrbmi	r0, [r1], -r1
    28c8:	5600002f 	strpl	r0, [r0], -pc, lsr #32
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    28cc:	0100002f 	tsteq	r0, pc, lsr #32
    28d0:	00005100 	andeq	r5, r0, r0, lsl #2
			_BIS (dstate, DSTATE_IRST);
    28d4:	00000000 	andeq	r0, r0, r0
    28d8:	2f8c0000 	svccs	0x008c0000
    28dc:	2fa00000 	svccs	0x00a00000
			ret = (int) channel;
    28e0:	00010000 	andeq	r0, r1, r0
			goto RVal;
    28e4:	002fa055 	eoreq	sl, pc, r5, asr r0	; <UNPREDICTABLE>
				(*val > 7) ? 7 : *val;
    28e8:	002fa600 	eoreq	sl, pc, r0, lsl #12
    28ec:	70000200 	andvc	r0, r0, r0, lsl #4
	...
			plugch ();
    28f8:	002f5600 	eoreq	r5, pc, r0, lsl #12
			_BIS (dstate, DSTATE_IRST);
    28fc:	002f5f00 	eoreq	r5, pc, r0, lsl #30
    2900:	53000100 	movwpl	r0, #256	; 0x100
			ret = (int) vrate;
    2904:	00002f5f 	andeq	r2, r0, pc, asr pc
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2908:	00002fc2 	andeq	r2, r0, r2, asr #31
    290c:	f45b0001 			; <UNDEFINED> instruction: 0xf45b0001
    2910:	f800002f 			; <UNDEFINED> instruction: 0xf800002f
    2914:	0100002f 	tsteq	r0, pc, lsr #32
    2918:	00005b00 	andeq	r5, r0, r0, lsl #22
    291c:	00000000 	andeq	r0, r0, r0
    2920:	2f600000 	svccs	0x00600000
    2924:	2f640000 	svccs	0x00640000
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2928:	00010000 	andeq	r0, r1, r0
    292c:	002f6a50 	eoreq	r6, pc, r0, asr sl	; <UNPREDICTABLE>
    2930:	002f9000 	eoreq	r9, pc, r0
    2934:	50000100 	andpl	r0, r0, r0, lsl #2
			syserror (EREQPAR, "cc13 op");
    2938:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    293c:	00002f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    2940:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
    2944:	f800002f 			; <UNDEFINED> instruction: 0xf800002f
    2948:	0100002f 	tsteq	r0, pc, lsr #32
    294c:	00005000 	andeq	r5, r0, r0
    2950:	00000000 	andeq	r0, r0, r0
    2954:	27e40000 	strbcs	r0, [r4, r0]!
    2958:	28120000 	ldmdacs	r2, {}	; <UNPREDICTABLE>
    295c:	00010000 	andeq	r0, r1, r0
    2960:	00281a50 	eoreq	r1, r8, r0, asr sl
    2964:	00282400 	eoreq	r2, r8, r0, lsl #8
    2968:	50000100 	andpl	r0, r0, r0, lsl #2
    296c:	00002852 	andeq	r2, r0, r2, asr r8
    2970:	00002864 	andeq	r2, r0, r4, ror #16
static void issue_cmd (lword cmd) {
    2974:	68500001 	ldmdavs	r0, {r0}^
    2978:	6c000028 	stcvs	0, cr0, [r0], {40}	; 0x28
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    297c:	01000028 	tsteq	r0, r8, lsr #32
    2980:	28745000 	ldmdacs	r4!, {ip, lr}^
    2984:	28780000 	ldmdacs	r8!, {}^	; <UNPREDICTABLE>
		if (res != 0x86)
    2988:	00010000 	andeq	r0, r1, r0
			syserror (EHARDWARE, "hang ic0");
    298c:	00287a50 	eoreq	r7, r8, r0, asr sl
    2990:	00288000 	eoreq	r8, r8, r0
		if (cnt-- == 0) {
    2994:	50000100 	andpl	r0, r0, r0, lsl #2
			diag ("HUP %lx %lx", cmd, res);
    2998:	00002888 	andeq	r2, r0, r8, lsl #17
    299c:	0000288a 	andeq	r2, r0, sl, lsl #17
			syserror (EHARDWARE, "hang ic0");
    29a0:	90500001 	subsls	r0, r0, r1
		udelay (1);
    29a4:	95000028 	strls	r0, [r0, #-40]	; 0xffffffd8
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29a8:	01000028 	tsteq	r0, r8, lsr #32
}
    29ac:	28a45000 	stmiacs	r4!, {ip, lr}
    29b0:	28aa0000 	stmiacs	sl!, {}	; <UNPREDICTABLE>
    29b4:	00010000 	andeq	r0, r1, r0
    29b8:	0028c050 	eoreq	ip, r8, r0, asr r0
static void rx_de () {
    29bc:	0028c400 	eoreq	ip, r8, r0, lsl #8
	if ((dstate & DSTATE_RXAC) == 0)
    29c0:	50000100 	andpl	r0, r0, r0, lsl #2
    29c4:	000028e0 	andeq	r2, r0, r0, ror #17
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29c8:	000028e4 	andeq	r2, r0, r4, ror #17
	_BIC (dstate, DSTATE_RXAC);
    29cc:	e6500001 	ldrb	r0, [r0], -r1
    29d0:	38000028 	stmdacc	r0, {r3, r5}
}
    29d4:	01000029 	tsteq	r0, r9, lsr #32
    29d8:	00005000 	andeq	r5, r0, r0
    29dc:	00000000 	andeq	r0, r0, r0
static void rf_off () {
    29e0:	27e40000 	strbcs	r0, [r4, r0]!
	if ((dstate & DSTATE_RFON) == 0)
    29e4:	28240000 	stmdacs	r4!, {}	; <UNPREDICTABLE>
    29e8:	00010000 	andeq	r0, r1, r0
	IntDisable (INT_RFC_CPE_0);
    29ec:	00285251 	eoreq	r5, r8, r1, asr r2
    29f0:	00286400 	eoreq	r6, r8, r0, lsl #8
    29f4:	51000100 	mrspl	r0, (UNDEF: 16)
	RFCAdi3VcoLdoVoltageMode (false);
    29f8:	00002868 	andeq	r2, r0, r8, ror #16
	RFCSynthPowerDown ();
    29fc:	0000286c 	andeq	r2, r0, ip, ror #16
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a00:	6c510001 	mrrcvs	0, 0, r0, r1, cr1
    2a04:	74000028 	strvc	r0, [r0], #-40	; 0xffffffd8
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a08:	01000028 	tsteq	r0, r8, lsr #32
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a0c:	28745400 	ldmdacs	r4!, {sl, ip, lr}^
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a10:	28820000 	stmcs	r2, {}	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a14:	00010000 	andeq	r0, r1, r0
    2a18:	00288251 	eoreq	r8, r8, r1, asr r2
    2a1c:	00288800 	eoreq	r8, r8, r0, lsl #16
	_BIC (dstate, DSTATE_RFON);
    2a20:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2a24:	00002888 	andeq	r2, r0, r8, lsl #17
}
    2a28:	0000288d 	andeq	r2, r0, sp, lsl #17
    2a2c:	8d510001 	ldclhi	0, cr0, [r1, #-4]
    2a30:	90000028 	andls	r0, r0, r8, lsr #32
    2a34:	01000028 	tsteq	r0, r8, lsr #32
    2a38:	28905400 	ldmcs	r0, {sl, ip, lr}
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a3c:	28950000 	ldmcs	r5, {}	; <UNPREDICTABLE>
    2a40:	00010000 	andeq	r0, r1, r0
    2a44:	00289551 	eoreq	r9, r8, r1, asr r5
		if (cmd->status == tstat)
    2a48:	0028a400 	eoreq	sl, r8, r0, lsl #8
		if (timeout-- == 0) {
    2a4c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a50:	000028a4 	andeq	r2, r0, r4, lsr #17
    2a54:	000028a6 	andeq	r2, r0, r6, lsr #17
    2a58:	a6510001 	ldrbge	r0, [r1], -r1
			syserror (EHARDWARE, "rt2");
    2a5c:	a8000028 	stmdage	r0, {r3, r5}
    2a60:	01000028 	tsteq	r0, r8, lsr #32
		udelay (1);
    2a64:	28a85400 	stmiacs	r8!, {sl, ip, lr}
		if (cmd->status == tstat)
    2a68:	28b00000 	ldmcs	r0!, {}	; <UNPREDICTABLE>
}
    2a6c:	00010000 	andeq	r0, r1, r0
    2a70:	0028b051 	eoreq	fp, r8, r1, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a74:	0028c000 	eoreq	ip, r8, r0
    2a78:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
static void rf_on () {
    2a7c:	000028c0 	andeq	r2, r0, r0, asr #17
    2a80:	0000293a 	andeq	r2, r0, sl, lsr r9
	OSCHF_TurnOnXosc();
    2a84:	3a510001 	bcc	1442a90 <__ccfg+0x1422ae8>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a88:	74000029 	strvc	r0, [r0], #-41	; 0xffffffd7
    2a8c:	01000029 	tsteq	r0, r9, lsr #32
    2a90:	00005400 	andeq	r5, r0, r0, lsl #8
    2a94:	00000000 	andeq	r0, r0, r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a98:	28180000 	ldmdacs	r8, {}	; <UNPREDICTABLE>
    2a9c:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2aa0:	00010000 	andeq	r0, r1, r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2aa4:	00282650 	eoreq	r2, r8, r0, asr r6
	issue_cmd (
    2aa8:	00285000 	eoreq	r5, r8, r0
    2aac:	50000100 	andpl	r0, r0, r0, lsl #2
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ab0:	0000286c 	andeq	r2, r0, ip, ror #16
    2ab4:	00002874 	andeq	r2, r0, r4, ror r8
    2ab8:	b0500001 	subslt	r0, r0, r1
   pPatchTab[80] = 0;
    2abc:	c0000028 	andgt	r0, r0, r8, lsr #32
   } while (--nIterations);
    2ac0:	01000028 	tsteq	r0, r8, lsr #32
   pPatchTab[53] = 2;
    2ac4:	28ca5000 	stmiacs	sl, {ip, lr}^
    2ac8:	28e00000 	stmiacs	r0!, {}^	; <UNPREDICTABLE>
   pPatchTab[55] = 3;
    2acc:	00010000 	andeq	r0, r1, r0
   pPatchTab[110] = 4;
    2ad0:	0028e450 	eoreq	lr, r8, r0, asr r4
   pPatchTab[107] = 5;
    2ad4:	0028e600 	eoreq	lr, r8, r0, lsl #12
   pPatchTab[65] = 6;
    2ad8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
   pIrqPatch[1] = _IRQ_PATCH_0;
    2ae4:	0000283a 	andeq	r2, r0, sl, lsr r8
   const uint32_t *pS = patchGenfskRfe;
    2ae8:	00002844 	andeq	r2, r0, r4, asr #16
      t2 = *pS++;
    2aec:	00530001 	subseq	r0, r3, r1
      t4 = *pS++;
    2af0:	00000000 	andeq	r0, r0, r0
      t6 = *pS++;
    2af4:	c4000000 	strgt	r0, [r0], #-0
      t8 = *pS++;
    2af8:	d800002c 	stmdale	r0, {r2, r3, r5}
      *pD++ = t1;
    2afc:	0100002c 	tsteq	r0, ip, lsr #32
      *pD++ = t2;
    2b00:	2e4c5000 	cdpcs	0, 4, cr5, cr12, cr0, {0}
      *pD++ = t3;
    2b04:	2e640000 	cdpcs	0, 6, cr0, cr4, cr0, {0}
      *pD++ = t5;
    2b08:	00010000 	andeq	r0, r1, r0
      *pD++ = t7;
    2b0c:	002e7450 	eoreq	r7, lr, r0, asr r4
   } while (--nIterations);
    2b10:	002e7b00 	eoreq	r7, lr, r0, lsl #22
    2b14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b20:	00002d44 	andeq	r2, r0, r4, asr #26
   *pD++ = t2;
    2b24:	00002d4c 	andeq	r2, r0, ip, asr #26
   *pD++ = t3;
    2b28:	4c520001 	mrrcmi	0, 0, r0, r2, cr1
   *pD++ = t4;
    2b2c:	4f00002d 	svcmi	0x0000002d
   *pD++ = t5;
    2b30:	0200002d 	andeq	r0, r0, #45	; 0x2d
    2b34:	00007200 	andeq	r7, r0, r0, lsl #4
	RFCAdi3VcoLdoVoltageMode (true);
    2b38:	00000000 	andeq	r0, r0, r0
    2b3c:	ea000000 	b	2b44 <rf_on.part.0+0xd0>
       	RFCRfTrimSet (&rfTrim);
    2b40:	f400002e 	vst4.8	{d0-d3}, [r0 :128], lr
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b44:	0100002e 	tsteq	r0, lr, lsr #32
    2b48:	00005300 	andeq	r5, r0, r0, lsl #6
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b4c:	00000000 	andeq	r0, r0, r0
    2b50:	2c320000 	ldccs	0, cr0, [r2], #-0
	issue_cmd ((lword)&cmd_srt);
    2b54:	2c760000 	ldclcs	0, cr0, [r6], #-0
    2b58:	00010000 	andeq	r0, r1, r0
	issue_cmd ((lword)&RF_cmdFs);
    2b5c:	002c7654 	eoreq	r7, ip, r4, asr r6
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b60:	002c7e00 	eoreq	r7, ip, r0, lsl #28
    2b64:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    2b68:	002c7e00 	eoreq	r7, ip, r0, lsl #28
	IntEnable (INT_RFC_CPE_0);
    2b6c:	002c8800 	eoreq	r8, ip, r0, lsl #16
	_BIC (dstate, DSTATE_IRST);
    2b70:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2b74:	00002c88 	andeq	r2, r0, r8, lsl #25
    2b78:	00002c8d 	andeq	r2, r0, sp, lsl #25
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b7c:	00740002 	rsbseq	r0, r4, r2
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b80:	00002c9e 	muleq	r0, lr, ip
	IntEnable (INT_RFC_CPE_0);
    2b84:	00002ca2 	andeq	r2, r0, r2, lsr #25
    2b88:	00740002 	rsbseq	r0, r4, r2
	...
    2b94:	00002c5a 	andeq	r2, r0, sl, asr ip
    2b98:	00002c71 	andeq	r2, r0, r1, ror ip
    2b9c:	00520001 	subseq	r0, r2, r1
    2ba0:	00000000 	andeq	r0, r0, r0
    2ba4:	32000000 	andcc	r0, r0, #0
    2ba8:	9200002c 	andls	r0, r0, #44	; 0x2c
    2bac:	0100002c 	tsteq	r0, ip, lsr #32
    2bb0:	2c9e5500 	cfldr32cs	mvfx5, [lr], {0}
    2bb4:	2ca20000 	stccs	0, cr0, [r2]
    2bb8:	00010000 	andeq	r0, r1, r0
    2bbc:	00000055 	andeq	r0, r0, r5, asr r0
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	00297400 	eoreq	r7, r9, r0, lsl #8
    2bc8:	00297a00 	eoreq	r7, r9, r0, lsl #20
    2bcc:	50000100 	andpl	r0, r0, r0, lsl #2
    2bd0:	0000297a 	andeq	r2, r0, sl, ror r9
    2bd4:	000029ac 	andeq	r2, r0, ip, lsr #19
    2bd8:	00540001 	subseq	r0, r4, r1
    2bdc:	00000000 	andeq	r0, r0, r0
    2be0:	82000000 	andhi	r0, r0, #0
    2be4:	8c000029 	stchi	0, cr0, [r0], {41}	; 0x29
    2be8:	01000029 	tsteq	r0, r9, lsr #32
    2bec:	29925200 	ldmibcs	r2, {r9, ip, lr}
    2bf0:	299d0000 	ldmibcs	sp, {}	; <UNPREDICTABLE>
static void rx_int_enable () {
    2bf4:	00010000 	andeq	r0, r1, r0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2bf8:	0029a252 	eoreq	sl, r9, r2, asr r2
    2bfc:	0029a700 	eoreq	sl, r9, r0, lsl #14
    2c00:	52000100 	andpl	r0, r0, #0, 2
    2c04:	000029aa 	andeq	r2, r0, sl, lsr #19
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c08:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c0c:	00520001 	subseq	r0, r2, r1
    2c10:	00000000 	andeq	r0, r0, r0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c14:	8a000000 	bhi	2c1c <rx_int_enable+0x28>
    2c18:	8c000029 	stchi	0, cr0, [r0], {41}	; 0x29
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c1c:	01000029 	tsteq	r0, r9, lsr #32
    2c20:	00005400 	andeq	r5, r0, r0, lsl #8
    2c24:	00000000 	andeq	r0, r0, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c28:	2a3c0000 	bcs	f02c30 <__ccfg+0xee2c88>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c2c:	2a460000 	bcs	1182c34 <__ccfg+0x1162c8c>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c30:	00010000 	andeq	r0, r1, r0
		if (db->status == DATA_ENTRY_FINISHED) {
    2c34:	002a4650 	eoreq	r4, sl, r0, asr r6
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c38:	002a6c00 	eoreq	r6, sl, r0, lsl #24
    2c3c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2c48:	00002a3c 	andeq	r2, r0, ip, lsr sl
    2c4c:	00002a46 	andeq	r2, r0, r6, asr #20
    2c50:	46510001 	ldrbmi	r0, [r1], -r1
				__dp [pl + 1] = __dp [pl] - 128;
    2c54:	6c00002a 	stcvs	0, cr0, [r0], {42}	; 0x2a
				pl = __dp [1] + 2;
    2c58:	0100002a 	tsteq	r0, sl, lsr #32
				__dp [pl + 1] = __dp [pl] - 128;
    2c5c:	00005500 	andeq	r5, r0, r0, lsl #10
    2c60:	00000000 	andeq	r0, r0, r0
				__dp [pl] = 0;
    2c64:	2b160000 	blcs	582c6c <__ccfg+0x562cc4>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c68:	2b1e0000 	blcs	782c70 <__ccfg+0x762cc8>
    2c6c:	00010000 	andeq	r0, r1, r0
    2c70:	00000052 	andeq	r0, r0, r2, asr r0
			db->status = DATA_ENTRY_PENDING;
    2c74:	00000000 	andeq	r0, r0, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c78:	002aea00 	eoreq	lr, sl, r0, lsl #20
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c7c:	002b1600 	eoreq	r1, fp, r0, lsl #12
				diag ("BAD RX");
    2c80:	53000100 	movwpl	r0, #256	; 0x100
    2c84:	00002b1a 	andeq	r2, r0, sl, lsl fp
	if (nr) {
    2c88:	00002b1e 	andeq	r2, r0, lr, lsl fp
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c8c:	00530001 	subseq	r0, r3, r1
}
    2c90:	00000000 	andeq	r0, r0, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c94:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    2c98:	1e00002a 	cdpne	0, 0, cr0, cr0, cr10, {1}
    2c9c:	0100002b 	tsteq	r0, fp, lsr #32
}
    2ca0:	00005e00 	andeq	r5, r0, r0, lsl #28
    2ca4:	00000000 	andeq	r0, r0, r0
    2ca8:	2af40000 	bcs	ffd02cb0 <_estack+0xdfcfdcb0>
    2cac:	2b1e0000 	blcs	782cb4 <__ccfg+0x762d0c>
    2cb0:	00010000 	andeq	r0, r1, r0
    2cb4:	00000057 	andeq	r0, r0, r7, asr r0
    2cb8:	00000000 	andeq	r0, r0, r0
    2cbc:	002af800 	eoreq	pc, sl, r0, lsl #16
    2cc0:	002b3400 	eoreq	r3, fp, r0, lsl #8
thread (cc1350_driver)
    2cc4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2cd0:	00002af8 	strdeq	r2, [r0], -r8
    2cd4:	00002b10 	andeq	r2, r0, r0, lsl fp
		if (dstate & DSTATE_IRST) {
    2cd8:	10500001 	subsne	r0, r0, r1
    2cdc:	1a00002b 	bne	2d90 <cc1350_driver+0xcc>
    2ce0:	0200002b 	andeq	r0, r0, #43	; 0x2b
			rf_off ();
    2ce4:	1a187300 	bne	61f8ec <__ccfg+0x5ff944>
			_BIC (dstate,
    2ce8:	1c00002b 	stcne	0, cr0, [r0], {43}	; 0x2b
    2cec:	0200002b 	andeq	r0, r0, #43	; 0x2b
		if (dstate & DSTATE_RXAC) {
    2cf0:	00187000 	andseq	r7, r8, r0
    2cf4:	00000000 	andeq	r0, r0, r0
			if ((dstate & DSTATE_RXON) == 0)
    2cf8:	16000000 	strne	r0, [r0], -r0
				rx_de ();
    2cfc:	3400002b 	strcc	r0, [r0], #-43	; 0xffffffd5
		if (paylen == 0) {
    2d00:	0100002b 	tsteq	r0, fp, lsr #32
    2d04:	00005400 	andeq	r5, r0, r0, lsl #8
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d08:	00000000 	andeq	r0, r0, r0
    2d0c:	30ec0000 	rsccc	r0, ip, r0
    2d10:	30ee0000 	rsccc	r0, lr, r0
    2d14:	00010000 	andeq	r0, r1, r0
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d18:	00000050 	andeq	r0, r0, r0, asr r0
    2d1c:	00000000 	andeq	r0, r0, r0
    2d20:	0030e800 	eorseq	lr, r0, r0, lsl #16
    2d24:	0030ea00 	eorseq	lr, r0, r0, lsl #20
    2d28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2d34:	000030e0 	andeq	r3, r0, r0, ror #1
		} else if (dstate & DSTATE_RXON) {
    2d38:	000030e2 	andeq	r3, r0, r2, ror #1
	if (dstate & DSTATE_RFON)
    2d3c:	00500001 	subseq	r0, r0, r1
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d40:	00000000 	andeq	r0, r0, r0
		re->status = DATA_ENTRY_PENDING;
    2d44:	bc000000 	stclt	0, cr0, [r0], {-0}
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d48:	c6000030 			; <UNDEFINED> instruction: 0xc6000030
	issue_cmd ((lword)&RF_cmdPropRx);
    2d4c:	01000030 	tsteq	r0, r0, lsr r0
	_BIS (dstate, DSTATE_RXAC);
    2d50:	30c85000 	sbccc	r5, r8, r0
    2d54:	30d60000 	sbcscc	r0, r6, r0
    2d58:	00010000 	andeq	r0, r1, r0
    2d5c:	00000050 	andeq	r0, r0, r0, asr r0
	if (dstate & DSTATE_RXAC)
    2d60:	00000000 	andeq	r0, r0, r0
    2d64:	0030bc00 	eorseq	fp, r0, r0, lsl #24
				if (statid != 0xffff)
    2d68:	0030be00 	eorseq	fp, r0, r0, lsl #28
    2d6c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (paylen == 0) {
    2d78:	000030bc 	strheq	r3, [r0], -ip
			wait (qevent, DR_LOOP);
    2d7c:	000030c0 	andeq	r3, r0, r0, asr #1
    2d80:	00520001 	subseq	r0, r2, r1
			if (dstate & DSTATE_RXAC) {
    2d84:	00000000 	andeq	r0, r0, r0
    2d88:	bc000000 	stclt	0, cr0, [r0], {-0}
				rx_int_enable ();
    2d8c:	d4000030 	strle	r0, [r0], #-48	; 0xffffffd0
			release;
    2d90:	01000030 	tsteq	r0, r0, lsr r0
			} else if (dstate & DSTATE_RFON) {
    2d94:	00005300 	andeq	r5, r0, r0, lsl #6
				delay (offdelay, DR_GOOF);
    2d98:	00000000 	andeq	r0, r0, r0
    2d9c:	30980000 	addscc	r0, r8, r0
    2da0:	30a40000 	adccc	r0, r4, r0
		if (bckf_timer) {
    2da4:	00010000 	andeq	r0, r1, r0
			wait (qevent, DR_LOOP);
    2da8:	0030a450 	eorseq	sl, r0, r0, asr r4
    2dac:	0030bc00 	eorseq	fp, r0, r0, lsl #24
    2db0:	53000100 	movwpl	r0, #256	; 0x100
	...
			if (dstate & DSTATE_RXAC)
    2dbc:	000030f0 	strdeq	r3, [r0], -r0
    2dc0:	000030fe 	strdeq	r3, [r0], -lr
	if (dstate & DSTATE_RFON)
    2dc4:	fe500001 	cdp2	0, 5, cr0, cr0, cr1, {0}
    2dc8:	38000030 	stmdacc	r0, {r4, r5}
		rx_de ();
    2dcc:	01000031 	tsteq	r0, r1, lsr r0
		RF_cmdPropTx . status = 0;
    2dd0:	00005500 	andeq	r5, r0, r0, lsl #10
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2dd4:	00000000 	andeq	r0, r0, r0
    2dd8:	30f00000 	rscscc	r0, r0, r0
    2ddc:	31010000 	mrscc	r0, (UNDEF: 1)
		issue_cmd ((lword)&cmd_cs);
    2de0:	00010000 	andeq	r0, r1, r0
		if (dstate & DSTATE_IRST)
    2de4:	00310151 	eorseq	r0, r1, r1, asr r1
    2de8:	00313800 	eorseq	r3, r1, r0, lsl #16
    2dec:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			delay (1, DR_XMIT);
    2df8:	000030f0 	strdeq	r3, [r0], -r0
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2dfc:	00003101 	andeq	r3, r0, r1, lsl #2
    2e00:	10520001 	subsne	r0, r2, r1
    2e04:	16000031 			; <UNDEFINED> instruction: 0x16000031
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e08:	01000031 	tsteq	r0, r1, lsr r0
    2e0c:	00005200 	andeq	r5, r0, r0, lsl #4
				RF_cmdPropTx . status = 0;
    2e10:	00000000 	andeq	r0, r0, r0
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e14:	31380000 	teqcc	r8, r0
				issue_cmd ((lword)&RF_cmdPropTx);
    2e18:	314f0000 	mrscc	r0, SPSR
				proceed (DR_XMIT);
    2e1c:	00010000 	andeq	r0, r1, r0
    2e20:	00315050 	eorseq	r5, r1, r0, asr r0
			txtries++;
    2e24:	00315c00 	eorseq	r5, r1, r0, lsl #24
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e28:	50000100 	andpl	r0, r0, r0, lsl #2
    2e2c:	00003194 	muleq	r0, r4, r1
    2e30:	000031a8 	andeq	r3, r0, r8, lsr #3
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e34:	00500001 	subseq	r0, r0, r1
		goto DR_LOOP__;
    2e38:	00000000 	andeq	r0, r0, r0
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e3c:	40000000 	andmi	r0, r0, r0
		paylen = 0;
    2e40:	4c000031 	stcmi	0, cr0, [r0], {49}	; 0x31
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e44:	01000031 	tsteq	r0, r1, lsr r0
		txtries = 0;
    2e48:	314c5500 	cmpcc	ip, r0, lsl #10
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e4c:	314f0000 	mrscc	r0, SPSR
    2e50:	00020000 	andeq	r0, r2, r0
    2e54:	31500873 	cmpcc	r0, r3, ror r8
    2e58:	31a80000 			; <UNDEFINED> instruction: 0x31a80000
    2e5c:	00010000 	andeq	r0, r1, r0
		    tcvphy_top (physid) == NULL)
    2e60:	00000055 	andeq	r0, r0, r5, asr r0
    2e64:	00000000 	andeq	r0, r0, r0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e68:	00317600 	eorseq	r7, r1, r0, lsl #12
    2e6c:	00318800 	eorseq	r8, r1, r0, lsl #16
			rf_off ();
    2e70:	50000100 	andpl	r0, r0, r0, lsl #2
	...
endthread
    2e7c:	000031a8 	andeq	r3, r0, r8, lsr #3
    2e80:	000031c4 	andeq	r3, r0, r4, asr #3
    2e84:	aa500001 	bge	1402e90 <__ccfg+0x13e2ee8>
    2e88:	b3000032 	movwlt	r0, #50	; 0x32
    2e8c:	01000032 	tsteq	r0, r2, lsr r0
    2e90:	00005000 	andeq	r5, r0, r0
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	31b00000 	movscc	r0, r0
    2e9c:	31d20000 	bicscc	r0, r2, r0
    2ea0:	00010000 	andeq	r0, r1, r0
    2ea4:	0031d254 	eorseq	sp, r1, r4, asr r2
    2ea8:	0031d900 	eorseq	sp, r1, r0, lsl #18
    2eac:	50000100 	andpl	r0, r0, r0, lsl #2
    2eb0:	000031d9 	ldrdeq	r3, [r0], -r9
void RFCCPE0IntHandler (void) {
    2eb4:	000031de 	ldrdeq	r3, [r0], -lr
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eb8:	de540001 	cdple	0, 5, cr0, cr4, cr1, {0}
		_BIS (dstate, DSTATE_IRST);
    2ebc:	e8000031 	stmda	r0, {r0, r4, r5}
    2ec0:	01000031 	tsteq	r0, r1, lsr r0
    2ec4:	31e85000 	mvncc	r5, r0
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2ec8:	32a60000 	adccc	r0, r6, #0
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2ecc:	00010000 	andeq	r0, r1, r0
    2ed0:	0032aa54 	eorseq	sl, r2, r4, asr sl
	p_trigger (drvprcs, qevent);
    2ed4:	0032b000 	eorseq	fp, r2, r0
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ed8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2edc:	000032b0 			; <UNDEFINED> instruction: 0x000032b0
    2ee0:	000032b3 			; <UNDEFINED> instruction: 0x000032b3
    2ee4:	08720002 	ldmdaeq	r2!, {r1}^
	...
    2ef0:	0000328a 	andeq	r3, r0, sl, lsl #5
    2ef4:	0000328c 	andeq	r3, r0, ip, lsl #5
    2ef8:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2efc:	a6000032 			; <UNDEFINED> instruction: 0xa6000032
	RISE_N_SHINE;
    2f00:	01000032 	tsteq	r0, r2, lsr r0
    2f04:	00005600 	andeq	r5, r0, r0, lsl #12
    2f08:	00000000 	andeq	r0, r0, r0
}
    2f0c:	35140000 	ldrcc	r0, [r4, #-0]
    2f10:	352b0000 	strcc	r0, [fp, #-0]!
    2f14:	00010000 	andeq	r0, r1, r0
    2f18:	00352b50 	eorseq	r2, r5, r0, asr fp
    2f1c:	00353200 	eorseq	r3, r5, r0, lsl #4
    2f20:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
void phys_cc1350 (int phy, int mbs) {
    2f24:	00003532 	andeq	r3, r0, r2, lsr r5
	if (rbuffl != 0)
    2f28:	00003534 	andeq	r3, r0, r4, lsr r5
    2f2c:	34500001 	ldrbcc	r0, [r0], #-1
		syserror (ETOOMANY, "cc13");
    2f30:	44000035 	strmi	r0, [r0], #-53	; 0xffffffcb
		syserror (EREQPAR, "cc13 mb");
    2f34:	01000035 	tsteq	r0, r5, lsr r0
	if (mbs == 0)
    2f38:	35445400 	strbcc	r5, [r4, #-1024]	; 0xfffffc00
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f3c:	35530000 	ldrbcc	r0, [r3, #-0]
		syserror (EREQPAR, "cc13 mb");
    2f40:	00010000 	andeq	r0, r1, r0
    2f44:	00355350 	eorseq	r5, r5, r0, asr r3
	i = 0;
    2f48:	00356400 	eorseq	r6, r5, r0, lsl #8
	rbuffl = (byte) mbs;
    2f4c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f58:	00003514 	andeq	r3, r0, r4, lsl r5
    2f5c:	00003528 	andeq	r3, r0, r8, lsr #10
		if (db == NULL)
    2f60:	28510001 	ldmdacs	r1, {r0}^
			syserror (EMALLOC, "cc13");
    2f64:	2b000035 	blcs	3040 <phys_cc1350+0x11c>
    2f68:	01000035 	tsteq	r0, r5, lsr r0
    2f6c:	352b5200 	strcc	r5, [fp, #-512]!	; 0xfffffe00
		db->status = DATA_ENTRY_PENDING;
    2f70:	35320000 	ldrcc	r0, [r2, #-0]!
		if (i)
    2f74:	00010000 	andeq	r0, r1, r0
			da->pNextEntry = (byte*) db;
    2f78:	00353256 	eorseq	r3, r5, r6, asr r2
		db->length = rbuffl + 2;
    2f7c:	00353700 	eorseq	r3, r5, r0, lsl #14
    2f80:	51000100 	mrspl	r0, (UNDEF: 16)
		db->config.type = 0;	// General (data in structure)
    2f84:	00003537 	andeq	r3, r0, r7, lsr r5
		db->length = rbuffl + 2;
    2f88:	00003564 	andeq	r3, r0, r4, ror #10
	db->pNextEntry = (byte*) re;
    2f8c:	00560001 	subseq	r0, r6, r1
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f90:	00000000 	andeq	r0, r0, r0
    2f94:	14000000 	strne	r0, [r0], #-0
	if (rbuffs == NULL)
    2f98:	1c000035 	stcne	0, cr0, [r0], {53}	; 0x35
	rbuffs->pCurrEntry = (byte*) re;
    2f9c:	01000035 	tsteq	r0, r5, lsr r0
	rbuffs->pLastEntry = NULL;
    2fa0:	35205200 	strcc	r5, [r0, #-512]!	; 0xfffffe00
    2fa4:	35240000 	strcc	r0, [r4, #-0]!
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fa8:	00010000 	andeq	r0, r1, r0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fac:	00352c52 	eorseq	r2, r5, r2, asr ip
    2fb0:	00353200 	eorseq	r3, r5, r0, lsl #4
    2fb4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	rbuffl -= 2;
    2fb8:	0000353e 	andeq	r3, r0, lr, lsr r5
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fbc:	00003564 	andeq	r3, r0, r4, ror #10
	rbuffl -= 2;
    2fc0:	00570001 	subseq	r0, r7, r1
	physid = phy;
    2fc4:	00000000 	andeq	r0, r0, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fc8:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fcc:	60000035 	andvs	r0, r0, r5, lsr r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fd0:	01000035 	tsteq	r0, r5, lsr r0
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fd4:	35605500 	strbcc	r5, [r0, #-1280]!	; 0xfffffb00
    2fd8:	35640000 	strbcc	r0, [r4, #-0]!
	utimer_add (&bckf_timer);
    2fdc:	00010000 	andeq	r0, r1, r0
	drvprcs = runthread (cc1350_driver);
    2fe0:	00000058 	andeq	r0, r0, r8, asr r0
    2fe4:	00000000 	andeq	r0, r0, r0
    2fe8:	00355800 	eorseq	r5, r5, r0, lsl #16
	if (drvprcs == 0)
    2fec:	00355c00 	eorseq	r5, r5, r0, lsl #24
		syserror (ERESOURCE, "cc13");
    2ff0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2ffc:	000032e4 	andeq	r3, r0, r4, ror #5
    3000:	000032fe 	strdeq	r3, [r0], -lr
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3004:	00500001 	subseq	r0, r0, r1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3008:	00000000 	andeq	r0, r0, r0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    300c:	e4000000 	str	r0, [r0], #-0
    3010:	fe000032 	mcr2	0, 0, r0, cr0, cr2, {1}
    3014:	01000032 	tsteq	r0, r2, lsr r0
    3018:	00005100 	andeq	r5, r0, r0, lsl #2
    301c:	00000000 	andeq	r0, r0, r0
    3020:	32e40000 	rsccc	r0, r4, #0
    3024:	32fe0000 	rscscc	r0, lr, #0
    3028:	00010000 	andeq	r0, r1, r0
    302c:	00330e52 	eorseq	r0, r3, r2, asr lr
	plugch ();
    3030:	00333a00 	eorseq	r3, r3, r0, lsl #20
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3034:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3038:	00003348 	andeq	r3, r0, r8, asr #6
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    303c:	00003506 	andeq	r3, r0, r6, lsl #10
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3040:	00550001 	subseq	r0, r5, r1
    3044:	00000000 	andeq	r0, r0, r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3048:	e4000000 	str	r0, [r0], #-0
}
    304c:	e8000032 	stmda	r0, {r1, r4, r5}
    3050:	01000032 	tsteq	r0, r2, lsr r0
    3054:	32ea5300 	rsccc	r5, sl, #0, 6
    3058:	32ec0000 	rsccc	r0, ip, #0
    305c:	00030000 	andeq	r0, r3, r0
    3060:	ec049353 	stc	3, cr9, [r4], {83}	; 0x53
    3064:	36000032 			; <UNDEFINED> instruction: 0x36000032
    3068:	03000033 	movweq	r0, #51	; 0x33
    306c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    3070:	00003336 	andeq	r3, r0, r6, lsr r3
    3074:	0000338a 	andeq	r3, r0, sl, lsl #7
    3078:	93540003 	cmpls	r4, #3
    307c:	00338a04 	eorseq	r8, r3, r4, lsl #20
    3080:	00339600 	eorseq	r9, r3, r0, lsl #12
    3084:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    3088:	339e0493 	orrscc	r0, lr, #-1828716544	; 0x93000000
    308c:	33c00000 	biccc	r0, r0, #0
    3090:	00030000 	andeq	r0, r3, r0
    3094:	c4049354 	strgt	r9, [r4], #-852	; 0xfffffcac
    3098:	3e000033 	mcrcc	0, 0, r0, cr0, cr3, {1}
    309c:	03000034 	movweq	r0, #52	; 0x34
    30a0:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    30a4:	00003444 	andeq	r3, r0, r4, asr #8
    30a8:	00003458 	andeq	r3, r0, r8, asr r4
    30ac:	93540003 	cmpls	r4, #3
    30b0:	00349e04 	eorseq	r9, r4, r4, lsl #28
    30b4:	0034aa00 	eorseq	sl, r4, r0, lsl #20
    30b8:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    30bc:	34cc0493 	strbcc	r0, [ip], #1171	; 0x493
    30c0:	34de0000 	ldrbcc	r0, [lr], #0
    30c4:	00030000 	andeq	r0, r3, r0
    30c8:	e2049354 	and	r9, r4, #84, 6	; 0x50000001
    30cc:	ea000034 	b	31a4 <__outserial+0x6c>
    30d0:	03000034 	movweq	r0, #52	; 0x34
    30d4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    30d8:	000034ee 	andeq	r3, r0, lr, ror #9
    30dc:	00003514 	andeq	r3, r0, r4, lsl r5
    30e0:	93540003 	cmpls	r4, #3
    30e4:	00000004 	andeq	r0, r0, r4
    30e8:	00000000 	andeq	r0, r0, r0
    30ec:	00330200 	eorseq	r0, r3, r0, lsl #4
    30f0:	00330c00 	eorseq	r0, r3, r0, lsl #24
    30f4:	59000100 	stmdbpl	r0, {r8}
    30f8:	0000330c 	andeq	r3, r0, ip, lsl #6
    30fc:	0000330e 	andeq	r3, r0, lr, lsl #6
    3100:	00720002 	rsbseq	r0, r2, r2
    3104:	0000330e 	andeq	r3, r0, lr, lsl #6
    3108:	00003332 	andeq	r3, r0, r2, lsr r3
    310c:	3a590001 	bcc	1643118 <__ccfg+0x1623170>
    3110:	48000033 	stmdami	r0, {r0, r1, r4, r5}
    3114:	01000033 	tsteq	r0, r3, lsr r0
    3118:	33485900 	movtcc	r5, #35072	; 0x8900
    311c:	33800000 	orrcc	r0, r0, #0
    3120:	00010000 	andeq	r0, r1, r0
    3124:	00338a58 	eorseq	r8, r3, r8, asr sl
    3128:	00339a00 	eorseq	r9, r3, r0, lsl #20
    312c:	58000100 	stmdapl	r0, {r8}
    3130:	0000339a 	muleq	r0, sl, r3
    3134:	000033a2 	andeq	r3, r0, r2, lsr #7
strand (__outserial, const char*)
    3138:	01720002 	cmneq	r2, r2
    313c:	000033c0 	andeq	r3, r0, r0, asr #7
    3140:	000033ea 	andeq	r3, r0, sl, ror #7
    3144:	ee580001 	cdp	0, 5, cr0, cr8, cr1, {0}
endstrand
    3148:	f2000033 	vqadd.s8	d0, d0, d19
    314c:	01000033 	tsteq	r0, r3, lsr r0
	ptr = data;
    3150:	33fc5000 	mvnscc	r5, #0
    3154:	34060000 	strcc	r0, [r6], #-0
	if (*ptr)
    3158:	00010000 	andeq	r0, r1, r0
		len = strlen (ptr);
    315c:	00342650 	eorseq	r2, r4, r0, asr r6
    3160:	00342800 	eorseq	r2, r4, r0, lsl #16
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3164:	50000100 	andpl	r0, r0, r0, lsl #2
    3168:	0000342e 	andeq	r3, r0, lr, lsr #8
    316c:	00003430 	andeq	r3, r0, r0, lsr r4
    3170:	30580001 	subscc	r0, r8, r1
    3174:	53000034 	movwpl	r0, #52	; 0x34
	len -= quant;
    3178:	01000034 	tsteq	r0, r4, lsr r0
    317c:	34625300 	strbtcc	r5, [r2], #-768	; 0xfffffd00
    3180:	34660000 	strbtcc	r0, [r6], #-0
	if (len == 0) {
    3184:	00010000 	andeq	r0, r1, r0
		ufree (data);
    3188:	00347059 	eorseq	r7, r4, r9, asr r0
		finish;
    318c:	00349000 	eorseq	r9, r4, r0
    3190:	59000100 	stmdbpl	r0, {r8}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3194:	00003496 	muleq	r0, r6, r4
    3198:	00003498 	muleq	r0, r8, r4
    319c:	9e590001 	cdpls	0, 5, cr0, cr9, cr1, {0}
    31a0:	ac000034 	stcge	0, cr0, [r0], {52}	; 0x34
    31a4:	01000034 	tsteq	r0, r4, lsr r0
strand (__inserial, address)
    31a8:	34cc5300 	strbcc	r5, [ip], #768	; 0x300
    31ac:	34d50000 	ldrbcc	r0, [r5], #0
    31b0:	00010000 	andeq	r0, r1, r0
    31b4:	0034de53 	eorseq	sp, r4, r3, asr lr
    31b8:	0034f200 	eorseq	pc, r4, r0, lsl #4
	if (__inpline != NULL)
    31bc:	58000100 	stmdapl	r0, {r8}
    31c0:	00003506 	andeq	r3, r0, r6, lsl #10
		finish;
    31c4:	00003514 	andeq	r3, r0, r4, lsl r5
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31c8:	00590001 	subseq	r0, r9, r1
    31cc:	00000000 	andeq	r0, r0, r0
    31d0:	a2000000 	andge	r0, r0, #0
    31d4:	c0000033 	andgt	r0, r0, r3, lsr r0
		umwait (IM_INIT);
    31d8:	01000033 	tsteq	r0, r3, lsr r0
		release;
    31dc:	00005800 	andeq	r5, r0, r0, lsl #16
	savedata (data);
    31e0:	00000000 	andeq	r0, r0, r0
	len = MAX_LINE_LENGTH;
    31e4:	33cc0000 	biccc	r0, ip, #0
	io (IM_READ, __cport, READ, ptr, 1);
    31e8:	33e00000 	mvncc	r0, #0
    31ec:	00010000 	andeq	r0, r1, r0
    31f0:	0033e459 	eorseq	lr, r3, r9, asr r4
    31f4:	00341200 	eorseq	r1, r4, r0, lsl #4
	if (ptr == (char*) data) { // new line
    31f8:	59000100 	stmdbpl	r0, {r8}
    31fc:	0000341a 	andeq	r3, r0, sl, lsl r4
		if (*ptr == '\0') { // bin cmd
    3200:	0000342e 	andeq	r3, r0, lr, lsr #8
			proceed (IM_BIN);
    3204:	00590001 	subseq	r0, r9, r1
    3208:	00000000 	andeq	r0, r0, r0
		if (*ptr < 0x20)
    320c:	ea000000 	b	3214 <__inserial+0x6c>
    3210:	1c000033 	stcne	0, cr0, [r0], {51}	; 0x33
			proceed (IM_READ);
    3214:	01000034 	tsteq	r0, r4, lsr r0
    3218:	341c5800 	ldrcc	r5, [ip], #-2048	; 0xfffff800
	if (*ptr == '\n' || *ptr == '\r') {
    321c:	34280000 	strtcc	r0, [r8], #-0
    3220:	00010000 	andeq	r0, r1, r0
    3224:	00342853 	eorseq	r2, r4, r3, asr r8
		*ptr = '\0';
    3228:	00342e00 	eorseq	r2, r4, r0, lsl #28
		__inpline = (char*)data;
    322c:	58000100 	stmdapl	r0, {r8}
	...
		ptr++;
    3238:	00003458 	andeq	r3, r0, r8, asr r4
    323c:	0000349e 	muleq	r0, lr, r4
		len--;
    3240:	005a0001 	subseq	r0, sl, r1
	proceed (IM_READ);
    3244:	00000000 	andeq	r0, r0, r0
	io (IM_BIN, __cport, READ, ptr, 1);
    3248:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    324c:	88000034 	stmdahi	r0, {r2, r4, r5}
    3250:	01000034 	tsteq	r0, r4, lsr r0
    3254:	34885800 	strcc	r5, [r8], #2048	; 0x800
    3258:	34980000 	ldrcc	r0, [r8], #0
	len -= 2;
    325c:	00010000 	andeq	r0, r1, r0
	if (len > *ptr + 1) // 1 for 0x04
    3260:	00349853 	eorseq	r9, r4, r3, asr r8
    3264:	00349e00 	eorseq	r9, r4, r0, lsl #28
		len = *ptr + 1;
    3268:	58000100 	stmdapl	r0, {r8}
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3274:	000034ac 	andeq	r3, r0, ip, lsr #9
    3278:	000034cc 	andeq	r3, r0, ip, asr #9
    327c:	00580001 	subseq	r0, r8, r1
    3280:	00000000 	andeq	r0, r0, r0
    3284:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    3288:	e2000034 	and	r0, r0, #52	; 0x34
	len -= quant;
    328c:	02000034 	andeq	r0, r0, #52	; 0x34
		__inpline = (char*)data;
    3290:	e2007400 	and	r7, r0, #0, 8
		finish;
    3294:	ea000034 	b	336c <__pi_vfparse+0x88>
	ptr += quant;
    3298:	02000034 	andeq	r0, r0, #52	; 0x34
    329c:	007c7400 	rsbseq	r7, ip, r0, lsl #8
endstrand
    32a0:	00000000 	andeq	r0, r0, r0
    32a4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
	proceed (IM_BINL);
    32a8:	04000034 	streq	r0, [r0], #-52	; 0xffffffcc
endstrand
    32ac:	01000035 	tsteq	r0, r5, lsr r0
    32b0:	00005800 	andeq	r5, r0, r0, lsl #16
    32b4:	00000000 	andeq	r0, r0, r0
    32b8:	35640000 	strbcc	r0, [r4, #-0]!
    32bc:	35800000 	strcc	r0, [r0]
    32c0:	00010000 	andeq	r0, r1, r0
		if (res && (d < n))
    32c4:	0035be50 	eorseq	fp, r5, r0, asr lr
    32c8:	0035d000 	eorseq	sp, r5, r0
    32cc:	53000100 	movwpl	r0, #256	; 0x100
    32d0:	000035d0 	ldrdeq	r3, [r0], -r0
			res [d] = (char) c;
    32d4:	000035e4 	andeq	r3, r0, r4, ror #11
		d++;
    32d8:	e6560001 	ldrb	r0, [r6], -r1
    32dc:	02000035 	andeq	r0, r0, #53	; 0x35
    32e0:	01000036 	tsteq	r0, r6, lsr r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32e4:	36145600 	ldrcc	r5, [r4], -r0, lsl #12
    32e8:	36200000 	strtcc	r0, [r0], -r0
    32ec:	00010000 	andeq	r0, r1, r0
				enci (10000);
    32f0:	00362056 	eorseq	r2, r6, r6, asr r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32f4:	00362600 	eorseq	r2, r6, r0, lsl #12
    32f8:	53000100 	movwpl	r0, #256	; 0x100
	d = 0;
    32fc:	0000362c 	andeq	r3, r0, ip, lsr #12
		c = *fm++;
    3300:	00003630 	andeq	r3, r0, r0, lsr r6
		if (c == '\\') {
    3304:	30530001 	subscc	r0, r3, r1
			if ((c = *fm++) == '\0') {
    3308:	40000036 	andmi	r0, r0, r6, lsr r0
    330c:	01000036 	tsteq	r0, r6, lsr r0
				outc ('\\');
    3310:	36405e00 	strbcc	r5, [r0], -r0, lsl #28
			if ((c = *fm++) == '\0') {
    3314:	36560000 	ldrbcc	r0, [r6], -r0
				outc ('\\');
    3318:	00010000 	andeq	r0, r1, r0
    331c:	00365653 	eorseq	r5, r6, r3, asr r6
			outc (c);
    3320:	00365e00 	eorseq	r5, r6, r0, lsl #28
    3324:	5e000100 	adfpls	f0, f0, f0
			if (c == '\0')
    3328:	00003664 	andeq	r3, r0, r4, ror #12
    332c:	00003680 	andeq	r3, r0, r0, lsl #13
			outc (c);
    3330:	80530001 	subshi	r0, r3, r1
				outc (val);
    3334:	86000036 			; <UNDEFINED> instruction: 0x86000036
				val = (word) va_arg (ap, aword);
    3338:	01000036 	tsteq	r0, r6, lsr r0
		if (c == '%') {
    333c:	36865e00 	strcc	r5, [r6], r0, lsl #28
    3340:	36880000 	strcc	r0, [r8], r0
			c = *fm++;
    3344:	00010000 	andeq	r0, r1, r0
			switch (c) {
    3348:	00369453 	eorseq	r9, r6, r3, asr r4
    334c:	00369600 	eorseq	r9, r6, r0, lsl #12
    3350:	5e000100 	adfpls	f0, f0, f0
    3354:	00003696 	muleq	r0, r6, r6
    3358:	000036aa 	andeq	r3, r0, sl, lsr #13
    335c:	aa530001 	bge	14c3368 <__ccfg+0x14a33c0>
    3360:	ba000036 	blt	3440 <__pi_vfparse+0x15c>
    3364:	01000036 	tsteq	r0, r6, lsr r0
				outc ('%');
    3368:	36ba5600 	ldrtcc	r5, [sl], r0, lsl #12
    336c:	36ce0000 	strbcc	r0, [lr], r0
				outc (c);
    3370:	00010000 	andeq	r0, r1, r0
    3374:	0036dc53 	eorseq	sp, r6, r3, asr ip
    3378:	0036de00 	eorseq	sp, r6, r0, lsl #28
				if (c == '\0')
    337c:	56000100 	strpl	r0, [r0], -r0, lsl #2
				return d;
    3380:	000036de 	ldrdeq	r3, [r0], -lr
}
    3384:	000036f6 	strdeq	r3, [r0], -r6
    3388:	f6530001 			; <UNDEFINED> instruction: 0xf6530001
			switch (c) {
    338c:	10000036 	andne	r0, r0, r6, lsr r0
    3390:	01000037 	tsteq	r0, r7, lsr r0
    3394:	37165600 	ldrcc	r5, [r6, -r0, lsl #12]
				for (i = 12; ; i -= 4) {
    3398:	37380000 	ldrcc	r0, [r8, -r0]!
				val = (word) va_arg (ap, aword);
    339c:	00010000 	andeq	r0, r1, r0
						[ (val >> i) & 0xf ]);
    33a0:	00373853 	eorseq	r3, r7, r3, asr r8
    33a4:	00374a00 	eorseq	r4, r7, r0, lsl #20
    33a8:	56000100 	strpl	r0, [r0], -r0, lsl #2
					outc (__pi_hex_enc_table
    33ac:	00003770 	andeq	r3, r0, r0, ror r7
    33b0:	00003774 	andeq	r3, r0, r4, ror r7
					if (i == 0)
    33b4:	74530001 	ldrbvc	r0, [r3], #-1
    33b8:	84000037 	strhi	r0, [r0], #-55	; 0xffffffc9
				for (i = 12; ; i -= 4) {
    33bc:	01000037 	tsteq	r0, r7, lsr r0
				val = (word) va_arg (ap, aword);
    33c0:	37845800 	strcc	r5, [r4, r0, lsl #16]
				if (c == 'd' && (val & 0x8000) != 0) {
    33c4:	37940000 	ldrcc	r0, [r4, r0]
				val = (word) va_arg (ap, aword);
    33c8:	00010000 	andeq	r0, r1, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    33cc:	00379453 	eorseq	r9, r7, r3, asr r4
    33d0:	00379e00 	eorseq	r9, r7, r0, lsl #28
					outc ('-');
    33d4:	58000100 	stmdapl	r0, {r8}
    33d8:	000037a4 	andeq	r3, r0, r4, lsr #15
					val = (~val) + 1;
    33dc:	000037c6 	andeq	r3, r0, r6, asr #15
    33e0:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
				for (i = 12; ; i -= 4) {
    33e4:	dc000037 	stcle	0, cr0, [r0], {55}	; 0x37
				enci (10000);
    33e8:	01000037 	tsteq	r0, r7, lsr r0
    33ec:	37dc5300 	ldrbcc	r5, [ip, r0, lsl #6]
    33f0:	37f60000 	ldrbcc	r0, [r6, r0]!
    33f4:	00010000 	andeq	r0, r1, r0
    33f8:	0037fc56 	eorseq	pc, r7, r6, asr ip	; <UNPREDICTABLE>
    33fc:	00381c00 	eorseq	r1, r8, r0, lsl #24
    3400:	53000100 	movwpl	r0, #256	; 0x100
    3404:	0000381c 	andeq	r3, r0, ip, lsl r8
    3408:	0000382e 	andeq	r3, r0, lr, lsr #16
    340c:	42560001 	subsmi	r0, r6, #1
    3410:	46000038 			; <UNDEFINED> instruction: 0x46000038
    3414:	01000038 	tsteq	r0, r8, lsr r0
    3418:	38465800 	stmdacc	r6, {fp, ip, lr}^
    341c:	384a0000 	stmdacc	sl, {}^	; <UNPREDICTABLE>
    3420:	00010000 	andeq	r0, r1, r0
    3424:	00385453 	eorseq	r5, r8, r3, asr r4
    3428:	00385600 	eorseq	r5, r8, r0, lsl #12
    342c:	58000100 	stmdapl	r0, {r8}
				if (c == 'd' || c == 'u') {
    3430:	00003856 	andeq	r3, r0, r6, asr r8
    3434:	0000386c 	andeq	r3, r0, ip, ror #16
					if (c == 'd' &&
    3438:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
					val = va_arg (ap, lword);
    343c:	7c000038 	stcvc	0, cr0, [r0], {56}	; 0x38
					fm++;
    3440:	01000038 	tsteq	r0, r8, lsr r0
					if (c == 'd' &&
    3444:	387c5600 	ldmdacc	ip!, {r9, sl, ip, lr}^
    3448:	38920000 	ldmcc	r2, {}	; <UNPREDICTABLE>
						outc ('-');
    344c:	00010000 	andeq	r0, r1, r0
    3450:	00389c53 	eorseq	r9, r8, r3, asr ip
						val = (~val) + 1;
    3454:	00389e00 	eorseq	r9, r8, r0, lsl #28
				enci (10000);
    3458:	56000100 	strpl	r0, [r0], -r0, lsl #2
					enci (1000000000UL);
    345c:	0000389e 	muleq	r0, lr, r8
    3460:	000038a6 	andeq	r3, r0, r6, lsr #17
    3464:	aa530001 	bge	14c3470 <__ccfg+0x14a34c8>
    3468:	ba000038 	blt	3550 <vform+0x3c>
    346c:	01000038 	tsteq	r0, r8, lsr r0
    3470:	38ba5300 	ldmcc	sl!, {r8, r9, ip, lr}
    3474:	38c80000 	stmiacc	r8, {}^	; <UNPREDICTABLE>
    3478:	00010000 	andeq	r0, r1, r0
    347c:	0038c856 	eorseq	ip, r8, r6, asr r8
    3480:	0038ce00 	eorseq	ip, r8, r0, lsl #28
    3484:	58000100 	stmdapl	r0, {r8}
    3488:	000038ce 	andeq	r3, r0, lr, asr #17
    348c:	000038da 	ldrdeq	r3, [r0], -sl
    3490:	da560001 	ble	158349c <__ccfg+0x15634f4>
    3494:	e2000038 	and	r0, r0, #56	; 0x38
    3498:	01000038 	tsteq	r0, r8, lsr r0
    349c:	38e25000 	stmiacc	r2!, {ip, lr}^
				} else if (c == 'x') {
    34a0:	38f40000 	ldmcc	r4!, {}^	; <UNPREDICTABLE>
					for (i = 28; ; i -= 4) {
    34a4:	00010000 	andeq	r0, r1, r0
					val = va_arg (ap, lword);
    34a8:	00000053 	andeq	r0, r0, r3, asr r0
							[ (val >> i) & 0xf ]);
    34ac:	00000000 	andeq	r0, r0, r0
    34b0:	00356400 	eorseq	r6, r5, r0, lsl #8
						outc (__pi_hex_enc_table
    34b4:	00358200 	eorseq	r8, r5, r0, lsl #4
    34b8:	51000100 	mrspl	r0, (UNDEF: 16)
    34bc:	00003582 	andeq	r3, r0, r2, lsl #11
						if (i == 0)
    34c0:	00003588 	andeq	r3, r0, r8, lsl #11
    34c4:	88560001 	ldmdahi	r6, {r0}^
					for (i = 28; ; i -= 4) {
    34c8:	a6000035 			; <UNDEFINED> instruction: 0xa6000035
					outc ('%');
    34cc:	01000035 	tsteq	r0, r5, lsr r0
    34d0:	35ac5100 	strcc	r5, [ip, #256]!	; 0x100
    34d4:	38f40000 	ldmcc	r4!, {}^	; <UNPREDICTABLE>
					outc ('l');
    34d8:	00010000 	andeq	r0, r1, r0
    34dc:	00000051 	andeq	r0, r0, r1, asr r0
				val = (word) va_arg (ap, aword);
    34e0:	00000000 	andeq	r0, r0, r0
				outc (val);
    34e4:	00356400 	eorseq	r6, r5, r0, lsl #8
    34e8:	00356400 	eorseq	r6, r5, r0, lsl #8
				while (*st != '\0') {
    34ec:	52000100 	andpl	r0, r0, #0, 2
    34f0:	00003564 	andeq	r3, r0, r4, ror #10
    34f4:	00003580 	andeq	r3, r0, r0, lsl #11
    34f8:	93520003 	cmpls	r2, #3
					outc (*st);
    34fc:	00362604 	eorseq	r2, r6, r4, lsl #12
    3500:	00365a00 	eorseq	r5, r6, r0, lsl #20
					st++;
    3504:	52000100 	andpl	r0, r0, #0, 2
		c = *fm++;
    3508:	00003680 	andeq	r3, r0, r0, lsl #13
    350c:	00003686 	andeq	r3, r0, r6, lsl #13
    3510:	96520001 	ldrbls	r0, [r2], -r1
char *vform (char *res, const char *fm, va_list aq) {
    3514:	b0000036 	andlt	r0, r0, r6, lsr r0
    3518:	01000036 	tsteq	r0, r6, lsr r0
	if (res != NULL) {
    351c:	36de5200 	ldrbcc	r5, [lr], r0, lsl #4
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3520:	37060000 	strcc	r0, [r6, -r0]
    3524:	00010000 	andeq	r0, r1, r0
    3528:	00375852 	eorseq	r5, r7, r2, asr r8
}
    352c:	00379800 	eorseq	r9, r7, r0, lsl #16
    3530:	52000100 	andpl	r0, r0, #0, 2
	fml = strlen (fm) + 17;
    3534:	000037c6 	andeq	r3, r0, r6, asr #15
    3538:	000037ec 	andeq	r3, r0, ip, ror #15
    353c:	3c520001 	mrrccc	0, 0, r0, r2, cr1
	if ((res = (char*) umalloc (fml)) == NULL)
    3540:	46000038 			; <UNDEFINED> instruction: 0x46000038
    3544:	01000038 	tsteq	r0, r8, lsr r0
    3548:	38565200 	ldmdacc	r6, {r9, ip, lr}^
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    354c:	38720000 	ldmdacc	r2!, {}^	; <UNPREDICTABLE>
    3550:	00010000 	andeq	r0, r1, r0
    3554:	00389e52 	eorseq	r9, r8, r2, asr lr
    3558:	0038b400 	eorseq	fp, r8, r0, lsl #8
		ufree (res);
    355c:	52000100 	andpl	r0, r0, #0, 2
		goto Again;
    3560:	000038ba 			; <UNDEFINED> instruction: 0x000038ba
	if (buf == NULL || fmt == NULL)
    3564:	000038c8 	andeq	r3, r0, r8, asr #17
int vscan (const char *buf, const char *fmt, va_list ap) {
    3568:	da520001 	ble	1483574 <__ccfg+0x14635cc>
	if (buf == NULL || fmt == NULL)
    356c:	e2000038 	and	r0, r0, #56	; 0x38
    3570:	01000038 	tsteq	r0, r8, lsr r0
    3574:	00005200 	andeq	r5, r0, r0, lsl #4
		    	    case 'u': scanu (lword); break;
    3578:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    357c:	35e20000 	strbcc	r0, [r2, #0]!
    3580:	35e40000 	strbcc	r0, [r4, #0]!
	while (*fmt != '\0') {
    3584:	00010000 	andeq	r0, r1, r0
		if (*fmt++ != '%')
    3588:	00365c54 	eorseq	r5, r6, r4, asr ip
		switch (*fmt++) {
    358c:	00368000 	eorseq	r8, r6, r0
    3590:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3594:	00003686 	andeq	r3, r0, r6, lsl #13
    3598:	00003696 	muleq	r0, r6, r6
    359c:	b2540001 	subslt	r0, r4, #1
    35a0:	de000036 	mcrle	0, 0, r0, cr0, cr6, {1}
    35a4:	01000036 	tsteq	r0, r6, lsr r0
}
    35a8:	37085400 	strcc	r5, [r8, -r0, lsl #8]
		switch (*fmt++) {
    35ac:	37580000 	ldrbcc	r0, [r8, -r0]
    35b0:	00010000 	andeq	r0, r1, r0
    35b4:	00379a54 	eorseq	r9, r7, r4, asr sl
    35b8:	0037c600 	eorseq	ip, r7, r0, lsl #12
			while (isspace (*buf)) buf++;
    35bc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    35c0:	000037ee 	andeq	r3, r0, lr, ror #15
    35c4:	0000383c 	andeq	r3, r0, ip, lsr r8
    35c8:	46540001 	ldrbmi	r0, [r4], -r1
    35cc:	56000038 			; <UNDEFINED> instruction: 0x56000038
    35d0:	01000038 	tsteq	r0, r8, lsr r0
			if (*buf == '\0')
    35d4:	38745400 	ldmdacc	r4!, {sl, ip, lr}^
			if (*buf != ',') {
    35d8:	389e0000 	ldmcc	lr, {}	; <UNPREDICTABLE>
			sap = va_arg (ap, char*);
    35dc:	00010000 	andeq	r0, r1, r0
			nc++;
    35e0:	0038b654 	eorseq	fp, r8, r4, asr r6
			if (*buf != ',') {
    35e4:	0038ba00 	eorseq	fp, r8, r0, lsl #20
				while (!isspace (*buf) && *buf != ',' &&
    35e8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    35ec:	000038e2 	andeq	r3, r0, r2, ror #17
    35f0:	000038f4 	strdeq	r3, [r0], -r4
    35f4:	00540001 	subseq	r0, r4, r1
    35f8:	00000000 	andeq	r0, r0, r0
    35fc:	56000000 	strpl	r0, [r0], -r0
    3600:	80000036 	andhi	r0, r0, r6, lsr r0
			while (isspace (*buf)) buf++;
    3604:	01000036 	tsteq	r0, r6, lsr r0
    3608:	36865800 	strcc	r5, [r6], r0, lsl #16
    360c:	36960000 	ldrcc	r0, [r6], r0
    3610:	00010000 	andeq	r0, r1, r0
    3614:	00000058 	andeq	r0, r0, r8, asr r0
			if (*buf == ',') buf++;
    3618:	00000000 	andeq	r0, r0, r0
    361c:	00373800 	eorseq	r3, r7, r0, lsl #16
			*sap = '\0';
    3620:	00374a00 	eorseq	r4, r7, r0, lsl #20
			break;
    3624:	59000100 	stmdbpl	r0, {r8}
		    case 'd': scani (word); break;
    3628:	0000374a 	andeq	r3, r0, sl, asr #14
    362c:	00003752 	andeq	r3, r0, r2, asr r7
    3630:	00500001 	subseq	r0, r0, r1
    3634:	00000000 	andeq	r0, r0, r0
    3638:	94000000 	strls	r0, [r0], #-0
    363c:	be000037 	mcrlt	0, 0, r0, cr0, cr7, {1}
    3640:	01000037 	tsteq	r0, r7, lsr r0
    3644:	38465000 	stmdacc	r6, {ip, lr}^
    3648:	38560000 	ldmdacc	r6, {}^	; <UNPREDICTABLE>
    364c:	00010000 	andeq	r0, r1, r0
    3650:	00000050 	andeq	r0, r0, r0, asr r0
    3654:	00000000 	andeq	r0, r0, r0
    3658:	00381c00 	eorseq	r1, r8, r0, lsl #24
    365c:	00382e00 	eorseq	r2, r8, r0, lsl #28
    3660:	59000100 	stmdbpl	r0, {r8}
    3664:	0000382e 	andeq	r3, r0, lr, lsr #16
    3668:	00003836 	andeq	r3, r0, r6, lsr r8
    366c:	00500001 	subseq	r0, r0, r1
    3670:	00000000 	andeq	r0, r0, r0
    3674:	aa000000 	bge	367c <vscan+0x118>
    3678:	ba000038 	blt	3760 <vscan+0x1fc>
    367c:	01000038 	tsteq	r0, r8, lsr r0
    3680:	00005000 	andeq	r5, r0, r0
    3684:	00000000 	andeq	r0, r0, r0
    3688:	35e60000 	strbcc	r0, [r6, #0]!
    368c:	36020000 	strcc	r0, [r2], -r0
    3690:	00010000 	andeq	r0, r1, r0
    3694:	0038cc5e 	eorseq	ip, r8, lr, asr ip
		    case 'u': scanu (word); break;
    3698:	0038ce00 	eorseq	ip, r8, r0, lsl #28
    369c:	5e000100 	adfpls	f0, f0, f0
	...
    36a8:	000038f4 	strdeq	r3, [r0], -r4
    36ac:	000038fb 	strdeq	r3, [r0], -fp
    36b0:	fb500001 	blx	14036be <__ccfg+0x13e3716>
    36b4:	12000038 	andne	r0, r0, #56	; 0x38
    36b8:	01000039 	tsteq	r0, r9, lsr r0
    36bc:	39125600 	ldmdbcc	r2, {r9, sl, ip, lr}
    36c0:	39160000 	ldmdbcc	r6, {}	; <UNPREDICTABLE>
    36c4:	00040000 	andeq	r0, r4, r0
    36c8:	9f5001f3 	svcls	0x005001f3
    36cc:	00003916 	andeq	r3, r0, r6, lsl r9
    36d0:	00003918 	andeq	r3, r0, r8, lsl r9
    36d4:	18560001 	ldmdane	r6, {r0}^
    36d8:	1c000039 	stcne	0, cr0, [r0], {57}	; 0x39
    36dc:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
		    case 'x': scanx (word); break;
    36e0:	5001f300 	andpl	pc, r1, r0, lsl #6
    36e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    36e8:	00000000 	andeq	r0, r0, r0
    36ec:	0038fe00 	eorseq	pc, r8, r0, lsl #28
    36f0:	00390700 	eorseq	r0, r9, r0, lsl #14
    36f4:	70000500 	andvc	r0, r0, r0, lsl #10
    36f8:	9f293000 	svcls	0x00293000
    36fc:	00003907 	andeq	r3, r0, r7, lsl #18
    3700:	00003912 	andeq	r3, r0, r2, lsl r9
    3704:	00750005 	rsbseq	r0, r5, r5
    3708:	169f2930 			; <UNDEFINED> instruction: 0x169f2930
    370c:	18000039 	stmdane	r0, {r0, r3, r4, r5}
    3710:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
    3714:	30007500 	andcc	r7, r0, r0, lsl #10
    3718:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    3728:	00010000 	andeq	r0, r1, r0
    372c:	00000050 	andeq	r0, r0, r0, asr r0
    3730:	00000000 	andeq	r0, r0, r0
    3734:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    3740:	01f30004 	mvnseq	r0, r4
    3744:	00009f50 	andeq	r9, r0, r0, asr pc
    3748:	00000000 	andeq	r0, r0, r0
    374c:	00010000 	andeq	r0, r1, r0
    3750:	00000056 	andeq	r0, r0, r6, asr r0
    3754:	00000000 	andeq	r0, r0, r0
			switch (*fmt++) {
    3758:	f3000400 	vshl.u8	d0, d0, d0
    375c:	009f5001 	addseq	r5, pc, r1
	...
    376c:	01000000 	mrseq	r0, (UNDEF: 0)
		    	    case 'd': scani (lword); break;
    3770:	00005100 	andeq	r5, r0, r0, lsl #2
    3774:	00000000 	andeq	r0, r0, r0
    3778:	00040000 	andeq	r0, r4, r0
    377c:	9f5101f3 	svcls	0x005101f3
	...
    3790:	00700005 	rsbseq	r0, r0, r5
    3794:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    3798:	00000000 	andeq	r0, r0, r0
    379c:	05000000 	streq	r0, [r0, #-0]
    37a0:	30007500 	andcc	r7, r0, r0, lsl #10
    37a4:	00009f29 	andeq	r9, r0, r9, lsr #30
    37a8:	00000000 	andeq	r0, r0, r0
    37ac:	00050000 	andeq	r0, r5, r0
    37b0:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    37b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37b8:	00000000 	andeq	r0, r0, r0
    37bc:	00392000 	eorseq	r2, r9, r0
    37c0:	00393200 	eorseq	r3, r9, r0, lsl #4
    37c4:	70000700 	andvc	r0, r0, r0, lsl #14
    37c8:	3f243f00 	svccc	0x00243f00
		    	    case 'x': scanx (lword); break;
    37cc:	00009f26 	andeq	r9, r0, r6, lsr #30
    37d0:	00000000 	andeq	r0, r0, r0
    37d4:	39280000 	stmdbcc	r8!, {}	; <UNPREDICTABLE>
    37d8:	39300000 	ldmdbcc	r0!, {}	; <UNPREDICTABLE>
    37dc:	000d0000 	andeq	r0, sp, r0
    37e0:	717a8072 	cmnvc	sl, r2, ror r0
    37e4:	48244800 	stmdami	r4!, {fp, lr}
    37e8:	26341e26 	ldrtcs	r1, [r4], -r6, lsr #28
    37ec:	0039309f 	mlaseq	r9, pc, r0, r3	; <UNPREDICTABLE>
    37f0:	00394c00 	eorseq	r4, r9, r0, lsl #24
    37f4:	71000c00 	tstvc	r0, r0, lsl #24
    37f8:	48244800 	stmdami	r4!, {fp, lr}
    37fc:	1e007226 	cdpne	2, 0, cr7, cr0, cr6, {1}
    3800:	009f2634 	addseq	r2, pc, r4, lsr r6	; <UNPREDICTABLE>
    3804:	00000000 	andeq	r0, r0, r0
    3808:	52000000 	andpl	r0, r0, #0
    380c:	5c000039 	stcpl	0, cr0, [r0], {57}	; 0x39
    3810:	01000039 	tsteq	r0, r9, lsr r0
    3814:	00005300 	andeq	r5, r0, r0, lsl #6
    3818:	00000000 	andeq	r0, r0, r0
    381c:	39540000 	ldmdbcc	r4, {}^	; <UNPREDICTABLE>
    3820:	39600000 	stmdbcc	r0!, {}^	; <UNPREDICTABLE>
    3824:	00010000 	andeq	r0, r1, r0
    3828:	00000050 	andeq	r0, r0, r0, asr r0
    382c:	00000000 	andeq	r0, r0, r0
    3830:	00399400 	eorseq	r9, r9, r0, lsl #8
    3834:	0039ac00 	eorseq	sl, r9, r0, lsl #24
    3838:	50000100 	andpl	r0, r0, r0, lsl #2
		    	    case 'd': scani (lword); break;
    383c:	000039ac 	andeq	r3, r0, ip, lsr #19
    3840:	000039e6 	andeq	r3, r0, r6, ror #19
    3844:	e6550001 	ldrb	r0, [r5], -r1
    3848:	f0000039 			; <UNDEFINED> instruction: 0xf0000039
    384c:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    3850:	5001f300 	andpl	pc, r1, r0, lsl #6
    3854:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
		    	    case 'u': scanu (lword); break;
    3858:	00000000 	andeq	r0, r0, r0
    385c:	00399400 	eorseq	r9, r9, r0, lsl #8
    3860:	00399a00 	eorseq	r9, r9, r0, lsl #20
    3864:	51000100 	mrspl	r0, (UNDEF: 16)
    3868:	0000399a 	muleq	r0, sl, r9
    386c:	000039d2 	ldrdeq	r3, [r0], -r2
    3870:	d2540001 	subsle	r0, r4, #1
    3874:	f0000039 			; <UNDEFINED> instruction: 0xf0000039
    3878:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    387c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3880:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3884:	00000000 	andeq	r0, r0, r0
    3888:	0039ce00 	eorseq	ip, r9, r0, lsl #28
    388c:	0039e200 	eorseq	lr, r9, r0, lsl #4
    3890:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    389c:	000039ce 	andeq	r3, r0, lr, asr #19
		    	    case 'x': scanx (lword); break;
    38a0:	000039d2 	ldrdeq	r3, [r0], -r2
    38a4:	d2540001 	subsle	r0, r4, #1
			if ((c = *buf++) == '\0')
    38a8:	e2000039 	and	r0, r0, #57	; 0x39
    38ac:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
			sap = va_arg (ap, char*);
    38b0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
			nc++;
    38b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			break;
    38b8:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    38bc:	0039f000 	eorseq	pc, r9, r0
    38c0:	003a0e00 	eorseq	r0, sl, r0, lsl #28
    38c4:	50000100 	andpl	r0, r0, r0, lsl #2
						*sap++ = *buf++;
    38c8:	00003a0e 	andeq	r3, r0, lr, lsl #20
    38cc:	00003a1c 	andeq	r3, r0, ip, lsl sl
			while (isspace (*buf)) buf++;
    38d0:	01f30004 	mvnseq	r0, r4
    38d4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
		    case 'x': scanx (word); break;
    38e4:	00010000 	andeq	r0, r1, r0
    38e8:	00000050 	andeq	r0, r0, r0, asr r0
		    	    case 'x': scanx (lword); break;
    38ec:	00000000 	andeq	r0, r0, r0
    38f0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    38fc:	01f30004 	mvnseq	r0, r4
    3900:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3910:	00010000 	andeq	r0, r1, r0
    3914:	00000055 	andeq	r0, r0, r5, asr r0
	...
    3924:	70000700 	andvc	r0, r0, r0, lsl #14
    3928:	1c007300 	stcne	3, cr7, [r0], {-0}
    392c:	00009f19 	andeq	r9, r0, r9, lsl pc
    3930:	00000000 	andeq	r0, r0, r0
    3934:	00040000 	andeq	r0, r4, r0
    3938:	9f190070 	svcls	0x00190070
	...
    394c:	d00a0004 	andle	r0, sl, r4
    3950:	00009f07 	andeq	r9, r0, r7, lsl #30
    3954:	00000000 	andeq	r0, r0, r0
    3958:	00010000 	andeq	r0, r1, r0
    395c:	00000050 	andeq	r0, r0, r0, asr r0
    3960:	00000000 	andeq	r0, r0, r0
    3964:	72000500 	andvc	r0, r0, #0, 10
    3968:	9f254000 	svcls	0x00254000
	...
    3974:	00500001 	subseq	r0, r0, r1
    3978:	00000000 	andeq	r0, r0, r0
    397c:	04000000 	streq	r0, [r0], #-0
    3980:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    3984:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3988:	00000000 	andeq	r0, r0, r0
    398c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3998:	00003a6e 	andeq	r3, r0, lr, ror #20
    399c:	00003a7a 	andeq	r3, r0, sl, ror sl
    39a0:	00500001 	subseq	r0, r0, r1
    39a4:	00000000 	andeq	r0, r0, r0
    39a8:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    39ac:	7a00003a 	bvc	3a9c <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x8>
    39b0:	0100003a 	tsteq	r0, sl, lsr r0
    39b4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    39c4:	00010000 	andeq	r0, r1, r0
    39c8:	00000050 	andeq	r0, r0, r0, asr r0
    39cc:	00000000 	andeq	r0, r0, r0
    39d0:	70000300 	andvc	r0, r0, r0, lsl #6
    39d4:	00009f1b 	andeq	r9, r0, fp, lsl pc
    39d8:	00000000 	andeq	r0, r0, r0
    39dc:	00040000 	andeq	r0, r4, r0
    39e0:	9f5001f3 	svcls	0x005001f3
	...
    39f4:	00740007 	rsbseq	r0, r4, r7
    39f8:	26482448 	strbcs	r2, [r8], -r8, asr #8
    39fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3a0c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3a18:	01f30006 	mvnseq	r0, r6
    3a1c:	9f1c4b50 	svcls	0x001c4b50
	...
    3a30:	00550001 	subseq	r0, r5, r1
    3a34:	00000000 	andeq	r0, r0, r0
    3a38:	0c000000 	stceq	0, cr0, [r0], {-0}
    3a3c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3a40:	01f31c4b 	mvnseq	r1, fp, asr #24
    3a44:	1e1c4b50 			; <UNDEFINED> instruction: 0x1e1c4b50
    3a48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3a58:	71002c00 	tstvc	r0, r0, lsl #24
    3a5c:	71264000 			; <UNDEFINED> instruction: 0x71264000
    3a60:	48244000 	stmdami	r4!, {lr}
    3a64:	1e007026 	cdpne	0, 0, cr7, cr0, cr6, {1}
    3a68:	71222633 			; <UNDEFINED> instruction: 0x71222633
    3a6c:	48244800 	stmdami	r4!, {fp, lr}
    3a70:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    3a74:	7422263a 	strtvc	r2, [r2], #-1594	; 0xfffff9c6
    3a78:	48244800 	stmdami	r4!, {fp, lr}
    3a7c:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    3a80:	421e0070 	andsmi	r0, lr, #112	; 0x70
    3a84:	009f2226 	addseq	r2, pc, r6, lsr #4
    3a88:	00000000 	andeq	r0, r0, r0
    3a8c:	32000000 	andcc	r0, r0, #0
    3a90:	40007100 	andmi	r7, r0, r0, lsl #2
    3a94:	5001f326 	andpl	pc, r1, r6, lsr #6
    3a98:	00711c4b 	rsbseq	r1, r1, fp, asr #24
    3a9c:	26482440 	strbcs	r2, [r8], -r0, asr #8
    3aa0:	2226331e 	eorcs	r3, r6, #2013265920	; 0x78000000
    3aa4:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    3aa8:	00752648 	rsbseq	r2, r5, r8, asr #12
    3aac:	22263a1e 	eorcs	r3, r6, #122880	; 0x1e000
    3ab0:	4b5001f3 	blmi	1404284 <__ccfg+0x13e42dc>
    3ab4:	4800741c 	stmdami	r0, {r2, r3, r4, sl, ip, sp, lr}
    3ab8:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3abc:	421e0075 	andsmi	r0, lr, #117	; 0x75
    3ac0:	009f2226 	addseq	r2, pc, r6, lsr #4
	...
    3ad0:	01000000 	mrseq	r0, (UNDEF: 0)
    3ad4:	00005000 	andeq	r5, r0, r0
    3ad8:	00000000 	andeq	r0, r0, r0
    3adc:	00040000 	andeq	r0, r4, r0
    3ae0:	9f5001f3 	svcls	0x005001f3
	...
    3af4:	0070000b 	rsbseq	r0, r0, fp
    3af8:	461e0070 			; <UNDEFINED> instruction: 0x461e0070
    3afc:	1c007026 	stcne	0, cr7, [r0], {38}	; 0x26
    3b00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b04:	00000000 	andeq	r0, r0, r0
    3b08:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3b14:	01f3000e 	mvnseq	r0, lr
    3b18:	5001f350 	andpl	pc, r1, r0, asr r3	; <UNPREDICTABLE>
    3b1c:	f326461e 	vmin.u32	d4, d6, d14
    3b20:	9f1c5001 	svcls	0x001c5001
	...
    3b34:	00550001 	subseq	r0, r5, r1
    3b38:	00000000 	andeq	r0, r0, r0
    3b3c:	05000000 	streq	r0, [r0, #-0]
    3b40:	10380c00 	eorsne	r0, r8, r0, lsl #24
    3b44:	00004009 	andeq	r4, r0, r9
	...
    3b54:	00010000 	andeq	r0, r1, r0
    3b58:	00000056 	andeq	r0, r0, r6, asr r0
	...
    3b68:	70000600 	andvc	r0, r0, r0, lsl #12
    3b6c:	1c007600 	stcne	6, cr7, [r0], {-0}
    3b70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b74:	00000000 	andeq	r0, r0, r0
    3b78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3b8c:	0070000a 	rsbseq	r0, r0, sl
    3b90:	2444fc08 	strbcs	pc, [r4], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    3b94:	9f25461a 	svcls	0x0025461a
	...
    3ba8:	00530001 	subseq	r0, r3, r1
	...
    3bb8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3bbc:	0a007300 	beq	207c4 <__ccfg+0x81c>
    3bc0:	3a1afc00 	bcc	6c2bc8 <__ccfg+0x6a2c20>
    3bc4:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    3bd4:	000a0000 	andeq	r0, sl, r0
    3bd8:	fc080073 	stc2	0, cr0, [r8], {115}	; 0x73
    3bdc:	421a2440 	andsmi	r2, sl, #64, 8	; 0x40000000
    3be0:	00009f25 	andeq	r9, r0, r5, lsr #30
    3be4:	00000000 	andeq	r0, r0, r0
    3be8:	3ac80000 	bcc	ff203bf0 <_estack+0xdf1febf0>
    3bec:	3ae60000 	bcc	ff983bf4 <_estack+0xdf97ebf4>
    3bf0:	00010000 	andeq	r0, r1, r0
    3bf4:	003ae650 	eorseq	lr, sl, r0, asr r6
    3bf8:	003af000 	eorseq	pc, sl, r0
    3bfc:	f3000400 	vshl.u8	d0, d0, d0
    3c00:	009f5001 	addseq	r5, pc, r1
    3c04:	00000000 	andeq	r0, r0, r0
    3c08:	52000000 	andpl	r0, r0, #0
    3c0c:	5400003b 	strpl	r0, [r0], #-59	; 0xffffffc5
    3c10:	0100003b 	tsteq	r0, fp, lsr r0
    3c14:	3b565300 	blcc	159881c <__ccfg+0x1578874>
    3c18:	3b580000 	blcc	1603c20 <__ccfg+0x15e3c78>
    3c1c:	00010000 	andeq	r0, r1, r0
    3c20:	00000053 	andeq	r0, r0, r3, asr r0
    3c24:	00000000 	andeq	r0, r0, r0
    3c28:	003c8c00 	eorseq	r8, ip, r0, lsl #24
    3c2c:	003cc200 	eorseq	ip, ip, r0, lsl #4
    3c30:	50000100 	andpl	r0, r0, r0, lsl #2
    3c34:	00003cc2 	andeq	r3, r0, r2, asr #25
    3c38:	00003da4 	andeq	r3, r0, r4, lsr #27
    3c3c:	01f30004 	mvnseq	r0, r4
    3c40:	00009f50 	andeq	r9, r0, r0, asr pc
    3c44:	00000000 	andeq	r0, r0, r0
    3c48:	3caa0000 	stccc	0, cr0, [sl]
    3c4c:	3cae0000 	stccc	0, cr0, [lr]
    3c50:	00010000 	andeq	r0, r1, r0
    3c54:	003cae51 	eorseq	sl, ip, r1, asr lr
    3c58:	003cb400 	eorseq	fp, ip, r0, lsl #8
    3c5c:	32000200 	andcc	r0, r0, #0, 4
    3c60:	003cb89f 	mlaseq	ip, pc, r8, fp	; <UNPREDICTABLE>
    3c64:	003d4200 	eorseq	r4, sp, r0, lsl #4
    3c68:	51000100 	mrspl	r0, (UNDEF: 16)
    3c6c:	00003d42 	andeq	r3, r0, r2, asr #26
    3c70:	00003d46 	andeq	r3, r0, r6, asr #26
    3c74:	05710003 	ldrbeq	r0, [r1, #-3]!
    3c78:	003d689f 	mlaseq	sp, pc, r8, r6	; <UNPREDICTABLE>
    3c7c:	003d7e00 	eorseq	r7, sp, r0, lsl #28
    3c80:	51000100 	mrspl	r0, (UNDEF: 16)
    3c84:	00003d7e 	andeq	r3, r0, lr, ror sp
    3c88:	00003d80 	andeq	r3, r0, r0, lsl #27
    3c8c:	05710003 	ldrbeq	r0, [r1, #-3]!
    3c90:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c94:	00000000 	andeq	r0, r0, r0
    3c98:	003d0e00 	eorseq	r0, sp, r0, lsl #28
    3c9c:	003d1400 	eorseq	r1, sp, r0, lsl #8
    3ca0:	53000100 	movwpl	r0, #256	; 0x100
    3ca4:	00003d1c 	andeq	r3, r0, ip, lsl sp
    3ca8:	00003d1e 	andeq	r3, r0, lr, lsl sp
    3cac:	32530001 	subscc	r0, r3, #1
    3cb0:	3400003d 	strcc	r0, [r0], #-61	; 0xffffffc3
    3cb4:	0100003d 	tsteq	r0, sp, lsr r0
    3cb8:	3d3c5300 	ldccc	3, cr5, [ip, #-0]
    3cbc:	3d480000 	stclcc	0, cr0, [r8, #-0]
    3cc0:	00010000 	andeq	r0, r1, r0
    3cc4:	003d6853 	eorseq	r6, sp, r3, asr r8
    3cc8:	003d7400 	eorseq	r7, sp, r0, lsl #8
    3ccc:	53000100 	movwpl	r0, #256	; 0x100
    3cd0:	00003d78 	andeq	r3, r0, r8, ror sp
    3cd4:	00003d80 	andeq	r3, r0, r0, lsl #27
    3cd8:	00530001 	subseq	r0, r3, r1
    3cdc:	00000000 	andeq	r0, r0, r0
    3ce0:	ac000000 	stcge	0, cr0, [r0], {-0}
    3ce4:	ae00003c 	mcrge	0, 0, r0, cr0, cr12, {1}
    3ce8:	0100003c 	tsteq	r0, ip, lsr r0
    3cec:	3cb05300 	ldccc	3, cr5, [r0]
    3cf0:	3cb40000 	ldccc	0, cr0, [r4]
    3cf4:	00010000 	andeq	r0, r1, r0
    3cf8:	003cba53 	eorseq	fp, ip, r3, asr sl
    3cfc:	003cc200 	eorseq	ip, ip, r0, lsl #4
    3d00:	53000100 	movwpl	r0, #256	; 0x100
    3d04:	00003cc2 	andeq	r3, r0, r2, asr #25
    3d08:	00003cd8 	ldrdeq	r3, [r0], -r8
    3d0c:	6c740003 	ldclvs	0, cr0, [r4], #-12
    3d10:	003cdc9f 	mlaseq	ip, pc, ip, sp	; <UNPREDICTABLE>
    3d14:	003ce200 	eorseq	lr, ip, r0, lsl #4
    3d18:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    3d1c:	00009f6c 	andeq	r9, r0, ip, ror #30
    3d20:	00000000 	andeq	r0, r0, r0
    3d24:	3cd20000 	ldclcc	0, cr0, [r2], {0}
    3d28:	3d560000 	ldclcc	0, cr0, [r6, #-0]
    3d2c:	00010000 	andeq	r0, r1, r0
    3d30:	003d5652 	eorseq	r5, sp, r2, asr r6
    3d34:	003d5c00 	eorseq	r5, sp, r0, lsl #24
    3d38:	70000200 	andvc	r0, r0, r0, lsl #4
    3d3c:	003d5c00 	eorseq	r5, sp, r0, lsl #24
    3d40:	003d6000 	eorseq	r6, sp, r0
    3d44:	52000100 	andpl	r0, r0, #0, 2
    3d48:	00003d60 	andeq	r3, r0, r0, ror #26
    3d4c:	00003d66 	andeq	r3, r0, r6, ror #26
    3d50:	00700002 	rsbseq	r0, r0, r2
    3d54:	00003d68 	andeq	r3, r0, r8, ror #26
    3d58:	00003d70 	andeq	r3, r0, r0, ror sp
    3d5c:	70520001 	subsvc	r0, r2, r1
    3d60:	7600003d 			; <UNDEFINED> instruction: 0x7600003d
    3d64:	0200003d 	andeq	r0, r0, #61	; 0x3d
    3d68:	78007000 	stmdavc	r0, {ip, sp, lr}
    3d6c:	8000003d 	andhi	r0, r0, sp, lsr r0
    3d70:	0100003d 	tsteq	r0, sp, lsr r0
    3d74:	00005200 	andeq	r5, r0, r0, lsl #4
    3d78:	00000000 	andeq	r0, r0, r0
    3d7c:	3c8c0000 	stccc	0, cr0, [ip], {0}
    3d80:	3cd80000 	ldclcc	0, cr0, [r8], {0}
    3d84:	00020000 	andeq	r0, r2, r0
    3d88:	3cd89f30 	ldclcc	15, cr9, [r8], {48}	; 0x30
    3d8c:	3cdc0000 	ldclcc	0, cr0, [ip], {0}
    3d90:	00010000 	andeq	r0, r1, r0
    3d94:	003cdc54 	eorseq	sp, ip, r4, asr ip
    3d98:	003ce200 	eorseq	lr, ip, r0, lsl #4
    3d9c:	30000200 	andcc	r0, r0, r0, lsl #4
    3da0:	003ce29f 	mlaseq	ip, pc, r2, lr	; <UNPREDICTABLE>
    3da4:	003d8000 	eorseq	r8, sp, r0
    3da8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3db4:	00003da4 	andeq	r3, r0, r4, lsr #27
    3db8:	00003dae 	andeq	r3, r0, lr, lsr #27
    3dbc:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    3dc0:	c000003d 	andgt	r0, r0, sp, lsr r0
    3dc4:	0300003d 	movweq	r0, #61	; 0x3d
    3dc8:	9f707500 	svcls	0x00707500
    3dcc:	00003dc0 	andeq	r3, r0, r0, asr #27
    3dd0:	00003dc4 	andeq	r3, r0, r4, asr #27
    3dd4:	01f30004 	mvnseq	r0, r4
    3dd8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3de8:	00020000 	andeq	r0, r2, r0
    3dec:	00009f30 	andeq	r9, r0, r0, lsr pc
    3df0:	00000000 	andeq	r0, r0, r0
    3df4:	00020000 	andeq	r0, r2, r0
    3df8:	00009f31 	andeq	r9, r0, r1, lsr pc
    3dfc:	00000000 	andeq	r0, r0, r0
    3e00:	00020000 	andeq	r0, r2, r0
    3e04:	00009f32 	andeq	r9, r0, r2, lsr pc
    3e08:	00000000 	andeq	r0, r0, r0
    3e0c:	00020000 	andeq	r0, r2, r0
    3e10:	00009f33 	andeq	r9, r0, r3, lsr pc
    3e14:	00000000 	andeq	r0, r0, r0
    3e18:	00020000 	andeq	r0, r2, r0
    3e1c:	00009f34 	andeq	r9, r0, r4, lsr pc
    3e20:	00000000 	andeq	r0, r0, r0
    3e24:	00020000 	andeq	r0, r2, r0
    3e28:	00009f35 	andeq	r9, r0, r5, lsr pc
    3e2c:	00000000 	andeq	r0, r0, r0
    3e30:	00020000 	andeq	r0, r2, r0
    3e34:	00009f36 	andeq	r9, r0, r6, lsr pc
    3e38:	00000000 	andeq	r0, r0, r0
    3e3c:	00020000 	andeq	r0, r2, r0
    3e40:	00009f37 	andeq	r9, r0, r7, lsr pc
    3e44:	00000000 	andeq	r0, r0, r0
    3e48:	00020000 	andeq	r0, r2, r0
    3e4c:	00009f38 	andeq	r9, r0, r8, lsr pc
    3e50:	00000000 	andeq	r0, r0, r0
    3e54:	00020000 	andeq	r0, r2, r0
    3e58:	00009f39 	andeq	r9, r0, r9, lsr pc
    3e5c:	00000000 	andeq	r0, r0, r0
    3e60:	00020000 	andeq	r0, r2, r0
    3e64:	00009f3a 	andeq	r9, r0, sl, lsr pc
    3e68:	00000000 	andeq	r0, r0, r0
    3e6c:	00020000 	andeq	r0, r2, r0
    3e70:	00009f3b 	andeq	r9, r0, fp, lsr pc
    3e74:	00000000 	andeq	r0, r0, r0
    3e78:	00020000 	andeq	r0, r2, r0
    3e7c:	00009f3c 	andeq	r9, r0, ip, lsr pc
    3e80:	00000000 	andeq	r0, r0, r0
    3e84:	3de00000 	stclcc	0, cr0, [r0]
    3e88:	3e1e0000 	cdpcc	0, 1, cr0, cr14, cr0, {0}
    3e8c:	00010000 	andeq	r0, r1, r0
    3e90:	003e1e50 	eorseq	r1, lr, r0, asr lr
    3e94:	003e8000 	eorseq	r8, lr, r0
    3e98:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3e9c:	00003e80 	andeq	r3, r0, r0, lsl #29
    3ea0:	00003eb4 			; <UNDEFINED> instruction: 0x00003eb4
    3ea4:	01f30004 	mvnseq	r0, r4
    3ea8:	00009f50 	andeq	r9, r0, r0, asr pc
    3eac:	00000000 	andeq	r0, r0, r0
    3eb0:	3e1c0000 	cdpcc	0, 1, cr0, cr12, cr0, {0}
    3eb4:	3e800000 	cdpcc	0, 8, cr0, cr0, cr0, {0}
    3eb8:	00010000 	andeq	r0, r1, r0
    3ebc:	00000054 	andeq	r0, r0, r4, asr r0
    3ec0:	00000000 	andeq	r0, r0, r0
    3ec4:	003e3200 	eorseq	r3, lr, r0, lsl #4
    3ec8:	003e3400 	eorseq	r3, lr, r0, lsl #8
    3ecc:	73000700 	movwvc	r0, #1792	; 0x700
    3ed0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    3ed4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3ed8:	00000000 	andeq	r0, r0, r0
    3edc:	3e420000 	cdpcc	0, 4, cr0, cr2, cr0, {0}
    3ee0:	3e5c0000 	cdpcc	0, 5, cr0, cr12, cr0, {0}
    3ee4:	00010000 	andeq	r0, r1, r0
    3ee8:	00000053 	andeq	r0, r0, r3, asr r0
    3eec:	00000000 	andeq	r0, r0, r0
    3ef0:	003e4600 	eorseq	r4, lr, r0, lsl #12
    3ef4:	003e5200 	eorseq	r5, lr, r0, lsl #4
    3ef8:	52000100 	andpl	r0, r0, #0, 2
    3efc:	00003e52 	andeq	r3, r0, r2, asr lr
    3f00:	00003e56 	andeq	r3, r0, r6, asr lr
    3f04:	06710003 	ldrbteq	r0, [r1], -r3
    3f08:	003e569f 	mlaseq	lr, pc, r6, r5	; <UNPREDICTABLE>
    3f0c:	003e5e00 	eorseq	r5, lr, r0, lsl #28
    3f10:	52000100 	andpl	r0, r0, #0, 2
	...
    3f1c:	00003eba 			; <UNDEFINED> instruction: 0x00003eba
    3f20:	00003f34 	andeq	r3, r0, r4, lsr pc
    3f24:	00540001 	subseq	r0, r4, r1
    3f28:	00000000 	andeq	r0, r0, r0
    3f2c:	20000000 	andcs	r0, r0, r0
    3f30:	2a00003f 	bcs	4034 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x60>
    3f34:	0100003f 	tsteq	r0, pc, lsr r0
    3f38:	00005300 	andeq	r5, r0, r0, lsl #6
    3f3c:	00000000 	andeq	r0, r0, r0
    3f40:	3f580000 	svccc	0x00580000
    3f44:	3f7e0000 	svccc	0x007e0000
    3f48:	00010000 	andeq	r0, r1, r0
    3f4c:	003f7e50 	eorseq	r7, pc, r0, asr lr	; <UNPREDICTABLE>
    3f50:	003fd400 	eorseq	sp, pc, r0, lsl #8
    3f54:	f3000400 	vshl.u8	d0, d0, d0
    3f58:	009f5001 	addseq	r5, pc, r1
    3f5c:	00000000 	andeq	r0, r0, r0
    3f60:	80000000 	andhi	r0, r0, r0
    3f64:	b400003f 	strlt	r0, [r0], #-63	; 0xffffffc1
    3f68:	0100003f 	tsteq	r0, pc, lsr r0
    3f6c:	00005300 	andeq	r5, r0, r0, lsl #6
    3f70:	00000000 	andeq	r0, r0, r0
    3f74:	3f840000 	svccc	0x00840000
    3f78:	3f920000 	svccc	0x00920000
    3f7c:	00010000 	andeq	r0, r1, r0
    3f80:	003f9251 	eorseq	r9, pc, r1, asr r2	; <UNPREDICTABLE>
    3f84:	003f9400 	eorseq	r9, pc, r0, lsl #8
    3f88:	72000600 	andvc	r0, r0, #0, 12
    3f8c:	1c007300 	stcne	3, cr7, [r0], {-0}
    3f90:	003f949f 	mlaseq	pc, pc, r4, r9	; <UNPREDICTABLE>
    3f94:	003f9a00 	eorseq	r9, pc, r0, lsl #20
    3f98:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3fa4:	00003f70 	andeq	r3, r0, r0, ror pc
    3fa8:	00003f82 	andeq	r3, r0, r2, lsl #31
    3fac:	00530001 	subseq	r0, r3, r1
    3fb0:	00000000 	andeq	r0, r0, r0
    3fb4:	d4000000 	strle	r0, [r0], #-0
    3fb8:	f700003f 			; <UNDEFINED> instruction: 0xf700003f
    3fbc:	0100003f 	tsteq	r0, pc, lsr r0
    3fc0:	3ff75000 	svccc	0x00f75000
    3fc4:	40020000 	andmi	r0, r2, r0
    3fc8:	00010000 	andeq	r0, r1, r0
    3fcc:	00400254 	subeq	r0, r0, r4, asr r2
    3fd0:	00400a00 	subeq	r0, r0, r0, lsl #20
    3fd4:	50000100 	andpl	r0, r0, r0, lsl #2
    3fd8:	0000400a 	andeq	r4, r0, sl
    3fdc:	00004056 	andeq	r4, r0, r6, asr r0
    3fe0:	00540001 	subseq	r0, r4, r1
    3fe4:	00000000 	andeq	r0, r0, r0
    3fe8:	10000000 	andne	r0, r0, r0
    3fec:	14000040 	strne	r0, [r0], #-64	; 0xffffffc0
    3ff0:	01000040 	tsteq	r0, r0, asr #32
    3ff4:	40165300 	andsmi	r5, r6, r0, lsl #6
    3ff8:	40240000 	eormi	r0, r4, r0
    3ffc:	00010000 	andeq	r0, r1, r0
    4000:	00402653 	subeq	r2, r0, r3, asr r6
    4004:	00402e00 	subeq	r2, r0, r0, lsl #28
    4008:	53000100 	movwpl	r0, #256	; 0x100
	...
    4014:	00004010 	andeq	r4, r0, r0, lsl r0
    4018:	00004044 	andeq	r4, r0, r4, asr #32
    401c:	00740005 	rsbseq	r0, r4, r5
    4020:	449f264c 	ldrmi	r2, [pc], #1612	; 4028 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    4024:	80000040 	andhi	r0, r0, r0, asr #32
    4028:	06000040 	streq	r0, [r0], -r0, asr #32
    402c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4030:	009f264c 	addseq	r2, pc, ip, asr #12
    4034:	00000000 	andeq	r0, r0, r0
    4038:	0a000000 	beq	4040 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x6c>
    403c:	14000040 	strne	r0, [r0], #-64	; 0xffffffc0
    4040:	01000040 	tsteq	r0, r0, asr #32
    4044:	00005300 	andeq	r5, r0, r0, lsl #6
    4048:	00000000 	andeq	r0, r0, r0
    404c:	40800000 	addmi	r0, r0, r0
    4050:	40940000 	addsmi	r0, r4, r0
    4054:	00010000 	andeq	r0, r1, r0
    4058:	00409450 	subeq	r9, r0, r0, asr r4
    405c:	0040dc00 	subeq	sp, r0, r0, lsl #24
    4060:	f3000400 	vshl.u8	d0, d0, d0
    4064:	009f5001 	addseq	r5, pc, r1
    4068:	00000000 	andeq	r0, r0, r0
    406c:	86000000 	strhi	r0, [r0], -r0
    4070:	8e000040 	cdphi	0, 0, cr0, cr0, cr0, {2}
    4074:	01000040 	tsteq	r0, r0, asr #32
    4078:	00005300 	andeq	r5, r0, r0, lsl #6
    407c:	00000000 	andeq	r0, r0, r0
    4080:	408a0000 	addmi	r0, sl, r0
    4084:	409c0000 	addsmi	r0, ip, r0
    4088:	00010000 	andeq	r0, r1, r0
    408c:	00409c52 	subeq	r9, r0, r2, asr ip
    4090:	00409e00 	subeq	r9, r0, r0, lsl #28
    4094:	72000500 	andvc	r0, r0, #0, 10
    4098:	9f253100 	svcls	0x00253100
    409c:	0000409e 	muleq	r0, lr, r0
    40a0:	000040a4 	andeq	r4, r0, r4, lsr #1
    40a4:	a8520001 	ldmdage	r2, {r0}^
    40a8:	ba000040 	blt	41b0 <NOROM_SetupGetTrimForAdcShVbufEn+0xc>
    40ac:	01000040 	tsteq	r0, r0, asr #32
    40b0:	40be5200 	adcsmi	r5, lr, r0, lsl #4
    40b4:	40c80000 	sbcmi	r0, r8, r0
    40b8:	00010000 	andeq	r0, r1, r0
    40bc:	0040ca52 	subeq	ip, r0, r2, asr sl
    40c0:	0040dc00 	subeq	sp, r0, r0, lsl #24
    40c4:	52000100 	andpl	r0, r0, #0, 2
	...
    40d0:	0000408e 	andeq	r4, r0, lr, lsl #1
    40d4:	00004098 	muleq	r0, r8, r0
    40d8:	98530001 	ldmdals	r3, {r0}^
    40dc:	9a000040 	bls	41e4 <NOROM_SetupGetTrimForXoscHfFastStart+0x4>
    40e0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    40e4:	31007300 	mrscc	r7, LR_irq
    40e8:	409a9f25 	addsmi	r9, sl, r5, lsr #30
    40ec:	409c0000 	addsmi	r0, ip, r0
    40f0:	00010000 	andeq	r0, r1, r0
    40f4:	00409c53 	subeq	r9, r0, r3, asr ip
    40f8:	0040a800 	subeq	sl, r0, r0, lsl #16
    40fc:	0a000400 	beq	5104 <port_confs+0x20>
    4100:	a89fffff 	ldmge	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    4104:	ae000040 	cdpge	0, 0, cr0, cr0, cr0, {2}
    4108:	01000040 	tsteq	r0, r0, asr #32
    410c:	40b25300 	adcsmi	r5, r2, r0, lsl #6
    4110:	40b80000 	adcsmi	r0, r8, r0
    4114:	00010000 	andeq	r0, r1, r0
    4118:	0040b853 	subeq	fp, r0, r3, asr r8
    411c:	0040ca00 	subeq	ip, r0, r0, lsl #20
    4120:	31000200 	mrscc	r0, R8_usr
    4124:	0040ca9f 	umaaleq	ip, r0, pc, sl	; <UNPREDICTABLE>
    4128:	0040dc00 	subeq	sp, r0, r0, lsl #24
    412c:	53000100 	movwpl	r0, #256	; 0x100
	...
    4138:	0000408e 	andeq	r4, r0, lr, lsl #1
    413c:	00004094 	muleq	r0, r4, r0
    4140:	9f300002 	svcls	0x00300002
    4144:	00004094 	muleq	r0, r4, r0
    4148:	000040d0 	ldrdeq	r4, [r0], -r0
    414c:	00500001 	subseq	r0, r0, r1
    4150:	00000000 	andeq	r0, r0, r0
    4154:	d0000000 	andle	r0, r0, r0
    4158:	d4000040 	strle	r0, [r0], #-64	; 0xffffffc0
    415c:	08000040 	stmdaeq	r0, {r6}
    4160:	40007200 	andmi	r7, r0, r0, lsl #4
    4164:	21007324 	tstcs	r0, r4, lsr #6
    4168:	0040d49f 	umaaleq	sp, r0, pc, r4	; <UNPREDICTABLE>
    416c:	0040dc00 	subeq	sp, r0, r0, lsl #24
    4170:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    417c:	000040e6 	andeq	r4, r0, r6, ror #1
    4180:	000040ea 	andeq	r4, r0, sl, ror #1
    4184:	0070000a 	rsbseq	r0, r0, sl
    4188:	24381a33 	ldrtcs	r1, [r8], #-2611	; 0xfffff5cd
    418c:	9f210073 	svcls	0x00210073
    4190:	000040ee 	andeq	r4, r0, lr, ror #1
    4194:	000040f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4198:	00500001 	subseq	r0, r0, r1
	...
    41a8:	07000000 	streq	r0, [r0, -r0]
    41ac:	0a007000 	beq	201b4 <__ccfg+0x20c>
    41b0:	9f1a3fff 	svcls	0x001a3fff
	...
    41bc:	000040f8 	strdeq	r4, [r0], -r8
    41c0:	000040fc 	strdeq	r4, [r0], -ip
    41c4:	0070000f 	rsbseq	r0, r0, pc
    41c8:	701afc08 	andsvc	pc, sl, r8, lsl #24
    41cc:	f8801100 			; <UNDEFINED> instruction: 0xf8801100
    41d0:	211a67f3 			; <UNDEFINED> instruction: 0x211a67f3
    41d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    41d8:	00000000 	andeq	r0, r0, r0
    41dc:	0040f800 	subeq	pc, r0, r0, lsl #16
    41e0:	0040fc00 	subeq	pc, r0, r0, lsl #24
    41e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    41f0:	00004108 	andeq	r4, r0, r8, lsl #2
    41f4:	0000410c 	andeq	r4, r0, ip, lsl #2
    41f8:	0070000f 	rsbseq	r0, r0, pc
    41fc:	701a3f08 	andsvc	r3, sl, r8, lsl #30
    4200:	ffc00c00 			; <UNDEFINED> instruction: 0xffc00c00
    4204:	211a00fc 	ldrshcs	r0, [sl, -ip]
    4208:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    420c:	00000000 	andeq	r0, r0, r0
    4210:	00410800 	subeq	r0, r1, r0, lsl #16
    4214:	00410c00 	subeq	r0, r1, r0, lsl #24
    4218:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4224:	00004118 	andeq	r4, r0, r8, lsl r1
    4228:	0000416e 	andeq	r4, r0, lr, ror #2
    422c:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    4230:	7c000041 	stcvc	0, cr0, [r0], {65}	; 0x41
    4234:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4238:	5001f300 	andpl	pc, r1, r0, lsl #6
    423c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4240:	00000000 	andeq	r0, r0, r0
    4244:	00415800 	subeq	r5, r1, r0, lsl #16
    4248:	00416000 	subeq	r6, r1, r0
    424c:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    4250:	ff000a00 			; <UNDEFINED> instruction: 0xff000a00
    4254:	0800741a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp, lr}
    4258:	72211af0 	eorvc	r1, r1, #240, 20	; 0xf0000
    425c:	21244400 			; <UNDEFINED> instruction: 0x21244400
    4260:	24400073 	strbcs	r0, [r0], #-115	; 0xffffff8d
    4264:	41649f21 	cmnmi	r4, r1, lsr #30
    4268:	417c0000 	cmnmi	ip, r0
    426c:	00010000 	andeq	r0, r1, r0
    4270:	00000053 	andeq	r0, r0, r3, asr r0
    4274:	00000000 	andeq	r0, r0, r0
    4278:	00412000 	subeq	r2, r1, r0
    427c:	00416a00 	subeq	r6, r1, r0, lsl #20
    4280:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    428c:	00004126 	andeq	r4, r0, r6, lsr #2
    4290:	0000413a 	andeq	r4, r0, sl, lsr r1
    4294:	3a520001 	bcc	14842a0 <__ccfg+0x14642f8>
    4298:	46000041 	strmi	r0, [r0], -r1, asr #32
    429c:	06000041 	streq	r0, [r0], -r1, asr #32
    42a0:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    42a4:	589f24ec 	ldmpl	pc, {r2, r3, r5, r6, r7, sl, sp}	; <UNPREDICTABLE>
    42a8:	60000041 	andvs	r0, r0, r1, asr #32
    42ac:	01000041 	tsteq	r0, r1, asr #32
    42b0:	00005200 	andeq	r5, r0, r0, lsl #4
    42b4:	00000000 	andeq	r0, r0, r0
    42b8:	412e0000 			; <UNDEFINED> instruction: 0x412e0000
    42bc:	414c0000 	mrsmi	r0, (UNDEF: 76)
    42c0:	00010000 	andeq	r0, r1, r0
    42c4:	00414c53 	subeq	r4, r1, r3, asr ip
    42c8:	00415800 	subeq	r5, r1, r0, lsl #16
    42cc:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    42d0:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    42d4:	0041589f 	umaaleq	r5, r1, pc, r8	; <UNPREDICTABLE>
    42d8:	00416400 	subeq	r6, r1, r0, lsl #8
    42dc:	53000100 	movwpl	r0, #256	; 0x100
	...
    42e8:	00004138 	andeq	r4, r0, r8, lsr r1
    42ec:	0000413a 	andeq	r4, r0, sl, lsr r1
    42f0:	00760006 	rsbseq	r0, r6, r6
    42f4:	9f220072 	svcls	0x00220072
    42f8:	0000413a 	andeq	r4, r0, sl, lsr r1
    42fc:	00004142 	andeq	r4, r0, r2, asr #2
    4300:	42520001 	subsmi	r0, r2, #1
    4304:	44000041 	strmi	r0, [r0], #-65	; 0xffffffbf
    4308:	09000041 	stmdbeq	r0, {r0, r6}
    430c:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    4310:	007624ec 	rsbseq	r2, r6, ip, ror #9
    4314:	41449f22 	cmpmi	r4, r2, lsr #30
    4318:	41460000 	mrsmi	r0, (UNDEF: 70)
    431c:	00010000 	andeq	r0, r1, r0
    4320:	00414a55 	subeq	r4, r1, r5, asr sl
    4324:	00414c00 	subeq	r4, r1, r0, lsl #24
    4328:	71000600 	tstvc	r0, r0, lsl #12
    432c:	22007300 	andcs	r7, r0, #0, 6
    4330:	00414c9f 	umaaleq	r4, r1, pc, ip	; <UNPREDICTABLE>
    4334:	00415400 	subeq	r5, r1, r0, lsl #8
    4338:	53000100 	movwpl	r0, #256	; 0x100
    433c:	00004154 	andeq	r4, r0, r4, asr r1
    4340:	00004156 	andeq	r4, r0, r6, asr r1
    4344:	00740009 	rsbseq	r0, r4, r9
    4348:	7124f009 	msrvc	CPSR_s, r9
    434c:	569f2200 	ldrpl	r2, [pc], r0, lsl #4
    4350:	58000041 	stmdapl	r0, {r0, r6}
    4354:	02000041 	andeq	r0, r0, #65	; 0x41
    4358:	009f3000 	addseq	r3, pc, r0
    435c:	00000000 	andeq	r0, r0, r0
    4360:	7c000000 	stcvc	0, cr0, [r0], {-0}
    4364:	84000041 	strhi	r0, [r0], #-65	; 0xffffffbf
    4368:	01000041 	tsteq	r0, r1, asr #32
    436c:	41845000 	orrmi	r5, r4, r0
    4370:	41900000 	orrsmi	r0, r0, r0
    4374:	00040000 	andeq	r0, r4, r0
    4378:	9f5001f3 	svcls	0x005001f3
	...
    4384:	0000417c 	andeq	r4, r0, ip, ror r1
    4388:	0000418a 	andeq	r4, r0, sl, lsl #3
    438c:	9f300002 	svcls	0x00300002
    4390:	0000418a 	andeq	r4, r0, sl, lsl #3
    4394:	00004190 	muleq	r0, r0, r1
    4398:	00500001 	subseq	r0, r0, r1
    439c:	00000000 	andeq	r0, r0, r0
    43a0:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    43a4:	84000041 	strhi	r0, [r0], #-65	; 0xffffffbf
    43a8:	01000041 	tsteq	r0, r1, asr #32
    43ac:	41845000 	orrmi	r5, r4, r0
    43b0:	41900000 	orrsmi	r0, r0, r0
    43b4:	00040000 	andeq	r0, r4, r0
    43b8:	9f5001f3 	svcls	0x005001f3
	...
    43c4:	00004188 	andeq	r4, r0, r8, lsl #3
    43c8:	0000418a 	andeq	r4, r0, sl, lsl #3
    43cc:	00500001 	subseq	r0, r0, r1
    43d0:	00000000 	andeq	r0, r0, r0
    43d4:	90000000 	andls	r0, r0, r0
    43d8:	98000041 	stmdals	r0, {r0, r6}
    43dc:	01000041 	tsteq	r0, r1, asr #32
    43e0:	41985000 	orrsmi	r5, r8, r0
    43e4:	41a40000 			; <UNDEFINED> instruction: 0x41a40000
    43e8:	00040000 	andeq	r0, r4, r0
    43ec:	9f5001f3 	svcls	0x005001f3
	...
    43f8:	00004190 	muleq	r0, r0, r1
    43fc:	0000419e 	muleq	r0, lr, r1
    4400:	9f310002 	svcls	0x00310002
    4404:	0000419e 	muleq	r0, lr, r1
    4408:	000041a4 	andeq	r4, r0, r4, lsr #3
    440c:	00500001 	subseq	r0, r0, r1
    4410:	00000000 	andeq	r0, r0, r0
    4414:	92000000 	andls	r0, r0, #0
    4418:	98000041 	stmdals	r0, {r0, r6}
    441c:	01000041 	tsteq	r0, r1, asr #32
    4420:	41985000 	orrsmi	r5, r8, r0
    4424:	41a40000 			; <UNDEFINED> instruction: 0x41a40000
    4428:	00040000 	andeq	r0, r4, r0
    442c:	9f5001f3 	svcls	0x005001f3
	...
    4438:	0000419c 	muleq	r0, ip, r1
    443c:	0000419e 	muleq	r0, lr, r1
    4440:	00500001 	subseq	r0, r0, r1
    4444:	00000000 	andeq	r0, r0, r0
    4448:	a4000000 	strge	r0, [r0], #-0
    444c:	ac000041 	stcge	0, cr0, [r0], {65}	; 0x41
    4450:	01000041 	tsteq	r0, r1, asr #32
    4454:	41ac5000 			; <UNDEFINED> instruction: 0x41ac5000
    4458:	41b80000 			; <UNDEFINED> instruction: 0x41b80000
    445c:	00040000 	andeq	r0, r4, r0
    4460:	9f5001f3 	svcls	0x005001f3
	...
    446c:	000041a4 	andeq	r4, r0, r4, lsr #3
    4470:	000041b2 			; <UNDEFINED> instruction: 0x000041b2
    4474:	9f310002 	svcls	0x00310002
    4478:	000041b2 			; <UNDEFINED> instruction: 0x000041b2
    447c:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    4480:	00500001 	subseq	r0, r0, r1
    4484:	00000000 	andeq	r0, r0, r0
    4488:	a6000000 	strge	r0, [r0], -r0
    448c:	ac000041 	stcge	0, cr0, [r0], {65}	; 0x41
    4490:	01000041 	tsteq	r0, r1, asr #32
    4494:	41ac5000 			; <UNDEFINED> instruction: 0x41ac5000
    4498:	41b80000 			; <UNDEFINED> instruction: 0x41b80000
    449c:	00040000 	andeq	r0, r4, r0
    44a0:	9f5001f3 	svcls	0x005001f3
	...
    44ac:	000041b0 			; <UNDEFINED> instruction: 0x000041b0
    44b0:	000041b2 			; <UNDEFINED> instruction: 0x000041b2
    44b4:	00500001 	subseq	r0, r0, r1
    44b8:	00000000 	andeq	r0, r0, r0
    44bc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    44c0:	c4000041 	strgt	r0, [r0], #-65	; 0xffffffbf
    44c4:	01000041 	tsteq	r0, r1, asr #32
    44c8:	41c45000 	bicmi	r5, r4, r0
    44cc:	41e00000 	mvnmi	r0, r0
    44d0:	00040000 	andeq	r0, r4, r0
    44d4:	9f5001f3 	svcls	0x005001f3
	...
    44e0:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    44e4:	000041da 	ldrdeq	r4, [r0], -sl
    44e8:	9f300002 	svcls	0x00300002
    44ec:	000041da 	ldrdeq	r4, [r0], -sl
    44f0:	000041e0 	andeq	r4, r0, r0, ror #3
    44f4:	00500001 	subseq	r0, r0, r1
    44f8:	00000000 	andeq	r0, r0, r0
    44fc:	ba000000 	blt	4504 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>
    4500:	c4000041 	strgt	r0, [r0], #-65	; 0xffffffbf
    4504:	01000041 	tsteq	r0, r1, asr #32
    4508:	41c45000 	bicmi	r5, r4, r0
    450c:	41e00000 	mvnmi	r0, r0
    4510:	00040000 	andeq	r0, r4, r0
    4514:	9f5001f3 	svcls	0x005001f3
	...
    4520:	000041cc 	andeq	r4, r0, ip, asr #3
    4524:	000041d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4528:	00730010 	rsbseq	r0, r3, r0, lsl r0
    452c:	1a24464c 	bne	915e64 <__ccfg+0x8f5ebc>
    4530:	24322548 	ldrtcs	r2, [r2], #-1352	; 0xfffffab8
    4534:	24380072 	ldrtcs	r0, [r8], #-114	; 0xffffff8e
    4538:	41d69f21 	bicsmi	r9, r6, r1, lsr #30
    453c:	41da0000 	bicsmi	r0, sl, r0
    4540:	00010000 	andeq	r0, r1, r0
    4544:	00000050 	andeq	r0, r0, r0, asr r0
    4548:	00000000 	andeq	r0, r0, r0
    454c:	0041c000 	subeq	ip, r1, r0
    4550:	0041d400 	subeq	sp, r1, r0, lsl #8
    4554:	53000100 	movwpl	r0, #256	; 0x100
	...
    4560:	000041e4 	andeq	r4, r0, r4, ror #3
    4564:	000041e8 	andeq	r4, r0, r8, ror #3
    4568:	00700009 	rsbseq	r0, r0, r9
    456c:	1a244048 	bne	914694 <__ccfg+0x8f46ec>
    4570:	009f2543 	addseq	r2, pc, r3, asr #10
    4574:	00000000 	andeq	r0, r0, r0
    4578:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    457c:	fc000041 	stc2	0, cr0, [r0], {65}	; 0x41
    4580:	01000041 	tsteq	r0, r1, asr #32
    4584:	41fc5000 	mvnsmi	r5, r0
    4588:	421c0000 	andsmi	r0, ip, #0
    458c:	00040000 	andeq	r0, r4, r0
    4590:	9f5001f3 	svcls	0x005001f3
	...
    459c:	000041f0 	strdeq	r4, [r0], -r0
    45a0:	00004212 	andeq	r4, r0, r2, lsl r2
    45a4:	000c0006 	andeq	r0, ip, r6
    45a8:	9f403f80 	svcls	0x00403f80
    45ac:	00004212 	andeq	r4, r0, r2, lsl r2
    45b0:	0000421c 	andeq	r4, r0, ip, lsl r2
    45b4:	00500001 	subseq	r0, r0, r1
    45b8:	00000000 	andeq	r0, r0, r0
    45bc:	f2000000 	vhadd.s8	d0, d0, d0
    45c0:	fc000041 	stc2	0, cr0, [r0], {65}	; 0x41
    45c4:	01000041 	tsteq	r0, r1, asr #32
    45c8:	41fc5000 	mvnsmi	r5, r0
    45cc:	421c0000 	andsmi	r0, ip, #0
    45d0:	00040000 	andeq	r0, r4, r0
    45d4:	9f5001f3 	svcls	0x005001f3
	...
    45e0:	00004200 	andeq	r4, r0, r0, lsl #4
    45e4:	00004206 	andeq	r4, r0, r6, lsl #4
    45e8:	00730010 	rsbseq	r0, r3, r0, lsl r0
    45ec:	1a03f00a 	bne	10061c <__ccfg+0xe0674>
    45f0:	24402534 	strbcs	r2, [r0], #-1332	; 0xfffffacc
    45f4:	24460072 	strbcs	r0, [r6], #-114	; 0xffffff8e
    45f8:	42109f21 	andsmi	r9, r0, #33, 30	; 0x84
    45fc:	42120000 	andsmi	r0, r2, #0
    4600:	00010000 	andeq	r0, r1, r0
    4604:	00000050 	andeq	r0, r0, r0, asr r0
    4608:	00000000 	andeq	r0, r0, r0
    460c:	0041f800 	subeq	pc, r1, r0, lsl #16
    4610:	00420600 	subeq	r0, r2, r0, lsl #12
    4614:	53000100 	movwpl	r0, #256	; 0x100
	...
    4620:	0000421c 	andeq	r4, r0, ip, lsl r2
    4624:	00004224 	andeq	r4, r0, r4, lsr #4
    4628:	24500001 	ldrbcs	r0, [r0], #-1
    462c:	30000042 	andcc	r0, r0, r2, asr #32
    4630:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
    4634:	5001f300 	andpl	pc, r1, r0, lsl #6
    4638:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    463c:	00000000 	andeq	r0, r0, r0
    4640:	00421c00 	subeq	r1, r2, r0, lsl #24
    4644:	00422a00 	subeq	r2, r2, r0, lsl #20
    4648:	30000200 	andcc	r0, r0, r0, lsl #4
    464c:	00422a9f 	umaaleq	r2, r2, pc, sl	; <UNPREDICTABLE>
    4650:	00423000 	subeq	r3, r2, r0
    4654:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4660:	0000421e 	andeq	r4, r0, lr, lsl r2
    4664:	00004224 	andeq	r4, r0, r4, lsr #4
    4668:	24500001 	ldrbcs	r0, [r0], #-1
    466c:	30000042 	andcc	r0, r0, r2, asr #32
    4670:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
    4674:	5001f300 	andpl	pc, r1, r0, lsl #6
    4678:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    467c:	00000000 	andeq	r0, r0, r0
    4680:	00422800 	subeq	r2, r2, r0, lsl #16
    4684:	00422a00 	subeq	r2, r2, r0, lsl #20
    4688:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4694:	00004230 	andeq	r4, r0, r0, lsr r2
    4698:	00004238 	andeq	r4, r0, r8, lsr r2
    469c:	38500001 	ldmdacc	r0, {r0}^
    46a0:	44000042 	strmi	r0, [r0], #-66	; 0xffffffbe
    46a4:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
    46a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    46ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46b0:	00000000 	andeq	r0, r0, r0
    46b4:	00423000 	subeq	r3, r2, r0
    46b8:	00423e00 	subeq	r3, r2, r0, lsl #28
    46bc:	30000200 	andcc	r0, r0, r0, lsl #4
    46c0:	00423e9f 	umaaleq	r3, r2, pc, lr	; <UNPREDICTABLE>
    46c4:	00424400 	subeq	r4, r2, r0, lsl #8
    46c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    46d4:	00004232 	andeq	r4, r0, r2, lsr r2
    46d8:	00004238 	andeq	r4, r0, r8, lsr r2
    46dc:	38500001 	ldmdacc	r0, {r0}^
    46e0:	44000042 	strmi	r0, [r0], #-66	; 0xffffffbe
    46e4:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
    46e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    46ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46f0:	00000000 	andeq	r0, r0, r0
    46f4:	00423c00 	subeq	r3, r2, r0, lsl #24
    46f8:	00423e00 	subeq	r3, r2, r0, lsl #28
    46fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4708:	00004244 	andeq	r4, r0, r4, asr #4
    470c:	0000424a 	andeq	r4, r0, sl, asr #4
    4710:	4a500001 	bmi	140471c <__ccfg+0x13e4774>
    4714:	34000042 	strcc	r0, [r0], #-66	; 0xffffffbe
    4718:	01000043 	tsteq	r0, r3, asr #32
    471c:	43345500 	teqmi	r4, #0, 10
    4720:	43540000 	cmpmi	r4, #0
    4724:	00040000 	andeq	r0, r4, r0
    4728:	9f5001f3 	svcls	0x005001f3
	...
    4734:	00004244 	andeq	r4, r0, r4, asr #4
    4738:	0000424d 	andeq	r4, r0, sp, asr #4
    473c:	4d510001 	ldclmi	0, cr0, [r1, #-4]
    4740:	54000042 	strpl	r0, [r0], #-66	; 0xffffffbe
    4744:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
    4748:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    474c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4750:	00000000 	andeq	r0, r0, r0
    4754:	00425200 	subeq	r5, r2, r0, lsl #4
    4758:	00425600 	subeq	r5, r2, r0, lsl #12
    475c:	50000100 	andpl	r0, r0, r0, lsl #2
    4760:	00004256 	andeq	r4, r0, r6, asr r2
    4764:	00004259 	andeq	r4, r0, r9, asr r2
    4768:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    476c:	62000042 	andvs	r0, r0, #66	; 0x42
    4770:	01000042 	tsteq	r0, r2, asr #32
    4774:	428c5000 	addmi	r5, ip, #0
    4778:	428e0000 	addmi	r0, lr, #0
    477c:	00010000 	andeq	r0, r1, r0
    4780:	00428e50 	subeq	r8, r2, r0, asr lr
    4784:	00429100 	subeq	r9, r2, r0, lsl #2
    4788:	52000100 	andpl	r0, r0, #0, 2
    478c:	0000429a 	muleq	r0, sl, r2
    4790:	0000429c 	muleq	r0, ip, r2
    4794:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4798:	9f000042 	svcls	0x00000042
    479c:	01000042 	tsteq	r0, r2, asr #32
    47a0:	42aa5200 	adcmi	r5, sl, #0, 4
    47a4:	42ac0000 	adcmi	r0, ip, #0
    47a8:	00010000 	andeq	r0, r1, r0
    47ac:	0042ac50 	subeq	sl, r2, r0, asr ip
    47b0:	0042af00 	subeq	sl, r2, r0, lsl #30
    47b4:	52000100 	andpl	r0, r0, #0, 2
    47b8:	000042b6 			; <UNDEFINED> instruction: 0x000042b6
    47bc:	000042b8 			; <UNDEFINED> instruction: 0x000042b8
    47c0:	c8500001 	ldmdagt	r0, {r0}^
    47c4:	cc000042 	stcgt	0, cr0, [r0], {66}	; 0x42
    47c8:	01000042 	tsteq	r0, r2, asr #32
    47cc:	42da5000 	sbcsmi	r5, sl, #0
    47d0:	42dc0000 	sbcsmi	r0, ip, #0
    47d4:	00010000 	andeq	r0, r1, r0
    47d8:	0042dc50 	subeq	sp, r2, r0, asr ip
    47dc:	0042df00 	subeq	sp, r2, r0, lsl #30
    47e0:	52000100 	andpl	r0, r0, #0, 2
    47e4:	000042e6 	andeq	r4, r0, r6, ror #5
    47e8:	000042e8 	andeq	r4, r0, r8, ror #5
    47ec:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    47f0:	fa000042 	blx	4900 <memcpy+0x38>
    47f4:	01000042 	tsteq	r0, r2, asr #32
    47f8:	430a5000 	movwmi	r5, #40960	; 0xa000
    47fc:	430e0000 	movwmi	r0, #57344	; 0xe000
    4800:	00010000 	andeq	r0, r1, r0
    4804:	00432250 	subeq	r2, r3, r0, asr r2
    4808:	00432400 	subeq	r2, r3, r0, lsl #8
    480c:	50000100 	andpl	r0, r0, r0, lsl #2
    4810:	00004324 	andeq	r4, r0, r4, lsr #6
    4814:	00004327 	andeq	r4, r0, r7, lsr #6
    4818:	00520001 	subseq	r0, r2, r1
    481c:	00000000 	andeq	r0, r0, r0
    4820:	7a000000 	bvc	4828 <NOROM_ChipInfo_GetHwRevision+0x14>
    4824:	80000042 	andhi	r0, r0, r2, asr #32
    4828:	07000042 	streq	r0, [r0, -r2, asr #32]
    482c:	0a007200 	beq	21034 <__ccfg+0x108c>
    4830:	9f1a3fff 	svcls	0x001a3fff
	...
    483c:	0000436e 	andeq	r4, r0, lr, ror #6
    4840:	00004378 	andeq	r4, r0, r8, ror r3
    4844:	00730009 	rsbseq	r0, r3, r9
    4848:	0000040c 	andeq	r0, r0, ip, lsl #8
    484c:	009f2120 	addseq	r2, pc, r0, lsr #2
    4850:	00000000 	andeq	r0, r0, r0
    4854:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    4858:	c0000043 	andgt	r0, r0, r3, asr #32
    485c:	01000043 	tsteq	r0, r3, asr #32
    4860:	43c05000 	bicmi	r5, r0, #0
    4864:	43e00000 	mvnmi	r0, #0
    4868:	00040000 	andeq	r0, r4, r0
    486c:	9f5001f3 	svcls	0x005001f3
	...
    4878:	000043e0 	andeq	r4, r0, r0, ror #7
    487c:	00004408 	andeq	r4, r0, r8, lsl #8
    4880:	08500001 	ldmdaeq	r0, {r0}^
    4884:	48000044 	stmdami	r0, {r2, r6}
    4888:	01000044 	tsteq	r0, r4, asr #32
    488c:	44485400 	strbmi	r5, [r8], #-1024	; 0xfffffc00
    4890:	44500000 	ldrbmi	r0, [r0], #-0
    4894:	00010000 	andeq	r0, r1, r0
    4898:	00445050 	subeq	r5, r4, r0, asr r0
    489c:	00449a00 	subeq	r9, r4, r0, lsl #20
    48a0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    48a4:	0000449a 	muleq	r0, sl, r4
    48a8:	000044d6 	ldrdeq	r4, [r0], -r6
    48ac:	01f30004 	mvnseq	r0, r4
    48b0:	44d69f50 	ldrbmi	r9, [r6], #3920	; 0xf50
    48b4:	44da0000 	ldrbmi	r0, [sl], #0
    48b8:	00010000 	andeq	r0, r1, r0
    48bc:	0044da54 	subeq	sp, r4, r4, asr sl
    48c0:	00453000 	subeq	r3, r5, r0
    48c4:	f3000400 	vshl.u8	d0, d0, d0
    48c8:	009f5001 	addseq	r5, pc, r1
    48cc:	00000000 	andeq	r0, r0, r0
    48d0:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    48d4:	38000043 	stmdacc	r0, {r0, r1, r6}
    48d8:	01000044 	tsteq	r0, r4, asr #32
    48dc:	00005300 	andeq	r5, r0, r0, lsl #6
    48e0:	00000000 	andeq	r0, r0, r0
    48e4:	446a0000 	strbtmi	r0, [sl], #-0
    48e8:	44700000 	ldrbtmi	r0, [r0], #-0
    48ec:	00010000 	andeq	r0, r1, r0
    48f0:	00000050 	andeq	r0, r0, r0, asr r0
    48f4:	00000000 	andeq	r0, r0, r0
    48f8:	00449a00 	subeq	r9, r4, r0, lsl #20
    48fc:	00449c00 	subeq	r9, r4, r0, lsl #24
    4900:	50000100 	andpl	r0, r0, r0, lsl #2
    4904:	0000449c 	muleq	r0, ip, r4
    4908:	000044b0 			; <UNDEFINED> instruction: 0x000044b0
    490c:	00540001 	subseq	r0, r4, r1
    4910:	00000000 	andeq	r0, r0, r0
    4914:	b0000000 	andlt	r0, r0, r0
    4918:	d0000044 	andle	r0, r0, r4, asr #32
    491c:	01000044 	tsteq	r0, r4, asr #32
    4920:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    4930:	00010000 	andeq	r0, r1, r0
    4934:	00000055 	andeq	r0, r0, r5, asr r0
    4938:	00000000 	andeq	r0, r0, r0
    493c:	75000300 	strvc	r0, [r0, #-768]	; 0xfffffd00
    4940:	00009f7f 	andeq	r9, r0, pc, ror pc
    4944:	00000000 	andeq	r0, r0, r0
    4948:	00010000 	andeq	r0, r1, r0
    494c:	00000055 	andeq	r0, r0, r5, asr r0
    4950:	00000000 	andeq	r0, r0, r0
    4954:	00453000 	subeq	r3, r5, r0
    4958:	00454f00 	subeq	r4, r5, r0, lsl #30
    495c:	50000100 	andpl	r0, r0, r0, lsl #2
    4960:	0000454f 	andeq	r4, r0, pc, asr #10
    4964:	00004610 	andeq	r4, r0, r0, lsl r6
    4968:	10570001 	subsne	r0, r7, r1
    496c:	50000046 	andpl	r0, r0, r6, asr #32
    4970:	04000047 	streq	r0, [r0], #-71	; 0xffffffb9
    4974:	5001f300 	andpl	pc, r1, r0, lsl #6
    4978:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    497c:	00000000 	andeq	r0, r0, r0
    4980:	00455000 	subeq	r5, r5, r0
    4984:	0046d000 	subeq	sp, r6, r0
    4988:	50000100 	andpl	r0, r0, r0, lsl #2
    498c:	000046d2 	ldrdeq	r4, [r0], -r2
    4990:	0000470c 	andeq	r4, r0, ip, lsl #14
    4994:	00500001 	subseq	r0, r0, r1
    4998:	00000000 	andeq	r0, r0, r0
    499c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    49a0:	fc000045 	stc2	0, cr0, [r0], {69}	; 0x45
    49a4:	03000045 	movweq	r0, #69	; 0x45
    49a8:	9f717000 	svcls	0x00717000
    49ac:	000045fc 	strdeq	r4, [r0], -ip
    49b0:	00004602 	andeq	r4, r0, r2, lsl #12
    49b4:	02510001 	subseq	r0, r1, #1
    49b8:	22000046 	andcs	r0, r0, #70	; 0x46
    49bc:	02000046 	andeq	r0, r0, #70	; 0x46
    49c0:	22549100 	subscs	r9, r4, #0, 2
    49c4:	2e000046 	cdpcs	0, 0, cr0, cr0, cr6, {2}
    49c8:	01000046 	tsteq	r0, r6, asr #32
    49cc:	462e5100 	strtmi	r5, [lr], -r0, lsl #2
    49d0:	46300000 	ldrtmi	r0, [r0], -r0
    49d4:	00020000 	andeq	r0, r2, r0
    49d8:	46305491 			; <UNDEFINED> instruction: 0x46305491
    49dc:	46320000 	ldrtmi	r0, [r2], -r0
    49e0:	00010000 	andeq	r0, r1, r0
    49e4:	00463251 	subeq	r3, r6, r1, asr r2
    49e8:	0046d800 	subeq	sp, r6, r0, lsl #16
    49ec:	91000200 	mrsls	r0, R8_usr
    49f0:	00000054 	andeq	r0, r0, r4, asr r0
    49f4:	00000000 	andeq	r0, r0, r0
    49f8:	00455c00 	subeq	r5, r5, r0, lsl #24
    49fc:	0045b600 	subeq	fp, r5, r0, lsl #12
    4a00:	51000100 	mrspl	r0, (UNDEF: 16)
    4a04:	000045be 			; <UNDEFINED> instruction: 0x000045be
    4a08:	000045c0 	andeq	r4, r0, r0, asr #11
    4a0c:	00510001 	subseq	r0, r1, r1
    4a10:	00000000 	andeq	r0, r0, r0
    4a14:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4a18:	bc000045 	stclt	0, cr0, [r0], {69}	; 0x45
    4a1c:	01000045 	tsteq	r0, r5, asr #32
    4a20:	45be5200 	ldrmi	r5, [lr, #512]!	; 0x200
    4a24:	46a00000 	strtmi	r0, [r0], r0
    4a28:	00010000 	andeq	r0, r1, r0
    4a2c:	00000052 	andeq	r0, r0, r2, asr r0
    4a30:	00000000 	andeq	r0, r0, r0
    4a34:	0045ae00 	subeq	sl, r5, r0, lsl #28
    4a38:	00469600 	subeq	r9, r6, r0, lsl #12
    4a3c:	53000100 	movwpl	r0, #256	; 0x100
	...
    4a48:	00004554 	andeq	r4, r0, r4, asr r5
    4a4c:	000046aa 	andeq	r4, r0, sl, lsr #13
    4a50:	00550001 	subseq	r0, r5, r1
    4a54:	00000000 	andeq	r0, r0, r0
    4a58:	50000000 	andpl	r0, r0, r0
    4a5c:	d8000045 	stmdale	r0, {r0, r2, r6}
    4a60:	02000045 	andeq	r0, r0, #69	; 0x45
    4a64:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    4a68:	0c000045 	stceq	0, cr0, [r0], {69}	; 0x45
    4a6c:	01000047 	tsteq	r0, r7, asr #32
    4a70:	00005400 	andeq	r5, r0, r0, lsl #8
    4a74:	00000000 	andeq	r0, r0, r0
    4a78:	45d00000 	ldrbmi	r0, [r0]
    4a7c:	45da0000 	ldrbmi	r0, [sl]
    4a80:	00010000 	andeq	r0, r1, r0
    4a84:	00000051 	andeq	r0, r0, r1, asr r0
    4a88:	00000000 	andeq	r0, r0, r0
    4a8c:	0045f800 	subeq	pc, r5, r0, lsl #16
    4a90:	00464800 	subeq	r4, r6, r0, lsl #16
    4a94:	30000200 	andcc	r0, r0, r0, lsl #4
    4a98:	0046489f 	umaaleq	r4, r6, pc, r8	; <UNPREDICTABLE>
    4a9c:	00466800 	subeq	r6, r6, r0, lsl #16
    4aa0:	51000100 	mrspl	r0, (UNDEF: 16)
    4aa4:	00004668 	andeq	r4, r0, r8, ror #12
    4aa8:	0000466e 	andeq	r4, r0, lr, ror #12
    4aac:	9f300002 	svcls	0x00300002
    4ab0:	0000466e 	andeq	r4, r0, lr, ror #12
    4ab4:	000046a8 	andeq	r4, r0, r8, lsr #13
    4ab8:	00510001 	subseq	r0, r1, r1
    4abc:	00000000 	andeq	r0, r0, r0
    4ac0:	24000000 	strcs	r0, [r0], #-0
    4ac4:	28000046 	stmdacs	r0, {r1, r2, r6}
    4ac8:	01000046 	tsteq	r0, r6, asr #32
    4acc:	46305e00 	ldrtmi	r5, [r0], -r0, lsl #28
    4ad0:	46320000 	ldrtmi	r0, [r2], -r0
    4ad4:	00010000 	andeq	r0, r1, r0
    4ad8:	0046325e 	subeq	r3, r6, lr, asr r2
    4adc:	00463800 	subeq	r3, r6, r0, lsl #16
    4ae0:	51000100 	mrspl	r0, (UNDEF: 16)
    4ae4:	00004638 	andeq	r4, r0, r8, lsr r6
    4ae8:	00004640 	andeq	r4, r0, r0, asr #12
    4aec:	7f710003 	svcvc	0x00710003
    4af0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4af4:	00000000 	andeq	r0, r0, r0
    4af8:	0045f800 	subeq	pc, r5, r0, lsl #16
    4afc:	00462200 	subeq	r2, r6, r0, lsl #4
    4b00:	30000200 	andcc	r0, r0, r0, lsl #4
    4b04:	0046229f 	umaaleq	r2, r6, pc, r2	; <UNPREDICTABLE>
    4b08:	00462c00 	subeq	r2, r6, r0, lsl #24
    4b0c:	5e000100 	adfpls	f0, f0, f0
    4b10:	0000462c 	andeq	r4, r0, ip, lsr #12
    4b14:	0000462e 	andeq	r4, r0, lr, lsr #12
    4b18:	00710005 	rsbseq	r0, r1, r5
    4b1c:	2e9f2638 	mrccs	6, 4, r2, cr15, cr8, {1}
    4b20:	30000046 	andcc	r0, r0, r6, asr #32
    4b24:	06000046 	streq	r0, [r0], -r6, asr #32
    4b28:	06549100 	ldrbeq	r9, [r4], -r0, lsl #2
    4b2c:	309f2638 	addscc	r2, pc, r8, lsr r6	; <UNPREDICTABLE>
    4b30:	32000046 	andcc	r0, r0, #70	; 0x46
    4b34:	01000046 	tsteq	r0, r6, asr #32
    4b38:	46325e00 	ldrtmi	r5, [r2], -r0, lsl #28
    4b3c:	46680000 	strbtmi	r0, [r8], -r0
    4b40:	00060000 	andeq	r0, r6, r0
    4b44:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    4b48:	46689f26 	strbtmi	r9, [r8], -r6, lsr #30
    4b4c:	466e0000 	strbtmi	r0, [lr], -r0
    4b50:	00020000 	andeq	r0, r2, r0
    4b54:	466e9f30 	uqasxmi	r9, lr, r0
    4b58:	46d80000 	ldrbmi	r0, [r8], r0
    4b5c:	00010000 	andeq	r0, r1, r0
    4b60:	0000005e 	andeq	r0, r0, lr, asr r0
    4b64:	00000000 	andeq	r0, r0, r0
    4b68:	00464400 	subeq	r4, r6, r0, lsl #8
    4b6c:	00466800 	subeq	r6, r6, r0, lsl #16
    4b70:	5c000100 	stfpls	f0, [r0], {-0}
	...
    4b7c:	00004672 	andeq	r4, r0, r2, ror r6
    4b80:	000046d8 	ldrdeq	r4, [r0], -r8
    4b84:	005a0001 	subseq	r0, sl, r1
    4b88:	00000000 	andeq	r0, r0, r0
    4b8c:	76000000 	strvc	r0, [r0], -r0
    4b90:	b2000046 	andlt	r0, r0, #70	; 0x46
    4b94:	01000046 	tsteq	r0, r6, asr #32
    4b98:	46b25c00 	ldrtmi	r5, [r2], r0, lsl #24
    4b9c:	46b60000 	ldrtmi	r0, [r6], r0
    4ba0:	00010000 	andeq	r0, r1, r0
    4ba4:	00000051 	andeq	r0, r0, r1, asr r0
    4ba8:	00000000 	andeq	r0, r0, r0
    4bac:	0046b600 	subeq	fp, r6, r0, lsl #12
    4bb0:	0046c000 	subeq	ip, r6, r0
    4bb4:	71001700 	tstvc	r0, r0, lsl #14
    4bb8:	4b401200 	blmi	10093c0 <__ccfg+0xfe9418>
    4bbc:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    4bc0:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    4bc4:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    4bc8:	16000128 	strne	r0, [r0], -r8, lsr #2
    4bcc:	00009f13 	andeq	r9, r0, r3, lsl pc
    4bd0:	00000000 	andeq	r0, r0, r0
    4bd4:	46e00000 	strbtmi	r0, [r0], r0
    4bd8:	46ec0000 	strbtmi	r0, [ip], r0
    4bdc:	00020000 	andeq	r0, r2, r0
    4be0:	46ec9f30 	usat16mi	r9, #12, r0
    4be4:	470c0000 	strmi	r0, [ip, -r0]
    4be8:	00010000 	andeq	r0, r1, r0
    4bec:	00000051 	andeq	r0, r0, r1, asr r0
    4bf0:	00000000 	andeq	r0, r0, r0
    4bf4:	0046e200 	subeq	lr, r6, r0, lsl #4
    4bf8:	0046e400 	subeq	lr, r6, r0, lsl #8
    4bfc:	53000100 	movwpl	r0, #256	; 0x100
    4c00:	000046e4 	andeq	r4, r0, r4, ror #13
    4c04:	000046ec 	andeq	r4, r0, ip, ror #13
    4c08:	9f4f0002 	svcls	0x004f0002
    4c0c:	000046ec 	andeq	r4, r0, ip, ror #13
    4c10:	000046fc 	strdeq	r4, [r0], -ip
    4c14:	fc530001 	mrrc2	0, 0, r0, r3, cr1
    4c18:	00000046 	andeq	r0, r0, r6, asr #32
    4c1c:	05000047 	streq	r0, [r0, #-71]	; 0xffffffb9
    4c20:	34007300 	strcc	r7, [r0], #-768	; 0xfffffd00
    4c24:	47009f25 	strmi	r9, [r0, -r5, lsr #30]
    4c28:	47040000 	strmi	r0, [r4, -r0]
    4c2c:	00010000 	andeq	r0, r1, r0
    4c30:	00000053 	andeq	r0, r0, r3, asr r0
    4c34:	00000000 	andeq	r0, r0, r0
    4c38:	0045f800 	subeq	pc, r5, r0, lsl #16
    4c3c:	0046d800 	subeq	sp, r6, r0, lsl #16
    4c40:	0c000600 	stceq	6, cr0, [r0], {-0}
    4c44:	5000139c 	mulpl	r0, ip, r3
    4c48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4c4c:	00000000 	andeq	r0, r0, r0
    4c50:	00456400 	subeq	r6, r5, r0, lsl #8
    4c54:	00457000 	subeq	r7, r5, r0
    4c58:	53000100 	movwpl	r0, #256	; 0x100
	...
    4c64:	00004584 	andeq	r4, r0, r4, lsl #11
    4c68:	00004590 	muleq	r0, r0, r5
    4c6c:	00520001 	subseq	r0, r2, r1
    4c70:	00000000 	andeq	r0, r0, r0
    4c74:	9a000000 	bls	4c7c <__aeabi_lmul+0x2bc>
    4c78:	a6000045 	strge	r0, [r0], -r5, asr #32
    4c7c:	01000045 	tsteq	r0, r5, asr #32
    4c80:	00005200 	andeq	r5, r0, r0, lsl #4
    4c84:	00000000 	andeq	r0, r0, r0
    4c88:	45a60000 	strmi	r0, [r6, #0]!
    4c8c:	46960000 	ldrmi	r0, [r6], r0
    4c90:	00010000 	andeq	r0, r1, r0
    4c94:	00000053 	andeq	r0, r0, r3, asr r0
    4c98:	00000000 	andeq	r0, r0, r0
    4c9c:	00475e00 	subeq	r5, r7, r0, lsl #28
    4ca0:	00476800 	subeq	r6, r7, r0, lsl #16
    4ca4:	50000100 	andpl	r0, r0, r0, lsl #2
    4ca8:	00004768 	andeq	r4, r0, r8, ror #14
    4cac:	00004772 	andeq	r4, r0, r2, ror r7
    4cb0:	0070000e 	rsbseq	r0, r0, lr
    4cb4:	16800912 	pkhbtne	r0, r0, r2, lsl #18
    4cb8:	01282b14 			; <UNDEFINED> instruction: 0x01282b14
    4cbc:	9f131600 	svcls	0x00131600
	...
    4cc8:	00004758 	andeq	r4, r0, r8, asr r7
    4ccc:	00004784 	andeq	r4, r0, r4, lsl #15
    4cd0:	00540001 	subseq	r0, r4, r1
    4cd4:	00000000 	andeq	r0, r0, r0
    4cd8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    4cdc:	8e000047 	cdphi	0, 0, cr0, cr0, cr7, {2}
    4ce0:	15000047 	strne	r0, [r0, #-71]	; 0xffffffb9
    4ce4:	12007300 	andne	r7, r0, #0, 6
    4ce8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4cec:	4014164f 	andsmi	r1, r4, pc, asr #12
    4cf0:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    4cf4:	16000128 	strne	r0, [r0], -r8, lsr #2
    4cf8:	00009f13 	andeq	r9, r0, r3, lsl pc
    4cfc:	00000000 	andeq	r0, r0, r0
    4d00:	47940000 	ldrmi	r0, [r4, r0]
    4d04:	479e0000 	ldrmi	r0, [lr, r0]
    4d08:	00170000 	andseq	r0, r7, r0
    4d0c:	40120074 	andsmi	r0, r2, r4, ror r0
    4d10:	0a22244b 	beq	88de44 <__ccfg+0x86de9c>
    4d14:	1416ffff 	ldrne	pc, [r6], #-4095	; 0xfffff001
    4d18:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4d1c:	0001282d 	andeq	r2, r1, sp, lsr #16
    4d20:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4d30:	01000000 	mrseq	r0, (UNDEF: 0)
    4d34:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    4d44:	00010000 	andeq	r0, r1, r0
    4d48:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4d58:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4d6c:	00530001 	subseq	r0, r3, r1
	...
    4d7c:	16000000 	strne	r0, [r0], -r0
    4d80:	08007000 	stmdaeq	r0, {ip, sp, lr}
    4d84:	400070ff 	strdmi	r7, [r0], -pc	; <UNPREDICTABLE>
    4d88:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4d8c:	80000005 	andhi	r0, r0, r5
    4d90:	0001282d 	andeq	r2, r1, sp, lsr #16
    4d94:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    4d98:	00000000 	andeq	r0, r0, r0
    4d9c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    4da0:	0a000047 	beq	4ec4 <__aeabi_lmul+0x504>
    4da4:	03000048 	movweq	r0, #72	; 0x48
    4da8:	9fff0900 	svcls	0x00ff0900
    4dac:	0000480a 	andeq	r4, r0, sl, lsl #16
    4db0:	00004814 	andeq	r4, r0, r4, lsl r8
    4db4:	00500001 	subseq	r0, r0, r1
    4db8:	00000000 	andeq	r0, r0, r0
    4dbc:	d4000000 	strle	r0, [r0], #-0
    4dc0:	e2000047 	and	r0, r0, #71	; 0x47
    4dc4:	01000047 	tsteq	r0, r7, asr #32
    4dc8:	47e65000 	strbmi	r5, [r6, r0]!
    4dcc:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
    4dd0:	00010000 	andeq	r0, r1, r0
    4dd4:	00480450 	subeq	r0, r8, r0, asr r4
    4dd8:	00480600 	subeq	r0, r8, r0, lsl #12
    4ddc:	50000100 	andpl	r0, r0, r0, lsl #2
    4de0:	00004808 	andeq	r4, r0, r8, lsl #16
    4de4:	0000480a 	andeq	r4, r0, sl, lsl #16
    4de8:	00500001 	subseq	r0, r0, r1
	...
    4df8:	03000000 	movweq	r0, #0
    4dfc:	9fff0900 	svcls	0x00ff0900
	...
    4e08:	00500001 	subseq	r0, r0, r1
	...
    4e18:	01000000 	mrseq	r0, (UNDEF: 0)
    4e1c:	00005400 	andeq	r5, r0, r0, lsl #8
    4e20:	00000000 	andeq	r0, r0, r0
    4e24:	48140000 	ldmdami	r4, {}	; <UNPREDICTABLE>
    4e28:	484e0000 	stmdami	lr, {}^	; <UNPREDICTABLE>
    4e2c:	00030000 	andeq	r0, r3, r0
    4e30:	4e9fff09 	cdpmi	15, 9, cr15, cr15, cr9, {0}
    4e34:	52000048 	andpl	r0, r0, #72	; 0x48
    4e38:	02000048 	andeq	r0, r0, #72	; 0x48
    4e3c:	529f4400 	addspl	r4, pc, #0, 8
    4e40:	56000048 	strpl	r0, [r0], -r8, asr #32
    4e44:	02000048 	andeq	r0, r0, #72	; 0x48
    4e48:	569f4500 	ldrpl	r4, [pc], r0, lsl #10
    4e4c:	74000048 	strvc	r0, [r0], #-72	; 0xffffffb8
    4e50:	03000048 	movweq	r0, #72	; 0x48
    4e54:	9fff0900 	svcls	0x00ff0900
    4e58:	00004874 	andeq	r4, r0, r4, ror r8
    4e5c:	00004876 	andeq	r4, r0, r6, ror r8
    4e60:	76500001 	ldrbvc	r0, [r0], -r1
    4e64:	78000048 	stmdavc	r0, {r3, r6}
    4e68:	03000048 	movweq	r0, #72	; 0x48
    4e6c:	9fff0900 	svcls	0x00ff0900
    4e70:	00004878 	andeq	r4, r0, r8, ror r8
    4e74:	00004880 	andeq	r4, r0, r0, lsl #17
    4e78:	00500001 	subseq	r0, r0, r1
    4e7c:	00000000 	andeq	r0, r0, r0
    4e80:	24000000 	strcs	r0, [r0], #-0
    4e84:	7c000048 	stcvc	0, cr0, [r0], {72}	; 0x48
    4e88:	01000048 	tsteq	r0, r8, asr #32
    4e8c:	00005400 	andeq	r5, r0, r0, lsl #8
    4e90:	00000000 	andeq	r0, r0, r0
    4e94:	48980000 	ldmmi	r8, {}	; <UNPREDICTABLE>
    4e98:	48a10000 	stmiami	r1!, {}	; <UNPREDICTABLE>
    4e9c:	00010000 	andeq	r0, r1, r0
    4ea0:	0048a150 	subeq	sl, r8, r0, asr r1
    4ea4:	0048b600 	subeq	fp, r8, r0, lsl #12
    4ea8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4eac:	000048b6 			; <UNDEFINED> instruction: 0x000048b6
    4eb0:	000048ba 			; <UNDEFINED> instruction: 0x000048ba
    4eb4:	01f30004 	mvnseq	r0, r4
    4eb8:	48ba9f50 	ldmmi	sl!, {r4, r6, r8, r9, sl, fp, ip, pc}
    4ebc:	48bc0000 	ldmmi	ip!, {}	; <UNPREDICTABLE>
    4ec0:	00010000 	andeq	r0, r1, r0
    4ec4:	0048bc54 	subeq	fp, r8, r4, asr ip
    4ec8:	0048c000 	subeq	ip, r8, r0
    4ecc:	f3000400 	vshl.u8	d0, d0, d0
    4ed0:	009f5001 	addseq	r5, pc, r1
    4ed4:	00000000 	andeq	r0, r0, r0
    4ed8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    4edc:	a1000048 	tstge	r0, r8, asr #32
    4ee0:	01000048 	tsteq	r0, r8, asr #32
    4ee4:	48a15100 	stmiami	r1!, {r8, ip, lr}
    4ee8:	48b60000 	ldmmi	r6!, {}	; <UNPREDICTABLE>
    4eec:	00010000 	andeq	r0, r1, r0
    4ef0:	0048b655 	subeq	fp, r8, r5, asr r6
    4ef4:	0048ba00 	subeq	fp, r8, r0, lsl #20
    4ef8:	f3000400 	vshl.u8	d0, d0, d0
    4efc:	ba9f5101 	blt	fe7d9308 <_estack+0xde7d4308>
    4f00:	bc000048 	stclt	0, cr0, [r0], {72}	; 0x48
    4f04:	01000048 	tsteq	r0, r8, asr #32
    4f08:	48bc5500 	ldmmi	ip!, {r8, sl, ip, lr}
    4f0c:	48c00000 	stmiami	r0, {}^	; <UNPREDICTABLE>
    4f10:	00040000 	andeq	r0, r4, r0
    4f14:	9f5101f3 	svcls	0x005101f3
	...
    4f20:	000048a2 	andeq	r4, r0, r2, lsr #17
    4f24:	000048b9 			; <UNDEFINED> instruction: 0x000048b9
    4f28:	00700005 	rsbseq	r0, r0, r5
    4f2c:	ba9f2930 	blt	fe7cf3f4 <_estack+0xde7ca3f4>
    4f30:	c0000048 	andgt	r0, r0, r8, asr #32
    4f34:	05000048 	streq	r0, [r0, #-72]	; 0xffffffb8
    4f38:	30007000 	andcc	r7, r0, r0
    4f3c:	00009f29 	andeq	r9, r0, r9, lsr #30
    4f40:	00000000 	andeq	r0, r0, r0
    4f44:	48c00000 	stmiami	r0, {}^	; <UNPREDICTABLE>
    4f48:	48c20000 	stmiami	r2, {}^	; <UNPREDICTABLE>
    4f4c:	00010000 	andeq	r0, r1, r0
    4f50:	0048c250 	subeq	ip, r8, r0, asr r2
    4f54:	0048c800 	subeq	ip, r8, r0, lsl #16
    4f58:	f3000400 	vshl.u8	d0, d0, d0
    4f5c:	009f5001 	addseq	r5, pc, r1
    4f60:	00000000 	andeq	r0, r0, r0
    4f64:	c0000000 	andgt	r0, r0, r0
    4f68:	c4000048 	strgt	r0, [r0], #-72	; 0xffffffb8
    4f6c:	01000048 	tsteq	r0, r8, asr #32
    4f70:	48c45100 	stmiami	r4, {r8, ip, lr}^
    4f74:	48c80000 	stmiami	r8, {}^	; <UNPREDICTABLE>
    4f78:	00040000 	andeq	r0, r4, r0
    4f7c:	9f5101f3 	svcls	0x005101f3
	...
    4f88:	000048c0 	andeq	r4, r0, r0, asr #17
    4f8c:	000048c7 	andeq	r4, r0, r7, asr #17
    4f90:	c7520001 	ldrbgt	r0, [r2, -r1]
    4f94:	c8000048 	stmdagt	r0, {r3, r6}
    4f98:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4f9c:	5201f300 	andpl	pc, r1, #0, 6
    4fa0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4fb0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4fbc:	01f30004 	mvnseq	r0, r4
    4fc0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4fd0:	00010000 	andeq	r0, r1, r0
    4fd4:	00000051 	andeq	r0, r0, r1, asr r0
    4fd8:	00000000 	andeq	r0, r0, r0
    4fdc:	f3000400 	vshl.u8	d0, d0, d0
    4fe0:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4ff0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ff4:	00005200 	andeq	r5, r0, r0, lsl #4
    4ff8:	00000000 	andeq	r0, r0, r0
    4ffc:	00040000 	andeq	r0, r4, r0
    5000:	9f5201f3 	svcls	0x005201f3
	...
    500c:	00520001 	subseq	r0, r2, r1
    5010:	00000000 	andeq	r0, r0, r0
    5014:	15000000 	strne	r0, [r0, #-0]
    5018:	5201f300 	andpl	pc, r1, #0, 6
    501c:	01f32540 	mvnseq	r2, r0, asr #10
    5020:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    5024:	2e302540 	cfneg32cs	mvfx2, mvfx0
    5028:	16000128 	strne	r0, [r0], -r8, lsr #2
    502c:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    503c:	00010000 	andeq	r0, r1, r0
    5040:	00000053 	andeq	r0, r0, r3, asr r0
    5044:	00000000 	andeq	r0, r0, r0
    5048:	f3000400 	vshl.u8	d0, d0, d0
    504c:	009f5301 	addseq	r5, pc, r1, lsl #6
	...
    505c:	04000000 	streq	r0, [r0], #-0
    5060:	04807000 	streq	r7, [r0], #0
    5064:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5068:	00000000 	andeq	r0, r0, r0
    506c:	f3000d00 	vpadd.f32	d0, d0, d0
    5070:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    5074:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    5078:	9f048023 	svcls	0x00048023
	...
    5084:	00500001 	subseq	r0, r0, r1
    5088:	00000000 	andeq	r0, r0, r0
    508c:	52000000 	andpl	r0, r0, #0
    5090:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5094:	01f32431 	mvnseq	r2, r1, lsr r4
    5098:	80232250 	eorhi	r2, r3, r0, asr r2
    509c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    50a0:	01f32431 	mvnseq	r2, r1, lsr r4
    50a4:	01f32250 	mvnseq	r2, r0, asr r2
    50a8:	30254052 	eorcc	r4, r5, r2, asr r0
    50ac:	00012829 	andeq	r2, r1, r9, lsr #16
    50b0:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    50b4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    50b8:	01f32431 	mvnseq	r2, r1, lsr r4
    50bc:	80232250 	eorhi	r2, r3, r0, asr r2
    50c0:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    50c4:	01f32431 	mvnseq	r2, r1, lsr r4
    50c8:	01f32250 	mvnseq	r2, r0, asr r2
    50cc:	30254052 	eorcc	r4, r5, r2, asr r0
    50d0:	00012829 	andeq	r2, r1, r9, lsr #16
    50d4:	01f31316 	mvnseq	r1, r6, lsl r3
    50d8:	30254052 	eorcc	r4, r5, r2, asr r0
    50dc:	0001282e 	andeq	r2, r1, lr, lsr #16
    50e0:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    50f0:	01000000 	mrseq	r0, (UNDEF: 0)
    50f4:	00005100 	andeq	r5, r0, r0, lsl #2
    50f8:	00000000 	andeq	r0, r0, r0
    50fc:	002f0000 	eoreq	r0, pc, r0
    5100:	5201f330 	andpl	pc, r1, #48, 6	; 0xc0000000
    5104:	01f32540 	mvnseq	r2, r0, asr #10
    5108:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    510c:	2e302540 	cfneg32cs	mvfx2, mvfx0
    5110:	16000128 	strne	r0, [r0], -r8, lsr #2
    5114:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    5118:	01f32540 	mvnseq	r2, r0, asr #10
    511c:	282e3053 	stmdacs	lr!, {r0, r1, r4, r6, ip, sp}
    5120:	13160001 	tstne	r6, #1
    5124:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    5128:	00012829 	andeq	r2, r1, r9, lsr #16
    512c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    513c:	01000000 	mrseq	r0, (UNDEF: 0)
    5140:	00005000 	andeq	r5, r0, r0
    5144:	00000000 	andeq	r0, r0, r0
    5148:	00040000 	andeq	r0, r4, r0
    514c:	9f5001f3 	svcls	0x005001f3
	...
    5160:	00510001 	subseq	r0, r1, r1
    5164:	00000000 	andeq	r0, r0, r0
    5168:	04000000 	streq	r0, [r0], #-0
    516c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5170:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5180:	52000100 	andpl	r0, r0, #0, 2
	...
    518c:	01f30004 	mvnseq	r0, r4
    5190:	00009f52 	andeq	r9, r0, r2, asr pc
    5194:	00000000 	andeq	r0, r0, r0
    5198:	00010000 	andeq	r0, r1, r0
    519c:	00000052 	andeq	r0, r0, r2, asr r0
    51a0:	00000000 	andeq	r0, r0, r0
    51a4:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    51a8:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    51ac:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    51b0:	4b405301 	blmi	1019dbc <__ccfg+0xff9e14>
    51b4:	0f0c2224 	svceq	0x000c2224
    51b8:	2b800000 	blcs	fe0051c0 <_estack+0xde0001c0>
    51bc:	16000128 	strne	r0, [r0], -r8, lsr #2
    51c0:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    51d0:	00010000 	andeq	r0, r1, r0
    51d4:	00000053 	andeq	r0, r0, r3, asr r0
    51d8:	00000000 	andeq	r0, r0, r0
    51dc:	f3000400 	vshl.u8	d0, d0, d0
    51e0:	009f5301 	addseq	r5, pc, r1, lsl #6
    51e4:	00000000 	andeq	r0, r0, r0
    51e8:	01000000 	mrseq	r0, (UNDEF: 0)
    51ec:	00005300 	andeq	r5, r0, r0, lsl #6
    51f0:	00000000 	andeq	r0, r0, r0
    51f4:	001b0000 	andseq	r0, fp, r0
    51f8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    51fc:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    5200:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5204:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    5208:	8000000f 	andhi	r0, r0, pc
    520c:	0001282b 	andeq	r2, r1, fp, lsr #16
    5210:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5220:	02000000 	andeq	r0, r0, #0
    5224:	00009100 	andeq	r9, r0, r0, lsl #2
    5228:	00000000 	andeq	r0, r0, r0
    522c:	02000000 	andeq	r0, r0, #0
    5230:	00007d00 	andeq	r7, r0, r0, lsl #26
	...
    5240:	04000000 	streq	r0, [r0], #-0
    5244:	04807000 	streq	r7, [r0], #0
    5248:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    524c:	00000000 	andeq	r0, r0, r0
    5250:	f3000d00 	vpadd.f32	d0, d0, d0
    5254:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    5258:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    525c:	9f048023 	svcls	0x00048023
	...
    5268:	00500001 	subseq	r0, r0, r1
    526c:	00000000 	andeq	r0, r0, r0
    5270:	64000000 	strvs	r0, [r0], #-0
    5274:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5278:	01f32431 	mvnseq	r2, r1, lsr r4
    527c:	80232250 	eorhi	r2, r3, r0, asr r2
    5280:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    5284:	01f32431 	mvnseq	r2, r1, lsr r4
    5288:	01f32250 	mvnseq	r2, r0, asr r2
    528c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    5290:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5294:	282c8000 	stmdacs	ip!, {pc}
    5298:	13160001 	tstne	r6, #1
    529c:	f3048423 	vshl.u8	d8, d19, d4
    52a0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    52a4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    52a8:	f3048023 	vhadd.u8	d8, d4, d19
    52ac:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    52b0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    52b4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    52b8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    52bc:	8000000f 	andhi	r0, r0, pc
    52c0:	0001282c 	andeq	r2, r1, ip, lsr #16
    52c4:	01f31316 	mvnseq	r1, r6, lsl r3
    52c8:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    52cc:	000f0c22 	andeq	r0, pc, r2, lsr #24
    52d0:	282b8000 	stmdacs	fp!, {pc}
    52d4:	13160001 	tstne	r6, #1
    52d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    52e8:	74000a00 	strvc	r0, [r0], #-2560	; 0xfffff600
    52ec:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    52f0:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    52f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52f8:	00000000 	andeq	r0, r0, r0
    52fc:	7d000c00 	stcvc	12, cr0, [r0, #-0]
    5300:	0a029400 	beq	aa308 <__ccfg+0x8a360>
    5304:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    5308:	009f2400 	addseq	r2, pc, r0, lsl #8
    530c:	00000000 	andeq	r0, r0, r0
    5310:	24000000 	strcs	r0, [r0], #-0
    5314:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    5318:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    531c:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
    5320:	01f31c40 	mvnseq	r1, r0, asr #24
    5324:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    5328:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    532c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5330:	01282b80 	smlawbeq	r8, r0, fp, r2
    5334:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
    5338:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5348:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5354:	01f30004 	mvnseq	r0, r4
    5358:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    5368:	00010000 	andeq	r0, r1, r0
    536c:	00000051 	andeq	r0, r0, r1, asr r0
    5370:	00000000 	andeq	r0, r0, r0
    5374:	f3000400 	vshl.u8	d0, d0, d0
    5378:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    5388:	01000000 	mrseq	r0, (UNDEF: 0)
    538c:	00005200 	andeq	r5, r0, r0, lsl #4
    5390:	00000000 	andeq	r0, r0, r0
    5394:	00010000 	andeq	r0, r1, r0
    5398:	00000054 	andeq	r0, r0, r4, asr r0
    539c:	00000000 	andeq	r0, r0, r0
    53a0:	f3001500 	vrshl.u8	d1, d0, d0
    53a4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    53a8:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    53ac:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    53b0:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    53b4:	9f131600 	svcls	0x00131600
	...
    53c8:	00550001 	subseq	r0, r5, r1
    53cc:	00000000 	andeq	r0, r0, r0
    53d0:	1d000000 	stcne	0, cr0, [r0, #-0]
    53d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    53d8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    53dc:	01f30223 	mvnseq	r0, r3, lsr #4
    53e0:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    53e4:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    53e8:	2e302540 	cfneg32cs	mvfx2, mvfx0
    53ec:	16000128 	strne	r0, [r0], -r8, lsr #2
    53f0:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5400:	00060000 	andeq	r0, r6, r0
    5404:	00740075 	rsbseq	r0, r4, r5, ror r0
    5408:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    5418:	00010000 	andeq	r0, r1, r0
    541c:	00000055 	andeq	r0, r0, r5, asr r0
    5420:	00000000 	andeq	r0, r0, r0
    5424:	f3001d00 	vpadd.f32	d1, d0, d0
    5428:	01f35001 	mvnseq	r5, r1
    542c:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    5430:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5434:	f3225101 	vrhadd.u32	d5, d2, d1
    5438:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    543c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    5440:	9f131600 	svcls	0x00131600
	...
    5454:	00750007 	rsbseq	r0, r5, r7
    5458:	1affff0a 	bne	5088 <__aeabi_lmul+0x6c8>
    545c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    546c:	70000500 	andvc	r0, r0, r0, lsl #10
    5470:	9f293000 	svcls	0x00293000
	...
    5484:	00500001 	subseq	r0, r0, r1
    5488:	00000000 	andeq	r0, r0, r0
    548c:	04000000 	streq	r0, [r0], #-0
    5490:	5001f300 	andpl	pc, r1, r0, lsl #6
    5494:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    54a4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    54b0:	01f30004 	mvnseq	r0, r4
    54b4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    54c4:	00010000 	andeq	r0, r1, r0
    54c8:	00000052 	andeq	r0, r0, r2, asr r0
    54cc:	00000000 	andeq	r0, r0, r0
    54d0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    54dc:	01f3001b 	mvnseq	r0, fp, lsl r0
    54e0:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    54e4:	01f35201 	mvnseq	r5, r1, lsl #4
    54e8:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    54ec:	000f0c22 	andeq	r0, pc, r2, lsr #24
    54f0:	282b8000 	stmdacs	fp!, {pc}
    54f4:	13160001 	tstne	r6, #1
    54f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5508:	53000100 	movwpl	r0, #256	; 0x100
	...
    5514:	00550001 	subseq	r0, r5, r1
    5518:	00000000 	andeq	r0, r0, r0
    551c:	1b000000 	blne	5524 <patchGenfskRfe+0x2a8>
    5520:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    5524:	01f31c40 	mvnseq	r1, r0, asr #24
    5528:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    552c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    5530:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5534:	01282b80 	smlawbeq	r8, r0, fp, r2
    5538:	9f131600 	svcls	0x00131600
	...
    554c:	00560001 	subseq	r0, r6, r1
    5550:	00000000 	andeq	r0, r0, r0
    5554:	06000000 	streq	r0, [r0], -r0
    5558:	71007000 	mrsvc	r7, (UNDEF: 0)
    555c:	009f2200 	addseq	r2, pc, r0, lsl #4
    5560:	00000000 	andeq	r0, r0, r0
    5564:	01000000 	mrseq	r0, (UNDEF: 0)
    5568:	00005600 	andeq	r5, r0, r0, lsl #12
    556c:	00000000 	andeq	r0, r0, r0
    5570:	00230000 	eoreq	r0, r3, r0
    5574:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5578:	23225101 			; <UNDEFINED> instruction: 0x23225101
    557c:	5001f302 	andpl	pc, r1, r2, lsl #6
    5580:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5584:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5588:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    558c:	8000000f 	andhi	r0, r0, pc
    5590:	0001282b 	andeq	r2, r1, fp, lsr #16
    5594:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    55a4:	06000000 	streq	r0, [r0], -r0
    55a8:	74007600 	strvc	r7, [r0], #-1536	; 0xfffffa00
    55ac:	009f1a00 	addseq	r1, pc, r0, lsl #20
    55b0:	00000000 	andeq	r0, r0, r0
    55b4:	01000000 	mrseq	r0, (UNDEF: 0)
    55b8:	00005000 	andeq	r5, r0, r0
	...
    55c8:	00010000 	andeq	r0, r1, r0
    55cc:	00000056 	andeq	r0, r0, r6, asr r0
    55d0:	00000000 	andeq	r0, r0, r0
    55d4:	f3002300 	vcgt.u8	d2, d0, d0
    55d8:	01f35001 	mvnseq	r5, r1
    55dc:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    55e0:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    55e4:	f3225101 	vrhadd.u32	d5, d2, d1
    55e8:	4b405301 	blmi	101a1f4 <__ccfg+0xffa24c>
    55ec:	0f0c2224 	svceq	0x000c2224
    55f0:	2b800000 	blcs	fe0055f8 <_estack+0xde0005f8>
    55f4:	16000128 	strne	r0, [r0], -r8, lsr #2
    55f8:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5608:	00070000 	andeq	r0, r7, r0
    560c:	ff0a0076 			; <UNDEFINED> instruction: 0xff0a0076
    5610:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    5620:	05000000 	streq	r0, [r0, #-0]
    5624:	30007000 	andcc	r7, r0, r0
    5628:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    5640:	00520000 	subseq	r0, r2, r0
    5644:	00010000 	andeq	r0, r1, r0
    5648:	00005251 	andeq	r5, r0, r1, asr r2
    564c:	00009600 	andeq	r9, r0, r0, lsl #12
    5650:	f3000400 	vshl.u8	d0, d0, d0
    5654:	969f5101 	ldrls	r5, [pc], r1, lsl #2
    5658:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    565c:	01000000 	mrseq	r0, (UNDEF: 0)
    5660:	00985100 	addseq	r5, r8, r0, lsl #2
    5664:	00a00000 	adceq	r0, r0, r0
    5668:	00040000 	andeq	r0, r4, r0
    566c:	9f5101f3 	svcls	0x005101f3
    5670:	000000a0 	andeq	r0, r0, r0, lsr #1
    5674:	000000a6 	andeq	r0, r0, r6, lsr #1
    5678:	a6510001 	ldrbge	r0, [r1], -r1
    567c:	aa000000 	bge	5684 <patchGenfskRfe+0x408>
    5680:	04000000 	streq	r0, [r0], #-0
    5684:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5688:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5694:	00000202 	andeq	r0, r0, r2, lsl #4
    5698:	00000000 	andeq	r0, r0, r0
    569c:	00000101 	andeq	r0, r0, r1, lsl #2
	...
    56bc:	00002a00 	andeq	r2, r0, r0, lsl #20
    56c0:	52000100 	andpl	r0, r0, #0, 2
    56c4:	0000002a 	andeq	r0, r0, sl, lsr #32
    56c8:	00000040 	andeq	r0, r0, r0, asr #32
    56cc:	00710009 	rsbseq	r0, r1, r9
    56d0:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    56d4:	409f1c00 	addsmi	r1, pc, r0, lsl #24
    56d8:	42000000 	andmi	r0, r0, #0
    56dc:	0b000000 	bleq	56e4 <patchGenfskRfe+0x468>
    56e0:	72007100 	andvc	r7, r0, #0, 2
    56e4:	00742200 	rsbseq	r2, r4, r0, lsl #4
    56e8:	9f1c401c 	svcls	0x001c401c
    56ec:	00000042 	andeq	r0, r0, r2, asr #32
    56f0:	0000004c 	andeq	r0, r0, ip, asr #32
    56f4:	00710009 	rsbseq	r0, r1, r9
    56f8:	74220072 	strtvc	r0, [r2], #-114	; 0xffffff8e
    56fc:	569f1c00 	ldrpl	r1, [pc], r0, lsl #24
    5700:	5a000000 	bpl	5708 <patchGenfskRfe+0x48c>
    5704:	01000000 	mrseq	r0, (UNDEF: 0)
    5708:	005a5300 	subseq	r5, sl, r0, lsl #6
    570c:	005e0000 	subseq	r0, lr, r0
    5710:	00060000 	andeq	r0, r6, r0
    5714:	00760073 	rsbseq	r0, r6, r3, ror r0
    5718:	005e9f1c 	subseq	r9, lr, ip, lsl pc
    571c:	00600000 	rsbeq	r0, r0, r0
    5720:	00080000 	andeq	r0, r8, r0
    5724:	00760073 	rsbseq	r0, r6, r3, ror r0
    5728:	9f1c341c 	svcls	0x001c341c
    572c:	00000060 	andeq	r0, r0, r0, rrx
    5730:	0000006a 	andeq	r0, r0, sl, rrx
    5734:	00730006 	rsbseq	r0, r3, r6
    5738:	9f1c0076 	svcls	0x001c0076
    573c:	0000006a 	andeq	r0, r0, sl, rrx
    5740:	00000072 	andeq	r0, r0, r2, ror r0
    5744:	00720008 	rsbseq	r0, r2, r8
    5748:	00761a3f 	rsbseq	r1, r6, pc, lsr sl
    574c:	00729f1c 	rsbseq	r9, r2, ip, lsl pc
    5750:	00760000 	rsbseq	r0, r6, r0
    5754:	00090000 	andeq	r0, r9, r0
    5758:	3f5201f3 	svccc	0x005201f3
    575c:	1c00761a 	stcne	6, cr7, [r0], {26}
    5760:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5764:	00007800 	andeq	r7, r0, r0, lsl #16
    5768:	52000100 	andpl	r0, r0, #0, 2
    576c:	00000078 	andeq	r0, r0, r8, ror r0
    5770:	00000080 	andeq	r0, r0, r0, lsl #1
    5774:	80560001 	subshi	r0, r6, r1
    5778:	82000000 	andhi	r0, r0, #0
    577c:	07000000 	streq	r0, [r0, -r0]
    5780:	20007300 	andcs	r7, r0, r0, lsl #6
    5784:	9f220076 	svcls	0x00220076
    5788:	00000082 	andeq	r0, r0, r2, lsl #1
    578c:	00000088 	andeq	r0, r0, r8, lsl #1
    5790:	00760006 	rsbseq	r0, r6, r6
    5794:	9f1c0073 	svcls	0x001c0073
    5798:	00000088 	andeq	r0, r0, r8, lsl #1
    579c:	0000008c 	andeq	r0, r0, ip, lsl #1
    57a0:	00730007 	rsbseq	r0, r3, r7
    57a4:	22007620 	andcs	r7, r0, #32, 12	; 0x2000000
    57a8:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    57ac:	00009a00 	andeq	r9, r0, r0, lsl #20
    57b0:	52000100 	andpl	r0, r0, #0, 2
    57b4:	0000009a 	muleq	r0, sl, r0
    57b8:	000000a0 	andeq	r0, r0, r0, lsr #1
    57bc:	a0560001 	subsge	r0, r6, r1
    57c0:	a2000000 	andge	r0, r0, #0
    57c4:	01000000 	mrseq	r0, (UNDEF: 0)
    57c8:	00a25200 	adceq	r5, r2, r0, lsl #4
    57cc:	00a60000 	adceq	r0, r6, r0
    57d0:	00010000 	andeq	r0, r1, r0
    57d4:	0000a656 	andeq	sl, r0, r6, asr r6
    57d8:	0000aa00 	andeq	sl, r0, r0, lsl #20
    57dc:	53000100 	movwpl	r0, #256	; 0x100
	...
    57e8:	00000002 	andeq	r0, r0, r2
    57ec:	01000000 	mrseq	r0, (UNDEF: 0)
    57f0:	00000001 	andeq	r0, r0, r1
	...
    57fc:	00000076 	andeq	r0, r0, r6, ror r0
    5800:	76500001 	ldrbvc	r0, [r0], -r1
    5804:	80000000 	andhi	r0, r0, r0
    5808:	01000000 	mrseq	r0, (UNDEF: 0)
    580c:	00805500 	addeq	r5, r0, r0, lsl #10
    5810:	00820000 	addeq	r0, r2, r0
    5814:	00080000 	andeq	r0, r8, r0
    5818:	00730075 	rsbseq	r0, r3, r5, ror r0
    581c:	9f012322 	svcls	0x00012322
    5820:	00000082 	andeq	r0, r0, r2, lsl #1
    5824:	00000082 	andeq	r0, r0, r2, lsl #1
    5828:	00750006 	rsbseq	r0, r5, r6
    582c:	9f220073 	svcls	0x00220073
    5830:	00000082 	andeq	r0, r0, r2, lsl #1
    5834:	0000008c 	andeq	r0, r0, ip, lsl #1
    5838:	00750008 	rsbseq	r0, r5, r8
    583c:	23220073 			; <UNDEFINED> instruction: 0x23220073
    5840:	00969f01 	addseq	r9, r6, r1, lsl #30
    5844:	00980000 	addseq	r0, r8, r0
    5848:	00010000 	andeq	r0, r1, r0
    584c:	00009850 	andeq	r9, r0, r0, asr r8
    5850:	0000a000 	andeq	sl, r0, r0
    5854:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5858:	000000a0 	andeq	r0, r0, r0, lsr #1
    585c:	000000aa 	andeq	r0, r0, sl, lsr #1
    5860:	00500001 	subseq	r0, r0, r1
    5864:	00000000 	andeq	r0, r0, r0
    5868:	03000000 	movweq	r0, #0
	...
    5874:	00000101 	andeq	r0, r0, r1, lsl #2
    5878:	00000000 	andeq	r0, r0, r0
    587c:	52000000 	andpl	r0, r0, #0
    5880:	01000000 	mrseq	r0, (UNDEF: 0)
    5884:	00525100 	subseq	r5, r2, r0, lsl #2
    5888:	00760000 	rsbseq	r0, r6, r0
    588c:	00040000 	andeq	r0, r4, r0
    5890:	9f5101f3 	svcls	0x005101f3
    5894:	00000076 	andeq	r0, r0, r6, ror r0
    5898:	00000080 	andeq	r0, r0, r0, lsl #1
    589c:	80510001 	subshi	r0, r1, r1
    58a0:	82000000 	andhi	r0, r0, #0
    58a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    58a8:	73007100 	movwvc	r7, #256	; 0x100
    58ac:	01232200 			; <UNDEFINED> instruction: 0x01232200
    58b0:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    58b4:	00008200 	andeq	r8, r0, r0, lsl #4
    58b8:	71000600 	tstvc	r0, r0, lsl #12
    58bc:	22007300 	andcs	r7, r0, #0, 6
    58c0:	0000829f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    58c4:	00008c00 	andeq	r8, r0, r0, lsl #24
    58c8:	71000800 	tstvc	r0, r0, lsl #16
    58cc:	22007300 	andcs	r7, r0, #0, 6
    58d0:	969f0123 	ldrls	r0, [pc], r3, lsr #2
    58d4:	a6000000 	strge	r0, [r0], -r0
    58d8:	01000000 	mrseq	r0, (UNDEF: 0)
    58dc:	00a65100 	adceq	r5, r6, r0, lsl #2
    58e0:	00aa0000 	adceq	r0, sl, r0
    58e4:	00040000 	andeq	r0, r4, r0
    58e8:	9f5101f3 	svcls	0x005101f3
	...
    58f4:	01010100 	mrseq	r0, (UNDEF: 17)
    58f8:	01020201 	tsteq	r2, r1, lsl #4
    58fc:	00000001 	andeq	r0, r0, r1
    5900:	01000000 	mrseq	r0, (UNDEF: 0)
    5904:	00000001 	andeq	r0, r0, r1
    5908:	00000000 	andeq	r0, r0, r0
    590c:	0000002a 	andeq	r0, r0, sl, lsr #32
    5910:	0000002c 	andeq	r0, r0, ip, lsr #32
    5914:	00700009 	rsbseq	r0, r0, r9
    5918:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    591c:	2c9f2200 	lfmcs	f2, 4, [pc], {0}
    5920:	3a000000 	bcc	5928 <patchGenfskRfe+0x6ac>
    5924:	0b000000 	bleq	592c <patchGenfskRfe+0x6b0>
    5928:	71007000 	mrsvc	r7, (UNDEF: 0)
    592c:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5930:	9f042322 	svcls	0x00042322
    5934:	0000003a 	andeq	r0, r0, sl, lsr r0
    5938:	0000003a 	andeq	r0, r0, sl, lsr r0
    593c:	0070000b 	rsbseq	r0, r0, fp
    5940:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    5944:	08232200 	stmdaeq	r3!, {r9, sp}
    5948:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    594c:	00004000 	andeq	r4, r0, r0
    5950:	70000b00 	andvc	r0, r0, r0, lsl #22
    5954:	1c007100 	stfnes	f7, [r0], {-0}
    5958:	23220074 			; <UNDEFINED> instruction: 0x23220074
    595c:	00409f0c 	subeq	r9, r0, ip, lsl #30
    5960:	00420000 	subeq	r0, r2, r0
    5964:	000b0000 	andeq	r0, fp, r0
    5968:	00710070 	rsbseq	r0, r1, r0, ror r0
    596c:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5970:	429f1023 	addsmi	r1, pc, #35	; 0x23
    5974:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5978:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    597c:	71007000 	mrsvc	r7, (UNDEF: 0)
    5980:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5984:	00569f22 	subseq	r9, r6, r2, lsr #30
    5988:	005a0000 	subseq	r0, sl, r0
    598c:	00010000 	andeq	r0, r1, r0
    5990:	00005a55 	andeq	r5, r0, r5, asr sl
    5994:	00005a00 	andeq	r5, r0, r0, lsl #20
    5998:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    599c:	22007600 	andcs	r7, r0, #0, 12
    59a0:	00005a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    59a4:	00006000 	andeq	r6, r0, r0
    59a8:	75000800 	strvc	r0, [r0, #-2048]	; 0xfffff800
    59ac:	22007600 	andcs	r7, r0, #0, 12
    59b0:	609f0423 	addsvs	r0, pc, r3, lsr #8
    59b4:	74000000 	strvc	r0, [r0], #-0
    59b8:	06000000 	streq	r0, [r0], -r0
    59bc:	76007500 	strvc	r7, [r0], -r0, lsl #10
    59c0:	749f2200 	ldrvc	r2, [pc], #512	; 59c8 <patchImageGenfsk+0x98>
    59c4:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    59c8:	0b000000 	bleq	59d0 <patchImageGenfsk+0xa0>
    59cc:	34017c00 	strcc	r7, [r1], #-3072	; 0xfffff400
    59d0:	22007024 	andcs	r7, r0, #36	; 0x24
    59d4:	9f220076 	svcls	0x00220076
    59d8:	000000a6 	andeq	r0, r0, r6, lsr #1
    59dc:	000000aa 	andeq	r0, r0, sl, lsr #1
    59e0:	00550001 	subseq	r0, r5, r1
	...
    59ec:	01010101 	tsteq	r1, r1, lsl #2
    59f0:	01010202 	tsteq	r1, r2, lsl #4
    59f4:	00000000 	andeq	r0, r0, r0
    59f8:	01010000 	mrseq	r0, (UNDEF: 1)
    59fc:	00000000 	andeq	r0, r0, r0
    5a00:	2a000000 	bcs	5a08 <patchImageGenfsk+0xd8>
    5a04:	2c000000 	stccs	0, cr0, [r0], {-0}
    5a08:	01000000 	mrseq	r0, (UNDEF: 0)
    5a0c:	002c5400 	eoreq	r5, ip, r0, lsl #8
    5a10:	003a0000 	eorseq	r0, sl, r0
    5a14:	00030000 	andeq	r0, r3, r0
    5a18:	3a9f0474 	bcc	fe7c6bf0 <_estack+0xde7c1bf0>
    5a1c:	3a000000 	bcc	5a24 <patchImageGenfsk+0xf4>
    5a20:	03000000 	movweq	r0, #0
    5a24:	9f087400 	svcls	0x00087400
    5a28:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a2c:	00000040 	andeq	r0, r0, r0, asr #32
    5a30:	0c740003 	ldcleq	0, cr0, [r4], #-12
    5a34:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5a38:	00004200 	andeq	r4, r0, r0, lsl #4
    5a3c:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    5a40:	00429f10 	subeq	r9, r2, r0, lsl pc
    5a44:	004c0000 	subeq	r0, ip, r0
    5a48:	00010000 	andeq	r0, r1, r0
    5a4c:	00005454 	andeq	r5, r0, r4, asr r4
    5a50:	00005a00 	andeq	r5, r0, r0, lsl #20
    5a54:	51000100 	mrspl	r0, (UNDEF: 16)
    5a58:	0000005a 	andeq	r0, r0, sl, asr r0
    5a5c:	0000005a 	andeq	r0, r0, sl, asr r0
    5a60:	00710006 	rsbseq	r0, r1, r6
    5a64:	9f220076 	svcls	0x00220076
    5a68:	0000005a 	andeq	r0, r0, sl, asr r0
    5a6c:	00000060 	andeq	r0, r0, r0, rrx
    5a70:	00710008 	rsbseq	r0, r1, r8
    5a74:	23220076 			; <UNDEFINED> instruction: 0x23220076
    5a78:	00609f04 	rsbeq	r9, r0, r4, lsl #30
    5a7c:	00760000 	rsbseq	r0, r6, r0
    5a80:	00060000 	andeq	r0, r6, r0
    5a84:	00760071 	rsbseq	r0, r6, r1, ror r0
    5a88:	00769f22 	rsbseq	r9, r6, r2, lsr #30
    5a8c:	00780000 	rsbseq	r0, r8, r0
    5a90:	000c0000 	andeq	r0, ip, r0
    5a94:	2434017c 	ldrtcs	r0, [r4], #-380	; 0xfffffe84
    5a98:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    5a9c:	9f220076 	svcls	0x00220076
    5aa0:	000000a6 	andeq	r0, r0, r6, lsr #1
    5aa4:	000000aa 	andeq	r0, r0, sl, lsr #1
    5aa8:	00510001 	subseq	r0, r1, r1
	...
    5ab8:	00001a01 	andeq	r1, r0, r1, lsl #20
    5abc:	00001c00 	andeq	r1, r0, r0, lsl #24
    5ac0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    5ac4:	0000001c 	andeq	r0, r0, ip, lsl r0
    5ac8:	00000024 	andeq	r0, r0, r4, lsr #32
    5acc:	00730002 	rsbseq	r0, r3, r2
    5ad0:	00000027 	andeq	r0, r0, r7, lsr #32
    5ad4:	00000038 	andeq	r0, r0, r8, lsr r0
    5ad8:	d8740004 	ldmdale	r4!, {r2}^
    5adc:	00009f7e 	andeq	r9, r0, lr, ror pc
	...
    5ae8:	00040000 	andeq	r0, r4, r0
    5aec:	00060000 	andeq	r0, r6, r0
    5af0:	00020000 	andeq	r0, r2, r0
    5af4:	00060073 	andeq	r0, r6, r3, ror r0
    5af8:	00080000 	andeq	r0, r8, r0
    5afc:	00010000 	andeq	r0, r1, r0
    5b00:	00000053 	andeq	r0, r0, r3, asr r0
	...
    5b10:	00000e00 	andeq	r0, r0, r0, lsl #28
    5b14:	50000600 	andpl	r0, r0, r0, lsl #12
    5b18:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    5b1c:	00000e04 	andeq	r0, r0, r4, lsl #28
    5b20:	00005400 	andeq	r5, r0, r0, lsl #8
    5b24:	f3000600 	vmax.u8	d0, d0, d0
    5b28:	2500f503 	strcs	pc, [r0, #-1283]	; 0xfffffafd
    5b2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5b3c:	00003e00 	andeq	r3, r0, r0, lsl #28
    5b40:	52000600 	andpl	r0, r0, #0, 12
    5b44:	93530493 	cmpls	r3, #-1828716544	; 0x93000000
    5b48:	00003e04 	andeq	r3, r0, r4, lsl #28
    5b4c:	00005400 	andeq	r5, r0, r0, lsl #8
    5b50:	f3000600 	vmax.u8	d0, d0, d0
    5b54:	2502f503 	strcs	pc, [r2, #-1283]	; 0xfffffafd
    5b58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5b5c:	00000000 	andeq	r0, r0, r0
    5b60:	1a020000 	bne	85b68 <__ccfg+0x65bc0>
    5b64:	4a000000 	bmi	5b6c <patchImageGenfsk+0x23c>
    5b68:	01000000 	mrseq	r0, (UNDEF: 0)
    5b6c:	00005600 	andeq	r5, r0, r0, lsl #12
    5b70:	00000000 	andeq	r0, r0, r0
    5b74:	00010000 	andeq	r0, r1, r0
    5b78:	00000000 	andeq	r0, r0, r0
    5b7c:	0000001a 	andeq	r0, r0, sl, lsl r0
    5b80:	0000001e 	andeq	r0, r0, lr, lsl r0
    5b84:	00700006 	rsbseq	r0, r0, r6
    5b88:	9f1e0074 	svcls	0x001e0074
    5b8c:	0000001e 	andeq	r0, r0, lr, lsl r0
    5b90:	00000022 	andeq	r0, r0, r2, lsr #32
    5b94:	26500001 	ldrbcs	r0, [r0], -r1
    5b98:	44000000 	strmi	r0, [r0], #-0
    5b9c:	01000000 	mrseq	r0, (UNDEF: 0)
    5ba0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    5bac:	001c0000 	andseq	r0, ip, r0
    5bb0:	00360000 	eorseq	r0, r6, r0
    5bb4:	00010000 	andeq	r0, r1, r0
    5bb8:	00003655 	andeq	r3, r0, r5, asr r6
    5bbc:	00003e00 	andeq	r3, r0, r0, lsl #28
    5bc0:	72000c00 	andvc	r0, r0, #0, 24
    5bc4:	40244000 	eormi	r4, r4, r0
    5bc8:	40007c25 	andmi	r7, r0, r5, lsr #24
    5bcc:	009f1e25 	addseq	r1, pc, r5, lsr #28
	...
    5bd8:	00002000 	andeq	r2, r0, r0
    5bdc:	00003c00 	andeq	r3, r0, r0, lsl #24
    5be0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    5bf0:	00000012 	andeq	r0, r0, r2, lsl r0
    5bf4:	0000001e 	andeq	r0, r0, lr, lsl r0
    5bf8:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
    5bfc:	54000000 	strpl	r0, [r0], #-0
    5c00:	07000000 	streq	r0, [r0, -r0]
    5c04:	40007c00 	andmi	r7, r0, r0, lsl #24
    5c08:	9f254024 	svcls	0x00254024
	...
    5c18:	00000016 	andeq	r0, r0, r6, lsl r0
    5c1c:	0000001c 	andeq	r0, r0, ip, lsl r0
    5c20:	1c550001 	mrrcne	0, 0, r0, r5, cr1
    5c24:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5c28:	07000000 	streq	r0, [r0, -r0]
    5c2c:	40007200 	andmi	r7, r0, r0, lsl #4
    5c30:	9f254024 	svcls	0x00254024
	...
    5c40:	00000014 	andeq	r0, r0, r4, lsl r0
    5c44:	00000020 	andeq	r0, r0, r0, lsr #32
    5c48:	20510001 	subscs	r0, r1, r1
    5c4c:	54000000 	strpl	r0, [r0], #-0
    5c50:	05000000 	streq	r0, [r0, #-0]
    5c54:	40007c00 	andmi	r7, r0, r0, lsl #24
    5c58:	00009f25 	andeq	r9, r0, r5, lsr #30
    5c5c:	00000000 	andeq	r0, r0, r0
    5c60:	00010000 	andeq	r0, r1, r0
    5c64:	00160000 	andseq	r0, r6, r0
    5c68:	00240000 	eoreq	r0, r4, r0
    5c6c:	00010000 	andeq	r0, r1, r0
    5c70:	00002454 	andeq	r2, r0, r4, asr r4
    5c74:	00003e00 	andeq	r3, r0, r0, lsl #28
    5c78:	72000500 	andvc	r0, r0, #0, 10
    5c7c:	9f254000 	svcls	0x00254000
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000008c 	andeq	r0, r0, ip, lsl #1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000bc 	strheq	r0, [r0], -ip
  18:	00000000 	andeq	r0, r0, r0
};
  1c:	00000006 	andeq	r0, r0, r6
  20:	00000000 	andeq	r0, r0, r0
  24:	00000006 	andeq	r0, r0, r6
  28:	00000000 	andeq	r0, r0, r0
  2c:	00000008 	andeq	r0, r0, r8
  30:	00000184 	andeq	r0, r0, r4, lsl #3
  34:	00000014 	andeq	r0, r0, r4, lsl r0
  38:	00000198 	muleq	r0, r8, r1
  3c:	00000024 	andeq	r0, r0, r4, lsr #32
			i = k;
  40:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
				j->Next = k;
  44:	00000012 	andeq	r0, r0, r2, lsl r0
  48:	00000000 	andeq	r0, r0, r0
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	000001ce 	andeq	r0, r0, lr, asr #3
  54:	00000016 	andeq	r0, r0, r6, lsl r0
		release;
  58:	000001e4 	andeq	r0, r0, r4, ror #3
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
			nq++;
  60:	00000000 	andeq	r0, r0, r0
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	0000001e 	andeq	r0, r0, lr, lsl r0
  68:	00000200 	andeq	r0, r0, r0, lsl #4
  6c:	00000026 	andeq	r0, r0, r6, lsr #32
  70:	00000226 	andeq	r0, r0, r6, lsr #4
  74:	00000052 	andeq	r0, r0, r2, asr r0
  78:	00000278 	andeq	r0, r0, r8, ror r2
  7c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  80:	00000648 	andeq	r0, r0, r8, asr #12
  84:	00000580 	andeq	r0, r0, r0, lsl #11
	...
	if (!button_still_pressed (__button_list [pbutton]))
  90:	000000e4 	andeq	r0, r0, r4, ror #1
  94:	1c0e0002 	stcne	0, cr0, [lr], {2}
  98:	00040000 	andeq	r0, r4, r0
	if (baction == NULL)
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00000bc8 	andeq	r0, r0, r8, asr #23
	(*baction) (pbutton);
  a4:	0000000c 	andeq	r0, r0, ip
endthread
  a8:	00000bd4 	ldrdeq	r0, [r0], -r4
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	00000c00 	andeq	r0, r0, r0, lsl #24
endthread
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	00000c2c 	andeq	r0, r0, ip, lsr #24
  bc:	0000003c 	andeq	r0, r0, ip, lsr r0
  c0:	00000c68 	andeq	r0, r0, r8, ror #24
  c4:	00000040 	andeq	r0, r0, r0, asr #32
fsm sender(struct ResponseMessage *message) {
  c8:	00000000 	andeq	r0, r0, r0
  cc:	00000020 	andeq	r0, r0, r0, lsr #32
  d0:	00000ca8 	andeq	r0, r0, r8, lsr #25
}
  d4:	00000054 	andeq	r0, r0, r4, asr r0
  d8:	00000cfc 	strdeq	r0, [r0], -ip
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	00000d3c 	andeq	r0, r0, ip, lsr sp
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000d64 	andeq	r0, r0, r4, ror #26
  ec:	00000114 	andeq	r0, r0, r4, lsl r1
		packet[1] = message->gid;
  f0:	00000e78 	andeq	r0, r0, r8, ror lr
  f4:	00000050 	andeq	r0, r0, r0, asr r0
		DEBUG_PRINT("SENDING PROCEDURE");
  f8:	00000ec8 	andeq	r0, r0, r8, asr #29
  fc:	00000054 	andeq	r0, r0, r4, asr r0
		DEBUG_PRINT("I am th message GID %d", message->gid);
 100:	00000f1c 	andeq	r0, r0, ip, lsl pc
 104:	00000038 	andeq	r0, r0, r8, lsr r0
		*p = message->tpe;p++;
 108:	00000f54 	andeq	r0, r0, r4, asr pc
		*p = message->request_number;p++;
 10c:	00000110 	andeq	r0, r0, r0, lsl r1
		*p = message->sender_id;p++;
 110:	00000000 	andeq	r0, r0, r0
		*p = message->receiver_id;p++;
 114:	0000000c 	andeq	r0, r0, ip
		switch(message->tpe) {
 118:	00001064 	andeq	r1, r0, r4, rrx
 11c:	000000c0 	andeq	r0, r0, r0, asr #1
 120:	00001124 	andeq	r1, r0, r4, lsr #2
		tcv_endp(packet);
 124:	00000044 	andeq	r0, r0, r4, asr #32
		ser_out(CONFIRM_message, "Message sent\r\n");
 128:	00001168 	andeq	r1, r0, r8, ror #2
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
}
 130:	000011a4 	andeq	r1, r0, r4, lsr #3
		finish;
 134:	000000a4 	andeq	r0, r0, r4, lsr #1
 138:	00001248 	andeq	r1, r0, r8, asr #4
 13c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
				strncpy(p, message->record, sizeof(message->record));
 140:	00001400 	andeq	r1, r0, r0, lsl #8
				*p = message->padding;p++;
 144:	00000024 	andeq	r0, r0, r4, lsr #32
				strncpy(p, message->record, sizeof(message->record));
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000028 	andeq	r0, r0, r8, lsr #32
 150:	00001424 	andeq	r1, r0, r4, lsr #8
				strncpy(p, message->record, sizeof(message->record));
 154:	00000258 	andeq	r0, r0, r8, asr r2
 158:	0000167c 	andeq	r1, r0, ip, ror r6
				strncpy(p, message->record, sizeof(message->record));
 15c:	00000030 	andeq	r0, r0, r0, lsr r0
				break;
 160:	00000000 	andeq	r0, r0, r0
				*p = message->record_index;p++;
 164:	0000005c 	andeq	r0, r0, ip, asr r0
				*p = message->padding;
 168:	000016ac 	andeq	r1, r0, ip, lsr #13
				break;
 16c:	00000060 	andeq	r0, r0, r0, rrx
	...
 178:	00000154 	andeq	r0, r0, r4, asr r1
 17c:	309e0002 	addscc	r0, lr, r2
 180:	00040000 	andeq	r0, r4, r0
		node->nnodes[i] = 0;
 184:	00000000 	andeq	r0, r0, r0
 188:	0000170c 	andeq	r1, r0, ip, lsl #14
 18c:	0000003c 	andeq	r0, r0, ip, lsr r0
 190:	00001748 	andeq	r1, r0, r8, asr #14
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 194:	00000080 	andeq	r0, r0, r0, lsl #1
bool init_node(struct Node* node){
 198:	000017c8 	andeq	r1, r0, r8, asr #15
    node->id  = 0;                  // default id value 0
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
    node->index = 0;                // default entry count 0
 1a0:	00000000 	andeq	r0, r0, r0
    node->data_base.item_count = 0; // default no items in array
 1a4:	00000024 	andeq	r0, r0, r4, lsr #32
	reset_array(node);
 1a8:	000017e0 	andeq	r1, r0, r0, ror #15
    DEBUG_PRINT("Error initializing node...\n");
 1ac:	00000010 	andeq	r0, r0, r0, lsl r0
 1b0:	000017f0 	strdeq	r1, [r0], -r0
};
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b8:	00000000 	andeq	r0, r0, r0
uint8_t generate_request_num(void){
 1bc:	0000004c 	andeq	r0, r0, ip, asr #32
    return (uint8_t) (rand() % 255);
 1c0:	0000181c 	andeq	r1, r0, ip, lsl r8
 1c4:	00000006 	andeq	r0, r0, r6
 1c8:	00001824 	andeq	r1, r0, r4, lsr #16
}
 1cc:	000000cc 	andeq	r0, r0, ip, asr #1
            node->nnodes[i] = 0; // set to null byte
 1d0:	000018f0 	strdeq	r1, [r0], -r0
 1d4:	00000014 	andeq	r0, r0, r4, lsl r0
 1d8:	00001904 	andeq	r1, r0, r4, lsl #18
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
 1dc:	00000034 	andeq	r0, r0, r4, lsr r0
};
 1e0:	00001938 	andeq	r1, r0, r8, lsr r9
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
 1e8:	00000000 	andeq	r0, r0, r0
        node->data_base.item_array[index].data_entry[0] = '\0';
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	0000196c 	andeq	r1, r0, ip, ror #18
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
        node->data_base.item_count -= 1;
 1f8:	00001990 	muleq	r0, r0, r9
};
 1fc:	00000038 	andeq	r0, r0, r8, lsr r0
bool delete_all(struct Node *node){
 200:	00000000 	andeq	r0, r0, r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
 204:	00000014 	andeq	r0, r0, r4, lsl r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 208:	00000000 	andeq	r0, r0, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
 20c:	00000040 	andeq	r0, r0, r0, asr #32
        for(int i = 0; i <= node->data_base.item_count; i++){
 210:	00000000 	andeq	r0, r0, r0
            node->data_base.item_array[i].timestamp = 0;
 214:	00000018 	andeq	r0, r0, r8, lsl r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 218:	000019c8 	andeq	r1, r0, r8, asr #19
    node->data_base.item_count = 0;
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
}
 220:	00000000 	andeq	r0, r0, r0
        return true;
 224:	00000020 	andeq	r0, r0, r0, lsr #32
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
 228:	000019ec 	andeq	r1, r0, ip, ror #19
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 22c:	0000000e 	andeq	r0, r0, lr
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
 230:	000019fa 	strdeq	r1, [r0], -sl
 234:	00000010 	andeq	r0, r0, r0, lsl r0
 238:	00001a0a 	andeq	r1, r0, sl, lsl #20
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
	response_message->tpe = RESPONSE;
 240:	00000000 	andeq	r0, r0, r0
	response_message->status = status;
 244:	00000010 	andeq	r0, r0, r0, lsl r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 248:	00000000 	andeq	r0, r0, r0
	response_message->gid = gid;
 24c:	00000006 	andeq	r0, r0, r6
	response_message->sender_id = sender_id;
 250:	00001a26 	andeq	r1, r0, r6, lsr #20
	response_message->status = status;
 254:	00000014 	andeq	r0, r0, r4, lsl r0
	if (!padding){
 258:	00001a3a 	andeq	r1, r0, sl, lsr sl
		response_message->padding = padding;
 25c:	0000000e 	andeq	r0, r0, lr
	if (rec != NULL){
 260:	00001a48 	andeq	r1, r0, r8, asr #20
 264:	00000024 	andeq	r0, r0, r4, lsr #32
		strncpy(response_message->record, rec, 20);
 268:	00001a6c 	andeq	r1, r0, ip, ror #20
 26c:	0000009c 	muleq	r0, ip, r0
 270:	00001b08 	andeq	r1, r0, r8, lsl #22
};
 274:	00000050 	andeq	r0, r0, r0, asr r0
fsm receiver(struct Node* node_db) {
 278:	00001b58 	andeq	r1, r0, r8, asr fp
 27c:	00000048 	andeq	r0, r0, r8, asr #32
 280:	00001ba0 	andeq	r1, r0, r0, lsr #23
 284:	00000050 	andeq	r0, r0, r0, asr r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	00000058 	andeq	r0, r0, r8, asr r0
 290:	00001bf0 	strdeq	r1, [r0], -r0
 294:	000000a8 	andeq	r0, r0, r8, lsr #1
		incoming_packet = tcv_rnp(receiving, sfd);
 298:	00001c98 	muleq	r0, r8, ip
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
 2a0:	00001ccc 	andeq	r1, r0, ip, asr #25
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
 2a8:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
 2ac:	00000030 	andeq	r0, r0, r0, lsr r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000038 	andeq	r0, r0, r8, lsr r0
		switch (response_message_5->tpe){
 2b8:	00001ce4 	andeq	r1, r0, r4, ror #25
 2bc:	0000013c 	andeq	r0, r0, ip, lsr r1
 2c0:	00001e20 	andeq	r1, r0, r0, lsr #28
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 2d0:	00000104 	andeq	r0, r0, r4, lsl #2
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 2d4:	42c10002 	sbcmi	r0, r1, #2
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
 2d8:	00040000 	andeq	r0, r4, r0
				if (discovery_request_message->gid == node_db->gid){
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	00001e44 	andeq	r1, r0, r4, asr #28
					DEBUG_PRINT("\r\nSending to sender");
 2e4:	00000016 	andeq	r0, r0, r6, lsl r0
 2e8:	00001e5a 	andeq	r1, r0, sl, asr lr
					DEBUG_PRINT("\r\nSending to sender");
 2ec:	0000001a 	andeq	r0, r0, sl, lsl r0
					response_message_0->tpe = DISCOVERY_RESPONSE;
 2f0:	00001e74 	andeq	r1, r0, r4, ror lr
					response_message_0->request_number = discovery_request_message->request_number;
 2f4:	0000000e 	andeq	r0, r0, lr
					response_message_0->sender_id = node_db->id;
 2f8:	00001e84 	andeq	r1, r0, r4, lsl #29
					response_message_0->receiver_id = discovery_request_message->sender_id;
 2fc:	0000004c 	andeq	r0, r0, ip, asr #32
					DEBUG_PRINT("\r\nSending to sender");
 300:	00001ed0 	ldrdeq	r1, [r0], -r0
					call sender(response_message_0, done_case);
 304:	0000008c 	andeq	r0, r0, ip, lsl #1
 308:	00001f5c 	andeq	r1, r0, ip, asr pc
 30c:	00000070 	andeq	r0, r0, r0, ror r0
 310:	00001fcc 	andeq	r1, r0, ip, asr #31
 314:	000000c0 	andeq	r0, r0, r0, asr #1
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
 318:	00000000 	andeq	r0, r0, r0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
 31c:	0000006c 	andeq	r0, r0, ip, rrx
 320:	0000208c 	andeq	r2, r0, ip, lsl #1
 324:	00000024 	andeq	r0, r0, r4, lsr #32
 328:	000020b0 	strheq	r2, [r0], -r0
 32c:	00000080 	andeq	r0, r0, r0, lsl #1
 330:	00000000 	andeq	r0, r0, r0
 334:	00000070 	andeq	r0, r0, r0, ror r0
 338:	00000000 	andeq	r0, r0, r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
 33c:	00000078 	andeq	r0, r0, r8, ror r0
					node_db->index+=1;
 340:	00002130 	andeq	r2, r0, r0, lsr r1
 344:	000000bc 	strheq	r0, [r0], -ip
		tcv_endp(incoming_packet);
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000003a 	andeq	r0, r0, sl, lsr r0
		proceed receiving;
 350:	00000000 	andeq	r0, r0, r0
		ser_out(response_1_create, "\r\nData Saved");
 354:	00000038 	andeq	r0, r0, r8, lsr r0
 358:	00000000 	andeq	r0, r0, r0
		proceed receiving;
 35c:	0000000a 	andeq	r0, r0, sl
 360:	000021ec 	andeq	r2, r0, ip, ror #3
		ser_out(response_1_delete, "\r\nRecord Deleted");
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
 368:	00002218 	andeq	r2, r0, r8, lsl r2
		proceed receiving;
 36c:	00000060 	andeq	r0, r0, r0, rrx
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
 370:	00000000 	andeq	r0, r0, r0
 374:	00000040 	andeq	r0, r0, r0, asr #32
 378:	00000000 	andeq	r0, r0, r0
 37c:	0000002c 	andeq	r0, r0, ip, lsr #32
 380:	00000000 	andeq	r0, r0, r0
		proceed receiving;
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000006 	andeq	r0, r0, r6
 390:	00002278 	andeq	r2, r0, r8, ror r2
 394:	00000068 	andeq	r0, r0, r8, rrx
		proceed receiving;
 398:	000022e0 	andeq	r2, r0, r0, ror #5
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
 39c:	00000050 	andeq	r0, r0, r0, asr r0
 3a0:	00002330 	andeq	r2, r0, r0, lsr r3
 3a4:	0000009c 	muleq	r0, ip, r0
 3a8:	000023cc 	andeq	r2, r0, ip, asr #7
		proceed receiving;
 3ac:	00000040 	andeq	r0, r0, r0, asr #32
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
 3b0:	0000240c 	andeq	r2, r0, ip, lsl #8
 3b4:	00000034 	andeq	r0, r0, r4, lsr r0
 3b8:	00002440 	andeq	r2, r0, r0, asr #8
 3bc:	0000003c 	andeq	r0, r0, ip, lsr r0
		proceed receiving;
 3c0:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
 3c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 3c8:	0000247c 	andeq	r2, r0, ip, ror r4
		proceed receiving;
 3cc:	00000002 	andeq	r0, r0, r2
	...
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 3d8:	00000034 	andeq	r0, r0, r4, lsr r0
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
 3dc:	55f80002 	ldrbpl	r0, [r8, #2]!
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
 3e0:	00040000 	andeq	r0, r4, r0
 3e4:	00000000 	andeq	r0, r0, r0
 3e8:	0000247e 	andeq	r2, r0, lr, ror r4
 3ec:	00000002 	andeq	r0, r0, r2
					DEBUG_PRINT("\r\nDelete rec first if");
 3f0:	00002480 	andeq	r2, r0, r0, lsl #9
					break;
 3f4:	00000002 	andeq	r0, r0, r2
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
 3f8:	00002482 	andeq	r2, r0, r2, lsl #9
 3fc:	00000002 	andeq	r0, r0, r2
					DEBUG_PRINT("\r\nCreate rec second if");
 400:	00002484 	andeq	r2, r0, r4, lsl #9
    if (node->data_base.item_count == NUMB_OF_ENT){
 404:	00000044 	andeq	r0, r0, r4, asr #32
	...
						DEBUG_PRINT("\r\nCreate rec third if");
 410:	00000014 	andeq	r0, r0, r4, lsl r0
					DEBUG_PRINT("\r\nCreate rec out if");
 414:	57700002 	ldrbpl	r0, [r0, -r2]!
 418:	00040000 	andeq	r0, r4, r0
	...
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
 428:	00000024 	andeq	r0, r0, r4, lsr #32
 42c:	5cab0002 	stcpl	0, cr0, [fp], #8
 430:	00040000 	andeq	r0, r4, r0
	...
						DEBUG_PRINT("\r\nCreate rec third else");
 43c:	00000002 	andeq	r0, r0, r2
 440:	00000000 	andeq	r0, r0, r0
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 444:	00000058 	andeq	r0, r0, r8, asr r0
	...
				DEBUG_PRINT("\r\nDelete rec");
 450:	00000024 	andeq	r0, r0, r4, lsr #32
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
 454:	61af0002 			; <UNDEFINED> instruction: 0x61af0002
 458:	00040000 	andeq	r0, r4, r0
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 464:	000000cc 	andeq	r0, r0, ip, asr #1
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
 478:	0000008c 	andeq	r0, r0, ip, lsl #1
 47c:	66a90002 	strtvs	r0, [r9], r2
					DEBUG_PRINT("\r\nDelete rec second if");
 480:	00040000 	andeq	r0, r4, r0
					if (delete_record(node_db, delete_record_message->record_index)){
 484:	00000000 	andeq	r0, r0, r0
 488:	000024d0 	ldrdeq	r2, [r0], -r0
 48c:	00000034 	andeq	r0, r0, r4, lsr r0
						DEBUG_PRINT("\r\nDelete rec third if");
 490:	00002504 	andeq	r2, r0, r4, lsl #10
						status = (uint8_t) SUCCESS;
 494:	00000030 	andeq	r0, r0, r0, lsr r0
					DEBUG_PRINT("\r\nDelete assemble le response");
 498:	00002534 	andeq	r2, r0, r4, lsr r5
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	0000254c 	andeq	r2, r0, ip, asr #10
 4a4:	00000054 	andeq	r0, r0, r4, asr r0
 4a8:	000025a0 	andeq	r2, r0, r0, lsr #11
 4ac:	00000040 	andeq	r0, r0, r0, asr #32
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
 4b0:	000025e0 	andeq	r2, r0, r0, ror #11
 4b4:	00000024 	andeq	r0, r0, r4, lsr #32
						DEBUG_PRINT("\r\nDelete rec fourth if");
 4b8:	00002604 	andeq	r2, r0, r4, lsl #12
 4bc:	00000014 	andeq	r0, r0, r4, lsl r0
 4c0:	00002618 	andeq	r2, r0, r8, lsl r6
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000064 	andeq	r0, r0, r4, rrx
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	00000128 	andeq	r0, r0, r8, lsr #2
 4d8:	00000000 	andeq	r0, r0, r0
 4dc:	000000ec 	andeq	r0, r0, ip, ror #1
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000002 	andeq	r0, r0, r2
 4e8:	00000000 	andeq	r0, r0, r0
 4ec:	00000004 	andeq	r0, r0, r4
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	71540002 	cmpvc	r4, r2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	0000262c 	andeq	r2, r0, ip, lsr #12
 51c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	75760002 	ldrbvc	r0, [r6, #-2]!
 530:	00040000 	andeq	r0, r4, r0
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 534:	00000000 	andeq	r0, r0, r0
 538:	00002698 	muleq	r0, r8, r6
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
 53c:	00000078 	andeq	r0, r0, r8, ror r0
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
 54c:	798c0002 	stmibvc	ip, {r1}
 550:	00040000 	andeq	r0, r4, r0
 554:	00000000 	andeq	r0, r0, r0
 558:	00002710 	andeq	r2, r0, r0, lsl r7
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
 55c:	00000054 	andeq	r0, r0, r4, asr r0
	...
    return node->data_base.item_array[index];
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
 56c:	7ddc0002 	ldclvc	0, cr0, [ip, #8]
 570:	00040000 	andeq	r0, r4, r0
 574:	00000000 	andeq	r0, r0, r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 578:	00002764 	andeq	r2, r0, r4, ror #14
    return node->data_base.item_array[index];
 57c:	00000060 	andeq	r0, r0, r0, rrx
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 588:	0000006c 	andeq	r0, r0, ip, rrx
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
 58c:	822c0002 	eorhi	r0, ip, #2
 590:	00040000 	andeq	r0, r4, r0
 594:	00000000 	andeq	r0, r0, r0
 598:	000027c4 	andeq	r2, r0, r4, asr #15
 59c:	00000020 	andeq	r0, r0, r0, lsr #32
 5a0:	000027e4 	andeq	r2, r0, r4, ror #15
 5a4:	00000190 	muleq	r0, r0, r1
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
 5a8:	00002974 	andeq	r2, r0, r4, ror r9
 5ac:	00000048 	andeq	r0, r0, r8, asr #32
				DEBUG_PRINT("\r\nResponse");
 5b0:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
 5b4:	00000024 	andeq	r0, r0, r4, lsr #32
 5b8:	000029e0 	andeq	r2, r0, r0, ror #19
 5bc:	0000005c 	andeq	r0, r0, ip, asr r0
 5c0:	00002a3c 	andeq	r2, r0, ip, lsr sl
 5c4:	00000038 	andeq	r0, r0, r8, lsr r0
 5c8:	00002a74 	andeq	r2, r0, r4, ror sl
				if(!response_flag){
 5cc:	00000180 	andeq	r0, r0, r0, lsl #3
					response_flag=1;
 5d0:	00002bf4 	strdeq	r2, [r0], -r4
					trigger(&response_flag);
 5d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				switch(response_message_5->status){
 5d8:	00002cc4 	andeq	r2, r0, r4, asr #25
 5dc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5e0:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
 5e4:	00000070 	andeq	r0, r0, r0, ror r0
 5e8:	00002f24 	andeq	r2, r0, r4, lsr #30
						if (response_checker[0] == response_message_5->request_number){
 5ec:	00000174 	andeq	r0, r0, r4, ror r1
	...
							switch(response_checker[1]){
 5f8:	00000044 	andeq	r0, r0, r4, asr #32
 5fc:	a6a40002 	strtge	r0, [r4], r2
 600:	00040000 	andeq	r0, r4, r0
 604:	00000000 	andeq	r0, r0, r0
									proceed response_1_create;
 608:	00003098 	muleq	r0, r8, r0
						proceed response_2;
 60c:	00000024 	andeq	r0, r0, r4, lsr #32
									proceed response_1_delete;
 610:	000030bc 	strheq	r3, [r0], -ip
									proceed response_1_retrieve;
 614:	00000024 	andeq	r0, r0, r4, lsr #32
						proceed response_2;
 618:	000030e0 	andeq	r3, r0, r0, ror #1
						proceed response_3;
 61c:	00000008 	andeq	r0, r0, r8
						proceed response_4;
 620:	000030e8 	andeq	r3, r0, r8, ror #1
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
 624:	00000004 	andeq	r0, r0, r4
 628:	000030ec 	andeq	r3, r0, ip, ror #1
				break;
 62c:	00000004 	andeq	r0, r0, r4
}
 630:	000030f0 	strdeq	r3, [r0], -r0
 634:	00000048 	andeq	r0, r0, r8, asr #32
	...
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	add90002 	ldclge	0, cr0, [r9, #8]
fsm root {
 648:	00040000 	andeq	r0, r4, r0
 64c:	00000000 	andeq	r0, r0, r0
 650:	00003138 	andeq	r3, r0, r8, lsr r1
 654:	00000070 	andeq	r0, r0, r0, ror r0
	...
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
 664:	b20a0002 	andlt	r0, sl, #2
 668:	00040000 	andeq	r0, r4, r0
 66c:	00000000 	andeq	r0, r0, r0
 670:	000031a8 	andeq	r3, r0, r8, lsr #3
 674:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 680:	0000002c 	andeq	r0, r0, ip, lsr #32
 684:	b64e0002 	strblt	r0, [lr], -r2
 688:	00040000 	andeq	r0, r4, r0
 68c:	00000000 	andeq	r0, r0, r0
 690:	000032c4 	andeq	r3, r0, r4, asr #5
 694:	00000020 	andeq	r0, r0, r0, lsr #32
		node_db = (struct Node *)umalloc(sizeof(struct Node));
 698:	000032e4 	andeq	r3, r0, r4, ror #5
 69c:	00000230 	andeq	r0, r0, r0, lsr r2
 6a0:	00003514 	andeq	r3, r0, r4, lsl r5
		init_node(node_db);
 6a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		tcv_plug (0, &plug_null);
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b4:	bc420002 	mcrrlt	0, 0, r0, r2, cr2
		sfd = tcv_open (WNONE, 0, 0);
 6b8:	00040000 	andeq	r0, r4, r0
 6bc:	00000000 	andeq	r0, r0, r0
 6c0:	00003564 	andeq	r3, r0, r4, ror #10
 6c4:	00000390 	muleq	r0, r0, r3
	...
			diag("Cannot open tcv interface");
 6d0:	00000014 	andeq	r0, r0, r4, lsl r0
			halt();
 6d4:	c1d50002 	bicsgt	r0, r5, r2
		tcv_control(sfd, PHYSOPT_ON, NULL);
 6d8:	00040000 	andeq	r0, r4, r0
	...
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
 6e8:	00000024 	andeq	r0, r0, r4, lsr #32
 6ec:	e1c30002 	bic	r0, r3, r2
 6f0:	00040000 	andeq	r0, r4, r0
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	000038f4 	strdeq	r3, [r0], -r4
 6fc:	00000028 	andeq	r0, r0, r8, lsr #32
		ser_inf(get_choice, "%c", &CHOICE);
 700:	00000000 	andeq	r0, r0, r0
 704:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
		switch(CHOICE) {
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
 714:	e3510002 	cmp	r1, #2
 718:	00040000 	andeq	r0, r4, r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	0000391c 	andeq	r3, r0, ip, lsl r9
 724:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 730:	00000024 	andeq	r0, r0, r4, lsr #32
 734:	e42a0002 	strt	r0, [sl], #-2
 738:	00040000 	andeq	r0, r4, r0
				proceed menu;
 73c:	00000000 	andeq	r0, r0, r0
 740:	0000394c 	andeq	r3, r0, ip, asr #18
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
 744:	00000020 	andeq	r0, r0, r0, lsr #32
 748:	0000396c 	andeq	r3, r0, ip, ror #18
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		DEBUG_PRINT("setting node group ID");
 758:	0000003c 	andeq	r0, r0, ip, lsr r0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
 75c:	e5710002 	ldrb	r0, [r1, #-2]!
    node->gid = gid; 
 760:	00040000 	andeq	r0, r4, r0
		proceed menu;
 764:	00000000 	andeq	r0, r0, r0
 768:	00003984 	andeq	r3, r0, r4, lsl #19
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
 76c:	00000008 	andeq	r0, r0, r8
 770:	00000000 	andeq	r0, r0, r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 774:	00000006 	andeq	r0, r0, r6
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
 778:	0000398c 	andeq	r3, r0, ip, lsl #19
 77c:	00000008 	andeq	r0, r0, r8
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 780:	00000000 	andeq	r0, r0, r0
 784:	00000006 	andeq	r0, r0, r6
		if((node_db->id < 1) || (node_db->id > 25)){
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000008 	andeq	r0, r0, r8
	...
			strncpy(reason, "Out of Range", 50);
 798:	00000064 	andeq	r0, r0, r4, rrx
			proceed invalid_node_id;
 79c:	e6ab0002 	strt	r0, [fp], r2
 7a0:	00040000 	andeq	r0, r4, r0
				strncpy(reason, "ID is already in use", 50);
 7a4:	00000000 	andeq	r0, r0, r0
		for(int i = 0; i < node_db->index; i++){
 7a8:	00003994 	muleq	r0, r4, r9
 7ac:	0000005c 	andeq	r0, r0, ip, asr r0
 7b0:	000039f0 	strdeq	r3, [r0], -r0
		proceed menu;
 7b4:	0000002c 	andeq	r0, r0, ip, lsr #32
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00000090 	muleq	r0, r0, r0
 7c0:	00003a1c 	andeq	r3, r0, ip, lsl sl
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
		proceed get_new_node_id;
 7c8:	00003a34 	andeq	r3, r0, r4, lsr sl
 7cc:	00000060 	andeq	r0, r0, r0, rrx
		if (!clear_node_neighbour_array(node_db)){
 7d0:	00003a94 	muleq	r0, r4, sl
 7d4:	00000034 	andeq	r0, r0, r4, lsr r0
			strncpy(reason, "Error Clearing Node Array", 50);
 7d8:	00000000 	andeq	r0, r0, r0
 7dc:	00000038 	andeq	r0, r0, r8, lsr r0
 7e0:	00000000 	andeq	r0, r0, r0
			proceed error;
 7e4:	0000000c 	andeq	r0, r0, ip
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	00000034 	andeq	r0, r0, r4, lsr r0
		request_packet->gid = node_db->gid;
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		request_packet->request_number = generate_request_num();
 800:	00000054 	andeq	r0, r0, r4, asr r0
		call sender(request_packet, wait_discovery);
 804:	ef6e0002 	svc	0x006e0002
 808:	00040000 	andeq	r0, r4, r0
	...
 814:	00000014 	andeq	r0, r0, r4, lsl r0
 818:	00003ac8 	andeq	r3, r0, r8, asr #21
			release;
 81c:	00000028 	andeq	r0, r0, r8, lsr #32
				proceed get_new_node_id;
 820:	00003af0 	strdeq	r3, [r0], -r0
				proceed clear_neighbour_array;
 824:	0000004c 	andeq	r0, r0, ip, asr #32
				proceed create_proto_start;
 828:	00003b3c 	andeq	r3, r0, ip, lsr fp
				proceed start_delete_proto;
 82c:	00000150 	andeq	r0, r0, r0, asr r1
				proceed retrieve_proto;
 830:	00003c8c 	andeq	r3, r0, ip, lsl #25
				proceed display_db;
 834:	00000118 	andeq	r0, r0, r8, lsl r1
				proceed del_local;
 838:	00003da4 	andeq	r3, r0, r4, lsr #27
			if(node_db->id == node_db->nnodes[i]){
 83c:	00000020 	andeq	r0, r0, r0, lsr #32
 840:	00000000 	andeq	r0, r0, r0
 844:	00000060 	andeq	r0, r0, r0, rrx
				strncpy(reason, "ID is already in use", 50);
 848:	00003dc4 	andeq	r3, r0, r4, asr #27
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		for(int i = 0; i < node_db->index; i++){
 858:	00000024 	andeq	r0, r0, r4, lsr #32
		if (discovery_wait_flag == 0){
 85c:	fa260002 	blx	98086c <__ccfg+0x9608c4>
			discovery_wait_flag=1;
 860:	00040000 	andeq	r0, r4, r0
 864:	00000000 	andeq	r0, r0, r0
			delay(3000, find_proto_start);
 868:	00003de0 	andeq	r3, r0, r0, ror #27
 86c:	000000d4 	ldrdeq	r0, [r0], -r4
		if (discovery_wait_flag == 1){
 870:	00003eb4 			; <UNDEFINED> instruction: 0x00003eb4
			discovery_wait_flag=0;
 874:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			delay(3000, display_neighbour_nodes);
 880:	000000b4 	strheq	r0, [r0], -r4
 884:	fc310002 	ldc2	0, cr0, [r1], #-8
 888:	00040000 	andeq	r0, r4, r0
 88c:	00000000 	andeq	r0, r0, r0
 890:	00003f58 	andeq	r3, r0, r8, asr pc
 894:	0000007c 	andeq	r0, r0, ip, ror r0
 898:	00003fd4 	ldrdeq	r3, [r0], -r4
 89c:	000000ac 	andeq	r0, r0, ip, lsr #1
 8a0:	00004080 	andeq	r4, r0, r0, lsl #1
 8a4:	0000005c 	andeq	r0, r0, ip, asr r0
 8a8:	000040dc 	ldrdeq	r4, [r0], -ip
 8ac:	00000018 	andeq	r0, r0, r8, lsl r0
 8b0:	00000000 	andeq	r0, r0, r0
 8b4:	00000010 	andeq	r0, r0, r0, lsl r0
 8b8:	000040f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 8bc:	00000010 	andeq	r0, r0, r0, lsl r0
 8c0:	00004104 	andeq	r4, r0, r4, lsl #2
 8c4:	00000014 	andeq	r0, r0, r4, lsl r0
		if(node_db->index == 0){
 8c8:	00004118 	andeq	r4, r0, r8, lsl r1
 8cc:	00000064 	andeq	r0, r0, r4, rrx
 8d0:	0000417c 	andeq	r4, r0, ip, ror r1
			proceed menu;
 8d4:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
 8d8:	00004190 	muleq	r0, r0, r1
 8dc:	00000014 	andeq	r0, r0, r4, lsl r0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 8e0:	000041a4 	andeq	r4, r0, r4, lsr #3
			if (node_db->nnodes[i] == 0) break;
 8e4:	00000014 	andeq	r0, r0, r4, lsl r0
 8e8:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
 8ec:	00000028 	andeq	r0, r0, r8, lsr #32
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
 8f0:	000041e0 	andeq	r4, r0, r0, ror #3
 8f4:	00000010 	andeq	r0, r0, r0, lsl r0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 8f8:	000041f0 	strdeq	r4, [r0], -r0
		proceed menu;
 8fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 900:	0000421c 	andeq	r4, r0, ip, lsl r2
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
 904:	00000014 	andeq	r0, r0, r4, lsl r0
 908:	00004230 	andeq	r4, r0, r0, lsr r2
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
 90c:	00000014 	andeq	r0, r0, r4, lsl r0
 910:	00004244 	andeq	r4, r0, r4, asr #4
 914:	00000110 	andeq	r0, r0, r0, lsl r1
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 918:	00004354 	andeq	r4, r0, r4, asr r3
 91c:	00000064 	andeq	r0, r0, r4, rrx
			strncpy(reason, "Error: improper ID", 50);
 920:	000043b8 			; <UNDEFINED> instruction: 0x000043b8
 924:	00000028 	andeq	r0, r0, r8, lsr #32
			proceed error;
 928:	000043e0 	andeq	r4, r0, r0, ror #7
 92c:	00000150 	andeq	r0, r0, r0, asr r1
	...
		ser_in(get_record_to_create, user_provided_record, 20);
 938:	0000003c 	andeq	r0, r0, ip, lsr r0
 93c:	074c0002 	strbeq	r0, [ip, -r2]
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 940:	00040001 	andeq	r0, r4, r1
	...
		create_message->gid = node_db->gid;
 94c:	000000f4 	strdeq	r0, [r0], -r4
		create_message->tpe = CREATE_RECORD;
 950:	00004530 	andeq	r4, r0, r0, lsr r5
		create_message->request_number = generate_request_num();
 954:	00000220 	andeq	r0, r0, r0, lsr #4
 958:	00004750 	andeq	r4, r0, r0, asr r7
		strncpy(create_message->record, user_provided_record, 20);
 95c:	00000060 	andeq	r0, r0, r0, rrx
 960:	00000000 	andeq	r0, r0, r0
		create_message->receiver_id = user_provided_receiver_id;
 964:	00000078 	andeq	r0, r0, r8, ror r0
		strncpy(create_message->record, user_provided_record, 20);
 968:	000047b0 			; <UNDEFINED> instruction: 0x000047b0
		create_message->receiver_id = user_provided_receiver_id;
 96c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		response_checker[0] = create_message->request_number;
 978:	00000044 	andeq	r0, r0, r4, asr #32
		call sender(create_message, wait);
 97c:	10730002 	rsbsne	r0, r3, r2
 980:	00040001 	andeq	r0, r4, r1
	...
 98c:	00000010 	andeq	r0, r0, r0, lsl r0
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
 990:	00000000 	andeq	r0, r0, r0
 994:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
 998:	000047c8 	andeq	r4, r0, r8, asr #15
 99c:	0000004c 	andeq	r0, r0, ip, asr #32
 9a0:	00000000 	andeq	r0, r0, r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 9a4:	00000030 	andeq	r0, r0, r0, lsr r0
 9a8:	00004814 	andeq	r4, r0, r4, lsl r8
			strncpy(reason, "Error: improper node ID", 50);
 9ac:	0000006c 	andeq	r0, r0, ip, rrx
 9b0:	00004880 	andeq	r4, r0, r0, lsl #17
 9b4:	00000016 	andeq	r0, r0, r6, lsl r0
	...
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
 9c0:	00000044 	andeq	r0, r0, r4, asr #32
		ser_inf(get_index_for_delete, "%u", &user_provided_index);
 9c4:	14430002 	strbne	r0, [r3], #-2
 9c8:	00040001 	andeq	r0, r4, r1
 9cc:	00000000 	andeq	r0, r0, r0
		if (user_provided_index < 0 || user_provided_index > 40){
 9d0:	00004898 	muleq	r0, r8, r8
 9d4:	00000028 	andeq	r0, r0, r8, lsr #32
			strncpy(reason, "Error: invalid index", 50);
 9d8:	000048c0 	andeq	r4, r0, r0, asr #17
 9dc:	00000008 	andeq	r0, r0, r8
			proceed error;
 9e0:	00000000 	andeq	r0, r0, r0
 9e4:	00000022 	andeq	r0, r0, r2, lsr #32
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
 9e8:	00000000 	andeq	r0, r0, r0
		delete_record->gid = node_db->gid;
 9ec:	0000002e 	andeq	r0, r0, lr, lsr #32
 9f0:	00000000 	andeq	r0, r0, r0
 9f4:	00000034 	andeq	r0, r0, r4, lsr r0
		delete_record->tpe = DELETE_RECORD;
 9f8:	00000000 	andeq	r0, r0, r0
		delete_record->request_number = generate_request_num();
 9fc:	00000040 	andeq	r0, r0, r0, asr #32
	...
		delete_record->receiver_id = user_provided_receiver_id;
 a08:	0000001c 	andeq	r0, r0, ip, lsl r0
 a0c:	19ee0002 	stmibne	lr!, {r1}^
		delete_record->record_index = user_provided_index;
 a10:	00040001 	andeq	r0, r4, r1
		response_checker[0] = delete_record->request_number;
 a14:	00000000 	andeq	r0, r0, r0
		response_checker[1] = delete_record->tpe;
 a18:	000048c8 	andeq	r4, r0, r8, asr #17
 a1c:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
		call sender(delete_record, wait);
 a28:	0000001c 	andeq	r0, r0, ip, lsl r0
 a2c:	29230002 	stmdbcs	r3!, {r1}
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
 a30:	00040001 	andeq	r0, r4, r1
 a34:	00000000 	andeq	r0, r0, r0
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
 a38:	00004974 	andeq	r4, r0, r4, ror r9
 a3c:	0000004c 	andeq	r0, r0, ip, asr #32
	...
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
 a48:	00000014 	andeq	r0, r0, r4, lsl r0
			strncpy(reason, "Error: improper node ID", 50);
 a4c:	329d0002 	addscc	r0, sp, #2
 a50:	00040001 	andeq	r0, r4, r1
	...
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
 a60:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
 a64:	3bc70002 	blcc	ff1c0a74 <_estack+0xdf1bba74>
 a68:	00040001 	andeq	r0, r4, r1
 a6c:	00000000 	andeq	r0, r0, r0
		if (user_provided_index < 0 || user_provided_index > 40){
 a70:	000049c0 	andeq	r4, r0, r0, asr #19
			strncpy(reason, "Error: invalid index", 50);
 a74:	00000054 	andeq	r0, r0, r4, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000000d2 	ldrdeq	r0, [r0], -r2
       8:	000000d6 	ldrdeq	r0, [r0], -r6
       c:	000000da 	ldrdeq	r0, [r0], -sl
    return node->data_base.item_array[index];
      10:	000000dc 	ldrdeq	r0, [r0], -ip
      14:	000000de 	ldrdeq	r0, [r0], -lr
      18:	000000e0 	andeq	r0, r0, r0, ror #1
};
      1c:	000000e2 	andeq	r0, r0, r2, ror #1
      20:	000000e4 	andeq	r0, r0, r4, ror #1
      24:	00000130 	andeq	r0, r0, r0, lsr r1
      28:	00000134 	andeq	r0, r0, r4, lsr r1
      2c:	00000184 	andeq	r0, r0, r4, lsl #3
	...
      38:	000000dc 	ldrdeq	r0, [r0], -ip
      3c:	000000de 	ldrdeq	r0, [r0], -lr
			i = k;
      40:	000000e0 	andeq	r0, r0, r0, ror #1
				j->Next = k;
      44:	000000e2 	andeq	r0, r0, r2, ror #1
      48:	000000e4 	andeq	r0, r0, r4, ror #1
}
      4c:	00000128 	andeq	r0, r0, r8, lsr #2
      50:	0000013a 	andeq	r0, r0, sl, lsr r1
      54:	00000184 	andeq	r0, r0, r4, lsl #3
	...
			nq++;
      60:	00000298 	muleq	r0, r8, r2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      68:	000003d6 	ldrdeq	r0, [r0], -r6
      6c:	00000632 	andeq	r0, r0, r2, lsr r6
	...
      78:	000002d2 	ldrdeq	r0, [r0], -r2
      7c:	00000346 	andeq	r0, r0, r6, asr #6
      80:	000003d6 	ldrdeq	r0, [r0], -r6
      84:	0000062e 	andeq	r0, r0, lr, lsr #12
	...
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00000404 	andeq	r0, r0, r4, lsl #8
      94:	0000040c 	andeq	r0, r0, ip, lsl #8
      98:	0000043c 	andeq	r0, r0, ip, lsr r4
	if (baction == NULL)
      9c:	0000043c 	andeq	r0, r0, ip, lsr r4
	...
endthread
      a8:	00000566 	andeq	r0, r0, r6, ror #10
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000578 	andeq	r0, r0, r8, ror r5
      b0:	0000057c 	andeq	r0, r0, ip, ror r5
endthread
      b4:	00000580 	andeq	r0, r0, r0, lsl #11
	...
      c0:	00000698 	muleq	r0, r8, r6
      c4:	000007a2 	andeq	r0, r0, r2, lsr #15
fsm sender(struct ResponseMessage *message) {
      c8:	000007a4 	andeq	r0, r0, r4, lsr #15
      cc:	00000b66 	andeq	r0, r0, r6, ror #22
      d0:	00000b6a 	andeq	r0, r0, sl, ror #22
}
      d4:	00000b6e 	andeq	r0, r0, lr, ror #22
	...
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	0000075e 	andeq	r0, r0, lr, asr r7
      e4:	00000762 	andeq	r0, r0, r2, ror #14
      e8:	00000764 	andeq	r0, r0, r4, ror #14
      ec:	00000764 	andeq	r0, r0, r4, ror #14
		packet[1] = message->gid;
      f0:	00000766 	andeq	r0, r0, r6, ror #14
      f4:	00000768 	andeq	r0, r0, r8, ror #14
	...
		DEBUG_PRINT("I am th message GID %d", message->gid);
     100:	00000774 	andeq	r0, r0, r4, ror r7
     104:	000007a2 	andeq	r0, r0, r2, lsr #15
		*p = message->tpe;p++;
     108:	000007a4 	andeq	r0, r0, r4, lsr #15
		*p = message->request_number;p++;
     10c:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
		*p = message->sender_id;p++;
     110:	0000083a 	andeq	r0, r0, sl, lsr r8
		*p = message->receiver_id;p++;
     114:	0000085a 	andeq	r0, r0, sl, asr r8
	...
		switch(message->tpe) {
     120:	000007a4 	andeq	r0, r0, r4, lsr #15
		tcv_endp(packet);
     124:	000007b2 			; <UNDEFINED> instruction: 0x000007b2
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	0000083a 	andeq	r0, r0, sl, lsr r8
     12c:	0000085a 	andeq	r0, r0, sl, asr r8
	...
		finish;
     138:	000007e8 	andeq	r0, r0, r8, ror #15
     13c:	0000081a 	andeq	r0, r0, sl, lsl r8
				strncpy(p, message->record, sizeof(message->record));
     140:	0000085a 	andeq	r0, r0, sl, asr r8
				*p = message->padding;p++;
     144:	0000085a 	andeq	r0, r0, sl, asr r8
	...
				strncpy(p, message->record, sizeof(message->record));
     150:	000000c8 	andeq	r0, r0, r8, asr #1
				strncpy(p, message->record, sizeof(message->record));
     154:	00000184 	andeq	r0, r0, r4, lsl #3
     158:	00000001 	andeq	r0, r0, r1
				strncpy(p, message->record, sizeof(message->record));
     15c:	00000001 	andeq	r0, r0, r1
				break;
     160:	00000001 	andeq	r0, r0, r1
				*p = message->record_index;p++;
     164:	00000001 	andeq	r0, r0, r1
				*p = message->padding;
     168:	00000001 	andeq	r0, r0, r1
				break;
     16c:	00000001 	andeq	r0, r0, r1
     170:	00000184 	andeq	r0, r0, r4, lsl #3
     174:	00000198 	muleq	r0, r8, r1
     178:	00000198 	muleq	r0, r8, r1
     17c:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     180:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
		node->nnodes[i] = 0;
     184:	000001ce 	andeq	r0, r0, lr, asr #3
     188:	00000001 	andeq	r0, r0, r1
     18c:	00000001 	andeq	r0, r0, r1
     190:	000001ce 	andeq	r0, r0, lr, asr #3
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	000001e4 	andeq	r0, r0, r4, ror #3
bool init_node(struct Node* node){
     198:	000001e4 	andeq	r0, r0, r4, ror #3
    node->id  = 0;                  // default id value 0
     19c:	00000200 	andeq	r0, r0, r0, lsl #4
    node->index = 0;                // default entry count 0
     1a0:	00000001 	andeq	r0, r0, r1
    node->data_base.item_count = 0; // default no items in array
     1a4:	00000001 	andeq	r0, r0, r1
	reset_array(node);
     1a8:	00000200 	andeq	r0, r0, r0, lsl #4
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	00000226 	andeq	r0, r0, r6, lsr #4
     1b0:	00000226 	andeq	r0, r0, r6, lsr #4
};
     1b4:	00000278 	andeq	r0, r0, r8, ror r2
     1b8:	00000278 	andeq	r0, r0, r8, ror r2
uint8_t generate_request_num(void){
     1bc:	00000648 	andeq	r0, r0, r8, asr #12
    return (uint8_t) (rand() % 255);
     1c0:	00000648 	andeq	r0, r0, r8, asr #12
     1c4:	00000bc8 	andeq	r0, r0, r8, asr #23
	...
            node->nnodes[i] = 0; // set to null byte
     1d0:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
     1d4:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
     1d8:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
};
     1e0:	00000cc0 	andeq	r0, r0, r0, asr #25
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	00000cc2 	andeq	r0, r0, r2, asr #25
	...
        node->data_base.item_array[index].data_entry[0] = '\0';
     1f0:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
     1f4:	00000cbe 			; <UNDEFINED> instruction: 0x00000cbe
        node->data_base.item_count -= 1;
     1f8:	00000cc2 	andeq	r0, r0, r2, asr #25
};
     1fc:	00000cc4 	andeq	r0, r0, r4, asr #25
	...
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00000cd4 	ldrdeq	r0, [r0], -r4
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00000cd6 	ldrdeq	r0, [r0], -r6
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	00000cd8 	ldrdeq	r0, [r0], -r8
            node->data_base.item_array[i].timestamp = 0;
     214:	00000cda 	ldrdeq	r0, [r0], -sl
	...
}
     220:	00000d0e 	andeq	r0, r0, lr, lsl #26
        return true;
     224:	00000d12 	andeq	r0, r0, r2, lsl sp
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00000d14 	andeq	r0, r0, r4, lsl sp
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00000d16 	andeq	r0, r0, r6, lsl sp
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	00000d18 	andeq	r0, r0, r8, lsl sp
     234:	00000d20 	andeq	r0, r0, r0, lsr #26
	...
	response_message->tpe = RESPONSE;
     240:	00000d44 	andeq	r0, r0, r4, asr #26
	response_message->status = status;
     244:	00000d4a 	andeq	r0, r0, sl, asr #26
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	00000d4c 	andeq	r0, r0, ip, asr #26
	response_message->gid = gid;
     24c:	00000d52 	andeq	r0, r0, r2, asr sp
	...
	if (!padding){
     258:	00000d74 	andeq	r0, r0, r4, ror sp
		response_message->padding = padding;
     25c:	00000dfa 	strdeq	r0, [r0], -sl
	if (rec != NULL){
     260:	00000e20 	andeq	r0, r0, r0, lsr #28
     264:	00000e78 	andeq	r0, r0, r8, ror lr
	...
		strncpy(response_message->record, rec, 20);
     270:	00000ee8 	andeq	r0, r0, r8, ror #29
};
     274:	00000eea 	andeq	r0, r0, sl, ror #29
fsm receiver(struct Node* node_db) {
     278:	00000eec 	andeq	r0, r0, ip, ror #29
     27c:	00000f00 	andeq	r0, r0, r0, lsl #30
	...
     288:	00000f1c 	andeq	r0, r0, ip, lsl pc
     28c:	00000f1e 	andeq	r0, r0, lr, lsl pc
     290:	00000f20 	andeq	r0, r0, r0, lsr #30
     294:	00000f28 	andeq	r0, r0, r8, lsr #30
	...
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	00001064 	andeq	r1, r0, r4, rrx
     2a4:	00001068 	andeq	r1, r0, r8, rrx
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	0000106a 	andeq	r1, r0, sl, rrx
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	0000106c 	andeq	r1, r0, ip, rrx
     2b0:	0000106e 	andeq	r1, r0, lr, rrx
     2b4:	00001070 	andeq	r1, r0, r0, ror r0
	...
		switch (response_message_5->tpe){
     2c0:	000010cc 	andeq	r1, r0, ip, asr #1
     2c4:	000010d0 	ldrdeq	r1, [r0], -r0
     2c8:	000010e2 	andeq	r1, r0, r2, ror #1
     2cc:	0000110e 	andeq	r1, r0, lr, lsl #2
	...
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	00001124 	andeq	r1, r0, r4, lsr #2
				if (discovery_request_message->gid == node_db->gid){
     2dc:	00001124 	andeq	r1, r0, r4, lsr #2
     2e0:	00001126 	andeq	r1, r0, r6, lsr #2
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	00001128 	andeq	r1, r0, r8, lsr #2
	...
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	00001128 	andeq	r1, r0, r8, lsr #2
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	0000112a 	andeq	r1, r0, sl, lsr #2
					response_message_0->sender_id = node_db->id;
     2f8:	0000112c 	andeq	r1, r0, ip, lsr #2
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	0000112e 	andeq	r1, r0, lr, lsr #2
					DEBUG_PRINT("\r\nSending to sender");
     300:	00001134 	andeq	r1, r0, r4, lsr r1
					call sender(response_message_0, done_case);
     304:	0000113a 	andeq	r1, r0, sl, lsr r1
     308:	00001144 	andeq	r1, r0, r4, asr #2
     30c:	00001146 	andeq	r1, r0, r6, asr #2
     310:	00001152 	andeq	r1, r0, r2, asr r1
     314:	00001154 	andeq	r1, r0, r4, asr r1
	...
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     320:	00001168 	andeq	r1, r0, r8, ror #2
     324:	00001168 	andeq	r1, r0, r8, ror #2
     328:	0000116a 	andeq	r1, r0, sl, ror #2
     32c:	0000116c 	andeq	r1, r0, ip, ror #2
	...
     338:	0000116e 	andeq	r1, r0, lr, ror #2
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	00001170 	andeq	r1, r0, r0, ror r1
					node_db->index+=1;
     340:	00001172 	andeq	r1, r0, r2, ror r1
     344:	00001174 	andeq	r1, r0, r4, ror r1
		tcv_endp(incoming_packet);
     348:	0000117e 	andeq	r1, r0, lr, ror r1
     34c:	00001182 	andeq	r1, r0, r2, lsl #3
		proceed receiving;
     350:	0000118c 	andeq	r1, r0, ip, lsl #3
		ser_out(response_1_create, "\r\nData Saved");
     354:	0000118e 	andeq	r1, r0, lr, lsl #3
	...
		proceed receiving;
     360:	00001272 	andeq	r1, r0, r2, ror r2
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	00001274 	andeq	r1, r0, r4, ror r2
     368:	00001276 	andeq	r1, r0, r6, ror r2
		proceed receiving;
     36c:	0000127a 	andeq	r1, r0, sl, ror r2
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	0000128a 	andeq	r1, r0, sl, lsl #5
     374:	0000128c 	andeq	r1, r0, ip, lsl #5
	...
     380:	00001274 	andeq	r1, r0, r4, ror r2
		proceed receiving;
     384:	00001276 	andeq	r1, r0, r6, ror r2
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	0000127a 	andeq	r1, r0, sl, ror r2
     38c:	0000128a 	andeq	r1, r0, sl, lsl #5
     390:	0000128c 	andeq	r1, r0, ip, lsl #5
     394:	000012c6 	andeq	r1, r0, r6, asr #5
	...
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     3a0:	0000127e 	andeq	r1, r0, lr, ror r2
     3a4:	00001282 	andeq	r1, r0, r2, lsl #5
     3a8:	000012aa 	andeq	r1, r0, sl, lsr #5
		proceed receiving;
     3ac:	000012b2 			; <UNDEFINED> instruction: 0x000012b2
	...
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b8:	00001282 	andeq	r1, r0, r2, lsl #5
     3bc:	00001286 	andeq	r1, r0, r6, lsl #5
		proceed receiving;
     3c0:	000012be 			; <UNDEFINED> instruction: 0x000012be
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	000012c2 	andeq	r1, r0, r2, asr #5
	...
}
     3d0:	00001286 	andeq	r1, r0, r6, lsl #5
     3d4:	0000128a 	andeq	r1, r0, sl, lsl #5
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	000012be 			; <UNDEFINED> instruction: 0x000012be
	...
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e8:	000012c6 	andeq	r1, r0, r6, asr #5
     3ec:	000012c8 	andeq	r1, r0, r8, asr #5
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	000012ca 	andeq	r1, r0, sl, asr #5
					break;
     3f4:	000012cc 	andeq	r1, r0, ip, asr #5
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	000012ce 	andeq	r1, r0, lr, asr #5
     3fc:	000012d0 	ldrdeq	r1, [r0], -r0
	...
    if (node->data_base.item_count == NUMB_OF_ENT){
     408:	000012c8 	andeq	r1, r0, r8, asr #5
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	000012ca 	andeq	r1, r0, sl, asr #5
     410:	000012d0 	ldrdeq	r1, [r0], -r0
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	000012d2 	ldrdeq	r1, [r0], -r2
	...
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     420:	000012e2 	andeq	r1, r0, r2, ror #5
     424:	000012e4 	andeq	r1, r0, r4, ror #5
     428:	000012e6 	andeq	r1, r0, r6, ror #5
     42c:	000012e8 	andeq	r1, r0, r8, ror #5
	...
					call sender(response_message_2, done_case);
     438:	000012fa 	strdeq	r1, [r0], -sl
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	000012fc 	strdeq	r1, [r0], -ip
     440:	000012fe 	strdeq	r1, [r0], -lr
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	00001300 	andeq	r1, r0, r0, lsl #6
	...
				DEBUG_PRINT("\r\nDelete rec");
     450:	00001342 	andeq	r1, r0, r2, asr #6
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	00001342 	andeq	r1, r0, r2, asr #6
     458:	00001346 	andeq	r1, r0, r6, asr #6
     45c:	00001348 	andeq	r1, r0, r8, asr #6
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     468:	00001378 	andeq	r1, r0, r8, ror r3
     46c:	0000137a 	andeq	r1, r0, sl, ror r3
     470:	0000137c 	andeq	r1, r0, ip, ror r3
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	00001384 	andeq	r1, r0, r4, lsl #7
	...
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	00001424 	andeq	r1, r0, r4, lsr #8
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	00001424 	andeq	r1, r0, r4, lsr #8
     488:	0000142a 	andeq	r1, r0, sl, lsr #8
     48c:	0000142c 	andeq	r1, r0, ip, lsr #8
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	0000142e 	andeq	r1, r0, lr, lsr #8
						status = (uint8_t) SUCCESS;
     494:	00001432 	andeq	r1, r0, r2, lsr r4
	...
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     4a0:	0000143e 	andeq	r1, r0, lr, lsr r4
     4a4:	00001440 	andeq	r1, r0, r0, asr #8
     4a8:	00001456 	andeq	r1, r0, r6, asr r4
     4ac:	00001458 	andeq	r1, r0, r8, asr r4
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	0000146a 	andeq	r1, r0, sl, ror #8
     4b4:	00001486 	andeq	r1, r0, r6, lsl #9
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	000014aa 	andeq	r1, r0, sl, lsr #9
     4bc:	00001604 	andeq	r1, r0, r4, lsl #12
	...
     4c8:	0000143e 	andeq	r1, r0, lr, lsr r4
     4cc:	00001440 	andeq	r1, r0, r0, asr #8
     4d0:	000014de 	ldrdeq	r1, [r0], -lr
     4d4:	000014e2 	andeq	r1, r0, r2, ror #9
	...
     4e0:	000014e2 	andeq	r1, r0, r2, ror #9
     4e4:	000014e2 	andeq	r1, r0, r2, ror #9
     4e8:	000014e6 	andeq	r1, r0, r6, ror #9
     4ec:	000014ea 	andeq	r1, r0, sl, ror #9
     4f0:	000014ee 	andeq	r1, r0, lr, ror #9
     4f4:	000014f0 	strdeq	r1, [r0], -r0
	...
     500:	000014e2 	andeq	r1, r0, r2, ror #9
     504:	000014e6 	andeq	r1, r0, r6, ror #9
     508:	000014fc 	strdeq	r1, [r0], -ip
     50c:	000014fe 	strdeq	r1, [r0], -lr
     510:	00001502 	andeq	r1, r0, r2, lsl #10
     514:	00001506 	andeq	r1, r0, r6, lsl #10
	...
     520:	000014ea 	andeq	r1, r0, sl, ror #9
     524:	000014ee 	andeq	r1, r0, lr, ror #9
     528:	000014f0 	strdeq	r1, [r0], -r0
     52c:	000014f2 	strdeq	r1, [r0], -r2
     530:	000014f6 	strdeq	r1, [r0], -r6
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	000014fa 	strdeq	r1, [r0], -sl
	...
				DEBUG_PRINT("\r\nretrieve rec");
     540:	000014fe 	strdeq	r1, [r0], -lr
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00001502 	andeq	r1, r0, r2, lsl #10
     548:	0000151c 	andeq	r1, r0, ip, lsl r5
     54c:	00001520 	andeq	r1, r0, r0, lsr #10
     550:	00001522 	andeq	r1, r0, r2, lsr #10
     554:	0000152a 	andeq	r1, r0, sl, lsr #10
	...
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     560:	00001514 	andeq	r1, r0, r4, lsl r5
     564:	00001516 	andeq	r1, r0, r6, lsl r5
    return node->data_base.item_array[index];
     568:	00001518 	andeq	r1, r0, r8, lsl r5
     56c:	0000151c 	andeq	r1, r0, ip, lsl r5
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	00001558 	andeq	r1, r0, r8, asr r5
    return node->data_base.item_array[index];
     57c:	0000155c 	andeq	r1, r0, ip, asr r5
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	0000155e 	andeq	r1, r0, lr, asr r5
     584:	00001566 	andeq	r1, r0, r6, ror #10
	...
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     590:	0000155c 	andeq	r1, r0, ip, asr r5
     594:	0000155e 	andeq	r1, r0, lr, asr r5
     598:	0000156a 	andeq	r1, r0, sl, ror #10
     59c:	0000156c 	andeq	r1, r0, ip, ror #10
	...
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	0000158a 	andeq	r1, r0, sl, lsl #11
     5ac:	0000158c 	andeq	r1, r0, ip, lsl #11
				DEBUG_PRINT("\r\nResponse");
     5b0:	0000158e 	andeq	r1, r0, lr, lsl #11
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	00001590 	muleq	r0, r0, r5
	...
     5c0:	0000158c 	andeq	r1, r0, ip, lsl #11
     5c4:	0000158e 	andeq	r1, r0, lr, lsl #11
     5c8:	00001590 	muleq	r0, r0, r5
				if(!response_flag){
     5cc:	00001594 	muleq	r0, r4, r5
	...
				switch(response_message_5->status){
     5d8:	000015ea 	andeq	r1, r0, sl, ror #11
     5dc:	000015ec 	andeq	r1, r0, ip, ror #11
     5e0:	000015ec 	andeq	r1, r0, ip, ror #11
     5e4:	000015ee 	andeq	r1, r0, lr, ror #11
	...
						if (response_checker[0] == response_message_5->request_number){
     5f0:	000015f2 	strdeq	r1, [r0], -r2
     5f4:	000015f6 	strdeq	r1, [r0], -r6
							switch(response_checker[1]){
     5f8:	000015f8 	strdeq	r1, [r0], -r8
     5fc:	000015fa 	strdeq	r1, [r0], -sl
	...
									proceed response_1_create;
     608:	00000001 	andeq	r0, r0, r1
						proceed response_2;
     60c:	00000001 	andeq	r0, r0, r1
									proceed response_1_delete;
     610:	00000001 	andeq	r0, r0, r1
									proceed response_1_retrieve;
     614:	00000001 	andeq	r0, r0, r1
	...
						proceed response_4;
     620:	000016ac 	andeq	r1, r0, ip, lsr #13
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	000016ac 	andeq	r1, r0, ip, lsr #13
     628:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
				break;
     62c:	000016bc 			; <UNDEFINED> instruction: 0x000016bc
	...
}
     638:	00000bc8 	andeq	r0, r0, r8, asr #23
     63c:	00000bd4 	ldrdeq	r0, [r0], -r4
     640:	00000bd4 	ldrdeq	r0, [r0], -r4
     644:	00000c00 	andeq	r0, r0, r0, lsl #24
fsm root {
     648:	00000c00 	andeq	r0, r0, r0, lsl #24
     64c:	00000c2a 	andeq	r0, r0, sl, lsr #24
     650:	00000c2c 	andeq	r0, r0, ip, lsr #24
     654:	00000c68 	andeq	r0, r0, r8, ror #24
     658:	00000c68 	andeq	r0, r0, r8, ror #24
     65c:	00000ca8 	andeq	r0, r0, r8, lsr #25
     660:	00000001 	andeq	r0, r0, r1
     664:	00000001 	andeq	r0, r0, r1
     668:	00000ca8 	andeq	r0, r0, r8, lsr #25
     66c:	00000cfc 	strdeq	r0, [r0], -ip
     670:	00000cfc 	strdeq	r0, [r0], -ip
     674:	00000d3c 	andeq	r0, r0, ip, lsr sp
     678:	00000d3c 	andeq	r0, r0, ip, lsr sp
     67c:	00000d64 	andeq	r0, r0, r4, ror #26
     680:	00000d64 	andeq	r0, r0, r4, ror #26
     684:	00000e78 	andeq	r0, r0, r8, ror lr
     688:	00000e78 	andeq	r0, r0, r8, ror lr
     68c:	00000ec8 	andeq	r0, r0, r8, asr #29
     690:	00000ec8 	andeq	r0, r0, r8, asr #29
     694:	00000f1c 	andeq	r0, r0, ip, lsl pc
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	00000f1c 	andeq	r0, r0, ip, lsl pc
     69c:	00000f54 	andeq	r0, r0, r4, asr pc
     6a0:	00000f54 	andeq	r0, r0, r4, asr pc
		init_node(node_db);
     6a4:	00001064 	andeq	r1, r0, r4, rrx
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	00000001 	andeq	r0, r0, r1
     6ac:	00000001 	andeq	r0, r0, r1
		tcv_plug (0, &plug_null);
     6b0:	00001064 	andeq	r1, r0, r4, rrx
     6b4:	00001124 	andeq	r1, r0, r4, lsr #2
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	00001124 	andeq	r1, r0, r4, lsr #2
     6bc:	00001168 	andeq	r1, r0, r8, ror #2
     6c0:	00001168 	andeq	r1, r0, r8, ror #2
     6c4:	000011a4 	andeq	r1, r0, r4, lsr #3
     6c8:	000011a4 	andeq	r1, r0, r4, lsr #3
			diag("Cannot open tcv interface");
     6cc:	00001248 	andeq	r1, r0, r8, asr #4
     6d0:	00001248 	andeq	r1, r0, r8, asr #4
			halt();
     6d4:	00001400 	andeq	r1, r0, r0, lsl #8
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	00001400 	andeq	r1, r0, r0, lsl #8
     6dc:	00001424 	andeq	r1, r0, r4, lsr #8
		runfsm receiver(node_db);
     6e0:	00000001 	andeq	r0, r0, r1
     6e4:	00000001 	andeq	r0, r0, r1
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	00001424 	andeq	r1, r0, r4, lsr #8
     6ec:	0000167c 	andeq	r1, r0, ip, ror r6
     6f0:	0000167c 	andeq	r1, r0, ip, ror r6
     6f4:	000016ac 	andeq	r1, r0, ip, lsr #13
     6f8:	00000001 	andeq	r0, r0, r1
     6fc:	00000001 	andeq	r0, r0, r1
		ser_inf(get_choice, "%c", &CHOICE);
     700:	000016ac 	andeq	r1, r0, ip, lsr #13
     704:	0000170c 	andeq	r1, r0, ip, lsl #14
	...
		switch(CHOICE) {
     710:	000017c8 	andeq	r1, r0, r8, asr #15
     714:	000017ca 	andeq	r1, r0, sl, asr #15
     718:	000017ca 	andeq	r1, r0, sl, asr #15
     71c:	000017cc 	andeq	r1, r0, ip, asr #15
	...
     728:	00001832 	andeq	r1, r0, r2, lsr r8
     72c:	000018d4 	ldrdeq	r1, [r0], -r4
     730:	000018d8 	ldrdeq	r1, [r0], -r8
     734:	000018dc 	ldrdeq	r1, [r0], -ip
	...
				proceed menu;
     740:	00001ca8 	andeq	r1, r0, r8, lsr #25
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	00001caa 	andeq	r1, r0, sl, lsr #25
     748:	00001cae 	andeq	r1, r0, lr, lsr #25
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
     750:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
     754:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
		DEBUG_PRINT("setting node group ID");
     758:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75c:	00001cc4 	andeq	r1, r0, r4, asr #25
	...
		proceed menu;
     768:	00001cf6 	strdeq	r1, [r0], -r6
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76c:	00001cf8 	strdeq	r1, [r0], -r8
     770:	00001cfa 	strdeq	r1, [r0], -sl
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     774:	00001cfe 	strdeq	r1, [r0], -lr
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	00001d8e 	andeq	r1, r0, lr, lsl #27
     77c:	00001df0 	strdeq	r1, [r0], -r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     780:	00001df4 	strdeq	r1, [r0], -r4
     784:	00001df8 	strdeq	r1, [r0], -r8
		if((node_db->id < 1) || (node_db->id > 25)){
     788:	00001dfa 	strdeq	r1, [r0], -sl
     78c:	00001dfc 	strdeq	r1, [r0], -ip
	...
			strncpy(reason, "Out of Range", 50);
     798:	00001d12 	andeq	r1, r0, r2, lsl sp
			proceed invalid_node_id;
     79c:	00001d14 	andeq	r1, r0, r4, lsl sp
     7a0:	00001d14 	andeq	r1, r0, r4, lsl sp
				strncpy(reason, "ID is already in use", 50);
     7a4:	00001d16 	andeq	r1, r0, r6, lsl sp
	...
		for(int i = 0; i < node_db->index; i++){
     7b0:	0000170c 	andeq	r1, r0, ip, lsl #14
		proceed menu;
     7b4:	00001748 	andeq	r1, r0, r8, asr #14
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7b8:	00001748 	andeq	r1, r0, r8, asr #14
     7bc:	000017c8 	andeq	r1, r0, r8, asr #15
     7c0:	000017c8 	andeq	r1, r0, r8, asr #15
     7c4:	000017e0 	andeq	r1, r0, r0, ror #15
		proceed get_new_node_id;
     7c8:	00000001 	andeq	r0, r0, r1
     7cc:	00000001 	andeq	r0, r0, r1
		if (!clear_node_neighbour_array(node_db)){
     7d0:	000017e0 	andeq	r1, r0, r0, ror #15
     7d4:	000017f0 	strdeq	r1, [r0], -r0
			strncpy(reason, "Error Clearing Node Array", 50);
     7d8:	000017f0 	strdeq	r1, [r0], -r0
     7dc:	0000181c 	andeq	r1, r0, ip, lsl r8
     7e0:	00000001 	andeq	r0, r0, r1
			proceed error;
     7e4:	00000001 	andeq	r0, r0, r1
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7e8:	0000181c 	andeq	r1, r0, ip, lsl r8
     7ec:	00001822 	andeq	r1, r0, r2, lsr #16
		request_packet->gid = node_db->gid;
     7f0:	00001824 	andeq	r1, r0, r4, lsr #16
     7f4:	000018f0 	strdeq	r1, [r0], -r0
		request_packet->tpe = DISCOVERY_REQUEST;
     7f8:	000018f0 	strdeq	r1, [r0], -r0
		request_packet->request_number = generate_request_num();
     7fc:	00001904 	andeq	r1, r0, r4, lsl #18
     800:	00001904 	andeq	r1, r0, r4, lsl #18
		call sender(request_packet, wait_discovery);
     804:	00001938 	andeq	r1, r0, r8, lsr r9
     808:	00001938 	andeq	r1, r0, r8, lsr r9
		request_packet->receiver_id=0;
     80c:	0000196c 	andeq	r1, r0, ip, ror #18
		call sender(request_packet, wait_discovery);
     810:	00000001 	andeq	r0, r0, r1
     814:	00000001 	andeq	r0, r0, r1
     818:	0000196c 	andeq	r1, r0, ip, ror #18
			release;
     81c:	00001990 	muleq	r0, r0, r9
				proceed get_new_node_id;
     820:	00001990 	muleq	r0, r0, r9
				proceed clear_neighbour_array;
     824:	000019c8 	andeq	r1, r0, r8, asr #19
				proceed create_proto_start;
     828:	00000001 	andeq	r0, r0, r1
				proceed start_delete_proto;
     82c:	00000001 	andeq	r0, r0, r1
				proceed retrieve_proto;
     830:	00000001 	andeq	r0, r0, r1
				proceed display_db;
     834:	00000001 	andeq	r0, r0, r1
				proceed del_local;
     838:	00000001 	andeq	r0, r0, r1
			if(node_db->id == node_db->nnodes[i]){
     83c:	00000001 	andeq	r0, r0, r1
     840:	000019c8 	andeq	r1, r0, r8, asr #19
     844:	000019ec 	andeq	r1, r0, ip, ror #19
				strncpy(reason, "ID is already in use", 50);
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
				proceed invalid_node_id;
     850:	000019ec 	andeq	r1, r0, ip, ror #19
     854:	000019fa 	strdeq	r1, [r0], -sl
		for(int i = 0; i < node_db->index; i++){
     858:	000019fa 	strdeq	r1, [r0], -sl
		if (discovery_wait_flag == 0){
     85c:	00001a0a 	andeq	r1, r0, sl, lsl #20
			discovery_wait_flag=1;
     860:	00001a0a 	andeq	r1, r0, sl, lsl #20
     864:	00001a26 	andeq	r1, r0, r6, lsr #20
			delay(3000, find_proto_start);
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
		if (discovery_wait_flag == 1){
     870:	00000001 	andeq	r0, r0, r1
			discovery_wait_flag=0;
     874:	00000001 	andeq	r0, r0, r1
     878:	00001a26 	andeq	r1, r0, r6, lsr #20
			delay(3000, display_neighbour_nodes);
     87c:	00001a3a 	andeq	r1, r0, sl, lsr sl
     880:	00001a3a 	andeq	r1, r0, sl, lsr sl
     884:	00001a48 	andeq	r1, r0, r8, asr #20
     888:	00001a48 	andeq	r1, r0, r8, asr #20
     88c:	00001a6c 	andeq	r1, r0, ip, ror #20
     890:	00001a6c 	andeq	r1, r0, ip, ror #20
     894:	00001b08 	andeq	r1, r0, r8, lsl #22
     898:	00001b08 	andeq	r1, r0, r8, lsl #22
     89c:	00001b58 	andeq	r1, r0, r8, asr fp
     8a0:	00001b58 	andeq	r1, r0, r8, asr fp
     8a4:	00001ba0 	andeq	r1, r0, r0, lsr #23
     8a8:	00001ba0 	andeq	r1, r0, r0, lsr #23
     8ac:	00001bf0 	strdeq	r1, [r0], -r0
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
     8b8:	00001bf0 	strdeq	r1, [r0], -r0
     8bc:	00001c98 	muleq	r0, r8, ip
     8c0:	00001c98 	muleq	r0, r8, ip
     8c4:	00001ccc 	andeq	r1, r0, ip, asr #25
		if(node_db->index == 0){
     8c8:	00001ccc 	andeq	r1, r0, ip, asr #25
     8cc:	00001ce4 	andeq	r1, r0, r4, ror #25
     8d0:	00000001 	andeq	r0, r0, r1
			proceed menu;
     8d4:	00000001 	andeq	r0, r0, r1
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8e0:	00001ce4 	andeq	r1, r0, r4, ror #25
			if (node_db->nnodes[i] == 0) break;
     8e4:	00001e20 	andeq	r1, r0, r0, lsr #28
     8e8:	00001e20 	andeq	r1, r0, r0, lsr #28
     8ec:	00001e44 	andeq	r1, r0, r4, asr #28
	...
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f8:	00001f04 	andeq	r1, r0, r4, lsl #30
		proceed menu;
     8fc:	00001f0a 	andeq	r1, r0, sl, lsl #30
     900:	00001f10 	andeq	r1, r0, r0, lsl pc
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     904:	00001f14 	andeq	r1, r0, r4, lsl pc
     908:	00001f1c 	andeq	r1, r0, ip, lsl pc
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
     90c:	00001f3c 	andeq	r1, r0, ip, lsr pc
	...
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     918:	00000001 	andeq	r0, r0, r1
     91c:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: improper ID", 50);
     920:	00000001 	andeq	r0, r0, r1
     924:	00000001 	andeq	r0, r0, r1
	...
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     930:	00001e44 	andeq	r1, r0, r4, asr #28
     934:	00001e5a 	andeq	r1, r0, sl, asr lr
		ser_in(get_record_to_create, user_provided_record, 20);
     938:	00001e5a 	andeq	r1, r0, sl, asr lr
     93c:	00001e74 	andeq	r1, r0, r4, ror lr
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     940:	00001e74 	andeq	r1, r0, r4, ror lr
     944:	00001e82 	andeq	r1, r0, r2, lsl #29
     948:	00001e84 	andeq	r1, r0, r4, lsl #29
		create_message->gid = node_db->gid;
     94c:	00001ed0 	ldrdeq	r1, [r0], -r0
		create_message->tpe = CREATE_RECORD;
     950:	00001ed0 	ldrdeq	r1, [r0], -r0
		create_message->request_number = generate_request_num();
     954:	00001f5c 	andeq	r1, r0, ip, asr pc
     958:	00001f5c 	andeq	r1, r0, ip, asr pc
		strncpy(create_message->record, user_provided_record, 20);
     95c:	00001fcc 	andeq	r1, r0, ip, asr #31
     960:	00001fcc 	andeq	r1, r0, ip, asr #31
		create_message->receiver_id = user_provided_receiver_id;
     964:	0000208c 	andeq	r2, r0, ip, lsl #1
		strncpy(create_message->record, user_provided_record, 20);
     968:	00000001 	andeq	r0, r0, r1
		create_message->receiver_id = user_provided_receiver_id;
     96c:	00000001 	andeq	r0, r0, r1
		strncpy(create_message->record, user_provided_record, 20);
     970:	0000208c 	andeq	r2, r0, ip, lsl #1
		response_checker[0] = create_message->request_number;
     974:	000020b0 	strheq	r2, [r0], -r0
     978:	000020b0 	strheq	r2, [r0], -r0
		call sender(create_message, wait);
     97c:	00002130 	andeq	r2, r0, r0, lsr r1
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     990:	00002130 	andeq	r2, r0, r0, lsr r1
     994:	000021ec 	andeq	r2, r0, ip, ror #3
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	00000001 	andeq	r0, r0, r1
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9a4:	00000001 	andeq	r0, r0, r1
     9a8:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: improper node ID", 50);
     9ac:	00000001 	andeq	r0, r0, r1
     9b0:	000021ec 	andeq	r2, r0, ip, ror #3
     9b4:	00002218 	andeq	r2, r0, r8, lsl r2
			proceed error;
     9b8:	00002218 	andeq	r2, r0, r8, lsl r2
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9bc:	00002278 	andeq	r2, r0, r8, ror r2
     9c0:	00000001 	andeq	r0, r0, r1
		ser_inf(get_index_for_delete, "%u", &user_provided_index);
     9c4:	00000001 	andeq	r0, r0, r1
     9c8:	00000001 	andeq	r0, r0, r1
     9cc:	00000001 	andeq	r0, r0, r1
		if (user_provided_index < 0 || user_provided_index > 40){
     9d0:	00000001 	andeq	r0, r0, r1
     9d4:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: invalid index", 50);
     9d8:	00000001 	andeq	r0, r0, r1
     9dc:	00000001 	andeq	r0, r0, r1
			proceed error;
     9e0:	00002278 	andeq	r2, r0, r8, ror r2
     9e4:	000022e0 	andeq	r2, r0, r0, ror #5
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	000022e0 	andeq	r2, r0, r0, ror #5
		delete_record->gid = node_db->gid;
     9ec:	00002330 	andeq	r2, r0, r0, lsr r3
     9f0:	00002330 	andeq	r2, r0, r0, lsr r3
     9f4:	000023cc 	andeq	r2, r0, ip, asr #7
		delete_record->tpe = DELETE_RECORD;
     9f8:	000023cc 	andeq	r2, r0, ip, asr #7
		delete_record->request_number = generate_request_num();
     9fc:	0000240c 	andeq	r2, r0, ip, lsl #8
		delete_record->sender_id = node_db->id;
     a00:	0000240c 	andeq	r2, r0, ip, lsl #8
     a04:	00002440 	andeq	r2, r0, r0, asr #8
		delete_record->receiver_id = user_provided_receiver_id;
     a08:	00002440 	andeq	r2, r0, r0, asr #8
     a0c:	0000247c 	andeq	r2, r0, ip, ror r4
		delete_record->record_index = user_provided_index;
     a10:	00000001 	andeq	r0, r0, r1
		response_checker[0] = delete_record->request_number;
     a14:	00000001 	andeq	r0, r0, r1
		response_checker[1] = delete_record->tpe;
     a18:	0000247c 	andeq	r2, r0, ip, ror r4
     a1c:	0000247e 	andeq	r2, r0, lr, ror r4
	...
		call sender(delete_record, wait);
     a28:	0000247e 	andeq	r2, r0, lr, ror r4
     a2c:	00002480 	andeq	r2, r0, r0, lsl #9
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a30:	00002480 	andeq	r2, r0, r0, lsl #9
     a34:	00002482 	andeq	r2, r0, r2, lsl #9
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
     a38:	00002482 	andeq	r2, r0, r2, lsl #9
     a3c:	00002484 	andeq	r2, r0, r4, lsl #9
     a40:	00002484 	andeq	r2, r0, r4, lsl #9
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     a44:	000024c8 	andeq	r2, r0, r8, asr #9
	...
			strncpy(reason, "Error: improper node ID", 50);
     a50:	00000001 	andeq	r0, r0, r1
			proceed error;
     a54:	00000001 	andeq	r0, r0, r1
     a58:	00000001 	andeq	r0, r0, r1
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a5c:	00000001 	andeq	r0, r0, r1
     a60:	00000001 	andeq	r0, r0, r1
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
     a64:	00000001 	andeq	r0, r0, r1
     a68:	00000001 	andeq	r0, r0, r1
     a6c:	00000001 	andeq	r0, r0, r1
	...
			strncpy(reason, "Error: invalid index", 50);
     a78:	00000001 	andeq	r0, r0, r1
     a7c:	00000001 	andeq	r0, r0, r1
			proceed error;
     a80:	00000001 	andeq	r0, r0, r1
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a84:	00000001 	andeq	r0, r0, r1
	...
		retrieve_record->gid = node_db->gid;
     a90:	00000001 	andeq	r0, r0, r1
     a94:	00000001 	andeq	r0, r0, r1
		retrieve_record->tpe = RETRIEVE_RECORD;
     a98:	00000001 	andeq	r0, r0, r1
		retrieve_record->request_number = generate_request_num();
     a9c:	00000001 	andeq	r0, r0, r1
     aa0:	00000001 	andeq	r0, r0, r1
		retrieve_record->sender_id = node_db->id;
     aa4:	00000001 	andeq	r0, r0, r1
		response_checker[0] = retrieve_record->request_number;
     aa8:	00000001 	andeq	r0, r0, r1
		retrieve_record->receiver_id = user_provided_receiver_id;
     aac:	00000001 	andeq	r0, r0, r1
	...
		retrieve_record->record_index = user_provided_index;
     ab8:	00000001 	andeq	r0, r0, r1
		response_checker[0] = retrieve_record->request_number;
     abc:	00000001 	andeq	r0, r0, r1
		call sender(&retrieve_record, wait);
     ac0:	00000001 	andeq	r0, r0, r1
     ac4:	00000001 	andeq	r0, r0, r1
	...
     ad0:	00000001 	andeq	r0, r0, r1
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad4:	00000001 	andeq	r0, r0, r1
     ad8:	00000001 	andeq	r0, r0, r1
		if(node_db->data_base.item_count != 0){
     adc:	00000001 	andeq	r0, r0, r1
     ae0:	00000001 	andeq	r0, r0, r1
     ae4:	00000001 	andeq	r0, r0, r1
	...
		proceed menu;
     af0:	00000001 	andeq	r0, r0, r1
		delete_all(node_db);
     af4:	00000001 	andeq	r0, r0, r1
     af8:	00000001 	andeq	r0, r0, r1
		proceed menu;
     afc:	00000001 	andeq	r0, r0, r1
	...
		delay(3000, timeout);
     b08:	000024d4 	ldrdeq	r2, [r0], -r4
		when(&response_flag, menu);
     b0c:	000024d8 	ldrdeq	r2, [r0], -r8
     b10:	000024de 	ldrdeq	r2, [r0], -lr
		release;
     b14:	000024e0 	andeq	r2, r0, r0, ror #9
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b18:	000024ee 	andeq	r2, r0, lr, ror #9
     b1c:	000024ee 	andeq	r2, r0, lr, ror #9
     b20:	000024f0 	strdeq	r2, [r0], -r0
     b24:	000024f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
     b30:	000024da 	ldrdeq	r2, [r0], -sl
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b34:	000024dc 	ldrdeq	r2, [r0], -ip
     b38:	000024f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     b3c:	000024f4 	strdeq	r2, [r0], -r4
	...
		ser_out(timeout, "\r\nFailed to reach the destination");
     b48:	000024dc 	ldrdeq	r2, [r0], -ip
     b4c:	000024de 	ldrdeq	r2, [r0], -lr
		proceed menu;
     b50:	000024e0 	andeq	r2, r0, r0, ror #9
     b54:	000024e2 	andeq	r2, r0, r2, ror #9
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b58:	000024e8 	andeq	r2, r0, r8, ror #9
     b5c:	000024e8 	andeq	r2, r0, r8, ror #9
	...
}
     b68:	0000250c 	andeq	r2, r0, ip, lsl #10
     b6c:	00002514 	andeq	r2, r0, r4, lsl r5
     b70:	0000251e 	andeq	r2, r0, lr, lsl r5
     b74:	0000251e 	andeq	r2, r0, lr, lsl r5
     b78:	00002522 	andeq	r2, r0, r2, lsr #10
     b7c:	00002524 	andeq	r2, r0, r4, lsr #10
	...
     b88:	00002524 	andeq	r2, r0, r4, lsr #10
     b8c:	00002524 	andeq	r2, r0, r4, lsr #10
     b90:	00002526 	andeq	r2, r0, r6, lsr #10
     b94:	00002528 	andeq	r2, r0, r8, lsr #10
	...
     ba0:	00002534 	andeq	r2, r0, r4, lsr r5
     ba4:	00002536 	andeq	r2, r0, r6, lsr r5
     ba8:	00002538 	andeq	r2, r0, r8, lsr r5
     bac:	0000253c 	andeq	r2, r0, ip, lsr r5
	...
     bb8:	00002554 	andeq	r2, r0, r4, asr r5
     bbc:	00002556 	andeq	r2, r0, r6, asr r5
     bc0:	0000255a 	andeq	r2, r0, sl, asr r5
     bc4:	0000255c 	andeq	r2, r0, ip, asr r5
static void devinit_uart (int devnum) {
     bc8:	00002562 	andeq	r2, r0, r2, ror #10
	adddevfunc (ioreq_uart_a, devnum);
     bcc:	00002572 	andeq	r2, r0, r2, ror r5
	...
void udelay (volatile word n) {
     bd8:	00002554 	andeq	r2, r0, r4, asr r5
	while (n) {
     bdc:	00002556 	andeq	r2, r0, r6, asr r5
     be0:	0000255a 	andeq	r2, r0, sl, asr r5
}
     be4:	0000255c 	andeq	r2, r0, ip, asr r5
	while (n--);
     be8:	00002562 	andeq	r2, r0, r2, ror #10
     bec:	00002562 	andeq	r2, r0, r2, ror #10
     bf0:	00002564 	andeq	r2, r0, r4, ror #10
		n--;
     bf4:	00002566 	andeq	r2, r0, r6, ror #10
	...
void mdelay (volatile word n) {
     c00:	000025ba 			; <UNDEFINED> instruction: 0x000025ba
     c04:	000025be 			; <UNDEFINED> instruction: 0x000025be
	while (n) {
     c08:	000025c0 	andeq	r2, r0, r0, asr #11
     c0c:	000025c2 	andeq	r2, r0, r2, asr #11
	...
		udelay (999);
     c18:	000025c6 	andeq	r2, r0, r6, asr #11
		n--;
     c1c:	000025c6 	andeq	r2, r0, r6, asr #11
     c20:	000025c8 	andeq	r2, r0, r8, asr #11
     c24:	000025ca 	andeq	r2, r0, sl, asr #11
	...
void __pi_ondomain (lword d) {
     c30:	00000001 	andeq	r0, r0, r1
		if (__pi_systat.effpdm > 1)
     c34:	00000001 	andeq	r0, r0, r1
     c38:	00000001 	andeq	r0, r0, r1
			__pi_systat.effpdm = 1;
     c3c:	00000001 	andeq	r0, r0, r1
	...
	PRCMPowerDomainOn (d);
     c48:	00000001 	andeq	r0, r0, r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c4c:	00000001 	andeq	r0, r0, r1
     c50:	00000001 	andeq	r0, r0, r1
     c54:	00000001 	andeq	r0, r0, r1
	...
}
     c60:	00000001 	andeq	r0, r0, r1
     c64:	00000001 	andeq	r0, r0, r1
void __pi_offdomain (lword d) {
     c68:	00000001 	andeq	r0, r0, r1
     c6c:	00000001 	andeq	r0, r0, r1
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     c78:	00000001 	andeq	r0, r0, r1
     c7c:	00000001 	andeq	r0, r0, r1
	if (d & PRCM_DOMAIN_RFCORE) {
     c80:	00000001 	andeq	r0, r0, r1
     c84:	00000001 	andeq	r0, r0, r1
	...
			__pi_systat.effpdm = __pi_systat.reqpdm;
     c90:	000024d0 	ldrdeq	r2, [r0], -r0
     c94:	00002504 	andeq	r2, r0, r4, lsl #10
	__pi_systat.ondmns &= ~d;
     c98:	00002504 	andeq	r2, r0, r4, lsl #10
     c9c:	00002534 	andeq	r2, r0, r4, lsr r5
}
     ca0:	00002534 	andeq	r2, r0, r4, lsr r5
     ca4:	0000254c 	andeq	r2, r0, ip, asr #10
void __pi_syserror (word ec, const char *m) {
     ca8:	0000254c 	andeq	r2, r0, ip, asr #10
	diag ("SYSERR: %x, %s", ec, m);
     cac:	000025a0 	andeq	r2, r0, r0, lsr #11
     cb0:	000025a0 	andeq	r2, r0, r0, lsr #11
  __ASM volatile ("cpsid i" : : : "memory");
     cb4:	000025e0 	andeq	r2, r0, r0, ror #11
     cb8:	000025e0 	andeq	r2, r0, r0, ror #11
     cbc:	00002604 	andeq	r2, r0, r4, lsl #12
     cc0:	00002604 	andeq	r2, r0, r4, lsl #12
		all_leds_blink;
     cc4:	00002618 	andeq	r2, r0, r8, lsl r6
     cc8:	00002618 	andeq	r2, r0, r8, lsl r6
     ccc:	0000262c 	andeq	r2, r0, ip, lsr #12
     cd0:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     cd4:	00000001 	andeq	r0, r0, r1
     cd8:	00000001 	andeq	r0, r0, r1
     cdc:	00000001 	andeq	r0, r0, r1
     ce0:	00000001 	andeq	r0, r0, r1
     ce4:	00000001 	andeq	r0, r0, r1
     ce8:	00000001 	andeq	r0, r0, r1
	while (1) {
     cec:	00000001 	andeq	r0, r0, r1
     cf0:	00000001 	andeq	r0, r0, r1
     cf4:	00000001 	andeq	r0, r0, r1
     cf8:	00000001 	andeq	r0, r0, r1
void tci_run_delay_timer () {
     cfc:	00000001 	andeq	r0, r0, r1
	setdel = __pi_mintk - __pi_old;
     d00:	00000001 	andeq	r0, r0, r1
     d04:	00000001 	andeq	r0, r0, r1
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d10:	0000262c 	andeq	r2, r0, ip, lsr #12
     d14:	00002698 	muleq	r0, r8, r6
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d20:	00002698 	muleq	r0, r8, r6
	sti_tim;
     d24:	00002710 	andeq	r2, r0, r0, lsl r7
	...
}
     d30:	00002710 	andeq	r2, r0, r0, lsl r7
     d34:	00002764 	andeq	r2, r0, r4, ror #14
	...
	cli_aux;
     d40:	00002764 	andeq	r2, r0, r4, ror #14
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	000027c4 	andeq	r2, r0, r4, asr #15
	...
     d50:	000029ea 	andeq	r2, r0, sl, ror #19
	sti_aux;
     d54:	000029ec 	andeq	r2, r0, ip, ror #19
}
     d58:	00002a00 	andeq	r2, r0, r0, lsl #20
     d5c:	00002a02 	andeq	r2, r0, r2, lsl #20
     d60:	00002a04 	andeq	r2, r0, r4, lsl #20
void AONRTCIntHandler () {
     d64:	00002a06 	andeq	r2, r0, r6, lsl #20
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     d70:	00002a74 	andeq	r2, r0, r4, ror sl
		if (__pi_utims [0] == 0)
     d74:	00002a7a 	andeq	r2, r0, sl, ror sl
     d78:	00002a7e 	andeq	r2, r0, lr, ror sl
		if (*(__pi_utims [0])) {
     d7c:	00002a80 	andeq	r2, r0, r0, lsl #21
	...
		if (__pi_utims [1] == 0)
     d88:	00002aa2 	andeq	r2, r0, r2, lsr #21
		if (*(__pi_utims [1])) {
     d8c:	00002aa8 	andeq	r2, r0, r8, lsr #21
			aux_timer_inactive = 0;
     d90:	00002aaa 	andeq	r2, r0, sl, lsr #21
			(*(__pi_utims [1]))--;
     d94:	00002aac 	andeq	r2, r0, ip, lsr #21
	...
			(*(__pi_utims [2]))--;
     da0:	00002ab0 			; <UNDEFINED> instruction: 0x00002ab0
		if (__pi_utims [3] != 0) {
     da4:	00002abc 			; <UNDEFINED> instruction: 0x00002abc
			if (*(__pi_utims [3])) {
     da8:	00002abc 			; <UNDEFINED> instruction: 0x00002abc
				aux_timer_inactive = 0;
     dac:	00002ac0 	andeq	r2, r0, r0, asr #21
				(*(__pi_utims [3]))--;
     db0:	00002ac2 	andeq	r2, r0, r2, asr #21
	if (__pi_systat.ledsts) {
     db4:	00002ae6 	andeq	r2, r0, r6, ror #21
	...
		if (__pi_systat.ledblc++ == 0) {
     dc0:	00002ac0 	andeq	r2, r0, r0, asr #21
			if (__pi_systat.ledblk) {
     dc4:	00002ac2 	andeq	r2, r0, r2, asr #21
     dc8:	00002ae6 	andeq	r2, r0, r6, ror #21
     dcc:	00002b20 	andeq	r2, r0, r0, lsr #22
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd0:	00002b22 	andeq	r2, r0, r2, lsr #22
     dd4:	00002b34 	andeq	r2, r0, r4, lsr fp
	...
     de0:	00002bf4 	strdeq	r2, [r0], -r4
				if (__pi_systat.ledsts & 0x4)
     de4:	00002bf4 	strdeq	r2, [r0], -r4
				__pi_systat.ledblk = 0;
     de8:	00002bf8 	strdeq	r2, [r0], -r8
     dec:	00002c12 	andeq	r2, r0, r2, lsl ip
			if (__pi_systat.fstblk)
     df0:	00002c14 	andeq	r2, r0, r4, lsl ip
     df4:	00002c16 	andeq	r2, r0, r6, lsl ip
				__pi_systat.ledblc = 200;
     df8:	00002c18 	andeq	r2, r0, r8, lsl ip
	if (events & AON_RTC_EVFLAGS_CH0) {
     dfc:	00002c1a 	andeq	r2, r0, sl, lsl ip
		cli_tim;
     e00:	00002c1e 	andeq	r2, r0, lr, lsl ip
		__pi_new += setdel;
     e04:	00002c28 	andeq	r2, r0, r8, lsr #24
	...
		RISE_N_SHINE;
     e10:	00002d3a 	andeq	r2, r0, sl, lsr sp
		__pi_new += setdel;
     e14:	00002d3e 	andeq	r2, r0, lr, lsr sp
		RISE_N_SHINE;
     e18:	00002d5a 	andeq	r2, r0, sl, asr sp
     e1c:	00002d5e 	andeq	r2, r0, lr, asr sp
	...
				if (__pi_systat.ledsts & 0x1)
     e28:	00002d3e 	andeq	r2, r0, lr, lsr sp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e2c:	00002d5a 	andeq	r2, r0, sl, asr sp
     e30:	00002d5e 	andeq	r2, r0, lr, asr sp
				if (__pi_systat.ledsts & 0x2)
     e34:	00002d66 	andeq	r2, r0, r6, ror #26
	...
				if (__pi_systat.ledsts & 0x8)
     e40:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
				__pi_systat.ledblk = 1;
     e44:	00002ed4 	ldrdeq	r2, [r0], -r4
     e48:	00002ed6 	ldrdeq	r2, [r0], -r6
		if (aux_timer_inactive) {
     e4c:	00002eda 	ldrdeq	r2, [r0], -sl
	...
			cli_aux;
     e58:	00002ed4 	ldrdeq	r2, [r0], -r4
     e5c:	00002ed6 	ldrdeq	r2, [r0], -r6
     e60:	00002eda 	ldrdeq	r2, [r0], -sl
     e64:	00002f00 	andeq	r2, r0, r0, lsl #30
	...
     e70:	00002f48 	andeq	r2, r0, r8, asr #30
     e74:	00002f4a 	andeq	r2, r0, sl, asr #30
word tci_update_delay_ticks (Boolean force) {
     e78:	00002f4e 	andeq	r2, r0, lr, asr #30
	cli_tim;
     e7c:	00002f54 	andeq	r2, r0, r4, asr pc
     e80:	00002f56 	andeq	r2, r0, r6, asr pc
	if (setdel) {
     e84:	00002fa2 	andeq	r2, r0, r2, lsr #31
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e88:	00002fa4 	andeq	r2, r0, r4, lsr #31
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     e8c:	00002fa8 	andeq	r2, r0, r8, lsr #31
     e90:	00002faa 	andeq	r2, r0, sl, lsr #31
     e94:	00002fba 			; <UNDEFINED> instruction: 0x00002fba
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e98:	00002fbe 			; <UNDEFINED> instruction: 0x00002fbe
				AON_RTC_O_CH0CMP)) - gettav ());
     e9c:	00002fc2 	andeq	r2, r0, r2, asr #31
	return NO;
     ea0:	00002ff4 	strdeq	r2, [r0], -r4
			setdel = 0;
     ea4:	00002ff8 	strdeq	r2, [r0], -r8
	...
}
     eb0:	00002ffe 	strdeq	r2, [r0], -lr
		sti_tim;
     eb4:	00003000 	andeq	r3, r0, r0
		return YES;
     eb8:	00003002 	andeq	r3, r0, r2
     ebc:	00003030 	andeq	r3, r0, r0, lsr r0
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ec8:	000027c4 	andeq	r2, r0, r4, asr #15
	UARTDisable (UART0_BASE);
     ecc:	000027e4 	andeq	r2, r0, r4, ror #15
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ed0:	000027e4 	andeq	r2, r0, r4, ror #15
	UARTDisable (UART0_BASE);
     ed4:	00002974 	andeq	r2, r0, r4, ror r9
	UARTConfigSetExpClk (UART0_BASE,
     ed8:	00002974 	andeq	r2, r0, r4, ror r9
     edc:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
     ee0:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
     ee4:	000029e0 	andeq	r2, r0, r0, ror #19
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     ee8:	000029e0 	andeq	r2, r0, r0, ror #19
     eec:	00002a3c 	andeq	r2, r0, ip, lsr sl
     ef0:	00002a3c 	andeq	r2, r0, ip, lsr sl
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     ef4:	00002a74 	andeq	r2, r0, r4, ror sl
     ef8:	00002a74 	andeq	r2, r0, r4, ror sl
     efc:	00002bf4 	strdeq	r2, [r0], -r4
	urates [0] = rate;
     f00:	00002bf4 	strdeq	r2, [r0], -r4
}
     f04:	00002cc4 	andeq	r2, r0, r4, asr #25
     f08:	00002cc4 	andeq	r2, r0, r4, asr #25
     f0c:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
     f10:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
     f14:	00002f24 	andeq	r2, r0, r4, lsr #30
     f18:	00002f24 	andeq	r2, r0, r4, lsr #30
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	00003098 	muleq	r0, r8, r0
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f28:	00003098 	muleq	r0, r8, r0
     f2c:	000030bc 	strheq	r3, [r0], -ip
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f30:	000030bc 	strheq	r3, [r0], -ip
     f34:	000030e0 	andeq	r3, r0, r0, ror #1
	__pi_uart_setrate (urates [0], __pi_uart);
     f38:	000030e0 	andeq	r3, r0, r0, ror #1
     f3c:	000030e8 	andeq	r3, r0, r8, ror #1
     f40:	000030e8 	andeq	r3, r0, r8, ror #1
     f44:	000030ec 	andeq	r3, r0, ip, ror #1
     f48:	000030ec 	andeq	r3, r0, ip, ror #1
     f4c:	000030f0 	strdeq	r3, [r0], -r0
     f50:	000030f0 	strdeq	r3, [r0], -r0
	switch (operation) {
     f54:	00003138 	andeq	r3, r0, r8, lsr r1
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     f60:	00003146 	andeq	r3, r0, r6, asr #2
     f64:	00003146 	andeq	r3, r0, r6, asr #2
     f68:	0000314c 	andeq	r3, r0, ip, asr #2
				*buf++ = uart_a_read;
     f6c:	000031a8 	andeq	r3, r0, r8, lsr #3
	...
			while (len && uart_a_char_available) {
     f78:	00003138 	andeq	r3, r0, r8, lsr r1
     f7c:	000031a8 	andeq	r3, r0, r8, lsr #3
	...
}
     f88:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
			uart_a_disable_int;
     f8c:	000032a0 	andeq	r3, r0, r0, lsr #5
			if (uart_a_char_available) {
     f90:	000032a6 	andeq	r3, r0, r6, lsr #5
				*buf++ = uart_a_read;
     f94:	000032aa 	andeq	r3, r0, sl, lsr #5
			uart_a_disable_int;
     f98:	000032b0 			; <UNDEFINED> instruction: 0x000032b0
     f9c:	000032c4 	andeq	r3, r0, r4, asr #5
	...
				uart_a_enable_int;
     fa8:	000031a8 	andeq	r3, r0, r8, lsr #3
     fac:	000032c4 	andeq	r3, r0, r4, asr #5
	...
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fb8:	000032f0 	strdeq	r3, [r0], -r0
			return -2;
     fbc:	000032f2 	strdeq	r3, [r0], -r2
     fc0:	000033c0 	andeq	r3, r0, r0, asr #7
				uart_a_write (*buf);
     fc4:	000033e4 	andeq	r3, r0, r4, ror #7
     fc8:	000033e6 	andeq	r3, r0, r6, ror #7
			while (len && uart_a_room_in_tx) {
     fcc:	0000342e 	andeq	r3, r0, lr, lsr #8
     fd0:	00003458 	andeq	r3, r0, r8, asr r4
     fd4:	0000345a 	andeq	r3, r0, sl, asr r4
	...
			uart_a_disable_int;
     fe0:	000032f2 	strdeq	r3, [r0], -r2
			if (uart_a_room_in_tx) {
     fe4:	000032f4 	strdeq	r3, [r0], -r4
     fe8:	00003396 	muleq	r0, r6, r3
				uart_a_enable_int;
     fec:	000033c0 	andeq	r3, r0, r0, asr #7
     ff0:	000033e4 	andeq	r3, r0, r4, ror #7
				*buf++ = uart_a_read;
     ff4:	000033e6 	andeq	r3, r0, r6, ror #7
	...
				uart_a_write (*buf);
    1000:	00003332 	andeq	r3, r0, r2, lsr r3
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1004:	0000333a 	andeq	r3, r0, sl, lsr r3
    1008:	000034de 	ldrdeq	r3, [r0], -lr
			uart_a_enable_int;
    100c:	000034ea 	andeq	r3, r0, sl, ror #9
	...
			return 0;
    1018:	00003438 	andeq	r3, r0, r8, lsr r4
			if (len == UART_CNTRL_SETRATE) {
    101c:	00003458 	andeq	r3, r0, r8, asr r4
				if (__pi_uart_setrate (*((word*)buf),
    1020:	0000345a 	andeq	r3, r0, sl, asr r4
    1024:	0000349e 	muleq	r0, lr, r4
	...
			syserror (ENOOPER, "uai");
    1030:	000032c4 	andeq	r3, r0, r4, asr #5
			if (len == UART_CNTRL_GETRATE) {
    1034:	000032e4 	andeq	r3, r0, r4, ror #5
				return 1;
    1038:	000032e4 	andeq	r3, r0, r4, ror #5
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    103c:	00003514 	andeq	r3, r0, r4, lsl r5
			syserror (ENOOPER, "uai");
    1040:	00003514 	andeq	r3, r0, r4, lsl r5
    1044:	00003564 	andeq	r3, r0, r4, ror #10
	...
    1050:	00003578 	andeq	r3, r0, r8, ror r5
    1054:	0000357c 	andeq	r3, r0, ip, ror r5
    1058:	00003856 	andeq	r3, r0, r6, asr r8
    105c:	0000389e 	muleq	r0, lr, r8
	...
void UART0IntHandler () {
    1068:	0000357c 	andeq	r3, r0, ip, ror r5
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    106c:	00003582 	andeq	r3, r0, r2, lsl #11
    1070:	000035ba 			; <UNDEFINED> instruction: 0x000035ba
    1074:	00003626 	andeq	r3, r0, r6, lsr #12
    1078:	000038ba 			; <UNDEFINED> instruction: 0x000038ba
    107c:	000038da 	ldrdeq	r3, [r0], -sl
	...
		RISE_N_SHINE;
    1088:	000036de 	ldrdeq	r3, [r0], -lr
    108c:	00003758 	andeq	r3, r0, r8, asr r7
		i_trigger (devevent (UART_A, READ));
    1090:	000038e2 	andeq	r3, r0, r2, ror #17
    1094:	000038ea 	andeq	r3, r0, sl, ror #17
	...
    10a0:	00003770 	andeq	r3, r0, r0, ror r7
    10a4:	000037c6 	andeq	r3, r0, r6, asr #15
    10a8:	0000383c 	andeq	r3, r0, ip, lsr r8
    10ac:	00003856 	andeq	r3, r0, r6, asr r8
	...
    10b8:	000037cc 	andeq	r3, r0, ip, asr #15
    10bc:	0000383c 	andeq	r3, r0, ip, lsr r8
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10c0:	0000389e 	muleq	r0, lr, r8
    10c4:	000038a6 	andeq	r3, r0, r6, lsr #17
    10c8:	000038ea 	andeq	r3, r0, sl, ror #17
		i_trigger (devevent (UART_A, WRITE));
    10cc:	000038f4 	strdeq	r3, [r0], -r4
	...
		RISE_N_SHINE;
    10d8:	00003564 	andeq	r3, r0, r4, ror #10
    10dc:	000038f4 	strdeq	r3, [r0], -r4
	...
		i_trigger (devevent (UART_A, WRITE));
    10e8:	000038f4 	strdeq	r3, [r0], -r4
    10ec:	0000391c 	andeq	r3, r0, ip, lsl r9
    10f0:	00000001 	andeq	r0, r0, r1
    10f4:	00000001 	andeq	r0, r0, r1
	...
    1100:	0000391c 	andeq	r3, r0, ip, lsl r9
    1104:	0000394c 	andeq	r3, r0, ip, asr #18
	...
}
    1110:	0000394c 	andeq	r3, r0, ip, asr #18
    1114:	0000396c 	andeq	r3, r0, ip, ror #18
    1118:	0000396c 	andeq	r3, r0, ip, ror #18
    111c:	00003984 	andeq	r3, r0, r4, lsl #19
	...
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1128:	00003984 	andeq	r3, r0, r4, lsl #19
    112c:	0000398c 	andeq	r3, r0, ip, lsl #19
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1130:	00000001 	andeq	r0, r0, r1
    1134:	00000001 	andeq	r0, r0, r1
    1138:	0000398c 	andeq	r3, r0, ip, lsl #19
		bn = BUTTON_GPIO (__button_list [i]);
    113c:	00003994 	muleq	r0, r4, r9
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1140:	00000001 	andeq	r0, r0, r1
    1144:	00000001 	andeq	r0, r0, r1
    1148:	00000001 	andeq	r0, r0, r1
    114c:	00000001 	andeq	r0, r0, r1
	...
}
    1158:	000039f6 	strdeq	r3, [r0], -r6
    115c:	00003a06 	andeq	r3, r0, r6, lsl #20
    1160:	00003a0c 	andeq	r3, r0, ip, lsl #20
    1164:	00003a0e 	andeq	r3, r0, lr, lsl #20
	...
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1170:	00003994 	muleq	r0, r4, r9
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	000039f0 	strdeq	r3, [r0], -r0
	for (i = 0; i < N_PINLIST; i++) {
    1178:	000039f0 	strdeq	r3, [r0], -r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    117c:	00003a1c 	andeq	r3, r0, ip, lsl sl
    1180:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1184:	00000001 	andeq	r0, r0, r1
    1188:	00003a1c 	andeq	r3, r0, ip, lsl sl
    118c:	00003a34 	andeq	r3, r0, r4, lsr sl
	for (i = 0; i < N_PINLIST; i++) {
    1190:	00003a34 	andeq	r3, r0, r4, lsr sl
}
    1194:	00003a94 	muleq	r0, r4, sl
    1198:	00003a94 	muleq	r0, r4, sl
    119c:	00003ac8 	andeq	r3, r0, r8, asr #21
    11a0:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
    11a4:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
    11a8:	00000001 	andeq	r0, r0, r1
    11ac:	00000001 	andeq	r0, r0, r1
	buttons_disable ();
    11b0:	00000001 	andeq	r0, r0, r1
    11b4:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)&__button_list);
    11b8:	00000001 	andeq	r0, r0, r1
    11bc:	00000001 	andeq	r0, r0, r1
	...
    11c8:	00000001 	andeq	r0, r0, r1
    11cc:	00000001 	andeq	r0, r0, r1
    11d0:	00003ac8 	andeq	r3, r0, r8, asr #21
    11d4:	00003af0 	strdeq	r3, [r0], -r0
    11d8:	00003af0 	strdeq	r3, [r0], -r0
    11dc:	00003b3c 	andeq	r3, r0, ip, lsr fp
    11e0:	00003b3c 	andeq	r3, r0, ip, lsr fp
	RISE_N_SHINE;
    11e4:	00003c8c 	andeq	r3, r0, ip, lsl #25
    11e8:	00003c8c 	andeq	r3, r0, ip, lsl #25
    11ec:	00003da4 	andeq	r3, r0, r4, lsr #27
if (pin_sensor_int) {
    11f0:	00003da4 	andeq	r3, r0, r4, lsr #27
    11f4:	00003dc4 	andeq	r3, r0, r4, asr #27
	i_trigger ((aword)(&__input_pins));
    11f8:	00000001 	andeq	r0, r0, r1
    11fc:	00000001 	andeq	r0, r0, r1
    1200:	00003dc4 	andeq	r3, r0, r4, asr #27
    1204:	00003de0 	andeq	r3, r0, r0, ror #27
	...
    1210:	00003de0 	andeq	r3, r0, r0, ror #27
    1214:	00003eb4 			; <UNDEFINED> instruction: 0x00003eb4
    1218:	00003eb4 			; <UNDEFINED> instruction: 0x00003eb4
    121c:	00003f58 	andeq	r3, r0, r8, asr pc
	...
	RISE_N_SHINE;
    1228:	00003f66 	andeq	r3, r0, r6, ror #30
    122c:	00003f68 	andeq	r3, r0, r8, ror #30
    1230:	00003f6c 	andeq	r3, r0, ip, ror #30
}
    1234:	00003f70 	andeq	r3, r0, r0, ror pc
	...
    1240:	00004274 	andeq	r4, r0, r4, ror r2
    1244:	00004276 	andeq	r4, r0, r6, ror r2
void system_init () {
    1248:	00004278 	andeq	r4, r0, r8, ror r2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    124c:	0000427a 	andeq	r4, r0, sl, ror r2
	...
    1258:	00003f58 	andeq	r3, r0, r8, asr pc
    125c:	00003fd4 	ldrdeq	r3, [r0], -r4
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1260:	00003fd4 	ldrdeq	r3, [r0], -r4
    1264:	00004080 	andeq	r4, r0, r0, lsl #1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1268:	00004080 	andeq	r4, r0, r0, lsl #1
    126c:	000040dc 	ldrdeq	r4, [r0], -ip
    1270:	000040dc 	ldrdeq	r4, [r0], -ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1274:	000040f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1278:	00000001 	andeq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    127c:	00000001 	andeq	r0, r0, r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1280:	000040f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1284:	00004104 	andeq	r4, r0, r4, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1288:	00004104 	andeq	r4, r0, r4, lsl #2
		pin = (port_confs [i] >> 19) & 0x1f;
    128c:	00004118 	andeq	r4, r0, r8, lsl r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1290:	00004118 	andeq	r4, r0, r8, lsl r1
		pin = (port_confs [i] >> 19) & 0x1f;
    1294:	0000417c 	andeq	r4, r0, ip, ror r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1298:	0000417c 	andeq	r4, r0, ip, ror r1
    129c:	00004190 	muleq	r0, r0, r1
    12a0:	00004190 	muleq	r0, r0, r1
    12a4:	000041a4 	andeq	r4, r0, r4, lsr #3
		if (port_confs [i] & 0x80)
    12a8:	000041a4 	andeq	r4, r0, r4, lsr #3
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ac:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    12b0:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
		if (port_confs [i] & 0x40)
    12b4:	000041e0 	andeq	r4, r0, r0, ror #3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12b8:	000041e0 	andeq	r4, r0, r0, ror #3
    12bc:	000041f0 	strdeq	r4, [r0], -r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12c0:	000041f0 	strdeq	r4, [r0], -r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	0000421c 	andeq	r4, r0, ip, lsl r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12c8:	0000421c 	andeq	r4, r0, ip, lsl r2
	all_leds_blink;
    12cc:	00004230 	andeq	r4, r0, r0, lsr r2
    12d0:	00004230 	andeq	r4, r0, r0, lsr r2
    12d4:	00004244 	andeq	r4, r0, r4, asr #4
    12d8:	00004244 	andeq	r4, r0, r4, asr #4
    12dc:	00004354 	andeq	r4, r0, r4, asr r3
    12e0:	00004354 	andeq	r4, r0, r4, asr r3
    12e4:	000043b8 			; <UNDEFINED> instruction: 0x000043b8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12e8:	000043b8 			; <UNDEFINED> instruction: 0x000043b8
    12ec:	000043e0 	andeq	r4, r0, r0, ror #7
    12f0:	000043e0 	andeq	r4, r0, r0, ror #7
    12f4:	00004530 	andeq	r4, r0, r0, lsr r5
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1300:	00000001 	andeq	r0, r0, r1
    1304:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_RTC_COMB);
    1308:	00000001 	andeq	r0, r0, r1
    130c:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_GPIO_EDGE);
    1318:	000045a6 	andeq	r4, r0, r6, lsr #11
    131c:	000045a8 	andeq	r4, r0, r8, lsr #11
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1320:	000045aa 	andeq	r4, r0, sl, lsr #11
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1324:	000045ae 	andeq	r4, r0, lr, lsr #11
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1330:	00000001 	andeq	r0, r0, r1
    1334:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1338:	00004530 	andeq	r4, r0, r0, lsr r5
    133c:	00004750 	andeq	r4, r0, r0, asr r7
    1340:	00004750 	andeq	r4, r0, r0, asr r7
	urates [0] = UART_RATE / 100;
    1344:	000047b0 			; <UNDEFINED> instruction: 0x000047b0
    1348:	00000001 	andeq	r0, r0, r1
	reinit_uart ();
    134c:	00000001 	andeq	r0, r0, r1
	EXTRA_INITIALIZERS;
    1350:	000047b0 			; <UNDEFINED> instruction: 0x000047b0
    1354:	000047c8 	andeq	r4, r0, r8, asr #15
	...
    1360:	00004816 	andeq	r4, r0, r6, lsl r8
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1364:	0000481a 	andeq	r4, r0, sl, lsl r8
    1368:	00004820 	andeq	r4, r0, r0, lsr #16
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    136c:	00004822 	andeq	r4, r0, r2, lsr #16
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1378:	0000481a 	andeq	r4, r0, sl, lsl r8
    137c:	00004820 	andeq	r4, r0, r0, lsr #16
    1380:	00004822 	andeq	r4, r0, r2, lsr #16
	IntEnable (INT_UART0_COMB);
    1384:	0000482a 	andeq	r4, r0, sl, lsr #16
	...
	tci_run_auxiliary_timer ();
    1390:	00000001 	andeq	r0, r0, r1
		diag ("");
    1394:	00000001 	andeq	r0, r0, r1
    1398:	00000001 	andeq	r0, r0, r1
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    139c:	00000001 	andeq	r0, r0, r1
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13a0:	000047c8 	andeq	r4, r0, r8, asr #15
		diag ("Leftover RAM: %d bytes",
    13a4:	00004814 	andeq	r4, r0, r4, lsl r8
    13a8:	00000001 	andeq	r0, r0, r1
    13ac:	00000001 	andeq	r0, r0, r1
    13b0:	00004814 	andeq	r4, r0, r4, lsl r8
    13b4:	00004880 	andeq	r4, r0, r0, lsl #17
    13b8:	00004880 	andeq	r4, r0, r0, lsl #17
    13bc:	00004896 	muleq	r0, r6, r8
	...
    13c8:	00004898 	muleq	r0, r8, r8
    13cc:	000048c0 	andeq	r4, r0, r0, asr #17
    13d0:	000048c0 	andeq	r4, r0, r0, asr #17
    13d4:	000048c8 	andeq	r4, r0, r8, asr #17
    13d8:	00000001 	andeq	r0, r0, r1
    13dc:	00000001 	andeq	r0, r0, r1
    13e0:	00000001 	andeq	r0, r0, r1
    13e4:	00000001 	andeq	r0, r0, r1
    13e8:	00000001 	andeq	r0, r0, r1
    13ec:	00000001 	andeq	r0, r0, r1
    13f0:	00000001 	andeq	r0, r0, r1
    13f4:	00000001 	andeq	r0, r0, r1
	...
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1408:	00000004 	andeq	r0, r0, r4
    140c:	00000006 	andeq	r0, r0, r6
    1410:	0000000a 	andeq	r0, r0, sl
    1414:	00000026 	andeq	r0, r0, r6, lsr #32
    1418:	00000028 	andeq	r0, r0, r8, lsr #32
    141c:	00000038 	andeq	r0, r0, r8, lsr r0
}
    1420:	0000003e 	andeq	r0, r0, lr, lsr r0
__attribute__ ((noreturn)) void __pi_release () {
    1424:	00000040 	andeq	r0, r0, r0, asr #32
    1428:	00000042 	andeq	r0, r0, r2, asr #32
    142c:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000d66 	andeq	r0, r0, r6, ror #26
       4:	02760003 	rsbseq	r0, r6, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    return node->data_base.item_array[index];
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
};
      1c:	2f727375 	svccs	0x00727375
      20:	2f62696c 	svccs	0x0062696c
      24:	2f636367 	svccs	0x00636367
      28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      34:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      38:	2f312e32 	svccs	0x00312e32
      3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
			i = k;
      40:	00656475 	rsbeq	r6, r5, r5, ror r4
				j->Next = k;
      44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      54:	2f62696c 	svccs	0x0062696c
		release;
      58:	00737973 	rsbseq	r7, r3, r3, ror r9
      5c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffa8 <_estack+0xdfffafa8>
			nq++;
      60:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
      68:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      6c:	6f746b73 	svcvs	0x00746b73
      70:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      74:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      78:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      7c:	2f534f43 	svccs	0x00534f43
      80:	4f636950 	svcmi	0x00636950
      84:	43432f53 	movtmi	r2, #16211	; 0x3f53
      88:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      8c:	6f682f00 	svcvs	0x00682f00
	if (!button_still_pressed (__button_list [pbutton]))
      90:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      94:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      98:	442f6e65 	strtmi	r6, [pc], #-3685	; a0 <g_pfnVectors+0xa0>
	if (baction == NULL)
      9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
      a0:	4f2f706f 	svcmi	0x002f706f
	(*baction) (pbutton);
      a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
endthread
      a8:	502f5445 	eorpl	r5, pc, r5, asr #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	534f4349 	movtpl	r4, #62281	; 0xf349
      b0:	6369502f 	cmnvs	r9, #47	; 0x2f
endthread
      b4:	2f00534f 	svccs	0x0000534f
      b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      bc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
      c0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
      c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
fsm sender(struct ResponseMessage *message) {
      c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
      d4:	4349502f 	movtmi	r5, #36911	; 0x902f
      d8:	502f534f 	eorpl	r5, pc, pc, asr #6
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	534f6369 	movtpl	r6, #62313	; 0xf369
      e0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
      e4:	562f7362 	strtpl	r7, [pc], -r2, ror #6
      e8:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
      ec:	6f682f00 	svcvs	0x00682f00
		packet[1] = message->gid;
      f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 100 <_Min_Stack_Size>
      fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		DEBUG_PRINT("I am th message GID %d", message->gid);
     100:	4f2f706f 	svcmi	0x002f706f
     104:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		*p = message->tpe;p++;
     108:	502f5445 	eorpl	r5, pc, r5, asr #8
		*p = message->request_number;p++;
     10c:	534f4349 	movtpl	r4, #62281	; 0xf349
		*p = message->sender_id;p++;
     110:	6369502f 	cmnvs	r9, #47	; 0x2f
		*p = message->receiver_id;p++;
     114:	6b2f534f 	blvs	bd4e58 <__ccfg+0xbb4eb0>
		switch(message->tpe) {
     118:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     11c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     120:	2f656d6f 	svccs	0x00656d6f
		tcv_endp(packet);
     124:	70657473 	rsbvc	r7, r5, r3, ror r4
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2f6e6568 	svccs	0x006e6568
     12c:	6b736544 	blvs	1cd9644 <__ccfg+0x1cb969c>
}
     130:	2f706f74 	svccs	0x00706f74
		finish;
     134:	4f534c4f 	svcmi	0x00534c4f
     138:	2f54454e 	svccs	0x0054454e
     13c:	4f434950 	svcmi	0x00434950
				strncpy(p, message->record, sizeof(message->record));
     140:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				*p = message->padding;p++;
     144:	2f534f63 	svccs	0x00534f63
				strncpy(p, message->record, sizeof(message->record));
     148:	62694c56 	rsbvs	r4, r9, #22016	; 0x5600
     14c:	6c502f73 	mrrcvs	15, 7, r2, r0, cr3
     150:	754e6775 	strbvc	r6, [lr, #-1909]	; 0xfffff88b
				strncpy(p, message->record, sizeof(message->record));
     154:	2e006c6c 	cdpcs	12, 0, cr6, cr0, cr12, {3}
     158:	6f682f00 	svcvs	0x00682f00
				strncpy(p, message->record, sizeof(message->record));
     15c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
				break;
     160:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
				*p = message->record_index;p++;
     164:	442f6e65 	strtmi	r6, [pc], #-3685	; 16c <_Min_Stack_Size+0x6c>
				*p = message->padding;
     168:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				break;
     16c:	4f2f706f 	svcmi	0x002f706f
     170:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     174:	502f5445 	eorpl	r5, pc, r5, asr #8
     178:	534f4349 	movtpl	r4, #62281	; 0xf349
     17c:	6369502f 	cmnvs	r9, #47	; 0x2f
     180:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		node->nnodes[i] = 0;
     184:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     188:	43432f58 	movtmi	r2, #16216	; 0x3f58
     18c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     190:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
bool init_node(struct Node* node){
     198:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    node->id  = 0;                  // default id value 0
     19c:	00006269 	andeq	r6, r0, r9, ror #4
    node->index = 0;                // default entry count 0
     1a0:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
    node->data_base.item_count = 0; // default no items in array
     1a4:	00006363 	andeq	r6, r0, r3, ror #6
	reset_array(node);
     1a8:	74730000 	ldrbtvc	r0, [r3], #-0
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     1b0:	0100682e 	tsteq	r0, lr, lsr #16
};
     1b4:	745f0000 	ldrbvc	r0, [pc], #-0	; 1bc <generate_request_num>
     1b8:	73657079 	cmnvc	r5, #121	; 0x79
uint8_t generate_request_num(void){
     1bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    return (uint8_t) (rand() % 255);
     1c0:	65720000 	ldrbvs	r0, [r2, #-0]!
     1c4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     1c8:	00020068 	andeq	r0, r2, r8, rrx
}
     1cc:	636f6c00 	cmnvs	pc, #0, 24
            node->nnodes[i] = 0; // set to null byte
     1d0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     1d4:	73000002 	movwvc	r0, #2
     1d8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
};
     1e0:	73000001 	movwvc	r0, #1
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
     1e8:	00682e67 	rsbeq	r2, r8, r7, ror #28
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	61000001 	tstvs	r0, r1
     1f0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
     1f4:	00030068 	andeq	r0, r3, r8, rrx
        node->data_base.item_count -= 1;
     1f8:	63616d00 	cmnvs	r1, #0, 26
};
     1fc:	00682e68 	rsbeq	r2, r8, r8, ror #28
bool delete_all(struct Node *node){
     200:	70000003 	andvc	r0, r0, r3
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	5f736e69 	svcpl	0x00736e69
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00030068 	andeq	r0, r3, r8, rrx
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
            node->data_base.item_array[i].timestamp = 0;
     214:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    node->data_base.item_count = 0;
     21c:	0300682e 	movweq	r6, #2094	; 0x82e
}
     220:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
        return true;
     224:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00040068 	andeq	r0, r4, r8, rrx
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     234:	00682e73 	rsbeq	r2, r8, r3, ror lr
     238:	6b000005 	blvs	254 <assemble_response_message+0x2e>
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
	response_message->tpe = RESPONSE;
     240:	00682e6c 	rsbeq	r2, r8, ip, ror #28
	response_message->status = status;
     244:	70000006 	andvc	r0, r0, r6
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	5f67756c 	svcpl	0x0067756c
	response_message->gid = gid;
     24c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
	response_message->sender_id = sender_id;
     250:	0700682e 	streq	r6, [r0, -lr, lsr #16]
	response_message->status = status;
     254:	65680000 	strbvs	r0, [r8, #-0]!
	if (!padding){
     258:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
		response_message->padding = padding;
     25c:	7070682e 	rsbsvc	r6, r0, lr, lsr #16
	if (rec != NULL){
     260:	00000800 	andeq	r0, r0, r0, lsl #16
     264:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
		strncpy(response_message->record, rec, 20);
     268:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     26c:	00003e6e 	andeq	r3, r0, lr, ror #28
     270:	6f610000 	svcvs	0x00610000
};
     274:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
fsm receiver(struct Node* node_db) {
     278:	00682e63 	rsbeq	r2, r8, r3, ror #28
     27c:	00000009 	andeq	r0, r0, r9
     280:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
     284:	0000c802 	andeq	ip, r0, r2, lsl #16
     288:	01b50300 			; <UNDEFINED> instruction: 0x01b50300
     28c:	011e0501 	tsteq	lr, r1, lsl #10
     290:	05016e05 	streq	r6, [r1, #-3589]	; 0xfffff1fb
     294:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	1305206e 	movwne	r2, #20590	; 0x506e
     29c:	4a3a0306 	bmi	e80ebc <__ccfg+0xe60f14>
     2a0:	01060105 	tsteq	r6, r5, lsl #2
     2a4:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	2e460365 	cdpcs	3, 4, cr0, cr6, cr5, {3}
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
     2b0:	207a0365 	rsbscs	r0, sl, r5, ror #6
     2b4:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
		switch (response_message_5->tpe){
     2b8:	207a0337 	rsbscs	r0, sl, r7, lsr r3
     2bc:	21060205 	tstcs	r6, r5, lsl #4
     2c0:	15030514 	strne	r0, [r3, #-1300]	; 0xfffffaec
     2c4:	01060c05 	tsteq	r6, r5, lsl #24
     2c8:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
     2cc:	0a052116 	beq	14872c <__ccfg+0x128784>
     2d0:	220d051e 	andcs	r0, sp, #125829120	; 0x7800000
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	051e0a05 	ldreq	r0, [lr, #-2565]	; 0xfffff5fb
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	13210603 			; <UNDEFINED> instruction: 0x13210603
				if (discovery_request_message->gid == node_db->gid){
     2dc:	4d3d1413 	cfldrsmi	mvf1, [sp, #-76]!	; 0xffffffb4
     2e0:	01060f05 	tsteq	r6, r5, lsl #30
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     2e8:	05200615 	streq	r0, [r0, #-1557]!	; 0xfffff9eb
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	0f051303 	svceq	0x00051303
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	06050106 	streq	r0, [r5], -r6, lsl #2
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	06200520 	strteq	r0, [r0], -r0, lsr #10
					response_message_0->sender_id = node_db->id;
     2f8:	13030520 	movwne	r0, #13600	; 0x3520
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	01060f05 	tsteq	r6, r5, lsl #30
					DEBUG_PRINT("\r\nSending to sender");
     300:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
					call sender(response_message_0, done_case);
     304:	0520061b 	streq	r0, [r0, #-1563]!	; 0xfffff9e5
     308:	0f051303 	svceq	0x00051303
     30c:	06050106 	streq	r0, [r5], -r6, lsl #2
     310:	061d0520 	ldreq	r0, [sp], -r0, lsr #10
     314:	14030520 	strne	r0, [r3], #-1312	; 0xfffffae0
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	01061105 	tsteq	r6, r5, lsl #2
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	03060305 	movweq	r0, #25349	; 0x6305
     320:	4c40661f 	mcrrmi	6, 1, r6, r0, cr15
     324:	13060105 	movwne	r0, #24837	; 0x6105
     328:	052d0305 	streq	r0, [sp, #-773]!	; 0xfffffcfb
     32c:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
     330:	06110558 			; <UNDEFINED> instruction: 0x06110558
     334:	23050501 	movwcs	r0, #21761	; 0x5501
     338:	051d0805 	ldreq	r0, [sp, #-2053]	; 0xfffff7fb
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
					node_db->index+=1;
     340:	11051305 	tstne	r5, r5, lsl #6
     344:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		tcv_endp(incoming_packet);
     348:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
     34c:	20061b05 	andcs	r1, r6, r5, lsl #22
		proceed receiving;
     350:	03140505 	tsteq	r4, #20971520	; 0x1400000
		ser_out(response_1_create, "\r\nData Saved");
     354:	03063c6f 	movweq	r3, #27759	; 0x6c6f
     358:	2f065811 	svccs	0x00065811
		proceed receiving;
     35c:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
     360:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	20052008 	andcs	r2, r5, r8
     368:	05052006 	streq	r2, [r5, #-6]
		proceed receiving;
     36c:	06110513 			; <UNDEFINED> instruction: 0x06110513
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	20080501 	andcs	r0, r8, r1, lsl #10
     374:	21060505 	tstcs	r6, r5, lsl #10
     378:	01000d02 	tsteq	r0, r2, lsl #26
     37c:	002f0501 	eoreq	r0, pc, r1, lsl #10
     380:	00000205 	andeq	r0, r0, r5, lsl #4
		proceed receiving;
     384:	23030000 	movwcs	r0, #12288	; 0x3000
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	13050501 	movwne	r0, #21761	; 0x5501
     38c:	01060e05 	tsteq	r6, r5, lsl #28
     390:	21060505 	tstcs	r6, r5, lsl #10
     394:	13060105 	movwne	r0, #24837	; 0x6105
		proceed receiving;
     398:	01000202 	tsteq	r0, r2, lsl #4
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	00320501 	eorseq	r0, r2, r1, lsl #10
     3a0:	00000205 	andeq	r0, r0, r5, lsl #4
     3a4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
     3a8:	13050501 	movwne	r0, #21761	; 0x5501
		proceed receiving;
     3ac:	01060f05 	tsteq	r6, r5, lsl #30
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	21060505 	tstcs	r6, r5, lsl #10
     3b4:	13060105 	movwne	r0, #24837	; 0x6105
     3b8:	01000202 	tsteq	r0, r2, lsl #4
     3bc:	003e0501 	eorseq	r0, lr, r1, lsl #10
		proceed receiving;
     3c0:	00000205 	andeq	r0, r0, r5, lsl #4
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     3c8:	13050501 	movwne	r0, #21761	; 0x5501
		proceed receiving;
     3cc:	01061105 	tsteq	r6, r5, lsl #2
}
     3d0:	2f060505 	svccs	0x00060505
     3d4:	13060105 	movwne	r0, #24837	; 0x6105
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	01000202 	tsteq	r0, r2, lsl #4
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	00250501 	eoreq	r0, r5, r1, lsl #10
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	01840205 	orreq	r0, r4, r5, lsl #4
     3e4:	35030000 	strcc	r0, [r3, #-0]
     3e8:	13020501 	movwne	r0, #9473	; 0x2501
     3ec:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	13050110 	movwne	r0, #20752	; 0x5110
					break;
     3f4:	03051306 	movweq	r1, #21254	; 0x5306
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	13055806 	movwne	r5, #22534	; 0x5806
     3fc:	16050106 	strne	r0, [r5], -r6, lsl #2
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	10052d06 	andne	r2, r5, r6, lsl #26
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	06020501 	streq	r0, [r2], -r1, lsl #10
     408:	31010501 	tstcc	r1, r1, lsl #10
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	01000102 	tsteq	r0, r2, lsl #2
     410:	00210501 	eoreq	r0, r1, r1, lsl #10
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	01980205 	orrseq	r0, r8, r5, lsl #4
     418:	10030000 	andne	r0, r3, r0
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	13050501 	movwne	r0, #21761	; 0x5501
     420:	11062105 	tstne	r6, r5, lsl #2
     424:	05210e05 	streq	r0, [r1, #-3589]!	; 0xfffff1fb
     428:	052f0605 	streq	r0, [pc, #-1541]!	; fffffe2b <_estack+0xdfffae2b>
     42c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     430:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
					call sender(response_message_2, done_case);
     438:	132f0605 			; <UNDEFINED> instruction: 0x132f0605
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	01062005 	tsteq	r6, r5
     440:	30060205 	andcc	r0, r6, r5, lsl #4
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	15330505 	ldrne	r0, [r3, #-1285]!	; 0xfffffafb
     448:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	00050213 	andeq	r0, r5, r3, lsl r2
				DEBUG_PRINT("\r\nDelete rec");
     450:	23050101 	movwcs	r0, #20737	; 0x5101
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     458:	03000001 	movweq	r0, #1
     45c:	0505013c 	streq	r0, [r5, #-316]	; 0xfffffec4
     460:	06230513 			; <UNDEFINED> instruction: 0x06230513
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	21170511 	tstcs	r7, r1, lsl r5
     468:	052e1e05 	streq	r1, [lr, #-3589]!	; 0xfffff1fb
     46c:	02024b01 	andeq	r4, r2, #1024	; 0x400
     470:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	02050048 	andeq	r0, r5, #72	; 0x48
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	00000000 	andeq	r0, r0, r0
     47c:	0100c103 	tsteq	r0, r3, lsl #2
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	15150505 	ldrne	r0, [r5, #-1285]	; 0xfffffafb
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	01060805 	tsteq	r6, r5, lsl #16
     488:	17030105 	strne	r0, [r3, -r5, lsl #2]
     48c:	0004022e 	andeq	r0, r4, lr, lsr #4
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
						status = (uint8_t) SUCCESS;
     494:	ce020500 	cfsh32gt	mvfx0, mvfx2, #0
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	03000001 	movweq	r0, #1
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	050100e1 	streq	r0, [r1, #-225]	; 0xffffff1f
     4a0:	09051405 	stmdbeq	r5, {r0, r2, sl, ip}
     4a4:	010e0515 	tsteq	lr, r5, lsl r5
     4a8:	05011905 	streq	r1, [r1, #-2309]	; 0xfffff6fb
     4ac:	0513061d 	ldreq	r0, [r3, #-1565]	; 0xfffff9e3
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	0558060d 	ldrbeq	r0, [r8, #-1549]	; 0xfffff9f3
     4b4:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	052d0621 	streq	r0, [sp, #-1569]!	; 0xfffff9df
     4bc:	09050119 	stmdbeq	r5, {r0, r3, r4, r8}
     4c0:	0a050106 	beq	1408e0 <__ccfg+0x120938>
     4c4:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
     4c8:	06010513 			; <UNDEFINED> instruction: 0x06010513
     4cc:	00020217 	andeq	r0, r2, r7, lsl r2
     4d0:	34050101 	strcc	r0, [r5], #-257	; 0xfffffeff
     4d4:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
     4d8:	03000001 	movweq	r0, #1
     4dc:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
     4e0:	18051505 	stmdane	r5, {r0, r2, r8, sl, ip}
     4e4:	08050106 	stmdaeq	r5, {r1, r2, r8}
     4e8:	0609052e 	streq	r0, [r9], -lr, lsr #10
     4ec:	06390524 	ldrteq	r0, [r9], -r4, lsr #10
     4f0:	4c240501 	cfstr32mi	mvfx0, [r4], #-4
     4f4:	051e3905 	ldreq	r3, [lr, #-2309]	; 0xfffff6fb
     4f8:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
     4fc:	05010635 	streq	r0, [r1, #-1589]	; 0xfffff9cb
     500:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
     504:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
     508:	052f0606 	streq	r0, [pc, #-1542]!	; ffffff0a <_estack+0xdfffaf0a>
     50c:	06051505 	streq	r1, [r5], -r5, lsl #10
     510:	06010513 			; <UNDEFINED> instruction: 0x06010513
     514:	00020215 	andeq	r0, r2, r5, lsl r2
     518:	40050101 	andmi	r0, r5, r1, lsl #2
     51c:	00020500 	andeq	r0, r2, r0, lsl #10
     520:	03000000 	movweq	r0, #0
     524:	05010185 	streq	r0, [r1, #-389]	; 0xfffffe7b
     528:	40051505 	andmi	r1, r5, r5, lsl #10
     52c:	26050f06 	strcs	r0, [r5], -r6, lsl #30
     530:	2b400523 	blcs	10019c4 <__ccfg+0xfe1a1c>
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	05232605 	streq	r2, [r3, #-1541]!	; 0xfffff9fb
     538:	02029201 	andeq	r9, r2, #268435456	; 0x10000000
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				DEBUG_PRINT("\r\nretrieve rec");
     540:	02050022 	andeq	r0, r5, #34	; 0x22
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00000200 	andeq	r0, r0, r0, lsl #4
     548:	01018d03 	tsteq	r1, r3, lsl #26
     54c:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     550:	050f0622 	streq	r0, [pc, #-1570]	; ffffff36 <_estack+0xdfffaf36>
     554:	08052318 	stmdaeq	r5, {r3, r4, r8, r9, sp}
     558:	2311052e 	tstcs	r1, #192937984	; 0xb800000
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	052f3905 	streq	r3, [pc, #-2309]!	; fffffc5f <_estack+0xdfffac5f>
     560:	0520060d 	streq	r0, [r0, #-1549]!	; 0xfffff9f3
     564:	0511063a 	ldreq	r0, [r1, #-1594]	; 0xfffff9c6
    return node->data_base.item_array[index];
     568:	39052009 	stmdbcc	r5, {r0, r3, sp}
     56c:	060d0521 	streq	r0, [sp], -r1, lsr #10
     570:	06350521 	ldrteq	r0, [r5], -r1, lsr #10
     574:	06390501 	ldrteq	r0, [r9], -r1, lsl #10
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	0118052c 	tsteq	r8, ip, lsr #10
    return node->data_base.item_array[index];
     57c:	01060905 	tsteq	r6, r5, lsl #18
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	24060605 	strcs	r0, [r6], #-1541	; 0xfffff9fb
     584:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     588:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
     590:	0c051306 	stceq	3, cr1, [r5], {6}
     594:	01050106 	tsteq	r5, r6, lsl #2
     598:	030f0523 	movweq	r0, #62755	; 0xf523
     59c:	02022073 	andeq	r2, r2, #115	; 0x73
     5a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     5a4:	050001af 	streq	r0, [r0, #-431]	; 0xfffffe51
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	00022602 	andeq	r2, r2, r2, lsl #12
     5ac:	01a00300 	lsleq	r0, r0, #6
				DEBUG_PRINT("\r\nResponse");
     5b0:	13020501 	movwne	r0, #9473	; 0x2501
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	0601af05 	streq	sl, [r1], -r5, lsl #30
     5b8:	50052e11 	andpl	r2, r5, r1, lsl lr
     5bc:	01af0521 			; <UNDEFINED> instruction: 0x01af0521
     5c0:	7550051f 	ldrbvc	r0, [r0, #-1311]	; 0xfffffae1
     5c4:	05311805 	ldreq	r1, [r1, #-2053]!	; 0xfffff7fb
     5c8:	5005321b 	andpl	r3, r5, fp, lsl r2
				if(!response_flag){
     5cc:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
					response_flag=1;
     5d0:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
					trigger(&response_flag);
     5d4:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
				switch(response_message_5->status){
     5d8:	132f0602 			; <UNDEFINED> instruction: 0x132f0602
     5dc:	01062305 	tsteq	r6, r5, lsl #6
     5e0:	21060205 	tstcs	r6, r5, lsl #4
     5e4:	01061e05 	tsteq	r6, r5, lsl #28
     5e8:	21060205 	tstcs	r6, r5, lsl #4
						if (response_checker[0] == response_message_5->request_number){
     5ec:	01062005 	tsteq	r6, r5
     5f0:	21060205 	tstcs	r6, r5, lsl #4
     5f4:	01061b05 	tsteq	r6, r5, lsl #22
							switch(response_checker[1]){
     5f8:	21060205 	tstcs	r6, r5, lsl #4
     5fc:	01060505 	tsteq	r6, r5, lsl #10
     600:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
     604:	01061d05 	tsteq	r6, r5, lsl #26
									proceed response_1_create;
     608:	2f060305 	svccs	0x00060305
						proceed response_2;
     60c:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
									proceed response_1_delete;
     610:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
									proceed response_1_retrieve;
     614:	673d0603 	ldrvs	r0, [sp, -r3, lsl #12]!
						proceed response_2;
     618:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
						proceed response_3;
     61c:	02140601 	andseq	r0, r4, #1048576	; 0x100000
						proceed response_4;
     620:	01010003 	tsteq	r1, r3
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
     628:	00027802 	andeq	r7, r2, r2, lsl #16
				break;
     62c:	01f20300 	mvnseq	r0, r0, lsl #6
}
     630:	01200501 			; <UNDEFINED> instruction: 0x01200501
     634:	01061e05 	tsteq	r6, r5, lsl #28
     638:	052e5105 	streq	r5, [lr, #-261]!	; 0xfffffefb
     63c:	5105201e 	tstpl	r5, lr, lsl r0
     640:	065a0520 	ldrbeq	r0, [sl], -r0, lsr #10
     644:	9f02052e 	svcls	0x0002052e
fsm root {
     648:	03051314 	movweq	r1, #21268	; 0x5314
     64c:	06150516 			; <UNDEFINED> instruction: 0x06150516
     650:	58130501 	ldmdapl	r3, {r0, r8, sl}
     654:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
     658:	01064205 	tsteq	r6, r5, lsl #4
     65c:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
     660:	03052042 	movweq	r2, #20546	; 0x5042
     664:	1f420521 	svcne	0x00420521
     668:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
     66c:	03051f16 	movweq	r1, #24342	; 0x5f16
     670:	05342106 	ldreq	r2, [r4, #-262]!	; 0xfffffefa
     674:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
     678:	0e03061c 	mcreq	6, 0, r0, cr3, cr12, {0}
     67c:	140505c8 	strne	r0, [r5], #-1480	; 0xfffffa38
     680:	01065505 	tsteq	r6, r5, lsl #10
     684:	053e7205 	ldreq	r7, [lr, #-517]!	; 0xfffffdfb
     688:	200c0308 	andcs	r0, ip, r8, lsl #6
     68c:	72035505 	andvc	r5, r3, #20971520	; 0x1400000
     690:	0605052e 	streq	r0, [r5], -lr, lsr #10
     694:	010c0322 	tsteq	ip, r2, lsr #6
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	01060805 	tsteq	r6, r5, lsl #16
     69c:	2f060605 	svccs	0x00060605
     6a0:	0639053d 			; <UNDEFINED> instruction: 0x0639053d
		init_node(node_db);
     6a4:	27060501 	strcs	r0, [r6, -r1, lsl #10]
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	79031e05 	stmdbvc	r3, {r0, r2, r9, sl, fp, ip}
     6ac:	06060520 	streq	r0, [r6], -r0, lsr #10
		tcv_plug (0, &plug_null);
     6b0:	061e0521 	ldreq	r0, [lr], -r1, lsr #10
     6b4:	06060501 	streq	r0, [r6], -r1, lsl #10
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	0644052f 	strbeq	r0, [r4], -pc, lsr #10
     6bc:	20290501 	eorcs	r0, r9, r1, lsl #10
     6c0:	21060605 	tstcs	r6, r5, lsl #12
     6c4:	01062d05 	tsteq	r6, r5, lsl #26
     6c8:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
			diag("Cannot open tcv interface");
     6cc:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
     6d0:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
			halt();
     6d4:	06052026 	streq	r2, [r5], -r6, lsr #32
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	052f2306 	streq	r2, [pc, #-774]!	; 3da <receiver+0x162>
     6dc:	0f05010b 	svceq	0x0005010b
		runfsm receiver(node_db);
     6e0:	0e050106 	adfeqs	f0, f5, f6
     6e4:	06590574 			; <UNDEFINED> instruction: 0x06590574
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	031d0520 	tsteq	sp, #32, 10	; 0x8000000
     6ec:	05052e0d 	streq	r2, [r5, #-3597]	; 0xfffff1f3
     6f0:	066d0514 			; <UNDEFINED> instruction: 0x066d0514
     6f4:	06050501 	streq	r0, [r5], -r1, lsl #10
     6f8:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
     6fc:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
		ser_inf(get_choice, "%c", &CHOICE);
     700:	75056664 	strvc	r6, [r5, #-1636]	; 0xfffff99c
     704:	3c250520 	cfstr32cc	mvfx0, [r5], #-128	; 0xffffff80
     708:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
		switch(CHOICE) {
     70c:	0608053e 			; <UNDEFINED> instruction: 0x0608053e
     710:	06060501 	streq	r0, [r6], -r1, lsl #10
     714:	0614053d 			; <UNDEFINED> instruction: 0x0614053d
     718:	06040501 	streq	r0, [r4], -r1, lsl #10
     71c:	3c01a903 			; <UNDEFINED> instruction: 0x3c01a903
     720:	4b140305 	blmi	50133c <__ccfg+0x4e1394>
     724:	4b3e4b40 	blmi	f9342c <__ccfg+0xf73484>
     728:	0656053e 			; <UNDEFINED> instruction: 0x0656053e
     72c:	20030501 	andcs	r0, r3, r1, lsl #10
     730:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
     734:	67062003 	strvs	r2, [r6, -r3]
     738:	06560540 	ldrbeq	r0, [r6], -r0, asr #10
				proceed menu;
     73c:	20030501 	andcs	r0, r3, r1, lsl #10
     740:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	4b062003 	blmi	188758 <__ccfg+0x1687b0>
     748:	0657053e 			; <UNDEFINED> instruction: 0x0657053e
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	20030501 	andcs	r0, r3, r1, lsl #10
     750:	05205705 	streq	r5, [r0, #-1797]!	; 0xfffff8fb
     754:	4b062003 	blmi	188768 <__ccfg+0x1687c0>
		DEBUG_PRINT("setting node group ID");
     758:	0656053e 			; <UNDEFINED> instruction: 0x0656053e
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75c:	20030501 	andcs	r0, r3, r1, lsl #10
    node->gid = gid; 
     760:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
		proceed menu;
     764:	4b062003 	blmi	188778 <__ccfg+0x1687d0>
     768:	01053f40 	tsteq	r5, r0, asr #30
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76c:	0318053e 	tsteq	r8, #260046848	; 0xf800000
     770:	053c7ebd 	ldreq	r7, [ip, #-3773]!	; 0xfffff143
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     774:	55051305 	strpl	r1, [r5, #-773]	; 0xfffffcfb
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     77c:	66053d06 	strvs	r3, [r5], -r6, lsl #26
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     780:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     784:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
		if((node_db->id < 1) || (node_db->id > 25)){
     788:	010c0313 	tsteq	ip, r3, lsl r3
     78c:	01060805 	tsteq	r6, r5, lsl #16
     790:	054a3b05 	strbeq	r3, [sl, #-2821]	; 0xfffff4fb
			strncpy(reason, "Out of Range", 50);
     794:	064b0606 	strbeq	r0, [fp], -r6, lsl #12
     798:	06202203 	strteq	r2, [r0], -r3, lsl #4
			proceed invalid_node_id;
     79c:	205f032f 	subscs	r0, pc, pc, lsr #6
     7a0:	4b150505 	blmi	541bbc <__ccfg+0x521c14>
				strncpy(reason, "ID is already in use", 50);
     7a4:	3d140605 	ldccc	6, cr0, [r4, #-20]	; 0xffffffec
		for(int i = 0; i < node_db->index; i++){
     7a8:	d9030505 	stmdble	r3, {r0, r2, r8, sl}
     7ac:	0515017d 	ldreq	r0, [r5, #-381]	; 0xfffffe83
     7b0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		proceed menu;
     7b4:	a5030607 	strge	r0, [r3, #-1543]	; 0xfffff9f9
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7b8:	053d4a02 	ldreq	r4, [sp, #-2562]!	; 0xfffff5fe
     7bc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
     7c0:	05240607 	streq	r0, [r4, #-1543]!	; 0xfffff9f9
     7c4:	053d1306 	ldreq	r1, [sp, #-774]!	; 0xfffffcfa
		proceed get_new_node_id;
     7c8:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
     7cc:	3dbb0606 	ldccc	6, cr0, [fp, #24]!
		if (!clear_node_neighbour_array(node_db)){
     7d0:	05010b05 	streq	r0, [r1, #-2821]	; 0xfffff4fb
     7d4:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
			strncpy(reason, "Error Clearing Node Array", 50);
     7d8:	d3030609 	movwle	r0, #13833	; 0x3609
     7dc:	07052e7d 	smlsdxeq	r5, sp, lr, r2
     7e0:	0102a703 	tsteq	r2, r3, lsl #14
			proceed error;
     7e4:	0318053d 	tsteq	r8, #255852544	; 0xf400000
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7e8:	0505200b 	streq	r2, [r5, #-11]
     7ec:	06550513 			; <UNDEFINED> instruction: 0x06550513
		request_packet->gid = node_db->gid;
     7f0:	06050501 	streq	r0, [r5], -r1, lsl #10
     7f4:	0514063d 	ldreq	r0, [r4, #-1597]	; 0xfffff9c3
		request_packet->tpe = DISCOVERY_REQUEST;
     7f8:	05051e66 	streq	r1, [r5, #-3686]	; 0xfffff19a
		request_packet->request_number = generate_request_num();
     7fc:	83312206 	teqhi	r1, #1610612736	; 0x60000000
     800:	01060805 	tsteq	r6, r5, lsl #16
		call sender(request_packet, wait_discovery);
     804:	054a3405 	strbeq	r3, [sl, #-1029]	; 0xfffffbfb
     808:	304b0606 	subcc	r0, fp, r6, lsl #12
		request_packet->receiver_id=0;
     80c:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
		call sender(request_packet, wait_discovery);
     810:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     814:	3e4b0606 	cdpcc	6, 4, cr0, cr11, cr6, {0}
     818:	01060a05 	tsteq	r6, r5, lsl #20
			release;
     81c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
				proceed get_new_node_id;
     820:	13210607 			; <UNDEFINED> instruction: 0x13210607
				proceed clear_neighbour_array;
     824:	3b060e05 	blcc	184040 <__ccfg+0x164098>
				proceed create_proto_start;
     828:	25060705 	strcs	r0, [r6, #-1797]	; 0xfffff8fb
				proceed start_delete_proto;
     82c:	3d140605 	ldccc	6, cr0, [r4, #-20]	; 0xffffffec
				proceed retrieve_proto;
     830:	01061b05 	tsteq	r6, r5, lsl #22
				proceed display_db;
     834:	1d031c05 	stcne	12, cr1, [r3, #-20]	; 0xffffffec
				proceed del_local;
     838:	06070590 			; <UNDEFINED> instruction: 0x06070590
			if(node_db->id == node_db->nnodes[i]){
     83c:	134a5e03 	movtne	r5, #44547	; 0xae03
     840:	0c031a05 			; <UNDEFINED> instruction: 0x0c031a05
     844:	05013f02 	streq	r3, [r1, #-3842]	; 0xfffff0fe
				strncpy(reason, "ID is already in use", 50);
     848:	55051305 	strpl	r1, [r5, #-773]	; 0xfffffcfb
     84c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
				proceed invalid_node_id;
     850:	15063d06 	strne	r3, [r6, #-3334]	; 0xfffff2fa
     854:	051d6c05 	ldreq	r6, [sp, #-3077]	; 0xfffff3fb
		for(int i = 0; i < node_db->index; i++){
     858:	142f0605 	strtne	r0, [pc], #-1541	; 860 <root+0x218>
		if (discovery_wait_flag == 0){
     85c:	06080531 			; <UNDEFINED> instruction: 0x06080531
			discovery_wait_flag=1;
     860:	66340501 	ldrtvs	r0, [r4], -r1, lsl #10
     864:	68060605 	stmdavs	r6, {r0, r2, r9, sl}
			delay(3000, find_proto_start);
     868:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     86c:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
		if (discovery_wait_flag == 1){
     870:	06052e08 	streq	r2, [r5], -r8, lsl #28
			discovery_wait_flag=0;
     874:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
     878:	017ddd03 	cmneq	sp, r3, lsl #26
			delay(3000, display_neighbour_nodes);
     87c:	01062605 	tsteq	r6, r5, lsl #12
     880:	a3031905 	movwge	r1, #14597	; 0x3905
     884:	26059002 	strcs	r9, [r5], -r2
     888:	2e7ddd03 	cdpcs	13, 7, cr13, cr13, cr3, {0}
     88c:	a3031905 	movwge	r1, #14597	; 0x3905
     890:	06052e02 	streq	r2, [r5], -r2, lsl #28
     894:	07056706 	streq	r6, [r5, -r6, lsl #14]
     898:	1c051317 	stcne	3, cr1, [r5], {23}
     89c:	13050106 	movwne	r0, #20742	; 0x5106
     8a0:	0505de06 	streq	sp, [r5, #-3590]	; 0xfffff1fa
     8a4:	06430513 			; <UNDEFINED> instruction: 0x06430513
     8a8:	22050501 	andcs	r0, r5, #4194304	; 0x400000
     8ac:	051e4305 	ldreq	r4, [lr, #-773]	; 0xfffffcfb
     8b0:	05052018 	streq	r2, [r5, #-24]	; 0xffffffe8
     8b4:	05302206 	ldreq	r2, [r0, #-518]!	; 0xfffffdfa
     8b8:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
     8bc:	31052008 	tstcc	r5, r8
     8c0:	06060558 			; <UNDEFINED> instruction: 0x06060558
     8c4:	1405055a 	strne	r0, [r5], #-1370	; 0xfffffaa6
		if(node_db->index == 0){
     8c8:	01060805 	tsteq	r6, r5, lsl #16
     8cc:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     8d0:	052f0606 	streq	r0, [pc, #-1542]!	; 2d2 <receiver+0x5a>
			proceed menu;
     8d4:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8d8:	052f0606 	streq	r0, [pc, #-1542]!	; 2da <receiver+0x62>
     8dc:	1e053105 	adfnes	f3, f5, f5
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8e0:	07050106 	streq	r0, [r5, -r6, lsl #2]
			if (node_db->nnodes[i] == 0) break;
     8e4:	1b05a306 	blne	169504 <__ccfg+0x14955c>
     8e8:	34050106 	strcc	r0, [r5], #-262	; 0xfffffefa
     8ec:	200a0520 	andcs	r0, sl, r0, lsr #10
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8f0:	4b060805 	blmi	18290c <__ccfg+0x162964>
     8f4:	01061f05 	tsteq	r6, r5, lsl #30
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f8:	84060a05 	strhi	r0, [r6], #-2565	; 0xfffff5fb
		proceed menu;
     8fc:	03060705 	movweq	r0, #26373	; 0x6705
     900:	2f06200e 	svccs	0x0006200e
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     904:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
     908:	07053120 	streq	r3, [r5, -r0, lsr #2]
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
     90c:	05313136 	ldreq	r3, [r1, #-310]!	; 0xfffffeca
     910:	2e0b0305 	cdpcs	3, 0, cr0, cr11, cr5, {0}
     914:	0313054b 	tsteq	r3, #314572800	; 0x12c00000
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     918:	01052024 	tsteq	r5, r4, lsr #32
     91c:	0b022e06 	bleq	8c13c <__ccfg+0x6c194>
			strncpy(reason, "Error: improper ID", 50);
     920:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     924:	0205001a 	andeq	r0, r5, #26
			proceed error;
     928:	00000648 	andeq	r0, r0, r8, asr #12
     92c:	01049603 	tsteq	r4, r3, lsl #12
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     930:	05011c05 	streq	r1, [r1, #-3077]	; 0xfffff3fb
     934:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
		ser_in(get_record_to_create, user_provided_record, 20);
     938:	28020602 	stmdacs	r2, {r1, r9, sl}
     93c:	13131318 	tstne	r3, #24, 6	; 0x60000000
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     940:	051a0305 	ldreq	r0, [sl, #-773]	; 0xfffffcfb
     944:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
     948:	03054a0b 	movweq	r4, #23051	; 0x5a0b
		create_message->gid = node_db->gid;
     94c:	03303106 	teqeq	r0, #-2147483647	; 0x80000001
		create_message->tpe = CREATE_RECORD;
     950:	11034a0e 	tstne	r3, lr, lsl #20
		create_message->request_number = generate_request_num();
     954:	0609054a 	streq	r0, [r9], -sl, asr #10
     958:	66070501 	strvs	r0, [r7], -r1, lsl #10
		strncpy(create_message->record, user_provided_record, 20);
     95c:	05220605 	streq	r0, [r2, #-1541]!	; 0xfffff9fb
     960:	03051e07 	movweq	r1, #24071	; 0x5e07
		create_message->receiver_id = user_provided_receiver_id;
     964:	06052206 	streq	r2, [r5], -r6, lsl #4
		strncpy(create_message->record, user_provided_record, 20);
     968:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		create_message->receiver_id = user_provided_receiver_id;
     96c:	2f3d2106 	svccs	0x003d2106
		strncpy(create_message->record, user_provided_record, 20);
     970:	4c1a0305 	ldcmi	3, cr0, [sl], {5}
		response_checker[0] = create_message->request_number;
     974:	029e054d 	addseq	r0, lr, #322961408	; 0x13400000
     978:	03052006 	movweq	r2, #20486	; 0x5006
		call sender(create_message, wait);
     97c:	67a1062e 	strvs	r0, [r1, lr, lsr #12]!
     980:	23030505 	movwcs	r0, #13573	; 0x3505
     984:	60036608 	andvs	r6, r3, r8, lsl #12
     988:	2003062e 	andcs	r0, r3, lr, lsr #12
     98c:	052f0620 	streq	r0, [pc, #-1568]!	; 374 <receiver+0xfc>
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     990:	134e1603 	movtne	r1, #58883	; 0xe603
     994:	08053e5a 	stmdaeq	r5, {r1, r3, r4, r6, r9, sl, fp, ip, sp}
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
     998:	0f050106 	svceq	0x00050106
     99c:	207b9703 	rsbscs	r9, fp, r3, lsl #14
     9a0:	e9030805 	stmdb	r3, {r0, r2, fp}
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9a4:	05052e04 	streq	r2, [r5, #-3588]	; 0xfffff1fc
     9a8:	7b970306 	blvc	fe5c15c8 <_estack+0xde5bc5c8>
			strncpy(reason, "Error: improper node ID", 50);
     9ac:	06030520 	streq	r0, [r3], -r0, lsr #10
     9b0:	0104ef03 	tsteq	r4, r3, lsl #30
     9b4:	91030f05 	tstls	r3, r5, lsl #30
			proceed error;
     9b8:	0505207b 	streq	r2, [r5, #-123]	; 0xffffff85
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9bc:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
     9c0:	0104ec03 	tsteq	r4, r3, lsl #24
		ser_inf(get_index_for_delete, "%u", &user_provided_index);
     9c4:	31140305 	tstcc	r4, r5, lsl #6
     9c8:	0805134d 	stmdaeq	r5, {r0, r2, r3, r6, r8, r9, ip}
     9cc:	03051506 	movweq	r1, #21766	; 0x5506
		if (user_provided_index < 0 || user_provided_index > 40){
     9d0:	055b061d 	ldrbeq	r0, [fp, #-1565]	; 0xfffff9e3
     9d4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
			strncpy(reason, "Error: invalid index", 50);
     9d8:	82030605 	andhi	r0, r3, #5242880	; 0x500000
     9dc:	0e053c7b 	mcreq	12, 0, r3, cr5, cr11, {3}
			proceed error;
     9e0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     9e4:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	01058003 	tsteq	r5, r3
		delete_record->gid = node_db->gid;
     9ec:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
     9f0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
     9f4:	05052018 	streq	r2, [r5, #-24]	; 0xffffffe8
		delete_record->tpe = DELETE_RECORD;
     9f8:	06040520 	streq	r0, [r4], -r0, lsr #10
		delete_record->request_number = generate_request_num();
     9fc:	1a05593d 	bne	156ef8 <__ccfg+0x136f50>
		delete_record->sender_id = node_db->id;
     a00:	7eec0306 	cdpvc	3, 14, cr0, cr12, cr6, {0}
     a04:	0305053c 	movweq	r0, #21820	; 0x553c
		delete_record->receiver_id = user_provided_receiver_id;
     a08:	0520019a 	streq	r0, [r0, #-410]!	; 0xfffffe66
     a0c:	052c0612 	streq	r0, [ip, #-1554]!	; 0xfffff9ee
		delete_record->record_index = user_provided_index;
     a10:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
		response_checker[0] = delete_record->request_number;
     a14:	04053c03 	streq	r3, [r5], #-3075	; 0xfffff3fd
		response_checker[1] = delete_record->tpe;
     a18:	03053306 	movweq	r3, #21254	; 0x5306
     a1c:	56054114 			; <UNDEFINED> instruction: 0x56054114
		call sender(delete_record, wait);
     a20:	03050106 	movweq	r0, #20742	; 0x5106
     a24:	20560520 	subscs	r0, r6, r0, lsr #10
     a28:	06200305 	strteq	r0, [r0], -r5, lsl #6
     a2c:	3c0e0359 	stccc	3, cr0, [lr], {89}	; 0x59
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a30:	01060805 	tsteq	r6, r5, lsl #16
     a34:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
     a38:	59210604 	stmdbpl	r1!, {r2, r9, sl}
     a3c:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
     a40:	06370513 			; <UNDEFINED> instruction: 0x06370513
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     a44:	3f170501 	svccc	0x00170501
     a48:	051f2005 	ldreq	r2, [pc, #-5]	; a4b <root+0x403>
			strncpy(reason, "Error: improper node ID", 50);
     a4c:	03051e37 	movweq	r1, #24119	; 0x5e37
     a50:	20052206 	andcs	r2, r5, r6, lsl #4
			proceed error;
     a54:	17050106 	strne	r0, [r5, -r6, lsl #2]
     a58:	03051f2f 	movweq	r1, #24367	; 0x5f2f
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a5c:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
     a60:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
     a64:	03052e22 	movweq	r2, #24098	; 0x5e22
     a68:	26052106 	strcs	r2, [r5], -r6, lsl #2
     a6c:	0c050106 	stfeqs	f0, [r5], {6}
		if (user_provided_index < 0 || user_provided_index > 40){
     a70:	1d260523 	cfstr32ne	mvfx0, [r6, #-140]!	; 0xffffff74
			strncpy(reason, "Error: invalid index", 50);
     a74:	05230c05 	streq	r0, [r3, #-3077]!	; 0xfffff3fb
     a78:	03051d1d 	movweq	r1, #23837	; 0x5d1d
     a7c:	1e052106 	adfnes	f2, f5, f6
			proceed error;
     a80:	03050106 	movweq	r0, #20742	; 0x5106
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a84:	08052206 	stmdaeq	r5, {r1, r2, r9, sp}
     a88:	060c0501 	streq	r0, [ip], -r1, lsl #10
		retrieve_record->gid = node_db->gid;
     a8c:	580b0501 	stmdapl	fp, {r0, r8, sl}
     a90:	26060405 	strcs	r0, [r6], -r5, lsl #8
     a94:	89030505 	stmdbhi	r3, {r0, r2, r8, sl}
		retrieve_record->tpe = RETRIEVE_RECORD;
     a98:	32322e7f 	eorscc	r2, r2, #2032	; 0x7f0
		retrieve_record->request_number = generate_request_num();
     a9c:	32323233 	eorscc	r3, r2, #805306371	; 0x30000003
     aa0:	2e030405 	cdpcs	4, 0, cr0, cr3, cr5, {0}
		retrieve_record->sender_id = node_db->id;
     aa4:	0625052e 	strteq	r0, [r5], -lr, lsr #10
		response_checker[0] = retrieve_record->request_number;
     aa8:	20060501 	andcs	r0, r6, r1, lsl #10
		retrieve_record->receiver_id = user_provided_receiver_id;
     aac:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
     ab0:	26053d59 			; <UNDEFINED> instruction: 0x26053d59
		retrieve_record->record_index = user_provided_index;
     ab4:	0627050e 	strteq	r0, [r7], -lr, lsl #10
     ab8:	06700501 	ldrbteq	r0, [r0], -r1, lsl #10
		response_checker[0] = retrieve_record->request_number;
     abc:	052e2b03 	streq	r2, [lr, #-2819]!	; 0xfffff4fd
		call sender(&retrieve_record, wait);
     ac0:	1b051503 	blne	145ed4 <__ccfg+0x125f2c>
     ac4:	06050106 	streq	r0, [r5], -r6, lsl #2
     ac8:	0604052e 	streq	r0, [r4], -lr, lsr #10
     acc:	06170521 	ldreq	r0, [r7], -r1, lsr #10
     ad0:	21040501 	tstcs	r4, r1, lsl #10
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad4:	051f1705 	ldreq	r1, [pc, #-1797]	; 3d7 <receiver+0x15f>
     ad8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
		if(node_db->data_base.item_count != 0){
     adc:	06055b03 	streq	r5, [r5], -r3, lsl #22
     ae0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     ae4:	17052f06 	strne	r2, [r5, -r6, lsl #30]
		ser_out(loop_through_data, "\r\n");
     ae8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     aec:	1f170521 	svcne	0x00170521
		proceed menu;
     af0:	21060405 	tstcs	r6, r5, lsl #8
		delete_all(node_db);
     af4:	27020305 	strcs	r0, [r2, -r5, lsl #6]
     af8:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
		proceed menu;
     afc:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
     b00:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
		delay(3000, timeout);
     b04:	4b3e0305 	blmi	f81720 <__ccfg+0xf61778>
     b08:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
		when(&response_flag, menu);
     b0c:	0c050111 	stfeqs	f0, [r5], {17}
     b10:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		release;
     b14:	051f0622 	ldreq	r0, [pc, #-1570]	; 4fa <receiver+0x282>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b18:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     b1c:	04054a07 	streq	r4, [r5], #-2567	; 0xfffff5f9
     b20:	18052106 	stmdane	r5, {r1, r2, r8, sp}
     b24:	04052c06 	streq	r2, [r5], #-3078	; 0xfffff3fa
     b28:	06170522 	ldreq	r0, [r7], -r2, lsr #10
     b2c:	0111052c 	tsteq	r1, ip, lsr #10
     b30:	01060305 	tsteq	r6, r5, lsl #6
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b34:	0d033206 	sfmeq	f3, 4, [r3, #-24]	; 0xffffffe8
     b38:	05684d3c 	strbeq	r4, [r8, #-3388]!	; 0xfffff2c4
     b3c:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
     b40:	04052006 	streq	r2, [r5], #-6
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b44:	3d593d06 	ldclcc	13, cr3, [r9, #-24]	; 0xffffffe8
		ser_out(timeout, "\r\nFailed to reach the destination");
     b48:	4d150305 	ldcmi	3, cr0, [r5, #-20]	; 0xffffffec
     b4c:	3705135c 	smlsdcc	r5, ip, r3, r1
		proceed menu;
     b50:	20050106 	andcs	r0, r5, r6, lsl #2
     b54:	1f37053d 	svcne	0x0037053d
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b58:	21060305 	tstcs	r6, r5, lsl #6
     b5c:	01062005 	tsteq	r6, r5
		proceed menu;
     b60:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
     b64:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
}
     b68:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     b6c:	052f0603 	streq	r0, [pc, #-1539]!	; 571 <receiver+0x2f9>
     b70:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
     b74:	03052e22 	movweq	r2, #24098	; 0x5e22
     b78:	26052106 	strcs	r2, [r5], -r6, lsl #2
     b7c:	03050106 	movweq	r0, #20742	; 0x5106
     b80:	1e260522 	cfsh64ne	mvdx0, mvdx6, #18
     b84:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
     b88:	03051e1d 	movweq	r1, #24093	; 0x5e1d
     b8c:	1f052106 	svcne	0x00052106
     b90:	03050106 	movweq	r0, #20742	; 0x5106
     b94:	2d1f0521 	cfldr32cs	mvfx0, [pc, #-132]	; b18 <root+0x4d0>
     b98:	2f060305 	svccs	0x00060305
     b9c:	06270531 			; <UNDEFINED> instruction: 0x06270531
     ba0:	20170501 	andscs	r0, r7, r1, lsl #10
     ba4:	05230c05 	streq	r0, [r3, #-3077]!	; 0xfffff3fb
     ba8:	03051d27 	movweq	r1, #23847	; 0x5d27
     bac:	27052106 	strcs	r2, [r5, -r6, lsl #2]
     bb0:	0c050106 	stfeqs	f0, [r5], {6}
     bb4:	1e270522 	cfsh64ne	mvdx0, mvdx7, #18
     bb8:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     bbc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     bc0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     bc4:	6605580b 	strvs	r5, [r5], -fp, lsl #16
static void devinit_uart (int devnum) {
     bc8:	03053c06 	movweq	r3, #23558	; 0x5c06
	adddevfunc (ioreq_uart_a, devnum);
     bcc:	4d010c03 	stcmi	12, cr0, [r1, #-12]
     bd0:	06270568 	strteq	r0, [r7], -r8, ror #10
void udelay (volatile word n) {
     bd4:	20060501 	andcs	r0, r6, r1, lsl #10
     bd8:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
	while (n) {
     bdc:	03053d59 	movweq	r3, #23897	; 0x5d59
     be0:	05684d15 	strbeq	r4, [r8, #-3349]!	; 0xfffff2eb
}
     be4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	while (n--);
     be8:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
     bec:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
     bf0:	06370513 			; <UNDEFINED> instruction: 0x06370513
		n--;
     bf4:	3d1f0501 	cfldr32cc	mvfx0, [pc, #-4]	; bf8 <udelay+0x24>
     bf8:	051f3705 	ldreq	r3, [pc, #-1797]	; 4fb <receiver+0x283>
     bfc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
void mdelay (volatile word n) {
     c00:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
     c04:	03052e16 	movweq	r2, #24086	; 0x5e16
	while (n) {
     c08:	16052106 	strne	r2, [r5], -r6, lsl #2
     c0c:	03050106 	movweq	r0, #20742	; 0x5106
}
     c10:	23052f06 	movwcs	r2, #24326	; 0x5f06
		udelay (999);
     c14:	21050106 	tstcs	r5, r6, lsl #2
     c18:	0603052e 	streq	r0, [r3], -lr, lsr #10
		n--;
     c1c:	06250521 	strteq	r0, [r5], -r1, lsr #10
     c20:	030c0501 	movweq	r0, #50433	; 0xc501
     c24:	25052009 	strcs	r2, [r5, #-9]
     c28:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
void __pi_ondomain (lword d) {
     c2c:	0305201c 	movweq	r2, #20508	; 0x501c
     c30:	1e052106 	adfnes	f2, f5, f6
		if (__pi_systat.effpdm > 1)
     c34:	03050106 	movweq	r0, #20742	; 0x5106
     c38:	1f053d06 	svcne	0x00053d06
			__pi_systat.effpdm = 1;
     c3c:	03050106 	movweq	r0, #20742	; 0x5106
	PRCMPowerDomainOn (d);
     c40:	17054006 	strne	r4, [r5, -r6]
     c44:	26050106 	strcs	r0, [r5], -r6, lsl #2
     c48:	06030520 	streq	r0, [r3], -r0, lsr #10
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c4c:	06260521 	strteq	r0, [r6], -r1, lsr #10
     c50:	220c0501 	andcs	r0, ip, #4194304	; 0x400000
     c54:	051e2605 	ldreq	r2, [lr, #-1541]	; 0xfffff9fb
	__pi_systat.ondmns |= d;
     c58:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     c5c:	0c050108 	stfeqs	f0, [r5], {8}
}
     c60:	0b050106 	bleq	141080 <__ccfg+0x1210d8>
     c64:	06650558 			; <UNDEFINED> instruction: 0x06650558
void __pi_offdomain (lword d) {
     c68:	0303053c 	movweq	r0, #13628	; 0x353c
     c6c:	684d010c 	stmdavs	sp, {r2, r3, r8}^
	PRCMPowerDomainOff (d);
     c70:	01062505 	tsteq	r6, r5, lsl #10
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     c74:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     c78:	593d0604 	ldmdbpl	sp!, {r2, r9, sl}
     c7c:	1503053d 	strne	r0, [r3, #-1341]	; 0xfffffac3
	if (d & PRCM_DOMAIN_RFCORE) {
     c80:	0605684d 	streq	r6, [r5], -sp, asr #16
     c84:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     c88:	3d593d06 	ldclcc	13, cr3, [r9, #-24]	; 0xffffffe8
     c8c:	13160305 	tstne	r6, #335544320	; 0x14000000
			__pi_systat.effpdm = __pi_systat.reqpdm;
     c90:	01063905 	tsteq	r6, r5, lsl #18
     c94:	053e1805 	ldreq	r1, [lr, #-2053]!	; 0xfffff7fb
	__pi_systat.ondmns &= ~d;
     c98:	13051f21 	movwne	r1, #24353	; 0x5f21
     c9c:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
}
     ca0:	06210521 	strteq	r0, [r1], -r1, lsr #10
     ca4:	2e180501 	cfmul32cs	mvfx0, mvfx8, mvfx1
void __pi_syserror (word ec, const char *m) {
     ca8:	21060305 	tstcs	r6, r5, lsl #6
	diag ("SYSERR: %x, %s", ec, m);
     cac:	01061805 	tsteq	r6, r5, lsl #16
     cb0:	2f060305 	svccs	0x00060305
     cb4:	01061205 	tsteq	r6, r5, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cb8:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
     cbc:	03052e23 	movweq	r2, #24099	; 0x5e23
     cc0:	27052106 	strcs	r2, [r5, -r6, lsl #2]
		all_leds_blink;
     cc4:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
     cc8:	20270520 	eorcs	r0, r7, r0, lsr #10
     ccc:	05262805 	streq	r2, [r6, #-2053]!	; 0xfffff7fb
     cd0:	207a031e 	rsbscs	r0, sl, lr, lsl r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     cd4:	21060305 	tstcs	r6, r5, lsl #6
     cd8:	01062005 	tsteq	r6, r5
     cdc:	05280c05 	streq	r0, [r8, #-3077]!	; 0xfffff3fb
     ce0:	20780320 	rsbscs	r0, r8, r0, lsr #6
     ce4:	2f060305 	svccs	0x00060305
     ce8:	01062105 	tsteq	r6, r5, lsl #2
	while (1) {
     cec:	40060305 	andmi	r0, r6, r5, lsl #6
     cf0:	01061705 	tsteq	r6, r5, lsl #14
     cf4:	05202805 	streq	r2, [r0, #-2053]!	; 0xfffff7fb
     cf8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
void tci_run_delay_timer () {
     cfc:	05010628 	streq	r0, [r1, #-1576]	; 0xfffff9d8
	setdel = __pi_mintk - __pi_old;
     d00:	2805220c 	stmdacs	r5, {r2, r3, r9, sp}
     d04:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     d08:	01080522 	tsteq	r8, r2, lsr #10
     d0c:	01060c05 	tsteq	r6, r5, lsl #24
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d10:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
     d14:	4d3f0603 	ldcmi	6, cr0, [pc, #-12]!	; d10 <tci_run_delay_timer+0x14>
     d18:	01061805 	tsteq	r6, r5, lsl #16
     d1c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d20:	4b410603 	blmi	1042534 <__ccfg+0x102258c>
	sti_tim;
     d24:	593f4b3f 	ldmdbpl	pc!, {r0, r1, r2, r3, r4, r5, r8, r9, fp, lr}	; <UNPREDICTABLE>
}
     d28:	0305054b 	movweq	r0, #21835	; 0x554b
     d2c:	b5052073 	strlt	r2, [r5, #-115]	; 0xffffff8d
     d30:	053c0601 	ldreq	r0, [ip, #-1537]!	; 0xfffff9ff
     d34:	37052e05 	strcc	r2, [r5, -r5, lsl #28]
     d38:	38058f06 	stmdacc	r5, {r1, r2, r8, r9, sl, fp, pc}
	cli_aux;
     d3c:	13050106 	movwne	r0, #20742	; 0x5106
     d40:	1f052006 	svcne	0x00052006
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	2a050106 	bcs	141164 <__ccfg+0x1211bc>
     d48:	2e040520 	cfsh32cs	mvfx0, mvfx4, #16
     d4c:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
     d50:	03052105 	movweq	r2, #20741	; 0x5105
	sti_aux;
     d54:	3c100306 	ldccc	3, cr0, [r0], {6}
}
     d58:	0559404b 	ldrbeq	r4, [r9, #-75]	; 0xffffffb5
     d5c:	13053d01 	movwne	r3, #23809	; 0x5d01
     d60:	0601052e 	streq	r0, [r1], -lr, lsr #10
void AONRTCIntHandler () {
     d64:	002d022e 	eoreq	r0, sp, lr, lsr #4
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d68:	15620101 	strbne	r0, [r2, #-257]!	; 0xfffffeff
     d6c:	00030000 	andeq	r0, r3, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     d70:	000002a1 	andeq	r0, r0, r1, lsr #5
		if (__pi_utims [0] == 0)
     d74:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d78:	0101000d 	tsteq	r1, sp
		if (*(__pi_utims [0])) {
     d7c:	00000101 	andeq	r0, r0, r1, lsl #2
     d80:	00000100 	andeq	r0, r0, r0, lsl #2
			(*(__pi_utims [0]))--;
     d84:	6f682f01 	svcvs	0x00682f01
		if (__pi_utims [1] == 0)
     d88:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		if (*(__pi_utims [1])) {
     d8c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
			aux_timer_inactive = 0;
     d90:	442f6e65 	strtmi	r6, [pc], #-3685	; d98 <AONRTCIntHandler+0x34>
			(*(__pi_utims [1]))--;
     d94:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (__pi_utims [2] == 0)
     d98:	4f2f706f 	svcmi	0x002f706f
		if (*(__pi_utims [2])) {
     d9c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			(*(__pi_utims [2]))--;
     da0:	502f5445 	eorpl	r5, pc, r5, asr #8
		if (__pi_utims [3] != 0) {
     da4:	534f4349 	movtpl	r4, #62281	; 0xf349
			if (*(__pi_utims [3])) {
     da8:	6369502f 	cmnvs	r9, #47	; 0x2f
				aux_timer_inactive = 0;
     dac:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
				(*(__pi_utims [3]))--;
     db0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	if (__pi_systat.ledsts) {
     db4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
     db8:	2f656d6f 	svccs	0x00656d6f
		if (__pi_systat.ledblc++ == 0) {
     dbc:	70657473 	rsbvc	r7, r5, r3, ror r4
     dc0:	2f6e6568 	svccs	0x006e6568
			if (__pi_systat.ledblk) {
     dc4:	6b736544 	blvs	1cda2dc <__ccfg+0x1cba334>
     dc8:	2f706f74 	svccs	0x00706f74
     dcc:	4f534c4f 	svcmi	0x00534c4f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd0:	2f54454e 	svccs	0x0054454e
     dd4:	4f434950 	svcmi	0x00434950
				if (__pi_systat.ledsts & 0x2)
     dd8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     ddc:	2f534f63 	svccs	0x00534f63
     de0:	33314343 	teqcc	r1, #201326593	; 0xc000001
				if (__pi_systat.ledsts & 0x4)
     de4:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
				__pi_systat.ledblk = 0;
     de8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     dec:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
			if (__pi_systat.fstblk)
     df0:	72642f45 	rsbvc	r2, r4, #276	; 0x114
     df4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
				__pi_systat.ledblc = 200;
     df8:	0062696c 	rsbeq	r6, r2, ip, ror #18
	if (events & AON_RTC_EVFLAGS_CH0) {
     dfc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d48 <tci_run_auxiliary_timer+0xc>
		cli_tim;
     e00:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
		__pi_new += setdel;
     e04:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
     e08:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		setdel = 0;
     e0c:	6f746b73 	svcvs	0x00746b73
		RISE_N_SHINE;
     e10:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		__pi_new += setdel;
     e14:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		RISE_N_SHINE;
     e18:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     e1c:	2f534f43 	svccs	0x00534f43
		aux_timer_inactive = 1;
     e20:	4f636950 	svcmi	0x00636950
     e24:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
				if (__pi_systat.ledsts & 0x1)
     e28:	2f736269 	svccs	0x00736269
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e2c:	2f004f49 	svccs	0x00004f49
     e30:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
				if (__pi_systat.ledsts & 0x2)
     e34:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     e38:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     e3c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				if (__pi_systat.ledsts & 0x8)
     e40:	706f746b 	rsbvc	r7, pc, fp, ror #8
				__pi_systat.ledblk = 1;
     e44:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     e48:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		if (aux_timer_inactive) {
     e4c:	4349502f 	movtmi	r5, #36911	; 0x902f
			cli_aux;
     e50:	502f534f 	eorpl	r5, pc, pc, asr #6
     e54:	534f6369 	movtpl	r6, #62313	; 0xf369
     e58:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
     e5c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
     e60:	6f736e65 	svcvs	0x00736e65
     e64:	2f007372 	svccs	0x00007372
     e68:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     e6c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     e70:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     e74:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
word tci_update_delay_ticks (Boolean force) {
     e78:	706f746b 	rsbvc	r7, pc, fp, ror #8
	cli_tim;
     e7c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     e80:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (setdel) {
     e84:	4349502f 	movtmi	r5, #36911	; 0x902f
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e88:	502f534f 	eorpl	r5, pc, pc, asr #6
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     e8c:	534f6369 	movtpl	r6, #62313	; 0xf369
     e90:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
     e94:	006c656e 	rsbeq	r6, ip, lr, ror #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e98:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
				AON_RTC_O_CH0CMP)) - gettav ());
     e9c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
	return NO;
     ea0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
			setdel = 0;
     ea4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ea8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     eac:	61652d65 	cmnvs	r5, r5, ror #26
}
     eb0:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
		sti_tim;
     eb4:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
		return YES;
     eb8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     ebc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
     ec0:	6f682f00 	svcvs	0x00682f00
     ec4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ec8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	UARTDisable (UART0_BASE);
     ecc:	442f6e65 	strtmi	r6, [pc], #-3685	; ed4 <__pi_uart_setrate+0xc>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ed0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	UARTDisable (UART0_BASE);
     ed4:	4f2f706f 	svcmi	0x002f706f
	UARTConfigSetExpClk (UART0_BASE,
     ed8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     edc:	502f5445 	eorpl	r5, pc, r5, asr #8
     ee0:	534f4349 	movtpl	r4, #62281	; 0xf349
     ee4:	6369502f 	cmnvs	r9, #47	; 0x2f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     ee8:	0000534f 	andeq	r5, r0, pc, asr #6
     eec:	6e69616d 	powvsez	f6, f1, #5.0
     ef0:	0100632e 	tsteq	r0, lr, lsr #6
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     ef4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     ef8:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
     efc:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
	urates [0] = rate;
     f00:	00000200 	andeq	r0, r0, r0, lsl #4
}
     f04:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     f08:	63675f73 	cmnvs	r7, #460	; 0x1cc
     f0c:	00682e63 	rsbeq	r2, r8, r3, ror #28
     f10:	67000001 	strvs	r0, [r0, -r1]
     f14:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     f18:	00020068 	andeq	r0, r2, r8, rrx
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	71726900 	cmnvc	r2, r0, lsl #18
     f20:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     f24:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f28:	2e736465 	cdpcs	4, 7, cr6, cr3, cr5, {3}
     f2c:	00030068 	andeq	r0, r3, r8, rrx
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f30:	72617500 	rsbvc	r7, r1, #0, 10
     f34:	00682e74 	rsbeq	r2, r8, r4, ror lr
	__pi_uart_setrate (urates [0], __pi_uart);
     f38:	69000002 	stmdbvs	r0, {r1}
     f3c:	625f7172 	subsvs	r7, pc, #-2147483620	; 0x8000001c
     f40:	6f747475 	svcvs	0x00747475
     f44:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
     f48:	00000300 	andeq	r0, r0, r0, lsl #6
     f4c:	5f717269 	svcpl	0x00717269
     f50:	5f6e6970 	svcpl	0x006e6970
	switch (operation) {
     f54:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
static int ioreq_uart_a (int operation, char *buf, int len) {
     f58:	682e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     f5c:	00000400 	andeq	r0, r0, r0, lsl #8
     f60:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
     f64:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f68:	6f610000 	svcvs	0x00610000
				*buf++ = uart_a_read;
     f6c:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
     f70:	00682e63 	rsbeq	r2, r8, r3, ror #28
			while (len && uart_a_char_available) {
     f74:	70000002 	andvc	r0, r0, r2
     f78:	635f7277 	cmpvs	pc, #1879048199	; 0x70000007
     f7c:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
			if (len != operation) {
     f80:	00020068 	andeq	r0, r2, r8, rrx
}
     f84:	6e6f6100 	powvse	f6, f7, f0
     f88:	636f695f 	cmnvs	pc, #1556480	; 0x17c000
			uart_a_disable_int;
     f8c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
			if (uart_a_char_available) {
     f90:	63730000 	cmnvs	r3, #0
				*buf++ = uart_a_read;
     f94:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
			uart_a_disable_int;
     f98:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
     f9c:	00050068 	andeq	r0, r5, r8, rrx
			if (uart_a_char_available) {
     fa0:	6e6f6100 	powvse	f6, f7, f0
     fa4:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
				uart_a_enable_int;
     fa8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     fac:	6f610000 	svcvs	0x00610000
				goto Redo_rx;
     fb0:	61625f6e 	cmnvs	r2, lr, ror #30
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fb4:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
     fb8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
			return -2;
     fbc:	74730000 	ldrbtvc	r0, [r3], #-0
     fc0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
				uart_a_write (*buf);
     fc4:	0600682e 	streq	r6, [r0], -lr, lsr #16
     fc8:	72610000 	rsbvc	r0, r1, #0
			while (len && uart_a_room_in_tx) {
     fcc:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     fd0:	00000100 	andeq	r0, r0, r0, lsl #2
     fd4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
			if (len != operation) {
     fd8:	0100682e 	tsteq	r0, lr, lsr #16
			uart_a_disable_int;
     fdc:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
     fe0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
			if (uart_a_room_in_tx) {
     fe4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     fe8:	00000100 	andeq	r0, r0, r0, lsl #2
				uart_a_enable_int;
     fec:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     ff0:	5f736e6f 	svcpl	0x00736e6f
				*buf++ = uart_a_read;
     ff4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
			if (uart_a_room_in_tx) {
     ff8:	00010068 	andeq	r0, r1, r8, rrx
				uart_a_write (*buf);
     ffc:	73797300 	cmnvc	r9, #0, 6
    1000:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1004:	00000700 	andeq	r0, r0, r0, lsl #14
    1008:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
			uart_a_enable_int;
    100c:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    1010:	00000500 	andeq	r0, r0, r0, lsl #10
    1014:	00270500 	eoreq	r0, r7, r0, lsl #10
			return 0;
    1018:	0bc80205 	bleq	ff201834 <_estack+0xdf1fc834>
			if (len == UART_CNTRL_SETRATE) {
    101c:	fc030000 	stc2	0, cr0, [r3], {-0}
				if (__pi_uart_setrate (*((word*)buf),
    1020:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1024:	06270514 			; <UNDEFINED> instruction: 0x06270514
    1028:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
				syserror (EREQPAR, "uar");
    102c:	01000502 	tsteq	r0, r2, lsl #10
			syserror (ENOOPER, "uai");
    1030:	001f0501 	andseq	r0, pc, r1, lsl #10
			if (len == UART_CNTRL_GETRATE) {
    1034:	0bd40205 	bleq	ff501850 <_estack+0xdf4fc850>
				return 1;
    1038:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    103c:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
			syserror (ENOOPER, "uai");
    1040:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    1044:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1048:	01053c08 	tsteq	r5, r8, lsl #24
    104c:	06030524 	streq	r0, [r3], -r4, lsr #10
    1050:	1b02052b 	blne	82504 <__ccfg+0x6255c>
    1054:	05010d05 	streq	r0, [r1, #-3333]	; 0xfffff2fb
    1058:	0a050108 	beq	141480 <__ccfg+0x1214d8>
    105c:	08050106 	stmdaeq	r5, {r1, r2, r8}
    1060:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1064:	06040534 			; <UNDEFINED> instruction: 0x06040534
void UART0IntHandler () {
    1068:	00070201 	andeq	r0, r7, r1, lsl #4
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    106c:	1f050101 	svcne	0x00050101
    1070:	00020500 	andeq	r0, r2, r0, lsl #10
    1074:	0300000c 	movweq	r0, #12
    1078:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
    107c:	0108053d 	tsteq	r8, sp, lsr r5
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    1080:	01060905 	tsteq	r6, r5, lsl #18
    1084:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
		RISE_N_SHINE;
    1088:	03052401 	movweq	r2, #21505	; 0x5401
    108c:	054b3906 	strbeq	r3, [fp, #-2310]	; 0xfffff6fa
		i_trigger (devevent (UART_A, READ));
    1090:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
    1094:	01010007 	tsteq	r1, r7
    1098:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    109c:	000c2c02 	andeq	r2, ip, r2, lsl #24
    10a0:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
    10a4:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    10a8:	050e061e 	streq	r0, [lr, #-1566]	; 0xfffff9e2
    10ac:	1e052405 	cdpne	4, 0, cr2, cr5, cr5, {0}
    10b0:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    10b4:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    10b8:	01061205 	tsteq	r6, r5, lsl #4
    10bc:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10c0:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    10c4:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    10c8:	593f0602 	ldmdbpl	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
		i_trigger (devevent (UART_A, WRITE));
    10cc:	05013b05 	streq	r3, [r1, #-2821]	; 0xfffff4fb
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    10d0:	09050108 	stmdbeq	r5, {r3, r8}
    10d4:	08050106 	stmdaeq	r5, {r1, r2, r8}
		RISE_N_SHINE;
    10d8:	0602054a 	streq	r0, [r2], -sl, asr #10
    10dc:	06150530 			; <UNDEFINED> instruction: 0x06150530
    10e0:	4b010501 	blmi	424ec <__ccfg+0x22544>
		i_trigger (devevent (UART_A, WRITE));
    10e4:	01000502 	tsteq	r0, r2, lsl #10
    10e8:	001f0501 	andseq	r0, pc, r1, lsl #10
    10ec:	0c680205 	sfmeq	f0, 2, [r8], #-20	; 0xffffffec
    10f0:	3a030000 	bcc	c10f8 <__ccfg+0xa1150>
    10f4:	17020501 	strne	r0, [r2, -r1, lsl #10]
    10f8:	0d061f05 	stceq	15, cr1, [r6, #-20]	; 0xffffffec
    10fc:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
    1100:	02051b1f 	andeq	r1, r5, #31744	; 0x7c00
    1104:	053d0625 	ldreq	r0, [sp, #-1573]!	; 0xfffff9db
    1108:	0805013c 	stmdaeq	r5, {r2, r3, r4, r5, r8}
    110c:	06090501 	streq	r0, [r9], -r1, lsl #10
}
    1110:	4a080501 	bmi	20251c <__ccfg+0x1e2574>
    1114:	30060205 	andcc	r0, r6, r5, lsl #4
    1118:	01060505 	tsteq	r6, r5, lsl #10
    111c:	4b060305 	blmi	181d38 <__ccfg+0x161d90>
    1120:	01061205 	tsteq	r6, r5, lsl #4
void __buttons_setirq (int val) {
    1124:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1128:	04052006 	streq	r2, [r5], #-6
    112c:	24052106 	strcs	r2, [r5], #-262	; 0xfffffefa
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1130:	17050106 	strne	r0, [r5, -r6, lsl #2]
    1134:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    1138:	06150523 	ldreq	r0, [r5], -r3, lsr #10
		bn = BUTTON_GPIO (__button_list [i]);
    113c:	4b010501 	blmi	42548 <__ccfg+0x225a0>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1140:	01000502 	tsteq	r0, r2, lsl #10
    1144:	00130501 	andseq	r0, r3, r1, lsl #10
    1148:	00000205 	andeq	r0, r0, r5, lsl #4
    114c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    1150:	02050100 	andeq	r0, r5, #0, 2
    1154:	06130514 			; <UNDEFINED> instruction: 0x06130514
}
    1158:	2202051e 	andcs	r0, r2, #125829120	; 0x7800000
    115c:	05363306 	ldreq	r3, [r6, #-774]!	; 0xfffffcfa
    1160:	02041303 	andeq	r1, r4, #201326592	; 0xc000000
    1164:	f0030405 			; <UNDEFINED> instruction: 0xf0030405
void __pinlist_setirq (int val) {
    1168:	05300101 	ldreq	r0, [r0, #-257]!	; 0xfffffeff
	for (i = 0; i < N_PINLIST; i++) {
    116c:	0501065c 	streq	r0, [r1, #-1628]	; 0xfffff9a4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1170:	143e0604 	ldrtne	r0, [lr], #-1540	; 0xfffff9fc
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	02100a05 	andseq	r0, r0, #20480	; 0x5000
	for (i = 0; i < N_PINLIST; i++) {
    1178:	01010005 	tsteq	r1, r5
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    117c:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
    1180:	000ca802 	andeq	sl, ip, r2, lsl #16
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1184:	01970300 	orrseq	r0, r7, r0, lsl #6
    1188:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    118c:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
	for (i = 0; i < N_PINLIST; i++) {
    1190:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
}
    1194:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    1198:	4a090306 	bmi	241db8 <__ccfg+0x221e10>
    119c:	03050304 	movweq	r0, #21252	; 0x5304
    11a0:	017fb503 	cmneq	pc, r3, lsl #10
void GPIOIntHandler () {
    11a4:	2d050404 	cfstrscs	mvf0, [r5, #-16]
if (buttons_int) {
    11a8:	01cb0306 	biceq	r0, fp, r6, lsl #6
    11ac:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	buttons_disable ();
    11b0:	8f030602 	svchi	0x00030602
    11b4:	03053c7f 	movweq	r3, #23679	; 0x5c7f
	i_trigger ((aword)&__button_list);
    11b8:	04010113 	streq	r0, [r1], #-275	; 0xfffffeed
    11bc:	03290504 			; <UNDEFINED> instruction: 0x03290504
    11c0:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
    11c4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    11c8:	01040106 	tsteq	r4, r6, lsl #2
    11cc:	90030305 	andls	r0, r3, r5, lsl #6
    11d0:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
    11d4:	f0032d05 			; <UNDEFINED> instruction: 0xf0032d05
    11d8:	01042000 	mrseq	r2, (UNDEF: 4)
    11dc:	03060305 	movweq	r0, #25349	; 0x6305
    11e0:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
	RISE_N_SHINE;
    11e4:	03290504 			; <UNDEFINED> instruction: 0x03290504
    11e8:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
    11ec:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
if (pin_sensor_int) {
    11f0:	01040106 	tsteq	r4, r6, lsl #2
    11f4:	03060305 	movweq	r0, #25349	; 0x6305
	i_trigger ((aword)(&__input_pins));
    11f8:	01207f90 			; <UNDEFINED> instruction: 0x01207f90
    11fc:	01010101 	tsteq	r1, r1, lsl #2
    1200:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    1204:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    1208:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
    120c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1210:	01062d05 	tsteq	r6, r5, lsl #26
    1214:	03050104 	movweq	r0, #20740	; 0x5104
    1218:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    121c:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    1220:	2001a603 	andcs	sl, r1, r3, lsl #12
	__pinsen_disable_and_clear;
    1224:	03050104 	movweq	r0, #20740	; 0x5104
	RISE_N_SHINE;
    1228:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
    122c:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
    1230:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
}
    1234:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1238:	01062d05 	tsteq	r6, r5, lsl #26
    123c:	03050104 	movweq	r0, #20740	; 0x5104
    1240:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
    1244:	01010120 	tsteq	r1, r0, lsr #2
void system_init () {
    1248:	58010101 	stmdapl	r1, {r0, r8}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    124c:	08052e01 	stmdaeq	r5, {r0, r9, sl, fp, sp}
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1250:	00090211 	andeq	r0, r9, r1, lsl r2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1254:	1d050101 	stfnes	f0, [r5, #-4]
    1258:	fc020500 	stc2	5, cr0, [r2], {-0}
    125c:	0300000c 	movweq	r0, #12
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1260:	0501029d 	streq	r0, [r1, #-669]	; 0xfffffd63
    1264:	1d051602 	stcne	6, cr1, [r5, #-8]
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1268:	16050e06 	strne	r0, [r5], -r6, lsl #28
    126c:	4a090524 	bmi	242704 <__ccfg+0x22275c>
    1270:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1274:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    1278:	76032306 	strvc	r2, [r3], -r6, lsl #6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    127c:	06110501 	ldreq	r0, [r1], -r1, lsl #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1280:	03020501 	movweq	r0, #9473	; 0x2501
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1284:	2f052e0d 	svccs	0x00052e0d
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1288:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
		pin = (port_confs [i] >> 19) & 0x1f;
    128c:	200a032a 	andcs	r0, sl, sl, lsr #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1290:	76032f05 	strvc	r2, [r3], -r5, lsl #30
		pin = (port_confs [i] >> 19) & 0x1f;
    1294:	2e360520 	cfabs64cs	mvdx0, mvdx6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1298:	0a032a05 	beq	cbab4 <__ccfg+0xabb0c>
    129c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    12a0:	06010523 	streq	r0, [r1], -r3, lsr #10
    12a4:	000b022f 	andeq	r0, fp, pc, lsr #4
		if (port_confs [i] & 0x80)
    12a8:	21050101 	tstcs	r5, r1, lsl #2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ac:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    12b0:	0300000d 	movweq	r0, #13
		if (port_confs [i] & 0x40)
    12b4:	050102aa 	streq	r0, [r1, #-682]	; 0xfffffd56
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12b8:	21051702 	tstcs	r5, r2, lsl #14
    12bc:	02051b06 	andeq	r1, r5, #6144	; 0x1800
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12c0:	06090525 	streq	r0, [r9], -r5, lsr #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	1402052e 	strne	r0, [r2], #-1326	; 0xfffffad2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12c8:	05016903 	streq	r6, [r1, #-2307]	; 0xfffff6fd
	all_leds_blink;
    12cc:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    12d0:	2a052e2f 	bcs	14cb94 <__ccfg+0x12cbec>
    12d4:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
    12d8:	2069032f 	rsbcs	r0, r9, pc, lsr #6
    12dc:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
    12e0:	2017032a 	andscs	r0, r7, sl, lsr #6
    12e4:	23060205 	movwcs	r0, #25093	; 0x6205
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12e8:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    12ec:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    12f0:	01010006 	tsteq	r1, r6
    12f4:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    12f8:	000d6402 	andeq	r6, sp, r2, lsl #8
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    12fc:	02b70300 	adcseq	r0, r7, #0, 6
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1300:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1304:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
	IntEnable (INT_AON_RTC_COMB);
    1308:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    130c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    1310:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
	__pi_malloc_init ();
    1314:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
	IntEnable (INT_AON_GPIO_EDGE);
    1318:	02051e2b 	andeq	r1, r5, #688	; 0x2b0
    131c:	05052206 	streq	r2, [r5, #-518]	; 0xfffffdfa
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1320:	03050106 	movweq	r0, #20742	; 0x5106
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1324:	15182506 	ldrne	r2, [r8, #-1286]	; 0xfffffafa
    1328:	01061205 	tsteq	r6, r5, lsl #4
    132c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1330:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    1334:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1338:	04052006 	streq	r2, [r5], #-6
    133c:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    1340:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	urates [0] = UART_RATE / 100;
    1344:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    1348:	03050106 	movweq	r0, #20742	; 0x5106
	reinit_uart ();
    134c:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
	EXTRA_INITIALIZERS;
    1350:	06050106 	streq	r0, [r5], -r6, lsl #2
    1354:	06030520 	streq	r0, [r3], -r0, lsr #10
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1358:	06070522 	streq	r0, [r7], -r2, lsr #10
    135c:	20060501 	andcs	r0, r6, r1, lsl #10
    1360:	21060405 	tstcs	r6, r5, lsl #8
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1364:	13061705 	movwne	r1, #26373	; 0x6705
    1368:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    136c:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
    1370:	01061205 	tsteq	r6, r5, lsl #4
			devinit [i] . init (devinit [i] . param);
    1374:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1378:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    137c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    1380:	04052006 	streq	r2, [r5], #-6
	IntEnable (INT_UART0_COMB);
    1384:	17052106 	strne	r2, [r5, -r6, lsl #2]
    1388:	051f1306 	ldreq	r1, [pc, #-774]	; 108a <UART0IntHandler+0x26>
}
    138c:	052f0604 	streq	r0, [pc, #-1540]!	; d90 <AONRTCIntHandler+0x2c>
	tci_run_auxiliary_timer ();
    1390:	12051403 	andne	r1, r5, #50331648	; 0x3000000
		diag ("");
    1394:	06050106 	streq	r0, [r5], -r6, lsl #2
    1398:	06040520 	streq	r0, [r4], -r0, lsr #10
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    139c:	06080521 	streq	r0, [r8], -r1, lsr #10
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13a0:	20070501 	andcs	r0, r7, r1, lsl #10
		diag ("Leftover RAM: %d bytes",
    13a4:	21060505 	tstcs	r6, r5, lsl #10
    13a8:	13061805 	movwne	r1, #26629	; 0x6805
    13ac:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    13b0:	0505042f 	streq	r0, [r5, #-1071]	; 0xfffffbd1
    13b4:	7da30302 	stcvc	3, cr0, [r3, #8]!
    13b8:	06110501 	ldreq	r0, [r1], -r1, lsl #10
    13bc:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    13c0:	30060305 	andcc	r0, r6, r5, lsl #6
    13c4:	01061205 	tsteq	r6, r5, lsl #4
    13c8:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
    13cc:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    13d0:	13052106 	movwne	r2, #20742	; 0x5106
    13d4:	07050106 	streq	r0, [r5, -r6, lsl #2]
    13d8:	2f140520 	svccs	0x00140520
    13dc:	051f0705 	ldreq	r0, [pc, #-1797]	; cdf <__pi_syserror+0x37>
    13e0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    13e4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    13e8:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
    13ec:	03290504 			; <UNDEFINED> instruction: 0x03290504
    13f0:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    13f4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    13f8:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
    13fc:	03060505 	movweq	r0, #25861	; 0x6505
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1400:	054a7de6 	strbeq	r7, [sl, #-3558]	; 0xfffff21a
    1404:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    1408:	06052008 	streq	r2, [r5], -r8
    140c:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    1410:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
    1414:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    1418:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    141c:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
}
    1420:	e8030605 	stmda	r3, {r0, r2, r9, sl}
__attribute__ ((noreturn)) void __pi_release () {
    1424:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
    1428:	06050106 	streq	r0, [r5], -r6, lsl #2
    142c:	01012106 	tsteq	r1, r6, lsl #2
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1430:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
	check_stack_overflow;
    1434:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    1438:	01210606 			; <UNDEFINED> instruction: 0x01210606
    143c:	13050501 	movwne	r0, #21761	; 0x5501
	update_n_wake (MAX_WORD, NO);
    1440:	01061805 	tsteq	r6, r5, lsl #16
    1444:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
    1448:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
	for_all_tasks (__pi_curr) {
    144c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    1450:	05052007 	streq	r2, [r5, #-7]
    1454:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
  __ASM volatile ("cpsid i" : : : "memory");
    1458:	01040106 	tsteq	r4, r6, lsl #2
	__SLEEP;
    145c:	03060b05 	movweq	r0, #27397	; 0x6b05
    1460:	052e02cd 	streq	r0, [lr, #-717]!	; 0xfffffd33
    1464:	05051a02 	streq	r1, [r5, #-2562]	; 0xfffff5fe
    1468:	03050106 	movweq	r0, #20742	; 0x5106
	system_event_count ++;
    146c:	0c053406 	cfstrseq	mvf3, [r5], {6}
    1470:	03053006 	movweq	r3, #20486	; 0x5006
	switch (__pi_systat.effpdm) {
    1474:	0522062c 	streq	r0, [r2, #-1580]!	; 0xfffff9d4
    1478:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    147c:	0c052f0a 	stceq	15, cr2, [r5], {10}
    1480:	2203051f 	andcs	r0, r3, #130023424	; 0x7c00000
			__WFI ();
    1484:	051e0c05 	ldreq	r0, [lr, #-3077]	; 0xfffff3fb
    1488:	132f0603 			; <UNDEFINED> instruction: 0x132f0603
    148c:	02054a01 	andeq	r4, r5, #4096	; 0x1000
	check_stack_overflow;
    1490:	06010519 			; <UNDEFINED> instruction: 0x06010519
    1494:	03160513 	tsteq	r6, #79691776	; 0x4c00000
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1498:	05042045 	streq	r2, [r4, #-69]	; 0xffffffbb
    149c:	03060505 	movweq	r0, #25861	; 0x6505
			(__pi_curr->code) (tstate (__pi_curr));
    14a0:	054a7dc9 	strbeq	r7, [sl, #-3529]	; 0xfffff237
			goto Redo;
    14a4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	for_all_tasks (__pi_curr) {
    14a8:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14ac:	03290504 			; <UNDEFINED> instruction: 0x03290504
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14b0:	050102c2 	streq	r0, [r1, #-706]	; 0xfffffd3e
    14b4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14b8:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
    14bc:	03060505 	movweq	r0, #25861	; 0x6505
    14c0:	054a7dba 	strbeq	r7, [sl, #-3514]	; 0xfffff246
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14c4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    14c8:	06052008 	streq	r2, [r5], -r8
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14cc:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    14d0:	c0032905 	andgt	r2, r3, r5, lsl #18
			__WFI ();
    14d4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14d8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    14dc:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
}
    14e0:	bc030605 	stclt	6, cr0, [r3], {5}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14e4:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    14e8:	06050106 	streq	r0, [r5], -r6, lsl #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14ec:	01012106 	tsteq	r1, r6, lsl #2
    14f0:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
			PRCMPowerDomainOff (__pi_systat.ondmns |
    14f4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    14f8:	01210606 			; <UNDEFINED> instruction: 0x01210606
    14fc:	13050501 	movwne	r0, #21761	; 0x5501
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1500:	01061805 	tsteq	r6, r5, lsl #16
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1504:	03050104 	movweq	r0, #20740	; 0x5104
    1508:	02ce0306 	sbceq	r0, lr, #402653184	; 0x18000000
    150c:	0606054a 	streq	r0, [r6], -sl, asr #10
    1510:	06040501 	streq	r0, [r4], -r1, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1514:	00150230 	andseq	r0, r5, r0, lsr r2
    1518:	2d050101 	stfcss	f0, [r5, #-4]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    151c:	78020500 	stmdavc	r2, {r8, sl}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1520:	0300000e 	movweq	r0, #14
    1524:	05010389 	streq	r0, [r1, #-905]	; 0xfffffc77
    1528:	2d051602 	stccs	6, cr1, [r5, #-8]
    152c:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    1530:	2f060524 	svccs	0x00060524
			SysCtrlSetRechargeBeforePowerDown
    1534:	061f0205 	ldreq	r0, [pc], -r5, lsl #4
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1538:	06060521 	streq	r0, [r6], -r1, lsr #10
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    153c:	20050501 	andcs	r0, r5, r1, lsl #10
    1540:	03060305 	movweq	r0, #25349	; 0x6305
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	06052009 	streq	r2, [r5], -r9
    1548:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    154c:	1a052306 	bne	14a16c <__ccfg+0x12a1c4>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1550:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1554:	7ef90306 	cdpvc	3, 15, cr0, cr9, cr6, {0}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1558:	0610052e 	ldreq	r0, [r0], -lr, lsr #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    155c:	2e2e0501 	cfsh64cs	mvdx0, mvdx14, #1
    1560:	87031a05 	strhi	r1, [r3, -r5, lsl #20]
    1564:	052f3c01 	streq	r3, [pc, #-3073]!	; 96b <root+0x323>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1568:	17052018 	smladne	r5, r8, r0, r2
			while (!(AONWUCPowerStatusGet () &
    156c:	0309051f 	movweq	r0, #38175	; 0x951f
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1570:	0d05200a 	stceq	0, cr2, [r5, #-40]	; 0xffffffd8
    1574:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    1578:	0d05230b 	stceq	3, cr2, [r5, #-44]	; 0xffffffd4
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    157c:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    1580:	0105134d 	tsteq	r5, sp, asr #6
    1584:	03051906 	movweq	r1, #22790	; 0x5906
    1588:	052f2906 	streq	r2, [pc, #-2310]!	; c8a <__pi_offdomain+0x22>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    158c:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
    1590:	01010009 	tsteq	r1, r9
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1594:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    1598:	000ec802 	andeq	ip, lr, r2, lsl #16
			SysCtrlAdjustRechargeAfterPowerDown ();
    159c:	05d30300 	ldrbeq	r0, [r3, #768]	; 0x300
			reinit_uart ();
    15a0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    15a4:	06330517 			; <UNDEFINED> instruction: 0x06330517
    15a8:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
}
    15ac:	33052702 	movwcc	r2, #22274	; 0x5702
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15b0:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
    15b4:	3e062702 	cdpcc	7, 0, cr2, cr6, cr2, {0}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15b8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    15bc:	017bd503 	cmneq	fp, r3, lsl #10
    15c0:	02050104 	andeq	r0, r5, #4, 2
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15c4:	04ab0306 	strteq	r0, [fp], #774	; 0x306
    15c8:	09030601 	stmdbeq	r3, {r0, r9, sl}
    15cc:	05060482 	streq	r0, [r6, #-1154]	; 0xfffffb7e
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15d0:	7dd90324 	ldclvc	3, cr0, [r9, #144]	; 0x90
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    15d4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    15d8:	01062305 	tsteq	r6, r5, lsl #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    15dc:	01050104 	tsteq	r5, r4, lsl #2
    15e0:	2002a503 	andcs	sl, r2, r3, lsl #10
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    15e4:	23050604 	movwcs	r0, #22020	; 0x5604
    15e8:	207ddb03 	rsbscs	sp, sp, r3, lsl #22
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15ec:	4f060505 	svcmi	0x00060505
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    15f0:	01062205 	tsteq	r6, r5, lsl #4
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    15f4:	02050104 	andeq	r0, r5, #4, 2
    15f8:	029e0306 	addseq	r0, lr, #402653184	; 0x18000000
			PRCMPowerDomainOff (
    15fc:	060d0566 	streq	r0, [sp], -r6, ror #10
    1600:	06020501 	streq	r0, [r2], -r1, lsl #10
	__SLEEP;
    1604:	0601052f 	streq	r0, [r1], -pc, lsr #10
    1608:	000c0213 	andeq	r0, ip, r3, lsl r2
  __ASM volatile ("cpsie i" : : : "memory");
    160c:	1c050101 	stfnes	f0, [r5], {1}
	goto Redo;
    1610:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    1614:	0300000f 	movweq	r0, #15
    1618:	050105ef 	streq	r0, [r1, #-1519]	; 0xfffffa11
    161c:	06041702 	streq	r1, [r4], -r2, lsl #14
    1620:	f7032405 			; <UNDEFINED> instruction: 0xf7032405
    1624:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    1628:	06230517 			; <UNDEFINED> instruction: 0x06230517
    162c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1630:	02880302 	addeq	r0, r8, #134217728	; 0x8000000
    1634:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    1638:	7df80323 	ldclvc	3, cr0, [r8, #140]!	; 0x8c
    163c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1640:	85030602 	strhi	r0, [r3, #-1538]	; 0xfffff9fe
    1644:	06044a02 	streq	r4, [r4], -r2, lsl #20
    1648:	c9032405 	stmdbgt	r3, {r0, r2, sl, sp}
    164c:	2d05017c 	stfcss	f0, [r5, #-496]	; 0xfffffe10
    1650:	05051717 	streq	r1, [r5, #-1815]	; 0xfffff8e9
    1654:	06230517 			; <UNDEFINED> instruction: 0x06230517
    1658:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    165c:	a9030602 	stmdbge	r3, {r1, r9, sl}
    1660:	06043c03 	streq	r3, [r4], -r3, lsl #24
    1664:	ce032705 	cdpgt	7, 0, cr2, cr3, cr5, {0}
    1668:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    166c:	06240514 			; <UNDEFINED> instruction: 0x06240514
    1670:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1674:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
    1678:	0e02587d 	mcreq	8, 0, r5, cr2, cr13, {3}
	cli_tim;
    167c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1680:	0205003d 	andeq	r0, r5, #61	; 0x3d
    1684:	00000f54 	andeq	r0, r0, r4, asr pc
	diag ("PicOS halted");
    1688:	01068f03 	tsteq	r6, r3, lsl #30
	mdelay (500);
    168c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1690:	2e1e063d 	mrccs	6, 0, r0, cr14, cr13, {1}
	setpowermode (2);
    1694:	03060505 	movweq	r0, #25861	; 0x6505
	__PCB = NULL;
    1698:	0e05820b 	cdpeq	2, 0, cr8, cr5, cr11, {0}
	release;
    169c:	08050106 	stmdaeq	r5, {r1, r2, r8}
    16a0:	1f0e052f 	svcne	0x000e052f
    16a4:	2f060505 	svccs	0x00060505
    16a8:	050f0a05 	streq	r0, [pc, #-2565]	; cab <__pi_syserror+0x3>
int main (void) {
    16ac:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16b0:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
    16b4:	07053406 	streq	r3, [r5, -r6, lsl #8]
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16b8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16bc:	2e280306 	cdpcs	3, 2, cr0, cr8, cr6, {0}
	system_init ();
    16c0:	01061605 	tsteq	r6, r5, lsl #12
	tcv_init ();
    16c4:	34030105 	strcc	r0, [r3], #-261	; 0xfffffefb
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16c8:	03090520 	movweq	r0, #38176	; 0x9520
    16cc:	053c7fa0 	ldreq	r7, [ip, #-4000]!	; 0xfffff060
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    16d0:	200b0304 	andcs	r0, fp, r4, lsl #6
    16d4:	05210805 	streq	r0, [r1, #-2053]!	; 0xfffff7fb
    16d8:	2e74030e 	cdpcs	3, 7, cr0, cr4, cr14, {0}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    16dc:	03060405 	movweq	r0, #25605	; 0x6405
    16e0:	054b3c0b 	strbeq	r3, [fp, #-3083]	; 0xfffff3f5
	delay (16, 0);
    16e4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    16e8:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
    16ec:	054b3006 	strbeq	r3, [fp, #-6]
	__pi_release ();
    16f0:	0b052404 	bleq	14a708 <__ccfg+0x12a760>
    16f4:	4a240306 	bmi	902314 <__ccfg+0x8e236c>
    16f8:	062d0405 	strteq	r0, [sp], -r5, lsl #8
    16fc:	060b0521 	streq	r0, [fp], -r1, lsr #10
    1700:	06050501 	streq	r0, [r5], -r1, lsl #10
    1704:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    1708:	05300608 	ldreq	r0, [r0, #-1544]!	; 0xfffff9f8
static void killev (__pi_pcb_t *pid) {
    170c:	2f061e05 	svccs	0x00061e05
	wfun = (aword)(pid->code);
    1710:	0e0a0513 	mcreq	5, 0, r0, cr10, cr3, {0}
	for_all_tasks (i) {
    1714:	20061205 	andcs	r1, r6, r5, lsl #4
		for (j = 0; j < nevents (i); j++) {
    1718:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    171c:	05350604 	ldreq	r0, [r5, #-1540]!	; 0xfffff9fc
    1720:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
			    || i->Events [j] . Event == wfun
    1724:	4b340604 	blmi	d02f3c <__ccfg+0xce2f94>
		for (j = 0; j < nevents (i); j++) {
    1728:	01060805 	tsteq	r6, r5, lsl #16
			if (i->Events [j] . Event == (aword)pid
    172c:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    1730:	4b2f0605 	blmi	bc2f4c <__ccfg+0xba2fa4>
    1734:	03060905 	movweq	r0, #26885	; 0x6905
				wakeupev (i, j);
    1738:	0405204d 	streq	r2, [r5], #-77	; 0xffffffb3
    173c:	05203003 	streq	r3, [r0, #-3]!
	for_all_tasks (i) {
    1740:	05052108 	streq	r2, [r5, #-264]	; 0xfffffef8
}
    1744:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1748:	11030604 	tstne	r3, r4, lsl #12
static void qfree (aword *ch) {
    174c:	0b055e3c 	bleq	159044 <__ccfg+0x13909c>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1750:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
	cc = (aword*)(mpools + MA_NP);
    1754:	052f061f 	streq	r0, [pc, #-1567]!	; 113d <__buttons_setirq+0x19>
	m_setnextp (ch, chunk);
    1758:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
	m_setnextp (cc, ch);
    175c:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
}
    1760:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1764:	052f0605 	streq	r0, [pc, #-1541]!	; 1167 <__buttons_setirq+0x43>
    1768:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    176c:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
			m_setnextp (cc, m_nextp (chunk));
    1770:	04053106 	streq	r3, [r5], #-262	; 0xfffffefa
			m_size (chunk) += m_hdrlen + m_size (ch);
    1774:	2e160306 	cdpcs	3, 1, cr0, cr6, cr6, {0}
    1778:	2e6d0306 	cdpcs	3, 6, cr0, cr13, cr6, {0}
    177c:	01060705 	tsteq	r6, r5, lsl #14
    1780:	2f060505 	svccs	0x00060505
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	88030205 	stmdahi	r3, {r0, r2, r9}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1788:	1005017f 	andne	r0, r5, pc, ror r1
    178c:	0c050106 	stfeqs	f0, [r5], {6}
    1790:	2000f903 	andcs	pc, r0, r3, lsl #18
			m_setnextp (cc, m_nextp (chunk));
    1794:	051f1305 	ldreq	r1, [pc, #-773]	; 1497 <__pi_release+0x73>
			m_size (ch) += m_hdrlen + m_size (chunk);
    1798:	052f0605 	streq	r0, [pc, #-1541]!	; 119b <__pinlist_setirq+0x33>
    179c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    17a0:	11030604 	tstne	r3, r4, lsl #12
    17a4:	00120220 	andseq	r0, r2, r0, lsr #4
    17a8:	2b050101 	blcs	141bb4 <__ccfg+0x121c0c>
    17ac:	00020500 	andeq	r0, r2, r0, lsl #10
			if (m_size (chunk) >= m_size (ch))
    17b0:	03000000 	movweq	r0, #0
    17b4:	050105ea 	streq	r0, [r1, #-1514]	; 0xfffffa16
    17b8:	01051402 	tsteq	r5, r2, lsl #8
		chunk = m_nextp (chunk))
    17bc:	06021306 	streq	r1, [r2], -r6, lsl #6
    17c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    17c4:	02050019 	andeq	r0, r5, #25
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17c8:	00001064 	andeq	r1, r0, r4, rrx
	diag_wait (a);
    17cc:	01078103 	tsteq	r7, r3, lsl #2
	diag_wchar (c, a);
    17d0:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    17d4:	03240506 			; <UNDEFINED> instruction: 0x03240506
}
    17d8:	05050112 	streq	r0, [r5, #-274]	; 0xfffffeee
    17dc:	06220517 			; <UNDEFINED> instruction: 0x06220517
	syserror (ESTATE, "state");
    17e0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    17e4:	2e670319 	mcrcs	3, 3, r0, cr7, cr9, {0}
    17e8:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
    17ec:	04201903 	strteq	r1, [r0], #-2307	; 0xfffff6fd
	for (i = 0; i < MAX_UTIMERS; i++)
    17f0:	03060501 	movweq	r0, #25857	; 0x6501
void utimer_add (address ut) {
    17f4:	0604206b 	streq	r2, [r4], -fp, rrx
    17f8:	15032205 	strne	r2, [r3, #-517]	; 0xfffffdfb
		if (__pi_utims [i] == NULL)
    17fc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	for (i = 0; i < MAX_UTIMERS; i++)
    1800:	6b030602 	blvs	c3010 <__ccfg+0xa3068>
    1804:	06060520 	streq	r0, [r6], -r0, lsr #10
		syserror (ERESOURCE, "ut a");
    1808:	20050501 	andcs	r0, r5, r1, lsl #10
	__pi_utims [i] = ut;
    180c:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
}
    1810:	03052e1c 	movweq	r2, #24092	; 0x5e1c
    1814:	014b2f06 	cmpeq	fp, r6, lsl #30
    1818:	01011358 	tsteq	r1, r8, asr r3
	*t = v;
    181c:	20062e01 	andcs	r2, r6, r1, lsl #28
	TCI_RUN_AUXILIARY_TIMER;
    1820:	662e6606 	strtvs	r6, [lr], -r6, lsl #12
void update_n_wake (word min, Boolean force) {
    1824:	052e014a 	streq	r0, [lr, #-330]!	; 0xfffffeb6
	if (TCI_UPDATE_DELAY_TICKS (force))
    1828:	06051502 	streq	r1, [r5], -r2, lsl #10
    182c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1830:	2e250520 	cfsh64cs	mvdx0, mvdx5, #16
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1834:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
    1838:	062f0603 	strteq	r0, [pc], -r3, lsl #12
    183c:	4b062c14 	blmi	18c894 <__ccfg+0x16c8ec>
    1840:	01135801 	tsteq	r3, r1, lsl #16
    1844:	062e0101 	strteq	r0, [lr], -r1, lsl #2
    1848:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
    184c:	05014a58 	streq	r4, [r1, #-2648]	; 0xfffff5a8
    1850:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
    1854:	0101000b 	tsteq	r1, fp
    1858:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    185c:	00112402 	andseq	r2, r1, r2, lsl #8
    1860:	07d90300 	ldrbeq	r0, [r9, r0, lsl #6]
    1864:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		for_all_tasks (i) {
    1868:	03041413 	movweq	r1, #17427	; 0x4413
	__pi_mintk = znew + min;
    186c:	fe030305 	cdp2	3, 0, cr0, cr3, cr5, {0}
    1870:	01040178 	tsteq	r4, r8, ror r1
			if (!twaiting (i))
    1874:	03062105 	movweq	r2, #24837	; 0x6105
    1878:	040106fd 	streq	r0, [r1], #-1789	; 0xfffff903
			if (twakecnd (__pi_old, znew, i->Timer)) {
    187c:	03030503 	movweq	r0, #13571	; 0x3503
    1880:	04207983 	strteq	r7, [r0], #-2435	; 0xfffff67d
    1884:	06020501 	streq	r0, [r2], -r1, lsl #10
    1888:	20078303 	andcs	r8, r7, r3, lsl #6
    188c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1890:	04041303 	streq	r1, [r4], #-771	; 0xfffffcfd
    1894:	03063305 	movweq	r3, #25349	; 0x6305
    1898:	04017dad 	streq	r7, [r1], #-3501	; 0xfffff253
    189c:	03080501 	movweq	r0, #34049	; 0x8501
    18a0:	042002d3 	strteq	r0, [r0], #-723	; 0xfffffd2d
    18a4:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    18a8:	04207dad 	strteq	r7, [r0], #-3501	; 0xfffff253
				wakeuptm (i);
    18ac:	03080501 	movweq	r0, #34049	; 0x8501
    18b0:	052002d3 	streq	r0, [r0, #-723]!	; 0xfffffd2d
		for_all_tasks (i) {
    18b4:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
				d = i->Timer - znew;
    18b8:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    18bc:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    18c0:	7da70329 	stcvc	3, cr0, [r7, #164]!	; 0xa4
		if ((word)(__pi_mintk - znew) < min) 
    18c4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    18c8:	01063305 	tsteq	r6, r5, lsl #6
    18cc:	042e2d05 	strteq	r2, [lr], #-3333	; 0xfffff2fb
	__pi_old = znew;
    18d0:	06030501 	streq	r0, [r3], -r1, lsl #10
}
    18d4:	2002d503 	andcs	sp, r2, r3, lsl #10
	TCI_RUN_DELAY_TIMER;
    18d8:	1e060805 	cdpne	8, 0, cr0, cr6, cr5, {0}
}
    18dc:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
    18e0:	04042c08 	streq	r2, [r4], #-3080	; 0xfffff3f8
    18e4:	ad033305 	stcge	3, cr3, [r3, #-20]	; 0xffffffec
    18e8:	0104207d 	tsteq	r4, sp, ror r0
    18ec:	d5030305 	strle	r0, [r3, #-773]	; 0xfffffcfb
void proceed (word state) {
    18f0:	41052002 	tstmi	r5, r2
	prcdstate (__pi_curr, state);
    18f4:	061d0558 			; <UNDEFINED> instruction: 0x061d0558
    18f8:	010e051d 	tsteq	lr, sp, lsl r5
	release;
    18fc:	13130305 	tstne	r3, #335544320	; 0x14000000
    1900:	29050404 	stmdbcs	r5, {r2, sl}
void __pi_wait (aword event, word state) {
    1904:	017da703 	cmneq	sp, r3, lsl #14
	sint j = nevents (__pi_curr);
    1908:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	if (j >= MAX_EVENTS_PER_TASK)
    190c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1910:	06030501 	streq	r0, [r3], -r1, lsl #10
    1914:	2002d503 	andcs	sp, r2, r3, lsl #10
		syserror (ENEVENTS, "sw");
    1918:	01064105 	tsteq	r6, r5, lsl #2
    191c:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
	setestate (__pi_curr->Events [j], state, event);
    1920:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
	incwait (__pi_curr);
    1924:	03041802 	movweq	r1, #18434	; 0x4802
	setestate (__pi_curr->Events [j], state, event);
    1928:	ec030305 	stc	3, cr0, [r3], {5}
}
    192c:	01040178 	tsteq	r4, r8, ror r1
    1930:	03060105 	movweq	r0, #24837	; 0x6105
    1934:	02200795 	eoreq	r0, r0, #39059456	; 0x2540000
void __pi_trigger (aword event) {
    1938:	01010008 	tsteq	r1, r8
	for_all_tasks (i) {
    193c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
		for (j = 0; j < nevents (i); j++) {
    1940:	00116802 	andseq	r6, r1, r2, lsl #16
    1944:	07ec0300 	strbeq	r0, [ip, r0, lsl #6]!
    1948:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    194c:	03041413 	movweq	r1, #17427	; 0x4413
			if (i->Events [j] . Event == event) {
    1950:	eb030305 	bl	c256c <__ccfg+0xa25c4>
    1954:	01040178 	tsteq	r4, r8, ror r1
    1958:	03062105 	movweq	r2, #24837	; 0x6105
				wakeupev (i, j);
    195c:	04010790 	streq	r0, [r1], #-1936	; 0xfffff870
    1960:	03030503 	movweq	r0, #13571	; 0x3503
	for_all_tasks (i) {
    1964:	042078f0 	strteq	r7, [r0], #-2288	; 0xfffff710
}
    1968:	06020501 	streq	r0, [r2], -r1, lsl #10
aword __pi_join (aword pid, word st) {
    196c:	20079603 	andcs	r9, r7, r3, lsl #12
	for_all_tasks (i) {
    1970:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1974:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
	return 0;
    1978:	03330504 	teqeq	r3, #4, 10	; 0x1000000
		if ((aword)i == pid) {
    197c:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
			__pi_wait (pid, st);
    1980:	03080501 	movweq	r0, #34049	; 0x8501
}
    1984:	042002e6 	strteq	r0, [r0], #-742	; 0xfffffd1a
	for_all_tasks (i) {
    1988:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    198c:	04207d9a 	strteq	r7, [r0], #-3482	; 0xfffff266
void delay (word d, word state) {
    1990:	03030501 	movweq	r0, #13569	; 0x3501
	settstate (__pi_curr, state);
    1994:	062002e8 	strteq	r0, [r0], -r8, ror #5
    1998:	0608051e 			; <UNDEFINED> instruction: 0x0608051e
    199c:	1f1e0501 	svcne	0x001e0501
    19a0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	update_n_wake (d, YES);
    19a4:	042f0603 	strteq	r0, [pc], #-1539	; 19ac <delay+0x1c>
    19a8:	03290504 			; <UNDEFINED> instruction: 0x03290504
	__pi_curr->Timer = __pi_old + d;
    19ac:	05017d94 	streq	r7, [r1, #-3476]	; 0xfffff26c
    19b0:	33051705 	movwcc	r1, #22277	; 0x5705
	inctimer (__pi_curr);
    19b4:	01040106 	tsteq	r4, r6, lsl #2
    19b8:	e8030305 	stmda	r3, {r0, r2, r8, r9}
    19bc:	02052e02 	andeq	r2, r5, #2, 28
}
    19c0:	05040447 	streq	r0, [r4, #-1095]	; 0xfffffbb9
    19c4:	7d9b032d 	ldcvc	3, cr0, [fp, #180]	; 0xb4
	if (fun == NULL)
    19c8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		return (int) __pi_curr;
    19cc:	e8030603 	stmda	r3, {r0, r1, r9, sl}
    19d0:	41052002 	tstmi	r5, r2
	for_all_tasks (i)
    19d4:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
}
    19d8:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
		if (i->code == fun)
    19dc:	06020501 	streq	r0, [r2], -r1, lsl #10
	for_all_tasks (i)
    19e0:	04260601 	strteq	r0, [r6], #-1537	; 0xfffff9ff
    19e4:	03030503 	movweq	r0, #13571	; 0x3503
    19e8:	040178d9 	streq	r7, [r1], #-2265	; 0xfffff727
int __pi_strlen (const char *s) {
    19ec:	06010501 	streq	r0, [r1], -r1, lsl #10
	for (i = 0; *(s+i) != '\0'; i++);
    19f0:	2007a803 	andcs	sl, r7, r3, lsl #16
}
    19f4:	01000802 	tsteq	r0, r2, lsl #16
	for (i = 0; *(s+i) != '\0'; i++);
    19f8:	00180501 	andseq	r0, r8, r1, lsl #10
	while ((Boolean)(*d++ = *s++));
    19fc:	11a40205 			; <UNDEFINED> instruction: 0x11a40205
    1a00:	c5030000 	strgt	r0, [r3, #-0]
    1a04:	07040107 	streq	r0, [r4, -r7, lsl #2]
}
    1a08:	bb030105 	bllt	c1e24 <__ccfg+0xa1e7c>
	while (n-- && (*s != '\0'))
    1a0c:	01040178 	tsteq	r4, r8, ror r1
    1a10:	03061805 	movweq	r1, #26629	; 0x6805
	*d = '\0';
    1a14:	040107c5 	streq	r0, [r1], #-1989	; 0xfffff83b
	while (n-- && (*s != '\0'))
    1a18:	03050507 	movweq	r0, #21767	; 0x5507
    1a1c:	052078bb 	streq	r7, [r0, #-2235]!	; 0xfffff745
		*d++ = *s++;
    1a20:	02052e04 	andeq	r2, r5, #4, 28	; 0x40
    1a24:	013d3d06 	teqeq	sp, r6, lsl #26
	while (n--)
    1a28:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
    1a2c:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
		*dest++ = *src++;
    1a30:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
    1a34:	04580113 	ldrbeq	r0, [r8], #-275	; 0xfffffeed
    1a38:	0f010508 	svceq	0x00010508
	while (n--)
    1a3c:	01060505 	tsteq	r6, r5, lsl #10
}
    1a40:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
		*dest++ = c;
    1a44:	013d0602 	teqeq	sp, r2, lsl #12
void adddevfunc (devreqfun_t rf, int loc) {
    1a48:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
		syserror (EREQPAR, "addv");
    1a4c:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
		syserror (ERESOURCE, "addv");
    1a50:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
	if (ioreq [loc] != NULL)
    1a54:	58012f13 	stmdapl	r1, {r0, r1, r4, r8, r9, sl, fp, sp}
    1a58:	01050104 	tsteq	r5, r4, lsl #2
		syserror (ERESOURCE, "addv");
    1a5c:	07d00306 	ldrbeq	r0, [r0, r6, lsl #6]
	ioreq [loc] = rf;
    1a60:	000b0201 	andeq	r0, fp, r1, lsl #4
}
    1a64:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
    1a68:	48020500 	stmdami	r2, {r8, sl}
sint io (word retry, word dev, word operation, char *buf, word len) {
    1a6c:	03000012 	movweq	r0, #18
    1a70:	05010880 	streq	r0, [r1, #-2176]	; 0xfffff780
    1a74:	15051402 	strne	r1, [r5, #-1026]	; 0xfffffbfe
    1a78:	02051006 	andeq	r1, r5, #6
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1a7c:	3e061e32 	mcrcc	14, 0, r1, cr6, cr2, {1}
    1a80:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
    1a84:	03050509 	movweq	r0, #21769	; 0x5509
		syserror (ENODEVICE, "io");
    1a88:	05017ca7 	streq	r7, [r1, #-3239]	; 0xfffff359
    1a8c:	04010631 	streq	r0, [r1], #-1585	; 0xfffff9cf
	if (len == 0)
    1a90:	030b0501 	movweq	r0, #46337	; 0xb501
	ret = (ioreq [dev]) (operation, buf, len);
    1a94:	04207dc5 	strteq	r7, [r0], #-3525	; 0xfffff23b
    1a98:	03310509 	teqeq	r1, #37748736	; 0x2400000
	if (ret >= 0)
    1a9c:	042002bb 	strteq	r0, [r0], #-699	; 0xfffffd45
	if (ret == -1) {
    1aa0:	03320501 	teqeq	r2, #4194304	; 0x400000
    1aa4:	042e7dc8 	strteq	r7, [lr], #-3528	; 0xfffff238
		if (retry == WNONE)
    1aa8:	03050504 	movweq	r0, #21764	; 0x5504
		iowait (dev, operation, retry);
    1aac:	052e029b 	streq	r0, [lr, #-667]!	; 0xfffffd65
    1ab0:	7ecc032d 	cdpvc	3, 12, cr0, cr12, cr13, {1}
    1ab4:	2e4a032e 	cdpcs	3, 4, cr0, cr10, cr14, {1}
			release;
    1ab8:	31050904 	tstcc	r5, r4, lsl #18
	if (ret == -2) {
    1abc:	2e028703 	cdpcs	7, 0, cr8, cr2, cr3, {0}
		if (retry != WNONE) {
    1ac0:	02050104 	andeq	r0, r5, #4, 2
    1ac4:	03dc0306 	bicseq	r0, ip, #402653184	; 0x18000000
			iowait (dev, operation, retry);
    1ac8:	79e70320 	stmibvc	r7!, {r5, r8, r9}^
    1acc:	07051401 	streq	r1, [r5, -r1, lsl #8]
			(ioreq [dev]) (NONE, buf, len);
    1ad0:	01120501 	tsteq	r2, r1, lsl #10
    1ad4:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    1ad8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
		(ioreq [dev]) (NONE, buf, len);
    1adc:	07052c3d 	smladxeq	r5, sp, ip, r2
    1ae0:	06030522 	streq	r0, [r3], -r2, lsr #10
    1ae4:	0632052f 	ldrteq	r0, [r2], -pc, lsr #10
}
    1ae8:	2e210558 	mcrcs	5, 1, r0, cr1, cr8, {2}
	if (retry != WNONE) {
    1aec:	2f060305 	svccs	0x00060305
		delay (-ret - 2, retry);
    1af0:	01060605 	tsteq	r6, r5, lsl #12
    1af4:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    1af8:	29050404 	stmdbcs	r5, {r2, sl}
    1afc:	01029103 	tsteq	r2, r3, lsl #2
		release;
    1b00:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    1b04:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b08:	01043c06 	tsteq	r4, r6, lsl #24
    1b0c:	03060305 	movweq	r0, #25349	; 0x6305
    1b10:	05207de9 	streq	r7, [r0, #-3561]!	; 0xfffff217
    1b14:	052e0606 	streq	r0, [lr, #-1542]!	; 0xfffff9fa
    1b18:	04210604 	strteq	r0, [r1], #-1540	; 0xfffff9fc
		syserror (ERESOURCE, "mal1");
    1b1c:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1b20:	05050127 	streq	r0, [r5, #-295]	; 0xfffffed9
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b24:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1b28:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b2c:	56030604 	strpl	r0, [r3], -r4, lsl #12
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b30:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b34:	00db0329 	sbcseq	r0, fp, r9, lsr #6
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b38:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1b3c:	01062d05 	tsteq	r6, r5, lsl #26
}
    1b40:	3c050104 	stfccs	f0, [r5], {4}
    1b44:	7f960306 	svcvc	0x00960306
    1b48:	0112052e 	tsteq	r2, lr, lsr #10
    1b4c:	01060205 	tsteq	r6, r5, lsl #4
    1b50:	069a0306 	ldreq	r0, [sl], r6, lsl #6
    1b54:	0401012e 	streq	r0, [r1], #-302	; 0xfffffed2
void __pi_free (aword *ch) {
    1b58:	03290504 			; <UNDEFINED> instruction: 0x03290504
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b5c:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
    1b60:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		syserror (EMALLOC, "malg");
    1b64:	01040106 	tsteq	r4, r6, lsl #2
    1b68:	e6030205 	str	r0, [r3], -r5, lsl #4
	mcfree [MA_NP] += m_size (ch);
    1b6c:	04043c05 	streq	r3, [r4], #-3077	; 0xfffff3fb
		m_size (ch) ^= MALLOC_UMASK;
    1b70:	9a032d05 	bls	ccf8c <__ccfg+0xacfe4>
    1b74:	0104207a 	tsteq	r4, sl, ror r0
	mcfree [MA_NP] += m_size (ch);
    1b78:	03060205 	movweq	r0, #25093	; 0x6205
	QFREE;
    1b7c:	042005e6 	strteq	r0, [r0], #-1510	; 0xfffffa1a
	if (mevent [MA_NP] . nwait) {
    1b80:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1b84:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
		trigger ((aword)(&(mevent [MA_NP])));
    1b88:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		mevent [MA_NP] . nwait --;
    1b8c:	01040106 	tsteq	r4, r6, lsl #2
}
    1b90:	03060205 	movweq	r0, #25093	; 0x6205
    1b94:	012005e6 	smulwteq	r0, r6, r5
    1b98:	01010101 	tsteq	r1, r1, lsl #2
    1b9c:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
void kill (aword pid) {
    1ba0:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
		pid = (aword) __pi_curr;
    1ba4:	7acb0329 	bvc	ff2c2850 <_estack+0xdf2bd850>
	j = NULL;
    1ba8:	17050501 	strne	r0, [r5, -r1, lsl #10]
	for_all_tasks (i) {
    1bac:	01062d05 	tsteq	r6, r5, lsl #26
	syserror (EREQPAR, "kpi");
    1bb0:	02050104 	andeq	r0, r5, #4, 2
    1bb4:	2005b003 	andcs	fp, r5, r3
		if ((aword)i == pid) {
    1bb8:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    1bbc:	207ad003 	rsbscs	sp, sl, r3
				__PCB = i->Next;
    1bc0:	02050104 	andeq	r0, r5, #4, 2
			killev (i);
    1bc4:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
			ufree (i);
    1bc8:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
			if (i == __pi_curr)
    1bcc:	7acb0329 	bvc	ff2c2878 <_estack+0xdf2bd878>
    1bd0:	17050501 	strne	r0, [r5, -r1, lsl #10]
				release;
    1bd4:	01062d05 	tsteq	r6, r5, lsl #26
				j->Next = i->Next;
    1bd8:	02050104 	andeq	r0, r5, #4, 2
    1bdc:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
    1be0:	01010120 	tsteq	r1, r0, lsr #2
}
    1be4:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    1be8:	10030623 	andne	r0, r3, r3, lsr #12
    1bec:	03020501 	movweq	r0, #9473	; 0x2501
	if (size < 8)
    1bf0:	58062070 	stmdapl	r6, {r4, r5, r6, sp}
		_size = 2;
    1bf4:	0d032e01 	stceq	14, cr2, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1bf8:	050a0401 	streq	r0, [sl, #-1025]	; 0xfffffbff
		_size = (((aword)size) + 3) >> 2;
    1bfc:	7ecd0305 	cdpvc	3, 12, cr0, cr13, cr5, {0}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c00:	062f0501 	strteq	r0, [pc], -r1, lsl #10
		_size = (((aword)size) + 3) >> 2;
    1c04:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		if (mevent [MA_NP] . nfail != 255)
    1c08:	01ba0327 			; <UNDEFINED> instruction: 0x01ba0327
    1c0c:	050a0420 	streq	r0, [sl, #-1056]	; 0xfffffbe0
			mevent [MA_NP] . nfail ++;
    1c10:	7ec6032f 	cdpvc	3, 12, cr0, cr6, cr15, {1}
		mnfree [MA_NP] = 0;
    1c14:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1c18:	b5030602 	strlt	r0, [r3, #-1538]	; 0xfffff9fe
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c1c:	23052001 	movwcs	r2, #20481	; 0x5001
    1c20:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
			syserror (EMALLOC, "malc");
    1c24:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    1c28:	20740323 	rsbscs	r0, r4, r3, lsr #6
		if (m_size (chunk) >= _size)
    1c2c:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    1c30:	01062705 	tsteq	r6, r5, lsl #14
		chunk = m_nextp (chunk)) {
    1c34:	05280205 	streq	r0, [r8, #-517]!	; 0xfffffdfb
		m_setnextp (cc, m_nextp (chunk));
    1c38:	20780327 	rsbscs	r0, r8, r7, lsr #6
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c3c:	28060205 	stmdacs	r6, {r0, r2, r9}
    1c40:	0a03313f 	beq	ce144 <__ccfg+0xae19c>
			m_size (chunk) = _size;
    1c44:	c003404a 	andgt	r4, r3, sl, asr #32
			cc = chunk + _size + m_hdrlen;
    1c48:	5959017d 	ldmdbpl	r9, {r0, r2, r3, r4, r5, r6, r8}^
    1c4c:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
			m_size (cc) = waste - m_hdrlen;
    1c50:	7eae0305 	cdpvc	3, 10, cr0, cr14, cr5, {0}
			QFREE;
    1c54:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		mevent [MA_NP] . nfail = 0;
    1c58:	d403060d 	strle	r0, [r3], #-1549	; 0xfffff9f3
		mcfree [MA_NP] -= m_size (chunk);
    1c5c:	09040101 	stmdbeq	r4, {r0, r8}
    1c60:	ac033105 	stfges	f3, [r3], {5}
    1c64:	01042e7e 	tsteq	r4, lr, ror lr
    1c68:	03060205 	movweq	r0, #25093	; 0x6205
		m_size (chunk) |= MALLOC_UMASK;
    1c6c:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1c70:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
		m_size (chunk) |= MALLOC_UMASK;
    1c74:	03220602 			; <UNDEFINED> instruction: 0x03220602
			mnfree [MA_NP] = mcfree [MA_NP];
    1c78:	012e02c7 	smlawteq	lr, r7, r2, r0
}
    1c7c:	05152e2e 	ldreq	r2, [r5, #-3630]	; 0xfffff1d2
    1c80:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1c84:	03052e05 	movweq	r2, #24069	; 0x5e05
    1c88:	0b043006 	bleq	10dca8 <__ccfg+0xedd00>
    1c8c:	c3030505 	movwgt	r0, #13573	; 0x3505
    1c90:	0c040179 	stfeqs	f0, [r4], {121}	; 0x79
    1c94:	05015e03 	streq	r5, [r1, #-3587]	; 0xfffff1fd
aword __pi_fork (fsmcode func, aword data) {
    1c98:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c9c:	0605050b 	streq	r0, [r5], -fp, lsl #10
    1ca0:	052e2303 	streq	r2, [lr, #-771]!	; 0xfffffcfd
    1ca4:	05010634 	streq	r0, [r1, #-1588]	; 0xfffff9cc
		if ((j = __PCB) == NULL)
    1ca8:	044b0605 	strbeq	r0, [fp], #-1541	; 0xfffff9fb
	i->Next = NULL;
    1cac:	03150501 	tsteq	r5, #4194304	; 0x400000
	i->data = data;
    1cb0:	054a06d5 	strbeq	r0, [sl, #-1749]	; 0xfffff92b
		if ((j = __PCB) == NULL)
    1cb4:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
}
    1cb8:	3a150513 	bcc	54310c <__ccfg+0x523164>
			for (; j->Next != NULL; j = j->Next);
    1cbc:	03190205 	tsteq	r9, #1342177280	; 0x50000000
    1cc0:	04017ecb 	streq	r7, [r1], #-3787	; 0xfffff135
	return (aword) i;
    1cc4:	03240506 			; <UNDEFINED> instruction: 0x03240506
    1cc8:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
	if (mevent [MA_NP] . nwait != 255)
    1ccc:	23051705 	movwcs	r1, #22277	; 0x5705
    1cd0:	01040106 	tsteq	r4, r6, lsl #2
    1cd4:	dd030205 	sfmle	f0, 4, [r3, #-20]	; 0xffffffec
		mevent [MA_NP] . nwait ++;
    1cd8:	06042002 	streq	r2, [r4], -r2
	wait ((aword)(&(mevent [MA_NP])), state);
    1cdc:	a3032305 	movwge	r2, #13061	; 0x3305
    1ce0:	0104207d 	tsteq	r4, sp, ror r0
void diag (const char *mess, ...) {
    1ce4:	03060205 	movweq	r0, #25093	; 0x6205
    1ce8:	4e4a02dd 	mcrmi	2, 2, r0, cr10, cr13, {6}
    1cec:	13060105 	movwne	r0, #24837	; 0x6105
	diag_disable_int (a, is);
    1cf0:	052d0205 	streq	r0, [sp, #-517]!	; 0xfffffdfb
    1cf4:	5f030603 	svcpl	0x00030603
    1cf8:	0541412e 	strbeq	r4, [r1, #-302]	; 0xfffffed2
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
	diag_disable_int (a, is);
    1d00:	2f021f03 	svccs	0x00021f03
	while (*mess != '\0') {
    1d04:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	dgout ('\r');
    1d08:	0205001f 	andeq	r0, r5, #31
	dgout ('\n');
    1d0c:	00001400 	andeq	r1, r0, r0, lsl #8
    1d10:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
    1d14:	16170205 	ldrne	r0, [r7], -r5, lsl #4
	diag_wait (a);
    1d18:	01062c05 	tsteq	r6, r5, lsl #24
	diag_enable_int (a, is);
    1d1c:	05661505 	strbeq	r1, [r6, #-1285]!	; 0xfffffafb
    1d20:	1505202c 	strne	r2, [r5, #-44]	; 0xffffffd4
}
    1d24:	21120520 	tstcs	r2, r0, lsr #10
    1d28:	4a1f1505 	bmi	7c7144 <__ccfg+0x7a719c>
    1d2c:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
		if (*mess == '%') {
    1d30:	01010003 	tsteq	r1, r3
    1d34:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
			if (*mess == 'l') {
    1d38:	00000002 	andeq	r0, r0, r2
    1d3c:	0adb0300 	beq	ff6c2944 <_estack+0xdf6bd944>
				mess++;
    1d40:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
				val = va_arg (ap, lword);
    1d44:	010f0514 	tsteq	pc, r4, lsl r5	; <UNPREDICTABLE>
				bc = 32;
    1d48:	0e061c05 	cdpeq	12, 0, cr1, cr6, cr5, {0}
				bc = 16;
    1d4c:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
			switch (*mess) {
    1d50:	06052007 	streq	r2, [r5], -r7
    1d54:	06030558 			; <UNDEFINED> instruction: 0x06030558
    1d58:	0606052e 	streq	r0, [r6], -lr, lsr #10
				dgout ('%');
    1d5c:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    1d60:	010f052d 	tsteq	pc, sp, lsr #10
				dgout (*mess);
    1d64:	20060205 	andcs	r0, r6, r5, lsl #4
    1d68:	01054d06 	tsteq	r5, r6, lsl #26
			switch (*mess) {
    1d6c:	04021306 	streq	r1, [r2], #-774	; 0xfffffcfa
					v = __pi_hex_enc_table [
    1d70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
					i += 4;
    1d74:	02050031 	andeq	r0, r5, #49	; 0x31
					(val >> (bc - i)) & 0xf];
    1d78:	00001424 	andeq	r1, r0, r4, lsr #8
    1d7c:	010ae703 	tsteq	sl, r3, lsl #14
					dgout (v);
    1d80:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    1d84:	03030503 	movweq	r0, #13571	; 0x3503
				while (i < bc) {
    1d88:	040177b2 	streq	r7, [r1], #-1970	; 0xfffff84e
			mess++;
    1d8c:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
					d /= 10;
    1d90:	0108cc03 	tsteq	r8, r3, lsl #24
				if ((val >> (bc - 1)) & 1) {
    1d94:	03050304 	movweq	r0, #21252	; 0x5304
    1d98:	3c77b403 	cfldrdcc	mvd11, [r7], #-12
					dgout ('-');
    1d9c:	31050104 	tstcc	r5, r4, lsl #2
    1da0:	2008cc03 	andcs	ip, r8, r3, lsl #24
						val |= 0xffff0000;
    1da4:	03050304 	movweq	r0, #21252	; 0x5304
    1da8:	2077b403 	rsbscs	fp, r7, r3, lsl #8
    1dac:	02050104 	andeq	r0, r5, #4, 2
				d = (bc == 16) ? 10000 : 1000000000;
    1db0:	08d00306 	ldmeq	r0, {r1, r2, r8, r9}^
    1db4:	0204012e 	andeq	r0, r4, #-2147483637	; 0x8000000b
    1db8:	03060505 	movweq	r0, #25861	; 0x6505
					v = (word) (val / d);
    1dbc:	046676dd 	strbteq	r7, [r6], #-1757	; 0xfffff923
					if (v || d == 1) break;
    1dc0:	06020501 	streq	r0, [r2], -r1, lsl #10
    1dc4:	2009a303 	andcs	sl, r9, r3, lsl #6
					d /= 10;
    1dc8:	9b030d04 	blls	c51e0 <__ccfg+0xa5238>
				d = (bc == 16) ? 10000 : 1000000000;
    1dcc:	01010175 	tsteq	r1, r5, ror r1
					dgout (v + '0');
    1dd0:	044a5b19 	strbeq	r5, [sl], #-2841	; 0xfffff4e7
    1dd4:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    1dd8:	2e099d03 	cdpcs	13, 0, cr9, cr9, cr3, {0}
					d /= 10;
    1ddc:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
					val = val - (v * d);
    1de0:	76f90306 	ldrbtvc	r0, [r9], r6, lsl #6
					if (d == 0) break;
    1de4:	01010120 	tsteq	r1, r0, lsr #2
					v = (word) (val / d);
    1de8:	03040101 	movweq	r0, #16641	; 0x4101
    1dec:	36030305 	strcc	r0, [r3], -r5, lsl #6
				if (bc == 16)
    1df0:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
				d = (bc == 16) ? 10000 : 1000000000;
    1df4:	204a0302 	subcs	r0, sl, r2, lsl #6
					val &= 0xffff;
    1df8:	03010482 	movweq	r0, #5250	; 0x1482
					dgout (*s);
    1dfc:	050108eb 	streq	r0, [r1, #-2283]	; 0xfffff715
					s++;
    1e00:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
				while (*s != '\0') {
    1e04:	054c0602 	strbeq	r0, [ip, #-1538]	; 0xfffff9fe
    1e08:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
			dgout (*mess++);
    1e0c:	15052002 	strne	r2, [r5, #-2]
    1e10:	20020520 	andcs	r0, r2, r0, lsr #10
    1e14:	6a060405 	bvs	182e30 <__ccfg+0x162e88>
    1e18:	050d0421 	streq	r0, [sp, #-1057]	; 0xfffffbdf
    1e1c:	778e0302 	strvc	r0, [lr, r2, lsl #6]
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e20:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    1e24:	012b0303 			; <UNDEFINED> instruction: 0x012b0303
    1e28:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1e2c:	20205503 	eorcs	r5, r0, r3, lsl #10
	^ entropy
    1e30:	03010420 	movweq	r0, #5152	; 0x1420
}
    1e34:	04200ac5 	strteq	r0, [r0], #-2757	; 0xfffff53b
    1e38:	0303050d 	movweq	r0, #13581	; 0x350d
    1e3c:	054a75a6 	strbeq	r7, [sl, #-1446]	; 0xfffffa5a
    1e40:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e44:	23052006 	movwcs	r2, #20486	; 0x5006
	word cs = size + hblenb;
    1e48:	201f0520 	andscs	r0, pc, r0, lsr #10
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e4c:	30060405 	andcc	r0, r6, r5, lsl #8
    1e50:	01060e05 	tsteq	r6, r5, lsl #28
	p -> length = size;
    1e54:	2f060405 	svccs	0x00060405
}
    1e58:	041c0205 	ldreq	r0, [ip], #-517	; 0xfffffdfb
	if (p->attributes.b.queued) {
    1e5c:	03040501 	movweq	r0, #17665	; 0x4501
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e60:	052e098f 	streq	r0, [lr, #-2447]!	; 0xfffff671
    1e64:	0501062a 	streq	r0, [r1, #-1578]	; 0xfffff9d6
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e68:	2a052704 	bcs	14ba80 <__ccfg+0x12bad8>
		p->attributes.b.queued = 0;
    1e6c:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    1e70:	044e0604 	strbeq	r0, [lr], #-1540	; 0xfffff9fc
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1e74:	7fb20309 	svcvc	0x00b20309
	deq (p);	// Remove from queue
    1e78:	06290501 	strteq	r0, [r9], -r1, lsl #10
}
    1e7c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	tfree ((address)p);
    1e80:	d1030604 	tstle	r3, r4, lsl #12
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1e84:	044d6600 	strbeq	r6, [sp], #-1536	; 0xfffffa00
    1e88:	03050502 	movweq	r0, #21762	; 0x5502
    1e8c:	0401789f 	streq	r7, [r1], #-2207	; 0xfffff761
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1e90:	03040501 	movweq	r0, #17665	; 0x4501
    1e94:	052007e5 	streq	r0, [r0, #-2021]!	; 0xfffff81b
	if (q_empty (q))
    1e98:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1e9c:	214b0604 	cmpcs	fp, r4, lsl #12
		trigger (q);
    1ea0:	01061a05 	tsteq	r6, r5, lsl #20
	if (p->attributes.b.urgent) {
    1ea4:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
		p->u.bqueue.next = q->next;
    1ea8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
		p->u.bqueue.prev = q;
    1eac:	01789603 	cmneq	r8, r3, lsl #12
		q->next->prev = (qitem_t*) p;
    1eb0:	21060105 	tstcs	r6, r5, lsl #2
	p->attributes.b.queued = 1;
    1eb4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1eb8:	07f10306 	ldrbeq	r0, [r1, r6, lsl #6]!
}
    1ebc:	050c0420 	streq	r0, [ip, #-1056]	; 0xfffffbe0
		p->u.bqueue.prev = q->prev;
    1ec0:	78a00305 	stmiavc	r0!, {r0, r2, r8, r9}
		q->prev->next = (qitem_t*) p;
    1ec4:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
		q->prev = (qitem_t*) p;
    1ec8:	d4030631 	strle	r0, [r3], #-1585	; 0xfffff9cf
    1ecc:	0c040102 	stfeqs	f0, [r4], {2}
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1ed0:	ac032e05 	stcge	14, cr2, [r3], {5}
	deq (p);	// Soft dequeue, timer and hook left intact
    1ed4:	0e042e7d 	mcreq	14, 0, r2, cr4, cr13, {3}
	switch (dv) {
    1ed8:	88035205 	stmdahi	r3, {r0, r2, r9, ip, lr}
    1edc:	0c042e02 	stceq	14, cr2, [r4], {2}
    1ee0:	f8032e05 			; <UNDEFINED> instruction: 0xf8032e05
    1ee4:	01042e7d 	tsteq	r4, sp, ror lr
			p->attributes.b.urgent = 1;
    1ee8:	03060405 	movweq	r0, #25605	; 0x6405
    1eec:	042007e5 	strteq	r0, [r0], #-2021	; 0xfffff81b
			verify_ses (p, "dispose ses");
    1ef0:	0331050e 	teqeq	r1, #58720256	; 0x3800000
    1ef4:	05017aa0 	streq	r7, [r1, #-2720]	; 0xfffff560
    1ef8:	52051505 	andpl	r1, r5, #20971520	; 0x1400000
    1efc:	01040106 	tsteq	r4, r6, lsl #2
    1f00:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
			verify_phy (p, "dispose phy");
    1f04:	0e042005 	cdpeq	0, 0, cr2, cr4, cr5, {0}
    1f08:	9b035205 	blls	d6724 <__ccfg+0xb677c>
}
    1f0c:	01042e7a 	tsteq	r4, sl, ror lr
			enq (oqueues [p->attributes.b.phys], p);
    1f10:	03060405 	movweq	r0, #25605	; 0x6405
			p->attributes.b.urgent = 1;
    1f14:	042e05e0 	strteq	r0, [lr], #-1504	; 0xfffffa20
    1f18:	03050502 	movweq	r0, #21762	; 0x5502
			verify_phy (p, "dispose phy");
    1f1c:	04017886 	streq	r7, [r1], #-2182	; 0xfffff77a
    1f20:	03040501 	movweq	r0, #17665	; 0x4501
    1f24:	042007fc 	strteq	r0, [r0], #-2044	; 0xfffff804
    1f28:	03050509 	movweq	r0, #21769	; 0x5509
    1f2c:	05017aea 	streq	r7, [r1, #-2794]	; 0xfffff516
    1f30:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
			enq (oqueues [p->attributes.b.phys], p);
    1f34:	04b60329 	ldrteq	r0, [r6], #809	; 0x329
    1f38:	03310520 	teqeq	r1, #32, 10	; 0x8000000
}
    1f3c:	042e7bca 	strteq	r7, [lr], #-3018	; 0xfffff436
			rlp (p);
    1f40:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    1f44:	2e059903 	vmlacs.f16	s18, s10, s6	; <UNPREDICTABLE>
    1f48:	01062305 	tsteq	r6, r5, lsl #6
    1f4c:	06200405 	strteq	r0, [r0], -r5, lsl #8
    1f50:	0509046a 	streq	r0, [r9, #-1130]	; 0xfffffb96
    1f54:	799f0305 	ldmibvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
    1f58:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f5c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (b->attributes.b.outgoing) {
    1f60:	06ed0304 	strbteq	r0, [sp], r4, lsl #6
	b = header (p);
    1f64:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
	if (b->attributes.b.outgoing) {
    1f68:	7993033f 	ldmibvc	r3, {r0, r1, r2, r3, r4, r5, r8, r9}
		verify_ses (b, "tcv02");
    1f6c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1f70:	ea030604 	b	c3788 <__ccfg+0xa37e0>
    1f74:	09042e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, sp}
    1f78:	017f9003 	cmneq	pc, r3
    1f7c:	01062905 	tsteq	r6, r5, lsl #18
		verify_plg (b, tcv_out, "tcv03");
    1f80:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1f84:	2e00f303 	cdpcs	3, 0, cr15, cr0, cr3, {0}
    1f88:	29050904 	stmdbcs	r5, {r2, r8, fp}
    1f8c:	207f8d03 	rsbscs	r8, pc, r3, lsl #26
    1f90:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1f94:	00f30306 	rscseq	r0, r3, r6, lsl #6
    1f98:	04404d4a 	strbeq	r4, [r0], #-3402	; 0xfffff2b6
    1f9c:	03050502 	movweq	r0, #21762	; 0x5502
    1fa0:	040177ea 	streq	r7, [r1], #-2026	; 0xfffff816
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fa4:	03040501 	movweq	r0, #17665	; 0x4501
}
    1fa8:	05200899 	streq	r0, [r0, #-2201]!	; 0xfffff767
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fac:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
		rlp (b);
    1fb0:	214b0604 	cmpcs	fp, r4, lsl #12
}
    1fb4:	01061a05 	tsteq	r6, r5, lsl #20
		rlp (b);
    1fb8:	05230405 	streq	r0, [r3, #-1029]!	; 0xfffffbfb
    1fbc:	04051d1a 	streq	r1, [r5], #-3354	; 0xfffff2e6
    1fc0:	04593f06 	ldrbeq	r3, [r9], #-3846	; 0xfffff0fa
    1fc4:	7eee0309 	cdpvc	3, 14, cr0, cr14, cr9, {0}
    1fc8:	06290501 	strteq	r0, [r9], -r1, lsl #10
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1fcc:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    1fd0:	7bdb030d 	blvc	ff6c2c0c <_estack+0xdf6bdc0c>
    1fd4:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fd8:	04a50329 	strteq	r0, [r5], #809	; 0x329
	va_start (ap, plid);
    1fdc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fe0:	97030604 	strls	r0, [r3, -r4, lsl #12]
    1fe4:	0e044a01 	vmlaeq.f32	s8, s8, s2
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1fe8:	f3033105 	vrhadd.u8	d3, d3, d5
    1fec:	05050179 	streq	r0, [r5, #-377]	; 0xfffffe87
    1ff0:	06520515 			; <UNDEFINED> instruction: 0x06520515
    1ff4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			syserror (ENODEVICE, "tcv04");
    1ff8:	8c03061a 	stchi	6, cr0, [r3], {26}
		syserror (EMALLOC, "tcv05");
    1ffc:	0a052e06 	beq	14d81c <__ccfg+0x12d874>
	attp.b.outgoing = 1;
    2000:	050e0411 	streq	r0, [lr, #-1041]	; 0xfffffbef
    2004:	7ac30305 	bvc	ff0c2c20 <_estack+0xdf0bdc20>
    2008:	060d0501 	streq	r0, [sp], -r1, lsl #10
    200c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2010:	05bd030a 	ldreq	r0, [sp, #778]!	; 0x30a
		if (descriptors [fd] == NULL)
    2014:	06040520 	streq	r0, [r4], -r0, lsr #10
    2018:	0b055932 	bleq	1584e8 <__ccfg+0x138540>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    201c:	1a050106 	bne	14243c <__ccfg+0x122494>
		return ERROR;
    2020:	0a052106 	beq	14a440 <__ccfg+0x12a498>
}
    2024:	060b0511 			; <UNDEFINED> instruction: 0x060b0511
    2028:	580a0501 	stmdapl	sl, {r0, r8, sl}
    202c:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
	s->attpattern.b.session = fd;
    2030:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    2034:	017ab803 	cmneq	sl, r3, lsl #16
	descriptors [fd] = s;
    2038:	01063105 	tsteq	r6, r5, lsl #2
	q_init (&(s->rqueue));
    203c:	bc033f05 	stclt	15, cr3, [r3], {5}
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2040:	3105207e 	tstcc	r5, lr, ror r0
    2044:	2001c403 	andcs	ip, r1, r3, lsl #8
    2048:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    204c:	05cb0306 	strbeq	r0, [fp, #774]	; 0x306
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2050:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    2054:	78f10305 	ldmvc	r1!, {r0, r2, r8, r9}^
    2058:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
	descriptors [fd] = s;
    205c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2060:	92030604 	andls	r0, r3, #4, 12	; 0x400000
    2064:	0c042e07 	stceq	14, cr2, [r4], {7}
	if (s == NULL)
    2068:	f5030505 			; <UNDEFINED> instruction: 0xf5030505
		syserror (EMALLOC, "tcv05");
    206c:	2e050177 	mcrcs	1, 0, r0, cr5, cr7, {3}
    2070:	01040106 	tsteq	r4, r6, lsl #2
    2074:	03060405 	movweq	r0, #25605	; 0x6405
    2078:	042e088e 	strteq	r0, [lr], #-2190	; 0xfffff772
    207c:	03050502 	movweq	r0, #21762	; 0x5502
    2080:	040177c9 	streq	r7, [r1], #-1993	; 0xfffff837
    2084:	03040501 	movweq	r0, #17665	; 0x4501
    2088:	032008ba 			; <UNDEFINED> instruction: 0x032008ba
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    208c:	052f2e09 	streq	r2, [pc, #-3593]!	; 128b <system_init+0x43>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    2090:	7db00302 	ldcvc	3, cr0, [r0, #8]!
    2094:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
    2098:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
	plugins [ord] = pl;
    209c:	17050501 	strne	r0, [r5, -r1, lsl #10]
	return 0;
    20a0:	01062305 	tsteq	r6, r5, lsl #6
		return ERROR;
    20a4:	01050104 	tsteq	r5, r4, lsl #2
}
    20a8:	5801a803 	stmdapl	r1, {r0, r1, fp, sp, pc}
    20ac:	03060405 	movweq	r0, #25605	; 0x6405
	verify_fds (fd, "tcv10");
    20b0:	5b2002f0 	blpl	802c78 <__ccfg+0x7e2cd0>
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20b4:	01062c05 	tsteq	r6, r5, lsl #24
	verify_fds (fd, "tcv10");
    20b8:	05273205 	streq	r3, [r7, #-517]!	; 0xfffffdfb
    20bc:	2079032c 	rsbscs	r0, r9, ip, lsr #6
    20c0:	4c060405 	cfstrsmi	mvf0, [r6], {5}
	verify_plg (b, tcv_frm, "tcv11");
    20c4:	01062d05 	tsteq	r6, r5, lsl #26
	b = q_first (rq);
    20c8:	5d060405 	cfstrspl	mvf0, [r6, #-20]	; 0xffffffec
	if (q_end (b, rq)) {
    20cc:	01063205 	tsteq	r6, r5, lsl #4
		if (state != WNONE) {
    20d0:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    20d4:	01063205 	tsteq	r6, r5, lsl #4
			when (rq, state);
    20d8:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
			release;
    20dc:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	deq (b);	// Dequeue the packet ...
    20e0:	01778b03 	cmneq	r7, r3, lsl #22
    20e4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	p = ((address)(b + 1));
    20e8:	2008f803 	andcs	pc, r8, r3, lsl #16
	verify_plg (b, tcv_frm, "tcv11");
    20ec:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
    20f0:	017a8803 	cmneq	sl, r3, lsl #16
    20f4:	01062d05 	tsteq	r6, r5, lsl #26
    20f8:	31060505 	tstcc	r6, r5, lsl #10
    20fc:	01064d05 	tsteq	r6, r5, lsl #26
    2100:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2104:	01062e05 	tsteq	r6, r5, lsl #28
    2108:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		b->length - b->u.pointers.head - b->u.pointers.tail;
    210c:	05f70306 	ldrbeq	r0, [r7, #774]!	; 0x306
    2110:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
	b->u.pointers.tail =
    2114:	77850305 	strvc	r0, [r5, r5, lsl #6]
}
    2118:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
		return NULL;
    211c:	e803060d 	stmda	r3, {r0, r2, r3, r9, sl}
    2120:	01042002 	tsteq	r4, r2
    2124:	03063905 	movweq	r3, #26885	; 0x6905
    2128:	05200696 	streq	r0, [r0, #-1686]!	; 0xfffff96a
    212c:	0e04010a 	adfeqs	f0, f4, #2.0
	verify_fds (fd, "tcv16");
    2130:	ea030505 	b	c354c <__ccfg+0xa35a4>
								Boolean urg) {
    2134:	0d050179 	stfeqs	f0, [r5, #-484]	; 0xfffffe1c
    2138:	01040106 	tsteq	r4, r6, lsl #2
	verify_fds (fd, "tcv16");
    213c:	96030a05 	strls	r0, [r3], -r5, lsl #20
    2140:	04052006 	streq	r2, [r5], #-6
    2144:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
	verify_pld (s, tcv_frm, "tcv17");
    2148:	ec030505 	cfstr32	mvfx0, [r3], {5}
    214c:	41050177 	tstmi	r5, r7, ror r1
    2150:	01040106 	tsteq	r4, r6, lsl #2
    2154:	97030405 	strls	r0, [r3, -r5, lsl #8]
    2158:	09042e08 	stmdbeq	r4, {r3, r9, sl, fp, sp}
    215c:	e9034105 	stmdb	r3, {r0, r2, r8, lr}
    2160:	01042077 	tsteq	r4, r7, ror r0
    2164:	03060405 	movweq	r0, #25605	; 0x6405
	ptrs.head = (word) fd;
    2168:	52200897 	eorpl	r0, r0, #9895936	; 0x970000
	ptrs.tail = (word) urg;
    216c:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2170:	2075d103 	rsbscs	sp, r5, r3, lsl #2
    2174:	0101014a 	tsteq	r1, sl, asr #2
		if (state != WNONE) {
    2178:	03050304 	movweq	r0, #21252	; 0x5304
    217c:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
}
    2180:	0302050d 	movweq	r0, #9485	; 0x250d
			when (eid, state);
    2184:	02162055 	andseq	r2, r6, #85	; 0x55
    2188:	01010037 	tsteq	r1, r7, lsr r0
			release;
    218c:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2190:	00167c02 	andseq	r7, r6, r2, lsl #24
    2194:	00e10300 	rsceq	r0, r1, r0, lsl #6
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2198:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    219c:	1e061205 	cdpne	2, 0, cr1, cr6, cr5, {0}
    21a0:	21220205 			; <UNDEFINED> instruction: 0x21220205
    21a4:	2f21061f 	svccs	0x0021061f
    21a8:	08053f4b 	stmdaeq	r5, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}
    21ac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		if (state != WNONE) {
    21b0:	08022f06 	stmdaeq	r2, {r1, r2, r8, r9, sl, fp, sp}
    21b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			tmwait (state);
    21b8:	0205003a 	andeq	r0, r5, #58	; 0x3a
    21bc:	00000000 	andeq	r0, r0, r0
	b->attributes = s->attpattern;
    21c0:	0100f103 	tsteq	r0, r3, lsl #2	; <UNPREDICTABLE>
		b->attributes.b.urgent = 1;
    21c4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    21c8:	0e063a05 	vmlaeq.f32	s6, s12, s10
	b->u.pointers.head = ptrs.head;
    21cc:	24060520 	strcs	r0, [r6], #-1312	; 0xfffffae0
	b->u.pointers.tail = length;
    21d0:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
	return (address) (b + 1);
    21d4:	03052405 	movweq	r2, #21509	; 0x5405
    21d8:	06053f06 	streq	r3, [r5], -r6, lsl #30
    21dc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    21e0:	12053006 	andne	r3, r5, #6
    21e4:	0b050106 	bleq	142604 <__ccfg+0x12265c>
    21e8:	0603052e 	streq	r0, [r3], -lr, lsr #10
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    21ec:	06090525 	streq	r0, [r9], -r5, lsr #10
    21f0:	050f0401 	streq	r0, [pc, #-1025]	; 1df7 <diag+0x113>
    21f4:	2015032f 	andscs	r0, r5, pc, lsr #6
	verify_fph (phy, "tcv23");
    21f8:	09050104 	stmdbeq	r5, {r2, r8}
    21fc:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    2200:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    2204:	0305050f 	movweq	r0, #21775	; 0x550f
}
    2208:	2f050114 	svccs	0x00050114
	return (physical [phy]) (opt, arg);
    220c:	01040106 	tsteq	r4, r6, lsl #2
    2210:	7a030105 	bvc	c262c <__ccfg+0xa2684>
    2214:	06040520 	streq	r0, [r4], -r0, lsr #10
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2218:	04206f03 	strteq	r6, [r0], #-3843	; 0xfffff0fd
	if (opt < 0) {
    221c:	0305050f 	movweq	r0, #21775	; 0x550f
		if (fd < 0)
    2220:	140100c3 	strne	r0, [r1], #-195	; 0xffffff3d
		if (opt == PHYSOPT_PLUGINFO) {
    2224:	01061805 	tsteq	r6, r5, lsl #16
			if (fd >= TCV_MAX_PLUGS)
    2228:	33060505 	movwcc	r0, #25861	; 0x6505
			if ((p = plugins [fd]) == NULL)
    222c:	0b050104 	bleq	142644 <__ccfg+0x12269c>
    2230:	7fb60306 	svcvc	0x00b60306
}
    2234:	06030501 	streq	r0, [r3], -r1, lsl #10
		if (fd >= TCV_MAX_PHYS)
    2238:	050f0434 	streq	r0, [pc, #-1076]	; 1e0c <diag+0x128>
		return physinfo [fd];
    223c:	2f050e05 	svccs	0x00050e05
    2240:	01040106 	tsteq	r4, r6, lsl #2
	verify_fds (fd, "tcv22");
    2244:	41060305 	tstmi	r6, r5, lsl #6
    2248:	01060605 	tsteq	r6, r5, lsl #12
    224c:	053f0405 	ldreq	r0, [pc, #-1029]!	; 1e4f <apb+0xb>
    2250:	04052b06 	streq	r2, [r5], #-2822	; 0xfffff4fa
    2254:	052f2306 	streq	r2, [pc, #-774]!	; 1f56 <dispose+0x86>
}
    2258:	13062203 	movwne	r2, #25091	; 0x6203
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    225c:	051f0905 	ldreq	r0, [pc, #-2309]	; 195f <__pi_trigger+0x27>
    2260:	2f210603 	svccs	0x00210603
			return 0;
    2264:	01000902 	tsteq	r0, r2, lsl #18
    2268:	00110501 	andseq	r0, r1, r1, lsl #10
    226c:	16ac0205 	strtne	r0, [ip], r5, lsl #4
    2270:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    2274:	0305010a 	movweq	r0, #20746	; 0x510a
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2278:	0f051316 	svceq	0x00051316
    227c:	06110501 	ldreq	r0, [r1], -r1, lsl #10
	if (dsp != TCV_DSP_PASS) {
    2280:	2505200d 	strcs	r2, [r5, #-13]
		if (ses == NONE)
    2284:	1f030526 	svcne	0x00030526
			syserror (EREQPAR, "tcv26");
    2288:	21060405 	tstcs	r6, r5, lsl #8
		verify_fds (ses, "tcv27");
    228c:	01062505 	tsteq	r6, r5, lsl #10
    2290:	2d063705 	stccs	7, cr3, [r6, #-20]	; 0xffffffec
    2294:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    2298:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    229c:	06320602 	ldrteq	r0, [r2], -r2, lsl #12
		if ((p = apb (size)) != NULL) {
    22a0:	20790319 	rsbscs	r0, r9, r9, lsl r3
    22a4:	5b323106 	blpl	c8e6c4 <__ccfg+0xc6e71c>
		return NULL;
    22a8:	061c055b 			; <UNDEFINED> instruction: 0x061c055b
			p->attributes = descriptors [ses] -> attpattern;
    22ac:	4a0c0501 	bmi	3036b8 <__ccfg+0x2e3710>
			dispose (p, dsp);
    22b0:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
			p->attributes = descriptors [ses] -> attpattern;
    22b4:	02051d0c 	andeq	r1, r5, #12, 26	; 0x300
			p->attributes.b.outgoing = 0;
    22b8:	043e2306 	ldrteq	r2, [lr], #-774	; 0xfffffcfa
			dispose (p, dsp);
    22bc:	03030503 	movweq	r0, #13571	; 0x3503
			return (address)(p + 1);
    22c0:	040175c5 	streq	r7, [r1], #-1477	; 0xfffffa3b
    22c4:	03020501 	movweq	r0, #9473	; 0x2501
	if ((p = apb (size)) != NULL)
    22c8:	02200abd 	eoreq	r0, r0, #774144	; 0xbd000
    22cc:	0101000e 	tsteq	r1, lr
		return (address)(p + 1);
    22d0:	00000ee4 	andeq	r0, r0, r4, ror #29
    22d4:	01940003 	orrseq	r0, r4, r3
    22d8:	01020000 	mrseq	r0, (UNDEF: 2)
    22dc:	000d0efb 	strdeq	r0, [sp], -fp
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e0:	01010101 	tsteq	r1, r1, lsl #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    22e4:	01000000 	mrseq	r0, (UNDEF: 0)
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e8:	2f010000 	svccs	0x00010000
    22ec:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		syserror (EREQPAR, "tcv28");
    22f0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
		syserror (EMALLOC, "tcv29");
    22f4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	physical [phy] = ps;
    22f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	physinfo [phy] = info;
    22fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2300:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2304:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2308:	4349502f 	movtmi	r5, #36911	; 0x902f
    230c:	502f534f 	eorpl	r5, pc, pc, asr #6
		syserror (EMALLOC, "tcv29");
    2310:	534f6369 	movtpl	r6, #62313	; 0xf369
    2314:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
	q_init (q);
    2318:	006c656e 	rsbeq	r6, ip, lr, ror #10
}
    231c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2268 <tcv_control+0x50>
    2320:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    2324:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    2328:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    232c:	6f746b73 	svcvs	0x00746b73
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2330:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	verify_fph (phy, "tcv30");
    2334:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2338:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    233c:	2f534f43 	svccs	0x00534f43
	verify_fph (phy, "tcv30");
    2340:	4f636950 	svcmi	0x00636950
    2344:	43432f53 	movtmi	r2, #16211	; 0x3f53
    2348:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    234c:	3143432f 	cmpcc	r3, pc, lsr #6
    2350:	57585833 	smmlarpl	r8, r3, r8, r5
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2354:	2f455241 	svccs	0x00455241
    2358:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		if (plugins [plg] == NULL)
    235c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2360:	752f0062 	strvc	r0, [pc, #-98]!	; 2306 <tcvphy_reg+0x26>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2364:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 21a0 <tcv_wnps+0x70>
}
    2368:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    236c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2370:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2374:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2378:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    237c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    2380:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    2384:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2388:	2f006564 	svccs	0x00006564
    238c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2390:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
	len -= (ap.head + ap.tail);
    2394:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    2398:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    239c:	706f746b 	rsbvc	r7, pc, fp, ror #8
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23a0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    23a4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    23a8:	4349502f 	movtmi	r5, #36911	; 0x902f
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23ac:	502f534f 	eorpl	r5, pc, pc, asr #6
    23b0:	534f6369 	movtpl	r6, #62313	; 0xf369
    23b4:	3143432f 	cmpcc	r3, pc, lsr #6
	return 1;
    23b8:	00585833 	subseq	r5, r8, r3, lsr r8
    23bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2308 <tcvphy_reg+0x28>
    23c0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    23c4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    23c8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	verify_fph (phy, "tcv32");
    23cc:	6f746b73 	svcvs	0x00746b73
    23d0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    23d4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    23d8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    23dc:	2f534f43 	svccs	0x00534f43
    23e0:	4f636950 	svcmi	0x00636950
	oq = oqueues [phy];
    23e4:	6b000053 	blvs	2538 <cmd_0+0x4>
	b = q_first (oq);
    23e8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
	if (q_end (b, oq)) {
    23ec:	00632e6c 	rsbeq	r2, r3, ip, ror #28
	*len = b->length;
    23f0:	75000001 	strvc	r0, [r0, #-1]
	deq (b);	// Dequeue the packet ...
    23f4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
}
    23f8:	00020068 	andeq	r0, r2, r8, rrx
		return NULL;
    23fc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2400:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2404:	00030068 	andeq	r0, r3, r8, rrx
    2408:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
	verify_fph (phy, "tcv33");
    240c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    2410:	00030068 	andeq	r0, r3, r8, rrx
    2414:	63726100 	cmnvs	r2, #0, 2
    2418:	00682e68 	rsbeq	r2, r8, r8, ror #28
    241c:	6d000004 	stcvs	0, cr0, [r0, #-16]
    2420:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
	oq = oqueues [phy];
    2424:	00040068 	andeq	r0, r4, r8, rrx
	b = q_first (oq);
    2428:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
		return NULL;
    242c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	return (address)(b + 1);
    2430:	00682e73 	rsbeq	r2, r8, r3, ror lr
}
    2434:	62000004 	andvs	r0, r0, #4
    2438:	6f747475 	svcvs	0x00747475
    243c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2440:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
	verify_plg (b, tcv_xmt, "tcv34");
    2444:	00000400 	andeq	r0, r0, r0, lsl #8
	hblock_t *b = header (pkt);
    2448:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
	verify_plg (b, tcv_xmt, "tcv34");
    244c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    2450:	6b000005 	blvs	246c <tcvphy_end+0x2c>
    2454:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    2458:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    245c:	3c000001 	stccc	0, cr0, [r0], {1}
    2460:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2464:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
	dispose (b, plugins [b->attributes.b.plugin] ->
    2468:	0000003e 	andeq	r0, r0, lr, lsr r0
}
    246c:	26050000 	strcs	r0, [r5], -r0
	dispose (b, plugins [b->attributes.b.plugin] ->
    2470:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    2474:	03000017 	movweq	r0, #23
    2478:	050103c3 	streq	r0, [r1, #-963]	; 0xfffffc3d
}
    247c:	13131602 	tstne	r3, #2097152	; 0x200000
    while(1)
    2480:	06260514 			; <UNDEFINED> instruction: 0x06260514
{
    2484:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
    SetupTrimDevice();
    2488:	20090302 	andcs	r0, r9, r2, lsl #6
    pui32Src = &_etext;
    248c:	051f0705 	ldreq	r0, [pc, #-1797]	; 1d8f <diag+0xab>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2490:	20210602 	eorcs	r0, r1, r2, lsl #12
    __asm("    ldr     r0, =_bss\n"
    2494:	21061305 	tstcs	r6, r5, lsl #6
    2498:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
    249c:	08052013 	stmdaeq	r5, {r0, r1, r4, sp}
    24a0:	060f053e 			; <UNDEFINED> instruction: 0x060f053e
    24a4:	0603052c 	streq	r0, [r3], -ip, lsr #10
   main();
    24a8:	06040501 	streq	r0, [r4], -r1, lsl #10
    FaultISR();
    24ac:	0616052f 	ldreq	r0, [r6], -pc, lsr #10
        *pui32Dest++ = *pui32Src++;
    24b0:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    24b4:	31060505 	tstcc	r6, r5, lsl #10
    24b8:	0302054b 	movweq	r0, #9547	; 0x254b
    24bc:	0105017a 	tsteq	r5, sl, ror r1
    24c0:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    24c4:	01000302 	tsteq	r0, r2, lsl #6
    24c8:	001f0501 	andseq	r0, pc, r1, lsl #10
    24cc:	17480205 	strbne	r0, [r8, -r5, lsl #4]
static byte get_byte () {
    24d0:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    24d8:	14010d03 	strne	r0, [r1], #-3331	; 0xfffff2fd
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    24dc:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    24e0:	031f0501 	tsteq	pc, #4194304	; 0x400000
		if (ee_inp)
    24e4:	0d052070 	stceq	0, cr2, [r5, #-448]	; 0xfffffe40
			b |= 1;
    24e8:	052e1003 	streq	r1, [lr, #-3]!
    24ec:	0520061f 	streq	r0, [r0, #-1567]!	; 0xfffff9e1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24f0:	06010602 	streq	r0, [r1], -r2, lsl #12
	for (b = 0, i = 0; i < 8; i++) {
    24f4:	13201103 			; <UNDEFINED> instruction: 0x13201103
}
    24f8:	01060d05 	tsteq	r6, r5, lsl #26
    24fc:	051f0505 	ldreq	r0, [pc, #-1285]	; 1fff <tcv_open+0x33>
    2500:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
static void put_byte (byte b) {
    2504:	06010602 	streq	r0, [r1], -r2, lsl #12
    2508:	0f052125 	svceq	0x00052125
    250c:	02051506 	andeq	r1, r5, #25165824	; 0x1800000
    2510:	0523061d 	streq	r0, [r3, #-1565]!	; 0xfffff9e3
		if (b & 0x80)
    2514:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    2518:	03052401 	movweq	r2, #21505	; 0x5401
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    251c:	20620306 	rsbcs	r0, r2, r6, lsl #6
	for (i = 0; i < 8; i++) {
    2520:	01061e05 	tsteq	r6, r5, lsl #28
		b <<= 1;
    2524:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
	for (i = 0; i < 8; i++) {
    2528:	21300604 	teqcs	r0, r4, lsl #12
}
    252c:	01061305 	tsteq	r6, r5, lsl #6
    2530:	91060405 	tstls	r6, r5, lsl #8
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2534:	050d2e05 	streq	r2, [sp, #-3589]	; 0xfffff1fb
    2538:	05010636 	streq	r0, [r1, #-1590]	; 0xfffff9ca
	put_byte (cmd);
    253c:	0534060a 	ldreq	r0, [r4, #-1546]!	; 0xfffff9f6
    2540:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
}
    2544:	0405580d 	streq	r5, [r5], #-2061	; 0xfffff7f3
    2548:	052f2206 	streq	r2, [pc, #-518]!	; 234a <tcvphy_rcv+0x1a>
static void wwait (word st, word del) {
    254c:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    2550:	0b030604 	bleq	c3d68 <__ccfg+0xa3dc0>
    2554:	060705ac 	streq	r0, [r7], -ip, lsr #11
	while (dopen && (rdsr () & 1)) {
    2558:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    255c:	06090564 	streq	r0, [r9], -r4, ror #10
    2560:	00070213 	andeq	r0, r7, r3, lsl r2
    2564:	1c050101 	stfnes	f0, [r5], {1}
	put_byte (CMD_RDSR);
    2568:	c8020500 	stmdagt	r2, {r8, sl}
	r = get_byte ();
    256c:	03000017 	movweq	r0, #23
    2570:	050108c6 	streq	r0, [r1, #-2246]	; 0xfffff73a
	while (dopen && (rdsr () & 1)) {
    2574:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
}
    2578:	03060d05 	movweq	r0, #27909	; 0x6d05
		if (st == WNONE)
    257c:	04017cdf 	streq	r7, [r1], #-3295	; 0xfffff321
    2580:	060f0501 	streq	r0, [pc], -r1, lsl #10
			mdelay (1);
    2584:	2003a103 	andcs	sl, r3, r3, lsl #2
    2588:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
			delay (del, st);
    258c:	03240502 			; <UNDEFINED> instruction: 0x03240502
    2590:	05017cda 	streq	r7, [r1, #-3290]	; 0xfffff326
			release;
    2594:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
    2598:	01040106 	tsteq	r4, r6, lsl #2
    259c:	a1030205 	tstge	r3, r5, lsl #4
static void ready () {
    25a0:	2f062003 	svccs	0x00062003
	if (dopen) {
    25a4:	3d060105 	stfccs	f0, [r6, #-20]	; 0xffffffec
		wwait (WNONE, 1);
    25a8:	01000502 	tsteq	r0, r2, lsl #10
    25ac:	00270501 	eoreq	r0, r7, r1, lsl #10
    25b0:	00000205 	andeq	r0, r0, r5, lsl #4
	dstat = 0;
    25b4:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
}
    25b8:	02050100 	andeq	r0, r5, #0, 2
    25bc:	27051414 	smladcs	r5, r4, r4, r1
    25c0:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
	udelay (1);
    25c4:	1c270524 	cfstr32ne	mvfx0, [r7], #-144	; 0xffffff70
    25c8:	06240205 	strteq	r0, [r4], -r5, lsl #4
	udelay (1);
    25cc:	03052320 	movweq	r2, #21280	; 0x5320
		dopen = DOPEN_TEMP;
    25d0:	06060548 	streq	r0, [r6], -r8, asr #10
    25d4:	06020501 	streq	r0, [r2], -r1, lsl #10
    25d8:	0601052d 	streq	r0, [r1], -sp, lsr #10
    25dc:	00050232 	andeq	r0, r5, r2, lsr r2
static void cclose () {
    25e0:	1b050101 	blne	1429ec <__ccfg+0x122a44>
	if (dopen == DOPEN_TEMP) {
    25e4:	e0020500 	and	r0, r2, r0, lsl #10
    25e8:	03000017 	movweq	r0, #23
		wwait (WNONE, 1);
    25ec:	050100fa 	streq	r0, [r1, #-250]	; 0xffffff06
    25f0:	1b051302 	blne	147200 <__ccfg+0x127258>
	cmd_0 (CMD_DP);
    25f4:	02051f06 	andeq	r1, r5, #6, 30
    25f8:	00060221 	andeq	r0, r6, r1, lsr #4
		dopen = 0;
    25fc:	1e050101 	adfnes	f0, f5, f1
}
    2600:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
word ee_open () {
    2604:	03000017 	movweq	r0, #23
	ready ();
    2608:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
	dopen = DOPEN_PERM;
    260c:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    2610:	1e05010e 	adfnes	f0, f5, #0.5
}
    2614:	207a0306 	rsbscs	r0, sl, r6, lsl #6
	if (dopen) {
    2618:	05340905 	ldreq	r0, [r4, #-2309]!	; 0xfffff6fb
    261c:	207a031e 	rsbscs	r0, sl, lr, lsl r3
		dopen = DOPEN_TEMP;
    2620:	27060305 	strcs	r0, [r6, -r5, lsl #6]
		cclose ();
    2624:	01061205 	tsteq	r6, r5, lsl #4
}
    2628:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
int ser_out (word st, const char *m) {
    262c:	051f061f 	ldreq	r0, [pc, #-1567]	; 2015 <tcv_open+0x49>
	if ((prcs = running (__outserial)) != 0) {
    2630:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    2634:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    2638:	06010602 	streq	r0, [r1], -r2, lsl #12
		join (prcs, st);
    263c:	13030532 	movwne	r0, #13618	; 0x3532
		release;
    2640:	153b0205 	ldrne	r0, [fp, #-517]!	; 0xfffffdfb
	if (*m)
    2644:	01061105 	tsteq	r6, r5, lsl #2
		prcs = strlen (m) +1;
    2648:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    264c:	01010006 	tsteq	r1, r6
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2650:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    2654:	00000002 	andeq	r0, r0, r2
    2658:	018e0300 	orreq	r0, lr, r0, lsl #6
		umwait (st);
    265c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2660:	010e0514 	tsteq	lr, r4, lsl r5
		prcs =  m [1] + 3;
    2664:	20060905 	andcs	r0, r6, r5, lsl #18
	if (*m)
    2668:	7a032105 	bvc	caa84 <__ccfg+0xaaadc>
		strcpy (buf, m);
    266c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2670:	06120527 	ldreq	r0, [r2], -r7, lsr #10
	if (runstrand (__outserial, buf) == 0) {
    2674:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2678:	21060405 	tstcs	r6, r5, lsl #8
		ufree (buf);
    267c:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
    2680:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
		memcpy (buf, m, prcs);
    2684:	052b061f 	streq	r0, [fp, #-1567]!	; 0xfffff9e1
    2688:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    268c:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
}
    2690:	06010602 	streq	r0, [r1], -r2, lsl #12
    2694:	580b0534 	stmdapl	fp, {r2, r4, r5, r8, sl}
int ser_in (word st, char *buf, int len) {
    2698:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    269c:	03050108 	movweq	r0, #20744	; 0x5108
	if (len == 0)
    26a0:	061f052f 	ldreq	r0, [pc], -pc, lsr #10
	if (__inpline == NULL) {
    26a4:	20210501 	eorcs	r0, r1, r1, lsl #10
		if ((prcs = running (__inserial)) == 0) {
    26a8:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    26ac:	052f0603 	streq	r0, [pc, #-1539]!	; 20b1 <tcv_rnp+0x1>
			prcs = runthread (__inserial);
    26b0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    26b4:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
			if (prcs == 0) {
    26b8:	01052e0b 	tsteq	r5, fp, lsl #28
				npwait (st);
    26bc:	07021306 	streq	r1, [r2, -r6, lsl #6]
		release;
    26c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		join (prcs, st);
    26c4:	0205002a 	andeq	r0, r5, #42	; 0x2a
    26c8:	0000181c 	andeq	r1, r0, ip, lsl r8
	if (*__inpline == NULL) // bin cmd
    26cc:	0101a603 	tsteq	r1, r3, lsl #12
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    26d0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
	if (prcs >= len)
    26d4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
		prcs = len-1;
    26d8:	02210602 	eoreq	r0, r1, #2097152	; 0x200000
	memcpy (buf, __inpline, prcs);
    26dc:	01010002 	tsteq	r1, r2
    26e0:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    26e4:	00182402 	andseq	r2, r8, r2, lsl #8
	ufree (__inpline);
    26e8:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
	__inpline = NULL;
    26ec:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
	if (*buf) // if it's NULL, it's a bin cmd
    26f0:	0e030602 	cfmadd32eq	mvax0, mvfx0, mvfx3, mvfx2
		buf [prcs] = '\0';
    26f4:	10031320 	andne	r1, r3, r0, lsr #6
}
    26f8:	06060501 	streq	r0, [r6], -r1, lsl #10
		prcs = strlen (__inpline);
    26fc:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    2700:	03060205 	movweq	r0, #25093	; 0x6205
		return 0;
    2704:	06052e09 	streq	r2, [r5], -r9, lsl #28
    2708:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    270c:	3c060558 	cfstr32cc	mvfx0, [r6], {88}	; 0x58
int ser_outf (word st, const char *m, ...) {
    2710:	08060305 	stmdaeq	r6, {r0, r2, r8, r9}
    2714:	02052e27 	andeq	r2, r5, #624	; 0x270
	if ((prcs = running (__outserial)) != 0) {
    2718:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
    271c:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
		join (prcs, st);
    2720:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    2724:	2e590306 	cdpcs	3, 5, cr0, cr9, cr6, {0}
		release;
    2728:	01060905 	tsteq	r6, r5, lsl #18
	if ((buf = vform (NULL, m, ap)) == NULL) {
    272c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2730:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    2734:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		umwait (st);
    2738:	08053c07 	stmdaeq	r5, {r0, r1, r2, sl, fp, ip, sp}
    273c:	0605052e 	streq	r0, [r5], -lr, lsr #10
	if (runstrand (__outserial, buf) == 0) {
    2740:	03053e08 	movweq	r3, #24072	; 0x5e08
    2744:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
    2748:	2e0b0305 	cdpcs	3, 0, cr0, cr11, cr5, {0}
		ufree (buf);
    274c:	01061205 	tsteq	r6, r5, lsl #4
		npwait (st);
    2750:	21060505 	tstcs	r6, r5, lsl #10
}
    2754:	11060705 	tstne	r6, r5, lsl #14
    2758:	03060305 	movweq	r0, #25349	; 0x6305
    275c:	07056617 	smladeq	r5, r7, r6, r6
    2760:	06050106 	streq	r0, [r5], -r6, lsl #2
int ser_inf (word st, const char *fmt, ...) {
    2764:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2768:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
	if (fmt == NULL)
    276c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
	if (__inpline == NULL) {
    2770:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
		if ((prcs = running (__inserial)) == 0) {
    2774:	0d030601 	stceq	6, cr0, [r3, #-4]
    2778:	03020501 	movweq	r0, #9473	; 0x2501
			prcs = runthread (__inserial);
    277c:	01052e73 	tsteq	r5, r3, ror lr
    2780:	022e0d03 	eoreq	r0, lr, #3, 26	; 0xc0
			if (prcs == 0) {
    2784:	0101000a 	tsteq	r1, sl
				npwait (st);
    2788:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
		release;
    278c:	0018f002 	andseq	pc, r8, r2
		join (prcs, st);
    2790:	02d20300 	sbcseq	r0, r2, #0, 6
    2794:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	va_start (ap, fmt);
    2798:	10061b05 	andne	r1, r6, r5, lsl #22
	prcs = vscan (__inpline, fmt, ap);
    279c:	06220205 	strteq	r0, [r2], -r5, lsl #4
    27a0:	0005024b 	andeq	r0, r5, fp, asr #4
	ufree (__inpline);
    27a4:	2a050101 	bcs	142bb0 <__ccfg+0x122c08>
	__inpline = NULL;
    27a8:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
}
    27ac:	03000019 	movweq	r0, #25
    27b0:	050102d8 	streq	r0, [r1, #-728]	; 0xfffffd28
    27b4:	2a051602 	bcs	147fc4 <__ccfg+0x12801c>
		return 0;
    27b8:	0b050e06 	bleq	145fd8 <__ccfg+0x126030>
    27bc:	3e050524 	cfsh32cc	mvfx0, mvfx5, #20
    27c0:	4a060205 	bmi	182fdc <__ccfg+0x163034>
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27c4:	01060505 	tsteq	r6, r5, lsl #10
    27c8:	21060305 	tstcs	r6, r5, lsl #6
    27cc:	014c0205 	cmpeq	ip, r5, lsl #4
	RF_cmdFs.frequency = 
    27d0:	061f3d06 	ldreq	r3, [pc], -r6, lsl #26
}
    27d4:	05132020 	ldreq	r2, [r3, #-32]	; 0xffffffe0
    27d8:	02210601 	eoreq	r0, r1, #1048576	; 0x100000
    27dc:	01010006 	tsteq	r1, r6
    27e0:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
static int option (int opt, address val) {
    27e4:	00193802 	andseq	r3, r9, r2, lsl #16
    27e8:	02e50300 	rsceq	r0, r5, #0, 6
    27ec:	16020501 	strne	r0, [r2], -r1, lsl #10
    27f0:	21051413 	tstcs	r5, r3, lsl r4
    27f4:	01790306 	cmneq	r9, r6, lsl #6
    27f8:	06270205 	strteq	r0, [r7], -r5, lsl #4
    27fc:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    2800:	200a0521 	andcs	r0, sl, r1, lsr #10
    2804:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    2808:	054a060f 	strbeq	r0, [sl, #-1551]	; 0xfffff9f1
    280c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2810:	052f0604 	streq	r0, [pc, #-1540]!	; 2214 <tcvp_control+0x28>
    2814:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
			goto RVal;
    2818:	4b5a0605 	blmi	1684034 <__ccfg+0x166408c>
			_BIS (dstate, DSTATE_RXON);
    281c:	050d0205 	streq	r0, [sp, #-517]	; 0xfffffdfb
    2820:	09030601 	stmdbeq	r3, {r0, r9, sl}
	int ret = 0;
    2824:	0003022e 	andeq	r0, r3, lr, lsr #4
			p_trigger (drvprcs, qevent);
    2828:	2d050101 	stfcss	f0, [r5, #-4]
    282c:	00020500 	andeq	r0, r2, r0, lsl #10
    2830:	03000000 	movweq	r0, #0
    2834:	050102f7 	streq	r0, [r1, #-759]	; 0xfffffd09
    2838:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    283c:	03062d05 	movweq	r2, #27909	; 0x6d05
    2840:	05200179 	streq	r0, [r0, #-377]!	; 0xfffffe87
    2844:	30062702 	andcc	r2, r6, r2, lsl #14
    2848:	01060905 	tsteq	r6, r5, lsl #18
    284c:	2e060e05 	cdpcs	14, 0, cr0, cr6, cr5, {0}
}
    2850:	01061205 	tsteq	r6, r5, lsl #4
			_BIC (dstate, DSTATE_RXON);
    2854:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
    2858:	03053301 	movweq	r3, #21249	; 0x5301
			statid = (val == NULL) ? 0 : *val;
    285c:	06051c06 	streq	r1, [r5], -r6, lsl #24
    2860:	20050106 	andcs	r0, r5, r6, lsl #2
	int ret = 0;
    2864:	2106051f 	tstcs	r6, pc, lsl r5
			ret = (int) statid;
    2868:	21060405 	tstcs	r6, r5, lsl #8
	if (val != NULL)
    286c:	02641f05 	rsbeq	r1, r4, #5, 30
		*val = ret;
    2870:	01010001 	tsteq	r1, r1
			ret = rbuffl + 2;
    2874:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
    2878:	00196c02 	andseq	r6, r9, r2, lsl #24
			if (val != NULL) {
    287c:	03870300 	orreq	r0, r7, #0, 6
				memcpy (val, &rxstat,
    2880:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2884:	06260514 			; <UNDEFINED> instruction: 0x06260514
				memset (&rxstat, 0, 
    2888:	0205200e 	andeq	r2, r5, #14
    288c:	052e0624 	streq	r0, [lr, #-1572]!	; 0xfffff9dc
			if (val == NULL)
    2890:	05280609 	streq	r0, [r8, #-1545]!	; 0xfffff9f7
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2894:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    2898:	0606052e 	streq	r0, [r6], -lr, lsr #10
				utimer_set (bckf_timer, *val);
    289c:	06040501 	streq	r0, [r4], -r1, lsl #10
    28a0:	01053d30 	tsteq	r5, r0, lsr sp
    28a4:	02051706 	andeq	r1, r5, #1572864	; 0x180000
			for (ret = 0; ret < 8; ret++)
    28a8:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
				if (RF_cmdPropRadioDivSetup.txPower
    28ac:	01000402 	tsteq	r0, r2, lsl #8
					== patable [ret])
    28b0:	00210501 	eoreq	r0, r1, r1, lsl #10
				if (RF_cmdPropRadioDivSetup.txPower
    28b4:	19900205 	ldmibne	r0, {r0, r2, r9}
			for (ret = 0; ret < 8; ret++)
    28b8:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    28bc:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28c0:	06210516 			; <UNDEFINED> instruction: 0x06210516
    28c4:	0205200e 	andeq	r2, r5, #14
    28c8:	3e850624 	cdpcc	6, 8, cr0, cr5, cr4, {1}
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    28cc:	01061e05 	tsteq	r6, r5, lsl #28
    28d0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
			_BIS (dstate, DSTATE_IRST);
    28d4:	1305201e 	movwne	r2, #20510	; 0x501e
    28d8:	06020520 	streq	r0, [r2], -r0, lsr #10
    28dc:	06010522 	streq	r0, [r1], -r2, lsr #10
			ret = (int) channel;
    28e0:	00050259 	andeq	r0, r5, r9, asr r2
			goto RVal;
    28e4:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
				(*val > 7) ? 7 : *val;
    28e8:	00020500 	andeq	r0, r2, r0, lsl #10
    28ec:	03000000 	movweq	r0, #0
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    28f0:	050103a7 	streq	r0, [r1, #-935]	; 0xfffffc59
    28f4:	01051602 	tsteq	r5, r2, lsl #12
			plugch ();
    28f8:	04026706 	streq	r6, [r2], #-1798	; 0xfffff8fa
			_BIS (dstate, DSTATE_IRST);
    28fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2900:	02050018 	andeq	r0, r5, #24
			ret = (int) vrate;
    2904:	00000000 	andeq	r0, r0, r0
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2908:	0103b203 	tsteq	r3, r3, lsl #4
    290c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2910:	0e061805 	cdpeq	8, 0, cr1, cr6, cr5, {0}
    2914:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    2918:	05055a06 	streq	r5, [r5, #-2566]	; 0xfffff5fa
    291c:	03050106 	movweq	r0, #20742	; 0x5106
    2920:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2924:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2928:	12053506 	andne	r3, r5, #25165824	; 0x1800000
    292c:	01050106 	tsteq	r5, r6, lsl #2
    2930:	06030559 			; <UNDEFINED> instruction: 0x06030559
    2934:	3d207a03 	vstmdbcc	r0!, {s14-s16}
			syserror (EREQPAR, "cc13 op");
    2938:	01060605 	tsteq	r6, r5, lsl #12
    293c:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    2940:	08023d0b 	stmdaeq	r2, {r0, r1, r3, r8, sl, fp, ip, sp}
    2944:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2948:	0205001d 	andeq	r0, r5, #29
    294c:	00000000 	andeq	r0, r0, r0
    2950:	01049203 	tsteq	r4, r3, lsl #4
    2954:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2958:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
    295c:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    2960:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2964:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2968:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    296c:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2970:	022b0603 	eoreq	r0, fp, #3145728	; 0x300000
static void issue_cmd (lword cmd) {
    2974:	01010006 	tsteq	r1, r6
    2978:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    297c:	0019c802 	andseq	ip, r9, r2, lsl #16
    2980:	049e0300 	ldreq	r0, [lr], #768	; 0x300
    2984:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		if (res != 0x86)
    2988:	06050514 			; <UNDEFINED> instruction: 0x06050514
			syserror (EHARDWARE, "hang ic0");
    298c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2990:	060a052f 	streq	r0, [sl], -pc, lsr #10
		if (cnt-- == 0) {
    2994:	06020501 	streq	r0, [r2], -r1, lsl #10
			diag ("HUP %lx %lx", cmd, res);
    2998:	01052e3e 	tsteq	r5, lr, lsr lr
    299c:	03052506 	movweq	r2, #21766	; 0x5506
			syserror (EHARDWARE, "hang ic0");
    29a0:	06051c06 	streq	r1, [r5], -r6, lsl #24
		udelay (1);
    29a4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29a8:	06023b06 	streq	r3, [r2], -r6, lsl #22
}
    29ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    29b0:	0205001d 	andeq	r0, r5, #29
    29b4:	00000000 	andeq	r0, r0, r0
    29b8:	0104ac03 	tsteq	r4, r3, lsl #24
static void rx_de () {
    29bc:	13140205 	tstne	r4, #1342177280	; 0x50000000
	if ((dstate & DSTATE_RXAC) == 0)
    29c0:	1d051314 	stcne	3, cr1, [r5, #-80]	; 0xffffffb0
    29c4:	017a0306 	cmneq	sl, r6, lsl #6
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29c8:	05250405 	streq	r0, [r5, #-1029]!	; 0xfffffbfb
	_BIC (dstate, DSTATE_RXAC);
    29cc:	2e062102 	adfcss	f2, f6, f2
    29d0:	24060105 	strcs	r0, [r6], #-261	; 0xfffffefb
}
    29d4:	1d060305 	stcne	3, cr0, [r6, #-20]	; 0xffffffec
    29d8:	01060605 	tsteq	r6, r5, lsl #12
    29dc:	051f0205 	ldreq	r0, [pc, #-517]	; 27df <plugch+0x1b>
static void rf_off () {
    29e0:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
	if ((dstate & DSTATE_RFON) == 0)
    29e4:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    29e8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	IntDisable (INT_RFC_CPE_0);
    29ec:	04023a06 	streq	r3, [r2], #-2566	; 0xfffff5fa
    29f0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    29f4:	02050021 	andeq	r0, r5, #33	; 0x21
	RFCAdi3VcoLdoVoltageMode (false);
    29f8:	000019ec 	andeq	r1, r0, ip, ror #19
	RFCSynthPowerDown ();
    29fc:	0104b803 	tsteq	r4, r3, lsl #16
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a00:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2a04:	0e062105 	adfeqs	f2, f6, f5
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a08:	05240905 	streq	r0, [r4, #-2309]!	; 0xfffff6fb
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a0c:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a10:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a14:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
    2a18:	1e051d06 	cdpne	13, 0, cr1, cr5, cr6, {0}
    2a1c:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
	_BIC (dstate, DSTATE_RFON);
    2a20:	00020201 	andeq	r0, r2, r1, lsl #4
    2a24:	2b050101 	blcs	142e30 <__ccfg+0x122e88>
}
    2a28:	fa020500 	blx	83e30 <__ccfg+0x63e88>
    2a2c:	03000019 	movweq	r0, #25
    2a30:	050104c1 	streq	r0, [r1, #-1217]	; 0xfffffb3f
    2a34:	20051402 	andcs	r1, r5, r2, lsl #8
    2a38:	01080520 	tsteq	r8, r0, lsr #10
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a3c:	01061a05 	tsteq	r6, r5, lsl #20
    2a40:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
    2a44:	01052e08 	tsteq	r5, r8, lsl #28
		if (cmd->status == tstat)
    2a48:	0001022f 	andeq	r0, r1, pc, lsr #4
		if (timeout-- == 0) {
    2a4c:	33050101 	movwcc	r0, #20737	; 0x5101
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a50:	0a020500 	beq	83e58 <__ccfg+0x63eb0>
    2a54:	0300001a 	movweq	r0, #26
    2a58:	050104c6 	streq	r0, [r1, #-1222]	; 0xfffffb3a
			syserror (EHARDWARE, "rt2");
    2a5c:	08051402 	stmdaeq	r5, {r1, sl, ip}
    2a60:	3002052e 	andcc	r0, r2, lr, lsr #10
		udelay (1);
    2a64:	01060505 	tsteq	r6, r5, lsl #10
		if (cmd->status == tstat)
    2a68:	052f0105 	streq	r0, [pc, #-261]!	; 296b <option+0x187>
}
    2a6c:	0d051d11 	stceq	13, cr1, [r5, #-68]	; 0xffffffbc
    2a70:	0603052e 	streq	r0, [r3], -lr, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a74:	0608052f 	streq	r0, [r8], -pc, lsr #10
    2a78:	00030201 	andeq	r0, r3, r1, lsl #4
static void rf_on () {
    2a7c:	2b050101 	blcs	142e88 <__ccfg+0x122ee0>
    2a80:	00020500 	andeq	r0, r2, r0, lsl #10
	OSCHF_TurnOnXosc();
    2a84:	03000000 	movweq	r0, #0
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a88:	050104cd 	streq	r0, [r1, #-1229]	; 0xfffffb33
    2a8c:	08051402 	stmdaeq	r5, {r1, sl, ip}
    2a90:	4b02052e 	blmi	83f50 <__ccfg+0x63fa8>
    2a94:	01000202 	tsteq	r0, r2, lsl #4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a98:	00330501 	eorseq	r0, r3, r1, lsl #10
    2a9c:	00000205 	andeq	r0, r0, r5, lsl #4
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2aa0:	d3030000 	movwle	r0, #12288	; 0x3000
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2aa4:	02050104 	andeq	r0, r5, #4, 2
	issue_cmd (
    2aa8:	00030214 	andeq	r0, r3, r4, lsl r2
    2aac:	37050101 	strcc	r0, [r5, -r1, lsl #2]
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ab0:	26020500 	strcs	r0, [r2], -r0, lsl #10
    2ab4:	0300001a 	movweq	r0, #26
    2ab8:	050104d8 	streq	r0, [r1, #-1240]	; 0xfffffb28
   pPatchTab[80] = 0;
    2abc:	08051402 	stmdaeq	r5, {r1, sl, ip}
   } while (--nIterations);
    2ac0:	0601052e 	streq	r0, [r1], -lr, lsr #10
   pPatchTab[53] = 2;
    2ac4:	06030530 			; <UNDEFINED> instruction: 0x06030530
    2ac8:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
   pPatchTab[55] = 3;
    2acc:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
   pPatchTab[110] = 4;
    2ad0:	01000302 	tsteq	r0, r2, lsl #6
   pPatchTab[107] = 5;
    2ad4:	002e0501 	eoreq	r0, lr, r1, lsl #10
   pPatchTab[65] = 6;
    2ad8:	1a3a0205 	bne	e832f4 <__ccfg+0xe6334c>
    2adc:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
   pPatchTab[57] = 1;
    2ae0:	02050104 	andeq	r0, r5, #4, 2
   pIrqPatch[1] = _IRQ_PATCH_0;
    2ae4:	20080514 	andcs	r0, r8, r4, lsl r5
   const uint32_t *pS = patchGenfskRfe;
    2ae8:	30060105 	andcc	r0, r6, r5, lsl #2
      t2 = *pS++;
    2aec:	1f060305 	svcne	0x00060305
      t4 = *pS++;
    2af0:	01060b05 	tsteq	r6, r5, lsl #22
      t6 = *pS++;
    2af4:	01000302 	tsteq	r0, r2, lsl #6
      t8 = *pS++;
    2af8:	002b0501 	eoreq	r0, fp, r1, lsl #10
      *pD++ = t1;
    2afc:	1a480205 	bne	1203318 <__ccfg+0x11e3370>
      *pD++ = t2;
    2b00:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
      *pD++ = t3;
    2b04:	02050104 	andeq	r0, r5, #4, 2
      *pD++ = t5;
    2b08:	062b0514 			; <UNDEFINED> instruction: 0x062b0514
      *pD++ = t7;
    2b0c:	22050510 	andcs	r0, r5, #16, 10	; 0x4000000
   } while (--nIterations);
    2b10:	21060305 	tstcs	r6, r5, lsl #6
    2b14:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
      *pD++ = t8;
    2b18:	0c052d06 	stceq	13, cr2, [r5], {6}
   } while (--nIterations);
    2b1c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b20:	06030520 	streq	r0, [r3], -r0, lsr #10
   *pD++ = t2;
    2b24:	3e02052f 	cfsh32cc	mvfx0, mvfx2, #31
   *pD++ = t3;
    2b28:	01060e05 	tsteq	r6, r5, lsl #28
   *pD++ = t4;
    2b2c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
   *pD++ = t5;
    2b30:	01010005 	tsteq	r1, r5
    2b34:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
	RFCAdi3VcoLdoVoltageMode (true);
    2b38:	001a6c02 	andseq	r6, sl, r2, lsl #24
    2b3c:	04f80300 	ldrbteq	r0, [r8], #768	; 0x300
       	RFCRfTrimSet (&rfTrim);
    2b40:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b44:	06450514 			; <UNDEFINED> instruction: 0x06450514
    2b48:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b4c:	2022055c 	eorcs	r0, r2, ip, asr r5
    2b50:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
	issue_cmd ((lword)&cmd_srt);
    2b54:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b58:	05054c02 	streq	r4, [r5, #-3074]	; 0xfffff3fe
	issue_cmd ((lword)&RF_cmdFs);
    2b5c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b60:	0f054006 	svceq	0x00054006
    2b64:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2b68:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
	IntEnable (INT_RFC_CPE_0);
    2b6c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	_BIC (dstate, DSTATE_IRST);
    2b70:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    2b74:	03050106 	movweq	r0, #20742	; 0x5106
    2b78:	06054f06 	streq	r4, [r5], -r6, lsl #30
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b7c:	03050106 	movweq	r0, #20742	; 0x5106
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b80:	05593006 	ldrbeq	r3, [r9, #-6]
	IntEnable (INT_RFC_CPE_0);
    2b84:	010d0304 	tsteq	sp, r4, lsl #6
    2b88:	76030205 	strvc	r0, [r3], -r5, lsl #4
}
    2b8c:	0605052e 	streq	r0, [r5], -lr, lsr #10
	IntEnable (INT_RFC_CPE_0);
    2b90:	06030501 	streq	r0, [r3], -r1, lsl #10
    2b94:	06060535 			; <UNDEFINED> instruction: 0x06060535
    2b98:	06040501 	streq	r0, [r4], -r1, lsl #10
    2b9c:	0b05594b 	bleq	1590d0 <__ccfg+0x139128>
    2ba0:	03050106 	movweq	r0, #20742	; 0x5106
    2ba4:	0a056906 	beq	15cfc4 <__ccfg+0x13d01c>
    2ba8:	03050106 	movweq	r0, #20742	; 0x5106
    2bac:	0a055906 	beq	158fcc <__ccfg+0x139024>
    2bb0:	01610306 	cmneq	r1, r6, lsl #6
    2bb4:	29030105 	stmdbcs	r3, {r0, r2, r8}
    2bb8:	06020520 	streq	r0, [r2], -r0, lsr #10
    2bbc:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    2bc0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2bc4:	752f0603 	strvc	r0, [pc, #-1539]!	; 25c9 <ready+0x29>
    2bc8:	01000502 	tsteq	r0, r2, lsl #10
    2bcc:	001a0501 	andseq	r0, sl, r1, lsl #10
    2bd0:	1b080205 	blne	2033ec <__ccfg+0x1e3444>
    2bd4:	ef030000 	svc	0x00030000
    2bd8:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    2bdc:	01130317 	tsteq	r3, r7, lsl r3
    2be0:	01061505 	tsteq	r6, r5, lsl #10
    2be4:	68031a05 	stmdavs	r3, {r0, r2, r9, fp, ip}
    2be8:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    2bec:	0c052018 	stceq	0, cr2, [r5], {24}
    2bf0:	20050558 	andcs	r0, r5, r8, asr r5
static void rx_int_enable () {
    2bf4:	31060305 	tstcc	r6, r5, lsl #6
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2bf8:	05520205 	ldrbeq	r0, [r2, #-517]	; 0xfffffdfb
    2bfc:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    2c00:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
    2c04:	05150617 	ldreq	r0, [r5, #-1559]	; 0xfffff9e9
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c08:	16052b1d 			; <UNDEFINED> instruction: 0x16052b1d
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c0c:	06020520 	streq	r0, [r2], -r0, lsr #10
    2c10:	06170521 	ldreq	r0, [r7], -r1, lsr #10
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c14:	06020514 			; <UNDEFINED> instruction: 0x06020514
    2c18:	061a0531 			; <UNDEFINED> instruction: 0x061a0531
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c1c:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
    2c20:	2c030105 	stfcss	f0, [r3], {5}
    2c24:	000d022e 	andeq	r0, sp, lr, lsr #4
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c28:	1c050101 	stfnes	f0, [r5], {1}
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c2c:	58020500 	stmdapl	r2, {r8, sl}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c30:	0300001b 	movweq	r0, #27
		if (db->status == DATA_ENTRY_FINISHED) {
    2c34:	050106fb 	streq	r0, [r1, #-1787]	; 0xfffff905
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c38:	010c0302 	tsteq	ip, r2, lsl #6
    2c3c:	03061c05 	movweq	r1, #27653	; 0x6c05
			nr++;
    2c40:	05050174 	streq	r0, [r5, #-372]	; 0xfffffe8c
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c44:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    2c48:	05250602 	streq	r0, [r5, #-1538]!	; 0xfffff9fe
    2c4c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2c50:	03052e05 	movweq	r2, #24069	; 0x5e05
				__dp [pl + 1] = __dp [pl] - 128;
    2c54:	054c2f06 	strbeq	r2, [ip, #-3846]	; 0xfffff0fa
				pl = __dp [1] + 2;
    2c58:	05160611 	ldreq	r0, [r6, #-1553]	; 0xfffff9ef
				__dp [pl + 1] = __dp [pl] - 128;
    2c5c:	11051c0f 	tstne	r5, pc, lsl #24
    2c60:	1c0f0532 	cfstr32ne	mvfx0, [pc], {50}	; 0x32
				__dp [pl] = 0;
    2c64:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c68:	01061105 	tsteq	r6, r5, lsl #2
    2c6c:	30060205 	andcc	r0, r6, r5, lsl #4
    2c70:	06150530 			; <UNDEFINED> instruction: 0x06150530
			db->status = DATA_ENTRY_PENDING;
    2c74:	20050501 	andcs	r0, r5, r1, lsl #10
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c78:	2f060305 	svccs	0x00060305
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c7c:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
				diag ("BAD RX");
    2c80:	42010501 	andmi	r0, r1, #4194304	; 0x400000
    2c84:	01000802 	tsteq	r0, r2, lsl #16
	if (nr) {
    2c88:	00170501 	andseq	r0, r7, r1, lsl #10
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c8c:	1ba00205 	blne	fe8034a8 <_estack+0xde7fe4a8>
}
    2c90:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c94:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2c98:	17051416 	smladne	r5, r6, r4, r1
    2c9c:	017a0306 	cmneq	sl, r6, lsl #6
}
    2ca0:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    2ca4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2ca8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2cac:	02052007 	andeq	r2, r5, #7
    2cb0:	05132206 	ldreq	r2, [r3, #-518]	; 0xfffffdfa
    2cb4:	05110604 	ldreq	r0, [r1, #-1540]	; 0xfffff9fc
    2cb8:	2e062102 	adfcss	f2, f6, f2
    2cbc:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    2cc0:	4a720303 	bmi	1c838d4 <__ccfg+0x1c6392c>
thread (cc1350_driver)
    2cc4:	01060605 	tsteq	r6, r5, lsl #12
    2cc8:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    2ccc:	01060705 	tsteq	r6, r5, lsl #14
    2cd0:	21060505 	tstcs	r6, r5, lsl #10
    2cd4:	01060b05 	tsteq	r6, r5, lsl #22
		if (dstate & DSTATE_IRST) {
    2cd8:	23060405 	movwcs	r0, #25605	; 0x6405
    2cdc:	0a052f3d 	beq	14e9d8 <__ccfg+0x12ea30>
    2ce0:	07050106 	streq	r0, [r5, -r6, lsl #2]
			rf_off ();
    2ce4:	06050520 	streq	r0, [r5], -r0, lsr #10
			_BIC (dstate,
    2ce8:	0d052a3d 	vstreq	s4, [r5, #-244]	; 0xffffff0c
    2cec:	01050106 	tsteq	r5, r6, lsl #2
		if (dstate & DSTATE_RXAC) {
    2cf0:	02580a03 	subseq	r0, r8, #12288	; 0x3000
    2cf4:	01010007 	tsteq	r1, r7
			if ((dstate & DSTATE_RXON) == 0)
    2cf8:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
				rx_de ();
    2cfc:	00000002 	andeq	r0, r0, r2
		if (paylen == 0) {
    2d00:	03f40300 	mvnseq	r0, #0, 6
    2d04:	16020501 	strne	r0, [r2], -r1, lsl #10
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d08:	13131413 	tstne	r3, #318767104	; 0x13000000
    2d0c:	03061c05 	movweq	r1, #27653	; 0x6c05
    2d10:	04050177 	streq	r0, [r5], #-375	; 0xfffffe89
    2d14:	1f060536 	svcne	0x00060536
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d18:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
    2d1c:	2077031c 	rsbscs	r0, r7, ip, lsl r3
    2d20:	10030a05 	andne	r0, r3, r5, lsl #20
    2d24:	03090520 	movweq	r0, #38176	; 0x9520
    2d28:	12052e79 	andne	r2, r5, #1936	; 0x790
    2d2c:	02052006 	andeq	r2, r5, #6
    2d30:	03060106 	movweq	r0, #24838	; 0x6106
    2d34:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
		} else if (dstate & DSTATE_RXON) {
    2d38:	03050106 	movweq	r0, #20742	; 0x5106
	if (dstate & DSTATE_RFON)
    2d3c:	6f032106 	svcvs	0x00032106
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d40:	0606052e 	streq	r0, [r6], -lr, lsr #10
		re->status = DATA_ENTRY_PENDING;
    2d44:	06040501 	streq	r0, [r4], -r1, lsl #10
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d48:	07051359 	smlsdeq	r5, r9, r3, r1
	issue_cmd ((lword)&RF_cmdPropRx);
    2d4c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	_BIS (dstate, DSTATE_RXAC);
    2d50:	0b052106 	bleq	14b170 <__ccfg+0x12b1c8>
    2d54:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2d58:	07053106 	streq	r3, [r5, -r6, lsl #2]
    2d5c:	09050106 	stmdbeq	r5, {r1, r2, r8}
	if (dstate & DSTATE_RXAC)
    2d60:	0604052f 	streq	r0, [r4], -pc, lsr #10
    2d64:	052f2f3d 	streq	r2, [pc, #-3901]!	; 1e2f <lrnd+0xf>
				if (statid != 0xffff)
    2d68:	0d054505 	cfstr32eq	mvfx4, [r5, #-20]	; 0xffffffec
    2d6c:	01050106 	tsteq	r5, r6, lsl #2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d70:	023c0d03 	eorseq	r0, ip, #3, 26	; 0xc0
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d74:	01010007 	tsteq	r1, r7
		if (paylen == 0) {
    2d78:	05002005 	streq	r2, [r0, #-5]
			wait (qevent, DR_LOOP);
    2d7c:	001bf002 	andseq	pc, fp, r2
    2d80:	07a20300 	streq	r0, [r2, r0, lsl #6]!
			if (dstate & DSTATE_RXAC) {
    2d84:	1a020501 	bne	84190 <__ccfg+0x641e8>
    2d88:	05051416 	streq	r1, [r5, #-1046]	; 0xfffffbea
				rx_int_enable ();
    2d8c:	03050106 	movweq	r0, #20742	; 0x5106
			release;
    2d90:	09052506 	stmdbeq	r5, {r1, r2, r8, sl, sp}
			} else if (dstate & DSTATE_RFON) {
    2d94:	20050f06 	andcs	r0, r5, r6, lsl #30
				delay (offdelay, DR_GOOF);
    2d98:	052e7003 	streq	r7, [lr, #-3]!
    2d9c:	2023030d 	eorcs	r0, r3, sp, lsl #6
    2da0:	70031a05 	andvc	r1, r3, r5, lsl #20
		if (bckf_timer) {
    2da4:	030d0520 	movweq	r0, #54560	; 0xd520
			wait (qevent, DR_LOOP);
    2da8:	06052e10 			; <UNDEFINED> instruction: 0x06052e10
    2dac:	03090523 	movweq	r0, #38179	; 0x9523
    2db0:	0205206d 	andeq	r2, r5, #109	; 0x6d
			delay (bckf_timer, DR_LOOP);
    2db4:	2e0f0306 	cdpcs	3, 0, cr0, cr15, cr6, {0}
    2db8:	011f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
			if (dstate & DSTATE_RXAC)
    2dbc:	01060205 	tsteq	r6, r5, lsl #4
    2dc0:	20090306 	andcs	r0, r9, r6, lsl #6
	if (dstate & DSTATE_RFON)
    2dc4:	19030305 	stmdbne	r3, {r0, r2, r8, r9}
    2dc8:	06160501 	ldreq	r0, [r6], -r1, lsl #10
		rx_de ();
    2dcc:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
		RF_cmdPropTx . status = 0;
    2dd0:	2f060405 	svccs	0x00060405
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2dd4:	01061b05 	tsteq	r6, r5, lsl #22
    2dd8:	03060305 	movweq	r0, #25349	; 0x6305
    2ddc:	12052e0d 	andne	r2, r5, #13, 28	; 0xd0
		issue_cmd ((lword)&cmd_cs);
    2de0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		if (dstate & DSTATE_IRST)
    2de4:	09054006 	stmdbeq	r5, {r1, r2, lr}
    2de8:	03050106 	movweq	r0, #20742	; 0x5106
    2dec:	204f0306 	subcs	r0, pc, r6, lsl #6
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2df0:	01060605 	tsteq	r6, r5, lsl #12
    2df4:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
			delay (1, DR_XMIT);
    2df8:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2dfc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2e00:	7a03062e 	bvc	c46c0 <__ccfg+0xa4718>
    2e04:	0609054a 	streq	r0, [r9], -sl, asr #10
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e08:	06020513 			; <UNDEFINED> instruction: 0x06020513
    2e0c:	14030544 	strne	r0, [r3], #-1348	; 0xfffffabc
				RF_cmdPropTx . status = 0;
    2e10:	060e0522 	streq	r0, [lr], -r2, lsr #10
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e14:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
				issue_cmd ((lword)&RF_cmdPropTx);
    2e18:	30060405 	andcc	r0, r6, r5, lsl #8
				proceed (DR_XMIT);
    2e1c:	01061305 	tsteq	r6, r5, lsl #6
    2e20:	2f060405 	svccs	0x00060405
			txtries++;
    2e24:	01061705 	tsteq	r6, r5, lsl #14
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e28:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2e2c:	052f0604 	streq	r0, [pc, #-1540]!	; 2830 <option+0x4c>
    2e30:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e34:	04052010 	streq	r2, [r5], #-16
		goto DR_LOOP__;
    2e38:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e3c:	1503052e 	strne	r0, [r3, #-1326]	; 0xfffffad2
		paylen = 0;
    2e40:	01061a05 	tsteq	r6, r5, lsl #20
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e44:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
		txtries = 0;
    2e48:	03051e1a 	movweq	r1, #24090	; 0x5e1a
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e4c:	15052206 	strne	r2, [r5, #-518]	; 0xfffffdfa
    2e50:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    2e54:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2e58:	060e053d 			; <UNDEFINED> instruction: 0x060e053d
    2e5c:	25120501 	ldrcs	r0, [r2, #-1281]	; 0xfffffaff
		    tcvphy_top (physid) == NULL)
    2e60:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
    2e64:	06052512 			; <UNDEFINED> instruction: 0x06052512
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e68:	06040529 	streq	r0, [r4], -r9, lsr #10
    2e6c:	06130522 	ldreq	r0, [r3], -r2, lsr #10
			rf_off ();
    2e70:	06030501 	streq	r0, [r3], -r1, lsl #10
endthread
    2e74:	06010531 			; <UNDEFINED> instruction: 0x06010531
    2e78:	02011b03 	andeq	r1, r1, #3072	; 0xc00
    2e7c:	0101000e 	tsteq	r1, lr
    2e80:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    2e84:	001c9802 	andseq	r9, ip, r2, lsl #16
    2e88:	02ab0300 	adceq	r0, fp, #0, 6
    2e8c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2e90:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    2e94:	1905200e 	stmdbne	r5, {r1, r2, r3, sp}
    2e98:	1c2c0524 	cfstr32ne	mvfx0, [ip], #-144	; 0xffffff70
    2e9c:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
    2ea0:	02053c05 	andeq	r3, r5, #1280	; 0x500
    2ea4:	0a052306 	beq	14bac4 <__ccfg+0x12bb1c>
    2ea8:	010b0306 	tsteq	fp, r6, lsl #6
    2eac:	77030c05 	strvc	r0, [r3, -r5, lsl #24]
    2eb0:	260a0520 	strcs	r0, [sl], -r0, lsr #10
void RFCCPE0IntHandler (void) {
    2eb4:	20760323 	rsbscs	r0, r6, r3, lsr #6
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eb8:	2f060205 	svccs	0x00060205
		_BIS (dstate, DSTATE_IRST);
    2ebc:	14030518 	strne	r0, [r3], #-1304	; 0xfffffae8
    2ec0:	06060513 			; <UNDEFINED> instruction: 0x06060513
    2ec4:	06040501 	streq	r0, [r4], -r1, lsl #10
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2ec8:	060a0521 	streq	r0, [sl], -r1, lsr #10
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2ecc:	03010501 	movweq	r0, #5377	; 0x1501
    2ed0:	0b05200f 	bleq	14af14 <__ccfg+0x12af6c>
	p_trigger (drvprcs, qevent);
    2ed4:	20730306 	rsbscs	r0, r3, r6, lsl #6
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ed8:	20060c05 	andcs	r0, r6, r5, lsl #24
    2edc:	06200405 	strteq	r0, [r0], -r5, lsl #8
    2ee0:	060c052f 	streq	r0, [ip], -pc, lsr #10
    2ee4:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ee8:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    2eec:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    2ef0:	01010004 	tsteq	r1, r4
    2ef4:	05002005 	streq	r2, [r0, #-5]
    2ef8:	001ccc02 	andseq	ip, ip, r2, lsl #24
    2efc:	08810300 	stmeq	r1, {r8, r9}
	RISE_N_SHINE;
    2f00:	03020501 	movweq	r0, #9473	; 0x2501
    2f04:	15050109 	strne	r0, [r5, #-265]	; 0xfffffef7
    2f08:	20050106 	andcs	r0, r5, r6, lsl #2
}
    2f0c:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2f10:	20090315 	andcs	r0, r9, r5, lsl r3
    2f14:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    2f18:	03051d05 	movweq	r1, #23813	; 0x5d05
    2f1c:	1a052106 	bne	14b33c <__ccfg+0x12b394>
    2f20:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
void phys_cc1350 (int phy, int mbs) {
    2f24:	04023e06 	streq	r3, [r2], #-3590	; 0xfffff1fa
	if (rbuffl != 0)
    2f28:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2f2c:	02050021 	andeq	r0, r5, #33	; 0x21
		syserror (ETOOMANY, "cc13");
    2f30:	00000000 	andeq	r0, r0, r0
		syserror (EREQPAR, "cc13 mb");
    2f34:	01089403 	tsteq	r8, r3, lsl #8
	if (mbs == 0)
    2f38:	09030205 	stmdbeq	r3, {r0, r2, r9}
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f3c:	06210501 	strteq	r0, [r1], -r1, lsl #10
		syserror (EREQPAR, "cc13 mb");
    2f40:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    2f44:	3c090305 	stccc	3, cr0, [r9], {5}
	i = 0;
    2f48:	21060305 	tstcs	r6, r5, lsl #6
	rbuffl = (byte) mbs;
    2f4c:	01060805 	tsteq	r6, r5, lsl #16
		db->config.type = 0;	// General (data in structure)
    2f50:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
	rbuffl = (byte) mbs;
    2f54:	12052008 	andne	r2, r5, #8
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f58:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    2f5c:	4c060305 	stcmi	3, cr0, [r6], {5}
		if (db == NULL)
    2f60:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
			syserror (EMALLOC, "cc13");
    2f64:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2f68:	06025a01 	streq	r5, [r2], -r1, lsl #20
    2f6c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		db->status = DATA_ENTRY_PENDING;
    2f70:	02050020 	andeq	r0, r5, #32
		if (i)
    2f74:	00000000 	andeq	r0, r0, r0
			da->pNextEntry = (byte*) db;
    2f78:	0108a703 	tsteq	r8, r3, lsl #14
		db->length = rbuffl + 2;
    2f7c:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2f80:	05141301 	ldreq	r1, [r4, #-769]	; 0xfffffcff
		db->config.type = 0;	// General (data in structure)
    2f84:	74030620 	strvc	r0, [r3], #-1568	; 0xfffff9e0
		db->length = rbuffl + 2;
    2f88:	031d0501 	tsteq	sp, #4194304	; 0x400000
	db->pNextEntry = (byte*) re;
    2f8c:	1205200c 	andne	r2, r5, #12
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f90:	200b052e 	andcs	r0, fp, lr, lsr #10
    2f94:	20062f05 	andcs	r2, r6, r5, lsl #30
	if (rbuffs == NULL)
    2f98:	01060205 	tsteq	r6, r5, lsl #4
	rbuffs->pCurrEntry = (byte*) re;
    2f9c:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
	rbuffs->pLastEntry = NULL;
    2fa0:	03052e06 	movweq	r2, #24070	; 0x5e06
    2fa4:	07052106 	streq	r2, [r5, -r6, lsl #2]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fa8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fac:	09054c06 	stmdbeq	r5, {r1, r2, sl, fp, lr}
    2fb0:	01050106 	tsteq	r5, r6, lsl #2
    2fb4:	0603053e 			; <UNDEFINED> instruction: 0x0603053e
	rbuffl -= 2;
    2fb8:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fbc:	052d0623 	streq	r0, [sp, #-1571]!	; 0xfffff9dd
	rbuffl -= 2;
    2fc0:	054a0606 	strbeq	r0, [sl, #-1542]	; 0xfffff9fa
	physid = phy;
    2fc4:	0201060e 	andeq	r0, r1, #14680064	; 0xe00000
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fc8:	01010004 	tsteq	r1, r4
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fcc:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fd0:	001ce402 	andseq	lr, ip, r2, lsl #8
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fd4:	09810300 	stmibeq	r1, {r8, r9}
    2fd8:	41020501 	tstmi	r2, r1, lsl #10
	utimer_add (&bckf_timer);
    2fdc:	13131313 	tstne	r3, #1275068416	; 0x4c000000
	drvprcs = runthread (cc1350_driver);
    2fe0:	06230514 			; <UNDEFINED> instruction: 0x06230514
    2fe4:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    2fe8:	3c0c0302 	stccc	3, cr0, [ip], {2}
	if (drvprcs == 0)
    2fec:	0121061f 			; <UNDEFINED> instruction: 0x0121061f
		syserror (ERESOURCE, "cc13");
    2ff0:	06080501 	streq	r0, [r8], -r1, lsl #10
    2ff4:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2ff8:	20580302 	subscs	r0, r8, r2, lsl #6
    2ffc:	23031c05 	movwcs	r1, #15365	; 0x3c05
    3000:	03020520 	movweq	r0, #9504	; 0x2520
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3004:	2e062e5d 	mcrcs	14, 0, r2, cr6, cr13, {2}
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3008:	01080514 	tsteq	r8, r4, lsl r5
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    300c:	01060905 	tsteq	r6, r5, lsl #18
    3010:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    3014:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    3018:	3d3d2000 	ldccc	0, cr2, [sp, #-0]
    301c:	0d050204 	sfmeq	f0, 4, [r5, #-16]
    3020:	7bcf0306 	blvc	ff3c3c40 <_estack+0xdf3bec40>
    3024:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3028:	b103060f 	tstlt	r3, pc, lsl #12
    302c:	02052004 	andeq	r2, r5, #4
	plugch ();
    3030:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3034:	7bca0324 	blvc	ff283ccc <_estack+0xdf27eccc>
    3038:	17050501 	strne	r0, [r5, -r1, lsl #10]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    303c:	01060d05 	tsteq	r6, r5, lsl #26
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3040:	02050104 	andeq	r0, r5, #4, 2
    3044:	2004b103 	andcs	fp, r4, r3, lsl #2
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3048:	01012f06 	tsteq	r1, r6, lsl #30
}
    304c:	06010558 			; <UNDEFINED> instruction: 0x06010558
    3050:	06030513 			; <UNDEFINED> instruction: 0x06030513
    3054:	587fb603 	ldmdapl	pc!, {r0, r1, r9, sl, ip, sp, pc}^	; <UNPREDICTABLE>
    3058:	01060605 	tsteq	r6, r5, lsl #12
    305c:	4b060405 	blmi	184078 <__ccfg+0x1640d0>
    3060:	06070513 			; <UNDEFINED> instruction: 0x06070513
    3064:	06050520 	streq	r0, [r5], -r0, lsr #10
    3068:	0513134b 	ldreq	r1, [r3, #-843]	; 0xfffffcb5
    306c:	2d010609 	stccs	6, cr0, [r1, #-36]	; 0xffffffdc
    3070:	05280c05 	streq	r0, [r8, #-3077]!	; 0xfffff3fb
    3074:	20770308 	rsbscs	r0, r7, r8, lsl #6
    3078:	32060505 	andcc	r0, r6, #20971520	; 0x1400000
    307c:	06080515 			; <UNDEFINED> instruction: 0x06080515
    3080:	0604050f 	streq	r0, [r4], -pc, lsl #10
    3084:	03050525 	movweq	r0, #21797	; 0x5525
    3088:	053d7431 	ldreq	r7, [sp, #-1073]!	; 0xfffffbcf
    308c:	4e030604 	cfmadd32mi	mvax0, mvfx0, mvfx3, mvfx4
    3090:	411d054a 	tstmi	sp, sl, asr #10
    3094:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    3098:	01060805 	tsteq	r6, r5, lsl #16
    309c:	21060605 	tstcs	r6, r5, lsl #12
    30a0:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    30a4:	3c180511 	cfldr32cc	mvfx0, [r8], {17}
    30a8:	052f0605 	streq	r0, [pc, #-1541]!	; 2aab <rf_on.part.0+0x37>
    30ac:	0546060b 	strbeq	r0, [r6, #-1547]	; 0xfffff9f5
    30b0:	2e310304 	cdpcs	3, 3, cr0, cr1, cr4, {0}
    30b4:	01060805 	tsteq	r6, r5, lsl #16
    30b8:	05206a03 	streq	r6, [r0, #-2563]!	; 0xfffff5fd
    30bc:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    30c0:	1505132e 	strne	r1, [r5, #-814]	; 0xfffffcd2
    30c4:	0e050106 	adfeqs	f0, f5, f6
    30c8:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    30cc:	2f060605 	svccs	0x00060605
    30d0:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    30d4:	06070501 	streq	r0, [r7], -r1, lsl #10
    30d8:	060b0521 	streq	r0, [fp], -r1, lsr #10
    30dc:	06060501 	streq	r0, [r6], -r1, lsl #10
    30e0:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    30e4:	06050501 	streq	r0, [r5], -r1, lsl #10
    30e8:	061c0523 	ldreq	r0, [ip], -r3, lsr #10
    30ec:	06050501 	streq	r0, [r5], -r1, lsl #10
    30f0:	14060559 	strne	r0, [r6], #-1369	; 0xfffffaa7
    30f4:	01061605 	tsteq	r6, r5, lsl #12
    30f8:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    30fc:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    3100:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3104:	0605200c 	streq	r2, [r5], -ip
    3108:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    310c:	0b050106 	bleq	14352c <__ccfg+0x123584>
    3110:	08052a06 	stmdaeq	r5, {r1, r2, r9, fp, sp}
    3114:	1c051406 	cfstrsne	mvf1, [r5], {6}
    3118:	0605051d 			; <UNDEFINED> instruction: 0x0605051d
    311c:	13060535 	movwne	r0, #25909	; 0x6535
    3120:	06090559 			; <UNDEFINED> instruction: 0x06090559
    3124:	1f080514 	svcne	0x00080514
    3128:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    312c:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    3130:	01060905 	tsteq	r6, r5, lsl #18
    3134:	21060605 	tstcs	r6, r5, lsl #12
strand (__outserial, const char*)
    3138:	01061605 	tsteq	r6, r5, lsl #12
    313c:	222c0805 	eorcs	r0, ip, #327680	; 0x50000
    3140:	1b060b05 	blne	185d5c <__ccfg+0x165db4>
    3144:	13060605 	movwne	r0, #26117	; 0x6605
endstrand
    3148:	03060505 	movweq	r0, #25861	; 0x6505
    314c:	08052009 	stmdaeq	r5, {r0, r3, sp}
	ptr = data;
    3150:	06050106 	streq	r0, [r5], -r6, lsl #2
    3154:	1c052f06 	stcne	15, cr2, [r5], {6}
	if (*ptr)
    3158:	016e0306 	cmneq	lr, r6, lsl #6
		len = strlen (ptr);
    315c:	12030a05 	andne	r0, r3, #20480	; 0x5000
    3160:	0605052e 	streq	r0, [r5], -lr, lsr #10
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3164:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    3168:	20170306 	andscs	r0, r7, r6, lsl #6
    316c:	0607052f 	streq	r0, [r7], -pc, lsr #10
    3170:	060b0501 	streq	r0, [fp], -r1, lsl #10
    3174:	060c051e 			; <UNDEFINED> instruction: 0x060c051e
	len -= quant;
    3178:	200b0501 	andcs	r0, fp, r1, lsl #10
    317c:	03060405 	movweq	r0, #25605	; 0x6405
    3180:	0b023c0c 	bleq	921b8 <__ccfg+0x72210>
	if (len == 0) {
    3184:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		ufree (data);
    3188:	0205000f 	andeq	r0, r5, #15
		finish;
    318c:	00001e20 	andeq	r1, r0, r0, lsr #28
    3190:	010aae03 	tsteq	sl, r3, lsl #28
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3194:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    3198:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    319c:	25052e18 	strcs	r2, [r5, #-3608]	; 0xfffff1e8
    31a0:	20180520 	andscs	r0, r8, r0, lsr #10
    31a4:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
strand (__inserial, address)
    31a8:	02052e0c 	andeq	r2, r5, #12, 28	; 0xc0
    31ac:	14062106 	strne	r2, [r6], #-262	; 0xfffffefa
    31b0:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    31b4:	01010008 	tsteq	r1, r8
    31b8:	00000cbb 			; <UNDEFINED> instruction: 0x00000cbb
	if (__inpline != NULL)
    31bc:	01a50003 			; <UNDEFINED> instruction: 0x01a50003
    31c0:	01020000 	mrseq	r0, (UNDEF: 2)
		finish;
    31c4:	000d0efb 	strdeq	r0, [sp], -fp
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31c8:	01010101 	tsteq	r1, r1, lsl #2
    31cc:	01000000 	mrseq	r0, (UNDEF: 0)
    31d0:	2f010000 	svccs	0x00010000
    31d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		umwait (IM_INIT);
    31d8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
		release;
    31dc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	savedata (data);
    31e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	len = MAX_LINE_LENGTH;
    31e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
	io (IM_READ, __cport, READ, ptr, 1);
    31e8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    31ec:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    31f0:	4349502f 	movtmi	r5, #36911	; 0x902f
    31f4:	502f534f 	eorpl	r5, pc, pc, asr #6
	if (ptr == (char*) data) { // new line
    31f8:	534f6369 	movtpl	r6, #62313	; 0xf369
    31fc:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		if (*ptr == '\0') { // bin cmd
    3200:	562f7362 	strtpl	r7, [pc], -r2, ror #6
			proceed (IM_BIN);
    3204:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
    3208:	73752f00 	cmnvc	r5, #0, 30
		if (*ptr < 0x20)
    320c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3210:	63672f62 	cmnvs	r7, #392	; 0x188
			proceed (IM_READ);
    3214:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3218:	6f6e2d6d 	svcvs	0x006e2d6d
	if (*ptr == '\n' || *ptr == '\r') {
    321c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3220:	2f696261 	svccs	0x00696261
    3224:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
		*ptr = '\0';
    3228:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
		__inpline = (char*)data;
    322c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
		finish;
    3230:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
	if (len) {
    3234:	2f656d6f 	svccs	0x00656d6f
		ptr++;
    3238:	70657473 	rsbvc	r7, r5, r3, ror r4
    323c:	2f6e6568 	svccs	0x006e6568
		len--;
    3240:	6b736544 	blvs	1cdc758 <__ccfg+0x1cbc7b0>
	proceed (IM_READ);
    3244:	2f706f74 	svccs	0x00706f74
	io (IM_BIN, __cport, READ, ptr, 1);
    3248:	4f534c4f 	svcmi	0x00534c4f
    324c:	2f54454e 	svccs	0x0054454e
    3250:	4f434950 	svcmi	0x00434950
    3254:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3258:	2f534f63 	svccs	0x00534f63
	len -= 2;
    325c:	33314343 	teqcc	r1, #201326593	; 0xc000001
	if (len > *ptr + 1) // 1 for 0x04
    3260:	2f005858 	svccs	0x00005858
    3264:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		len = *ptr + 1;
    3268:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    326c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	ptr++;
    3270:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3274:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3278:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    327c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3280:	4349502f 	movtmi	r5, #36911	; 0x902f
    3284:	502f534f 	eorpl	r5, pc, pc, asr #6
    3288:	534f6369 	movtpl	r6, #62313	; 0xf369
	len -= quant;
    328c:	6f682f00 	svcvs	0x00682f00
		__inpline = (char*)data;
    3290:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		finish;
    3294:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	ptr += quant;
    3298:	442f6e65 	strtmi	r6, [pc], #-3685	; 32a0 <__inserial+0xf8>
    329c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
endstrand
    32a0:	4f2f706f 	svcmi	0x002f706f
    32a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	proceed (IM_BINL);
    32a8:	502f5445 	eorpl	r5, pc, r5, asr #8
endstrand
    32ac:	534f4349 	movtpl	r4, #62281	; 0xf349
    32b0:	6369502f 	cmnvs	r9, #47	; 0x2f
    32b4:	6b2f534f 	blvs	bd7ff8 <__ccfg+0xbb8050>
    32b8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    32bc:	7400006c 	strvc	r0, [r0], #-108	; 0xffffff94
    32c0:	632e7663 			; <UNDEFINED> instruction: 0x632e7663
		if (res && (d < n))
    32c4:	00000100 	andeq	r0, r0, r0, lsl #2
    32c8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    32cc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    32d0:	00000200 	andeq	r0, r0, r0, lsl #4
			res [d] = (char) c;
    32d4:	61647473 	smcvs	18243	; 0x4743
		d++;
    32d8:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    32dc:	00000200 	andeq	r0, r0, r0, lsl #4
    32e0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32e4:	0300682e 	movweq	r6, #2094	; 0x82e
    32e8:	616d0000 	cmnvs	sp, r0
    32ec:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
				enci (10000);
    32f0:	00000300 	andeq	r0, r0, r0, lsl #6
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32f4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    32f8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
	d = 0;
    32fc:	0300682e 	movweq	r6, #2094	; 0x82e
		c = *fm++;
    3300:	75620000 	strbvc	r0, [r2, #-0]!
		if (c == '\\') {
    3304:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
			if ((c = *fm++) == '\0') {
    3308:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    330c:	00682e73 	rsbeq	r2, r8, r3, ror lr
				outc ('\\');
    3310:	73000003 	movwvc	r0, #3
			if ((c = *fm++) == '\0') {
    3314:	6f697379 	svcvs	0x00697379
				outc ('\\');
    3318:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    331c:	63740000 	cmnvs	r4, #0
			outc (c);
    3320:	65645f76 	strbvs	r5, [r4, #-3958]!	; 0xfffff08a
    3324:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
			if (c == '\0')
    3328:	00000100 	andeq	r0, r0, r0, lsl #2
    332c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
			outc (c);
    3330:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
				outc (val);
    3334:	00000500 	andeq	r0, r0, r0, lsl #10
				val = (word) va_arg (ap, aword);
    3338:	70766374 	rsbsvc	r6, r6, r4, ror r3
		if (c == '%') {
    333c:	2e737968 	vsubcs.f16	s15, s6, s17	; <UNPREDICTABLE>
    3340:	00010068 	andeq	r0, r1, r8, rrx
			c = *fm++;
    3344:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			switch (c) {
    3348:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 3350 <__pi_vfparse+0x6c>
    334c:	61645f65 	cmnvs	r4, r5, ror #30
    3350:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
    3354:	00000100 	andeq	r0, r0, r0, lsl #2
    3358:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    335c:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    3360:	00003e6e 	andeq	r3, r0, lr, ror #28
    3364:	05000000 	streq	r0, [r0, #-0]
				outc ('%');
    3368:	02050031 	andeq	r0, r5, #49	; 0x31
    336c:	00001e44 	andeq	r1, r0, r4, asr #28
				outc (c);
    3370:	01029303 	tsteq	r2, r3, lsl #6
    3374:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3378:	06310514 			; <UNDEFINED> instruction: 0x06310514
				if (c == '\0')
    337c:	20017803 	andcs	r7, r1, r3, lsl #16
				return d;
    3380:	05260705 	streq	r0, [r6, #-1797]!	; 0xfffff8fb
}
    3384:	05052216 	streq	r2, [r5, #-534]	; 0xfffffdea
    3388:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
			switch (c) {
    338c:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    3390:	1f0e0513 	svcne	0x000e0513
    3394:	21060205 	tstcs	r6, r5, lsl #4
				for (i = 12; ; i -= 4) {
    3398:	01061a05 	tsteq	r6, r5, lsl #20
				val = (word) va_arg (ap, aword);
    339c:	03060205 	movweq	r0, #25093	; 0x6205
						[ (val >> i) & 0xf ]);
    33a0:	0105200c 	tsteq	r5, ip
    33a4:	01021606 	tsteq	r2, r6, lsl #12
    33a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
					outc (__pi_hex_enc_table
    33ac:	0205002e 	andeq	r0, r5, #46	; 0x2e
    33b0:	00001e5a 	andeq	r1, r0, sl, asr lr
					if (i == 0)
    33b4:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    33b8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
				for (i = 12; ; i -= 4) {
    33bc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
				val = (word) va_arg (ap, aword);
    33c0:	03052005 	movweq	r2, #20485	; 0x5005
				if (c == 'd' && (val & 0x8000) != 0) {
    33c4:	29052f06 	stmdbcs	r5, {r1, r2, r8, r9, sl, fp, sp}
				val = (word) va_arg (ap, aword);
    33c8:	1c050106 	stfnes	f0, [r5], {6}
				if (c == 'd' && (val & 0x8000) != 0) {
    33cc:	0603052e 	streq	r0, [r3], -lr, lsr #10
    33d0:	06290521 	strteq	r0, [r9], -r1, lsr #10
					outc ('-');
    33d4:	201c0501 	andscs	r0, ip, r1, lsl #10
    33d8:	21060305 	tstcs	r6, r5, lsl #6
					val = (~val) + 1;
    33dc:	01061a05 	tsteq	r6, r5, lsl #20
    33e0:	024c0105 	subeq	r0, ip, #1073741825	; 0x40000001
				for (i = 12; ; i -= 4) {
    33e4:	01010001 	tsteq	r1, r1
				enci (10000);
    33e8:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    33ec:	001e7402 	andseq	r7, lr, r2, lsl #8
    33f0:	02830300 	addeq	r0, r3, #0, 6
    33f4:	16020501 	strne	r0, [r2], -r1, lsl #10
    33f8:	0e062e05 	cdpeq	14, 0, cr2, cr6, cr5, {0}
    33fc:	06240205 	strteq	r0, [r4], -r5, lsl #4
    3400:	1301012f 	movwne	r0, #4399	; 0x112f
    3404:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    3408:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    340c:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    3410:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3414:	0205003a 	andeq	r0, r5, #58	; 0x3a
    3418:	00001e84 	andeq	r1, r0, r4, lsl #29
    341c:	0101a703 	tsteq	r1, r3, lsl #14
    3420:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3424:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
    3428:	01240602 			; <UNDEFINED> instruction: 0x01240602
    342c:	1c063a05 			; <UNDEFINED> instruction: 0x1c063a05
				if (c == 'd' || c == 'u') {
    3430:	06240205 	strteq	r0, [r4], -r5, lsl #4
    3434:	05134a20 	ldreq	r4, [r3, #-2592]	; 0xfffff5e0
					if (c == 'd' &&
    3438:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
					val = va_arg (ap, lword);
    343c:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
					fm++;
    3440:	06052f02 	streq	r2, [r5], -r2, lsl #30
					if (c == 'd' &&
    3444:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3448:	06030520 	streq	r0, [r3], -r0, lsr #10
						outc ('-');
    344c:	06170530 			; <UNDEFINED> instruction: 0x06170530
    3450:	21140501 	tstcs	r4, r1, lsl #10
						val = (~val) + 1;
    3454:	2f060305 	svccs	0x00060305
				enci (10000);
    3458:	01060405 	tsteq	r6, r5, lsl #8
					enci (1000000000UL);
    345c:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    3460:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3464:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3468:	05280602 	streq	r0, [r8, #-1538]!	; 0xfffff9fe
    346c:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    3470:	03054b01 	movweq	r4, #23297	; 0x5b01
    3474:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    3478:	01061405 	tsteq	r6, r5, lsl #8
    347c:	21060305 	tstcs	r6, r5, lsl #6
    3480:	01061705 	tsteq	r6, r5, lsl #14
    3484:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
    3488:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    348c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3490:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3494:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    3498:	01010005 	tsteq	r1, r5
    349c:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
				} else if (c == 'x') {
    34a0:	001ed002 	andseq	sp, lr, r2
					for (i = 28; ; i -= 4) {
    34a4:	01df0300 	bicseq	r0, pc, r0, lsl #6
					val = va_arg (ap, lword);
    34a8:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
							[ (val >> i) & 0xf ]);
    34ac:	09030602 	stmdbeq	r3, {r1, r9, sl}
    34b0:	04053020 	streq	r3, [r5], #-32	; 0xffffffe0
						outc (__pi_hex_enc_table
    34b4:	061b0584 	ldreq	r0, [fp], -r4, lsl #11
    34b8:	06040501 	streq	r0, [r4], -r1, lsl #10
    34bc:	5806014c 	stmdapl	r6, {r2, r3, r6, r8}
						if (i == 0)
    34c0:	27064a06 	strcs	r4, [r6, -r6, lsl #20]
    34c4:	3c790306 	ldclcc	3, cr0, [r9], #-24	; 0xffffffe8
					for (i = 28; ; i -= 4) {
    34c8:	06010513 			; <UNDEFINED> instruction: 0x06010513
					outc ('%');
    34cc:	05201203 	streq	r1, [r0, #-515]!	; 0xfffffdfd
    34d0:	2e750304 	cdpcs	3, 7, cr0, cr5, cr4, {0}
    34d4:	1b052b06 	blne	14e0f4 <__ccfg+0x12e14c>
					outc ('l');
    34d8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    34dc:	90014c06 	andls	r4, r1, r6, lsl #24
				val = (word) va_arg (ap, aword);
    34e0:	055b132e 	ldrbeq	r1, [fp, #-814]	; 0xfffffcd2
				outc (val);
    34e4:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    34e8:	2e780304 	cdpcs	3, 7, cr0, cr8, cr4, {0}
				while (*st != '\0') {
    34ec:	02360105 	eorseq	r0, r6, #1073741825	; 0x40000001
    34f0:	0101000c 	tsteq	r1, ip
    34f4:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    34f8:	001f5c02 	andseq	r5, pc, r2, lsl #24
					outc (*st);
    34fc:	02ba0300 	adcseq	r0, sl, #0, 6
    3500:	18020501 	stmdane	r2, {r0, r8, sl}
					st++;
    3504:	06310514 			; <UNDEFINED> instruction: 0x06310514
		c = *fm++;
    3508:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
    350c:	20090306 	andcs	r0, r9, r6, lsl #6
    3510:	052d0405 	streq	r0, [sp, #-1029]!	; 0xfffffbfb
char *vform (char *res, const char *fm, va_list aq) {
    3514:	052f0602 	streq	r0, [pc, #-1538]!	; 2f1a <RFCCPE0IntHandler+0x66>
    3518:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
	if (res != NULL) {
    351c:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3520:	4a066606 	bmi	19cd40 <__ccfg+0x17cd98>
    3524:	3b062106 	blcc	18b944 <__ccfg+0x16b99c>
    3528:	66060113 			; <UNDEFINED> instruction: 0x66060113
}
    352c:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    3530:	06010513 			; <UNDEFINED> instruction: 0x06010513
	fml = strlen (fm) + 17;
    3534:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    3538:	2e770303 	cdpcs	3, 7, cr0, cr7, cr3, {0}
    353c:	01053606 	tsteq	r5, r6, lsl #12
	if ((res = (char*) umalloc (fml)) == NULL)
    3540:	03052106 	movweq	r2, #20742	; 0x5106
    3544:	000b022d 	andeq	r0, fp, sp, lsr #4
    3548:	4a050101 	bmi	143954 <__ccfg+0x1239ac>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    354c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    3550:	0300001f 	movweq	r0, #31
    3554:	050103f5 	streq	r0, [r1, #-1013]	; 0xfffffc0b
    3558:	13131402 	tstne	r3, #33554432	; 0x2000000
		ufree (res);
    355c:	4a051314 	bmi	1481b4 <__ccfg+0x12820c>
		goto Again;
    3560:	01790306 	cmneq	r9, r6, lsl #6
	if (buf == NULL || fmt == NULL)
    3564:	0305053c 	movweq	r0, #21820	; 0x553c
int vscan (const char *buf, const char *fmt, va_list ap) {
    3568:	4a053c0b 	bmi	15259c <__ccfg+0x1325f4>
	if (buf == NULL || fmt == NULL)
    356c:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    3570:	24062702 	strcs	r2, [r6], #-1794	; 0xfffff8fe
    3574:	01060505 	tsteq	r6, r5, lsl #10
		    	    case 'u': scanu (lword); break;
    3578:	05203005 	streq	r3, [r0, #-5]!
			while (isspace (*buf)) buf++;
    357c:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    3580:	3c30053d 	cfldr32cc	mvfx0, [r0], #-244	; 0xffffff0c
	while (*fmt != '\0') {
    3584:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
		if (*fmt++ != '%')
    3588:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
		switch (*fmt++) {
    358c:	15030603 	strne	r0, [r3, #-1539]	; 0xfffff9fd
    3590:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3594:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
    3598:	12051713 	andne	r1, r5, #4980736	; 0x4c0000
    359c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    35a0:	0f057606 	svceq	0x00057606
    35a4:	060a0501 	streq	r0, [sl], -r1, lsl #10
}
    35a8:	06030520 	streq	r0, [r3], -r0, lsr #10
		switch (*fmt++) {
    35ac:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    35b0:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    35b4:	1f062205 	svcne	0x00062205
    35b8:	01062405 	tsteq	r6, r5, lsl #8
			while (isspace (*buf)) buf++;
    35bc:	20060f05 	andcs	r0, r6, r5, lsl #30
    35c0:	01060205 	tsteq	r6, r5, lsl #4
    35c4:	05330a05 	ldreq	r0, [r3, #-2565]!	; 0xfffff5fb
    35c8:	2e130301 	cdpcs	3, 1, cr0, cr3, cr1, {0}
    35cc:	03060205 	movweq	r0, #25093	; 0x6205
    35d0:	1a056673 	bne	15cfa4 <__ccfg+0x13cffc>
			if (*buf == '\0')
    35d4:	13051506 	movwne	r1, #21766	; 0x5506
			if (*buf != ',') {
    35d8:	06020539 			; <UNDEFINED> instruction: 0x06020539
			sap = va_arg (ap, char*);
    35dc:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
			nc++;
    35e0:	1e020514 	mcrne	5, 0, r0, cr2, cr4, {0}
			if (*buf != ',') {
    35e4:	14132f06 	ldrne	r2, [r3], #-3846	; 0xfffff0fa
				while (!isspace (*buf) && *buf != ',' &&
    35e8:	143c4a01 	ldrtne	r4, [ip], #-2561	; 0xfffff5ff
    35ec:	01060605 	tsteq	r6, r5, lsl #12
    35f0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    35f4:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    35f8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    35fc:	052f0602 	streq	r0, [pc, #-1538]!	; 3002 <phys_cc1350+0xde>
    3600:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
			while (isspace (*buf)) buf++;
    3604:	6d030602 	stcvs	6, cr0, [r3, #-8]
    3608:	13051520 	movwne	r1, #21792	; 0x5520
    360c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3610:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    3614:	03050106 	movweq	r0, #20742	; 0x5106
			if (*buf == ',') buf++;
    3618:	10023d06 	andne	r3, r2, r6, lsl #26
    361c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			*sap = '\0';
    3620:	0205003a 	andeq	r0, r5, #58	; 0x3a
			break;
    3624:	00000000 	andeq	r0, r0, r0
		    case 'd': scani (word); break;
    3628:	0104a803 	tsteq	r4, r3, lsl #16
    362c:	13140205 	tstne	r4, #1342177280	; 0x50000000
    3630:	3a050114 	bcc	143a88 <__ccfg+0x123ae0>
    3634:	05201b06 	streq	r1, [r0, #-2822]!	; 0xfffff4fa
    3638:	06202502 	strteq	r2, [r0], -r2, lsl #10
    363c:	0627064a 	strteq	r0, [r7], -sl, asr #12
    3640:	143c7903 	ldrtne	r7, [ip], #-2307	; 0xfffff6fd
    3644:	06011514 			; <UNDEFINED> instruction: 0x06011514
    3648:	2e064a58 			; <UNDEFINED> instruction: 0x2e064a58
    364c:	0605142e 	streq	r1, [r5], -lr, lsr #8
    3650:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3654:	300a052e 	andcc	r0, sl, lr, lsr #10
    3658:	41060305 	tstmi	r6, r5, lsl #6
    365c:	2b080513 	blcs	204ab0 <__ccfg+0x1e4b08>
    3660:	01060a05 	tsteq	r6, r5, lsl #20
    3664:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    3668:	3d330602 	ldccc	6, cr0, [r3, #-8]!
    366c:	01061305 	tsteq	r6, r5, lsl #6
    3670:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3674:	13060105 	movwne	r0, #24837	; 0x6105
    3678:	01000b02 	tsteq	r0, r2, lsl #22
    367c:	00430501 	subeq	r0, r3, r1, lsl #10
    3680:	208c0205 	addcs	r0, ip, r5, lsl #4
    3684:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    3688:	02050104 	andeq	r0, r5, #4, 2
    368c:	06050516 			; <UNDEFINED> instruction: 0x06050516
    3690:	2f0f0501 	svccs	0x000f0501
    3694:	053b2605 	ldreq	r2, [fp, #-1541]!	; 0xfffff9fb
		    case 'u': scanu (word); break;
    3698:	0205211d 	andeq	r2, r5, #1073741831	; 0x40000007
    369c:	10053106 	andne	r3, r5, r6, lsl #2
    36a0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    36a4:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    36a8:	0a050106 	beq	143ac8 <__ccfg+0x123b20>
    36ac:	3201052b 	andcc	r0, r1, #180355072	; 0xac00000
    36b0:	01000402 	tsteq	r0, r2, lsl #8
    36b4:	003c0501 	eorseq	r0, ip, r1, lsl #10
    36b8:	20b00205 	adcscs	r0, r0, r5, lsl #4
    36bc:	d5030000 	strle	r0, [r3, #-0]
    36c0:	02050104 	andeq	r0, r5, #4, 2
    36c4:	14131319 	ldrne	r1, [r3], #-793	; 0xfffffce7
    36c8:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    36cc:	20207503 	eorcs	r7, r0, r3, lsl #10
    36d0:	0b030205 	bleq	c3eec <__ccfg+0xa3f44>
    36d4:	4a062020 	bmi	18b75c <__ccfg+0x16b7b4>
    36d8:	20130306 	andscs	r0, r3, r6, lsl #6
    36dc:	3c6d0306 	stclcc	3, cr0, [sp], #-24	; 0xffffffe8
		    case 'x': scanx (word); break;
    36e0:	04051314 	streq	r1, [r5], #-788	; 0xfffffcec
    36e4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    36e8:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    36ec:	03050106 	movweq	r0, #20742	; 0x5106
    36f0:	06053006 	streq	r3, [r5], -r6
    36f4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    36f8:	053d4b06 	ldreq	r4, [sp, #-2822]!	; 0xfffff4fa
    36fc:	013d3302 	teqeq	sp, r2, lsl #6
    3700:	14061501 	strne	r1, [r6], #-1281	; 0xfffffaff
    3704:	051e0405 	ldreq	r0, [lr, #-1029]	; 0xfffffbfb
    3708:	01300602 	teqeq	r0, r2, lsl #12
    370c:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    3710:	3e132e2e 	cdpcc	14, 1, cr2, cr3, cr14, {1}
    3714:	13062205 	movwne	r2, #25093	; 0x6205
    3718:	05571505 	ldrbeq	r1, [r7, #-1285]	; 0xfffffafb
    371c:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    3720:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    3724:	2e70030a 	cdpcs	3, 7, cr0, cr0, cr10, {0}
    3728:	01000b02 	tsteq	r0, r2, lsl #22
    372c:	00380501 	eorseq	r0, r8, r1, lsl #10
    3730:	00000205 	andeq	r0, r0, r5, lsl #4
    3734:	fc030000 	stc2	0, cr0, [r3], {-0}
    3738:	02050104 	andeq	r0, r5, #4, 2
    373c:	13131316 	tstne	r3, #1476395008	; 0x58000000
    3740:	38050114 	stmdacc	r5, {r2, r4, r8}
    3744:	20770306 	rsbscs	r0, r7, r6, lsl #6
    3748:	09030205 	stmdbeq	r3, {r0, r2, r9}
    374c:	4a062020 	bmi	18b7d4 <__ccfg+0x16b82c>
    3750:	03060305 	movweq	r0, #25349	; 0x6305
    3754:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
			switch (*fmt++) {
    3758:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    375c:	1a051414 	bne	1487b4 <__ccfg+0x12880c>
    3760:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3764:	06030520 	streq	r0, [r3], -r0, lsr #10
    3768:	1902052f 	stmdbne	r2, {r0, r1, r2, r3, r5, r8, sl}
    376c:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
		    	    case 'd': scani (lword); break;
    3770:	20050501 	andcs	r0, r5, r1, lsl #10
    3774:	03060305 	movweq	r0, #25349	; 0x6305
    3778:	0505200a 	streq	r2, [r5, #-10]
    377c:	01750306 	cmneq	r5, r6, lsl #6
    3780:	0b030a05 	bleq	c5f9c <__ccfg+0xa5ff4>
    3784:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    3788:	06030520 	streq	r0, [r3], -r0, lsr #10
    378c:	06040501 	streq	r0, [r4], -r1, lsl #10
    3790:	062c052f 	strteq	r0, [ip], -pc, lsr #10
    3794:	21060511 	tstcs	r6, r1, lsl r5
    3798:	1f062a05 	svcne	0x00062a05
    379c:	6f030905 	svcvs	0x00030905
    37a0:	06210520 	strteq	r0, [r1], -r0, lsr #10
    37a4:	200c0501 	andcs	r0, ip, r1, lsl #10
    37a8:	2f060305 	svccs	0x00060305
    37ac:	01062005 	tsteq	r6, r5
    37b0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    37b4:	06052020 	streq	r2, [r5], -r0, lsr #32
    37b8:	06020520 	streq	r0, [r2], -r0, lsr #10
    37bc:	05051333 	streq	r1, [r5, #-819]	; 0xfffffccd
    37c0:	03050106 	movweq	r0, #20742	; 0x5106
    37c4:	05422a06 	strbeq	r2, [r2, #-2566]	; 0xfffff5fa
    37c8:	050f0605 	streq	r0, [pc, #-1541]	; 31cb <__inserial+0x23>
		    	    case 'x': scanx (lword); break;
    37cc:	1a05230a 	bne	14c3fc <__ccfg+0x12c454>
    37d0:	03052006 	movweq	r2, #20486	; 0x5006
    37d4:	01050106 	tsteq	r5, r6, lsl #2
    37d8:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    37dc:	74030604 	strvc	r0, [r3], #-1540	; 0xfffff9fc
    37e0:	06080520 	streq	r0, [r8], -r0, lsr #10
    37e4:	20070501 	andcs	r0, r7, r1, lsl #10
    37e8:	2f060505 	svccs	0x00060505
    37ec:	10062c05 	andne	r2, r6, r5, lsl #24
    37f0:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    37f4:	021e062a 	andseq	r0, lr, #44040192	; 0x2a00000
    37f8:	0101000a 	tsteq	r1, sl
    37fc:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    3800:	00000002 	andeq	r0, r0, r2
    3804:	05a30300 	streq	r0, [r3, #768]!	; 0x300
    3808:	16020501 	strne	r0, [r2], -r1, lsl #10
    380c:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    3810:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    3814:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    3818:	20090302 	andcs	r0, r9, r2, lsl #6
    381c:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    3820:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    3824:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3828:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    382c:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    3830:	20050501 	andcs	r0, r5, r1, lsl #10
    3834:	2f060305 	svccs	0x00060305
    3838:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
		    	    case 'd': scani (lword); break;
    383c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3840:	3805201b 	stmdacc	r5, {r0, r1, r3, r4, sp}
    3844:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    3848:	b3030603 	movwlt	r0, #13827	; 0x3603
    384c:	0505207c 	streq	r2, [r5, #-124]	; 0xffffff84
    3850:	03050106 	movweq	r0, #20742	; 0x5106
    3854:	06052106 	streq	r2, [r5], -r6, lsl #2
		    	    case 'u': scanu (lword); break;
    3858:	03050106 	movweq	r0, #20742	; 0x5106
    385c:	11053106 	tstne	r5, r6, lsl #2
    3860:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    3864:	060f0501 	streq	r0, [pc], -r1, lsl #10
    3868:	06050520 	streq	r0, [r5], -r0, lsr #10
    386c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    3870:	2003dc03 	andcs	sp, r3, r3, lsl #24
    3874:	01062105 	tsteq	r6, r5, lsl #2
    3878:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    387c:	052f0603 	streq	r0, [pc, #-1539]!	; 3281 <__inserial+0xd9>
    3880:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    3884:	20052006 	andcs	r2, r5, r6
    3888:	20060520 	andcs	r0, r6, r0, lsr #10
    388c:	33060205 	movwcc	r0, #25093	; 0x6205
    3890:	01061b05 	tsteq	r6, r5, lsl #22
    3894:	2b060305 	blcs	1844b0 <__ccfg+0x164508>
    3898:	03060105 	movweq	r0, #24837	; 0x6105
    389c:	02053c0a 	andeq	r3, r5, #2560	; 0xa00
		    	    case 'x': scanx (lword); break;
    38a0:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    38a4:	19050106 	stmdbne	r5, {r1, r2, r8}
			if ((c = *buf++) == '\0')
    38a8:	02052006 	andeq	r2, r5, #6
    38ac:	01050106 	tsteq	r5, r6, lsl #2
			sap = va_arg (ap, char*);
    38b0:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
			nc++;
    38b4:	77030603 	strvc	r0, [r3, -r3, lsl #12]
			break;
    38b8:	061e052e 	ldreq	r0, [lr], -lr, lsr #10
			while (isspace (*buf)) buf++;
    38bc:	20060501 	andcs	r0, r6, r1, lsl #10
    38c0:	30060405 	andcc	r0, r6, r5, lsl #8
    38c4:	0606052f 	streq	r0, [r6], -pc, lsr #10
						*sap++ = *buf++;
    38c8:	06040501 	streq	r0, [r4], -r1, lsl #10
    38cc:	1b290521 	blne	a44d58 <__ccfg+0xa24db0>
			while (isspace (*buf)) buf++;
    38d0:	01062b05 	tsteq	r6, r5, lsl #22
    38d4:	01000a02 	tsteq	r0, r2, lsl #20
    38d8:	00160501 	andseq	r0, r6, r1, lsl #10
		return 0;
    38dc:	21300205 	teqcs	r0, r5, lsl #4
    38e0:	cd030000 	stcgt	0, cr0, [r3, #-0]
		    case 'x': scanx (word); break;
    38e4:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    38e8:	13131313 	tstne	r3, #1275068416	; 0x4c000000
		    	    case 'x': scanx (lword); break;
    38ec:	16050114 			; <UNDEFINED> instruction: 0x16050114
    38f0:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    38f4:	42020520 	andmi	r0, r2, #32, 10	; 0x8000000
    38f8:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    38fc:	14380624 	ldrtne	r0, [r8], #-1572	; 0xfffff9dc
    3900:	58060114 	stmdapl	r6, {r2, r4, r8}
    3904:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    3908:	060e0516 			; <UNDEFINED> instruction: 0x060e0516
    390c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3910:	060d052f 	streq	r0, [sp], -pc, lsr #10
    3914:	1e0e0514 	mcrne	5, 0, r0, cr14, cr4, {0}
    3918:	30060205 	andcc	r0, r6, r5, lsl #4
    391c:	01060d05 	tsteq	r6, r5, lsl #26
    3920:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3924:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    3928:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    392c:	01054e0a 	tsteq	r5, sl, lsl #28
    3930:	05202103 	streq	r2, [r0, #-259]!	; 0xfffffefd
    3934:	5c030604 	stcpl	6, cr0, [r3], {4}
    3938:	17033d2e 	strne	r3, [r3, -lr, lsr #26]
    393c:	03020501 	movweq	r0, #9473	; 0x2501
    3940:	3c012e6e 	stccc	14, cr2, [r1], {110}	; 0x6e
    3944:	010b032e 	tsteq	fp, lr, lsr #6
    3948:	01060b05 	tsteq	r6, r5, lsl #22
    394c:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    3950:	0505200b 	streq	r2, [r5, #-11]
    3954:	06030558 			; <UNDEFINED> instruction: 0x06030558
    3958:	06060522 	streq	r0, [r6], -r2, lsr #10
    395c:	06040501 	streq	r0, [r4], -r1, lsl #10
    3960:	5002054e 	andpl	r0, r2, lr, asr #10
    3964:	01061005 	tsteq	r6, r5
    3968:	2f060205 	svccs	0x00060205
    396c:	01060505 	tsteq	r6, r5, lsl #10
    3970:	21060305 	tstcs	r6, r5, lsl #6
    3974:	01061a05 	tsteq	r6, r5, lsl #20
    3978:	4b060205 	blmi	184194 <__ccfg+0x1641ec>
    397c:	01061b05 	tsteq	r6, r5, lsl #22
    3980:	1f2f1505 	svcne	0x002f1505
    3984:	21060205 	tstcs	r6, r5, lsl #4
    3988:	06090514 			; <UNDEFINED> instruction: 0x06090514
    398c:	000c0201 	andeq	r0, ip, r1, lsl #4
    3990:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    3994:	00020500 	andeq	r0, r2, r0, lsl #10
    3998:	03000000 	movweq	r0, #0
    399c:	05010687 	streq	r0, [r1, #-1671]	; 0xfffff979
    39a0:	44051602 	strmi	r1, [r5], #-1538	; 0xfffff9fe
    39a4:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    39a8:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    39ac:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    39b0:	2e7a0344 	cdpcs	3, 7, cr0, cr10, cr4, {2}
    39b4:	03060205 	movweq	r0, #25093	; 0x6205
    39b8:	05054a09 	streq	r4, [r5, #-2569]	; 0xfffff5f7
    39bc:	03050106 	movweq	r0, #20742	; 0x5106
    39c0:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    39c4:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    39c8:	05670603 	strbeq	r0, [r7, #-1539]!	; 0xfffff9fd
    39cc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    39d0:	055b0602 	ldrbeq	r0, [fp, #-1538]	; 0xfffff9fe
    39d4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    39d8:	01010002 	tsteq	r1, r2
    39dc:	05004b05 	streq	r4, [r0, #-2821]	; 0xfffff4fb
    39e0:	00000002 	andeq	r0, r0, r2
    39e4:	06990300 	ldreq	r0, [r9], r0, lsl #6
    39e8:	16020501 	strne	r0, [r2], -r1, lsl #10
    39ec:	064b0514 			; <UNDEFINED> instruction: 0x064b0514
    39f0:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    39f4:	4b05261a 	blmi	14d264 <__ccfg+0x12d2bc>
    39f8:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    39fc:	09030602 	stmdbeq	r3, {r1, r9, sl}
    3a00:	0605054a 	streq	r0, [r5], -sl, asr #10
    3a04:	06030501 	streq	r0, [r3], -r1, lsl #10
    3a08:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3a0c:	03050106 	movweq	r0, #20742	; 0x5106
    3a10:	16056706 	strne	r6, [r5], -r6, lsl #14
    3a14:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3a18:	01055a06 	tsteq	r5, r6, lsl #20
    3a1c:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    3a20:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3a24:	02050031 	andeq	r0, r5, #49	; 0x31
    3a28:	00000000 	andeq	r0, r0, r0
    3a2c:	0106aa03 	tsteq	r6, r3, lsl #20
    3a30:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3a34:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3a38:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3a3c:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    3a40:	01010001 	tsteq	r1, r1
    3a44:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    3a48:	0021ec02 	eoreq	lr, r1, r2, lsl #24
    3a4c:	06d10300 	ldrbeq	r0, [r1], r0, lsl #6
    3a50:	06020501 	streq	r0, [r2], -r1, lsl #10
    3a54:	1c480524 	cfstr64ne	mvdx0, [r8], {36}	; 0x24
    3a58:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3a5c:	06480501 	strbeq	r0, [r8], -r1, lsl #10
    3a60:	0205200e 	andeq	r2, r5, #14
    3a64:	4a062024 	bmi	18bafc <__ccfg+0x16bb54>
    3a68:	0105134a 	tsteq	r5, sl, asr #6
    3a6c:	13051306 	movwne	r1, #21254	; 0x5306
    3a70:	0006022d 	andeq	r0, r6, sp, lsr #4
    3a74:	46050101 	strmi	r0, [r5], -r1, lsl #2
    3a78:	18020500 	stmdane	r2, {r8, sl}
    3a7c:	03000022 	movweq	r0, #34	; 0x22
    3a80:	050106b2 	streq	r0, [r1, #-1714]	; 0xfffff94e
    3a84:	46051702 	strmi	r1, [r5], -r2, lsl #14
    3a88:	05050d06 	streq	r0, [r5, #-3334]	; 0xfffff2fa
    3a8c:	06030525 	streq	r0, [r3], -r5, lsr #10
    3a90:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3a94:	06030501 	streq	r0, [r3], -r1, lsl #10
    3a98:	06060530 			; <UNDEFINED> instruction: 0x06060530
    3a9c:	06040501 	streq	r0, [r4], -r1, lsl #10
    3aa0:	0705132f 	streq	r1, [r5, -pc, lsr #6]
    3aa4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3aa8:	0b053006 	bleq	14fac8 <__ccfg+0x12fb20>
    3aac:	07050106 	streq	r0, [r5, -r6, lsl #2]
    3ab0:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    3ab4:	060c0522 	streq	r0, [ip], -r2, lsr #10
    3ab8:	03010501 	movweq	r0, #5377	; 0x1501
    3abc:	03052009 	movweq	r2, #20489	; 0x5009
    3ac0:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    3ac4:	01060605 	tsteq	r6, r5, lsl #12
    3ac8:	30060305 	andcc	r0, r6, r5, lsl #6
    3acc:	01061305 	tsteq	r6, r5, lsl #6
    3ad0:	4c060205 	sfmmi	f0, 4, [r6], {5}
    3ad4:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    3ad8:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3adc:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
    3ae0:	09052101 	stmdbeq	r5, {r0, r8, sp}
    3ae4:	030b052d 	movweq	r0, #46381	; 0xb52d
    3ae8:	0b023c71 	bleq	92cb4 <__ccfg+0x72d0c>
    3aec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3af0:	0205003d 	andeq	r0, r5, #61	; 0x3d
    3af4:	00000000 	andeq	r0, r0, r0
    3af8:	0106d903 	tsteq	r6, r3, lsl #18
    3afc:	01160205 	tsteq	r6, r5, lsl #4
    3b00:	1c063d05 	stcne	13, cr3, [r6], {5}
    3b04:	20240205 	eorcs	r0, r4, r5, lsl #4
    3b08:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3b0c:	01062505 	tsteq	r6, r5, lsl #10
    3b10:	67060205 	strvs	r0, [r6, -r5, lsl #4]
    3b14:	01064305 	tsteq	r6, r5, lsl #6
    3b18:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    3b1c:	22052e43 	andcs	r2, r5, #1072	; 0x430
    3b20:	4b01052e 	blmi	44fe0 <__ccfg+0x25038>
    3b24:	01000502 	tsteq	r0, r2, lsl #10
    3b28:	003d0501 	eorseq	r0, sp, r1, lsl #10
    3b2c:	00000205 	andeq	r0, r0, r5, lsl #4
    3b30:	e2030000 	and	r0, r3, #0
    3b34:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3b38:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    3b3c:	02051c06 	andeq	r1, r5, #1536	; 0x600
    3b40:	4a062024 	bmi	18bbd8 <__ccfg+0x16bc30>
    3b44:	2205134a 	andcs	r1, r5, #671088641	; 0x28000001
    3b48:	01050106 	tsteq	r5, r6, lsl #2
    3b4c:	00050267 	andeq	r0, r5, r7, ror #4
    3b50:	40050101 	andmi	r0, r5, r1, lsl #2
    3b54:	00020500 	andeq	r0, r2, r0, lsl #10
    3b58:	03000000 	movweq	r0, #0
    3b5c:	050106ea 	streq	r0, [r1, #-1770]	; 0xfffff916
    3b60:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    3b64:	7a030640 	bvc	c546c <__ccfg+0xa54c4>
    3b68:	0c052001 	stceq	0, cr2, [r5], {1}
    3b6c:	03400526 	movteq	r0, #1318	; 0x526
    3b70:	0c052e7a 	stceq	14, cr2, [r5], {122}	; 0x7a
    3b74:	2e050526 	cfsh32cs	mvfx0, mvfx5, #22
    3b78:	33060205 	movwcc	r0, #25093	; 0x6205
    3b7c:	06110584 	ldreq	r0, [r1], -r4, lsl #11
    3b80:	31020501 	tstcc	r2, r1, lsl #10
    3b84:	051d1105 	ldreq	r1, [sp, #-261]	; 0xfffffefb
    3b88:	13210602 			; <UNDEFINED> instruction: 0x13210602
    3b8c:	11061a05 	tstne	r6, r5, lsl #20
    3b90:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    3b94:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    3b98:	21010501 	tstcs	r1, r1, lsl #10
    3b9c:	01000202 	tsteq	r0, r2, lsl #4
    3ba0:	003e0501 	eorseq	r0, lr, r1, lsl #10
    3ba4:	00000205 	andeq	r0, r0, r5, lsl #4
    3ba8:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3bac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3bb0:	00030216 	andeq	r0, r3, r6, lsl r2
    3bb4:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
    3bb8:	78020500 	stmdavc	r2, {r8, sl}
    3bbc:	03000022 	movweq	r0, #34	; 0x22
    3bc0:	05010785 	streq	r0, [r1, #-1925]	; 0xfffff87b
    3bc4:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    3bc8:	7a030645 	bvc	c54e4 <__ccfg+0xa553c>
    3bcc:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    3bd0:	06030526 	streq	r0, [r3], -r6, lsr #10
    3bd4:	06060531 			; <UNDEFINED> instruction: 0x06060531
    3bd8:	06040501 	streq	r0, [r4], -r1, lsl #10
    3bdc:	0603052f 	streq	r0, [r3], -pc, lsr #10
    3be0:	012e062f 			; <UNDEFINED> instruction: 0x012e062f
    3be4:	4a062e06 	bmi	18f404 <__ccfg+0x16f45c>
    3be8:	011d033c 	tsteq	sp, ip, lsr r3
    3bec:	01060c05 	tsteq	r6, r5, lsl #24
    3bf0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    3bf4:	0105350a 	tsteq	r5, sl, lsl #10
    3bf8:	06040527 	streq	r0, [r4], -r7, lsr #10
    3bfc:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    3c00:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    3c04:	12053104 	andne	r3, r5, #4, 2
    3c08:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    3c0c:	061d0530 			; <UNDEFINED> instruction: 0x061d0530
    3c10:	06040501 	streq	r0, [r4], -r1, lsl #10
    3c14:	0b052f3d 	bleq	14f910 <__ccfg+0x12f968>
    3c18:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3c1c:	0b054106 	bleq	15403c <__ccfg+0x134094>
    3c20:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3c24:	0603052e 	streq	r0, [r3], -lr, lsr #10
    3c28:	060a052f 	streq	r0, [sl], -pc, lsr #10
    3c2c:	00090201 	andeq	r0, r9, r1, lsl #4
    3c30:	48050101 	stmdami	r5, {r0, r8}
    3c34:	e0020500 	and	r0, r2, r0, lsl #10
    3c38:	03000022 	movweq	r0, #34	; 0x22
    3c3c:	05010986 	streq	r0, [r1, #-2438]	; 0xfffff67a
    3c40:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
    3c44:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3c48:	20780348 	rsbscs	r0, r8, r8, asr #6
    3c4c:	28050520 	stmdacs	r5, {r5, r8, sl}
    3c50:	05203105 	streq	r3, [r0, #-261]!	; 0xfffffefb
    3c54:	03052025 	movweq	r2, #20517	; 0x5025
    3c58:	35063d06 	strcc	r3, [r6, #-3334]	; 0xfffff2fa
    3c5c:	29060205 	stmdbcs	r6, {r0, r2, r9}
    3c60:	01061105 	tsteq	r6, r5, lsl #2
    3c64:	2f060205 	svccs	0x00060205
    3c68:	01061105 	tsteq	r6, r5, lsl #2
    3c6c:	05222105 	streq	r2, [r2, #-261]!	; 0xfffffefb
    3c70:	02051e11 	andeq	r1, r5, #272	; 0x110
    3c74:	21053006 	tstcs	r5, r6
    3c78:	10050106 	andne	r0, r5, r6, lsl #2
    3c7c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3c80:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    3c84:	06030501 	streq	r0, [r3], -r1, lsl #10
    3c88:	3d020521 	cfstr32cc	mvfx0, [r2, #-132]	; 0xffffff7c
    3c8c:	06010534 			; <UNDEFINED> instruction: 0x06010534
    3c90:	000b0213 	andeq	r0, fp, r3, lsl r2
    3c94:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    3c98:	30020500 	andcc	r0, r2, r0, lsl #10
    3c9c:	03000023 	movweq	r0, #35	; 0x23
    3ca0:	050109a0 	streq	r0, [r1, #-2464]	; 0xfffff660
    3ca4:	13131702 	tstne	r3, #524288	; 0x80000
    3ca8:	44050114 	strmi	r0, [r5], #-276	; 0xfffffeec
    3cac:	01770306 	cmneq	r7, r6, lsl #6
    3cb0:	09030205 	stmdbeq	r3, {r0, r2, r9}
    3cb4:	0344052e 	movteq	r0, #17710	; 0x452e
    3cb8:	02052077 	andeq	r2, r5, #119	; 0x77
    3cbc:	204a0903 	subcs	r0, sl, r3, lsl #18
    3cc0:	03054a06 	movweq	r4, #23046	; 0x5a06
    3cc4:	200d0306 	andcs	r0, sp, r6, lsl #6
    3cc8:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    3ccc:	05470603 	strbeq	r0, [r7, #-1539]	; 0xfffff9fd
    3cd0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3cd4:	28053c06 	stmdacs	r5, {r1, r2, sl, fp, ip, sp}
    3cd8:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3cdc:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
    3ce0:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    3ce4:	2e16030a 	cdpcs	3, 1, cr0, cr6, cr10, {0}
    3ce8:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    3cec:	06030520 	streq	r0, [r3], -r0, lsr #10
    3cf0:	013c6703 	teqeq	ip, r3, lsl #14
    3cf4:	05132e58 	ldreq	r2, [r3, #-3672]	; 0xfffff1a8
    3cf8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3cfc:	02057406 	andeq	r7, r5, #100663296	; 0x6000000
    3d00:	05054206 	streq	r4, [r5, #-518]	; 0xfffffdfa
    3d04:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3d08:	0c053606 	stceq	6, cr3, [r5], {6}
    3d0c:	16050106 	strne	r0, [r5], -r6, lsl #2
    3d10:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    3d14:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3d18:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    3d1c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3d20:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    3d24:	05683206 	strbeq	r3, [r8, #-518]!	; 0xfffffdfa
    3d28:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    3d2c:	0101000a 	tsteq	r1, sl
    3d30:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3d34:	0023cc02 	eoreq	ip, r3, r2, lsl #24
    3d38:	09d10300 	ldmibeq	r1, {r8, r9}^
    3d3c:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3d40:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3d44:	7803063e 	stmdavc	r3, {r1, r2, r3, r4, r5, r9, sl}
    3d48:	28020520 	stmdacs	r2, {r5, r8, sl}
    3d4c:	4a4a0620 	bmi	12855d4 <__ccfg+0x126562c>
    3d50:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3d54:	06020501 	streq	r0, [r2], -r1, lsl #10
    3d58:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3d5c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3d60:	06050521 	streq	r0, [r5], -r1, lsr #10
    3d64:	06020501 	streq	r0, [r2], -r1, lsl #10
    3d68:	060a0533 			; <UNDEFINED> instruction: 0x060a0533
    3d6c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3d70:	01012f2f 	tsteq	r1, pc, lsr #30
    3d74:	06090513 			; <UNDEFINED> instruction: 0x06090513
    3d78:	21010501 	tstcs	r1, r1, lsl #10
    3d7c:	79030a05 	stmdbvc	r3, {r0, r2, r9, fp}
    3d80:	00090220 	andeq	r0, r9, r0, lsr #4
    3d84:	34050101 	strcc	r0, [r5], #-257	; 0xfffffeff
    3d88:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    3d8c:	03000024 	movweq	r0, #36	; 0x24
    3d90:	050109e8 	streq	r0, [r1, #-2536]	; 0xfffff618
    3d94:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    3d98:	06340501 	ldrteq	r0, [r4], -r1, lsl #10
    3d9c:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    3da0:	06202702 	strteq	r2, [r0], -r2, lsl #14
    3da4:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    3da8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3dac:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3db0:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    3db4:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3db8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3dbc:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    3dc0:	0510060a 	ldreq	r0, [r0, #-1546]	; 0xfffff9f6
    3dc4:	01053009 	tsteq	r5, r9
    3dc8:	00070221 	andeq	r0, r7, r1, lsr #4
    3dcc:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    3dd0:	40020500 	andmi	r0, r2, r0, lsl #10
    3dd4:	03000024 	movweq	r0, #36	; 0x24
    3dd8:	050109f9 	streq	r0, [r1, #-2553]	; 0xfffff607
    3ddc:	35051602 	strcc	r1, [r5, #-1538]	; 0xfffff9fe
    3de0:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    3de4:	2c0c0526 	cfstr32cs	mvfx0, [ip], {38}	; 0x26
    3de8:	30060205 	andcc	r0, r6, r5, lsl #4
    3dec:	4a4a0601 	bmi	12855f8 <__ccfg+0x1265650>
    3df0:	134a2e06 	movtne	r2, #44550	; 0xae06
    3df4:	3e060105 	adfccs	f0, f6, f5
    3df8:	022c0205 	eoreq	r0, ip, #1342177280	; 0x50000000
    3dfc:	01010006 	tsteq	r1, r6
    3e00:	05003205 	streq	r3, [r0, #-517]	; 0xfffffdfb
    3e04:	00000002 	andeq	r0, r0, r2
    3e08:	0a840300 	beq	fe104a10 <_estack+0xde0ffa10>
    3e0c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3e10:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    3e14:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3e18:	4a4a0620 	bmi	12856a0 <__ccfg+0x12656f8>
    3e1c:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    3e20:	0177cc03 	cmneq	r7, r3, lsl #24
    3e24:	b4030905 	strlt	r0, [r3], #-2309	; 0xfffff6fb
    3e28:	02052008 	andeq	r2, r5, #8
    3e2c:	77c90306 	strbvc	r0, [r9, r6, lsl #6]
    3e30:	0514133c 	ldreq	r1, [r4, #-828]	; 0xfffffcc4
    3e34:	05051303 	streq	r1, [r5, #-771]	; 0xfffffcfd
    3e38:	03050106 	movweq	r0, #20742	; 0x5106
    3e3c:	06052106 	streq	r2, [r5], -r6, lsl #2
    3e40:	03050106 	movweq	r0, #20742	; 0x5106
    3e44:	11053106 	tstne	r5, r6, lsl #2
    3e48:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    3e4c:	060f0501 	streq	r0, [pc], -r1, lsl #10
    3e50:	06050520 	streq	r0, [r5], -r0, lsr #10
    3e54:	03010513 	movweq	r0, #5395	; 0x1513
    3e58:	022008b4 	eoreq	r0, r0, #180, 16	; 0xb40000
    3e5c:	01010008 	tsteq	r1, r8
    3e60:	05002805 	streq	r2, [r0, #-2053]	; 0xfffff7fb
    3e64:	00247c02 	eoreq	r7, r4, r2, lsl #24
    3e68:	0a8c0300 	beq	fe304a70 <_estack+0xde2ffa70>
    3e6c:	03010501 	movweq	r0, #5377	; 0x1501
    3e70:	0102011a 	tsteq	r2, sl, lsl r1
    3e74:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
    3e78:	03000001 	movweq	r0, #1
    3e7c:	00008a00 	andeq	r8, r0, r0, lsl #20
    3e80:	fb010200 	blx	4468a <__ccfg+0x246e2>
    3e84:	01000d0e 	tsteq	r0, lr, lsl #26
    3e88:	00010101 	andeq	r0, r1, r1, lsl #2
    3e8c:	00010000 	andeq	r0, r1, r0
    3e90:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3e94:	2f656d6f 	svccs	0x00656d6f
    3e98:	70657473 	rsbvc	r7, r5, r3, ror r4
    3e9c:	2f6e6568 	svccs	0x006e6568
    3ea0:	6b736544 	blvs	1cdd3b8 <__ccfg+0x1cbd410>
    3ea4:	2f706f74 	svccs	0x00706f74
    3ea8:	4f534c4f 	svcmi	0x00534c4f
    3eac:	2f54454e 	svccs	0x0054454e
    3eb0:	4f434950 	svcmi	0x00434950
    3eb4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3eb8:	2f534f63 	svccs	0x00534f63
    3ebc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3ec0:	2f005858 	svccs	0x00005858
    3ec4:	2f727375 	svccs	0x00727375
    3ec8:	2f62696c 	svccs	0x0062696c
    3ecc:	2f636367 	svccs	0x00636367
    3ed0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3ed4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3ed8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3edc:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3ee0:	2f312e32 	svccs	0x00312e32
    3ee4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3ee8:	00656475 	rsbeq	r6, r5, r5, ror r4
    3eec:	61747300 	cmnvs	r4, r0, lsl #6
    3ef0:	70757472 	rsbsvc	r7, r5, r2, ror r4
    3ef4:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
    3ef8:	0100632e 	tsteq	r0, lr, lsr #6
    3efc:	74730000 	ldrbtvc	r0, [r3], #-0
    3f00:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3f04:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3f08:	05000000 	streq	r0, [r0, #-0]
    3f0c:	02050001 	andeq	r0, r5, #1
    3f10:	0000247e 	andeq	r2, r0, lr, ror r4
    3f14:	01028403 	tsteq	r2, r3, lsl #8
    3f18:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3f1c:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3f20:	01010001 	tsteq	r1, r1
    3f24:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3f28:	00248002 	eoreq	r8, r4, r2
    3f2c:	02960300 	addseq	r0, r6, #0, 6
    3f30:	16050501 	strne	r0, [r5], -r1, lsl #10
    3f34:	100a0514 	andne	r0, sl, r4, lsl r5
    3f38:	01000102 	tsteq	r0, r2, lsl #2
    3f3c:	00010501 	andeq	r0, r1, r1, lsl #10
    3f40:	24820205 	strcs	r0, [r2], #517	; 0x205
    3f44:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    3f48:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    3f4c:	0a051416 	beq	148fac <__ccfg+0x129004>
    3f50:	00010210 	andeq	r0, r1, r0, lsl r2
    3f54:	01050101 	tsteq	r5, r1, lsl #2
    3f58:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    3f5c:	03000024 	movweq	r0, #36	; 0x24
    3f60:	050101d2 	streq	r0, [r1, #-466]	; 0xfffffe2e
    3f64:	05171305 	ldreq	r1, [r7, #-773]	; 0xfffffcfb
    3f68:	7a030601 	bvc	c5774 <__ccfg+0xa57cc>
    3f6c:	26050501 	strcs	r0, [r5], -r1, lsl #10
    3f70:	05133306 	ldreq	r3, [r3, #-774]	; 0xfffffcfa
    3f74:	051f060e 	ldreq	r0, [pc, #-1550]	; 396e <NOROM_AONRTCCurrent64BitValueGet+0x2>
    3f78:	1d052105 	stfnes	f2, [r5, #-20]	; 0xffffffec
    3f7c:	05052006 	streq	r2, [r5, #-6]
    3f80:	36060106 	strcc	r0, [r6], -r6, lsl #2
    3f84:	0d030405 	cfstrseq	mvf0, [r3, #-20]	; 0xffffffec
    3f88:	33050590 	movwcc	r0, #21904	; 0x5590
    3f8c:	2f060105 	svccs	0x00060105
    3f90:	03060905 	movweq	r0, #26885	; 0x6905
    3f94:	16052067 	strne	r2, [r5], -r7, rrx
    3f98:	10020106 	andne	r0, r2, r6, lsl #2
    3f9c:	89010100 	stmdbhi	r1, {r8}
    3fa0:	03000001 	movweq	r0, #1
    3fa4:	00018300 	andeq	r8, r1, r0, lsl #6
    3fa8:	fb010200 	blx	447b2 <__ccfg+0x2480a>
    3fac:	01000d0e 	tsteq	r0, lr, lsl #26
    3fb0:	00010101 	andeq	r0, r1, r1, lsl #2
    3fb4:	00010000 	andeq	r0, r1, r0
    3fb8:	752f0100 	strvc	r0, [pc, #-256]!	; 3ec0 <NOROM_SetupTrimDevice+0xc>
    3fbc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3df8 <TrimAfterColdResetWakeupFromShutDown+0x18>
    3fc0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3fc4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3fc8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3fcc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3fd0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3fd4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3fd8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3fdc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3fe0:	2f006564 	svccs	0x00006564
    3fe4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3fe8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    3fec:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    3ff0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3ff4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3ff8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3ffc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4000:	4349502f 	movtmi	r5, #36911	; 0x902f
    4004:	502f534f 	eorpl	r5, pc, pc, asr #6
    4008:	534f6369 	movtpl	r6, #62313	; 0xf369
    400c:	3143432f 	cmpcc	r3, pc, lsr #6
    4010:	2f585833 	svccs	0x00585833
    4014:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4018:	41575858 	cmpmi	r7, r8, asr r8
    401c:	692f4552 	stmdbvs	pc!, {r1, r4, r6, r8, sl, lr}	; <UNPREDICTABLE>
    4020:	2f00636e 	svccs	0x0000636e
    4024:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4028:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    402c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4030:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4034:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4038:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    403c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4040:	4349502f 	movtmi	r5, #36911	; 0x902f
    4044:	502f534f 	eorpl	r5, pc, pc, asr #6
    4048:	534f6369 	movtpl	r6, #62313	; 0xf369
    404c:	3143432f 	cmpcc	r3, pc, lsr #6
    4050:	00585833 	subseq	r5, r8, r3, lsr r8
    4054:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3fa0 <NOROM_SetupSetVddrLevel+0x48>
    4058:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    405c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4060:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4064:	6f746b73 	svcvs	0x00746b73
    4068:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    406c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4070:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4074:	2f534f43 	svccs	0x00534f43
    4078:	4f636950 	svcmi	0x00636950
    407c:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    4080:	2f656d6f 	svccs	0x00656d6f
    4084:	70657473 	rsbvc	r7, r5, r3, ror r4
    4088:	2f6e6568 	svccs	0x006e6568
    408c:	6b736544 	blvs	1cdd5a4 <__ccfg+0x1cbd5fc>
    4090:	2f706f74 	svccs	0x00706f74
    4094:	4f534c4f 	svcmi	0x00534c4f
    4098:	2f54454e 	svccs	0x0054454e
    409c:	4f434950 	svcmi	0x00434950
    40a0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    40a4:	2f534f63 	svccs	0x00534f63
    40a8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    40ac:	00006c65 	andeq	r6, r0, r5, ror #24
    40b0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    40b4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    40b8:	00000100 	andeq	r0, r0, r0, lsl #2
    40bc:	635f7768 	cmpvs	pc, #104, 14	; 0x1a00000
    40c0:	5f676663 	svcpl	0x00676663
    40c4:	706d6973 	rsbvc	r6, sp, r3, ror r9
    40c8:	735f656c 	cmpvc	pc, #108, 10	; 0x1b000000
    40cc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    40d0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    40d4:	61000002 	tstvs	r0, r2
    40d8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    40dc:	00030068 	andeq	r0, r3, r8, rrx
    40e0:	63616d00 	cmnvs	r1, #0, 26
    40e4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    40e8:	70000003 	andvc	r0, r0, r3
    40ec:	5f736e69 	svcpl	0x00736e69
    40f0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    40f4:	00030068 	andeq	r0, r3, r8, rrx
    40f8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    40fc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4100:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4104:	0300682e 	movweq	r6, #2094	; 0x82e
    4108:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    410c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4110:	00040068 	andeq	r0, r4, r8, rrx
    4114:	72656b00 	rsbvc	r6, r5, #0, 22
    4118:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    411c:	00050068 	andeq	r0, r5, r8, rrx
    4120:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    4124:	00632e67 	rsbeq	r2, r3, r7, ror #28
    4128:	00000003 	andeq	r0, r0, r3
    412c:	0000029e 	muleq	r0, lr, r2
    4130:	01c50003 	biceq	r0, r5, r3
    4134:	01020000 	mrseq	r0, (UNDEF: 2)
    4138:	000d0efb 	strdeq	r0, [sp], -fp
    413c:	01010101 	tsteq	r1, r1, lsl #2
    4140:	01000000 	mrseq	r0, (UNDEF: 0)
    4144:	2f010000 	svccs	0x00010000
    4148:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    414c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4150:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4154:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4158:	706f746b 	rsbvc	r7, pc, fp, ror #8
    415c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4160:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4164:	4349502f 	movtmi	r5, #36911	; 0x902f
    4168:	502f534f 	eorpl	r5, pc, pc, asr #6
    416c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4170:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4174:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4178:	6f736e65 	svcvs	0x00736e65
    417c:	2f007372 	svccs	0x00007372
    4180:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4184:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4188:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    418c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4190:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4194:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4198:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    419c:	4349502f 	movtmi	r5, #36911	; 0x902f
    41a0:	502f534f 	eorpl	r5, pc, pc, asr #6
    41a4:	534f6369 	movtpl	r6, #62313	; 0xf369
    41a8:	3143432f 	cmpcc	r3, pc, lsr #6
    41ac:	00585833 	subseq	r5, r8, r3, lsr r8
    41b0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 40fc <NOROM_SetupGetTrimForAmpcompTh2+0x8>
    41b4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    41b8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    41bc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    41c0:	6f746b73 	svcvs	0x00746b73
    41c4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    41c8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    41cc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    41d0:	2f534f43 	svccs	0x00534f43
    41d4:	4f636950 	svcmi	0x00636950
    41d8:	43432f53 	movtmi	r2, #16211	; 0x3f53
    41dc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    41e0:	3143432f 	cmpcc	r3, pc, lsr #6
    41e4:	57585833 	smmlarpl	r8, r3, r8, r5
    41e8:	2f455241 	svccs	0x00455241
    41ec:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    41f0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    41f4:	752f0062 	strvc	r0, [pc, #-98]!	; 419a <NOROM_SetupGetTrimForAdcShModeEn+0xa>
    41f8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4034 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x60>
    41fc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4200:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4204:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4208:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    420c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4210:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4214:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4218:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    421c:	2f006564 	svccs	0x00006564
    4220:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4224:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4228:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    422c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4230:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4234:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4238:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    423c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4240:	502f534f 	eorpl	r5, pc, pc, asr #6
    4244:	534f6369 	movtpl	r6, #62313	; 0xf369
    4248:	6f682f00 	svcvs	0x00682f00
    424c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4250:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4254:	442f6e65 	strtmi	r6, [pc], #-3685	; 425c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x18>
    4258:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    425c:	4f2f706f 	svcmi	0x002f706f
    4260:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4264:	502f5445 	eorpl	r5, pc, r5, asr #8
    4268:	534f4349 	movtpl	r4, #62281	; 0xf349
    426c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4270:	6b2f534f 	blvs	bd8fb4 <__ccfg+0xbb900c>
    4274:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4278:	7000006c 	andvc	r0, r0, ip, rrx
    427c:	735f6e69 	cmpvc	pc, #1680	; 0x690
    4280:	6f736e65 	svcvs	0x00736e65
    4284:	00632e72 	rsbeq	r2, r3, r2, ror lr
    4288:	63000001 	movwvs	r0, #1
    428c:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    4290:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
    4294:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4298:	70670000 	rsbvc	r0, r7, r0
    429c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    42a0:	00000300 	andeq	r0, r0, r0, lsl #6
    42a4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    42a8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    42ac:	00000400 	andeq	r0, r0, r0, lsl #8
    42b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    42b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    42b8:	616d0000 	cmnvs	sp, r0
    42bc:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    42c0:	00000200 	andeq	r0, r0, r0, lsl #4
    42c4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    42c8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    42cc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    42d0:	75620000 	strbvc	r0, [r2, #-0]!
    42d4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    42d8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    42dc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    42e0:	73000002 	movwvc	r0, #2
    42e4:	6f697379 	svcvs	0x00697379
    42e8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    42ec:	656b0000 	strbvs	r0, [fp, #-0]!
    42f0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    42f4:	0600682e 	streq	r6, [r0], -lr, lsr #16
    42f8:	05000000 	streq	r0, [r0, #-0]
    42fc:	02050019 	andeq	r0, r5, #25
    4300:	00000000 	andeq	r0, r0, r0
    4304:	05010e03 	streq	r0, [r1, #-3587]	; 0xfffff1fd
    4308:	0101011b 	tsteq	r1, fp, lsl r1
    430c:	01060105 	tsteq	r6, r5, lsl #2
    4310:	01000102 	tsteq	r0, r2, lsl #2
    4314:	003f0501 	eorseq	r0, pc, r1, lsl #10
    4318:	00000205 	andeq	r0, r0, r5, lsl #4
    431c:	10030000 	andne	r0, r3, r0
    4320:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4324:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    4328:	7a03063f 	bvc	c5c2c <__ccfg+0xa5c84>
    432c:	05052001 	streq	r2, [r5, #-1]
    4330:	06030526 	streq	r0, [r3], -r6, lsr #10
    4334:	06060522 	streq	r0, [r6], -r2, lsr #10
    4338:	06030501 	streq	r0, [r3], -r1, lsl #10
    433c:	0302044d 	movweq	r0, #9293	; 0x244d
    4340:	040100c1 	streq	r0, [r1], #-193	; 0xffffff3f
    4344:	20400301 	subcs	r0, r0, r1, lsl #6
    4348:	02044b3d 	andeq	r4, r4, #62464	; 0xf400
    434c:	04013303 	streq	r3, [r1], #-771	; 0xfffffcfd
    4350:	204e0301 	subcs	r0, lr, r1, lsl #6
    4354:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    4358:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    435c:	030f0503 	movweq	r0, #62723	; 0xf503
    4360:	042e018b 	strteq	r0, [lr], #-395	; 0xfffffe75
    4364:	03070501 	movweq	r0, #29953	; 0x7501
    4368:	05207ef5 	streq	r7, [r0, #-3829]!	; 0xfffff10b
    436c:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    4370:	0305130b 	movweq	r1, #21259	; 0x530b
    4374:	05030413 	streq	r0, [r3, #-1043]	; 0xfffffbed
    4378:	01830329 	orreq	r0, r3, r9, lsr #6
    437c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4380:	0b050104 	bleq	144798 <__ccfg+0x1247f0>
    4384:	7ef80306 	cdpvc	3, 15, cr0, cr8, cr6, {0}
    4388:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    438c:	0188030f 	orreq	r0, r8, pc, lsl #6
    4390:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4394:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    4398:	05030420 	streq	r0, [r3, #-1056]	; 0xfffffbe0
    439c:	01880333 	orreq	r0, r8, r3, lsr r3
    43a0:	2042052e 	subcs	r0, r2, lr, lsr #10
    43a4:	0b050104 	bleq	1447bc <__ccfg+0x124814>
    43a8:	2e7ef803 	cdpcs	8, 7, cr15, cr14, cr3, {0}
    43ac:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    43b0:	0805201f 	stmdaeq	r5, {r0, r1, r2, r3, r4, sp}
    43b4:	1e02052e 	cfsh32ne	mvfx0, mvfx2, #30
    43b8:	05220805 	streq	r0, [r2, #-2053]!	; 0xfffff7fb
    43bc:	051f063a 	ldreq	r0, [pc, #-1594]	; 3d8a <NOROM_RFCRTrim+0xfe>
    43c0:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    43c4:	01051106 	tsteq	r5, r6, lsl #2
    43c8:	00060223 	andeq	r0, r6, r3, lsr #4
    43cc:	03410101 	movteq	r0, #4353	; 0x1101
    43d0:	00030000 	andeq	r0, r3, r0
    43d4:	000001ae 	andeq	r0, r0, lr, lsr #3
    43d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    43dc:	0101000d 	tsteq	r1, sp
    43e0:	00000101 	andeq	r0, r0, r1, lsl #2
    43e4:	00000100 	andeq	r0, r0, r0, lsl #2
    43e8:	6f682f01 	svcvs	0x00682f01
    43ec:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    43f0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    43f4:	442f6e65 	strtmi	r6, [pc], #-3685	; 43fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x1c>
    43f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    43fc:	4f2f706f 	svcmi	0x002f706f
    4400:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4404:	502f5445 	eorpl	r5, pc, r5, asr #8
    4408:	534f4349 	movtpl	r4, #62281	; 0xf349
    440c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4410:	502f534f 	eorpl	r5, pc, pc, asr #6
    4414:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4418:	004f492f 	subeq	r4, pc, pc, lsr #18
    441c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4368 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x14>
    4420:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4424:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4428:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    442c:	6f746b73 	svcvs	0x00746b73
    4430:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4434:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4438:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    443c:	2f534f43 	svccs	0x00534f43
    4440:	4f636950 	svcmi	0x00636950
    4444:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4448:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    444c:	3143432f 	cmpcc	r3, pc, lsr #6
    4450:	57585833 	smmlarpl	r8, r3, r8, r5
    4454:	2f455241 	svccs	0x00455241
    4458:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    445c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4460:	752f0062 	strvc	r0, [pc, #-98]!	; 4406 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x26>
    4464:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 42a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x5c>
    4468:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    446c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4470:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4474:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4478:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    447c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4480:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4484:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4488:	2f006564 	svccs	0x00006564
    448c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4490:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4494:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4498:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    449c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    44a0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    44a4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    44a8:	4349502f 	movtmi	r5, #36911	; 0x902f
    44ac:	502f534f 	eorpl	r5, pc, pc, asr #6
    44b0:	534f6369 	movtpl	r6, #62313	; 0xf369
    44b4:	3143432f 	cmpcc	r3, pc, lsr #6
    44b8:	00585833 	subseq	r5, r8, r3, lsr r8
    44bc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4408 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x28>
    44c0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    44c4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    44c8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    44cc:	6f746b73 	svcvs	0x00746b73
    44d0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    44d4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    44d8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    44dc:	2f534f43 	svccs	0x00534f43
    44e0:	4f636950 	svcmi	0x00636950
    44e4:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    44e8:	2f656d6f 	svccs	0x00656d6f
    44ec:	70657473 	rsbvc	r7, r5, r3, ror r4
    44f0:	2f6e6568 	svccs	0x006e6568
    44f4:	6b736544 	blvs	1cdda0c <__ccfg+0x1cbda64>
    44f8:	2f706f74 	svccs	0x00706f74
    44fc:	4f534c4f 	svcmi	0x00534c4f
    4500:	2f54454e 	svccs	0x0054454e
    4504:	4f434950 	svcmi	0x00434950
    4508:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    450c:	2f534f63 	svccs	0x00534f63
    4510:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4514:	00006c65 	andeq	r6, r0, r5, ror #24
    4518:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    451c:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    4520:	00010063 	andeq	r0, r1, r3, rrx
    4524:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    4528:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    452c:	73000002 	movwvc	r0, #2
    4530:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4534:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4538:	61000003 	tstvs	r0, r3
    453c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4540:	00040068 	andeq	r0, r4, r8, rrx
    4544:	63616d00 	cmnvs	r1, #0, 26
    4548:	00682e68 	rsbeq	r2, r8, r8, ror #28
    454c:	70000004 	andvc	r0, r0, r4
    4550:	5f736e69 	svcpl	0x00736e69
    4554:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4558:	00040068 	andeq	r0, r4, r8, rrx
    455c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4560:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4564:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4568:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    456c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4570:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4574:	00050068 	andeq	r0, r5, r8, rrx
    4578:	72656b00 	rsbvc	r6, r5, #0, 22
    457c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    4580:	00060068 	andeq	r0, r6, r8, rrx
    4584:	01050000 	mrseq	r0, (UNDEF: 5)
    4588:	00020500 	andeq	r0, r2, r0, lsl #10
    458c:	03000000 	movweq	r0, #0
    4590:	0601011b 			; <UNDEFINED> instruction: 0x0601011b
    4594:	0602052e 	streq	r0, [r2], -lr, lsr #10
    4598:	060e056a 	streq	r0, [lr], -sl, ror #10
    459c:	20050501 	andcs	r0, r5, r1, lsl #10
    45a0:	31060305 	tstcc	r6, r5, lsl #6
    45a4:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    45a8:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    45ac:	01870302 	orreq	r0, r7, r2, lsl #6
    45b0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    45b4:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    45b8:	1c0f0520 	cfstr32ne	mvfx0, [pc], {32}
    45bc:	20061405 	andcs	r1, r6, r5, lsl #8
    45c0:	01061c05 	tsteq	r6, r5, lsl #24
    45c4:	06200205 	strteq	r0, [r0], -r5, lsl #4
    45c8:	4b2e1103 	blmi	b889dc <__ccfg+0xb68a34>
    45cc:	0303053d 	movweq	r0, #13629	; 0x353d
    45d0:	02042e71 	andeq	r2, r4, #1808	; 0x710
    45d4:	fe032905 	vseleq.f16	s4, s6, s10
    45d8:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    45dc:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    45e0:	fd030607 	stc2	6, cr0, [r3, #-28]	; 0xffffffe4
    45e4:	0204017e 	andeq	r0, r4, #-2147483617	; 0x8000001f
    45e8:	83030f05 	movwhi	r0, #16133	; 0x3f05
    45ec:	01042e01 	tsteq	r4, r1, lsl #28
    45f0:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    45f4:	0204207e 	andeq	r2, r4, #126	; 0x7e
    45f8:	83033305 	movwhi	r3, #13061	; 0x3305
    45fc:	01042001 	tsteq	r4, r1
    4600:	fd030605 	stc2	6, cr0, [r3, #-20]	; 0xffffffec
    4604:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    4608:	05053006 	streq	r3, [r5, #-6]
    460c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4610:	03054006 	movweq	r4, #20486	; 0x5006
    4614:	2e120306 	cdpcs	3, 1, cr0, cr2, cr6, {0}
    4618:	06052f06 	streq	r2, [r5], -r6, lsl #30
    461c:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
    4620:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4624:	16030602 	strne	r0, [r3], -r2, lsl #12
    4628:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    462c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4630:	eb030629 	bl	c5edc <__ccfg+0xa5f34>
    4634:	05055800 	streq	r5, [r5, #-2048]	; 0xfffff800
    4638:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    463c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4640:	7f900307 	svcvc	0x00900307
    4644:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4648:	00f0030f 	rscseq	r0, r0, pc, lsl #6
    464c:	20330520 	eorscs	r0, r3, r0, lsr #10
    4650:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    4654:	207f9003 	rsbscs	r9, pc, r3
    4658:	31060205 	tstcc	r6, r5, lsl #4
    465c:	01060505 	tsteq	r6, r5, lsl #10
    4660:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    4664:	05510205 	ldrbeq	r0, [r1, #-517]	; 0xfffffdfb
    4668:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    466c:	06290502 	strteq	r0, [r9], -r2, lsl #10
    4670:	3c00df03 	stccc	15, cr13, [r0], {3}
    4674:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4678:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    467c:	03070501 	movweq	r0, #29953	; 0x7501
    4680:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    4684:	030f0502 	movweq	r0, #62722	; 0xf502
    4688:	042e00e4 	strteq	r0, [lr], #-228	; 0xffffff1c
    468c:	03070501 	movweq	r0, #29953	; 0x7501
    4690:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    4694:	03330502 	teqeq	r3, #8388608	; 0x800000
    4698:	042000e4 	strteq	r0, [r0], #-228	; 0xffffff1c
    469c:	03050501 	movweq	r0, #21761	; 0x5501
    46a0:	05207f9c 	streq	r7, [r0, #-3996]!	; 0xfffff064
    46a4:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    46a8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    46ac:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    46b0:	03053106 	movweq	r3, #20742	; 0x5106
    46b4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    46b8:	01052206 	tsteq	r5, r6, lsl #4
    46bc:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    46c0:	0601052c 	streq	r0, [r1], -ip, lsr #10
    46c4:	000c024c 	andeq	r0, ip, ip, asr #4
    46c8:	29050101 	stmdbcs	r5, {r0, r8}
    46cc:	00020500 	andeq	r0, r2, r0, lsl #10
    46d0:	03000000 	movweq	r0, #0
    46d4:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    46d8:	0f051602 	svceq	0x00051602
    46dc:	29050106 	stmdbcs	r5, {r1, r2, r8}
    46e0:	240f051c 	strcs	r0, [pc], #-1308	; 46e8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b8>
    46e4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    46e8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    46ec:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    46f0:	2e780303 	cdpcs	3, 7, cr0, cr8, cr3, {0}
    46f4:	40060205 	andmi	r0, r6, r5, lsl #4
    46f8:	01060705 	tsteq	r6, r5, lsl #14
    46fc:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    4700:	2f2f0603 	svccs	0x002f0603
    4704:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    4708:	052c0305 	streq	r0, [ip, #-773]!	; 0xfffffcfb
    470c:	06023e01 	streq	r3, [r2], -r1, lsl #28
    4710:	36010100 	strcc	r0, [r1], -r0, lsl #2
    4714:	03000009 	movweq	r0, #9
    4718:	0001d100 	andeq	sp, r1, r0, lsl #2
    471c:	fb010200 	blx	44f26 <__ccfg+0x24f7e>
    4720:	01000d0e 	tsteq	r0, lr, lsl #26
    4724:	00010101 	andeq	r0, r1, r1, lsl #2
    4728:	00010000 	andeq	r0, r1, r0
    472c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4730:	2f656d6f 	svccs	0x00656d6f
    4734:	70657473 	rsbvc	r7, r5, r3, ror r4
    4738:	2f6e6568 	svccs	0x006e6568
    473c:	6b736544 	blvs	1cddc54 <__ccfg+0x1cbdcac>
    4740:	2f706f74 	svccs	0x00706f74
    4744:	4f534c4f 	svcmi	0x00534c4f
    4748:	2f54454e 	svccs	0x0054454e
    474c:	4f434950 	svcmi	0x00434950
    4750:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4754:	2f534f63 	svccs	0x00534f63
    4758:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    475c:	74532f73 	ldrbvc	r2, [r3], #-3955	; 0xfffff08d
    4760:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4764:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4768:	2f656d6f 	svccs	0x00656d6f
    476c:	70657473 	rsbvc	r7, r5, r3, ror r4
    4770:	2f6e6568 	svccs	0x006e6568
    4774:	6b736544 	blvs	1cddc8c <__ccfg+0x1cbdce4>
    4778:	2f706f74 	svccs	0x00706f74
    477c:	4f534c4f 	svcmi	0x00534c4f
    4780:	2f54454e 	svccs	0x0054454e
    4784:	4f434950 	svcmi	0x00434950
    4788:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    478c:	2f534f63 	svccs	0x00534f63
    4790:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4794:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    4798:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    479c:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    47a0:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    47a4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    47a8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    47ac:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    47b0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    47b4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    47b8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    47bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    47c0:	61652d65 	cmnvs	r5, r5, ror #26
    47c4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    47c8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    47cc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    47d0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    47d4:	6f682f00 	svcvs	0x00682f00
    47d8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    47dc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    47e0:	442f6e65 	strtmi	r6, [pc], #-3685	; 47e8 <NOROM_ChipInfo_GetChipFamily+0x20>
    47e4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    47e8:	4f2f706f 	svcmi	0x002f706f
    47ec:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    47f0:	502f5445 	eorpl	r5, pc, r5, asr #8
    47f4:	534f4349 	movtpl	r4, #62281	; 0xf349
    47f8:	6369502f 	cmnvs	r9, #47	; 0x2f
    47fc:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4800:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4804:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4808:	2f656d6f 	svccs	0x00656d6f
    480c:	70657473 	rsbvc	r7, r5, r3, ror r4
    4810:	2f6e6568 	svccs	0x006e6568
    4814:	6b736544 	blvs	1cddd2c <__ccfg+0x1cbdd84>
    4818:	2f706f74 	svccs	0x00706f74
    481c:	4f534c4f 	svcmi	0x00534c4f
    4820:	2f54454e 	svccs	0x0054454e
    4824:	4f434950 	svcmi	0x00434950
    4828:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    482c:	00534f63 	subseq	r4, r3, r3, ror #30
    4830:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 477c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x2c>
    4834:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    4838:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    483c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4840:	6f746b73 	svcvs	0x00746b73
    4844:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4848:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    484c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4850:	2f534f43 	svccs	0x00534f43
    4854:	4f636950 	svcmi	0x00636950
    4858:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    485c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    4860:	74730000 	ldrbtvc	r0, [r3], #-0
    4864:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4868:	786d5f65 	stmdavc	sp!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    486c:	38723532 	ldmdacc	r2!, {r1, r4, r5, r8, sl, ip, sp}^
    4870:	2e353330 	mrccs	3, 1, r3, cr5, cr0, {1}
    4874:	00010063 	andeq	r0, r1, r3, rrx
    4878:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    487c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4880:	73000002 	movwvc	r0, #2
    4884:	61726f74 	cmnvs	r2, r4, ror pc
    4888:	655f6567 	ldrbvs	r6, [pc, #-1383]	; 4329 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe5>
    488c:	6f727065 	svcvs	0x00727065
    4890:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    4894:	73000001 	movwvc	r0, #1
    4898:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    489c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    48a0:	61000003 	tstvs	r0, r3
    48a4:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    48a8:	00040068 	andeq	r0, r4, r8, rrx
    48ac:	63616d00 	cmnvs	r1, #0, 26
    48b0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    48b4:	70000004 	andvc	r0, r0, r4
    48b8:	5f736e69 	svcpl	0x00736e69
    48bc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    48c0:	00040068 	andeq	r0, r4, r8, rrx
    48c4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    48c8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    48cc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    48d0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    48d4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    48d8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    48dc:	00050068 	andeq	r0, r5, r8, rrx
    48e0:	72656b00 	rsbvc	r6, r5, #0, 22
    48e4:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    48e8:	00060068 	andeq	r0, r6, r8, rrx
    48ec:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    48f0:	d0020500 	andle	r0, r2, r0, lsl #10
    48f4:	03000024 	movweq	r0, #36	; 0x24
    48f8:	02050118 	andeq	r0, r5, #24, 2
    48fc:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
    4900:	19050115 	stmdbne	r5, {r0, r2, r4, r8}
    4904:	09050d06 	stmdbeq	r5, {r1, r2, r8, sl, fp}
    4908:	05020425 	streq	r0, [r2, #-1061]	; 0xfffffbdb
    490c:	028a032d 	addeq	r0, sl, #-1275068416	; 0xb4000000
    4910:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4914:	7df10319 	ldclvc	3, cr0, [r1, #100]!	; 0x64
    4918:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    491c:	02c5032d 	sbceq	r0, r5, #-1275068416	; 0xb4000000
    4920:	030f0520 	movweq	r0, #62752	; 0xf520
    4924:	05207ed0 	streq	r7, [r0, #-3792]!	; 0xfffff130
    4928:	00fa032d 	rscseq	r0, sl, sp, lsr #6
    492c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4930:	f7030603 			; <UNDEFINED> instruction: 0xf7030603
    4934:	0204207d 	andeq	r2, r4, #125	; 0x7d
    4938:	03060f05 	movweq	r0, #28421	; 0x6f05
    493c:	0401018f 	streq	r0, [r1], #-399	; 0xfffffe71
    4940:	03050501 	movweq	r0, #21761	; 0x5501
    4944:	05207ef1 	streq	r7, [r0, #-3825]!	; 0xfffff10f
    4948:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    494c:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    4950:	05020421 	streq	r0, [r2, #-1057]	; 0xfffffbdf
    4954:	01890329 	orreq	r0, r9, r9, lsr #6
    4958:	17050501 	strne	r0, [r5, -r1, lsl #10]
    495c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    4960:	017ef303 	cmneq	lr, r3, lsl #6	; <UNPREDICTABLE>
    4964:	01060605 	tsteq	r6, r5, lsl #12
    4968:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    496c:	29050204 	stmdbcs	r5, {r2, r9}
    4970:	01028103 	tsteq	r2, r3, lsl #2
    4974:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4978:	06020501 	streq	r0, [r2], -r1, lsl #10
    497c:	017df603 	cmneq	sp, r3, lsl #12	; <UNPREDICTABLE>
    4980:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4984:	20028a03 	andcs	r8, r2, r3, lsl #20
    4988:	03050104 	movweq	r0, #20740	; 0x5104
    498c:	7dfb0306 	ldclvc	3, cr0, [fp, #24]!
    4990:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4994:	02b60329 	adcseq	r0, r6, #-1543503872	; 0xa4000000
    4998:	17050501 	strne	r0, [r5, -r1, lsl #10]
    499c:	01062d05 	tsteq	r6, r5, lsl #26
    49a0:	1c050104 	stfnes	f0, [r5], {4}
    49a4:	7dc00306 	stclvc	3, cr0, [r0, #24]
    49a8:	01150520 	tsteq	r5, r0, lsr #10
    49ac:	01060205 	tsteq	r6, r5, lsl #4
    49b0:	09030105 	stmdbeq	r3, {r0, r2, r8}
    49b4:	00070220 	andeq	r0, r7, r0, lsr #4
    49b8:	1f050101 	svcne	0x00050101
    49bc:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    49c0:	03000025 	movweq	r0, #37	; 0x25
    49c4:	02050128 	andeq	r0, r5, #40, 2
    49c8:	0e051414 	cfmvdlreq	mvd5, r1
    49cc:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    49d0:	0204200e 	andeq	r2, r4, #14
    49d4:	ff032d05 			; <UNDEFINED> instruction: 0xff032d05
    49d8:	01043c01 	tsteq	r4, r1, lsl #24
    49dc:	03060305 	movweq	r0, #25349	; 0x6305
    49e0:	054a7e86 	strbeq	r7, [sl, #-3718]	; 0xfffff17a
    49e4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    49e8:	042f0604 	strteq	r0, [pc], #-1540	; 49f0 <__aeabi_lmul+0x30>
    49ec:	03290502 			; <UNDEFINED> instruction: 0x03290502
    49f0:	050101f4 	streq	r0, [r1, #-500]	; 0xfffffe0c
    49f4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    49f8:	01040106 	tsteq	r4, r6, lsl #2
    49fc:	03060405 	movweq	r0, #25605	; 0x6405
    4a00:	042e7e89 	strteq	r7, [lr], #-3721	; 0xfffff177
    4a04:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4a08:	050102a8 	streq	r0, [r1, #-680]	; 0xfffffd58
    4a0c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4a10:	01040106 	tsteq	r4, r6, lsl #2
    4a14:	03060305 	movweq	r0, #25349	; 0x6305
    4a18:	04207dd4 	strteq	r7, [r0], #-3540	; 0xfffff22c
    4a1c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4a20:	050101f1 	streq	r0, [r1, #-497]	; 0xfffffe0f
    4a24:	01041705 	tsteq	r4, r5, lsl #14
    4a28:	7e8c0306 	cdpvc	3, 8, cr0, cr12, cr6, {0}
    4a2c:	03020501 	movweq	r0, #9473	; 0x2501
    4a30:	02042079 	andeq	r2, r4, #121	; 0x79
    4a34:	fb032d05 	blx	cfe52 <__ccfg+0xafeaa>
    4a38:	01042001 	tsteq	r4, r1
    4a3c:	03060305 	movweq	r0, #25349	; 0x6305
    4a40:	04207e8b 	strteq	r7, [r0], #-3723	; 0xfffff175
    4a44:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4a48:	050102a6 	streq	r0, [r1, #-678]	; 0xfffffd5a
    4a4c:	01041705 	tsteq	r4, r5, lsl #14
    4a50:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    4a54:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4a58:	02aa032d 	adceq	r0, sl, #-1275068416	; 0xb4000000
    4a5c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4a60:	d6030603 	strle	r0, [r3], -r3, lsl #12
    4a64:	1505207d 	strne	r2, [r5, #-125]	; 0xffffff83
    4a68:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    4a6c:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    4a70:	01050106 	tsteq	r5, r6, lsl #2
    4a74:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    4a78:	01010005 	tsteq	r1, r5
    4a7c:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    4a80:	00253402 	eoreq	r3, r5, r2, lsl #8
    4a84:	01390300 	teqeq	r9, r0, lsl #6
    4a88:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    4a8c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4a90:	050103cf 	streq	r0, [r1, #-975]	; 0xfffffc31
    4a94:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4a98:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4a9c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4aa0:	7ca8031e 	stcvc	3, cr0, [r8], #120	; 0x78
    4aa4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4aa8:	03d80338 	bicseq	r0, r8, #56, 6	; 0xe0000000
    4aac:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4ab0:	ab030602 	blge	c62c0 <__ccfg+0xa6318>
    4ab4:	042f2e7c 	strteq	r2, [pc], #-3708	; 4abc <__aeabi_lmul+0xfc>
    4ab8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4abc:	050103cd 	streq	r0, [r1, #-973]	; 0xfffffc33
    4ac0:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4ac4:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4ac8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4acc:	7cad0301 	stcvc	3, cr0, [sp], #4
    4ad0:	0004022e 	andeq	r0, r4, lr, lsr #4
    4ad4:	27050101 	strcs	r0, [r5, -r1, lsl #2]
    4ad8:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    4adc:	03000025 	movweq	r0, #37	; 0x25
    4ae0:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    4ae4:	27051602 	strcs	r1, [r5, -r2, lsl #12]
    4ae8:	042e0e06 	strteq	r0, [lr], #-3590	; 0xfffff1fa
    4aec:	03380502 	teqeq	r8, #8388608	; 0x800000
    4af0:	042e03ba 	strteq	r0, [lr], #-954	; 0xfffffc46
    4af4:	03090501 	movweq	r0, #38145	; 0x9501
    4af8:	04207cca 	strteq	r7, [r0], #-3274	; 0xfffff336
    4afc:	03380502 	teqeq	r8, #8388608	; 0x800000
    4b00:	042e03b6 	strteq	r0, [lr], #-950	; 0xfffffc4a
    4b04:	06080501 	streq	r0, [r8], -r1, lsl #10
    4b08:	207cca03 	rsbscs	ip, ip, r3, lsl #20
    4b0c:	73030205 	movwvc	r0, #12805	; 0x3205
    4b10:	0204143c 	andeq	r1, r4, #60, 8	; 0x3c000000
    4b14:	ba032905 	blt	cef30 <__ccfg+0xaef88>
    4b18:	3d050103 	stfccs	f0, [r5, #-12]
    4b1c:	17050514 	smladne	r5, r4, r5, r0
    4b20:	02050104 	andeq	r0, r5, #4, 2
    4b24:	7cc00306 	stclvc	3, cr0, [r0], {6}
    4b28:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4b2c:	03c00338 	biceq	r0, r0, #56, 6	; 0xe0000000
    4b30:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4b34:	c0030602 	andgt	r0, r3, r2, lsl #12
    4b38:	052f207c 	streq	r2, [pc, #-124]!	; 4ac4 <__aeabi_lmul+0x104>
    4b3c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4b40:	042f0602 	strteq	r0, [pc], #-1538	; 4b48 <__aeabi_lmul+0x188>
    4b44:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4b48:	050103b7 	streq	r0, [r1, #-951]	; 0xfffffc49
    4b4c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4b50:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4b54:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4b58:	c3030602 	movwgt	r0, #13826	; 0x3602
    4b5c:	0f052e7c 	svceq	0x00052e7c
    4b60:	01051906 	tsteq	r5, r6, lsl #18
    4b64:	06030536 			; <UNDEFINED> instruction: 0x06030536
    4b68:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    4b6c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4b70:	4c4b0604 	mcrrmi	6, 0, r0, fp, cr4
    4b74:	0007024b 	andeq	r0, r7, fp, asr #4
    4b78:	16050101 	strne	r0, [r5], -r1, lsl #2
    4b7c:	a0020500 	andge	r0, r2, r0, lsl #10
    4b80:	03000025 	movweq	r0, #37	; 0x25
    4b84:	05010181 	streq	r0, [r1, #-385]	; 0xfffffe7f
    4b88:	16051602 	strne	r1, [r5], -r2, lsl #12
    4b8c:	06050e06 	streq	r0, [r5], -r6, lsl #28
    4b90:	20050524 	andcs	r0, r5, r4, lsr #10
    4b94:	30060305 	andcc	r0, r6, r5, lsl #6
    4b98:	055e0205 	ldrbeq	r0, [lr, #-517]	; 0xfffffdfb
    4b9c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4ba0:	03053d01 	movweq	r3, #23809	; 0x5d01
    4ba4:	02051b06 	andeq	r1, r5, #6144	; 0x1800
    4ba8:	01016603 	tsteq	r1, r3, lsl #12
    4bac:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    4bb0:	99032905 	stmdbls	r3, {r0, r2, r8, fp, sp}
    4bb4:	3d050103 	stfccs	f0, [r5, #-12]
    4bb8:	17050514 	smladne	r5, r4, r5, r0
    4bbc:	01063805 	tsteq	r6, r5, lsl #16
    4bc0:	02050104 	andeq	r0, r5, #4, 2
    4bc4:	2e7ce103 	expcse	f6, f3
    4bc8:	38050204 	stmdacc	r5, {r2, r9}
    4bcc:	20039f03 	andcs	r9, r3, r3, lsl #30
    4bd0:	02050104 	andeq	r0, r5, #4, 2
    4bd4:	7ce10306 	stclvc	3, cr0, [r1], #24
    4bd8:	02042f20 	andeq	r2, r4, #32, 30	; 0x80
    4bdc:	97032905 	strls	r2, [r3, -r5, lsl #18]
    4be0:	3d050103 	stfccs	f0, [r5, #-12]
    4be4:	17050514 	smladne	r5, r4, r5, r0
    4be8:	02050104 	andeq	r0, r5, #4, 2
    4bec:	7ce30306 	stclvc	3, cr0, [r3], #24
    4bf0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4bf4:	039d0338 	orrseq	r0, sp, #56, 6	; 0xe0000000
    4bf8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4bfc:	e3030602 	movw	r0, #13826	; 0x3602
    4c00:	0305207c 	movweq	r2, #20604	; 0x507c
    4c04:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    4c08:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    4c0c:	01010009 	tsteq	r1, r9
    4c10:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    4c14:	0025e002 	eoreq	lr, r5, r2
    4c18:	00f70300 	rscseq	r0, r7, r0, lsl #6
    4c1c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4c20:	10061705 	andne	r1, r6, r5, lsl #14
    4c24:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    4c28:	03052005 	movweq	r2, #20485	; 0x5005
    4c2c:	05593d06 	ldrbeq	r3, [r9, #-3334]	; 0xfffff2fa
    4c30:	016e0302 	cmneq	lr, r2, lsl #6
    4c34:	13030305 	movwne	r0, #13061	; 0x3305
    4c38:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    4c3c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4c40:	0501012f 	streq	r0, [r1, #-303]	; 0xfffffed1
    4c44:	02140601 	andseq	r0, r4, #1048576	; 0x100000
    4c48:	01010003 	tsteq	r1, r3
    4c4c:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
    4c50:	00260402 	eoreq	r0, r6, r2, lsl #8
    4c54:	01920300 	orrseq	r0, r2, r0, lsl #6
    4c58:	16020501 	strne	r0, [r2], -r1, lsl #10
    4c5c:	0e061105 	adfeqs	f1, f6, f5
    4c60:	06240205 	strteq	r0, [r4], -r5, lsl #4
    4c64:	0608052f 	streq	r0, [r8], -pc, lsr #10
    4c68:	03010501 	movweq	r0, #5377	; 0x1501
    4c6c:	08052e0e 	stmdaeq	r5, {r1, r2, r3, r9, sl, fp, sp}
    4c70:	05207203 	streq	r7, [r0, #-515]!	; 0xfffffdfd
    4c74:	0d030602 	stceq	6, cr0, [r3, #-8]
    4c78:	06010520 	streq	r0, [r1], -r0, lsr #10
    4c7c:	00030213 	andeq	r0, r3, r3, lsl r2
    4c80:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    4c84:	18020500 	stmdane	r2, {r8, sl}
    4c88:	03000026 	movweq	r0, #38	; 0x26
    4c8c:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    4c90:	06051402 	streq	r1, [r5], -r2, lsl #8
    4c94:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4c98:	06030520 	streq	r0, [r3], -r0, lsr #10
    4c9c:	0609052f 	streq	r0, [r9], -pc, lsr #10
    4ca0:	06030501 	streq	r0, [r3], -r1, lsl #10
    4ca4:	0601052f 	streq	r0, [r1], -pc, lsr #10
    4ca8:	00030230 	andeq	r0, r3, r0, lsr r2
    4cac:	2b050101 	blcs	1450b8 <__ccfg+0x125110>
    4cb0:	00020500 	andeq	r0, r2, r0, lsl #10
    4cb4:	03000000 	movweq	r0, #0
    4cb8:	060101af 	streq	r0, [r1], -pc, lsr #3
    4cbc:	06020520 	streq	r0, [r2], -r0, lsr #10
    4cc0:	06050530 			; <UNDEFINED> instruction: 0x06050530
    4cc4:	06020501 	streq	r0, [r2], -r1, lsl #10
    4cc8:	06050531 			; <UNDEFINED> instruction: 0x06050531
    4ccc:	3c180501 	cfldr32cc	mvfx0, [r8], {1}
    4cd0:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    4cd4:	303f0602 	eorscc	r0, pc, r2, lsl #12
    4cd8:	29050204 	stmdbcs	r5, {r2, r9}
    4cdc:	0102d103 	tsteq	r2, r3, lsl #2
    4ce0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4ce4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4ce8:	01040106 	tsteq	r4, r6, lsl #2
    4cec:	aa030205 	bge	c5508 <__ccfg+0xa5560>
    4cf0:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    4cf4:	d6033805 	strle	r3, [r3], -r5, lsl #16
    4cf8:	01042002 	tsteq	r4, r2
    4cfc:	03060205 	movweq	r0, #25093	; 0x6205
    4d00:	2f207daa 	svccs	0x00207daa
    4d04:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4d08:	02052008 	andeq	r2, r5, #8
    4d0c:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    4d10:	02c70329 	sbceq	r0, r7, #-1543503872	; 0xa4000000
    4d14:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4d18:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4d1c:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4d20:	06020501 	streq	r0, [r2], -r1, lsl #10
    4d24:	2e7db403 	cdpcs	4, 7, cr11, cr13, cr3, {0}
    4d28:	06010530 			; <UNDEFINED> instruction: 0x06010530
    4d2c:	06030513 			; <UNDEFINED> instruction: 0x06030513
    4d30:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    4d34:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4d38:	0a052e08 	beq	150560 <__ccfg+0x1305b8>
    4d3c:	023c7403 	eorseq	r7, ip, #50331648	; 0x3000000
    4d40:	01010005 	tsteq	r1, r5
    4d44:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    4d48:	00000002 	andeq	r0, r0, r2
    4d4c:	01ca0300 	biceq	r0, sl, r0, lsl #6
    4d50:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4d54:	10063105 	andne	r3, r6, r5, lsl #2
    4d58:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    4d5c:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    4d60:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    4d64:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
    4d68:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4d6c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4d70:	06052017 			; <UNDEFINED> instruction: 0x06052017
    4d74:	06030520 	streq	r0, [r3], -r0, lsr #10
    4d78:	06060530 			; <UNDEFINED> instruction: 0x06060530
    4d7c:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    4d80:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4d84:	03040530 	movweq	r0, #17712	; 0x4530
    4d88:	1005010a 	andne	r0, r5, sl, lsl #2
    4d8c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4d90:	20100520 	andscs	r0, r0, r0, lsr #10
    4d94:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    4d98:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4d9c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    4da0:	1f052009 	svcne	0x00052009
    4da4:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
    4da8:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
    4dac:	01060d05 	tsteq	r6, r5, lsl #26
    4db0:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    4db4:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    4db8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4dbc:	2f2f0605 	svccs	0x002f0605
    4dc0:	01060c05 	tsteq	r6, r5, lsl #24
    4dc4:	31030105 	tstcc	r3, r5, lsl #2
    4dc8:	06040520 	streq	r0, [r4], -r0, lsr #10
    4dcc:	05205203 	streq	r5, [r0, #-515]!	; 0xfffffdfd
    4dd0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4dd4:	25052007 	strcs	r2, [r5, #-7]
    4dd8:	201d0520 	andscs	r0, sp, r0, lsr #10
    4ddc:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    4de0:	01060b05 	tsteq	r6, r5, lsl #22
    4de4:	05280405 	streq	r0, [r8, #-1029]!	; 0xfffffbfb
    4de8:	04051e0b 	streq	r1, [r5], #-3595	; 0xfffff1f5
    4dec:	042f2206 	strteq	r2, [pc], #-518	; 4df4 <__aeabi_lmul+0x434>
    4df0:	06380502 	ldrteq	r0, [r8], -r2, lsl #10
    4df4:	01029603 	tsteq	r2, r3, lsl #12
    4df8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    4dfc:	2e7dea03 	vaddcs.f32	s29, s26, s6
    4e00:	03060205 	movweq	r0, #25093	; 0x6205
    4e04:	04207ec7 	strteq	r7, [r0], #-3783	; 0xfffff139
    4e08:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4e0c:	050103c8 	streq	r0, [r1, #-968]	; 0xfffffc38
    4e10:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4e14:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4e18:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4e1c:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
    4e20:	4b2f207c 	blmi	bcd018 <__ccfg+0xbad070>
    4e24:	02043d4b 	andeq	r3, r4, #4800	; 0x12c0
    4e28:	c3032905 	movwgt	r2, #14597	; 0x3905
    4e2c:	3d050103 	stfccs	f0, [r5, #-12]
    4e30:	17050514 	smladne	r5, r4, r5, r0
    4e34:	01063805 	tsteq	r6, r5, lsl #16
    4e38:	02050104 	andeq	r0, r5, #4, 2
    4e3c:	7dee0306 	stclvc	3, cr0, [lr, #24]!
    4e40:	060b052e 	streq	r0, [fp], -lr, lsr #10
    4e44:	05825503 	streq	r5, [r2, #1283]	; 0x503
    4e48:	1f030609 	svcne	0x00030609
    4e4c:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    4e50:	2e0c0501 	cfsh32cs	mvfx0, mvfx12, #1
    4e54:	05202a05 	streq	r2, [r0, #-2565]!	; 0xfffff5fb
    4e58:	05052022 	streq	r2, [r5, #-34]	; 0xffffffde
    4e5c:	0b053e06 	bleq	15467c <__ccfg+0x1346d4>
    4e60:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4e64:	0b053106 	bleq	151284 <__ccfg+0x1312dc>
    4e68:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4e6c:	06040535 			; <UNDEFINED> instruction: 0x06040535
    4e70:	592e0a03 	stmdbpl	lr!, {r0, r1, r9, fp}
    4e74:	01060905 	tsteq	r6, r5, lsl #18
    4e78:	054a0e03 	strbeq	r0, [sl, #-3587]	; 0xfffff1fd
    4e7c:	03210604 			; <UNDEFINED> instruction: 0x03210604
    4e80:	0359206b 	cmpeq	r9, #107	; 0x6b
    4e84:	054b200b 	strbeq	r2, [fp, #-11]
    4e88:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4e8c:	4b5e0604 	blmi	17866a4 <__ccfg+0x17666fc>
    4e90:	01060905 	tsteq	r6, r5, lsl #18
    4e94:	03060305 	movweq	r0, #25349	; 0x6305
    4e98:	05587fba 	ldrbeq	r7, [r8, #-4026]	; 0xfffff046
    4e9c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4ea0:	00083b09 	andeq	r3, r8, r9, lsl #22
    4ea4:	3b050101 	blcc	1452b0 <__ccfg+0x125308>
    4ea8:	00020500 	andeq	r0, r2, r0, lsl #10
    4eac:	03000000 	movweq	r0, #0
    4eb0:	050102a0 	streq	r0, [r1, #-672]	; 0xfffffd60
    4eb4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    4eb8:	050e063b 	streq	r0, [lr, #-1595]	; 0xfffff9c5
    4ebc:	3b05320c 	blcc	1516f4 <__ccfg+0x13174c>
    4ec0:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    4ec4:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    4ec8:	03053205 	movweq	r3, #20997	; 0x5205
    4ecc:	06053206 	streq	r3, [r5], -r6, lsl #4
    4ed0:	1a050106 	bne	1452f0 <__ccfg+0x125348>
    4ed4:	2e14053c 	mrccs	5, 0, r0, cr4, cr12, {1}
    4ed8:	3f060305 	svccc	0x00060305
    4edc:	01060805 	tsteq	r6, r5, lsl #16
    4ee0:	2f060305 	svccs	0x00060305
    4ee4:	01060805 	tsteq	r6, r5, lsl #16
    4ee8:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4eec:	01060805 	tsteq	r6, r5, lsl #16
    4ef0:	30060305 	andcc	r0, r6, r5, lsl #6
    4ef4:	0609052f 	streq	r0, [r9], -pc, lsr #10
    4ef8:	06030501 	streq	r0, [r3], -r1, lsl #10
    4efc:	060c0530 			; <UNDEFINED> instruction: 0x060c0530
    4f00:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    4f04:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4f08:	01060a05 	tsteq	r6, r5, lsl #20
    4f0c:	21060405 	tstcs	r6, r5, lsl #8
    4f10:	0601052f 	streq	r0, [r1], -pc, lsr #10
    4f14:	05012203 	streq	r2, [r1, #-515]	; 0xfffffdfd
    4f18:	62030603 	andvs	r0, r3, #3145728	; 0x300000
    4f1c:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    4f20:	20060501 	andcs	r0, r6, r1, lsl #10
    4f24:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    4f28:	4a062406 	bmi	18df48 <__ccfg+0x16dfa0>
    4f2c:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    4f30:	01c80329 	biceq	r0, r8, r9, lsr #6
    4f34:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4f38:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4f3c:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4f40:	03030501 	movweq	r0, #13569	; 0x3501
    4f44:	043c7eb3 	ldrteq	r7, [ip], #-3763	; 0xfffff14d
    4f48:	03380502 	teqeq	r8, #8388608	; 0x800000
    4f4c:	042001cd 	strteq	r0, [r0], #-461	; 0xfffffe33
    4f50:	06030501 	streq	r0, [r3], -r1, lsl #10
    4f54:	2e7eb303 	cdpcs	3, 7, cr11, cr14, cr3, {0}
    4f58:	0619052f 	ldreq	r0, [r9], -pc, lsr #10
    4f5c:	2e030501 	cfsh32cs	mvfx0, mvfx3, #1
    4f60:	3e4b4b06 	vmlacc.f64	d20, d11, d6
    4f64:	31060805 	tstcc	r6, r5, lsl #16
    4f68:	052b0c05 	streq	r0, [fp, #-3077]!	; 0xfffff3fb
    4f6c:	08052e09 	stmdaeq	r5, {r0, r3, r9, sl, fp, sp}
    4f70:	06090523 	streq	r0, [r9], -r3, lsr #10
    4f74:	2603051d 			; <UNDEFINED> instruction: 0x2603051d
    4f78:	29050204 	stmdbcs	r5, {r2, r9}
    4f7c:	0101bb03 	tsteq	r1, r3, lsl #22
    4f80:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4f84:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4f88:	01040106 	tsteq	r4, r6, lsl #2
    4f8c:	03060205 	movweq	r0, #25093	; 0x6205
    4f90:	053c7ec1 	ldreq	r7, [ip, #-3777]!	; 0xfffff13f
    4f94:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4f98:	4b400602 	blmi	10067a8 <__ccfg+0xfe6800>
    4f9c:	73030405 	movwvc	r0, #13317	; 0x3405
    4fa0:	06130520 	ldreq	r0, [r3], -r0, lsr #10
    4fa4:	3c040501 	cfstr32cc	mvfx0, [r4], {1}
    4fa8:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4fac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4fb0:	08055906 	stmdaeq	r5, {r1, r2, r8, fp, ip, lr}
    4fb4:	0b050106 	bleq	1453d4 <__ccfg+0x12542c>
    4fb8:	024a5d03 	subeq	r5, sl, #3, 26	; 0xc0
    4fbc:	0101000d 	tsteq	r1, sp
    4fc0:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    4fc4:	00000002 	andeq	r0, r0, r2
    4fc8:	02da0300 	sbcseq	r0, sl, #0, 6
    4fcc:	15010501 	strne	r0, [r1, #-1281]	; 0xfffffaff
    4fd0:	01000102 	tsteq	r0, r2, lsl #2
    4fd4:	00180501 	andseq	r0, r8, r1, lsl #10
    4fd8:	00000205 	andeq	r0, r0, r5, lsl #4
    4fdc:	df030000 	svcle	0x00030000
    4fe0:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4fe4:	06010515 			; <UNDEFINED> instruction: 0x06010515
    4fe8:	00020213 	andeq	r0, r2, r3, lsl r2
    4fec:	03040101 	movweq	r0, #16641	; 0x4101
    4ff0:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    4ff4:	00000002 	andeq	r0, r0, r2
    4ff8:	02051900 	andeq	r1, r5, #0, 18
    4ffc:	06050514 			; <UNDEFINED> instruction: 0x06050514
    5000:	06030501 	streq	r0, [r3], -r1, lsl #10
    5004:	06070521 	streq	r0, [r7], -r1, lsr #10
    5008:	06020501 	streq	r0, [r2], -r1, lsl #10
    500c:	06050530 			; <UNDEFINED> instruction: 0x06050530
    5010:	06030501 	streq	r0, [r3], -r1, lsl #10
    5014:	06080521 	streq	r0, [r8], -r1, lsr #10
    5018:	06020501 	streq	r0, [r2], -r1, lsl #10
    501c:	0601053e 			; <UNDEFINED> instruction: 0x0601053e
    5020:	00030213 	andeq	r0, r3, r3, lsl r2
    5024:	03040101 	movweq	r0, #16641	; 0x4101
    5028:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    502c:	00000002 	andeq	r0, r0, r2
    5030:	01120300 	tsteq	r2, r0, lsl #6
    5034:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    5038:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    503c:	2f062202 	svccs	0x00062202
    5040:	06010567 	streq	r0, [r1], -r7, ror #10
    5044:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    5048:	01000202 	tsteq	r0, r2, lsl #4
    504c:	0001b001 	andeq	fp, r1, r1
    5050:	25000300 	strcs	r0, [r0, #-768]	; 0xfffffd00
    5054:	02000001 	andeq	r0, r0, #1
    5058:	0d0efb01 	vstreq	d15, [lr, #-4]
    505c:	01010100 	mrseq	r0, (UNDEF: 17)
    5060:	00000001 	andeq	r0, r0, r1
    5064:	01000001 	tsteq	r0, r1
    5068:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4fb4 <__aeabi_lmul+0x5f4>
    506c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5070:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5074:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5078:	6f746b73 	svcvs	0x00746b73
    507c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5080:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5084:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5088:	2f534f43 	svccs	0x00534f43
    508c:	4f636950 	svcmi	0x00636950
    5090:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5094:	2f736269 	svccs	0x00736269
    5098:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    509c:	2f006c61 	svccs	0x00006c61
    50a0:	2f727375 	svccs	0x00727375
    50a4:	2f62696c 	svccs	0x0062696c
    50a8:	2f636367 	svccs	0x00636367
    50ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    50b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    50b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    50b8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    50bc:	2f312e32 	svccs	0x00312e32
    50c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    50c4:	00656475 	rsbeq	r6, r5, r5, ror r4
    50c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5014 <__aeabi_lmul+0x654>
    50cc:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    50d0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    50d4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    50d8:	6f746b73 	svcvs	0x00746b73
    50dc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    50e0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    50e4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    50e8:	2f534f43 	svccs	0x00534f43
    50ec:	4f636950 	svcmi	0x00636950
    50f0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    50f4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    50f8:	6f682f00 	svcvs	0x00682f00
    50fc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5100:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5104:	442f6e65 	strtmi	r6, [pc], #-3685	; 510c <port_confs+0x28>
    5108:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    510c:	4f2f706f 	svcmi	0x002f706f
    5110:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5114:	502f5445 	eorpl	r5, pc, r5, asr #8
    5118:	534f4349 	movtpl	r4, #62281	; 0xf349
    511c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5120:	0000534f 	andeq	r5, r0, pc, asr #6
    5124:	5f726573 	svcpl	0x00726573
    5128:	2e74756f 	cdpcs	5, 7, cr7, cr4, cr15, {3}
    512c:	00010063 	andeq	r0, r1, r3, rrx
    5130:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5134:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5138:	00020068 	andeq	r0, r2, r8, rrx
    513c:	63726100 	cmnvs	r2, #0, 2
    5140:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5144:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5148:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    514c:	00030068 	andeq	r0, r3, r8, rrx
    5150:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5154:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5158:	00682e73 	rsbeq	r2, r8, r3, ror lr
    515c:	62000003 	andvs	r0, r0, #3
    5160:	6f747475 	svcvs	0x00747475
    5164:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5168:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    516c:	00000300 	andeq	r0, r0, r0, lsl #6
    5170:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5174:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5178:	00000004 	andeq	r0, r0, r4
    517c:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
    5180:	00262c02 	eoreq	r2, r6, r2, lsl #24
    5184:	010a0300 	mrseq	r0, (UNDEF: 58)
    5188:	13140205 	tstne	r4, #1342177280	; 0x50000000
    518c:	06260514 			; <UNDEFINED> instruction: 0x06260514
    5190:	0e05200d 	cdpeq	0, 0, cr2, cr5, cr13, {0}
    5194:	1b260525 	blne	986630 <__ccfg+0x966688>
    5198:	05250e05 	streq	r0, [r5, #-3589]!	; 0xfffff1fb
    519c:	03052e05 	movweq	r2, #24069	; 0x5e05
    51a0:	033d2206 	teqeq	sp, #1610612736	; 0x60000000
    51a4:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    51a8:	052e7603 	streq	r7, [lr, #-1539]!	; 0xfffff9fd
    51ac:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    51b0:	052f0603 	streq	r0, [pc, #-1539]!	; 4bb5 <__aeabi_lmul+0x1f5>
    51b4:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    51b8:	02053c08 	andeq	r3, r5, #8, 24	; 0x800
    51bc:	15052406 	strne	r2, [r5, #-1030]	; 0xfffffbfa
    51c0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    51c4:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    51c8:	4a7a0332 	bmi	1e85e98 <__ccfg+0x1e65ef0>
    51cc:	01060d05 	tsteq	r6, r5, lsl #26
    51d0:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    51d4:	0a030602 	beq	c69e4 <__ccfg+0xa6a3c>
    51d8:	0605052e 	streq	r0, [r5], -lr, lsr #10
    51dc:	06030501 	streq	r0, [r3], -r1, lsl #10
    51e0:	4002052f 	andmi	r0, r2, pc, lsr #10
    51e4:	01060605 	tsteq	r6, r5, lsl #12
    51e8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    51ec:	3e220603 	cfmadda32cc	mvax0, mvax0, mvfx2, mvfx3
    51f0:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    51f4:	580a0302 	stmdapl	sl, {r1, r8, r9}
    51f8:	13060105 	movwne	r0, #24837	; 0x6105
    51fc:	01000502 	tsteq	r0, r2, lsl #10
    5200:	0001c401 	andeq	ip, r1, r1, lsl #8
    5204:	24000300 	strcs	r0, [r0], #-768	; 0xfffffd00
    5208:	02000001 	andeq	r0, r0, #1
    520c:	0d0efb01 	vstreq	d15, [lr, #-4]
    5210:	01010100 	mrseq	r0, (UNDEF: 17)
    5214:	00000001 	andeq	r0, r0, r1
    5218:	01000001 	tsteq	r0, r1
    521c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5168 <__pi_hex_enc_table+0x17>
    5220:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5224:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5228:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    522c:	6f746b73 	svcvs	0x00746b73
    5230:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5234:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5238:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    523c:	2f534f43 	svccs	0x00534f43
    5240:	4f636950 	svcmi	0x00636950
    5244:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5248:	2f736269 	svccs	0x00736269
    524c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5250:	2f006c61 	svccs	0x00006c61
    5254:	2f727375 	svccs	0x00727375
    5258:	2f62696c 	svccs	0x0062696c
    525c:	2f636367 	svccs	0x00636367
    5260:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5264:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5268:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    526c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5270:	2f312e32 	svccs	0x00312e32
    5274:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5278:	00656475 	rsbeq	r6, r5, r5, ror r4
    527c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 51c8 <__pi_hex_enc_table+0x77>
    5280:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5284:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5288:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    528c:	6f746b73 	svcvs	0x00746b73
    5290:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5294:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5298:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    529c:	2f534f43 	svccs	0x00534f43
    52a0:	4f636950 	svcmi	0x00636950
    52a4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    52a8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    52ac:	6f682f00 	svcvs	0x00682f00
    52b0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    52b4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    52b8:	442f6e65 	strtmi	r6, [pc], #-3685	; 52c0 <patchGenfskRfe+0x44>
    52bc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    52c0:	4f2f706f 	svcmi	0x002f706f
    52c4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    52c8:	502f5445 	eorpl	r5, pc, r5, asr #8
    52cc:	534f4349 	movtpl	r4, #62281	; 0xf349
    52d0:	6369502f 	cmnvs	r9, #47	; 0x2f
    52d4:	0000534f 	andeq	r5, r0, pc, asr #6
    52d8:	5f726573 	svcpl	0x00726573
    52dc:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    52e0:	00000100 	andeq	r0, r0, r0, lsl #2
    52e4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    52e8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    52ec:	00000200 	andeq	r0, r0, r0, lsl #4
    52f0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    52f4:	0300682e 	movweq	r6, #2094	; 0x82e
    52f8:	616d0000 	cmnvs	sp, r0
    52fc:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5300:	00000300 	andeq	r0, r0, r0, lsl #6
    5304:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    5308:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    530c:	0300682e 	movweq	r6, #2094	; 0x82e
    5310:	75620000 	strbvc	r0, [r2, #-0]!
    5314:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    5318:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    531c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5320:	73000003 	movwvc	r0, #3
    5324:	6f697379 	svcvs	0x00697379
    5328:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    532c:	05000000 	streq	r0, [r0, #-0]
    5330:	0205002a 	andeq	r0, r5, #42	; 0x2a
    5334:	00002698 	muleq	r0, r8, r6
    5338:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    533c:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    5340:	7a03062a 	bvc	c6bf0 <__ccfg+0xa6c48>
    5344:	05052001 	streq	r2, [r5, #-1]
    5348:	06020534 			; <UNDEFINED> instruction: 0x06020534
    534c:	06100532 			; <UNDEFINED> instruction: 0x06100532
    5350:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    5354:	21060305 	tstcs	r6, r5, lsl #6
    5358:	01060f05 	tsteq	r6, r5, lsl #30
    535c:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    5360:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5364:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5368:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    536c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5370:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    5374:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    5378:	054f0205 	strbeq	r0, [pc, #-517]	; 517b <__pi_hex_enc_table+0x2a>
    537c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5380:	052f0603 	streq	r0, [pc, #-1539]!	; 4d85 <__aeabi_lmul+0x3c5>
    5384:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    5388:	02052008 	andeq	r2, r5, #8
    538c:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    5390:	03050106 	movweq	r0, #20742	; 0x5106
    5394:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    5398:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    539c:	3d593e06 	ldclcc	14, cr3, [r9, #-24]	; 0xffffffe8
    53a0:	01060c05 	tsteq	r6, r5, lsl #24
    53a4:	2f060205 	svccs	0x00060205
    53a8:	01060505 	tsteq	r6, r5, lsl #10
    53ac:	2f060305 	svccs	0x00060305
    53b0:	01060e05 	tsteq	r6, r5, lsl #28
    53b4:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
    53b8:	75030603 	strvc	r0, [r3, #-1539]	; 0xfffff9fd
    53bc:	060a052e 	streq	r0, [sl], -lr, lsr #10
    53c0:	4a6e0301 	bmi	1b85fcc <__ccfg+0x1b66024>
    53c4:	01000702 	tsteq	r0, r2, lsl #14
    53c8:	0001a101 	andeq	sl, r1, r1, lsl #2
    53cc:	40000300 	andmi	r0, r0, r0, lsl #6
    53d0:	02000001 	andeq	r0, r0, #1
    53d4:	0d0efb01 	vstreq	d15, [lr, #-4]
    53d8:	01010100 	mrseq	r0, (UNDEF: 17)
    53dc:	00000001 	andeq	r0, r0, r1
    53e0:	01000001 	tsteq	r0, r1
    53e4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5330 <patchGenfskRfe+0xb4>
    53e8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    53ec:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    53f0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    53f4:	6f746b73 	svcvs	0x00746b73
    53f8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    53fc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5400:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5404:	2f534f43 	svccs	0x00534f43
    5408:	4f636950 	svcmi	0x00636950
    540c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5410:	2f736269 	svccs	0x00736269
    5414:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5418:	2f006c61 	svccs	0x00006c61
    541c:	2f727375 	svccs	0x00727375
    5420:	2f62696c 	svccs	0x0062696c
    5424:	2f636367 	svccs	0x00636367
    5428:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    542c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5430:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5434:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5438:	2f312e32 	svccs	0x00312e32
    543c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5440:	00656475 	rsbeq	r6, r5, r5, ror r4
    5444:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5390 <patchGenfskRfe+0x114>
    5448:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    544c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5450:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5454:	6f746b73 	svcvs	0x00746b73
    5458:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    545c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5460:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5464:	2f534f43 	svccs	0x00534f43
    5468:	4f636950 	svcmi	0x00636950
    546c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5470:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5474:	6f682f00 	svcvs	0x00682f00
    5478:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    547c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5480:	442f6e65 	strtmi	r6, [pc], #-3685	; 5488 <patchGenfskRfe+0x20c>
    5484:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5488:	4f2f706f 	svcmi	0x002f706f
    548c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5490:	502f5445 	eorpl	r5, pc, r5, asr #8
    5494:	534f4349 	movtpl	r4, #62281	; 0xf349
    5498:	6369502f 	cmnvs	r9, #47	; 0x2f
    549c:	0000534f 	andeq	r5, r0, pc, asr #6
    54a0:	5f726573 	svcpl	0x00726573
    54a4:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    54a8:	0100632e 	tsteq	r0, lr, lsr #6
    54ac:	74730000 	ldrbtvc	r0, [r3], #-0
    54b0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    54b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    54b8:	74730000 	ldrbtvc	r0, [r3], #-0
    54bc:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    54c0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    54c4:	72610000 	rsbvc	r0, r1, #0
    54c8:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    54cc:	00000300 	andeq	r0, r0, r0, lsl #6
    54d0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    54d4:	0300682e 	movweq	r6, #2094	; 0x82e
    54d8:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    54dc:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    54e0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    54e4:	00000300 	andeq	r0, r0, r0, lsl #6
    54e8:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    54ec:	5f736e6f 	svcpl	0x00736e6f
    54f0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    54f4:	00030068 	andeq	r0, r3, r8, rrx
    54f8:	73797300 	cmnvc	r9, #0, 6
    54fc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5500:	00000400 	andeq	r0, r0, r0, lsl #8
    5504:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    5508:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    550c:	00003e6e 	andeq	r3, r0, lr, ror #28
    5510:	05000000 	streq	r0, [r0, #-0]
    5514:	0205002c 	andeq	r0, r5, #44	; 0x2c
    5518:	00002710 	andeq	r2, r0, r0, lsl r7
    551c:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    5520:	13131402 	tstne	r3, #33554432	; 0x2000000
    5524:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    5528:	2e017a03 	vmlacs.f32	s14, s2, s6
    552c:	05260e05 	streq	r0, [r6, #-3589]!	; 0xfffff1fb
    5530:	03053c05 	movweq	r3, #23557	; 0x5c05
    5534:	033d3006 	teqeq	sp, #6
    5538:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    553c:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    5540:	0522060d 	streq	r0, [r2, #-1549]!	; 0xfffff9f3
    5544:	22061e02 	andcs	r1, r6, #2, 28
    5548:	01060d05 	tsteq	r6, r5, lsl #26
    554c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5550:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    5554:	06054e02 	streq	r4, [r5], -r2, lsl #28
    5558:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    555c:	0603054a 	streq	r0, [r3], -sl, asr #10
    5560:	02053d21 	andeq	r3, r5, #2112	; 0x840
    5564:	06010524 	streq	r0, [r1], -r4, lsr #10
    5568:	00090213 	andeq	r0, r9, r3, lsl r2
    556c:	01b20101 			; <UNDEFINED> instruction: 0x01b20101
    5570:	00030000 	andeq	r0, r3, r0
    5574:	0000013f 	andeq	r0, r0, pc, lsr r1
    5578:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    557c:	0101000d 	tsteq	r1, sp
    5580:	00000101 	andeq	r0, r0, r1, lsl #2
    5584:	00000100 	andeq	r0, r0, r0, lsl #2
    5588:	6f682f01 	svcvs	0x00682f01
    558c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5590:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5594:	442f6e65 	strtmi	r6, [pc], #-3685	; 559c <patchGenfskRfe+0x320>
    5598:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    559c:	4f2f706f 	svcmi	0x002f706f
    55a0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    55a4:	502f5445 	eorpl	r5, pc, r5, asr #8
    55a8:	534f4349 	movtpl	r4, #62281	; 0xf349
    55ac:	6369502f 	cmnvs	r9, #47	; 0x2f
    55b0:	502f534f 	eorpl	r5, pc, pc, asr #6
    55b4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    55b8:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    55bc:	006c6169 	rsbeq	r6, ip, r9, ror #2
    55c0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    55c4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    55c8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    55cc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    55d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    55d4:	61652d65 	cmnvs	r5, r5, ror #26
    55d8:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    55dc:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    55e0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    55e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    55e8:	6f682f00 	svcvs	0x00682f00
    55ec:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    55f0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    55f4:	442f6e65 	strtmi	r6, [pc], #-3685	; 55fc <patchGenfskRfe+0x380>
    55f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    55fc:	4f2f706f 	svcmi	0x002f706f
    5600:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5604:	502f5445 	eorpl	r5, pc, r5, asr #8
    5608:	534f4349 	movtpl	r4, #62281	; 0xf349
    560c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5610:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5614:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5618:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    561c:	2f656d6f 	svccs	0x00656d6f
    5620:	70657473 	rsbvc	r7, r5, r3, ror r4
    5624:	2f6e6568 	svccs	0x006e6568
    5628:	6b736544 	blvs	1cdeb40 <__ccfg+0x1cbeb98>
    562c:	2f706f74 	svccs	0x00706f74
    5630:	4f534c4f 	svcmi	0x00534c4f
    5634:	2f54454e 	svccs	0x0054454e
    5638:	4f434950 	svcmi	0x00434950
    563c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5640:	00534f63 	subseq	r4, r3, r3, ror #30
    5644:	72657300 	rsbvc	r7, r5, #0, 6
    5648:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    564c:	0100632e 	tsteq	r0, lr, lsr #6
    5650:	74730000 	ldrbtvc	r0, [r3], #-0
    5654:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5658:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    565c:	74730000 	ldrbtvc	r0, [r3], #-0
    5660:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    5664:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5668:	72610000 	rsbvc	r0, r1, #0
    566c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5670:	00000300 	andeq	r0, r0, r0, lsl #6
    5674:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5678:	0300682e 	movweq	r6, #2094	; 0x82e
    567c:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    5680:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5684:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5688:	00000300 	andeq	r0, r0, r0, lsl #6
    568c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    5690:	5f736e6f 	svcpl	0x00736e6f
    5694:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5698:	00030068 	andeq	r0, r3, r8, rrx
    569c:	73797300 	cmnvc	r9, #0, 6
    56a0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    56a4:	00000400 	andeq	r0, r0, r0, lsl #8
    56a8:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    56ac:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    56b0:	00003e6e 	andeq	r3, r0, lr, ror #28
    56b4:	05000000 	streq	r0, [r0, #-0]
    56b8:	0205002d 	andeq	r0, r5, #45	; 0x2d
    56bc:	00002764 	andeq	r2, r0, r4, ror #14
    56c0:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    56c4:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    56c8:	03062d05 	movweq	r2, #27909	; 0x6d05
    56cc:	052e0178 	streq	r0, [lr, #-376]!	; 0xfffffe88
    56d0:	02053605 	andeq	r3, r5, #5242880	; 0x500000
    56d4:	10052306 	andne	r2, r5, r6, lsl #6
    56d8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    56dc:	06030520 	streq	r0, [r3], -r0, lsr #10
    56e0:	060f052f 	streq	r0, [pc], -pc, lsr #10
    56e4:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    56e8:	21060405 	tstcs	r6, r5, lsl #8
    56ec:	01060b05 	tsteq	r6, r5, lsl #22
    56f0:	4b060405 	blmi	18670c <__ccfg+0x166764>
    56f4:	01060705 	tsteq	r6, r5, lsl #14
    56f8:	21060505 	tstcs	r6, r5, lsl #10
    56fc:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
    5700:	4f02052d 	svcmi	0x0002052d
    5704:	06090530 			; <UNDEFINED> instruction: 0x06090530
    5708:	06020501 	streq	r0, [r2], -r1, lsl #10
    570c:	0c053d3e 	stceq	13, cr3, [r5], {62}	; 0x3e
    5710:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5714:	01053006 	tsteq	r5, r6
    5718:	0a051306 	beq	14a338 <__ccfg+0x12a390>
    571c:	02666903 	rsbeq	r6, r6, #49152	; 0xc000
    5720:	01010006 	tsteq	r1, r6
    5724:	00000cae 	andeq	r0, r0, lr, lsr #25
    5728:	029e0003 	addseq	r0, lr, #3
    572c:	01020000 	mrseq	r0, (UNDEF: 2)
    5730:	000d0efb 	strdeq	r0, [sp], -fp
    5734:	01010101 	tsteq	r1, r1, lsl #2
    5738:	01000000 	mrseq	r0, (UNDEF: 0)
    573c:	2f010000 	svccs	0x00010000
    5740:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5744:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5748:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    574c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5750:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5754:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5758:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    575c:	4349502f 	movtmi	r5, #36911	; 0x902f
    5760:	502f534f 	eorpl	r5, pc, pc, asr #6
    5764:	534f6369 	movtpl	r6, #62313	; 0xf369
    5768:	3143432f 	cmpcc	r3, pc, lsr #6
    576c:	00585833 	subseq	r5, r8, r3, lsr r8
    5770:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 56bc <patchGenfskRfe+0x440>
    5774:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5778:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    577c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5780:	6f746b73 	svcvs	0x00746b73
    5784:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5788:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    578c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5790:	2f534f43 	svccs	0x00534f43
    5794:	4f636950 	svcmi	0x00636950
    5798:	43432f53 	movtmi	r2, #16211	; 0x3f53
    579c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    57a0:	3143432f 	cmpcc	r3, pc, lsr #6
    57a4:	57585833 	smmlarpl	r8, r3, r8, r5
    57a8:	2f455241 	svccs	0x00455241
    57ac:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    57b0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    57b4:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    57b8:	2f656d6f 	svccs	0x00656d6f
    57bc:	70657473 	rsbvc	r7, r5, r3, ror r4
    57c0:	2f6e6568 	svccs	0x006e6568
    57c4:	6b736544 	blvs	1cdecdc <__ccfg+0x1cbed34>
    57c8:	2f706f74 	svccs	0x00706f74
    57cc:	4f534c4f 	svcmi	0x00534c4f
    57d0:	2f54454e 	svccs	0x0054454e
    57d4:	4f434950 	svcmi	0x00434950
    57d8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    57dc:	2f534f63 	svccs	0x00534f63
    57e0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    57e4:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    57e8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    57ec:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    57f0:	66722f45 	ldrbtvs	r2, [r2], -r5, asr #30
    57f4:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    57f8:	73656863 	cmnvc	r5, #6488064	; 0x630000
    57fc:	73752f00 	cmnvc	r5, #0, 30
    5800:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5804:	63672f62 	cmnvs	r7, #392	; 0x188
    5808:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    580c:	6f6e2d6d 	svcvs	0x006e2d6d
    5810:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5814:	2f696261 	svccs	0x00696261
    5818:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    581c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5820:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5824:	752f0065 	strvc	r0, [pc, #-101]!	; 57c7 <patchGenfskRfe+0x54b>
    5828:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    582c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5830:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    5834:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5838:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    583c:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    5840:	2f656d6f 	svccs	0x00656d6f
    5844:	70657473 	rsbvc	r7, r5, r3, ror r4
    5848:	2f6e6568 	svccs	0x006e6568
    584c:	6b736544 	blvs	1cded64 <__ccfg+0x1cbedbc>
    5850:	2f706f74 	svccs	0x00706f74
    5854:	4f534c4f 	svcmi	0x00534c4f
    5858:	2f54454e 	svccs	0x0054454e
    585c:	4f434950 	svcmi	0x00434950
    5860:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5864:	00534f63 	subseq	r4, r3, r3, ror #30
    5868:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 57b4 <patchGenfskRfe+0x538>
    586c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5870:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5874:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5878:	6f746b73 	svcvs	0x00746b73
    587c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5880:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5884:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5888:	2f534f43 	svccs	0x00534f43
    588c:	4f636950 	svcmi	0x00636950
    5890:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    5894:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    5898:	66720000 	ldrbtvs	r0, [r2], -r0
    589c:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    58a0:	0100632e 	tsteq	r0, lr, lsr #6
    58a4:	66720000 	ldrbtvs	r0, [r2], -r0
    58a8:	00682e63 	rsbeq	r2, r8, r3, ror #28
    58ac:	67000002 	strvs	r0, [r0, -r2]
    58b0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    58b4:	00020068 	andeq	r0, r2, r8, rrx
    58b8:	5f667200 	svcpl	0x00667200
    58bc:	63746170 	cmnvs	r4, #112, 2
    58c0:	70635f68 	rsbvc	r5, r3, r8, ror #30
    58c4:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    58c8:	6b73666e 	blvs	1cdf288 <__ccfg+0x1cbf2e0>
    58cc:	0300682e 	movweq	r6, #2094	; 0x82e
    58d0:	66720000 	ldrbtvs	r0, [r2], -r0
    58d4:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    58d8:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    58dc:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    58e0:	73666e65 	cmnvc	r6, #1616	; 0x650
    58e4:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    58e8:	73000003 	movwvc	r0, #3
    58ec:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    58f0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    58f4:	73000004 	movwvc	r0, #4
    58f8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    58fc:	00682e66 	rsbeq	r2, r8, r6, ror #28
    5900:	5f000004 	svcpl	0x00000004
    5904:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5908:	00682e73 	rsbeq	r2, r8, r3, ror lr
    590c:	72000005 	andvc	r0, r0, #5
    5910:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    5914:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    5918:	6f6c0000 	svcvs	0x006c0000
    591c:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    5920:	00000500 	andeq	r0, r0, r0, lsl #10
    5924:	6d5f6672 	ldclvs	6, cr6, [pc, #-456]	; 5764 <patchGenfskRfe+0x4e8>
    5928:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    592c:	682e786f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}
    5930:	00000200 	andeq	r0, r0, r0, lsl #4
    5934:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    5938:	6f6d6d6f 	svcvs	0x006d6d6f
    593c:	6d635f6e 	stclvs	15, cr5, [r3, #-440]!	; 0xfffffe48
    5940:	00682e64 	rsbeq	r2, r8, r4, ror #28
    5944:	72000002 	andvc	r0, r0, #2
    5948:	72705f66 	rsbsvc	r5, r0, #408	; 0x198
    594c:	635f706f 	cmpvs	pc, #111	; 0x6f
    5950:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    5954:	00000200 	andeq	r0, r0, r0, lsl #4
    5958:	645f6672 	ldrbvs	r6, [pc], #-1650	; 5960 <patchImageGenfsk+0x30>
    595c:	5f617461 	svcpl	0x00617461
    5960:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
    5964:	00682e79 	rsbeq	r2, r8, r9, ror lr
    5968:	61000002 	tstvs	r0, r2
    596c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5970:	00010068 	andeq	r0, r1, r8, rrx
    5974:	63616d00 	cmnvs	r1, #0, 26
    5978:	00682e68 	rsbeq	r2, r8, r8, ror #28
    597c:	70000001 	andvc	r0, r0, r1
    5980:	5f736e69 	svcpl	0x00736e69
    5984:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5988:	00010068 	andeq	r0, r1, r8, rrx
    598c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5990:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5994:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5998:	0100682e 	tsteq	r0, lr, lsr #16
    599c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    59a0:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    59a4:	00060068 	andeq	r0, r6, r8, rrx
    59a8:	72656b00 	rsbvc	r6, r5, #0, 22
    59ac:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    59b0:	00070068 	andeq	r0, r7, r8, rrx
    59b4:	616d7300 	cmnvs	sp, r0, lsl #6
    59b8:	66727472 			; <UNDEFINED> instruction: 0x66727472
    59bc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    59c0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    59c4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    59c8:	00000001 	andeq	r0, r0, r1
    59cc:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    59d0:	0027c402 	eoreq	ip, r7, r2, lsl #8
    59d4:	039f0300 	orrseq	r0, pc, #0, 6
    59d8:	16020501 	strne	r0, [r2], -r1, lsl #10
    59dc:	14063805 	strne	r3, [r6], #-2053	; 0xfffff7fb
    59e0:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
    59e4:	26052038 			; <UNDEFINED> instruction: 0x26052038
    59e8:	1e15053c 	mrcne	5, 0, r0, cr5, cr12, {1}
    59ec:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    59f0:	01010008 	tsteq	r1, r8
    59f4:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    59f8:	0027e402 	eoreq	lr, r7, r2, lsl #8
    59fc:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    5a00:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5a04:	062a0514 			; <UNDEFINED> instruction: 0x062a0514
    5a08:	0405200e 	streq	r2, [r5], #-14
    5a0c:	05440806 	strbeq	r0, [r4, #-2054]	; 0xfffff7fa
    5a10:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    5a14:	0805200c 	stmdaeq	r5, {r2, r3, sp}
    5a18:	053c2003 	ldreq	r2, [ip, #-3]!
    5a1c:	03210604 			; <UNDEFINED> instruction: 0x03210604
    5a20:	06052064 	streq	r2, [r5], -r4, rrx
    5a24:	58750306 	ldmdapl	r5!, {r1, r2, r8, r9}^
    5a28:	03060405 	movweq	r0, #25605	; 0x6405
    5a2c:	0101200d 	tsteq	r1, sp
    5a30:	4a582e9e 	bmi	16114b0 <__ccfg+0x15f1508>
    5a34:	03060105 	movweq	r0, #24837	; 0x6105
    5a38:	050100fa 	streq	r0, [r1, #-250]	; 0xffffff06
    5a3c:	90030604 	andls	r0, r3, r4, lsl #12
    5a40:	055d207f 	ldrbeq	r2, [sp, #-127]	; 0xffffff81
    5a44:	2001060b 	andcs	r0, r1, fp, lsl #12
    5a48:	06040520 	streq	r0, [r4], -r0, lsr #10
    5a4c:	0606052f 	streq	r0, [r6], -pc, lsr #10
    5a50:	05016303 	streq	r6, [r1, #-771]	; 0xfffffcfd
    5a54:	21030604 	tstcs	r3, r4, lsl #12
    5a58:	060a052e 	streq	r0, [sl], -lr, lsr #10
    5a5c:	20080501 	andcs	r0, r8, r1, lsl #10
    5a60:	21060405 	tstcs	r6, r5, lsl #8
    5a64:	e2030205 	and	r0, r3, #1342177280	; 0x50000000
    5a68:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    5a6c:	03050106 	movweq	r0, #20742	; 0x5106
    5a70:	02052f06 	andeq	r2, r5, #6, 30
    5a74:	0608050f 	streq	r0, [r8], -pc, lsl #10
    5a78:	1d090515 	cfstr32ne	mvfx0, [r9, #-84]	; 0xffffffac
    5a7c:	03060405 	movweq	r0, #25605	; 0x6405
    5a80:	05207fa4 	streq	r7, [r0, #-4004]!	; 0xfffff05c
    5a84:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    5a88:	05410604 	strbeq	r0, [r1, #-1540]	; 0xfffff9fc
    5a8c:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    5a90:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
    5a94:	055b2106 	ldrbeq	r2, [fp, #-262]	; 0xfffffefa
    5a98:	07055204 	streq	r5, [r5, -r4, lsl #4]
    5a9c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5aa0:	01012206 	tsteq	r1, r6, lsl #4
    5aa4:	4a065a06 	bmi	19c2c4 <__ccfg+0x17c31c>
    5aa8:	35060d05 	strcc	r0, [r6, #-3333]	; 0xfffff2fb
    5aac:	05212005 	streq	r2, [r1, #-5]!
    5ab0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    5ab4:	05130611 	ldreq	r0, [r3, #-1553]	; 0xfffff9ef
    5ab8:	1b052d08 	blne	150ee0 <__ccfg+0x130f38>
    5abc:	1e052d06 	cdpne	13, 0, cr2, cr5, cr6, {0}
    5ac0:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    5ac4:	04052006 	streq	r2, [r5], #-6
    5ac8:	03060106 	movweq	r0, #24838	; 0x6106
    5acc:	2e053c10 	mcrcs	12, 0, r3, cr5, cr0, {0}
    5ad0:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    5ad4:	1f2e0521 	svcne	0x002e0521
    5ad8:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5adc:	01062e05 	tsteq	r6, r5, lsl #28
    5ae0:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
    5ae4:	594b0604 	stmdbpl	fp, {r2, r9, sl}^
    5ae8:	060a0524 	streq	r0, [sl], -r4, lsr #10
    5aec:	03080501 	movweq	r0, #34049	; 0x8501
    5af0:	0405200e 	streq	r2, [r5], #-14
    5af4:	75032206 	strvc	r2, [r3, #-518]	; 0xfffffdfa
    5af8:	060c0520 	streq	r0, [ip], -r0, lsr #10
    5afc:	21140501 	tstcs	r4, r1, lsl #10
    5b00:	20490c05 	subcs	r0, r9, r5, lsl #24
    5b04:	30060405 	andcc	r0, r6, r5, lsl #8
    5b08:	2f011103 	svccs	0x00011103
    5b0c:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    5b10:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5b14:	05360604 	ldreq	r0, [r6, #-1540]!	; 0xfffff9fc
    5b18:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5b1c:	0a052106 	beq	14df3c <__ccfg+0x12df94>
    5b20:	20202e1f 	eorcs	r2, r0, pc, lsl lr
    5b24:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    5b28:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    5b2c:	2001060d 	andcs	r0, r1, sp, lsl #12
    5b30:	06040520 	streq	r0, [r4], -r0, lsr #10
    5b34:	060d0530 			; <UNDEFINED> instruction: 0x060d0530
    5b38:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    5b3c:	001f0242 	andseq	r0, pc, r2, asr #4
    5b40:	23050101 	movwcs	r0, #20737	; 0x5101
    5b44:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    5b48:	03000029 	movweq	r0, #41	; 0x29
    5b4c:	050101c4 	streq	r0, [r1, #-452]	; 0xfffffe3c
    5b50:	05151702 	ldreq	r1, [r5, #-1794]	; 0xfffff8fe
    5b54:	78030623 	stmdavc	r3, {r0, r1, r5, r9, sl}
    5b58:	02052001 	andeq	r2, r5, #1
    5b5c:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    5b60:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5b64:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5b68:	06053c0c 	streq	r3, [r5], -ip, lsl #24
    5b6c:	06030520 	streq	r0, [r3], -r0, lsr #10
    5b70:	06060531 			; <UNDEFINED> instruction: 0x06060531
    5b74:	06040501 	streq	r0, [r4], -r1, lsl #10
    5b78:	05260630 	streq	r0, [r6, #-1584]!	; 0xfffff9d0
    5b7c:	053a0603 	ldreq	r0, [sl, #-1539]!	; 0xfffff9fd
    5b80:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5b84:	4b2f0604 	blmi	bc739c <__ccfg+0xba73f4>
    5b88:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
    5b8c:	3c710308 	ldclcc	3, cr0, [r1], #-32	; 0xffffffe0
    5b90:	13060605 	movwne	r0, #26117	; 0x6605
    5b94:	10030105 	andne	r0, r3, r5, lsl #2
    5b98:	00090220 	andeq	r0, r9, r0, lsr #4
    5b9c:	16050101 	strne	r0, [r5], -r1, lsl #2
    5ba0:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    5ba4:	03000029 	movweq	r0, #41	; 0x29
    5ba8:	05010394 	streq	r0, [r1, #-916]	; 0xfffffc6c
    5bac:	16051602 	strne	r1, [r5], -r2, lsl #12
    5bb0:	0e050e06 	cdpeq	14, 0, cr0, cr5, cr6, {0}
    5bb4:	20050524 	andcs	r0, r5, r4, lsr #10
    5bb8:	3f060205 	svccc	0x00060205
    5bbc:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    5bc0:	0006024b 	andeq	r0, r6, fp, asr #4
    5bc4:	17050101 	strne	r0, [r5, -r1, lsl #2]
    5bc8:	e0020500 	and	r0, r2, r0, lsl #10
    5bcc:	03000029 	movweq	r0, #41	; 0x29
    5bd0:	050102e0 	streq	r0, [r1, #-736]	; 0xfffffd20
    5bd4:	17051602 	strne	r1, [r5, -r2, lsl #12]
    5bd8:	0e050e06 	cdpeq	14, 0, cr0, cr5, cr6, {0}
    5bdc:	20050524 	andcs	r0, r5, r4, lsr #10
    5be0:	3f060205 	svccc	0x00060205
    5be4:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5be8:	7eb90306 	cdpvc	3, 11, cr0, cr9, cr6, {0}
    5bec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5bf0:	01c70302 	biceq	r0, r7, r2, lsl #6
    5bf4:	3f5a0620 	svccc	0x005a0620
    5bf8:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    5bfc:	7eb20305 	cdpvc	3, 11, cr0, cr2, cr5, {0}
    5c00:	06350501 	ldrteq	r0, [r5], -r1, lsl #10
    5c04:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c08:	01d00302 	bicseq	r0, r0, r2, lsl #6
    5c0c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    5c10:	7eb00335 	mrcvc	3, 5, r0, cr0, cr5, {1}
    5c14:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5c18:	d0030602 	andle	r0, r3, r2, lsl #12
    5c1c:	05312001 	ldreq	r2, [r1, #-1]!
    5c20:	05010648 	streq	r0, [r1, #-1608]	; 0xfffff9b8
    5c24:	31310602 	teqcc	r1, r2, lsl #12
    5c28:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    5c2c:	015f0329 	cmpeq	pc, r9, lsr #6
    5c30:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    5c34:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    5c38:	06020501 	streq	r0, [r2], -r1, lsl #10
    5c3c:	044a1c03 	strbeq	r1, [sl], #-3075	; 0xfffff3fd
    5c40:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5c44:	0505015f 	streq	r0, [r5, #-351]	; 0xfffffea1
    5c48:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5c4c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5c50:	1c030602 	stcne	6, cr0, [r3], {2}
    5c54:	014b142e 	cmpeq	fp, lr, lsr #8
    5c58:	01010101 	tsteq	r1, r1, lsl #2
    5c5c:	13060105 	movwne	r0, #24837	; 0x6105
    5c60:	01000b02 	tsteq	r0, r2, lsl #22
    5c64:	000d0501 	andeq	r0, sp, r1, lsl #10
    5c68:	2a3c0205 	bcs	f06484 <__ccfg+0xee64dc>
    5c6c:	e1030000 	mrs	r0, (UNDEF: 3)
    5c70:	20060101 	andcs	r0, r6, r1, lsl #2
    5c74:	4f060205 	svcmi	0x00060205
    5c78:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5c7c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5c80:	03052006 	movweq	r2, #20486	; 0x5006
    5c84:	06053106 	streq	r3, [r5], -r6, lsl #2
    5c88:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5c8c:	055b3006 	ldrbeq	r3, [fp, #-6]
    5c90:	08054c03 	stmdaeq	r5, {r0, r1, sl, fp, lr}
    5c94:	053c7503 	ldreq	r7, [ip, #-1283]!	; 0xfffffafd
    5c98:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5c9c:	200c0301 	andcs	r0, ip, r1, lsl #6
    5ca0:	01000502 	tsteq	r0, r2, lsl #10
    5ca4:	000d0501 	andeq	r0, sp, r1, lsl #10
    5ca8:	2a740205 	bcs	1d064c4 <__ccfg+0x1ce651c>
    5cac:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    5cb0:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    5cb4:	01010903 	tsteq	r1, r3, lsl #18
    5cb8:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5cbc:	05011b03 	streq	r1, [r1, #-2819]	; 0xfffff4fd
    5cc0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    5cc4:	01040106 	tsteq	r4, r6, lsl #2
    5cc8:	57030d05 	strpl	r0, [r3, -r5, lsl #26]
    5ccc:	0503043c 	streq	r0, [r3, #-1084]	; 0xfffffbc4
    5cd0:	2e29032d 	cdpcs	3, 2, cr0, cr9, cr13, {1}
    5cd4:	02050104 	andeq	r0, r5, #4, 2
    5cd8:	20600306 	rsbcs	r0, r0, r6, lsl #6
    5cdc:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5ce0:	05011b03 	streq	r1, [r1, #-2819]	; 0xfffff4fd
    5ce4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    5ce8:	01040106 	tsteq	r4, r6, lsl #2
    5cec:	03060205 	movweq	r0, #25093	; 0x6205
    5cf0:	2f192e60 	svccs	0x00192e60
    5cf4:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
    5cf8:	1e053c1c 	mcrne	12, 0, r3, cr5, cr12, {0}
    5cfc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5d00:	0531062e 	ldreq	r0, [r1, #-1582]!	; 0xfffff9d2
    5d04:	05010648 	streq	r0, [r1, #-1608]	; 0xfffff9b8
    5d08:	48053202 	stmdami	r5, {r1, r9, ip, sp}
    5d0c:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
    5d10:	02043124 	andeq	r3, r4, #36, 2
    5d14:	e4030505 	str	r0, [r3], #-1285	; 0xfffffafb
    5d18:	3505017e 	strcc	r0, [r5, #-382]	; 0xfffffe82
    5d1c:	01040106 	tsteq	r4, r6, lsl #2
    5d20:	9f030205 	svcls	0x00030205
    5d24:	02043c01 	andeq	r3, r4, #256	; 0x100
    5d28:	e1033505 	tst	r3, r5, lsl #10
    5d2c:	0104207e 	tsteq	r4, lr, ror r0
    5d30:	03060205 	movweq	r0, #25093	; 0x6205
    5d34:	3220019f 	eorcc	r0, r0, #-1073741785	; 0xc0000027
    5d38:	04050404 	streq	r0, [r5], #-1028	; 0xfffffbfc
    5d3c:	03011003 	movweq	r1, #4099	; 0x1003
    5d40:	01050173 	tsteq	r5, r3, ror r1
    5d44:	05016b03 	streq	r6, [r1, #-2819]	; 0xfffff4fd
    5d48:	01160304 	tsteq	r6, r4, lsl #6
    5d4c:	15016103 	strne	r6, [r1, #-259]	; 0xfffffefd
    5d50:	03661d03 	cmneq	r6, #3, 26	; 0xc0
    5d54:	1513016d 	ldrne	r0, [r3, #-365]	; 0xfffffe93
    5d58:	01061205 	tsteq	r6, r5, lsl #4
    5d5c:	04050504 	streq	r0, [r5], #-1284	; 0xfffffafc
    5d60:	2e01f103 	mvfcss	f7, f3
    5d64:	12050404 	andne	r0, r5, #4, 8	; 0x4000000
    5d68:	207e8f03 	rsbscs	r8, lr, r3, lsl #30
    5d6c:	21060405 	tstcs	r6, r5, lsl #8
    5d70:	13061205 	movwne	r1, #25093	; 0x6205
    5d74:	3d13053d 	cfldr32cc	mvfx0, [r3, #-244]	; 0xffffff0c
    5d78:	2f12052f 	svccs	0x0012052f
    5d7c:	053e1105 	ldreq	r1, [lr, #-261]!	; 0xfffffefb
    5d80:	20790312 	rsbscs	r0, r9, r2, lsl r3
    5d84:	2f060405 	svccs	0x00060405
    5d88:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5d8c:	06110514 			; <UNDEFINED> instruction: 0x06110514
    5d90:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    5d94:	01d4031c 	bicseq	r0, r4, ip, lsl r3
    5d98:	1f140520 	svcne	0x00140520
    5d9c:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    5da0:	05130705 	ldreq	r0, [r3, #-1797]	; 0xfffff8fb
    5da4:	1b18060a 	blne	6075d4 <__ccfg+0x5e762c>
    5da8:	2f060705 	svccs	0x00060705
    5dac:	13060a05 	movwne	r0, #27141	; 0x6a05
    5db0:	2f060705 	svccs	0x00060705
    5db4:	13060a05 	movwne	r0, #27141	; 0x6a05
    5db8:	2f060705 	svccs	0x00060705
    5dbc:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5dc0:	210d0501 	tstcs	sp, r1, lsl #10
    5dc4:	212f2f2f 			; <UNDEFINED> instruction: 0x212f2f2f
    5dc8:	04052121 	streq	r2, [r5], #-289	; 0xfffffedf
    5dcc:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5dd0:	133c7803 	teqne	ip, #196608	; 0x30000
    5dd4:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5dd8:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    5ddc:	0c052e06 	stceq	14, cr2, [r5], {6}
    5de0:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    5de4:	22060106 	andcs	r0, r6, #-2147483647	; 0x80000001
    5de8:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5dec:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5df0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5df4:	7e950309 	cdpvc	3, 9, cr0, cr5, cr9, {0}
    5df8:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
    5dfc:	01eb030a 	mvneq	r0, sl, lsl #6
    5e00:	06040520 	streq	r0, [r4], -r0, lsr #10
    5e04:	060a0521 	streq	r0, [sl], -r1, lsr #10
    5e08:	06040501 	streq	r0, [r4], -r1, lsl #10
    5e0c:	060a052f 	streq	r0, [sl], -pc, lsr #10
    5e10:	06040501 	streq	r0, [r4], -r1, lsl #10
    5e14:	060a052f 	streq	r0, [sl], -pc, lsr #10
    5e18:	06040501 	streq	r0, [r4], -r1, lsl #10
    5e1c:	060a052f 	streq	r0, [sl], -pc, lsr #10
    5e20:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5e24:	91030609 	tstls	r3, r9, lsl #12
    5e28:	02052e7e 	andeq	r2, r5, #2016	; 0x7e0
    5e2c:	3f090536 	svccc	0x00090536
    5e30:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    5e34:	435c3e3c 	cmpmi	ip, #60, 28	; 0x3c0
    5e38:	06135a3d 			; <UNDEFINED> instruction: 0x06135a3d
    5e3c:	69061b25 	stmdbvs	r6, {r0, r2, r5, r8, r9, fp, ip}
    5e40:	01063005 	tsteq	r6, r5
    5e44:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5e48:	01062d05 	tsteq	r6, r5, lsl #26
    5e4c:	2f060205 	svccs	0x00060205
    5e50:	1f062d05 	svcne	0x00062d05
    5e54:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
    5e58:	02052801 	andeq	r2, r5, #65536	; 0x10000
    5e5c:	022e7803 	eoreq	r7, lr, #196608	; 0x30000
    5e60:	01010033 	tsteq	r1, r3, lsr r0
    5e64:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    5e68:	002bf402 	eoreq	pc, fp, r2, lsl #8
    5e6c:	03b40300 			; <UNDEFINED> instruction: 0x03b40300
    5e70:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5e74:	01090313 	tsteq	r9, r3, lsl r3
    5e78:	03050204 	movweq	r0, #20996	; 0x5204
    5e7c:	017dee03 	cmneq	sp, r3, lsl #28
    5e80:	1e050104 	adfnes	f0, f5, f4
    5e84:	02860306 	addeq	r0, r6, #402653184	; 0x18000000
    5e88:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    5e8c:	7dfa0330 	ldclvc	3, cr0, [sl, #192]!	; 0xc0
    5e90:	7b32052e 	blvc	c87350 <__ccfg+0xc673a8>
    5e94:	29060305 	stmdbcs	r6, {r0, r2, r8, r9}
    5e98:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    5e9c:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    5ea0:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
    5ea4:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5ea8:	33062003 	movwcc	r2, #24579	; 0x6003
    5eac:	0a050104 	beq	1462c4 <__ccfg+0x12631c>
    5eb0:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    5eb4:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    5eb8:	7df50330 	ldclvc	3, cr0, [r5, #192]!	; 0xc0
    5ebc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5ec0:	029e0305 	addseq	r0, lr, #335544320	; 0x14000000
    5ec4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    5ec8:	7de20330 	stclvc	3, cr0, [r2, #192]!	; 0xc0
    5ecc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5ed0:	0291032d 	addseq	r0, r1, #-1275068416	; 0xb4000000
    5ed4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    5ed8:	7def0330 	stclvc	3, cr0, [pc, #192]!	; 5fa0 <__exidx_end+0x3a0>
    5edc:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    5ee0:	8b030602 	blhi	c76f0 <__ccfg+0xa7748>
    5ee4:	27055802 	strcs	r5, [r5, -r2, lsl #16]
    5ee8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5eec:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    5ef0:	2e71030a 	cdpcs	3, 7, cr0, cr1, cr10, {0}
    5ef4:	2f060605 	svccs	0x00060605
    5ef8:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5efc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5f00:	013d0604 	teqeq	sp, r4, lsl #12
    5f04:	19051301 	stmdbne	r5, {r0, r8, r9, ip}
    5f08:	0d051406 	cfstrseq	mvf1, [r5, #-24]	; 0xffffffe8
    5f0c:	201d0520 	andscs	r0, sp, r0, lsr #10
    5f10:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    5f14:	04051e06 	streq	r1, [r5], #-3590	; 0xfffff1fa
    5f18:	07053006 	streq	r3, [r5, -r6]
    5f1c:	21050106 	tstcs	r5, r6, lsl #2
    5f20:	4a370520 	bmi	dc73a8 <__ccfg+0xda7400>
    5f24:	3f060505 	svccc	0x00060505
    5f28:	16061505 	strne	r1, [r6], -r5, lsl #10
    5f2c:	052a0805 	streq	r0, [sl, #-2053]!	; 0xfffff7fb
    5f30:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    5f34:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    5f38:	1f052013 	svcne	0x00052013
    5f3c:	20130520 	andscs	r0, r3, r0, lsr #10
    5f40:	21060505 	tstcs	r6, r5, lsl #10
    5f44:	01060f05 	tsteq	r6, r5, lsl #30
    5f48:	2f060505 	svccs	0x00060505
    5f4c:	056e0405 	strbeq	r0, [lr, #-1029]!	; 0xfffffbfb
    5f50:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    5f54:	6a030613 	bvs	c77a8 <__ccfg+0xa7800>
    5f58:	0106052e 	tsteq	r6, lr, lsr #10
    5f5c:	11060205 	tstne	r6, r5, lsl #4
    5f60:	052f1b05 	streq	r1, [pc, #-2821]!	; 5463 <patchGenfskRfe+0x1e7>
    5f64:	12030605 	andne	r0, r3, #5242880	; 0x500000
    5f68:	0302053c 	movweq	r0, #9532	; 0x253c
    5f6c:	05054a0a 	streq	r4, [r5, #-2570]	; 0xfffff5f6
    5f70:	03050106 	movweq	r0, #20742	; 0x5106
    5f74:	01012106 	tsteq	r1, r6, lsl #2
    5f78:	05010114 	streq	r0, [r1, #-276]	; 0xfffffeec
    5f7c:	05310601 	ldreq	r0, [r1, #-1537]!	; 0xfffff9ff
    5f80:	01052b03 	tsteq	r5, r3, lsl #22
    5f84:	00130269 	andseq	r0, r3, r9, ror #4
    5f88:	01050101 	tsteq	r5, r1, lsl #2
    5f8c:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    5f90:	0300002c 	movweq	r0, #44	; 0x2c
    5f94:	0101048c 	smlabbeq	r1, ip, r4, r0
    5f98:	03052e06 	movweq	r2, #24070	; 0x5e06
    5f9c:	820a0306 	andhi	r0, sl, #402653184	; 0x18000000
    5fa0:	01060705 	tsteq	r6, r5, lsl #14
    5fa4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5fa8:	304c0604 	subcc	r0, ip, r4, lsl #12
    5fac:	054f0305 	strbeq	r0, [pc, #-773]	; 5caf <__exidx_end+0xaf>
    5fb0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5fb4:	04052006 	streq	r2, [r5], #-6
    5fb8:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    5fbc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5fc0:	03052106 	movweq	r2, #20742	; 0x5106
    5fc4:	060e0536 			; <UNDEFINED> instruction: 0x060e0536
    5fc8:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    5fcc:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    5fd0:	01062405 	tsteq	r6, r5, lsl #8
    5fd4:	05581b05 	ldrbeq	r1, [r8, #-2821]	; 0xfffff4fb
    5fd8:	05052007 	streq	r2, [r5, #-7]
    5fdc:	13063306 	movwne	r3, #25350	; 0x6306
    5fe0:	051f0c05 	ldreq	r0, [pc, #-3077]	; 53e3 <patchGenfskRfe+0x167>
    5fe4:	0c052105 	stfeqs	f2, [r5], {5}
    5fe8:	2105051f 	tstcs	r5, pc, lsl r5
    5fec:	051f0c05 	ldreq	r0, [pc, #-3077]	; 53ef <patchGenfskRfe+0x173>
    5ff0:	01210605 			; <UNDEFINED> instruction: 0x01210605
    5ff4:	062e2006 	strteq	r2, [lr], -r6
    5ff8:	030a052e 	movweq	r0, #42286	; 0xa52e
    5ffc:	0d054a72 	vstreq	s8, [r5, #-456]	; 0xfffffe38
    6000:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6004:	02053006 	andeq	r3, r5, #6
    6008:	017dde03 	cmneq	sp, r3, lsl #28
    600c:	01060505 	tsteq	r6, r5, lsl #10
    6010:	03060205 	movweq	r0, #25093	; 0x6205
    6014:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    6018:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    601c:	0605200a 	streq	r2, [r5], -sl
    6020:	03052f06 	movweq	r2, #24326	; 0x5f06
    6024:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    6028:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    602c:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    6030:	06060501 	streq	r0, [r6], -r1, lsl #10
    6034:	13030520 	movwne	r0, #13600	; 0x3520
    6038:	01060e05 	tsteq	r6, r5, lsl #28
    603c:	1f061305 	svcne	0x00061305
    6040:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6044:	03301602 	teqeq	r0, #2097152	; 0x200000
    6048:	01017447 	tsteq	r1, r7, asr #8
    604c:	cd030405 	cfstrsgt	mvf0, [r3, #-20]	; 0xffffffec
    6050:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    6054:	017ede03 	cmneq	lr, r3, lsl #28
    6058:	05051413 	streq	r1, [r5, #-1043]	; 0xfffffbed
    605c:	03060106 	movweq	r0, #24838	; 0x6106
    6060:	154a01aa 	strbne	r0, [sl, #-426]	; 0xfffffe56
    6064:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    6068:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    606c:	08052e10 	stmdaeq	r5, {r4, r9, sl, fp, sp}
    6070:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6074:	06290522 	strteq	r0, [r9], -r2, lsr #10
    6078:	06050501 	streq	r0, [r5], -r1, lsl #10
    607c:	061b0531 			; <UNDEFINED> instruction: 0x061b0531
    6080:	06030501 	streq	r0, [r3], -r1, lsl #10
    6084:	06060532 			; <UNDEFINED> instruction: 0x06060532
    6088:	06040501 	streq	r0, [r4], -r1, lsl #10
    608c:	0f054b30 	svceq	0x00054b30
    6090:	07050106 	streq	r0, [r5, -r6, lsl #2]
    6094:	06050520 	streq	r0, [r5], -r0, lsr #10
    6098:	35040530 	strcc	r0, [r4, #-1328]	; 0xfffffad0
    609c:	052a0b05 	streq	r0, [sl, #-2821]!	; 0xfffff4fb
    60a0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    60a4:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    60a8:	07056b03 	streq	r6, [r5, -r3, lsl #22]
    60ac:	06050106 	streq	r0, [r5], -r6, lsl #2
    60b0:	06040520 	streq	r0, [r4], -r0, lsr #10
    60b4:	054b5933 	strbeq	r5, [fp, #-2355]	; 0xfffff6cd
    60b8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    60bc:	10030603 	andne	r0, r3, r3, lsl #12
    60c0:	0302054a 	movweq	r0, #9546	; 0x254a
    60c4:	05017d9e 	streq	r7, [r1, #-3486]	; 0xfffff262
    60c8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    60cc:	d6030602 	strle	r0, [r3], -r2, lsl #12
    60d0:	01015800 	tsteq	r1, r0, lsl #16
    60d4:	8d030305 	stchi	3, cr0, [r3, #-20]	; 0xffffffec
    60d8:	1e030102 	adfnes	f0, f3, f2
    60dc:	0619052e 	ldreq	r0, [r9], -lr, lsr #10
    60e0:	21310501 	teqcs	r1, r1, lsl #10
    60e4:	052d1905 	streq	r1, [sp, #-2309]!	; 0xfffff6fb
    60e8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    60ec:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    60f0:	31052203 	tstcc	r5, r3, lsl #4
    60f4:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    60f8:	07053222 	streq	r3, [r5, -r2, lsr #4]
    60fc:	06050106 	streq	r0, [r5], -r6, lsl #2
    6100:	06030520 	streq	r0, [r3], -r0, lsr #10
    6104:	0608055b 			; <UNDEFINED> instruction: 0x0608055b
    6108:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    610c:	31060405 	tstcc	r6, r5, lsl #8
    6110:	05410305 	strbeq	r0, [r1, #-773]	; 0xfffffcfb
    6114:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    6118:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    611c:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    6120:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6124:	1b054106 	blne	156544 <__ccfg+0x13659c>
    6128:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    612c:	33052f06 	movwcc	r2, #24326	; 0x5f06
    6130:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6134:	052f3e06 	streq	r3, [pc, #-3590]!	; 5336 <patchGenfskRfe+0xba>
    6138:	0b053f04 	bleq	155d50 <__ccfg+0x135da8>
    613c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6140:	3c090306 	stccc	3, cr0, [r9], {6}
    6144:	03050101 	movweq	r0, #20737	; 0x5101
    6148:	00c30306 	sbceq	r0, r3, r6, lsl #6
    614c:	03420658 	movteq	r0, #9816	; 0x2658
    6150:	053d206d 	ldreq	r2, [sp, #-109]!	; 0xffffff93
    6154:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    6158:	2e0c0303 	cdpcs	3, 0, cr0, cr12, cr3, {0}
    615c:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
    6160:	06030520 	streq	r0, [r3], -r0, lsr #10
    6164:	060b0527 	streq	r0, [fp], -r7, lsr #10
    6168:	06030501 	streq	r0, [r3], -r1, lsl #10
    616c:	15010122 	strne	r0, [r1, #-290]	; 0xfffffede
    6170:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    6174:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6178:	1f052e06 	svcne	0x00052e06
    617c:	3d070558 	cfstr32cc	mvfx0, [r7, #-352]	; 0xfffffea0
    6180:	05493e05 	strbeq	r3, [r9, #-3589]	; 0xfffff1fb
    6184:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6188:	02013f01 	andeq	r3, r1, #1, 30
    618c:	01010020 	tsteq	r1, r0, lsr #32
    6190:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    6194:	002eb402 	eoreq	fp, lr, r2, lsl #8
    6198:	03eb0300 	mvneq	r0, #0, 6
    619c:	17020501 	strne	r0, [r2, -r1, lsl #10]
    61a0:	0d061f05 	stceq	15, cr1, [r6, #-20]	; 0xffffffec
    61a4:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
    61a8:	03052e05 	movweq	r2, #24069	; 0x5e05
    61ac:	02042306 	andeq	r2, r4, #402653184	; 0x18000000
    61b0:	03063005 	movweq	r3, #24581	; 0x6005
    61b4:	05667eb0 	strbeq	r7, [r6, #-3760]!	; 0xfffff150
    61b8:	051b0603 	ldreq	r0, [fp, #-1539]	; 0xfffff9fd
    61bc:	30051705 	andcc	r1, r5, r5, lsl #14
    61c0:	0a050106 	beq	1465e0 <__ccfg+0x126638>
    61c4:	0b052106 	bleq	14e5e4 <__ccfg+0x12e63c>
    61c8:	03050106 	movweq	r0, #20742	; 0x5106
    61cc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    61d0:	d6030602 	strle	r0, [r3], -r2, lsl #12
    61d4:	02042e01 	andeq	r2, r4, #1, 28
    61d8:	81030305 	tsthi	r3, r5, lsl #6
    61dc:	3205017e 	andcc	r0, r5, #-2147483617	; 0x8000001f
    61e0:	01040106 	tsteq	r4, r6, lsl #2
    61e4:	82030205 	andhi	r0, r3, #1342177280	; 0x50000000
    61e8:	02042002 	andeq	r2, r4, #2
    61ec:	fe033205 	cdp2	2, 0, cr3, cr3, cr5, {0}
    61f0:	0104207d 	tsteq	r4, sp, ror r0
    61f4:	82030205 	andhi	r0, r3, #1342177280	; 0x50000000
    61f8:	82062e02 	andhi	r2, r6, #2, 28
    61fc:	014a582e 	cmpeq	sl, lr, lsr #16
    6200:	05580114 	ldrbeq	r0, [r8, #-276]	; 0xfffffeec
    6204:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    6208:	0101000d 	tsteq	r1, sp
    620c:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
    6210:	002f2402 	eoreq	r2, pc, r2, lsl #8
    6214:	07d60300 	ldrbeq	r0, [r6, r0, lsl #6]
    6218:	03020501 	movweq	r0, #9473	; 0x2501
    621c:	25050109 	strcs	r0, [r5, #-265]	; 0xfffffef7
    6220:	01770306 	cmneq	r7, r6, lsl #6
    6224:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    6228:	0325052e 			; <UNDEFINED> instruction: 0x0325052e
    622c:	05052077 	streq	r2, [r5, #-119]	; 0xffffff89
    6230:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    6234:	06300603 	ldrteq	r0, [r0], -r3, lsl #12
    6238:	06020536 			; <UNDEFINED> instruction: 0x06020536
    623c:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    6240:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6244:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    6248:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    624c:	03052005 	movweq	r2, #20485	; 0x5005
    6250:	07053006 	streq	r3, [r5, -r6]
    6254:	02053706 	andeq	r3, r5, #1572864	; 0x180000
    6258:	04052806 	streq	r2, [r5], #-2054	; 0xfffff7fa
    625c:	7ea10306 	cdpvc	3, 10, cr0, cr1, cr6, {0}
    6260:	03090501 	movweq	r0, #38145	; 0x9501
    6264:	052001df 	streq	r0, [r0, #-479]!	; 0xfffffe21
    6268:	7eac030e 	cdpvc	3, 10, cr0, cr12, cr14, {0}
    626c:	2813052e 	ldmdacs	r3, {r1, r2, r3, r5, r8, sl}
    6270:	cc030b05 			; <UNDEFINED> instruction: 0xcc030b05
    6274:	02052e01 	andeq	r2, r5, #1, 28
    6278:	9b032306 	blls	cee98 <__ccfg+0xaeef0>
    627c:	1413017e 	ldrne	r0, [r3], #-382	; 0xfffffe82
    6280:	13030513 	movwne	r0, #13587	; 0x3513
    6284:	13060405 	movwne	r0, #25605	; 0x6405
    6288:	5d060305 	stcpl	3, cr0, [r6, #-20]	; 0xffffffec
    628c:	01060605 	tsteq	r6, r5, lsl #12
    6290:	2f060405 	svccs	0x00060405
    6294:	055a0305 	ldrbeq	r0, [sl, #-773]	; 0xfffffcfb
    6298:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    629c:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    62a0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    62a4:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    62a8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    62ac:	13320603 	teqne	r2, #3145728	; 0x300000
    62b0:	06060513 			; <UNDEFINED> instruction: 0x06060513
    62b4:	1f170514 	svcne	0x00170514
    62b8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    62bc:	13051f17 	movwne	r1, #24343	; 0x5f17
    62c0:	0603052b 	streq	r0, [r3], -fp, lsr #10
    62c4:	060e0531 			; <UNDEFINED> instruction: 0x060e0531
    62c8:	06030501 	streq	r0, [r3], -r1, lsl #10
    62cc:	06060521 	streq	r0, [r6], -r1, lsr #10
    62d0:	06020501 	streq	r0, [r2], -r1, lsl #10
    62d4:	06110526 	ldreq	r0, [r1], -r6, lsr #10
    62d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    62dc:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    62e0:	3c090501 	cfstr32cc	mvfx0, [r9], {1}
    62e4:	31060205 	tstcc	r6, r5, lsl #4
    62e8:	01060505 	tsteq	r6, r5, lsl #10
    62ec:	31060205 	tstcc	r6, r5, lsl #4
    62f0:	01061505 	tsteq	r6, r5, lsl #10
    62f4:	21060205 	tstcs	r6, r5, lsl #4
    62f8:	01061505 	tsteq	r6, r5, lsl #10
    62fc:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
    6300:	01c0030b 	biceq	r0, r0, fp, lsl #6
    6304:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    6308:	05207ec0 	streq	r7, [r0, #-3776]!	; 0xfffff140
    630c:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    6310:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    6314:	01bd030b 			; <UNDEFINED> instruction: 0x01bd030b
    6318:	03190520 	tsteq	r9, #32, 10	; 0x8000000
    631c:	05207ec3 	streq	r7, [r0, #-3779]!	; 0xfffff13d
    6320:	13230602 			; <UNDEFINED> instruction: 0x13230602
    6324:	05161315 	ldreq	r1, [r6, #-789]	; 0xfffffceb
    6328:	77030625 	strvc	r0, [r3, -r5, lsr #12]
    632c:	06020501 	streq	r0, [r2], -r1, lsl #10
    6330:	05660c03 	strbeq	r0, [r6, #-3075]!	; 0xfffff3fd
    6334:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    6338:	01ae030b 			; <UNDEFINED> instruction: 0x01ae030b
    633c:	03090520 	movweq	r0, #38176	; 0x9520
    6340:	052e7ed2 	streq	r7, [lr, #-3794]!	; 0xfffff12e
    6344:	ab030602 	blge	c7b54 <__ccfg+0xa7bac>
    6348:	09052e01 	stmdbeq	r5, {r0, r9, sl, fp, sp}
    634c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6350:	0b053106 	bleq	152770 <__ccfg+0x1327c8>
    6354:	09050106 	stmdbeq	r5, {r1, r2, r8}
    6358:	2702052e 	strcs	r0, [r2, -lr, lsr #10]
    635c:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    6360:	0602052e 	streq	r0, [r2], -lr, lsr #10
    6364:	13010122 	movwne	r0, #4386	; 0x1122
    6368:	01130101 	tsteq	r3, r1, lsl #2
    636c:	3f4f1501 	svccc	0x004f1501
    6370:	01060c05 	tsteq	r6, r5, lsl #24
    6374:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    6378:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    637c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6380:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6384:	22056002 	andcs	r6, r5, #2
    6388:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    638c:	3c7ba003 	ldclcc	0, cr10, [fp], #-12
    6390:	e0032205 	and	r2, r3, r5, lsl #4
    6394:	02052004 	andeq	r2, r5, #4
    6398:	9b032406 	blls	cf3b8 <__ccfg+0xaf410>
    639c:	3f05017b 	svccc	0x0005017b
    63a0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    63a4:	44053d06 	strmi	r3, [r5], #-3334	; 0xfffff2fa
    63a8:	2e050106 	adfcss	f0, f5, f6
    63ac:	0602052d 	streq	r0, [r2], -sp, lsr #10
    63b0:	0804e703 	stmdaeq	r4, {r0, r1, r8, r9, sl, sp, lr, pc}
    63b4:	28053220 	stmdacs	r5, {r5, r9, ip, sp}
    63b8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    63bc:	1d280523 	cfstr32ne	mvfx0, [r8, #-140]!	; 0xffffff74
    63c0:	23060205 	movwcs	r0, #25093	; 0x6205
    63c4:	052f0905 	streq	r0, [pc, #-2309]!	; 5ac7 <patchImageGenfsk+0x197>
    63c8:	30054e02 	andcc	r4, r5, r2, lsl #28
    63cc:	01050106 	tsteq	r5, r6, lsl #2
    63d0:	0027022f 	eoreq	r0, r7, pc, lsr #4
    63d4:	02ab0101 	adceq	r0, fp, #1073741824	; 0x40000000
    63d8:	00030000 	andeq	r0, r3, r0
    63dc:	0000014f 	andeq	r0, r0, pc, asr #2
    63e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    63e4:	0101000d 	tsteq	r1, sp
    63e8:	00000101 	andeq	r0, r0, r1, lsl #2
    63ec:	00000100 	andeq	r0, r0, r0, lsl #2
    63f0:	73752f01 	cmnvc	r5, #1, 30
    63f4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    63f8:	63672f62 	cmnvs	r7, #392	; 0x188
    63fc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6400:	6f6e2d6d 	svcvs	0x006e2d6d
    6404:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6408:	2f696261 	svccs	0x00696261
    640c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    6410:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6414:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6418:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    641c:	2f656d6f 	svccs	0x00656d6f
    6420:	70657473 	rsbvc	r7, r5, r3, ror r4
    6424:	2f6e6568 	svccs	0x006e6568
    6428:	6b736544 	blvs	1cdf940 <__ccfg+0x1cbf998>
    642c:	2f706f74 	svccs	0x00706f74
    6430:	4f534c4f 	svcmi	0x00534c4f
    6434:	2f54454e 	svccs	0x0054454e
    6438:	4f434950 	svcmi	0x00434950
    643c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6440:	2f534f63 	svccs	0x00534f63
    6444:	33314343 	teqcc	r1, #201326593	; 0xc000001
    6448:	2f005858 	svccs	0x00005858
    644c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6450:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6454:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6458:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    645c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6460:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6464:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6468:	4349502f 	movtmi	r5, #36911	; 0x902f
    646c:	502f534f 	eorpl	r5, pc, pc, asr #6
    6470:	534f6369 	movtpl	r6, #62313	; 0xf369
    6474:	6f682f00 	svcvs	0x00682f00
    6478:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    647c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6480:	442f6e65 	strtmi	r6, [pc], #-3685	; 6488 <__exidx_end+0x888>
    6484:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6488:	4f2f706f 	svcmi	0x002f706f
    648c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6490:	502f5445 	eorpl	r5, pc, r5, asr #8
    6494:	534f4349 	movtpl	r4, #62281	; 0xf349
    6498:	6369502f 	cmnvs	r9, #47	; 0x2f
    649c:	502f534f 	eorpl	r5, pc, pc, asr #6
    64a0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    64a4:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
    64a8:	00004974 	andeq	r4, r0, r4, ror r9
    64ac:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    64b0:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    64b4:	63632e6c 	cmnvs	r3, #108, 28	; 0x6c0
    64b8:	00000000 	andeq	r0, r0, r0
    64bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    64c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    64c4:	00000100 	andeq	r0, r0, r0, lsl #2
    64c8:	61647473 	smcvs	18243	; 0x4743
    64cc:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    64d0:	00000100 	andeq	r0, r0, r0, lsl #2
    64d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    64d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    64dc:	616d0000 	cmnvs	sp, r0
    64e0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    64e4:	00000200 	andeq	r0, r0, r0, lsl #4
    64e8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    64ec:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    64f0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    64f4:	75620000 	strbvc	r0, [r2, #-0]!
    64f8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    64fc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6500:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6504:	73000002 	movwvc	r0, #2
    6508:	6f697379 	svcvs	0x00697379
    650c:	0300682e 	movweq	r6, #2094	; 0x82e
    6510:	63740000 	cmnvs	r4, #0
    6514:	65645f76 	strbvs	r5, [r4, #-3958]!	; 0xfffff08a
    6518:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    651c:	00000400 	andeq	r0, r0, r0, lsl #8
    6520:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    6524:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    6528:	00003e6e 	andeq	r3, r0, lr, ror #28
    652c:	05000000 	streq	r0, [r0, #-0]
    6530:	0205002b 	andeq	r0, r5, #43	; 0x2b
    6534:	00003098 	muleq	r0, r8, r0
    6538:	05013603 	streq	r3, [r1, #-1539]	; 0xfffff9fd
    653c:	2b051602 	blcs	14bd4c <__ccfg+0x12bda4>
    6540:	10050e06 	andne	r0, r5, r6, lsl #28
    6544:	1c2b0524 	cfstr32ne	mvfx0, [fp], #-144	; 0xffffff70
    6548:	05241005 	streq	r1, [r4, #-5]!
    654c:	15053c05 	strne	r3, [r5, #-3077]	; 0xfffff3fb
    6550:	06020520 	streq	r0, [r2], -r0, lsr #10
    6554:	0612053f 			; <UNDEFINED> instruction: 0x0612053f
    6558:	06020501 	streq	r0, [r2], -r1, lsl #10
    655c:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    6560:	21010501 	tstcs	r1, r1, lsl #10
    6564:	01000402 	tsteq	r0, r2, lsl #8
    6568:	001f0501 	andseq	r0, pc, r1, lsl #10
    656c:	30bc0205 	adcscc	r0, ip, r5, lsl #4
    6570:	c2030000 	andgt	r0, r3, #0
    6574:	02050100 	andeq	r0, r5, #0, 2
    6578:	06100514 			; <UNDEFINED> instruction: 0x06100514
    657c:	1e1f0501 	cfmul32ne	mvfx0, mvfx15, mvfx1
    6580:	05221005 	streq	r1, [r2, #-5]!
    6584:	0a052005 	beq	14e5a0 <__ccfg+0x12e5f8>
    6588:	2d2a0521 	cfstr32cs	mvfx0, [sl, #-132]!	; 0xffffff7c
    658c:	052e1e05 	streq	r1, [lr, #-3589]!	; 0xfffff1fb
    6590:	02052015 	andeq	r2, r5, #21
    6594:	1e053106 	adfnes	f3, f5, f6
    6598:	09050106 	stmdbeq	r5, {r1, r2, r8}
    659c:	1e1e0522 	cfmul64ne	mvdx0, mvdx14, mvdx2
    65a0:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    65a4:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
    65a8:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    65ac:	01010003 	tsteq	r1, r3
    65b0:	05003705 	streq	r3, [r0, #-1797]	; 0xfffff8fb
    65b4:	0030e002 	eorseq	lr, r0, r2
    65b8:	00cc0300 	sbceq	r0, ip, r0, lsl #6
    65bc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    65c0:	01062505 	tsteq	r6, r5, lsl #10
    65c4:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    65c8:	01022101 	tsteq	r2, r1, lsl #2
    65cc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    65d0:	02050025 	andeq	r0, r5, #37	; 0x25
    65d4:	000030e8 	andeq	r3, r0, r8, ror #1
    65d8:	0100d103 	tsteq	r0, r3, lsl #2
    65dc:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    65e0:	02140601 	andseq	r0, r4, #1048576	; 0x100000
    65e4:	01010002 	tsteq	r1, r2
    65e8:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
    65ec:	0030ec02 	eorseq	lr, r0, r2, lsl #24
    65f0:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    65f4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    65f8:	13060105 	movwne	r0, #24837	; 0x6105
    65fc:	01000202 	tsteq	r0, r2, lsl #4
    6600:	00390501 	eorseq	r0, r9, r1, lsl #10
    6604:	30f00205 	rscscc	r0, r0, r5, lsl #4
    6608:	20030000 	andcs	r0, r3, r0
    660c:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    6610:	03390526 	teqeq	r9, #159383552	; 0x9800000
    6614:	0205207a 	andeq	r2, r5, #122	; 0x7a
    6618:	05142406 	ldreq	r2, [r4, #-1030]	; 0xfffffbfa
    661c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6620:	207a0339 	rsbscs	r0, sl, r9, lsr r3
    6624:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    6628:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    662c:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    6630:	03053c0d 	movweq	r3, #23565	; 0x5c0d
    6634:	06052106 	streq	r2, [r5], -r6, lsl #2
    6638:	0f050106 	svceq	0x00050106
    663c:	04052206 	streq	r2, [r5], #-518	; 0xfffffdfa
    6640:	06120513 			; <UNDEFINED> instruction: 0x06120513
    6644:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    6648:	010f0549 	tsteq	pc, r9, asr #10
    664c:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
    6650:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    6654:	051f0616 	ldreq	r0, [pc, #-1558]	; 6046 <__exidx_end+0x446>
    6658:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
    665c:	06100517 			; <UNDEFINED> instruction: 0x06100517
    6660:	20050501 	andcs	r0, r5, r1, lsl #10
    6664:	3f060205 	svccc	0x00060205
    6668:	01061205 	tsteq	r6, r5, lsl #4
    666c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    6670:	01060905 	tsteq	r6, r5, lsl #18
    6674:	051d0a05 	ldreq	r0, [sp, #-2565]	; 0xfffff5fb
    6678:	04053201 	streq	r3, [r5], #-513	; 0xfffffdff
    667c:	20750306 	rsbscs	r0, r5, r6, lsl #6
    6680:	01000902 	tsteq	r0, r2, lsl #18
    6684:	0001a401 	andeq	sl, r1, r1, lsl #8
    6688:	29000300 	stmdbcs	r0, {r8, r9}
    668c:	02000001 	andeq	r0, r0, #1
    6690:	0d0efb01 	vstreq	d15, [lr, #-4]
    6694:	01010100 	mrseq	r0, (UNDEF: 17)
    6698:	00000001 	andeq	r0, r0, r1
    669c:	01000001 	tsteq	r0, r1
    66a0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 65ec <__exidx_end+0x9ec>
    66a4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    66a8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    66ac:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    66b0:	6f746b73 	svcvs	0x00746b73
    66b4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    66b8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    66bc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    66c0:	2f534f43 	svccs	0x00534f43
    66c4:	4f636950 	svcmi	0x00636950
    66c8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    66cc:	2f736269 	svccs	0x00736269
    66d0:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    66d4:	2f006c61 	svccs	0x00006c61
    66d8:	2f727375 	svccs	0x00727375
    66dc:	2f62696c 	svccs	0x0062696c
    66e0:	2f636367 	svccs	0x00636367
    66e4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    66e8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    66ec:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    66f0:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    66f4:	2f312e32 	svccs	0x00312e32
    66f8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    66fc:	00656475 	rsbeq	r6, r5, r5, ror r4
    6700:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 664c <__exidx_end+0xa4c>
    6704:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6708:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    670c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6710:	6f746b73 	svcvs	0x00746b73
    6714:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6718:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    671c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6720:	2f534f43 	svccs	0x00534f43
    6724:	4f636950 	svcmi	0x00636950
    6728:	43432f53 	movtmi	r2, #16211	; 0x3f53
    672c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6730:	6f682f00 	svcvs	0x00682f00
    6734:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6738:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    673c:	442f6e65 	strtmi	r6, [pc], #-3685	; 6744 <__exidx_end+0xb44>
    6740:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6744:	4f2f706f 	svcmi	0x002f706f
    6748:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    674c:	502f5445 	eorpl	r5, pc, r5, asr #8
    6750:	534f4349 	movtpl	r4, #62281	; 0xf349
    6754:	6369502f 	cmnvs	r9, #47	; 0x2f
    6758:	0000534f 	andeq	r5, r0, pc, asr #6
    675c:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 5805 <patchGenfskRfe+0x589>
    6760:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    6764:	2e6c6169 	powcsez	f6, f4, #1.0
    6768:	00010063 	andeq	r0, r1, r3, rrx
    676c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6770:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6774:	00020068 	andeq	r0, r2, r8, rrx
    6778:	63726100 	cmnvs	r2, #0, 2
    677c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6780:	6d000003 	stcvs	0, cr0, [r0, #-12]
    6784:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    6788:	00030068 	andeq	r0, r3, r8, rrx
    678c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    6790:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6794:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6798:	62000003 	andvs	r0, r0, #3
    679c:	6f747475 	svcvs	0x00747475
    67a0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    67a4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    67a8:	00000300 	andeq	r0, r0, r0, lsl #6
    67ac:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    67b0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    67b4:	00000004 	andeq	r0, r0, r4
    67b8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    67bc:	00313802 	eorseq	r3, r1, r2, lsl #16
    67c0:	011c0300 	tsteq	ip, r0, lsl #6
    67c4:	06200601 	strteq	r0, [r0], -r1, lsl #12
    67c8:	3c26033c 	stccc	3, cr0, [r6], #-240	; 0xffffff10
    67cc:	03020501 	movweq	r0, #9473	; 0x2501
    67d0:	1313585f 	tstne	r3, #6225920	; 0x5f0000
    67d4:	13010115 	movwne	r0, #4373	; 0x1115
    67d8:	01060605 	tsteq	r6, r5, lsl #12
    67dc:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    67e0:	01060505 	tsteq	r6, r5, lsl #10
    67e4:	2f060305 	svccs	0x00060305
    67e8:	01060905 	tsteq	r6, r5, lsl #18
    67ec:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    67f0:	0205280a 	andeq	r2, r5, #655360	; 0xa0000
    67f4:	0a052e06 	beq	152014 <__ccfg+0x13206c>
    67f8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    67fc:	06058306 	streq	r8, [r5], -r6, lsl #6
    6800:	1f210106 	svcne	0x00210106
    6804:	02051f21 	andeq	r1, r5, #33, 30	; 0x84
    6808:	06052106 	streq	r2, [r5], -r6, lsl #2
    680c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6810:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    6814:	03050106 	movweq	r0, #20742	; 0x5106
    6818:	033d3006 	teqeq	sp, #6
    681c:	0d054a74 	vstreq	s8, [r5, #-464]	; 0xfffffe30
    6820:	11050106 	tstne	r5, r6, lsl #2
    6824:	20070520 	andcs	r0, r7, r0, lsr #10
    6828:	01000802 	tsteq	r0, r2, lsl #16
    682c:	00024e01 	andeq	r4, r2, r1, lsl #28
    6830:	28000300 	stmdacs	r0, {r8, r9}
    6834:	02000001 	andeq	r0, r0, #1
    6838:	0d0efb01 	vstreq	d15, [lr, #-4]
    683c:	01010100 	mrseq	r0, (UNDEF: 17)
    6840:	00000001 	andeq	r0, r0, r1
    6844:	01000001 	tsteq	r0, r1
    6848:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6794 <__exidx_end+0xb94>
    684c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6850:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6854:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6858:	6f746b73 	svcvs	0x00746b73
    685c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6860:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6864:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6868:	2f534f43 	svccs	0x00534f43
    686c:	4f636950 	svcmi	0x00636950
    6870:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    6874:	2f736269 	svccs	0x00736269
    6878:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    687c:	2f006c61 	svccs	0x00006c61
    6880:	2f727375 	svccs	0x00727375
    6884:	2f62696c 	svccs	0x0062696c
    6888:	2f636367 	svccs	0x00636367
    688c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6890:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6894:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6898:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    689c:	2f312e32 	svccs	0x00312e32
    68a0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    68a4:	00656475 	rsbeq	r6, r5, r5, ror r4
    68a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 67f4 <__exidx_end+0xbf4>
    68ac:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    68b0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    68b4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    68b8:	6f746b73 	svcvs	0x00746b73
    68bc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    68c0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    68c4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    68c8:	2f534f43 	svccs	0x00534f43
    68cc:	4f636950 	svcmi	0x00636950
    68d0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    68d4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    68d8:	6f682f00 	svcvs	0x00682f00
    68dc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    68e0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    68e4:	442f6e65 	strtmi	r6, [pc], #-3685	; 68ec <__exidx_end+0xcec>
    68e8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    68ec:	4f2f706f 	svcmi	0x002f706f
    68f0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    68f4:	502f5445 	eorpl	r5, pc, r5, asr #8
    68f8:	534f4349 	movtpl	r4, #62281	; 0xf349
    68fc:	6369502f 	cmnvs	r9, #47	; 0x2f
    6900:	0000534f 	andeq	r5, r0, pc, asr #6
    6904:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    6908:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    690c:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    6910:	00000100 	andeq	r0, r0, r0, lsl #2
    6914:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6918:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    691c:	00000200 	andeq	r0, r0, r0, lsl #4
    6920:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6924:	0300682e 	movweq	r6, #2094	; 0x82e
    6928:	616d0000 	cmnvs	sp, r0
    692c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6930:	00000300 	andeq	r0, r0, r0, lsl #6
    6934:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6938:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    693c:	0300682e 	movweq	r6, #2094	; 0x82e
    6940:	75620000 	strbvc	r0, [r2, #-0]!
    6944:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6948:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    694c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6950:	73000003 	movwvc	r0, #3
    6954:	6f697379 	svcvs	0x00697379
    6958:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    695c:	05000000 	streq	r0, [r0, #-0]
    6960:	02050001 	andeq	r0, r5, #1
    6964:	000031a8 	andeq	r3, r0, r8, lsr #3
    6968:	01012203 	tsteq	r1, r3, lsl #4
    696c:	3c062006 	stccc	0, cr2, [r6], {6}
    6970:	136b0205 	cmnne	fp, #1342177280	; 0x50000000
    6974:	10051613 	andne	r1, r5, r3, lsl r6
    6978:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    697c:	06030520 	streq	r0, [r3], -r0, lsr #10
    6980:	3f020530 	svccc	0x00020530
    6984:	01061d05 	tsteq	r6, r5, lsl #26
    6988:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
    698c:	0b05201d 	bleq	14ea08 <__ccfg+0x12ea60>
    6990:	20050520 	andcs	r0, r5, r0, lsr #10
    6994:	24060305 	strcs	r0, [r6], #-773	; 0xfffffcfb
    6998:	3002052f 	andcc	r0, r2, pc, lsr #10
    699c:	13060605 	movwne	r0, #26117	; 0x6605
    69a0:	061f0205 	ldreq	r0, [pc], -r5, lsl #4
    69a4:	0606052f 	streq	r0, [r6], -pc, lsr #10
    69a8:	06020501 	streq	r0, [r2], -r1, lsl #10
    69ac:	16010130 			; <UNDEFINED> instruction: 0x16010130
    69b0:	06050583 	streq	r0, [r5], -r3, lsl #11
    69b4:	06030501 	streq	r0, [r3], -r1, lsl #10
    69b8:	0606053d 			; <UNDEFINED> instruction: 0x0606053d
    69bc:	06040501 	streq	r0, [r4], -r1, lsl #10
    69c0:	0607052f 	streq	r0, [r7], -pc, lsr #10
    69c4:	21040501 	tstcs	r4, r1, lsl #10
    69c8:	051f0705 	ldreq	r0, [pc, #-1797]	; 62cb <__exidx_end+0x6cb>
    69cc:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    69d0:	07053103 	streq	r3, [r5, -r3, lsl #2]
    69d4:	06050106 	streq	r0, [r5], -r6, lsl #2
    69d8:	06040520 	streq	r0, [r4], -r0, lsr #10
    69dc:	3e02053e 	mcrcc	5, 0, r0, cr2, cr14, {1}
    69e0:	01060605 	tsteq	r6, r5, lsl #12
    69e4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    69e8:	03052e13 	movweq	r2, #24083	; 0x5e13
    69ec:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    69f0:	03050106 	movweq	r0, #20742	; 0x5106
    69f4:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    69f8:	03050106 	movweq	r0, #20742	; 0x5106
    69fc:	02052f06 	andeq	r2, r5, #6, 30
    6a00:	06060531 			; <UNDEFINED> instruction: 0x06060531
    6a04:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    6a08:	21060305 	tstcs	r6, r5, lsl #6
    6a0c:	01060605 	tsteq	r6, r5, lsl #12
    6a10:	03051f21 	movweq	r1, #24353	; 0x5f21
    6a14:	06052f06 	streq	r2, [r5], -r6, lsl #30
    6a18:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6a1c:	91402306 	cmpls	r0, r6, lsl #6
    6a20:	01060605 	tsteq	r6, r5, lsl #12
    6a24:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    6a28:	01060c05 	tsteq	r6, r5, lsl #24
    6a2c:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
    6a30:	02052107 	andeq	r2, r5, #-1073741823	; 0xc0000001
    6a34:	05054b06 	streq	r4, [r5, #-2822]	; 0xfffff4fa
    6a38:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6a3c:	0a052406 	beq	14fa5c <__ccfg+0x12fab4>
    6a40:	06050106 	streq	r0, [r5], -r6, lsl #2
    6a44:	1f0a059f 	svcne	0x000a059f
    6a48:	21060205 	tstcs	r6, r5, lsl #4
    6a4c:	01060605 	tsteq	r6, r5, lsl #12
    6a50:	2f060205 	svccs	0x00060205
    6a54:	01060505 	tsteq	r6, r5, lsl #10
    6a58:	21060305 	tstcs	r6, r5, lsl #6
    6a5c:	01060d05 	tsteq	r6, r5, lsl #26
    6a60:	2f060305 	svccs	0x00060305
    6a64:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    6a68:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6a6c:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    6a70:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    6a74:	01053a02 	tsteq	r5, r2, lsl #20
    6a78:	0d023006 	stceq	0, cr3, [r2, #-24]	; 0xffffffe8
    6a7c:	c0010100 	andgt	r0, r1, r0, lsl #2
    6a80:	03000003 	movweq	r0, #3
    6a84:	00013d00 	andeq	r3, r1, r0, lsl #26
    6a88:	fb010200 	blx	47292 <__ccfg+0x272ea>
    6a8c:	01000d0e 	tsteq	r0, lr, lsl #26
    6a90:	00010101 	andeq	r0, r1, r1, lsl #2
    6a94:	00010000 	andeq	r0, r1, r0
    6a98:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    6a9c:	2f656d6f 	svccs	0x00656d6f
    6aa0:	70657473 	rsbvc	r7, r5, r3, ror r4
    6aa4:	2f6e6568 	svccs	0x006e6568
    6aa8:	6b736544 	blvs	1cdffc0 <__ccfg+0x1cc0018>
    6aac:	2f706f74 	svccs	0x00706f74
    6ab0:	4f534c4f 	svcmi	0x00534c4f
    6ab4:	2f54454e 	svccs	0x0054454e
    6ab8:	4f434950 	svcmi	0x00434950
    6abc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6ac0:	2f534f63 	svccs	0x00534f63
    6ac4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    6ac8:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    6acc:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    6ad0:	73752f00 	cmnvc	r5, #0, 30
    6ad4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6ad8:	63672f62 	cmnvs	r7, #392	; 0x188
    6adc:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6ae0:	6f6e2d6d 	svcvs	0x006e2d6d
    6ae4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6ae8:	2f696261 	svccs	0x00696261
    6aec:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    6af0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6af4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6af8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    6afc:	2f656d6f 	svccs	0x00656d6f
    6b00:	70657473 	rsbvc	r7, r5, r3, ror r4
    6b04:	2f6e6568 	svccs	0x006e6568
    6b08:	6b736544 	blvs	1ce0020 <__ccfg+0x1cc0078>
    6b0c:	2f706f74 	svccs	0x00706f74
    6b10:	4f534c4f 	svcmi	0x00534c4f
    6b14:	2f54454e 	svccs	0x0054454e
    6b18:	4f434950 	svcmi	0x00434950
    6b1c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6b20:	2f534f63 	svccs	0x00534f63
    6b24:	33314343 	teqcc	r1, #201326593	; 0xc000001
    6b28:	2f005858 	svccs	0x00005858
    6b2c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6b30:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6b34:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6b38:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6b3c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6b40:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6b44:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6b48:	4349502f 	movtmi	r5, #36911	; 0x902f
    6b4c:	502f534f 	eorpl	r5, pc, pc, asr #6
    6b50:	534f6369 	movtpl	r6, #62313	; 0xf369
    6b54:	66760000 	ldrbtvs	r0, [r6], -r0
    6b58:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    6b5c:	00010063 	andeq	r0, r1, r3, rrx
    6b60:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6b64:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6b68:	00020068 	andeq	r0, r2, r8, rrx
    6b6c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6b70:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    6b74:	00020068 	andeq	r0, r2, r8, rrx
    6b78:	63726100 	cmnvs	r2, #0, 2
    6b7c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6b80:	6d000003 	stcvs	0, cr0, [r0, #-12]
    6b84:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    6b88:	00030068 	andeq	r0, r3, r8, rrx
    6b8c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    6b90:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6b94:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6b98:	62000003 	andvs	r0, r0, #3
    6b9c:	6f747475 	svcvs	0x00747475
    6ba0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6ba4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    6ba8:	00000300 	andeq	r0, r0, r0, lsl #6
    6bac:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    6bb0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    6bb4:	3c000004 	stccc	0, cr0, [r0], {4}
    6bb8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6bbc:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    6bc0:	0000003e 	andeq	r0, r0, lr, lsr r0
    6bc4:	15050000 	strne	r0, [r5, #-0]
    6bc8:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
    6bcc:	03000032 	movweq	r0, #50	; 0x32
    6bd0:	0305010c 	movweq	r0, #20748	; 0x510c
    6bd4:	06060513 			; <UNDEFINED> instruction: 0x06060513
    6bd8:	580b0501 	stmdapl	fp, {r0, r8, sl}
    6bdc:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    6be0:	01060e05 	tsteq	r6, r5, lsl #28
    6be4:	30060305 	andcc	r0, r6, r5, lsl #6
    6be8:	01060405 	tsteq	r6, r5, lsl #8
    6bec:	02590205 	subseq	r0, r9, #1342177280	; 0x50000000
    6bf0:	01010001 	tsteq	r1, r1
    6bf4:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    6bf8:	0032e402 	eorseq	lr, r2, r2, lsl #8
    6bfc:	2e061900 	vmlacs.f16	s2, s12, s0	; <UNPREDICTABLE>
    6c00:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    6c04:	2e1d0304 	cdpcs	3, 1, cr0, cr13, cr4, {0}
    6c08:	28030505 	stmdacs	r3, {r0, r2, r8, sl}
    6c0c:	03070520 	movweq	r0, #29984	; 0x7520
    6c10:	06052071 			; <UNDEFINED> instruction: 0x06052071
    6c14:	05204a03 	streq	r4, [r0, #-2563]!	; 0xfffff5fd
    6c18:	133e0602 	teqne	lr, #2097152	; 0x200000
    6c1c:	18030514 	stmdane	r3, {r2, r4, r8, sl}
    6c20:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    6c24:	06040501 	streq	r0, [r4], -r1, lsl #10
    6c28:	06020501 	streq	r0, [r2], -r1, lsl #10
    6c2c:	14030530 	strne	r0, [r3], #-1328	; 0xfffffad0
    6c30:	01060505 	tsteq	r6, r5, lsl #10
    6c34:	30060305 	andcc	r0, r6, r5, lsl #6
    6c38:	01060605 	tsteq	r6, r5, lsl #12
    6c3c:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    6c40:	01060b05 	tsteq	r6, r5, lsl #22
    6c44:	052e1005 	streq	r1, [lr, #-5]!
    6c48:	07052105 	streq	r2, [r5, -r5, lsl #2]
    6c4c:	0605052d 	streq	r0, [r5], -sp, lsr #10
    6c50:	04053d3d 	streq	r3, [r5], #-3389	; 0xfffff2c3
    6c54:	0100da03 	tsteq	r0, r3, lsl #20
    6c58:	06070559 			; <UNDEFINED> instruction: 0x06070559
    6c5c:	06040501 	streq	r0, [r4], -r1, lsl #10
    6c60:	4a7fa703 	bmi	1ff0874 <__ccfg+0x1fd08cc>
    6c64:	03060505 	movweq	r0, #25861	; 0x6505
    6c68:	062000c2 	strteq	r0, [r0], -r2, asr #1
    6c6c:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    6c70:	06030510 			; <UNDEFINED> instruction: 0x06030510
    6c74:	052e4303 	streq	r4, [lr, #-771]!	; 0xfffffcfd
    6c78:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6c7c:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    6c80:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6c84:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
    6c88:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    6c8c:	e400c903 	str	ip, [r0], #-2307	; 0xfffff6fd
    6c90:	08055959 	stmdaeq	r5, {r0, r3, r4, r6, r8, fp, ip, lr}
    6c94:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6c98:	3c090306 	stccc	3, cr0, [r9], {6}
    6c9c:	01060c05 	tsteq	r6, r5, lsl #24
    6ca0:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    6ca4:	7fa90304 	svcvc	0x00a90304
    6ca8:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    6cac:	010f0568 	tsteq	pc, r8, ror #10
    6cb0:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    6cb4:	0513060c 	ldreq	r0, [r3, #-1548]	; 0xfffff9f4
    6cb8:	05052d12 	streq	r2, [r5, #-3346]	; 0xfffff2ee
    6cbc:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    6cc0:	06051406 	streq	r1, [r5], -r6, lsl #8
    6cc4:	0e052d06 	cdpeq	13, 0, cr2, cr5, cr6, {0}
    6cc8:	14051306 	strne	r1, [r5], #-774	; 0xfffffcfa
    6ccc:	2d06052e 	cfstr32cs	mvfx0, [r6, #-184]	; 0xffffff48
    6cd0:	09055a06 	stmdbeq	r5, {r1, r2, r9, fp, ip, lr}
    6cd4:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    6cd8:	16053906 	strne	r3, [r5], -r6, lsl #18
    6cdc:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6ce0:	06052e06 	streq	r2, [r5], -r6, lsl #28
    6ce4:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    6ce8:	20090306 	andcs	r0, r9, r6, lsl #6
    6cec:	06120513 			; <UNDEFINED> instruction: 0x06120513
    6cf0:	2f080501 	svccs	0x00080501
    6cf4:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    6cf8:	052f0605 	streq	r0, [pc, #-1541]!	; 66fb <__exidx_end+0xafb>
    6cfc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    6d00:	06052012 			; <UNDEFINED> instruction: 0x06052012
    6d04:	05593006 	ldrbeq	r3, [r9, #-6]
    6d08:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    6d0c:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
    6d10:	6f03060c 	svcvs	0x0003060c
    6d14:	03050501 	movweq	r0, #21761	; 0x5501
    6d18:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    6d1c:	3c062e01 	stccc	14, cr2, [r6], {1}
    6d20:	74014a06 	strvc	r4, [r1], #-2566	; 0xfffff5fa
    6d24:	4a202082 	bmi	80ef34 <__ccfg+0x7eef8c>
    6d28:	05252e20 	streq	r2, [r5, #-3616]!	; 0xfffff1e0
    6d2c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6d30:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    6d34:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    6d38:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    6d3c:	05133006 	ldreq	r3, [r3, #-6]
    6d40:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    6d44:	08051f0a 	stmdaeq	r5, {r1, r3, r8, r9, sl, fp, ip}
    6d48:	0606052d 	streq	r0, [r6], -sp, lsr #10
    6d4c:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    6d50:	13050106 	movwne	r0, #20742	; 0x5106
    6d54:	06070520 	streq	r0, [r7], -r0, lsr #10
    6d58:	0b05593f 	bleq	15d25c <__ccfg+0x13d2b4>
    6d5c:	06050106 	streq	r0, [r5], -r6, lsl #2
    6d60:	05053006 	streq	r3, [r5, #-6]
    6d64:	016f0306 	cmneq	pc, r6, lsl #6
    6d68:	11030605 	tstne	r3, r5, lsl #12
    6d6c:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    6d70:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    6d74:	6666014a 	strbtvs	r0, [r6], -sl, asr #2
    6d78:	20582e01 	subscs	r2, r8, r1, lsl #28
    6d7c:	210c052e 	tstcs	ip, lr, lsr #10
    6d80:	01060f05 	tsteq	r6, r5, lsl #30
    6d84:	2f060605 	svccs	0x00060605
    6d88:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    6d8c:	0a051406 	beq	14bdac <__ccfg+0x12be04>
    6d90:	2d08052d 	cfstr32cs	mvfx0, [r8, #-180]	; 0xffffff4c
    6d94:	21060605 	tstcs	r6, r5, lsl #12
    6d98:	05140705 	ldreq	r0, [r4, #-1797]	; 0xfffff8fb
    6d9c:	0513060f 	ldreq	r0, [r3, #-1551]	; 0xfffff9f1
    6da0:	07052e15 	smladeq	r5, r5, lr, r2
    6da4:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    6da8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    6dac:	05470615 	strbeq	r0, [r7, #-1557]	; 0xfffff9eb
    6db0:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    6db4:	052e0613 	streq	r0, [lr, #-1555]!	; 0xfffff9ed
    6db8:	05130607 	ldreq	r0, [r3, #-1543]	; 0xfffff9f9
    6dbc:	59260606 	stmdbpl	r6!, {r1, r2, r9, sl}
    6dc0:	134f0505 	movtne	r0, #62725	; 0xf505
    6dc4:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6dc8:	2f050511 	svccs	0x00050511
    6dcc:	13134f06 	tstne	r3, #6, 30
    6dd0:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    6dd4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6dd8:	06052e0b 	streq	r2, [r5], -fp, lsl #28
    6ddc:	054b3d06 	strbeq	r3, [fp, #-3334]	; 0xfffff2fa
    6de0:	ad03060a 	stcge	6, cr0, [r3, #-40]	; 0xffffffd8
    6de4:	0702207f 	smlsdxeq	r2, pc, r0, r2	; <UNPREDICTABLE>
    6de8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6dec:	02050035 	andeq	r0, r5, #53	; 0x35
    6df0:	00003514 	andeq	r3, r0, r4, lsl r5
    6df4:	01019003 	tsteq	r1, r3
    6df8:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    6dfc:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    6e00:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    6e04:	30060305 	andcc	r0, r6, r5, lsl #6
    6e08:	06010567 	streq	r0, [r1], -r7, ror #10
    6e0c:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    6e10:	72030602 	andvc	r0, r3, #2097152	; 0x200000
    6e14:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
    6e18:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    6e1c:	3f060205 	svccc	0x00060205
    6e20:	01061505 	tsteq	r6, r5, lsl #10
    6e24:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    6e28:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    6e2c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6e30:	0b055805 	bleq	15ce4c <__ccfg+0x13cea4>
    6e34:	20050520 	andcs	r0, r5, r0, lsr #10
    6e38:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    6e3c:	0202133d 	andeq	r1, r2, #-201326592	; 0xf4000000
    6e40:	c9010100 	stmdbgt	r1, {r8}
    6e44:	03000002 	movweq	r0, #2
    6e48:	00013d00 	andeq	r3, r1, r0, lsl #26
    6e4c:	fb010200 	blx	47656 <__ccfg+0x276ae>
    6e50:	01000d0e 	tsteq	r0, lr, lsl #26
    6e54:	00010101 	andeq	r0, r1, r1, lsl #2
    6e58:	00010000 	andeq	r0, r1, r0
    6e5c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    6e60:	2f656d6f 	svccs	0x00656d6f
    6e64:	70657473 	rsbvc	r7, r5, r3, ror r4
    6e68:	2f6e6568 	svccs	0x006e6568
    6e6c:	6b736544 	blvs	1ce0384 <__ccfg+0x1cc03dc>
    6e70:	2f706f74 	svccs	0x00706f74
    6e74:	4f534c4f 	svcmi	0x00534c4f
    6e78:	2f54454e 	svccs	0x0054454e
    6e7c:	4f434950 	svcmi	0x00434950
    6e80:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6e84:	2f534f63 	svccs	0x00534f63
    6e88:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    6e8c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    6e90:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    6e94:	73752f00 	cmnvc	r5, #0, 30
    6e98:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    6e9c:	63672f62 	cmnvs	r7, #392	; 0x188
    6ea0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    6ea4:	6f6e2d6d 	svcvs	0x006e2d6d
    6ea8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6eac:	2f696261 	svccs	0x00696261
    6eb0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    6eb4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    6eb8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6ebc:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    6ec0:	2f656d6f 	svccs	0x00656d6f
    6ec4:	70657473 	rsbvc	r7, r5, r3, ror r4
    6ec8:	2f6e6568 	svccs	0x006e6568
    6ecc:	6b736544 	blvs	1ce03e4 <__ccfg+0x1cc043c>
    6ed0:	2f706f74 	svccs	0x00706f74
    6ed4:	4f534c4f 	svcmi	0x00534c4f
    6ed8:	2f54454e 	svccs	0x0054454e
    6edc:	4f434950 	svcmi	0x00434950
    6ee0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6ee4:	2f534f63 	svccs	0x00534f63
    6ee8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    6eec:	2f005858 	svccs	0x00005858
    6ef0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6ef4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6ef8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6efc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6f00:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6f04:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6f08:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6f0c:	4349502f 	movtmi	r5, #36911	; 0x902f
    6f10:	502f534f 	eorpl	r5, pc, pc, asr #6
    6f14:	534f6369 	movtpl	r6, #62313	; 0xf369
    6f18:	73760000 	cmnvc	r6, #0
    6f1c:	2e6e6163 	powcsez	f6, f6, f3
    6f20:	00010063 	andeq	r0, r1, r3, rrx
    6f24:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6f28:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6f2c:	00020068 	andeq	r0, r2, r8, rrx
    6f30:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6f34:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    6f38:	00020068 	andeq	r0, r2, r8, rrx
    6f3c:	63726100 	cmnvs	r2, #0, 2
    6f40:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6f44:	6d000003 	stcvs	0, cr0, [r0, #-12]
    6f48:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    6f4c:	00030068 	andeq	r0, r3, r8, rrx
    6f50:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    6f54:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6f58:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6f5c:	62000003 	andvs	r0, r0, #3
    6f60:	6f747475 	svcvs	0x00747475
    6f64:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6f68:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    6f6c:	00000300 	andeq	r0, r0, r0, lsl #6
    6f70:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    6f74:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    6f78:	3c000004 	stccc	0, cr0, [r0], {4}
    6f7c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6f80:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    6f84:	0000003e 	andeq	r0, r0, lr, lsr r0
    6f88:	3a050000 	bcc	146f90 <__ccfg+0x126fe8>
    6f8c:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    6f90:	19000035 	stmdbne	r0, {r0, r2, r4, r5}
    6f94:	03140205 	tsteq	r4, #1342177280	; 0x50000000
    6f98:	0505013a 	streq	r0, [r5, #-314]	; 0xfffffec6
    6f9c:	3a050106 	bcc	1473bc <__ccfg+0x127414>
    6fa0:	05204403 	streq	r4, [r0, #-1027]!	; 0xfffffbfd
    6fa4:	2e3c0305 	cdpcs	3, 3, cr0, cr12, cr5, {0}
    6fa8:	053c1205 	ldreq	r1, [ip, #-517]!	; 0xfffffdfb
    6fac:	16054005 	strne	r4, [r5], -r5
    6fb0:	05200e03 	streq	r0, [r0, #-3587]!	; 0xfffff1fd
    6fb4:	2e11030b 	cdpcs	3, 1, cr0, cr1, cr11, {0}
    6fb8:	03060805 	movweq	r0, #26629	; 0x6805
    6fbc:	09053c62 	stmdbeq	r5, {r1, r5, r6, sl, fp, ip, sp}
    6fc0:	08050106 	stmdaeq	r5, {r1, r2, r8}
    6fc4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    6fc8:	06060521 	streq	r0, [r6], -r1, lsr #10
    6fcc:	06030501 	streq	r0, [r3], -r1, lsl #10
    6fd0:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    6fd4:	200f0501 	andcs	r0, pc, r1, lsl #10
    6fd8:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
    6fdc:	ac2e0301 	stcge	3, cr0, [lr], #-4
    6fe0:	52030305 	andpl	r0, r3, #335544320	; 0x14000000
    6fe4:	030b053c 	movweq	r0, #46396	; 0xb53c
    6fe8:	0a05741b 	beq	16405c <__ccfg+0x1440b4>
    6fec:	0b052e06 	bleq	15280c <__ccfg+0x132864>
    6ff0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6ff4:	0705ad06 	streq	sl, [r5, -r6, lsl #26]
    6ff8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6ffc:	07053006 	streq	r3, [r5, -r6]
    7000:	08051506 	stmdaeq	r5, {r1, r2, r8, sl, ip}
    7004:	2d06051e 	cfstr32cs	mvfx0, [r6, #-120]	; 0xffffff88
    7008:	2f060405 	svccs	0x00060405
    700c:	06070514 			; <UNDEFINED> instruction: 0x06070514
    7010:	060b0501 	streq	r0, [fp], -r1, lsl #10
    7014:	060d052f 	streq	r0, [sp], -pc, lsr #10
    7018:	660c0501 	strvs	r0, [ip], -r1, lsl #10
    701c:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
    7020:	0b052e2b 	bleq	1528d4 <__ccfg+0x13292c>
    7024:	060a054e 	streq	r0, [sl], -lr, asr #10
    7028:	060b053c 			; <UNDEFINED> instruction: 0x060b053c
    702c:	06040501 	streq	r0, [r4], -r1, lsl #10
    7030:	06180583 	ldreq	r0, [r8], -r3, lsl #11
    7034:	06040501 	streq	r0, [r4], -r1, lsl #10
    7038:	0609054b 	streq	r0, [r9], -fp, asr #10
    703c:	06040501 	streq	r0, [r4], -r1, lsl #10
    7040:	0311052f 	tsteq	r1, #197132288	; 0xbc00000
    7044:	063c2059 			; <UNDEFINED> instruction: 0x063c2059
    7048:	2e062e66 	cdpcs	14, 0, cr2, cr6, cr6, {3}
    704c:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    7050:	20013c66 	andcs	r3, r1, r6, ror #24
    7054:	3c060106 	stfccs	f0, [r6], {6}
    7058:	4a063c74 	bmi	196230 <__ccfg+0x176288>
    705c:	21743c06 	cmncs	r4, r6, lsl #24
    7060:	013c902e 	teqeq	ip, lr, lsr #32
    7064:	0601062e 	streq	r0, [r1], -lr, lsr #12
    7068:	2190822e 	orrscs	r8, r0, lr, lsr #4
    706c:	0690064a 	ldreq	r0, [r0], sl, asr #12
    7070:	2e013c58 	mcrcs	12, 0, r3, cr1, cr8, {2}
    7074:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    7078:	6682063c 			; <UNDEFINED> instruction: 0x6682063c
    707c:	3c3c3c06 	ldccc	12, cr3, [ip], #-24	; 0xffffffe8
    7080:	7704053c 	smladxvc	r4, ip, r5, r0
    7084:	01060c05 	tsteq	r6, r5, lsl #24
    7088:	05201005 	streq	r1, [r0, #-5]!
    708c:	06ae0616 	ssateq	r0, #15, r6, lsl #12
    7090:	2e062e66 	cdpcs	14, 0, cr2, cr6, cr6, {3}
    7094:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    7098:	2e013c3c 	mcrcs	12, 0, r3, cr1, cr12, {1}
    709c:	3c060106 	stfccs	f0, [r6], {6}
    70a0:	06923c82 	ldreq	r3, [r2], r2, lsl #25
    70a4:	3c580690 	mrrccc	6, 9, r0, r8, cr0
    70a8:	06012e01 	streq	r2, [r1], -r1, lsl #28
    70ac:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    70b0:	3c066674 	stccc	6, cr6, [r6], {116}	; 0x74
    70b4:	723c3c3c 	eorsvc	r3, ip, #60, 24	; 0x3c00
    70b8:	2e063c06 	cdpcs	12, 0, cr3, cr6, cr6, {0}
    70bc:	903c2174 	eorsls	r2, ip, r4, ror r1
    70c0:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    70c4:	902e0601 	eorls	r0, lr, r1, lsl #12
    70c8:	04052174 	streq	r2, [r5], #-372	; 0xfffffe8c
    70cc:	0b05144f 	bleq	14c210 <__ccfg+0x12c268>
    70d0:	07050106 	streq	r0, [r5, -r6, lsl #2]
    70d4:	0604052e 	streq	r0, [r4], -lr, lsr #10
    70d8:	0608053e 			; <UNDEFINED> instruction: 0x0608053e
    70dc:	2d060513 	cfstr32cs	mvfx0, [r6, #-76]	; 0xffffffb4
    70e0:	21060405 	tstcs	r6, r5, lsl #8
    70e4:	06090513 			; <UNDEFINED> instruction: 0x06090513
    70e8:	06040501 	streq	r0, [r4], -r1, lsl #10
    70ec:	060b0521 	streq	r0, [fp], -r1, lsr #10
    70f0:	06070524 	streq	r0, [r7], -r4, lsr #10
    70f4:	05740903 	ldrbeq	r0, [r4, #-2307]!	; 0xfffff6fd
    70f8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    70fc:	0a053e0b 	beq	156930 <__ccfg+0x136988>
    7100:	05665403 	strbeq	r5, [r6, #-1027]!	; 0xfffffbfd
    7104:	4a0a0311 	bmi	287d50 <__ccfg+0x267da8>
    7108:	02511605 	subseq	r1, r1, #5242880	; 0x500000
    710c:	01010005 	tsteq	r1, r5
    7110:	0000028e 	andeq	r0, r0, lr, lsl #5
    7114:	02880003 	addeq	r0, r8, #3
    7118:	01020000 	mrseq	r0, (UNDEF: 2)
    711c:	000d0efb 	strdeq	r0, [sp], -fp
    7120:	01010101 	tsteq	r1, r1, lsl #2
    7124:	01000000 	mrseq	r0, (UNDEF: 0)
    7128:	2f010000 	svccs	0x00010000
    712c:	2f727375 	svccs	0x00727375
    7130:	2f62696c 	svccs	0x0062696c
    7134:	2f636367 	svccs	0x00636367
    7138:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    713c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7140:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7144:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    7148:	2f312e32 	svccs	0x00312e32
    714c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7150:	00656475 	rsbeq	r6, r5, r5, ror r4
    7154:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    7158:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    715c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7160:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    7164:	2f62696c 	svccs	0x0062696c
    7168:	00737973 	rsbseq	r7, r3, r3, ror r9
    716c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 70b8 <__exidx_end+0x14b8>
    7170:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    7174:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    7178:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    717c:	6f746b73 	svcvs	0x00746b73
    7180:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    7184:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    7188:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    718c:	2f534f43 	svccs	0x00534f43
    7190:	4f636950 	svcmi	0x00636950
    7194:	43432f53 	movtmi	r2, #16211	; 0x3f53
    7198:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    719c:	3143432f 	cmpcc	r3, pc, lsr #6
    71a0:	57585833 	smmlarpl	r8, r3, r8, r5
    71a4:	2f455241 	svccs	0x00455241
    71a8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    71ac:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    71b0:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    71b4:	2f656d6f 	svccs	0x00656d6f
    71b8:	70657473 	rsbvc	r7, r5, r3, ror r4
    71bc:	2f6e6568 	svccs	0x006e6568
    71c0:	6b736544 	blvs	1ce06d8 <__ccfg+0x1cc0730>
    71c4:	2f706f74 	svccs	0x00706f74
    71c8:	4f534c4f 	svcmi	0x00534c4f
    71cc:	2f54454e 	svccs	0x0054454e
    71d0:	4f434950 	svcmi	0x00434950
    71d4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    71d8:	2f534f63 	svccs	0x00534f63
    71dc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    71e0:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    71e4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    71e8:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    71ec:	66722f45 	ldrbtvs	r2, [r2], -r5, asr #30
    71f0:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    71f4:	73656863 	cmnvc	r5, #6488064	; 0x630000
    71f8:	6f682f00 	svcvs	0x00682f00
    71fc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    7200:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    7204:	442f6e65 	strtmi	r6, [pc], #-3685	; 720c <__exidx_end+0x160c>
    7208:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    720c:	4f2f706f 	svcmi	0x002f706f
    7210:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    7214:	502f5445 	eorpl	r5, pc, r5, asr #8
    7218:	534f4349 	movtpl	r4, #62281	; 0xf349
    721c:	6369502f 	cmnvs	r9, #47	; 0x2f
    7220:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    7224:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    7228:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    722c:	2f656d6f 	svccs	0x00656d6f
    7230:	70657473 	rsbvc	r7, r5, r3, ror r4
    7234:	2f6e6568 	svccs	0x006e6568
    7238:	6b736544 	blvs	1ce0750 <__ccfg+0x1cc07a8>
    723c:	2f706f74 	svccs	0x00706f74
    7240:	4f534c4f 	svcmi	0x00534c4f
    7244:	2f54454e 	svccs	0x0054454e
    7248:	4f434950 	svcmi	0x00434950
    724c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    7250:	00534f63 	subseq	r4, r3, r3, ror #30
    7254:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 71a0 <__exidx_end+0x15a0>
    7258:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    725c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    7260:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    7264:	6f746b73 	svcvs	0x00746b73
    7268:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    726c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    7270:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    7274:	2f534f43 	svccs	0x00534f43
    7278:	4f636950 	svcmi	0x00636950
    727c:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    7280:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    7284:	74730000 	ldrbtvc	r0, [r3], #-0
    7288:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    728c:	0100682e 	tsteq	r0, lr, lsr #16
    7290:	74730000 	ldrbtvc	r0, [r3], #-0
    7294:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    7298:	0100682e 	tsteq	r0, lr, lsr #16
    729c:	745f0000 	ldrbvc	r0, [pc], #-0	; 72a4 <__exidx_end+0x16a4>
    72a0:	73657079 	cmnvc	r5, #121	; 0x79
    72a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    72a8:	65720000 	ldrbvs	r0, [r2, #-0]!
    72ac:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    72b0:	00020068 	andeq	r0, r2, r8, rrx
    72b4:	636f6c00 	cmnvs	pc, #0, 24
    72b8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    72bc:	72000002 	andvc	r0, r0, #2
    72c0:	616d5f66 	cmnvs	sp, r6, ror #30
    72c4:	6f626c69 	svcvs	0x00626c69
    72c8:	00682e78 	rsbeq	r2, r8, r8, ror lr
    72cc:	72000003 	andvc	r0, r0, #3
    72d0:	6f635f66 	svcvs	0x00635f66
    72d4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    72d8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    72dc:	0300682e 	movweq	r6, #2094	; 0x82e
    72e0:	66720000 	ldrbtvs	r0, [r2], -r0
    72e4:	6f72705f 	svcvs	0x0072705f
    72e8:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    72ec:	00682e64 	rsbeq	r2, r8, r4, ror #28
    72f0:	72000003 	andvc	r0, r0, #3
    72f4:	61705f66 	cmnvs	r0, r6, ror #30
    72f8:	5f686374 	svcpl	0x00686374
    72fc:	5f657063 	svcpl	0x00657063
    7300:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    7304:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    7308:	00000400 	andeq	r0, r0, r0, lsl #8
    730c:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    7310:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    7314:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    7318:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    731c:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    7320:	00040068 	andeq	r0, r4, r8, rrx
    7324:	63726100 	cmnvs	r2, #0, 2
    7328:	00682e68 	rsbeq	r2, r8, r8, ror #28
    732c:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    7330:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    7334:	00050068 	andeq	r0, r5, r8, rrx
    7338:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    733c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7340:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7344:	62000005 	andvs	r0, r0, #5
    7348:	6f747475 	svcvs	0x00747475
    734c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    7350:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    7354:	00000500 	andeq	r0, r0, r0, lsl #10
    7358:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    735c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    7360:	6b000006 	blvs	7380 <__exidx_end+0x1780>
    7364:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    7368:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    736c:	73000007 	movwvc	r0, #7
    7370:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    7374:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    7378:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    737c:	2e73676e 	cdpcs	7, 7, cr6, cr3, cr14, {3}
    7380:	00050068 	andeq	r0, r5, r8, rrx
    7384:	616d7300 	cmnvs	sp, r0, lsl #6
    7388:	66727472 			; <UNDEFINED> instruction: 0x66727472
    738c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    7390:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    7394:	706c5f73 	rsbvc	r5, ip, r3, ror pc
    7398:	2e72685f 	mrccs	8, 3, r6, cr2, cr15, {2}
    739c:	00050063 	andeq	r0, r5, r3, rrx
    73a0:	019c0000 	orrseq	r0, ip, r0
    73a4:	00020000 	andeq	r0, r2, r0
    73a8:	0000015f 	andeq	r0, r0, pc, asr r1
    73ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    73b0:	0101000d 	tsteq	r1, sp
    73b4:	00000101 	andeq	r0, r0, r1, lsl #2
    73b8:	00000100 	andeq	r0, r0, r0, lsl #2
    73bc:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    73c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    73c4:	2f2e2e2f 	svccs	0x002e2e2f
    73c8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    73cc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    73d0:	3a630062 	bcc	18c7560 <__ccfg+0x18a75b8>
    73d4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    73d8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    73dc:	302e322e 	eorcc	r3, lr, lr, lsr #4
    73e0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    73e4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    73e8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    73ec:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    73f0:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    73f4:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    73f8:	6f6f745c 	svcvs	0x006f745c
    73fc:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7400:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7404:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7408:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    740c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7410:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7414:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7418:	5f342d69 	svcpl	0x00342d69
    741c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7420:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7424:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7428:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    742c:	61652d65 	cmnvs	r5, r5, ror #26
    7430:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7434:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7438:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    743c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7440:	6300656e 	movwvs	r6, #1390	; 0x56e
    7444:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7448:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    744c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7450:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7454:	5f393130 	svcpl	0x00393130
    7458:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    745c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7460:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7464:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7468:	6f745c36 	svcvs	0x00745c36
    746c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7470:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7474:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7478:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    747c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7480:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7484:	61652d65 	cmnvs	r5, r5, ror #26
    7488:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    748c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7490:	71353130 	teqvc	r5, r0, lsr r1
    7494:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7498:	6f6e2d6d 	svcvs	0x006e2d6d
    749c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    74a0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    74a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    74a8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    74ac:	00737973 	rsbseq	r7, r3, r3, ror r9
    74b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    74b4:	2f2e2e2f 	svccs	0x002e2e2f
    74b8:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    74bc:	0000636e 	andeq	r6, r0, lr, ror #6
    74c0:	2e696461 	cdpcs	4, 6, cr6, cr9, cr1, {3}
    74c4:	00010063 	andeq	r0, r1, r3, rrx
    74c8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    74cc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    74d0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    74d4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    74d8:	00020068 	andeq	r0, r2, r8, rrx
    74dc:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    74e0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    74e4:	0300682e 	movweq	r6, #2094	; 0x82e
    74e8:	77680000 	strbvc	r0, [r8, -r0]!
    74ec:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    74f0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    74f4:	00000400 	andeq	r0, r0, r0, lsl #8
    74f8:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    74fc:	00010068 	andeq	r0, r1, r8, rrx
    7500:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    7504:	0100682e 	tsteq	r0, lr, lsr #16
    7508:	00000000 	andeq	r0, r0, r0
    750c:	38f40205 	ldmcc	r4!, {r0, r2, r9}^
    7510:	35030000 	strcc	r0, [r3, #-0]
    7514:	00212001 	eoreq	r2, r1, r1
    7518:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    751c:	232f214b 			; <UNDEFINED> instruction: 0x232f214b
    7520:	0005022c 	andeq	r0, r5, ip, lsr #4
    7524:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7528:	00000002 	andeq	r0, r0, r2
    752c:	00c00300 	sbceq	r0, r0, r0, lsl #6
    7530:	002f2001 	eoreq	r2, pc, r1
    7534:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7538:	232f2f4b 			; <UNDEFINED> instruction: 0x232f2f4b
    753c:	0005022c 	andeq	r0, r5, ip, lsr #4
    7540:	01670101 	cmneq	r7, r1, lsl #2
    7544:	00020000 	andeq	r0, r2, r0
    7548:	00000147 	andeq	r0, r0, r7, asr #2
    754c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7550:	0101000d 	tsteq	r1, sp
    7554:	00000101 	andeq	r0, r0, r1, lsl #2
    7558:	00000100 	andeq	r0, r0, r0, lsl #2
    755c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7560:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7564:	2f2e2e2f 	svccs	0x002e2e2f
    7568:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    756c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7570:	3a630062 	bcc	18c7700 <__ccfg+0x18a7758>
    7574:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7578:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    757c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7580:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7584:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7588:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    758c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7590:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7594:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7598:	6f6f745c 	svcvs	0x006f745c
    759c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    75a0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    75a4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    75a8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    75ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    75b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    75b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    75b8:	5f342d69 	svcpl	0x00342d69
    75bc:	30322d39 	eorscc	r2, r2, r9, lsr sp
    75c0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    75c4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    75c8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    75cc:	61652d65 	cmnvs	r5, r5, ror #26
    75d0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    75d4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    75d8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    75dc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    75e0:	6300656e 	movwvs	r6, #1390	; 0x56e
    75e4:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    75e8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    75ec:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    75f0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    75f4:	5f393130 	svcpl	0x00393130
    75f8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    75fc:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7600:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7604:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7608:	6f745c36 	svcvs	0x00745c36
    760c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7610:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7614:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7618:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    761c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7620:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7624:	61652d65 	cmnvs	r5, r5, ror #26
    7628:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    762c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7630:	71353130 	teqvc	r5, r0, lsr r1
    7634:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7638:	6f6e2d6d 	svcvs	0x006e2d6d
    763c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7640:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7644:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7648:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    764c:	00737973 	rsbseq	r7, r3, r3, ror r9
    7650:	6e6f6100 	powvse	f6, f7, f0
    7654:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    7658:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    765c:	00010063 	andeq	r0, r1, r3, rrx
    7660:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7664:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7668:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    766c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7670:	00020068 	andeq	r0, r2, r8, rrx
    7674:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7678:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    767c:	0300682e 	movweq	r6, #2094	; 0x82e
    7680:	6f610000 	svcvs	0x00610000
    7684:	61625f6e 	cmnvs	r2, lr, ror #30
    7688:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    768c:	0100682e 	tsteq	r0, lr, lsr #16
    7690:	00000000 	andeq	r0, r0, r0
    7694:	391c0205 	ldmdbcc	ip, {r0, r2, r9}
    7698:	3c030000 	stccc	0, cr0, [r3], {-0}
    769c:	2f361a01 	svccs	0x00361a01
    76a0:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    76a4:	3d4c2e09 	stclcc	14, cr2, [ip, #-36]	; 0xffffffdc
    76a8:	01000902 	tsteq	r0, r2, lsl #18
    76ac:	0001a901 	andeq	sl, r1, r1, lsl #18
    76b0:	41000200 	mrsmi	r0, R8_usr
    76b4:	02000001 	andeq	r0, r0, #1
    76b8:	0d0efb01 	vstreq	d15, [lr, #-4]
    76bc:	01010100 	mrseq	r0, (UNDEF: 17)
    76c0:	00000001 	andeq	r0, r0, r1
    76c4:	01000001 	tsteq	r0, r1
    76c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    76cc:	2f2e2e2f 	svccs	0x002e2e2f
    76d0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 76d8 <__exidx_end+0x1ad8>
    76d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    76d8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    76dc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    76e0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    76e4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    76e8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    76ec:	31303030 	teqcc	r0, r0, lsr r0
    76f0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    76f4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    76f8:	61746562 	cmnvs	r4, r2, ror #10
    76fc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7700:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7704:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 753c <__exidx_end+0x193c>
    7708:	6f635c73 	svcvs	0x00635c73
    770c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7710:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7714:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7718:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    771c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7720:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7724:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7728:	3130322d 	teqcc	r0, sp, lsr #4
    772c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7730:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7734:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7738:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    773c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7740:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7744:	616d5c65 	cmnvs	sp, r5, ror #24
    7748:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    774c:	3a630065 	bcc	18c78e8 <__ccfg+0x18a7940>
    7750:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7754:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7758:	302e322e 	eorcc	r3, lr, lr, lsr #4
    775c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7760:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7764:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7768:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    776c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7770:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7774:	6f6f745c 	svcvs	0x006f745c
    7778:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    777c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7780:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7784:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7788:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    778c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7790:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7794:	5f342d69 	svcpl	0x00342d69
    7798:	30322d39 	eorscc	r2, r2, r9, lsr sp
    779c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    77a0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    77a4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    77a8:	61652d65 	cmnvs	r5, r5, ror #26
    77ac:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    77b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    77b4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    77b8:	00007379 	andeq	r7, r0, r9, ror r3
    77bc:	5f6e6f61 	svcpl	0x006e6f61
    77c0:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    77c4:	00010063 	andeq	r0, r1, r3, rrx
    77c8:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    77cc:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    77d0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    77d4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    77d8:	00020068 	andeq	r0, r2, r8, rrx
    77dc:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    77e0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    77e4:	0300682e 	movweq	r6, #2094	; 0x82e
    77e8:	6f610000 	svcvs	0x00610000
    77ec:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    77f0:	00682e63 	rsbeq	r2, r8, r3, ror #28
    77f4:	00000001 	andeq	r0, r0, r1
    77f8:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    77fc:	03000039 	movweq	r0, #57	; 0x39
    7800:	0200013e 	andeq	r0, r0, #-2147483633	; 0x8000000f
    7804:	0a030104 	beq	c7c1c <__ccfg+0xa7c74>
    7808:	04020001 	streq	r0, [r2], #-1
    780c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    7810:	001f0104 	andseq	r0, pc, r4, lsl #2
    7814:	21010402 	tstcs	r1, r2, lsl #8
    7818:	01040200 	mrseq	r0, R12_usr
    781c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    7820:	21302101 	teqcs	r0, r1, lsl #2
    7824:	01000802 	tsteq	r0, r2, lsl #16
    7828:	02050001 	andeq	r0, r5, #1
    782c:	0000396c 	andeq	r3, r0, ip, ror #18
    7830:	0100d703 	tsteq	r0, r3, lsl #14
    7834:	01040200 	mrseq	r0, R12_usr
    7838:	00010c03 	andeq	r0, r1, r3, lsl #24
    783c:	21010402 	tstcs	r1, r2, lsl #8
    7840:	01040200 	mrseq	r0, R12_usr
    7844:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    7848:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    784c:	00210104 	eoreq	r0, r1, r4, lsl #2
    7850:	21010402 	tstcs	r1, r2, lsl #8
    7854:	00050231 	andeq	r0, r5, r1, lsr r2
    7858:	019c0101 	orrseq	r0, ip, r1, lsl #2
    785c:	00020000 	andeq	r0, r2, r0
    7860:	00000139 	andeq	r0, r0, r9, lsr r1
    7864:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7868:	0101000d 	tsteq	r1, sp
    786c:	00000101 	andeq	r0, r0, r1, lsl #2
    7870:	00000100 	andeq	r0, r0, r0, lsl #2
    7874:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7878:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    787c:	2f2e2e2f 	svccs	0x002e2e2f
    7880:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7884:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7888:	3a630062 	bcc	18c7a18 <__ccfg+0x18a7a70>
    788c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7890:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7894:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7898:	3030302e 	eorscc	r3, r0, lr, lsr #32
    789c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    78a0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    78a4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    78a8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    78ac:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    78b0:	6f6f745c 	svcvs	0x006f745c
    78b4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    78b8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    78bc:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    78c0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    78c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    78c8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    78cc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    78d0:	5f342d69 	svcpl	0x00342d69
    78d4:	30322d39 	eorscc	r2, r2, r9, lsr sp
    78d8:	33713531 	cmncc	r1, #205520896	; 0xc400000
    78dc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    78e0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    78e4:	61652d65 	cmnvs	r5, r5, ror #26
    78e8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    78ec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    78f0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    78f4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    78f8:	6300656e 	movwvs	r6, #1390	; 0x56e
    78fc:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7900:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7904:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7908:	30302e30 	eorscc	r2, r0, r0, lsr lr
    790c:	5f393130 	svcpl	0x00393130
    7910:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7914:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7918:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    791c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7920:	6f745c36 	svcvs	0x00745c36
    7924:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7928:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    792c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7930:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7934:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7938:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    793c:	61652d65 	cmnvs	r5, r5, ror #26
    7940:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7944:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7948:	71353130 	teqvc	r5, r0, lsr r1
    794c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7950:	6f6e2d6d 	svcvs	0x006e2d6d
    7954:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7958:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    795c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7960:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7964:	00737973 	rsbseq	r7, r3, r3, ror r9
    7968:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    796c:	0100632e 	tsteq	r0, lr, lsr #6
    7970:	645f0000 	ldrbvs	r0, [pc], #-0	; 7978 <__exidx_end+0x1d78>
    7974:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    7978:	745f746c 	ldrbvc	r7, [pc], #-1132	; 7980 <__exidx_end+0x1d80>
    797c:	73657079 	cmnvc	r5, #121	; 0x79
    7980:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7984:	735f0000 	cmpvc	pc, #0
    7988:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    798c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    7990:	63000003 	movwvs	r0, #3
    7994:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    7998:	00000100 	andeq	r0, r0, r0, lsl #2
    799c:	02050000 	andeq	r0, r5, #0
    79a0:	00003984 	andeq	r3, r0, r4, lsl #19
    79a4:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
    79a8:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    79ac:	01010004 	tsteq	r1, r4
    79b0:	00020500 	andeq	r0, r2, r0, lsl #10
    79b4:	03000000 	movweq	r0, #0
    79b8:	030101c0 	movweq	r0, #4544	; 0x11c0
    79bc:	03020111 	movweq	r0, #8465	; 0x2111
    79c0:	00010100 	andeq	r0, r1, r0, lsl #2
    79c4:	398c0205 	stmibcc	ip, {r0, r2, r9}
    79c8:	8d030000 	stchi	0, cr0, [r3, #-0]
    79cc:	12030102 	andne	r0, r3, #-2147483648	; 0x80000000
    79d0:	00040201 	andeq	r0, r4, r1, lsl #4
    79d4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    79d8:	00000002 	andeq	r0, r0, r2
    79dc:	02d80300 	sbcseq	r0, r8, #0, 6
    79e0:	01110301 	tsteq	r1, r1, lsl #6
    79e4:	01000302 	tsteq	r0, r2, lsl #6
    79e8:	02050001 	andeq	r0, r5, #1
    79ec:	00000000 	andeq	r0, r0, r0
    79f0:	01039e03 	tsteq	r3, r3, lsl #28
    79f4:	00040216 	andeq	r0, r4, r6, lsl r2
    79f8:	02d60101 	sbcseq	r0, r6, #1073741824	; 0x40000000
    79fc:	00020000 	andeq	r0, r2, r0
    7a00:	0000017c 	andeq	r0, r0, ip, ror r1
    7a04:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    7a08:	0101000d 	tsteq	r1, sp
    7a0c:	00000101 	andeq	r0, r0, r1, lsl #2
    7a10:	00000100 	andeq	r0, r0, r0, lsl #2
    7a14:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    7a18:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7a1c:	2f2e2e2f 	svccs	0x002e2e2f
    7a20:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7a24:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    7a28:	3a630062 	bcc	18c7bb8 <__ccfg+0x18a7c10>
    7a2c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7a30:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7a34:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7a38:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7a3c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7a40:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7a44:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7a48:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7a4c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7a50:	6f6f745c 	svcvs	0x006f745c
    7a54:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7a58:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7a5c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7a60:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7a64:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7a68:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7a6c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7a70:	5f342d69 	svcpl	0x00342d69
    7a74:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7a78:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7a7c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7a80:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7a84:	61652d65 	cmnvs	r5, r5, ror #26
    7a88:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7a8c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7a90:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7a94:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7a98:	6300656e 	movwvs	r6, #1390	; 0x56e
    7a9c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7aa0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7aa4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7aa8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7aac:	5f393130 	svcpl	0x00393130
    7ab0:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7ab4:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7ab8:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7abc:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7ac0:	6f745c36 	svcvs	0x00745c36
    7ac4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7ac8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7acc:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7ad0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7ad4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7ad8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7adc:	61652d65 	cmnvs	r5, r5, ror #26
    7ae0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7ae4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7ae8:	71353130 	teqvc	r5, r0, lsr r1
    7aec:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7af0:	6f6e2d6d 	svcvs	0x006e2d6d
    7af4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7af8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7afc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7b00:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7b04:	00737973 	rsbseq	r7, r3, r3, ror r9
    7b08:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7b0c:	2f2e2e2f 	svccs	0x002e2e2f
    7b10:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    7b14:	0000636e 	andeq	r6, r0, lr, ror #6
    7b18:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    7b1c:	00010063 	andeq	r0, r1, r3, rrx
    7b20:	63736f00 	cmnvs	r3, #0, 30
    7b24:	0100682e 	tsteq	r0, lr, lsr #16
    7b28:	645f0000 	ldrbvs	r0, [pc], #-0	; 7b30 <__exidx_end+0x1f30>
    7b2c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    7b30:	745f746c 	ldrbvc	r7, [pc], #-1132	; 7b38 <__exidx_end+0x1f38>
    7b34:	73657079 	cmnvc	r5, #121	; 0x79
    7b38:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7b3c:	735f0000 	cmpvc	pc, #0
    7b40:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    7b44:	00682e74 	rsbeq	r2, r8, r4, ror lr
    7b48:	68000003 	stmdavs	r0, {r0, r1}
    7b4c:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7b50:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7b54:	00040068 	andeq	r0, r4, r8, rrx
    7b58:	6d6f7200 	sfmvs	f7, 2, [pc, #-0]	; 7b60 <__exidx_end+0x1f60>
    7b5c:	0100682e 	tsteq	r0, lr, lsr #16
    7b60:	6f610000 	svcvs	0x00610000
    7b64:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    7b68:	00682e63 	rsbeq	r2, r8, r3, ror #28
    7b6c:	61000001 	tstvs	r0, r1
    7b70:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    7b74:	6f6d7461 	svcvs	0x006d7461
    7b78:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    7b7c:	00000001 	andeq	r0, r0, r1
    7b80:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    7b84:	03000039 	movweq	r0, #57	; 0x39
    7b88:	200100e5 	andcs	r0, r1, r5, ror #1
    7b8c:	03200f03 			; <UNDEFINED> instruction: 0x03200f03
    7b90:	0f032071 	svceq	0x00032071
    7b94:	09032520 	stmdbeq	r3, {r5, r8, sl, sp}
    7b98:	0903309e 	stmdbeq	r3, {r1, r2, r3, r4, r7, ip, sp}
    7b9c:	02a3339e 	adceq	r3, r3, #2013265922	; 0x78000002
    7ba0:	01010007 	tsteq	r1, r7
    7ba4:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    7ba8:	03000039 	movweq	r0, #57	; 0x39
    7bac:	030101a0 	movweq	r0, #4512	; 0x11a0
    7bb0:	88222e0c 	stmdahi	r2!, {r2, r3, r9, sl, fp, sp}
    7bb4:	263c7a03 	ldrtcs	r7, [ip], -r3, lsl #20
    7bb8:	00060225 	andeq	r0, r6, r5, lsr #4
    7bbc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7bc0:	00000002 	andeq	r0, r0, r2
    7bc4:	01c20300 	biceq	r0, r2, r0, lsl #6
    7bc8:	91252001 			; <UNDEFINED> instruction: 0x91252001
    7bcc:	2e790334 	mrccs	3, 3, r0, cr9, cr4, {1}
    7bd0:	2e7a0327 	cdpcs	3, 7, cr0, cr10, cr7, {1}
    7bd4:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    7bd8:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    7bdc:	01040200 	mrseq	r0, R12_usr
    7be0:	302d3050 	eorcc	r3, sp, r0, asr r0
    7be4:	3d4b241f 	cfstrdcc	mvd2, [fp, #-124]	; 0xffffff84
    7be8:	6c3d341f 	cfldrsvs	mvf3, [sp], #-124	; 0xffffff84
    7bec:	666d0332 			; <UNDEFINED> instruction: 0x666d0332
    7bf0:	263c1003 	ldrtcs	r1, [ip], -r3
    7bf4:	01000902 	tsteq	r0, r2, lsl #18
    7bf8:	02050001 	andeq	r0, r5, #1
    7bfc:	00003a1c 	andeq	r3, r0, ip, lsl sl
    7c00:	0101f303 	tsteq	r1, r3, lsl #6	; <UNPREDICTABLE>
    7c04:	07024b21 	streq	r4, [r2, -r1, lsr #22]
    7c08:	00010100 	andeq	r0, r1, r0, lsl #2
    7c0c:	3a340205 	bcc	d08428 <__ccfg+0xce8480>
    7c10:	80030000 	andhi	r0, r3, r0
    7c14:	04240102 	strteq	r0, [r4], #-258	; 0xfffffefe
    7c18:	58220302 	stmdapl	r2!, {r1, r8, r9}
    7c1c:	62030104 	andvs	r0, r3, #4, 2
    7c20:	03020482 	movweq	r0, #9346	; 0x2482
    7c24:	0104203c 	tsteq	r4, ip, lsr r0
    7c28:	3d4a4a03 	vstrcc	s9, [sl, #-12]
    7c2c:	1f3d211f 	svcne	0x003d211f
    7c30:	301f3022 	andscc	r3, pc, r2, lsr #32
    7c34:	0c022322 	stceq	3, cr2, [r2], {34}	; 0x22
    7c38:	00010100 	andeq	r0, r1, r0, lsl #2
    7c3c:	3a940205 	bcc	fe508458 <_estack+0xde503458>
    7c40:	a3030000 	movwge	r0, #12288	; 0x3000
    7c44:	4f250102 	svcmi	0x00250102
    7c48:	17030204 	strne	r0, [r3, -r4, lsl #4]
    7c4c:	0301044a 	movweq	r0, #5194	; 0x144a
    7c50:	024b4a6d 	subeq	r4, fp, #446464	; 0x6d000
    7c54:	01010009 	tsteq	r1, r9
    7c58:	00020500 	andeq	r0, r2, r0, lsl #10
    7c5c:	03000000 	movweq	r0, #0
    7c60:	220102bc 	andcs	r0, r1, #188, 4	; 0xc000000b
    7c64:	03201703 			; <UNDEFINED> instruction: 0x03201703
    7c68:	03282069 			; <UNDEFINED> instruction: 0x03282069
    7c6c:	6c033c10 	stcvs	12, cr3, [r3], {16}
    7c70:	2e15032e 	cdpcs	3, 1, cr0, cr5, cr14, {1}
    7c74:	03586d03 	cmpeq	r8, #3, 26	; 0xc0
    7c78:	6f032013 	svcvs	0x00032013
    7c7c:	20110320 	andscs	r0, r1, r0, lsr #6
    7c80:	0006023f 	andeq	r0, r6, pc, lsr r2
    7c84:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c88:	00000002 	andeq	r0, r0, r2
    7c8c:	02e30300 	rsceq	r0, r3, #0, 6
    7c90:	01210301 			; <UNDEFINED> instruction: 0x01210301
    7c94:	0002024d 	andeq	r0, r2, sp, asr #4
    7c98:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c9c:	00000002 	andeq	r0, r0, r2
    7ca0:	03900300 	orrseq	r0, r0, #0, 6
    7ca4:	20100301 	andscs	r0, r0, r1, lsl #6
    7ca8:	21211f21 			; <UNDEFINED> instruction: 0x21211f21
    7cac:	01040200 	mrseq	r0, R12_usr
    7cb0:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    7cb4:	313d3d01 	teqcc	sp, r1, lsl #26
    7cb8:	0702341d 	smladeq	r2, sp, r4, r3
    7cbc:	00010100 	andeq	r0, r1, r0, lsl #2
    7cc0:	00000205 	andeq	r0, r0, r5, lsl #4
    7cc4:	b5030000 	strlt	r0, [r3, #-0]
    7cc8:	31170103 	tstcc	r7, r3, lsl #2
    7ccc:	023d332c 	eorseq	r3, sp, #44, 6	; 0xb0000000
    7cd0:	01010005 	tsteq	r1, r5
    7cd4:	000003a7 	andeq	r0, r0, r7, lsr #7
    7cd8:	02650002 	rsbeq	r0, r5, #2
    7cdc:	01020000 	mrseq	r0, (UNDEF: 2)
    7ce0:	000d0efb 	strdeq	r0, [sp], -fp
    7ce4:	01010101 	tsteq	r1, r1, lsl #2
    7ce8:	01000000 	mrseq	r0, (UNDEF: 0)
    7cec:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    7cf0:	2f2e2e2f 	svccs	0x002e2e2f
    7cf4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7cf8:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7cfc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    7d00:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7d04:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7d08:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7d0c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7d10:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7d14:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7d18:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7d1c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7d20:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7d24:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7d28:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7d2c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7d30:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7bc8 <__exidx_end+0x1fc8>
    7d34:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7d38:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7d3c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7d40:	6f6e2d6d 	svcvs	0x006e2d6d
    7d44:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7d48:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7d4c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7d50:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7d54:	615c3371 	cmpvs	ip, r1, ror r3
    7d58:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7d5c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7d60:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7d64:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7d68:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7d6c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7d70:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7d74:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7d78:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7d7c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7d80:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7d84:	31303030 	teqcc	r0, r0, lsr r0
    7d88:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7d8c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7d90:	61746562 	cmnvs	r4, r2, ror #10
    7d94:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7d98:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7d9c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7bd4 <__exidx_end+0x1fd4>
    7da0:	6f635c73 	svcvs	0x00635c73
    7da4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7da8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7dac:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7db0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7db4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7db8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7dbc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7dc0:	3130322d 	teqcc	r0, sp, lsr #4
    7dc4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7dc8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7dcc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7dd0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7dd4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7dd8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7ddc:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    7de0:	3a630073 	bcc	18c7fb4 <__ccfg+0x18a800c>
    7de4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7de8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7dec:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7df0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7df4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7df8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7dfc:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7e00:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7e04:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7e08:	6f6f745c 	svcvs	0x006f745c
    7e0c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7e10:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7e14:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7e18:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7e1c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7e20:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7e24:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7e28:	5f342d69 	svcpl	0x00342d69
    7e2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7e30:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7e34:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
    7e38:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7e3c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7e40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7e44:	61652d65 	cmnvs	r5, r5, ror #26
    7e48:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0xfffff69e
    7e4c:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    7e50:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7e54:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7e58:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7e5c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7e60:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7e64:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7e68:	31303030 	teqcc	r0, r0, lsr r0
    7e6c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7e70:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7e74:	61746562 	cmnvs	r4, r2, ror #10
    7e78:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7e7c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7e80:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7cb8 <__exidx_end+0x20b8>
    7e84:	6f635c73 	svcvs	0x00635c73
    7e88:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7e8c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7e90:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7e94:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7e98:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7e9c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7ea0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7ea4:	3130322d 	teqcc	r0, sp, lsr #4
    7ea8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7eac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7eb0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7eb4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7eb8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7ebc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7ec0:	72000065 	andvc	r0, r0, #101	; 0x65
    7ec4:	632e6366 			; <UNDEFINED> instruction: 0x632e6366
    7ec8:	00000100 	andeq	r0, r0, r0, lsl #2
    7ecc:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    7ed0:	00010068 	andeq	r0, r1, r8, rrx
    7ed4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7ed8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7edc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7ee0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7ee4:	00020068 	andeq	r0, r2, r8, rrx
    7ee8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7eec:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    7ef0:	0300682e 	movweq	r6, #2094	; 0x82e
    7ef4:	74730000 	ldrbtvc	r0, [r3], #-0
    7ef8:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    7efc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    7f00:	66720000 	ldrbtvs	r0, [r2], -r0
    7f04:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    7f08:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    7f0c:	0100682e 	tsteq	r0, lr, lsr #16
    7f10:	66720000 	ldrbtvs	r0, [r2], -r0
    7f14:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 7da0 <__exidx_end+0x21a0>
    7f18:	5f6e6f6d 	svcpl	0x006e6f6d
    7f1c:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    7f20:	00010068 	andeq	r0, r1, r8, rrx
    7f24:	5f667200 	svcpl	0x00667200
    7f28:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    7f2c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    7f30:	0100682e 	tsteq	r0, lr, lsr #16
    7f34:	74730000 	ldrbtvc	r0, [r3], #-0
    7f38:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    7f3c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    7f40:	00000000 	andeq	r0, r0, r0
    7f44:	00000205 	andeq	r0, r0, r5, lsl #4
    7f48:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    7f4c:	00130100 	andseq	r0, r3, r0, lsl #2
    7f50:	31010402 	tstcc	r1, r2, lsl #8
    7f54:	01040200 	mrseq	r0, R12_usr
    7f58:	03023f2f 	movweq	r3, #12079	; 0x2f2f
    7f5c:	00010100 	andeq	r0, r1, r0, lsl #2
    7f60:	3ac80205 	bcc	ff20877c <_estack+0xdf20377c>
    7f64:	fa030000 	blx	c7f6c <__ccfg+0xa7fc4>
    7f68:	02000100 	andeq	r0, r0, #0, 2
    7f6c:	04130104 	ldreq	r0, [r3], #-260	; 0xfffffefc
    7f70:	01c70302 	biceq	r0, r7, r2, lsl #6
    7f74:	0301044a 	movweq	r0, #5194	; 0x144a
    7f78:	002e7ebd 	strhteq	r7, [lr], -sp
    7f7c:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    7f80:	c1030204 	tstgt	r3, r4, lsl #4
    7f84:	01043c01 	tsteq	r4, r1, lsl #24
    7f88:	3c7ec203 	lfmcc	f4, 3, [lr], #-12
    7f8c:	0005022f 	andeq	r0, r5, pc, lsr #4
    7f90:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7f94:	003af002 	eorseq	pc, sl, r2
    7f98:	018f0300 	orreq	r0, pc, r0, lsl #6
    7f9c:	1d231401 	cfstrsne	mvf1, [r3, #-4]!
    7fa0:	3d761b25 	fldmdbxcc	r6!, {d17-d34}	;@ Deprecated
    7fa4:	2f211f2f 	svccs	0x00211f2f
    7fa8:	21212d22 			; <UNDEFINED> instruction: 0x21212d22
    7fac:	000c0221 	andeq	r0, ip, r1, lsr #4
    7fb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7fb4:	003b3c02 	eorseq	r3, fp, r2, lsl #24
    7fb8:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    7fbc:	2f961501 	svccs	0x00961501
    7fc0:	2525211c 	strcs	r2, [r5, #-284]!	; 0xfffffee4
    7fc4:	032f1f21 			; <UNDEFINED> instruction: 0x032f1f21
    7fc8:	3d3d660a 	ldccc	6, cr6, [sp, #-40]!	; 0xffffffd8
    7fcc:	5873032f 	ldmdapl	r3!, {r0, r1, r2, r3, r5, r8, r9}^
    7fd0:	3d661803 	stclcc	8, cr1, [r6, #-12]!
    7fd4:	68032f3d 	stmdavs	r3, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
    7fd8:	2f3d3d58 	svccs	0x003d3d58
    7fdc:	3d580b03 	vldrcc	d16, [r8, #-12]
    7fe0:	0b032f3d 	bleq	d3cdc <__ccfg+0xb3d34>
    7fe4:	2f3d3d58 	svccs	0x003d3d58
    7fe8:	2f3d3d5c 	svccs	0x003d3d5c
    7fec:	2f3e3d5c 	svccs	0x003e3d5c
    7ff0:	002f0249 	eoreq	r0, pc, r9, asr #4
    7ff4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7ff8:	003c8c02 	eorseq	r8, ip, r2, lsl #24
    7ffc:	01f30300 	mvnseq	r0, r0, lsl #6
    8000:	01090301 	tsteq	r9, r1, lsl #6
    8004:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    8008:	21af2009 			; <UNDEFINED> instruction: 0x21af2009
    800c:	221f2321 	andscs	r2, pc, #-2080374784	; 0x84000000
    8010:	03262f22 			; <UNDEFINED> instruction: 0x03262f22
    8014:	2f2d4a0b 	svccs	0x002d4a0b
    8018:	0200335a 	andeq	r3, r0, #1744830465	; 0x68000001
    801c:	76030204 	strvc	r0, [r3], -r4, lsl #4
    8020:	3c11032e 	ldccc	3, cr0, [r1], {46}	; 0x2e
    8024:	03f21403 	mvnseq	r1, #50331648	; 0x3000000
    8028:	23032e6f 	movwcs	r2, #15983	; 0x3e6f
    802c:	3c62034a 	stclcc	3, cr0, [r2], #-296	; 0xfffffed8
    8030:	3632224c 	ldrtcc	r2, [r2], -ip, asr #4
    8034:	50224c32 	eorpl	r4, r2, r2, lsr ip
    8038:	5eac0903 	vfmapl.f16	s0, s24, s6	; <UNPREDICTABLE>
    803c:	03362659 	teqeq	r6, #93323264	; 0x5900000
    8040:	16026662 	strne	r6, [r2], -r2, ror #12
    8044:	00010100 	andeq	r0, r1, r0, lsl #2
    8048:	3da40205 	sfmcc	f0, 4, [r4, #20]!
    804c:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    8050:	ad2f0102 	stfges	f0, [pc, #-8]!	; 8050 <__exidx_end+0x2450>
    8054:	01000302 	tsteq	r0, r2, lsl #6
    8058:	02050001 	andeq	r0, r5, #1
    805c:	00000000 	andeq	r0, r0, r0
    8060:	01038203 	tsteq	r3, r3, lsl #4
    8064:	2a025d24 	bcs	9f4fc <__ccfg+0x7f554>
    8068:	00010100 	andeq	r0, r1, r0, lsl #2
    806c:	3dc40205 	sfmcc	f0, 2, [r4, #20]
    8070:	96030000 	strls	r0, [r3], -r0
    8074:	23210103 			; <UNDEFINED> instruction: 0x23210103
    8078:	0602413e 			; <UNDEFINED> instruction: 0x0602413e
    807c:	e9010100 	stmdb	r1, {r8}
    8080:	02000001 	andeq	r0, r0, #1
    8084:	00016700 	andeq	r6, r1, r0, lsl #14
    8088:	fb010200 	blx	48892 <__ccfg+0x288ea>
    808c:	01000d0e 	tsteq	r0, lr, lsl #26
    8090:	00010101 	andeq	r0, r1, r1, lsl #2
    8094:	00010000 	andeq	r0, r1, r0
    8098:	2f2e0100 	svccs	0x002e0100
    809c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    80a0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    80a4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    80a8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    80ac:	63006269 	movwvs	r6, #617	; 0x269
    80b0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    80b4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    80b8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    80bc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    80c0:	5f393130 	svcpl	0x00393130
    80c4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    80c8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    80cc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    80d0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    80d4:	6f745c36 	svcvs	0x00745c36
    80d8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    80dc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    80e0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    80e4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    80e8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    80ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    80f0:	61652d65 	cmnvs	r5, r5, ror #26
    80f4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    80f8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    80fc:	71353130 	teqvc	r5, r0, lsr r1
    8100:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8104:	6f6e2d6d 	svcvs	0x006e2d6d
    8108:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    810c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8110:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8114:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8118:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    811c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8120:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8124:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8128:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    812c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8130:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8134:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8138:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    813c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8140:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8144:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8148:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    814c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7fe4 <__exidx_end+0x23e4>
    8150:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8154:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8158:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    815c:	6f6e2d6d 	svcvs	0x006e2d6d
    8160:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8164:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8168:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    816c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8170:	615c3371 	cmpvs	ip, r1, ror r3
    8174:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8178:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    817c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8180:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8184:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8188:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    818c:	65730000 	ldrbvs	r0, [r3, #-0]!
    8190:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    8194:	00010063 	andeq	r0, r1, r3, rrx
    8198:	6e6f6100 	powvse	f6, f7, f0
    819c:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    81a0:	0100682e 	tsteq	r0, lr, lsr #16
    81a4:	645f0000 	ldrbvs	r0, [pc], #-0	; 81ac <__exidx_end+0x25ac>
    81a8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    81ac:	745f746c 	ldrbvc	r7, [pc], #-1132	; 81b4 <__exidx_end+0x25b4>
    81b0:	73657079 	cmnvc	r5, #121	; 0x79
    81b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    81b8:	735f0000 	cmpvc	pc, #0
    81bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    81c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    81c4:	73000003 	movwvc	r0, #3
    81c8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    81cc:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 8058 <__exidx_end+0x2458>
    81d0:	0100682e 	tsteq	r0, lr, lsr #16
    81d4:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    81d8:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    81dc:	682e6f66 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}
    81e0:	00000100 	andeq	r0, r0, r0, lsl #2
    81e4:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    81e8:	00682e70 	rsbeq	r2, r8, r0, ror lr
    81ec:	00000001 	andeq	r0, r0, r1
    81f0:	e0020500 	and	r0, r2, r0, lsl #10
    81f4:	0300003d 	movweq	r0, #61	; 0x3d
    81f8:	2001028d 	andcs	r0, r1, sp, lsl #5
    81fc:	00200a03 	eoreq	r0, r0, r3, lsl #20
    8200:	41010402 	tstmi	r1, r2, lsl #8
    8204:	2d43424f 	sfmcs	f4, 2, [r3, #-316]	; 0xfffffec4
    8208:	02041f21 	andeq	r1, r4, #33, 30	; 0x84
    820c:	66048703 	strvs	r8, [r4], -r3, lsl #14
    8210:	86030104 	strhi	r0, [r3], -r4, lsl #2
    8214:	42363c7c 	eorsmi	r3, r6, #124, 24	; 0x7c00
    8218:	2d4a0903 	vstrcs.16	s1, [sl, #-6]	; <UNPREDICTABLE>
    821c:	1f2f2f3d 	svcne	0x002f2f3d
    8220:	23212f2f 			; <UNDEFINED> instruction: 0x23212f2f
    8224:	03254831 			; <UNDEFINED> instruction: 0x03254831
    8228:	5d41580a 	stclpl	8, cr5, [r1, #-40]	; 0xffffffd8
    822c:	001e023f 	andseq	r0, lr, pc, lsr r2
    8230:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8234:	003eb402 	eorseq	fp, lr, r2, lsl #8
    8238:	00f00300 	rscseq	r0, r0, r0, lsl #6
    823c:	43302801 	teqmi	r0, #65536	; 0x10000
    8240:	09034133 	stmdbeq	r3, {r0, r1, r4, r5, r8, lr}
    8244:	0b03333c 	bleq	d4f3c <__ccfg+0xb4f94>
    8248:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    824c:	20790327 	rsbscs	r0, r9, r7, lsr #6
    8250:	03201503 			; <UNDEFINED> instruction: 0x03201503
    8254:	67422e09 	strbvs	r2, [r2, -r9, lsl #28]
    8258:	20090349 	andcs	r0, r9, r9, asr #6
    825c:	69242d59 	stmdbvs	r4!, {r0, r3, r4, r6, r8, sl, fp, sp}
    8260:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    8264:	024d2701 	subeq	r2, sp, #262144	; 0x40000
    8268:	01010013 	tsteq	r1, r3, lsl r0
    826c:	00000457 	andeq	r0, r0, r7, asr r4
    8270:	01650002 	cmneq	r5, r2
    8274:	01020000 	mrseq	r0, (UNDEF: 2)
    8278:	000d0efb 	strdeq	r0, [sp], -fp
    827c:	01010101 	tsteq	r1, r1, lsl #2
    8280:	01000000 	mrseq	r0, (UNDEF: 0)
    8284:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    8288:	2f2e2e2f 	svccs	0x002e2e2f
    828c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8290:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    8294:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    8298:	0062696c 	rsbeq	r6, r2, ip, ror #18
    829c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    82a0:	63635c69 	cmnvs	r3, #26880	; 0x6900
    82a4:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    82a8:	302e302e 	eorcc	r3, lr, lr, lsr #32
    82ac:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    82b0:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    82b4:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    82b8:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    82bc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    82c0:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    82c4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    82c8:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 8160 <__exidx_end+0x2560>
    82cc:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    82d0:	63675c72 	cmnvs	r7, #29184	; 0x7200
    82d4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    82d8:	6f6e2d6d 	svcvs	0x006e2d6d
    82dc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    82e0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    82e4:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    82e8:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    82ec:	615c3371 	cmpvs	ip, r1, ror r3
    82f0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    82f4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    82f8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    82fc:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8300:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8304:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    8308:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    830c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8310:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    8314:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    8318:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    831c:	31303030 	teqcc	r0, r0, lsr r0
    8320:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    8324:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    8328:	61746562 	cmnvs	r4, r2, ror #10
    832c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8330:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    8334:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 816c <__exidx_end+0x256c>
    8338:	6f635c73 	svcvs	0x00635c73
    833c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    8340:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    8344:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    8348:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    834c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8350:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8354:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    8358:	3130322d 	teqcc	r0, sp, lsr #4
    835c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    8360:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8364:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8368:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    836c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    8370:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8374:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    8378:	73000073 	movwvc	r0, #115	; 0x73
    837c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    8380:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 820c <__exidx_end+0x260c>
    8384:	0100632e 	tsteq	r0, lr, lsr #6
    8388:	65730000 	ldrbvs	r0, [r3, #-0]!
    838c:	5f707574 	svcpl	0x00707574
    8390:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8394:	00010068 	andeq	r0, r1, r8, rrx
    8398:	73797300 	cmnvc	r9, #0, 6
    839c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    83a0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    83a4:	5f000001 	svcpl	0x00000001
    83a8:	61666564 	cmnvs	r6, r4, ror #10
    83ac:	5f746c75 	svcpl	0x00746c75
    83b0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    83b4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    83b8:	5f000002 	svcpl	0x00000002
    83bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    83c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    83c4:	00000300 	andeq	r0, r0, r0, lsl #6
    83c8:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    83cc:	00010068 	andeq	r0, r1, r8, rrx
    83d0:	63736f00 	cmnvs	r3, #0, 30
    83d4:	0100682e 	tsteq	r0, lr, lsr #16
    83d8:	00000000 	andeq	r0, r0, r0
    83dc:	3f580205 	svccc	0x00580205
    83e0:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    83e4:	0b030100 	bleq	c87ec <__ccfg+0xa8844>
    83e8:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    83ec:	03207203 			; <UNDEFINED> instruction: 0x03207203
    83f0:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    83f4:	2000d703 	andcs	sp, r0, r3, lsl #14
    83f8:	a8030104 	stmdage	r3, {r2, r8}
    83fc:	0204207f 	andeq	r2, r4, #127	; 0x7f
    8400:	2e00d903 	vmlacs.f16	s26, s0, s6	; <UNPREDICTABLE>
    8404:	0104212d 	tsteq	r4, sp, lsr #2
    8408:	2e7fac03 	cdpcs	12, 7, cr10, cr15, cr3, {0}
    840c:	2f214d30 	svccs	0x00214d30
    8410:	22222265 	eorcs	r2, r2, #1342177286	; 0x50000006
    8414:	7803221e 	stmdavc	r3, {r1, r2, r3, r4, r9, sp}
    8418:	200d0358 	andcs	r0, sp, r8, asr r3
    841c:	033c7303 	teqeq	ip, #201326592	; 0xc000000
    8420:	21212010 			; <UNDEFINED> instruction: 0x21212010
    8424:	0d022121 	stfeqs	f2, [r2, #-132]	; 0xffffff7c
    8428:	00010100 	andeq	r0, r1, r0, lsl #2
    842c:	3fd40205 	svccc	0x00d40205
    8430:	bf030000 	svclt	0x00030000
    8434:	031a0101 	tsteq	sl, #1073741824	; 0x40000000
    8438:	28204a78 	stmdacs	r0!, {r3, r4, r5, r6, r9, fp, lr}
    843c:	03200e03 			; <UNDEFINED> instruction: 0x03200e03
    8440:	03422e7a 	movteq	r2, #11898	; 0x2e7a
    8444:	31302e0e 	teqcc	r0, lr, lsl #28
    8448:	042d432d 	strteq	r4, [sp], #-813	; 0xfffffcd3
    844c:	04213002 	strteq	r3, [r1], #-2
    8450:	2e0b0301 	cdpcs	3, 0, cr0, cr11, cr1, {0}
    8454:	23652f3d 	cmncs	r5, #61, 30	; 0xf4
    8458:	4d660c03 	stclmi	12, cr0, [r6, #-12]!
    845c:	2d28302c 	stccs	0, cr3, [r8, #-176]!	; 0xffffff50
    8460:	15022d52 	strne	r2, [r2, #-3410]	; 0xfffff2ae
    8464:	00010100 	andeq	r0, r1, r0, lsl #2
    8468:	40800205 	addmi	r0, r0, r5, lsl #4
    846c:	9f030000 	svcls	0x00030000
    8470:	0c030104 	stfeqs	f0, [r3], {4}
    8474:	20090301 	andcs	r0, r9, r1, lsl #6
    8478:	21207703 			; <UNDEFINED> instruction: 0x21207703
    847c:	30273331 	eorcc	r3, r7, r1, lsr r3
    8480:	2d223130 	stfcss	f3, [r2, #-192]!	; 0xffffff40
    8484:	3d31351d 	cfldr32cc	mvfx3, [r1, #-116]!	; 0xffffff8c
    8488:	3b223d3e 	blcc	897988 <__ccfg+0x8779e0>
    848c:	7603271d 			; <UNDEFINED> instruction: 0x7603271d
    8490:	2e120320 	cdpcs	3, 1, cr0, cr2, cr0, {1}
    8494:	01000602 	tsteq	r0, r2, lsl #12
    8498:	02050001 	andeq	r0, r5, #1
    849c:	000040dc 	ldrdeq	r4, [r0], -ip
    84a0:	0104e503 	tsteq	r4, r3, lsl #10
    84a4:	79033418 	stmdbvc	r3, {r3, r4, sl, ip, sp}
    84a8:	02333620 	eorseq	r3, r3, #32, 12	; 0x2000000
    84ac:	01010005 	tsteq	r1, r5
    84b0:	00020500 	andeq	r0, r2, r0, lsl #10
    84b4:	03000000 	movweq	r0, #0
    84b8:	18010581 	stmdane	r1, {r0, r7, r8, sl}
    84bc:	00060233 	andeq	r0, r6, r3, lsr r2
    84c0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    84c4:	0040f402 	subeq	pc, r0, r2, lsl #8
    84c8:	05950300 	ldreq	r0, [r5, #768]	; 0x300
    84cc:	13031901 	movwne	r1, #14593	; 0x3901
    84d0:	0006022e 	andeq	r0, r6, lr, lsr #4
    84d4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    84d8:	00410402 	subeq	r0, r1, r2, lsl #8
    84dc:	05b80300 	ldreq	r0, [r8, #768]!	; 0x300
    84e0:	13031901 	movwne	r1, #14593	; 0x3901
    84e4:	0008022e 	andeq	r0, r8, lr, lsr #4
    84e8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    84ec:	00411802 	subeq	r1, r1, r2, lsl #16
    84f0:	05db0300 	ldrbeq	r0, [fp, #768]	; 0x300
    84f4:	200b0301 	andcs	r0, fp, r1, lsl #6
    84f8:	03200903 			; <UNDEFINED> instruction: 0x03200903
    84fc:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    8500:	20790320 	rsbscs	r0, r9, r0, lsr #6
    8504:	22322a35 	eorscs	r2, r2, #217088	; 0x35000
    8508:	47323031 			; <UNDEFINED> instruction: 0x47323031
    850c:	47323027 	ldrmi	r3, [r2, -r7, lsr #32]!
    8510:	372e1703 	strcc	r1, [lr, -r3, lsl #14]!
    8514:	02273a36 	eoreq	r3, r7, #221184	; 0x36000
    8518:	01010008 	tsteq	r1, r8
    851c:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    8520:	03000041 	movweq	r0, #65	; 0x41
    8524:	150106a9 	strne	r0, [r1, #-1705]	; 0xfffff957
    8528:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    852c:	00030220 	andeq	r0, r3, r0, lsr #4
    8530:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8534:	00419002 	subeq	r9, r1, r2
    8538:	06bc0300 	ldrteq	r0, [ip], r0, lsl #6
    853c:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    8540:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    8544:	01010003 	tsteq	r1, r3
    8548:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    854c:	03000041 	movweq	r0, #65	; 0x41
    8550:	150106cf 	strne	r0, [r1, #-1743]	; 0xfffff931
    8554:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    8558:	00030220 	andeq	r0, r3, r0, lsr #4
    855c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8560:	0041b802 	subeq	fp, r1, r2, lsl #16
    8564:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    8568:	43211601 			; <UNDEFINED> instruction: 0x43211601
    856c:	207a032f 	rsbscs	r0, sl, pc, lsr #6
    8570:	032c3540 			; <UNDEFINED> instruction: 0x032c3540
    8574:	16032071 			; <UNDEFINED> instruction: 0x16032071
    8578:	0003022e 	andeq	r0, r3, lr, lsr #4
    857c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8580:	0041e002 	subeq	lr, r1, r2
    8584:	07820300 	streq	r0, [r2, r0, lsl #6]
    8588:	02331601 	eorseq	r1, r3, #1048576	; 0x100000
    858c:	01010006 	tsteq	r1, r6
    8590:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    8594:	03000041 	movweq	r0, #65	; 0x41
    8598:	16010794 			; <UNDEFINED> instruction: 0x16010794
    859c:	34294321 	strtcc	r4, [r9], #-801	; 0xfffffcdf
    85a0:	20790333 	rsbscs	r0, r9, r3, lsr r3
    85a4:	71031e35 	tstvc	r3, r5, lsr lr
    85a8:	2016032e 	andscs	r0, r6, lr, lsr #6
    85ac:	01000502 	tsteq	r0, r2, lsl #10
    85b0:	02050001 	andeq	r0, r5, #1
    85b4:	0000421c 	andeq	r4, r0, ip, lsl r2
    85b8:	0107b403 	tsteq	r7, r3, lsl #8
    85bc:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    85c0:	03022009 	movweq	r2, #8201	; 0x2009
    85c4:	00010100 	andeq	r0, r1, r0, lsl #2
    85c8:	42300205 	eorsmi	r0, r0, #1342177280	; 0x50000000
    85cc:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    85d0:	21150107 	tstcs	r5, r7, lsl #2
    85d4:	200a0355 	andcs	r0, sl, r5, asr r3
    85d8:	01000302 	tsteq	r0, r2, lsl #6
    85dc:	02050001 	andeq	r0, r5, #1
    85e0:	00004244 	andeq	r4, r0, r4, asr #4
    85e4:	0102a703 	tsteq	r2, r3, lsl #14
    85e8:	20090320 	andcs	r0, r9, r0, lsr #6
    85ec:	4e211f3d 	mcrmi	15, 1, r1, cr1, cr13, {1}
    85f0:	02d1032f 	sbcseq	r0, r1, #-1140850688	; 0xbc000000
    85f4:	7db903ac 	ldcvc	3, cr0, [r9, #688]!	; 0x2b0
    85f8:	02c70320 	sbceq	r0, r7, #32, 6	; 0x80000000
    85fc:	7db90320 	ldcvc	3, cr0, [r9, #128]!	; 0x80
    8600:	1f2f5c20 	svcne	0x002f5c20
    8604:	1f2f3d21 	svcne	0x002f3d21
    8608:	1f3d3d21 	svcne	0x003d3d21
    860c:	6e3d4321 	cdpvs	3, 3, cr4, cr13, cr1, {1}
    8610:	1f3d523d 	svcne	0x003d523d
    8614:	3c090321 	stccc	3, cr0, [r9], {33}	; 0x21
    8618:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
    861c:	660b033d 			; <UNDEFINED> instruction: 0x660b033d
    8620:	1f3d7c3d 	svcne	0x003d7c3d
    8624:	024b4021 	subeq	r4, fp, #33	; 0x21
    8628:	01010012 	tsteq	r1, r2, lsl r0
    862c:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    8630:	03000043 	movweq	r0, #67	; 0x43
    8634:	000107de 	ldrdeq	r0, [r1], -lr
    8638:	03010402 	movweq	r0, #5122	; 0x1402
    863c:	2352200e 	cmpcs	r2, #14
    8640:	4d1d231d 	ldcmi	3, cr2, [sp, #-116]	; 0xffffff8c
    8644:	7a034b68 	bvc	db3ec <__ccfg+0xbb444>
    8648:	00413420 	subeq	r3, r1, r0, lsr #8
    864c:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    8650:	0b02315b 	bleq	94bc4 <__ccfg+0x74c1c>
    8654:	00010100 	andeq	r0, r1, r0, lsl #2
    8658:	43b80205 			; <UNDEFINED> instruction: 0x43b80205
    865c:	93030000 	movwls	r0, #12288	; 0x3000
    8660:	09030108 	stmdbeq	r3, {r3, r8}
    8664:	212d2f01 			; <UNDEFINED> instruction: 0x212d2f01
    8668:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    866c:	024b3d01 	subeq	r3, fp, #1, 26	; 0x40
    8670:	01010007 	tsteq	r1, r7
    8674:	e0020500 	and	r0, r2, r0, lsl #10
    8678:	03000043 	movweq	r0, #67	; 0x43
    867c:	0301039b 	movweq	r0, #5019	; 0x139b
    8680:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    8684:	0903203c 	stmdbeq	r3, {r2, r3, r4, r5, sp}
    8688:	31305220 	teqcc	r0, r0, lsr #4
    868c:	234a0a03 	movtcs	r0, #43523	; 0xaa03
    8690:	24484c2b 	strbcs	r4, [r8], #-3115	; 0xfffff3d5
    8694:	33762d2f 	cmncc	r6, #3008	; 0xbc0
    8698:	501c3229 	andspl	r3, ip, r9, lsr #4
    869c:	4f3d5226 	svcmi	0x003d5226
    86a0:	845d2f4d 	ldrbhi	r2, [sp], #-3917	; 0xfffff0b3
    86a4:	3d243d4b 	stccc	13, cr3, [r4, #-300]!	; 0xfffffed4
    86a8:	01040200 	mrseq	r0, R12_usr
    86ac:	4b2f5b4b 	blmi	bdf3e0 <__ccfg+0xbbf438>
    86b0:	033f4d86 	teqeq	pc, #8576	; 0x2180
    86b4:	221e4a09 	andscs	r4, lr, #36864	; 0x9000
    86b8:	3c0b031e 	stccc	3, cr0, [fp], {30}
    86bc:	b9030304 	stmdblt	r3, {r2, r8, r9}
    86c0:	1f024a7d 	svcne	0x00024a7d
    86c4:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
    86c8:	02000003 	andeq	r0, r0, #3
    86cc:	0001a800 	andeq	sl, r1, r0, lsl #16
    86d0:	fb010200 	blx	48eda <__ccfg+0x28f32>
    86d4:	01000d0e 	tsteq	r0, lr, lsl #26
    86d8:	00010101 	andeq	r0, r1, r1, lsl #2
    86dc:	00010000 	andeq	r0, r1, r0
    86e0:	2f2e0100 	svccs	0x002e0100
    86e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    86e8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    86ec:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    86f0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    86f4:	63006269 	movwvs	r6, #617	; 0x269
    86f8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    86fc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8700:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8704:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8708:	5f393130 	svcpl	0x00393130
    870c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8710:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8714:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8718:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    871c:	6f745c36 	svcvs	0x00745c36
    8720:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8724:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8728:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    872c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8730:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8734:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8738:	61652d65 	cmnvs	r5, r5, ror #26
    873c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8740:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8744:	71353130 	teqvc	r5, r0, lsr r1
    8748:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    874c:	6f6e2d6d 	svcvs	0x006e2d6d
    8750:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8754:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8758:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    875c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8760:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8764:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8768:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    876c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8770:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8774:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8778:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    877c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8780:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8784:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8788:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    878c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8790:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8794:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 862c <__exidx_end+0x2a2c>
    8798:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    879c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    87a0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    87a4:	6f6e2d6d 	svcvs	0x006e2d6d
    87a8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    87ac:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    87b0:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    87b4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    87b8:	615c3371 	cmpvs	ip, r1, ror r3
    87bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    87c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    87c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    87c8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    87cc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    87d0:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    87d4:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    87d8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    87dc:	2f2e2e2f 	svccs	0x002e2e2f
    87e0:	00636e69 	rsbeq	r6, r3, r9, ror #28
    87e4:	73797300 	cmnvc	r9, #0, 6
    87e8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    87ec:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    87f0:	61000001 	tstvs	r0, r1
    87f4:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    87f8:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    87fc:	00000100 	andeq	r0, r0, r0, lsl #2
    8800:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    8804:	00010068 	andeq	r0, r1, r8, rrx
    8808:	63727000 	cmnvs	r2, #0
    880c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    8810:	73000001 	movwvc	r0, #1
    8814:	70757465 	rsbsvc	r7, r5, r5, ror #8
    8818:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 86a4 <__exidx_end+0x2aa4>
    881c:	0100682e 	tsteq	r0, lr, lsr #16
    8820:	645f0000 	ldrbvs	r0, [pc], #-0	; 8828 <__exidx_end+0x2c28>
    8824:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8828:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8830 <__exidx_end+0x2c30>
    882c:	73657079 	cmnvc	r5, #121	; 0x79
    8830:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8834:	735f0000 	cmpvc	pc, #0
    8838:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    883c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8840:	68000003 	stmdavs	r0, {r0, r1}
    8844:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8848:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    884c:	00040068 	andeq	r0, r4, r8, rrx
    8850:	6d6f7200 	sfmvs	f7, 2, [pc, #-0]	; 8858 <__exidx_end+0x2c58>
    8854:	0100682e 	tsteq	r0, lr, lsr #16
    8858:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    885c:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    8860:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
    8864:	00000100 	andeq	r0, r0, r0, lsl #2
    8868:	5f6e6f61 	svcpl	0x006e6f61
    886c:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    8870:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    8874:	00000100 	andeq	r0, r0, r0, lsl #2
    8878:	02050000 	andeq	r0, r5, #0
    887c:	00000000 	andeq	r0, r0, r0
    8880:	0100f903 	tsteq	r0, r3, lsl #18	; <UNPREDICTABLE>
    8884:	e9030204 	stmdb	r3, {r2, r9}
    8888:	01040102 	tsteq	r4, r2, lsl #2
    888c:	2e7d9703 	cdpcs	7, 7, cr9, cr13, cr3, {0}
    8890:	e9030204 	stmdb	r3, {r2, r9}
    8894:	02002e02 	andeq	r2, r0, #2, 28
    8898:	ce030104 	adfgts	f0, f3, f4
    889c:	01042000 	mrseq	r2, (UNDEF: 4)
    88a0:	01040200 	mrseq	r0, R12_usr
    88a4:	2e7cd103 	expcse	f5, f3
    88a8:	002e0c03 	eoreq	r0, lr, r3, lsl #24
    88ac:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    88b0:	09034b89 	stmdbeq	r3, {r0, r3, r7, r8, r9, fp, lr}
    88b4:	0303044a 	movweq	r0, #13386	; 0x344a
    88b8:	045801a5 	ldrbeq	r0, [r8], #-421	; 0xfffffe5b
    88bc:	7ee40301 	cdpvc	3, 14, cr0, cr4, cr1, {0}
    88c0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    88c4:	04045d01 	streq	r5, [r4], #-3329	; 0xfffff2ff
    88c8:	74038103 	strvc	r8, [r3], #-259	; 0xfffffefd
    88cc:	01040200 	mrseq	r0, R12_usr
    88d0:	043c1403 	ldrteq	r1, [ip], #-1027	; 0xfffffbfd
    88d4:	04020001 	streq	r0, [r2], #-1
    88d8:	7cef0301 	stclvc	3, cr0, [pc], #4	; 88e4 <__exidx_end+0x2ce4>
    88dc:	0304042e 	movweq	r0, #17454	; 0x442e
    88e0:	322e03b7 	eorcc	r0, lr, #-603979774	; 0xdc000002
    88e4:	4203241c 	andmi	r2, r3, #28, 8	; 0x1c000000
    88e8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    88ec:	2e140301 	cdpcs	3, 1, cr0, cr4, cr1, {0}
    88f0:	02000104 	andeq	r0, r0, #4, 2
    88f4:	f7030104 			; <UNDEFINED> instruction: 0xf7030104
    88f8:	0903207c 	stmdbeq	r3, {r2, r3, r4, r5, r6, sp}
    88fc:	281b412e 	ldmdacs	fp, {r1, r2, r3, r5, r8, lr}
    8900:	24384b83 	ldrtcs	r4, [r8], #-2947	; 0xfffff47d
    8904:	0304041b 	movweq	r0, #17435	; 0x441b
    8908:	002e02e7 	eoreq	r0, lr, r7, ror #5
    890c:	03010402 	movweq	r0, #5122	; 0x1402
    8910:	01043c14 	tsteq	r4, r4, lsl ip
    8914:	01040200 	mrseq	r0, R12_usr
    8918:	207d8d03 	rsbscs	r8, sp, r3, lsl #26
    891c:	00170230 	andseq	r0, r7, r0, lsr r2
    8920:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8924:	00453002 	subeq	r3, r5, r2
    8928:	01da0300 	bicseq	r0, sl, r0, lsl #6
    892c:	2e1d0301 	cdpcs	3, 1, cr0, cr13, cr1, {0}
    8930:	03206303 			; <UNDEFINED> instruction: 0x03206303
    8934:	2f59201d 	svccs	0x0059201d
    8938:	22323241 	eorscs	r3, r2, #268435460	; 0x10000004
    893c:	9421321c 	strtls	r3, [r1], #-540	; 0xfffffde4
    8940:	041b325c 	ldreq	r3, [fp], #-604	; 0xfffffda4
    8944:	2e5f0305 	cdpcs	3, 5, cr0, cr15, cr5, {0}
    8948:	03010421 	movweq	r0, #5153	; 0x1421
    894c:	32432e24 	subcc	r2, r3, #36, 28	; 0x240
    8950:	0504331b 	streq	r3, [r4, #-795]	; 0xfffffce5
    8954:	21205003 			; <UNDEFINED> instruction: 0x21205003
    8958:	2e030104 	adfcss	f0, f3, f4
    895c:	0305042e 	movweq	r0, #21550	; 0x542e
    8960:	01042e51 	tsteq	r4, r1, asr lr
    8964:	04203403 	strteq	r3, [r0], #-1027	; 0xfffffbfd
    8968:	204d0305 	subcs	r0, sp, r5, lsl #6
    896c:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    8970:	23652f2e 	cmncs	r5, #46, 30	; 0xb8
    8974:	214d2f69 	cmpcs	sp, r9, ror #30
    8978:	0032213e 	eorseq	r2, r2, lr, lsr r1
    897c:	06010402 	streq	r0, [r1], -r2, lsl #8
    8980:	0f030658 	svceq	0x00030658
    8984:	2f3fca4a 	svccs	0x003fca4a
    8988:	2b24242a 	blcs	911a38 <__ccfg+0x8f1a90>
    898c:	31934032 	orrscc	r4, r3, r2, lsr r0
    8990:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    8994:	3c630321 	stclcc	3, cr0, [r3], #-132	; 0xffffff7c
    8998:	2026032d 	eorcs	r0, r6, sp, lsr #6
    899c:	3e3d3131 	mrccc	1, 1, r3, cr13, cr1, {1}
    89a0:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    89a4:	03212e0b 			; <UNDEFINED> instruction: 0x03212e0b
    89a8:	09033c78 	stmdbeq	r3, {r3, r4, r5, r6, sl, fp, ip, sp}
    89ac:	2e770320 	cdpcs	3, 7, cr0, cr7, cr0, {1}
    89b0:	213c0e03 	teqcs	ip, r3, lsl #28
    89b4:	03207103 			; <UNDEFINED> instruction: 0x03207103
    89b8:	1d7b3c0f 	ldclne	12, cr3, [fp, #-60]!	; 0xffffffc4
    89bc:	22652123 	rsbcs	r2, r5, #-1073741816	; 0xc0000008
    89c0:	03282321 			; <UNDEFINED> instruction: 0x03282321
    89c4:	21342078 	teqcs	r4, r8, ror r0
    89c8:	213d4c22 	teqcs	sp, r2, lsr #24
    89cc:	322c403e 	eorcc	r4, ip, #62	; 0x3e
    89d0:	0021023d 	eoreq	r0, r1, sp, lsr r2
    89d4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    89d8:	00475002 	subeq	r5, r7, r2
    89dc:	03b60300 			; <UNDEFINED> instruction: 0x03b60300
    89e0:	22402701 	subcs	r2, r0, #262144	; 0x40000
    89e4:	4e24a22f 	cdpmi	2, 2, cr10, cr4, cr15, {1}
    89e8:	864e2a40 	strbhi	r2, [lr], -r0, asr #20
    89ec:	01000902 	tsteq	r0, r2, lsl #18
    89f0:	02050001 	andeq	r0, r5, #1
    89f4:	00000000 	andeq	r0, r0, r0
    89f8:	0103e503 	tsteq	r3, r3, lsl #10
    89fc:	2f200c03 	svccs	0x00200c03
    8a00:	2d5a3028 	ldclcs	0, cr3, [sl, #-160]	; 0xffffff60
    8a04:	1f322d30 	svcne	0x00322d30
    8a08:	2f2b2421 	svccs	0x002b2421
    8a0c:	2f24322c 	svccs	0x0024322c
    8a10:	4b2f3430 	blmi	bd5ad8 <__ccfg+0xbb5b30>
    8a14:	023e1e22 	eorseq	r1, lr, #544	; 0x220
    8a18:	0101000c 	tsteq	r1, ip
    8a1c:	b0020500 	andlt	r0, r2, r0, lsl #10
    8a20:	03000047 	movweq	r0, #71	; 0x47
    8a24:	130104a6 	movwne	r0, #5286	; 0x14a6
    8a28:	0226483f 	eoreq	r4, r6, #4128768	; 0x3f0000
    8a2c:	01010004 	tsteq	r1, r4
    8a30:	0000022b 	andeq	r0, r0, fp, lsr #4
    8a34:	01430002 	cmpeq	r3, r2
    8a38:	01020000 	mrseq	r0, (UNDEF: 2)
    8a3c:	000d0efb 	strdeq	r0, [sp], -fp
    8a40:	01010101 	tsteq	r1, r1, lsl #2
    8a44:	01000000 	mrseq	r0, (UNDEF: 0)
    8a48:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    8a4c:	2f2e2e2f 	svccs	0x002e2e2f
    8a50:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8a54:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    8a58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    8a5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    8a60:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8a64:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8a68:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8a6c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8a70:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8a74:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8a78:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8a7c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8a80:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8a84:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8a88:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8a8c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 8924 <__exidx_end+0x2d24>
    8a90:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8a94:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8a98:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8a9c:	6f6e2d6d 	svcvs	0x006e2d6d
    8aa0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8aa4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8aa8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8aac:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8ab0:	615c3371 	cmpvs	ip, r1, ror r3
    8ab4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8ab8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8abc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8ac0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8ac4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8ac8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    8acc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    8ad0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8ad4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    8ad8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    8adc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    8ae0:	31303030 	teqcc	r0, r0, lsr r0
    8ae4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    8ae8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    8aec:	61746562 	cmnvs	r4, r2, ror #10
    8af0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8af4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    8af8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 8930 <__exidx_end+0x2d30>
    8afc:	6f635c73 	svcvs	0x00635c73
    8b00:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    8b04:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    8b08:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    8b0c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8b10:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8b14:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8b18:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    8b1c:	3130322d 	teqcc	r0, sp, lsr #4
    8b20:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    8b24:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8b28:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8b2c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8b30:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    8b34:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8b38:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    8b3c:	63000073 	movwvs	r0, #115	; 0x73
    8b40:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    8b44:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    8b48:	00010063 	andeq	r0, r1, r3, rrx
    8b4c:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    8b50:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    8b54:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    8b58:	5f000001 	svcpl	0x00000001
    8b5c:	61666564 	cmnvs	r6, r4, ror #10
    8b60:	5f746c75 	svcpl	0x00746c75
    8b64:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8b68:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8b6c:	5f000002 	svcpl	0x00000002
    8b70:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8b74:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8b78:	00000300 	andeq	r0, r0, r0, lsl #6
    8b7c:	02050000 	andeq	r0, r5, #0
    8b80:	00000000 	andeq	r0, r0, r0
    8b84:	0100c403 	tsteq	r0, r3, lsl #8
    8b88:	06022f13 			; <UNDEFINED> instruction: 0x06022f13
    8b8c:	00010100 	andeq	r0, r1, r0, lsl #2
    8b90:	00000205 	andeq	r0, r0, r5, lsl #4
    8b94:	d0030000 	andle	r0, r3, r0
    8b98:	2f140100 	svccs	0x00140100
    8b9c:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    8ba0:	01010008 	tsteq	r1, r8
    8ba4:	c8020500 	stmdagt	r2, {r8, sl}
    8ba8:	03000047 	movweq	r0, #71	; 0x47
    8bac:	1a0100e6 	bne	48f4c <__ccfg+0x28fa4>
    8bb0:	02044e2a 	andeq	r4, r4, #672	; 0x2a0
    8bb4:	2e019b03 	vmlacs.f64	d9, d1, d3
    8bb8:	e6030104 	str	r0, [r3], -r4, lsl #2
    8bbc:	4c232e7e 	stcmi	14, cr2, [r3], #-504	; 0xfffffe08
    8bc0:	2f724b4b 	svccs	0x00724b4b
    8bc4:	00050224 	andeq	r0, r5, r4, lsr #4
    8bc8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8bcc:	00000002 	andeq	r0, r0, r2
    8bd0:	01830300 	orreq	r0, r3, r0, lsl #6
    8bd4:	03020401 	movweq	r0, #9217	; 0x2401
    8bd8:	042001b0 	strteq	r0, [r0], #-432	; 0xfffffe50
    8bdc:	7ed60301 	cdpvc	3, 13, cr0, cr6, cr1, {0}
    8be0:	2331392e 	teqcs	r1, #753664	; 0xb8000
    8be4:	033c7803 	teqeq	ip, #196608	; 0x30000
    8be8:	09034a0a 	stmdbeq	r3, {r1, r3, r9, fp, lr}
    8bec:	0502252e 	streq	r2, [r2, #-1326]	; 0xfffffad2
    8bf0:	00010100 	andeq	r0, r1, r0, lsl #2
    8bf4:	48140205 	ldmdami	r4, {r0, r2, r9}
    8bf8:	a6030000 	strge	r0, [r3], -r0
    8bfc:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8c00:	2000e303 	andcs	lr, r0, r3, lsl #6
    8c04:	032e1103 			; <UNDEFINED> instruction: 0x032e1103
    8c08:	11033c6f 	tstne	r3, pc, ror #24
    8c0c:	01042520 	tsteq	r4, r0, lsr #10
    8c10:	3c7f8c03 	ldclcc	12, cr8, [pc], #-12	; 8c0c <__exidx_end+0x300c>
    8c14:	22219592 	eorcs	r9, r1, #612368384	; 0x24800000
    8c18:	41412221 	cmpmi	r1, r1, lsr #4
    8c1c:	2e090339 	mcrcs	3, 0, r0, cr9, cr9, {1}
    8c20:	2e730327 	cdpcs	3, 7, cr0, cr3, cr7, {1}
    8c24:	20640321 	rsbcs	r0, r4, r1, lsr #6
    8c28:	02203003 	eoreq	r3, r0, #3
    8c2c:	01010004 	tsteq	r1, r4
    8c30:	80020500 	andhi	r0, r2, r0, lsl #10
    8c34:	03000048 	movweq	r0, #72	; 0x48
    8c38:	040101e0 	streq	r0, [r1], #-480	; 0xfffffe20
    8c3c:	01a40302 			; <UNDEFINED> instruction: 0x01a40302
    8c40:	03010420 	movweq	r0, #5152	; 0x1420
    8c44:	042e7edd 	strteq	r7, [lr], #-3805	; 0xfffff123
    8c48:	02900302 	addseq	r0, r0, #134217728	; 0x8000000
    8c4c:	0301042e 	movweq	r0, #5166	; 0x142e
    8c50:	002e7df0 	strdeq	r7, [lr], -r0	; <UNPREDICTABLE>
    8c54:	03010402 	movweq	r0, #5122	; 0x1402
    8c58:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
    8c5c:	1e010100 	adfnes	f0, f1, f0
    8c60:	02000002 	andeq	r0, r0, #2
    8c64:	00014200 	andeq	r4, r1, r0, lsl #4
    8c68:	fb010200 	blx	49472 <__ccfg+0x294ca>
    8c6c:	01000d0e 	tsteq	r0, lr, lsl #26
    8c70:	00010101 	andeq	r0, r1, r1, lsl #2
    8c74:	00010000 	andeq	r0, r1, r0
    8c78:	2f2e0100 	svccs	0x002e0100
    8c7c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8c80:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8c84:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    8c88:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    8c8c:	63006269 	movwvs	r6, #617	; 0x269
    8c90:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8c94:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8c98:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8c9c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8ca0:	5f393130 	svcpl	0x00393130
    8ca4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8ca8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8cac:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8cb0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8cb4:	6f745c36 	svcvs	0x00745c36
    8cb8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8cbc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8cc0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8cc4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8cc8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8ccc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8cd0:	61652d65 	cmnvs	r5, r5, ror #26
    8cd4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8cd8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8cdc:	71353130 	teqvc	r5, r0, lsr r1
    8ce0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8ce4:	6f6e2d6d 	svcvs	0x006e2d6d
    8ce8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8cec:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8cf0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8cf4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8cf8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8cfc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8d00:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8d04:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8d08:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8d0c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8d10:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8d14:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8d18:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8d1c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8d20:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8d24:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8d28:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8d2c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 8bc4 <__exidx_end+0x2fc4>
    8d30:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8d34:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8d38:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8d3c:	6f6e2d6d 	svcvs	0x006e2d6d
    8d40:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8d44:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8d48:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8d4c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8d50:	615c3371 	cmpvs	ip, r1, ror r3
    8d54:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8d58:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8d5c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8d60:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8d64:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8d68:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    8d6c:	64640000 	strbtvs	r0, [r4], #-0
    8d70:	00682e69 	rsbeq	r2, r8, r9, ror #28
    8d74:	64000001 	strvs	r0, [r0], #-1
    8d78:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    8d7c:	00000100 	andeq	r0, r0, r0, lsl #2
    8d80:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    8d84:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    8d88:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8d8c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8d90:	00000200 	andeq	r0, r0, r0, lsl #4
    8d94:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    8d98:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    8d9c:	00030068 	andeq	r0, r3, r8, rrx
    8da0:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    8da4:	0100682e 	tsteq	r0, lr, lsr #16
    8da8:	00000000 	andeq	r0, r0, r0
    8dac:	48980205 	ldmmi	r8, {r0, r2, r9}
    8db0:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    8db4:	31200101 			; <UNDEFINED> instruction: 0x31200101
    8db8:	221e5030 	andscs	r5, lr, #48	; 0x30
    8dbc:	022c2322 	eoreq	r2, ip, #-2013265920	; 0x88000000
    8dc0:	01010005 	tsteq	r1, r5
    8dc4:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8dc8:	0048c002 	subeq	ip, r8, r2
    8dcc:	00c30300 	sbceq	r0, r3, r0, lsl #6
    8dd0:	010a0301 	tsteq	sl, r1, lsl #6
    8dd4:	01000402 	tsteq	r0, r2, lsl #8
    8dd8:	00020401 	andeq	r0, r2, r1, lsl #8
    8ddc:	00000205 	andeq	r0, r0, r5, lsl #4
    8de0:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    8de4:	0e030100 	adfeqs	f0, f3, f0
    8de8:	03233301 			; <UNDEFINED> instruction: 0x03233301
    8dec:	35352e78 	ldrcc	r2, [r5, #-3704]!	; 0xfffff188
    8df0:	0004024f 	andeq	r0, r4, pc, asr #4
    8df4:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8df8:	00020500 	andeq	r0, r2, r0, lsl #10
    8dfc:	03000000 	movweq	r0, #0
    8e00:	03010185 	movweq	r0, #4485	; 0x1185
    8e04:	6f032011 	svcvs	0x00032011
    8e08:	2e130320 	cdpcs	3, 1, cr0, cr3, cr0, {1}
    8e0c:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
    8e10:	03342e09 	teqeq	r4, #9, 28	; 0x90
    8e14:	03442e71 	movteq	r2, #20081	; 0x4e71
    8e18:	2d2f2e0c 	stccs	14, cr2, [pc, #-48]!	; 8df0 <__exidx_end+0x31f0>
    8e1c:	01000202 	tsteq	r0, r2, lsl #4
    8e20:	00020401 	andeq	r0, r2, r1, lsl #8
    8e24:	00000205 	andeq	r0, r0, r5, lsl #4
    8e28:	af030000 	svcge	0x00030000
    8e2c:	11030101 	tstne	r3, r1, lsl #2
    8e30:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    8e34:	2013032e 	andscs	r0, r3, lr, lsr #6
    8e38:	0301042f 	movweq	r0, #5167	; 0x142f
    8e3c:	4d302069 	ldcmi	0, cr2, [r0, #-420]!	; 0xfffffe5c
    8e40:	22231d23 	eorcs	r1, r3, #2240	; 0x8c0
    8e44:	03020421 	movweq	r0, #9249	; 0x2421
    8e48:	05022e1d 	streq	r2, [r2, #-3613]	; 0xfffff1e3
    8e4c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8e50:	02050002 	andeq	r0, r5, #2
    8e54:	00000000 	andeq	r0, r0, r0
    8e58:	0101de03 	tsteq	r1, r3, lsl #28
    8e5c:	1b201103 	blne	80d270 <__ccfg+0x7ed2c8>
    8e60:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    8e64:	302d2e14 	eorcc	r2, sp, r4, lsl lr
    8e68:	b9030104 	stmdblt	r3, {r2, r8}
    8e6c:	4d30207f 	ldcmi	0, cr2, [r0, #-508]!	; 0xfffffe04
    8e70:	22231d23 	eorcs	r1, r3, #2240	; 0x8c0
    8e74:	03020421 	movweq	r0, #9249	; 0x2421
    8e78:	422e00c8 	eormi	r0, lr, #200	; 0xc8
    8e7c:	01000502 	tsteq	r0, r2, lsl #10
    8e80:	00024301 	andeq	r4, r2, r1, lsl #6
    8e84:	95000300 	strls	r0, [r0, #-768]	; 0xfffffd00
    8e88:	02000001 	andeq	r0, r0, #1
    8e8c:	0d0efb01 	vstreq	d15, [lr, #-4]
    8e90:	01010100 	mrseq	r0, (UNDEF: 17)
    8e94:	00000001 	andeq	r0, r0, r1
    8e98:	01000001 	tsteq	r0, r1
    8e9c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8ea0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8ea4:	2f2e2e2f 	svccs	0x002e2e2f
    8ea8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8eac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8eb0:	2f2e2e2f 	svccs	0x002e2e2f
    8eb4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8eb8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8d1c <__exidx_end+0x311c>
    8ebc:	2f636269 	svccs	0x00636269
    8ec0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8ec4:	2f656e69 	svccs	0x00656e69
    8ec8:	2f6d7261 	svccs	0x006d7261
    8ecc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8ed0:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xfffff0d2
    8ed4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    8ed8:	73752f00 	cmnvc	r5, #0, 30
    8edc:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    8ee0:	63672f62 	cmnvs	r7, #392	; 0x188
    8ee4:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    8ee8:	6f6e2d6d 	svcvs	0x006e2d6d
    8eec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8ef0:	2f696261 	svccs	0x00696261
    8ef4:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    8ef8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    8efc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8f00:	622f0065 	eorvs	r0, pc, #101	; 0x65
    8f04:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8f08:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8f0c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8f10:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8f14:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8f18:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f1c:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8f20:	2f302e33 	svccs	0x00302e33
    8f24:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8f28:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8d8c <__exidx_end+0x318c>
    8f2c:	2f636269 	svccs	0x00636269
    8f30:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8f34:	2f656475 	svccs	0x00656475
    8f38:	00737973 	rsbseq	r7, r3, r3, ror r9
    8f3c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8f40:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8f44:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f48:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8f4c:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8f50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8f54:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8f58:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8f5c:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8f60:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8f64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8f68:	6f6c2f63 	svcvs	0x006c2f63
    8f6c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    8f70:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8f74:	2f646c69 	svccs	0x00646c69
    8f78:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8f7c:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8f80:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8f84:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8f88:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8f8c:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8f90:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8f94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f98:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8f9c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8fa0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8fa4:	00006564 	andeq	r6, r0, r4, ror #10
    8fa8:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    8fac:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    8fb0:	00000100 	andeq	r0, r0, r0, lsl #2
    8fb4:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    8fb8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    8fbc:	00000200 	andeq	r0, r0, r0, lsl #4
    8fc0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8fc4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8fc8:	00000300 	andeq	r0, r0, r0, lsl #6
    8fcc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8fd0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8fd4:	6c000003 	stcvs	0, cr0, [r0], {3}
    8fd8:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    8fdc:	00030068 	andeq	r0, r3, r8, rrx
    8fe0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    8fe4:	61636f6c 	cmnvs	r3, ip, ror #30
    8fe8:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
    8fec:	00000400 	andeq	r0, r0, r0, lsl #8
    8ff0:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    8ff4:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    8ff8:	00000500 	andeq	r0, r0, r0, lsl #10
    8ffc:	61686377 	smcvs	34359	; 0x8637
    9000:	00682e72 	rsbeq	r2, r8, r2, ror lr
    9004:	6c000005 	stcvs	0, cr0, [r0], {5}
    9008:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    900c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    9010:	73000005 	movwvc	r0, #5
    9014:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    9018:	00682e67 	rsbeq	r2, r8, r7, ror #28
    901c:	00000005 	andeq	r0, r0, r5
    9020:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    9024:	0048c802 	subeq	ip, r8, r2, lsl #16
    9028:	01330300 	teqeq	r3, r0, lsl #6
    902c:	0e030305 	cdpeq	3, 0, cr0, cr3, cr5, {0}
    9030:	13131301 	tstne	r3, #67108864	; 0x4000000
    9034:	06010516 			; <UNDEFINED> instruction: 0x06010516
    9038:	05016b03 	streq	r6, [r1, #-2819]	; 0xfffff4fd
    903c:	3c150306 	ldccc	3, cr0, [r5], {6}
    9040:	02001c05 	andeq	r1, r0, #1280	; 0x500
    9044:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    9048:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    904c:	02006601 	andeq	r6, r0, #1048576	; 0x100000
    9050:	059e0104 	ldreq	r0, [lr, #260]	; 0x104
    9054:	0528060b 	streq	r0, [r8, #-1547]!	; 0xfffff9f5
    9058:	3013061a 	andscc	r0, r3, sl, lsl r6
    905c:	060b0539 			; <UNDEFINED> instruction: 0x060b0539
    9060:	1a05132f 	bne	14dd24 <__ccfg+0x12dd7c>
    9064:	0b050106 	bleq	149484 <__ccfg+0x1294dc>
    9068:	06133d06 	ldreq	r3, [r3], -r6, lsl #26
    906c:	030d0501 	movweq	r0, #54529	; 0xd501
    9070:	0a03207a 	beq	d1260 <__ccfg+0xb12b8>
    9074:	203c204a 	eorscs	r2, ip, sl, asr #32
    9078:	060b0520 	streq	r0, [fp], -r0, lsr #10
    907c:	061a0530 			; <UNDEFINED> instruction: 0x061a0530
    9080:	060b0501 	streq	r0, [fp], -r1, lsl #10
    9084:	0501062f 	streq	r0, [r1, #-1583]	; 0xfffff9d1
    9088:	4a581d0d 	bmi	16104c4 <__ccfg+0x15f051c>
    908c:	030e0520 	movweq	r0, #58656	; 0xe520
    9090:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    9094:	2e5e0320 	cdpcs	3, 5, cr0, cr14, cr0, {1}
    9098:	0605052e 	streq	r0, [r5], -lr, lsr #10
    909c:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    90a0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    90a4:	01053b09 	tsteq	r5, r9, lsl #22
    90a8:	03090533 	movweq	r0, #38195	; 0x9533
    90ac:	0e055859 	mcreq	8, 0, r5, cr5, cr9, {2}
    90b0:	05202203 	streq	r2, [r0, #-515]!	; 0xfffffdfd
    90b4:	0e052009 	cdpeq	0, 0, cr2, cr5, cr9, {0}
    90b8:	0309053c 	movweq	r0, #38204	; 0x953c
    90bc:	0d05205e 	stceq	0, cr2, [r5, #-376]	; 0xfffffe88
    90c0:	022e1703 	eoreq	r1, lr, #786432	; 0xc0000
    90c4:	01010002 	tsteq	r1, r2
    90c8:	00000171 	andeq	r0, r0, r1, ror r1
    90cc:	01170003 	tsteq	r7, r3
    90d0:	01020000 	mrseq	r0, (UNDEF: 2)
    90d4:	000d0efb 	strdeq	r0, [sp], -fp
    90d8:	01010101 	tsteq	r1, r1, lsl #2
    90dc:	01000000 	mrseq	r0, (UNDEF: 0)
    90e0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    90e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    90e8:	2f2e2e2f 	svccs	0x002e2e2f
    90ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    90f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    90f4:	2f2e2e2f 	svccs	0x002e2e2f
    90f8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    90fc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8f60 <__exidx_end+0x3360>
    9100:	2f636269 	svccs	0x00636269
    9104:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    9108:	2f006269 	svccs	0x00006269
    910c:	2f727375 	svccs	0x00727375
    9110:	2f62696c 	svccs	0x0062696c
    9114:	2f636367 	svccs	0x00636367
    9118:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    911c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    9120:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    9124:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    9128:	2f312e33 	svccs	0x00312e33
    912c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    9130:	00656475 	rsbeq	r6, r5, r5, ror r4
    9134:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    9138:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    913c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9140:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    9144:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    9148:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    914c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    9150:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    9154:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    9158:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    915c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9160:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    9164:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9168:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    916c:	622f0073 	eorvs	r0, pc, #115	; 0x73
    9170:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    9174:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    9178:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    917c:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    9180:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    9184:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9188:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    918c:	2f302e33 	svccs	0x00302e33
    9190:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9194:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8ff8 <__exidx_end+0x33f8>
    9198:	2f636269 	svccs	0x00636269
    919c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    91a0:	00656475 	rsbeq	r6, r5, r5, ror r4
    91a4:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
    91a8:	00632e64 	rsbeq	r2, r3, r4, ror #28
    91ac:	73000001 	movwvc	r0, #1
    91b0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    91b4:	00682e66 	rsbeq	r2, r8, r6, ror #28
    91b8:	5f000002 	svcpl	0x00000002
    91bc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    91c0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    91c4:	72000003 	andvc	r0, r0, #3
    91c8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    91cc:	0300682e 	movweq	r6, #2094	; 0x82e
    91d0:	6f6c0000 	svcvs	0x006c0000
    91d4:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    91d8:	00000300 	andeq	r0, r0, r0, lsl #6
    91dc:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    91e0:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    91e4:	00000400 	andeq	r0, r0, r0, lsl #8
    91e8:	00010500 	andeq	r0, r1, r0, lsl #10
    91ec:	49740205 	ldmdbmi	r4!, {r0, r2, r9}^
    91f0:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    91f4:	13030501 	movwne	r0, #13569	; 0x3501
    91f8:	05141d05 	ldreq	r1, [r4, #-3333]	; 0xfffff2fb
    91fc:	1b051303 	blne	14de10 <__ccfg+0x12de68>
    9200:	202e0106 	eorcs	r0, lr, r6, lsl #2
    9204:	2f010520 	svccs	0x00010520
    9208:	03054e06 	movweq	r4, #24070	; 0x5e06
    920c:	06120513 			; <UNDEFINED> instruction: 0x06120513
    9210:	1f010501 	svcne	0x00010501
    9214:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
    9218:	0525061d 	streq	r0, [r5, #-1565]!	; 0xfffff9e3
    921c:	06051303 	streq	r1, [r5], -r3, lsl #6
    9220:	1e051306 	cdpne	3, 0, cr1, cr5, cr6, {0}
    9224:	44054a20 	strmi	r4, [r5], #-2592	; 0xfffff5e0
    9228:	491b052e 	ldmdbmi	fp, {r1, r2, r3, r5, r8, sl}
    922c:	30060305 	andcc	r0, r6, r5, lsl #6
    9230:	01060a05 	tsteq	r6, r5, lsl #20
    9234:	012f0105 			; <UNDEFINED> instruction: 0x012f0105
    9238:	01000a02 	tsteq	r0, r2, lsl #20
    923c:	0000dc01 	andeq	sp, r0, r1, lsl #24
    9240:	d6000300 	strle	r0, [r0], -r0, lsl #6
    9244:	02000000 	andeq	r0, r0, #0
    9248:	0d0efb01 	vstreq	d15, [lr, #-4]
    924c:	01010100 	mrseq	r0, (UNDEF: 17)
    9250:	00000001 	andeq	r0, r0, r1
    9254:	01000001 	tsteq	r0, r1
    9258:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    925c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9260:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    9264:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    9268:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    926c:	61652d65 	cmnvs	r5, r5, ror #26
    9270:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    9274:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    9278:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    927c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    9280:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    9284:	2f646c69 	svccs	0x00646c69
    9288:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    928c:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    9290:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    9294:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    9298:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    929c:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    92a0:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    92a4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    92a8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    92ac:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    92b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    92b4:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    92b8:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    92bc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92c0:	2f2e2e2f 	svccs	0x002e2e2f
    92c4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92cc:	2f2e2e2f 	svccs	0x002e2e2f
    92d0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    92d4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 9138 <__exidx_end+0x3538>
    92d8:	2f636269 	svccs	0x00636269
    92dc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    92e0:	73000074 	movwvc	r0, #116	; 0x74
    92e4:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    92e8:	00682e66 	rsbeq	r2, r8, r6, ror #28
    92ec:	5f000001 	svcpl	0x00000001
    92f0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    92f4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    92f8:	72000002 	andvc	r0, r0, #2
    92fc:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    9300:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    9304:	6f6c0000 	svcvs	0x006c0000
    9308:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    930c:	00000200 	andeq	r0, r0, r0, lsl #4
    9310:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    9314:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
    9318:	00000300 	andeq	r0, r0, r0, lsl #6
    931c:	00019b00 	andeq	r9, r1, r0, lsl #22
    9320:	e2000300 	and	r0, r0, #0, 6
    9324:	02000000 	andeq	r0, r0, #0
    9328:	0d0efb01 	vstreq	d15, [lr, #-4]
    932c:	01010100 	mrseq	r0, (UNDEF: 17)
    9330:	00000001 	andeq	r0, r0, r1
    9334:	01000001 	tsteq	r0, r1
    9338:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    933c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9340:	2f2e2e2f 	svccs	0x002e2e2f
    9344:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 9294 <__exidx_end+0x3694>
    9348:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    934c:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
    9350:	2f2e2e2f 	svccs	0x002e2e2f
    9354:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9358:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    935c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9360:	2f636367 	svccs	0x00636367
    9364:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    9368:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    936c:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    9370:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9374:	2f2e2e2f 	svccs	0x002e2e2f
    9378:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    937c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    9380:	2f2e2e00 	svccs	0x002e2e00
    9384:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9388:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    938c:	2f2e2e2f 	svccs	0x002e2e2f
    9390:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    9394:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    9398:	63672f2e 	cmnvs	r7, #46, 30	; 0xb8
    939c:	6f632f63 	svcvs	0x00632f63
    93a0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    93a4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    93a8:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    93ac:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    93b0:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    93b4:	68000001 	stmdavs	r0, {r0}
    93b8:	74687361 	strbtvc	r7, [r8], #-865	; 0xfffffc9f
    93bc:	682e6261 	stmdavs	lr!, {r0, r5, r6, r9, sp, lr}
    93c0:	00000200 	andeq	r0, r0, r0, lsl #4
    93c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    93c8:	2e617369 	cdpcs	3, 6, cr7, cr1, cr9, {3}
    93cc:	00030068 	andeq	r0, r3, r8, rrx
    93d0:	6d726100 	ldfvse	f6, [r2, #-0]
    93d4:	7570632d 	ldrbvc	r6, [r0, #-813]!	; 0xfffffcd3
    93d8:	0300682e 	movweq	r6, #2094	; 0x82e
    93dc:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    93e0:	632d6e73 			; <UNDEFINED> instruction: 0x632d6e73
    93e4:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    93e8:	73746e61 	cmnvc	r4, #1552	; 0x610
    93ec:	0300682e 	movweq	r6, #2094	; 0x82e
    93f0:	72610000 	rsbvc	r0, r1, #0
    93f4:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    93f8:	6c000004 	stcvs	0, cr0, [r0], {4}
    93fc:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    9400:	682e3263 	stmdavs	lr!, {r0, r1, r5, r6, r9, ip, sp}
    9404:	00000100 	andeq	r0, r0, r0, lsl #2
    9408:	00010500 	andeq	r0, r1, r0, lsl #10
    940c:	49c00205 	stmibmi	r0, {r0, r2, r9}^
    9410:	a4030000 	strge	r0, [r3], #-0
    9414:	03050104 	movweq	r0, #20740	; 0x5104
    9418:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
    941c:	01010116 	tsteq	r1, r6, lsl r1
    9420:	01050101 	tsteq	r5, r1, lsl #2
    9424:	16050f06 	strne	r0, [r5], -r6, lsl #30
    9428:	1d010531 	cfstr32ne	mvfx0, [r1, #-196]	; 0xffffff3c
    942c:	2e311605 	cfmsuba32cs	mvax0, mvax1, mvfx1, mvfx5
    9430:	20202e06 	eorcs	r2, r0, r6, lsl #28
    9434:	20012e01 	andcs	r2, r1, r1, lsl #28
    9438:	20062006 	andcs	r2, r6, r6
    943c:	06200620 	strteq	r0, [r0], -r0, lsr #12
    9440:	06010520 	streq	r0, [r1], -r0, lsr #10
    9444:	2316050f 	tstcs	r6, #62914560	; 0x3c00000
    9448:	01040200 	mrseq	r0, R12_usr
    944c:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    9450:	004a0304 	subeq	r0, sl, r4, lsl #6
    9454:	06030402 	streq	r0, [r3], -r2, lsl #8
    9458:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    945c:	05200603 	streq	r0, [r0, #-1539]!	; 0xfffff9fd
    9460:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    9464:	05140603 	ldreq	r0, [r4, #-1539]	; 0xfffff9fd
    9468:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    946c:	16052f03 	strne	r2, [r5], -r3, lsl #30
    9470:	03040200 	movweq	r0, #16896	; 0x4200
    9474:	000c051d 	andeq	r0, ip, sp, lsl r5
    9478:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
    947c:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    9480:	001e0304 	andseq	r0, lr, r4, lsl #6
    9484:	20030402 	andcs	r0, r3, r2, lsl #8
    9488:	03040200 	movweq	r0, #16896	; 0x4200
    948c:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    9490:	05010304 	streq	r0, [r1, #-772]	; 0xfffffcfc
    9494:	04020003 	streq	r0, [r2], #-3
    9498:	0c051403 	cfstrseq	mvf1, [r5], {3}
    949c:	03040200 	movweq	r0, #16896	; 0x4200
    94a0:	03050106 	movweq	r0, #20742	; 0x5106
    94a4:	03040200 	movweq	r0, #16896	; 0x4200
    94a8:	01052306 	tsteq	r5, r6, lsl #6
    94ac:	03040200 	movweq	r0, #16896	; 0x4200
    94b0:	02001306 	andeq	r1, r0, #402653184	; 0x18000000
    94b4:	02010304 	andeq	r0, r1, #4, 6	; 0x10000000
    94b8:	01010005 	tsteq	r1, r5

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	61657263 	cmnvs	r5, r3, ror #4
       4:	6d5f6574 	cfldr64vs	mvdx6, [pc, #-464]	; fffffe3c <_estack+0xdfffae3c>
       8:	61737365 	cmnvs	r3, r5, ror #6
       c:	45006567 	strmi	r6, [r0, #-1383]	; 0xfffffa99
    return node->data_base.item_array[index];
      10:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
      14:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      18:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
};
      1c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      20:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      24:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
      28:	7000735f 	andvc	r7, r0, pc, asr r3
      2c:	646f6d64 	strbtvs	r6, [pc], #-3428	; 34 <g_pfnVectors+0x34>
      30:	6f5f0065 	svcvs	0x005f0065
      34:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
      38:	615f7469 	cmpvs	pc, r9, ror #8
      3c:	00736772 	rsbseq	r6, r3, r2, ror r7
			i = k;
      40:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
				j->Next = k;
      44:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
      48:	5f007961 	svcpl	0x00007961
}
      4c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      50:	615f6261 	cmpvs	pc, r1, ror #4
      54:	665f6b73 			; <UNDEFINED> instruction: 0x665f6b73
		release;
      58:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
      5c:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
			nq++;
      60:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00786564 	rsbseq	r6, r8, r4, ror #10
      68:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
      6c:	5f626d6f 	svcpl	0x00626d6f
      70:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
      74:	725f0065 	subsvc	r0, pc, #101	; 0x65
      78:	72003834 	andvc	r3, r0, #52, 16	; 0x340000
      7c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
      80:	00726576 	rsbseq	r6, r2, r6, ror r5
      84:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      88:	5f62616c 	svcpl	0x0062616c
      8c:	5f746567 	svcpl	0x00746567
	if (!button_still_pressed (__button_list [pbutton]))
      90:	696f6863 	stmdbvs	pc!, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
      94:	72006563 	andvc	r6, r0, #415236096	; 0x18c00000
      98:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
	if (baction == NULL)
      9c:	7272615f 	rsbsvc	r6, r2, #-1073741801	; 0xc0000017
      a0:	47007961 	strmi	r7, [r0, -r1, ror #18]
	(*baction) (pbutton);
      a4:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
endthread
      a8:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      b0:	31303220 	teqcc	r0, r0, lsr #4
endthread
      b4:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
      b8:	72282035 	eorvc	r2, r8, #53	; 0x35
      bc:	61656c65 	cmnvs	r5, r5, ror #24
      c0:	20296573 	eorcs	r6, r9, r3, ror r5
      c4:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
fsm sender(struct ResponseMessage *message) {
      c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      cc:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
      d0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
}
      d4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
      d8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
      e0:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
      e4:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
      e8:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
      ec:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
		packet[1] = message->gid;
      f0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
      f4:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
      fc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
		DEBUG_PRINT("I am th message GID %d", message->gid);
     100:	6f6c666d 	svcvs	0x006c666d
     104:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
		*p = message->tpe;p++;
     108:	733d6962 	teqvc	sp, #1605632	; 0x188000
		*p = message->request_number;p++;
     10c:	2074666f 	rsbscs	r6, r4, pc, ror #12
		*p = message->sender_id;p++;
     110:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
		*p = message->receiver_id;p++;
     114:	613d6863 	teqvs	sp, r3, ror #16
		switch(message->tpe) {
     118:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
     11c:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
     120:	672d2067 	strvs	r2, [sp, -r7, rrx]!
		tcv_endp(packet);
     124:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	20332d66 	eorscs	r2, r3, r6, ror #26
     12c:	7473672d 	ldrbtvc	r6, [r3], #-1837	; 0xfffff8d3
}
     130:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
		finish;
     134:	6177642d 	cmnvs	r7, sp, lsr #8
     138:	2d206672 	stccs	6, cr6, [r0, #-456]!	; 0xfffffe38
     13c:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
				strncpy(p, message->record, sizeof(message->record));
     140:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
				*p = message->padding;p++;
     144:	20393963 	eorscs	r3, r9, r3, ror #18
				strncpy(p, message->record, sizeof(message->record));
     148:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
     14c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     150:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
				strncpy(p, message->record, sizeof(message->record));
     154:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     158:	20736e6f 	rsbscs	r6, r3, pc, ror #28
				strncpy(p, message->record, sizeof(message->record));
     15c:	6164662d 	cmnvs	r4, sp, lsr #12
				break;
     160:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
				*p = message->record_index;p++;
     164:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
				*p = message->padding;
     168:	20736e6f 	rsbscs	r6, r3, pc, ror #28
				break;
     16c:	6f6e662d 	svcvs	0x006e662d
     170:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
     174:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     178:	61696c61 	cmnvs	r9, r1, ror #24
     17c:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
     180:	61662d20 	cmnvs	r6, r0, lsr #26
		node->nnodes[i] = 0;
     184:	2d206d73 	stccs	13, cr6, [r0, #-460]!	; 0xfffffe34
     188:	78616d66 	stmdavc	r1!, {r1, r2, r5, r6, r8, sl, fp, sp, lr}^
     18c:	7272652d 	rsbsvc	r6, r2, #188743680	; 0xb400000
     190:	3d73726f 	lfmcc	f7, 2, [r3, #-444]!	; 0xfffffe44
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	5f003031 	svcpl	0x00003031
bool init_node(struct Node* node){
     198:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
    node->id  = 0;                  // default id value 0
     19c:	6174735f 	cmnvs	r4, pc, asr r3
    node->index = 0;                // default entry count 0
     1a0:	5f5f7472 	svcpl	0x005f7472
    node->data_base.item_count = 0; // default no items in array
     1a4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	reset_array(node);
     1a8:	746d745f 	strbtvc	r7, [sp], #-1119	; 0xfffffba1
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	6f6f7200 	svcvs	0x006f7200
     1b0:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
};
     1b4:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
     1b8:	5f00657a 	svcpl	0x0000657a
uint8_t generate_request_num(void){
     1bc:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    return (uint8_t) (rand() % 255);
     1c0:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
     1c4:	5f006461 	svcpl	0x00006461
     1c8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
}
     1cc:	735f6261 	cmpvc	pc, #268435462	; 0x10000006
            node->nnodes[i] = 0; // set to null byte
     1d0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     1d4:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     1d8:	5f657465 	svcpl	0x00657465
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	746f7270 	strbtvc	r7, [pc], #-624	; 1e4 <delete_record>
};
     1e0:	5f5f006f 	svcpl	0x005f006f
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	616c7473 	smcvs	51011	; 0xc743
     1e8:	656e5f62 	strbvs	r5, [lr, #-3938]!	; 0xfffff09e
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	72675f77 	rsbvc	r5, r7, #476	; 0x1dc
     1f0:	5f70756f 	svcpl	0x0070756f
     1f4:	5f006469 	svcpl	0x00006469
        node->data_base.item_count -= 1;
     1f8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
};
     1fc:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
bool delete_all(struct Node *node){
     200:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	6f665f64 	svcvs	0x00665f64
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	65645f72 	strbvs	r5, [r4, #-3954]!	; 0xfffff08e
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	73657200 	cmnvc	r5, #0, 4
            node->data_base.item_array[i].timestamp = 0;
     214:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
    node->data_base.item_count = 0;
     21c:	67617373 			; <UNDEFINED> instruction: 0x67617373
}
     220:	00305f65 	eorseq	r5, r0, r5, ror #30
        return true;
     224:	70736572 	rsbsvc	r6, r3, r2, ror r5
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     234:	7200315f 	andvc	r3, r0, #-1073741801	; 0xc0000017
     238:	6f707365 	svcvs	0x00707365
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	5f65736e 	svcpl	0x0065736e
	response_message->tpe = RESPONSE;
     240:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
	response_message->status = status;
     244:	5f656761 	svcpl	0x00656761
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	4c5f0032 	mrrcmi	0, 3, r0, pc, cr2	; <UNPREDICTABLE>
	response_message->gid = gid;
     24c:	5f4b434f 	svcpl	0x004b434f
	response_message->sender_id = sender_id;
     250:	55434552 	strbpl	r4, [r3, #-1362]	; 0xfffffaae
	response_message->status = status;
     254:	56495352 			; <UNDEFINED> instruction: 0x56495352
	if (!padding){
     258:	00545f45 	subseq	r5, r4, r5, asr #30
		response_message->padding = padding;
     25c:	70736572 	rsbsvc	r6, r3, r2, ror r5
	if (rec != NULL){
     260:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     264:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
		strncpy(response_message->record, rec, 20);
     268:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     26c:	7200345f 	andvc	r3, r0, #1593835520	; 0x5f000000
     270:	6f707365 	svcvs	0x00707365
};
     274:	5f65736e 	svcpl	0x0065736e
fsm receiver(struct Node* node_db) {
     278:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     27c:	5f656761 	svcpl	0x00656761
     280:	73750035 	cmnvc	r5, #53	; 0x35
     284:	705f7265 	subsvc	r7, pc, r5, ror #4
     288:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     28c:	5f646564 	svcpl	0x00646564
     290:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     294:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	0064695f 	rsbeq	r6, r4, pc, asr r9
     29c:	646f6e6e 	strbtvs	r6, [pc], #-3694	; 2a4 <receiver+0x2c>
     2a0:	5f007365 	svcpl	0x00007365
     2a4:	6c72626d 	lfmvs	f6, 2, [r2], #-436	; 0xfffffe4c
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	735f6e65 	cmpvc	pc, #1616	; 0x650
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     2b0:	73694400 	cmnvc	r9, #0, 8
     2b4:	65766f63 	ldrbvs	r6, [r6, #-3939]!	; 0xfffff09d
		switch (response_message_5->tpe){
     2b8:	65527972 	ldrbvs	r7, [r2, #-2418]	; 0xfffff68e
     2bc:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     2c0:	654d6573 	strbvs	r6, [sp, #-1395]	; 0xfffffa8d
     2c4:	67617373 			; <UNDEFINED> instruction: 0x67617373
     2c8:	5f5f0065 	svcpl	0x005f0065
     2cc:	616c7473 	smcvs	51011	; 0xc743
     2d0:	656e5f62 	strbvs	r5, [lr, #-3938]!	; 0xfffff09e
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	6f6e5f77 	svcvs	0x006e5f77
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
				if (discovery_request_message->gid == node_db->gid){
     2dc:	73660064 	cmnvc	r6, #100	; 0x64
     2e0:	6b6c6274 	blvs	1b18cb8 <__ccfg+0x1af8d10>
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     2e8:	6c6f5f69 	stclvs	15, cr5, [pc], #-420	; 14c <_Min_Stack_Size+0x4c>
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	735f0064 	cmpvc	pc, #100	; 0x64
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	756f6474 	strbvc	r6, [pc, #-1140]!	; fffffe84 <_estack+0xdfffae84>
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
					response_message_0->sender_id = node_db->id;
     2f8:	5f736f70 	svcpl	0x00736f70
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
					DEBUG_PRINT("\r\nSending to sender");
     300:	5f00736e 	svcpl	0x0000736e
					call sender(response_message_0, done_case);
     304:	6b6f6f63 	blvs	1bdc098 <__ccfg+0x1bbc0f0>
     308:	74006569 	strvc	r6, [r0], #-1385	; 0xfffffa97
     30c:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     310:	006f666e 	rsbeq	r6, pc, lr, ror #12
     314:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	745f7461 	ldrbvc	r7, [pc], #-1121	; 320 <receiver+0xa8>
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	625f5f00 	subsvs	r5, pc, #0, 30
     320:	655f7373 	ldrbvs	r7, [pc, #-883]	; ffffffb5 <_estack+0xdfffafb5>
     324:	5f5f646e 	svcpl	0x005f646e
     328:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
     32c:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
     330:	48544f00 	ldmdami	r4, {r8, r9, sl, fp, lr}^
     334:	455f5245 	ldrbmi	r5, [pc, #-581]	; f7 <sender+0x2f>
     338:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 344 <receiver+0xcc>
					node_db->index+=1;
     340:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
     344:	5f007961 	svcpl	0x00007961
		tcv_endp(incoming_packet);
     348:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
     34c:	5f00746c 	svcpl	0x0000746c
		proceed receiving;
     350:	5f6d745f 	svcpl	0x006d745f
		ser_out(response_1_create, "\r\nData Saved");
     354:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
     358:	57454e00 	strbpl	r4, [r5, -r0, lsl #28]
		proceed receiving;
     35c:	444f4e5f 	strbmi	r4, [pc], #-3679	; 364 <receiver+0xec>
     360:	44495f45 	strbmi	r5, [r9], #-3909	; 0xfffff0bb
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
     368:	79706f72 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
		proceed receiving;
     36c:	735f5f00 	cmpvc	pc, #0, 30
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     374:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     378:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     37c:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 384 <receiver+0x10c>
     380:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
		proceed receiving;
     384:	635f5f00 	cmpvs	pc, #0, 30
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     38c:	736f6800 	cmnvc	pc, #0, 16
     390:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
     394:	63617000 	cmnvs	r1, #0
		proceed receiving;
     398:	5f74656b 	svcpl	0x0074656b
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     3a0:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     3a4:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     3a8:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
		proceed receiving;
     3ac:	5f5f0073 	svcpl	0x005f0073
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 1e8 <delete_record+0x4>
     3b4:	5f006e69 	svcpl	0x00006e69
     3b8:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     3bc:	65720066 	ldrbvs	r0, [r2, #-102]!	; 0xffffff9a
		proceed receiving;
     3c0:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	6d5f6573 	cfldr64vs	mvdx6, [pc, #-460]	; 200 <delete_all>
     3c8:	61737365 	cmnvs	r3, r5, ror #6
		proceed receiving;
     3cc:	335f6567 	cmpcc	pc, #432013312	; 0x19c00000
}
     3d0:	61725f00 	cmnvs	r2, r0, lsl #30
     3d4:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	736e6900 	cmnvc	lr, #0, 18
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	5f747265 	svcpl	0x00747265
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	6f636572 	svcvs	0x00636572
     3e4:	5f006472 	svcpl	0x00006472
     3e8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     3ec:	635f6261 	cmpvs	pc, #268435462	; 0x10000006
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
					break;
     3f4:	72705f65 	rsbsvc	r5, r0, #404	; 0x194
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	5f6f746f 	svcpl	0x006f746f
     3fc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	725f0074 	subsvc	r0, pc, #116	; 0x74
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     408:	006b5f74 	rsbeq	r5, fp, r4, ror pc
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     410:	5f6c616e 	svcpl	0x006c616e
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	00667562 	rsbeq	r7, r6, r2, ror #10
     418:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
     420:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
     424:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     428:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     42c:	5f00746e 	svcpl	0x0000746e
     430:	74637361 	strbtvc	r7, [r3], #-865	; 0xfffffc9f
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	5f656d69 	svcpl	0x00656d69
					call sender(response_message_2, done_case);
     438:	00667562 	rsbeq	r7, r6, r2, ror #10
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     440:	0062645f 	rsbeq	r6, r2, pc, asr r4
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
     448:	00454c49 	subeq	r4, r5, r9, asr #24
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
				DEBUG_PRINT("\r\nDelete rec");
     450:	61657200 	cmnvs	r5, r0, lsl #4
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	006e6f73 	rsbeq	r6, lr, r3, ror pc
     458:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
     45c:	5f424400 	svcpl	0x00424400
     460:	4c4c5546 	cfstr64mi	mvdx5, [ip], {70}	; 0x46
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
     468:	00454c49 	subeq	r4, r5, r9, asr #24
     46c:	5f746573 	svcpl	0x00746573
     470:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	0064695f 	rsbeq	r6, r4, pc, asr r9
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     47c:	00746573 	rsbseq	r6, r4, r3, ror r5
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	6f72705f 	svcvs	0x0072705f
     488:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
     48c:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
						status = (uint8_t) SUCCESS;
     494:	735f5f00 	cmpvc	pc, #0, 30
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     4a0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     4a4:	0062645f 	rsbeq	r6, r2, pc, asr r4
     4a8:	5f766374 	svcpl	0x00766374
     4ac:	0065706f 	rsbeq	r7, r5, pc, rrx
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     4b4:	6f72705f 	svcvs	0x0072705f
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
     4bc:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
     4c0:	00786564 	rsbseq	r6, r8, r4, ror #10
     4c4:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
     4c8:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
     4cc:	73007963 	movwvc	r7, #2403	; 0x963
     4d0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     4d4:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     4d8:	735f5f00 	cmpvc	pc, #0, 30
     4dc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     4e0:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     4e4:	76656972 			; <UNDEFINED> instruction: 0x76656972
     4e8:	72705f65 	rsbsvc	r5, r0, #404	; 0x194
     4ec:	006f746f 	rsbeq	r7, pc, pc, ror #8
     4f0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     4f4:	5f62616c 	svcpl	0x0062616c
     4f8:	61656c63 	cmnvs	r5, r3, ror #24
     4fc:	656e5f72 	strbvs	r5, [lr, #-3954]!	; 0xfffff08e
     500:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
     504:	5f72756f 	svcpl	0x0072756f
     508:	61727261 	cmnvs	r2, r1, ror #4
     50c:	5f5f0079 	svcpl	0x005f0079
     510:	63756e67 	cmnvs	r5, #1648	; 0x670
     514:	5f61765f 	svcpl	0x0061765f
     518:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     51c:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
     520:	6f635f6d 	svcvs	0x00635f6d
     524:	00746e75 	rsbseq	r6, r4, r5, ror lr
     528:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     52c:	5f62616c 	svcpl	0x0062616c
     530:	70736572 	rsbsvc	r6, r3, r2, ror r5
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     538:	645f315f 	ldrbvs	r3, [pc], #-351	; 540 <receiver+0x2c8>
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
				DEBUG_PRINT("\r\nretrieve rec");
     540:	5f5f0065 	svcpl	0x005f0065
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	616c7473 	smcvs	51011	; 0xc743
     548:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     54c:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
     550:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     554:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
     558:	00657461 	rsbeq	r7, r5, r1, ror #8
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     560:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
     564:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 56c <receiver+0x2f4>
    return node->data_base.item_array[index];
     568:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
     56c:	5f007961 	svcpl	0x00007961
     570:	00636e69 	rsbeq	r6, r3, r9, ror #28
     574:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	6e656700 	cdpvs	7, 6, cr6, cr5, cr0, {0}
    return node->data_base.item_array[index];
     57c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
     584:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     588:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	5f5f006d 	svcpl	0x005f006d
     590:	616c7473 	smcvs	51011	; 0xc743
     594:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
     598:	5f747261 	svcpl	0x00747261
     59c:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     5a0:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     5a4:	6f72705f 	svcvs	0x0072705f
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	5f006f74 	svcpl	0x00006f74
     5ac:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
				DEBUG_PRINT("\r\nResponse");
     5b0:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     5b8:	00657461 	rsbeq	r7, r5, r1, ror #8
     5bc:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
     5c0:	735f5f00 	cmpvc	pc, #0, 30
     5c4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     5c8:	006b6f5f 	rsbeq	r6, fp, pc, asr pc
				if(!response_flag){
     5cc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
					response_flag=1;
     5d0:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
					trigger(&response_flag);
     5d4:	6c630070 	stclvs	0, cr0, [r3], #-448	; 0xfffffe40
				switch(response_message_5->status){
     5d8:	5f726165 	svcpl	0x00726165
     5dc:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     5e0:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     5e4:	6f626867 	svcvs	0x00626867
     5e8:	615f7275 	cmpvs	pc, r5, ror r2	; <UNPREDICTABLE>
						if (response_checker[0] == response_message_5->request_number){
     5ec:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
     5f0:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
     5f4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
							switch(response_checker[1]){
     5f8:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
     5fc:	5f5f0073 	svcpl	0x005f0073
     600:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     604:	6c5f6e6f 	mrrcvs	14, 6, r6, pc, cr15	; <UNPREDICTABLE>
									proceed response_1_create;
     608:	00747369 	rsbseq	r7, r4, r9, ror #6
						proceed response_2;
     60c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
									proceed response_1_delete;
     610:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
									proceed response_1_retrieve;
     614:	00657079 	rsbeq	r7, r5, r9, ror r0
						proceed response_2;
     618:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
						proceed response_3;
     61c:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 45c <receiver+0x1e4>
						proceed response_4;
     620:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     628:	626d5f00 	rsbvs	r5, sp, #0, 30
				break;
     62c:	5f6e656c 	svcpl	0x006e656c
}
     630:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     634:	77610065 	strbvc	r0, [r1, -r5, rrx]!
     638:	0064726f 	rsbeq	r7, r4, pc, ror #4
     63c:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
     640:	53006e70 	movwpl	r6, #3696	; 0xe70
     644:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
fsm root {
     648:	6c005353 	stcvs	3, cr5, [r0], {83}	; 0x53
     64c:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     650:	5f5f0063 	svcpl	0x005f0063
     654:	616c7473 	smcvs	51011	; 0xc743
     658:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     65c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     660:	00676e69 	rsbeq	r6, r7, r9, ror #28
     664:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     668:	61646d5f 	cmnvs	r4, pc, asr sp
     66c:	5f5f0079 	svcpl	0x005f0079
     670:	616c7473 	smcvs	51011	; 0xc743
     674:	61775f62 	cmnvs	r7, r2, ror #30
     678:	645f7469 	ldrbvs	r7, [pc], #-1129	; 680 <root+0x38>
     67c:	6f637369 	svcvs	0x00637369
     680:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     684:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     688:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     68c:	5f00636e 	svcpl	0x0000636e
     690:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
     694:	5f63776f 	svcpl	0x0063776f
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     69c:	615f0065 	cmpvs	pc, r5, rrx
     6a0:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		init_node(node_db);
     6a4:	6c003074 	stcvs	0, cr3, [r0], {116}	; 0x74
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     6ac:	5f5f006b 	svcpl	0x005f006b
		tcv_plug (0, &plug_null);
     6b0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     6b4:	61747379 	cmnvs	r4, r9, ror r3
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	5f5f0074 	svcpl	0x005f0074
     6bc:	616c7473 	smcvs	51011	; 0xc743
     6c0:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     6c4:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     6c8:	315f6573 	cmpcc	pc, r3, ror r5	; <UNPREDICTABLE>
			diag("Cannot open tcv interface");
     6cc:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     6d0:	76656972 			; <UNDEFINED> instruction: 0x76656972
			halt();
     6d4:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     6dc:	635f6573 	cmpvs	pc, #482344960	; 0x1cc00000
		runfsm receiver(node_db);
     6e0:	6b636568 	blvs	18d9c88 <__ccfg+0x18b9ce0>
     6e4:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	6f637369 	svcvs	0x00637369
     6ec:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     6f0:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
     6f4:	4d747365 	ldclmi	3, cr7, [r4, #-404]!	; 0xfffffe6c
     6f8:	61737365 	cmnvs	r3, r5, ror #6
     6fc:	5f006567 	svcpl	0x00006567
		ser_inf(get_choice, "%c", &CHOICE);
     700:	5f69705f 	svcpl	0x0069705f
     704:	746e696d 	strbtvc	r6, [lr], #-2413	; 0xfffff693
     708:	5f5f006b 	svcpl	0x005f006b
		switch(CHOICE) {
     70c:	616c7473 	smcvs	51011	; 0xc743
     710:	69745f62 	ldmdbvs	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     714:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1af <init_node+0x17>
     718:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     71c:	6b636f6c 	blvs	18dc4d4 <__ccfg+0x18bc52c>
     720:	5f00745f 	svcpl	0x0000745f
     724:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     728:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
     72c:	6f707365 	svcvs	0x00707365
     730:	5f65736e 	svcpl	0x0065736e
     734:	5f5f0032 	svcpl	0x005f0032
     738:	616c7473 	smcvs	51011	; 0xc743
				proceed menu;
     73c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     740:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	335f6573 	cmpcc	pc, #482344960	; 0x1cc00000
     748:	735f5f00 	cmpvc	pc, #0, 30
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     750:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     754:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
		DEBUG_PRINT("setting node group ID");
     758:	00345f65 	eorseq	r5, r4, r5, ror #30
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75c:	63775f5f 	cmnvs	r7, #380	; 0x17c
    node->gid = gid; 
     760:	695f0068 	ldmdbvs	pc, {r3, r5, r6}^	; <UNPREDICTABLE>
		proceed menu;
     764:	0073626f 	rsbseq	r6, r3, pc, ror #4
     768:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76c:	64007375 	strvs	r7, [r0], #-885	; 0xfffffc8b
     770:	5f617461 	svcpl	0x00617461
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     774:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	5f5f0079 	svcpl	0x005f0079
     77c:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     780:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     784:	735f5f00 	cmpvc	pc, #0, 30
		if((node_db->id < 1) || (node_db->id > 25)){
     788:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     78c:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
     790:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
			strncpy(reason, "Out of Range", 50);
     794:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 79c <root+0x154>
     798:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
			proceed invalid_node_id;
     79c:	735f5f00 	cmpvc	pc, #0, 30
     7a0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
				strncpy(reason, "ID is already in use", 50);
     7a4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
		for(int i = 0; i < node_db->index; i++){
     7a8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     7ac:	5f64726f 	svcpl	0x0064726f
     7b0:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
		proceed menu;
     7b4:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7b8:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     7bc:	69657274 	stmdbvs	r5!, {r2, r4, r5, r6, r9, ip, sp, lr}^
     7c0:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
     7c4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
		proceed get_new_node_id;
     7c8:	656d5f64 	strbvs	r5, [sp, #-3940]!	; 0xfffff09c
     7cc:	67617373 			; <UNDEFINED> instruction: 0x67617373
		if (!clear_node_neighbour_array(node_db)){
     7d0:	735f0065 	cmpvc	pc, #101	; 0x65
     7d4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
			strncpy(reason, "Error Clearing Node Array", 50);
     7d8:	61675f00 	cmnvs	r7, r0, lsl #30
     7dc:	5f616d6d 	svcpl	0x00616d6d
     7e0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
			proceed error;
     7e4:	006d6167 	rsbeq	r6, sp, r7, ror #2
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7e8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     7ec:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
		request_packet->gid = node_db->gid;
     7f0:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     7f4:	5f5f0074 	svcpl	0x005f0074
		request_packet->tpe = DISCOVERY_REQUEST;
     7f8:	616c7473 	smcvs	51011	; 0xc743
		request_packet->request_number = generate_request_num();
     7fc:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     800:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
		call sender(request_packet, wait_discovery);
     804:	72675f77 	rsbvc	r5, r7, #476	; 0x1dc
     808:	5f70756f 	svcpl	0x0070756f
		request_packet->receiver_id=0;
     80c:	5f006469 	svcpl	0x00006469
		call sender(request_packet, wait_discovery);
     810:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     814:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     818:	64617000 	strbtvs	r7, [r1], #-0
			release;
     81c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
				proceed get_new_node_id;
     820:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
				proceed clear_neighbour_array;
     824:	4b00746c 	blmi	1d9dc <__exidx_end+0x17ddc>
				proceed create_proto_start;
     828:	2f504d54 	svccs	0x00504d54
				proceed start_delete_proto;
     82c:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
				proceed retrieve_proto;
     830:	5f5f0063 	svcpl	0x005f0063
				proceed display_db;
     834:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
				proceed del_local;
     838:	775f0067 	ldrbvc	r0, [pc, -r7, rrx]
			if(node_db->id == node_db->nnodes[i]){
     83c:	6f747263 	svcvs	0x00747263
     840:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
     844:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
				strncpy(reason, "ID is already in use", 50);
     848:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
     84c:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
				proceed invalid_node_id;
     850:	6f707365 	svcvs	0x00707365
     854:	5f65736e 	svcpl	0x0065736e
		for(int i = 0; i < node_db->index; i++){
     858:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
		if (discovery_wait_flag == 0){
     85c:	615f5f00 	cmpvs	pc, r0, lsl #30
			discovery_wait_flag=1;
     860:	5f5f0070 	svcpl	0x005f0070
     864:	616c7473 	smcvs	51011	; 0xc743
			delay(3000, find_proto_start);
     868:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xfffff09e
     86c:	6f6c5f6c 	svcvs	0x006c5f6c
		if (discovery_wait_flag == 1){
     870:	006c6163 	rsbeq	r6, ip, r3, ror #2
			discovery_wait_flag=0;
     874:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
     878:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
			delay(3000, display_neighbour_nodes);
     87c:	5f5f0070 	svcpl	0x005f0070
     880:	616c7473 	smcvs	51011	; 0xc743
     884:	6f6c5f62 	svcvs	0x006c5f62
     888:	745f706f 	ldrbvc	r7, [pc], #-111	; 890 <root+0x248>
     88c:	756f7268 	strbvc	r7, [pc, #-616]!	; 62c <receiver+0x3b4>
     890:	645f6867 	ldrbvs	r6, [pc], #-2151	; 898 <root+0x250>
     894:	00617461 	rsbeq	r7, r1, r1, ror #8
     898:	454c4544 	strbmi	r4, [ip, #-1348]	; 0xfffffabc
     89c:	455f4554 	ldrbmi	r4, [pc, #-1364]	; 350 <receiver+0xd8>
     8a0:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     8a4:	626d5f00 	rsbvs	r5, sp, #0, 30
     8a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     8ac:	00745f65 	rsbseq	r5, r4, r5, ror #30
     8b0:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
     8b4:	756f6268 	strbvc	r6, [pc, #-616]!	; 654 <root+0xc>
     8b8:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8bc:	006b6365 	rsbeq	r6, fp, r5, ror #6
     8c0:	5f746573 	svcpl	0x00746573
     8c4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
		if(node_db->index == 0){
     8c8:	6469675f 	strbtvs	r6, [r9], #-1887	; 0xfffff8a1
     8cc:	73797300 	cmnvc	r9, #0, 6
     8d0:	5f6d6574 	svcpl	0x006d6574
			proceed menu;
     8d4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8d8:	6f635f74 	svcvs	0x00635f74
     8dc:	00746e75 	rsbseq	r6, r4, r5, ror lr
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8e0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
			if (node_db->nnodes[i] == 0) break;
     8e4:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
     8e8:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
     8ec:	64707165 	ldrbtvs	r7, [r0], #-357	; 0xfffffe9b
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8f0:	685f006d 	ldmdavs	pc, {r0, r2, r3, r5, r6}^	; <UNPREDICTABLE>
     8f4:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f8:	74006f6e 	strvc	r6, [r0], #-3950	; 0xfffff092
		proceed menu;
     8fc:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
     900:	6f006f6c 	svcvs	0x00006f6c
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     904:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
     908:	6e700073 	mrcvs	0, 3, r0, cr0, cr3, {3}
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
     90c:	5f006d75 	svcpl	0x00006d75
     910:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     914:	6d5f6261 	lfmvs	f6, 2, [pc, #-388]	; 798 <root+0x150>
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     918:	00756e65 	rsbseq	r6, r5, r5, ror #28
     91c:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
			strncpy(reason, "Error: improper ID", 50);
     920:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
     924:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
			proceed error;
     928:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     92c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     930:	61755f69 	cmnvs	r5, r9, ror #30
     934:	41007472 	tstmi	r0, r2, ror r4
		ser_in(get_record_to_create, user_provided_record, 20);
     938:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
     93c:	63655343 	cmnvs	r5, #201326593	; 0xc000001
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     940:	00746547 	rsbseq	r6, r4, r7, asr #10
     944:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     948:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
		create_message->gid = node_db->gid;
     94c:	78654e00 	stmdavc	r5!, {r9, sl, fp, lr}^
		create_message->tpe = CREATE_RECORD;
     950:	63740074 	cmnvs	r4, #116	; 0x74
		create_message->request_number = generate_request_num();
     954:	756f5f76 	strbvc	r5, [pc, #-3958]!	; fffff9e6 <_estack+0xdfffa9e6>
     958:	5f5f0074 	svcpl	0x005f0074
		strncpy(create_message->record, user_provided_record, 20);
     95c:	616c7473 	smcvs	51011	; 0xc743
     960:	69665f62 	stmdbvs	r6!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
		create_message->receiver_id = user_provided_receiver_id;
     964:	705f646e 	subsvc	r6, pc, lr, ror #8
		strncpy(create_message->record, user_provided_record, 20);
     968:	6f746f72 	svcvs	0x00746f72
		create_message->receiver_id = user_provided_receiver_id;
     96c:	6174735f 	cmnvs	r4, pc, asr r3
		strncpy(create_message->record, user_provided_record, 20);
     970:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
		response_checker[0] = create_message->request_number;
     974:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
     978:	5f455645 	svcpl	0x00455645
		call sender(create_message, wait);
     97c:	4f434552 	svcmi	0x00434552
     980:	64004452 	strvs	r4, [r0], #-1106	; 0xfffffbae
     984:	6f637369 	svcvs	0x00637369
     988:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     98c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     990:	6c665f74 	stclvs	15, cr5, [r6], #-464	; 0xfffffe30
     994:	5f006761 	svcpl	0x00006761
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
     998:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     99c:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
     9a0:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9a4:	6f665f64 	svcvs	0x00665f64
     9a8:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
			strncpy(reason, "Error: improper node ID", 50);
     9ac:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9b0:	44006576 	strmi	r6, [r0], #-1398	; 0xfffffa8a
     9b4:	4f435349 	svcmi	0x00435349
			proceed error;
     9b8:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9bc:	5345525f 	movtpl	r5, #21087	; 0x525f
     9c0:	534e4f50 	movtpl	r4, #61264	; 0xef50
		ser_inf(get_index_for_delete, "%u", &user_provided_index);
     9c4:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
     9c8:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9cc:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
		if (user_provided_index < 0 || user_provided_index > 40){
     9d0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     9d4:	5f5f0064 	svcpl	0x005f0064
			strncpy(reason, "Error: invalid index", 50);
     9d8:	685f6970 	ldmdavs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
     9dc:	655f7865 	ldrbvs	r7, [pc, #-2149]	; 17f <_Min_Stack_Size+0x7f>
			proceed error;
     9e0:	745f636e 	ldrbvc	r6, [pc], #-878	; 9e8 <root+0x3a0>
     9e4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	735f5f00 	cmpvc	pc, #0, 30
		delete_record->gid = node_db->gid;
     9ec:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     9f0:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     9f4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
		delete_record->tpe = DELETE_RECORD;
     9f8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		delete_record->request_number = generate_request_num();
     9fc:	76655f69 	strbtvc	r5, [r5], -r9, ror #30
		delete_record->sender_id = node_db->id;
     a00:	5f746e65 	svcpl	0x00746e65
     a04:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
		delete_record->receiver_id = user_provided_receiver_id;
     a08:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     a0c:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 844 <root+0x1fc>
		delete_record->record_index = user_provided_index;
     a10:	61747362 	cmnvs	r4, r2, ror #6
		response_checker[0] = delete_record->request_number;
     a14:	5f006574 	svcpl	0x00006574
		response_checker[1] = delete_record->tpe;
     a18:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     a1c:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
		call sender(delete_record, wait);
     a20:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     a24:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     a28:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     a2c:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a30:	76656972 			; <UNDEFINED> instruction: 0x76656972
     a34:	5f5f0065 	svcpl	0x005f0065
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
     a38:	616c7473 	smcvs	51011	; 0xc743
     a3c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     a40:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     a44:	5f786564 	svcpl	0x00786564
     a48:	5f726f66 	svcpl	0x00726f66
			strncpy(reason, "Error: improper node ID", 50);
     a4c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
     a50:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
			proceed error;
     a54:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     a58:	7300746d 	movwvc	r7, #1133	; 0x46d
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a5c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     a60:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
     a64:	735f5f00 	cmpvc	pc, #0, 30
     a68:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     a6c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
		if (user_provided_index < 0 || user_provided_index > 40){
     a70:	72635f74 	rsbvc	r5, r3, #116, 30	; 0x1d0
			strncpy(reason, "Error: invalid index", 50);
     a74:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     a78:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     a7c:	5f64726f 	svcpl	0x0064726f
			proceed error;
     a80:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a84:	00656761 	rsbeq	r6, r5, r1, ror #14
     a88:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
		retrieve_record->gid = node_db->gid;
     a8c:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
     a90:	74736465 	ldrbtvc	r6, [r3], #-1125	; 0xfffffb9b
     a94:	5f5f0073 	svcpl	0x005f0073
		retrieve_record->tpe = RETRIEVE_RECORD;
     a98:	70006673 	andvc	r6, r0, r3, ror r6
		retrieve_record->request_number = generate_request_num();
     a9c:	6f696e69 	svcvs	0x00696e69
     aa0:	00745f64 	rsbseq	r5, r4, r4, ror #30
		retrieve_record->sender_id = node_db->id;
     aa4:	63775f5f 	cmnvs	r7, #380	; 0x17c
		response_checker[0] = retrieve_record->request_number;
     aa8:	5f006268 	svcpl	0x00006268
		retrieve_record->receiver_id = user_provided_receiver_id;
     aac:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
     ab0:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
		retrieve_record->record_index = user_provided_index;
     ab4:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
     ab8:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
		response_checker[0] = retrieve_record->request_number;
     abc:	5f5f0072 	svcpl	0x005f0072
		call sender(&retrieve_record, wait);
     ac0:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     ac4:	00726165 	rsbseq	r6, r2, r5, ror #2
     ac8:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
     acc:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
     ad0:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad4:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     ad8:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
		if(node_db->data_base.item_count != 0){
     adc:	67617373 			; <UNDEFINED> instruction: 0x67617373
     ae0:	5f5f0065 	svcpl	0x005f0065
     ae4:	616c7473 	smcvs	51011	; 0xc743
		ser_out(loop_through_data, "\r\n");
     ae8:	73615f62 	cmnvc	r1, #392	; 0x188
     aec:	6f665f6b 	svcvs	0x00665f6b
		proceed menu;
     af0:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
		delete_all(node_db);
     af4:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     af8:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		proceed menu;
     afc:	76656972 			; <UNDEFINED> instruction: 0x76656972
     b00:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
		delay(3000, timeout);
     b04:	00786564 	rsbseq	r6, r8, r4, ror #10
     b08:	52544552 	subspl	r4, r4, #343932928	; 0x14800000
		when(&response_flag, menu);
     b0c:	45564549 	ldrbmi	r4, [r6, #-1353]	; 0xfffffab7
     b10:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
		release;
     b14:	5f00524f 	svcpl	0x0000524f
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b18:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     b1c:	655f6261 	ldrbvs	r6, [pc, #-609]	; 8c3 <root+0x27b>
     b20:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
     b24:	4c454400 	cfstrdmi	mvd4, [r5], {-0}
     b28:	5f455445 	svcpl	0x00455445
     b2c:	4f434552 	svcmi	0x00434552
     b30:	5f004452 	svcpl	0x00004452
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b34:	61636f6c 	cmnvs	r3, ip, ror #30
     b38:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
     b3c:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
     b40:	755f0066 	ldrbvc	r0, [pc, #-102]	; ae2 <root+0x49a>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b44:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
		ser_out(timeout, "\r\nFailed to reach the destination");
     b48:	635f0064 	cmpvs	pc, #100	; 0x64
     b4c:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
		proceed menu;
     b50:	6d5f006e 	ldclvs	0, cr0, [pc, #-440]	; 9a0 <root+0x358>
     b54:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b58:	6c5f0073 	mrrcvs	0, 7, r0, pc, cr3	; <UNPREDICTABLE>
     b5c:	5f613436 	svcpl	0x00613436
		proceed menu;
     b60:	00667562 	rsbeq	r7, r6, r2, ror #10
     b64:	6b6c625f 	blvs	1b194e8 <__ccfg+0x1af9540>
}
     b68:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     b6c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; b74 <root+0x52c>
     b70:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
     b74:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     b78:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     b7c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     b80:	61765f5f 	cmnvs	r6, pc, asr pc
     b84:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     b88:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
     b8c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     b90:	61657243 	cmnvs	r5, r3, asr #4
     b94:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
     b98:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     b9c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     ba0:	00656761 	rsbeq	r6, r5, r1, ror #14
     ba4:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     ba8:	00737365 	rsbseq	r7, r3, r5, ror #6
     bac:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     bb0:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
     bb4:	63740072 	cmnvs	r4, #114	; 0x72
     bb8:	63725f76 	cmnvs	r2, #472	; 0x1d8
     bbc:	6e5f0076 	mrcvs	0, 2, r0, cr15, cr6, {3}
     bc0:	73626f69 	cmnvc	r2, #420	; 0x1a4
     bc4:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
static void devinit_uart (int devnum) {
     bc8:	00745f74 	rsbseq	r5, r4, r4, ror pc
	adddevfunc (ioreq_uart_a, devnum);
     bcc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     bd0:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
void udelay (volatile word n) {
     bd4:	5400745f 	strpl	r7, [r0], #-1119	; 0xfffffba1
     bd8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
	while (n) {
     bdc:	53494400 	movtpl	r4, #37888	; 0x9400
     be0:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xfffff0bd
}
     be4:	525f5952 	subspl	r5, pc, #1343488	; 0x148000
	while (n--);
     be8:	45555145 	ldrbmi	r5, [r5, #-325]	; 0xfffffebb
     bec:	5f005453 	svcpl	0x00005453
     bf0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
		n--;
     bf4:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
     bf8:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     bfc:	6d5f4d52 	ldclvs	13, cr4, [pc, #-328]	; abc <root+0x474>
void mdelay (volatile word n) {
     c00:	61737365 	cmnvs	r3, r5, ror #6
     c04:	5f006567 	svcpl	0x00006567
	while (n) {
     c08:	5f6f7364 	svcpl	0x006f7364
     c0c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
}
     c10:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
		udelay (999);
     c14:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; a64 <root+0x41c>
     c18:	5f676e69 	svcpl	0x00676e69
		n--;
     c1c:	6b636170 	blvs	18d91e4 <__ccfg+0x18b923c>
     c20:	5f007465 	svcpl	0x00007465
     c24:	5f69705f 	svcpl	0x0069705f
     c28:	5f007473 	svcpl	0x00007473
void __pi_ondomain (lword d) {
     c2c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     c30:	695f6261 	ldmdbvs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
		if (__pi_systat.effpdm > 1)
     c34:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     c38:	7a696c61 	bvc	1a5bdc4 <__ccfg+0x1a3be1c>
			__pi_systat.effpdm = 1;
     c3c:	6f6e5f65 	svcvs	0x006e5f65
	PRCMPowerDomainOn (d);
     c40:	5f006564 	svcpl	0x00006564
     c44:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
     c48:	75006675 	strvc	r6, [r0, #-1653]	; 0xfffff98b
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c4c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     c50:	2064656e 	rsbcs	r6, r4, lr, ror #10
     c54:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
	__pi_systat.ondmns |= d;
     c58:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c5c:	656e5f69 	strbvs	r5, [lr, #-3945]!	; 0xfffff097
}
     c60:	73660077 	cmnvc	r6, #119	; 0x77
     c64:	646f636d 	strbtvs	r6, [pc], #-877	; c6c <__pi_offdomain+0x4>
void __pi_offdomain (lword d) {
     c68:	454e0065 	strbmi	r0, [lr, #-101]	; 0xffffff9b
     c6c:	4f4e5f57 	svcmi	0x004e5f57
	PRCMPowerDomainOff (d);
     c70:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     c74:	5f004449 	svcpl	0x00004449
     c78:	4243505f 	submi	r5, r3, #95	; 0x5f
     c7c:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
	if (d & PRCM_DOMAIN_RFCORE) {
     c80:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
     c84:	72655f65 	rsbvc	r5, r5, #404	; 0x194
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     c88:	63740072 	cmnvs	r4, #114	; 0x72
     c8c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
			__pi_systat.effpdm = __pi_systat.reqpdm;
     c90:	6174006d 	cmnvs	r4, sp, rrx
     c94:	5f006c69 	svcpl	0x00006c69
	__pi_systat.ondmns &= ~d;
     c98:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; b98 <root+0x550>
     c9c:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
}
     ca0:	6f6e5f74 	svcvs	0x006e5f74
     ca4:	5f006564 	svcpl	0x00006564
void __pi_syserror (word ec, const char *m) {
     ca8:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
	diag ("SYSERR: %x, %s", ec, m);
     cac:	61750066 	cmnvs	r5, r6, rrx
     cb0:	745f7472 	ldrbvc	r7, [pc], #-1138	; cb8 <__pi_syserror+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
     cb4:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
     cb8:	61625f61 	cmnvs	r2, r1, ror #30
     cbc:	5f006573 	svcpl	0x00006573
     cc0:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
		all_leds_blink;
     cc4:	735f5f00 	cmpvc	pc, #0, 30
     cc8:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
     ccc:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     cd0:	6b6f7472 	blvs	1bddea0 <__ccfg+0x1bbdef8>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     cd4:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
     cd8:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; b10 <root+0x4c8>
     cdc:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
     ce0:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
     ce4:	00657461 	rsbeq	r7, r5, r1, ror #8
     ce8:	63736964 	cmnvs	r3, #100, 18	; 0x190000
	while (1) {
     cec:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
     cf0:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
     cf4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     cf8:	656d5f74 	strbvs	r5, [sp, #-3956]!	; 0xfffff08c
void tci_run_delay_timer () {
     cfc:	67617373 			; <UNDEFINED> instruction: 0x67617373
	setdel = __pi_mintk - __pi_old;
     d00:	5f5f0065 	svcpl	0x005f0065
     d04:	616c7473 	smcvs	51011	; 0xc743
     d08:	61775f62 	cmnvs	r7, r2, ror #30
     d0c:	5f007469 	svcpl	0x00007469
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d10:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
     d14:	74007367 	strvc	r7, [r0], #-871	; 0xfffffc99
     d18:	6c707663 	ldclvs	6, cr7, [r0], #-396	; 0xfffffe74
     d1c:	745f6775 	ldrbvc	r6, [pc], #-1909	; d24 <tci_run_delay_timer+0x28>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d20:	735f5f00 	cmpvc	pc, #0, 30
	sti_tim;
     d24:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
}
     d28:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     d2c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     d30:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     d34:	6f626867 	svcvs	0x00626867
     d38:	6e5f7275 	mrcvs	2, 2, r7, cr15, cr5, {3}
	cli_aux;
     d3c:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
     d40:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	00746e65 	rsbseq	r6, r4, r5, ror #28
     d48:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     d4c:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     d50:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	sti_aux;
     d54:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
}
     d58:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
     d5c:	64617663 	strbtvs	r7, [r1], #-1635	; 0xfffff99d
     d60:	00745f70 	rsbseq	r5, r4, r0, ror pc
void AONRTCIntHandler () {
     d64:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d68:	5f747365 	svcpl	0x00747365
     d6c:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     d70:	5f007265 	svcpl	0x00007265
		if (__pi_utims [0] == 0)
     d74:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     d78:	695f6261 	ldmdbvs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
		if (*(__pi_utims [0])) {
     d7c:	5f74696e 	svcpl	0x0074696e
     d80:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
			(*(__pi_utims [0]))--;
     d84:	725f6574 	subsvc	r6, pc, #116, 10	; 0x1d000000
		if (__pi_utims [1] == 0)
     d88:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
		if (*(__pi_utims [1])) {
     d8c:	656d5f64 	strbvs	r5, [sp, #-3940]!	; 0xfffff09c
			aux_timer_inactive = 0;
     d90:	67617373 			; <UNDEFINED> instruction: 0x67617373
			(*(__pi_utims [1]))--;
     d94:	5f5f0065 	svcpl	0x005f0065
		if (__pi_utims [2] == 0)
     d98:	616c7473 	smcvs	51011	; 0xc743
		if (*(__pi_utims [2])) {
     d9c:	6f645f62 	svcvs	0x00645f62
			(*(__pi_utims [2]))--;
     da0:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
		if (__pi_utims [3] != 0) {
     da4:	00657361 	rsbeq	r7, r5, r1, ror #6
			if (*(__pi_utims [3])) {
     da8:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
				aux_timer_inactive = 0;
     dac:	73657079 	cmnvc	r5, #121	; 0x79
				(*(__pi_utims [3]))--;
     db0:	735f5f00 	cmpvc	pc, #0, 30
	if (__pi_systat.ledsts) {
     db4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     db8:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		if (__pi_systat.ledblc++ == 0) {
     dbc:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     dc0:	5f315f65 	svcpl	0x00315f65
			if (__pi_systat.ledblk) {
     dc4:	61657263 	cmnvs	r5, r3, ror #4
     dc8:	5f006574 	svcpl	0x00006574
     dcc:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd0:	615f6261 	cmpvs	pc, r1, ror #4
     dd4:	665f6b73 			; <UNDEFINED> instruction: 0x665f6b73
				if (__pi_systat.ledsts & 0x2)
     dd8:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
     ddc:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     de0:	6f745f64 	svcvs	0x00745f64
				if (__pi_systat.ledsts & 0x4)
     de4:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
				__pi_systat.ledblk = 0;
     de8:	00657461 	rsbeq	r7, r5, r1, ror #8
     dec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d38 <tci_run_delay_timer+0x3c>
			if (__pi_systat.fstblk)
     df0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
     df4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
				__pi_systat.ledblc = 200;
     df8:	6f442f6e 	svcvs	0x00442f6e
	if (events & AON_RTC_EVFLAGS_CH0) {
     dfc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
		cli_tim;
     e00:	2f73746e 	svccs	0x0073746e
		__pi_new += setdel;
     e04:	48746947 	ldmdami	r4!, {r0, r1, r2, r6, r8, fp, sp, lr}^
     e08:	442f6275 	strtmi	r6, [pc], #-629	; e10 <AONRTCIntHandler+0xac>
		setdel = 0;
     e0c:	72747369 	rsbsvc	r7, r4, #-1543503871	; 0xa4000001
		RISE_N_SHINE;
     e10:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
		__pi_new += setdel;
     e14:	442d6465 	strtmi	r6, [sp], #-1125	; 0xfffffb9b
		RISE_N_SHINE;
     e18:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
     e1c:	6f727453 	svcvs	0x00727453
		aux_timer_inactive = 1;
     e20:	2d656761 	stclcs	7, cr6, [r5, #-388]!	; 0xfffffe7c
     e24:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
				if (__pi_systat.ledsts & 0x1)
     e28:	5f006d65 	svcpl	0x00006d65
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e2c:	5f66666f 	svcpl	0x0066666f
     e30:	65440074 	strbvs	r0, [r4, #-116]	; 0xffffff8c
				if (__pi_systat.ledsts & 0x2)
     e34:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     e38:	6f636552 	svcvs	0x00636552
     e3c:	654d6472 	strbvs	r6, [sp, #-1138]	; 0xfffffb8e
				if (__pi_systat.ledsts & 0x8)
     e40:	67617373 			; <UNDEFINED> instruction: 0x67617373
				__pi_systat.ledblk = 1;
     e44:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
     e48:	00667562 	rsbeq	r7, r6, r2, ror #10
		if (aux_timer_inactive) {
     e4c:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
			cli_aux;
     e50:	5f646573 	svcpl	0x00646573
     e54:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     e58:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     e5c:	63657073 	cmnvs	r5, #115	; 0x73
     e60:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
     e64:	6f6c5f64 	svcvs	0x006c5f64
     e68:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     e6c:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
     e70:	4843006f 	stmdami	r3, {r0, r1, r2, r3, r5, r6}^
     e74:	4543494f 	strbmi	r4, [r3, #-2383]	; 0xfffff6b1
word tci_update_delay_ticks (Boolean force) {
     e78:	6c665f00 	stclvs	15, cr5, [r6], #-0
	cli_tim;
     e7c:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
     e80:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
	if (setdel) {
     e84:	646f6e5f 	strbtvs	r6, [pc], #-3679	; e8c <tci_update_delay_ticks+0x14>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e88:	62645f65 	rsbvs	r5, r4, #404	; 0x194
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     e8c:	746e655f 	strbtvc	r6, [lr], #-1375	; 0xfffffaa1
     e90:	635f7972 	cmpvs	pc, #1867776	; 0x1c8000
     e94:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e98:	73695f00 	cmnvc	r9, #0, 30
				AON_RTC_O_CH0CMP)) - gettav ());
     e9c:	6178635f 	cmnvs	r8, pc, asr r3
	return NO;
     ea0:	61725f00 	cmnvs	r2, r0, lsl #30
			setdel = 0;
     ea4:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ea8:	00747865 	rsbseq	r7, r4, r5, ror #16
     eac:	6f6c5f5f 	svcvs	0x006c5f5f
}
     eb0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
		sti_tim;
     eb4:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
		return YES;
     eb8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
     ebc:	705f7473 	subsvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
     ec0:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
     ec4:	735f0074 	cmpvc	pc, #116	; 0x74
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ec8:	006b6565 	rsbeq	r6, fp, r5, ror #10
	UARTDisable (UART0_BASE);
     ecc:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ed0:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
	UARTDisable (UART0_BASE);
     ed4:	6f636552 	svcvs	0x00636552
	UARTConfigSetExpClk (UART0_BASE,
     ed8:	654d6472 	strbvs	r6, [sp, #-1138]	; 0xfffffb8e
     edc:	67617373 			; <UNDEFINED> instruction: 0x67617373
     ee0:	656e0065 	strbvs	r0, [lr, #-101]!	; 0xffffff9b
     ee4:	6e655f77 	mcrvs	15, 3, r5, cr5, cr7, {3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     ee8:	00797274 	rsbseq	r7, r9, r4, ror r2
     eec:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
     ef0:	00727265 	rsbseq	r7, r2, r5, ror #4
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     ef4:	616d6e5f 	cmnvs	sp, pc, asr lr
     ef8:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     efc:	62755f00 	rsbsvs	r5, r5, #0, 30
	urates [0] = rate;
     f00:	43006675 	movwmi	r6, #1653	; 0x675
}
     f04:	54414552 	strbpl	r4, [r1], #-1362	; 0xfffffaae
     f08:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xfffff0bb
     f0c:	44524f43 	ldrbmi	r4, [r2], #-3907	; 0xfffff0bd
     f10:	6c656400 	cfstrdvs	mvd6, [r5], #-0
     f14:	5f657465 	svcpl	0x00657465
     f18:	006c6c61 	rsbeq	r6, ip, r1, ror #24
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	70666665 	rsbvc	r6, r6, r5, ror #12
     f20:	6f006d64 	svcvs	0x00006d64
     f24:	72656e77 	rsbvc	r6, r5, #1904	; 0x770
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f28:	0064695f 	rsbeq	r6, r4, pc, asr r9
     f2c:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f30:	50470074 	subpl	r0, r7, r4, ror r0
     f34:	735f4f49 	cmpvc	pc, #292	; 0x124
	__pi_uart_setrate (urates [0], __pi_uart);
     f38:	754f7465 	strbvc	r7, [pc, #-1125]	; adb <root+0x493>
     f3c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     f40:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     f44:	6944656c 	stmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
     f48:	4f41006f 	svcmi	0x0041006f
     f4c:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     f50:	456e6f4d 	strbmi	r6, [lr, #-3917]!	; 0xfffff0b3
	switch (operation) {
     f54:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
static int ioreq_uart_a (int operation, char *buf, int len) {
     f58:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     f5c:	6f4d3233 	svcvs	0x004d3233
     f60:	5f006564 	svcpl	0x00006564
     f64:	5f69705f 	svcpl	0x0069705f
     f68:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
				*buf++ = uart_a_read;
     f6c:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
     f70:	6567006e 	strbvs	r0, [r7, #-110]!	; 0xffffff92
			while (len && uart_a_char_available) {
     f74:	76617474 			; <UNDEFINED> instruction: 0x76617474
     f78:	61727500 	cmnvs	r2, r0, lsl #10
     f7c:	00736574 	rsbseq	r6, r3, r4, ror r5
			if (len != operation) {
     f80:	6e655f5f 	mcrvs	15, 3, r5, cr5, cr15, {2}
}
     f84:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     f88:	7172695f 	cmnvc	r2, pc, asr r9
			uart_a_disable_int;
     f8c:	65687700 	strbvs	r7, [r8, #-1792]!	; 0xfffff900
			if (uart_a_char_available) {
     f90:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
				*buf++ = uart_a_read;
     f94:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
			uart_a_disable_int;
     f98:	75667469 	strbvc	r7, [r6, #-1129]!	; 0xfffffb97
     f9c:	00745f6e 	rsbseq	r5, r4, lr, ror #30
			if (uart_a_char_available) {
     fa0:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     fa4:	75414355 	strbvc	r4, [r1, #-853]	; 0xfffffcab
				uart_a_enable_int;
     fa8:	6b615778 	blvs	1856d90 <__ccfg+0x1836de8>
     fac:	45707565 	ldrbmi	r7, [r0, #-1381]!	; 0xfffffa9b
				goto Redo_rx;
     fb0:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fb4:	4e4f4100 	dvfmie	f4, f7, f0
     fb8:	50435557 	subpl	r5, r3, r7, asr r5
			return -2;
     fbc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     fc0:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
				uart_a_write (*buf);
     fc4:	65477375 	strbvs	r7, [r7, #-885]	; 0xfffffc8b
     fc8:	41550074 	cmpmi	r5, r4, ror r0
			while (len && uart_a_room_in_tx) {
     fcc:	6e495452 	mcrvs	4, 2, r5, cr9, cr2, {2}
     fd0:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
     fd4:	73007261 	movwvc	r7, #609	; 0x261
			if (len != operation) {
     fd8:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
			uart_a_disable_int;
     fdc:	6e695f6d 	cdpvs	15, 6, cr5, cr9, cr13, {3}
     fe0:	41007469 	tstmi	r0, r9, ror #8
			if (uart_a_room_in_tx) {
     fe4:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     fe8:	75685343 	strbvc	r5, [r8, #-835]!	; 0xfffffcbd
				uart_a_enable_int;
     fec:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
     ff0:	616e456e 	cmnvs	lr, lr, ror #10
				*buf++ = uart_a_read;
     ff4:	00656c62 	rsbeq	r6, r5, r2, ror #24
			if (uart_a_room_in_tx) {
     ff8:	64746573 	ldrbtvs	r6, [r4], #-1395	; 0xfffffa8d
				uart_a_write (*buf);
     ffc:	50006c65 	andpl	r6, r0, r5, ror #24
    1000:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1004:	6f507563 	svcvs	0x00507563
    1008:	4f726577 	svcmi	0x00726577
			uart_a_enable_int;
    100c:	5f006666 	svcpl	0x00006666
    1010:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1014:	50534d5f 	subspl	r4, r3, pc, asr sp
			return 0;
    1018:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
			if (len == UART_CNTRL_SETRATE) {
    101c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
				if (__pi_uart_setrate (*((word*)buf),
    1020:	5f00745f 	svcpl	0x0000745f
    1024:	5f69705f 	svcpl	0x0069705f
    1028:	6f646e6f 	svcvs	0x00646e6f
				syserror (EREQPAR, "uar");
    102c:	6e69616d 	powvsez	f6, f1, #5.0
			syserror (ENOOPER, "uai");
    1030:	52415500 	subpl	r5, r1, #0, 10
			if (len == UART_CNTRL_GETRATE) {
    1034:	46774854 			; <UNDEFINED> instruction: 0x46774854
				return 1;
    1038:	43776f6c 	cmnmi	r7, #108, 30	; 0x1b0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    103c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
			syserror (ENOOPER, "uai");
    1040:	69446c6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    1044:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1048:	5f5f0065 	svcpl	0x005f0065
    104c:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 6e4 <root+0x9c>
    1050:	5f747261 	svcpl	0x00747261
    1054:	72746567 	rsbsvc	r6, r4, #432013312	; 0x19c00000
    1058:	00657461 	rsbeq	r7, r5, r1, ror #8
    105c:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
    1060:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1064:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
void UART0IntHandler () {
    1068:	61736944 	cmnvs	r3, r4, asr #18
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    106c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1070:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1074:	654c7852 	strbvs	r7, [ip, #-2130]	; 0xfffff7ae
    1078:	006c6576 	rsbeq	r6, ip, r6, ror r5
    107c:	6f646552 	svcvs	0x00646552
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    1080:	0078725f 	rsbseq	r7, r8, pc, asr r2
    1084:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		RISE_N_SHINE;
    1088:	654c7854 	strbvs	r7, [ip, #-2132]	; 0xfffff7ac
    108c:	006c6576 	rsbeq	r6, ip, r6, ror r5
		i_trigger (devevent (UART_A, READ));
    1090:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    1094:	436c7274 	cmnmi	ip, #116, 4	; 0x40000007
    1098:	6b636f6c 	blvs	18dce50 <__ccfg+0x18bcea8>
    109c:	00746547 	rsbseq	r6, r4, r7, asr #10
    10a0:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    10a4:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    10a8:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
    10ac:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    10b0:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
    10b4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    10b8:	43525000 	cmpmi	r2, #0
    10bc:	616f4c4d 	cmnvs	pc, sp, asr #24
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10c0:	74655364 	strbtvc	r5, [r5], #-868	; 0xfffffc9c
    10c4:	33697500 	cmncc	r9, #0, 10
    10c8:	616e4532 	cmnvs	lr, r2, lsr r5
		i_trigger (devevent (UART_A, WRITE));
    10cc:	00656c62 	rsbeq	r6, r5, r2, ror #24
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    10d0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
    10d4:	755f656c 	ldrbvc	r6, [pc, #-1388]	; b70 <root+0x528>
		RISE_N_SHINE;
    10d8:	5f747261 	svcpl	0x00747261
    10dc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    10e0:	70757272 	rsbsvc	r7, r5, r2, ror r2
		i_trigger (devevent (UART_A, WRITE));
    10e4:	55007374 	strpl	r7, [r0, #-884]	; 0xfffffc8c
    10e8:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
    10ec:	454f4649 	strbmi	r4, [pc, #-1609]	; aab <root+0x463>
    10f0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    10f4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    10f8:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
    10fc:	616c4674 	smcvs	50276	; 0xc464
    1100:	64007367 	strvs	r7, [r0], #-871	; 0xfffffc99
    1104:	754e6f69 	strbvc	r6, [lr, #-3945]	; 0xfffff097
    1108:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    110c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
    1110:	61755f69 	cmnvs	r5, r9, ror #30
    1114:	735f7472 	cmpvc	pc, #1912602624	; 0x72000000
    1118:	61727465 	cmnvs	r2, r5, ror #8
    111c:	50006574 	andpl	r6, r0, r4, ror r5
    1120:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
void __buttons_setirq (int val) {
    1124:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1128:	72464f49 	subvc	r4, r6, #292	; 0x124
    112c:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1130:	61736944 	cmnvs	r3, r4, asr #18
    1134:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1138:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
		bn = BUTTON_GPIO (__button_list [i]);
    113c:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1140:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
    1144:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1148:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    114c:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1150:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
    1154:	776f7074 			; <UNDEFINED> instruction: 0x776f7074
}
    1158:	6f6d7265 	svcvs	0x006d7265
    115c:	6f006564 	svcvs	0x00006564
    1160:	61726570 	cmnvs	r2, r0, ror r5
    1164:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
void __pinlist_setirq (int val) {
    1168:	78756100 	ldmdavc	r5!, {r8, sp, lr}^
	for (i = 0; i < N_PINLIST; i++) {
    116c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1170:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	7463616e 	strbtvc	r6, [r3], #-366	; 0xfffffe92
	for (i = 0; i < N_PINLIST; i++) {
    1178:	00657669 	rsbeq	r7, r5, r9, ror #12
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    117c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    1180:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1184:	52007366 	andpl	r7, r0, #-1744830463	; 0x98000001
    1188:	5f6f6465 	svcpl	0x006f6465
    118c:	75007874 	strvc	r7, [r0, #-2164]	; 0xfffff78c
	for (i = 0; i < N_PINLIST; i++) {
    1190:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
}
    1194:	6156636e 	cmpvs	r6, lr, ror #6
    1198:	0065756c 	rsbeq	r7, r5, ip, ror #10
    119c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    11a0:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
void GPIOIntHandler () {
    11a4:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 11ac <GPIOIntHandler+0x8>
if (buttons_int) {
    11a8:	66775f6f 	ldrbtvs	r5, [r7], -pc, ror #30
    11ac:	73615f69 	cmnvc	r1, #420	; 0x1a4
	buttons_disable ();
    11b0:	65656e5f 	strbvs	r6, [r5, #-3679]!	; 0xfffff1a1
    11b4:	00646564 	rsbeq	r6, r4, r4, ror #10
	i_trigger ((aword)&__button_list);
    11b8:	524e4f41 	subpl	r4, lr, #260	; 0x104
    11bc:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
    11c0:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
    11c4:	68436575 	stmdavs	r3, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
    11c8:	74655332 	strbtvc	r5, [r5], #-818	; 0xfffffcce
    11cc:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    11d0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    11d4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    11d8:	4f410074 	svcmi	0x00410074
    11dc:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
    11e0:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
	RISE_N_SHINE;
    11e4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11e8:	70007265 	andvc	r7, r0, r5, ror #4
    11ec:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
if (pin_sensor_int) {
    11f0:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
    11f4:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
	i_trigger ((aword)(&__input_pins));
    11f8:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    11fc:	745f7961 	ldrbvc	r7, [pc], #-2401	; 1204 <GPIOIntHandler+0x60>
    1200:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1204:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1208:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
    120c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    1210:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    1214:	70006f64 	andvc	r6, r0, r4, ror #30
    1218:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
    121c:	755f7469 	ldrbvc	r7, [pc, #-1129]	; dbb <AONRTCIntHandler+0x57>
    1220:	00747261 	rsbseq	r7, r4, r1, ror #4
	__pinsen_disable_and_clear;
    1224:	63726f66 	cmnvs	r2, #408	; 0x198
	RISE_N_SHINE;
    1228:	41550065 	cmpmi	r5, r5, rrx
    122c:	6e455452 	mcrvs	4, 2, r5, cr5, cr2, {2}
    1230:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
}
    1234:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1238:	6c635f4f 	stclvs	15, cr5, [r3], #-316	; 0xfffffec4
    123c:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0xfffffe9b
    1240:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1244:	006f6944 	rsbeq	r6, pc, r4, asr #18
void system_init () {
    1248:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    124c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1250:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1254:	71726974 	cmnvc	r2, r4, ror r9
    1258:	65646d00 	strbvs	r6, [r4, #-3328]!	; 0xfffff300
    125c:	0079616c 	rsbseq	r6, r9, ip, ror #2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1260:	69645f5f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1264:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1268:	72695f65 	rsbvc	r5, r9, #404	; 0x194
    126c:	682f0071 	stmdavs	pc!, {r0, r4, r5, r6}	; <UNPREDICTABLE>
    1270:	2f656d6f 	svccs	0x00656d6f
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1274:	70657473 	rsbvc	r7, r5, r3, ror r4
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1278:	2f6e6568 	svccs	0x006e6568
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    127c:	6b736544 	blvs	1cda794 <__ccfg+0x1cba7ec>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1280:	2f706f74 	svccs	0x00706f74
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1284:	4f534c4f 	svcmi	0x00534c4f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1288:	2f54454e 	svccs	0x0054454e
		pin = (port_confs [i] >> 19) & 0x1f;
    128c:	4f434950 	svcmi	0x00434950
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1290:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		pin = (port_confs [i] >> 19) & 0x1f;
    1294:	2f534f63 	svccs	0x00534f63
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1298:	33314343 	teqcc	r1, #201326593	; 0xc000001
    129c:	6d2f5858 	stcvs	8, cr5, [pc, #-352]!	; 1144 <__buttons_setirq+0x20>
    12a0:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
    12a4:	50470063 	subpl	r0, r7, r3, rrx
		if (port_confs [i] & 0x80)
    12a8:	635f4f49 	cmpvs	pc, #292	; 0x124
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    12b0:	006f6944 	rsbeq	r6, pc, r4, asr #18
		if (port_confs [i] & 0x40)
    12b4:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12b8:	416c7274 	smcmi	50980	; 0xc724
    12bc:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12c0:	5f00636e 	svcpl	0x0000636e
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	5f69705f 	svcpl	0x0069705f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12c8:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
	all_leds_blink;
    12cc:	6572666b 	ldrbvs	r6, [r2, #-1643]!	; 0xfffff995
    12d0:	63740065 	cmnvs	r4, #101	; 0x65
    12d4:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
    12d8:	75615f6e 	strbvc	r5, [r1, #-3950]!	; 0xfffff092
    12dc:	696c6978 	stmdbvs	ip!, {r3, r4, r5, r6, r8, fp, sp, lr}^
    12e0:	5f797261 	svcpl	0x00797261
    12e4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12e8:	5f5f0072 	svcpl	0x005f0072
    12ec:	6c6e6970 			; <UNDEFINED> instruction: 0x6c6e6970
    12f0:	5f747369 	svcpl	0x00747369
    12f4:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    12f8:	47007172 	smlsdxmi	r0, r2, r1, r7
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    12fc:	494f4950 	stmdbmi	pc, {r4, r6, r8, fp, lr}^	; <UNPREDICTABLE>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1300:	6148746e 	cmpvs	r8, lr, ror #8
    1304:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
	IntEnable (INT_AON_RTC_COMB);
    1308:	6f420072 	svcvs	0x00420072
    130c:	61656c6f 	cmnvs	r5, pc, ror #24
    1310:	4155006e 	cmpmi	r5, lr, rrx
	__pi_malloc_init ();
    1314:	49465452 	stmdbmi	r6, {r1, r4, r6, sl, ip, lr}^
	IntEnable (INT_AON_GPIO_EDGE);
    1318:	654c4f46 	strbvs	r4, [ip, #-3910]	; 0xfffff0ba
    131c:	536c6576 	cmnpl	ip, #494927872	; 0x1d800000
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1320:	53007465 	movwpl	r7, #1125	; 0x465
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1324:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    1328:	79536c72 	ldmdbvc	r3, {r1, r4, r5, r6, sl, fp, sp, lr}^
    132c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1330:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1334:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1338:	76617474 			; <UNDEFINED> instruction: 0x76617474
    133c:	65766500 	ldrbvs	r6, [r6, #-1280]!	; 0xfffffb00
    1340:	0073746e 	rsbseq	r7, r3, lr, ror #8
	urates [0] = UART_RATE / 100;
    1344:	6c656475 	cfstrdvs	mvd6, [r5], #-468	; 0xfffffe2c
    1348:	41007961 	tstmi	r0, r1, ror #18
	reinit_uart ();
    134c:	61424e4f 	cmpvs	r2, pc, asr #28
	EXTRA_INITIALIZERS;
    1350:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
    1354:	61736944 	cmnvs	r3, r4, asr #18
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1358:	00656c62 	rsbeq	r6, r5, r2, ror #24
    135c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1360:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1364:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
    1368:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    136c:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
    1370:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
			devinit [i] . init (devinit [i] . param);
    1374:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1378:	4100656c 	tstmi	r0, ip, ror #10
    137c:	61424e4f 	cmpvs	r2, pc, asr #28
    1380:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
	IntEnable (INT_UART0_COMB);
    1384:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
    1388:	56797265 	ldrbtpl	r7, [r9], -r5, ror #4
}
    138c:	61746c6f 	cmnvs	r4, pc, ror #24
	tci_run_auxiliary_timer ();
    1390:	65476567 	strbvs	r6, [r7, #-1383]	; 0xfffffa99
		diag ("");
    1394:	6f690074 	svcvs	0x00690074
    1398:	5f716572 	svcpl	0x00716572
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    139c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13a0:	5f00615f 	svcpl	0x0000615f
		diag ("Leftover RAM: %d bytes",
    13a4:	5f69705f 	svcpl	0x0069705f
    13a8:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    13ac:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
    13b0:	4700746e 	strmi	r7, [r0, -lr, ror #8]
    13b4:	5f4f4950 	svcpl	0x004f4950
    13b8:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
    13bc:	64006f69 	strvs	r6, [r0], #-3945	; 0xfffff097
    13c0:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
    13c4:	5f007469 	svcpl	0x00007469
    13c8:	5f69705f 	svcpl	0x0069705f
    13cc:	65737973 	ldrbvs	r7, [r3, #-2419]!	; 0xfffff68d
    13d0:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    13d4:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    13d8:	006d756e 	rsbeq	r7, sp, lr, ror #10
    13dc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    13e0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    13e4:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
    13e8:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
    13ec:	55007972 	strpl	r7, [r0, #-2418]	; 0xfffff68e
    13f0:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
    13f4:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
    13f8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    13fc:	43525000 	cmpmi	r2, #0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1400:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
    1404:	6f646c55 	svcvs	0x00646c55
    1408:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    140c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1410:	756f0065 	strbvc	r0, [pc, #-101]!	; 13b3 <system_init+0x16b>
    1414:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1418:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    141c:	6156656c 	cmpvs	r6, ip, ror #10
}
    1420:	0065756c 	rsbeq	r7, r5, ip, ror #10
__attribute__ ((noreturn)) void __pi_release () {
    1424:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
    1428:	706f7400 	rsbvc	r7, pc, r0, lsl #8
    142c:	614d664f 	cmpvs	sp, pc, asr #12
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1430:	74536e69 	ldrbvc	r6, [r3], #-3689	; 0xfffff197
	check_stack_overflow;
    1434:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1438:	6564675f 	strbvs	r6, [r4, #-1887]!	; 0xfffff8a1
    143c:	0079616c 	rsbseq	r6, r9, ip, ror #2
	update_n_wake (MAX_WORD, NO);
    1440:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    1444:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
    1448:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
	for_all_tasks (__pi_curr) {
    144c:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1450:	70656544 	rsbvc	r6, r5, r4, asr #10
    1454:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
  __ASM volatile ("cpsid i" : : : "memory");
    1458:	6f700070 	svcvs	0x00700070
	__SLEEP;
    145c:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
    1460:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1464:	63740067 	cmnvs	r4, #103	; 0x67
    1468:	70755f69 	rsbsvc	r5, r5, r9, ror #30
	system_event_count ++;
    146c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    1470:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
	switch (__pi_systat.effpdm) {
    1474:	745f7961 	ldrbvc	r7, [pc], #-2401	; 147c <__pi_release+0x58>
    1478:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
    147c:	61654d00 	cmnvs	r5, r0, lsl #26
    1480:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
			__WFI ();
    1484:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    1488:	66716572 			; <UNDEFINED> instruction: 0x66716572
    148c:	745f6e75 	ldrbvc	r6, [pc], #-3701	; 1494 <__pi_release+0x70>
	check_stack_overflow;
    1490:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
    1494:	0076656c 	rsbseq	r6, r6, ip, ror #10
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1498:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    149c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
			(__pi_curr->code) (tstate (__pi_curr));
    14a0:	00797063 	rsbseq	r7, r9, r3, rrx
			goto Redo;
    14a4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	for_all_tasks (__pi_curr) {
    14a8:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14ac:	00636f6c 	rsbeq	r6, r3, ip, ror #30
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14b0:	61776e75 	cmnvs	r7, r5, ror lr
    14b4:	71007469 	tstvc	r0, r9, ror #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14b8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    14bc:	726f6900 	rsbvc	r6, pc, #0, 18
    14c0:	5f007165 	svcpl	0x00007165
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14c4:	5f69705f 	svcpl	0x0069705f
    14c8:	6b726f66 	blvs	1c9d268 <__ccfg+0x1c7d2c0>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14cc:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
    14d0:	706d006c 	rsbvc	r0, sp, ip, rrx
			__WFI ();
    14d4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14d8:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
    14dc:	5f72656d 	svcpl	0x0072656d
}
    14e0:	00646461 	rsbeq	r6, r4, r1, ror #8
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14e4:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    14e8:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14ec:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    14f0:	616d5f69 	cmnvs	sp, r9, ror #30
			PRCMPowerDomainOff (__pi_systat.ondmns |
    14f4:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    14f8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    14fc:	5f5f0074 	svcpl	0x005f0074
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1500:	745f6970 	ldrbvc	r6, [pc], #-2416	; 1508 <__pi_release+0xe4>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1504:	67676972 			; <UNDEFINED> instruction: 0x67676972
    1508:	5f007265 	svcpl	0x00007265
    150c:	5f69705f 	svcpl	0x0069705f
    1510:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1514:	5f006e65 	svcpl	0x00006e65
    1518:	5f69705f 	svcpl	0x0069705f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    151c:	6678616d 	ldrbtvs	r6, [r8], -sp, ror #2
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1520:	00656572 	rsbeq	r6, r5, r2, ror r5
    1524:	6e757263 	cdpvs	2, 7, cr7, cr5, cr3, {3}
    1528:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    152c:	68636e00 	stmdavs	r3!, {r9, sl, fp, sp, lr}^
    1530:	6e6d006b 	cdpvs	0, 6, cr0, cr13, cr11, {3}
			SysCtrlSetRechargeBeforePowerDown
    1534:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1538:	6f727000 	svcvs	0x00727000
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    153c:	64656563 	strbtvs	r6, [r5], #-1379	; 0xfffffa9d
    1540:	656c6d00 	strbvs	r6, [ip, #-3328]!	; 0xfffff300
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	5f5f006e 	svcpl	0x005f006e
    1548:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    154c:	67697274 			; <UNDEFINED> instruction: 0x67697274
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1550:	00726567 	rsbseq	r6, r2, r7, ror #10
    1554:	64646461 	strbtvs	r6, [r4], #-1121	; 0xfffffb9f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1558:	75667665 	strbvc	r7, [r6, #-1637]!	; 0xfffff99b
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    155c:	7000636e 	andvc	r6, r0, lr, ror #6
    1560:	65766469 	ldrbvs	r6, [r6, #-1129]!	; 0xfffffb97
    1564:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1568:	5f006761 	svcpl	0x00006761
			while (!(AONWUCPowerStatusGet () &
    156c:	5f69705f 	svcpl	0x0069705f
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1570:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    1574:	6d007461 	cfstrsvs	mvf7, [r0, #-388]	; 0xfffffe7c
    1578:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    157c:	00745f74 	rsbseq	r5, r4, r4, ror pc
    1580:	7266636d 	rsbvc	r6, r6, #-1275068415	; 0xb4000001
    1584:	77006565 	strvc	r6, [r0, -r5, ror #10]
    1588:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    158c:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
    1590:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1594:	00747365 	rsbseq	r7, r4, r5, ror #6
    1598:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
			SysCtrlAdjustRechargeAfterPowerDown ();
    159c:	6f682f00 	svcvs	0x00682f00
			reinit_uart ();
    15a0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    15a4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    15a8:	442f6e65 	strtmi	r6, [pc], #-3685	; 15b0 <__pi_release+0x18c>
}
    15ac:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15b0:	4f2f706f 	svcmi	0x002f706f
    15b4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15b8:	502f5445 	eorpl	r5, pc, r5, asr #8
    15bc:	534f4349 	movtpl	r4, #62281	; 0xf349
    15c0:	6369502f 	cmnvs	r9, #47	; 0x2f
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15c4:	6b2f534f 	blvs	bd6308 <__ccfg+0xbb6360>
    15c8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    15cc:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15d0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    15d4:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    15d8:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    15dc:	5f5f0074 	svcpl	0x005f0074
    15e0:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    15e4:	74736461 	ldrbtvc	r6, [r3], #-1121	; 0xfffffb9f
    15e8:	00657461 	rsbeq	r7, r5, r1, ror #8
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15ec:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    15f0:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    15f4:	5f5f0074 	svcpl	0x005f0074
    15f8:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
			PRCMPowerDomainOff (
    15fc:	6d746961 			; <UNDEFINED> instruction: 0x6d746961
    1600:	6c006d65 	stcvs	13, cr6, [r0], {101}	; 0x65
	__SLEEP;
    1604:	00646e72 	rsbeq	r6, r4, r2, ror lr
    1608:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  __ASM volatile ("cpsie i" : : : "memory");
    160c:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
	goto Redo;
    1610:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    1614:	75686300 	strbvc	r6, [r8, #-768]!	; 0xfffffd00
    1618:	75006b6e 	strvc	r6, [r0, #-2926]	; 0xfffff492
    161c:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
    1620:	5f6e5f65 	svcpl	0x006e5f65
    1624:	656b6177 	strbvs	r6, [fp, #-375]!	; 0xfffffe89
    1628:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    162c:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xfffff097
    1630:	67006465 	strvs	r6, [r0, -r5, ror #8]
    1634:	6f637465 	svcvs	0x00637465
    1638:	64006564 	strvs	r6, [r0], #-1380	; 0xfffffa9c
    163c:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
    1640:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1644:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
    1648:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    164c:	6f676400 	svcvs	0x00676400
    1650:	5f007475 	svcpl	0x00007475
    1654:	5f69705f 	svcpl	0x0069705f
    1658:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
    165c:	735f7265 	cmpvc	pc, #1342177286	; 0x50000006
    1660:	77007465 	strvc	r7, [r0, -r5, ror #8]
    1664:	006e7566 	rsbeq	r7, lr, r6, ror #10
    1668:	6961666e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^
    166c:	5f5f006c 	svcpl	0x005f006c
    1670:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
    1674:	00656572 	rsbeq	r6, r5, r2, ror r5
    1678:	535f4944 	cmppl	pc, #68, 18	; 0x110000
	cli_tim;
    167c:	5f004749 	svcpl	0x00004749
    1680:	5f69705f 	svcpl	0x0069705f
    1684:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
	diag ("PicOS halted");
    1688:	6b007465 	blvs	1e824 <__exidx_end+0x18c24>
	mdelay (500);
    168c:	616c6c69 	cmnvs	ip, r9, ror #24
    1690:	5f006c6c 	svcpl	0x00006c6c
	setpowermode (2);
    1694:	5f69705f 	svcpl	0x0069705f
	__PCB = NULL;
    1698:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
	release;
    169c:	00797063 	rsbseq	r7, r9, r3, rrx
    16a0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    16a4:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
    16a8:	7475006e 	ldrbtvc	r0, [r5], #-110	; 0xffffff92
int main (void) {
    16ac:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16b0:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
    16b4:	00657465 	rsbeq	r7, r5, r5, ror #8
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16b8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16bc:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
	system_init ();
    16c0:	7461636e 	strbtvc	r6, [r1], #-878	; 0xfffffc92
	tcv_init ();
    16c4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16c8:	6973715f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
    16cc:	7000657a 	andvc	r6, r0, sl, ror r5
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    16d0:	00766572 	rsbseq	r6, r6, r2, ror r5
    16d4:	63745f5f 	cmnvs	r4, #380	; 0x17c
    16d8:	61625f76 	smcvs	9718	; 0x25f6
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    16dc:	5f727474 	svcpl	0x00727474
    16e0:	63740074 	cmnvs	r4, #116	; 0x74
	delay (16, 0);
    16e4:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    16e8:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
    16ec:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__pi_release ();
    16f0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    16f4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 152c <__pi_release+0x108>
    16f8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    16fc:	6165725f 	cmnvs	r5, pc, asr r2
    1700:	63740064 	cmnvs	r4, #100	; 0x64
    1704:	645f7076 	ldrbvs	r7, [pc], #-118	; 170c <killev>
    1708:	6f707369 	svcvs	0x00707369
static void killev (__pi_pcb_t *pid) {
    170c:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
	wfun = (aword)(pid->code);
    1710:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	for_all_tasks (i) {
    1714:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
		for (j = 0; j < nevents (i); j++) {
    1718:	74630067 	strbtvc	r0, [r3], #-103	; 0xffffff99
    171c:	75666c72 	strbvc	r6, [r6, #-3186]!	; 0xfffff38e
    1720:	00745f6e 	rsbseq	r5, r4, lr, ror #30
			    || i->Events [j] . Event == wfun
    1724:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1670 <__pi_release+0x24c>
		for (j = 0; j < nevents (i); j++) {
    1728:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
			if (i->Events [j] . Event == (aword)pid
    172c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1730:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1734:	6f746b73 	svcvs	0x00746b73
				wakeupev (i, j);
    1738:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    173c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	for_all_tasks (i) {
    1740:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
}
    1744:	2f534f43 	svccs	0x00534f43
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1748:	4f636950 	svcmi	0x00636950
static void qfree (aword *ch) {
    174c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1750:	2f736269 	svccs	0x00736269
	cc = (aword*)(mpools + MA_NP);
    1754:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
	m_setnextp (ch, chunk);
    1758:	63742f49 	cmnvs	r4, #292	; 0x124
	m_setnextp (cc, ch);
    175c:	00632e76 	rsbeq	r2, r3, r6, ror lr
}
    1760:	70766374 	rsbsvc	r6, r6, r4, ror r3
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1764:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
    1768:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
    176c:	6f5f7663 	svcvs	0x005f7663
			m_setnextp (cc, m_nextp (chunk));
    1770:	006e6570 	rsbeq	r6, lr, r0, ror r5
			m_size (chunk) += m_hdrlen + m_size (ch);
    1774:	5f766374 	svcpl	0x00766374
    1778:	706f7264 	rsbvc	r7, pc, r4, ror #4
    177c:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
    1780:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1788:	00797470 	rsbseq	r7, r9, r0, ror r4
    178c:	70766374 	rsbsvc	r6, r6, r4, ror r3
    1790:	655f7968 	ldrbvs	r7, [pc, #-2408]	; e30 <AONRTCIntHandler+0xcc>
			m_setnextp (cc, m_nextp (chunk));
    1794:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
			m_size (ch) += m_hdrlen + m_size (chunk);
    1798:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    179c:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
    17a0:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
    17a4:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
    17a8:	73657565 	cmnvc	r5, #423624704	; 0x19400000
    17ac:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 17b4 <qfree+0x6c>
			if (m_size (chunk) >= m_size (ch))
    17b0:	715f7663 	cmpvc	pc, r3, ror #12
    17b4:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    17b8:	5f00735f 	svcpl	0x0000735f
		chunk = m_nextp (chunk))
    17bc:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    17c0:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
    17c4:	745f6d65 	ldrbvc	r6, [pc], #-3429	; 17cc <dgout+0x4>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17c8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 17d0 <dgout+0x8>
	diag_wait (a);
    17cc:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	diag_wchar (c, a);
    17d0:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    17d4:	00745f6b 	rsbseq	r5, r4, fp, ror #30
}
    17d8:	70747461 	rsbsvc	r7, r4, r1, ror #8
    17dc:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
	syserror (ESTATE, "state");
    17e0:	00746e65 	rsbseq	r6, r4, r5, ror #28
    17e4:	725f7245 	subsvc	r7, pc, #1342177284	; 0x50000004
    17e8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    17ec:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
	for (i = 0; i < MAX_UTIMERS; i++)
    17f0:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
void utimer_add (address ut) {
    17f4:	63740073 	cmnvs	r4, #115	; 0x73
    17f8:	72655f76 	rsbvc	r5, r5, #472	; 0x1d8
		if (__pi_utims [i] == NULL)
    17fc:	00657361 	rsbeq	r7, r5, r1, ror #6
	for (i = 0; i < MAX_UTIMERS; i++)
    1800:	5f766374 	svcpl	0x00766374
    1804:	70646e65 	rsbvc	r6, r4, r5, ror #28
		syserror (ERESOURCE, "ut a");
    1808:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__pi_utims [i] = ut;
    180c:	656e5f70 	strbvs	r5, [lr, #-3952]!	; 0xfffff090
}
    1810:	71720077 	cmnvc	r2, r7, ror r0
    1814:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    1818:	72747000 	rsbsvc	r7, r4, #0
	*t = v;
    181c:	6f700073 	svcvs	0x00700073
	TCI_RUN_AUXILIARY_TIMER;
    1820:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
void update_n_wake (word min, Boolean force) {
    1824:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
	if (TCI_UPDATE_DELAY_TICKS (force))
    1828:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
    182c:	0073706e 	rsbseq	r7, r3, lr, rrx
    1830:	5f766374 	svcpl	0x00766374
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1834:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1838:	63740065 	cmnvs	r4, #101	; 0x65
    183c:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
    1840:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1844:	63745f5f 	cmnvs	r4, #380	; 0x17c
    1848:	65735f76 	ldrbvs	r5, [r3, #-3958]!	; 0xfffff08a
    184c:	73656473 	cmnvc	r5, #1929379840	; 0x73000000
    1850:	00745f63 	rsbseq	r5, r4, r3, ror #30
    1854:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    1858:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
    185c:	61636973 	smcvs	13971	; 0x3693
    1860:	7571006c 	ldrbvc	r0, [r1, #-108]!	; 0xffffff94
    1864:	64657565 	strbtvs	r7, [r5], #-1381	; 0xfffffa9b
		for_all_tasks (i) {
    1868:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__pi_mintk = znew + min;
    186c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1870:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
			if (!twaiting (i))
    1874:	6f697373 	svcvs	0x00697373
    1878:	6374006e 	cmnvs	r4, #110	; 0x6e
			if (twakecnd (__pi_old, znew, i->Timer)) {
    187c:	635f7076 	cmpvs	pc, #118	; 0x76
    1880:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
    1884:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1888:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
    188c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    1890:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
    1894:	63740064 	cmnvs	r4, #100	; 0x64
    1898:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    189c:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
    18a0:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    18a4:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
    18a8:	006e7265 	rsbeq	r7, lr, r5, ror #4
				wakeuptm (i);
    18ac:	5f766374 	svcpl	0x00766374
    18b0:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
		for_all_tasks (i) {
    18b4:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
				d = i->Timer - znew;
    18b8:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
    18bc:	00736574 	rsbseq	r6, r3, r4, ror r5
    18c0:	63745f5f 	cmnvs	r4, #380	; 0x17c
		if ((word)(__pi_mintk - znew) < min) 
    18c4:	68715f76 	ldmdavs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    18c8:	5f646165 	svcpl	0x00646165
    18cc:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
	__pi_old = znew;
    18d0:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
}
    18d4:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
	TCI_RUN_DELAY_TIMER;
    18d8:	00687467 	rsbeq	r7, r8, r7, ror #8
}
    18dc:	70736964 	rsbsvc	r6, r3, r4, ror #18
    18e0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    18e4:	706e725f 	rsbvc	r7, lr, pc, asr r2
    18e8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    18ec:	5f796870 	svcpl	0x00796870
void proceed (word state) {
    18f0:	00766372 	rsbseq	r6, r6, r2, ror r3
	prcdstate (__pi_curr, state);
    18f4:	65757162 	ldrbvs	r7, [r5, #-354]!	; 0xfffffe9e
    18f8:	70006575 	andvc	r6, r0, r5, ror r5
	release;
    18fc:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    1900:	5f00736e 	svcpl	0x0000736e
void __pi_wait (aword event, word state) {
    1904:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	sint j = nevents (__pi_curr);
    1908:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
	if (j >= MAX_EVENTS_PER_TASK)
    190c:	5f6b636f 	svcpl	0x006b636f
    1910:	756f0073 	strbvc	r0, [pc, #-115]!	; 18a5 <update_n_wake+0x81>
    1914:	696f6774 	stmdbvs	pc!, {r2, r4, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
		syserror (ENEVENTS, "sw");
    1918:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
    191c:	5f707663 	svcpl	0x00707663
	setestate (__pi_curr->Events [j], state, event);
    1920:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
	incwait (__pi_curr);
    1924:	006c6f72 	rsbeq	r6, ip, r2, ror pc
	setestate (__pi_curr->Events [j], state, event);
    1928:	7473655f 	ldrbtvc	r6, [r3], #-1375	; 0xfffffaa1
}
    192c:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1930:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    1934:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
void __pi_trigger (aword event) {
    1938:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
	for_all_tasks (i) {
    193c:	5349746c 	movtpl	r7, #37996	; 0x946c
		for (j = 0; j < nevents (i); j++) {
    1940:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
    1944:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1948:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
    194c:	61485253 	cmpvs	r8, r3, asr r2
			if (i->Events [j] . Event == event) {
    1950:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1954:	655f0072 	ldrbvs	r0, [pc, #-114]	; 18ea <update_n_wake+0xc6>
    1958:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
				wakeupev (i, j);
    195c:	62655f00 	rsbvs	r5, r5, #0, 30
    1960:	2f007373 	svccs	0x00007373
	for_all_tasks (i) {
    1964:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
}
    1968:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
aword __pi_join (aword pid, word st) {
    196c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	for_all_tasks (i) {
    1970:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1974:	706f746b 	rsbvc	r7, pc, fp, ror #8
	return 0;
    1978:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		if ((aword)i == pid) {
    197c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			__pi_wait (pid, st);
    1980:	4349502f 	movtmi	r5, #36911	; 0x902f
}
    1984:	502f534f 	eorpl	r5, pc, pc, asr #6
	for_all_tasks (i) {
    1988:	534f6369 	movtpl	r6, #62313	; 0xf369
    198c:	3143432f 	cmpcc	r3, pc, lsr #6
void delay (word d, word state) {
    1990:	2f585833 	svccs	0x00585833
	settstate (__pi_curr, state);
    1994:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    1998:	5f707574 	svcpl	0x00707574
    199c:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    19a0:	625f0063 	subsvs	r0, pc, #99	; 0x63
	update_n_wake (d, YES);
    19a4:	5f007373 	svcpl	0x00007373
    19a8:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
	__pi_curr->Timer = __pi_old + d;
    19ac:	6e490061 	cdpvs	0, 4, cr0, cr9, cr1, {3}
    19b0:	66654474 			; <UNDEFINED> instruction: 0x66654474
	inctimer (__pi_curr);
    19b4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    19b8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    19bc:	0072656c 	rsbseq	r6, r2, ip, ror #10
}
    19c0:	66705f67 	ldrbtvs	r5, [r0], -r7, ror #30
    19c4:	6365566e 	cmnvs	r5, #115343360	; 0x6e00000
	if (fun == NULL)
    19c8:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
		return (int) __pi_curr;
    19cc:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
    19d0:	65443233 	strbvs	r3, [r4, #-563]	; 0xfffffdcd
	for_all_tasks (i)
    19d4:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
}
    19d8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
		if (i->code == fun)
    19dc:	00525349 	subseq	r5, r2, r9, asr #6
	for_all_tasks (i)
    19e0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    19e4:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    19e8:	4f4c5f54 	svcmi	0x004c5f54
int __pi_strlen (const char *s) {
    19ec:	305f4441 	subscc	r4, pc, r1, asr #8
	for (i = 0; *(s+i) != '\0'; i++);
    19f0:	46434300 	strbmi	r4, [r3], -r0, lsl #6
}
    19f4:	4f565f47 	svcmi	0x00565f47
	for (i = 0; *(s+i) != '\0'; i++);
    19f8:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
	while ((Boolean)(*d++ = *s++));
    19fc:	5f44414f 	svcpl	0x0044414f
    1a00:	43430031 	movtmi	r0, #12337	; 0x3031
    1a04:	425f4746 	subsmi	r4, pc, #18350080	; 0x1180000
}
    1a08:	4f435f4c 	svcmi	0x00435f4c
	while (n-- && (*s != '\0'))
    1a0c:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    1a10:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	*d = '\0';
    1a14:	54525f47 	ldrbpl	r5, [r2], #-3911	; 0xfffff0b9
	while (n-- && (*s != '\0'))
    1a18:	464f5f43 	strbmi	r5, [pc], -r3, asr #30
    1a1c:	54455346 	strbpl	r5, [r5], #-838	; 0xfffffcba
		*d++ = *s++;
    1a20:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1a24:	4f4d5f47 	svcmi	0x004d5f47
	while (n--)
    1a28:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
    1a2c:	00464e4f 	subeq	r4, r6, pc, asr #28
		*dest++ = *src++;
    1a30:	63635f5f 	cmnvs	r3, #380	; 0x17c
    1a34:	43006766 	movwmi	r6, #1894	; 0x766
    1a38:	5f474643 	svcpl	0x00474643
	while (n--)
    1a3c:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
}
    1a40:	444e415f 	strbmi	r4, [lr], #-351	; 0xfffffea1
		*dest++ = c;
    1a44:	5349445f 	movtpl	r4, #37983	; 0x945f
void adddevfunc (devreqfun_t rf, int loc) {
    1a48:	414c465f 	cmpmi	ip, pc, asr r6
		syserror (EREQPAR, "addv");
    1a4c:	43005347 	movwmi	r5, #839	; 0x347
		syserror (ERESOURCE, "addv");
    1a50:	5f474643 	svcpl	0x00474643
	if (ioreq [loc] != NULL)
    1a54:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1a58:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
		syserror (ERESOURCE, "addv");
    1a5c:	4300305f 	movwmi	r3, #95	; 0x5f
	ioreq [loc] = rf;
    1a60:	5f474643 	svcpl	0x00474643
}
    1a64:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1a68:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
sint io (word retry, word dev, word operation, char *buf, word len) {
    1a6c:	2f00315f 	svccs	0x0000315f
    1a70:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1a74:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    1a78:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1a7c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1a80:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1a84:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		syserror (ENODEVICE, "io");
    1a88:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1a8c:	4349502f 	movtmi	r5, #36911	; 0x902f
	if (len == 0)
    1a90:	502f534f 	eorpl	r5, pc, pc, asr #6
	ret = (ioreq [dev]) (operation, buf, len);
    1a94:	534f6369 	movtpl	r6, #62313	; 0xf369
    1a98:	3143432f 	cmpcc	r3, pc, lsr #6
	if (ret >= 0)
    1a9c:	2f585833 	svccs	0x00585833
	if (ret == -1) {
    1aa0:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    1aa4:	4300632e 	movwmi	r6, #814	; 0x32e
		if (retry == WNONE)
    1aa8:	5f474643 	svcpl	0x00474643
		iowait (dev, operation, retry);
    1aac:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
    1ab0:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    1ab4:	00315f46 	eorseq	r5, r1, r6, asr #30
			release;
    1ab8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	if (ret == -2) {
    1abc:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
		if (retry != WNONE) {
    1ac0:	41545f47 	cmpmi	r4, r7, asr #30
    1ac4:	41445f50 	cmpmi	r4, r0, asr pc
			iowait (dev, operation, retry);
    1ac8:	00305f50 	eorseq	r5, r0, r0, asr pc
    1acc:	47464343 	strbmi	r4, [r6, -r3, asr #6]
			(ioreq [dev]) (NONE, buf, len);
    1ad0:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1ad4:	41545f47 	cmpmi	r4, r7, asr #30
    1ad8:	41445f50 	cmpmi	r4, r0, asr pc
		(ioreq [dev]) (NONE, buf, len);
    1adc:	00315f50 	eorseq	r5, r1, r0, asr pc
    1ae0:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    1ae4:	4300745f 	movwmi	r7, #1119	; 0x45f
}
    1ae8:	5f474643 	svcpl	0x00474643
	if (retry != WNONE) {
    1aec:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		delay (-ret - 2, retry);
    1af0:	4f52505f 	svcmi	0x0052505f
    1af4:	32315f54 	eorscc	r5, r1, #84, 30	; 0x150
    1af8:	36395f37 	shasxcc	r5, r9, r7
    1afc:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		release;
    1b00:	52455f47 	subpl	r5, r5, #284	; 0x11c
    1b04:	5f455341 	svcpl	0x00455341
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b08:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1b0c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1b10:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1b14:	505f4746 	subspl	r4, pc, r6, asr #14
    1b18:	5f544f52 	svcpl	0x00544f52
		syserror (ERESOURCE, "mal1");
    1b1c:	305f3133 	subscc	r3, pc, r3, lsr r1	; <UNPREDICTABLE>
    1b20:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b24:	4d495f47 	stclmi	15, cr5, [r9, #-284]	; 0xfffffee4
    1b28:	5f454741 	svcpl	0x00454741
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b2c:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b30:	4f435f44 	svcmi	0x00435f44
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b34:	4300464e 	movwmi	r4, #1614	; 0x64e
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b38:	5f474643 	svcpl	0x00474643
    1b3c:	51455246 	cmppl	r5, r6, asr #4
}
    1b40:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
    1b44:	00544553 	subseq	r4, r4, r3, asr r5
    1b48:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1b4c:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1b50:	52505f47 	subspl	r5, r0, #284	; 0x11c
    1b54:	365f544f 	ldrbcc	r5, [pc], -pc, asr #8
void __pi_free (aword *ch) {
    1b58:	32335f33 	eorscc	r5, r3, #51, 30	; 0xcc
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b5c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1b60:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
		syserror (EMALLOC, "malg");
    1b64:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
    1b68:	305f454c 	subscc	r4, pc, ip, asr #10
	mcfree [MA_NP] += m_size (ch);
    1b6c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		m_size (ch) ^= MALLOC_UMASK;
    1b70:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    1b74:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
	mcfree [MA_NP] += m_size (ch);
    1b78:	315f454c 	cmpcc	pc, ip, asr #10
	QFREE;
    1b7c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if (mevent [MA_NP] . nwait) {
    1b80:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1b84:	505f4746 	subspl	r4, pc, r6, asr #14
		trigger ((aword)(&(mevent [MA_NP])));
    1b88:	5f544f52 	svcpl	0x00544f52
		mevent [MA_NP] . nwait --;
    1b8c:	365f3539 			; <UNDEFINED> instruction: 0x365f3539
}
    1b90:	43430034 	movtmi	r0, #12340	; 0x3034
    1b94:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 1456 <__pi_release+0x32>
    1b98:	4c5f5458 	cfldrdmi	mvd5, [pc], {88}	; 0x58
    1b9c:	4c435f46 	mcrrmi	15, 4, r5, r3, cr6
void kill (aword pid) {
    1ba0:	4343004b 	movtmi	r0, #12363	; 0x304b
		pid = (aword) __pi_curr;
    1ba4:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	j = NULL;
    1ba8:	5f474643 	svcpl	0x00474643
	for_all_tasks (i) {
    1bac:	4f5f4954 	svcmi	0x005f4954
	syserror (EREQPAR, "kpi");
    1bb0:	4f495450 	svcmi	0x00495450
    1bb4:	4700534e 	strmi	r5, [r0, -lr, asr #6]
		if ((aword)i == pid) {
    1bb8:	5f4f4950 	svcpl	0x004f4950
    1bbc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
				__PCB = i->Next;
    1bc0:	006f6944 	rsbeq	r6, pc, r4, asr #18
			killev (i);
    1bc4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1b10 <__pi_malloc_init+0x8>
			ufree (i);
    1bc8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
			if (i == __pi_curr)
    1bcc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1bd0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				release;
    1bd4:	6f746b73 	svcvs	0x00746b73
				j->Next = i->Next;
    1bd8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1bdc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1be0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
}
    1be4:	2f534f43 	svccs	0x00534f43
    1be8:	4f636950 	svcmi	0x00636950
    1bec:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	if (size < 8)
    1bf0:	2f736269 	svccs	0x00736269
		_size = 2;
    1bf4:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1bf8:	2f73726f 	svccs	0x0073726f
		_size = (((aword)size) + 3) >> 2;
    1bfc:	5f6e6970 	svcpl	0x006e6970
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c00:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
		_size = (((aword)size) + 3) >> 2;
    1c04:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
		if (mevent [MA_NP] . nfail != 255)
    1c08:	6e756a00 	vaddvs.f32	s13, s10, s0
    1c0c:	6970006b 	ldmdbvs	r0!, {r0, r1, r3, r5, r6}^
			mevent [MA_NP] . nfail ++;
    1c10:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
		mnfree [MA_NP] = 0;
    1c14:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    1c18:	6165725f 	cmnvs	r5, pc, asr r2
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c1c:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
    1c20:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
			syserror (EMALLOC, "malc");
    1c24:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    1c28:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
		if (m_size (chunk) >= _size)
    1c2c:	65540074 	ldrbvs	r0, [r4, #-116]	; 0xffffff8c
    1c30:	62006d72 	andvs	r6, r0, #7296	; 0x1c80
		chunk = m_nextp (chunk)) {
    1c34:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
		m_setnextp (cc, m_nextp (chunk));
    1c38:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c3c:	756f6265 	strbvc	r6, [pc, #-613]!	; 19df <running+0x17>
    1c40:	0065636e 	rsbeq	r6, r5, lr, ror #6
			m_size (chunk) = _size;
    1c44:	74756270 	ldrbtvc	r6, [r5], #-624	; 0xfffffd90
			cc = chunk + _size + m_hdrlen;
    1c48:	006e6f74 	rsbeq	r6, lr, r4, ror pc
    1c4c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			m_size (cc) = waste - m_hdrlen;
    1c50:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
			QFREE;
    1c54:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
		mevent [MA_NP] . nfail = 0;
    1c58:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
		mcfree [MA_NP] -= m_size (chunk);
    1c5c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    1c60:	7463615f 	strbtvc	r6, [r3], #-351	; 0xfffffea1
    1c64:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1c68:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1bb4 <kill+0x14>
		m_size (chunk) |= MALLOC_UMASK;
    1c6c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1c70:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
		m_size (chunk) |= MALLOC_UMASK;
    1c74:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			mnfree [MA_NP] = mcfree [MA_NP];
    1c78:	6f746b73 	svcvs	0x00746b73
}
    1c7c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1c80:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1c84:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1c88:	2f534f43 	svccs	0x00534f43
    1c8c:	4f636950 	svcmi	0x00636950
    1c90:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1c94:	2f736269 	svccs	0x00736269
aword __pi_fork (fsmcode func, aword data) {
    1c98:	622f4f49 	eorvs	r4, pc, #292	; 0x124
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1c9c:	6f747475 	svcvs	0x00747475
    1ca0:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    1ca4:	6f434500 	svcvs	0x00434500
		if ((j = __PCB) == NULL)
    1ca8:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
	i->Next = NULL;
    1cac:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
	i->data = data;
    1cb0:	655f7469 	ldrbvs	r7, [pc, #-1129]	; 184f <update_n_wake+0x2b>
		if ((j = __PCB) == NULL)
    1cb4:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
}
    1cb8:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
			for (; j->Next != NULL; j = j->Next);
    1cbc:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
    1cc0:	00305f64 	eorseq	r5, r0, r4, ror #30
	return (aword) i;
    1cc4:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
    1cc8:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	if (mevent [MA_NP] . nwait != 255)
    1ccc:	5f656500 	svcpl	0x00656500
    1cd0:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    1cd4:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
		mevent [MA_NP] . nwait ++;
    1cd8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
	wait ((aword)(&(mevent [MA_NP])), state);
    1cdc:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
    1ce0:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
void diag (const char *mess, ...) {
    1ce4:	5f656500 	svcpl	0x00656500
    1ce8:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    1cec:	6f435700 	svcvs	0x00435700
	diag_disable_int (a, is);
    1cf0:	6300746e 	movwvs	r7, #1134	; 0x46e
    1cf4:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
    1cf8:	5f656500 	svcpl	0x00656500
				d = (bc == 16) ? 10000 : 1000000000;
    1cfc:	696e6170 	stmdbvs	lr!, {r4, r5, r6, r8, sp, lr}^
	diag_disable_int (a, is);
    1d00:	65650063 	strbvs	r0, [r5, #-99]!	; 0xffffff9d
	while (*mess != '\0') {
    1d04:	6e79735f 	mrcvs	3, 3, r7, cr9, cr15, {2}
	dgout ('\r');
    1d08:	72660063 	rsbvc	r0, r6, #99	; 0x63
	dgout ('\n');
    1d0c:	65006d6f 	strvs	r6, [r0, #-3439]	; 0xfffff291
    1d10:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
    1d14:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
	diag_wait (a);
    1d18:	00727364 	rsbseq	r7, r2, r4, ror #6
	diag_enable_int (a, is);
    1d1c:	6f6c6363 	svcvs	0x006c6363
    1d20:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
}
    1d24:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1d28:	6f682f00 	svcvs	0x00682f00
    1d2c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
		if (*mess == '%') {
    1d30:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1d34:	442f6e65 	strtmi	r6, [pc], #-3685	; 1d3c <diag+0x58>
			if (*mess == 'l') {
    1d38:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1d3c:	4f2f706f 	svcmi	0x002f706f
				mess++;
    1d40:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
				val = va_arg (ap, lword);
    1d44:	502f5445 	eorpl	r5, pc, r5, asr #8
				bc = 32;
    1d48:	534f4349 	movtpl	r4, #62281	; 0xf349
				bc = 16;
    1d4c:	6369502f 	cmnvs	r9, #47	; 0x2f
			switch (*mess) {
    1d50:	502f534f 	eorpl	r5, pc, pc, asr #6
    1d54:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1d58:	6f74532f 	svcvs	0x0074532f
				dgout ('%');
    1d5c:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    1d60:	6f74732f 	svcvs	0x0074732f
				dgout (*mess);
    1d64:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    1d68:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
			switch (*mess) {
    1d6c:	30387235 	eorscc	r7, r8, r5, lsr r2
					v = __pi_hex_enc_table [
    1d70:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
					i += 4;
    1d74:	706f6300 	rsbvc	r6, pc, r0, lsl #6
					(val >> (bc - i)) & 0xf];
    1d78:	63006e65 	movwvs	r6, #3685	; 0xe65
    1d7c:	00727470 	rsbseq	r7, r2, r0, ror r4
					dgout (v);
    1d80:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    1d84:	00657a69 	rsbeq	r7, r5, r9, ror #20
				while (i < bc) {
    1d88:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
			mess++;
    1d8c:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
					d /= 10;
    1d90:	00656e6f 	rsbeq	r6, r5, pc, ror #28
				if ((val >> (bc - 1)) & 1) {
    1d94:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
    1d98:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
					dgout ('-');
    1d9c:	00746961 	rsbseq	r6, r4, r1, ror #18
    1da0:	5f746567 	svcpl	0x00746567
						val |= 0xffff0000;
    1da4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    1da8:	74757000 	ldrbtvc	r7, [r5], #-0
    1dac:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
				d = (bc == 16) ? 10000 : 1000000000;
    1db0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    1db4:	2f656d6f 	svccs	0x00656d6f
    1db8:	70657473 	rsbvc	r7, r5, r3, ror r4
					v = (word) (val / d);
    1dbc:	2f6e6568 	svccs	0x006e6568
					if (v || d == 1) break;
    1dc0:	6b736544 	blvs	1cdb2d8 <__ccfg+0x1cbb330>
    1dc4:	2f706f74 	svccs	0x00706f74
					d /= 10;
    1dc8:	4f534c4f 	svcmi	0x00534c4f
				d = (bc == 16) ? 10000 : 1000000000;
    1dcc:	2f54454e 	svccs	0x0054454e
					dgout (v + '0');
    1dd0:	4f434950 	svcmi	0x00434950
    1dd4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1dd8:	2f534f63 	svccs	0x00534f63
					d /= 10;
    1ddc:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
					val = val - (v * d);
    1de0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
					if (d == 0) break;
    1de4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
					v = (word) (val / d);
    1de8:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1dec:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
				if (bc == 16)
    1df0:	7300632e 	movwvc	r6, #814	; 0x32e
				d = (bc == 16) ? 10000 : 1000000000;
    1df4:	6f5f7265 	svcvs	0x005f7265
					val &= 0xffff;
    1df8:	2f007475 	svccs	0x00007475
					dgout (*s);
    1dfc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
					s++;
    1e00:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
				while (*s != '\0') {
    1e04:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1e08:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			dgout (*mess++);
    1e0c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1e10:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1e14:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1e18:	4349502f 	movtmi	r5, #36911	; 0x902f
    1e1c:	502f534f 	eorpl	r5, pc, pc, asr #6
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e20:	534f6369 	movtpl	r6, #62313	; 0xf369
    1e24:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1e28:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1e2c:	61697265 	cmnvs	r9, r5, ror #4
	^ entropy
    1e30:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
}
    1e34:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    1e38:	5f00632e 	svcpl	0x0000632e
    1e3c:	706e695f 	rsbvc	r6, lr, pc, asr r9
    1e40:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e44:	72657300 	rsbvc	r7, r5, #0, 6
	word cs = size + hblenb;
    1e48:	006e695f 	rsbeq	r6, lr, pc, asr r9
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e4c:	5f726573 	svcpl	0x00726573
    1e50:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
	p -> length = size;
    1e54:	6f682f00 	svcvs	0x00682f00
}
    1e58:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	if (p->attributes.b.queued) {
    1e5c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e60:	442f6e65 	strtmi	r6, [pc], #-3685	; 1e68 <deq+0xe>
    1e64:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e68:	4f2f706f 	svcmi	0x002f706f
		p->attributes.b.queued = 0;
    1e6c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1e70:	502f5445 	eorpl	r5, pc, r5, asr #8
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1e74:	534f4349 	movtpl	r4, #62281	; 0xf349
	deq (p);	// Remove from queue
    1e78:	6369502f 	cmnvs	r9, #47	; 0x2f
}
    1e7c:	502f534f 	eorpl	r5, pc, pc, asr #6
	tfree ((address)p);
    1e80:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1e84:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    1e88:	2f6c6169 	svccs	0x006c6169
    1e8c:	5f726573 	svcpl	0x00726573
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1e90:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    1e94:	2f00632e 	svccs	0x0000632e
	if (q_empty (q))
    1e98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1e9c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
		trigger (q);
    1ea0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	if (p->attributes.b.urgent) {
    1ea4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		p->u.bqueue.next = q->next;
    1ea8:	706f746b 	rsbvc	r7, pc, fp, ror #8
		p->u.bqueue.prev = q;
    1eac:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		q->next->prev = (qitem_t*) p;
    1eb0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	p->attributes.b.queued = 1;
    1eb4:	4349502f 	movtmi	r5, #36911	; 0x902f
    1eb8:	502f534f 	eorpl	r5, pc, pc, asr #6
}
    1ebc:	534f6369 	movtpl	r6, #62313	; 0xf369
		p->u.bqueue.prev = q->prev;
    1ec0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		q->prev->next = (qitem_t*) p;
    1ec4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
		q->prev = (qitem_t*) p;
    1ec8:	61697265 	cmnvs	r9, r5, ror #4
    1ecc:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1ed0:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
	deq (p);	// Soft dequeue, timer and hook left intact
    1ed4:	00632e66 	rsbeq	r2, r3, r6, ror #28
	switch (dv) {
    1ed8:	5f726573 	svcpl	0x00726573
    1edc:	00666e69 	rsbeq	r6, r6, r9, ror #28
    1ee0:	75737369 	ldrbvc	r7, [r3, #-873]!	; 0xfffffc97
    1ee4:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
			p->attributes.b.urgent = 1;
    1ee8:	6f6d0064 	svcvs	0x006d0064
    1eec:	616c7564 	cmnvs	ip, r4, ror #10
			verify_ses (p, "dispose ses");
    1ef0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1ef4:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 1efc <dispose+0x2c>
    1ef8:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
    1efc:	62006f4e 	andvs	r6, r0, #312	; 0x138
    1f00:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
			verify_phy (p, "dispose phy");
    1f04:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
    1f08:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
}
    1f0c:	5f667200 	svcpl	0x00667200
			enq (oqueues [p->attributes.b.phys], p);
    1f10:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
			p->attributes.b.urgent = 1;
    1f14:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
    1f18:	5662006d 	strbtpl	r0, [r2], -sp, rrx
			verify_phy (p, "dispose phy");
    1f1c:	654c7261 	strbvs	r7, [ip, #-609]	; 0xfffffd9f
    1f20:	5070006e 	rsbspl	r0, r0, lr, rrx
    1f24:	6300746b 	movwvs	r7, #1131	; 0x46b
    1f28:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
    1f2c:	65724672 	ldrbvs	r4, [r2, #-1650]!	; 0xfffff98e
    1f30:	6f630071 	svcvs	0x00630071
			enq (oqueues [p->attributes.b.phys], p);
    1f34:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1f38:	47657275 			; <UNDEFINED> instruction: 0x47657275
}
    1f3c:	73666e65 	cmnvc	r6, #1616	; 0x650
			rlp (p);
    1f40:	7461506b 	strbtvc	r5, [r1], #-107	; 0xffffff95
}
    1f44:	77006863 	strvc	r6, [r0, -r3, ror #16]
    1f48:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
    1f4c:	646f4d6e 	strbtvs	r4, [pc], #-3438	; 1f54 <dispose+0x84>
    1f50:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
    1f54:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1f58:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f5c:	435f504f 	cmpmi	pc, #79	; 0x4f
	if (b->attributes.b.outgoing) {
    1f60:	00735f53 	rsbseq	r5, r3, r3, asr pc
	b = header (p);
    1f64:	74736170 	ldrbtvc	r6, [r3], #-368	; 0xfffffe90
	if (b->attributes.b.outgoing) {
    1f68:	67697254 			; <UNDEFINED> instruction: 0x67697254
		verify_ses (b, "tcv02");
    1f6c:	54667200 	strbtpl	r7, [r6], #-512	; 0xfffffe00
    1f70:	5f6d6972 	svcpl	0x006d6972
    1f74:	62720074 	rsbsvs	r0, r2, #116	; 0x74
    1f78:	6c666675 	stclvs	6, cr6, [r6], #-468	; 0xfffffe2c
    1f7c:	5f524400 	svcpl	0x00524400
		verify_plg (b, tcv_out, "tcv03");
    1f80:	504f4f4c 	subpl	r4, pc, ip, asr #30
    1f84:	70005f5f 	andvc	r5, r0, pc, asr pc
    1f88:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1f8c:	62007475 	andvs	r7, r0, #1962934272	; 0x75000000
    1f90:	65706552 	ldrbvs	r6, [r0, #-1362]!	; 0xfffffaae
    1f94:	6b4f7461 	blvs	13df120 <__ccfg+0x13bf178>
    1f98:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
    1f9c:	6f6e6749 	svcvs	0x006e6749
    1fa0:	00646572 	rsbeq	r6, r4, r2, ror r5
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fa4:	4d636566 	cfstr64mi	mvdx6, [r3, #-408]!	; 0xfffffe68
}
    1fa8:	0065646f 	rsbeq	r6, r5, pc, ror #8
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fac:	4e78526e 	cdpmi	2, 7, cr5, cr8, cr14, {3}
		rlp (b);
    1fb0:	6f006b6f 	svcvs	0x00006b6f
}
    1fb4:	65646666 	strbvs	r6, [r4, #-1638]!	; 0xfffff99a
		rlp (b);
    1fb8:	0079616c 	rsbseq	r6, r9, ip, ror #2
    1fbc:	61657270 	smcvs	22304	; 0x5720
    1fc0:	646f4d6d 	strbtvs	r4, [pc], #-3437	; 1fc8 <tcv_endp+0x6c>
    1fc4:	43700065 	cmnmi	r0, #101	; 0x65
    1fc8:	45727275 	ldrbmi	r7, [r2, #-629]!	; 0xfffffd8b
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    1fcc:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1fd0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    1fd4:	61745365 	cmnvs	r4, r5, ror #6
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fd8:	6900706d 	stmdbvs	r0, {r0, r2, r3, r5, r6, ip, sp, lr}
	va_start (ap, plid);
    1fdc:	6e497172 	mcrvs	1, 2, r7, cr9, cr2, {3}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    1fe0:	77007674 	smlsdxvc	r0, r4, r6, r7
    1fe4:	5f746961 	svcpl	0x00746961
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1fe8:	00646d63 	rsbeq	r6, r4, r3, ror #26
    1fec:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    1ff0:	6f437461 	svcvs	0x00437461
    1ff4:	7300666e 	movwvc	r6, #1646	; 0x66e
			syserror (ENODEVICE, "tcv04");
    1ff8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
		syserror (EMALLOC, "tcv05");
    1ffc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	attp.b.outgoing = 1;
    2000:	70416200 	subvc	r6, r1, r0, lsl #4
    2004:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    2008:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    200c:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2010:	4e700070 	mrcmi	0, 3, r0, cr0, cr0, {3}
		if (descriptors [fd] == NULL)
    2014:	45747865 	ldrbmi	r7, [r4, #-2149]!	; 0xfffff79b
    2018:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    201c:	5f465200 	svcpl	0x00465200
		return ERROR;
    2020:	50646d63 	rsbpl	r6, r4, r3, ror #26
}
    2024:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    2028:	6f696461 	svcvs	0x00696461
    202c:	53766944 	cmnpl	r6, #68, 18	; 0x110000
	s->attpattern.b.session = fd;
    2030:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2034:	76657100 	strbtvc	r7, [r5], -r0, lsl #2
	descriptors [fd] = s;
    2038:	00746e65 	rsbseq	r6, r4, r5, ror #28
	q_init (&(s->rqueue));
    203c:	43746b70 	cmnmi	r4, #112, 22	; 0x1c000
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2040:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    2044:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    2048:	3163635f 	cmncc	r3, pc, asr r3
    204c:	00303533 	eorseq	r3, r0, r3, lsr r5
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2050:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    2054:	645f3035 	ldrbvs	r3, [pc], #-53	; 205c <tcv_open+0x90>
    2058:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
	descriptors [fd] = s;
    205c:	66720072 			; <UNDEFINED> instruction: 0x66720072
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2060:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2064:	53465f44 	movtpl	r5, #28484	; 0x6f44
	if (s == NULL)
    2068:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
		syserror (EMALLOC, "tcv05");
    206c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2070:	465f444d 	ldrbmi	r4, [pc], -sp, asr #8
    2074:	00745f53 	rsbseq	r5, r4, r3, asr pc
    2078:	6f507874 	svcvs	0x00507874
    207c:	00726577 	rsbseq	r6, r2, r7, ror r5
    2080:	77427872 	smlsldxvc	r7, r2, r2, r8
    2084:	70706100 	rsbsvc	r6, r0, r0, lsl #2
    2088:	6547796c 	strbvs	r7, [r7, #-2412]	; 0xfffff694
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    208c:	6b73666e 	blvs	1cdba4c <__ccfg+0x1cbbaa4>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    2090:	63746150 	cmnvs	r4, #80, 2
    2094:	68630068 	stmdavs	r3!, {r3, r5, r6}^
    2098:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
	plugins [ord] = pl;
    209c:	7973006c 	ldmdbvc	r3!, {r2, r3, r5, r6}^
	return 0;
    20a0:	4368746e 	cmnmi	r8, #1845493760	; 0x6e000000
		return ERROR;
    20a4:	00666e6f 	rsbeq	r6, r6, pc, ror #28
}
    20a8:	616e4562 	cmnvs	lr, r2, ror #10
    20ac:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
	verify_fds (fd, "tcv10");
    20b0:	75416200 	strbvc	r6, [r1, #-512]	; 0xfffffe00
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20b4:	6c466f74 	mcrrvs	15, 7, r6, r6, cr4
	verify_fds (fd, "tcv10");
    20b8:	43687375 	cmnmi	r8, #-738197503	; 0xd4000001
    20bc:	72456372 	subvc	r6, r5, #-939524095	; 0xc8000001
    20c0:	6f630072 	svcvs	0x00630072
	verify_plg (b, tcv_frm, "tcv11");
    20c4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
	b = q_first (rq);
    20c8:	72466652 	subvc	r6, r6, #85983232	; 0x5200000
	if (q_end (b, rq)) {
    20cc:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
		if (state != WNONE) {
    20d0:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
    20d4:	6f4d7854 	svcvs	0x004d7854
			when (rq, state);
    20d8:	61006564 	tstvs	r0, r4, ror #10
			release;
    20dc:	6f6c616e 	svcvs	0x006c616e
	deq (b);	// Dequeue the packet ...
    20e0:	67664367 	strbvs	r4, [r6, -r7, ror #6]!
    20e4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
	p = ((address)(b + 1));
    20e8:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
	verify_plg (b, tcv_frm, "tcv11");
    20ec:	646d4361 	strbtvs	r4, [sp], #-865	; 0xfffffc9f
    20f0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    20f4:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    20f8:	00766e49 	rsbseq	r6, r6, r9, asr #28
    20fc:	71724970 	cmnvc	r2, r0, ror r9
    2100:	63746150 	cmnvs	r4, #80, 2
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2104:	50700068 	rsbspl	r0, r0, r8, rrx
    2108:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
		b->length - b->u.pointers.head - b->u.pointers.tail;
    210c:	00636556 	rsbeq	r6, r3, r6, asr r5
    2110:	43434652 	movtmi	r4, #13906	; 0x3652
	b->u.pointers.tail =
    2114:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
}
    2118:	73694474 	cmnvc	r9, #116, 8	; 0x74000000
		return NULL;
    211c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2120:	78616d00 	stmdavc	r1!, {r8, sl, fp, sp, lr}^
    2124:	4c746b50 			; <UNDEFINED> instruction: 0x4c746b50
    2128:	63006e65 	movwvs	r6, #3685	; 0xe65
    212c:	4372726f 	cmnmi	r2, #-268435450	; 0xf0000006
	verify_fds (fd, "tcv16");
    2130:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
								Boolean urg) {
    2134:	61720067 	cmnvs	r2, r7, rrx
    2138:	62003074 	andvs	r3, r0, #116	; 0x74
	verify_fds (fd, "tcv16");
    213c:	4d736169 	ldfmie	f6, [r3, #-420]!	; 0xfffffe5c
    2140:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2144:	43434652 	movtmi	r4, #13906	; 0x3652
	verify_pld (s, tcv_frm, "tcv17");
    2148:	49306570 	ldmdbmi	r0!, {r4, r5, r6, r8, sl, sp, lr}
    214c:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
    2150:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2154:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
    2158:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    215c:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
    2160:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    2164:	49676966 	stmdbmi	r7!, {r1, r2, r5, r6, r8, fp, sp, lr}^
	ptrs.head = (word) fd;
    2168:	63644166 	cmnvs	r4, #-2147483623	; 0x80000019
	ptrs.tail = (word) urg;
    216c:	63667200 	cmnvs	r6, #0, 4
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    2170:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2174:	4f52505f 	svcmi	0x0052505f
		if (state != WNONE) {
    2178:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
    217c:	6500735f 	strvs	r7, [r0, #-863]	; 0xfffffca1
}
    2180:	7254646e 	subsvc	r6, r4, #1845493760	; 0x6e000000
			when (eid, state);
    2184:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    2188:	66720072 			; <UNDEFINED> instruction: 0x66720072
			release;
    218c:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    2190:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    2194:	435f504f 	cmpmi	pc, #79	; 0x4f
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    2198:	00745f53 	rsbseq	r5, r4, r3, asr pc
    219c:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
    21a0:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
    21a4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    21a8:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    21ac:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
		if (state != WNONE) {
    21b0:	70006f4e 	andvc	r6, r0, lr, asr #30
    21b4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
			tmwait (state);
    21b8:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
    21bc:	70795464 	rsbsvc	r5, r9, r4, ror #8
	b->attributes = s->attpattern;
    21c0:	6d630065 	stclvs	0, cr0, [r3, #-404]!	; 0xfffffe6c
		b->attributes.b.urgent = 1;
    21c4:	73635f64 	cmnvc	r3, #100, 30	; 0x190
    21c8:	73737200 	cmnvc	r3, #0, 4
	b->u.pointers.head = ptrs.head;
    21cc:	72685469 	rsbvc	r5, r8, #1761607680	; 0x69000000
	b->u.pointers.tail = length;
    21d0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
	return (address) (b + 1);
    21d4:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    21d8:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
    21dc:	61565200 	cmpvs	r6, r0, lsl #4
    21e0:	6f63006c 	svcvs	0x0063006c
    21e4:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    21e8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    21ec:	636e4962 	cmnvs	lr, #1605632	; 0x188000
    21f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    21f4:	00726448 	rsbseq	r6, r2, r8, asr #8
	verify_fph (phy, "tcv23");
    21f8:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    21fc:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    2200:	646f6d00 	strbtvs	r6, [pc], #-3328	; 2208 <tcvp_control+0x1c>
    2204:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
}
    2208:	614c7000 	mrsvs	r7, (UNDEF: 76)
	return (physical [phy]) (opt, arg);
    220c:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
    2210:	00797274 	rsbseq	r7, r9, r4, ror r2
    2214:	4278526e 	rsbsmi	r5, r8, #-536870906	; 0xe0000006
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    2218:	75466675 	strbvc	r6, [r6, #-1653]	; 0xfffff98b
	if (opt < 0) {
    221c:	72006c6c 	andvc	r6, r0, #108, 24	; 0x6c00
		if (fd < 0)
    2220:	63615f78 	cmnvs	r1, #120, 30	; 0x1e0
		if (opt == PHYSOPT_PLUGINFO) {
    2224:	33697500 	cmncc	r9, #0, 10
			if (fd >= TCV_MAX_PLUGS)
    2228:	73614d32 	cmnvc	r1, #3200	; 0xc80
			if ((p = plugins [fd]) == NULL)
    222c:	7363006b 	cmnvc	r3, #107	; 0x6b
    2230:	54646e45 	strbtpl	r6, [r4], #-3653	; 0xfffff1bb
}
    2234:	67676972 			; <UNDEFINED> instruction: 0x67676972
		if (fd >= TCV_MAX_PHYS)
    2238:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
		return physinfo [fd];
    223c:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    2240:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
	verify_fds (fd, "tcv22");
    2244:	006c6173 	rsbeq	r6, ip, r3, ror r1
    2248:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    224c:	30796d6d 	rsbscc	r6, r9, sp, ror #26
    2250:	6d797300 	ldclvs	3, cr7, [r9, #-0]
    2254:	526c6f62 	rsbpl	r6, ip, #392	; 0x188
}
    2258:	00657461 	rsbeq	r7, r5, r1, ror #8
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    225c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    2260:	7562725f 	strbvc	r7, [r2, #-607]!	; 0xfffffda1
			return 0;
    2264:	00736666 	rsbseq	r6, r3, r6, ror #12
    2268:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
    226c:	00704f74 	rsbseq	r4, r0, r4, ror pc
    2270:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
    2274:	00716572 	rsbseq	r6, r1, r2, ror r5
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    2278:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
    227c:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
	if (dsp != TCV_DSP_PASS) {
    2280:	67496873 	smlsldxvs	r6, r9, r3, r8
		if (ses == NONE)
    2284:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
			syserror (EREQPAR, "tcv26");
    2288:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
		verify_fds (ses, "tcv27");
    228c:	61725f63 	cmnvs	r2, r3, ror #30
    2290:	4f6f6964 	svcmi	0x006f6964
    2294:	00745f70 	rsbseq	r5, r4, r0, ror pc
    2298:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    229c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
		if ((p = apb (size)) != NULL) {
    22a0:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    22a4:	74617000 	strbtvc	r7, [r1], #-0
		return NULL;
    22a8:	6d496863 	stclvs	8, cr6, [r9, #-396]	; 0xfffffe74
			p->attributes = descriptors [ses] -> attpattern;
    22ac:	47656761 	strbmi	r6, [r5, -r1, ror #14]!
			dispose (p, dsp);
    22b0:	73666e65 	cmnvc	r6, #1616	; 0x650
			p->attributes = descriptors [ses] -> attpattern;
    22b4:	6672006b 	ldrbtvs	r0, [r2], -fp, rrx
			p->attributes.b.outgoing = 0;
    22b8:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
			dispose (p, dsp);
    22bc:	6f682f00 	svcvs	0x00682f00
			return (address)(p + 1);
    22c0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    22c4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
	if ((p = apb (size)) != NULL)
    22c8:	442f6e65 	strtmi	r6, [pc], #-3685	; 22d0 <tcvp_new+0x58>
    22cc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		return (address)(p + 1);
    22d0:	4f2f706f 	svcmi	0x002f706f
    22d4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    22d8:	502f5445 	eorpl	r5, pc, r5, asr #8
    22dc:	534f4349 	movtpl	r4, #62281	; 0xf349
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e0:	6369502f 	cmnvs	r9, #47	; 0x2f
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    22e4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    22e8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    22ec:	66722f58 	uhsaxvs	r2, r2, r8
		syserror (EREQPAR, "tcv28");
    22f0:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
		syserror (EMALLOC, "tcv29");
    22f4:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
	physical [phy] = ps;
    22f8:	43616e45 	cmnmi	r1, #1104	; 0x450
	physinfo [phy] = info;
    22fc:	0072726f 	rsbseq	r7, r2, pc, ror #4
    2300:	4f734662 	svcmi	0x00734662
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2304:	64496666 	strbvs	r6, [r9], #-1638	; 0xfffff99a
    2308:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    230c:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
		syserror (EMALLOC, "tcv29");
    2310:	00734664 	rsbseq	r4, r3, r4, ror #12
    2314:	61657270 	smcvs	22304	; 0x5720
	q_init (q);
    2318:	6e6f436d 	cdpvs	3, 6, cr4, cr15, cr13, {3}
}
    231c:	79730066 	ldmdbvc	r3!, {r1, r2, r5, r6}^
    2320:	6f57636e 	svcvs	0x0057636e
    2324:	6f006472 	svcvs	0x00006472
    2328:	6f697470 	svcvs	0x00697470
    232c:	6170006e 	cmnvs	r0, lr, rrx
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2330:	47686374 			; <UNDEFINED> instruction: 0x47686374
	verify_fph (phy, "tcv30");
    2334:	73666e65 	cmnvc	r6, #1616	; 0x650
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2338:	6566526b 	strbvs	r5, [r6, #-619]!	; 0xfffffd95
    233c:	45736300 	ldrbmi	r6, [r3, #-768]!	; 0xfffffd00
	verify_fph (phy, "tcv30");
    2340:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2344:	7200656d 	andvc	r6, r0, #457179136	; 0x1b400000
    2348:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    234c:	745f656c 	ldrbvc	r6, [pc], #-1388	; 2354 <tcvphy_rcv+0x24>
    2350:	726f6300 	rsbvc	r6, pc, #0, 6
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2354:	72655072 	rsbvc	r5, r5, #114	; 0x72
    2358:	00646f69 	rsbeq	r6, r4, r9, ror #30
		if (plugins [plg] == NULL)
    235c:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    2360:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2364:	70434346 	subvc	r4, r3, r6, asr #6
}
    2368:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    236c:	61656c43 	cmnvs	r5, r3, asr #24
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2370:	6c700072 	ldclvs	0, cr0, [r0], #-456	; 0xfffffe38
    2374:	68636775 	stmdavs	r3!, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr}^
    2378:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    237c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2380:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    2384:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
    2388:	00736552 	rsbseq	r6, r3, r2, asr r5
    238c:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    2390:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
	len -= (ap.head + ap.tail);
    2394:	72700071 	rsbsvc	r0, r0, #113	; 0x71
    2398:	61635365 	cmnvs	r3, r5, ror #6
    239c:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23a0:	69427753 	stmdbvs	r2, {r0, r1, r4, r6, r8, r9, sl, ip, sp, lr}^
    23a4:	62007374 	andvs	r7, r0, #116, 6	; 0xd0000001
    23a8:	4f797375 	svcmi	0x00797375
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23ac:	6f6c0070 	svcvs	0x006c0070
    23b0:	69766944 	ldmdbvs	r6!, {r2, r6, r8, fp, sp, lr}^
    23b4:	00726564 	rsbseq	r6, r2, r4, ror #10
	return 1;
    23b8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    23bc:	72006469 	andvc	r6, r0, #1761607680	; 0x69000000
    23c0:	61705f66 	cmnvs	r0, r6, ror #30
    23c4:	5f686374 	svcpl	0x00686374
    23c8:	5f657063 	svcpl	0x00657063
	verify_fph (phy, "tcv32");
    23cc:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    23d0:	72006b73 	andvc	r6, r0, #117760	; 0x1cc00
    23d4:	6e6f4378 	mcrvs	3, 3, r4, cr15, cr8, {3}
    23d8:	4e620066 	cdpmi	0, 6, cr0, cr2, cr6, {3}
    23dc:	5073466f 	rsbspl	r4, r3, pc, ror #12
    23e0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
	oq = oqueues [phy];
    23e4:	4f007055 	svcmi	0x00007055
	b = q_first (oq);
    23e8:	6e764552 	mrcvs	5, 3, r4, cr6, cr2, {2}
	if (q_end (b, oq)) {
    23ec:	46620074 			; <UNDEFINED> instruction: 0x46620074
	*len = b->length;
    23f0:	66664f73 	uqsub16vs	r4, r6, r3
	deq (b);	// Dequeue the packet ...
    23f4:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
}
    23f8:	61727600 	cmnvs	r2, r0, lsl #12
		return NULL;
    23fc:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
    2400:	69727478 	ldmdbvs	r2!, {r3, r4, r5, r6, sl, ip, sp, lr}^
    2404:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
    2408:	4662734d 	strbtmi	r7, [r2], -sp, asr #6
	verify_fph (phy, "tcv33");
    240c:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
    2410:	5f787200 	svcpl	0x00787200
    2414:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
    2418:	6e695f78 	mcrvs	15, 3, r5, cr9, cr8, {3}
    241c:	6e655f74 	mcrvs	15, 3, r5, cr5, cr4, {3}
    2420:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	oq = oqueues [phy];
    2424:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
	b = q_first (oq);
    2428:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
		return NULL;
    242c:	64610030 	strbtvs	r0, [r1], #-48	; 0xffffffd0
	return (address)(b + 1);
    2430:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
}
    2434:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
    2438:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    243c:	505f444d 	subspl	r4, pc, sp, asr #8
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2440:	5f504f52 	svcpl	0x00504f52
	verify_plg (b, tcv_xmt, "tcv34");
    2444:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
	hblock_t *b = header (pkt);
    2448:	49445f4f 	stmdbmi	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
	verify_plg (b, tcv_xmt, "tcv34");
    244c:	45535f56 	ldrbmi	r5, [r3, #-3926]	; 0xfffff0aa
    2450:	5f505554 	svcpl	0x00505554
    2454:	66720073 			; <UNDEFINED> instruction: 0x66720073
    2458:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    245c:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    2460:	525f504f 	subspl	r5, pc, #79	; 0x4f
    2464:	4f494441 	svcmi	0x00494441
	dispose (b, plugins [b->attributes.b.plugin] ->
    2468:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
}
    246c:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
	dispose (b, plugins [b->attributes.b.plugin] ->
    2470:	745f5055 	ldrbvc	r5, [pc], #-85	; 2478 <tcvphy_end+0x38>
    2474:	63667200 	cmnvs	r6, #0, 4
    2478:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
}
    247c:	4f52505f 	svcmi	0x0052505f
    while(1)
    2480:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
{
    2484:	7000745f 	andvc	r7, r0, pc, asr r4
    SetupTrimDevice();
    2488:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
    pui32Src = &_etext;
    248c:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    2490:	74537852 	ldrbvc	r7, [r3], #-2130	; 0xfffff7ae
    __asm("    ldr     r0, =_bss\n"
    2494:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
    2498:	756e0064 	strbvc	r0, [lr, #-100]!	; 0xffffff9c
    249c:	7373526d 	cmnvc	r3, #-805306362	; 0xd0000006
    24a0:	6c644969 			; <UNDEFINED> instruction: 0x6c644969
    24a4:	61720065 	cmnvs	r2, r5, rrx
   main();
    24a8:	6f576574 	svcvs	0x00576574
    FaultISR();
    24ac:	72006472 	andvc	r6, r0, #1912602624	; 0x72000000
        *pui32Dest++ = *pui32Src++;
    24b0:	61747378 	cmnvs	r4, r8, ror r3
    24b4:	52700074 	rsbspl	r0, r0, #116	; 0x74
    24b8:	764f6765 	strbvc	r6, [pc], -r5, ror #14
    24bc:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    24c0:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
    24c4:	726d7461 	rsbvc	r7, sp, #1627389952	; 0x61000000
    24c8:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
    24cc:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
static byte get_byte () {
    24d0:	7352646e 	cmpvc	r2, #1845493760	; 0x6e000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24d4:	72006973 	andvc	r6, r0, #1884160	; 0x1cc000
    24d8:	705f6366 	subsvc	r6, pc, r6, ror #6
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    24dc:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    24e0:	74754f78 	ldrbtvc	r4, [r5], #-3960	; 0xfffff088
		if (ee_inp)
    24e4:	5f747570 	svcpl	0x00747570
			b |= 1;
    24e8:	66720073 			; <UNDEFINED> instruction: 0x66720073
    24ec:	72705f63 	rsbsvc	r5, r0, #396	; 0x18c
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    24f0:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
	for (b = 0, i = 0; i < 8; i++) {
    24f4:	7074754f 	rsbsvc	r7, r4, pc, asr #10
}
    24f8:	745f7475 	ldrbvc	r7, [pc], #-1141	; 2500 <get_byte+0x30>
    24fc:	43465200 	movtmi	r5, #25088	; 0x6200
    2500:	636f6c43 	cmnvs	pc, #17152	; 0x4300
static void put_byte (byte b) {
    2504:	7369446b 	cmnvc	r9, #1795162112	; 0x6b000000
    2508:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    250c:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    2510:	53676966 	cmnpl	r7, #1671168	; 0x198000
		if (b & 0x80)
    2514:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
    2518:	63787400 	cmnvs	r8, #0, 8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    251c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
	for (i = 0; i < 8; i++) {
    2520:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
		b <<= 1;
    2524:	7a536e65 	bvc	14ddec0 <__ccfg+0x14bdf18>
	for (i = 0; i < 8; i++) {
    2528:	63667200 	cmnvs	r6, #0, 4
}
    252c:	6461725f 	strbtvs	r7, [r1], #-607	; 0xfffffda1
    2530:	704f6f69 	subvc	r6, pc, r9, ror #30
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2534:	6200735f 	andvs	r7, r0, #2080374785	; 0x7c000001
    2538:	65706552 	ldrbvs	r6, [r0, #-1362]!	; 0xfffffaae
	put_byte (cmd);
    253c:	6f4e7461 	svcvs	0x004e7461
    2540:	6966006b 	stmdbvs	r6!, {r0, r1, r3, r5, r6}^
}
    2544:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    2548:	7200704f 	andvc	r7, r0, #79	; 0x4f
static void wwait (word st, word del) {
    254c:	645f6366 	ldrbvs	r6, [pc], #-870	; 2554 <wwait+0x8>
    2550:	45617461 	strbmi	r7, [r1, #-1121]!	; 0xfffffb9f
    2554:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
	while (dopen && (rdsr () & 1)) {
    2558:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    255c:	5f6c6172 	svcpl	0x006c6172
    2560:	66720073 			; <UNDEFINED> instruction: 0x66720073
    2564:	61645f63 	cmnvs	r4, r3, ror #30
	put_byte (CMD_RDSR);
    2568:	6e456174 	mcrvs	1, 2, r6, cr5, cr4, {3}
	r = get_byte ();
    256c:	47797274 			; <UNDEFINED> instruction: 0x47797274
    2570:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
	while (dopen && (rdsr () & 1)) {
    2574:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 257c <wwait+0x30>
}
    2578:	5f667200 	svcpl	0x00667200
		if (st == WNONE)
    257c:	63746170 	cmnvs	r4, #112, 2
    2580:	66725f68 	ldrbtvs	r5, [r2], -r8, ror #30
			mdelay (1);
    2584:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    2588:	6b73666e 	blvs	1cdbf48 <__ccfg+0x1cbbfa0>
			delay (del, st);
    258c:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
    2590:	52006b4f 	andpl	r6, r0, #80896	; 0x13c00
			release;
    2594:	00746552 	rsbseq	r6, r4, r2, asr r5
    2598:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    259c:	31796d6d 	cmncc	r9, sp, ror #26
static void ready () {
    25a0:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 25a8 <ready+0x8>
	if (dopen) {
    25a4:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
		wwait (WNONE, 1);
    25a8:	5f5f0032 	svcpl	0x005f0032
    25ac:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    25b0:	6e003379 	mcrvs	3, 0, r3, cr0, cr9, {3}
	dstat = 0;
    25b4:	72657449 	rsbvc	r7, r5, #1224736768	; 0x49000000
}
    25b8:	6f697461 	svcvs	0x00697461
    25bc:	7000736e 	andvc	r7, r0, lr, ror #6
    25c0:	654c746b 	strbvs	r7, [ip, #-1131]	; 0xfffffb95
	udelay (1);
    25c4:	7572006e 	ldrbvc	r0, [r2, #-110]!	; 0xffffff92
    25c8:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
	udelay (1);
    25cc:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
		dopen = DOPEN_TEMP;
    25d0:	6f725064 	svcvs	0x00725064
    25d4:	00785270 	rsbseq	r5, r8, r0, ror r2
    25d8:	43434652 	movtmi	r4, #13906	; 0x3652
    25dc:	49304550 	ldmdbmi	r0!, {r4, r6, r8, sl, lr}
static void cclose () {
    25e0:	6148746e 	cmpvs	r8, lr, ror #8
	if (dopen == DOPEN_TEMP) {
    25e4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    25e8:	72640072 	rsbvc	r0, r4, #114	; 0x72
		wwait (WNONE, 1);
    25ec:	63727076 	cmnvs	r2, #118	; 0x76
    25f0:	506e0073 	rsbpl	r0, lr, r3, ror r0
	cmd_0 (CMD_DP);
    25f4:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    25f8:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
		dopen = 0;
    25fc:	63620073 	cmnvs	r2, #115	; 0x73
}
    2600:	745f666b 	ldrbvc	r6, [pc], #-1643	; 2608 <ee_open+0x4>
word ee_open () {
    2604:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
	ready ();
    2608:	63667200 	cmnvs	r6, #0, 4
	dopen = DOPEN_PERM;
    260c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2610:	4f52505f 	svcmi	0x0052505f
}
    2614:	58545f50 	ldmdapl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
	if (dopen) {
    2618:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
    261c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
		dopen = DOPEN_TEMP;
    2620:	505f444d 	subspl	r4, pc, sp, asr #8
		cclose ();
    2624:	5f504f52 	svcpl	0x00504f52
}
    2628:	735f5854 	cmpvc	pc, #84, 16	; 0x540000
int ser_out (word st, const char *m) {
    262c:	6c646900 			; <UNDEFINED> instruction: 0x6c646900
	if ((prcs = running (__outserial)) != 0) {
    2630:	00704f65 	rsbseq	r4, r0, r5, ror #30
    2634:	71657266 	cmnvc	r5, r6, ror #4
    2638:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
		join (prcs, st);
    263c:	50700079 	rsbspl	r0, r0, r9, ror r0
		release;
    2640:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
	if (*m)
    2644:	00626154 	rsbeq	r6, r2, r4, asr r1
		prcs = strlen (m) +1;
    2648:	73467363 	movtvc	r7, #25443	; 0x6363
    264c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2650:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
    2654:	7472735f 	ldrbtvc	r7, [r2], #-863	; 0xfffffca1
    2658:	73466200 	movtvc	r6, #25088	; 0x6200
		umwait (st);
    265c:	0066664f 	rsbeq	r6, r6, pc, asr #12
    2660:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
		prcs =  m [1] + 3;
    2664:	694d6769 	stmdbvs	sp, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
	if (*m)
    2668:	64416373 	strbvs	r6, [r1], #-883	; 0xfffffc8d
		strcpy (buf, m);
    266c:	6e650063 	cdpvs	0, 6, cr0, cr5, cr3, {3}
    2670:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
	if (runstrand (__outserial, buf) == 0) {
    2674:	43620065 	cmnmi	r2, #101	; 0x65
    2678:	64416b68 	strbvs	r6, [r1], #-2920	; 0xfffff498
		ufree (buf);
    267c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    2680:	6e650073 	mcrvs	0, 3, r0, cr5, cr3, {3}
		memcpy (buf, m, prcs);
    2684:	47726574 			; <UNDEFINED> instruction: 0x47726574
    2688:	73666e65 	cmnvc	r6, #1616	; 0x650
    268c:	6570436b 	ldrbvs	r4, [r0, #-875]!	; 0xfffffc95
}
    2690:	63746150 	cmnvs	r4, #80, 2
    2694:	66720068 	ldrbtvs	r0, [r2], -r8, rrx
int ser_in (word st, char *buf, int len) {
    2698:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    269c:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
	if (len == 0)
    26a0:	535f434e 	cmppl	pc, #939524097	; 0x38000001
	if (__inpline == NULL) {
    26a4:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
		if ((prcs = running (__inserial)) == 0) {
    26a8:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
    26ac:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
			prcs = runthread (__inserial);
    26b0:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    26b4:	535f444d 	cmppl	pc, #1291845632	; 0x4d000000
			if (prcs == 0) {
    26b8:	5f434e59 	svcpl	0x00434e59
				npwait (st);
    26bc:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
		release;
    26c0:	41525f54 	cmpmi	r2, r4, asr pc
		join (prcs, st);
    26c4:	00745f54 	rsbseq	r5, r4, r4, asr pc
    26c8:	6c796170 	ldfvse	f6, [r9], #-448	; 0xfffffe40
	if (*__inpline == NULL) // bin cmd
    26cc:	6e006e65 	cdpvs	14, 0, cr6, cr0, cr5, {3}
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    26d0:	73526d75 	cmpvc	r2, #7488	; 0x1d40
	if (prcs >= len)
    26d4:	75426973 	strbvc	r6, [r2, #-2419]	; 0xfffff68d
		prcs = len-1;
    26d8:	74007973 	strvc	r7, [r0], #-2419	; 0xfffff68d
	memcpy (buf, __inpline, prcs);
    26dc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    26e0:	73556200 	cmpvc	r5, #0, 4
    26e4:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
	ufree (__inpline);
    26e8:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
	__inpline = NULL;
    26ec:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
	if (*buf) // if it's NULL, it's a bin cmd
    26f0:	6b73666e 	blvs	1cdc0b0 <__ccfg+0x1cbc108>
		buf [prcs] = '\0';
    26f4:	50737953 	rsbspl	r7, r3, r3, asr r9
}
    26f8:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
		prcs = strlen (__inpline);
    26fc:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    2700:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
		return 0;
    2704:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    2708:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    270c:	61640066 	cmnvs	r4, r6, rrx
int ser_outf (word st, const char *m, ...) {
    2710:	75516174 	ldrbvc	r6, [r1, #-372]	; 0xfffffe8c
    2714:	5f657565 	svcpl	0x00657565
	if ((prcs = running (__outserial)) != 0) {
    2718:	536e0074 	cmnpl	lr, #116	; 0x74
    271c:	0070696b 	rsbseq	r6, r0, fp, ror #18
		join (prcs, st);
    2720:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    2724:	52006469 	andpl	r6, r0, #1761607680	; 0x69000000
		release;
    2728:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
	if ((buf = vform (NULL, m, ap)) == NULL) {
    272c:	6f725064 	svcvs	0x00725064
    2730:	00785470 	rsbseq	r5, r8, r0, ror r4
    2734:	46666572 			; <UNDEFINED> instruction: 0x46666572
		umwait (st);
    2738:	00716572 	rsbseq	r6, r1, r2, ror r5
    273c:	43434652 	movtmi	r4, #13906	; 0x3652
	if (runstrand (__outserial, buf) == 0) {
    2740:	6b636f6c 	blvs	18de4f8 <__ccfg+0x18be550>
    2744:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2748:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
		ufree (buf);
    274c:	67676972 			; <UNDEFINED> instruction: 0x67676972
		npwait (st);
    2750:	79547265 	ldmdbvc	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
}
    2754:	4b006570 	blmi	1bd1c <__exidx_end+0x1611c>
    2758:	2f504d54 	svccs	0x00504d54
    275c:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    2760:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
int ser_inf (word st, const char *fmt, ...) {
    2764:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    2768:	5f766374 	svcpl	0x00766374
	if (fmt == NULL)
    276c:	5f74756f 	svcpl	0x0074756f
	if (__inpline == NULL) {
    2770:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
		if ((prcs = running (__inserial)) == 0) {
    2774:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2778:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
			prcs = runthread (__inserial);
    277c:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    2780:	6374006c 	cmnvs	r4, #108	; 0x6c
			if (prcs == 0) {
    2784:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
				npwait (st);
    2788:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
		release;
    278c:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
		join (prcs, st);
    2790:	665f7663 	ldrbvs	r7, [pc], -r3, ror #12
    2794:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
	va_start (ap, fmt);
    2798:	006c6c75 	rsbeq	r6, ip, r5, ror ip
	prcs = vscan (__inpline, fmt, ap);
    279c:	5f766374 	svcpl	0x00766374
    27a0:	5f6f6c63 	svcpl	0x006f6c63
	ufree (__inpline);
    27a4:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
	__inpline = NULL;
    27a8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
}
    27ac:	746d785f 	strbtvc	r7, [sp], #-2143	; 0xfffff7a1
    27b0:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    27b4:	6f62006c 	svcvs	0x0062006c
		return 0;
    27b8:	73646e75 	cmnvc	r4, #1872	; 0x750
    27bc:	73646e00 	cmnvc	r4, #0, 28
    27c0:	756e5f63 	strbvc	r5, [lr, #-3939]!	; 0xfffff09d
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27c4:	71006c6c 	tstvc	r0, ip, ror #24
    27c8:	746e6175 	strbtvc	r6, [lr], #-373	; 0xfffffe8b
    27cc:	6f682f00 	svcvs	0x00682f00
	RF_cmdFs.frequency = 
    27d0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
}
    27d4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    27d8:	442f6e65 	strtmi	r6, [pc], #-3685	; 27e0 <plugch+0x1c>
    27dc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    27e0:	4f2f706f 	svcmi	0x002f706f
static int option (int opt, address val) {
    27e4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    27e8:	502f5445 	eorpl	r5, pc, r5, asr #8
    27ec:	534f4349 	movtpl	r4, #62281	; 0xf349
    27f0:	6369502f 	cmnvs	r9, #47	; 0x2f
    27f4:	502f534f 	eorpl	r5, pc, pc, asr #6
    27f8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    27fc:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    2800:	2f6c6169 	svccs	0x006c6169
    2804:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 18ad <update_n_wake+0x89>
    2808:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    280c:	2e6c6169 	powcsez	f6, f4, #1.0
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2810:	5f5f0063 	svcpl	0x005f0063
    2814:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
			goto RVal;
    2818:	61697265 	cmnvs	r9, r5, ror #4
			_BIS (dstate, DSTATE_RXON);
    281c:	5f5f006c 	svcpl	0x005f006c
    2820:	575f4d4f 	ldrbpl	r4, [pc, -pc, asr #26]
	int ret = 0;
    2824:	45544952 	ldrbmi	r4, [r4, #-2386]	; 0xfffff6ae
			p_trigger (drvprcs, qevent);
    2828:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    282c:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    2830:	006c6169 	rsbeq	r6, ip, r9, ror #2
    2834:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2780 <ser_inf+0x1c>
    2838:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    283c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    2840:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2844:	6f746b73 	svcvs	0x00746b73
    2848:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    284c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
}
    2850:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			_BIC (dstate, DSTATE_RXON);
    2854:	2f534f43 	svccs	0x00534f43
    2858:	4f636950 	svcmi	0x00636950
			statid = (val == NULL) ? 0 : *val;
    285c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2860:	2f736269 	svccs	0x00736269
	int ret = 0;
    2864:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
			ret = (int) statid;
    2868:	5f2f6c61 	svcpl	0x002f6c61
	if (val != NULL)
    286c:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
		*val = ret;
    2870:	61697265 	cmnvs	r9, r5, ror #4
			ret = rbuffl + 2;
    2874:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    2878:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 27c4 <plugch>
			if (val != NULL) {
    287c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
				memcpy (val, &rxstat,
    2880:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    2884:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
				memset (&rxstat, 0, 
    2888:	6f746b73 	svcvs	0x00746b73
    288c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			if (val == NULL)
    2890:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    2894:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2898:	2f534f43 	svccs	0x00534f43
				utimer_set (bckf_timer, *val);
    289c:	4f636950 	svcmi	0x00636950
    28a0:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    28a4:	2f736269 	svccs	0x00736269
			for (ret = 0; ret < 8; ret++)
    28a8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
				if (RF_cmdPropRadioDivSetup.txPower
    28ac:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
					== patable [ret])
    28b0:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
				if (RF_cmdPropRadioDivSetup.txPower
    28b4:	4100632e 	tstmi	r0, lr, lsr #6
			for (ret = 0; ret < 8; ret++)
    28b8:	6e696167 	powvsez	f6, f1, f7
    28bc:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28c0:	5f5f0063 	svcpl	0x005f0063
    28c4:	765f6970 			; <UNDEFINED> instruction: 0x765f6970
    28c8:	72617066 	rsbvc	r7, r1, #102	; 0x66
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    28cc:	76006573 			; <UNDEFINED> instruction: 0x76006573
    28d0:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
			_BIS (dstate, DSTATE_IRST);
    28d4:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    28d8:	645f7972 	ldrbvs	r7, [pc], #-2418	; 28e0 <option+0xfc>
    28dc:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
			ret = (int) channel;
    28e0:	682f0064 	stmdavs	pc!, {r2, r5, r6}	; <UNPREDICTABLE>
			goto RVal;
    28e4:	2f656d6f 	svccs	0x00656d6f
				(*val > 7) ? 7 : *val;
    28e8:	70657473 	rsbvc	r7, r5, r3, ror r4
    28ec:	2f6e6568 	svccs	0x006e6568
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    28f0:	6b736544 	blvs	1cdbe08 <__ccfg+0x1cbbe60>
    28f4:	2f706f74 	svccs	0x00706f74
			plugch ();
    28f8:	4f534c4f 	svcmi	0x00534c4f
			_BIS (dstate, DSTATE_IRST);
    28fc:	2f54454e 	svccs	0x0054454e
    2900:	4f434950 	svcmi	0x00434950
			ret = (int) vrate;
    2904:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2908:	2f534f63 	svccs	0x00534f63
    290c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    2910:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    2914:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    2918:	6373762f 	cmnvs	r3, #49283072	; 0x2f00000
    291c:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    2920:	63737600 	cmnvs	r3, #0, 12
    2924:	52006e61 	andpl	r6, r0, #1552	; 0x610
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2928:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    292c:	6c5f645f 	cfldrdvs	mvd6, [pc], {95}	; 0x5f
    2930:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    2934:	6f682f00 	svcvs	0x00682f00
			syserror (EREQPAR, "cc13 op");
    2938:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    293c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2940:	442f6e65 	strtmi	r6, [pc], #-3685	; 2948 <option+0x164>
    2944:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2948:	4f2f706f 	svcmi	0x002f706f
    294c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2950:	502f5445 	eorpl	r5, pc, r5, asr #8
    2954:	534f4349 	movtpl	r4, #62281	; 0xf349
    2958:	6369502f 	cmnvs	r9, #47	; 0x2f
    295c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    2960:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    2964:	6d732f58 	ldclvs	15, cr2, [r3, #-352]!	; 0xfffffea0
    2968:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    296c:	65735f66 	ldrbvs	r5, [r3, #-3942]!	; 0xfffff09a
    2970:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
static void issue_cmd (lword cmd) {
    2974:	6c5f7367 	mrrcvs	3, 6, r7, pc, cr7	; <UNPREDICTABLE>
    2978:	72685f70 	rsbvc	r5, r8, #112, 30	; 0x1c0
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    297c:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    2980:	70746e69 	rsbsvc	r6, r4, r9, ror #28
    2984:	745f7274 	ldrbvc	r7, [pc], #-628	; 298c <issue_cmd+0x18>
		if (res != 0x86)
    2988:	764f7000 	strbvc	r7, [pc], -r0
			syserror (EHARDWARE, "hang ic0");
    298c:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2990:	00736564 	rsbseq	r6, r3, r4, ror #10
		if (cnt-- == 0) {
    2994:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			diag ("HUP %lx %lx", cmd, res);
    2998:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    299c:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
			syserror (EHARDWARE, "hang ic0");
    29a0:	45717249 	ldrbmi	r7, [r1, #-585]!	; 0xfffffdb7
		udelay (1);
    29a4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29a8:	53006465 	movwpl	r6, #1125	; 0x465
}
    29ac:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    29b0:	41697061 	cmnmi	r9, r1, rrx
    29b4:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    29b8:	6c655369 	stclvs	3, cr5, [r5], #-420	; 0xfffffe5c
static void rx_de () {
    29bc:	00746365 	rsbseq	r6, r4, r5, ror #6
	if ((dstate & DSTATE_RXAC) == 0)
    29c0:	52545046 	subspl	r5, r4, #70	; 0x46
    29c4:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29c8:	4f565f44 	svcmi	0x00565f44
	_BIC (dstate, DSTATE_RXAC);
    29cc:	545f4449 	ldrbpl	r4, [pc], #-1097	; 29d4 <rx_de+0x18>
    29d0:	524f4e00 	subpl	r4, pc, #0, 28
}
    29d4:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    29d8:	70635550 	rsbvc	r5, r3, r0, asr r5
    29dc:	00646973 	rsbeq	r6, r4, r3, ror r9
static void rf_off () {
    29e0:	4f524f4e 	svcmi	0x00524f4e
	if ((dstate & DSTATE_RFON) == 0)
    29e4:	50435f4d 	subpl	r5, r3, sp, asr #30
    29e8:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
	IntDisable (INT_RFC_CPE_0);
    29ec:	53006569 	movwpl	r6, #1385	; 0x569
    29f0:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    29f4:	56697061 	strbtpl	r7, [r9], -r1, rrx
	RFCAdi3VcoLdoVoltageMode (false);
    29f8:	0064696f 	rsbeq	r6, r4, pc, ror #18
	RFCSynthPowerDown ();
    29fc:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a00:	5f38746e 	svcpl	0x0038746e
    2a04:	2f2e0074 	svccs	0x002e0074
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a08:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a0c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a10:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a14:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2a18:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    2a1c:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
	_BIC (dstate, DSTATE_RFON);
    2a20:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    2a24:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
}
    2a28:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    2a2c:	31303220 	teqcc	r0, r0, lsr #4
    2a30:	32353035 	eorscc	r3, r5, #53	; 0x35
    2a34:	72282039 	eorvc	r2, r8, #57	; 0x39
    2a38:	61656c65 	cmnvs	r5, r5, ror #24
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a3c:	20296573 	eorcs	r6, r9, r3, ror r5
    2a40:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
    2a44:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
		if (cmd->status == tstat)
    2a48:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
		if (timeout-- == 0) {
    2a4c:	5f342d64 	svcpl	0x00342d64
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a50:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    2a54:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    2a58:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
			syserror (EHARDWARE, "rt2");
    2a5c:	6f697369 	svcvs	0x00697369
    2a60:	3232206e 	eorscc	r2, r2, #110	; 0x6e
		udelay (1);
    2a64:	37373937 			; <UNDEFINED> instruction: 0x37373937
		if (cmd->status == tstat)
    2a68:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
}
    2a6c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    2a70:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2a74:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
    2a78:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
static void rf_on () {
    2a7c:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
    2a80:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
	OSCHF_TurnOnXosc();
    2a84:	734f2d20 	movtvc	r2, #64800	; 0xfd20
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2a88:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
    2a8c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
    2a90:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
    2a94:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a98:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
    2a9c:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2aa0:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2aa4:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
	issue_cmd (
    2aa8:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
    2aac:	6f697463 	svcvs	0x00697463
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ab0:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
    2ab4:	6f697463 	svcvs	0x00697463
    2ab8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
   pPatchTab[80] = 0;
    2abc:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
   } while (--nIterations);
    2ac0:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
   pPatchTab[53] = 2;
    2ac4:	6f697463 	svcvs	0x00697463
    2ac8:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
   pPatchTab[55] = 3;
    2acc:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
   pPatchTab[110] = 4;
    2ad0:	74506600 	ldrbvc	r6, [r0], #-1536	; 0xfffffa00
   pPatchTab[107] = 5;
    2ad4:	50460072 	subpl	r0, r6, r2, ror r0
   pPatchTab[65] = 6;
    2ad8:	565f5254 			; <UNDEFINED> instruction: 0x565f5254
    2adc:	5f44494f 	svcpl	0x0044494f
   pPatchTab[57] = 1;
    2ae0:	544e4955 	strbpl	r4, [lr], #-2389	; 0xfffff6ab
   pIrqPatch[1] = _IRQ_PATCH_0;
    2ae4:	00545f38 	subseq	r5, r4, r8, lsr pc
   const uint32_t *pS = patchGenfskRfe;
    2ae8:	4a5c3a43 	bmi	17113fc <__ccfg+0x16f1454>
      t2 = *pS++;
    2aec:	696b6e65 	stmdbvs	fp!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
      t4 = *pS++;
    2af0:	6a5c736e 	bvs	171f8b0 <__ccfg+0x16ff908>
      t6 = *pS++;
    2af4:	5c73626f 	lfmpl	f6, 2, [r3], #-444	; 0xfffffe44
      t8 = *pS++;
    2af8:	72475746 	subvc	r5, r7, #18350080	; 0x1180000
      *pD++ = t1;
    2afc:	2d70756f 	cfldr64cs	mvdx7, [r0, #-444]!	; 0xfffffe44
      *pD++ = t2;
    2b00:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      *pD++ = t3;
    2b04:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
      *pD++ = t5;
    2b08:	6f775c62 	svcvs	0x00775c62
      *pD++ = t7;
    2b0c:	70736b72 	rsbsvc	r6, r3, r2, ror fp
   } while (--nIterations);
    2b10:	5c656361 	stclpl	3, cr6, [r5], #-388	; 0xfffffe7c
    2b14:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
      *pD++ = t8;
    2b18:	5c73656c 	cfldr64pl	mvdx6, [r3], #-432	; 0xfffffe50
   } while (--nIterations);
    2b1c:	7074756f 	rsbsvc	r7, r4, pc, ror #10
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b20:	635c7475 	cmpvs	ip, #1962934272	; 0x75000000
   *pD++ = t2;
    2b24:	78333163 	ldmdavc	r3!, {r0, r1, r5, r6, r8, ip, sp}
   *pD++ = t3;
    2b28:	68635f78 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   *pD++ = t4;
    2b2c:	5f325f61 	svcpl	0x00325f61
   *pD++ = t5;
    2b30:	78655f30 	stmdavc	r5!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    2b34:	72645c74 	rsbvc	r5, r4, #116, 24	; 0x7400
	RFCAdi3VcoLdoVoltageMode (true);
    2b38:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2b3c:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
       	RFCRfTrimSet (&rfTrim);
    2b40:	5c6e6962 			; <UNDEFINED> instruction: 0x5c6e6962
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b44:	00636367 	rsbeq	r6, r3, r7, ror #6
    2b48:	53387475 	teqpl	r8, #1962934272	; 0x75000000
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b4c:	616e6769 	cmnvs	lr, r9, ror #14
    2b50:	4f4e006c 	svcmi	0x004e006c
	issue_cmd ((lword)&cmd_srt);
    2b54:	5f4d4f52 	svcpl	0x004d4f52
    2b58:	424e4f41 	submi	r4, lr, #260	; 0x104
	issue_cmd ((lword)&RF_cmdFs);
    2b5c:	6f4d7461 	svcvs	0x004d7461
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b60:	6d65546e 	cfstrdvs	mvd5, [r5, #-440]!	; 0xfffffe48
    2b64:	61726570 	cmnvs	r2, r0, ror r5
    2b68:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
	IntEnable (INT_RFC_CPE_0);
    2b6c:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
	_BIC (dstate, DSTATE_IRST);
    2b70:	00436765 	subeq	r6, r3, r5, ror #14
    2b74:	746c6f76 	strbtvc	r6, [ip], #-3958	; 0xfffff08a
    2b78:	53656761 	cmnpl	r5, #25427968	; 0x1840000
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2b7c:	65706f6c 	ldrbvs	r6, [r0, #-3948]!	; 0xfffff094
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2b80:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
	IntEnable (INT_RFC_CPE_0);
    2b84:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    2b88:	5f00745f 	svcpl	0x0000745f
}
    2b8c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	IntEnable (INT_RFC_CPE_0);
    2b90:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2b94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2b98:	2f2e2e2f 	svccs	0x002e2e2f
    2b9c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2ba4 <rf_on.part.0+0x130>
    2ba0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2ba4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2ba8:	6e6f612f 	powvsep	f6, f7, #10.0
    2bac:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    2bb0:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    2bb4:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
    2bb8:	6f43706d 	svcvs	0x0043706d
    2bbc:	63657272 	cmnvs	r5, #536870919	; 0x20000007
    2bc0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2bc4:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
    2bc8:	5464656e 	strbtpl	r6, [r4], #-1390	; 0xfffffa92
    2bcc:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2bd0:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
    2bd4:	61566e72 	cmpvs	r6, r2, ror lr
    2bd8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2bdc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2be0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2be4:	53746e65 	cmnpl	r4, #1616	; 0x650
    2be8:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
    2bec:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ab8 <rf_on.part.0+0x44>
    2bf0:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
static void rx_int_enable () {
    2bf4:	43435452 	movtmi	r5, #13394	; 0x3452
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2bf8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2bfc:	6f43746e 	svcvs	0x0043746e
    2c00:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
    2c04:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c08:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c0c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2c10:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c14:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    2c18:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c1c:	00646165 	rsbeq	r6, r4, r5, ror #2
    2c20:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    2c24:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c28:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c2c:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c30:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
		if (db->status == DATA_ENTRY_FINISHED) {
    2c34:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c38:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    2c3c:	524f4e00 	subpl	r4, pc, #0, 28
			nr++;
    2c40:	415f4d4f 	cmpmi	pc, pc, asr #26
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c44:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    2c48:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
    2c4c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c50:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
				__dp [pl + 1] = __dp [pl] - 128;
    2c54:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
				pl = __dp [1] + 2;
    2c58:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
				__dp [pl + 1] = __dp [pl] - 128;
    2c5c:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
    2c60:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
				__dp [pl] = 0;
    2c64:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c68:	63657300 	cmnvs	r5, #0, 6
    2c6c:	53646e41 	cmnpl	r4, #1040	; 0x410
    2c70:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
			db->status = DATA_ENTRY_PENDING;
    2c74:	2f2e0063 	svccs	0x002e0063
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c78:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2c7c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
				diag ("BAD RX");
    2c80:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2c84:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
	if (nr) {
    2c88:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c8c:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
}
    2c90:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2c94:	7a697300 	bvc	1a5f89c <__ccfg+0x1a3f8f4>
    2c98:	70797465 	rsbsvc	r7, r9, r5, ror #8
    2c9c:	4f4e0065 	svcmi	0x004e0065
}
    2ca0:	5f4d4f52 	svcpl	0x004d4f52
    2ca4:	62555043 	subsvs	r5, r5, #67	; 0x43
    2ca8:	70657361 	rsbvc	r7, r5, r1, ror #6
    2cac:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
    2cb0:	4f4e0074 	svcmi	0x004e0074
    2cb4:	5f4d4f52 	svcpl	0x004d4f52
    2cb8:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
    2cbc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    2cc0:	33697500 	cmncc	r9, #0, 10
thread (cc1350_driver)
    2cc4:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
    2cc8:	33697500 	cmncc	r9, #0, 10
    2ccc:	756f4332 	strbvc	r4, [pc, #-818]!	; 29a2 <issue_cmd+0x2e>
    2cd0:	2e00746e 	cdpcs	4, 0, cr7, cr0, cr14, {3}
    2cd4:	2f2e2e2f 	svccs	0x002e2e2f
		if (dstate & DSTATE_IRST) {
    2cd8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2cdc:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2ce0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
			rf_off ();
    2ce4:	2f62696c 	svccs	0x0062696c
			_BIC (dstate,
    2ce8:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    2cec:	4f4e0063 	svcmi	0x004e0063
		if (dstate & DSTATE_RXAC) {
    2cf0:	5f4d4f52 	svcpl	0x004d4f52
    2cf4:	70555043 	subsvc	r5, r5, r3, asr #32
			if ((dstate & DSTATE_RXON) == 0)
    2cf8:	616d6972 	smcvs	54930	; 0xd692
				rx_de ();
    2cfc:	4e006b73 	vmovmi.16	d0[1], r6
		if (paylen == 0) {
    2d00:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2bcc <rf_on.part.0+0x158>
    2d04:	43534f5f 	cmpmi	r3, #380	; 0x17c
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d08:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2d0c:	756f536b 	strbvc	r5, [pc, #-875]!	; 29a9 <issue_cmd+0x35>
    2d10:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    2d14:	46007465 	strmi	r7, [r0], -r5, ror #8
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d18:	5f525450 	svcpl	0x00525450
    2d1c:	54454c46 	strbpl	r4, [r5], #-3142	; 0xfffff3ba
    2d20:	52454843 	subpl	r4, r5, #4390912	; 0x430000
    2d24:	545f3233 	ldrbpl	r3, [pc], #-563	; 2d2c <cc1350_driver+0x68>
    2d28:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2d2c:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
    2d30:	41564444 	cmpmi	r6, r4, asr #8
    2d34:	00545f4c 	subseq	r5, r4, ip, asr #30
		} else if (dstate & DSTATE_RXON) {
    2d38:	4f524f4e 	svcmi	0x00524f4e
	if (dstate & DSTATE_RFON)
    2d3c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d40:	6f6c4343 	svcvs	0x006c4343
		re->status = DATA_ENTRY_PENDING;
    2d44:	6f536b63 	svcvs	0x00536b63
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d48:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
	issue_cmd ((lword)&RF_cmdPropRx);
    2d4c:	00746547 	rsbseq	r6, r4, r7, asr #10
	_BIS (dstate, DSTATE_RXAC);
    2d50:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2d54:	0063734f 	rsbeq	r7, r3, pc, asr #6
    2d58:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2d5c:	6f437463 	svcvs	0x00437463
	if (dstate & DSTATE_RXAC)
    2d60:	5242706d 	subpl	r7, r2, #109	; 0x6d
    2d64:	46006665 	strmi	r6, [r0], -r5, ror #12
				if (statid != 0xffff)
    2d68:	5f525450 	svcpl	0x00525450
    2d6c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2d70:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
				RF_cmdPropTx.pktLen = (byte) paylen;
    2d74:	00545f34 	subseq	r5, r4, r4, lsr pc
		if (paylen == 0) {
    2d78:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
			wait (qevent, DR_LOOP);
    2d7c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2d80:	435f6e4f 	cmpmi	pc, #1264	; 0x4f0
			if (dstate & DSTATE_RXAC) {
    2d84:	4f4e0056 	svcmi	0x004e0056
    2d88:	5f4d4f52 	svcpl	0x004d4f52
				rx_int_enable ();
    2d8c:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
			release;
    2d90:	74415f46 	strbvc	r5, [r1], #-3910	; 0xfffff0ba
			} else if (dstate & DSTATE_RFON) {
    2d94:	706d6574 	rsbvc	r6, sp, r4, ror r5
				delay (offdelay, DR_GOOF);
    2d98:	536f5474 	cmnpl	pc, #116, 8	; 0x74000000
    2d9c:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2da0:	586f5468 	stmdapl	pc!, {r3, r5, r6, sl, ip, lr}^	; <UNPREDICTABLE>
		if (bckf_timer) {
    2da4:	0063736f 	rsbeq	r7, r3, pc, ror #6
			wait (qevent, DR_LOOP);
    2da8:	6f534648 	svcvs	0x00534648
    2dac:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2db0:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
			delay (bckf_timer, DR_LOOP);
    2db4:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    2db8:	74006863 	strvc	r6, [r0], #-2147	; 0xfffff79d
			if (dstate & DSTATE_RXAC)
    2dbc:	58706d65 	ldmdapl	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    2dc0:	4f63736f 	svcmi	0x0063736f
	if (dstate & DSTATE_RFON)
    2dc4:	6e006666 	cfmadd32vs	mvax3, mvfx6, mvfx0, mvfx6
    2dc8:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
		rx_de ();
    2dcc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
		RF_cmdPropTx . status = 0;
    2dd0:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2dd4:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2dd8:	61700073 	cmnvs	r0, r3, ror r0
    2ddc:	506d6172 	rsbpl	r6, sp, r2, ror r1
		issue_cmd ((lword)&cmd_cs);
    2de0:	61700031 	cmnvs	r0, r1, lsr r0
		if (dstate & DSTATE_IRST)
    2de4:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2de8:	61700032 	cmnvs	r0, r2, lsr r0
    2dec:	506d6172 	rsbpl	r6, sp, r2, ror r1
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2df0:	5f5f0033 	svcpl	0x005f0033
    2df4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
			delay (1, DR_XMIT);
    2df8:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2e00 <cc1350_driver+0x13c>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2dfc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2e00:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2e04:	56524553 			; <UNDEFINED> instruction: 0x56524553
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e08:	5f334445 	svcpl	0x00334445
    2e0c:	72700054 	rsbsvc	r0, r0, #84	; 0x54
				RF_cmdPropTx . status = 0;
    2e10:	6f697665 	svcvs	0x00697665
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e14:	74537375 	ldrbvc	r7, [r3], #-885	; 0xfffffc8b
				issue_cmd ((lword)&RF_cmdPropTx);
    2e18:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
				proceed (DR_XMIT);
    2e1c:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2e20:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
			txtries++;
    2e24:	2f2e0073 	svccs	0x002e0073
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e28:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2e2c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2e30:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e34:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
		goto DR_LOOP__;
    2e38:	6f2f6269 	svcvs	0x002f6269
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e3c:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
		paylen = 0;
    2e40:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e44:	736f5865 	cmnvc	pc, #6619136	; 0x650000
		txtries = 0;
    2e48:	61745363 	cmnvs	r4, r3, ror #6
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e4c:	5f656c62 	svcpl	0x00656c62
    2e50:	74005643 	strvc	r5, [r0], #-1603	; 0xfffff9bd
    2e54:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    2e58:	61746c65 	cmnvs	r4, r5, ror #24
    2e5c:	776f6c00 	strbvc	r6, [pc, -r0, lsl #24]!
		    tcvphy_top (physid) == NULL)
    2e60:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    2e64:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 2ca0 <rx_int_enable+0xac>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e68:	65520064 	ldrbvs	r0, [r2, #-100]	; 0xffffff9c
    2e6c:	44746573 	ldrbtmi	r6, [r4], #-1395	; 0xfffffa8d
			rf_off ();
    2e70:	63697665 	cmnvs	r9, #105906176	; 0x6500000
endthread
    2e74:	4f4e0065 	svcmi	0x004e0065
    2e78:	5f4d4f52 	svcpl	0x004d4f52
    2e7c:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2e80:	75545f46 	ldrbvc	r5, [r4, #-3910]	; 0xfffff0ba
    2e84:	6e4f6e72 	mcrvs	14, 2, r6, cr15, cr2, {3}
    2e88:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2e8c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2e90:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2e94:	44544553 	ldrbmi	r4, [r4], #-1363	; 0xfffffaad
    2e98:	545f5645 	ldrbpl	r5, [pc], #-1605	; 2ea0 <cc1350_driver+0x1dc>
    2e9c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2ea0:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2ea4:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2ea8:	5f324445 	svcpl	0x00324445
    2eac:	65520054 	ldrbvs	r0, [r2, #-84]	; 0xffffffac
    2eb0:	76726573 			; <UNDEFINED> instruction: 0x76726573
void RFCCPE0IntHandler (void) {
    2eb4:	6f4c6465 	svcvs	0x004c6465
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eb8:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
		_BIS (dstate, DSTATE_IRST);
    2ebc:	00336e6f 	eorseq	r6, r3, pc, ror #28
    2ec0:	56706d61 	ldrbtpl	r6, [r0], -r1, ror #26
    2ec4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2ec8:	73655200 	cmnvc	r5, #0, 4
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2ecc:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2ed0:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
	p_trigger (drvprcs, qevent);
    2ed4:	6f697461 	svcvs	0x00697461
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2ed8:	4e00346e 	cdpmi	4, 0, cr3, cr0, cr14, {3}
    2edc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2da8 <cc1350_driver+0xe4>
    2ee0:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2ee4:	535f4648 	cmppl	pc, #72, 12	; 0x4800000
    2ee8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2eec:	526f5468 	rsbpl	r5, pc, #104, 8	; 0x68000000
    2ef0:	63734f63 	cmnvs	r3, #396	; 0x18c
    2ef4:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
    2ef8:	5866664f 	stmdapl	r6!, {r0, r1, r2, r3, r6, r9, sl, sp, lr}^
    2efc:	0063736f 	rsbeq	r7, r3, pc, ror #6
	RISE_N_SHINE;
    2f00:	52545046 	subspl	r5, r4, #70	; 0x46
    2f04:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    2f08:	5f4c4156 	svcpl	0x004c4156
}
    2f0c:	65530054 	ldrbvs	r0, [r3, #-84]	; 0xffffffac
    2f10:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2f14:	43434441 	movtmi	r4, #13377	; 0x3441
    2f18:	42706d6f 	rsbsmi	r6, r0, #7104	; 0x1bc0
    2f1c:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    2f20:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
void phys_cc1350 (int phy, int mbs) {
    2f24:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
	if (rbuffl != 0)
    2f28:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2f2c:	5678614d 	ldrbtpl	r6, [r8], -sp, asr #2
		syserror (ETOOMANY, "cc13");
    2f30:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
		syserror (EREQPAR, "cc13 mb");
    2f34:	524f4e00 	subpl	r4, pc, #0, 28
	if (mbs == 0)
    2f38:	4f5f4d4f 	svcmi	0x005f4d4f
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f3c:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
		syserror (EREQPAR, "cc13 mb");
    2f40:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    2f44:	616c6552 	cmnvs	ip, r2, asr r5
	i = 0;
    2f48:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
	rbuffl = (byte) mbs;
    2f4c:	71657246 	cmnvc	r5, r6, asr #4
		db->config.type = 0;	// General (data in structure)
    2f50:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
	rbuffl = (byte) mbs;
    2f54:	66664f79 	uqsub16vs	r4, r6, r9
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f58:	47746573 			; <UNDEFINED> instruction: 0x47746573
    2f5c:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
		if (db == NULL)
    2f60:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e2c <cc1350_driver+0x168>
			syserror (EMALLOC, "cc13");
    2f64:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2f68:	445f4648 	ldrbmi	r4, [pc], #-1608	; 2f70 <phys_cc1350+0x4c>
    2f6c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
		db->status = DATA_ENTRY_PENDING;
    2f70:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
		if (i)
    2f74:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
			da->pNextEntry = (byte*) db;
    2f78:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
		db->length = rbuffl + 2;
    2f7c:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2f80:	00656475 	rsbeq	r6, r5, r5, ror r4
		db->config.type = 0;	// General (data in structure)
    2f84:	6e61654d 	cdpvs	5, 6, cr6, cr1, cr13, {2}
		db->length = rbuffl + 2;
    2f88:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
	db->pNextEntry = (byte*) re;
    2f8c:	50460065 	subpl	r0, r6, r5, rrx
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2f90:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2f94:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
	if (rbuffs == NULL)
    2f98:	31444556 	cmpcc	r4, r6, asr r5
	rbuffs->pCurrEntry = (byte*) re;
    2f9c:	4300545f 	movwmi	r5, #1119	; 0x45f
	rbuffs->pLastEntry = NULL;
    2fa0:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    2fa4:	656c4600 	strbvs	r4, [ip, #-1536]!	; 0xfffffa00
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fa8:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fac:	00323372 	eorseq	r3, r2, r2, ror r3
    2fb0:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2fb4:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
	rbuffl -= 2;
    2fb8:	50460064 	subpl	r0, r6, r4, rrx
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fbc:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2e74 <cc1350_driver+0x1b0>
	rbuffl -= 2;
    2fc0:	564e4145 	strbpl	r4, [lr], -r5, asr #2
	physid = phy;
    2fc4:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2fcc <phys_cc1350+0xa8>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fc8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fcc:	44415f52 	strbmi	r5, [r1], #-3922	; 0xfffff0ae
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fd0:	4d4f4343 	stclmi	3, cr4, [pc, #-268]	; 2ecc <RFCCPE0IntHandler+0x18>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    2fd4:	4e494250 	mcrmi	2, 2, r4, cr9, cr0, {2}
    2fd8:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
	utimer_add (&bckf_timer);
    2fdc:	5f525450 	svcpl	0x00525450
	drvprcs = runthread (cc1350_driver);
    2fe0:	504d4f43 	subpl	r4, sp, r3, asr #30
    2fe4:	46455242 	strbmi	r5, [r5], -r2, asr #4
    2fe8:	5300545f 	movwpl	r5, #1119	; 0x45f
	if (drvprcs == 0)
    2fec:	63656c65 	cmnvs	r5, #25856	; 0x6500
		syserror (ERESOURCE, "cc13");
    2ff0:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2e28 <cc1350_driver+0x164>
    2ff4:	6e494170 	mcrvs	1, 2, r4, cr9, cr0, {3}
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2ff8:	00747570 	rsbseq	r7, r4, r0, ror r5
    2ffc:	52545046 	subspl	r5, r4, #70	; 0x46
    3000:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2e8c <cc1350_driver+0x1c8>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3004:	4e494150 	mcrmi	1, 2, r4, cr9, cr0, {2}
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3008:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    300c:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    3010:	61746c65 	cmnvs	r4, r5, ror #24
    3014:	6f003258 	svcvs	0x00003258
    3018:	66486373 			; <UNDEFINED> instruction: 0x66486373
    301c:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3020:	00736c61 	rsbseq	r6, r3, r1, ror #24
    3024:	534f5048 	movtpl	r5, #61512	; 0xf048
    3028:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xfffff0bd
    302c:	6572466c 	ldrbvs	r4, [r2, #-1644]!	; 0xfffff994
	plugch ();
    3030:	66664f71 	uqsub16vs	r4, r6, r1
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3034:	00746573 	rsbseq	r6, r4, r3, ror r5
    3038:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    303c:	6d695461 	cfstrdvs	mvd5, [r9, #-388]!	; 0xfffffe7c
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3040:	6e695365 	cdpvs	3, 6, cr5, cr9, cr5, {3}
    3044:	6f586563 	svcvs	0x00586563
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    3048:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
}
    304c:	734d6e49 	movtvc	r6, #56905	; 0xde49
    3050:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    3054:	65546174 	ldrbvs	r6, [r4, #-372]	; 0xfffffe8c
    3058:	6953706d 	ldmdbvs	r3, {r0, r2, r3, r5, r6, ip, sp, lr}^
    305c:	5865636e 	stmdapl	r5!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    3060:	4f63736f 	svcmi	0x0063736f
    3064:	6966006e 	stmdbvs	r6!, {r1, r2, r3, r5, r6}^
    3068:	72615074 	rsbvc	r5, r1, #116	; 0x74
    306c:	00736d61 	rsbseq	r6, r3, r1, ror #26
    3070:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    3074:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    3078:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    307c:	0073556e 	rsbseq	r5, r3, lr, ror #10
    3080:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    3084:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3088:	5f66664f 	svcpl	0x0066664f
    308c:	4f005643 	svcmi	0x00005643
    3090:	66484353 			; <UNDEFINED> instruction: 0x66484353
    3094:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    3098:	65526563 	ldrbvs	r6, [r2, #-1379]	; 0xfffffa9d
    309c:	00796461 	rsbseq	r6, r9, r1, ror #8
    30a0:	43706d61 	cmnmi	r0, #6208	; 0x1840
    30a4:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    30a8:	4f003168 	svcmi	0x00003168
    30ac:	66486373 			; <UNDEFINED> instruction: 0x66486373
    30b0:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    30b4:	5f736c61 	svcpl	0x00736c61
    30b8:	41480074 	hvcmi	32772	; 0x8004
    30bc:	415f4452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    30c0:	545f4950 	ldrbpl	r4, [pc], #-2384	; 30c8 <tcv_rcv_null+0xc>
    30c4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    30c8:	746e5565 	strbtvc	r5, [lr], #-1381	; 0xfffffa9b
    30cc:	61576c69 	cmpvs	r7, r9, ror #24
    30d0:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    30d4:	734d6e49 	movtvc	r6, #56905	; 0xde49
    30d8:	33697500 	cmncc	r9, #0, 10
    30dc:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
    30e0:	006b6c43 	rsbeq	r6, fp, r3, asr #24
    30e4:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    30e8:	756f5366 	strbvc	r5, [pc, #-870]!	; 2d8a <cc1350_driver+0xc6>
    30ec:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    30f0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    30f4:	50460068 	subpl	r0, r6, r8, rrx
    30f8:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    30fc:	32334352 	eorscc	r4, r3, #1207959553	; 0x48000001
    3100:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
    3104:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    3108:	00436765 	subeq	r6, r3, r5, ror #14
    310c:	52545046 	subspl	r5, r4, #70	; 0x46
    3110:	4e494d5f 	mcrmi	13, 2, r4, cr9, cr15, {2}
    3114:	5f4c4156 	svcpl	0x004c4156
    3118:	50460054 	subpl	r0, r6, r4, asr r0
    311c:	485f5254 	ldmdami	pc, {r2, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    3120:	554f5346 	strbpl	r5, [pc, #-838]	; 2de2 <cc1350_driver+0x11e>
    3124:	53454352 	movtpl	r4, #21330	; 0x5352
    3128:	53454641 	movtpl	r4, #22081	; 0x5641
    312c:	43544957 	cmpmi	r4, #1425408	; 0x15c000
    3130:	00545f48 	subseq	r5, r4, r8, asr #30
    3134:	566e694d 	strbtpl	r6, [lr], -sp, asr #18
strand (__outserial, const char*)
    3138:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    313c:	65727000 	ldrbvs	r7, [r2, #-0]!
    3140:	6d694c76 	stclvs	12, cr4, [r9, #-472]!	; 0xfffffe28
    3144:	3274696d 	rsbscc	r6, r4, #1785856	; 0x1b4000
endstrand
    3148:	556e4935 	strbpl	r4, [lr, #-2357]!	; 0xfffff6cb
    314c:	4f4e0073 	svcmi	0x004e0073
	ptr = data;
    3150:	5f4d4f52 	svcpl	0x004d4f52
    3154:	5f43534f 	svcpl	0x0043534f
	if (*ptr)
    3158:	534f5048 	movtpl	r5, #61512	; 0xf048
		len = strlen (ptr);
    315c:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    3160:	76697461 	strbtvc	r7, [r9], -r1, ror #8
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3164:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    3168:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    316c:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    3170:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    3174:	46526f54 	usaxmi	r6, r2, r4
	len -= quant;
    3178:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    317c:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    3180:	6f437461 	svcvs	0x00437461
	if (len == 0) {
    3184:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
		ufree (data);
    3188:	65530074 	ldrbvs	r0, [r3, #-116]	; 0xffffff8c
		finish;
    318c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    3190:	706d6f43 	rsbvc	r6, sp, r3, asr #30
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    3194:	66655241 	strbtvs	r5, [r5], -r1, asr #4
    3198:	33697500 	cmncc	r9, #0, 10
    319c:	6f6c4332 	svcvs	0x006c4332
    31a0:	6f536b63 	svcvs	0x00536b63
    31a4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
strand (__inserial, address)
    31a8:	73655200 	cmnvc	r5, #0, 4
    31ac:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    31b0:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    31b4:	6f697461 	svcvs	0x00697461
    31b8:	5200316e 	andpl	r3, r0, #-2147483621	; 0x8000001b
	if (__inpline != NULL)
    31bc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    31c0:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
		finish;
    31c4:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31c8:	326e6f69 	rsbcc	r6, lr, #420	; 0x1a4
    31cc:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    31d0:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    31d4:	5200745f 	andpl	r7, r0, #1593835520	; 0x5f000000
		umwait (IM_INIT);
    31d8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
		release;
    31dc:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
	savedata (data);
    31e0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
	len = MAX_LINE_LENGTH;
    31e4:	356e6f69 	strbcc	r6, [lr, #-3945]!	; 0xfffff097
	io (IM_READ, __cport, READ, ptr, 1);
    31e8:	61745300 	cmnvs	r4, r0, lsl #6
    31ec:	6544646e 	strbvs	r6, [r4, #-1134]	; 0xfffffb92
    31f0:	74616976 	strbtvc	r6, [r1], #-2422	; 0xfffff68a
    31f4:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
	if (ptr == (char*) data) { // new line
    31f8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    31fc:	43667200 	cmnmi	r6, #0, 4
		if (*ptr == '\0') { // bin cmd
    3200:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
			proceed (IM_BIN);
    3204:	4f716572 	svcmi	0x00716572
    3208:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
		if (*ptr < 0x20)
    320c:	69680074 	stmdbvs	r8!, {r2, r4, r5, r6}^
    3210:	68546867 	ldmdavs	r4, {r0, r1, r2, r5, r6, fp, sp, lr}^
			proceed (IM_READ);
    3214:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    3218:	00646c6f 	rsbeq	r6, r4, pc, ror #24
	if (*ptr == '\n' || *ptr == '\r') {
    321c:	4f524f4e 	svcmi	0x00524f4e
    3220:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    3224:	5f464843 	svcpl	0x00464843
		*ptr = '\0';
    3228:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
		__inpline = (char*)data;
    322c:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
		finish;
    3230:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0xfffff7bb
	if (len) {
    3234:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
		ptr++;
    3238:	72657641 	rsbvc	r7, r5, #68157440	; 0x4100000
    323c:	43656761 	cmnmi	r5, #25427968	; 0x1840000
		len--;
    3240:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
	proceed (IM_READ);
    3244:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
	io (IM_BIN, __cport, READ, ptr, 1);
    3248:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    324c:	00656475 	rsbeq	r6, r5, r5, ror r4
    3250:	4363736f 	cmnmi	r3, #-1140850687	; 0xbc000001
    3254:	65526766 	ldrbvs	r6, [r2, #-1894]	; 0xfffff89a
    3258:	706f4367 	rsbvc	r4, pc, r7, ror #6
	len -= 2;
    325c:	50460079 	subpl	r0, r6, r9, ror r0
	if (len > *ptr + 1) // 1 for 0x04
    3260:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    3264:	4c465445 	cfstrdmi	mvd5, [r6], {69}	; 0x45
		len = *ptr + 1;
    3268:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    326c:	4e00545f 	cfmvsrmi	mvf0, r5
	ptr++;
    3270:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 313c <__outserial+0x4>
	quant = io (IM_BINL, __cport, READ, ptr, len);
    3274:	43534f5f 	cmpmi	r3, #380	; 0x17c
    3278:	475f4648 	ldrbmi	r4, [pc, -r8, asr #12]
    327c:	74537465 	ldrbvc	r7, [r3], #-1125	; 0xfffffb9b
    3280:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    3284:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    3288:	6c460065 	mcrrvs	0, 6, r0, r6, cr5
	len -= quant;
    328c:	47687361 	strbmi	r7, [r8, -r1, ror #6]!
		__inpline = (char*)data;
    3290:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
		finish;
    3294:	4600657a 			; <UNDEFINED> instruction: 0x4600657a
	ptr += quant;
    3298:	5f525450 	svcpl	0x00525450
    329c:	504d4f43 	subpl	r4, sp, r3, asr #30
endstrand
    32a0:	46455241 	strbmi	r5, [r5], -r1, asr #4
    32a4:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
	proceed (IM_BINL);
    32a8:	5f525450 	svcpl	0x00525450
endstrand
    32ac:	43544547 	cmpmi	r4, #297795584	; 0x11c00000
    32b0:	49504948 	ldmdbmi	r0, {r3, r6, r8, fp, lr}^
    32b4:	00545f44 	subseq	r5, r4, r4, asr #30
    32b8:	52545046 	subspl	r5, r4, #70	; 0x46
    32bc:	5345525f 	movtpl	r5, #21087	; 0x525f
    32c0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
		if (res && (d < n))
    32c4:	545f3544 	ldrbpl	r3, [pc], #-1348	; 32cc <outc.5724+0x8>
    32c8:	72617000 	rsbvc	r7, r1, #0
    32cc:	30506d61 	subscc	r6, r0, r1, ror #26
    32d0:	524f4e00 	subpl	r4, pc, #0, 28
			res [d] = (char) c;
    32d4:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
		d++;
    32d8:	70434346 	subvc	r4, r3, r6, asr #6
    32dc:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    32e0:	41746547 	cmnmi	r4, r7, asr #10
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32e4:	6c43646e 	cfstrdvs	mvd6, [r3], {110}	; 0x6e
    32e8:	00726165 	rsbseq	r6, r2, r5, ror #2
    32ec:	65764f70 	ldrbvs	r4, [r6, #-3952]!	; 0xfffff090
				enci (10000);
    32f0:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    32f4:	69730065 	ldmdbvs	r3!, {r0, r2, r5, r6}^
    32f8:	745f657a 	ldrbvc	r6, [pc], #-1402	; 3300 <__pi_vfparse+0x1c>
	d = 0;
    32fc:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
		c = *fm++;
    3300:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
		if (c == '\\') {
    3304:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
			if ((c = *fm++) == '\0') {
    3308:	00786564 	rsbseq	r6, r8, r4, ror #10
    330c:	4f524f4e 	svcmi	0x00524f4e
				outc ('\\');
    3310:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
			if ((c = *fm++) == '\0') {
    3314:	69644143 	stmdbvs	r4!, {r0, r1, r6, r8, lr}^
				outc ('\\');
    3318:	6f635633 	svcvs	0x00635633
    331c:	566f644c 	strbtpl	r6, [pc], -ip, asr #8
			outc (c);
    3320:	61746c6f 	cmnvs	r4, pc, ror #24
    3324:	6f4d6567 	svcvs	0x004d6567
			if (c == '\0')
    3328:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
    332c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
			outc (c);
    3330:	505f444d 	subspl	r4, pc, sp, asr #8
				outc (val);
    3334:	5f504f52 	svcpl	0x00504f52
				val = (word) va_arg (ap, aword);
    3338:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
		if (c == '%') {
    333c:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
    3340:	5f505554 	svcpl	0x00505554
			c = *fm++;
    3344:	4f4e0074 	svcmi	0x004e0074
			switch (c) {
    3348:	5f4d4f52 	svcpl	0x004d4f52
    334c:	52434652 	subpl	r4, r3, #85983232	; 0x5200000
    3350:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
    3354:	7465536d 	strbtvc	r5, [r5], #-877	; 0xfffffc93
    3358:	524f4e00 	subpl	r4, pc, #0, 28
    335c:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    3360:	79534346 	ldmdbvc	r3, {r1, r2, r6, r8, r9, lr}^
    3364:	5068746e 	rsbpl	r7, r8, lr, ror #8
				outc ('%');
    3368:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    336c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
				outc (c);
    3370:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
    3374:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    3378:	74725f65 	ldrbtvc	r5, [r2], #-3941	; 0xfffff09b
				if (c == '\0')
    337c:	006d6972 	rsbeq	r6, sp, r2, ror r9
				return d;
    3380:	53704f70 	cmnpl	r0, #112, 30	; 0x1c0
}
    3384:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3388:	33697500 	cmncc	r9, #0, 10
			switch (c) {
    338c:	67664932 			; <UNDEFINED> instruction: 0x67664932
    3390:	63667200 	cmnvs	r6, #0, 4
    3394:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
				for (i = 12; ; i -= 4) {
    3398:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
				val = (word) va_arg (ap, aword);
    339c:	41717249 	cmnmi	r1, r9, asr #4
						[ (val >> i) & 0xf ]);
    33a0:	00726464 	rsbseq	r6, r2, r4, ror #8
    33a4:	4f524f4e 	svcmi	0x00524f4e
    33a8:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
					outc (__pi_hex_enc_table
    33ac:	45504343 	ldrbmi	r4, [r0, #-835]	; 0xfffffcbd
    33b0:	63746150 	cmnvs	r4, #80, 2
					if (i == 0)
    33b4:	73655268 	cmnvc	r5, #104, 4	; 0x80000006
    33b8:	72007465 	andvc	r7, r0, #1694498816	; 0x65000000
				for (i = 12; ; i -= 4) {
    33bc:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
				val = (word) va_arg (ap, aword);
    33c0:	505f444d 	subspl	r4, pc, sp, asr #8
				if (c == 'd' && (val & 0x8000) != 0) {
    33c4:	5f504f52 	svcpl	0x00504f52
				val = (word) va_arg (ap, aword);
    33c8:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
				if (c == 'd' && (val & 0x8000) != 0) {
    33cc:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
    33d0:	5f505554 	svcpl	0x00505554
					outc ('-');
    33d4:	52700073 	rsbspl	r0, r0, #115	; 0x73
    33d8:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
					val = (~val) + 1;
    33dc:	766f006d 	strbtvc	r0, [pc], -sp, rrx
    33e0:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
				for (i = 12; ; i -= 4) {
    33e4:	765f6564 	ldrbvc	r6, [pc], -r4, ror #10
				enci (10000);
    33e8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    33ec:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    33f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    33f4:	2f2e2e2f 	svccs	0x002e2e2f
    33f8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    33fc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3400:	66722f62 	ldrbtvs	r2, [r2], -r2, ror #30
    3404:	00632e63 	rsbeq	r2, r3, r3, ror #28
    3408:	5f636672 	svcpl	0x00636672
    340c:	5f444d43 	svcpl	0x00444d43
    3410:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    3414:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
    3418:	5f505554 	svcpl	0x00505554
    341c:	66720073 			; <UNDEFINED> instruction: 0x66720073
    3420:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    3424:	41525f44 	cmpmi	r2, r4, asr #30
    3428:	5f4f4944 	svcpl	0x004f4944
    342c:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
				if (c == 'd' || c == 'u') {
    3430:	00745f50 	rsbseq	r5, r4, r0, asr pc
    3434:	616e4562 	cmnvs	lr, r2, ror #10
					if (c == 'd' &&
    3438:	00656c62 	rsbeq	r6, r5, r2, ror #24
					val = va_arg (ap, lword);
    343c:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
					fm++;
    3440:	74725f31 	ldrbtvc	r5, [r2], #-3889	; 0xfffff0cf
					if (c == 'd' &&
    3444:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3448:	4f524f4e 	svcmi	0x00524f4e
						outc ('-');
    344c:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    3450:	72545243 	subsvc	r5, r4, #805306372	; 0x30000004
						val = (~val) + 1;
    3454:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
				enci (10000);
    3458:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3324 <__pi_vfparse+0x40>
					enci (1000000000UL);
    345c:	4346525f 	movtmi	r5, #25183	; 0x625f
    3460:	726f6f44 	rsbvc	r6, pc, #68, 30	; 0x110
    3464:	6c6c6562 	cfstr64vs	mvdx6, [ip], #-392	; 0xfffffe78
    3468:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    346c:	52006f54 	andpl	r6, r0, #84, 30	; 0x150
    3470:	63414346 	movtvs	r4, #4934	; 0x1346
    3474:	746e496b 	strbtvc	r4, [lr], #-2411	; 0xfffff695
    3478:	61656c43 	cmnvs	r5, r3, asr #24
    347c:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
    3480:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    3484:	4f4e0072 	svcmi	0x004e0072
    3488:	5f4d4f52 	svcpl	0x004d4f52
    348c:	52434652 	subpl	r4, r3, #85983232	; 0x5200000
    3490:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
    3494:	6165526d 	cmnvs	r5, sp, ror #4
    3498:	706d0064 	rsbvc	r0, sp, r4, rrx
    349c:	76657231 			; <UNDEFINED> instruction: 0x76657231
				} else if (c == 'x') {
    34a0:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
					for (i = 28; ; i -= 4) {
    34a4:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
					val = va_arg (ap, lword);
    34a8:	6f437265 	svcvs	0x00437265
							[ (val >> i) & 0xf ]);
    34ac:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    34b0:	57746573 			; <UNDEFINED> instruction: 0x57746573
						outc (__pi_hex_enc_table
    34b4:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    34b8:	6f724670 	svcvs	0x00724670
    34bc:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
						if (i == 0)
    34c0:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    34c4:	4f4e006e 	svcmi	0x004e006e
					for (i = 28; ; i -= 4) {
    34c8:	5f4d4f52 	svcpl	0x004d4f52
					outc ('%');
    34cc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    34d0:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
    34d4:	6f437265 	svcvs	0x00437265
					outc ('l');
    34d8:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    34dc:	57746573 			; <UNDEFINED> instruction: 0x57746573
				val = (word) va_arg (ap, aword);
    34e0:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
				outc (val);
    34e4:	6f724670 	svcvs	0x00724670
    34e8:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
				while (*st != '\0') {
    34ec:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    34f0:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    34f4:	4f4e0031 	svcmi	0x004e0031
    34f8:	5f4d4f52 	svcpl	0x004d4f52
					outc (*st);
    34fc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3500:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
					st++;
    3504:	6f437265 	svcvs	0x00437265
		c = *fm++;
    3508:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    350c:	57746573 			; <UNDEFINED> instruction: 0x57746573
    3510:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
char *vform (char *res, const char *fm, va_list aq) {
    3514:	6f724670 	svcvs	0x00724670
    3518:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
	if (res != NULL) {
    351c:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3520:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    3524:	4f4e0032 	svcmi	0x004e0032
    3528:	5f4d4f52 	svcpl	0x004d4f52
}
    352c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3530:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
	fml = strlen (fm) + 17;
    3534:	6f437265 	svcvs	0x00437265
    3538:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    353c:	57746573 			; <UNDEFINED> instruction: 0x57746573
	if ((res = (char*) umalloc (fml)) == NULL)
    3540:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3544:	6f724670 	svcvs	0x00724670
    3548:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    354c:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    3550:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    3554:	2f2e0033 	svccs	0x002e0033
    3558:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
		ufree (res);
    355c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		goto Again;
    3560:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
	if (buf == NULL || fmt == NULL)
    3564:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
int vscan (const char *buf, const char *fmt, va_list ap) {
    3568:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
	if (buf == NULL || fmt == NULL)
    356c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3570:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    3574:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3440 <__pi_vfparse+0x15c>
		    	    case 'u': scanu (lword); break;
    3578:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
			while (isspace (*buf)) buf++;
    357c:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    3580:	63614374 	cmnvs	r1, #116, 6	; 0xd0000001
	while (*fmt != '\0') {
    3584:	6f4d6568 	svcvs	0x004d6568
		if (*fmt++ != '%')
    3588:	63416564 	movtvs	r6, #5476	; 0x1564
		switch (*fmt++) {
    358c:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    3590:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
    3594:	6663436f 	strbtvs	r4, [r3], -pc, ror #6
    3598:	74655367 	strbtvc	r5, [r5], #-871	; 0xfffffc99
    359c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    35a0:	33697500 	cmncc	r9, #0, 10
    35a4:	66634632 			; <UNDEFINED> instruction: 0x66634632
}
    35a8:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
		switch (*fmt++) {
    35ac:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    35b0:	41006e6f 	tstmi	r0, pc, ror #28
    35b4:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
    35b8:	61744a43 	cmnvs	r4, r3, asr #20
			while (isspace (*buf)) buf++;
    35bc:	776f5067 	strbvc	r5, [pc, -r7, rrx]!
    35c0:	664f7265 	strbvs	r7, [pc], -r5, ror #4
    35c4:	72540066 	subsvc	r0, r4, #102	; 0x66
    35c8:	66416d69 	strbvs	r6, [r1], -r9, ror #26
    35cc:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    35d0:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
			if (*buf == '\0')
    35d4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
			if (*buf != ',') {
    35d8:	524f4e00 	subpl	r4, pc, #0, 28
			sap = va_arg (ap, char*);
    35dc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
			nc++;
    35e0:	70757465 	rsbsvc	r7, r5, r5, ror #8
			if (*buf != ',') {
    35e4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
				while (!isspace (*buf) && *buf != ',' &&
    35e8:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    35ec:	76006563 	strvc	r6, [r0], -r3, ror #10
    35f0:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    35f4:	6964755f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    35f8:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
    35fc:	6f413233 	svcvs	0x00413233
    3600:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
			while (isspace (*buf)) buf++;
    3604:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3608:	6c746374 	ldclvs	3, cr6, [r4], #-464	; 0xfffffe30
    360c:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    3610:	6f4d5f67 	svcvs	0x004d5f67
    3614:	6f436564 	svcvs	0x00436564
			if (*buf == ',') buf++;
    3618:	6552666e 	ldrbvs	r6, [r2, #-1646]	; 0xfffff992
    361c:	72540067 	subsvc	r0, r4, #103	; 0x67
			*sap = '\0';
    3620:	66416d69 	strbvs	r6, [r1], -r9, ror #26
			break;
    3624:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
		    case 'd': scani (word); break;
    3628:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    362c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3630:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    3634:	72467075 	subvc	r7, r6, #117	; 0x75
    3638:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    363c:	6f447475 	svcvs	0x00447475
    3640:	61576e77 	cmpvs	r7, r7, ror lr
    3644:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    3648:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3538 <vform+0x24>
    364c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3650:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    3654:	4f4e006e 	svcmi	0x004e006e
    3658:	5f4d4f52 	svcpl	0x004d4f52
    365c:	73696854 	cmnvc	r9, #84, 16	; 0x540000
    3660:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    3664:	75427349 	strbvc	r7, [r2, #-841]	; 0xfffffcb7
    3668:	46746c69 	ldrbtmi	r6, [r4], -r9, ror #24
    366c:	4343726f 	movtmi	r7, #12911	; 0x326f
    3670:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    3674:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3678:	41303276 	teqmi	r0, r6, ror r2
    367c:	614c646e 	cmpvs	ip, lr, ror #8
    3680:	5f726574 	svcpl	0x00726574
    3684:	746c6148 	strbtvc	r6, [ip], #-328	; 0xfffffeb8
    3688:	69566649 	ldmdbvs	r6, {r0, r3, r6, r9, sl, sp, lr}^
    368c:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    3690:	76006465 	strvc	r6, [r0], -r5, ror #8
    3694:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
		    case 'u': scanu (word); break;
    3698:	646f625f 	strbtvs	r6, [pc], #-607	; 36a0 <vscan+0x13c>
    369c:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    36a0:	74784567 	ldrbtvc	r4, [r8], #-1383	; 0xfffffa99
    36a4:	6c43664c 	mcrrvs	6, 4, r6, r3, cr12
    36a8:	7563006b 	strbvc	r0, [r3, #-107]!	; 0xffffff95
    36ac:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    36b0:	43664874 	cmnmi	r6, #116, 16	; 0x740000
    36b4:	6b636f6c 	blvs	18df46c <__ccfg+0x18bf4c4>
    36b8:	33697500 	cmncc	r9, #0, 10
    36bc:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    36c0:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    36c4:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    36c8:	524f4e00 	subpl	r4, pc, #0, 28
    36cc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    36d0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    36d4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    36d8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    36dc:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
		    case 'x': scanx (word); break;
    36e0:	70796261 	rsbsvc	r6, r9, r1, ror #4
    36e4:	56737361 	ldrbtpl	r7, [r3], -r1, ror #6
    36e8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    36ec:	4f4e0031 	svcmi	0x004e0031
    36f0:	5f4d4f52 	svcpl	0x004d4f52
    36f4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    36f8:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    36fc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3700:	44726f46 	ldrbtmi	r6, [r2], #-3910	; 0xfffff0ba
    3704:	4c726c62 	ldclmi	12, cr6, [r2], #-392	; 0xfffffe78
    3708:	46706f6f 	ldrbtmi	r6, [r0], -pc, ror #30
    370c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    3710:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    3714:	6f567465 	svcvs	0x00567465
    3718:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    371c:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    3720:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    3724:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3728:	6976006d 	ldmdbvs	r6!, {r0, r2, r3, r5, r6}^
    372c:	7443736d 	strbvc	r7, [r3], #-877	; 0xfffffc93
    3730:	646f4d6c 	strbtvs	r4, [pc], #-3436	; 3738 <vscan+0x1d4>
    3734:	69003065 	stmdbvs	r0, {r0, r2, r5, r6, ip, sp}
    3738:	73616962 	cmnvc	r1, #1605632	; 0x188000
    373c:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    3740:	67007465 	strvs	r7, [r0, -r5, ror #8]
    3744:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3748:	6f466d69 	svcvs	0x00466d69
    374c:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3750:	43666863 	cmnmi	r6, #6488064	; 0x630000
    3754:	61566c74 	cmpvs	r6, r4, ror ip
			switch (*fmt++) {
    3758:	0065756c 	rsbeq	r7, r5, ip, ror #10
    375c:	4f524f4e 	svcmi	0x00524f4e
    3760:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3764:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3768:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    376c:	6f466d69 	svcvs	0x00466d69
		    	    case 'd': scani (lword); break;
    3770:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3774:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    3778:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    377c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    3780:	524f4e00 	subpl	r4, pc, #0, 28
    3784:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3788:	70757465 	rsbsvc	r7, r5, r5, ror #8
    378c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3790:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3794:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    3798:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    379c:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
    37a0:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
    37a4:	64006d69 	strvs	r6, [r0], #-3433	; 0xfffff297
    37a8:	61746c65 	cmnvs	r4, r5, ror #24
    37ac:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    37b0:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
    37b4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3680 <vscan+0x11c>
    37b8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    37bc:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    37c0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    37c4:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    37c8:	63736f58 	cmnvs	r3, #88, 30	; 0x160
		    	    case 'x': scanx (lword); break;
    37cc:	74436648 	strbvc	r6, [r3], #-1608	; 0xfffff9b8
    37d0:	6567006c 	strbvs	r0, [r7, #-108]!	; 0xffffff94
    37d4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    37d8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    37dc:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
    37e0:	43747845 	cmnmi	r4, #4521984	; 0x450000
    37e4:	61566766 	cmpvs	r6, r6, ror #14
    37e8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    37ec:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    37f0:	69725461 	ldmdbvs	r2!, {r0, r5, r6, sl, ip, lr}^
    37f4:	6975006d 	ldmdbvs	r5!, {r0, r2, r3, r5, r6}^
    37f8:	6f583233 	svcvs	0x00583233
    37fc:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3800:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    3804:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    3808:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    380c:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    3810:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 36dc <vscan+0x178>
    3814:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3818:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    381c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3820:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3824:	63706d41 	cmnvs	r0, #4160	; 0x1040
    3828:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    382c:	4e003168 	adfmisz	f3, f0, #0.0
    3830:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 36fc <vscan+0x198>
    3834:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3838:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
		    	    case 'd': scani (lword); break;
    383c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3840:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3844:	63706d41 	cmnvs	r0, #4160	; 0x1040
    3848:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    384c:	4e003268 	cdpmi	2, 0, cr3, cr0, cr8, {3}
    3850:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 371c <vscan+0x1b8>
    3854:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
		    	    case 'u': scanu (lword); break;
    3858:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    385c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3860:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3864:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    3868:	75625668 	strbvc	r5, [r2, #-1640]!	; 0xfffff998
    386c:	006e4566 	rsbeq	r4, lr, r6, ror #10
    3870:	4f524f4e 	svcmi	0x00524f4e
    3874:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3878:	52323349 	eorspl	r3, r2, #603979777	; 0x24000001
    387c:	72576765 	subsvc	r6, r7, #26476544	; 0x1940000
    3880:	00657469 	rsbeq	r7, r5, r9, ror #8
    3884:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3888:	74614431 	strbtvc	r4, [r1], #-1073	; 0xfffffbcf
    388c:	72740061 	rsbsvc	r0, r4, #97	; 0x61
    3890:	6f466d69 	svcvs	0x00466d69
    3894:	4f635272 	svcmi	0x00635272
    3898:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    389c:	61694249 	cmnvs	r9, r9, asr #4
		    	    case 'x': scanx (lword); break;
    38a0:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    38a4:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
			if ((c = *buf++) == '\0')
    38a8:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    38ac:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
			sap = va_arg (ap, char*);
    38b0:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
			nc++;
    38b4:	4f4e006d 	svcmi	0x004e006d
			break;
    38b8:	5f4d4f52 	svcpl	0x004d4f52
			while (isspace (*buf)) buf++;
    38bc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    38c0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    38c4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
						*sap++ = *buf++;
    38c8:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    38cc:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
			while (isspace (*buf)) buf++;
    38d0:	66437478 			; <UNDEFINED> instruction: 0x66437478
    38d4:	2f2e0067 	svccs	0x002e0067
    38d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
		return 0;
    38dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    38e0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
		    case 'x': scanx (word); break;
    38e4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    38e8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
		    	    case 'x': scanx (lword); break;
    38ec:	70757465 	rsbsvc	r7, r5, r5, ror #8
    38f0:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 377c <vscan+0x218>
    38f4:	7300632e 	movwvc	r6, #814	; 0x32e
    38f8:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    38fc:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    3900:	524f4e00 	subpl	r4, pc, #0, 28
    3904:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3908:	70757465 	rsbsvc	r7, r5, r5, ror #8
    390c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3910:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3914:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    3918:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    391c:	75745266 	ldrbvc	r5, [r4, #-614]!	; 0xfffffd9a
    3920:	7443656e 	strbvc	r6, [r3], #-1390	; 0xfffffa92
    3924:	54656e75 	strbtpl	r6, [r5], #-3701	; 0xfffff18b
    3928:	006d6972 	rsbeq	r6, sp, r2, ror r9
    392c:	4f524f4e 	svcmi	0x00524f4e
    3930:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3934:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3938:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    393c:	6f466d69 	svcvs	0x00466d69
    3940:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3944:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    3948:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    394c:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    3950:	43646e41 	cmnmi	r4, #1040	; 0x410
    3954:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    3958:	61527277 	cmpvs	r2, r7, ror r2
    395c:	006f6974 	rsbeq	r6, pc, r4, ror r9	; <UNPREDICTABLE>
    3960:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3964:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3968:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    396c:	69537075 	ldmdbvs	r3, {r0, r2, r4, r5, r6, ip, sp, lr}^
    3970:	78456e67 	stmdavc	r5, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
    3974:	646e6574 	strbtvs	r6, [lr], #-1396	; 0xfffffa8c
    3978:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    397c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3980:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3984:	65670065 	strbvs	r0, [r7, #-101]!	; 0xffffff9b
    3988:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    398c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3990:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    3994:	75625668 	strbvc	r5, [r2, #-1640]!	; 0xfffff998
    3998:	566e4566 	strbtpl	r4, [lr], -r6, ror #10
    399c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    39a0:	524f4e00 	subpl	r4, pc, #0, 28
    39a4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    39a8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    39ac:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    39b0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    39b4:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    39b8:	4d685363 	stclmi	3, cr5, [r8, #-396]!	; 0xfffffe74
    39bc:	4565646f 	strbmi	r6, [r5, #-1135]!	; 0xfffffb91
    39c0:	3369006e 	cmncc	r9, #110	; 0x6e
    39c4:	67695332 			; <UNDEFINED> instruction: 0x67695332
    39c8:	5664656e 	strbtpl	r6, [r4], -lr, ror #10
    39cc:	56726464 	ldrbtpl	r6, [r2], -r4, ror #8
    39d0:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
    39d4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    39d8:	31666e6f 	cmncc	r6, pc, ror #28
    39dc:	33697500 	cmncc	r9, #0, 10
    39e0:	66634632 			; <UNDEFINED> instruction: 0x66634632
    39e4:	61563167 	cmpvs	r6, r7, ror #2
    39e8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    39ec:	4f524f4e 	svcmi	0x00524f4e
    39f0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    39f4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    39f8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    39fc:	6f466d69 	svcvs	0x00466d69
    3a00:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3a04:	49664863 	stmdbmi	r6!, {r0, r1, r5, r6, fp, lr}^
    3a08:	73616962 	cmnvc	r1, #1605632	; 0x188000
    3a0c:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    3a10:	6567006d 	strbvs	r0, [r7, #-109]!	; 0xffffff93
    3a14:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3a18:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3a1c:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    3a20:	646f4d68 	strbtvs	r4, [pc], #-3432	; 3a28 <NOROM_OSCHF_TurnOnXosc+0xc>
    3a24:	566e4565 	strbtpl	r4, [lr], -r5, ror #10
    3a28:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3a2c:	32336900 	eorscc	r6, r3, #0, 18
    3a30:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3a34:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3a38:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    3a3c:	6366006d 	cmnvs	r6, #109	; 0x6d
    3a40:	4f316766 	svcmi	0x00316766
    3a44:	6f436373 	svcvs	0x00436373
    3a48:	6400666e 	strvs	r6, [r0], #-1646	; 0xfffff992
    3a4c:	4c726c62 	ldclmi	12, cr6, [r2], #-392	; 0xfffffe78
    3a50:	46706f6f 	ldrbtmi	r6, [r0], -pc, ror #30
    3a54:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    3a58:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    3a5c:	6f567465 	svcvs	0x00567465
    3a60:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    3a64:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    3a68:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    3a6c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3a70:	6f58726f 	svcvs	0x0058726f
    3a74:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    3a78:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
    3a7c:	6f74616c 	svcvs	0x0074616c
    3a80:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
    3a84:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    3a88:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
    3a8c:	6f697461 	svcvs	0x00697461
    3a90:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3a94:	62690065 	rsbvs	r0, r9, #101	; 0x65
    3a98:	49736169 	ldmdbmi	r3!, {r0, r3, r5, r6, r8, sp, lr}^
    3a9c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    3aa0:	4f524f4e 	svcmi	0x00524f4e
    3aa4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3aa8:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    3aac:	6f417465 	svcvs	0x00417465
    3ab0:	6374526e 	cmnvs	r4, #-536870906	; 0xe0000006
    3ab4:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    3ab8:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    3abc:	4f4e0063 	svcmi	0x004e0063
    3ac0:	5f4d4f52 	svcpl	0x004d4f52
    3ac4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3ac8:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3acc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3ad0:	41726f46 	cmnmi	r2, r6, asr #30
    3ad4:	6f63706d 	svcvs	0x0063706d
    3ad8:	7443706d 	strbvc	r7, [r3], #-109	; 0xffffff93
    3adc:	75006c72 	strvc	r6, [r0, #-3186]	; 0xfffff38e
    3ae0:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3ae4:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3ae8:	776f5266 	strbvc	r5, [pc, -r6, ror #4]!
    3aec:	33697500 	cmncc	r9, #0, 10
    3af0:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    3af4:	43664863 	cmnmi	r6, #6488064	; 0x630000
    3af8:	4e006c6f 	cdpmi	12, 0, cr6, cr0, cr15, {3}
    3afc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 39c8 <NOROM_OSCClockSourceSet+0x34>
    3b00:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3b04:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    3b08:	64645674 	strbtvs	r5, [r4], #-1652	; 0xfffff98c
    3b0c:	76654c72 			; <UNDEFINED> instruction: 0x76654c72
    3b10:	6e006c65 	cdpvs	12, 0, cr6, cr0, cr5, {3}
    3b14:	72547765 	subsvc	r7, r4, #26476544	; 0x1940000
    3b18:	61526d69 	cmpvs	r2, r9, ror #26
    3b1c:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    3b20:	72543233 	subsvc	r3, r4, #805306371	; 0x30000003
    3b24:	61566d69 	cmpvs	r6, r9, ror #26
    3b28:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3b2c:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    3b30:	6f747375 	svcvs	0x00747375
    3b34:	4472656d 	ldrbtmi	r6, [r2], #-1389	; 0xfffffa93
    3b38:	61746c65 	cmnvs	r4, r5, ror #24
    3b3c:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    3b40:	69007473 	stmdbvs	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    3b44:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    3b48:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    3b4c:	44706565 	ldrbtmi	r6, [r0], #-1381	; 0xfffffa9b
    3b50:	61746c65 	cmnvs	r4, r5, ror #24
    3b54:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3b58:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    3b5c:	7463416d 	strbtvc	r4, [r3], #-365	; 0xfffffe93
    3b60:	63006576 	movwvs	r6, #1398	; 0x576
    3b64:	65547275 	ldrbvs	r7, [r4, #-629]	; 0xfffffd8b
    3b68:	6400706d 	strvs	r7, [r0], #-109	; 0xffffff93
    3b6c:	56666669 	strbtpl	r6, [r6], -r9, ror #12
    3b70:	41726464 	cmnmi	r2, r4, ror #8
    3b74:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    3b78:	656c5365 	strbvs	r5, [ip, #-869]!	; 0xfffffc9b
    3b7c:	70007065 	andvc	r7, r0, r5, rrx
    3b80:	526d6372 	rsbpl	r6, sp, #-939524095	; 0xc8000001
    3b84:	65526d61 	ldrbvs	r6, [r2, #-3425]	; 0xfffff29f
    3b88:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
    3b8c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3b90:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
    3b94:	524f4e00 	subpl	r4, pc, #0, 28
    3b98:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3b9c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3ba0:	64416c72 	strbvs	r6, [r1], #-3186	; 0xfffff38e
    3ba4:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    3ba8:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3bac:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3bb0:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    3bb4:	776f5072 			; <UNDEFINED> instruction: 0x776f5072
    3bb8:	6f447265 	svcvs	0x00447265
    3bbc:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    3bc0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3a8c <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>
    3bc4:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3bc8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3bcc:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
    3bd0:	61686365 	cmnvs	r8, r5, ror #6
    3bd4:	42656772 	rsbmi	r6, r5, #29884416	; 0x1c80000
    3bd8:	726f6665 	rsbvc	r6, pc, #105906176	; 0x6500000
    3bdc:	776f5065 	strbvc	r5, [pc, -r5, rrx]!
    3be0:	6f447265 	svcvs	0x00447265
    3be4:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    3be8:	2f2e2e2f 	svccs	0x002e2e2f
    3bec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3bf0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3bf4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3bf8:	2f62696c 	svccs	0x0062696c
    3bfc:	5f737973 	svcpl	0x00737973
    3c00:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    3c04:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    3c08:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3ad4 <NOROM_RFCDoorbellSendTo+0xc>
    3c0c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3c10:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3c14:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3c18:	756f5374 	strbvc	r5, [pc, #-884]!	; 38ac <vscan+0x348>
    3c1c:	47656372 			; <UNDEFINED> instruction: 0x47656372
    3c20:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    3c24:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    3c28:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3c2c:	7000736e 	andvc	r7, r0, lr, ror #6
    3c30:	00457265 	subeq	r7, r5, r5, ror #4
    3c34:	65546470 	ldrbvs	r6, [r4, #-1136]	; 0xfffffb90
    3c38:	7500706d 	strvc	r7, [r0, #-109]	; 0xffffff93
    3c3c:	41323369 	teqmi	r2, r9, ror #6
    3c40:	6c437875 	mcrrvs	8, 7, r7, r3, cr5
    3c44:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    3c48:	43525000 	cmpmi	r2, #0
    3c4c:	6d6f444d 	cfstrdvs	mvd4, [pc, #-308]!	; 3b20 <NOROM_RFCSynthPowerDown+0x30>
    3c50:	456e6961 	strbmi	r6, [lr, #-2401]!	; 0xfffff69f
    3c54:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    3c58:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0xffffff9b
    3c5c:	6e004d72 	mcrvs	13, 0, r4, cr0, cr2, {3}
    3c60:	65527765 	ldrbvs	r7, [r2, #-1893]	; 0xfffff89b
    3c64:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3c68:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    3c6c:	646f6972 	strbtvs	r6, [pc], #-2418	; 3c74 <NOROM_RFCRfTrimRead+0x138>
    3c70:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3c74:	70614372 	rsbvc	r4, r1, r2, ror r3
    3c78:	33697500 	cmncc	r9, #0, 10
    3c7c:	78644932 	stmdavc	r4!, {r1, r4, r5, r8, fp, lr}^
    3c80:	53647000 	cmnpl	r4, #0
    3c84:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    3c88:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
    3c8c:	74736567 	ldrbtvc	r6, [r3], #-1383	; 0xfffffa99
    3c90:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3c94:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3c98:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3c9c:	6400646f 	strvs	r6, [r0], #-1135	; 0xfffffb91
    3ca0:	61746c65 	cmnvs	r4, r5, ror #24
    3ca4:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3ca8:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3cac:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    3cb0:	6162006d 	cmnvs	r2, sp, rrx
    3cb4:	72685474 	rsbvc	r5, r8, #116, 8	; 0x74000000
    3cb8:	6f687365 	svcvs	0x00687365
    3cbc:	7800646c 	stmdavc	r0, {r2, r3, r5, r6, sl, sp, lr}
    3cc0:	5063736f 	rsbpl	r7, r3, pc, ror #6
    3cc4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3cc8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3ccc:	43525000 	cmpmi	r2, #0
    3cd0:	616f4c4d 	cmnvs	pc, sp, asr #24
    3cd4:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
    3cd8:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
    3cdc:	64657466 	strbtvs	r7, [r5], #-1126	; 0xfffffb9a
    3ce0:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3ce4:	44637400 	strbtmi	r7, [r3], #-1024	; 0xfffffc00
    3ce8:	61746c65 	cmnvs	r4, r5, ror #24
    3cec:	705f6700 	subsvc	r6, pc, r0, lsl #14
    3cf0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3cf4:	75646f4d 	strbvc	r6, [r4, #-3917]!	; 0xfffff0b3
    3cf8:	4743656c 	strbmi	r6, [r3, -ip, ror #10]
    3cfc:	72756300 	rsbsvc	r6, r5, #0, 6
    3d00:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3d04:	6f610065 	svcvs	0x00610065
    3d08:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    3d0c:	506c7463 	rsbpl	r7, ip, r3, ror #8
    3d10:	74637277 	strbtvc	r7, [r3], #-631	; 0xfffffd89
    3d14:	6470006c 	ldrbtvs	r0, [r0], #-108	; 0xffffff94
    3d18:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    3d1c:	524f4e00 	subpl	r4, pc, #0, 28
    3d20:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3d24:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3d28:	6f506c72 	svcvs	0x00506c72
    3d2c:	45726577 	ldrbmi	r6, [r2, #-1399]!	; 0xfffffa89
    3d30:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    3d34:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
    3d38:	4c700067 	ldclmi	0, cr0, [r0], #-412	; 0xfffffe64
    3d3c:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
    3d40:	62615470 	rsbvs	r5, r1, #112, 8	; 0x70000000
    3d44:	7000656c 	andvc	r6, r0, ip, ror #10
    3d48:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
    3d4c:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3d50:	72655065 	rsbvc	r5, r5, #101	; 0x65
    3d54:	00646f69 	rsbeq	r6, r4, r9, ror #30
    3d58:	426e6f61 	rsbmi	r6, lr, #388	; 0x184
    3d5c:	6f6d7461 	svcvs	0x006d7461
    3d60:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    3d64:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    3d68:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    3d6c:	656c536d 	strbvs	r5, [ip, #-877]!	; 0xfffffc93
    3d70:	50007065 	andpl	r7, r0, r5, rrx
    3d74:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3d78:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    3d7c:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3d80:	5f736c61 	svcpl	0x00736c61
    3d84:	4f4e0074 	svcmi	0x004e0074
    3d88:	5f4d4f52 	svcpl	0x004d4f52
    3d8c:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3d90:	5f6c7274 	svcpl	0x006c7274
    3d94:	43444344 	movtmi	r4, #17220	; 0x4344
    3d98:	6c6f565f 	stclvs	6, cr5, [pc], #-380	; 3c24 <NOROM_RFCRfTrimRead+0xe8>
    3d9c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3da0:	646e6f43 	strbtvs	r6, [lr], #-3907	; 0xfffff0bd
    3da4:	6f697469 	svcvs	0x00697469
    3da8:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    3dac:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    3db0:	70006c6f 	andvc	r6, r0, pc, ror #24
    3db4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3db8:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    3dbc:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    3dc0:	00736c61 	rsbseq	r6, r3, r1, ror #24
    3dc4:	544f5250 	strbpl	r5, [pc], #-592	; 3dcc <NOROM_RFCAdi3VcoLdoVoltageMode+0x8>
    3dc8:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3dcc:	5f544942 	svcpl	0x00544942
    3dd0:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    3dd4:	74656972 	strbtvc	r6, [r5], #-2418	; 0xfffff68e
    3dd8:	00797261 	rsbseq	r7, r9, r1, ror #4
    3ddc:	4b434150 	blmi	10d4324 <__ccfg+0x10b437c>
    3de0:	5f454741 	svcpl	0x00454741
    3de4:	00347834 	eorseq	r7, r4, r4, lsr r8
    3de8:	50494843 	subpl	r4, r9, r3, asr #16
    3dec:	5059545f 	subspl	r5, r9, pc, asr r4
    3df0:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3df4:	30343632 	eorscc	r3, r4, r2, lsr r6
    3df8:	66617700 	strbtvs	r7, [r1], -r0, lsl #14
    3dfc:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    3e00:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3e04:	5f594c49 	svcpl	0x00594c49
    3e08:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3e0c:	4c5f7878 	mrrcmi	8, 7, r7, pc, cr8	; <UNPREDICTABLE>
    3e10:	4e007a69 	vmlsmi.f32	s14, s0, s19
    3e14:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3ce0 <NOROM_RFCRTrim+0x54>
    3e18:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3e1c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3e20:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3e24:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    3e28:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3e2c:	00796c69 	rsbseq	r6, r9, r9, ror #24
    3e30:	4f524f4e 	svcmi	0x00524f4e
    3e34:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3e38:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3e3c:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3e40:	61507465 	cmpvs	r0, r5, ror #8
    3e44:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    3e48:	70795465 	rsbsvc	r5, r9, r5, ror #8
    3e4c:	4f4e0065 	svcmi	0x004e0065
    3e50:	5f4d4f52 	svcpl	0x004d4f52
    3e54:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e58:	6f666e49 	svcvs	0x00666e49
    3e5c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3e60:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3e64:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3e68:	70006e6f 	andvc	r6, r0, pc, ror #28
    3e6c:	546b6361 	strbtpl	r6, [fp], #-865	; 0xfffffc9f
    3e70:	00657079 	rsbeq	r7, r5, r9, ror r0
    3e74:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e78:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3e7c:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    3e80:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3e84:	6f697369 	svcvs	0x00697369
    3e88:	00745f6e 	rsbseq	r5, r4, lr, ror #30
    3e8c:	50494843 	subpl	r4, r9, r3, asr #16
    3e90:	5059545f 	subspl	r5, r9, pc, asr r4
    3e94:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3e98:	30313331 	eorscc	r3, r1, r1, lsr r3
    3e9c:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3ea0:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3ea4:	5f796c69 	svcpl	0x00796c69
    3ea8:	77680074 			; <UNDEFINED> instruction: 0x77680074
    3eac:	00766552 	rsbseq	r6, r6, r2, asr r5
    3eb0:	50494843 	subpl	r4, r9, r3, asr #16
    3eb4:	5059545f 	subspl	r5, r9, pc, asr r4
    3eb8:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3ebc:	30353632 	eorscc	r3, r5, r2, lsr r6
    3ec0:	43415000 	movtmi	r5, #4096	; 0x1000
    3ec4:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3ec8:	5343575f 	movtpl	r5, #14175	; 0x375f
    3ecc:	696d0050 	stmdbvs	sp!, {r4, r6}^
    3ed0:	52726f6e 	rsbspl	r6, r2, #440	; 0x1b8
    3ed4:	46007665 	strmi	r7, [r0], -r5, ror #12
    3ed8:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3edc:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3ee0:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3ee4:	0032525f 	eorseq	r5, r2, pc, asr r2
    3ee8:	50494843 	subpl	r4, r9, r3, asr #16
    3eec:	5059545f 	subspl	r5, r9, pc, asr r4
    3ef0:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3ef4:	30353331 	eorscc	r3, r5, r1, lsr r3
    3ef8:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3efc:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3f00:	68435f6f 	stmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f04:	61467069 	cmpvs	r6, r9, rrx
    3f08:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    3f0c:	43437349 	movtmi	r7, #13129	; 0x3349
    3f10:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    3f14:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3f18:	5f594c49 	svcpl	0x00594c49
    3f1c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3f20:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3f24:	50494843 	subpl	r4, r9, r3, asr #16
    3f28:	5059545f 	subspl	r5, r9, pc, asr r4
    3f2c:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3f30:	30323632 	eorscc	r3, r2, r2, lsr r6
    3f34:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3f38:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
    3f3c:	41460076 	hvcmi	24582	; 0x6006
    3f40:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3f44:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3f48:	00787836 	rsbseq	r7, r8, r6, lsr r8
    3f4c:	70696863 	rsbvc	r6, r9, r3, ror #16
    3f50:	006d6146 	rsbeq	r6, sp, r6, asr #2
    3f54:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3f58:	6e555f56 	mrcvs	15, 2, r5, cr5, cr6, {2}
    3f5c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3f60:	6366006e 	cmnvs	r6, #110	; 0x6e
    3f64:	50316766 	eorspl	r6, r1, r6, ror #14
    3f68:	6f746f72 	svcvs	0x00746f72
    3f6c:	006c6f63 	rsbeq	r6, ip, r3, ror #30
    3f70:	746f7250 	strbtvc	r7, [pc], #-592	; 3f78 <NOROM_SetupSetVddrLevel+0x20>
    3f74:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3dc0 <NOROM_RFCRfTrimSet+0x1c>
    3f78:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    3f7c:	6f746365 	svcvs	0x00746365
    3f80:	00745f72 	rsbseq	r5, r4, r2, ror pc
    3f84:	544f5250 	strbpl	r5, [pc], #-592	; 3f8c <NOROM_SetupSetVddrLevel+0x34>
    3f88:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3f8c:	5f544942 	svcpl	0x00544942
    3f90:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    3f94:	3230385f 	eorscc	r3, r0, #6225920	; 0x5f0000
    3f98:	5f35315f 	svcpl	0x0035315f
    3f9c:	48430034 	stmdami	r3, {r2, r4, r5}^
    3fa0:	545f5049 	ldrbpl	r5, [pc], #-73	; 3fa8 <NOROM_SetupSetVddrLevel+0x50>
    3fa4:	5f455059 	svcpl	0x00455059
    3fa8:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3fac:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3fb0:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3fb4:	5f325f56 	svcpl	0x00325f56
    3fb8:	41460032 	cmpmi	r6, r2, lsr r0
    3fbc:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3fc0:	3143435f 	cmpcc	r3, pc, asr r3
    3fc4:	00787833 	rsbseq	r7, r8, r3, lsr r8
    3fc8:	4b434150 	blmi	10d4510 <__ccfg+0x10b4568>
    3fcc:	5f454741 	svcpl	0x00454741
    3fd0:	00377837 	eorseq	r7, r7, r7, lsr r8
    3fd4:	544f5250 	strbpl	r5, [pc], #-592	; 3fdc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8>
    3fd8:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    3fdc:	6b6e555f 	blvs	1b99560 <__ccfg+0x1b795b8>
    3fe0:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    3fe4:	52574800 	subspl	r4, r7, #0, 16
    3fe8:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    3fec:	4e00305f 	mcrmi	0, 0, r3, cr0, cr15, {2}
    3ff0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3ebc <NOROM_SetupTrimDevice+0x8>
    3ff4:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3ff8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3ffc:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    4000:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    4004:	70795470 	rsbsvc	r5, r9, r0, ror r4
    4008:	57480065 	strbpl	r0, [r8, -r5, rrx]
    400c:	5f564552 	svcpl	0x00564552
    4010:	00315f32 	eorseq	r5, r1, r2, lsr pc
    4014:	544f5250 	strbpl	r5, [pc], #-592	; 401c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x48>
    4018:	4c4f434f 	mcrrmi	3, 4, r4, pc, cr15
    401c:	5f544942 	svcpl	0x00544942
    4020:	00454c42 	subeq	r4, r5, r2, asr #24
    4024:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    4028:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    402c:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    4030:	67415f78 	smlsldxvs	r5, r1, r8, pc	; <UNPREDICTABLE>
    4034:	57480061 	strbpl	r0, [r8, -r1, rrx]
    4038:	5f564552 	svcpl	0x00564552
    403c:	00335f32 	eorseq	r5, r3, r2, lsr pc
    4040:	70696863 	rsbvc	r6, r9, r3, ror #16
    4044:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    4048:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    404c:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    4050:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    4054:	4f545355 	svcmi	0x00545355
    4058:	00305f4d 	eorseq	r5, r0, sp, asr #30
    405c:	50494843 	subpl	r4, r9, r3, asr #16
    4060:	5059545f 	subspl	r5, r9, pc, asr r4
    4064:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    4068:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 3f24 <NOROM_SetupTrimDevice+0x70>
    406c:	4300315f 	movwmi	r3, #351	; 0x15f
    4070:	5f504948 	svcpl	0x00504948
    4074:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    4078:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    407c:	00303336 	eorseq	r3, r0, r6, lsr r3
    4080:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    4084:	5f315f56 	svcpl	0x00315f56
    4088:	41500030 	cmpmi	r0, r0, lsr r0
    408c:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    4090:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    4094:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    4098:	2f2e006e 	svccs	0x002e006e
    409c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    40a0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    40a4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    40a8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    40ac:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    40b0:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    40b4:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    40b8:	63660063 	cmnvs	r6, #99	; 0x63
    40bc:	55316766 	ldrpl	r6, [r1, #-1894]!	; 0xfffff89a
    40c0:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    40c4:	68430064 	stmdavs	r3, {r2, r5, r6}^
    40c8:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    40cc:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    40d0:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    40d4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    40d8:	77486449 	strbvc	r6, [r8, -r9, asr #8]
    40dc:	43766552 	cmnmi	r6, #343932928	; 0x14800000
    40e0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    40e4:	70696843 	rsbvc	r6, r9, r3, asr #16
    40e8:	6f666e49 	svcvs	0x00666e49
    40ec:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    40f0:	6f6e694d 	svcvs	0x006e694d
    40f4:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    40f8:	6d007665 	stcvs	6, cr7, [r0, #-404]	; 0xfffffe6c
    40fc:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    4100:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    4104:	4f4e0076 	svcmi	0x004e0076
    4108:	5f4d4f52 	svcpl	0x004d4f52
    410c:	70696843 	rsbvc	r6, r9, r3, asr #16
    4110:	6f666e49 	svcvs	0x00666e49
    4114:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    4118:	70707553 	rsbsvc	r7, r0, r3, asr r5
    411c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4120:	6f725064 	svcvs	0x00725064
    4124:	6f636f74 	svcvs	0x00636f74
    4128:	56425f6c 	strbpl	r5, [r2], -ip, ror #30
    412c:	43415000 	movtmi	r5, #4096	; 0x1000
    4130:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    4134:	4641575f 			; <UNDEFINED> instruction: 0x4641575f
    4138:	50005245 	andpl	r5, r0, r5, asr #4
    413c:	414b4341 	cmpmi	fp, r1, asr #6
    4140:	355f4547 	ldrbcc	r4, [pc, #-1351]	; 3c01 <NOROM_RFCRfTrimRead+0xc5>
    4144:	50003578 	andpl	r3, r0, r8, ror r5
    4148:	616b6361 	cmnvs	fp, r1, ror #6
    414c:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    4150:	745f6570 	ldrbvc	r6, [pc], #-1392	; 4158 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    4154:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    4158:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    415c:	77485f6f 	strbvc	r5, [r8, -pc, ror #30]
    4160:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    4164:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    4168:	475f7349 	ldrbmi	r7, [pc, -r9, asr #6]
    416c:	5f514554 	svcpl	0x00514554
    4170:	00305f32 	eorseq	r5, r0, r2, lsr pc
    4174:	70696843 	rsbvc	r6, r9, r3, asr #16
    4178:	6f666e49 	svcvs	0x00666e49
    417c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    4180:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    4184:	75006449 	strvc	r6, [r0, #-1097]	; 0xfffffbb7
    4188:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    418c:	4e006765 	cdpmi	7, 0, cr6, cr0, cr5, {3}
    4190:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 405c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x88>
    4194:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    4198:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    419c:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    41a0:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    41a4:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    41a8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    41ac:	524f4e00 	subpl	r4, pc, #0, 28
    41b0:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 41b8 <NOROM_SetupGetTrimForXoscHfCtl>
    41b4:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    41b8:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    41bc:	00646165 	rsbeq	r6, r4, r5, ror #2
    41c0:	7465526e 	strbtvc	r5, [r5], #-622	; 0xfffffd92
    41c4:	78754100 	ldmdavc	r5!, {r8, lr}^
    41c8:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    41cc:	61536964 	cmpvs	r3, r4, ror #18
    41d0:	72576566 	subsvc	r6, r7, #427819008	; 0x19800000
    41d4:	00657469 	rsbeq	r7, r5, r9, ror #8
    41d8:	36316975 			; <UNDEFINED> instruction: 0x36316975
    41dc:	61746144 	cmnvs	r4, r4, asr #2
    41e0:	33697500 	cmncc	r9, #0, 10
    41e4:	44725732 	ldrbtmi	r5, [r2], #-1842	; 0xfffff8ce
    41e8:	00617461 	rsbeq	r7, r1, r1, ror #8
    41ec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    41f0:	61746144 	cmnvs	r4, r4, asr #2
    41f4:	33697500 	cmncc	r9, #0, 10
    41f8:	69685332 	stmdbvs	r8!, {r1, r4, r5, r8, r9, ip, lr}^
    41fc:	4e007466 	cdpmi	4, 0, cr7, cr0, cr6, {3}
    4200:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 40cc <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    4204:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    4208:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    420c:	65696674 	strbvs	r6, [r9, #-1652]!	; 0xfffff98c
    4210:	7257646c 	subsvc	r6, r7, #108, 8	; 0x6c000000
    4214:	00657469 	rsbeq	r7, r5, r9, ror #8
    4218:	7461446e 	strbtvc	r4, [r1], #-1134	; 0xfffffb92
    421c:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    4220:	61563233 	cmpvs	r6, r3, lsr r2
    4224:	7541006c 	strbvc	r0, [r1, #-108]	; 0xffffff94
    4228:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    422c:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    4230:	52656661 	rsbpl	r6, r5, #101711872	; 0x6100000
    4234:	00646165 	rsbeq	r6, r4, r5, ror #2
    4238:	4f524f4e 	svcmi	0x00524f4e
    423c:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    4240:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    4244:	72577469 	subsvc	r7, r7, #1761607680	; 0x69000000
    4248:	00657469 	rsbeq	r7, r5, r9, ror #8
    424c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4250:	2f2e2e2f 	svccs	0x002e2e2f
    4254:	642f2e2e 	strtvs	r2, [pc], #-3630	; 425c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x18>
    4258:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    425c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4260:	6964642f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4264:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
    4268:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    426c:	64416765 	strbvs	r6, [r1], #-1893	; 0xfffff89b
    4270:	6e007264 	cdpvs	2, 0, cr7, cr0, cr4, {3}
    4274:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    4278:	5f435f00 	svcpl	0x00435f00
    427c:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
    4280:	5f636972 	svcpl	0x00636972
    4284:	61636f6c 	cmnvs	r3, ip, ror #30
    4288:	6300656c 	movwvs	r6, #1388	; 0x56c
    428c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    4290:	5f79636e 	svcpl	0x0079636e
    4294:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
    4298:	63006c6f 	movwvs	r6, #3183	; 0xc6f
    429c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    42a0:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    42a4:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
    42a8:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    42ac:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    42b0:	73645f64 	cmnvc	r4, #100, 30	; 0x190
    42b4:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    42b8:	5f6e5f74 	svcpl	0x006e5f74
    42bc:	5f706573 	svcpl	0x00706573
    42c0:	735f7962 	cmpvc	pc, #1605632	; 0x188000
    42c4:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    42c8:	6f636c00 	svcvs	0x00636c00
    42cc:	6300766e 	movwvs	r7, #1646	; 0x66e
    42d0:	6c5f6b6a 	mrrcvs	11, 6, r6, pc, cr10	; <UNPREDICTABLE>
    42d4:	00676e61 	rsbeq	r6, r7, r1, ror #28
    42d8:	6e5f636c 	cdpvs	3, 5, cr6, cr15, cr12, {3}
    42dc:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
    42e0:	545f6369 	ldrbpl	r6, [pc], #-873	; 42e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xa4>
    42e4:	5f435f00 	svcpl	0x00435f00
    42e8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    42ec:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    42f0:	00656c61 	rsbeq	r6, r5, r1, ror #24
    42f4:	5f746e69 	svcpl	0x00746e69
    42f8:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    42fc:	6d79735f 	ldclvs	3, cr7, [r9, #-380]!	; 0xfffffe84
    4300:	006c6f62 	rsbeq	r6, ip, r2, ror #30
    4304:	745f636c 	ldrbvc	r6, [pc], #-876	; 430c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc8>
    4308:	5f656d69 	svcpl	0x00656d69
    430c:	6c610054 	stclvs	0, cr0, [r1], #-336	; 0xfffffeb0
    4310:	69645f74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4314:	73746967 	cmnvc	r4, #1687552	; 0x19c000
    4318:	5f435f00 	svcpl	0x00435f00
    431c:	70797463 	rsbsvc	r7, r9, r3, ror #8
    4320:	6f6c5f65 	svcvs	0x006c5f65
    4324:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    4328:	5f6d6100 	svcpl	0x006d6100
    432c:	65006d70 	strvs	r6, [r0, #-3440]	; 0xfffff290
    4330:	645f6172 	ldrbvs	r6, [pc], #-370	; 4338 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>
    4334:	665f745f 			; <UNDEFINED> instruction: 0x665f745f
    4338:	6e00746d 	cdpvs	4, 0, cr7, cr0, cr13, {3}
    433c:	7274736f 	rsbsvc	r7, r4, #-1140850687	; 0xbc000001
    4340:	5f636c00 	svcpl	0x00636c00
    4344:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    4348:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    434c:	6d00545f 	cfstrsvs	mvf5, [r0, #-380]	; 0xfffffe84
    4350:	61737365 	cmnvs	r3, r5, ror #6
    4354:	635f6567 	cmpvs	pc, #432013312	; 0x19c00000
    4358:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
    435c:	6d007465 	cfstrsvs	mvf7, [r0, #-404]	; 0xfffffe6c
    4360:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
    4364:	435f0063 	cmpmi	pc, #99	; 0x63
    4368:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    436c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4370:	6f6c5f73 	svcvs	0x006c5f73
    4374:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    4378:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    437c:	735f705f 	cmpvc	pc, #95	; 0x5f
    4380:	5f6e6769 	svcpl	0x006e6769
    4384:	6e736f70 	mrcvs	15, 3, r6, cr3, cr0, {3}
    4388:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    438c:	6f72675f 	svcvs	0x0072675f
    4390:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
    4394:	5f580067 	svcpl	0x00580067
    4398:	00746d66 	rsbseq	r6, r4, r6, ror #26
    439c:	5f746e69 	svcpl	0x00746e69
    43a0:	73635f70 	cmnvc	r3, #112, 30	; 0x1c0
    43a4:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    43a8:	65646563 	strbvs	r6, [r4, #-1379]!	; 0xfffffa9d
    43ac:	6f6d0073 	svcvs	0x006d0073
    43b0:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
    43b4:	616d6963 	cmnvs	sp, r3, ror #18
    43b8:	6f705f6c 	svcvs	0x00705f6c
    43bc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    43c0:	6d665f63 	stclvs	15, cr5, [r6, #-396]!	; 0xfffffe74
    43c4:	61640074 	smcvs	16388	; 0x4004
    43c8:	665f6574 			; <UNDEFINED> instruction: 0x665f6574
    43cc:	6e00746d 	cdpvs	4, 0, cr7, cr0, cr13, {3}
    43d0:	74616765 	strbtvc	r6, [r1], #-1893	; 0xfffff89b
    43d4:	5f657669 	svcpl	0x00657669
    43d8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    43dc:	5f626d00 	svcpl	0x00626d00
    43e0:	5f727563 	svcpl	0x00727563
    43e4:	0078616d 	rsbseq	r6, r8, sp, ror #2
    43e8:	61686377 	smcvs	34359	; 0x8637
    43ec:	00745f72 	rsbseq	r5, r4, r2, ror pc
    43f0:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    43f4:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    43f8:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    43fc:	7463006e 	strbtvc	r0, [r3], #-110	; 0xffffff92
    4400:	5f657079 	svcpl	0x00657079
    4404:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    4408:	00746573 	rsbseq	r6, r4, r3, ror r5
    440c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    4410:	756f6420 	strbvc	r6, [pc, #-1056]!	; 3ff8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x24>
    4414:	00656c62 	rsbeq	r6, r5, r2, ror #24
    4418:	78656f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    441c:	78007270 	stmdavc	r0, {r4, r5, r6, r9, ip, sp, lr}
    4420:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    4424:	62757300 	rsbsvs	r7, r5, #0, 6
    4428:	6174706f 	cmnvs	r4, pc, rrx
    442c:	69006772 	stmdbvs	r0, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4430:	705f746e 	subsvc	r7, pc, lr, ror #8
    4434:	7065735f 	rsbvc	r7, r5, pc, asr r3
    4438:	5f79625f 	svcpl	0x0079625f
    443c:	63617073 	cmnvs	r1, #115	; 0x73
    4440:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    4444:	5f6e5f74 	svcpl	0x006e5f74
    4448:	705f7363 	subsvc	r7, pc, r3, ror #6
    444c:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4450:	00736564 	rsbseq	r6, r3, r4, ror #10
    4454:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4458:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    445c:	2f2e2e2f 	svccs	0x002e2e2f
    4460:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4464:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4468:	2f2e2e2f 	svccs	0x002e2e2f
    446c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4470:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 42d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x90>
    4474:	2f636269 	svccs	0x00636269
    4478:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    447c:	2f656e69 	svccs	0x00656e69
    4480:	2f6d7261 	svccs	0x006d7261
    4484:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    4488:	732d7970 			; <UNDEFINED> instruction: 0x732d7970
    448c:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    4490:	646d0063 	strbtvs	r0, [sp], #-99	; 0xffffff9d
    4494:	64726f5f 	ldrbtvs	r6, [r2], #-3935	; 0xfffff0a1
    4498:	79007265 	stmdbvc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
    449c:	74737365 	ldrbtvc	r7, [r3], #-869	; 0xfffffc9b
    44a0:	65790072 	ldrbvs	r0, [r9, #-114]!	; 0xffffff8e
    44a4:	70786573 	rsbsvc	r6, r8, r3, ror r5
    44a8:	72650072 	rsbvc	r0, r5, #114	; 0x72
    44ac:	5f645f61 	svcpl	0x00645f61
    44b0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    44b4:	635f636c 	cmpvs	pc, #108, 6	; 0xb0000001
    44b8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    44bc:	6500545f 	strvs	r5, [r0, #-1119]	; 0xfffffba1
    44c0:	745f6172 	ldrbvc	r6, [pc], #-370	; 44c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xe8>
    44c4:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    44c8:	74637700 	strbtvc	r7, [r3], #-1792	; 0xfffff900
    44cc:	00626d6f 	rsbeq	r6, r2, pc, ror #26
    44d0:	5f6e6f6d 	svcpl	0x006e6f6d
    44d4:	756f6874 	strbvc	r6, [pc, #-2164]!	; 3c68 <NOROM_RFCRfTrimRead+0x12c>
    44d8:	646e6173 	strbtvs	r6, [lr], #-371	; 0xfffffe8d
    44dc:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
    44e0:	6d610070 	stclvs	0, cr0, [r1, #-448]!	; 0xfffffe40
    44e4:	665f6d70 			; <UNDEFINED> instruction: 0x665f6d70
    44e8:	6c00746d 	cfstrsvs	mvf7, [r0], {109}	; 0x6d
    44ec:	656d5f63 	strbvs	r5, [sp, #-3939]!	; 0xfffff09d
    44f0:	67617373 			; <UNDEFINED> instruction: 0x67617373
    44f4:	545f7365 	ldrbpl	r7, [pc], #-869	; 44fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>
    44f8:	65657700 	strbvs	r7, [r5, #-1792]!	; 0xfffff900
    44fc:	7961646b 	stmdbvc	r1!, {r0, r1, r3, r5, r6, sl, sp, lr}^
    4500:	5f435f00 	svcpl	0x00435f00
    4504:	656e6f6d 	strbvs	r6, [lr, #-3949]!	; 0xfffff093
    4508:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    450c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    4510:	00656c61 	rsbeq	r6, r5, r1, ror #24
    4514:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    4518:	69726f67 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^
    451c:	69007365 	stmdbvs	r0, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    4520:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
    4524:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    4528:	6f705f6e 	svcvs	0x00705f6e
    452c:	61006e73 	tstvs	r0, r3, ror lr
    4530:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    4534:	735f6465 	cmpvc	pc, #1694498816	; 0x65000000
    4538:	47006372 	smlsdxmi	r0, r2, r3, r6
    453c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    4540:	38203731 	stmdacc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
    4544:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    4548:	31303220 	teqcc	r0, r0, lsr #4
    454c:	30373039 	eorscc	r3, r7, r9, lsr r0
    4550:	72282033 	eorvc	r2, r8, #51	; 0x33
    4554:	61656c65 	cmnvs	r5, r5, ror #24
    4558:	20296573 	eorcs	r6, r9, r3, ror r5
    455c:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
    4560:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
    4564:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    4568:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
    456c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4570:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    4574:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
    4578:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
    457c:	6f6c666d 	svcvs	0x006c666d
    4580:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    4584:	733d6962 	teqvc	sp, #1605632	; 0x188000
    4588:	2074666f 	rsbscs	r6, r4, pc, ror #12
    458c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    4590:	20626d75 	rsbcs	r6, r2, r5, ror sp
    4594:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    4598:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    459c:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    45a0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    45a4:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    45a8:	613d7570 	teqvs	sp, r0, ror r5
    45ac:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    45b0:	20696d64 	rsbcs	r6, r9, r4, ror #26
    45b4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    45b8:	613d6863 	teqvs	sp, r3, ror #16
    45bc:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    45c0:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    45c4:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    45c8:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    45cc:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
    45d0:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    45d4:	622f006e 	eorvs	r0, pc, #110	; 0x6e
    45d8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    45dc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    45e0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    45e4:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    45e8:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    45ec:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    45f0:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    45f4:	2f302e33 	svccs	0x00302e33
    45f8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    45fc:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    4600:	6f6e2d6d 	svcvs	0x006e2d6d
    4604:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4608:	2f696261 	svccs	0x00696261
    460c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4610:	6f6e2f62 	svcvs	0x006e2f62
    4614:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    4618:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    461c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4620:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 44a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc0>
    4624:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4628:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    462c:	6c006d72 	stcvs	13, cr6, [r0], {114}	; 0x72
    4630:	00306e65 	eorseq	r6, r0, r5, ror #28
    4634:	5f746e69 	svcpl	0x00746e69
    4638:	63617266 	cmnvs	r1, #1610612742	; 0x60000006
    463c:	6769645f 			; <UNDEFINED> instruction: 0x6769645f
    4640:	00737469 	rsbseq	r7, r3, r9, ror #8
    4644:	30637273 	rsbcc	r7, r3, r3, ror r2
    4648:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    464c:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    4650:	2e006874 	mcrcs	8, 0, r6, cr0, cr4, {3}
    4654:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4658:	2f2e2e2f 	svccs	0x002e2e2f
    465c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4660:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4664:	2f2e2e2f 	svccs	0x002e2e2f
    4668:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    466c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 44d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    4670:	2f636269 	svccs	0x00636269
    4674:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    4678:	722f6269 	eorvc	r6, pc, #-1879048186	; 0x90000006
    467c:	2e646e61 	cdpcs	14, 6, cr6, cr4, cr1, {3}
    4680:	72730063 	rsbsvc	r0, r3, #99	; 0x63
    4684:	00646e61 	rsbeq	r6, r4, r1, ror #28
    4688:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    468c:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    4690:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4694:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    4698:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    469c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46a0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    46a4:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    46a8:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    46ac:	2f646c69 	svccs	0x00646c69
    46b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    46b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    46b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    46bc:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    46c0:	2f626d75 	svccs	0x00626d75
    46c4:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    46c8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46cc:	2f62696c 	svccs	0x0062696c
    46d0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    46d4:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    46d8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    46dc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    46e0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    46e4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46e8:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    46ec:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    46f0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46f4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    46f8:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    46fc:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    4700:	2f646c69 	svccs	0x00646c69
    4704:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4708:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    470c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4710:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    4714:	2f626d75 	svccs	0x00626d75
    4718:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    471c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4720:	2f62696c 	svccs	0x0062696c
    4724:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4728:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    472c:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4730:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    4734:	61645f65 	cmnvs	r4, r5, ror #30
    4738:	2e006174 	mcrcs	1, 0, r6, cr0, cr4, {3}
    473c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4740:	2f2e2e2f 	svccs	0x002e2e2f
    4744:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4748:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    474c:	2f2e2e2f 	svccs	0x002e2e2f
    4750:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4754:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 45b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x88>
    4758:	2f636269 	svccs	0x00636269
    475c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4760:	6d692f74 	stclvs	15, cr2, [r9, #-464]!	; 0xfffffe30
    4764:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    4768:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
    476c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4770:	50435f54 	subpl	r5, r3, r4, asr pc
    4774:	6f635f55 	svcvs	0x00635f55
    4778:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    477c:	63373161 	teqvs	r7, #1073741848	; 0x40000018
    4780:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4784:	00376178 	eorseq	r6, r7, r8, ror r1
    4788:	5f617369 	svcpl	0x00617369
    478c:	5f746962 	svcpl	0x00746962
    4790:	645f7066 	ldrbvs	r7, [pc], #-102	; 4798 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x48>
    4794:	61006c62 	tstvs	r0, r2, ror #24
    4798:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    479c:	5f686372 	svcpl	0x00686372
    47a0:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    47a4:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
    47a8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    47ac:	50435f54 	subpl	r5, r3, r4, asr pc
    47b0:	6f635f55 	svcvs	0x00635f55
    47b4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    47b8:	0033326d 	eorseq	r3, r3, sp, ror #4
    47bc:	5f4d5241 	svcpl	0x004d5241
    47c0:	54005145 	strpl	r5, [r0], #-325	; 0xfffffebb
    47c4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    47c8:	50435f54 	subpl	r5, r3, r4, asr pc
    47cc:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    47d0:	3531316d 	ldrcc	r3, [r1, #-365]!	; 0xfffffe93
    47d4:	66327436 			; <UNDEFINED> instruction: 0x66327436
    47d8:	73690073 	cmnvc	r9, #115	; 0x73
    47dc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    47e0:	68745f74 	ldmdavs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    47e4:	00626d75 	rsbeq	r6, r2, r5, ror sp
    47e8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    47ec:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    47f0:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    47f4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    47f8:	37356178 			; <UNDEFINED> instruction: 0x37356178
    47fc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4800:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4804:	5f5f0033 	svcpl	0x005f0033
    4808:	646c756d 	strbtvs	r7, [ip], #-1389	; 0xfffffa93
    480c:	42003369 	andmi	r3, r0, #-1543503871	; 0xa4000001
    4810:	5f455341 	svcpl	0x00455341
    4814:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4818:	5f4d385f 	svcpl	0x004d385f
    481c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4820:	52415400 	subpl	r5, r1, #0, 8
    4824:	5f544547 	svcpl	0x00544547
    4828:	5f555043 	svcpl	0x00555043
    482c:	386d7261 	stmdacc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4830:	54003031 	strpl	r3, [r0], #-49	; 0xffffffcf
    4834:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4838:	50435f54 	subpl	r5, r3, r4, asr pc
    483c:	67785f55 			; <UNDEFINED> instruction: 0x67785f55
    4840:	31656e65 	cmncc	r5, r5, ror #28
    4844:	4d524100 	ldfmie	f4, [r2, #-0]
    4848:	5343505f 	movtpl	r5, #12383	; 0x305f
    484c:	5041415f 	subpl	r4, r1, pc, asr r1
    4850:	495f5343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    4854:	584d4d57 	stmdapl	sp, {r0, r1, r2, r4, r6, r8, sl, fp, lr}^
    4858:	41420054 	qdaddmi	r0, r4, r2
    485c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4860:	5f484352 	svcpl	0x00484352
    4864:	41420030 	cmpmi	r2, r0, lsr r0
    4868:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    486c:	5f484352 	svcpl	0x00484352
    4870:	41420032 	cmpmi	r2, r2, lsr r0
    4874:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4878:	5f484352 	svcpl	0x00484352
    487c:	41420033 	cmpmi	r2, r3, lsr r0
    4880:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4884:	5f484352 	svcpl	0x00484352
    4888:	41420034 	cmpmi	r2, r4, lsr r0
    488c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4890:	5f484352 	svcpl	0x00484352
    4894:	41420036 	cmpmi	r2, r6, lsr r0
    4898:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    489c:	5f484352 	svcpl	0x00484352
    48a0:	41540037 	cmpmi	r4, r7, lsr r0
    48a4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    48a8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    48ac:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    48b0:	00656c61 	rsbeq	r6, r5, r1, ror #24
    48b4:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    48b8:	61736900 	cmnvs	r3, r0, lsl #18
    48bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    48c0:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    48c4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    48c8:	52415400 	subpl	r5, r1, #0, 8
    48cc:	5f544547 	svcpl	0x00544547
    48d0:	5f555043 	svcpl	0x00555043
    48d4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    48d8:	336d7865 	cmncc	sp, #6619136	; 0x650000
    48dc:	53550033 	cmppl	r5, #51	; 0x33
    48e0:	70797449 	rsbsvc	r7, r9, r9, asr #8
    48e4:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    48e8:	2f2e2e2f 	svccs	0x002e2e2f
    48ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    48f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48f4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    48f8:	2f636367 	svccs	0x00636367
    48fc:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    4900:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    4904:	41540063 	cmpmi	r4, r3, rrx
    4908:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    490c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4910:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4914:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    4918:	73690069 	cmnvc	r9, #105	; 0x69
    491c:	6f6e5f61 	svcvs	0x006e5f61
    4920:	00746962 	rsbseq	r6, r4, r2, ror #18
    4924:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4928:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    492c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4930:	31316d72 	teqcc	r1, r2, ror sp
    4934:	7a6a3637 	bvc	1a92218 <__ccfg+0x1a72270>
    4938:	69007366 	stmdbvs	r0, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    493c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4940:	765f7469 	ldrbvc	r7, [pc], -r9, ror #8
    4944:	32767066 	rsbscc	r7, r6, #102	; 0x66
    4948:	4d524100 	ldfmie	f4, [r2, #-0]
    494c:	5343505f 	movtpl	r5, #12383	; 0x305f
    4950:	4b4e555f 	blmi	1399ed4 <__ccfg+0x1379f2c>
    4954:	4e574f4e 	cdpmi	15, 5, cr4, cr7, cr14, {2}
    4958:	52415400 	subpl	r5, r1, #0, 8
    495c:	5f544547 	svcpl	0x00544547
    4960:	5f555043 	svcpl	0x00555043
    4964:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4968:	41420065 	cmpmi	r2, r5, rrx
    496c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4970:	5f484352 	svcpl	0x00484352
    4974:	4a455435 	bmi	1159a50 <__ccfg+0x1139aa8>
    4978:	6d726100 	ldfvse	f6, [r2, #-0]
    497c:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    4980:	735f6d73 	cmpvc	pc, #7360	; 0x1cc0
    4984:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    4988:	6d726100 	ldfvse	f6, [r2, #-0]
    498c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4990:	65743568 	ldrbvs	r3, [r4, #-1384]!	; 0xfffffa98
    4994:	736e7500 	cmnvc	lr, #0, 10
    4998:	5f636570 	svcpl	0x00636570
    499c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    49a0:	0073676e 	rsbseq	r6, r3, lr, ror #14
    49a4:	5f617369 	svcpl	0x00617369
    49a8:	5f746962 	svcpl	0x00746962
    49ac:	00636573 	rsbeq	r6, r3, r3, ror r5
    49b0:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
    49b4:	61745f7a 	cmnvs	r4, sl, ror pc
    49b8:	52410062 	subpl	r0, r1, #98	; 0x62
    49bc:	43565f4d 	cmpmi	r6, #308	; 0x134
    49c0:	6d726100 	ldfvse	f6, [r2, #-0]
    49c4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    49c8:	73785f68 	cmnvc	r8, #104, 30	; 0x1a0
    49cc:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    49d0:	4d524100 	ldfmie	f4, [r2, #-0]
    49d4:	00454c5f 	subeq	r4, r5, pc, asr ip
    49d8:	6e755744 	cdpvs	7, 7, cr5, cr5, cr4, {2}
    49dc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    49e0:	5f4d5241 	svcpl	0x004d5241
    49e4:	41005356 	tstmi	r0, r6, asr r3
    49e8:	475f4d52 			; <UNDEFINED> instruction: 0x475f4d52
    49ec:	72610045 	rsbvc	r0, r1, #69	; 0x45
    49f0:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    49f4:	735f656e 	cmpvc	pc, #461373440	; 0x1b800000
    49f8:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    49fc:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    4a00:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 4a08 <__aeabi_lmul+0x48>
    4a04:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    4a08:	6f6c6620 	svcvs	0x006c6620
    4a0c:	54007461 	strpl	r7, [r0], #-1121	; 0xfffffb9f
    4a10:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a14:	50435f54 	subpl	r5, r3, r4, asr pc
    4a18:	6f635f55 	svcvs	0x00635f55
    4a1c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a20:	00353161 	eorseq	r3, r5, r1, ror #2
    4a24:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4a28:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4a2c:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4a30:	36323761 	ldrtcc	r3, [r2], -r1, ror #14
    4a34:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4a38:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a3c:	50435f54 	subpl	r5, r3, r4, asr pc
    4a40:	6f635f55 	svcvs	0x00635f55
    4a44:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a48:	00373161 	eorseq	r3, r7, r1, ror #2
    4a4c:	5f4d5241 	svcpl	0x004d5241
    4a50:	54005447 	strpl	r5, [r0], #-1095	; 0xfffffbb9
    4a54:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a58:	50435f54 	subpl	r5, r3, r4, asr pc
    4a5c:	656e5f55 	strbvs	r5, [lr, #-3925]!	; 0xfffff0ab
    4a60:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    4a64:	316e6573 	smccc	58963	; 0xe653
    4a68:	52415400 	subpl	r5, r1, #0, 8
    4a6c:	5f544547 	svcpl	0x00544547
    4a70:	5f555043 	svcpl	0x00555043
    4a74:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a78:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    4a7c:	41420066 	cmpmi	r2, r6, rrx
    4a80:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4a84:	5f484352 	svcpl	0x00484352
    4a88:	004d4537 	subeq	r4, sp, r7, lsr r5
    4a8c:	20554e47 	subscs	r4, r5, r7, asr #28
    4a90:	20373143 	eorscs	r3, r7, r3, asr #2
    4a94:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4a98:	30322031 	eorscc	r2, r2, r1, lsr r0
    4a9c:	30313931 	eorscc	r3, r1, r1, lsr r9
    4aa0:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
    4aa4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    4aa8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    4aac:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
    4ab0:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
    4ab4:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
    4ab8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    4abc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    4ac0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    4ac4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    4ac8:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
    4acc:	205d3939 	subscs	r3, sp, r9, lsr r9
    4ad0:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    4ad4:	20626d75 	rsbcs	r6, r2, r5, ror sp
    4ad8:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    4adc:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    4ae0:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    4ae4:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    4ae8:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    4aec:	613d7570 	teqvs	sp, r0, ror r5
    4af0:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4af4:	20696d64 	rsbcs	r6, r9, r4, ror #26
    4af8:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    4afc:	613d6863 	teqvs	sp, r3, ror #16
    4b00:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    4b04:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    4b08:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    4b0c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    4b10:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b14:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b18:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4b1c:	69756266 	ldmdbvs	r5!, {r1, r2, r5, r6, r9, sp, lr}^
    4b20:	6e69646c 	cdpvs	4, 6, cr6, cr9, cr12, {3}
    4b24:	696c2d67 	stmdbvs	ip!, {r0, r1, r2, r5, r6, r8, sl, fp, sp}^
    4b28:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4b2c:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    4b30:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
    4b34:	2d6b6361 	stclcs	3, cr6, [fp, #-388]!	; 0xfffffe7c
    4b38:	746f7270 	strbtvc	r7, [pc], #-624	; 4b40 <__aeabi_lmul+0x180>
    4b3c:	6f746365 	svcvs	0x00746365
    4b40:	662d2072 			; <UNDEFINED> instruction: 0x662d2072
    4b44:	692d6f6e 	pushvs	{r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4b48:	6e696c6e 	cdpvs	12, 6, cr6, cr9, cr14, {3}
    4b4c:	662d2065 	strtvs	r2, [sp], -r5, rrx
    4b50:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4b54:	696c6962 	stmdbvs	ip!, {r1, r5, r6, r8, fp, sp, lr}^
    4b58:	683d7974 	ldmdavs	sp!, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    4b5c:	65646469 	strbvs	r6, [r4, #-1129]!	; 0xfffffb97
    4b60:	4154006e 	cmpmi	r4, lr, rrx
    4b64:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4b68:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4b6c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4b70:	61786574 	cmnvs	r8, r4, ror r5
    4b74:	68003231 	stmdavs	r0, {r0, r4, r5, r9, ip, sp}
    4b78:	76687361 	strbtvc	r7, [r8], -r1, ror #6
    4b7c:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 4b84 <__aeabi_lmul+0x1c4>
    4b80:	53414200 	movtpl	r4, #4608	; 0x1200
    4b84:	52415f45 	subpl	r5, r1, #276	; 0x114
    4b88:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    4b8c:	69005a4b 	stmdbvs	r0, {r0, r1, r3, r6, r9, fp, ip, lr}
    4b90:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4b94:	00737469 	rsbseq	r7, r3, r9, ror #8
    4b98:	5f6d7261 	svcpl	0x006d7261
    4b9c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4ba0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4ba4:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    4ba8:	61007669 	tstvs	r0, r9, ror #12
    4bac:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    4bb0:	645f7570 	ldrbvs	r7, [pc], #-1392	; 4bb8 <__aeabi_lmul+0x1f8>
    4bb4:	00637365 	rsbeq	r7, r3, r5, ror #6
    4bb8:	5f617369 	svcpl	0x00617369
    4bbc:	5f746962 	svcpl	0x00746962
    4bc0:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    4bc4:	4d524100 	ldfmie	f4, [r2, #-0]
    4bc8:	0049485f 	subeq	r4, r9, pc, asr r8
    4bcc:	5f617369 	svcpl	0x00617369
    4bd0:	5f746962 	svcpl	0x00746962
    4bd4:	76696461 	strbtvc	r6, [r9], -r1, ror #8
    4bd8:	52415400 	subpl	r5, r1, #0, 8
    4bdc:	5f544547 	svcpl	0x00544547
    4be0:	5f555043 	svcpl	0x00555043
    4be4:	316d7261 	cmncc	sp, r1, ror #4
    4be8:	6a363331 	bvs	d918b4 <__ccfg+0xd7190c>
    4bec:	41540073 	cmpmi	r4, r3, ror r0
    4bf0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4bf4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4bf8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4bfc:	41540038 	cmpmi	r4, r8, lsr r0
    4c00:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c04:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c08:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c0c:	41540039 	cmpmi	r4, r9, lsr r0
    4c10:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c14:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c18:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4c1c:	61003632 	tstvs	r0, r2, lsr r6
    4c20:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4c24:	5f686372 	svcpl	0x00686372
    4c28:	65736d63 	ldrbvs	r6, [r3, #-3427]!	; 0xfffff29d
    4c2c:	52415400 	subpl	r5, r1, #0, 8
    4c30:	5f544547 	svcpl	0x00544547
    4c34:	5f555043 	svcpl	0x00555043
    4c38:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c3c:	346d7865 	strbtcc	r7, [sp], #-2149	; 0xfffff79b
    4c40:	52415400 	subpl	r5, r1, #0, 8
    4c44:	5f544547 	svcpl	0x00544547
    4c48:	5f555043 	svcpl	0x00555043
    4c4c:	316d7261 	cmncc	sp, r1, ror #4
    4c50:	54006530 	strpl	r6, [r0], #-1328	; 0xfffffad0
    4c54:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c58:	50435f54 	subpl	r5, r3, r4, asr pc
    4c5c:	6f635f55 	svcvs	0x00635f55
    4c60:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c64:	6100376d 	tstvs	r0, sp, ror #14
    4c68:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    4c6c:	5f646e6f 	svcpl	0x00646e6f
    4c70:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    4c74:	4d524100 	ldfmie	f4, [r2, #-0]
    4c78:	5343505f 	movtpl	r5, #12383	; 0x305f
    4c7c:	5041415f 	subpl	r4, r1, pc, asr r1
    4c80:	69005343 	stmdbvs	r0, {r0, r1, r6, r8, r9, ip, lr}
    4c84:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4c88:	615f7469 	cmpvs	pc, r9, ror #8
    4c8c:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4c90:	4200325f 	andmi	r3, r0, #-268435451	; 0xf0000005
    4c94:	5f455341 	svcpl	0x00455341
    4c98:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4c9c:	004d335f 	subeq	r3, sp, pc, asr r3
    4ca0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ca4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4ca8:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4cac:	31376d72 	teqcc	r7, r2, ror sp
    4cb0:	61007430 	tstvs	r0, r0, lsr r4
    4cb4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4cb8:	5f686372 	svcpl	0x00686372
    4cbc:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    4cc0:	00327478 	eorseq	r7, r2, r8, ror r4
    4cc4:	5f617369 	svcpl	0x00617369
    4cc8:	5f6d756e 	svcpl	0x006d756e
    4ccc:	73746962 	cmnvc	r4, #1605632	; 0x188000
    4cd0:	52415400 	subpl	r5, r1, #0, 8
    4cd4:	5f544547 	svcpl	0x00544547
    4cd8:	5f555043 	svcpl	0x00555043
    4cdc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4ce0:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4ce4:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    4ce8:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    4cec:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    4cf0:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    4cf4:	41540079 	cmpmi	r4, r9, ror r0
    4cf8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4cfc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d00:	7978655f 	ldmdbvc	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    4d04:	6d736f6e 	ldclvs	15, cr6, [r3, #-440]!	; 0xfffffe48
    4d08:	41540031 	cmpmi	r4, r1, lsr r0
    4d0c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d10:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d14:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4d18:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    4d1c:	69003235 	stmdbvs	r0, {r0, r2, r4, r5, r9, ip, sp}
    4d20:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4d24:	745f7469 	ldrbvc	r7, [pc], #-1129	; 4d2c <__aeabi_lmul+0x36c>
    4d28:	00766964 	rsbseq	r6, r6, r4, ror #18
    4d2c:	66657270 			; <UNDEFINED> instruction: 0x66657270
    4d30:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
    4d34:	5f6e6f65 	svcpl	0x006e6f65
    4d38:	5f726f66 	svcpl	0x00726f66
    4d3c:	69623436 	stmdbvs	r2!, {r1, r2, r4, r5, sl, ip, sp}^
    4d40:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    4d44:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4d48:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4d4c:	66363170 			; <UNDEFINED> instruction: 0x66363170
    4d50:	54006c6d 	strpl	r6, [r0], #-3181	; 0xfffff393
    4d54:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4d58:	50435f54 	subpl	r5, r3, r4, asr pc
    4d5c:	6f635f55 	svcvs	0x00635f55
    4d60:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4d64:	00323361 	eorseq	r3, r2, r1, ror #6
    4d68:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d6c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d70:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4d74:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4d78:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    4d7c:	61736900 	cmnvs	r3, r0, lsl #18
    4d80:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4d84:	3170665f 	cmncc	r0, pc, asr r6
    4d88:	6e6f6336 	mcrvs	3, 3, r6, cr15, cr6, {1}
    4d8c:	6e750076 	mrcvs	0, 3, r0, cr5, cr6, {3}
    4d90:	63657073 	cmnvs	r5, #115	; 0x73
    4d94:	74735f76 	ldrbtvc	r5, [r3], #-3958	; 0xfffff08a
    4d98:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4d9c:	41540073 	cmpmi	r4, r3, ror r0
    4da0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4da4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4da8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4dac:	36353131 			; <UNDEFINED> instruction: 0x36353131
    4db0:	00733274 	rsbseq	r3, r3, r4, ror r2
    4db4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4db8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4dbc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4dc0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4dc4:	35376178 	ldrcc	r6, [r7, #-376]!	; 0xfffffe88
    4dc8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4dcc:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4dd0:	41540035 	cmpmi	r4, r5, lsr r0
    4dd4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4dd8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4ddc:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4de0:	65743630 	ldrbvs	r3, [r4, #-1584]!	; 0xfffff9d0
    4de4:	52415400 	subpl	r5, r1, #0, 8
    4de8:	5f544547 	svcpl	0x00544547
    4dec:	5f555043 	svcpl	0x00555043
    4df0:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4df4:	6a653632 	bvs	19526c4 <__ccfg+0x193271c>
    4df8:	41420073 	hvcmi	8195	; 0x2003
    4dfc:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4e00:	5f484352 	svcpl	0x00484352
    4e04:	69005434 	stmdbvs	r0, {r2, r4, r5, sl, ip, lr}
    4e08:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e0c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    4e10:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
    4e14:	7261006f 	rsbvc	r0, r1, #111	; 0x6f
    4e18:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    4e1c:	695f7367 	ldmdbvs	pc, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4e20:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    4e24:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    4e28:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    4e2c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e30:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    4e34:	41420062 	cmpmi	r2, r2, rrx
    4e38:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4e3c:	5f484352 	svcpl	0x00484352
    4e40:	00455435 	subeq	r5, r5, r5, lsr r4
    4e44:	5f617369 	svcpl	0x00617369
    4e48:	74616566 	strbtvc	r6, [r1], #-1382	; 0xfffffa9a
    4e4c:	00657275 	rsbeq	r7, r5, r5, ror r2
    4e50:	5f617369 	svcpl	0x00617369
    4e54:	5f746962 	svcpl	0x00746962
    4e58:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    4e5c:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    4e60:	6d726100 	ldfvse	f6, [r2, #-0]
    4e64:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    4e68:	756f5f67 	strbvc	r5, [pc, #-3943]!	; 3f09 <NOROM_SetupTrimDevice+0x55>
    4e6c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    4e70:	6a626f5f 	bvs	18a0bf4 <__ccfg+0x1880c4c>
    4e74:	5f746365 	svcpl	0x00746365
    4e78:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    4e7c:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
    4e80:	685f7365 	ldmdavs	pc, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4e84:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    4e88:	5f617369 	svcpl	0x00617369
    4e8c:	5f746962 	svcpl	0x00746962
    4e90:	645f7066 	ldrbvs	r7, [pc], #-102	; 4e98 <__aeabi_lmul+0x4d8>
    4e94:	41003233 	tstmi	r0, r3, lsr r2
    4e98:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    4e9c:	73690045 	cmnvc	r9, #69	; 0x45
    4ea0:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ea4:	65625f74 	strbvs	r5, [r2, #-3956]!	; 0xfffff08c
    4ea8:	41540038 	cmpmi	r4, r8, lsr r0
    4eac:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4eb0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4eb4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4eb8:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4ebc:	00737a6a 	rsbseq	r7, r3, sl, ror #20
    4ec0:	636f7270 	cmnvs	pc, #112, 4
    4ec4:	6f737365 	svcvs	0x00737365
    4ec8:	79745f72 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ecc:	61006570 	tstvs	r0, r0, ror r5
    4ed0:	665f6c6c 	ldrbvs	r6, [pc], -ip, ror #24
    4ed4:	00737570 	rsbseq	r7, r3, r0, ror r5
    4ed8:	5f6d7261 	svcpl	0x006d7261
    4edc:	00736370 	rsbseq	r6, r3, r0, ror r3
    4ee0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4ee4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4ee8:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4eec:	6d726100 	ldfvse	f6, [r2, #-0]
    4ef0:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4ef4:	00743468 	rsbseq	r3, r4, r8, ror #8
    4ef8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4efc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4f00:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4f04:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4f08:	36376178 			; <UNDEFINED> instruction: 0x36376178
    4f0c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f10:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4f14:	72610035 	rsbvc	r0, r1, #53	; 0x35
    4f18:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4f1c:	775f656e 	ldrbvc	r6, [pc, -lr, ror #10]
    4f20:	00667562 	rsbeq	r7, r6, r2, ror #10
    4f24:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    4f28:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    4f2c:	73690068 	cmnvc	r9, #104	; 0x68
    4f30:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4f34:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    4f38:	5f6b7269 	svcpl	0x006b7269
    4f3c:	765f6f6e 	ldrbvc	r6, [pc], -lr, ror #30
    4f40:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    4f44:	5f656c69 	svcpl	0x00656c69
    4f48:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    4f4c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f50:	50435f54 	subpl	r5, r3, r4, asr pc
    4f54:	6f635f55 	svcvs	0x00635f55
    4f58:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f5c:	5400306d 	strpl	r3, [r0], #-109	; 0xffffff93
    4f60:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f64:	50435f54 	subpl	r5, r3, r4, asr pc
    4f68:	6f635f55 	svcvs	0x00635f55
    4f6c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f70:	5400316d 	strpl	r3, [r0], #-365	; 0xfffffe93
    4f74:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f78:	50435f54 	subpl	r5, r3, r4, asr pc
    4f7c:	6f635f55 	svcvs	0x00635f55
    4f80:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f84:	6900336d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    4f88:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4f8c:	615f7469 	cmpvs	pc, r9, ror #8
    4f90:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4f94:	6100315f 	tstvs	r0, pc, asr r1
    4f98:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4f9c:	5f686372 	svcpl	0x00686372
    4fa0:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    4fa4:	61736900 	cmnvs	r3, r0, lsl #18
    4fa8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fac:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fb0:	335f3876 	cmpcc	pc, #7733248	; 0x760000
    4fb4:	61736900 	cmnvs	r3, r0, lsl #18
    4fb8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fbc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fc0:	345f3876 	ldrbcc	r3, [pc], #-2166	; 4fc8 <__aeabi_lmul+0x608>
    4fc4:	61736900 	cmnvs	r3, r0, lsl #18
    4fc8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fcc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fd0:	355f3876 	ldrbcc	r3, [pc, #-2166]	; 4762 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x12>
    4fd4:	52415400 	subpl	r5, r1, #0, 8
    4fd8:	5f544547 	svcpl	0x00544547
    4fdc:	5f555043 	svcpl	0x00555043
    4fe0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4fe4:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4fe8:	41540033 	cmpmi	r4, r3, lsr r0
    4fec:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4ff0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4ff4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4ff8:	61786574 	cmnvs	r8, r4, ror r5
    4ffc:	54003535 	strpl	r3, [r0], #-1333	; 0xfffffacb
    5000:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5004:	50435f54 	subpl	r5, r3, r4, asr pc
    5008:	6f635f55 	svcvs	0x00635f55
    500c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5010:	00373561 	eorseq	r3, r7, r1, ror #10
    5014:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5018:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    501c:	6d5f5550 	cfldr64vs	mvdx5, [pc, #-320]	; 4ee4 <__aeabi_lmul+0x524>
    5020:	726f6370 	rsbvc	r6, pc, #112, 6	; 0xc0000001
    5024:	41540065 	cmpmi	r4, r5, rrx
    5028:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    502c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5030:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5034:	6e6f6e5f 	mcrvs	14, 3, r6, cr15, cr15, {2}
    5038:	72610065 	rsbvc	r0, r1, #101	; 0x65
    503c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5040:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    5044:	006d746f 	rsbeq	r7, sp, pc, ror #8
    5048:	47524154 			; <UNDEFINED> instruction: 0x47524154
    504c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5050:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5054:	30316d72 	eorscc	r6, r1, r2, ror sp
    5058:	6a653632 	bvs	1952928 <__ccfg+0x1932980>
    505c:	41420073 	hvcmi	8195	; 0x2003
    5060:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5064:	5f484352 	svcpl	0x00484352
    5068:	42004a36 	andmi	r4, r0, #221184	; 0x36000
    506c:	5f455341 	svcpl	0x00455341
    5070:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    5074:	004b365f 	subeq	r3, fp, pc, asr r6
    5078:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    507c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5080:	4d365f48 	ldcmi	15, cr5, [r6, #-288]!	; 0xfffffee0
    5084:	61736900 	cmnvs	r3, r0, lsl #18
    5088:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    508c:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    5090:	0074786d 	rsbseq	r7, r4, sp, ror #16
    5094:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5098:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    509c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    50a0:	31316d72 	teqcc	r1, r2, ror sp
    50a4:	666a3633 			; <UNDEFINED> instruction: 0x666a3633
    50a8:	52410073 	subpl	r0, r1, #115	; 0x73
    50ac:	534c5f4d 	movtpl	r5, #53069	; 0xcf4d
    50b0:	4d524100 	ldfmie	f4, [r2, #-0]
    50b4:	00544c5f 	subseq	r4, r4, pc, asr ip
    50b8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    50bc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    50c0:	5a365f48 	bpl	d9cde8 <__ccfg+0xd7ce40>
    50c4:	4d524100 	ldfmie	f4, [r2, #-0]
    50c8:	5343505f 	movtpl	r5, #12383	; 0x305f
    50cc:	5041415f 	subpl	r4, r1, pc, asr r1
    50d0:	565f5343 	ldrbpl	r5, [pc], -r3, asr #6
    50d4:	54005046 	strpl	r5, [r0], #-70	; 0xffffffba
    50d8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    50dc:	50435f54 	subpl	r5, r3, r4, asr pc
    50e0:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    50e4:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    50e8:	73690032 	cmnvc	r9, #50	; 0x32
    50ec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    50f0:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
    50f4:	61006e6f 	tstvs	r0, pc, ror #28
    50f8:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    50fc:	615f7570 	cmpvs	pc, r0, ror r5	; <UNPREDICTABLE>
    5100:	00727474 	rsbseq	r7, r2, r4, ror r4
    5104:	5f617369 	svcpl	0x00617369
    5108:	5f746962 	svcpl	0x00746962
    510c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    5110:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    5114:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5118:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    511c:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    5120:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    5124:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    5128:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    512c:	50435f54 	subpl	r5, r3, r4, asr pc
    5130:	616d5f55 	cmnvs	sp, r5, asr pc
    5134:	6c657672 	stclvs	6, cr7, [r5], #-456	; 0xfffffe38
    5138:	6a705f6c 	bvs	1c1cef0 <__ccfg+0x1bfcf48>
    513c:	74680034 	strbtvc	r0, [r8], #-52	; 0xffffffcc
    5140:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    5144:	5f687361 	svcpl	0x00687361
    5148:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    514c:	00726574 	rsbseq	r6, r2, r4, ror r5
    5150:	5f6d7261 	svcpl	0x006d7261
    5154:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    5158:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    515c:	5f786574 	svcpl	0x00786574
    5160:	69003961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp}
    5164:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5168:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    516c:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    5170:	54003274 	strpl	r3, [r0], #-628	; 0xfffffd8c
    5174:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5178:	50435f54 	subpl	r5, r3, r4, asr pc
    517c:	6f635f55 	svcvs	0x00635f55
    5180:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5184:	63323761 	teqvs	r2, #25427968	; 0x1840000
    5188:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    518c:	33356178 	teqcc	r5, #120, 2
    5190:	61736900 	cmnvs	r3, r0, lsl #18
    5194:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5198:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    519c:	0032626d 	eorseq	r6, r2, sp, ror #4
    51a0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    51a4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    51a8:	41375f48 	teqmi	r7, r8, asr #30
    51ac:	61736900 	cmnvs	r3, r0, lsl #18
    51b0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    51b4:	746f645f 	strbtvc	r6, [pc], #-1119	; 51bc <__pi_hex_enc_table+0x6b>
    51b8:	646f7270 	strbtvs	r7, [pc], #-624	; 51c0 <__pi_hex_enc_table+0x6f>
    51bc:	6d726100 	ldfvse	f6, [r2, #-0]
    51c0:	3170665f 	cmncc	r0, pc, asr r6
    51c4:	79745f36 	ldmdbvc	r4!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    51c8:	6e5f6570 	mrcvs	5, 2, r6, cr15, cr0, {3}
    51cc:	0065646f 	rsbeq	r6, r5, pc, ror #8
    51d0:	5f4d5241 	svcpl	0x004d5241
    51d4:	6100494d 	tstvs	r0, sp, asr #18
    51d8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    51dc:	36686372 			; <UNDEFINED> instruction: 0x36686372
    51e0:	7261006b 	rsbvc	r0, r1, #107	; 0x6b
    51e4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    51e8:	6d366863 	ldcvs	8, cr6, [r6, #-396]!	; 0xfffffe74
    51ec:	53414200 	movtpl	r4, #4608	; 0x1200
    51f0:	52415f45 	subpl	r5, r1, #276	; 0x114
    51f4:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    51f8:	5f5f0052 	svcpl	0x005f0052
    51fc:	63706f70 	cmnvs	r0, #112, 30	; 0x1c0
    5200:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    5204:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    5208:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    520c:	2f646c69 	svccs	0x00646c69
    5210:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5214:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5218:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    521c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5220:	6c472d69 	mcrrvs	13, 6, r2, r7, cr9
    5224:	39546b39 	ldmdbcc	r4, {r0, r3, r4, r5, r8, r9, fp, sp, lr}^
    5228:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    522c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5230:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5234:	61652d65 	cmnvs	r5, r5, ror #26
    5238:	392d6962 	pushcc	{r1, r5, r6, r8, fp, sp, lr}
    523c:	3130322d 	teqcc	r0, sp, lsr #4
    5240:	34712d39 	ldrbtcc	r2, [r1], #-3385	; 0xfffff2c7
    5244:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5248:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    524c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5250:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5254:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5258:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    525c:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    5260:	2f70666f 	svccs	0x0070666f
    5264:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    5268:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    526c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5270:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    5274:	0065736d 	rsbeq	r7, r5, sp, ror #6
    5278:	47524154 			; <UNDEFINED> instruction: 0x47524154
    527c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5280:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5284:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5288:	33376178 	teqcc	r7, #120, 2
    528c:	52415400 	subpl	r5, r1, #0, 8
    5290:	5f544547 	svcpl	0x00544547
    5294:	5f555043 	svcpl	0x00555043
    5298:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
    529c:	76636972 			; <UNDEFINED> instruction: 0x76636972
    52a0:	54006137 	strpl	r6, [r0], #-311	; 0xfffffec9
    52a4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    52a8:	50435f54 	subpl	r5, r3, r4, asr pc
    52ac:	6f635f55 	svcvs	0x00635f55
    52b0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    52b4:	00363761 	eorseq	r3, r6, r1, ror #14
    52b8:	5f6d7261 	svcpl	0x006d7261
    52bc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    52c0:	5f6f6e5f 	svcpl	0x006f6e5f
    52c4:	616c6f76 	smcvs	50934	; 0xc6f6
    52c8:	656c6974 	strbvs	r6, [ip, #-2420]!	; 0xfffff68c
    52cc:	0065635f 	rsbeq	r6, r5, pc, asr r3
    52d0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    52d4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    52d8:	41385f48 	teqmi	r8, r8, asr #30
    52dc:	61736900 	cmnvs	r3, r0, lsl #18
    52e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    52e4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    52e8:	00743576 	rsbseq	r3, r4, r6, ror r5
    52ec:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    52f0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    52f4:	52385f48 	eorspl	r5, r8, #72, 30	; 0x120
    52f8:	52415400 	subpl	r5, r1, #0, 8
    52fc:	5f544547 	svcpl	0x00544547
    5300:	5f555043 	svcpl	0x00555043
    5304:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5308:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    530c:	726f6333 	rsbvc	r6, pc, #-872415232	; 0xcc000000
    5310:	61786574 	cmnvs	r8, r4, ror r5
    5314:	41003533 	tstmi	r0, r3, lsr r5
    5318:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    531c:	72610056 	rsbvc	r0, r1, #86	; 0x56
    5320:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5324:	00346863 	eorseq	r6, r4, r3, ror #16
    5328:	5f6d7261 	svcpl	0x006d7261
    532c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5330:	72610036 	rsbvc	r0, r1, #54	; 0x36
    5334:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5338:	00376863 	eorseq	r6, r7, r3, ror #16
    533c:	5f6d7261 	svcpl	0x006d7261
    5340:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5344:	49440038 	stmdbmi	r4, {r3, r4, r5}^
    5348:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    534c:	6d726100 	ldfvse	f6, [r2, #-0]
    5350:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    5354:	73785f65 	cmnvc	r8, #404	; 0x194
    5358:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    535c:	73574400 	cmpvc	r7, #0, 8
    5360:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    5364:	616d0074 	smcvs	53252	; 0xd004
    5368:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    536c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    5370:	745f7473 	ldrbvc	r7, [pc], #-1139	; 5378 <patchGenfskRfe+0xfc>
    5374:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    5378:	75687400 	strbvc	r7, [r8, #-1024]!	; 0xfffffc00
    537c:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    5380:	5f6c6c61 	svcpl	0x006c6c61
    5384:	5f616976 	svcpl	0x00616976
    5388:	6562616c 	strbvs	r6, [r2, #-364]!	; 0xfffffe94
    538c:	7369006c 	cmnvc	r9, #108	; 0x6c
    5390:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5394:	70665f74 	rsbvc	r5, r6, r4, ror pc
    5398:	69003576 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, sl, ip, sp}
    539c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    53a0:	615f7469 	cmpvs	pc, r9, ror #8
    53a4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    53a8:	4154006b 	cmpmi	r4, fp, rrx
    53ac:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53b0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53b4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    53b8:	61786574 	cmnvs	r8, r4, ror r5
    53bc:	41540037 	cmpmi	r4, r7, lsr r0
    53c0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53c4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53c8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    53cc:	61786574 	cmnvs	r8, r4, ror r5
    53d0:	41540038 	cmpmi	r4, r8, lsr r0
    53d4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53d8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53dc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    53e0:	61786574 	cmnvs	r8, r4, ror r5
    53e4:	52410039 	subpl	r0, r1, #57	; 0x39
    53e8:	43505f4d 	cmpmi	r0, #308	; 0x134
    53ec:	50415f53 	subpl	r5, r1, r3, asr pc
    53f0:	41005343 	tstmi	r0, r3, asr #6
    53f4:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    53f8:	415f5343 	cmpmi	pc, r3, asr #6
    53fc:	53435054 	movtpl	r5, #12372	; 0x3054
    5400:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 5408 <patchGenfskRfe+0x18c>
    5404:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    5408:	756f6420 	strbvc	r6, [pc, #-1056]!	; 4ff0 <__aeabi_lmul+0x630>
    540c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    5410:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5414:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5418:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    541c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5420:	33376178 	teqcc	r7, #120, 2
    5424:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5428:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    542c:	41540033 	cmpmi	r4, r3, lsr r0
    5430:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5434:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5438:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    543c:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    5440:	756c7030 	strbvc	r7, [ip, #-48]!	; 0xffffffd0
    5444:	72610073 	rsbvc	r0, r1, #115	; 0x73
    5448:	63635f6d 	cmnvs	r3, #436	; 0x1b4
    544c:	61736900 	cmnvs	r3, r0, lsl #18
    5450:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5454:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    5458:	00656c61 	rsbeq	r6, r5, r1, ror #24
    545c:	6e6f645f 	mcrvs	4, 3, r6, cr15, cr15, {2}
    5460:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
    5464:	72745f65 	rsbsvc	r5, r4, #404	; 0x194
    5468:	685f6565 	ldmdavs	pc, {r0, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    546c:	5f657265 	svcpl	0x00657265
    5470:	52415400 	subpl	r5, r1, #0, 8
    5474:	5f544547 	svcpl	0x00544547
    5478:	5f555043 	svcpl	0x00555043
    547c:	316d7261 	cmncc	sp, r1, ror #4
    5480:	6d647430 	cfstrdvs	mvd7, [r4, #-192]!	; 0xffffff40
    5484:	41540069 	cmpmi	r4, r9, rrx
    5488:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    548c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5490:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5494:	61786574 	cmnvs	r8, r4, ror r5
    5498:	61620035 	cmnvs	r2, r5, lsr r0
    549c:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    54a0:	69686372 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    54a4:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    54a8:	00657275 	rsbeq	r7, r5, r5, ror r2
    54ac:	5f6d7261 	svcpl	0x006d7261
    54b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    54b4:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    54b8:	52415400 	subpl	r5, r1, #0, 8
    54bc:	5f544547 	svcpl	0x00544547
    54c0:	5f555043 	svcpl	0x00555043
    54c4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    54c8:	316d7865 	cmncc	sp, r5, ror #16
    54cc:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    54d0:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    54d4:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    54d8:	72610079 	rsbvc	r0, r1, #121	; 0x79
    54dc:	75635f6d 	strbvc	r5, [r3, #-3949]!	; 0xfffff093
    54e0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    54e4:	63635f74 	cmnvs	r3, #116, 30	; 0x1d0
    54e8:	61736900 	cmnvs	r3, r0, lsl #18
    54ec:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    54f0:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    54f4:	41003233 	tstmi	r0, r3, lsr r2
    54f8:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    54fc:	7369004c 	cmnvc	r9, #76	; 0x4c
    5500:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5504:	66765f74 	uhsub16vs	r5, r6, r4
    5508:	00337670 	eorseq	r7, r3, r0, ror r6
    550c:	5f617369 	svcpl	0x00617369
    5510:	5f746962 	svcpl	0x00746962
    5514:	76706676 			; <UNDEFINED> instruction: 0x76706676
    5518:	41420034 	cmpmi	r2, r4, lsr r0
    551c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5520:	5f484352 	svcpl	0x00484352
    5524:	00325436 	eorseq	r5, r2, r6, lsr r4
    5528:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    552c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5530:	4d385f48 	ldcmi	15, cr5, [r8, #-288]!	; 0xfffffee0
    5534:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    5538:	4154004e 	cmpmi	r4, lr, asr #32
    553c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5540:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5544:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5548:	6d647439 	cfstrdvs	mvd7, [r4, #-228]!	; 0xffffff1c
    554c:	52410069 	subpl	r0, r1, #105	; 0x69
    5550:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
    5554:	53414200 	movtpl	r4, #4608	; 0x1200
    5558:	52415f45 	subpl	r5, r1, #276	; 0x114
    555c:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    5560:	7261004d 	rsbvc	r0, r1, #77	; 0x4d
    5564:	61745f6d 	cmnvs	r4, sp, ror #30
    5568:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    556c:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
    5570:	61006c65 	tstvs	r0, r5, ror #24
    5574:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 557c <patchGenfskRfe+0x300>
    5578:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    557c:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    5580:	54006e73 	strpl	r6, [r0], #-3699	; 0xfffff18d
    5584:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5588:	50435f54 	subpl	r5, r3, r4, asr pc
    558c:	6f635f55 	svcvs	0x00635f55
    5590:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5594:	54003572 	strpl	r3, [r0], #-1394	; 0xfffffa8e
    5598:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    559c:	50435f54 	subpl	r5, r3, r4, asr pc
    55a0:	6f635f55 	svcvs	0x00635f55
    55a4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    55a8:	54003772 	strpl	r3, [r0], #-1906	; 0xfffff88e
    55ac:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    55b0:	50435f54 	subpl	r5, r3, r4, asr pc
    55b4:	6f635f55 	svcvs	0x00635f55
    55b8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    55bc:	69003872 	stmdbvs	r0, {r1, r4, r5, r6, fp, ip, sp}
    55c0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    55c4:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
    55c8:	00656170 	rsbeq	r6, r5, r0, ror r1
    55cc:	5f617369 	svcpl	0x00617369
    55d0:	5f746962 	svcpl	0x00746962
    55d4:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    55d8:	72615f6b 	rsbvc	r5, r1, #428	; 0x1ac
    55dc:	6b36766d 	blvs	da2f98 <__ccfg+0xd82ff0>
    55e0:	7369007a 	cmnvc	r9, #122	; 0x7a
    55e4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    55e8:	6f6e5f74 	svcvs	0x006e5f74
    55ec:	69006d74 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
    55f0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    55f4:	615f7469 	cmpvs	pc, r9, ror #8
    55f8:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    55fc:	61736900 	cmnvs	r3, r0, lsl #18
    5600:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5604:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5608:	69003676 	stmdbvs	r0, {r1, r2, r4, r5, r6, r9, sl, ip, sp}
    560c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5610:	615f7469 	cmpvs	pc, r9, ror #8
    5614:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5618:	61736900 	cmnvs	r3, r0, lsl #18
    561c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5620:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5624:	5f003876 	svcpl	0x00003876
    5628:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    562c:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    5630:	7874725f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}^
    5634:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    5638:	55005f65 	strpl	r5, [r0, #-3941]	; 0xfffff09b
    563c:	79744951 	ldmdbvc	r4!, {r0, r4, r6, r8, fp, lr}^
    5640:	69006570 	stmdbvs	r0, {r4, r5, r6, r8, sl, sp, lr}
    5644:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5648:	615f7469 	cmpvs	pc, r9, ror #8
    564c:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    5650:	61006574 	tstvs	r0, r4, ror r5
    5654:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 565c <patchGenfskRfe+0x3e0>
    5658:	00656e75 	rsbeq	r6, r5, r5, ror lr
    565c:	5f6d7261 	svcpl	0x006d7261
    5660:	5f707063 	svcpl	0x00707063
    5664:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    5668:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
    566c:	4154006b 	cmpmi	r4, fp, rrx
    5670:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5674:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5678:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    567c:	74303239 	ldrtvc	r3, [r0], #-569	; 0xfffffdc7
    5680:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 4788 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x38>
    5684:	74680068 	strbtvc	r0, [r8], #-104	; 0xffffff98
    5688:	655f6261 	ldrbvs	r6, [pc, #-609]	; 542f <patchGenfskRfe+0x1b3>
    568c:	41540071 	cmpmi	r4, r1, ror r0
    5690:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5694:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5698:	3561665f 	strbcc	r6, [r1, #-1631]!	; 0xfffff9a1
    569c:	5f003632 	svcpl	0x00003632
    56a0:	006c755f 	rsbeq	r7, ip, pc, asr r5
    56a4:	5f6d7261 	svcpl	0x006d7261
    56a8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    56ac:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    56b0:	685f626d 	ldmdavs	pc, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    56b4:	76696477 			; <UNDEFINED> instruction: 0x76696477
    56b8:	61746800 	cmnvs	r4, r0, lsl #16
    56bc:	71655f62 	cmnvc	r5, r2, ror #30
    56c0:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    56c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    56c8:	6d726100 	ldfvse	f6, [r2, #-0]
    56cc:	6369705f 	cmnvs	r9, #95	; 0x5f
    56d0:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    56d4:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    56d8:	41540072 	cmpmi	r4, r2, ror r0
    56dc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    56e0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    56e4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    56e8:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    56ec:	616d7330 	cmnvs	sp, r0, lsr r3
    56f0:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
    56f4:	7069746c 	rsbvc	r7, r9, ip, ror #8
    56f8:	5400796c 	strpl	r7, [r0], #-2412	; 0xfffff694
    56fc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5700:	50435f54 	subpl	r5, r3, r4, asr pc
    5704:	706d5f55 	rsbvc	r5, sp, r5, asr pc
    5708:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    570c:	66766f6e 	ldrbtvs	r6, [r6], -lr, ror #30
    5710:	73690070 	cmnvc	r9, #112	; 0x70
    5714:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5718:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    571c:	5f6b7269 	svcpl	0x006b7269
    5720:	5f336d63 	svcpl	0x00336d63
    5724:	6472646c 	ldrbtvs	r6, [r2], #-1132	; 0xfffffb94
    5728:	4d524100 	ldfmie	f4, [r2, #-0]
    572c:	0043435f 	subeq	r4, r3, pc, asr r3
    5730:	5f6d7261 	svcpl	0x006d7261
    5734:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5738:	00325f38 	eorseq	r5, r2, r8, lsr pc
    573c:	5f6d7261 	svcpl	0x006d7261
    5740:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5744:	00335f38 	eorseq	r5, r3, r8, lsr pc
    5748:	5f6d7261 	svcpl	0x006d7261
    574c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5750:	00345f38 	eorseq	r5, r4, r8, lsr pc
    5754:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5758:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    575c:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    5760:	3236706d 	eorscc	r7, r6, #109	; 0x6d
    5764:	52410036 	subpl	r0, r1, #54	; 0x36
    5768:	53435f4d 	movtpl	r5, #16205	; 0x3f4d
    576c:	6d726100 	ldfvse	f6, [r2, #-0]
    5770:	3170665f 	cmncc	r0, pc, asr r6
    5774:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
    5778:	5f007473 	svcpl	0x00007473
    577c:	0068765f 	rsbeq	r7, r8, pc, asr r6
    5780:	5f6d7261 	svcpl	0x006d7261
    5784:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    5788:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    578c:	5f5f0068 	svcpl	0x005f0068
    5790:	54006c76 	strpl	r6, [r0], #-3190	; 0xfffff38a
    5794:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5798:	50435f54 	subpl	r5, r3, r4, asr pc
    579c:	6f635f55 	svcvs	0x00635f55
    57a0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    57a4:	54003472 	strpl	r3, [r0], #-1138	; 0xfffffb8e
    57a8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    57ac:	50435f54 	subpl	r5, r3, r4, asr pc
    57b0:	6f635f55 	svcvs	0x00635f55
    57b4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    57b8:	63353161 	teqvs	r5, #1073741848	; 0x40000018
    57bc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    57c0:	00376178 	eorseq	r6, r7, r8, ror r1
    57c4:	5f6d7261 	svcpl	0x006d7261
    57c8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    57cc:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    57d0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    57d4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    57d8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    57dc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    57e0:	32376178 	eorscc	r6, r7, #120, 2
    57e4:	6d726100 	ldfvse	f6, [r2, #-0]
    57e8:	7363705f 	cmnvc	r3, #95	; 0x5f
    57ec:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    57f0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    57f4:	4d524100 	ldfmie	f4, [r2, #-0]
    57f8:	5343505f 	movtpl	r5, #12383	; 0x305f
    57fc:	5041415f 	subpl	r4, r1, pc, asr r1
    5800:	4c5f5343 	mrrcmi	3, 4, r5, pc, cr3	; <UNPREDICTABLE>
    5804:	4c41434f 	mcrrmi	3, 4, r4, r1, cr15
    5808:	52415400 	subpl	r5, r1, #0, 8
    580c:	5f544547 	svcpl	0x00544547
    5810:	5f555043 	svcpl	0x00555043
    5814:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5818:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    581c:	41540035 	cmpmi	r4, r5, lsr r0
    5820:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5824:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5828:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    582c:	61676e6f 	cmnvs	r7, pc, ror #28
    5830:	61006d72 	tstvs	r0, r2, ror sp
    5834:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5838:	5f686372 	svcpl	0x00686372
    583c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5840:	61003162 	tstvs	r0, r2, ror #2
    5844:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5848:	5f686372 	svcpl	0x00686372
    584c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5850:	54003262 	strpl	r3, [r0], #-610	; 0xfffffd9e
    5854:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5858:	50435f54 	subpl	r5, r3, r4, asr pc
    585c:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    5860:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    5864:	6d726100 	ldfvse	f6, [r2, #-0]
    5868:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    586c:	00743568 	rsbseq	r3, r4, r8, ror #10
    5870:	30785f5f 	rsbscc	r5, r8, pc, asr pc
    5874:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    5878:	5f5f0031 	svcpl	0x005f0031
    587c:	5f003278 	svcpl	0x00003278
    5880:	0033785f 	eorseq	r7, r3, pc, asr r8
    5884:	5f617369 	svcpl	0x00617369
    5888:	5f746962 	svcpl	0x00746962
    588c:	6100706d 	tstvs	r0, sp, rrx
    5890:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    5894:	63735f64 	cmnvs	r3, #100, 30	; 0x190
    5898:	00646568 	rsbeq	r6, r4, r8, ror #10
    589c:	5f6d7261 	svcpl	0x006d7261
    58a0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    58a4:	00315f38 	eorseq	r5, r1, r8, lsr pc

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    return node->data_base.item_array[index];
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
};
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
			nq++;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	if (!button_still_pressed (__button_list [pbutton]))
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (baction == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
	(*baction) (pbutton);
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
endthread
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
endthread
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm sender(struct ResponseMessage *message) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
		packet[1] = message->gid;
  f0:	61656c65 	cmnvs	r5, r5, ror #24
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
		DEBUG_PRINT("SENDING PROCEDURE");
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
		DEBUG_PRINT("I am th message GID %d", message->gid);
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
		*p = message->tpe;p++;
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		*p = message->request_number;p++;
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
		*p = message->sender_id;p++;
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
		*p = message->receiver_id;p++;
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
    return node->data_base.item_array[index];
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
};
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    return node->data_base.item_array[index];
      10:	00000034 	andeq	r0, r0, r4, lsr r0
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
};
      1c:	000000bc 	strheq	r0, [r0], -ip
      20:	83180e41 	tsthi	r8, #1040	; 0x410
      24:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
      28:	87038604 	strhi	r8, [r3, -r4, lsl #12]
      2c:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      30:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
      34:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
      38:	6d0b4200 	sfmvs	f4, 4, [fp, #-0]
      3c:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
			i = k;
      40:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
				j->Next = k;
      44:	000b4300 	andeq	r4, fp, r0, lsl #6
      48:	0000000c 	andeq	r0, r0, ip
	...
}
      54:	00000006 	andeq	r0, r0, r6
      58:	0000000c 	andeq	r0, r0, ip
	...
      64:	00000006 	andeq	r0, r0, r6
      68:	0000000c 	andeq	r0, r0, ip
	...
      74:	00000008 	andeq	r0, r0, r8
      78:	0000000c 	andeq	r0, r0, ip
      7c:	00000000 	andeq	r0, r0, r0
      80:	00000184 	andeq	r0, r0, r4, lsl #3
      84:	00000014 	andeq	r0, r0, r4, lsl r0
      88:	00000014 	andeq	r0, r0, r4, lsl r0
      8c:	00000000 	andeq	r0, r0, r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00000198 	muleq	r0, r8, r1
      94:	00000024 	andeq	r0, r0, r4, lsr #32
      98:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (baction == NULL)
      9c:	00018e02 	andeq	r8, r1, r2, lsl #28
      a0:	00000014 	andeq	r0, r0, r4, lsl r0
	(*baction) (pbutton);
      a4:	00000000 	andeq	r0, r0, r0
endthread
      a8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000012 	andeq	r0, r0, r2, lsl r0
      b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
endthread
      b4:	00018e02 	andeq	r8, r1, r2, lsl #28
      b8:	0000000c 	andeq	r0, r0, ip
	...
      c4:	0000000c 	andeq	r0, r0, ip
fsm sender(struct ResponseMessage *message) {
      c8:	0000000c 	andeq	r0, r0, ip
      cc:	00000000 	andeq	r0, r0, r0
      d0:	000001ce 	andeq	r0, r0, lr, asr #3
}
      d4:	00000016 	andeq	r0, r0, r6, lsl r0
      d8:	0000000c 	andeq	r0, r0, ip
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	00000000 	andeq	r0, r0, r0
      e0:	000001e4 	andeq	r0, r0, r4, ror #3
      e4:	0000001c 	andeq	r0, r0, ip, lsl r0
      e8:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		packet[1] = message->gid;
      f4:	0000001e 	andeq	r0, r0, lr, lsl r0
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      fc:	86038504 	strhi	r8, [r3], -r4, lsl #10
		DEBUG_PRINT("I am th message GID %d", message->gid);
     100:	00018e02 	andeq	r8, r1, r2, lsl #28
     104:	00000014 	andeq	r0, r0, r4, lsl r0
		*p = message->tpe;p++;
     108:	00000000 	andeq	r0, r0, r0
		*p = message->request_number;p++;
     10c:	00000200 	andeq	r0, r0, r0, lsl #4
		*p = message->sender_id;p++;
     110:	00000026 	andeq	r0, r0, r6, lsr #32
		*p = message->receiver_id;p++;
     114:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		switch(message->tpe) {
     118:	00018e02 	andeq	r8, r1, r2, lsl #28
     11c:	00000020 	andeq	r0, r0, r0, lsr #32
     120:	00000000 	andeq	r0, r0, r0
		tcv_endp(packet);
     124:	00000226 	andeq	r0, r0, r6, lsr #4
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	00000052 	andeq	r0, r0, r2, asr r0
     12c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
}
     130:	86078508 	strhi	r8, [r7], -r8, lsl #10
		finish;
     134:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     138:	8a038904 	bhi	e2550 <__ccfg+0xc25a8>
     13c:	00018e02 	andeq	r8, r1, r2, lsl #28
				strncpy(p, message->record, sizeof(message->record));
     140:	00000028 	andeq	r0, r0, r8, lsr #32
				*p = message->padding;p++;
     144:	00000000 	andeq	r0, r0, r0
				strncpy(p, message->record, sizeof(message->record));
     148:	00000278 	andeq	r0, r0, r8, ror r2
     14c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     150:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
				strncpy(p, message->record, sizeof(message->record));
     154:	86058506 	strhi	r8, [r5], -r6, lsl #10
     158:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
				strncpy(p, message->record, sizeof(message->record));
     15c:	42018e02 	andmi	r8, r1, #2, 28
				break;
     160:	a902600e 	stmdbge	r2, {r1, r2, r3, sp, lr}
				*p = message->record_index;p++;
     164:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
				*p = message->padding;
     168:	0000000b 	andeq	r0, r0, fp
				break;
     16c:	00000024 	andeq	r0, r0, r4, lsr #32
     170:	00000000 	andeq	r0, r0, r0
     174:	00000648 	andeq	r0, r0, r8, asr #12
     178:	00000580 	andeq	r0, r0, r0, lsl #11
     17c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     180:	86048505 	strhi	r8, [r4], -r5, lsl #10
		node->nnodes[i] = 0;
     184:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     188:	280e4101 	stmdacs	lr, {r0, r8, lr}
     18c:	0e028e03 	cdpeq	14, 0, cr8, cr2, cr3, {0}
     190:	00000014 	andeq	r0, r0, r4, lsl r0
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	0000000c 	andeq	r0, r0, ip
bool init_node(struct Node* node){
     198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    node->id  = 0;                  // default id value 0
     19c:	7c020001 	stcvc	0, cr0, [r2], {1}
    node->index = 0;                // default entry count 0
     1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    node->data_base.item_count = 0; // default no items in array
     1a4:	0000000c 	andeq	r0, r0, ip
	reset_array(node);
     1a8:	00000194 	muleq	r0, r4, r1
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	00000bc8 	andeq	r0, r0, r8, asr #23
     1b0:	0000000c 	andeq	r0, r0, ip
};
     1b4:	00000018 	andeq	r0, r0, r8, lsl r0
     1b8:	00000194 	muleq	r0, r4, r1
uint8_t generate_request_num(void){
     1bc:	00000bd4 	ldrdeq	r0, [r0], -r4
    return (uint8_t) (rand() % 255);
     1c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     1c4:	47080e41 	strmi	r0, [r8, -r1, asr #28]
     1c8:	41000e0a 	tstmi	r0, sl, lsl #28
}
     1cc:	0000000b 	andeq	r0, r0, fp
            node->nnodes[i] = 0; // set to null byte
     1d0:	00000018 	andeq	r0, r0, r8, lsl r0
     1d4:	00000194 	muleq	r0, r4, r1
     1d8:	00000c00 	andeq	r0, r0, r0, lsl #24
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0000002a 	andeq	r0, r0, sl, lsr #32
};
     1e0:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     1e8:	000b4204 	andeq	r4, fp, r4, lsl #4
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	00000018 	andeq	r0, r0, r8, lsl r0
     1f0:	00000194 	muleq	r0, r4, r1
     1f4:	00000c2c 	andeq	r0, r0, ip, lsr #24
        node->data_base.item_count -= 1;
     1f8:	0000003c 	andeq	r0, r0, ip, lsr r0
};
     1fc:	83100e41 	tsthi	r0, #1040	; 0x410
bool delete_all(struct Node *node){
     200:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	00018e02 	andeq	r8, r1, r2, lsl #28
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00000018 	andeq	r0, r0, r8, lsl r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00000194 	muleq	r0, r4, r1
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	00000c68 	andeq	r0, r0, r8, ror #24
            node->data_base.item_array[i].timestamp = 0;
     214:	00000040 	andeq	r0, r0, r0, asr #32
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	83100e41 	tsthi	r0, #1040	; 0x410
    node->data_base.item_count = 0;
     21c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     220:	00018e02 	andeq	r8, r1, r2, lsl #28
        return true;
     224:	00000014 	andeq	r0, r0, r4, lsl r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00000194 	muleq	r0, r4, r1
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00000000 	andeq	r0, r0, r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	00000020 	andeq	r0, r0, r0, lsr #32
     234:	83080e42 	movwhi	r0, #36418	; 0x8e42
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00000014 	andeq	r0, r0, r4, lsl r0
	response_message->tpe = RESPONSE;
     240:	00000194 	muleq	r0, r4, r1
	response_message->status = status;
     244:	00000ca8 	andeq	r0, r0, r8, lsr #25
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	00000054 	andeq	r0, r0, r4, asr r0
	response_message->gid = gid;
     24c:	87080e42 	strhi	r0, [r8, -r2, asr #28]
	response_message->sender_id = sender_id;
     250:	00018e02 	andeq	r8, r1, r2, lsl #28
	response_message->status = status;
     254:	00000014 	andeq	r0, r0, r4, lsl r0
	if (!padding){
     258:	00000194 	muleq	r0, r4, r1
		response_message->padding = padding;
     25c:	00000cfc 	strdeq	r0, [r0], -ip
	if (rec != NULL){
     260:	00000040 	andeq	r0, r0, r0, asr #32
     264:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		strncpy(response_message->record, rec, 20);
     268:	00018e02 	andeq	r8, r1, r2, lsl #28
     26c:	00000014 	andeq	r0, r0, r4, lsl r0
     270:	00000194 	muleq	r0, r4, r1
};
     274:	00000d3c 	andeq	r0, r0, ip, lsr sp
fsm receiver(struct Node* node_db) {
     278:	00000028 	andeq	r0, r0, r8, lsr #32
     27c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
     284:	00000014 	andeq	r0, r0, r4, lsl r0
     288:	00000194 	muleq	r0, r4, r1
     28c:	00000d64 	andeq	r0, r0, r4, ror #26
     290:	00000114 	andeq	r0, r0, r4, lsl r1
     294:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	00018e02 	andeq	r8, r1, r2, lsl #28
     29c:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a0:	00000194 	muleq	r0, r4, r1
     2a4:	00000e78 	andeq	r0, r0, r8, ror lr
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	00000050 	andeq	r0, r0, r0, asr r0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	83180e41 	tsthi	r8, #1040	; 0x410
     2b0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     2b4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		switch (response_message_5->tpe){
     2b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     2bc:	00000018 	andeq	r0, r0, r8, lsl r0
     2c0:	00000194 	muleq	r0, r4, r1
     2c4:	00000ec8 	andeq	r0, r0, r8, asr #29
     2c8:	00000054 	andeq	r0, r0, r4, asr r0
     2cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     2d0:	86038504 	strhi	r8, [r3], -r4, lsl #10
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	00018e02 	andeq	r8, r1, r2, lsl #28
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	0000000c 	andeq	r0, r0, ip
				if (discovery_request_message->gid == node_db->gid){
     2dc:	00000194 	muleq	r0, r4, r1
     2e0:	00000f1c 	andeq	r0, r0, ip, lsl pc
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	00000038 	andeq	r0, r0, r8, lsr r0
     2e8:	00000020 	andeq	r0, r0, r0, lsr #32
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	00000194 	muleq	r0, r4, r1
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	00000f54 	andeq	r0, r0, r4, asr pc
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	00000110 	andeq	r0, r0, r0, lsl r1
					response_message_0->sender_id = node_db->id;
     2f8:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
					DEBUG_PRINT("\r\nSending to sender");
     300:	87058606 	strhi	r8, [r5, -r6, lsl #12]
					call sender(response_message_0, done_case);
     304:	89038804 	stmdbhi	r3, {r2, fp, pc}
     308:	00018e02 	andeq	r8, r1, r2, lsl #28
     30c:	0000000c 	andeq	r0, r0, ip
     310:	00000194 	muleq	r0, r4, r1
     314:	00000000 	andeq	r0, r0, r0
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	0000000c 	andeq	r0, r0, ip
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	00000018 	andeq	r0, r0, r8, lsl r0
     320:	00000194 	muleq	r0, r4, r1
     324:	00001064 	andeq	r1, r0, r4, rrx
     328:	000000c0 	andeq	r0, r0, r0, asr #1
     32c:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     330:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     334:	00000001 	andeq	r0, r0, r1
     338:	00000018 	andeq	r0, r0, r8, lsl r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	00000194 	muleq	r0, r4, r1
					node_db->index+=1;
     340:	00001124 	andeq	r1, r0, r4, lsr #2
     344:	00000044 	andeq	r0, r0, r4, asr #32
		tcv_endp(incoming_packet);
     348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     34c:	86038504 	strhi	r8, [r3], -r4, lsl #10
		proceed receiving;
     350:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_out(response_1_create, "\r\nData Saved");
     354:	0000001c 	andeq	r0, r0, ip, lsl r0
     358:	00000194 	muleq	r0, r4, r1
		proceed receiving;
     35c:	00001168 	andeq	r1, r0, r8, ror #2
     360:	0000003c 	andeq	r0, r0, ip, lsr r0
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     368:	86048505 	strhi	r8, [r4], -r5, lsl #10
		proceed receiving;
     36c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	00000001 	andeq	r0, r0, r1
     374:	00000018 	andeq	r0, r0, r8, lsl r0
     378:	00000194 	muleq	r0, r4, r1
     37c:	000011a4 	andeq	r1, r0, r4, lsr #3
     380:	000000a4 	andeq	r0, r0, r4, lsr #1
		proceed receiving;
     384:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	86038504 	strhi	r8, [r3], -r4, lsl #10
     38c:	00018e02 	andeq	r8, r1, r2, lsl #28
     390:	00000030 	andeq	r0, r0, r0, lsr r0
     394:	00000194 	muleq	r0, r4, r1
		proceed receiving;
     398:	00001248 	andeq	r1, r0, r8, asr #4
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     3a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     3a4:	86078508 	strhi	r8, [r7], -r8, lsl #10
     3a8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
		proceed receiving;
     3ac:	8a038904 	bhi	e27c4 <__ccfg+0xc281c>
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	02018e02 	andeq	r8, r1, #2, 28
     3b4:	cace0aa2 	bgt	ff382e44 <_estack+0xdf37de44>
     3b8:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     3bc:	000ec4c5 	andeq	ip, lr, r5, asr #9
		proceed receiving;
     3c0:	00000b42 	andeq	r0, r0, r2, asr #22
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	0000000c 	andeq	r0, r0, ip
     3c8:	00000194 	muleq	r0, r4, r1
		proceed receiving;
     3cc:	00001400 	andeq	r1, r0, r0, lsl #8
}
     3d0:	00000024 	andeq	r0, r0, r4, lsr #32
     3d4:	0000000c 	andeq	r0, r0, ip
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	00000194 	muleq	r0, r4, r1
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	00000000 	andeq	r0, r0, r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	00000028 	andeq	r0, r0, r8, lsr #32
     3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e8:	00000194 	muleq	r0, r4, r1
     3ec:	00001424 	andeq	r1, r0, r4, lsr #8
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	00000258 	andeq	r0, r0, r8, asr r2
					break;
     3f4:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	8e028b03 	vmlahi.f64	d8, d2, d3
     3fc:	180e4101 	stmdane	lr, {r0, r8, lr}
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	00070d42 	andeq	r0, r7, r2, asr #26
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	00000014 	andeq	r0, r0, r4, lsl r0
     408:	00000194 	muleq	r0, r4, r1
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	0000167c 	andeq	r1, r0, ip, ror r6
     410:	00000030 	andeq	r0, r0, r0, lsr r0
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	83080e42 	movwhi	r0, #36418	; 0x8e42
     418:	00018e02 	andeq	r8, r1, r2, lsl #28
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	00000018 	andeq	r0, r0, r8, lsl r0
     420:	00000194 	muleq	r0, r4, r1
     424:	00000000 	andeq	r0, r0, r0
     428:	0000005c 	andeq	r0, r0, ip, asr r0
     42c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     430:	86038504 	strhi	r8, [r3], -r4, lsl #10
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	00018e02 	andeq	r8, r1, r2, lsl #28
					call sender(response_message_2, done_case);
     438:	00000014 	andeq	r0, r0, r4, lsl r0
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	00000194 	muleq	r0, r4, r1
     440:	000016ac 	andeq	r1, r0, ip, lsr #13
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	00000060 	andeq	r0, r0, r0, rrx
     448:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
				DEBUG_PRINT("\r\nDelete rec");
     450:	0000000c 	andeq	r0, r0, ip
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     458:	7c020001 	stcvc	0, cr0, [r2], {1}
     45c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     460:	00000018 	andeq	r0, r0, r8, lsl r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	00000450 	andeq	r0, r0, r0, asr r4
     468:	0000170c 	andeq	r1, r0, ip, lsl #14
     46c:	0000003c 	andeq	r0, r0, ip, lsr r0
     470:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	86038504 	strhi	r8, [r3], -r4, lsl #10
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	00018e02 	andeq	r8, r1, r2, lsl #28
     47c:	00000018 	andeq	r0, r0, r8, lsl r0
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	00000450 	andeq	r0, r0, r0, asr r4
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	00001748 	andeq	r1, r0, r8, asr #14
     488:	00000080 	andeq	r0, r0, r0, lsl #1
     48c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
						status = (uint8_t) SUCCESS;
     494:	00000001 	andeq	r0, r0, r1
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	0000000c 	andeq	r0, r0, ip
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	00000450 	andeq	r0, r0, r0, asr r4
     4a0:	000017c8 	andeq	r1, r0, r8, asr #15
     4a4:	00000018 	andeq	r0, r0, r8, lsl r0
     4a8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ac:	00000450 	andeq	r0, r0, r0, asr r4
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	00000000 	andeq	r0, r0, r0
     4b4:	00000024 	andeq	r0, r0, r4, lsr #32
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4c0:	00000014 	andeq	r0, r0, r4, lsl r0
     4c4:	00000450 	andeq	r0, r0, r0, asr r4
     4c8:	000017e0 	andeq	r1, r0, r0, ror #15
     4cc:	00000010 	andeq	r0, r0, r0, lsl r0
     4d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	00000014 	andeq	r0, r0, r4, lsl r0
     4dc:	00000450 	andeq	r0, r0, r0, asr r4
     4e0:	000017f0 	strdeq	r1, [r0], -r0
     4e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e8:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     4ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     4f0:	00000014 	andeq	r0, r0, r4, lsl r0
     4f4:	00000450 	andeq	r0, r0, r0, asr r4
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	0000004c 	andeq	r0, r0, ip, asr #32
     500:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     504:	00018e02 	andeq	r8, r1, r2, lsl #28
     508:	0000000c 	andeq	r0, r0, ip
     50c:	00000450 	andeq	r0, r0, r0, asr r4
     510:	0000181c 	andeq	r1, r0, ip, lsl r8
     514:	00000006 	andeq	r0, r0, r6
     518:	00000028 	andeq	r0, r0, r8, lsr #32
     51c:	00000450 	andeq	r0, r0, r0, asr r4
     520:	00001824 	andeq	r1, r0, r4, lsr #16
     524:	000000cc 	andeq	r0, r0, ip, asr #1
     528:	83180e41 	tsthi	r8, #1040	; 0x410
     52c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     530:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	02018e02 	andeq	r8, r1, #2, 28
     538:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
				DEBUG_PRINT("\r\nretrieve rec");
     540:	0b42000e 	bleq	1080580 <__ccfg+0x10605d8>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00000014 	andeq	r0, r0, r4, lsl r0
     548:	00000450 	andeq	r0, r0, r0, asr r4
     54c:	000018f0 	strdeq	r1, [r0], -r0
     550:	00000014 	andeq	r0, r0, r4, lsl r0
     554:	83080e41 	movwhi	r0, #36417	; 0x8e41
     558:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	00000014 	andeq	r0, r0, r4, lsl r0
     560:	00000450 	andeq	r0, r0, r0, asr r4
     564:	00001904 	andeq	r1, r0, r4, lsl #18
    return node->data_base.item_array[index];
     568:	00000034 	andeq	r0, r0, r4, lsr r0
     56c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     570:	00018e02 	andeq	r8, r1, r2, lsl #28
     574:	00000018 	andeq	r0, r0, r8, lsl r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	00000450 	andeq	r0, r0, r0, asr r4
    return node->data_base.item_array[index];
     57c:	00001938 	andeq	r1, r0, r8, lsr r9
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	00000034 	andeq	r0, r0, r4, lsr r0
     584:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     588:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	00000001 	andeq	r0, r0, r1
     590:	00000018 	andeq	r0, r0, r8, lsl r0
     594:	00000450 	andeq	r0, r0, r0, asr r4
     598:	00000000 	andeq	r0, r0, r0
     59c:	0000002c 	andeq	r0, r0, ip, lsr #32
     5a0:	83100e41 	tsthi	r0, #1040	; 0x410
     5a4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5ac:	00000014 	andeq	r0, r0, r4, lsl r0
				DEBUG_PRINT("\r\nResponse");
     5b0:	00000450 	andeq	r0, r0, r0, asr r4
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	0000196c 	andeq	r1, r0, ip, ror #18
     5b8:	00000024 	andeq	r0, r0, r4, lsr #32
     5bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c4:	00000018 	andeq	r0, r0, r8, lsl r0
     5c8:	00000450 	andeq	r0, r0, r0, asr r4
				if(!response_flag){
     5cc:	00001990 	muleq	r0, r0, r9
					response_flag=1;
     5d0:	00000038 	andeq	r0, r0, r8, lsr r0
					trigger(&response_flag);
     5d4:	83100e41 	tsthi	r0, #1040	; 0x410
				switch(response_message_5->status){
     5d8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e0:	0000000c 	andeq	r0, r0, ip
     5e4:	00000450 	andeq	r0, r0, r0, asr r4
     5e8:	00000000 	andeq	r0, r0, r0
						if (response_checker[0] == response_message_5->request_number){
     5ec:	00000014 	andeq	r0, r0, r4, lsl r0
     5f0:	00000014 	andeq	r0, r0, r4, lsl r0
     5f4:	00000450 	andeq	r0, r0, r0, asr r4
							switch(response_checker[1]){
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00000040 	andeq	r0, r0, r0, asr #32
     600:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     604:	00018e02 	andeq	r8, r1, r2, lsl #28
									proceed response_1_create;
     608:	00000014 	andeq	r0, r0, r4, lsl r0
						proceed response_2;
     60c:	00000450 	andeq	r0, r0, r0, asr r4
									proceed response_1_delete;
     610:	00000000 	andeq	r0, r0, r0
									proceed response_1_retrieve;
     614:	00000018 	andeq	r0, r0, r8, lsl r0
						proceed response_2;
     618:	83080e41 	movwhi	r0, #36417	; 0x8e41
						proceed response_3;
     61c:	00018e02 	andeq	r8, r1, r2, lsl #28
						proceed response_4;
     620:	0000000c 	andeq	r0, r0, ip
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	00000450 	andeq	r0, r0, r0, asr r4
     628:	000019c8 	andeq	r1, r0, r8, asr #19
				break;
     62c:	00000024 	andeq	r0, r0, r4, lsr #32
}
     630:	0000000c 	andeq	r0, r0, ip
     634:	00000450 	andeq	r0, r0, r0, asr r4
     638:	00000000 	andeq	r0, r0, r0
     63c:	00000020 	andeq	r0, r0, r0, lsr #32
     640:	0000000c 	andeq	r0, r0, ip
     644:	00000450 	andeq	r0, r0, r0, asr r4
fsm root {
     648:	000019ec 	andeq	r1, r0, ip, ror #19
     64c:	0000000e 	andeq	r0, r0, lr
     650:	0000000c 	andeq	r0, r0, ip
     654:	00000450 	andeq	r0, r0, r0, asr r4
     658:	000019fa 	strdeq	r1, [r0], -sl
     65c:	00000010 	andeq	r0, r0, r0, lsl r0
     660:	0000000c 	andeq	r0, r0, ip
     664:	00000450 	andeq	r0, r0, r0, asr r4
     668:	00001a0a 	andeq	r1, r0, sl, lsl #20
     66c:	0000001c 	andeq	r0, r0, ip, lsl r0
     670:	0000000c 	andeq	r0, r0, ip
     674:	00000450 	andeq	r0, r0, r0, asr r4
     678:	00000000 	andeq	r0, r0, r0
     67c:	00000010 	andeq	r0, r0, r0, lsl r0
     680:	0000000c 	andeq	r0, r0, ip
     684:	00000450 	andeq	r0, r0, r0, asr r4
     688:	00000000 	andeq	r0, r0, r0
     68c:	00000006 	andeq	r0, r0, r6
     690:	0000000c 	andeq	r0, r0, ip
     694:	00000450 	andeq	r0, r0, r0, asr r4
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	00001a26 	andeq	r1, r0, r6, lsr #20
     69c:	00000014 	andeq	r0, r0, r4, lsl r0
     6a0:	0000000c 	andeq	r0, r0, ip
		init_node(node_db);
     6a4:	00000450 	andeq	r0, r0, r0, asr r4
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	00001a3a 	andeq	r1, r0, sl, lsr sl
     6ac:	0000000e 	andeq	r0, r0, lr
		tcv_plug (0, &plug_null);
     6b0:	00000014 	andeq	r0, r0, r4, lsl r0
     6b4:	00000450 	andeq	r0, r0, r0, asr r4
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	00001a48 	andeq	r1, r0, r8, asr #20
     6bc:	00000024 	andeq	r0, r0, r4, lsr #32
     6c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c8:	00000020 	andeq	r0, r0, r0, lsr #32
			diag("Cannot open tcv interface");
     6cc:	00000450 	andeq	r0, r0, r0, asr r4
     6d0:	00001a6c 	andeq	r1, r0, ip, ror #20
			halt();
     6d4:	0000009c 	muleq	r0, ip, r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     6dc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		runfsm receiver(node_db);
     6e0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     6e4:	89038804 	stmdbhi	r3, {r2, fp, pc}
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ec:	00000014 	andeq	r0, r0, r4, lsl r0
     6f0:	00000450 	andeq	r0, r0, r0, asr r4
     6f4:	00001b08 	andeq	r1, r0, r8, lsl #22
     6f8:	00000050 	andeq	r0, r0, r0, asr r0
     6fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
		ser_inf(get_choice, "%c", &CHOICE);
     700:	00018e02 	andeq	r8, r1, r2, lsl #28
     704:	00000014 	andeq	r0, r0, r4, lsl r0
     708:	00000450 	andeq	r0, r0, r0, asr r4
		switch(CHOICE) {
     70c:	00001b58 	andeq	r1, r0, r8, asr fp
     710:	00000048 	andeq	r0, r0, r8, asr #32
     714:	83080e41 	movwhi	r0, #36417	; 0x8e41
     718:	00018e02 	andeq	r8, r1, r2, lsl #28
     71c:	00000014 	andeq	r0, r0, r4, lsl r0
     720:	00000450 	andeq	r0, r0, r0, asr r4
     724:	00001ba0 	andeq	r1, r0, r0, lsr #23
     728:	00000050 	andeq	r0, r0, r0, asr r0
     72c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     730:	00018e02 	andeq	r8, r1, r2, lsl #28
     734:	00000020 	andeq	r0, r0, r0, lsr #32
     738:	00000450 	andeq	r0, r0, r0, asr r4
				proceed menu;
     73c:	00000000 	andeq	r0, r0, r0
     740:	00000058 	andeq	r0, r0, r8, asr r0
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     748:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     750:	89038804 	stmdbhi	r3, {r2, fp, pc}
     754:	00018e02 	andeq	r8, r1, r2, lsl #28
		DEBUG_PRINT("setting node group ID");
     758:	00000018 	andeq	r0, r0, r8, lsl r0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75c:	00000450 	andeq	r0, r0, r0, asr r4
    node->gid = gid; 
     760:	00001bf0 	strdeq	r1, [r0], -r0
		proceed menu;
     764:	000000a8 	andeq	r0, r0, r8, lsr #1
     768:	83100e44 	tsthi	r0, #68, 28	; 0x440
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     770:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     774:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	00000450 	andeq	r0, r0, r0, asr r4
     77c:	00001c98 	muleq	r0, r8, ip
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     780:	00000034 	andeq	r0, r0, r4, lsr r0
     784:	83100e41 	tsthi	r0, #1040	; 0x410
		if((node_db->id < 1) || (node_db->id > 25)){
     788:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     78c:	00018e02 	andeq	r8, r1, r2, lsl #28
     790:	0000000c 	andeq	r0, r0, ip
			strncpy(reason, "Out of Range", 50);
     794:	00000450 	andeq	r0, r0, r0, asr r4
     798:	00001ccc 	andeq	r1, r0, ip, asr #25
			proceed invalid_node_id;
     79c:	00000018 	andeq	r0, r0, r8, lsl r0
     7a0:	00000014 	andeq	r0, r0, r4, lsl r0
				strncpy(reason, "ID is already in use", 50);
     7a4:	00000450 	andeq	r0, r0, r0, asr r4
		for(int i = 0; i < node_db->index; i++){
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	00000030 	andeq	r0, r0, r0, lsr r0
     7b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		proceed menu;
     7b4:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7b8:	00000014 	andeq	r0, r0, r4, lsl r0
     7bc:	00000450 	andeq	r0, r0, r0, asr r4
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	00000038 	andeq	r0, r0, r8, lsr r0
		proceed get_new_node_id;
     7c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7cc:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (!clear_node_neighbour_array(node_db)){
     7d0:	00000040 	andeq	r0, r0, r0, asr #32
     7d4:	00000450 	andeq	r0, r0, r0, asr r4
			strncpy(reason, "Error Clearing Node Array", 50);
     7d8:	00001ce4 	andeq	r1, r0, r4, ror #25
     7dc:	0000013c 	andeq	r0, r0, ip, lsr r1
     7e0:	80100e41 	andshi	r0, r0, r1, asr #28
			proceed error;
     7e4:	82038104 	andhi	r8, r3, #4, 2
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7e8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7ec:	0b84380e 	bleq	fe10e82c <_estack+0xde10982c>
		request_packet->gid = node_db->gid;
     7f0:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     7f4:	07880887 	streq	r0, [r8, r7, lsl #17]
		request_packet->tpe = DISCOVERY_REQUEST;
     7f8:	058e0689 	streq	r0, [lr, #1673]	; 0x689
		request_packet->request_number = generate_request_num();
     7fc:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     800:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
		call sender(request_packet, wait_discovery);
     804:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     808:	c341100e 	movtgt	r1, #4110	; 0x100e
		request_packet->receiver_id=0;
     80c:	0ec0c1c2 	acseqdm	f4, f2
		call sender(request_packet, wait_discovery);
     810:	000b4100 	andeq	r4, fp, r0, lsl #2
     814:	0000000c 	andeq	r0, r0, ip
     818:	00000450 	andeq	r0, r0, r0, asr r4
			release;
     81c:	00001e20 	andeq	r1, r0, r0, lsr #28
				proceed get_new_node_id;
     820:	00000024 	andeq	r0, r0, r4, lsr #32
				proceed clear_neighbour_array;
     824:	0000000c 	andeq	r0, r0, ip
				proceed create_proto_start;
     828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				proceed start_delete_proto;
     82c:	7c020001 	stcvc	0, cr0, [r2], {1}
				proceed retrieve_proto;
     830:	000d0c0e 	andeq	r0, sp, lr, lsl #24
				proceed display_db;
     834:	00000014 	andeq	r0, r0, r4, lsl r0
				proceed del_local;
     838:	00000824 	andeq	r0, r0, r4, lsr #16
			if(node_db->id == node_db->nnodes[i]){
     83c:	00001e44 	andeq	r1, r0, r4, asr #28
     840:	00000016 	andeq	r0, r0, r6, lsl r0
     844:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				strncpy(reason, "ID is already in use", 50);
     848:	00018e02 	andeq	r8, r1, r2, lsl #28
     84c:	0000000c 	andeq	r0, r0, ip
				proceed invalid_node_id;
     850:	00000824 	andeq	r0, r0, r4, lsr #16
     854:	00001e5a 	andeq	r1, r0, sl, asr lr
		for(int i = 0; i < node_db->index; i++){
     858:	0000001a 	andeq	r0, r0, sl, lsl r0
		if (discovery_wait_flag == 0){
     85c:	00000018 	andeq	r0, r0, r8, lsl r0
			discovery_wait_flag=1;
     860:	00000824 	andeq	r0, r0, r4, lsr #16
     864:	00001e74 	andeq	r1, r0, r4, ror lr
			delay(3000, find_proto_start);
     868:	0000000e 	andeq	r0, r0, lr
     86c:	83080e41 	movwhi	r0, #36417	; 0x8e41
		if (discovery_wait_flag == 1){
     870:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
			discovery_wait_flag=0;
     874:	000ec3ce 	andeq	ip, lr, lr, asr #7
     878:	00000018 	andeq	r0, r0, r8, lsl r0
			delay(3000, display_neighbour_nodes);
     87c:	00000824 	andeq	r0, r0, r4, lsr #16
     880:	00001e84 	andeq	r1, r0, r4, lsl #29
     884:	0000004c 	andeq	r0, r0, ip, asr #32
     888:	83100e41 	tsthi	r0, #1040	; 0x410
     88c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     890:	00018e02 	andeq	r8, r1, r2, lsl #28
     894:	00000020 	andeq	r0, r0, r0, lsr #32
     898:	00000824 	andeq	r0, r0, r4, lsr #16
     89c:	00001ed0 	ldrdeq	r1, [r0], -r0
     8a0:	0000008c 	andeq	r0, r0, ip, lsl #1
     8a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8a8:	5f018e02 	svcpl	0x00018e02
     8ac:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     8b0:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     8b4:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8b8:	00000020 	andeq	r0, r0, r0, lsr #32
     8bc:	00000824 	andeq	r0, r0, r4, lsr #16
     8c0:	00001f5c 	andeq	r1, r0, ip, asr pc
     8c4:	00000070 	andeq	r0, r0, r0, ror r0
		if(node_db->index == 0){
     8c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8cc:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     8d0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			proceed menu;
     8d4:	430b4200 	movwmi	r4, #45568	; 0xb200
		ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8d8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8dc:	0000003c 	andeq	r0, r0, ip, lsr r0
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8e0:	00000824 	andeq	r0, r0, r4, lsr #16
			if (node_db->nnodes[i] == 0) break;
     8e4:	00001fcc 	andeq	r1, r0, ip, asr #31
     8e8:	000000c0 	andeq	r0, r0, r0, asr #1
     8ec:	82080e41 	andhi	r0, r8, #1040	; 0x410
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8f0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     8f4:	0a84300e 	beq	fe10c934 <_estack+0xde107934>
		for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     8f8:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
		proceed menu;
     8fc:	06880787 	streq	r0, [r8], r7, lsl #15
     900:	048a0589 	streq	r0, [sl], #1417	; 0x589
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     904:	0a6b038e 	beq	1ac1744 <__ccfg+0x1aa179c>
     908:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
		ser_inf(get_id_for_create, "%u", &user_provided_receiver_id);
     90c:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     910:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     914:	c2c34108 	sbcgt	r4, r3, #8, 2
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     918:	0b41000e 	bleq	1040958 <__ccfg+0x10209b0>
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
			strncpy(reason, "Error: improper ID", 50);
     920:	00000824 	andeq	r0, r0, r4, lsr #16
     924:	00000000 	andeq	r0, r0, r0
			proceed error;
     928:	0000006c 	andeq	r0, r0, ip, rrx
     92c:	83180e42 	tsthi	r8, #1056	; 0x420
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     930:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     934:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		ser_in(get_record_to_create, user_provided_record, 20);
     938:	00018e02 	andeq	r8, r1, r2, lsl #28
     93c:	0000000c 	andeq	r0, r0, ip
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     940:	00000824 	andeq	r0, r0, r4, lsr #16
     944:	0000208c 	andeq	r2, r0, ip, lsl #1
     948:	00000024 	andeq	r0, r0, r4, lsr #32
		create_message->gid = node_db->gid;
     94c:	00000018 	andeq	r0, r0, r8, lsl r0
		create_message->tpe = CREATE_RECORD;
     950:	00000824 	andeq	r0, r0, r4, lsr #16
		create_message->request_number = generate_request_num();
     954:	000020b0 	strheq	r2, [r0], -r0
     958:	00000080 	andeq	r0, r0, r0, lsl #1
		strncpy(create_message->record, user_provided_record, 20);
     95c:	83100e42 	tsthi	r0, #1056	; 0x420
     960:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		create_message->receiver_id = user_provided_receiver_id;
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
		strncpy(create_message->record, user_provided_record, 20);
     968:	00000014 	andeq	r0, r0, r4, lsl r0
		create_message->receiver_id = user_provided_receiver_id;
     96c:	00000824 	andeq	r0, r0, r4, lsr #16
		strncpy(create_message->record, user_provided_record, 20);
     970:	00000000 	andeq	r0, r0, r0
		response_checker[0] = create_message->request_number;
     974:	00000070 	andeq	r0, r0, r0, ror r0
     978:	83080e42 	movwhi	r0, #36418	; 0x8e42
		call sender(create_message, wait);
     97c:	00018e02 	andeq	r8, r1, r2, lsl #28
     980:	00000018 	andeq	r0, r0, r8, lsl r0
     984:	00000824 	andeq	r0, r0, r4, lsr #16
     988:	00000000 	andeq	r0, r0, r0
     98c:	00000078 	andeq	r0, r0, r8, ror r0
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     990:	83100e42 	tsthi	r0, #1056	; 0x420
     994:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		ser_inf(get_id_for_delete, "%u", &user_provided_receiver_id);
     998:	00018e02 	andeq	r8, r1, r2, lsl #28
     99c:	00000020 	andeq	r0, r0, r0, lsr #32
     9a0:	00000824 	andeq	r0, r0, r4, lsr #16
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     9a4:	00002130 	andeq	r2, r0, r0, lsr r1
     9a8:	000000bc 	strheq	r0, [r0], -ip
			strncpy(reason, "Error: improper node ID", 50);
     9ac:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     9b0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     9b4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
			proceed error;
     9b8:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9bc:	000b4114 	andeq	r4, fp, r4, lsl r1
     9c0:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_inf(get_index_for_delete, "%u", &user_provided_index);
     9c4:	00000824 	andeq	r0, r0, r4, lsr #16
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	0000003a 	andeq	r0, r0, sl, lsr r0
		if (user_provided_index < 0 || user_provided_index > 40){
     9d0:	83100e41 	tsthi	r0, #1040	; 0x410
     9d4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			strncpy(reason, "Error: invalid index", 50);
     9d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9dc:	00000018 	andeq	r0, r0, r8, lsl r0
			proceed error;
     9e0:	00000824 	andeq	r0, r0, r4, lsr #16
     9e4:	00000000 	andeq	r0, r0, r0
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e8:	00000038 	andeq	r0, r0, r8, lsr r0
		delete_record->gid = node_db->gid;
     9ec:	83100e41 	tsthi	r0, #1040	; 0x410
     9f0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     9f4:	00018e02 	andeq	r8, r1, r2, lsl #28
		delete_record->tpe = DELETE_RECORD;
     9f8:	0000000c 	andeq	r0, r0, ip
		delete_record->request_number = generate_request_num();
     9fc:	00000824 	andeq	r0, r0, r4, lsr #16
		delete_record->sender_id = node_db->id;
     a00:	00000000 	andeq	r0, r0, r0
     a04:	0000000a 	andeq	r0, r0, sl
		delete_record->receiver_id = user_provided_receiver_id;
     a08:	00000018 	andeq	r0, r0, r8, lsl r0
     a0c:	00000824 	andeq	r0, r0, r4, lsr #16
		delete_record->record_index = user_provided_index;
     a10:	000021ec 	andeq	r2, r0, ip, ror #3
		response_checker[0] = delete_record->request_number;
     a14:	0000002c 	andeq	r0, r0, ip, lsr #32
		response_checker[1] = delete_record->tpe;
     a18:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     a1c:	4c018e02 	stcmi	14, cr8, [r1], {2}
		call sender(delete_record, wait);
     a20:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a24:	0000001c 	andeq	r0, r0, ip, lsl r0
     a28:	00000824 	andeq	r0, r0, r4, lsr #16
     a2c:	00002218 	andeq	r2, r0, r8, lsl r2
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a30:	00000060 	andeq	r0, r0, r0, rrx
     a34:	83080e41 	movwhi	r0, #36417	; 0x8e41
		ser_inf(get_id_for_retrieve, "%u", &user_provided_receiver_id);
     a38:	61018e02 	tstvs	r1, r2, lsl #28
     a3c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     a40:	000b4300 	andeq	r4, fp, r0, lsl #6
		if (user_provided_receiver_id < 1 || user_provided_receiver_id > 25){
     a44:	00000014 	andeq	r0, r0, r4, lsl r0
     a48:	00000824 	andeq	r0, r0, r4, lsr #16
			strncpy(reason, "Error: improper node ID", 50);
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	00000040 	andeq	r0, r0, r0, asr #32
			proceed error;
     a54:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a58:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a5c:	00000014 	andeq	r0, r0, r4, lsl r0
     a60:	00000824 	andeq	r0, r0, r4, lsr #16
		ser_inf(get_index_for_retrieve, "%u", &user_provided_index);
     a64:	00000000 	andeq	r0, r0, r0
     a68:	0000002c 	andeq	r0, r0, ip, lsr #32
     a6c:	83080e42 	movwhi	r0, #36418	; 0x8e42
		if (user_provided_index < 0 || user_provided_index > 40){
     a70:	00018e02 	andeq	r8, r1, r2, lsl #28
			strncpy(reason, "Error: invalid index", 50);
     a74:	0000001c 	andeq	r0, r0, ip, lsl r0
     a78:	00000824 	andeq	r0, r0, r4, lsr #16
     a7c:	00000000 	andeq	r0, r0, r0
			proceed error;
     a80:	0000003c 	andeq	r0, r0, ip, lsr r0
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a84:	83180e41 	tsthi	r8, #1040	; 0x410
     a88:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		retrieve_record->gid = node_db->gid;
     a8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     a90:	00018e02 	andeq	r8, r1, r2, lsl #28
     a94:	0000000c 	andeq	r0, r0, ip
		retrieve_record->tpe = RETRIEVE_RECORD;
     a98:	00000824 	andeq	r0, r0, r4, lsr #16
		retrieve_record->request_number = generate_request_num();
     a9c:	00000000 	andeq	r0, r0, r0
     aa0:	00000006 	andeq	r0, r0, r6
		retrieve_record->sender_id = node_db->id;
     aa4:	0000001c 	andeq	r0, r0, ip, lsl r0
		response_checker[0] = retrieve_record->request_number;
     aa8:	00000824 	andeq	r0, r0, r4, lsr #16
		retrieve_record->receiver_id = user_provided_receiver_id;
     aac:	00002278 	andeq	r2, r0, r8, ror r2
     ab0:	00000068 	andeq	r0, r0, r8, rrx
		retrieve_record->record_index = user_provided_index;
     ab4:	83180e41 	tsthi	r8, #1040	; 0x410
     ab8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		response_checker[0] = retrieve_record->request_number;
     abc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		call sender(&retrieve_record, wait);
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ac4:	00000014 	andeq	r0, r0, r4, lsl r0
     ac8:	00000824 	andeq	r0, r0, r4, lsr #16
     acc:	000022e0 	andeq	r2, r0, r0, ror #5
     ad0:	00000050 	andeq	r0, r0, r0, asr r0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     ad8:	00018e02 	andeq	r8, r1, r2, lsl #28
		if(node_db->data_base.item_count != 0){
     adc:	0000002c 	andeq	r0, r0, ip, lsr #32
     ae0:	00000824 	andeq	r0, r0, r4, lsr #16
     ae4:	00002330 	andeq	r2, r0, r0, lsr r3
		ser_out(loop_through_data, "\r\n");
     ae8:	0000009c 	muleq	r0, ip, r0
     aec:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
		proceed menu;
     af0:	86088509 	strhi	r8, [r8], -r9, lsl #10
		delete_all(node_db);
     af4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     af8:	8a048905 	bhi	122f14 <__ccfg+0x102f6c>
		proceed menu;
     afc:	8e028b03 	vmlahi.f64	d8, d2, d3
     b00:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
		delay(3000, timeout);
     b04:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     b08:	00000b42 	andeq	r0, r0, r2, asr #22
		when(&response_flag, menu);
     b0c:	00000014 	andeq	r0, r0, r4, lsl r0
     b10:	00000824 	andeq	r0, r0, r4, lsr #16
		release;
     b14:	000023cc 	andeq	r2, r0, ip, asr #7
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b18:	00000040 	andeq	r0, r0, r0, asr #32
     b1c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b20:	00018e02 	andeq	r8, r1, r2, lsl #28
     b24:	00000014 	andeq	r0, r0, r4, lsl r0
     b28:	00000824 	andeq	r0, r0, r4, lsr #16
     b2c:	0000240c 	andeq	r2, r0, ip, lsl #8
     b30:	00000034 	andeq	r0, r0, r4, lsr r0
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b34:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b38:	00018e02 	andeq	r8, r1, r2, lsl #28
     b3c:	00000018 	andeq	r0, r0, r8, lsl r0
     b40:	00000824 	andeq	r0, r0, r4, lsr #16
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b44:	00002440 	andeq	r2, r0, r0, asr #8
		ser_out(timeout, "\r\nFailed to reach the destination");
     b48:	0000003c 	andeq	r0, r0, ip, lsr r0
     b4c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		proceed menu;
     b50:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     b54:	000ec4ce 	andeq	ip, lr, lr, asr #9
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b58:	00000018 	andeq	r0, r0, r8, lsl r0
     b5c:	00000824 	andeq	r0, r0, r4, lsr #16
		proceed menu;
     b60:	00000000 	andeq	r0, r0, r0
     b64:	0000003c 	andeq	r0, r0, ip, lsr r0
}
     b68:	83100e42 	tsthi	r0, #1056	; 0x420
     b6c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b70:	00018e02 	andeq	r8, r1, r2, lsl #28
     b74:	0000000c 	andeq	r0, r0, ip
     b78:	00000824 	andeq	r0, r0, r4, lsr #16
     b7c:	0000247c 	andeq	r2, r0, ip, ror r4
     b80:	00000002 	andeq	r0, r0, r2
     b84:	0000000c 	andeq	r0, r0, ip
     b88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     b90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b94:	0000000c 	andeq	r0, r0, ip
     b98:	00000b84 	andeq	r0, r0, r4, lsl #23
     b9c:	0000247e 	andeq	r2, r0, lr, ror r4
     ba0:	00000002 	andeq	r0, r0, r2
     ba4:	0000000c 	andeq	r0, r0, ip
     ba8:	00000b84 	andeq	r0, r0, r4, lsl #23
     bac:	00002480 	andeq	r2, r0, r0, lsl #9
     bb0:	00000002 	andeq	r0, r0, r2
     bb4:	0000000c 	andeq	r0, r0, ip
     bb8:	00000b84 	andeq	r0, r0, r4, lsl #23
     bbc:	00002482 	andeq	r2, r0, r2, lsl #9
     bc0:	00000002 	andeq	r0, r0, r2
     bc4:	00000014 	andeq	r0, r0, r4, lsl r0
static void devinit_uart (int devnum) {
     bc8:	00000b84 	andeq	r0, r0, r4, lsl #23
	adddevfunc (ioreq_uart_a, devnum);
     bcc:	00002484 	andeq	r2, r0, r4, lsl #9
     bd0:	00000044 	andeq	r0, r0, r4, asr #32
void udelay (volatile word n) {
     bd4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bd8:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (n) {
     bdc:	0000000c 	andeq	r0, r0, ip
     be0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
     be4:	7c020001 	stcvc	0, cr0, [r2], {1}
	while (n--);
     be8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bec:	0000000c 	andeq	r0, r0, ip
     bf0:	00000bdc 	ldrdeq	r0, [r0], -ip
		n--;
     bf4:	00000000 	andeq	r0, r0, r0
     bf8:	00000002 	andeq	r0, r0, r2
     bfc:	00000018 	andeq	r0, r0, r8, lsl r0
void mdelay (volatile word n) {
     c00:	00000bdc 	ldrdeq	r0, [r0], -ip
     c04:	00000000 	andeq	r0, r0, r0
	while (n) {
     c08:	00000058 	andeq	r0, r0, r8, asr r0
     c0c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
}
     c10:	86038504 	strhi	r8, [r3], -r4, lsl #10
		udelay (999);
     c14:	00018e02 	andeq	r8, r1, r2, lsl #28
     c18:	0000000c 	andeq	r0, r0, ip
		n--;
     c1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c20:	7c020001 	stcvc	0, cr0, [r2], {1}
     c24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c28:	0000002c 	andeq	r0, r0, ip, lsr #32
void __pi_ondomain (lword d) {
     c2c:	00000c18 	andeq	r0, r0, r8, lsl ip
     c30:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.effpdm > 1)
     c34:	000000cc 	andeq	r0, r0, ip, asr #1
     c38:	83100e42 	tsthi	r0, #1056	; 0x420
			__pi_systat.effpdm = 1;
     c3c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	PRCMPowerDomainOn (d);
     c40:	02018e02 	andeq	r8, r1, #2, 28
     c44:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
     c48:	000ec3c4 	andeq	ip, lr, r4, asr #7
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c4c:	ce420b44 	vmlsgt.f64	d16, d2, d4
     c50:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     c54:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns |= d;
     c58:	00000024 	andeq	r0, r0, r4, lsr #32
     c5c:	00000c18 	andeq	r0, r0, r8, lsl ip
}
     c60:	00000000 	andeq	r0, r0, r0
     c64:	00000038 	andeq	r0, r0, r8, lsr r0
void __pi_offdomain (lword d) {
     c68:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     c6c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
	PRCMPowerDomainOff (d);
     c70:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     c74:	4a0b4300 	bmi	2d187c <__ccfg+0x2b18d4>
     c78:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     c7c:	000b4300 	andeq	r4, fp, r0, lsl #6
	if (d & PRCM_DOMAIN_RFCORE) {
     c80:	0000000c 	andeq	r0, r0, ip
     c84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     c88:	7c020001 	stcvc	0, cr0, [r2], {1}
     c8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			__pi_systat.effpdm = __pi_systat.reqpdm;
     c90:	00000018 	andeq	r0, r0, r8, lsl r0
     c94:	00000c80 	andeq	r0, r0, r0, lsl #25
	__pi_systat.ondmns &= ~d;
     c98:	000024d0 	ldrdeq	r2, [r0], -r0
     c9c:	00000034 	andeq	r0, r0, r4, lsr r0
}
     ca0:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     ca4:	86038504 	strhi	r8, [r3], -r4, lsl #10
void __pi_syserror (word ec, const char *m) {
     ca8:	00018e02 	andeq	r8, r1, r2, lsl #28
	diag ("SYSERR: %x, %s", ec, m);
     cac:	00000018 	andeq	r0, r0, r8, lsl r0
     cb0:	00000c80 	andeq	r0, r0, r0, lsl #25
  __ASM volatile ("cpsid i" : : : "memory");
     cb4:	00002504 	andeq	r2, r0, r4, lsl #10
     cb8:	00000030 	andeq	r0, r0, r0, lsr r0
     cbc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     cc0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		all_leds_blink;
     cc4:	00000001 	andeq	r0, r0, r1
     cc8:	00000014 	andeq	r0, r0, r4, lsl r0
     ccc:	00000c80 	andeq	r0, r0, r0, lsl #25
     cd0:	00002534 	andeq	r2, r0, r4, lsr r5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     cd4:	00000018 	andeq	r0, r0, r8, lsl r0
     cd8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     cdc:	00018e02 	andeq	r8, r1, r2, lsl #28
     ce0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ce4:	00000c80 	andeq	r0, r0, r0, lsl #25
     ce8:	0000254c 	andeq	r2, r0, ip, asr #10
	while (1) {
     cec:	00000054 	andeq	r0, r0, r4, asr r0
     cf0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     cf4:	86058506 	strhi	r8, [r5], -r6, lsl #10
     cf8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
void tci_run_delay_timer () {
     cfc:	00018e02 	andeq	r8, r1, r2, lsl #28
	setdel = __pi_mintk - __pi_old;
     d00:	0000001c 	andeq	r0, r0, ip, lsl r0
     d04:	00000c80 	andeq	r0, r0, r0, lsl #25
     d08:	000025a0 	andeq	r2, r0, r0, lsr #11
     d0c:	00000040 	andeq	r0, r0, r0, asr #32
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d10:	83180e41 	tsthi	r8, #1040	; 0x410
     d14:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d18:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d1c:	00018e02 	andeq	r8, r1, r2, lsl #28
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d20:	00000014 	andeq	r0, r0, r4, lsl r0
	sti_tim;
     d24:	00000c80 	andeq	r0, r0, r0, lsl #25
}
     d28:	000025e0 	andeq	r2, r0, r0, ror #11
     d2c:	00000024 	andeq	r0, r0, r4, lsr #32
     d30:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	00000014 	andeq	r0, r0, r4, lsl r0
	cli_aux;
     d3c:	00000c80 	andeq	r0, r0, r0, lsl #25
     d40:	00002604 	andeq	r2, r0, r4, lsl #12
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	00000014 	andeq	r0, r0, r4, lsl r0
     d48:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d4c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d50:	0000000c 	andeq	r0, r0, ip
	sti_aux;
     d54:	00000c80 	andeq	r0, r0, r0, lsl #25
}
     d58:	00002618 	andeq	r2, r0, r8, lsl r6
     d5c:	00000014 	andeq	r0, r0, r4, lsl r0
     d60:	0000001c 	andeq	r0, r0, ip, lsl r0
void AONRTCIntHandler () {
     d64:	00000c80 	andeq	r0, r0, r0, lsl #25
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d68:	00000000 	andeq	r0, r0, r0
     d6c:	00000064 	andeq	r0, r0, r4, rrx
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     d70:	83180e41 	tsthi	r8, #1040	; 0x410
		if (__pi_utims [0] == 0)
     d74:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d78:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		if (*(__pi_utims [0])) {
     d7c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d80:	0000001c 	andeq	r0, r0, ip, lsl r0
			(*(__pi_utims [0]))--;
     d84:	00000c80 	andeq	r0, r0, r0, lsl #25
		if (__pi_utims [1] == 0)
     d88:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [1])) {
     d8c:	00000128 	andeq	r0, r0, r8, lsr #2
			aux_timer_inactive = 0;
     d90:	83180e41 	tsthi	r8, #1040	; 0x410
			(*(__pi_utims [1]))--;
     d94:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		if (__pi_utims [2] == 0)
     d98:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		if (*(__pi_utims [2])) {
     d9c:	00018e02 	andeq	r8, r1, r2, lsl #28
			(*(__pi_utims [2]))--;
     da0:	00000024 	andeq	r0, r0, r4, lsr #32
		if (__pi_utims [3] != 0) {
     da4:	00000c80 	andeq	r0, r0, r0, lsl #25
			if (*(__pi_utims [3])) {
     da8:	00000000 	andeq	r0, r0, r0
				aux_timer_inactive = 0;
     dac:	000000ec 	andeq	r0, r0, ip, ror #1
				(*(__pi_utims [3]))--;
     db0:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
	if (__pi_systat.ledsts) {
     db4:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     db8:	87078608 	strhi	r8, [r7, -r8, lsl #12]
		if (__pi_systat.ledblc++ == 0) {
     dbc:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     dc0:	8b038a04 	blhi	e35d8 <__ccfg+0xc3630>
			if (__pi_systat.ledblk) {
     dc4:	00018e02 	andeq	r8, r1, r2, lsl #28
     dc8:	0000000c 	andeq	r0, r0, ip
     dcc:	00000c80 	andeq	r0, r0, r0, lsl #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	00000002 	andeq	r0, r0, r2
				if (__pi_systat.ledsts & 0x2)
     dd8:	0000000c 	andeq	r0, r0, ip
     ddc:	00000c80 	andeq	r0, r0, r0, lsl #25
     de0:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x4)
     de4:	00000004 	andeq	r0, r0, r4
				__pi_systat.ledblk = 0;
     de8:	0000000c 	andeq	r0, r0, ip
     dec:	00000c80 	andeq	r0, r0, r0, lsl #25
			if (__pi_systat.fstblk)
     df0:	00000000 	andeq	r0, r0, r0
     df4:	00000014 	andeq	r0, r0, r4, lsl r0
				__pi_systat.ledblc = 200;
     df8:	00000018 	andeq	r0, r0, r8, lsl r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     dfc:	00000c80 	andeq	r0, r0, r0, lsl #25
		cli_tim;
     e00:	00000000 	andeq	r0, r0, r0
		__pi_new += setdel;
     e04:	0000001a 	andeq	r0, r0, sl, lsl r0
     e08:	83080e41 	movwhi	r0, #36417	; 0x8e41
		setdel = 0;
     e0c:	4a018e02 	bmi	6461c <__ccfg+0x44674>
		RISE_N_SHINE;
     e10:	000ec3ce 	andeq	ip, lr, lr, asr #7
		__pi_new += setdel;
     e14:	0000000c 	andeq	r0, r0, ip
		RISE_N_SHINE;
     e18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e1c:	7c020001 	stcvc	0, cr0, [r2], {1}
		aux_timer_inactive = 1;
     e20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e24:	0000001c 	andeq	r0, r0, ip, lsl r0
				if (__pi_systat.ledsts & 0x1)
     e28:	00000e14 	andeq	r0, r0, r4, lsl lr
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e2c:	0000262c 	andeq	r2, r0, ip, lsr #12
     e30:	0000006c 	andeq	r0, r0, ip, rrx
				if (__pi_systat.ledsts & 0x2)
     e34:	83180e41 	tsthi	r8, #1040	; 0x410
     e38:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e3c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				if (__pi_systat.ledsts & 0x8)
     e40:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblk = 1;
     e44:	0000000c 	andeq	r0, r0, ip
     e48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if (aux_timer_inactive) {
     e4c:	7c020001 	stcvc	0, cr0, [r2], {1}
			cli_aux;
     e50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e54:	0000001c 	andeq	r0, r0, ip, lsl r0
     e58:	00000e44 	andeq	r0, r0, r4, asr #28
     e5c:	00002698 	muleq	r0, r8, r6
     e60:	00000078 	andeq	r0, r0, r8, ror r0
     e64:	83180e41 	tsthi	r8, #1040	; 0x410
     e68:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e6c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e70:	00018e02 	andeq	r8, r1, r2, lsl #28
     e74:	0000000c 	andeq	r0, r0, ip
word tci_update_delay_ticks (Boolean force) {
     e78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	cli_tim;
     e7c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	if (setdel) {
     e84:	00000030 	andeq	r0, r0, r0, lsr r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e88:	00000e74 	andeq	r0, r0, r4, ror lr
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     e8c:	00002710 	andeq	r2, r0, r0, lsl r7
     e90:	00000054 	andeq	r0, r0, r4, asr r0
     e94:	810c0e41 	tsthi	ip, r1, asr #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     e98:	83028203 	movwhi	r8, #8707	; 0x2203
				AON_RTC_O_CH0CMP)) - gettav ());
     e9c:	280e4101 	stmdacs	lr, {r0, r8, lr}
	return NO;
     ea0:	06850784 	streq	r0, [r5], r4, lsl #15
			setdel = 0;
     ea4:	048e0586 	streq	r0, [lr], #1414	; 0x586
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ea8:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
     eac:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
}
     eb0:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
		sti_tim;
     eb4:	000ec1c2 	andeq	ip, lr, r2, asr #3
		return YES;
     eb8:	0000000c 	andeq	r0, r0, ip
     ebc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ec0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ec4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ec8:	00000030 	andeq	r0, r0, r0, lsr r0
	UARTDisable (UART0_BASE);
     ecc:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     ed0:	00002764 	andeq	r2, r0, r4, ror #14
	UARTDisable (UART0_BASE);
     ed4:	00000060 	andeq	r0, r0, r0, rrx
	UARTConfigSetExpClk (UART0_BASE,
     ed8:	810c0e41 	tsthi	ip, r1, asr #28
     edc:	83028203 	movwhi	r8, #8707	; 0x2203
     ee0:	200e4101 	andcs	r4, lr, r1, lsl #2
     ee4:	05850684 	streq	r0, [r5, #1668]	; 0x684
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     ee8:	0a64048e 	beq	1902128 <__ccfg+0x18e2180>
     eec:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     ef0:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     ef4:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     ef8:	0b41000e 	bleq	1040f38 <__ccfg+0x1020f90>
     efc:	0000000c 	andeq	r0, r0, ip
	urates [0] = rate;
     f00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
     f04:	7c020001 	stcvc	0, cr0, [r2], {1}
     f08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f0c:	0000000c 	andeq	r0, r0, ip
     f10:	00000efc 	strdeq	r0, [r0], -ip
     f14:	000027c4 	andeq	r2, r0, r4, asr #15
     f18:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	00000018 	andeq	r0, r0, r8, lsl r0
     f20:	00000efc 	strdeq	r0, [r0], -ip
     f24:	000027e4 	andeq	r2, r0, r4, ror #15
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f28:	00000190 	muleq	r0, r0, r1
     f2c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f30:	86038504 	strhi	r8, [r3], -r4, lsl #10
     f34:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_uart_setrate (urates [0], __pi_uart);
     f38:	00000018 	andeq	r0, r0, r8, lsl r0
     f3c:	00000efc 	strdeq	r0, [r0], -ip
     f40:	00002974 	andeq	r2, r0, r4, ror r9
     f44:	00000048 	andeq	r0, r0, r8, asr #32
     f48:	83100e41 	tsthi	r0, #1040	; 0x410
     f4c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f50:	00018e02 	andeq	r8, r1, r2, lsl #28
	switch (operation) {
     f54:	00000014 	andeq	r0, r0, r4, lsl r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     f58:	00000efc 	strdeq	r0, [r0], -ip
     f5c:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
     f60:	00000024 	andeq	r0, r0, r4, lsr #32
     f64:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f68:	00018e02 	andeq	r8, r1, r2, lsl #28
				*buf++ = uart_a_read;
     f6c:	00000018 	andeq	r0, r0, r8, lsl r0
     f70:	00000efc 	strdeq	r0, [r0], -ip
			while (len && uart_a_char_available) {
     f74:	000029e0 	andeq	r2, r0, r0, ror #19
     f78:	0000005c 	andeq	r0, r0, ip, asr r0
     f7c:	83100e41 	tsthi	r0, #1040	; 0x410
			if (len != operation) {
     f80:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     f84:	00018e02 	andeq	r8, r1, r2, lsl #28
     f88:	00000018 	andeq	r0, r0, r8, lsl r0
			uart_a_disable_int;
     f8c:	00000efc 	strdeq	r0, [r0], -ip
			if (uart_a_char_available) {
     f90:	00002a3c 	andeq	r2, r0, ip, lsr sl
				*buf++ = uart_a_read;
     f94:	00000038 	andeq	r0, r0, r8, lsr r0
			uart_a_disable_int;
     f98:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f9c:	86038504 	strhi	r8, [r3], -r4, lsl #10
			if (uart_a_char_available) {
     fa0:	00018e02 	andeq	r8, r1, r2, lsl #28
     fa4:	00000028 	andeq	r0, r0, r8, lsr #32
				uart_a_enable_int;
     fa8:	00000efc 	strdeq	r0, [r0], -ip
     fac:	00002a74 	andeq	r2, r0, r4, ror sl
				goto Redo_rx;
     fb0:	00000180 	andeq	r0, r0, r0, lsl #3
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fb4:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
     fb8:	86058506 	strhi	r8, [r5], -r6, lsl #10
			return -2;
     fbc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     fc0:	02018e02 	andeq	r8, r1, #2, 28
				uart_a_write (*buf);
     fc4:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
     fc8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
			while (len && uart_a_room_in_tx) {
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	00000030 	andeq	r0, r0, r0, lsr r0
     fd4:	00000efc 	strdeq	r0, [r0], -ip
			if (len != operation) {
     fd8:	00002bf4 	strdeq	r2, [r0], -r4
			uart_a_disable_int;
     fdc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fe0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			if (uart_a_room_in_tx) {
     fe4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     fe8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
				uart_a_enable_int;
     fec:	89038804 	stmdbhi	r3, {r2, fp, pc}
     ff0:	02018e02 	andeq	r8, r1, #2, 28
				*buf++ = uart_a_read;
     ff4:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
			if (uart_a_room_in_tx) {
     ff8:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
				uart_a_write (*buf);
     ffc:	000ec3c4 	andeq	ip, lr, r4, asr #7
    1000:	00000b46 	andeq	r0, r0, r6, asr #22
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1004:	00000020 	andeq	r0, r0, r0, lsr #32
    1008:	00000efc 	strdeq	r0, [r0], -ip
			uart_a_enable_int;
    100c:	00002cc4 	andeq	r2, r0, r4, asr #25
    1010:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1014:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
			return 0;
    1018:	86038504 	strhi	r8, [r3], -r4, lsl #10
			if (len == UART_CNTRL_SETRATE) {
    101c:	02018e02 	andeq	r8, r1, #2, 28
				if (__pi_uart_setrate (*((word*)buf),
    1020:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
    1024:	00000ec4 	andeq	r0, r0, r4, asr #29
    1028:	00000018 	andeq	r0, r0, r8, lsl r0
				syserror (EREQPAR, "uar");
    102c:	00000efc 	strdeq	r0, [r0], -ip
			syserror (ENOOPER, "uai");
    1030:	00002eb4 			; <UNDEFINED> instruction: 0x00002eb4
			if (len == UART_CNTRL_GETRATE) {
    1034:	00000070 	andeq	r0, r0, r0, ror r0
				return 1;
    1038:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    103c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			syserror (ENOOPER, "uai");
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000024 	andeq	r0, r0, r4, lsr #32
    1048:	00000efc 	strdeq	r0, [r0], -ip
    104c:	00002f24 	andeq	r2, r0, r4, lsr #30
    1050:	00000174 	andeq	r0, r0, r4, ror r1
    1054:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
    1058:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    105c:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    1060:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1064:	8b038a04 	blhi	e387c <__ccfg+0xc38d4>
void UART0IntHandler () {
    1068:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    106c:	0000000c 	andeq	r0, r0, ip
    1070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1074:	7c020001 	stcvc	0, cr0, [r2], {1}
    1078:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    107c:	00000014 	andeq	r0, r0, r4, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    1080:	0000106c 	andeq	r1, r0, ip, rrx
    1084:	00003098 	muleq	r0, r8, r0
		RISE_N_SHINE;
    1088:	00000024 	andeq	r0, r0, r4, lsr #32
    108c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		i_trigger (devevent (UART_A, READ));
    1090:	00018e02 	andeq	r8, r1, r2, lsl #28
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	0000106c 	andeq	r1, r0, ip, rrx
    109c:	000030bc 	strheq	r3, [r0], -ip
    10a0:	00000024 	andeq	r0, r0, r4, lsr #32
    10a4:	0000000c 	andeq	r0, r0, ip
    10a8:	0000106c 	andeq	r1, r0, ip, rrx
    10ac:	000030e0 	andeq	r3, r0, r0, ror #1
    10b0:	00000008 	andeq	r0, r0, r8
    10b4:	0000000c 	andeq	r0, r0, ip
    10b8:	0000106c 	andeq	r1, r0, ip, rrx
    10bc:	000030e8 	andeq	r3, r0, r8, ror #1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10c0:	00000004 	andeq	r0, r0, r4
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	0000106c 	andeq	r1, r0, ip, rrx
		i_trigger (devevent (UART_A, WRITE));
    10cc:	000030ec 	andeq	r3, r0, ip, ror #1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    10d0:	00000004 	andeq	r0, r0, r4
    10d4:	00000018 	andeq	r0, r0, r8, lsl r0
		RISE_N_SHINE;
    10d8:	0000106c 	andeq	r1, r0, ip, rrx
    10dc:	000030f0 	strdeq	r3, [r0], -r0
    10e0:	00000048 	andeq	r0, r0, r8, asr #32
		i_trigger (devevent (UART_A, WRITE));
    10e4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    10e8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    10f0:	0000000c 	andeq	r0, r0, ip
    10f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    10fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1100:	00000028 	andeq	r0, r0, r8, lsr #32
    1104:	000010f0 	strdeq	r1, [r0], -r0
    1108:	00003138 	andeq	r3, r0, r8, lsr r1
    110c:	00000070 	andeq	r0, r0, r0, ror r0
}
    1110:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1114:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1118:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    111c:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
    1120:	c7ce4214 	bfigt	r4, r4, #4, #11
void __buttons_setirq (int val) {
    1124:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    1128:	000b4200 	andeq	r4, fp, r0, lsl #4
    112c:	0000000c 	andeq	r0, r0, ip
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1134:	7c020001 	stcvc	0, cr0, [r2], {1}
    1138:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		bn = BUTTON_GPIO (__button_list [i]);
    113c:	00000028 	andeq	r0, r0, r8, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1140:	0000112c 	andeq	r1, r0, ip, lsr #2
    1144:	000031a8 	andeq	r3, r0, r8, lsr #3
    1148:	0000011c 	andeq	r0, r0, ip, lsl r1
    114c:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1150:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1154:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
}
    1158:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    115c:	c7ce4214 	bfigt	r4, r4, #4, #11
    1160:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1164:	00000000 	andeq	r0, r0, r0
void __pinlist_setirq (int val) {
    1168:	0000000c 	andeq	r0, r0, ip
	for (i = 0; i < N_PINLIST; i++) {
    116c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    1170:	7c020001 	stcvc	0, cr0, [r2], {1}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (i = 0; i < N_PINLIST; i++) {
    1178:	0000000c 	andeq	r0, r0, ip
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    117c:	00001168 	andeq	r1, r0, r8, ror #2
    1180:	000032c4 	andeq	r3, r0, r4, asr #5
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1184:	00000020 	andeq	r0, r0, r0, lsr #32
    1188:	00000028 	andeq	r0, r0, r8, lsr #32
    118c:	00001168 	andeq	r1, r0, r8, ror #2
	for (i = 0; i < N_PINLIST; i++) {
    1190:	000032e4 	andeq	r3, r0, r4, ror #5
}
    1194:	00000230 	andeq	r0, r0, r0, lsr r2
    1198:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    119c:	86078508 	strhi	r8, [r7], -r8, lsl #10
    11a0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
void GPIOIntHandler () {
    11a4:	8a038904 	bhi	e35bc <__ccfg+0xc3614>
if (buttons_int) {
    11a8:	02018e02 	andeq	r8, r1, #2, 28
    11ac:	200e0a4f 	andcs	r0, lr, pc, asr #20
	buttons_disable ();
    11b0:	00000b42 	andeq	r0, r0, r2, asr #22
    11b4:	0000001c 	andeq	r0, r0, ip, lsl r0
	i_trigger ((aword)&__button_list);
    11b8:	00001168 	andeq	r1, r0, r8, ror #2
    11bc:	00003514 	andeq	r3, r0, r4, lsl r5
    11c0:	00000050 	andeq	r0, r0, r0, asr r0
    11c4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    11c8:	86058506 	strhi	r8, [r5], -r6, lsl #10
    11cc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    11d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    11d4:	0000000c 	andeq	r0, r0, ip
    11d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11dc:	7c020001 	stcvc	0, cr0, [r2], {1}
    11e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	RISE_N_SHINE;
    11e4:	00000020 	andeq	r0, r0, r0, lsr #32
    11e8:	000011d4 	ldrdeq	r1, [r0], -r4
    11ec:	00003564 	andeq	r3, r0, r4, ror #10
if (pin_sensor_int) {
    11f0:	00000390 	muleq	r0, r0, r3
    11f4:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
	i_trigger ((aword)(&__input_pins));
    11f8:	86068507 	strhi	r8, [r6], -r7, lsl #10
    11fc:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1200:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    1204:	00000001 	andeq	r0, r0, r1
    1208:	0000000c 	andeq	r0, r0, ip
    120c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1210:	7c020001 	stcvc	0, cr0, [r2], {1}
    1214:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1218:	00000024 	andeq	r0, r0, r4, lsr #32
    121c:	00001208 	andeq	r1, r0, r8, lsl #4
    1220:	000038f4 	strdeq	r3, [r0], -r4
	__pinsen_disable_and_clear;
    1224:	00000028 	andeq	r0, r0, r8, lsr #32
	RISE_N_SHINE;
    1228:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    122c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1230:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
}
    1234:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    1238:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    123c:	0000000b 	andeq	r0, r0, fp
    1240:	00000028 	andeq	r0, r0, r8, lsr #32
    1244:	00001208 	andeq	r1, r0, r8, lsl #4
void system_init () {
    1248:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    124c:	0000002c 	andeq	r0, r0, ip, lsr #32
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1250:	83180e41 	tsthi	r8, #1040	; 0x410
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1254:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    1258:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    125c:	50018e02 	andpl	r8, r1, r2, lsl #28
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1260:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1264:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    1268:	000b4200 	andeq	r4, fp, r0, lsl #4
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1274:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    127c:	0000000c 	andeq	r0, r0, ip
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1280:	0000126c 	andeq	r1, r0, ip, ror #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1284:	0000391c 	andeq	r3, r0, ip, lsl r9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1288:	00000030 	andeq	r0, r0, r0, lsr r0
		pin = (port_confs [i] >> 19) & 0x1f;
    128c:	0000000c 	andeq	r0, r0, ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    1290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		pin = (port_confs [i] >> 19) & 0x1f;
    1294:	7c020001 	stcvc	0, cr0, [r2], {1}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    1298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    129c:	0000000c 	andeq	r0, r0, ip
    12a0:	0000128c 	andeq	r1, r0, ip, lsl #5
    12a4:	0000394c 	andeq	r3, r0, ip, asr #18
		if (port_confs [i] & 0x80)
    12a8:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12ac:	0000000c 	andeq	r0, r0, ip
    12b0:	0000128c 	andeq	r1, r0, ip, lsl #5
		if (port_confs [i] & 0x40)
    12b4:	0000396c 	andeq	r3, r0, ip, ror #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    12bc:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12cc:	0000000c 	andeq	r0, r0, ip
    12d0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
	all_leds_blink;
    12d4:	00003984 	andeq	r3, r0, r4, lsl #19
    12d8:	00000008 	andeq	r0, r0, r8
    12dc:	0000000c 	andeq	r0, r0, ip
    12e0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    12e4:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12e8:	00000006 	andeq	r0, r0, r6
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    12f4:	0000398c 	andeq	r3, r0, ip, lsl #19
    12f8:	00000008 	andeq	r0, r0, r8
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    12fc:	0000000c 	andeq	r0, r0, ip
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1300:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    1304:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_AON_RTC_COMB);
    1308:	00000006 	andeq	r0, r0, r6
    130c:	0000000c 	andeq	r0, r0, ip
    1310:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
	__pi_malloc_init ();
    1314:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_AON_GPIO_EDGE);
    1318:	00000008 	andeq	r0, r0, r8
    131c:	0000000c 	andeq	r0, r0, ip
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1324:	7c020001 	stcvc	0, cr0, [r2], {1}
    1328:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    132c:	0000001c 	andeq	r0, r0, ip, lsl r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1330:	0000131c 	andeq	r1, r0, ip, lsl r3
    1334:	00003994 	muleq	r0, r4, r9
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1338:	0000005c 	andeq	r0, r0, ip, asr r0
    133c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1340:	86038504 	strhi	r8, [r3], -r4, lsl #10
	urates [0] = UART_RATE / 100;
    1344:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    1348:	0000100e 	andeq	r1, r0, lr
	reinit_uart ();
    134c:	00000014 	andeq	r0, r0, r4, lsl r0
	EXTRA_INITIALIZERS;
    1350:	0000131c 	andeq	r1, r0, ip, lsl r3
    1354:	000039f0 	strdeq	r3, [r0], -r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    1358:	0000002c 	andeq	r0, r0, ip, lsr #32
    135c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1360:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1364:	00000018 	andeq	r0, r0, r8, lsl r0
    1368:	0000131c 	andeq	r1, r0, ip, lsl r3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    136c:	00000000 	andeq	r0, r0, r0
    1370:	00000090 	muleq	r0, r0, r0
			devinit [i] . init (devinit [i] . param);
    1374:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    1378:	86038504 	strhi	r8, [r3], -r4, lsl #10
    137c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1380:	00000014 	andeq	r0, r0, r4, lsl r0
	IntEnable (INT_UART0_COMB);
    1384:	0000131c 	andeq	r1, r0, ip, lsl r3
    1388:	00003a1c 	andeq	r3, r0, ip, lsl sl
}
    138c:	00000018 	andeq	r0, r0, r8, lsl r0
	tci_run_auxiliary_timer ();
    1390:	83080e41 	movwhi	r0, #36417	; 0x8e41
		diag ("");
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    139c:	0000131c 	andeq	r1, r0, ip, lsl r3
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13a0:	00003a34 	andeq	r3, r0, r4, lsr sl
		diag ("Leftover RAM: %d bytes",
    13a4:	00000060 	andeq	r0, r0, r0, rrx
    13a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
    13b4:	0000131c 	andeq	r1, r0, ip, lsl r3
    13b8:	00003a94 	muleq	r0, r4, sl
    13bc:	00000034 	andeq	r0, r0, r4, lsr r0
    13c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13c8:	00000018 	andeq	r0, r0, r8, lsl r0
    13cc:	0000131c 	andeq	r1, r0, ip, lsl r3
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	00000038 	andeq	r0, r0, r8, lsr r0
    13d8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    13dc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    13e0:	00000001 	andeq	r0, r0, r1
    13e4:	0000000c 	andeq	r0, r0, ip
    13e8:	0000131c 	andeq	r1, r0, ip, lsl r3
    13ec:	00000000 	andeq	r0, r0, r0
    13f0:	0000000c 	andeq	r0, r0, ip
    13f4:	00000018 	andeq	r0, r0, r8, lsl r0
    13f8:	0000131c 	andeq	r1, r0, ip, lsl r3
    13fc:	00000000 	andeq	r0, r0, r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1400:	00000034 	andeq	r0, r0, r4, lsr r0
    1404:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1408:	86038504 	strhi	r8, [r3], -r4, lsl #10
    140c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1410:	0000000c 	andeq	r0, r0, ip
    1414:	0000131c 	andeq	r1, r0, ip, lsl r3
    1418:	00000000 	andeq	r0, r0, r0
    141c:	0000001c 	andeq	r0, r0, ip, lsl r0
}
    1420:	0000000c 	andeq	r0, r0, ip
__attribute__ ((noreturn)) void __pi_release () {
    1424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1428:	7c020001 	stcvc	0, cr0, [r2], {1}
    142c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1430:	0000000c 	andeq	r0, r0, ip
	check_stack_overflow;
    1434:	00001420 	andeq	r1, r0, r0, lsr #8
    1438:	00000000 	andeq	r0, r0, r0
    143c:	00000014 	andeq	r0, r0, r4, lsl r0
	update_n_wake (MAX_WORD, NO);
    1440:	0000000c 	andeq	r0, r0, ip
    1444:	00001420 	andeq	r1, r0, r0, lsr #8
    1448:	00003ac8 	andeq	r3, r0, r8, asr #21
	for_all_tasks (__pi_curr) {
    144c:	00000028 	andeq	r0, r0, r8, lsr #32
    1450:	0000000c 	andeq	r0, r0, ip
    1454:	00001420 	andeq	r1, r0, r0, lsr #8
    1458:	00003af0 	strdeq	r3, [r0], -r0
	__SLEEP;
    145c:	0000004c 	andeq	r0, r0, ip, asr #32
    1460:	0000000c 	andeq	r0, r0, ip
    1464:	00001420 	andeq	r1, r0, r0, lsr #8
    1468:	00003b3c 	andeq	r3, r0, ip, lsr fp
	system_event_count ++;
    146c:	00000150 	andeq	r0, r0, r0, asr r1
    1470:	00000018 	andeq	r0, r0, r8, lsl r0
	switch (__pi_systat.effpdm) {
    1474:	00001420 	andeq	r1, r0, r0, lsr #8
    1478:	00003c8c 	andeq	r3, r0, ip, lsl #25
    147c:	00000118 	andeq	r0, r0, r8, lsl r1
    1480:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
			__WFI ();
    1484:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1488:	00018e02 	andeq	r8, r1, r2, lsl #28
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
	check_stack_overflow;
    1490:	00001420 	andeq	r1, r0, r0, lsr #8
    1494:	00003da4 	andeq	r3, r0, r4, lsr #27
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    1498:	00000020 	andeq	r0, r0, r0, lsr #32
    149c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
			(__pi_curr->code) (tstate (__pi_curr));
    14a0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			goto Redo;
    14a4:	00000001 	andeq	r0, r0, r1
	for_all_tasks (__pi_curr) {
    14a8:	00000014 	andeq	r0, r0, r4, lsl r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14ac:	00001420 	andeq	r1, r0, r0, lsr #8
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14b0:	00000000 	andeq	r0, r0, r0
    14b4:	00000060 	andeq	r0, r0, r0, rrx
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    14c0:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14c4:	00001420 	andeq	r1, r0, r0, lsr #8
    14c8:	00003dc4 	andeq	r3, r0, r4, asr #27
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    14cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d0:	0000000c 	andeq	r0, r0, ip
			__WFI ();
    14d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    14d8:	7c020001 	stcvc	0, cr0, [r2], {1}
    14dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14e0:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    14e4:	000014d0 	ldrdeq	r1, [r0], -r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    14e8:	00003de0 	andeq	r3, r0, r0, ror #27
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    14ec:	000000d4 	ldrdeq	r0, [r0], -r4
    14f0:	83100e41 	tsthi	r0, #1040	; 0x410
			PRCMPowerDomainOff (__pi_systat.ondmns |
    14f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    14f8:	00018e02 	andeq	r8, r1, r2, lsl #28
    14fc:	00000014 	andeq	r0, r0, r4, lsl r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1500:	000014d0 	ldrdeq	r1, [r0], -r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1504:	00003eb4 			; <UNDEFINED> instruction: 0x00003eb4
    1508:	000000a4 	andeq	r0, r0, r4, lsr #1
    150c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1510:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1514:	0000000c 	andeq	r0, r0, ip
    1518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    151c:	7c020001 	stcvc	0, cr0, [r2], {1}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1520:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1524:	00000018 	andeq	r0, r0, r8, lsl r0
    1528:	00001514 	andeq	r1, r0, r4, lsl r5
    152c:	00003f58 	andeq	r3, r0, r8, asr pc
    1530:	0000007c 	andeq	r0, r0, ip, ror r0
			SysCtrlSetRechargeBeforePowerDown
    1534:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1538:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    153c:	00000001 	andeq	r0, r0, r1
    1540:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1544:	00001514 	andeq	r1, r0, r4, lsl r5
    1548:	00003fd4 	ldrdeq	r3, [r0], -r4
    154c:	000000ac 	andeq	r0, r0, ip, lsr #1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1550:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    1554:	00018e02 	andeq	r8, r1, r2, lsl #28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    1558:	0000000c 	andeq	r0, r0, ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    155c:	00001514 	andeq	r1, r0, r4, lsl r5
    1560:	00004080 	andeq	r4, r0, r0, lsl #1
    1564:	0000005c 	andeq	r0, r0, ip, asr r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1568:	0000000c 	andeq	r0, r0, ip
			while (!(AONWUCPowerStatusGet () &
    156c:	00001514 	andeq	r1, r0, r4, lsl r5
			PRCMPowerDomainOn (__pi_systat.ondmns);
    1570:	000040dc 	ldrdeq	r4, [r0], -ip
    1574:	00000018 	andeq	r0, r0, r8, lsl r0
    1578:	0000000c 	andeq	r0, r0, ip
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    157c:	00001514 	andeq	r1, r0, r4, lsl r5
    1580:	00000000 	andeq	r0, r0, r0
    1584:	00000010 	andeq	r0, r0, r0, lsl r0
    1588:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    158c:	00001514 	andeq	r1, r0, r4, lsl r5
    1590:	000040f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1594:	00000010 	andeq	r0, r0, r0, lsl r0
    1598:	0000000c 	andeq	r0, r0, ip
			SysCtrlAdjustRechargeAfterPowerDown ();
    159c:	00001514 	andeq	r1, r0, r4, lsl r5
			reinit_uart ();
    15a0:	00004104 	andeq	r4, r0, r4, lsl #2
    15a4:	00000014 	andeq	r0, r0, r4, lsl r0
    15a8:	00000018 	andeq	r0, r0, r8, lsl r0
}
    15ac:	00001514 	andeq	r1, r0, r4, lsl r5
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15b0:	00004118 	andeq	r4, r0, r8, lsl r1
    15b4:	00000064 	andeq	r0, r0, r4, rrx
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15b8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    15bc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15c0:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15c4:	0000000c 	andeq	r0, r0, ip
    15c8:	00001514 	andeq	r1, r0, r4, lsl r5
    15cc:	0000417c 	andeq	r4, r0, ip, ror r1
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15d0:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    15d4:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    15d8:	00001514 	andeq	r1, r0, r4, lsl r5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    15dc:	00004190 	muleq	r0, r0, r1
    15e0:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    15e4:	0000000c 	andeq	r0, r0, ip
    15e8:	00001514 	andeq	r1, r0, r4, lsl r5
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    15ec:	000041a4 	andeq	r4, r0, r4, lsr #3
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    15f0:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    15f4:	0000000c 	andeq	r0, r0, ip
    15f8:	00001514 	andeq	r1, r0, r4, lsl r5
			PRCMPowerDomainOff (
    15fc:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    1600:	00000028 	andeq	r0, r0, r8, lsr #32
	__SLEEP;
    1604:	0000000c 	andeq	r0, r0, ip
    1608:	00001514 	andeq	r1, r0, r4, lsl r5
  __ASM volatile ("cpsie i" : : : "memory");
    160c:	000041e0 	andeq	r4, r0, r0, ror #3
	goto Redo;
    1610:	00000010 	andeq	r0, r0, r0, lsl r0
    1614:	0000000c 	andeq	r0, r0, ip
    1618:	00001514 	andeq	r1, r0, r4, lsl r5
    161c:	000041f0 	strdeq	r4, [r0], -r0
    1620:	0000002c 	andeq	r0, r0, ip, lsr #32
    1624:	0000000c 	andeq	r0, r0, ip
    1628:	00001514 	andeq	r1, r0, r4, lsl r5
    162c:	0000421c 	andeq	r4, r0, ip, lsl r2
    1630:	00000014 	andeq	r0, r0, r4, lsl r0
    1634:	0000000c 	andeq	r0, r0, ip
    1638:	00001514 	andeq	r1, r0, r4, lsl r5
    163c:	00004230 	andeq	r4, r0, r0, lsr r2
    1640:	00000014 	andeq	r0, r0, r4, lsl r0
    1644:	0000001c 	andeq	r0, r0, ip, lsl r0
    1648:	00001514 	andeq	r1, r0, r4, lsl r5
    164c:	00004244 	andeq	r4, r0, r4, asr #4
    1650:	00000110 	andeq	r0, r0, r0, lsl r1
    1654:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1658:	86038504 	strhi	r8, [r3], -r4, lsl #10
    165c:	02018e02 	andeq	r8, r1, #2, 28
    1660:	00100e76 	andseq	r0, r0, r6, ror lr
    1664:	00000018 	andeq	r0, r0, r8, lsl r0
    1668:	00001514 	andeq	r1, r0, r4, lsl r5
    166c:	00004354 	andeq	r4, r0, r4, asr r3
    1670:	00000064 	andeq	r0, r0, r4, rrx
    1674:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1678:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	cli_tim;
    167c:	00000001 	andeq	r0, r0, r1
    1680:	0000000c 	andeq	r0, r0, ip
    1684:	00001514 	andeq	r1, r0, r4, lsl r5
	diag ("PicOS halted");
    1688:	000043b8 			; <UNDEFINED> instruction: 0x000043b8
	mdelay (500);
    168c:	00000028 	andeq	r0, r0, r8, lsr #32
    1690:	00000014 	andeq	r0, r0, r4, lsl r0
	setpowermode (2);
    1694:	00001514 	andeq	r1, r0, r4, lsl r5
	__PCB = NULL;
    1698:	000043e0 	andeq	r4, r0, r0, ror #7
	release;
    169c:	00000150 	andeq	r0, r0, r0, asr r1
    16a0:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    16a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    16a8:	0000000c 	andeq	r0, r0, ip
int main (void) {
    16ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16b8:	0000001c 	andeq	r0, r0, ip, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16bc:	000016a8 	andeq	r1, r0, r8, lsr #13
	system_init ();
    16c0:	00000000 	andeq	r0, r0, r0
	tcv_init ();
    16c4:	000000f4 	strdeq	r0, [r0], -r4
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16c8:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    16cc:	86058506 	strhi	r8, [r5], -r6, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    16d0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    16d4:	00018e02 	andeq	r8, r1, r2, lsl #28
    16d8:	00000028 	andeq	r0, r0, r8, lsr #32
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    16dc:	000016a8 	andeq	r1, r0, r8, lsr #13
    16e0:	00004530 	andeq	r4, r0, r0, lsr r5
	delay (16, 0);
    16e4:	00000220 	andeq	r0, r0, r0, lsr #4
    16e8:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    16ec:	86088509 	strhi	r8, [r8], -r9, lsl #10
	__pi_release ();
    16f0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    16f4:	8a048905 	bhi	123b10 <__ccfg+0x103b68>
    16f8:	8e028b03 	vmlahi.f64	d8, d2, d3
    16fc:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
    1700:	00000024 	andeq	r0, r0, r4, lsr #32
    1704:	00000014 	andeq	r0, r0, r4, lsl r0
    1708:	000016a8 	andeq	r1, r0, r8, lsr #13
static void killev (__pi_pcb_t *pid) {
    170c:	00004750 	andeq	r4, r0, r0, asr r7
	wfun = (aword)(pid->code);
    1710:	00000060 	andeq	r0, r0, r0, rrx
	for_all_tasks (i) {
    1714:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		for (j = 0; j < nevents (i); j++) {
    1718:	00018e02 	andeq	r8, r1, r2, lsl #28
    171c:	00000014 	andeq	r0, r0, r4, lsl r0
    1720:	000016a8 	andeq	r1, r0, r8, lsr #13
			    || i->Events [j] . Event == wfun
    1724:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
    1728:	00000078 	andeq	r0, r0, r8, ror r0
			if (i->Events [j] . Event == (aword)pid
    172c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1730:	00018e02 	andeq	r8, r1, r2, lsl #28
    1734:	0000000c 	andeq	r0, r0, ip
				wakeupev (i, j);
    1738:	000016a8 	andeq	r1, r0, r8, lsr #13
    173c:	000047b0 			; <UNDEFINED> instruction: 0x000047b0
	for_all_tasks (i) {
    1740:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1744:	0000000c 	andeq	r0, r0, ip
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
static void qfree (aword *ch) {
    174c:	7c020001 	stcvc	0, cr0, [r2], {1}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1750:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1754:	0000000c 	andeq	r0, r0, ip
	m_setnextp (ch, chunk);
    1758:	00001744 	andeq	r1, r0, r4, asr #14
	m_setnextp (cc, ch);
    175c:	00000000 	andeq	r0, r0, r0
}
    1760:	00000010 	andeq	r0, r0, r0, lsl r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1764:	0000000c 	andeq	r0, r0, ip
    1768:	00001744 	andeq	r1, r0, r4, asr #14
    176c:	00000000 	andeq	r0, r0, r0
			m_setnextp (cc, m_nextp (chunk));
    1770:	00000018 	andeq	r0, r0, r8, lsl r0
			m_size (chunk) += m_hdrlen + m_size (ch);
    1774:	0000000c 	andeq	r0, r0, ip
    1778:	00001744 	andeq	r1, r0, r4, asr #14
    177c:	000047c8 	andeq	r4, r0, r8, asr #15
    1780:	0000004c 	andeq	r0, r0, ip, asr #32
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	00000014 	andeq	r0, r0, r4, lsl r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    1788:	00001744 	andeq	r1, r0, r4, asr #14
    178c:	00000000 	andeq	r0, r0, r0
    1790:	00000030 	andeq	r0, r0, r0, lsr r0
			m_setnextp (cc, m_nextp (chunk));
    1794:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			m_size (ch) += m_hdrlen + m_size (chunk);
    1798:	00018e02 	andeq	r8, r1, r2, lsl #28
    179c:	00000018 	andeq	r0, r0, r8, lsl r0
    17a0:	00001744 	andeq	r1, r0, r4, asr #14
    17a4:	00004814 	andeq	r4, r0, r4, lsl r8
    17a8:	0000006c 	andeq	r0, r0, ip, rrx
    17ac:	83100e41 	tsthi	r0, #1040	; 0x410
			if (m_size (chunk) >= m_size (ch))
    17b0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    17b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    17b8:	00000014 	andeq	r0, r0, r4, lsl r0
		chunk = m_nextp (chunk))
    17bc:	00001744 	andeq	r1, r0, r4, asr #14
    17c0:	00004880 	andeq	r4, r0, r0, lsl #17
    17c4:	00000016 	andeq	r0, r0, r6, lsl r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17c8:	83080e41 	movwhi	r0, #36417	; 0x8e41
	diag_wait (a);
    17cc:	00018e02 	andeq	r8, r1, r2, lsl #28
	diag_wchar (c, a);
    17d0:	0000000c 	andeq	r0, r0, ip
    17d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    17d8:	7c020001 	stcvc	0, cr0, [r2], {1}
    17dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17e0:	00000024 	andeq	r0, r0, r4, lsr #32
	syserror (ESTATE, "state");
    17e4:	000017d0 	ldrdeq	r1, [r0], -r0
    17e8:	00004898 	muleq	r0, r8, r8
    17ec:	00000028 	andeq	r0, r0, r8, lsr #32
	for (i = 0; i < MAX_UTIMERS; i++)
    17f0:	83100e41 	tsthi	r0, #1040	; 0x410
void utimer_add (address ut) {
    17f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    17f8:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
		if (__pi_utims [i] == NULL)
    17fc:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
	for (i = 0; i < MAX_UTIMERS; i++)
    1800:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    1804:	0000000b 	andeq	r0, r0, fp
		syserror (ERESOURCE, "ut a");
    1808:	0000000c 	andeq	r0, r0, ip
	__pi_utims [i] = ut;
    180c:	000017d0 	ldrdeq	r1, [r0], -r0
}
    1810:	000048c0 	andeq	r4, r0, r0, asr #17
    1814:	00000008 	andeq	r0, r0, r8
    1818:	0000000c 	andeq	r0, r0, ip
	*t = v;
    181c:	000017d0 	ldrdeq	r1, [r0], -r0
	TCI_RUN_AUXILIARY_TIMER;
    1820:	00000000 	andeq	r0, r0, r0
void update_n_wake (word min, Boolean force) {
    1824:	00000022 	andeq	r0, r0, r2, lsr #32
	if (TCI_UPDATE_DELAY_TICKS (force))
    1828:	00000018 	andeq	r0, r0, r8, lsl r0
    182c:	000017d0 	ldrdeq	r1, [r0], -r0
    1830:	00000000 	andeq	r0, r0, r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1834:	0000002e 	andeq	r0, r0, lr, lsr #32
    1838:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    183c:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
    1840:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1844:	00000018 	andeq	r0, r0, r8, lsl r0
    1848:	000017d0 	ldrdeq	r1, [r0], -r0
    184c:	00000000 	andeq	r0, r0, r0
    1850:	00000034 	andeq	r0, r0, r4, lsr r0
    1854:	83100e41 	tsthi	r0, #1040	; 0x410
    1858:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    185c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1860:	00000018 	andeq	r0, r0, r8, lsl r0
    1864:	000017d0 	ldrdeq	r1, [r0], -r0
		for_all_tasks (i) {
    1868:	00000000 	andeq	r0, r0, r0
	__pi_mintk = znew + min;
    186c:	00000040 	andeq	r0, r0, r0, asr #32
    1870:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			if (!twaiting (i))
    1874:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1878:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (twakecnd (__pi_old, znew, i->Timer)) {
    187c:	0000000c 	andeq	r0, r0, ip
    1880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1884:	7c020001 	stcvc	0, cr0, [r2], {1}
    1888:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    188c:	00000020 	andeq	r0, r0, r0, lsr #32
    1890:	0000187c 	andeq	r1, r0, ip, ror r8
    1894:	000048c8 	andeq	r4, r0, r8, asr #17
    1898:	000000aa 	andeq	r0, r0, sl, lsr #1
    189c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    18a0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    18a4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    18a8:	180e4201 	stmdane	lr, {r0, r9, lr}
				wakeuptm (i);
    18ac:	00000688 	andeq	r0, r0, r8, lsl #13
    18b0:	0000000c 	andeq	r0, r0, ip
		for_all_tasks (i) {
    18b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				d = i->Timer - znew;
    18b8:	7c020001 	stcvc	0, cr0, [r2], {1}
    18bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18c0:	0000000c 	andeq	r0, r0, ip
		if ((word)(__pi_mintk - znew) < min) 
    18c4:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    18c8:	00004974 	andeq	r4, r0, r4, ror r9
    18cc:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_old = znew;
    18d0:	00000014 	andeq	r0, r0, r4, lsl r0
}
    18d4:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
	TCI_RUN_DELAY_TIMER;
    18d8:	00004988 	andeq	r4, r0, r8, lsl #19
}
    18dc:	00000038 	andeq	r0, r0, r8, lsr r0
    18e0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    18e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    18e8:	0000000c 	andeq	r0, r0, ip
    18ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void proceed (word state) {
    18f0:	7c020001 	stcvc	0, cr0, [r2], {1}
	prcdstate (__pi_curr, state);
    18f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18f8:	00000020 	andeq	r0, r0, r0, lsr #32
	release;
    18fc:	000018e8 	andeq	r1, r0, r8, ror #17
    1900:	000049c0 	andeq	r4, r0, r0, asr #19
void __pi_wait (aword event, word state) {
    1904:	00000054 	andeq	r0, r0, r4, asr r0
	sint j = nevents (__pi_curr);
    1908:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	if (j >= MAX_EVENTS_PER_TASK)
    190c:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1910:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1914:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
		syserror (ENEVENTS, "sw");
    1918:	00000688 	andeq	r0, r0, r8, lsl #13
