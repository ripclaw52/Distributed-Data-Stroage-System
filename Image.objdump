
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000024b9 			; <UNDEFINED> instruction: 0x000024b9
		// Called to issue a wait request
		if (st == WNONE)
       8:	000024b3 			; <UNDEFINED> instruction: 0x000024b3
       c:	000024b5 			; <UNDEFINED> instruction: 0x000024b5
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      14:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
		when (&__input_pins, st);
      18:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      30:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      3c:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      40:	000011d9 	ldrdeq	r1, [r0], -r9
      44:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      48:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
}
      4c:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      50:	00000d99 	muleq	r0, r9, sp
      54:	00001099 	muleq	r0, r9, r0
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
	    pbutton++) {
      5c:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      60:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
	if (!button_still_pressed (__button_list [pbutton]))
      64:	00002ee9 	andeq	r2, r0, r9, ror #29
      68:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      6c:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      70:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      74:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      7c:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      84:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      8c:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      90:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      94:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      98:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
		goto Done;

	if (baction == NULL)
      9c:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      a0:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
		goto Term;

	(*baction) (pbutton);
      a4:	000024b7 			; <UNDEFINED> instruction: 0x000024b7

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      b0:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
endthread
      b4:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      b8:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      bc:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      c0:	000024b7 			; <UNDEFINED> instruction: 0x000024b7
      c4:	000024b7 			; <UNDEFINED> instruction: 0x000024b7

000000c8 <sender>:
	return response_message;

};

// sends packet information to other nodes
fsm sender(struct ResponseMessage *message) {
      c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      ca:	4606      	mov	r6, r0
      cc:	b128      	cbz	r0, da <sender+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d02a      	beq.n	128 <_Min_Stack_Size+0x28>
	state CONFIRM_message:
		// Display message was sent
		ser_out(CONFIRM_message, "Message sent\r\n");
		// Exit out of fsm
		finish;
}
      d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      d6:	f001 bb9d 	b.w	1814 <__pi_badstate>
fsm sender(struct ResponseMessage *message) {
      da:	4b24      	ldr	r3, [pc, #144]	; (16c <_Min_Stack_Size+0x6c>)
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	4924      	ldr	r1, [pc, #144]	; (170 <_Min_Stack_Size+0x70>)
fsm sender(struct ResponseMessage *message) {
      de:	681b      	ldr	r3, [r3, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	2222      	movs	r2, #34	; 0x22
fsm sender(struct ResponseMessage *message) {
      e2:	689d      	ldr	r5, [r3, #8]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f002 f83c 	bl	2164 <tcv_wnps>
      ec:	4604      	mov	r4, r0
		packet[0] = 0;
      ee:	8006      	strh	r6, [r0, #0]
		packet[1] = message->gid;
      f0:	882b      	ldrh	r3, [r5, #0]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f2:	4f20      	ldr	r7, [pc, #128]	; (174 <_Min_Stack_Size+0x74>)
		packet[1] = message->gid;
      f4:	8043      	strh	r3, [r0, #2]
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      f6:	6038      	str	r0, [r7, #0]
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	481f      	ldr	r0, [pc, #124]	; (178 <_Min_Stack_Size+0x78>)
      fa:	f001 fe0d 	bl	1d18 <diag>
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
      fe:	7969      	ldrb	r1, [r5, #5]
     100:	481e      	ldr	r0, [pc, #120]	; (17c <_Min_Stack_Size+0x7c>)
     102:	f001 fe09 	bl	1d18 <diag>
		*p = message->tpe;p++;
     106:	78ab      	ldrb	r3, [r5, #2]
     108:	7123      	strb	r3, [r4, #4]
		*p = message->request_number;p++;
     10a:	78eb      	ldrb	r3, [r5, #3]
     10c:	7163      	strb	r3, [r4, #5]
		*p = message->sender_id;p++;
     10e:	792b      	ldrb	r3, [r5, #4]
     110:	71a3      	strb	r3, [r4, #6]
		*p = message->receiver_id;p++;
     112:	796b      	ldrb	r3, [r5, #5]
     114:	71e3      	strb	r3, [r4, #7]
		switch(message->tpe) {
     116:	78ab      	ldrb	r3, [r5, #2]
     118:	2b04      	cmp	r3, #4
     11a:	d80e      	bhi.n	13a <_Min_Stack_Size+0x3a>
     11c:	2b02      	cmp	r3, #2
     11e:	d820      	bhi.n	162 <_Min_Stack_Size+0x62>
     120:	d017      	beq.n	152 <_Min_Stack_Size+0x52>
		tcv_endp(packet);
     122:	6838      	ldr	r0, [r7, #0]
     124:	f001 ff34 	bl	1f90 <tcv_endp>
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2001      	movs	r0, #1
     12a:	4915      	ldr	r1, [pc, #84]	; (180 <_Min_Stack_Size+0x80>)
     12c:	f002 fa98 	bl	2660 <ser_out>
}
     130:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		finish;
     134:	2000      	movs	r0, #0
     136:	f001 bd4d 	b.w	1bd4 <kill>
     13a:	2b05      	cmp	r3, #5
     13c:	d1f1      	bne.n	122 <_Min_Stack_Size+0x22>
				*p = message->status;p++;
     13e:	79ab      	ldrb	r3, [r5, #6]
				strncpy(p, message->record, sizeof(message->record));
     140:	2214      	movs	r2, #20
				*p = message->status;p++;
     142:	7223      	strb	r3, [r4, #8]
				*p = message->padding;p++;
     144:	79eb      	ldrb	r3, [r5, #7]
				strncpy(p, message->record, sizeof(message->record));
     146:	f105 0108 	add.w	r1, r5, #8
				*p = message->padding;p++;
     14a:	7263      	strb	r3, [r4, #9]
				strncpy(p, message->record, sizeof(message->record));
     14c:	f104 000a 	add.w	r0, r4, #10
     150:	e004      	b.n	15c <_Min_Stack_Size+0x5c>
				strncpy(p, message->record, sizeof(message->record));
     152:	2214      	movs	r2, #20
     154:	f105 0108 	add.w	r1, r5, #8
     158:	f104 0008 	add.w	r0, r4, #8
				strncpy(p, message->record, sizeof(message->record));
     15c:	f001 fc6f 	bl	1a3e <__pi_strncpy>
				break;
     160:	e7df      	b.n	122 <_Min_Stack_Size+0x22>
				*p = message->record_index;p++;
     162:	7f2b      	ldrb	r3, [r5, #28]
     164:	7223      	strb	r3, [r4, #8]
				*p = message->padding;
     166:	79eb      	ldrb	r3, [r5, #7]
     168:	7263      	strb	r3, [r4, #9]
				break;
     16a:	e7da      	b.n	122 <_Min_Stack_Size+0x22>
     16c:	200006d4 	ldrdcs	r0, [r0], -r4
     170:	20000000 	andcs	r0, r0, r0
     174:	2000055c 	andcs	r0, r0, ip, asr r5
     178:	00004a48 	andeq	r4, r0, r8, asr #20
     17c:	00004a5a 	andeq	r4, r0, sl, asr sl
     180:	00004a71 	andeq	r4, r0, r1, ror sl

00000184 <reset_array>:
		node->nnodes[i] = 0;
     184:	2200      	movs	r2, #0
     186:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     18a:	f200 4081 	addw	r0, r0, #1153	; 0x481
     18e:	f803 2b01 	strb.w	r2, [r3], #1
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     192:	4283      	cmp	r3, r0
     194:	d1fb      	bne.n	18e <reset_array+0xa>
}
     196:	4770      	bx	lr

00000198 <init_node>:
bool init_node(struct Node* node){
     198:	b510      	push	{r4, lr}
    node->id  = 0;                  // default id value 0
     19a:	2400      	movs	r4, #0
     19c:	7004      	strb	r4, [r0, #0]
    node->gid = 0;                  // default gid value 0
     19e:	8044      	strh	r4, [r0, #2]
    node->index = 0;                // default entry count 0
     1a0:	f880 4481 	strb.w	r4, [r0, #1153]	; 0x481
    node->data_base.item_count = 0; // default no items in array
     1a4:	f880 4464 	strb.w	r4, [r0, #1124]	; 0x464
	reset_array(node);
     1a8:	f7ff ffec 	bl	184 <reset_array>
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	4802      	ldr	r0, [pc, #8]	; (1b8 <init_node+0x20>)
     1ae:	f001 fdb3 	bl	1d18 <diag>
};
     1b2:	4620      	mov	r0, r4
     1b4:	bd10      	pop	{r4, pc}
     1b6:	bf00      	nop
     1b8:	00004a80 	andeq	r4, r0, r0, lsl #21

000001bc <generate_request_num>:
uint8_t generate_request_num(void){
     1bc:	b508      	push	{r3, lr}
    return (uint8_t) (rand() % 255);
     1be:	f004 fbfd 	bl	49bc <rand>
     1c2:	23ff      	movs	r3, #255	; 0xff
     1c4:	fb90 f3f3 	sdiv	r3, r0, r3
     1c8:	4418      	add	r0, r3
}
     1ca:	b2c0      	uxtb	r0, r0
     1cc:	bd08      	pop	{r3, pc}

000001ce <clear_node_neighbour_array>:
            node->nnodes[i] = 0; // set to null byte
     1ce:	2200      	movs	r2, #0
     1d0:	f500 638d 	add.w	r3, r0, #1128	; 0x468
     1d4:	f200 4081 	addw	r0, r0, #1153	; 0x481
     1d8:	f803 2b01 	strb.w	r2, [r3], #1
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	4283      	cmp	r3, r0
     1de:	d1fb      	bne.n	1d8 <clear_node_neighbour_array+0xa>
};
     1e0:	2001      	movs	r0, #1
     1e2:	4770      	bx	lr

000001e4 <delete_record>:
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	f890 3464 	ldrb.w	r3, [r0, #1124]	; 0x464
     1e8:	b143      	cbz	r3, 1fc <delete_record+0x18>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ea:	221c      	movs	r2, #28
     1ec:	fb02 0101 	mla	r1, r2, r1, r0
     1f0:	2200      	movs	r2, #0
        node->data_base.item_count -= 1;
     1f2:	3b01      	subs	r3, #1
        node->data_base.item_array[index].data_entry[0] = '\0';
     1f4:	714a      	strb	r2, [r1, #5]
        node->data_base.item_array[index].timestamp = 0;
     1f6:	61ca      	str	r2, [r1, #28]
        node->data_base.item_count -= 1;
     1f8:	f880 3464 	strb.w	r3, [r0, #1124]	; 0x464
};
     1fc:	2000      	movs	r0, #0
     1fe:	4770      	bx	lr

00000200 <delete_all>:
bool delete_all(struct Node *node){
     200:	b510      	push	{r4, lr}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     202:	f890 4464 	ldrb.w	r4, [r0, #1124]	; 0x464
     206:	b164      	cbz	r4, 222 <delete_all+0x22>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	2300      	movs	r3, #0
     20a:	4601      	mov	r1, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	461a      	mov	r2, r3
        for(int i = 0; i <= node->data_base.item_count; i++){
     20e:	3301      	adds	r3, #1
     210:	429c      	cmp	r4, r3
            node->data_base.item_array[i].data_entry[0] = '\0';
     212:	714a      	strb	r2, [r1, #5]
            node->data_base.item_array[i].timestamp = 0;
     214:	f841 2f1c 	str.w	r2, [r1, #28]!
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	daf9      	bge.n	20e <delete_all+0xe>
    node->data_base.item_count = 0;
     21a:	f880 2464 	strb.w	r2, [r0, #1124]	; 0x464
    	return false;
     21e:	2000      	movs	r0, #0
}
     220:	bd10      	pop	{r4, pc}
        return true;
     222:	2001      	movs	r0, #1
     224:	e7fc      	b.n	220 <delete_all+0x20>

00000226 <assemble_response_message>:
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     22a:	4680      	mov	r8, r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	201e      	movs	r0, #30
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     22e:	461d      	mov	r5, r3
     230:	460f      	mov	r7, r1
     232:	4616      	mov	r6, r2
     234:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
     238:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	f001 fcf2 	bl	1c24 <__pi_malloc>
	response_message->tpe = RESPONSE;
     240:	2305      	movs	r3, #5
     242:	7083      	strb	r3, [r0, #2]
	response_message->status = status;
     244:	f89d 3020 	ldrb.w	r3, [sp, #32]
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	4604      	mov	r4, r0
	response_message->gid = gid;
     24a:	f8a0 8000 	strh.w	r8, [r0]
	response_message->request_number = request_number;
     24e:	70c7      	strb	r7, [r0, #3]
	response_message->sender_id = sender_id;
     250:	7106      	strb	r6, [r0, #4]
	response_message->receiver_id = receiver_id;
     252:	7145      	strb	r5, [r0, #5]
	response_message->status = status;
     254:	7183      	strb	r3, [r0, #6]
	if (!padding){
     256:	f1ba 0f00 	cmp.w	sl, #0
     25a:	d101      	bne.n	260 <assemble_response_message+0x3a>
		response_message->padding = padding;
     25c:	f880 a007 	strb.w	sl, [r0, #7]
	if (rec != NULL){
     260:	f1b9 0f00 	cmp.w	r9, #0
     264:	d005      	beq.n	272 <assemble_response_message+0x4c>
		strncpy(response_message->record, rec, 20);
     266:	2214      	movs	r2, #20
     268:	4649      	mov	r1, r9
     26a:	f104 0008 	add.w	r0, r4, #8
     26e:	f001 fbe6 	bl	1a3e <__pi_strncpy>
};
     272:	4620      	mov	r0, r4
     274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00000278 <receiver>:

// receives packet information from wireless connected nodes
fsm receiver(struct Node* node_db) {
     278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     27c:	4b90      	ldr	r3, [pc, #576]	; (4c0 <receiver+0x248>)
     27e:	b092      	sub	sp, #72	; 0x48
     280:	681b      	ldr	r3, [r3, #0]
     282:	689c      	ldr	r4, [r3, #8]
     284:	2809      	cmp	r0, #9
     286:	f200 81d2 	bhi.w	62e <receiver+0x3b6>
     28a:	e8df f000 	tbb	[pc, r0]
     28e:	635c0c05 	cmpvs	ip, #1280	; 0x500
     292:	877d716a 	ldrbhi	r7, [sp, -sl, ror #2]!
     296:	4b8a9b91 	blmi	fe2a70e2 <_estack+0xde2a20e2>
	address incoming_packet;
	char array[20];

	state receiving:
		// Get the next packet queued for input at the session (sfd)
		incoming_packet = tcv_rnp(receiving, sfd);
     29a:	2000      	movs	r0, #0
     29c:	6819      	ldr	r1, [r3, #0]
     29e:	f001 ff21 	bl	20e4 <tcv_rnp>
     2a2:	4b89      	ldr	r3, [pc, #548]	; (4c8 <receiver+0x250>)
     2a4:	6018      	str	r0, [r3, #0]
	state ok:
		//uint8_t tpe;
		//uint8_t bytes_read = tcv_read(incoming_packet+3, &tpe, 1); // NOTE: might still be broked'd
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a6:	4d88      	ldr	r5, [pc, #544]	; (4c8 <receiver+0x250>)
     2a8:	4f88      	ldr	r7, [pc, #544]	; (4cc <receiver+0x254>)
     2aa:	682b      	ldr	r3, [r5, #0]
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	4888      	ldr	r0, [pc, #544]	; (4d0 <receiver+0x258>)
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2ae:	1c9a      	adds	r2, r3, #2
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2b0:	7919      	ldrb	r1, [r3, #4]
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2b2:	603a      	str	r2, [r7, #0]
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2b4:	f001 fd30 	bl	1d18 <diag>

		//if (bytes_read != 1){
			//proceed error; //NOTE: NO ERROR STATE
		//};
		// in each switch case where we send a response using call (), we may be able to remove the return state...
		switch (response_message_5->tpe){
     2b8:	683b      	ldr	r3, [r7, #0]
     2ba:	789e      	ldrb	r6, [r3, #2]
     2bc:	2e05      	cmp	r6, #5
     2be:	f200 81b1 	bhi.w	624 <receiver+0x3ac>
     2c2:	e8df f016 	tbh	[pc, r6, lsl #1]
     2c6:	00290006 	eoreq	r0, r9, r6
     2ca:	00bf0088 	adcseq	r0, pc, r8, lsl #1
     2ce:	01710137 	cmneq	r1, r7, lsr r1
			
			Because this is one of the scenarios where the packets are the same we can send back the packet with any required modifications
			*/
			case DISCOVERY_REQUEST: ;
				// respondng with this
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d2:	201e      	movs	r0, #30
     2d4:	f001 fca6 	bl	1c24 <__pi_malloc>
				// receiving this
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("\r\nRECEIVED REQ NUM: %u", discovery_request_message->request_number);
				DEBUG_PRINT("\r\nRECEIVED SID: %u", discovery_request_message->sender_id);
				DEBUG_PRINT("\r\nRECEIVED RID: %u", discovery_request_message->receiver_id);
				DEBUG_PRINT("\r\ndiscover gid: %u\r\nNode gid:%u", discovery_request_message->gid, node_db->gid);*/
				// if the group_ids match
				if (discovery_request_message->gid == node_db->gid){
     2da:	8863      	ldrh	r3, [r4, #2]
     2dc:	886a      	ldrh	r2, [r5, #2]
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2de:	4606      	mov	r6, r0
				if (discovery_request_message->gid == node_db->gid){
     2e0:	429a      	cmp	r2, r3
     2e2:	d130      	bne.n	346 <receiver+0xce>
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	487b      	ldr	r0, [pc, #492]	; (4d4 <receiver+0x25c>)
     2e6:	f001 fd17 	bl	1d18 <diag>
					response_message_0->gid = discovery_request_message->gid;
     2ea:	886b      	ldrh	r3, [r5, #2]
					response_message_0->request_number = discovery_request_message->request_number;
					response_message_0->sender_id = node_db->id;
					response_message_0->receiver_id = discovery_request_message->sender_id;

					// NOTE: return_from_sender might be optional, in which case it should just return to here and then break
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	4879      	ldr	r0, [pc, #484]	; (4d4 <receiver+0x25c>)
					response_message_0->gid = discovery_request_message->gid;
     2ee:	8033      	strh	r3, [r6, #0]
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	2301      	movs	r3, #1
     2f2:	70b3      	strb	r3, [r6, #2]
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	796b      	ldrb	r3, [r5, #5]
     2f6:	70f3      	strb	r3, [r6, #3]
					response_message_0->sender_id = node_db->id;
     2f8:	7823      	ldrb	r3, [r4, #0]
     2fa:	7133      	strb	r3, [r6, #4]
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	79ab      	ldrb	r3, [r5, #6]
     2fe:	7173      	strb	r3, [r6, #5]
					DEBUG_PRINT("\r\nSending to sender");
     300:	f001 fd0a 	bl	1d18 <diag>
					call sender(response_message_0, done_case);
     304:	4631      	mov	r1, r6
     306:	4874      	ldr	r0, [pc, #464]	; (4d8 <receiver+0x260>)
     308:	f001 fce0 	bl	1ccc <__pi_fork>
     30c:	2102      	movs	r1, #2
     30e:	f001 fb47 	bl	19a0 <__pi_join>
     312:	b1c0      	cbz	r0, 346 <receiver+0xce>
     314:	f001 f8a0 	bl	1458 <__pi_release>

			Based on the specifications, there is no response when this kind of message is received.
			*/
			case DISCOVERY_RESPONSE: ;
				// receiving this, no response.
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	6829      	ldr	r1, [r5, #0]
				DEBUG_PRINT("RECEIVED TYPE: %d\n", response_message_1->tpe);
				DEBUG_PRINT("RECEIVED REQ NUM: %d\n", response_message_1->request_number);
				DEBUG_PRINT("RECEIVED SID: %d\n", response_message_1->sender_id);
				DEBUG_PRINT("RECEIVED RID: %d\n", response_message_1->receiver_id);
*/
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31a:	8862      	ldrh	r2, [r4, #2]
     31c:	884b      	ldrh	r3, [r1, #2]
     31e:	429a      	cmp	r2, r3
     320:	f894 3481 	ldrb.w	r3, [r4, #1153]	; 0x481
     324:	d103      	bne.n	32e <receiver+0xb6>
     326:	798a      	ldrb	r2, [r1, #6]
     328:	1e50      	subs	r0, r2, #1
     32a:	2817      	cmp	r0, #23
     32c:	d902      	bls.n	334 <receiver+0xbc>
     32e:	18e2      	adds	r2, r4, r3
     330:	f892 2468 	ldrb.w	r2, [r2, #1128]	; 0x468
     334:	18e0      	adds	r0, r4, r3
     336:	f880 2468 	strb.w	r2, [r0, #1128]	; 0x468
				// increment the index if the insertion succeeded.
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33a:	7989      	ldrb	r1, [r1, #6]
     33c:	4291      	cmp	r1, r2
     33e:	d102      	bne.n	346 <receiver+0xce>
					node_db->index+=1;
     340:	3301      	adds	r3, #1
     342:	f884 3481 	strb.w	r3, [r4, #1153]	; 0x481
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
				break;

		};
	state done_case:
		tcv_endp(incoming_packet);
     346:	4b60      	ldr	r3, [pc, #384]	; (4c8 <receiver+0x250>)
     348:	6818      	ldr	r0, [r3, #0]
     34a:	f001 fe21 	bl	1f90 <tcv_endp>
		proceed receiving;
     34e:	2000      	movs	r0, #0
     350:	f001 fae8 	bl	1924 <proceed>
	
	// Succeeded in performing requested action
	state response_1_create:
		ser_out(response_1_create, "\r\nData Saved");
     354:	2003      	movs	r0, #3
     356:	4961      	ldr	r1, [pc, #388]	; (4dc <receiver+0x264>)
     358:	f002 f982 	bl	2660 <ser_out>
		proceed receiving;
     35c:	2000      	movs	r0, #0
     35e:	f001 fae1 	bl	1924 <proceed>
	state response_1_delete:
		ser_out(response_1_delete, "\r\nRecord Deleted");
     362:	2004      	movs	r0, #4
     364:	495e      	ldr	r1, [pc, #376]	; (4e0 <receiver+0x268>)
     366:	f002 f97b 	bl	2660 <ser_out>
		proceed receiving;
     36a:	2000      	movs	r0, #0
     36c:	f001 fada 	bl	1924 <proceed>
	state response_1_retrieve:
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	4b56      	ldr	r3, [pc, #344]	; (4cc <receiver+0x254>)
     372:	2005      	movs	r0, #5
     374:	681a      	ldr	r2, [r3, #0]
     376:	495b      	ldr	r1, [pc, #364]	; (4e4 <receiver+0x26c>)
     378:	f102 0308 	add.w	r3, r2, #8
     37c:	7912      	ldrb	r2, [r2, #4]
     37e:	f002 f9e1 	bl	2744 <ser_outf>
		proceed receiving;
     382:	2000      	movs	r0, #0
     384:	f001 face 	bl	1924 <proceed>
	
	// Failed to perform requests action
	state response_2:
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	4b50      	ldr	r3, [pc, #320]	; (4cc <receiver+0x254>)
     38a:	2006      	movs	r0, #6
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	4956      	ldr	r1, [pc, #344]	; (4e8 <receiver+0x270>)
     390:	791a      	ldrb	r2, [r3, #4]
     392:	f002 f9d7 	bl	2744 <ser_outf>
		proceed receiving;
     396:	2000      	movs	r0, #0
     398:	f001 fac4 	bl	1924 <proceed>
	state response_3:
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	4b4b      	ldr	r3, [pc, #300]	; (4cc <receiver+0x254>)
     39e:	2007      	movs	r0, #7
     3a0:	681b      	ldr	r3, [r3, #0]
     3a2:	4952      	ldr	r1, [pc, #328]	; (4ec <receiver+0x274>)
     3a4:	791a      	ldrb	r2, [r3, #4]
     3a6:	f002 f9cd 	bl	2744 <ser_outf>
		proceed receiving;
     3aa:	2000      	movs	r0, #0
     3ac:	f001 faba 	bl	1924 <proceed>
	state response_4:
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	4b46      	ldr	r3, [pc, #280]	; (4cc <receiver+0x254>)
     3b2:	2008      	movs	r0, #8
     3b4:	681b      	ldr	r3, [r3, #0]
     3b6:	494e      	ldr	r1, [pc, #312]	; (4f0 <receiver+0x278>)
     3b8:	791a      	ldrb	r2, [r3, #4]
     3ba:	f002 f9c3 	bl	2744 <ser_outf>
		proceed receiving;
     3be:	2000      	movs	r0, #0
     3c0:	f001 fab0 	bl	1924 <proceed>

	// likely want to respond with error message
	state error:
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	484b      	ldr	r0, [pc, #300]	; (4f4 <receiver+0x27c>)
     3c6:	f001 fca7 	bl	1d18 <diag>
		// handle error
		// retry?
		proceed receiving;
     3ca:	2000      	movs	r0, #0
     3cc:	f001 faaa 	bl	1924 <proceed>
		
}
     3d0:	b012      	add	sp, #72	; 0x48
     3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d6:	201e      	movs	r0, #30
     3d8:	f001 fc24 	bl	1c24 <__pi_malloc>
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	682d      	ldr	r5, [r5, #0]
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3de:	7823      	ldrb	r3, [r4, #0]
     3e0:	79ea      	ldrb	r2, [r5, #7]
     3e2:	429a      	cmp	r2, r3
     3e4:	d103      	bne.n	3ee <receiver+0x176>
     3e6:	886a      	ldrh	r2, [r5, #2]
     3e8:	8863      	ldrh	r3, [r4, #2]
     3ea:	429a      	cmp	r2, r3
     3ec:	d003      	beq.n	3f6 <receiver+0x17e>
					DEBUG_PRINT("\r\nCreate rec we broke");
     3ee:	4842      	ldr	r0, [pc, #264]	; (4f8 <receiver+0x280>)
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	f001 fc92 	bl	1d18 <diag>
					break;
     3f4:	e7a7      	b.n	346 <receiver+0xce>
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f6:	2114      	movs	r1, #20
     3f8:	4840      	ldr	r0, [pc, #256]	; (4fc <receiver+0x284>)
     3fa:	f001 fc8d 	bl	1d18 <diag>
					DEBUG_PRINT("\r\nCreate rec second if");
     3fe:	4840      	ldr	r0, [pc, #256]	; (500 <receiver+0x288>)
     400:	f001 fc8a 	bl	1d18 <diag>
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	f894 3464 	ldrb.w	r3, [r4, #1124]	; 0x464
     408:	2b28      	cmp	r3, #40	; 0x28
     40a:	d017      	beq.n	43c <receiver+0x1c4>
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	483d      	ldr	r0, [pc, #244]	; (504 <receiver+0x28c>)
     40e:	f001 fc83 	bl	1d18 <diag>
						status = (uint8_t) SUCCESS;
     412:	2601      	movs	r6, #1
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	483c      	ldr	r0, [pc, #240]	; (508 <receiver+0x290>)
     416:	f001 fc7f 	bl	1d18 <diag>
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41a:	7822      	ldrb	r2, [r4, #0]
     41c:	8860      	ldrh	r0, [r4, #2]
     41e:	4c3b      	ldr	r4, [pc, #236]	; (50c <receiver+0x294>)
     420:	7969      	ldrb	r1, [r5, #5]
     422:	79eb      	ldrb	r3, [r5, #7]
     424:	9402      	str	r4, [sp, #8]
     426:	2400      	movs	r4, #0
     428:	e9cd 6400 	strd	r6, r4, [sp]
     42c:	f7ff fefb 	bl	226 <assemble_response_message>
     430:	4604      	mov	r4, r0
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     432:	4837      	ldr	r0, [pc, #220]	; (510 <receiver+0x298>)
     434:	f001 fc70 	bl	1d18 <diag>
					call sender(response_message_2, done_case);
     438:	4621      	mov	r1, r4
     43a:	e764      	b.n	306 <receiver+0x8e>
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	4835      	ldr	r0, [pc, #212]	; (514 <receiver+0x29c>)
     43e:	f001 fc6b 	bl	1d18 <diag>
						status = (uint8_t) DB_FULL;
     442:	e7e7      	b.n	414 <receiver+0x19c>
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	201e      	movs	r0, #30
     446:	f001 fbed 	bl	1c24 <__pi_malloc>
				DEBUG_PRINT("\r\nDelete rec");/*
     44a:	4833      	ldr	r0, [pc, #204]	; (518 <receiver+0x2a0>)
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	682d      	ldr	r5, [r5, #0]
				DEBUG_PRINT("\r\nDelete rec");/*
     44e:	f001 fc63 	bl	1d18 <diag>
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     452:	7820      	ldrb	r0, [r4, #0]
     454:	79eb      	ldrb	r3, [r5, #7]
     456:	8862      	ldrh	r2, [r4, #2]
     458:	8869      	ldrh	r1, [r5, #2]
     45a:	9000      	str	r0, [sp, #0]
     45c:	482f      	ldr	r0, [pc, #188]	; (51c <receiver+0x2a4>)
     45e:	f001 fc5b 	bl	1d18 <diag>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     462:	886a      	ldrh	r2, [r5, #2]
     464:	8863      	ldrh	r3, [r4, #2]
     466:	429a      	cmp	r2, r3
     468:	d103      	bne.n	472 <receiver+0x1fa>
     46a:	79ea      	ldrb	r2, [r5, #7]
     46c:	7823      	ldrb	r3, [r4, #0]
     46e:	429a      	cmp	r2, r3
     470:	d001      	beq.n	476 <receiver+0x1fe>
					DEBUG_PRINT("\r\nDelete rec first if");
     472:	482b      	ldr	r0, [pc, #172]	; (520 <receiver+0x2a8>)
     474:	e7bc      	b.n	3f0 <receiver+0x178>
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     476:	7a2b      	ldrb	r3, [r5, #8]
     478:	2b28      	cmp	r3, #40	; 0x28
     47a:	f63f af64 	bhi.w	346 <receiver+0xce>
					DEBUG_PRINT("\r\nDelete rec second if");
     47e:	4829      	ldr	r0, [pc, #164]	; (524 <receiver+0x2ac>)
     480:	f001 fc4a 	bl	1d18 <diag>
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	4620      	mov	r0, r4
     486:	7a29      	ldrb	r1, [r5, #8]
     488:	f7ff feac 	bl	1e4 <delete_record>
     48c:	b198      	cbz	r0, 4b6 <receiver+0x23e>
						DEBUG_PRINT("\r\nDelete rec third if");
     48e:	4826      	ldr	r0, [pc, #152]	; (528 <receiver+0x2b0>)
     490:	f001 fc42 	bl	1d18 <diag>
						status = (uint8_t) SUCCESS;
     494:	2601      	movs	r6, #1
					DEBUG_PRINT("\r\nDelete assemble le response");
     496:	4825      	ldr	r0, [pc, #148]	; (52c <receiver+0x2b4>)
     498:	f001 fc3e 	bl	1d18 <diag>
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	7822      	ldrb	r2, [r4, #0]
     49e:	8860      	ldrh	r0, [r4, #2]
     4a0:	4c1a      	ldr	r4, [pc, #104]	; (50c <receiver+0x294>)
     4a2:	79eb      	ldrb	r3, [r5, #7]
     4a4:	7969      	ldrb	r1, [r5, #5]
     4a6:	9402      	str	r4, [sp, #8]
     4a8:	2400      	movs	r4, #0
     4aa:	e9cd 6400 	strd	r6, r4, [sp]
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4ae:	f7ff feba 	bl	226 <assemble_response_message>
     4b2:	4601      	mov	r1, r0
     4b4:	e727      	b.n	306 <receiver+0x8e>
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b6:	481e      	ldr	r0, [pc, #120]	; (530 <receiver+0x2b8>)
     4b8:	f001 fc2e 	bl	1d18 <diag>
     4bc:	e7eb      	b.n	496 <receiver+0x21e>
     4be:	bf00      	nop
     4c0:	200006d4 	ldrdcs	r0, [r0], -r4
     4c4:	20000000 	andcs	r0, r0, r0
     4c8:	20000558 	andcs	r0, r0, r8, asr r5
     4cc:	20000564 	andcs	r0, r0, r4, ror #10
     4d0:	00004a9c 	muleq	r0, ip, sl
     4d4:	00004aa6 	andeq	r4, r0, r6, lsr #21
     4d8:	000000c9 	andeq	r0, r0, r9, asr #1
     4dc:	00004c98 	muleq	r0, r8, ip
     4e0:	00004ca5 	andeq	r4, r0, r5, lsr #25
     4e4:	00004cb6 			; <UNDEFINED> instruction: 0x00004cb6
     4e8:	00004cd4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
     4ec:	00004cfb 	strdeq	r4, [r0], -fp
     4f0:	00004d23 	andeq	r4, r0, r3, lsr #26
     4f4:	00004d4a 	andeq	r4, r0, sl, asr #26
     4f8:	00004aba 			; <UNDEFINED> instruction: 0x00004aba
     4fc:	00004ad0 	ldrdeq	r4, [r0], -r0
     500:	00004afc 	strdeq	r4, [r0], -ip
     504:	00004b13 	andeq	r4, r0, r3, lsl fp
     508:	00004b41 	andeq	r4, r0, r1, asr #22
     50c:	20000540 	andcs	r0, r0, r0, asr #10
     510:	00004b55 	andeq	r4, r0, r5, asr fp
     514:	00004b29 	andeq	r4, r0, r9, lsr #22
     518:	00004b74 	andeq	r4, r0, r4, ror fp
     51c:	00004b81 	andeq	r4, r0, r1, lsl #23
     520:	00004bd3 	ldrdeq	r4, [r0], -r3
     524:	00004be9 	andeq	r4, r0, r9, ror #23
     528:	00004c00 	andeq	r4, r0, r0, lsl #24
     52c:	00004c2d 	andeq	r4, r0, sp, lsr #24
     530:	00004c16 	andeq	r4, r0, r6, lsl ip
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	201e      	movs	r0, #30
     536:	f001 fb75 	bl	1c24 <__pi_malloc>
				DEBUG_PRINT("\r\nretrieve rec");
     53a:	483e      	ldr	r0, [pc, #248]	; (634 <receiver+0x3bc>)
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	f8d5 8000 	ldr.w	r8, [r5]
				DEBUG_PRINT("\r\nretrieve rec");
     540:	f001 fbea 	bl	1d18 <diag>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	2300      	movs	r3, #0
     546:	881a      	ldrh	r2, [r3, #0]
     548:	8863      	ldrh	r3, [r4, #2]
     54a:	429a      	cmp	r2, r3
     54c:	f47f aefb 	bne.w	346 <receiver+0xce>
     550:	2300      	movs	r3, #0
     552:	795a      	ldrb	r2, [r3, #5]
     554:	7823      	ldrb	r3, [r4, #0]
     556:	429a      	cmp	r2, r3
     558:	f47f aef5 	bne.w	346 <receiver+0xce>
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	f898 5008 	ldrb.w	r5, [r8, #8]
     560:	2d28      	cmp	r5, #40	; 0x28
     562:	f63f aef0 	bhi.w	346 <receiver+0xce>
    return node->data_base.item_array[index];
     566:	231c      	movs	r3, #28
     568:	fb03 4505 	mla	r5, r3, r5, r4
     56c:	ae0b      	add	r6, sp, #44	; 0x2c
     56e:	3504      	adds	r5, #4
     570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     572:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	af0b      	add	r7, sp, #44	; 0x2c
     57a:	ad04      	add	r5, sp, #16
    return node->data_base.item_array[index];
     57c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     584:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     588:	e885 0007 	stmia.w	r5, {r0, r1, r2}
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	7822      	ldrb	r2, [r4, #0]
     58e:	8860      	ldrh	r0, [r4, #2]
     590:	f10d 0411 	add.w	r4, sp, #17
     594:	2500      	movs	r5, #0
     596:	f898 3007 	ldrb.w	r3, [r8, #7]
     59a:	f898 1005 	ldrb.w	r1, [r8, #5]
     59e:	9402      	str	r4, [sp, #8]
     5a0:	2401      	movs	r4, #1
     5a2:	e9cd 4500 	strd	r4, r5, [sp]
     5a6:	e782      	b.n	4ae <receiver+0x236>
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	682b      	ldr	r3, [r5, #0]
				DEBUG_PRINT("\r\nResponse");
     5aa:	4823      	ldr	r0, [pc, #140]	; (638 <receiver+0x3c0>)
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5ac:	3302      	adds	r3, #2
     5ae:	603b      	str	r3, [r7, #0]
				DEBUG_PRINT("\r\nResponse");
     5b0:	f001 fbb2 	bl	1d18 <diag>
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	683b      	ldr	r3, [r7, #0]
     5b6:	8862      	ldrh	r2, [r4, #2]
     5b8:	8819      	ldrh	r1, [r3, #0]
     5ba:	4291      	cmp	r1, r2
     5bc:	f47f aec3 	bne.w	346 <receiver+0xce>
     5c0:	795a      	ldrb	r2, [r3, #5]
     5c2:	7823      	ldrb	r3, [r4, #0]
     5c4:	429a      	cmp	r2, r3
     5c6:	f47f aebe 	bne.w	346 <receiver+0xce>
				if(!response_flag){
     5ca:	481c      	ldr	r0, [pc, #112]	; (63c <receiver+0x3c4>)
     5cc:	8803      	ldrh	r3, [r0, #0]
     5ce:	b91b      	cbnz	r3, 5d8 <receiver+0x360>
					response_flag=1;
     5d0:	2301      	movs	r3, #1
     5d2:	8003      	strh	r3, [r0, #0]
					trigger(&response_flag);
     5d4:	f001 f9ca 	bl	196c <__pi_trigger>
				switch(response_message_5->status){
     5d8:	683a      	ldr	r2, [r7, #0]
     5da:	7993      	ldrb	r3, [r2, #6]
     5dc:	3b01      	subs	r3, #1
     5de:	2b03      	cmp	r3, #3
     5e0:	f63f aeb1 	bhi.w	346 <receiver+0xce>
     5e4:	e8df f003 	tbb	[pc, r3]
     5e8:	1c1a1802 	ldcne	8, cr1, [sl], {2}
						if (response_checker[0] == response_message_5->request_number){
     5ec:	4b14      	ldr	r3, [pc, #80]	; (640 <receiver+0x3c8>)
     5ee:	78d2      	ldrb	r2, [r2, #3]
     5f0:	6819      	ldr	r1, [r3, #0]
     5f2:	4291      	cmp	r1, r2
     5f4:	f47f aea7 	bne.w	346 <receiver+0xce>
							switch(response_checker[1]){
     5f8:	685b      	ldr	r3, [r3, #4]
     5fa:	2b03      	cmp	r3, #3
     5fc:	d008      	beq.n	610 <receiver+0x398>
     5fe:	2b04      	cmp	r3, #4
     600:	d008      	beq.n	614 <receiver+0x39c>
     602:	2b02      	cmp	r3, #2
     604:	f47f ae9f 	bne.w	346 <receiver+0xce>
									proceed response_1_create;
     608:	2003      	movs	r0, #3
						proceed response_2;
     60a:	f001 f98b 	bl	1924 <proceed>
						break;
     60e:	e69a      	b.n	346 <receiver+0xce>
									proceed response_1_delete;
     610:	2004      	movs	r0, #4
     612:	e7fa      	b.n	60a <receiver+0x392>
									proceed response_1_retrieve;
     614:	2005      	movs	r0, #5
     616:	e7f8      	b.n	60a <receiver+0x392>
						proceed response_2;
     618:	2006      	movs	r0, #6
     61a:	e7f6      	b.n	60a <receiver+0x392>
						proceed response_3;
     61c:	2007      	movs	r0, #7
     61e:	e7f4      	b.n	60a <receiver+0x392>
						proceed response_4;
     620:	2008      	movs	r0, #8
     622:	e7f2      	b.n	60a <receiver+0x392>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	4631      	mov	r1, r6
     626:	4807      	ldr	r0, [pc, #28]	; (644 <receiver+0x3cc>)
     628:	f001 fb76 	bl	1d18 <diag>
				break;
     62c:	e68b      	b.n	346 <receiver+0xce>
}
     62e:	f001 f8f1 	bl	1814 <__pi_badstate>
     632:	e6cd      	b.n	3d0 <receiver+0x158>
     634:	00004c4b 	andeq	r4, r0, fp, asr #24
     638:	00004c5a 	andeq	r4, r0, sl, asr ip
     63c:	20000560 	andcs	r0, r0, r0, ror #10
     640:	20000660 	andcs	r0, r0, r0, ror #12
     644:	00004c65 	andeq	r4, r0, r5, ror #24

00000648 <root>:

fsm root {
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	b085      	sub	sp, #20
     64c:	2820      	cmp	r0, #32
     64e:	f200 829d 	bhi.w	b8c <root+0x544>
     652:	e8df f010 	tbh	[pc, r0, lsl #1]
     656:	00480021 	subeq	r0, r8, r1, lsr #32
     65a:	00770055 	rsbseq	r0, r7, r5, asr r0
     65e:	008c007b 	addeq	r0, ip, fp, ror r0
     662:	00b30090 	umlalseq	r0, r3, r0, r0
     666:	00cb00be 	strheq	r0, [fp], #14
     66a:	013b0104 	teqeq	fp, r4, lsl #2
     66e:	0153014f 	cmpeq	r3, pc, asr #2
     672:	01690165 	cmneq	r9, r5, ror #2
     676:	0196016e 	orrseq	r0, r6, lr, ror #2
     67a:	01ac019a 			; <UNDEFINED> instruction: 0x01ac019a
     67e:	01c101b0 	strheq	r0, [r1, #16]
     682:	01e901e5 	mvneq	r0, r5, ror #3
     686:	01ff01fb 	ldrsheq	r0, [pc, #27]	; 6a9 <root+0x61>
     68a:	02400210 	subeq	r0, r0, #16, 4
     68e:	02510244 	subseq	r0, r1, #68, 4	; 0x40000004
     692:	028a0258 	addeq	r0, sl, #88, 4	; 0x80000005
     696:	f2400291 	vqsub.s8	d16, d16, d1

	
	state initialize_node:
		// cast node_db to struct node * and malloc to it the size of a struct node
		// setup node structure
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     69a:	4084      	lsls	r4, r0
     69c:	f001 fac2 	bl	1c24 <__pi_malloc>
     6a0:	4c77      	ldr	r4, [pc, #476]	; (880 <root+0x238>)
     6a2:	6020      	str	r0, [r4, #0]

		// Bool condition, check for failure
		init_node(node_db);
     6a4:	f7ff fd78 	bl	198 <init_node>

		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	21fa      	movs	r1, #250	; 0xfa
     6aa:	2000      	movs	r0, #0
     6ac:	f002 fc54 	bl	2f58 <phys_cc1350>
				  the null plugin offers only a single session per physical interface. This session is explicitly 
				  setup (opened) through tcv_open().

			See docs section 3 pg11/20 for the struct of this plugin
		*/
		tcv_plug (0, &plug_null);
     6b0:	4974      	ldr	r1, [pc, #464]	; (884 <root+0x23c>)
     6b2:	2000      	movs	r0, #0
     6b4:	f001 fd04 	bl	20c0 <tcv_plug>
		   the abbreviation "sfd"). A return of -1 means an Error has occured.

		   NOTE: the maxmium number of sessions that can be open at any time is default 8. We can redfine this in
		   options.h by setting TCV_MAX_DESC to something higher.
		*/
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	2200      	movs	r2, #0
     6ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
     6be:	4611      	mov	r1, r2
     6c0:	f001 fc9e 	bl	2000 <tcv_open>
     6c4:	4a70      	ldr	r2, [pc, #448]	; (888 <root+0x240>)

		if (sfd < 0) {
     6c6:	2800      	cmp	r0, #0
		sfd = tcv_open (WNONE, 0, 0);
     6c8:	6010      	str	r0, [r2, #0]
		if (sfd < 0) {
     6ca:	da04      	bge.n	6d6 <root+0x8e>
			diag("Cannot open tcv interface");
     6cc:	486f      	ldr	r0, [pc, #444]	; (88c <root+0x244>)
     6ce:	f001 fb23 	bl	1d18 <diag>
			halt();
     6d2:	f000 ffed 	bl	16b0 <halt>

		  This function is referenced only twice in the docs. To my understainding, it determines if the
		  sfd is interpreted as a plugin id or a physical module. 
		
		*/
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d6:	2104      	movs	r1, #4
     6d8:	2200      	movs	r2, #0
     6da:	f001 fdb7 	bl	224c <tcv_control>

		runfsm receiver(node_db);
     6de:	6821      	ldr	r1, [r4, #0]
     6e0:	486b      	ldr	r0, [pc, #428]	; (890 <root+0x248>)
     6e2:	f001 faf3 	bl	1ccc <__pi_fork>

	state menu:
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e6:	2028      	movs	r0, #40	; 0x28
     6e8:	4b65      	ldr	r3, [pc, #404]	; (880 <root+0x238>)
     6ea:	6819      	ldr	r1, [r3, #0]
     6ec:	780b      	ldrb	r3, [r1, #0]
     6ee:	884a      	ldrh	r2, [r1, #2]
     6f0:	9001      	str	r0, [sp, #4]
     6f2:	f891 1481 	ldrb.w	r1, [r1, #1153]	; 0x481
     6f6:	2001      	movs	r0, #1
     6f8:	9100      	str	r1, [sp, #0]
     6fa:	4966      	ldr	r1, [pc, #408]	; (894 <root+0x24c>)
     6fc:	f002 f822 	bl	2744 <ser_outf>

	state get_choice:
		ser_inf(get_choice, "%c", &CHOICE);
     700:	4c65      	ldr	r4, [pc, #404]	; (898 <root+0x250>)
     702:	2002      	movs	r0, #2
     704:	4622      	mov	r2, r4
     706:	4965      	ldr	r1, [pc, #404]	; (89c <root+0x254>)
     708:	f002 f846 	bl	2798 <ser_inf>
		switch(CHOICE) {
     70c:	7823      	ldrb	r3, [r4, #0]
     70e:	2b53      	cmp	r3, #83	; 0x53
     710:	d80f      	bhi.n	732 <root+0xea>
     712:	2b42      	cmp	r3, #66	; 0x42
     714:	d911      	bls.n	73a <root+0xf2>
     716:	3b43      	subs	r3, #67	; 0x43
     718:	2b10      	cmp	r3, #16
     71a:	d80e      	bhi.n	73a <root+0xf2>
     71c:	e8df f003 	tbb	[pc, r3]
     720:	838d8785 	orrhi	r8, sp, #34865152	; 0x2140000
     724:	0d0d0d0f 	stceq	13, cr0, [sp, #-60]	; 0xffffffc4
     728:	810d0d0d 	tsthi	sp, sp, lsl #26
     72c:	890d0d0d 	stmdbhi	sp, {r0, r2, r3, r8, sl, fp}
     730:	3b63008b 	blcc	18c0964 <__ccfg+0x18a09bc>
     734:	b2da      	uxtb	r2, r3
     736:	2a10      	cmp	r2, #16
     738:	d9ee      	bls.n	718 <root+0xd0>
			case 'e':
			case 'E':
				proceed del_local;
				break;
			default:
				proceed menu;
     73a:	2001      	movs	r0, #1
     73c:	e000      	b.n	740 <root+0xf8>
				proceed get_new_group_id;
     73e:	2003      	movs	r0, #3
				proceed menu;
     740:	f001 f8f0 	bl	1924 <proceed>
				break;
		}

	state get_new_group_id:
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	2003      	movs	r0, #3
     746:	4956      	ldr	r1, [pc, #344]	; (8a0 <root+0x258>)
     748:	f001 ff8a 	bl	2660 <ser_out>

	/*NOTE: Do we need to add new checks here? what are the limitations on group IDs*/
	state new_group_id:
		uint16_t NEW_NODE_GID;
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	f10d 020e 	add.w	r2, sp, #14
     750:	4954      	ldr	r1, [pc, #336]	; (8a4 <root+0x25c>)
     752:	2004      	movs	r0, #4
     754:	f002 f820 	bl	2798 <ser_inf>
		
		DEBUG_PRINT("setting node group ID");
     758:	4853      	ldr	r0, [pc, #332]	; (8a8 <root+0x260>)
     75a:	f001 fadd 	bl	1d18 <diag>

		if (!set_node_gid(node_db, NEW_NODE_GID)){
     75e:	4b48      	ldr	r3, [pc, #288]	; (880 <root+0x238>)
    node->gid = gid; 
     760:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     764:	681b      	ldr	r3, [r3, #0]
			DEBUG_PRINT("setting node group ID failed");
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};

		proceed menu;
     766:	2001      	movs	r0, #1
    node->gid = gid; 
     768:	805a      	strh	r2, [r3, #2]
		proceed menu;
     76a:	f001 f8db 	bl	1924 <proceed>

	state get_new_node_id:
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     76e:	2005      	movs	r0, #5
     770:	494e      	ldr	r1, [pc, #312]	; (8ac <root+0x264>)
     772:	f001 ff75 	bl	2660 <ser_out>
	state new_node_id:
		uint8_t NEW_NODE_ID;
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);

		// Bool condition, check for failure
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     776:	4d42      	ldr	r5, [pc, #264]	; (880 <root+0x238>)
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	494a      	ldr	r1, [pc, #296]	; (8a4 <root+0x25c>)
     77a:	f10d 020e 	add.w	r2, sp, #14
     77e:	2006      	movs	r0, #6
     780:	f002 f80a 	bl	2798 <ser_inf>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     784:	682a      	ldr	r2, [r5, #0]
     786:	f89d 100e 	ldrb.w	r1, [sp, #14]
    node->id = id;
     78a:	7011      	strb	r1, [r2, #0]
			strncpy(reason, "Error setting node ID", 50);
			proceed invalid_node_id;
		};
		
		// Check to see if the number given is within range.
		if((node_db->id < 1) || (node_db->id > 25)){
     78c:	682a      	ldr	r2, [r5, #0]
     78e:	7812      	ldrb	r2, [r2, #0]
     790:	3a01      	subs	r2, #1
     792:	2a18      	cmp	r2, #24
     794:	d907      	bls.n	7a6 <root+0x15e>
			strncpy(reason, "Out of Range", 50);
     796:	4846      	ldr	r0, [pc, #280]	; (8b0 <root+0x268>)
     798:	2232      	movs	r2, #50	; 0x32
     79a:	4946      	ldr	r1, [pc, #280]	; (8b4 <root+0x26c>)
     79c:	f001 f94f 	bl	1a3e <__pi_strncpy>
			proceed invalid_node_id;
     7a0:	2007      	movs	r0, #7
     7a2:	f001 f8bf 	bl	1924 <proceed>
fsm root {
     7a6:	2400      	movs	r4, #0
		};
		
		// Check to see if the number give is unique
		for(int i = 0; i < node_db->index; i++){
			if(node_db->id == node_db->nnodes[i]){
				strncpy(reason, "ID is already in use", 50);
     7a8:	4e43      	ldr	r6, [pc, #268]	; (8b8 <root+0x270>)
     7aa:	4f41      	ldr	r7, [pc, #260]	; (8b0 <root+0x268>)
		for(int i = 0; i < node_db->index; i++){
     7ac:	682b      	ldr	r3, [r5, #0]
     7ae:	f893 2481 	ldrb.w	r2, [r3, #1153]	; 0x481
     7b2:	42a2      	cmp	r2, r4
     7b4:	dc43      	bgt.n	83e <root+0x1f6>
				proceed invalid_node_id;
			};
		};
		
		proceed menu;
     7b6:	2001      	movs	r0, #1
     7b8:	f001 f8b4 	bl	1924 <proceed>

	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state invalid_node_id:
		// NOTE: node_db->id will not be set if they provide an invalid reason, so we can't do this like this
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7bc:	4b30      	ldr	r3, [pc, #192]	; (880 <root+0x238>)
     7be:	2007      	movs	r0, #7
     7c0:	681a      	ldr	r2, [r3, #0]
     7c2:	493e      	ldr	r1, [pc, #248]	; (8bc <root+0x274>)
     7c4:	4b3a      	ldr	r3, [pc, #232]	; (8b0 <root+0x268>)
     7c6:	7812      	ldrb	r2, [r2, #0]
     7c8:	f001 ffbc 	bl	2744 <ser_outf>
		proceed get_new_node_id;
     7cc:	2005      	movs	r0, #5
     7ce:	f001 f8a9 	bl	1924 <proceed>
		   
	  Then prints the list of neighbours
	
	*/
	state clear_neighbour_array:
		if (!clear_node_neighbour_array(node_db)){
     7d2:	4b2b      	ldr	r3, [pc, #172]	; (880 <root+0x238>)
     7d4:	6818      	ldr	r0, [r3, #0]
     7d6:	f7ff fcfa 	bl	1ce <clear_node_neighbour_array>
     7da:	b938      	cbnz	r0, 7ec <root+0x1a4>
			strncpy(reason, "Error Clearing Node Array", 50);
     7dc:	4834      	ldr	r0, [pc, #208]	; (8b0 <root+0x268>)
     7de:	2232      	movs	r2, #50	; 0x32
     7e0:	4937      	ldr	r1, [pc, #220]	; (8c0 <root+0x278>)
     7e2:	f001 f92c 	bl	1a3e <__pi_strncpy>
			proceed error;
     7e6:	2020      	movs	r0, #32
     7e8:	f001 f89c 	bl	1924 <proceed>
		};

	state find_proto_start:

		struct ResponseMessage *request_packet;
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7ec:	201e      	movs	r0, #30
     7ee:	f001 fa19 	bl	1c24 <__pi_malloc>

		request_packet->gid = node_db->gid;
		request_packet->tpe = DISCOVERY_REQUEST;
     7f2:	2500      	movs	r5, #0
		request_packet->gid = node_db->gid;
     7f4:	4e22      	ldr	r6, [pc, #136]	; (880 <root+0x238>)
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7f6:	4604      	mov	r4, r0
		request_packet->gid = node_db->gid;
     7f8:	6833      	ldr	r3, [r6, #0]
     7fa:	885b      	ldrh	r3, [r3, #2]
		request_packet->tpe = DISCOVERY_REQUEST;
     7fc:	7085      	strb	r5, [r0, #2]
		request_packet->gid = node_db->gid;
     7fe:	8003      	strh	r3, [r0, #0]
		request_packet->request_number = generate_request_num();
     800:	f7ff fcdc 	bl	1bc <generate_request_num>
     804:	70e0      	strb	r0, [r4, #3]
		request_packet->sender_id = node_db->id;
     806:	6833      	ldr	r3, [r6, #0]
		request_packet->receiver_id=0;

		call sender(request_packet, wait_discovery);
     808:	4621      	mov	r1, r4
		request_packet->sender_id = node_db->id;
     80a:	781b      	ldrb	r3, [r3, #0]
		call sender(request_packet, wait_discovery);
     80c:	482d      	ldr	r0, [pc, #180]	; (8c4 <root+0x27c>)
		request_packet->sender_id = node_db->id;
     80e:	7123      	strb	r3, [r4, #4]
		request_packet->receiver_id=0;
     810:	7165      	strb	r5, [r4, #5]
		call sender(request_packet, wait_discovery);
     812:	f001 fa5b 	bl	1ccc <__pi_fork>
     816:	210a      	movs	r1, #10
     818:	f001 f8c2 	bl	19a0 <__pi_join>
     81c:	b1f8      	cbz	r0, 85e <root+0x216>
	
	state wait_discovery:
		if (discovery_wait_flag == 0){
			discovery_wait_flag=1;
			delay(3000, find_proto_start);
			release;
     81e:	f000 fe1b 	bl	1458 <__pi_release>
				proceed get_new_node_id;
     822:	2005      	movs	r0, #5
     824:	e78c      	b.n	740 <root+0xf8>
				proceed clear_neighbour_array;
     826:	2008      	movs	r0, #8
     828:	e78a      	b.n	740 <root+0xf8>
				proceed create_proto_start;
     82a:	200c      	movs	r0, #12
     82c:	e788      	b.n	740 <root+0xf8>
				proceed start_delete_proto;
     82e:	2011      	movs	r0, #17
     830:	e786      	b.n	740 <root+0xf8>
				proceed start_retrieve_proto;
     832:	2016      	movs	r0, #22
     834:	e784      	b.n	740 <root+0xf8>
				proceed display_db;
     836:	201b      	movs	r0, #27
     838:	e782      	b.n	740 <root+0xf8>
				proceed del_local;
     83a:	201d      	movs	r0, #29
     83c:	e780      	b.n	740 <root+0xf8>
			if(node_db->id == node_db->nnodes[i]){
     83e:	1919      	adds	r1, r3, r4
     840:	781a      	ldrb	r2, [r3, #0]
     842:	f891 3468 	ldrb.w	r3, [r1, #1128]	; 0x468
     846:	429a      	cmp	r2, r3
     848:	d107      	bne.n	85a <root+0x212>
				strncpy(reason, "ID is already in use", 50);
     84a:	4638      	mov	r0, r7
     84c:	2232      	movs	r2, #50	; 0x32
     84e:	4631      	mov	r1, r6
     850:	f001 f8f5 	bl	1a3e <__pi_strncpy>
				proceed invalid_node_id;
     854:	2007      	movs	r0, #7
     856:	f001 f865 	bl	1924 <proceed>
		for(int i = 0; i < node_db->index; i++){
     85a:	3401      	adds	r4, #1
     85c:	e7a6      	b.n	7ac <root+0x164>
		if (discovery_wait_flag == 0){
     85e:	4b1a      	ldr	r3, [pc, #104]	; (8c8 <root+0x280>)
     860:	681a      	ldr	r2, [r3, #0]
     862:	b93a      	cbnz	r2, 874 <root+0x22c>
			discovery_wait_flag=1;
     864:	2201      	movs	r2, #1
			delay(3000, find_proto_start);
     866:	2109      	movs	r1, #9
			discovery_wait_flag=1;
     868:	601a      	str	r2, [r3, #0]
			delay(3000, find_proto_start);
     86a:	f640 30b8 	movw	r0, #3000	; 0xbb8
     86e:	f001 f8a9 	bl	19c4 <delay>
     872:	e7d4      	b.n	81e <root+0x1d6>
		}
		if (discovery_wait_flag == 1){
     874:	2a01      	cmp	r2, #1
     876:	d129      	bne.n	8cc <root+0x284>
			discovery_wait_flag=0;
     878:	2200      	movs	r2, #0
			delay(3000, display_neighbour_nodes);
     87a:	210b      	movs	r1, #11
			discovery_wait_flag=0;
     87c:	601a      	str	r2, [r3, #0]
			delay(3000, display_neighbour_nodes);
     87e:	e7f4      	b.n	86a <root+0x222>
     880:	200006a0 	andcs	r0, r0, r0, lsr #13
     884:	00005c20 	andeq	r5, r0, r0, lsr #24
     888:	20000000 	andcs	r0, r0, r0
     88c:	00004d7f 	andeq	r4, r0, pc, ror sp
     890:	00000279 	andeq	r0, r0, r9, ror r2
     894:	00004d99 	muleq	r0, r9, sp
     898:	2000069d 	mulcs	r0, sp, r6
     89c:	00004e85 	andeq	r4, r0, r5, lsl #29
     8a0:	00004e88 	andeq	r4, r0, r8, lsl #29
     8a4:	00004ea9 	andeq	r4, r0, r9, lsr #29
     8a8:	00004eac 	andeq	r4, r0, ip, lsr #29
     8ac:	00004ec2 	andeq	r4, r0, r2, asr #29
     8b0:	20000668 	andcs	r0, r0, r8, ror #12
     8b4:	00004ef5 	strdeq	r4, [r0], -r5
     8b8:	00004f02 	andeq	r4, r0, r2, lsl #30
     8bc:	00004f17 	andeq	r4, r0, r7, lsl pc
     8c0:	00004f44 	andeq	r4, r0, r4, asr #30
     8c4:	000000c9 	andeq	r0, r0, r9, asr #1
     8c8:	20000554 	andcs	r0, r0, r4, asr r5
			release;
		}
	
	state display_neighbour_nodes:
		if(node_db->index == 0){
     8cc:	4db1      	ldr	r5, [pc, #708]	; (b94 <root+0x54c>)
     8ce:	682b      	ldr	r3, [r5, #0]
     8d0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
     8d4:	b913      	cbnz	r3, 8dc <root+0x294>
			proceed menu;
     8d6:	2001      	movs	r0, #1
     8d8:	f001 f824 	bl	1924 <proceed>
fsm root {
     8dc:	2400      	movs	r4, #0
		}
		for (int i=0; i<node_db->index; i++) {
			if(i == 0){
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     8de:	4eae      	ldr	r6, [pc, #696]	; (b98 <root+0x550>)
			}
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e0:	4fae      	ldr	r7, [pc, #696]	; (b9c <root+0x554>)
		for (int i=0; i<node_db->index; i++) {
     8e2:	682b      	ldr	r3, [r5, #0]
     8e4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
     8e8:	42a3      	cmp	r3, r4
     8ea:	f300 8116 	bgt.w	b1a <root+0x4d2>
		}
		proceed menu;
     8ee:	2001      	movs	r0, #1
     8f0:	f001 f818 	bl	1924 <proceed>
		4) if no repsone is received, the node indicates this to the user through UART
		5) if a response is received, the node sends through UART the appropriate response message
	
	*/
	state create_proto_start:
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     8f4:	200c      	movs	r0, #12
     8f6:	49aa      	ldr	r1, [pc, #680]	; (ba0 <root+0x558>)
     8f8:	f001 feb2 	bl	2660 <ser_out>

	state get_id_for_create:
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     8fc:	4ca9      	ldr	r4, [pc, #676]	; (ba4 <root+0x55c>)
     8fe:	200d      	movs	r0, #13
     900:	4622      	mov	r2, r4
     902:	49a9      	ldr	r1, [pc, #676]	; (ba8 <root+0x560>)
     904:	f001 ff48 	bl	2798 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     908:	7823      	ldrb	r3, [r4, #0]
     90a:	3b01      	subs	r3, #1
     90c:	2b18      	cmp	r3, #24
     90e:	d907      	bls.n	920 <root+0x2d8>
			strncpy(reason, "Error: improper ID", 50);
     910:	48a6      	ldr	r0, [pc, #664]	; (bac <root+0x564>)
     912:	2232      	movs	r2, #50	; 0x32
     914:	49a6      	ldr	r1, [pc, #664]	; (bb0 <root+0x568>)
     916:	f001 f892 	bl	1a3e <__pi_strncpy>
			proceed error;
     91a:	2020      	movs	r0, #32
     91c:	f001 f802 	bl	1924 <proceed>
		};

	state ask_for_record_to_create:
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     920:	200e      	movs	r0, #14
     922:	49a4      	ldr	r1, [pc, #656]	; (bb4 <root+0x56c>)
     924:	f001 fe9c 	bl	2660 <ser_out>

	state get_record_to_create:
		ser_in(get_record_to_create, user_provided_record, 20);
     928:	2214      	movs	r2, #20
     92a:	200f      	movs	r0, #15
     92c:	49a2      	ldr	r1, [pc, #648]	; (bb8 <root+0x570>)
     92e:	f001 fecd 	bl	26cc <ser_in>

	state init_create_record_message:

		struct ResponseMessage *create_message;
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     932:	201e      	movs	r0, #30
     934:	f001 f976 	bl	1c24 <__pi_malloc>
		create_message->gid = node_db->gid;
     938:	4d96      	ldr	r5, [pc, #600]	; (b94 <root+0x54c>)
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     93a:	4604      	mov	r4, r0
		create_message->gid = node_db->gid;
     93c:	682b      	ldr	r3, [r5, #0]
     93e:	885b      	ldrh	r3, [r3, #2]
     940:	8003      	strh	r3, [r0, #0]
		create_message->tpe = CREATE_RECORD;
     942:	2302      	movs	r3, #2
     944:	7083      	strb	r3, [r0, #2]
		create_message->request_number = generate_request_num();
     946:	f7ff fc39 	bl	1bc <generate_request_num>
     94a:	70e0      	strb	r0, [r4, #3]
		create_message->sender_id = node_db->id;
     94c:	682b      	ldr	r3, [r5, #0]
		create_message->receiver_id = user_provided_receiver_id;
		strncpy(create_message->record, user_provided_record, 20);
     94e:	2214      	movs	r2, #20
		create_message->sender_id = node_db->id;
     950:	781b      	ldrb	r3, [r3, #0]
		strncpy(create_message->record, user_provided_record, 20);
     952:	4999      	ldr	r1, [pc, #612]	; (bb8 <root+0x570>)
		create_message->sender_id = node_db->id;
     954:	7123      	strb	r3, [r4, #4]
		create_message->receiver_id = user_provided_receiver_id;
     956:	4b93      	ldr	r3, [pc, #588]	; (ba4 <root+0x55c>)
		strncpy(create_message->record, user_provided_record, 20);
     958:	f104 0008 	add.w	r0, r4, #8
		create_message->receiver_id = user_provided_receiver_id;
     95c:	781b      	ldrb	r3, [r3, #0]
     95e:	7163      	strb	r3, [r4, #5]
		strncpy(create_message->record, user_provided_record, 20);
     960:	f001 f86d 	bl	1a3e <__pi_strncpy>
		
		// Store create message type & request number for response message parsing
		response_checker[0] = create_message->request_number;
     964:	78e2      	ldrb	r2, [r4, #3]
     966:	4b95      	ldr	r3, [pc, #596]	; (bbc <root+0x574>)
		response_checker[1] = create_message->tpe;

		call sender(create_message, wait);
     968:	4621      	mov	r1, r4
		response_checker[0] = create_message->request_number;
     96a:	601a      	str	r2, [r3, #0]
		response_checker[1] = create_message->tpe;
     96c:	78a2      	ldrb	r2, [r4, #2]
		call sender(create_message, wait);
     96e:	4894      	ldr	r0, [pc, #592]	; (bc0 <root+0x578>)
		response_checker[1] = create_message->tpe;
     970:	605a      	str	r2, [r3, #4]
		call sender(create_message, wait);
     972:	f001 f9ab 	bl	1ccc <__pi_fork>
     976:	211e      	movs	r1, #30
     978:	f001 f812 	bl	19a0 <__pi_join>
     97c:	2800      	cmp	r0, #0
     97e:	f47f af4e 	bne.w	81e <root+0x1d6>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_delete_proto:
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     982:	2011      	movs	r0, #17
     984:	4986      	ldr	r1, [pc, #536]	; (ba0 <root+0x558>)
     986:	f001 fe6b 	bl	2660 <ser_out>

	state get_id_for_delete:
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     98a:	4c86      	ldr	r4, [pc, #536]	; (ba4 <root+0x55c>)
     98c:	2012      	movs	r0, #18
     98e:	4622      	mov	r2, r4
     990:	4985      	ldr	r1, [pc, #532]	; (ba8 <root+0x560>)
     992:	f001 ff01 	bl	2798 <ser_inf>

		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     996:	7823      	ldrb	r3, [r4, #0]
     998:	3b01      	subs	r3, #1
     99a:	2b18      	cmp	r3, #24
     99c:	d907      	bls.n	9ae <root+0x366>
			strncpy(reason, "Error: improper node ID", 50);
     99e:	4883      	ldr	r0, [pc, #524]	; (bac <root+0x564>)
     9a0:	2232      	movs	r2, #50	; 0x32
     9a2:	4988      	ldr	r1, [pc, #544]	; (bc4 <root+0x57c>)
     9a4:	f001 f84b 	bl	1a3e <__pi_strncpy>
			proceed error;
     9a8:	2020      	movs	r0, #32
     9aa:	f000 ffbb 	bl	1924 <proceed>
		};

	state ask_for_record_index:
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9ae:	2013      	movs	r0, #19
     9b0:	4985      	ldr	r1, [pc, #532]	; (bc8 <root+0x580>)
     9b2:	f001 fe55 	bl	2660 <ser_out>

	state get_index_for_delete:
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9b6:	4c85      	ldr	r4, [pc, #532]	; (bcc <root+0x584>)
     9b8:	2014      	movs	r0, #20
     9ba:	4622      	mov	r2, r4
     9bc:	497a      	ldr	r1, [pc, #488]	; (ba8 <root+0x560>)
     9be:	f001 feeb 	bl	2798 <ser_inf>

		if (us_pr_in < 0 || us_pr_in > 40){
     9c2:	7823      	ldrb	r3, [r4, #0]
     9c4:	2b28      	cmp	r3, #40	; 0x28
     9c6:	d907      	bls.n	9d8 <root+0x390>
			strncpy(reason, "Error: invalid index", 50);
     9c8:	4878      	ldr	r0, [pc, #480]	; (bac <root+0x564>)
     9ca:	2232      	movs	r2, #50	; 0x32
     9cc:	4980      	ldr	r1, [pc, #512]	; (bd0 <root+0x588>)
     9ce:	f001 f836 	bl	1a3e <__pi_strncpy>
			proceed error;
     9d2:	2020      	movs	r0, #32
     9d4:	f000 ffa6 	bl	1924 <proceed>
		};

	state init_delete_record_message:

		struct ResponseMessage *delete_record;
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9d8:	201e      	movs	r0, #30
     9da:	f001 f923 	bl	1c24 <__pi_malloc>
		delete_record->gid = node_db->gid;
     9de:	4d6d      	ldr	r5, [pc, #436]	; (b94 <root+0x54c>)
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9e0:	4604      	mov	r4, r0
		delete_record->gid = node_db->gid;
     9e2:	682b      	ldr	r3, [r5, #0]
     9e4:	885b      	ldrh	r3, [r3, #2]
     9e6:	8003      	strh	r3, [r0, #0]
		delete_record->tpe = DELETE_RECORD;
     9e8:	2303      	movs	r3, #3
     9ea:	7083      	strb	r3, [r0, #2]
		delete_record->request_number = generate_request_num();
     9ec:	f7ff fbe6 	bl	1bc <generate_request_num>
     9f0:	70e0      	strb	r0, [r4, #3]
		delete_record->sender_id = node_db->id;
     9f2:	682b      	ldr	r3, [r5, #0]

		// Store delete record message type & request number for response message parsing
		response_checker[0] = delete_record->request_number;
		response_checker[1] = delete_record->tpe;

		call sender(delete_record, wait);
     9f4:	4621      	mov	r1, r4
		delete_record->sender_id = node_db->id;
     9f6:	781b      	ldrb	r3, [r3, #0]
     9f8:	7123      	strb	r3, [r4, #4]
		delete_record->receiver_id = user_provided_receiver_id;
     9fa:	4b6a      	ldr	r3, [pc, #424]	; (ba4 <root+0x55c>)
     9fc:	781b      	ldrb	r3, [r3, #0]
     9fe:	7163      	strb	r3, [r4, #5]
		delete_record->record_index = us_pr_in;
     a00:	4b72      	ldr	r3, [pc, #456]	; (bcc <root+0x584>)
     a02:	781b      	ldrb	r3, [r3, #0]
     a04:	7723      	strb	r3, [r4, #28]
		response_checker[0] = delete_record->request_number;
     a06:	4b6d      	ldr	r3, [pc, #436]	; (bbc <root+0x574>)
     a08:	6018      	str	r0, [r3, #0]
		response_checker[1] = delete_record->tpe;
     a0a:	78a2      	ldrb	r2, [r4, #2]
		call sender(delete_record, wait);
     a0c:	486c      	ldr	r0, [pc, #432]	; (bc0 <root+0x578>)
		response_checker[1] = delete_record->tpe;
     a0e:	605a      	str	r2, [r3, #4]
		call sender(delete_record, wait);
     a10:	f001 f95c 	bl	1ccc <__pi_fork>
     a14:	211e      	movs	r1, #30
     a16:	f000 ffc3 	bl	19a0 <__pi_join>
     a1a:	2800      	cmp	r0, #0
     a1c:	f47f aeff 	bne.w	81e <root+0x1d6>
		3.The node then waits to receive the response message with a maximum waiting interval of 3 seconds 
		4.If no response is received, the node sends the following message through the UART “\r\nFailed to reach the destination”
		5.
	*/
	state start_retrieve_proto:
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a20:	2016      	movs	r0, #22
     a22:	495f      	ldr	r1, [pc, #380]	; (ba0 <root+0x558>)
     a24:	f001 fe1c 	bl	2660 <ser_out>

	state get_id_for_retrieve:
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a28:	4c6a      	ldr	r4, [pc, #424]	; (bd4 <root+0x58c>)
     a2a:	2017      	movs	r0, #23
     a2c:	4622      	mov	r2, r4
     a2e:	495e      	ldr	r1, [pc, #376]	; (ba8 <root+0x560>)
     a30:	f001 feb2 	bl	2798 <ser_inf>

		if (get_id < 1 || get_id > 25){
     a34:	7823      	ldrb	r3, [r4, #0]
     a36:	3b01      	subs	r3, #1
     a38:	2b18      	cmp	r3, #24
     a3a:	d907      	bls.n	a4c <root+0x404>
			strncpy(reason, "Error: improper node ID", 50);
     a3c:	485b      	ldr	r0, [pc, #364]	; (bac <root+0x564>)
     a3e:	2232      	movs	r2, #50	; 0x32
     a40:	4960      	ldr	r1, [pc, #384]	; (bc4 <root+0x57c>)
     a42:	f000 fffc 	bl	1a3e <__pi_strncpy>
			proceed error;
     a46:	2020      	movs	r0, #32
     a48:	f000 ff6c 	bl	1924 <proceed>
		};

	state ask_for_record_retrieve_index:
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a4c:	2018      	movs	r0, #24
     a4e:	495e      	ldr	r1, [pc, #376]	; (bc8 <root+0x580>)
     a50:	f001 fe06 	bl	2660 <ser_out>

	state get_index_for_retrieve:
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a54:	4c60      	ldr	r4, [pc, #384]	; (bd8 <root+0x590>)
     a56:	2019      	movs	r0, #25
     a58:	4622      	mov	r2, r4
     a5a:	4960      	ldr	r1, [pc, #384]	; (bdc <root+0x594>)
     a5c:	f001 fe9c 	bl	2798 <ser_inf>

		if (beg_for_index < 0 || beg_for_index > 40){
     a60:	7823      	ldrb	r3, [r4, #0]
     a62:	2b28      	cmp	r3, #40	; 0x28
     a64:	d907      	bls.n	a76 <root+0x42e>
			strncpy(reason, "Error: invalid index", 50);
     a66:	4851      	ldr	r0, [pc, #324]	; (bac <root+0x564>)
     a68:	2232      	movs	r2, #50	; 0x32
     a6a:	4959      	ldr	r1, [pc, #356]	; (bd0 <root+0x588>)
     a6c:	f000 ffe7 	bl	1a3e <__pi_strncpy>
			proceed error;
     a70:	2020      	movs	r0, #32
     a72:	f000 ff57 	bl	1924 <proceed>
		};

	state retrieve_proto:

		DEBUG_PRINT("\r\nret ID: %d", get_id);
     a76:	4d57      	ldr	r5, [pc, #348]	; (bd4 <root+0x58c>)
     a78:	4859      	ldr	r0, [pc, #356]	; (be0 <root+0x598>)
     a7a:	7829      	ldrb	r1, [r5, #0]
     a7c:	f001 f94c 	bl	1d18 <diag>

		struct ResponseMessage *retrieve_record;
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a80:	201e      	movs	r0, #30
     a82:	f001 f8cf 	bl	1c24 <__pi_malloc>
		retrieve_record->gid = node_db->gid;
     a86:	4e43      	ldr	r6, [pc, #268]	; (b94 <root+0x54c>)
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a88:	4604      	mov	r4, r0
		retrieve_record->gid = node_db->gid;
     a8a:	6833      	ldr	r3, [r6, #0]
     a8c:	885b      	ldrh	r3, [r3, #2]
     a8e:	8003      	strh	r3, [r0, #0]
		retrieve_record->tpe = RETRIEVE_RECORD;
     a90:	2304      	movs	r3, #4
     a92:	7083      	strb	r3, [r0, #2]
		retrieve_record->request_number = generate_request_num();
     a94:	f7ff fb92 	bl	1bc <generate_request_num>
     a98:	70e0      	strb	r0, [r4, #3]
		retrieve_record->sender_id = node_db->id;
     a9a:	6833      	ldr	r3, [r6, #0]
		retrieve_record->receiver_id = get_id;
     a9c:	7829      	ldrb	r1, [r5, #0]
		retrieve_record->sender_id = node_db->id;
     a9e:	781b      	ldrb	r3, [r3, #0]
		retrieve_record->record_index = beg_for_index;
		// NOTE: something to do with padding here?
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aa0:	484f      	ldr	r0, [pc, #316]	; (be0 <root+0x598>)
		retrieve_record->sender_id = node_db->id;
     aa2:	7123      	strb	r3, [r4, #4]
		retrieve_record->record_index = beg_for_index;
     aa4:	4b4c      	ldr	r3, [pc, #304]	; (bd8 <root+0x590>)
		retrieve_record->receiver_id = get_id;
     aa6:	7161      	strb	r1, [r4, #5]
		retrieve_record->record_index = beg_for_index;
     aa8:	781b      	ldrb	r3, [r3, #0]
     aaa:	7723      	strb	r3, [r4, #28]
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aac:	f001 f934 	bl	1d18 <diag>
		// Store retrieve record message type & request number for response message parsing
		response_checker[0] = retrieve_record->request_number;
     ab0:	4b42      	ldr	r3, [pc, #264]	; (bbc <root+0x574>)
     ab2:	78e2      	ldrb	r2, [r4, #3]
		response_checker[1] = retrieve_record->tpe;
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     ab4:	484a      	ldr	r0, [pc, #296]	; (be0 <root+0x598>)
		response_checker[0] = retrieve_record->request_number;
     ab6:	601a      	str	r2, [r3, #0]
		response_checker[1] = retrieve_record->tpe;
     ab8:	78a2      	ldrb	r2, [r4, #2]
     aba:	605a      	str	r2, [r3, #4]
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     abc:	7961      	ldrb	r1, [r4, #5]
     abe:	f001 f92b 	bl	1d18 <diag>
		
		call sender(retrieve_record, wait);
     ac2:	4621      	mov	r1, r4
     ac4:	483e      	ldr	r0, [pc, #248]	; (bc0 <root+0x578>)
     ac6:	f001 f901 	bl	1ccc <__pi_fork>
     aca:	211e      	movs	r1, #30
     acc:	f000 ff68 	bl	19a0 <__pi_join>
     ad0:	2800      	cmp	r0, #0
     ad2:	f47f aea4 	bne.w	81e <root+0x1d6>
		
	state display_db:
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad6:	201b      	movs	r0, #27
     ad8:	4942      	ldr	r1, [pc, #264]	; (be4 <root+0x59c>)
     ada:	f001 fdc1 	bl	2660 <ser_out>
		
	state loop_through_data:
		if(node_db->data_base.item_count != 0){
     ade:	4d2d      	ldr	r5, [pc, #180]	; (b94 <root+0x54c>)
     ae0:	682a      	ldr	r2, [r5, #0]
     ae2:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
     ae6:	2a00      	cmp	r2, #0
     ae8:	d13b      	bne.n	b62 <root+0x51a>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
			}
		}
		ser_out(loop_through_data, "\r\n");
     aea:	201c      	movs	r0, #28
     aec:	493e      	ldr	r1, [pc, #248]	; (be8 <root+0x5a0>)
     aee:	f001 fdb7 	bl	2660 <ser_out>
		proceed menu;
     af2:	2001      	movs	r0, #1
     af4:	f000 ff16 	bl	1924 <proceed>

	state del_local:
		delete_all(node_db);
     af8:	4b26      	ldr	r3, [pc, #152]	; (b94 <root+0x54c>)
     afa:	6818      	ldr	r0, [r3, #0]
     afc:	f7ff fb80 	bl	200 <delete_all>
		proceed menu;
     b00:	2001      	movs	r0, #1
     b02:	f000 ff0f 	bl	1924 <proceed>

	state wait:
		delay(3000, timeout);
     b06:	211f      	movs	r1, #31
     b08:	f640 30b8 	movw	r0, #3000	; 0xbb8
     b0c:	f000 ff5a 	bl	19c4 <delay>
		when(&response_flag, menu);
     b10:	2101      	movs	r1, #1
     b12:	4836      	ldr	r0, [pc, #216]	; (bec <root+0x5a4>)
     b14:	f000 ff10 	bl	1938 <__pi_wait>
		release;
     b18:	e681      	b.n	81e <root+0x1d6>
			if(i == 0){
     b1a:	b91c      	cbnz	r4, b24 <root+0x4dc>
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b1c:	4631      	mov	r1, r6
     b1e:	200b      	movs	r0, #11
     b20:	f001 fd9e 	bl	2660 <ser_out>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b24:	682b      	ldr	r3, [r5, #0]
     b26:	4639      	mov	r1, r7
     b28:	4423      	add	r3, r4
     b2a:	200b      	movs	r0, #11
     b2c:	f893 2468 	ldrb.w	r2, [r3, #1128]	; 0x468
     b30:	f001 fe08 	bl	2744 <ser_outf>
		for (int i=0; i<node_db->index; i++) {
     b34:	3401      	adds	r4, #1
     b36:	e6d4      	b.n	8e2 <root+0x29a>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b38:	fb06 f204 	mul.w	r2, r6, r4
     b3c:	1898      	adds	r0, r3, r2
     b3e:	3205      	adds	r2, #5
     b40:	4413      	add	r3, r2
     b42:	9301      	str	r3, [sp, #4]
     b44:	7903      	ldrb	r3, [r0, #4]
     b46:	4622      	mov	r2, r4
     b48:	9300      	str	r3, [sp, #0]
     b4a:	69c3      	ldr	r3, [r0, #28]
     b4c:	4639      	mov	r1, r7
     b4e:	201c      	movs	r0, #28
     b50:	f001 fdf8 	bl	2744 <ser_outf>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b54:	3401      	adds	r4, #1
     b56:	682b      	ldr	r3, [r5, #0]
     b58:	f893 2464 	ldrb.w	r2, [r3, #1124]	; 0x464
     b5c:	42a2      	cmp	r2, r4
     b5e:	daeb      	bge.n	b38 <root+0x4f0>
     b60:	e7c3      	b.n	aea <root+0x4a2>
     b62:	2400      	movs	r4, #0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b64:	261c      	movs	r6, #28
     b66:	4f22      	ldr	r7, [pc, #136]	; (bf0 <root+0x5a8>)
     b68:	e7f5      	b.n	b56 <root+0x50e>
	
	state timeout:
		ser_out(timeout, "\r\nFailed to reach the destination");
     b6a:	201f      	movs	r0, #31
     b6c:	4921      	ldr	r1, [pc, #132]	; (bf4 <root+0x5ac>)
     b6e:	f001 fd77 	bl	2660 <ser_out>
		proceed menu;
     b72:	2001      	movs	r0, #1
     b74:	f000 fed6 	bl	1924 <proceed>
	
	// NOTE: to prevent unwanted behaviour, we will likely want to clear the array in here
	state error:
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b78:	2007      	movs	r0, #7
     b7a:	4a0c      	ldr	r2, [pc, #48]	; (bac <root+0x564>)
     b7c:	491e      	ldr	r1, [pc, #120]	; (bf8 <root+0x5b0>)
     b7e:	f001 fde1 	bl	2744 <ser_outf>
		proceed menu;
     b82:	2001      	movs	r0, #1
     b84:	f000 fece 	bl	1924 <proceed>
}
     b88:	b005      	add	sp, #20
     b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b8c:	f000 fe42 	bl	1814 <__pi_badstate>
     b90:	e7fa      	b.n	b88 <root+0x540>
     b92:	bf00      	nop
     b94:	200006a0 	andcs	r0, r0, r0, lsr #13
     b98:	00004f5e 	andeq	r4, r0, lr, asr pc
     b9c:	00004f6c 	andeq	r4, r0, ip, ror #30
     ba0:	00004f71 	andeq	r4, r0, r1, ror pc
     ba4:	2000069e 	mulcs	r0, lr, r6
     ba8:	000052a7 	andeq	r5, r0, r7, lsr #5
     bac:	20000668 	andcs	r0, r0, r8, ror #12
     bb0:	00004f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
     bb4:	00004fa6 	andeq	r4, r0, r6, lsr #31
     bb8:	20000648 	andcs	r0, r0, r8, asr #12
     bbc:	20000660 	andcs	r0, r0, r0, ror #12
     bc0:	000000c9 	andeq	r0, r0, r9, asr #1
     bc4:	00004fcf 	andeq	r4, r0, pc, asr #31
     bc8:	00004fe7 	andeq	r4, r0, r7, ror #31
     bcc:	2000065c 	andcs	r0, r0, ip, asr r6
     bd0:	00005010 	andeq	r5, r0, r0, lsl r0
     bd4:	2000069a 	mulcs	r0, sl, r6
     bd8:	2000069b 	mulcs	r0, fp, r6
     bdc:	00004ea9 	andeq	r4, r0, r9, lsr #29
     be0:	00005025 	andeq	r5, r0, r5, lsr #32
     be4:	00005032 	andeq	r5, r0, r2, lsr r0
     be8:	00004a7d 	andeq	r4, r0, sp, ror sl
     bec:	20000560 	andcs	r0, r0, r0, ror #10
     bf0:	0000505b 	andeq	r5, r0, fp, asr r0
     bf4:	0000506b 	andeq	r5, r0, fp, rrx
     bf8:	0000508d 	andeq	r5, r0, sp, lsl #1

00000bfc <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     bfc:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     bfe:	4801      	ldr	r0, [pc, #4]	; (c04 <devinit_uart+0x8>)
     c00:	f000 bf3c 	b.w	1a7c <adddevfunc>
     c04:	00000f89 	andeq	r0, r0, r9, lsl #31

00000c08 <udelay>:
void udelay (volatile word n) {
     c08:	b082      	sub	sp, #8
     c0a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     c0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c12:	b29b      	uxth	r3, r3
     c14:	b90b      	cbnz	r3, c1a <udelay+0x12>
}
     c16:	b002      	add	sp, #8
     c18:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     c1a:	2304      	movs	r3, #4
	while (n--);
     c1c:	461a      	mov	r2, r3
     c1e:	3b01      	subs	r3, #1
     c20:	b29b      	uxth	r3, r3
     c22:	2a00      	cmp	r2, #0
     c24:	d1fa      	bne.n	c1c <udelay+0x14>
		n--;
     c26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c2a:	3b01      	subs	r3, #1
     c2c:	b29b      	uxth	r3, r3
     c2e:	f8ad 3006 	strh.w	r3, [sp, #6]
     c32:	e7ec      	b.n	c0e <udelay+0x6>

00000c34 <mdelay>:
void mdelay (volatile word n) {
     c34:	b507      	push	{r0, r1, r2, lr}
     c36:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     c3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c3e:	b29b      	uxth	r3, r3
     c40:	b913      	cbnz	r3, c48 <mdelay+0x14>
}
     c42:	b003      	add	sp, #12
     c44:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     c48:	f240 30e7 	movw	r0, #999	; 0x3e7
     c4c:	f7ff ffdc 	bl	c08 <udelay>
		n--;
     c50:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     c54:	3b01      	subs	r3, #1
     c56:	b29b      	uxth	r3, r3
     c58:	f8ad 3006 	strh.w	r3, [sp, #6]
     c5c:	e7ed      	b.n	c3a <mdelay+0x6>
	...

00000c60 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     c60:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     c62:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     c64:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     c66:	d505      	bpl.n	c74 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     c68:	4b0a      	ldr	r3, [pc, #40]	; (c94 <__pi_ondomain+0x34>)
     c6a:	78da      	ldrb	r2, [r3, #3]
     c6c:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     c6e:	bf84      	itt	hi
     c70:	2201      	movhi	r2, #1
     c72:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     c74:	4d08      	ldr	r5, [pc, #32]	; (c98 <__pi_ondomain+0x38>)
     c76:	4620      	mov	r0, r4
     c78:	682b      	ldr	r3, [r5, #0]
     c7a:	695b      	ldr	r3, [r3, #20]
     c7c:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c7e:	682b      	ldr	r3, [r5, #0]
     c80:	4620      	mov	r0, r4
     c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     c84:	4798      	blx	r3
     c86:	2801      	cmp	r0, #1
     c88:	d1f9      	bne.n	c7e <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     c8a:	4b02      	ldr	r3, [pc, #8]	; (c94 <__pi_ondomain+0x34>)
     c8c:	6858      	ldr	r0, [r3, #4]
     c8e:	4304      	orrs	r4, r0
     c90:	605c      	str	r4, [r3, #4]
}
     c92:	bd38      	pop	{r3, r4, r5, pc}
     c94:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     c98:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000c9c <__pi_offdomain>:
void __pi_offdomain (lword d) {
     c9c:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     c9e:	4d0d      	ldr	r5, [pc, #52]	; (cd4 <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     ca0:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     ca2:	682b      	ldr	r3, [r5, #0]
     ca4:	699b      	ldr	r3, [r3, #24]
     ca6:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ca8:	682b      	ldr	r3, [r5, #0]
     caa:	4620      	mov	r0, r4
     cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     cae:	4798      	blx	r3
     cb0:	2802      	cmp	r0, #2
     cb2:	d1f9      	bne.n	ca8 <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     cb4:	f014 0f01 	tst.w	r4, #1
     cb8:	4b07      	ldr	r3, [pc, #28]	; (cd8 <__pi_offdomain+0x3c>)
     cba:	d006      	beq.n	cca <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cbc:	7899      	ldrb	r1, [r3, #2]
     cbe:	78da      	ldrb	r2, [r3, #3]
     cc0:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cc2:	bf82      	ittt	hi
     cc4:	789a      	ldrbhi	r2, [r3, #2]
     cc6:	b2d2      	uxtbhi	r2, r2
     cc8:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     cca:	6858      	ldr	r0, [r3, #4]
     ccc:	ea20 0404 	bic.w	r4, r0, r4
     cd0:	605c      	str	r4, [r3, #4]
}
     cd2:	bd38      	pop	{r3, r4, r5, pc}
     cd4:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     cd8:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00000cdc <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     cdc:	460a      	mov	r2, r1
     cde:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     ce0:	4601      	mov	r1, r0
     ce2:	480f      	ldr	r0, [pc, #60]	; (d20 <__pi_syserror+0x44>)
     ce4:	f001 f818 	bl	1d18 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     ce8:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cea:	2540      	movs	r5, #64	; 0x40
     cec:	462f      	mov	r7, r5
     cee:	4e0d      	ldr	r6, [pc, #52]	; (d24 <__pi_syserror+0x48>)
     cf0:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     cf2:	490d      	ldr	r1, [pc, #52]	; (d28 <__pi_syserror+0x4c>)
     cf4:	6037      	str	r7, [r6, #0]
     cf6:	6034      	str	r4, [r6, #0]
     cf8:	780b      	ldrb	r3, [r1, #0]
     cfa:	780b      	ldrb	r3, [r1, #0]
     cfc:	20c8      	movs	r0, #200	; 0xc8
     cfe:	f36f 1307 	bfc	r3, #4, #4
     d02:	700b      	strb	r3, [r1, #0]
     d04:	f7ff ff96 	bl	c34 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d08:	4b08      	ldr	r3, [pc, #32]	; (d2c <__pi_syserror+0x50>)
     d0a:	20c8      	movs	r0, #200	; 0xc8
     d0c:	601d      	str	r5, [r3, #0]
     d0e:	601c      	str	r4, [r3, #0]
     d10:	780b      	ldrb	r3, [r1, #0]
     d12:	780b      	ldrb	r3, [r1, #0]
     d14:	f36f 1307 	bfc	r3, #4, #4
     d18:	700b      	strb	r3, [r1, #0]
     d1a:	f7ff ff8b 	bl	c34 <mdelay>
	while (1) {
     d1e:	e7e7      	b.n	cf0 <__pi_syserror+0x14>
     d20:	00005099 	muleq	r0, r9, r0
     d24:	40022090 	mulmi	r2, r0, r0
     d28:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     d2c:	400220a0 	andmi	r2, r2, r0, lsr #1

00000d30 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     d30:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     d32:	4b0a      	ldr	r3, [pc, #40]	; (d5c <tci_run_delay_timer+0x2c>)
     d34:	881c      	ldrh	r4, [r3, #0]
     d36:	4b0a      	ldr	r3, [pc, #40]	; (d60 <tci_run_delay_timer+0x30>)
     d38:	8818      	ldrh	r0, [r3, #0]
     d3a:	4b0a      	ldr	r3, [pc, #40]	; (d64 <tci_run_delay_timer+0x34>)
     d3c:	1b00      	subs	r0, r0, r4
     d3e:	b284      	uxth	r4, r0
     d40:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d42:	f002 fe2d 	bl	39a0 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     d46:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d48:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d4a:	4b07      	ldr	r3, [pc, #28]	; (d68 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     d50:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d54:	6018      	str	r0, [r3, #0]
	sti_tim;
     d56:	4b05      	ldr	r3, [pc, #20]	; (d6c <tci_run_delay_timer+0x3c>)
     d58:	601a      	str	r2, [r3, #0]
}
     d5a:	bd10      	pop	{r4, pc}
     d5c:	200006b6 			; <UNDEFINED> instruction: 0x200006b6
     d60:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
     d64:	20000568 	andcs	r0, r0, r8, ror #10
     d68:	40092018 	andmi	r2, r9, r8, lsl r0
     d6c:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000d70 <tci_run_auxiliary_timer>:
	cli_aux;
     d70:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     d72:	b510      	push	{r4, lr}
	cli_aux;
     d74:	4c06      	ldr	r4, [pc, #24]	; (d90 <tci_run_auxiliary_timer+0x20>)
     d76:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d78:	f002 fe12 	bl	39a0 <NOROM_AONRTCCurrent64BitValueGet>
     d7c:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     d7e:	4b05      	ldr	r3, [pc, #20]	; (d94 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d80:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     d84:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     d86:	6018      	str	r0, [r3, #0]
	sti_aux;
     d88:	2301      	movs	r3, #1
     d8a:	6023      	str	r3, [r4, #0]
}
     d8c:	bd10      	pop	{r4, pc}
     d8e:	bf00      	nop
     d90:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     d94:	40092020 	andmi	r2, r9, r0, lsr #32

00000d98 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     d98:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d9a:	4b3b      	ldr	r3, [pc, #236]	; (e88 <AONRTCIntHandler+0xf0>)
     d9c:	6818      	ldr	r0, [r3, #0]
     d9e:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     da2:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     da4:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     da6:	d542      	bpl.n	e2e <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     da8:	4b38      	ldr	r3, [pc, #224]	; (e8c <AONRTCIntHandler+0xf4>)
     daa:	6819      	ldr	r1, [r3, #0]
     dac:	2900      	cmp	r1, #0
     dae:	d053      	beq.n	e58 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     db0:	880a      	ldrh	r2, [r1, #0]
     db2:	2a00      	cmp	r2, #0
     db4:	d04e      	beq.n	e54 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     db6:	3a01      	subs	r2, #1
     db8:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     dba:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     dbc:	685c      	ldr	r4, [r3, #4]
     dbe:	b194      	cbz	r4, de6 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     dc0:	8821      	ldrh	r1, [r4, #0]
     dc2:	b111      	cbz	r1, dca <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     dc4:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     dc6:	3901      	subs	r1, #1
     dc8:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     dca:	689c      	ldr	r4, [r3, #8]
     dcc:	b15c      	cbz	r4, de6 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     dce:	8821      	ldrh	r1, [r4, #0]
     dd0:	b111      	cbz	r1, dd8 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     dd2:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     dd4:	3901      	subs	r1, #1
     dd6:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     dd8:	68d9      	ldr	r1, [r3, #12]
     dda:	b121      	cbz	r1, de6 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     ddc:	880b      	ldrh	r3, [r1, #0]
     dde:	b113      	cbz	r3, de6 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     de0:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     de2:	3b01      	subs	r3, #1
     de4:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     de6:	4b2a      	ldr	r3, [pc, #168]	; (e90 <AONRTCIntHandler+0xf8>)
     de8:	7819      	ldrb	r1, [r3, #0]
     dea:	0909      	lsrs	r1, r1, #4
     dec:	d047      	beq.n	e7e <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     dee:	7859      	ldrb	r1, [r3, #1]
     df0:	1c4a      	adds	r2, r1, #1
     df2:	b2d2      	uxtb	r2, r2
     df4:	705a      	strb	r2, [r3, #1]
     df6:	b9d1      	cbnz	r1, e2e <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     df8:	781a      	ldrb	r2, [r3, #0]
     dfa:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     dfe:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     e00:	d02c      	beq.n	e5c <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     e02:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e04:	bf42      	ittt	mi
     e06:	2140      	movmi	r1, #64	; 0x40
     e08:	4a22      	ldrmi	r2, [pc, #136]	; (e94 <AONRTCIntHandler+0xfc>)
     e0a:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     e0c:	781a      	ldrb	r2, [r3, #0]
     e0e:	0692      	lsls	r2, r2, #26
     e10:	bf42      	ittt	mi
     e12:	2180      	movmi	r1, #128	; 0x80
     e14:	4a1f      	ldrmi	r2, [pc, #124]	; (e94 <AONRTCIntHandler+0xfc>)
     e16:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     e18:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     e1a:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     e1c:	781a      	ldrb	r2, [r3, #0]
     e1e:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     e22:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     e24:	781a      	ldrb	r2, [r3, #0]
     e26:	0752      	lsls	r2, r2, #29
     e28:	d501      	bpl.n	e2e <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     e2a:	22c8      	movs	r2, #200	; 0xc8
     e2c:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     e2e:	07c3      	lsls	r3, r0, #31
     e30:	d50f      	bpl.n	e52 <AONRTCIntHandler+0xba>
		cli_tim;
     e32:	2100      	movs	r1, #0
     e34:	4b18      	ldr	r3, [pc, #96]	; (e98 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     e36:	4a19      	ldr	r2, [pc, #100]	; (e9c <AONRTCIntHandler+0x104>)
     e38:	4819      	ldr	r0, [pc, #100]	; (ea0 <AONRTCIntHandler+0x108>)
		cli_tim;
     e3a:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     e3c:	8803      	ldrh	r3, [r0, #0]
     e3e:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     e40:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     e42:	4423      	add	r3, r4
		RISE_N_SHINE;
     e44:	4a12      	ldr	r2, [pc, #72]	; (e90 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     e46:	b29b      	uxth	r3, r3
     e48:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     e4a:	7813      	ldrb	r3, [r2, #0]
     e4c:	f043 0302 	orr.w	r3, r3, #2
     e50:	7013      	strb	r3, [r2, #0]
}
     e52:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     e54:	2201      	movs	r2, #1
     e56:	e7b1      	b.n	dbc <AONRTCIntHandler+0x24>
     e58:	2201      	movs	r2, #1
     e5a:	e7c4      	b.n	de6 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     e5c:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e5e:	bf42      	ittt	mi
     e60:	2140      	movmi	r1, #64	; 0x40
     e62:	4a10      	ldrmi	r2, [pc, #64]	; (ea4 <AONRTCIntHandler+0x10c>)
     e64:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     e66:	781a      	ldrb	r2, [r3, #0]
     e68:	0691      	lsls	r1, r2, #26
     e6a:	bf42      	ittt	mi
     e6c:	2180      	movmi	r1, #128	; 0x80
     e6e:	4a0d      	ldrmi	r2, [pc, #52]	; (ea4 <AONRTCIntHandler+0x10c>)
     e70:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     e72:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     e74:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     e76:	781a      	ldrb	r2, [r3, #0]
     e78:	f042 0208 	orr.w	r2, r2, #8
     e7c:	e7d1      	b.n	e22 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     e7e:	2a00      	cmp	r2, #0
     e80:	d0d5      	beq.n	e2e <AONRTCIntHandler+0x96>
			cli_aux;
     e82:	4b09      	ldr	r3, [pc, #36]	; (ea8 <AONRTCIntHandler+0x110>)
     e84:	6019      	str	r1, [r3, #0]
     e86:	e7d2      	b.n	e2e <AONRTCIntHandler+0x96>
     e88:	40092004 	andmi	r2, r9, r4
     e8c:	200006c4 	andcs	r0, r0, r4, asr #13
     e90:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
     e94:	40022090 	mulmi	r2, r0, r0
     e98:	43240280 			; <UNDEFINED> instruction: 0x43240280
     e9c:	20000568 	andcs	r0, r0, r8, ror #10
     ea0:	200006c0 	andcs	r0, r0, r0, asr #13
     ea4:	400220a0 	andmi	r2, r2, r0, lsr #1
     ea8:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000eac <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     eae:	2600      	movs	r6, #0
     eb0:	4b0e      	ldr	r3, [pc, #56]	; (eec <tci_update_delay_ticks+0x40>)
	if (setdel) {
     eb2:	4f0f      	ldr	r7, [pc, #60]	; (ef0 <tci_update_delay_ticks+0x44>)
	cli_tim;
     eb4:	601e      	str	r6, [r3, #0]
	if (setdel) {
     eb6:	883d      	ldrh	r5, [r7, #0]
     eb8:	b19d      	cbz	r5, ee2 <tci_update_delay_ticks+0x36>
		if (force) {
     eba:	b1a0      	cbz	r0, ee6 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ebc:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <tci_update_delay_ticks+0x48>)
     ebe:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ec0:	f002 fd6e 	bl	39a0 <NOROM_AONRTCCurrent64BitValueGet>
     ec4:	0d80      	lsrs	r0, r0, #22
     ec6:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     eca:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     ece:	b280      	uxth	r0, r0
     ed0:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ed2:	1b2c      	subs	r4, r5, r4
	return NO;
     ed4:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ed6:	4b08      	ldr	r3, [pc, #32]	; (ef8 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     ed8:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     eda:	881a      	ldrh	r2, [r3, #0]
     edc:	4414      	add	r4, r2
     ede:	b2a4      	uxth	r4, r4
     ee0:	801c      	strh	r4, [r3, #0]
}
     ee2:	4628      	mov	r0, r5
     ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     ee6:	2501      	movs	r5, #1
     ee8:	601d      	str	r5, [r3, #0]
		return YES;
     eea:	e7fa      	b.n	ee2 <tci_update_delay_ticks+0x36>
     eec:	43240280 			; <UNDEFINED> instruction: 0x43240280
     ef0:	20000568 	andcs	r0, r0, r8, ror #10
     ef4:	40092018 	andmi	r2, r9, r8, lsl r0
     ef8:	200006c0 	andcs	r0, r0, r0, asr #13

00000efc <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     efc:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     efe:	4e0f      	ldr	r6, [pc, #60]	; (f3c <__pi_uart_setrate+0x40>)
     f00:	4d0f      	ldr	r5, [pc, #60]	; (f40 <__pi_uart_setrate+0x44>)
     f02:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f04:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     f06:	68db      	ldr	r3, [r3, #12]
     f08:	4628      	mov	r0, r5
     f0a:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     f0c:	2264      	movs	r2, #100	; 0x64
     f0e:	6833      	ldr	r3, [r6, #0]
     f10:	4628      	mov	r0, r5
     f12:	4362      	muls	r2, r4
     f14:	685e      	ldr	r6, [r3, #4]
     f16:	490b      	ldr	r1, [pc, #44]	; (f44 <__pi_uart_setrate+0x48>)
     f18:	2360      	movs	r3, #96	; 0x60
     f1a:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	4a0a      	ldr	r2, [pc, #40]	; (f48 <__pi_uart_setrate+0x4c>)
}
     f1e:	2001      	movs	r0, #1
     f20:	6813      	ldr	r3, [r2, #0]
     f22:	f043 0310 	orr.w	r3, r3, #16
     f26:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f28:	6853      	ldr	r3, [r2, #4]
     f2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     f2e:	f043 0301 	orr.w	r3, r3, #1
     f32:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     f34:	4b05      	ldr	r3, [pc, #20]	; (f4c <__pi_uart_setrate+0x50>)
     f36:	801c      	strh	r4, [r3, #0]
}
     f38:	bd70      	pop	{r4, r5, r6, pc}
     f3a:	bf00      	nop
     f3c:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     f40:	40001000 	andmi	r1, r0, r0
     f44:	02dc6c00 	sbcseq	r6, ip, #0, 24
     f48:	4000102c 	andmi	r1, r0, ip, lsr #32
     f4c:	2000056a 	andcs	r0, r0, sl, ror #10

00000f50 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f50:	4a08      	ldr	r2, [pc, #32]	; (f74 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     f52:	4909      	ldr	r1, [pc, #36]	; (f78 <reinit_uart+0x28>)
     f54:	6813      	ldr	r3, [r2, #0]
     f56:	f043 0310 	orr.w	r3, r3, #16
     f5a:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f5c:	2212      	movs	r2, #18
     f5e:	4b07      	ldr	r3, [pc, #28]	; (f7c <reinit_uart+0x2c>)
     f60:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f62:	4a07      	ldr	r2, [pc, #28]	; (f80 <reinit_uart+0x30>)
     f64:	6813      	ldr	r3, [r2, #0]
     f66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     f6a:	6013      	str	r3, [r2, #0]
     f6c:	4b05      	ldr	r3, [pc, #20]	; (f84 <reinit_uart+0x34>)
     f6e:	8818      	ldrh	r0, [r3, #0]
     f70:	f7ff bfc4 	b.w	efc <__pi_uart_setrate>
     f74:	4000102c 	andmi	r1, r0, ip, lsr #32
     f78:	200006a4 	andcs	r0, r0, r4, lsr #13
     f7c:	40001034 	andmi	r1, r0, r4, lsr r0
     f80:	40001030 	andmi	r1, r0, r0, lsr r0
     f84:	2000056a 	andcs	r0, r0, sl, ror #10

00000f88 <ioreq_uart_a>:
	switch (operation) {
     f88:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     f8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f8e:	460d      	mov	r5, r1
     f90:	4614      	mov	r4, r2
     f92:	2803      	cmp	r0, #3
     f94:	d86e      	bhi.n	1074 <ioreq_uart_a+0xec>
     f96:	e8df f000 	tbb	[pc, r0]
     f9a:	5a471253 	bpl	11c58ee <__ccfg+0x11a5946>
				*buf++ = uart_a_read;
     f9e:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     fa2:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     fa4:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     fa8:	b11e      	cbz	r6, fb2 <ioreq_uart_a+0x2a>
     faa:	f8d8 3000 	ldr.w	r3, [r8]
     fae:	06d8      	lsls	r0, r3, #27
     fb0:	d5f5      	bpl.n	f9e <ioreq_uart_a+0x16>
			if (len != operation) {
     fb2:	42a6      	cmp	r6, r4
     fb4:	d00a      	beq.n	fcc <ioreq_uart_a+0x44>
				return operation - len;
     fb6:	1ba4      	subs	r4, r4, r6
}
     fb8:	4620      	mov	r0, r4
     fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     fbe:	4616      	mov	r6, r2
			uart_a_disable_int;
     fc0:	4f2e      	ldr	r7, [pc, #184]	; (107c <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     fc2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1090 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     fc6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1094 <ioreq_uart_a+0x10c>
     fca:	e7ed      	b.n	fa8 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     fcc:	683b      	ldr	r3, [r7, #0]
     fce:	2015      	movs	r0, #21
     fd0:	695b      	ldr	r3, [r3, #20]
     fd2:	4798      	blx	r3
			if (uart_a_char_available) {
     fd4:	f8d8 3000 	ldr.w	r3, [r8]
     fd8:	06d9      	lsls	r1, r3, #27
     fda:	d404      	bmi.n	fe6 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     fdc:	683b      	ldr	r3, [r7, #0]
     fde:	2015      	movs	r0, #21
     fe0:	691b      	ldr	r3, [r3, #16]
     fe2:	4798      	blx	r3
				goto Redo_rx;
     fe4:	e7e0      	b.n	fa8 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fe6:	4a26      	ldr	r2, [pc, #152]	; (1080 <ioreq_uart_a+0xf8>)
     fe8:	7993      	ldrb	r3, [r2, #6]
     fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     fee:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     ff2:	7193      	strb	r3, [r2, #6]
			return -2;
     ff4:	e7e0      	b.n	fb8 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     ff6:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     ffa:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     ffc:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
    1000:	b11e      	cbz	r6, 100a <ioreq_uart_a+0x82>
    1002:	f8d8 3000 	ldr.w	r3, [r8]
    1006:	069a      	lsls	r2, r3, #26
    1008:	d5f5      	bpl.n	ff6 <ioreq_uart_a+0x6e>
			if (len != operation) {
    100a:	42a6      	cmp	r6, r4
    100c:	d1d3      	bne.n	fb6 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
    100e:	683b      	ldr	r3, [r7, #0]
    1010:	2015      	movs	r0, #21
    1012:	695b      	ldr	r3, [r3, #20]
    1014:	4798      	blx	r3
			if (uart_a_room_in_tx) {
    1016:	f8d8 3000 	ldr.w	r3, [r8]
    101a:	069b      	lsls	r3, r3, #26
    101c:	d40b      	bmi.n	1036 <ioreq_uart_a+0xae>
				uart_a_enable_int;
    101e:	683b      	ldr	r3, [r7, #0]
    1020:	2015      	movs	r0, #21
    1022:	691b      	ldr	r3, [r3, #16]
    1024:	4798      	blx	r3
				goto Redo_tx;
    1026:	e7eb      	b.n	1000 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
    1028:	4616      	mov	r6, r2
			uart_a_disable_int;
    102a:	4f14      	ldr	r7, [pc, #80]	; (107c <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
    102c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1090 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
    1030:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1094 <ioreq_uart_a+0x10c>
    1034:	e7e4      	b.n	1000 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1036:	4a12      	ldr	r2, [pc, #72]	; (1080 <ioreq_uart_a+0xf8>)
    1038:	7993      	ldrb	r3, [r2, #6]
    103a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    103e:	e7d6      	b.n	fee <ioreq_uart_a+0x66>
			uart_a_enable_int;
    1040:	4b0e      	ldr	r3, [pc, #56]	; (107c <ioreq_uart_a+0xf4>)
    1042:	2015      	movs	r0, #21
    1044:	681b      	ldr	r3, [r3, #0]
			return 0;
    1046:	2400      	movs	r4, #0
			uart_a_enable_int;
    1048:	691b      	ldr	r3, [r3, #16]
    104a:	4798      	blx	r3
			return 0;
    104c:	e7b4      	b.n	fb8 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
    104e:	2a01      	cmp	r2, #1
    1050:	d109      	bne.n	1066 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
    1052:	490b      	ldr	r1, [pc, #44]	; (1080 <ioreq_uart_a+0xf8>)
    1054:	8828      	ldrh	r0, [r5, #0]
    1056:	f7ff ff51 	bl	efc <__pi_uart_setrate>
    105a:	2800      	cmp	r0, #0
    105c:	d1ac      	bne.n	fb8 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
    105e:	2003      	movs	r0, #3
    1060:	4908      	ldr	r1, [pc, #32]	; (1084 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
    1062:	f7ff fe3b 	bl	cdc <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
    1066:	2a02      	cmp	r2, #2
    1068:	d104      	bne.n	1074 <ioreq_uart_a+0xec>
	return urates [0];
    106a:	4b07      	ldr	r3, [pc, #28]	; (1088 <ioreq_uart_a+0x100>)
				return 1;
    106c:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    106e:	881b      	ldrh	r3, [r3, #0]
    1070:	800b      	strh	r3, [r1, #0]
				return 1;
    1072:	e7a1      	b.n	fb8 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
    1074:	2002      	movs	r0, #2
    1076:	4905      	ldr	r1, [pc, #20]	; (108c <ioreq_uart_a+0x104>)
    1078:	e7f3      	b.n	1062 <ioreq_uart_a+0xda>
    107a:	bf00      	nop
    107c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1080:	200006a4 	andcs	r0, r0, r4, lsr #13
    1084:	000050a8 	andeq	r5, r0, r8, lsr #1
    1088:	2000056a 	andcs	r0, r0, sl, ror #10
    108c:	000050ac 	andeq	r5, r0, ip, lsr #1
    1090:	40001018 	andmi	r1, r0, r8, lsl r0
    1094:	40001000 	andmi	r1, r0, r0

00001098 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1098:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
    109c:	b530      	push	{r4, r5, lr}
    109e:	4b29      	ldr	r3, [pc, #164]	; (1144 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10a0:	4c29      	ldr	r4, [pc, #164]	; (1148 <UART0IntHandler+0xb0>)
    10a2:	601a      	str	r2, [r3, #0]
    10a4:	6822      	ldr	r2, [r4, #0]
    10a6:	06d5      	lsls	r5, r2, #27
    10a8:	d423      	bmi.n	10f2 <UART0IntHandler+0x5a>
    10aa:	4b28      	ldr	r3, [pc, #160]	; (114c <UART0IntHandler+0xb4>)
    10ac:	799a      	ldrb	r2, [r3, #6]
    10ae:	0610      	lsls	r0, r2, #24
    10b0:	d51f      	bpl.n	10f2 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10b2:	799a      	ldrb	r2, [r3, #6]
    10b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    10b8:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    10ba:	4a25      	ldr	r2, [pc, #148]	; (1150 <UART0IntHandler+0xb8>)
    10bc:	7813      	ldrb	r3, [r2, #0]
    10be:	f043 0302 	orr.w	r3, r3, #2
    10c2:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
    10c4:	4b23      	ldr	r3, [pc, #140]	; (1154 <UART0IntHandler+0xbc>)
    10c6:	681a      	ldr	r2, [r3, #0]
    10c8:	b19a      	cbz	r2, 10f2 <UART0IntHandler+0x5a>
    10ca:	4610      	mov	r0, r2
    10cc:	2300      	movs	r3, #0
    10ce:	f830 1b10 	ldrh.w	r1, [r0], #16
    10d2:	f001 0107 	and.w	r1, r1, #7
    10d6:	4299      	cmp	r1, r3
    10d8:	dd09      	ble.n	10ee <UART0IntHandler+0x56>
    10da:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    10de:	3301      	adds	r3, #1
    10e0:	f515 7f81 	cmn.w	r5, #258	; 0x102
    10e4:	d1f7      	bne.n	10d6 <UART0IntHandler+0x3e>
    10e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    10ea:	889b      	ldrh	r3, [r3, #4]
    10ec:	8013      	strh	r3, [r2, #0]
    10ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10f0:	e7ea      	b.n	10c8 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10f2:	6823      	ldr	r3, [r4, #0]
    10f4:	0699      	lsls	r1, r3, #26
    10f6:	d424      	bmi.n	1142 <UART0IntHandler+0xaa>
    10f8:	4b14      	ldr	r3, [pc, #80]	; (114c <UART0IntHandler+0xb4>)
    10fa:	799a      	ldrb	r2, [r3, #6]
    10fc:	0652      	lsls	r2, r2, #25
    10fe:	d520      	bpl.n	1142 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
    1100:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1104:	799a      	ldrb	r2, [r3, #6]
    1106:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    110a:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
    110c:	4a10      	ldr	r2, [pc, #64]	; (1150 <UART0IntHandler+0xb8>)
    110e:	7813      	ldrb	r3, [r2, #0]
    1110:	f043 0302 	orr.w	r3, r3, #2
    1114:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
    1116:	4b0f      	ldr	r3, [pc, #60]	; (1154 <UART0IntHandler+0xbc>)
    1118:	681a      	ldr	r2, [r3, #0]
    111a:	b192      	cbz	r2, 1142 <UART0IntHandler+0xaa>
    111c:	4610      	mov	r0, r2
    111e:	2300      	movs	r3, #0
    1120:	f830 1b10 	ldrh.w	r1, [r0], #16
    1124:	f001 0107 	and.w	r1, r1, #7
    1128:	4299      	cmp	r1, r3
    112a:	dd08      	ble.n	113e <UART0IntHandler+0xa6>
    112c:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    1130:	3301      	adds	r3, #1
    1132:	42a5      	cmp	r5, r4
    1134:	d1f8      	bne.n	1128 <UART0IntHandler+0x90>
    1136:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    113a:	889b      	ldrh	r3, [r3, #4]
    113c:	8013      	strh	r3, [r2, #0]
    113e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1140:	e7eb      	b.n	111a <UART0IntHandler+0x82>
	}

	RTNI;
}
    1142:	bd30      	pop	{r4, r5, pc}
    1144:	40001044 	andmi	r1, r0, r4, asr #32
    1148:	40001018 	andmi	r1, r0, r8, lsl r0
    114c:	200006a4 	andcs	r0, r0, r4, lsr #13
    1150:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1154:	2000056c 	andcs	r0, r0, ip, ror #10

00001158 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
    1158:	b570      	push	{r4, r5, r6, lr}
    115a:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    115c:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
    115e:	4e0c      	ldr	r6, [pc, #48]	; (1190 <__buttons_setirq+0x38>)
    1160:	4d0c      	ldr	r5, [pc, #48]	; (1194 <__buttons_setirq+0x3c>)
    1162:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1164:	4c0c      	ldr	r4, [pc, #48]	; (1198 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
    1166:	0a1b      	lsrs	r3, r3, #8
    1168:	fa01 f203 	lsl.w	r2, r1, r3
    116c:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    116e:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
    1170:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1172:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
    1176:	0a1b      	lsrs	r3, r3, #8
    1178:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    117a:	01db      	lsls	r3, r3, #7
    117c:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    1180:	4322      	orrs	r2, r4
    1182:	4323      	orrs	r3, r4
    1184:	6010      	str	r0, [r2, #0]
    1186:	6029      	str	r1, [r5, #0]
    1188:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    118a:	b662      	cpsie	i
			val;
	}
	sti;
}
    118c:	bd70      	pop	{r4, r5, r6, pc}
    118e:	bf00      	nop
    1190:	00005242 	andeq	r5, r0, r2, asr #4
    1194:	400220e0 	andmi	r2, r2, r0, ror #1
    1198:	42000048 	andmi	r0, r0, #72	; 0x48

0000119c <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
    119c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    119e:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
    11a0:	2200      	movs	r2, #0
    11a2:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11a4:	4f09      	ldr	r7, [pc, #36]	; (11cc <__pinlist_setirq+0x30>)
    11a6:	4c0a      	ldr	r4, [pc, #40]	; (11d0 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a8:	490a      	ldr	r1, [pc, #40]	; (11d4 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11aa:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
    11ac:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    11b2:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11b6:	01db      	lsls	r3, r3, #7
    11b8:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
    11bc:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
    11be:	2a04      	cmp	r2, #4
    11c0:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11c2:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
    11c4:	d1f1      	bne.n	11aa <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
    11c6:	b662      	cpsie	i
			val;
	}
	sti;
}
    11c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11ca:	bf00      	nop
    11cc:	0000523d 	andeq	r5, r0, sp, lsr r2
    11d0:	400220e0 	andmi	r2, r2, r0, ror #1
    11d4:	42000048 	andmi	r0, r0, #72	; 0x48

000011d8 <GPIOIntHandler>:
void GPIOIntHandler () {
    11d8:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
    11da:	4c23      	ldr	r4, [pc, #140]	; (1268 <GPIOIntHandler+0x90>)
    11dc:	6822      	ldr	r2, [r4, #0]
    11de:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
    11e2:	d01e      	beq.n	1222 <GPIOIntHandler+0x4a>
	buttons_disable ();
    11e4:	2000      	movs	r0, #0
    11e6:	f7ff ffb7 	bl	1158 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
    11ea:	4b20      	ldr	r3, [pc, #128]	; (126c <GPIOIntHandler+0x94>)
    11ec:	4d20      	ldr	r5, [pc, #128]	; (1270 <GPIOIntHandler+0x98>)
    11ee:	681a      	ldr	r2, [r3, #0]
    11f0:	b192      	cbz	r2, 1218 <GPIOIntHandler+0x40>
    11f2:	4610      	mov	r0, r2
    11f4:	2300      	movs	r3, #0
    11f6:	f830 1b10 	ldrh.w	r1, [r0], #16
    11fa:	f001 0107 	and.w	r1, r1, #7
    11fe:	4299      	cmp	r1, r3
    1200:	dd08      	ble.n	1214 <GPIOIntHandler+0x3c>
    1202:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
    1206:	3301      	adds	r3, #1
    1208:	42ae      	cmp	r6, r5
    120a:	d1f8      	bne.n	11fe <GPIOIntHandler+0x26>
    120c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1210:	889b      	ldrh	r3, [r3, #4]
    1212:	8013      	strh	r3, [r2, #0]
    1214:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1216:	e7eb      	b.n	11f0 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
    1218:	4a16      	ldr	r2, [pc, #88]	; (1274 <GPIOIntHandler+0x9c>)
    121a:	7813      	ldrb	r3, [r2, #0]
    121c:	f043 0302 	orr.w	r3, r3, #2
    1220:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
    1222:	6823      	ldr	r3, [r4, #0]
    1224:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
    1228:	d01d      	beq.n	1266 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
    122a:	4b10      	ldr	r3, [pc, #64]	; (126c <GPIOIntHandler+0x94>)
    122c:	4c12      	ldr	r4, [pc, #72]	; (1278 <GPIOIntHandler+0xa0>)
    122e:	6818      	ldr	r0, [r3, #0]
    1230:	b190      	cbz	r0, 1258 <GPIOIntHandler+0x80>
    1232:	4601      	mov	r1, r0
    1234:	2300      	movs	r3, #0
    1236:	f831 2b10 	ldrh.w	r2, [r1], #16
    123a:	f002 0207 	and.w	r2, r2, #7
    123e:	429a      	cmp	r2, r3
    1240:	dd08      	ble.n	1254 <GPIOIntHandler+0x7c>
    1242:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    1246:	3301      	adds	r3, #1
    1248:	42a5      	cmp	r5, r4
    124a:	d1f8      	bne.n	123e <GPIOIntHandler+0x66>
    124c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    1250:	889b      	ldrh	r3, [r3, #4]
    1252:	8003      	strh	r3, [r0, #0]
    1254:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1256:	e7eb      	b.n	1230 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
    1258:	f7ff ffa0 	bl	119c <__pinlist_setirq>
	RISE_N_SHINE;
    125c:	4a05      	ldr	r2, [pc, #20]	; (1274 <GPIOIntHandler+0x9c>)
    125e:	7813      	ldrb	r3, [r2, #0]
    1260:	f043 0302 	orr.w	r3, r3, #2
    1264:	7013      	strb	r3, [r2, #0]
}
    1266:	bd70      	pop	{r4, r5, r6, pc}
    1268:	400220e0 	andmi	r2, r2, r0, ror #1
    126c:	2000056c 	andcs	r0, r0, ip, ror #10
    1270:	00005242 	andeq	r5, r0, r2, asr #4
    1274:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1278:	0000523d 	andeq	r5, r0, sp, lsr r2

0000127c <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
    127c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1280:	4c58      	ldr	r4, [pc, #352]	; (13e4 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1282:	2004      	movs	r0, #4
    1284:	f7ff fcec 	bl	c60 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1288:	6823      	ldr	r3, [r4, #0]
    128a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    128e:	69db      	ldr	r3, [r3, #28]
    1290:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1292:	6823      	ldr	r3, [r4, #0]
    1294:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    1298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    129a:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    129c:	6823      	ldr	r3, [r4, #0]
    129e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    12a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    12a4:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12a6:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12a8:	2600      	movs	r6, #0
    12aa:	4c4f      	ldr	r4, [pc, #316]	; (13e8 <system_init+0x16c>)
    12ac:	4f4f      	ldr	r7, [pc, #316]	; (13ec <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12ae:	f8df c17c 	ldr.w	ip, [pc, #380]	; 142c <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12b2:	f8df e17c 	ldr.w	lr, [pc, #380]	; 1430 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12b6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 13f8 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ba:	f8df 9134 	ldr.w	r9, [pc, #308]	; 13f0 <system_init+0x174>
    12be:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
    12c0:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
    12c6:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12ca:	0091      	lsls	r1, r2, #2
    12cc:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
    12d0:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
    12d4:	ea05 0a0c 	and.w	sl, r5, ip
    12d8:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
    12dc:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12de:	bf44      	itt	mi
    12e0:	ea41 010e 	orrmi.w	r1, r1, lr
    12e4:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
    12e6:	fa03 f202 	lsl.w	r2, r3, r2
    12ea:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ec:	bf4c      	ite	mi
    12ee:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f2:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12f6:	2e11      	cmp	r6, #17
    12f8:	d1e2      	bne.n	12c0 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12fa:	2540      	movs	r5, #64	; 0x40
    12fc:	2680      	movs	r6, #128	; 0x80
    12fe:	4b3c      	ldr	r3, [pc, #240]	; (13f0 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
    1300:	493c      	ldr	r1, [pc, #240]	; (13f4 <system_init+0x178>)
    1302:	601d      	str	r5, [r3, #0]
    1304:	601e      	str	r6, [r3, #0]
    1306:	780b      	ldrb	r3, [r1, #0]
    1308:	780b      	ldrb	r3, [r1, #0]
    130a:	20c8      	movs	r0, #200	; 0xc8
    130c:	f36f 1307 	bfc	r3, #4, #4
    1310:	700b      	strb	r3, [r1, #0]
    1312:	f7ff fc8f 	bl	c34 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1316:	4b38      	ldr	r3, [pc, #224]	; (13f8 <system_init+0x17c>)
    1318:	20c8      	movs	r0, #200	; 0xc8
    131a:	601d      	str	r5, [r3, #0]
    131c:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    131e:	2601      	movs	r6, #1
	all_leds_blink;
    1320:	780b      	ldrb	r3, [r1, #0]
    1322:	780b      	ldrb	r3, [r1, #0]
    1324:	f36f 1307 	bfc	r3, #4, #4
    1328:	700b      	strb	r3, [r1, #0]
    132a:	f7ff fc83 	bl	c34 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
    132e:	4b33      	ldr	r3, [pc, #204]	; (13fc <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1330:	4a33      	ldr	r2, [pc, #204]	; (1400 <system_init+0x184>)
    1332:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1334:	4b33      	ldr	r3, [pc, #204]	; (1404 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
    1336:	4d34      	ldr	r5, [pc, #208]	; (1408 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1338:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    133a:	4b34      	ldr	r3, [pc, #208]	; (140c <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
    133c:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    133e:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
    1340:	682b      	ldr	r3, [r5, #0]
    1342:	691b      	ldr	r3, [r3, #16]
    1344:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
    1346:	f000 fbf9 	bl	1b3c <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
    134a:	682b      	ldr	r3, [r5, #0]
    134c:	2010      	movs	r0, #16
    134e:	691b      	ldr	r3, [r3, #16]
    1350:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1352:	2002      	movs	r0, #2
    1354:	f7ff fc84 	bl	c60 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1358:	68ab      	ldr	r3, [r5, #8]
    135a:	f44f 7000 	mov.w	r0, #512	; 0x200
    135e:	69db      	ldr	r3, [r3, #28]
    1360:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1362:	68ab      	ldr	r3, [r5, #8]
    1364:	f44f 7000 	mov.w	r0, #512	; 0x200
    1368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    136a:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    136c:	68ab      	ldr	r3, [r5, #8]
    136e:	f44f 7000 	mov.w	r0, #512	; 0x200
    1372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1374:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
    1376:	2260      	movs	r2, #96	; 0x60
    1378:	4b25      	ldr	r3, [pc, #148]	; (1410 <system_init+0x194>)
    137a:	6026      	str	r6, [r4, #0]
    137c:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
    137e:	f7ff fde7 	bl	f50 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
    1382:	f001 f959 	bl	2638 <ee_open>
    1386:	f001 f961 	bl	264c <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    138a:	f003 fa2b 	bl	47e4 <NOROM_SysCtrlResetSourceGet>
    138e:	2808      	cmp	r0, #8
    1390:	d11a      	bne.n	13c8 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    1392:	4b20      	ldr	r3, [pc, #128]	; (1414 <system_init+0x198>)
    1394:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1396:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    139a:	3b04      	subs	r3, #4
    139c:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    139e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    13a2:	3324      	adds	r3, #36	; 0x24
    13a4:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
    13a6:	2000      	movs	r0, #0
    13a8:	f7ff fc28 	bl	bfc <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13ac:	4a1a      	ldr	r2, [pc, #104]	; (1418 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
    13ae:	2015      	movs	r0, #21
    13b0:	6813      	ldr	r3, [r2, #0]
    13b2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    13b6:	6013      	str	r3, [r2, #0]
    13b8:	4b13      	ldr	r3, [pc, #76]	; (1408 <system_init+0x18c>)
    13ba:	681b      	ldr	r3, [r3, #0]
    13bc:	691b      	ldr	r3, [r3, #16]
    13be:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
    13c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
    13c4:	f7ff bcd4 	b.w	d70 <tci_run_auxiliary_timer>
		diag ("");
    13c8:	4814      	ldr	r0, [pc, #80]	; (141c <system_init+0x1a0>)
    13ca:	f000 fca5 	bl	1d18 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    13ce:	4814      	ldr	r0, [pc, #80]	; (1420 <system_init+0x1a4>)
    13d0:	f000 fca2 	bl	1d18 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13d4:	4913      	ldr	r1, [pc, #76]	; (1424 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
    13d6:	4814      	ldr	r0, [pc, #80]	; (1428 <system_init+0x1ac>)
    13d8:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
    13dc:	b289      	uxth	r1, r1
    13de:	f000 fc9b 	bl	1d18 <diag>
    13e2:	e7e0      	b.n	13a6 <system_init+0x12a>
    13e4:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    13e8:	60082028 	andvs	r2, r8, r8, lsr #32
    13ec:	00005124 	andeq	r5, r0, r4, lsr #2
    13f0:	40022090 	mulmi	r2, r0, r0
    13f4:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    13f8:	400220a0 	andmi	r2, r2, r0, lsr #1
    13fc:	40092024 	andmi	r2, r9, r4, lsr #32
    1400:	00050003 	andeq	r0, r5, r3
    1404:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
    1408:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    140c:	40092000 	andmi	r2, r9, r0
    1410:	2000056a 	andcs	r0, r0, sl, ror #10
    1414:	4009400c 	andmi	r4, r9, ip
    1418:	40001038 	andmi	r1, r0, r8, lsr r0
    141c:	00004a7f 	andeq	r4, r0, pc, ror sl
    1420:	000050b0 	strheq	r5, [r0], -r0
    1424:	200006d8 	ldrdcs	r0, [r0], -r8
    1428:	000050fc 	strdeq	r5, [r0], -ip
    142c:	7f077f3f 	svcvc	0x00077f3f
    1430:	42441a00 	submi	r1, r4, #0, 20

00001434 <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1434:	2803      	cmp	r0, #3
    1436:	4603      	mov	r3, r0
    1438:	bf28      	it	cs
    143a:	2303      	movcs	r3, #3
    143c:	4a05      	ldr	r2, [pc, #20]	; (1454 <setpowermode+0x20>)
    143e:	b2db      	uxtb	r3, r3
    1440:	2801      	cmp	r0, #1
    1442:	7093      	strb	r3, [r2, #2]
    1444:	d904      	bls.n	1450 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
    1446:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1448:	f011 0f01 	tst.w	r1, #1
    144c:	bf18      	it	ne
    144e:	2301      	movne	r3, #1
    1450:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
    1452:	4770      	bx	lr
    1454:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00001458 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
    1458:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    145c:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    145e:	4b79      	ldr	r3, [pc, #484]	; (1644 <__pi_release+0x1ec>)
    1460:	af00      	add	r7, sp, #0
    1462:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
    1466:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
    146a:	681a      	ldr	r2, [r3, #0]
    146c:	4b76      	ldr	r3, [pc, #472]	; (1648 <__pi_release+0x1f0>)
    146e:	429a      	cmp	r2, r3
    1470:	d127      	bne.n	14c2 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    1472:	4e76      	ldr	r6, [pc, #472]	; (164c <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
    1474:	2100      	movs	r1, #0
    1476:	f64f 70ff 	movw	r0, #65535	; 0xffff
    147a:	f000 f9ed 	bl	1858 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
    147e:	4a74      	ldr	r2, [pc, #464]	; (1650 <__pi_release+0x1f8>)
    1480:	4b74      	ldr	r3, [pc, #464]	; (1654 <__pi_release+0x1fc>)
    1482:	6812      	ldr	r2, [r2, #0]
    1484:	601a      	str	r2, [r3, #0]
    1486:	681a      	ldr	r2, [r3, #0]
    1488:	b9fa      	cbnz	r2, 14ca <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    148a:	4c73      	ldr	r4, [pc, #460]	; (1658 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
    148c:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
    148e:	4d73      	ldr	r5, [pc, #460]	; (165c <__pi_release+0x204>)
    1490:	782b      	ldrb	r3, [r5, #0]
    1492:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1496:	0798      	lsls	r0, r3, #30
    1498:	607a      	str	r2, [r7, #4]
    149a:	f100 80cd 	bmi.w	1638 <__pi_release+0x1e0>
	system_event_count ++;
    149e:	4a70      	ldr	r2, [pc, #448]	; (1660 <__pi_release+0x208>)
    14a0:	6813      	ldr	r3, [r2, #0]
    14a2:	3301      	adds	r3, #1
    14a4:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
    14a6:	78ea      	ldrb	r2, [r5, #3]
    14a8:	2a01      	cmp	r2, #1
    14aa:	b2d3      	uxtb	r3, r2
    14ac:	d017      	beq.n	14de <__pi_release+0x86>
    14ae:	2b02      	cmp	r3, #2
    14b0:	d031      	beq.n	1516 <__pi_release+0xbe>
    14b2:	2b00      	cmp	r3, #0
    14b4:	f040 8095 	bne.w	15e2 <__pi_release+0x18a>
			__WFI ();
    14b8:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
    14ba:	b662      	cpsie	i
    14bc:	bf00      	nop
    14be:	bf00      	nop
    14c0:	e7e4      	b.n	148c <__pi_release+0x34>
	check_stack_overflow;
    14c2:	200b      	movs	r0, #11
    14c4:	4967      	ldr	r1, [pc, #412]	; (1664 <__pi_release+0x20c>)
    14c6:	f7ff fc09 	bl	cdc <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    14ca:	6851      	ldr	r1, [r2, #4]
    14cc:	b129      	cbz	r1, 14da <__pi_release+0x82>
    14ce:	8810      	ldrh	r0, [r2, #0]
    14d0:	0704      	lsls	r4, r0, #28
    14d2:	d102      	bne.n	14da <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
    14d4:	0900      	lsrs	r0, r0, #4
    14d6:	4788      	blx	r1
			goto Redo;
    14d8:	e7cc      	b.n	1474 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
    14da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    14dc:	e7d2      	b.n	1484 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14de:	4a62      	ldr	r2, [pc, #392]	; (1668 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14e0:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14e2:	6813      	ldr	r3, [r2, #0]
    14e4:	f043 0301 	orr.w	r3, r3, #1
    14e8:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14ea:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    14ee:	f043 0303 	orr.w	r3, r3, #3
    14f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14f6:	4b5d      	ldr	r3, [pc, #372]	; (166c <__pi_release+0x214>)
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	699b      	ldr	r3, [r3, #24]
    14fc:	4798      	blx	r3
    14fe:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1500:	6823      	ldr	r3, [r4, #0]
    1502:	f043 0304 	orr.w	r3, r3, #4
    1506:	6023      	str	r3, [r4, #0]
			__WFI ();
    1508:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    150a:	6823      	ldr	r3, [r4, #0]
    150c:	f023 0304 	bic.w	r3, r3, #4
    1510:	6023      	str	r3, [r4, #0]
    1512:	6833      	ldr	r3, [r6, #0]
}
    1514:	e7d1      	b.n	14ba <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1516:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    151a:	687a      	ldr	r2, [r7, #4]
    151c:	4b54      	ldr	r3, [pc, #336]	; (1670 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    151e:	f8df b188 	ldr.w	fp, [pc, #392]	; 16a8 <__pi_release+0x250>
    1522:	601a      	str	r2, [r3, #0]
    1524:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1526:	f8df a144 	ldr.w	sl, [pc, #324]	; 166c <__pi_release+0x214>
    152a:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    152e:	6833      	ldr	r3, [r6, #0]
    1530:	4b50      	ldr	r3, [pc, #320]	; (1674 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1532:	f8df 9178 	ldr.w	r9, [pc, #376]	; 16ac <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1536:	f8c3 8000 	str.w	r8, [r3]
    153a:	6868      	ldr	r0, [r5, #4]
    153c:	f8da 3000 	ldr.w	r3, [sl]
    1540:	f040 0020 	orr.w	r0, r0, #32
    1544:	699b      	ldr	r3, [r3, #24]
    1546:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1548:	4b4b      	ldr	r3, [pc, #300]	; (1678 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    154a:	2103      	movs	r1, #3
    154c:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1550:	f8d9 3000 	ldr.w	r3, [r9]
    1554:	4849      	ldr	r0, [pc, #292]	; (167c <__pi_release+0x224>)
    1556:	f023 0303 	bic.w	r3, r3, #3
    155a:	f8c9 3000 	str.w	r3, [r9]
    155e:	4b48      	ldr	r3, [pc, #288]	; (1680 <__pi_release+0x228>)
    1560:	681a      	ldr	r2, [r3, #0]
    1562:	6852      	ldr	r2, [r2, #4]
    1564:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
    1566:	6878      	ldr	r0, [r7, #4]
    1568:	f002 fffc 	bl	4564 <NOROM_SysCtrlSetRechargeBeforePowerDown>
    156c:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    156e:	6822      	ldr	r2, [r4, #0]
    1570:	f042 0204 	orr.w	r2, r2, #4
    1574:	6022      	str	r2, [r4, #0]
			__WFI ();
    1576:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1578:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    157a:	4b41      	ldr	r3, [pc, #260]	; (1680 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    157c:	f022 0204 	bic.w	r2, r2, #4
    1580:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	4641      	mov	r1, r8
    1586:	685b      	ldr	r3, [r3, #4]
    1588:	483c      	ldr	r0, [pc, #240]	; (167c <__pi_release+0x224>)
    158a:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    158c:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1590:	4a3c      	ldr	r2, [pc, #240]	; (1684 <__pi_release+0x22c>)
    1592:	f043 0303 	orr.w	r3, r3, #3
    1596:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    159a:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    159e:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
    15a0:	0699      	lsls	r1, r3, #26
    15a2:	d5fc      	bpl.n	159e <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15a4:	f8da 3000 	ldr.w	r3, [sl]
    15a8:	6868      	ldr	r0, [r5, #4]
    15aa:	695b      	ldr	r3, [r3, #20]
    15ac:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15ae:	4d2f      	ldr	r5, [pc, #188]	; (166c <__pi_release+0x214>)
    15b0:	4b2a      	ldr	r3, [pc, #168]	; (165c <__pi_release+0x204>)
    15b2:	6858      	ldr	r0, [r3, #4]
    15b4:	682b      	ldr	r3, [r5, #0]
    15b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    15b8:	4798      	blx	r3
    15ba:	2801      	cmp	r0, #1
    15bc:	d1f8      	bne.n	15b0 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    15be:	4b2d      	ldr	r3, [pc, #180]	; (1674 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15c0:	4a2d      	ldr	r2, [pc, #180]	; (1678 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    15c2:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15c4:	2300      	movs	r3, #0
    15c6:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    15c8:	4b29      	ldr	r3, [pc, #164]	; (1670 <__pi_release+0x218>)
    15ca:	6018      	str	r0, [r3, #0]
    15cc:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
    15ce:	f003 f8d9 	bl	4784 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
    15d2:	f7ff fcbd 	bl	f50 <reinit_uart>
    15d6:	4a2c      	ldr	r2, [pc, #176]	; (1688 <__pi_release+0x230>)
    15d8:	6813      	ldr	r3, [r2, #0]
    15da:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    15de:	6013      	str	r3, [r2, #0]
}
    15e0:	e76b      	b.n	14ba <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15e2:	4b2a      	ldr	r3, [pc, #168]	; (168c <__pi_release+0x234>)
    15e4:	2001      	movs	r0, #1
    15e6:	681b      	ldr	r3, [r3, #0]
    15e8:	68db      	ldr	r3, [r3, #12]
    15ea:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15ec:	4a28      	ldr	r2, [pc, #160]	; (1690 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    15ee:	4929      	ldr	r1, [pc, #164]	; (1694 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15f0:	6813      	ldr	r3, [r2, #0]
    15f2:	f023 0301 	bic.w	r3, r3, #1
    15f6:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15f8:	4b27      	ldr	r3, [pc, #156]	; (1698 <__pi_release+0x240>)
    15fa:	681a      	ldr	r2, [r3, #0]
    15fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1600:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1602:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
    1606:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1608:	604a      	str	r2, [r1, #4]
    160a:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    160c:	687a      	ldr	r2, [r7, #4]
    160e:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1610:	687a      	ldr	r2, [r7, #4]
    1612:	4b22      	ldr	r3, [pc, #136]	; (169c <__pi_release+0x244>)
    1614:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1616:	2201      	movs	r2, #1
    1618:	4b21      	ldr	r3, [pc, #132]	; (16a0 <__pi_release+0x248>)
    161a:	601a      	str	r2, [r3, #0]
    161c:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    161e:	4a19      	ldr	r2, [pc, #100]	; (1684 <__pi_release+0x22c>)
    1620:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1622:	069b      	lsls	r3, r3, #26
    1624:	d4fc      	bmi.n	1620 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1626:	2201      	movs	r2, #1
    1628:	4b1e      	ldr	r3, [pc, #120]	; (16a4 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
    162a:	2037      	movs	r0, #55	; 0x37
    162c:	601a      	str	r2, [r3, #0]
    162e:	4b0f      	ldr	r3, [pc, #60]	; (166c <__pi_release+0x214>)
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	699b      	ldr	r3, [r3, #24]
    1634:	4798      	blx	r3
			goto DeepSleep;
    1636:	e763      	b.n	1500 <__pi_release+0xa8>
	__SLEEP;
    1638:	782b      	ldrb	r3, [r5, #0]
    163a:	f36f 0341 	bfc	r3, #1, #1
    163e:	702b      	strb	r3, [r5, #0]
    1640:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
    1642:	e717      	b.n	1474 <__pi_release+0x1c>
    1644:	20005000 	andcs	r5, r0, r0
    1648:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    164c:	4009202c 	andmi	r2, r9, ip, lsr #32
    1650:	2000056c 	andcs	r0, r0, ip, ror #10
    1654:	200006d4 	ldrdcs	r0, [r0], -r4
    1658:	e000ed10 	and	lr, r0, r0, lsl sp
    165c:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
    1660:	200006ac 	andcs	r0, r0, ip, lsr #13
    1664:	00005113 	andeq	r5, r0, r3, lsl r1
    1668:	4008218c 	andmi	r2, r8, ip, lsl #3
    166c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
    1670:	4009400c 	andmi	r4, r9, ip
    1674:	60082028 	andvs	r2, r8, r8, lsr #32
    1678:	43040180 	movwmi	r0, #16768	; 0x4180
    167c:	40034000 	andmi	r4, r3, r0
    1680:	100001d8 	ldrdne	r0, [r0], -r8
    1684:	40091014 	andmi	r1, r9, r4, lsl r0
    1688:	40001038 	andmi	r1, r0, r8, lsr r0
    168c:	100001a0 	andne	r0, r0, r0, lsr #3
    1690:	40091010 	andmi	r1, r9, r0, lsl r0
    1694:	40093000 	andmi	r3, r9, r0
    1698:	40091040 	andmi	r1, r9, r0, asr #32
    169c:	43220420 			; <UNDEFINED> instruction: 0x43220420
    16a0:	40091018 	andmi	r1, r9, r8, lsl r0
    16a4:	43040188 	movwmi	r0, #16776	; 0x4188
    16a8:	43220200 			; <UNDEFINED> instruction: 0x43220200
    16ac:	40082224 	andmi	r2, r8, r4, lsr #4

000016b0 <halt>:
	cli_tim;
    16b0:	2400      	movs	r4, #0
void halt (void) {
    16b2:	b508      	push	{r3, lr}
	cli_tim;
    16b4:	4b07      	ldr	r3, [pc, #28]	; (16d4 <halt+0x24>)
	diag ("PicOS halted");
    16b6:	4808      	ldr	r0, [pc, #32]	; (16d8 <halt+0x28>)
	cli_tim;
    16b8:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
    16ba:	f000 fb2d 	bl	1d18 <diag>
	mdelay (500);
    16be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    16c2:	f7ff fab7 	bl	c34 <mdelay>
	setpowermode (2);
    16c6:	2002      	movs	r0, #2
    16c8:	f7ff feb4 	bl	1434 <setpowermode>
	__PCB = NULL;
    16cc:	4b03      	ldr	r3, [pc, #12]	; (16dc <halt+0x2c>)
    16ce:	601c      	str	r4, [r3, #0]
	release;
    16d0:	f7ff fec2 	bl	1458 <__pi_release>
    16d4:	43240280 			; <UNDEFINED> instruction: 0x43240280
    16d8:	00005116 	andeq	r5, r0, r6, lsl r1
    16dc:	2000056c 	andcs	r0, r0, ip, ror #10

000016e0 <main>:

#include "scheduler.h"

}

int main (void) {
    16e0:	b510      	push	{r4, lr}
    16e2:	4b11      	ldr	r3, [pc, #68]	; (1728 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16e4:	4911      	ldr	r1, [pc, #68]	; (172c <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16e6:	4a12      	ldr	r2, [pc, #72]	; (1730 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16e8:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16ec:	4293      	cmp	r3, r2
    16ee:	d1fb      	bne.n	16e8 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16f0:	4c10      	ldr	r4, [pc, #64]	; (1734 <main+0x54>)
	system_init ();
    16f2:	f7ff fdc3 	bl	127c <system_init>
	tcv_init ();
    16f6:	f000 fedb 	bl	24b0 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16fa:	6823      	ldr	r3, [r4, #0]
    16fc:	2129      	movs	r1, #41	; 0x29
    16fe:	2000      	movs	r0, #0
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1704:	6823      	ldr	r3, [r4, #0]
    1706:	2120      	movs	r1, #32
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	2001      	movs	r0, #1
    170c:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    170e:	2100      	movs	r1, #0
    1710:	4809      	ldr	r0, [pc, #36]	; (1738 <main+0x58>)
    1712:	f000 fadb 	bl	1ccc <__pi_fork>
    1716:	4b09      	ldr	r3, [pc, #36]	; (173c <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
    1718:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    171a:	6018      	str	r0, [r3, #0]
	delay (16, 0);
    171c:	2010      	movs	r0, #16
    171e:	f000 f951 	bl	19c4 <delay>
    1722:	b662      	cpsie	i

	sti;

	__pi_release ();
    1724:	f7ff fe98 	bl	1458 <__pi_release>
    1728:	20004bfc 	strdcs	r4, [r0], -ip
    172c:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
    1730:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
    1734:	10000184 	andne	r0, r0, r4, lsl #3
    1738:	00000649 	andeq	r0, r0, r9, asr #12
    173c:	200006d4 	ldrdcs	r0, [r0], -r4

00001740 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
    1740:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
    1742:	4b0d      	ldr	r3, [pc, #52]	; (1778 <killev+0x38>)
	wfun = (aword)(pid->code);
    1744:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
    1746:	681a      	ldr	r2, [r3, #0]
    1748:	b1aa      	cbz	r2, 1776 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
    174a:	4614      	mov	r4, r2
    174c:	f834 1b10 	ldrh.w	r1, [r4], #16
    1750:	2300      	movs	r3, #0
    1752:	f001 0107 	and.w	r1, r1, #7
    1756:	e001      	b.n	175c <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
    1758:	42b5      	cmp	r5, r6
    175a:	d006      	beq.n	176a <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
    175c:	4299      	cmp	r1, r3
    175e:	dd08      	ble.n	1772 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
    1760:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1764:	3301      	adds	r3, #1
    1766:	42a8      	cmp	r0, r5
    1768:	d1f6      	bne.n	1758 <killev+0x18>
			    ) {
				wakeupev (i, j);
    176a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    176e:	889b      	ldrh	r3, [r3, #4]
    1770:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1772:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1774:	e7e8      	b.n	1748 <killev+0x8>
				break;
			}
		}
	}
}
    1776:	bd70      	pop	{r4, r5, r6, pc}
    1778:	2000056c 	andcs	r0, r0, ip, ror #10

0000177c <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    177c:	4a1d      	ldr	r2, [pc, #116]	; (17f4 <qfree+0x78>)
static void qfree (aword *ch) {
    177e:	b530      	push	{r4, r5, lr}
    1780:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1782:	6813      	ldr	r3, [r2, #0]
    1784:	b93b      	cbnz	r3, 1796 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1786:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
    1788:	4a1a      	ldr	r2, [pc, #104]	; (17f4 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    178a:	bb53      	cbnz	r3, 17e2 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
    178c:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
    178e:	4b1a      	ldr	r3, [pc, #104]	; (17f8 <qfree+0x7c>)
	m_setnextp (cc, ch);
    1790:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
    1792:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
    1794:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1796:	e953 1501 	ldrd	r1, r5, [r3, #-4]
    179a:	3101      	adds	r1, #1
    179c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    17a0:	4288      	cmp	r0, r1
    17a2:	d10b      	bne.n	17bc <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
    17a4:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
    17a6:	f850 0c04 	ldr.w	r0, [r0, #-4]
    17aa:	f853 1c04 	ldr.w	r1, [r3, #-4]
    17ae:	4401      	add	r1, r0
    17b0:	4618      	mov	r0, r3
    17b2:	3101      	adds	r1, #1
    17b4:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	e7e3      	b.n	1784 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17bc:	f850 1c04 	ldr.w	r1, [r0, #-4]
    17c0:	3101      	adds	r1, #1
    17c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    17c6:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
    17c8:	bf03      	ittte	eq
    17ca:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
    17cc:	f850 1c04 	ldreq.w	r1, [r0, #-4]
    17d0:	f853 5c04 	ldreq.w	r5, [r3, #-4]
    17d4:	461a      	movne	r2, r3
    17d6:	bf02      	ittt	eq
    17d8:	1949      	addeq	r1, r1, r5
    17da:	3101      	addeq	r1, #1
    17dc:	f840 1c04 	streq.w	r1, [r0, #-4]
    17e0:	e7ea      	b.n	17b8 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
    17e2:	f853 4c04 	ldr.w	r4, [r3, #-4]
    17e6:	f850 1c04 	ldr.w	r1, [r0, #-4]
    17ea:	428c      	cmp	r4, r1
    17ec:	d2ce      	bcs.n	178c <qfree+0x10>
		chunk = m_nextp (chunk))
    17ee:	461a      	mov	r2, r3
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	e7ca      	b.n	178a <qfree+0xe>
    17f4:	20000580 	andcs	r0, r0, r0, lsl #11
    17f8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

000017fc <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17fc:	4a03      	ldr	r2, [pc, #12]	; (180c <dgout+0x10>)
    17fe:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    1800:	071b      	lsls	r3, r3, #28
    1802:	d4fc      	bmi.n	17fe <dgout+0x2>
	diag_wchar (c, a);
    1804:	4b02      	ldr	r3, [pc, #8]	; (1810 <dgout+0x14>)
    1806:	b2c0      	uxtb	r0, r0
    1808:	6018      	str	r0, [r3, #0]
}
    180a:	4770      	bx	lr
    180c:	40001018 	andmi	r1, r0, r8, lsl r0
    1810:	40001000 	andmi	r1, r0, r0

00001814 <__pi_badstate>:
	syserror (ESTATE, "state");
    1814:	2007      	movs	r0, #7
void __pi_badstate (void) {
    1816:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    1818:	4901      	ldr	r1, [pc, #4]	; (1820 <__pi_badstate+0xc>)
    181a:	f7ff fa5f 	bl	cdc <__pi_syserror>
    181e:	bf00      	nop
    1820:	00005168 	andeq	r5, r0, r8, ror #2

00001824 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    1824:	4a08      	ldr	r2, [pc, #32]	; (1848 <utimer_add+0x24>)
void utimer_add (address ut) {
    1826:	4603      	mov	r3, r0
    1828:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    182a:	2000      	movs	r0, #0
void utimer_add (address ut) {
    182c:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    182e:	f852 4b04 	ldr.w	r4, [r2], #4
    1832:	b12c      	cbz	r4, 1840 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    1834:	3001      	adds	r0, #1
    1836:	2804      	cmp	r0, #4
    1838:	d1f9      	bne.n	182e <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    183a:	4904      	ldr	r1, [pc, #16]	; (184c <utimer_add+0x28>)
    183c:	f7ff fa4e 	bl	cdc <__pi_syserror>
	__pi_utims [i] = ut;
    1840:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    1844:	bd10      	pop	{r4, pc}
    1846:	bf00      	nop
    1848:	200006c4 	andcs	r0, r0, r4, asr #13
    184c:	0000516e 	andeq	r5, r0, lr, ror #2

00001850 <__pi_utimer_set>:
	*t = v;
    1850:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    1852:	f7ff ba8d 	b.w	d70 <tci_run_auxiliary_timer>
	...

00001858 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    1858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    185a:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    185c:	4608      	mov	r0, r1
    185e:	f7ff fb25 	bl	eac <tci_update_delay_ticks>
    1862:	2800      	cmp	r0, #0
    1864:	d154      	bne.n	1910 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1866:	4b2b      	ldr	r3, [pc, #172]	; (1914 <update_n_wake+0xbc>)
    1868:	4d2b      	ldr	r5, [pc, #172]	; (1918 <update_n_wake+0xc0>)
    186a:	8819      	ldrh	r1, [r3, #0]
    186c:	882a      	ldrh	r2, [r5, #0]
    186e:	b289      	uxth	r1, r1
    1870:	428a      	cmp	r2, r1
    1872:	492a      	ldr	r1, [pc, #168]	; (191c <update_n_wake+0xc4>)
    1874:	d803      	bhi.n	187e <update_n_wake+0x26>
    1876:	8808      	ldrh	r0, [r1, #0]
    1878:	b280      	uxth	r0, r0
    187a:	4282      	cmp	r2, r0
    187c:	d20d      	bcs.n	189a <update_n_wake+0x42>
    187e:	881e      	ldrh	r6, [r3, #0]
    1880:	8808      	ldrh	r0, [r1, #0]
    1882:	b2b6      	uxth	r6, r6
    1884:	b280      	uxth	r0, r0
    1886:	4286      	cmp	r6, r0
    1888:	d236      	bcs.n	18f8 <update_n_wake+0xa0>
    188a:	8818      	ldrh	r0, [r3, #0]
    188c:	b280      	uxth	r0, r0
    188e:	4282      	cmp	r2, r0
    1890:	d903      	bls.n	189a <update_n_wake+0x42>
    1892:	8808      	ldrh	r0, [r1, #0]
    1894:	b280      	uxth	r0, r0
    1896:	4282      	cmp	r2, r0
    1898:	d32e      	bcc.n	18f8 <update_n_wake+0xa0>
		for_all_tasks (i) {
    189a:	4a21      	ldr	r2, [pc, #132]	; (1920 <update_n_wake+0xc8>)
    189c:	6810      	ldr	r0, [r2, #0]
    189e:	b918      	cbnz	r0, 18a8 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    18a0:	8818      	ldrh	r0, [r3, #0]
    18a2:	4404      	add	r4, r0
    18a4:	802c      	strh	r4, [r5, #0]
    18a6:	e02c      	b.n	1902 <update_n_wake+0xaa>
			if (!twaiting (i))
    18a8:	8806      	ldrh	r6, [r0, #0]
    18aa:	0732      	lsls	r2, r6, #28
    18ac:	d51b      	bpl.n	18e6 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18ae:	881f      	ldrh	r7, [r3, #0]
    18b0:	8842      	ldrh	r2, [r0, #2]
    18b2:	b2bf      	uxth	r7, r7
    18b4:	42ba      	cmp	r2, r7
    18b6:	d803      	bhi.n	18c0 <update_n_wake+0x68>
    18b8:	880f      	ldrh	r7, [r1, #0]
    18ba:	b2bf      	uxth	r7, r7
    18bc:	42ba      	cmp	r2, r7
    18be:	d20f      	bcs.n	18e0 <update_n_wake+0x88>
    18c0:	f8b3 c000 	ldrh.w	ip, [r3]
    18c4:	880f      	ldrh	r7, [r1, #0]
    18c6:	fa1f fc8c 	uxth.w	ip, ip
    18ca:	b2bf      	uxth	r7, r7
    18cc:	45bc      	cmp	ip, r7
    18ce:	d20c      	bcs.n	18ea <update_n_wake+0x92>
    18d0:	881f      	ldrh	r7, [r3, #0]
    18d2:	b2bf      	uxth	r7, r7
    18d4:	42ba      	cmp	r2, r7
    18d6:	d903      	bls.n	18e0 <update_n_wake+0x88>
    18d8:	880f      	ldrh	r7, [r1, #0]
    18da:	b2bf      	uxth	r7, r7
    18dc:	42ba      	cmp	r2, r7
    18de:	d304      	bcc.n	18ea <update_n_wake+0x92>
				wakeuptm (i);
    18e0:	f026 060f 	bic.w	r6, r6, #15
    18e4:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    18e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    18e8:	e7d9      	b.n	189e <update_n_wake+0x46>
				d = i->Timer - znew;
    18ea:	881e      	ldrh	r6, [r3, #0]
    18ec:	1b92      	subs	r2, r2, r6
    18ee:	b292      	uxth	r2, r2
    18f0:	4294      	cmp	r4, r2
    18f2:	bf28      	it	cs
    18f4:	4614      	movcs	r4, r2
    18f6:	e7f6      	b.n	18e6 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    18f8:	8818      	ldrh	r0, [r3, #0]
    18fa:	1a12      	subs	r2, r2, r0
    18fc:	b292      	uxth	r2, r2
    18fe:	4294      	cmp	r4, r2
    1900:	d9ce      	bls.n	18a0 <update_n_wake+0x48>
	__pi_old = znew;
    1902:	881b      	ldrh	r3, [r3, #0]
    1904:	b29b      	uxth	r3, r3
    1906:	800b      	strh	r3, [r1, #0]
}
    1908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    190c:	f7ff ba10 	b.w	d30 <tci_run_delay_timer>
}
    1910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1912:	bf00      	nop
    1914:	200006c0 	andcs	r0, r0, r0, asr #13
    1918:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
    191c:	200006b6 			; <UNDEFINED> instruction: 0x200006b6
    1920:	2000056c 	andcs	r0, r0, ip, ror #10

00001924 <proceed>:
void proceed (word state) {
    1924:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    1926:	4b03      	ldr	r3, [pc, #12]	; (1934 <proceed+0x10>)
    1928:	0100      	lsls	r0, r0, #4
    192a:	681b      	ldr	r3, [r3, #0]
    192c:	8018      	strh	r0, [r3, #0]
	release;
    192e:	f7ff fd93 	bl	1458 <__pi_release>
    1932:	bf00      	nop
    1934:	200006d4 	ldrdcs	r0, [r0], -r4

00001938 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1938:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    193a:	4b0a      	ldr	r3, [pc, #40]	; (1964 <__pi_wait+0x2c>)
    193c:	681c      	ldr	r4, [r3, #0]
    193e:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1940:	f013 0f04 	tst.w	r3, #4
    1944:	f003 0207 	and.w	r2, r3, #7
    1948:	d003      	beq.n	1952 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    194a:	2005      	movs	r0, #5
    194c:	4906      	ldr	r1, [pc, #24]	; (1968 <__pi_wait+0x30>)
    194e:	f7ff f9c5 	bl	cdc <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    1952:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    1956:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1958:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    195a:	8191      	strh	r1, [r2, #12]
    195c:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    195e:	8023      	strh	r3, [r4, #0]
}
    1960:	bd10      	pop	{r4, pc}
    1962:	bf00      	nop
    1964:	200006d4 	ldrdcs	r0, [r0], -r4
    1968:	00005173 	andeq	r5, r0, r3, ror r1

0000196c <__pi_trigger>:
void __pi_trigger (aword event) {
    196c:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    196e:	4b0b      	ldr	r3, [pc, #44]	; (199c <__pi_trigger+0x30>)
    1970:	681a      	ldr	r2, [r3, #0]
    1972:	b192      	cbz	r2, 199a <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    1974:	4614      	mov	r4, r2
    1976:	2300      	movs	r3, #0
    1978:	f834 1b10 	ldrh.w	r1, [r4], #16
    197c:	f001 0107 	and.w	r1, r1, #7
    1980:	4299      	cmp	r1, r3
    1982:	dd08      	ble.n	1996 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    1984:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1988:	3301      	adds	r3, #1
    198a:	4285      	cmp	r5, r0
    198c:	d1f8      	bne.n	1980 <__pi_trigger+0x14>
				wakeupev (i, j);
    198e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1992:	889b      	ldrh	r3, [r3, #4]
    1994:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1996:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1998:	e7eb      	b.n	1972 <__pi_trigger+0x6>
}
    199a:	bd30      	pop	{r4, r5, pc}
    199c:	2000056c 	andcs	r0, r0, ip, ror #10

000019a0 <__pi_join>:
aword __pi_join (aword pid, word st) {
    19a0:	b510      	push	{r4, lr}
    19a2:	4604      	mov	r4, r0
	for_all_tasks (i) {
    19a4:	4b06      	ldr	r3, [pc, #24]	; (19c0 <__pi_join+0x20>)
    19a6:	681b      	ldr	r3, [r3, #0]
    19a8:	b90b      	cbnz	r3, 19ae <__pi_join+0xe>
	return 0;
    19aa:	461c      	mov	r4, r3
    19ac:	e004      	b.n	19b8 <__pi_join+0x18>
		if ((aword)i == pid) {
    19ae:	42a3      	cmp	r3, r4
    19b0:	d104      	bne.n	19bc <__pi_join+0x1c>
			__pi_wait (pid, st);
    19b2:	4620      	mov	r0, r4
    19b4:	f7ff ffc0 	bl	1938 <__pi_wait>
}
    19b8:	4620      	mov	r0, r4
    19ba:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    19bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    19be:	e7f3      	b.n	19a8 <__pi_join+0x8>
    19c0:	2000056c 	andcs	r0, r0, ip, ror #10

000019c4 <delay>:
void delay (word d, word state) {
    19c4:	b538      	push	{r3, r4, r5, lr}
    19c6:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    19c8:	4d0a      	ldr	r5, [pc, #40]	; (19f4 <delay+0x30>)
    19ca:	682a      	ldr	r2, [r5, #0]
    19cc:	8813      	ldrh	r3, [r2, #0]
    19ce:	f003 0307 	and.w	r3, r3, #7
    19d2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    19d6:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    19d8:	2101      	movs	r1, #1
    19da:	f7ff ff3d 	bl	1858 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    19de:	4b06      	ldr	r3, [pc, #24]	; (19f8 <delay+0x34>)
    19e0:	8818      	ldrh	r0, [r3, #0]
    19e2:	682b      	ldr	r3, [r5, #0]
    19e4:	4404      	add	r4, r0
    19e6:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    19e8:	682a      	ldr	r2, [r5, #0]
    19ea:	8813      	ldrh	r3, [r2, #0]
    19ec:	f043 0308 	orr.w	r3, r3, #8
    19f0:	8013      	strh	r3, [r2, #0]
}
    19f2:	bd38      	pop	{r3, r4, r5, pc}
    19f4:	200006d4 	ldrdcs	r0, [r0], -r4
    19f8:	200006b6 			; <UNDEFINED> instruction: 0x200006b6

000019fc <running>:
	if (fun == NULL)
    19fc:	4603      	mov	r3, r0
    19fe:	b910      	cbnz	r0, 1a06 <running+0xa>
		return (int) __pi_curr;
    1a00:	4b05      	ldr	r3, [pc, #20]	; (1a18 <running+0x1c>)
    1a02:	6818      	ldr	r0, [r3, #0]
    1a04:	4770      	bx	lr
	for_all_tasks (i)
    1a06:	4a05      	ldr	r2, [pc, #20]	; (1a1c <running+0x20>)
    1a08:	6810      	ldr	r0, [r2, #0]
    1a0a:	b900      	cbnz	r0, 1a0e <running+0x12>
}
    1a0c:	4770      	bx	lr
		if (i->code == fun)
    1a0e:	6842      	ldr	r2, [r0, #4]
    1a10:	429a      	cmp	r2, r3
    1a12:	d0fb      	beq.n	1a0c <running+0x10>
	for_all_tasks (i)
    1a14:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1a16:	e7f8      	b.n	1a0a <running+0xe>
    1a18:	200006d4 	ldrdcs	r0, [r0], -r4
    1a1c:	2000056c 	andcs	r0, r0, ip, ror #10

00001a20 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1a20:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1a22:	2000      	movs	r0, #0
    1a24:	5c1a      	ldrb	r2, [r3, r0]
    1a26:	b902      	cbnz	r2, 1a2a <__pi_strlen+0xa>
}
    1a28:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    1a2a:	3001      	adds	r0, #1
    1a2c:	e7fa      	b.n	1a24 <__pi_strlen+0x4>

00001a2e <__pi_strcpy>:
	while ((Boolean)(*d++ = *s++));
    1a2e:	3801      	subs	r0, #1
    1a30:	f811 3b01 	ldrb.w	r3, [r1], #1
    1a34:	f800 3f01 	strb.w	r3, [r0, #1]!
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d1f9      	bne.n	1a30 <__pi_strcpy+0x2>
}
    1a3c:	4770      	bx	lr

00001a3e <__pi_strncpy>:
	while (n-- && (*s != '\0'))
    1a3e:	3901      	subs	r1, #1
    1a40:	4402      	add	r2, r0
    1a42:	4290      	cmp	r0, r2
    1a44:	d102      	bne.n	1a4c <__pi_strncpy+0xe>
	*d = '\0';
    1a46:	2300      	movs	r3, #0
    1a48:	7003      	strb	r3, [r0, #0]
}
    1a4a:	4770      	bx	lr
	while (n-- && (*s != '\0'))
    1a4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1a50:	2b00      	cmp	r3, #0
    1a52:	d0f8      	beq.n	1a46 <__pi_strncpy+0x8>
		*d++ = *s++;
    1a54:	f800 3b01 	strb.w	r3, [r0], #1
    1a58:	e7f3      	b.n	1a42 <__pi_strncpy+0x4>

00001a5a <__pi_memcpy>:
	while (n--)
    1a5a:	3801      	subs	r0, #1
    1a5c:	440a      	add	r2, r1
    1a5e:	4291      	cmp	r1, r2
    1a60:	d100      	bne.n	1a64 <__pi_memcpy+0xa>
}
    1a62:	4770      	bx	lr
		*dest++ = *src++;
    1a64:	f811 3b01 	ldrb.w	r3, [r1], #1
    1a68:	f800 3f01 	strb.w	r3, [r0, #1]!
    1a6c:	e7f7      	b.n	1a5e <__pi_memcpy+0x4>

00001a6e <__pi_memset>:
	while (n--)
    1a6e:	4402      	add	r2, r0
    1a70:	4290      	cmp	r0, r2
    1a72:	d100      	bne.n	1a76 <__pi_memset+0x8>
}
    1a74:	4770      	bx	lr
		*dest++ = c;
    1a76:	f800 1b01 	strb.w	r1, [r0], #1
    1a7a:	e7f9      	b.n	1a70 <__pi_memset+0x2>

00001a7c <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1a7c:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    1a7e:	b119      	cbz	r1, 1a88 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1a80:	2003      	movs	r0, #3
    1a82:	4905      	ldr	r1, [pc, #20]	; (1a98 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1a84:	f7ff f92a 	bl	cdc <__pi_syserror>
	if (ioreq [loc] != NULL)
    1a88:	4b04      	ldr	r3, [pc, #16]	; (1a9c <adddevfunc+0x20>)
    1a8a:	681a      	ldr	r2, [r3, #0]
    1a8c:	b112      	cbz	r2, 1a94 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1a8e:	2004      	movs	r0, #4
    1a90:	4901      	ldr	r1, [pc, #4]	; (1a98 <adddevfunc+0x1c>)
    1a92:	e7f7      	b.n	1a84 <adddevfunc+0x8>
	ioreq [loc] = rf;
    1a94:	6018      	str	r0, [r3, #0]
}
    1a96:	bd08      	pop	{r3, pc}
    1a98:	00005176 	andeq	r5, r0, r6, ror r1
    1a9c:	20000570 	andcs	r0, r0, r0, ror r5

00001aa0 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1aa4:	4604      	mov	r4, r0
    1aa6:	4616      	mov	r6, r2
    1aa8:	461d      	mov	r5, r3
    1aaa:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1aae:	b921      	cbnz	r1, 1aba <io+0x1a>
    1ab0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1b38 <io+0x98>
    1ab4:	f8d9 3000 	ldr.w	r3, [r9]
    1ab8:	b91b      	cbnz	r3, 1ac2 <io+0x22>
		syserror (ENODEVICE, "io");
    1aba:	2001      	movs	r0, #1
    1abc:	491d      	ldr	r1, [pc, #116]	; (1b34 <io+0x94>)
    1abe:	f7ff f90d 	bl	cdc <__pi_syserror>
	if (len == 0)
    1ac2:	f1b8 0f00 	cmp.w	r8, #0
    1ac6:	d028      	beq.n	1b1a <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1ac8:	4642      	mov	r2, r8
    1aca:	4629      	mov	r1, r5
    1acc:	4630      	mov	r0, r6
    1ace:	4798      	blx	r3
	if (ret >= 0)
    1ad0:	2800      	cmp	r0, #0
    1ad2:	da23      	bge.n	1b1c <io+0x7c>
	if (ret == -1) {
    1ad4:	1c41      	adds	r1, r0, #1
    1ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1ada:	d108      	bne.n	1aee <io+0x4e>
		if (retry == WNONE)
    1adc:	429c      	cmp	r4, r3
    1ade:	d01c      	beq.n	1b1a <io+0x7a>
		iowait (dev, operation, retry);
    1ae0:	4621      	mov	r1, r4
    1ae2:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1ae6:	f7ff ff27 	bl	1938 <__pi_wait>
			release;
    1aea:	f7ff fcb5 	bl	1458 <__pi_release>
	if (ret == -2) {
    1aee:	1c82      	adds	r2, r0, #2
    1af0:	d116      	bne.n	1b20 <io+0x80>
		if (retry != WNONE) {
    1af2:	429c      	cmp	r4, r3
    1af4:	f8d9 9000 	ldr.w	r9, [r9]
    1af8:	d00a      	beq.n	1b10 <io+0x70>
			iowait (dev, operation, retry);
    1afa:	4621      	mov	r1, r4
    1afc:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1b00:	f7ff ff1a 	bl	1938 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1b04:	4642      	mov	r2, r8
    1b06:	4629      	mov	r1, r5
    1b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b0c:	47c8      	blx	r9
    1b0e:	e7ec      	b.n	1aea <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1b10:	4642      	mov	r2, r8
    1b12:	4629      	mov	r1, r5
    1b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b18:	47c8      	blx	r9
		return 0;
    1b1a:	2000      	movs	r0, #0
}
    1b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1b20:	429c      	cmp	r4, r3
    1b22:	d0fa      	beq.n	1b1a <io+0x7a>
		delay (-ret - 2, retry);
    1b24:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1b28:	30fe      	adds	r0, #254	; 0xfe
    1b2a:	4621      	mov	r1, r4
    1b2c:	b280      	uxth	r0, r0
    1b2e:	f7ff ff49 	bl	19c4 <delay>
		release;
    1b32:	e7da      	b.n	1aea <io+0x4a>
    1b34:	0000517b 	andeq	r5, r0, fp, ror r1
    1b38:	20000570 	andcs	r0, r0, r0, ror r5

00001b3c <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b3c:	4a0d      	ldr	r2, [pc, #52]	; (1b74 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    1b3e:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b40:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1b44:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1b48:	089b      	lsrs	r3, r3, #2
    1b4a:	1e59      	subs	r1, r3, #1
    1b4c:	29ff      	cmp	r1, #255	; 0xff
    1b4e:	d803      	bhi.n	1b58 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1b50:	2004      	movs	r0, #4
    1b52:	4909      	ldr	r1, [pc, #36]	; (1b78 <__pi_malloc_init+0x3c>)
    1b54:	f7ff f8c2 	bl	cdc <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b58:	4908      	ldr	r1, [pc, #32]	; (1b7c <__pi_malloc_init+0x40>)
    1b5a:	1d10      	adds	r0, r2, #4
    1b5c:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b5e:	2000      	movs	r0, #0
    1b60:	4907      	ldr	r1, [pc, #28]	; (1b80 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b62:	3b02      	subs	r3, #2
    1b64:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b66:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b6a:	4a06      	ldr	r2, [pc, #24]	; (1b84 <__pi_malloc_init+0x48>)
    1b6c:	6013      	str	r3, [r2, #0]
    1b6e:	4a06      	ldr	r2, [pc, #24]	; (1b88 <__pi_malloc_init+0x4c>)
    1b70:	6013      	str	r3, [r2, #0]
}
    1b72:	bd08      	pop	{r3, pc}
    1b74:	200006d8 	ldrdcs	r0, [r0], -r8
    1b78:	0000517e 	andeq	r5, r0, lr, ror r1
    1b7c:	20000580 	andcs	r0, r0, r0, lsl #11
    1b80:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1b84:	20000574 	andcs	r0, r0, r4, ror r5
    1b88:	2000057c 	andcs	r0, r0, ip, ror r5

00001b8c <__pi_free>:
void __pi_free (aword *ch) {
    1b8c:	b508      	push	{r3, lr}
	if (ch == NULL)
    1b8e:	b1c8      	cbz	r0, 1bc4 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b90:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1b94:	2b00      	cmp	r3, #0
    1b96:	db03      	blt.n	1ba0 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1b98:	2006      	movs	r0, #6
    1b9a:	490b      	ldr	r1, [pc, #44]	; (1bc8 <__pi_free+0x3c>)
    1b9c:	f7ff f89e 	bl	cdc <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1ba0:	490a      	ldr	r1, [pc, #40]	; (1bcc <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1ba2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1ba6:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1ba8:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1bac:	4413      	add	r3, r2
    1bae:	600b      	str	r3, [r1, #0]
	QFREE;
    1bb0:	f7ff fde4 	bl	177c <qfree>
	if (mevent [MA_NP] . nwait) {
    1bb4:	4806      	ldr	r0, [pc, #24]	; (1bd0 <__pi_free+0x44>)
    1bb6:	7803      	ldrb	r3, [r0, #0]
    1bb8:	b123      	cbz	r3, 1bc4 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1bba:	f7ff fed7 	bl	196c <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1bbe:	7803      	ldrb	r3, [r0, #0]
    1bc0:	3b01      	subs	r3, #1
    1bc2:	7003      	strb	r3, [r0, #0]
}
    1bc4:	bd08      	pop	{r3, pc}
    1bc6:	bf00      	nop
    1bc8:	00005183 	andeq	r5, r0, r3, lsl #3
    1bcc:	20000574 	andcs	r0, r0, r4, ror r5
    1bd0:	20000578 	andcs	r0, r0, r8, ror r5

00001bd4 <kill>:
void kill (aword pid) {
    1bd4:	b510      	push	{r4, lr}
	if (pid == 0)
    1bd6:	b908      	cbnz	r0, 1bdc <kill+0x8>
		pid = (aword) __pi_curr;
    1bd8:	4b0f      	ldr	r3, [pc, #60]	; (1c18 <kill+0x44>)
    1bda:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1bdc:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1bde:	4b0f      	ldr	r3, [pc, #60]	; (1c1c <kill+0x48>)
    1be0:	681c      	ldr	r4, [r3, #0]
    1be2:	b91c      	cbnz	r4, 1bec <kill+0x18>
	syserror (EREQPAR, "kpi");
    1be4:	2003      	movs	r0, #3
    1be6:	490e      	ldr	r1, [pc, #56]	; (1c20 <kill+0x4c>)
    1be8:	f7ff f878 	bl	cdc <__pi_syserror>
		if ((aword)i == pid) {
    1bec:	4284      	cmp	r4, r0
    1bee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1bf0:	d10e      	bne.n	1c10 <kill+0x3c>
			if (j == NULL)
    1bf2:	b95a      	cbnz	r2, 1c0c <kill+0x38>
				__PCB = i->Next;
    1bf4:	6019      	str	r1, [r3, #0]
			killev (i);
    1bf6:	4620      	mov	r0, r4
    1bf8:	f7ff fda2 	bl	1740 <killev>
			ufree (i);
    1bfc:	f7ff ffc6 	bl	1b8c <__pi_free>
			if (i == __pi_curr)
    1c00:	4b05      	ldr	r3, [pc, #20]	; (1c18 <kill+0x44>)
    1c02:	681b      	ldr	r3, [r3, #0]
    1c04:	42a3      	cmp	r3, r4
    1c06:	d106      	bne.n	1c16 <kill+0x42>
				release;
    1c08:	f7ff fc26 	bl	1458 <__pi_release>
				j->Next = i->Next;
    1c0c:	62d1      	str	r1, [r2, #44]	; 0x2c
    1c0e:	e7f2      	b.n	1bf6 <kill+0x22>
    1c10:	4622      	mov	r2, r4
    1c12:	460c      	mov	r4, r1
    1c14:	e7e5      	b.n	1be2 <kill+0xe>
}
    1c16:	bd10      	pop	{r4, pc}
    1c18:	200006d4 	ldrdcs	r0, [r0], -r4
    1c1c:	2000056c 	andcs	r0, r0, ip, ror #10
    1c20:	00005188 	andeq	r5, r0, r8, lsl #3

00001c24 <__pi_malloc>:
	if (size < 8)
    1c24:	2807      	cmp	r0, #7
		_size = 2;
    1c26:	bf98      	it	ls
    1c28:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    1c2a:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c2c:	4b21      	ldr	r3, [pc, #132]	; (1cb4 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    1c2e:	bf88      	it	hi
    1c30:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c32:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c34:	4920      	ldr	r1, [pc, #128]	; (1cb8 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1c36:	bf88      	it	hi
    1c38:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c3a:	b94c      	cbnz	r4, 1c50 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1c3c:	4a1f      	ldr	r2, [pc, #124]	; (1cbc <__pi_malloc+0x98>)
    1c3e:	7853      	ldrb	r3, [r2, #1]
    1c40:	2bff      	cmp	r3, #255	; 0xff
    1c42:	d001      	beq.n	1c48 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1c44:	3301      	adds	r3, #1
    1c46:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1c48:	2200      	movs	r2, #0
    1c4a:	4b1d      	ldr	r3, [pc, #116]	; (1cc0 <__pi_malloc+0x9c>)
    1c4c:	601a      	str	r2, [r3, #0]
	return chunk;
    1c4e:	e02f      	b.n	1cb0 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c50:	6862      	ldr	r2, [r4, #4]
    1c52:	428a      	cmp	r2, r1
    1c54:	d003      	beq.n	1c5e <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1c56:	2006      	movs	r0, #6
    1c58:	491a      	ldr	r1, [pc, #104]	; (1cc4 <__pi_malloc+0xa0>)
    1c5a:	f7ff f83f 	bl	cdc <__pi_syserror>
		if (m_size (chunk) >= _size)
    1c5e:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1c62:	4285      	cmp	r5, r0
    1c64:	d202      	bcs.n	1c6c <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1c66:	4623      	mov	r3, r4
    1c68:	4614      	mov	r4, r2
    1c6a:	e7e6      	b.n	1c3a <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1c6c:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1c72:	1a1b      	subs	r3, r3, r0
    1c74:	2b08      	cmp	r3, #8
    1c76:	d909      	bls.n	1c8c <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1c78:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1c7c:	3001      	adds	r0, #1
    1c7e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1c82:	3b01      	subs	r3, #1
    1c84:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1c88:	f7ff fd78 	bl	177c <qfree>
		mevent [MA_NP] . nfail = 0;
    1c8c:	2200      	movs	r2, #0
    1c8e:	4b0b      	ldr	r3, [pc, #44]	; (1cbc <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1c90:	490d      	ldr	r1, [pc, #52]	; (1cc8 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1c92:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1c94:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1c98:	680b      	ldr	r3, [r1, #0]
    1c9a:	1a9b      	subs	r3, r3, r2
    1c9c:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1c9e:	4908      	ldr	r1, [pc, #32]	; (1cc0 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1ca0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ca4:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1ca6:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1caa:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1cac:	bf38      	it	cc
    1cae:	600b      	strcc	r3, [r1, #0]
}
    1cb0:	4620      	mov	r0, r4
    1cb2:	bd38      	pop	{r3, r4, r5, pc}
    1cb4:	20000580 	andcs	r0, r0, r0, lsl #11
    1cb8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1cbc:	20000578 	andcs	r0, r0, r8, ror r5
    1cc0:	2000057c 	andcs	r0, r0, ip, ror r5
    1cc4:	0000518c 	andeq	r5, r0, ip, lsl #3
    1cc8:	20000574 	andcs	r0, r0, r4, ror r5

00001ccc <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1ccc:	b538      	push	{r3, r4, r5, lr}
    1cce:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1cd0:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    1cd2:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1cd4:	f7ff ffa6 	bl	1c24 <__pi_malloc>
    1cd8:	2300      	movs	r3, #0
    1cda:	b138      	cbz	r0, 1cec <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1cdc:	4a07      	ldr	r2, [pc, #28]	; (1cfc <__pi_fork+0x30>)
	i->Status = 0;
    1cde:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    1ce0:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    1ce2:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1ce4:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1ce8:	b90b      	cbnz	r3, 1cee <__pi_fork+0x22>
			__PCB = i;
    1cea:	6010      	str	r0, [r2, #0]
}
    1cec:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    1cee:	461a      	mov	r2, r3
    1cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d1fb      	bne.n	1cee <__pi_fork+0x22>
			j->Next = i;
    1cf6:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1cf8:	e7f8      	b.n	1cec <__pi_fork+0x20>
    1cfa:	bf00      	nop
    1cfc:	2000056c 	andcs	r0, r0, ip, ror #10

00001d00 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1d00:	4a04      	ldr	r2, [pc, #16]	; (1d14 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1d02:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1d04:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1d06:	4803      	ldr	r0, [pc, #12]	; (1d14 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1d08:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    1d0a:	bf1c      	itt	ne
    1d0c:	3301      	addne	r3, #1
    1d0e:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1d10:	f7ff be12 	b.w	1938 <__pi_wait>
    1d14:	20000578 	andcs	r0, r0, r8, ror r5

00001d18 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1d18:	b40f      	push	{r0, r1, r2, r3}
    1d1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1d1e:	ab0a      	add	r3, sp, #40	; 0x28
    1d20:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1d24:	2015      	movs	r0, #21
	va_start (ap, mess);
    1d26:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1d28:	4b46      	ldr	r3, [pc, #280]	; (1e44 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1d2a:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1d2c:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    1d2e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1e4c <diag+0x134>
	diag_disable_int (a, is);
    1d32:	695b      	ldr	r3, [r3, #20]
    1d34:	4798      	blx	r3
	while (*mess != '\0') {
    1d36:	7820      	ldrb	r0, [r4, #0]
    1d38:	b998      	cbnz	r0, 1d62 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    1d3a:	200d      	movs	r0, #13
    1d3c:	f7ff fd5e 	bl	17fc <dgout>
	dgout ('\n');
    1d40:	200a      	movs	r0, #10
    1d42:	f7ff fd5b 	bl	17fc <dgout>
    1d46:	4a40      	ldr	r2, [pc, #256]	; (1e48 <diag+0x130>)
    1d48:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    1d4a:	071b      	lsls	r3, r3, #28
    1d4c:	d4fc      	bmi.n	1d48 <diag+0x30>
	diag_enable_int (a, is);
    1d4e:	4b3d      	ldr	r3, [pc, #244]	; (1e44 <diag+0x12c>)
    1d50:	2015      	movs	r0, #21
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	691b      	ldr	r3, [r3, #16]
    1d56:	4798      	blx	r3
}
    1d58:	b003      	add	sp, #12
    1d5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d5e:	b004      	add	sp, #16
    1d60:	4770      	bx	lr
		if (*mess == '%') {
    1d62:	2825      	cmp	r0, #37	; 0x25
    1d64:	f104 0601 	add.w	r6, r4, #1
    1d68:	d169      	bne.n	1e3e <diag+0x126>
			if (*mess == 'l') {
    1d6a:	9b01      	ldr	r3, [sp, #4]
    1d6c:	7862      	ldrb	r2, [r4, #1]
    1d6e:	f853 1b04 	ldr.w	r1, [r3], #4
    1d72:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1d74:	bf08      	it	eq
    1d76:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1d78:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1d7a:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1d7c:	bf0c      	ite	eq
    1d7e:	2520      	moveq	r5, #32
				bc = 16;
    1d80:	2510      	movne	r5, #16
			switch (*mess) {
    1d82:	2b75      	cmp	r3, #117	; 0x75
    1d84:	d04e      	beq.n	1e24 <diag+0x10c>
    1d86:	d80a      	bhi.n	1d9e <diag+0x86>
    1d88:	2b64      	cmp	r3, #100	; 0x64
    1d8a:	d01c      	beq.n	1dc6 <diag+0xae>
    1d8c:	2b73      	cmp	r3, #115	; 0x73
    1d8e:	d052      	beq.n	1e36 <diag+0x11e>
				dgout ('%');
    1d90:	2025      	movs	r0, #37	; 0x25
    1d92:	f7ff fd33 	bl	17fc <dgout>
				dgout (*mess);
    1d96:	7830      	ldrb	r0, [r6, #0]
    1d98:	f7ff fd30 	bl	17fc <dgout>
    1d9c:	e010      	b.n	1dc0 <diag+0xa8>
			switch (*mess) {
    1d9e:	2b78      	cmp	r3, #120	; 0x78
    1da0:	d1f6      	bne.n	1d90 <diag+0x78>
    1da2:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1da4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1e50 <diag+0x138>
					i += 4;
    1da8:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1daa:	1b2b      	subs	r3, r5, r4
    1dac:	fa21 f303 	lsr.w	r3, r1, r3
    1db0:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1db4:	f819 0003 	ldrb.w	r0, [r9, r3]
    1db8:	f7ff fd20 	bl	17fc <dgout>
				while (i < bc) {
    1dbc:	42a5      	cmp	r5, r4
    1dbe:	dcf3      	bgt.n	1da8 <diag+0x90>
			mess++;
    1dc0:	3601      	adds	r6, #1
					d /= 10;
    1dc2:	4634      	mov	r4, r6
    1dc4:	e7b7      	b.n	1d36 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1dc6:	1e6b      	subs	r3, r5, #1
    1dc8:	fa21 f303 	lsr.w	r3, r1, r3
    1dcc:	07da      	lsls	r2, r3, #31
    1dce:	d509      	bpl.n	1de4 <diag+0xcc>
					dgout ('-');
    1dd0:	202d      	movs	r0, #45	; 0x2d
    1dd2:	f7ff fd13 	bl	17fc <dgout>
					if (bc == 16)
    1dd6:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1dd8:	bf04      	itt	eq
    1dda:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    1dde:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    1de2:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1de4:	f242 7410 	movw	r4, #10000	; 0x2710
    1de8:	2d10      	cmp	r5, #16
    1dea:	bf18      	it	ne
    1dec:	4644      	movne	r4, r8
					v = (word) (val / d);
    1dee:	fbb1 f5f4 	udiv	r5, r1, r4
    1df2:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1df4:	b935      	cbnz	r5, 1e04 <diag+0xec>
    1df6:	2c01      	cmp	r4, #1
    1df8:	d004      	beq.n	1e04 <diag+0xec>
					d /= 10;
    1dfa:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    1dfe:	e7f6      	b.n	1dee <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1e00:	4c12      	ldr	r4, [pc, #72]	; (1e4c <diag+0x134>)
    1e02:	e7f4      	b.n	1dee <diag+0xd6>
					dgout (v + '0');
    1e04:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1e08:	b280      	uxth	r0, r0
    1e0a:	f7ff fcf7 	bl	17fc <dgout>
					if (d == 0) break;
    1e0e:	2c09      	cmp	r4, #9
					d /= 10;
    1e10:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1e14:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1e18:	d9d2      	bls.n	1dc0 <diag+0xa8>
					v = (word) (val / d);
    1e1a:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    1e1e:	461c      	mov	r4, r3
					v = (word) (val / d);
    1e20:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1e22:	e7ef      	b.n	1e04 <diag+0xec>
				if (bc == 16)
    1e24:	2d10      	cmp	r5, #16
    1e26:	d1eb      	bne.n	1e00 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1e28:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1e2c:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1e2e:	e7de      	b.n	1dee <diag+0xd6>
					dgout (*s);
    1e30:	f7ff fce4 	bl	17fc <dgout>
					s++;
    1e34:	3101      	adds	r1, #1
				while (*s != '\0') {
    1e36:	7808      	ldrb	r0, [r1, #0]
    1e38:	2800      	cmp	r0, #0
    1e3a:	d1f9      	bne.n	1e30 <diag+0x118>
    1e3c:	e7c0      	b.n	1dc0 <diag+0xa8>
			dgout (*mess++);
    1e3e:	f7ff fcdd 	bl	17fc <dgout>
    1e42:	e7be      	b.n	1dc2 <diag+0xaa>
    1e44:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1e48:	40001018 	andmi	r1, r0, r8, lsl r0
    1e4c:	3b9aca00 	blcc	fe6b4654 <_estack+0xde6af654>
    1e50:	00005191 	muleq	r0, r1, r1

00001e54 <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e54:	f243 0039 	movw	r0, #12345	; 0x3039
    1e58:	4a04      	ldr	r2, [pc, #16]	; (1e6c <lrnd+0x18>)
    1e5a:	4905      	ldr	r1, [pc, #20]	; (1e70 <lrnd+0x1c>)
    1e5c:	6813      	ldr	r3, [r2, #0]
    1e5e:	fb01 0303 	mla	r3, r1, r3, r0
    1e62:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1e64:	4a03      	ldr	r2, [pc, #12]	; (1e74 <lrnd+0x20>)
    1e66:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1e68:	4058      	eors	r0, r3
    1e6a:	4770      	bx	lr
    1e6c:	20000004 	andcs	r0, r0, r4
    1e70:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1e74:	200006b0 			; <UNDEFINED> instruction: 0x200006b0

00001e78 <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e78:	b510      	push	{r4, lr}
    1e7a:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1e7c:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e7e:	b280      	uxth	r0, r0
    1e80:	f7ff fed0 	bl	1c24 <__pi_malloc>
    1e84:	b110      	cbz	r0, 1e8c <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1e86:	2300      	movs	r3, #0
	p -> length = size;
    1e88:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1e8a:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1e8c:	bd10      	pop	{r4, pc}

00001e8e <deq>:
	if (p->attributes.b.queued) {
    1e8e:	7a83      	ldrb	r3, [r0, #10]
    1e90:	07db      	lsls	r3, r3, #31
    1e92:	d508      	bpl.n	1ea6 <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e94:	e9d0 2300 	ldrd	r2, r3, [r0]
    1e98:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e9a:	6802      	ldr	r2, [r0, #0]
    1e9c:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    1e9e:	7a83      	ldrb	r3, [r0, #10]
    1ea0:	f36f 0300 	bfc	r3, #0, #1
    1ea4:	7283      	strb	r3, [r0, #10]
}
    1ea6:	4770      	bx	lr

00001ea8 <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ea8:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1eaa:	f7ff fff0 	bl	1e8e <deq>
}
    1eae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1eb2:	f7ff be6b 	b.w	1b8c <__pi_free>
	...

00001eb8 <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1eb8:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1eba:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ebc:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ebe:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1ec0:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ec2:	d503      	bpl.n	1ecc <enq+0x14>
    1ec4:	200a      	movs	r0, #10
    1ec6:	490e      	ldr	r1, [pc, #56]	; (1f00 <enq+0x48>)
    1ec8:	f7fe ff08 	bl	cdc <__pi_syserror>
	if (q_empty (q))
    1ecc:	6803      	ldr	r3, [r0, #0]
    1ece:	4283      	cmp	r3, r0
    1ed0:	d101      	bne.n	1ed6 <enq+0x1e>
		trigger (q);
    1ed2:	f7ff fd4b 	bl	196c <__pi_trigger>
	if (p->attributes.b.urgent) {
    1ed6:	7aa3      	ldrb	r3, [r4, #10]
    1ed8:	075b      	lsls	r3, r3, #29
    1eda:	d50a      	bpl.n	1ef2 <enq+0x3a>
		p->u.bqueue.next = q->next;
    1edc:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    1ede:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    1ee2:	682b      	ldr	r3, [r5, #0]
    1ee4:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    1ee6:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    1ee8:	7aa3      	ldrb	r3, [r4, #10]
    1eea:	f043 0301 	orr.w	r3, r3, #1
    1eee:	72a3      	strb	r3, [r4, #10]
}
    1ef0:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    1ef2:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    1ef4:	686b      	ldr	r3, [r5, #4]
    1ef6:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    1ef8:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    1efa:	606c      	str	r4, [r5, #4]
    1efc:	e7f4      	b.n	1ee8 <enq+0x30>
    1efe:	bf00      	nop
    1f00:	000051a1 	andeq	r5, r0, r1, lsr #3

00001f04 <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f04:	b510      	push	{r4, lr}
    1f06:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1f08:	f7ff ffc1 	bl	1e8e <deq>
	switch (dv) {
    1f0c:	3901      	subs	r1, #1
    1f0e:	2904      	cmp	r1, #4
    1f10:	d832      	bhi.n	1f78 <dispose+0x74>
    1f12:	e8df f001 	tbb	[pc, r1]
    1f16:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    1f1a:	7a830019 	bvc	fe0c1f86 <_estack+0xde0bcf86>
			p->attributes.b.urgent = 1;
    1f1e:	f043 0304 	orr.w	r3, r3, #4
    1f22:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1f24:	8963      	ldrh	r3, [r4, #10]
    1f26:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    1f2a:	2b07      	cmp	r3, #7
    1f2c:	d803      	bhi.n	1f36 <dispose+0x32>
    1f2e:	4a13      	ldr	r2, [pc, #76]	; (1f7c <dispose+0x78>)
    1f30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1f34:	b918      	cbnz	r0, 1f3e <dispose+0x3a>
    1f36:	4912      	ldr	r1, [pc, #72]	; (1f80 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1f38:	200a      	movs	r0, #10
    1f3a:	f7fe fecf 	bl	cdc <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    1f3e:	4621      	mov	r1, r4
}
    1f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1f44:	f7ff bfb8 	b.w	1eb8 <enq>
			p->attributes.b.urgent = 1;
    1f48:	7a83      	ldrb	r3, [r0, #10]
    1f4a:	f043 0304 	orr.w	r3, r3, #4
    1f4e:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    1f50:	7ae2      	ldrb	r2, [r4, #11]
    1f52:	2a5f      	cmp	r2, #95	; 0x5f
    1f54:	ea4f 1352 	mov.w	r3, r2, lsr #5
    1f58:	d803      	bhi.n	1f62 <dispose+0x5e>
    1f5a:	4a0a      	ldr	r2, [pc, #40]	; (1f84 <dispose+0x80>)
    1f5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1f60:	b90a      	cbnz	r2, 1f66 <dispose+0x62>
    1f62:	4909      	ldr	r1, [pc, #36]	; (1f88 <dispose+0x84>)
    1f64:	e7e8      	b.n	1f38 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    1f66:	4a09      	ldr	r2, [pc, #36]	; (1f8c <dispose+0x88>)
    1f68:	4621      	mov	r1, r4
    1f6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1f6e:	e7e7      	b.n	1f40 <dispose+0x3c>
}
    1f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    1f74:	f7ff bf98 	b.w	1ea8 <rlp>
}
    1f78:	bd10      	pop	{r4, pc}
    1f7a:	bf00      	nop
    1f7c:	20000584 	andcs	r0, r0, r4, lsl #11
    1f80:	000051a7 	andeq	r5, r0, r7, lsr #3
    1f84:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    1f88:	000051b3 			; <UNDEFINED> instruction: 0x000051b3
    1f8c:	200005a4 	andcs	r0, r0, r4, lsr #11

00001f90 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f90:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    1f92:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    1f96:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    1f9a:	0792      	lsls	r2, r2, #30
    1f9c:	d522      	bpl.n	1fe4 <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    1f9e:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    1fa2:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    1fa6:	2a07      	cmp	r2, #7
    1fa8:	d803      	bhi.n	1fb2 <tcv_endp+0x22>
    1faa:	4911      	ldr	r1, [pc, #68]	; (1ff0 <tcv_endp+0x60>)
    1fac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1fb0:	b91a      	cbnz	r2, 1fba <tcv_endp+0x2a>
    1fb2:	4910      	ldr	r1, [pc, #64]	; (1ff4 <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1fb4:	200a      	movs	r0, #10
    1fb6:	f7fe fe91 	bl	cdc <__pi_syserror>
    1fba:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    1fbe:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1fc2:	2b02      	cmp	r3, #2
    1fc4:	d805      	bhi.n	1fd2 <tcv_endp+0x42>
    1fc6:	4a0c      	ldr	r2, [pc, #48]	; (1ff8 <tcv_endp+0x68>)
    1fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fcc:	b10b      	cbz	r3, 1fd2 <tcv_endp+0x42>
    1fce:	691b      	ldr	r3, [r3, #16]
    1fd0:	b90b      	cbnz	r3, 1fd6 <tcv_endp+0x46>
    1fd2:	490a      	ldr	r1, [pc, #40]	; (1ffc <tcv_endp+0x6c>)
    1fd4:	e7ee      	b.n	1fb4 <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fd6:	4798      	blx	r3
    1fd8:	4601      	mov	r1, r0
    1fda:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    1fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fe0:	f7ff bf90 	b.w	1f04 <dispose>
		rlp (b);
    1fe4:	4620      	mov	r0, r4
}
    1fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    1fea:	f7ff bf5d 	b.w	1ea8 <rlp>
    1fee:	bf00      	nop
    1ff0:	20000584 	andcs	r0, r0, r4, lsl #11
    1ff4:	000051bf 			; <UNDEFINED> instruction: 0x000051bf
    1ff8:	200005c8 	andcs	r0, r0, r8, asr #11
    1ffc:	000051c5 	andeq	r5, r0, r5, asr #3

00002000 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2000:	b40c      	push	{r2, r3}
    2002:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    2006:	ab0a      	add	r3, sp, #40	; 0x28
    2008:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    200c:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    200e:	460f      	mov	r7, r1
	va_start (ap, plid);
    2010:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2012:	d80b      	bhi.n	202c <tcv_open+0x2c>
    2014:	4b24      	ldr	r3, [pc, #144]	; (20a8 <tcv_open+0xa8>)
    2016:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    201a:	b13b      	cbz	r3, 202c <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    201c:	f1b8 0f02 	cmp.w	r8, #2
    2020:	d804      	bhi.n	202c <tcv_open+0x2c>
    2022:	4b22      	ldr	r3, [pc, #136]	; (20ac <tcv_open+0xac>)
    2024:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    2028:	4699      	mov	r9, r3
    202a:	b91a      	cbnz	r2, 2034 <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    202c:	2001      	movs	r0, #1
    202e:	4920      	ldr	r1, [pc, #128]	; (20b0 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    2030:	f7fe fe54 	bl	cdc <__pi_syserror>
	attp.b.outgoing = 1;
    2034:	f008 0307 	and.w	r3, r8, #7
    2038:	029b      	lsls	r3, r3, #10
    203a:	f043 0302 	orr.w	r3, r3, #2
    203e:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2042:	4b1c      	ldr	r3, [pc, #112]	; (20b4 <tcv_open+0xb4>)
    2044:	2600      	movs	r6, #0
    2046:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    2048:	f853 2b04 	ldr.w	r2, [r3], #4
    204c:	b312      	cbz	r2, 2094 <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    204e:	3601      	adds	r6, #1
    2050:	2e08      	cmp	r6, #8
    2052:	d1f9      	bne.n	2048 <tcv_open+0x48>
		return ERROR;
    2054:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    2058:	4630      	mov	r0, r6
    205a:	b002      	add	sp, #8
    205c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2060:	b002      	add	sp, #8
    2062:	4770      	bx	lr
	s->attpattern.b.session = fd;
    2064:	462b      	mov	r3, r5
    2066:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    206a:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    206e:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    2070:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2074:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    2078:	681b      	ldr	r3, [r3, #0]
    207a:	b913      	cbnz	r3, 2082 <tcv_open+0x82>
    207c:	200a      	movs	r0, #10
    207e:	490e      	ldr	r1, [pc, #56]	; (20b8 <tcv_open+0xb8>)
    2080:	e7d6      	b.n	2030 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2082:	4631      	mov	r1, r6
    2084:	4638      	mov	r0, r7
    2086:	9a01      	ldr	r2, [sp, #4]
    2088:	4798      	blx	r3
    208a:	2800      	cmp	r0, #0
    208c:	d1e2      	bne.n	2054 <tcv_open+0x54>
	descriptors [fd] = s;
    208e:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    2092:	e7e1      	b.n	2058 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2094:	200c      	movs	r0, #12
    2096:	f7ff fdc5 	bl	1c24 <__pi_malloc>
	if (s == NULL)
    209a:	4604      	mov	r4, r0
    209c:	2800      	cmp	r0, #0
    209e:	d1e1      	bne.n	2064 <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    20a0:	2006      	movs	r0, #6
    20a2:	4906      	ldr	r1, [pc, #24]	; (20bc <tcv_open+0xbc>)
    20a4:	e7c4      	b.n	2030 <tcv_open+0x30>
    20a6:	bf00      	nop
    20a8:	200005a4 	andcs	r0, r0, r4, lsr #11
    20ac:	200005c8 	andcs	r0, r0, r8, asr #11
    20b0:	000051cb 	andeq	r5, r0, fp, asr #3
    20b4:	20000584 	andcs	r0, r0, r4, lsl #11
    20b8:	000051d7 	ldrdeq	r5, [r0], -r7
    20bc:	000051d1 	ldrdeq	r5, [r0], -r1

000020c0 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20c0:	2802      	cmp	r0, #2
    20c2:	d809      	bhi.n	20d8 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20c4:	4b06      	ldr	r3, [pc, #24]	; (20e0 <tcv_plug+0x20>)
    20c6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20ca:	b10a      	cbz	r2, 20d0 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20cc:	428a      	cmp	r2, r1
    20ce:	d103      	bne.n	20d8 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    20d0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    20d4:	2000      	movs	r0, #0
    20d6:	4770      	bx	lr
		return ERROR;
    20d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    20dc:	4770      	bx	lr
    20de:	bf00      	nop
    20e0:	200005c8 	andcs	r0, r0, r8, asr #11

000020e4 <tcv_rnp>:
 */
	address p;
	hblock_t *b;
	qhead_t *rq;

	verify_fds (fd, "tcv10");
    20e4:	2908      	cmp	r1, #8
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20e6:	b538      	push	{r3, r4, r5, lr}
    20e8:	4603      	mov	r3, r0
	verify_fds (fd, "tcv10");
    20ea:	d803      	bhi.n	20f4 <tcv_rnp+0x10>
    20ec:	4a19      	ldr	r2, [pc, #100]	; (2154 <tcv_rnp+0x70>)
    20ee:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    20f2:	b918      	cbnz	r0, 20fc <tcv_rnp+0x18>
    20f4:	4918      	ldr	r1, [pc, #96]	; (2158 <tcv_rnp+0x74>)
	deqtm (b);	// ... and clear its timer

	/* Packet pointer */
	p = ((address)(b + 1));
	/* Set the pointers to application data */
	verify_plg (b, tcv_frm, "tcv11");
    20f6:	200a      	movs	r0, #10
    20f8:	f7fe fdf0 	bl	cdc <__pi_syserror>
	b = q_first (rq);
    20fc:	6804      	ldr	r4, [r0, #0]
	if (q_end (b, rq)) {
    20fe:	42a0      	cmp	r0, r4
    2100:	d108      	bne.n	2114 <tcv_rnp+0x30>
		if (state != WNONE) {
    2102:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2106:	4293      	cmp	r3, r2
    2108:	d021      	beq.n	214e <tcv_rnp+0x6a>
			when (rq, state);
    210a:	4619      	mov	r1, r3
    210c:	f7ff fc14 	bl	1938 <__pi_wait>
			release;
    2110:	f7ff f9a2 	bl	1458 <__pi_release>
	deq (b);	// Dequeue the packet ...
    2114:	4620      	mov	r0, r4
    2116:	f7ff feba 	bl	1e8e <deq>
	verify_plg (b, tcv_frm, "tcv11");
    211a:	7ae3      	ldrb	r3, [r4, #11]
	p = ((address)(b + 1));
    211c:	f104 050c 	add.w	r5, r4, #12
	verify_plg (b, tcv_frm, "tcv11");
    2120:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2124:	2b02      	cmp	r3, #2
    2126:	d805      	bhi.n	2134 <tcv_rnp+0x50>
    2128:	4a0c      	ldr	r2, [pc, #48]	; (215c <tcv_rnp+0x78>)
    212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    212e:	b10b      	cbz	r3, 2134 <tcv_rnp+0x50>
    2130:	68db      	ldr	r3, [r3, #12]
    2132:	b90b      	cbnz	r3, 2138 <tcv_rnp+0x54>
    2134:	490a      	ldr	r1, [pc, #40]	; (2160 <tcv_rnp+0x7c>)
    2136:	e7de      	b.n	20f6 <tcv_rnp+0x12>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2138:	4621      	mov	r1, r4
    213a:	4628      	mov	r0, r5
    213c:	4798      	blx	r3
	/* Adjust the second pointer to look like the length */
	b->u.pointers.tail =
		b->length - b->u.pointers.head - b->u.pointers.tail;
    213e:	8823      	ldrh	r3, [r4, #0]
    2140:	8862      	ldrh	r2, [r4, #2]
    2142:	441a      	add	r2, r3
    2144:	8923      	ldrh	r3, [r4, #8]
    2146:	1a9b      	subs	r3, r3, r2
	b->u.pointers.tail =
    2148:	8063      	strh	r3, [r4, #2]
	/* OK, it seems that we are set */
	return p;
}
    214a:	4628      	mov	r0, r5
    214c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    214e:	2500      	movs	r5, #0
    2150:	e7fb      	b.n	214a <tcv_rnp+0x66>
    2152:	bf00      	nop
    2154:	20000584 	andcs	r0, r0, r4, lsl #11
    2158:	000051dd 	ldrdeq	r5, [r0], -sp
    215c:	200005c8 	andcs	r0, r0, r8, asr #11
    2160:	000051e3 	andeq	r5, r0, r3, ror #3

00002164 <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    2164:	2908      	cmp	r1, #8
								Boolean urg) {
    2166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2168:	4605      	mov	r5, r0
    216a:	4614      	mov	r4, r2
    216c:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    216e:	d803      	bhi.n	2178 <tcv_wnps+0x14>
    2170:	4b26      	ldr	r3, [pc, #152]	; (220c <tcv_wnps+0xa8>)
    2172:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    2176:	b91f      	cbnz	r7, 2180 <tcv_wnps+0x1c>
    2178:	4925      	ldr	r1, [pc, #148]	; (2210 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    217a:	200a      	movs	r0, #10
    217c:	f7fe fdae 	bl	cdc <__pi_syserror>
    2180:	7a7b      	ldrb	r3, [r7, #9]
    2182:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2186:	2b02      	cmp	r3, #2
    2188:	d805      	bhi.n	2196 <tcv_wnps+0x32>
    218a:	4a22      	ldr	r2, [pc, #136]	; (2214 <tcv_wnps+0xb0>)
    218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2190:	b10b      	cbz	r3, 2196 <tcv_wnps+0x32>
    2192:	68db      	ldr	r3, [r3, #12]
    2194:	b90b      	cbnz	r3, 219a <tcv_wnps+0x36>
    2196:	4920      	ldr	r1, [pc, #128]	; (2218 <tcv_wnps+0xb4>)
    2198:	e7ef      	b.n	217a <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    219a:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    219e:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    21a0:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21a4:	a901      	add	r1, sp, #4
    21a6:	4798      	blx	r3
    21a8:	b158      	cbz	r0, 21c2 <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    21aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    21ae:	429d      	cmp	r5, r3
    21b0:	d102      	bne.n	21b8 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    21b2:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    21b4:	b003      	add	sp, #12
    21b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    21b8:	4629      	mov	r1, r5
    21ba:	f7ff fbbd 	bl	1938 <__pi_wait>
			release;
    21be:	f7ff f94b 	bl	1458 <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21c2:	7a3b      	ldrb	r3, [r7, #8]
    21c4:	07db      	lsls	r3, r3, #31
    21c6:	d501      	bpl.n	21cc <tcv_wnps+0x68>
    21c8:	4914      	ldr	r1, [pc, #80]	; (221c <tcv_wnps+0xb8>)
    21ca:	e7d6      	b.n	217a <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    21cc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    21d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    21d4:	b2a4      	uxth	r4, r4
    21d6:	4418      	add	r0, r3
    21d8:	4420      	add	r0, r4
    21da:	b280      	uxth	r0, r0
    21dc:	f7ff fe4c 	bl	1e78 <apb>
    21e0:	b938      	cbnz	r0, 21f2 <tcv_wnps+0x8e>
		if (state != WNONE) {
    21e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    21e6:	429d      	cmp	r5, r3
    21e8:	d0e3      	beq.n	21b2 <tcv_wnps+0x4e>
			tmwait (state);
    21ea:	4628      	mov	r0, r5
    21ec:	f7ff fd88 	bl	1d00 <__pi_waitmem>
    21f0:	e7e5      	b.n	21be <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    21f2:	893b      	ldrh	r3, [r7, #8]
    21f4:	8143      	strh	r3, [r0, #10]
	if (urg)
    21f6:	b11e      	cbz	r6, 2200 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    21f8:	7a83      	ldrb	r3, [r0, #10]
    21fa:	f043 0304 	orr.w	r3, r3, #4
    21fe:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    2200:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    2204:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    2206:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    2208:	300c      	adds	r0, #12
    220a:	e7d3      	b.n	21b4 <tcv_wnps+0x50>
    220c:	20000584 	andcs	r0, r0, r4, lsl #11
    2210:	000051e9 	andeq	r5, r0, r9, ror #3
    2214:	200005c8 	andcs	r0, r0, r8, asr #11
    2218:	000051ef 	andeq	r5, r0, pc, ror #3
    221c:	000051f5 	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>

00002220 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2220:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    2222:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2224:	4608      	mov	r0, r1
    2226:	b510      	push	{r4, lr}
    2228:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    222a:	d803      	bhi.n	2234 <tcvp_control+0x14>
    222c:	4a05      	ldr	r2, [pc, #20]	; (2244 <tcvp_control+0x24>)
    222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2232:	b91b      	cbnz	r3, 223c <tcvp_control+0x1c>
    2234:	200a      	movs	r0, #10
    2236:	4904      	ldr	r1, [pc, #16]	; (2248 <tcvp_control+0x28>)
    2238:	f7fe fd50 	bl	cdc <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    223c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    2240:	4718      	bx	r3
    2242:	bf00      	nop
    2244:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    2248:	000051fb 	strdeq	r5, [r0], -fp

0000224c <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    224c:	b508      	push	{r3, lr}
	if (opt < 0) {
    224e:	1e0b      	subs	r3, r1, #0
    2250:	da11      	bge.n	2276 <tcv_control+0x2a>
		if (fd < 0)
    2252:	2800      	cmp	r0, #0
    2254:	db1f      	blt.n	2296 <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    2256:	3301      	adds	r3, #1
    2258:	d107      	bne.n	226a <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    225a:	2802      	cmp	r0, #2
    225c:	dc1b      	bgt.n	2296 <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    225e:	4b0f      	ldr	r3, [pc, #60]	; (229c <tcv_control+0x50>)
    2260:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2264:	b100      	cbz	r0, 2268 <tcv_control+0x1c>
			return p->tcv_info;
    2266:	69c0      	ldr	r0, [r0, #28]
}
    2268:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    226a:	2802      	cmp	r0, #2
    226c:	dc13      	bgt.n	2296 <tcv_control+0x4a>
		return physinfo [fd];
    226e:	4b0c      	ldr	r3, [pc, #48]	; (22a0 <tcv_control+0x54>)
    2270:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2274:	e7f8      	b.n	2268 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    2276:	2808      	cmp	r0, #8
    2278:	d803      	bhi.n	2282 <tcv_control+0x36>
    227a:	4b0a      	ldr	r3, [pc, #40]	; (22a4 <tcv_control+0x58>)
    227c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    2280:	b91b      	cbnz	r3, 228a <tcv_control+0x3e>
    2282:	200a      	movs	r0, #10
    2284:	4908      	ldr	r1, [pc, #32]	; (22a8 <tcv_control+0x5c>)
    2286:	f7fe fd29 	bl	cdc <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    228a:	7a58      	ldrb	r0, [r3, #9]
}
    228c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2290:	0940      	lsrs	r0, r0, #5
    2292:	f7ff bfc5 	b.w	2220 <tcvp_control>
			return 0;
    2296:	2000      	movs	r0, #0
    2298:	e7e6      	b.n	2268 <tcv_control+0x1c>
    229a:	bf00      	nop
    229c:	200005c8 	andcs	r0, r0, r8, asr #11
    22a0:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    22a4:	20000584 	andcs	r0, r0, r4, lsl #11
    22a8:	00005201 	andeq	r5, r0, r1, lsl #4

000022ac <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ae:	b280      	uxth	r0, r0
    22b0:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    22b2:	460e      	mov	r6, r1
    22b4:	b309      	cbz	r1, 22fa <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    22b6:	1c53      	adds	r3, r2, #1
    22b8:	d103      	bne.n	22c2 <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    22ba:	2003      	movs	r0, #3
    22bc:	4912      	ldr	r1, [pc, #72]	; (2308 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    22be:	f7fe fd0d 	bl	cdc <__pi_syserror>
    22c2:	2a08      	cmp	r2, #8
    22c4:	d803      	bhi.n	22ce <tcvp_new+0x22>
    22c6:	4f11      	ldr	r7, [pc, #68]	; (230c <tcvp_new+0x60>)
    22c8:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    22cc:	b913      	cbnz	r3, 22d4 <tcvp_new+0x28>
    22ce:	200a      	movs	r0, #10
    22d0:	490f      	ldr	r1, [pc, #60]	; (2310 <tcvp_new+0x64>)
    22d2:	e7f4      	b.n	22be <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    22d4:	f7ff fdd0 	bl	1e78 <apb>
    22d8:	4604      	mov	r4, r0
    22da:	b908      	cbnz	r0, 22e0 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    22dc:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    22de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    22e0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    22e4:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    22e6:	891b      	ldrh	r3, [r3, #8]
    22e8:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    22ea:	f36f 0341 	bfc	r3, #1, #1
    22ee:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    22f0:	f7ff fe08 	bl	1f04 <dispose>
			return (address)(p + 1);
    22f4:	f104 000c 	add.w	r0, r4, #12
    22f8:	e7f1      	b.n	22de <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    22fa:	f7ff fdbd 	bl	1e78 <apb>
    22fe:	2800      	cmp	r0, #0
    2300:	d0ec      	beq.n	22dc <tcvp_new+0x30>
		return (address)(p + 1);
    2302:	300c      	adds	r0, #12
    2304:	e7eb      	b.n	22de <tcvp_new+0x32>
    2306:	bf00      	nop
    2308:	00005207 	andeq	r5, r0, r7, lsl #4
    230c:	20000584 	andcs	r0, r0, r4, lsl #11
    2310:	0000520d 	andeq	r5, r0, sp, lsl #4

00002314 <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2314:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2316:	b510      	push	{r4, lr}
    2318:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    231a:	d803      	bhi.n	2324 <tcvphy_reg+0x10>
    231c:	4b0c      	ldr	r3, [pc, #48]	; (2350 <tcvphy_reg+0x3c>)
    231e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2322:	b118      	cbz	r0, 232c <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    2324:	2003      	movs	r0, #3
    2326:	490b      	ldr	r1, [pc, #44]	; (2354 <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    2328:	f7fe fcd8 	bl	cdc <__pi_syserror>
	physical [phy] = ps;
    232c:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    2330:	4b09      	ldr	r3, [pc, #36]	; (2358 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2332:	2008      	movs	r0, #8
	physinfo [phy] = info;
    2334:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2338:	f7ff fc74 	bl	1c24 <__pi_malloc>
    233c:	4a07      	ldr	r2, [pc, #28]	; (235c <tcvphy_reg+0x48>)
    233e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    2342:	b910      	cbnz	r0, 234a <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    2344:	2006      	movs	r0, #6
    2346:	4906      	ldr	r1, [pc, #24]	; (2360 <tcvphy_reg+0x4c>)
    2348:	e7ee      	b.n	2328 <tcvphy_reg+0x14>
	q_init (q);
    234a:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    234e:	bd10      	pop	{r4, pc}
    2350:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    2354:	00005213 	andeq	r5, r0, r3, lsl r2
    2358:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    235c:	200005a4 	andcs	r0, r0, r4, lsr #11
    2360:	00005219 	andeq	r5, r0, r9, lsl r2

00002364 <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    2368:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    236a:	4605      	mov	r5, r0
    236c:	460f      	mov	r7, r1
    236e:	4614      	mov	r4, r2
    2370:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    2372:	d803      	bhi.n	237c <tcvphy_rcv+0x18>
    2374:	4b1e      	ldr	r3, [pc, #120]	; (23f0 <tcvphy_rcv+0x8c>)
    2376:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    237a:	b91b      	cbnz	r3, 2384 <tcvphy_rcv+0x20>
    237c:	491d      	ldr	r1, [pc, #116]	; (23f4 <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    237e:	200a      	movs	r0, #10
    2380:	f7fe fcac 	bl	cdc <__pi_syserror>
    2384:	4e1c      	ldr	r6, [pc, #112]	; (23f8 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2386:	f10d 080c 	add.w	r8, sp, #12
    238a:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    238e:	6833      	ldr	r3, [r6, #0]
    2390:	46b1      	mov	r9, r6
    2392:	3e04      	subs	r6, #4
    2394:	b92b      	cbnz	r3, 23a2 <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2396:	45ca      	cmp	sl, r9
    2398:	d1f9      	bne.n	238e <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    239a:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    239c:	b005      	add	sp, #20
    239e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23a2:	f8d3 b008 	ldr.w	fp, [r3, #8]
    23a6:	f1bb 0f00 	cmp.w	fp, #0
    23aa:	d101      	bne.n	23b0 <tcvphy_rcv+0x4c>
    23ac:	4913      	ldr	r1, [pc, #76]	; (23fc <tcvphy_rcv+0x98>)
    23ae:	e7e6      	b.n	237e <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23b0:	4639      	mov	r1, r7
    23b2:	4622      	mov	r2, r4
    23b4:	4628      	mov	r0, r5
    23b6:	f8cd 8000 	str.w	r8, [sp]
    23ba:	ab02      	add	r3, sp, #8
    23bc:	47d8      	blx	fp
    23be:	4601      	mov	r1, r0
    23c0:	2800      	cmp	r0, #0
    23c2:	d0e8      	beq.n	2396 <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23c4:	2801      	cmp	r0, #1
    23c6:	d0e8      	beq.n	239a <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    23c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    23cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    23d0:	441a      	add	r2, r3
    23d2:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23d4:	4620      	mov	r0, r4
    23d6:	9a02      	ldr	r2, [sp, #8]
    23d8:	f7ff ff68 	bl	22ac <tcvp_new>
    23dc:	2800      	cmp	r0, #0
    23de:	d0dc      	beq.n	239a <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23e0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    23e4:	4622      	mov	r2, r4
    23e6:	4439      	add	r1, r7
    23e8:	f7ff fb37 	bl	1a5a <__pi_memcpy>
	return 1;
    23ec:	2001      	movs	r0, #1
    23ee:	e7d5      	b.n	239c <tcvphy_rcv+0x38>
    23f0:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    23f4:	0000521f 	andeq	r5, r0, pc, lsl r2
    23f8:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    23fc:	00005225 	andeq	r5, r0, r5, lsr #4

00002400 <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    2400:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    2402:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    2404:	d803      	bhi.n	240e <tcvphy_get+0xe>
    2406:	4b0b      	ldr	r3, [pc, #44]	; (2434 <tcvphy_get+0x34>)
    2408:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    240c:	b91b      	cbnz	r3, 2416 <tcvphy_get+0x16>
    240e:	200a      	movs	r0, #10
    2410:	4909      	ldr	r1, [pc, #36]	; (2438 <tcvphy_get+0x38>)
    2412:	f7fe fc63 	bl	cdc <__pi_syserror>

	oq = oqueues [phy];
    2416:	4b09      	ldr	r3, [pc, #36]	; (243c <tcvphy_get+0x3c>)
    2418:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    241c:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    241e:	4283      	cmp	r3, r0
    2420:	d005      	beq.n	242e <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    2422:	8903      	ldrh	r3, [r0, #8]
    2424:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    2426:	f7ff fd32 	bl	1e8e <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    242a:	300c      	adds	r0, #12
}
    242c:	bd08      	pop	{r3, pc}
		return NULL;
    242e:	2000      	movs	r0, #0
    2430:	e7fc      	b.n	242c <tcvphy_get+0x2c>
    2432:	bf00      	nop
    2434:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    2438:	0000522b 	andeq	r5, r0, fp, lsr #4
    243c:	200005a4 	andcs	r0, r0, r4, lsr #11

00002440 <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    2440:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    2442:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    2444:	d803      	bhi.n	244e <tcvphy_top+0xe>
    2446:	4b08      	ldr	r3, [pc, #32]	; (2468 <tcvphy_top+0x28>)
    2448:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    244c:	b91b      	cbnz	r3, 2456 <tcvphy_top+0x16>
    244e:	200a      	movs	r0, #10
    2450:	4906      	ldr	r1, [pc, #24]	; (246c <tcvphy_top+0x2c>)
    2452:	f7fe fc43 	bl	cdc <__pi_syserror>

	oq = oqueues [phy];
    2456:	4b06      	ldr	r3, [pc, #24]	; (2470 <tcvphy_top+0x30>)
    2458:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    245c:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    245e:	4283      	cmp	r3, r0
		return NULL;
    2460:	bf0c      	ite	eq
    2462:	2000      	moveq	r0, #0

	return (address)(b + 1);
    2464:	300c      	addne	r0, #12
}
    2466:	bd08      	pop	{r3, pc}
    2468:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    246c:	00005231 	andeq	r5, r0, r1, lsr r2
    2470:	200005a4 	andcs	r0, r0, r4, lsr #11

00002474 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2474:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    2476:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    247a:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    247e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2482:	2b02      	cmp	r3, #2
    2484:	d805      	bhi.n	2492 <tcvphy_end+0x1e>
    2486:	4a08      	ldr	r2, [pc, #32]	; (24a8 <tcvphy_end+0x34>)
    2488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    248c:	b10b      	cbz	r3, 2492 <tcvphy_end+0x1e>
    248e:	695b      	ldr	r3, [r3, #20]
    2490:	b91b      	cbnz	r3, 249a <tcvphy_end+0x26>
    2492:	200a      	movs	r0, #10
    2494:	4905      	ldr	r1, [pc, #20]	; (24ac <tcvphy_end+0x38>)
    2496:	f7fe fc21 	bl	cdc <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    249a:	4798      	blx	r3
    249c:	4601      	mov	r1, r0
    249e:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    24a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    24a4:	f7ff bd2e 	b.w	1f04 <dispose>
    24a8:	200005c8 	andcs	r0, r0, r8, asr #11
    24ac:	00005237 	andeq	r5, r0, r7, lsr r2

000024b0 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    24b0:	4770      	bx	lr

000024b2 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    24b2:	e7fe      	b.n	24b2 <NmiSR>

000024b4 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    24b4:	e7fe      	b.n	24b4 <FaultISR>

000024b6 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    24b6:	e7fe      	b.n	24b6 <AONIntHandler>

000024b8 <ResetISR>:
{
    24b8:	b508      	push	{r3, lr}
    SetupTrimDevice();
    24ba:	f001 fd15 	bl	3ee8 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24be:	4b0c      	ldr	r3, [pc, #48]	; (24f0 <zero_loop+0x20>)
    pui32Src = &_etext;
    24c0:	4a0c      	ldr	r2, [pc, #48]	; (24f4 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24c2:	490d      	ldr	r1, [pc, #52]	; (24f8 <zero_loop+0x28>)
    24c4:	428b      	cmp	r3, r1
    24c6:	d30d      	bcc.n	24e4 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    24c8:	480c      	ldr	r0, [pc, #48]	; (24fc <zero_loop+0x2c>)
    24ca:	490d      	ldr	r1, [pc, #52]	; (2500 <zero_loop+0x30>)
    24cc:	f04f 0200 	mov.w	r2, #0

000024d0 <zero_loop>:
    24d0:	4288      	cmp	r0, r1
    24d2:	bfb8      	it	lt
    24d4:	f840 2b04 	strlt.w	r2, [r0], #4
    24d8:	dbfa      	blt.n	24d0 <zero_loop>
   main();
    24da:	f7ff f901 	bl	16e0 <main>
    FaultISR();
    24de:	f7ff ffe9 	bl	24b4 <FaultISR>
}
    24e2:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    24e4:	f852 0b04 	ldr.w	r0, [r2], #4
    24e8:	f843 0b04 	str.w	r0, [r3], #4
    24ec:	e7ea      	b.n	24c4 <ResetISR+0xc>
    24ee:	bf00      	nop
    24f0:	20000000 	andcs	r0, r0, r0
    24f4:	00005c40 	andeq	r5, r0, r0, asr #24
    24f8:	20000540 	andcs	r0, r0, r0, asr #10
    24fc:	20000540 	andcs	r0, r0, r0, asr #10
    2500:	200006d8 	ldrdcs	r0, [r0], -r8

00002504 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    2504:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    2506:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2508:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    250c:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    250e:	4907      	ldr	r1, [pc, #28]	; (252c <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2510:	4d07      	ldr	r5, [pc, #28]	; (2530 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2512:	4c08      	ldr	r4, [pc, #32]	; (2534 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2514:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    2516:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    2518:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    251a:	b2c0      	uxtb	r0, r0
			b |= 1;
    251c:	bf48      	it	mi
    251e:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    2522:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2524:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2526:	600a      	str	r2, [r1, #0]
    2528:	d1f4      	bne.n	2514 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    252a:	bd70      	pop	{r4, r5, r6, pc}
    252c:	400220a0 	andmi	r2, r2, r0, lsr #1
    2530:	400220c0 	andmi	r2, r2, r0, asr #1
    2534:	40022090 	mulmi	r2, r0, r0

00002538 <put_byte>:

static void put_byte (byte b) {
    2538:	b530      	push	{r4, r5, lr}
    253a:	2308      	movs	r3, #8
    253c:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2540:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2544:	4c06      	ldr	r4, [pc, #24]	; (2560 <put_byte+0x28>)
    2546:	4a07      	ldr	r2, [pc, #28]	; (2564 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    2548:	f010 0f80 	tst.w	r0, #128	; 0x80
    254c:	bf14      	ite	ne
    254e:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2550:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    2552:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    2554:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2556:	6021      	str	r1, [r4, #0]
		b <<= 1;
    2558:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    255a:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    255c:	d1f4      	bne.n	2548 <put_byte+0x10>
	}
}
    255e:	bd30      	pop	{r4, r5, pc}
    2560:	40022090 	mulmi	r2, r0, r0
    2564:	400220a0 	andmi	r2, r2, r0, lsr #1

00002568 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2568:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    256a:	b510      	push	{r4, lr}
    256c:	4c03      	ldr	r4, [pc, #12]	; (257c <cmd_0+0x14>)
    256e:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    2570:	f7ff ffe2 	bl	2538 <put_byte>
    2574:	2300      	movs	r3, #0
    2576:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    2578:	bd10      	pop	{r4, pc}
    257a:	bf00      	nop
    257c:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00002580 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    2580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2584:	4604      	mov	r4, r0
    2586:	460d      	mov	r5, r1
    2588:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    258a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 25d0 <wwait+0x50>
    258e:	4e0f      	ldr	r6, [pc, #60]	; (25cc <wwait+0x4c>)
    2590:	f898 3000 	ldrb.w	r3, [r8]
    2594:	b14b      	cbz	r3, 25aa <wwait+0x2a>
	put_byte (CMD_RDSR);
    2596:	2005      	movs	r0, #5
    2598:	6037      	str	r7, [r6, #0]
    259a:	f7ff ffcd 	bl	2538 <put_byte>
	r = get_byte ();
    259e:	f7ff ffb1 	bl	2504 <get_byte>
    25a2:	2300      	movs	r3, #0
    25a4:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    25a6:	07c3      	lsls	r3, r0, #31
    25a8:	d401      	bmi.n	25ae <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    25aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    25ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    25b2:	429c      	cmp	r4, r3
    25b4:	d103      	bne.n	25be <wwait+0x3e>
			mdelay (1);
    25b6:	2001      	movs	r0, #1
    25b8:	f7fe fb3c 	bl	c34 <mdelay>
    25bc:	e7e8      	b.n	2590 <wwait+0x10>
			delay (del, st);
    25be:	4621      	mov	r1, r4
    25c0:	4628      	mov	r0, r5
    25c2:	f7ff f9ff 	bl	19c4 <delay>
			release;
    25c6:	f7fe ff47 	bl	1458 <__pi_release>
    25ca:	bf00      	nop
    25cc:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    25d0:	200005d4 	ldrdcs	r0, [r0], -r4

000025d4 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    25d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    25d6:	4d0c      	ldr	r5, [pc, #48]	; (2608 <ready+0x34>)
    25d8:	782f      	ldrb	r7, [r5, #0]
    25da:	b147      	cbz	r7, 25ee <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    25dc:	2101      	movs	r1, #1
    25de:	f64f 70ff 	movw	r0, #65535	; 0xffff
    25e2:	f7ff ffcd 	bl	2580 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    25e6:	2200      	movs	r2, #0
    25e8:	4b08      	ldr	r3, [pc, #32]	; (260c <ready+0x38>)
    25ea:	701a      	strb	r2, [r3, #0]
}
    25ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25ee:	2401      	movs	r4, #1
    25f0:	4e07      	ldr	r6, [pc, #28]	; (2610 <ready+0x3c>)
	udelay (1);
    25f2:	4620      	mov	r0, r4
    25f4:	6034      	str	r4, [r6, #0]
    25f6:	f7fe fb07 	bl	c08 <udelay>
	udelay (1);
    25fa:	4620      	mov	r0, r4
    25fc:	6037      	str	r7, [r6, #0]
    25fe:	f7fe fb03 	bl	c08 <udelay>
		dopen = DOPEN_TEMP;
    2602:	2302      	movs	r3, #2
    2604:	702b      	strb	r3, [r5, #0]
    2606:	e7ee      	b.n	25e6 <ready+0x12>
    2608:	200005d4 	ldrdcs	r0, [r0], -r4
    260c:	200005d5 	ldrdcs	r0, [r0], -r5
    2610:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00002614 <cclose>:
static void cclose () {
    2614:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    2616:	4c07      	ldr	r4, [pc, #28]	; (2634 <cclose+0x20>)
    2618:	7823      	ldrb	r3, [r4, #0]
    261a:	2b02      	cmp	r3, #2
    261c:	d109      	bne.n	2632 <cclose+0x1e>
		wwait (WNONE, 1);
    261e:	2101      	movs	r1, #1
    2620:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2624:	f7ff ffac 	bl	2580 <wwait>
	cmd_0 (CMD_DP);
    2628:	20b9      	movs	r0, #185	; 0xb9
    262a:	f7ff ff9d 	bl	2568 <cmd_0>
		dopen = 0;
    262e:	2300      	movs	r3, #0
    2630:	7023      	strb	r3, [r4, #0]
}
    2632:	bd10      	pop	{r4, pc}
    2634:	200005d4 	ldrdcs	r0, [r0], -r4

00002638 <ee_open>:

// ============================================================================

word ee_open () {
    2638:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    263a:	f7ff ffcb 	bl	25d4 <ready>
	dopen = DOPEN_PERM;
    263e:	2201      	movs	r2, #1
    2640:	4b01      	ldr	r3, [pc, #4]	; (2648 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    2642:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    2644:	701a      	strb	r2, [r3, #0]
}
    2646:	bd08      	pop	{r3, pc}
    2648:	200005d4 	ldrdcs	r0, [r0], -r4

0000264c <ee_close>:

void ee_close () {

	if (dopen) {
    264c:	4b03      	ldr	r3, [pc, #12]	; (265c <ee_close+0x10>)
    264e:	781a      	ldrb	r2, [r3, #0]
    2650:	b11a      	cbz	r2, 265a <ee_close+0xe>
		dopen = DOPEN_TEMP;
    2652:	2202      	movs	r2, #2
    2654:	701a      	strb	r2, [r3, #0]
		cclose ();
    2656:	f7ff bfdd 	b.w	2614 <cclose>
	}
}
    265a:	4770      	bx	lr
    265c:	200005d4 	ldrdcs	r0, [r0], -r4

00002660 <ser_out>:

//+++ "__outserial.c"

procname (__outserial);

int ser_out (word st, const char *m) {
    2660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2662:	4606      	mov	r6, r0

	int prcs;
	char *buf;

	if ((prcs = running (__outserial)) != 0) {
    2664:	4818      	ldr	r0, [pc, #96]	; (26c8 <ser_out+0x68>)
int ser_out (word st, const char *m) {
    2666:	460c      	mov	r4, r1
	if ((prcs = running (__outserial)) != 0) {
    2668:	f7ff f9c8 	bl	19fc <running>
    266c:	b120      	cbz	r0, 2678 <ser_out+0x18>
		/* We have to wait */
		join (prcs, st);
    266e:	4631      	mov	r1, r6
    2670:	f7ff f996 	bl	19a0 <__pi_join>
	if ((buf = (char*) umalloc (prcs)) == NULL) {
		/*
		 * We have to wait for memory
		 */
		umwait (st);
		release;
    2674:	f7fe fef0 	bl	1458 <__pi_release>
	if (*m)
    2678:	7823      	ldrb	r3, [r4, #0]
    267a:	b163      	cbz	r3, 2696 <ser_out+0x36>
		prcs = strlen (m) +1;
    267c:	4620      	mov	r0, r4
    267e:	f7ff f9cf 	bl	1a20 <__pi_strlen>
    2682:	1c45      	adds	r5, r0, #1
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2684:	b2a8      	uxth	r0, r5
    2686:	f7ff facd 	bl	1c24 <__pi_malloc>
    268a:	4607      	mov	r7, r0
    268c:	b930      	cbnz	r0, 269c <ser_out+0x3c>
		umwait (st);
    268e:	4630      	mov	r0, r6
    2690:	f7ff fb36 	bl	1d00 <__pi_waitmem>
    2694:	e7ee      	b.n	2674 <ser_out+0x14>
		prcs =  m [1] + 3;
    2696:	7865      	ldrb	r5, [r4, #1]
    2698:	3503      	adds	r5, #3
    269a:	e7f3      	b.n	2684 <ser_out+0x24>
	}

	if (*m)
    269c:	7823      	ldrb	r3, [r4, #0]
    269e:	b15b      	cbz	r3, 26b8 <ser_out+0x58>
		strcpy (buf, m);
    26a0:	4621      	mov	r1, r4
    26a2:	f7ff f9c4 	bl	1a2e <__pi_strcpy>
	else
		memcpy (buf, m, prcs);

	if (runstrand (__outserial, buf) == 0) {
    26a6:	4639      	mov	r1, r7
    26a8:	4807      	ldr	r0, [pc, #28]	; (26c8 <ser_out+0x68>)
    26aa:	f7ff fb0f 	bl	1ccc <__pi_fork>
    26ae:	b940      	cbnz	r0, 26c2 <ser_out+0x62>
		// fork has failed, deallocate buf
		ufree (buf);
    26b0:	4638      	mov	r0, r7
    26b2:	f7ff fa6b 	bl	1b8c <__pi_free>
		// and wait for a process slot
		npwait (st);
    26b6:	e7ea      	b.n	268e <ser_out+0x2e>
		memcpy (buf, m, prcs);
    26b8:	462a      	mov	r2, r5
    26ba:	4621      	mov	r1, r4
    26bc:	f7ff f9cd 	bl	1a5a <__pi_memcpy>
    26c0:	e7f1      	b.n	26a6 <ser_out+0x46>
		release;
	}

	return 0;
}
    26c2:	2000      	movs	r0, #0
    26c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26c6:	bf00      	nop
    26c8:	0000316d 	andeq	r3, r0, sp, ror #2

000026cc <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    26cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ce:	4604      	mov	r4, r0
    26d0:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    26d2:	4615      	mov	r5, r2
    26d4:	b37a      	cbz	r2, 2736 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    26d6:	4e19      	ldr	r6, [pc, #100]	; (273c <ser_in+0x70>)
    26d8:	6830      	ldr	r0, [r6, #0]
    26da:	b988      	cbnz	r0, 2700 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    26dc:	4818      	ldr	r0, [pc, #96]	; (2740 <ser_in+0x74>)
    26de:	f7ff f98d 	bl	19fc <running>
    26e2:	b948      	cbnz	r0, 26f8 <ser_in+0x2c>
			prcs = runthread (__inserial);
    26e4:	4601      	mov	r1, r0
    26e6:	4816      	ldr	r0, [pc, #88]	; (2740 <ser_in+0x74>)
    26e8:	f7ff faf0 	bl	1ccc <__pi_fork>
			if (prcs == 0) {
    26ec:	b920      	cbnz	r0, 26f8 <ser_in+0x2c>
				npwait (st);
    26ee:	4620      	mov	r0, r4
    26f0:	f7ff fb06 	bl	1d00 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    26f4:	f7fe feb0 	bl	1458 <__pi_release>
		join (prcs, st);
    26f8:	4621      	mov	r1, r4
    26fa:	f7ff f951 	bl	19a0 <__pi_join>
    26fe:	e7f9      	b.n	26f4 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    2700:	7803      	ldrb	r3, [r0, #0]
    2702:	b9a3      	cbnz	r3, 272e <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2704:	7844      	ldrb	r4, [r0, #1]
    2706:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    2708:	42ac      	cmp	r4, r5
		prcs = len-1;
    270a:	bfa8      	it	ge
    270c:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    2710:	4622      	mov	r2, r4
    2712:	4638      	mov	r0, r7
    2714:	6831      	ldr	r1, [r6, #0]
    2716:	f7ff f9a0 	bl	1a5a <__pi_memcpy>
	ufree (__inpline);
    271a:	6830      	ldr	r0, [r6, #0]
    271c:	f7ff fa36 	bl	1b8c <__pi_free>
	__inpline = NULL;
    2720:	2300      	movs	r3, #0
    2722:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    2724:	783a      	ldrb	r2, [r7, #0]
    2726:	b102      	cbz	r2, 272a <ser_in+0x5e>
		buf [prcs] = '\0';
    2728:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    272a:	4620      	mov	r0, r4
    272c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    272e:	f7ff f977 	bl	1a20 <__pi_strlen>
    2732:	4604      	mov	r4, r0
    2734:	e7e8      	b.n	2708 <ser_in+0x3c>
		return 0;
    2736:	4614      	mov	r4, r2
    2738:	e7f7      	b.n	272a <ser_in+0x5e>
    273a:	bf00      	nop
    273c:	20000620 	andcs	r0, r0, r0, lsr #12
    2740:	000031dd 	ldrdeq	r3, [r0], -sp

00002744 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    2744:	b40e      	push	{r1, r2, r3}
    2746:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    2748:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    274a:	4812      	ldr	r0, [pc, #72]	; (2794 <ser_outf+0x50>)
    274c:	f7ff f956 	bl	19fc <running>
    2750:	4606      	mov	r6, r0
    2752:	b120      	cbz	r0, 275e <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    2754:	4621      	mov	r1, r4
    2756:	f7ff f923 	bl	19a0 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    275a:	f7fe fe7d 	bl	1458 <__pi_release>
	va_start (ap, m);
    275e:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2760:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    2762:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2764:	f000 fef0 	bl	3548 <vform>
    2768:	4605      	mov	r5, r0
    276a:	b918      	cbnz	r0, 2774 <ser_outf+0x30>
		umwait (st);
    276c:	4620      	mov	r0, r4
    276e:	f7ff fac7 	bl	1d00 <__pi_waitmem>
    2772:	e7f2      	b.n	275a <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    2774:	4601      	mov	r1, r0
    2776:	4807      	ldr	r0, [pc, #28]	; (2794 <ser_outf+0x50>)
    2778:	f7ff faa8 	bl	1ccc <__pi_fork>
    277c:	b918      	cbnz	r0, 2786 <ser_outf+0x42>
		ufree (buf);
    277e:	4628      	mov	r0, r5
    2780:	f7ff fa04 	bl	1b8c <__pi_free>
		npwait (st);
    2784:	e7f2      	b.n	276c <ser_outf+0x28>
		release;
	}

	return 0;
}
    2786:	4630      	mov	r0, r6
    2788:	b003      	add	sp, #12
    278a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    278e:	b003      	add	sp, #12
    2790:	4770      	bx	lr
    2792:	bf00      	nop
    2794:	0000316d 	andeq	r3, r0, sp, ror #2

00002798 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    2798:	b40e      	push	{r1, r2, r3}
    279a:	b533      	push	{r0, r1, r4, r5, lr}
    279c:	9905      	ldr	r1, [sp, #20]
    279e:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    27a0:	b321      	cbz	r1, 27ec <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    27a2:	4d13      	ldr	r5, [pc, #76]	; (27f0 <ser_inf+0x58>)
    27a4:	6828      	ldr	r0, [r5, #0]
    27a6:	b988      	cbnz	r0, 27cc <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    27a8:	4812      	ldr	r0, [pc, #72]	; (27f4 <ser_inf+0x5c>)
    27aa:	f7ff f927 	bl	19fc <running>
    27ae:	b948      	cbnz	r0, 27c4 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    27b0:	4601      	mov	r1, r0
    27b2:	4810      	ldr	r0, [pc, #64]	; (27f4 <ser_inf+0x5c>)
    27b4:	f7ff fa8a 	bl	1ccc <__pi_fork>
			if (prcs == 0) {
    27b8:	b920      	cbnz	r0, 27c4 <ser_inf+0x2c>
				npwait (st);
    27ba:	4620      	mov	r0, r4
    27bc:	f7ff faa0 	bl	1d00 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    27c0:	f7fe fe4a 	bl	1458 <__pi_release>
		join (prcs, st);
    27c4:	4621      	mov	r1, r4
    27c6:	f7ff f8eb 	bl	19a0 <__pi_join>
    27ca:	e7f9      	b.n	27c0 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    27cc:	aa06      	add	r2, sp, #24
    27ce:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    27d0:	f000 fee2 	bl	3598 <vscan>
    27d4:	4604      	mov	r4, r0

	ufree (__inpline);
    27d6:	6828      	ldr	r0, [r5, #0]
    27d8:	f7ff f9d8 	bl	1b8c <__pi_free>
	__inpline = NULL;
    27dc:	2300      	movs	r3, #0
    27de:	602b      	str	r3, [r5, #0]

	return prcs;
}
    27e0:	4620      	mov	r0, r4
    27e2:	b002      	add	sp, #8
    27e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    27e8:	b003      	add	sp, #12
    27ea:	4770      	bx	lr
		return 0;
    27ec:	460c      	mov	r4, r1
    27ee:	e7f7      	b.n	27e0 <ser_inf+0x48>
    27f0:	20000620 	andcs	r0, r0, r0, lsr #12
    27f4:	000031dd 	ldrdeq	r3, [r0], -sp

000027f8 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27f8:	4b04      	ldr	r3, [pc, #16]	; (280c <plugch+0x14>)
    27fa:	4a05      	ldr	r2, [pc, #20]	; (2810 <plugch+0x18>)
    27fc:	781b      	ldrb	r3, [r3, #0]
    27fe:	f503 7359 	add.w	r3, r3, #868	; 0x364
    2802:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    2804:	4a03      	ldr	r2, [pc, #12]	; (2814 <plugch+0x1c>)
    2806:	81d3      	strh	r3, [r2, #14]
}
    2808:	4770      	bx	lr
    280a:	bf00      	nop
    280c:	200005d8 	ldrdcs	r0, [r0], -r8
    2810:	20000054 	andcs	r0, r0, r4, asr r0
    2814:	2000003c 	andcs	r0, r0, ip, lsr r0

00002818 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    2818:	b570      	push	{r4, r5, r6, lr}
    281a:	460c      	mov	r4, r1
    281c:	281a      	cmp	r0, #26
    281e:	f200 80a4 	bhi.w	296a <option+0x152>
    2822:	e8df f000 	tbb	[pc, r0]
    2826:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    282a:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    282e:	3b35445b 	blcc	d539a2 <__ccfg+0xd339fa>
    2832:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    2836:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    283a:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    283e:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2842:	4b4c      	ldr	r3, [pc, #304]	; (2974 <option+0x15c>)
    2844:	7818      	ldrb	r0, [r3, #0]
    2846:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    284a:	3002      	adds	r0, #2
			goto RVal;
    284c:	e028      	b.n	28a0 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    284e:	4a49      	ldr	r2, [pc, #292]	; (2974 <option+0x15c>)
    2850:	7813      	ldrb	r3, [r2, #0]
    2852:	f043 0301 	orr.w	r3, r3, #1
    2856:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    2858:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    285a:	4b47      	ldr	r3, [pc, #284]	; (2978 <option+0x160>)
    285c:	6819      	ldr	r1, [r3, #0]
    285e:	4b47      	ldr	r3, [pc, #284]	; (297c <option+0x164>)
    2860:	460c      	mov	r4, r1
    2862:	681d      	ldr	r5, [r3, #0]
    2864:	2300      	movs	r3, #0
    2866:	f834 2b10 	ldrh.w	r2, [r4], #16
    286a:	f002 0207 	and.w	r2, r2, #7
    286e:	429a      	cmp	r2, r3
    2870:	dd08      	ble.n	2884 <option+0x6c>
    2872:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    2876:	3301      	adds	r3, #1
    2878:	42ae      	cmp	r6, r5
    287a:	d1f8      	bne.n	286e <option+0x56>
    287c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2880:	889b      	ldrh	r3, [r3, #4]
    2882:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    2884:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    2886:	4a3b      	ldr	r2, [pc, #236]	; (2974 <option+0x15c>)
    2888:	7813      	ldrb	r3, [r2, #0]
    288a:	f023 0301 	bic.w	r3, r3, #1
    288e:	e7e2      	b.n	2856 <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    2890:	b101      	cbz	r1, 2894 <option+0x7c>
    2892:	880c      	ldrh	r4, [r1, #0]
    2894:	4b3a      	ldr	r3, [pc, #232]	; (2980 <option+0x168>)
    2896:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    2898:	2000      	movs	r0, #0
    289a:	e7f3      	b.n	2884 <option+0x6c>
			ret = (int) statid;
    289c:	4b38      	ldr	r3, [pc, #224]	; (2980 <option+0x168>)
    289e:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    28a0:	2c00      	cmp	r4, #0
    28a2:	d0ef      	beq.n	2884 <option+0x6c>
		*val = ret;
    28a4:	8020      	strh	r0, [r4, #0]
	return ret;
    28a6:	e7ed      	b.n	2884 <option+0x6c>
			ret = rbuffl + 2;
    28a8:	4b36      	ldr	r3, [pc, #216]	; (2984 <option+0x16c>)
    28aa:	7818      	ldrb	r0, [r3, #0]
    28ac:	e7cd      	b.n	284a <option+0x32>
				memcpy (val, &rxstat,
    28ae:	220c      	movs	r2, #12
			if (val != NULL) {
    28b0:	b121      	cbz	r1, 28bc <option+0xa4>
				memcpy (val, &rxstat,
    28b2:	4620      	mov	r0, r4
    28b4:	4934      	ldr	r1, [pc, #208]	; (2988 <option+0x170>)
    28b6:	f7ff f8d0 	bl	1a5a <__pi_memcpy>
    28ba:	e7ed      	b.n	2898 <option+0x80>
				memset (&rxstat, 0, 
    28bc:	4832      	ldr	r0, [pc, #200]	; (2988 <option+0x170>)
    28be:	f7ff f8d6 	bl	1a6e <__pi_memset>
    28c2:	e7e9      	b.n	2898 <option+0x80>
			if (val == NULL)
    28c4:	b941      	cbnz	r1, 28d8 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    28c6:	f7ff fac5 	bl	1e54 <lrnd>
    28ca:	f3c0 4105 	ubfx	r1, r0, #16, #6
    28ce:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    28d0:	482e      	ldr	r0, [pc, #184]	; (298c <option+0x174>)
    28d2:	f7fe ffbd 	bl	1850 <__pi_utimer_set>
    28d6:	e7bf      	b.n	2858 <option+0x40>
    28d8:	8809      	ldrh	r1, [r1, #0]
    28da:	e7f9      	b.n	28d0 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    28dc:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    28de:	4b2c      	ldr	r3, [pc, #176]	; (2990 <option+0x178>)
    28e0:	8b5a      	ldrh	r2, [r3, #26]
    28e2:	4b2c      	ldr	r3, [pc, #176]	; (2994 <option+0x17c>)
					== patable [ret])
    28e4:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    28e8:	428a      	cmp	r2, r1
    28ea:	d0d9      	beq.n	28a0 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    28ec:	3001      	adds	r0, #1
    28ee:	2808      	cmp	r0, #8
    28f0:	d1f8      	bne.n	28e4 <option+0xcc>
    28f2:	e7d5      	b.n	28a0 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28f4:	b119      	cbz	r1, 28fe <option+0xe6>
				(*val > 7) ? 7 : *val;
    28f6:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28f8:	2807      	cmp	r0, #7
    28fa:	bf28      	it	cs
    28fc:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    28fe:	4b25      	ldr	r3, [pc, #148]	; (2994 <option+0x17c>)
    2900:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    2904:	4b22      	ldr	r3, [pc, #136]	; (2990 <option+0x178>)
    2906:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    2908:	4a1a      	ldr	r2, [pc, #104]	; (2974 <option+0x15c>)
    290a:	7813      	ldrb	r3, [r2, #0]
    290c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2910:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    2912:	e7a2      	b.n	285a <option+0x42>
			ret = (int) channel;
    2914:	4b20      	ldr	r3, [pc, #128]	; (2998 <option+0x180>)
			ret = (int) vrate;
    2916:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2918:	e7c2      	b.n	28a0 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    291a:	b121      	cbz	r1, 2926 <option+0x10e>
				(*val > 7) ? 7 : *val;
    291c:	880c      	ldrh	r4, [r1, #0]
    291e:	2c07      	cmp	r4, #7
    2920:	bf28      	it	cs
    2922:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2924:	b2e4      	uxtb	r4, r4
    2926:	4b1c      	ldr	r3, [pc, #112]	; (2998 <option+0x180>)
    2928:	701c      	strb	r4, [r3, #0]
			plugch ();
    292a:	f7ff ff65 	bl	27f8 <plugch>
			_BIS (dstate, DSTATE_IRST);
    292e:	4a11      	ldr	r2, [pc, #68]	; (2974 <option+0x15c>)
    2930:	7813      	ldrb	r3, [r2, #0]
    2932:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2936:	e78e      	b.n	2856 <option+0x3e>
			ret = (int) vrate;
    2938:	4b18      	ldr	r3, [pc, #96]	; (299c <option+0x184>)
    293a:	e7ec      	b.n	2916 <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    293c:	b139      	cbz	r1, 294e <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    293e:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2940:	2b03      	cmp	r3, #3
    2942:	d806      	bhi.n	2952 <option+0x13a>
    2944:	b13b      	cbz	r3, 2956 <option+0x13e>
    2946:	b2db      	uxtb	r3, r3
    2948:	4a14      	ldr	r2, [pc, #80]	; (299c <option+0x184>)
    294a:	7013      	strb	r3, [r2, #0]
    294c:	e7ed      	b.n	292a <option+0x112>
    294e:	2302      	movs	r3, #2
    2950:	e7fa      	b.n	2948 <option+0x130>
    2952:	2303      	movs	r3, #3
    2954:	e7f8      	b.n	2948 <option+0x130>
    2956:	2301      	movs	r3, #1
    2958:	e7f6      	b.n	2948 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    295a:	b119      	cbz	r1, 2964 <option+0x14c>
    295c:	880b      	ldrh	r3, [r1, #0]
    295e:	4a10      	ldr	r2, [pc, #64]	; (29a0 <option+0x188>)
    2960:	8013      	strh	r3, [r2, #0]
			goto RRet;
    2962:	e799      	b.n	2898 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2964:	f44f 7380 	mov.w	r3, #256	; 0x100
    2968:	e7f9      	b.n	295e <option+0x146>
			syserror (EREQPAR, "cc13 op");
    296a:	2003      	movs	r0, #3
    296c:	490d      	ldr	r1, [pc, #52]	; (29a4 <option+0x18c>)
    296e:	f7fe f9b5 	bl	cdc <__pi_syserror>
    2972:	bf00      	nop
    2974:	200005e0 	andcs	r0, r0, r0, ror #11
    2978:	200005dc 	ldrdcs	r0, [r0], -ip
    297c:	200005ec 	andcs	r0, r0, ip, ror #11
    2980:	20000610 	andcs	r0, r0, r0, lsl r6
    2984:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2988:	20000604 	andcs	r0, r0, r4, lsl #12
    298c:	200005d6 	ldrdcs	r0, [r0], -r6
    2990:	20000054 	andcs	r0, r0, r4, asr r0
    2994:	000052aa 	andeq	r5, r0, sl, lsr #5
    2998:	200005d8 	ldrdcs	r0, [r0], -r8
    299c:	2000003a 	andcs	r0, r0, sl, lsr r0
    29a0:	20000038 	andcs	r0, r0, r8, lsr r0
    29a4:	00005246 	andeq	r5, r0, r6, asr #4

000029a8 <issue_cmd>:
static void issue_cmd (lword cmd) {
    29a8:	b538      	push	{r3, r4, r5, lr}
    29aa:	4604      	mov	r4, r0
    29ac:	4d0c      	ldr	r5, [pc, #48]	; (29e0 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29ae:	4620      	mov	r0, r4
    29b0:	f001 f8a4 	bl	3afc <NOROM_RFCDoorbellSendTo>
    29b4:	b2c2      	uxtb	r2, r0
    29b6:	2a01      	cmp	r2, #1
    29b8:	d011      	beq.n	29de <issue_cmd+0x36>
		if (res != 0x86)
    29ba:	2a86      	cmp	r2, #134	; 0x86
    29bc:	d003      	beq.n	29c6 <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    29be:	4909      	ldr	r1, [pc, #36]	; (29e4 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    29c0:	2008      	movs	r0, #8
    29c2:	f7fe f98b 	bl	cdc <__pi_syserror>
		if (cnt-- == 0) {
    29c6:	3d01      	subs	r5, #1
    29c8:	d105      	bne.n	29d6 <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    29ca:	4621      	mov	r1, r4
    29cc:	4806      	ldr	r0, [pc, #24]	; (29e8 <issue_cmd+0x40>)
    29ce:	f7ff f9a3 	bl	1d18 <diag>
			syserror (EHARDWARE, "hang ic0");
    29d2:	4906      	ldr	r1, [pc, #24]	; (29ec <issue_cmd+0x44>)
    29d4:	e7f4      	b.n	29c0 <issue_cmd+0x18>
		udelay (1);
    29d6:	2001      	movs	r0, #1
    29d8:	f7fe f916 	bl	c08 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29dc:	e7e7      	b.n	29ae <issue_cmd+0x6>
}
    29de:	bd38      	pop	{r3, r4, r5, pc}
    29e0:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    29e4:	0000524e 	andeq	r5, r0, lr, asr #4
    29e8:	00005252 	andeq	r5, r0, r2, asr r2
    29ec:	0000525e 	andeq	r5, r0, lr, asr r2

000029f0 <rx_de>:
static void rx_de () {
    29f0:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    29f2:	4c06      	ldr	r4, [pc, #24]	; (2a0c <rx_de+0x1c>)
    29f4:	7823      	ldrb	r3, [r4, #0]
    29f6:	079b      	lsls	r3, r3, #30
    29f8:	d506      	bpl.n	2a08 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29fa:	4805      	ldr	r0, [pc, #20]	; (2a10 <rx_de+0x20>)
    29fc:	f7ff ffd4 	bl	29a8 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    2a00:	7823      	ldrb	r3, [r4, #0]
    2a02:	f023 0302 	bic.w	r3, r3, #2
    2a06:	7023      	strb	r3, [r4, #0]
}
    2a08:	bd10      	pop	{r4, pc}
    2a0a:	bf00      	nop
    2a0c:	200005e0 	andcs	r0, r0, r0, ror #11
    2a10:	04010001 	streq	r0, [r1], #-1

00002a14 <rf_off>:
static void rf_off () {
    2a14:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2a16:	4c11      	ldr	r4, [pc, #68]	; (2a5c <rf_off+0x48>)
    2a18:	7823      	ldrb	r3, [r4, #0]
    2a1a:	06db      	lsls	r3, r3, #27
    2a1c:	d51d      	bpl.n	2a5a <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a1e:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    2a20:	4b0f      	ldr	r3, [pc, #60]	; (2a60 <rf_off+0x4c>)
    2a22:	2019      	movs	r0, #25
    2a24:	681b      	ldr	r3, [r3, #0]
    2a26:	695b      	ldr	r3, [r3, #20]
    2a28:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    2a2a:	2000      	movs	r0, #0
    2a2c:	f001 f9e4 	bl	3df8 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    2a30:	f001 f878 	bl	3b24 <NOROM_RFCSynthPowerDown>
    2a34:	4b0b      	ldr	r3, [pc, #44]	; (2a64 <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a36:	2001      	movs	r0, #1
    2a38:	601d      	str	r5, [r3, #0]
    2a3a:	f7fe f92f 	bl	c9c <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a3e:	4b0a      	ldr	r3, [pc, #40]	; (2a68 <rf_off+0x54>)
    2a40:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a42:	f001 f841 	bl	3ac8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a4a:	4b08      	ldr	r3, [pc, #32]	; (2a6c <rf_off+0x58>)
    2a4c:	601a      	str	r2, [r3, #0]
    2a4e:	2202      	movs	r2, #2
    2a50:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    2a52:	7823      	ldrb	r3, [r4, #0]
    2a54:	f023 0310 	bic.w	r3, r3, #16
    2a58:	7023      	strb	r3, [r4, #0]
}
    2a5a:	bd38      	pop	{r3, r4, r5, pc}
    2a5c:	200005e0 	andcs	r0, r0, r0, ror #11
    2a60:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    2a64:	60040000 	andvs	r0, r4, r0
    2a68:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2a6c:	400220a0 	andmi	r2, r2, r0, lsr #1

00002a70 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a70:	b570      	push	{r4, r5, r6, lr}
    2a72:	4604      	mov	r4, r0
    2a74:	460d      	mov	r5, r1
    2a76:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    2a7a:	8862      	ldrh	r2, [r4, #2]
    2a7c:	42aa      	cmp	r2, r5
    2a7e:	d00e      	beq.n	2a9e <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    2a80:	3e01      	subs	r6, #1
    2a82:	d108      	bne.n	2a96 <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a84:	8821      	ldrh	r1, [r4, #0]
    2a86:	4806      	ldr	r0, [pc, #24]	; (2aa0 <wait_cmd.constprop.0+0x30>)
    2a88:	462b      	mov	r3, r5
    2a8a:	f7ff f945 	bl	1d18 <diag>
			syserror (EHARDWARE, "rt2");
    2a8e:	2008      	movs	r0, #8
    2a90:	4904      	ldr	r1, [pc, #16]	; (2aa4 <wait_cmd.constprop.0+0x34>)
    2a92:	f7fe f923 	bl	cdc <__pi_syserror>
		udelay (1);
    2a96:	2001      	movs	r0, #1
    2a98:	f7fe f8b6 	bl	c08 <udelay>
		if (cmd->status == tstat)
    2a9c:	e7ed      	b.n	2a7a <wait_cmd.constprop.0+0xa>
}
    2a9e:	bd70      	pop	{r4, r5, r6, pc}
    2aa0:	00005267 	andeq	r5, r0, r7, ror #4
    2aa4:	00005277 	andeq	r5, r0, r7, ror r2

00002aa8 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2aac:	4b46      	ldr	r3, [pc, #280]	; (2bc8 <rf_on.part.0+0x120>)
static void rf_on () {
    2aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ab2:	601a      	str	r2, [r3, #0]
    2ab4:	2202      	movs	r2, #2
    2ab6:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    2ab8:	f000 ffca 	bl	3a50 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2abc:	200a      	movs	r0, #10
    2abe:	f7fe f8a3 	bl	c08 <udelay>
    2ac2:	f000 ffd1 	bl	3a68 <NOROM_OSCHF_AttemptToSwitchToXosc>
    2ac6:	2800      	cmp	r0, #0
    2ac8:	d0f8      	beq.n	2abc <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2aca:	2401      	movs	r4, #1
    2acc:	4b3f      	ldr	r3, [pc, #252]	; (2bcc <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2ace:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2ad0:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2ad2:	f7fe f8c5 	bl	c60 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2ad6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2ada:	4b3d      	ldr	r3, [pc, #244]	; (2bd0 <rf_on.part.0+0x128>)
	issue_cmd (
    2adc:	483d      	ldr	r0, [pc, #244]	; (2bd4 <rf_on.part.0+0x12c>)
    2ade:	601a      	str	r2, [r3, #0]
    2ae0:	f7ff ff62 	bl	29a8 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ae4:	f44f 7223 	mov.w	r2, #652	; 0x28c
    2ae8:	493b      	ldr	r1, [pc, #236]	; (2bd8 <rf_on.part.0+0x130>)
    2aea:	483c      	ldr	r0, [pc, #240]	; (2bdc <rf_on.part.0+0x134>)
    2aec:	f001 ff06 	bl	48fc <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    2af0:	2200      	movs	r2, #0
    2af2:	4b3b      	ldr	r3, [pc, #236]	; (2be0 <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    2af4:	493b      	ldr	r1, [pc, #236]	; (2be4 <rf_on.part.0+0x13c>)
    2af6:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    2af8:	2202      	movs	r2, #2
    2afa:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    2afe:	2203      	movs	r2, #3
    2b00:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    2b04:	2204      	movs	r2, #4
    2b06:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    2b08:	2205      	movs	r2, #5
    2b0a:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2b0c:	2206      	movs	r2, #6
    2b0e:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2b12:	4a35      	ldr	r2, [pc, #212]	; (2be8 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2b14:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b18:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    2b1a:	4b34      	ldr	r3, [pc, #208]	; (2bec <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2b1c:	4a34      	ldr	r2, [pc, #208]	; (2bf0 <rf_on.part.0+0x148>)
      t7 = *pS++;
    2b1e:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2b20:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2b24:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2b28:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2b2c:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    2b2e:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    2b32:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    2b36:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    2b3a:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    2b3c:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    2b3e:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    2b40:	6198      	str	r0, [r3, #24]
    2b42:	4618      	mov	r0, r3
   } while (--nIterations);
    2b44:	4288      	cmp	r0, r1
    2b46:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    2b4a:	f103 0320 	add.w	r3, r3, #32
    2b4e:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    2b50:	d1e5      	bne.n	2b1e <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2b52:	4b28      	ldr	r3, [pc, #160]	; (2bf4 <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b54:	4828      	ldr	r0, [pc, #160]	; (2bf8 <rf_on.part.0+0x150>)
    2b56:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    2b58:	4b28      	ldr	r3, [pc, #160]	; (2bfc <rf_on.part.0+0x154>)
    2b5a:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    2b5c:	4b28      	ldr	r3, [pc, #160]	; (2c00 <rf_on.part.0+0x158>)
    2b5e:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    2b60:	4b28      	ldr	r3, [pc, #160]	; (2c04 <rf_on.part.0+0x15c>)
    2b62:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2b64:	4b28      	ldr	r3, [pc, #160]	; (2c08 <rf_on.part.0+0x160>)
    2b66:	630b      	str	r3, [r1, #48]	; 0x30
    2b68:	f7ff ff1e 	bl	29a8 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    2b6c:	2001      	movs	r0, #1
    2b6e:	f001 f943 	bl	3df8 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2b72:	4826      	ldr	r0, [pc, #152]	; (2c0c <rf_on.part.0+0x164>)
    2b74:	f001 f930 	bl	3dd8 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b78:	4825      	ldr	r0, [pc, #148]	; (2c10 <rf_on.part.0+0x168>)
    2b7a:	f7ff ff15 	bl	29a8 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b7e:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    2b82:	4823      	ldr	r0, [pc, #140]	; (2c10 <rf_on.part.0+0x168>)
    2b84:	f7ff ff74 	bl	2a70 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    2b88:	4822      	ldr	r0, [pc, #136]	; (2c14 <rf_on.part.0+0x16c>)
    2b8a:	f7ff ff0d 	bl	29a8 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    2b8e:	4822      	ldr	r0, [pc, #136]	; (2c18 <rf_on.part.0+0x170>)
    2b90:	f7ff ff0a 	bl	29a8 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b94:	4820      	ldr	r0, [pc, #128]	; (2c18 <rf_on.part.0+0x170>)
    2b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2b9a:	f7ff ff69 	bl	2a70 <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2b9e:	4a1f      	ldr	r2, [pc, #124]	; (2c1c <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2ba0:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2ba2:	7813      	ldrb	r3, [r2, #0]
    2ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ba8:	f043 0310 	orr.w	r3, r3, #16
    2bac:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2bae:	2300      	movs	r3, #0
    2bb0:	4a1b      	ldr	r2, [pc, #108]	; (2c20 <rf_on.part.0+0x178>)
    2bb2:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bb4:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    2bb8:	4b1a      	ldr	r3, [pc, #104]	; (2c24 <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bba:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    2bbc:	681b      	ldr	r3, [r3, #0]
}
    2bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    2bc2:	691b      	ldr	r3, [r3, #16]
    2bc4:	4718      	bx	r3
    2bc6:	bf00      	nop
    2bc8:	40022090 	mulmi	r2, r0, r0
    2bcc:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2bd0:	60040000 	andvs	r0, r4, r0
    2bd4:	06070051 			; <UNDEFINED> instruction: 0x06070051
    2bd8:	00005970 	andeq	r5, r0, r0, ror r9
    2bdc:	2100041c 	tstcs	r0, ip, lsl r4
    2be0:	21000390 			; <UNDEFINED> instruction: 0x21000390
    2be4:	2100c680 	smlabbcs	r0, r0, r6, ip
    2be8:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    2bec:	2100c000 	mrscs	ip, (UNDEF: 0)
    2bf0:	000052bc 			; <UNDEFINED> instruction: 0x000052bc
    2bf4:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    2bf8:	06070001 	streq	r0, [r7], -r1
    2bfc:	1a101020 	bne	406c84 <__ccfg+0x3e6cdc>
    2c00:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    2c04:	16121611 			; <UNDEFINED> instruction: 0x16121611
    2c08:	70006b54 	andvc	r6, r0, r4, asr fp
    2c0c:	200005f4 	strdcs	r0, [r0], -r4
    2c10:	20000054 	andcs	r0, r0, r4, asr r0
    2c14:	20000024 	andcs	r0, r0, r4, lsr #32
    2c18:	2000003c 	andcs	r0, r0, ip, lsr r0
    2c1c:	200005e0 	andcs	r0, r0, r0, ror #11
    2c20:	40041014 	andmi	r1, r4, r4, lsl r0
    2c24:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002c28 <rx_int_enable>:
static void rx_int_enable () {
    2c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c2c:	4a2a      	ldr	r2, [pc, #168]	; (2cd8 <rx_int_enable+0xb0>)
    2c2e:	6813      	ldr	r3, [r2, #0]
    2c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2c38:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c3a:	2200      	movs	r2, #0
    2c3c:	4b27      	ldr	r3, [pc, #156]	; (2cdc <rx_int_enable+0xb4>)
    2c3e:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c40:	681d      	ldr	r5, [r3, #0]
    2c42:	2d00      	cmp	r5, #0
    2c44:	d1fb      	bne.n	2c3e <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c46:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c48:	4a25      	ldr	r2, [pc, #148]	; (2ce0 <rx_int_enable+0xb8>)
				diag ("BAD RX");
    2c4a:	4f26      	ldr	r7, [pc, #152]	; (2ce4 <rx_int_enable+0xbc>)
    2c4c:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c4e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2cf0 <rx_int_enable+0xc8>
    2c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2c5a:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c5c:	4b22      	ldr	r3, [pc, #136]	; (2ce8 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c5e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2cf4 <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c62:	69db      	ldr	r3, [r3, #28]
    2c64:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2c66:	7923      	ldrb	r3, [r4, #4]
    2c68:	2b03      	cmp	r3, #3
    2c6a:	d11e      	bne.n	2caa <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c6c:	7a63      	ldrb	r3, [r4, #9]
    2c6e:	7a21      	ldrb	r1, [r4, #8]
    2c70:	1cda      	adds	r2, r3, #3
    2c72:	4291      	cmp	r1, r2
			nr++;
    2c74:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c78:	d11c      	bne.n	2cb4 <rx_int_enable+0x8c>
    2c7a:	f898 2000 	ldrb.w	r2, [r8]
    2c7e:	429a      	cmp	r2, r3
    2c80:	d318      	bcc.n	2cb4 <rx_int_enable+0x8c>
    2c82:	f013 0c01 	ands.w	ip, r3, #1
    2c86:	d115      	bne.n	2cb4 <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2c88:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2c8c:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    2c8e:	5c88      	ldrb	r0, [r1, r2]
    2c90:	440b      	add	r3, r1
    2c92:	3880      	subs	r0, #128	; 0x80
    2c94:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    2c96:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c9a:	f8b9 0000 	ldrh.w	r0, [r9]
    2c9e:	f104 010a 	add.w	r1, r4, #10
    2ca2:	f7ff fb5f 	bl	2364 <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    2ca6:	2300      	movs	r3, #0
    2ca8:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2caa:	2e01      	cmp	r6, #1
    2cac:	d006      	beq.n	2cbc <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2cae:	2601      	movs	r6, #1
    2cb0:	6824      	ldr	r4, [r4, #0]
    2cb2:	e7d8      	b.n	2c66 <rx_int_enable+0x3e>
				diag ("BAD RX");
    2cb4:	4638      	mov	r0, r7
    2cb6:	f7ff f82f 	bl	1d18 <diag>
    2cba:	e7f4      	b.n	2ca6 <rx_int_enable+0x7e>
	if (nr) {
    2cbc:	b14d      	cbz	r5, 2cd2 <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cbe:	f7ff f8c9 	bl	1e54 <lrnd>
}
    2cc2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc6:	f3c0 4102 	ubfx	r1, r0, #16, #3
    2cca:	3102      	adds	r1, #2
    2ccc:	4807      	ldr	r0, [pc, #28]	; (2cec <rx_int_enable+0xc4>)
    2cce:	f7fe bdbf 	b.w	1850 <__pi_utimer_set>
}
    2cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2cd6:	bf00      	nop
    2cd8:	40041018 	andmi	r1, r4, r8, lsl r0
    2cdc:	40041010 	andmi	r1, r4, r0, lsl r0
    2ce0:	40041014 	andmi	r1, r4, r4, lsl r0
    2ce4:	0000527b 	andeq	r5, r0, fp, ror r2
    2ce8:	2000007c 	andcs	r0, r0, ip, ror r0
    2cec:	200005d6 	ldrdcs	r0, [r0], -r6
    2cf0:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2cf4:	200005e8 	andcs	r0, r0, r8, ror #11

00002cf8 <cc1350_driver>:
thread (cc1350_driver)
    2cf8:	2801      	cmp	r0, #1
    2cfa:	b570      	push	{r4, r5, r6, lr}
    2cfc:	f000 808b 	beq.w	2e16 <cc1350_driver+0x11e>
    2d00:	2802      	cmp	r0, #2
    2d02:	f000 80bd 	beq.w	2e80 <cc1350_driver+0x188>
    2d06:	2800      	cmp	r0, #0
    2d08:	f040 80ce 	bne.w	2ea8 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2d0c:	4c68      	ldr	r4, [pc, #416]	; (2eb0 <cc1350_driver+0x1b8>)
    2d0e:	f994 3000 	ldrsb.w	r3, [r4]
    2d12:	2b00      	cmp	r3, #0
    2d14:	da05      	bge.n	2d22 <cc1350_driver+0x2a>
			rf_off ();
    2d16:	f7ff fe7d 	bl	2a14 <rf_off>
			_BIC (dstate,
    2d1a:	7823      	ldrb	r3, [r4, #0]
    2d1c:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2d20:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2d22:	7823      	ldrb	r3, [r4, #0]
    2d24:	0798      	lsls	r0, r3, #30
    2d26:	f003 0201 	and.w	r2, r3, #1
    2d2a:	d51e      	bpl.n	2d6a <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2d2c:	b90a      	cbnz	r2, 2d32 <cc1350_driver+0x3a>
				rx_de ();
    2d2e:	f7ff fe5f 	bl	29f0 <rx_de>
		if (paylen == 0) {
    2d32:	4d60      	ldr	r5, [pc, #384]	; (2eb4 <cc1350_driver+0x1bc>)
    2d34:	4e60      	ldr	r6, [pc, #384]	; (2eb8 <cc1350_driver+0x1c0>)
    2d36:	682b      	ldr	r3, [r5, #0]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d14c      	bne.n	2dd6 <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d3c:	4b5f      	ldr	r3, [pc, #380]	; (2ebc <cc1350_driver+0x1c4>)
    2d3e:	4629      	mov	r1, r5
    2d40:	8818      	ldrh	r0, [r3, #0]
    2d42:	f7ff fb5d 	bl	2400 <tcvphy_get>
    2d46:	6170      	str	r0, [r6, #20]
    2d48:	2800      	cmp	r0, #0
    2d4a:	d02f      	beq.n	2dac <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d4c:	4a5c      	ldr	r2, [pc, #368]	; (2ec0 <cc1350_driver+0x1c8>)
				paylen -= 2;
    2d4e:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d50:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2d52:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d54:	4293      	cmp	r3, r2
				paylen -= 2;
    2d56:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d58:	dc03      	bgt.n	2d62 <cc1350_driver+0x6a>
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	dd01      	ble.n	2d62 <cc1350_driver+0x6a>
    2d5e:	07db      	lsls	r3, r3, #31
    2d60:	d51b      	bpl.n	2d9a <cc1350_driver+0xa2>
    2d62:	200a      	movs	r0, #10
    2d64:	4957      	ldr	r1, [pc, #348]	; (2ec4 <cc1350_driver+0x1cc>)
    2d66:	f7fd ffb9 	bl	cdc <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    2d6a:	2a00      	cmp	r2, #0
    2d6c:	d0e1      	beq.n	2d32 <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    2d6e:	06d9      	lsls	r1, r3, #27
    2d70:	d50d      	bpl.n	2d8e <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d72:	4855      	ldr	r0, [pc, #340]	; (2ec8 <cc1350_driver+0x1d0>)
    2d74:	69c3      	ldr	r3, [r0, #28]
    2d76:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2d78:	2300      	movs	r3, #0
    2d7a:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d7c:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2d7e:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2d80:	f7ff fe12 	bl	29a8 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2d84:	7823      	ldrb	r3, [r4, #0]
    2d86:	f043 0302 	orr.w	r3, r3, #2
    2d8a:	7023      	strb	r3, [r4, #0]
    2d8c:	e7d1      	b.n	2d32 <cc1350_driver+0x3a>
    2d8e:	f7ff fe8b 	bl	2aa8 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2d92:	7823      	ldrb	r3, [r4, #0]
    2d94:	079a      	lsls	r2, r3, #30
    2d96:	d5ec      	bpl.n	2d72 <cc1350_driver+0x7a>
    2d98:	e7cb      	b.n	2d32 <cc1350_driver+0x3a>
				if (statid != 0xffff)
    2d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2d9e:	4b4b      	ldr	r3, [pc, #300]	; (2ecc <cc1350_driver+0x1d4>)
    2da0:	881b      	ldrh	r3, [r3, #0]
    2da2:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2da4:	bf18      	it	ne
    2da6:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2da8:	682b      	ldr	r3, [r5, #0]
    2daa:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    2dac:	6829      	ldr	r1, [r5, #0]
    2dae:	b991      	cbnz	r1, 2dd6 <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    2db0:	4b47      	ldr	r3, [pc, #284]	; (2ed0 <cc1350_driver+0x1d8>)
    2db2:	6818      	ldr	r0, [r3, #0]
    2db4:	f7fe fdc0 	bl	1938 <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    2db8:	7823      	ldrb	r3, [r4, #0]
    2dba:	079d      	lsls	r5, r3, #30
    2dbc:	d503      	bpl.n	2dc6 <cc1350_driver+0xce>
				rx_int_enable ();
    2dbe:	f7ff ff33 	bl	2c28 <rx_int_enable>
			release;
    2dc2:	f7fe fb49 	bl	1458 <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    2dc6:	06dc      	lsls	r4, r3, #27
    2dc8:	d5fb      	bpl.n	2dc2 <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    2dca:	2102      	movs	r1, #2
    2dcc:	4b41      	ldr	r3, [pc, #260]	; (2ed4 <cc1350_driver+0x1dc>)
    2dce:	8818      	ldrh	r0, [r3, #0]
    2dd0:	f7fe fdf8 	bl	19c4 <delay>
    2dd4:	e7f5      	b.n	2dc2 <cc1350_driver+0xca>
		if (bckf_timer) {
    2dd6:	4d40      	ldr	r5, [pc, #256]	; (2ed8 <cc1350_driver+0x1e0>)
    2dd8:	882b      	ldrh	r3, [r5, #0]
    2dda:	b163      	cbz	r3, 2df6 <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    2ddc:	4b3c      	ldr	r3, [pc, #240]	; (2ed0 <cc1350_driver+0x1d8>)
    2dde:	2100      	movs	r1, #0
    2de0:	6818      	ldr	r0, [r3, #0]
    2de2:	f7fe fda9 	bl	1938 <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    2de6:	8828      	ldrh	r0, [r5, #0]
    2de8:	2100      	movs	r1, #0
    2dea:	f7fe fdeb 	bl	19c4 <delay>
			if (dstate & DSTATE_RXAC)
    2dee:	7823      	ldrb	r3, [r4, #0]
    2df0:	0798      	lsls	r0, r3, #30
    2df2:	d5e6      	bpl.n	2dc2 <cc1350_driver+0xca>
    2df4:	e7e3      	b.n	2dbe <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    2df6:	7823      	ldrb	r3, [r4, #0]
    2df8:	06d9      	lsls	r1, r3, #27
    2dfa:	d401      	bmi.n	2e00 <cc1350_driver+0x108>
    2dfc:	f7ff fe54 	bl	2aa8 <rf_on.part.0>
		rx_de ();
    2e00:	f7ff fdf6 	bl	29f0 <rx_de>
		RF_cmdPropTx . status = 0;
    2e04:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e06:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    2e0a:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e0c:	4b33      	ldr	r3, [pc, #204]	; (2edc <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2e0e:	4834      	ldr	r0, [pc, #208]	; (2ee0 <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e10:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2e12:	f7ff fdc9 	bl	29a8 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2e16:	4b26      	ldr	r3, [pc, #152]	; (2eb0 <cc1350_driver+0x1b8>)
    2e18:	f993 3000 	ldrsb.w	r3, [r3]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	f6ff af75 	blt.w	2d0c <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e22:	4b2e      	ldr	r3, [pc, #184]	; (2edc <cc1350_driver+0x1e4>)
    2e24:	681a      	ldr	r2, [r3, #0]
    2e26:	0792      	lsls	r2, r2, #30
    2e28:	d402      	bmi.n	2e30 <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    2e2a:	2101      	movs	r1, #1
    2e2c:	4608      	mov	r0, r1
    2e2e:	e7cf      	b.n	2dd0 <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e30:	4821      	ldr	r0, [pc, #132]	; (2eb8 <cc1350_driver+0x1c0>)
    2e32:	4c2c      	ldr	r4, [pc, #176]	; (2ee4 <cc1350_driver+0x1ec>)
    2e34:	8842      	ldrh	r2, [r0, #2]
    2e36:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    2e3a:	d018      	beq.n	2e6e <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e3c:	7822      	ldrb	r2, [r4, #0]
    2e3e:	2a0f      	cmp	r2, #15
    2e40:	d909      	bls.n	2e56 <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2e42:	2200      	movs	r2, #0
    2e44:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e46:	f06f 0202 	mvn.w	r2, #2
    2e4a:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2e4c:	f7ff fdac 	bl	29a8 <issue_cmd>
				proceed (DR_XMIT);
    2e50:	2001      	movs	r0, #1
    2e52:	f7fe fd67 	bl	1924 <proceed>
			txtries++;
    2e56:	7823      	ldrb	r3, [r4, #0]
    2e58:	3301      	adds	r3, #1
    2e5a:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e5c:	f7fe fffa 	bl	1e54 <lrnd>
    2e60:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2e64:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e66:	481c      	ldr	r0, [pc, #112]	; (2ed8 <cc1350_driver+0x1e0>)
    2e68:	f7fe fcf2 	bl	1850 <__pi_utimer_set>
		goto DR_LOOP__;
    2e6c:	e74e      	b.n	2d0c <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e6e:	6940      	ldr	r0, [r0, #20]
    2e70:	f7ff fb00 	bl	2474 <tcvphy_end>
		paylen = 0;
    2e74:	2300      	movs	r3, #0
    2e76:	4a0f      	ldr	r2, [pc, #60]	; (2eb4 <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e78:	2102      	movs	r1, #2
		paylen = 0;
    2e7a:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2e7c:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e7e:	e7f2      	b.n	2e66 <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e80:	4b0b      	ldr	r3, [pc, #44]	; (2eb0 <cc1350_driver+0x1b8>)
    2e82:	781a      	ldrb	r2, [r3, #0]
    2e84:	f993 3000 	ldrsb.w	r3, [r3]
    2e88:	2b00      	cmp	r3, #0
    2e8a:	f6ff af3f 	blt.w	2d0c <cc1350_driver+0x14>
    2e8e:	07d3      	lsls	r3, r2, #31
    2e90:	f53f af3c 	bmi.w	2d0c <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2e94:	4b09      	ldr	r3, [pc, #36]	; (2ebc <cc1350_driver+0x1c4>)
    2e96:	8818      	ldrh	r0, [r3, #0]
    2e98:	f7ff fad2 	bl	2440 <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e9c:	2800      	cmp	r0, #0
    2e9e:	f47f af35 	bne.w	2d0c <cc1350_driver+0x14>
			rf_off ();
    2ea2:	f7ff fdb7 	bl	2a14 <rf_off>
    2ea6:	e731      	b.n	2d0c <cc1350_driver+0x14>
endthread
    2ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2eac:	f7fe bcb2 	b.w	1814 <__pi_badstate>
    2eb0:	200005e0 	andcs	r0, r0, r0, ror #11
    2eb4:	200005e4 	andcs	r0, r0, r4, ror #11
    2eb8:	200000a0 	andcs	r0, r0, r0, lsr #1
    2ebc:	200005e8 	andcs	r0, r0, r8, ror #11
    2ec0:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2ec4:	00005282 	andeq	r5, r0, r2, lsl #5
    2ec8:	2000007c 	andcs	r0, r0, ip, ror r0
    2ecc:	20000610 	andcs	r0, r0, r0, lsl r6
    2ed0:	200005ec 	andcs	r0, r0, ip, ror #11
    2ed4:	20000038 	andcs	r0, r0, r8, lsr r0
    2ed8:	200005d6 	ldrdcs	r0, [r0], -r6
    2edc:	40041010 	andmi	r1, r4, r0, lsl r0
    2ee0:	20000008 	andcs	r0, r0, r8
    2ee4:	20000612 	andcs	r0, r0, r2, lsl r6

00002ee8 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    2ee8:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eea:	4a15      	ldr	r2, [pc, #84]	; (2f40 <RFCCPE0IntHandler+0x58>)
    2eec:	6813      	ldr	r3, [r2, #0]
    2eee:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    2ef0:	bfbf      	itttt	lt
    2ef2:	4914      	ldrlt	r1, [pc, #80]	; (2f44 <RFCCPE0IntHandler+0x5c>)
    2ef4:	780b      	ldrblt	r3, [r1, #0]
    2ef6:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    2efa:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2efc:	2100      	movs	r1, #0
    2efe:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f00:	6813      	ldr	r3, [r2, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d1fb      	bne.n	2efe <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f06:	4a10      	ldr	r2, [pc, #64]	; (2f48 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    2f08:	4c10      	ldr	r4, [pc, #64]	; (2f4c <RFCCPE0IntHandler+0x64>)
    2f0a:	6811      	ldr	r1, [r2, #0]
    2f0c:	6013      	str	r3, [r2, #0]
    2f0e:	4a10      	ldr	r2, [pc, #64]	; (2f50 <RFCCPE0IntHandler+0x68>)
    2f10:	6824      	ldr	r4, [r4, #0]
    2f12:	6811      	ldr	r1, [r2, #0]
    2f14:	4608      	mov	r0, r1
    2f16:	f830 2b10 	ldrh.w	r2, [r0], #16
    2f1a:	f002 0207 	and.w	r2, r2, #7
    2f1e:	429a      	cmp	r2, r3
    2f20:	dd08      	ble.n	2f34 <RFCCPE0IntHandler+0x4c>
    2f22:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2f26:	3301      	adds	r3, #1
    2f28:	42a5      	cmp	r5, r4
    2f2a:	d1f8      	bne.n	2f1e <RFCCPE0IntHandler+0x36>
    2f2c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2f30:	889b      	ldrh	r3, [r3, #4]
    2f32:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2f34:	4a07      	ldr	r2, [pc, #28]	; (2f54 <RFCCPE0IntHandler+0x6c>)
    2f36:	7813      	ldrb	r3, [r2, #0]
    2f38:	f043 0302 	orr.w	r3, r3, #2
    2f3c:	7013      	strb	r3, [r2, #0]
}
    2f3e:	bd30      	pop	{r4, r5, pc}
    2f40:	40041010 	andmi	r1, r4, r0, lsl r0
    2f44:	200005e0 	andcs	r0, r0, r0, ror #11
    2f48:	40041014 	andmi	r1, r4, r4, lsl r0
    2f4c:	200005ec 	andcs	r0, r0, ip, ror #11
    2f50:	200005dc 	ldrdcs	r0, [r0], -ip
    2f54:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

00002f58 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2f5c:	4c49      	ldr	r4, [pc, #292]	; (3084 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    2f5e:	4606      	mov	r6, r0
	if (rbuffl != 0)
    2f60:	7822      	ldrb	r2, [r4, #0]
    2f62:	b11a      	cbz	r2, 2f6c <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2f64:	2009      	movs	r0, #9
    2f66:	4948      	ldr	r1, [pc, #288]	; (3088 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2f68:	f7fd feb8 	bl	cdc <__pi_syserror>
	if (mbs == 0)
    2f6c:	b129      	cbz	r1, 2f7a <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f6e:	1f8a      	subs	r2, r1, #6
    2f70:	2af4      	cmp	r2, #244	; 0xf4
    2f72:	d903      	bls.n	2f7c <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2f74:	2003      	movs	r0, #3
    2f76:	4945      	ldr	r1, [pc, #276]	; (308c <phys_cc1350+0x134>)
    2f78:	e7f6      	b.n	2f68 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    2f7a:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2f7c:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    2f7e:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    2f82:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2f84:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2f88:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f8a:	7820      	ldrb	r0, [r4, #0]
    2f8c:	469b      	mov	fp, r3
    2f8e:	300d      	adds	r0, #13
    2f90:	f7fe fe48 	bl	1c24 <__pi_malloc>
		if (db == NULL)
    2f94:	4603      	mov	r3, r0
    2f96:	b920      	cbnz	r0, 2fa2 <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2f98:	2006      	movs	r0, #6
    2f9a:	493b      	ldr	r1, [pc, #236]	; (3088 <phys_cc1350+0x130>)
    2f9c:	e7e4      	b.n	2f68 <phys_cc1350+0x10>
    2f9e:	46b8      	mov	r8, r7
    2fa0:	e7f3      	b.n	2f8a <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    2fa2:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    2fa6:	2f00      	cmp	r7, #0
    2fa8:	d03e      	beq.n	3028 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    2faa:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    2fae:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    2fb0:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    2fb2:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    2fb4:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    2fb8:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    2fbc:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    2fbe:	d1ee      	bne.n	2f9e <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    2fc0:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2fc2:	2008      	movs	r0, #8
    2fc4:	f7fe fe2e 	bl	1c24 <__pi_malloc>
    2fc8:	4b31      	ldr	r3, [pc, #196]	; (3090 <phys_cc1350+0x138>)
    2fca:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    2fcc:	2800      	cmp	r0, #0
    2fce:	d0e3      	beq.n	2f98 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    2fd0:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    2fd2:	2500      	movs	r5, #0
    2fd4:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fd6:	492f      	ldr	r1, [pc, #188]	; (3094 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    2fd8:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2fda:	4a2f      	ldr	r2, [pc, #188]	; (3098 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fdc:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    2fde:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fe0:	89da      	ldrh	r2, [r3, #14]
    2fe2:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    2fe6:	f042 0206 	orr.w	r2, r2, #6
    2fea:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    2fec:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fee:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    2ff2:	3b02      	subs	r3, #2
    2ff4:	7023      	strb	r3, [r4, #0]
	physid = phy;
    2ff6:	4b29      	ldr	r3, [pc, #164]	; (309c <phys_cc1350+0x144>)
    2ff8:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ffa:	f7ff f98b 	bl	2314 <tcvphy_reg>
    2ffe:	4b28      	ldr	r3, [pc, #160]	; (30a0 <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3000:	2207      	movs	r2, #7
    3002:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3004:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3006:	462b      	mov	r3, r5
    3008:	4826      	ldr	r0, [pc, #152]	; (30a4 <phys_cc1350+0x14c>)
    300a:	f7fe fe85 	bl	1d18 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    300e:	4826      	ldr	r0, [pc, #152]	; (30a8 <phys_cc1350+0x150>)
    3010:	f7fe fc08 	bl	1824 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    3014:	4629      	mov	r1, r5
    3016:	4825      	ldr	r0, [pc, #148]	; (30ac <phys_cc1350+0x154>)
    3018:	f7fe fe58 	bl	1ccc <__pi_fork>
    301c:	4b24      	ldr	r3, [pc, #144]	; (30b0 <phys_cc1350+0x158>)
    301e:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    3020:	b920      	cbnz	r0, 302c <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    3022:	2004      	movs	r0, #4
    3024:	4918      	ldr	r1, [pc, #96]	; (3088 <phys_cc1350+0x130>)
    3026:	e79f      	b.n	2f68 <phys_cc1350+0x10>
    3028:	4605      	mov	r5, r0
    302a:	e7c0      	b.n	2fae <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    302c:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    3030:	4c20      	ldr	r4, [pc, #128]	; (30b4 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    3032:	4921      	ldr	r1, [pc, #132]	; (30b8 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    3034:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3036:	4b21      	ldr	r3, [pc, #132]	; (30bc <phys_cc1350+0x164>)
    3038:	781a      	ldrb	r2, [r3, #0]
    303a:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    303c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3040:	8858      	ldrh	r0, [r3, #2]
    3042:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    3046:	6922      	ldr	r2, [r4, #16]
    3048:	f003 030f 	and.w	r3, r3, #15
    304c:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    3050:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    3054:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    3058:	f022 020f 	bic.w	r2, r2, #15
    305c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    3060:	4313      	orrs	r3, r2
    3062:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    3064:	f7ff fbc8 	bl	27f8 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3068:	4b15      	ldr	r3, [pc, #84]	; (30c0 <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    306a:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    306c:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    306e:	f000 fe27 	bl	3cc0 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3072:	4620      	mov	r0, r4
    3074:	4913      	ldr	r1, [pc, #76]	; (30c4 <phys_cc1350+0x16c>)
    3076:	f000 fd7b 	bl	3b70 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    307a:	4b13      	ldr	r3, [pc, #76]	; (30c8 <phys_cc1350+0x170>)
    307c:	601d      	str	r5, [r3, #0]
}
    307e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3082:	bf00      	nop
    3084:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    3088:	0000528a 	andeq	r5, r0, sl, lsl #5
    308c:	0000528f 	andeq	r5, r0, pc, lsl #5
    3090:	2000007c 	andcs	r0, r0, ip, ror r0
    3094:	00002819 	andeq	r2, r0, r9, lsl r8
    3098:	20000604 	andcs	r0, r0, r4, lsl #12
    309c:	200005e8 	andcs	r0, r0, r8, ror #11
    30a0:	200005ec 	andcs	r0, r0, ip, ror #11
    30a4:	00005297 	muleq	r0, r7, r2
    30a8:	200005d6 	ldrdcs	r0, [r0], -r6
    30ac:	00002cf9 	strdeq	r2, [r0], -r9
    30b0:	200005dc 	ldrdcs	r0, [r0], -ip
    30b4:	20000054 	andcs	r0, r0, r4, asr r0
    30b8:	00005bfc 	strdeq	r5, [r0], -ip
    30bc:	2000003a 	andcs	r0, r0, sl, lsr r0
    30c0:	400821d0 	ldrdmi	r2, [r8], -r0
    30c4:	200005f4 	strdcs	r0, [r0], -r4
    30c8:	40041018 	andmi	r1, r4, r8, lsl r0

000030cc <tcv_clo_null>:
    30cc:	b510      	push	{r4, lr}
    30ce:	4a07      	ldr	r2, [pc, #28]	; (30ec <tcv_clo_null+0x20>)
    30d0:	4603      	mov	r3, r0
    30d2:	6812      	ldr	r2, [r2, #0]
    30d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    30d8:	b132      	cbz	r2, 30e8 <tcv_clo_null+0x1c>
    30da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    30de:	428c      	cmp	r4, r1
    30e0:	bf04      	itt	eq
    30e2:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    30e6:	2000      	moveq	r0, #0
    30e8:	bd10      	pop	{r4, pc}
    30ea:	bf00      	nop
    30ec:	20000614 	andcs	r0, r0, r4, lsl r6

000030f0 <tcv_rcv_null>:
    30f0:	4907      	ldr	r1, [pc, #28]	; (3110 <tcv_rcv_null+0x20>)
    30f2:	9a00      	ldr	r2, [sp, #0]
    30f4:	6809      	ldr	r1, [r1, #0]
    30f6:	b909      	cbnz	r1, 30fc <tcv_rcv_null+0xc>
    30f8:	2000      	movs	r0, #0
    30fa:	4770      	bx	lr
    30fc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3100:	6019      	str	r1, [r3, #0]
    3102:	3101      	adds	r1, #1
    3104:	d0f8      	beq.n	30f8 <tcv_rcv_null+0x8>
    3106:	2300      	movs	r3, #0
    3108:	2002      	movs	r0, #2
    310a:	8053      	strh	r3, [r2, #2]
    310c:	8013      	strh	r3, [r2, #0]
    310e:	4770      	bx	lr
    3110:	20000614 	andcs	r0, r0, r4, lsl r6

00003114 <tcv_frm_null>:
    3114:	2000      	movs	r0, #0
    3116:	8048      	strh	r0, [r1, #2]
    3118:	8008      	strh	r0, [r1, #0]
    311a:	4770      	bx	lr

0000311c <tcv_out_null>:
    311c:	2004      	movs	r0, #4
    311e:	4770      	bx	lr

00003120 <tcv_xmt_null>:
    3120:	2001      	movs	r0, #1
    3122:	4770      	bx	lr

00003124 <tcv_ope_null>:
    3124:	b570      	push	{r4, r5, r6, lr}
    3126:	4c0f      	ldr	r4, [pc, #60]	; (3164 <tcv_ope_null+0x40>)
    3128:	4605      	mov	r5, r0
    312a:	6823      	ldr	r3, [r4, #0]
    312c:	460e      	mov	r6, r1
    312e:	b94b      	cbnz	r3, 3144 <tcv_ope_null+0x20>
    3130:	200c      	movs	r0, #12
    3132:	f7fe fd77 	bl	1c24 <__pi_malloc>
    3136:	6020      	str	r0, [r4, #0]
    3138:	b178      	cbz	r0, 315a <tcv_ope_null+0x36>
    313a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    313e:	e9c0 3300 	strd	r3, r3, [r0]
    3142:	6083      	str	r3, [r0, #8]
    3144:	6823      	ldr	r3, [r4, #0]
    3146:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    314a:	3201      	adds	r2, #1
    314c:	bf06      	itte	eq
    314e:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    3152:	2000      	moveq	r0, #0
    3154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    3158:	bd70      	pop	{r4, r5, r6, pc}
    315a:	2006      	movs	r0, #6
    315c:	4902      	ldr	r1, [pc, #8]	; (3168 <tcv_ope_null+0x44>)
    315e:	f7fd fdbd 	bl	cdc <__pi_syserror>
    3162:	bf00      	nop
    3164:	20000614 	andcs	r0, r0, r4, lsl r6
    3168:	00005c08 	andeq	r5, r0, r8, lsl #24

0000316c <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    316c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    316e:	4b18      	ldr	r3, [pc, #96]	; (31d0 <__outserial+0x64>)
    3170:	681b      	ldr	r3, [r3, #0]
    3172:	689d      	ldr	r5, [r3, #8]
    3174:	b130      	cbz	r0, 3184 <__outserial+0x18>
    3176:	280a      	cmp	r0, #10
    3178:	d00d      	beq.n	3196 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    317a:	b003      	add	sp, #12
    317c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3180:	f7fe bb48 	b.w	1814 <__pi_badstate>
	ptr = data;
    3184:	4b13      	ldr	r3, [pc, #76]	; (31d4 <__outserial+0x68>)
    3186:	4c14      	ldr	r4, [pc, #80]	; (31d8 <__outserial+0x6c>)
    3188:	601d      	str	r5, [r3, #0]
	if (*ptr)
    318a:	782b      	ldrb	r3, [r5, #0]
    318c:	b1e3      	cbz	r3, 31c8 <__outserial+0x5c>
		len = strlen (ptr);
    318e:	4628      	mov	r0, r5
    3190:	f7fe fc46 	bl	1a20 <__pi_strlen>
    3194:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3196:	4e0f      	ldr	r6, [pc, #60]	; (31d4 <__outserial+0x68>)
    3198:	4f0f      	ldr	r7, [pc, #60]	; (31d8 <__outserial+0x6c>)
    319a:	883b      	ldrh	r3, [r7, #0]
    319c:	2201      	movs	r2, #1
    319e:	9300      	str	r3, [sp, #0]
    31a0:	2100      	movs	r1, #0
    31a2:	6833      	ldr	r3, [r6, #0]
    31a4:	200a      	movs	r0, #10
    31a6:	f7fe fc7b 	bl	1aa0 <io>
	ptr += quant;
    31aa:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    31ac:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    31ae:	4403      	add	r3, r0
	len -= quant;
    31b0:	1a24      	subs	r4, r4, r0
	ptr += quant;
    31b2:	6033      	str	r3, [r6, #0]
	len -= quant;
    31b4:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    31b6:	2c00      	cmp	r4, #0
    31b8:	d1ef      	bne.n	319a <__outserial+0x2e>
		ufree (data);
    31ba:	4628      	mov	r0, r5
    31bc:	f7fe fce6 	bl	1b8c <__pi_free>
		finish;
    31c0:	4620      	mov	r0, r4
    31c2:	f7fe fd07 	bl	1bd4 <kill>
    31c6:	e7e8      	b.n	319a <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    31c8:	786b      	ldrb	r3, [r5, #1]
    31ca:	3303      	adds	r3, #3
    31cc:	6023      	str	r3, [r4, #0]
    31ce:	e7e2      	b.n	3196 <__outserial+0x2a>
    31d0:	200006d4 	ldrdcs	r0, [r0], -r4
    31d4:	2000061c 	andcs	r0, r0, ip, lsl r6
    31d8:	20000618 	andcs	r0, r0, r8, lsl r6

000031dc <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    31dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31de:	4d42      	ldr	r5, [pc, #264]	; (32e8 <__inserial+0x10c>)
    31e0:	682a      	ldr	r2, [r5, #0]
    31e2:	6894      	ldr	r4, [r2, #8]
    31e4:	2803      	cmp	r0, #3
    31e6:	d87a      	bhi.n	32de <__inserial+0x102>
    31e8:	e8df f000 	tbb	[pc, r0]
    31ec:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    31f0:	4b3e      	ldr	r3, [pc, #248]	; (32ec <__inserial+0x110>)
    31f2:	681b      	ldr	r3, [r3, #0]
    31f4:	b113      	cbz	r3, 31fc <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    31f6:	2000      	movs	r0, #0
    31f8:	f7fe fcec 	bl	1bd4 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31fc:	2040      	movs	r0, #64	; 0x40
    31fe:	f7fe fd11 	bl	1c24 <__pi_malloc>
    3202:	4b3b      	ldr	r3, [pc, #236]	; (32f0 <__inserial+0x114>)
    3204:	4604      	mov	r4, r0
    3206:	6018      	str	r0, [r3, #0]
    3208:	b918      	cbnz	r0, 3212 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    320a:	f7fe fd79 	bl	1d00 <__pi_waitmem>
		release;
    320e:	f7fe f923 	bl	1458 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    3212:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    3214:	682b      	ldr	r3, [r5, #0]
    3216:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    3218:	4b36      	ldr	r3, [pc, #216]	; (32f4 <__inserial+0x118>)
    321a:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    321c:	2001      	movs	r0, #1
    321e:	2200      	movs	r2, #0
    3220:	4d33      	ldr	r5, [pc, #204]	; (32f0 <__inserial+0x114>)
    3222:	9000      	str	r0, [sp, #0]
    3224:	682b      	ldr	r3, [r5, #0]
    3226:	4611      	mov	r1, r2
    3228:	f7fe fc3a 	bl	1aa0 <io>
	if (ptr == (char*) data) { // new line
    322c:	682b      	ldr	r3, [r5, #0]
    322e:	42a3      	cmp	r3, r4
    3230:	d10d      	bne.n	324e <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    3232:	7823      	ldrb	r3, [r4, #0]
    3234:	b923      	cbnz	r3, 3240 <__inserial+0x64>
			ptr++;
    3236:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    3238:	2002      	movs	r0, #2
			ptr++;
    323a:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    323c:	f7fe fb72 	bl	1924 <proceed>
		}

		if (*ptr < 0x20)
    3240:	682b      	ldr	r3, [r5, #0]
    3242:	781b      	ldrb	r3, [r3, #0]
    3244:	2b1f      	cmp	r3, #31
    3246:	d802      	bhi.n	324e <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    3248:	2001      	movs	r0, #1
    324a:	f7fe fb6b 	bl	1924 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    324e:	682b      	ldr	r3, [r5, #0]
    3250:	781a      	ldrb	r2, [r3, #0]
    3252:	2a0a      	cmp	r2, #10
    3254:	d001      	beq.n	325a <__inserial+0x7e>
    3256:	2a0d      	cmp	r2, #13
    3258:	d105      	bne.n	3266 <__inserial+0x8a>
		*ptr = '\0';
    325a:	2000      	movs	r0, #0
    325c:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    325e:	4b23      	ldr	r3, [pc, #140]	; (32ec <__inserial+0x110>)
    3260:	601c      	str	r4, [r3, #0]
		finish;
    3262:	f7fe fcb7 	bl	1bd4 <kill>
	}

	if (len) {
    3266:	4923      	ldr	r1, [pc, #140]	; (32f4 <__inserial+0x118>)
    3268:	680b      	ldr	r3, [r1, #0]
    326a:	b123      	cbz	r3, 3276 <__inserial+0x9a>
		ptr++;
    326c:	682a      	ldr	r2, [r5, #0]
		len--;
    326e:	3b01      	subs	r3, #1
		ptr++;
    3270:	3201      	adds	r2, #1
    3272:	602a      	str	r2, [r5, #0]
		len--;
    3274:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    3276:	2001      	movs	r0, #1
    3278:	f7fe fb54 	bl	1924 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    327c:	2301      	movs	r3, #1
    327e:	2200      	movs	r2, #0
    3280:	4d1b      	ldr	r5, [pc, #108]	; (32f0 <__inserial+0x114>)
    3282:	9300      	str	r3, [sp, #0]
    3284:	4611      	mov	r1, r2
    3286:	682b      	ldr	r3, [r5, #0]
    3288:	2002      	movs	r0, #2
    328a:	f7fe fc09 	bl	1aa0 <io>
	len -= 2;
    328e:	4819      	ldr	r0, [pc, #100]	; (32f4 <__inserial+0x118>)
    3290:	6803      	ldr	r3, [r0, #0]
    3292:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    3294:	682b      	ldr	r3, [r5, #0]
    3296:	f813 1b01 	ldrb.w	r1, [r3], #1
    329a:	3101      	adds	r1, #1
		len = *ptr + 1;
    329c:	4291      	cmp	r1, r2
    329e:	bfd4      	ite	le
    32a0:	6001      	strle	r1, [r0, #0]
    32a2:	6002      	strgt	r2, [r0, #0]
	ptr++;
    32a4:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    32a6:	2200      	movs	r2, #0
    32a8:	4f12      	ldr	r7, [pc, #72]	; (32f4 <__inserial+0x118>)
    32aa:	4d11      	ldr	r5, [pc, #68]	; (32f0 <__inserial+0x114>)
    32ac:	883b      	ldrh	r3, [r7, #0]
    32ae:	4611      	mov	r1, r2
    32b0:	9300      	str	r3, [sp, #0]
    32b2:	682b      	ldr	r3, [r5, #0]
    32b4:	2003      	movs	r0, #3
    32b6:	f7fe fbf3 	bl	1aa0 <io>
	len -= quant;
    32ba:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32bc:	4606      	mov	r6, r0
	len -= quant;
    32be:	1a18      	subs	r0, r3, r0
    32c0:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    32c2:	b918      	cbnz	r0, 32cc <__inserial+0xf0>
		__inpline = (char*)data;
    32c4:	4b09      	ldr	r3, [pc, #36]	; (32ec <__inserial+0x110>)
    32c6:	601c      	str	r4, [r3, #0]
		finish;
    32c8:	f7fe fc84 	bl	1bd4 <kill>
	}
	ptr += quant;
    32cc:	6828      	ldr	r0, [r5, #0]
    32ce:	4430      	add	r0, r6
    32d0:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    32d2:	2003      	movs	r0, #3

endstrand
    32d4:	b003      	add	sp, #12
    32d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    32da:	f7fe bb23 	b.w	1924 <proceed>
endstrand
    32de:	b003      	add	sp, #12
    32e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    32e4:	f7fe ba96 	b.w	1814 <__pi_badstate>
    32e8:	200006d4 	ldrdcs	r0, [r0], -r4
    32ec:	20000620 	andcs	r0, r0, r0, lsr #12
    32f0:	20000628 	andcs	r0, r0, r8, lsr #12
    32f4:	20000624 	andcs	r0, r0, r4, lsr #12

000032f8 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    32f8:	f8dc 2000 	ldr.w	r2, [ip]
    32fc:	b132      	cbz	r2, 330c <outc.5724+0x14>
    32fe:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    3302:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    3306:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    3308:	bf88      	it	hi
    330a:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    330c:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    3310:	3301      	adds	r3, #1
    3312:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    3316:	4770      	bx	lr

00003318 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    331c:	461c      	mov	r4, r3
    331e:	ab0c      	add	r3, sp, #48	; 0x30
    3320:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    3322:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    3324:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    3326:	4f86      	ldr	r7, [pc, #536]	; (3540 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3328:	9001      	str	r0, [sp, #4]
    332a:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    332e:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    3332:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    3336:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    333a:	d118      	bne.n	336e <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    333c:	f892 9001 	ldrb.w	r9, [r2, #1]
    3340:	1c95      	adds	r5, r2, #2
				outc ('\\');
    3342:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    3346:	f1b9 0f00 	cmp.w	r9, #0
    334a:	d10b      	bne.n	3364 <__pi_vfparse+0x4c>
				outc ('\\');
    334c:	205c      	movs	r0, #92	; 0x5c
    334e:	f7ff ffd3 	bl	32f8 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    3352:	4648      	mov	r0, r9
    3354:	f10d 0c04 	add.w	ip, sp, #4
    3358:	f7ff ffce 	bl	32f8 <outc.5724>
			if (c == '\0')
    335c:	f1b9 0f00 	cmp.w	r9, #0
    3360:	d103      	bne.n	336a <__pi_vfparse+0x52>
    3362:	e027      	b.n	33b4 <__pi_vfparse+0x9c>
			outc (c);
    3364:	4648      	mov	r0, r9
				outc (val);
    3366:	f7ff ffc7 	bl	32f8 <outc.5724>
				val = (word) va_arg (ap, aword);
    336a:	462a      	mov	r2, r5
    336c:	e7e1      	b.n	3332 <__pi_vfparse+0x1a>
		if (c == '%') {
    336e:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    3372:	f040 80e2 	bne.w	353a <__pi_vfparse+0x222>
			c = *fm++;
    3376:	f892 8001 	ldrb.w	r8, [r2, #1]
    337a:	1c95      	adds	r5, r2, #2
			switch (c) {
    337c:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    3380:	f000 80cd 	beq.w	351e <__pi_vfparse+0x206>
    3384:	d81b      	bhi.n	33be <__pi_vfparse+0xa6>
    3386:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    338a:	d033      	beq.n	33f4 <__pi_vfparse+0xdc>
    338c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    3390:	d067      	beq.n	3462 <__pi_vfparse+0x14a>
    3392:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    3396:	f000 80bc 	beq.w	3512 <__pi_vfparse+0x1fa>
				outc ('%');
    339a:	2025      	movs	r0, #37	; 0x25
    339c:	f10d 0c04 	add.w	ip, sp, #4
    33a0:	f7ff ffaa 	bl	32f8 <outc.5724>
				outc (c);
    33a4:	4640      	mov	r0, r8
    33a6:	f10d 0c04 	add.w	ip, sp, #4
    33aa:	f7ff ffa5 	bl	32f8 <outc.5724>
				if (c == '\0')
    33ae:	f1b8 0f00 	cmp.w	r8, #0
    33b2:	d1da      	bne.n	336a <__pi_vfparse+0x52>
Ret:
				return d;
    33b4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    33b8:	b004      	add	sp, #16
    33ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    33be:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    33c2:	d017      	beq.n	33f4 <__pi_vfparse+0xdc>
    33c4:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    33c8:	d1e7      	bne.n	339a <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    33ca:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    33ce:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    33d2:	fa1f f983 	uxth.w	r9, r3
    33d6:	fa49 f308 	asr.w	r3, r9, r8
    33da:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    33de:	5cf8      	ldrb	r0, [r7, r3]
    33e0:	f10d 0c04 	add.w	ip, sp, #4
    33e4:	f7ff ff88 	bl	32f8 <outc.5724>
					if (i == 0)
    33e8:	f1b8 0f00 	cmp.w	r8, #0
    33ec:	d0bd      	beq.n	336a <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    33ee:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    33f2:	e7f0      	b.n	33d6 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    33f4:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    33f8:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    33fc:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    3400:	d10a      	bne.n	3418 <__pi_vfparse+0x100>
    3402:	041b      	lsls	r3, r3, #16
    3404:	d508      	bpl.n	3418 <__pi_vfparse+0x100>
					outc ('-');
    3406:	202d      	movs	r0, #45	; 0x2d
    3408:	f10d 0c04 	add.w	ip, sp, #4
    340c:	f7ff ff74 	bl	32f8 <outc.5724>
					val = (~val) + 1;
    3410:	f1c9 0900 	rsb	r9, r9, #0
    3414:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    3418:	2305      	movs	r3, #5
				enci (10000);
    341a:	f242 7810 	movw	r8, #10000	; 0x2710
    341e:	fbb9 f0f8 	udiv	r0, r9, r8
    3422:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    3426:	d103      	bne.n	3430 <__pi_vfparse+0x118>
    3428:	3b01      	subs	r3, #1
    342a:	d117      	bne.n	345c <__pi_vfparse+0x144>
    342c:	f04f 0801 	mov.w	r8, #1
    3430:	fa1f fa80 	uxth.w	sl, r0
    3434:	f10d 0c04 	add.w	ip, sp, #4
    3438:	3030      	adds	r0, #48	; 0x30
    343a:	f7ff ff5d 	bl	32f8 <outc.5724>
    343e:	fbb8 f3f6 	udiv	r3, r8, r6
    3442:	fb08 991a 	mls	r9, r8, sl, r9
    3446:	f1b8 0f09 	cmp.w	r8, #9
    344a:	fa1f f989 	uxth.w	r9, r9
    344e:	b29b      	uxth	r3, r3
    3450:	d98b      	bls.n	336a <__pi_vfparse+0x52>
    3452:	fbb9 f0f3 	udiv	r0, r9, r3
    3456:	4698      	mov	r8, r3
    3458:	b2c0      	uxtb	r0, r0
    345a:	e7e9      	b.n	3430 <__pi_vfparse+0x118>
    345c:	fbb8 f8f6 	udiv	r8, r8, r6
    3460:	e7dd      	b.n	341e <__pi_vfparse+0x106>
				c = *fm;
    3462:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    3464:	2b64      	cmp	r3, #100	; 0x64
    3466:	d001      	beq.n	346c <__pi_vfparse+0x154>
    3468:	2b75      	cmp	r3, #117	; 0x75
    346a:	d132      	bne.n	34d2 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    346c:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    346e:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    3472:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    3476:	d109      	bne.n	348c <__pi_vfparse+0x174>
    3478:	f1ba 0f00 	cmp.w	sl, #0
    347c:	da06      	bge.n	348c <__pi_vfparse+0x174>
						outc ('-');
    347e:	202d      	movs	r0, #45	; 0x2d
    3480:	f10d 0c04 	add.w	ip, sp, #4
    3484:	f7ff ff38 	bl	32f8 <outc.5724>
						val = (~val) + 1;
    3488:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    348c:	230a      	movs	r3, #10
					enci (1000000000UL);
    348e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3544 <__pi_vfparse+0x22c>
    3492:	fbba f9f8 	udiv	r9, sl, r8
    3496:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    349a:	d103      	bne.n	34a4 <__pi_vfparse+0x18c>
    349c:	3b01      	subs	r3, #1
    349e:	d115      	bne.n	34cc <__pi_vfparse+0x1b4>
    34a0:	f04f 0801 	mov.w	r8, #1
    34a4:	f10d 0c04 	add.w	ip, sp, #4
    34a8:	f109 0030 	add.w	r0, r9, #48	; 0x30
    34ac:	f7ff ff24 	bl	32f8 <outc.5724>
    34b0:	f1b8 0f09 	cmp.w	r8, #9
    34b4:	fbb8 f3f6 	udiv	r3, r8, r6
    34b8:	fb08 aa19 	mls	sl, r8, r9, sl
    34bc:	f67f af55 	bls.w	336a <__pi_vfparse+0x52>
    34c0:	fbba f9f3 	udiv	r9, sl, r3
    34c4:	4698      	mov	r8, r3
    34c6:	fa5f f989 	uxtb.w	r9, r9
    34ca:	e7eb      	b.n	34a4 <__pi_vfparse+0x18c>
    34cc:	fbb8 f8f6 	udiv	r8, r8, r6
    34d0:	e7df      	b.n	3492 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    34d2:	2b78      	cmp	r3, #120	; 0x78
    34d4:	d114      	bne.n	3500 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    34d6:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    34da:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    34de:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    34e0:	fa29 f308 	lsr.w	r3, r9, r8
    34e4:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    34e8:	5cf8      	ldrb	r0, [r7, r3]
    34ea:	f10d 0c04 	add.w	ip, sp, #4
    34ee:	f7ff ff03 	bl	32f8 <outc.5724>
						if (i == 0)
    34f2:	f1b8 0f00 	cmp.w	r8, #0
    34f6:	f43f af38 	beq.w	336a <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    34fa:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    34fe:	e7ef      	b.n	34e0 <__pi_vfparse+0x1c8>
					outc ('%');
    3500:	4648      	mov	r0, r9
    3502:	f10d 0c04 	add.w	ip, sp, #4
    3506:	f7ff fef7 	bl	32f8 <outc.5724>
					outc ('l');
    350a:	4640      	mov	r0, r8
    350c:	f10d 0c04 	add.w	ip, sp, #4
    3510:	e729      	b.n	3366 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    3512:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    3516:	f10d 0c04 	add.w	ip, sp, #4
    351a:	b280      	uxth	r0, r0
    351c:	e723      	b.n	3366 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    351e:	f854 3b04 	ldr.w	r3, [r4], #4
    3522:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3526:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    352a:	2800      	cmp	r0, #0
    352c:	f43f af1d 	beq.w	336a <__pi_vfparse+0x52>
					outc (*st);
    3530:	f10d 0c04 	add.w	ip, sp, #4
    3534:	f7ff fee0 	bl	32f8 <outc.5724>
					st++;
    3538:	e7f5      	b.n	3526 <__pi_vfparse+0x20e>
		c = *fm++;
    353a:	1c55      	adds	r5, r2, #1
    353c:	e709      	b.n	3352 <__pi_vfparse+0x3a>
    353e:	bf00      	nop
    3540:	00005191 	muleq	r0, r1, r1
    3544:	3b9aca00 	blcc	fe6b5d4c <_estack+0xde6b0d4c>

00003548 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    3548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    354c:	460e      	mov	r6, r1
    354e:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    3550:	4604      	mov	r4, r0
    3552:	b140      	cbz	r0, 3566 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3554:	4613      	mov	r3, r2
    3556:	460a      	mov	r2, r1
    3558:	f64f 71ff 	movw	r1, #65535	; 0xffff
    355c:	f7ff fedc 	bl	3318 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    3560:	4620      	mov	r0, r4
    3562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    3566:	4608      	mov	r0, r1
    3568:	f7fe fa5a 	bl	1a20 <__pi_strlen>
    356c:	f100 0511 	add.w	r5, r0, #17
    3570:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    3572:	4628      	mov	r0, r5
    3574:	f7fe fb56 	bl	1c24 <__pi_malloc>
    3578:	4604      	mov	r4, r0
    357a:	2800      	cmp	r0, #0
    357c:	d0f0      	beq.n	3560 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    357e:	463b      	mov	r3, r7
    3580:	4632      	mov	r2, r6
    3582:	4629      	mov	r1, r5
    3584:	f7ff fec8 	bl	3318 <__pi_vfparse>
    3588:	4285      	cmp	r5, r0
    358a:	4680      	mov	r8, r0
    358c:	d2e8      	bcs.n	3560 <vform+0x18>
		ufree (res);
    358e:	4620      	mov	r0, r4
    3590:	f7fe fafc 	bl	1b8c <__pi_free>
		goto Again;
    3594:	4645      	mov	r5, r8
    3596:	e7ec      	b.n	3572 <vform+0x2a>

00003598 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    3598:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    359a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    359e:	2800      	cmp	r0, #0
    35a0:	f000 81b5 	beq.w	390e <vscan+0x376>
    35a4:	2900      	cmp	r1, #0
    35a6:	f000 81b4 	beq.w	3912 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    35aa:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    35ac:	270a      	movs	r7, #10
    35ae:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    35b0:	f8df c370 	ldr.w	ip, [pc, #880]	; 3924 <vscan+0x38c>
    35b4:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    35b6:	f811 0b01 	ldrb.w	r0, [r1], #1
    35ba:	b170      	cbz	r0, 35da <vscan+0x42>
		if (*fmt++ != '%')
    35bc:	2825      	cmp	r0, #37	; 0x25
    35be:	d1f9      	bne.n	35b4 <vscan+0x1c>
		switch (*fmt++) {
    35c0:	7870      	ldrb	r0, [r6, #1]
    35c2:	1cb1      	adds	r1, r6, #2
    35c4:	286c      	cmp	r0, #108	; 0x6c
    35c6:	f000 80e1 	beq.w	378c <vscan+0x1f4>
    35ca:	d809      	bhi.n	35e0 <vscan+0x48>
    35cc:	2863      	cmp	r0, #99	; 0x63
    35ce:	f000 8184 	beq.w	38da <vscan+0x342>
    35d2:	2864      	cmp	r0, #100	; 0x64
    35d4:	d043      	beq.n	365e <vscan+0xc6>
    35d6:	2800      	cmp	r0, #0
    35d8:	d1ec      	bne.n	35b4 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    35da:	4620      	mov	r0, r4
    35dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    35e0:	2875      	cmp	r0, #117	; 0x75
    35e2:	d074      	beq.n	36ce <vscan+0x136>
    35e4:	2878      	cmp	r0, #120	; 0x78
    35e6:	f000 8098 	beq.w	371a <vscan+0x182>
    35ea:	2873      	cmp	r0, #115	; 0x73
    35ec:	d1e2      	bne.n	35b4 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    35ee:	7818      	ldrb	r0, [r3, #0]
    35f0:	461e      	mov	r6, r3
    35f2:	f1a0 0e09 	sub.w	lr, r0, #9
    35f6:	fa5f fe8e 	uxtb.w	lr, lr
    35fa:	f1be 0f17 	cmp.w	lr, #23
    35fe:	4698      	mov	r8, r3
    3600:	f103 0301 	add.w	r3, r3, #1
    3604:	f240 8173 	bls.w	38ee <vscan+0x356>
			if (*buf == '\0')
    3608:	2800      	cmp	r0, #0
    360a:	d0e6      	beq.n	35da <vscan+0x42>
			if (*buf != ',') {
    360c:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    360e:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    3612:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    3616:	d00e      	beq.n	3636 <vscan+0x9e>
    3618:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    361a:	f818 3b01 	ldrb.w	r3, [r8], #1
    361e:	f1a3 0009 	sub.w	r0, r3, #9
    3622:	2801      	cmp	r0, #1
    3624:	d907      	bls.n	3636 <vscan+0x9e>
    3626:	2b0d      	cmp	r3, #13
    3628:	d005      	beq.n	3636 <vscan+0x9e>
    362a:	2b2c      	cmp	r3, #44	; 0x2c
    362c:	d003      	beq.n	3636 <vscan+0x9e>
    362e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    3632:	f040 8163 	bne.w	38fc <vscan+0x364>
			while (isspace (*buf)) buf++;
    3636:	f896 8000 	ldrb.w	r8, [r6]
    363a:	4633      	mov	r3, r6
    363c:	f1a8 0009 	sub.w	r0, r8, #9
    3640:	b2c0      	uxtb	r0, r0
    3642:	2817      	cmp	r0, #23
    3644:	f106 0601 	add.w	r6, r6, #1
    3648:	f240 815b 	bls.w	3902 <vscan+0x36a>
			if (*buf == ',') buf++;
    364c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    3650:	bf08      	it	eq
    3652:	4633      	moveq	r3, r6
			*sap = '\0';
    3654:	f88e 5000 	strb.w	r5, [lr]
			break;
    3658:	e7ac      	b.n	35b4 <vscan+0x1c>
		    case 'd': scani (word); break;
    365a:	2e00      	cmp	r6, #0
    365c:	d0bd      	beq.n	35da <vscan+0x42>
    365e:	469e      	mov	lr, r3
    3660:	f813 6b01 	ldrb.w	r6, [r3], #1
    3664:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    3668:	2809      	cmp	r0, #9
    366a:	d923      	bls.n	36b4 <vscan+0x11c>
    366c:	2e2d      	cmp	r6, #45	; 0x2d
    366e:	d001      	beq.n	3674 <vscan+0xdc>
    3670:	2e2b      	cmp	r6, #43	; 0x2b
    3672:	d1f2      	bne.n	365a <vscan+0xc2>
    3674:	7818      	ldrb	r0, [r3, #0]
    3676:	469e      	mov	lr, r3
    3678:	3830      	subs	r0, #48	; 0x30
    367a:	2809      	cmp	r0, #9
    367c:	d8ef      	bhi.n	365e <vscan+0xc6>
    367e:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    3682:	f1d9 0800 	rsbs	r8, r9, #0
    3686:	eb48 0809 	adc.w	r8, r8, r9
    368a:	f852 6b04 	ldr.w	r6, [r2], #4
    368e:	3401      	adds	r4, #1
    3690:	8035      	strh	r5, [r6, #0]
    3692:	f89e 0000 	ldrb.w	r0, [lr]
    3696:	4673      	mov	r3, lr
    3698:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    369c:	f1b9 0f09 	cmp.w	r9, #9
    36a0:	f10e 0e01 	add.w	lr, lr, #1
    36a4:	d909      	bls.n	36ba <vscan+0x122>
    36a6:	f1b8 0f00 	cmp.w	r8, #0
    36aa:	d183      	bne.n	35b4 <vscan+0x1c>
    36ac:	8830      	ldrh	r0, [r6, #0]
    36ae:	4240      	negs	r0, r0
    36b0:	8030      	strh	r0, [r6, #0]
    36b2:	e77f      	b.n	35b4 <vscan+0x1c>
    36b4:	f04f 0800 	mov.w	r8, #0
    36b8:	e7e7      	b.n	368a <vscan+0xf2>
    36ba:	8833      	ldrh	r3, [r6, #0]
    36bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    36c0:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    36c4:	3030      	adds	r0, #48	; 0x30
    36c6:	8030      	strh	r0, [r6, #0]
    36c8:	e7e3      	b.n	3692 <vscan+0xfa>
		    case 'u': scanu (word); break;
    36ca:	2800      	cmp	r0, #0
    36cc:	d085      	beq.n	35da <vscan+0x42>
    36ce:	7818      	ldrb	r0, [r3, #0]
    36d0:	461e      	mov	r6, r3
    36d2:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    36d6:	f1be 0f09 	cmp.w	lr, #9
    36da:	f103 0301 	add.w	r3, r3, #1
    36de:	d8f4      	bhi.n	36ca <vscan+0x132>
    36e0:	f852 eb04 	ldr.w	lr, [r2], #4
    36e4:	3401      	adds	r4, #1
    36e6:	f8ae 5000 	strh.w	r5, [lr]
    36ea:	7830      	ldrb	r0, [r6, #0]
    36ec:	4633      	mov	r3, r6
    36ee:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    36f2:	f1b8 0f09 	cmp.w	r8, #9
    36f6:	f106 0601 	add.w	r6, r6, #1
    36fa:	f63f af5b 	bhi.w	35b4 <vscan+0x1c>
    36fe:	f8be 3000 	ldrh.w	r3, [lr]
    3702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3706:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    370a:	3830      	subs	r0, #48	; 0x30
    370c:	f8ae 0000 	strh.w	r0, [lr]
    3710:	e7eb      	b.n	36ea <vscan+0x152>
		    case 'x': scanx (word); break;
    3712:	f1be 0f00 	cmp.w	lr, #0
    3716:	f43f af60 	beq.w	35da <vscan+0x42>
    371a:	f893 e000 	ldrb.w	lr, [r3]
    371e:	461e      	mov	r6, r3
    3720:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    3724:	2809      	cmp	r0, #9
    3726:	f103 0301 	add.w	r3, r3, #1
    372a:	d904      	bls.n	3736 <vscan+0x19e>
    372c:	f02e 0020 	bic.w	r0, lr, #32
    3730:	3841      	subs	r0, #65	; 0x41
    3732:	2805      	cmp	r0, #5
    3734:	d8ed      	bhi.n	3712 <vscan+0x17a>
    3736:	f852 eb04 	ldr.w	lr, [r2], #4
    373a:	3401      	adds	r4, #1
    373c:	f8ae 5000 	strh.w	r5, [lr]
    3740:	f106 0805 	add.w	r8, r6, #5
    3744:	f896 9000 	ldrb.w	r9, [r6]
    3748:	4633      	mov	r3, r6
    374a:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    374e:	b2c0      	uxtb	r0, r0
    3750:	2809      	cmp	r0, #9
    3752:	f106 0601 	add.w	r6, r6, #1
    3756:	f240 80de 	bls.w	3916 <vscan+0x37e>
    375a:	f029 0020 	bic.w	r0, r9, #32
    375e:	3841      	subs	r0, #65	; 0x41
    3760:	2805      	cmp	r0, #5
    3762:	f63f af27 	bhi.w	35b4 <vscan+0x1c>
    3766:	4546      	cmp	r6, r8
    3768:	f43f af24 	beq.w	35b4 <vscan+0x1c>
    376c:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    3770:	2b05      	cmp	r3, #5
    3772:	bf94      	ite	ls
    3774:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    3778:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    377c:	b2c0      	uxtb	r0, r0
    377e:	f8be 3000 	ldrh.w	r3, [lr]
    3782:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    3786:	f8ae 0000 	strh.w	r0, [lr]
    378a:	e7db      	b.n	3744 <vscan+0x1ac>
			switch (*fmt++) {
    378c:	78b0      	ldrb	r0, [r6, #2]
    378e:	1cf1      	adds	r1, r6, #3
    3790:	2875      	cmp	r0, #117	; 0x75
    3792:	d07d      	beq.n	3890 <vscan+0x2f8>
    3794:	d831      	bhi.n	37fa <vscan+0x262>
    3796:	2800      	cmp	r0, #0
    3798:	f43f af1f 	beq.w	35da <vscan+0x42>
    379c:	2864      	cmp	r0, #100	; 0x64
    379e:	f47f af09 	bne.w	35b4 <vscan+0x1c>
    37a2:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    37a4:	f813 6b01 	ldrb.w	r6, [r3], #1
    37a8:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    37ac:	2809      	cmp	r0, #9
    37ae:	d962      	bls.n	3876 <vscan+0x2de>
    37b0:	2e2d      	cmp	r6, #45	; 0x2d
    37b2:	d001      	beq.n	37b8 <vscan+0x220>
    37b4:	2e2b      	cmp	r6, #43	; 0x2b
    37b6:	d15b      	bne.n	3870 <vscan+0x2d8>
    37b8:	7818      	ldrb	r0, [r3, #0]
    37ba:	4698      	mov	r8, r3
    37bc:	3830      	subs	r0, #48	; 0x30
    37be:	2809      	cmp	r0, #9
    37c0:	d8ef      	bhi.n	37a2 <vscan+0x20a>
    37c2:	3e2d      	subs	r6, #45	; 0x2d
    37c4:	4270      	negs	r0, r6
    37c6:	4170      	adcs	r0, r6
    37c8:	f852 eb04 	ldr.w	lr, [r2], #4
    37cc:	3401      	adds	r4, #1
    37ce:	f8ce 5000 	str.w	r5, [lr]
    37d2:	f898 6000 	ldrb.w	r6, [r8]
    37d6:	4643      	mov	r3, r8
    37d8:	3e30      	subs	r6, #48	; 0x30
    37da:	fa5f f986 	uxtb.w	r9, r6
    37de:	f1b9 0f09 	cmp.w	r9, #9
    37e2:	f108 0801 	add.w	r8, r8, #1
    37e6:	d948      	bls.n	387a <vscan+0x2e2>
    37e8:	2800      	cmp	r0, #0
    37ea:	f47f aee3 	bne.w	35b4 <vscan+0x1c>
    37ee:	f8de 0000 	ldr.w	r0, [lr]
    37f2:	4240      	negs	r0, r0
    37f4:	f8ce 0000 	str.w	r0, [lr]
    37f8:	e6dc      	b.n	35b4 <vscan+0x1c>
    37fa:	2878      	cmp	r0, #120	; 0x78
    37fc:	f47f aeda 	bne.w	35b4 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3800:	f893 e000 	ldrb.w	lr, [r3]
    3804:	461e      	mov	r6, r3
    3806:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    380a:	2809      	cmp	r0, #9
    380c:	f103 0301 	add.w	r3, r3, #1
    3810:	d904      	bls.n	381c <vscan+0x284>
    3812:	f02e 0020 	bic.w	r0, lr, #32
    3816:	3841      	subs	r0, #65	; 0x41
    3818:	2805      	cmp	r0, #5
    381a:	d85a      	bhi.n	38d2 <vscan+0x33a>
    381c:	f852 eb04 	ldr.w	lr, [r2], #4
    3820:	3401      	adds	r4, #1
    3822:	f8ce 5000 	str.w	r5, [lr]
    3826:	f106 0809 	add.w	r8, r6, #9
    382a:	f896 9000 	ldrb.w	r9, [r6]
    382e:	4633      	mov	r3, r6
    3830:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    3834:	b2c0      	uxtb	r0, r0
    3836:	2809      	cmp	r0, #9
    3838:	f106 0601 	add.w	r6, r6, #1
    383c:	d96f      	bls.n	391e <vscan+0x386>
    383e:	f029 0020 	bic.w	r0, r9, #32
    3842:	3841      	subs	r0, #65	; 0x41
    3844:	2805      	cmp	r0, #5
    3846:	f63f aeb5 	bhi.w	35b4 <vscan+0x1c>
    384a:	4546      	cmp	r6, r8
    384c:	f43f aeb2 	beq.w	35b4 <vscan+0x1c>
    3850:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    3854:	2b05      	cmp	r3, #5
    3856:	bf94      	ite	ls
    3858:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    385c:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    3860:	b2c0      	uxtb	r0, r0
    3862:	f8de 3000 	ldr.w	r3, [lr]
    3866:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    386a:	f8ce 0000 	str.w	r0, [lr]
    386e:	e7dc      	b.n	382a <vscan+0x292>
		    	    case 'd': scani (lword); break;
    3870:	2e00      	cmp	r6, #0
    3872:	d196      	bne.n	37a2 <vscan+0x20a>
    3874:	e6b1      	b.n	35da <vscan+0x42>
    3876:	2000      	movs	r0, #0
    3878:	e7a6      	b.n	37c8 <vscan+0x230>
    387a:	f8de 3000 	ldr.w	r3, [lr]
    387e:	b2b6      	uxth	r6, r6
    3880:	437b      	muls	r3, r7
    3882:	1b9e      	subs	r6, r3, r6
    3884:	f8ce 6000 	str.w	r6, [lr]
    3888:	e7a3      	b.n	37d2 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    388a:	2800      	cmp	r0, #0
    388c:	f43f aea5 	beq.w	35da <vscan+0x42>
    3890:	7818      	ldrb	r0, [r3, #0]
    3892:	461e      	mov	r6, r3
    3894:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    3898:	f1be 0f09 	cmp.w	lr, #9
    389c:	f103 0301 	add.w	r3, r3, #1
    38a0:	d8f3      	bhi.n	388a <vscan+0x2f2>
    38a2:	f852 eb04 	ldr.w	lr, [r2], #4
    38a6:	3401      	adds	r4, #1
    38a8:	f8ce 5000 	str.w	r5, [lr]
    38ac:	7830      	ldrb	r0, [r6, #0]
    38ae:	4633      	mov	r3, r6
    38b0:	3830      	subs	r0, #48	; 0x30
    38b2:	fa5f f880 	uxtb.w	r8, r0
    38b6:	f1b8 0f09 	cmp.w	r8, #9
    38ba:	f106 0601 	add.w	r6, r6, #1
    38be:	f63f ae79 	bhi.w	35b4 <vscan+0x1c>
    38c2:	f8de 3000 	ldr.w	r3, [lr]
    38c6:	b280      	uxth	r0, r0
    38c8:	fb07 0003 	mla	r0, r7, r3, r0
    38cc:	f8ce 0000 	str.w	r0, [lr]
    38d0:	e7ec      	b.n	38ac <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    38d2:	f1be 0f00 	cmp.w	lr, #0
    38d6:	d193      	bne.n	3800 <vscan+0x268>
    38d8:	e67f      	b.n	35da <vscan+0x42>
			if ((c = *buf++) == '\0')
    38da:	f813 0b01 	ldrb.w	r0, [r3], #1
    38de:	2800      	cmp	r0, #0
    38e0:	f43f ae7b 	beq.w	35da <vscan+0x42>
			sap = va_arg (ap, char*);
    38e4:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    38e8:	3401      	adds	r4, #1
			*sap = c;
    38ea:	7030      	strb	r0, [r6, #0]
			break;
    38ec:	e662      	b.n	35b4 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    38ee:	fa2c fe0e 	lsr.w	lr, ip, lr
    38f2:	f01e 0f01 	tst.w	lr, #1
    38f6:	f47f ae7a 	bne.w	35ee <vscan+0x56>
    38fa:	e687      	b.n	360c <vscan+0x74>
						*sap++ = *buf++;
    38fc:	f80e 3b01 	strb.w	r3, [lr], #1
    3900:	e68a      	b.n	3618 <vscan+0x80>
			while (isspace (*buf)) buf++;
    3902:	fa2c f000 	lsr.w	r0, ip, r0
    3906:	07c0      	lsls	r0, r0, #31
    3908:	f53f ae95 	bmi.w	3636 <vscan+0x9e>
    390c:	e6a2      	b.n	3654 <vscan+0xbc>
		return 0;
    390e:	4604      	mov	r4, r0
    3910:	e663      	b.n	35da <vscan+0x42>
    3912:	460c      	mov	r4, r1
    3914:	e661      	b.n	35da <vscan+0x42>
		    case 'x': scanx (word); break;
    3916:	4546      	cmp	r6, r8
    3918:	f47f af31 	bne.w	377e <vscan+0x1e6>
    391c:	e64a      	b.n	35b4 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    391e:	4546      	cmp	r6, r8
    3920:	d19f      	bne.n	3862 <vscan+0x2ca>
    3922:	e647      	b.n	35b4 <vscan+0x1c>
    3924:	00800013 	addeq	r0, r0, r3, lsl r0

00003928 <SafeHapiVoid>:
    3928:	b570      	push	{r4, r5, r6, lr}
    392a:	4606      	mov	r6, r0
    392c:	f000 f844 	bl	39b8 <NOROM_CPUcpsid>
    3930:	4605      	mov	r5, r0
    3932:	4c06      	ldr	r4, [pc, #24]	; (394c <SafeHapiVoid+0x24>)
    3934:	6823      	ldr	r3, [r4, #0]
    3936:	2b00      	cmp	r3, #0
    3938:	d0fb      	beq.n	3932 <SafeHapiVoid+0xa>
    393a:	47b0      	blx	r6
    393c:	2301      	movs	r3, #1
    393e:	6023      	str	r3, [r4, #0]
    3940:	b91d      	cbnz	r5, 394a <SafeHapiVoid+0x22>
    3942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3946:	f000 b83b 	b.w	39c0 <NOROM_CPUcpsie>
    394a:	bd70      	pop	{r4, r5, r6, pc}
    394c:	400c8000 	andmi	r8, ip, r0

00003950 <NOROM_AONBatMonTemperatureGetDegC>:
    3950:	4b08      	ldr	r3, [pc, #32]	; (3974 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    3952:	6818      	ldr	r0, [r3, #0]
    3954:	4b08      	ldr	r3, [pc, #32]	; (3978 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    3956:	7819      	ldrb	r1, [r3, #0]
    3958:	4b08      	ldr	r3, [pc, #32]	; (397c <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    395a:	681a      	ldr	r2, [r3, #0]
    395c:	f340 0310 	sbfx	r3, r0, #0, #17
    3960:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    3964:	b248      	sxtb	r0, r1
    3966:	4350      	muls	r0, r2
    3968:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    396c:	3080      	adds	r0, #128	; 0x80
    396e:	1200      	asrs	r0, r0, #8
    3970:	4770      	bx	lr
    3972:	bf00      	nop
    3974:	40095030 	andmi	r5, r9, r0, lsr r0
    3978:	5000130c 	andpl	r1, r0, ip, lsl #6
    397c:	40095028 	andmi	r5, r9, r8, lsr #32

00003980 <NOROM_AONRTCCurrentCompareValueGet>:
    3980:	4a05      	ldr	r2, [pc, #20]	; (3998 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    3982:	4906      	ldr	r1, [pc, #24]	; (399c <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    3984:	6813      	ldr	r3, [r2, #0]
    3986:	6808      	ldr	r0, [r1, #0]
    3988:	6812      	ldr	r2, [r2, #0]
    398a:	4293      	cmp	r3, r2
    398c:	d1f8      	bne.n	3980 <NOROM_AONRTCCurrentCompareValueGet>
    398e:	041b      	lsls	r3, r3, #16
    3990:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    3994:	4770      	bx	lr
    3996:	bf00      	nop
    3998:	40092008 	andmi	r2, r9, r8
    399c:	4009200c 	andmi	r2, r9, ip

000039a0 <NOROM_AONRTCCurrent64BitValueGet>:
    39a0:	4b03      	ldr	r3, [pc, #12]	; (39b0 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    39a2:	4904      	ldr	r1, [pc, #16]	; (39b4 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    39a4:	681a      	ldr	r2, [r3, #0]
    39a6:	6808      	ldr	r0, [r1, #0]
    39a8:	6819      	ldr	r1, [r3, #0]
    39aa:	4291      	cmp	r1, r2
    39ac:	d1f8      	bne.n	39a0 <NOROM_AONRTCCurrent64BitValueGet>
    39ae:	4770      	bx	lr
    39b0:	40092008 	andmi	r2, r9, r8
    39b4:	4009200c 	andmi	r2, r9, ip

000039b8 <NOROM_CPUcpsid>:
    39b8:	f3ef 8010 	mrs	r0, PRIMASK
    39bc:	b672      	cpsid	i
    39be:	4770      	bx	lr

000039c0 <NOROM_CPUcpsie>:
    39c0:	f3ef 8010 	mrs	r0, PRIMASK
    39c4:	b662      	cpsie	i
    39c6:	4770      	bx	lr

000039c8 <NOROM_OSCClockSourceSet>:
    39c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    39ca:	460c      	mov	r4, r1
    39cc:	07c1      	lsls	r1, r0, #31
    39ce:	4605      	mov	r5, r0
    39d0:	d509      	bpl.n	39e6 <NOROM_OSCClockSourceSet+0x1e>
    39d2:	4b12      	ldr	r3, [pc, #72]	; (3a1c <NOROM_OSCClockSourceSet+0x54>)
    39d4:	b2a2      	uxth	r2, r4
    39d6:	681b      	ldr	r3, [r3, #0]
    39d8:	2100      	movs	r1, #0
    39da:	9200      	str	r2, [sp, #0]
    39dc:	685e      	ldr	r6, [r3, #4]
    39de:	4810      	ldr	r0, [pc, #64]	; (3a20 <NOROM_OSCClockSourceSet+0x58>)
    39e0:	2201      	movs	r2, #1
    39e2:	460b      	mov	r3, r1
    39e4:	47b0      	blx	r6
    39e6:	07aa      	lsls	r2, r5, #30
    39e8:	d509      	bpl.n	39fe <NOROM_OSCClockSourceSet+0x36>
    39ea:	4b0c      	ldr	r3, [pc, #48]	; (3a1c <NOROM_OSCClockSourceSet+0x54>)
    39ec:	b2a2      	uxth	r2, r4
    39ee:	681b      	ldr	r3, [r3, #0]
    39f0:	9200      	str	r2, [sp, #0]
    39f2:	685e      	ldr	r6, [r3, #4]
    39f4:	480a      	ldr	r0, [pc, #40]	; (3a20 <NOROM_OSCClockSourceSet+0x58>)
    39f6:	2100      	movs	r1, #0
    39f8:	2202      	movs	r2, #2
    39fa:	2301      	movs	r3, #1
    39fc:	47b0      	blx	r6
    39fe:	076b      	lsls	r3, r5, #29
    3a00:	d509      	bpl.n	3a16 <NOROM_OSCClockSourceSet+0x4e>
    3a02:	4b06      	ldr	r3, [pc, #24]	; (3a1c <NOROM_OSCClockSourceSet+0x54>)
    3a04:	b2a4      	uxth	r4, r4
    3a06:	681b      	ldr	r3, [r3, #0]
    3a08:	9400      	str	r4, [sp, #0]
    3a0a:	685c      	ldr	r4, [r3, #4]
    3a0c:	4804      	ldr	r0, [pc, #16]	; (3a20 <NOROM_OSCClockSourceSet+0x58>)
    3a0e:	2100      	movs	r1, #0
    3a10:	220c      	movs	r2, #12
    3a12:	2302      	movs	r3, #2
    3a14:	47a0      	blx	r4
    3a16:	b002      	add	sp, #8
    3a18:	bd70      	pop	{r4, r5, r6, pc}
    3a1a:	bf00      	nop
    3a1c:	100001a4 	andne	r0, r0, r4, lsr #3
    3a20:	400ca000 	andmi	sl, ip, r0

00003a24 <NOROM_OSCClockSourceGet>:
    3a24:	b510      	push	{r4, lr}
    3a26:	4b08      	ldr	r3, [pc, #32]	; (3a48 <NOROM_OSCClockSourceGet+0x24>)
    3a28:	2804      	cmp	r0, #4
    3a2a:	681b      	ldr	r3, [r3, #0]
    3a2c:	f04f 0134 	mov.w	r1, #52	; 0x34
    3a30:	68dc      	ldr	r4, [r3, #12]
    3a32:	bf07      	ittee	eq
    3a34:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    3a38:	231d      	moveq	r3, #29
    3a3a:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    3a3e:	231c      	movne	r3, #28
    3a40:	4802      	ldr	r0, [pc, #8]	; (3a4c <NOROM_OSCClockSourceGet+0x28>)
    3a42:	47a0      	blx	r4
    3a44:	bd10      	pop	{r4, pc}
    3a46:	bf00      	nop
    3a48:	100001a4 	andne	r0, r0, r4, lsr #3
    3a4c:	400ca000 	andmi	sl, ip, r0

00003a50 <NOROM_OSCHF_TurnOnXosc>:
    3a50:	b508      	push	{r3, lr}
    3a52:	2003      	movs	r0, #3
    3a54:	2101      	movs	r1, #1
    3a56:	f7ff ffb7 	bl	39c8 <NOROM_OSCClockSourceSet>
    3a5a:	f7ff ff91 	bl	3980 <NOROM_AONRTCCurrentCompareValueGet>
    3a5e:	4b01      	ldr	r3, [pc, #4]	; (3a64 <NOROM_OSCHF_TurnOnXosc+0x14>)
    3a60:	6098      	str	r0, [r3, #8]
    3a62:	bd08      	pop	{r3, pc}
    3a64:	2000062c 	andcs	r0, r0, ip, lsr #12

00003a68 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    3a68:	b510      	push	{r4, lr}
    3a6a:	2001      	movs	r0, #1
    3a6c:	f7ff ffda 	bl	3a24 <NOROM_OSCClockSourceGet>
    3a70:	2801      	cmp	r0, #1
    3a72:	d01c      	beq.n	3aae <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3a74:	4b0f      	ldr	r3, [pc, #60]	; (3ab4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    3a76:	4810      	ldr	r0, [pc, #64]	; (3ab8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    3a78:	681b      	ldr	r3, [r3, #0]
    3a7a:	2134      	movs	r1, #52	; 0x34
    3a7c:	68dc      	ldr	r4, [r3, #12]
    3a7e:	2201      	movs	r2, #1
    3a80:	2300      	movs	r3, #0
    3a82:	47a0      	blx	r4
    3a84:	b1a0      	cbz	r0, 3ab0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    3a86:	4b0d      	ldr	r3, [pc, #52]	; (3abc <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    3a88:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3a8a:	f7ff ff4d 	bl	3928 <SafeHapiVoid>
    3a8e:	f7ff ff77 	bl	3980 <NOROM_AONRTCCurrentCompareValueGet>
    3a92:	4a0b      	ldr	r2, [pc, #44]	; (3ac0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3a94:	6893      	ldr	r3, [r2, #8]
    3a96:	60d0      	str	r0, [r2, #12]
    3a98:	1ac0      	subs	r0, r0, r3
    3a9a:	4b0a      	ldr	r3, [pc, #40]	; (3ac4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    3a9c:	4358      	muls	r0, r3
    3a9e:	6813      	ldr	r3, [r2, #0]
    3aa0:	0c00      	lsrs	r0, r0, #16
    3aa2:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    3aa6:	4283      	cmp	r3, r0
    3aa8:	bf94      	ite	ls
    3aaa:	6010      	strls	r0, [r2, #0]
    3aac:	6013      	strhi	r3, [r2, #0]
    3aae:	2001      	movs	r0, #1
    3ab0:	bd10      	pop	{r4, pc}
    3ab2:	bf00      	nop
    3ab4:	100001a4 	andne	r0, r0, r4, lsr #3
    3ab8:	400ca000 	andmi	sl, ip, r0
    3abc:	10000048 	andne	r0, r0, r8, asr #32
    3ac0:	2000062c 	andcs	r0, r0, ip, lsr #12
    3ac4:	000f4240 	andeq	r4, pc, r0, asr #4

00003ac8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    3ac8:	b510      	push	{r4, lr}
    3aca:	2003      	movs	r0, #3
    3acc:	2100      	movs	r1, #0
    3ace:	f7ff ff7b 	bl	39c8 <NOROM_OSCClockSourceSet>
    3ad2:	2001      	movs	r0, #1
    3ad4:	f7ff ffa6 	bl	3a24 <NOROM_OSCClockSourceGet>
    3ad8:	b118      	cbz	r0, 3ae2 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    3ada:	4b06      	ldr	r3, [pc, #24]	; (3af4 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    3adc:	6b98      	ldr	r0, [r3, #56]	; 0x38
    3ade:	f7ff ff23 	bl	3928 <SafeHapiVoid>
    3ae2:	f7ff ff4d 	bl	3980 <NOROM_AONRTCCurrentCompareValueGet>
    3ae6:	4c04      	ldr	r4, [pc, #16]	; (3af8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    3ae8:	6060      	str	r0, [r4, #4]
    3aea:	f7ff ff31 	bl	3950 <NOROM_AONBatMonTemperatureGetDegC>
    3aee:	6120      	str	r0, [r4, #16]
    3af0:	bd10      	pop	{r4, pc}
    3af2:	bf00      	nop
    3af4:	10000048 	andne	r0, r0, r8, asr #32
    3af8:	2000062c 	andcs	r0, r0, ip, lsr #12

00003afc <NOROM_RFCDoorbellSendTo>:
    3afc:	4a07      	ldr	r2, [pc, #28]	; (3b1c <NOROM_RFCDoorbellSendTo+0x20>)
    3afe:	6811      	ldr	r1, [r2, #0]
    3b00:	2900      	cmp	r1, #0
    3b02:	d1fb      	bne.n	3afc <NOROM_RFCDoorbellSendTo>
    3b04:	4b06      	ldr	r3, [pc, #24]	; (3b20 <NOROM_RFCDoorbellSendTo+0x24>)
    3b06:	6019      	str	r1, [r3, #0]
    3b08:	6010      	str	r0, [r2, #0]
    3b0a:	681a      	ldr	r2, [r3, #0]
    3b0c:	2a00      	cmp	r2, #0
    3b0e:	d0fc      	beq.n	3b0a <NOROM_RFCDoorbellSendTo+0xe>
    3b10:	4b03      	ldr	r3, [pc, #12]	; (3b20 <NOROM_RFCDoorbellSendTo+0x24>)
    3b12:	2200      	movs	r2, #0
    3b14:	601a      	str	r2, [r3, #0]
    3b16:	f853 0c18 	ldr.w	r0, [r3, #-24]
    3b1a:	4770      	bx	lr
    3b1c:	40041000 	andmi	r1, r4, r0
    3b20:	4004101c 	andmi	r1, r4, ip, lsl r0

00003b24 <NOROM_RFCSynthPowerDown>:
    3b24:	4a0e      	ldr	r2, [pc, #56]	; (3b60 <NOROM_RFCSynthPowerDown+0x3c>)
    3b26:	490f      	ldr	r1, [pc, #60]	; (3b64 <NOROM_RFCSynthPowerDown+0x40>)
    3b28:	6813      	ldr	r3, [r2, #0]
    3b2a:	2050      	movs	r0, #80	; 0x50
    3b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3b30:	f023 0302 	bic.w	r3, r3, #2
    3b34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3b38:	6013      	str	r3, [r2, #0]
    3b3a:	4b0b      	ldr	r3, [pc, #44]	; (3b68 <NOROM_RFCSynthPowerDown+0x44>)
    3b3c:	2203      	movs	r2, #3
    3b3e:	601a      	str	r2, [r3, #0]
    3b40:	f241 0330 	movw	r3, #4144	; 0x1030
    3b44:	4a09      	ldr	r2, [pc, #36]	; (3b6c <NOROM_RFCSynthPowerDown+0x48>)
    3b46:	600b      	str	r3, [r1, #0]
    3b48:	2301      	movs	r3, #1
    3b4a:	6013      	str	r3, [r2, #0]
    3b4c:	6008      	str	r0, [r1, #0]
    3b4e:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3b52:	6013      	str	r3, [r2, #0]
    3b54:	6008      	str	r0, [r1, #0]
    3b56:	6013      	str	r3, [r2, #0]
    3b58:	f842 3c0c 	str.w	r3, [r2, #-12]
    3b5c:	4770      	bx	lr
    3b5e:	bf00      	nop
    3b60:	60040000 	andvs	r0, r4, r0
    3b64:	40044114 	andmi	r4, r4, r4, lsl r1
    3b68:	40044108 	andmi	r4, r4, r8, lsl #2
    3b6c:	4004410c 	andmi	r4, r4, ip, lsl #2

00003b70 <NOROM_RFCRfTrimRead>:
    3b70:	f640 0202 	movw	r2, #2050	; 0x802
    3b74:	8803      	ldrh	r3, [r0, #0]
    3b76:	4293      	cmp	r3, r2
    3b78:	d006      	beq.n	3b88 <NOROM_RFCRfTrimRead+0x18>
    3b7a:	f643 0207 	movw	r2, #14343	; 0x3807
    3b7e:	4293      	cmp	r3, r2
    3b80:	d104      	bne.n	3b8c <NOROM_RFCRfTrimRead+0x1c>
    3b82:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3b86:	e002      	b.n	3b8e <NOROM_RFCRfTrimRead+0x1e>
    3b88:	7bc3      	ldrb	r3, [r0, #15]
    3b8a:	e000      	b.n	3b8e <NOROM_RFCRfTrimRead+0x1e>
    3b8c:	2300      	movs	r3, #0
    3b8e:	4a36      	ldr	r2, [pc, #216]	; (3c68 <NOROM_RFCRfTrimRead+0xf8>)
    3b90:	2b0a      	cmp	r3, #10
    3b92:	6812      	ldr	r2, [r2, #0]
    3b94:	600a      	str	r2, [r1, #0]
    3b96:	d031      	beq.n	3bfc <NOROM_RFCRfTrimRead+0x8c>
    3b98:	dc10      	bgt.n	3bbc <NOROM_RFCRfTrimRead+0x4c>
    3b9a:	2b05      	cmp	r3, #5
    3b9c:	d021      	beq.n	3be2 <NOROM_RFCRfTrimRead+0x72>
    3b9e:	2b06      	cmp	r3, #6
    3ba0:	d153      	bne.n	3c4a <NOROM_RFCRfTrimRead+0xda>
    3ba2:	4b32      	ldr	r3, [pc, #200]	; (3c6c <NOROM_RFCRfTrimRead+0xfc>)
    3ba4:	681b      	ldr	r3, [r3, #0]
    3ba6:	604b      	str	r3, [r1, #4]
    3ba8:	4b31      	ldr	r3, [pc, #196]	; (3c70 <NOROM_RFCRfTrimRead+0x100>)
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	608b      	str	r3, [r1, #8]
    3bae:	4b31      	ldr	r3, [pc, #196]	; (3c74 <NOROM_RFCRfTrimRead+0x104>)
    3bb0:	681b      	ldr	r3, [r3, #0]
    3bb2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bb6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    3bba:	e052      	b.n	3c62 <NOROM_RFCRfTrimRead+0xf2>
    3bbc:	2b0f      	cmp	r3, #15
    3bbe:	d02a      	beq.n	3c16 <NOROM_RFCRfTrimRead+0xa6>
    3bc0:	2b1e      	cmp	r3, #30
    3bc2:	d035      	beq.n	3c30 <NOROM_RFCRfTrimRead+0xc0>
    3bc4:	2b0c      	cmp	r3, #12
    3bc6:	d140      	bne.n	3c4a <NOROM_RFCRfTrimRead+0xda>
    3bc8:	4b2b      	ldr	r3, [pc, #172]	; (3c78 <NOROM_RFCRfTrimRead+0x108>)
    3bca:	681b      	ldr	r3, [r3, #0]
    3bcc:	604b      	str	r3, [r1, #4]
    3bce:	4b2b      	ldr	r3, [pc, #172]	; (3c7c <NOROM_RFCRfTrimRead+0x10c>)
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	608b      	str	r3, [r1, #8]
    3bd4:	4b2a      	ldr	r3, [pc, #168]	; (3c80 <NOROM_RFCRfTrimRead+0x110>)
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bdc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    3be0:	e03f      	b.n	3c62 <NOROM_RFCRfTrimRead+0xf2>
    3be2:	4b28      	ldr	r3, [pc, #160]	; (3c84 <NOROM_RFCRfTrimRead+0x114>)
    3be4:	681b      	ldr	r3, [r3, #0]
    3be6:	604b      	str	r3, [r1, #4]
    3be8:	4b27      	ldr	r3, [pc, #156]	; (3c88 <NOROM_RFCRfTrimRead+0x118>)
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	608b      	str	r3, [r1, #8]
    3bee:	4b27      	ldr	r3, [pc, #156]	; (3c8c <NOROM_RFCRfTrimRead+0x11c>)
    3bf0:	681b      	ldr	r3, [r3, #0]
    3bf2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3bf6:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    3bfa:	e032      	b.n	3c62 <NOROM_RFCRfTrimRead+0xf2>
    3bfc:	4b24      	ldr	r3, [pc, #144]	; (3c90 <NOROM_RFCRfTrimRead+0x120>)
    3bfe:	681b      	ldr	r3, [r3, #0]
    3c00:	604b      	str	r3, [r1, #4]
    3c02:	4b24      	ldr	r3, [pc, #144]	; (3c94 <NOROM_RFCRfTrimRead+0x124>)
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	608b      	str	r3, [r1, #8]
    3c08:	4b23      	ldr	r3, [pc, #140]	; (3c98 <NOROM_RFCRfTrimRead+0x128>)
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c10:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3c14:	e025      	b.n	3c62 <NOROM_RFCRfTrimRead+0xf2>
    3c16:	4b21      	ldr	r3, [pc, #132]	; (3c9c <NOROM_RFCRfTrimRead+0x12c>)
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	604b      	str	r3, [r1, #4]
    3c1c:	4b20      	ldr	r3, [pc, #128]	; (3ca0 <NOROM_RFCRfTrimRead+0x130>)
    3c1e:	681b      	ldr	r3, [r3, #0]
    3c20:	608b      	str	r3, [r1, #8]
    3c22:	4b20      	ldr	r3, [pc, #128]	; (3ca4 <NOROM_RFCRfTrimRead+0x134>)
    3c24:	681b      	ldr	r3, [r3, #0]
    3c26:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c2a:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3c2e:	e018      	b.n	3c62 <NOROM_RFCRfTrimRead+0xf2>
    3c30:	4b1d      	ldr	r3, [pc, #116]	; (3ca8 <NOROM_RFCRfTrimRead+0x138>)
    3c32:	681b      	ldr	r3, [r3, #0]
    3c34:	604b      	str	r3, [r1, #4]
    3c36:	4b1d      	ldr	r3, [pc, #116]	; (3cac <NOROM_RFCRfTrimRead+0x13c>)
    3c38:	681b      	ldr	r3, [r3, #0]
    3c3a:	608b      	str	r3, [r1, #8]
    3c3c:	4b1c      	ldr	r3, [pc, #112]	; (3cb0 <NOROM_RFCRfTrimRead+0x140>)
    3c3e:	681b      	ldr	r3, [r3, #0]
    3c40:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c44:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3c48:	e00b      	b.n	3c62 <NOROM_RFCRfTrimRead+0xf2>
    3c4a:	4b1a      	ldr	r3, [pc, #104]	; (3cb4 <NOROM_RFCRfTrimRead+0x144>)
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	604b      	str	r3, [r1, #4]
    3c50:	4b19      	ldr	r3, [pc, #100]	; (3cb8 <NOROM_RFCRfTrimRead+0x148>)
    3c52:	681b      	ldr	r3, [r3, #0]
    3c54:	608b      	str	r3, [r1, #8]
    3c56:	4b19      	ldr	r3, [pc, #100]	; (3cbc <NOROM_RFCRfTrimRead+0x14c>)
    3c58:	681b      	ldr	r3, [r3, #0]
    3c5a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c62:	60cb      	str	r3, [r1, #12]
    3c64:	4770      	bx	lr
    3c66:	bf00      	nop
    3c68:	5000134c 	andpl	r1, r0, ip, asr #6
    3c6c:	500010c8 	andpl	r1, r0, r8, asr #1
    3c70:	500010e0 	andpl	r1, r0, r0, ror #1
    3c74:	500010f8 	strdpl	r1, [r0], -r8
    3c78:	500010d0 	ldrdpl	r1, [r0], -r0
    3c7c:	500010e8 	andpl	r1, r0, r8, ror #1
    3c80:	50001100 	andpl	r1, r0, r0, lsl #2
    3c84:	500010c4 	andpl	r1, r0, r4, asr #1
    3c88:	500010dc 	ldrdpl	r1, [r0], -ip
    3c8c:	500010f4 	strdpl	r1, [r0], -r4
    3c90:	500010cc 	andpl	r1, r0, ip, asr #1
    3c94:	500010e4 	andpl	r1, r0, r4, ror #1
    3c98:	500010fc 	strdpl	r1, [r0], -ip
    3c9c:	500010d4 	ldrdpl	r1, [r0], -r4
    3ca0:	500010ec 	andpl	r1, r0, ip, ror #1
    3ca4:	50001104 	andpl	r1, r0, r4, lsl #2
    3ca8:	500010d8 	ldrdpl	r1, [r0], -r8
    3cac:	500010f0 	strdpl	r1, [r0], -r0
    3cb0:	50001108 	andpl	r1, r0, r8, lsl #2
    3cb4:	50001354 	andpl	r1, r0, r4, asr r3
    3cb8:	50001358 	andpl	r1, r0, r8, asr r3
    3cbc:	50001380 	andpl	r1, r0, r0, lsl #7

00003cc0 <NOROM_RFCRTrim>:
    3cc0:	f643 0206 	movw	r2, #14342	; 0x3806
    3cc4:	b570      	push	{r4, r5, r6, lr}
    3cc6:	8803      	ldrh	r3, [r0, #0]
    3cc8:	4293      	cmp	r3, r2
    3cca:	d00a      	beq.n	3ce2 <NOROM_RFCRTrim+0x22>
    3ccc:	f643 0207 	movw	r2, #14343	; 0x3807
    3cd0:	4293      	cmp	r3, r2
    3cd2:	d009      	beq.n	3ce8 <NOROM_RFCRTrim+0x28>
    3cd4:	f640 0202 	movw	r2, #2050	; 0x802
    3cd8:	4293      	cmp	r3, r2
    3cda:	d16b      	bne.n	3db4 <NOROM_RFCRTrim+0xf4>
    3cdc:	7bc1      	ldrb	r1, [r0, #15]
    3cde:	6943      	ldr	r3, [r0, #20]
    3ce0:	e005      	b.n	3cee <NOROM_RFCRTrim+0x2e>
    3ce2:	69c3      	ldr	r3, [r0, #28]
    3ce4:	2102      	movs	r1, #2
    3ce6:	e002      	b.n	3cee <NOROM_RFCRTrim+0x2e>
    3ce8:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    3cec:	69c3      	ldr	r3, [r0, #28]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d060      	beq.n	3db4 <NOROM_RFCRTrim+0xf4>
    3cf2:	f103 0414 	add.w	r4, r3, #20
    3cf6:	f244 0538 	movw	r5, #16440	; 0x4038
    3cfa:	681a      	ldr	r2, [r3, #0]
    3cfc:	4618      	mov	r0, r3
    3cfe:	b296      	uxth	r6, r2
    3d00:	42ae      	cmp	r6, r5
    3d02:	f103 0304 	add.w	r3, r3, #4
    3d06:	d103      	bne.n	3d10 <NOROM_RFCRTrim+0x50>
    3d08:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3d0c:	b91c      	cbnz	r4, 3d16 <NOROM_RFCRTrim+0x56>
    3d0e:	bd70      	pop	{r4, r5, r6, pc}
    3d10:	42a3      	cmp	r3, r4
    3d12:	d1f0      	bne.n	3cf6 <NOROM_RFCRTrim+0x36>
    3d14:	bd70      	pop	{r4, r5, r6, pc}
    3d16:	290a      	cmp	r1, #10
    3d18:	d01d      	beq.n	3d56 <NOROM_RFCRTrim+0x96>
    3d1a:	dc06      	bgt.n	3d2a <NOROM_RFCRTrim+0x6a>
    3d1c:	2905      	cmp	r1, #5
    3d1e:	d013      	beq.n	3d48 <NOROM_RFCRTrim+0x88>
    3d20:	2906      	cmp	r1, #6
    3d22:	d016      	beq.n	3d52 <NOROM_RFCRTrim+0x92>
    3d24:	2902      	cmp	r1, #2
    3d26:	d11f      	bne.n	3d68 <NOROM_RFCRTrim+0xa8>
    3d28:	e007      	b.n	3d3a <NOROM_RFCRTrim+0x7a>
    3d2a:	290f      	cmp	r1, #15
    3d2c:	d015      	beq.n	3d5a <NOROM_RFCRTrim+0x9a>
    3d2e:	291e      	cmp	r1, #30
    3d30:	d015      	beq.n	3d5e <NOROM_RFCRTrim+0x9e>
    3d32:	290c      	cmp	r1, #12
    3d34:	d118      	bne.n	3d68 <NOROM_RFCRTrim+0xa8>
    3d36:	4b20      	ldr	r3, [pc, #128]	; (3db8 <NOROM_RFCRTrim+0xf8>)
    3d38:	e012      	b.n	3d60 <NOROM_RFCRTrim+0xa0>
    3d3a:	4b20      	ldr	r3, [pc, #128]	; (3dbc <NOROM_RFCRTrim+0xfc>)
    3d3c:	681b      	ldr	r3, [r3, #0]
    3d3e:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3d42:	2b0f      	cmp	r3, #15
    3d44:	d12a      	bne.n	3d9c <NOROM_RFCRTrim+0xdc>
    3d46:	e023      	b.n	3d90 <NOROM_RFCRTrim+0xd0>
    3d48:	4b1d      	ldr	r3, [pc, #116]	; (3dc0 <NOROM_RFCRTrim+0x100>)
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3d50:	e02c      	b.n	3dac <NOROM_RFCRTrim+0xec>
    3d52:	4b1c      	ldr	r3, [pc, #112]	; (3dc4 <NOROM_RFCRTrim+0x104>)
    3d54:	e004      	b.n	3d60 <NOROM_RFCRTrim+0xa0>
    3d56:	4b1c      	ldr	r3, [pc, #112]	; (3dc8 <NOROM_RFCRTrim+0x108>)
    3d58:	e002      	b.n	3d60 <NOROM_RFCRTrim+0xa0>
    3d5a:	4b1c      	ldr	r3, [pc, #112]	; (3dcc <NOROM_RFCRTrim+0x10c>)
    3d5c:	e000      	b.n	3d60 <NOROM_RFCRTrim+0xa0>
    3d5e:	4b1c      	ldr	r3, [pc, #112]	; (3dd0 <NOROM_RFCRTrim+0x110>)
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3d66:	e021      	b.n	3dac <NOROM_RFCRTrim+0xec>
    3d68:	4b14      	ldr	r3, [pc, #80]	; (3dbc <NOROM_RFCRTrim+0xfc>)
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3d70:	2b0f      	cmp	r3, #15
    3d72:	d113      	bne.n	3d9c <NOROM_RFCRTrim+0xdc>
    3d74:	3905      	subs	r1, #5
    3d76:	2919      	cmp	r1, #25
    3d78:	d80a      	bhi.n	3d90 <NOROM_RFCRTrim+0xd0>
    3d7a:	2301      	movs	r3, #1
    3d7c:	fa03 f101 	lsl.w	r1, r3, r1
    3d80:	4b14      	ldr	r3, [pc, #80]	; (3dd4 <NOROM_RFCRTrim+0x114>)
    3d82:	400b      	ands	r3, r1
    3d84:	b123      	cbz	r3, 3d90 <NOROM_RFCRTrim+0xd0>
    3d86:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3d8a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3d8e:	e003      	b.n	3d98 <NOROM_RFCRTrim+0xd8>
    3d90:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3d94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3d98:	6002      	str	r2, [r0, #0]
    3d9a:	bd70      	pop	{r4, r5, r6, pc}
    3d9c:	429c      	cmp	r4, r3
    3d9e:	d209      	bcs.n	3db4 <NOROM_RFCRTrim+0xf4>
    3da0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3da4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3da8:	6003      	str	r3, [r0, #0]
    3daa:	bd70      	pop	{r4, r5, r6, pc}
    3dac:	2b0f      	cmp	r3, #15
    3dae:	d1f5      	bne.n	3d9c <NOROM_RFCRTrim+0xdc>
    3db0:	3905      	subs	r1, #5
    3db2:	e7e2      	b.n	3d7a <NOROM_RFCRTrim+0xba>
    3db4:	bd70      	pop	{r4, r5, r6, pc}
    3db6:	bf00      	nop
    3db8:	50001100 	andpl	r1, r0, r0, lsl #2
    3dbc:	50001380 	andpl	r1, r0, r0, lsl #7
    3dc0:	50001320 	andpl	r1, r0, r0, lsr #6
    3dc4:	500010f8 	strdpl	r1, [r0], -r8
    3dc8:	500010fc 	strdpl	r1, [r0], -ip
    3dcc:	50001104 	andpl	r1, r0, r4, lsl #2
    3dd0:	50001108 	andpl	r1, r0, r8, lsl #2
    3dd4:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

00003dd8 <NOROM_RFCRfTrimSet>:
    3dd8:	4603      	mov	r3, r0
    3dda:	b530      	push	{r4, r5, lr}
    3ddc:	4c05      	ldr	r4, [pc, #20]	; (3df4 <NOROM_RFCRfTrimSet+0x1c>)
    3dde:	f100 0510 	add.w	r5, r0, #16
    3de2:	4622      	mov	r2, r4
    3de4:	6818      	ldr	r0, [r3, #0]
    3de6:	6859      	ldr	r1, [r3, #4]
    3de8:	3308      	adds	r3, #8
    3dea:	c203      	stmia	r2!, {r0, r1}
    3dec:	42ab      	cmp	r3, r5
    3dee:	4614      	mov	r4, r2
    3df0:	d1f7      	bne.n	3de2 <NOROM_RFCRfTrimSet+0xa>
    3df2:	bd30      	pop	{r4, r5, pc}
    3df4:	21000018 	tstcs	r0, r8, lsl r0

00003df8 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    3df8:	4b04      	ldr	r3, [pc, #16]	; (3e0c <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    3dfa:	b128      	cbz	r0, 3e08 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    3dfc:	4a04      	ldr	r2, [pc, #16]	; (3e10 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    3dfe:	2100      	movs	r1, #0
    3e00:	7011      	strb	r1, [r2, #0]
    3e02:	2220      	movs	r2, #32
    3e04:	701a      	strb	r2, [r3, #0]
    3e06:	4770      	bx	lr
    3e08:	7018      	strb	r0, [r3, #0]
    3e0a:	4770      	bx	lr
    3e0c:	40086202 	andmi	r6, r8, r2, lsl #4
    3e10:	40086200 	andmi	r6, r8, r0, lsl #4

00003e14 <TrimAfterColdResetWakeupFromShutDown>:
    3e14:	b538      	push	{r3, r4, r5, lr}
    3e16:	4605      	mov	r5, r0
    3e18:	4b26      	ldr	r3, [pc, #152]	; (3eb4 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    3e1a:	2201      	movs	r2, #1
    3e1c:	601a      	str	r2, [r3, #0]
    3e1e:	4b26      	ldr	r3, [pc, #152]	; (3eb8 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	2b00      	cmp	r3, #0
    3e24:	d0fb      	beq.n	3e1e <TrimAfterColdResetWakeupFromShutDown+0xa>
    3e26:	4b25      	ldr	r3, [pc, #148]	; (3ebc <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3e28:	22c0      	movs	r2, #192	; 0xc0
    3e2a:	601a      	str	r2, [r3, #0]
    3e2c:	4b24      	ldr	r3, [pc, #144]	; (3ec0 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3e2e:	681b      	ldr	r3, [r3, #0]
    3e30:	079b      	lsls	r3, r3, #30
    3e32:	bf5f      	itttt	pl
    3e34:	4b23      	ldrpl	r3, [pc, #140]	; (3ec4 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3e36:	4a24      	ldrpl	r2, [pc, #144]	; (3ec8 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3e38:	681b      	ldrpl	r3, [r3, #0]
    3e3a:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3e3e:	bf5c      	itt	pl
    3e40:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3e44:	7013      	strbpl	r3, [r2, #0]
    3e46:	4b21      	ldr	r3, [pc, #132]	; (3ecc <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3e48:	2200      	movs	r2, #0
    3e4a:	601a      	str	r2, [r3, #0]
    3e4c:	4b20      	ldr	r3, [pc, #128]	; (3ed0 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3e4e:	681c      	ldr	r4, [r3, #0]
    3e50:	4620      	mov	r0, r4
    3e52:	f000 f8d9 	bl	4008 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3e56:	4628      	mov	r0, r5
    3e58:	4621      	mov	r1, r4
    3e5a:	f000 fa0d 	bl	4278 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3e5e:	f240 221d 	movw	r2, #541	; 0x21d
    3e62:	4b1c      	ldr	r3, [pc, #112]	; (3ed4 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3e64:	681b      	ldr	r3, [r3, #0]
    3e66:	b29b      	uxth	r3, r3
    3e68:	4293      	cmp	r3, r2
    3e6a:	d814      	bhi.n	3e96 <TrimAfterColdResetWakeupFromShutDown+0x82>
    3e6c:	4a1a      	ldr	r2, [pc, #104]	; (3ed8 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3e6e:	6813      	ldr	r3, [r2, #0]
    3e70:	6812      	ldr	r2, [r2, #0]
    3e72:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3e76:	f3c2 4203 	ubfx	r2, r2, #16, #4
    3e7a:	b103      	cbz	r3, 3e7e <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3e7c:	3b01      	subs	r3, #1
    3e7e:	1f91      	subs	r1, r2, #6
    3e80:	2901      	cmp	r1, #1
    3e82:	bf86      	itte	hi
    3e84:	3202      	addhi	r2, #2
    3e86:	f002 020f 	andhi.w	r2, r2, #15
    3e8a:	2207      	movls	r2, #7
    3e8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3e90:	4a12      	ldr	r2, [pc, #72]	; (3edc <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3e92:	b2db      	uxtb	r3, r3
    3e94:	7013      	strb	r3, [r2, #0]
    3e96:	4620      	mov	r0, r4
    3e98:	f000 fabc 	bl	4414 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3e9c:	4b10      	ldr	r3, [pc, #64]	; (3ee0 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3e9e:	2002      	movs	r0, #2
    3ea0:	681b      	ldr	r3, [r3, #0]
    3ea2:	68db      	ldr	r3, [r3, #12]
    3ea4:	4798      	blx	r3
    3ea6:	4b05      	ldr	r3, [pc, #20]	; (3ebc <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3ea8:	2240      	movs	r2, #64	; 0x40
    3eaa:	601a      	str	r2, [r3, #0]
    3eac:	4b0d      	ldr	r3, [pc, #52]	; (3ee4 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    3eae:	2201      	movs	r2, #1
    3eb0:	601a      	str	r2, [r3, #0]
    3eb2:	bd38      	pop	{r3, r4, r5, pc}
    3eb4:	40091010 	andmi	r1, r9, r0, lsl r0
    3eb8:	43220294 			; <UNDEFINED> instruction: 0x43220294
    3ebc:	400c6000 	andmi	r6, ip, r0
    3ec0:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3ec4:	50003fac 	andpl	r3, r0, ip, lsr #31
    3ec8:	40086256 	andmi	r6, r8, r6, asr r2
    3ecc:	40091040 	andmi	r1, r9, r0, asr #32
    3ed0:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3ed4:	50001314 	andpl	r1, r0, r4, lsl r3
    3ed8:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    3edc:	40086002 	andmi	r6, r8, r2
    3ee0:	100001a0 	andne	r0, r0, r0, lsr #3
    3ee4:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00003ee8 <NOROM_SetupTrimDevice>:
    3ee8:	b510      	push	{r4, lr}
    3eea:	4b1f      	ldr	r3, [pc, #124]	; (3f68 <NOROM_SetupTrimDevice+0x80>)
    3eec:	681c      	ldr	r4, [r3, #0]
    3eee:	1c63      	adds	r3, r4, #1
    3ef0:	bf08      	it	eq
    3ef2:	2400      	moveq	r4, #0
    3ef4:	f000 fcde 	bl	48b4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3ef8:	4b1c      	ldr	r3, [pc, #112]	; (3f6c <NOROM_SetupTrimDevice+0x84>)
    3efa:	2200      	movs	r2, #0
    3efc:	601a      	str	r2, [r3, #0]
    3efe:	4a1c      	ldr	r2, [pc, #112]	; (3f70 <NOROM_SetupTrimDevice+0x88>)
    3f00:	2301      	movs	r3, #1
    3f02:	6013      	str	r3, [r2, #0]
    3f04:	4a1b      	ldr	r2, [pc, #108]	; (3f74 <NOROM_SetupTrimDevice+0x8c>)
    3f06:	6013      	str	r3, [r2, #0]
    3f08:	f000 fa3e 	bl	4388 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3f0c:	4b1a      	ldr	r3, [pc, #104]	; (3f78 <NOROM_SetupTrimDevice+0x90>)
    3f0e:	681b      	ldr	r3, [r3, #0]
    3f10:	b123      	cbz	r3, 3f1c <NOROM_SetupTrimDevice+0x34>
    3f12:	4b1a      	ldr	r3, [pc, #104]	; (3f7c <NOROM_SetupTrimDevice+0x94>)
    3f14:	4620      	mov	r0, r4
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	f7ff ff7c 	bl	3e14 <TrimAfterColdResetWakeupFromShutDown>
    3f1c:	4b18      	ldr	r3, [pc, #96]	; (3f80 <NOROM_SetupTrimDevice+0x98>)
    3f1e:	2200      	movs	r2, #0
    3f20:	601a      	str	r2, [r3, #0]
    3f22:	4a18      	ldr	r2, [pc, #96]	; (3f84 <NOROM_SetupTrimDevice+0x9c>)
    3f24:	6813      	ldr	r3, [r2, #0]
    3f26:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    3f2a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3f2e:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f36:	6013      	str	r3, [r2, #0]
    3f38:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3f3c:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3f40:	6813      	ldr	r3, [r2, #0]
    3f42:	f3c3 3301 	ubfx	r3, r3, #12, #2
    3f46:	2b01      	cmp	r3, #1
    3f48:	bf01      	itttt	eq
    3f4a:	6813      	ldreq	r3, [r2, #0]
    3f4c:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3f50:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3f54:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    3f58:	bf04      	itt	eq
    3f5a:	6011      	streq	r1, [r2, #0]
    3f5c:	6013      	streq	r3, [r2, #0]
    3f5e:	4b0a      	ldr	r3, [pc, #40]	; (3f88 <NOROM_SetupTrimDevice+0xa0>)
    3f60:	681b      	ldr	r3, [r3, #0]
    3f62:	2b00      	cmp	r3, #0
    3f64:	d1fb      	bne.n	3f5e <NOROM_SetupTrimDevice+0x76>
    3f66:	bd10      	pop	{r4, pc}
    3f68:	5000131c 	andpl	r1, r0, ip, lsl r3
    3f6c:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3f70:	400c605c 	andmi	r6, ip, ip, asr r0
    3f74:	43042208 	movwmi	r2, #16904	; 0x4208
    3f78:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3f7c:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3f80:	4008218c 	andmi	r2, r8, ip, lsl #3
    3f84:	40032048 	andmi	r2, r3, r8, asr #32
    3f88:	4268000c 	rsbmi	r0, r8, #12

00003f8c <NOROM_SetupSetVddrLevel>:
    3f8c:	b530      	push	{r4, r5, lr}
    3f8e:	4b19      	ldr	r3, [pc, #100]	; (3ff4 <NOROM_SetupSetVddrLevel+0x68>)
    3f90:	681a      	ldr	r2, [r3, #0]
    3f92:	4b19      	ldr	r3, [pc, #100]	; (3ff8 <NOROM_SetupSetVddrLevel+0x6c>)
    3f94:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3f98:	781b      	ldrb	r3, [r3, #0]
    3f9a:	2a15      	cmp	r2, #21
    3f9c:	f003 031f 	and.w	r3, r3, #31
    3fa0:	bf88      	it	hi
    3fa2:	3a20      	subhi	r2, #32
    3fa4:	2b15      	cmp	r3, #21
    3fa6:	bf88      	it	hi
    3fa8:	3b20      	subhi	r3, #32
    3faa:	4293      	cmp	r3, r2
    3fac:	d020      	beq.n	3ff0 <NOROM_SetupSetVddrLevel+0x64>
    3fae:	4913      	ldr	r1, [pc, #76]	; (3ffc <NOROM_SetupSetVddrLevel+0x70>)
    3fb0:	2000      	movs	r0, #0
    3fb2:	6008      	str	r0, [r1, #0]
    3fb4:	4608      	mov	r0, r1
    3fb6:	1ad1      	subs	r1, r2, r3
    3fb8:	2902      	cmp	r1, #2
    3fba:	dc05      	bgt.n	3fc8 <NOROM_SetupSetVddrLevel+0x3c>
    3fbc:	f06f 0401 	mvn.w	r4, #1
    3fc0:	42a1      	cmp	r1, r4
    3fc2:	bfb8      	it	lt
    3fc4:	4621      	movlt	r1, r4
    3fc6:	e000      	b.n	3fca <NOROM_SetupSetVddrLevel+0x3e>
    3fc8:	2102      	movs	r1, #2
    3fca:	440b      	add	r3, r1
    3fcc:	490c      	ldr	r1, [pc, #48]	; (4000 <NOROM_SetupSetVddrLevel+0x74>)
    3fce:	4d0d      	ldr	r5, [pc, #52]	; (4004 <NOROM_SetupSetVddrLevel+0x78>)
    3fd0:	680c      	ldr	r4, [r1, #0]
    3fd2:	f003 041f 	and.w	r4, r3, #31
    3fd6:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    3fda:	802c      	strh	r4, [r5, #0]
    3fdc:	4293      	cmp	r3, r2
    3fde:	f04f 0401 	mov.w	r4, #1
    3fe2:	600c      	str	r4, [r1, #0]
    3fe4:	d1e7      	bne.n	3fb6 <NOROM_SetupSetVddrLevel+0x2a>
    3fe6:	680b      	ldr	r3, [r1, #0]
    3fe8:	600c      	str	r4, [r1, #0]
    3fea:	680b      	ldr	r3, [r1, #0]
    3fec:	6004      	str	r4, [r0, #0]
    3fee:	680b      	ldr	r3, [r1, #0]
    3ff0:	bd30      	pop	{r4, r5, pc}
    3ff2:	bf00      	nop
    3ff4:	50001388 	andpl	r1, r0, r8, lsl #7
    3ff8:	40086206 	andmi	r6, r8, r6, lsl #4
    3ffc:	43200098 			; <UNDEFINED> instruction: 0x43200098
    4000:	4009202c 	andmi	r2, r9, ip, lsr #32
    4004:	4008626c 	andmi	r6, r8, ip, ror #4

00004008 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    4008:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    400c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    4010:	b510      	push	{r4, lr}
    4012:	4604      	mov	r4, r0
    4014:	d10f      	bne.n	4036 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    4016:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    401a:	4a1e      	ldr	r2, [pc, #120]	; (4094 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    401c:	2380      	movs	r3, #128	; 0x80
    401e:	7013      	strb	r3, [r2, #0]
    4020:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    4024:	f802 3c10 	strb.w	r3, [r2, #-16]
    4028:	f7ff ffb0 	bl	3f8c <NOROM_SetupSetVddrLevel>
    402c:	4b1a      	ldr	r3, [pc, #104]	; (4098 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    402e:	681b      	ldr	r3, [r3, #0]
    4030:	f3c3 2304 	ubfx	r3, r3, #8, #5
    4034:	e003      	b.n	403e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    4036:	4b19      	ldr	r3, [pc, #100]	; (409c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    4038:	681b      	ldr	r3, [r3, #0]
    403a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    403e:	2b15      	cmp	r3, #21
    4040:	bf88      	it	hi
    4042:	3b20      	subhi	r3, #32
    4044:	eb03 7324 	add.w	r3, r3, r4, asr #28
    4048:	3301      	adds	r3, #1
    404a:	2b15      	cmp	r3, #21
    404c:	dc05      	bgt.n	405a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    404e:	f06f 0209 	mvn.w	r2, #9
    4052:	4293      	cmp	r3, r2
    4054:	bfb8      	it	lt
    4056:	4613      	movlt	r3, r2
    4058:	e000      	b.n	405c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    405a:	2315      	movs	r3, #21
    405c:	4a10      	ldr	r2, [pc, #64]	; (40a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    405e:	f003 031f 	and.w	r3, r3, #31
    4062:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    4066:	8013      	strh	r3, [r2, #0]
    4068:	4b0e      	ldr	r3, [pc, #56]	; (40a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    406a:	681b      	ldr	r3, [r3, #0]
    406c:	f013 0302 	ands.w	r3, r3, #2
    4070:	bf0a      	itet	eq
    4072:	4a0d      	ldreq	r2, [pc, #52]	; (40a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    4074:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    4078:	6013      	streq	r3, [r2, #0]
    407a:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    407e:	4a0b      	ldr	r2, [pc, #44]	; (40ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    4080:	f083 0301 	eor.w	r3, r3, #1
    4084:	6013      	str	r3, [r2, #0]
    4086:	f3c4 6480 	ubfx	r4, r4, #26, #1
    408a:	4b09      	ldr	r3, [pc, #36]	; (40b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    408c:	f084 0401 	eor.w	r4, r4, #1
    4090:	601c      	str	r4, [r3, #0]
    4092:	bd10      	pop	{r4, pc}
    4094:	40086225 	andmi	r6, r8, r5, lsr #4
    4098:	50001388 	andpl	r1, r0, r8, lsl #7
    409c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    40a0:	4008626e 	andmi	r6, r8, lr, ror #4
    40a4:	40090000 	andmi	r0, r9, r0
    40a8:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    40ac:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    40b0:	43200008 			; <UNDEFINED> instruction: 0x43200008

000040b4 <NOROM_SetupGetTrimForAnabypassValue1>:
    40b4:	4b15      	ldr	r3, [pc, #84]	; (410c <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    40b6:	0381      	lsls	r1, r0, #14
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	f3c3 6283 	ubfx	r2, r3, #26, #4
    40be:	f3c3 238f 	ubfx	r3, r3, #10, #16
    40c2:	d41f      	bmi.n	4104 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    40c4:	f340 2007 	sbfx	r0, r0, #8, #8
    40c8:	2800      	cmp	r0, #0
    40ca:	da19      	bge.n	4100 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    40cc:	085b      	lsrs	r3, r3, #1
    40ce:	d105      	bne.n	40dc <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    40d0:	0852      	lsrs	r2, r2, #1
    40d2:	bf06      	itte	eq
    40d4:	2301      	moveq	r3, #1
    40d6:	461a      	moveq	r2, r3
    40d8:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    40dc:	3001      	adds	r0, #1
    40de:	e7f3      	b.n	40c8 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    40e0:	005b      	lsls	r3, r3, #1
    40e2:	f043 0301 	orr.w	r3, r3, #1
    40e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    40ea:	d308      	bcc.n	40fe <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    40ec:	0052      	lsls	r2, r2, #1
    40ee:	f042 0201 	orr.w	r2, r2, #1
    40f2:	2a0f      	cmp	r2, #15
    40f4:	bf86      	itte	hi
    40f6:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    40fa:	220f      	movhi	r2, #15
    40fc:	2301      	movls	r3, #1
    40fe:	3801      	subs	r0, #1
    4100:	2800      	cmp	r0, #0
    4102:	d1ed      	bne.n	40e0 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    4104:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    4108:	4770      	bx	lr
    410a:	bf00      	nop
    410c:	50001350 	andpl	r1, r0, r0, asr r3

00004110 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    4110:	4a04      	ldr	r2, [pc, #16]	; (4124 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    4112:	6813      	ldr	r3, [r2, #0]
    4114:	6810      	ldr	r0, [r2, #0]
    4116:	f3c3 0387 	ubfx	r3, r3, #2, #8
    411a:	f000 0003 	and.w	r0, r0, #3
    411e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    4122:	4770      	bx	lr
    4124:	50001350 	andpl	r1, r0, r0, asr r3

00004128 <NOROM_SetupGetTrimForAmpcompTh2>:
    4128:	4b02      	ldr	r3, [pc, #8]	; (4134 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    412a:	6818      	ldr	r0, [r3, #0]
    412c:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    4130:	4770      	bx	lr
    4132:	bf00      	nop
    4134:	50001374 	andpl	r1, r0, r4, ror r3

00004138 <NOROM_SetupGetTrimForAmpcompTh1>:
    4138:	4b03      	ldr	r3, [pc, #12]	; (4148 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    413a:	6818      	ldr	r0, [r3, #0]
    413c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4140:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    4144:	4770      	bx	lr
    4146:	bf00      	nop
    4148:	50001370 	andpl	r1, r0, r0, ror r3

0000414c <NOROM_SetupGetTrimForAmpcompCtrl>:
    414c:	b570      	push	{r4, r5, r6, lr}
    414e:	4b15      	ldr	r3, [pc, #84]	; (41a4 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    4150:	4915      	ldr	r1, [pc, #84]	; (41a8 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    4152:	681c      	ldr	r4, [r3, #0]
    4154:	6809      	ldr	r1, [r1, #0]
    4156:	f3c4 5203 	ubfx	r2, r4, #20, #4
    415a:	f011 0501 	ands.w	r5, r1, #1
    415e:	f3c4 4303 	ubfx	r3, r4, #16, #4
    4162:	d113      	bne.n	418c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    4164:	4911      	ldr	r1, [pc, #68]	; (41ac <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    4166:	6809      	ldr	r1, [r1, #0]
    4168:	f341 2603 	sbfx	r6, r1, #8, #4
    416c:	18b2      	adds	r2, r6, r2
    416e:	d403      	bmi.n	4178 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    4170:	2a0f      	cmp	r2, #15
    4172:	bfa8      	it	ge
    4174:	220f      	movge	r2, #15
    4176:	e000      	b.n	417a <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    4178:	462a      	mov	r2, r5
    417a:	f341 3103 	sbfx	r1, r1, #12, #4
    417e:	18cb      	adds	r3, r1, r3
    4180:	d403      	bmi.n	418a <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    4182:	2b0f      	cmp	r3, #15
    4184:	bfa8      	it	ge
    4186:	230f      	movge	r3, #15
    4188:	e000      	b.n	418c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    418a:	2300      	movs	r3, #0
    418c:	b2a1      	uxth	r1, r4
    418e:	2821      	cmp	r0, #33	; 0x21
    4190:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    4194:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    4198:	bf84      	itt	hi
    419a:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    419e:	4323      	orrhi	r3, r4
    41a0:	4618      	mov	r0, r3
    41a2:	bd70      	pop	{r4, r5, r6, pc}
    41a4:	50001378 	andpl	r1, r0, r8, ror r3
    41a8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    41ac:	50003fac 	andpl	r3, r0, ip, lsr #31

000041b0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    41b0:	281f      	cmp	r0, #31
    41b2:	bf83      	ittte	hi
    41b4:	4b02      	ldrhi	r3, [pc, #8]	; (41c0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    41b6:	6818      	ldrhi	r0, [r3, #0]
    41b8:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    41bc:	2000      	movls	r0, #0
    41be:	4770      	bx	lr
    41c0:	50001398 	mulpl	r0, r8, r3

000041c4 <NOROM_SetupGetTrimForAdcShModeEn>:
    41c4:	2821      	cmp	r0, #33	; 0x21
    41c6:	bf83      	ittte	hi
    41c8:	4b02      	ldrhi	r3, [pc, #8]	; (41d4 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    41ca:	6818      	ldrhi	r0, [r3, #0]
    41cc:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    41d0:	2001      	movls	r0, #1
    41d2:	4770      	bx	lr
    41d4:	5000138c 	andpl	r1, r0, ip, lsl #7

000041d8 <NOROM_SetupGetTrimForAdcShVbufEn>:
    41d8:	2821      	cmp	r0, #33	; 0x21
    41da:	bf83      	ittte	hi
    41dc:	4b02      	ldrhi	r3, [pc, #8]	; (41e8 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    41de:	6818      	ldrhi	r0, [r3, #0]
    41e0:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    41e4:	2001      	movls	r0, #1
    41e6:	4770      	bx	lr
    41e8:	5000138c 	andpl	r1, r0, ip, lsl #7

000041ec <NOROM_SetupGetTrimForXoscHfCtl>:
    41ec:	281f      	cmp	r0, #31
    41ee:	bf81      	itttt	hi
    41f0:	4b07      	ldrhi	r3, [pc, #28]	; (4210 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    41f2:	681b      	ldrhi	r3, [r3, #0]
    41f4:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    41f8:	0080      	lslhi	r0, r0, #2
    41fa:	bf81      	itttt	hi
    41fc:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    4200:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    4204:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    4208:	4318      	orrhi	r0, r3
    420a:	bf98      	it	ls
    420c:	2000      	movls	r0, #0
    420e:	4770      	bx	lr
    4210:	50001398 	mulpl	r0, r8, r3

00004214 <NOROM_SetupGetTrimForXoscHfFastStart>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    4216:	6818      	ldr	r0, [r3, #0]
    4218:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    421c:	4770      	bx	lr
    421e:	bf00      	nop
    4220:	5000138c 	andpl	r1, r0, ip, lsl #7

00004224 <NOROM_SetupGetTrimForRadcExtCfg>:
    4224:	281f      	cmp	r0, #31
    4226:	bf81      	itttt	hi
    4228:	4b07      	ldrhi	r3, [pc, #28]	; (4248 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    422a:	681b      	ldrhi	r3, [r3, #0]
    422c:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    4230:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    4234:	bf81      	itttt	hi
    4236:	0400      	lslhi	r0, r0, #16
    4238:	031b      	lslhi	r3, r3, #12
    423a:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    423e:	b29b      	uxthhi	r3, r3
    4240:	bf8c      	ite	hi
    4242:	4318      	orrhi	r0, r3
    4244:	4801      	ldrls	r0, [pc, #4]	; (424c <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    4246:	4770      	bx	lr
    4248:	50001398 	mulpl	r0, r8, r3
    424c:	403f8000 	eorsmi	r8, pc, r0

00004250 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    4250:	2821      	cmp	r0, #33	; 0x21
    4252:	bf83      	ittte	hi
    4254:	4b02      	ldrhi	r3, [pc, #8]	; (4260 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    4256:	6818      	ldrhi	r0, [r3, #0]
    4258:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    425c:	2000      	movls	r0, #0
    425e:	4770      	bx	lr
    4260:	5000138c 	andpl	r1, r0, ip, lsl #7

00004264 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    4264:	2821      	cmp	r0, #33	; 0x21
    4266:	bf83      	ittte	hi
    4268:	4b02      	ldrhi	r3, [pc, #8]	; (4274 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    426a:	6818      	ldrhi	r0, [r3, #0]
    426c:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    4270:	2000      	movls	r0, #0
    4272:	4770      	bx	lr
    4274:	5000138c 	andpl	r1, r0, ip, lsl #7

00004278 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    4278:	b573      	push	{r0, r1, r4, r5, r6, lr}
    427a:	4605      	mov	r5, r0
    427c:	4608      	mov	r0, r1
    427e:	f7ff ff19 	bl	40b4 <NOROM_SetupGetTrimForAnabypassValue1>
    4282:	4c39      	ldr	r4, [pc, #228]	; (4368 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    4284:	4602      	mov	r2, r0
    4286:	2118      	movs	r1, #24
    4288:	4620      	mov	r0, r4
    428a:	f000 fb33 	bl	48f4 <NOROM_DDI32RegWrite>
    428e:	f7ff ff3f 	bl	4110 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    4292:	4b36      	ldr	r3, [pc, #216]	; (436c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    4294:	b280      	uxth	r0, r0
    4296:	681b      	ldr	r3, [r3, #0]
    4298:	9000      	str	r0, [sp, #0]
    429a:	685e      	ldr	r6, [r3, #4]
    429c:	4620      	mov	r0, r4
    429e:	212c      	movs	r1, #44	; 0x2c
    42a0:	f240 32ff 	movw	r2, #1023	; 0x3ff
    42a4:	2300      	movs	r3, #0
    42a6:	47b0      	blx	r6
    42a8:	4b31      	ldr	r3, [pc, #196]	; (4370 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    42aa:	4620      	mov	r0, r4
    42ac:	681a      	ldr	r2, [r3, #0]
    42ae:	211c      	movs	r1, #28
    42b0:	f3c2 020d 	ubfx	r2, r2, #0, #14
    42b4:	f000 fb1e 	bl	48f4 <NOROM_DDI32RegWrite>
    42b8:	f7ff ff36 	bl	4128 <NOROM_SetupGetTrimForAmpcompTh2>
    42bc:	2114      	movs	r1, #20
    42be:	4602      	mov	r2, r0
    42c0:	4620      	mov	r0, r4
    42c2:	f000 fb17 	bl	48f4 <NOROM_DDI32RegWrite>
    42c6:	f7ff ff37 	bl	4138 <NOROM_SetupGetTrimForAmpcompTh1>
    42ca:	2110      	movs	r1, #16
    42cc:	4602      	mov	r2, r0
    42ce:	4620      	mov	r0, r4
    42d0:	f000 fb10 	bl	48f4 <NOROM_DDI32RegWrite>
    42d4:	4628      	mov	r0, r5
    42d6:	f7ff ff39 	bl	414c <NOROM_SetupGetTrimForAmpcompCtrl>
    42da:	210c      	movs	r1, #12
    42dc:	4602      	mov	r2, r0
    42de:	4620      	mov	r0, r4
    42e0:	f000 fb08 	bl	48f4 <NOROM_DDI32RegWrite>
    42e4:	4628      	mov	r0, r5
    42e6:	f7ff ff6d 	bl	41c4 <NOROM_SetupGetTrimForAdcShModeEn>
    42ea:	0040      	lsls	r0, r0, #1
    42ec:	4e21      	ldr	r6, [pc, #132]	; (4374 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    42ee:	f040 0020 	orr.w	r0, r0, #32
    42f2:	b2c0      	uxtb	r0, r0
    42f4:	7030      	strb	r0, [r6, #0]
    42f6:	4628      	mov	r0, r5
    42f8:	f7ff ff6e 	bl	41d8 <NOROM_SetupGetTrimForAdcShVbufEn>
    42fc:	f040 0010 	orr.w	r0, r0, #16
    4300:	b2c0      	uxtb	r0, r0
    4302:	7030      	strb	r0, [r6, #0]
    4304:	4628      	mov	r0, r5
    4306:	f7ff ff71 	bl	41ec <NOROM_SetupGetTrimForXoscHfCtl>
    430a:	2128      	movs	r1, #40	; 0x28
    430c:	4602      	mov	r2, r0
    430e:	4620      	mov	r0, r4
    4310:	f000 faf0 	bl	48f4 <NOROM_DDI32RegWrite>
    4314:	4628      	mov	r0, r5
    4316:	f7ff ff4b 	bl	41b0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    431a:	0040      	lsls	r0, r0, #1
    431c:	4b16      	ldr	r3, [pc, #88]	; (4378 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    431e:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    4322:	b2c0      	uxtb	r0, r0
    4324:	7018      	strb	r0, [r3, #0]
    4326:	4628      	mov	r0, r5
    4328:	f7ff ff92 	bl	4250 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    432c:	00c0      	lsls	r0, r0, #3
    432e:	4b13      	ldr	r3, [pc, #76]	; (437c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    4330:	f060 007f 	orn	r0, r0, #127	; 0x7f
    4334:	b2c0      	uxtb	r0, r0
    4336:	7018      	strb	r0, [r3, #0]
    4338:	4628      	mov	r0, r5
    433a:	f7ff ff93 	bl	4264 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    433e:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    4342:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    4346:	4b0e      	ldr	r3, [pc, #56]	; (4380 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    4348:	b280      	uxth	r0, r0
    434a:	8018      	strh	r0, [r3, #0]
    434c:	4628      	mov	r0, r5
    434e:	f7ff ff69 	bl	4224 <NOROM_SetupGetTrimForRadcExtCfg>
    4352:	2108      	movs	r1, #8
    4354:	4602      	mov	r2, r0
    4356:	4620      	mov	r0, r4
    4358:	f000 facc 	bl	48f4 <NOROM_DDI32RegWrite>
    435c:	4b09      	ldr	r3, [pc, #36]	; (4384 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    435e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    4362:	601a      	str	r2, [r3, #0]
    4364:	b002      	add	sp, #8
    4366:	bd70      	pop	{r4, r5, r6, pc}
    4368:	400ca000 	andmi	sl, ip, r0
    436c:	100001a4 	andne	r0, r0, r4, lsr #3
    4370:	5000137c 	andpl	r1, r0, ip, ror r3
    4374:	400ca149 	andmi	sl, ip, r9, asr #2
    4378:	400ca14c 	andmi	sl, ip, ip, asr #2
    437c:	400ca141 	andmi	sl, ip, r1, asr #2
    4380:	400ca1dc 	ldrdmi	sl, [ip], -ip
    4384:	400ca040 	andmi	sl, ip, r0, asr #32

00004388 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    4388:	b530      	push	{r4, r5, lr}
    438a:	4b14      	ldr	r3, [pc, #80]	; (43dc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    438c:	681b      	ldr	r3, [r3, #0]
    438e:	2b00      	cmp	r3, #0
    4390:	d1fb      	bne.n	438a <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    4392:	4a13      	ldr	r2, [pc, #76]	; (43e0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    4394:	4913      	ldr	r1, [pc, #76]	; (43e4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    4396:	6813      	ldr	r3, [r2, #0]
    4398:	6809      	ldr	r1, [r1, #0]
    439a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    439e:	f023 0307 	bic.w	r3, r3, #7
    43a2:	f011 0f04 	tst.w	r1, #4
    43a6:	4614      	mov	r4, r2
    43a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    43ac:	d003      	beq.n	43b6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    43ae:	f043 0305 	orr.w	r3, r3, #5
    43b2:	6013      	str	r3, [r2, #0]
    43b4:	bd30      	pop	{r4, r5, pc}
    43b6:	490c      	ldr	r1, [pc, #48]	; (43e8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    43b8:	f043 0004 	orr.w	r0, r3, #4
    43bc:	680d      	ldr	r5, [r1, #0]
    43be:	07ad      	lsls	r5, r5, #30
    43c0:	d009      	beq.n	43d6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    43c2:	f043 0307 	orr.w	r3, r3, #7
    43c6:	6013      	str	r3, [r2, #0]
    43c8:	680b      	ldr	r3, [r1, #0]
    43ca:	f003 0303 	and.w	r3, r3, #3
    43ce:	2b03      	cmp	r3, #3
    43d0:	d1fa      	bne.n	43c8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    43d2:	6020      	str	r0, [r4, #0]
    43d4:	bd30      	pop	{r4, r5, pc}
    43d6:	6010      	str	r0, [r2, #0]
    43d8:	bd30      	pop	{r4, r5, pc}
    43da:	bf00      	nop
    43dc:	4268000c 	rsbmi	r0, r8, #12
    43e0:	40034004 	andmi	r4, r3, r4
    43e4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    43e8:	40034000 	andmi	r4, r3, r0

000043ec <NOROM_SetupSetAonRtcSubSecInc>:
    43ec:	4b07      	ldr	r3, [pc, #28]	; (440c <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    43ee:	b282      	uxth	r2, r0
    43f0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    43f4:	601a      	str	r2, [r3, #0]
    43f6:	6058      	str	r0, [r3, #4]
    43f8:	2201      	movs	r2, #1
    43fa:	3308      	adds	r3, #8
    43fc:	601a      	str	r2, [r3, #0]
    43fe:	4a04      	ldr	r2, [pc, #16]	; (4410 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    4400:	6812      	ldr	r2, [r2, #0]
    4402:	2a00      	cmp	r2, #0
    4404:	d0fb      	beq.n	43fe <NOROM_SetupSetAonRtcSubSecInc+0x12>
    4406:	2200      	movs	r2, #0
    4408:	601a      	str	r2, [r3, #0]
    440a:	4770      	bx	lr
    440c:	400c603c 	andmi	r6, ip, ip, lsr r0
    4410:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00004414 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    4414:	f3c0 4381 	ubfx	r3, r0, #18, #2
    4418:	2b01      	cmp	r3, #1
    441a:	b510      	push	{r4, lr}
    441c:	4604      	mov	r4, r0
    441e:	d002      	beq.n	4426 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    4420:	2b02      	cmp	r3, #2
    4422:	d02f      	beq.n	4484 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    4424:	e02a      	b.n	447c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    4426:	4b42      	ldr	r3, [pc, #264]	; (4530 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	039a      	lsls	r2, r3, #14
    442c:	d426      	bmi.n	447c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    442e:	4a41      	ldr	r2, [pc, #260]	; (4534 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    4430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4434:	6011      	str	r1, [r2, #0]
    4436:	4940      	ldr	r1, [pc, #256]	; (4538 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    4438:	f3c3 3003 	ubfx	r0, r3, #12, #4
    443c:	680a      	ldr	r2, [r1, #0]
    443e:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    4442:	4302      	orrs	r2, r0
    4444:	f3c3 4000 	ubfx	r0, r3, #16, #1
    4448:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    444c:	600a      	str	r2, [r1, #0]
    444e:	f851 2c01 	ldr.w	r2, [r1, #-1]
    4452:	f3c3 2003 	ubfx	r0, r3, #8, #4
    4456:	f022 020f 	bic.w	r2, r2, #15
    445a:	4302      	orrs	r2, r0
    445c:	f851 0c01 	ldr.w	r0, [r1, #-1]
    4460:	f841 2c01 	str.w	r2, [r1, #-1]
    4464:	f851 2c02 	ldr.w	r2, [r1, #-2]
    4468:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    446c:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    4470:	4313      	orrs	r3, r2
    4472:	f851 2c02 	ldr.w	r2, [r1, #-2]
    4476:	f841 3c02 	str.w	r3, [r1, #-2]
    447a:	e003      	b.n	4484 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    447c:	4b2d      	ldr	r3, [pc, #180]	; (4534 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    447e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4482:	601a      	str	r2, [r3, #0]
    4484:	4b2d      	ldr	r3, [pc, #180]	; (453c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    4486:	681b      	ldr	r3, [r3, #0]
    4488:	071b      	lsls	r3, r3, #28
    448a:	bf5e      	ittt	pl
    448c:	4b2c      	ldrpl	r3, [pc, #176]	; (4540 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    448e:	2240      	movpl	r2, #64	; 0x40
    4490:	601a      	strpl	r2, [r3, #0]
    4492:	4b2c      	ldr	r3, [pc, #176]	; (4544 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    4494:	f44f 7200 	mov.w	r2, #512	; 0x200
    4498:	601a      	str	r2, [r3, #0]
    449a:	f7ff febb 	bl	4214 <NOROM_SetupGetTrimForXoscHfFastStart>
    449e:	4b2a      	ldr	r3, [pc, #168]	; (4548 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    44a0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    44a4:	b2c0      	uxtb	r0, r0
    44a6:	7018      	strb	r0, [r3, #0]
    44a8:	f3c4 5081 	ubfx	r0, r4, #22, #2
    44ac:	2801      	cmp	r0, #1
    44ae:	d00b      	beq.n	44c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    44b0:	d302      	bcc.n	44b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    44b2:	2802      	cmp	r0, #2
    44b4:	d026      	beq.n	4504 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    44b6:	e028      	b.n	450a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    44b8:	2004      	movs	r0, #4
    44ba:	2101      	movs	r1, #1
    44bc:	f7ff fa84 	bl	39c8 <NOROM_OSCClockSourceSet>
    44c0:	4822      	ldr	r0, [pc, #136]	; (454c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    44c2:	f7ff ff93 	bl	43ec <NOROM_SetupSetAonRtcSubSecInc>
    44c6:	e024      	b.n	4512 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    44c8:	f7ff faac 	bl	3a24 <NOROM_OSCClockSourceGet>
    44cc:	4604      	mov	r4, r0
    44ce:	2004      	movs	r0, #4
    44d0:	4621      	mov	r1, r4
    44d2:	f7ff fa79 	bl	39c8 <NOROM_OSCClockSourceSet>
    44d6:	2004      	movs	r0, #4
    44d8:	f7ff faa4 	bl	3a24 <NOROM_OSCClockSourceGet>
    44dc:	42a0      	cmp	r0, r4
    44de:	d1fa      	bne.n	44d6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    44e0:	4b1b      	ldr	r3, [pc, #108]	; (4550 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    44e2:	681c      	ldr	r4, [r3, #0]
    44e4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    44e8:	f7ff ff80 	bl	43ec <NOROM_SetupSetAonRtcSubSecInc>
    44ec:	4b19      	ldr	r3, [pc, #100]	; (4554 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    44ee:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    44f2:	681b      	ldr	r3, [r3, #0]
    44f4:	0e20      	lsrs	r0, r4, #24
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	2107      	movs	r1, #7
    44fa:	4798      	blx	r3
    44fc:	4b0d      	ldr	r3, [pc, #52]	; (4534 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    44fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4502:	601a      	str	r2, [r3, #0]
    4504:	2004      	movs	r0, #4
    4506:	2103      	movs	r1, #3
    4508:	e001      	b.n	450e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    450a:	2004      	movs	r0, #4
    450c:	2102      	movs	r1, #2
    450e:	f7ff fa5b 	bl	39c8 <NOROM_OSCClockSourceSet>
    4512:	4b11      	ldr	r3, [pc, #68]	; (4558 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    4514:	4a11      	ldr	r2, [pc, #68]	; (455c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    4516:	681b      	ldr	r3, [r3, #0]
    4518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    451c:	7013      	strb	r3, [r2, #0]
    451e:	f647 0218 	movw	r2, #30744	; 0x7818
    4522:	4b0f      	ldr	r3, [pc, #60]	; (4560 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    4524:	801a      	strh	r2, [r3, #0]
    4526:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    452a:	3b44      	subs	r3, #68	; 0x44
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	bd10      	pop	{r4, pc}
    4530:	5000138c 	andpl	r1, r0, ip, lsl #7
    4534:	400ca040 	andmi	sl, ip, r0, asr #32
    4538:	4008600c 	andmi	r6, r8, ip
    453c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    4540:	400ca068 	andmi	sl, ip, r8, rrx
    4544:	400ca080 	andmi	sl, ip, r0, lsl #1
    4548:	400ca108 	andmi	sl, ip, r8, lsl #2
    454c:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    4550:	50003fa8 	andpl	r3, r0, r8, lsr #31
    4554:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    4558:	5000136c 	andpl	r1, r0, ip, ror #6
    455c:	400cb00b 	andmi	fp, ip, fp
    4560:	400cb070 	andmi	fp, ip, r0, ror r0

00004564 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    4564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4568:	4b77      	ldr	r3, [pc, #476]	; (4748 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    456a:	4607      	mov	r7, r0
    456c:	681b      	ldr	r3, [r3, #0]
    456e:	4e77      	ldr	r6, [pc, #476]	; (474c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4570:	f013 0f02 	tst.w	r3, #2
    4574:	d004      	beq.n	4580 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    4576:	2308      	movs	r3, #8
    4578:	71b3      	strb	r3, [r6, #6]
    457a:	4a75      	ldr	r2, [pc, #468]	; (4750 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    457c:	4b75      	ldr	r3, [pc, #468]	; (4754 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    457e:	e0df      	b.n	4740 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    4580:	f7ff f9e6 	bl	3950 <NOROM_AONBatMonTemperatureGetDegC>
    4584:	4b74      	ldr	r3, [pc, #464]	; (4758 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    4586:	681d      	ldr	r5, [r3, #0]
    4588:	172a      	asrs	r2, r5, #28
    458a:	02ac      	lsls	r4, r5, #10
    458c:	f102 0101 	add.w	r1, r2, #1
    4590:	d408      	bmi.n	45a4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    4592:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    4596:	10db      	asrs	r3, r3, #3
    4598:	2b08      	cmp	r3, #8
    459a:	bfa8      	it	ge
    459c:	2308      	movge	r3, #8
    459e:	4299      	cmp	r1, r3
    45a0:	bfb8      	it	lt
    45a2:	4619      	movlt	r1, r3
    45a4:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    45a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    45ac:	d10a      	bne.n	45c4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    45ae:	4b6b      	ldr	r3, [pc, #428]	; (475c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    45b0:	681a      	ldr	r2, [r3, #0]
    45b2:	681b      	ldr	r3, [r3, #0]
    45b4:	f3c2 2204 	ubfx	r2, r2, #8, #5
    45b8:	2a15      	cmp	r2, #21
    45ba:	bf88      	it	hi
    45bc:	3a20      	subhi	r2, #32
    45be:	f3c3 6304 	ubfx	r3, r3, #24, #5
    45c2:	e00a      	b.n	45da <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    45c4:	4b66      	ldr	r3, [pc, #408]	; (4760 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    45c6:	681a      	ldr	r2, [r3, #0]
    45c8:	4b66      	ldr	r3, [pc, #408]	; (4764 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    45ca:	f3c2 6204 	ubfx	r2, r2, #24, #5
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	2a15      	cmp	r2, #21
    45d2:	bf88      	it	hi
    45d4:	3a20      	subhi	r2, #32
    45d6:	f3c3 4304 	ubfx	r3, r3, #16, #5
    45da:	2b15      	cmp	r3, #21
    45dc:	440a      	add	r2, r1
    45de:	bf88      	it	hi
    45e0:	3b20      	subhi	r3, #32
    45e2:	2a15      	cmp	r2, #21
    45e4:	dc05      	bgt.n	45f2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    45e6:	f06f 0109 	mvn.w	r1, #9
    45ea:	428a      	cmp	r2, r1
    45ec:	bfb8      	it	lt
    45ee:	460a      	movlt	r2, r1
    45f0:	e000      	b.n	45f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    45f2:	2215      	movs	r2, #21
    45f4:	4c5c      	ldr	r4, [pc, #368]	; (4768 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    45f6:	f002 011f 	and.w	r1, r2, #31
    45fa:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    45fe:	8021      	strh	r1, [r4, #0]
    4600:	495a      	ldr	r1, [pc, #360]	; (476c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    4602:	6809      	ldr	r1, [r1, #0]
    4604:	f011 0403 	ands.w	r4, r1, #3
    4608:	bf18      	it	ne
    460a:	2401      	movne	r4, #1
    460c:	0749      	lsls	r1, r1, #29
    460e:	bf48      	it	mi
    4610:	f044 0402 	orrmi.w	r4, r4, #2
    4614:	b10f      	cbz	r7, 461a <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    4616:	f044 0404 	orr.w	r4, r4, #4
    461a:	f996 1007 	ldrsb.w	r1, [r6, #7]
    461e:	1a41      	subs	r1, r0, r1
    4620:	2904      	cmp	r1, #4
    4622:	dc03      	bgt.n	462c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    4624:	4949      	ldr	r1, [pc, #292]	; (474c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    4626:	7989      	ldrb	r1, [r1, #6]
    4628:	428c      	cmp	r4, r1
    462a:	d06f      	beq.n	470c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    462c:	f1b0 010f 	subs.w	r1, r0, #15
    4630:	9101      	str	r1, [sp, #4]
    4632:	f004 0101 	and.w	r1, r4, #1
    4636:	f8df a144 	ldr.w	sl, [pc, #324]	; 477c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    463a:	f004 0904 	and.w	r9, r4, #4
    463e:	f004 0802 	and.w	r8, r4, #2
    4642:	460f      	mov	r7, r1
    4644:	d42a      	bmi.n	469c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    4646:	9901      	ldr	r1, [sp, #4]
    4648:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    464c:	ea4f 2e21 	mov.w	lr, r1, asr #8
    4650:	f1be 0f07 	cmp.w	lr, #7
    4654:	9101      	str	r1, [sp, #4]
    4656:	d801      	bhi.n	465c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    4658:	d104      	bne.n	4664 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    465a:	e001      	b.n	4660 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    465c:	f04f 0e07 	mov.w	lr, #7
    4660:	2106      	movs	r1, #6
    4662:	e000      	b.n	4666 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    4664:	4671      	mov	r1, lr
    4666:	f8df b118 	ldr.w	fp, [pc, #280]	; 4780 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    466a:	3101      	adds	r1, #1
    466c:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    4670:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    4674:	ebc1 0c0c 	rsb	ip, r1, ip
    4678:	fa5f f18c 	uxtb.w	r1, ip
    467c:	f1b9 0f00 	cmp.w	r9, #0
    4680:	d002      	beq.n	4688 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    4682:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    4686:	4459      	add	r1, fp
    4688:	f1b8 0f00 	cmp.w	r8, #0
    468c:	d002      	beq.n	4694 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    468e:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    4692:	4459      	add	r1, fp
    4694:	b12f      	cbz	r7, 46a2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    4696:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    469a:	e002      	b.n	46a2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    469c:	f04f 0e00 	mov.w	lr, #0
    46a0:	4671      	mov	r1, lr
    46a2:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    46a6:	fa5f fc8a 	uxtb.w	ip, sl
    46aa:	f1b9 0f00 	cmp.w	r9, #0
    46ae:	d002      	beq.n	46b6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    46b0:	f3ca 2907 	ubfx	r9, sl, #8, #8
    46b4:	44cc      	add	ip, r9
    46b6:	f1b8 0f00 	cmp.w	r8, #0
    46ba:	d002      	beq.n	46c2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    46bc:	f3ca 4807 	ubfx	r8, sl, #16, #8
    46c0:	44c4      	add	ip, r8
    46c2:	b10f      	cbz	r7, 46c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    46c4:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    46c8:	1a9b      	subs	r3, r3, r2
    46ca:	2b01      	cmp	r3, #1
    46cc:	bfb8      	it	lt
    46ce:	2301      	movlt	r3, #1
    46d0:	9f01      	ldr	r7, [sp, #4]
    46d2:	2234      	movs	r2, #52	; 0x34
    46d4:	4353      	muls	r3, r2
    46d6:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    46da:	4379      	muls	r1, r7
    46dc:	b2ed      	uxtb	r5, r5
    46de:	436b      	muls	r3, r5
    46e0:	3180      	adds	r1, #128	; 0x80
    46e2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    46e6:	fbb3 f1f1 	udiv	r1, r3, r1
    46ea:	f64f 7cff 	movw	ip, #65535	; 0xffff
    46ee:	4561      	cmp	r1, ip
    46f0:	bf28      	it	cs
    46f2:	4661      	movcs	r1, ip
    46f4:	287f      	cmp	r0, #127	; 0x7f
    46f6:	80b1      	strh	r1, [r6, #4]
    46f8:	dc05      	bgt.n	4706 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    46fa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    46fe:	4298      	cmp	r0, r3
    4700:	bfb8      	it	lt
    4702:	4618      	movlt	r0, r3
    4704:	e000      	b.n	4708 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    4706:	207f      	movs	r0, #127	; 0x7f
    4708:	71f0      	strb	r0, [r6, #7]
    470a:	71b4      	strb	r4, [r6, #6]
    470c:	4b18      	ldr	r3, [pc, #96]	; (4770 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    470e:	2100      	movs	r1, #0
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	6033      	str	r3, [r6, #0]
    4714:	88b3      	ldrh	r3, [r6, #4]
    4716:	2b1e      	cmp	r3, #30
    4718:	bf9e      	ittt	ls
    471a:	4a0c      	ldrls	r2, [pc, #48]	; (474c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    471c:	231f      	movls	r3, #31
    471e:	8093      	strhls	r3, [r2, #4]
    4720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4724:	d302      	bcc.n	472c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    4726:	085b      	lsrs	r3, r3, #1
    4728:	3101      	adds	r1, #1
    472a:	e7f9      	b.n	4720 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    472c:	4a11      	ldr	r2, [pc, #68]	; (4774 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    472e:	3b0f      	subs	r3, #15
    4730:	430a      	orrs	r2, r1
    4732:	091b      	lsrs	r3, r3, #4
    4734:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    4738:	4a06      	ldr	r2, [pc, #24]	; (4754 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    473a:	6013      	str	r3, [r2, #0]
    473c:	4b0e      	ldr	r3, [pc, #56]	; (4778 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    473e:	2200      	movs	r2, #0
    4740:	601a      	str	r2, [r3, #0]
    4742:	b003      	add	sp, #12
    4744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4748:	40090000 	andmi	r0, r9, r0
    474c:	20000640 	andcs	r0, r0, r0, asr #12
    4750:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    4754:	40091030 	andmi	r1, r9, r0, lsr r0
    4758:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    475c:	50001388 	andpl	r1, r0, r8, lsl #7
    4760:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    4764:	5000113c 	andpl	r1, r0, ip, lsr r1
    4768:	4008626e 	andmi	r6, r8, lr, ror #4
    476c:	40082224 	andmi	r2, r8, r4, lsr #4
    4770:	40092008 	andmi	r2, r9, r8
    4774:	80a4e700 	adchi	lr, r4, r0, lsl #14
    4778:	40091034 	andmi	r1, r9, r4, lsr r0
    477c:	5000139c 	mulpl	r0, ip, r3
    4780:	50001398 	mulpl	r0, r8, r3

00004784 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    4784:	b510      	push	{r4, lr}
    4786:	4b14      	ldr	r3, [pc, #80]	; (47d8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    4788:	681c      	ldr	r4, [r3, #0]
    478a:	b2a4      	uxth	r4, r4
    478c:	b314      	cbz	r4, 47d4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    478e:	f7ff f8df 	bl	3950 <NOROM_AONBatMonTemperatureGetDegC>
    4792:	4b12      	ldr	r3, [pc, #72]	; (47dc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    4794:	f993 2007 	ldrsb.w	r2, [r3, #7]
    4798:	4290      	cmp	r0, r2
    479a:	da05      	bge.n	47a8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    479c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    47a0:	4290      	cmp	r0, r2
    47a2:	bfb8      	it	lt
    47a4:	4610      	movlt	r0, r2
    47a6:	71d8      	strb	r0, [r3, #7]
    47a8:	889a      	ldrh	r2, [r3, #4]
    47aa:	490c      	ldr	r1, [pc, #48]	; (47dc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    47ac:	4294      	cmp	r4, r2
    47ae:	d310      	bcc.n	47d2 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    47b0:	4b0b      	ldr	r3, [pc, #44]	; (47e0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    47b2:	6808      	ldr	r0, [r1, #0]
    47b4:	681b      	ldr	r3, [r3, #0]
    47b6:	1aa4      	subs	r4, r4, r2
    47b8:	3302      	adds	r3, #2
    47ba:	1a1b      	subs	r3, r3, r0
    47bc:	2b1f      	cmp	r3, #31
    47be:	bf28      	it	cs
    47c0:	231f      	movcs	r3, #31
    47c2:	085b      	lsrs	r3, r3, #1
    47c4:	40dc      	lsrs	r4, r3
    47c6:	4414      	add	r4, r2
    47c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    47cc:	4294      	cmp	r4, r2
    47ce:	bf28      	it	cs
    47d0:	4614      	movcs	r4, r2
    47d2:	808c      	strh	r4, [r1, #4]
    47d4:	bd10      	pop	{r4, pc}
    47d6:	bf00      	nop
    47d8:	40091034 	andmi	r1, r9, r4, lsr r0
    47dc:	20000640 	andcs	r0, r0, r0, asr #12
    47e0:	40092008 	andmi	r2, r9, r8

000047e4 <NOROM_SysCtrlResetSourceGet>:
    47e4:	4b04      	ldr	r3, [pc, #16]	; (47f8 <NOROM_SysCtrlResetSourceGet+0x14>)
    47e6:	681a      	ldr	r2, [r3, #0]
    47e8:	0412      	lsls	r2, r2, #16
    47ea:	bf5a      	itte	pl
    47ec:	6818      	ldrpl	r0, [r3, #0]
    47ee:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    47f2:	2008      	movmi	r0, #8
    47f4:	4770      	bx	lr
    47f6:	bf00      	nop
    47f8:	40090004 	andmi	r0, r9, r4

000047fc <NOROM_ChipInfo_GetChipFamily>:
    47fc:	f64b 129a 	movw	r2, #47514	; 0xb99a
    4800:	4b10      	ldr	r3, [pc, #64]	; (4844 <NOROM_ChipInfo_GetChipFamily+0x48>)
    4802:	6818      	ldr	r0, [r3, #0]
    4804:	f3c0 300f 	ubfx	r0, r0, #12, #16
    4808:	4290      	cmp	r0, r2
    480a:	d106      	bne.n	481a <NOROM_ChipInfo_GetChipFamily+0x1e>
    480c:	681b      	ldr	r3, [r3, #0]
    480e:	0f1b      	lsrs	r3, r3, #28
    4810:	2b0b      	cmp	r3, #11
    4812:	bf0c      	ite	eq
    4814:	2004      	moveq	r0, #4
    4816:	2000      	movne	r0, #0
    4818:	e011      	b.n	483e <NOROM_ChipInfo_GetChipFamily+0x42>
    481a:	f64b 13be 	movw	r3, #47550	; 0xb9be
    481e:	4298      	cmp	r0, r3
    4820:	d00a      	beq.n	4838 <NOROM_ChipInfo_GetChipFamily+0x3c>
    4822:	f64b 3341 	movw	r3, #47937	; 0xbb41
    4826:	4298      	cmp	r0, r3
    4828:	d008      	beq.n	483c <NOROM_ChipInfo_GetChipFamily+0x40>
    482a:	f64b 3320 	movw	r3, #47904	; 0xbb20
    482e:	4298      	cmp	r0, r3
    4830:	bf14      	ite	ne
    4832:	20ff      	movne	r0, #255	; 0xff
    4834:	2002      	moveq	r0, #2
    4836:	e002      	b.n	483e <NOROM_ChipInfo_GetChipFamily+0x42>
    4838:	2001      	movs	r0, #1
    483a:	e000      	b.n	483e <NOROM_ChipInfo_GetChipFamily+0x42>
    483c:	2003      	movs	r0, #3
    483e:	b240      	sxtb	r0, r0
    4840:	4770      	bx	lr
    4842:	bf00      	nop
    4844:	50001318 	andpl	r1, r0, r8, lsl r3

00004848 <NOROM_ChipInfo_GetHwRevision>:
    4848:	b538      	push	{r3, r4, r5, lr}
    484a:	4b19      	ldr	r3, [pc, #100]	; (48b0 <NOROM_ChipInfo_GetHwRevision+0x68>)
    484c:	681d      	ldr	r5, [r3, #0]
    484e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    4852:	6818      	ldr	r0, [r3, #0]
    4854:	0f2d      	lsrs	r5, r5, #28
    4856:	b2c4      	uxtb	r4, r0
    4858:	2c80      	cmp	r4, #128	; 0x80
    485a:	bf28      	it	cs
    485c:	2400      	movcs	r4, #0
    485e:	f7ff ffcd 	bl	47fc <NOROM_ChipInfo_GetChipFamily>
    4862:	2804      	cmp	r0, #4
    4864:	d821      	bhi.n	48aa <NOROM_ChipInfo_GetHwRevision+0x62>
    4866:	e8df f000 	tbb	[pc, r0]
    486a:	1b1b1303 	blne	6c947e <__ccfg+0x6a94d6>
    486e:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    4872:	2d07      	cmp	r5, #7
    4874:	d819      	bhi.n	48aa <NOROM_ChipInfo_GetHwRevision+0x62>
    4876:	e8df f005 	tbb	[pc, r5]
    487a:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    487e:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    4882:	2014      	movs	r0, #20
    4884:	e012      	b.n	48ac <NOROM_ChipInfo_GetHwRevision+0x64>
    4886:	2015      	movs	r0, #21
    4888:	e010      	b.n	48ac <NOROM_ChipInfo_GetHwRevision+0x64>
    488a:	f104 0016 	add.w	r0, r4, #22
    488e:	e00a      	b.n	48a6 <NOROM_ChipInfo_GetHwRevision+0x5e>
    4890:	b125      	cbz	r5, 489c <NOROM_ChipInfo_GetHwRevision+0x54>
    4892:	2d02      	cmp	r5, #2
    4894:	d109      	bne.n	48aa <NOROM_ChipInfo_GetHwRevision+0x62>
    4896:	f104 0014 	add.w	r0, r4, #20
    489a:	e004      	b.n	48a6 <NOROM_ChipInfo_GetHwRevision+0x5e>
    489c:	200a      	movs	r0, #10
    489e:	e005      	b.n	48ac <NOROM_ChipInfo_GetHwRevision+0x64>
    48a0:	b91d      	cbnz	r5, 48aa <NOROM_ChipInfo_GetHwRevision+0x62>
    48a2:	f104 000a 	add.w	r0, r4, #10
    48a6:	b2c0      	uxtb	r0, r0
    48a8:	e000      	b.n	48ac <NOROM_ChipInfo_GetHwRevision+0x64>
    48aa:	20ff      	movs	r0, #255	; 0xff
    48ac:	b240      	sxtb	r0, r0
    48ae:	bd38      	pop	{r3, r4, r5, pc}
    48b0:	50001318 	andpl	r1, r0, r8, lsl r3

000048b4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    48b4:	b508      	push	{r3, lr}
    48b6:	f7ff ffa1 	bl	47fc <NOROM_ChipInfo_GetChipFamily>
    48ba:	2801      	cmp	r0, #1
    48bc:	d103      	bne.n	48c6 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    48be:	f7ff ffc3 	bl	4848 <NOROM_ChipInfo_GetHwRevision>
    48c2:	2813      	cmp	r0, #19
    48c4:	dc00      	bgt.n	48c8 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    48c6:	e7fe      	b.n	48c6 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    48c8:	bd08      	pop	{r3, pc}
	...

000048cc <AuxAdiDdiSafeWrite.constprop.1>:
    48cc:	b538      	push	{r3, r4, r5, lr}
    48ce:	4604      	mov	r4, r0
    48d0:	460d      	mov	r5, r1
    48d2:	f7ff f871 	bl	39b8 <NOROM_CPUcpsid>
    48d6:	4b06      	ldr	r3, [pc, #24]	; (48f0 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    48d8:	681a      	ldr	r2, [r3, #0]
    48da:	2a00      	cmp	r2, #0
    48dc:	d0fb      	beq.n	48d6 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    48de:	2201      	movs	r2, #1
    48e0:	6025      	str	r5, [r4, #0]
    48e2:	601a      	str	r2, [r3, #0]
    48e4:	b918      	cbnz	r0, 48ee <AuxAdiDdiSafeWrite.constprop.1+0x22>
    48e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    48ea:	f7ff b869 	b.w	39c0 <NOROM_CPUcpsie>
    48ee:	bd38      	pop	{r3, r4, r5, pc}
    48f0:	400c8000 	andmi	r8, ip, r0

000048f4 <NOROM_DDI32RegWrite>:
    48f4:	4408      	add	r0, r1
    48f6:	4611      	mov	r1, r2
    48f8:	f7ff bfe8 	b.w	48cc <AuxAdiDdiSafeWrite.constprop.1>

000048fc <memcpy>:
    48fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    48fe:	46c6      	mov	lr, r8
    4900:	b500      	push	{lr}
    4902:	2a0f      	cmp	r2, #15
    4904:	d945      	bls.n	4992 <memcpy+0x96>
    4906:	000b      	movs	r3, r1
    4908:	2603      	movs	r6, #3
    490a:	4303      	orrs	r3, r0
    490c:	401e      	ands	r6, r3
    490e:	000c      	movs	r4, r1
    4910:	0003      	movs	r3, r0
    4912:	2e00      	cmp	r6, #0
    4914:	d142      	bne.n	499c <memcpy+0xa0>
    4916:	0015      	movs	r5, r2
    4918:	3d10      	subs	r5, #16
    491a:	092d      	lsrs	r5, r5, #4
    491c:	46ac      	mov	ip, r5
    491e:	012d      	lsls	r5, r5, #4
    4920:	46a8      	mov	r8, r5
    4922:	4480      	add	r8, r0
    4924:	e000      	b.n	4928 <memcpy+0x2c>
    4926:	003b      	movs	r3, r7
    4928:	6867      	ldr	r7, [r4, #4]
    492a:	605f      	str	r7, [r3, #4]
    492c:	68e7      	ldr	r7, [r4, #12]
    492e:	60df      	str	r7, [r3, #12]
    4930:	001f      	movs	r7, r3
    4932:	6825      	ldr	r5, [r4, #0]
    4934:	601d      	str	r5, [r3, #0]
    4936:	68a5      	ldr	r5, [r4, #8]
    4938:	3710      	adds	r7, #16
    493a:	609d      	str	r5, [r3, #8]
    493c:	3410      	adds	r4, #16
    493e:	4543      	cmp	r3, r8
    4940:	d1f1      	bne.n	4926 <memcpy+0x2a>
    4942:	4665      	mov	r5, ip
    4944:	230f      	movs	r3, #15
    4946:	240c      	movs	r4, #12
    4948:	3501      	adds	r5, #1
    494a:	012d      	lsls	r5, r5, #4
    494c:	1949      	adds	r1, r1, r5
    494e:	4013      	ands	r3, r2
    4950:	1945      	adds	r5, r0, r5
    4952:	4214      	tst	r4, r2
    4954:	d025      	beq.n	49a2 <memcpy+0xa6>
    4956:	598c      	ldr	r4, [r1, r6]
    4958:	51ac      	str	r4, [r5, r6]
    495a:	3604      	adds	r6, #4
    495c:	1b9c      	subs	r4, r3, r6
    495e:	2c03      	cmp	r4, #3
    4960:	d8f9      	bhi.n	4956 <memcpy+0x5a>
    4962:	2403      	movs	r4, #3
    4964:	3b04      	subs	r3, #4
    4966:	089b      	lsrs	r3, r3, #2
    4968:	3301      	adds	r3, #1
    496a:	009b      	lsls	r3, r3, #2
    496c:	4022      	ands	r2, r4
    496e:	18ed      	adds	r5, r5, r3
    4970:	18c9      	adds	r1, r1, r3
    4972:	1e56      	subs	r6, r2, #1
    4974:	2a00      	cmp	r2, #0
    4976:	d007      	beq.n	4988 <memcpy+0x8c>
    4978:	2300      	movs	r3, #0
    497a:	e000      	b.n	497e <memcpy+0x82>
    497c:	0023      	movs	r3, r4
    497e:	5cca      	ldrb	r2, [r1, r3]
    4980:	1c5c      	adds	r4, r3, #1
    4982:	54ea      	strb	r2, [r5, r3]
    4984:	429e      	cmp	r6, r3
    4986:	d1f9      	bne.n	497c <memcpy+0x80>
    4988:	bc04      	pop	{r2}
    498a:	4690      	mov	r8, r2
    498c:	bcf0      	pop	{r4, r5, r6, r7}
    498e:	bc02      	pop	{r1}
    4990:	4708      	bx	r1
    4992:	0005      	movs	r5, r0
    4994:	1e56      	subs	r6, r2, #1
    4996:	2a00      	cmp	r2, #0
    4998:	d1ee      	bne.n	4978 <memcpy+0x7c>
    499a:	e7f5      	b.n	4988 <memcpy+0x8c>
    499c:	1e56      	subs	r6, r2, #1
    499e:	0005      	movs	r5, r0
    49a0:	e7ea      	b.n	4978 <memcpy+0x7c>
    49a2:	001a      	movs	r2, r3
    49a4:	e7f6      	b.n	4994 <memcpy+0x98>
    49a6:	46c0      	nop			; (mov r8, r8)

000049a8 <srand>:
    49a8:	2200      	movs	r2, #0
    49aa:	4b03      	ldr	r3, [pc, #12]	; (49b8 <srand+0x10>)
    49ac:	681b      	ldr	r3, [r3, #0]
    49ae:	33a8      	adds	r3, #168	; 0xa8
    49b0:	6018      	str	r0, [r3, #0]
    49b2:	605a      	str	r2, [r3, #4]
    49b4:	4770      	bx	lr
    49b6:	46c0      	nop			; (mov r8, r8)
    49b8:	20000110 	andcs	r0, r0, r0, lsl r1

000049bc <rand>:
    49bc:	4b0a      	ldr	r3, [pc, #40]	; (49e8 <rand+0x2c>)
    49be:	b510      	push	{r4, lr}
    49c0:	681c      	ldr	r4, [r3, #0]
    49c2:	34a8      	adds	r4, #168	; 0xa8
    49c4:	6820      	ldr	r0, [r4, #0]
    49c6:	6861      	ldr	r1, [r4, #4]
    49c8:	4a08      	ldr	r2, [pc, #32]	; (49ec <rand+0x30>)
    49ca:	4b09      	ldr	r3, [pc, #36]	; (49f0 <rand+0x34>)
    49cc:	f000 f812 	bl	49f4 <__aeabi_lmul>
    49d0:	2201      	movs	r2, #1
    49d2:	2300      	movs	r3, #0
    49d4:	1880      	adds	r0, r0, r2
    49d6:	4159      	adcs	r1, r3
    49d8:	6020      	str	r0, [r4, #0]
    49da:	6061      	str	r1, [r4, #4]
    49dc:	0048      	lsls	r0, r1, #1
    49de:	0840      	lsrs	r0, r0, #1
    49e0:	bc10      	pop	{r4}
    49e2:	bc02      	pop	{r1}
    49e4:	4708      	bx	r1
    49e6:	46c0      	nop			; (mov r8, r8)
    49e8:	20000110 	andcs	r0, r0, r0, lsl r1
    49ec:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    49f0:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

000049f4 <__aeabi_lmul>:
    49f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49f6:	000f      	movs	r7, r1
    49f8:	0001      	movs	r1, r0
    49fa:	46c6      	mov	lr, r8
    49fc:	4684      	mov	ip, r0
    49fe:	0415      	lsls	r5, r2, #16
    4a00:	0400      	lsls	r0, r0, #16
    4a02:	0c14      	lsrs	r4, r2, #16
    4a04:	0c00      	lsrs	r0, r0, #16
    4a06:	0c09      	lsrs	r1, r1, #16
    4a08:	0c2d      	lsrs	r5, r5, #16
    4a0a:	002e      	movs	r6, r5
    4a0c:	4346      	muls	r6, r0
    4a0e:	434d      	muls	r5, r1
    4a10:	4360      	muls	r0, r4
    4a12:	4361      	muls	r1, r4
    4a14:	1940      	adds	r0, r0, r5
    4a16:	0c34      	lsrs	r4, r6, #16
    4a18:	1824      	adds	r4, r4, r0
    4a1a:	b500      	push	{lr}
    4a1c:	42a5      	cmp	r5, r4
    4a1e:	d903      	bls.n	4a28 <__aeabi_lmul+0x34>
    4a20:	2080      	movs	r0, #128	; 0x80
    4a22:	0240      	lsls	r0, r0, #9
    4a24:	4680      	mov	r8, r0
    4a26:	4441      	add	r1, r8
    4a28:	0c25      	lsrs	r5, r4, #16
    4a2a:	186d      	adds	r5, r5, r1
    4a2c:	4661      	mov	r1, ip
    4a2e:	4359      	muls	r1, r3
    4a30:	437a      	muls	r2, r7
    4a32:	0430      	lsls	r0, r6, #16
    4a34:	1949      	adds	r1, r1, r5
    4a36:	0424      	lsls	r4, r4, #16
    4a38:	0c00      	lsrs	r0, r0, #16
    4a3a:	1820      	adds	r0, r4, r0
    4a3c:	1889      	adds	r1, r1, r2
    4a3e:	bc04      	pop	{r2}
    4a40:	4690      	mov	r8, r2
    4a42:	bcf0      	pop	{r4, r5, r6, r7}
    4a44:	bc04      	pop	{r2}
    4a46:	4710      	bx	r2
    4a48:	444e4553 	strbmi	r4, [lr], #-1363	; 0xfffffaad
    4a4c:	20474e49 	subcs	r4, r7, r9, asr #28
    4a50:	434f5250 	movtmi	r5, #62032	; 0xf250
    4a54:	52554445 	subspl	r4, r5, #1157627904	; 0x45000000
    4a58:	20490045 	subcs	r0, r9, r5, asr #32
    4a5c:	74206d61 	strtvc	r6, [r0], #-3425	; 0xfffff29f
    4a60:	656d2068 	strbvs	r2, [sp, #-104]!	; 0xffffff98
    4a64:	67617373 			; <UNDEFINED> instruction: 0x67617373
    4a68:	49472065 	stmdbmi	r7, {r0, r2, r5, r6, sp}^
    4a6c:	64252044 	strtvs	r2, [r5], #-68	; 0xffffffbc
    4a70:	73654d00 	cmnvc	r5, #0, 26
    4a74:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4a78:	6e657320 	cdpvs	3, 6, cr7, cr5, cr0, {1}
    4a7c:	000a0d74 	andeq	r0, sl, r4, ror sp
    4a80:	6f727245 	svcvs	0x00727245
    4a84:	6e692072 	mcrvs	0, 3, r2, cr9, cr2, {3}
    4a88:	61697469 	cmnvs	r9, r9, ror #8
    4a8c:	697a696c 	ldmdbvs	sl!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4a90:	6e20676e 	cdpvs	7, 2, cr6, cr0, cr14, {3}
    4a94:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
    4a98:	000a2e2e 	andeq	r2, sl, lr, lsr #28
    4a9c:	50540a0d 	subspl	r0, r4, sp, lsl #20
    4aa0:	25203a45 	strcs	r3, [r0, #-2629]!	; 0xfffff5bb
    4aa4:	0a0d0064 	beq	344c3c <__ccfg+0x324c94>
    4aa8:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
    4aac:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4ab0:	73206f74 			; <UNDEFINED> instruction: 0x73206f74
    4ab4:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
    4ab8:	0a0d0072 	beq	344c88 <__ccfg+0x324ce0>
    4abc:	61657243 	cmnvs	r5, r3, asr #4
    4ac0:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4ac4:	77206365 	strvc	r6, [r0, -r5, ror #6]!
    4ac8:	72622065 	rsbvc	r2, r2, #101	; 0x65
    4acc:	00656b6f 	rsbeq	r6, r5, pc, ror #22
    4ad0:	72430a0d 	subvc	r0, r3, #53248	; 0xd000
    4ad4:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4ad8:	63657220 	cmnvs	r5, #32, 4
    4adc:	626e6920 	rsbvs	r6, lr, #32, 18	; 0x80000
    4ae0:	65777465 	ldrbvs	r7, [r7, #-1125]!	; 0xfffffb9b
    4ae4:	69206e65 	stmdbvs	r0!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}
    4ae8:	53203a66 			; <UNDEFINED> instruction: 0x53203a66
    4aec:	20657a69 	rsbcs	r7, r5, r9, ror #20
    4af0:	7220666f 	eorvc	r6, r0, #116391936	; 0x6f00000
    4af4:	3d206365 	stccc	3, cr6, [r0, #-404]!	; 0xfffffe6c
    4af8:	00642520 	rsbeq	r2, r4, r0, lsr #10
    4afc:	72430a0d 	subvc	r0, r3, #53248	; 0xd000
    4b00:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4b04:	63657220 	cmnvs	r5, #32, 4
    4b08:	63657320 	cmnvs	r5, #32, 6	; 0x80000000
    4b0c:	20646e6f 	rsbcs	r6, r4, pc, ror #28
    4b10:	0d006669 	stceq	6, cr6, [r0, #-420]	; 0xfffffe5c
    4b14:	6572430a 	ldrbvs	r4, [r2, #-778]!	; 0xfffffcf6
    4b18:	20657461 	rsbcs	r7, r5, r1, ror #8
    4b1c:	20636572 	rsbcs	r6, r3, r2, ror r5
    4b20:	72696874 	rsbvc	r6, r9, #116, 16	; 0x740000
    4b24:	66692064 	strbtvs	r2, [r9], -r4, rrx
    4b28:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4b2c:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4b30:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4b34:	68742063 	ldmdavs	r4!, {r0, r1, r5, r6, sp}^
    4b38:	20647269 	rsbcs	r7, r4, r9, ror #4
    4b3c:	65736c65 	ldrbvs	r6, [r3, #-3173]!	; 0xfffff39b
    4b40:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4b44:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4b48:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4b4c:	756f2063 	strbvc	r2, [pc, #-99]!	; 4af1 <__aeabi_lmul+0xfd>
    4b50:	66692074 			; <UNDEFINED> instruction: 0x66692074
    4b54:	430a0d00 	movwmi	r0, #44288	; 0xad00
    4b58:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    4b5c:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4b60:	65732063 	ldrbvs	r2, [r3, #-99]!	; 0xffffff9d
    4b64:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    4b68:	6f742067 	svcvs	0x00742067
    4b6c:	6e657320 	cdpvs	3, 6, cr7, cr5, cr0, {1}
    4b70:	00726564 	rsbseq	r6, r2, r4, ror #10
    4b74:	65440a0d 	strbvs	r0, [r4, #-2573]	; 0xfffff5f3
    4b78:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4b7c:	63657220 	cmnvs	r5, #32, 4
    4b80:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    4b84:	20657465 	rsbcs	r7, r5, r5, ror #8
    4b88:	6f636572 	svcvs	0x00636572
    4b8c:	67206472 			; <UNDEFINED> instruction: 0x67206472
    4b90:	25206469 	strcs	r6, [r0, #-1129]!	; 0xfffffb97
    4b94:	6f6e0a64 	svcvs	0x006e0a64
    4b98:	645f6564 	ldrbvs	r6, [pc], #-1380	; 4ba0 <__aeabi_lmul+0x1ac>
    4b9c:	69672062 	stmdbvs	r7!, {r1, r5, r6, sp}^
    4ba0:	64252064 	strtvs	r2, [r5], #-100	; 0xffffff9c
    4ba4:	6564200a 	strbvs	r2, [r4, #-10]!
    4ba8:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4bac:	63657220 	cmnvs	r5, #32, 4
    4bb0:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4bb4:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4bb8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4bbc:	20646920 	rsbcs	r6, r4, r0, lsr #18
    4bc0:	2c0a6425 	cfstrscs	mvf6, [sl], {37}	; 0x25
    4bc4:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4bcc <__aeabi_lmul+0x1d8>
    4bc8:	62642065 	rsbvs	r2, r4, #101	; 0x65
    4bcc:	20646920 	rsbcs	r6, r4, r0, lsr #18
    4bd0:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4bd4:	6c65440a 	cfstrdvs	mvd4, [r5], #-40	; 0xffffffd8
    4bd8:	20657465 	rsbcs	r7, r5, r5, ror #8
    4bdc:	20636572 	rsbcs	r6, r3, r2, ror r5
    4be0:	73726966 	cmnvc	r2, #1671168	; 0x198000
    4be4:	66692074 			; <UNDEFINED> instruction: 0x66692074
    4be8:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4bec:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4bf0:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4bf4:	65732063 	ldrbvs	r2, [r3, #-99]!	; 0xffffff9d
    4bf8:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    4bfc:	00666920 	rsbeq	r6, r6, r0, lsr #18
    4c00:	65440a0d 	strbvs	r0, [r4, #-2573]	; 0xfffff5f3
    4c04:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4c08:	63657220 	cmnvs	r5, #32, 4
    4c0c:	69687420 	stmdbvs	r8!, {r5, sl, ip, sp, lr}^
    4c10:	69206472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, sp, lr}
    4c14:	0a0d0066 	beq	344db4 <__ccfg+0x324e0c>
    4c18:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    4c1c:	72206574 	eorvc	r6, r0, #116, 10	; 0x1d000000
    4c20:	66206365 	strtvs	r6, [r0], -r5, ror #6
    4c24:	7472756f 	ldrbtvc	r7, [r2], #-1391	; 0xfffffa91
    4c28:	66692068 	strbtvs	r2, [r9], -r8, rrx
    4c2c:	440a0d00 	strmi	r0, [sl], #-3328	; 0xfffff300
    4c30:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4c34:	73612065 	cmnvc	r1, #101	; 0x65
    4c38:	626d6573 	rsbvs	r6, sp, #482344960	; 0x1cc00000
    4c3c:	6c20656c 	cfstr32vs	mvfx6, [r0], #-432	; 0xfffffe50
    4c40:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4c44:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
    4c48:	0d006573 	cfstr32eq	mvfx6, [r0, #-460]	; 0xfffffe34
    4c4c:	7465720a 	strbtvc	r7, [r5], #-522	; 0xfffffdf6
    4c50:	76656972 			; <UNDEFINED> instruction: 0x76656972
    4c54:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4c58:	0a0d0063 	beq	344dec <__ccfg+0x324e44>
    4c5c:	70736552 	rsbsvc	r6, r3, r2, asr r5
    4c60:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
    4c64:	52524500 	subspl	r4, r2, #0, 10
    4c68:	203a524f 	eorscs	r5, sl, pc, asr #4
    4c6c:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    4c70:	64657669 	strbtvs	r7, [r5], #-1641	; 0xfffff997
    4c74:	70797420 	rsbsvc	r7, r9, r0, lsr #8
    4c78:	255b2065 	ldrbcs	r2, [fp, #-101]	; 0xffffff9b
    4c7c:	69205d64 	stmdbvs	r0!, {r2, r5, r6, r8, sl, fp, ip, lr}
    4c80:	6f6e2073 	svcvs	0x006e2073
    4c84:	656c2074 	strbvs	r2, [ip, #-116]!	; 0xffffff8c
    4c88:	206c6167 	rsbcs	r6, ip, r7, ror #2
    4c8c:	6b636170 	blvs	18dd254 <__ccfg+0x18bd2ac>
    4c90:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
    4c94:	00657079 	rsbeq	r7, r5, r9, ror r0
    4c98:	61440a0d 	cmpvs	r4, sp, lsl #20
    4c9c:	53206174 			; <UNDEFINED> instruction: 0x53206174
    4ca0:	64657661 	strbtvs	r7, [r5], #-1633	; 0xfffff99f
    4ca4:	520a0d00 	andpl	r0, sl, #0, 26
    4ca8:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4cac:	65442064 	strbvs	r2, [r4, #-100]	; 0xffffff9c
    4cb0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4cb4:	0a0d0064 	beq	344e4c <__ccfg+0x324ea4>
    4cb8:	6f636552 	svcvs	0x00636552
    4cbc:	52206472 	eorpl	r6, r0, #1912602624	; 0x72000000
    4cc0:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4cc4:	20646576 	rsbcs	r6, r4, r6, ror r5
    4cc8:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 4b38 <__aeabi_lmul+0x144>
    4ccc:	3a642520 	bcc	190e154 <__ccfg+0x18ee1ac>
    4cd0:	00732520 	rsbseq	r2, r3, r0, lsr #10
    4cd4:	68540a0d 	ldmdavs	r4, {r0, r2, r3, r9, fp}^
    4cd8:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4cdc:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4ce0:	6e616320 	cdpvs	3, 6, cr6, cr1, cr0, {1}
    4ce4:	62207427 	eorvs	r7, r0, #654311424	; 0x27000000
    4ce8:	61732065 	cmnvs	r3, r5, rrx
    4cec:	20646576 	rsbcs	r6, r4, r6, ror r5
    4cf0:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4cf4:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4cf8:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4cfc:	6568540a 	strbvs	r5, [r8, #-1034]!	; 0xfffffbf6
    4d00:	63657220 	cmnvs	r5, #32, 4
    4d04:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4d08:	73656f64 	cmnvc	r5, #100, 30	; 0x190
    4d0c:	746f6e20 	strbtvc	r6, [pc], #-3616	; 4d14 <__aeabi_lmul+0x320>
    4d10:	69786520 	ldmdbvs	r8!, {r5, r8, sl, sp, lr}^
    4d14:	20737473 	rsbscs	r7, r3, r3, ror r4
    4d18:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4d1c:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4d20:	0d006425 	cfstrseq	mvf6, [r0, #-148]	; 0xffffff6c
    4d24:	6568540a 	strbvs	r5, [r8, #-1034]!	; 0xfffffbf6
    4d28:	63657220 	cmnvs	r5, #32, 4
    4d2c:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4d30:	73656f64 	cmnvc	r5, #100, 30	; 0x190
    4d34:	746f6e20 	strbtvc	r6, [pc], #-3616	; 4d3c <__aeabi_lmul+0x348>
    4d38:	69786520 	ldmdbvs	r8!, {r5, r8, sl, sp, lr}^
    4d3c:	6f207473 	svcvs	0x00207473
    4d40:	6f6e206e 	svcvs	0x006e206e
    4d44:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
    4d48:	52450064 	subpl	r0, r5, #100	; 0x64
    4d4c:	3a524f52 	bcc	1498a9c <__ccfg+0x1478af4>
    4d50:	6d6f7320 	stclvs	3, cr7, [pc, #-128]!	; 4cd8 <__aeabi_lmul+0x2e4>
    4d54:	6e697465 	cdpvs	4, 6, cr7, cr9, cr5, {3}
    4d58:	65772067 	ldrbvs	r2, [r7, #-103]!	; 0xffffff99
    4d5c:	7720746e 	strvc	r7, [r0, -lr, ror #8]!
    4d60:	676e6f72 			; <UNDEFINED> instruction: 0x676e6f72
    4d64:	65687720 	strbvs	r7, [r8, #-1824]!	; 0xfffff8e0
    4d68:	6572206e 	ldrbvs	r2, [r2, #-110]!	; 0xffffff92
    4d6c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4d70:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4d74:	20656874 	rsbcs	r6, r5, r4, ror r8
    4d78:	6b636170 	blvs	18dd340 <__ccfg+0x18bd398>
    4d7c:	43007465 	movwmi	r7, #1125	; 0x465
    4d80:	6f6e6e61 	svcvs	0x006e6e61
    4d84:	706f2074 	rsbvc	r2, pc, r4, ror r0	; <UNPREDICTABLE>
    4d88:	74206e65 	strtvc	r6, [r0], #-3685	; 0xfffff19b
    4d8c:	69207663 	stmdbvs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}
    4d90:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    4d94:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    4d98:	470a0d00 	strmi	r0, [sl, -r0, lsl #26]
    4d9c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4da0:	20642520 	rsbcs	r2, r4, r0, lsr #10
    4da4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    4da8:	23206563 			; <UNDEFINED> instruction: 0x23206563
    4dac:	28206425 	stmdacs	r0!, {r0, r2, r5, sl, sp, lr}
    4db0:	252f6425 	strcs	r6, [pc, #-1061]!	; 4993 <memcpy+0x97>
    4db4:	65722064 	ldrbvs	r2, [r2, #-100]!	; 0xffffff9c
    4db8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4dbc:	0a0d2973 	beq	34f390 <__ccfg+0x32f3e8>
    4dc0:	72294728 	eorvc	r4, r9, #40, 14	; 0xa00000
    4dc4:	2070756f 	rsbscs	r7, r0, pc, ror #10
    4dc8:	0a0d4449 	beq	355ef4 <__ccfg+0x335f4c>
    4dcc:	65294e28 	strvs	r4, [r9, #-3624]!	; 0xfffff1d8
    4dd0:	65642077 	strbvs	r2, [r4, #-119]!	; 0xffffff89
    4dd4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    4dd8:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    4ddc:	2946280a 	stmdbcs	r6, {r1, r3, fp, sp}^
    4de0:	20646e69 	rsbcs	r6, r4, r9, ror #28
    4de4:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4de8:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4dec:	280a0d73 	stmdacs	sl, {r0, r1, r4, r5, r6, r8, sl, fp}
    4df0:	65722943 	ldrbvs	r2, [r2, #-2371]!	; 0xfffff6bd
    4df4:	20657461 	rsbcs	r7, r5, r1, ror #8
    4df8:	6f636572 	svcvs	0x00636572
    4dfc:	6f206472 	svcvs	0x00206472
    4e00:	656e206e 	strbvs	r2, [lr, #-110]!	; 0xffffff92
    4e04:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    4e08:	0a0d726f 	beq	3617cc <__ccfg+0x341824>
    4e0c:	65294428 	strvs	r4, [r9, #-1064]!	; 0xfffffbd8
    4e10:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    4e14:	63657220 	cmnvs	r5, #32, 4
    4e18:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4e1c:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4e20:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4e24:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    4e28:	2952280a 	ldmdbcs	r2, {r1, r3, fp, sp}^
    4e2c:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4e30:	20657665 	rsbcs	r7, r5, r5, ror #12
    4e34:	6f636572 	svcvs	0x00636572
    4e38:	66206472 			; <UNDEFINED> instruction: 0x66206472
    4e3c:	206d6f72 	rsbcs	r6, sp, r2, ror pc
    4e40:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4e44:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4e48:	53280a0d 			; <UNDEFINED> instruction: 0x53280a0d
    4e4c:	776f6829 	strbvc	r6, [pc, -r9, lsr #16]!
    4e50:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    4e54:	72206c61 	eorvc	r6, r0, #24832	; 0x6100
    4e58:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4e5c:	0a0d7364 	beq	361bf4 <__ccfg+0x341c4c>
    4e60:	29652852 	stmdbcs	r5!, {r1, r4, r6, fp, sp}^
    4e64:	20746573 	rsbscs	r6, r4, r3, ror r5
    4e68:	61636f6c 	cmnvs	r3, ip, ror #30
    4e6c:	7473206c 	ldrbtvc	r2, [r3], #-108	; 0xffffff94
    4e70:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4e74:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
    4e78:	6c65530a 	stclvs	3, cr5, [r5], #-40	; 0xffffffd8
    4e7c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4e80:	203a6e6f 	eorscs	r6, sl, pc, ror #28
    4e84:	00632500 	rsbeq	r2, r3, r0, lsl #10
    4e88:	61656c50 	cmnvs	r5, r0, asr ip
    4e8c:	70206573 	eorvc	r6, r0, r3, ror r5
    4e90:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4e94:	61206564 			; <UNDEFINED> instruction: 0x61206564
    4e98:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
    4e9c:	6f726720 	svcvs	0x00726720
    4ea0:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    4ea4:	203a2344 	eorscs	r2, sl, r4, asr #6
    4ea8:	00752500 	rsbseq	r2, r5, r0, lsl #10
    4eac:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    4eb0:	20676e69 	rsbcs	r6, r7, r9, ror #28
    4eb4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4eb8:	6f726720 	svcvs	0x00726720
    4ebc:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    4ec0:	0a0d0044 	beq	344fd8 <__ccfg+0x325030>
    4ec4:	61656c50 	cmnvs	r5, r0, asr ip
    4ec8:	70206573 	eorvc	r6, r0, r3, ror r5
    4ecc:	69766f72 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    4ed0:	61206564 			; <UNDEFINED> instruction: 0x61206564
    4ed4:	77656e20 	strbvc	r6, [r5, -r0, lsr #28]!
    4ed8:	646f6e20 	strbtvs	r6, [pc], #-3616	; 4ee0 <__aeabi_lmul+0x4ec>
    4edc:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    4ee0:	31282023 			; <UNDEFINED> instruction: 0x31282023
    4ee4:	2035322d 	eorscs	r3, r5, sp, lsr #4
    4ee8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4eec:	76697375 			; <UNDEFINED> instruction: 0x76697375
    4ef0:	203a2965 	eorscs	r2, sl, r5, ror #18
    4ef4:	74754f00 	ldrbtvc	r4, [r5], #-3840	; 0xfffff100
    4ef8:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    4efc:	676e6152 			; <UNDEFINED> instruction: 0x676e6152
    4f00:	44490065 	strbmi	r0, [r9], #-101	; 0xffffff9b
    4f04:	20736920 	rsbscs	r6, r3, r0, lsr #18
    4f08:	65726c61 	ldrbvs	r6, [r2, #-3169]!	; 0xfffff39f
    4f0c:	20796461 	rsbscs	r6, r9, r1, ror #8
    4f10:	75206e69 	strvc	r6, [r0, #-3689]!	; 0xfffff197
    4f14:	0d006573 	cfstr32eq	mvfx6, [r0, #-460]	; 0xfffffe34
    4f18:	2344490a 	movtcs	r4, #18698	; 0x490a
    4f1c:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
    4f20:	7369202c 	cmnvc	r9, #44	; 0x2c
    4f24:	206e6120 	rsbcs	r6, lr, r0, lsr #2
    4f28:	61766e69 	cmnvs	r6, r9, ror #28
    4f2c:	2064696c 	rsbcs	r6, r4, ip, ror #18
    4f30:	696f6863 	stmdbvs	pc!, {r0, r1, r5, r6, fp, sp, lr}^	; <UNPREDICTABLE>
    4f34:	202e6563 	eorcs	r6, lr, r3, ror #10
    4f38:	73616552 	cmnvc	r1, #343932928	; 0x14800000
    4f3c:	203a6e6f 	eorscs	r6, sl, pc, ror #28
    4f40:	002e7325 	eoreq	r7, lr, r5, lsr #6
    4f44:	6f727245 	svcvs	0x00727245
    4f48:	6c432072 	mcrrvs	0, 7, r2, r3, cr2
    4f4c:	69726165 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4f50:	4e20676e 	cdpmi	7, 2, cr6, cr0, cr14, {3}
    4f54:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4f58:	61727241 	cmnvs	r2, r1, asr #4
    4f5c:	0a0d0079 	beq	345148 <__ccfg+0x3251a0>
    4f60:	6769654e 	strbvs	r6, [r9, -lr, asr #10]!
    4f64:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4f68:	00203a73 	eoreq	r3, r0, r3, ror sl
    4f6c:	202c7525 	eorcs	r7, ip, r5, lsr #10
    4f70:	656c5000 	strbvs	r5, [ip, #-0]!
    4f74:	20657361 	rsbcs	r7, r5, r1, ror #6
    4f78:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
    4f7c:	20656469 	rsbcs	r6, r5, r9, ror #8
    4f80:	6f6e2061 	svcvs	0x006e2061
    4f84:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    4f88:	30282044 	eorcc	r2, r8, r4, asr #32
    4f8c:	2935322d 	ldmdbcs	r5!, {r0, r2, r3, r5, r9, ip, sp}
    4f90:	4500203a 	strmi	r2, [r0, #-58]	; 0xffffffc6
    4f94:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    4f98:	6d69203a 	stclvs	0, cr2, [r9, #-232]!	; 0xffffff18
    4f9c:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    4fa0:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
    4fa4:	6c500044 	mrrcvs	0, 4, r0, r0, cr4	; <UNPREDICTABLE>
    4fa8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    4fac:	6f727020 	svcvs	0x00727020
    4fb0:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
    4fb4:	72206120 	eorvc	r6, r0, #32, 2
    4fb8:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4fbc:	6c282064 	stcvs	0, cr2, [r8], #-400	; 0xfffffe70
    4fc0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    4fc4:	3d3c2068 	ldccc	0, cr2, [ip, #-416]!	; 0xfffffe60
    4fc8:	29303220 	ldmdbcs	r0!, {r5, r9, ip, sp}
    4fcc:	4500203a 	strmi	r2, [r0, #-58]	; 0xffffffc6
    4fd0:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    4fd4:	6d69203a 	stclvs	0, cr2, [r9, #-232]!	; 0xffffff18
    4fd8:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    4fdc:	6e207265 	cdpvs	2, 2, cr7, cr0, cr5, {3}
    4fe0:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4fe4:	50004449 	andpl	r4, r0, r9, asr #8
    4fe8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4fec:	72702065 	rsbsvc	r2, r0, #101	; 0x65
    4ff0:	6469766f 	strbtvs	r7, [r9], #-1647	; 0xfffff991
    4ff4:	68742065 	ldmdavs	r4!, {r0, r2, r5, r6, sp}^
    4ff8:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4ffc:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    5000:	646e6920 	strbtvs	r6, [lr], #-2336	; 0xfffff6e0
    5004:	28207865 	stmdacs	r0!, {r0, r2, r5, r6, fp, ip, sp, lr}
    5008:	30342d30 	eorscc	r2, r4, r0, lsr sp
    500c:	00203a29 	eoreq	r3, r0, r9, lsr #20
    5010:	6f727245 	svcvs	0x00727245
    5014:	69203a72 	stmdbvs	r0!, {r1, r4, r5, r6, r9, fp, ip, sp}
    5018:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
    501c:	69206469 	stmdbvs	r0!, {r0, r3, r5, r6, sl, sp, lr}
    5020:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    5024:	720a0d00 	andvc	r0, sl, #0, 26
    5028:	49207465 	stmdbmi	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
    502c:	25203a44 	strcs	r3, [r0, #-2628]!	; 0xfffff5bc
    5030:	0a0d0064 	beq	3451c8 <__ccfg+0x325220>
    5034:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    5038:	69540978 	ldmdbvs	r4, {r3, r4, r5, r6, r8, fp}^
    503c:	5320656d 			; <UNDEFINED> instruction: 0x5320656d
    5040:	706d6174 	rsbvc	r6, sp, r4, ror r1
    5044:	774f0909 	strbvc	r0, [pc, -r9, lsl #18]
    5048:	2072656e 	rsbscs	r6, r2, lr, ror #10
    504c:	52094449 	andpl	r4, r9, #1224736768	; 0x49000000
    5050:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    5054:	61442064 	cmpvs	r4, r4, rrx
    5058:	0d006174 	stfeqs	f6, [r0, #-464]	; 0xfffffe30
    505c:	0964250a 	stmdbeq	r4!, {r1, r3, r8, sl, sp}^
    5060:	09097525 	stmdbeq	r9, {r0, r2, r5, r8, sl, ip, sp, lr}
    5064:	09752509 	ldmdbeq	r5!, {r0, r3, r8, sl, sp}^
    5068:	0d007325 	stceq	3, cr7, [r0, #-148]	; 0xffffff6c
    506c:	6961460a 	stmdbvs	r1!, {r1, r3, r9, sl, lr}^
    5070:	2064656c 	rsbcs	r6, r4, ip, ror #10
    5074:	72206f74 	eorvc	r6, r0, #116, 30	; 0x1d0
    5078:	68636165 	stmdavs	r3!, {r0, r2, r5, r6, r8, sp, lr}^
    507c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
    5080:	73656420 	cmnvc	r5, #32, 8	; 0x20000000
    5084:	616e6974 	smcvs	59028	; 0xe694
    5088:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    508c:	450a0d00 	strmi	r0, [sl, #-3328]	; 0xfffff300
    5090:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    5094:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
    5098:	53595300 	cmppl	r9, #0, 6
    509c:	3a525245 	bcc	14999b8 <__ccfg+0x1479a10>
    50a0:	2c782520 	cfldr64cs	mvdx2, [r8], #-128	; 0xffffff80
    50a4:	00732520 	rsbseq	r2, r3, r0, lsr #10
    50a8:	00726175 	rsbseq	r6, r2, r5, ror r1
    50ac:	00696175 	rsbeq	r6, r9, r5, ror r1
    50b0:	4f636950 	svcmi	0x00636950
    50b4:	35762053 	ldrbcc	r2, [r6, #-83]!	; 0xffffffad
    50b8:	502f342e 	eorpl	r3, pc, lr, lsr #8
    50bc:	30383147 	eorscc	r3, r8, r7, asr #2
    50c0:	41323232 	teqmi	r2, r2, lsr r2
    50c4:	3143432d 	cmpcc	r3, sp, lsr #6
    50c8:	5f303533 	svcpl	0x00303533
    50cc:	4e55414c 	rdfmism	f4, f5, #4.0
    50d0:	4c584843 	mrrcmi	8, 4, r4, r8, cr3
    50d4:	4328202c 			; <UNDEFINED> instruction: 0x4328202c
    50d8:	6c4f2029 	mcrrvs	0, 2, r2, pc, cr9
    50dc:	656e6f73 	strbvs	r6, [lr, #-3955]!	; 0xfffff08d
    50e0:	6f432074 	svcvs	0x00432074
    50e4:	6e756d6d 	cdpvs	13, 7, cr6, cr5, cr13, {3}
    50e8:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    50ec:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    50f0:	3032202c 	eorscc	r2, r2, ip, lsr #32
    50f4:	322d3230 	eorcc	r3, sp, #48, 4
    50f8:	00383130 	eorseq	r3, r8, r0, lsr r1
    50fc:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
    5100:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    5104:	4d415220 	sfmmi	f5, 2, [r1, #-128]	; 0xffffff80
    5108:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    510c:	74796220 	ldrbtvc	r6, [r9], #-544	; 0xfffffde0
    5110:	73007365 	movwvc	r7, #869	; 0x365
    5114:	69500074 	ldmdbvs	r0, {r2, r4, r5, r6}^
    5118:	20534f63 	subscs	r4, r3, r3, ror #30
    511c:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
    5120:	00006465 	andeq	r6, r0, r5, ror #8

00005124 <port_confs>:
    5124:	00306080 	eorseq	r6, r0, r0, lsl #1
    5128:	00386080 	eorseq	r6, r8, r0, lsl #1
    512c:	00186010 	andseq	r6, r8, r0, lsl r0
    5130:	2010400f 	andscs	r4, r0, pc
    5134:	30694000 	rsbcc	r4, r9, r0
    5138:	30714000 	rsbscc	r4, r1, r0
    513c:	00b86008 	adcseq	r6, r8, r8
    5140:	60c94000 	sbcvs	r4, r9, r0
    5144:	60d14000 	sbcsvs	r4, r1, r0
    5148:	60d94000 	sbcsvs	r4, r9, r0
    514c:	60e14000 	rscvs	r4, r1, r0
    5150:	00096380 	andeq	r6, r9, r0, lsl #7
    5154:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    5158:	20402000 	subcs	r2, r0, r0
    515c:	00486080 	subeq	r6, r8, r0, lsl #1
    5160:	00506080 	subseq	r6, r0, r0, lsl #1
    5164:	00a06000 	adceq	r6, r0, r0
    5168:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    516c:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    5170:	73006120 	movwvc	r6, #288	; 0x120
    5174:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    5178:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    517c:	616d006f 	cmnvs	sp, pc, rrx
    5180:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    5184:	00676c61 	rsbeq	r6, r7, r1, ror #24
    5188:	0069706b 	rsbeq	r7, r9, fp, rrx
    518c:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

00005191 <__pi_hex_enc_table>:
    5191:	33323130 	teqcc	r2, #48, 2
    5195:	37363534 			; <UNDEFINED> instruction: 0x37363534
    5199:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    519d:	46454443 	strbmi	r4, [r5], -r3, asr #8
    51a1:	30766374 	rsbscc	r6, r6, r4, ror r3
    51a5:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    51a9:	736f7073 	cmnvc	pc, #115	; 0x73
    51ad:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    51b1:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    51b5:	736f7073 	cmnvc	pc, #115	; 0x73
    51b9:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    51bd:	63740079 	cmnvs	r4, #121	; 0x79
    51c1:	00323076 	eorseq	r3, r2, r6, ror r0
    51c5:	30766374 	rsbscc	r6, r6, r4, ror r3
    51c9:	63740033 	cmnvs	r4, #51	; 0x33
    51cd:	00343076 	eorseq	r3, r4, r6, ror r0
    51d1:	30766374 	rsbscc	r6, r6, r4, ror r3
    51d5:	63740035 	cmnvs	r4, #53	; 0x35
    51d9:	00363076 	eorseq	r3, r6, r6, ror r0
    51dd:	31766374 	cmncc	r6, r4, ror r3
    51e1:	63740030 	cmnvs	r4, #48	; 0x30
    51e5:	00313176 	eorseq	r3, r1, r6, ror r1
    51e9:	31766374 	cmncc	r6, r4, ror r3
    51ed:	63740036 	cmnvs	r4, #54	; 0x36
    51f1:	00373176 	eorseq	r3, r7, r6, ror r1
    51f5:	31766374 	cmncc	r6, r4, ror r3
    51f9:	63740038 	cmnvs	r4, #56	; 0x38
    51fd:	00333276 	eorseq	r3, r3, r6, ror r2
    5201:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    5205:	63740032 	cmnvs	r4, #50	; 0x32
    5209:	00363276 	eorseq	r3, r6, r6, ror r2
    520d:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    5211:	63740037 	cmnvs	r4, #55	; 0x37
    5215:	00383276 	eorseq	r3, r8, r6, ror r2
    5219:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    521d:	63740039 	cmnvs	r4, #57	; 0x39
    5221:	00303376 	eorseq	r3, r0, r6, ror r3
    5225:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    5229:	63740031 	cmnvs	r4, #49	; 0x31
    522d:	00323376 	eorseq	r3, r2, r6, ror r3
    5231:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    5235:	63740033 	cmnvs	r4, #51	; 0x33
    5239:	00343376 	eorseq	r3, r4, r6, ror r3

0000523d <__input_pins>:
    523d:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

00005242 <__button_list>:
    5242:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    5246:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    524a:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    524e:	00317472 	eorseq	r7, r1, r2, ror r4
    5252:	20505548 	subscs	r5, r0, r8, asr #10
    5256:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    525a:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    525e:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    5262:	30636920 	rsbcc	r6, r3, r0, lsr #18
    5266:	50554800 	subspl	r4, r5, r0, lsl #16
    526a:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    526e:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    5272:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    5276:	32747200 	rsbscc	r7, r4, #0, 4
    527a:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    527e:	00585220 	subseq	r5, r8, r0, lsr #4
    5282:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    5286:	00797020 	rsbseq	r7, r9, r0, lsr #32
    528a:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    528e:	31636300 	cmncc	r3, r0, lsl #6
    5292:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    5296:	31434300 	mrscc	r4, (UNDEF: 115)
    529a:	3a303533 	bcc	c1276e <__ccfg+0xbf27c6>
    529e:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    52a2:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    52a6:	00642520 	rsbeq	r2, r4, r0, lsr #10

000052aa <patable>:
    52aa:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    52ae:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    52b2:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    52b6:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

000052bc <patchGenfskRfe>:
    52bc:	000061a3 	andeq	r6, r0, r3, lsr #3
    52c0:	1307147f 	movwne	r1, #29823	; 0x747f
    52c4:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    52c8:	3f131f2e 	svccc	0x00131f2e
    52cc:	003f0ab0 	ldrhteq	r0, [pc], -r0
    52d0:	0000ff07 	andeq	pc, r0, r7, lsl #30
    52d4:	40004030 	andmi	r4, r0, r0, lsr r0
    52d8:	40034001 	andmi	r4, r3, r1
    52dc:	400f4007 	andmi	r4, pc, r7
    52e0:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    52e4:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    52e8:	4fcf47cf 	svcmi	0x00cf47cf
    52ec:	2fcf3fcf 	svccs	0x00cf3fcf
    52f0:	0fcf1fcf 	svceq	0x00cf1fcf
    52f4:	00000000 	andeq	r0, r0, r0
    52f8:	0008000f 	andeq	r0, r8, pc
    52fc:	003f0000 	eorseq	r0, pc, r0
    5300:	00400000 	subeq	r0, r0, r0
    5304:	0000003f 	andeq	r0, r0, pc, lsr r0
    5308:	00680004 	rsbeq	r0, r8, r4
    530c:	00dc000e 	sbcseq	r0, ip, lr
    5310:	00430006 	subeq	r0, r3, r6
    5314:	0005001a 	andeq	r0, r5, sl, lsl r0
    5318:	00000000 	andeq	r0, r0, r0
    531c:	00000002 	andeq	r0, r0, r2
    5320:	0000003f 	andeq	r0, r0, pc, lsr r0
    5324:	00040000 	andeq	r0, r4, r0
    5328:	000000c0 	andeq	r0, r0, r0, asr #1
    532c:	00c00004 	sbceq	r0, r0, r4
    5330:	00070000 	andeq	r0, r7, r0
    5334:	9100c050 	qaddls	ip, r0, r0
    5338:	c0707000 	rsbsgt	r7, r0, r0
    533c:	70009100 	andvc	r9, r0, r0, lsl #2
    5340:	00213182 	eoreq	r3, r1, r2, lsl #3
    5344:	b1109131 	tstlt	r0, r1, lsr r1
    5348:	81017000 	mrshi	r7, (UNDEF: 1)
    534c:	a100b101 	tstge	r0, r1, lsl #2
    5350:	91323182 	teqls	r2, r2, lsl #3
    5354:	9101b110 	tstls	r1, r0, lsl r1
    5358:	81411011 	cmphi	r1, r1, lsl r0
    535c:	404f2241 	submi	r2, pc, r1, asr #4
    5360:	700006f1 	strdvc	r0, [r0], -r1
    5364:	9101c051 	qaddls	ip, r1, r1
    5368:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    536c:	d0083183 	andle	r3, r8, r3, lsl #3
    5370:	6f413118 	svcvs	0x00413118
    5374:	91310031 	teqls	r1, r1, lsr r0
    5378:	1483b110 	strne	fp, [r3], #272	; 0x110
    537c:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    5380:	10257000 	eorne	r7, r5, r0
    5384:	9100c050 	qaddls	ip, r0, r0
    5388:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    538c:	6f031420 	svcvs	0x00031420
    5390:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    5394:	3182c022 	orrcc	ip, r2, r2, lsr #32
    5398:	91310021 	teqls	r1, r1, lsr #32
    539c:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    53a0:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    53a4:	3182c082 	orrcc	ip, r2, r2, lsl #1
    53a8:	91310021 	teqls	r1, r1, lsr #32
    53ac:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    53b0:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    53b4:	00213182 	eoreq	r3, r1, r2, lsl #3
    53b8:	b1109131 	tstlt	r0, r1, lsr r1
    53bc:	31151050 	tstcc	r5, r0, asr r0
    53c0:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    53c4:	643f7000 	ldrtvs	r7, [pc], #-0	; 53cc <patchGenfskRfe+0x110>
    53c8:	1031c052 	eorsne	ip, r1, r2, asr r0
    53cc:	31610631 	cmncc	r1, r1, lsr r6
    53d0:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    53d4:	1031c112 	eorsne	ip, r1, r2, lsl r1
    53d8:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    53dc:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    53e0:	70006442 	andvc	r6, r0, r2, asr #8
    53e4:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    53e8:	8220c088 	eorhi	ip, r0, #136	; 0x88
    53ec:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    53f0:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    53f4:	3001c041 	andcc	ip, r1, r1, asr #32
    53f8:	1a181418 	bne	60a460 <__ccfg+0x5ea4b8>
    53fc:	8230c089 	eorshi	ip, r0, #137	; 0x89
    5400:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    5404:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    5408:	3001c041 	andcc	ip, r1, r1, asr #32
    540c:	1a191419 	bne	64a478 <__ccfg+0x62a4d0>
    5410:	9136643c 	teqls	r6, ip, lsr r4
    5414:	9134b110 	teqls	r4, r0, lsl r1
    5418:	b054b110 	subslt	fp, r4, r0, lsl r1
    541c:	a0547100 	subsge	r7, r4, r0, lsl #2
    5420:	80f0b064 	rscshi	fp, r0, r4, rrx
    5424:	40af2200 	adcmi	r2, pc, r0, lsl #4
    5428:	90b01240 	adcsls	r1, r0, r0, asr #4
    542c:	8253b032 	subshi	fp, r3, #50	; 0x32
    5430:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    5434:	643f6485 	ldrtvs	r6, [pc], #-1157	; 543c <patchGenfskRfe+0x180>
    5438:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    543c:	c1706442 	cmngt	r0, r2, asr #8
    5440:	c11168c2 	tstgt	r1, r2, asr #17
    5444:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    5448:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    544c:	9100c050 	qaddls	ip, r0, r0
    5450:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    5454:	16141615 			; <UNDEFINED> instruction: 0x16141615
    5458:	10531042 	subsne	r1, r3, r2, asr #32
    545c:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    5460:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    5464:	31313981 	teqcc	r1, r1, lsl #19
    5468:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    546c:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    5470:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    5474:	10731062 	rsbsne	r1, r3, r2, rrx
    5478:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    547c:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    5480:	101b3981 	andsne	r3, fp, r1, lsl #19
    5484:	c0e26572 	rscgt	r6, r2, r2, ror r5
    5488:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    548c:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    5490:	b0610002 	rsblt	r0, r1, r2
    5494:	91327100 	teqls	r2, r0, lsl #2
    5498:	a051b110 	subsge	fp, r1, r0, lsl r1
    549c:	7227b061 	eorvc	fp, r7, #97	; 0x61
    54a0:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    54a4:	12800000 	addne	r0, r0, #0
    54a8:	b03290b0 	ldrhtlt	r9, [r2], -r0
    54ac:	c0507000 	subsgt	r7, r0, r0
    54b0:	72279100 	eorvc	r9, r7, #0, 2
    54b4:	10629299 	mlsne	r2, r9, r2, r9
    54b8:	c3f01073 	mvnsgt	r1, #115	; 0x73
    54bc:	31218231 			; <UNDEFINED> instruction: 0x31218231
    54c0:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    54c4:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    54c8:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    54cc:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    54d0:	10531042 	subsne	r1, r3, r2, asr #32
    54d4:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    54d8:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    54dc:	31313981 	teqcc	r1, r1, lsl #19
    54e0:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    54e4:	b061a051 	rsblt	sl, r1, r1, asr r0
    54e8:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    54ec:	643f6918 	ldrtvs	r6, [pc], #-2328	; 54f4 <patchGenfskRfe+0x238>
    54f0:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    54f4:	c1016442 	tstgt	r1, r2, asr #8
    54f8:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    54fc:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    5500:	b1109135 	tstlt	r0, r5, lsr r1
    5504:	64858253 	strvs	r8, [r5], #595	; 0x253
    5508:	90b012c0 	adcsls	r1, r0, r0, asr #5
    550c:	7000b032 	andvc	fp, r0, r2, lsr r0
    5510:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    5514:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    5518:	c111c122 	tstgt	r1, r2, lsr #2
    551c:	c0026442 	andgt	r6, r2, r2, asr #8
    5520:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5524:	c331c062 	teqgt	r1, #98	; 0x62
    5528:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    552c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5530:	c111c302 	tstgt	r1, r2, lsl #6
    5534:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    5538:	64853953 	strvs	r3, [r5], #2387	; 0x953
    553c:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    5540:	41402211 	cmpmi	r0, r1, lsl r2
    5544:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    5548:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    554c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    5550:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    5554:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    5558:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    555c:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    5560:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    5564:	70006954 	andvc	r6, r0, r4, asr r9
    5568:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    556c:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    5570:	c011c252 	andsgt	ip, r1, r2, asr r2
    5574:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    5578:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    557c:	c101c002 	tstgt	r1, r2
    5580:	c0626442 	rsbgt	r6, r2, r2, asr #8
    5584:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    5588:	c101c122 	tstgt	r1, r2, lsr #2
    558c:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    5590:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    5594:	c101c302 	tstgt	r1, r2, lsl #6
    5598:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    559c:	70006485 	andvc	r6, r0, r5, lsl #9
    55a0:	7100b061 	tstvc	r0, r1, rrx
    55a4:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    55a8:	91334d7a 	teqls	r3, sl, ror sp
    55ac:	7000b110 	andvc	fp, r0, r0, lsl r1
    55b0:	b1109132 	tstlt	r0, r2, lsr r1
    55b4:	70006972 	andvc	r6, r0, r2, ror r9
    55b8:	7100b061 	tstvc	r0, r1, rrx
    55bc:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    55c0:	91324986 	teqls	r2, r6, lsl #19
    55c4:	7000b110 	andvc	fp, r0, r0, lsl r1
    55c8:	b1109133 	tstlt	r0, r3, lsr r1
    55cc:	7000697e 	andvc	r6, r0, lr, ror r9
    55d0:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    55d4:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    55d8:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    55dc:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    55e0:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    55e4:	10541405 	subsne	r1, r4, r5, lsl #8
    55e8:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    55ec:	c0e67000 	rscgt	r7, r6, r0
    55f0:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    55f4:	10671416 	rsbne	r1, r7, r6, lsl r4
    55f8:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    55fc:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    5600:	73067000 	movwvc	r7, #24576	; 0x6000
    5604:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    5608:	b050720e 	subslt	r7, r0, lr, lsl #4
    560c:	80817100 	addhi	r7, r1, r0, lsl #2
    5610:	a050b060 	subsge	fp, r0, r0, rrx
    5614:	22418092 	subcs	r8, r1, #146	; 0x92
    5618:	808045c3 	addhi	r4, r0, r3, asr #11
    561c:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    5620:	11011630 	tstne	r1, r0, lsr r6
    5624:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    5628:	61d761d6 	ldrsbvs	r6, [r7, #22]
    562c:	61d961d8 	ldrsbvs	r6, [r9, #24]
    5630:	61db61da 	ldrsbvs	r6, [fp, #26]
    5634:	61de61dc 	ldrsbvs	r6, [lr, #28]
    5638:	61e261e0 	mvnvs	r6, r0, ror #3
    563c:	633661e4 	teqvs	r6, #228, 2	; 0x39
    5640:	80916339 	addshi	r6, r1, r9, lsr r3
    5644:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    5648:	80823121 	addhi	r3, r2, r1, lsr #2
    564c:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    5650:	11011632 	tstne	r1, r2, lsr r6
    5654:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    5658:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    565c:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    5660:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    5664:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    5668:	61e661e6 	mvnvs	r6, r6, ror #3
    566c:	61e661e6 	mvnvs	r6, r6, ror #3
    5670:	61e661e6 	mvnvs	r6, r6, ror #3
    5674:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    5678:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    567c:	61e6652a 	mvnvs	r6, sl, lsr #10
    5680:	61e66556 	mvnvs	r6, r6, asr r5
    5684:	61e66746 	mvnvs	r6, r6, asr #14
    5688:	90b01210 	adcsls	r1, r0, r0, lsl r2
    568c:	7306720e 	movwvc	r7, #25102	; 0x620e
    5690:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    5694:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    5698:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    569c:	c003c1d4 	ldrdgt	ip, [r3], -r4
    56a0:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    56a4:	91507840 	cmpls	r0, r0, asr #16
    56a8:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    56ac:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    56b0:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    56b4:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    56b8:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    56bc:	91907830 	orrsls	r7, r0, r0, lsr r8
    56c0:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    56c4:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    56c8:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    56cc:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    56d0:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    56d4:	a054a0e2 	subsge	sl, r4, r2, ror #1
    56d8:	225080f0 	subscs	r8, r0, #240	; 0xf0
    56dc:	80404615 	subhi	r4, r0, r5, lsl r6
    56e0:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    56e4:	a040620d 	subge	r6, r0, sp, lsl #4
    56e8:	318d822d 	orrcc	r8, sp, sp, lsr #4
    56ec:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    56f0:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    56f4:	821a1009 	andshi	r1, sl, #9
    56f8:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    56fc:	39808210 	stmibcc	r0, {r4, r9, pc}
    5700:	100e0410 	andne	r0, lr, r0, lsl r4
    5704:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    5708:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    570c:	cfe07229 	svcgt	0x00e07229
    5710:	b013673c 	andslt	r6, r3, ip, lsr r7
    5714:	66c8b003 	strbvs	fp, [r8], r3
    5718:	b050b053 	subslt	fp, r0, r3, asr r0
    571c:	b064b054 	rsblt	fp, r4, r4, asr r0
    5720:	66a5b013 	ssatvs	fp, #6, r3
    5724:	22e08210 	rsccs	r8, r0, #16, 4
    5728:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    572c:	80417100 	subhi	r7, r1, r0, lsl #2
    5730:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    5734:	221080f0 	andscs	r8, r0, #240	; 0xf0
    5738:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    573c:	b0644718 	rsblt	r4, r4, r8, lsl r7
    5740:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    5744:	66ceb063 	strbvs	fp, [lr], r3, rrx
    5748:	22e08210 	rsccs	r8, r0, #16, 4
    574c:	66704638 			; <UNDEFINED> instruction: 0x66704638
    5750:	b0646238 	rsblt	r6, r4, r8, lsr r2
    5754:	318f816f 	orrcc	r8, pc, pc, ror #2
    5758:	dfd03d8f 	svcle	0x00d03d8f
    575c:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    5760:	80417100 	subhi	r7, r1, r0, lsl #2
    5764:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    5768:	80f0b064 	rscshi	fp, r0, r4, rrx
    576c:	42652250 	rsbmi	r2, r5, #80, 4
    5770:	8211b063 	andshi	fp, r1, #99	; 0x63
    5774:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    5778:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    577c:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    5780:	66704652 			; <UNDEFINED> instruction: 0x66704652
    5784:	81616252 	cmnhi	r1, r2, asr r2
    5788:	31818172 	orrcc	r8, r1, r2, ror r1
    578c:	31823d81 	orrcc	r3, r2, r1, lsl #27
    5790:	efc03d82 	svc	0x00c03d82
    5794:	930292f1 	movwls	r9, #8945	; 0x22f1
    5798:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    579c:	91c081b0 	strhls	r8, [r0, #16]
    57a0:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    57a4:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    57a8:	0bf34e7f 	bleq	ffcd91ac <_estack+0xdfcd41ac>
    57ac:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    57b0:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    57b4:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    57b8:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    57bc:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    57c0:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    57c4:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    57c8:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    57cc:	1a1ba290 	bne	6ee214 <__ccfg+0x6ce26c>
    57d0:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    57d4:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    57d8:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    57dc:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    57e0:	4aa21c9b 	bmi	fe88ca54 <_estack+0xde887a54>
    57e4:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    57e8:	821010b2 	andshi	r1, r0, #178	; 0xb2
    57ec:	429d22d0 	addsmi	r2, sp, #208, 4
    57f0:	221080f0 	andscs	r8, r0, #240	; 0xf0
    57f4:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    57f8:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    57fc:	629410ab 	addsvs	r1, r4, #171	; 0xab
    5800:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    5804:	82307000 	eorshi	r7, r0, #0
    5808:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    580c:	7100b063 	tstvc	r0, r3, rrx
    5810:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    5814:	7000b0e0 	andvc	fp, r0, r0, ror #1
    5818:	91c281b2 	strhls	r8, [r2, #18]
    581c:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    5820:	81511812 	cmphi	r1, r2, lsl r8
    5824:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    5828:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    582c:	4abf1c12 	bmi	fefcc87c <_estack+0xdefc787c>
    5830:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    5834:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    5838:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    583c:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    5840:	9162c812 	cmnls	r2, r2, lsl r8
    5844:	b0319172 	eorslt	r9, r1, r2, ror r1
    5848:	7000b0e1 	andvc	fp, r0, r1, ror #1
    584c:	c006c008 	andgt	ip, r6, r8
    5850:	9160c800 	cmnls	r0, r0, lsl #16
    5854:	70009170 	andvc	r9, r0, r0, ror r1
    5858:	81b08201 	lslshi	r8, r1, #4
    585c:	81d091c0 	bicshi	r9, r0, r0, asr #3
    5860:	81511810 	cmphi	r1, r0, lsl r8
    5864:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    5868:	824280e1 	subhi	r8, r2, #225	; 0xe1
    586c:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    5870:	4ae41c20 	bmi	ff90c8f8 <_estack+0xdf9078f8>
    5874:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    5878:	b03246e8 	eorslt	r4, r2, r8, ror #13
    587c:	dfa01005 	svcle	0x00a01005
    5880:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    5884:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    5888:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    588c:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    5890:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    5894:	42f61e01 	rscsmi	r1, r6, #1, 28
    5898:	c0101618 	andsgt	r1, r0, r8, lsl r6
    589c:	1c083010 	stcne	0, cr3, [r8], {16}
    58a0:	10604704 	rsbne	r4, r0, r4, lsl #14
    58a4:	10063c10 	andne	r3, r6, r0, lsl ip
    58a8:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    58ac:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    58b0:	81719166 	cmnhi	r1, r6, ror #2
    58b4:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    58b8:	4b011c16 	blmi	4c918 <__ccfg+0x2c970>
    58bc:	b0319176 	eorslt	r9, r1, r6, ror r1
    58c0:	c008c006 	andgt	ip, r8, r6
    58c4:	81617000 	cmnhi	r1, r0
    58c8:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    58cc:	39808240 	stmibcc	r0, {r6, r9, pc}
    58d0:	1cf11801 	ldclne	8, cr1, [r1], #4
    58d4:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    58d8:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    58dc:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    58e0:	ef90b033 	svc	0x0090b033
    58e4:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    58e8:	7000673c 	andvc	r6, r0, ip, lsr r7
    58ec:	b063a003 	rsblt	sl, r3, r3
    58f0:	b0efb064 	rsclt	fp, pc, r4, rrx
    58f4:	71006556 	tstvc	r0, r6, asr r5
    58f8:	22008040 	andcs	r8, r0, #64	; 0x40
    58fc:	b064472b 	rsblt	r4, r4, fp, lsr #14
    5900:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    5904:	80407100 	subhi	r7, r0, r0, lsl #2
    5908:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    590c:	b003b064 	andlt	fp, r3, r4, rrx
    5910:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    5914:	31828162 	orrcc	r8, r2, r2, ror #2
    5918:	ef803d82 	svc	0x00803d82
    591c:	930292f1 	movwls	r9, #8945	; 0x22f1
    5920:	a003673c 	andge	r6, r3, ip, lsr r7
    5924:	61e66556 	mvnvs	r6, r6, asr r5
    5928:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    592c:	b05061e6 	subslt	r6, r0, r6, ror #3
    5930:	61e67100 	mvnvs	r7, r0, lsl #2
    5934:	82d092e0 	sbcshi	r9, r0, #224, 4
    5938:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    593c:	7000b2c0 	andvc	fp, r0, r0, asr #5
    5940:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    5944:	b0304359 	eorslt	r4, r0, r9, asr r3
    5948:	3162c102 	cmncc	r2, r2, lsl #2
    594c:	80a0c001 	adchi	ip, r0, r1
    5950:	43521e00 	cmpmi	r2, #0, 28
    5954:	435322f0 	cmpmi	r3, #240, 4
    5958:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    595c:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    5960:	1a101020 	bne	4099e8 <__ccfg+0x3e9a40>
    5964:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    5968:	16121611 			; <UNDEFINED> instruction: 0x16121611
    596c:	70006b54 	andvc	r6, r0, r4, asr fp

00005970 <patchImageGenfsk>:
    5970:	210004ad 	smlatbcs	r0, sp, r4, r0
    5974:	21000449 	tstcs	r0, r9, asr #8
    5978:	2100047d 	tstcs	r0, sp, ror r4
    597c:	21000481 	smlabbcs	r0, r1, r4, r0
    5980:	21000511 	tstcs	r0, r1, lsl r5
    5984:	21000591 			; <UNDEFINED> instruction: 0x21000591
    5988:	21000641 	tstcs	r0, r1, asr #12
    598c:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    5990:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    5994:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    5998:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    599c:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    59a0:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    59a4:	d00b079b 	mulle	fp, fp, r7
    59a8:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    59ac:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    59b0:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    59b4:	240f490e 	strcs	r4, [pc], #-2318	; 59bc <patchImageGenfsk+0x4c>
    59b8:	43200224 			; <UNDEFINED> instruction: 0x43200224
    59bc:	82c83160 	sbchi	r3, r8, #96, 2
    59c0:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    59c4:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    59c8:	2100026b 	tstcs	r0, fp, ror #4
    59cc:	00004ce5 	andeq	r4, r0, r5, ror #25
    59d0:	e0014809 	and	r4, r1, r9, lsl #16
    59d4:	0c004808 	stceq	8, cr4, [r0], {8}
    59d8:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    59dc:	2aff7822 	bcs	fffe3a6c <_estack+0xdffdea6c>
    59e0:	7acad101 	bvc	ff2b9dec <_estack+0xdf2b4dec>
    59e4:	31607022 	cmncc	r0, r2, lsr #32
    59e8:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    59ec:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    59f0:	40086200 	andmi	r6, r8, r0, lsl #4
    59f4:	210006a4 	smlatbcs	r0, r4, r6, r0
    59f8:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    59fc:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    5a00:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    5a04:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    5a08:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    5a0c:	4a11d006 	bmi	479a2c <__ccfg+0x459a84>
    5a10:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    5a14:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    5a18:	e000480f 	and	r4, r0, pc, lsl #16
    5a1c:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    5a20:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    5a24:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    5a28:	dcf92c00 	ldclle	12, cr2, [r9]
    5a2c:	200140e3 	andcs	r4, r1, r3, ror #1
    5a30:	18180340 	ldmdane	r8, {r6, r8, r9}
    5a34:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    5a38:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    5a3c:	31802300 	orrcc	r2, r0, r0, lsl #6
    5a40:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    5a44:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    5a48:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    5a4c:	316c4b04 	cmncc	ip, r4, lsl #22
    5a50:	0000e7f6 	strdeq	lr, [r0], -r6
    5a54:	00005c83 	andeq	r5, r0, r3, lsl #25
    5a58:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    5a5c:	230d8300 	movwcs	r8, #54016	; 0xd300
    5a60:	21000674 	tstcs	r0, r4, ror r6
    5a64:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    5a68:	6b714605 	blvs	1c57284 <__ccfg+0x1c372dc>
    5a6c:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    5a70:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    5a74:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    5a78:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    5a7c:	7b00d00f 	blvc	39ac0 <__ccfg+0x19b18>
    5a80:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    5a84:	4f152001 	svcmi	0x00152001
    5a88:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    5a8c:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    5a90:	09c18800 	stmibeq	r1, {fp, pc}^
    5a94:	d00407c9 	andle	r0, r4, r9, asr #15
    5a98:	7ac0e016 	bvc	ff03daf8 <_estack+0xdf038af8>
    5a9c:	7b40e7f0 	blvc	103fa64 <__ccfg+0x101fabc>
    5aa0:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    5aa4:	61cc6374 	bicvs	r6, ip, r4, ror r3
    5aa8:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    5aac:	2001d00c 	andcs	sp, r1, ip
    5ab0:	6b310380 	blvs	c468b8 <__ccfg+0xc26910>
    5ab4:	d0012d00 	andle	r2, r1, r0, lsl #26
    5ab8:	e0004301 	and	r4, r0, r1, lsl #6
    5abc:	46084381 	strmi	r4, [r8], -r1, lsl #7
    5ac0:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    5ac4:	63483940 	movtvs	r3, #35136	; 0x8940
    5ac8:	47b82000 	ldrmi	r2, [r8, r0]!
    5acc:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    5ad0:	21000280 	smlabbcs	r0, r0, r2, r0
    5ad4:	21000088 	smlabbcs	r0, r8, r0, r0
    5ad8:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    5adc:	00003f7b 	andeq	r3, r0, fp, ror pc
    5ae0:	40044040 	andmi	r4, r4, r0, asr #32
    5ae4:	4a22b510 	bmi	8b2f2c <__ccfg+0x892f84>
    5ae8:	61512100 	cmpvs	r1, r0, lsl #2
    5aec:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    5af0:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    5af4:	4b204921 	blmi	817f80 <__ccfg+0x7f7fd8>
    5af8:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    5afc:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    5b00:	e0004313 	and	r4, r0, r3, lsl r3
    5b04:	634b4393 	movtvs	r4, #45971	; 0xb393
    5b08:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    5b0c:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    5b10:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    5b14:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    5b18:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    5b1c:	09c08800 	stmibeq	r0, {fp, pc}^
    5b20:	d12207c0 	smlawtle	r2, r0, r7, r0
    5b24:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    5b28:	d11e2800 	tstle	lr, r0, lsl #16
    5b2c:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    5b30:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    5b34:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    5b38:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    5b3c:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    5b40:	2008d213 	andcs	sp, r8, r3, lsl r2
    5b44:	6a686160 	bvs	1a1e0cc <__ccfg+0x19fe124>
    5b48:	01400940 	cmpeq	r0, r0, asr #18
    5b4c:	4a0e6020 	bmi	39dbd4 <__ccfg+0x37dc2c>
    5b50:	62d12100 	sbcsvs	r2, r1, #0, 2
    5b54:	21024a0d 	tstcs	r2, sp, lsl #20
    5b58:	21016011 	tstcs	r1, r1, lsl r0
    5b5c:	60204308 	eorvs	r4, r0, r8, lsl #6
    5b60:	43082103 	movwmi	r2, #33027	; 0x8103
    5b64:	60206268 	eorvs	r6, r0, r8, ror #4
    5b68:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    5b6c:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    5b70:	40044000 	andmi	r4, r4, r0
    5b74:	21000018 	tstcs	r0, r8, lsl r0
    5b78:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    5b7c:	21000280 	smlabbcs	r0, r0, r2, r0
    5b80:	000068cf 	andeq	r6, r0, pc, asr #17
    5b84:	21000068 	tstcs	r0, r8, rrx
    5b88:	40041100 	andmi	r1, r4, r0, lsl #2
    5b8c:	e000e280 	and	lr, r0, r0, lsl #5
    5b90:	00003bc3 	andeq	r3, r0, r3, asr #23
    5b94:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    5b98:	2004d000 	andcs	sp, r4, r0
    5b9c:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    5ba0:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    5ba4:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    5ba8:	2080e000 	addcs	lr, r0, r0
    5bac:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    5bb0:	00004770 	andeq	r4, r0, r0, ror r7
    5bb4:	2100026b 	tstcs	r0, fp, ror #4
    5bb8:	40046058 	andmi	r6, r4, r8, asr r0
    5bbc:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    5bc0:	bd019001 	stclt	0, cr9, [r1, #-4]
    5bc4:	00006fa5 	andeq	r6, r0, r5, lsr #31
    5bc8:	00000000 	andeq	r0, r0, r0
    5bcc:	00030001 	andeq	r0, r3, r1
    5bd0:	001f000a 	andseq	r0, pc, sl
    5bd4:	00eb0059 	rsceq	r0, fp, r9, asr r0
    5bd8:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    5bdc:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    5be0:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    5be4:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    5be8:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    5bec:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    5bf0:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    5bf4:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    5bf8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00005bfc <ratable>:
    5bfc:	12c5000b 	sbcne	r0, r5, #11
    5c00:	2de00007 	stclcs	0, cr0, [r0, #28]!
    5c04:	8000000f 	andhi	r0, r0, pc
    5c08:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    5c0c:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    5c10:	6374206c 	cmnvs	r4, #108	; 0x6c
    5c14:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    5c18:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    5c1c:	00006c6c 	andeq	r6, r0, ip, ror #24

00005c20 <plug_null>:
    5c20:	00003125 	andeq	r3, r0, r5, lsr #2
    5c24:	000030cd 	andeq	r3, r0, sp, asr #1
    5c28:	000030f1 	strdeq	r3, [r0], -r1
    5c2c:	00003115 	andeq	r3, r0, r5, lsl r1
    5c30:	0000311d 	andeq	r3, r0, sp, lsl r1
    5c34:	00003121 	andeq	r3, r0, r1, lsr #2
    5c38:	00000000 	andeq	r0, r0, r0
    5c3c:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <array.6529>:
	...

20000554 <discovery_wait_flag>:
int discovery_wait_flag = 0;
20000554:	00000000 	andeq	r0, r0, r0

20000558 <incoming_packet.6528>:
20000558:	00000000 	andeq	r0, r0, r0

2000055c <packet.6508>:
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <response_flag>:
word response_flag=0;
20000560:	00000000 	andeq	r0, r0, r0

20000564 <response_message_5.6527>:
20000564:	00000000 	andeq	r0, r0, r0

20000568 <setdel>:
	...

2000056a <urates>:
	...

2000056c <__PCB>:
2000056c:	00000000 	andeq	r0, r0, r0

20000570 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000570:	00000000 	andeq	r0, r0, r0

20000574 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000574:	00000000 	andeq	r0, r0, r0

20000578 <mevent>:
20000578:	00000000 	andeq	r0, r0, r0

2000057c <mnfree>:
2000057c:	00000000 	andeq	r0, r0, r0

20000580 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000580:	00000000 	andeq	r0, r0, r0

20000584 <descriptors>:
	...

200005a4 <oqueues>:
	...

200005b0 <physical>:
	...

200005bc <physinfo>:
	...

200005c8 <plugins>:
	...

200005d4 <dopen>:
	...

200005d5 <dstat>:
	...

200005d6 <bckf_timer>:
	...

200005d8 <channel>:
200005d8:	00000000 	andeq	r0, r0, r0

200005dc <drvprcs>:
static aword drvprcs, qevent;
200005dc:	00000000 	andeq	r0, r0, r0

200005e0 <dstate>:
200005e0:	00000000 	andeq	r0, r0, r0

200005e4 <paylen>:
static	int paylen = 0;			// Current TX payload length
200005e4:	00000000 	andeq	r0, r0, r0

200005e8 <physid>:
static word	physid,
200005e8:	00000000 	andeq	r0, r0, r0

200005ec <qevent>:
static aword drvprcs, qevent;
200005ec:	00000000 	andeq	r0, r0, r0

200005f0 <rbuffl>:
200005f0:	00000000 	andeq	r0, r0, r0

200005f4 <rfTrim>:
	...

20000604 <rxstat>:
	...

20000610 <statid>:
	...

20000612 <txtries>:
	...

20000614 <ndsc_null>:
20000614:	00000000 	andeq	r0, r0, r0

20000618 <len.5699>:
20000618:	00000000 	andeq	r0, r0, r0

2000061c <ptr.5698>:
2000061c:	00000000 	andeq	r0, r0, r0

20000620 <__inpline>:
char *__inpline = NULL;
20000620:	00000000 	andeq	r0, r0, r0

20000624 <len.5700>:
20000624:	00000000 	andeq	r0, r0, r0

20000628 <ptr.5699>:
20000628:	00000000 	andeq	r0, r0, r0

2000062c <oscHfGlobals>:
	...

20000640 <powerQualGlobals>:
	...

20000648 <user_provided_record>:
	...

2000065c <us_pr_in>:
uint8_t us_pr_in;
2000065c:	00000000 	andeq	r0, r0, r0

20000660 <response_checker>:
	...

20000668 <reason>:
	...

2000069a <get_id>:
	...

2000069b <beg_for_index>:
	...

2000069c <user_provided_index>:
	...

2000069d <CHOICE>:
	...

2000069e <user_provided_receiver_id>:
	...

200006a0 <node_db>:
struct Node *node_db; // globally defined struct, represents the node.
200006a0:	00000000 	andeq	r0, r0, r0

200006a4 <__pi_uart>:
	...

200006ac <system_event_count>:
200006ac:	00000000 	andeq	r0, r0, r0

200006b0 <entropy>:
200006b0:	00000000 	andeq	r0, r0, r0

200006b4 <__pi_mintk>:
	...

200006b6 <__pi_old>:
	...

200006b8 <__pi_systat>:
	...

200006c0 <__pi_new>:
200006c0:	00000000 	andeq	r0, r0, r0

200006c4 <__pi_utims>:
	...

200006d4 <__pi_curr>:
200006d4:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200006d8 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001c3b 	andeq	r1, r0, fp, lsr ip
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000ac 	andeq	r0, r0, ip, lsr #1
    return node->data_base.item_array[index];
      10:	0008370c 	andeq	r3, r8, ip, lsl #14
      14:	000e0a00 	andeq	r0, lr, r0, lsl #20
      18:	00014800 	andeq	r4, r1, r0, lsl #16
	...
      24:	07040200 	streq	r0, [r4, -r0, lsl #4]
      28:	0000042b 	andeq	r0, r0, fp, lsr #8
      2c:	69050403 	stmdbvs	r5, {r0, r1, sl}
      30:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
      34:	00000bd5 	ldrdeq	r0, [r0], -r5
      38:	16015e02 	strne	r5, [r1], -r2, lsl #28
      3c:	00000025 	andeq	r0, r0, r5, lsr #32
			i = k;
      40:	5d060102 	stfpls	f0, [r6, #-8]
				j->Next = k;
      44:	0200000c 	andeq	r0, r0, #12
      48:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
}
      4c:	02020000 	andeq	r0, r2, #0
      50:	000a6b05 	andeq	r6, sl, r5, lsl #22
      54:	07020200 	streq	r0, [r2, -r0, lsl #4]
		release;
      58:	00000d66 	andeq	r0, r0, r6, ror #26
      5c:	fd050402 	stc2	4, cr0, [r5, #-8]
			nq++;
      60:	02000007 	andeq	r0, r0, #7
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
      68:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      6c:	0007f805 	andeq	pc, r7, r5, lsl #16
      70:	07080200 	streq	r0, [r8, -r0, lsl #4]
      74:	00000421 	andeq	r0, r0, r1, lsr #8
      78:	000e4905 	andeq	r4, lr, r5, lsl #18
      7c:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
      80:	0000005c 	andeq	r0, r0, ip, asr r0
      84:	0002ff05 	andeq	pc, r2, r5, lsl #30
      88:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
      8c:	0000005c 	andeq	r0, r0, ip, asr r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	a5030406 	strge	r0, [r3, #-1030]	; 0xfffffbfa
      94:	0000b203 	andeq	fp, r0, r3, lsl #4
      98:	076c0700 	strbeq	r0, [ip, -r0, lsl #14]!
	if (baction == NULL)
      9c:	a7030000 	strge	r0, [r3, -r0]
      a0:	0000330c 	andeq	r3, r0, ip, lsl #6
	(*baction) (pbutton);
      a4:	0ab40700 	beq	fed01cac <_estack+0xdecfccac>
endthread
      a8:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000b213 	andeq	fp, r0, r3, lsl r2
      b0:	47080000 	strmi	r0, [r8, -r0]
endthread
      b4:	c2000000 	andgt	r0, r0, #0
      b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      bc:	00000025 	andeq	r0, r0, r5, lsr #32
      c0:	080a0003 	stmdaeq	sl, {r0, r1}
      c4:	e609a203 	str	sl, [r9], -r3, lsl #4
fsm sender(struct ResponseMessage *message) {
      c8:	0b000000 	bleq	d0 <sender+0x8>
      cc:	0000038e 	andeq	r0, r0, lr, lsl #7
      d0:	2c07a403 	cfstrscs	mvf10, [r7], {3}
}
      d4:	00000000 	andeq	r0, r0, r0
      d8:	0006010b 	andeq	r0, r6, fp, lsl #2
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	05a90300 	streq	r0, [r9, #768]!	; 0x300
      e0:	00000090 	muleq	r0, r0, r0
      e4:	b5050004 	strlt	r0, [r5, #-4]
      e8:	03000008 	movweq	r0, #8
      ec:	00c203aa 	sbceq	r0, r2, sl, lsr #7
		packet[1] = message->gid;
      f0:	040c0000 	streq	r0, [ip], #-0
      f4:	000b900d 	andeq	r9, fp, sp
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	00110400 	andseq	r0, r1, r0, lsl #8
      fc:	0000010c 	andeq	r0, r0, ip, lsl #2
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	00086d0e 	andeq	r6, r8, lr, lsl #26
     104:	0000f200 	andeq	pc, r0, r0, lsl #4
		*p = message->tpe;p++;
     108:	00010000 	andeq	r0, r1, r0
		*p = message->request_number;p++;
     10c:	00084205 	andeq	r4, r8, r5, lsl #4
		*p = message->sender_id;p++;
     110:	17160400 	ldrne	r0, [r6, -r0, lsl #8]
		*p = message->receiver_id;p++;
     114:	00000063 	andeq	r0, r0, r3, rrx
		switch(message->tpe) {
     118:	00025305 	andeq	r5, r2, r5, lsl #6
     11c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
     120:	0000002c 	andeq	r0, r0, ip, lsr #32
		tcv_endp(packet);
     124:	00072a05 	andeq	r2, r7, r5, lsl #20
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	1b230400 	blne	8c1130 <__ccfg+0x8a1188>
     12c:	00000118 	andeq	r0, r0, r8, lsl r1
}
     130:	0003320f 	andeq	r3, r3, pc, lsl #4
		finish;
     134:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
     138:	00018a08 	andeq	r8, r1, r8, lsl #20
     13c:	0ec40b00 	vdiveq.f64	d16, d4, d0
				strncpy(p, message->record, sizeof(message->record));
     140:	36040000 	strcc	r0, [r4], -r0
				*p = message->padding;p++;
     144:	00018a13 	andeq	r8, r1, r3, lsl sl
				strncpy(p, message->record, sizeof(message->record));
     148:	5f100000 	svcpl	0x00100000
     14c:	3704006b 	strcc	r0, [r4, -fp, rrx]
     150:	00002c07 	andeq	r2, r0, r7, lsl #24
				strncpy(p, message->record, sizeof(message->record));
     154:	620b0400 	andvs	r0, fp, #0, 8
     158:	0400000b 	streq	r0, [r0], #-11
				strncpy(p, message->record, sizeof(message->record));
     15c:	002c0b37 	eoreq	r0, ip, r7, lsr fp
				break;
     160:	0b080000 	bleq	200168 <__ccfg+0x1e01c0>
				*p = message->record_index;p++;
     164:	000043f5 	strdeq	r4, [r0], -r5
				*p = message->padding;
     168:	2c143704 	ldccs	7, cr3, [r4], {4}
				break;
     16c:	0c000000 	stceq	0, cr0, [r0], {-0}
     170:	0004550b 	andeq	r5, r4, fp, lsl #10
     174:	1b370400 	blne	dc117c <__ccfg+0xda11d4>
     178:	0000002c 	andeq	r0, r0, ip, lsr #32
     17c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
     180:	0b380400 	bleq	e01188 <__ccfg+0xde11e0>
		node->nnodes[i] = 0;
     184:	00000190 	muleq	r0, r0, r1
     188:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
     18c:	00000130 	andeq	r0, r0, r0, lsr r1
     190:	00010c08 	andeq	r0, r1, r8, lsl #24
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	0001a000 	andeq	sl, r1, r0
bool init_node(struct Node* node){
     198:	00250900 	eoreq	r0, r5, r0, lsl #18
    node->id  = 0;                  // default id value 0
     19c:	00000000 	andeq	r0, r0, r0
    node->index = 0;                // default entry count 0
     1a0:	000b7d0f 	andeq	r7, fp, pc, lsl #26
    node->data_base.item_count = 0; // default no items in array
     1a4:	3c042400 	cfstrscc	mvf2, [r4], {-0}
	reset_array(node);
     1a8:	00022308 	andeq	r2, r2, r8, lsl #6
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	056c0b00 	strbeq	r0, [ip, #-2816]!	; 0xfffff500
     1b0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
};
     1b4:	00002c07 	andeq	r2, r0, r7, lsl #24
     1b8:	b70b0000 	strlt	r0, [fp, -r0]
uint8_t generate_request_num(void){
     1bc:	04000003 	streq	r0, [r0], #-3
    return (uint8_t) (rand() % 255);
     1c0:	002c073f 	eoreq	r0, ip, pc, lsr r7
     1c4:	0b040000 	bleq	1001cc <__ccfg+0xe0224>
     1c8:	00000358 	andeq	r0, r0, r8, asr r3
}
     1cc:	2c074004 	stccs	0, cr4, [r7], {4}
            node->nnodes[i] = 0; // set to null byte
     1d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     1d4:	0006740b 	andeq	r7, r6, fp, lsl #8
     1d8:	07410400 	strbeq	r0, [r1, -r0, lsl #8]
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0000002c 	andeq	r0, r0, ip, lsr #32
};
     1e0:	09540b0c 	ldmdbeq	r4, {r2, r3, r8, r9, fp}^
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	42040000 	andmi	r0, r4, #0
     1e8:	00002c07 	andeq	r2, r0, r7, lsl #24
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	ce0b1000 	cdpgt	0, 0, cr1, cr11, cr0, {0}
     1f0:	0400000a 	streq	r0, [r0], #-10
     1f4:	002c0743 	eoreq	r0, ip, r3, asr #14
        node->data_base.item_count -= 1;
     1f8:	0b140000 	bleq	500200 <__ccfg+0x4e0258>
};
     1fc:	00000346 	andeq	r0, r0, r6, asr #6
bool delete_all(struct Node *node){
     200:	2c074404 	cfstrscs	mvf4, [r7], {4}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	0005750b 	andeq	r7, r5, fp, lsl #10
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	07450400 	strbeq	r0, [r5, -r0, lsl #8]
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	0000002c 	andeq	r0, r0, ip, lsr #32
            node->data_base.item_array[i].timestamp = 0;
     214:	08f00b1c 	ldmeq	r0!, {r2, r3, r4, r8, r9, fp}^
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	46040000 	strmi	r0, [r4], -r0
    node->data_base.item_count = 0;
     21c:	00002c07 	andeq	r2, r0, r7, lsl #24
}
     220:	12002000 	andne	r2, r0, #0
        return true;
     224:	0000003b 	andeq	r0, r0, fp, lsr r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	4f040108 	svcmi	0x00040108
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00026808 	andeq	r6, r2, r8, lsl #16
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	0d2d0b00 	vpusheq	{d0-d-1}
     234:	50040000 	andpl	r0, r4, r0
     238:	00026809 	andeq	r6, r2, r9, lsl #16
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	170b0000 	strne	r0, [fp, -r0]
	response_message->tpe = RESPONSE;
     240:	0400000c 	streq	r0, [r0], #-12
	response_message->status = status;
     244:	02680951 	rsbeq	r0, r8, #1327104	; 0x144000
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	13800000 	orrne	r0, r0, #0
	response_message->gid = gid;
     24c:	00000dc6 	andeq	r0, r0, r6, asr #27
	response_message->sender_id = sender_id;
     250:	0c0a5304 	stceq	3, cr5, [sl], {4}
	response_message->status = status;
     254:	00000001 	andeq	r0, r0, r1
	if (!padding){
     258:	0eb71301 	cdpeq	3, 11, cr1, cr7, cr1, {0}
		response_message->padding = padding;
     25c:	56040000 	strpl	r0, [r4], -r0
	if (rec != NULL){
     260:	00010c0a 	andeq	r0, r1, sl, lsl #24
     264:	00010400 	andeq	r0, r1, r0, lsl #8
		strncpy(response_message->record, rec, 20);
     268:	0000f208 	andeq	pc, r0, r8, lsl #4
     26c:	00027800 	andeq	r7, r2, r0, lsl #16
     270:	00250900 	eoreq	r0, r5, r0, lsl #18
};
     274:	001f0000 	andseq	r0, pc, r0
fsm receiver(struct Node* node_db) {
     278:	000a1612 	andeq	r1, sl, r2, lsl r6
     27c:	04019000 	streq	r9, [r1], #-0
     280:	02bb0862 	adcseq	r0, fp, #6422528	; 0x620000
     284:	c40b0000 	strgt	r0, [fp], #-0
     288:	0400000e 	streq	r0, [r0], #-14
     28c:	02bb1263 	adcseq	r1, fp, #805306374	; 0x30000006
     290:	0b000000 	bleq	298 <receiver+0x20>
     294:	00000584 	andeq	r0, r0, r4, lsl #11
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	2c066404 	cfstrscs	mvf6, [r6], {4}
     29c:	04000000 	streq	r0, [r0], #-0
     2a0:	0003070b 	andeq	r0, r3, fp, lsl #14
     2a4:	09660400 	stmdbeq	r6!, {sl}^
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	000002c1 	andeq	r0, r0, r1, asr #5
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	003b0b08 	eorseq	r0, fp, r8, lsl #22
     2b0:	67040000 	strvs	r0, [r4, -r0]
     2b4:	0002231e 	andeq	r2, r2, lr, lsl r3
		switch (response_message_5->tpe){
     2b8:	11008800 	tstne	r0, r0, lsl #16
     2bc:	00027804 	andeq	r7, r2, r4, lsl #16
     2c0:	02d10800 	sbcseq	r0, r1, #0, 16
     2c4:	02d10000 	sbcseq	r0, r1, #0
     2c8:	25090000 	strcs	r0, [r9, #-0]
     2cc:	1f000000 	svcne	0x00000000
     2d0:	d7041100 	strle	r1, [r4, -r0, lsl #2]
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	14000002 	strne	r0, [r0], #-2
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	0cc50f01 	stcleq	15, cr0, [r5], {1}
				if (discovery_request_message->gid == node_db->gid){
     2dc:	04080000 	streq	r0, [r8], #-0
     2e0:	0301087a 	movweq	r0, #6266	; 0x187a
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	d70b0000 	strle	r0, [fp, -r0]
     2e8:	0400000c 	streq	r0, [r0], #-12
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	0301117b 	movweq	r1, #4475	; 0x117b
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	0b000000 	bleq	2f8 <receiver+0x80>
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	00001da0 	andeq	r1, r0, r0, lsr #27
					response_message_0->sender_id = node_db->id;
     2f8:	2c067c04 	stccs	12, cr7, [r6], {4}
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	04000000 	streq	r0, [r0], #-0
					DEBUG_PRINT("\r\nSending to sender");
     300:	47041100 	strmi	r1, [r4, -r0, lsl #2]
					call sender(response_message_0, done_case);
     304:	0f000000 	svceq	0x00000000
     308:	0000044d 	andeq	r0, r0, sp, asr #8
     30c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
     310:	0000044a 	andeq	r0, r0, sl, asr #8
     314:	00705f10 	rsbseq	r5, r0, r0, lsl pc
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	0112bb04 	tsteq	r2, r4, lsl #22
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	00000003 	andeq	r0, r0, r3
     320:	00725f10 	rsbseq	r5, r2, r0, lsl pc
     324:	2c07bc04 	stccs	12, cr11, [r7], {4}
     328:	04000000 	streq	r0, [r0], #-0
     32c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
     330:	2c07bd04 	stccs	13, cr11, [r7], {4}
     334:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     338:	0001c40b 	andeq	ip, r1, fp, lsl #8
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	09be0400 	ldmibeq	lr!, {sl}
					node_db->index+=1;
     340:	0000004e 	andeq	r0, r0, lr, asr #32
     344:	08590b0c 	ldmdaeq	r9, {r2, r3, r8, r9, fp}^
		tcv_endp(incoming_packet);
     348:	bf040000 	svclt	0x00040000
     34c:	00004e09 	andeq	r4, r0, r9, lsl #28
		proceed receiving;
     350:	5f100e00 	svcpl	0x00100e00
		ser_out(response_1_create, "\r\nData Saved");
     354:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
     358:	02d911c0 	sbcseq	r1, r9, #192, 2	; 0x30
		proceed receiving;
     35c:	0b100000 	bleq	400364 <__ccfg+0x3e03bc>
     360:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	2c07c104 	stfcsd	f4, [r7], {4}
     368:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
		proceed receiving;
     36c:	00030c0b 	andeq	r0, r3, fp, lsl #24
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	0ac80400 	beq	ff201378 <_estack+0xdf1fc378>
     374:	000000f2 	strdeq	r0, [r0], -r2
     378:	1d2f0b1c 	vstmdbne	pc!, {d0-d13}
     37c:	ca040000 	bgt	100384 <__ccfg+0xe03dc>
     380:	0005cf09 	andeq	ip, r5, r9, lsl #30
		proceed receiving;
     384:	f60b2000 			; <UNDEFINED> instruction: 0xf60b2000
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
     38c:	05fa09cc 	ldrbeq	r0, [sl, #2508]!	; 0x9cc
     390:	0b240000 	bleq	900398 <__ccfg+0x8e03f0>
     394:	00000ee4 	andeq	r0, r0, r4, ror #29
		proceed receiving;
     398:	1f0dcf04 	svcne	0x000dcf04
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	28000006 	stmdacs	r0, {r1, r2}
     3a0:	001ce40b 	andseq	lr, ip, fp, lsl #8
     3a4:	09d00400 	ldmibeq	r0, {sl}^
     3a8:	0000063a 	andeq	r0, r0, sl, lsr r6
		proceed receiving;
     3ac:	755f102c 	ldrbvc	r1, [pc, #-44]	; 388 <receiver+0x110>
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	d3040062 	movwle	r0, #16482	; 0x4062
     3b4:	0002d911 	andeq	sp, r2, r1, lsl r9
     3b8:	5f103000 	svcpl	0x00103000
     3bc:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
		proceed receiving;
     3c0:	030112d4 	movweq	r1, #4820	; 0x12d4
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	10380000 	eorsne	r0, r8, r0
     3c8:	0072755f 	rsbseq	r7, r2, pc, asr r5
		proceed receiving;
     3cc:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
}
     3d0:	3c000000 	stccc	0, cr0, [r0], {-0}
     3d4:	000f1b0b 	andeq	r1, pc, fp, lsl #22
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	11d80400 	bicsne	r0, r8, r0, lsl #8
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	00000640 	andeq	r0, r0, r0, asr #12
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	0e640b40 	vnmuleq.f64	d16, d4, d0
     3e4:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
     3e8:	00065011 	andeq	r5, r6, r1, lsl r0
     3ec:	5f104300 	svcpl	0x00104300
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
					break;
     3f4:	02d911dc 	sbcseq	r1, r9, #220, 2	; 0x37
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	0b440000 	bleq	1100400 <__ccfg+0x10e0458>
     3fc:	00000b74 	andeq	r0, r0, r4, ror fp
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	2c07df04 	stccs	15, cr13, [r7], {4}
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	4c000000 	stcmi	0, cr0, [r0], {-0}
     408:	00047c0b 	andeq	r7, r4, fp, lsl #24
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	0ae00400 	beq	ff801414 <_estack+0xdf7fc414>
     410:	00000078 	andeq	r0, r0, r8, ror r0
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	47530b50 			; <UNDEFINED> instruction: 0x47530b50
     418:	e3040000 	movw	r0, #16384	; 0x4000
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	00046912 	andeq	r6, r4, r2, lsl r9
     420:	9a0b5400 	bls	2d5428 <__ccfg+0x2b5480>
     424:	0400000b 	streq	r0, [r0], #-11
     428:	01240ce7 	smulwteq	r4, r7, ip
     42c:	0b580000 	bleq	1600434 <__ccfg+0x15e048c>
     430:	00000a1e 	andeq	r0, r0, lr, lsl sl
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	e60ee904 	str	lr, [lr], -r4, lsl #18
					call sender(response_message_2, done_case);
     438:	5c000000 	stcpl	0, cr0, [r0], {-0}
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	000e970b 	andeq	r9, lr, fp, lsl #14
     440:	07ea0400 	strbeq	r0, [sl, r0, lsl #8]!
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	0000002c 	andeq	r0, r0, ip, lsr #32
     448:	01150064 	tsteq	r5, r4, rrx
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	0000002c 	andeq	r0, r0, ip, lsr #32
				DEBUG_PRINT("\r\nDelete rec");/*
     450:	00000469 	andeq	r0, r0, r9, ror #8
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	00046916 	andeq	r6, r4, r6, lsl r9
     458:	00f21600 	rscseq	r1, r2, r0, lsl #12
     45c:	bd160000 	ldclt	0, cr0, [r6, #-0]
     460:	16000005 	strne	r0, [r0], -r5
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	0000002c 	andeq	r0, r0, ip, lsr #32
     468:	74041100 	strvc	r1, [r4], #-256	; 0xffffff00
     46c:	17000004 	strne	r0, [r0, -r4]
     470:	00000469 	andeq	r0, r0, r9, ror #8
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	000d5f18 	andeq	r5, sp, r8, lsl pc
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
     47c:	bd080265 	sfmlt	f0, 4, [r8, #-404]	; 0xfffffe6c
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	19000005 	stmdbne	r0, {r0, r2}
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	00000904 	andeq	r0, r0, r4, lsl #18
     488:	07026704 	streq	r6, [r2, -r4, lsl #14]
     48c:	0000002c 	andeq	r0, r0, ip, lsr #32
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	07e21900 	strbeq	r1, [r2, r0, lsl #18]!
						status = (uint8_t) SUCCESS;
     494:	6c040000 	stcvs	0, cr0, [r4], {-0}
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	06ac0b02 	strteq	r0, [ip], r2, lsl #22
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4a0:	000002f7 	strdeq	r0, [r0], -r7
     4a4:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
     4a8:	000006ac 	andeq	r0, r0, ip, lsr #13
     4ac:	0f0a1908 	svceq	0x000a1908
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	6c040000 	stcvs	0, cr0, [r4], {-0}
     4b4:	06ac1e02 	strteq	r1, [ip], r2, lsl #28
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     4bc:	0000057f 	andeq	r0, r0, pc, ror r5
     4c0:	07026e04 	streq	r6, [r2, -r4, lsl #28]
     4c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4c8:	04d41910 	ldrbeq	r1, [r4], #2320	; 0x910
     4cc:	6f040000 	svcvs	0x00040000
     4d0:	08ac0802 	stmiaeq	ip!, {r1, fp}
     4d4:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     4d8:	00000e77 	andeq	r0, r0, r7, ror lr
     4dc:	07027204 	streq	r7, [r2, -r4, lsl #4]
     4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e4:	42a11930 	adcmi	r1, r1, #48, 18	; 0xc0000
     4e8:	73040000 	movwvc	r0, #16384	; 0x4000
     4ec:	08c21602 	stmiaeq	r2, {r1, r9, sl, ip}^
     4f0:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     4f4:	0000078a 	andeq	r0, r0, sl, lsl #15
     4f8:	07027504 	streq	r7, [r2, -r4, lsl #10]
     4fc:	0000002c 	andeq	r0, r0, ip, lsr #32
     500:	08841938 	stmeq	r4, {r3, r4, r5, r8, fp, ip}
     504:	77040000 	strvc	r0, [r4, -r0]
     508:	08d40a02 	ldmeq	r4, {r1, r9, fp}^
     50c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
     510:	00000350 	andeq	r0, r0, r0, asr r3
     514:	13027a04 	movwne	r7, #10756	; 0x2a04
     518:	0000018a 	andeq	r0, r0, sl, lsl #3
     51c:	040b1940 	streq	r1, [fp], #-2368	; 0xfffff6c0
     520:	7b040000 	blvc	100528 <__ccfg+0xe0580>
     524:	002c0702 	eoreq	r0, ip, r2, lsl #14
     528:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     52c:	00000609 	andeq	r0, r0, r9, lsl #12
     530:	13027c04 	movwne	r7, #11268	; 0x2c04
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	0000018a 	andeq	r0, r0, sl, lsl #3
     538:	081f1948 	ldmdaeq	pc, {r3, r6, r8, fp, ip}	; <UNPREDICTABLE>
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	7d040000 	stcvc	0, cr0, [r4, #-0]
				DEBUG_PRINT("\r\nretrieve rec");
     540:	08da1402 	ldmeq	sl, {r1, sl, ip}^
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
     548:	00000b5a 	andeq	r0, r0, sl, asr fp
     54c:	07028004 	streq	r8, [r2, -r4]
     550:	0000002c 	andeq	r0, r0, ip, lsr #32
     554:	0c531950 	mrrceq	9, 5, r1, r3, cr0	; <UNPREDICTABLE>
     558:	81040000 	mrshi	r0, (UNDEF: 4)
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	05bd0902 	ldreq	r0, [sp, #2306]!	; 0x902
     560:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
     564:	00000c6d 	andeq	r0, r0, sp, ror #24
    return node->data_base.item_array[index];
     568:	0702a404 	streq	sl, [r2, -r4, lsl #8]
     56c:	00000887 	andeq	r0, r0, r7, lsl #17
     570:	0a161a58 	beq	586ed8 <__ccfg+0x566f30>
     574:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	02bb1302 	adcseq	r1, fp, #134217728	; 0x8000000
    return node->data_base.item_array[index];
     57c:	01480000 	mrseq	r0, (UNDEF: 72)
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	0006ae1a 	andeq	sl, r6, sl, lsl lr
     584:	02a90400 	adceq	r0, r9, #0, 8
     588:	00027812 	andeq	r7, r2, r2, lsl r8
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	1a014c00 	bne	53594 <__ccfg+0x335ec>
     590:	00000695 	muleq	r0, r5, r6
     594:	0c02ad04 	stceq	13, cr10, [r2], {4}
     598:	000008ec 	andeq	r0, r0, ip, ror #17
     59c:	e31a02dc 	tst	sl, #220, 4	; 0xc000000d
     5a0:	0400000c 	streq	r0, [r0], #-12
     5a4:	6d1002b2 	lfmvs	f0, 4, [r0, #-712]	; 0xfffffd38
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	e0000006 	and	r0, r0, r6
     5ac:	0aa61a02 	beq	fe986dbc <_estack+0xde981dbc>
				DEBUG_PRINT("\r\nResponse");
     5b0:	b4040000 	strlt	r0, [r4], #-0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	08f80a02 	ldmeq	r8!, {r1, r9, fp}^
     5b8:	02ec0000 	rsceq	r0, ip, #0
     5bc:	c3041100 	movwgt	r1, #16640	; 0x4100
     5c0:	02000005 	andeq	r0, r0, #5
     5c4:	0c640801 	stcleq	8, cr0, [r4], #-4
     5c8:	c3170000 	tstgt	r7, #0
				if(!response_flag){
     5cc:	11000005 	tstne	r0, r5
					response_flag=1;
     5d0:	00044a04 	andeq	r4, r4, r4, lsl #20
					trigger(&response_flag);
     5d4:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
				switch(response_message_5->status){
     5d8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5dc:	16000005 	strne	r0, [r0], -r5
     5e0:	00000469 	andeq	r0, r0, r9, ror #8
     5e4:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     5e8:	05f41600 	ldrbeq	r1, [r4, #1536]!	; 0x600
						if (response_checker[0] == response_message_5->request_number){
     5ec:	2c160000 	ldccs	0, cr0, [r6], {-0}
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	05ca0411 	strbeq	r0, [sl, #1041]	; 0x411
							switch(response_checker[1]){
     5f8:	04110000 	ldreq	r0, [r1], #-0
     5fc:	000005d5 	ldrdeq	r0, [r0], -r5
     600:	00840115 	addeq	r0, r4, r5, lsl r1
     604:	061f0000 	ldreq	r0, [pc], -r0
									proceed response_1_create;
     608:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
						proceed response_2;
     60c:	16000004 	strne	r0, [r0], -r4
									proceed response_1_delete;
     610:	000000f2 	strdeq	r0, [r0], -r2
									proceed response_1_retrieve;
     614:	00008416 	andeq	r8, r0, r6, lsl r4
						proceed response_2;
     618:	002c1600 	eoreq	r1, ip, r0, lsl #12
						proceed response_3;
     61c:	11000000 	mrsne	r0, (UNDEF: 0)
						proceed response_4;
     620:	00060004 	andeq	r0, r6, r4
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	2c011500 	cfstr32cs	mvfx1, [r1], {-0}
     628:	3a000000 	bcc	630 <receiver+0x3b8>
				break;
     62c:	16000006 	strne	r0, [r0], -r6
}
     630:	00000469 	andeq	r0, r0, r9, ror #8
     634:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
     638:	04110000 	ldreq	r0, [r1], #-0
     63c:	00000625 	andeq	r0, r0, r5, lsr #12
     640:	00004708 	andeq	r4, r0, r8, lsl #14
     644:	00065000 	andeq	r5, r6, r0
fsm root {
     648:	00250900 	eoreq	r0, r5, r0, lsl #18
     64c:	00020000 	andeq	r0, r2, r0
     650:	00004708 	andeq	r4, r0, r8, lsl #14
     654:	00066000 	andeq	r6, r6, r0
     658:	00250900 	eoreq	r0, r5, r0, lsl #18
     65c:	00000000 	andeq	r0, r0, r0
     660:	00046e04 	andeq	r6, r4, r4, lsl #28
     664:	01240400 			; <UNDEFINED> instruction: 0x01240400
     668:	00030718 	andeq	r0, r3, r8, lsl r7
     66c:	0cdd1b00 	vldmiaeq	sp, {d17-d16}
     670:	040c0000 	streq	r0, [ip], #-0
     674:	a6080128 	strge	r0, [r8], -r8, lsr #2
     678:	19000006 	stmdbne	r0, {r1, r2}
     67c:	00000ec4 	andeq	r0, r0, r4, asr #29
     680:	11012a04 	tstne	r1, r4, lsl #20
     684:	000006a6 	andeq	r0, r0, r6, lsr #13
     688:	0bce1900 	bleq	ff386a90 <_estack+0xdf381a90>
     68c:	2b040000 	blcs	100694 <__ccfg+0xe06ec>
     690:	002c0701 	eoreq	r0, ip, r1, lsl #14
     694:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	00000772 	andeq	r0, r0, r2, ror r7
     69c:	0b012c04 	bleq	4b6b4 <__ccfg+0x2b70c>
     6a0:	000006ac 	andeq	r0, r0, ip, lsr #13
		init_node(node_db);
     6a4:	04110008 	ldreq	r0, [r1], #-8
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	0000066d 	andeq	r0, r0, sp, ror #12
     6ac:	06600411 			; <UNDEFINED> instruction: 0x06600411
		tcv_plug (0, &plug_null);
     6b0:	da1b0000 	ble	6c06b8 <__ccfg+0x6a0710>
     6b4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	08014404 	stmdaeq	r1, {r2, sl, lr}
     6bc:	000006eb 	andeq	r0, r0, fp, ror #13
     6c0:	00164b19 	andseq	r4, r6, r9, lsl fp
     6c4:	01450400 	cmpeq	r5, r0, lsl #8
     6c8:	0006eb12 	andeq	lr, r6, r2, lsl fp
			diag("Cannot open tcv interface");
     6cc:	31190000 	tstcc	r9, r0
     6d0:	04000008 	streq	r0, [r0], #-8
			halt();
     6d4:	eb120146 	bl	480bf4 <__ccfg+0x460c4c>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	06000006 	streq	r0, [r0], -r6
     6dc:	0014fd19 	andseq	pc, r4, r9, lsl sp	; <UNPREDICTABLE>
		runfsm receiver(node_db);
     6e0:	01470400 	cmpeq	r7, r0, lsl #8
     6e4:	00005512 	andeq	r5, r0, r2, lsl r5
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	08000c00 	stmdaeq	r0, {sl, fp}
     6ec:	00000055 	andeq	r0, r0, r5, asr r0
     6f0:	000006fb 	strdeq	r0, [r0], -fp
     6f4:	00002509 	andeq	r2, r0, r9, lsl #10
     6f8:	1c000200 	sfmne	f0, 4, [r0], {-0}
     6fc:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
		ser_inf(get_choice, "%c", &CHOICE);
     700:	00081007 	andeq	r1, r8, r7
     704:	0e6a1900 	vmuleq.f16	s3, s20, s0	; <UNPREDICTABLE>
     708:	87040000 	strhi	r0, [r4, -r0]
		switch(CHOICE) {
     70c:	00251802 	eoreq	r1, r5, r2, lsl #16
     710:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     714:	00000ceb 	andeq	r0, r0, fp, ror #25
     718:	12028804 	andne	r8, r2, #4, 16	; 0x40000
     71c:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
     720:	04381904 	ldrteq	r1, [r8], #-2308	; 0xfffff6fc
     724:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
     728:	08101002 	ldmdaeq	r0, {r1, ip}
     72c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     730:	00000b43 	andeq	r0, r0, r3, asr #22
     734:	17028a04 	strne	r8, [r2, -r4, lsl #20]
     738:	000001a0 	andeq	r0, r0, r0, lsr #3
				proceed menu;
     73c:	07e91924 	strbeq	r1, [r9, r4, lsr #18]!
     740:	8b040000 	blhi	100748 <__ccfg+0xe07a0>
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	002c0f02 	eoreq	r0, ip, r2, lsl #30
     748:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
     750:	2c028c04 	stccs	12, cr8, [r2], {4}
     754:	00000071 	andeq	r0, r0, r1, ror r0
		DEBUG_PRINT("setting node group ID");
     758:	007f1950 	rsbseq	r1, pc, r0, asr r9	; <UNPREDICTABLE>
     75c:	8d040000 	stchi	0, cr0, [r4, #-0]
    node->gid = gid; 
     760:	06b21a02 	ldrteq	r1, [r2], r2, lsl #20
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     764:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    node->gid = gid; 
     768:	00000639 	andeq	r0, r0, r9, lsr r6
		proceed menu;
     76c:	16028e04 	strne	r8, [r2], -r4, lsl #28
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     770:	000000e6 	andeq	r0, r0, r6, ror #1
     774:	0cf81968 			; <UNDEFINED> instruction: 0x0cf81968
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	8f040000 	svchi	0x00040000
     77c:	00e61602 	rsceq	r1, r6, r2, lsl #12
     780:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     784:	00000071 	andeq	r0, r0, r1, ror r0
     788:	16029004 	strne	r9, [r2], -r4
		if((node_db->id < 1) || (node_db->id > 25)){
     78c:	000000e6 	andeq	r0, r0, r6, ror #1
     790:	0b6a1978 	bleq	1a86d78 <__ccfg+0x1a66dd0>
     794:	91040000 	mrsls	r0, (UNDEF: 4)
			strncpy(reason, "Out of Range", 50);
     798:	08201002 	stmdaeq	r0!, {r1, ip}
     79c:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
			proceed invalid_node_id;
     7a0:	00000415 	andeq	r0, r0, r5, lsl r4
     7a4:	10029204 	andne	r9, r2, r4, lsl #4
				strncpy(reason, "ID is already in use", 50);
     7a8:	00000830 	andeq	r0, r0, r0, lsr r8
		for(int i = 0; i < node_db->index; i++){
     7ac:	0c8d1988 			; <UNDEFINED> instruction: 0x0c8d1988
     7b0:	93040000 	movwls	r0, #16384	; 0x4000
     7b4:	002c0f02 	eoreq	r0, ip, r2, lsl #30
		proceed menu;
     7b8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7bc:	000002ac 	andeq	r0, r0, ip, lsr #5
     7c0:	16029404 	strne	r9, [r2], -r4, lsl #8
     7c4:	000000e6 	andeq	r0, r0, r6, ror #1
     7c8:	069f19a4 	ldreq	r1, [pc], r4, lsr #19
		proceed get_new_node_id;
     7cc:	95040000 	strls	r0, [r4, #-0]
     7d0:	00e61602 	rsceq	r1, r6, r2, lsl #12
		if (!clear_node_neighbour_array(node_db)){
     7d4:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
     7d8:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
			strncpy(reason, "Error Clearing Node Array", 50);
     7dc:	16029604 	strne	r9, [r2], -r4, lsl #12
     7e0:	000000e6 	andeq	r0, r0, r6, ror #1
     7e4:	084a19b4 	stmdaeq	sl, {r2, r4, r5, r7, r8, fp, ip}^
			proceed error;
     7e8:	97040000 	strls	r0, [r4, -r0]
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7ec:	00e61602 	rsceq	r1, r6, r2, lsl #12
     7f0:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
		request_packet->gid = node_db->gid;
     7f4:	00000628 	andeq	r0, r0, r8, lsr #12
     7f8:	16029804 	strne	r9, [r2], -r4, lsl #16
		request_packet->tpe = DISCOVERY_REQUEST;
     7fc:	000000e6 	andeq	r0, r0, r6, ror #1
		request_packet->request_number = generate_request_num();
     800:	090219c4 	stmdbeq	r2, {r2, r6, r7, r8, fp, ip}
     804:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
		call sender(request_packet, wait_discovery);
     808:	002c0802 	eoreq	r0, ip, r2, lsl #16
     80c:	00cc0000 	sbceq	r0, ip, r0
		request_packet->receiver_id=0;
     810:	0005c308 	andeq	ip, r5, r8, lsl #6
		call sender(request_packet, wait_discovery);
     814:	00082000 	andeq	r2, r8, r0
     818:	00250900 	eoreq	r0, r5, r0, lsl #18
     81c:	00190000 	andseq	r0, r9, r0
			release;
     820:	0005c308 	andeq	ip, r5, r8, lsl #6
				proceed get_new_node_id;
     824:	00083000 	andeq	r3, r8, r0
				proceed clear_neighbour_array;
     828:	00250900 	eoreq	r0, r5, r0, lsl #18
				proceed create_proto_start;
     82c:	00070000 	andeq	r0, r7, r0
				proceed start_delete_proto;
     830:	0005c308 	andeq	ip, r5, r8, lsl #6
				proceed start_retrieve_proto;
     834:	00084000 	andeq	r4, r8, r0
				proceed display_db;
     838:	00250900 	eoreq	r0, r5, r0, lsl #18
				proceed del_local;
     83c:	00170000 	andseq	r0, r7, r0
			if(node_db->id == node_db->nnodes[i]){
     840:	9e04f01c 	mcrls	0, 0, pc, cr4, cr12, {0}	; <UNPREDICTABLE>
     844:	08670702 	stmdaeq	r7!, {r1, r8, r9, sl}^
     848:	c0190000 	andsgt	r0, r9, r0
				strncpy(reason, "ID is already in use", 50);
     84c:	04000003 	streq	r0, [r0], #-3
     850:	671b02a1 	ldrvs	r0, [fp, -r1, lsr #5]
				proceed invalid_node_id;
     854:	00000008 	andeq	r0, r0, r8
     858:	000f1219 	andeq	r1, pc, r9, lsl r2	; <UNPREDICTABLE>
		for(int i = 0; i < node_db->index; i++){
     85c:	02a20400 	adceq	r0, r2, #0, 8
		if (discovery_wait_flag == 0){
     860:	00087718 	andeq	r7, r8, r8, lsl r7
			discovery_wait_flag=1;
     864:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
     868:	00000301 	andeq	r0, r0, r1, lsl #6
			delay(3000, find_proto_start);
     86c:	00000877 	andeq	r0, r0, r7, ror r8
     870:	00002509 	andeq	r2, r0, r9, lsl #10
		if (discovery_wait_flag == 1){
     874:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
			discovery_wait_flag=0;
     878:	00000025 	andeq	r0, r0, r5, lsr #32
     87c:	00000887 	andeq	r0, r0, r7, lsl #17
			delay(3000, display_neighbour_nodes);
     880:	00002509 	andeq	r2, r0, r9, lsl #10
     884:	1d001d00 	stcne	13, cr1, [r0, #-0]
     888:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
     88c:	0008ac03 	andeq	sl, r8, r3, lsl #24
     890:	0d5f1e00 	ldcleq	14, cr1, [pc, #-0]	; 898 <root+0x250>
     894:	9a040000 	bls	10089c <__ccfg+0xe08f4>
     898:	06fb0b02 	ldrbteq	r0, [fp], r2, lsl #22
     89c:	521e0000 	andspl	r0, lr, #0
     8a0:	0400000b 	streq	r0, [r0], #-11
     8a4:	400b02a3 	andmi	r0, fp, r3, lsr #5
     8a8:	00000008 	andeq	r0, r0, r8
     8ac:	0005c308 	andeq	ip, r5, r8, lsl #6
     8b0:	0008bc00 	andeq	fp, r8, r0, lsl #24
     8b4:	00250900 	eoreq	r0, r5, r0, lsl #18
     8b8:	00180000 	andseq	r0, r8, r0
     8bc:	000eca1f 	andeq	ip, lr, pc, lsl sl
     8c0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
     8c4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
     8c8:	08d40120 	ldmeq	r4, {r5, r8}^
		if(node_db->index == 0){
     8cc:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
     8d0:	00000004 	andeq	r0, r0, r4
     8d4:	08c80411 	stmiaeq	r8, {r0, r4, sl}^
			proceed menu;
     8d8:	04110000 	ldreq	r0, [r1], #-0
fsm root {
     8dc:	0000018a 	andeq	r0, r0, sl, lsl #3
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e0:	08ec0120 	stmiaeq	ip!, {r5, r8}^
		for (int i=0; i<node_db->index; i++) {
     8e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	08f20411 	ldmeq	r2!, {r0, r4, sl}^
		proceed menu;
     8f0:	04110000 	ldreq	r0, [r1], #-0
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     8f4:	000008e0 	andeq	r0, r0, r0, ror #17
     8f8:	00066008 	andeq	r6, r6, r8
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     8fc:	00090800 	andeq	r0, r9, r0, lsl #16
     900:	00250900 	eoreq	r0, r5, r0, lsl #18
     904:	00020000 	andeq	r0, r2, r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     908:	000ac221 	andeq	ip, sl, r1, lsr #4
     90c:	03330400 	teqeq	r3, #0, 8
			strncpy(reason, "Error: improper ID", 50);
     910:	00046917 	andeq	r6, r4, r7, lsl r9
     914:	21010100 	mrscs	r0, (UNDEF: 17)
     918:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
			proceed error;
     91c:	1d033404 	cfstrsne	mvf3, [r3, #-16]
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     920:	0000046f 	andeq	r0, r0, pc, ror #8
     924:	1c050101 	stfnes	f0, [r5], {1}
		ser_in(get_record_to_create, user_provided_record, 20);
     928:	0600002a 	streq	r0, [r0], -sl, lsr #32
     92c:	0047172e 	subeq	r1, r7, lr, lsr #14
     930:	12050000 	andne	r0, r5, #0
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     934:	0600002e 	streq	r0, [r0], -lr, lsr #32
		create_message->gid = node_db->gid;
     938:	00551c31 	subseq	r1, r5, r1, lsr ip
     93c:	b4050000 	strlt	r0, [r5], #-0
     940:	06000029 	streq	r0, [r0], -r9, lsr #32
		create_message->tpe = CREATE_RECORD;
     944:	00631b34 	rsbeq	r1, r3, r4, lsr fp
		create_message->request_number = generate_request_num();
     948:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
		create_message->sender_id = node_db->id;
     94c:	07000005 	streq	r0, [r0, -r5]
     950:	00f41b28 	rscseq	r1, r4, r8, lsr #22
     954:	92050000 	andls	r0, r5, #0
		strncpy(create_message->record, user_provided_record, 20);
     958:	0700000b 	streq	r0, [r0, -fp]
		create_message->receiver_id = user_provided_receiver_id;
     95c:	094a1863 	stmdbeq	sl, {r0, r1, r5, r6, fp, ip}^
		strncpy(create_message->record, user_provided_record, 20);
     960:	fb050000 	blx	14096a <__ccfg+0x1209c2>
		response_checker[0] = create_message->request_number;
     964:	08000028 	stmdaeq	r0, {r3, r5}
		call sender(create_message, wait);
     968:	09321227 	ldmdbeq	r2!, {r0, r1, r2, r5, r9, ip}
		response_checker[1] = create_message->tpe;
     96c:	62170000 	andsvs	r0, r7, #0
     970:	22000009 	andcs	r0, r0, #9
		call sender(create_message, wait);
     974:	00000962 	andeq	r0, r0, r2, ror #18
     978:	001dc205 	andseq	ip, sp, r5, lsl #4
     97c:	112b0800 			; <UNDEFINED> instruction: 0x112b0800
     980:	00000926 	andeq	r0, r0, r6, lsr #18
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     984:	00097822 	andeq	r7, r9, r2, lsr #16
     988:	294d0500 	stmdbcs	sp, {r8, sl}^
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     98c:	2c080000 	stccs	0, cr0, [r8], {-0}
     990:	00093e12 	andeq	r3, r9, r2, lsl lr
     994:	09891700 	stmibeq	r9, {r8, r9, sl, ip}
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     998:	46050000 	strmi	r0, [r5], -r0
     99c:	08000006 	stmdaeq	r0, {r1, r2}
			strncpy(reason, "Error: improper node ID", 50);
     9a0:	093e122d 	ldmdbeq	lr!, {r0, r2, r3, r5, r9, ip}
     9a4:	b4050000 	strlt	r0, [r5], #-0
			proceed error;
     9a8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     9ac:	09b20f2e 	ldmibeq	r2!, {r1, r2, r3, r5, r8, r9, sl, fp}
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9b0:	04110000 	ldreq	r0, [r1], #-0
     9b4:	00000962 	andeq	r0, r0, r2, ror #18
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9b8:	3208080a 	andcc	r0, r8, #655360	; 0xa0000
     9bc:	000a4609 	andeq	r4, sl, r9, lsl #12
     9c0:	00342300 	eorseq	r2, r4, r0, lsl #6
		if (us_pr_in < 0 || us_pr_in > 40){
     9c4:	34080000 	strcc	r0, [r8], #-0
			strncpy(reason, "Error: invalid index", 50);
     9c8:	00097807 	andeq	r7, r9, r7, lsl #16
     9cc:	07010100 	streq	r0, [r1, -r0, lsl #2]
     9d0:	064c2300 	strbeq	r2, [ip], -r0, lsl #6
			proceed error;
     9d4:	35080000 	strcc	r0, [r8, #-0]
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9d8:	00097803 	andeq	r7, r9, r3, lsl #16
     9dc:	06010100 	streq	r0, [r1], -r0, lsl #2
     9e0:	02e72300 	rsceq	r2, r7, #0, 6
		delete_record->gid = node_db->gid;
     9e4:	36080000 	strcc	r0, [r8], -r0
		delete_record->tpe = DELETE_RECORD;
     9e8:	00097803 	andeq	r7, r9, r3, lsl #16
		delete_record->request_number = generate_request_num();
     9ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     9f0:	06b72300 	ldrteq	r2, [r7], r0, lsl #6
		call sender(delete_record, wait);
     9f4:	37080000 	strcc	r0, [r8, -r0]
		delete_record->sender_id = node_db->id;
     9f8:	00097803 	andeq	r7, r9, r3, lsl #16
		delete_record->receiver_id = user_provided_receiver_id;
     9fc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
		delete_record->record_index = us_pr_in;
     a00:	0a9f2300 	beq	fe7c9608 <_estack+0xde7c4608>
     a04:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
		response_checker[0] = delete_record->request_number;
     a08:	00097803 	andeq	r7, r9, r3, lsl #16
		call sender(delete_record, wait);
     a0c:	00040100 	andeq	r0, r4, r0, lsl #2
     a10:	065b0b00 	ldrbeq	r0, [fp], -r0, lsl #22
     a14:	3a080000 	bcc	200a1c <__ccfg+0x1e0a74>
     a18:	00097807 	andeq	r7, r9, r7, lsl #16
     a1c:	fb0b0100 	blx	2c0e26 <__ccfg+0x2a0e7e>
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a20:	08000008 	stmdaeq	r0, {r3}
     a24:	0978033c 	ldmdbeq	r8!, {r2, r3, r4, r5, r8, r9}^
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a28:	0b020000 	bleq	80a30 <__ccfg+0x60a88>
     a2c:	00000f3a 	andeq	r0, r0, sl, lsr pc
     a30:	78033d08 	stmdavc	r3, {r3, r8, sl, fp, ip, sp}
		if (get_id < 1 || get_id > 25){
     a34:	03000009 	movweq	r0, #9
     a38:	0009130b 	andeq	r1, r9, fp, lsl #6
			strncpy(reason, "Error: improper node ID", 50);
     a3c:	083f0800 	ldmdaeq	pc!, {fp}	; <UNPREDICTABLE>
     a40:	00000989 	andeq	r0, r0, r9, lsl #19
     a44:	1d050004 	stcne	0, cr0, [r5, #-16]
			proceed error;
     a48:	08000003 	stmdaeq	r0, {r0, r1}
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a4c:	09b80341 	ldmibeq	r8!, {r0, r6, r8, r9}
     a50:	46220000 	strtmi	r0, [r2], -r0
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a54:	2400000a 	strcs	r0, [r0], #-10
     a58:	000006be 			; <UNDEFINED> instruction: 0x000006be
     a5c:	521a4308 	andspl	r4, sl, #8, 6	; 0x20000000
		if (beg_for_index < 0 || beg_for_index > 40){
     a60:	0100000a 	tsteq	r0, sl
     a64:	01a02401 	lsleq	r2, r1, #8
			strncpy(reason, "Error: invalid index", 50);
     a68:	45080000 	strmi	r0, [r8, #-0]
     a6c:	0005bd0e 	andeq	fp, r5, lr, lsl #26
			proceed error;
     a70:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
     a74:	00000326 	andeq	r0, r0, r6, lsr #6
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     a78:	bd1e4508 	cfldr32lt	mvfx4, [lr, #-32]	; 0xffffffe0
     a7c:	01000005 	tsteq	r0, r5
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a80:	09080a01 	stmdbeq	r8, {r0, r9, fp}
     a84:	0ab2098f 	beq	fec830c8 <_estack+0xdec7e0c8>
     a88:	d80b0000 	stmdale	fp, {}	; <UNPREDICTABLE>
		retrieve_record->gid = node_db->gid;
     a8c:	0900000c 	stmdbeq	r0, {r2, r3}
		retrieve_record->tpe = RETRIEVE_RECORD;
     a90:	093e0b90 	ldmdbeq	lr!, {r4, r7, r8, r9, fp}
		retrieve_record->request_number = generate_request_num();
     a94:	0b000000 	bleq	a9c <root+0x454>
     a98:	00001075 	andeq	r1, r0, r5, ror r0
		retrieve_record->receiver_id = get_id;
     a9c:	62079109 	andvs	r9, r7, #1073741826	; 0x40000002
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aa0:	04000009 	streq	r0, [r0], #-9
		retrieve_record->record_index = beg_for_index;
     aa4:	0001c50b 	andeq	ip, r1, fp, lsl #10
     aa8:	10920900 	addsne	r0, r2, r0, lsl #18
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aac:	00000984 	andeq	r0, r0, r4, lsl #19
		response_checker[0] = retrieve_record->request_number;
     ab0:	cc050006 	stcgt	0, cr0, [r5], {6}
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     ab4:	0900000c 	stmdbeq	r0, {r2, r3}
		response_checker[1] = retrieve_record->tpe;
     ab8:	0a810393 	beq	fe04190c <_estack+0xde03c90c>
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     abc:	b2080000 	andlt	r0, r8, #0
     ac0:	c900000a 	stmdbgt	r0, {r1, r3}
		call sender(retrieve_record, wait);
     ac4:	2500000a 	strcs	r0, [r0, #-10]
     ac8:	093d2400 	ldmdbeq	sp!, {sl, sp}
     acc:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
     ad0:	000abe0f 	andeq	fp, sl, pc, lsl #28
     ad4:	0a010100 	beq	40edc <__ccfg+0x20f34>
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad8:	09910a01 	ldmibeq	r1, {r0, r9, fp}
     adc:	00000b01 	andeq	r0, r0, r1, lsl #22
		if(node_db->data_base.item_count != 0){
     ae0:	00091a23 	andeq	r1, r9, r3, lsr #20
     ae4:	07930a00 	ldreq	r0, [r3, r0, lsl #20]
     ae8:	00000978 	andeq	r0, r0, r8, ror r9
		ser_out(loop_through_data, "\r\n");
     aec:	00010701 	andeq	r0, r1, r1, lsl #14
     af0:	0005cc23 	andeq	ip, r5, r3, lsr #24
		proceed menu;
     af4:	03940a00 	orrseq	r0, r4, #0, 20
		delete_all(node_db);
     af8:	00000978 	andeq	r0, r0, r8, ror r9
     afc:	00000101 	andeq	r0, r0, r1, lsl #2
		proceed menu;
     b00:	0aab0500 	beq	feac1f08 <_estack+0xdeabcf08>
     b04:	960a0000 	strls	r0, [sl], -r0
		delay(3000, timeout);
     b08:	000ad703 	andeq	sp, sl, r3, lsl #14
     b0c:	0b011700 	bleq	46714 <__ccfg+0x2676c>
		when(&response_flag, menu);
     b10:	0d080000 	stceq	0, cr0, [r8, #-0]
     b14:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
		release;
     b18:	2500000b 	strcs	r0, [r0, #-11]
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b1c:	0b121700 	bleq	486724 <__ccfg+0x46677c>
     b20:	aa240000 	bge	900b28 <__ccfg+0x8e0b80>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b24:	0a000003 	beq	b38 <root+0x4f0>
     b28:	0b1d179c 	bleq	7469a0 <__ccfg+0x7269f8>
     b2c:	01010000 	mrseq	r0, (UNDEF: 1)
     b30:	00096e08 	andeq	r6, r9, r8, lsl #28
		for (int i=0; i<node_db->index; i++) {
     b34:	000b3b00 	andeq	r3, fp, r0, lsl #22
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b38:	17002500 	strne	r2, [r0, -r0, lsl #10]
     b3c:	00000b30 	andeq	r0, r0, r0, lsr fp
     b40:	00060e24 	andeq	r0, r6, r4, lsr #28
     b44:	13060b00 	movwne	r0, #27392	; 0x6b00
     b48:	00000b3b 	andeq	r0, r0, fp, lsr fp
     b4c:	dd240101 	stfles	f0, [r4, #-4]!
     b50:	09000008 	stmdbeq	r0, {r3}
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b54:	09890ec3 	stmibeq	r9, {r0, r1, r6, r7, r9, sl, fp}
     b58:	01010000 	mrseq	r0, (UNDEF: 1)
     b5c:	000c7204 	andeq	r7, ip, r4, lsl #4
     b60:	016e0c00 	cmneq	lr, r0, lsl #24
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b64:	000b6910 	andeq	r6, fp, r0, lsl r9
     b68:	6f041100 	svcvs	0x00041100
		ser_out(timeout, "\r\nFailed to reach the destination");
     b6c:	2000000b 	andcs	r0, r0, fp
     b70:	000b7b01 	andeq	r7, fp, r1, lsl #22
		proceed menu;
     b74:	09621600 	stmdbeq	r2!, {r9, sl, ip}^
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b7c:	000005ca 	andeq	r0, r0, sl, asr #11
     b80:	00000b86 	andeq	r0, r0, r6, lsl #23
		proceed menu;
     b84:	7b170025 	blvc	5c0c20 <__ccfg+0x5a0c78>
}
     b88:	2100000b 	tstcs	r0, fp
     b8c:	000009e6 	andeq	r0, r0, r6, ror #19
     b90:	13017f0c 	movwne	r7, #7948	; 0x1f0c
     b94:	00000b86 	andeq	r0, r0, r6, lsl #23
     b98:	96210101 	strtls	r0, [r1], -r1, lsl #2
     b9c:	0c000003 	stceq	0, cr0, [r0], {3}
     ba0:	95140182 	ldrls	r0, [r4, #-386]	; 0xfffffe7e
     ba4:	01000009 	tsteq	r0, r9
     ba8:	0d040a01 	vstreq	s0, [r4, #-4]
     bac:	0bcd0908 	bleq	ff342fd4 <_estack+0xdf33dfd4>
     bb0:	cb0b0000 	blgt	2c0bb8 <__ccfg+0x2a0c10>
     bb4:	0d000001 	stceq	0, cr0, [r0, #-4]
     bb8:	0962070f 	stmdbeq	r2!, {r0, r1, r2, r3, r8, r9, sl}^
     bbc:	0b000000 	bleq	bc4 <root+0x57c>
     bc0:	00000ca2 	andeq	r0, r0, r2, lsr #25
     bc4:	6203100d 	andvs	r1, r3, #13
     bc8:	02000009 	andeq	r0, r0, #9
     bcc:	0d790500 	cfldr64eq	mvdx0, [r9, #-0]
     bd0:	110d0000 	mrsne	r0, (UNDEF: 13)
     bd4:	000ba903 	andeq	sl, fp, r3, lsl #18
     bd8:	0d200a00 	vstmdbeq	r0!, {s0-s-1}
     bdc:	0c4b0916 	mcrreq	9, 1, r0, fp, cr6	; <UNPREDICTABLE>
     be0:	ac0b0000 	stcge	0, cr0, [fp], {-0}
     be4:	0d000004 	stceq	0, cr0, [r0, #-16]
     be8:	0c650817 	stcleq	8, cr0, [r5], #-92	; 0xffffffa4
     bec:	0b000000 	bleq	bf4 <root+0x5ac>
     bf0:	0000090b 	andeq	r0, r0, fp, lsl #18
     bf4:	8008180d 	andhi	r1, r8, sp, lsl #16
     bf8:	0400000c 	streq	r0, [r0], #-12
static void devinit_uart (int devnum) {
     bfc:	000bc60b 	andeq	ip, fp, fp, lsl #12
	adddevfunc (ioreq_uart_a, devnum);
     c00:	08190d00 	ldmdaeq	r9, {r8, sl, fp}
     c04:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
void udelay (volatile word n) {
     c08:	0c9a0b08 	vldmiaeq	sl, {d0-d3}
     c0c:	1a0d0000 	bne	340c14 <__ccfg+0x320c6c>
	while (n) {
     c10:	000cd108 	andeq	sp, ip, r8, lsl #2
     c14:	620b0c00 	andvs	r0, fp, #0, 24
}
     c18:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
	while (n--);
     c1c:	0ce7081b 	stcleq	8, cr0, [r7], #108	; 0x6c
     c20:	0b100000 	bleq	400c28 <__ccfg+0x3e0c80>
     c24:	00000a63 	andeq	r0, r0, r3, ror #20
		n--;
     c28:	e7081c0d 	str	r1, [r8, -sp, lsl #24]
     c2c:	1400000c 	strne	r0, [r0], #-12
     c30:	0001ae0b 	andeq	sl, r1, fp, lsl #28
void mdelay (volatile word n) {
     c34:	081d0d00 	ldmdaeq	sp, {r8, sl, fp}
     c38:	00000ce7 	andeq	r0, r0, r7, ror #25
	while (n) {
     c3c:	03140b18 	tsteq	r4, #24, 22	; 0x6000
     c40:	1e0d0000 	cdpne	0, 0, cr0, cr13, cr0, {0}
}
     c44:	00002c06 	andeq	r2, r0, r6, lsl #24
		udelay (999);
     c48:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
     c4c:	00002c01 	andeq	r2, r0, r1, lsl #24
		n--;
     c50:	000c6500 	andeq	r6, ip, r0, lsl #10
     c54:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c58:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c5c:	16000000 	strne	r0, [r0], -r0
void __pi_ondomain (lword d) {
     c60:	00000956 	andeq	r0, r0, r6, asr r9
     c64:	4b041100 	blmi	10506c <__ccfg+0xe50c4>
		if (__pi_systat.effpdm > 1)
     c68:	1500000c 	strne	r0, [r0, #-12]
     c6c:	00002c01 	andeq	r2, r0, r1, lsl #24
			__pi_systat.effpdm = 1;
     c70:	000c8000 	andeq	r8, ip, r0
	PRCMPowerDomainOn (d);
     c74:	002c1600 	eoreq	r1, ip, r0, lsl #12
     c78:	2c160000 	ldccs	0, cr0, [r6], {-0}
     c7c:	00000000 	andeq	r0, r0, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c80:	0c6b0411 	cfstrdeq	mvd0, [fp], #-68	; 0xffffffbc
     c84:	01150000 	tsteq	r5, r0
     c88:	0000002c 	andeq	r0, r0, ip, lsr #32
	__pi_systat.ondmns |= d;
     c8c:	00000caa 	andeq	r0, r0, sl, lsr #25
     c90:	00002c16 	andeq	r2, r0, r6, lsl ip
}
     c94:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     c98:	2c160000 	ldccs	0, cr0, [r6], {-0}
void __pi_offdomain (lword d) {
     c9c:	16000000 	strne	r0, [r0], -r0
     ca0:	00000caa 	andeq	r0, r0, sl, lsr #25
	PRCMPowerDomainOff (d);
     ca4:	000cb016 	andeq	fp, ip, r6, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ca8:	04110000 	ldreq	r0, [r1], #-0
     cac:	0000002c 	andeq	r0, r0, ip, lsr #32
     cb0:	0bcd0411 	bleq	ff341cfc <_estack+0xdf33ccfc>
	if (d & PRCM_DOMAIN_RFCORE) {
     cb4:	04110000 	ldreq	r0, [r1], #-0
     cb8:	00000c86 	andeq	r0, r0, r6, lsl #25
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cbc:	002c0115 	eoreq	r0, ip, r5, lsl r1
     cc0:	0cd10000 	ldcleq	0, cr0, [r1], {0}
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cc4:	a6160000 	ldrge	r0, [r6], -r0
     cc8:	16000009 	strne	r0, [r0], -r9
	__pi_systat.ondmns &= ~d;
     ccc:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
     cd0:	bc041100 	stflts	f1, [r4], {-0}
}
     cd4:	1500000c 	strne	r0, [r0, #-12]
     cd8:	00002c01 	andeq	r2, r0, r1, lsl #24
void __pi_syserror (word ec, const char *m) {
     cdc:	000ce700 	andeq	lr, ip, r0, lsl #14
	diag ("SYSERR: %x, %s", ec, m);
     ce0:	09a61600 	stmibeq	r6!, {r9, sl, ip}
     ce4:	11000000 	mrsne	r0, (UNDEF: 0)
  __ASM volatile ("cpsid i" : : : "memory");
     ce8:	000cd704 	andeq	sp, ip, r4, lsl #14
     cec:	0d350500 	cfldr32eq	mvfx0, [r5, #-0]
     cf0:	1f0d0000 	svcne	0x000d0000
     cf4:	000bd903 	andeq	sp, fp, r3, lsl #18
		all_leds_blink;
     cf8:	0ced1700 	stcleq	7, cr1, [sp]
     cfc:	6e210000 	cdpvs	0, 2, cr0, cr1, cr0, {0}
     d00:	0c000003 	stceq	0, cr0, [r0], {3}
     d04:	890e02d8 	stmdbhi	lr, {r3, r4, r6, r7, r9}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d08:	01000009 	tsteq	r0, r9
     d0c:	0c081c01 	stceq	12, cr1, [r8], {1}
     d10:	34090303 	strcc	r0, [r9], #-771	; 0xfffffcfd
     d14:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d18:	00003ca1 	andeq	r3, r0, r1, lsr #25
     d1c:	0703070c 	streq	r0, [r3, -ip, lsl #14]
	while (1) {
     d20:	00000962 	andeq	r0, r0, r2, ror #18
     d24:	0fcd1900 	svceq	0x00cd1900
     d28:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
     d2c:	099a0803 	ldmibeq	sl, {r0, r1, fp}
void tci_run_delay_timer () {
     d30:	00040000 	andeq	r0, r4, r0
	setdel = __pi_mintk - __pi_old;
     d34:	000a0904 	andeq	r0, sl, r4, lsl #18
     d38:	03090c00 	movweq	r0, #39936	; 0x9c00
     d3c:	000d0d03 	andeq	r0, sp, r3, lsl #26
     d40:	00291b00 	eoreq	r1, r9, r0, lsl #22
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	0c300000 	ldceq	0, cr0, [r0], #-0
     d48:	a408030b 	strge	r0, [r8], #-779	; 0xfffffcf5
     d4c:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d50:	00001f24 	andeq	r1, r0, r4, lsr #30
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d54:	0703140c 	streq	r1, [r3, -ip, lsl #8]
	sti_tim;
     d58:	00000962 	andeq	r0, r0, r2, ror #18
}
     d5c:	0be71900 	bleq	ff9c7164 <_estack+0xdf9c2164>
     d60:	150c0000 	strne	r0, [ip, #-0]
     d64:	09620703 	stmdbeq	r2!, {r0, r1, r8, r9, sl}^
     d68:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     d6c:	00004c8e 	andeq	r4, r0, lr, lsl #25
	cli_aux;
     d70:	0a03160c 	beq	c65a8 <__ccfg+0xa6600>
     d74:	00000b5c 	andeq	r0, r0, ip, asr fp
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d78:	47541904 	ldrbmi	r1, [r4, -r4, lsl #18]
     d7c:	170c0000 	strne	r0, [ip, -r0]
     d80:	099a0803 	ldmibeq	sl, {r0, r1, fp}
     d84:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
	sti_aux;
     d88:	0000000f 	andeq	r0, r0, pc
}
     d8c:	0f03180c 	svceq	0x0003180c
     d90:	00000da4 	andeq	r0, r0, r4, lsr #27
     d94:	095d190c 	ldmdbeq	sp, {r2, r3, r8, fp, ip}^
void AONRTCIntHandler () {
     d98:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d9c:	0db41503 	cfldr32eq	mvfx1, [r4, #12]!
     da0:	002c0000 	eoreq	r0, ip, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     da4:	000d3408 	andeq	r3, sp, r8, lsl #8
		if (__pi_utims [0] == 0)
     da8:	000db400 	andeq	fp, sp, r0, lsl #8
     dac:	00250900 	eoreq	r0, r5, r0, lsl #18
		if (*(__pi_utims [0])) {
     db0:	00030000 	andeq	r0, r3, r0
     db4:	0d410411 	cfstrdeq	mvd0, [r1, #-68]	; 0xffffffbc
			(*(__pi_utims [0]))--;
     db8:	dc040000 	stcle	0, cr0, [r4], {-0}
		if (__pi_utims [1] == 0)
     dbc:	0c00000b 	stceq	0, cr0, [r0], {11}
		if (*(__pi_utims [1])) {
     dc0:	411b031c 	tstmi	fp, ip, lsl r3
			aux_timer_inactive = 0;
     dc4:	2100000d 	tstcs	r0, sp
			(*(__pi_utims [1]))--;
     dc8:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
		if (__pi_utims [2] == 0)
     dcc:	14031e0c 	strne	r1, [r3], #-3596	; 0xfffff1f4
		if (*(__pi_utims [2])) {
     dd0:	00000dd6 	ldrdeq	r0, [r0], -r6
			(*(__pi_utims [2]))--;
     dd4:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
		if (__pi_utims [3] != 0) {
     dd8:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
			if (*(__pi_utims [3])) {
     ddc:	00070f24 	andeq	r0, r7, r4, lsr #30
				aux_timer_inactive = 0;
     de0:	0d1d0e00 	ldceq	14, cr0, [sp, #-0]
				(*(__pi_utims [3]))--;
     de4:	00000962 	andeq	r0, r0, r2, ror #18
	if (__pi_systat.ledsts) {
     de8:	ee240101 	sufs	f0, f4, f1
     dec:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
		if (__pi_systat.ledblc++ == 0) {
     df0:	0973161e 	ldmdbeq	r3!, {r1, r2, r3, r4, r9, sl, ip}^
     df4:	01010000 	mrseq	r0, (UNDEF: 1)
			if (__pi_systat.ledblk) {
     df8:	000c6924 	andeq	r6, ip, r4, lsr #18
     dfc:	201e0e00 	andscs	r0, lr, r0, lsl #28
     e00:	00000973 	andeq	r0, r0, r3, ror r9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e04:	87240101 	strhi	r0, [r4, -r1, lsl #2]!
     e08:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
				if (__pi_systat.ledsts & 0x2)
     e0c:	0dd61422 	cfldrdeq	mvd1, [r6, #136]	; 0x88
     e10:	01010000 	mrseq	r0, (UNDEF: 1)
     e14:	00001624 	andeq	r1, r0, r4, lsr #12
				if (__pi_systat.ledsts & 0x4)
     e18:	180c0f00 	stmdane	ip, {r8, r9, sl, fp}
				__pi_systat.ledblk = 0;
     e1c:	00000cf9 	strdeq	r0, [r0], -r9
     e20:	1c260101 	stfnes	f0, [r6], #-4
			if (__pi_systat.fstblk)
     e24:	01000006 	tsteq	r0, r6
     e28:	00000047 	andeq	r0, r0, r7, asr #32
				__pi_systat.ledblc = 200;
     e2c:	58061910 	stmdapl	r6, {r4, r8, fp, ip}
	if (events & AON_RTC_EVFLAGS_CH0) {
     e30:	2700000e 	strcs	r0, [r0, -lr]
		cli_tim;
     e34:	00000bed 	andeq	r0, r0, sp, ror #23
		__pi_new += setdel;
     e38:	09c32700 	stmibeq	r3, {r8, r9, sl, sp}^
     e3c:	27010000 	strcs	r0, [r1, -r0]
		setdel = 0;
     e40:	00000f21 	andeq	r0, r0, r1, lsr #30
		RISE_N_SHINE;
     e44:	0b352702 	bleq	d4aa54 <__ccfg+0xd2aaac>
		__pi_new += setdel;
     e48:	27030000 	strcs	r0, [r3, -r0]
		RISE_N_SHINE;
     e4c:	00000983 	andeq	r0, r0, r3, lsl #19
     e50:	09cd2704 	stmibeq	sp, {r2, r8, r9, sl, sp}^
		aux_timer_inactive = 1;
     e54:	00050000 	andeq	r0, r5, r0
     e58:	001f2426 	andseq	r2, pc, r6, lsr #8
				if (__pi_systat.ledsts & 0x1)
     e5c:	00470100 	subeq	r0, r7, r0, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e60:	22100000 	andscs	r0, r0, #0
     e64:	000e8806 	andeq	r8, lr, r6, lsl #16
				if (__pi_systat.ledsts & 0x2)
     e68:	033a2700 	teqeq	sl, #0, 14
     e6c:	27000000 	strcs	r0, [r0, -r0]
     e70:	00000653 	andeq	r0, r0, r3, asr r6
				if (__pi_systat.ledsts & 0x8)
     e74:	04662701 	strbteq	r2, [r6], #-1793	; 0xfffff8ff
				__pi_systat.ledblk = 1;
     e78:	27020000 	strcs	r0, [r2, -r0]
     e7c:	000008a8 	andeq	r0, r0, r8, lsr #17
		if (aux_timer_inactive) {
     e80:	0b182703 	bleq	60aa94 <__ccfg+0x5eaaec>
			cli_aux;
     e84:	00040000 	andeq	r0, r4, r0
     e88:	0004920f 	andeq	r9, r4, pc, lsl #4
     e8c:	2c101c00 	ldccs	12, cr1, [r0], {-0}
     e90:	000ebd08 	andeq	fp, lr, r8, lsl #26
     e94:	0f410b00 	svceq	0x00410b00
     e98:	2d100000 	ldccs	0, cr0, [r0, #-0]
     e9c:	0009260a 	andeq	r2, r9, sl, lsl #12
     ea0:	7f0b0000 	svcvc	0x000b0000
     ea4:	10000007 	andne	r0, r0, r7
     ea8:	0ebd072e 	cdpeq	7, 11, cr0, cr13, cr14, {1}
word tci_update_delay_ticks (Boolean force) {
     eac:	0b010000 	bleq	40eb4 <__ccfg+0x20f0c>
	cli_tim;
     eb0:	000005dc 	ldrdeq	r0, [r0], -ip
     eb4:	63102f10 	tstvs	r0, #16, 30	; 0x40
	if (setdel) {
     eb8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ebc:	05c30800 	strbeq	r0, [r3, #2048]	; 0x800
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ec0:	0ecd0000 	cdpeq	0, 12, cr0, cr13, cr0, {0}
     ec4:	25090000 	strcs	r0, [r9, #-0]
     ec8:	13000000 	movwne	r0, #0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ecc:	47541200 	ldrbmi	r1, [r4, -r0, lsl #4]
				AON_RTC_O_CH0CMP)) - gettav ());
     ed0:	04640000 	strbteq	r0, [r4], #-0
	return NO;
     ed4:	f7083310 			; <UNDEFINED> instruction: 0xf7083310
			setdel = 0;
     ed8:	0b00000e 	bleq	f18 <__pi_uart_setrate+0x1c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     edc:	00000049 	andeq	r0, r0, r9, asr #32
     ee0:	f7103410 			; <UNDEFINED> instruction: 0xf7103410
}
     ee4:	0000000e 	andeq	r0, r0, lr
		sti_tim;
     ee8:	00052d13 	andeq	r2, r5, r3, lsl sp
		return YES;
     eec:	0a351000 	beq	d44ef4 <__ccfg+0xd24f4c>
     ef0:	00000926 	andeq	r0, r0, r6, lsr #18
     ef4:	08000460 	stmdaeq	r0, {r5, r6, sl}
     ef8:	00000e88 	andeq	r0, r0, r8, lsl #29
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     efc:	00000f07 	andeq	r0, r0, r7, lsl #30
	UARTDisable (UART0_BASE);
     f00:	00002509 	andeq	r2, r0, r9, lsl #10
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f04:	12002700 	andne	r2, r0, #0, 14
	UARTDisable (UART0_BASE);
     f08:	00000461 	andeq	r0, r0, r1, ror #8
	UARTConfigSetExpClk (UART0_BASE,
     f0c:	3c100484 	cfldrscc	mvf0, [r0], {132}	; 0x84
     f10:	000f5808 	andeq	r5, pc, r8, lsl #16
     f14:	64691000 	strbtvs	r1, [r9], #-0
     f18:	0a3d1000 	beq	f44f20 <__ccfg+0xf24f78>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	00000926 	andeq	r0, r0, r6, lsr #18
     f20:	69671000 	stmdbvs	r7!, {ip}^
     f24:	3e100064 	cdpcc	0, 1, cr0, cr0, cr4, {3}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f28:	0009320b 	andeq	r3, r9, fp, lsl #4
     f2c:	d30b0200 	movwle	r0, #45568	; 0xb200
     f30:	1000000c 	andne	r0, r0, ip
	urates [0] = rate;
     f34:	0ecd0e3f 	mcreq	14, 6, r0, cr13, cr15, {1}
}
     f38:	13040000 	movwne	r0, #16384	; 0x4000
     f3c:	000002a5 	andeq	r0, r0, r5, lsr #5
     f40:	580a4010 	stmdapl	sl, {r4, lr}
     f44:	6800000f 	stmdavs	r0, {r0, r1, r2, r3}
     f48:	04c21304 	strbeq	r1, [r2], #772	; 0x304
     f4c:	41100000 	tstmi	r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f50:	0009260a 	andeq	r2, r9, sl, lsl #12
     f54:	00048100 	andeq	r8, r4, r0, lsl #2
     f58:	00092608 	andeq	r2, r9, r8, lsl #12
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f5c:	000f6800 	andeq	r6, pc, r0, lsl #16
     f60:	00250900 	eoreq	r0, r5, r0, lsl #18
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f64:	00180000 	andseq	r0, r8, r0
     f68:	0006f70f 	andeq	pc, r6, pc, lsl #14
	__pi_uart_setrate (urates [0], __pi_uart);
     f6c:	44100600 	ldrmi	r0, [r0], #-1536	; 0xfffffa00
     f70:	000fb708 	andeq	fp, pc, r8, lsl #14
     f74:	69671000 	stmdbvs	r7!, {ip}^
     f78:	45100064 	ldrmi	r0, [r0, #-100]	; 0xffffff9c
     f7c:	0009320b 	andeq	r3, r9, fp, lsl #4
     f80:	74100000 	ldrvc	r0, [r0], #-0
     f84:	10006570 	andne	r6, r0, r0, ror r5
	switch (operation) {
     f88:	09260a46 	stmdbeq	r6!, {r1, r2, r6, r9, fp}
static int ioreq_uart_a (int operation, char *buf, int len) {
     f8c:	0b020000 	bleq	80f94 <__ccfg+0x60fec>
     f90:	00000d82 	andeq	r0, r0, r2, lsl #27
     f94:	260a4710 			; <UNDEFINED> instruction: 0x260a4710
     f98:	03000009 	movweq	r0, #9
     f9c:	0004df0b 	andeq	sp, r4, fp, lsl #30
				*buf++ = uart_a_read;
     fa0:	0a481000 	beq	1204fa8 <__ccfg+0x11e5000>
     fa4:	00000926 	andeq	r0, r0, r6, lsr #18
			while (len && uart_a_char_available) {
     fa8:	02990b04 	addseq	r0, r9, #4, 22	; 0x1000
     fac:	49100000 	ldmdbmi	r0, {}	; <UNPREDICTABLE>
     fb0:	0009260a 	andeq	r2, r9, sl, lsl #12
			if (len != operation) {
     fb4:	0f000500 	svceq	0x00000500
}
     fb8:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
     fbc:	084c1006 	stmdaeq	ip, {r1, r2, ip}^
			uart_a_disable_int;
     fc0:	00001006 	andeq	r1, r0, r6
			if (uart_a_char_available) {
     fc4:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
				*buf++ = uart_a_read;
     fc8:	0b4d1000 	bleq	1344fd0 <__ccfg+0x1325028>
			uart_a_disable_int;
     fcc:	00000932 	andeq	r0, r0, r2, lsr r9
     fd0:	70741000 	rsbsvc	r1, r4, r0
			if (uart_a_char_available) {
     fd4:	4e100065 	cdpmi	0, 1, cr0, cr0, cr5, {3}
     fd8:	0009260a 	andeq	r2, r9, sl, lsl #12
				uart_a_enable_int;
     fdc:	820b0200 	andhi	r0, fp, #0, 4
     fe0:	1000000d 	andne	r0, r0, sp
				goto Redo_rx;
     fe4:	09260a4f 	stmdbeq	r6!, {r0, r1, r2, r3, r6, r9, fp}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fe8:	0b030000 	bleq	c0ff0 <__ccfg+0xa1048>
     fec:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
			return -2;
     ff0:	260a5010 			; <UNDEFINED> instruction: 0x260a5010
     ff4:	04000009 	streq	r0, [r0], #-9
				uart_a_write (*buf);
     ff8:	0002990b 	andeq	r9, r2, fp, lsl #18
     ffc:	0a511000 	beq	1445004 <__ccfg+0x142505c>
			while (len && uart_a_room_in_tx) {
    1000:	00000926 	andeq	r0, r0, r6, lsr #18
    1004:	a00f0005 	andge	r0, pc, r5
    1008:	1a00000b 	bne	103c <ioreq_uart_a+0xb4>
			if (len != operation) {
    100c:	62085410 	andvs	r5, r8, #16, 8	; 0x10000000
			uart_a_disable_int;
    1010:	10000010 	andne	r0, r0, r0, lsl r0
    1014:	00646967 	rsbeq	r6, r4, r7, ror #18
			if (uart_a_room_in_tx) {
    1018:	320b5510 	andcc	r5, fp, #16, 10	; 0x4000000
    101c:	00000009 	andeq	r0, r0, r9
				uart_a_enable_int;
    1020:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1024:	0a561000 	beq	158502c <__ccfg+0x1565084>
				*buf++ = uart_a_read;
    1028:	00000926 	andeq	r0, r0, r6, lsr #18
			if (uart_a_room_in_tx) {
    102c:	0d820b02 	vstreq	d0, [r2, #8]
				uart_a_write (*buf);
    1030:	57100000 	ldrpl	r0, [r0, -r0]
    1034:	0009260a 	andeq	r2, r9, sl, lsl #12
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1038:	df0b0300 	svcle	0x000b0300
    103c:	10000004 	andne	r0, r0, r4
			uart_a_enable_int;
    1040:	09260a58 	stmdbeq	r6!, {r3, r4, r6, r9, fp}
    1044:	0b040000 	bleq	10104c <__ccfg+0xe10a4>
    1048:	00000299 	muleq	r0, r9, r2
			return 0;
    104c:	260a5910 			; <UNDEFINED> instruction: 0x260a5910
			if (len == UART_CNTRL_SETRATE) {
    1050:	05000009 	streq	r0, [r0, #-9]
				if (__pi_uart_setrate (*((word*)buf),
    1054:	0004920b 	andeq	r9, r4, fp, lsl #4
    1058:	075a1000 	ldrbeq	r1, [sl, -r0]
    105c:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
				syserror (EREQPAR, "uar");
    1060:	500f0006 	andpl	r0, pc, r6
			syserror (ENOOPER, "uai");
    1064:	0800000e 	stmdaeq	r0, {r1, r2, r3}
			if (len == UART_CNTRL_GETRATE) {
    1068:	cb085d10 	blgt	2184b0 <__ccfg+0x1f8508>
				return 1;
    106c:	10000010 	andne	r0, r0, r0, lsl r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1070:	00646967 	rsbeq	r6, r4, r7, ror #18
			syserror (ENOOPER, "uai");
    1074:	320b5e10 	andcc	r5, fp, #16, 28	; 0x100
    1078:	00000009 	andeq	r0, r0, r9
    107c:	65707410 	ldrbvs	r7, [r0, #-1040]!	; 0xfffffbf0
    1080:	0a5f1000 	beq	17c5088 <__ccfg+0x17a50e0>
    1084:	00000926 	andeq	r0, r0, r6, lsr #18
    1088:	0d820b02 	vstreq	d0, [r2, #8]
    108c:	60100000 	andsvs	r0, r0, r0
    1090:	0009260a 	andeq	r2, r9, sl, lsl #12
    1094:	df0b0300 	svcle	0x000b0300
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1098:	10000004 	andne	r0, r0, r4
void UART0IntHandler () {
    109c:	09260a61 	stmdbeq	r6!, {r0, r5, r6, r9, fp}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10a0:	0b040000 	bleq	1010a8 <__ccfg+0xe1100>
    10a4:	00000299 	muleq	r0, r9, r2
    10a8:	260a6210 			; <UNDEFINED> instruction: 0x260a6210
    10ac:	05000009 	streq	r0, [r0, #-9]
    10b0:	0000640b 	andeq	r6, r0, fp, lsl #8
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10b4:	0a631000 	beq	18c50bc <__ccfg+0x18a5114>
    10b8:	00000926 	andeq	r0, r0, r6, lsr #18
		RISE_N_SHINE;
    10bc:	08290b06 	stmdaeq	r9!, {r1, r2, r8, r9, fp}
    10c0:	64100000 	ldrvs	r0, [r0], #-0
		i_trigger (devevent (UART_A, READ));
    10c4:	0009260a 	andeq	r2, r9, sl, lsl #12
    10c8:	0f000700 	svceq	0x00000700
    10cc:	00000eea 	andeq	r0, r0, sl, ror #29
    10d0:	08681008 	stmdaeq	r8!, {r3, ip}^
    10d4:	00001134 	andeq	r1, r0, r4, lsr r1
    10d8:	64696710 	strbtvs	r6, [r9], #-1808	; 0xfffff8f0
    10dc:	0b691000 	bleq	1a450e4 <__ccfg+0x1a2513c>
    10e0:	00000932 	andeq	r0, r0, r2, lsr r9
    10e4:	70741000 	rsbsvc	r1, r4, r0
    10e8:	6a100065 	bvs	401284 <__ccfg+0x3e12dc>
    10ec:	0009260a 	andeq	r2, r9, sl, lsl #12
    10f0:	820b0200 	andhi	r0, fp, #0, 4
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10f4:	1000000d 	andne	r0, r0, sp
    10f8:	09260a6b 	stmdbeq	r6!, {r0, r1, r3, r5, r6, r9, fp}
    10fc:	0b030000 	bleq	c1104 <__ccfg+0xa115c>
		i_trigger (devevent (UART_A, WRITE));
    1100:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1104:	260a6c10 			; <UNDEFINED> instruction: 0x260a6c10
    1108:	04000009 	streq	r0, [r0], #-9
		RISE_N_SHINE;
    110c:	0002990b 	andeq	r9, r2, fp, lsl #18
    1110:	0a6d1000 	beq	1b45118 <__ccfg+0x1b25170>
    1114:	00000926 	andeq	r0, r0, r6, lsr #18
		i_trigger (devevent (UART_A, WRITE));
    1118:	00640b05 	rsbeq	r0, r4, r5, lsl #22
    111c:	6e100000 	cdpvs	0, 1, cr0, cr0, cr0, {0}
    1120:	0009260a 	andeq	r2, r9, sl, lsl #12
    1124:	290b0600 	stmdbcs	fp, {r9, sl}
    1128:	10000008 	andne	r0, r0, r8
    112c:	09260a6f 	stmdbeq	r6!, {r0, r1, r2, r3, r5, r6, r9, fp}
    1130:	00070000 	andeq	r0, r7, r0
    1134:	0002c30f 	andeq	ip, r2, pc, lsl #6
    1138:	76101e00 	ldrvc	r1, [r0], -r0, lsl #28
    113c:	0011b708 	andseq	fp, r1, r8, lsl #14
    1140:	69671000 	stmdbvs	r7!, {ip}^
}
    1144:	77100064 	ldrvc	r0, [r0, -r4, rrx]
    1148:	0009320b 	andeq	r3, r9, fp, lsl #4
    114c:	74100000 	ldrvc	r0, [r0], #-0
    1150:	10006570 	andne	r6, r0, r0, ror r5
    1154:	09260a78 	stmdbeq	r6!, {r3, r4, r5, r6, r9, fp}
void __buttons_setirq (int val) {
    1158:	0b020000 	bleq	81160 <__ccfg+0x611b8>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    115c:	00000d82 	andeq	r0, r0, r2, lsl #27
    1160:	260a7910 			; <UNDEFINED> instruction: 0x260a7910
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1164:	03000009 	movweq	r0, #9
    1168:	0004df0b 	andeq	sp, r4, fp, lsl #30
    116c:	0a7a1000 	beq	1e85174 <__ccfg+0x1e651cc>
		bn = BUTTON_GPIO (__button_list [i]);
    1170:	00000926 	andeq	r0, r0, r6, lsr #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	02990b04 	addseq	r0, r9, #4, 22	; 0x1000
    1178:	7b100000 	blvc	401180 <__ccfg+0x3e11d8>
    117c:	0009260a 	andeq	r2, r9, sl, lsl #12
    1180:	780b0500 	stmdavc	fp, {r8, sl}
    1184:	10000007 	andne	r0, r0, r7
    1188:	09260a7c 	stmdbeq	r6!, {r2, r3, r4, r5, r6, r9, fp}
}
    118c:	0b060000 	bleq	181194 <__ccfg+0x1611ec>
    1190:	00000829 	andeq	r0, r0, r9, lsr #16
    1194:	260a7d10 			; <UNDEFINED> instruction: 0x260a7d10
    1198:	07000009 	streq	r0, [r0, -r9]
void __pinlist_setirq (int val) {
    119c:	0004920b 	andeq	r9, r4, fp, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
    11a0:	077e1000 	ldrbeq	r1, [lr, -r0]!
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11a4:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a8:	00640b08 	rsbeq	r0, r4, r8, lsl #22
	for (i = 0; i < N_PINLIST; i++) {
    11ac:	7f100000 	svcvc	0x00100000
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11b0:	0009260a 	andeq	r2, r9, sl, lsl #12
    11b4:	28001c00 	stmdacs	r0, {sl, fp, ip}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11b8:	00000e90 	muleq	r0, r0, lr
    11bc:	c3060301 	movwgt	r0, #25345	; 0x6301
    11c0:	01000005 	tsteq	r0, r5
	for (i = 0; i < N_PINLIST; i++) {
    11c4:	069d0305 	ldreq	r0, [sp], r5, lsl #6
}
    11c8:	c3082000 	movwgt	r2, #32768	; 0x8000
    11cc:	da000005 	ble	11e8 <GPIOIntHandler+0x10>
    11d0:	09000011 	stmdbeq	r0, {r0, r4}
    11d4:	00000025 	andeq	r0, r0, r5, lsr #32
void GPIOIntHandler () {
    11d8:	5a280031 	bpl	a012a4 <__ccfg+0x9e12fc>
if (buttons_int) {
    11dc:	01000004 	tsteq	r0, r4
    11e0:	11ca0604 	bicne	r0, sl, r4, lsl #12
	buttons_disable ();
    11e4:	05010000 	streq	r0, [r1, #-0]
    11e8:	00066803 	andeq	r6, r6, r3, lsl #16
	i_trigger ((aword)&__button_list);
    11ec:	66732920 	ldrbtvs	r2, [r3], -r0, lsr #18
    11f0:	05010064 	streq	r0, [r1, #-100]	; 0xffffff9c
    11f4:	00002c05 	andeq	r2, r0, r5, lsl #24
    11f8:	03050100 	movweq	r0, #20736	; 0x5100
    11fc:	20000000 	andcs	r0, r0, r0
    1200:	00002c08 	andeq	r2, r0, r8, lsl #24
    1204:	00121000 	andseq	r1, r2, r0
    1208:	00250900 	eoreq	r0, r5, r0, lsl #18
    120c:	00010000 	andeq	r0, r1, r0
    1210:	0006e628 	andeq	lr, r6, r8, lsr #12
    1214:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
	RISE_N_SHINE;
    1218:	00001200 	andeq	r1, r0, r0, lsl #4
    121c:	60030501 	andvs	r0, r3, r1, lsl #10
    1220:	28200006 	stmdacs	r0!, {r1, r2}
if (pin_sensor_int) {
    1224:	00000993 	muleq	r0, r3, r9
    1228:	2c050901 			; <UNDEFINED> instruction: 0x2c050901
	i_trigger ((aword)(&__input_pins));
    122c:	01000000 	mrseq	r0, (UNDEF: 0)
    1230:	05540305 	ldrbeq	r0, [r4, #-773]	; 0xfffffcfb
    1234:	84282000 	strthi	r2, [r8], #-0
    1238:	01000004 	tsteq	r0, r4
    123c:	0ebd060a 	cdpeq	6, 11, cr0, cr13, cr10, {0}
    1240:	05010000 	streq	r0, [r1, #-0]
    1244:	00064803 	andeq	r4, r6, r3, lsl #16
    1248:	04b42820 	ldrteq	r2, [r4], #2080	; 0x820
    124c:	0b010000 	bleq	41254 <__ccfg+0x212ac>
    1250:	00092609 	andeq	r2, r9, r9, lsl #12
    1254:	03050100 	movweq	r0, #20736	; 0x5100
	__pinsen_disable_and_clear;
    1258:	2000069c 	mulcs	r0, ip, r6
	RISE_N_SHINE;
    125c:	00002028 	andeq	r2, r0, r8, lsr #32
    1260:	090c0100 	stmdbeq	ip, {r8}
    1264:	00000926 	andeq	r0, r0, r6, lsr #18
}
    1268:	5c030501 	cfstr32pl	mvfx0, [r3], {1}
    126c:	28200006 	stmdacs	r0!, {r1, r2}
    1270:	00000475 	andeq	r0, r0, r5, ror r4
    1274:	26090d01 	strcs	r0, [r9], -r1, lsl #26
    1278:	01000009 	tsteq	r0, r9
void system_init () {
    127c:	069a0305 	ldreq	r0, [sl], r5, lsl #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1280:	b7282000 	strlt	r2, [r8, -r0]!
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1284:	0100000c 	tsteq	r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1288:	0926090e 	stmdbeq	r6!, {r1, r2, r3, r8, fp}
    128c:	05010000 	streq	r0, [r1, #-0]
    1290:	00069b03 	andeq	r9, r6, r3, lsl #22
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1294:	028b2820 	addeq	r2, fp, #32, 16	; 0x200000
    1298:	0f010000 	svceq	0x00010000
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    129c:	00092609 	andeq	r2, r9, r9, lsl #12
    12a0:	03050100 	movweq	r0, #20736	; 0x5100
    12a4:	2000069e 	mulcs	r0, lr, r6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12a8:	00085f28 	andeq	r5, r8, r8, lsr #30
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12ac:	06100100 	ldreq	r0, [r0], -r0, lsl #2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12b0:	00000962 	andeq	r0, r0, r2, ror #18
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12b4:	60030501 	andvs	r0, r3, r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12b8:	28200005 	stmdacs	r0!, {r0, r2}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12bc:	00000445 	andeq	r0, r0, r5, asr #8
		pin = (port_confs [i] >> 19) & 0x1f;
    12c0:	ce0e1201 	cdpgt	2, 0, cr1, cr14, cr1, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	01000012 	tsteq	r0, r2, lsl r0
		pin = (port_confs [i] >> 19) & 0x1f;
    12c8:	06a00305 	strteq	r0, [r0], r5, lsl #6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12cc:	04112000 	ldreq	r2, [r1], #-0
    12d0:	00000f07 	andeq	r0, r0, r7, lsl #30
    12d4:	01b6012a 			; <UNDEFINED> instruction: 0x01b6012a
    12d8:	23010000 	movwcs	r0, #4096	; 0x1000
		if (port_confs [i] & 0x80)
    12dc:	48010602 	stmdami	r1, {r1, r9, sl}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12e0:	fc000006 	stc2	0, cr0, [r0], {6}
    12e4:	0100000b 	tsteq	r0, fp
		if (port_confs [i] & 0x40)
    12e8:	0015ef9c 	mulseq	r5, ip, pc	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ec:	0c332b00 			; <UNDEFINED> instruction: 0x0c332b00
    12f0:	23010000 	movwcs	r0, #4096	; 0x1000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f4:	09621102 	stmdbeq	r2!, {r1, r8, ip}^
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12f8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12fc:	3b2c0000 	blcc	b01304 <__ccfg+0xae135c>
	all_leds_blink;
    1300:	0100000c 	tsteq	r0, ip
    1304:	9819022c 	ldmdals	r9, {r2, r3, r5, r9}
    1308:	2c000006 	stccs	0, cr0, [r0], {6}
    130c:	0000091f 	andeq	r0, r0, pc, lsl r9
    1310:	10026401 	andne	r6, r2, r1, lsl #8
    1314:	000006e6 	andeq	r0, r0, r6, ror #13
    1318:	00008d2c 	andeq	r8, r0, ip, lsr #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    131c:	02670100 	rsbeq	r0, r7, #0, 2
    1320:	00070016 	andeq	r0, r7, r6, lsl r0
    1324:	08062c00 	stmdaeq	r6, {sl, fp, sp}
    1328:	90010000 	andls	r0, r1, r0
    132c:	07441c02 	strbeq	r1, [r4, -r2, lsl #24]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1330:	eb2c0000 	bl	b01338 <__ccfg+0xae1390>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1334:	01000001 	tsteq	r0, r1
    1338:	4c180294 	lfmmi	f0, 4, [r8], {148}	; 0x94
	IntEnable (INT_AON_RTC_COMB);
    133c:	2c000007 	stccs	0, cr0, [r0], {7}
    1340:	00000376 	andeq	r0, r0, r6, ror r3
    1344:	1b02a201 	blne	a9b50 <__ccfg+0x89ba8>
	__pi_malloc_init ();
    1348:	0000076e 	andeq	r0, r0, lr, ror #14
	IntEnable (INT_AON_GPIO_EDGE);
    134c:	0002d32c 	andeq	sp, r2, ip, lsr #6
    1350:	02a50100 	adceq	r0, r5, #0, 2
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1354:	00077617 	andeq	r7, r7, r7, lsl r6
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1358:	07952c00 	ldreq	r2, [r5, r0, lsl #24]
    135c:	c0010000 	andgt	r0, r1, r0
    1360:	07bc1b02 	ldreq	r1, [ip, r2, lsl #22]!
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1364:	002c0000 	eoreq	r0, ip, r0
    1368:	01000005 	tsteq	r0, r5
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    136c:	d22102d0 	eorle	r0, r1, #208, 4
    1370:	2c000007 	stccs	0, cr0, [r0], {7}
    1374:	0000096a 	andeq	r0, r0, sl, ror #18
	urates [0] = UART_RATE / 100;
    1378:	1c02d601 	stcne	6, cr13, [r2], {1}
    137c:	000007ec 	andeq	r0, r0, ip, ror #15
	reinit_uart ();
    1380:	00067e2c 	andeq	r7, r6, ip, lsr #28
	EXTRA_INITIALIZERS;
    1384:	02e30100 	rsceq	r0, r3, #0, 2
    1388:	00085e1a 	andeq	r5, r8, sl, lsl lr
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    138c:	0d3f2c00 	ldceq	12, cr2, [pc, #-0]	; 1394 <system_init+0x118>
    1390:	ef010000 	svc	0x00010000
    1394:	08cc2302 	stmiaeq	ip, {r1, r8, r9, sp}^
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1398:	f02c0000 			; <UNDEFINED> instruction: 0xf02c0000
    139c:	01000003 	tsteq	r0, r3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	f41e0305 			; <UNDEFINED> instruction: 0xf41e0305
    13a4:	2c000008 	stccs	0, cr0, [r0], {8}
			devinit [i] . init (devinit [i] . param);
    13a8:	00000552 	andeq	r0, r0, r2, asr r5
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13ac:	1d030801 	stcne	8, cr0, [r3, #-4]
    13b0:	000008fc 	strdeq	r0, [r0], -ip
    13b4:	000de92c 	andeq	lr, sp, ip, lsr #18
	IntEnable (INT_UART0_COMB);
    13b8:	03100100 	tsteq	r0, #0, 2
    13bc:	00092024 	andeq	r2, r9, r4, lsr #32
}
    13c0:	07ad2c00 	streq	r2, [sp, r0, lsl #24]!
	tci_run_auxiliary_timer ();
    13c4:	13010000 	movwne	r0, #4096	; 0x1000
		diag ("");
    13c8:	09282003 	stmdbeq	r8!, {r0, r1, sp}
    13cc:	752c0000 	strvc	r0, [ip, #-0]!
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    13d0:	0100000a 	tsteq	r0, sl
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13d4:	32260316 	eorcc	r0, r6, #1476395008	; 0x58000000
		diag ("Leftover RAM: %d bytes",
    13d8:	2c000009 	stccs	0, cr0, [r0], {9}
    13dc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13e0:	1e033001 	cdpne	0, 0, cr3, cr3, cr1, {0}
    13e4:	00000982 	andeq	r0, r0, r2, lsl #19
    13e8:	0002002c 	andeq	r0, r2, ip, lsr #32
    13ec:	03330100 	teqeq	r3, #0, 2
    13f0:	00098a1d 	andeq	r8, r9, sp, lsl sl
    13f4:	00542c00 	subseq	r2, r4, r0, lsl #24
    13f8:	3b010000 	blcc	41400 <__ccfg+0x21458>
    13fc:	09ae2003 	stmibeq	lr!, {r0, r1, sp}
    1400:	462c0000 	strtmi	r0, [ip], -r0
    1404:	0100000a 	tsteq	r0, sl
    1408:	b620033e 			; <UNDEFINED> instruction: 0xb620033e
    140c:	2c000009 	stccs	0, cr0, [r0], {9}
    1410:	00000d91 	muleq	r0, r1, sp
    1414:	26034601 	strcs	r4, [r3], -r1, lsl #12
    1418:	000009d8 	ldrdeq	r0, [r0], -r8
    141c:	00059e2c 	andeq	r9, r5, ip, lsr #28
    1420:	03610100 	cmneq	r1, #0, 2
    1424:	000a2020 	andeq	r2, sl, r0, lsr #32
    1428:	09a72c00 	stmibeq	r7!, {sl, fp, sp}
    142c:	64010000 	strvs	r0, [r1], #-0
    1430:	0a281f03 	beq	a09044 <__ccfg+0x9e909c>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1434:	f22c0000 	vhadd.s32	d0, d12, d0
    1438:	0100000a 	tsteq	r0, sl
    143c:	4c29036c 	stcmi	3, cr0, [r9], #-432	; 0xfffffe50
    1440:	2c00000a 	stccs	0, cr0, [r0], {10}
    1444:	00000a27 	andeq	r0, r0, r7, lsr #20
    1448:	22036f01 	andcs	r6, r3, #1, 30
    144c:	00000a54 	andeq	r0, r0, r4, asr sl
    1450:	0004e92c 	andeq	lr, r4, ip, lsr #18
}
    1454:	03770100 	cmneq	r7, #0, 2
__attribute__ ((noreturn)) void __pi_release () {
    1458:	000a761a 	andeq	r7, sl, sl, lsl r6
    145c:	04992c00 	ldreq	r2, [r9], #3072	; 0xc00
    1460:	8c010000 	stchi	0, cr0, [r1], {-0}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1464:	0ad61603 	beq	ff586c78 <_estack+0xdf581c78>
	check_stack_overflow;
    1468:	8e2c0000 	cdphi	0, 2, cr0, cr12, cr0, {0}
    146c:	01000008 	tsteq	r0, r8
    1470:	de1d038f 	cdple	3, 1, cr0, cr13, cr15, {4}
	update_n_wake (MAX_WORD, NO);
    1474:	2c00000a 	stccs	0, cr0, [r0], {10}
    1478:	00000872 	andeq	r0, r0, r2, ror r8
    147c:	15039801 	strne	r9, [r3, #-2049]	; 0xfffff7ff
	for_all_tasks (__pi_curr) {
    1480:	00000af8 	strdeq	r0, [r0], -r8
    1484:	000d202c 	andeq	r2, sp, ip, lsr #32
    1488:	039c0100 	orrseq	r0, ip, #0, 2
  __ASM volatile ("cpsid i" : : : "memory");
    148c:	000b0610 	andeq	r0, fp, r0, lsl r6
	__SLEEP;
    1490:	071a2c00 	ldreq	r2, [sl, -r0, lsl #24]
    1494:	a1010000 	mrsge	r0, (UNDEF: 1)
    1498:	0b6a1303 	bleq	1a860ac <__ccfg+0x1a66104>
    149c:	272c0000 	strcs	r0, [ip, -r0]!
	system_event_count ++;
    14a0:	0100000b 	tsteq	r0, fp
    14a4:	781103a6 	ldmdavc	r1, {r1, r2, r5, r7, r8, r9}
	switch (__pi_systat.effpdm) {
    14a8:	2d00000b 	stccs	0, cr0, [r0, #-44]	; 0xffffffd4
    14ac:	0000074c 	andeq	r0, r0, ip, asr #14
    14b0:	0000076e 	andeq	r0, r0, lr, ror #14
    14b4:	000014ed 	andeq	r1, r0, sp, ror #9
			__WFI ();
    14b8:	000c7a2e 	andeq	r7, ip, lr, lsr #20
    14bc:	02950100 	addseq	r0, r5, #0, 2
    14c0:	0009320c 	andeq	r3, r9, ip, lsl #4
	check_stack_overflow;
    14c4:	66910200 	ldrvs	r0, [r1], r0, lsl #4
    14c8:	001b112f 	andseq	r1, fp, pc, lsr #2
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    14cc:	00076000 	andeq	r6, r7, r0
    14d0:	0000c000 	andeq	ip, r0, r0
			(__pi_curr->code) (tstate (__pi_curr));
    14d4:	029a0100 	addseq	r0, sl, #0, 2
			goto Redo;
    14d8:	1b303008 	blne	c0d500 <__ccfg+0xbed558>
	for_all_tasks (__pi_curr) {
    14dc:	00290000 	eoreq	r0, r9, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14e0:	24300000 	ldrtcs	r0, [r0], #-0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14e4:	3d00001b 	stccc	0, cr0, [r0, #-108]	; 0xffffff94
    14e8:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14ec:	00e03100 	rsceq	r3, r0, r0, lsl #2
    14f0:	15440000 	strbne	r0, [r4, #-0]
    14f4:	622e0000 	eorvs	r0, lr, #0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14f8:	01000003 	tsteq	r0, r3
    14fc:	260b02a6 	strcs	r0, [fp], -r6, lsr #5
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1500:	02000009 	andeq	r0, r0, #9
    1504:	00316691 	mlaseq	r1, r1, r6, r6
			__WFI ();
    1508:	1f000001 	svcne	0x00000001
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    150c:	32000015 	andcc	r0, r0, #21
    1510:	b6010069 	strlt	r0, [r1], -r9, rrx
}
    1514:	002c0b02 	eoreq	r0, ip, r2, lsl #22
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1518:	00500000 	subseq	r0, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    151c:	33000000 	movwcc	r0, #0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1520:	00001b3d 	andeq	r1, r0, sp, lsr fp
    1524:	0000078a 	andeq	r0, r0, sl, lsl #15
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1528:	0000078c 	andeq	r0, r0, ip, lsl #15
    152c:	0802aa01 	stmdaeq	r2, {r0, r9, fp, sp, pc}
    1530:	001b5c30 	andseq	r5, fp, r0, lsr ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1534:	00006e00 	andeq	r6, r0, r0, lsl #28
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1538:	1b503000 	blne	140d540 <__ccfg+0x13ed598>
    153c:	00810000 	addeq	r0, r1, r0
    1540:	00000000 	andeq	r0, r0, r0
    1544:	00011831 	andeq	r1, r1, r1, lsr r8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1548:	00155f00 	andseq	r5, r5, r0, lsl #30
    154c:	0ed53400 	cdpeq	4, 13, cr3, cr5, cr0, {0}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1550:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1554:	15ef1b02 	strbne	r1, [pc, #2818]!	; 205e <tcv_open+0x5e>
    1558:	00940000 	addseq	r0, r4, r0
    155c:	31000000 	mrscc	r0, (UNDEF: 0)
    1560:	00000130 	andeq	r0, r0, r0, lsr r1
    1564:	00001578 	andeq	r1, r0, r8, ror r5
			SysCtrlSetRechargeBeforePowerDown
    1568:	01006932 	tsteq	r0, r2, lsr r9
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    156c:	2c0c02f3 	sfmcs	f0, 4, [ip], {243}	; 0xf3
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1570:	b2000000 	andlt	r0, r0, #0
    1574:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1578:	0009322d 	andeq	r3, r9, sp, lsr #4
    157c:	00098200 	andeq	r8, r9, r0, lsl #4
    1580:	00159700 	andseq	r9, r5, r0, lsl #14
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1584:	00003400 	andeq	r3, r0, r0, lsl #8
    1588:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    158c:	15ef1b03 	strbne	r1, [pc, #2819]!	; 2097 <tcv_open+0x97>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1590:	00d00000 	sbcseq	r0, r0, r0
    1594:	2d000000 	stccs	0, cr0, [r0, #-0]
    1598:	000009d8 	ldrdeq	r0, [r0], -r8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    159c:	00000a20 	andeq	r0, r0, r0, lsr #20
			while (!(AONWUCPowerStatusGet () &
    15a0:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15a4:	000b8234 	andeq	r8, fp, r4, lsr r2
    15a8:	03480100 	movteq	r0, #33024	; 0x8100
    15ac:	0015ef1b 	andseq	lr, r5, fp, lsl pc
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15b0:	0000ee00 	andeq	lr, r0, r0, lsl #28
    15b4:	762d0000 	strtvc	r0, [sp], -r0
    15b8:	d600000a 	strle	r0, [r0], -sl
    15bc:	d500000a 	strle	r0, [r0, #-10]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15c0:	34000015 	strcc	r0, [r0], #-21	; 0xffffffeb
    15c4:	000009d6 	ldrdeq	r0, [r0], -r6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    15c8:	1b037b01 	blne	e01d4 <__ccfg+0xc022c>
    15cc:	000015ef 	andeq	r1, r0, pc, ror #11
			SysCtrlAdjustRechargeAfterPowerDown ();
    15d0:	0000010c 	andeq	r0, r0, ip, lsl #2
			reinit_uart ();
    15d4:	0b383500 	bleq	e0e9dc <__ccfg+0xdeea34>
    15d8:	0b6a0000 	bleq	1a815e0 <__ccfg+0x1a61638>
    15dc:	69320000 	ldmdbvs	r2!, {}	; <UNPREDICTABLE>
}
    15e0:	03910100 	orrseq	r0, r1, #0, 2
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15e4:	00002c0c 	andeq	r2, r0, ip, lsl #24
    15e8:	00012a00 	andeq	r2, r1, r0, lsl #20
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15ec:	11000000 	mrsne	r0, (UNDEF: 0)
    15f0:	00113404 	andseq	r3, r1, r4, lsl #8
    15f4:	84013600 	strhi	r3, [r1], #-1536	; 0xfffffa00
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15f8:	01000000 	mrseq	r0, (UNDEF: 0)
    15fc:	780106f9 	stmdavc	r1, {r0, r3, r4, r5, r6, r7, r9, sl}
    1600:	48000002 	stmdami	r0, {r1}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1604:	01000006 	tsteq	r0, r6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1608:	0017f99c 	mulseq	r7, ip, r9
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    160c:	0c333700 	ldceq	7, cr3, [r3], #-0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1610:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    1614:	00096215 	andeq	r6, r9, r5, lsl r2
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1618:	00013d00 	andeq	r3, r1, r0, lsl #26
    161c:	04453800 	strbeq	r3, [r5], #-2048	; 0xfffff800
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1620:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1624:	0012ce2e 	andseq	ip, r2, lr, lsr #28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1628:	00015b00 	andeq	r5, r1, r0, lsl #22
    162c:	06623900 	strbteq	r3, [r2], -r0, lsl #18
			PRCMPowerDomainOff (
    1630:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    1634:	00029813 	andeq	r9, r2, r3, lsl r8
	__SLEEP;
    1638:	05d12c00 	ldrbeq	r2, [r1, #3072]	; 0xc00
    163c:	02010000 	andeq	r0, r1, #0
  __ASM volatile ("cpsie i" : : : "memory");
    1640:	02a60e01 	adceq	r0, r6, #1, 28
	goto Redo;
    1644:	b42c0000 	strtlt	r0, [ip], #-0
    1648:	0100000d 	tsteq	r0, sp
    164c:	46150200 	ldrmi	r0, [r5], -r0, lsl #4
    1650:	2c000003 	stccs	0, cr0, [r0], {3}
    1654:	00000dcf 	andeq	r0, r0, pc, asr #27
    1658:	1d020501 	cfstr32ne	mvfx0, [r2, #-4]
    165c:	00000354 	andeq	r0, r0, r4, asr r3
    1660:	0005382c 	andeq	r3, r5, ip, lsr #16
    1664:	02080100 	andeq	r0, r8, #0, 2
    1668:	0003621d 	andeq	r6, r3, sp, lsl r2
    166c:	06ca2c00 	strbeq	r2, [sl], r0, lsl #24
    1670:	0b010000 	bleq	41678 <__ccfg+0x216d0>
    1674:	03701f02 	cmneq	r0, #2, 30
    1678:	332c0000 			; <UNDEFINED> instruction: 0x332c0000
    167c:	01000007 	tsteq	r0, r7
    1680:	88160210 	ldmdahi	r6, {r4, r9}
    1684:	2c000003 	stccs	0, cr0, [r0], {3}
    1688:	00000746 	andeq	r0, r0, r6, asr #14
    168c:	16021301 	strne	r1, [r2], -r1, lsl #6
    1690:	0000039c 	muleq	r0, ip, r3
    1694:	0007592c 	andeq	r5, r7, ip, lsr #18
    1698:	02160100 	andseq	r0, r6, #0, 2
    169c:	0003b016 	andeq	fp, r3, r6, lsl r0
    16a0:	0b272c00 	bleq	9cc6a8 <__ccfg+0x9ac700>
    16a4:	1b010000 	blne	416ac <__ccfg+0x21704>
    16a8:	03c41102 	biceq	r1, r4, #-2147483648	; 0x80000000
    16ac:	603a0000 	eorsvs	r0, sl, r0
	cli_tim;
    16b0:	3b000000 	blcc	16b8 <halt+0x8>
    16b4:	00000278 	andeq	r0, r0, r8, ror r2
    16b8:	ef21fa01 	svc	0x0021fa01
	diag ("PicOS halted");
    16bc:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
	mdelay (500);
    16c0:	00056403 	andeq	r6, r5, r3, lsl #8
    16c4:	0c233b20 			; <UNDEFINED> instruction: 0x0c233b20
	setpowermode (2);
    16c8:	fc010000 	stc2	0, cr0, [r1], {-0}
	__PCB = NULL;
    16cc:	0009a611 	andeq	sl, r9, r1, lsl r6
	release;
    16d0:	58030500 	stmdapl	r3, {r8, sl}
    16d4:	3b200005 	blcc	8016f0 <__ccfg+0x7e1748>
    16d8:	0000004e 	andeq	r0, r0, lr, asr #32
    16dc:	bd0efd01 	stclt	13, cr15, [lr, #-4]
int main (void) {
    16e0:	0500000e 	streq	r0, [r0, #-14]
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16e4:	00054003 	andeq	r4, r5, r3
    16e8:	00783a20 	rsbseq	r3, r8, r0, lsr #20
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16ec:	1a340000 	bne	d016f4 <__ccfg+0xce174c>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16f0:	01000002 	tsteq	r0, r2
	system_init ();
    16f4:	ef1d011c 	svc	0x001d011c
	tcv_init ();
    16f8:	a5000015 	strge	r0, [r0, #-21]	; 0xffffffeb
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16fc:	3c000001 	stccc	0, cr0, [r0], {1}
    1700:	00000d06 	andeq	r0, r0, r6, lsl #26
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1704:	25011e01 	strcs	r1, [r1, #-3585]	; 0xfffff1ff
    1708:	000017f9 	strdeq	r1, [r0], -r9
    170c:	00022d3c 	andeq	r2, r2, ip, lsr sp
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1710:	01430100 	mrseq	r0, (UNDEF: 83)
    1714:	0017ff26 	andseq	pc, r7, r6, lsr #30
	delay (16, 0);
    1718:	02403400 	subeq	r3, r0, #0, 8
    171c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    1720:	15ef1d01 	strbne	r1, [pc, #3329]!	; 2429 <tcvphy_get+0x29>
	__pi_release ();
    1724:	01c30000 	biceq	r0, r3, r0
    1728:	823c0000 	eorshi	r0, ip, #0
    172c:	0100000a 	tsteq	r0, sl
    1730:	0521015a 	streq	r0, [r1, #-346]!	; 0xfffffea6
    1734:	3c000018 	stccc	0, cr0, [r0], {24}
    1738:	000008c0 	andeq	r0, r0, r0, asr #17
    173c:	09015b01 	stmdbeq	r1, {r0, r8, r9, fp, ip, lr}
static void killev (__pi_pcb_t *pid) {
    1740:	0000180b 	andeq	r1, r0, fp, lsl #16
	wfun = (aword)(pid->code);
    1744:	00077834 	andeq	r7, r7, r4, lsr r8
	for_all_tasks (i) {
    1748:	015c0100 	cmpeq	ip, r0, lsl #2
		for (j = 0; j < nevents (i); j++) {
    174c:	0009260d 	andeq	r2, r9, sp, lsl #12
    1750:	0001e100 	andeq	lr, r1, r0, lsl #2
    1754:	03c73c00 	biceq	r3, r7, #0, 24
			    || i->Events [j] . Event == wfun
    1758:	83010000 	movwhi	r0, #4096	; 0x1000
		for (j = 0; j < nevents (i); j++) {
    175c:	15ef1d01 	strbne	r1, [pc, #3329]!	; 2465 <tcvphy_top+0x25>
			if (i->Events [j] . Event == (aword)pid
    1760:	9e3c0000 	cdpls	0, 3, cr0, cr12, cr0, {0}
    1764:	0100000d 	tsteq	r0, sp
    1768:	12210184 	eorne	r0, r1, #132, 2	; 0x21
				wakeupev (i, j);
    176c:	3c000018 	stccc	0, cr0, [r0], {24}
    1770:	00000265 	andeq	r0, r0, r5, ror #4
	for_all_tasks (i) {
    1774:	1d01ab01 	vstrne	d10, [r1, #-4]
}
    1778:	000015ef 	andeq	r1, r0, pc, ror #11
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    177c:	0007ca3c 	andeq	ip, r7, ip, lsr sl
static void qfree (aword *ch) {
    1780:	01ac0100 			; <UNDEFINED> instruction: 0x01ac0100
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	00181823 	andseq	r1, r8, r3, lsr #16
	cc = (aword*)(mpools + MA_NP);
    1788:	092c2e00 	stmdbeq	ip!, {r9, sl, fp, sp}
	m_setnextp (ch, chunk);
    178c:	ad010000 	stcge	0, cr0, [r1, #-0]
	m_setnextp (cc, ch);
    1790:	0e881301 	cdpeq	3, 8, cr1, cr8, cr1, {0}
}
    1794:	91030000 	mrsls	r0, (UNDEF: 3)
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1798:	313d7fb0 	teqcc	sp, r0	; <illegal shifter operand>
    179c:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    17a0:	90000004 	andls	r0, r0, r4
			m_setnextp (cc, m_nextp (chunk));
    17a4:	01000000 	mrseq	r0, (UNDEF: 0)
			m_size (chunk) += m_hdrlen + m_size (ch);
    17a8:	d20a0172 	andle	r0, sl, #-2147483620	; 0x8000001c
    17ac:	30000017 	andcc	r0, r0, r7, lsl r0
    17b0:	00001a5c 	andeq	r1, r0, ip, asr sl
    17b4:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b8:	001a503e 	andseq	r5, sl, lr, lsr r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17bc:	1a443000 	bne	110d7c4 <__ccfg+0x10ed81c>
    17c0:	02130000 	andseq	r0, r3, #0
    17c4:	903a0000 	eorsls	r0, sl, r0
			m_setnextp (cc, m_nextp (chunk));
    17c8:	3f000000 	svccc	0x00000000
			m_size (ch) += m_hdrlen + m_size (chunk);
    17cc:	00001a68 	andeq	r1, r0, r8, ror #20
    17d0:	872f0000 	strhi	r0, [pc, -r0]!
    17d4:	66000019 			; <UNDEFINED> instruction: 0x66000019
    17d8:	a8000005 	stmdage	r0, {r0, r2}
    17dc:	01000000 	mrseq	r0, (UNDEF: 0)
    17e0:	301901b8 			; <UNDEFINED> instruction: 0x301901b8
			if (m_size (chunk) >= m_size (ch))
    17e4:	000019a6 	andeq	r1, r0, r6, lsr #19
    17e8:	00000226 	andeq	r0, r0, r6, lsr #4
    17ec:	00199a30 	andseq	r9, r9, r0, lsr sl
		chunk = m_nextp (chunk))
    17f0:	00024500 	andeq	r4, r2, r0, lsl #10
    17f4:	00000000 	andeq	r0, r0, r0
    17f8:	68041100 	stmdavs	r4, {r8, ip}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17fc:	1100000f 	tstne	r0, pc
	diag_wait (a);
    1800:	000fb704 	andeq	fp, pc, r4, lsl #14
	diag_wchar (c, a);
    1804:	06041100 	streq	r1, [r4], -r0, lsl #2
    1808:	02000010 	andeq	r0, r0, #16
}
    180c:	0ca70201 	sfmeq	f0, 4, [r7], #4
    1810:	04110000 	ldreq	r0, [r1], #-0
	syserror (ESTATE, "state");
    1814:	00001062 	andeq	r1, r0, r2, rrx
    1818:	10cb0411 	sbcne	r0, fp, r1, lsl r4
    181c:	01360000 	teqeq	r6, r0
    1820:	00000a98 	muleq	r0, r8, sl
	for (i = 0; i < MAX_UTIMERS; i++)
    1824:	0106bc01 	tsteq	r6, r1, lsl #24
void utimer_add (address ut) {
    1828:	000000c8 	andeq	r0, r0, r8, asr #1
    182c:	00000184 	andeq	r0, r0, r4, lsl #3
		if (__pi_utims [i] == NULL)
    1830:	18a89c01 	stmiane	r8!, {r0, sl, fp, ip, pc}
	for (i = 0; i < MAX_UTIMERS; i++)
    1834:	33370000 	teqcc	r7, #0
    1838:	0100000c 	tsteq	r0, ip
		syserror (ERESOURCE, "ut a");
    183c:	096213bc 	stmdbeq	r2!, {r2, r3, r4, r5, r7, r8, r9, ip}^
	__pi_utims [i] = ut;
    1840:	02580000 	subseq	r0, r8, #0
}
    1844:	0f380000 	svceq	0x00380000
    1848:	0100000c 	tsteq	r0, ip
    184c:	15ef37bc 	strbne	r3, [pc, #1980]!	; 2010 <tcv_open+0x10>
	*t = v;
    1850:	02760000 	rsbseq	r0, r6, #0
	TCI_RUN_AUXILIARY_TIMER;
    1854:	f9390000 			; <UNDEFINED> instruction: 0xf9390000
void update_n_wake (word min, Boolean force) {
    1858:	01000009 	tsteq	r0, r9
	if (TCI_UPDATE_DELAY_TICKS (force))
    185c:	00da11c1 	sbcseq	r1, sl, r1, asr #3
    1860:	ff390000 			; <UNDEFINED> instruction: 0xff390000
    1864:	0100000b 	tsteq	r0, fp
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1868:	01281bf1 	strdeq	r1, [r8, -r1]!	; <UNPREDICTABLE>
    186c:	003a0000 	eorseq	r0, sl, r0
    1870:	3b000000 	blcc	1878 <update_n_wake+0x20>
    1874:	00000c2c 	andeq	r0, r0, ip, lsr #24
    1878:	a611bd01 	ldrge	fp, [r1], -r1, lsl #26
    187c:	05000009 	streq	r0, [r0, #-9]
    1880:	00055c03 	andeq	r5, r5, r3, lsl #24
    1884:	039e4020 	orrseq	r4, lr, #32
    1888:	bf010000 	svclt	0x00010000
    188c:	00002c0d 	andeq	r2, r0, sp, lsl #24
    1890:	383a1e00 	ldmdacc	sl!, {r9, sl, fp, ip}
    1894:	41000000 	mrsmi	r0, (UNDEF: 0)
    1898:	c5010070 	strgt	r0, [r1, #-112]	; 0xffffff90
		for_all_tasks (i) {
    189c:	0005bd0a 	andeq	fp, r5, sl, lsl #26
	__pi_mintk = znew + min;
    18a0:	00028d00 	andeq	r8, r2, r0, lsl #26
    18a4:	00000000 	andeq	r0, r0, r0
			if (!twaiting (i))
    18a8:	0ad80142 	beq	ff601db8 <_estack+0xdf5fcdb8>
    18ac:	a7010000 	strge	r0, [r1, -r0]
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18b0:	15ef0119 	strbne	r0, [pc, #281]!	; 19d1 <delay+0xd>
    18b4:	02260000 	eoreq	r0, r6, #0
    18b8:	02780000 	rsbseq	r0, r8, #0
    18bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    18c0:	00001942 	andeq	r1, r0, r2, asr #18
    18c4:	64696743 	strbtvs	r6, [r9], #-1859	; 0xfffff8bd
    18c8:	3ca70100 	stfccs	f0, [r7]
    18cc:	00000932 	andeq	r0, r0, r2, lsr r9
    18d0:	000002a0 	andeq	r0, r0, r0, lsr #5
    18d4:	000d8237 	andeq	r8, sp, r7, lsr r2
    18d8:	49a70100 	stmibmi	r7!, {r8}
    18dc:	00000926 	andeq	r0, r0, r6, lsr #18
				wakeuptm (i);
    18e0:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    18e4:	0004df37 	andeq	sp, r4, r7, lsr pc
		for_all_tasks (i) {
    18e8:	61a70100 			; <UNDEFINED> instruction: 0x61a70100
				d = i->Timer - znew;
    18ec:	00000926 	andeq	r0, r0, r6, lsr #18
    18f0:	000002c6 	andeq	r0, r0, r6, asr #5
    18f4:	00029937 	andeq	r9, r2, r7, lsr r9
		if ((word)(__pi_mintk - znew) < min) 
    18f8:	74a70100 	strtvc	r0, [r7], #256	; 0x100
    18fc:	00000926 	andeq	r0, r0, r6, lsr #18
    1900:	000002d9 	ldrdeq	r0, [r0], -r9
	__pi_old = znew;
    1904:	00077844 	andeq	r7, r7, r4, asr #16
}
    1908:	89a70100 	stmibhi	r7!, {r8}
	TCI_RUN_DELAY_TIMER;
    190c:	00000926 	andeq	r0, r0, r6, lsr #18
}
    1910:	44009102 	strmi	r9, [r0], #-258	; 0xfffffefe
    1914:	00000829 	andeq	r0, r0, r9, lsr #16
    1918:	2699a701 	ldrcs	sl, [r9], r1, lsl #14
    191c:	02000009 	andeq	r0, r0, #9
    1920:	72450491 	subvc	r0, r5, #-1862270976	; 0x91000000
void proceed (word state) {
    1924:	01006365 	tsteq	r0, r5, ror #6
	prcdstate (__pi_curr, state);
    1928:	05bda7a7 	ldreq	sl, [sp, #1959]!	; 0x7a7
    192c:	91020000 	mrsls	r0, (UNDEF: 2)
	release;
    1930:	0ae13808 	beq	ff84f958 <_estack+0xdf84a958>
    1934:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
void __pi_wait (aword event, word state) {
    1938:	0015ef1a 	andseq	lr, r5, sl, lsl pc
	sint j = nevents (__pi_curr);
    193c:	0002ec00 	andeq	lr, r2, r0, lsl #24
	if (j >= MAX_EVENTS_PER_TASK)
    1940:	01420000 	mrseq	r0, (UNDEF: 66)
    1944:	00000f2f 	andeq	r0, r0, pc, lsr #30
    1948:	01059401 	tsteq	r5, r1, lsl #8
		syserror (ENEVENTS, "sw");
    194c:	0000180b 	andeq	r1, r0, fp, lsl #16
    1950:	00000200 	andeq	r0, r0, r0, lsl #4
	setestate (__pi_curr->Events [j], state, event);
    1954:	00000226 	andeq	r0, r0, r6, lsr #4
	incwait (__pi_curr);
    1958:	19879c01 	stmibne	r7, {r0, sl, fp, ip, pc}
	setestate (__pi_curr->Events [j], state, event);
    195c:	e9370000 	ldmdb	r7!, {}	; <UNPREDICTABLE>
}
    1960:	01000051 	qaddeq	r0, r1, r0
    1964:	12ce1d94 	sbcne	r1, lr, #148, 26	; 0x2500
    1968:	030a0000 	movweq	r0, #40960	; 0xa000
void __pi_trigger (aword event) {
    196c:	08350000 	ldmdaeq	r5!, {}	; <UNPREDICTABLE>
	for_all_tasks (i) {
    1970:	1a000002 	bne	1980 <__pi_trigger+0x14>
		for (j = 0; j < nevents (i); j++) {
    1974:	41000002 	tstmi	r0, r2
    1978:	9a010069 	bls	41b24 <__ccfg+0x21b7c>
    197c:	00002c11 	andeq	r2, r0, r1, lsl ip
    1980:	00032800 	andeq	r2, r3, r0, lsl #16
			if (i->Events [j] . Event == event) {
    1984:	46000000 	strmi	r0, [r0], -r0
    1988:	0009d601 	andeq	sp, r9, r1, lsl #12
    198c:	0f8c0100 	svceq	0x008c0100
				wakeupev (i, j);
    1990:	000e8801 	andeq	r8, lr, r1, lsl #16
    1994:	19b30100 	ldmibne	r3!, {r8}
	for_all_tasks (i) {
    1998:	e9470000 	stmdb	r7, {}^	; <UNPREDICTABLE>
}
    199c:	01000051 	qaddeq	r0, r1, r0
aword __pi_join (aword pid, word st) {
    19a0:	12ce2c8c 	sbcne	r2, lr, #140, 24	; 0x8c00
	for_all_tasks (i) {
    19a4:	c2470000 	subgt	r0, r7, #0
    19a8:	01000004 	tsteq	r0, r4
	return 0;
    19ac:	09263a8c 	stmdbeq	r6!, {r2, r3, r7, r9, fp, ip, sp}
		if ((aword)i == pid) {
    19b0:	42000000 	andmi	r0, r0, #0
			__pi_wait (pid, st);
    19b4:	000b8201 	andeq	r8, fp, r1, lsl #4
}
    19b8:	05780100 	ldrbeq	r0, [r8, #-256]!	; 0xffffff00
	for_all_tasks (i) {
    19bc:	00180b01 	andseq	r0, r8, r1, lsl #22
    19c0:	0001e400 	andeq	lr, r1, r0, lsl #8
void delay (word d, word state) {
    19c4:	00020000 	andeq	r0, r2, r0
	settstate (__pi_curr, state);
    19c8:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    19cc:	37000019 	smladcc	r0, r9, r0, r0
    19d0:	000051e9 	andeq	r5, r0, r9, ror #3
    19d4:	ce207801 	cdpgt	8, 2, cr7, cr0, cr1, {0}
	update_n_wake (d, YES);
    19d8:	46000012 			; <UNDEFINED> instruction: 0x46000012
    19dc:	37000003 	strcc	r0, [r0, -r3]
	__pi_curr->Timer = __pi_old + d;
    19e0:	000004c2 	andeq	r0, r0, r2, asr #9
    19e4:	262e7801 	strtcs	r7, [lr], -r1, lsl #16
	inctimer (__pi_curr);
    19e8:	59000009 	stmdbpl	r0, {r0, r3}
    19ec:	00000003 	andeq	r0, r0, r3
    19f0:	05e60142 	strbeq	r0, [r6, #322]!	; 0x142
}
    19f4:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    19f8:	180b0105 	stmdane	fp, {r0, r2, r8}
	if (fun == NULL)
    19fc:	01ce0000 	biceq	r0, lr, r0
		return (int) __pi_curr;
    1a00:	01e40000 	mvneq	r0, r0
    1a04:	9c010000 	stcls	0, cr0, [r1], {-0}
	for_all_tasks (i)
    1a08:	00001a31 	andeq	r1, r0, r1, lsr sl
}
    1a0c:	0051e937 	subseq	lr, r1, r7, lsr r9
		if (i->code == fun)
    1a10:	2d680100 	stfcse	f0, [r8, #-0]
	for_all_tasks (i)
    1a14:	000012ce 	andeq	r1, r0, lr, asr #5
    1a18:	0000036c 	andeq	r0, r0, ip, ror #6
    1a1c:	0001ce35 	andeq	ip, r1, r5, lsr lr
int __pi_strlen (const char *s) {
    1a20:	0001e000 	andeq	lr, r1, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1a24:	00694800 	rsbeq	r4, r9, r0, lsl #16
}
    1a28:	2c126d01 	ldccs	13, cr6, [r2], {1}
	for (i = 0; *(s+i) != '\0'; i++);
    1a2c:	00000000 	andeq	r0, r0, r0
	while ((Boolean)(*d++ = *s++));
    1a30:	e2014600 	and	r4, r1, #0, 12
    1a34:	01000003 	tsteq	r0, r3
    1a38:	0b010548 	bleq	42f60 <__ccfg+0x22fb8>
}
    1a3c:	01000018 	tsteq	r0, r8, lsl r0
	while (n-- && (*s != '\0'))
    1a40:	00001a81 	andeq	r1, r0, r1, lsl #21
    1a44:	0051e947 	subseq	lr, r1, r7, asr #18
	*d = '\0';
    1a48:	20480100 	subcs	r0, r8, r0, lsl #2
	while (n-- && (*s != '\0'))
    1a4c:	000012ce 	andeq	r1, r0, lr, asr #5
    1a50:	000f0047 	andeq	r0, pc, r7, asr #32
		*d++ = *s++;
    1a54:	2c480100 	stfcse	f0, [r8], {-0}
    1a58:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
	while (n--)
    1a5c:	000f4147 	andeq	r4, pc, r7, asr #2
    1a60:	3f480100 	svccc	0x00480100
		*dest++ = *src++;
    1a64:	00000926 	andeq	r0, r0, r6, lsr #18
    1a68:	6d756e48 	ldclvs	14, cr6, [r5, #-288]!	; 0xfffffee0
    1a6c:	094b0100 	stmdbeq	fp, {r8}^
	while (n--)
    1a70:	0000002c 	andeq	r0, r0, ip, lsr #32
}
    1a74:	00694849 	rsbeq	r4, r9, r9, asr #16
		*dest++ = c;
    1a78:	2c125301 	ldccs	3, cr5, [r2], {1}
void adddevfunc (devreqfun_t rf, int loc) {
    1a7c:	00000000 	andeq	r0, r0, r0
		syserror (EREQPAR, "addv");
    1a80:	89014a00 	stmdbhi	r1, {r9, fp, lr}
		syserror (ERESOURCE, "addv");
    1a84:	01000005 	tsteq	r0, r5
	if (ioreq [loc] != NULL)
    1a88:	26010943 	strcs	r0, [r1], -r3, asr #18
    1a8c:	bc000009 	stclt	0, cr0, [r0], {9}
		syserror (ERESOURCE, "addv");
    1a90:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
	ioreq [loc] = rf;
    1a94:	01000001 	tsteq	r0, r1
}
    1a98:	a001369c 	mulge	r1, ip, r6
    1a9c:	01000000 	mrseq	r0, (UNDEF: 0)
sint io (word retry, word dev, word operation, char *buf, word len) {
    1aa0:	8401063c 	strhi	r0, [r1], #-1596	; 0xfffff9c4
    1aa4:	98000001 	stmdals	r0, {r0}
    1aa8:	01000001 	tsteq	r0, r1
    1aac:	001ad69c 	mulseq	sl, ip, r6
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ab0:	51e93700 	mvnpl	r3, r0, lsl #14
    1ab4:	3c010000 	stccc	0, cr0, [r1], {-0}
    1ab8:	0012ce1f 	andseq	ip, r2, pc, lsl lr
		syserror (ENODEVICE, "io");
    1abc:	00037f00 	andeq	r7, r3, r0, lsl #30
    1ac0:	01843500 	orreq	r3, r4, r0, lsl #10
	if (len == 0)
    1ac4:	01960000 	orrseq	r0, r6, r0
	ret = (ioreq [dev]) (operation, buf, len);
    1ac8:	69480000 	stmdbvs	r8, {}^	; <UNPREDICTABLE>
    1acc:	0b3d0100 	bleq	f41ed4 <__ccfg+0xf21f2c>
	if (ret >= 0)
    1ad0:	0000002c 	andeq	r0, r0, ip, lsr #32
	if (ret == -1) {
    1ad4:	01420000 	mrseq	r0, (UNDEF: 66)
    1ad8:	00000e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
		if (retry == WNONE)
    1adc:	01053501 	tsteq	r5, r1, lsl #10
		iowait (dev, operation, retry);
    1ae0:	0000180b 	andeq	r1, r0, fp, lsl #16
	...
			release;
    1aec:	1b119c01 	blne	468af8 <__ccfg+0x448b50>
	if (ret == -2) {
    1af0:	e9370000 	ldmdb	r7!, {}	; <UNPREDICTABLE>
		if (retry != WNONE) {
    1af4:	01000051 	qaddeq	r0, r1, r0
    1af8:	12ce2a35 	sbcne	r2, lr, #217088	; 0x35000
			iowait (dev, operation, retry);
    1afc:	03920000 	orrseq	r0, r2, #0
    1b00:	90440000 	subls	r0, r4, r0
			(ioreq [dev]) (NONE, buf, len);
    1b04:	01000003 	tsteq	r0, r3
    1b08:	09263835 	stmdbeq	r6!, {r0, r2, r4, r5, fp, ip, sp}
    1b0c:	51010000 	mrspl	r0, (UNDEF: 1)
		(ioreq [dev]) (NONE, buf, len);
    1b10:	d0014600 	andle	r4, r1, r0, lsl #12
    1b14:	01000008 	tsteq	r0, r8
    1b18:	0b01052f 	bleq	42fdc <__ccfg+0x23034>
}
    1b1c:	01000018 	tsteq	r0, r8, lsl r0
	if (retry != WNONE) {
    1b20:	00001b3d 	andeq	r1, r0, sp, lsr fp
		delay (-ret - 2, retry);
    1b24:	0051e947 	subseq	lr, r1, r7, asr #18
    1b28:	1f2f0100 	svcne	0x002f0100
    1b2c:	000012ce 	andeq	r1, r0, lr, asr #5
    1b30:	6469674b 	strbtvs	r6, [r9], #-1867	; 0xfffff8b5
		release;
    1b34:	2e2f0100 	sufcse	f0, f7, f0
    1b38:	00000932 	andeq	r0, r0, r2, lsr r9
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b3c:	c8014600 	stmdagt	r1, {r9, sl, lr}
    1b40:	01000004 	tsteq	r0, r4
    1b44:	0b01052a 	bleq	42ff4 <__ccfg+0x2304c>
    1b48:	01000018 	tsteq	r0, r8, lsl r0
    1b4c:	00001b68 	andeq	r1, r0, r8, ror #22
		syserror (ERESOURCE, "mal1");
    1b50:	0051e947 	subseq	lr, r1, r7, asr #18
    1b54:	1e2a0100 	sufnee	f0, f2, f0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b58:	000012ce 	andeq	r1, r0, lr, asr #5
    1b5c:	0064694b 	rsbeq	r6, r4, fp, asr #18
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b60:	262c2a01 	strtcs	r2, [ip], -r1, lsl #20
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b64:	00000009 	andeq	r0, r0, r9
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b68:	0cad0142 	stfeqs	f0, [sp], #264	; 0x108
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b6c:	17010000 	strne	r0, [r1, -r0]
    1b70:	180b0105 	stmdane	fp, {r0, r2, r8}
}
    1b74:	01980000 	orrseq	r0, r8, r0
    1b78:	01bc0000 			; <UNDEFINED> instruction: 0x01bc0000
    1b7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b80:	00001b95 	muleq	r0, r5, fp
    1b84:	0051e937 	subseq	lr, r1, r7, lsr r9
    1b88:	1c170100 	ldfnes	f0, [r7], {-0}
void __pi_free (aword *ch) {
    1b8c:	000012ce 	andeq	r1, r0, lr, asr #5
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b90:	000003a5 	andeq	r0, r0, r5, lsr #7
    1b94:	09474c00 	stmdbeq	r7, {sl, fp, lr}^
		syserror (EMALLOC, "malg");
    1b98:	d3120000 	tstle	r2, #0
    1b9c:	3e010101 	adfccs	f0, f1, f1
	mcfree [MA_NP] += m_size (ch);
    1ba0:	03000009 	movweq	r0, #9
		m_size (ch) ^= MALLOC_UMASK;
    1ba4:	001b3d4d 	andseq	r3, fp, sp, asr #26
	...
	QFREE;
    1bb0:	c89c0100 	ldmgt	ip, {r8}
	if (mevent [MA_NP] . nwait) {
    1bb4:	3000001b 	andcc	r0, r0, fp, lsl r0
    1bb8:	00001b50 	andeq	r1, r0, r0, asr fp
		trigger ((aword)(&(mevent [MA_NP])));
    1bbc:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
		mevent [MA_NP] . nwait --;
    1bc0:	001b5c4e 	andseq	r5, fp, lr, asr #24
}
    1bc4:	00510100 	subseq	r0, r1, r0, lsl #2
    1bc8:	001b114d 	andseq	r1, fp, sp, asr #2
	...
void kill (aword pid) {
    1bd4:	ec9c0100 	ldfs	f0, [ip], {0}
		pid = (aword) __pi_curr;
    1bd8:	3000001b 	andcc	r0, r0, fp, lsl r0
	j = NULL;
    1bdc:	00001b24 	andeq	r1, r0, r4, lsr #22
	for_all_tasks (i) {
    1be0:	000003cb 	andeq	r0, r0, fp, asr #7
	syserror (EREQPAR, "kpi");
    1be4:	001b304e 	andseq	r3, fp, lr, asr #32
    1be8:	00510100 	subseq	r0, r1, r0, lsl #2
		if ((aword)i == pid) {
    1bec:	001a314d 	andseq	r3, sl, sp, asr #2
	...
			killev (i);
    1bf8:	1c9c0100 	ldfnes	f0, [ip], {0}
			ufree (i);
    1bfc:	3000001c 	andcc	r0, r0, ip, lsl r0
			if (i == __pi_curr)
    1c00:	00001a44 	andeq	r1, r0, r4, asr #20
    1c04:	000003de 	ldrdeq	r0, [r0], -lr
				release;
    1c08:	001a504e 	andseq	r5, sl, lr, asr #32
				j->Next = i->Next;
    1c0c:	4e510100 	rdfmis	f0, f1, f0
    1c10:	00001a5c 	andeq	r1, r0, ip, asr sl
    1c14:	683f5201 	ldmdavs	pc!, {r0, r9, ip, lr}	; <UNPREDICTABLE>
}
    1c18:	0000001a 	andeq	r0, r0, sl, lsl r0
    1c1c:	0019874f 	andseq	r8, r9, pc, asr #14
	...
		_size = 2;
    1c28:	309c0100 	addscc	r0, ip, r0, lsl #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c2c:	0000199a 	muleq	r0, sl, r9
		_size = (((aword)size) + 3) >> 2;
    1c30:	000003f1 	strdeq	r0, [r0], -r1
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c34:	0019a630 	andseq	sl, r9, r0, lsr r6
		_size = (((aword)size) + 3) >> 2;
    1c38:	00040400 	andeq	r0, r4, r0, lsl #8
		if (mevent [MA_NP] . nfail != 255)
    1c3c:	8c000000 	stchi	0, cr0, [r0], {-0}
    1c40:	03000014 	movweq	r0, #20
			mevent [MA_NP] . nfail ++;
    1c44:	00048600 	andeq	r8, r4, r0, lsl #12
		mnfree [MA_NP] = 0;
    1c48:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    1c4c:	0c000000 	stceq	0, cr0, [r0], {-0}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c50:	0000128c 	andeq	r1, r0, ip, lsl #5
    1c54:	00000e0a 	andeq	r0, r0, sl, lsl #28
			syserror (EMALLOC, "malc");
    1c58:	00000630 	andeq	r0, r0, r0, lsr r6
    1c5c:	00000000 	andeq	r0, r0, r0
		if (m_size (chunk) >= _size)
    1c60:	00000d75 	andeq	r0, r0, r5, ror sp
    1c64:	5d060102 	stfpls	f0, [r6, #-8]
		chunk = m_nextp (chunk)) {
    1c68:	0200000c 	andeq	r0, r0, #12
		m_setnextp (cc, m_nextp (chunk));
    1c6c:	0a6b0502 	beq	1ac307c <__ccfg+0x1aa30d4>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c70:	a1030000 	mrsge	r0, (UNDEF: 3)
    1c74:	1000002b 	andne	r0, r0, fp, lsr #32
			m_size (chunk) = _size;
    1c78:	003f1828 	eorseq	r1, pc, r8, lsr #16
			cc = chunk + _size + m_hdrlen;
    1c7c:	04020000 	streq	r0, [r2], #-0
    1c80:	0007fd05 	andeq	pc, r7, r5, lsl #26
			m_size (cc) = waste - m_hdrlen;
    1c84:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
			QFREE;
    1c88:	000007f8 	strdeq	r0, [r0], -r8
		mevent [MA_NP] . nfail = 0;
    1c8c:	002a1c03 	eoreq	r1, sl, r3, lsl #24
		mcfree [MA_NP] -= m_size (chunk);
    1c90:	182e1000 	stmdane	lr!, {ip}
    1c94:	00000059 	andeq	r0, r0, r9, asr r0
    1c98:	5b080102 	blpl	2020a8 <__ccfg+0x1e2100>
    1c9c:	0300000c 	movweq	r0, #12
		m_size (chunk) |= MALLOC_UMASK;
    1ca0:	00002e12 	andeq	r2, r0, r2, lsl lr
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ca4:	6c193110 	ldfvss	f3, [r9], {16}
		m_size (chunk) |= MALLOC_UMASK;
    1ca8:	02000000 	andeq	r0, r0, #0
			mnfree [MA_NP] = mcfree [MA_NP];
    1cac:	0d660702 	stcleq	7, cr0, [r6, #-8]!
}
    1cb0:	b4030000 	strlt	r0, [r3], #-0
    1cb4:	10000029 	andne	r0, r0, r9, lsr #32
    1cb8:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
    1cbc:	04020000 	streq	r0, [r2], #-0
    1cc0:	00042607 	andeq	r2, r4, r7, lsl #12
    1cc4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1cc8:	00000421 	andeq	r0, r0, r1, lsr #8
aword __pi_fork (fsmcode func, aword data) {
    1ccc:	69050404 	stmdbvs	r5, {r2, sl}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1cd0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1cd4:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    1cd8:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
		if ((j = __PCB) == NULL)
    1cdc:	11000013 	tstne	r0, r3, lsl r0
	i->Next = NULL;
    1ce0:	004d1226 	subeq	r1, sp, r6, lsr #4
	i->data = data;
    1ce4:	fb030000 	blx	c1cee <__ccfg+0xa1d46>
		if ((j = __PCB) == NULL)
    1ce8:	11000028 	tstne	r0, r8, lsr #32
}
    1cec:	00601227 	rsbeq	r1, r0, r7, lsr #4
			for (; j->Next != NULL; j = j->Next);
    1cf0:	a7050000 	strge	r0, [r5, -r0]
    1cf4:	06000000 	streq	r0, [r0], -r0
	return (aword) i;
    1cf8:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cfc:	0013cc03 	andseq	ip, r3, r3, lsl #24
	if (mevent [MA_NP] . nwait != 255)
    1d00:	12281100 	eorne	r1, r8, #0, 2
    1d04:	00000033 	andeq	r0, r0, r3, lsr r0
    1d08:	001dc203 	andseq	ip, sp, r3, lsl #4
		mevent [MA_NP] . nwait ++;
    1d0c:	122b1100 	eorne	r1, fp, #0, 2
	wait ((aword)(&(mevent [MA_NP])), state);
    1d10:	0000004d 	andeq	r0, r0, sp, asr #32
    1d14:	0000c906 	andeq	ip, r0, r6, lsl #18
void diag (const char *mess, ...) {
    1d18:	00c90500 	sbceq	r0, r9, r0, lsl #10
    1d1c:	4d030000 	stcmi	0, cr0, [r3, #-0]
    1d20:	11000029 	tstne	r0, r9, lsr #32
	diag_disable_int (a, is);
    1d24:	0073122c 	rsbseq	r1, r3, ip, lsr #4
    1d28:	df050000 	svcle	0x00050000
    1d2c:	03000000 	movweq	r0, #0
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	00000646 	andeq	r0, r0, r6, asr #12
	diag_disable_int (a, is);
    1d34:	73122d11 	tstvc	r2, #1088	; 0x440
	while (*mess != '\0') {
    1d38:	03000000 	movweq	r0, #0
	dgout ('\r');
    1d3c:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
	dgout ('\n');
    1d40:	08102e11 	ldmdaeq	r0, {r0, r4, r9, sl, fp, sp}
    1d44:	07000001 	streq	r0, [r0, -r1]
    1d48:	0000a704 	andeq	sl, r0, r4, lsl #14
	diag_wait (a);
    1d4c:	11080800 	tstne	r8, r0, lsl #16
	diag_enable_int (a, is);
    1d50:	019c0932 	orrseq	r0, ip, r2, lsr r9
    1d54:	34090000 	strcc	r0, [r9], #-0
}
    1d58:	11000000 	mrsne	r0, (UNDEF: 0)
    1d5c:	00c90734 	sbceq	r0, r9, r4, lsr r7
    1d60:	01010000 	mrseq	r0, (UNDEF: 1)
		if (*mess == '%') {
    1d64:	4c090007 	stcmi	0, cr0, [r9], {7}
    1d68:	11000006 	tstne	r0, r6
			if (*mess == 'l') {
    1d6c:	00c90335 	sbceq	r0, r9, r5, lsr r3
    1d70:	01010000 	mrseq	r0, (UNDEF: 1)
				mess++;
    1d74:	e7090006 	str	r0, [r9, -r6]
				val = va_arg (ap, lword);
    1d78:	11000002 	tstne	r0, r2
				bc = 32;
    1d7c:	00c90336 	sbceq	r0, r9, r6, lsr r3
				bc = 16;
    1d80:	01010000 	mrseq	r0, (UNDEF: 1)
			switch (*mess) {
    1d84:	b7090005 	strlt	r0, [r9, -r5]
    1d88:	11000006 	tstne	r0, r6
    1d8c:	00c90337 	sbceq	r0, r9, r7, lsr r3
				dgout ('%');
    1d90:	01010000 	mrseq	r0, (UNDEF: 1)
    1d94:	9f090004 	svcls	0x00090004
				dgout (*mess);
    1d98:	1100000a 	tstne	r0, sl
    1d9c:	00c90338 	sbceq	r0, r9, r8, lsr r3
			switch (*mess) {
    1da0:	04010000 	streq	r0, [r1], #-0
					v = __pi_hex_enc_table [
    1da4:	5b0a0000 	blpl	281dac <__ccfg+0x261e04>
					i += 4;
    1da8:	11000006 	tstne	r0, r6
					(val >> (bc - i)) & 0xf];
    1dac:	00c9073a 	sbceq	r0, r9, sl, lsr r7
    1db0:	0a010000 	beq	41db8 <__ccfg+0x21e10>
					dgout (v);
    1db4:	000008fb 	strdeq	r0, [r0], -fp
    1db8:	c9033c11 	stmdbgt	r3, {r0, r4, sl, fp, ip, sp}
				while (i < bc) {
    1dbc:	02000000 	andeq	r0, r0, #0
			mess++;
    1dc0:	000f3a0a 	andeq	r3, pc, sl, lsl #20
					d /= 10;
    1dc4:	033d1100 	teqeq	sp, #0, 2
				if ((val >> (bc - 1)) & 1) {
    1dc8:	000000c9 	andeq	r0, r0, r9, asr #1
    1dcc:	09130a03 	ldmdbeq	r3, {r0, r1, r9, fp}
					dgout ('-');
    1dd0:	3f110000 	svccc	0x00110000
    1dd4:	0000df08 	andeq	sp, r0, r8, lsl #30
						val |= 0xffff0000;
    1dd8:	03000400 	movweq	r0, #1024	; 0x400
    1ddc:	0000031d 	andeq	r0, r0, sp, lsl r3
    1de0:	0e034111 	mcreq	1, 0, r4, cr3, cr1, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    1de4:	06000001 	streq	r0, [r0], -r1
    1de8:	0000019c 	muleq	r0, ip, r1
    1dec:	0006be0b 	andeq	fp, r6, fp, lsl #28
					v = (word) (val / d);
    1df0:	1a431100 	bne	10c61f8 <__ccfg+0x10a6250>
					if (v || d == 1) break;
    1df4:	000001a8 	andeq	r0, r0, r8, lsr #3
    1df8:	a00b0101 	andge	r0, fp, r1, lsl #2
					d /= 10;
    1dfc:	11000001 	tstne	r0, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1e00:	01c90e45 	biceq	r0, r9, r5, asr #28
					dgout (v + '0');
    1e04:	01010000 	mrseq	r0, (UNDEF: 1)
    1e08:	01cf0407 	biceq	r0, pc, r7, lsl #8
    1e0c:	01020000 	mrseq	r0, (UNDEF: 2)
					d /= 10;
    1e10:	000c6408 	andeq	r6, ip, r8, lsl #8
					val = val - (v * d);
    1e14:	01cf0500 	biceq	r0, pc, r0, lsl #10
					if (d == 0) break;
    1e18:	260b0000 	strcs	r0, [fp], -r0
					v = (word) (val / d);
    1e1c:	11000003 	tstne	r0, r3
    1e20:	01c91e45 	biceq	r1, r9, r5, asr #28
				if (bc == 16)
    1e24:	01010000 	mrseq	r0, (UNDEF: 1)
				d = (bc == 16) ? 10000 : 1000000000;
    1e28:	8f120808 	svchi	0x00120808
					val &= 0xffff;
    1e2c:	00021a09 	andeq	r1, r2, r9, lsl #20
					dgout (*s);
    1e30:	0cd80a00 	vldmiaeq	r8, {s1-s0}
					s++;
    1e34:	90120000 	andsls	r0, r2, r0
				while (*s != '\0') {
    1e38:	0000730b 	andeq	r7, r0, fp, lsl #6
    1e3c:	750a0000 	strvc	r0, [sl, #-0]
			dgout (*mess++);
    1e40:	12000010 	andne	r0, r0, #16
    1e44:	00a70891 	umlaleq	r0, r7, r1, r8
    1e48:	0a040000 	beq	101e50 <__ccfg+0xe1ea8>
    1e4c:	000001c5 	andeq	r0, r0, r5, asr #3
    1e50:	d5109212 	ldrle	r9, [r0, #-530]	; 0xfffffdee
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e54:	06000000 	streq	r0, [r0], -r0
    1e58:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    1e5c:	93120000 	tstls	r2, #0
    1e60:	0001e903 	andeq	lr, r1, r3, lsl #18
	^ entropy
    1e64:	021a0500 	andseq	r0, sl, #0, 10
}
    1e68:	1a0c0000 	bne	301e70 <__ccfg+0x2e1ec8>
    1e6c:	36000002 	strcc	r0, [r0], -r2
    1e70:	0d000002 	stceq	0, cr0, [r0, #-8]
    1e74:	093d0b00 	ldmdbeq	sp!, {r8, r9, fp}
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e78:	99120000 	ldmdbls	r2, {}	; <UNPREDICTABLE>
	word cs = size + hblenb;
    1e7c:	00022b0f 	andeq	r2, r2, pc, lsl #22
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e80:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1e84:	0000da04 	andeq	sp, r0, r4, lsl #20
	p -> length = size;
    1e88:	13010800 	movwne	r0, #6144	; 0x1800
}
    1e8c:	02740991 	rsbseq	r0, r4, #2375680	; 0x244000
	if (p->attributes.b.queued) {
    1e90:	1a090000 	bne	241e98 <__ccfg+0x221ef0>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e94:	13000009 	movwne	r0, #9
    1e98:	00c90793 	smulleq	r0, r9, r3, r7
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e9c:	07010000 	streq	r0, [r1, -r0]
		p->attributes.b.queued = 0;
    1ea0:	cc090001 	stcgt	0, cr0, [r9], {1}
    1ea4:	13000005 	movwne	r0, #5
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ea8:	00c90394 	smulleq	r0, r9, r4, r3
	deq (p);	// Remove from queue
    1eac:	01010000 	mrseq	r0, (UNDEF: 1)
}
    1eb0:	03000000 	movweq	r0, #0
	tfree ((address)p);
    1eb4:	00000aab 	andeq	r0, r0, fp, lsr #21
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1eb8:	4a039613 	bmi	e770c <__ccfg+0xc7764>
    1ebc:	05000002 	streq	r0, [r0, #-2]
    1ec0:	00000274 	andeq	r0, r0, r4, ror r2
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ec4:	0002800c 	andeq	r8, r2, ip
    1ec8:	00029000 	andeq	r9, r2, r0
	if (q_empty (q))
    1ecc:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    1ed0:	00000285 	andeq	r0, r0, r5, lsl #5
		trigger (q);
    1ed4:	0003aa0b 	andeq	sl, r3, fp, lsl #20
	if (p->attributes.b.urgent) {
    1ed8:	179c1300 	ldrne	r1, [ip, r0, lsl #6]
		p->u.bqueue.next = q->next;
    1edc:	00000290 	muleq	r0, r0, r2
		p->u.bqueue.prev = q;
    1ee0:	b30c0101 	movwlt	r0, #49409	; 0xc101
		q->next->prev = (qitem_t*) p;
    1ee4:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
	p->attributes.b.queued = 1;
    1ee8:	0d000002 	stceq	0, cr0, [r0, #-8]
    1eec:	02a30500 	adceq	r0, r3, #0, 10
}
    1ef0:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
		p->u.bqueue.prev = q->prev;
    1ef4:	14000006 	strne	r0, [r0], #-6
		q->prev->next = (qitem_t*) p;
    1ef8:	02ae1306 	adceq	r1, lr, #402653184	; 0x18000000
		q->prev = (qitem_t*) p;
    1efc:	01010000 	mrseq	r0, (UNDEF: 1)
    1f00:	0008dd0b 	andeq	sp, r8, fp, lsl #26
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f04:	0ec31200 	cdpeq	2, 12, cr1, cr3, cr0, {0}
	deq (p);	// Soft dequeue, timer and hook left intact
    1f08:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	switch (dv) {
    1f0c:	720e0101 	andvc	r0, lr, #1073741824	; 0x40000000
    1f10:	1500000c 	strne	r0, [r0, #-12]
    1f14:	dc10016e 	ldfles	f0, [r0], {110}	; 0x6e
    1f18:	07000002 	streq	r0, [r0, -r2]
			p->attributes.b.urgent = 1;
    1f1c:	0002e204 	andeq	lr, r2, r4, lsl #4
    1f20:	ee010f00 	cdp	15, 0, cr0, cr1, cr0, {0}
			verify_ses (p, "dispose ses");
    1f24:	10000002 	andne	r0, r0, r2
    1f28:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f2c:	01d60c00 	bicseq	r0, r6, r0, lsl #24
    1f30:	02f90000 	rscseq	r0, r9, #0
    1f34:	000d0000 	andeq	r0, sp, r0
			verify_phy (p, "dispose phy");
    1f38:	0002ee05 	andeq	lr, r2, r5, lsl #28
    1f3c:	09e61100 	stmibeq	r6!, {r8, ip}^
}
    1f40:	7f150000 	svcvc	0x00150000
			enq (oqueues [p->attributes.b.phys], p);
    1f44:	02f91601 	rscseq	r1, r9, #1048576	; 0x100000
			p->attributes.b.urgent = 1;
    1f48:	01010000 	mrseq	r0, (UNDEF: 1)
    1f4c:	00039611 	andeq	r9, r3, r1, lsl r6
			verify_phy (p, "dispose phy");
    1f50:	01821500 	orreq	r1, r2, r0, lsl #10
    1f54:	0000eb14 	andeq	lr, r0, r4, lsl fp
    1f58:	11010100 	mrsne	r0, (UNDEF: 17)
    1f5c:	0000036e 	andeq	r0, r0, lr, ror #6
    1f60:	0e02d815 	mcreq	8, 0, sp, cr2, cr5, {0}
    1f64:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
			enq (oqueues [p->attributes.b.phys], p);
    1f68:	08120101 	ldmdaeq	r2, {r0, r8}
    1f6c:	09030315 	stmdbeq	r3, {r0, r2, r4, r8, r9}
}
    1f70:	00000352 	andeq	r0, r0, r2, asr r3
			rlp (p);
    1f74:	003ca113 	eorseq	sl, ip, r3, lsl r1
}
    1f78:	03071500 	movweq	r1, #29952	; 0x7500
    1f7c:	0000a707 	andeq	sl, r0, r7, lsl #14
    1f80:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    1f84:	1500000f 	strne	r0, [r0, #-15]
    1f88:	f0080308 			; <UNDEFINED> instruction: 0xf0080308
    1f8c:	04000000 	streq	r0, [r0], #-0
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f90:	0a090e00 	beq	245798 <__ccfg+0x2257f0>
	if (b->attributes.b.outgoing) {
    1f94:	09150000 	ldmdbeq	r5, {}	; <UNPREDICTABLE>
	b = header (p);
    1f98:	032b0303 			; <UNDEFINED> instruction: 0x032b0303
	if (b->attributes.b.outgoing) {
    1f9c:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
		verify_ses (b, "tcv02");
    1fa0:	30000000 	andcc	r0, r0, r0
    1fa4:	08030b15 	stmdaeq	r3, {r0, r2, r4, r8, r9, fp}
    1fa8:	000003c2 	andeq	r0, r0, r2, asr #7
    1fac:	001f2413 	andseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
    1fb0:	03141500 	tsteq	r4, #0, 10
		verify_plg (b, tcv_out, "tcv03");
    1fb4:	0000a708 	andeq	sl, r0, r8, lsl #14
    1fb8:	e7130000 	ldr	r0, [r3, -r0]
    1fbc:	1500000b 	strne	r0, [r0, #-11]
    1fc0:	a7080315 	smladge	r8, r5, r3, r0
    1fc4:	02000000 	andeq	r0, r0, #0
    1fc8:	004c8e13 	subeq	r8, ip, r3, lsl lr
    1fcc:	03161500 	tsteq	r6, #0, 10
    1fd0:	0002cf0b 	andeq	ip, r2, fp, lsl #30
    1fd4:	54130400 	ldrpl	r0, [r3], #-1024	; 0xfffffc00
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fd8:	15000047 	strne	r0, [r0, #-71]	; 0xffffffb9
}
    1fdc:	f0090317 			; <UNDEFINED> instruction: 0xf0090317
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fe0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
		rlp (b);
    1fe4:	00000f13 	andeq	r0, r0, r3, lsl pc
}
    1fe8:	03181500 	tsteq	r8, #0, 10
		rlp (b);
    1fec:	0003c20f 	andeq	ip, r3, pc, lsl #4
    1ff0:	5d130c00 	ldcpl	12, cr0, [r3, #-0]
    1ff4:	15000009 	strne	r0, [r0, #-9]
    1ff8:	d2150319 	andsle	r0, r5, #1677721600	; 0x64000000
    1ffc:	2c000003 	stccs	0, cr0, [r0], {3}
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2000:	03520c00 	cmpeq	r2, #0, 24
    2004:	03d20000 	bicseq	r0, r2, #0
    2008:	94150000 	ldrls	r0, [r5], #-0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    200c:	03000000 	movweq	r0, #0
	va_start (ap, plid);
    2010:	5f040700 	svcpl	0x00040700
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2014:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    2018:	00000bdc 	ldrdeq	r0, [r0], -ip
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    201c:	1b031c15 	blne	c9078 <__ccfg+0xa90d0>
    2020:	0000035f 	andeq	r0, r0, pc, asr r3
    2024:	000bbc11 	andeq	fp, fp, r1, lsl ip
    2028:	031e1500 	tsteq	lr, #0, 10
			syserror (ENODEVICE, "tcv04");
    202c:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
		syserror (EMALLOC, "tcv05");
    2030:	07010100 	streq	r0, [r1, -r0, lsl #2]
	attp.b.outgoing = 1;
    2034:	0003d804 	andeq	sp, r3, r4, lsl #16
    2038:	070f0b00 	streq	r0, [pc, -r0, lsl #22]
    203c:	1d160000 	ldcne	0, cr0, [r6, #-0]
    2040:	0000a713 	andeq	sl, r0, r3, lsl r7
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2044:	0b010100 	bleq	4244c <__ccfg+0x224a4>
		if (descriptors [fd] == NULL)
    2048:	000002ee 	andeq	r0, r0, lr, ror #5
    204c:	b81a1e16 	ldmdalt	sl, {r1, r2, r4, r9, sl, fp, ip}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2050:	01000000 	mrseq	r0, (UNDEF: 0)
		return ERROR;
    2054:	0c690b01 			; <UNDEFINED> instruction: 0x0c690b01
}
    2058:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
    205c:	0000b824 	andeq	fp, r0, r4, lsr #16
    2060:	0b010100 	bleq	42468 <__ccfg+0x224c0>
	s->attpattern.b.session = fd;
    2064:	00000c87 	andeq	r0, r0, r7, lsl #25
    2068:	f4142216 			; <UNDEFINED> instruction: 0xf4142216
	descriptors [fd] = s;
    206c:	01000003 	tsteq	r0, r3
	q_init (&(s->rqueue));
    2070:	0fb10301 	svceq	0x00b10301
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2074:	43160000 	tstmi	r6, #0
    2078:	00043e10 	andeq	r3, r4, r0, lsl lr
    207c:	44040700 	strmi	r0, [r4], #-1792	; 0xfffff900
    2080:	0f000004 	svceq	0x00000004
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2084:	00045001 	andeq	r5, r4, r1
    2088:	008d1000 	addeq	r1, sp, r0
    208c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	descriptors [fd] = s;
    2090:	09461608 	stmdbeq	r6, {r3, r9, sl, ip}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2094:	00000474 	andeq	r0, r0, r4, ror r4
    2098:	0015170a 	andseq	r1, r5, sl, lsl #14
	if (s == NULL)
    209c:	0f4a1600 	svceq	0x004a1600
		syserror (EMALLOC, "tcv05");
    20a0:	00000432 	andeq	r0, r0, r2, lsr r4
    20a4:	12090a00 	andne	r0, r9, #0, 20
    20a8:	4b160000 	blmi	5820b0 <__ccfg+0x562108>
    20ac:	00008d07 	andeq	r8, r0, r7, lsl #26
    20b0:	03000400 	movweq	r0, #1024	; 0x400
    20b4:	00001037 	andeq	r1, r0, r7, lsr r0
    20b8:	50034c16 	andpl	r4, r3, r6, lsl ip
    20bc:	05000004 	streq	r0, [r0, #-4]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20c0:	00000474 	andeq	r0, r0, r4, ror r4
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20c4:	0000fc0c 	andeq	pc, r0, ip, lsl #24
    20c8:	00049500 	andeq	r9, r4, r0, lsl #10
    20cc:	00941500 	addseq	r1, r4, r0, lsl #10
	plugins [ord] = pl;
    20d0:	00030000 	andeq	r0, r3, r0
	return 0;
    20d4:	0013c10b 	andseq	ip, r3, fp, lsl #2
		return ERROR;
    20d8:	120d0100 	andne	r0, sp, #0, 2
}
    20dc:	00000485 	andeq	r0, r0, r5, lsl #9
    20e0:	800c0101 	andhi	r0, ip, r1, lsl #2
	verify_fds (fd, "tcv10");
    20e4:	b3000004 	movwlt	r0, #4
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20e8:	15000004 	strne	r0, [r0, #-4]
	verify_fds (fd, "tcv10");
    20ec:	00000094 	muleq	r0, r4, r0
    20f0:	a3050001 	movwge	r0, #20481	; 0x5001
    20f4:	16000004 	strne	r0, [r0], -r4
	verify_plg (b, tcv_frm, "tcv11");
    20f8:	000013dd 	ldrdeq	r1, [r0], -sp
	b = q_first (rq);
    20fc:	b318cf01 	tstlt	r8, #1, 30
	if (q_end (b, rq)) {
    2100:	0c000004 	stceq	0, cr0, [r0], {4}
		if (state != WNONE) {
    2104:	000000eb 	andeq	r0, r0, fp, ror #1
    2108:	000004d4 	ldrdeq	r0, [r0], -r4
			when (rq, state);
    210c:	00009415 	andeq	r9, r0, r5, lsl r4
			release;
    2110:	05001000 	streq	r1, [r0, #-0]
	deq (b);	// Dequeue the packet ...
    2114:	000004c4 	andeq	r0, r0, r4, asr #9
    2118:	00119a17 	andseq	r9, r1, r7, lsl sl
	p = ((address)(b + 1));
    211c:	0dec0100 	stfeqe	f0, [ip]
	verify_plg (b, tcv_frm, "tcv11");
    2120:	000004d4 	ldrdeq	r0, [r0], -r4
    2124:	24030501 	strcs	r0, [r3], #-1281	; 0xfffffaff
    2128:	18000051 	stmdane	r0, {r0, r4, r6}
    212c:	00001016 	andeq	r1, r0, r6, lsl r0
    2130:	0d010c01 	stceq	12, cr0, [r1, #-4]
    2134:	000000a7 	andeq	r0, r0, r7, lsr #1
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2138:	05680305 	strbeq	r0, [r8, #-773]!	; 0xfffffcfb
    213c:	36192000 	ldrcc	r2, [r9], -r0
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2140:	01000002 	tsteq	r0, r2
    2144:	050802d0 	streq	r0, [r8, #-720]	; 0xfffffd30
	b->u.pointers.tail =
    2148:	0006a403 	andeq	sl, r6, r3, lsl #8
}
    214c:	00a70c20 	adceq	r0, r7, r0, lsr #24
		return NULL;
    2150:	051e0000 	ldreq	r0, [lr, #-0]
    2154:	94150000 	ldrls	r0, [r5], #-0
    2158:	00000000 	andeq	r0, r0, r0
    215c:	0f971800 	svceq	0x00971800
    2160:	d2010000 	andle	r0, r1, #0
	verify_fds (fd, "tcv16");
    2164:	050e0d02 	streq	r0, [lr, #-3330]	; 0xfffff2fe
								Boolean urg) {
    2168:	03050000 	movweq	r0, #20480	; 0x5000
    216c:	2000056a 	andcs	r0, r0, sl, ror #10
	verify_fds (fd, "tcv16");
    2170:	0002c119 	andeq	ip, r2, r9, lsl r1
    2174:	048c0100 	streq	r0, [ip], #256	; 0x100
    2178:	ac030507 	cfstr32ge	mvfx0, [r3], {7}
	verify_pld (s, tcv_frm, "tcv17");
    217c:	1a200006 	bne	80219c <__ccfg+0x7e21f4>
    2180:	000f8b01 	andeq	r8, pc, r1, lsl #22
    2184:	05720100 	ldrbeq	r0, [r2, #-256]!	; 0xffffff00
    2188:	008d0105 	addeq	r0, sp, r5, lsl #2
    218c:	16e00000 	strbtne	r0, [r0], r0
    2190:	17400000 	strbne	r0, [r0, -r0]
    2194:	9c010000 	stcls	0, cr0, [r1], {-0}
    2198:	00000584 	andeq	r0, r0, r4, lsl #11
	ptrs.head = (word) fd;
    219c:	0006181b 	andeq	r1, r6, fp, lsl r8
	ptrs.tail = (word) urg;
    21a0:	00057200 	andeq	r7, r5, r0, lsl #4
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21a4:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    21a8:	11057601 	tstne	r5, r1, lsl #12
		if (state != WNONE) {
    21ac:	000000bd 	strheq	r0, [r0], -sp
    21b0:	11f71d00 	mvnsne	r1, r0, lsl #26
}
    21b4:	17220000 	strne	r0, [r2, -r0]!
			when (eid, state);
    21b8:	17240000 	strne	r0, [r4, -r0]!
    21bc:	8d010000 	stchi	0, cr0, [r1, #-0]
			release;
    21c0:	1e000205 	cdpne	2, 0, cr0, cr0, cr5, {0}
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21c4:	00122301 	andseq	r2, r2, r1, lsl #6
    21c8:	05680100 	strbeq	r0, [r8, #-256]!	; 0xffffff00
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    21cc:	00145821 	andseq	r5, r4, r1, lsr #16
    21d0:	0016b000 	andseq	fp, r6, r0
    21d4:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    21d8:	1f000007 	svcne	0x00000007
    21dc:	00001230 	andeq	r1, r0, r0, lsr r2
    21e0:	2001080d 	andcs	r0, r1, sp, lsl #16
		if (state != WNONE) {
    21e4:	000011d0 	ldrdeq	r1, [r0], -r0
    21e8:	00001458 	andeq	r1, r0, r8, asr r4
			tmwait (state);
    21ec:	00000478 	andeq	r0, r0, r8, ror r4
    21f0:	02056a01 	andeq	r6, r5, #4096	; 0x1000
	b->attributes = s->attpattern;
    21f4:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
		b->attributes.b.urgent = 1;
    21f8:	0011df21 	andseq	sp, r1, r1, lsr #30
    21fc:	12220000 	eorne	r0, r2, #0
	b->u.pointers.head = ptrs.head;
    2200:	72000008 	andvc	r0, r0, #8
	b->u.pointers.tail = length;
    2204:	98000014 	stmdals	r0, {r2, r4}
	return (address) (b + 1);
    2208:	0d000004 	stceq	0, cr0, [r0, #-16]
    220c:	07b30227 	ldreq	r0, [r3, r7, lsr #4]!
    2210:	98230000 	stmdals	r3!, {}	; <UNPREDICTABLE>
    2214:	24000004 	strcs	r0, [r0], #-4
    2218:	00000820 	andeq	r0, r0, r0, lsr #16
    221c:	00001500 	andeq	r1, r0, r0, lsl #10
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2220:	00125c25 	andseq	r5, r2, r5, lsr #24
    2224:	00147200 	andseq	r7, r4, r0, lsl #4
    2228:	0004c000 	andeq	ip, r4, r0
	verify_fph (phy, "tcv23");
    222c:	04b30100 	ldrteq	r0, [r3], #256	; 0x100
    2230:	14381d04 	ldrtne	r1, [r8], #-3332	; 0xfffff2fc
    2234:	14ea0000 	strbtne	r0, [sl], #0
    2238:	14f60000 	ldrbtne	r0, [r6], #0
}
    223c:	a4010000 	strge	r0, [r1], #-0
	return (physical [phy]) (opt, arg);
    2240:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
    2244:	fe000012 	mcr2	0, 0, r0, cr0, cr2, {0}
    2248:	00000014 	andeq	r0, r0, r4, lsl r0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    224c:	01000015 	tsteq	r0, r5, lsl r0
	if (opt < 0) {
    2250:	250404aa 	strcs	r0, [r4, #-1194]	; 0xfffffb56
		if (fd < 0)
    2254:	000012c0 	andeq	r1, r0, r0, asr #5
		if (opt == PHYSOPT_PLUGINFO) {
    2258:	00001516 	andeq	r1, r0, r6, lsl r5
			if (fd >= TCV_MAX_PLUGS)
    225c:	000004d8 	ldrdeq	r0, [r0], -r8
			if ((p = plugins [fd]) == NULL)
    2260:	0404bb01 	streq	fp, [r4], #-2817	; 0xfffff4ff
    2264:	00144325 	andseq	r4, r4, r5, lsr #6
}
    2268:	00151600 	andseq	r1, r5, r0, lsl #12
		if (fd >= TCV_MAX_PHYS)
    226c:	0004f800 	andeq	pc, r4, r0, lsl #16
		return physinfo [fd];
    2270:	04c50100 	strbeq	r0, [r5], #256	; 0x100
    2274:	128e2004 	addne	r2, lr, #4
	verify_fds (fd, "tcv22");
    2278:	151e0000 	ldrne	r0, [lr, #-0]
    227c:	05180000 	ldreq	r0, [r8, #-0]
    2280:	c0010000 	andgt	r0, r1, r0
    2284:	06510404 	ldrbeq	r0, [r1], -r4, lsl #8
    2288:	9d210000 	stcls	0, cr0, [r1, #-0]
}
    228c:	00000012 	andeq	r0, r0, r2, lsl r0
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2290:	00125c1d 	andseq	r5, r2, sp, lsl ip
    2294:	00152e00 	andseq	r2, r5, r0, lsl #28
			return 0;
    2298:	00153000 	andseq	r3, r5, r0
    229c:	04c30100 	strbeq	r0, [r3], #256	; 0x100
    22a0:	142d2504 	strtne	r2, [sp], #-1284	; 0xfffffafc
    22a4:	15320000 	ldrne	r0, [r2, #-0]!
    22a8:	05380000 	ldreq	r0, [r8, #-0]!
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22ac:	d5010000 	strle	r0, [r1, #-0]
    22b0:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
	if (dsp != TCV_DSP_PASS) {
    22b4:	48000014 	stmdami	r0, {r2, r4}
		if (ses == NONE)
    22b8:	58000015 	stmdapl	r0, {r0, r2, r4}
			syserror (EREQPAR, "tcv26");
    22bc:	01000005 	tsteq	r0, r5
		verify_fds (ses, "tcv27");
    22c0:	8e0404cc 	cdphi	4, 0, cr0, cr4, cr12, {6}
    22c4:	21000006 	tstcs	r0, r6
    22c8:	0000145d 	andeq	r1, r0, sp, asr r4
    22cc:	125c1d00 	subsne	r1, ip, #0, 26
    22d0:	156c0000 	strbne	r0, [ip, #-0]!
		if ((p = apb (size)) != NULL) {
    22d4:	156e0000 	strbne	r0, [lr, #-0]!
    22d8:	df010000 	svcle	0x00010000
		return NULL;
    22dc:	38250404 	stmdacc	r5!, {r2, sl}
			p->attributes = descriptors [ses] -> attpattern;
    22e0:	8c000014 	stchi	0, cr0, [r0], {20}
			dispose (p, dsp);
    22e4:	70000015 	andvc	r0, r0, r5, lsl r0
			p->attributes = descriptors [ses] -> attpattern;
    22e8:	01000005 	tsteq	r0, r5
			p->attributes.b.outgoing = 0;
    22ec:	250404e8 	strcs	r0, [r4, #-1256]	; 0xfffffb18
			dispose (p, dsp);
    22f0:	0000127f 	andeq	r1, r0, pc, ror r2
			return (address)(p + 1);
    22f4:	00001590 	muleq	r0, r0, r5
    22f8:	00000588 	andeq	r0, r0, r8, lsl #11
	if ((p = apb (size)) != NULL)
    22fc:	0d04ee01 	stceq	14, cr14, [r4, #-4]
    2300:	00128e26 	andseq	r8, r2, r6, lsr #28
		return (address)(p + 1);
    2304:	00159a00 	andseq	r9, r5, r0, lsl #20
    2308:	00159e00 	andseq	r9, r5, r0, lsl #28
    230c:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    2310:	0006dc04 	andeq	sp, r6, r4, lsl #24
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2314:	129d2100 	addsne	r2, sp, #0, 2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2318:	25000000 	strcs	r0, [r0, #-0]
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    231c:	00001443 	andeq	r1, r0, r3, asr #8
    2320:	000015be 			; <UNDEFINED> instruction: 0x000015be
		syserror (EREQPAR, "tcv28");
    2324:	000005a0 	andeq	r0, r0, r0, lsr #11
		syserror (EMALLOC, "tcv29");
    2328:	0404f701 	streq	pc, [r4], #-1793	; 0xfffff8ff
	physical [phy] = ps;
    232c:	00144e20 	andseq	r4, r4, r0, lsr #28
	physinfo [phy] = info;
    2330:	0015c000 	andseq	ip, r5, r0
    2334:	0005b800 	andeq	fp, r5, r0, lsl #16
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2338:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    233c:	00070804 	andeq	r0, r7, r4, lsl #16
    2340:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
		syserror (EMALLOC, "tcv29");
    2344:	1d000000 	stcne	0, cr0, [r0, #-0]
    2348:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
	q_init (q);
    234c:	000015c8 	andeq	r1, r0, r8, asr #11
}
    2350:	000015cc 	andeq	r1, r0, ip, asr #11
    2354:	0404fd01 	streq	pc, [r4], #-3329	; 0xfffff2ff
    2358:	00125c1d 	andseq	r5, r2, sp, lsl ip
    235c:	0015cc00 	andseq	ip, r5, r0, lsl #24
    2360:	0015ce00 	andseq	ip, r5, r0, lsl #28
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2364:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
	verify_fph (phy, "tcv30");
    2368:	0b952604 	bleq	fe54bb80 <_estack+0xde546b80>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    236c:	15d60000 	ldrbne	r0, [r6]
    2370:	15e20000 	strbne	r0, [r2, #0]!
	verify_fph (phy, "tcv30");
    2374:	0d010000 	stceq	0, cr0, [r1, #-0]
    2378:	075c0405 	ldrbeq	r0, [ip, -r5, lsl #8]
    237c:	11270000 			; <UNDEFINED> instruction: 0x11270000
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2380:	d6000013 			; <UNDEFINED> instruction: 0xd6000013
    2384:	e0000015 	and	r0, r0, r5, lsl r0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2388:	01000015 	tsteq	r0, r5, lsl r0
    238c:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
		if (plugins [plg] == NULL)
    2390:	0000132d 	andeq	r1, r0, sp, lsr #6
    2394:	00132021 	andseq	r2, r3, r1, lsr #32
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2398:	1d000000 	stcne	0, cr0, [r0, #-0]
}
    239c:	0000125c 	andeq	r1, r0, ip, asr r2
    23a0:	0000160a 	andeq	r1, r0, sl, lsl #12
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23a4:	0000160c 	andeq	r1, r0, ip, lsl #12
    23a8:	04053e01 	streq	r3, [r5], #-3585	; 0xfffff1ff
    23ac:	0012741d 	andseq	r7, r2, sp, lsl r4
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23b0:	00160c00 	andseq	r0, r6, r0, lsl #24
    23b4:	00161c00 	andseq	r1, r6, r0, lsl #24
    23b8:	05410100 	strbeq	r0, [r1, #-256]	; 0xffffff00
    23bc:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
    23c0:	161c0000 	ldrne	r0, [ip], -r0
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23c4:	161e0000 	ldrne	r0, [lr], -r0
	len -= (ap.head + ap.tail);
    23c8:	44010000 	strmi	r0, [r1], #-0
    23cc:	7f250405 	svcvc	0x00250405
    23d0:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23d4:	d0000016 	andle	r0, r0, r6, lsl r0
    23d8:	01000005 	tsteq	r0, r5
    23dc:	250b0547 	strcs	r0, [fp, #-1351]	; 0xfffffab9
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23e0:	0000146b 	andeq	r1, r0, fp, ror #8
    23e4:	00001626 	andeq	r1, r0, r6, lsr #12
    23e8:	000005e8 	andeq	r0, r0, r8, ror #11
	return 1;
    23ec:	04054b01 	streq	r4, [r5], #-2817	; 0xfffff4ff
    23f0:	ed280000 	stc	0, cr0, [r8, #-0]
    23f4:	8c000011 	stchi	0, cr0, [r0], {17}
    23f8:	8e000014 	mcrhi	0, 0, r0, cr0, cr4, {0}
    23fc:	0d000014 	stceq	0, cr0, [r0, #-80]	; 0xffffffb0
	verify_fph (phy, "tcv32");
    2400:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
    2404:	ba000011 	blt	2450 <tcvphy_top+0x10>
    2408:	bc000014 	stclt	0, cr0, [r0], {20}
    240c:	0d000014 	stceq	0, cr0, [r0, #-80]	; 0xffffffb0
    2410:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
    2414:	40000011 	andmi	r0, r0, r1, lsl r0
	oq = oqueues [phy];
    2418:	42000016 	andmi	r0, r0, #22
	b = q_first (oq);
    241c:	0d000016 	stceq	0, cr0, [r0, #-88]	; 0xffffffa8
	if (q_end (b, oq)) {
    2420:	1a000227 	bne	2cc4 <rx_int_enable+0x9c>
	*len = b->length;
    2424:	0012e101 	andseq	lr, r2, r1, lsl #2
	deq (b);	// Dequeue the packet ...
    2428:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0xffffff00
}
    242c:	00a70106 	adceq	r0, r7, r6, lsl #2
	...
		return NULL;
    2438:	9c010000 	stcls	0, cr0, [r1], {-0}
    243c:	00000812 	andeq	r0, r0, r2, lsl r8
	verify_fph (phy, "tcv33");
    2440:	00637329 	rsbeq	r7, r3, r9, lsr #6
    2444:	07055e01 	streq	r5, [r5, -r1, lsl #28]
    2448:	000000a7 	andeq	r0, r0, r7, lsr #1
    244c:	00000417 	andeq	r0, r0, r7, lsl r4
    2450:	11c32a00 	bicne	r2, r3, r0, lsl #20
    2454:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
	oq = oqueues [phy];
    2458:	2a031404 	bcs	c7470 <__ccfg+0xa74c8>
	b = q_first (oq);
    245c:	2b000008 	blcs	2484 <tcvphy_end+0x10>
		return NULL;
    2460:	0000146e 	andeq	r1, r0, lr, ror #8
	return (address)(b + 1);
    2464:	0104ad01 	tsteq	r4, r1, lsl #26
}
    2468:	70012c00 	andvc	r2, r1, r0, lsl #24
    246c:	01000011 	tsteq	r0, r1, lsl r0
    2470:	0106047e 	tsteq	r6, lr, ror r4
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2474:	00001434 	andeq	r1, r0, r4, lsr r4
	verify_plg (b, tcv_xmt, "tcv34");
    2478:	00001458 	andeq	r1, r0, r8, asr r4
	hblock_t *b = header (pkt);
    247c:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
	verify_plg (b, tcv_xmt, "tcv34");
    2480:	362d0000 	strtcc	r0, [sp], -r0
    2484:	01000000 	mrseq	r0, (UNDEF: 0)
    2488:	a719047e 			; <UNDEFINED> instruction: 0xa719047e
    248c:	2a000000 	bcs	2494 <tcvphy_end+0x20>
    2490:	00000004 	andeq	r0, r0, r4
    2494:	0ff5011e 	svceq	0x00f5011e
    2498:	01010000 	mrseq	r0, (UNDEF: 1)
	dispose (b, plugins [b->attributes.b.plugin] ->
    249c:	127c0604 	rsbsne	r0, ip, #4, 12	; 0x400000
}
    24a0:	14340000 	ldrtne	r0, [r4], #-0
	dispose (b, plugins [b->attributes.b.plugin] ->
    24a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    24a8:	00000a1e 	andeq	r0, r0, lr, lsl sl
    24ac:	0013a62e 	andseq	sl, r3, lr, lsr #12
}
    24b0:	0013ac00 	andseq	sl, r3, r0, lsl #24
    while(1)
    24b4:	00088600 	andeq	r8, r8, r0, lsl #12
{
    24b8:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    SetupTrimDevice();
    24bc:	0b046b01 	bleq	11d0c8 <__ccfg+0xfd120>
    pui32Src = &_etext;
    24c0:	0000008d 	andeq	r0, r0, sp, lsl #1
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24c4:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    __asm("    ldr     r0, =_bss\n"
    24c8:	12a60000 	adcne	r0, r6, #0
    24cc:	03580000 	cmpeq	r8, #0
    24d0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    24d4:	54200204 	strtpl	r0, [r0], #-516	; 0xfffffdfc
    24d8:	a800000f 	stmdage	r0, {r0, r1, r2, r3}
   main();
    24dc:	78000012 	stmdavc	r0, {r1, r4}
    FaultISR();
    24e0:	01000003 	tsteq	r0, r3
        *pui32Dest++ = *pui32Src++;
    24e4:	1a02040b 	bne	83518 <__ccfg+0x63570>
    24e8:	23000009 	movwcs	r0, #9
    24ec:	00000378 	andeq	r0, r0, r8, ror r3
    24f0:	000f612f 	andeq	r6, pc, pc, lsr #2
    24f4:	0f6d3000 	svceq	0x006d3000
    24f8:	03780000 	cmneq	r8, #0
    24fc:	6e310000 	cdpvs	0, 3, cr0, cr1, cr0, {0}
    2500:	3d00000f 	stccc	0, cr0, [r0, #-60]	; 0xffffffc4
static byte get_byte () {
    2504:	22000004 	andcs	r0, r0, #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2508:	000013c9 	andeq	r1, r0, r9, asr #7
    250c:	000012b2 			; <UNDEFINED> instruction: 0x000012b2
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2510:	00000398 	muleq	r0, r8, r3
    2514:	e704fa01 	str	pc, [r4, -r1, lsl #20]
		if (ee_inp)
    2518:	21000008 	tstcs	r0, r8
			b |= 1;
    251c:	000013e5 	andeq	r1, r0, r5, ror #7
    2520:	0013d821 	andseq	sp, r3, r1, lsr #16
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2524:	f3220000 	vhadd.u32	d0, d2, d0
	for (b = 0, i = 0; i < 8; i++) {
    2528:	b6000013 			; <UNDEFINED> instruction: 0xb6000013
}
    252c:	b0000012 	andlt	r0, r0, r2, lsl r0
    2530:	01000003 	tsteq	r0, r3
    2534:	090104fe 	stmdbeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl}
static void put_byte (byte b) {
    2538:	02210000 	eoreq	r0, r1, #0
    253c:	00000014 	andeq	r0, r0, r4, lsl r0
    2540:	00141032 	andseq	r1, r4, r2, lsr r0
    2544:	0012ba00 	andseq	fp, r2, r0, lsl #20
		if (b & 0x80)
    2548:	0003c800 	andeq	ip, r3, r0, lsl #16
    254c:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2550:	00141f21 	andseq	r1, r4, r1, lsr #30
	for (i = 0; i < 8; i++) {
    2554:	00000000 	andeq	r0, r0, r0
		b <<= 1;
    2558:	14102000 	ldrne	r2, [r0], #-0
	for (i = 0; i < 8; i++) {
    255c:	12fa0000 	rscsne	r0, sl, #0
}
    2560:	03e00000 	mvneq	r0, #0
    2564:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2568:	09350204 	ldmdbeq	r5!, {r2, r9}
    256c:	1f210000 	svcne	0x00210000
	put_byte (cmd);
    2570:	00000014 	andeq	r0, r0, r4, lsl r0
    2574:	00141020 	andseq	r1, r4, r0, lsr #32
}
    2578:	0012fc00 	andseq	pc, r2, r0, lsl #24
    257c:	00040000 	andeq	r0, r4, r0
static void wwait (word st, word del) {
    2580:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    2584:	00095002 	andeq	r5, r9, r2
    2588:	141f2100 	ldrne	r2, [pc], #-256	; 2590 <wwait+0x10>
	while (dopen && (rdsr () & 1)) {
    258c:	20000000 	andcs	r0, r0, r0
    2590:	000013f3 	strdeq	r1, [r0], -r3
    2594:	00001316 	andeq	r1, r0, r6, lsl r3
    2598:	00000418 	andeq	r0, r0, r8, lsl r4
	put_byte (CMD_RDSR);
    259c:	02040e01 	andeq	r0, r4, #1, 28
	r = get_byte ();
    25a0:	0000096b 	andeq	r0, r0, fp, ror #18
    25a4:	00140221 	andseq	r0, r4, r1, lsr #4
	while (dopen && (rdsr () & 1)) {
    25a8:	f3260000 	vhadd.u32	d0, d6, d0
}
    25ac:	1c000013 	stcne	0, cr0, [r0], {19}
		if (st == WNONE)
    25b0:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    25b4:	01000013 	tsteq	r0, r3, lsl r0
			mdelay (1);
    25b8:	8602040e 	strhi	r0, [r2], -lr, lsl #8
    25bc:	21000009 	tstcs	r0, r9
			delay (del, st);
    25c0:	00001402 	andeq	r1, r0, r2, lsl #8
    25c4:	12342000 	eorsne	r2, r4, #0
			release;
    25c8:	132e0000 			; <UNDEFINED> instruction: 0x132e0000
    25cc:	04300000 	ldrteq	r0, [r0], #-0
    25d0:	1b010000 	blne	425d8 <__ccfg+0x22630>
static void ready () {
    25d4:	09a10204 	stmibeq	r1!, {r2, r9}
	if (dopen) {
    25d8:	43210000 			; <UNDEFINED> instruction: 0x43210000
		wwait (WNONE, 1);
    25dc:	00000012 	andeq	r0, r0, r2, lsl r0
    25e0:	000ccb26 	andeq	ip, ip, r6, lsr #22
    25e4:	00135800 	andseq	r5, r3, r0, lsl #16
	dstat = 0;
    25e8:	00138200 	andseq	r8, r3, r0, lsl #4
}
    25ec:	043e0100 	ldrteq	r0, [lr], #-256	; 0xffffff00
    25f0:	0009c802 	andeq	ip, r9, r2, lsl #16
    25f4:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
	udelay (1);
    25f8:	13760000 	cmnne	r6, #0
    25fc:	04480000 	strbeq	r0, [r8], #-0
	udelay (1);
    2600:	01010000 	mrseq	r0, (UNDEF: 1)
		dopen = DOPEN_TEMP;
    2604:	26000203 	strcs	r0, [r0], -r3, lsl #4
    2608:	000012ab 	andeq	r1, r0, fp, lsr #5
    260c:	00001392 	muleq	r0, r2, r3
    2610:	000013a6 	andeq	r1, r0, r6, lsr #7
static void cclose () {
    2614:	03045101 	movweq	r5, #16641	; 0x4101
	if (dopen == DOPEN_TEMP) {
    2618:	000009ef 	andeq	r0, r0, pc, ror #19
    261c:	0012b61d 	andseq	fp, r2, sp, lsl r6
		wwait (WNONE, 1);
    2620:	00139200 	andseq	r9, r3, r0, lsl #4
    2624:	00139600 	andseq	r9, r3, r0, lsl #12
	cmd_0 (CMD_DP);
    2628:	01140b00 	tsteq	r4, r0, lsl #22
    262c:	95330005 	ldrls	r0, [r3, #-5]!
		dopen = 0;
    2630:	ac00000b 	stcge	0, cr0, [r0], {11}
}
    2634:	60000013 	andvs	r0, r0, r3, lsl r0
word ee_open () {
    2638:	01000004 	tsteq	r0, r4
	ready ();
    263c:	33020472 	movwcc	r0, #9330	; 0x2472
	dopen = DOPEN_PERM;
    2640:	00001311 	andeq	r1, r0, r1, lsl r3
    2644:	000013ac 	andeq	r1, r0, ip, lsr #7
}
    2648:	00000460 	andeq	r0, r0, r0, ror #8
	if (dopen) {
    264c:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
    2650:	00132d21 	andseq	r2, r3, r1, lsr #26
		dopen = DOPEN_TEMP;
    2654:	13202100 	nopne	{0}	; <UNPREDICTABLE>
		cclose ();
    2658:	00000000 	andeq	r0, r0, r0
}
    265c:	08012c00 	stmdaeq	r1, {sl, fp, sp}
int ser_out (word st, const char *m) {
    2660:	01000013 	tsteq	r0, r3, lsl r0
	if ((prcs = running (__outserial)) != 0) {
    2664:	010603ed 	smlatteq	r6, sp, r3, r0
    2668:	0000119c 	muleq	r0, ip, r1
    266c:	000011d8 	ldrdeq	r1, [r0], -r8
		join (prcs, st);
    2670:	0aa79c01 	beq	fe9e967c <_estack+0xde9e467c>
		release;
    2674:	76340000 	ldrtvc	r0, [r4], -r0
	if (*m)
    2678:	01006c61 	tsteq	r0, r1, ror #24
		prcs = strlen (m) +1;
    267c:	8d1c03ed 	ldchi	3, cr0, [ip, #-948]	; 0xfffffc4c
    2680:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2684:	00692950 	rsbeq	r2, r9, r0, asr r9
    2688:	0603ef01 	streq	lr, [r3], -r1, lsl #30
    268c:	0000008d 	andeq	r0, r0, sp, lsl #1
		umwait (st);
    2690:	0000045b 	andeq	r0, r0, fp, asr r4
    2694:	006e6229 	rsbeq	r6, lr, r9, lsr #4
		prcs =  m [1] + 3;
    2698:	0803f001 	stmdaeq	r3, {r0, ip, sp, lr, pc}
	if (*m)
    269c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
		strcpy (buf, m);
    26a0:	00000479 	andeq	r0, r0, r9, ror r4
    26a4:	0011ed25 	andseq	lr, r1, r5, lsr #26
	if (runstrand (__outserial, buf) == 0) {
    26a8:	00119c00 	andseq	r9, r1, r0, lsl #24
    26ac:	00031800 	andeq	r1, r3, r0, lsl #16
		ufree (buf);
    26b0:	03f20100 	mvnseq	r0, #0, 2
    26b4:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
		memcpy (buf, m, prcs);
    26b8:	11a20000 			; <UNDEFINED> instruction: 0x11a20000
    26bc:	03300000 	teqeq	r0, #0
    26c0:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
}
    26c4:	0a950303 	beq	fe5432d8 <_estack+0xde53e2d8>
    26c8:	bb350000 	bllt	d426d0 <__ccfg+0xd22728>
int ser_in (word st, char *buf, int len) {
    26cc:	79000013 	stmdbvc	r0, {r0, r1, r4}
    26d0:	00000004 	andeq	r0, r0, r4
	if (len == 0)
    26d4:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
	if (__inpline == NULL) {
    26d8:	0011c600 	andseq	ip, r1, r0, lsl #12
		if ((prcs = running (__inserial)) == 0) {
    26dc:	0011c800 	andseq	ip, r1, r0, lsl #16
    26e0:	03f90100 	mvnseq	r0, #0, 2
			prcs = runthread (__inserial);
    26e4:	012c0002 			; <UNDEFINED> instruction: 0x012c0002
    26e8:	00001266 	andeq	r1, r0, r6, ror #4
			if (prcs == 0) {
    26ec:	0603da01 	streq	sp, [r3], -r1, lsl #20
				npwait (st);
    26f0:	00115801 	andseq	r5, r1, r1, lsl #16
		release;
    26f4:	00119c00 	andseq	r9, r1, r0, lsl #24
		join (prcs, st);
    26f8:	2c9c0100 	ldfcss	f0, [ip], {0}
    26fc:	3400000b 	strcc	r0, [r0], #-11
	if (*__inpline == NULL) // bin cmd
    2700:	006c6176 	rsbeq	r6, ip, r6, ror r1
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2704:	1c03da01 			; <UNDEFINED> instruction: 0x1c03da01
	if (prcs >= len)
    2708:	0000008d 	andeq	r0, r0, sp, lsl #1
		prcs = len-1;
    270c:	691c5001 	ldmdbvs	ip, {r0, ip, lr}
	memcpy (buf, __inpline, prcs);
    2710:	03dc0100 	bicseq	r0, ip, #0, 2
    2714:	00008d06 	andeq	r8, r0, r6, lsl #26
    2718:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
	ufree (__inpline);
    271c:	03dd0100 	bicseq	r0, sp, #0, 2
	__inpline = NULL;
    2720:	0000df08 	andeq	sp, r0, r8, lsl #30
	if (*buf) // if it's NULL, it's a bin cmd
    2724:	00048c00 	andeq	r8, r4, r0, lsl #24
		buf [prcs] = '\0';
    2728:	11ed2500 	mvnne	r2, r0, lsl #10
}
    272c:	11580000 	cmpne	r8, r0
		prcs = strlen (__inpline);
    2730:	02d00000 	sbcseq	r0, r0, #0
    2734:	df010000 	svcle	0x00010000
		return 0;
    2738:	ac200203 	sfmge	f0, 4, [r0], #-12
    273c:	5c000013 	stcpl	0, cr0, [r0], {19}
    2740:	e8000011 	stmda	r0, {r0, r4}
int ser_outf (word st, const char *m, ...) {
    2744:	01000002 	tsteq	r0, r2
    2748:	1a0303e2 	bne	c36d8 <__ccfg+0xa3730>
	if ((prcs = running (__outserial)) != 0) {
    274c:	3500000b 	strcc	r0, [r0, #-11]
    2750:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
		join (prcs, st);
    2754:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    2758:	11f71d00 	mvnsne	r1, r0, lsl #26
		release;
    275c:	118a0000 	orrne	r0, sl, r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2760:	118c0000 	orrne	r0, ip, r0
    2764:	e6010000 	str	r0, [r1], -r0
    2768:	1e000203 	cdpne	2, 0, cr0, cr0, cr3, {0}
		umwait (st);
    276c:	00131901 	andseq	r1, r3, r1, lsl #18
    2770:	03c60100 	biceq	r0, r6, #0, 2
	if (runstrand (__outserial, buf) == 0) {
    2774:	0011d806 	andseq	sp, r1, r6, lsl #16
    2778:	00127c00 	andseq	r7, r2, r0, lsl #24
    277c:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
		ufree (buf);
    2780:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
		npwait (st);
    2784:	000011ea 	andeq	r1, r0, sl, ror #3
}
    2788:	00001218 	andeq	r1, r0, r8, lsl r2
    278c:	00000b6e 	andeq	r0, r0, lr, ror #22
    2790:	07006a36 	smladxeq	r0, r6, sl, r6
    2794:	008d0203 	addeq	r0, sp, r3, lsl #4
int ser_inf (word st, const char *fmt, ...) {
    2798:	04b20000 	ldrteq	r0, [r2], #0
    279c:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
	if (fmt == NULL)
    27a0:	02030700 	andeq	r0, r3, #0, 14
	if (__inpline == NULL) {
    27a4:	000003f4 	strdeq	r0, [r0], -r4
		if ((prcs = running (__inserial)) == 0) {
    27a8:	000004c5 	andeq	r0, r0, r5, asr #9
    27ac:	122a3700 	eorne	r3, sl, #0, 14
			prcs = runthread (__inserial);
    27b0:	12580000 	subsne	r0, r8, #0
    27b4:	6a360000 	bvs	d827bc <__ccfg+0xd62814>
			if (prcs == 0) {
    27b8:	02020800 	andeq	r0, r2, #0, 16
				npwait (st);
    27bc:	0000008d 	andeq	r0, r0, sp, lsl #1
		release;
    27c0:	000004d8 	ldrdeq	r0, [r0], -r8
		join (prcs, st);
    27c4:	08006936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp, lr}
    27c8:	03f40202 	mvnseq	r0, #536870912	; 0x20000000
	va_start (ap, fmt);
    27cc:	04eb0000 	strbteq	r0, [fp], #0
	prcs = vscan (__inpline, fmt, ap);
    27d0:	00000000 	andeq	r0, r0, r0
    27d4:	0010ee38 	andseq	lr, r0, r8, lsr lr
	ufree (__inpline);
    27d8:	03bb0100 			; <UNDEFINED> instruction: 0x03bb0100
	__inpline = NULL;
    27dc:	011e0314 	tsteq	lr, r4, lsl r3
}
    27e0:	0000145e 	andeq	r1, r0, lr, asr r4
    27e4:	06038201 	streq	r8, [r3], -r1, lsl #4
    27e8:	00001098 	muleq	r0, r8, r0
		return 0;
    27ec:	00001158 	andeq	r1, r0, r8, asr r1
    27f0:	0c289c01 	stceq	12, cr9, [r8], #-4
    27f4:	c42e0000 	strtgt	r0, [lr], #-0
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27f8:	f2000010 	vqadd.s8	d0, d0, d0
    27fc:	e3000010 	movw	r0, #16
    2800:	2900000b 	stmdbcs	r0, {r0, r1, r3}
	RF_cmdFs.frequency = 
    2804:	8901006a 	stmdbhi	r1, {r1, r3, r5, r6}
}
    2808:	008d0303 	addeq	r0, sp, r3, lsl #6
    280c:	04fe0000 	ldrbteq	r0, [lr], #0
    2810:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    2814:	03890100 	orreq	r0, r9, #0, 2
static int option (int opt, address val) {
    2818:	0003f403 	andeq	pc, r3, r3, lsl #8
    281c:	00051100 	andeq	r1, r5, r0, lsl #2
    2820:	b81b0000 	ldmdalt	fp, {}	; <UNPREDICTABLE>
    2824:	0b000002 	bleq	2834 <option+0x1c>
    2828:	2900000c 	stmdbcs	r0, {r2, r3}
    282c:	8f01006a 	svchi	0x0001006a
    2830:	008d0303 	addeq	r0, sp, r3, lsl #6
    2834:	05240000 	streq	r0, [r4, #-0]!
    2838:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    283c:	038f0100 	orreq	r0, pc, #0, 2
    2840:	0003f403 	andeq	pc, r3, r3, lsl #8
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2844:	00053700 	andeq	r3, r5, r0, lsl #14
    2848:	e7330000 	ldr	r0, [r3, -r0]!
			goto RVal;
    284c:	98000012 	stmdals	r0, {r1, r4}
			_BIS (dstate, DSTATE_RXON);
    2850:	98000010 	stmdals	r0, {r4}
    2854:	01000002 	tsteq	r0, r2
	int ret = 0;
    2858:	21020384 	smlabbcs	r2, r4, r3, r0
			p_trigger (drvprcs, qevent);
    285c:	00001303 	andeq	r1, r0, r3, lsl #6
    2860:	0012f621 	andseq	pc, r2, r1, lsr #12
    2864:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    2868:	000011eb 	andeq	r1, r0, fp, ror #3
    286c:	0d037d01 	stceq	13, cr7, [r3, #-4]
    2870:	000bfc01 	andeq	pc, fp, r1, lsl #24
    2874:	000c0800 	andeq	r0, ip, r0, lsl #16
    2878:	529c0100 	addspl	r0, ip, #0, 2
    287c:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    2880:	000013f3 	strdeq	r1, [r0], -r3
}
    2884:	1f037d01 	svcne	0x00037d01
			_BIC (dstate, DSTATE_RXON);
    2888:	0000008d 	andeq	r0, r0, sp, lsl #1
    288c:	0000054a 	andeq	r0, r0, sl, asr #10
			statid = (val == NULL) ? 0 : *val;
    2890:	13b43a00 			; <UNDEFINED> instruction: 0x13b43a00
    2894:	10010000 	andne	r0, r1, r0
	int ret = 0;
    2898:	8d010c03 	stchi	12, cr0, [r1, #-12]
			ret = (int) statid;
    289c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
	if (val != NULL)
    28a0:	9800000f 	stmdals	r0, {r0, r1, r2, r3}
		*val = ret;
    28a4:	01000010 	tsteq	r0, r0, lsl r0
			ret = rbuffl + 2;
    28a8:	000ccb9c 	muleq	ip, ip, fp
    28ac:	117d2d00 	cmnne	sp, r0, lsl #26
			if (val != NULL) {
    28b0:	10010000 	andne	r0, r1, r0
				memcpy (val, &rxstat,
    28b4:	008d1e03 	addeq	r1, sp, r3, lsl #28
    28b8:	05680000 	strbeq	r0, [r8, #-0]!
				memset (&rxstat, 0, 
    28bc:	623b0000 	eorsvs	r0, fp, #0
    28c0:	01006675 	tsteq	r0, r5, ror r6
			if (val == NULL)
    28c4:	c92f0310 	stmdbgt	pc!, {r4, r8, r9}	; <UNPREDICTABLE>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    28c8:	7b000001 	blvc	28d4 <option+0xbc>
    28cc:	3b000005 	blcc	28e8 <option+0xd0>
				utimer_set (bckf_timer, *val);
    28d0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    28d4:	38031001 	stmdacc	r3, {r0, ip}
    28d8:	0000008d 	andeq	r0, r0, sp, lsl #1
			for (ret = 0; ret < 8; ret++)
    28dc:	0000061d 	andeq	r0, r0, sp, lsl r6
				if (RF_cmdPropRadioDivSetup.txPower
    28e0:	00109a2b 	andseq	r9, r0, fp, lsr #20
					== patable [ret])
    28e4:	03180100 	tsteq	r8, #0, 2
				if (RF_cmdPropRadioDivSetup.txPower
    28e8:	11a52b01 			; <UNDEFINED> instruction: 0x11a52b01
			for (ret = 0; ret < 8; ret++)
    28ec:	3d010000 	stccc	0, cr0, [r1, #-0]
    28f0:	44270103 	strtmi	r0, [r7], #-259	; 0xfffffefd
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28f4:	6a00000d 	bvs	2930 <option+0x118>
    28f8:	6c000010 	stcvs	0, cr0, [r0], {16}
    28fc:	01000010 	tsteq	r0, r0, lsl r0
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2900:	21150365 	tstcs	r5, r5, ror #6
    2904:	00000d58 	andeq	r0, r0, r8, asr sp
			_BIS (dstate, DSTATE_IRST);
    2908:	35380000 	ldrcc	r0, [r8, #-0]!
    290c:	01000012 	tsteq	r0, r2, lsl r0
    2910:	010d02fc 	strdeq	r0, [sp, -ip]
			ret = (int) channel;
    2914:	0012363c 	andseq	r3, r2, ip, lsr r6
			goto RVal;
    2918:	02f00100 	rscseq	r0, r0, #0, 2
				(*val > 7) ? 7 : *val;
    291c:	000f500d 	andeq	r5, pc, sp
    2920:	000f8800 	andeq	r8, pc, r0, lsl #16
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2924:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    2928:	2000000d 	andcs	r0, r0, sp
			plugch ();
    292c:	0000133b 	andeq	r1, r0, fp, lsr r3
			_BIS (dstate, DSTATE_IRST);
    2930:	00000f50 	andeq	r0, r0, r0, asr pc
    2934:	00000280 	andeq	r0, r0, r0, lsl #5
			ret = (int) vrate;
    2938:	0202f501 	andeq	pc, r2, #4194304	; 0x400000
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    293c:	00000d07 	andeq	r0, r0, r7, lsl #26
    2940:	00134a21 	andseq	r4, r3, r1, lsr #20
    2944:	75260000 	strvc	r0, [r6, #-0]!
    2948:	5c000013 	stcpl	0, cr0, [r0], {19}
    294c:	6200000f 	andvs	r0, r0, #15
    2950:	0100000f 	tsteq	r0, pc
    2954:	2c0202f6 	sfmcs	f0, 4, [r2], {246}	; 0xf6
    2958:	2100000d 	tstcs	r0, sp
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    295c:	0000139e 	muleq	r0, lr, r3
    2960:	00139121 	andseq	r9, r3, r1, lsr #2
    2964:	13842100 	orrne	r2, r4, #0, 2
    2968:	27000000 	strcs	r0, [r0, -r0]
			syserror (EREQPAR, "cc13 op");
    296c:	000012ca 	andeq	r1, r0, sl, asr #5
    2970:	00000f62 	andeq	r0, r0, r2, ror #30
    2974:	00000f6c 	andeq	r0, r0, ip, ror #30
    2978:	0202f701 	andeq	pc, r2, #262144	; 0x40000
    297c:	0012d921 	andseq	sp, r2, r1, lsr #18
    2980:	3d000000 	stccc	0, cr0, [r0, #-0]
    2984:	00106801 	andseq	r6, r0, r1, lsl #16
    2988:	02eb0100 	rsceq	r0, fp, #0, 2
    298c:	00a70106 	adceq	r0, r7, r6, lsl #2
    2990:	65010000 	strvs	r0, [r1, #-0]
    2994:	3e00000d 	cdpcc	0, 0, cr0, cr0, cr13, {0}
    2998:	01006175 	tsteq	r0, r5, ror r1
    299c:	652702eb 	strvs	r0, [r7, #-747]!	; 0xfffffd15
    29a0:	0000000d 	andeq	r0, r0, sp
    29a4:	02260407 	eoreq	r0, r6, #117440512	; 0x7000000
static void issue_cmd (lword cmd) {
    29a8:	011a0000 	tsteq	sl, r0
    29ac:	0000112b 	andeq	r1, r0, fp, lsr #2
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29b0:	0902d401 	stmdbeq	r2, {r0, sl, ip, lr, pc}
    29b4:	00009b01 	andeq	r9, r0, r1, lsl #22
    29b8:	000efc00 	andeq	pc, lr, r0, lsl #24
		if (res != 0x86)
    29bc:	000f5000 	andeq	r5, pc, r0
			syserror (EHARDWARE, "hang ic0");
    29c0:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    29c4:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
		if (cnt-- == 0) {
    29c8:	00001075 	andeq	r1, r0, r5, ror r0
			diag ("HUP %lx %lx", cmd, res);
    29cc:	2102d401 	tstcs	r2, r1, lsl #8
    29d0:	000000a7 	andeq	r0, r0, r7, lsr #1
			syserror (EHARDWARE, "hang ic0");
    29d4:	000006a9 	andeq	r0, r0, r9, lsr #13
		udelay (1);
    29d8:	0061753b 	rsbeq	r7, r1, fp, lsr r5
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29dc:	2f02d401 	svccs	0x0002d401
}
    29e0:	00000dc1 	andeq	r0, r0, r1, asr #27
    29e4:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
    29e8:	00135833 	andseq	r5, r3, r3, lsr r8
    29ec:	000f1c00 	andeq	r1, pc, r0, lsl #24
static void rx_de () {
    29f0:	00026800 	andeq	r6, r2, r0, lsl #16
	if ((dstate & DSTATE_RXAC) == 0)
    29f4:	02e60100 	rsceq	r0, r6, #0, 2
    29f8:	13672102 	cmnne	r7, #-2147483648	; 0x80000000
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29fc:	00000000 	andeq	r0, r0, r0
	_BIC (dstate, DSTATE_RXAC);
    2a00:	021a0407 	andseq	r0, sl, #117440512	; 0x7000000
    2a04:	011a0000 	tsteq	sl, r0
}
    2a08:	00001484 	andeq	r1, r0, r4, lsl #9
    2a0c:	06018a01 	streq	r8, [r1], -r1, lsl #20
    2a10:	0000a701 	andeq	sl, r0, r1, lsl #14
static void rf_off () {
    2a14:	000eac00 	andeq	sl, lr, r0, lsl #24
	if ((dstate & DSTATE_RFON) == 0)
    2a18:	000efc00 	andeq	pc, lr, r0, lsl #24
    2a1c:	0f9c0100 	svceq	0x009c0100
	IntDisable (INT_RFC_CPE_0);
    2a20:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
    2a24:	00001242 	andeq	r1, r0, r2, asr #4
    2a28:	26018a01 	strcs	r8, [r1], -r1, lsl #20
	RFCAdi3VcoLdoVoltageMode (false);
    2a2c:	0000009b 	muleq	r0, fp, r0
	RFCSynthPowerDown ();
    2a30:	000006cf 	andeq	r0, r0, pc, asr #13
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a34:	0058453f 	subseq	r4, r8, pc, lsr r5
    2a38:	0101a401 	tsteq	r1, r1, lsl #8
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a3c:	000f461d 	andeq	r4, pc, sp, lsl r6	; <UNPREDICTABLE>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a40:	000ec000 	andeq	ip, lr, r0
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a44:	000eca00 	andeq	ip, lr, r0, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a48:	019c0100 	orrseq	r0, ip, r0, lsl #2
    2a4c:	011e001a 	tsteq	lr, sl, lsl r0
    2a50:	000011f8 	strdeq	r1, [r0], -r8
	_BIC (dstate, DSTATE_RFON);
    2a54:	06013801 	streq	r3, [r1], -r1, lsl #16
    2a58:	00000d98 	muleq	r0, r8, sp
}
    2a5c:	00000eac 	andeq	r0, r0, ip, lsr #29
    2a60:	0ec19c01 	cdpeq	12, 12, cr9, cr1, cr1, {0}
    2a64:	5b400000 	blpl	1002a6c <__ccfg+0xfe2ac4>
    2a68:	01000013 	tsteq	r0, r3, lsl r0
    2a6c:	df08013a 	svcle	0x0008013a
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a70:	ed000000 	stc	0, cr0, [r0, #-0]
    2a74:	41000006 	tstmi	r0, r6
    2a78:	00545545 	subseq	r5, r4, r5, asr #10
		if (cmd->status == tstat)
    2a7c:	01016801 	tsteq	r1, r1, lsl #16
		if (timeout-- == 0) {
    2a80:	00000de6 	andeq	r0, r0, r6, ror #27
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a84:	00025023 	andeq	r5, r2, r3, lsr #32
    2a88:	11874000 	orrne	r4, r7, r0
    2a8c:	47010000 	strmi	r0, [r1, -r0]
			syserror (EHARDWARE, "rt2");
    2a90:	009b0b01 	addseq	r0, fp, r1, lsl #22
    2a94:	07380000 	ldreq	r0, [r8, -r0]!
		udelay (1);
    2a98:	10420000 	subne	r0, r2, r0
		if (cmd->status == tstat)
    2a9c:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
}
    2aa0:	0c00000e 	stceq	0, cr0, [r0], {14}
    2aa4:	0500000e 	streq	r0, [r0, #-14]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2aa8:	0e75060d 	cdpeq	6, 7, cr0, cr5, cr13, {0}
    2aac:	1f210000 	svcne	0x00210000
static void rf_on () {
    2ab0:	00000014 	andeq	r0, r0, r4, lsl r0
    2ab4:	00141042 	andseq	r1, r4, r2, asr #32
	OSCHF_TurnOnXosc();
    2ab8:	000e1000 	andeq	r1, lr, r0
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2abc:	000e1800 	andeq	r1, lr, r0, lsl #16
    2ac0:	060f0500 	streq	r0, [pc], -r0, lsl #10
    2ac4:	00000e8f 	andeq	r0, r0, pc, lsl #29
    2ac8:	00141f21 	andseq	r1, r4, r1, lsr #30
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2acc:	f3420000 	vhadd.u8	d16, d2, d0
    2ad0:	5e000013 	mcrpl	0, 0, r0, cr0, cr3, {0}
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2ad4:	6600000e 	strvs	r0, [r0], -lr
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2ad8:	0500000e 	streq	r0, [r0, #-14]
	issue_cmd (
    2adc:	0ea90617 	mcreq	6, 5, r0, cr9, cr7, {0}
    2ae0:	02210000 	eoreq	r0, r1, #0
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ae4:	00000014 	andeq	r0, r0, r4, lsl r0
    2ae8:	0013f343 	andseq	pc, r3, r3, asr #6
    2aec:	000e6a00 	andeq	r6, lr, r0, lsl #20
   pPatchTab[80] = 0;
    2af0:	000e7200 	andeq	r7, lr, r0, lsl #4
   } while (--nIterations);
    2af4:	06190500 	ldreq	r0, [r9], -r0, lsl #10
   pPatchTab[53] = 2;
    2af8:	00140221 	andseq	r0, r4, r1, lsr #4
    2afc:	00000000 	andeq	r0, r0, r0
   pPatchTab[55] = 3;
    2b00:	12f0011e 	rscsne	r0, r0, #-2147483641	; 0x80000007
   pPatchTab[110] = 4;
    2b04:	2b010000 	blcs	42b0c <__ccfg+0x22b64>
   pPatchTab[107] = 5;
    2b08:	0d700601 	ldcleq	6, cr0, [r0, #-4]!
   pPatchTab[65] = 6;
    2b0c:	0d980000 	ldceq	0, cr0, [r8]
    2b10:	9c010000 	stcls	0, cr0, [r1], {-0}
   pPatchTab[57] = 1;
    2b14:	00000ef1 	strdeq	r0, [r0], -r1
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b18:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
   const uint32_t *pS = patchGenfskRfe;
    2b1c:	000d7800 	andeq	r7, sp, r0, lsl #16
      t2 = *pS++;
    2b20:	00023800 	andeq	r3, r2, r0, lsl #16
      t4 = *pS++;
    2b24:	01320100 	teqeq	r2, r0, lsl #2
      t6 = *pS++;
    2b28:	0f38212c 	svceq	0x0038212c
      t8 = *pS++;
    2b2c:	00000000 	andeq	r0, r0, r0
      *pD++ = t1;
    2b30:	120f011e 	andne	r0, pc, #-2147483641	; 0x80000007
      *pD++ = t2;
    2b34:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
      *pD++ = t3;
    2b38:	0d300601 	ldceq	6, cr0, [r0, #-4]!
      *pD++ = t5;
    2b3c:	0d700000 	ldcleq	0, cr0, [r0, #-0]
      *pD++ = t7;
    2b40:	9c010000 	stcls	0, cr0, [r1], {-0}
   } while (--nIterations);
    2b44:	00000f25 	andeq	r0, r0, r5, lsr #30
    2b48:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
      *pD++ = t8;
    2b4c:	000d4200 	andeq	r4, sp, r0, lsl #4
   } while (--nIterations);
    2b50:	00021800 	andeq	r1, r2, r0, lsl #16
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b54:	01250100 			; <UNDEFINED> instruction: 0x01250100
   *pD++ = t2;
    2b58:	0f38352c 	svceq	0x0038352c
   *pD++ = t3;
    2b5c:	07770000 	ldrbeq	r0, [r7, -r0]!
   *pD++ = t4;
    2b60:	00000000 	andeq	r0, r0, r0
   *pD++ = t5;
    2b64:	00135444 	andseq	r5, r3, r4, asr #8
    2b68:	01170100 	tsteq	r7, r0, lsl #2
	RFCAdi3VcoLdoVoltageMode (true);
    2b6c:	00df0115 	sbcseq	r0, pc, r5, lsl r1	; <UNPREDICTABLE>
    2b70:	46030000 	strmi	r0, [r3], -r0
       	RFCRfTrimSet (&rfTrim);
    2b74:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b78:	006c6564 	rsbeq	r6, ip, r4, ror #10
    2b7c:	22011701 	andcs	r1, r1, #262144	; 0x40000
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b80:	000000a7 	andeq	r0, r0, r7, lsr #1
    2b84:	0f904500 	svceq	0x00904500
	issue_cmd ((lword)&cmd_srt);
    2b88:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2b8c:	00a71401 	adceq	r1, r7, r1, lsl #8
	issue_cmd ((lword)&RF_cmdFs);
    2b90:	46030000 	strmi	r0, [r3], -r0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b94:	00001478 	andeq	r1, r0, r8, ror r4
    2b98:	0314ee01 	tsteq	r4, #1, 28
    2b9c:	00000f7a 	andeq	r0, r0, sl, ror pc
	IntEnable (INT_RFC_CPE_0);
    2ba0:	6e697047 	cdpvs	0, 6, cr7, cr9, cr7, {2}
	_BIC (dstate, DSTATE_IRST);
    2ba4:	06f20100 	ldrbteq	r0, [r2], r0, lsl #2
    2ba8:	0000008d 	andeq	r0, r0, sp, lsl #1
    2bac:	00694748 	rsbeq	r4, r9, r8, asr #14
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2bb0:	8d0bf401 	cfstrshi	mvf15, [fp, #-4]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bb4:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_RFC_CPE_0);
    2bb8:	e5014900 	str	r4, [r1, #-2304]	; 0xfffff700
    2bbc:	01000013 	tsteq	r0, r3, lsl r0
}
    2bc0:	dc010698 	stcle	6, cr0, [r1], {152}	; 0x98
	IntEnable (INT_RFC_CPE_0);
    2bc4:	3000000c 	andcc	r0, r0, ip
    2bc8:	0100000d 	tsteq	r0, sp
    2bcc:	0010249c 	mulseq	r0, ip, r4
    2bd0:	63654a00 	cmnvs	r5, #0, 20
    2bd4:	1a980100 	bne	fe602fdc <_estack+0xde5fdfdc>
    2bd8:	000000a7 	andeq	r0, r0, r7, lsr #1
    2bdc:	0000078a 	andeq	r0, r0, sl, lsl #15
    2be0:	01006d4a 	tsteq	r0, sl, asr #26
    2be4:	10242a98 	mlane	r4, r8, sl, r2
    2be8:	079d0000 	ldreq	r0, [sp, r0]
    2bec:	ed280000 	stc	0, cr0, [r8, #-0]
    2bf0:	e8000011 	stmda	r0, {r0, r4}
    2bf4:	ea00000c 	b	2c2c <rx_int_enable+0x4>
    2bf8:	0100000c 	tsteq	r0, ip
    2bfc:	102202a8 	eorne	r0, r2, r8, lsr #5
    2c00:	ea000014 	b	2c58 <rx_int_enable+0x30>
    2c04:	c800000c 	stmdagt	r0, {r2, r3}
    2c08:	01000001 	tsteq	r0, r1
    2c0c:	0fd903b8 	svceq	0x00d903b8
    2c10:	1f210000 	svcne	0x00210000
    2c14:	00000014 	andeq	r0, r0, r4, lsl r0
    2c18:	00141022 	andseq	r1, r4, r2, lsr #32
    2c1c:	000cf000 	andeq	pc, ip, r0
    2c20:	0001e800 	andeq	lr, r1, r0, lsl #16
    2c24:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
static void rx_int_enable () {
    2c28:	00000ff3 	strdeq	r0, [r0], -r3
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c2c:	00141f21 	andseq	r1, r4, r1, lsr #30
    2c30:	f3220000 	vhadd.u32	d0, d2, d0
    2c34:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2c38:	0000000d 	andeq	r0, r0, sp
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c3c:	01000002 	tsteq	r0, r2
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c40:	100d03b8 			; <UNDEFINED> instruction: 0x100d03b8
    2c44:	02210000 	eoreq	r0, r1, #0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c48:	00000014 	andeq	r0, r0, r4, lsl r0
    2c4c:	0013f343 	andseq	pc, r3, r3, asr #6
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c50:	000d0e00 	andeq	r0, sp, r0, lsl #28
    2c54:	000d1000 	andeq	r1, sp, r0
    2c58:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c5c:	00140221 	andseq	r0, r4, r1, lsr #4
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c60:	07000000 	streq	r0, [r0, -r0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c64:	0001d604 	andeq	sp, r1, r4, lsl #12
		if (db->status == DATA_ENTRY_FINISHED) {
    2c68:	7a014900 	bvc	55070 <__ccfg+0x350c8>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c6c:	01000013 	tsteq	r0, r3, lsl r0
    2c70:	00010672 	andeq	r0, r1, r2, ror r6
			nr++;
    2c74:	00000000 	andeq	r0, r0, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c78:	01000000 	mrseq	r0, (UNDEF: 0)
    2c7c:	0010ca9c 	mulseq	r0, ip, sl
    2c80:	74734a00 	ldrbtvc	r4, [r3], #-2560	; 0xfffff600
    2c84:	18720100 	ldmdane	r2!, {r8}^
				__dp [pl + 1] = __dp [pl] - 128;
    2c88:	000000a7 	andeq	r0, r0, r7, lsr #1
				pl = __dp [1] + 2;
    2c8c:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
				__dp [pl + 1] = __dp [pl] - 128;
    2c90:	6e65734a 	cdpvs	3, 6, cr7, cr5, cr10, {2}
    2c94:	28720100 	ldmdacs	r2!, {r8}^
				__dp [pl] = 0;
    2c98:	00000244 	andeq	r0, r0, r4, asr #4
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c9c:	000007ce 	andeq	r0, r0, lr, asr #15
    2ca0:	6c61764a 	stclvs	6, cr7, [r1], #-296	; 0xfffffed8
    2ca4:	35720100 	ldrbcc	r0, [r2, #-256]!	; 0xffffff00
			db->status = DATA_ENTRY_PENDING;
    2ca8:	000000fc 	strdeq	r0, [r0], -ip
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2cac:	000007ec 	andeq	r0, r0, ip, ror #15
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2cb0:	000fab4b 	andeq	sl, pc, fp, asr #22
				diag ("BAD RX");
    2cb4:	0e740100 	rpweqs	f0, f4, f0
    2cb8:	000000c9 	andeq	r0, r0, r9, asr #1
	if (nr) {
    2cbc:	00000305 	andeq	r0, r0, r5, lsl #6
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc0:	9b4c0000 	blls	1302cc8 <__ccfg+0x12e2d20>
}
    2cc4:	01000014 	tsteq	r0, r4, lsl r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc8:	00000178 	andeq	r0, r0, r8, ror r1
    2ccc:	204d0000 	subcs	r0, sp, r0
    2cd0:	00000012 	andeq	r0, r0, r2, lsl r0
}
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	01000006 	tsteq	r0, r6
    2cdc:	01420381 	smlalbbeq	r0, r2, r1, r3
    2ce0:	00000012 	andeq	r0, r0, r2, lsl r0
    2ce4:	00000000 	andeq	r0, r0, r0
    2ce8:	01000000 	mrseq	r0, (UNDEF: 0)
    2cec:	10b9127e 	adcsne	r1, r9, lr, ror r2
    2cf0:	132f0000 			; <UNDEFINED> instruction: 0x132f0000
    2cf4:	00000012 	andeq	r0, r0, r2, lsl r0
thread (cc1350_driver)
    2cf8:	00122a28 	andseq	r2, r2, r8, lsr #20
	...
    2d04:	03840100 	orreq	r0, r4, #0, 2
    2d08:	42014e00 	andmi	r4, r1, #0, 28
		if (dstate & DSTATE_IRST) {
    2d0c:	01000014 	tsteq	r0, r4, lsl r0
    2d10:	b0010662 	andlt	r0, r1, r2, ror #12
    2d14:	e0000016 	and	r0, r0, r6, lsl r0
			rf_off ();
    2d18:	01000016 	tsteq	r0, r6, lsl r0
			_BIC (dstate,
    2d1c:	4a01499c 	bmi	55394 <__ccfg+0x353ec>
    2d20:	0100000f 	tsteq	r0, pc
		if (dstate & DSTATE_RXAC) {
    2d24:	0001064f 	andeq	r0, r1, pc, asr #12
    2d28:	00000000 	andeq	r0, r0, r0
			if ((dstate & DSTATE_RXON) == 0)
    2d2c:	01000000 	mrseq	r0, (UNDEF: 0)
				rx_de ();
    2d30:	0011079c 	mulseq	r1, ip, r7
		if (paylen == 0) {
    2d34:	12512800 	subsne	r2, r1, #0, 16
	...
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d40:	5f010000 	svcpl	0x00010000
    2d44:	01490003 	cmpeq	r9, r3
    2d48:	00000f81 	andeq	r0, r0, r1, lsl #31
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d4c:	01063b01 	tsteq	r6, r1, lsl #22
    2d50:	00000c9c 	muleq	r0, ip, ip
    2d54:	00000cdc 	ldrdeq	r0, [r0], -ip
    2d58:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
    2d5c:	644a0000 	strbvs	r0, [sl], #-0
    2d60:	1c3b0100 	ldfnes	f0, [fp], #-0
    2d64:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2d68:	0000080a 	andeq	r0, r0, sl, lsl #16
		} else if (dstate & DSTATE_RXON) {
    2d6c:	41014900 	tstmi	r1, r0, lsl #18
	if (dstate & DSTATE_RFON)
    2d70:	01000010 	tsteq	r0, r0, lsl r0
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d74:	6001062b 	andvs	r0, r1, fp, lsr #12
		re->status = DATA_ENTRY_PENDING;
    2d78:	9c00000c 	stcls	0, cr0, [r0], {12}
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d7c:	0100000c 	tsteq	r0, ip
	issue_cmd ((lword)&RF_cmdPropRx);
    2d80:	0011559c 	mulseq	r1, ip, r5
	_BIS (dstate, DSTATE_RXAC);
    2d84:	00644a00 	rsbeq	r4, r4, r0, lsl #20
    2d88:	df1b2b01 	svcle	0x001b2b01
    2d8c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2d90:	00000008 	andeq	r0, r0, r8
	if (dstate & DSTATE_RXAC)
    2d94:	12770149 	rsbsne	r0, r7, #1073741842	; 0x40000012
    2d98:	20010000 	andcs	r0, r1, r0
				if (statid != 0xffff)
    2d9c:	0c340106 	ldfeqs	f0, [r4], #-24	; 0xffffffe8
    2da0:	0c5e0000 	mraeq	r0, lr, acc0
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2da4:	9c010000 	stcls	0, cr0, [r1], {-0}
				RF_cmdPropTx.pktLen = (byte) paylen;
    2da8:	0000117c 	andeq	r1, r0, ip, ror r1
		if (paylen == 0) {
    2dac:	01006e4a 	tsteq	r0, sl, asr #28
			wait (qevent, DR_LOOP);
    2db0:	00b81c20 	adcseq	r1, r8, r0, lsr #24
    2db4:	08460000 	stmdaeq	r6, {}^	; <UNPREDICTABLE>
			if (dstate & DSTATE_RXAC) {
    2db8:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    2dbc:	00136201 	andseq	r6, r3, r1, lsl #4
				rx_int_enable ();
    2dc0:	06190100 	ldreq	r0, [r9], -r0, lsl #2
			release;
    2dc4:	000c0801 	andeq	r0, ip, r1, lsl #16
			} else if (dstate & DSTATE_RFON) {
    2dc8:	000c3400 	andeq	r3, ip, r0, lsl #8
				delay (offdelay, DR_GOOF);
    2dcc:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    2dd0:	4f000011 	svcmi	0x00000011
    2dd4:	1901006e 	stmdbne	r1, {r1, r2, r3, r5, r6}
		if (bckf_timer) {
    2dd8:	0000b81c 	andeq	fp, r0, ip, lsl r8
			wait (qevent, DR_LOOP);
    2ddc:	43500100 	cmpmi	r0, #0, 2
    2de0:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
    2de4:	00000c1c 	andeq	r0, r0, ip, lsl ip
			delay (bckf_timer, DR_LOOP);
    2de8:	00000c26 	andeq	r0, r0, r6, lsr #24
    2dec:	21031b01 	tstcs	r3, r1, lsl #22
			if (dstate & DSTATE_RXAC)
    2df0:	000011c5 	andeq	r1, r0, r5, asr #3
    2df4:	56500000 	ldrbpl	r0, [r0], -r0
	if (dstate & DSTATE_RFON)
    2df8:	01000014 	tsteq	r0, r4, lsl r0
    2dfc:	03011415 	movweq	r1, #5141	; 0x1415
		rx_de ();
    2e00:	000011d0 	ldrdeq	r1, [r0], -r0
		RF_cmdPropTx . status = 0;
    2e04:	01006e51 	tsteq	r0, r1, asr lr
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e08:	00b82b15 	adcseq	r2, r8, r5, lsl fp
    2e0c:	52000000 	andpl	r0, r0, #0
    2e10:	0000102d 	andeq	r1, r0, sp, lsr #32
		issue_cmd ((lword)&cmd_cs);
    2e14:	35011a03 	strcc	r1, [r1, #-2563]	; 0xfffff5fd
		if (dstate & DSTATE_IRST)
    2e18:	11ed0301 	mvnne	r0, r1, lsl #6
    2e1c:	47530000 	ldrbmi	r0, [r3, -r0]
    2e20:	03000014 	movweq	r0, #20
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e24:	7348011a 	movtvc	r0, #33050	; 0x811a
    2e28:	00000000 	andeq	r0, r0, r0
			delay (1, DR_XMIT);
    2e2c:	00127e54 	andseq	r7, r2, r4, asr lr
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e30:	355b0300 	ldrbcc	r0, [fp, #-768]	; 0xfffffd00
    2e34:	9e540301 	cdpls	3, 5, cr0, cr4, cr1, {0}
    2e38:	0300000f 	movweq	r0, #15
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e3c:	03013550 	movweq	r3, #5456	; 0x1550
    2e40:	00139955 	andseq	r9, r3, r5, asr r9
				RF_cmdPropTx . status = 0;
    2e44:	01bf0f00 			; <UNDEFINED> instruction: 0x01bf0f00
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e48:	00007301 	andeq	r7, r0, r1, lsl #6
				issue_cmd ((lword)&RF_cmdPropTx);
    2e4c:	12200300 	eorne	r0, r0, #0, 6
				proceed (DR_XMIT);
    2e50:	fa160000 	blx	582e58 <__ccfg+0x562eb0>
    2e54:	0f000013 	svceq	0x00000013
			txtries++;
    2e58:	00730ec1 	rsbseq	r0, r3, r1, asr #29
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e5c:	54000000 	strpl	r0, [r0], #-0
    2e60:	00001369 	andeq	r1, r0, r9, ror #6
    2e64:	0101900f 	tsteq	r1, pc
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e68:	0f685403 	svceq	0x00685403
		goto DR_LOOP__;
    2e6c:	7b0f0000 	blvc	3c2e74 <__ccfg+0x3a2ecc>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e70:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
		paylen = 0;
    2e74:	000011d6 	ldrdeq	r1, [r0], -r6
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e78:	0103660a 	tsteq	r3, sl, lsl #12
		txtries = 0;
    2e7c:	12510301 	subsne	r0, r1, #67108864	; 0x4000000
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e80:	ad530000 	ldclge	0, cr0, [r3, #-0]
    2e84:	0a000011 	beq	2ed0 <cc1350_driver+0x1d8>
    2e88:	731f0366 	tstvc	pc, #-1744830463	; 0x98000001
    2e8c:	00000000 	andeq	r0, r0, r0
    2e90:	00134156 	andseq	r4, r3, r6, asr r1
		    tcvphy_top (physid) == NULL)
    2e94:	014c0200 	mrseq	r0, (UNDEF: 108)
    2e98:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e9c:	000012d2 	ldrdeq	r1, [r0], -r2
    2ea0:	0101c402 	tsteq	r1, r2, lsl #8
			rf_off ();
    2ea4:	10ae5703 	adcne	r5, lr, r3, lsl #14
endthread
    2ea8:	ad020000 	stcge	0, cr0, [r2, #-0]
    2eac:	00730101 	rsbseq	r0, r3, r1, lsl #2
    2eb0:	56030000 	strpl	r0, [r3], -r0
    2eb4:	00001001 	andeq	r1, r0, r1
    2eb8:	0102450e 	tsteq	r2, lr, lsl #10
    2ebc:	d3580301 	cmple	r8, #67108864	; 0x4000000
    2ec0:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    2ec4:	0101022c 	tsteq	r1, ip, lsr #4
    2ec8:	00000073 	andeq	r0, r0, r3, ror r0
    2ecc:	0fbe5203 	svceq	0x00be5203
    2ed0:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    2ed4:	03010101 	movweq	r0, #4353	; 0x1101
    2ed8:	000012ab 	andeq	r1, r0, fp, lsr #5
    2edc:	000f7853 	andeq	r7, pc, r3, asr r8	; <UNPREDICTABLE>
    2ee0:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
    2ee4:	0000731f 	andeq	r7, r0, pc, lsl r3
void RFCCPE0IntHandler (void) {
    2ee8:	3d560000 	ldclcc	0, cr0, [r6, #-0]
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eec:	0b000011 	bleq	2f38 <RFCCPE0IntHandler+0x50>
		_BIS (dstate, DSTATE_IRST);
    2ef0:	0101010f 	tsteq	r1, pc, lsl #2
    2ef4:	107a5403 	rsbsne	r5, sl, r3, lsl #8
    2ef8:	ed0c0000 	stc	0, cr0, [ip, #-0]
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2efc:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f00:	00001386 	andeq	r1, r0, r6, lsl #7
    2f04:	0101d60c 	tsteq	r1, ip, lsl #12
	p_trigger (drvprcs, qevent);
    2f08:	104f5203 	subne	r5, pc, r3, lsl #4
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f0c:	40060000 	andmi	r0, r6, r0
    2f10:	03010104 	movweq	r0, #4356	; 0x1104
    2f14:	000012e7 	andeq	r1, r0, r7, ror #5
    2f18:	0011ba53 	andseq	fp, r1, r3, asr sl
    2f1c:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
    2f20:	00007324 	andeq	r7, r0, r4, lsr #6
    2f24:	e8520000 	ldmda	r2, {}^	; <UNPREDICTABLE>
    2f28:	0600000f 	streq	r0, [r0], -pc
    2f2c:	01010391 			; <UNDEFINED> instruction: 0x01010391
    2f30:	00131103 	andseq	r1, r3, r3, lsl #2
	RISE_N_SHINE;
    2f34:	11ba5300 			; <UNDEFINED> instruction: 0x11ba5300
    2f38:	91060000 	mrsls	r0, (UNDEF: 6)
    2f3c:	00731703 	rsbseq	r1, r3, r3, lsl #14
}
    2f40:	14530000 	ldrbne	r0, [r3], #-0
    2f44:	06000011 			; <UNDEFINED> instruction: 0x06000011
    2f48:	732a0391 			; <UNDEFINED> instruction: 0x732a0391
    2f4c:	00000000 	andeq	r0, r0, r0
    2f50:	00140d52 	andseq	r0, r4, r2, asr sp
    2f54:	030c0600 	movweq	r0, #50688	; 0xc600
void phys_cc1350 (int phy, int mbs) {
    2f58:	3b030101 	blcc	c3364 <__ccfg+0xa33bc>
	if (rbuffl != 0)
    2f5c:	53000013 	movwpl	r0, #19
    2f60:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
		syserror (ETOOMANY, "cc13");
    2f64:	18030c06 	stmdane	r3, {r1, r2, sl, fp}
		syserror (EREQPAR, "cc13 mb");
    2f68:	00000073 	andeq	r0, r0, r3, ror r0
	if (mbs == 0)
    2f6c:	00111453 	andseq	r1, r1, r3, asr r4
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f70:	030c0600 	movweq	r0, #50688	; 0xc600
		syserror (EREQPAR, "cc13 mb");
    2f74:	0000732b 	andeq	r7, r0, fp, lsr #6
    2f78:	05520000 	ldrbeq	r0, [r2, #-0]
	i = 0;
    2f7c:	06000011 			; <UNDEFINED> instruction: 0x06000011
	rbuffl = (byte) mbs;
    2f80:	010101e7 	smlatteq	r1, r7, r1, r0
		db->config.type = 0;	// General (data in structure)
    2f84:	00135803 	andseq	r5, r3, r3, lsl #16
	rbuffl = (byte) mbs;
    2f88:	11ba5300 			; <UNDEFINED> instruction: 0x11ba5300
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f8c:	e7060000 	str	r0, [r6, -r0]
    2f90:	00731901 	rsbseq	r1, r3, r1, lsl #18
		if (db == NULL)
    2f94:	52000000 	andpl	r0, r0, #0
			syserror (EMALLOC, "cc13");
    2f98:	00001248 	andeq	r1, r0, r8, asr #4
    2f9c:	0101ba06 	tsteq	r1, r6, lsl #20
    2fa0:	13750301 	cmnne	r5, #67108864	; 0x4000000
		db->status = DATA_ENTRY_PENDING;
    2fa4:	ba530000 	blt	14c2fac <__ccfg+0x14a3004>
		if (i)
    2fa8:	06000011 			; <UNDEFINED> instruction: 0x06000011
			da->pNextEntry = (byte*) db;
    2fac:	731501ba 	tstvc	r5, #-2147483602	; 0x8000002e
		db->length = rbuffl + 2;
    2fb0:	00000000 	andeq	r0, r0, r0
    2fb4:	00133052 	andseq	r3, r3, r2, asr r0
		db->config.type = 0;	// General (data in structure)
    2fb8:	01390600 	teqeq	r9, r0, lsl #12
		db->length = rbuffl + 2;
    2fbc:	ac030101 	stfges	f0, [r3], {1}
	db->pNextEntry = (byte*) re;
    2fc0:	53000013 	movwpl	r0, #19
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2fc4:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
    2fc8:	1b013906 	blne	513e8 <__ccfg+0x31440>
	if (rbuffs == NULL)
    2fcc:	00000073 	andeq	r0, r0, r3, ror r0
	rbuffs->pCurrEntry = (byte*) re;
    2fd0:	0010a253 	andseq	sl, r0, r3, asr r2
	rbuffs->pLastEntry = NULL;
    2fd4:	01390600 	teqeq	r9, r0, lsl #12
    2fd8:	0000732e 	andeq	r7, r0, lr, lsr #6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fdc:	108e5300 	addne	r5, lr, r0, lsl #6
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fe0:	3a060000 	bcc	182fe8 <__ccfg+0x163040>
    2fe4:	00731b01 	rsbseq	r1, r3, r1, lsl #22
    2fe8:	52000000 	andpl	r0, r0, #0
	rbuffl -= 2;
    2fec:	00001253 	andeq	r1, r0, r3, asr r2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ff0:	01028404 	tsteq	r2, r4, lsl #8
	rbuffl -= 2;
    2ff4:	13c90301 	bicne	r0, r9, #67108864	; 0x4000000
	physid = phy;
    2ff8:	21530000 	cmpcs	r3, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ffc:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3000:	731e0284 	tstvc	lr, #132, 4	; 0x40000008
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3004:	00000000 	andeq	r0, r0, r0
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3008:	000f5052 	andeq	r5, pc, r2, asr r0	; <UNPREDICTABLE>
    300c:	02060400 	andeq	r0, r6, #0, 8
	utimer_add (&bckf_timer);
    3010:	f3030101 	vrhadd.u8	d0, d3, d1
	drvprcs = runthread (cc1350_driver);
    3014:	53000013 	movwpl	r0, #19
    3018:	00001121 	andeq	r1, r0, r1, lsr #2
    301c:	23020604 	movwcs	r0, #9732	; 0x2604
	if (drvprcs == 0)
    3020:	00000073 	andeq	r0, r0, r3, ror r0
		syserror (ERESOURCE, "cc13");
    3024:	00143053 	andseq	r3, r4, r3, asr r0
    3028:	02060400 	andeq	r0, r6, #0, 8
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    302c:	00007337 	andeq	r7, r0, r7, lsr r3
    3030:	c4520000 	ldrbgt	r0, [r2], #-0
    3034:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3038:	01010154 	tsteq	r1, r4, asr r1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    303c:	00141003 	andseq	r1, r4, r3
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3040:	11215300 			; <UNDEFINED> instruction: 0x11215300
    3044:	54040000 	strpl	r0, [r4], #-0
    3048:	00731901 	rsbseq	r1, r3, r1, lsl #18
    304c:	52000000 	andpl	r0, r0, #0
    3050:	000013d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    3054:	01011e04 	tsteq	r1, r4, lsl #28
    3058:	142d0301 	strtne	r0, [sp], #-769	; 0xfffffcff
    305c:	21530000 	cmpcs	r3, r0
    3060:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
	plugch ();
    3064:	7317011e 	tstvc	r7, #-2147483641	; 0x80000007
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3068:	00000000 	andeq	r0, r0, r0
    306c:	00115656 	andseq	r5, r1, r6, asr r6
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3070:	04630900 	strbteq	r0, [r3], #-2304	; 0xfffff700
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3074:	56030101 	strpl	r0, [r3], -r1, lsl #2
    3078:	000010be 	strheq	r1, [r0], -lr
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    307c:	01045409 	tsteq	r4, r9, lsl #8
}
    3080:	d7560301 	ldrble	r0, [r6, -r1, lsl #6]
    3084:	09000010 	stmdbeq	r0, {r4}
    3088:	0101022a 	tsteq	r1, sl, lsr #4
    308c:	141b5203 	ldrne	r5, [fp], #-515	; 0xfffffdfd
    3090:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    3094:	03010101 	movweq	r0, #4353	; 0x1101
    3098:	0000146b 	andeq	r1, r0, fp, ror #8
    309c:	0010e353 	andseq	lr, r0, r3, asr r3
    30a0:	01680900 	cmneq	r8, r0, lsl #18
    30a4:	0000731f 	andeq	r7, r0, pc, lsl r3
    30a8:	1d560000 	ldclne	0, cr0, [r6, #-0]
    30ac:	09000010 	stmdbeq	r0, {r4}
    30b0:	01010132 	tsteq	r1, r2, lsr r1
    30b4:	0d445903 	vstreq.16	s11, [r4, #-6]	; <UNPREDICTABLE>
	...
    30c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    30c4:	000d5835 	andeq	r5, sp, r5, lsr r8
    30c8:	00085900 	andeq	r5, r8, r0, lsl #18
    30cc:	1f000000 	svcne	0x00000000
    30d0:	03000012 	movweq	r0, #18
    30d4:	0009f200 	andeq	pc, r9, r0, lsl #4
    30d8:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    30dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    30e0:	000015bb 			; <UNDEFINED> instruction: 0x000015bb
    30e4:	00000e0a 	andeq	r0, r0, sl, lsl #28
    30e8:	000007a8 	andeq	r0, r0, r8, lsr #15
    30ec:	00000000 	andeq	r0, r0, r0
    30f0:	000022db 	ldrdeq	r2, [r0], -fp
    30f4:	5d060102 	stfpls	f0, [r6, #-8]
    30f8:	0200000c 	andeq	r0, r0, #12
    30fc:	0a6b0502 	beq	1ac450c <__ccfg+0x1aa4564>
    3100:	a1030000 	mrsge	r0, (UNDEF: 3)
    3104:	0300002b 	movweq	r0, #43	; 0x2b
    3108:	003f1828 	eorseq	r1, pc, r8, lsr #16
    310c:	04020000 	streq	r0, [r2], #-0
    3110:	0007fd05 	andeq	pc, r7, r5, lsl #26
    3114:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    3118:	000007f8 	strdeq	r0, [r0], -r8
    311c:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    3120:	182e0300 	stmdane	lr!, {r8, r9}
    3124:	00000059 	andeq	r0, r0, r9, asr r0
    3128:	5b080102 	blpl	203538 <__ccfg+0x1e3590>
    312c:	0300000c 	movweq	r0, #12
    3130:	00002e12 	andeq	r2, r0, r2, lsl lr
    3134:	6c193103 	ldfvss	f3, [r9], {3}
    3138:	02000000 	andeq	r0, r0, #0
    313c:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    3140:	b4030000 	strlt	r0, [r3], #-0
    3144:	03000029 	movweq	r0, #41	; 0x29
    3148:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
    314c:	04020000 	streq	r0, [r2], #-0
    3150:	00042607 	andeq	r2, r4, r7, lsl #12
    3154:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3158:	00000421 	andeq	r0, r0, r1, lsr #8
    315c:	69050404 	stmdbvs	r5, {r2, sl}
    3160:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3164:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    3168:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
strand (__outserial, const char*)
    316c:	04000005 	streq	r0, [r0], #-5
    3170:	00a71b28 	adceq	r1, r7, r8, lsr #22
    3174:	90050000 	andls	r0, r5, r0
    3178:	0400000b 	streq	r0, [r0], #-11
endstrand
    317c:	00bf000b 	adcseq	r0, pc, fp
    3180:	6d060000 	stcvs	0, cr0, [r6, #-0]
	ptr = data;
    3184:	bf000008 	svclt	0x00000008
    3188:	00000000 	andeq	r0, r0, r0
	if (*ptr)
    318c:	04070001 	streq	r0, [r7], #-1
		len = strlen (ptr);
    3190:	000b9203 	andeq	r9, fp, r3, lsl #4
    3194:	18630400 	stmdane	r3!, {sl}^
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3198:	0000009b 	muleq	r0, fp, r0
    319c:	00132803 	andseq	r2, r3, r3, lsl #16
    31a0:	12260500 	eorne	r0, r6, #0, 10
    31a4:	0000004d 	andeq	r0, r0, sp, asr #32
    31a8:	0028fb03 	eoreq	pc, r8, r3, lsl #22
	len -= quant;
    31ac:	12270500 	eorne	r0, r7, #0, 10
    31b0:	00000060 	andeq	r0, r0, r0, rrx
    31b4:	0000d908 	andeq	sp, r0, r8, lsl #18
	if (len == 0) {
    31b8:	00d90900 	sbcseq	r0, r9, r0, lsl #18
		ufree (data);
    31bc:	cc030000 	stcgt	0, cr0, [r3], {-0}
		finish;
    31c0:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    31c4:	00331228 	eorseq	r1, r3, r8, lsr #4
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    31c8:	c2030000 	andgt	r0, r3, #0
    31cc:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    31d0:	004d122b 	subeq	r1, sp, fp, lsr #4
    31d4:	fb090000 	blx	2431de <__ccfg+0x223236>
    31d8:	03000000 	movweq	r0, #0
strand (__inserial, address)
    31dc:	0000294d 	andeq	r2, r0, sp, asr #18
    31e0:	73122c05 	tstvc	r2, #1280	; 0x500
    31e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    31e8:	0000010c 	andeq	r0, r0, ip, lsl #2
    31ec:	00064603 	andeq	r4, r6, r3, lsl #12
	if (__inpline != NULL)
    31f0:	122d0500 	eorne	r0, sp, #0, 10
    31f4:	00000073 	andeq	r0, r0, r3, ror r0
		finish;
    31f8:	000bb403 	andeq	fp, fp, r3, lsl #8
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31fc:	102e0500 	eorne	r0, lr, r0, lsl #10
    3200:	00000135 	andeq	r0, r0, r5, lsr r1
    3204:	00d9040a 	sbcseq	r0, r9, sl, lsl #8
    3208:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
		umwait (IM_INIT);
    320c:	c9093205 	stmdbgt	r9, {r0, r2, r9, ip, sp}
		release;
    3210:	0c000001 	stceq	0, cr0, [r0], {1}
	savedata (data);
    3214:	00000034 	andeq	r0, r0, r4, lsr r0
	len = MAX_LINE_LENGTH;
    3218:	fb073405 	blx	1d0236 <__ccfg+0x1b028e>
	io (IM_READ, __cport, READ, ptr, 1);
    321c:	01000000 	mrseq	r0, (UNDEF: 0)
    3220:	0c000701 	stceq	7, cr0, [r0], {1}
    3224:	0000064c 	andeq	r0, r0, ip, asr #12
    3228:	fb033505 	blx	d0646 <__ccfg+0xb069e>
	if (ptr == (char*) data) { // new line
    322c:	01000000 	mrseq	r0, (UNDEF: 0)
    3230:	0c000601 	stceq	6, cr0, [r0], {1}
		if (*ptr == '\0') { // bin cmd
    3234:	000002e7 	andeq	r0, r0, r7, ror #5
			proceed (IM_BIN);
    3238:	fb033605 	blx	d0a56 <__ccfg+0xb0aae>
    323c:	01000000 	mrseq	r0, (UNDEF: 0)
		if (*ptr < 0x20)
    3240:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    3244:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
			proceed (IM_READ);
    3248:	fb033705 	blx	d0e66 <__ccfg+0xb0ebe>
    324c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (*ptr == '\n' || *ptr == '\r') {
    3250:	0c000401 	cfstrseq	mvf0, [r0], {1}
    3254:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    3258:	fb033805 	blx	d1276 <__ccfg+0xb12ce>
		*ptr = '\0';
    325c:	01000000 	mrseq	r0, (UNDEF: 0)
		__inpline = (char*)data;
    3260:	0d000004 	stceq	0, cr0, [r0, #-16]
		finish;
    3264:	0000065b 	andeq	r0, r0, fp, asr r6
	if (len) {
    3268:	fb073a05 	blx	1d1a86 <__ccfg+0x1b1ade>
		ptr++;
    326c:	01000000 	mrseq	r0, (UNDEF: 0)
    3270:	0008fb0d 	andeq	pc, r8, sp, lsl #22
		len--;
    3274:	033c0500 	teqeq	ip, #0, 10
	proceed (IM_READ);
    3278:	000000fb 	strdeq	r0, [r0], -fp
	io (IM_BIN, __cport, READ, ptr, 1);
    327c:	0f3a0d02 	svceq	0x003a0d02
    3280:	3d050000 	stccc	0, cr0, [r5, #-0]
    3284:	0000fb03 	andeq	pc, r0, r3, lsl #22
    3288:	130d0300 	movwne	r0, #54016	; 0xd300
    328c:	05000009 	streq	r0, [r0, #-9]
	len -= 2;
    3290:	010c083f 	tsteq	ip, pc, lsr r8
	if (len > *ptr + 1) // 1 for 0x04
    3294:	00040000 	andeq	r0, r4, r0
    3298:	00031d03 	andeq	r1, r3, r3, lsl #26
		len = *ptr + 1;
    329c:	03410500 	movteq	r0, #5376	; 0x1500
    32a0:	0000013b 	andeq	r0, r0, fp, lsr r1
	ptr++;
    32a4:	0001c909 	andeq	ip, r1, r9, lsl #18
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32a8:	06be0e00 	ldrteq	r0, [lr], r0, lsl #28
    32ac:	43050000 	movwmi	r0, #20480	; 0x5000
    32b0:	0001d51a 	andeq	sp, r1, sl, lsl r5
    32b4:	0e010100 	adfeqs	f0, f1, f0
    32b8:	000001a0 	andeq	r0, r0, r0, lsr #3
    32bc:	f60e4505 			; <UNDEFINED> instruction: 0xf60e4505
	len -= quant;
    32c0:	01000001 	tsteq	r0, r1
		__inpline = (char*)data;
    32c4:	fc040a01 	stc2	10, cr0, [r4], {1}	; <UNPREDICTABLE>
		finish;
    32c8:	02000001 	andeq	r0, r0, #1
	ptr += quant;
    32cc:	0c640801 	stcleq	8, cr0, [r4], #-4
    32d0:	fc080000 	stc2	0, cr0, [r8], {-0}
endstrand
    32d4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    32d8:	00000326 	andeq	r0, r0, r6, lsr #6
	proceed (IM_BINL);
    32dc:	f61e4505 			; <UNDEFINED> instruction: 0xf61e4505
endstrand
    32e0:	01000001 	tsteq	r0, r1
    32e4:	06080b01 	streq	r0, [r8], -r1, lsl #22
    32e8:	0247098f 	subeq	r0, r7, #2342912	; 0x23c000
    32ec:	d80d0000 	stmdale	sp, {}	; <UNPREDICTABLE>
    32f0:	0600000c 	streq	r0, [r0], -ip
    32f4:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
		if (res && (d < n))
    32f8:	0d000000 	stceq	0, cr0, [r0, #-0]
    32fc:	00001075 	andeq	r1, r0, r5, ror r0
    3300:	d9089106 	stmdble	r8, {r1, r2, r8, ip, pc}
    3304:	04000000 	streq	r0, [r0], #-0
			res [d] = (char) c;
    3308:	0001c50d 	andeq	ip, r1, sp, lsl #10
		d++;
    330c:	10920600 	addsne	r0, r2, r0, lsl #12
    3310:	00000107 	andeq	r0, r0, r7, lsl #2
    3314:	cc030006 	stcgt	0, cr0, [r3], {6}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3318:	0600000c 	streq	r0, [r0], -ip
    331c:	02160393 	andseq	r0, r6, #1275068418	; 0x4c000002
    3320:	470f0000 	strmi	r0, [pc, -r0]
				enci (10000);
    3324:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3328:	10000002 	andne	r0, r0, r2
    332c:	093d0e00 	ldmdbeq	sp!, {r9, sl, fp}
	d = 0;
    3330:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
		c = *fm++;
    3334:	0002530f 	andeq	r5, r2, pc, lsl #6
		if (c == '\\') {
    3338:	0b010100 	bleq	43740 <__ccfg+0x23798>
			if ((c = *fm++) == '\0') {
    333c:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    3340:	00000296 	muleq	r0, r6, r2
				outc ('\\');
    3344:	00091a0c 	andeq	r1, r9, ip, lsl #20
			if ((c = *fm++) == '\0') {
    3348:	07930700 	ldreq	r0, [r3, r0, lsl #14]
				outc ('\\');
    334c:	000000fb 	strdeq	r0, [r0], -fp
    3350:	00010701 	andeq	r0, r1, r1, lsl #14
			outc (c);
    3354:	0005cc0c 	andeq	ip, r5, ip, lsl #24
    3358:	03940700 	orrseq	r0, r4, #0, 14
			if (c == '\0')
    335c:	000000fb 	strdeq	r0, [r0], -fp
    3360:	00000101 	andeq	r0, r0, r1, lsl #2
			outc (c);
    3364:	0aab0300 	beq	feac3f6c <_estack+0xdeabef6c>
				outc (val);
    3368:	96070000 	strls	r0, [r7], -r0
				val = (word) va_arg (ap, aword);
    336c:	00026c03 	andeq	r6, r2, r3, lsl #24
		if (c == '%') {
    3370:	02960800 	addseq	r0, r6, #0, 16
    3374:	a20f0000 	andge	r0, pc, #0
			c = *fm++;
    3378:	b2000002 	andlt	r0, r0, #2
			switch (c) {
    337c:	10000002 	andne	r0, r0, r2
    3380:	02a70800 	adceq	r0, r7, #0, 16
    3384:	aa0e0000 	bge	38338c <__ccfg+0x3633e4>
    3388:	07000003 	streq	r0, [r0, -r3]
    338c:	02b2179c 	adcseq	r1, r2, #156, 14	; 0x2700000
    3390:	01010000 	mrseq	r0, (UNDEF: 1)
    3394:	0000e50f 	andeq	lr, r0, pc, lsl #10
    3398:	0002d000 	andeq	sp, r2, r0
				outc ('%');
    339c:	08001000 	stmdaeq	r0, {ip}
    33a0:	000002c5 	andeq	r0, r0, r5, asr #5
				outc (c);
    33a4:	00060e0e 	andeq	r0, r6, lr, lsl #28
    33a8:	13060800 	movwne	r0, #26624	; 0x6800
    33ac:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				if (c == '\0')
    33b0:	dd0e0101 	stfles	f0, [lr, #-4]
				return d;
    33b4:	06000008 	streq	r0, [r0], -r8
}
    33b8:	010c0ec3 	smlabteq	ip, r3, lr, r0
    33bc:	01010000 	mrseq	r0, (UNDEF: 1)
			switch (c) {
    33c0:	000c7211 	andeq	r7, ip, r1, lsl r2
    33c4:	016e0900 	cmneq	lr, r0, lsl #18
    33c8:	0002fe10 	andeq	pc, r2, r0, lsl lr	; <UNPREDICTABLE>
				for (i = 12; ; i -= 4) {
    33cc:	04040a00 	streq	r0, [r4], #-2560	; 0xfffff600
				val = (word) va_arg (ap, aword);
    33d0:	12000003 	andne	r0, r0, #3
						[ (val >> i) & 0xf ]);
    33d4:	00031001 	andeq	r1, r3, r1
    33d8:	00d91300 	sbcseq	r1, r9, r0, lsl #6
    33dc:	0f000000 	svceq	0x00000000
					outc (__pi_hex_enc_table
    33e0:	00000203 	andeq	r0, r0, r3, lsl #4
    33e4:	0000031b 	andeq	r0, r0, fp, lsl r3
					if (i == 0)
    33e8:	10080010 	andne	r0, r8, r0, lsl r0
    33ec:	14000003 	strne	r0, [r0], #-3
				for (i = 12; ; i -= 4) {
    33f0:	000009e6 	andeq	r0, r0, r6, ror #19
				val = (word) va_arg (ap, aword);
    33f4:	16017f09 	strne	r7, [r1], -r9, lsl #30
				if (c == 'd' && (val & 0x8000) != 0) {
    33f8:	0000031b 	andeq	r0, r0, fp, lsl r3
				val = (word) va_arg (ap, aword);
    33fc:	96140101 	ldrls	r0, [r4], -r1, lsl #2
				if (c == 'd' && (val & 0x8000) != 0) {
    3400:	09000003 	stmdbeq	r0, {r0, r1}
    3404:	18140182 	ldmdane	r4, {r1, r7, r8}
					outc ('-');
    3408:	01000001 	tsteq	r0, r1
    340c:	036e1401 	cmneq	lr, #16777216	; 0x1000000
					val = (~val) + 1;
    3410:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    3414:	010c0e02 	tsteq	ip, r2, lsl #28
				for (i = 12; ; i -= 4) {
    3418:	01010000 	mrseq	r0, (UNDEF: 1)
				enci (10000);
    341c:	03090815 	movweq	r0, #38933	; 0x9815
    3420:	03740903 	cmneq	r4, #49152	; 0xc000
    3424:	a1160000 	tstge	r6, r0
    3428:	0900003c 	stmdbeq	r0, {r2, r3, r4, r5}
    342c:	d9070307 	stmdble	r7, {r0, r1, r2, r8, r9}
    3430:	00000000 	andeq	r0, r0, r0
    3434:	000fcd16 	andeq	ip, pc, r6, lsl sp	; <UNPREDICTABLE>
    3438:	03080900 	movweq	r0, #35072	; 0x8900
    343c:	00011d08 	andeq	r1, r1, r8, lsl #26
    3440:	11000400 	tstne	r0, r0, lsl #8
    3444:	00000a09 	andeq	r0, r0, r9, lsl #20
    3448:	03030909 	movweq	r0, #14601	; 0x3909
    344c:	0000034d 	andeq	r0, r0, sp, asr #6
    3450:	00002917 	andeq	r2, r0, r7, lsl r9
    3454:	0b093000 	bleq	24f45c <__ccfg+0x22f4b4>
    3458:	03e40803 	mvneq	r0, #196608	; 0x30000
    345c:	24160000 	ldrcs	r0, [r6], #-0
    3460:	0900001f 	stmdbeq	r0, {r0, r1, r2, r3, r4}
				if (c == 'd' || c == 'u') {
    3464:	d9080314 	stmdble	r8, {r2, r4, r8, r9}
    3468:	00000000 	andeq	r0, r0, r0
					if (c == 'd' &&
    346c:	000be716 	andeq	lr, fp, r6, lsl r7
					val = va_arg (ap, lword);
    3470:	03150900 	tsteq	r5, #0, 18
					fm++;
    3474:	0000d908 	andeq	sp, r0, r8, lsl #18
					if (c == 'd' &&
    3478:	8e160200 	cdphi	2, 1, cr0, cr6, cr0, {0}
    347c:	0900004c 	stmdbeq	r0, {r2, r3, r6}
						outc ('-');
    3480:	f10b0316 			; <UNDEFINED> instruction: 0xf10b0316
    3484:	04000002 	streq	r0, [r0], #-2
						val = (~val) + 1;
    3488:	00475416 	subeq	r5, r7, r6, lsl r4
				enci (10000);
    348c:	03170900 	tsteq	r7, #0, 18
					enci (1000000000UL);
    3490:	00011d09 	andeq	r1, r1, r9, lsl #26
    3494:	0f160800 	svceq	0x00160800
    3498:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    349c:	e40f0318 	str	r0, [pc], #-792	; 34a4 <__pi_vfparse+0x18c>
    34a0:	0c000003 	stceq	0, cr0, [r0], {3}
    34a4:	00095d16 	andeq	r5, r9, r6, lsl sp
    34a8:	03190900 	tsteq	r9, #0, 18
    34ac:	0003f415 	andeq	pc, r3, r5, lsl r4	; <UNPREDICTABLE>
    34b0:	0f002c00 	svceq	0x00002c00
    34b4:	00000374 	andeq	r0, r0, r4, ror r3
    34b8:	000003f4 	strdeq	r0, [r0], -r4
    34bc:	00009418 	andeq	r9, r0, r8, lsl r4
    34c0:	0a000300 	beq	40c8 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    34c4:	00038104 	andeq	r8, r3, r4, lsl #2
    34c8:	0bdc1100 	bleq	ff7078d0 <_estack+0xdf7028d0>
    34cc:	1c090000 	stcne	0, cr0, [r9], {-0}
    34d0:	03811b03 	orreq	r1, r1, #3072	; 0xc00
				} else if (c == 'x') {
    34d4:	bc140000 	ldclt	0, cr0, [r4], {-0}
					for (i = 28; ; i -= 4) {
    34d8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
					val = va_arg (ap, lword);
    34dc:	1614031e 			; <UNDEFINED> instruction: 0x1614031e
							[ (val >> i) & 0xf ]);
    34e0:	01000004 	tsteq	r0, r4
    34e4:	fa040a01 	blx	105cf0 <__ccfg+0xe5d48>
						outc (__pi_hex_enc_table
    34e8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    34ec:	0000070f 	andeq	r0, r0, pc, lsl #14
    34f0:	d9131d0a 	ldmdble	r3, {r1, r3, r8, sl, fp, ip}
						if (i == 0)
    34f4:	01000000 	mrseq	r0, (UNDEF: 0)
    34f8:	02ee0e01 	rsceq	r0, lr, #1, 28
					for (i = 28; ; i -= 4) {
    34fc:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
					outc ('%');
    3500:	0000ea1a 	andeq	lr, r0, sl, lsl sl
    3504:	0e010100 	adfeqs	f0, f1, f0
    3508:	00000c69 	andeq	r0, r0, r9, ror #24
					outc ('l');
    350c:	ea241e0a 	b	90ad3c <__ccfg+0x8ead94>
    3510:	01000000 	mrseq	r0, (UNDEF: 0)
				val = (word) va_arg (ap, aword);
    3514:	0c870e01 	stceq	14, cr0, [r7], {1}
				outc (val);
    3518:	220a0000 	andcs	r0, sl, #0
    351c:	00041614 	andeq	r1, r4, r4, lsl r6
				while (*st != '\0') {
    3520:	03010100 	movweq	r0, #4352	; 0x1100
    3524:	000014a3 	andeq	r1, r0, r3, lsr #9
    3528:	600f440a 	andvs	r4, pc, sl, lsl #8
    352c:	0a000004 	beq	3544 <__pi_vfparse+0x22c>
					outc (*st);
    3530:	00046604 	andeq	r6, r4, r4, lsl #12
    3534:	8d011900 	vstrhi.16	s2, [r1, #-0]	; <UNPREDICTABLE>
					st++;
    3538:	80000000 	andhi	r0, r0, r0
		c = *fm++;
    353c:	13000004 	movwne	r0, #4
    3540:	0000008d 	andeq	r0, r0, sp, lsl #1
    3544:	0001f613 	andeq	pc, r1, r3, lsl r6	; <UNPREDICTABLE>
char *vform (char *res, const char *fm, va_list aq) {
    3548:	008d1300 	addeq	r1, sp, r0, lsl #6
    354c:	1a000000 	bne	3554 <vform+0xc>
	if (res != NULL) {
    3550:	0000033e 	andeq	r0, r0, lr, lsr r3
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3554:	05070c01 	streq	r0, [r7, #-3073]	; 0xfffff3ff
    3558:	0006b003 	andeq	fp, r6, r3
    355c:	16471b20 	strbne	r1, [r7], -r0, lsr #22
}
    3560:	10010000 	andne	r0, r1, r0
    3564:	00010c07 	andeq	r0, r1, r7, lsl #24
	fml = strlen (fm) + 17;
    3568:	03050100 	movweq	r0, #20736	; 0x5100
    356c:	20000004 	andcs	r0, r0, r4
    3570:	0004461a 	andeq	r4, r4, sl, lsl r6
	if ((res = (char*) umalloc (fml)) == NULL)
    3574:	0d1a0100 	ldfeqs	f0, [sl, #-0]
    3578:	056c0305 	strbeq	r0, [ip, #-773]!	; 0xfffffcfb
    357c:	540f2000 	strpl	r2, [pc], #-0	; 3584 <vform+0x3c>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3580:	bf000004 	svclt	0x00000004
    3584:	18000004 	stmdane	r0, {r2}
    3588:	00000094 	muleq	r0, r4, r0
    358c:	db1c0000 	blle	703594 <__ccfg+0x6e35ec>
		ufree (res);
    3590:	01000014 	tsteq	r0, r4, lsl r0
		goto Again;
    3594:	04af141e 	strteq	r1, [pc], #1054	; 359c <vscan+0x4>
	if (buf == NULL || fmt == NULL)
    3598:	03050000 	movweq	r0, #20480	; 0x5000
int vscan (const char *buf, const char *fmt, va_list ap) {
    359c:	20000570 	andcs	r0, r0, r0, ror r5
	if (buf == NULL || fmt == NULL)
    35a0:	0001da1a 	andeq	sp, r1, sl, lsl sl
    35a4:	13220100 			; <UNDEFINED> instruction: 0x13220100
    35a8:	06b80305 	ldrteq	r0, [r8], r5, lsl #6
		    	    case 'u': scanu (lword); break;
    35ac:	071a2000 	ldreq	r2, [sl, -r0]
			while (isspace (*buf)) buf++;
    35b0:	01000004 	tsteq	r0, r4
    35b4:	03050d27 	movweq	r0, #23847	; 0x5d27
	while (*fmt != '\0') {
    35b8:	200006d4 	ldrdcs	r0, [r0], -r4
		if (*fmt++ != '%')
    35bc:	00041c1a 	andeq	r1, r4, sl, lsl ip
		switch (*fmt++) {
    35c0:	07300100 	ldreq	r0, [r0, -r0, lsl #2]!
    35c4:	06b40305 	ldrteq	r0, [r4], r5, lsl #6
    35c8:	2a1a2000 	bcs	68b5d0 <__ccfg+0x66b628>
    35cc:	01000004 	tsteq	r0, r4
    35d0:	03050f31 	movweq	r0, #24369	; 0x5f31
    35d4:	200006b6 			; <UNDEFINED> instruction: 0x200006b6
    35d8:	0004381a 	andeq	r3, r4, sl, lsl r8
}
    35dc:	19310100 	ldmdbne	r1!, {r8}
		switch (*fmt++) {
    35e0:	06c00305 	strbeq	r0, [r0], r5, lsl #6
    35e4:	290f2000 	stmdbcs	pc, {sp}	; <UNPREDICTABLE>
    35e8:	27000001 	strcs	r0, [r0, -r1]
    35ec:	18000005 	stmdane	r0, {r0, r2}
			while (isspace (*buf)) buf++;
    35f0:	00000094 	muleq	r0, r4, r0
    35f4:	c11b0003 	tstgt	fp, r3
    35f8:	01000013 	tsteq	r0, r3, lsl r0
    35fc:	05170a36 	ldreq	r0, [r7, #-2614]	; 0xfffff5ca
    3600:	05010000 	streq	r0, [r1, #-0]
    3604:	0006c403 	andeq	ip, r6, r3, lsl #8
			if (*buf == '\0')
    3608:	03201a20 			; <UNDEFINED> instruction: 0x03201a20
			if (*buf != ',') {
    360c:	3f010000 	svccc	0x00010000
			sap = va_arg (ap, char*);
    3610:	9103050c 	tstls	r3, ip, lsl #10
			nc++;
    3614:	1a000051 	bne	3760 <vscan+0x1c8>
			if (*buf != ',') {
    3618:	0000032f 	andeq	r0, r0, pc, lsr #6
				while (!isspace (*buf) && *buf != ',' &&
    361c:	050d4501 	streq	r4, [sp, #-1281]	; 0xfffffaff
    3620:	00000003 	andeq	r0, r0, r3
    3624:	01020b00 	tsteq	r2, r0, lsl #22
    3628:	057a0949 	ldrbeq	r0, [sl, #-2377]!	; 0xfffff6b7
    362c:	cf0d0000 	svcgt	0x000d0000
    3630:	01000014 	tsteq	r0, r4, lsl r0
    3634:	00fb074a 	rscseq	r0, fp, sl, asr #14
			while (isspace (*buf)) buf++;
    3638:	0d000000 	stceq	0, cr0, [r0, #-0]
    363c:	00001686 	andeq	r1, r0, r6, lsl #13
    3640:	fb074b01 	blx	1d624e <__ccfg+0x1b62a6>
    3644:	01000000 	mrseq	r0, (UNDEF: 0)
    3648:	15950300 	ldrne	r0, [r5, #768]	; 0x300
			if (*buf == ',') buf++;
    364c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    3650:	00055603 	andeq	r5, r5, r3, lsl #12
			*sap = '\0';
    3654:	057a0f00 	ldrbeq	r0, [sl, #-3840]!	; 0xfffff100
			break;
    3658:	05960000 	ldreq	r0, [r6]
		    case 'd': scani (word); break;
    365c:	94180000 	ldrls	r0, [r8], #-0
    3660:	00000000 	andeq	r0, r0, r0
    3664:	15f51c00 	ldrbne	r1, [r5, #3072]!	; 0xc00
    3668:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    366c:	00058611 	andeq	r8, r5, r1, lsl r6
    3670:	78030500 	stmdavc	r3, {r8, sl}
    3674:	0f200005 	svceq	0x00200005
    3678:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    367c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3680:	00009418 	andeq	r9, r0, r8, lsl r4
    3684:	0a000000 	beq	368c <vscan+0xf4>
    3688:	00011d04 	andeq	r1, r1, r4, lsl #26
    368c:	14f01d00 	ldrbtne	r1, [r0], #3328	; 0xd00
    3690:	bd010000 	stclt	0, cr0, [r1, #-0]
    3694:	05a80f02 	streq	r0, [r8, #3842]!	; 0xf02
    3698:	03050000 	movweq	r0, #20480	; 0x5000
    369c:	20000580 	andcs	r0, r0, r0, lsl #11
    36a0:	00011d0f 	andeq	r1, r1, pc, lsl #26
    36a4:	0005e100 	andeq	lr, r5, r0, lsl #2
    36a8:	00941800 	addseq	r1, r4, r0, lsl #16
    36ac:	00000000 	andeq	r0, r0, r0
    36b0:	0015501d 	andseq	r5, r5, sp, lsl r0
    36b4:	02c20100 	sbceq	r0, r2, #0, 2
    36b8:	0005d10e 	andeq	sp, r5, lr, lsl #2
    36bc:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    36c0:	1d200005 	stcne	0, cr0, [r0, #-20]!	; 0xffffffec
    36c4:	0000159e 	muleq	r0, lr, r5
    36c8:	2602c201 	strcs	ip, [r2], -r1, lsl #4
		    case 'u': scanu (word); break;
    36cc:	000005d1 	ldrdeq	r0, [r0], -r1
    36d0:	05740305 	ldrbeq	r0, [r4, #-773]!	; 0xfffffcfb
    36d4:	011e2000 	tsteq	lr, r0
    36d8:	00001621 	andeq	r1, r0, r1, lsr #12
    36dc:	07052f01 	streq	r2, [r5, -r1, lsl #30]
    36e0:	00010c01 	andeq	r0, r1, r1, lsl #24
    36e4:	001e5400 	andseq	r5, lr, r0, lsl #8
    36e8:	001e7800 	andseq	r7, lr, r0, lsl #16
    36ec:	1f9c0100 	svcne	0x009c0100
    36f0:	00158401 	andseq	r8, r5, r1, lsl #8
    36f4:	04820100 	streq	r0, [r2], #256	; 0x100
    36f8:	1d180106 	ldfnes	f0, [r8, #-24]	; 0xffffffe8
    36fc:	1e540000 	cdpne	0, 5, cr0, cr4, cr0, {0}
    3700:	9c010000 	stcls	0, cr0, [r1], {-0}
    3704:	0000070e 	andeq	r0, r0, lr, lsl #14
    3708:	0015b620 	andseq	fp, r5, r0, lsr #12
    370c:	04820100 	streq	r0, [r2], #256	; 0x100
    3710:	00070e18 	andeq	r0, r7, r8, lsl lr
		    case 'x': scanx (word); break;
    3714:	00086c00 	andeq	r6, r8, r0, lsl #24
    3718:	76222100 	strtvc	r2, [r2], -r0, lsl #2
    371c:	01006c61 	tsteq	r0, r1, ror #24
    3720:	0c080487 	cfstrseq	mvf0, [r8], {135}	; 0x87
    3724:	ac000001 	stcge	0, cr0, [r0], {1}
    3728:	23000008 	movwcs	r0, #8
    372c:	01007061 	tsteq	r0, r1, rrx
    3730:	c10a0488 	smlabbgt	sl, r8, r4, r0
    3734:	02000000 	andeq	r0, r0, #0
    3738:	62224c91 	eorvs	r4, r2, #37120	; 0x9100
    373c:	89010063 	stmdbhi	r1, {r0, r1, r5, r6}
    3740:	00ef0704 	rsceq	r0, pc, r4, lsl #14
    3744:	08eb0000 	stmiaeq	fp!, {}^	; <UNPREDICTABLE>
    3748:	76220000 	strtvc	r0, [r2], -r0
    374c:	048a0100 	streq	r0, [sl], #256	; 0x100
    3750:	0000d907 	andeq	sp, r0, r7, lsl #18
    3754:	00091f00 	andeq	r1, r9, r0, lsl #30
    3758:	73692400 	cmnvc	r9, #0, 8
    375c:	048b0100 	streq	r0, [fp], #256	; 0x100
    3760:	0000fb07 	andeq	pc, r0, r7, lsl #22
    3764:	16962500 	ldrne	r2, [r6], r0, lsl #10
    3768:	b0010000 	andlt	r0, r1, r0
    376c:	1de40104 	stfnee	f0, [r4, #16]!
    3770:	a4260000 	strtge	r0, [r6], #-0
    3774:	c000001d 	andgt	r0, r0, sp, lsl r0
    3778:	c000001d 	andgt	r0, r0, sp, lsl r0
    377c:	22000006 	andcs	r0, r0, #6
    3780:	9f010069 	svcls	0x00010069
    3784:	00ef0a04 	rsceq	r0, pc, r4, lsl #20
    3788:	09480000 	stmdbeq	r8, {}^	; <UNPREDICTABLE>
			switch (*fmt++) {
    378c:	27000000 	strcs	r0, [r0, -r0]
    3790:	00000760 	andeq	r0, r0, r0, ror #14
    3794:	000006d9 	ldrdeq	r0, [r0], -r9
    3798:	01006422 	tsteq	r0, r2, lsr #8
    379c:	0c0b04a9 	cfstrseq	mvf0, [fp], {169}	; 0xa9
    37a0:	5b000001 	blpl	37ac <vscan+0x214>
		    	    case 'd': scani (lword); break;
    37a4:	00000009 	andeq	r0, r0, r9
    37a8:	001e3026 	andseq	r3, lr, r6, lsr #32
    37ac:	001e3e00 	andseq	r3, lr, r0, lsl #28
    37b0:	0006f600 	andeq	pc, r6, r0, lsl #12
    37b4:	00732200 	rsbseq	r2, r3, r0, lsl #4
    37b8:	0b04c601 	bleq	134fc4 <__ccfg+0x11501c>
    37bc:	000001f6 	strdeq	r0, [r0], -r6
    37c0:	00000984 	andeq	r0, r0, r4, lsl #19
    37c4:	10c12800 	sbcne	r2, r1, r0, lsl #16
    37c8:	1d460000 	stclne	0, cr0, [r6, #-0]
    37cc:	07900000 	ldreq	r0, [r0, r0]
    37d0:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    37d4:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    37d8:	00000010 	andeq	r0, r0, r0, lsl r0
    37dc:	03040a00 	movweq	r0, #18944	; 0x4a00
    37e0:	2a000002 	bcs	37f0 <vscan+0x258>
    37e4:	0000166b 	andeq	r1, r0, fp, ror #12
    37e8:	0d044701 	stceq	7, cr4, [r4, #-4]
    37ec:	0017fc01 	andseq	pc, r7, r1, lsl #24
    37f0:	00181400 	andseq	r1, r8, r0, lsl #8
    37f4:	539c0100 	orrspl	r0, ip, #0, 2
    37f8:	2b000007 	blcs	381c <vscan+0x284>
    37fc:	47010063 	strmi	r0, [r1, -r3, rrx]
		    	    case 'x': scanx (lword); break;
    3800:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    3804:	09970000 	ldmibeq	r7, {}	; <UNPREDICTABLE>
    3808:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    380c:	fc000010 	stc2	0, cr0, [r0], {16}
    3810:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    3814:	01000007 	tsteq	r0, r7
    3818:	29020449 	stmdbcs	r2, {r0, r3, r6, sl}
    381c:	000010d4 	ldrdeq	r1, [r0], -r4
    3820:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3824:	00001535 	andeq	r1, r0, r5, lsr r5
    3828:	06042801 	streq	r2, [r4], -r1, lsl #16
    382c:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    3838:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    383c:	2b000007 	blcs	3860 <vscan+0x2c8>
    3840:	0100636e 	tsteq	r0, lr, ror #6
    3844:	291c0428 	ldmdbcs	ip, {r3, r5, sl}
    3848:	aa000001 	bge	3854 <vscan+0x2bc>
    384c:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    3850:	00001633 	andeq	r1, r0, r3, lsr r6
    3854:	09043101 	stmdbeq	r4, {r0, r8, ip, sp}
    3858:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    385c:	000009c8 	andeq	r0, r0, r8, asr #19
    3860:	78616d22 	stmdavc	r1!, {r1, r5, r8, sl, fp, sp, lr}^
    3864:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    3868:	00011d08 	andeq	r1, r1, r8, lsl #26
    386c:	0009e600 	andeq	lr, r9, r0, lsl #12
		    	    case 'd': scani (lword); break;
    3870:	154b2d00 	strbne	r2, [fp, #-3328]	; 0xfffff300
    3874:	32010000 	andcc	r0, r1, #0
    3878:	011d0d04 	tsteq	sp, r4, lsl #26
    387c:	0a040000 	beq	103884 <__ccfg+0xe38dc>
    3880:	2c000000 	stccs	0, cr0, [r0], {-0}
    3884:	00162601 	andseq	r2, r6, r1, lsl #12
    3888:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
		    	    case 'u': scanu (lword); break;
    388c:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    3898:	9c010000 	stcls	0, cr0, [r1], {-0}
    389c:	000007e3 	andeq	r0, r0, r3, ror #15
    38a0:	6e696d2b 	cdpvs	13, 6, cr6, cr9, cr11, {1}
    38a4:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    38a8:	0001291c 	andeq	r2, r1, ip, lsl r9
    38ac:	000a2d00 	andeq	r2, sl, r0, lsl #26
    38b0:	011f0000 	tsteq	pc, r0
    38b4:	00001614 	andeq	r1, r0, r4, lsl r6
    38b8:	06040201 	streq	r0, [r4], -r1, lsl #4
    38bc:	001d0001 	andseq	r0, sp, r1
    38c0:	001d1800 	andseq	r1, sp, r0, lsl #16
    38c4:	0e9c0100 	fmleqe	f0, f4, f0
    38c8:	20000008 	andcs	r0, r0, r8
    38cc:	00000079 	andeq	r0, r0, r9, ror r0
    38d0:	19040201 	stmdbne	r4, {r0, r9}
		    	    case 'x': scanx (lword); break;
    38d4:	000000d9 	ldrdeq	r0, [r0], -r9
    38d8:	00000a40 	andeq	r0, r0, r0, asr #20
			if ((c = *buf++) == '\0')
    38dc:	c2012c00 	andgt	r2, r1, #0, 24
    38e0:	01000014 	tsteq	r0, r4, lsl r0
			sap = va_arg (ap, char*);
    38e4:	010803a3 	smlatbeq	r8, r3, r3, r0
			nc++;
    38e8:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
			break;
    38ec:	00001c24 	andeq	r1, r0, r4, lsr #24
			while (isspace (*buf)) buf++;
    38f0:	00001ccc 	andeq	r1, r0, ip, asr #25
    38f4:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
    38f8:	a1200000 			; <UNDEFINED> instruction: 0xa1200000
						*sap++ = *buf++;
    38fc:	0100001d 	tsteq	r0, sp, lsl r0
    3900:	d91a03a3 	ldmdble	sl, {r0, r1, r5, r7, r8, r9}
			while (isspace (*buf)) buf++;
    3904:	53000000 	movwpl	r0, #0
    3908:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    390c:	00001633 	andeq	r1, r0, r3, lsr r6
		return 0;
    3910:	0903ab01 	stmdbeq	r3, {r0, r8, r9, fp, sp, pc}
    3914:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
		    case 'x': scanx (word); break;
    3918:	00000a66 	andeq	r0, r0, r6, ror #20
    391c:	00636322 	rsbeq	r6, r3, r2, lsr #6
		    	    case 'x': scanx (lword); break;
    3920:	1103ab01 	tstne	r3, r1, lsl #22
    3924:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3928:	00000a9a 	muleq	r0, sl, sl
    392c:	0015a52d 	andseq	sl, r5, sp, lsr #10
    3930:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    3934:	00011d15 	andeq	r1, r1, r5, lsl sp
    3938:	000ac300 	andeq	ip, sl, r0, lsl #6
    393c:	1da02d00 	stcne	13, cr2, [r0]
    3940:	af010000 	svcge	0x00010000
    3944:	011d0803 	tsteq	sp, r3, lsl #16
    3948:	0ad60000 	beq	ff583950 <_estack+0xdf57e950>
    394c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3950:	00168c01 	andseq	r8, r6, r1, lsl #24
    3954:	037c0100 	cmneq	ip, #0, 2
    3958:	9d010106 	stflss	f0, [r1, #-24]	; 0xffffffe8
    395c:	2f000008 	svccs	0x00000008
    3960:	01006863 	tsteq	r0, r3, ror #16
    3964:	b818037c 	ldmdalt	r8, {r2, r3, r4, r5, r6, r8, r9}
    3968:	00000005 	andeq	r0, r0, r5
    396c:	0014d52a 	andseq	sp, r4, sl, lsr #10
    3970:	034a0100 	movteq	r0, #41216	; 0xa100
    3974:	177c010d 	ldrbne	r0, [ip, -sp, lsl #2]!
    3978:	17fc0000 	ldrbne	r0, [ip, r0]!
    397c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3980:	000008e7 	andeq	r0, r0, r7, ror #17
    3984:	0068632b 	rsbeq	r6, r8, fp, lsr #6
    3988:	1b034a01 	blne	d6194 <__ccfg+0xb61ec>
    398c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3990:	00000b00 	andeq	r0, r0, r0, lsl #22
    3994:	0016332d 	andseq	r3, r6, sp, lsr #6
    3998:	03570100 	cmpeq	r7, #0, 2
    399c:	0005b809 	andeq	fp, r5, r9, lsl #16
    39a0:	000b1e00 	andeq	r1, fp, r0, lsl #28
    39a4:	63632200 	cmnvs	r3, #0, 4
    39a8:	03570100 	cmpeq	r7, #0, 2
    39ac:	0005b811 	andeq	fp, r5, r1, lsl r8
    39b0:	000b5f00 	andeq	r5, fp, r0, lsl #30
    39b4:	01300000 	teqeq	r0, r0
    39b8:	0000150b 	andeq	r1, r0, fp, lsl #10
    39bc:	0602f001 	streq	pc, [r2], -r1
    39c0:	00001b3c 	andeq	r1, r0, ip, lsr fp
    39c4:	00001b8c 	andeq	r1, r0, ip, lsl #23
    39c8:	09119c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}
    39cc:	5f2d0000 	svcpl	0x002d0000
    39d0:	01000015 	tsteq	r0, r5, lsl r0
    39d4:	1d0802f5 	sfmne	f0, 4, [r8, #-980]	; 0xfffffc2c
    39d8:	93000001 	movwls	r0, #1
    39dc:	0000000b 	andeq	r0, r0, fp
    39e0:	6f690131 	svcvs	0x00690131
    39e4:	02790100 	rsbseq	r0, r9, #0, 2
    39e8:	00ef0106 	rsceq	r0, pc, r6, lsl #2
    39ec:	1aa00000 	bne	fe8039f4 <_estack+0xde7fe9f4>
    39f0:	1b3c0000 	blne	f039f8 <__ccfg+0xee3a50>
    39f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    39f8:	00000994 	muleq	r0, r4, r9
    39fc:	0015ab20 	andseq	sl, r5, r0, lsr #22
    3a00:	02790100 	rsbseq	r0, r9, #0, 2
    3a04:	0000d90f 	andeq	sp, r0, pc, lsl #18
    3a08:	000bb100 	andeq	fp, fp, r0, lsl #2
    3a0c:	65642b00 	strbvs	r2, [r4, #-2816]!	; 0xfffff500
    3a10:	79010076 	stmdbvc	r1, {r1, r2, r4, r5, r6}
    3a14:	00d91b02 	sbcseq	r1, r9, r2, lsl #22
    3a18:	0bcf0000 	bleq	ff3c3a20 <_estack+0xdf3bea20>
    3a1c:	7d200000 	stcvc	0, cr0, [r0, #-0]
    3a20:	01000011 	tsteq	r0, r1, lsl r0
    3a24:	d9250279 	stmdble	r5!, {r0, r3, r4, r5, r6, r9}
    3a28:	ed000000 	stc	0, cr0, [r0, #-0]
    3a2c:	2b00000b 	blcs	3a60 <NOROM_OSCHF_TurnOnXosc+0x10>
    3a30:	00667562 	rsbeq	r7, r6, r2, ror #10
    3a34:	36027901 	strcc	r7, [r2], -r1, lsl #18
    3a38:	000001f6 	strdeq	r0, [r0], -r6
    3a3c:	00000c0b 	andeq	r0, r0, fp, lsl #24
    3a40:	6e656c2b 	cdpvs	12, 6, cr6, cr5, cr11, {1}
    3a44:	02790100 	rsbseq	r0, r9, #0, 2
    3a48:	0000d940 	andeq	sp, r0, r0, asr #18
    3a4c:	000c2900 	andeq	r2, ip, r0, lsl #18
    3a50:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    3a54:	7b010074 	blvc	43c2c <__ccfg+0x23c84>
    3a58:	00ef0702 	rsceq	r0, pc, r2, lsl #14
    3a5c:	0c490000 	mareq	acc0, r0, r9
    3a60:	1f000000 	svcne	0x00000000
    3a64:	00157201 	andseq	r7, r5, r1, lsl #4
    3a68:	02690100 	rsbeq	r0, r9, #0, 2
    3a6c:	1a7c0106 	bne	1f03e8c <__ccfg+0x1ee3ee4>
    3a70:	1aa00000 	bne	fe803a78 <_estack+0xde7fea78>
    3a74:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a78:	000009cf 	andeq	r0, r0, pc, asr #19
    3a7c:	0066722b 	rsbeq	r7, r6, fp, lsr #4
    3a80:	1e026901 	vmlane.f16	s12, s4, s2	; <UNPREDICTABLE>
    3a84:	00000454 	andeq	r0, r0, r4, asr r4
    3a88:	00000c7d 	andeq	r0, r0, sp, ror ip
    3a8c:	636f6c2b 	cmnvs	pc, #11008	; 0x2b00
    3a90:	02690100 	rsbeq	r0, r9, #0, 2
    3a94:	00008d26 	andeq	r8, r0, r6, lsr #26
    3a98:	000ca600 	andeq	sl, ip, r0, lsl #12
    3a9c:	011f0000 	tsteq	pc, r0
    3aa0:	0000169d 	muleq	r0, sp, r6
    3aa4:	06025f01 	streq	r5, [r2], -r1, lsl #30
    3aa8:	001a6e01 	andseq	r6, sl, r1, lsl #28
    3aac:	001a7c00 	andseq	r7, sl, r0, lsl #24
    3ab0:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    3ab4:	2000000a 	andcs	r0, r0, sl
    3ab8:	000015b1 			; <UNDEFINED> instruction: 0x000015b1
    3abc:	19025f01 	stmdbne	r2, {r0, r8, r9, sl, fp, ip, lr}
    3ac0:	000001f6 	strdeq	r0, [r0], -r6
    3ac4:	00000ccf 	andeq	r0, r0, pc, asr #25
    3ac8:	01006332 	tsteq	r0, r2, lsr r3
    3acc:	fc24025f 	stc2	2, cr0, [r4], #-380	; 0xfffffe84
    3ad0:	01000001 	tsteq	r0, r1
    3ad4:	006e2b51 	rsbeq	r2, lr, r1, asr fp
    3ad8:	2b025f01 	blcs	9b6e4 <__ccfg+0x7b73c>
    3adc:	0000008d 	andeq	r0, r0, sp, lsl #1
    3ae0:	00000ced 	andeq	r0, r0, sp, ror #25
    3ae4:	5f011f00 	svcpl	0x00011f00
    3ae8:	01000016 	tsteq	r0, r6, lsl r0
    3aec:	01060259 	tsteq	r6, r9, asr r2
    3af0:	00001a5a 	andeq	r1, r0, sl, asr sl
    3af4:	00001a6e 	andeq	r1, r0, lr, ror #20
    3af8:	0a619c01 	beq	186ab04 <__ccfg+0x184ab5c>
    3afc:	b1200000 			; <UNDEFINED> instruction: 0xb1200000
    3b00:	01000015 	tsteq	r0, r5, lsl r0
    3b04:	f6190259 			; <UNDEFINED> instruction: 0xf6190259
    3b08:	00000001 	andeq	r0, r0, r1
    3b0c:	2b00000d 	blcs	3b48 <NOROM_RFCSynthPowerDown+0x24>
    3b10:	00637273 	rsbeq	r7, r3, r3, ror r2
    3b14:	2b025901 	blcs	99f20 <__ccfg+0x79f78>
    3b18:	0000070e 	andeq	r0, r0, lr, lsl #14
    3b1c:	00000d13 	andeq	r0, r0, r3, lsl sp
    3b20:	01006e2b 	tsteq	r0, fp, lsr #28
    3b24:	8d340259 	lfmhi	f0, 4, [r4, #-356]!	; 0xfffffe9c
    3b28:	31000000 	mrscc	r0, (UNDEF: 0)
    3b2c:	0000000d 	andeq	r0, r0, sp
    3b30:	16d6011f 			; <UNDEFINED> instruction: 0x16d6011f
    3b34:	54010000 	strpl	r0, [r1], #-0
    3b38:	00010602 	andeq	r0, r1, r2, lsl #12
    3b3c:	00000000 	andeq	r0, r0, r0
    3b40:	01000000 	mrseq	r0, (UNDEF: 0)
    3b44:	000aa69c 	muleq	sl, ip, r6
    3b48:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3b4c:	1a025401 	bne	98b58 <__ccfg+0x78bb0>
    3b50:	000001f6 	strdeq	r0, [r0], -r6
    3b54:	00000d44 	andeq	r0, r0, r4, asr #26
    3b58:	0100732b 	tsteq	r0, fp, lsr #6
    3b5c:	0e290254 	mcreq	2, 1, r0, cr9, cr4, {2}
    3b60:	57000007 	strpl	r0, [r0, -r7]
    3b64:	3200000d 	andcc	r0, r0, #13
    3b68:	5401006e 	strpl	r0, [r1], #-110	; 0xffffff92
    3b6c:	008d3002 	addeq	r3, sp, r2
    3b70:	52010000 	andpl	r0, r1, #0
    3b74:	89011f00 	stmdbhi	r1, {r8, r9, sl, fp, ip}
    3b78:	01000015 	tsteq	r0, r5, lsl r0
    3b7c:	0106024e 	tsteq	r6, lr, asr #4
	...
    3b88:	0ade9c01 	beq	ff7aab94 <_estack+0xdf7a5b94>
    3b8c:	642b0000 	strtvs	r0, [fp], #-0
    3b90:	024e0100 	subeq	r0, lr, #0, 2
    3b94:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    3b98:	000d6a00 	andeq	r6, sp, r0, lsl #20
    3b9c:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3ba0:	28024e01 	stmdacs	r2, {r0, r9, sl, fp, lr}
    3ba4:	0000070e 	andeq	r0, r0, lr, lsl #14
    3ba8:	00000d88 	andeq	r0, r0, r8, lsl #27
    3bac:	b1011f00 	tstlt	r1, r0, lsl #30
    3bb0:	01000016 	tsteq	r0, r6, lsl r0
    3bb4:	01060247 	tsteq	r6, r7, asr #4
    3bb8:	00001a3e 	andeq	r1, r0, lr, lsr sl
    3bbc:	00001a5a 	andeq	r1, r0, sl, asr sl
    3bc0:	0b259c01 	bleq	96abcc <__ccfg+0x94ac24>
    3bc4:	642b0000 	strtvs	r0, [fp], #-0
    3bc8:	02470100 	subeq	r0, r7, #0, 2
    3bcc:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    3bd0:	000d9b00 	andeq	r9, sp, r0, lsl #22
    3bd4:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3bd8:	29024701 	stmdbcs	r2, {r0, r8, r9, sl, lr}
    3bdc:	0000070e 	andeq	r0, r0, lr, lsl #14
    3be0:	00000db9 			; <UNDEFINED> instruction: 0x00000db9
    3be4:	01006e2b 	tsteq	r0, fp, lsr #28
    3be8:	8d300247 	lfmhi	f0, 4, [r0, #-284]!	; 0xfffffee4
    3bec:	cc000000 	stcgt	0, cr0, [r0], {-0}
    3bf0:	0000000d 	andeq	r0, r0, sp
    3bf4:	14b6011f 	ldrtne	r0, [r6], #287	; 0x11f
    3bf8:	42010000 	andmi	r0, r1, #0
    3bfc:	2e010602 	cfmadd32cs	mvax0, mvfx0, mvfx1, mvfx2
    3c00:	3e00001a 	mcrcc	0, 0, r0, cr0, cr10, {0}
    3c04:	0100001a 	tsteq	r0, sl, lsl r0
    3c08:	000b5d9c 	muleq	fp, ip, sp
    3c0c:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    3c10:	19024201 	stmdbne	r2, {r0, r9, lr}
    3c14:	000001f6 	strdeq	r0, [r0], -r6
    3c18:	00000ddf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3c1c:	0100732b 	tsteq	r0, fp, lsr #6
    3c20:	0e280242 	cdpeq	2, 2, cr0, cr8, cr2, {2}
    3c24:	f2000007 	vhadd.s8	d0, d0, d7
    3c28:	0000000d 	andeq	r0, r0, sp
    3c2c:	1529012c 	strne	r0, [r9, #-300]!	; 0xfffffed4
    3c30:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    3c34:	8d010502 	cfstr32hi	mvfx0, [r1, #-8]
    3c38:	20000000 	andcs	r0, r0, r0
    3c3c:	2e00001a 	mcrcs	0, 0, r0, cr0, cr10, {0}
    3c40:	0100001a 	tsteq	r0, sl, lsl r0
    3c44:	000b999c 	muleq	fp, ip, r9
    3c48:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3c4c:	1e023901 	vmlane.f16	s6, s4, s2	; <UNPREDICTABLE>
    3c50:	0000070e 	andeq	r0, r0, lr, lsl #14
    3c54:	00000e10 	andeq	r0, r0, r0, lsl lr
    3c58:	01006922 	tsteq	r0, r2, lsr #18
    3c5c:	8d06023b 	sfmhi	f0, 4, [r6, #-236]	; 0xffffff14
    3c60:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3c64:	0000000e 	andeq	r0, r0, lr
    3c68:	1542012c 	strbne	r0, [r2, #-300]	; 0xfffffed4
    3c6c:	2d010000 	stccs	0, cr0, [r1, #-0]
    3c70:	d9010602 	stmdble	r1, {r1, r9, sl}
	...
    3c7c:	01000000 	mrseq	r0, (UNDEF: 0)
    3c80:	000be69c 	muleq	fp, ip, r6
    3c84:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3c88:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    3c8c:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    3c90:	0e410000 	cdpeq	0, 4, cr0, cr1, cr0, {0}
    3c94:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3c98:	022f0100 	eoreq	r0, pc, #0, 2
    3c9c:	0004160e 	andeq	r1, r4, lr, lsl #12
    3ca0:	000e5f00 	andeq	r5, lr, r0, lsl #30
    3ca4:	00632200 	rsbeq	r2, r3, r0, lsl #4
    3ca8:	07023001 	streq	r3, [r2, -r1]
    3cac:	000000d9 	ldrdeq	r0, [r0], -r9
    3cb0:	00000e7d 	andeq	r0, r0, sp, ror lr
    3cb4:	43012c00 	movwmi	r2, #7168	; 0x1c00
    3cb8:	01000015 	tsteq	r0, r5, lsl r0
    3cbc:	0107021f 	tsteq	r7, pc, lsl r2
    3cc0:	0000011d 	andeq	r0, r0, sp, lsl r1
    3cc4:	000019fc 	strdeq	r1, [r0], -ip
    3cc8:	00001a20 	andeq	r1, r0, r0, lsr #20
    3ccc:	0c229c01 	stceq	12, cr9, [r2], #-4
    3cd0:	662b0000 	strtvs	r0, [fp], -r0
    3cd4:	01006e75 	tsteq	r0, r5, ror lr
    3cd8:	f118021f 			; <UNDEFINED> instruction: 0xf118021f
    3cdc:	90000002 	andls	r0, r0, r2
    3ce0:	2300000e 	movwcs	r0, #14
    3ce4:	21010069 	tstcs	r1, r9, rrx
    3ce8:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    3cec:	50010000 	andpl	r0, r1, r0
    3cf0:	51012c00 	tstpl	r1, r0, lsl #24
    3cf4:	01000016 	tsteq	r0, r6, lsl r0
    3cf8:	01090213 	tsteq	r9, r3, lsl r2
    3cfc:	000002f1 	strdeq	r0, [r0], -r1
	...
    3d08:	0c609c01 	stcleq	12, cr9, [r0], #-4
    3d0c:	702b0000 	eorvc	r0, fp, r0
    3d10:	01006469 	tsteq	r0, r9, ror #8
    3d14:	1d180213 	lfmne	f0, 4, [r8, #-76]	; 0xffffffb4
    3d18:	b9000001 	stmdblt	r0, {r0}
    3d1c:	2200000e 	andcs	r0, r0, #14
    3d20:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
    3d24:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    3d28:	0ed70000 	cdpeq	0, 13, cr0, cr7, cr0, {0}
    3d2c:	1f000000 	svcne	0x00000000
    3d30:	0016a901 	andseq	sl, r6, r1, lsl #18
    3d34:	01f50100 	mvnseq	r0, r0, lsl #2
    3d38:	00000106 	andeq	r0, r0, r6, lsl #2
    3d3c:	00000000 	andeq	r0, r0, r0
    3d40:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d44:	00000cc9 	andeq	r0, r0, r9, asr #25
    3d48:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    3d4c:	01f50100 	mvnseq	r0, r0, lsl #2
    3d50:	0002f117 	andeq	pc, r2, r7, lsl r1	; <UNPREDICTABLE>
    3d54:	000ef500 	andeq	pc, lr, r0, lsl #10
    3d58:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    3d5c:	f901006c 			; <UNDEFINED> instruction: 0xf901006c
    3d60:	00cd0a01 	sbceq	r0, sp, r1, lsl #20
    3d64:	0f130000 	svceq	0x00130000
    3d68:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3d6c:	01fa0100 	mvnseq	r0, r0, lsl #2
    3d70:	0004160e 	andeq	r1, r4, lr, lsl #12
    3d74:	000f2600 	andeq	r2, pc, r0, lsl #12
    3d78:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    3d7c:	1201fa01 	andne	pc, r1, #4096	; 0x1000
    3d80:	00000416 	andeq	r0, r0, r6, lsl r4
    3d84:	00000f5a 	andeq	r0, r0, sl, asr pc
    3d88:	01006b22 	tsteq	r0, r2, lsr #22
    3d8c:	161601fa 			; <UNDEFINED> instruction: 0x161601fa
    3d90:	78000004 	stmdavc	r0, {r2}
    3d94:	0000000f 	andeq	r0, r0, pc
    3d98:	14eb011f 	strbtne	r0, [fp], #287	; 0x11f
    3d9c:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    3da0:	d4010601 	strle	r0, [r1], #-1537	; 0xfffff9ff
    3da4:	2400001b 	strcs	r0, [r0], #-27	; 0xffffffe5
    3da8:	0100001c 	tsteq	r0, ip, lsl r0
    3dac:	000d0e9c 	muleq	sp, ip, lr
    3db0:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3db4:	d9010064 	stmdble	r1, {r2, r5, r6}
    3db8:	011d1201 	tsteq	sp, r1, lsl #4
    3dbc:	0f960000 	svceq	0x00960000
    3dc0:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3dc4:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    3dc8:	0004160e 	andeq	r1, r4, lr, lsl #12
    3dcc:	000fca00 	andeq	ip, pc, r0, lsl #20
    3dd0:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    3dd4:	1201dd01 	andne	sp, r1, #1, 26	; 0x40
    3dd8:	00000416 	andeq	r0, r0, r6, lsl r4
    3ddc:	14af2a00 	strtne	r2, [pc], #2560	; 3de4 <NOROM_RFCRfTrimSet+0xc>
    3de0:	c4010000 	strgt	r0, [r1], #-0
    3de4:	40010d01 	andmi	r0, r1, r1, lsl #26
    3de8:	7c000017 	stcvc	0, cr0, [r0], {23}
    3dec:	01000017 	tsteq	r0, r7, lsl r0
    3df0:	000d639c 	muleq	sp, ip, r3
    3df4:	69703200 	ldmdbvs	r0!, {r9, ip, sp}^
    3df8:	c4010064 	strgt	r0, [r1], #-100	; 0xffffff9c
    3dfc:	04162101 	ldreq	r2, [r6], #-257	; 0xfffffeff
    3e00:	50010000 	andpl	r0, r1, r0
    3e04:	0016812d 	andseq	r8, r6, sp, lsr #2
    3e08:	01c80100 	biceq	r0, r8, r0, lsl #2
    3e0c:	00011d08 	andeq	r1, r1, r8, lsl #26
    3e10:	000ff300 	andeq	pc, pc, r0, lsl #6
    3e14:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    3e18:	0601c901 	streq	ip, [r1], -r1, lsl #18
    3e1c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3e20:	00001006 	andeq	r1, r0, r6
    3e24:	01006923 	tsteq	r0, r3, lsr #18
    3e28:	160e01ca 	strne	r0, [lr], -sl, asr #3
    3e2c:	01000004 	tsteq	r0, r4
    3e30:	012c0052 	qsubeq	r0, r2, ip
    3e34:	00001659 	andeq	r1, r0, r9, asr r6
    3e38:	0601b301 	streq	fp, [r1], -r1, lsl #6
    3e3c:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    3e48:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    3e4c:	2b00000d 	blcs	3e88 <TrimAfterColdResetWakeupFromShutDown+0x74>
    3e50:	00646970 	rsbeq	r6, r4, r0, ror r9
    3e54:	1301b301 	movwne	fp, #4865	; 0x1301
    3e58:	0000011d 	andeq	r0, r0, sp, lsl r1
    3e5c:	00001019 	andeq	r1, r0, r9, lsl r0
    3e60:	01006922 	tsteq	r0, r2, lsr #18
    3e64:	160e01b5 			; <UNDEFINED> instruction: 0x160e01b5
    3e68:	37000004 	strcc	r0, [r0, -r4]
    3e6c:	00000010 	andeq	r0, r0, r0, lsl r0
    3e70:	14ce0133 	strbne	r0, [lr], #307	; 0x133
    3e74:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    3e78:	00010601 	andeq	r0, r1, r1, lsl #12
    3e7c:	00000000 	andeq	r0, r0, r0
    3e80:	01000000 	mrseq	r0, (UNDEF: 0)
    3e84:	d9011f9c 	stmdble	r1, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
    3e88:	0100002c 	tsteq	r0, ip, lsr #32
    3e8c:	0106019a 			; <UNDEFINED> instruction: 0x0106019a
    3e90:	000019c4 	andeq	r1, r0, r4, asr #19
    3e94:	000019fc 	strdeq	r1, [r0], -ip
    3e98:	0df09c01 	ldcleq	12, cr9, [r0, #4]!
    3e9c:	642b0000 	strtvs	r0, [fp], #-0
    3ea0:	019a0100 	orrseq	r0, sl, r0, lsl #2
    3ea4:	0000d912 	andeq	sp, r0, r2, lsl r9
    3ea8:	00105500 	andseq	r5, r0, r0, lsl #10
    3eac:	00792000 	rsbseq	r2, r9, r0
    3eb0:	9a010000 	bls	43eb8 <__ccfg+0x23f10>
    3eb4:	00d91a01 	sbcseq	r1, r9, r1, lsl #20
    3eb8:	10680000 	rsbne	r0, r8, r0
    3ebc:	2c000000 	stccs	0, cr0, [r0], {-0}
    3ec0:	0016be01 	andseq	fp, r6, r1, lsl #28
    3ec4:	01880100 	orreq	r0, r8, r0, lsl #2
    3ec8:	011d0107 	tsteq	sp, r7, lsl #2
    3ecc:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
    3ed0:	19c40000 	stmibne	r4, {}^	; <UNPREDICTABLE>
    3ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ed8:	00000e3e 	andeq	r0, r0, lr, lsr lr
    3edc:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3ee0:	01880100 	orreq	r0, r8, r0, lsl #2
    3ee4:	00011d18 	andeq	r1, r1, r8, lsl sp
    3ee8:	00107b00 	andseq	r7, r0, r0, lsl #22
    3eec:	74732b00 	ldrbtvc	r2, [r3], #-2816	; 0xfffff500
    3ef0:	01880100 	orreq	r0, r8, r0, lsl #2
    3ef4:	0000d922 	andeq	sp, r0, r2, lsr #18
    3ef8:	0010a400 	andseq	sl, r0, r0, lsl #8
    3efc:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3f00:	0e018a01 	vmlaeq.f32	s16, s2, s2
    3f04:	00000416 	andeq	r0, r0, r6, lsl r4
    3f08:	000010c2 	andeq	r1, r0, r2, asr #1
    3f0c:	64011f00 	strvs	r1, [r1], #-3840	; 0xfffff100
    3f10:	01000015 	tsteq	r0, r5, lsl r0
    3f14:	01060178 	tsteq	r6, r8, ror r1
	...
    3f20:	0e969c01 	cdpeq	12, 9, cr9, cr6, cr1, {0}
    3f24:	702b0000 	eorvc	r0, fp, r0
    3f28:	01006469 	tsteq	r0, r9, ror #8
    3f2c:	1d1b0178 	ldfnes	f0, [fp, #-480]	; 0xfffffe20
    3f30:	e0000001 	and	r0, r0, r1
    3f34:	20000010 	andcs	r0, r0, r0, lsl r0
    3f38:	000015f6 	strdeq	r1, [r0], -r6
    3f3c:	26017801 	strcs	r7, [r1], -r1, lsl #16
    3f40:	0000011d 	andeq	r0, r0, sp, lsl r1
    3f44:	000010f3 	strdeq	r1, [r0], -r3
    3f48:	01006923 	tsteq	r0, r3, lsr #18
    3f4c:	160e017c 			; <UNDEFINED> instruction: 0x160e017c
    3f50:	01000004 	tsteq	r0, r4
    3f54:	006a2250 	rsbeq	r2, sl, r0, asr r2
    3f58:	07017d01 	streq	r7, [r1, -r1, lsl #26]
    3f5c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3f60:	00001111 	andeq	r1, r0, r1, lsl r1
    3f64:	1c011f00 	stcne	15, cr1, [r1], {-0}
    3f68:	01000015 	tsteq	r0, r5, lsl r0
    3f6c:	01060166 	tsteq	r6, r6, ror #2
    3f70:	0000196c 	andeq	r1, r0, ip, ror #18
    3f74:	000019a0 	andeq	r1, r0, r0, lsr #19
    3f78:	0edb9c01 	cdpeq	12, 13, cr9, cr11, cr1, {0}
    3f7c:	f6340000 			; <UNDEFINED> instruction: 0xf6340000
    3f80:	01000015 	tsteq	r0, r5, lsl r0
    3f84:	1d1a0166 	ldfnes	f0, [sl, #-408]	; 0xfffffe68
    3f88:	01000001 	tsteq	r0, r1
    3f8c:	006a2250 	rsbeq	r2, sl, r0, asr r2
    3f90:	06016a01 	streq	r6, [r1], -r1, lsl #20
    3f94:	0000008d 	andeq	r0, r0, sp, lsl #1
    3f98:	0000112f 	andeq	r1, r0, pc, lsr #2
    3f9c:	01006923 	tsteq	r0, r3, lsr #18
    3fa0:	160e016b 	strne	r0, [lr], -fp, ror #2
    3fa4:	01000004 	tsteq	r0, r4
    3fa8:	012e0052 	qsubeq	r0, r2, lr
    3fac:	0000160a 	andeq	r1, r0, sl, lsl #12
    3fb0:	06015901 	streq	r5, [r1], -r1, lsl #18
    3fb4:	0f110101 	svceq	0x00110101
    3fb8:	f6350000 			; <UNDEFINED> instruction: 0xf6350000
    3fbc:	01000015 	tsteq	r0, r5, lsl r0
    3fc0:	1d170159 	ldfnes	f0, [r7, #-356]	; 0xfffffe9c
    3fc4:	35000001 	strcc	r0, [r0, #-1]
    3fc8:	00000079 	andeq	r0, r0, r9, ror r0
    3fcc:	23015901 	movwcs	r5, #6401	; 0x1901
    3fd0:	000000d9 	ldrdeq	r0, [r0], -r9
    3fd4:	01006a24 	tsteq	r0, r4, lsr #20
    3fd8:	ef07015d 	svc	0x0007015d
    3fdc:	00000000 	andeq	r0, r0, r0
    3fe0:	1557011f 	ldrbne	r0, [r7, #-287]	; 0xfffffee1
    3fe4:	53010000 	movwpl	r0, #4096	; 0x1000
    3fe8:	24010601 	strcs	r0, [r1], #-1537	; 0xfffff9ff
    3fec:	38000019 	stmdacc	r0, {r0, r3, r4}
    3ff0:	01000019 	tsteq	r0, r9, lsl r0
    3ff4:	000f3c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    3ff8:	00792000 	rsbseq	r2, r9, r0
    3ffc:	53010000 	movwpl	r0, #4096	; 0x1000
    4000:	00d91401 	sbcseq	r1, r9, r1, lsl #8
    4004:	11420000 	mrsne	r0, (UNDEF: 66)
    4008:	2c000000 	stccs	0, cr0, [r0], {-0}
    400c:	0014e101 	andseq	lr, r4, r1, lsl #2
    4010:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    4014:	011d0107 	tsteq	sp, r7, lsl #2
    4018:	1ccc0000 	stclne	0, cr0, [ip], {0}
    401c:	1d000000 	stcne	0, cr0, [r0, #-0]
    4020:	9c010000 	stcls	0, cr0, [r1], {-0}
    4024:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    4028:	00069a20 	andeq	r9, r6, r0, lsr #20
    402c:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    4030:	0002f11a 	andeq	pc, r2, sl, lsl r1	; <UNPREDICTABLE>
    4034:	00115500 	andseq	r5, r1, r0, lsl #10
    4038:	47542000 	ldrbmi	r2, [r4, -r0]
    403c:	2c010000 	stccs	0, cr0, [r1], {-0}
    4040:	011d2601 	tsteq	sp, r1, lsl #12
    4044:	11730000 	cmnne	r3, r0
    4048:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    404c:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    4050:	0004160e 	andeq	r1, r4, lr, lsl #12
    4054:	36500100 	ldrbcc	r0, [r0], -r0, lsl #2
    4058:	00000738 	andeq	r0, r0, r8, lsr r7
    405c:	01006a22 	tsteq	r0, r2, lsr #20
    4060:	160f013d 			; <UNDEFINED> instruction: 0x160f013d
    4064:	91000004 	tstls	r0, r4
    4068:	00000011 	andeq	r0, r0, r1, lsl r0
    406c:	39013700 	stmdbcc	r1, {r8, r9, sl, ip, sp}
    4070:	01000016 	tsteq	r0, r6, lsl r0
    4074:	010106af 	smlatbeq	r1, pc, r6, r0	; <UNPREDICTABLE>
    4078:	00000fe3 	andeq	r0, r0, r3, ror #31
    407c:	6e696d38 	mcrvs	13, 3, r6, cr9, cr8, {1}
    4080:	1aaf0100 	bne	febc4488 <_estack+0xdebbf488>
    4084:	000000d9 	ldrdeq	r0, [r0], -r9
    4088:	00124239 	andseq	r4, r2, r9, lsr r2
    408c:	27af0100 	strcs	r0, [pc, r0, lsl #2]!
    4090:	000000cd 	andeq	r0, r0, sp, asr #1
    4094:	0100693a 	tsteq	r0, sl, lsr r9
    4098:	04160ebd 	ldreq	r0, [r6], #-3773	; 0xfffff143
    409c:	643a0000 	ldrtvs	r0, [sl], #-0
    40a0:	07be0100 	ldreq	r0, [lr, r0, lsl #2]!
    40a4:	000000d9 	ldrdeq	r0, [r0], -r9
    40a8:	4b4f4d3b 	blmi	13d759c <__ccfg+0x13b75f4>
    40ac:	01090100 	mrseq	r0, (UNDEF: 25)
    40b0:	013c0001 	teqeq	ip, r1
    40b4:	00001671 	andeq	r1, r0, r1, ror r6
    40b8:	0106a701 	tsteq	r6, r1, lsl #14
    40bc:	00001850 	andeq	r1, r0, r0, asr r8
    40c0:	00001856 	andeq	r1, r0, r6, asr r8
    40c4:	10189c01 	andsne	r9, r8, r1, lsl #24
    40c8:	743d0000 	ldrtvc	r0, [sp], #-0
    40cc:	1fa70100 	svcne	0x00a70100
    40d0:	00000129 	andeq	r0, r0, r9, lsr #2
    40d4:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
    40d8:	0100763d 	tsteq	r0, sp, lsr r6
    40dc:	00d927a7 	sbcseq	r2, r9, r7, lsr #15
    40e0:	11cd0000 	bicne	r0, sp, r0
    40e4:	3c000000 	stccc	0, cr0, [r0], {-0}
    40e8:	0016c801 	andseq	ip, r6, r1, lsl #16
    40ec:	068f0100 	streq	r0, [pc], r0, lsl #2
    40f0:	00000001 	andeq	r0, r0, r1
    40f4:	00000000 	andeq	r0, r0, r0
    40f8:	4e9c0100 	fmlmie	f0, f4, f0
    40fc:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    4100:	01007475 	tsteq	r0, r5, ror r4
    4104:	01291d8f 	smlawbeq	r9, pc, sp, r1	; <UNPREDICTABLE>
    4108:	11e00000 	mvnne	r0, r0
    410c:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    4110:	06930100 	ldreq	r0, [r3], r0, lsl #2
    4114:	0000008d 	andeq	r0, r0, sp, lsl #1
    4118:	000011fe 	strdeq	r1, [r0], -lr
    411c:	f7013c00 			; <UNDEFINED> instruction: 0xf7013c00
    4120:	01000014 	tsteq	r0, r4, lsl r0
    4124:	2401067f 	strcs	r0, [r1], #-1663	; 0xfffff981
    4128:	50000018 	andpl	r0, r0, r8, lsl r0
    412c:	01000018 	tsteq	r0, r8, lsl r0
    4130:	0010849c 	mulseq	r0, ip, r4
    4134:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    4138:	1a7f0100 	bne	1fc4540 <__ccfg+0x1fa4598>
    413c:	00000129 	andeq	r0, r0, r9, lsr #2
    4140:	0000121c 	andeq	r1, r0, ip, lsl r2
    4144:	0100693e 	tsteq	r0, lr, lsr r9
    4148:	008d0683 	addeq	r0, sp, r3, lsl #13
    414c:	12450000 	subne	r0, r5, #0
    4150:	3f000000 	svccc	0x00000000
    4154:	0015fc01 	andseq	pc, r5, r1, lsl #24
    4158:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    415c:	00181401 	andseq	r1, r8, r1, lsl #8
    4160:	00182400 	andseq	r2, r8, r0, lsl #8
    4164:	409c0100 	addsmi	r0, ip, r0, lsl #2
    4168:	0000157d 	andeq	r1, r0, sp, ror r5
    416c:	01145f01 	tsteq	r4, r1, lsl #30
    4170:	00000416 	andeq	r0, r0, r6, lsl r4
    4174:	0010c101 	andseq	ip, r0, r1, lsl #2
    4178:	69703800 	ldmdbvs	r0!, {fp, ip, sp}^
    417c:	5f010064 	svcpl	0x00010064
    4180:	00011d22 	andeq	r1, r1, r2, lsr #26
    4184:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    4188:	16176101 	ldrne	r6, [r7], -r1, lsl #2
    418c:	00000004 	andeq	r0, r0, r4
    4190:	00150241 	andseq	r0, r5, r1, asr #4
    4194:	029e0200 	addseq	r0, lr, #0, 4
    4198:	10e20101 	rscne	r0, r2, r1, lsl #2
    419c:	e2030000 	and	r0, r3, #0
    41a0:	35000010 	strcc	r0, [r0, #-16]
    41a4:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
    41a8:	13029e02 	movwne	r9, #11778	; 0x2e02
    41ac:	00000073 	andeq	r0, r0, r3, ror r0
    41b0:	02010200 	andeq	r0, r1, #0, 4
    41b4:	00000ca7 	andeq	r0, r0, r7, lsr #25
    41b8:	00109842 	andseq	r9, r0, r2, asr #16
	...
    41c4:	2e9c0100 	fmlcse	f0, f4, f0
    41c8:	43000011 	movwmi	r0, #17
    41cc:	000010aa 	andeq	r1, r0, sl, lsr #1
    41d0:	00001263 	andeq	r1, r0, r3, ror #4
    41d4:	0010b644 	andseq	fp, r0, r4, asr #12
    41d8:	00128c00 	andseq	r8, r2, r0, lsl #24
    41dc:	10984500 	addsne	r4, r8, r0, lsl #10
	...
    41e8:	5f010000 	svcpl	0x00010000
    41ec:	10aa4314 	adcne	r4, sl, r4, lsl r3
    41f0:	12aa0000 	adcne	r0, sl, #0
    41f4:	b6460000 	strblt	r0, [r6], -r0
    41f8:	00000010 	andeq	r0, r0, r0, lsl r0
    41fc:	0f9e4200 	svceq	0x009e4200
    4200:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    4204:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    4208:	9c010000 	stcls	0, cr0, [r1], {-0}
    420c:	0000119a 	muleq	r0, sl, r1
    4210:	000fad43 	andeq	sl, pc, r3, asr #26
    4214:	0012bd00 	andseq	fp, r2, r0, lsl #26
    4218:	0fb94300 	svceq	0x00b94300
    421c:	12d00000 	sbcsne	r0, r0, #0
    4220:	c5460000 	strbgt	r0, [r6, #-0]
    4224:	4600000f 	strmi	r0, [r0], -pc
    4228:	00000fcf 	andeq	r0, r0, pc, asr #31
    422c:	000f9e47 	andeq	r9, pc, r7, asr #28
    4230:	00186600 	andseq	r6, r8, r0, lsl #12
    4234:	00072000 	andeq	r2, r7, r0
    4238:	06af0100 	strteq	r0, [pc], r0, lsl #2
    423c:	000fb929 	andeq	fp, pc, r9, lsr #18
    4240:	0fad4300 	svceq	0x00ad4300
    4244:	12e30000 	rscne	r0, r3, #0
    4248:	20360000 	eorscs	r0, r6, r0
    424c:	44000007 	strmi	r0, [r0], #-7
    4250:	00000fc5 	andeq	r0, r0, r5, asr #31
    4254:	0000130c 	andeq	r1, r0, ip, lsl #6
    4258:	000fcf46 	andeq	ip, pc, r6, asr #30
    425c:	0fd94800 	svceq	0x00d94800
    4260:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    4264:	00000000 	andeq	r0, r0, r0
    4268:	0edb4200 	cdpeq	2, 13, cr4, cr11, cr0, {0}
    426c:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    4270:	196c0000 	stmdbne	ip!, {}^	; <UNPREDICTABLE>
    4274:	9c010000 	stcls	0, cr0, [r1], {-0}
    4278:	000011ee 	andeq	r1, r0, lr, ror #3
    427c:	000eeb43 	andeq	lr, lr, r3, asr #22
    4280:	00132a00 	andseq	r2, r3, r0, lsl #20
    4284:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    4288:	13480000 	movtne	r0, #32768	; 0x8000
    428c:	05460000 	strbeq	r0, [r6, #-0]
    4290:	4900000f 	stmdbmi	r0, {r0, r1, r2, r3}
    4294:	00000edb 	ldrdeq	r0, [r0], -fp
    4298:	0000194a 	andeq	r1, r0, sl, asr #18
    429c:	00001952 	andeq	r1, r0, r2, asr r9
    42a0:	06015901 	streq	r5, [r1], -r1, lsl #18
    42a4:	000eeb43 	andeq	lr, lr, r3, asr #22
    42a8:	00136600 	andseq	r6, r3, r0, lsl #12
    42ac:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    42b0:	13790000 	cmnne	r9, #0
    42b4:	05460000 	strbeq	r0, [r6, #-0]
    42b8:	0000000f 	andeq	r0, r0, pc
    42bc:	08804a00 	stmeq	r0, {r9, fp, lr}
    42c0:	1b8c0000 	blne	fe3042c8 <_estack+0xde2ff2c8>
    42c4:	1bd40000 	blne	ff5042cc <_estack+0xdf4ff2cc>
    42c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    42cc:	00089043 	andeq	r9, r8, r3, asr #32
    42d0:	00138c00 	andseq	r8, r3, r0, lsl #24
    42d4:	08804900 	stmeq	r0, {r8, fp, lr}
    42d8:	1b980000 	blne	fe6042e0 <_estack+0xde5ff2e0>
    42dc:	1ba00000 	blne	fe8042e4 <_estack+0xde7ff2e4>
    42e0:	7c010000 	stcvc	0, cr0, [r1], {-0}
    42e4:	90430603 	subls	r0, r3, r3, lsl #12
    42e8:	aa000008 	bge	4310 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x98>
    42ec:	00000013 	andeq	r0, r0, r3, lsl r0
    42f0:	13330000 	teqne	r3, #0
    42f4:	00030000 	andeq	r0, r3, r0
    42f8:	00000e61 	andeq	r0, r0, r1, ror #28
    42fc:	00ac0104 	adceq	r0, ip, r4, lsl #2
    4300:	420c0000 	andmi	r0, ip, #0
    4304:	0a000017 	beq	4368 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>
    4308:	2800000e 	stmdacs	r0, {r1, r2, r3}
    430c:	00000009 	andeq	r0, r0, r9
    4310:	c3000000 	movwgt	r0, #0
    4314:	02000031 	andeq	r0, r0, #49	; 0x31
    4318:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    431c:	02020000 	andeq	r0, r2, #0
    4320:	000a6b05 	andeq	r6, sl, r5, lsl #22
    4324:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4328:	000007fd 	strdeq	r0, [r0], -sp
    432c:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    4330:	03000007 	movweq	r0, #7
    4334:	00002a1c 	andeq	r2, r0, ip, lsl sl
    4338:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    433c:	02000000 	andeq	r0, r0, #0
    4340:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    4344:	12030000 	andne	r0, r3, #0
    4348:	0200002e 	andeq	r0, r0, #46	; 0x2e
    434c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    4350:	02020000 	andeq	r0, r2, #0
    4354:	000d6607 	andeq	r6, sp, r7, lsl #12
    4358:	29b40300 	ldmibcs	r4!, {r8, r9}
    435c:	34020000 	strcc	r0, [r2], #-0
    4360:	00007319 	andeq	r7, r0, r9, lsl r3
    4364:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4368:	00000426 	andeq	r0, r0, r6, lsr #8
    436c:	21070802 	tstcs	r7, r2, lsl #16
    4370:	04000004 	streq	r0, [r0], #-4
    4374:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4378:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    437c:	00042b07 	andeq	r2, r4, r7, lsl #22
    4380:	051e0300 	ldreq	r0, [lr, #-768]	; 0xfffffd00
    4384:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4388:	00009b1b 	andeq	r9, r0, fp, lsl fp
    438c:	0b900500 	bleq	fe405794 <_estack+0xde400794>
    4390:	0d040000 	stceq	0, cr0, [r4, #-0]
    4394:	0000b300 	andeq	fp, r0, r0, lsl #6
    4398:	086d0600 	stmdaeq	sp!, {r9, sl}^
    439c:	00b30000 	adcseq	r0, r3, r0
    43a0:	01000000 	mrseq	r0, (UNDEF: 0)
    43a4:	03040700 	movweq	r0, #18176	; 0x4700
    43a8:	00000b92 	muleq	r0, r2, fp
    43ac:	8f186303 	svchi	0x00186303
    43b0:	03000000 	movweq	r0, #0
    43b4:	00001328 	andeq	r1, r0, r8, lsr #6
    43b8:	41122604 	tstmi	r2, r4, lsl #12
    43bc:	03000000 	movweq	r0, #0
    43c0:	000028fb 	strdeq	r2, [r0], -fp
    43c4:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    43c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    43cc:	000000cd 	andeq	r0, r0, sp, asr #1
    43d0:	0000cd09 	andeq	ip, r0, r9, lsl #26
    43d4:	1dc20300 	stclne	3, cr0, [r2]
    43d8:	2b040000 	blcs	1043e0 <__ccfg+0xe4438>
    43dc:	00004112 	andeq	r4, r0, r2, lsl r1
    43e0:	00e30900 	rsceq	r0, r3, r0, lsl #18
    43e4:	e3080000 	movw	r0, #32768	; 0x8000
    43e8:	03000000 	movweq	r0, #0
    43ec:	0000294d 	andeq	r2, r0, sp, asr #18
    43f0:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    43f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    43f8:	000000f9 	strdeq	r0, [r0], -r9
    43fc:	00064603 	andeq	r4, r6, r3, lsl #12
    4400:	122d0400 	eorne	r0, sp, #0, 8
    4404:	00000067 	andeq	r0, r0, r7, rrx
    4408:	000bb403 	andeq	fp, fp, r3, lsl #8
    440c:	102e0400 	eorne	r0, lr, r0, lsl #8
    4410:	00000122 	andeq	r0, r0, r2, lsr #2
    4414:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    4418:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    441c:	b6093204 	strlt	r3, [r9], -r4, lsl #4
    4420:	0c000001 	stceq	0, cr0, [r0], {1}
    4424:	00000034 	andeq	r0, r0, r4, lsr r0
    4428:	e3073404 	movw	r3, #29700	; 0x7404
    442c:	01000000 	mrseq	r0, (UNDEF: 0)
    4430:	0c000701 	stceq	7, cr0, [r0], {1}
    4434:	0000064c 	andeq	r0, r0, ip, asr #12
    4438:	e3033504 	movw	r3, #13572	; 0x3504
    443c:	01000000 	mrseq	r0, (UNDEF: 0)
    4440:	0c000601 	stceq	6, cr0, [r0], {1}
    4444:	000002e7 	andeq	r0, r0, r7, ror #5
    4448:	e3033604 	movw	r3, #13828	; 0x3604
    444c:	01000000 	mrseq	r0, (UNDEF: 0)
    4450:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    4454:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    4458:	e3033704 	movw	r3, #14084	; 0x3704
    445c:	01000000 	mrseq	r0, (UNDEF: 0)
    4460:	0c000401 	cfstrseq	mvf0, [r0], {1}
    4464:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    4468:	e3033804 	movw	r3, #14340	; 0x3804
    446c:	01000000 	mrseq	r0, (UNDEF: 0)
    4470:	0d000004 	stceq	0, cr0, [r0, #-16]
    4474:	0000065b 	andeq	r0, r0, fp, asr r6
    4478:	e3073a04 	movw	r3, #31236	; 0x7a04
    447c:	01000000 	mrseq	r0, (UNDEF: 0)
    4480:	0008fb0d 	andeq	pc, r8, sp, lsl #22
    4484:	033c0400 	teqeq	ip, #0, 8
    4488:	000000e3 	andeq	r0, r0, r3, ror #1
    448c:	0f3a0d02 	svceq	0x003a0d02
    4490:	3d040000 	stccc	0, cr0, [r4, #-0]
    4494:	0000e303 	andeq	lr, r0, r3, lsl #6
    4498:	130d0300 	movwne	r0, #54016	; 0xd300
    449c:	04000009 	streq	r0, [r0], #-9
    44a0:	00f9083f 	rscseq	r0, r9, pc, lsr r8
    44a4:	00040000 	andeq	r0, r4, r0
    44a8:	00031d03 	andeq	r1, r3, r3, lsl #26
    44ac:	03410400 	movteq	r0, #5120	; 0x1400
    44b0:	00000128 	andeq	r0, r0, r8, lsr #2
    44b4:	0001b609 	andeq	fp, r1, r9, lsl #12
    44b8:	06be0e00 	ldrteq	r0, [lr], r0, lsl #28
    44bc:	43040000 	movwmi	r0, #16384	; 0x4000
    44c0:	0001c21a 	andeq	ip, r1, sl, lsl r2
    44c4:	0e010100 	adfeqs	f0, f1, f0
    44c8:	000001a0 	andeq	r0, r0, r0, lsr #3
    44cc:	e30e4504 	movw	r4, #58628	; 0xe504
    44d0:	01000001 	tsteq	r0, r1
    44d4:	e9040a01 	stmdb	r4, {r0, r9, fp}
    44d8:	02000001 	andeq	r0, r0, #1
    44dc:	0c640801 	stcleq	8, cr0, [r4], #-4
    44e0:	e9080000 	stmdb	r8, {}	; <UNPREDICTABLE>
    44e4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    44e8:	00000326 	andeq	r0, r0, r6, lsr #6
    44ec:	e31e4504 	tst	lr, #4, 10	; 0x1000000
    44f0:	01000001 	tsteq	r0, r1
    44f4:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    44f8:	0234098f 	eorseq	r0, r4, #2342912	; 0x23c000
    44fc:	d80d0000 	stmdale	sp, {}	; <UNPREDICTABLE>
    4500:	0500000c 	streq	r0, [r0, #-12]
    4504:	00670b90 	mlseq	r7, r0, fp, r0
    4508:	0d000000 	stceq	0, cr0, [r0, #-0]
    450c:	00001075 	andeq	r1, r0, r5, ror r0
    4510:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    4514:	04000000 	streq	r0, [r0], #-0
    4518:	0001c50d 	andeq	ip, r1, sp, lsl #10
    451c:	10920500 	addsne	r0, r2, r0, lsl #10
    4520:	000000ef 	andeq	r0, r0, pc, ror #1
    4524:	cc030006 	stcgt	0, cr0, [r3], {6}
    4528:	0500000c 	streq	r0, [r0, #-12]
    452c:	02030393 	andeq	r0, r3, #1275068418	; 0x4c000002
    4530:	340f0000 	strcc	r0, [pc], #-0	; 4538 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>
    4534:	4b000002 	blmi	4544 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>
    4538:	10000002 	andne	r0, r0, r2
    453c:	093d0e00 	ldmdbeq	sp!, {r9, sl, fp}
    4540:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    4544:	0002400f 	andeq	r4, r2, pc
    4548:	0a010100 	beq	44950 <__ccfg+0x249a8>
    454c:	0000f404 	andeq	pc, r0, r4, lsl #8
    4550:	06010b00 	streq	r0, [r1], -r0, lsl #22
    4554:	02890991 	addeq	r0, r9, #2375680	; 0x244000
    4558:	1a0c0000 	bne	304560 <__ccfg+0x2e45b8>
    455c:	06000009 	streq	r0, [r0], -r9
    4560:	00e30793 	smlaleq	r0, r3, r3, r7
    4564:	07010000 	streq	r0, [r1, -r0]
    4568:	cc0c0001 	stcgt	0, cr0, [ip], {1}
    456c:	06000005 	streq	r0, [r0], -r5
    4570:	00e30394 	smlaleq	r0, r3, r4, r3
    4574:	01010000 	mrseq	r0, (UNDEF: 1)
    4578:	03000000 	movweq	r0, #0
    457c:	00000aab 	andeq	r0, r0, fp, lsr #21
    4580:	5f039606 	svcpl	0x00039606
    4584:	08000002 	stmdaeq	r0, {r1}
    4588:	00000289 	andeq	r0, r0, r9, lsl #5
    458c:	0002950f 	andeq	r9, r2, pc, lsl #10
    4590:	0002a500 	andeq	sl, r2, r0, lsl #10
    4594:	08001000 	stmdaeq	r0, {ip}
    4598:	0000029a 	muleq	r0, sl, r2
    459c:	0003aa0e 	andeq	sl, r3, lr, lsl #20
    45a0:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    45a4:	000002a5 	andeq	r0, r0, r5, lsr #5
    45a8:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    45ac:	c3000000 	movwgt	r0, #0
    45b0:	10000002 	andne	r0, r0, r2
    45b4:	02b80800 	adcseq	r0, r8, #0, 16
    45b8:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
    45bc:	07000006 	streq	r0, [r0, -r6]
    45c0:	02c31306 	sbceq	r1, r3, #402653184	; 0x18000000
    45c4:	01010000 	mrseq	r0, (UNDEF: 1)
    45c8:	0008dd0e 	andeq	sp, r8, lr, lsl #26
    45cc:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    45d0:	000000f9 	strdeq	r0, [r0], -r9
    45d4:	72110101 	andsvc	r0, r1, #1073741824	; 0x40000000
    45d8:	0800000c 	stmdaeq	r0, {r2, r3}
    45dc:	f110016e 			; <UNDEFINED> instruction: 0xf110016e
    45e0:	0a000002 	beq	45f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8c>
    45e4:	0002f704 	andeq	pc, r2, r4, lsl #14
    45e8:	03011200 	movweq	r1, #4608	; 0x1200
    45ec:	13000003 	movwne	r0, #3
    45f0:	000000cd 	andeq	r0, r0, sp, asr #1
    45f4:	01f00f00 	mvnseq	r0, r0, lsl #30
    45f8:	030e0000 	movweq	r0, #57344	; 0xe000
    45fc:	00100000 	andseq	r0, r0, r0
    4600:	00030308 	andeq	r0, r3, r8, lsl #6
    4604:	09e61400 	stmibeq	r6!, {sl, ip}^
    4608:	7f080000 	svcvc	0x00080000
    460c:	030e1601 	movweq	r1, #58881	; 0xe601
    4610:	01010000 	mrseq	r0, (UNDEF: 1)
    4614:	00039614 	andeq	r9, r3, r4, lsl r6
    4618:	01820800 	orreq	r0, r2, r0, lsl #16
    461c:	00010514 	andeq	r0, r1, r4, lsl r5
    4620:	0b010100 	bleq	44a28 <__ccfg+0x24a80>
    4624:	09080904 	stmdbeq	r8, {r2, r8, fp}
    4628:	00000355 	andeq	r0, r0, r5, asr r3
    462c:	0001cb0d 	andeq	ip, r1, sp, lsl #22
    4630:	070f0900 	streq	r0, [pc, -r0, lsl #18]
    4634:	000000cd 	andeq	r0, r0, sp, asr #1
    4638:	0ca20d00 	stceq	13, cr0, [r2]
    463c:	10090000 	andne	r0, r9, r0
    4640:	0000cd03 	andeq	ip, r0, r3, lsl #26
    4644:	03000200 	movweq	r0, #512	; 0x200
    4648:	00000d79 	andeq	r0, r0, r9, ror sp
    464c:	31031109 	tstcc	r3, r9, lsl #2
    4650:	0b000003 	bleq	4664 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    4654:	09160920 	ldmdbeq	r6, {r5, r8, fp}
    4658:	000003d3 	ldrdeq	r0, [r0], -r3
    465c:	0004ac0d 	andeq	sl, r4, sp, lsl #24
    4660:	08170900 	ldmdaeq	r7, {r8, fp}
    4664:	000003ed 	andeq	r0, r0, sp, ror #7
    4668:	090b0d00 	stmdbeq	fp, {r8, sl, fp}
    466c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    4670:	00040808 	andeq	r0, r4, r8, lsl #16
    4674:	c60d0400 	strgt	r0, [sp], -r0, lsl #8
    4678:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    467c:	043e0819 	ldrteq	r0, [lr], #-2073	; 0xfffff7e7
    4680:	0d080000 	stceq	0, cr0, [r8, #-0]
    4684:	00000c9a 	muleq	r0, sl, ip
    4688:	59081a09 	stmdbpl	r8, {r0, r3, r9, fp, ip}
    468c:	0c000004 	stceq	0, cr0, [r0], {4}
    4690:	0009620d 	andeq	r6, r9, sp, lsl #4
    4694:	081b0900 	ldmdaeq	fp, {r8, fp}
    4698:	0000046f 	andeq	r0, r0, pc, ror #8
    469c:	0a630d10 	beq	18c7ae4 <__ccfg+0x18a7b3c>
    46a0:	1c090000 	stcne	0, cr0, [r9], {-0}
    46a4:	00046f08 	andeq	r6, r4, r8, lsl #30
    46a8:	ae0d1400 	cfcpysge	mvf1, mvf13
    46ac:	09000001 	stmdbeq	r0, {r0}
    46b0:	046f081d 	strbteq	r0, [pc], #-2077	; 46b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x154>
    46b4:	0d180000 	ldceq	0, cr0, [r8, #-0]
    46b8:	00000314 	andeq	r0, r0, r4, lsl r3
    46bc:	81061e09 	tsthi	r6, r9, lsl #28
    46c0:	1c000000 	stcne	0, cr0, [r0], {-0}
    46c4:	81011500 	tsthi	r1, r0, lsl #10
    46c8:	ed000000 	stc	0, cr0, [r0, #-0]
    46cc:	13000003 	movwne	r0, #3
    46d0:	00000081 	andeq	r0, r0, r1, lsl #1
    46d4:	00008113 	andeq	r8, r0, r3, lsl r1
    46d8:	00b51300 	adcseq	r1, r5, r0, lsl #6
    46dc:	0a000000 	beq	46e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x180>
    46e0:	0003d304 	andeq	sp, r3, r4, lsl #6
    46e4:	81011500 	tsthi	r1, r0, lsl #10
    46e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    46ec:	13000004 	movwne	r0, #4
    46f0:	00000081 	andeq	r0, r0, r1, lsl #1
    46f4:	00008113 	andeq	r8, r0, r3, lsl r1
    46f8:	040a0000 	streq	r0, [sl], #-0
    46fc:	000003f3 	strdeq	r0, [r0], -r3
    4700:	00810115 	addeq	r0, r1, r5, lsl r1
    4704:	04320000 	ldrteq	r0, [r2], #-0
    4708:	81130000 	tsthi	r3, r0
    470c:	13000000 	movwne	r0, #0
    4710:	00000116 	andeq	r0, r0, r6, lsl r1
    4714:	00008113 	andeq	r8, r0, r3, lsl r1
    4718:	04321300 	ldrteq	r1, [r2], #-768	; 0xfffffd00
    471c:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    4720:	00000004 	andeq	r0, r0, r4
    4724:	0081040a 	addeq	r0, r1, sl, lsl #8
    4728:	040a0000 	streq	r0, [sl], #-0
    472c:	00000355 	andeq	r0, r0, r5, asr r3
    4730:	040e040a 	streq	r0, [lr], #-1034	; 0xfffffbf6
    4734:	01150000 	tsteq	r5, r0
    4738:	00000081 	andeq	r0, r0, r1, lsl #1
    473c:	00000459 	andeq	r0, r0, r9, asr r4
    4740:	00011613 	andeq	r1, r1, r3, lsl r6
    4744:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    4748:	0a000000 	beq	4750 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>
    474c:	00044404 	andeq	r4, r4, r4, lsl #8
    4750:	81011500 	tsthi	r1, r0, lsl #10
    4754:	6f000000 	svcvs	0x00000000
    4758:	13000004 	movwne	r0, #4
    475c:	00000116 	andeq	r0, r0, r6, lsl r1
    4760:	5f040a00 	svcpl	0x00040a00
    4764:	03000004 	movweq	r0, #4
    4768:	00000d35 	andeq	r0, r0, r5, lsr sp
    476c:	61031f09 	tstvs	r3, r9, lsl #30
    4770:	08000003 	stmdaeq	r0, {r0, r1}
    4774:	00000475 	andeq	r0, r0, r5, ror r4
    4778:	0017cb16 	andseq	ip, r7, r6, lsl fp
    477c:	24090800 	strcs	r0, [r9], #-2048	; 0xfffff800
    4780:	0004ae08 	andeq	sl, r4, r8, lsl #28
    4784:	0ec50d00 	cdpeq	13, 12, cr0, cr5, cr0, {0}
    4788:	25090000 	strcs	r0, [r9, #-0]
    478c:	0004ae18 	andeq	sl, r4, r8, lsl lr
    4790:	ed0d0000 	stc	0, cr0, [sp, #-0]
    4794:	09000016 	stmdbeq	r0, {r1, r2, r4}
    4798:	04ae0626 	strteq	r0, [lr], #1574	; 0x626
    479c:	00040000 	andeq	r0, r4, r0
    47a0:	0486040a 	streq	r0, [r6], #1034	; 0x40a
    47a4:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    47a8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    47ac:	04861e29 	streq	r1, [r6], #3625	; 0xe29
    47b0:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    47b4:	09000018 	stmdbeq	r0, {r3, r4}
    47b8:	04861e2a 	streq	r1, [r6], #3626	; 0xe2a
    47bc:	020b0000 	andeq	r0, fp, #0
    47c0:	36023f09 	strcc	r3, [r2], -r9, lsl #30
    47c4:	0c000005 	stceq	0, cr0, [r0], {5}
    47c8:	00001880 	andeq	r1, r0, r0, lsl #17
    47cc:	cd094009 	stcgt	0, cr4, [r9, #-36]	; 0xffffffdc
    47d0:	02000000 	andeq	r0, r0, #0
    47d4:	0c000f01 	stceq	15, cr0, [r0], {1}
    47d8:	00001930 	andeq	r1, r0, r0, lsr r9
    47dc:	cd044109 	stfgts	f4, [r4, #-36]	; 0xffffffdc
    47e0:	02000000 	andeq	r0, r0, #0
    47e4:	0c000e01 	stceq	14, cr0, [r0], {1}
    47e8:	000017fb 	strdeq	r1, [r0], -fp
    47ec:	cd044209 	sfmgt	f4, 4, [r4, #-36]	; 0xffffffdc
    47f0:	02000000 	andeq	r0, r0, #0
    47f4:	0c000d01 	stceq	13, cr0, [r0], {1}
    47f8:	00001890 	muleq	r0, r0, r8
    47fc:	cd044309 	stcgt	3, cr4, [r4, #-36]	; 0xffffffdc
    4800:	02000000 	andeq	r0, r0, #0
    4804:	0c000607 	stceq	6, cr0, [r0], {7}
    4808:	000018ec 	andeq	r1, r0, ip, ror #17
    480c:	cd044409 	cfstrsgt	mvf4, [r4, #-36]	; 0xffffffdc
    4810:	02000000 	andeq	r0, r0, #0
    4814:	0c000303 	stceq	3, cr0, [r0], {3}
    4818:	00001872 	andeq	r1, r0, r2, ror r8
    481c:	cd044509 	cfstr32gt	mvfx4, [r4, #-36]	; 0xffffffdc
    4820:	02000000 	andeq	r0, r0, #0
    4824:	00000003 	andeq	r0, r0, r3
    4828:	3d090217 	sfmcc	f0, 4, [r9, #-92]	; 0xffffffa4
    482c:	00055609 	andeq	r5, r5, r9, lsl #12
    4830:	06031800 	streq	r1, [r3], -r0, lsl #16
    4834:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    4838:	0000cd07 	andeq	ip, r0, r7, lsl #26
    483c:	00621900 	rsbeq	r1, r2, r0, lsl #18
    4840:	cc044609 	stcgt	6, cr4, [r4], {9}
    4844:	00000004 	andeq	r0, r0, r4
    4848:	0016f203 	andseq	pc, r6, r3, lsl #4
    484c:	03470900 	movteq	r0, #30976	; 0x7900
    4850:	00000536 	andeq	r0, r0, r6, lsr r5
    4854:	50090817 	andpl	r0, r9, r7, lsl r8
    4858:	00058405 	andeq	r8, r5, r5, lsl #8
    485c:	19121800 	ldmdbne	r2, {fp, ip}
    4860:	51090000 	mrspl	r0, (UNDEF: 9)
    4864:	0004b410 	andeq	fp, r4, r0, lsl r4
    4868:	183c1800 	ldmdane	ip!, {fp, ip}
    486c:	52090000 	andpl	r0, r9, #0
    4870:	0003550b 	andeq	r5, r3, fp, lsl #10
    4874:	21160000 	tstcs	r6, r0
    4878:	0c000019 	stceq	0, cr0, [r0], {25}
    487c:	b7084c09 	strlt	r4, [r8, -r9, lsl #24]
    4880:	1a000005 	bne	489c <NOROM_ChipInfo_GetHwRevision+0x54>
    4884:	58090075 	stmdapl	r9, {r0, r2, r4, r5, r6}
    4888:	00056207 	andeq	r6, r5, r7, lsl #4
    488c:	f30d0000 	vhadd.u8	d0, d13, d0
    4890:	09000018 	stmdbeq	r0, {r3, r4}
    4894:	00cd0763 	sbceq	r0, sp, r3, ror #14
    4898:	0d080000 	stceq	0, cr0, [r8, #-0]
    489c:	000018d3 	ldrdeq	r1, [r0], -r3
    48a0:	56106809 	ldrpl	r6, [r0], -r9, lsl #16
    48a4:	0a000005 	beq	48c0 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0xc>
    48a8:	17e70300 	strbne	r0, [r7, r0, lsl #6]!
    48ac:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    48b0:	0005841f 	andeq	r8, r5, pc, lsl r4
    48b4:	090c0b00 	stmdbeq	ip, {r8, r9, fp}
    48b8:	05e7097b 	strbeq	r0, [r7, #2427]!	; 0x97b
    48bc:	300d0000 	andcc	r0, sp, r0
    48c0:	09000018 	stmdbeq	r0, {r3, r4}
    48c4:	04c0117f 	strbeq	r1, [r0], #383	; 0x17f
    48c8:	0d000000 	stceq	0, cr0, [r0, #-0]
    48cc:	000018bf 			; <UNDEFINED> instruction: 0x000018bf
    48d0:	56118309 	ldrpl	r8, [r1], -r9, lsl #6
    48d4:	08000005 	stmdaeq	r0, {r0, r2}
    48d8:	18620300 	stmdane	r2!, {r8, r9}^
    48dc:	92090000 	andls	r0, r9, #0
    48e0:	0005c303 	andeq	ip, r5, r3, lsl #6
    48e4:	036e1400 	cmneq	lr, #0, 8
    48e8:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    48ec:	00f90e02 	rscseq	r0, r9, r2, lsl #28
    48f0:	01010000 	mrseq	r0, (UNDEF: 1)
    48f4:	0308081b 	movweq	r0, #34843	; 0x881b
    48f8:	06290903 	strteq	r0, [r9], -r3, lsl #18
    48fc:	a11c0000 	tstge	ip, r0
    4900:	0800003c 	stmdaeq	r0, {r2, r3, r4, r5}
    4904:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    4908:	00000000 	andeq	r0, r0, r0
    490c:	000fcd1c 	andeq	ip, pc, ip, lsl sp	; <UNPREDICTABLE>
    4910:	03080800 	movweq	r0, #34816	; 0x8800
    4914:	00010a08 	andeq	r0, r1, r8, lsl #20
    4918:	11000400 	tstne	r0, r0, lsl #8
    491c:	00000a09 	andeq	r0, r0, r9, lsl #20
    4920:	03030908 	movweq	r0, #14600	; 0x3908
    4924:	00000602 	andeq	r0, r0, r2, lsl #12
    4928:	0000291d 	andeq	r2, r0, sp, lsl r9
    492c:	0b083000 	bleq	210934 <__ccfg+0x1f098c>
    4930:	06990803 	ldreq	r0, [r9], r3, lsl #16
    4934:	241c0000 	ldrcs	r0, [ip], #-0
    4938:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    493c:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    4940:	00000000 	andeq	r0, r0, r0
    4944:	000be71c 	andeq	lr, fp, ip, lsl r7
    4948:	03150800 	tsteq	r5, #0, 16
    494c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    4950:	8e1c0200 	cdphi	2, 1, cr0, cr12, cr0, {0}
    4954:	0800004c 	stmdaeq	r0, {r2, r3, r6}
    4958:	e40b0316 	str	r0, [fp], #-790	; 0xfffffcea
    495c:	04000002 	streq	r0, [r0], #-2
    4960:	0047541c 	subeq	r5, r7, ip, lsl r4
    4964:	03170800 	tsteq	r7, #0, 16
    4968:	00010a09 	andeq	r0, r1, r9, lsl #20
    496c:	0f1c0800 	svceq	0x001c0800
    4970:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4974:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    4978:	0c000006 	stceq	0, cr0, [r0], {6}
    497c:	00095d1c 	andeq	r5, r9, ip, lsl sp
    4980:	03190800 	tsteq	r9, #0, 16
    4984:	0006a915 	andeq	sl, r6, r5, lsl r9
    4988:	0f002c00 	svceq	0x00002c00
    498c:	00000629 	andeq	r0, r0, r9, lsr #12
    4990:	000006a9 	andeq	r0, r0, r9, lsr #13
    4994:	0000881e 	andeq	r8, r0, lr, lsl r8
    4998:	0a000300 	beq	55a0 <patchGenfskRfe+0x2e4>
    499c:	00063604 	andeq	r3, r6, r4, lsl #12
    49a0:	0bdc1100 	bleq	ff708da8 <_estack+0xdf703da8>
    49a4:	1c080000 	stcne	0, cr0, [r8], {-0}
    49a8:	06361b03 	ldrteq	r1, [r6], -r3, lsl #22
    49ac:	bc140000 	ldclt	0, cr0, [r4], {-0}
    49b0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    49b4:	cb14031e 	blgt	505634 <__ccfg+0x4e568c>
    49b8:	01000006 	tsteq	r0, r6
    49bc:	af040a01 	svcge	0x00040a01
    49c0:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    49c4:	0000070f 	andeq	r0, r0, pc, lsl #14
    49c8:	cd131d0a 	ldcgt	13, cr1, [r3, #-40]	; 0xffffffd8
    49cc:	01000000 	mrseq	r0, (UNDEF: 0)
    49d0:	02ee0e01 	rsceq	r0, lr, #1, 28
    49d4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    49d8:	0000de1a 	andeq	sp, r0, sl, lsl lr
    49dc:	0e010100 	adfeqs	f0, f1, f0
    49e0:	00000c69 	andeq	r0, r0, r9, ror #24
    49e4:	de241e0a 	cdple	14, 2, cr1, cr4, cr10, {0}
    49e8:	01000000 	mrseq	r0, (UNDEF: 0)
    49ec:	0c870e01 	stceq	14, cr0, [r7], {1}
    49f0:	220a0000 	andcs	r0, sl, #0
    49f4:	0006cb14 	andeq	ip, r6, r4, lsl fp
    49f8:	03010100 	movweq	r0, #4352	; 0x1100
    49fc:	00001738 	andeq	r1, r0, r8, lsr r7
    4a00:	150f0e0b 	strne	r0, [pc, #-3595]	; 3bfd <NOROM_RFCRfTrimRead+0x8d>
    4a04:	0a000007 	beq	4a28 <__aeabi_lmul+0x34>
    4a08:	00071b04 	andeq	r1, r7, r4, lsl #22
    4a0c:	81011500 	tsthi	r1, r0, lsl #10
    4a10:	30000000 	andcc	r0, r0, r0
    4a14:	13000007 	movwne	r0, #7
    4a18:	00000081 	andeq	r0, r0, r1, lsl #1
    4a1c:	00011613 	andeq	r1, r1, r3, lsl r6
    4a20:	400f0000 	andmi	r0, pc, r0
    4a24:	40000007 	andmi	r0, r0, r7
    4a28:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    4a2c:	00000088 	andeq	r0, r0, r8, lsl #1
    4a30:	040a0007 	streq	r0, [sl], #-7
    4a34:	000005e7 	andeq	r0, r0, r7, ror #11
    4a38:	0018081f 	andseq	r0, r8, pc, lsl r8
    4a3c:	150d0c00 	strne	r0, [sp, #-3072]	; 0xfffff400
    4a40:	00000730 	andeq	r0, r0, r0, lsr r7
    4a44:	05840305 	streq	r0, [r4, #773]	; 0x305
    4a48:	090f2000 	stmdbeq	pc, {sp}	; <UNPREDICTABLE>
    4a4c:	68000007 	stmdavs	r0, {r0, r1, r2}
    4a50:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    4a54:	00000088 	andeq	r0, r0, r8, lsl #1
    4a58:	771f0002 	ldrvc	r0, [pc, -r2]
    4a5c:	0c000018 	stceq	0, cr0, [r0], {24}
    4a60:	07581413 	smmlaeq	r8, r3, r4, r1
    4a64:	03050000 	movweq	r0, #20480	; 0x5000
    4a68:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    4a6c:	00078a0f 	andeq	r8, r7, pc, lsl #20
    4a70:	00078a00 	andeq	r8, r7, r0, lsl #20
    4a74:	00881e00 	addeq	r1, r8, r0, lsl #28
    4a78:	00020000 	andeq	r0, r2, r0
    4a7c:	04c0040a 	strbeq	r0, [r0], #1034	; 0x40a
    4a80:	c31f0000 	tstgt	pc, #0
    4a84:	0c000017 	stceq	0, cr0, [r0], {23}
    4a88:	077a1319 			; <UNDEFINED> instruction: 0x077a1319
    4a8c:	03050000 	movweq	r0, #20480	; 0x5000
    4a90:	200005a4 	andcs	r0, r0, r4, lsr #11
    4a94:	0000810f 	andeq	r8, r0, pc, lsl #2
    4a98:	0007b200 	andeq	fp, r7, r0, lsl #4
    4a9c:	00881e00 	addeq	r1, r8, r0, lsl #28
    4aa0:	00020000 	andeq	r0, r2, r0
    4aa4:	00179b1f 	andseq	r9, r7, pc, lsl fp
    4aa8:	0f1e0c00 	svceq	0x001e0c00
    4aac:	000007a2 	andeq	r0, r0, r2, lsr #15
    4ab0:	05bc0305 	ldreq	r0, [ip, #773]!	; 0x305
    4ab4:	d40f2000 	strle	r2, [pc], #-0	; 4abc <__aeabi_lmul+0xc8>
    4ab8:	d4000007 	strle	r0, [r0], #-7
    4abc:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    4ac0:	00000088 	andeq	r0, r0, r8, lsl #1
    4ac4:	040a0002 	streq	r0, [sl], #-2
    4ac8:	00000481 	andeq	r0, r0, r1, lsl #9
    4acc:	0019191f 	andseq	r1, r9, pc, lsl r9
    4ad0:	1b230c00 	blne	8c7ad8 <__ccfg+0x8a7b30>
    4ad4:	000007c4 	andeq	r0, r0, r4, asr #15
    4ad8:	05c80305 	strbeq	r0, [r8, #773]	; 0x305
    4adc:	01202000 			; <UNDEFINED> instruction: 0x01202000
    4ae0:	00001887 	andeq	r1, r0, r7, lsl #17
    4ae4:	01050d01 	tsteq	r5, r1, lsl #26
    4ae8:	0024b001 	eoreq	fp, r4, r1
    4aec:	0024b200 	eoreq	fp, r4, r0, lsl #4
    4af0:	219c0100 	orrscs	r0, ip, r0, lsl #2
    4af4:	0017aa01 	andseq	sl, r7, r1, lsl #20
    4af8:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    4afc:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    4b08:	9c010000 	stcls	0, cr0, [r1], {-0}
    4b0c:	00000863 	andeq	r0, r0, r3, ror #16
    4b10:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4b14:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    4b18:	0000812d 	andeq	r8, r0, sp, lsr #2
    4b1c:	0013bd00 	andseq	fp, r3, r0, lsl #26
    4b20:	114e2300 	mrsne	r2, SPSR_hyp
    4b24:	00000000 	andeq	r0, r0, r0
    4b28:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    4b2c:	0a010000 	beq	44b34 <__ccfg+0x24b8c>
    4b30:	60240905 	eorvs	r0, r4, r5, lsl #18
    4b34:	db000011 	blle	4b80 <__aeabi_lmul+0x18c>
    4b38:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    4b3c:	00000910 	andeq	r0, r0, r0, lsl r9
    4b40:	00116b26 	andseq	r6, r1, r6, lsr #22
    4b44:	0013ee00 	andseq	lr, r3, r0, lsl #28
    4b48:	11762600 	cmnne	r6, r0, lsl #12
    4b4c:	140c0000 	strne	r0, [ip], #-0
    4b50:	00000000 	andeq	r0, r0, r0
    4b54:	b4012700 	strlt	r2, [r1], #-1792	; 0xfffff900
    4b58:	01000018 	tsteq	r0, r8, lsl r0
    4b5c:	010104fa 	strdeq	r0, [r1, -sl]
    4b60:	00002474 	andeq	r2, r0, r4, ror r4
    4b64:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    4b68:	089d9c01 	ldmeq	sp, {r0, sl, fp, ip, pc}
    4b6c:	70220000 	eorvc	r0, r2, r0
    4b70:	0100746b 	tsteq	r0, fp, ror #8
    4b74:	163004fa 			; <UNDEFINED> instruction: 0x163004fa
    4b78:	36000001 	strcc	r0, [r0], -r1
    4b7c:	28000014 	stmdacs	r0, {r2, r4}
    4b80:	fe010062 	cdp2	0, 0, cr0, cr1, cr2, {3}
    4b84:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    4b88:	14540000 	ldrbne	r0, [r4], #-0
    4b8c:	0a000000 	beq	4b94 <__aeabi_lmul+0x1a0>
    4b90:	0005b704 	andeq	fp, r5, r4, lsl #14
    4b94:	00012100 	andeq	r2, r1, r0, lsl #2
    4b98:	01000017 	tsteq	r0, r7, lsl r0
    4b9c:	010104e9 	smlatteq	r1, r9, r4, r0
    4ba0:	00000116 	andeq	r0, r0, r6, lsl r1
    4ba4:	00002440 	andeq	r2, r0, r0, asr #8
    4ba8:	00002474 	andeq	r2, r0, r4, ror r4
    4bac:	08f19c01 	ldmeq	r1!, {r0, sl, fp, ip, pc}^
    4bb0:	70220000 	eorvc	r0, r2, r0
    4bb4:	01007968 	tsteq	r0, r8, ror #18
    4bb8:	812f04e9 	smulwthi	pc, r9, r4	; <UNPREDICTABLE>
    4bbc:	72000000 	andvc	r0, r0, #0
    4bc0:	28000014 	stmdacs	r0, {r2, r4}
    4bc4:	0100716f 	tsteq	r0, pc, ror #2
    4bc8:	8a0b04ed 	bhi	2c5f84 <__ccfg+0x2a5fdc>
    4bcc:	90000007 	andls	r0, r0, r7
    4bd0:	28000014 	stmdacs	r0, {r2, r4}
    4bd4:	ee010062 	cdp	0, 0, cr0, cr1, cr2, {3}
    4bd8:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    4bdc:	14a30000 	strtne	r0, [r3], #0
    4be0:	21000000 	mrscs	r0, (UNDEF: 0)
    4be4:	00177e01 	andseq	r7, r7, r1, lsl #28
    4be8:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    4bec:	01160101 	tsteq	r6, r1, lsl #2
    4bf0:	24000000 	strcs	r0, [r0], #-0
    4bf4:	24400000 	strbcs	r0, [r0], #-0
    4bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4bfc:	00000950 	andeq	r0, r0, r0, asr r9
    4c00:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4c04:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    4c08:	0000812f 	andeq	r8, r0, pc, lsr #2
    4c0c:	0014c200 	andseq	ip, r4, r0, lsl #4
    4c10:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    4c14:	d201006e 	andle	r0, r1, #110	; 0x6e
    4c18:	04323904 	ldrteq	r3, [r2], #-2308	; 0xfffff6fc
    4c1c:	14e00000 	strbtne	r0, [r0], #0
    4c20:	6f280000 	svcvs	0x00280000
    4c24:	d7010071 	smlsdxle	r1, r1, r0, r0
    4c28:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    4c2c:	14fe0000 	ldrbtne	r0, [lr], #0
    4c30:	62280000 	eorvs	r0, r8, #0
    4c34:	04d80100 	ldrbeq	r0, [r8], #256	; 0x100
    4c38:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4c3c:	00151c00 	andseq	r1, r5, r0, lsl #24
    4c40:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4c44:	00001907 	andeq	r1, r0, r7, lsl #18
    4c48:	0104a101 	tsteq	r4, r1, lsl #2
    4c4c:	00008101 	andeq	r8, r0, r1, lsl #2
    4c50:	00236400 	eoreq	r6, r3, r0, lsl #8
    4c54:	00240000 	eoreq	r0, r4, r0
    4c58:	eb9c0100 	bl	fe705060 <_estack+0xde700060>
    4c5c:	22000009 	andcs	r0, r0, #9
    4c60:	00796870 	rsbseq	r6, r9, r0, ror r8
    4c64:	2b04a101 	blcs	12d070 <__ccfg+0x10d0c8>
    4c68:	00000081 	andeq	r0, r0, r1, lsl #1
    4c6c:	00001546 	andeq	r1, r0, r6, asr #10
    4c70:	01007022 	tsteq	r0, r2, lsr #32
    4c74:	163804a1 	ldrtne	r0, [r8], -r1, lsr #9
    4c78:	7a000001 	bvc	4c84 <__aeabi_lmul+0x290>
    4c7c:	22000015 	andcs	r0, r0, #21
    4c80:	006e656c 	rsbeq	r6, lr, ip, ror #10
    4c84:	3f04a101 	svccc	0x0004a101
    4c88:	00000081 	andeq	r0, r0, r1, lsl #1
    4c8c:	000015ae 	andeq	r1, r0, lr, lsr #11
    4c90:	676c7029 	strbvs	r7, [ip, -r9, lsr #32]!
    4c94:	04a60100 	strteq	r0, [r6], #256	; 0x100
    4c98:	00008106 	andeq	r8, r0, r6, lsl #2
    4c9c:	73642800 	cmnvc	r4, #0, 16
    4ca0:	a6010070 			; <UNDEFINED> instruction: 0xa6010070
    4ca4:	00810b04 	addeq	r0, r1, r4, lsl #22
    4ca8:	15e20000 	strbne	r0, [r2, #0]!
    4cac:	732a0000 			; <UNDEFINED> instruction: 0x732a0000
    4cb0:	01007365 	tsteq	r0, r5, ror #6
    4cb4:	811004a6 	tsthi	r0, r6, lsr #9
    4cb8:	02000000 	andeq	r0, r0, #0
    4cbc:	612a5091 			; <UNDEFINED> instruction: 0x612a5091
    4cc0:	a7010070 	smlsdxge	r1, r0, r0, r0
    4cc4:	03550b04 	cmpeq	r5, #4, 22	; 0x1000
    4cc8:	91020000 	mrsls	r0, (UNDEF: 2)
    4ccc:	00632854 	rsbeq	r2, r3, r4, asr r8
    4cd0:	0a04a801 	beq	12ecdc <__ccfg+0x10ed34>
    4cd4:	00000116 	andeq	r0, r0, r6, lsl r1
    4cd8:	00001600 	andeq	r1, r0, r0, lsl #12
    4cdc:	2d012100 	stfcss	f2, [r1, #-0]
    4ce0:	01000017 	tsteq	r0, r7, lsl r0
    4ce4:	01010487 	smlabbeq	r1, r7, r4, r0
    4ce8:	00000081 	andeq	r0, r0, r1, lsl #1
    4cec:	00002314 	andeq	r2, r0, r4, lsl r3
    4cf0:	00002364 	andeq	r2, r0, r4, ror #6
    4cf4:	0a4a9c01 	beq	12abd00 <__ccfg+0x128bd58>
    4cf8:	70220000 	eorvc	r0, r2, r0
    4cfc:	01007968 	tsteq	r0, r8, ror #18
    4d00:	812b0487 	smlawbhi	fp, r7, r4, r0
    4d04:	13000000 	movwne	r0, #0
    4d08:	22000016 	andcs	r0, r0, #22
    4d0c:	01007370 	tsteq	r0, r0, ror r3
    4d10:	093a0487 	ldmdbeq	sl!, {r0, r1, r2, r7, sl}
    4d14:	31000007 	tstcc	r0, r7
    4d18:	2b000016 	blcs	4d78 <__aeabi_lmul+0x384>
    4d1c:	00000e8b 	andeq	r0, r0, fp, lsl #29
    4d20:	42048701 	andmi	r8, r4, #262144	; 0x40000
    4d24:	00000081 	andeq	r0, r0, r1, lsl #1
    4d28:	0000164f 	andeq	r1, r0, pc, asr #12
    4d2c:	01007128 	tsteq	r0, r8, lsr #2
    4d30:	8a0b048d 	bhi	2c5f6c <__ccfg+0x2a5fc4>
    4d34:	6d000007 	stcvs	0, cr0, [r0, #-28]	; 0xffffffe4
    4d38:	00000016 	andeq	r0, r0, r6, lsl r0
    4d3c:	1827012c 	stmdane	r7!, {r2, r3, r5, r8}
    4d40:	86010000 	strhi	r0, [r1], -r0
    4d44:	16010103 	strne	r0, [r1], -r3, lsl #2
    4d48:	01000001 	tsteq	r0, r1
    4d4c:	00000a91 	muleq	r0, r1, sl
    4d50:	001da12d 	andseq	sl, sp, sp, lsr #2
    4d54:	03860100 	orreq	r0, r6, #0, 2
    4d58:	0000812d 	andeq	r8, r0, sp, lsr #2
    4d5c:	73642e00 	cmnvc	r4, #0, 28
    4d60:	86010070 			; <UNDEFINED> instruction: 0x86010070
    4d64:	00813703 	addeq	r3, r1, r3, lsl #14
    4d68:	732e0000 			; <UNDEFINED> instruction: 0x732e0000
    4d6c:	01007365 	tsteq	r0, r5, ror #6
    4d70:	81400386 	smlalbbhi	r0, r0, r6, r3	; <UNPREDICTABLE>
    4d74:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    4d78:	8a010070 	bhi	44f40 <__ccfg+0x24f98>
    4d7c:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    4d80:	27000000 	strcs	r0, [r0, -r0]
    4d84:	00172001 	andseq	r2, r7, r1
    4d88:	037f0100 	cmneq	pc, #0, 2
    4d8c:	00000101 	andeq	r0, r0, r1, lsl #2
    4d90:	00000000 	andeq	r0, r0, r0
    4d94:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d98:	00000acb 	andeq	r0, r0, fp, asr #21
    4d9c:	01007022 	tsteq	r0, r2, lsr #32
    4da0:	1632037f 			; <UNDEFINED> instruction: 0x1632037f
    4da4:	9c000001 	stcls	0, cr0, [r0], {1}
    4da8:	22000016 	andcs	r0, r0, #22
    4dac:	00707364 	rsbseq	r7, r0, r4, ror #6
    4db0:	39037f01 	stmdbcc	r3, {r0, r8, r9, sl, fp, ip, sp, lr}
    4db4:	00000081 	andeq	r0, r0, r1, lsl #1
    4db8:	000016af 	andeq	r1, r0, pc, lsr #13
    4dbc:	98012100 	stmdals	r1, {r8, sp}
    4dc0:	01000018 	tsteq	r0, r8, lsl r0
    4dc4:	0101036b 	tsteq	r1, fp, ror #6
    4dc8:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    4dd4:	0b259c01 	bleq	96bde0 <__ccfg+0x94be38>
    4dd8:	70220000 	eorvc	r0, r2, r0
    4ddc:	036b0100 	cmneq	fp, #0, 2
    4de0:	00011633 	andeq	r1, r1, r3, lsr r6
    4de4:	0016c200 	andseq	ip, r6, r0, lsl #4
    4de8:	18fa2b00 	ldmne	sl!, {r8, r9, fp, sp}^
    4dec:	6b010000 	blvs	44df4 <__ccfg+0x24e4c>
    4df0:	00813a03 	addeq	r3, r1, r3, lsl #20
    4df4:	16e00000 	strbtne	r0, [r0], r0
    4df8:	70280000 	eorvc	r0, r8, r0
    4dfc:	6f010063 	svcvs	0x00010063
    4e00:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    4e04:	16fe0000 	ldrbtne	r0, [lr], r0
    4e08:	70290000 	eorvc	r0, r9, r0
    4e0c:	6f010070 	svcvs	0x00010070
    4e10:	089d1103 	ldmeq	sp, {r0, r1, r8, ip}
    4e14:	27000000 	strcs	r0, [r0, -r0]
    4e18:	0017b701 	andseq	fp, r7, r1, lsl #14
    4e1c:	03630100 	cmneq	r3, #0, 2
    4e20:	00000101 	andeq	r0, r0, r1, lsl #2
    4e24:	00000000 	andeq	r0, r0, r0
    4e28:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e2c:	00000b5f 	andeq	r0, r0, pc, asr fp
    4e30:	01007022 	tsteq	r0, r2, lsr #32
    4e34:	16310363 	ldrtne	r0, [r1], -r3, ror #6
    4e38:	1c000001 	stcne	0, cr0, [r0], {1}
    4e3c:	22000017 	andcs	r0, r0, #23
    4e40:	00796870 	rsbseq	r6, r9, r0, ror r8
    4e44:	38036301 	stmdacc	r3, {r0, r8, r9, sp, lr}
    4e48:	00000081 	andeq	r0, r0, r1, lsl #1
    4e4c:	0000173a 	andeq	r1, r0, sl, lsr r7
    4e50:	a3012700 	movwge	r2, #5888	; 0x1700
    4e54:	01000018 	tsteq	r0, r8, lsl r0
    4e58:	0101035a 	tsteq	r1, sl, asr r3
	...
    4e64:	0b999c01 	bleq	fe66be70 <_estack+0xde666e70>
    4e68:	70220000 	eorvc	r0, r2, r0
    4e6c:	035a0100 	cmpeq	sl, #0, 2
    4e70:	00011631 	andeq	r1, r1, r1, lsr r6
    4e74:	00175800 	andseq	r5, r7, r0, lsl #16
    4e78:	65732200 	ldrbvs	r2, [r3, #-512]!	; 0xfffffe00
    4e7c:	5a010073 	bpl	45050 <__ccfg+0x250a8>
    4e80:	00813803 	addeq	r3, r1, r3, lsl #16
    4e84:	17760000 	ldrbne	r0, [r6, -r0]!
    4e88:	2c000000 	stccs	0, cr0, [r0], {-0}
    4e8c:	00193901 	andseq	r3, r9, r1, lsl #18
    4e90:	03520100 	cmpeq	r2, #0, 2
    4e94:	00810101 	addeq	r0, r1, r1, lsl #2
    4e98:	d5010000 	strle	r0, [r1, #-0]
    4e9c:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    4ea0:	00796870 	rsbseq	r6, r9, r0, ror r8
    4ea4:	2d035201 	sfmcs	f5, 4, [r3, #-4]
    4ea8:	00000081 	andeq	r0, r0, r1, lsl #1
    4eac:	74706f2e 	ldrbtvc	r6, [r0], #-3886	; 0xfffff0d2
    4eb0:	03520100 	cmpeq	r2, #0, 2
    4eb4:	00008136 	andeq	r8, r0, r6, lsr r1
    4eb8:	72612e00 	rsbvc	r2, r1, #0, 28
    4ebc:	52010067 	andpl	r0, r1, #103	; 0x67
    4ec0:	01164303 	tsteq	r6, r3, lsl #6
    4ec4:	21000000 	mrscs	r0, (UNDEF: 0)
    4ec8:	00170b01 	andseq	r0, r7, r1, lsl #22
    4ecc:	03330100 	teqeq	r3, #0, 2
    4ed0:	00810101 	addeq	r0, r1, r1, lsl #2
    4ed4:	224c0000 	subcs	r0, ip, #0
    4ed8:	22ac0000 	adccs	r0, ip, #0
    4edc:	9c010000 	stcls	0, cr0, [r1], {-0}
    4ee0:	00000c3e 	andeq	r0, r0, lr, lsr ip
    4ee4:	00646622 	rsbeq	r6, r4, r2, lsr #12
    4ee8:	2c033301 	stccs	3, cr3, [r3], {1}
    4eec:	00000081 	andeq	r0, r0, r1, lsl #1
    4ef0:	00001794 	muleq	r0, r4, r7
    4ef4:	74706f22 	ldrbtvc	r6, [r0], #-3874	; 0xfffff0de
    4ef8:	03330100 	teqeq	r3, #0, 2
    4efc:	00008134 	andeq	r8, r0, r4, lsr r1
    4f00:	0017d300 	andseq	sp, r7, r0, lsl #6
    4f04:	72612200 	rsbvc	r2, r1, #0, 4
    4f08:	33010067 	movwcc	r0, #4199	; 0x1067
    4f0c:	01164103 	tsteq	r6, r3, lsl #2
    4f10:	17fc0000 	ldrbne	r0, [ip, r0]!
    4f14:	5a2f0000 	bpl	bc4f1c <__ccfg+0xba4f74>
    4f18:	68000022 	stmdavs	r0, {r1, r5}
    4f1c:	28000022 	stmdacs	r0, {r1, r5}
    4f20:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
    4f24:	07d41503 	ldrbeq	r1, [r4, r3, lsl #10]
    4f28:	18250000 	stmdane	r5!, {}	; <UNPREDICTABLE>
    4f2c:	00000000 	andeq	r0, r0, r0
    4f30:	17920127 	ldrne	r0, [r2, r7, lsr #2]
    4f34:	2b010000 	blcs	44f3c <__ccfg+0x24f94>
    4f38:	00010103 	andeq	r0, r1, r3, lsl #2
    4f3c:	00000000 	andeq	r0, r0, r0
    4f40:	01000000 	mrseq	r0, (UNDEF: 0)
    4f44:	000c679c 	muleq	ip, ip, r7
    4f48:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4f4c:	2e032b01 	vmlacs.f64	d2, d3, d1
    4f50:	00000116 	andeq	r0, r0, r6, lsl r1
    4f54:	00001838 	andeq	r1, r0, r8, lsr r8
    4f58:	4e012100 	adfmis	f2, f1, f0
    4f5c:	01000018 	tsteq	r0, r8, lsl r0
    4f60:	0101031a 	tsteq	r1, sl, lsl r3
    4f64:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    4f70:	0cc19c01 	stcleq	12, cr9, [r1], {1}
    4f74:	70220000 	eorvc	r0, r2, r0
    4f78:	031a0100 	tsteq	sl, #0, 2
    4f7c:	0001162e 	andeq	r1, r1, lr, lsr #12
    4f80:	00185600 	andseq	r5, r8, r0, lsl #12
    4f84:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    4f88:	1a010066 	bne	45128 <__ccfg+0x25180>
    4f8c:	02593d03 	subseq	r3, r9, #3, 26	; 0xc0
    4f90:	18740000 	ldmdane	r4!, {}^	; <UNPREDICTABLE>
    4f94:	6c220000 	stcvs	0, cr0, [r2], #-0
    4f98:	01006e65 	tsteq	r0, r5, ror #28
    4f9c:	8146031a 	cmphi	r6, sl, lsl r3
    4fa0:	87000000 	strhi	r0, [r0, -r0]
    4fa4:	29000018 	stmdbcs	r0, {r3, r4}
    4fa8:	1e010062 	cdpne	0, 0, cr0, cr1, cr2, {3}
    4fac:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    4fb0:	21000000 	mrscs	r0, (UNDEF: 0)
    4fb4:	00171701 	andseq	r1, r7, r1, lsl #14
    4fb8:	03080100 	movweq	r0, #33024	; 0x8100
    4fbc:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    4fc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    4fcc:	00000d1b 	andeq	r0, r0, fp, lsl sp
    4fd0:	01007022 	tsteq	r0, r2, lsr #32
    4fd4:	162d0308 	strtne	r0, [sp], -r8, lsl #6
    4fd8:	a5000001 	strge	r0, [r0, #-1]
    4fdc:	22000018 	andcs	r0, r0, #24
    4fe0:	00667562 	rsbeq	r7, r6, r2, ror #10
    4fe4:	36030801 	strcc	r0, [r3], -r1, lsl #16
    4fe8:	00000d1b 	andeq	r0, r0, fp, lsl sp
    4fec:	000018c3 	andeq	r1, r0, r3, asr #17
    4ff0:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4ff4:	03080100 	movweq	r0, #33024	; 0x8100
    4ff8:	0000813f 	andeq	r8, r0, pc, lsr r1
    4ffc:	0018e100 	andseq	lr, r8, r0, lsl #2
    5000:	00622900 	rsbeq	r2, r2, r0, lsl #18
    5004:	0c030c01 	stceq	12, cr0, [r3], {1}
    5008:	0000089d 	muleq	r0, sp, r8
    500c:	e3040a00 	movw	r0, #18944	; 0x4a00
    5010:	21000000 	mrscs	r0, (UNDEF: 0)
    5014:	00184501 	andseq	r4, r8, r1, lsl #10
    5018:	02cd0100 	sbceq	r0, sp, #0, 2
    501c:	01160101 	tsteq	r6, r1, lsl #2
    5020:	21640000 	cmncs	r4, r0
    5024:	22200000 	eorcs	r0, r0, #0
    5028:	9c010000 	stcls	0, cr0, [r1], {-0}
    502c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    5030:	0000792b 	andeq	r7, r0, fp, lsr #18
    5034:	02cd0100 	sbceq	r0, sp, #0, 2
    5038:	0000cd2e 	andeq	ip, r0, lr, lsr #26
    503c:	0018ff00 	andseq	pc, r8, r0, lsl #30
    5040:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    5044:	02cd0100 	sbceq	r0, sp, #0, 2
    5048:	00008139 	andeq	r8, r0, r9, lsr r1
    504c:	00191d00 	andseq	r1, r9, r0, lsl #26
    5050:	18f32b00 	ldmne	r3!, {r8, r9, fp, sp}^
    5054:	cd010000 	stcgt	0, cr0, [r1, #-0]
    5058:	00814102 	addeq	r4, r1, r2, lsl #2
    505c:	19460000 	stmdbne	r6, {}^	; <UNPREDICTABLE>
    5060:	75220000 	strvc	r0, [r2, #-0]!
    5064:	01006772 	tsteq	r0, r2, ror r7
    5068:	c11102ce 	tstgt	r1, lr, asr #5
    506c:	90000000 	andls	r0, r0, r0
    5070:	28000019 	stmdacs	r0, {r0, r3, r4}
    5074:	cf010062 	svcgt	0x00010062
    5078:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    507c:	19a30000 	stmibne	r3!, {}	; <UNPREDICTABLE>
    5080:	37300000 	ldrcc	r0, [r0, -r0]!
    5084:	01000018 	tsteq	r0, r8, lsl r0
    5088:	550b02d0 	strpl	r0, [fp, #-720]	; 0xfffffd30
    508c:	02000003 	andeq	r0, r0, #3
    5090:	732a6491 			; <UNDEFINED> instruction: 0x732a6491
    5094:	02d10100 	sbcseq	r0, r1, #0, 2
    5098:	0007400d 	andeq	r4, r7, sp
    509c:	28570100 	ldmdacs	r7, {r8}^
    50a0:	00646965 	rsbeq	r6, r4, r5, ror #18
    50a4:	0602d201 	streq	sp, [r2], -r1, lsl #4
    50a8:	00000081 	andeq	r0, r0, r1, lsl #1
    50ac:	000019c1 	andeq	r1, r0, r1, asr #19
    50b0:	14012100 	strne	r2, [r1], #-256	; 0xffffff00
    50b4:	01000018 	tsteq	r0, r8, lsl r0
    50b8:	010102a4 	smlatbeq	r1, r4, r2, r0
    50bc:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    50c8:	0e729c01 	cdpeq	12, 7, cr9, cr2, cr1, {0}
    50cc:	66220000 	strtvs	r0, [r2], -r0
    50d0:	a4010064 	strge	r0, [r1], #-100	; 0xffffff9c
    50d4:	00812a02 	addeq	r2, r1, r2, lsl #20
    50d8:	19ea0000 	stmibne	sl!, {}^	; <UNPREDICTABLE>
    50dc:	fa2b0000 	blx	ac50e4 <__ccfg+0xaa513c>
    50e0:	01000018 	tsteq	r0, r8, lsl r0
    50e4:	813202a4 	teqhi	r2, r4, lsr #5
    50e8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    50ec:	2800001a 	stmdacs	r0, {r1, r3, r4}
    50f0:	a8010073 	stmdage	r1, {r0, r1, r4, r5, r6}
    50f4:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    50f8:	1a520000 	bne	1485100 <__ccfg+0x1465158>
    50fc:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    5100:	a9010071 	stmdbge	r1, {r0, r4, r5, r6}
    5104:	00810602 	addeq	r0, r1, r2, lsl #12
    5108:	1ab70000 	bne	fedc5110 <_estack+0xdedc0110>
    510c:	72280000 	eorvc	r0, r8, #0
    5110:	aa010071 	bge	452dc <__ccfg+0x25334>
    5114:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    5118:	1ad50000 	bne	ff545120 <_estack+0xdf540120>
    511c:	62280000 	eorvs	r0, r8, #0
    5120:	02ab0100 	adceq	r0, fp, #0, 2
    5124:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5128:	001af300 	andseq	pc, sl, r0, lsl #6
    512c:	18023100 	stmdane	r2, {r8, ip, sp}
    5130:	c0010000 	andgt	r0, r1, r0
    5134:	00000102 	andeq	r0, r0, r2, lsl #2
    5138:	4e320000 	cdpmi	0, 3, cr0, cr2, cr0, {0}
    513c:	00000011 	andeq	r0, r0, r1, lsl r0
    5140:	00000000 	andeq	r0, r0, r0
    5144:	01000000 	mrseq	r0, (UNDEF: 0)
    5148:	330a02bb 	movwcc	r0, #41659	; 0xa2bb
    514c:	00001160 	andeq	r1, r0, r0, ror #2
    5150:	00116b26 	andseq	r6, r1, r6, lsr #22
    5154:	001b1c00 	andseq	r1, fp, r0, lsl #24
    5158:	11762600 	cmnne	r6, r0, lsl #12
    515c:	1b2f0000 	blne	bc5164 <__ccfg+0xba51bc>
    5160:	00000000 	andeq	r0, r0, r0
    5164:	16e30121 	strbtne	r0, [r3], r1, lsr #2
    5168:	7d010000 	stcvc	0, cr0, [r1, #-0]
    516c:	81010102 	tsthi	r1, r2, lsl #2
	...
    5178:	01000000 	mrseq	r0, (UNDEF: 0)
    517c:	000eef9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
    5180:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    5184:	027d0100 	rsbseq	r0, sp, #0, 2
    5188:	0000812a 	andeq	r8, r0, sl, lsr #2
    518c:	001b4200 	andseq	r4, fp, r0, lsl #4
    5190:	18fa2b00 	ldmne	sl!, {r8, r9, fp, sp}^
    5194:	7d010000 	stcvc	0, cr0, [r1, #-0]
    5198:	00813202 	addeq	r3, r1, r2, lsl #4
    519c:	1b760000 	blne	1d851a4 <__ccfg+0x1d651fc>
    51a0:	73280000 			; <UNDEFINED> instruction: 0x73280000
    51a4:	02810100 	addeq	r0, r1, #0, 2
    51a8:	0007400d 	andeq	r4, r7, sp
    51ac:	001b9f00 	andseq	r9, fp, r0, lsl #30
    51b0:	716e2800 	cmnvc	lr, r0, lsl #16
    51b4:	02820100 	addeq	r0, r2, #0, 2
    51b8:	00008106 	andeq	r8, r0, r6, lsl #2
    51bc:	001c0400 	andseq	r0, ip, r0, lsl #8
    51c0:	71722800 	cmnvc	r2, r0, lsl #16
    51c4:	02830100 	addeq	r0, r3, #0, 2
    51c8:	00078a0b 	andeq	r8, r7, fp, lsl #20
    51cc:	001c2200 	andseq	r2, ip, r0, lsl #4
    51d0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    51d4:	0c028401 	cfstrseq	mvf8, [r2], {1}
    51d8:	0000089d 	muleq	r0, sp, r8
    51dc:	00001c4b 	andeq	r1, r0, fp, asr #24
    51e0:	ff012100 			; <UNDEFINED> instruction: 0xff012100
    51e4:	01000018 	tsteq	r0, r8, lsl r0
    51e8:	01010256 	tsteq	r1, r6, asr r2
    51ec:	00000116 	andeq	r0, r0, r6, lsl r1
    51f0:	000020e4 	andeq	r2, r0, r4, ror #1
    51f4:	00002164 	andeq	r2, r0, r4, ror #2
    51f8:	0f5c9c01 	svceq	0x005c9c01
    51fc:	792b0000 	stmdbvc	fp!, {}	; <UNPREDICTABLE>
    5200:	01000000 	mrseq	r0, (UNDEF: 0)
    5204:	cd2d0256 	sfmgt	f0, 4, [sp, #-344]!	; 0xfffffea8
    5208:	7f000000 	svcvc	0x00000000
    520c:	2200001c 	andcs	r0, r0, #28
    5210:	01006466 	tsteq	r0, r6, ror #8
    5214:	81380256 	teqhi	r8, r6, asr r2
    5218:	92000000 	andls	r0, r0, #0
    521c:	2800001c 	stmdacs	r0, {r2, r3, r4}
    5220:	5d010070 	stcpl	0, cr0, [r1, #-448]	; 0xfffffe40
    5224:	01160a02 	tsteq	r6, r2, lsl #20
    5228:	1cd10000 	ldclne	0, cr0, [r1], {0}
    522c:	62280000 	eorvs	r0, r8, #0
    5230:	025e0100 	subseq	r0, lr, #0, 2
    5234:	00089d0c 	andeq	r9, r8, ip, lsl #26
    5238:	001ce400 	andseq	lr, ip, r0, lsl #8
    523c:	71722800 	cmnvc	r2, r0, lsl #16
    5240:	025f0100 	subseq	r0, pc, #0, 2
    5244:	00078a0b 	andeq	r8, r7, fp, lsl #20
    5248:	001d0d00 	andseq	r0, sp, r0, lsl #26
    524c:	01210000 			; <UNDEFINED> instruction: 0x01210000
    5250:	000018ca 	andeq	r1, r0, sl, asr #17
    5254:	01024a01 	tsteq	r2, r1, lsl #20
    5258:	00008101 	andeq	r8, r0, r1, lsl #2
    525c:	0020c000 	eoreq	ip, r0, r0
    5260:	0020e400 	eoreq	lr, r0, r0, lsl #8
    5264:	999c0100 	ldmibls	ip, {r8}
    5268:	2200000f 	andcs	r0, r0, #15
    526c:	0064726f 	rsbeq	r7, r4, pc, ror #4
    5270:	29024a01 	stmdbcs	r2, {r0, r9, fp, lr}
    5274:	00000081 	andeq	r0, r0, r1, lsl #1
    5278:	00001d47 	andeq	r1, r0, r7, asr #26
    527c:	006c7034 	rsbeq	r7, ip, r4, lsr r0
    5280:	3f024a01 	svccc	0x00024a01
    5284:	000007d4 	ldrdeq	r0, [r0], -r4
    5288:	21005101 	tstcs	r0, r1, lsl #2
    528c:	00185801 	andseq	r5, r8, r1, lsl #16
    5290:	02290100 	eoreq	r0, r9, #0, 2
    5294:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    52a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    52a4:	00000ff6 	strdeq	r0, [r0], -r6
    52a8:	0000792b 	andeq	r7, r0, fp, lsr #18
    52ac:	02290100 	eoreq	r0, r9, #0, 2
    52b0:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    52b4:	001d6500 	andseq	r6, sp, r0, lsl #10
    52b8:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    52bc:	02290100 	eoreq	r0, r9, #0, 2
    52c0:	00008136 	andeq	r8, r0, r6, lsr r1
    52c4:	001d8300 	andseq	r8, sp, r0, lsl #6
    52c8:	00732800 	rsbseq	r2, r3, r0, lsl #16
    52cc:	0d022b01 	vstreq	d2, [r2, #-4]
    52d0:	00000740 	andeq	r0, r0, r0, asr #14
    52d4:	00001dcd 	andeq	r1, r0, sp, asr #27
    52d8:	01006228 	tsteq	r0, r8, lsr #4
    52dc:	9d0c022c 	sfmls	f0, 4, [ip, #-176]	; 0xffffff50
    52e0:	e0000008 	and	r0, r0, r8
    52e4:	0000001d 	andeq	r0, r0, sp, lsl r0
    52e8:	17890121 	strne	r0, [r9, r1, lsr #2]
    52ec:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    52f0:	81010101 	tsthi	r1, r1, lsl #2
    52f4:	00000000 	andeq	r0, r0, r0
    52f8:	c0000020 	andgt	r0, r0, r0, lsr #32
    52fc:	01000020 	tsteq	r0, r0, lsr #32
    5300:	0010839c 	mulseq	r0, ip, r3
    5304:	00792b00 	rsbseq	r2, r9, r0, lsl #22
    5308:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    530c:	00cd2a01 	sbceq	r2, sp, r1, lsl #20
    5310:	1df30000 	ldclne	0, cr0, [r3]
    5314:	70220000 	eorvc	r0, r2, r0
    5318:	01007968 	tsteq	r0, r8, ror #18
    531c:	813501f6 	teqhi	r5, r6	; <illegal shifter operand>
    5320:	1c000000 	stcne	0, cr0, [r0], {-0}
    5324:	2b00001e 	blcs	53a4 <patchGenfskRfe+0xe8>
    5328:	000018af 	andeq	r1, r0, pc, lsr #17
    532c:	3e01f601 	cfmadd32cc	mvax0, mvfx15, mvfx1, mvfx1
    5330:	00000081 	andeq	r0, r0, r1, lsl #1
    5334:	00001e71 	andeq	r1, r0, r1, ror lr
    5338:	64662835 	strbtvs	r2, [r6], #-2101	; 0xfffff7cb
    533c:	01f80100 	mvnseq	r0, r0, lsl #2
    5340:	00008106 	andeq	r8, r0, r6, lsl #2
    5344:	001ea900 	andseq	sl, lr, r0, lsl #18
    5348:	17f63600 	ldrbne	r3, [r6, r0, lsl #12]!
    534c:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    5350:	05560a01 	ldrbeq	r0, [r6, #-2561]	; 0xfffff5ff
    5354:	73280000 			; <UNDEFINED> instruction: 0x73280000
    5358:	01fa0100 	mvnseq	r0, r0, lsl #2
    535c:	0007400d 	andeq	r4, r7, sp
    5360:	001ec700 	andseq	ip, lr, r0, lsl #14
    5364:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    5368:	01fc0100 	mvnseq	r0, r0, lsl #2
    536c:	0000b50b 	andeq	fp, r0, fp, lsl #10
    5370:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    5374:	1e012700 	cdpne	7, 0, cr2, cr1, cr0, {0}
    5378:	01000018 	tsteq	r0, r8, lsl r0
    537c:	0101013b 	tsteq	r1, fp, lsr r1
    5380:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    5384:	00002000 	andeq	r2, r0, r0
    5388:	10bb9c01 	adcsne	r9, fp, r1, lsl #24
    538c:	70220000 	eorvc	r0, r2, r0
    5390:	013b0100 	teqeq	fp, r0, lsl #2
    5394:	0001162e 	andeq	r1, r1, lr, lsr #12
    5398:	001f1100 	andseq	r1, pc, r0, lsl #2
    539c:	00622800 	rsbeq	r2, r2, r0, lsl #16
    53a0:	0c014101 	stfeqs	f4, [r1], {1}
    53a4:	0000089d 	muleq	r0, sp, r8
    53a8:	00001f3a 	andeq	r1, r0, sl, lsr pc
    53ac:	70613700 	rsbvc	r3, r1, r0, lsl #14
    53b0:	14010062 	strne	r0, [r1], #-98	; 0xffffff9e
    53b4:	9d010101 	stflss	f0, [r1, #-4]
    53b8:	78000008 	stmdavc	r0, {r3}
    53bc:	8e00001e 	mcrhi	0, 0, r0, cr0, cr14, {0}
    53c0:	0100001e 	tsteq	r0, lr, lsl r0
    53c4:	0011029c 	mulseq	r1, ip, r2
    53c8:	1da12b00 			; <UNDEFINED> instruction: 0x1da12b00
    53cc:	14010000 	strne	r0, [r1], #-0
    53d0:	00cd2b01 	sbceq	r2, sp, r1, lsl #22
    53d4:	1f6e0000 	svcne	0x006e0000
    53d8:	702a0000 	eorvc	r0, sl, r0
    53dc:	01190100 	tsteq	r9, r0, lsl #2
    53e0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    53e4:	29500100 	ldmdbcs	r0, {r8}^
    53e8:	01007363 	tsteq	r0, r3, ror #6
    53ec:	cd07011a 	stfgts	f0, [r7, #-104]	; 0xffffff98
    53f0:	00000000 	andeq	r0, r0, r0
    53f4:	706c7238 	rsbvc	r7, ip, r8, lsr r2
    53f8:	01040100 	mrseq	r0, (UNDEF: 20)
    53fc:	1ea80101 	fdvnee	f0, f0, f1
    5400:	1eb60000 	cdpne	0, 11, cr0, cr6, cr0, {0}
    5404:	9c010000 	stcls	0, cr0, [r1], {-0}
    5408:	0000112a 	andeq	r1, r0, sl, lsr #2
    540c:	01007022 	tsteq	r0, r2, lsr #32
    5410:	9d2b0104 	stflss	f0, [fp, #-16]!
    5414:	81000008 	tsthi	r0, r8
    5418:	0000001f 	andeq	r0, r0, pc, lsl r0
    541c:	00172539 	andseq	r2, r7, r9, lsr r5
    5420:	01e00100 	mvneq	r0, r0, lsl #2
    5424:	114e0101 	cmpne	lr, r1, lsl #2
    5428:	703a0000 	eorsvc	r0, sl, r0
    542c:	2fe00100 	svccs	0x00e00100
    5430:	0000089d 	muleq	r0, sp, r8
    5434:	0076643a 	rsbseq	r6, r6, sl, lsr r4
    5438:	8136e001 	teqhi	r6, r1
    543c:	00000000 	andeq	r0, r0, r0
    5440:	0017a43b 	andseq	sl, r7, fp, lsr r4
    5444:	01cf0100 	biceq	r0, pc, r0, lsl #2
    5448:	00008101 	andeq	r8, r0, r1, lsl #2
    544c:	11810100 	orrne	r0, r1, r0, lsl #2
    5450:	6f3a0000 	svcvs	0x003a0000
    5454:	cf010071 	svcgt	0x00010071
    5458:	00078a2b 	andeq	r8, r7, fp, lsr #20
    545c:	716e3c00 	cmnvc	lr, r0, lsl #24
    5460:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
    5464:	00000081 	andeq	r0, r0, r1, lsl #1
    5468:	0100623c 	tsteq	r0, ip, lsr r2
    546c:	089d0cd4 	ldmeq	sp, {r2, r4, r6, r7, sl, fp}
    5470:	3d000000 	stccc	0, cr0, [r0, #-0]
    5474:	00716e65 	rsbseq	r6, r1, r5, ror #28
    5478:	0101a801 	tsteq	r1, r1, lsl #16
    547c:	0011a401 	andseq	sl, r1, r1, lsl #8
    5480:	00713a00 	rsbseq	r3, r1, r0, lsl #20
    5484:	8a2aa801 	bhi	aaf490 <__ccfg+0xa8f4e8>
    5488:	3a000007 	bcc	54ac <patchGenfskRfe+0x1f0>
    548c:	a8010070 	stmdage	r1, {r4, r5, r6}
    5490:	00089d37 	andeq	r9, r8, r7, lsr sp
    5494:	643d0000 	ldrtvs	r0, [sp], #-0
    5498:	01007165 	tsteq	r0, r5, ror #2
    549c:	0101017f 	tsteq	r1, pc, ror r1
    54a0:	000011bd 			; <UNDEFINED> instruction: 0x000011bd
    54a4:	0100703a 	tsteq	r0, sl, lsr r0
    54a8:	089d2b7f 	ldmeq	sp, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}
    54ac:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    54b0:	000011a4 	andeq	r1, r0, r4, lsr #3
    54b4:	00001e8e 	andeq	r1, r0, lr, lsl #29
    54b8:	00001ea8 	andeq	r1, r0, r8, lsr #29
    54bc:	11f29c01 	mvnsne	r9, r1, lsl #24
    54c0:	b23f0000 	eorslt	r0, pc, #0
    54c4:	01000011 	tsteq	r0, r1, lsl r0
    54c8:	11a44050 			; <UNDEFINED> instruction: 0x11a44050
    54cc:	1e940000 	cdpne	0, 9, cr0, cr4, cr0, {0}
    54d0:	1ea60000 	cdpne	0, 10, cr0, cr6, cr0, {0}
    54d4:	7f010000 	svcvc	0x00010000
    54d8:	11b22401 			; <UNDEFINED> instruction: 0x11b22401
    54dc:	1f940000 	svcne	0x00940000
    54e0:	00000000 	andeq	r0, r0, r0
    54e4:	0011813e 	andseq	r8, r1, lr, lsr r1
    54e8:	001eb800 	andseq	fp, lr, r0, lsl #16
    54ec:	001f0400 	andseq	r0, pc, r0, lsl #8
    54f0:	3b9c0100 	blcc	fe7058f8 <_estack+0xde7008f8>
    54f4:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    54f8:	0000118f 	andeq	r1, r0, pc, lsl #3
    54fc:	00001fa7 	andeq	r1, r0, r7, lsr #31
    5500:	00119924 	andseq	r9, r1, r4, lsr #18
    5504:	001fdb00 	andseq	sp, pc, r0, lsl #22
    5508:	11814000 	orrne	r4, r1, r0
    550c:	1ec40000 	cdpne	0, 12, cr0, cr4, cr0, {0}
    5510:	1ecc0000 	cdpne	0, 12, cr0, cr12, cr0, {0}
    5514:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    5518:	118f2401 	orrne	r2, pc, r1, lsl #8
    551c:	200f0000 	andcs	r0, pc, r0
    5520:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    5524:	2d000011 	stccs	0, cr0, [r0, #-68]	; 0xffffffbc
    5528:	00000020 	andeq	r0, r0, r0, lsr #32
    552c:	112a3e00 			; <UNDEFINED> instruction: 0x112a3e00
    5530:	1f040000 	svcne	0x00040000
    5534:	1f900000 	svcne	0x00900000
    5538:	9c010000 	stcls	0, cr0, [r1], {-0}
    553c:	00001280 	andeq	r1, r0, r0, lsl #5
    5540:	00113824 	andseq	r3, r1, r4, lsr #16
    5544:	00204b00 	eoreq	r4, r0, r0, lsl #22
    5548:	11422400 	cmpne	r2, r0, lsl #8
    554c:	20a00000 	adccs	r0, r0, r0
    5550:	2a410000 	bcs	1045558 <__ccfg+0x10255b0>
    5554:	38000011 	stmdacc	r0, {r0, r4}
    5558:	f000001f 			; <UNDEFINED> instruction: 0xf000001f
    555c:	01000008 	tsteq	r0, r8
    5560:	423301e0 	eorsmi	r0, r3, #224, 2	; 0x38
    5564:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    5568:	00001138 	andeq	r1, r0, r8, lsr r1
    556c:	000020b3 	strheq	r2, [r0], -r3
    5570:	993e0000 	ldmdbls	lr!, {}	; <UNPREDICTABLE>
    5574:	2000000b 	andcs	r0, r0, fp
    5578:	4c000022 	stcmi	0, cr0, [r0], {34}	; 0x22
    557c:	01000022 	tsteq	r0, r2, lsr #32
    5580:	0012d89c 	mulseq	r2, ip, r8
    5584:	0bad2400 	bleq	feb4e58c <_estack+0xdeb4958c>
    5588:	20d10000 	sbcscs	r0, r1, r0
    558c:	ba240000 	blt	905594 <__ccfg+0x8e55ec>
    5590:	ef00000b 	svc	0x0000000b
    5594:	24000020 	strcs	r0, [r0], #-32	; 0xffffffe0
    5598:	00000bc7 	andeq	r0, r0, r7, asr #23
    559c:	00002118 	andeq	r2, r0, r8, lsl r1
    55a0:	000b9932 	andeq	r9, fp, r2, lsr r9
    55a4:	00223400 	eoreq	r3, r2, r0, lsl #8
    55a8:	00223c00 	eoreq	r3, r2, r0, lsl #24
    55ac:	03520100 	cmpeq	r2, #0, 2
    55b0:	0bad3301 	bleq	feb521bc <_estack+0xdeb4d1bc>
    55b4:	ba240000 	blt	9055bc <__ccfg+0x8e5614>
    55b8:	4100000b 	tstmi	r0, fp
    55bc:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    55c0:	00000bc7 	andeq	r0, r0, r7, asr #23
    55c4:	00002154 	andeq	r2, r0, r4, asr r1
    55c8:	4a420000 	bmi	10855d0 <__ccfg+0x1065628>
    55cc:	ac00000a 	stcge	0, cr0, [r0], {10}
    55d0:	14000022 	strne	r0, [r0], #-34	; 0xffffffde
    55d4:	01000023 	tsteq	r0, r3, lsr #32
    55d8:	0a5e249c 	beq	178e850 <__ccfg+0x176e8a8>
    55dc:	21670000 	cmncs	r7, r0
    55e0:	6b240000 	blvs	9055e8 <__ccfg+0x8e5640>
    55e4:	7a00000a 	bvc	5614 <patchGenfskRfe+0x358>
    55e8:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    55ec:	00000a78 	andeq	r0, r0, r8, ror sl
    55f0:	000021da 	ldrdeq	r2, [r0], -sl
    55f4:	000a8526 	andeq	r8, sl, r6, lsr #10
    55f8:	00222400 	eoreq	r2, r2, r0, lsl #8
    55fc:	0a4a3200 	beq	1291e04 <__ccfg+0x1271e5c>
    5600:	22ba0000 	adcscs	r0, sl, #0
    5604:	22be0000 	adcscs	r0, lr, #0
    5608:	86010000 	strhi	r0, [r1], -r0
    560c:	5e330103 	rsfpls	f0, f3, f3
    5610:	2400000a 	strcs	r0, [r0], #-10
    5614:	00000a6b 	andeq	r0, r0, fp, ror #20
    5618:	00002258 	andeq	r2, r0, r8, asr r2
    561c:	000a7833 	andeq	r7, sl, r3, lsr r8
    5620:	0a854300 	beq	fe156228 <_estack+0xde151228>
    5624:	00000000 	andeq	r0, r0, r0
    5628:	00017400 	andeq	r7, r1, r0, lsl #8
    562c:	3d000300 	stccc	3, cr0, [r0, #-0]
    5630:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    5634:	0000ac01 	andeq	sl, r0, r1, lsl #24
    5638:	19810c00 	stmibne	r1, {sl, fp}
    563c:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    5640:	0a200000 	beq	805648 <__ccfg+0x7e56a0>
    5644:	00000000 	andeq	r0, r0, r0
    5648:	3e820000 	cdpcc	0, 8, cr0, cr2, cr0, {0}
    564c:	01020000 	mrseq	r0, (UNDEF: 2)
    5650:	000c5d06 	andeq	r5, ip, r6, lsl #26
    5654:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    5658:	00000a6b 	andeq	r0, r0, fp, ror #20
    565c:	fd050402 	stc2	4, cr0, [r5, #-8]
    5660:	02000007 	andeq	r0, r0, #7
    5664:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    5668:	01020000 	mrseq	r0, (UNDEF: 2)
    566c:	000c5b08 	andeq	r5, ip, r8, lsl #22
    5670:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5674:	00000d66 	andeq	r0, r0, r6, ror #26
    5678:	0029b403 	eoreq	fp, r9, r3, lsl #8
    567c:	19340200 	ldmdbne	r4!, {r9}
    5680:	0000005b 	andeq	r0, r0, fp, asr r0
    5684:	26070402 	strcs	r0, [r7], -r2, lsl #8
    5688:	02000004 	andeq	r0, r0, #4
    568c:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    5690:	04040000 	streq	r0, [r4], #-0
    5694:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5698:	07040200 	streq	r0, [r4, -r0, lsl #4]
    569c:	0000042b 	andeq	r0, r0, fp, lsr #8
    56a0:	00820405 	addeq	r0, r2, r5, lsl #8
    56a4:	77060000 	strvc	r0, [r6, -r0]
    56a8:	07000000 	streq	r0, [r0, -r0]
    56ac:	4f040501 	svcmi	0x00040501
    56b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    56b4:	00001974 	andeq	r1, r0, r4, ror r9
    56b8:	4f117f01 	svcmi	0x00117f01
    56bc:	01000000 	mrseq	r0, (UNDEF: 0)
    56c0:	47530801 	ldrbmi	r0, [r3, -r1, lsl #16]
    56c4:	80010000 	andhi	r0, r1, r0
    56c8:	00004f11 	andeq	r4, r0, r1, lsl pc
    56cc:	08010100 	stmdaeq	r1, {r8}
    56d0:	000019c5 	andeq	r1, r0, r5, asr #19
    56d4:	4f118101 	svcmi	0x00118101
    56d8:	01000000 	mrseq	r0, (UNDEF: 0)
    56dc:	19c00801 	stmibne	r0, {r0, fp}^
    56e0:	82010000 	andhi	r0, r1, #0
    56e4:	00004f11 	andeq	r4, r0, r1, lsl pc
    56e8:	08010100 	stmdaeq	r1, {r8}
    56ec:	0000197b 	andeq	r1, r0, fp, ror r9
    56f0:	4f118301 	svcmi	0x00118301
    56f4:	01000000 	mrseq	r0, (UNDEF: 0)
    56f8:	19460801 	stmdbne	r6, {r0, fp}^
    56fc:	84010000 	strhi	r0, [r1], #-0
    5700:	00004f11 	andeq	r4, r0, r1, lsl pc
    5704:	09010100 	stmdbeq	r1, {r8}
    5708:	0000007d 	andeq	r0, r0, sp, ror r0
    570c:	000000ee 	andeq	r0, r0, lr, ror #1
    5710:	0000700a 	andeq	r7, r0, sl
    5714:	06003100 	streq	r3, [r0], -r0, lsl #2
    5718:	000000de 	ldrdeq	r0, [r0], -lr
    571c:	0019de0b 	andseq	sp, r9, fp, lsl #28
    5720:	0f8e0100 	svceq	0x008e0100
    5724:	000000ee 	andeq	r0, r0, lr, ror #1
    5728:	00030501 	andeq	r0, r3, r1, lsl #10
    572c:	0c000000 	stceq	0, cr0, [r0], {-0}
    5730:	000019cc 	andeq	r1, r0, ip, asr #19
    5734:	01012801 	tsteq	r1, r1, lsl #16
    5738:	0024b601 	eoreq	fp, r4, r1, lsl #12
    573c:	0024b800 	eoreq	fp, r4, r0, lsl #16
    5740:	0c9c0100 	ldfeqs	f0, [ip], {0}
    5744:	00001957 	andeq	r1, r0, r7, asr r9
    5748:	01011601 	tsteq	r1, r1, lsl #12
    574c:	0024b401 	eoreq	fp, r4, r1, lsl #8
    5750:	0024b600 	eoreq	fp, r4, r0, lsl #12
    5754:	0c9c0100 	ldfeqs	f0, [ip], {0}
    5758:	00001967 	andeq	r1, r0, r7, ror #18
    575c:	01010401 	tsteq	r1, r1, lsl #8
    5760:	0024b201 	eoreq	fp, r4, r1, lsl #4
    5764:	0024b400 	eoreq	fp, r4, r0, lsl #8
    5768:	0d9c0100 	ldfeqs	f0, [ip]
    576c:	0019f501 	andseq	pc, r9, r1, lsl #10
    5770:	01d20100 	bicseq	r0, r2, r0, lsl #2
    5774:	0024b801 	eoreq	fp, r4, r1, lsl #16
    5778:	0024fc00 	eoreq	pc, r4, r0, lsl #24
    577c:	0e9c0100 	fmleqe	f0, f4, f0
    5780:	0000194e 	andeq	r1, r0, lr, asr #18
    5784:	840fd401 	strhi	sp, [pc], #-1025	; 578c <patchGenfskRfe+0x4d0>
    5788:	6b000000 	blvs	5790 <patchGenfskRfe+0x4d4>
    578c:	0e000022 	cdpeq	0, 0, cr0, cr0, cr2, {1}
    5790:	000019eb 	andeq	r1, r0, fp, ror #19
    5794:	841ad401 	ldrhi	sp, [sl], #-1025	; 0xfffffbff
    5798:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    579c:	00000022 	andeq	r0, r0, r2, lsr #32
    57a0:	00053700 	andeq	r3, r5, r0, lsl #14
    57a4:	02000300 	andeq	r0, r0, #0, 6
    57a8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    57ac:	0000ac01 	andeq	sl, r0, r1, lsl #24
    57b0:	1a8d0c00 	bne	fe3487b8 <_estack+0xde3437b8>
    57b4:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    57b8:	3faa0000 	svccc	0x00aa0000
    57bc:	01020000 	mrseq	r0, (UNDEF: 2)
    57c0:	000c5d06 	andeq	r5, ip, r6, lsl #26
    57c4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    57c8:	00000a6b 	andeq	r0, r0, fp, ror #20
    57cc:	fd050402 	stc2	4, cr0, [r5, #-8]
    57d0:	02000007 	andeq	r0, r0, #7
    57d4:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    57d8:	1c030000 	stcne	0, cr0, [r3], {-0}
    57dc:	0100002a 	tsteq	r0, sl, lsr #32
    57e0:	0045182e 	subeq	r1, r5, lr, lsr #16
    57e4:	01020000 	mrseq	r0, (UNDEF: 2)
    57e8:	000c5b08 	andeq	r5, ip, r8, lsl #22
    57ec:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    57f0:	31010000 	mrscc	r0, (UNDEF: 1)
    57f4:	00005819 	andeq	r5, r0, r9, lsl r8
    57f8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    57fc:	00000d66 	andeq	r0, r0, r6, ror #26
    5800:	0029b403 	eoreq	fp, r9, r3, lsl #8
    5804:	19340100 	ldmdbne	r4!, {r8}
    5808:	0000006b 	andeq	r0, r0, fp, rrx
    580c:	26070402 	strcs	r0, [r7], -r2, lsl #8
    5810:	02000004 	andeq	r0, r0, #4
    5814:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    5818:	04040000 	streq	r0, [r4], #-0
    581c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5820:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5824:	0000042b 	andeq	r0, r0, fp, lsr #8
    5828:	2f025805 	svccs	0x00025805
    582c:	0001af09 	andeq	sl, r1, r9, lsl #30
    5830:	1bb00600 	blne	fec07038 <_estack+0xdec02038>
    5834:	31020000 	mrscc	r0, (UNDEF: 2)
    5838:	00005f10 	andeq	r5, r0, r0, lsl pc
    583c:	c5060000 	strgt	r0, [r6, #-0]
    5840:	0200001a 	andeq	r0, r0, #26
    5844:	005f1032 	subseq	r1, pc, r2, lsr r0	; <UNPREDICTABLE>
    5848:	06040000 	streq	r0, [r4], -r0
    584c:	00001a55 	andeq	r1, r0, r5, asr sl
    5850:	5f103302 	svcpl	0x00103302
    5854:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5858:	001a3f06 	andseq	r3, sl, r6, lsl #30
    585c:	10340200 	eorsne	r0, r4, r0, lsl #4
    5860:	0000005f 	andeq	r0, r0, pc, asr r0
    5864:	19fe060c 	ldmibne	lr!, {r2, r3, r9, sl}^
    5868:	35020000 	strcc	r0, [r2, #-0]
    586c:	00005f10 	andeq	r5, r0, r0, lsl pc
    5870:	0f061000 	svceq	0x00061000
    5874:	0200001a 	andeq	r0, r0, #26
    5878:	005f1036 	subseq	r1, pc, r6, lsr r0	; <UNPREDICTABLE>
    587c:	06140000 	ldreq	r0, [r4], -r0
    5880:	00001a2f 	andeq	r1, r0, pc, lsr #20
    5884:	5f103702 	svcpl	0x00103702
    5888:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    588c:	001b5506 	andseq	r5, fp, r6, lsl #10
    5890:	10380200 	eorsne	r0, r8, r0, lsl #4
    5894:	0000005f 	andeq	r0, r0, pc, asr r0
    5898:	1a6d061c 	bne	1b47110 <__ccfg+0x1b27168>
    589c:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    58a0:	00005f10 	andeq	r5, r0, r0, lsl pc
    58a4:	7d062000 	stcvc	0, cr2, [r6, #-0]
    58a8:	0200001a 	andeq	r0, r0, #26
    58ac:	005f103a 	subseq	r1, pc, sl, lsr r0	; <UNPREDICTABLE>
    58b0:	06240000 	strteq	r0, [r4], -r0
    58b4:	00001b7b 	andeq	r1, r0, fp, ror fp
    58b8:	5f103b02 	svcpl	0x00103b02
    58bc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    58c0:	001b8b06 	andseq	r8, fp, r6, lsl #22
    58c4:	103c0200 	eorsne	r0, ip, r0, lsl #4
    58c8:	0000005f 	andeq	r0, r0, pc, asr r0
    58cc:	1a20062c 	bne	807184 <__ccfg+0x7e71dc>
    58d0:	3d020000 	stccc	0, cr0, [r2, #-0]
    58d4:	00005f10 	andeq	r5, r0, r0, lsl pc
    58d8:	1b063000 	blne	1918e0 <__ccfg+0x171938>
    58dc:	0200001b 	andeq	r0, r0, #27
    58e0:	005f103e 	subseq	r1, pc, lr, lsr r0	; <UNPREDICTABLE>
    58e4:	06340000 	ldrteq	r0, [r4], -r0
    58e8:	00001bc0 	andeq	r1, r0, r0, asr #23
    58ec:	5f103f02 	svcpl	0x00103f02
    58f0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    58f4:	001ad606 	andseq	sp, sl, r6, lsl #12
    58f8:	10400200 	subne	r0, r0, r0, lsl #4
    58fc:	0000005f 	andeq	r0, r0, pc, asr r0
    5900:	1aea063c 	bne	ffa871f8 <_estack+0xdfa821f8>
    5904:	41020000 	mrsmi	r0, (UNDEF: 2)
    5908:	00005f10 	andeq	r5, r0, r0, lsl pc
    590c:	3f064000 	svccc	0x00064000
    5910:	0200001b 	andeq	r0, r0, #27
    5914:	005f1042 	subseq	r1, pc, r2, asr #32
    5918:	06440000 	strbeq	r0, [r4], -r0
    591c:	00001b2b 	andeq	r1, r0, fp, lsr #22
    5920:	5f104302 	svcpl	0x00104302
    5924:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    5928:	001b6606 	andseq	r6, fp, r6, lsl #12
    592c:	10440200 	subne	r0, r4, r0, lsl #4
    5930:	0000005f 	andeq	r0, r0, pc, asr r0
    5934:	1b9b064c 	blne	fe6c726c <_estack+0xde6c226c>
    5938:	45020000 	strmi	r0, [r2, #-0]
    593c:	00005f10 	andeq	r5, r0, r0, lsl pc
    5940:	05065000 	streq	r5, [r6, #-0]
    5944:	0200001b 	andeq	r0, r0, #27
    5948:	005f1046 	subseq	r1, pc, r6, asr #32
    594c:	00540000 	subseq	r0, r4, r0
    5950:	001afe03 	andseq	pc, sl, r3, lsl #28
    5954:	03470200 	movteq	r0, #29184	; 0x7200
    5958:	00000087 	andeq	r0, r0, r7, lsl #1
    595c:	0001af07 	andeq	sl, r1, r7, lsl #30
    5960:	1a4e0800 	bne	1387968 <__ccfg+0x13679c0>
    5964:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    5968:	0001bb15 	andeq	fp, r1, r5, lsl fp
    596c:	03010100 	movweq	r0, #4352	; 0x1100
    5970:	000028fb 	strdeq	r2, [r0], -fp
    5974:	4c122703 	ldcmi	7, cr2, [r2], {3}
    5978:	07000000 	streq	r0, [r0, -r0]
    597c:	000001ce 	andeq	r0, r0, lr, asr #3
    5980:	0001ce09 	andeq	ip, r1, r9, lsl #28
    5984:	1dc20300 	stclne	3, cr0, [r2]
    5988:	2b030000 	blcs	c5990 <__ccfg+0xa59e8>
    598c:	00003912 	andeq	r3, r0, r2, lsl r9
    5990:	01e40900 	mvneq	r0, r0, lsl #18
    5994:	4d030000 	stcmi	0, cr0, [r3, #-0]
    5998:	03000029 	movweq	r0, #41	; 0x29
    599c:	005f122c 	subseq	r1, pc, ip, lsr #4
    59a0:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
    59a4:	03000001 	movweq	r0, #1
    59a8:	00000646 	andeq	r0, r0, r6, asr #12
    59ac:	5f122d03 	svcpl	0x00122d03
    59b0:	05000000 	streq	r0, [r0, #-0]
    59b4:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    59b8:	000002a0 	andeq	r0, r0, r0, lsr #5
    59bc:	0000340a 	andeq	r3, r0, sl, lsl #8
    59c0:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    59c4:	000001e4 	andeq	r0, r0, r4, ror #3
    59c8:	00070101 	andeq	r0, r7, r1, lsl #2
    59cc:	00064c0a 	andeq	r4, r6, sl, lsl #24
    59d0:	03350300 	teqeq	r5, #0, 6
    59d4:	000001e4 	andeq	r0, r0, r4, ror #3
    59d8:	00060101 	andeq	r0, r6, r1, lsl #2
    59dc:	0002e70a 	andeq	lr, r2, sl, lsl #14
    59e0:	03360300 	teqeq	r6, #0, 6
    59e4:	000001e4 	andeq	r0, r0, r4, ror #3
    59e8:	00050101 	andeq	r0, r5, r1, lsl #2
    59ec:	0006b70a 	andeq	fp, r6, sl, lsl #14
    59f0:	03370300 	teqeq	r7, #0, 6
    59f4:	000001e4 	andeq	r0, r0, r4, ror #3
    59f8:	00040101 	andeq	r0, r4, r1, lsl #2
    59fc:	000a9f0a 	andeq	r9, sl, sl, lsl #30
    5a00:	03380300 	teqeq	r8, #0, 6
    5a04:	000001e4 	andeq	r0, r0, r4, ror #3
    5a08:	00000401 	andeq	r0, r0, r1, lsl #8
    5a0c:	00065b06 	andeq	r5, r6, r6, lsl #22
    5a10:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    5a14:	000001e4 	andeq	r0, r0, r4, ror #3
    5a18:	08fb0601 	ldmeq	fp!, {r0, r9, sl}^
    5a1c:	3c030000 	stccc	0, cr0, [r3], {-0}
    5a20:	0001e403 	andeq	lr, r1, r3, lsl #8
    5a24:	3a060200 	bcc	18622c <__ccfg+0x166284>
    5a28:	0300000f 	movweq	r0, #15
    5a2c:	01e4033d 	mvneq	r0, sp, lsr r3
    5a30:	06030000 	streq	r0, [r3], -r0
    5a34:	00000913 	andeq	r0, r0, r3, lsl r9
    5a38:	f5083f03 			; <UNDEFINED> instruction: 0xf5083f03
    5a3c:	04000001 	streq	r0, [r0], #-1
    5a40:	031d0300 	tsteq	sp, #0, 6
    5a44:	41030000 	mrsmi	r0, (UNDEF: 3)
    5a48:	00021203 	andeq	r1, r2, r3, lsl #4
    5a4c:	02a00900 	adceq	r0, r0, #0, 18
    5a50:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    5a54:	03000006 	movweq	r0, #6
    5a58:	02ac1a43 	adceq	r1, ip, #274432	; 0x43000
    5a5c:	01010000 	mrseq	r0, (UNDEF: 1)
    5a60:	0001a008 	andeq	sl, r1, r8
    5a64:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    5a68:	000002cd 	andeq	r0, r0, sp, asr #5
    5a6c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5a70:	000002d3 	ldrdeq	r0, [r0], -r3
    5a74:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    5a78:	0700000c 	streq	r0, [r0, -ip]
    5a7c:	000002d3 	ldrdeq	r0, [r0], -r3
    5a80:	00032608 	andeq	r2, r3, r8, lsl #12
    5a84:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    5a88:	000002cd 	andeq	r0, r0, sp, asr #5
    5a8c:	08050101 	stmdaeq	r5, {r0, r8}
    5a90:	1e098f04 	cdpne	15, 0, cr8, cr9, cr4, {0}
    5a94:	06000003 	streq	r0, [r0], -r3
    5a98:	00000cd8 	ldrdeq	r0, [r0], -r8
    5a9c:	5f0b9004 	svcpl	0x000b9004
    5aa0:	00000000 	andeq	r0, r0, r0
    5aa4:	00107506 	andseq	r7, r0, r6, lsl #10
    5aa8:	08910400 	ldmeq	r1, {sl}
    5aac:	000001ce 	andeq	r0, r0, lr, asr #3
    5ab0:	01c50604 	biceq	r0, r5, r4, lsl #12
    5ab4:	92040000 	andls	r0, r4, #0
    5ab8:	0001f010 	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    5abc:	03000600 	movweq	r0, #1536	; 0x600
    5ac0:	00000ccc 	andeq	r0, r0, ip, asr #25
    5ac4:	ed039304 	stc	3, cr9, [r3, #-16]
    5ac8:	0c000002 	stceq	0, cr0, [r0], {2}
    5acc:	0000031e 	andeq	r0, r0, lr, lsl r3
    5ad0:	00000335 	andeq	r0, r0, r5, lsr r3
    5ad4:	3d08000d 	stccc	0, cr0, [r8, #-52]	; 0xffffffcc
    5ad8:	04000009 	streq	r0, [r0], #-9
    5adc:	032a0f99 			; <UNDEFINED> instruction: 0x032a0f99
    5ae0:	01010000 	mrseq	r0, (UNDEF: 1)
    5ae4:	91050105 	tstls	r5, r5, lsl #2
    5ae8:	00036d09 	andeq	r6, r3, r9, lsl #26
    5aec:	091a0a00 	ldmdbeq	sl, {r9, fp}
    5af0:	93050000 	movwls	r0, #20480	; 0x5000
    5af4:	0001e407 	andeq	lr, r1, r7, lsl #8
    5af8:	01070100 	mrseq	r0, (UNDEF: 23)
    5afc:	05cc0a00 	strbeq	r0, [ip, #2560]	; 0xa00
    5b00:	94050000 	strls	r0, [r5], #-0
    5b04:	0001e403 	andeq	lr, r1, r3, lsl #8
    5b08:	00010100 	andeq	r0, r1, r0, lsl #2
    5b0c:	ab030000 	blge	c5b14 <__ccfg+0xa5b6c>
    5b10:	0500000a 	streq	r0, [r0, #-10]
    5b14:	03430396 	movteq	r0, #13206	; 0x3396
    5b18:	6d070000 	stcvs	0, cr0, [r7, #-0]
    5b1c:	0c000003 	stceq	0, cr0, [r0], {3}
    5b20:	00000379 	andeq	r0, r0, r9, ror r3
    5b24:	00000389 	andeq	r0, r0, r9, lsl #7
    5b28:	7e07000d 	cdpvc	0, 0, cr0, cr7, cr13, {0}
    5b2c:	08000003 	stmdaeq	r0, {r0, r1}
    5b30:	000003aa 	andeq	r0, r0, sl, lsr #7
    5b34:	89179c05 	ldmdbhi	r7, {r0, r2, sl, fp, ip, pc}
    5b38:	01000003 	tsteq	r0, r3
    5b3c:	01da0c01 	bicseq	r0, sl, r1, lsl #24
    5b40:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
    5b44:	000d0000 	andeq	r0, sp, r0
    5b48:	00039c07 	andeq	r9, r3, r7, lsl #24
    5b4c:	060e0800 	streq	r0, [lr], -r0, lsl #16
    5b50:	06060000 	streq	r0, [r6], -r0
    5b54:	0003a713 	andeq	sl, r3, r3, lsl r7
    5b58:	08010100 	stmdaeq	r1, {r8}
    5b5c:	000008dd 	ldrdeq	r0, [r0], -sp
    5b60:	f50ec304 			; <UNDEFINED> instruction: 0xf50ec304
    5b64:	01000001 	tsteq	r0, r1
    5b68:	0c720e01 	ldcleq	14, cr0, [r2], #-4
    5b6c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    5b70:	03d51001 	bicseq	r1, r5, #1
    5b74:	040b0000 	streq	r0, [fp], #-0
    5b78:	000003db 	ldrdeq	r0, [r0], -fp
    5b7c:	03e7010f 	mvneq	r0, #-1073741821	; 0xc0000003
    5b80:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    5b84:	00000001 	andeq	r0, r0, r1
    5b88:	0002da0c 	andeq	sp, r2, ip, lsl #20
    5b8c:	0003f200 	andeq	pc, r3, r0, lsl #4
    5b90:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    5b94:	000003e7 	andeq	r0, r0, r7, ror #7
    5b98:	0009e611 	andeq	lr, r9, r1, lsl r6
    5b9c:	017f0700 	cmneq	pc, r0, lsl #14
    5ba0:	0003f216 	andeq	pc, r3, r6, lsl r2	; <UNPREDICTABLE>
    5ba4:	11010100 	mrsne	r0, (UNDEF: 17)
    5ba8:	00000396 	muleq	r0, r6, r3
    5bac:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    5bb0:	00000201 	andeq	r0, r0, r1, lsl #4
    5bb4:	6e110101 	mufvss	f0, f1, f1
    5bb8:	07000003 	streq	r0, [r0, -r3]
    5bbc:	f50e02d8 			; <UNDEFINED> instruction: 0xf50e02d8
    5bc0:	01000001 	tsteq	r0, r1
    5bc4:	07081201 	streq	r1, [r8, -r1, lsl #4]
    5bc8:	4b090303 	blmi	2467dc <__ccfg+0x226834>
    5bcc:	13000004 	movwne	r0, #4
    5bd0:	00003ca1 	andeq	r3, r0, r1, lsr #25
    5bd4:	07030707 	streq	r0, [r3, -r7, lsl #14]
    5bd8:	000001ce 	andeq	r0, r0, lr, asr #3
    5bdc:	0fcd1300 	svceq	0x00cd1300
    5be0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    5be4:	02060803 	andeq	r0, r6, #196608	; 0x30000
    5be8:	00040000 	andeq	r0, r4, r0
    5bec:	000a090e 	andeq	r0, sl, lr, lsl #18
    5bf0:	03090700 	movweq	r0, #38656	; 0x9700
    5bf4:	00042403 	andeq	r2, r4, r3, lsl #8
    5bf8:	00291400 	eoreq	r1, r9, r0, lsl #8
    5bfc:	07300000 	ldreq	r0, [r0, -r0]!
    5c00:	bb08030b 	bllt	206834 <__ccfg+0x1e688c>
    5c04:	13000004 	movwne	r0, #4
    5c08:	00001f24 	andeq	r1, r0, r4, lsr #30
    5c0c:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    5c10:	000001ce 	andeq	r0, r0, lr, asr #3
    5c14:	0be71300 	bleq	ff9ca81c <_estack+0xdf9c581c>
    5c18:	15070000 	strne	r0, [r7, #-0]
    5c1c:	01ce0803 	biceq	r0, lr, r3, lsl #16
    5c20:	13020000 	movwne	r0, #8192	; 0x2000
    5c24:	00004c8e 	andeq	r4, r0, lr, lsl #25
    5c28:	0b031607 	bleq	cb44c <__ccfg+0xab4a4>
    5c2c:	000003c8 	andeq	r0, r0, r8, asr #7
    5c30:	47541304 	ldrbmi	r1, [r4, -r4, lsl #6]
    5c34:	17070000 	strne	r0, [r7, -r0]
    5c38:	02060903 	andeq	r0, r6, #49152	; 0xc000
    5c3c:	13080000 	movwne	r0, #32768	; 0x8000
    5c40:	0000000f 	andeq	r0, r0, pc
    5c44:	0f031807 	svceq	0x00031807
    5c48:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    5c4c:	095d130c 	ldmdbeq	sp, {r2, r3, r8, r9, ip}^
    5c50:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    5c54:	04cb1503 	strbeq	r1, [fp], #1283	; 0x503
    5c58:	002c0000 	eoreq	r0, ip, r0
    5c5c:	00044b0c 	andeq	r4, r4, ip, lsl #22
    5c60:	0004cb00 	andeq	ip, r4, r0, lsl #22
    5c64:	00801500 	addeq	r1, r0, r0, lsl #10
    5c68:	00030000 	andeq	r0, r3, r0
    5c6c:	0458040b 	ldrbeq	r0, [r8], #-1035	; 0xfffffbf5
    5c70:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    5c74:	0700000b 	streq	r0, [r0, -fp]
    5c78:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    5c7c:	11000004 	tstne	r0, r4
    5c80:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    5c84:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    5c88:	000004ed 	andeq	r0, r0, sp, ror #9
    5c8c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5c90:	000004d1 	ldrdeq	r0, [r0], -r1
    5c94:	00070f08 	andeq	r0, r7, r8, lsl #30
    5c98:	131d0800 	tstne	sp, #0, 16
    5c9c:	000001ce 	andeq	r0, r0, lr, asr #3
    5ca0:	ee080101 	adfe	f0, f0, f1
    5ca4:	08000002 	stmdaeq	r0, {r1}
    5ca8:	01df1a1e 	bicseq	r1, pc, lr, lsl sl	; <UNPREDICTABLE>
    5cac:	01010000 	mrseq	r0, (UNDEF: 1)
    5cb0:	000c6908 	andeq	r6, ip, r8, lsl #18
    5cb4:	241e0800 	ldrcs	r0, [lr], #-2048	; 0xfffff800
    5cb8:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5cbc:	87080101 	strhi	r0, [r8, -r1, lsl #2]
    5cc0:	0800000c 	stmdaeq	r0, {r2, r3}
    5cc4:	04ed1422 	strbteq	r1, [sp], #1058	; 0x422
    5cc8:	01010000 	mrseq	r0, (UNDEF: 1)
    5ccc:	0001c016 	andeq	ip, r1, r6, lsl r0
    5cd0:	02170900 	andseq	r0, r7, #0, 18
    5cd4:	a803050e 	stmdage	r3, {r1, r2, r3, r8, sl}
    5cd8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5cdc:	00000500 	andeq	r0, r0, r0, lsl #10
    5ce0:	14210003 	strtne	r0, [r1], #-3
    5ce4:	01040000 	mrseq	r0, (UNDEF: 4)
    5ce8:	000000ac 	andeq	r0, r0, ip, lsr #1
    5cec:	001be20c 	andseq	lr, fp, ip, lsl #4
    5cf0:	000e0a00 	andeq	r0, lr, r0, lsl #20
    5cf4:	000a7000 	andeq	r7, sl, r0
    5cf8:	00000000 	andeq	r0, r0, r0
    5cfc:	00413700 	subeq	r3, r1, r0, lsl #14
    5d00:	06010200 	streq	r0, [r1], -r0, lsl #4
    5d04:	00000c5d 	andeq	r0, r0, sp, asr ip
    5d08:	6b050202 	blvs	146518 <__ccfg+0x126570>
    5d0c:	0200000a 	andeq	r0, r0, #10
    5d10:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    5d14:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5d18:	0007f805 	andeq	pc, r7, r5, lsl #16
    5d1c:	2a1c0300 	bcs	706924 <__ccfg+0x6e697c>
    5d20:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    5d24:	00004d18 	andeq	r4, r0, r8, lsl sp
    5d28:	08010200 	stmdaeq	r1, {r9}
    5d2c:	00000c5b 	andeq	r0, r0, fp, asr ip
    5d30:	002e1203 	eoreq	r1, lr, r3, lsl #4
    5d34:	19310400 	ldmdbne	r1!, {sl}
    5d38:	00000060 	andeq	r0, r0, r0, rrx
    5d3c:	66070202 	strvs	r0, [r7], -r2, lsl #4
    5d40:	0300000d 	movweq	r0, #13
    5d44:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    5d48:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    5d4c:	02000000 	andeq	r0, r0, #0
    5d50:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    5d54:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5d58:	00042107 	andeq	r2, r4, r7, lsl #2
    5d5c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5d60:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5d64:	2b070402 	blcs	1c6d74 <__ccfg+0x1a6dcc>
    5d68:	03000004 	movweq	r0, #4
    5d6c:	000028fb 	strdeq	r2, [r0], -fp
    5d70:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    5d74:	05000000 	streq	r0, [r0, #-0]
    5d78:	0000008f 	andeq	r0, r0, pc, lsl #1
    5d7c:	00008f06 	andeq	r8, r0, r6, lsl #30
    5d80:	1dc20300 	stclne	3, cr0, [r2]
    5d84:	2b050000 	blcs	145d8c <__ccfg+0x125de4>
    5d88:	00004112 	andeq	r4, r0, r2, lsl r1
    5d8c:	00a50600 	adceq	r0, r5, r0, lsl #12
    5d90:	a5050000 	strge	r0, [r5, #-0]
    5d94:	03000000 	movweq	r0, #0
    5d98:	0000294d 	andeq	r2, r0, sp, asr #18
    5d9c:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    5da0:	05000000 	streq	r0, [r0, #-0]
    5da4:	000000bb 	strheq	r0, [r0], -fp
    5da8:	00064603 	andeq	r4, r6, r3, lsl #12
    5dac:	122d0500 	eorne	r0, sp, #0, 10
    5db0:	00000067 	andeq	r0, r0, r7, rrx
    5db4:	000bb403 	andeq	fp, fp, r3, lsl #8
    5db8:	102e0500 	eorne	r0, lr, r0, lsl #10
    5dbc:	000000e4 	andeq	r0, r0, r4, ror #1
    5dc0:	008f0407 	addeq	r0, pc, r7, lsl #8
    5dc4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    5dc8:	78093205 	stmdavc	r9, {r0, r2, r9, ip, sp}
    5dcc:	09000001 	stmdbeq	r0, {r0}
    5dd0:	00000034 	andeq	r0, r0, r4, lsr r0
    5dd4:	a5073405 	strge	r3, [r7, #-1029]	; 0xfffffbfb
    5dd8:	01000000 	mrseq	r0, (UNDEF: 0)
    5ddc:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    5de0:	0000064c 	andeq	r0, r0, ip, asr #12
    5de4:	a5033505 	strge	r3, [r3, #-1285]	; 0xfffffafb
    5de8:	01000000 	mrseq	r0, (UNDEF: 0)
    5dec:	09000601 	stmdbeq	r0, {r0, r9, sl}
    5df0:	000002e7 	andeq	r0, r0, r7, ror #5
    5df4:	a5033605 	strge	r3, [r3, #-1541]	; 0xfffff9fb
    5df8:	01000000 	mrseq	r0, (UNDEF: 0)
    5dfc:	09000501 	stmdbeq	r0, {r0, r8, sl}
    5e00:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    5e04:	a5033705 	strge	r3, [r3, #-1797]	; 0xfffff8fb
    5e08:	01000000 	mrseq	r0, (UNDEF: 0)
    5e0c:	09000401 	stmdbeq	r0, {r0, sl}
    5e10:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5e14:	a5033805 	strge	r3, [r3, #-2053]	; 0xfffff7fb
    5e18:	01000000 	mrseq	r0, (UNDEF: 0)
    5e1c:	0a000004 	beq	5e34 <__exidx_end+0x1f4>
    5e20:	0000065b 	andeq	r0, r0, fp, asr r6
    5e24:	a5073a05 	strge	r3, [r7, #-2565]	; 0xfffff5fb
    5e28:	01000000 	mrseq	r0, (UNDEF: 0)
    5e2c:	0008fb0a 	andeq	pc, r8, sl, lsl #22
    5e30:	033c0500 	teqeq	ip, #0, 10
    5e34:	000000a5 	andeq	r0, r0, r5, lsr #1
    5e38:	0f3a0a02 	svceq	0x003a0a02
    5e3c:	3d050000 	stccc	0, cr0, [r5, #-0]
    5e40:	0000a503 	andeq	sl, r0, r3, lsl #10
    5e44:	130a0300 	movwne	r0, #41728	; 0xa300
    5e48:	05000009 	streq	r0, [r0, #-9]
    5e4c:	00bb083f 	adcseq	r0, fp, pc, lsr r8
    5e50:	00040000 	andeq	r0, r4, r0
    5e54:	00031d03 	andeq	r1, r3, r3, lsl #26
    5e58:	03410500 	movteq	r0, #5376	; 0x1500
    5e5c:	000000ea 	andeq	r0, r0, sl, ror #1
    5e60:	00017806 	andeq	r7, r1, r6, lsl #16
    5e64:	06be0b00 	ldrteq	r0, [lr], r0, lsl #22
    5e68:	43050000 	movwmi	r0, #20480	; 0x5000
    5e6c:	0001841a 	andeq	r8, r1, sl, lsl r4
    5e70:	0b010100 	bleq	46278 <__ccfg+0x262d0>
    5e74:	000001a0 	andeq	r0, r0, r0, lsr #3
    5e78:	a50e4505 	strge	r4, [lr, #-1285]	; 0xfffffafb
    5e7c:	01000001 	tsteq	r0, r1
    5e80:	ab040701 	blge	107a8c <__ccfg+0xe7ae4>
    5e84:	02000001 	andeq	r0, r0, #1
    5e88:	0c640801 	stcleq	8, cr0, [r4], #-4
    5e8c:	ab050000 	blge	145e94 <__ccfg+0x125eec>
    5e90:	0b000001 	bleq	5e9c <__exidx_end+0x25c>
    5e94:	00000326 	andeq	r0, r0, r6, lsr #6
    5e98:	a51e4505 	ldrge	r4, [lr, #-1285]	; 0xfffffafb
    5e9c:	01000001 	tsteq	r0, r1
    5ea0:	06080801 	streq	r0, [r8], -r1, lsl #16
    5ea4:	01f6098f 	mvnseq	r0, pc, lsl #19
    5ea8:	d80a0000 	stmdale	sl, {}	; <UNPREDICTABLE>
    5eac:	0600000c 	streq	r0, [r0], -ip
    5eb0:	00670b90 	mlseq	r7, r0, fp, r0
    5eb4:	0a000000 	beq	5ebc <__exidx_end+0x27c>
    5eb8:	00001075 	andeq	r1, r0, r5, ror r0
    5ebc:	8f089106 	svchi	0x00089106
    5ec0:	04000000 	streq	r0, [r0], #-0
    5ec4:	0001c50a 	andeq	ip, r1, sl, lsl #10
    5ec8:	10920600 	addsne	r0, r2, r0, lsl #12
    5ecc:	000000b1 	strheq	r0, [r0], -r1
    5ed0:	cc030006 	stcgt	0, cr0, [r3], {6}
    5ed4:	0600000c 	streq	r0, [r0], -ip
    5ed8:	01c50393 			; <UNDEFINED> instruction: 0x01c50393
    5edc:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    5ee0:	0d000001 	stceq	0, cr0, [r0, #-4]
    5ee4:	0d000002 	stceq	0, cr0, [r0, #-8]
    5ee8:	093d0b00 	ldmdbeq	sp!, {r8, r9, fp}
    5eec:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    5ef0:	0002020f 	andeq	r0, r2, pc, lsl #4
    5ef4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5ef8:	0000b604 	andeq	fp, r0, r4, lsl #12
    5efc:	07010800 	streq	r0, [r1, -r0, lsl #16]
    5f00:	024b0991 	subeq	r0, fp, #2375680	; 0x244000
    5f04:	1a090000 	bne	245f0c <__ccfg+0x225f64>
    5f08:	07000009 	streq	r0, [r0, -r9]
    5f0c:	00a50793 	umlaleq	r0, r5, r3, r7
    5f10:	07010000 	streq	r0, [r1, -r0]
    5f14:	cc090001 	stcgt	0, cr0, [r9], {1}
    5f18:	07000005 	streq	r0, [r0, -r5]
    5f1c:	00a50394 	umlaleq	r0, r5, r4, r3
    5f20:	01010000 	mrseq	r0, (UNDEF: 1)
    5f24:	03000000 	movweq	r0, #0
    5f28:	00000aab 	andeq	r0, r0, fp, lsr #21
    5f2c:	21039607 	tstcs	r3, r7, lsl #12
    5f30:	05000002 	streq	r0, [r0, #-2]
    5f34:	0000024b 	andeq	r0, r0, fp, asr #4
    5f38:	0002570c 	andeq	r5, r2, ip, lsl #14
    5f3c:	00026700 	andeq	r6, r2, r0, lsl #14
    5f40:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5f44:	0000025c 	andeq	r0, r0, ip, asr r2
    5f48:	0003aa0b 	andeq	sl, r3, fp, lsl #20
    5f4c:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    5f50:	00000267 	andeq	r0, r0, r7, ror #4
    5f54:	9b0c0101 	blls	306360 <__ccfg+0x2e63b8>
    5f58:	85000000 	strhi	r0, [r0, #-0]
    5f5c:	0d000002 	stceq	0, cr0, [r0, #-8]
    5f60:	027a0500 	rsbseq	r0, sl, #0, 10
    5f64:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    5f68:	08000006 	stmdaeq	r0, {r1, r2}
    5f6c:	02851306 	addeq	r1, r5, #402653184	; 0x18000000
    5f70:	01010000 	mrseq	r0, (UNDEF: 1)
    5f74:	0008dd0b 	andeq	sp, r8, fp, lsl #26
    5f78:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    5f7c:	000000bb 	strheq	r0, [r0], -fp
    5f80:	720e0101 	andvc	r0, lr, #1073741824	; 0x40000000
    5f84:	0900000c 	stmdbeq	r0, {r2, r3}
    5f88:	b310016e 	tstlt	r0, #-2147483621	; 0x8000001b
    5f8c:	07000002 	streq	r0, [r0, -r2]
    5f90:	0002b904 	andeq	fp, r2, r4, lsl #18
    5f94:	c5010f00 	strgt	r0, [r1, #-3840]	; 0xfffff100
    5f98:	10000002 	andne	r0, r0, r2
    5f9c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5fa0:	01b20c00 			; <UNDEFINED> instruction: 0x01b20c00
    5fa4:	02d00000 	sbcseq	r0, r0, #0
    5fa8:	000d0000 	andeq	r0, sp, r0
    5fac:	0002c505 	andeq	ip, r2, r5, lsl #10
    5fb0:	09e61100 	stmibeq	r6!, {r8, ip}^
    5fb4:	7f090000 	svcvc	0x00090000
    5fb8:	02d01601 	sbcseq	r1, r0, #1048576	; 0x100000
    5fbc:	01010000 	mrseq	r0, (UNDEF: 1)
    5fc0:	00039611 	andeq	r9, r3, r1, lsl r6
    5fc4:	01820900 	orreq	r0, r2, r0, lsl #18
    5fc8:	0000c714 	andeq	ip, r0, r4, lsl r7
    5fcc:	11010100 	mrsne	r0, (UNDEF: 17)
    5fd0:	0000036e 	andeq	r0, r0, lr, ror #6
    5fd4:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    5fd8:	000000bb 	strheq	r0, [r0], -fp
    5fdc:	08120101 	ldmdaeq	r2, {r0, r8}
    5fe0:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    5fe4:	00000329 	andeq	r0, r0, r9, lsr #6
    5fe8:	003ca113 	eorseq	sl, ip, r3, lsl r1
    5fec:	03070900 	movweq	r0, #30976	; 0x7900
    5ff0:	00008f07 	andeq	r8, r0, r7, lsl #30
    5ff4:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    5ff8:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    5ffc:	cc080308 	stcgt	3, cr0, [r8], {8}
    6000:	04000000 	streq	r0, [r0], #-0
    6004:	0a090e00 	beq	24980c <__ccfg+0x229864>
    6008:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    600c:	03020303 	movweq	r0, #8963	; 0x2303
    6010:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    6014:	30000000 	andcc	r0, r0, r0
    6018:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    601c:	00000399 	muleq	r0, r9, r3
    6020:	001f2413 	andseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
    6024:	03140900 	tsteq	r4, #0, 18
    6028:	00008f08 	andeq	r8, r0, r8, lsl #30
    602c:	e7130000 	ldr	r0, [r3, -r0]
    6030:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6034:	8f080315 	svchi	0x00080315
    6038:	02000000 	andeq	r0, r0, #0
    603c:	004c8e13 	subeq	r8, ip, r3, lsl lr
    6040:	03160900 	tsteq	r6, #0, 18
    6044:	0002a60b 	andeq	sl, r2, fp, lsl #12
    6048:	54130400 	ldrpl	r0, [r3], #-1024	; 0xfffffc00
    604c:	09000047 	stmdbeq	r0, {r0, r1, r2, r6}
    6050:	cc090317 	stcgt	3, cr0, [r9], {23}
    6054:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6058:	00000f13 	andeq	r0, r0, r3, lsl pc
    605c:	03180900 	tsteq	r8, #0, 18
    6060:	0003990f 	andeq	r9, r3, pc, lsl #18
    6064:	5d130c00 	ldcpl	12, cr0, [r3, #-0]
    6068:	09000009 	stmdbeq	r0, {r0, r3}
    606c:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    6070:	2c000003 	stccs	0, cr0, [r0], {3}
    6074:	03290c00 			; <UNDEFINED> instruction: 0x03290c00
    6078:	03a90000 			; <UNDEFINED> instruction: 0x03a90000
    607c:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    6080:	03000000 	movweq	r0, #0
    6084:	36040700 	strcc	r0, [r4], -r0, lsl #14
    6088:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    608c:	00000bdc 	ldrdeq	r0, [r0], -ip
    6090:	1b031c09 	blne	cd0bc <__ccfg+0xad114>
    6094:	00000336 	andeq	r0, r0, r6, lsr r3
    6098:	000bbc11 	andeq	fp, fp, r1, lsl ip
    609c:	031e0900 	tsteq	lr, #0, 18
    60a0:	0003cb14 	andeq	ip, r3, r4, lsl fp
    60a4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    60a8:	0003af04 	andeq	sl, r3, r4, lsl #30
    60ac:	070f0b00 	streq	r0, [pc, -r0, lsl #22]
    60b0:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    60b4:	00008f13 	andeq	r8, r0, r3, lsl pc
    60b8:	0b010100 	bleq	464c0 <__ccfg+0x26518>
    60bc:	000002ee 	andeq	r0, r0, lr, ror #5
    60c0:	a01a1e0a 	andsge	r1, sl, sl, lsl #28
    60c4:	01000000 	mrseq	r0, (UNDEF: 0)
    60c8:	0c690b01 			; <UNDEFINED> instruction: 0x0c690b01
    60cc:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    60d0:	0000a024 	andeq	sl, r0, r4, lsr #32
    60d4:	0b010100 	bleq	464dc <__ccfg+0x26534>
    60d8:	00000c87 	andeq	r0, r0, r7, lsl #25
    60dc:	cb14220a 	blgt	50e90c <__ccfg+0x4ee964>
    60e0:	01000003 	tsteq	r0, r3
    60e4:	026c1601 	rsbeq	r1, ip, #1048576	; 0x100000
    60e8:	0d010000 	stceq	0, cr0, [r1, #-0]
    60ec:	3d030510 	cfstr32cc	mvfx0, [r3, #-64]	; 0xffffffc0
    60f0:	17000052 	smlsdne	r0, r2, r0, r0
    60f4:	001c2c01 	andseq	r2, ip, r1, lsl #24
    60f8:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    60fc:	00000001 	andeq	r0, r0, r1
    6100:	00000000 	andeq	r0, r0, r0
    6104:	bb9c0100 	bllt	fe70650c <_estack+0xde70150c>
    6108:	18000004 	stmdane	r0, {r2}
    610c:	01007473 	tsteq	r0, r3, ror r4
    6110:	008f1c11 	addeq	r1, pc, r1, lsl ip	; <UNPREDICTABLE>
    6114:	22a70000 	adccs	r0, r7, #0
    6118:	27190000 	ldrcs	r0, [r9, -r0]
    611c:	0100001c 	tsteq	r0, ip, lsl r0
    6120:	021b2c11 	andseq	r2, fp, #4352	; 0x1100
    6124:	22c50000 	sbccs	r0, r5, #0
    6128:	76180000 	ldrvc	r0, [r8], -r0
    612c:	01006c61 	tsteq	r0, r1, ror #24
    6130:	00d83a11 	sbcseq	r3, r8, r1, lsl sl
    6134:	22e30000 	rsccs	r0, r3, #0
    6138:	701a0000 	andsvc	r0, sl, r0
    613c:	12130100 	andsne	r0, r3, #0, 2
    6140:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    6144:	0100691b 	tsteq	r0, fp, lsl r9
    6148:	008f0714 	addeq	r0, pc, r4, lsl r7	; <UNPREDICTABLE>
    614c:	23010000 	movwcs	r0, #4096	; 0x1000
    6150:	761a0000 	ldrvc	r0, [sl], -r0
    6154:	07150100 	ldreq	r0, [r5, -r0, lsl #2]
    6158:	000000a5 	andeq	r0, r0, r5, lsr #1
    615c:	0004d41c 	andeq	sp, r4, ip, lsl r4
	...
    6168:	031c0100 	tsteq	ip, #0, 2
    616c:	0004de1c 	andeq	sp, r4, ip, lsl lr
	...
    6178:	031f0100 	tsteq	pc, #0, 2
    617c:	0004e81d 	andeq	lr, r4, sp, lsl r8
    6180:	00000000 	andeq	r0, r0, r0
    6184:	000a4800 	andeq	r4, sl, r0, lsl #16
    6188:	0b260100 	bleq	986590 <__ccfg+0x9665e8>
    618c:	0004f61e 	andeq	pc, r4, lr, lsl r6	; <UNPREDICTABLE>
    6190:	00231400 	eoreq	r1, r3, r0, lsl #8
    6194:	07000000 	streq	r0, [r0, -r0]
    6198:	00025704 	andeq	r5, r2, r4, lsl #14
    619c:	3c011f00 	stccc	15, cr1, [r1], {-0}
    61a0:	0100001c 	tsteq	r0, ip, lsl r0
    61a4:	0000060f 	andeq	r0, r0, pc, lsl #12
    61a8:	00000000 	andeq	r0, r0, r0
    61ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    61b0:	00127e20 	andseq	r7, r2, r0, lsr #28
    61b4:	355b0200 	ldrbcc	r0, [fp, #-512]	; 0xfffffe00
    61b8:	9e200301 	cdpls	3, 2, cr0, cr0, cr1, {0}
    61bc:	0200000f 	andeq	r0, r0, #15
    61c0:	03013550 	movweq	r3, #5456	; 0x1550
    61c4:	001bd521 	andseq	sp, fp, r1, lsr #10
    61c8:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    61cc:	00006701 	andeq	r6, r0, r1, lsl #14
    61d0:	21220300 			; <UNDEFINED> instruction: 0x21220300
    61d4:	03000011 	movweq	r0, #17
    61d8:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    61dc:	00000000 	andeq	r0, r0, r0
    61e0:	000004f6 	strdeq	r0, [r0], -r6
    61e4:	16120003 	ldrne	r0, [r2], -r3
    61e8:	01040000 	mrseq	r0, (UNDEF: 4)
    61ec:	000000ac 	andeq	r0, r0, ip, lsr #1
    61f0:	001c860c 	andseq	r8, ip, ip, lsl #12
    61f4:	000e0a00 	andeq	r0, lr, r0, lsl #20
    61f8:	000ae800 	andeq	lr, sl, r0, lsl #16
    61fc:	00000000 	andeq	r0, r0, r0
    6200:	0043d900 	subeq	sp, r3, r0, lsl #18
    6204:	06010200 	streq	r0, [r1], -r0, lsl #4
    6208:	00000c5d 	andeq	r0, r0, sp, asr ip
    620c:	6b050202 	blvs	146a1c <__ccfg+0x126a74>
    6210:	0200000a 	andeq	r0, r0, #10
    6214:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    6218:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    621c:	0007f805 	andeq	pc, r7, r5, lsl #16
    6220:	2a1c0300 	bcs	706e28 <__ccfg+0x6e6e80>
    6224:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    6228:	00004d18 	andeq	r4, r0, r8, lsl sp
    622c:	08010200 	stmdaeq	r1, {r9}
    6230:	00000c5b 	andeq	r0, r0, fp, asr ip
    6234:	002e1203 	eoreq	r1, lr, r3, lsl #4
    6238:	19310300 	ldmdbne	r1!, {r8, r9}
    623c:	00000060 	andeq	r0, r0, r0, rrx
    6240:	66070202 	strvs	r0, [r7], -r2, lsl #4
    6244:	0300000d 	movweq	r0, #13
    6248:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
    624c:	73193403 	tstvc	r9, #50331648	; 0x3000000
    6250:	02000000 	andeq	r0, r0, #0
    6254:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    6258:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    625c:	00042107 	andeq	r2, r4, r7, lsl #2
    6260:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6264:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6268:	2b070402 	blcs	1c7278 <__ccfg+0x1a72d0>
    626c:	03000004 	movweq	r0, #4
    6270:	000028fb 	strdeq	r2, [r0], -fp
    6274:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    6278:	05000000 	streq	r0, [r0, #-0]
    627c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6280:	00008f06 	andeq	r8, r0, r6, lsl #30
    6284:	1dc20300 	stclne	3, cr0, [r2]
    6288:	2b040000 	blcs	106290 <__ccfg+0xe62e8>
    628c:	00004112 	andeq	r4, r0, r2, lsl r1
    6290:	00a50600 	adceq	r0, r5, r0, lsl #12
    6294:	4d030000 	stcmi	0, cr0, [r3, #-0]
    6298:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    629c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    62a0:	b6050000 	strlt	r0, [r5], -r0
    62a4:	03000000 	movweq	r0, #0
    62a8:	00000646 	andeq	r0, r0, r6, asr #12
    62ac:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    62b0:	07000000 	streq	r0, [r0, -r0]
    62b4:	09320408 	ldmdbeq	r2!, {r3, sl}
    62b8:	00000161 	andeq	r0, r0, r1, ror #2
    62bc:	00003408 	andeq	r3, r0, r8, lsl #8
    62c0:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    62c4:	000000a5 	andeq	r0, r0, r5, lsr #1
    62c8:	00070101 	andeq	r0, r7, r1, lsl #2
    62cc:	00064c08 	andeq	r4, r6, r8, lsl #24
    62d0:	03350400 	teqeq	r5, #0, 8
    62d4:	000000a5 	andeq	r0, r0, r5, lsr #1
    62d8:	00060101 	andeq	r0, r6, r1, lsl #2
    62dc:	0002e708 	andeq	lr, r2, r8, lsl #14
    62e0:	03360400 	teqeq	r6, #0, 8
    62e4:	000000a5 	andeq	r0, r0, r5, lsr #1
    62e8:	00050101 	andeq	r0, r5, r1, lsl #2
    62ec:	0006b708 	andeq	fp, r6, r8, lsl #14
    62f0:	03370400 	teqeq	r7, #0, 8
    62f4:	000000a5 	andeq	r0, r0, r5, lsr #1
    62f8:	00040101 	andeq	r0, r4, r1, lsl #2
    62fc:	000a9f08 	andeq	r9, sl, r8, lsl #30
    6300:	03380400 	teqeq	r8, #0, 8
    6304:	000000a5 	andeq	r0, r0, r5, lsr #1
    6308:	00000401 	andeq	r0, r0, r1, lsl #8
    630c:	00065b09 	andeq	r5, r6, r9, lsl #22
    6310:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    6314:	000000a5 	andeq	r0, r0, r5, lsr #1
    6318:	08fb0901 	ldmeq	fp!, {r0, r8, fp}^
    631c:	3c040000 	stccc	0, cr0, [r4], {-0}
    6320:	0000a503 	andeq	sl, r0, r3, lsl #10
    6324:	3a090200 	bcc	246b2c <__ccfg+0x226b84>
    6328:	0400000f 	streq	r0, [r0], #-15
    632c:	00a5033d 	adceq	r0, r5, sp, lsr r3
    6330:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    6334:	00000913 	andeq	r0, r0, r3, lsl r9
    6338:	b6083f04 	strlt	r3, [r8], -r4, lsl #30
    633c:	04000000 	streq	r0, [r0], #-0
    6340:	031d0300 	tsteq	sp, #0, 6
    6344:	41040000 	mrsmi	r0, (UNDEF: 4)
    6348:	0000d303 	andeq	sp, r0, r3, lsl #6
    634c:	01610600 	cmneq	r1, r0, lsl #12
    6350:	be0a0000 	cdplt	0, 0, cr0, cr10, cr0, {0}
    6354:	04000006 	streq	r0, [r0], #-6
    6358:	016d1a43 	cmneq	sp, r3, asr #20
    635c:	01010000 	mrseq	r0, (UNDEF: 1)
    6360:	0001a00a 	andeq	sl, r1, sl
    6364:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    6368:	0000018e 	andeq	r0, r0, lr, lsl #3
    636c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6370:	00000194 	muleq	r0, r4, r1
    6374:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    6378:	0500000c 	streq	r0, [r0, #-12]
    637c:	00000194 	muleq	r0, r4, r1
    6380:	0003260a 	andeq	r2, r3, sl, lsl #12
    6384:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    6388:	0000018e 	andeq	r0, r0, lr, lsl #3
    638c:	08070101 	stmdaeq	r7, {r0, r8}
    6390:	df098f05 	svcle	0x00098f05
    6394:	09000001 	stmdbeq	r0, {r0}
    6398:	00000cd8 	ldrdeq	r0, [r0], -r8
    639c:	670b9005 	strvs	r9, [fp, -r5]
    63a0:	00000000 	andeq	r0, r0, r0
    63a4:	00107509 	andseq	r7, r0, r9, lsl #10
    63a8:	08910500 	ldmeq	r1, {r8, sl}
    63ac:	0000008f 	andeq	r0, r0, pc, lsl #1
    63b0:	01c50904 	biceq	r0, r5, r4, lsl #18
    63b4:	92050000 	andls	r0, r5, #0
    63b8:	0000b110 	andeq	fp, r0, r0, lsl r1
    63bc:	03000600 	movweq	r0, #1536	; 0x600
    63c0:	00000ccc 	andeq	r0, r0, ip, asr #25
    63c4:	ae039305 	cdpge	3, 0, cr9, cr3, cr5, {0}
    63c8:	0c000001 	stceq	0, cr0, [r0], {1}
    63cc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    63d0:	000001f6 	strdeq	r0, [r0], -r6
    63d4:	3d0a000d 	stccc	0, cr0, [sl, #-52]	; 0xffffffcc
    63d8:	05000009 	streq	r0, [r0, #-9]
    63dc:	01eb0f99 	strexheq	r0, r9, [fp]
    63e0:	01010000 	mrseq	r0, (UNDEF: 1)
    63e4:	91060107 	tstls	r6, r7, lsl #2
    63e8:	00022e09 	andeq	r2, r2, r9, lsl #28
    63ec:	091a0800 	ldmdbeq	sl, {fp}
    63f0:	93060000 	movwls	r0, #24576	; 0x6000
    63f4:	0000a507 	andeq	sl, r0, r7, lsl #10
    63f8:	01070100 	mrseq	r0, (UNDEF: 23)
    63fc:	05cc0800 	strbeq	r0, [ip, #2048]	; 0x800
    6400:	94060000 	strls	r0, [r6], #-0
    6404:	0000a503 	andeq	sl, r0, r3, lsl #10
    6408:	00010100 	andeq	r0, r1, r0, lsl #2
    640c:	ab030000 	blge	c6414 <__ccfg+0xa646c>
    6410:	0600000a 	streq	r0, [r0], -sl
    6414:	02040396 	andeq	r0, r4, #1476395010	; 0x58000002
    6418:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    641c:	0c000002 	stceq	0, cr0, [r0], {2}
    6420:	0000023a 	andeq	r0, r0, sl, lsr r2
    6424:	0000024a 	andeq	r0, r0, sl, asr #4
    6428:	3f05000d 	svccc	0x0005000d
    642c:	0a000002 	beq	643c <__exidx_end+0x7fc>
    6430:	000003aa 	andeq	r0, r0, sl, lsr #7
    6434:	4a179c06 	bmi	5ed454 <__ccfg+0x5cd4ac>
    6438:	01000002 	tsteq	r0, r2
    643c:	009b0c01 	addseq	r0, fp, r1, lsl #24
    6440:	02680000 	rsbeq	r0, r8, #0
    6444:	000d0000 	andeq	r0, sp, r0
    6448:	00025d05 	andeq	r5, r2, r5, lsl #26
    644c:	060e0a00 	streq	r0, [lr], -r0, lsl #20
    6450:	06070000 	streq	r0, [r7], -r0
    6454:	00026813 	andeq	r6, r2, r3, lsl r8
    6458:	0a010100 	beq	46860 <__ccfg+0x268b8>
    645c:	000008dd 	ldrdeq	r0, [r0], -sp
    6460:	b60ec305 	strlt	ip, [lr], -r5, lsl #6
    6464:	01000000 	mrseq	r0, (UNDEF: 0)
    6468:	0c720e01 	ldcleq	14, cr0, [r2], #-4
    646c:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    6470:	02961001 	addseq	r1, r6, #1
    6474:	040b0000 	streq	r0, [fp], #-0
    6478:	0000029c 	muleq	r0, ip, r2
    647c:	02a8010f 	adceq	r0, r8, #-1073741821	; 0xc0000003
    6480:	8f100000 	svchi	0x00100000
    6484:	00000000 	andeq	r0, r0, r0
    6488:	00019b0c 	andeq	r9, r1, ip, lsl #22
    648c:	0002b300 	andeq	fp, r2, r0, lsl #6
    6490:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6494:	000002a8 	andeq	r0, r0, r8, lsr #5
    6498:	0009e611 	andeq	lr, r9, r1, lsl r6
    649c:	017f0800 	cmneq	pc, r0, lsl #16
    64a0:	0002b316 	andeq	fp, r2, r6, lsl r3
    64a4:	11010100 	mrsne	r0, (UNDEF: 17)
    64a8:	00000396 	muleq	r0, r6, r3
    64ac:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    64b0:	000000c2 	andeq	r0, r0, r2, asr #1
    64b4:	6e110101 	mufvss	f0, f1, f1
    64b8:	08000003 	stmdaeq	r0, {r0, r1}
    64bc:	b60e02d8 			; <UNDEFINED> instruction: 0xb60e02d8
    64c0:	01000000 	mrseq	r0, (UNDEF: 0)
    64c4:	08081201 	stmdaeq	r8, {r0, r9, ip}
    64c8:	0c090303 	stceq	3, cr0, [r9], {3}
    64cc:	13000003 	movwne	r0, #3
    64d0:	00003ca1 	andeq	r3, r0, r1, lsr #25
    64d4:	07030708 	streq	r0, [r3, -r8, lsl #14]
    64d8:	0000008f 	andeq	r0, r0, pc, lsl #1
    64dc:	0fcd1300 	svceq	0x00cd1300
    64e0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    64e4:	00c70803 	sbceq	r0, r7, r3, lsl #16
    64e8:	00040000 	andeq	r0, r4, r0
    64ec:	000a090e 	andeq	r0, sl, lr, lsl #18
    64f0:	03090800 	movweq	r0, #38912	; 0x9800
    64f4:	0002e503 	andeq	lr, r2, r3, lsl #10
    64f8:	00291400 	eoreq	r1, r9, r0, lsl #8
    64fc:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    6500:	7c08030b 	stcvc	3, cr0, [r8], {11}
    6504:	13000003 	movwne	r0, #3
    6508:	00001f24 	andeq	r1, r0, r4, lsr #30
    650c:	08031408 	stmdaeq	r3, {r3, sl, ip}
    6510:	0000008f 	andeq	r0, r0, pc, lsl #1
    6514:	0be71300 	bleq	ff9cb11c <_estack+0xdf9c611c>
    6518:	15080000 	strne	r0, [r8, #-0]
    651c:	008f0803 	addeq	r0, pc, r3, lsl #16
    6520:	13020000 	movwne	r0, #8192	; 0x2000
    6524:	00004c8e 	andeq	r4, r0, lr, lsl #25
    6528:	0b031608 	bleq	cbd50 <__ccfg+0xabda8>
    652c:	00000289 	andeq	r0, r0, r9, lsl #5
    6530:	47541304 	ldrbmi	r1, [r4, -r4, lsl #6]
    6534:	17080000 	strne	r0, [r8, -r0]
    6538:	00c70903 	sbceq	r0, r7, r3, lsl #18
    653c:	13080000 	movwne	r0, #32768	; 0x8000
    6540:	0000000f 	andeq	r0, r0, pc
    6544:	0f031808 	svceq	0x00031808
    6548:	0000037c 	andeq	r0, r0, ip, ror r3
    654c:	095d130c 	ldmdbeq	sp, {r2, r3, r8, r9, ip}^
    6550:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    6554:	038c1503 	orreq	r1, ip, #12582912	; 0xc00000
    6558:	002c0000 	eoreq	r0, ip, r0
    655c:	00030c0c 	andeq	r0, r3, ip, lsl #24
    6560:	00038c00 	andeq	r8, r3, r0, lsl #24
    6564:	00881500 	addeq	r1, r8, r0, lsl #10
    6568:	00030000 	andeq	r0, r3, r0
    656c:	0319040b 	tsteq	r9, #184549376	; 0xb000000
    6570:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    6574:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    6578:	191b031c 	ldmdbne	fp, {r2, r3, r4, r8, r9}
    657c:	11000003 	tstne	r0, r3
    6580:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    6584:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    6588:	000003ae 	andeq	r0, r0, lr, lsr #7
    658c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6590:	00000392 	muleq	r0, r2, r3
    6594:	00070f0a 	andeq	r0, r7, sl, lsl #30
    6598:	131d0900 	tstne	sp, #0, 18
    659c:	0000008f 	andeq	r0, r0, pc, lsl #1
    65a0:	ee0a0101 	adfe	f0, f2, f1
    65a4:	09000002 	stmdbeq	r0, {r1}
    65a8:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    65ac:	01010000 	mrseq	r0, (UNDEF: 1)
    65b0:	000c690a 	andeq	r6, ip, sl, lsl #18
    65b4:	241e0900 	ldrcs	r0, [lr], #-2304	; 0xfffff700
    65b8:	000000a0 	andeq	r0, r0, r0, lsr #1
    65bc:	870a0101 	strhi	r0, [sl, -r1, lsl #2]
    65c0:	0900000c 	stmdbeq	r0, {r2, r3}
    65c4:	03ae1422 			; <UNDEFINED> instruction: 0x03ae1422
    65c8:	01010000 	mrseq	r0, (UNDEF: 1)
    65cc:	001c5116 	andseq	r5, ip, r6, lsl r1
    65d0:	0f080100 	svceq	0x00080100
    65d4:	00000296 	muleq	r0, r6, r2
    65d8:	00000305 	andeq	r0, r0, r5, lsl #6
    65dc:	62160000 	andsvs	r0, r6, #0
    65e0:	0100001c 	tsteq	r0, ip, lsl r0
    65e4:	008f0d09 	addeq	r0, pc, r9, lsl #26
    65e8:	03050000 	movweq	r0, #20480	; 0x5000
    65ec:	00000000 	andeq	r0, r0, r0
    65f0:	00026d17 	andeq	r6, r2, r7, lsl sp
    65f4:	0c0a0100 	stfeqs	f0, [sl], {-0}
    65f8:	52420305 	subpl	r0, r2, #335544320	; 0x14000000
    65fc:	01180000 	tsteq	r8, r0
    6600:	00001c77 	andeq	r1, r0, r7, ror ip
    6604:	01065801 	tsteq	r6, r1, lsl #16
	...
    6610:	04479c01 	strbeq	r9, [r7], #-3073	; 0xfffff3ff
    6614:	61190000 	tstvs	r9, r0
    6618:	01007463 	tsteq	r0, r3, ror #8
    661c:	02961d58 	addseq	r1, r6, #88, 26	; 0x1600
    6620:	23270000 			; <UNDEFINED> instruction: 0x23270000
    6624:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6628:	001c6a01 	andseq	r6, ip, r1, lsl #20
    662c:	011c0100 	tsteq	ip, r0, lsl #2
    6630:	00000001 	andeq	r0, r0, r1
    6634:	00000000 	andeq	r0, r0, r0
    6638:	de9c0100 	fmllee	f0, f4, f0
    663c:	1a000004 	bne	6654 <__exidx_end+0xa14>
    6640:	00000c33 	andeq	r0, r0, r3, lsr ip
    6644:	8f011c01 	svchi	0x00011c01
    6648:	63000000 	movwvs	r0, #0
    664c:	1b000023 	blne	66e0 <__exidx_end+0xaa0>
    6650:	00001c4c 	andeq	r1, r0, ip, asr #24
    6654:	00012101 	andeq	r2, r1, r1, lsl #2
    6658:	1b000000 	blne	6660 <__exidx_end+0xa20>
    665c:	00001c59 	andeq	r1, r0, r9, asr ip
    6660:	00013001 	andeq	r3, r1, r1
    6664:	1b000000 	blne	666c <__exidx_end+0xa2c>
    6668:	00001dad 	andeq	r1, r0, sp, lsr #27
    666c:	00013701 	andeq	r3, r1, r1, lsl #14
    6670:	1c000000 	stcne	0, cr0, [r0], {-0}
    6674:	000004de 	ldrdeq	r0, [r0], -lr
    6678:	00000000 	andeq	r0, r0, r0
    667c:	00000a88 	andeq	r0, r0, r8, lsl #21
    6680:	ad072b01 	vstrge	d2, [r7, #-4]
    6684:	1d000004 	stcne	0, cr0, [r0, #-16]
    6688:	000004ec 	andeq	r0, r0, ip, ror #9
    668c:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    6690:	00000000 	andeq	r0, r0, r0
    6694:	0ab00000 	beq	fec0669c <_estack+0xdec0169c>
    6698:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    669c:	0004c707 	andeq	ip, r4, r7, lsl #14
    66a0:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    66a4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    66a8:	000004de 	ldrdeq	r0, [r0], -lr
    66ac:	00000000 	andeq	r0, r0, r0
    66b0:	00000ac8 	andeq	r0, r0, r8, asr #21
    66b4:	1d074a01 	vstrne	s8, [r7, #-4]
    66b8:	000004ec 	andeq	r0, r0, ip, ror #9
    66bc:	d51f0000 	ldrle	r0, [pc, #-0]	; 66c4 <__exidx_end+0xa84>
    66c0:	0200001b 	andeq	r0, r0, #27
    66c4:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    66c8:	03000000 	movweq	r0, #0
    66cc:	00112120 	andseq	r2, r1, r0, lsr #2
    66d0:	18a40200 	stmiane	r4!, {r9}
    66d4:	00000067 	andeq	r0, r0, r7, rrx
    66d8:	0aa70000 	beq	fe9c66e0 <_estack+0xde9c16e0>
    66dc:	00030000 	andeq	r0, r3, r0
    66e0:	000017dd 	ldrdeq	r1, [r0], -sp
    66e4:	00ac0104 	adceq	r0, ip, r4, lsl #2
    66e8:	470c0000 	strmi	r0, [ip, -r0]
    66ec:	0a00001d 	beq	6768 <__exidx_end+0xb28>
    66f0:	8800000e 	stmdahi	r0, {r1, r2, r3}
    66f4:	0000000c 	andeq	r0, r0, ip
    66f8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    66fc:	02000047 	andeq	r0, r0, #71	; 0x47
    6700:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    6704:	02020000 	andeq	r0, r2, #0
    6708:	000a6b05 	andeq	r6, sl, r5, lsl #22
    670c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    6710:	000007fd 	strdeq	r0, [r0], -sp
    6714:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    6718:	03000007 	movweq	r0, #7
    671c:	00002a1c 	andeq	r2, r0, ip, lsl sl
    6720:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    6724:	02000000 	andeq	r0, r0, #0
    6728:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    672c:	12030000 	andne	r0, r3, #0
    6730:	0400002e 	streq	r0, [r0], #-46	; 0xffffffd2
    6734:	00601931 	rsbeq	r1, r0, r1, lsr r9
    6738:	02020000 	andeq	r0, r2, #0
    673c:	000d6607 	andeq	r6, sp, r7, lsl #12
    6740:	29b40300 	ldmibcs	r4!, {r8, r9}
    6744:	34040000 	strcc	r0, [r4], #-0
    6748:	00007319 	andeq	r7, r0, r9, lsl r3
    674c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6750:	00000426 	andeq	r0, r0, r6, lsr #8
    6754:	21070802 	tstcs	r7, r2, lsl #16
    6758:	04000004 	streq	r0, [r0], #-4
    675c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6760:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6764:	00042b07 	andeq	r2, r4, r7, lsl #22
    6768:	13280300 			; <UNDEFINED> instruction: 0x13280300
    676c:	26050000 	strcs	r0, [r5], -r0
    6770:	00004112 	andeq	r4, r0, r2, lsl r1
    6774:	28fb0300 	ldmcs	fp!, {r8, r9}^
    6778:	27050000 	strcs	r0, [r5, -r0]
    677c:	00005412 	andeq	r5, r0, r2, lsl r4
    6780:	009b0500 	addseq	r0, fp, r0, lsl #10
    6784:	9b060000 	blls	18678c <__ccfg+0x1667e4>
    6788:	03000000 	movweq	r0, #0
    678c:	00001dc2 	andeq	r1, r0, r2, asr #27
    6790:	41122b05 	tstmi	r2, r5, lsl #22
    6794:	06000000 	streq	r0, [r0], -r0
    6798:	000000b1 	strheq	r0, [r0], -r1
    679c:	0000b105 	andeq	fp, r0, r5, lsl #2
    67a0:	294d0300 	stmdbcs	sp, {r8, r9}^
    67a4:	2c050000 	stccs	0, cr0, [r5], {-0}
    67a8:	00006712 	andeq	r6, r0, r2, lsl r7
    67ac:	00c70500 	sbceq	r0, r7, r0, lsl #10
    67b0:	46030000 	strmi	r0, [r3], -r0
    67b4:	05000006 	streq	r0, [r0, #-6]
    67b8:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    67bc:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    67c0:	72093205 	andvc	r3, r9, #1342177280	; 0x50000000
    67c4:	08000001 	stmdaeq	r0, {r0}
    67c8:	00000034 	andeq	r0, r0, r4, lsr r0
    67cc:	b1073405 	tstlt	r7, r5, lsl #8
    67d0:	01000000 	mrseq	r0, (UNDEF: 0)
    67d4:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    67d8:	0000064c 	andeq	r0, r0, ip, asr #12
    67dc:	b1033505 	tstlt	r3, r5, lsl #10
    67e0:	01000000 	mrseq	r0, (UNDEF: 0)
    67e4:	08000601 	stmdaeq	r0, {r0, r9, sl}
    67e8:	000002e7 	andeq	r0, r0, r7, ror #5
    67ec:	b1033605 	tstlt	r3, r5, lsl #12
    67f0:	01000000 	mrseq	r0, (UNDEF: 0)
    67f4:	08000501 	stmdaeq	r0, {r0, r8, sl}
    67f8:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    67fc:	b1033705 	tstlt	r3, r5, lsl #14
    6800:	01000000 	mrseq	r0, (UNDEF: 0)
    6804:	08000401 	stmdaeq	r0, {r0, sl}
    6808:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    680c:	b1033805 	tstlt	r3, r5, lsl #16
    6810:	01000000 	mrseq	r0, (UNDEF: 0)
    6814:	09000004 	stmdbeq	r0, {r2}
    6818:	0000065b 	andeq	r0, r0, fp, asr r6
    681c:	b1073a05 	tstlt	r7, r5, lsl #20
    6820:	01000000 	mrseq	r0, (UNDEF: 0)
    6824:	0008fb09 	andeq	pc, r8, r9, lsl #22
    6828:	033c0500 	teqeq	ip, #0, 10
    682c:	000000b1 	strheq	r0, [r0], -r1
    6830:	0f3a0902 	svceq	0x003a0902
    6834:	3d050000 	stccc	0, cr0, [r5, #-0]
    6838:	0000b103 	andeq	fp, r0, r3, lsl #2
    683c:	13090300 	movwne	r0, #37632	; 0x9300
    6840:	05000009 	streq	r0, [r0, #-9]
    6844:	00c7083f 	sbceq	r0, r7, pc, lsr r8
    6848:	00040000 	andeq	r0, r4, r0
    684c:	00031d03 	andeq	r1, r3, r3, lsl #26
    6850:	03410500 	movteq	r0, #5376	; 0x1500
    6854:	000000e4 	andeq	r0, r0, r4, ror #1
    6858:	00017206 	andeq	r7, r1, r6, lsl #4
    685c:	06be0a00 	ldrteq	r0, [lr], r0, lsl #20
    6860:	43050000 	movwmi	r0, #20480	; 0x5000
    6864:	00017e1a 	andeq	r7, r1, sl, lsl lr
    6868:	0a010100 	beq	46c70 <__ccfg+0x26cc8>
    686c:	000001a0 	andeq	r0, r0, r0, lsr #3
    6870:	9f0e4505 	svcls	0x000e4505
    6874:	01000001 	tsteq	r0, r1
    6878:	a5040b01 	strge	r0, [r4, #-2817]	; 0xfffff4ff
    687c:	02000001 	andeq	r0, r0, #1
    6880:	0c640801 	stcleq	8, cr0, [r4], #-4
    6884:	a5050000 	strge	r0, [r5, #-0]
    6888:	0a000001 	beq	6894 <__exidx_end+0xc54>
    688c:	00000326 	andeq	r0, r0, r6, lsr #6
    6890:	9f1e4505 	svcls	0x001e4505
    6894:	01000001 	tsteq	r0, r1
    6898:	06080701 	streq	r0, [r8], -r1, lsl #14
    689c:	01f0098f 	mvnseq	r0, pc, lsl #19
    68a0:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    68a4:	0600000c 	streq	r0, [r0], -ip
    68a8:	00670b90 	mlseq	r7, r0, fp, r0
    68ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    68b0:	00001075 	andeq	r1, r0, r5, ror r0
    68b4:	9b089106 	blls	22acd4 <__ccfg+0x20ad2c>
    68b8:	04000000 	streq	r0, [r0], #-0
    68bc:	0001c509 	andeq	ip, r1, r9, lsl #10
    68c0:	10920600 	addsne	r0, r2, r0, lsl #12
    68c4:	000000bd 	strheq	r0, [r0], -sp
    68c8:	cc030006 	stcgt	0, cr0, [r3], {6}
    68cc:	0600000c 	streq	r0, [r0], -ip
    68d0:	01bf0393 			; <UNDEFINED> instruction: 0x01bf0393
    68d4:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    68d8:	07000001 	streq	r0, [r0, -r1]
    68dc:	0d000002 	stceq	0, cr0, [r0, #-8]
    68e0:	093d0a00 	ldmdbeq	sp!, {r9, fp}
    68e4:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    68e8:	0001fc0f 	andeq	pc, r1, pc, lsl #24
    68ec:	0b010100 	bleq	46cf4 <__ccfg+0x26d4c>
    68f0:	0000c204 	andeq	ip, r0, r4, lsl #4
    68f4:	07010700 	streq	r0, [r1, -r0, lsl #14]
    68f8:	02450991 	subeq	r0, r5, #2375680	; 0x244000
    68fc:	1a080000 	bne	206904 <__ccfg+0x1e695c>
    6900:	07000009 	streq	r0, [r0, -r9]
    6904:	00b10793 	umlalseq	r0, r1, r3, r7
    6908:	07010000 	streq	r0, [r1, -r0]
    690c:	cc080001 	stcgt	0, cr0, [r8], {1}
    6910:	07000005 	streq	r0, [r0, -r5]
    6914:	00b10394 	umlalseq	r0, r1, r4, r3
    6918:	01010000 	mrseq	r0, (UNDEF: 1)
    691c:	03000000 	movweq	r0, #0
    6920:	00000aab 	andeq	r0, r0, fp, lsr #21
    6924:	1b039607 	blne	ec148 <__ccfg+0xcc1a0>
    6928:	05000002 	streq	r0, [r0, #-2]
    692c:	00000245 	andeq	r0, r0, r5, asr #4
    6930:	0002510c 	andeq	r5, r2, ip, lsl #2
    6934:	00026100 	andeq	r6, r2, r0, lsl #2
    6938:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    693c:	00000256 	andeq	r0, r0, r6, asr r2
    6940:	0003aa0a 	andeq	sl, r3, sl, lsl #20
    6944:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    6948:	00000261 	andeq	r0, r0, r1, ror #4
    694c:	a70c0101 	strge	r0, [ip, -r1, lsl #2]
    6950:	7f000000 	svcvc	0x00000000
    6954:	0d000002 	stceq	0, cr0, [r0, #-8]
    6958:	02740500 	rsbseq	r0, r4, #0, 10
    695c:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    6960:	08000006 	stmdaeq	r0, {r1, r2}
    6964:	027f1306 	rsbseq	r1, pc, #402653184	; 0x18000000
    6968:	01010000 	mrseq	r0, (UNDEF: 1)
    696c:	0008dd0a 	andeq	sp, r8, sl, lsl #26
    6970:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    6974:	000000c7 	andeq	r0, r0, r7, asr #1
    6978:	720e0101 	andvc	r0, lr, #1073741824	; 0x40000000
    697c:	0900000c 	stmdbeq	r0, {r2, r3}
    6980:	ad10016e 	ldfges	f0, [r0, #-440]	; 0xfffffe48
    6984:	0b000002 	bleq	6994 <__exidx_end+0xd54>
    6988:	0002b304 	andeq	fp, r2, r4, lsl #6
    698c:	bf010f00 	svclt	0x00010f00
    6990:	10000002 	andne	r0, r0, r2
    6994:	0000009b 	muleq	r0, fp, r0
    6998:	01ac0c00 			; <UNDEFINED> instruction: 0x01ac0c00
    699c:	02ca0000 	sbceq	r0, sl, #0
    69a0:	000d0000 	andeq	r0, sp, r0
    69a4:	0002bf05 	andeq	fp, r2, r5, lsl #30
    69a8:	09e61100 	stmibeq	r6!, {r8, ip}^
    69ac:	7f090000 	svcvc	0x00090000
    69b0:	02ca1601 	sbceq	r1, sl, #1048576	; 0x100000
    69b4:	01010000 	mrseq	r0, (UNDEF: 1)
    69b8:	00039611 	andeq	r9, r3, r1, lsl r6
    69bc:	01820900 	orreq	r0, r2, r0, lsl #18
    69c0:	0000d314 	andeq	sp, r0, r4, lsl r3
    69c4:	11010100 	mrsne	r0, (UNDEF: 17)
    69c8:	0000036e 	andeq	r0, r0, lr, ror #6
    69cc:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    69d0:	000000c7 	andeq	r0, r0, r7, asr #1
    69d4:	08120101 	ldmdaeq	r2, {r0, r8}
    69d8:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    69dc:	00000323 	andeq	r0, r0, r3, lsr #6
    69e0:	003ca113 	eorseq	sl, ip, r3, lsl r1
    69e4:	03070900 	movweq	r0, #30976	; 0x7900
    69e8:	00009b07 	andeq	r9, r0, r7, lsl #22
    69ec:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    69f0:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    69f4:	d8080308 	stmdale	r8, {r3, r8, r9}
    69f8:	04000000 	streq	r0, [r0], #-0
    69fc:	0a090e00 	beq	24a204 <__ccfg+0x22a25c>
    6a00:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    6a04:	02fc0303 	rscseq	r0, ip, #201326592	; 0xc000000
    6a08:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    6a0c:	30000000 	andcc	r0, r0, r0
    6a10:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    6a14:	00000393 	muleq	r0, r3, r3
    6a18:	001f2413 	andseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
    6a1c:	03140900 	tsteq	r4, #0, 18
    6a20:	00009b08 	andeq	r9, r0, r8, lsl #22
    6a24:	e7130000 	ldr	r0, [r3, -r0]
    6a28:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    6a2c:	9b080315 	blls	207688 <__ccfg+0x1e76e0>
    6a30:	02000000 	andeq	r0, r0, #0
    6a34:	004c8e13 	subeq	r8, ip, r3, lsl lr
    6a38:	03160900 	tsteq	r6, #0, 18
    6a3c:	0002a00b 	andeq	sl, r2, fp
    6a40:	54130400 	ldrpl	r0, [r3], #-1024	; 0xfffffc00
    6a44:	09000047 	stmdbeq	r0, {r0, r1, r2, r6}
    6a48:	d8090317 	stmdale	r9, {r0, r1, r2, r4, r8, r9}
    6a4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6a50:	00000f13 	andeq	r0, r0, r3, lsl pc
    6a54:	03180900 	tsteq	r8, #0, 18
    6a58:	0003930f 	andeq	r9, r3, pc, lsl #6
    6a5c:	5d130c00 	ldcpl	12, cr0, [r3, #-0]
    6a60:	09000009 	stmdbeq	r0, {r0, r3}
    6a64:	a3150319 	tstge	r5, #1677721600	; 0x64000000
    6a68:	2c000003 	stccs	0, cr0, [r0], {3}
    6a6c:	03230c00 			; <UNDEFINED> instruction: 0x03230c00
    6a70:	03a30000 			; <UNDEFINED> instruction: 0x03a30000
    6a74:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    6a78:	03000000 	movweq	r0, #0
    6a7c:	30040b00 	andcc	r0, r4, r0, lsl #22
    6a80:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6a84:	00000bdc 	ldrdeq	r0, [r0], -ip
    6a88:	1b031c09 	blne	cdab4 <__ccfg+0xadb0c>
    6a8c:	00000330 	andeq	r0, r0, r0, lsr r3
    6a90:	000bbc11 	andeq	fp, fp, r1, lsl ip
    6a94:	031e0900 	tsteq	lr, #0, 18
    6a98:	0003c514 	andeq	ip, r3, r4, lsl r5
    6a9c:	0b010100 	bleq	46ea4 <__ccfg+0x26efc>
    6aa0:	0003a904 	andeq	sl, r3, r4, lsl #18
    6aa4:	070f0a00 	streq	r0, [pc, -r0, lsl #20]
    6aa8:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    6aac:	00009b13 	andeq	r9, r0, r3, lsl fp
    6ab0:	0a010100 	beq	46eb8 <__ccfg+0x26f10>
    6ab4:	000002ee 	andeq	r0, r0, lr, ror #5
    6ab8:	ac1a1e0a 	ldcge	14, cr1, [sl], {10}
    6abc:	01000000 	mrseq	r0, (UNDEF: 0)
    6ac0:	0c690a01 			; <UNDEFINED> instruction: 0x0c690a01
    6ac4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    6ac8:	0000ac24 	andeq	sl, r0, r4, lsr #24
    6acc:	0a010100 	beq	46ed4 <__ccfg+0x26f2c>
    6ad0:	00000c87 	andeq	r0, r0, r7, lsl #25
    6ad4:	c514220a 	ldrgt	r2, [r4, #-522]	; 0xfffffdf6
    6ad8:	01000003 	tsteq	r0, r3
    6adc:	0bc11601 	bleq	ff04c2e8 <_estack+0xdf0472e8>
    6ae0:	0f010000 	svceq	0x00010000
    6ae4:	0000c70f 	andeq	ip, r0, pc, lsl #14
    6ae8:	00030500 	andeq	r0, r3, r0, lsl #10
    6aec:	16000000 	strne	r0, [r0], -r0
    6af0:	00000cf3 	strdeq	r0, [r0], -r3
    6af4:	c7150f01 	ldrgt	r0, [r5, -r1, lsl #30]
    6af8:	05000000 	streq	r0, [r0, #-0]
    6afc:	00000003 	andeq	r0, r0, r3
    6b00:	1d991600 	ldcne	6, cr1, [r9]
    6b04:	10010000 	andne	r0, r1, r0
    6b08:	00021514 	andeq	r1, r2, r4, lsl r5
    6b0c:	00030500 	andeq	r0, r3, r0, lsl #10
    6b10:	16000000 	strne	r0, [r0], -r0
    6b14:	00001cfd 	strdeq	r1, [r0], -sp
    6b18:	b10d1201 	tstlt	sp, r1, lsl #4
    6b1c:	05000000 	streq	r0, [r0, #-0]
    6b20:	0005d403 	andeq	sp, r5, r3, lsl #8
    6b24:	1d411620 	stclne	6, cr1, [r1, #-128]	; 0xffffff80
    6b28:	13010000 	movwne	r0, #4096	; 0x1000
    6b2c:	0000b103 	andeq	fp, r0, r3, lsl #2
    6b30:	d5030500 	strle	r0, [r3, #-1280]	; 0xfffffb00
    6b34:	16200005 	strtne	r0, [r0], -r5
    6b38:	0000165a 	andeq	r1, r0, sl, asr r6
    6b3c:	9b0d1501 	blls	34bf48 <__ccfg+0x32bfa0>
    6b40:	05000000 	streq	r0, [r0, #-0]
    6b44:	00000003 	andeq	r0, r0, r3
    6b48:	c9011700 	stmdbgt	r1, {r8, r9, sl, ip}
    6b4c:	0300001c 	movweq	r0, #28
    6b50:	00000613 	andeq	r0, r0, r3, lsl r6
    6b54:	00000000 	andeq	r0, r0, r0
    6b58:	9c010000 	stcls	0, cr0, [r1], {-0}
    6b5c:	1d9e0118 	ldfnes	f0, [lr, #96]	; 0x60
    6b60:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    6b64:	00c70107 	sbceq	r0, r7, r7, lsl #2
	...
    6b70:	9c010000 	stcls	0, cr0, [r1], {-0}
    6b74:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    6b78:	00726519 	rsbseq	r6, r2, r9, lsl r5
    6b7c:	bc190803 	ldclt	8, cr0, [r9], {3}
    6b80:	97000004 	strls	r0, [r0, -r4]
    6b84:	1a000023 	bne	6c18 <__exidx_end+0xfd8>
    6b88:	00757265 	rsbseq	r7, r5, r5, ror #4
    6b8c:	c2240803 	eorgt	r0, r4, #196608	; 0x30000
    6b90:	01000004 	tsteq	r0, r4
    6b94:	040b0051 	streq	r0, [fp], #-81	; 0xffffffaf
    6b98:	0000008f 	andeq	r0, r0, pc, lsl #1
    6b9c:	00c7040b 	sbceq	r0, r7, fp, lsl #8
    6ba0:	011b0000 	tsteq	fp, r0
    6ba4:	00001d20 	andeq	r1, r0, r0, lsr #26
    6ba8:	06016001 	streq	r6, [r1], -r1
    6bac:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6bb8:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    6bbc:	1c000004 	stcne	0, cr0, [r0], {4}
    6bc0:	01007473 	tsteq	r0, r3, ror r4
    6bc4:	9b140160 	blls	50714c <__ccfg+0x4e71a4>
    6bc8:	aa000000 	bge	6bd0 <__exidx_end+0xf90>
    6bcc:	00000023 	andeq	r0, r0, r3, lsr #32
    6bd0:	1d17011d 	ldfnes	f0, [r7, #-116]	; 0xffffff8c
    6bd4:	5b010000 	blpl	46bdc <__ccfg+0x26c34>
    6bd8:	00000601 	andeq	r0, r0, r1, lsl #12
    6bdc:	00000000 	andeq	r0, r0, r0
    6be0:	9c010000 	stcls	0, cr0, [r1], {-0}
    6be4:	1cf4011b 	ldfnee	f0, [r4], #108	; 0x6c
    6be8:	21010000 	mrscs	r0, (UNDEF: 1)
    6bec:	9b010601 	blls	483f8 <__ccfg+0x28450>
	...
    6bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    6bfc:	0005c09c 	muleq	r5, ip, r0
    6c00:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    6c04:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6c08:	00009b15 	andeq	r9, r0, r5, lsl fp
    6c0c:	0023bd00 	eoreq	fp, r3, r0, lsl #26
    6c10:	00611c00 	rsbeq	r1, r1, r0, lsl #24
    6c14:	1f012101 	svcne	0x00012101
    6c18:	000000c7 	andeq	r0, r0, r7, asr #1
    6c1c:	000023d0 	ldrdeq	r2, [r0], -r0
    6c20:	0100731c 	tsteq	r0, ip, lsl r3
    6c24:	152e0121 	strne	r0, [lr, #-289]!	; 0xfffffedf
    6c28:	ee000002 	cdp	0, 0, cr0, cr0, cr2, {0}
    6c2c:	1c000023 	stcne	0, cr0, [r0], {35}	; 0x23
    6c30:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6c34:	36012101 	strcc	r2, [r1], -r1, lsl #2
    6c38:	0000009b 	muleq	r0, fp, r0
    6c3c:	00002401 	andeq	r2, r0, r1, lsl #8
    6c40:	006c621e 	rsbeq	r6, ip, lr, lsl r2
    6c44:	07012301 	streq	r2, [r1, -r1, lsl #6]
    6c48:	0000009b 	muleq	r0, fp, r0
    6c4c:	00002414 	andeq	r2, r0, r4, lsl r4
    6c50:	001d0b1f 	andseq	r0, sp, pc, lsl fp
    6c54:	01320100 	teqeq	r2, r0, lsl #2
    6c58:	00000001 	andeq	r0, r0, r1
    6c5c:	09f62000 	ldmibeq	r6!, {sp}^
    6c60:	00000000 	andeq	r0, r0, r0
    6c64:	0c700000 	ldcleq	0, cr0, [r0], #-0
    6c68:	43010000 	movwmi	r0, #4096	; 0x1000
    6c6c:	05a30301 	streq	r0, [r3, #769]!	; 0x301
    6c70:	12210000 	eorne	r0, r1, #0
    6c74:	2100000a 	tstcs	r0, sl
    6c78:	00000a05 	andeq	r0, r0, r5, lsl #20
    6c7c:	09f62200 	ldmibeq	r6!, {r9, sp}^
	...
    6c88:	50010000 	andpl	r0, r1, r0
    6c8c:	12210301 	eorne	r0, r1, #67108864	; 0x4000000
    6c90:	2100000a 	tstcs	r0, sl
    6c94:	00000a05 	andeq	r0, r0, r5, lsl #20
    6c98:	01180000 	tsteq	r8, r0
    6c9c:	00001ceb 	andeq	r1, r0, fp, ror #25
    6ca0:	0106cb01 	tsteq	r6, r1, lsl #22
    6ca4:	0000009b 	muleq	r0, fp, r0
	...
    6cb0:	06819c01 	streq	r9, [r1], r1, lsl #24
    6cb4:	73190000 	tstvc	r9, #0
    6cb8:	cb010074 	blgt	46e90 <__ccfg+0x26ee8>
    6cbc:	00009b15 	andeq	r9, r0, r5, lsl fp
    6cc0:	00243d00 	eoreq	r3, r4, r0, lsl #26
    6cc4:	1d282300 	stcne	3, cr2, [r8, #-0]
    6cc8:	cb010000 	blgt	46cd0 <__ccfg+0x26d28>
    6ccc:	0000c71f 	andeq	ip, r0, pc, lsl r7
    6cd0:	00245b00 	eoreq	r5, r4, r0, lsl #22
    6cd4:	1cd72300 	ldclne	3, cr2, [r7], {0}
    6cd8:	cb010000 	blgt	46ce0 <__ccfg+0x26d38>
    6cdc:	0000c72b 	andeq	ip, r0, fp, lsr #14
    6ce0:	00248400 	eoreq	r8, r4, r0, lsl #8
    6ce4:	1cc32400 	cfstrdne	mvd2, [r3], {0}
    6ce8:	e6010000 	str	r0, [r1], -r0
    6cec:	00000001 	andeq	r0, r0, r1
    6cf0:	1dac2400 	cfstrsne	mvf2, [ip]
    6cf4:	ea010000 	b	46cfc <__ccfg+0x26d54>
    6cf8:	00000001 	andeq	r0, r0, r1
    6cfc:	085e2500 	ldmdaeq	lr, {r8, sl, sp}^
    6d00:	00000000 	andeq	r0, r0, r0
    6d04:	0c400000 	mareq	acc0, r0, r0
    6d08:	fc010000 	stc2	0, cr0, [r1], {-0}
    6d0c:	08782604 	ldmdaeq	r8!, {r2, r9, sl, sp}^
    6d10:	24a20000 	strtcs	r0, [r2], #0
    6d14:	6c260000 	stcvs	0, cr0, [r6], #-0
    6d18:	b5000008 	strlt	r0, [r0, #-8]
    6d1c:	27000024 	strcs	r0, [r0, -r4, lsr #32]
    6d20:	000009f6 	strdeq	r0, [r0], -r6
    6d24:	00000000 	andeq	r0, r0, r0
    6d28:	00000c58 	andeq	r0, r0, r8, asr ip
    6d2c:	64024301 	strvs	r4, [r2], #-769	; 0xfffffcff
    6d30:	21000006 	tstcs	r0, r6
    6d34:	00000a12 	andeq	r0, r0, r2, lsl sl
    6d38:	000a0521 	andeq	r0, sl, r1, lsr #10
    6d3c:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    6d40:	00000009 	andeq	r0, r0, r9
    6d44:	00000000 	andeq	r0, r0, r0
    6d48:	01000000 	mrseq	r0, (UNDEF: 0)
    6d4c:	12210248 	eorne	r0, r1, #72, 4	; 0x80000004
    6d50:	2100000a 	tstcs	r0, sl
    6d54:	00000a05 	andeq	r0, r0, r5, lsl #20
    6d58:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6d5c:	001d2d01 	andseq	r2, sp, r1, lsl #26
    6d60:	06b00100 	ldrteq	r0, [r0], r0, lsl #2
    6d64:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6d70:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    6d74:	19000007 	stmdbne	r0, {r0, r1, r2}
    6d78:	b0010061 	andlt	r0, r1, r1, rrx
    6d7c:	0000c715 	andeq	ip, r0, r5, lsl r7
    6d80:	0024c800 	eoreq	ip, r4, r0, lsl #16
    6d84:	00731900 	rsbseq	r1, r3, r0, lsl #18
    6d88:	041eb001 	ldreq	fp, [lr], #-1
    6d8c:	f1000007 	cps	#7
    6d90:	19000024 	stmdbne	r0, {r2, r5}
    6d94:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6d98:	9b26b001 	blls	9b2da4 <__ccfg+0x992dfc>
    6d9c:	25000000 	strcs	r0, [r0, #-0]
    6da0:	27000025 	strcs	r0, [r0, -r5, lsr #32]
    6da4:	000009f6 	strdeq	r0, [r0], -r6
    6da8:	00000000 	andeq	r0, r0, r0
    6dac:	00000c28 	andeq	r0, r0, r8, lsr #24
    6db0:	e802ba01 	stmda	r2, {r0, r9, fp, ip, sp, pc}
    6db4:	21000006 	tstcs	r0, r6
    6db8:	00000a12 	andeq	r0, r0, r2, lsl sl
    6dbc:	000a0521 	andeq	r0, sl, r1, lsr #10
    6dc0:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    6dc4:	00000009 	andeq	r0, r0, r9
    6dc8:	00000000 	andeq	r0, r0, r0
    6dcc:	01000000 	mrseq	r0, (UNDEF: 0)
    6dd0:	122102c4 	eorne	r0, r1, #196, 4	; 0x4000000c
    6dd4:	2100000a 	tstcs	r0, sl
    6dd8:	00000a05 	andeq	r0, r0, r5, lsl #20
    6ddc:	040b0000 	streq	r0, [fp], #-0
    6de0:	000000b1 	strheq	r0, [r0], -r1
    6de4:	1ce20117 	stfnee	f0, [r2], #92	; 0x5c
    6de8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    6dec:	00264c06 	eoreq	r4, r6, r6, lsl #24
    6df0:	00266000 	eoreq	r6, r6, r0
    6df4:	299c0100 	ldmibcs	ip, {r8}
    6df8:	001d0301 	andseq	r0, sp, r1, lsl #6
    6dfc:	06930100 	ldreq	r0, [r3], r0, lsl #2
    6e00:	0000009b 	muleq	r0, fp, r0
    6e04:	00002638 	andeq	r2, r0, r8, lsr r6
    6e08:	0000264c 	andeq	r2, r0, ip, asr #12
    6e0c:	a62a9c01 	strtge	r9, [sl], -r1, lsl #24
    6e10:	0100001d 	tsteq	r0, sp, lsl r0
    6e14:	25d40d82 	ldrbcs	r0, [r4, #3458]	; 0xd82
    6e18:	26140000 	ldrcs	r0, [r4], -r0
    6e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6e20:	00000796 	muleq	r0, r6, r7
    6e24:	00079f28 	andeq	r9, r7, r8, lsr #30
    6e28:	0025ee00 	eoreq	lr, r5, r0, lsl #28
    6e2c:	00260200 	eoreq	r0, r6, r0, lsl #4
    6e30:	038a0100 	orreq	r0, sl, #0, 2
    6e34:	0009f627 	andeq	pc, r9, r7, lsr #12
    6e38:	0025ee00 	eoreq	lr, r5, r0, lsl #28
    6e3c:	000bf800 	andeq	pc, fp, r0, lsl #16
    6e40:	02720100 	rsbseq	r0, r2, #0, 2
    6e44:	00000779 	andeq	r0, r0, r9, ror r7
    6e48:	000a1221 	andeq	r1, sl, r1, lsr #4
    6e4c:	0a052100 	beq	14f254 <__ccfg+0x12f2ac>
    6e50:	25000000 	strcs	r0, [r0, #-0]
    6e54:	000009f6 	strdeq	r0, [r0], -r6
    6e58:	000025fa 	strdeq	r2, [r0], -sl
    6e5c:	00000c10 	andeq	r0, r0, r0, lsl ip
    6e60:	21027401 	tstcs	r2, r1, lsl #8
    6e64:	00000a12 	andeq	r0, r0, r2, lsl sl
    6e68:	000a0521 	andeq	r0, sl, r1, lsr #10
    6e6c:	00000000 	andeq	r0, r0, r0
    6e70:	001d3a2b 	andseq	r3, sp, fp, lsr #20
    6e74:	0d780100 	ldfeqe	f0, [r8, #-0]
    6e78:	1d932b01 	vldrne	d2, [r3, #4]
    6e7c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    6e80:	b22b010d 	eorlt	r0, fp, #1073741827	; 0x40000003
    6e84:	0100001d 	tsteq	r0, sp, lsl r0
    6e88:	2c010d66 	stccs	13, cr0, [r1], {102}	; 0x66
    6e8c:	00001db8 			; <UNDEFINED> instruction: 0x00001db8
    6e90:	010d5801 	tsteq	sp, r1, lsl #16
    6e94:	00002580 	andeq	r2, r0, r0, lsl #11
    6e98:	000025d4 	ldrdeq	r2, [r0], -r4
    6e9c:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    6ea0:	73190000 	tstvc	r9, #0
    6ea4:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    6ea8:	00009b19 	andeq	r9, r0, r9, lsl fp
    6eac:	00254300 	eoreq	r4, r5, r0, lsl #6
    6eb0:	65641900 	strbvs	r1, [r4, #-2304]!	; 0xfffff700
    6eb4:	5801006c 	stmdapl	r1, {r2, r3, r5, r6}
    6eb8:	00009b22 	andeq	r9, r0, r2, lsr #22
    6ebc:	00255600 	eoreq	r5, r5, r0, lsl #12
    6ec0:	08422500 	stmdaeq	r2, {r8, sl, sp}^
    6ec4:	25880000 	strcs	r0, [r8]
    6ec8:	0bb00000 	bleq	fec06ed0 <_estack+0xdec01ed0>
    6ecc:	5c010000 	stcpl	0, cr0, [r1], {-0}
    6ed0:	0bb02d13 	bleq	fec12324 <_estack+0xdec0d324>
    6ed4:	532e0000 			; <UNDEFINED> instruction: 0x532e0000
    6ed8:	69000008 	stmdbvs	r0, {r3}
    6edc:	27000025 	strcs	r0, [r0, -r5, lsr #32]
    6ee0:	000009f6 	strdeq	r0, [r0], -r6
    6ee4:	00002588 	andeq	r2, r0, r8, lsl #11
    6ee8:	00000bd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6eec:	24025101 	strcs	r5, [r2], #-257	; 0xfffffeff
    6ef0:	21000008 	tstcs	r0, r8
    6ef4:	00000a12 	andeq	r0, r0, r2, lsl sl
    6ef8:	000a0521 	andeq	r0, sl, r1, lsr #10
    6efc:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    6f00:	a2000009 	andge	r0, r0, #9
    6f04:	a6000025 	strge	r0, [r0], -r5, lsr #32
    6f08:	01000025 	tsteq	r0, r5, lsr #32
    6f0c:	12210254 	eorne	r0, r1, #84, 4	; 0x40000005
    6f10:	2100000a 	tstcs	r0, sl
    6f14:	00000a05 	andeq	r0, r0, r5, lsl #20
    6f18:	00000000 	andeq	r0, r0, r0
    6f1c:	001d352f 	andseq	r3, sp, pc, lsr #10
    6f20:	0d4b0100 	stfeqe	f0, [fp, #-0]
    6f24:	000000b1 	strheq	r0, [r0], -r1
    6f28:	00085e01 	andeq	r5, r8, r1, lsl #28
    6f2c:	00723000 	rsbseq	r3, r2, r0
    6f30:	b1074f01 	tstlt	r7, r1, lsl #30
    6f34:	00000000 	andeq	r0, r0, r0
    6f38:	001d1131 	andseq	r1, sp, r1, lsr r1
    6f3c:	0d410100 	stfeqe	f0, [r1, #-0]
    6f40:	08830101 	stmeq	r3, {r0, r8}
    6f44:	63320000 	teqvs	r2, #0
    6f48:	0100646d 	tsteq	r0, sp, ror #8
    6f4c:	00b11941 	adcseq	r1, r1, r1, asr #18
    6f50:	61320000 	teqvs	r2, r0
    6f54:	24410100 	strbcs	r0, [r1], #-256	; 0xffffff00
    6f58:	000000c7 	andeq	r0, r0, r7, asr #1
    6f5c:	1cdc2c00 	ldclne	12, cr2, [ip], {0}
    6f60:	3a010000 	bcc	46f68 <__ccfg+0x26fc0>
    6f64:	2568010d 	strbcs	r0, [r8, #-269]!	; 0xfffffef3
    6f68:	25800000 	strcs	r0, [r0]
    6f6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6f70:	000008e5 	andeq	r0, r0, r5, ror #17
    6f74:	646d6319 	strbtvs	r6, [sp], #-793	; 0xfffffce7
    6f78:	193a0100 	ldmdbne	sl!, {r8}
    6f7c:	000000b1 	strheq	r0, [r0], -r1
    6f80:	0000257c 	andeq	r2, r0, ip, ror r5
    6f84:	0009f627 	andeq	pc, r9, r7, lsr #12
    6f88:	00256800 	eoreq	r6, r5, r0, lsl #16
    6f8c:	000b9800 	andeq	r9, fp, r0, lsl #16
    6f90:	023c0100 	eorseq	r0, ip, #0, 2
    6f94:	000008c9 	andeq	r0, r0, r9, asr #17
    6f98:	000a1221 	andeq	r1, sl, r1, lsr #4
    6f9c:	0a052100 	beq	14f3a4 <__ccfg+0x12f3fc>
    6fa0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6fa4:	000009f6 	strdeq	r0, [r0], -r6
    6fa8:	00002574 	andeq	r2, r0, r4, ror r5
    6fac:	00002578 	andeq	r2, r0, r8, ror r5
    6fb0:	21023e01 	tstcs	r2, r1, lsl #28
    6fb4:	00000a12 	andeq	r0, r0, r2, lsl sl
    6fb8:	000a0521 	andeq	r0, sl, r1, lsr #10
    6fbc:	2c000000 	stccs	0, cr0, [r0], {-0}
    6fc0:	00001dc7 	andeq	r1, r0, r7, asr #27
    6fc4:	010d2901 	tsteq	sp, r1, lsl #18
    6fc8:	00002538 	andeq	r2, r0, r8, lsr r5
    6fcc:	00002568 	andeq	r2, r0, r8, ror #10
    6fd0:	09799c01 	ldmdbeq	r9!, {r0, sl, fp, ip, pc}^
    6fd4:	62190000 	andsvs	r0, r9, #0
    6fd8:	1c290100 	stfnes	f0, [r9], #-0
    6fdc:	000000b1 	strheq	r0, [r0], -r1
    6fe0:	0000258f 	andeq	r2, r0, pc, lsl #11
    6fe4:	01006930 	tsteq	r0, r0, lsr r9
    6fe8:	0081062b 	addeq	r0, r1, fp, lsr #12
    6fec:	3d270000 	stccc	0, cr0, [r7, #-0]
    6ff0:	4000000a 	andmi	r0, r0, sl
    6ff4:	60000025 	andvs	r0, r0, r5, lsr #32
    6ff8:	0100000b 	tsteq	r0, fp
    6ffc:	092e0332 	stmdbeq	lr!, {r1, r4, r5, r8, r9}
    7000:	4c210000 	stcmi	0, cr0, [r1], #-0
    7004:	0000000a 	andeq	r0, r0, sl
    7008:	000a3d33 	andeq	r3, sl, r3, lsr sp
    700c:	00254c00 	eoreq	r4, r5, r0, lsl #24
    7010:	00255000 	eoreq	r5, r5, r0
    7014:	042f0100 	strteq	r0, [pc], #-256	; 701c <__exidx_end+0x13dc>
    7018:	00000948 	andeq	r0, r0, r8, asr #18
    701c:	000a4c21 	andeq	r4, sl, r1, lsr #24
    7020:	20330000 	eorscs	r0, r3, r0
    7024:	5000000a 	andpl	r0, r0, sl
    7028:	52000025 	andpl	r0, r0, #37	; 0x25
    702c:	01000025 	tsteq	r0, r5, lsr #32
    7030:	09620431 	stmdbeq	r2!, {r0, r4, r5, sl}^
    7034:	2f210000 	svccs	0x00210000
    7038:	0000000a 	andeq	r0, r0, sl
    703c:	000a2025 	andeq	r2, sl, r5, lsr #32
    7040:	00255800 	eoreq	r5, r5, r0, lsl #16
    7044:	000b8000 	andeq	r8, fp, r0
    7048:	03330100 	teqeq	r3, #0, 2
    704c:	000a2f21 	andeq	r2, sl, r1, lsr #30
    7050:	34000000 	strcc	r0, [r0], #-0
    7054:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
    7058:	b10d1901 	tstlt	sp, r1, lsl #18
    705c:	04000000 	streq	r0, [r0], #-0
    7060:	38000025 	stmdacc	r0, {r0, r2, r5}
    7064:	01000025 	tsteq	r0, r5, lsr #32
    7068:	0009f69c 	muleq	r9, ip, r6
    706c:	00693000 	rsbeq	r3, r9, r0
    7070:	81061b01 	tsthi	r6, r1, lsl #22
    7074:	35000000 	strcc	r0, [r0, #-0]
    7078:	1c010062 	stcne	0, cr0, [r1], {98}	; 0x62
    707c:	0000b107 	andeq	fp, r0, r7, lsl #2
    7080:	0025ad00 	eoreq	sl, r5, r0, lsl #26
    7084:	0a3d2700 	beq	f50c8c <__ccfg+0xf30ce4>
    7088:	25080000 	strcs	r0, [r8, #-0]
    708c:	0b000000 	bleq	7094 <__exidx_end+0x1454>
    7090:	22010000 	andcs	r0, r1, #0
    7094:	0009c503 	andeq	ip, r9, r3, lsl #10
    7098:	0a4c2100 	beq	130f4a0 <__ccfg+0x12ef4f8>
    709c:	27000000 	strcs	r0, [r0, -r0]
    70a0:	00000a20 	andeq	r0, r0, r0, lsr #20
    70a4:	0000250e 	andeq	r2, r0, lr, lsl #10
    70a8:	00000b28 	andeq	r0, r0, r8, lsr #22
    70ac:	df032301 	svcle	0x00032301
    70b0:	21000009 	tstcs	r0, r9
    70b4:	00000a2f 	andeq	r0, r0, pc, lsr #20
    70b8:	0a5a2500 	beq	16904c0 <__ccfg+0x1670518>
    70bc:	25100000 	ldrcs	r0, [r0, #-0]
    70c0:	0b400000 	bleq	10070c8 <__ccfg+0xfe7120>
    70c4:	20010000 	andcs	r0, r1, r0
    70c8:	0a6c2107 	beq	1b0f4ec <__ccfg+0x1aef544>
    70cc:	00000000 	andeq	r0, r0, r0
    70d0:	000f5036 	andeq	r5, pc, r6, lsr r0	; <UNPREDICTABLE>
    70d4:	02060200 	andeq	r0, r6, #0, 4
    70d8:	20030101 	andcs	r0, r3, r1, lsl #2
    70dc:	3700000a 	strcc	r0, [r0, -sl]
    70e0:	00001121 	andeq	r1, r0, r1, lsr #2
    70e4:	23020602 	movwcs	r0, #9730	; 0x2602
    70e8:	00000067 	andeq	r0, r0, r7, rrx
    70ec:	00143037 	andseq	r3, r4, r7, lsr r0
    70f0:	02060200 	andeq	r0, r6, #0, 4
    70f4:	00006737 	andeq	r6, r0, r7, lsr r7
    70f8:	c4360000 	ldrtgt	r0, [r6], #-0
    70fc:	02000012 	andeq	r0, r0, #18
    7100:	01010154 	tsteq	r1, r4, asr r1
    7104:	000a3d03 	andeq	r3, sl, r3, lsl #26
    7108:	11213700 			; <UNDEFINED> instruction: 0x11213700
    710c:	54020000 	strpl	r0, [r2], #-0
    7110:	00671901 	rsbeq	r1, r7, r1, lsl #18
    7114:	36000000 	strcc	r0, [r0], -r0
    7118:	000013d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    711c:	01011e02 	tsteq	r1, r2, lsl #28
    7120:	0a5a0301 	beq	1687d2c <__ccfg+0x1667d84>
    7124:	21370000 	teqcs	r7, r0
    7128:	02000011 	andeq	r0, r0, #17
    712c:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
    7130:	00000000 	andeq	r0, r0, r0
    7134:	001bd538 	andseq	sp, fp, r8, lsr r5
    7138:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    713c:	00006701 	andeq	r6, r0, r1, lsl #14
    7140:	0a790300 	beq	1e47d48 <__ccfg+0x1e27da0>
    7144:	21390000 	teqcs	r9, r0
    7148:	02000011 	andeq	r0, r0, #17
    714c:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    7150:	3a000000 	bcc	7158 <__exidx_end+0x1518>
    7154:	00000796 	muleq	r0, r6, r7
    7158:	00002614 	andeq	r2, r0, r4, lsl r6
    715c:	00002638 	andeq	r2, r0, r8, lsr r6
    7160:	96289c01 	strtls	r9, [r8], -r1, lsl #24
    7164:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    7168:	32000026 	andcc	r0, r0, #38	; 0x26
    716c:	01000026 	tsteq	r0, r6, lsr #32
    7170:	a83b0d78 	ldmdage	fp!, {r3, r4, r5, r6, r8, sl, fp}
    7174:	28000007 	stmdacs	r0, {r0, r1, r2}
    7178:	2e000026 	cdpcs	0, 0, cr0, cr0, cr6, {1}
    717c:	01000026 	tsteq	r0, r6, lsr #32
    7180:	0000037c 	andeq	r0, r0, ip, ror r3
    7184:	00041e00 	andeq	r1, r4, r0, lsl #28
    7188:	83000300 	movwhi	r0, #768	; 0x300
    718c:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    7190:	0000ac01 	andeq	sl, r0, r1, lsl #24
    7194:	1dd00c00 	ldclne	12, cr0, [r0]
    7198:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    719c:	0d080000 	stceq	0, cr0, [r8, #-0]
    71a0:	00000000 	andeq	r0, r0, r0
    71a4:	50580000 	subspl	r0, r8, r0
    71a8:	01020000 	mrseq	r0, (UNDEF: 2)
    71ac:	000c5d06 	andeq	r5, ip, r6, lsl #26
    71b0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    71b4:	00000a6b 	andeq	r0, r0, fp, ror #20
    71b8:	fd050402 	stc2	4, cr0, [r5, #-8]
    71bc:	02000007 	andeq	r0, r0, #7
    71c0:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    71c4:	1c030000 	stcne	0, cr0, [r3], {-0}
    71c8:	0200002a 	andeq	r0, r0, #42	; 0x2a
    71cc:	004d182e 	subeq	r1, sp, lr, lsr #16
    71d0:	01020000 	mrseq	r0, (UNDEF: 2)
    71d4:	000c5b08 	andeq	r5, ip, r8, lsl #22
    71d8:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    71dc:	31020000 	mrscc	r0, (UNDEF: 2)
    71e0:	00006019 	andeq	r6, r0, r9, lsl r0
    71e4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    71e8:	00000d66 	andeq	r0, r0, r6, ror #26
    71ec:	0029b403 	eoreq	fp, r9, r3, lsl #8
    71f0:	19340200 	ldmdbne	r4!, {r9}
    71f4:	00000073 	andeq	r0, r0, r3, ror r0
    71f8:	26070402 	strcs	r0, [r7], -r2, lsl #8
    71fc:	02000004 	andeq	r0, r0, #4
    7200:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    7204:	04040000 	streq	r0, [r4], #-0
    7208:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    720c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7210:	0000042b 	andeq	r0, r0, fp, lsr #8
    7214:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    7218:	12270300 	eorne	r0, r7, #0, 6
    721c:	00000054 	andeq	r0, r0, r4, asr r0
    7220:	00008f05 	andeq	r8, r0, r5, lsl #30
    7224:	1dc20300 	stclne	3, cr0, [r2]
    7228:	2b030000 	blcs	c7230 <__ccfg+0xa7288>
    722c:	00004112 	andeq	r4, r0, r2, lsl r1
    7230:	00a00600 	adceq	r0, r0, r0, lsl #12
    7234:	4d030000 	stcmi	0, cr0, [r3, #-0]
    7238:	03000029 	movweq	r0, #41	; 0x29
    723c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    7240:	b1050000 	mrslt	r0, (UNDEF: 5)
    7244:	03000000 	movweq	r0, #0
    7248:	00000646 	andeq	r0, r0, r6, asr #12
    724c:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    7250:	03000000 	movweq	r0, #0
    7254:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    7258:	da102e03 	ble	412a6c <__ccfg+0x3f2ac4>
    725c:	07000000 	streq	r0, [r0, -r0]
    7260:	00008f04 	andeq	r8, r0, r4, lsl #30
    7264:	03080800 	movweq	r0, #34816	; 0x8800
    7268:	016e0932 	cmneq	lr, r2, lsr r9
    726c:	34090000 	strcc	r0, [r9], #-0
    7270:	03000000 	movweq	r0, #0
    7274:	00a00734 	adceq	r0, r0, r4, lsr r7
    7278:	01010000 	mrseq	r0, (UNDEF: 1)
    727c:	4c090007 	stcmi	0, cr0, [r9], {7}
    7280:	03000006 	movweq	r0, #6
    7284:	00a00335 	adceq	r0, r0, r5, lsr r3
    7288:	01010000 	mrseq	r0, (UNDEF: 1)
    728c:	e7090006 	str	r0, [r9, -r6]
    7290:	03000002 	movweq	r0, #2
    7294:	00a00336 	adceq	r0, r0, r6, lsr r3
    7298:	01010000 	mrseq	r0, (UNDEF: 1)
    729c:	b7090005 	strlt	r0, [r9, -r5]
    72a0:	03000006 	movweq	r0, #6
    72a4:	00a00337 	adceq	r0, r0, r7, lsr r3
    72a8:	01010000 	mrseq	r0, (UNDEF: 1)
    72ac:	9f090004 	svcls	0x00090004
    72b0:	0300000a 	movweq	r0, #10
    72b4:	00a00338 	adceq	r0, r0, r8, lsr r3
    72b8:	04010000 	streq	r0, [r1], #-0
    72bc:	5b0a0000 	blpl	2872c4 <__ccfg+0x26731c>
    72c0:	03000006 	movweq	r0, #6
    72c4:	00a0073a 	adceq	r0, r0, sl, lsr r7
    72c8:	0a010000 	beq	472d0 <__ccfg+0x27328>
    72cc:	000008fb 	strdeq	r0, [r0], -fp
    72d0:	a0033c03 	andge	r3, r3, r3, lsl #24
    72d4:	02000000 	andeq	r0, r0, #0
    72d8:	000f3a0a 	andeq	r3, pc, sl, lsl #20
    72dc:	033d0300 	teqeq	sp, #0, 6
    72e0:	000000a0 	andeq	r0, r0, r0, lsr #1
    72e4:	09130a03 	ldmdbeq	r3, {r0, r1, r9, fp}
    72e8:	3f030000 	svccc	0x00030000
    72ec:	0000b108 	andeq	fp, r0, r8, lsl #2
    72f0:	03000400 	movweq	r0, #1024	; 0x400
    72f4:	0000031d 	andeq	r0, r0, sp, lsl r3
    72f8:	e0034103 	and	r4, r3, r3, lsl #2
    72fc:	06000000 	streq	r0, [r0], -r0
    7300:	0000016e 	andeq	r0, r0, lr, ror #2
    7304:	0006be0b 	andeq	fp, r6, fp, lsl #28
    7308:	1a430300 	bne	10c7f10 <__ccfg+0x10a7f68>
    730c:	0000017a 	andeq	r0, r0, sl, ror r1
    7310:	a00b0101 	andge	r0, fp, r1, lsl #2
    7314:	03000001 	movweq	r0, #1
    7318:	019b0e45 	orrseq	r0, fp, r5, asr #28
    731c:	01010000 	mrseq	r0, (UNDEF: 1)
    7320:	01a10407 			; <UNDEFINED> instruction: 0x01a10407
    7324:	01020000 	mrseq	r0, (UNDEF: 2)
    7328:	000c6408 	andeq	r6, ip, r8, lsl #8
    732c:	01a10500 			; <UNDEFINED> instruction: 0x01a10500
    7330:	260b0000 	strcs	r0, [fp], -r0
    7334:	03000003 	movweq	r0, #3
    7338:	019b1e45 	orrseq	r1, fp, r5, asr #28
    733c:	01010000 	mrseq	r0, (UNDEF: 1)
    7340:	8f040808 	svchi	0x00040808
    7344:	0001ec09 	andeq	lr, r1, r9, lsl #24
    7348:	0cd80a00 	vldmiaeq	r8, {s1-s0}
    734c:	90040000 	andls	r0, r4, r0
    7350:	0000670b 	andeq	r6, r0, fp, lsl #14
    7354:	750a0000 	strvc	r0, [sl, #-0]
    7358:	04000010 	streq	r0, [r0], #-16
    735c:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    7360:	0a040000 	beq	107368 <__ccfg+0xe73c0>
    7364:	000001c5 	andeq	r0, r0, r5, asr #3
    7368:	ac109204 	lfmge	f1, 1, [r0], {4}
    736c:	06000000 	streq	r0, [r0], -r0
    7370:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    7374:	93040000 	movwls	r0, #16384	; 0x4000
    7378:	0001bb03 	andeq	fp, r1, r3, lsl #22
    737c:	01ec0c00 	mvneq	r0, r0, lsl #24
    7380:	02030000 	andeq	r0, r3, #0
    7384:	000d0000 	andeq	r0, sp, r0
    7388:	00093d0b 	andeq	r3, r9, fp, lsl #26
    738c:	0f990400 	svceq	0x00990400
    7390:	000001f8 	strdeq	r0, [r0], -r8
    7394:	01080101 	tsteq	r8, r1, lsl #2
    7398:	3b099105 	blcc	26b7b4 <__ccfg+0x24b80c>
    739c:	09000002 	stmdbeq	r0, {r1}
    73a0:	0000091a 	andeq	r0, r0, sl, lsl r9
    73a4:	a0079305 	andge	r9, r7, r5, lsl #6
    73a8:	01000000 	mrseq	r0, (UNDEF: 0)
    73ac:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    73b0:	000005cc 	andeq	r0, r0, ip, asr #11
    73b4:	a0039405 	andge	r9, r3, r5, lsl #8
    73b8:	01000000 	mrseq	r0, (UNDEF: 0)
    73bc:	00000001 	andeq	r0, r0, r1
    73c0:	000aab03 	andeq	sl, sl, r3, lsl #22
    73c4:	03960500 	orrseq	r0, r6, #0, 10
    73c8:	00000211 	andeq	r0, r0, r1, lsl r2
    73cc:	00023b05 	andeq	r3, r2, r5, lsl #22
    73d0:	02470c00 	subeq	r0, r7, #0, 24
    73d4:	02570000 	subseq	r0, r7, #0
    73d8:	000d0000 	andeq	r0, sp, r0
    73dc:	00024c05 	andeq	r4, r2, r5, lsl #24
    73e0:	03aa0b00 			; <UNDEFINED> instruction: 0x03aa0b00
    73e4:	9c050000 	stcls	0, cr0, [r5], {-0}
    73e8:	00025717 	andeq	r5, r2, r7, lsl r7
    73ec:	0c010100 	stfeqs	f0, [r1], {-0}
    73f0:	0000009b 	muleq	r0, fp, r0
    73f4:	00000275 	andeq	r0, r0, r5, ror r2
    73f8:	6a05000d 	bvs	147434 <__ccfg+0x12748c>
    73fc:	0b000002 	bleq	740c <__exidx_end+0x17cc>
    7400:	0000060e 	andeq	r0, r0, lr, lsl #12
    7404:	75130606 	ldrvc	r0, [r3, #-1542]	; 0xfffff9fa
    7408:	01000002 	tsteq	r0, r2
    740c:	08dd0b01 	ldmeq	sp, {r0, r8, r9, fp}^
    7410:	c3040000 	movwgt	r0, #16384	; 0x4000
    7414:	0000b10e 	andeq	fp, r0, lr, lsl #2
    7418:	0e010100 	adfeqs	f0, f1, f0
    741c:	00000c72 	andeq	r0, r0, r2, ror ip
    7420:	10016e07 	andne	r6, r1, r7, lsl #28
    7424:	000002a3 	andeq	r0, r0, r3, lsr #5
    7428:	02a90407 	adceq	r0, r9, #117440512	; 0x7000000
    742c:	010f0000 	mrseq	r0, CPSR
    7430:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    7434:	00008f10 	andeq	r8, r0, r0, lsl pc
    7438:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    743c:	c0000001 	andgt	r0, r0, r1
    7440:	0d000002 	stceq	0, cr0, [r0, #-8]
    7444:	02b50500 	adcseq	r0, r5, #0, 10
    7448:	e6110000 	ldr	r0, [r1], -r0
    744c:	07000009 	streq	r0, [r0, -r9]
    7450:	c016017f 	andsgt	r0, r6, pc, ror r1
    7454:	01000002 	tsteq	r0, r2
    7458:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    745c:	82070000 	andhi	r0, r7, #0
    7460:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    7464:	01010000 	mrseq	r0, (UNDEF: 1)
    7468:	00036e11 	andeq	r6, r3, r1, lsl lr
    746c:	02d80700 	sbcseq	r0, r8, #0, 14
    7470:	0000b10e 	andeq	fp, r0, lr, lsl #2
    7474:	12010100 	andne	r0, r1, #0, 2
    7478:	03030708 	movweq	r0, #14088	; 0x3708
    747c:	00031909 	andeq	r1, r3, r9, lsl #18
    7480:	3ca11300 	stccc	3, cr1, [r1]
    7484:	07070000 	streq	r0, [r7, -r0]
    7488:	008f0703 	addeq	r0, pc, r3, lsl #14
    748c:	13000000 	movwne	r0, #0
    7490:	00000fcd 	andeq	r0, r0, sp, asr #31
    7494:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    7498:	000000c2 	andeq	r0, r0, r2, asr #1
    749c:	090e0004 	stmdbeq	lr, {r2}
    74a0:	0700000a 	streq	r0, [r0, -sl]
    74a4:	f2030309 	vcgt.s8	d0, d3, d9
    74a8:	14000002 	strne	r0, [r0], #-2
    74ac:	00000029 	andeq	r0, r0, r9, lsr #32
    74b0:	030b0730 	movweq	r0, #46896	; 0xb730
    74b4:	00038908 	andeq	r8, r3, r8, lsl #18
    74b8:	1f241300 	svcne	0x00241300
    74bc:	14070000 	strne	r0, [r7], #-0
    74c0:	008f0803 	addeq	r0, pc, r3, lsl #16
    74c4:	13000000 	movwne	r0, #0
    74c8:	00000be7 	andeq	r0, r0, r7, ror #23
    74cc:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    74d0:	0000008f 	andeq	r0, r0, pc, lsl #1
    74d4:	4c8e1302 	stcmi	3, cr1, [lr], {2}
    74d8:	16070000 	strne	r0, [r7], -r0
    74dc:	02960b03 	addseq	r0, r6, #3072	; 0xc00
    74e0:	13040000 	movwne	r0, #16384	; 0x4000
    74e4:	00004754 	andeq	r4, r0, r4, asr r7
    74e8:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    74ec:	000000c2 	andeq	r0, r0, r2, asr #1
    74f0:	000f1308 	andeq	r1, pc, r8, lsl #6
    74f4:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    74f8:	03890f03 	orreq	r0, r9, #3, 30
    74fc:	130c0000 	movwne	r0, #49152	; 0xc000
    7500:	0000095d 	andeq	r0, r0, sp, asr r9
    7504:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    7508:	00000399 	muleq	r0, r9, r3
    750c:	190c002c 	stmdbne	ip, {r2, r3, r5}
    7510:	99000003 	stmdbls	r0, {r0, r1}
    7514:	15000003 	strne	r0, [r0, #-3]
    7518:	00000088 	andeq	r0, r0, r8, lsl #1
    751c:	04070003 	streq	r0, [r7], #-3
    7520:	00000326 	andeq	r0, r0, r6, lsr #6
    7524:	000bdc0e 	andeq	sp, fp, lr, lsl #24
    7528:	031c0700 	tsteq	ip, #0, 14
    752c:	0003261b 	andeq	r2, r3, fp, lsl r6
    7530:	0bbc1100 	bleq	fef0b938 <_estack+0xdef06938>
    7534:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    7538:	03bb1403 			; <UNDEFINED> instruction: 0x03bb1403
    753c:	01010000 	mrseq	r0, (UNDEF: 1)
    7540:	039f0407 	orrseq	r0, pc, #117440512	; 0x7000000
    7544:	01160000 	tsteq	r6, r0
    7548:	00001e11 	andeq	r1, r0, r1, lsl lr
    754c:	01050b01 	tsteq	r5, r1, lsl #22
    7550:	00000081 	andeq	r0, r0, r1, lsl #1
    7554:	00002660 	andeq	r2, r0, r0, ror #12
    7558:	000026cc 	andeq	r2, r0, ip, asr #13
    755c:	041b9c01 	ldreq	r9, [fp], #-3073	; 0xfffff3ff
    7560:	73170000 	tstvc	r7, #0
    7564:	0b010074 	bleq	4773c <__ccfg+0x27794>
    7568:	00008f13 	andeq	r8, r0, r3, lsl pc
    756c:	0025cb00 	eoreq	ip, r5, r0, lsl #22
    7570:	006d1700 	rsbeq	r1, sp, r0, lsl #14
    7574:	1b230b01 	blne	8ca180 <__ccfg+0x8aa1d8>
    7578:	de000004 	cdple	0, 0, cr0, cr0, cr4, {0}
    757c:	18000025 	stmdane	r0, {r0, r2, r5}
    7580:	0000260b 	andeq	r2, r0, fp, lsl #12
    7584:	81060d01 	tsthi	r6, r1, lsl #26
    7588:	fc000000 	stc2	0, cr0, [r0], {-0}
    758c:	19000025 	stmdbne	r0, {r0, r2, r5}
    7590:	00667562 	rsbeq	r7, r6, r2, ror #10
    7594:	9b080e01 	blls	20ada0 <__ccfg+0x1eadf8>
    7598:	3b000001 	blcc	75a4 <__exidx_end+0x1964>
    759c:	00000026 	andeq	r0, r0, r6, lsr #32
    75a0:	01a80407 			; <UNDEFINED> instruction: 0x01a80407
    75a4:	12000000 	andne	r0, r0, #0
    75a8:	03000004 	movweq	r0, #4
    75ac:	001ce500 	andseq	lr, ip, r0, lsl #10
    75b0:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    75b4:	0c000000 	stceq	0, cr0, [r0], {-0}
    75b8:	00001e19 	andeq	r1, r0, r9, lsl lr
    75bc:	00000e0a 	andeq	r0, r0, sl, lsl #28
    75c0:	00000d18 	andeq	r0, r0, r8, lsl sp
    75c4:	00000000 	andeq	r0, r0, r0
    75c8:	0000520c 	andeq	r5, r0, ip, lsl #4
    75cc:	5d060102 	stfpls	f0, [r6, #-8]
    75d0:	0200000c 	andeq	r0, r0, #12
    75d4:	0a6b0502 	beq	1ac89e4 <__ccfg+0x1aa8a3c>
    75d8:	04020000 	streq	r0, [r2], #-0
    75dc:	0007fd05 	andeq	pc, r7, r5, lsl #26
    75e0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    75e4:	000007f8 	strdeq	r0, [r0], -r8
    75e8:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    75ec:	182e0200 	stmdane	lr!, {r9}
    75f0:	0000004d 	andeq	r0, r0, sp, asr #32
    75f4:	5b080102 	blpl	207a04 <__ccfg+0x1e7a5c>
    75f8:	0300000c 	movweq	r0, #12
    75fc:	00002e12 	andeq	r2, r0, r2, lsl lr
    7600:	60193102 	andsvs	r3, r9, r2, lsl #2
    7604:	02000000 	andeq	r0, r0, #0
    7608:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    760c:	b4030000 	strlt	r0, [r3], #-0
    7610:	02000029 	andeq	r0, r0, #41	; 0x29
    7614:	00731934 	rsbseq	r1, r3, r4, lsr r9
    7618:	04020000 	streq	r0, [r2], #-0
    761c:	00042607 	andeq	r2, r4, r7, lsl #12
    7620:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7624:	00000421 	andeq	r0, r0, r1, lsr #8
    7628:	69050404 	stmdbvs	r5, {r2, sl}
    762c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    7630:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    7634:	fb030000 	blx	c763e <__ccfg+0xa7696>
    7638:	03000028 	movweq	r0, #40	; 0x28
    763c:	00541227 	subseq	r1, r4, r7, lsr #4
    7640:	8f050000 	svchi	0x00050000
    7644:	03000000 	movweq	r0, #0
    7648:	00001dc2 	andeq	r1, r0, r2, asr #27
    764c:	41122b03 	tstmi	r2, r3, lsl #22
    7650:	06000000 	streq	r0, [r0], -r0
    7654:	000000a0 	andeq	r0, r0, r0, lsr #1
    7658:	00294d03 	eoreq	r4, r9, r3, lsl #26
    765c:	122c0300 	eorne	r0, ip, #0, 6
    7660:	00000067 	andeq	r0, r0, r7, rrx
    7664:	0000b105 	andeq	fp, r0, r5, lsl #2
    7668:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    766c:	2d030000 	stccs	0, cr0, [r3, #-0]
    7670:	00006712 	andeq	r6, r0, r2, lsl r7
    7674:	03080700 	movweq	r0, #34560	; 0x8700
    7678:	015c0932 	cmpeq	ip, r2, lsr r9
    767c:	34080000 	strcc	r0, [r8], #-0
    7680:	03000000 	movweq	r0, #0
    7684:	00a00734 	adceq	r0, r0, r4, lsr r7
    7688:	01010000 	mrseq	r0, (UNDEF: 1)
    768c:	4c080007 	stcmi	0, cr0, [r8], {7}
    7690:	03000006 	movweq	r0, #6
    7694:	00a00335 	adceq	r0, r0, r5, lsr r3
    7698:	01010000 	mrseq	r0, (UNDEF: 1)
    769c:	e7080006 	str	r0, [r8, -r6]
    76a0:	03000002 	movweq	r0, #2
    76a4:	00a00336 	adceq	r0, r0, r6, lsr r3
    76a8:	01010000 	mrseq	r0, (UNDEF: 1)
    76ac:	b7080005 	strlt	r0, [r8, -r5]
    76b0:	03000006 	movweq	r0, #6
    76b4:	00a00337 	adceq	r0, r0, r7, lsr r3
    76b8:	01010000 	mrseq	r0, (UNDEF: 1)
    76bc:	9f080004 	svcls	0x00080004
    76c0:	0300000a 	movweq	r0, #10
    76c4:	00a00338 	adceq	r0, r0, r8, lsr r3
    76c8:	04010000 	streq	r0, [r1], #-0
    76cc:	5b090000 	blpl	2476d4 <__ccfg+0x22772c>
    76d0:	03000006 	movweq	r0, #6
    76d4:	00a0073a 	adceq	r0, r0, sl, lsr r7
    76d8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    76dc:	000008fb 	strdeq	r0, [r0], -fp
    76e0:	a0033c03 	andge	r3, r3, r3, lsl #24
    76e4:	02000000 	andeq	r0, r0, #0
    76e8:	000f3a09 	andeq	r3, pc, r9, lsl #20
    76ec:	033d0300 	teqeq	sp, #0, 6
    76f0:	000000a0 	andeq	r0, r0, r0, lsr #1
    76f4:	09130903 	ldmdbeq	r3, {r0, r1, r8, fp}
    76f8:	3f030000 	svccc	0x00030000
    76fc:	0000b108 	andeq	fp, r0, r8, lsl #2
    7700:	03000400 	movweq	r0, #1024	; 0x400
    7704:	0000031d 	andeq	r0, r0, sp, lsl r3
    7708:	ce034103 	adfgts	f4, f3, f3
    770c:	06000000 	streq	r0, [r0], -r0
    7710:	0000015c 	andeq	r0, r0, ip, asr r1
    7714:	0006be0a 	andeq	fp, r6, sl, lsl #28
    7718:	1a430300 	bne	10c8320 <__ccfg+0x10a8378>
    771c:	00000168 	andeq	r0, r0, r8, ror #2
    7720:	a00a0101 	andge	r0, sl, r1, lsl #2
    7724:	03000001 	movweq	r0, #1
    7728:	01890e45 	orreq	r0, r9, r5, asr #28
    772c:	01010000 	mrseq	r0, (UNDEF: 1)
    7730:	018f040b 	orreq	r0, pc, fp, lsl #8
    7734:	01020000 	mrseq	r0, (UNDEF: 2)
    7738:	000c6408 	andeq	r6, ip, r8, lsl #8
    773c:	018f0500 	orreq	r0, pc, r0, lsl #10
    7740:	260a0000 	strcs	r0, [sl], -r0
    7744:	03000003 	movweq	r0, #3
    7748:	01891e45 	orreq	r1, r9, r5, asr #28
    774c:	01010000 	mrseq	r0, (UNDEF: 1)
    7750:	8f040807 	svchi	0x00040807
    7754:	0001da09 	andeq	sp, r1, r9, lsl #20
    7758:	0cd80900 			; <UNDEFINED> instruction: 0x0cd80900
    775c:	90040000 	andls	r0, r4, r0
    7760:	0000670b 	andeq	r6, r0, fp, lsl #14
    7764:	75090000 	strvc	r0, [r9, #-0]
    7768:	04000010 	streq	r0, [r0], #-16
    776c:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    7770:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7774:	000001c5 	andeq	r0, r0, r5, asr #3
    7778:	ac109204 	lfmge	f1, 1, [r0], {4}
    777c:	06000000 	streq	r0, [r0], -r0
    7780:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    7784:	93040000 	movwls	r0, #16384	; 0x4000
    7788:	0001a903 	andeq	sl, r1, r3, lsl #18
    778c:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    7790:	01f10000 	mvnseq	r0, r0
    7794:	000d0000 	andeq	r0, sp, r0
    7798:	00093d0a 	andeq	r3, r9, sl, lsl #26
    779c:	0f990400 	svceq	0x00990400
    77a0:	000001e6 	andeq	r0, r0, r6, ror #3
    77a4:	01070101 	tsteq	r7, r1, lsl #2
    77a8:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    77ac:	08000002 	stmdaeq	r0, {r1}
    77b0:	0000091a 	andeq	r0, r0, sl, lsl r9
    77b4:	a0079305 	andge	r9, r7, r5, lsl #6
    77b8:	01000000 	mrseq	r0, (UNDEF: 0)
    77bc:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    77c0:	000005cc 	andeq	r0, r0, ip, asr #11
    77c4:	a0039405 	andge	r9, r3, r5, lsl #8
    77c8:	01000000 	mrseq	r0, (UNDEF: 0)
    77cc:	00000001 	andeq	r0, r0, r1
    77d0:	000aab03 	andeq	sl, sl, r3, lsl #22
    77d4:	03960500 	orrseq	r0, r6, #0, 10
    77d8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    77dc:	00022905 	andeq	r2, r2, r5, lsl #18
    77e0:	02350c00 	eorseq	r0, r5, #0, 24
    77e4:	02450000 	subeq	r0, r5, #0
    77e8:	000d0000 	andeq	r0, sp, r0
    77ec:	00023a05 	andeq	r3, r2, r5, lsl #20
    77f0:	03aa0a00 			; <UNDEFINED> instruction: 0x03aa0a00
    77f4:	9c050000 	stcls	0, cr0, [r5], {-0}
    77f8:	00024517 	andeq	r4, r2, r7, lsl r5
    77fc:	0c010100 	stfeqs	f0, [r1], {-0}
    7800:	0000009b 	muleq	r0, fp, r0
    7804:	00000263 	andeq	r0, r0, r3, ror #4
    7808:	5805000d 	stmdapl	r5, {r0, r2, r3}
    780c:	0a000002 	beq	781c <__exidx_end+0x1bdc>
    7810:	0000060e 	andeq	r0, r0, lr, lsl #12
    7814:	63130606 	tstvs	r3, #6291456	; 0x600000
    7818:	01000002 	tsteq	r0, r2
    781c:	08dd0a01 	ldmeq	sp, {r0, r9, fp}^
    7820:	c3040000 	movwgt	r0, #16384	; 0x4000
    7824:	0000b10e 	andeq	fp, r0, lr, lsl #2
    7828:	0e010100 	adfeqs	f0, f1, f0
    782c:	00000c72 	andeq	r0, r0, r2, ror ip
    7830:	10016e07 	andne	r6, r1, r7, lsl #28
    7834:	00000291 	muleq	r0, r1, r2
    7838:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    783c:	010f0000 	mrseq	r0, CPSR
    7840:	000002a3 	andeq	r0, r0, r3, lsr #5
    7844:	00008f10 	andeq	r8, r0, r0, lsl pc
    7848:	960c0000 	strls	r0, [ip], -r0
    784c:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    7850:	0d000002 	stceq	0, cr0, [r0, #-8]
    7854:	02a30500 	adceq	r0, r3, #0, 10
    7858:	e6110000 	ldr	r0, [r1], -r0
    785c:	07000009 	streq	r0, [r0, -r9]
    7860:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    7864:	01000002 	tsteq	r0, r2
    7868:	03961101 	orrseq	r1, r6, #1073741824	; 0x40000000
    786c:	82070000 	andhi	r0, r7, #0
    7870:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    7874:	01010000 	mrseq	r0, (UNDEF: 1)
    7878:	00036e11 	andeq	r6, r3, r1, lsl lr
    787c:	02d80700 	sbcseq	r0, r8, #0, 14
    7880:	0000b10e 	andeq	fp, r0, lr, lsl #2
    7884:	12010100 	andne	r0, r1, #0, 2
    7888:	03030708 	movweq	r0, #14088	; 0x3708
    788c:	00030709 	andeq	r0, r3, r9, lsl #14
    7890:	3ca11300 	stccc	3, cr1, [r1]
    7894:	07070000 	streq	r0, [r7, -r0]
    7898:	008f0703 	addeq	r0, pc, r3, lsl #14
    789c:	13000000 	movwne	r0, #0
    78a0:	00000fcd 	andeq	r0, r0, sp, asr #31
    78a4:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    78a8:	000000c2 	andeq	r0, r0, r2, asr #1
    78ac:	090e0004 	stmdbeq	lr, {r2}
    78b0:	0700000a 	streq	r0, [r0, -sl]
    78b4:	e0030309 	and	r0, r3, r9, lsl #6
    78b8:	14000002 	strne	r0, [r0], #-2
    78bc:	00000029 	andeq	r0, r0, r9, lsr #32
    78c0:	030b0730 	movweq	r0, #46896	; 0xb730
    78c4:	00037708 	andeq	r7, r3, r8, lsl #14
    78c8:	1f241300 	svcne	0x00241300
    78cc:	14070000 	strne	r0, [r7], #-0
    78d0:	008f0803 	addeq	r0, pc, r3, lsl #16
    78d4:	13000000 	movwne	r0, #0
    78d8:	00000be7 	andeq	r0, r0, r7, ror #23
    78dc:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    78e0:	0000008f 	andeq	r0, r0, pc, lsl #1
    78e4:	4c8e1302 	stcmi	3, cr1, [lr], {2}
    78e8:	16070000 	strne	r0, [r7], -r0
    78ec:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    78f0:	13040000 	movwne	r0, #16384	; 0x4000
    78f4:	00004754 	andeq	r4, r0, r4, asr r7
    78f8:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    78fc:	000000c2 	andeq	r0, r0, r2, asr #1
    7900:	000f1308 	andeq	r1, pc, r8, lsl #6
    7904:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    7908:	03770f03 	cmneq	r7, #3, 30
    790c:	130c0000 	movwne	r0, #49152	; 0xc000
    7910:	0000095d 	andeq	r0, r0, sp, asr r9
    7914:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    7918:	00000387 	andeq	r0, r0, r7, lsl #7
    791c:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    7920:	87000003 	strhi	r0, [r0, -r3]
    7924:	15000003 	strne	r0, [r0, #-3]
    7928:	00000088 	andeq	r0, r0, r8, lsl #1
    792c:	040b0003 	streq	r0, [fp], #-3
    7930:	00000314 	andeq	r0, r0, r4, lsl r3
    7934:	000bdc0e 	andeq	sp, fp, lr, lsl #24
    7938:	031c0700 	tsteq	ip, #0, 14
    793c:	0003141b 	andeq	r1, r3, fp, lsl r4
    7940:	0bbc1100 	bleq	fef0bd48 <_estack+0xdef06d48>
    7944:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    7948:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    794c:	01010000 	mrseq	r0, (UNDEF: 1)
    7950:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    7954:	590a0000 	stmdbpl	sl, {}	; <UNPREDICTABLE>
    7958:	0100001e 	tsteq	r0, lr, lsl r0
    795c:	01890e09 	orreq	r0, r9, r9, lsl #28
    7960:	01010000 	mrseq	r0, (UNDEF: 1)
    7964:	1e630116 	mcrne	1, 3, r0, cr3, cr6, {0}
    7968:	0d010000 	stceq	0, cr0, [r1, #-0]
    796c:	00810105 	addeq	r0, r1, r5, lsl #2
    7970:	26cc0000 	strbcs	r0, [ip], r0
    7974:	27440000 	strbcs	r0, [r4, -r0]
    7978:	9c010000 	stcls	0, cr0, [r1], {-0}
    797c:	00747317 	rsbseq	r7, r4, r7, lsl r3
    7980:	8f120d01 	svchi	0x00120d01
    7984:	85000000 	strhi	r0, [r0, #-0]
    7988:	17000026 	strne	r0, [r0, -r6, lsr #32]
    798c:	00667562 	rsbeq	r7, r6, r2, ror #10
    7990:	891c0d01 	ldmdbhi	ip, {r0, r8, sl, fp}
    7994:	a3000001 	movwge	r0, #1
    7998:	17000026 	strne	r0, [r0, -r6, lsr #32]
    799c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    79a0:	81250d01 			; <UNDEFINED> instruction: 0x81250d01
    79a4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    79a8:	18000026 	stmdane	r0, {r1, r2, r5}
    79ac:	0000260b 	andeq	r2, r0, fp, lsl #12
    79b0:	81061101 	tsthi	r6, r1, lsl #2
    79b4:	4d000000 	stcmi	0, cr0, [r0, #-0]
    79b8:	00000027 	andeq	r0, r0, r7, lsr #32
    79bc:	00044c00 	andeq	r4, r4, r0, lsl #24
    79c0:	34000300 	strcc	r0, [r0], #-768	; 0xfffffd00
    79c4:	0400001e 	streq	r0, [r0], #-30	; 0xffffffe2
    79c8:	0000ac01 	andeq	sl, r0, r1, lsl #24
    79cc:	1e730c00 	cdpne	12, 7, cr0, cr3, cr0, {0}
    79d0:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    79d4:	0d280000 	stceq	0, cr0, [r8, #-0]
    79d8:	00000000 	andeq	r0, r0, r0
    79dc:	53d40000 	bicspl	r0, r4, #0
    79e0:	01020000 	mrseq	r0, (UNDEF: 2)
    79e4:	000c5d06 	andeq	r5, ip, r6, lsl #26
    79e8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    79ec:	00000a6b 	andeq	r0, r0, fp, ror #20
    79f0:	fd050402 	stc2	4, cr0, [r5, #-8]
    79f4:	02000007 	andeq	r0, r0, #7
    79f8:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    79fc:	1c030000 	stcne	0, cr0, [r3], {-0}
    7a00:	0200002a 	andeq	r0, r0, #42	; 0x2a
    7a04:	004d182e 	subeq	r1, sp, lr, lsr #16
    7a08:	01020000 	mrseq	r0, (UNDEF: 2)
    7a0c:	000c5b08 	andeq	r5, ip, r8, lsl #22
    7a10:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    7a14:	31020000 	mrscc	r0, (UNDEF: 2)
    7a18:	00006019 	andeq	r6, r0, r9, lsl r0
    7a1c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7a20:	00000d66 	andeq	r0, r0, r6, ror #26
    7a24:	0029b403 	eoreq	fp, r9, r3, lsl #8
    7a28:	19340200 	ldmdbne	r4!, {r9}
    7a2c:	00000073 	andeq	r0, r0, r3, ror r0
    7a30:	26070402 	strcs	r0, [r7], -r2, lsl #8
    7a34:	02000004 	andeq	r0, r0, #4
    7a38:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    7a3c:	04040000 	streq	r0, [r4], #-0
    7a40:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7a44:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7a48:	0000042b 	andeq	r0, r0, fp, lsr #8
    7a4c:	00051e03 	andeq	r1, r5, r3, lsl #28
    7a50:	1b280300 	blne	a08658 <__ccfg+0x9e86b0>
    7a54:	0000009b 	muleq	r0, fp, r0
    7a58:	000b9005 	andeq	r9, fp, r5
    7a5c:	00090400 	andeq	r0, r9, r0, lsl #8
    7a60:	000000b3 	strheq	r0, [r0], -r3
    7a64:	00086d06 	andeq	r6, r8, r6, lsl #26
    7a68:	0000b300 	andeq	fp, r0, r0, lsl #6
    7a6c:	00010000 	andeq	r0, r1, r0
    7a70:	92030407 	andls	r0, r3, #117440512	; 0x7000000
    7a74:	0300000b 	movweq	r0, #11
    7a78:	008f1863 	addeq	r1, pc, r3, ror #16
    7a7c:	fb030000 	blx	c7a86 <__ccfg+0xa7ade>
    7a80:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    7a84:	00541227 	subseq	r1, r4, r7, lsr #4
    7a88:	c1080000 	mrsgt	r0, (UNDEF: 8)
    7a8c:	03000000 	movweq	r0, #0
    7a90:	00001dc2 	andeq	r1, r0, r2, asr #27
    7a94:	41122b04 	tstmi	r2, r4, lsl #22
    7a98:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7a9c:	000000d2 	ldrdeq	r0, [r0], -r2
    7aa0:	00294d03 	eoreq	r4, r9, r3, lsl #26
    7aa4:	122c0400 	eorne	r0, ip, #0, 8
    7aa8:	00000067 	andeq	r0, r0, r7, rrx
    7aac:	0000e308 	andeq	lr, r0, r8, lsl #6
    7ab0:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    7ab4:	2d040000 	stccs	0, cr0, [r4, #-0]
    7ab8:	00006712 	andeq	r6, r0, r2, lsl r7
    7abc:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    7ac0:	018e0932 	orreq	r0, lr, r2, lsr r9
    7ac4:	340b0000 	strcc	r0, [fp], #-0
    7ac8:	04000000 	streq	r0, [r0], #-0
    7acc:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    7ad0:	01010000 	mrseq	r0, (UNDEF: 1)
    7ad4:	4c0b0007 	stcmi	0, cr0, [fp], {7}
    7ad8:	04000006 	streq	r0, [r0], #-6
    7adc:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    7ae0:	01010000 	mrseq	r0, (UNDEF: 1)
    7ae4:	e70b0006 	str	r0, [fp, -r6]
    7ae8:	04000002 	streq	r0, [r0], #-2
    7aec:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    7af0:	01010000 	mrseq	r0, (UNDEF: 1)
    7af4:	b70b0005 	strlt	r0, [fp, -r5]
    7af8:	04000006 	streq	r0, [r0], #-6
    7afc:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    7b00:	01010000 	mrseq	r0, (UNDEF: 1)
    7b04:	9f0b0004 	svcls	0x000b0004
    7b08:	0400000a 	streq	r0, [r0], #-10
    7b0c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    7b10:	04010000 	streq	r0, [r1], #-0
    7b14:	5b0c0000 	blpl	307b1c <__ccfg+0x2e7b74>
    7b18:	04000006 	streq	r0, [r0], #-6
    7b1c:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    7b20:	0c010000 	stceq	0, cr0, [r1], {-0}
    7b24:	000008fb 	strdeq	r0, [r0], -fp
    7b28:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    7b2c:	02000000 	andeq	r0, r0, #0
    7b30:	000f3a0c 	andeq	r3, pc, ip, lsl #20
    7b34:	033d0400 	teqeq	sp, #0, 8
    7b38:	000000d2 	ldrdeq	r0, [r0], -r2
    7b3c:	09130c03 	ldmdbeq	r3, {r0, r1, sl, fp}
    7b40:	3f040000 	svccc	0x00040000
    7b44:	0000e308 	andeq	lr, r0, r8, lsl #6
    7b48:	03000400 	movweq	r0, #1024	; 0x400
    7b4c:	0000031d 	andeq	r0, r0, sp, lsl r3
    7b50:	00034104 	andeq	r4, r3, r4, lsl #2
    7b54:	09000001 	stmdbeq	r0, {r0}
    7b58:	0000018e 	andeq	r0, r0, lr, lsl #3
    7b5c:	0006be0d 	andeq	fp, r6, sp, lsl #28
    7b60:	1a430400 	bne	10c8b68 <__ccfg+0x10a8bc0>
    7b64:	0000019a 	muleq	r0, sl, r1
    7b68:	a00d0101 	andge	r0, sp, r1, lsl #2
    7b6c:	04000001 	streq	r0, [r0], #-1
    7b70:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    7b74:	01010000 	mrseq	r0, (UNDEF: 1)
    7b78:	01c1040e 	biceq	r0, r1, lr, lsl #8
    7b7c:	01020000 	mrseq	r0, (UNDEF: 2)
    7b80:	000c6408 	andeq	r6, ip, r8, lsl #8
    7b84:	01c10800 	biceq	r0, r1, r0, lsl #16
    7b88:	260d0000 	strcs	r0, [sp], -r0
    7b8c:	04000003 	streq	r0, [r0], #-3
    7b90:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    7b94:	01010000 	mrseq	r0, (UNDEF: 1)
    7b98:	8f05080a 	svchi	0x0005080a
    7b9c:	00020c09 	andeq	r0, r2, r9, lsl #24
    7ba0:	0cd80c00 	ldcleq	12, cr0, [r8], {0}
    7ba4:	90050000 	andls	r0, r5, r0
    7ba8:	0000670b 	andeq	r6, r0, fp, lsl #14
    7bac:	750c0000 	strvc	r0, [ip, #-0]
    7bb0:	05000010 	streq	r0, [r0, #-16]
    7bb4:	00c10891 	smulleq	r0, r1, r1, r8
    7bb8:	0c040000 	stceq	0, cr0, [r4], {-0}
    7bbc:	000001c5 	andeq	r0, r0, r5, asr #3
    7bc0:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    7bc4:	06000000 	streq	r0, [r0], -r0
    7bc8:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    7bcc:	93050000 	movwls	r0, #20480	; 0x5000
    7bd0:	0001db03 	andeq	sp, r1, r3, lsl #22
    7bd4:	020c0f00 	andeq	r0, ip, #0, 30
    7bd8:	02230000 	eoreq	r0, r3, #0
    7bdc:	00100000 	andseq	r0, r0, r0
    7be0:	00093d0d 	andeq	r3, r9, sp, lsl #26
    7be4:	0f990500 	svceq	0x00990500
    7be8:	00000218 	andeq	r0, r0, r8, lsl r2
    7bec:	010a0101 	tsteq	sl, r1, lsl #2
    7bf0:	5b099106 	blpl	26c010 <__ccfg+0x24c068>
    7bf4:	0b000002 	bleq	7c04 <__exidx_end+0x1fc4>
    7bf8:	0000091a 	andeq	r0, r0, sl, lsl r9
    7bfc:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    7c00:	01000000 	mrseq	r0, (UNDEF: 0)
    7c04:	0b000107 	bleq	8028 <__exidx_end+0x23e8>
    7c08:	000005cc 	andeq	r0, r0, ip, asr #11
    7c0c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    7c10:	01000000 	mrseq	r0, (UNDEF: 0)
    7c14:	00000001 	andeq	r0, r0, r1
    7c18:	000aab03 	andeq	sl, sl, r3, lsl #22
    7c1c:	03960600 	orrseq	r0, r6, #0, 12
    7c20:	00000231 	andeq	r0, r0, r1, lsr r2
    7c24:	00025b08 	andeq	r5, r2, r8, lsl #22
    7c28:	02670f00 	rsbeq	r0, r7, #0, 30
    7c2c:	02770000 	rsbseq	r0, r7, #0
    7c30:	00100000 	andseq	r0, r0, r0
    7c34:	00026c08 	andeq	r6, r2, r8, lsl #24
    7c38:	03aa0d00 			; <UNDEFINED> instruction: 0x03aa0d00
    7c3c:	9c060000 	stcls	0, cr0, [r6], {-0}
    7c40:	00027717 	andeq	r7, r2, r7, lsl r7
    7c44:	0f010100 	svceq	0x00010100
    7c48:	000000cd 	andeq	r0, r0, sp, asr #1
    7c4c:	00000295 	muleq	r0, r5, r2
    7c50:	8a080010 	bhi	207c98 <__ccfg+0x1e7cf0>
    7c54:	0d000002 	stceq	0, cr0, [r0, #-8]
    7c58:	0000060e 	andeq	r0, r0, lr, lsl #12
    7c5c:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    7c60:	01000002 	tsteq	r0, r2
    7c64:	08dd0d01 	ldmeq	sp, {r0, r8, sl, fp}^
    7c68:	c3050000 	movwgt	r0, #20480	; 0x5000
    7c6c:	0000e30e 	andeq	lr, r0, lr, lsl #6
    7c70:	11010100 	mrsne	r0, (UNDEF: 17)
    7c74:	00000c72 	andeq	r0, r0, r2, ror ip
    7c78:	10016e08 	andne	r6, r1, r8, lsl #28
    7c7c:	000002c3 	andeq	r0, r0, r3, asr #5
    7c80:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    7c84:	01120000 	tsteq	r2, r0
    7c88:	000002d5 	ldrdeq	r0, [r0], -r5
    7c8c:	0000c113 	andeq	ip, r0, r3, lsl r1
    7c90:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    7c94:	e0000001 	and	r0, r0, r1
    7c98:	10000002 	andne	r0, r0, r2
    7c9c:	02d50800 	sbcseq	r0, r5, #0, 16
    7ca0:	e6140000 	ldr	r0, [r4], -r0
    7ca4:	08000009 	stmdaeq	r0, {r0, r3}
    7ca8:	e016017f 	ands	r0, r6, pc, ror r1
    7cac:	01000002 	tsteq	r0, r2
    7cb0:	03961401 	orrseq	r1, r6, #16777216	; 0x1000000
    7cb4:	82080000 	andhi	r0, r8, #0
    7cb8:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    7cbc:	01010000 	mrseq	r0, (UNDEF: 1)
    7cc0:	00036e14 	andeq	r6, r3, r4, lsl lr
    7cc4:	02d80800 	sbcseq	r0, r8, #0, 16
    7cc8:	0000e30e 	andeq	lr, r0, lr, lsl #6
    7ccc:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    7cd0:	03030808 	movweq	r0, #14344	; 0x3808
    7cd4:	00033909 	andeq	r3, r3, r9, lsl #18
    7cd8:	3ca11600 	stccc	6, cr1, [r1]
    7cdc:	07080000 	streq	r0, [r8, -r0]
    7ce0:	00c10703 	sbceq	r0, r1, r3, lsl #14
    7ce4:	16000000 	strne	r0, [r0], -r0
    7ce8:	00000fcd 	andeq	r0, r0, sp, asr #31
    7cec:	08030808 	stmdaeq	r3, {r3, fp}
    7cf0:	000000f4 	strdeq	r0, [r0], -r4
    7cf4:	09110004 	ldmdbeq	r1, {r2}
    7cf8:	0800000a 	stmdaeq	r0, {r1, r3}
    7cfc:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    7d00:	17000003 	strne	r0, [r0, -r3]
    7d04:	00000029 	andeq	r0, r0, r9, lsr #32
    7d08:	030b0830 	movweq	r0, #47152	; 0xb830
    7d0c:	0003a908 	andeq	sl, r3, r8, lsl #18
    7d10:	1f241600 	svcne	0x00241600
    7d14:	14080000 	strne	r0, [r8], #-0
    7d18:	00c10803 	sbceq	r0, r1, r3, lsl #16
    7d1c:	16000000 	strne	r0, [r0], -r0
    7d20:	00000be7 	andeq	r0, r0, r7, ror #23
    7d24:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    7d28:	000000c1 	andeq	r0, r0, r1, asr #1
    7d2c:	4c8e1602 	stcmi	6, cr1, [lr], {2}
    7d30:	16080000 	strne	r0, [r8], -r0
    7d34:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    7d38:	16040000 	strne	r0, [r4], -r0
    7d3c:	00004754 	andeq	r4, r0, r4, asr r7
    7d40:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    7d44:	000000f4 	strdeq	r0, [r0], -r4
    7d48:	000f1608 	andeq	r1, pc, r8, lsl #12
    7d4c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    7d50:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    7d54:	160c0000 	strne	r0, [ip], -r0
    7d58:	0000095d 	andeq	r0, r0, sp, asr r9
    7d5c:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    7d60:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    7d64:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    7d68:	b9000003 	stmdblt	r0, {r0, r1}
    7d6c:	18000003 	stmdane	r0, {r0, r1}
    7d70:	00000088 	andeq	r0, r0, r8, lsl #1
    7d74:	040e0003 	streq	r0, [lr], #-3
    7d78:	00000346 	andeq	r0, r0, r6, asr #6
    7d7c:	000bdc11 	andeq	sp, fp, r1, lsl ip
    7d80:	031c0800 	tsteq	ip, #0, 16
    7d84:	0003461b 	andeq	r4, r3, fp, lsl r6
    7d88:	0bbc1400 	bleq	fef0cd90 <_estack+0xdef07d90>
    7d8c:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    7d90:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    7d94:	01010000 	mrseq	r0, (UNDEF: 1)
    7d98:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    7d9c:	01190000 	tsteq	r9, r0
    7da0:	00001e6a 	andeq	r1, r0, sl, ror #28
    7da4:	01050c01 	tsteq	r5, r1, lsl #24
    7da8:	00000081 	andeq	r0, r0, r1, lsl #1
    7dac:	00002744 	andeq	r2, r0, r4, asr #14
    7db0:	00002798 	muleq	r0, r8, r7
    7db4:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    7db8:	731a0000 	tstvc	sl, #0
    7dbc:	0c010074 	stceq	0, cr0, [r1], {116}	; 0x74
    7dc0:	0000c114 	andeq	ip, r0, r4, lsl r1
    7dc4:	00279700 	eoreq	r9, r7, r0, lsl #14
    7dc8:	006d1b00 	rsbeq	r1, sp, r0, lsl #22
    7dcc:	49240c01 	stmdbmi	r4!, {r0, sl, fp}
    7dd0:	02000004 	andeq	r0, r0, #4
    7dd4:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    7dd8:	0000260b 	andeq	r2, r0, fp, lsl #12
    7ddc:	81060e01 	tsthi	r6, r1, lsl #28
    7de0:	aa000000 	bge	7de8 <__exidx_end+0x21a8>
    7de4:	1e000027 	cdpne	0, 0, cr0, cr0, cr7, {1}
    7de8:	00667562 	rsbeq	r7, r6, r2, ror #10
    7dec:	bb080f01 	bllt	20b9f8 <__ccfg+0x1eba50>
    7df0:	e9000001 	stmdb	r0, {r0}
    7df4:	1f000027 	svcne	0x00000027
    7df8:	01007061 	tsteq	r0, r1, rrx
    7dfc:	00b50a10 	adcseq	r0, r5, r0, lsl sl
    7e00:	91020000 	mrsls	r0, (UNDEF: 2)
    7e04:	040e005c 	streq	r0, [lr], #-92	; 0xffffffa4
    7e08:	000001c8 	andeq	r0, r0, r8, asr #3
    7e0c:	00044c00 	andeq	r4, r4, r0, lsl #24
    7e10:	e0000300 	and	r0, r0, r0, lsl #6
    7e14:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    7e18:	0000ac01 	andeq	sl, r0, r1, lsl #24
    7e1c:	1eb50c00 	cdpne	12, 11, cr0, cr5, cr0, {0}
    7e20:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    7e24:	0d380000 	ldceq	0, cr0, [r8, #-0]
    7e28:	00000000 	andeq	r0, r0, r0
    7e2c:	55790000 	ldrbpl	r0, [r9, #-0]!
    7e30:	01020000 	mrseq	r0, (UNDEF: 2)
    7e34:	000c5d06 	andeq	r5, ip, r6, lsl #26
    7e38:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    7e3c:	00000a6b 	andeq	r0, r0, fp, ror #20
    7e40:	fd050402 	stc2	4, cr0, [r5, #-8]
    7e44:	02000007 	andeq	r0, r0, #7
    7e48:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    7e4c:	1c030000 	stcne	0, cr0, [r3], {-0}
    7e50:	0200002a 	andeq	r0, r0, #42	; 0x2a
    7e54:	004d182e 	subeq	r1, sp, lr, lsr #16
    7e58:	01020000 	mrseq	r0, (UNDEF: 2)
    7e5c:	000c5b08 	andeq	r5, ip, r8, lsl #22
    7e60:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    7e64:	31020000 	mrscc	r0, (UNDEF: 2)
    7e68:	00006019 	andeq	r6, r0, r9, lsl r0
    7e6c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7e70:	00000d66 	andeq	r0, r0, r6, ror #26
    7e74:	0029b403 	eoreq	fp, r9, r3, lsl #8
    7e78:	19340200 	ldmdbne	r4!, {r9}
    7e7c:	00000073 	andeq	r0, r0, r3, ror r0
    7e80:	26070402 	strcs	r0, [r7], -r2, lsl #8
    7e84:	02000004 	andeq	r0, r0, #4
    7e88:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    7e8c:	04040000 	streq	r0, [r4], #-0
    7e90:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7e94:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7e98:	0000042b 	andeq	r0, r0, fp, lsr #8
    7e9c:	00051e03 	andeq	r1, r5, r3, lsl #28
    7ea0:	1b280300 	blne	a08aa8 <__ccfg+0x9e8b00>
    7ea4:	0000009b 	muleq	r0, fp, r0
    7ea8:	000b9005 	andeq	r9, fp, r5
    7eac:	00090400 	andeq	r0, r9, r0, lsl #8
    7eb0:	000000b3 	strheq	r0, [r0], -r3
    7eb4:	00086d06 	andeq	r6, r8, r6, lsl #26
    7eb8:	0000b300 	andeq	fp, r0, r0, lsl #6
    7ebc:	00010000 	andeq	r0, r1, r0
    7ec0:	92030407 	andls	r0, r3, #117440512	; 0x7000000
    7ec4:	0300000b 	movweq	r0, #11
    7ec8:	008f1863 	addeq	r1, pc, r3, ror #16
    7ecc:	fb030000 	blx	c7ed6 <__ccfg+0xa7f2e>
    7ed0:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    7ed4:	00541227 	subseq	r1, r4, r7, lsr #4
    7ed8:	c1080000 	mrsgt	r0, (UNDEF: 8)
    7edc:	03000000 	movweq	r0, #0
    7ee0:	00001dc2 	andeq	r1, r0, r2, asr #27
    7ee4:	41122b04 	tstmi	r2, r4, lsl #22
    7ee8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7eec:	000000d2 	ldrdeq	r0, [r0], -r2
    7ef0:	00294d03 	eoreq	r4, r9, r3, lsl #26
    7ef4:	122c0400 	eorne	r0, ip, #0, 8
    7ef8:	00000067 	andeq	r0, r0, r7, rrx
    7efc:	0000e308 	andeq	lr, r0, r8, lsl #6
    7f00:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    7f04:	2d040000 	stccs	0, cr0, [r4, #-0]
    7f08:	00006712 	andeq	r6, r0, r2, lsl r7
    7f0c:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    7f10:	018e0932 	orreq	r0, lr, r2, lsr r9
    7f14:	340b0000 	strcc	r0, [fp], #-0
    7f18:	04000000 	streq	r0, [r0], #-0
    7f1c:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    7f20:	01010000 	mrseq	r0, (UNDEF: 1)
    7f24:	4c0b0007 	stcmi	0, cr0, [fp], {7}
    7f28:	04000006 	streq	r0, [r0], #-6
    7f2c:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    7f30:	01010000 	mrseq	r0, (UNDEF: 1)
    7f34:	e70b0006 	str	r0, [fp, -r6]
    7f38:	04000002 	streq	r0, [r0], #-2
    7f3c:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    7f40:	01010000 	mrseq	r0, (UNDEF: 1)
    7f44:	b70b0005 	strlt	r0, [fp, -r5]
    7f48:	04000006 	streq	r0, [r0], #-6
    7f4c:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    7f50:	01010000 	mrseq	r0, (UNDEF: 1)
    7f54:	9f0b0004 	svcls	0x000b0004
    7f58:	0400000a 	streq	r0, [r0], #-10
    7f5c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    7f60:	04010000 	streq	r0, [r1], #-0
    7f64:	5b0c0000 	blpl	307f6c <__ccfg+0x2e7fc4>
    7f68:	04000006 	streq	r0, [r0], #-6
    7f6c:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    7f70:	0c010000 	stceq	0, cr0, [r1], {-0}
    7f74:	000008fb 	strdeq	r0, [r0], -fp
    7f78:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    7f7c:	02000000 	andeq	r0, r0, #0
    7f80:	000f3a0c 	andeq	r3, pc, ip, lsl #20
    7f84:	033d0400 	teqeq	sp, #0, 8
    7f88:	000000d2 	ldrdeq	r0, [r0], -r2
    7f8c:	09130c03 	ldmdbeq	r3, {r0, r1, sl, fp}
    7f90:	3f040000 	svccc	0x00040000
    7f94:	0000e308 	andeq	lr, r0, r8, lsl #6
    7f98:	03000400 	movweq	r0, #1024	; 0x400
    7f9c:	0000031d 	andeq	r0, r0, sp, lsl r3
    7fa0:	00034104 	andeq	r4, r3, r4, lsl #2
    7fa4:	09000001 	stmdbeq	r0, {r0}
    7fa8:	0000018e 	andeq	r0, r0, lr, lsl #3
    7fac:	0006be0d 	andeq	fp, r6, sp, lsl #28
    7fb0:	1a430400 	bne	10c8fb8 <__ccfg+0x10a9010>
    7fb4:	0000019a 	muleq	r0, sl, r1
    7fb8:	a00d0101 	andge	r0, sp, r1, lsl #2
    7fbc:	04000001 	streq	r0, [r0], #-1
    7fc0:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    7fc4:	01010000 	mrseq	r0, (UNDEF: 1)
    7fc8:	01c1040e 	biceq	r0, r1, lr, lsl #8
    7fcc:	01020000 	mrseq	r0, (UNDEF: 2)
    7fd0:	000c6408 	andeq	r6, ip, r8, lsl #8
    7fd4:	01c10800 	biceq	r0, r1, r0, lsl #16
    7fd8:	260d0000 	strcs	r0, [sp], -r0
    7fdc:	04000003 	streq	r0, [r0], #-3
    7fe0:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    7fe4:	01010000 	mrseq	r0, (UNDEF: 1)
    7fe8:	8f05080a 	svchi	0x0005080a
    7fec:	00020c09 	andeq	r0, r2, r9, lsl #24
    7ff0:	0cd80c00 	ldcleq	12, cr0, [r8], {0}
    7ff4:	90050000 	andls	r0, r5, r0
    7ff8:	0000670b 	andeq	r6, r0, fp, lsl #14
    7ffc:	750c0000 	strvc	r0, [ip, #-0]
    8000:	05000010 	streq	r0, [r0, #-16]
    8004:	00c10891 	smulleq	r0, r1, r1, r8
    8008:	0c040000 	stceq	0, cr0, [r4], {-0}
    800c:	000001c5 	andeq	r0, r0, r5, asr #3
    8010:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    8014:	06000000 	streq	r0, [r0], -r0
    8018:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    801c:	93050000 	movwls	r0, #20480	; 0x5000
    8020:	0001db03 	andeq	sp, r1, r3, lsl #22
    8024:	020c0f00 	andeq	r0, ip, #0, 30
    8028:	02230000 	eoreq	r0, r3, #0
    802c:	00100000 	andseq	r0, r0, r0
    8030:	00093d0d 	andeq	r3, r9, sp, lsl #26
    8034:	0f990500 	svceq	0x00990500
    8038:	00000218 	andeq	r0, r0, r8, lsl r2
    803c:	010a0101 	tsteq	sl, r1, lsl #2
    8040:	5b099106 	blpl	26c460 <__ccfg+0x24c4b8>
    8044:	0b000002 	bleq	8054 <__exidx_end+0x2414>
    8048:	0000091a 	andeq	r0, r0, sl, lsl r9
    804c:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    8050:	01000000 	mrseq	r0, (UNDEF: 0)
    8054:	0b000107 	bleq	8478 <__exidx_end+0x2838>
    8058:	000005cc 	andeq	r0, r0, ip, asr #11
    805c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    8060:	01000000 	mrseq	r0, (UNDEF: 0)
    8064:	00000001 	andeq	r0, r0, r1
    8068:	000aab03 	andeq	sl, sl, r3, lsl #22
    806c:	03960600 	orrseq	r0, r6, #0, 12
    8070:	00000231 	andeq	r0, r0, r1, lsr r2
    8074:	00025b08 	andeq	r5, r2, r8, lsl #22
    8078:	02670f00 	rsbeq	r0, r7, #0, 30
    807c:	02770000 	rsbseq	r0, r7, #0
    8080:	00100000 	andseq	r0, r0, r0
    8084:	00026c08 	andeq	r6, r2, r8, lsl #24
    8088:	03aa0d00 			; <UNDEFINED> instruction: 0x03aa0d00
    808c:	9c060000 	stcls	0, cr0, [r6], {-0}
    8090:	00027717 	andeq	r7, r2, r7, lsl r7
    8094:	0f010100 	svceq	0x00010100
    8098:	000000cd 	andeq	r0, r0, sp, asr #1
    809c:	00000295 	muleq	r0, r5, r2
    80a0:	8a080010 	bhi	2080e8 <__ccfg+0x1e8140>
    80a4:	0d000002 	stceq	0, cr0, [r0, #-8]
    80a8:	0000060e 	andeq	r0, r0, lr, lsl #12
    80ac:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    80b0:	01000002 	tsteq	r0, r2
    80b4:	08dd0d01 	ldmeq	sp, {r0, r8, sl, fp}^
    80b8:	c3050000 	movwgt	r0, #20480	; 0x5000
    80bc:	0000e30e 	andeq	lr, r0, lr, lsl #6
    80c0:	11010100 	mrsne	r0, (UNDEF: 17)
    80c4:	00000c72 	andeq	r0, r0, r2, ror ip
    80c8:	10016e08 	andne	r6, r1, r8, lsl #28
    80cc:	000002c3 	andeq	r0, r0, r3, asr #5
    80d0:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    80d4:	01120000 	tsteq	r2, r0
    80d8:	000002d5 	ldrdeq	r0, [r0], -r5
    80dc:	0000c113 	andeq	ip, r0, r3, lsl r1
    80e0:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    80e4:	e0000001 	and	r0, r0, r1
    80e8:	10000002 	andne	r0, r0, r2
    80ec:	02d50800 	sbcseq	r0, r5, #0, 16
    80f0:	e6140000 	ldr	r0, [r4], -r0
    80f4:	08000009 	stmdaeq	r0, {r0, r3}
    80f8:	e016017f 	ands	r0, r6, pc, ror r1
    80fc:	01000002 	tsteq	r0, r2
    8100:	03961401 	orrseq	r1, r6, #16777216	; 0x1000000
    8104:	82080000 	andhi	r0, r8, #0
    8108:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    810c:	01010000 	mrseq	r0, (UNDEF: 1)
    8110:	00036e14 	andeq	r6, r3, r4, lsl lr
    8114:	02d80800 	sbcseq	r0, r8, #0, 16
    8118:	0000e30e 	andeq	lr, r0, lr, lsl #6
    811c:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    8120:	03030808 	movweq	r0, #14344	; 0x3808
    8124:	00033909 	andeq	r3, r3, r9, lsl #18
    8128:	3ca11600 	stccc	6, cr1, [r1]
    812c:	07080000 	streq	r0, [r8, -r0]
    8130:	00c10703 	sbceq	r0, r1, r3, lsl #14
    8134:	16000000 	strne	r0, [r0], -r0
    8138:	00000fcd 	andeq	r0, r0, sp, asr #31
    813c:	08030808 	stmdaeq	r3, {r3, fp}
    8140:	000000f4 	strdeq	r0, [r0], -r4
    8144:	09110004 	ldmdbeq	r1, {r2}
    8148:	0800000a 	stmdaeq	r0, {r1, r3}
    814c:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    8150:	17000003 	strne	r0, [r0, -r3]
    8154:	00000029 	andeq	r0, r0, r9, lsr #32
    8158:	030b0830 	movweq	r0, #47152	; 0xb830
    815c:	0003a908 	andeq	sl, r3, r8, lsl #18
    8160:	1f241600 	svcne	0x00241600
    8164:	14080000 	strne	r0, [r8], #-0
    8168:	00c10803 	sbceq	r0, r1, r3, lsl #16
    816c:	16000000 	strne	r0, [r0], -r0
    8170:	00000be7 	andeq	r0, r0, r7, ror #23
    8174:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    8178:	000000c1 	andeq	r0, r0, r1, asr #1
    817c:	4c8e1602 	stcmi	6, cr1, [lr], {2}
    8180:	16080000 	strne	r0, [r8], -r0
    8184:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    8188:	16040000 	strne	r0, [r4], -r0
    818c:	00004754 	andeq	r4, r0, r4, asr r7
    8190:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    8194:	000000f4 	strdeq	r0, [r0], -r4
    8198:	000f1608 	andeq	r1, pc, r8, lsl #12
    819c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    81a0:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    81a4:	160c0000 	strne	r0, [ip], -r0
    81a8:	0000095d 	andeq	r0, r0, sp, asr r9
    81ac:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    81b0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    81b4:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    81b8:	b9000003 	stmdblt	r0, {r0, r1}
    81bc:	18000003 	stmdane	r0, {r0, r1}
    81c0:	00000088 	andeq	r0, r0, r8, lsl #1
    81c4:	040e0003 	streq	r0, [lr], #-3
    81c8:	00000346 	andeq	r0, r0, r6, asr #6
    81cc:	000bdc11 	andeq	sp, fp, r1, lsl ip
    81d0:	031c0800 	tsteq	ip, #0, 16
    81d4:	0003461b 	andeq	r4, r3, fp, lsl r6
    81d8:	0bbc1400 	bleq	fef0d1e0 <_estack+0xdef081e0>
    81dc:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    81e0:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    81e4:	01010000 	mrseq	r0, (UNDEF: 1)
    81e8:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    81ec:	590d0000 	stmdbpl	sp, {}	; <UNPREDICTABLE>
    81f0:	0100001e 	tsteq	r0, lr, lsl r0
    81f4:	01bb0e0a 			; <UNDEFINED> instruction: 0x01bb0e0a
    81f8:	01010000 	mrseq	r0, (UNDEF: 1)
    81fc:	1ef60119 	mrcne	1, 7, r0, cr6, cr9, {0}
    8200:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    8204:	00810105 	addeq	r0, r1, r5, lsl #2
    8208:	27980000 	ldrcs	r0, [r8, r0]
    820c:	27f80000 	ldrbcs	r0, [r8, r0]!
    8210:	9c010000 	stcls	0, cr0, [r1], {-0}
    8214:	00000449 	andeq	r0, r0, r9, asr #8
    8218:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    821c:	c1130e01 	tstgt	r3, r1, lsl #28
    8220:	1d000000 	stcne	0, cr0, [r0, #-0]
    8224:	1b000028 	blne	82cc <__exidx_end+0x268c>
    8228:	00746d66 	rsbseq	r6, r4, r6, ror #26
    822c:	49230e01 	stmdbmi	r3!, {r0, r9, sl, fp}
    8230:	02000004 	andeq	r0, r0, #4
    8234:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    8238:	0000260b 	andeq	r2, r0, fp, lsl #12
    823c:	81061301 	tsthi	r6, r1, lsl #6
    8240:	3b000000 	blcc	8248 <__exidx_end+0x2608>
    8244:	1e000028 	cdpne	0, 0, cr0, cr0, cr8, {1}
    8248:	01007061 	tsteq	r0, r1, rrx
    824c:	00b50a14 	adcseq	r0, r5, r4, lsl sl
    8250:	91020000 	mrsls	r0, (UNDEF: 2)
    8254:	040e0064 	streq	r0, [lr], #-100	; 0xffffff9c
    8258:	000001c8 	andeq	r0, r0, r8, asr #3
    825c:	00247400 	eoreq	r7, r4, r0, lsl #8
    8260:	7b000300 	blvc	8e68 <__exidx_end+0x3228>
    8264:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    8268:	0000ac01 	andeq	sl, r0, r1, lsl #24
    826c:	22db0c00 	sbcscs	r0, fp, #0, 24
    8270:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    8274:	0ec00000 	cdpeq	0, 12, cr0, cr0, cr0, {0}
    8278:	00000000 	andeq	r0, r0, r0
    827c:	572f0000 	strpl	r0, [pc, -r0]!
    8280:	ab020000 	blge	88288 <__ccfg+0x682e0>
    8284:	0600002b 	streq	r0, [r0], -fp, lsr #32
    8288:	00311722 	eorseq	r1, r1, r2, lsr #14
    828c:	01030000 	mrseq	r0, (UNDEF: 3)
    8290:	000c5d06 	andeq	r5, ip, r6, lsl #26
    8294:	31ed0200 	mvncc	r0, r0, lsl #4
    8298:	25060000 	strcs	r0, [r6, #-0]
    829c:	00004418 	andeq	r4, r0, r8, lsl r4
    82a0:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    82a4:	00000a6b 	andeq	r0, r0, fp, ror #20
    82a8:	fd050403 	stc2	4, cr0, [r5, #-12]
    82ac:	03000007 	movweq	r0, #7
    82b0:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    82b4:	1c020000 	stcne	0, cr0, [r2], {-0}
    82b8:	0600002a 	streq	r0, [r0], -sl, lsr #32
    82bc:	0065182e 	rsbeq	r1, r5, lr, lsr #16
    82c0:	01030000 	mrseq	r0, (UNDEF: 3)
    82c4:	000c5b08 	andeq	r5, ip, r8, lsl #22
    82c8:	2e120200 	cdpcs	2, 1, cr0, cr2, cr0, {0}
    82cc:	31060000 	mrscc	r0, (UNDEF: 6)
    82d0:	00007819 	andeq	r7, r0, r9, lsl r8
    82d4:	07020300 	streq	r0, [r2, -r0, lsl #6]
    82d8:	00000d66 	andeq	r0, r0, r6, ror #26
    82dc:	0029b402 	eoreq	fp, r9, r2, lsl #8
    82e0:	19340600 	ldmdbne	r4!, {r9, sl}
    82e4:	00000090 	muleq	r0, r0, r0
    82e8:	00007f04 	andeq	r7, r0, r4, lsl #30
    82ec:	07040300 	streq	r0, [r4, -r0, lsl #6]
    82f0:	00000426 	andeq	r0, r0, r6, lsr #8
    82f4:	00009005 	andeq	r9, r0, r5
    82f8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    82fc:	00000421 	andeq	r0, r0, r1, lsr #8
    8300:	69050406 	stmdbvs	r5, {r1, r2, sl}
    8304:	0300746e 	movweq	r7, #1134	; 0x46e
    8308:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    830c:	d5070000 	strle	r0, [r7, #-0]
    8310:	0700000b 	streq	r0, [r0, -fp]
    8314:	aa17015e 	bge	5c8894 <__ccfg+0x5a88ec>
    8318:	02000000 	andeq	r0, r0, #0
    831c:	00000e49 	andeq	r0, r0, r9, asr #28
    8320:	4b0e2e08 	blmi	393b48 <__ccfg+0x373ba0>
    8324:	02000000 	andeq	r0, r0, #0
    8328:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    832c:	4b0e7408 	blmi	3a5354 <__ccfg+0x3853ac>
    8330:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8334:	03a50804 			; <UNDEFINED> instruction: 0x03a50804
    8338:	000000f8 	strdeq	r0, [r0], -r8
    833c:	00076c09 	andeq	r6, r7, r9, lsl #24
    8340:	0ca70800 	stceq	8, cr0, [r7]
    8344:	000000b1 	strheq	r0, [r0], -r1
    8348:	000ab409 	andeq	fp, sl, r9, lsl #8
    834c:	13a80800 			; <UNDEFINED> instruction: 0x13a80800
    8350:	000000f8 	strdeq	r0, [r0], -r8
    8354:	00650a00 	rsbeq	r0, r5, r0, lsl #20
    8358:	01080000 	mrseq	r0, (UNDEF: 8)
    835c:	aa0b0000 	bge	2c8364 <__ccfg+0x2a83bc>
    8360:	03000000 	movweq	r0, #0
    8364:	08080c00 	stmdaeq	r8, {sl, fp}
    8368:	012c09a2 	smulwbeq	ip, r2, r9
    836c:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    8370:	08000003 	stmdaeq	r0, {r0, r1}
    8374:	00a307a4 	adceq	r0, r3, r4, lsr #15
    8378:	0d000000 	stceq	0, cr0, [r0, #-0]
    837c:	00000601 	andeq	r0, r0, r1, lsl #12
    8380:	d605a908 	strle	sl, [r5], -r8, lsl #18
    8384:	04000000 	streq	r0, [r0], #-0
    8388:	08b50200 	ldmeq	r5!, {r9}
    838c:	aa080000 	bge	208394 <__ccfg+0x1e83ec>
    8390:	00010803 	andeq	r0, r1, r3, lsl #16
    8394:	02040e00 	andeq	r0, r4, #0, 28
    8398:	00000842 	andeq	r0, r0, r2, asr #16
    839c:	90191609 	andsls	r1, r9, r9, lsl #12
    83a0:	02000000 	andeq	r0, r0, #0
    83a4:	00000253 	andeq	r0, r0, r3, asr r2
    83a8:	a30d0c0a 	movwge	r0, #56330	; 0xdc0a
    83ac:	02000000 	andeq	r0, r0, #0
    83b0:	0000072a 	andeq	r0, r0, sl, lsr #14
    83b4:	461b2309 	ldrmi	r2, [fp], -r9, lsl #6
    83b8:	0f000001 	svceq	0x00000001
    83bc:	00000332 	andeq	r0, r0, r2, lsr r3
    83c0:	08340918 	ldmdaeq	r4!, {r3, r4, r8, fp}
    83c4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    83c8:	000ec40d 	andeq	ip, lr, sp, lsl #8
    83cc:	13360900 	teqne	r6, #0, 18
    83d0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    83d4:	6b5f1000 	blvs	17cc3dc <__ccfg+0x17ac434>
    83d8:	07370900 	ldreq	r0, [r7, -r0, lsl #18]!
    83dc:	000000a3 	andeq	r0, r0, r3, lsr #1
    83e0:	0b620d04 	bleq	188b7f8 <__ccfg+0x186b850>
    83e4:	37090000 	strcc	r0, [r9, -r0]
    83e8:	0000a30b 	andeq	sl, r0, fp, lsl #6
    83ec:	f50d0800 			; <UNDEFINED> instruction: 0xf50d0800
    83f0:	09000043 	stmdbeq	r0, {r0, r1, r6}
    83f4:	00a31437 	adceq	r1, r3, r7, lsr r4
    83f8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    83fc:	00000455 	andeq	r0, r0, r5, asr r4
    8400:	a31b3709 	tstge	fp, #2359296	; 0x240000
    8404:	10000000 	andne	r0, r0, r0
    8408:	00785f10 	rsbseq	r5, r8, r0, lsl pc
    840c:	be0b3809 	cdplt	8, 0, cr3, cr11, cr9, {0}
    8410:	14000001 	strne	r0, [r0], #-1
    8414:	5e041100 	adfpls	f1, f4, f0
    8418:	0a000001 	beq	8424 <__exidx_end+0x27e4>
    841c:	0000013a 	andeq	r0, r0, sl, lsr r1
    8420:	000001ce 	andeq	r0, r0, lr, asr #3
    8424:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8428:	0f000000 	svceq	0x00000000
    842c:	00000b7d 	andeq	r0, r0, sp, ror fp
    8430:	083c0924 	ldmdaeq	ip!, {r2, r5, r8, fp}
    8434:	00000251 	andeq	r0, r0, r1, asr r2
    8438:	00056c0d 	andeq	r6, r5, sp, lsl #24
    843c:	093e0900 	ldmdbeq	lr!, {r8, fp}
    8440:	000000a3 	andeq	r0, r0, r3, lsr #1
    8444:	03b70d00 			; <UNDEFINED> instruction: 0x03b70d00
    8448:	3f090000 	svccc	0x00090000
    844c:	0000a309 	andeq	sl, r0, r9, lsl #6
    8450:	580d0400 	stmdapl	sp, {sl}
    8454:	09000003 	stmdbeq	r0, {r0, r1}
    8458:	00a30940 	adceq	r0, r3, r0, asr #18
    845c:	0d080000 	stceq	0, cr0, [r8, #-0]
    8460:	00000674 	andeq	r0, r0, r4, ror r6
    8464:	a3094109 	movwge	r4, #37129	; 0x9109
    8468:	0c000000 	stceq	0, cr0, [r0], {-0}
    846c:	0009540d 	andeq	r5, r9, sp, lsl #8
    8470:	09420900 	stmdbeq	r2, {r8, fp}^
    8474:	000000a3 	andeq	r0, r0, r3, lsr #1
    8478:	0ace0d10 	beq	ff38b8c0 <_estack+0xdf3868c0>
    847c:	43090000 	movwmi	r0, #36864	; 0x9000
    8480:	0000a309 	andeq	sl, r0, r9, lsl #6
    8484:	460d1400 	strmi	r1, [sp], -r0, lsl #8
    8488:	09000003 	stmdbeq	r0, {r0, r1}
    848c:	00a30944 	adceq	r0, r3, r4, asr #18
    8490:	0d180000 	ldceq	0, cr0, [r8, #-0]
    8494:	00000575 	andeq	r0, r0, r5, ror r5
    8498:	a3094509 	movwge	r4, #38153	; 0x9509
    849c:	1c000000 	stcne	0, cr0, [r0], {-0}
    84a0:	0008f00d 	andeq	pc, r8, sp
    84a4:	09460900 	stmdbeq	r6, {r8, fp}^
    84a8:	000000a3 	andeq	r0, r0, r3, lsr #1
    84ac:	3b120020 	blcc	488534 <__ccfg+0x46858c>
    84b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84b4:	084f0901 	stmdaeq	pc, {r0, r8, fp}^	; <UNPREDICTABLE>
    84b8:	00000296 	muleq	r0, r6, r2
    84bc:	000d2d0d 	andeq	r2, sp, sp, lsl #26
    84c0:	0a500900 	beq	140a8c8 <__ccfg+0x13ea920>
    84c4:	00000296 	muleq	r0, r6, r2
    84c8:	0c170d00 	ldceq	13, cr0, [r7], {-0}
    84cc:	51090000 	mrspl	r0, (UNDEF: 9)
    84d0:	00029609 	andeq	r9, r2, r9, lsl #12
    84d4:	c6138000 	ldrgt	r8, [r3], -r0
    84d8:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    84dc:	013a0a53 	teqeq	sl, r3, asr sl
    84e0:	01000000 	mrseq	r0, (UNDEF: 0)
    84e4:	000eb713 	andeq	fp, lr, r3, lsl r7
    84e8:	0a560900 	beq	158a8f0 <__ccfg+0x156a948>
    84ec:	0000013a 	andeq	r0, r0, sl, lsr r1
    84f0:	0a000104 	beq	8908 <__exidx_end+0x2cc8>
    84f4:	00000138 	andeq	r0, r0, r8, lsr r1
    84f8:	000002a6 	andeq	r0, r0, r6, lsr #5
    84fc:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8500:	12001f00 	andne	r1, r0, #0, 30
    8504:	00000a16 	andeq	r0, r0, r6, lsl sl
    8508:	62090190 	andvs	r0, r9, #144, 2	; 0x24
    850c:	0002e908 	andeq	lr, r2, r8, lsl #18
    8510:	0ec40d00 	cdpeq	13, 12, cr0, cr4, cr0, {0}
    8514:	63090000 	movwvs	r0, #36864	; 0x9000
    8518:	0002e912 	andeq	lr, r2, r2, lsl r9
    851c:	840d0000 	strhi	r0, [sp], #-0
    8520:	09000005 	stmdbeq	r0, {r0, r2}
    8524:	00a30664 	adceq	r0, r3, r4, ror #12
    8528:	0d040000 	stceq	0, cr0, [r4, #-0]
    852c:	00000307 	andeq	r0, r0, r7, lsl #6
    8530:	ef096609 	svc	0x00096609
    8534:	08000002 	stmdaeq	r0, {r1}
    8538:	00003b0d 	andeq	r3, r0, sp, lsl #22
    853c:	1e670900 	vmulne.f16	s1, s14, s0	; <UNPREDICTABLE>
    8540:	00000251 	andeq	r0, r0, r1, asr r2
    8544:	04110088 	ldreq	r0, [r1], #-136	; 0xffffff78
    8548:	000002a6 	andeq	r0, r0, r6, lsr #5
    854c:	0002ff0a 	andeq	pc, r2, sl, lsl #30
    8550:	0002ff00 	andeq	pc, r2, r0, lsl #30
    8554:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    8558:	001f0000 	andseq	r0, pc, r0
    855c:	03050411 	movweq	r0, #21521	; 0x5411
    8560:	01140000 	tsteq	r4, r0
    8564:	000cc50f 	andeq	ip, ip, pc, lsl #10
    8568:	7a090800 	bvc	24a570 <__ccfg+0x22a5c8>
    856c:	00032f08 	andeq	r2, r3, r8, lsl #30
    8570:	0cd70d00 	ldcleq	13, cr0, [r7], {0}
    8574:	7b090000 	blvc	24857c <__ccfg+0x2285d4>
    8578:	00032f11 	andeq	r2, r3, r1, lsl pc
    857c:	a00d0000 	andge	r0, sp, r0
    8580:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    8584:	00a3067c 	adceq	r0, r3, ip, ror r6
    8588:	00040000 	andeq	r0, r4, r0
    858c:	00650411 	rsbeq	r0, r5, r1, lsl r4
    8590:	4d0f0000 	stcmi	0, cr0, [pc, #-0]	; 8598 <__exidx_end+0x2958>
    8594:	68000004 	stmdavs	r0, {r2}
    8598:	7808ba09 	stmdavc	r8, {r0, r3, r9, fp, ip, sp, pc}
    859c:	10000004 	andne	r0, r0, r4
    85a0:	0900705f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    85a4:	032f12bb 			; <UNDEFINED> instruction: 0x032f12bb
    85a8:	10000000 	andne	r0, r0, r0
    85ac:	0900725f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
    85b0:	00a307bc 	strhteq	r0, [r3], ip
    85b4:	10040000 	andne	r0, r4, r0
    85b8:	0900775f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}
    85bc:	00a307bd 	strhteq	r0, [r3], sp
    85c0:	0d080000 	stceq	0, cr0, [r8, #-0]
    85c4:	000001c4 	andeq	r0, r0, r4, asr #3
    85c8:	4409be09 	strmi	fp, [r9], #-3593	; 0xfffff1f7
    85cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    85d0:	0008590d 	andeq	r5, r8, sp, lsl #18
    85d4:	09bf0900 	ldmibeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    85d8:	00000044 	andeq	r0, r0, r4, asr #32
    85dc:	625f100e 	subsvs	r1, pc, #14
    85e0:	c0090066 	andgt	r0, r9, r6, rrx
    85e4:	00030711 	andeq	r0, r3, r1, lsl r7
    85e8:	bb0d1000 	bllt	34c5f0 <__ccfg+0x32c648>
    85ec:	09000001 	stmdbeq	r0, {r0}
    85f0:	00a307c1 	adceq	r0, r3, r1, asr #15
    85f4:	0d180000 	ldceq	0, cr0, [r8, #-0]
    85f8:	0000030c 	andeq	r0, r0, ip, lsl #6
    85fc:	380ac809 	stmdacc	sl, {r0, r3, fp, lr, pc}
    8600:	1c000001 	stcne	0, cr0, [r0], {1}
    8604:	001d2f0d 	andseq	r2, sp, sp, lsl #30
    8608:	1dca0900 	vstrne.16	s1, [sl]	; <UNPREDICTABLE>
    860c:	000005fd 	strdeq	r0, [r0], -sp
    8610:	1cf60d20 	ldclne	13, cr0, [r6], #128	; 0x80
    8614:	cc090000 	stcgt	0, cr0, [r9], {-0}
    8618:	0006281d 	andeq	r2, r6, sp, lsl r8
    861c:	e40d2400 	str	r2, [sp], #-1024	; 0xfffffc00
    8620:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8624:	064d0dcf 	strbeq	r0, [sp], -pc, asr #27
    8628:	0d280000 	stceq	0, cr0, [r8, #-0]
    862c:	00001ce4 	andeq	r1, r0, r4, ror #25
    8630:	6809d009 	stmdavs	r9, {r0, r3, ip, lr, pc}
    8634:	2c000006 	stccs	0, cr0, [r0], {6}
    8638:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
    863c:	11d30900 	bicsne	r0, r3, r0, lsl #18
    8640:	00000307 	andeq	r0, r0, r7, lsl #6
    8644:	755f1030 	ldrbvc	r1, [pc, #-48]	; 861c <__exidx_end+0x29dc>
    8648:	d4090070 	strle	r0, [r9], #-112	; 0xffffff90
    864c:	00032f12 	andeq	r2, r3, r2, lsl pc
    8650:	5f103800 	svcpl	0x00103800
    8654:	09007275 	stmdbeq	r0, {r0, r2, r4, r5, r6, r9, ip, sp, lr}
    8658:	00a307d5 	ldrdeq	r0, [r3], r5	; <UNPREDICTABLE>
    865c:	0d3c0000 	ldceq	0, cr0, [ip, #-0]
    8660:	00000f1b 	andeq	r0, r0, fp, lsl pc
    8664:	6e11d809 	cdpvs	8, 1, cr13, cr1, cr9, {0}
    8668:	40000006 	andmi	r0, r0, r6
    866c:	000e640d 	andeq	r6, lr, sp, lsl #8
    8670:	11d90900 	bicsne	r0, r9, r0, lsl #18
    8674:	0000067e 	andeq	r0, r0, lr, ror r6
    8678:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
    867c:	dc090062 	stcle	0, cr0, [r9], {98}	; 0x62
    8680:	00030711 	andeq	r0, r3, r1, lsl r7
    8684:	740d4400 	strvc	r4, [sp], #-1024	; 0xfffffc00
    8688:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    868c:	00a307df 	ldrdeq	r0, [r3], pc	; <UNPREDICTABLE>
    8690:	0d4c0000 	stcleq	0, cr0, [ip, #-0]
    8694:	0000047c 	andeq	r0, r0, ip, ror r4
    8698:	be0ae009 	cdplt	0, 0, cr14, cr10, cr9, {0}
    869c:	50000000 	andpl	r0, r0, r0
    86a0:	0047530d 	subeq	r5, r7, sp, lsl #6
    86a4:	12e30900 	rscne	r0, r3, #0, 18
    86a8:	00000497 	muleq	r0, r7, r4
    86ac:	0b9a0d54 	bleq	fe68bc04 <_estack+0xde686c04>
    86b0:	e7090000 	str	r0, [r9, -r0]
    86b4:	0001520c 	andeq	r5, r1, ip, lsl #4
    86b8:	1e0d5800 	cdpne	8, 0, cr5, cr13, cr0, {0}
    86bc:	0900000a 	stmdbeq	r0, {r1, r3}
    86c0:	012c0ee9 	smulwteq	ip, r9, lr
    86c4:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
    86c8:	00000e97 	muleq	r0, r7, lr
    86cc:	a309ea09 	movwge	lr, #39433	; 0x9a09
    86d0:	64000000 	strvs	r0, [r0], #-0
    86d4:	a3011500 	movwge	r1, #5376	; 0x1500
    86d8:	97000000 	strls	r0, [r0, -r0]
    86dc:	16000004 	strne	r0, [r0], -r4
    86e0:	00000497 	muleq	r0, r7, r4
    86e4:	00013816 	andeq	r3, r1, r6, lsl r8
    86e8:	05eb1600 	strbeq	r1, [fp, #1536]!	; 0x600
    86ec:	a3160000 	tstge	r6, #0
    86f0:	00000000 	andeq	r0, r0, r0
    86f4:	04a20411 	strteq	r0, [r2], #1041	; 0x411
    86f8:	97040000 	strls	r0, [r4, -r0]
    86fc:	17000004 	strne	r0, [r0, -r4]
    8700:	00000d5f 	andeq	r0, r0, pc, asr sp
    8704:	65090428 	strvs	r0, [r9, #-1064]	; 0xfffffbd8
    8708:	05eb0802 	strbeq	r0, [fp, #2050]!	; 0x802
    870c:	04180000 	ldreq	r0, [r8], #-0
    8710:	09000009 	stmdbeq	r0, {r0, r3}
    8714:	a3070267 	movwge	r0, #29287	; 0x7267
    8718:	00000000 	andeq	r0, r0, r0
    871c:	0007e218 	andeq	lr, r7, r8, lsl r2
    8720:	026c0900 	rsbeq	r0, ip, #0, 18
    8724:	0006da0b 	andeq	sp, r6, fp, lsl #20
    8728:	f7180400 			; <UNDEFINED> instruction: 0xf7180400
    872c:	09000002 	stmdbeq	r0, {r1}
    8730:	da14026c 	ble	5090e8 <__ccfg+0x4e9140>
    8734:	08000006 	stmdaeq	r0, {r1, r2}
    8738:	000f0a18 	andeq	r0, pc, r8, lsl sl	; <UNPREDICTABLE>
    873c:	026c0900 	rsbeq	r0, ip, #0, 18
    8740:	0006da1e 	andeq	sp, r6, lr, lsl sl
    8744:	7f180c00 	svcvc	0x00180c00
    8748:	09000005 	stmdbeq	r0, {r0, r2}
    874c:	a308026e 	movwge	r0, #33390	; 0x826e
    8750:	10000000 	andne	r0, r0, r0
    8754:	0004d418 	andeq	sp, r4, r8, lsl r4
    8758:	026f0900 	rsbeq	r0, pc, #0, 18
    875c:	0008da08 	andeq	sp, r8, r8, lsl #20
    8760:	77181400 	ldrvc	r1, [r8, -r0, lsl #8]
    8764:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    8768:	a3070272 	movwge	r0, #29298	; 0x7272
    876c:	30000000 	andcc	r0, r0, r0
    8770:	0042a118 	subeq	sl, r2, r8, lsl r1
    8774:	02730900 	rsbseq	r0, r3, #0, 18
    8778:	0008f016 	andeq	pc, r8, r6, lsl r0	; <UNPREDICTABLE>
    877c:	8a183400 	bhi	615784 <__ccfg+0x5f57dc>
    8780:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8784:	a3070275 	movwge	r0, #29301	; 0x7275
    8788:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    878c:	00088418 	andeq	r8, r8, r8, lsl r4
    8790:	02770900 	rsbseq	r0, r7, #0, 18
    8794:	0009020a 	andeq	r0, r9, sl, lsl #4
    8798:	50183c00 	andspl	r3, r8, r0, lsl #24
    879c:	09000003 	stmdbeq	r0, {r0, r1}
    87a0:	b813027a 	ldmdalt	r3, {r1, r3, r4, r5, r6, r9}
    87a4:	40000001 	andmi	r0, r0, r1
    87a8:	00040b18 	andeq	r0, r4, r8, lsl fp
    87ac:	027b0900 	rsbseq	r0, fp, #0, 18
    87b0:	0000a307 	andeq	sl, r0, r7, lsl #6
    87b4:	09184400 	ldmdbeq	r8, {sl, lr}
    87b8:	09000006 	stmdbeq	r0, {r1, r2}
    87bc:	b813027c 	ldmdalt	r3, {r2, r3, r4, r5, r6, r9}
    87c0:	48000001 	stmdami	r0, {r0}
    87c4:	00081f18 	andeq	r1, r8, r8, lsl pc
    87c8:	027d0900 	rsbseq	r0, sp, #0, 18
    87cc:	00090814 	andeq	r0, r9, r4, lsl r8
    87d0:	5a184c00 	bpl	61b7d8 <__ccfg+0x5fb830>
    87d4:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    87d8:	a3070280 	movwge	r0, #29312	; 0x7280
    87dc:	50000000 	andpl	r0, r0, r0
    87e0:	000c5318 	andeq	r5, ip, r8, lsl r3
    87e4:	02810900 	addeq	r0, r1, #0, 18
    87e8:	0005eb09 	andeq	lr, r5, r9, lsl #22
    87ec:	6d185400 	cfldrsvs	mvf5, [r8, #-0]
    87f0:	0900000c 	stmdbeq	r0, {r2, r3}
    87f4:	b50702a4 	strlt	r0, [r7, #-676]	; 0xfffffd5c
    87f8:	58000008 	stmdapl	r0, {r3}
    87fc:	000a1619 	andeq	r1, sl, r9, lsl r6
    8800:	02a80900 	adceq	r0, r8, #0, 18
    8804:	0002e913 	andeq	lr, r2, r3, lsl r9
    8808:	19014800 	stmdbne	r1, {fp, lr}
    880c:	000006ae 	andeq	r0, r0, lr, lsr #13
    8810:	1202a909 	andne	sl, r2, #147456	; 0x24000
    8814:	000002a6 	andeq	r0, r0, r6, lsr #5
    8818:	9519014c 	ldrls	r0, [r9, #-332]	; 0xfffffeb4
    881c:	09000006 	stmdbeq	r0, {r1, r2}
    8820:	1a0c02ad 	bne	3092dc <__ccfg+0x2e9334>
    8824:	dc000009 	stcle	0, cr0, [r0], {9}
    8828:	0ce31902 			; <UNDEFINED> instruction: 0x0ce31902
    882c:	b2090000 	andlt	r0, r9, #0
    8830:	069b1002 	ldreq	r1, [fp], r2
    8834:	02e00000 	rsceq	r0, r0, #0
    8838:	000aa619 	andeq	sl, sl, r9, lsl r6
    883c:	02b40900 	adcseq	r0, r4, #0, 18
    8840:	0009260a 	andeq	r2, r9, sl, lsl #12
    8844:	0002ec00 	andeq	lr, r2, r0, lsl #24
    8848:	05f10411 	ldrbeq	r0, [r1, #1041]!	; 0x411
    884c:	01030000 	mrseq	r0, (UNDEF: 3)
    8850:	000c6408 	andeq	r6, ip, r8, lsl #8
    8854:	05f10400 	ldrbeq	r0, [r1, #1024]!	; 0x400
    8858:	04110000 	ldreq	r0, [r1], #-0
    885c:	00000478 	andeq	r0, r0, r8, ror r4
    8860:	00a30115 	adceq	r0, r3, r5, lsl r1
    8864:	06220000 	strteq	r0, [r2], -r0
    8868:	97160000 	ldrls	r0, [r6, -r0]
    886c:	16000004 	strne	r0, [r0], -r4
    8870:	00000138 	andeq	r0, r0, r8, lsr r1
    8874:	00062216 	andeq	r2, r6, r6, lsl r2
    8878:	00a31600 	adceq	r1, r3, r0, lsl #12
    887c:	11000000 	mrsne	r0, (UNDEF: 0)
    8880:	0005f804 	andeq	pc, r5, r4, lsl #16
    8884:	03041100 	movweq	r1, #16640	; 0x4100
    8888:	15000006 	strne	r0, [r0, #-6]
    888c:	0000ca01 	andeq	ip, r0, r1, lsl #20
    8890:	00064d00 	andeq	r4, r6, r0, lsl #26
    8894:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    8898:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    889c:	16000001 	strne	r0, [r0], -r1
    88a0:	000000ca 	andeq	r0, r0, sl, asr #1
    88a4:	0000a316 	andeq	sl, r0, r6, lsl r3
    88a8:	04110000 	ldreq	r0, [r1], #-0
    88ac:	0000062e 	andeq	r0, r0, lr, lsr #12
    88b0:	00a30115 	adceq	r0, r3, r5, lsl r1
    88b4:	06680000 	strbteq	r0, [r8], -r0
    88b8:	97160000 	ldrls	r0, [r6, -r0]
    88bc:	16000004 	strne	r0, [r0], -r4
    88c0:	00000138 	andeq	r0, r0, r8, lsr r1
    88c4:	53041100 	movwpl	r1, #16640	; 0x4100
    88c8:	0a000006 	beq	88e8 <__exidx_end+0x2ca8>
    88cc:	00000065 	andeq	r0, r0, r5, rrx
    88d0:	0000067e 	andeq	r0, r0, lr, ror r6
    88d4:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    88d8:	0a000200 	beq	90e0 <__exidx_end+0x34a0>
    88dc:	00000065 	andeq	r0, r0, r5, rrx
    88e0:	0000068e 	andeq	r0, r0, lr, lsl #13
    88e4:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    88e8:	07000000 	streq	r0, [r0, -r0]
    88ec:	0000046e 	andeq	r0, r0, lr, ror #8
    88f0:	1a012409 	bne	5191c <__ccfg+0x31974>
    88f4:	00000335 	andeq	r0, r0, r5, lsr r3
    88f8:	000cdd1a 	andeq	sp, ip, sl, lsl sp
    88fc:	28090c00 	stmdacs	r9, {sl, fp}
    8900:	06d40801 	ldrbeq	r0, [r4], r1, lsl #16
    8904:	c4180000 	ldrgt	r0, [r8], #-0
    8908:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    890c:	d411012a 	ldrle	r0, [r1], #-298	; 0xfffffed6
    8910:	00000006 	andeq	r0, r0, r6
    8914:	000bce18 	andeq	ip, fp, r8, lsl lr
    8918:	012b0900 			; <UNDEFINED> instruction: 0x012b0900
    891c:	0000a307 	andeq	sl, r0, r7, lsl #6
    8920:	72180400 	andsvc	r0, r8, #0, 8
    8924:	09000007 	stmdbeq	r0, {r0, r1, r2}
    8928:	da0b012c 	ble	2c8de0 <__ccfg+0x2a8e38>
    892c:	08000006 	stmdaeq	r0, {r1, r2}
    8930:	9b041100 	blls	10cd38 <__ccfg+0xecd90>
    8934:	11000006 	tstne	r0, r6
    8938:	00068e04 	andeq	r8, r6, r4, lsl #28
    893c:	03da1a00 	bicseq	r1, sl, #0, 20
    8940:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    8944:	19080144 	stmdbne	r8, {r2, r6, r8}
    8948:	18000007 	stmdane	r0, {r0, r1, r2}
    894c:	0000164b 	andeq	r1, r0, fp, asr #12
    8950:	12014509 	andne	r4, r1, #37748736	; 0x2400000
    8954:	00000719 	andeq	r0, r0, r9, lsl r7
    8958:	08311800 	ldmdaeq	r1!, {fp, ip}
    895c:	46090000 	strmi	r0, [r9], -r0
    8960:	07191201 	ldreq	r1, [r9, -r1, lsl #4]
    8964:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    8968:	000014fd 	strdeq	r1, [r0], -sp
    896c:	12014709 	andne	r4, r1, #2359296	; 0x240000
    8970:	00000078 	andeq	r0, r0, r8, ror r0
    8974:	780a000c 	stmdavc	sl, {r2, r3}
    8978:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    897c:	0b000007 	bleq	89a0 <__exidx_end+0x2d60>
    8980:	000000aa 	andeq	r0, r0, sl, lsr #1
    8984:	d01b0002 	andsle	r0, fp, r2
    8988:	07028509 	streq	r8, [r2, -r9, lsl #10]
    898c:	0000083e 	andeq	r0, r0, lr, lsr r8
    8990:	000e6a18 	andeq	r6, lr, r8, lsl sl
    8994:	02870900 	addeq	r0, r7, #0, 18
    8998:	0000aa18 	andeq	sl, r0, r8, lsl sl
    899c:	eb180000 	bl	6089a4 <__ccfg+0x5e89fc>
    89a0:	0900000c 	stmdbeq	r0, {r2, r3}
    89a4:	eb120288 	bl	4893cc <__ccfg+0x469424>
    89a8:	04000005 	streq	r0, [r0], #-5
    89ac:	00043818 	andeq	r3, r4, r8, lsl r8
    89b0:	02890900 	addeq	r0, r9, #0, 18
    89b4:	00083e10 	andeq	r3, r8, r0, lsl lr
    89b8:	43180800 	tstmi	r8, #0, 16
    89bc:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    89c0:	ce17028a 	cdpgt	2, 1, cr0, cr7, cr10, {4}
    89c4:	24000001 	strcs	r0, [r0], #-1
    89c8:	0007e918 	andeq	lr, r7, r8, lsl r9
    89cc:	028b0900 	addeq	r0, fp, #0, 18
    89d0:	0000a30f 	andeq	sl, r0, pc, lsl #6
    89d4:	bf184800 	svclt	0x00184800
    89d8:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    89dc:	9c2c028c 	sfmls	f0, 4, [ip], #-560	; 0xfffffdd0
    89e0:	50000000 	andpl	r0, r0, r0
    89e4:	00007f18 	andeq	r7, r0, r8, lsl pc
    89e8:	028d0900 	addeq	r0, sp, #0, 18
    89ec:	0006e01a 	andeq	lr, r6, sl, lsl r0
    89f0:	39185800 	ldmdbcc	r8, {fp, ip, lr}
    89f4:	09000006 	stmdbeq	r0, {r1, r2}
    89f8:	2c16028e 	lfmcs	f0, 4, [r6], {142}	; 0x8e
    89fc:	68000001 	stmdavs	r0, {r0}
    8a00:	000cf818 	andeq	pc, ip, r8, lsl r8	; <UNPREDICTABLE>
    8a04:	028f0900 	addeq	r0, pc, #0, 18
    8a08:	00012c16 	andeq	r2, r1, r6, lsl ip
    8a0c:	71187000 	tstvc	r8, r0
    8a10:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8a14:	2c160290 	lfmcs	f0, 4, [r6], {144}	; 0x90
    8a18:	78000001 	stmdavc	r0, {r0}
    8a1c:	000b6a18 	andeq	r6, fp, r8, lsl sl
    8a20:	02910900 	addseq	r0, r1, #0, 18
    8a24:	00084e10 	andeq	r4, r8, r0, lsl lr
    8a28:	15188000 	ldrne	r8, [r8, #-0]
    8a2c:	09000004 	stmdbeq	r0, {r2}
    8a30:	5e100292 	mrcpl	2, 0, r0, cr0, cr2, {4}
    8a34:	88000008 	stmdahi	r0, {r3}
    8a38:	000c8d18 	andeq	r8, ip, r8, lsl sp
    8a3c:	02930900 	addseq	r0, r3, #0, 18
    8a40:	0000a30f 	andeq	sl, r0, pc, lsl #6
    8a44:	ac18a000 	ldcge	0, cr10, [r8], {-0}
    8a48:	09000002 	stmdbeq	r0, {r1}
    8a4c:	2c160294 	lfmcs	f0, 4, [r6], {148}	; 0x94
    8a50:	a4000001 	strge	r0, [r0], #-1
    8a54:	00069f18 	andeq	r9, r6, r8, lsl pc
    8a58:	02950900 	addseq	r0, r5, #0, 18
    8a5c:	00012c16 	andeq	r2, r1, r6, lsl ip
    8a60:	bb18ac00 	bllt	633a68 <__ccfg+0x613ac0>
    8a64:	09000005 	stmdbeq	r0, {r0, r2}
    8a68:	2c160296 	lfmcs	f0, 4, [r6], {150}	; 0x96
    8a6c:	b4000001 	strlt	r0, [r0], #-1
    8a70:	00084a18 	andeq	r4, r8, r8, lsl sl
    8a74:	02970900 	addseq	r0, r7, #0, 18
    8a78:	00012c16 	andeq	r2, r1, r6, lsl ip
    8a7c:	2818bc00 	ldmdacs	r8, {sl, fp, ip, sp, pc}
    8a80:	09000006 	stmdbeq	r0, {r1, r2}
    8a84:	2c160298 	lfmcs	f0, 4, [r6], {152}	; 0x98
    8a88:	c4000001 	strgt	r0, [r0], #-1
    8a8c:	00090218 	andeq	r0, r9, r8, lsl r2
    8a90:	02990900 	addseq	r0, r9, #0, 18
    8a94:	0000a308 	andeq	sl, r0, r8, lsl #6
    8a98:	0a00cc00 	beq	3baa0 <__ccfg+0x1baf8>
    8a9c:	000005f1 	strdeq	r0, [r0], -r1
    8aa0:	0000084e 	andeq	r0, r0, lr, asr #16
    8aa4:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8aa8:	0a001900 	beq	eeb0 <__exidx_end+0x9270>
    8aac:	000005f1 	strdeq	r0, [r0], -r1
    8ab0:	0000085e 	andeq	r0, r0, lr, asr r8
    8ab4:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8ab8:	0a000700 	beq	a6c0 <__exidx_end+0x4a80>
    8abc:	000005f1 	strdeq	r0, [r0], -r1
    8ac0:	0000086e 	andeq	r0, r0, lr, ror #16
    8ac4:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8ac8:	1b001700 	blne	e6d0 <__exidx_end+0x8a90>
    8acc:	029e09f0 	addseq	r0, lr, #240, 18	; 0x3c0000
    8ad0:	00089507 	andeq	r9, r8, r7, lsl #10
    8ad4:	03c01800 	biceq	r1, r0, #0, 16
    8ad8:	a1090000 	mrsge	r0, (UNDEF: 9)
    8adc:	08951b02 	ldmeq	r5, {r1, r8, r9, fp, ip}
    8ae0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8ae4:	00000f12 	andeq	r0, r0, r2, lsl pc
    8ae8:	1802a209 	stmdane	r2, {r0, r3, r9, sp, pc}
    8aec:	000008a5 	andeq	r0, r0, r5, lsr #17
    8af0:	2f0a0078 	svccs	0x000a0078
    8af4:	a5000003 	strge	r0, [r0, #-3]
    8af8:	0b000008 	bleq	8b20 <__exidx_end+0x2ee0>
    8afc:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b00:	aa0a001d 	bge	288b7c <__ccfg+0x268bd4>
    8b04:	b5000000 	strlt	r0, [r0, #-0]
    8b08:	0b000008 	bleq	8b30 <__exidx_end+0x2ef0>
    8b0c:	000000aa 	andeq	r0, r0, sl, lsr #1
    8b10:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    8b14:	03028309 	movweq	r8, #8969	; 0x2309
    8b18:	000008da 	ldrdeq	r0, [r0], -sl
    8b1c:	000d5f1d 	andeq	r5, sp, sp, lsl pc
    8b20:	029a0900 	addseq	r0, sl, #0, 18
    8b24:	0007290b 	andeq	r2, r7, fp, lsl #18
    8b28:	0b521d00 	bleq	148ff30 <__ccfg+0x146ff88>
    8b2c:	a3090000 	movwge	r0, #36864	; 0x9000
    8b30:	086e0b02 	stmdaeq	lr!, {r1, r8, r9, fp}^
    8b34:	0a000000 	beq	8b3c <__exidx_end+0x2efc>
    8b38:	000005f1 	strdeq	r0, [r0], -r1
    8b3c:	000008ea 	andeq	r0, r0, sl, ror #17
    8b40:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8b44:	1e001800 	cdpne	8, 0, cr1, cr0, cr0, {0}
    8b48:	00000eca 	andeq	r0, r0, sl, asr #29
    8b4c:	ea041101 	b	10cf58 <__ccfg+0xecfb0>
    8b50:	1f000008 	svcne	0x00000008
    8b54:	00090201 	andeq	r0, r9, r1, lsl #4
    8b58:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    8b5c:	11000000 	mrsne	r0, (UNDEF: 0)
    8b60:	0008f604 	andeq	pc, r8, r4, lsl #12
    8b64:	b8041100 	stmdalt	r4, {r8, ip}
    8b68:	1f000001 	svcne	0x00000001
    8b6c:	00091a01 	andeq	r1, r9, r1, lsl #20
    8b70:	00a31600 	adceq	r1, r3, r0, lsl #12
    8b74:	11000000 	mrsne	r0, (UNDEF: 0)
    8b78:	00092004 	andeq	r2, r9, r4
    8b7c:	0e041100 	adfeqs	f1, f4, f0
    8b80:	0a000009 	beq	8bac <__exidx_end+0x2f6c>
    8b84:	0000068e 	andeq	r0, r0, lr, lsl #13
    8b88:	00000936 	andeq	r0, r0, r6, lsr r9
    8b8c:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    8b90:	20000200 	andcs	r0, r0, r0, lsl #4
    8b94:	00000ac2 	andeq	r0, r0, r2, asr #21
    8b98:	17033309 	strne	r3, [r3, -r9, lsl #6]
    8b9c:	00000497 	muleq	r0, r7, r4
    8ba0:	bb200101 	bllt	808fac <__ccfg+0x7e9004>
    8ba4:	0900000a 	stmdbeq	r0, {r1, r3}
    8ba8:	9d1d0334 	ldcls	3, cr0, [sp, #-208]	; 0xffffff30
    8bac:	01000004 	tsteq	r0, r4
    8bb0:	24e10201 	strbtcs	r0, [r1], #513	; 0x201
    8bb4:	3b0b0000 	blcc	2c8bbc <__ccfg+0x2a8c14>
    8bb8:	00007f12 	andeq	r7, r0, r2, lsl pc
    8bbc:	0b080c00 	bleq	20bbc4 <__ccfg+0x1ebc1c>
    8bc0:	09840940 	stmibeq	r4, {r6, r8, fp}
    8bc4:	e40d0000 	str	r0, [sp], #-0
    8bc8:	0b00001f 	bleq	8c4c <__exidx_end+0x300c>
    8bcc:	09840d41 	stmibeq	r4, {r0, r6, r8, sl, fp}
    8bd0:	0d000000 	stceq	0, cr0, [r0, #-0]
    8bd4:	00002227 	andeq	r2, r0, r7, lsr #4
    8bd8:	840d420b 	strhi	r4, [sp], #-523	; 0xfffffdf5
    8bdc:	04000009 	streq	r0, [r0], #-9
    8be0:	59041100 	stmdbpl	r4, {r8, ip}
    8be4:	02000000 	andeq	r0, r0, #0
    8be8:	0000272c 	andeq	r2, r0, ip, lsr #14
    8bec:	6003430b 	andvs	r4, r3, fp, lsl #6
    8bf0:	02000009 	andeq	r0, r0, #9
    8bf4:	000022a8 	andeq	r2, r0, r8, lsr #5
    8bf8:	a22b3c0c 	eorge	r3, fp, #12, 24	; 0xc00
    8bfc:	0f000009 	svceq	0x00000009
    8c00:	00002547 	andeq	r2, r0, r7, asr #10
    8c04:	156f0c10 	strbne	r0, [pc, #-3088]!	; 7ffc <__exidx_end+0x23bc>
    8c08:	000009fe 	strdeq	r0, [r0], -lr
    8c0c:	001f130d 	andseq	r1, pc, sp, lsl #6
    8c10:	0d700c00 	ldcleq	12, cr0, [r0, #-0]
    8c14:	0000006c 	andeq	r0, r0, ip, rrx
    8c18:	07780d00 	ldrbeq	r0, [r8, -r0, lsl #26]!
    8c1c:	710c0000 	mrsvc	r0, (UNDEF: 12)
    8c20:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8c24:	860d0200 	strhi	r0, [sp], -r0, lsl #4
    8c28:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8c2c:	0bc01374 	bleq	ff00da04 <_estack+0xdf008a04>
    8c30:	0d040000 	stceq	0, cr0, [r4, #-0]
    8c34:	00002015 	andeq	r2, r0, r5, lsl r0
    8c38:	540c750c 	strpl	r7, [ip], #-1292	; 0xfffffaf4
    8c3c:	08000009 	stmdaeq	r0, {r0, r3}
    8c40:	0022b60d 	eoreq	fp, r2, sp, lsl #12
    8c44:	067d0c00 	ldrbteq	r0, [sp], -r0, lsl #24
    8c48:	00000b4c 	andeq	r0, r0, ip, asr #22
    8c4c:	22000d0c 	andcs	r0, r0, #12, 26	; 0x300
    8c50:	810c0000 	mrshi	r0, (UNDEF: 12)
    8c54:	000b9606 	andeq	r9, fp, r6, lsl #12
    8c58:	02000d00 	andeq	r0, r0, #0, 26
    8c5c:	00002089 	andeq	r2, r0, r9, lsl #1
    8c60:	0a2a3f0c 	beq	a98898 <__ccfg+0xa788f0>
    8c64:	0f00000a 	svceq	0x0000000a
    8c68:	0000207c 	andeq	r2, r0, ip, ror r0
    8c6c:	15e00c18 	strbne	r0, [r0, #3096]!	; 0xc18
    8c70:	00000ac1 	andeq	r0, r0, r1, asr #21
    8c74:	001f130d 	andseq	r1, pc, sp, lsl #6
    8c78:	0de10c00 	stcleq	12, cr0, [r1]
    8c7c:	0000006c 	andeq	r0, r0, ip, rrx
    8c80:	07780d00 	ldrbeq	r0, [r8, -r0, lsl #26]!
    8c84:	e20c0000 	and	r0, ip, #0
    8c88:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8c8c:	860d0200 	strhi	r0, [sp], -r0, lsl #4
    8c90:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8c94:	0bc013e5 	bleq	ff00dc30 <_estack+0xdf008c30>
    8c98:	0d040000 	stceq	0, cr0, [r4, #-0]
    8c9c:	00002015 	andeq	r2, r0, r5, lsl r0
    8ca0:	540ce60c 	strpl	lr, [ip], #-1548	; 0xfffff9f4
    8ca4:	08000009 	stmdaeq	r0, {r0, r3}
    8ca8:	0022b60d 	eoreq	fp, r2, sp, lsl #12
    8cac:	06ee0c00 	strbteq	r0, [lr], r0, lsl #24
    8cb0:	00000bcc 	andeq	r0, r0, ip, asr #23
    8cb4:	22000d0c 	andcs	r0, r0, #12, 26	; 0x300
    8cb8:	f20c0000 	vhadd.s8	d0, d12, d0
    8cbc:	000c1606 	andeq	r1, ip, r6, lsl #12
    8cc0:	520d0d00 	andpl	r0, sp, #0, 26
    8cc4:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    8cc8:	006c0df3 	strdeq	r0, [ip], #-211	; 0xffffff2d	; <UNPREDICTABLE>
    8ccc:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    8cd0:	000023aa 	andeq	r2, r0, sl, lsr #7
    8cd4:	6c0df40c 	cfstrsvs	mvf15, [sp], {12}
    8cd8:	10000000 	andne	r0, r0, r0
    8cdc:	0020bc0d 	eoreq	fp, r0, sp, lsl #24
    8ce0:	06fa0c00 	ldrbteq	r0, [sl], r0, lsl #24
    8ce4:	00000c40 	andeq	r0, r0, r0, asr #24
    8ce8:	22660d12 	rsbcs	r0, r6, #1152	; 0x480
    8cec:	fb0c0000 	blx	308cf6 <__ccfg+0x2e8d4e>
    8cf0:	0000590c 	andeq	r5, r0, ip, lsl #18
    8cf4:	b60d1300 	strlt	r1, [sp], -r0, lsl #6
    8cf8:	0c000025 	stceq	0, cr0, [r0], {37}	; 0x25
    8cfc:	00590cfc 	ldrsheq	r0, [r9], #-204	; 0xffffff34
    8d00:	0d140000 	ldceq	0, cr0, [r4, #-0]
    8d04:	000025bf 			; <UNDEFINED> instruction: 0x000025bf
    8d08:	590cfd0c 	stmdbpl	ip, {r2, r3, r8, sl, fp, ip, sp, lr, pc}
    8d0c:	15000000 	strne	r0, [r0, #-0]
    8d10:	0025c80d 	eoreq	ip, r5, sp, lsl #16
    8d14:	0dfe0c00 	ldcleq	12, cr0, [lr]
    8d18:	0000006c 	andeq	r0, r0, ip, rrx
    8d1c:	cd020016 	stcgt	0, cr0, [r2, #-88]	; 0xffffffa8
    8d20:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    8d24:	0acd3644 	beq	ff35663c <_estack+0xdf35163c>
    8d28:	b41a0000 	ldrlt	r0, [sl], #-0
    8d2c:	14000026 	strne	r0, [r0], #-38	; 0xffffffda
    8d30:	15019f0c 	strne	r9, [r1, #-3852]	; 0xfffff0f4
    8d34:	00000b4c 	andeq	r0, r0, ip, asr #22
    8d38:	001f1318 	andseq	r1, pc, r8, lsl r3	; <UNPREDICTABLE>
    8d3c:	01a00c00 	lsleq	r0, r0, #24
    8d40:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8d44:	78180000 	ldmdavc	r8, {}	; <UNPREDICTABLE>
    8d48:	0c000007 	stceq	0, cr0, [r0], {7}
    8d4c:	6c0d01a1 	stfvss	f0, [sp], {161}	; 0xa1
    8d50:	02000000 	andeq	r0, r0, #0
    8d54:	00228618 	eoreq	r8, r2, r8, lsl r6
    8d58:	01a40c00 			; <UNDEFINED> instruction: 0x01a40c00
    8d5c:	000bc013 	andeq	ip, fp, r3, lsl r0
    8d60:	15180400 	ldrne	r0, [r8, #-1024]	; 0xfffffc00
    8d64:	0c000020 	stceq	0, cr0, [r0], {32}
    8d68:	540c01a5 	strpl	r0, [ip], #-421	; 0xfffffe5b
    8d6c:	08000009 	stmdaeq	r0, {r0, r3}
    8d70:	0022b618 	eoreq	fp, r2, r8, lsl r6
    8d74:	01ad0c00 			; <UNDEFINED> instruction: 0x01ad0c00
    8d78:	000c6a06 	andeq	r6, ip, r6, lsl #20
    8d7c:	00180c00 	andseq	r0, r8, r0, lsl #24
    8d80:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8d84:	b90601b1 	stmdblt	r6, {r0, r4, r5, r7, r8}
    8d88:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    8d8c:	00226618 	eoreq	r6, r2, r8, lsl r6
    8d90:	01b20c00 			; <UNDEFINED> instruction: 0x01b20c00
    8d94:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8d98:	54180e00 	ldrpl	r0, [r8], #-3584	; 0xfffff200
    8d9c:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8da0:	540c01b3 	strpl	r0, [ip], #-435	; 0xfffffe4d
    8da4:	10000009 	andne	r0, r0, r9
    8da8:	0c010c00 	stceq	12, cr0, [r1], {-0}
    8dac:	0b960476 	bleq	fe589f8c <_estack+0xde584f8c>
    8db0:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
    8db4:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8db8:	00590f77 	subseq	r0, r9, r7, ror pc
    8dbc:	04010000 	streq	r0, [r1], #-0
    8dc0:	07210004 	streq	r0, [r1, -r4]!
    8dc4:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8dc8:	00590f78 	subseq	r0, r9, r8, ror pc
    8dcc:	01010000 	mrseq	r0, (UNDEF: 1)
    8dd0:	c7210003 	strgt	r0, [r1, -r3]!
    8dd4:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8dd8:	00590f7a 	subseq	r0, r9, sl, ror pc
    8ddc:	02010000 	andeq	r0, r1, #0
    8de0:	82210001 	eorhi	r0, r1, #1
    8de4:	0c00001f 	stceq	0, cr0, [r0], {31}
    8de8:	00590f7b 	subseq	r0, r9, fp, ror pc
    8dec:	01010000 	mrseq	r0, (UNDEF: 1)
    8df0:	0c000000 	stceq	0, cr0, [r0], {-0}
    8df4:	047e0c01 	ldrbteq	r0, [lr], #-3073	; 0xfffff3ff
    8df8:	00000bc0 	andeq	r0, r0, r0, asr #23
    8dfc:	0025e421 	eoreq	lr, r5, r1, lsr #8
    8e00:	0f7f0c00 	svceq	0x007f0c00
    8e04:	00000059 	andeq	r0, r0, r9, asr r0
    8e08:	00040401 	andeq	r0, r4, r1, lsl #8
    8e0c:	00273821 	eoreq	r3, r7, r1, lsr #16
    8e10:	0f800c00 	svceq	0x00800c00
    8e14:	00000059 	andeq	r0, r0, r9, asr r0
    8e18:	00000401 	andeq	r0, r0, r1, lsl #8
    8e1c:	96041100 	strls	r1, [r4], -r0, lsl #2
    8e20:	11000009 	tstne	r0, r9
    8e24:	00007f04 	andeq	r7, r0, r4, lsl #30
    8e28:	0c010c00 	stceq	12, cr0, [r1], {-0}
    8e2c:	0c1604e7 	cfldrseq	mvf0, [r6], {231}	; 0xe7
    8e30:	69210000 	stmdbvs	r1!, {}	; <UNPREDICTABLE>
    8e34:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8e38:	00590fe8 	subseq	r0, r9, r8, ror #31
    8e3c:	04010000 	streq	r0, [r1], #-0
    8e40:	07210004 	streq	r0, [r1, -r4]!
    8e44:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8e48:	00590fe9 	subseq	r0, r9, r9, ror #31
    8e4c:	01010000 	mrseq	r0, (UNDEF: 1)
    8e50:	c7210003 	strgt	r0, [r1, -r3]!
    8e54:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8e58:	00590feb 	subseq	r0, r9, fp, ror #31
    8e5c:	02010000 	andeq	r0, r1, #0
    8e60:	82210001 	eorhi	r0, r1, #1
    8e64:	0c00001f 	stceq	0, cr0, [r0], {31}
    8e68:	00590fec 	subseq	r0, r9, ip, ror #31
    8e6c:	01010000 	mrseq	r0, (UNDEF: 1)
    8e70:	0c000000 	stceq	0, cr0, [r0], {-0}
    8e74:	04ef0c01 	strbteq	r0, [pc], #3073	; 8e7c <__exidx_end+0x323c>
    8e78:	00000c40 	andeq	r0, r0, r0, asr #24
    8e7c:	0025e421 	eoreq	lr, r5, r1, lsr #8
    8e80:	0ff00c00 	svceq	0x00f00c00
    8e84:	00000059 	andeq	r0, r0, r9, asr r0
    8e88:	00040401 	andeq	r0, r4, r1, lsl #8
    8e8c:	00273821 	eoreq	r3, r7, r1, lsr #16
    8e90:	0ff10c00 	svceq	0x00f10c00
    8e94:	00000059 	andeq	r0, r0, r9, asr r0
    8e98:	00000401 	andeq	r0, r0, r1, lsl #8
    8e9c:	0c010c00 	stceq	12, cr0, [r1], {-0}
    8ea0:	0c6a04f5 	cfstrdeq	mvd0, [sl], #-980	; 0xfffffc2c
    8ea4:	f1210000 			; <UNDEFINED> instruction: 0xf1210000
    8ea8:	0c000020 	stceq	0, cr0, [r0], {32}
    8eac:	00590ff6 	ldrsheq	r0, [r9], #-246	; 0xffffff0a
    8eb0:	01010000 	mrseq	r0, (UNDEF: 1)
    8eb4:	52210007 	eorpl	r0, r1, #7
    8eb8:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    8ebc:	00590ff8 	ldrsheq	r0, [r9], #-248	; 0xffffff08
    8ec0:	06010000 	streq	r0, [r1], -r0
    8ec4:	1b000001 	blne	8ed0 <__exidx_end+0x3290>
    8ec8:	01a60c01 			; <UNDEFINED> instruction: 0x01a60c01
    8ecc:	000cb904 	andeq	fp, ip, r4, lsl #18
    8ed0:	27692200 	strbcs	r2, [r9, -r0, lsl #4]!
    8ed4:	a70c0000 	strge	r0, [ip, -r0]
    8ed8:	00590f01 	subseq	r0, r9, r1, lsl #30
    8edc:	04010000 	streq	r0, [r1], #-0
    8ee0:	07220004 	streq	r0, [r2, -r4]!
    8ee4:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    8ee8:	590f01a8 	stmdbpl	pc, {r3, r5, r7, r8}	; <UNPREDICTABLE>
    8eec:	01000000 	mrseq	r0, (UNDEF: 0)
    8ef0:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    8ef4:	000021c7 	andeq	r2, r0, r7, asr #3
    8ef8:	0f01aa0c 	svceq	0x0001aa0c
    8efc:	00000059 	andeq	r0, r0, r9, asr r0
    8f00:	00010201 	andeq	r0, r1, r1, lsl #4
    8f04:	001f8222 	andseq	r8, pc, r2, lsr #4
    8f08:	01ab0c00 			; <UNDEFINED> instruction: 0x01ab0c00
    8f0c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f10:	00010100 	andeq	r0, r1, r0, lsl #2
    8f14:	011b0000 	tsteq	fp, r0
    8f18:	0401ae0c 	streq	sl, [r1], #-3596	; 0xfffff1f4
    8f1c:	00000ce6 	andeq	r0, r0, r6, ror #25
    8f20:	0025e422 	eoreq	lr, r5, r2, lsr #8
    8f24:	01af0c00 			; <UNDEFINED> instruction: 0x01af0c00
    8f28:	0000590f 	andeq	r5, r0, pc, lsl #18
    8f2c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8f30:	27382200 	ldrcs	r2, [r8, -r0, lsl #4]!
    8f34:	b00c0000 	andlt	r0, ip, r0
    8f38:	00590f01 	subseq	r0, r9, r1, lsl #30
    8f3c:	04010000 	streq	r0, [r1], #-0
    8f40:	11000000 	mrsne	r0, (UNDEF: 0)
    8f44:	00098a04 	andeq	r8, r9, r4, lsl #20
    8f48:	26270200 	strtcs	r0, [r7], -r0, lsl #4
    8f4c:	3d0d0000 	stccc	0, cr0, [sp, #-0]
    8f50:	000cf82f 	andeq	pc, ip, pc, lsr #16
    8f54:	26390f00 	ldrtcs	r0, [r9], -r0, lsl #30
    8f58:	0d180000 	ldceq	0, cr0, [r8, #-0]
    8f5c:	0d881578 	cfstr32eq	mvfx1, [r8, #480]	; 0x1e0
    8f60:	130d0000 	movwne	r0, #53248	; 0xd000
    8f64:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    8f68:	006c0d79 	rsbeq	r0, ip, r9, ror sp
    8f6c:	0d000000 	stceq	0, cr0, [r0, #-0]
    8f70:	00000778 	andeq	r0, r0, r8, ror r7
    8f74:	6c0d7a0d 			; <UNDEFINED> instruction: 0x6c0d7a0d
    8f78:	02000000 	andeq	r0, r0, #0
    8f7c:	0022860d 	eoreq	r8, r2, sp, lsl #12
    8f80:	137d0d00 	cmnne	sp, #0, 26
    8f84:	00000bc0 	andeq	r0, r0, r0, asr #23
    8f88:	20150d04 	andscs	r0, r5, r4, lsl #26
    8f8c:	7e0d0000 	cdpvc	0, 0, cr0, cr13, cr0, {0}
    8f90:	0009540c 	andeq	r5, r9, ip, lsl #8
    8f94:	b60d0800 	strlt	r0, [sp], -r0, lsl #16
    8f98:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8f9c:	10f30686 	rscsne	r0, r3, r6, lsl #13
    8fa0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    8fa4:	00002200 	andeq	r2, r0, r0, lsl #4
    8fa8:	3d068a0d 	vstrcc	s16, [r6, #-52]	; 0xffffffcc
    8fac:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    8fb0:	00205a0d 	eoreq	r5, r0, sp, lsl #20
    8fb4:	06930d00 	ldreq	r0, [r3], r0, lsl #26
    8fb8:	00001167 	andeq	r1, r0, r7, ror #2
    8fbc:	25dd0d0e 	ldrbcs	r0, [sp, #3342]	; 0xd0e
    8fc0:	940d0000 	strls	r0, [sp], #-0
    8fc4:	0000590c 	andeq	r5, r0, ip, lsl #18
    8fc8:	3c0d0f00 	stccc	15, cr0, [sp], {-0}
    8fcc:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    8fd0:	007f0d95 			; <UNDEFINED> instruction: 0x007f0d95
    8fd4:	0d100000 	ldceq	0, cr0, [r0, #-0]
    8fd8:	00001f40 	andeq	r1, r0, r0, asr #30
    8fdc:	840d960d 	strhi	r9, [sp], #-1549	; 0xfffff9f3
    8fe0:	14000009 	strne	r0, [r0], #-9
    8fe4:	24930200 	ldrcs	r0, [r3], #512	; 0x200
    8fe8:	3e0d0000 	cdpcc	0, 0, cr0, cr13, cr0, {0}
    8fec:	000d942f 	andeq	r9, sp, pc, lsr #8
    8ff0:	218b0f00 	orrcs	r0, fp, r0, lsl #30
    8ff4:	0d240000 	stceq	0, cr0, [r4, #-0]
    8ff8:	0e72159f 	mrceq	5, 3, r1, cr2, cr15, {4}
    8ffc:	130d0000 	movwne	r0, #53248	; 0xd000
    9000:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    9004:	006c0da0 	rsbeq	r0, ip, r0, lsr #27
    9008:	0d000000 	stceq	0, cr0, [r0, #-0]
    900c:	00000778 	andeq	r0, r0, r8, ror r7
    9010:	6c0da10d 	stfvsd	f2, [sp], {13}
    9014:	02000000 	andeq	r0, r0, #0
    9018:	0022860d 	eoreq	r8, r2, sp, lsl #12
    901c:	13a40d00 			; <UNDEFINED> instruction: 0x13a40d00
    9020:	00000bc0 	andeq	r0, r0, r0, asr #23
    9024:	20150d04 	andscs	r0, r5, r4, lsl #26
    9028:	a50d0000 	strge	r0, [sp, #-0]
    902c:	0009540c 	andeq	r5, r9, ip, lsl #8
    9030:	b60d0800 	strlt	r0, [sp], -r0, lsl #16
    9034:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9038:	11a106ad 			; <UNDEFINED> instruction: 0x11a106ad
    903c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    9040:	00002200 	andeq	r2, r0, r0, lsl #4
    9044:	eb06b10d 	bl	1b5480 <__ccfg+0x1954d8>
    9048:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    904c:	00205a0d 	eoreq	r5, r0, sp, lsl #20
    9050:	06c30d00 	strbeq	r0, [r3], r0, lsl #26
    9054:	00001215 	andeq	r1, r0, r5, lsl r2
    9058:	23f10d0e 	mvnscs	r0, #896	; 0x380
    905c:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
    9060:	00129f06 	andseq	r9, r2, r6, lsl #30
    9064:	3c0d0f00 	stccc	15, cr0, [sp], {-0}
    9068:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    906c:	007f0dce 	rsbseq	r0, pc, lr, asr #27
    9070:	0d100000 	ldceq	0, cr0, [r0, #-0]
    9074:	0000213f 	andeq	r2, r0, pc, lsr r1
    9078:	590ccf0d 	stmdbpl	ip, {r0, r2, r3, r8, r9, sl, fp, lr, pc}
    907c:	14000000 	strne	r0, [r0], #-0
    9080:	0024430d 	eoreq	r4, r4, sp, lsl #6
    9084:	0cd10d00 	ldcleq	13, cr0, [r1], {0}
    9088:	00000059 	andeq	r0, r0, r9, asr r0
    908c:	244c0d15 	strbcs	r0, [ip], #-3349	; 0xfffff2eb
    9090:	d20d0000 	andle	r0, sp, #0
    9094:	0000590c 	andeq	r5, r0, ip, lsl #18
    9098:	9d0d1600 	stcls	6, cr1, [sp, #-0]
    909c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    90a0:	131906db 	tstne	r9, #229638144	; 0xdb00000
    90a4:	0d170000 	ldceq	0, cr0, [r7, #-0]
    90a8:	0000268c 	andeq	r2, r0, ip, lsl #13
    90ac:	540cdc0d 	strpl	sp, [ip], #-3085	; 0xfffff3f3
    90b0:	18000009 	stmdane	r0, {r0, r3}
    90b4:	0021d10d 	eoreq	sp, r1, sp, lsl #2
    90b8:	11dd0d00 	bicsne	r0, sp, r0, lsl #26
    90bc:	00000ce6 	andeq	r0, r0, r6, ror #25
    90c0:	1fa50d1c 	svcne	0x00a50d1c
    90c4:	de0d0000 	cdple	0, 0, cr0, cr13, cr0, {0}
    90c8:	0009840d 	andeq	r8, r9, sp, lsl #8
    90cc:	02002000 	andeq	r2, r0, #0
    90d0:	000021a8 	andeq	r2, r0, r8, lsr #3
    90d4:	7e2f410d 	sufvce	f4, f7, #5.0
    90d8:	1a00000e 	bne	9118 <__exidx_end+0x34d8>
    90dc:	00001f70 	andeq	r1, r0, r0, ror pc
    90e0:	017d0d1c 	cmneq	sp, ip, lsl sp
    90e4:	000f6d15 	andeq	r6, pc, r5, lsl sp	; <UNPREDICTABLE>
    90e8:	1f131800 	svcne	0x00131800
    90ec:	7e0d0000 	cdpvc	0, 0, cr0, cr13, cr0, {0}
    90f0:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    90f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    90f8:	00000778 	andeq	r0, r0, r8, ror r7
    90fc:	0d017f0d 	stceq	15, cr7, [r1, #-52]	; 0xffffffcc
    9100:	0000006c 	andeq	r0, r0, ip, rrx
    9104:	22861802 	addcs	r1, r6, #131072	; 0x20000
    9108:	820d0000 	andhi	r0, sp, #0
    910c:	0bc01301 	bleq	ff00dd18 <_estack+0xdf008d18>
    9110:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    9114:	00002015 	andeq	r2, r0, r5, lsl r0
    9118:	0c01830d 	stceq	3, cr8, [r1], {13}
    911c:	00000954 	andeq	r0, r0, r4, asr r9
    9120:	22b61808 	adcscs	r1, r6, #8, 16	; 0x80000
    9124:	8b0d0000 	blhi	34912c <__ccfg+0x329184>
    9128:	13630601 	cmnne	r3, #1048576	; 0x100000
    912c:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    9130:	00002200 	andeq	r2, r0, r0, lsl #4
    9134:	06018f0d 	streq	r8, [r1], -sp, lsl #30
    9138:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
    913c:	2666180d 	strbtcs	r1, [r6], -sp, lsl #16
    9140:	950d0000 	strls	r0, [sp, #-0]
    9144:	13df0601 	bicsne	r0, pc, #1048576	; 0x100000
    9148:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    914c:	00002266 	andeq	r2, r0, r6, ror #4
    9150:	0c01960d 	stceq	6, cr9, [r1], {13}
    9154:	00000059 	andeq	r0, r0, r9, asr r0
    9158:	2725180f 	strcs	r1, [r5, -pc, lsl #16]!
    915c:	a30d0000 	movwge	r0, #53248	; 0xd000
    9160:	140c0601 	strne	r0, [ip], #-1537	; 0xfffff9ff
    9164:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    9168:	000021e7 	andeq	r2, r0, r7, ror #3
    916c:	0b01a40d 	bleq	721a8 <__ccfg+0x52200>
    9170:	00000025 	andeq	r0, r0, r5, lsr #32
    9174:	24b81811 	ldrtcs	r1, [r8], #2065	; 0x811
    9178:	a50d0000 	strge	r0, [sp, #-0]
    917c:	00590c01 	subseq	r0, r9, r1, lsl #24
    9180:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
    9184:	000026ed 	andeq	r2, r0, sp, ror #13
    9188:	0c01a70d 	stceq	7, cr10, [r1], {13}
    918c:	00000059 	andeq	r0, r0, r9, asr r0
    9190:	236f1813 	cmncs	pc, #1245184	; 0x130000
    9194:	a90d0000 	stmdbge	sp, {}	; <UNPREDICTABLE>
    9198:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    919c:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    91a0:	00002149 	andeq	r2, r0, r9, asr #2
    91a4:	0601af0d 	streq	sl, [r1], -sp, lsl #30
    91a8:	0000147d 	andeq	r1, r0, sp, ror r4
    91ac:	224c1816 	subcs	r1, ip, #1441792	; 0x160000
    91b0:	b70d0000 	strlt	r0, [sp, -r0]
    91b4:	14aa0601 	strtne	r0, [sl], #1537	; 0x601
    91b8:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
    91bc:	0000235b 	andeq	r2, r0, fp, asr r3
    91c0:	0c01b80d 	stceq	8, cr11, [r1], {13}
    91c4:	00000954 	andeq	r0, r0, r4, asr r9
    91c8:	74020018 	strvc	r0, [r2], #-24	; 0xffffffe8
    91cc:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    91d0:	0f793c43 	svceq	0x00793c43
    91d4:	551a0000 	ldrpl	r0, [sl, #-0]
    91d8:	28000024 	stmdacs	r0, {r2, r5}
    91dc:	15021a0d 	strne	r1, [r2, #-2573]	; 0xfffff5f3
    91e0:	00001076 	andeq	r1, r0, r6, ror r0
    91e4:	001f1318 	andseq	r1, pc, r8, lsl r3	; <UNPREDICTABLE>
    91e8:	021b0d00 	andseq	r0, fp, #0, 26
    91ec:	00006c0d 	andeq	r6, r0, sp, lsl #24
    91f0:	78180000 	ldmdavc	r8, {}	; <UNPREDICTABLE>
    91f4:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    91f8:	6c0d021d 	sfmvs	f0, 4, [sp], {29}
    91fc:	02000000 	andeq	r0, r0, #0
    9200:	00228618 	eoreq	r8, r2, r8, lsl r6
    9204:	02200d00 	eoreq	r0, r0, #0, 26
    9208:	000bc013 	andeq	ip, fp, r3, lsl r0
    920c:	15180400 	ldrne	r0, [r8, #-1024]	; 0xfffffc00
    9210:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    9214:	540c0221 	strpl	r0, [ip], #-545	; 0xfffffddf
    9218:	08000009 	stmdaeq	r0, {r0, r3}
    921c:	0022b618 	eoreq	fp, r2, r8, lsl r6
    9220:	02290d00 	eoreq	r0, r9, #0, 26
    9224:	0014f906 	andseq	pc, r4, r6, lsl #18
    9228:	00180c00 	andseq	r0, r8, r0, lsl #24
    922c:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    9230:	4806022d 	stmdami	r6, {r0, r2, r3, r5, r9}
    9234:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    9238:	001f0818 	andseq	r0, pc, r8, lsl r8	; <UNPREDICTABLE>
    923c:	02330d00 	eorseq	r0, r3, #0, 26
    9240:	00157506 	andseq	r7, r5, r6, lsl #10
    9244:	6f180e00 	svcvs	0x00180e00
    9248:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    924c:	a2060238 	andge	r0, r6, #56, 4	; 0x80000003
    9250:	10000015 	andne	r0, r0, r5, lsl r0
    9254:	00209e18 	eoreq	r9, r0, r8, lsl lr
    9258:	02390d00 	eorseq	r0, r9, #0, 26
    925c:	0000590c 	andeq	r5, r0, ip, lsl #18
    9260:	32181400 	andscc	r1, r8, #0, 8
    9264:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    9268:	cf060241 	svcgt	0x00060241
    926c:	15000015 	strne	r0, [r0, #-21]	; 0xffffffeb
    9270:	00200a18 	eoreq	r0, r0, r8, lsl sl
    9274:	02550d00 	subseq	r0, r5, #0, 26
    9278:	0015fc06 	andseq	pc, r5, r6, lsl #24
    927c:	7d181600 	ldcvc	6, cr1, [r8, #-0]
    9280:	0d000014 	stceq	0, cr0, [r0, #-80]	; 0xffffffb0
    9284:	5c060268 	sfmpl	f0, 4, [r6], {104}	; 0x68
    9288:	18000016 	stmdane	r0, {r1, r2, r4}
    928c:	00209618 	eoreq	r9, r0, r8, lsl r6
    9290:	02690d00 	rsbeq	r0, r9, #0, 26
    9294:	00006c0d 	andeq	r6, r0, sp, lsl #24
    9298:	d4181a00 	ldrle	r1, [r8], #-2560	; 0xfffff600
    929c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    92a0:	c60e026a 	strgt	r0, [lr], -sl, ror #4
    92a4:	1c00000b 	stcne	0, cr0, [r0], {11}
    92a8:	001f4518 	andseq	r4, pc, r8, lsl r5	; <UNPREDICTABLE>
    92ac:	026c0d00 	rsbeq	r0, ip, #0, 26
    92b0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    92b4:	8e182000 	cdphi	0, 1, cr2, cr8, cr0, {0}
    92b8:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    92bc:	380c0270 	stmdacc	ip, {r4, r5, r6, r9}
    92c0:	22000000 	andcs	r0, r0, #0
    92c4:	0023cc18 	eoreq	ip, r3, r8, lsl ip
    92c8:	02730d00 	rsbseq	r0, r3, #0, 26
    92cc:	0000590c 	andeq	r5, r0, ip, lsl #18
    92d0:	02002400 	andeq	r2, r0, #0, 8
    92d4:	00002508 	andeq	r2, r0, r8, lsl #10
    92d8:	8230480d 	eorshi	r4, r0, #851968	; 0xd0000
    92dc:	1a000010 	bne	9324 <__exidx_end+0x36e4>
    92e0:	000024f5 	strdeq	r2, [r0], -r5
    92e4:	03750d0c 	cmneq	r5, #12, 26	; 0x300
    92e8:	0010f315 	andseq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    92ec:	25ab1800 	strcs	r1, [fp, #2048]!	; 0x800
    92f0:	760d0000 	strvc	r0, [sp], -r0
    92f4:	006c0d03 	rsbeq	r0, ip, r3, lsl #26
    92f8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    92fc:	00001fca 	andeq	r1, r0, sl, asr #31
    9300:	0d03770d 	stceq	7, cr7, [r3, #-52]	; 0xffffffcc
    9304:	0000006c 	andeq	r0, r0, ip, rrx
    9308:	1fb71802 	svcne	0x00b71802
    930c:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    9310:	00590c03 	subseq	r0, r9, r3, lsl #24
    9314:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    9318:	000024ad 	andeq	r2, r0, sp, lsr #9
    931c:	0c03790d 			; <UNDEFINED> instruction: 0x0c03790d
    9320:	00000059 	andeq	r0, r0, r9, asr r0
    9324:	22321805 	eorscs	r1, r2, #327680	; 0x50000
    9328:	7a0d0000 	bvc	349330 <__ccfg+0x329388>
    932c:	00590c03 	subseq	r0, r9, r3, lsl #24
    9330:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    9334:	00002216 	andeq	r2, r0, r6, lsl r2
    9338:	0b037b0d 	bleq	e7f74 <__ccfg+0xc7fcc>
    933c:	00000025 	andeq	r0, r0, r5, lsr #32
    9340:	1fef1807 	svcne	0x00ef1807
    9344:	7c0d0000 	stcvc	0, cr0, [sp], {-0}
    9348:	09540c03 	ldmdbeq	r4, {r0, r1, sl, fp}^
    934c:	00080000 	andeq	r0, r8, r0
    9350:	7f0d010c 	svcvc	0x000d010c
    9354:	00113d04 	andseq	r3, r1, r4, lsl #26
    9358:	27692100 	strbcs	r2, [r9, -r0, lsl #2]!
    935c:	800d0000 	andhi	r0, sp, r0
    9360:	0000590f 	andeq	r5, r0, pc, lsl #18
    9364:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    9368:	21072100 	mrscs	r2, (UNDEF: 23)
    936c:	810d0000 	mrshi	r0, (UNDEF: 13)
    9370:	0000590f 	andeq	r5, r0, pc, lsl #18
    9374:	03010100 	movweq	r0, #4352	; 0x1100
    9378:	21c72100 	biccs	r2, r7, r0, lsl #2
    937c:	830d0000 	movwhi	r0, #53248	; 0xd000
    9380:	0000590f 	andeq	r5, r0, pc, lsl #18
    9384:	01020100 	mrseq	r0, (UNDEF: 18)
    9388:	1f822100 	svcne	0x00822100
    938c:	840d0000 	strhi	r0, [sp], #-0
    9390:	0000590f 	andeq	r5, r0, pc, lsl #18
    9394:	00010100 	andeq	r0, r1, r0, lsl #2
    9398:	010c0000 	mrseq	r0, (UNDEF: 12)
    939c:	6704870d 	strvs	r8, [r4, -sp, lsl #14]
    93a0:	21000011 	tstcs	r0, r1, lsl r0
    93a4:	000025e4 	andeq	r2, r0, r4, ror #11
    93a8:	590f880d 	stmdbpl	pc, {r0, r2, r3, fp, pc}	; <UNPREDICTABLE>
    93ac:	01000000 	mrseq	r0, (UNDEF: 0)
    93b0:	21000404 	tstcs	r0, r4, lsl #8
    93b4:	00002738 	andeq	r2, r0, r8, lsr r7
    93b8:	590f890d 	stmdbpl	pc, {r0, r2, r3, r8, fp, pc}	; <UNPREDICTABLE>
    93bc:	01000000 	mrseq	r0, (UNDEF: 0)
    93c0:	00000004 	andeq	r0, r0, r4
    93c4:	8b0d010c 	blhi	3497fc <__ccfg+0x329854>
    93c8:	0011a104 	andseq	sl, r1, r4, lsl #2
    93cc:	26772100 	ldrbtcs	r2, [r7], -r0, lsl #2
    93d0:	8c0d0000 	stchi	0, cr0, [sp], {-0}
    93d4:	0000590f 	andeq	r5, r0, pc, lsl #18
    93d8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    93dc:	26ff2100 	ldrbtcs	r2, [pc], r0, lsl #2
    93e0:	8f0d0000 	svchi	0x000d0000
    93e4:	0000590f 	andeq	r5, r0, pc, lsl #18
    93e8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    93ec:	1f382100 	svcne	0x00382100
    93f0:	910d0000 	mrsls	r0, (UNDEF: 13)
    93f4:	0000590f 	andeq	r5, r0, pc, lsl #18
    93f8:	03010100 	movweq	r0, #4352	; 0x1100
    93fc:	010c0000 	mrseq	r0, (UNDEF: 12)
    9400:	eb04a60d 	bl	132c3c <__ccfg+0x112c94>
    9404:	21000011 	tstcs	r0, r1, lsl r0
    9408:	00002769 	andeq	r2, r0, r9, ror #14
    940c:	590fa70d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, sp, pc}	; <UNPREDICTABLE>
    9410:	01000000 	mrseq	r0, (UNDEF: 0)
    9414:	21000404 	tstcs	r0, r4, lsl #8
    9418:	00002107 	andeq	r2, r0, r7, lsl #2
    941c:	590fa80d 	stmdbpl	pc, {r0, r2, r3, fp, sp, pc}	; <UNPREDICTABLE>
    9420:	01000000 	mrseq	r0, (UNDEF: 0)
    9424:	21000301 	tstcs	r0, r1, lsl #6
    9428:	000021c7 	andeq	r2, r0, r7, asr #3
    942c:	590faa0d 	stmdbpl	pc, {r0, r2, r3, r9, fp, sp, pc}	; <UNPREDICTABLE>
    9430:	01000000 	mrseq	r0, (UNDEF: 0)
    9434:	21000102 	tstcs	r0, r2, lsl #2
    9438:	00001f82 	andeq	r1, r0, r2, lsl #31
    943c:	590fab0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, fp, sp, pc}	; <UNPREDICTABLE>
    9440:	01000000 	mrseq	r0, (UNDEF: 0)
    9444:	00000001 	andeq	r0, r0, r1
    9448:	ae0d010c 	adfgee	f0, f5, #4.0
    944c:	00121504 	andseq	r1, r2, r4, lsl #10
    9450:	25e42100 	strbcs	r2, [r4, #256]!	; 0x100
    9454:	af0d0000 	svcge	0x000d0000
    9458:	0000590f 	andeq	r5, r0, pc, lsl #18
    945c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    9460:	27382100 	ldrcs	r2, [r8, -r0, lsl #2]!
    9464:	b00d0000 	andlt	r0, sp, r0
    9468:	0000590f 	andeq	r5, r0, pc, lsl #18
    946c:	00040100 	andeq	r0, r4, r0, lsl #2
    9470:	010c0000 	mrseq	r0, (UNDEF: 12)
    9474:	9f04b20d 	svcls	0x0004b20d
    9478:	21000012 	tstcs	r0, r2, lsl r0
    947c:	00002677 	andeq	r2, r0, r7, ror r6
    9480:	590fb30d 	stmdbpl	pc, {r0, r2, r3, r8, r9, ip, sp, pc}	; <UNPREDICTABLE>
    9484:	01000000 	mrseq	r0, (UNDEF: 0)
    9488:	21000701 	tstcs	r0, r1, lsl #14
    948c:	00001fad 	andeq	r1, r0, sp, lsr #31
    9490:	590fb50d 	stmdbpl	pc, {r0, r2, r3, r8, sl, ip, sp, pc}	; <UNPREDICTABLE>
    9494:	01000000 	mrseq	r0, (UNDEF: 0)
    9498:	21000601 	tstcs	r0, r1, lsl #12
    949c:	00002555 	andeq	r2, r0, r5, asr r5
    94a0:	590fb70d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, ip, sp, pc}	; <UNPREDICTABLE>
    94a4:	01000000 	mrseq	r0, (UNDEF: 0)
    94a8:	21000501 	tstcs	r0, r1, lsl #10
    94ac:	000026ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    94b0:	590fb90d 	stmdbpl	pc, {r0, r2, r3, r8, fp, ip, sp, pc}	; <UNPREDICTABLE>
    94b4:	01000000 	mrseq	r0, (UNDEF: 0)
    94b8:	21000401 	tstcs	r0, r1, lsl #8
    94bc:	00001f38 	andeq	r1, r0, r8, lsr pc
    94c0:	590fbb0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, fp, ip, sp, pc}	; <UNPREDICTABLE>
    94c4:	01000000 	mrseq	r0, (UNDEF: 0)
    94c8:	21000301 	tstcs	r0, r1, lsl #6
    94cc:	00002694 	muleq	r0, r4, r6
    94d0:	590fbd0d 	stmdbpl	pc, {r0, r2, r3, r8, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    94d4:	01000000 	mrseq	r0, (UNDEF: 0)
    94d8:	21000201 	tstcs	r0, r1, lsl #4
    94dc:	000021d8 	ldrdeq	r2, [r0], -r8
    94e0:	590fbf0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    94e4:	01000000 	mrseq	r0, (UNDEF: 0)
    94e8:	21000101 	tstcs	r0, r1, lsl #2
    94ec:	00002560 	andeq	r2, r0, r0, ror #10
    94f0:	590fc10d 	stmdbpl	pc, {r0, r2, r3, r8, lr, pc}	; <UNPREDICTABLE>
    94f4:	01000000 	mrseq	r0, (UNDEF: 0)
    94f8:	00000001 	andeq	r0, r0, r1
    94fc:	c40d010c 	strgt	r0, [sp], #-268	; 0xfffffef4
    9500:	00131904 	andseq	r1, r3, r4, lsl #18
    9504:	22962100 	addscs	r2, r6, #0, 2
    9508:	c50d0000 	strgt	r0, [sp, #-0]
    950c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9510:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9514:	20cf2100 	sbccs	r2, pc, r0, lsl #2
    9518:	c60d0000 	strgt	r0, [sp], -r0
    951c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9520:	06010100 	streq	r0, [r1], -r0, lsl #2
    9524:	220a2100 	andcs	r2, sl, #0, 2
    9528:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    952c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9530:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    9534:	21732100 	cmncs	r3, r0, lsl #2
    9538:	c90d0000 	stmdbgt	sp, {}	; <UNPREDICTABLE>
    953c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9540:	03010100 	movweq	r0, #4352	; 0x1100
    9544:	24e92100 	strbtcs	r2, [r9], #256	; 0x100
    9548:	ca0d0000 	bgt	349550 <__ccfg+0x3295a8>
    954c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9550:	02010100 	andeq	r0, r1, #0, 2
    9554:	201f2100 	andscs	r2, pc, r0, lsl #2
    9558:	cb0d0000 	blgt	349560 <__ccfg+0x3295b8>
    955c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9560:	01010100 	mrseq	r0, (UNDEF: 17)
    9564:	1f1d2100 	svcne	0x001d2100
    9568:	cc0d0000 	stcgt	0, cr0, [sp], {-0}
    956c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9570:	00010100 	andeq	r0, r1, r0, lsl #2
    9574:	010c0000 	mrseq	r0, (UNDEF: 12)
    9578:	6304d40d 	movwvs	sp, #17421	; 0x440d
    957c:	21000013 	tstcs	r0, r3, lsl r0
    9580:	00002769 	andeq	r2, r0, r9, ror #14
    9584:	590fd50d 	stmdbpl	pc, {r0, r2, r3, r8, sl, ip, lr, pc}	; <UNPREDICTABLE>
    9588:	01000000 	mrseq	r0, (UNDEF: 0)
    958c:	21000404 	tstcs	r0, r4, lsl #8
    9590:	00002107 	andeq	r2, r0, r7, lsl #2
    9594:	590fd60d 	stmdbpl	pc, {r0, r2, r3, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
    9598:	01000000 	mrseq	r0, (UNDEF: 0)
    959c:	21000301 	tstcs	r0, r1, lsl #6
    95a0:	000021c7 	andeq	r2, r0, r7, asr #3
    95a4:	590fd80d 	stmdbpl	pc, {r0, r2, r3, fp, ip, lr, pc}	; <UNPREDICTABLE>
    95a8:	01000000 	mrseq	r0, (UNDEF: 0)
    95ac:	21000102 	tstcs	r0, r2, lsl #2
    95b0:	00001f82 	andeq	r1, r0, r2, lsl #31
    95b4:	590fd90d 	stmdbpl	pc, {r0, r2, r3, r8, fp, ip, lr, pc}	; <UNPREDICTABLE>
    95b8:	01000000 	mrseq	r0, (UNDEF: 0)
    95bc:	00000001 	andeq	r0, r0, r1
    95c0:	840d011b 	strhi	r0, [sp], #-283	; 0xfffffee5
    95c4:	13b20401 			; <UNDEFINED> instruction: 0x13b20401
    95c8:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    95cc:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    95d0:	590f0185 	stmdbpl	pc, {r0, r2, r7, r8}	; <UNPREDICTABLE>
    95d4:	01000000 	mrseq	r0, (UNDEF: 0)
    95d8:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    95dc:	00002107 	andeq	r2, r0, r7, lsl #2
    95e0:	0f01860d 	svceq	0x0001860d
    95e4:	00000059 	andeq	r0, r0, r9, asr r0
    95e8:	00030101 	andeq	r0, r3, r1, lsl #2
    95ec:	0021c722 	eoreq	ip, r1, r2, lsr #14
    95f0:	01880d00 	orreq	r0, r8, r0, lsl #26
    95f4:	0000590f 	andeq	r5, r0, pc, lsl #18
    95f8:	01020100 	mrseq	r0, (UNDEF: 18)
    95fc:	1f822200 	svcne	0x00822200
    9600:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    9604:	00590f01 	subseq	r0, r9, r1, lsl #30
    9608:	01010000 	mrseq	r0, (UNDEF: 1)
    960c:	1b000000 	blne	9614 <__exidx_end+0x39d4>
    9610:	018c0d01 	orreq	r0, ip, r1, lsl #26
    9614:	0013df04 	andseq	sp, r3, r4, lsl #30
    9618:	25e42200 	strbcs	r2, [r4, #512]!	; 0x200
    961c:	8d0d0000 	stchi	0, cr0, [sp, #-0]
    9620:	00590f01 	subseq	r0, r9, r1, lsl #30
    9624:	04010000 	streq	r0, [r1], #-0
    9628:	38220004 	stmdacc	r2!, {r2}
    962c:	0d000027 	stceq	0, cr0, [r0, #-156]	; 0xffffff64
    9630:	590f018e 	stmdbpl	pc, {r1, r2, r3, r7, r8}	; <UNPREDICTABLE>
    9634:	01000000 	mrseq	r0, (UNDEF: 0)
    9638:	00000004 	andeq	r0, r0, r4
    963c:	900d011b 	andls	r0, sp, fp, lsl r1
    9640:	140c0401 	strne	r0, [ip], #-1025	; 0xfffffbff
    9644:	1e220000 	cdpne	0, 2, cr0, cr2, cr0, {0}
    9648:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    964c:	590f0191 	stmdbpl	pc, {r0, r4, r7, r8}	; <UNPREDICTABLE>
    9650:	01000000 	mrseq	r0, (UNDEF: 0)
    9654:	22000701 	andcs	r0, r0, #262144	; 0x40000
    9658:	0000240c 	andeq	r2, r0, ip, lsl #8
    965c:	0f01930d 	svceq	0x0001930d
    9660:	00000059 	andeq	r0, r0, r9, asr r0
    9664:	00060101 	andeq	r0, r6, r1, lsl #2
    9668:	0d011b00 	vstreq	d1, [r1, #-0]
    966c:	7d040197 	stfvcs	f0, [r4, #-604]	; 0xfffffda4
    9670:	22000014 	andcs	r0, r0, #20
    9674:	000020c6 	andeq	r2, r0, r6, asr #1
    9678:	0f01980d 	svceq	0x0001980d
    967c:	00000059 	andeq	r0, r0, r9, asr r0
    9680:	00070101 	andeq	r0, r7, r1, lsl #2
    9684:	00231522 	eoreq	r1, r3, r2, lsr #10
    9688:	01990d00 	orrseq	r0, r9, r0, lsl #26
    968c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9690:	06010100 	streq	r0, [r1], -r0, lsl #2
    9694:	117d2200 	cmnne	sp, r0, lsl #4
    9698:	9a0d0000 	bls	3496a0 <__ccfg+0x3296f8>
    969c:	00590f01 	subseq	r0, r9, r1, lsl #30
    96a0:	01010000 	mrseq	r0, (UNDEF: 1)
    96a4:	c5220005 	strgt	r0, [r2, #-5]!
    96a8:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    96ac:	590f019c 	stmdbpl	pc, {r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    96b0:	01000000 	mrseq	r0, (UNDEF: 0)
    96b4:	22000401 	andcs	r0, r0, #16777216	; 0x1000000
    96b8:	0000264b 	andeq	r2, r0, fp, asr #12
    96bc:	0f019f0d 	svceq	0x00019f0d
    96c0:	00000059 	andeq	r0, r0, r9, asr r0
    96c4:	00030101 	andeq	r0, r3, r1, lsl #2
    96c8:	00239f22 	eoreq	r9, r3, r2, lsr #30
    96cc:	01a10d00 			; <UNDEFINED> instruction: 0x01a10d00
    96d0:	0000590f 	andeq	r5, r0, pc, lsl #18
    96d4:	02010100 	andeq	r0, r1, #0, 2
    96d8:	011b0000 	tsteq	fp, r0
    96dc:	0401aa0d 	streq	sl, [r1], #-2573	; 0xfffff5f3
    96e0:	000014aa 	andeq	r1, r0, sl, lsr #9
    96e4:	00210f22 	eoreq	r0, r1, r2, lsr #30
    96e8:	01ab0d00 			; <UNDEFINED> instruction: 0x01ab0d00
    96ec:	0000590f 	andeq	r5, r0, pc, lsl #18
    96f0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    96f4:	21ef2200 	mvncs	r2, r0, lsl #4
    96f8:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    96fc:	00590f01 	subseq	r0, r9, r1, lsl #30
    9700:	04010000 	streq	r0, [r1], #-0
    9704:	1b000000 	blne	970c <__exidx_end+0x3acc>
    9708:	01b00d01 	lslseq	r0, r1, #26
    970c:	0014f904 	andseq	pc, r4, r4, lsl #18
    9710:	27692200 	strbcs	r2, [r9, -r0, lsl #4]!
    9714:	b10d0000 	mrslt	r0, (UNDEF: 13)
    9718:	00590f01 	subseq	r0, r9, r1, lsl #30
    971c:	04010000 	streq	r0, [r1], #-0
    9720:	07220004 	streq	r0, [r2, -r4]!
    9724:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9728:	590f01b2 	stmdbpl	pc, {r1, r4, r5, r7, r8}	; <UNPREDICTABLE>
    972c:	01000000 	mrseq	r0, (UNDEF: 0)
    9730:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    9734:	000021c7 	andeq	r2, r0, r7, asr #3
    9738:	0f01b40d 	svceq	0x0001b40d
    973c:	00000059 	andeq	r0, r0, r9, asr r0
    9740:	00010201 	andeq	r0, r1, r1, lsl #4
    9744:	001f8222 	andseq	r8, pc, r2, lsr #4
    9748:	01b50d00 			; <UNDEFINED> instruction: 0x01b50d00
    974c:	0000590f 	andeq	r5, r0, pc, lsl #18
    9750:	00010100 	andeq	r0, r1, r0, lsl #2
    9754:	011b0000 	tsteq	fp, r0
    9758:	0402220d 	streq	r2, [r2], #-525	; 0xfffffdf3
    975c:	00001548 	andeq	r1, r0, r8, asr #10
    9760:	00276922 	eoreq	r6, r7, r2, lsr #18
    9764:	02230d00 	eoreq	r0, r3, #0, 26
    9768:	0000590f 	andeq	r5, r0, pc, lsl #18
    976c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    9770:	21072200 	mrscs	r2, (UNDEF: 39)
    9774:	240d0000 	strcs	r0, [sp], #-0
    9778:	00590f02 	subseq	r0, r9, r2, lsl #30
    977c:	01010000 	mrseq	r0, (UNDEF: 1)
    9780:	c7220003 	strgt	r0, [r2, -r3]!
    9784:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    9788:	590f0226 	stmdbpl	pc, {r1, r2, r5, r9}	; <UNPREDICTABLE>
    978c:	01000000 	mrseq	r0, (UNDEF: 0)
    9790:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    9794:	00001f82 	andeq	r1, r0, r2, lsl #31
    9798:	0f02270d 	svceq	0x0002270d
    979c:	00000059 	andeq	r0, r0, r9, asr r0
    97a0:	00000101 	andeq	r0, r0, r1, lsl #2
    97a4:	0d011b00 	vstreq	d1, [r1, #-0]
    97a8:	7504022a 	strvc	r0, [r4, #-554]	; 0xfffffdd6
    97ac:	22000015 	andcs	r0, r0, #21
    97b0:	000025e4 	andeq	r2, r0, r4, ror #11
    97b4:	0f022b0d 	svceq	0x00022b0d
    97b8:	00000059 	andeq	r0, r0, r9, asr r0
    97bc:	00040401 	andeq	r0, r4, r1, lsl #8
    97c0:	00273822 	eoreq	r3, r7, r2, lsr #16
    97c4:	022c0d00 	eoreq	r0, ip, #0, 26
    97c8:	0000590f 	andeq	r5, r0, pc, lsl #18
    97cc:	00040100 	andeq	r0, r4, r0, lsl #2
    97d0:	021b0000 	andseq	r0, fp, #0
    97d4:	04022e0d 	streq	r2, [r2], #-3597	; 0xfffff1f3
    97d8:	000015a2 	andeq	r1, r0, r2, lsr #11
    97dc:	00221f22 	eoreq	r1, r2, r2, lsr #30
    97e0:	022f0d00 	eoreq	r0, pc, #0, 26
    97e4:	00006c10 	andeq	r6, r0, r0, lsl ip
    97e8:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    97ec:	271b2200 	ldrcs	r2, [fp, -r0, lsl #4]
    97f0:	320d0000 	andcc	r0, sp, #0
    97f4:	006c1002 	rsbeq	r1, ip, r2
    97f8:	0d020000 	stceq	0, cr0, [r2, #-0]
    97fc:	1b000000 	blne	9804 <__exidx_end+0x3bc4>
    9800:	02340d04 	eorseq	r0, r4, #4, 26	; 0x100
    9804:	0015cf04 	andseq	ip, r5, r4, lsl #30
    9808:	23b42200 			; <UNDEFINED> instruction: 0x23b42200
    980c:	350d0000 	strcc	r0, [sp, #-0]
    9810:	007f1002 	rsbseq	r1, pc, r2
    9814:	04040000 	streq	r0, [r4], #-0
    9818:	c422001c 	strtgt	r0, [r2], #-28	; 0xffffffe4
    981c:	0d000024 	stceq	0, cr0, [r0, #-144]	; 0xffffff70
    9820:	7f100237 	svcvc	0x00100237
    9824:	04000000 	streq	r0, [r0], #-0
    9828:	00000315 	andeq	r0, r0, r5, lsl r3
    982c:	3a0d011b 	bcc	349ca0 <__ccfg+0x329cf8>
    9830:	15fc0402 	ldrbne	r0, [ip, #1026]!	; 0x402
    9834:	10220000 	eorne	r0, r2, r0
    9838:	0d000026 	stceq	0, cr0, [r0, #-152]	; 0xffffff68
    983c:	590f023b 	stmdbpl	pc, {r0, r1, r3, r4, r5, r9}	; <UNPREDICTABLE>
    9840:	01000000 	mrseq	r0, (UNDEF: 0)
    9844:	22000206 	andcs	r0, r0, #1610612736	; 0x60000000
    9848:	00001fda 	ldrdeq	r1, [r0], -sl
    984c:	0f023d0d 	svceq	0x00023d0d
    9850:	00000059 	andeq	r0, r0, r9, asr r0
    9854:	00000201 	andeq	r0, r0, r1, lsl #4
    9858:	0d021b00 	vstreq	d1, [r2, #-0]
    985c:	5c040242 	sfmpl	f0, 4, [r4], {66}	; 0x42
    9860:	22000016 	andcs	r0, r0, #22
    9864:	000023bd 			; <UNDEFINED> instruction: 0x000023bd
    9868:	1002430d 	andne	r4, r2, sp, lsl #6
    986c:	0000006c 	andeq	r0, r0, ip, rrx
    9870:	000a0602 	andeq	r0, sl, r2, lsl #12
    9874:	00225922 	eoreq	r5, r2, r2, lsr #18
    9878:	02440d00 	subeq	r0, r4, #0, 26
    987c:	00006c10 	andeq	r6, r0, r0, lsl ip
    9880:	09010200 	stmdbeq	r1, {r9}
    9884:	24252200 	strtcs	r2, [r5], #-512	; 0xfffffe00
    9888:	460d0000 	strmi	r0, [sp], -r0
    988c:	006c1002 	rsbeq	r1, ip, r2
    9890:	01020000 	mrseq	r0, (UNDEF: 2)
    9894:	c2220008 	eorgt	r0, r2, #8
    9898:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    989c:	6c100248 	lfmvs	f0, 4, [r0], {72}	; 0x48
    98a0:	02000000 	andeq	r0, r0, #0
    98a4:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    98a8:	00001f65 	andeq	r1, r0, r5, ror #30
    98ac:	10024d0d 	andne	r4, r2, sp, lsl #26
    98b0:	0000006c 	andeq	r0, r0, ip, rrx
    98b4:	00000302 	andeq	r0, r0, r2, lsl #6
    98b8:	0d021b00 	vstreq	d1, [r2, #-0]
    98bc:	ab040256 	blge	10a21c <__ccfg+0xea274>
    98c0:	22000016 	andcs	r0, r0, #22
    98c4:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
    98c8:	1002570d 	andne	r5, r2, sp, lsl #14
    98cc:	0000006c 	andeq	r0, r0, ip, rrx
    98d0:	000d0302 	andeq	r0, sp, r2, lsl #6
    98d4:	00215922 	eoreq	r5, r1, r2, lsr #18
    98d8:	025d0d00 	subseq	r0, sp, #0, 26
    98dc:	00006c10 	andeq	r6, r0, r0, lsl ip
    98e0:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    98e4:	20f92200 	rscscs	r2, r9, r0, lsl #4
    98e8:	5f0d0000 	svcpl	0x000d0000
    98ec:	006c1002 	rsbeq	r1, ip, r2
    98f0:	06020000 	streq	r0, [r2], -r0
    98f4:	f8220006 			; <UNDEFINED> instruction: 0xf8220006
    98f8:	0d000023 	stceq	0, cr0, [r0, #-140]	; 0xffffff74
    98fc:	6c100266 	lfmvs	f0, 4, [r0], {102}	; 0x66
    9900:	02000000 	andeq	r0, r0, #0
    9904:	00000501 	andeq	r0, r0, r1, lsl #10
    9908:	00258002 	eoreq	r8, r5, r2
    990c:	343c0e00 	ldrtcc	r0, [ip], #-3584	; 0xfffff200
    9910:	000016b7 			; <UNDEFINED> instruction: 0x000016b7
    9914:	0025690f 	eoreq	r6, r5, pc, lsl #18
    9918:	5e0e0c00 	cdppl	12, 0, cr0, cr14, cr0, {0}
    991c:	00170615 	andseq	r0, r7, r5, lsl r6
    9920:	20300d00 	eorscs	r0, r0, r0, lsl #26
    9924:	5f0e0000 	svcpl	0x000e0000
    9928:	0009840d 	andeq	r8, r9, sp, lsl #8
    992c:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    9930:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    9934:	00590c60 	subseq	r0, r9, r0, ror #24
    9938:	0d040000 	stceq	0, cr0, [r4, #-0]
    993c:	0000147d 	andeq	r1, r0, sp, ror r4
    9940:	06066e0e 	streq	r6, [r6], -lr, lsl #28
    9944:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9948:	0018f30d 	andseq	pc, r8, sp, lsl #6
    994c:	0d6f0e00 	stcleq	14, cr0, [pc, #-0]	; 9954 <__exidx_end+0x3d14>
    9950:	0000006c 	andeq	r0, r0, ip, rrx
    9954:	47540d06 	ldrbmi	r0, [r4, -r6, lsl #26]
    9958:	710e0000 	mrsvc	r0, (UNDEF: 14)
    995c:	0000590c 	andeq	r5, r0, ip, lsl #18
    9960:	0c000800 	stceq	8, cr0, [r0], {-0}
    9964:	04610e01 	strbteq	r0, [r1], #-3585	; 0xfffff1ff
    9968:	00001740 	andeq	r1, r0, r0, asr #14
    996c:	00536621 	subseq	r6, r3, r1, lsr #12
    9970:	0f620e00 	svceq	0x00620e00
    9974:	00000059 	andeq	r0, r0, r9, asr r0
    9978:	00060201 	andeq	r0, r6, r1, lsl #4
    997c:	00254121 	eoreq	r4, r5, r1, lsr #2
    9980:	0f670e00 	svceq	0x00670e00
    9984:	00000059 	andeq	r0, r0, r9, asr r0
    9988:	00040201 	andeq	r0, r4, r1, lsl #4
    998c:	001ff921 	andseq	pc, pc, r1, lsr #18
    9990:	0f6c0e00 	svceq	0x006c0e00
    9994:	00000059 	andeq	r0, r0, r9, asr r0
    9998:	00000401 	andeq	r0, r0, r1, lsl #8
    999c:	02100c00 	andseq	r0, r0, #0, 24
    99a0:	177e0948 	ldrbne	r0, [lr, -r8, asr #18]!
    99a4:	7f0d0000 	svcvc	0x000d0000
    99a8:	02000021 	andeq	r0, r0, #33	; 0x21
    99ac:	007f0d49 	rsbseq	r0, pc, r9, asr #26
    99b0:	0d000000 	stceq	0, cr0, [r0, #-0]
    99b4:	000020e0 	andeq	r2, r0, r0, ror #1
    99b8:	7f0d4a02 	svcvc	0x000d4a02
    99bc:	04000000 	streq	r0, [r0], #-0
    99c0:	00252b0d 	eoreq	r2, r5, sp, lsl #22
    99c4:	0d4b0200 	sfmeq	f0, 2, [fp, #-0]
    99c8:	0000007f 	andeq	r0, r0, pc, ror r0
    99cc:	267e0d08 	ldrbtcs	r0, [lr], -r8, lsl #26
    99d0:	4c020000 	stcmi	0, cr0, [r2], {-0}
    99d4:	00007f0d 	andeq	r7, r0, sp, lsl #30
    99d8:	02000c00 	andeq	r0, r0, #0, 24
    99dc:	00001f8b 	andeq	r1, r0, fp, lsl #31
    99e0:	40034d02 	andmi	r4, r3, r2, lsl #26
    99e4:	0a000017 	beq	9a48 <__exidx_end+0x3e08>
    99e8:	0000008b 	andeq	r0, r0, fp, lsl #1
    99ec:	0000179a 	muleq	r0, sl, r7
    99f0:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    99f4:	0400a200 	streq	sl, [r0], #-512	; 0xfffffe00
    99f8:	0000178a 	andeq	r1, r0, sl, lsl #15
    99fc:	0022c323 	eoreq	ip, r2, r3, lsr #6
    9a00:	10490400 	subne	r0, r9, r0, lsl #8
    9a04:	0000179a 	muleq	r0, sl, r7
    9a08:	59700305 	ldmdbpl	r0!, {r0, r2, r8, r9}^
    9a0c:	8b0a0000 	blhi	289a14 <__ccfg+0x269a6c>
    9a10:	c2000000 	andgt	r0, r0, #0
    9a14:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    9a18:	000000aa 	andeq	r0, r0, sl, lsr #1
    9a1c:	040001ac 	streq	r0, [r0], #-428	; 0xfffffe54
    9a20:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    9a24:	00234c23 	eoreq	r4, r3, r3, lsr #24
    9a28:	103a0500 	eorsne	r0, sl, r0, lsl #10
    9a2c:	000017c2 	andeq	r1, r0, r2, asr #15
    9a30:	52bc0305 	adcspl	r0, ip, #335544320	; 0x14000000
    9a34:	fb020000 	blx	89a3e <__ccfg+0x69a96>
    9a38:	0f000028 	svceq	0x00000028
    9a3c:	006c1227 	rsbeq	r1, ip, r7, lsr #4
    9a40:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    9a44:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9a48:	000017d9 	ldrdeq	r1, [r0], -r9
    9a4c:	001dc202 	andseq	ip, sp, r2, lsl #4
    9a50:	122b0f00 	eorne	r0, fp, #0, 30
    9a54:	00000059 	andeq	r0, r0, r9, asr r0
    9a58:	0017ef05 	andseq	lr, r7, r5, lsl #30
    9a5c:	294d0200 	stmdbcs	sp, {r9}^
    9a60:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    9a64:	00007f12 	andeq	r7, r0, r2, lsl pc
    9a68:	18000400 	stmdane	r0, {sl}
    9a6c:	46020000 	strmi	r0, [r2], -r0
    9a70:	0f000006 	svceq	0x00000006
    9a74:	007f122d 	rsbseq	r1, pc, sp, lsr #4
    9a78:	b4020000 	strlt	r0, [r2], #-0
    9a7c:	0f00000b 	svceq	0x0000000b
    9a80:	1829102e 	stmdane	r9!, {r1, r2, r3, r5, ip}
    9a84:	04110000 	ldreq	r0, [r1], #-0
    9a88:	000017d9 	ldrdeq	r1, [r0], -r9
    9a8c:	320f080c 	andcc	r0, pc, #12, 16	; 0xc0000
    9a90:	0018bd09 	andseq	fp, r8, r9, lsl #26
    9a94:	00342100 	eorseq	r2, r4, r0, lsl #2
    9a98:	340f0000 	strcc	r0, [pc], #-0	; 9aa0 <__exidx_end+0x3e60>
    9a9c:	0017ef07 	andseq	lr, r7, r7, lsl #30
    9aa0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9aa4:	064c2100 	strbeq	r2, [ip], -r0, lsl #2
    9aa8:	350f0000 	strcc	r0, [pc, #-0]	; 9ab0 <__exidx_end+0x3e70>
    9aac:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9ab0:	06010100 	streq	r0, [r1], -r0, lsl #2
    9ab4:	02e72100 	rsceq	r2, r7, #0, 2
    9ab8:	360f0000 	strcc	r0, [pc], -r0
    9abc:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9ac0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    9ac4:	06b72100 	ldrteq	r2, [r7], r0, lsl #2
    9ac8:	370f0000 	strcc	r0, [pc, -r0]
    9acc:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9ad0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    9ad4:	0a9f2100 	beq	fe7d1edc <_estack+0xde7ccedc>
    9ad8:	380f0000 	stmdacc	pc, {}	; <UNPREDICTABLE>
    9adc:	0017ef03 	andseq	lr, r7, r3, lsl #30
    9ae0:	00040100 	andeq	r0, r4, r0, lsl #2
    9ae4:	065b0d00 	ldrbeq	r0, [fp], -r0, lsl #26
    9ae8:	3a0f0000 	bcc	3c9af0 <__ccfg+0x3a9b48>
    9aec:	0017ef07 	andseq	lr, r7, r7, lsl #30
    9af0:	fb0d0100 	blx	349efa <__ccfg+0x329f52>
    9af4:	0f000008 	svceq	0x00000008
    9af8:	17ef033c 			; <UNDEFINED> instruction: 0x17ef033c
    9afc:	0d020000 	stceq	0, cr0, [r2, #-0]
    9b00:	00000f3a 	andeq	r0, r0, sl, lsr pc
    9b04:	ef033d0f 	svc	0x00033d0f
    9b08:	03000017 	movweq	r0, #23
    9b0c:	0009130d 	andeq	r1, r9, sp, lsl #6
    9b10:	083f0f00 	ldmdaeq	pc!, {r8, r9, sl, fp}	; <UNPREDICTABLE>
    9b14:	00001800 	andeq	r1, r0, r0, lsl #16
    9b18:	1d020004 	stcne	0, cr0, [r2, #-16]
    9b1c:	0f000003 	svceq	0x00000003
    9b20:	182f0341 	stmdane	pc!, {r0, r6, r8, r9}	; <UNPREDICTABLE>
    9b24:	bd050000 	stclt	0, cr0, [r5, #-0]
    9b28:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
    9b2c:	000006be 			; <UNDEFINED> instruction: 0x000006be
    9b30:	c91a430f 	ldmdbgt	sl, {r0, r1, r2, r3, r8, r9, lr}
    9b34:	01000018 	tsteq	r0, r8, lsl r0
    9b38:	01a02501 	lsleq	r2, r1, #10
    9b3c:	450f0000 	strmi	r0, [pc, #-0]	; 9b44 <__exidx_end+0x3f04>
    9b40:	0005eb0e 	andeq	lr, r5, lr, lsl #22
    9b44:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9b48:	00000326 	andeq	r0, r0, r6, lsr #6
    9b4c:	eb1e450f 	bl	79af90 <__ccfg+0x77afe8>
    9b50:	01000005 	tsteq	r0, r5
    9b54:	10080c01 	andne	r0, r8, r1, lsl #24
    9b58:	1929098f 	stmdbne	r9!, {r0, r1, r2, r3, r7, r8, fp}
    9b5c:	d80d0000 	stmdale	sp, {}	; <UNPREDICTABLE>
    9b60:	1000000c 	andne	r0, r0, ip
    9b64:	007f0b90 			; <UNDEFINED> instruction: 0x007f0b90
    9b68:	0d000000 	stceq	0, cr0, [r0, #-0]
    9b6c:	00001075 	andeq	r1, r0, r5, ror r0
    9b70:	d9089110 	stmdble	r8, {r4, r8, ip, pc}
    9b74:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    9b78:	0001c50d 	andeq	ip, r1, sp, lsl #10
    9b7c:	10921000 	addsne	r1, r2, r0
    9b80:	000017fb 	strdeq	r1, [r0], -fp
    9b84:	cc020006 	stcgt	0, cr0, [r2], {6}
    9b88:	1000000c 	andne	r0, r0, ip
    9b8c:	18f80393 	ldmne	r8!, {r0, r1, r4, r7, r8, r9}^
    9b90:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    9b94:	40000019 	andmi	r0, r0, r9, lsl r0
    9b98:	26000019 			; <UNDEFINED> instruction: 0x26000019
    9b9c:	093d2500 	ldmdbeq	sp!, {r8, sl, sp}
    9ba0:	99100000 	ldmdbls	r0, {}	; <UNPREDICTABLE>
    9ba4:	0019350f 	andseq	r3, r9, pc, lsl #10
    9ba8:	0c010100 	stfeqs	f0, [r1], {-0}
    9bac:	09911101 	ldmibeq	r1, {r0, r8, ip}
    9bb0:	00001978 	andeq	r1, r0, r8, ror r9
    9bb4:	00091a21 	andeq	r1, r9, r1, lsr #20
    9bb8:	07931100 	ldreq	r1, [r3, r0, lsl #2]
    9bbc:	000017ef 	andeq	r1, r0, pc, ror #15
    9bc0:	00010701 	andeq	r0, r1, r1, lsl #14
    9bc4:	0005cc21 	andeq	ip, r5, r1, lsr #24
    9bc8:	03941100 	orrseq	r1, r4, #0, 2
    9bcc:	000017ef 	andeq	r1, r0, pc, ror #15
    9bd0:	00000101 	andeq	r0, r0, r1, lsl #2
    9bd4:	0aab0200 	beq	feaca3dc <_estack+0xdeac53dc>
    9bd8:	96110000 	ldrls	r0, [r1], -r0
    9bdc:	00194e03 	andseq	r4, r9, r3, lsl #28
    9be0:	19780400 	ldmdbne	r8!, {sl}^
    9be4:	840a0000 	strhi	r0, [sl], #-0
    9be8:	94000019 	strls	r0, [r0], #-25	; 0xffffffe7
    9bec:	26000019 			; <UNDEFINED> instruction: 0x26000019
    9bf0:	19890400 	stmibne	r9, {sl}
    9bf4:	aa250000 	bge	949bfc <__ccfg+0x929c54>
    9bf8:	11000003 	tstne	r0, r3
    9bfc:	1994179c 	ldmibne	r4, {r2, r3, r4, r7, r8, r9, sl, ip}
    9c00:	01010000 	mrseq	r0, (UNDEF: 1)
    9c04:	0017e50a 	andseq	lr, r7, sl, lsl #10
    9c08:	0019b200 	andseq	fp, r9, r0, lsl #4
    9c0c:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    9c10:	000019a7 	andeq	r1, r0, r7, lsr #19
    9c14:	00060e25 	andeq	r0, r6, r5, lsr #28
    9c18:	13061200 	movwne	r1, #25088	; 0x6200
    9c1c:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    9c20:	dd250101 	stfles	f0, [r5, #-4]!
    9c24:	10000008 	andne	r0, r0, r8
    9c28:	18000ec3 	stmdane	r0, {r0, r1, r6, r7, r9, sl, fp}
    9c2c:	01010000 	mrseq	r0, (UNDEF: 1)
    9c30:	000c7207 	andeq	r7, ip, r7, lsl #4
    9c34:	016e1300 	cmneq	lr, r0, lsl #6
    9c38:	0019e010 	andseq	lr, r9, r0, lsl r0
    9c3c:	e6041100 	str	r1, [r4], -r0, lsl #2
    9c40:	1f000019 	svcne	0x00000019
    9c44:	0019f201 	andseq	pc, r9, r1, lsl #4
    9c48:	17d91600 	ldrbne	r1, [r9, r0, lsl #12]
    9c4c:	0a000000 	beq	9c54 <__exidx_end+0x4014>
    9c50:	000005f8 	strdeq	r0, [r0], -r8
    9c54:	000019fd 	strdeq	r1, [r0], -sp
    9c58:	f2040026 	vhadd.s8	d0, d4, d22
    9c5c:	20000019 	andcs	r0, r0, r9, lsl r0
    9c60:	000009e6 	andeq	r0, r0, r6, ror #19
    9c64:	16017f13 			; <UNDEFINED> instruction: 0x16017f13
    9c68:	000019fd 	strdeq	r1, [r0], -sp
    9c6c:	96200101 	strtls	r0, [r0], -r1, lsl #2
    9c70:	13000003 	movwne	r0, #3
    9c74:	0c140182 	ldfeqs	f0, [r4], {130}	; 0x82
    9c78:	01000018 	tsteq	r0, r8, lsl r0
    9c7c:	036e2001 	cmneq	lr, #1
    9c80:	d8130000 	ldmdale	r3, {}	; <UNPREDICTABLE>
    9c84:	18000e02 	stmdane	r0, {r1, r9, sl, fp}
    9c88:	01010000 	mrseq	r0, (UNDEF: 1)
    9c8c:	0313081b 	tsteq	r3, #1769472	; 0x1b0000
    9c90:	1a560903 	bne	158c0a4 <__ccfg+0x156c0fc>
    9c94:	a1180000 	tstge	r8, r0
    9c98:	1300003c 	movwne	r0, #60	; 0x3c
    9c9c:	d9070307 	stmdble	r7, {r0, r1, r2, r8, r9}
    9ca0:	00000017 	andeq	r0, r0, r7, lsl r0
    9ca4:	000fcd18 	andeq	ip, pc, r8, lsl sp	; <UNPREDICTABLE>
    9ca8:	03081300 	movweq	r1, #33536	; 0x8300
    9cac:	00181108 	andseq	r1, r8, r8, lsl #2
    9cb0:	07000400 	streq	r0, [r0, -r0, lsl #8]
    9cb4:	00000a09 	andeq	r0, r0, r9, lsl #20
    9cb8:	03030913 	movweq	r0, #14611	; 0x3913
    9cbc:	00001a2f 	andeq	r1, r0, pc, lsr #20
    9cc0:	0000291a 	andeq	r2, r0, sl, lsl r9
    9cc4:	0b133000 	bleq	4d5ccc <__ccfg+0x4b5d24>
    9cc8:	1ac60803 	bne	ff18bcdc <_estack+0xdf186cdc>
    9ccc:	24180000 	ldrcs	r0, [r8], #-0
    9cd0:	1300001f 	movwne	r0, #31
    9cd4:	d9080314 	stmdble	r8, {r2, r4, r8, r9}
    9cd8:	00000017 	andeq	r0, r0, r7, lsl r0
    9cdc:	000be718 	andeq	lr, fp, r8, lsl r7
    9ce0:	03151300 	tsteq	r5, #0, 6
    9ce4:	0017d908 	andseq	sp, r7, r8, lsl #18
    9ce8:	8e180200 	cdphi	2, 1, cr0, cr8, cr0, {0}
    9cec:	1300004c 	movwne	r0, #76	; 0x4c
    9cf0:	d30b0316 	movwle	r0, #45846	; 0xb316
    9cf4:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    9cf8:	00475418 	subeq	r5, r7, r8, lsl r4
    9cfc:	03171300 	tsteq	r7, #0, 6
    9d00:	00181109 	andseq	r1, r8, r9, lsl #2
    9d04:	0f180800 	svceq	0x00180800
    9d08:	13000000 	movwne	r0, #0
    9d0c:	c60f0318 			; <UNDEFINED> instruction: 0xc60f0318
    9d10:	0c00001a 	stceq	0, cr0, [r0], {26}
    9d14:	00095d18 	andeq	r5, r9, r8, lsl sp
    9d18:	03191300 	tsteq	r9, #0, 6
    9d1c:	001ad615 	andseq	sp, sl, r5, lsl r6
    9d20:	0a002c00 	beq	14d28 <__exidx_end+0xf0e8>
    9d24:	00001a56 	andeq	r1, r0, r6, asr sl
    9d28:	00001ad6 	ldrdeq	r1, [r0], -r6
    9d2c:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    9d30:	11000300 	mrsne	r0, LR_irq
    9d34:	001a6304 	andseq	r6, sl, r4, lsl #6
    9d38:	0bdc0700 	bleq	ff70b940 <_estack+0xdf706940>
    9d3c:	1c130000 	ldcne	0, cr0, [r3], {-0}
    9d40:	1a631b03 	bne	18d0954 <__ccfg+0x18b09ac>
    9d44:	bc200000 	stclt	0, cr0, [r0], #-0
    9d48:	1300000b 	movwne	r0, #11
    9d4c:	f814031e 			; <UNDEFINED> instruction: 0xf814031e
    9d50:	0100001a 	tsteq	r0, sl, lsl r0
    9d54:	dc041101 	stfles	f1, [r4], {1}
    9d58:	2500001a 	strcs	r0, [r0, #-26]	; 0xffffffe6
    9d5c:	0000070f 	andeq	r0, r0, pc, lsl #14
    9d60:	d9131d14 	ldmdble	r3, {r2, r4, r8, sl, fp, ip}
    9d64:	01000017 	tsteq	r0, r7, lsl r0
    9d68:	02ee2501 	rsceq	r2, lr, #4194304	; 0x400000
    9d6c:	1e140000 	cdpne	0, 1, cr0, cr4, cr0, {0}
    9d70:	0017ea1a 	andseq	lr, r7, sl, lsl sl
    9d74:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9d78:	00000c69 	andeq	r0, r0, r9, ror #24
    9d7c:	ea241e14 	b	9115d4 <__ccfg+0x8f162c>
    9d80:	01000017 	tsteq	r0, r7, lsl r0
    9d84:	0c872501 	cfstr32eq	mvfx2, [r7], {1}
    9d88:	22140000 	andscs	r0, r4, #0
    9d8c:	001af814 	andseq	pc, sl, r4, lsl r8	; <UNPREDICTABLE>
    9d90:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9d94:	0000203b 	andeq	r2, r0, fp, lsr r0
    9d98:	6d273915 			; <UNDEFINED> instruction: 0x6d273915
    9d9c:	0100000f 	tsteq	r0, pc
    9da0:	23292501 			; <UNDEFINED> instruction: 0x23292501
    9da4:	3a150000 	bcc	549dac <__ccfg+0x529e04>
    9da8:	0009fe15 	andeq	pc, r9, r5, lsl lr	; <UNPREDICTABLE>
    9dac:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9db0:	00002745 	andeq	r2, r0, r5, asr #14
    9db4:	ec1a3b15 			; <UNDEFINED> instruction: 0xec1a3b15
    9db8:	0100000c 	tsteq	r0, ip
    9dbc:	25e92501 	strbcs	r2, [r9, #1281]!	; 0x501
    9dc0:	3c150000 	ldccc	0, cr0, [r5], {-0}
    9dc4:	000d881a 	andeq	r8, sp, sl, lsl r8
    9dc8:	23010100 	movwcs	r0, #4352	; 0x1100
    9dcc:	000026e6 	andeq	r2, r0, r6, ror #13
    9dd0:	a30c2401 	movwge	r2, #50177	; 0xc401
    9dd4:	05000000 	streq	r0, [r0, #-0]
    9dd8:	0005e403 	andeq	lr, r5, r3, lsl #8
    9ddc:	1f942320 	svcne	0x00942320
    9de0:	26010000 	strcs	r0, [r1], -r0
    9de4:	0017ef0d 	andseq	lr, r7, sp, lsl #30
    9de8:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
    9dec:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9df0:	00001603 	andeq	r1, r0, r3, lsl #12
    9df4:	ef032701 	svc	0x00032701
    9df8:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9dfc:	0005e003 	andeq	lr, r5, r3
    9e00:	241d2320 	ldrcs	r2, [sp], #-800	; 0xfffffce0
    9e04:	2a010000 	bcs	49e0c <__ccfg+0x29e64>
    9e08:	0017ef0d 	andseq	lr, r7, sp, lsl #30
    9e0c:	12030500 	andne	r0, r3, #0, 10
    9e10:	23200006 			; <UNDEFINED> instruction: 0x23200006
    9e14:	00002417 	andeq	r2, r0, r7, lsl r4
    9e18:	ef0d4301 	svc	0x000d4301
    9e1c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9e20:	00003a03 	andeq	r3, r0, r3, lsl #20
    9e24:	20b42320 	adcscs	r2, r4, r0, lsr #6
    9e28:	47010000 	strmi	r0, [r1, -r0]
    9e2c:	0017ef0d 	andseq	lr, r7, sp, lsl #30
    9e30:	d8030500 	stmdale	r3, {r8, sl}
    9e34:	0a200005 	beq	809e50 <__ccfg+0x7e9ea8>
    9e38:	000017e5 	andeq	r1, r0, r5, ror #15
    9e3c:	00001bea 	andeq	r1, r0, sl, ror #23
    9e40:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    9e44:	04000700 	streq	r0, [r0], #-1792	; 0xfffff900
    9e48:	00001bda 	ldrdeq	r1, [r0], -sl
    9e4c:	0024a523 	eoreq	sl, r4, r3, lsr #10
    9e50:	134e0100 	movtne	r0, #57600	; 0xe100
    9e54:	00001bea 	andeq	r1, r0, sl, ror #23
    9e58:	52aa0305 	adcpl	r0, sl, #335544320	; 0x14000000
    9e5c:	3e230000 	cdpcc	0, 2, cr0, cr3, cr0, {0}
    9e60:	01000027 	tsteq	r0, r7, lsr #32
    9e64:	17d90d52 			; <UNDEFINED> instruction: 0x17d90d52
    9e68:	03050000 	movweq	r0, #20480	; 0x5000
    9e6c:	200005e8 	andcs	r0, r0, r8, ror #11
    9e70:	0023d623 	eoreq	sp, r3, r3, lsr #12
    9e74:	03530100 	cmpeq	r3, #0, 2
    9e78:	000017d9 	ldrdeq	r1, [r0], -r9
    9e7c:	06100305 	ldreq	r0, [r0], -r5, lsl #6
    9e80:	1c232000 	stcne	0, cr2, [r3], #-0
    9e84:	01000026 	tsteq	r0, r6, lsr #32
    9e88:	17d90354 			; <UNDEFINED> instruction: 0x17d90354
    9e8c:	03050000 	movweq	r0, #20480	; 0x5000
    9e90:	200005d6 	ldrdcs	r0, [r0], -r6
    9e94:	001fd123 	andseq	sp, pc, r3, lsr #2
    9e98:	03550100 	cmpeq	r5, #0, 2
    9e9c:	000017d9 	ldrdeq	r1, [r0], -r9
    9ea0:	00380305 	eorseq	r0, r8, r5, lsl #6
    9ea4:	040c2000 	streq	r2, [ip], #-0
    9ea8:	6b095901 	blvs	2602b4 <__ccfg+0x24030c>
    9eac:	1000001c 	andne	r0, r0, ip, lsl r0
    9eb0:	01007370 	tsteq	r0, r0, ror r3
    9eb4:	17d9085a 			; <UNDEFINED> instruction: 0x17d9085a
    9eb8:	10000000 	andne	r0, r0, r0
    9ebc:	01007772 	tsteq	r0, r2, ror r7
    9ec0:	17d9045b 			; <UNDEFINED> instruction: 0x17d9045b
    9ec4:	00020000 	andeq	r0, r2, r0
    9ec8:	00236502 	eoreq	r6, r3, r2, lsl #10
    9ecc:	035c0100 	cmpeq	ip, #0, 2
    9ed0:	00001c49 	andeq	r1, r0, r9, asr #24
    9ed4:	001c6b04 	andseq	r6, ip, r4, lsl #22
    9ed8:	1c770a00 			; <UNDEFINED> instruction: 0x1c770a00
    9edc:	1c8c0000 	stcne	0, cr0, [ip], {0}
    9ee0:	aa0b0000 	bge	2c9ee8 <__ccfg+0x2a9f40>
    9ee4:	02000000 	andeq	r0, r0, #0
    9ee8:	1c7c0400 	cfldrdne	mvd0, [ip], #-0
    9eec:	97230000 	strls	r0, [r3, -r0]!
    9ef0:	01000023 	tsteq	r0, r3, lsr #32
    9ef4:	1c8c185e 	stcne	8, cr1, [ip], {94}	; 0x5e
    9ef8:	03050000 	movweq	r0, #20480	; 0x5000
    9efc:	00005bfc 	strdeq	r5, [r0], -ip
    9f00:	0024cd23 	eoreq	ip, r4, r3, lsr #26
    9f04:	1b660100 	blne	198a30c <__ccfg+0x196a364>
    9f08:	00001076 	andeq	r1, r0, r6, ror r0
    9f0c:	06040305 	streq	r0, [r4], -r5, lsl #6
    9f10:	08232000 	stmdaeq	r3!, {sp}
    9f14:	01000026 	tsteq	r0, r6, lsr #32
    9f18:	18110e69 	ldmdane	r1, {r0, r3, r5, r6, r9, sl, fp}
    9f1c:	03050000 	movweq	r0, #20480	; 0x5000
    9f20:	200005dc 	ldrdcs	r0, [r0], -ip
    9f24:	00205323 	eoreq	r5, r0, r3, lsr #6
    9f28:	17690100 	strbne	r0, [r9, -r0, lsl #2]!
    9f2c:	00001811 	andeq	r1, r0, r1, lsl r8
    9f30:	05ec0305 	strbeq	r0, [ip, #773]!	; 0x305
    9f34:	6f232000 	svcvs	0x00232000
    9f38:	01000026 	tsteq	r0, r6, lsr #32
    9f3c:	0ac12178 	beq	ff052524 <_estack+0xdf04d524>
    9f40:	03050000 	movweq	r0, #20480	; 0x5000
    9f44:	20000024 	andcs	r0, r0, r4, lsr #32
    9f48:	0021e023 	eoreq	lr, r1, r3, lsr #32
    9f4c:	1a830100 	bne	fe0ca354 <_estack+0xde0c5354>
    9f50:	00000e72 	andeq	r0, r0, r2, ror lr
    9f54:	00080305 	andeq	r0, r8, r5, lsl #6
    9f58:	31232000 			; <UNDEFINED> instruction: 0x31232000
    9f5c:	0100001f 	tsteq	r0, pc, lsl r0
    9f60:	177e11c1 	ldrbne	r1, [lr, -r1, asr #3]!
    9f64:	03050000 	movweq	r0, #20480	; 0x5000
    9f68:	200005f4 	strdcs	r0, [r0], -r4
    9f6c:	00253727 	eoreq	r3, r5, r7, lsr #14
    9f70:	020a0100 	andeq	r0, sl, #0, 2
    9f74:	0000a30c 	andeq	sl, r0, ip, lsl #6
    9f78:	62012800 	andvs	r2, r1, #0, 16
    9f7c:	01000020 	tsteq	r0, r0, lsr #32
    9f80:	010603d7 	ldrdeq	r0, [r6, -r7]
    9f84:	00002f58 	andeq	r2, r0, r8, asr pc
    9f88:	000030cc 	andeq	r3, r0, ip, asr #1
    9f8c:	1da59c01 	stcne	12, cr9, [r5, #4]!
    9f90:	70290000 	eorvc	r0, r9, r0
    9f94:	01007968 	tsteq	r0, r8, ror #18
    9f98:	a31703d7 	tstge	r7, #1543503875	; 0x5c000003
    9f9c:	85000000 	strhi	r0, [r0, #-0]
    9fa0:	29000028 	stmdbcs	r0, {r3, r5}
    9fa4:	0073626d 	rsbseq	r6, r3, sp, ror #4
    9fa8:	2003d701 	andcs	sp, r3, r1, lsl #14
    9fac:	000000a3 	andeq	r0, r0, r3, lsr #1
    9fb0:	000028cf 	andeq	r2, r0, pc, asr #17
    9fb4:	001e352a 	andseq	r3, lr, sl, lsr #10
    9fb8:	002f7c00 	eoreq	r7, pc, r0, lsl #24
    9fbc:	000e6800 	andeq	r6, lr, r0, lsl #16
    9fc0:	03f00100 	mvnseq	r0, #0, 2
    9fc4:	001d9302 	andseq	r9, sp, r2, lsl #6
    9fc8:	0e682b00 	vmuleq.f64	d18, d8, d0
    9fcc:	432c0000 			; <UNDEFINED> instruction: 0x432c0000
    9fd0:	2d00001e 	stccs	0, cr0, [r0, #-120]	; 0xffffff88
    9fd4:	00001e4e 	andeq	r1, r0, lr, asr #28
    9fd8:	000028f8 	strdeq	r2, [r0], -r8
    9fdc:	001e5a2d 	andseq	r5, lr, sp, lsr #20
    9fe0:	00291700 	eoreq	r1, r9, r0, lsl #14
    9fe4:	1e662d00 	cdpne	13, 6, cr2, cr6, cr0, {0}
    9fe8:	29400000 	stmdbcs	r0, {}^	; <UNPREDICTABLE>
    9fec:	00000000 	andeq	r0, r0, r0
    9ff0:	001fcc2e 	andseq	ip, pc, lr, lsr #24
    9ff4:	00303200 	eorseq	r3, r0, r0, lsl #4
    9ff8:	000ea800 	andeq	sl, lr, r0, lsl #16
    9ffc:	04140100 	ldreq	r0, [r4], #-256	; 0xffffff00
    a000:	452f0002 	strmi	r0, [pc, #-2]!	; a006 <__exidx_end+0x43c6>
    a004:	01000023 	tsteq	r0, r3, lsr #32
    a008:	010c034a 	tsteq	ip, sl, asr #6
    a00c:	000000a3 	andeq	r0, r0, r3, lsr #1
    a010:	00002818 	andeq	r2, r0, r8, lsl r8
    a014:	000029a8 	andeq	r2, r0, r8, lsr #19
    a018:	1e359c01 	cdpne	12, 3, cr9, cr5, cr1, {0}
    a01c:	6f290000 	svcvs	0x00290000
    a020:	01007470 	tsteq	r0, r0, ror r4
    a024:	a318034a 	tstge	r8, #671088641	; 0x28000001
    a028:	74000000 	strvc	r0, [r0], #-0
    a02c:	29000029 	stmdbcs	r0, {r0, r3, r5}
    a030:	006c6176 	rsbeq	r6, ip, r6, ror r1
    a034:	25034a01 	strcs	r4, [r3, #-2561]	; 0xfffff5ff
    a038:	0000181d 	andeq	r1, r0, sp, lsl r8
    a03c:	00002a00 	andeq	r2, r0, r0, lsl #20
    a040:	74657230 	strbtvc	r7, [r5], #-560	; 0xfffffdd0
    a044:	034c0100 	movteq	r0, #49408	; 0xc100
    a048:	0000a306 	andeq	sl, r0, r6, lsl #6
    a04c:	002ab800 	eoreq	fp, sl, r0, lsl #16
    a050:	21fb3100 	mvnscs	r3, r0, lsl #2
    a054:	cf010000 	svcgt	0x00010000
    a058:	28a00103 	stmiacs	r0!, {r0, r1, r8}
    a05c:	05310000 	ldreq	r0, [r1, #-0]!
    a060:	01000024 	tsteq	r0, r4, lsr #32
    a064:	5a010358 	bpl	4adcc <__ccfg+0x2ae24>
    a068:	31000028 	tstcc	r0, r8, lsr #32
    a06c:	000025b1 			; <UNDEFINED> instruction: 0x000025b1
    a070:	0103cd01 	tsteq	r3, r1, lsl #26
    a074:	000028a4 	andeq	r2, r0, r4, lsr #17
    a078:	00285a32 	eoreq	r5, r8, r2, lsr sl
    a07c:	00288400 	eoreq	r8, r8, r0, lsl #8
    a080:	006a3000 	rsbeq	r3, sl, r0
    a084:	04035901 	streq	r5, [r3], #-2305	; 0xfffff6ff
    a088:	000000a3 	andeq	r0, r0, r3, lsr #1
    a08c:	00002b02 	andeq	r2, r0, r2, lsl #22
    a090:	7a330000 	bvc	cca098 <__ccfg+0xcaa0f0>
    a094:	01000022 	tsteq	r0, r2, lsr #32
    a098:	010d0307 	tsteq	sp, r7, lsl #6
    a09c:	00001e73 	andeq	r1, r0, r3, ror lr
    a0a0:	01006934 	tsteq	r0, r4, lsr r9
    a0a4:	a306030b 	movwge	r0, #25355	; 0x630b
    a0a8:	34000000 	strcc	r0, [r0], #-0
    a0ac:	01006572 	tsteq	r0, r2, ror r5
    a0b0:	731a030c 	tstvc	sl, #12, 6	; 0x30000000
    a0b4:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    a0b8:	01006164 	tsteq	r0, r4, ror #2
    a0bc:	731f030c 	tstvc	pc, #12, 6	; 0x30000000
    a0c0:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    a0c4:	01006264 	tsteq	r0, r4, ror #4
    a0c8:	7324030c 			; <UNDEFINED> instruction: 0x7324030c
    a0cc:	0000001e 	andeq	r0, r0, lr, lsl r0
    a0d0:	16ab0411 	ssatne	r0, #12, r1, lsl #8
    a0d4:	01280000 			; <UNDEFINED> instruction: 0x01280000
    a0d8:	0000206e 	andeq	r2, r0, lr, rrx
    a0dc:	01020d01 	tsteq	r2, r1, lsl #26
    a0e0:	002cf801 	eoreq	pc, ip, r1, lsl #16
    a0e4:	002ee800 	eoreq	lr, lr, r0, lsl #16
    a0e8:	fd9c0100 	ldc2	1, cr0, [ip]
    a0ec:	3500001e 	strcc	r0, [r0, #-30]	; 0xffffffe2
    a0f0:	00000c33 	andeq	r0, r0, r3, lsr ip
    a0f4:	01020d01 	tsteq	r2, r1, lsl #26
    a0f8:	000017d9 	ldrdeq	r1, [r0], -r9
    a0fc:	00002b15 	andeq	r2, r0, r5, lsl fp
    a100:	001f9b31 	andseq	r9, pc, r1, lsr fp	; <UNPREDICTABLE>
    a104:	02160100 	andseq	r0, r6, #0, 2
    a108:	002d0c01 	eoreq	r0, sp, r1, lsl #24
    a10c:	20232e00 	eorcs	r2, r3, r0, lsl #28
    a110:	2d6e0000 	stclcs	0, cr0, [lr, #-0]
    a114:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    a118:	25010000 	strcs	r0, [r1, #-0]
    a11c:	f32a0402 	vshl.u32	d0, d2, d10
    a120:	7200001f 	andvc	r0, r0, #31
    a124:	2000002d 	andcs	r0, r0, sp, lsr #32
    a128:	0100000e 	tsteq	r0, lr
    a12c:	eb040226 	bl	10a9cc <__ccfg+0xeaa24>
    a130:	2b00001e 	blcs	a1b0 <__exidx_end+0x4570>
    a134:	00000e20 	andeq	r0, r0, r0, lsr #28
    a138:	0020012d 	eoreq	r0, r0, sp, lsr #2
    a13c:	002b3e00 	eoreq	r3, fp, r0, lsl #28
    a140:	200d2c00 	andcs	r2, sp, r0, lsl #24
    a144:	00000000 	andeq	r0, r0, r0
    a148:	00202336 	eoreq	r2, r0, r6, lsr r3
    a14c:	002df600 	eoreq	pc, sp, r0, lsl #12
    a150:	002e0000 	eoreq	r0, lr, r0
    a154:	02650100 	rsbeq	r0, r5, #0, 2
    a158:	01280003 			; <UNDEFINED> instruction: 0x01280003
    a15c:	000025f6 	strdeq	r2, [r0], -r6
    a160:	0601ec01 	streq	lr, [r1], -r1, lsl #24
    a164:	002ee801 	eoreq	lr, lr, r1, lsl #16
    a168:	002f5800 	eoreq	r5, pc, r0, lsl #16
    a16c:	629c0100 	addsvs	r0, ip, #0, 2
    a170:	3700001f 	smladcc	r0, pc, r0, r0	; <UNPREDICTABLE>
    a174:	00000e50 	andeq	r0, r0, r0, asr lr
    a178:	00001f2f 	andeq	r1, r0, pc, lsr #30
    a17c:	01006a30 	tsteq	r0, r0, lsr sl
    a180:	a30201fe 	movwge	r0, #8702	; 0x21fe
    a184:	5d000000 	stcpl	0, cr0, [r0, #-0]
    a188:	0000002b 	andeq	r0, r0, fp, lsr #32
    a18c:	0021d538 	eoreq	sp, r1, r8, lsr r5
    a190:	002efc00 	eoreq	pc, lr, r0, lsl #24
    a194:	002f0600 	eoreq	r0, pc, r0, lsl #12
    a198:	01f80100 	mvnseq	r0, r0, lsl #2
    a19c:	001f4a02 	andseq	r4, pc, r2, lsl #20
    a1a0:	21e43900 	mvncs	r3, r0, lsl #18
    a1a4:	3a000000 	bcc	a1ac <__exidx_end+0x456c>
    a1a8:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    a1ac:	00002f06 	andeq	r2, r0, r6, lsl #30
    a1b0:	00000e38 	andeq	r0, r0, r8, lsr lr
    a1b4:	0201fb01 	andeq	pc, r1, #1024	; 0x400
    a1b8:	00220039 	eoreq	r0, r2, r9, lsr r0
    a1bc:	3b000000 	blcc	a1c4 <__exidx_end+0x4584>
    a1c0:	00002435 	andeq	r2, r0, r5, lsr r4
    a1c4:	0d01b501 	cfstr32eq	mvfx11, [r1, #-4]
    a1c8:	00002c28 	andeq	r2, r0, r8, lsr #24
    a1cc:	00002cf8 	strdeq	r2, [r0], -r8
    a1d0:	1fcc9c01 	svcne	0x00cc9c01
    a1d4:	64300000 	ldrtvs	r0, [r0], #-0
    a1d8:	b7010062 	strlt	r0, [r1, -r2, rrx]
    a1dc:	1e731a01 	vaddne.f32	s3, s6, s2
    a1e0:	2b700000 	blcs	1c0a1e8 <__ccfg+0x1bea240>
    a1e4:	69340000 	ldmdbvs	r4!, {}	; <UNPREDICTABLE>
    a1e8:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    a1ec:	0000a306 	andeq	sl, r0, r6, lsl #6
    a1f0:	6c703000 	ldclvs	0, cr3, [r0], #-0
    a1f4:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    a1f8:	0000a309 	andeq	sl, r0, r9, lsl #6
    a1fc:	002bb200 	eoreq	fp, fp, r0, lsl #4
    a200:	726e3000 	rsbvc	r3, lr, #0
    a204:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    a208:	0000a30d 	andeq	sl, r0, sp, lsl #6
    a20c:	002bc500 	eoreq	ip, fp, r0, lsl #10
    a210:	220d3a00 	andcs	r3, sp, #0, 20
    a214:	2c280000 	stccs	0, cr0, [r8], #-0
    a218:	0dd80000 	ldcleq	0, cr0, [r8]
    a21c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    a220:	1b390201 	blne	e4aa2c <__ccfg+0xe2aa84>
    a224:	00000022 	andeq	r0, r0, r2, lsr #32
    a228:	237a3c00 	cmncs	sl, #0, 24
    a22c:	ab010000 	blge	4a234 <__ccfg+0x2a28c>
    a230:	3d010d01 	stccc	13, cr0, [r1, #-4]
    a234:	00002390 	muleq	r0, r0, r3
    a238:	0d01a001 	stceq	0, cr10, [r1, #-4]
    a23c:	000027f8 	strdeq	r2, [r0], -r8
    a240:	00002818 	andeq	r2, r0, r8, lsl r8
    a244:	2f3c9c01 	svccs	0x003c9c01
    a248:	01000024 	tsteq	r0, r4, lsr #32
    a24c:	010d0195 			; <UNDEFINED> instruction: 0x010d0195
    a250:	00223d33 	eoreq	r3, r2, r3, lsr sp
    a254:	01800100 	orreq	r0, r0, r0, lsl #2
    a258:	2019010d 	andscs	r0, r9, sp, lsl #2
    a25c:	72340000 	eorsvc	r0, r4, #0
    a260:	84010065 	strhi	r0, [r1], #-101	; 0xffffff9b
    a264:	1e731a01 	vaddne.f32	s3, s6, s2
    a268:	69340000 	ldmdbvs	r4!, {}	; <UNPREDICTABLE>
    a26c:	01850100 	orreq	r0, r5, r0, lsl #2
    a270:	0000a306 	andeq	sl, r0, r6, lsl #6
    a274:	d43c0000 	ldrtle	r0, [ip], #-0
    a278:	01000022 	tsteq	r0, r2, lsr #32
    a27c:	010d0161 	tsteq	sp, r1, ror #2
    a280:	001f2b3e 	andseq	r2, pc, lr, lsr fp	; <UNPREDICTABLE>
    a284:	0dff0100 	ldfeqe	f0, [pc]	; a28c <__exidx_end+0x464c>
    a288:	20013f01 	andcs	r3, r1, r1, lsl #30
    a28c:	e2010000 	and	r0, r1, #0
    a290:	5f01010d 	svcpl	0x0001010d
    a294:	40000020 	andmi	r0, r0, r0, lsr #32
    a298:	00646d63 	rsbeq	r6, r4, r3, ror #26
    a29c:	c026e201 	eorgt	lr, r6, r1, lsl #4
    a2a0:	4100000b 	tstmi	r0, fp
    a2a4:	000026f9 	strdeq	r2, [r0], -r9
    a2a8:	0031e201 	eorseq	lr, r1, r1, lsl #4
    a2ac:	41000018 	tstmi	r0, r8, lsl r0
    a2b0:	00000722 	andeq	r0, r0, r2, lsr #14
    a2b4:	003ee201 	eorseq	lr, lr, r1, lsl #4
    a2b8:	00000018 	andeq	r0, r0, r8, lsl r0
    a2bc:	001efe3f 	andseq	pc, lr, pc, lsr lr	; <UNPREDICTABLE>
    a2c0:	0dc50100 	stfeqe	f0, [r5]
    a2c4:	20920101 	addscs	r0, r2, r1, lsl #2
    a2c8:	63400000 	movtvs	r0, #0
    a2cc:	0100646d 	tsteq	r0, sp, ror #8
    a2d0:	18001ec5 	stmdane	r0, {r0, r2, r6, r7, r9, sl, fp, ip}
    a2d4:	72420000 	subvc	r0, r2, #0
    a2d8:	01007365 	tsteq	r0, r5, ror #6
    a2dc:	00a306ca 	adceq	r0, r3, sl, asr #13
    a2e0:	63420000 	movtvs	r0, #8192	; 0x2000
    a2e4:	0100746e 	tsteq	r0, lr, ror #8
    a2e8:	00a306cd 	adceq	r0, r3, sp, asr #13
    a2ec:	43000000 	movwmi	r0, #0
    a2f0:	000012c4 	andeq	r1, r0, r4, asr #5
    a2f4:	01015403 	tsteq	r1, r3, lsl #8
    a2f8:	20af0301 	adccs	r0, pc, r1, lsl #6
    a2fc:	21440000 	mrscs	r0, (UNDEF: 68)
    a300:	03000011 	movweq	r0, #17
    a304:	7f190154 	svcvc	0x00190154
    a308:	00000000 	andeq	r0, r0, r0
    a30c:	0013d143 	andseq	sp, r3, r3, asr #2
    a310:	011e0300 	tsteq	lr, r0, lsl #6
    a314:	cc030101 	stfgts	f0, [r3], {1}
    a318:	44000020 	strmi	r0, [r0], #-32	; 0xffffffe0
    a31c:	00001121 	andeq	r1, r0, r1, lsr #2
    a320:	17011e03 	strne	r1, [r1, -r3, lsl #28]
    a324:	0000007f 	andeq	r0, r0, pc, ror r0
    a328:	25974300 	ldrcs	r4, [r7, #768]	; 0x300
    a32c:	ea050000 	b	14a334 <__ccfg+0x12a38c>
    a330:	03011501 	movweq	r1, #5377	; 0x1501
    a334:	00002161 	andeq	r2, r0, r1, ror #2
    a338:	00537034 	subseq	r7, r3, r4, lsr r0
    a33c:	1401f205 	strne	pc, [r1], #-517	; 0xfffffdfb
    a340:	00002161 	andeq	r2, r0, r1, ror #2
    a344:	00447034 	subeq	r7, r4, r4, lsr r0
    a348:	1c01f305 	stcne	3, cr15, [r1], {5}
    a34c:	00002167 	andeq	r2, r0, r7, ror #2
    a350:	00317434 	eorseq	r7, r1, r4, lsr r4
    a354:	0d01f405 	cfstrseq	mvf15, [r1, #-20]	; 0xffffffec
    a358:	0000007f 	andeq	r0, r0, pc, ror r0
    a35c:	00327434 	eorseq	r7, r2, r4, lsr r4
    a360:	1101f405 	tstne	r1, r5, lsl #8	; <UNPREDICTABLE>
    a364:	0000007f 	andeq	r0, r0, pc, ror r0
    a368:	00337434 	eorseq	r7, r3, r4, lsr r4
    a36c:	1501f405 	strne	pc, [r1, #-1029]	; 0xfffffbfb
    a370:	0000007f 	andeq	r0, r0, pc, ror r0
    a374:	00347434 	eorseq	r7, r4, r4, lsr r4
    a378:	1901f405 	stmdbne	r1, {r0, r2, sl, ip, sp, lr, pc}
    a37c:	0000007f 	andeq	r0, r0, pc, ror r0
    a380:	00357434 	eorseq	r7, r5, r4, lsr r4
    a384:	1d01f405 	cfstrsne	mvf15, [r1, #-20]	; 0xffffffec
    a388:	0000007f 	andeq	r0, r0, pc, ror r0
    a38c:	00367434 	eorseq	r7, r6, r4, lsr r4
    a390:	2101f405 	tstcs	r1, r5, lsl #8	; <UNPREDICTABLE>
    a394:	0000007f 	andeq	r0, r0, pc, ror r0
    a398:	00377434 	eorseq	r7, r7, r4, lsr r4
    a39c:	2501f405 	strcs	pc, [r1, #-1029]	; 0xfffffbfb
    a3a0:	0000007f 	andeq	r0, r0, pc, ror r0
    a3a4:	00387434 	eorseq	r7, r8, r4, lsr r4
    a3a8:	2901f405 	stmdbcs	r1, {r0, r2, sl, ip, sp, lr, pc}
    a3ac:	0000007f 	andeq	r0, r0, pc, ror r0
    a3b0:	0025d127 	eoreq	sp, r5, r7, lsr #2
    a3b4:	01f50500 	mvnseq	r0, r0, lsl #10
    a3b8:	00007f0d 	andeq	r7, r0, sp, lsl #30
    a3bc:	04110000 	ldreq	r0, [r1], #-0
    a3c0:	0000008b 	andeq	r0, r0, fp, lsl #1
    a3c4:	00970411 	addseq	r0, r7, r1, lsl r4
    a3c8:	dd450000 	stclle	0, cr0, [r5, #-0]
    a3cc:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    a3d0:	0115012f 	tsteq	r5, pc, lsr #2
    a3d4:	20a34503 	adccs	r4, r3, r3, lsl #10
    a3d8:	22040000 	andcs	r0, r4, #0
    a3dc:	03011501 	movweq	r1, #5377	; 0x1501
    a3e0:	001f5043 	andseq	r5, pc, r3, asr #32
    a3e4:	01110400 	tsteq	r1, r0, lsl #8
    a3e8:	ad030115 	stfges	f0, [r3, #-84]	; 0xffffffac
    a3ec:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    a3f0:	0000265c 	andeq	r2, r0, ip, asr r6
    a3f4:	0d011304 	stceq	3, cr1, [r1, #-16]
    a3f8:	00000984 	andeq	r0, r0, r4, lsl #19
    a3fc:	00211a27 	eoreq	r1, r1, r7, lsr #20
    a400:	01140400 	tsteq	r4, r0, lsl #8
    a404:	000bc60e 	andeq	ip, fp, lr, lsl #12
    a408:	07450000 	strbeq	r0, [r5, -r0]
    a40c:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    a410:	0115010d 	tsteq	r5, sp, lsl #2
    a414:	26a04303 	strtcs	r4, [r0], r3, lsl #6
    a418:	04040000 	streq	r0, [r4], #-0
    a41c:	03011501 	movweq	r1, #5377	; 0x1501
    a420:	000021d5 	ldrdeq	r2, [r0], -r5
    a424:	00212427 	eoreq	r2, r1, r7, lsr #8
    a428:	01060400 	tsteq	r6, r0, lsl #8
    a42c:	000bc60e 	andeq	ip, fp, lr, lsl #12
    a430:	81430000 	mrshi	r0, (UNDEF: 67)
    a434:	02000023 	andeq	r0, r0, #35	; 0x23
    a438:	0101011d 	tsteq	r1, sp, lsl r1
    a43c:	0021f203 	eoreq	pc, r1, r3, lsl #4
    a440:	22434400 	subcs	r4, r3, #0, 8
    a444:	1d020000 	stcne	0, cr0, [r2, #-0]
    a448:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    a44c:	3f000000 	svccc	0x00000000
    a450:	0000212e 	andeq	r2, r0, lr, lsr #2
    a454:	0101f702 	tsteq	r1, r2, lsl #14	; <UNPREDICTABLE>
    a458:	00220d03 	eoreq	r0, r2, r3, lsl #26
    a45c:	22434100 	subcs	r4, r3, #0, 2
    a460:	f7020000 			; <UNDEFINED> instruction: 0xf7020000
    a464:	00007f1b 	andeq	r7, r0, fp, lsl pc
    a468:	623f0000 	eorsvs	r0, pc, #0
    a46c:	02000021 	andeq	r0, r0, #33	; 0x21
    a470:	030101aa 	movweq	r0, #4522	; 0x11aa
    a474:	00002228 	andeq	r2, r0, r8, lsr #4
    a478:	00224341 	eoreq	r4, r2, r1, asr #6
    a47c:	1baa0200 	blne	fea8ac84 <_estack+0xdea85c84>
    a480:	0000007f 	andeq	r0, r0, pc, ror r0
    a484:	251b4600 	ldrcs	r4, [fp, #-1536]	; 0xfffffa00
    a488:	9c020000 	stcls	0, cr0, [r2], {-0}
    a48c:	46030101 	strmi	r0, [r3], -r1, lsl #2
    a490:	0000275a 	andeq	r2, r0, sl, asr r7
    a494:	01017902 	tsteq	r1, r2, lsl #18
    a498:	205f4703 	subscs	r4, pc, r3, lsl #14
    a49c:	29a80000 	stmibcs	r8!, {}	; <UNPREDICTABLE>
    a4a0:	29f00000 	ldmibcs	r0!, {}^	; <UNPREDICTABLE>
    a4a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a4a8:	0000228b 	andeq	r2, r0, fp, lsl #5
    a4ac:	00206d48 	eoreq	r6, r0, r8, asr #26
    a4b0:	002be300 	eoreq	lr, fp, r0, lsl #6
    a4b4:	20792d00 	rsbscs	r2, r9, r0, lsl #26
    a4b8:	2c010000 	stccs	0, cr0, [r1], {-0}
    a4bc:	852c0000 	strhi	r0, [ip, #-0]!
    a4c0:	49000020 	stmdbmi	r0, {r5}
    a4c4:	0000205f 	andeq	r2, r0, pc, asr r0
    a4c8:	000029be 			; <UNDEFINED> instruction: 0x000029be
    a4cc:	000029c0 	andeq	r2, r0, r0, asr #19
    a4d0:	480dc501 	stmdami	sp, {r0, r8, sl, lr, pc}
    a4d4:	0000206d 	andeq	r2, r0, sp, rrx
    a4d8:	00002c35 	andeq	r2, r0, r5, lsr ip
    a4dc:	0020792c 	eoreq	r7, r0, ip, lsr #18
    a4e0:	20852c00 	addcs	r2, r5, r0, lsl #24
    a4e4:	00000000 	andeq	r0, r0, r0
    a4e8:	001fe947 	andseq	lr, pc, r7, asr #18
    a4ec:	0029f000 	eoreq	pc, r9, r0
    a4f0:	002a1400 	eoreq	r1, sl, r0, lsl #8
    a4f4:	b09c0100 	addslt	r0, ip, r0, lsl #2
    a4f8:	36000022 	strcc	r0, [r0], -r2, lsr #32
    a4fc:	00001fe9 	andeq	r1, r0, r9, ror #31
    a500:	000029fa 	strdeq	r2, [r0], -sl
    a504:	00002a08 	andeq	r2, r0, r8, lsl #20
    a508:	0d019501 	cfstr32eq	mvfx9, [r1, #-4]
    a50c:	20194700 	andscs	r4, r9, r0, lsl #14
    a510:	2a140000 	bcs	50a518 <__ccfg+0x4ea570>
    a514:	2a700000 	bcs	1c0a51c <__ccfg+0x1bea574>
    a518:	9c010000 	stcls	0, cr0, [r1], {-0}
    a51c:	00002319 	andeq	r2, r0, r9, lsl r3
    a520:	0020194a 	eoreq	r1, r0, sl, asr #18
    a524:	002a1e00 	eoreq	r1, sl, r0, lsl #28
    a528:	002a5a00 	eoreq	r5, sl, r0, lsl #20
    a52c:	01610100 	cmneq	r1, r0, lsl #2
    a530:	22282e0d 	eorcs	r2, r8, #13, 28	; 0xd0
    a534:	2a1e0000 	bcs	78a53c <__ccfg+0x76a594>
    a538:	0d480000 	stcleq	0, cr0, [r8, #-0]
    a53c:	6f010000 	svcvs	0x00010000
    a540:	92380201 	eorsls	r0, r8, #268435456	; 0x10000000
    a544:	46000020 	strmi	r0, [r0], -r0, lsr #32
    a548:	4e00002a 	cdpmi	0, 0, cr0, cr0, cr10, {1}
    a54c:	0100002a 	tsteq	r0, sl, lsr #32
    a550:	0002017a 	andeq	r0, r2, sl, ror r1
    a554:	39000023 	stmdbcc	r0, {r0, r1, r5}
    a558:	000020a1 	andeq	r2, r0, r1, lsr #1
    a55c:	20924a00 	addscs	r4, r2, r0, lsl #20
    a560:	2a4e0000 	bcs	138a568 <__ccfg+0x136a5c0>
    a564:	2a520000 	bcs	148a56c <__ccfg+0x146a5c4>
    a568:	7a010000 	bvc	4a570 <__ccfg+0x2a5c8>
    a56c:	a1390201 	teqge	r9, r1, lsl #4
    a570:	00000020 	andeq	r0, r0, r0, lsr #32
    a574:	2c470000 	marcs	acc0, r0, r7
    a578:	70000020 	andvc	r0, r0, r0, lsr #32
    a57c:	a800002a 	stmdage	r0, {r1, r3, r5}
    a580:	0100002a 	tsteq	r0, sl, lsr #32
    a584:	0023449c 	mlaeq	r3, ip, r4, r4
    a588:	203a4800 	eorscs	r4, sl, r0, lsl #16
    a58c:	2c480000 	marcs	acc0, r0, r8
    a590:	46480000 	strbmi	r0, [r8], -r0
    a594:	66000020 	strvs	r0, [r0], -r0, lsr #32
    a598:	3900002c 	stmdbcc	r0, {r2, r3, r5}
    a59c:	00002052 	andeq	r2, r0, r2, asr r0
    a5a0:	20234b00 	eorcs	r4, r3, r0, lsl #22
    a5a4:	2aa80000 	bcs	fea0a5ac <_estack+0xdea055ac>
    a5a8:	2c280000 	stccs	0, cr0, [r8], #-0
    a5ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    a5b0:	0020af2a 	eoreq	sl, r0, sl, lsr #30
    a5b4:	002aa800 	eoreq	sl, sl, r0, lsl #16
    a5b8:	000d6800 	andeq	r6, sp, r0, lsl #16
    a5bc:	01080100 	mrseq	r0, (UNDEF: 24)
    a5c0:	00236e02 	eoreq	r6, r3, r2, lsl #28
    a5c4:	20be3900 	adcscs	r3, lr, r0, lsl #18
    a5c8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a5cc:	000020af 	andeq	r2, r0, pc, lsr #1
    a5d0:	00002ab4 			; <UNDEFINED> instruction: 0x00002ab4
    a5d4:	00002ab8 			; <UNDEFINED> instruction: 0x00002ab8
    a5d8:	02010801 	andeq	r0, r1, #65536	; 0x10000
    a5dc:	00002389 	andeq	r2, r0, r9, lsl #7
    a5e0:	0020be39 	eoreq	fp, r0, r9, lsr lr
    a5e4:	322e0000 	eorcc	r0, lr, #0
    a5e8:	d6000022 	strle	r0, [r0], -r2, lsr #32
    a5ec:	8000002a 	andhi	r0, r0, sl, lsr #32
    a5f0:	0100000d 	tsteq	r0, sp
    a5f4:	2a02011a 	bcs	8aa64 <__ccfg+0x6aabc>
    a5f8:	0000216d 	andeq	r2, r0, sp, ror #2
    a5fc:	00002ae4 	andeq	r2, r0, r4, ror #21
    a600:	00000d98 	muleq	r0, r8, sp
    a604:	02012101 	andeq	r2, r1, #1073741824	; 0x40000000
    a608:	0000240b 	andeq	r2, r0, fp, lsl #8
    a60c:	0021783a 	eoreq	r7, r1, sl, lsr r8
    a610:	002ae400 	eoreq	lr, sl, r0, lsl #8
    a614:	000d9800 	andeq	r9, sp, r0, lsl #16
    a618:	01310400 	teqeq	r1, r0, lsl #8
    a61c:	21b83804 			; <UNDEFINED> instruction: 0x21b83804
    a620:	2ae40000 	bcs	ff90a628 <_estack+0xdf905628>
    a624:	2af00000 	bcs	ffc0a62c <_estack+0xdfc0562c>
    a628:	25040000 	strcs	r0, [r4, #-0]
    a62c:	23df0401 	bicscs	r0, pc, #16777216	; 0x1000000
    a630:	c74c0000 	strbgt	r0, [ip, -r0]
    a634:	1c000021 	stcne	0, cr0, [r0], {33}	; 0x21
    a638:	00210004 	eoreq	r0, r1, r4
    a63c:	0021833a 	eoreq	r8, r1, sl, lsr r3
    a640:	002af000 	eoreq	pc, sl, r0
    a644:	000da000 	andeq	sl, sp, r0
    a648:	01260400 			; <UNDEFINED> instruction: 0x01260400
    a64c:	0da02b04 			; <UNDEFINED> instruction: 0x0da02b04
    a650:	924c0000 	subls	r0, ip, #0
    a654:	40000021 	andmi	r0, r0, r1, lsr #32
    a658:	4c210003 	stcmi	0, cr0, [r1], #-12
    a65c:	0000219f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    a660:	210003bc 			; <UNDEFINED> instruction: 0x210003bc
    a664:	00000000 	andeq	r0, r0, r0
    a668:	0020cc3a 	eoreq	ip, r0, sl, lsr ip
    a66c:	002af400 	eoreq	pc, sl, r0, lsl #8
    a670:	000db800 	andeq	fp, sp, r0, lsl #16
    a674:	01220100 			; <UNDEFINED> instruction: 0x01220100
    a678:	0db82b02 			; <UNDEFINED> instruction: 0x0db82b02
    a67c:	db2d0000 	blle	b4a684 <__ccfg+0xb2a6dc>
    a680:	84000020 	strhi	r0, [r0], #-32	; 0xffffffe0
    a684:	2d00002c 	stccs	0, cr0, [r0, #-176]	; 0xffffff50
    a688:	000020e7 	andeq	r2, r0, r7, ror #1
    a68c:	00002c97 	muleq	r0, r7, ip
    a690:	0020f32c 	eoreq	pc, r0, ip, lsr #6
    a694:	20ff2d00 	rscscs	r2, pc, r0, lsl #26
    a698:	2cb50000 	ldccs	0, cr0, [r5]
    a69c:	0b2c0000 	bleq	b0a6a4 <__ccfg+0xaea6fc>
    a6a0:	2d000021 	stccs	0, cr0, [r0, #-132]	; 0xffffff7c
    a6a4:	00002117 	andeq	r2, r0, r7, lsl r1
    a6a8:	00002cc8 	andeq	r2, r0, r8, asr #25
    a6ac:	0021232c 	eoreq	r2, r1, ip, lsr #6
    a6b0:	212f2d00 			; <UNDEFINED> instruction: 0x212f2d00
    a6b4:	2cdb0000 	ldclcs	0, cr0, [fp], {0}
    a6b8:	3b2d0000 	blcc	b4a6c0 <__ccfg+0xb2a718>
    a6bc:	ee000021 	cdp	0, 0, cr0, cr0, cr1, {1}
    a6c0:	2d00002c 	stccs	0, cr0, [r0, #-176]	; 0xffffff50
    a6c4:	00002147 	andeq	r2, r0, r7, asr #2
    a6c8:	00002d19 	andeq	r2, r0, r9, lsl sp
    a6cc:	0021532c 	eoreq	r5, r1, ip, lsr #6
    a6d0:	00000000 	andeq	r0, r0, r0
    a6d4:	00073100 	andeq	r3, r7, r0, lsl #2
    a6d8:	ca000300 	bgt	b2e0 <__exidx_end+0x56a0>
    a6dc:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    a6e0:	0000ac01 	andeq	sl, r0, r1, lsl #24
    a6e4:	27750c00 	ldrbcs	r0, [r5, -r0, lsl #24]!
    a6e8:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    a6ec:	0f200000 	svceq	0x00200000
    a6f0:	00000000 	andeq	r0, r0, r0
    a6f4:	63e10000 	mvnvs	r0, #0
    a6f8:	01020000 	mrseq	r0, (UNDEF: 2)
    a6fc:	000c5d06 	andeq	r5, ip, r6, lsl #26
    a700:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    a704:	00000a6b 	andeq	r0, r0, fp, ror #20
    a708:	fd050402 	stc2	4, cr0, [r5, #-8]
    a70c:	02000007 	andeq	r0, r0, #7
    a710:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    a714:	1c030000 	stcne	0, cr0, [r3], {-0}
    a718:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a71c:	004d172e 	subeq	r1, sp, lr, lsr #14
    a720:	01020000 	mrseq	r0, (UNDEF: 2)
    a724:	000c5b08 	andeq	r5, ip, r8, lsl #22
    a728:	2e120300 	cdpcs	3, 1, cr0, cr2, cr0, {0}
    a72c:	31020000 	mrscc	r0, (UNDEF: 2)
    a730:	0000601c 	andeq	r6, r0, ip, lsl r0
    a734:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a738:	00000d66 	andeq	r0, r0, r6, ror #26
    a73c:	0029b403 	eoreq	fp, r9, r3, lsl #8
    a740:	1b340200 	blne	d0af48 <__ccfg+0xceafa0>
    a744:	00000073 	andeq	r0, r0, r3, ror r0
    a748:	26070402 	strcs	r0, [r7], -r2, lsl #8
    a74c:	02000004 	andeq	r0, r0, #4
    a750:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    a754:	04040000 	streq	r0, [r4], #-0
    a758:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a75c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a760:	0000042b 	andeq	r0, r0, fp, lsr #8
    a764:	00051e03 	andeq	r1, r5, r3, lsl #28
    a768:	1b280300 	blne	a0b370 <__ccfg+0x9eb3c8>
    a76c:	0000009b 	muleq	r0, fp, r0
    a770:	000b9005 	andeq	r9, fp, r5
    a774:	000a0400 	andeq	r0, sl, r0, lsl #8
    a778:	000000b3 	strheq	r0, [r0], -r3
    a77c:	00086d06 	andeq	r6, r8, r6, lsl #26
    a780:	0000b300 	andeq	fp, r0, r0, lsl #6
    a784:	00010000 	andeq	r0, r1, r0
    a788:	92030407 	andls	r0, r3, #117440512	; 0x7000000
    a78c:	0300000b 	movweq	r0, #11
    a790:	008f1863 	addeq	r1, pc, r3, ror #16
    a794:	fb030000 	blx	ca79e <__ccfg+0xaa7f6>
    a798:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    a79c:	00541227 	subseq	r1, r4, r7, lsr #4
    a7a0:	c1080000 	mrsgt	r0, (UNDEF: 8)
    a7a4:	03000000 	movweq	r0, #0
    a7a8:	00001dc2 	andeq	r1, r0, r2, asr #27
    a7ac:	41112b04 	tstmi	r1, r4, lsl #22
    a7b0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a7b4:	000000d2 	ldrdeq	r0, [r0], -r2
    a7b8:	00294d03 	eoreq	r4, r9, r3, lsl #26
    a7bc:	122c0400 	eorne	r0, ip, #0, 8
    a7c0:	00000067 	andeq	r0, r0, r7, rrx
    a7c4:	0000e308 	andeq	lr, r0, r8, lsl #6
    a7c8:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    a7cc:	2d040000 	stccs	0, cr0, [r4, #-0]
    a7d0:	00006712 	andeq	r6, r0, r2, lsl r7
    a7d4:	0bb40300 	bleq	fed0b3dc <_estack+0xded063dc>
    a7d8:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    a7dc:	00010c0f 	andeq	r0, r1, pc, lsl #24
    a7e0:	c1040a00 	tstgt	r4, r0, lsl #20
    a7e4:	0b000000 	bleq	a7ec <__exidx_end+0x4bac>
    a7e8:	09320408 	ldmdbeq	r2!, {r3, sl}
    a7ec:	000001a0 	andeq	r0, r0, r0, lsr #3
    a7f0:	0000340c 	andeq	r3, r0, ip, lsl #8
    a7f4:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    a7f8:	000000d2 	ldrdeq	r0, [r0], -r2
    a7fc:	00070101 	andeq	r0, r7, r1, lsl #2
    a800:	00064c0c 	andeq	r4, r6, ip, lsl #24
    a804:	03350400 	teqeq	r5, #0, 8
    a808:	000000d2 	ldrdeq	r0, [r0], -r2
    a80c:	00060101 	andeq	r0, r6, r1, lsl #2
    a810:	0002e70c 	andeq	lr, r2, ip, lsl #14
    a814:	03360400 	teqeq	r6, #0, 8
    a818:	000000d2 	ldrdeq	r0, [r0], -r2
    a81c:	00050101 	andeq	r0, r5, r1, lsl #2
    a820:	0006b70c 	andeq	fp, r6, ip, lsl #14
    a824:	03370400 	teqeq	r7, #0, 8
    a828:	000000d2 	ldrdeq	r0, [r0], -r2
    a82c:	00040101 	andeq	r0, r4, r1, lsl #2
    a830:	000a9f0c 	andeq	r9, sl, ip, lsl #30
    a834:	03380400 	teqeq	r8, #0, 8
    a838:	000000d2 	ldrdeq	r0, [r0], -r2
    a83c:	00000401 	andeq	r0, r0, r1, lsl #8
    a840:	00065b0d 	andeq	r5, r6, sp, lsl #22
    a844:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    a848:	000000d2 	ldrdeq	r0, [r0], -r2
    a84c:	08fb0d01 	ldmeq	fp!, {r0, r8, sl, fp}^
    a850:	3c040000 	stccc	0, cr0, [r4], {-0}
    a854:	0000d203 	andeq	sp, r0, r3, lsl #4
    a858:	3a0d0200 	bcc	34b060 <__ccfg+0x32b0b8>
    a85c:	0400000f 	streq	r0, [r0], #-15
    a860:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    a864:	0d030000 	stceq	0, cr0, [r3, #-0]
    a868:	00000913 	andeq	r0, r0, r3, lsl r9
    a86c:	e3083f04 	movw	r3, #36612	; 0x8f04
    a870:	04000000 	streq	r0, [r0], #-0
    a874:	031d0300 	tsteq	sp, #0, 6
    a878:	41040000 	mrsmi	r0, (UNDEF: 4)
    a87c:	00011203 	andeq	r1, r1, r3, lsl #4
    a880:	01a00900 	lsleq	r0, r0, #18
    a884:	be0e0000 	cdplt	0, 0, cr0, cr14, cr0, {0}
    a888:	04000006 	streq	r0, [r0], #-6
    a88c:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    a890:	01010000 	mrseq	r0, (UNDEF: 1)
    a894:	0001a00e 	andeq	sl, r1, lr
    a898:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    a89c:	000001cd 	andeq	r0, r0, sp, asr #3
    a8a0:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    a8a4:	000001d3 	ldrdeq	r0, [r0], -r3
    a8a8:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    a8ac:	0800000c 	stmdaeq	r0, {r2, r3}
    a8b0:	000001d3 	ldrdeq	r0, [r0], -r3
    a8b4:	0003260e 	andeq	r2, r3, lr, lsl #12
    a8b8:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    a8bc:	000001cd 	andeq	r0, r0, sp, asr #3
    a8c0:	080b0101 	stmdaeq	fp, {r0, r8}
    a8c4:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    a8c8:	0d000002 	stceq	0, cr0, [r0, #-8]
    a8cc:	00000cd8 	ldrdeq	r0, [r0], -r8
    a8d0:	670b9005 	strvs	r9, [fp, -r5]
    a8d4:	00000000 	andeq	r0, r0, r0
    a8d8:	0010750d 	andseq	r7, r0, sp, lsl #10
    a8dc:	07910500 	ldreq	r0, [r1, r0, lsl #10]
    a8e0:	000000c1 	andeq	r0, r0, r1, asr #1
    a8e4:	01c50d04 	biceq	r0, r5, r4, lsl #26
    a8e8:	92050000 	andls	r0, r5, #0
    a8ec:	0000de10 	andeq	sp, r0, r0, lsl lr
    a8f0:	03000600 	movweq	r0, #1536	; 0x600
    a8f4:	00000ccc 	andeq	r0, r0, ip, asr #25
    a8f8:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    a8fc:	0f000001 	svceq	0x00000001
    a900:	0000021e 	andeq	r0, r0, lr, lsl r2
    a904:	00000235 	andeq	r0, r0, r5, lsr r2
    a908:	3d0e0010 	stccc	0, cr0, [lr, #-64]	; 0xffffffc0
    a90c:	05000009 	streq	r0, [r0, #-9]
    a910:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    a914:	01010000 	mrseq	r0, (UNDEF: 1)
    a918:	9106010b 	tstls	r6, fp, lsl #2
    a91c:	00026d09 	andeq	r6, r2, r9, lsl #26
    a920:	091a0c00 	ldmdbeq	sl, {sl, fp}
    a924:	93060000 	movwls	r0, #24576	; 0x6000
    a928:	0000d207 	andeq	sp, r0, r7, lsl #4
    a92c:	01070100 	mrseq	r0, (UNDEF: 23)
    a930:	05cc0c00 	strbeq	r0, [ip, #3072]	; 0xc00
    a934:	94060000 	strls	r0, [r6], #-0
    a938:	0000d203 	andeq	sp, r0, r3, lsl #4
    a93c:	00010100 	andeq	r0, r1, r0, lsl #2
    a940:	ab030000 	blge	ca948 <__ccfg+0xaa9a0>
    a944:	0600000a 	streq	r0, [r0], -sl
    a948:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    a94c:	6d080000 	stcvs	0, cr0, [r8, #-0]
    a950:	0f000002 	svceq	0x00000002
    a954:	00000279 	andeq	r0, r0, r9, ror r2
    a958:	00000289 	andeq	r0, r0, r9, lsl #5
    a95c:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    a960:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    a964:	000003aa 	andeq	r0, r0, sl, lsr #7
    a968:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    a96c:	01000002 	tsteq	r0, r2
    a970:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    a974:	02a70000 	adceq	r0, r7, #0
    a978:	00100000 	andseq	r0, r0, r0
    a97c:	00029c08 	andeq	r9, r2, r8, lsl #24
    a980:	060e0e00 	streq	r0, [lr], -r0, lsl #28
    a984:	06070000 	streq	r0, [r7], -r0
    a988:	0002a713 	andeq	sl, r2, r3, lsl r7
    a98c:	0e010100 	adfeqs	f0, f1, f0
    a990:	000008dd 	ldrdeq	r0, [r0], -sp
    a994:	e30ec305 	movw	ip, #58117	; 0xe305
    a998:	01000000 	mrseq	r0, (UNDEF: 0)
    a99c:	0c721101 	ldfeqe	f1, [r2], #-4
    a9a0:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    a9a4:	02d51001 	sbcseq	r1, r5, #1
    a9a8:	040a0000 	streq	r0, [sl], #-0
    a9ac:	000002db 	ldrdeq	r0, [r0], -fp
    a9b0:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    a9b4:	c1130000 	tstgt	r3, r0
    a9b8:	00000000 	andeq	r0, r0, r0
    a9bc:	0001da0f 	andeq	sp, r1, pc, lsl #20
    a9c0:	0002f200 	andeq	pc, r2, r0, lsl #4
    a9c4:	08001000 	stmdaeq	r0, {ip}
    a9c8:	000002e7 	andeq	r0, r0, r7, ror #5
    a9cc:	0009e614 	andeq	lr, r9, r4, lsl r6
    a9d0:	017f0800 	cmneq	pc, r0, lsl #16
    a9d4:	0002f213 	andeq	pc, r2, r3, lsl r2	; <UNPREDICTABLE>
    a9d8:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    a9dc:	00000396 	muleq	r0, r6, r3
    a9e0:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    a9e4:	000000ef 	andeq	r0, r0, pc, ror #1
    a9e8:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    a9ec:	39090809 	stmdbcc	r9, {r0, r3, fp}
    a9f0:	0d000003 	stceq	0, cr0, [r0, #-12]
    a9f4:	000001cb 	andeq	r0, r0, fp, asr #3
    a9f8:	c1070f09 	tstgt	r7, r9, lsl #30
    a9fc:	00000000 	andeq	r0, r0, r0
    aa00:	000ca20d 	andeq	sl, ip, sp, lsl #4
    aa04:	03100900 	tsteq	r0, #0, 18
    aa08:	000000c1 	andeq	r0, r0, r1, asr #1
    aa0c:	79030002 	stmdbvc	r3, {r1}
    aa10:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    aa14:	03150311 	tsteq	r5, #1140850688	; 0x44000000
    aa18:	200b0000 	andcs	r0, fp, r0
    aa1c:	b7091609 	strlt	r1, [r9, -r9, lsl #12]
    aa20:	0d000003 	stceq	0, cr0, [r0, #-12]
    aa24:	000004ac 	andeq	r0, r0, ip, lsr #9
    aa28:	d1081709 	tstle	r8, r9, lsl #14
    aa2c:	00000003 	andeq	r0, r0, r3
    aa30:	00090b0d 	andeq	r0, r9, sp, lsl #22
    aa34:	08180900 	ldmdaeq	r8, {r8, fp}
    aa38:	000003ec 	andeq	r0, r0, ip, ror #7
    aa3c:	0bc60d04 	bleq	ff18de54 <_estack+0xdf188e54>
    aa40:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    aa44:	00042208 	andeq	r2, r4, r8, lsl #4
    aa48:	9a0d0800 	bls	34ca50 <__ccfg+0x32caa8>
    aa4c:	0900000c 	stmdbeq	r0, {r2, r3}
    aa50:	043d081a 	ldrteq	r0, [sp], #-2074	; 0xfffff7e6
    aa54:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    aa58:	00000962 	andeq	r0, r0, r2, ror #18
    aa5c:	53081b09 	movwpl	r1, #35593	; 0x8b09
    aa60:	10000004 	andne	r0, r0, r4
    aa64:	000a630d 	andeq	r6, sl, sp, lsl #6
    aa68:	081c0900 	ldmdaeq	ip, {r8, fp}
    aa6c:	00000453 	andeq	r0, r0, r3, asr r4
    aa70:	01ae0d14 			; <UNDEFINED> instruction: 0x01ae0d14
    aa74:	1d090000 	stcne	0, cr0, [r9, #-0]
    aa78:	00045308 	andeq	r5, r4, r8, lsl #6
    aa7c:	140d1800 	strne	r1, [sp], #-2048	; 0xfffff800
    aa80:	09000003 	stmdbeq	r0, {r0, r1}
    aa84:	0081061e 	addeq	r0, r1, lr, lsl r6
    aa88:	001c0000 	andseq	r0, ip, r0
    aa8c:	00810115 	addeq	r0, r1, r5, lsl r1
    aa90:	03d10000 	bicseq	r0, r1, #0
    aa94:	81130000 	tsthi	r3, r0
    aa98:	13000000 	movwne	r0, #0
    aa9c:	00000081 	andeq	r0, r0, r1, lsl #1
    aaa0:	0000b513 	andeq	fp, r0, r3, lsl r5
    aaa4:	040a0000 	streq	r0, [sl], #-0
    aaa8:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
    aaac:	00810115 	addeq	r0, r1, r5, lsl r1
    aab0:	03ec0000 	mvneq	r0, #0
    aab4:	81130000 	tsthi	r3, r0
    aab8:	13000000 	movwne	r0, #0
    aabc:	00000081 	andeq	r0, r0, r1, lsl #1
    aac0:	d7040a00 	strle	r0, [r4, -r0, lsl #20]
    aac4:	15000003 	strne	r0, [r0, #-3]
    aac8:	00008101 	andeq	r8, r0, r1, lsl #2
    aacc:	00041600 	andeq	r1, r4, r0, lsl #12
    aad0:	00811300 	addeq	r1, r1, r0, lsl #6
    aad4:	00130000 	andseq	r0, r3, r0
    aad8:	13000001 	movwne	r0, #1
    aadc:	00000081 	andeq	r0, r0, r1, lsl #1
    aae0:	00041613 	andeq	r1, r4, r3, lsl r6
    aae4:	041c1300 	ldreq	r1, [ip], #-768	; 0xfffffd00
    aae8:	0a000000 	beq	aaf0 <__exidx_end+0x4eb0>
    aaec:	00008104 	andeq	r8, r0, r4, lsl #2
    aaf0:	39040a00 	stmdbcc	r4, {r9, fp}
    aaf4:	0a000003 	beq	ab08 <__exidx_end+0x4ec8>
    aaf8:	0003f204 	andeq	pc, r3, r4, lsl #4
    aafc:	81011500 	tsthi	r1, r0, lsl #10
    ab00:	3d000000 	stccc	0, cr0, [r0, #-0]
    ab04:	13000004 	movwne	r0, #4
    ab08:	00000100 	andeq	r0, r0, r0, lsl #2
    ab0c:	00041c13 	andeq	r1, r4, r3, lsl ip
    ab10:	040a0000 	streq	r0, [sl], #-0
    ab14:	00000428 	andeq	r0, r0, r8, lsr #8
    ab18:	00810115 	addeq	r0, r1, r5, lsl r1
    ab1c:	04530000 	ldrbeq	r0, [r3], #-0
    ab20:	00130000 	andseq	r0, r3, r0
    ab24:	00000001 	andeq	r0, r0, r1
    ab28:	0443040a 	strbeq	r0, [r3], #-1034	; 0xfffffbf6
    ab2c:	35030000 	strcc	r0, [r3, #-0]
    ab30:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    ab34:	0345031f 	movteq	r0, #21279	; 0x531f
    ab38:	59080000 	stmdbpl	r8, {}	; <UNPREDICTABLE>
    ab3c:	14000004 	strne	r0, [r0], #-4
    ab40:	0000036e 	andeq	r0, r0, lr, ror #6
    ab44:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    ab48:	000000e3 	andeq	r0, r0, r3, ror #1
    ab4c:	08160101 	ldmdaeq	r6, {r0, r8}
    ab50:	09030308 	stmdbeq	r3, {r3, r8, r9}
    ab54:	000004a0 	andeq	r0, r0, r0, lsr #9
    ab58:	003ca117 	eorseq	sl, ip, r7, lsl r1
    ab5c:	03070800 	movweq	r0, #30720	; 0x7800
    ab60:	0000c107 	andeq	ip, r0, r7, lsl #2
    ab64:	cd170000 	ldcgt	0, cr0, [r7, #-0]
    ab68:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    ab6c:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    ab70:	04000000 	streq	r0, [r0], #-0
    ab74:	0a091100 	beq	24ef7c <__ccfg+0x22efd4>
    ab78:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    ab7c:	04790303 	ldrbteq	r0, [r9], #-771	; 0xfffffcfd
    ab80:	29180000 	ldmdbcs	r8, {}	; <UNPREDICTABLE>
    ab84:	30000000 	andcc	r0, r0, r0
    ab88:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    ab8c:	00000510 	andeq	r0, r0, r0, lsl r5
    ab90:	001f2417 	andseq	r2, pc, r7, lsl r4	; <UNPREDICTABLE>
    ab94:	03140800 	tsteq	r4, #0, 16
    ab98:	0000c107 	andeq	ip, r0, r7, lsl #2
    ab9c:	e7170000 	ldr	r0, [r7, -r0]
    aba0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    aba4:	c1070315 	tstgt	r7, r5, lsl r3
    aba8:	02000000 	andeq	r0, r0, #0
    abac:	004c8e17 	subeq	r8, ip, r7, lsl lr
    abb0:	03160800 	tsteq	r6, #0, 16
    abb4:	0002c80a 	andeq	ip, r2, sl, lsl #16
    abb8:	54170400 	ldrpl	r0, [r7], #-1024	; 0xfffffc00
    abbc:	08000047 	stmdaeq	r0, {r0, r1, r2, r6}
    abc0:	f4080317 	vst2.8	{d0-d3}, [r8 :64], r7
    abc4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    abc8:	00000f17 	andeq	r0, r0, r7, lsl pc
    abcc:	03180800 	tsteq	r8, #0, 16
    abd0:	0005100f 	andeq	r1, r5, pc
    abd4:	5d170c00 	ldcpl	12, cr0, [r7, #-0]
    abd8:	08000009 	stmdaeq	r0, {r0, r3}
    abdc:	20150319 	andscs	r0, r5, r9, lsl r3
    abe0:	2c000005 	stccs	0, cr0, [r0], {5}
    abe4:	04a00f00 	strteq	r0, [r0], #3840	; 0xf00
    abe8:	05200000 	streq	r0, [r0, #-0]!
    abec:	88190000 	ldmdahi	r9, {}	; <UNPREDICTABLE>
    abf0:	03000000 	movweq	r0, #0
    abf4:	ad040a00 	vstrge	s0, [r4, #-0]
    abf8:	11000004 	tstne	r0, r4
    abfc:	00000bdc 	ldrdeq	r0, [r0], -ip
    ac00:	1b031c08 	blne	d1c28 <__ccfg+0xb1c80>
    ac04:	000004ad 	andeq	r0, r0, sp, lsr #9
    ac08:	000bbc14 	andeq	fp, fp, r4, lsl ip
    ac0c:	031e0800 	tsteq	lr, #0, 16
    ac10:	00054214 	andeq	r4, r5, r4, lsl r2
    ac14:	0a010100 	beq	4b01c <__ccfg+0x2b074>
    ac18:	00052604 	andeq	r2, r5, r4, lsl #12
    ac1c:	00161a00 	andseq	r1, r6, r0, lsl #20
    ac20:	1a010000 	bne	4ac28 <__ccfg+0x2ac80>
    ac24:	00046511 	andeq	r6, r4, r1, lsl r5
    ac28:	03050100 	movweq	r0, #20736	; 0x5100
    ac2c:	00005c20 	andeq	r5, r0, r0, lsr #24
    ac30:	0027db1b 	eoreq	sp, r7, fp, lsl fp
    ac34:	0d1f0100 	ldfeqs	f0, [pc, #-0]	; ac3c <__exidx_end+0x4ffc>
    ac38:	00000416 	andeq	r0, r0, r6, lsl r4
    ac3c:	06140305 	ldreq	r0, [r4], -r5, lsl #6
    ac40:	c71c2000 	ldrgt	r2, [ip, -r0]
    ac44:	01000027 	tsteq	r0, r7, lsr #32
    ac48:	81010c58 	tsthi	r1, r8, asr ip
    ac4c:	20000000 	andcs	r0, r0, r0
    ac50:	24000031 	strcs	r0, [r0], #-49	; 0xffffffcf
    ac54:	01000031 	tsteq	r0, r1, lsr r0
    ac58:	0005979c 	muleq	r5, ip, r7
    ac5c:	00701d00 	rsbseq	r1, r0, r0, lsl #26
    ac60:	00225801 	eoreq	r5, r2, r1, lsl #16
    ac64:	2c000001 	stccs	0, cr0, [r0], {1}
    ac68:	0000002d 	andeq	r0, r0, sp, lsr #32
    ac6c:	0027861c 	eoreq	r8, r7, ip, lsl r6
    ac70:	0c520100 	ldfeqe	f0, [r2], {-0}
    ac74:	00008101 	andeq	r8, r0, r1, lsl #2
    ac78:	00311c00 	eorseq	r1, r1, r0, lsl #24
    ac7c:	00312000 	eorseq	r2, r1, r0
    ac80:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    ac84:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    ac88:	52010070 	andpl	r0, r1, #112	; 0x70
    ac8c:	00010022 	andeq	r0, r1, r2, lsr #32
    ac90:	002d3f00 	eoreq	r3, sp, r0, lsl #30
    ac94:	ad1c0000 	ldcge	0, cr0, [ip, #-0]
    ac98:	01000027 	tsteq	r0, r7, lsr #32
    ac9c:	81010c4d 	tsthi	r1, sp, asr #24
    aca0:	14000000 	strne	r0, [r0], #-0
    aca4:	1c000031 	stcne	0, cr0, [r0], {49}	; 0x31
    aca8:	01000031 	tsteq	r0, r1, lsr r0
    acac:	0005f99c 	muleq	r5, ip, r9
    acb0:	00701d00 	rsbseq	r1, r0, r0, lsl #26
    acb4:	00224d01 	eoreq	r4, r2, r1, lsl #26
    acb8:	52000001 	andpl	r0, r0, #1
    acbc:	1e00002d 	cdpne	0, 0, cr0, cr0, cr13, {1}
    acc0:	000027d4 	ldrdeq	r2, [r0], -r4
    acc4:	1c2f4d01 	stcne	13, cr4, [pc], #-4	; acc8 <__exidx_end+0x5088>
    acc8:	01000004 	tsteq	r0, r4
    accc:	931c0051 	tstls	ip, #81	; 0x51
    acd0:	01000027 	tsteq	r0, r7, lsr #32
    acd4:	81010c42 	tsthi	r1, r2, asr #24
    acd8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    acdc:	14000030 	strne	r0, [r0], #-48	; 0xffffffd0
    ace0:	01000031 	tsteq	r0, r1, lsr r0
    ace4:	0006629c 	muleq	r6, ip, r2
    ace8:	68701d00 	ldmdavs	r0!, {r8, sl, fp, ip}^
    acec:	42010079 	andmi	r0, r1, #121	; 0x79
    acf0:	0000811e 	andeq	r8, r0, lr, lsl r1
    acf4:	002d6500 	eoreq	r6, sp, r0, lsl #10
    acf8:	00701d00 	rsbseq	r1, r0, r0, lsl #26
    acfc:	002b4201 	eoreq	r4, fp, r1, lsl #4
    ad00:	83000001 	movwhi	r0, #1
    ad04:	1d00002d 	stcne	0, cr0, [r0, #-180]	; 0xffffff4c
    ad08:	006e656c 	rsbeq	r6, lr, ip, ror #10
    ad0c:	81324201 	teqhi	r2, r1, lsl #4
    ad10:	96000000 	strls	r0, [r0], -r0
    ad14:	1d00002d 	stcne	0, cr0, [r0, #-180]	; 0xffffff4c
    ad18:	00736573 	rsbseq	r6, r3, r3, ror r5
    ad1c:	163c4201 	ldrtne	r4, [ip], -r1, lsl #4
    ad20:	a9000004 	stmdbge	r0, {r2}
    ad24:	1e00002d 	cdpne	0, 0, cr0, cr0, cr13, {1}
    ad28:	000027d4 	ldrdeq	r2, [r0], -r4
    ad2c:	1c174301 	ldcne	3, cr4, [r7], {1}
    ad30:	02000004 	andeq	r0, r0, #4
    ad34:	1c000091 	stcne	0, cr0, [r0], {145}	; 0x91
    ad38:	000027ba 			; <UNDEFINED> instruction: 0x000027ba
    ad3c:	010c3701 	tsteq	ip, r1, lsl #14
    ad40:	00000081 	andeq	r0, r0, r1, lsl #1
    ad44:	000030cc 	andeq	r3, r0, ip, asr #1
    ad48:	000030f0 	strdeq	r3, [r0], -r0
    ad4c:	069b9c01 	ldreq	r9, [fp], r1, lsl #24
    ad50:	701d0000 	andsvc	r0, sp, r0
    ad54:	01007968 	tsteq	r0, r8, ror #18
    ad58:	00811e37 	addeq	r1, r1, r7, lsr lr
    ad5c:	2dbc0000 	ldccs	0, cr0, [ip]
    ad60:	661f0000 	ldrvs	r0, [pc], -r0
    ad64:	37010064 	strcc	r0, [r1, -r4, rrx]
    ad68:	00008127 	andeq	r8, r0, r7, lsr #2
    ad6c:	00510100 	subseq	r0, r1, r0, lsl #2
    ad70:	0027a020 	eoreq	sl, r7, r0, lsr #32
    ad74:	0c210100 	stfeqs	f0, [r1], #-0
    ad78:	00008101 	andeq	r8, r0, r1, lsl #2
    ad7c:	06db0100 	ldrbeq	r0, [fp], r0, lsl #2
    ad80:	70210000 	eorvc	r0, r1, r0
    ad84:	01007968 	tsteq	r0, r8, ror #18
    ad88:	00811e21 	addeq	r1, r1, r1, lsr #28
    ad8c:	66210000 	strtvs	r0, [r1], -r0
    ad90:	21010064 	tstcs	r1, r4, rrx
    ad94:	00008127 	andeq	r8, r0, r7, lsr #2
    ad98:	18af2200 	stmiane	pc!, {r9, sp}	; <UNPREDICTABLE>
    ad9c:	21010000 	mrscs	r0, (UNDEF: 1)
    ada0:	0000b533 	andeq	fp, r0, r3, lsr r5
    ada4:	00692300 	rsbeq	r2, r9, r0, lsl #6
    ada8:	81062501 	tsthi	r6, r1, lsl #10
    adac:	00000000 	andeq	r0, r0, r0
    adb0:	00069b24 	andeq	r9, r6, r4, lsr #22
    adb4:	00312400 	eorseq	r2, r1, r0, lsl #8
    adb8:	00316c00 	eorseq	r6, r1, r0, lsl #24
    adbc:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    adc0:	000006ad 	andeq	r0, r0, sp, lsr #13
    adc4:	00002dda 	ldrdeq	r2, [r0], -sl
    adc8:	0006b925 	andeq	fp, r6, r5, lsr #18
    adcc:	002df800 	eoreq	pc, sp, r0, lsl #16
    add0:	06c42500 	strbeq	r2, [r4], r0, lsl #10
    add4:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    add8:	d0260000 	eorle	r0, r6, r0
    addc:	27000006 	strcs	r0, [r0, -r6]
    ade0:	0000069b 	muleq	r0, fp, r6
    ade4:	0000315a 	andeq	r3, r0, sl, asr r1
    ade8:	0000316c 	andeq	r3, r0, ip, ror #2
    adec:	280c2101 	stmdacs	ip, {r0, r8, sp}
    adf0:	000006ad 	andeq	r0, r0, sp, lsr #13
    adf4:	b9285501 	stmdblt	r8!, {r0, r8, sl, ip, lr}
    adf8:	01000006 	tsteq	r0, r6
    adfc:	06c42956 			; <UNDEFINED> instruction: 0x06c42956
    ae00:	d0260000 	eorle	r0, r6, r0
    ae04:	00000006 	andeq	r0, r0, r6
    ae08:	042d0000 	strteq	r0, [sp], #-0
    ae0c:	00030000 	andeq	r0, r3, r0
    ae10:	000027fc 	strdeq	r2, [r0], -ip
    ae14:	00ac0104 	adceq	r0, ip, r4, lsl #2
    ae18:	eb0c0000 	bl	30ae20 <__ccfg+0x2eae78>
    ae1c:	0a000027 	beq	aec0 <__exidx_end+0x5280>
    ae20:	7000000e 	andvc	r0, r0, lr
    ae24:	0000000f 	andeq	r0, r0, pc
    ae28:	90000000 	andls	r0, r0, r0
    ae2c:	02000066 	andeq	r0, r0, #102	; 0x66
    ae30:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    ae34:	02020000 	andeq	r0, r2, #0
    ae38:	000a6b05 	andeq	r6, sl, r5, lsl #22
    ae3c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    ae40:	000007fd 	strdeq	r0, [r0], -sp
    ae44:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    ae48:	03000007 	movweq	r0, #7
    ae4c:	00002a1c 	andeq	r2, r0, ip, lsl sl
    ae50:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    ae54:	02000000 	andeq	r0, r0, #0
    ae58:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    ae5c:	12030000 	andne	r0, r3, #0
    ae60:	0200002e 	andeq	r0, r0, #46	; 0x2e
    ae64:	00601931 	rsbeq	r1, r0, r1, lsr r9
    ae68:	02020000 	andeq	r0, r2, #0
    ae6c:	000d6607 	andeq	r6, sp, r7, lsl #12
    ae70:	29b40300 	ldmibcs	r4!, {r8, r9}
    ae74:	34020000 	strcc	r0, [r2], #-0
    ae78:	00007319 	andeq	r7, r0, r9, lsl r3
    ae7c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ae80:	00000426 	andeq	r0, r0, r6, lsr #8
    ae84:	21070802 	tstcs	r7, r2, lsl #16
    ae88:	04000004 	streq	r0, [r0], #-4
    ae8c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    ae90:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    ae94:	00042b07 	andeq	r2, r4, r7, lsl #22
    ae98:	28fb0300 	ldmcs	fp!, {r8, r9}^
    ae9c:	27030000 	strcs	r0, [r3, -r0]
    aea0:	00005412 	andeq	r5, r0, r2, lsl r4
    aea4:	008f0500 	addeq	r0, pc, r0, lsl #10
    aea8:	c2030000 	andgt	r0, r3, #0
    aeac:	0300001d 	movweq	r0, #29
    aeb0:	0041122b 	subeq	r1, r1, fp, lsr #4
    aeb4:	a0060000 	andge	r0, r6, r0
    aeb8:	03000000 	movweq	r0, #0
    aebc:	0000294d 	andeq	r2, r0, sp, asr #18
    aec0:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    aec4:	05000000 	streq	r0, [r0, #-0]
    aec8:	000000b1 	strheq	r0, [r0], -r1
    aecc:	00064603 	andeq	r4, r6, r3, lsl #12
    aed0:	122d0300 	eorne	r0, sp, #0, 6
    aed4:	00000067 	andeq	r0, r0, r7, rrx
    aed8:	32030807 	andcc	r0, r3, #458752	; 0x70000
    aedc:	00015c09 	andeq	r5, r1, r9, lsl #24
    aee0:	00340800 	eorseq	r0, r4, r0, lsl #16
    aee4:	34030000 	strcc	r0, [r3], #-0
    aee8:	0000a007 	andeq	sl, r0, r7
    aeec:	07010100 	streq	r0, [r1, -r0, lsl #2]
    aef0:	064c0800 	strbeq	r0, [ip], -r0, lsl #16
    aef4:	35030000 	strcc	r0, [r3, #-0]
    aef8:	0000a003 	andeq	sl, r0, r3
    aefc:	06010100 	streq	r0, [r1], -r0, lsl #2
    af00:	02e70800 	rsceq	r0, r7, #0, 16
    af04:	36030000 	strcc	r0, [r3], -r0
    af08:	0000a003 	andeq	sl, r0, r3
    af0c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    af10:	06b70800 	ldrteq	r0, [r7], r0, lsl #16
    af14:	37030000 	strcc	r0, [r3, -r0]
    af18:	0000a003 	andeq	sl, r0, r3
    af1c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    af20:	0a9f0800 	beq	fe7ccf28 <_estack+0xde7c7f28>
    af24:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    af28:	0000a003 	andeq	sl, r0, r3
    af2c:	00040100 	andeq	r0, r4, r0, lsl #2
    af30:	065b0900 	ldrbeq	r0, [fp], -r0, lsl #18
    af34:	3a030000 	bcc	caf3c <__ccfg+0xaaf94>
    af38:	0000a007 	andeq	sl, r0, r7
    af3c:	fb090100 	blx	24b346 <__ccfg+0x22b39e>
    af40:	03000008 	movweq	r0, #8
    af44:	00a0033c 	adceq	r0, r0, ip, lsr r3
    af48:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    af4c:	00000f3a 	andeq	r0, r0, sl, lsr pc
    af50:	a0033d03 	andge	r3, r3, r3, lsl #26
    af54:	03000000 	movweq	r0, #0
    af58:	00091309 	andeq	r1, r9, r9, lsl #6
    af5c:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    af60:	000000b1 	strheq	r0, [r0], -r1
    af64:	1d030004 	stcne	0, cr0, [r3, #-16]
    af68:	03000003 	movweq	r0, #3
    af6c:	00ce0341 	sbceq	r0, lr, r1, asr #6
    af70:	5c060000 	stcpl	0, cr0, [r6], {-0}
    af74:	0a000001 	beq	af80 <__exidx_end+0x5340>
    af78:	000006be 			; <UNDEFINED> instruction: 0x000006be
    af7c:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    af80:	01000001 	tsteq	r0, r1
    af84:	01a00a01 	lsleq	r0, r1, #20
    af88:	45030000 	strmi	r0, [r3, #-0]
    af8c:	0001890e 	andeq	r8, r1, lr, lsl #18
    af90:	0b010100 	bleq	4b398 <__ccfg+0x2b3f0>
    af94:	00018f04 	andeq	r8, r1, r4, lsl #30
    af98:	08010200 	stmdaeq	r1, {r9}
    af9c:	00000c64 	andeq	r0, r0, r4, ror #24
    afa0:	00018f05 	andeq	r8, r1, r5, lsl #30
    afa4:	03260a00 			; <UNDEFINED> instruction: 0x03260a00
    afa8:	45030000 	strmi	r0, [r3, #-0]
    afac:	0001891e 	andeq	r8, r1, lr, lsl r9
    afb0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    afb4:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    afb8:	000001da 	ldrdeq	r0, [r0], -sl
    afbc:	000cd809 	andeq	sp, ip, r9, lsl #16
    afc0:	0b900400 	bleq	fe40bfc8 <_estack+0xde406fc8>
    afc4:	00000067 	andeq	r0, r0, r7, rrx
    afc8:	10750900 	rsbsne	r0, r5, r0, lsl #18
    afcc:	91040000 	mrsls	r0, (UNDEF: 4)
    afd0:	00008f08 	andeq	r8, r0, r8, lsl #30
    afd4:	c5090400 	strgt	r0, [r9, #-1024]	; 0xfffffc00
    afd8:	04000001 	streq	r0, [r0], #-1
    afdc:	00ac1092 	umlaleq	r1, ip, r2, r0
    afe0:	00060000 	andeq	r0, r6, r0
    afe4:	000ccc03 	andeq	ip, ip, r3, lsl #24
    afe8:	03930400 	orrseq	r0, r3, #0, 8
    afec:	000001a9 	andeq	r0, r0, r9, lsr #3
    aff0:	0001da0c 	andeq	sp, r1, ip, lsl #20
    aff4:	0001f100 	andeq	pc, r1, r0, lsl #2
    aff8:	0a000d00 	beq	e400 <__exidx_end+0x87c0>
    affc:	0000093d 	andeq	r0, r0, sp, lsr r9
    b000:	e60f9904 	str	r9, [pc], -r4, lsl #18
    b004:	01000001 	tsteq	r0, r1
    b008:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    b00c:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    b010:	1a080000 	bne	20b018 <__ccfg+0x1eb070>
    b014:	05000009 	streq	r0, [r0, #-9]
    b018:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    b01c:	07010000 	streq	r0, [r1, -r0]
    b020:	cc080001 	stcgt	0, cr0, [r8], {1}
    b024:	05000005 	streq	r0, [r0, #-5]
    b028:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    b02c:	01010000 	mrseq	r0, (UNDEF: 1)
    b030:	03000000 	movweq	r0, #0
    b034:	00000aab 	andeq	r0, r0, fp, lsr #21
    b038:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    b03c:	05000001 	streq	r0, [r0, #-1]
    b040:	00000229 	andeq	r0, r0, r9, lsr #4
    b044:	0002350c 	andeq	r3, r2, ip, lsl #10
    b048:	00024500 	andeq	r4, r2, r0, lsl #10
    b04c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b050:	0000023a 	andeq	r0, r0, sl, lsr r2
    b054:	0003aa0a 	andeq	sl, r3, sl, lsl #20
    b058:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    b05c:	00000245 	andeq	r0, r0, r5, asr #4
    b060:	9b0c0101 	blls	30b46c <__ccfg+0x2eb4c4>
    b064:	63000000 	movwvs	r0, #0
    b068:	0d000002 	stceq	0, cr0, [r0, #-8]
    b06c:	02580500 	subseq	r0, r8, #0, 10
    b070:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    b074:	06000006 	streq	r0, [r0], -r6
    b078:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    b07c:	01010000 	mrseq	r0, (UNDEF: 1)
    b080:	0008dd0a 	andeq	sp, r8, sl, lsl #26
    b084:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    b088:	000000b1 	strheq	r0, [r0], -r1
    b08c:	720e0101 	andvc	r0, lr, #1073741824	; 0x40000000
    b090:	0700000c 	streq	r0, [r0, -ip]
    b094:	9110016e 	tstls	r0, lr, ror #2
    b098:	0b000002 	bleq	b0a8 <__exidx_end+0x5468>
    b09c:	00029704 	andeq	r9, r2, r4, lsl #14
    b0a0:	a3010f00 	movwge	r0, #7936	; 0x1f00
    b0a4:	10000002 	andne	r0, r0, r2
    b0a8:	0000008f 	andeq	r0, r0, pc, lsl #1
    b0ac:	01960c00 	orrseq	r0, r6, r0, lsl #24
    b0b0:	02ae0000 	adceq	r0, lr, #0
    b0b4:	000d0000 	andeq	r0, sp, r0
    b0b8:	0002a305 	andeq	sl, r2, r5, lsl #6
    b0bc:	09e61100 	stmibeq	r6!, {r8, ip}^
    b0c0:	7f070000 	svcvc	0x00070000
    b0c4:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    b0c8:	01010000 	mrseq	r0, (UNDEF: 1)
    b0cc:	00039611 	andeq	r9, r3, r1, lsl r6
    b0d0:	01820700 	orreq	r0, r2, r0, lsl #14
    b0d4:	0000bd14 	andeq	fp, r0, r4, lsl sp
    b0d8:	11010100 	mrsne	r0, (UNDEF: 17)
    b0dc:	0000036e 	andeq	r0, r0, lr, ror #6
    b0e0:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    b0e4:	000000b1 	strheq	r0, [r0], -r1
    b0e8:	08120101 	ldmdaeq	r2, {r0, r8}
    b0ec:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    b0f0:	00000307 	andeq	r0, r0, r7, lsl #6
    b0f4:	003ca113 	eorseq	sl, ip, r3, lsl r1
    b0f8:	03070700 	movweq	r0, #30464	; 0x7700
    b0fc:	00008f07 	andeq	r8, r0, r7, lsl #30
    b100:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    b104:	0700000f 	streq	r0, [r0, -pc]
    b108:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    b10c:	04000000 	streq	r0, [r0], #-0
    b110:	0a090e00 	beq	24e918 <__ccfg+0x22e970>
    b114:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    b118:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    b11c:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    b120:	30000000 	andcc	r0, r0, r0
    b124:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    b128:	00000377 	andeq	r0, r0, r7, ror r3
    b12c:	001f2413 	andseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
    b130:	03140700 	tsteq	r4, #0, 14
    b134:	00008f08 	andeq	r8, r0, r8, lsl #30
    b138:	e7130000 	ldr	r0, [r3, -r0]
    b13c:	0700000b 	streq	r0, [r0, -fp]
    b140:	8f080315 	svchi	0x00080315
    b144:	02000000 	andeq	r0, r0, #0
    b148:	004c8e13 	subeq	r8, ip, r3, lsl lr
    b14c:	03160700 	tsteq	r6, #0, 14
    b150:	0002840b 	andeq	r8, r2, fp, lsl #8
    b154:	54130400 	ldrpl	r0, [r3], #-1024	; 0xfffffc00
    b158:	07000047 	streq	r0, [r0, -r7, asr #32]
    b15c:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    b160:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b164:	00000f13 	andeq	r0, r0, r3, lsl pc
    b168:	03180700 	tsteq	r8, #0, 14
    b16c:	0003770f 	andeq	r7, r3, pc, lsl #14
    b170:	5d130c00 	ldcpl	12, cr0, [r3, #-0]
    b174:	07000009 	streq	r0, [r0, -r9]
    b178:	87150319 			; <UNDEFINED> instruction: 0x87150319
    b17c:	2c000003 	stccs	0, cr0, [r0], {3}
    b180:	03070c00 	movweq	r0, #31744	; 0x7c00
    b184:	03870000 	orreq	r0, r7, #0
    b188:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    b18c:	03000000 	movweq	r0, #0
    b190:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    b194:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    b198:	00000bdc 	ldrdeq	r0, [r0], -ip
    b19c:	1b031c07 	blne	d21c0 <__ccfg+0xb2218>
    b1a0:	00000314 	andeq	r0, r0, r4, lsl r3
    b1a4:	000bbc11 	andeq	fp, fp, r1, lsl ip
    b1a8:	031e0700 	tsteq	lr, #0, 14
    b1ac:	0003a914 	andeq	sl, r3, r4, lsl r9
    b1b0:	0b010100 	bleq	4b5b8 <__ccfg+0x2b610>
    b1b4:	00038d04 	andeq	r8, r3, r4, lsl #26
    b1b8:	30011600 	andcc	r1, r1, r0, lsl #12
    b1bc:	01000028 	tsteq	r0, r8, lsr #32
    b1c0:	6c01011d 	stfvss	f0, [r1], {29}
    b1c4:	dc000031 	stcle	0, cr0, [r0], {49}	; 0x31
    b1c8:	01000031 	tsteq	r0, r1, lsr r0
    b1cc:	00042a9c 	muleq	r4, ip, sl
    b1d0:	0c331700 	ldceq	7, cr1, [r3], #-0
    b1d4:	1d010000 	stcne	0, cr0, [r1, #-0]
    b1d8:	00008f01 	andeq	r8, r0, r1, lsl #30
    b1dc:	002e3400 	eoreq	r3, lr, r0, lsl #8
    b1e0:	47541800 	ldrbmi	r1, [r4, -r0, lsl #16]
    b1e4:	1d010000 	stcne	0, cr0, [r1, #-0]
    b1e8:	00042a01 	andeq	r2, r4, r1, lsl #20
    b1ec:	002e5d00 	eoreq	r5, lr, r0, lsl #26
    b1f0:	283c1900 	ldmdacs	ip!, {r8, fp, ip}
    b1f4:	30010000 	andcc	r0, r1, r0
    b1f8:	0f581a01 	svceq	0x00581a01
    b1fc:	701b0000 	andsvc	r0, fp, r0
    b200:	01007274 	tsteq	r0, r4, ror r2
    b204:	042a1522 	strteq	r1, [sl], #-1314	; 0xfffffade
    b208:	03050000 	movweq	r0, #20480	; 0x5000
    b20c:	2000061c 	andcs	r0, r0, ip, lsl r6
    b210:	6e656c1b 	mcrvs	12, 3, r6, cr5, cr11, {0}
    b214:	0d230100 	stfeqs	f0, [r3, #-0]
    b218:	00000081 	andeq	r0, r0, r1, lsl #1
    b21c:	06180305 	ldreq	r0, [r8], -r5, lsl #6
    b220:	e5182000 	ldr	r2, [r8, #-0]
    b224:	01000027 	tsteq	r0, r7, lsr #32
    b228:	00810624 	addeq	r0, r1, r4, lsr #12
    b22c:	2e870000 	cdpcs	0, 8, cr0, cr7, cr0, {0}
    b230:	00000000 	andeq	r0, r0, r0
    b234:	0196040b 	orrseq	r0, r6, fp, lsl #8
    b238:	40000000 	andmi	r0, r0, r0
    b23c:	03000004 	movweq	r0, #4
    b240:	00297000 	eoreq	r7, r9, r0
    b244:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    b248:	0c000000 	stceq	0, cr0, [r0], {-0}
    b24c:	00002852 	andeq	r2, r0, r2, asr r8
    b250:	00000e0a 	andeq	r0, r0, sl, lsl #28
    b254:	00000fa0 	andeq	r0, r0, r0, lsr #31
    b258:	00000000 	andeq	r0, r0, r0
    b25c:	00006838 	andeq	r6, r0, r8, lsr r8
    b260:	5d060102 	stfpls	f0, [r6, #-8]
    b264:	0200000c 	andeq	r0, r0, #12
    b268:	0a6b0502 	beq	1acc678 <__ccfg+0x1aac6d0>
    b26c:	04020000 	streq	r0, [r2], #-0
    b270:	0007fd05 	andeq	pc, r7, r5, lsl #26
    b274:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    b278:	000007f8 	strdeq	r0, [r0], -r8
    b27c:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    b280:	182e0200 	stmdane	lr!, {r9}
    b284:	0000004d 	andeq	r0, r0, sp, asr #32
    b288:	5b080102 	blpl	20b698 <__ccfg+0x1eb6f0>
    b28c:	0300000c 	movweq	r0, #12
    b290:	00002e12 	andeq	r2, r0, r2, lsl lr
    b294:	60193102 	andsvs	r3, r9, r2, lsl #2
    b298:	02000000 	andeq	r0, r0, #0
    b29c:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    b2a0:	b4030000 	strlt	r0, [r3], #-0
    b2a4:	02000029 	andeq	r0, r0, #41	; 0x29
    b2a8:	00731934 	rsbseq	r1, r3, r4, lsr r9
    b2ac:	04020000 	streq	r0, [r2], #-0
    b2b0:	00042607 	andeq	r2, r4, r7, lsl #12
    b2b4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    b2b8:	00000421 	andeq	r0, r0, r1, lsr #8
    b2bc:	69050404 	stmdbvs	r5, {r2, sl}
    b2c0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    b2c4:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    b2c8:	fb030000 	blx	cb2d2 <__ccfg+0xab32a>
    b2cc:	03000028 	movweq	r0, #40	; 0x28
    b2d0:	00541227 	subseq	r1, r4, r7, lsr #4
    b2d4:	8f050000 	svchi	0x00050000
    b2d8:	03000000 	movweq	r0, #0
    b2dc:	00001dc2 	andeq	r1, r0, r2, asr #27
    b2e0:	41122b03 	tstmi	r2, r3, lsl #22
    b2e4:	06000000 	streq	r0, [r0], -r0
    b2e8:	000000a0 	andeq	r0, r0, r0, lsr #1
    b2ec:	00294d03 	eoreq	r4, r9, r3, lsl #26
    b2f0:	122c0300 	eorne	r0, ip, #0, 6
    b2f4:	00000067 	andeq	r0, r0, r7, rrx
    b2f8:	0000b105 	andeq	fp, r0, r5, lsl #2
    b2fc:	06460300 	strbeq	r0, [r6], -r0, lsl #6
    b300:	2d030000 	stccs	0, cr0, [r3, #-0]
    b304:	00006712 	andeq	r6, r0, r2, lsl r7
    b308:	0bb40300 	bleq	fed0bf10 <_estack+0xded06f10>
    b30c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    b310:	0000da10 	andeq	sp, r0, r0, lsl sl
    b314:	8f040700 	svchi	0x00040700
    b318:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b31c:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    b320:	0000016e 	andeq	r0, r0, lr, ror #2
    b324:	00003409 	andeq	r3, r0, r9, lsl #8
    b328:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    b32c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b330:	00070101 	andeq	r0, r7, r1, lsl #2
    b334:	00064c09 	andeq	r4, r6, r9, lsl #24
    b338:	03350300 	teqeq	r5, #0, 6
    b33c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b340:	00060101 	andeq	r0, r6, r1, lsl #2
    b344:	0002e709 	andeq	lr, r2, r9, lsl #14
    b348:	03360300 	teqeq	r6, #0, 6
    b34c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b350:	00050101 	andeq	r0, r5, r1, lsl #2
    b354:	0006b709 	andeq	fp, r6, r9, lsl #14
    b358:	03370300 	teqeq	r7, #0, 6
    b35c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b360:	00040101 	andeq	r0, r4, r1, lsl #2
    b364:	000a9f09 	andeq	r9, sl, r9, lsl #30
    b368:	03380300 	teqeq	r8, #0, 6
    b36c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b370:	00000401 	andeq	r0, r0, r1, lsl #8
    b374:	00065b0a 	andeq	r5, r6, sl, lsl #22
    b378:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    b37c:	000000a0 	andeq	r0, r0, r0, lsr #1
    b380:	08fb0a01 	ldmeq	fp!, {r0, r9, fp}^
    b384:	3c030000 	stccc	0, cr0, [r3], {-0}
    b388:	0000a003 	andeq	sl, r0, r3
    b38c:	3a0a0200 	bcc	28bb94 <__ccfg+0x26bbec>
    b390:	0300000f 	movweq	r0, #15
    b394:	00a0033d 	adceq	r0, r0, sp, lsr r3
    b398:	0a030000 	beq	cb3a0 <__ccfg+0xab3f8>
    b39c:	00000913 	andeq	r0, r0, r3, lsl r9
    b3a0:	b1083f03 	tstlt	r8, r3, lsl #30
    b3a4:	04000000 	streq	r0, [r0], #-0
    b3a8:	031d0300 	tsteq	sp, #0, 6
    b3ac:	41030000 	mrsmi	r0, (UNDEF: 3)
    b3b0:	0000e003 	andeq	lr, r0, r3
    b3b4:	016e0600 	cmneq	lr, r0, lsl #12
    b3b8:	be0b0000 	cdplt	0, 0, cr0, cr11, cr0, {0}
    b3bc:	03000006 	movweq	r0, #6
    b3c0:	017a1a43 	cmneq	sl, r3, asr #20
    b3c4:	01010000 	mrseq	r0, (UNDEF: 1)
    b3c8:	0001a00b 	andeq	sl, r1, fp
    b3cc:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    b3d0:	0000019b 	muleq	r0, fp, r1
    b3d4:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    b3d8:	000001a1 	andeq	r0, r0, r1, lsr #3
    b3dc:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    b3e0:	0500000c 	streq	r0, [r0, #-12]
    b3e4:	000001a1 	andeq	r0, r0, r1, lsr #3
    b3e8:	0003260b 	andeq	r2, r3, fp, lsl #12
    b3ec:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    b3f0:	0000019b 	muleq	r0, fp, r1
    b3f4:	08080101 	stmdaeq	r8, {r0, r8}
    b3f8:	ec098f04 	stc	15, cr8, [r9], {4}
    b3fc:	0a000001 	beq	b408 <__exidx_end+0x57c8>
    b400:	00000cd8 	ldrdeq	r0, [r0], -r8
    b404:	670b9004 	strvs	r9, [fp, -r4]
    b408:	00000000 	andeq	r0, r0, r0
    b40c:	0010750a 	andseq	r7, r0, sl, lsl #10
    b410:	08910400 	ldmeq	r1, {sl}
    b414:	0000008f 	andeq	r0, r0, pc, lsl #1
    b418:	01c50a04 	biceq	r0, r5, r4, lsl #20
    b41c:	92040000 	andls	r0, r4, #0
    b420:	0000ac10 	andeq	sl, r0, r0, lsl ip
    b424:	03000600 	movweq	r0, #1536	; 0x600
    b428:	00000ccc 	andeq	r0, r0, ip, asr #25
    b42c:	bb039304 	bllt	f0044 <__ccfg+0xd009c>
    b430:	0c000001 	stceq	0, cr0, [r0], {1}
    b434:	000001ec 	andeq	r0, r0, ip, ror #3
    b438:	00000203 	andeq	r0, r0, r3, lsl #4
    b43c:	3d0b000d 	stccc	0, cr0, [fp, #-52]	; 0xffffffcc
    b440:	04000009 	streq	r0, [r0], #-9
    b444:	01f80f99 			; <UNDEFINED> instruction: 0x01f80f99
    b448:	01010000 	mrseq	r0, (UNDEF: 1)
    b44c:	91050108 	tstls	r5, r8, lsl #2
    b450:	00023b09 	andeq	r3, r2, r9, lsl #22
    b454:	091a0900 	ldmdbeq	sl, {r8, fp}
    b458:	93050000 	movwls	r0, #20480	; 0x5000
    b45c:	0000a007 	andeq	sl, r0, r7
    b460:	01070100 	mrseq	r0, (UNDEF: 23)
    b464:	05cc0900 	strbeq	r0, [ip, #2304]	; 0x900
    b468:	94050000 	strls	r0, [r5], #-0
    b46c:	0000a003 	andeq	sl, r0, r3
    b470:	00010100 	andeq	r0, r1, r0, lsl #2
    b474:	ab030000 	blge	cb47c <__ccfg+0xab4d4>
    b478:	0500000a 	streq	r0, [r0, #-10]
    b47c:	02110396 	andseq	r0, r1, #1476395010	; 0x58000002
    b480:	3b050000 	blcc	14b488 <__ccfg+0x12b4e0>
    b484:	0c000002 	stceq	0, cr0, [r0], {2}
    b488:	00000247 	andeq	r0, r0, r7, asr #4
    b48c:	00000257 	andeq	r0, r0, r7, asr r2
    b490:	4c05000d 	stcmi	0, cr0, [r5], {13}
    b494:	0b000002 	bleq	b4a4 <__exidx_end+0x5864>
    b498:	000003aa 	andeq	r0, r0, sl, lsr #7
    b49c:	57179c05 	ldrpl	r9, [r7, -r5, lsl #24]
    b4a0:	01000002 	tsteq	r0, r2
    b4a4:	009b0c01 	addseq	r0, fp, r1, lsl #24
    b4a8:	02750000 	rsbseq	r0, r5, #0
    b4ac:	000d0000 	andeq	r0, sp, r0
    b4b0:	00026a05 	andeq	r6, r2, r5, lsl #20
    b4b4:	060e0b00 	streq	r0, [lr], -r0, lsl #22
    b4b8:	06060000 	streq	r0, [r6], -r0
    b4bc:	00027513 	andeq	r7, r2, r3, lsl r5
    b4c0:	0b010100 	bleq	4b8c8 <__ccfg+0x2b920>
    b4c4:	000008dd 	ldrdeq	r0, [r0], -sp
    b4c8:	b10ec304 	tstlt	lr, r4, lsl #6
    b4cc:	01000000 	mrseq	r0, (UNDEF: 0)
    b4d0:	0c720e01 	ldcleq	14, cr0, [r2], #-4
    b4d4:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    b4d8:	02a31001 	adceq	r1, r3, #1
    b4dc:	04070000 	streq	r0, [r7], #-0
    b4e0:	000002a9 	andeq	r0, r0, r9, lsr #5
    b4e4:	02b5010f 	adcseq	r0, r5, #-1073741821	; 0xc0000003
    b4e8:	8f100000 	svchi	0x00100000
    b4ec:	00000000 	andeq	r0, r0, r0
    b4f0:	0001a80c 	andeq	sl, r1, ip, lsl #16
    b4f4:	0002c000 	andeq	ip, r2, r0
    b4f8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    b4fc:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    b500:	0009e611 	andeq	lr, r9, r1, lsl r6
    b504:	017f0700 	cmneq	pc, r0, lsl #14
    b508:	0002c016 	andeq	ip, r2, r6, lsl r0
    b50c:	11010100 	mrsne	r0, (UNDEF: 17)
    b510:	00000396 	muleq	r0, r6, r3
    b514:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    b518:	000000bd 	strheq	r0, [r0], -sp
    b51c:	6e110101 	mufvss	f0, f1, f1
    b520:	07000003 	streq	r0, [r0, -r3]
    b524:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    b528:	01000000 	mrseq	r0, (UNDEF: 0)
    b52c:	07081201 	streq	r1, [r8, -r1, lsl #4]
    b530:	19090303 	stmdbne	r9, {r0, r1, r8, r9}
    b534:	13000003 	movwne	r0, #3
    b538:	00003ca1 	andeq	r3, r0, r1, lsr #25
    b53c:	07030707 	streq	r0, [r3, -r7, lsl #14]
    b540:	0000008f 	andeq	r0, r0, pc, lsl #1
    b544:	0fcd1300 	svceq	0x00cd1300
    b548:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    b54c:	00c20803 	sbceq	r0, r2, r3, lsl #16
    b550:	00040000 	andeq	r0, r4, r0
    b554:	000a090e 	andeq	r0, sl, lr, lsl #18
    b558:	03090700 	movweq	r0, #38656	; 0x9700
    b55c:	0002f203 	andeq	pc, r2, r3, lsl #4
    b560:	00291400 	eoreq	r1, r9, r0, lsl #8
    b564:	07300000 	ldreq	r0, [r0, -r0]!
    b568:	8908030b 	stmdbhi	r8, {r0, r1, r3, r8, r9}
    b56c:	13000003 	movwne	r0, #3
    b570:	00001f24 	andeq	r1, r0, r4, lsr #30
    b574:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    b578:	0000008f 	andeq	r0, r0, pc, lsl #1
    b57c:	0be71300 	bleq	ff9d0184 <_estack+0xdf9cb184>
    b580:	15070000 	strne	r0, [r7, #-0]
    b584:	008f0803 	addeq	r0, pc, r3, lsl #16
    b588:	13020000 	movwne	r0, #8192	; 0x2000
    b58c:	00004c8e 	andeq	r4, r0, lr, lsl #25
    b590:	0b031607 	bleq	d0db4 <__ccfg+0xb0e0c>
    b594:	00000296 	muleq	r0, r6, r2
    b598:	47541304 	ldrbmi	r1, [r4, -r4, lsl #6]
    b59c:	17070000 	strne	r0, [r7, -r0]
    b5a0:	00c20903 	sbceq	r0, r2, r3, lsl #18
    b5a4:	13080000 	movwne	r0, #32768	; 0x8000
    b5a8:	0000000f 	andeq	r0, r0, pc
    b5ac:	0f031807 	svceq	0x00031807
    b5b0:	00000389 	andeq	r0, r0, r9, lsl #7
    b5b4:	095d130c 	ldmdbeq	sp, {r2, r3, r8, r9, ip}^
    b5b8:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    b5bc:	03991503 	orrseq	r1, r9, #12582912	; 0xc00000
    b5c0:	002c0000 	eoreq	r0, ip, r0
    b5c4:	0003190c 	andeq	r1, r3, ip, lsl #18
    b5c8:	00039900 	andeq	r9, r3, r0, lsl #18
    b5cc:	00881500 	addeq	r1, r8, r0, lsl #10
    b5d0:	00030000 	andeq	r0, r3, r0
    b5d4:	03260407 			; <UNDEFINED> instruction: 0x03260407
    b5d8:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    b5dc:	0700000b 	streq	r0, [r0, -fp]
    b5e0:	261b031c 			; <UNDEFINED> instruction: 0x261b031c
    b5e4:	11000003 	tstne	r0, r3
    b5e8:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
    b5ec:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    b5f0:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    b5f4:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    b5f8:	0000039f 	muleq	r0, pc, r3	; <UNPREDICTABLE>
    b5fc:	001e5916 	andseq	r5, lr, r6, lsl r9
    b600:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    b604:	0000019b 	muleq	r0, fp, r1
    b608:	20030501 	andcs	r0, r3, r1, lsl #10
    b60c:	17200006 	strne	r0, [r0, -r6]!
    b610:	00284701 	eoreq	r4, r8, r1, lsl #14
    b614:	01230100 			; <UNDEFINED> instruction: 0x01230100
    b618:	0031dc01 	eorseq	sp, r1, r1, lsl #24
    b61c:	0032f800 	eorseq	pc, r2, r0, lsl #16
    b620:	189c0100 	ldmne	ip, {r8}
    b624:	00000c33 	andeq	r0, r0, r3, lsr ip
    b628:	8f012301 	svchi	0x00012301
    b62c:	9a000000 	bls	b634 <__exidx_end+0x59f4>
    b630:	1900002e 	stmdbne	r0, {r1, r2, r3, r5}
    b634:	00004754 	andeq	r4, r0, r4, asr r7
    b638:	ce012301 	cdpgt	3, 0, cr2, cr1, cr1, {0}
    b63c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    b640:	1a00002e 	bne	b700 <__exidx_end+0x5ac0>
    b644:	00000f80 	andeq	r0, r0, r0, lsl #31
    b648:	7274701b 	rsbsvc	r7, r4, #27
    b64c:	0f280100 	svceq	0x00280100
    b650:	0000019b 	muleq	r0, fp, r1
    b654:	06280305 	strteq	r0, [r8], -r5, lsl #6
    b658:	6c1b2000 	ldcvs	0, cr2, [fp], {-0}
    b65c:	01006e65 	tsteq	r0, r5, ror #28
    b660:	00810d29 	addeq	r0, r1, r9, lsr #26
    b664:	03050000 	movweq	r0, #20480	; 0x5000
    b668:	20000624 	andcs	r0, r0, r4, lsr #12
    b66c:	0027e519 	eoreq	lr, r7, r9, lsl r5
    b670:	062a0100 	strteq	r0, [sl], -r0, lsl #2
    b674:	00000081 	andeq	r0, r0, r1, lsl #1
    b678:	00002f0e 	andeq	r2, r0, lr, lsl #30
    b67c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    b680:	03000005 	movweq	r0, #5
    b684:	002ae800 	eoreq	lr, sl, r0, lsl #16
    b688:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    b68c:	0c000000 	stceq	0, cr0, [r0], {-0}
    b690:	00002896 	muleq	r0, r6, r8
    b694:	00000e0a 	andeq	r0, r0, sl, lsl #28
    b698:	00001028 	andeq	r1, r0, r8, lsr #32
    b69c:	00000000 	andeq	r0, r0, r0
    b6a0:	00006a8a 	andeq	r6, r0, sl, lsl #21
    b6a4:	5d060102 	stfpls	f0, [r6, #-8]
    b6a8:	0200000c 	andeq	r0, r0, #12
    b6ac:	0a6b0502 	beq	1accabc <__ccfg+0x1aacb14>
    b6b0:	04020000 	streq	r0, [r2], #-0
    b6b4:	0007fd05 	andeq	pc, r7, r5, lsl #26
    b6b8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    b6bc:	000007f8 	strdeq	r0, [r0], -r8
    b6c0:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    b6c4:	182e0200 	stmdane	lr!, {r9}
    b6c8:	0000004d 	andeq	r0, r0, sp, asr #32
    b6cc:	5b080102 	blpl	20badc <__ccfg+0x1ebb34>
    b6d0:	0300000c 	movweq	r0, #12
    b6d4:	00002e12 	andeq	r2, r0, r2, lsl lr
    b6d8:	60193102 	andsvs	r3, r9, r2, lsl #2
    b6dc:	02000000 	andeq	r0, r0, #0
    b6e0:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    b6e4:	b4030000 	strlt	r0, [r3], #-0
    b6e8:	02000029 	andeq	r0, r0, #41	; 0x29
    b6ec:	00731934 	rsbseq	r1, r3, r4, lsr r9
    b6f0:	04020000 	streq	r0, [r2], #-0
    b6f4:	00042607 	andeq	r2, r4, r7, lsl #12
    b6f8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    b6fc:	00000421 	andeq	r0, r0, r1, lsr #8
    b700:	69050404 	stmdbvs	r5, {r2, sl}
    b704:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    b708:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    b70c:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    b710:	03000005 	movweq	r0, #5
    b714:	009b1b28 	addseq	r1, fp, r8, lsr #22
    b718:	90050000 	andls	r0, r5, r0
    b71c:	0400000b 	streq	r0, [r0], #-11
    b720:	00b30009 	adcseq	r0, r3, r9
    b724:	6d060000 	stcvs	0, cr0, [r6, #-0]
    b728:	b3000008 	movwlt	r0, #8
    b72c:	00000000 	andeq	r0, r0, r0
    b730:	04070001 	streq	r0, [r7], #-1
    b734:	000b9203 	andeq	r9, fp, r3, lsl #4
    b738:	18630300 	stmdane	r3!, {r8, r9}^
    b73c:	0000008f 	andeq	r0, r0, pc, lsl #1
    b740:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    b744:	12270400 	eorne	r0, r7, #0, 8
    b748:	00000054 	andeq	r0, r0, r4, asr r0
    b74c:	0000c108 	andeq	ip, r0, r8, lsl #2
    b750:	1dc20300 	stclne	3, cr0, [r2]
    b754:	2b040000 	blcs	10b75c <__ccfg+0xeb7b4>
    b758:	00004112 	andeq	r4, r0, r2, lsl r1
    b75c:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    b760:	4d030000 	stcmi	0, cr0, [r3, #-0]
    b764:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    b768:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    b76c:	e3080000 	movw	r0, #32768	; 0x8000
    b770:	03000000 	movweq	r0, #0
    b774:	00000646 	andeq	r0, r0, r6, asr #12
    b778:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    b77c:	03000000 	movweq	r0, #0
    b780:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    b784:	0c102e04 	ldceq	14, cr2, [r0], {4}
    b788:	0a000001 	beq	b794 <__exidx_end+0x5b54>
    b78c:	0000c104 	andeq	ip, r0, r4, lsl #2
    b790:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
    b794:	01a00932 	lsreq	r0, r2, r9
    b798:	340c0000 	strcc	r0, [ip], #-0
    b79c:	04000000 	streq	r0, [r0], #-0
    b7a0:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    b7a4:	01010000 	mrseq	r0, (UNDEF: 1)
    b7a8:	4c0c0007 	stcmi	0, cr0, [ip], {7}
    b7ac:	04000006 	streq	r0, [r0], #-6
    b7b0:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    b7b4:	01010000 	mrseq	r0, (UNDEF: 1)
    b7b8:	e70c0006 	str	r0, [ip, -r6]
    b7bc:	04000002 	streq	r0, [r0], #-2
    b7c0:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    b7c4:	01010000 	mrseq	r0, (UNDEF: 1)
    b7c8:	b70c0005 	strlt	r0, [ip, -r5]
    b7cc:	04000006 	streq	r0, [r0], #-6
    b7d0:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    b7d4:	01010000 	mrseq	r0, (UNDEF: 1)
    b7d8:	9f0c0004 	svcls	0x000c0004
    b7dc:	0400000a 	streq	r0, [r0], #-10
    b7e0:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    b7e4:	04010000 	streq	r0, [r1], #-0
    b7e8:	5b0d0000 	blpl	34b7f0 <__ccfg+0x32b848>
    b7ec:	04000006 	streq	r0, [r0], #-6
    b7f0:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    b7f4:	0d010000 	stceq	0, cr0, [r1, #-0]
    b7f8:	000008fb 	strdeq	r0, [r0], -fp
    b7fc:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    b800:	02000000 	andeq	r0, r0, #0
    b804:	000f3a0d 	andeq	r3, pc, sp, lsl #20
    b808:	033d0400 	teqeq	sp, #0, 8
    b80c:	000000d2 	ldrdeq	r0, [r0], -r2
    b810:	09130d03 	ldmdbeq	r3, {r0, r1, r8, sl, fp}
    b814:	3f040000 	svccc	0x00040000
    b818:	0000e308 	andeq	lr, r0, r8, lsl #6
    b81c:	03000400 	movweq	r0, #1024	; 0x400
    b820:	0000031d 	andeq	r0, r0, sp, lsl r3
    b824:	12034104 	andne	r4, r3, #4, 2
    b828:	09000001 	stmdbeq	r0, {r0}
    b82c:	000001a0 	andeq	r0, r0, r0, lsr #3
    b830:	0006be0e 	andeq	fp, r6, lr, lsl #28
    b834:	1a430400 	bne	10cc83c <__ccfg+0x10ac894>
    b838:	000001ac 	andeq	r0, r0, ip, lsr #3
    b83c:	a00e0101 	andge	r0, lr, r1, lsl #2
    b840:	04000001 	streq	r0, [r0], #-1
    b844:	01cd0e45 	biceq	r0, sp, r5, asr #28
    b848:	01010000 	mrseq	r0, (UNDEF: 1)
    b84c:	01d3040a 	bicseq	r0, r3, sl, lsl #8
    b850:	01020000 	mrseq	r0, (UNDEF: 2)
    b854:	000c6408 	andeq	r6, ip, r8, lsl #8
    b858:	01d30800 	bicseq	r0, r3, r0, lsl #16
    b85c:	260e0000 	strcs	r0, [lr], -r0
    b860:	04000003 	streq	r0, [r0], #-3
    b864:	01cd1e45 	biceq	r1, sp, r5, asr #28
    b868:	01010000 	mrseq	r0, (UNDEF: 1)
    b86c:	8f05080b 	svchi	0x0005080b
    b870:	00021e09 	andeq	r1, r2, r9, lsl #28
    b874:	0cd80d00 	ldcleq	13, cr0, [r8], {0}
    b878:	90050000 	andls	r0, r5, r0
    b87c:	0000670b 	andeq	r6, r0, fp, lsl #14
    b880:	750d0000 	strvc	r0, [sp, #-0]
    b884:	05000010 	streq	r0, [r0, #-16]
    b888:	00c10891 	smulleq	r0, r1, r1, r8
    b88c:	0d040000 	stceq	0, cr0, [r4, #-0]
    b890:	000001c5 	andeq	r0, r0, r5, asr #3
    b894:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    b898:	06000000 	streq	r0, [r0], -r0
    b89c:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    b8a0:	93050000 	movwls	r0, #20480	; 0x5000
    b8a4:	0001ed03 	andeq	lr, r1, r3, lsl #26
    b8a8:	021e0f00 	andseq	r0, lr, #0, 30
    b8ac:	02350000 	eorseq	r0, r5, #0
    b8b0:	00100000 	andseq	r0, r0, r0
    b8b4:	00093d0e 	andeq	r3, r9, lr, lsl #26
    b8b8:	0f990500 	svceq	0x00990500
    b8bc:	0000022a 	andeq	r0, r0, sl, lsr #4
    b8c0:	010b0101 	tsteq	fp, r1, lsl #2
    b8c4:	6d099106 	stfvsd	f1, [r9, #-24]	; 0xffffffe8
    b8c8:	0c000002 	stceq	0, cr0, [r0], {2}
    b8cc:	0000091a 	andeq	r0, r0, sl, lsl r9
    b8d0:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    b8d4:	01000000 	mrseq	r0, (UNDEF: 0)
    b8d8:	0c000107 	stfeqs	f0, [r0], {7}
    b8dc:	000005cc 	andeq	r0, r0, ip, asr #11
    b8e0:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    b8e4:	01000000 	mrseq	r0, (UNDEF: 0)
    b8e8:	00000001 	andeq	r0, r0, r1
    b8ec:	000aab03 	andeq	sl, sl, r3, lsl #22
    b8f0:	03960600 	orrseq	r0, r6, #0, 12
    b8f4:	00000243 	andeq	r0, r0, r3, asr #4
    b8f8:	00026d08 	andeq	r6, r2, r8, lsl #26
    b8fc:	02790f00 	rsbseq	r0, r9, #0, 30
    b900:	02890000 	addeq	r0, r9, #0
    b904:	00100000 	andseq	r0, r0, r0
    b908:	00027e08 	andeq	r7, r2, r8, lsl #28
    b90c:	03aa0e00 			; <UNDEFINED> instruction: 0x03aa0e00
    b910:	9c060000 	stcls	0, cr0, [r6], {-0}
    b914:	00028917 	andeq	r8, r2, r7, lsl r9
    b918:	0f010100 	svceq	0x00010100
    b91c:	000000cd 	andeq	r0, r0, sp, asr #1
    b920:	000002a7 	andeq	r0, r0, r7, lsr #5
    b924:	9c080010 	stcls	0, cr0, [r8], {16}
    b928:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    b92c:	0000060e 	andeq	r0, r0, lr, lsl #12
    b930:	a7130607 	ldrge	r0, [r3, -r7, lsl #12]
    b934:	01000002 	tsteq	r0, r2
    b938:	08dd0e01 	ldmeq	sp, {r0, r9, sl, fp}^
    b93c:	c3050000 	movwgt	r0, #20480	; 0x5000
    b940:	0000e30e 	andeq	lr, r0, lr, lsl #6
    b944:	11010100 	mrsne	r0, (UNDEF: 17)
    b948:	00000c72 	andeq	r0, r0, r2, ror ip
    b94c:	10016e08 	andne	r6, r1, r8, lsl #28
    b950:	000002d5 	ldrdeq	r0, [r0], -r5
    b954:	02db040a 	sbcseq	r0, fp, #167772160	; 0xa000000
    b958:	01120000 	tsteq	r2, r0
    b95c:	000002e7 	andeq	r0, r0, r7, ror #5
    b960:	0000c113 	andeq	ip, r0, r3, lsl r1
    b964:	da0f0000 	ble	3cb96c <__ccfg+0x3ab9c4>
    b968:	f2000001 	vhadd.s8	d0, d0, d1
    b96c:	10000002 	andne	r0, r0, r2
    b970:	02e70800 	rsceq	r0, r7, #0, 16
    b974:	e6140000 	ldr	r0, [r4], -r0
    b978:	08000009 	stmdaeq	r0, {r0, r3}
    b97c:	f216017f 	vbic	q0, q3, <illegal reg q15.5>
    b980:	01000002 	tsteq	r0, r2
    b984:	03961401 	orrseq	r1, r6, #16777216	; 0x1000000
    b988:	82080000 	andhi	r0, r8, #0
    b98c:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    b990:	01010000 	mrseq	r0, (UNDEF: 1)
    b994:	00036e14 	andeq	r6, r3, r4, lsl lr
    b998:	02d80800 	sbcseq	r0, r8, #0, 16
    b99c:	0000e30e 	andeq	lr, r0, lr, lsl #6
    b9a0:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    b9a4:	03030808 	movweq	r0, #14344	; 0x3808
    b9a8:	00034b09 	andeq	r4, r3, r9, lsl #22
    b9ac:	3ca11600 	stccc	6, cr1, [r1]
    b9b0:	07080000 	streq	r0, [r8, -r0]
    b9b4:	00c10703 	sbceq	r0, r1, r3, lsl #14
    b9b8:	16000000 	strne	r0, [r0], -r0
    b9bc:	00000fcd 	andeq	r0, r0, sp, asr #31
    b9c0:	08030808 	stmdaeq	r3, {r3, fp}
    b9c4:	000000f4 	strdeq	r0, [r0], -r4
    b9c8:	09110004 	ldmdbeq	r1, {r2}
    b9cc:	0800000a 	stmdaeq	r0, {r1, r3}
    b9d0:	24030309 	strcs	r0, [r3], #-777	; 0xfffffcf7
    b9d4:	17000003 	strne	r0, [r0, -r3]
    b9d8:	00000029 	andeq	r0, r0, r9, lsr #32
    b9dc:	030b0830 	movweq	r0, #47152	; 0xb830
    b9e0:	0003bb08 	andeq	fp, r3, r8, lsl #22
    b9e4:	1f241600 	svcne	0x00241600
    b9e8:	14080000 	strne	r0, [r8], #-0
    b9ec:	00c10803 	sbceq	r0, r1, r3, lsl #16
    b9f0:	16000000 	strne	r0, [r0], -r0
    b9f4:	00000be7 	andeq	r0, r0, r7, ror #23
    b9f8:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    b9fc:	000000c1 	andeq	r0, r0, r1, asr #1
    ba00:	4c8e1602 	stcmi	6, cr1, [lr], {2}
    ba04:	16080000 	strne	r0, [r8], -r0
    ba08:	02c80b03 	sbceq	r0, r8, #3072	; 0xc00
    ba0c:	16040000 	strne	r0, [r4], -r0
    ba10:	00004754 	andeq	r4, r0, r4, asr r7
    ba14:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    ba18:	000000f4 	strdeq	r0, [r0], -r4
    ba1c:	000f1608 	andeq	r1, pc, r8, lsl #12
    ba20:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    ba24:	03bb0f03 			; <UNDEFINED> instruction: 0x03bb0f03
    ba28:	160c0000 	strne	r0, [ip], -r0
    ba2c:	0000095d 	andeq	r0, r0, sp, asr r9
    ba30:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    ba34:	000003cb 	andeq	r0, r0, fp, asr #7
    ba38:	4b0f002c 	blmi	3cbaf0 <__ccfg+0x3abb48>
    ba3c:	cb000003 	blgt	ba50 <__exidx_end+0x5e10>
    ba40:	18000003 	stmdane	r0, {r0, r1}
    ba44:	00000088 	andeq	r0, r0, r8, lsl #1
    ba48:	040a0003 	streq	r0, [sl], #-3
    ba4c:	00000358 	andeq	r0, r0, r8, asr r3
    ba50:	000bdc11 	andeq	sp, fp, r1, lsl ip
    ba54:	031c0800 	tsteq	ip, #0, 16
    ba58:	0003581b 	andeq	r5, r3, fp, lsl r8
    ba5c:	0bbc1400 	bleq	fef10a64 <_estack+0xdef0ba64>
    ba60:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    ba64:	03ed1403 	mvneq	r1, #50331648	; 0x3000000
    ba68:	01010000 	mrseq	r0, (UNDEF: 1)
    ba6c:	03d1040a 	bicseq	r0, r1, #167772160	; 0xa000000
    ba70:	01190000 	tsteq	r9, r0
    ba74:	000028ed 	andeq	r2, r0, sp, ror #17
    ba78:	01079101 	tsteq	r7, r1, lsl #2
    ba7c:	000001cd 	andeq	r0, r0, sp, asr #3
    ba80:	00003548 	andeq	r3, r0, r8, asr #10
    ba84:	00003598 	muleq	r0, r8, r5
    ba88:	04689c01 	strbteq	r9, [r8], #-3073	; 0xfffff3ff
    ba8c:	721a0000 	andsvc	r0, sl, #0
    ba90:	01007365 	tsteq	r0, r5, ror #6
    ba94:	01cd1491 			; <UNDEFINED> instruction: 0x01cd1491
    ba98:	2f2c0000 	svccs	0x002c0000
    ba9c:	661a0000 	ldrvs	r0, [sl], -r0
    baa0:	9101006d 	tstls	r1, sp, rrx
    baa4:	00046825 	andeq	r6, r4, r5, lsr #16
    baa8:	002f7600 	eoreq	r7, pc, r0, lsl #12
    baac:	71611a00 	cmnvc	r1, r0, lsl #20
    bab0:	31910100 	orrscc	r0, r1, r0, lsl #2
    bab4:	000000b5 	strheq	r0, [r0], -r5
    bab8:	00002fb5 			; <UNDEFINED> instruction: 0x00002fb5
    babc:	6c6d661b 	stclvs	6, cr6, [sp], #-108	; 0xffffff94
    bac0:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    bac4:	000000c1 	andeq	r0, r0, r1, asr #1
    bac8:	00002fe9 	andeq	r2, r0, r9, ror #31
    bacc:	0100641b 	tsteq	r0, fp, lsl r4
    bad0:	00c10c93 	smulleq	r0, r1, r3, ip
    bad4:	30070000 	andcc	r0, r7, r0
    bad8:	d51c0000 	ldrle	r0, [ip, #-0]
    badc:	01000028 	tsteq	r0, r8, lsr #32
    bae0:	3572019e 	ldrbcc	r0, [r2, #-414]!	; 0xfffffe62
    bae4:	0a000000 	beq	baec <__exidx_end+0x5eac>
    bae8:	0001da04 	andeq	sp, r1, r4, lsl #20
    baec:	e0011d00 	and	r1, r1, r0, lsl #26
    baf0:	01000028 	tsteq	r0, r8, lsr #32
    baf4:	c1010608 	tstgt	r1, r8, lsl #12
    baf8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    bafc:	48000033 	stmdami	r0, {r0, r1, r4, r5}
    bb00:	01000035 	tsteq	r0, r5, lsr r0
    bb04:	65721a9c 	ldrbvs	r1, [r2, #-2716]!	; 0xfffff564
    bb08:	08010073 	stmdaeq	r1, {r0, r1, r4, r5, r6}
    bb0c:	0001cd1a 	andeq	ip, r1, sl, lsl sp
    bb10:	00301a00 	eorseq	r1, r0, r0, lsl #20
    bb14:	006e1a00 	rsbeq	r1, lr, r0, lsl #20
    bb18:	c1240801 			; <UNDEFINED> instruction: 0xc1240801
    bb1c:	2d000000 	stccs	0, cr0, [r0, #-0]
    bb20:	1a000030 	bne	bbe8 <__exidx_end+0x5fa8>
    bb24:	01006d66 	tsteq	r0, r6, ror #26
    bb28:	04683308 	strbteq	r3, [r8], #-776	; 0xfffffcf8
    bb2c:	30400000 	subcc	r0, r0, r0
    bb30:	611a0000 	tstvs	sl, r0
    bb34:	08010070 	stmdaeq	r1, {r4, r5, r6}
    bb38:	0000b53f 	andeq	fp, r0, pc, lsr r5
    bb3c:	00306900 	eorseq	r6, r0, r0, lsl #18
    bb40:	00631b00 	rsbeq	r1, r3, r0, lsl #22
    bb44:	d3070a01 	movwle	r0, #31233	; 0x7a01
    bb48:	0b000001 	bleq	bb54 <__exidx_end+0x5f14>
    bb4c:	1e000031 	mcrne	0, 0, r0, cr0, cr1, {1}
    bb50:	0b010064 	bleq	4bce8 <__ccfg+0x2bd40>
    bb54:	0000c107 	andeq	ip, r0, r7, lsl #2
    bb58:	54910400 	ldrpl	r0, [r1], #1024	; 0x400
    bb5c:	db1f0623 	blle	7cd3f0 <__ccfg+0x7ad448>
    bb60:	01000028 	tsteq	r0, r8, lsr #32
    bb64:	f801070d 			; <UNDEFINED> instruction: 0xf801070d
    bb68:	18000032 	stmdane	r0, {r1, r4, r5}
    bb6c:	01000033 	tsteq	r0, r3, lsr r0
    bb70:	007c059c 			; <UNDEFINED> instruction: 0x007c059c
    bb74:	09060823 	stmdbeq	r6, {r0, r1, r5, fp}
    bb78:	20000005 	andcs	r0, r0, r5
    bb7c:	0d010063 	stceq	0, cr0, [r1, #-396]	; 0xfffffe74
    bb80:	0000c112 	andeq	ip, r0, r2, lsl r1
    bb84:	00500100 	subseq	r0, r0, r0, lsl #2
    bb88:	6c6f4521 	cfstr64vs	mvdx4, [pc], #-132	; bb0c <__exidx_end+0x5ecc>
    bb8c:	01880100 	orreq	r0, r8, r0, lsl #2
    bb90:	00003352 	andeq	r3, r0, r2, asr r3
    bb94:	74655221 	strbtvc	r5, [r5], #-545	; 0xfffffddf
    bb98:	018b0100 	orreq	r0, fp, r0, lsl #2
    bb9c:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
    bba0:	000fd822 	andeq	sp, pc, r2, lsr #16
    bba4:	00054500 	andeq	r4, r5, r0, lsl #10
    bba8:	61762300 	cmnvs	r6, r0, lsl #6
    bbac:	3a01006c 	bcc	4bd64 <__ccfg+0x2bdbc>
    bbb0:	0000c10a 	andeq	ip, r0, sl, lsl #2
    bbb4:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    bbb8:	81133a01 	tsthi	r3, r1, lsl #20
    bbbc:	f1000000 	cps	#0
    bbc0:	00000031 	andeq	r0, r0, r1, lsr r0
    bbc4:	000fb022 	andeq	fp, pc, r2, lsr #32
    bbc8:	00056d00 	andeq	r6, r5, r0, lsl #26
    bbcc:	61761b00 	cmnvs	r6, r0, lsl #22
    bbd0:	4601006c 	strmi	r0, [r1], -ip, rrx
    bbd4:	0000c10a 	andeq	ip, r0, sl, lsl #2
    bbd8:	00320400 	eorseq	r0, r2, r0, lsl #8
    bbdc:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    bbe0:	c10f4601 	tstgt	pc, r1, lsl #12
    bbe4:	2d000000 	stccs	0, cr0, [r0, #-0]
    bbe8:	00000032 	andeq	r0, r0, r2, lsr r0
    bbec:	00101022 	andseq	r1, r0, r2, lsr #32
    bbf0:	00059500 	andeq	r9, r5, r0, lsl #10
    bbf4:	61761b00 	cmnvs	r6, r0, lsl #22
    bbf8:	5501006c 	strpl	r0, [r1, #-108]	; 0xffffff94
    bbfc:	0000e30c 	andeq	lr, r0, ip, lsl #6
    bc00:	00325600 	eorseq	r5, r2, r0, lsl #12
    bc04:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    bc08:	e3115501 	tst	r1, #4194304	; 0x400000
    bc0c:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    bc10:	00000032 	andeq	r0, r0, r2, lsr r0
    bc14:	0034d624 	eorseq	sp, r4, r4, lsr #12
    bc18:	00350000 	eorseq	r0, r5, r0
    bc1c:	0005bf00 	andeq	fp, r5, r0, lsl #30
    bc20:	61761e00 	cmnvs	r6, r0, lsl #28
    bc24:	6001006c 	andvs	r0, r1, ip, rrx
    bc28:	0000e30c 	andeq	lr, r0, ip, lsl #6
    bc2c:	1b590100 	blne	164c034 <__ccfg+0x162c08c>
    bc30:	61010069 	tstvs	r1, r9, rrx
    bc34:	0000810a 	andeq	r8, r0, sl, lsl #2
    bc38:	00329200 	eorseq	r9, r2, r0, lsl #4
    bc3c:	f8220000 			; <UNDEFINED> instruction: 0xf8220000
    bc40:	d900000f 	stmdble	r0, {r0, r1, r2, r3}
    bc44:	1b000005 	blne	bc60 <__exidx_end+0x6020>
    bc48:	006c6176 	rsbeq	r6, ip, r6, ror r1
    bc4c:	c10a7101 	tstgt	sl, r1, lsl #2
    bc50:	a5000000 	strge	r0, [r0, #-0]
    bc54:	00000032 	andeq	r0, r0, r2, lsr r0
    bc58:	00351e25 	eorseq	r1, r5, r5, lsr #28
    bc5c:	00353a00 	eorseq	r3, r5, r0, lsl #20
    bc60:	74731b00 	ldrbtvc	r1, [r3], #-2816	; 0xfffff500
    bc64:	0b780100 	bleq	1e0c06c <__ccfg+0x1dec0c4>
    bc68:	000001cd 	andeq	r0, r0, sp, asr #3
    bc6c:	000032c5 	andeq	r3, r0, r5, asr #5
    bc70:	8f000000 	svchi	0x00000000
    bc74:	03000005 	movweq	r0, #5
    bc78:	002cfa00 	eoreq	pc, ip, r0, lsl #20
    bc7c:	ac010400 	cfstrsge	mvf0, [r1], {-0}
    bc80:	0c000000 	stceq	0, cr0, [r0], {-0}
    bc84:	00002900 	andeq	r2, r0, r0, lsl #18
    bc88:	00000e0a 	andeq	r0, r0, sl, lsl #28
    bc8c:	000010d0 	ldrdeq	r1, [r0], -r0
    bc90:	00000000 	andeq	r0, r0, r0
    bc94:	00006e4e 	andeq	r6, r0, lr, asr #28
    bc98:	5d060102 	stfpls	f0, [r6, #-8]
    bc9c:	0200000c 	andeq	r0, r0, #12
    bca0:	0a6b0502 	beq	1acd0b0 <__ccfg+0x1aad108>
    bca4:	04020000 	streq	r0, [r2], #-0
    bca8:	0007fd05 	andeq	pc, r7, r5, lsl #26
    bcac:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    bcb0:	000007f8 	strdeq	r0, [r0], -r8
    bcb4:	002a1c03 	eoreq	r1, sl, r3, lsl #24
    bcb8:	182e0200 	stmdane	lr!, {r9}
    bcbc:	0000004d 	andeq	r0, r0, sp, asr #32
    bcc0:	5b080102 	blpl	20c0d0 <__ccfg+0x1ec128>
    bcc4:	0300000c 	movweq	r0, #12
    bcc8:	00002e12 	andeq	r2, r0, r2, lsl lr
    bccc:	60193102 	andsvs	r3, r9, r2, lsl #2
    bcd0:	02000000 	andeq	r0, r0, #0
    bcd4:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    bcd8:	b4030000 	strlt	r0, [r3], #-0
    bcdc:	02000029 	andeq	r0, r0, #41	; 0x29
    bce0:	00731934 	rsbseq	r1, r3, r4, lsr r9
    bce4:	04020000 	streq	r0, [r2], #-0
    bce8:	00042607 	andeq	r2, r4, r7, lsl #12
    bcec:	07080200 	streq	r0, [r8, -r0, lsl #4]
    bcf0:	00000421 	andeq	r0, r0, r1, lsr #8
    bcf4:	69050404 	stmdbvs	r5, {r2, sl}
    bcf8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    bcfc:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    bd00:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    bd04:	03000005 	movweq	r0, #5
    bd08:	009b1b28 	addseq	r1, fp, r8, lsr #22
    bd0c:	90050000 	andls	r0, r5, r0
    bd10:	0400000b 	streq	r0, [r0], #-11
    bd14:	00b30009 	adcseq	r0, r3, r9
    bd18:	6d060000 	stcvs	0, cr0, [r6, #-0]
    bd1c:	b3000008 	movwlt	r0, #8
    bd20:	00000000 	andeq	r0, r0, r0
    bd24:	04070001 	streq	r0, [r7], #-1
    bd28:	000b9203 	andeq	r9, fp, r3, lsl #4
    bd2c:	18630300 	stmdane	r3!, {r8, r9}^
    bd30:	0000008f 	andeq	r0, r0, pc, lsl #1
    bd34:	00132803 	andseq	r2, r3, r3, lsl #16
    bd38:	12260400 	eorne	r0, r6, #0, 8
    bd3c:	00000041 	andeq	r0, r0, r1, asr #32
    bd40:	0028fb03 	eoreq	pc, r8, r3, lsl #22
    bd44:	12270400 	eorne	r0, r7, #0, 8
    bd48:	00000054 	andeq	r0, r0, r4, asr r0
    bd4c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    bd50:	1dc20300 	stclne	3, cr0, [r2]
    bd54:	2b040000 	blcs	10bd5c <__ccfg+0xebdb4>
    bd58:	00004112 	andeq	r4, r0, r2, lsl r1
    bd5c:	00de0900 	sbcseq	r0, lr, r0, lsl #18
    bd60:	4d030000 	stcmi	0, cr0, [r3, #-0]
    bd64:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    bd68:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    bd6c:	ef080000 	svc	0x00080000
    bd70:	03000000 	movweq	r0, #0
    bd74:	00000646 	andeq	r0, r0, r6, asr #12
    bd78:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    bd7c:	0a000000 	beq	bd84 <__exidx_end+0x6144>
    bd80:	0000cd04 	andeq	ip, r0, r4, lsl #26
    bd84:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
    bd88:	01a00932 	lsreq	r0, r2, r9
    bd8c:	340c0000 	strcc	r0, [ip], #-0
    bd90:	04000000 	streq	r0, [r0], #-0
    bd94:	00de0734 	sbcseq	r0, lr, r4, lsr r7
    bd98:	01010000 	mrseq	r0, (UNDEF: 1)
    bd9c:	4c0c0007 	stcmi	0, cr0, [ip], {7}
    bda0:	04000006 	streq	r0, [r0], #-6
    bda4:	00de0335 	sbcseq	r0, lr, r5, lsr r3
    bda8:	01010000 	mrseq	r0, (UNDEF: 1)
    bdac:	e70c0006 	str	r0, [ip, -r6]
    bdb0:	04000002 	streq	r0, [r0], #-2
    bdb4:	00de0336 	sbcseq	r0, lr, r6, lsr r3
    bdb8:	01010000 	mrseq	r0, (UNDEF: 1)
    bdbc:	b70c0005 	strlt	r0, [ip, -r5]
    bdc0:	04000006 	streq	r0, [r0], #-6
    bdc4:	00de0337 	sbcseq	r0, lr, r7, lsr r3
    bdc8:	01010000 	mrseq	r0, (UNDEF: 1)
    bdcc:	9f0c0004 	svcls	0x000c0004
    bdd0:	0400000a 	streq	r0, [r0], #-10
    bdd4:	00de0338 	sbcseq	r0, lr, r8, lsr r3
    bdd8:	04010000 	streq	r0, [r1], #-0
    bddc:	5b0d0000 	blpl	34bde4 <__ccfg+0x32be3c>
    bde0:	04000006 	streq	r0, [r0], #-6
    bde4:	00de073a 	sbcseq	r0, lr, sl, lsr r7
    bde8:	0d010000 	stceq	0, cr0, [r1, #-0]
    bdec:	000008fb 	strdeq	r0, [r0], -fp
    bdf0:	de033c04 	cdple	12, 0, cr3, cr3, cr4, {0}
    bdf4:	02000000 	andeq	r0, r0, #0
    bdf8:	000f3a0d 	andeq	r3, pc, sp, lsl #20
    bdfc:	033d0400 	teqeq	sp, #0, 8
    be00:	000000de 	ldrdeq	r0, [r0], -lr
    be04:	09130d03 	ldmdbeq	r3, {r0, r1, r8, sl, fp}
    be08:	3f040000 	svccc	0x00040000
    be0c:	0000ef08 	andeq	lr, r0, r8, lsl #30
    be10:	03000400 	movweq	r0, #1024	; 0x400
    be14:	0000031d 	andeq	r0, r0, sp, lsl r3
    be18:	12034104 	andne	r4, r3, #4, 2
    be1c:	09000001 	stmdbeq	r0, {r0}
    be20:	000001a0 	andeq	r0, r0, r0, lsr #3
    be24:	0006be0e 	andeq	fp, r6, lr, lsl #28
    be28:	1a430400 	bne	10cce30 <__ccfg+0x10ace88>
    be2c:	000001ac 	andeq	r0, r0, ip, lsr #3
    be30:	a00e0101 	andge	r0, lr, r1, lsl #2
    be34:	04000001 	streq	r0, [r0], #-1
    be38:	01cd0e45 	biceq	r0, sp, r5, asr #28
    be3c:	01010000 	mrseq	r0, (UNDEF: 1)
    be40:	01d3040a 	bicseq	r0, r3, sl, lsl #8
    be44:	01020000 	mrseq	r0, (UNDEF: 2)
    be48:	000c6408 	andeq	r6, ip, r8, lsl #8
    be4c:	01d30800 	bicseq	r0, r3, r0, lsl #16
    be50:	260e0000 	strcs	r0, [lr], -r0
    be54:	04000003 	streq	r0, [r0], #-3
    be58:	01cd1e45 	biceq	r1, sp, r5, asr #28
    be5c:	01010000 	mrseq	r0, (UNDEF: 1)
    be60:	8f05080b 	svchi	0x0005080b
    be64:	00021e09 	andeq	r1, r2, r9, lsl #28
    be68:	0cd80d00 	ldcleq	13, cr0, [r8], {0}
    be6c:	90050000 	andls	r0, r5, r0
    be70:	0000670b 	andeq	r6, r0, fp, lsl #14
    be74:	750d0000 	strvc	r0, [sp, #-0]
    be78:	05000010 	streq	r0, [r0, #-16]
    be7c:	00cd0891 	smulleq	r0, sp, r1, r8
    be80:	0d040000 	stceq	0, cr0, [r4, #-0]
    be84:	000001c5 	andeq	r0, r0, r5, asr #3
    be88:	ea109205 	b	4306a4 <__ccfg+0x4106fc>
    be8c:	06000000 	streq	r0, [r0], -r0
    be90:	0ccc0300 	stcleq	3, cr0, [ip], {0}
    be94:	93050000 	movwls	r0, #20480	; 0x5000
    be98:	0001ed03 	andeq	lr, r1, r3, lsl #26
    be9c:	021e0f00 	andseq	r0, lr, #0, 30
    bea0:	02350000 	eorseq	r0, r5, #0
    bea4:	00100000 	andseq	r0, r0, r0
    bea8:	00093d0e 	andeq	r3, r9, lr, lsl #26
    beac:	0f990500 	svceq	0x00990500
    beb0:	0000022a 	andeq	r0, r0, sl, lsr #4
    beb4:	010b0101 	tsteq	fp, r1, lsl #2
    beb8:	6d099106 	stfvsd	f1, [r9, #-24]	; 0xffffffe8
    bebc:	0c000002 	stceq	0, cr0, [r0], {2}
    bec0:	0000091a 	andeq	r0, r0, sl, lsl r9
    bec4:	de079306 	cdple	3, 0, cr9, cr7, cr6, {0}
    bec8:	01000000 	mrseq	r0, (UNDEF: 0)
    becc:	0c000107 	stfeqs	f0, [r0], {7}
    bed0:	000005cc 	andeq	r0, r0, ip, asr #11
    bed4:	de039406 	cdple	4, 0, cr9, cr3, cr6, {0}
    bed8:	01000000 	mrseq	r0, (UNDEF: 0)
    bedc:	00000001 	andeq	r0, r0, r1
    bee0:	000aab03 	andeq	sl, sl, r3, lsl #22
    bee4:	03960600 	orrseq	r0, r6, #0, 12
    bee8:	00000243 	andeq	r0, r0, r3, asr #4
    beec:	00026d08 	andeq	r6, r2, r8, lsl #26
    bef0:	02790f00 	rsbseq	r0, r9, #0, 30
    bef4:	02890000 	addeq	r0, r9, #0
    bef8:	00100000 	andseq	r0, r0, r0
    befc:	00027e08 	andeq	r7, r2, r8, lsl #28
    bf00:	03aa0e00 			; <UNDEFINED> instruction: 0x03aa0e00
    bf04:	9c060000 	stcls	0, cr0, [r6], {-0}
    bf08:	00028917 	andeq	r8, r2, r7, lsl r9
    bf0c:	0f010100 	svceq	0x00010100
    bf10:	000000d9 	ldrdeq	r0, [r0], -r9
    bf14:	000002a7 	andeq	r0, r0, r7, lsr #5
    bf18:	9c080010 	stcls	0, cr0, [r8], {16}
    bf1c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    bf20:	0000060e 	andeq	r0, r0, lr, lsl #12
    bf24:	a7130607 	ldrge	r0, [r3, -r7, lsl #12]
    bf28:	01000002 	tsteq	r0, r2
    bf2c:	08dd0e01 	ldmeq	sp, {r0, r9, sl, fp}^
    bf30:	c3050000 	movwgt	r0, #20480	; 0x5000
    bf34:	0000ef0e 	andeq	lr, r0, lr, lsl #30
    bf38:	11010100 	mrsne	r0, (UNDEF: 17)
    bf3c:	00000c72 	andeq	r0, r0, r2, ror ip
    bf40:	10016e08 	andne	r6, r1, r8, lsl #28
    bf44:	000002d5 	ldrdeq	r0, [r0], -r5
    bf48:	02db040a 	sbcseq	r0, fp, #167772160	; 0xa000000
    bf4c:	01120000 	tsteq	r2, r0
    bf50:	000002e7 	andeq	r0, r0, r7, ror #5
    bf54:	0000cd13 	andeq	ip, r0, r3, lsl sp
    bf58:	da0f0000 	ble	3cbf60 <__ccfg+0x3abfb8>
    bf5c:	f2000001 	vhadd.s8	d0, d0, d1
    bf60:	10000002 	andne	r0, r0, r2
    bf64:	02e70800 	rsceq	r0, r7, #0, 16
    bf68:	e6140000 	ldr	r0, [r4], -r0
    bf6c:	08000009 	stmdaeq	r0, {r0, r3}
    bf70:	f216017f 	vbic	q0, q3, <illegal reg q15.5>
    bf74:	01000002 	tsteq	r0, r2
    bf78:	03961401 	orrseq	r1, r6, #16777216	; 0x1000000
    bf7c:	82080000 	andhi	r0, r8, #0
    bf80:	00fb1401 	rscseq	r1, fp, r1, lsl #8
    bf84:	01010000 	mrseq	r0, (UNDEF: 1)
    bf88:	00036e14 	andeq	r6, r3, r4, lsl lr
    bf8c:	02d80800 	sbcseq	r0, r8, #0, 16
    bf90:	0000ef0e 	andeq	lr, r0, lr, lsl #30
    bf94:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    bf98:	03030808 	movweq	r0, #14344	; 0x3808
    bf9c:	00034b09 	andeq	r4, r3, r9, lsl #22
    bfa0:	3ca11600 	stccc	6, cr1, [r1]
    bfa4:	07080000 	streq	r0, [r8, -r0]
    bfa8:	00cd0703 	sbceq	r0, sp, r3, lsl #14
    bfac:	16000000 	strne	r0, [r0], -r0
    bfb0:	00000fcd 	andeq	r0, r0, sp, asr #31
    bfb4:	08030808 	stmdaeq	r3, {r3, fp}
    bfb8:	00000100 	andeq	r0, r0, r0, lsl #2
    bfbc:	09110004 	ldmdbeq	r1, {r2}
    bfc0:	0800000a 	stmdaeq	r0, {r1, r3}
    bfc4:	24030309 	strcs	r0, [r3], #-777	; 0xfffffcf7
    bfc8:	17000003 	strne	r0, [r0, -r3]
    bfcc:	00000029 	andeq	r0, r0, r9, lsr #32
    bfd0:	030b0830 	movweq	r0, #47152	; 0xb830
    bfd4:	0003bb08 	andeq	fp, r3, r8, lsl #22
    bfd8:	1f241600 	svcne	0x00241600
    bfdc:	14080000 	strne	r0, [r8], #-0
    bfe0:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    bfe4:	16000000 	strne	r0, [r0], -r0
    bfe8:	00000be7 	andeq	r0, r0, r7, ror #23
    bfec:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    bff0:	000000cd 	andeq	r0, r0, sp, asr #1
    bff4:	4c8e1602 	stcmi	6, cr1, [lr], {2}
    bff8:	16080000 	strne	r0, [r8], -r0
    bffc:	02c80b03 	sbceq	r0, r8, #3072	; 0xc00
    c000:	16040000 	strne	r0, [r4], -r0
    c004:	00004754 	andeq	r4, r0, r4, asr r7
    c008:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    c00c:	00000100 	andeq	r0, r0, r0, lsl #2
    c010:	000f1608 	andeq	r1, pc, r8, lsl #12
    c014:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    c018:	03bb0f03 			; <UNDEFINED> instruction: 0x03bb0f03
    c01c:	160c0000 	strne	r0, [ip], -r0
    c020:	0000095d 	andeq	r0, r0, sp, asr r9
    c024:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    c028:	000003cb 	andeq	r0, r0, fp, asr #7
    c02c:	4b0f002c 	blmi	3cc0e4 <__ccfg+0x3ac13c>
    c030:	cb000003 	blgt	c044 <__exidx_end+0x6404>
    c034:	18000003 	stmdane	r0, {r0, r1}
    c038:	00000088 	andeq	r0, r0, r8, lsl #1
    c03c:	040a0003 	streq	r0, [sl], #-3
    c040:	00000358 	andeq	r0, r0, r8, asr r3
    c044:	000bdc11 	andeq	sp, fp, r1, lsl ip
    c048:	031c0800 	tsteq	ip, #0, 16
    c04c:	0003581b 	andeq	r5, r3, fp, lsl r8
    c050:	0bbc1400 	bleq	fef11058 <_estack+0xdef0c058>
    c054:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    c058:	03ed1403 	mvneq	r1, #50331648	; 0x3000000
    c05c:	01010000 	mrseq	r0, (UNDEF: 1)
    c060:	03d1040a 	bicseq	r0, r1, #167772160	; 0xa000000
    c064:	01190000 	tsteq	r9, r0
    c068:	0000293f 	andeq	r2, r0, pc, lsr r9
    c06c:	01050801 	tsteq	r5, r1, lsl #16
    c070:	00000081 	andeq	r0, r0, r1, lsl #1
    c074:	00003598 	muleq	r0, r8, r5
    c078:	00003928 	andeq	r3, r0, r8, lsr #18
    c07c:	05869c01 	streq	r9, [r6, #3073]	; 0xc01
    c080:	621a0000 	andsvs	r0, sl, #0
    c084:	01006675 	tsteq	r0, r5, ror r6
    c088:	05861808 	streq	r1, [r6, #2056]	; 0x808
    c08c:	32d80000 	sbcscc	r0, r8, #0
    c090:	661a0000 	ldrvs	r0, [sl], -r0
    c094:	0100746d 	tsteq	r0, sp, ror #8
    c098:	05862908 	streq	r2, [r6, #2312]	; 0x908
    c09c:	34cf0000 	strbcc	r0, [pc], #0	; c0a4 <__exidx_end+0x6464>
    c0a0:	611a0000 	tstvs	sl, r0
    c0a4:	08010070 	stmdaeq	r1, {r4, r5, r6}
    c0a8:	0000b536 	andeq	fp, r0, r6, lsr r5
    c0ac:	00350300 	eorseq	r0, r5, r0, lsl #6
    c0b0:	636e1b00 	cmnvs	lr, #0, 22
    c0b4:	060a0100 	streq	r0, [sl], -r0, lsl #2
    c0b8:	00000081 	andeq	r0, r0, r1, lsl #1
    c0bc:	0000359c 	muleq	r0, ip, r5
    c0c0:	0028f31c 	eoreq	pc, r8, ip, lsl r3	; <UNPREDICTABLE>
    c0c4:	114e0100 	mrsne	r0, (UNDEF: 94)
    c0c8:	0029451c 	eoreq	r4, r9, ip, lsl r5
    c0cc:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    c0d0:	00365a1d 	eorseq	r5, r6, sp, lsl sl
    c0d4:	0036ca00 	eorseq	ip, r6, r0, lsl #20
    c0d8:	00048800 	andeq	r8, r4, r0, lsl #16
    c0dc:	61761e00 	cmnvs	r6, r0, lsl #28
    c0e0:	4e010070 	mcrmi	0, 0, r0, cr1, cr0, {3}
    c0e4:	00010c11 	andeq	r0, r1, r1, lsl ip
    c0e8:	1b560100 	blne	158c4f0 <__ccfg+0x156c548>
    c0ec:	0100666d 	tsteq	r0, sp, ror #12
    c0f0:	00c1114e 	sbceq	r1, r1, lr, asr #2
    c0f4:	361d0000 	ldrcc	r0, [sp], -r0
    c0f8:	1d000000 	stcne	0, cr0, [r0, #-0]
    c0fc:	000036ca 	andeq	r3, r0, sl, asr #13
    c100:	00003712 	andeq	r3, r0, r2, lsl r7
    c104:	000004a4 	andeq	r0, r0, r4, lsr #9
    c108:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c10c:	114f0100 	mrsne	r0, (UNDEF: 95)
    c110:	0000010c 	andeq	r0, r0, ip, lsl #2
    c114:	1f005e01 	svcne	0x00005e01
    c118:	00001080 	andeq	r1, r0, r0, lsl #1
    c11c:	000004d5 	ldrdeq	r0, [r0], -r5
    c120:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c124:	11500100 	cmpne	r0, r0, lsl #2
    c128:	0000010c 	andeq	r0, r0, ip, lsl #2
    c12c:	64205e01 	strtvs	r5, [r0], #-3585	; 0xfffff1ff
    c130:	50010063 	andpl	r0, r1, r3, rrx
    c134:	00008111 	andeq	r8, r0, r1, lsl r1
    c138:	00631b00 	rsbeq	r1, r3, r0, lsl #22
    c13c:	d3115001 	tstle	r1, #1
    c140:	3b000001 	blcc	c14c <__exidx_end+0x650c>
    c144:	00000036 	andeq	r0, r0, r6, lsr r0
    c148:	0010981f 	andseq	r9, r0, pc, lsl r8
    c14c:	0004fc00 	andeq	pc, r4, r0, lsl #24
    c150:	61761e00 	cmnvs	r6, r0, lsl #28
    c154:	55010070 	strpl	r0, [r1, #-112]	; 0xffffff90
    c158:	00058c16 	andeq	r8, r5, r6, lsl ip
    c15c:	1b5e0100 	blne	178c564 <__ccfg+0x176c5bc>
    c160:	0100666d 	tsteq	r0, sp, ror #12
    c164:	00c11655 	sbceq	r1, r1, r5, asr r6
    c168:	36590000 	ldrbcc	r0, [r9], -r0
    c16c:	1f000000 	svcne	0x00000000
    c170:	00001048 	andeq	r1, r0, r8, asr #32
    c174:	00000514 	andeq	r0, r0, r4, lsl r5
    c178:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c17c:	16560100 	ldrbne	r0, [r6], -r0, lsl #2
    c180:	0000058c 	andeq	r0, r0, ip, lsl #11
    c184:	1f005e01 	svcne	0x00005e01
    c188:	000010b0 	strheq	r1, [r0], -r0
    c18c:	00000545 	andeq	r0, r0, r5, asr #10
    c190:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    c194:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    c198:	0000058c 	andeq	r0, r0, ip, lsl #11
    c19c:	64205e01 	strtvs	r5, [r0], #-3585	; 0xfffff1ff
    c1a0:	57010063 	strpl	r0, [r1, -r3, rrx]
    c1a4:	00008116 	andeq	r8, r0, r6, lsl r1
    c1a8:	00631b00 	rsbeq	r1, r3, r0, lsl #22
    c1ac:	d3165701 	tstle	r6, #262144	; 0x40000
    c1b0:	77000001 	strvc	r0, [r0, -r1]
    c1b4:	00000036 	andeq	r0, r0, r6, lsr r0
    c1b8:	0038da1d 	eorseq	sp, r8, sp, lsl sl
    c1bc:	0038ee00 	eorseq	lr, r8, r0, lsl #28
    c1c0:	00056f00 	andeq	r6, r5, r0, lsl #30
    c1c4:	00631b00 	rsbeq	r1, r3, r0, lsl #22
    c1c8:	d3095c01 	movwle	r5, #39937	; 0x9c01
    c1cc:	95000001 	strls	r0, [r0, #-1]
    c1d0:	1e000036 	mcrne	0, 0, r0, cr0, cr6, {1}
    c1d4:	00706173 	rsbseq	r6, r0, r3, ror r1
    c1d8:	cd0d5c01 	stcgt	12, cr5, [sp, #-4]
    c1dc:	01000001 	tsteq	r0, r1
    c1e0:	60210056 	eorvs	r0, r1, r6, asr r0
    c1e4:	1b000010 	blne	c22c <__exidx_end+0x65ec>
    c1e8:	00706173 	rsbseq	r6, r0, r3, ror r1
    c1ec:	cd0a6601 	stcgt	6, cr6, [sl, #-4]
    c1f0:	a8000001 	stmdage	r0, {r0}
    c1f4:	00000036 	andeq	r0, r0, r6, lsr r0
    c1f8:	da040a00 	ble	10ea00 <__ccfg+0xeea58>
    c1fc:	0a000001 	beq	c208 <__exidx_end+0x65c8>
    c200:	0000ef04 	andeq	lr, r0, r4, lsl #30
    c204:	1fea0000 	svcne	0x00ea0000
    c208:	00030000 	andeq	r0, r3, r0
    c20c:	00002eb6 			; <UNDEFINED> instruction: 0x00002eb6
    c210:	00ac0104 	adceq	r0, ip, r4, lsl #2
    c214:	530c0000 	movwpl	r0, #49152	; 0xc000
    c218:	0a000029 	beq	c2c4 <__exidx_end+0x6684>
    c21c:	1b00000e 	blne	c25c <__exidx_end+0x661c>
    c220:	02000071 	andeq	r0, r0, #113	; 0x71
    c224:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    c228:	ed030000 	stc	0, cr0, [r3, #-0]
    c22c:	01000031 	tsteq	r0, r1, lsr r0
    c230:	00301825 	eorseq	r1, r0, r5, lsr #16
    c234:	02020000 	andeq	r0, r2, #0
    c238:	000a6b05 	andeq	r6, sl, r5, lsl #22
    c23c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    c240:	000007fd 	strdeq	r0, [r0], -sp
    c244:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    c248:	03000007 	movweq	r0, #7
    c24c:	00002a1c 	andeq	r2, r0, ip, lsl sl
    c250:	51182e01 	tstpl	r8, r1, lsl #28
    c254:	02000000 	andeq	r0, r0, #0
    c258:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    c25c:	12030000 	andne	r0, r3, #0
    c260:	0100002e 	tsteq	r0, lr, lsr #32
    c264:	00641931 	rsbeq	r1, r4, r1, lsr r9
    c268:	02020000 	andeq	r0, r2, #0
    c26c:	000d6607 	andeq	r6, sp, r7, lsl #12
    c270:	29b40300 	ldmibcs	r4!, {r8, r9}
    c274:	34010000 	strcc	r0, [r1], #-0
    c278:	00007c19 	andeq	r7, r0, r9, lsl ip
    c27c:	006b0400 	rsbeq	r0, fp, r0, lsl #8
    c280:	04020000 	streq	r0, [r2], #-0
    c284:	00042607 	andeq	r2, r4, r7, lsl #12
    c288:	07080200 	streq	r0, [r8, -r0, lsl #4]
    c28c:	00000421 	andeq	r0, r0, r1, lsr #8
    c290:	69050405 	stmdbvs	r5, {r0, r2, sl}
    c294:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    c298:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    c29c:	9d030000 	stcls	0, cr0, [r3, #-0]
    c2a0:	01000029 	tsteq	r0, r9, lsr #32
    c2a4:	00911a56 	addseq	r1, r1, r6, asr sl
    c2a8:	d5060000 	strle	r0, [r6, #-0]
    c2ac:	0200000b 	andeq	r0, r0, #11
    c2b0:	9117015e 	tstls	r7, lr, asr r1
    c2b4:	03000000 	movweq	r0, #0
    c2b8:	00000e49 	andeq	r0, r0, r9, asr #28
    c2bc:	370e2e03 	strcc	r2, [lr, -r3, lsl #28]
    c2c0:	03000000 	movweq	r0, #0
    c2c4:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c2c8:	370e7403 	strcc	r7, [lr, -r3, lsl #8]
    c2cc:	07000000 	streq	r0, [r0, -r0]
    c2d0:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
    c2d4:	000000eb 	andeq	r0, r0, fp, ror #1
    c2d8:	00076c08 	andeq	r6, r7, r8, lsl #24
    c2dc:	0ca70300 	stceq	3, cr0, [r7]
    c2e0:	000000a4 	andeq	r0, r0, r4, lsr #1
    c2e4:	000ab408 	andeq	fp, sl, r8, lsl #8
    c2e8:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
    c2ec:	000000eb 	andeq	r0, r0, fp, ror #1
    c2f0:	00510900 	subseq	r0, r1, r0, lsl #18
    c2f4:	00fb0000 	rscseq	r0, fp, r0
    c2f8:	910a0000 	mrsls	r0, (UNDEF: 10)
    c2fc:	03000000 	movweq	r0, #0
    c300:	03080b00 	movweq	r0, #35584	; 0x8b00
    c304:	011f09a2 	tsteq	pc, r2, lsr #19
    c308:	8e0c0000 	cdphi	0, 0, cr0, cr12, cr0, {0}
    c30c:	03000003 	movweq	r0, #3
    c310:	008a07a4 	addeq	r0, sl, r4, lsr #15
    c314:	0c000000 	stceq	0, cr0, [r0], {-0}
    c318:	00000601 	andeq	r0, r0, r1, lsl #12
    c31c:	c905a903 	stmdbgt	r5, {r0, r1, r8, fp, sp, pc}
    c320:	04000000 	streq	r0, [r0], #-0
    c324:	08b50300 	ldmeq	r5!, {r8, r9}
    c328:	aa030000 	bge	cc330 <__ccfg+0xac388>
    c32c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    c330:	03040d00 	movweq	r0, #19712	; 0x4d00
    c334:	00000842 	andeq	r0, r0, r2, asr #16
    c338:	7c191604 	ldcvc	6, cr1, [r9], {4}
    c33c:	03000000 	movweq	r0, #0
    c340:	00000253 	andeq	r0, r0, r3, asr r2
    c344:	8a0d0c05 	bhi	34f360 <__ccfg+0x32f3b8>
    c348:	03000000 	movweq	r0, #0
    c34c:	0000072a 	andeq	r0, r0, sl, lsr #14
    c350:	391b2304 	ldmdbcc	fp, {r2, r8, r9, sp}
    c354:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    c358:	00000332 	andeq	r0, r0, r2, lsr r3
    c35c:	08340418 	ldmdaeq	r4!, {r3, r4, sl}
    c360:	000001ab 	andeq	r0, r0, fp, lsr #3
    c364:	000ec40c 	andeq	ip, lr, ip, lsl #8
    c368:	13360400 	teqne	r6, #0, 8
    c36c:	000001ab 	andeq	r0, r0, fp, lsr #3
    c370:	6b5f0f00 	blvs	17cff78 <__ccfg+0x17affd0>
    c374:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
    c378:	0000008a 	andeq	r0, r0, sl, lsl #1
    c37c:	0b620c04 	bleq	188f394 <__ccfg+0x186f3ec>
    c380:	37040000 	strcc	r0, [r4, -r0]
    c384:	00008a0b 	andeq	r8, r0, fp, lsl #20
    c388:	f50c0800 			; <UNDEFINED> instruction: 0xf50c0800
    c38c:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
    c390:	008a1437 	addeq	r1, sl, r7, lsr r4
    c394:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c398:	00000455 	andeq	r0, r0, r5, asr r4
    c39c:	8a1b3704 	bhi	6d9fb4 <__ccfg+0x6ba00c>
    c3a0:	10000000 	andne	r0, r0, r0
    c3a4:	00785f0f 	rsbseq	r5, r8, pc, lsl #30
    c3a8:	b10b3804 	tstlt	fp, r4, lsl #16
    c3ac:	14000001 	strne	r0, [r0], #-1
    c3b0:	51041000 	mrspl	r1, (UNDEF: 4)
    c3b4:	09000001 	stmdbeq	r0, {r0}
    c3b8:	0000012d 	andeq	r0, r0, sp, lsr #2
    c3bc:	000001c1 	andeq	r0, r0, r1, asr #3
    c3c0:	0000910a 	andeq	r9, r0, sl, lsl #2
    c3c4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    c3c8:	00000b7d 	andeq	r0, r0, sp, ror fp
    c3cc:	083c0424 	ldmdaeq	ip!, {r2, r5, sl}
    c3d0:	00000244 	andeq	r0, r0, r4, asr #4
    c3d4:	00056c0c 	andeq	r6, r5, ip, lsl #24
    c3d8:	093e0400 	ldmdbeq	lr!, {sl}
    c3dc:	0000008a 	andeq	r0, r0, sl, lsl #1
    c3e0:	03b70c00 			; <UNDEFINED> instruction: 0x03b70c00
    c3e4:	3f040000 	svccc	0x00040000
    c3e8:	00008a09 	andeq	r8, r0, r9, lsl #20
    c3ec:	580c0400 	stmdapl	ip, {sl}
    c3f0:	04000003 	streq	r0, [r0], #-3
    c3f4:	008a0940 	addeq	r0, sl, r0, asr #18
    c3f8:	0c080000 	stceq	0, cr0, [r8], {-0}
    c3fc:	00000674 	andeq	r0, r0, r4, ror r6
    c400:	8a094104 	bhi	25c818 <__ccfg+0x23c870>
    c404:	0c000000 	stceq	0, cr0, [r0], {-0}
    c408:	0009540c 	andeq	r5, r9, ip, lsl #8
    c40c:	09420400 	stmdbeq	r2, {sl}^
    c410:	0000008a 	andeq	r0, r0, sl, lsl #1
    c414:	0ace0c10 	beq	ff38f45c <_estack+0xdf38a45c>
    c418:	43040000 	movwmi	r0, #16384	; 0x4000
    c41c:	00008a09 	andeq	r8, r0, r9, lsl #20
    c420:	460c1400 	strmi	r1, [ip], -r0, lsl #8
    c424:	04000003 	streq	r0, [r0], #-3
    c428:	008a0944 	addeq	r0, sl, r4, asr #18
    c42c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    c430:	00000575 	andeq	r0, r0, r5, ror r5
    c434:	8a094504 	bhi	25d84c <__ccfg+0x23d8a4>
    c438:	1c000000 	stcne	0, cr0, [r0], {-0}
    c43c:	0008f00c 	andeq	pc, r8, ip
    c440:	09460400 	stmdbeq	r6, {sl}^
    c444:	0000008a 	andeq	r0, r0, sl, lsl #1
    c448:	3b110020 	blcc	44c4d0 <__ccfg+0x42c528>
    c44c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c450:	084f0401 	stmdaeq	pc, {r0, sl}^	; <UNPREDICTABLE>
    c454:	00000289 	andeq	r0, r0, r9, lsl #5
    c458:	000d2d0c 	andeq	r2, sp, ip, lsl #26
    c45c:	0a500400 	beq	140d464 <__ccfg+0x13ed4bc>
    c460:	00000289 	andeq	r0, r0, r9, lsl #5
    c464:	0c170c00 	ldceq	12, cr0, [r7], {-0}
    c468:	51040000 	mrspl	r0, (UNDEF: 4)
    c46c:	00028909 	andeq	r8, r2, r9, lsl #18
    c470:	c6128000 	ldrgt	r8, [r2], -r0
    c474:	0400000d 	streq	r0, [r0], #-13
    c478:	012d0a53 			; <UNDEFINED> instruction: 0x012d0a53
    c47c:	01000000 	mrseq	r0, (UNDEF: 0)
    c480:	000eb712 	andeq	fp, lr, r2, lsl r7
    c484:	0a560400 	beq	158d48c <__ccfg+0x156d4e4>
    c488:	0000012d 	andeq	r0, r0, sp, lsr #2
    c48c:	09000104 	stmdbeq	r0, {r2, r8}
    c490:	0000012b 	andeq	r0, r0, fp, lsr #2
    c494:	00000299 	muleq	r0, r9, r2
    c498:	0000910a 	andeq	r9, r0, sl, lsl #2
    c49c:	11001f00 	tstne	r0, r0, lsl #30
    c4a0:	00000a16 	andeq	r0, r0, r6, lsl sl
    c4a4:	62040190 	andvs	r0, r4, #144, 2	; 0x24
    c4a8:	0002dc08 	andeq	sp, r2, r8, lsl #24
    c4ac:	0ec40c00 	cdpeq	12, 12, cr0, cr4, cr0, {0}
    c4b0:	63040000 	movwvs	r0, #16384	; 0x4000
    c4b4:	0002dc12 	andeq	sp, r2, r2, lsl ip
    c4b8:	840c0000 	strhi	r0, [ip], #-0
    c4bc:	04000005 	streq	r0, [r0], #-5
    c4c0:	008a0664 	addeq	r0, sl, r4, ror #12
    c4c4:	0c040000 	stceq	0, cr0, [r4], {-0}
    c4c8:	00000307 	andeq	r0, r0, r7, lsl #6
    c4cc:	e2096604 	and	r6, r9, #4, 12	; 0x400000
    c4d0:	08000002 	stmdaeq	r0, {r1}
    c4d4:	00003b0c 	andeq	r3, r0, ip, lsl #22
    c4d8:	1e670400 	cdpne	4, 6, cr0, cr7, cr0, {0}
    c4dc:	00000244 	andeq	r0, r0, r4, asr #4
    c4e0:	04100088 	ldreq	r0, [r0], #-136	; 0xffffff78
    c4e4:	00000299 	muleq	r0, r9, r2
    c4e8:	0002f209 	andeq	pc, r2, r9, lsl #4
    c4ec:	0002f200 	andeq	pc, r2, r0, lsl #4
    c4f0:	00910a00 	addseq	r0, r1, r0, lsl #20
    c4f4:	001f0000 	andseq	r0, pc, r0
    c4f8:	02f80410 	rscseq	r0, r8, #16, 8	; 0x10000000
    c4fc:	01130000 	tsteq	r3, r0
    c500:	000cc50e 	andeq	ip, ip, lr, lsl #10
    c504:	7a040800 	bvc	10e50c <__ccfg+0xee564>
    c508:	00032208 	andeq	r2, r3, r8, lsl #4
    c50c:	0cd70c00 	ldcleq	12, cr0, [r7], {0}
    c510:	7b040000 	blvc	10c518 <__ccfg+0xec570>
    c514:	00032211 	andeq	r2, r3, r1, lsl r2
    c518:	a00c0000 	andge	r0, ip, r0
    c51c:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    c520:	008a067c 	addeq	r0, sl, ip, ror r6
    c524:	00040000 	andeq	r0, r4, r0
    c528:	00510410 	subseq	r0, r1, r0, lsl r4
    c52c:	4d0e0000 	stcmi	0, cr0, [lr, #-0]
    c530:	68000004 	stmdavs	r0, {r2}
    c534:	6b08ba04 	blvs	23ad4c <__ccfg+0x21ada4>
    c538:	0f000004 	svceq	0x00000004
    c53c:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
    c540:	032212bb 			; <UNDEFINED> instruction: 0x032212bb
    c544:	0f000000 	svceq	0x00000000
    c548:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
    c54c:	008a07bc 			; <UNDEFINED> instruction: 0x008a07bc
    c550:	0f040000 	svceq	0x00040000
    c554:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
    c558:	008a07bd 			; <UNDEFINED> instruction: 0x008a07bd
    c55c:	0c080000 	stceq	0, cr0, [r8], {-0}
    c560:	000001c4 	andeq	r0, r0, r4, asr #3
    c564:	3009be04 	andcc	fp, r9, r4, lsl #28
    c568:	0c000000 	stceq	0, cr0, [r0], {-0}
    c56c:	0008590c 	andeq	r5, r8, ip, lsl #18
    c570:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
    c574:	00000030 	andeq	r0, r0, r0, lsr r0
    c578:	625f0f0e 	subsvs	r0, pc, #14, 30	; 0x38
    c57c:	c0040066 	andgt	r0, r4, r6, rrx
    c580:	0002fa11 	andeq	pc, r2, r1, lsl sl	; <UNPREDICTABLE>
    c584:	bb0c1000 	bllt	31058c <__ccfg+0x2f05e4>
    c588:	04000001 	streq	r0, [r0], #-1
    c58c:	008a07c1 	addeq	r0, sl, r1, asr #15
    c590:	0c180000 	ldceq	0, cr0, [r8], {-0}
    c594:	0000030c 	andeq	r0, r0, ip, lsl #6
    c598:	2b0ac804 	blcs	2be5b0 <__ccfg+0x29e608>
    c59c:	1c000001 	stcne	0, cr0, [r0], {1}
    c5a0:	001d2f0c 	andseq	r2, sp, ip, lsl #30
    c5a4:	1dca0400 	cfstrdne	mvd0, [sl]
    c5a8:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    c5ac:	1cf60c20 	ldclne	12, cr0, [r6], #128	; 0x80
    c5b0:	cc040000 	stcgt	0, cr0, [r4], {-0}
    c5b4:	00061b1d 	andeq	r1, r6, sp, lsl fp
    c5b8:	e40c2400 	str	r2, [ip], #-1024	; 0xfffffc00
    c5bc:	0400000e 	streq	r0, [r0], #-14
    c5c0:	06400dcf 	strbeq	r0, [r0], -pc, asr #27
    c5c4:	0c280000 	stceq	0, cr0, [r8], #-0
    c5c8:	00001ce4 	andeq	r1, r0, r4, ror #25
    c5cc:	5b09d004 	blpl	2805e4 <__ccfg+0x26063c>
    c5d0:	2c000006 	stccs	0, cr0, [r0], {6}
    c5d4:	62755f0f 	rsbsvs	r5, r5, #15, 30	; 0x3c
    c5d8:	11d30400 	bicsne	r0, r3, r0, lsl #8
    c5dc:	000002fa 	strdeq	r0, [r0], -sl
    c5e0:	755f0f30 	ldrbvc	r0, [pc, #-3888]	; b6b8 <__exidx_end+0x5a78>
    c5e4:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
    c5e8:	00032212 	andeq	r2, r3, r2, lsl r2
    c5ec:	5f0f3800 	svcpl	0x000f3800
    c5f0:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
    c5f4:	008a07d5 	ldrdeq	r0, [sl], r5
    c5f8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    c5fc:	00000f1b 	andeq	r0, r0, fp, lsl pc
    c600:	6111d804 	tstvs	r1, r4, lsl #16
    c604:	40000006 	andmi	r0, r0, r6
    c608:	000e640c 	andeq	r6, lr, ip, lsl #8
    c60c:	11d90400 	bicsne	r0, r9, r0, lsl #8
    c610:	00000671 	andeq	r0, r0, r1, ror r6
    c614:	6c5f0f43 	mrrcvs	15, 4, r0, pc, cr3	; <UNPREDICTABLE>
    c618:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
    c61c:	0002fa11 	andeq	pc, r2, r1, lsl sl	; <UNPREDICTABLE>
    c620:	740c4400 	strvc	r4, [ip], #-1024	; 0xfffffc00
    c624:	0400000b 	streq	r0, [r0], #-11
    c628:	008a07df 	ldrdeq	r0, [sl], pc	; <UNPREDICTABLE>
    c62c:	0c4c0000 	mareq	acc0, r0, ip
    c630:	0000047c 	andeq	r0, r0, ip, ror r4
    c634:	b10ae004 	tstlt	sl, r4
    c638:	50000000 	andpl	r0, r0, r0
    c63c:	0047530c 	subeq	r5, r7, ip, lsl #6
    c640:	12e30400 	rscne	r0, r3, #0, 8
    c644:	0000048a 	andeq	r0, r0, sl, lsl #9
    c648:	0b9a0c54 	bleq	fe68f7a0 <_estack+0xde68a7a0>
    c64c:	e7040000 	str	r0, [r4, -r0]
    c650:	0001450c 	andeq	r4, r1, ip, lsl #10
    c654:	1e0c5800 	cdpne	8, 0, cr5, cr12, cr0, {0}
    c658:	0400000a 	streq	r0, [r0], #-10
    c65c:	011f0ee9 	tsteq	pc, r9, ror #29
    c660:	0c5c0000 	mraeq	r0, ip, acc0
    c664:	00000e97 	muleq	r0, r7, lr
    c668:	8a09ea04 	bhi	286e80 <__ccfg+0x266ed8>
    c66c:	64000000 	strvs	r0, [r0], #-0
    c670:	8a011400 	bhi	51678 <__ccfg+0x316d0>
    c674:	8a000000 	bhi	c67c <__exidx_end+0x6a3c>
    c678:	15000004 	strne	r0, [r0, #-4]
    c67c:	0000048a 	andeq	r0, r0, sl, lsl #9
    c680:	00012b15 	andeq	r2, r1, r5, lsl fp
    c684:	05de1500 	ldrbeq	r1, [lr, #1280]	; 0x500
    c688:	8a150000 	bhi	54c690 <__ccfg+0x52c6e8>
    c68c:	00000000 	andeq	r0, r0, r0
    c690:	04950410 	ldreq	r0, [r5], #1040	; 0x410
    c694:	8a040000 	bhi	10c69c <__ccfg+0xec6f4>
    c698:	16000004 	strne	r0, [r0], -r4
    c69c:	00000d5f 	andeq	r0, r0, pc, asr sp
    c6a0:	65040428 	strvs	r0, [r4, #-1064]	; 0xfffffbd8
    c6a4:	05de0802 	ldrbeq	r0, [lr, #2050]	; 0x802
    c6a8:	04170000 	ldreq	r0, [r7], #-0
    c6ac:	04000009 	streq	r0, [r0], #-9
    c6b0:	8a070267 	bhi	1cd054 <__ccfg+0x1ad0ac>
    c6b4:	00000000 	andeq	r0, r0, r0
    c6b8:	0007e217 	andeq	lr, r7, r7, lsl r2
    c6bc:	026c0400 	rsbeq	r0, ip, #0, 8
    c6c0:	0006cd0b 	andeq	ip, r6, fp, lsl #26
    c6c4:	f7170400 			; <UNDEFINED> instruction: 0xf7170400
    c6c8:	04000002 	streq	r0, [r0], #-2
    c6cc:	cd14026c 	lfmgt	f0, 4, [r4, #-432]	; 0xfffffe50
    c6d0:	08000006 	stmdaeq	r0, {r1, r2}
    c6d4:	000f0a17 	andeq	r0, pc, r7, lsl sl	; <UNPREDICTABLE>
    c6d8:	026c0400 	rsbeq	r0, ip, #0, 8
    c6dc:	0006cd1e 	andeq	ip, r6, lr, lsl sp
    c6e0:	7f170c00 	svcvc	0x00170c00
    c6e4:	04000005 	streq	r0, [r0], #-5
    c6e8:	8a08026e 	bhi	20d0a8 <__ccfg+0x1ed100>
    c6ec:	10000000 	andne	r0, r0, r0
    c6f0:	0004d417 	andeq	sp, r4, r7, lsl r4
    c6f4:	026f0400 	rsbeq	r0, pc, #0, 8
    c6f8:	0008cd08 	andeq	ip, r8, r8, lsl #26
    c6fc:	77171400 	ldrvc	r1, [r7, -r0, lsl #8]
    c700:	0400000e 	streq	r0, [r0], #-14
    c704:	8a070272 	bhi	1cd0d4 <__ccfg+0x1ad12c>
    c708:	30000000 	andcc	r0, r0, r0
    c70c:	0042a117 	subeq	sl, r2, r7, lsl r1
    c710:	02730400 	rsbseq	r0, r3, #0, 8
    c714:	0008e316 	andeq	lr, r8, r6, lsl r3
    c718:	8a173400 	bhi	5d9720 <__ccfg+0x5b9778>
    c71c:	04000007 	streq	r0, [r0], #-7
    c720:	8a070275 	bhi	1cd0fc <__ccfg+0x1ad154>
    c724:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    c728:	00088417 	andeq	r8, r8, r7, lsl r4
    c72c:	02770400 	rsbseq	r0, r7, #0, 8
    c730:	0008f50a 	andeq	pc, r8, sl, lsl #10
    c734:	50173c00 	andspl	r3, r7, r0, lsl #24
    c738:	04000003 	streq	r0, [r0], #-3
    c73c:	ab13027a 	blge	4cd12c <__ccfg+0x4ad184>
    c740:	40000001 	andmi	r0, r0, r1
    c744:	00040b17 	andeq	r0, r4, r7, lsl fp
    c748:	027b0400 	rsbseq	r0, fp, #0, 8
    c74c:	00008a07 	andeq	r8, r0, r7, lsl #20
    c750:	09174400 	ldmdbeq	r7, {sl, lr}
    c754:	04000006 	streq	r0, [r0], #-6
    c758:	ab13027c 	blge	4cd150 <__ccfg+0x4ad1a8>
    c75c:	48000001 	stmdami	r0, {r0}
    c760:	00081f17 	andeq	r1, r8, r7, lsl pc
    c764:	027d0400 	rsbseq	r0, sp, #0, 8
    c768:	0008fb14 	andeq	pc, r8, r4, lsl fp	; <UNPREDICTABLE>
    c76c:	5a174c00 	bpl	5df774 <__ccfg+0x5bf7cc>
    c770:	0400000b 	streq	r0, [r0], #-11
    c774:	8a070280 	bhi	1cd17c <__ccfg+0x1ad1d4>
    c778:	50000000 	andpl	r0, r0, r0
    c77c:	000c5317 	andeq	r5, ip, r7, lsl r3
    c780:	02810400 	addeq	r0, r1, #0, 8
    c784:	0005de09 	andeq	sp, r5, r9, lsl #28
    c788:	6d175400 	cfldrsvs	mvf5, [r7, #-0]
    c78c:	0400000c 	streq	r0, [r0], #-12
    c790:	a80702a4 	stmdage	r7, {r2, r5, r7, r9}
    c794:	58000008 	stmdapl	r0, {r3}
    c798:	000a1618 	andeq	r1, sl, r8, lsl r6
    c79c:	02a80400 	adceq	r0, r8, #0, 8
    c7a0:	0002dc13 	andeq	sp, r2, r3, lsl ip
    c7a4:	18014800 	stmdane	r1, {fp, lr}
    c7a8:	000006ae 	andeq	r0, r0, lr, lsr #13
    c7ac:	1202a904 	andne	sl, r2, #4, 18	; 0x10000
    c7b0:	00000299 	muleq	r0, r9, r2
    c7b4:	9518014c 	ldrls	r0, [r8, #-332]	; 0xfffffeb4
    c7b8:	04000006 	streq	r0, [r0], #-6
    c7bc:	0d0c02ad 	sfmeq	f0, 4, [ip, #-692]	; 0xfffffd4c
    c7c0:	dc000009 	stcle	0, cr0, [r0], {9}
    c7c4:	0ce31802 	stcleq	8, cr1, [r3], #8
    c7c8:	b2040000 	andlt	r0, r4, #0
    c7cc:	068e1002 	streq	r1, [lr], r2
    c7d0:	02e00000 	rsceq	r0, r0, #0
    c7d4:	000aa618 	andeq	sl, sl, r8, lsl r6
    c7d8:	02b40400 	adcseq	r0, r4, #0, 8
    c7dc:	0009190a 	andeq	r1, r9, sl, lsl #18
    c7e0:	0002ec00 	andeq	lr, r2, r0, lsl #24
    c7e4:	05e40410 	strbeq	r0, [r4, #1040]!	; 0x410
    c7e8:	01020000 	mrseq	r0, (UNDEF: 2)
    c7ec:	000c6408 	andeq	r6, ip, r8, lsl #8
    c7f0:	05e40400 	strbeq	r0, [r4, #1024]!	; 0x400
    c7f4:	04100000 	ldreq	r0, [r0], #-0
    c7f8:	0000046b 	andeq	r0, r0, fp, ror #8
    c7fc:	008a0114 	addeq	r0, sl, r4, lsl r1
    c800:	06150000 	ldreq	r0, [r5], -r0
    c804:	8a150000 	bhi	54c80c <__ccfg+0x52c864>
    c808:	15000004 	strne	r0, [r0, #-4]
    c80c:	0000012b 	andeq	r0, r0, fp, lsr #2
    c810:	00061515 	andeq	r1, r6, r5, lsl r5
    c814:	008a1500 	addeq	r1, sl, r0, lsl #10
    c818:	10000000 	andne	r0, r0, r0
    c81c:	0005eb04 	andeq	lr, r5, r4, lsl #22
    c820:	f6041000 			; <UNDEFINED> instruction: 0xf6041000
    c824:	14000005 	strne	r0, [r0], #-5
    c828:	0000bd01 	andeq	fp, r0, r1, lsl #26
    c82c:	00064000 	andeq	r4, r6, r0
    c830:	048a1500 	streq	r1, [sl], #1280	; 0x500
    c834:	2b150000 	blcs	54c83c <__ccfg+0x52c894>
    c838:	15000001 	strne	r0, [r0, #-1]
    c83c:	000000bd 	strheq	r0, [r0], -sp
    c840:	00008a15 	andeq	r8, r0, r5, lsl sl
    c844:	04100000 	ldreq	r0, [r0], #-0
    c848:	00000621 	andeq	r0, r0, r1, lsr #12
    c84c:	008a0114 	addeq	r0, sl, r4, lsl r1
    c850:	065b0000 	ldrbeq	r0, [fp], -r0
    c854:	8a150000 	bhi	54c85c <__ccfg+0x52c8b4>
    c858:	15000004 	strne	r0, [r0, #-4]
    c85c:	0000012b 	andeq	r0, r0, fp, lsr #2
    c860:	46041000 	strmi	r1, [r4], -r0
    c864:	09000006 	stmdbeq	r0, {r1, r2}
    c868:	00000051 	andeq	r0, r0, r1, asr r0
    c86c:	00000671 	andeq	r0, r0, r1, ror r6
    c870:	0000910a 	andeq	r9, r0, sl, lsl #2
    c874:	09000200 	stmdbeq	r0, {r9}
    c878:	00000051 	andeq	r0, r0, r1, asr r0
    c87c:	00000681 	andeq	r0, r0, r1, lsl #13
    c880:	0000910a 	andeq	r9, r0, sl, lsl #2
    c884:	06000000 	streq	r0, [r0], -r0
    c888:	0000046e 	andeq	r0, r0, lr, ror #8
    c88c:	1a012404 	bne	558a4 <__ccfg+0x358fc>
    c890:	00000328 	andeq	r0, r0, r8, lsr #6
    c894:	000cdd19 	andeq	sp, ip, r9, lsl sp
    c898:	28040c00 	stmdacs	r4, {sl, fp}
    c89c:	06c70801 	strbeq	r0, [r7], r1, lsl #16
    c8a0:	c4170000 	ldrgt	r0, [r7], #-0
    c8a4:	0400000e 	streq	r0, [r0], #-14
    c8a8:	c711012a 	ldrgt	r0, [r1, -sl, lsr #2]
    c8ac:	00000006 	andeq	r0, r0, r6
    c8b0:	000bce17 	andeq	ip, fp, r7, lsl lr
    c8b4:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
    c8b8:	00008a07 	andeq	r8, r0, r7, lsl #20
    c8bc:	72170400 	andsvc	r0, r7, #0, 8
    c8c0:	04000007 	streq	r0, [r0], #-7
    c8c4:	cd0b012c 	stfgts	f0, [fp, #-176]	; 0xffffff50
    c8c8:	08000006 	stmdaeq	r0, {r1, r2}
    c8cc:	8e041000 	cdphi	0, 0, cr1, cr4, cr0, {0}
    c8d0:	10000006 	andne	r0, r0, r6
    c8d4:	00068104 	andeq	r8, r6, r4, lsl #2
    c8d8:	03da1900 	bicseq	r1, sl, #0, 18
    c8dc:	040e0000 	streq	r0, [lr], #-0
    c8e0:	0c080144 	stfeqs	f0, [r8], {68}	; 0x44
    c8e4:	17000007 	strne	r0, [r0, -r7]
    c8e8:	0000164b 	andeq	r1, r0, fp, asr #12
    c8ec:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
    c8f0:	0000070c 	andeq	r0, r0, ip, lsl #14
    c8f4:	08311700 	ldmdaeq	r1!, {r8, r9, sl, ip}
    c8f8:	46040000 	strmi	r0, [r4], -r0
    c8fc:	070c1201 	streq	r1, [ip, -r1, lsl #4]
    c900:	17060000 	strne	r0, [r6, -r0]
    c904:	000014fd 	strdeq	r1, [r0], -sp
    c908:	12014704 	andne	r4, r1, #4, 14	; 0x100000
    c90c:	00000064 	andeq	r0, r0, r4, rrx
    c910:	6409000c 	strvs	r0, [r9], #-12
    c914:	1c000000 	stcne	0, cr0, [r0], {-0}
    c918:	0a000007 	beq	c93c <__exidx_end+0x6cfc>
    c91c:	00000091 	muleq	r0, r1, r0
    c920:	d01a0002 	andsle	r0, sl, r2
    c924:	07028504 	streq	r8, [r2, -r4, lsl #10]
    c928:	00000831 	andeq	r0, r0, r1, lsr r8
    c92c:	000e6a17 	andeq	r6, lr, r7, lsl sl
    c930:	02870400 	addeq	r0, r7, #0, 8
    c934:	00009118 	andeq	r9, r0, r8, lsl r1
    c938:	eb170000 	bl	5cc940 <__ccfg+0x5ac998>
    c93c:	0400000c 	streq	r0, [r0], #-12
    c940:	de120288 	cdple	2, 1, cr0, cr2, cr8, {4}
    c944:	04000005 	streq	r0, [r0], #-5
    c948:	00043817 	andeq	r3, r4, r7, lsl r8
    c94c:	02890400 	addeq	r0, r9, #0, 8
    c950:	00083110 	andeq	r3, r8, r0, lsl r1
    c954:	43170800 	tstmi	r7, #0, 16
    c958:	0400000b 	streq	r0, [r0], #-11
    c95c:	c117028a 	tstgt	r7, sl, lsl #5
    c960:	24000001 	strcs	r0, [r0], #-1
    c964:	0007e917 	andeq	lr, r7, r7, lsl r9
    c968:	028b0400 	addeq	r0, fp, #0, 8
    c96c:	00008a0f 	andeq	r8, r0, pc, lsl #20
    c970:	bf174800 	svclt	0x00174800
    c974:	0400000e 	streq	r0, [r0], #-14
    c978:	832c028c 			; <UNDEFINED> instruction: 0x832c028c
    c97c:	50000000 	andpl	r0, r0, r0
    c980:	00007f17 	andeq	r7, r0, r7, lsl pc
    c984:	028d0400 	addeq	r0, sp, #0, 8
    c988:	0006d31a 	andeq	sp, r6, sl, lsl r3
    c98c:	39175800 	ldmdbcc	r7, {fp, ip, lr}
    c990:	04000006 	streq	r0, [r0], #-6
    c994:	1f16028e 	svcne	0x0016028e
    c998:	68000001 	stmdavs	r0, {r0}
    c99c:	000cf817 	andeq	pc, ip, r7, lsl r8	; <UNPREDICTABLE>
    c9a0:	028f0400 	addeq	r0, pc, #0, 8
    c9a4:	00011f16 	andeq	r1, r1, r6, lsl pc
    c9a8:	71177000 	tstvc	r7, r0
    c9ac:	04000000 	streq	r0, [r0], #-0
    c9b0:	1f160290 	svcne	0x00160290
    c9b4:	78000001 	stmdavc	r0, {r0}
    c9b8:	000b6a17 	andeq	r6, fp, r7, lsl sl
    c9bc:	02910400 	addseq	r0, r1, #0, 8
    c9c0:	00084110 	andeq	r4, r8, r0, lsl r1
    c9c4:	15178000 	ldrne	r8, [r7, #-0]
    c9c8:	04000004 	streq	r0, [r0], #-4
    c9cc:	51100292 			; <UNDEFINED> instruction: 0x51100292
    c9d0:	88000008 	stmdahi	r0, {r3}
    c9d4:	000c8d17 	andeq	r8, ip, r7, lsl sp
    c9d8:	02930400 	addseq	r0, r3, #0, 8
    c9dc:	00008a0f 	andeq	r8, r0, pc, lsl #20
    c9e0:	ac17a000 	ldcge	0, cr10, [r7], {-0}
    c9e4:	04000002 	streq	r0, [r0], #-2
    c9e8:	1f160294 	svcne	0x00160294
    c9ec:	a4000001 	strge	r0, [r0], #-1
    c9f0:	00069f17 	andeq	r9, r6, r7, lsl pc
    c9f4:	02950400 	addseq	r0, r5, #0, 8
    c9f8:	00011f16 	andeq	r1, r1, r6, lsl pc
    c9fc:	bb17ac00 	bllt	5f7a04 <__ccfg+0x5d7a5c>
    ca00:	04000005 	streq	r0, [r0], #-5
    ca04:	1f160296 	svcne	0x00160296
    ca08:	b4000001 	strlt	r0, [r0], #-1
    ca0c:	00084a17 	andeq	r4, r8, r7, lsl sl
    ca10:	02970400 	addseq	r0, r7, #0, 8
    ca14:	00011f16 	andeq	r1, r1, r6, lsl pc
    ca18:	2817bc00 	ldmdacs	r7, {sl, fp, ip, sp, pc}
    ca1c:	04000006 	streq	r0, [r0], #-6
    ca20:	1f160298 	svcne	0x00160298
    ca24:	c4000001 	strgt	r0, [r0], #-1
    ca28:	00090217 	andeq	r0, r9, r7, lsl r2
    ca2c:	02990400 	addseq	r0, r9, #0, 8
    ca30:	00008a08 	andeq	r8, r0, r8, lsl #20
    ca34:	0900cc00 	stmdbeq	r0, {sl, fp, lr, pc}
    ca38:	000005e4 	andeq	r0, r0, r4, ror #11
    ca3c:	00000841 	andeq	r0, r0, r1, asr #16
    ca40:	0000910a 	andeq	r9, r0, sl, lsl #2
    ca44:	09001900 	stmdbeq	r0, {r8, fp, ip}
    ca48:	000005e4 	andeq	r0, r0, r4, ror #11
    ca4c:	00000851 	andeq	r0, r0, r1, asr r8
    ca50:	0000910a 	andeq	r9, r0, sl, lsl #2
    ca54:	09000700 	stmdbeq	r0, {r8, r9, sl}
    ca58:	000005e4 	andeq	r0, r0, r4, ror #11
    ca5c:	00000861 	andeq	r0, r0, r1, ror #16
    ca60:	0000910a 	andeq	r9, r0, sl, lsl #2
    ca64:	1a001700 	bne	1266c <__exidx_end+0xca2c>
    ca68:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
    ca6c:	00088807 	andeq	r8, r8, r7, lsl #16
    ca70:	03c01700 	biceq	r1, r0, #0, 14
    ca74:	a1040000 	mrsge	r0, (UNDEF: 4)
    ca78:	08881b02 	stmeq	r8, {r1, r8, r9, fp, ip}
    ca7c:	17000000 	strne	r0, [r0, -r0]
    ca80:	00000f12 	andeq	r0, r0, r2, lsl pc
    ca84:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
    ca88:	00000898 	muleq	r0, r8, r8
    ca8c:	22090078 	andcs	r0, r9, #120	; 0x78
    ca90:	98000003 	stmdals	r0, {r0, r1}
    ca94:	0a000008 	beq	cabc <__exidx_end+0x6e7c>
    ca98:	00000091 	muleq	r0, r1, r0
    ca9c:	9109001d 	tstls	r9, sp, lsl r0
    caa0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    caa4:	0a000008 	beq	cacc <__exidx_end+0x6e8c>
    caa8:	00000091 	muleq	r0, r1, r0
    caac:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
    cab0:	03028304 	movweq	r8, #8964	; 0x2304
    cab4:	000008cd 	andeq	r0, r0, sp, asr #17
    cab8:	000d5f1c 	andeq	r5, sp, ip, lsl pc
    cabc:	029a0400 	addseq	r0, sl, #0, 8
    cac0:	00071c0b 	andeq	r1, r7, fp, lsl #24
    cac4:	0b521c00 	bleq	1493acc <__ccfg+0x1473b24>
    cac8:	a3040000 	movwge	r0, #16384	; 0x4000
    cacc:	08610b02 	stmdaeq	r1!, {r1, r8, r9, fp}^
    cad0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    cad4:	000005e4 	andeq	r0, r0, r4, ror #11
    cad8:	000008dd 	ldrdeq	r0, [r0], -sp
    cadc:	0000910a 	andeq	r9, r0, sl, lsl #2
    cae0:	1d001800 	stcne	8, cr1, [r0, #-0]
    cae4:	00000eca 	andeq	r0, r0, sl, asr #29
    cae8:	dd041001 	stcle	0, cr1, [r4, #-4]
    caec:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    caf0:	0008f501 	andeq	pc, r8, r1, lsl #10
    caf4:	048a1500 	streq	r1, [sl], #1280	; 0x500
    caf8:	10000000 	andne	r0, r0, r0
    cafc:	0008e904 	andeq	lr, r8, r4, lsl #18
    cb00:	ab041000 	blge	110b08 <__ccfg+0xf0b60>
    cb04:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    cb08:	00090d01 	andeq	r0, r9, r1, lsl #26
    cb0c:	008a1500 	addeq	r1, sl, r0, lsl #10
    cb10:	10000000 	andne	r0, r0, r0
    cb14:	00091304 	andeq	r1, r9, r4, lsl #6
    cb18:	01041000 	mrseq	r1, (UNDEF: 4)
    cb1c:	09000009 	stmdbeq	r0, {r0, r3}
    cb20:	00000681 	andeq	r0, r0, r1, lsl #13
    cb24:	00000929 	andeq	r0, r0, r9, lsr #18
    cb28:	0000910a 	andeq	r9, r0, sl, lsl #2
    cb2c:	1f000200 	svcne	0x00000200
    cb30:	00000ac2 	andeq	r0, r0, r2, asr #21
    cb34:	17033304 	strne	r3, [r3, -r4, lsl #6]
    cb38:	0000048a 	andeq	r0, r0, sl, lsl #9
    cb3c:	bb1f0101 	bllt	7ccf48 <__ccfg+0x7acfa0>
    cb40:	0400000a 	streq	r0, [r0], #-10
    cb44:	901d0334 	andsls	r0, sp, r4, lsr r3
    cb48:	01000004 	tsteq	r0, r4
    cb4c:	24e10301 	strbtcs	r0, [r1], #769	; 0x301
    cb50:	3b060000 	blcc	18cb58 <__ccfg+0x16cbb0>
    cb54:	00006b12 	andeq	r6, r0, r2, lsl fp
    cb58:	06080b00 	streq	r0, [r8], -r0, lsl #22
    cb5c:	09770940 	ldmdbeq	r7!, {r6, r8, fp}^
    cb60:	e40c0000 	str	r0, [ip], #-0
    cb64:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    cb68:	09770d41 	ldmdbeq	r7!, {r0, r6, r8, sl, fp}^
    cb6c:	0c000000 	stceq	0, cr0, [r0], {-0}
    cb70:	00002227 	andeq	r2, r0, r7, lsr #4
    cb74:	770d4206 	strvc	r4, [sp, -r6, lsl #4]
    cb78:	04000009 	streq	r0, [r0], #-9
    cb7c:	45041000 	strmi	r1, [r4, #-0]
    cb80:	03000000 	movweq	r0, #0
    cb84:	0000272c 	andeq	r2, r0, ip, lsr #14
    cb88:	53034306 	movwpl	r4, #13062	; 0x3306
    cb8c:	03000009 	movweq	r0, #9
    cb90:	000022a8 	andeq	r2, r0, r8, lsr #5
    cb94:	952b3c07 	strls	r3, [fp, #-3079]!	; 0xfffff3f9
    cb98:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    cb9c:	00002547 	andeq	r2, r0, r7, asr #10
    cba0:	156f0710 	strbne	r0, [pc, #-1808]!	; c498 <__exidx_end+0x6858>
    cba4:	000009f1 	strdeq	r0, [r0], -r1
    cba8:	001f130c 	andseq	r1, pc, ip, lsl #6
    cbac:	0d700700 	ldcleq	7, cr0, [r0, #-0]
    cbb0:	00000058 	andeq	r0, r0, r8, asr r0
    cbb4:	07780c00 	ldrbeq	r0, [r8, -r0, lsl #24]!
    cbb8:	71070000 	mrsvc	r0, (UNDEF: 7)
    cbbc:	0000580d 	andeq	r5, r0, sp, lsl #16
    cbc0:	860c0200 	strhi	r0, [ip], -r0, lsl #4
    cbc4:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cbc8:	0b281374 	bleq	a119a0 <__ccfg+0x9f19f8>
    cbcc:	0c040000 	stceq	0, cr0, [r4], {-0}
    cbd0:	00002015 	andeq	r2, r0, r5, lsl r0
    cbd4:	470c7507 	strmi	r7, [ip, -r7, lsl #10]
    cbd8:	08000009 	stmdaeq	r0, {r0, r3}
    cbdc:	0022b60c 	eoreq	fp, r2, ip, lsl #12
    cbe0:	067d0700 	ldrbteq	r0, [sp], -r0, lsl #14
    cbe4:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    cbe8:	22000c0c 	andcs	r0, r0, #12, 24	; 0xc00
    cbec:	81070000 	mrshi	r0, (UNDEF: 7)
    cbf0:	000afe06 	andeq	pc, sl, r6, lsl #28
    cbf4:	03000d00 	movweq	r0, #3328	; 0xd00
    cbf8:	00002089 	andeq	r2, r0, r9, lsl #1
    cbfc:	fd2a3f07 	stc2	15, cr3, [sl, #-28]!	; 0xffffffe4
    cc00:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
    cc04:	0000207c 	andeq	r2, r0, ip, ror r0
    cc08:	15e00718 	strbne	r0, [r0, #1816]!	; 0x718
    cc0c:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
    cc10:	001f130c 	andseq	r1, pc, ip, lsl #6
    cc14:	0de10700 	stcleq	7, cr0, [r1]
    cc18:	00000058 	andeq	r0, r0, r8, asr r0
    cc1c:	07780c00 	ldrbeq	r0, [r8, -r0, lsl #24]!
    cc20:	e2070000 	and	r0, r7, #0
    cc24:	0000580d 	andeq	r5, r0, sp, lsl #16
    cc28:	860c0200 	strhi	r0, [ip], -r0, lsl #4
    cc2c:	07000022 	streq	r0, [r0, -r2, lsr #32]
    cc30:	0b2813e5 	bleq	a11bcc <__ccfg+0x9f1c24>
    cc34:	0c040000 	stceq	0, cr0, [r4], {-0}
    cc38:	00002015 	andeq	r2, r0, r5, lsl r0
    cc3c:	470ce607 	strmi	lr, [ip, -r7, lsl #12]
    cc40:	08000009 	stmdaeq	r0, {r0, r3}
    cc44:	0022b60c 	eoreq	fp, r2, ip, lsl #12
    cc48:	06ee0700 	strbteq	r0, [lr], r0, lsl #14
    cc4c:	00000b34 	andeq	r0, r0, r4, lsr fp
    cc50:	22000c0c 	andcs	r0, r0, #12, 24	; 0xc00
    cc54:	f2070000 	vhadd.s8	d0, d7, d0
    cc58:	000b7e06 	andeq	r7, fp, r6, lsl #28
    cc5c:	520c0d00 	andpl	r0, ip, #0, 26
    cc60:	07000026 	streq	r0, [r0, -r6, lsr #32]
    cc64:	00580df3 	ldrsheq	r0, [r8], #-211	; 0xffffff2d
    cc68:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    cc6c:	000023aa 	andeq	r2, r0, sl, lsr #7
    cc70:	580df407 	stmdapl	sp, {r0, r1, r2, sl, ip, sp, lr, pc}
    cc74:	10000000 	andne	r0, r0, r0
    cc78:	0020bc0c 	eoreq	fp, r0, ip, lsl #24
    cc7c:	06fa0700 	ldrbteq	r0, [sl], r0, lsl #14
    cc80:	00000ba8 	andeq	r0, r0, r8, lsr #23
    cc84:	22660c12 	rsbcs	r0, r6, #4608	; 0x1200
    cc88:	fb070000 	blx	1ccc92 <__ccfg+0x1accea>
    cc8c:	0000450c 	andeq	r4, r0, ip, lsl #10
    cc90:	b60c1300 	strlt	r1, [ip], -r0, lsl #6
    cc94:	07000025 	streq	r0, [r0, -r5, lsr #32]
    cc98:	00450cfc 	strdeq	r0, [r5], #-204	; 0xffffff34
    cc9c:	0c140000 	ldceq	0, cr0, [r4], {-0}
    cca0:	000025bf 			; <UNDEFINED> instruction: 0x000025bf
    cca4:	450cfd07 	strmi	pc, [ip, #-3335]	; 0xfffff2f9
    cca8:	15000000 	strne	r0, [r0, #-0]
    ccac:	0025c80c 	eoreq	ip, r5, ip, lsl #16
    ccb0:	0dfe0700 	ldcleq	7, cr0, [lr]
    ccb4:	00000058 	andeq	r0, r0, r8, asr r0
    ccb8:	010b0016 	tsteq	fp, r6, lsl r0
    ccbc:	fe047607 	cdp2	6, 0, cr7, cr4, cr7, {0}
    ccc0:	2000000a 	andcs	r0, r0, sl
    ccc4:	00002769 	andeq	r2, r0, r9, ror #14
    ccc8:	450f7707 	strmi	r7, [pc, #-1799]	; c5c9 <__exidx_end+0x6989>
    cccc:	01000000 	mrseq	r0, (UNDEF: 0)
    ccd0:	20000404 	andcs	r0, r0, r4, lsl #8
    ccd4:	00002107 	andeq	r2, r0, r7, lsl #2
    ccd8:	450f7807 	strmi	r7, [pc, #-2055]	; c4d9 <__exidx_end+0x6899>
    ccdc:	01000000 	mrseq	r0, (UNDEF: 0)
    cce0:	20000301 	andcs	r0, r0, r1, lsl #6
    cce4:	000021c7 	andeq	r2, r0, r7, asr #3
    cce8:	450f7a07 	strmi	r7, [pc, #-2567]	; c2e9 <__exidx_end+0x66a9>
    ccec:	01000000 	mrseq	r0, (UNDEF: 0)
    ccf0:	20000102 	andcs	r0, r0, r2, lsl #2
    ccf4:	00001f82 	andeq	r1, r0, r2, lsl #31
    ccf8:	450f7b07 	strmi	r7, [pc, #-2823]	; c1f9 <__exidx_end+0x65b9>
    ccfc:	01000000 	mrseq	r0, (UNDEF: 0)
    cd00:	00000001 	andeq	r0, r0, r1
    cd04:	7e07010b 	adfvcs	f0, f7, #3.0
    cd08:	000b2804 	andeq	r2, fp, r4, lsl #16
    cd0c:	25e42000 	strbcs	r2, [r4, #0]!
    cd10:	7f070000 	svcvc	0x00070000
    cd14:	0000450f 	andeq	r4, r0, pc, lsl #10
    cd18:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    cd1c:	27382000 	ldrcs	r2, [r8, -r0]!
    cd20:	80070000 	andhi	r0, r7, r0
    cd24:	0000450f 	andeq	r4, r0, pc, lsl #10
    cd28:	00040100 	andeq	r0, r4, r0, lsl #2
    cd2c:	04100000 	ldreq	r0, [r0], #-0
    cd30:	00000989 	andeq	r0, r0, r9, lsl #19
    cd34:	006b0410 	rsbeq	r0, fp, r0, lsl r4
    cd38:	010b0000 	mrseq	r0, (UNDEF: 11)
    cd3c:	7e04e707 	cdpvc	7, 0, cr14, cr4, cr7, {0}
    cd40:	2000000b 	andcs	r0, r0, fp
    cd44:	00002769 	andeq	r2, r0, r9, ror #14
    cd48:	450fe807 	strmi	lr, [pc, #-2055]	; c549 <__exidx_end+0x6909>
    cd4c:	01000000 	mrseq	r0, (UNDEF: 0)
    cd50:	20000404 	andcs	r0, r0, r4, lsl #8
    cd54:	00002107 	andeq	r2, r0, r7, lsl #2
    cd58:	450fe907 	strmi	lr, [pc, #-2311]	; c459 <__exidx_end+0x6819>
    cd5c:	01000000 	mrseq	r0, (UNDEF: 0)
    cd60:	20000301 	andcs	r0, r0, r1, lsl #6
    cd64:	000021c7 	andeq	r2, r0, r7, asr #3
    cd68:	450feb07 	strmi	lr, [pc, #-2823]	; c269 <__exidx_end+0x6629>
    cd6c:	01000000 	mrseq	r0, (UNDEF: 0)
    cd70:	20000102 	andcs	r0, r0, r2, lsl #2
    cd74:	00001f82 	andeq	r1, r0, r2, lsl #31
    cd78:	450fec07 	strmi	lr, [pc, #-3079]	; c179 <__exidx_end+0x6539>
    cd7c:	01000000 	mrseq	r0, (UNDEF: 0)
    cd80:	00000001 	andeq	r0, r0, r1
    cd84:	ef07010b 	svc	0x0007010b
    cd88:	000ba804 	andeq	sl, fp, r4, lsl #16
    cd8c:	25e42000 	strbcs	r2, [r4, #0]!
    cd90:	f0070000 			; <UNDEFINED> instruction: 0xf0070000
    cd94:	0000450f 	andeq	r4, r0, pc, lsl #10
    cd98:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    cd9c:	27382000 	ldrcs	r2, [r8, -r0]!
    cda0:	f1070000 			; <UNDEFINED> instruction: 0xf1070000
    cda4:	0000450f 	andeq	r4, r0, pc, lsl #10
    cda8:	00040100 	andeq	r0, r4, r0, lsl #2
    cdac:	010b0000 	mrseq	r0, (UNDEF: 11)
    cdb0:	d204f507 	andle	pc, r4, #29360128	; 0x1c00000
    cdb4:	2000000b 	andcs	r0, r0, fp
    cdb8:	000020f1 	strdeq	r2, [r0], -r1
    cdbc:	450ff607 	strmi	pc, [pc, #-1543]	; c7bd <__exidx_end+0x6b7d>
    cdc0:	01000000 	mrseq	r0, (UNDEF: 0)
    cdc4:	20000701 	andcs	r0, r0, r1, lsl #14
    cdc8:	00002752 	andeq	r2, r0, r2, asr r7
    cdcc:	450ff807 	strmi	pc, [pc, #-2055]	; c5cd <__exidx_end+0x698d>
    cdd0:	01000000 	mrseq	r0, (UNDEF: 0)
    cdd4:	00000106 	andeq	r0, r0, r6, lsl #2
    cdd8:	097d0410 	ldmdbeq	sp!, {r4, sl}^
    cddc:	27030000 	strcs	r0, [r3, -r0]
    cde0:	08000026 	stmdaeq	r0, {r1, r2, r5}
    cde4:	0be42f3d 	bleq	ff918ae0 <_estack+0xdf913ae0>
    cde8:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
    cdec:	18000026 	stmdane	r0, {r1, r2, r5}
    cdf0:	74157808 	ldrvc	r7, [r5], #-2056	; 0xfffff7f8
    cdf4:	0c00000c 	stceq	0, cr0, [r0], {12}
    cdf8:	00001f13 	andeq	r1, r0, r3, lsl pc
    cdfc:	580d7908 	stmdapl	sp, {r3, r8, fp, ip, sp, lr}
    ce00:	00000000 	andeq	r0, r0, r0
    ce04:	0007780c 	andeq	r7, r7, ip, lsl #16
    ce08:	0d7a0800 	ldcleq	8, cr0, [sl, #-0]
    ce0c:	00000058 	andeq	r0, r0, r8, asr r0
    ce10:	22860c02 	addcs	r0, r6, #512	; 0x200
    ce14:	7d080000 	stcvc	0, cr0, [r8, #-0]
    ce18:	000b2813 	andeq	r2, fp, r3, lsl r8
    ce1c:	150c0400 	strne	r0, [ip, #-1024]	; 0xfffffc00
    ce20:	08000020 	stmdaeq	r0, {r5}
    ce24:	09470c7e 	stmdbeq	r7, {r1, r2, r3, r4, r5, r6, sl, fp}^
    ce28:	0c080000 	stceq	0, cr0, [r8], {-0}
    ce2c:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
    ce30:	67068608 	strvs	r8, [r6, -r8, lsl #12]
    ce34:	0c00000e 	stceq	0, cr0, [r0], {14}
    ce38:	0022000c 	eoreq	r0, r2, ip
    ce3c:	068a0800 	streq	r0, [sl], r0, lsl #16
    ce40:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    ce44:	205a0c0d 	subscs	r0, sl, sp, lsl #24
    ce48:	93080000 	movwls	r0, #32768	; 0x8000
    ce4c:	000edb06 	andeq	sp, lr, r6, lsl #22
    ce50:	dd0c0e00 	stcle	14, cr0, [ip, #-0]
    ce54:	08000025 	stmdaeq	r0, {r0, r2, r5}
    ce58:	00450c94 	umaaleq	r0, r5, r4, ip
    ce5c:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    ce60:	0000233c 	andeq	r2, r0, ip, lsr r3
    ce64:	6b0d9508 	blvs	37228c <__ccfg+0x3522e4>
    ce68:	10000000 	andne	r0, r0, r0
    ce6c:	001f400c 	andseq	r4, pc, ip
    ce70:	0d960800 	ldceq	8, cr0, [r6]
    ce74:	00000977 	andeq	r0, r0, r7, ror r9
    ce78:	93030014 	movwls	r0, #12308	; 0x3014
    ce7c:	08000024 	stmdaeq	r0, {r2, r5}
    ce80:	0c802f3e 	stceq	15, cr2, [r0], {62}	; 0x3e
    ce84:	8b0e0000 	blhi	38ce8c <__ccfg+0x36cee4>
    ce88:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    ce8c:	5e159f08 	cdppl	15, 1, cr9, cr5, cr8, {0}
    ce90:	0c00000d 	stceq	0, cr0, [r0], {13}
    ce94:	00001f13 	andeq	r1, r0, r3, lsl pc
    ce98:	580da008 	stmdapl	sp, {r3, sp, pc}
    ce9c:	00000000 	andeq	r0, r0, r0
    cea0:	0007780c 	andeq	r7, r7, ip, lsl #16
    cea4:	0da10800 	stceq	8, cr0, [r1]
    cea8:	00000058 	andeq	r0, r0, r8, asr r0
    ceac:	22860c02 	addcs	r0, r6, #512	; 0x200
    ceb0:	a4080000 	strge	r0, [r8], #-0
    ceb4:	000b2813 	andeq	r2, fp, r3, lsl r8
    ceb8:	150c0400 	strne	r0, [ip, #-1024]	; 0xfffffc00
    cebc:	08000020 	stmdaeq	r0, {r5}
    cec0:	09470ca5 	stmdbeq	r7, {r0, r2, r5, r7, sl, fp}^
    cec4:	0c080000 	stceq	0, cr0, [r8], {-0}
    cec8:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
    cecc:	1506ad08 	strne	sl, [r6, #-3336]	; 0xfffff2f8
    ced0:	0c00000f 	stceq	0, cr0, [r0], {15}
    ced4:	0022000c 	eoreq	r0, r2, ip
    ced8:	06b10800 	ldrteq	r0, [r1], r0, lsl #16
    cedc:	00000f5f 	andeq	r0, r0, pc, asr pc
    cee0:	205a0c0d 	subscs	r0, sl, sp, lsl #24
    cee4:	c3080000 	movwgt	r0, #32768	; 0x8000
    cee8:	000f8906 	andeq	r8, pc, r6, lsl #18
    ceec:	f10c0e00 			; <UNDEFINED> instruction: 0xf10c0e00
    cef0:	08000023 	stmdaeq	r0, {r0, r1, r5}
    cef4:	101306cd 	andsne	r0, r3, sp, asr #13
    cef8:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    cefc:	0000233c 	andeq	r2, r0, ip, lsr r3
    cf00:	6b0dce08 	blvs	380728 <__ccfg+0x360780>
    cf04:	10000000 	andne	r0, r0, r0
    cf08:	00213f0c 	eoreq	r3, r1, ip, lsl #30
    cf0c:	0ccf0800 	stcleq	8, cr0, [pc], {0}
    cf10:	00000045 	andeq	r0, r0, r5, asr #32
    cf14:	24430c14 	strbcs	r0, [r3], #-3092	; 0xfffff3ec
    cf18:	d1080000 	mrsle	r0, (UNDEF: 8)
    cf1c:	0000450c 	andeq	r4, r0, ip, lsl #10
    cf20:	4c0c1500 	cfstr32mi	mvfx1, [ip], {-0}
    cf24:	08000024 	stmdaeq	r0, {r2, r5}
    cf28:	00450cd2 	ldrdeq	r0, [r5], #-194	; 0xffffff3e
    cf2c:	0c160000 	ldceq	0, cr0, [r6], {-0}
    cf30:	0000219d 	muleq	r0, sp, r1
    cf34:	8d06db08 	vstrhi	d13, [r6, #-32]	; 0xffffffe0
    cf38:	17000010 	smladne	r0, r0, r0, r0
    cf3c:	00268c0c 	eoreq	r8, r6, ip, lsl #24
    cf40:	0cdc0800 	ldcleq	8, cr0, [ip], {0}
    cf44:	00000947 	andeq	r0, r0, r7, asr #18
    cf48:	21d10c18 	bicscs	r0, r1, r8, lsl ip
    cf4c:	dd080000 	stcle	0, cr0, [r8, #-0]
    cf50:	000bd211 	andeq	sp, fp, r1, lsl r2
    cf54:	a50c1c00 	strge	r1, [ip, #-3072]	; 0xfffff400
    cf58:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    cf5c:	09770dde 	ldmdbeq	r7!, {r1, r2, r3, r4, r6, r7, r8, sl, fp}^
    cf60:	00200000 	eoreq	r0, r0, r0
    cf64:	00247403 	eoreq	r7, r4, r3, lsl #8
    cf68:	3c430800 	mcrrcc	8, 0, r0, r3, cr0
    cf6c:	00000d6a 	andeq	r0, r0, sl, ror #26
    cf70:	00245519 	eoreq	r5, r4, r9, lsl r5
    cf74:	1a082800 	bne	216f7c <__ccfg+0x1f6fd4>
    cf78:	0e671502 	cdpeq	5, 6, cr1, cr7, cr2, {0}
    cf7c:	13170000 	tstne	r7, #0
    cf80:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    cf84:	580d021b 	stmdapl	sp, {r0, r1, r3, r4, r9}
    cf88:	00000000 	andeq	r0, r0, r0
    cf8c:	00077817 	andeq	r7, r7, r7, lsl r8
    cf90:	021d0800 	andseq	r0, sp, #0, 16
    cf94:	0000580d 	andeq	r5, r0, sp, lsl #16
    cf98:	86170200 	ldrhi	r0, [r7], -r0, lsl #4
    cf9c:	08000022 	stmdaeq	r0, {r1, r5}
    cfa0:	28130220 	ldmdacs	r3, {r5, r9}
    cfa4:	0400000b 	streq	r0, [r0], #-11
    cfa8:	00201517 	eoreq	r1, r0, r7, lsl r5
    cfac:	02210800 	eoreq	r0, r1, #0, 16
    cfb0:	0009470c 	andeq	r4, r9, ip, lsl #14
    cfb4:	b6170800 	ldrlt	r0, [r7], -r0, lsl #16
    cfb8:	08000022 	stmdaeq	r0, {r1, r5}
    cfbc:	d7060229 	strle	r0, [r6, -r9, lsr #4]
    cfc0:	0c000010 	stceq	0, cr0, [r0], {16}
    cfc4:	00220017 	eoreq	r0, r2, r7, lsl r0
    cfc8:	022d0800 	eoreq	r0, sp, #0, 16
    cfcc:	00112606 	andseq	r2, r1, r6, lsl #12
    cfd0:	08170d00 	ldmdaeq	r7, {r8, sl, fp}
    cfd4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    cfd8:	53060233 	movwpl	r0, #25139	; 0x6233
    cfdc:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    cfe0:	00226f17 	eoreq	r6, r2, r7, lsl pc
    cfe4:	02380800 	eorseq	r0, r8, #0, 16
    cfe8:	00118006 	andseq	r8, r1, r6
    cfec:	9e171000 	cdpls	0, 1, cr1, cr7, cr0, {0}
    cff0:	08000020 	stmdaeq	r0, {r5}
    cff4:	450c0239 	strmi	r0, [ip, #-569]	; 0xfffffdc7
    cff8:	14000000 	strne	r0, [r0], #-0
    cffc:	00233217 	eoreq	r3, r3, r7, lsl r2
    d000:	02410800 	subeq	r0, r1, #0, 16
    d004:	0011ad06 	andseq	sl, r1, r6, lsl #26
    d008:	0a171500 	beq	5d2410 <__ccfg+0x5b2468>
    d00c:	08000020 	stmdaeq	r0, {r5}
    d010:	da060255 	ble	18d96c <__ccfg+0x16d9c4>
    d014:	16000011 			; <UNDEFINED> instruction: 0x16000011
    d018:	00147d17 	andseq	r7, r4, r7, lsl sp
    d01c:	02680800 	rsbeq	r0, r8, #0, 16
    d020:	00123a06 	andseq	r3, r2, r6, lsl #20
    d024:	96171800 	ldrls	r1, [r7], -r0, lsl #16
    d028:	08000020 	stmdaeq	r0, {r5}
    d02c:	580d0269 	stmdapl	sp, {r0, r3, r5, r6, r9}
    d030:	1a000000 	bne	d038 <__exidx_end+0x73f8>
    d034:	0024d417 	eoreq	sp, r4, r7, lsl r4
    d038:	026a0800 	rsbeq	r0, sl, #0, 16
    d03c:	000b2e0e 	andeq	r2, fp, lr, lsl #28
    d040:	45171c00 	ldrmi	r1, [r7, #-3072]	; 0xfffff400
    d044:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d048:	580d026c 	stmdapl	sp, {r2, r3, r5, r6, r9}
    d04c:	20000000 	andcs	r0, r0, r0
    d050:	00228e17 	eoreq	r8, r2, r7, lsl lr
    d054:	02700800 	rsbseq	r0, r0, #0, 16
    d058:	0000240c 	andeq	r2, r0, ip, lsl #8
    d05c:	cc172200 	lfmgt	f2, 4, [r7], {-0}
    d060:	08000023 	stmdaeq	r0, {r0, r1, r5}
    d064:	450c0273 	strmi	r0, [ip, #-627]	; 0xfffffd8d
    d068:	24000000 	strcs	r0, [r0], #-0
    d06c:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    d070:	0eb1047f 	mrceq	4, 5, r0, cr1, cr15, {3}
    d074:	69200000 	stmdbvs	r0!, {}	; <UNPREDICTABLE>
    d078:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d07c:	00450f80 	subeq	r0, r5, r0, lsl #31
    d080:	04010000 	streq	r0, [r1], #-0
    d084:	07200004 	streq	r0, [r0, -r4]!
    d088:	08000021 	stmdaeq	r0, {r0, r5}
    d08c:	00450f81 	subeq	r0, r5, r1, lsl #31
    d090:	01010000 	mrseq	r0, (UNDEF: 1)
    d094:	c7200003 	strgt	r0, [r0, -r3]!
    d098:	08000021 	stmdaeq	r0, {r0, r5}
    d09c:	00450f83 	subeq	r0, r5, r3, lsl #31
    d0a0:	02010000 	andeq	r0, r1, #0
    d0a4:	82200001 	eorhi	r0, r0, #1
    d0a8:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d0ac:	00450f84 	subeq	r0, r5, r4, lsl #31
    d0b0:	01010000 	mrseq	r0, (UNDEF: 1)
    d0b4:	0b000000 	bleq	d0bc <__exidx_end+0x747c>
    d0b8:	04870801 	streq	r0, [r7], #2049	; 0x801
    d0bc:	00000edb 	ldrdeq	r0, [r0], -fp
    d0c0:	0025e420 	eoreq	lr, r5, r0, lsr #8
    d0c4:	0f880800 	svceq	0x00880800
    d0c8:	00000045 	andeq	r0, r0, r5, asr #32
    d0cc:	00040401 	andeq	r0, r4, r1, lsl #8
    d0d0:	00273820 	eoreq	r3, r7, r0, lsr #16
    d0d4:	0f890800 	svceq	0x00890800
    d0d8:	00000045 	andeq	r0, r0, r5, asr #32
    d0dc:	00000401 	andeq	r0, r0, r1, lsl #8
    d0e0:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    d0e4:	0f15048b 	svceq	0x0015048b
    d0e8:	77200000 	strvc	r0, [r0, -r0]!
    d0ec:	08000026 	stmdaeq	r0, {r1, r2, r5}
    d0f0:	00450f8c 	subeq	r0, r5, ip, lsl #31
    d0f4:	01010000 	mrseq	r0, (UNDEF: 1)
    d0f8:	ff200007 			; <UNDEFINED> instruction: 0xff200007
    d0fc:	08000026 	stmdaeq	r0, {r1, r2, r5}
    d100:	00450f8f 	subeq	r0, r5, pc, lsl #31
    d104:	01010000 	mrseq	r0, (UNDEF: 1)
    d108:	38200004 	stmdacc	r0!, {r2}
    d10c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d110:	00450f91 	umaaleq	r0, r5, r1, pc	; <UNPREDICTABLE>
    d114:	01010000 	mrseq	r0, (UNDEF: 1)
    d118:	0b000003 	bleq	d12c <__exidx_end+0x74ec>
    d11c:	04a60801 	strteq	r0, [r6], #2049	; 0x801
    d120:	00000f5f 	andeq	r0, r0, pc, asr pc
    d124:	00276920 	eoreq	r6, r7, r0, lsr #18
    d128:	0fa70800 	svceq	0x00a70800
    d12c:	00000045 	andeq	r0, r0, r5, asr #32
    d130:	00040401 	andeq	r0, r4, r1, lsl #8
    d134:	00210720 	eoreq	r0, r1, r0, lsr #14
    d138:	0fa80800 	svceq	0x00a80800
    d13c:	00000045 	andeq	r0, r0, r5, asr #32
    d140:	00030101 	andeq	r0, r3, r1, lsl #2
    d144:	0021c720 	eoreq	ip, r1, r0, lsr #14
    d148:	0faa0800 	svceq	0x00aa0800
    d14c:	00000045 	andeq	r0, r0, r5, asr #32
    d150:	00010201 	andeq	r0, r1, r1, lsl #4
    d154:	001f8220 	andseq	r8, pc, r0, lsr #4
    d158:	0fab0800 	svceq	0x00ab0800
    d15c:	00000045 	andeq	r0, r0, r5, asr #32
    d160:	00000101 	andeq	r0, r0, r1, lsl #2
    d164:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    d168:	0f8904ae 	svceq	0x008904ae
    d16c:	e4200000 	strt	r0, [r0], #-0
    d170:	08000025 	stmdaeq	r0, {r0, r2, r5}
    d174:	00450faf 	subeq	r0, r5, pc, lsr #31
    d178:	04010000 	streq	r0, [r1], #-0
    d17c:	38200004 	stmdacc	r0!, {r2}
    d180:	08000027 	stmdaeq	r0, {r0, r1, r2, r5}
    d184:	00450fb0 	strheq	r0, [r5], #-240	; 0xffffff10
    d188:	04010000 	streq	r0, [r1], #-0
    d18c:	0b000000 	bleq	d194 <__exidx_end+0x7554>
    d190:	04b20801 	ldrteq	r0, [r2], #2049	; 0x801
    d194:	00001013 	andeq	r1, r0, r3, lsl r0
    d198:	00267720 	eoreq	r7, r6, r0, lsr #14
    d19c:	0fb30800 	svceq	0x00b30800
    d1a0:	00000045 	andeq	r0, r0, r5, asr #32
    d1a4:	00070101 	andeq	r0, r7, r1, lsl #2
    d1a8:	001fad20 	andseq	sl, pc, r0, lsr #26
    d1ac:	0fb50800 	svceq	0x00b50800
    d1b0:	00000045 	andeq	r0, r0, r5, asr #32
    d1b4:	00060101 	andeq	r0, r6, r1, lsl #2
    d1b8:	00255520 	eoreq	r5, r5, r0, lsr #10
    d1bc:	0fb70800 	svceq	0x00b70800
    d1c0:	00000045 	andeq	r0, r0, r5, asr #32
    d1c4:	00050101 	andeq	r0, r5, r1, lsl #2
    d1c8:	0026ff20 	eoreq	pc, r6, r0, lsr #30
    d1cc:	0fb90800 	svceq	0x00b90800
    d1d0:	00000045 	andeq	r0, r0, r5, asr #32
    d1d4:	00040101 	andeq	r0, r4, r1, lsl #2
    d1d8:	001f3820 	andseq	r3, pc, r0, lsr #16
    d1dc:	0fbb0800 	svceq	0x00bb0800
    d1e0:	00000045 	andeq	r0, r0, r5, asr #32
    d1e4:	00030101 	andeq	r0, r3, r1, lsl #2
    d1e8:	00269420 	eoreq	r9, r6, r0, lsr #8
    d1ec:	0fbd0800 	svceq	0x00bd0800
    d1f0:	00000045 	andeq	r0, r0, r5, asr #32
    d1f4:	00020101 	andeq	r0, r2, r1, lsl #2
    d1f8:	0021d820 	eoreq	sp, r1, r0, lsr #16
    d1fc:	0fbf0800 	svceq	0x00bf0800
    d200:	00000045 	andeq	r0, r0, r5, asr #32
    d204:	00010101 	andeq	r0, r1, r1, lsl #2
    d208:	00256020 	eoreq	r6, r5, r0, lsr #32
    d20c:	0fc10800 	svceq	0x00c10800
    d210:	00000045 	andeq	r0, r0, r5, asr #32
    d214:	00000101 	andeq	r0, r0, r1, lsl #2
    d218:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    d21c:	108d04c4 	addne	r0, sp, r4, asr #9
    d220:	96200000 	strtls	r0, [r0], -r0
    d224:	08000022 	stmdaeq	r0, {r1, r5}
    d228:	00450fc5 	subeq	r0, r5, r5, asr #31
    d22c:	01010000 	mrseq	r0, (UNDEF: 1)
    d230:	cf200007 	svcgt	0x00200007
    d234:	08000020 	stmdaeq	r0, {r5}
    d238:	00450fc6 	subeq	r0, r5, r6, asr #31
    d23c:	01010000 	mrseq	r0, (UNDEF: 1)
    d240:	0a200006 	beq	80d260 <__ccfg+0x7ed2b8>
    d244:	08000022 	stmdaeq	r0, {r1, r5}
    d248:	00450fc8 	subeq	r0, r5, r8, asr #31
    d24c:	01010000 	mrseq	r0, (UNDEF: 1)
    d250:	73200004 			; <UNDEFINED> instruction: 0x73200004
    d254:	08000021 	stmdaeq	r0, {r0, r5}
    d258:	00450fc9 	subeq	r0, r5, r9, asr #31
    d25c:	01010000 	mrseq	r0, (UNDEF: 1)
    d260:	e9200003 	stmdb	r0!, {r0, r1}
    d264:	08000024 	stmdaeq	r0, {r2, r5}
    d268:	00450fca 	subeq	r0, r5, sl, asr #31
    d26c:	01010000 	mrseq	r0, (UNDEF: 1)
    d270:	1f200002 	svcne	0x00200002
    d274:	08000020 	stmdaeq	r0, {r5}
    d278:	00450fcb 	subeq	r0, r5, fp, asr #31
    d27c:	01010000 	mrseq	r0, (UNDEF: 1)
    d280:	1d200001 	stcne	0, cr0, [r0, #-4]!
    d284:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d288:	00450fcc 	subeq	r0, r5, ip, asr #31
    d28c:	01010000 	mrseq	r0, (UNDEF: 1)
    d290:	0b000000 	bleq	d298 <__exidx_end+0x7658>
    d294:	04d40801 	ldrbeq	r0, [r4], #2049	; 0x801
    d298:	000010d7 	ldrdeq	r1, [r0], -r7
    d29c:	00276920 	eoreq	r6, r7, r0, lsr #18
    d2a0:	0fd50800 	svceq	0x00d50800
    d2a4:	00000045 	andeq	r0, r0, r5, asr #32
    d2a8:	00040401 	andeq	r0, r4, r1, lsl #8
    d2ac:	00210720 	eoreq	r0, r1, r0, lsr #14
    d2b0:	0fd60800 	svceq	0x00d60800
    d2b4:	00000045 	andeq	r0, r0, r5, asr #32
    d2b8:	00030101 	andeq	r0, r3, r1, lsl #2
    d2bc:	0021c720 	eoreq	ip, r1, r0, lsr #14
    d2c0:	0fd80800 	svceq	0x00d80800
    d2c4:	00000045 	andeq	r0, r0, r5, asr #32
    d2c8:	00010201 	andeq	r0, r1, r1, lsl #4
    d2cc:	001f8220 	andseq	r8, pc, r0, lsr #4
    d2d0:	0fd90800 	svceq	0x00d90800
    d2d4:	00000045 	andeq	r0, r0, r5, asr #32
    d2d8:	00000101 	andeq	r0, r0, r1, lsl #2
    d2dc:	08011a00 	stmdaeq	r1, {r9, fp, ip}
    d2e0:	26040222 	strcs	r0, [r4], -r2, lsr #4
    d2e4:	21000011 	tstcs	r0, r1, lsl r0
    d2e8:	00002769 	andeq	r2, r0, r9, ror #14
    d2ec:	0f022308 	svceq	0x00022308
    d2f0:	00000045 	andeq	r0, r0, r5, asr #32
    d2f4:	00040401 	andeq	r0, r4, r1, lsl #8
    d2f8:	00210721 	eoreq	r0, r1, r1, lsr #14
    d2fc:	02240800 	eoreq	r0, r4, #0, 16
    d300:	0000450f 	andeq	r4, r0, pc, lsl #10
    d304:	03010100 	movweq	r0, #4352	; 0x1100
    d308:	21c72100 	biccs	r2, r7, r0, lsl #2
    d30c:	26080000 	strcs	r0, [r8], -r0
    d310:	00450f02 	subeq	r0, r5, r2, lsl #30
    d314:	02010000 	andeq	r0, r1, #0
    d318:	82210001 	eorhi	r0, r1, #1
    d31c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d320:	450f0227 	strmi	r0, [pc, #-551]	; d101 <__exidx_end+0x74c1>
    d324:	01000000 	mrseq	r0, (UNDEF: 0)
    d328:	00000001 	andeq	r0, r0, r1
    d32c:	2a08011a 	bcs	20d79c <__ccfg+0x1ed7f4>
    d330:	11530402 	cmpne	r3, r2, lsl #8
    d334:	e4210000 	strt	r0, [r1], #-0
    d338:	08000025 	stmdaeq	r0, {r0, r2, r5}
    d33c:	450f022b 	strmi	r0, [pc, #-555]	; d119 <__exidx_end+0x74d9>
    d340:	01000000 	mrseq	r0, (UNDEF: 0)
    d344:	21000404 	tstcs	r0, r4, lsl #8
    d348:	00002738 	andeq	r2, r0, r8, lsr r7
    d34c:	0f022c08 	svceq	0x00022c08
    d350:	00000045 	andeq	r0, r0, r5, asr #32
    d354:	00000401 	andeq	r0, r0, r1, lsl #8
    d358:	08021a00 	stmdaeq	r2, {r9, fp, ip}
    d35c:	8004022e 	andhi	r0, r4, lr, lsr #4
    d360:	21000011 	tstcs	r0, r1, lsl r0
    d364:	0000221f 	andeq	r2, r0, pc, lsl r2
    d368:	10022f08 	andne	r2, r2, r8, lsl #30
    d36c:	00000058 	andeq	r0, r0, r8, asr r0
    d370:	000d0302 	andeq	r0, sp, r2, lsl #6
    d374:	00271b21 	eoreq	r1, r7, r1, lsr #22
    d378:	02320800 	eorseq	r0, r2, #0, 16
    d37c:	00005810 	andeq	r5, r0, r0, lsl r8
    d380:	000d0200 	andeq	r0, sp, r0, lsl #4
    d384:	041a0000 	ldreq	r0, [sl], #-0
    d388:	04023408 	streq	r3, [r2], #-1032	; 0xfffffbf8
    d38c:	000011ad 	andeq	r1, r0, sp, lsr #3
    d390:	0023b421 	eoreq	fp, r3, r1, lsr #8
    d394:	02350800 	eorseq	r0, r5, #0, 16
    d398:	00006b10 	andeq	r6, r0, r0, lsl fp
    d39c:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    d3a0:	24c42100 	strbcs	r2, [r4], #256	; 0x100
    d3a4:	37080000 	strcc	r0, [r8, -r0]
    d3a8:	006b1002 	rsbeq	r1, fp, r2
    d3ac:	15040000 	strne	r0, [r4, #-0]
    d3b0:	1a000003 	bne	d3c4 <__exidx_end+0x7784>
    d3b4:	023a0801 	eorseq	r0, sl, #65536	; 0x10000
    d3b8:	0011da04 	andseq	sp, r1, r4, lsl #20
    d3bc:	26102100 	ldrcs	r2, [r0], -r0, lsl #2
    d3c0:	3b080000 	blcc	20d3c8 <__ccfg+0x1ed420>
    d3c4:	00450f02 	subeq	r0, r5, r2, lsl #30
    d3c8:	06010000 	streq	r0, [r1], -r0
    d3cc:	da210002 	ble	84d3dc <__ccfg+0x82d434>
    d3d0:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d3d4:	450f023d 	strmi	r0, [pc, #-573]	; d19f <__exidx_end+0x755f>
    d3d8:	01000000 	mrseq	r0, (UNDEF: 0)
    d3dc:	00000002 	andeq	r0, r0, r2
    d3e0:	4208021a 	andmi	r0, r8, #-1610612735	; 0xa0000001
    d3e4:	123a0402 	eorsne	r0, sl, #33554432	; 0x2000000
    d3e8:	bd210000 	stclt	0, cr0, [r1, #-0]
    d3ec:	08000023 	stmdaeq	r0, {r0, r1, r5}
    d3f0:	58100243 	ldmdapl	r0, {r0, r1, r6, r9}
    d3f4:	02000000 	andeq	r0, r0, #0
    d3f8:	21000a06 	tstcs	r0, r6, lsl #20
    d3fc:	00002259 	andeq	r2, r0, r9, asr r2
    d400:	10024408 	andne	r4, r2, r8, lsl #8
    d404:	00000058 	andeq	r0, r0, r8, asr r0
    d408:	00090102 	andeq	r0, r9, r2, lsl #2
    d40c:	00242521 	eoreq	r2, r4, r1, lsr #10
    d410:	02460800 	subeq	r0, r6, #0, 16
    d414:	00005810 	andeq	r5, r0, r0, lsl r8
    d418:	08010200 	stmdaeq	r1, {r9}
    d41c:	1fc22100 	svcne	0x00c22100
    d420:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
    d424:	00581002 	subseq	r1, r8, r2
    d428:	04020000 	streq	r0, [r2], #-0
    d42c:	65210004 	strvs	r0, [r1, #-4]!
    d430:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    d434:	5810024d 	ldmdapl	r0, {r0, r2, r3, r6, r9}
    d438:	02000000 	andeq	r0, r0, #0
    d43c:	00000003 	andeq	r0, r0, r3
    d440:	5608021a 			; <UNDEFINED> instruction: 0x5608021a
    d444:	12890402 	addne	r0, r9, #33554432	; 0x2000000
    d448:	ba210000 	blt	84d450 <__ccfg+0x82d4a8>
    d44c:	08000021 	stmdaeq	r0, {r0, r5}
    d450:	58100257 	ldmdapl	r0, {r0, r1, r2, r4, r6, r9}
    d454:	02000000 	andeq	r0, r0, #0
    d458:	21000d03 	tstcs	r0, r3, lsl #26
    d45c:	00002159 	andeq	r2, r0, r9, asr r1
    d460:	10025d08 	andne	r5, r2, r8, lsl #26
    d464:	00000058 	andeq	r0, r0, r8, asr r0
    d468:	000c0102 	andeq	r0, ip, r2, lsl #2
    d46c:	0020f921 	eoreq	pc, r0, r1, lsr #18
    d470:	025f0800 	subseq	r0, pc, #0, 16
    d474:	00005810 	andeq	r5, r0, r0, lsl r8
    d478:	06060200 	streq	r0, [r6], -r0, lsl #4
    d47c:	23f82100 	mvnscs	r2, #0, 2
    d480:	66080000 	strvs	r0, [r8], -r0
    d484:	00581002 	subseq	r1, r8, r2
    d488:	01020000 	mrseq	r0, (UNDEF: 2)
    d48c:	09000005 	stmdbeq	r0, {r0, r2}
    d490:	00000077 	andeq	r0, r0, r7, ror r0
    d494:	00001299 	muleq	r0, r9, r2
    d498:	0000910a 	andeq	r9, r0, sl, lsl #2
    d49c:	0400a200 	streq	sl, [r0], #-512	; 0xfffffe00
    d4a0:	00001289 	andeq	r1, r0, r9, lsl #5
    d4a4:	0022c322 	eoreq	ip, r2, r2, lsr #6
    d4a8:	10490900 	subne	r0, r9, r0, lsl #18
    d4ac:	00001299 	muleq	r0, r9, r2
    d4b0:	04ad028c 	strteq	r0, [sp], #652	; 0x28c
    d4b4:	04492100 	strbeq	r2, [r9], #-256	; 0xffffff00
    d4b8:	047d2100 	ldrbteq	r2, [sp], #-256	; 0xffffff00
    d4bc:	04812100 	streq	r2, [r1], #256	; 0x100
    d4c0:	05112100 	ldreq	r2, [r1, #-256]	; 0xffffff00
    d4c4:	05912100 	ldreq	r2, [r1, #256]	; 0x100
    d4c8:	06412100 	strbeq	r2, [r1], -r0, lsl #2
    d4cc:	b5f82100 	ldrblt	r2, [r8, #256]!	; 0x100
    d4d0:	b5f84710 	ldrblt	r4, [r8, #1808]!	; 0x710
    d4d4:	2100460e 	tstcs	r0, lr, lsl #12
    d4d8:	04ad2501 	strteq	r2, [sp], #1281	; 0x501
    d4dc:	480a4730 	stmdami	sl, {r4, r5, r8, r9, sl, lr}
    d4e0:	f0007803 			; <UNDEFINED> instruction: 0xf0007803
    d4e4:	079bf80f 	ldreq	pc, [fp, pc, lsl #16]
    d4e8:	4c12d00b 	ldcmi	0, cr13, [r2], {11}
    d4ec:	28ff7820 	ldmcs	pc!, {r5, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    d4f0:	21ffd007 	mvnscs	sp, r7
    d4f4:	490e7021 	stmdbmi	lr, {r0, r5, ip, sp, lr}
    d4f8:	0224240f 	eoreq	r2, r4, #251658240	; 0xf000000
    d4fc:	31604320 	cmncc	r0, r0, lsr #6
    d500:	bdf882c8 	lfmlt	f0, 3, [r8, #800]!	; 0x320
    d504:	4801b5f8 	stmdami	r1, {r3, r4, r5, r6, r7, r8, sl, ip, sp, pc}
    d508:	026b4700 	rsbeq	r4, fp, #0, 14
    d50c:	4ce52100 	stfmie	f2, [r5]
    d510:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
    d514:	4808e001 	stmdami	r8, {r0, sp, lr, pc}
    d518:	4c060c00 	stcmi	12, cr0, [r6], {-0}
    d51c:	78224905 	stmdavc	r2!, {r0, r2, r8, fp, lr}
    d520:	d1012aff 	strdle	r2, [r1, -pc]
    d524:	70227aca 	eorvc	r7, r2, sl, asr #21
    d528:	82c83160 	sbchi	r3, r8, #96, 2
    d52c:	1c804670 	stcne	6, cr4, [r0], {112}	; 0x70
    d530:	62004700 	andvs	r4, r0, #0, 14
    d534:	06a44008 	strteq	r4, [r4], r8
    d538:	0f072100 	svceq	0x00072100
    d53c:	b4f00808 	ldrbtlt	r0, [r0], #2056	; 0x808
    d540:	b5704708 	ldrblt	r4, [r0, #-1800]!	; 0xfffff8f8
    d544:	46154603 	ldrmi	r4, [r5], -r3, lsl #12
    d548:	d0062901 	andle	r2, r6, r1, lsl #18
    d54c:	d0062900 	andle	r2, r6, r0, lsl #18
    d550:	46284a11 			; <UNDEFINED> instruction: 0x46284a11
    d554:	ffbbf7ff 			; <UNDEFINED> instruction: 0xffbbf7ff
    d558:	480fbd70 	stmdami	pc, {r4, r5, r6, r8, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    d55c:	480fe000 	stmdami	pc, {sp, lr, pc}	; <UNPREDICTABLE>
    d560:	42832405 	addmi	r2, r3, #83886080	; 0x5000000
    d564:	0840d803 	stmdaeq	r0, {r0, r1, fp, ip, lr, pc}^
    d568:	2c001e64 	stccs	14, cr1, [r0], {100}	; 0x64
    d56c:	40e3dcf9 	strdmi	sp, [r3], #201	; 0xc9	; <UNPREDICTABLE>
    d570:	03402001 	movteq	r2, #1
    d574:	0b821818 	bleq	fe0935dc <_estack+0xde08e5dc>
    d578:	d0072901 	andle	r2, r7, r1, lsl #18
    d57c:	23004906 	movwcs	r4, #2310	; 0x906
    d580:	46283180 	strtmi	r3, [r8], -r0, lsl #3
    d584:	ffa5f7ff 			; <UNDEFINED> instruction: 0xffa5f7ff
    d588:	bd70b2e0 	lfmlt	f3, 3, [r0, #-896]!	; 0xfffffc80
    d58c:	4b044902 	blmi	11f99c <__ccfg+0xff9f4>
    d590:	e7f6316c 	ldrb	r3, [r6, ip, ror #2]!
    d594:	5c830000 	stcpl	0, cr0, [r3], {0}
    d598:	bca00000 	stclt	0, cr0, [r0]
    d59c:	83002386 	movwhi	r2, #902	; 0x386
    d5a0:	0674230d 	ldrbteq	r2, [r4], -sp, lsl #6
    d5a4:	b5f82100 	ldrblt	r2, [r8, #256]!	; 0x100
    d5a8:	46054e1a 			; <UNDEFINED> instruction: 0x46054e1a
    d5ac:	48196b71 	ldmdami	r9, {r0, r4, r5, r6, r8, r9, fp, sp, lr}
    d5b0:	01e409cc 	mvneq	r0, ip, asr #19
    d5b4:	d0112d00 	andsle	r2, r1, r0, lsl #26
    d5b8:	78094918 	stmdavc	r9, {r3, r4, r8, fp, lr}
    d5bc:	d00f2902 	andle	r2, pc, r2, lsl #18
    d5c0:	43047b00 	movwmi	r7, #19200	; 0x4b00
    d5c4:	2001b672 	andcs	fp, r1, r2, ror r6
    d5c8:	02404f15 	subeq	r4, r0, #21, 30	; 0x54
    d5cc:	481147b8 	ldmdami	r1, {r3, r4, r5, r7, r8, r9, sl, lr}
    d5d0:	88003820 	stmdahi	r0, {r5, fp, ip, sp}
    d5d4:	07c909c1 	strbeq	r0, [r9, r1, asr #19]
    d5d8:	e016d004 	ands	sp, r6, r4
    d5dc:	e7f07ac0 	ldrb	r7, [r0, r0, asr #21]!
    d5e0:	e7ee7b40 	strb	r7, [lr, r0, asr #22]!
    d5e4:	6374490f 	cmnvs	r4, #245760	; 0x3c000
    d5e8:	0a4061cc 	beq	1025d20 <__ccfg+0x1005d78>
    d5ec:	d00c07c0 	andle	r0, ip, r0, asr #15
    d5f0:	03802001 	orreq	r2, r0, #1
    d5f4:	2d006b31 	vstrcs	d6, [r0, #-196]	; 0xffffff3c
    d5f8:	4301d001 	movwmi	sp, #4097	; 0x1001
    d5fc:	4381e000 	orrmi	lr, r1, #0
    d600:	63314608 	teqvs	r1, #8, 12	; 0x800000
    d604:	39404907 	stmdbcc	r0, {r0, r1, r2, r8, fp, lr}^
    d608:	20006348 	andcs	r6, r0, r8, asr #6
    d60c:	b66247b8 			; <UNDEFINED> instruction: 0xb66247b8
    d610:	0280bdf8 	addeq	fp, r0, #248, 26	; 0x3e00
    d614:	00882100 	addeq	r2, r8, r0, lsl #2
    d618:	029b2100 	addseq	r2, fp, #0, 2
    d61c:	3f7b2100 	svccc	0x007b2100
    d620:	40400000 	submi	r0, r0, r0
    d624:	b5104004 	ldrlt	r4, [r0, #-4]
    d628:	21004a22 	tstcs	r0, r2, lsr #20
    d62c:	49216151 	stmdbmi	r1!, {r0, r4, r6, r8, sp, lr}
    d630:	00c96889 	sbceq	r6, r9, r9, lsl #17
    d634:	4921d409 	stmdbmi	r1!, {r0, r3, sl, ip, lr, pc}
    d638:	05ca4b20 	strbeq	r4, [sl, #2848]	; 0xb20
    d63c:	6b4b4298 	blvs	12de0a4 <__ccfg+0x12be0fc>
    d640:	4313d801 	tstmi	r3, #65536	; 0x10000
    d644:	4393e000 	orrsmi	lr, r3, #0
    d648:	491d634b 	ldmdbmi	sp, {r0, r1, r3, r6, r8, r9, sp, lr}
    d64c:	ff77f7ff 			; <UNDEFINED> instruction: 0xff77f7ff
    d650:	b538bd10 	ldrlt	fp, [r8, #-3344]!	; 0xfffff2f0
    d654:	7f284d1a 	svcvc	0x00284d1a
    d658:	d1272800 			; <UNDEFINED> instruction: 0xd1272800
    d65c:	8800481a 	stmdahi	r0, {r1, r3, r4, fp, lr}
    d660:	07c009c0 	strbeq	r0, [r0, r0, asr #19]
    d664:	4c12d122 	ldfmid	f5, [r2], {34}	; 0x22
    d668:	28006960 	stmdacs	r0, {r5, r6, r8, fp, sp, lr}
    d66c:	4668d11e 			; <UNDEFINED> instruction: 0x4668d11e
    d670:	f845f000 			; <UNDEFINED> instruction: 0xf845f000
    d674:	78004668 	stmdavc	r0, {r3, r5, r6, r9, sl, lr}
    d678:	d1172801 	tstle	r7, r1, lsl #16
    d67c:	78404668 	stmdavc	r0, {r3, r5, r6, r9, sl, lr}^
    d680:	d2132810 	andsle	r2, r3, #16, 16	; 0x100000
    d684:	61602008 	cmnvs	r0, r8
    d688:	09406a68 	stmdbeq	r0, {r3, r5, r6, r9, fp, sp, lr}^
    d68c:	60200140 	eorvs	r0, r0, r0, asr #2
    d690:	21004a0e 	tstcs	r0, lr, lsl #20
    d694:	4a0d62d1 	bmi	3661e0 <__ccfg+0x346238>
    d698:	60112102 	andsvs	r2, r1, r2, lsl #2
    d69c:	43082101 	movwmi	r2, #33025	; 0x8101
    d6a0:	21036020 	tstcs	r3, r0, lsr #32
    d6a4:	62684308 	rsbvs	r4, r8, #8, 6	; 0x20000000
    d6a8:	bd386020 	ldclt	0, cr6, [r8, #-128]!	; 0xffffff80
    d6ac:	47804809 	strmi	r4, [r0, r9, lsl #16]
    d6b0:	4000bd38 	andmi	fp, r0, r8, lsr sp
    d6b4:	00184004 	andseq	r4, r8, r4
    d6b8:	00002100 	andeq	r2, r0, r0, lsl #2
    d6bc:	02800893 	addeq	r0, r0, #9633792	; 0x930000
    d6c0:	68cf2100 	stmiavs	pc, {r8, sp}^	; <UNPREDICTABLE>
    d6c4:	00680000 	rsbeq	r0, r8, r0
    d6c8:	11002100 	mrsne	r2, (UNDEF: 16)
    d6cc:	e2804004 	add	r4, r0, #4
    d6d0:	3bc3e000 	blcc	ff1056d8 <_estack+0xdf1006d8>
    d6d4:	49070000 	stmdbmi	r7, {}	; <UNPREDICTABLE>
    d6d8:	d0002800 	andle	r2, r0, r0, lsl #16
    d6dc:	4a062004 	bmi	1956f4 <__ccfg+0x17574c>
    d6e0:	7809b672 	stmdavc	r9, {r1, r4, r5, r6, r9, sl, ip, sp, pc}
    d6e4:	d00107c9 	andle	r0, r1, r9, asr #15
    d6e8:	e0005810 	and	r5, r0, r0, lsl r8
    d6ec:	b6622080 	strbtlt	r2, [r2], -r0, lsl #1
    d6f0:	4770b240 	ldrbmi	fp, [r0, -r0, asr #4]!
    d6f4:	026b0000 	rsbeq	r0, fp, #0
    d6f8:	60582100 	subsvs	r2, r8, r0, lsl #2
    d6fc:	b4034004 	strlt	r4, [r3], #-4
    d700:	90014801 	andls	r4, r1, r1, lsl #16
    d704:	6fa5bd01 	svcvs	0x00a5bd01
    d708:	00000000 	andeq	r0, r0, r0
    d70c:	00010000 	andeq	r0, r1, r0
    d710:	000a0003 	andeq	r0, sl, r3
    d714:	0059001f 	subseq	r0, r9, pc, lsl r0
    d718:	023900eb 	eorseq	r0, r9, #235	; 0xeb
    d71c:	09f904ea 	ldmibeq	r9!, {r1, r3, r5, r6, r7, sl}^
    d720:	1feb1297 	svcne	0x00eb1297
    d724:	4a7832a1 	bmi	1e1a1b0 <__ccfg+0x1dfa208>
    d728:	82fa660a 	rscshi	r6, sl, #10485760	; 0xa00000
    d72c:	b6639e8c 	strbtlt	r9, [r3], -ip, lsl #29
    d730:	d664c917 			; <UNDEFINED> instruction: 0xd664c917
    d734:	e3c1deed 	bic	sp, r1, #3792	; 0xed0
    d738:	00ffe5e0 	rscseq	lr, pc, r0, ror #11
    d73c:	77090000 	strvc	r0, [r9, -r0]
    d740:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    d744:	23000015 	movwcs	r0, #21
    d748:	00000091 	muleq	r0, r1, r0
    d74c:	040001ac 	streq	r0, [r0], #-428	; 0xfffffe54
    d750:	00001538 	andeq	r1, r0, r8, lsr r5
    d754:	00234c22 	eoreq	r4, r3, r2, lsr #24
    d758:	103a0a00 	eorsne	r0, sl, r0, lsl #20
    d75c:	00001549 	andeq	r1, r0, r9, asr #10
    d760:	61a306b4 			; <UNDEFINED> instruction: 0x61a306b4
    d764:	147f0000 	ldrbtne	r0, [pc], #-0	; d76c <__exidx_end+0x7b2c>
    d768:	004d1307 	subeq	r1, sp, r7, lsl #6
    d76c:	1f2e24f1 	svcne	0x002e24f1
    d770:	0ab03f13 	beq	fec1d3c4 <_estack+0xdec183c4>
    d774:	ff07003f 			; <UNDEFINED> instruction: 0xff07003f
    d778:	40300000 	eorsmi	r0, r0, r0
    d77c:	40014000 	andmi	r4, r1, r0
    d780:	40074003 	andmi	r4, r7, r3
    d784:	404f400f 	submi	r4, pc, pc
    d788:	41cf40cf 	bicmi	r4, pc, pc, asr #1
    d78c:	47cf43cf 	strbmi	r4, [pc, pc, asr #7]
    d790:	3fcf4fcf 	svccc	0x00cf4fcf
    d794:	1fcf2fcf 	svcne	0x00cf2fcf
    d798:	00000fcf 	andeq	r0, r0, pc, asr #31
    d79c:	000f0000 	andeq	r0, pc, r0
    d7a0:	00000008 	andeq	r0, r0, r8
    d7a4:	0000003f 	andeq	r0, r0, pc, lsr r0
    d7a8:	003f0040 	eorseq	r0, pc, r0, asr #32
    d7ac:	00040000 	andeq	r0, r4, r0
    d7b0:	000e0068 	andeq	r0, lr, r8, rrx
    d7b4:	000600dc 	ldrdeq	r0, [r6], -ip
    d7b8:	001a0043 	andseq	r0, sl, r3, asr #32
    d7bc:	00000005 	andeq	r0, r0, r5
    d7c0:	00020000 	andeq	r0, r2, r0
    d7c4:	003f0000 	eorseq	r0, pc, r0
    d7c8:	00000000 	andeq	r0, r0, r0
    d7cc:	00c00004 	sbceq	r0, r0, r4
    d7d0:	00040000 	andeq	r0, r4, r0
    d7d4:	000000c0 	andeq	r0, r0, r0, asr #1
    d7d8:	c0500007 	subsgt	r0, r0, r7
    d7dc:	70009100 	andvc	r9, r0, r0, lsl #2
    d7e0:	9100c070 	tstls	r0, r0, ror r0
    d7e4:	31827000 	orrcc	r7, r2, r0
    d7e8:	91310021 	teqls	r1, r1, lsr #32
    d7ec:	7000b110 	andvc	fp, r0, r0, lsl r1
    d7f0:	b1018101 	tstlt	r1, r1, lsl #2
    d7f4:	3182a100 	orrcc	sl, r2, r0, lsl #2
    d7f8:	b1109132 	tstlt	r0, r2, lsr r1
    d7fc:	10119101 	andsne	r9, r1, r1, lsl #2
    d800:	22418141 	subcs	r8, r1, #1073741840	; 0x40000010
    d804:	06f1404f 	ldrbteq	r4, [r1], pc, asr #32
    d808:	c0517000 	subsgt	r7, r1, r0
    d80c:	18309101 	ldmdane	r0!, {r0, r8, ip, pc}
    d810:	31833910 	orrcc	r3, r3, r0, lsl r9
    d814:	3118d008 	tstcc	r8, r8
    d818:	00316f41 	eorseq	r6, r1, r1, asr #30
    d81c:	b1109131 	tstlt	r0, r1, lsr r1
    d820:	16141483 	ldrne	r1, [r4], -r3, lsl #9
    d824:	7000685b 	andvc	r6, r0, fp, asr r8
    d828:	c0501025 	subsgt	r1, r0, r5, lsr #32
    d82c:	c3f49100 	mvnsgt	r9, #0, 2
    d830:	1420c0c0 	strtne	ip, [r0], #-192	; 0xffffff40
    d834:	10316f03 	eorsne	r6, r1, r3, lsl #30
    d838:	c0220441 	eorgt	r0, r2, r1, asr #8
    d83c:	00213182 	eoreq	r3, r1, r2, lsl #3
    d840:	b1109131 	tstlt	r0, r1, lsr r1
    d844:	10313963 	eorsne	r3, r1, r3, ror #18
    d848:	c0820441 	addgt	r0, r2, r1, asr #8
    d84c:	00213182 	eoreq	r3, r1, r2, lsl #3
    d850:	b1109131 	tstlt	r0, r1, lsr r1
    d854:	10313963 	eorsne	r3, r1, r3, ror #18
    d858:	3182c0a2 	orrcc	ip, r2, r2, lsr #1
    d85c:	91310021 	teqls	r1, r1, lsr #32
    d860:	1050b110 	subsne	fp, r0, r0, lsl r1
    d864:	14053115 	strne	r3, [r5], #-277	; 0xfffffeeb
    d868:	70009205 	andvc	r9, r0, r5, lsl #4
    d86c:	c052643f 	subsgt	r6, r2, pc, lsr r4
    d870:	06311031 			; <UNDEFINED> instruction: 0x06311031
    d874:	02c13161 	sbceq	r3, r1, #1073741848	; 0x40000018
    d878:	c1126442 	tstgt	r2, r2, asr #8
    d87c:	39211031 	stmdbcc	r1!, {r0, r4, r5, ip}
    d880:	31510671 	cmpcc	r1, r1, ror r6
    d884:	644202e1 	strbvs	r0, [r2], #-737	; 0xfffffd1f
    d888:	658a7000 	strvs	r7, [sl]
    d88c:	c0886599 	umullgt	r6, r8, r9, r5
    d890:	39508220 	ldmdbcc	r0, {r5, r9, pc}^
    d894:	1e003980 	vmlane.f16	s6, s1, s0	; <UNPREDICTABLE>
    d898:	c041409f 	umaalgt	r4, r1, pc, r0	; <UNPREDICTABLE>
    d89c:	14183001 	ldrne	r3, [r8], #-1
    d8a0:	c0891a18 	addgt	r1, r9, r8, lsl sl
    d8a4:	39608230 	stmdbcc	r0!, {r4, r5, r9, pc}^
    d8a8:	1e003980 	vmlane.f16	s6, s1, s0	; <UNPREDICTABLE>
    d8ac:	c04140a9 	subgt	r4, r1, r9, lsr #1
    d8b0:	14193001 	ldrne	r3, [r9], #-1
    d8b4:	643c1a19 	ldrtvs	r1, [ip], #-2585	; 0xfffff5e7
    d8b8:	b1109136 	tstlt	r0, r6, lsr r1
    d8bc:	b1109134 	tstlt	r0, r4, lsr r1
    d8c0:	7100b054 	qaddvc	fp, r4, r0
    d8c4:	b064a054 	rsblt	sl, r4, r4, asr r0
    d8c8:	220080f0 	andcs	r8, r0, #240	; 0xf0
    d8cc:	124040af 	subne	r4, r0, #175	; 0xaf
    d8d0:	b03290b0 	ldrhtlt	r9, [r2], -r0
    d8d4:	39538253 	ldmdbcc	r3, {r0, r1, r4, r6, r9, pc}^
    d8d8:	64853953 	strvs	r3, [r5], #2387	; 0x953
    d8dc:	c111643f 	tstgt	r1, pc, lsr r4
    d8e0:	6442c122 	strbvs	ip, [r2], #-290	; 0xfffffede
    d8e4:	68c2c170 	stmiavs	r2, {r4, r5, r6, r8, lr, pc}^
    d8e8:	c0c2c111 	sbcgt	ip, r2, r1, lsl r1
    d8ec:	c1706442 	cmngt	r0, r2, asr #8
    d8f0:	c05068c7 	subsgt	r6, r0, r7, asr #17
    d8f4:	72279100 	eorvc	r9, r7, #0, 2
    d8f8:	16159298 			; <UNDEFINED> instruction: 0x16159298
    d8fc:	10421614 	subne	r1, r2, r4, lsl r6
    d900:	c1f01053 	mvnsgt	r1, r3, asr r0
    d904:	31318221 	teqcc	r1, r1, lsr #4
    d908:	39813931 	stmibcc	r1, {r0, r4, r5, r8, fp, ip, sp}
    d90c:	b0513131 	subslt	r3, r1, r1, lsr r1
    d910:	6572b270 	ldrbvs	fp, [r2, #-624]!	; 0xfffffd90
    d914:	92997227 	addsls	r7, r9, #1879048194	; 0x70000002
    d918:	1062b270 	rsbne	fp, r2, r0, ror r2
    d91c:	c3f01073 	mvnsgt	r1, #115	; 0x73
    d920:	31218231 			; <UNDEFINED> instruction: 0x31218231
    d924:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    d928:	6572101b 	ldrbvs	r1, [r2, #-27]!	; 0xffffffe5
    d92c:	3182c0e2 	orrcc	ip, r2, r2, ror #1
    d930:	31808260 	orrcc	r8, r0, r0, ror #4
    d934:	00023980 	andeq	r3, r2, r0, lsl #19
    d938:	7100b061 	tstvc	r0, r1, rrx
    d93c:	b1109132 	tstlt	r0, r2, lsr r1
    d940:	b061a051 	rsblt	sl, r1, r1, asr r0
    d944:	c2307227 	eorsgt	r7, r0, #1879048194	; 0x70000002
    d948:	000068f3 	strdeq	r6, [r0], -r3
    d94c:	90b01280 	adcsls	r1, r0, r0, lsl #5
    d950:	7000b032 	andvc	fp, r0, r2, lsr r0
    d954:	9100c050 	qaddls	ip, r0, r0
    d958:	92997227 	addsls	r7, r9, #1879048194	; 0x70000002
    d95c:	10731062 	rsbsne	r1, r3, r2, rrx
    d960:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    d964:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    d968:	b0513981 	subslt	r3, r1, r1, lsl #19
    d96c:	657eb270 	ldrbvs	fp, [lr, #-624]!	; 0xfffffd90
    d970:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    d974:	1042b270 	subne	fp, r2, r0, ror r2
    d978:	c1f01053 	mvnsgt	r1, r3, asr r0
    d97c:	31318221 	teqcc	r1, r1, lsr #4
    d980:	39813931 	stmibcc	r1, {r0, r4, r5, r8, fp, ip, sp}
    d984:	101a3131 	andsne	r3, sl, r1, lsr r1
    d988:	a051657e 	subsge	r6, r1, lr, ror r5
    d98c:	7227b061 	eorvc	fp, r7, #97	; 0x61
    d990:	6918c0b0 	ldmdbvs	r8, {r4, r5, r7, lr, pc}
    d994:	c101643f 	tstgt	r1, pc, lsr r4
    d998:	6442c122 	strbvs	ip, [r2], #-290	; 0xfffffede
    d99c:	c0c2c101 	sbcgt	ip, r2, r1, lsl #2
    d9a0:	1a156442 	bne	566ab0 <__ccfg+0x546b08>
    d9a4:	9135643c 	teqls	r5, ip, lsr r4
    d9a8:	8253b110 	subshi	fp, r3, #16, 2
    d9ac:	12c06485 	sbcne	r6, r0, #-2063597568	; 0x85000000
    d9b0:	b03290b0 	ldrhtlt	r9, [r2], -r0
    d9b4:	643f7000 	ldrtvs	r7, [pc], #-0	; d9bc <__exidx_end+0x7d7c>
    d9b8:	c081c272 	addgt	ip, r1, r2, ror r2
    d9bc:	c1226442 			; <UNDEFINED> instruction: 0xc1226442
    d9c0:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    d9c4:	c111c002 	tstgt	r1, r2
    d9c8:	c0626442 	rsbgt	r6, r2, r2, asr #8
    d9cc:	6442c331 	strbvs	ip, [r2], #-817	; 0xfffffccf
    d9d0:	c111c362 	tstgt	r1, r2, ror #6
    d9d4:	c3026442 	movwgt	r6, #9282	; 0x2442
    d9d8:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    d9dc:	39538253 	ldmdbcc	r3, {r0, r1, r4, r6, r9, pc}^
    d9e0:	c3e26485 	mvngt	r6, #-2063597568	; 0x85000000
    d9e4:	22116447 	andscs	r6, r1, #1191182336	; 0x47000000
    d9e8:	c2424140 	subgt	r4, r2, #64, 2
    d9ec:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    d9f0:	c111c252 	tstgt	r1, r2, asr r2
    d9f4:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    d9f8:	6442cee1 	strbvs	ip, [r2], #-3809	; 0xfffff11f
    d9fc:	c881c202 	stmgt	r1, {r1, r9, lr, pc}
    da00:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    da04:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    da08:	6954c0b0 	ldmdbvs	r4, {r4, r5, r7, lr, pc}^
    da0c:	643f7000 	ldrtvs	r7, [pc], #-0	; da14 <__exidx_end+0x7dd4>
    da10:	c801c242 	stmdagt	r1, {r1, r6, r9, lr, pc}
    da14:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    da18:	6442c011 	strbvs	ip, [r2], #-17	; 0xffffffef
    da1c:	c0e1c272 	rscgt	ip, r1, r2, ror r2
    da20:	c0026442 	andgt	r6, r2, r2, asr #8
    da24:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    da28:	c301c062 	movwgt	ip, #4194	; 0x1062
    da2c:	c1226442 			; <UNDEFINED> instruction: 0xc1226442
    da30:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    da34:	c101c362 	tstgt	r1, r2, ror #6
    da38:	c3026442 	movwgt	r6, #9282	; 0x2442
    da3c:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    da40:	64858253 	strvs	r8, [r5], #595	; 0x253
    da44:	b0617000 	rsblt	r7, r1, r0
    da48:	14127100 	ldrne	r7, [r2], #-256	; 0xffffff00
    da4c:	4d7a1c23 	ldclmi	12, cr1, [sl, #-140]!	; 0xffffff74
    da50:	b1109133 	tstlt	r0, r3, lsr r1
    da54:	91327000 	teqls	r2, r0
    da58:	6972b110 	ldmdbvs	r2!, {r4, r8, ip, sp, pc}^
    da5c:	b0617000 	rsblt	r7, r1, r0
    da60:	18137100 	ldmdane	r3, {r8, ip, sp, lr}
    da64:	49861c32 	stmibmi	r6, {r1, r4, r5, sl, fp, ip}
    da68:	b1109132 	tstlt	r0, r2, lsr r1
    da6c:	91337000 	teqls	r3, r0
    da70:	697eb110 	ldmdbvs	lr!, {r4, r8, ip, sp, pc}^
    da74:	c0c27000 	sbcgt	r7, r2, r0
    da78:	10156447 	andsne	r6, r5, r7, asr #8
    da7c:	1612c0c2 	ldrne	ip, [r2], -r2, asr #1
    da80:	31416447 	cmpcc	r1, r7, asr #8
    da84:	c0c01415 	sbcgt	r1, r0, r5, lsl r4
    da88:	14053180 	strne	r3, [r5], #-384	; 0xfffffe80
    da8c:	78a01054 	stmiavc	r0!, {r2, r4, r6, ip}
    da90:	70000404 	andvc	r0, r0, r4, lsl #8
    da94:	3186c0e6 	orrcc	ip, r6, r6, ror #1
    da98:	1416cc01 	ldrne	ip, [r6], #-3073	; 0xfffff3ff
    da9c:	82611067 	rsbhi	r1, r1, #103	; 0x67
    daa0:	0401c3f0 	streq	ip, [r1], #-1008	; 0xfffffc10
    daa4:	70001417 	andvc	r1, r0, r7, lsl r4
    daa8:	72057306 	andvc	r7, r5, #402653184	; 0x18000000
    daac:	720e720b 	andvc	r7, lr, #-1342177280	; 0xb0000000
    dab0:	7100b050 	qaddvc	fp, r0, r0
    dab4:	b0608081 	rsblt	r8, r0, r1, lsl #1
    dab8:	8092a050 	addshi	sl, r2, r0, asr r0
    dabc:	45c32241 	strbmi	r2, [r3, #577]	; 0x241
    dac0:	c1f18080 	mvnsgt	r8, r0, lsl #1
    dac4:	16300410 			; <UNDEFINED> instruction: 0x16300410
    dac8:	14011101 	strne	r1, [r1], #-257	; 0xfffffeff
    dacc:	61d66c01 	bicsvs	r6, r6, r1, lsl #24
    dad0:	61d861d7 	ldrsbvs	r6, [r8, #23]
    dad4:	61da61d9 	ldrsbvs	r6, [sl, #25]
    dad8:	61dc61db 	ldrsbvs	r6, [ip, #27]
    dadc:	61e061de 	ldrdvs	r6, [r0, #30]!
    dae0:	61e461e2 	mvnvs	r6, r2, ror #3
    dae4:	63396336 	teqvs	r9, #-671088640	; 0xd8000000
    dae8:	c0f28091 	smlalsgt	r8, r2, r1, r0
    daec:	31210421 			; <UNDEFINED> instruction: 0x31210421
    daf0:	2a428082 	bcs	10add00 <__ccfg+0x108dd58>
    daf4:	16321412 			; <UNDEFINED> instruction: 0x16321412
    daf8:	14211101 	strtne	r1, [r1], #-257	; 0xfffffeff
    dafc:	61ee6c01 	mvnvs	r6, r1, lsl #24
    db00:	61f4620b 	mvnsvs	r6, fp, lsl #4
    db04:	61ee6339 	mvnvs	r6, r9, lsr r3
    db08:	61f4620b 	mvnsvs	r6, fp, lsl #4
    db0c:	61e66339 	mvnvs	r6, r9, lsr r3
    db10:	61e661e6 	mvnvs	r6, r6, ror #3
    db14:	61e661e6 	mvnvs	r6, r6, ror #3
    db18:	649461e6 	ldrvs	r6, [r4], #486	; 0x1e6
    db1c:	64f961e6 	ldrbtvs	r6, [r9], #486	; 0x1e6
    db20:	652a61e6 	strvs	r6, [sl, #-486]!	; 0xfffffe1a
    db24:	655661e6 	ldrbvs	r6, [r6, #-486]	; 0xfffffe1a
    db28:	674661e6 	strbvs	r6, [r6, -r6, ror #3]
    db2c:	121061e6 	andsne	r6, r0, #-2147483591	; 0x80000039
    db30:	720e90b0 	andvc	r9, lr, #176	; 0xb0
    db34:	72057306 	andvc	r7, r5, #402653184	; 0x18000000
    db38:	90301210 	eorsls	r1, r0, r0, lsl r2
    db3c:	cff061a7 	svcgt	0x00f061a7
    db40:	c1d4673c 	bicsgt	r6, r4, ip, lsr r7
    db44:	c3c0c003 	bicgt	ip, r0, #3
    db48:	78406454 	stmdavc	r0, {r2, r4, r6, sl, sp, lr}^
    db4c:	78509150 	ldmdavc	r0, {r4, r6, r8, ip, pc}^
    db50:	78609210 	stmdavc	r0!, {r4, r9, ip, pc}^
    db54:	78709220 	ldmdavc	r0!, {r5, r9, ip, pc}^
    db58:	78809230 	stmvc	r0, {r4, r5, r9, ip, pc}
    db5c:	78909240 	ldmvc	r0, {r6, r9, ip, pc}
    db60:	78309260 	ldmdavc	r0!, {r5, r6, r9, ip, pc}
    db64:	82109190 	andshi	r9, r0, #144, 2	; 0x24
    db68:	06f03940 	ldrbteq	r3, [r0], r0, asr #18
    db6c:	31101001 	tstcc	r0, r1
    db70:	92001410 	andls	r1, r0, #16, 8	; 0x10000000
    db74:	61e66742 	mvnvs	r6, r2, asr #14
    db78:	a0e2a0bc 	strhtge	sl, [r2], #12
    db7c:	80f0a054 	rscshi	sl, r0, r4, asr r0
    db80:	46152250 			; <UNDEFINED> instruction: 0x46152250
    db84:	22008040 	andcs	r8, r0, #64	; 0x40
    db88:	620d472b 	andvs	r4, sp, #11272192	; 0xac0000
    db8c:	822da040 	eorhi	sl, sp, #64	; 0x40
    db90:	398d318d 	stmibcc	sp, {r0, r2, r3, r7, r8, ip, sp}
    db94:	c0f18210 	rscsgt	r8, r1, r0, lsl r2
    db98:	10090410 	andne	r0, r9, r0, lsl r4
    db9c:	394a821a 	stmdbcc	sl, {r1, r3, r4, r9, pc}^
    dba0:	8210041a 	andshi	r0, r0, #436207616	; 0x1a000000
    dba4:	04103980 	ldreq	r3, [r0], #-2432	; 0xfffff680
    dba8:	10ab100e 	adcne	r1, fp, lr
    dbac:	10c210bc 	strhne	r1, [r2], #12
    dbb0:	72296463 	eorvc	r6, r9, #1660944384	; 0x63000000
    dbb4:	673ccfe0 	ldrvs	ip, [ip, -r0, ror #31]!
    dbb8:	b003b013 	andlt	fp, r3, r3, lsl r0
    dbbc:	b05366c8 	subslt	r6, r3, r8, asr #13
    dbc0:	b054b050 	subslt	fp, r4, r0, asr r0
    dbc4:	b013b064 	andslt	fp, r3, r4, rrx
    dbc8:	821066a5 	andshi	r6, r0, #173015040	; 0xa500000
    dbcc:	463822e0 	ldrtmi	r2, [r8], -r0, ror #5
    dbd0:	710066ae 	smlatbvc	r0, lr, r6, r6
    dbd4:	22018041 	andcs	r8, r1, #65	; 0x41
    dbd8:	80f0472b 	rscshi	r4, r0, fp, lsr #14
    dbdc:	464b2210 			; <UNDEFINED> instruction: 0x464b2210
    dbe0:	471822f0 			; <UNDEFINED> instruction: 0x471822f0
    dbe4:	2231b064 	eorscs	fp, r1, #100	; 0x64
    dbe8:	b0634238 	rsblt	r4, r3, r8, lsr r2
    dbec:	821066ce 	andshi	r6, r0, #216006656	; 0xce00000
    dbf0:	463822e0 	ldrtmi	r2, [r8], -r0, ror #5
    dbf4:	62386670 	eorsvs	r6, r8, #112, 12	; 0x7000000
    dbf8:	816fb064 	cmnhi	pc, r4, rrx
    dbfc:	3d8f318f 	stfccs	f3, [pc, #572]	; de40 <__exidx_end+0x8200>
    dc00:	92ffdfd0 	rscsls	sp, pc, #208, 30	; 0x340
    dc04:	7100673c 	tstvc	r0, ip, lsr r7
    dc08:	22018041 	andcs	r8, r1, #65	; 0x41
    dc0c:	b064472b 	rsblt	r4, r4, fp, lsr #14
    dc10:	225080f0 	subscs	r8, r0, #240	; 0xf0
    dc14:	b0634265 	rsblt	r4, r3, r5, ror #4
    dc18:	22c18211 	sbccs	r8, r1, #268435457	; 0x10000001
    dc1c:	66ce4660 	strbvs	r4, [lr], r0, ror #12
    dc20:	82116705 	andshi	r6, r1, #1310720	; 0x140000
    dc24:	465222d1 			; <UNDEFINED> instruction: 0x465222d1
    dc28:	62526670 	subsvs	r6, r2, #112, 12	; 0x7000000
    dc2c:	81728161 	cmnhi	r2, r1, ror #2
    dc30:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    dc34:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    dc38:	92f1efc0 	rscsls	lr, r1, #192, 30	; 0x300
    dc3c:	673c9302 	ldrvs	r9, [ip, -r2, lsl #6]!
    dc40:	81b0620b 	lslshi	r6, fp, #4
    dc44:	81d391c0 	bicshi	r9, r3, r0, asr #3
    dc48:	a2908297 	addsge	r8, r0, #1879048201	; 0x70000009
    dc4c:	4e7f18d3 	mrcmi	8, 3, r1, cr15, cr3, {6}
    dc50:	16130bf3 			; <UNDEFINED> instruction: 0x16130bf3
    dc54:	4aa41ce3 	bmi	fe914fe8 <_estack+0xde90ffe8>
    dc58:	81e391c3 	mvnhi	r9, r3, asr #3
    dc5c:	6290143b 	addsvs	r1, r0, #989855744	; 0x3b000000
    dc60:	468b1cba 			; <UNDEFINED> instruction: 0x468b1cba
    dc64:	4a8b1e23 	bmi	fe2d54f8 <_estack+0xde2d04f8>
    dc68:	4e8b1ce3 	cdpmi	12, 8, cr1, cr11, cr3, {7}
    dc6c:	2207b290 	andcs	fp, r7, #144, 4
    dc70:	a290428b 	addsge	r4, r0, #-1342177272	; 0xb0000008
    dc74:	62961a1b 	addsvs	r1, r6, #110592	; 0x1b000
    dc78:	4aa41ce3 	bmi	fe91500c <_estack+0xde91000c>
    dc7c:	81e391c3 	mvnhi	r9, r3, asr #3
    dc80:	1cab183b 	stcne	8, cr1, [fp], #236	; 0xec
    dc84:	1c9b4ea0 	ldcne	14, cr4, [fp], {160}	; 0xa0
    dc88:	1cbc4aa2 	vldmiane	ip!, {s8-s169}
    dc8c:	10b242a4 	adcsne	r4, r2, r4, lsr #5
    dc90:	22d08210 	sbcscs	r8, r0, #16, 4
    dc94:	80f0429d 	smlalshi	r4, r0, sp, r2
    dc98:	46a42210 	ssatmi	r2, #5, r0, lsl #4
    dc9c:	66a56463 	strtvs	r6, [r5], r3, ror #8
    dca0:	10ab62a4 	adcne	r6, fp, r4, lsr #5
    dca4:	109b6294 	umullsne	r6, fp, r4, r2
    dca8:	70006294 	mulvc	r0, r4, r2
    dcac:	c0f18230 	rscsgt	r8, r1, r0, lsr r2
    dcb0:	b0630410 	rsblt	r0, r3, r0, lsl r4
    dcb4:	6aa87100 	bvs	fea2a0bc <_estack+0xdea250bc>
    dcb8:	b0e010bc 	strhtlt	r1, [r0], #12
    dcbc:	81b27000 			; <UNDEFINED> instruction: 0x81b27000
    dcc0:	81d291c2 	bicshi	r9, r2, r2, asr #3
    dcc4:	18128201 	ldmdane	r2, {r0, r9, pc}
    dcc8:	18128151 	ldmdane	r2, {r0, r4, r6, r8, pc}
    dccc:	31818241 	orrcc	r8, r1, r1, asr #4
    dcd0:	1c123d81 	ldcne	13, cr3, [r2], {129}	; 0x81
    dcd4:	b0e24abf 	strhtlt	r4, [r2], #175	; 0xaf
    dcd8:	dfb0b032 	svcle	0x00b0b032
    dcdc:	673c92f2 			; <UNDEFINED> instruction: 0x673c92f2
    dce0:	1421c7f1 	strtne	ip, [r1], #-2033	; 0xfffff80f
    dce4:	c8124ec3 	ldmdagt	r2, {r0, r1, r6, r7, r9, sl, fp, lr}
    dce8:	91729162 	cmnls	r2, r2, ror #2
    dcec:	b0e1b031 	rsclt	fp, r1, r1, lsr r0
    dcf0:	c0087000 	andgt	r7, r8, r0
    dcf4:	c800c006 	stmdagt	r0, {r1, r2, lr, pc}
    dcf8:	91709160 	cmnls	r0, r0, ror #2
    dcfc:	82017000 	andhi	r7, r1, #0
    dd00:	91c081b0 	strhls	r8, [r0, #16]
    dd04:	181081d0 	ldmdane	r0, {r4, r6, r7, r8, pc}
    dd08:	18108151 	ldmdane	r0, {r0, r4, r6, r8, pc}
    dd0c:	80e11406 	rschi	r1, r1, r6, lsl #8
    dd10:	31828242 	orrcc	r8, r2, r2, asr #4
    dd14:	1c203d82 	stcne	13, cr3, [r0], #-520	; 0xfffffdf8
    dd18:	b0e24ae4 	rsclt	r4, r2, r4, ror #21
    dd1c:	46e82221 	strbtmi	r2, [r8], r1, lsr #4
    dd20:	1005b032 	andne	fp, r5, r2, lsr r0
    dd24:	92f5dfa0 	rscsls	sp, r5, #160, 30	; 0x280
    dd28:	2221673c 	eorcs	r6, r1, #60, 14	; 0xf00000
    dd2c:	a0e242e8 	rscge	r4, r2, r8, ror #5
    dd30:	8231b032 	eorshi	fp, r1, #50	; 0x32
    dd34:	c0f03941 	rscsgt	r3, r0, r1, asr #18
    dd38:	1e010401 	cdpne	4, 0, cr0, cr1, cr1, {0}
    dd3c:	161842f6 			; <UNDEFINED> instruction: 0x161842f6
    dd40:	3010c010 	andscc	ip, r0, r0, lsl r0
    dd44:	47041c08 	strmi	r1, [r4, -r8, lsl #24]
    dd48:	3c101060 	ldccc	0, cr1, [r0], {96}	; 0x60
    dd4c:	c7f11006 	ldrbgt	r1, [r1, r6]!
    dd50:	4efa1461 	cdpmi	4, 15, cr1, cr10, cr1, {3}
    dd54:	9166c816 	cmnls	r6, r6, lsl r8
    dd58:	31818171 	orrcc	r8, r1, r1, ror r1
    dd5c:	1c163d81 	ldcne	13, cr3, [r6], {129}	; 0x81
    dd60:	91764b01 	cmnls	r6, r1, lsl #22
    dd64:	c006b031 	andgt	fp, r6, r1, lsr r0
    dd68:	7000c008 	andvc	ip, r0, r8
    dd6c:	31818161 	orrcc	r8, r1, r1, ror #2
    dd70:	82403d81 	subhi	r3, r0, #8256	; 0x2040
    dd74:	18013980 	stmdane	r1, {r7, r8, fp, ip, sp}
    dd78:	4b171cf1 	blmi	5d5144 <__ccfg+0x5b519c>
    dd7c:	80b01401 	adcshi	r1, r0, r1, lsl #8
    dd80:	471722c0 	ldrmi	r2, [r7, -r0, asr #5]
    dd84:	b033b0bc 	ldrhtlt	fp, [r3], -ip
    dd88:	92f1ef90 	rscsls	lr, r1, #144, 30	; 0x240
    dd8c:	673c930f 	ldrvs	r9, [ip, -pc, lsl #6]!
    dd90:	a0037000 	andge	r7, r3, r0
    dd94:	b064b063 	rsblt	fp, r4, r3, rrx
    dd98:	6556b0ef 	ldrbvs	fp, [r6, #-239]	; 0xffffff11
    dd9c:	80407100 	subhi	r7, r0, r0, lsl #2
    dda0:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    dda4:	652ab064 	strvs	fp, [sl, #-100]!	; 0xffffff9c
    dda8:	7100a0ef 	smlattvc	r0, pc, r0, sl
    ddac:	22008040 	andcs	r8, r0, #64	; 0x40
    ddb0:	b064472b 	rsblt	r4, r4, fp, lsr #14
    ddb4:	6238b003 	eorsvs	fp, r8, #3
    ddb8:	81628201 	cmnhi	r2, r1, lsl #4
    ddbc:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    ddc0:	92f1ef80 	rscsls	lr, r1, #128, 30	; 0x200
    ddc4:	673c9302 	ldrvs	r9, [ip, -r2, lsl #6]!
    ddc8:	6556a003 	ldrbvs	sl, [r6, #-3]
    ddcc:	80a261e6 	adchi	r6, r2, r6, ror #3
    ddd0:	61e66463 	mvnvs	r6, r3, ror #8
    ddd4:	7100b050 	qaddvc	fp, r0, r0
    ddd8:	92e061e6 	rscls	r6, r0, #-2147483591	; 0x80000039
    dddc:	220082d0 	andcs	r8, r0, #208, 4
    dde0:	b2c0473d 	sbclt	r4, r0, #15990784	; 0xf40000
    dde4:	80a07000 	adchi	r7, r0, r0
    dde8:	435922f0 	cmpmi	r9, #240, 4
    ddec:	c102b030 	tstgt	r2, r0, lsr r0
    ddf0:	c0013162 	andgt	r3, r1, r2, ror #2
    ddf4:	1e0080a0 	cdpne	0, 0, cr8, cr0, cr0, {5}
    ddf8:	22f04352 	rscscs	r4, r0, #1207959553	; 0x48000001
    ddfc:	f5a04353 			; <UNDEFINED> instruction: 0xf5a04353
    de00:	39603160 	stmdbcc	r0!, {r5, r6, r8, ip, sp}^
    de04:	10206353 	eorne	r6, r0, r3, asr r3
    de08:	6f131a10 	svcvs	0x00131a10
    de0c:	16116e23 	ldrne	r6, [r1], -r3, lsr #28
    de10:	6b541612 	blvs	1513660 <__ccfg+0x14f36b8>
    de14:	fb037000 	blx	e9e1e <__ccfg+0xc9e76>
    de18:	0b000028 	bleq	dec0 <__exidx_end+0x8280>
    de1c:	00581227 	subseq	r1, r8, r7, lsr #4
    de20:	10040000 	andne	r0, r4, r0
    de24:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    de28:	00001c10 	andeq	r1, r0, r0, lsl ip
    de2c:	001dc203 	andseq	ip, sp, r3, lsl #4
    de30:	122b0b00 	eorne	r0, fp, #0, 22
    de34:	00000045 	andeq	r0, r0, r5, asr #32
    de38:	001c2624 	andseq	r2, ip, r4, lsr #12
    de3c:	294d0300 	stmdbcs	sp, {r8, r9}^
    de40:	2c0b0000 	stccs	0, cr0, [fp], {-0}
    de44:	00006b12 	andeq	r6, r0, r2, lsl fp
    de48:	1c370400 	cfldrsne	mvf0, [r7], #-0
    de4c:	46030000 	strmi	r0, [r3], -r0
    de50:	0b000006 	bleq	de70 <__exidx_end+0x8230>
    de54:	006b122d 	rsbeq	r1, fp, sp, lsr #4
    de58:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    de5c:	e209320b 	and	r3, r9, #-1342177280	; 0xb0000000
    de60:	2000001c 	andcs	r0, r0, ip, lsl r0
    de64:	00000034 	andeq	r0, r0, r4, lsr r0
    de68:	2607340b 	strcs	r3, [r7], -fp, lsl #8
    de6c:	0100001c 	tsteq	r0, ip, lsl r0
    de70:	20000701 	andcs	r0, r0, r1, lsl #14
    de74:	0000064c 	andeq	r0, r0, ip, asr #12
    de78:	2603350b 	strcs	r3, [r3], -fp, lsl #10
    de7c:	0100001c 	tsteq	r0, ip, lsl r0
    de80:	20000601 	andcs	r0, r0, r1, lsl #12
    de84:	000002e7 	andeq	r0, r0, r7, ror #5
    de88:	2603360b 	strcs	r3, [r3], -fp, lsl #12
    de8c:	0100001c 	tsteq	r0, ip, lsl r0
    de90:	20000501 	andcs	r0, r0, r1, lsl #10
    de94:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    de98:	2603370b 	strcs	r3, [r3], -fp, lsl #14
    de9c:	0100001c 	tsteq	r0, ip, lsl r0
    dea0:	20000401 	andcs	r0, r0, r1, lsl #8
    dea4:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    dea8:	2603380b 	strcs	r3, [r3], -fp, lsl #16
    deac:	0100001c 	tsteq	r0, ip, lsl r0
    deb0:	0c000004 	stceq	0, cr0, [r0], {4}
    deb4:	0000065b 	andeq	r0, r0, fp, asr r6
    deb8:	26073a0b 	strcs	r3, [r7], -fp, lsl #20
    debc:	0100001c 	tsteq	r0, ip, lsl r0
    dec0:	0008fb0c 	andeq	pc, r8, ip, lsl #22
    dec4:	033c0b00 	teqeq	ip, #0, 22
    dec8:	00001c26 	andeq	r1, r0, r6, lsr #24
    decc:	0f3a0c02 	svceq	0x003a0c02
    ded0:	3d0b0000 	stccc	0, cr0, [fp, #-0]
    ded4:	001c2603 	andseq	r2, ip, r3, lsl #12
    ded8:	130c0300 	movwne	r0, #49920	; 0xc300
    dedc:	0b000009 	bleq	df08 <__exidx_end+0x82c8>
    dee0:	1c37083f 	ldcne	8, cr0, [r7], #-252	; 0xffffff04
    dee4:	00040000 	andeq	r0, r4, r0
    dee8:	00031d03 	andeq	r1, r3, r3, lsl #26
    deec:	03410b00 	movteq	r0, #6912	; 0x1b00
    def0:	00001c54 	andeq	r1, r0, r4, asr ip
    def4:	001ce224 	andseq	lr, ip, r4, lsr #4
    def8:	06be2500 	ldrteq	r2, [lr], r0, lsl #10
    defc:	430b0000 	movwmi	r0, #45056	; 0xb000
    df00:	001cee1a 	andseq	lr, ip, sl, lsl lr
    df04:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    df08:	000001a0 	andeq	r0, r0, r0, lsr #3
    df0c:	de0e450b 	cfsh32le	mvfx4, mvfx14, #11
    df10:	01000005 	tsteq	r0, r5
    df14:	03262501 			; <UNDEFINED> instruction: 0x03262501
    df18:	450b0000 	strmi	r0, [fp, #-0]
    df1c:	0005de1e 	andeq	sp, r5, lr, lsl lr
    df20:	0b010100 	bleq	4e328 <__ccfg+0x2e380>
    df24:	098f0c08 	stmibeq	pc, {r3, sl, fp}	; <UNPREDICTABLE>
    df28:	00001d4e 	andeq	r1, r0, lr, asr #26
    df2c:	000cd80c 	andeq	sp, ip, ip, lsl #16
    df30:	0b900c00 	bleq	fe410f38 <_estack+0xde40bf38>
    df34:	0000006b 	andeq	r0, r0, fp, rrx
    df38:	10750c00 	rsbsne	r0, r5, r0, lsl #24
    df3c:	910c0000 	mrsls	r0, (UNDEF: 12)
    df40:	001c1008 	andseq	r1, ip, r8
    df44:	c50c0400 	strgt	r0, [ip, #-1024]	; 0xfffffc00
    df48:	0c000001 	stceq	0, cr0, [r0], {1}
    df4c:	1c321092 	ldcne	0, cr1, [r2], #-584	; 0xfffffdb8
    df50:	00060000 	andeq	r0, r6, r0
    df54:	000ccc03 	andeq	ip, ip, r3, lsl #24
    df58:	03930c00 	orrseq	r0, r3, #0, 24
    df5c:	00001d1d 	andeq	r1, r0, sp, lsl sp
    df60:	001d4e09 	andseq	r4, sp, r9, lsl #28
    df64:	001d6500 	andseq	r6, sp, r0, lsl #10
    df68:	25002600 	strcs	r2, [r0, #-1536]	; 0xfffffa00
    df6c:	0000093d 	andeq	r0, r0, sp, lsr r9
    df70:	5a0f990c 	bpl	3f43a8 <__ccfg+0x3d4400>
    df74:	0100001d 	tsteq	r0, sp, lsl r0
    df78:	0d010b01 	vstreq	d0, [r1, #-4]
    df7c:	1d9d0991 	vldrne.16	s0, [sp, #290]	; 0x122	; <UNPREDICTABLE>
    df80:	1a200000 	bne	80df88 <__ccfg+0x7edfe0>
    df84:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    df88:	1c260793 	stcne	7, cr0, [r6], #-588	; 0xfffffdb4
    df8c:	07010000 	streq	r0, [r1, -r0]
    df90:	cc200001 	stcgt	0, cr0, [r0], #-4
    df94:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    df98:	1c260394 	stcne	3, cr0, [r6], #-592	; 0xfffffdb0
    df9c:	01010000 	mrseq	r0, (UNDEF: 1)
    dfa0:	03000000 	movweq	r0, #0
    dfa4:	00000aab 	andeq	r0, r0, fp, lsr #21
    dfa8:	7303960d 	movwvc	r9, #13837	; 0x360d
    dfac:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    dfb0:	00001d9d 	muleq	r0, sp, sp
    dfb4:	001da909 	andseq	sl, sp, r9, lsl #18
    dfb8:	001db900 	andseq	fp, sp, r0, lsl #18
    dfbc:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    dfc0:	00001dae 	andeq	r1, r0, lr, lsr #27
    dfc4:	0003aa25 	andeq	sl, r3, r5, lsr #20
    dfc8:	179c0d00 	ldrne	r0, [ip, r0, lsl #26]
    dfcc:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    dfd0:	1c090101 	stfnes	f0, [r9], {1}
    dfd4:	d700001c 	smladle	r0, ip, r0, r0
    dfd8:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
    dfdc:	1dcc0400 	cfstrdne	mvd0, [ip]
    dfe0:	0e250000 	cdpeq	0, 2, cr0, cr5, cr0, {0}
    dfe4:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    dfe8:	1dd71306 	ldclne	3, cr1, [r7, #24]
    dfec:	01010000 	mrseq	r0, (UNDEF: 1)
    dff0:	0008dd25 	andeq	sp, r8, r5, lsr #26
    dff4:	0ec30c00 	cdpeq	12, 12, cr0, cr3, cr0, {0}
    dff8:	00001c37 	andeq	r1, r0, r7, lsr ip
    dffc:	72060101 	andvc	r0, r6, #1073741824	; 0x40000000
    e000:	0f00000c 	svceq	0x0000000c
    e004:	0510016e 	ldreq	r0, [r0, #-366]	; 0xfffffe92
    e008:	1000001e 	andne	r0, r0, lr, lsl r0
    e00c:	001e0b04 	andseq	r0, lr, r4, lsl #22
    e010:	17011e00 	strne	r1, [r1, -r0, lsl #28]
    e014:	1500001e 	strne	r0, [r0, #-30]	; 0xffffffe2
    e018:	00001c10 	andeq	r1, r0, r0, lsl ip
    e01c:	05eb0900 	strbeq	r0, [fp, #2304]!	; 0x900
    e020:	1e220000 	cdpne	0, 2, cr0, cr2, cr0, {0}
    e024:	00260000 	eoreq	r0, r6, r0
    e028:	001e1704 	andseq	r1, lr, r4, lsl #14
    e02c:	09e61f00 	stmibeq	r6!, {r8, r9, sl, fp, ip}^
    e030:	7f0f0000 	svcvc	0x000f0000
    e034:	1e221601 	cfmadda32ne	mvax0, mvax1, mvfx2, mvfx1
    e038:	01010000 	mrseq	r0, (UNDEF: 1)
    e03c:	0003961f 	andeq	r9, r3, pc, lsl r6
    e040:	01820f00 	orreq	r0, r2, r0, lsl #30
    e044:	001c4314 	andseq	r4, ip, r4, lsl r3
    e048:	1f010100 	svcne	0x00010100
    e04c:	0000036e 	andeq	r0, r0, lr, ror #6
    e050:	0e02d80f 	cdpeq	8, 0, cr13, cr2, cr15, {0}
    e054:	00001c37 	andeq	r1, r0, r7, lsr ip
    e058:	081a0101 	ldmdaeq	sl, {r0, r8}
    e05c:	0903030f 	stmdbeq	r3, {r0, r1, r2, r3, r8, r9}
    e060:	00001e7b 	andeq	r1, r0, fp, ror lr
    e064:	003ca117 	eorseq	sl, ip, r7, lsl r1
    e068:	03070f00 	movweq	r0, #32512	; 0x7f00
    e06c:	001c1007 	andseq	r1, ip, r7
    e070:	cd170000 	ldcgt	0, cr0, [r7, #-0]
    e074:	0f00000f 	svceq	0x0000000f
    e078:	48080308 	stmdami	r8, {r3, r8, r9}
    e07c:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    e080:	0a090600 	beq	24f888 <__ccfg+0x22f8e0>
    e084:	090f0000 	stmdbeq	pc, {}	; <UNPREDICTABLE>
    e088:	1e540303 	cdpne	3, 5, cr0, cr4, cr3, {0}
    e08c:	29190000 	ldmdbcs	r9, {}	; <UNPREDICTABLE>
    e090:	30000000 	andcc	r0, r0, r0
    e094:	08030b0f 	stmdaeq	r3, {r0, r1, r2, r3, r8, r9, fp}
    e098:	00001eeb 	andeq	r1, r0, fp, ror #29
    e09c:	001f2417 	andseq	r2, pc, r7, lsl r4	; <UNPREDICTABLE>
    e0a0:	03140f00 	tsteq	r4, #0, 30
    e0a4:	001c1008 	andseq	r1, ip, r8
    e0a8:	e7170000 	ldr	r0, [r7, -r0]
    e0ac:	0f00000b 	svceq	0x0000000b
    e0b0:	10080315 	andne	r0, r8, r5, lsl r3
    e0b4:	0200001c 	andeq	r0, r0, #28
    e0b8:	004c8e17 	subeq	r8, ip, r7, lsl lr
    e0bc:	03160f00 	tsteq	r6, #0, 30
    e0c0:	001df80b 	andseq	pc, sp, fp, lsl #16
    e0c4:	54170400 	ldrpl	r0, [r7], #-1024	; 0xfffffc00
    e0c8:	0f000047 	svceq	0x00000047
    e0cc:	48090317 	stmdami	r9, {r0, r1, r2, r4, r8, r9}
    e0d0:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    e0d4:	00000f17 	andeq	r0, r0, r7, lsl pc
    e0d8:	03180f00 	tsteq	r8, #0, 30
    e0dc:	001eeb0f 	andseq	lr, lr, pc, lsl #22
    e0e0:	5d170c00 	ldcpl	12, cr0, [r7, #-0]
    e0e4:	0f000009 	svceq	0x00000009
    e0e8:	fb150319 	blx	54ed56 <__ccfg+0x52edae>
    e0ec:	2c00001e 	stccs	0, cr0, [r0], {30}
    e0f0:	1e7b0900 	vaddne.f16	s1, s22, s0	; <UNPREDICTABLE>
    e0f4:	1efb0000 	cdpne	0, 15, cr0, cr11, cr0, {0}
    e0f8:	910a0000 	mrsls	r0, (UNDEF: 10)
    e0fc:	03000000 	movweq	r0, #0
    e100:	88041000 	stmdahi	r4, {ip}
    e104:	0600001e 			; <UNDEFINED> instruction: 0x0600001e
    e108:	00000bdc 	ldrdeq	r0, [r0], -ip
    e10c:	1b031c0f 	blne	d5150 <__ccfg+0xb51a8>
    e110:	00001e88 	andeq	r1, r0, r8, lsl #29
    e114:	000bbc1f 	andeq	fp, fp, pc, lsl ip
    e118:	031e0f00 	tsteq	lr, #0, 30
    e11c:	001f1d14 	andseq	r1, pc, r4, lsl sp	; <UNPREDICTABLE>
    e120:	10010100 	andne	r0, r1, r0, lsl #2
    e124:	001f0104 	andseq	r0, pc, r4, lsl #2
    e128:	070f2500 	streq	r2, [pc, -r0, lsl #10]
    e12c:	1d100000 	ldcne	0, cr0, [r0, #-0]
    e130:	001c1013 	andseq	r1, ip, r3, lsl r0
    e134:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e138:	000002ee 	andeq	r0, r0, lr, ror #5
    e13c:	211a1e10 	tstcs	sl, r0, lsl lr
    e140:	0100001c 	tsteq	r0, ip, lsl r0
    e144:	0c692501 	cfstr64eq	mvdx2, [r9], #-4
    e148:	1e100000 	cdpne	0, 1, cr0, cr0, cr0, {0}
    e14c:	001c2124 	andseq	r2, ip, r4, lsr #2
    e150:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e154:	00000c87 	andeq	r0, r0, r7, lsl #25
    e158:	1d142210 	lfmne	f2, 4, [r4, #-64]	; 0xffffffc0
    e15c:	0100001f 	tsteq	r0, pc, lsl r0
    e160:	203b2501 	eorscs	r2, fp, r1, lsl #10
    e164:	39110000 	ldmdbcc	r1, {}	; <UNPREDICTABLE>
    e168:	000d5e27 	andeq	r5, sp, r7, lsr #28
    e16c:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e170:	00002329 	andeq	r2, r0, r9, lsr #6
    e174:	f1153a11 			; <UNDEFINED> instruction: 0xf1153a11
    e178:	01000009 	tsteq	r0, r9
    e17c:	27452501 	strbcs	r2, [r5, -r1, lsl #10]
    e180:	3b110000 	blcc	44e188 <__ccfg+0x42e1e0>
    e184:	000bd81a 	andeq	sp, fp, sl, lsl r8
    e188:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    e18c:	000025e9 	andeq	r2, r0, r9, ror #11
    e190:	741a3c11 	ldrvc	r3, [sl], #-3089	; 0xfffff3ef
    e194:	0100000c 	tsteq	r0, ip
    e198:	006b0901 	rsbeq	r0, fp, r1, lsl #18
    e19c:	1fa30000 	svcne	0x00a30000
    e1a0:	910a0000 	mrsls	r0, (UNDEF: 10)
    e1a4:	14000000 	strne	r0, [r0], #-0
    e1a8:	29a72700 	stmibcs	r7!, {r8, r9, sl, sp}
    e1ac:	3d120000 	ldccc	0, cr0, [r2, #-0]
    e1b0:	001f9311 	andseq	r9, pc, r1, lsl r3	; <UNPREDICTABLE>
    e1b4:	b8030500 	stmdalt	r3, {r8, sl}
    e1b8:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    e1bc:	00001f5b 	andeq	r1, r0, fp, asr pc
    e1c0:	05207212 	streq	r7, [r0, #-530]!	; 0xfffffdee
    e1c4:	00005403 	andeq	r5, r0, r3, lsl #8
    e1c8:	1f692820 	svcne	0x00692820
    e1cc:	96120000 	ldrls	r0, [r2], -r0
    e1d0:	3c03050e 	cfstr32cc	mvfx0, [r3], {14}
    e1d4:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    e1d8:	00001f77 	andeq	r1, r0, r7, ror pc
    e1dc:	0513ad12 	ldreq	sl, [r3, #-3346]	; 0xfffff2ee
    e1e0:	0000a003 	andeq	sl, r0, r3
    e1e4:	1f852820 	svcne	0x00852820
    e1e8:	c2120000 	andsgt	r0, r2, #0
    e1ec:	7c030513 	cfstr32vc	mvfx0, [r3], {19}
    e1f0:	00200000 	eoreq	r0, r0, r0
    e1f4:	0000018a 	andeq	r0, r0, sl, lsl #3
    e1f8:	30db0004 	sbcscc	r0, fp, r4
    e1fc:	01040000 	mrseq	r0, (UNDEF: 4)
    e200:	00002a3f 	andeq	r2, r0, pc, lsr sl
    e204:	002a2401 	eoreq	r2, sl, r1, lsl #8
    e208:	002b0600 	eoreq	r0, fp, r0, lsl #12
    e20c:	0010e000 	andseq	lr, r0, r0
    e210:	00000000 	andeq	r0, r0, r0
    e214:	0073ad00 	rsbseq	sl, r3, r0, lsl #26
    e218:	06010200 	streq	r0, [r1], -r0, lsl #4
    e21c:	00000c5d 	andeq	r0, r0, sp, asr ip
    e220:	002a1a03 	eoreq	r1, sl, r3, lsl #20
    e224:	371d0200 	ldrcc	r0, [sp, -r0, lsl #4]
    e228:	02000000 	andeq	r0, r0, #0
    e22c:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    e230:	02020000 	andeq	r0, r2, #0
    e234:	000a6b05 	andeq	r6, sl, r5, lsl #22
    e238:	07020200 	streq	r0, [r2, -r0, lsl #4]
    e23c:	00000d66 	andeq	r0, r0, r6, ror #26
    e240:	fd050402 	stc2	4, cr0, [r5, #-8]
    e244:	03000007 	movweq	r0, #7
    e248:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    e24c:	005e4102 	subseq	r4, lr, r2, lsl #2
    e250:	04020000 	streq	r0, [r2], #-0
    e254:	00042607 	andeq	r2, r4, r7, lsl #12
    e258:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    e25c:	000007f8 	strdeq	r0, [r0], -r8
    e260:	21070802 	tstcs	r7, r2, lsl #16
    e264:	04000004 	streq	r0, [r0], #-4
    e268:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    e26c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    e270:	00042b07 	andeq	r2, r4, r7, lsl #22
    e274:	2a1c0300 	bcs	70ee7c <__ccfg+0x6eeed4>
    e278:	14030000 	strne	r0, [r3], #-0
    e27c:	0000002c 	andeq	r0, r0, ip, lsr #32
    e280:	0029b403 	eoreq	fp, r9, r3, lsl #8
    e284:	53200300 	noppl	{0}	; <UNPREDICTABLE>
    e288:	03000000 	movweq	r0, #0
    e28c:	000029de 	ldrdeq	r2, [r0], -lr
    e290:	00a23304 	adceq	r3, r2, r4, lsl #6
    e294:	04050000 	streq	r0, [r5], #-0
    e298:	000000a8 	andeq	r0, r0, r8, lsr #1
    e29c:	2af40306 	bcs	ffd0eebc <_estack+0xdfd09ebc>
    e2a0:	34040000 	strcc	r0, [r4], #-0
    e2a4:	000000b4 	strheq	r0, [r0], -r4
    e2a8:	00ba0405 	adcseq	r0, sl, r5, lsl #8
    e2ac:	c5070000 	strgt	r0, [r7, #-0]
    e2b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e2b4:	00000081 	andeq	r0, r0, r1, lsl #1
    e2b8:	2a0d0900 	bcs	3506c0 <__ccfg+0x330718>
    e2bc:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    e2c0:	00003928 	andeq	r3, r0, r8, lsr #18
    e2c4:	00000028 	andeq	r0, r0, r8, lsr #32
    e2c8:	010b9c01 	tsteq	fp, r1, lsl #24
    e2cc:	ef0a0000 	svc	0x000a0000
    e2d0:	0100002a 	tsteq	r0, sl, lsr #32
    e2d4:	00009735 	andeq	r9, r0, r5, lsr r7
    e2d8:	0036c600 	eorseq	ip, r6, r0, lsl #12
    e2dc:	29bd0b00 	ldmibcs	sp!, {r8, r9, fp}
    e2e0:	37010000 	strcc	r0, [r1, -r0]
    e2e4:	0000010b 	andeq	r0, r0, fp, lsl #2
    e2e8:	0000370b 	andeq	r3, r0, fp, lsl #14
    e2ec:	0039300c 	eorseq	r3, r9, ip
    e2f0:	00017700 	andeq	r7, r1, r0, lsl #14
    e2f4:	394a0d00 	stmdbcc	sl, {r8, sl, fp}^
    e2f8:	01820000 	orreq	r0, r2, r0
    e2fc:	02000000 	andeq	r0, r0, #0
    e300:	0ca70201 	sfmeq	f0, 4, [r7], #4
    e304:	c90e0000 	stmdbgt	lr, {}	; <UNPREDICTABLE>
    e308:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    e30c:	0000009a 	muleq	r0, sl, r0
    e310:	00002c00 	andeq	r2, r0, r0, lsl #24
    e314:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    e318:	0a000001 	beq	e324 <__exidx_end+0x86e4>
    e31c:	00002aef 	andeq	r2, r0, pc, ror #21
    e320:	00a94001 	adceq	r4, r9, r1
    e324:	37400000 	strbcc	r0, [r0, -r0]
    e328:	660a0000 	strvs	r0, [sl], -r0
    e32c:	0100002b 	tsteq	r0, fp, lsr #32
    e330:	00008140 	andeq	r8, r0, r0, asr #2
    e334:	00378500 	eorseq	r8, r7, r0, lsl #10
    e338:	29bd0b00 	ldmibcs	sp!, {r8, r9, fp}
    e33c:	42010000 	andmi	r0, r1, #0
    e340:	0000010b 	andeq	r0, r0, fp, lsl #2
    e344:	000037a6 	andeq	r3, r0, r6, lsr #15
    e348:	0000000c 	andeq	r0, r0, ip
    e34c:	00017700 	andeq	r7, r1, r0, lsl #14
    e350:	00000f00 	andeq	r0, r0, r0, lsl #30
    e354:	016d0000 	cmneq	sp, r0
    e358:	01100000 	tsteq	r0, r0
    e35c:	00770250 	rsbseq	r0, r7, r0, asr r2
    e360:	00000d00 	andeq	r0, r0, r0, lsl #26
    e364:	01820000 	orreq	r0, r2, r0
    e368:	11000000 	mrsne	r0, (UNDEF: 0)
    e36c:	000029ef 	andeq	r2, r0, pc, ror #19
    e370:	008c6a06 	addeq	r6, ip, r6, lsl #20
    e374:	fe110000 	cdp2	0, 1, cr0, cr1, cr0, {0}
    e378:	06000029 	streq	r0, [r0], -r9, lsr #32
    e37c:	00008c84 	andeq	r8, r0, r4, lsl #25
    e380:	00d50000 	sbcseq	r0, r5, r0
    e384:	00040000 	andeq	r0, r4, r0
    e388:	000031c7 	andeq	r3, r0, r7, asr #3
    e38c:	2a3f0104 	bcs	fce7a4 <__ccfg+0xfae7fc>
    e390:	b2010000 	andlt	r0, r1, #0
    e394:	0600002b 	streq	r0, [r0], -fp, lsr #32
    e398:	f800002b 			; <UNDEFINED> instruction: 0xf800002b
    e39c:	00000010 	andeq	r0, r0, r0, lsl r0
    e3a0:	4d000000 	stcmi	0, cr0, [r0, #-0]
    e3a4:	02000075 	andeq	r0, r0, #117	; 0x75
    e3a8:	00002ba9 	andeq	r2, r0, r9, lsr #23
    e3ac:	00301b02 	eorseq	r1, r0, r2, lsl #22
    e3b0:	01030000 	mrseq	r0, (UNDEF: 3)
    e3b4:	000c5d06 	andeq	r5, ip, r6, lsl #26
    e3b8:	08010300 	stmdaeq	r1, {r8, r9}
    e3bc:	00000c5b 	andeq	r0, r0, fp, asr ip
    e3c0:	6b050203 	blvs	14ebd4 <__ccfg+0x12ec2c>
    e3c4:	0300000a 	movweq	r0, #10
    e3c8:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    e3cc:	9f020000 	svcls	0x00020000
    e3d0:	0200002b 	andeq	r0, r0, #43	; 0x2b
    e3d4:	0000573f 	andeq	r5, r0, pc, lsr r7
    e3d8:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    e3dc:	000007fd 	strdeq	r0, [r0], -sp
    e3e0:	26070403 	strcs	r0, [r7], -r3, lsl #8
    e3e4:	03000004 	movweq	r0, #4
    e3e8:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    e3ec:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    e3f0:	00042107 	andeq	r2, r4, r7, lsl #2
    e3f4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e3f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e3fc:	2b070403 	blcs	1cf410 <__ccfg+0x1af468>
    e400:	02000004 	andeq	r0, r0, #4
    e404:	00002bab 	andeq	r2, r0, fp, lsr #23
    e408:	00251303 	eoreq	r1, r5, r3, lsl #6
    e40c:	a1020000 	mrsge	r0, (UNDEF: 2)
    e410:	0300002b 	movweq	r0, #43	; 0x2b
    e414:	00004c1f 	andeq	r4, r0, pc, lsl ip
    e418:	2b700500 	blcs	1c0f820 <__ccfg+0x1bef878>
    e41c:	aa040000 	bge	10e424 <__ccfg+0xee47c>
    e420:	0000008c 	andeq	r0, r0, ip, lsl #1
    e424:	00003950 	andeq	r3, r0, r0, asr r9
    e428:	00000030 	andeq	r0, r0, r0, lsr r0
    e42c:	e3069c01 	movw	r9, #27649	; 0x6c01
    e430:	0100002b 	tsteq	r0, fp, lsr #32
    e434:	00008c3e 	andeq	r8, r0, lr, lsr ip
    e438:	0037db00 	eorseq	sp, r7, r0, lsl #22
    e43c:	2bd40600 	blcs	ff50fc44 <_estack+0xdf50ac44>
    e440:	3f010000 	svccc	0x00010000
    e444:	0000008c 	andeq	r0, r0, ip, lsl #1
    e448:	000037f4 	strdeq	r3, [r0], -r4
    e44c:	002b9207 	eoreq	r9, fp, r7, lsl #4
    e450:	81400100 	mrshi	r0, (UNDEF: 80)
    e454:	01000000 	mrseq	r0, (UNDEF: 0)
    e458:	43000051 	movwmi	r0, #81	; 0x51
    e45c:	04000001 	streq	r0, [r0], #-1
    e460:	00323600 	eorseq	r3, r2, r0, lsl #12
    e464:	3f010400 	svccc	0x00010400
    e468:	0100002a 	tsteq	r0, sl, lsr #32
    e46c:	00002c94 	muleq	r0, r4, ip
    e470:	00002b06 	andeq	r2, r0, r6, lsl #22
    e474:	00001108 	andeq	r1, r0, r8, lsl #2
    e478:	00000000 	andeq	r0, r0, r0
    e47c:	000076b8 			; <UNDEFINED> instruction: 0x000076b8
    e480:	5d060102 	stfpls	f0, [r6, #-8]
    e484:	0200000c 	andeq	r0, r0, #12
    e488:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    e48c:	02020000 	andeq	r0, r2, #0
    e490:	000a6b05 	andeq	r6, sl, r5, lsl #22
    e494:	07020200 	streq	r0, [r2, -r0, lsl #4]
    e498:	00000d66 	andeq	r0, r0, r6, ror #26
    e49c:	fd050402 	stc2	4, cr0, [r5, #-8]
    e4a0:	03000007 	movweq	r0, #7
    e4a4:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    e4a8:	00534102 	subseq	r4, r3, r2, lsl #2
    e4ac:	04020000 	streq	r0, [r2], #-0
    e4b0:	00042607 	andeq	r2, r4, r7, lsl #12
    e4b4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    e4b8:	000007f8 	strdeq	r0, [r0], -r8
    e4bc:	002c3e03 	eoreq	r3, ip, r3, lsl #28
    e4c0:	6c5b0200 	lfmvs	f0, 2, [fp], {-0}
    e4c4:	02000000 	andeq	r0, r0, #0
    e4c8:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    e4cc:	04040000 	streq	r0, [r4], #-0
    e4d0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e4d4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e4d8:	0000042b 	andeq	r0, r0, fp, lsr #8
    e4dc:	0029b403 	eoreq	fp, r9, r3, lsl #8
    e4e0:	48200300 	stmdami	r0!, {r8, r9}
    e4e4:	03000000 	movweq	r0, #0
    e4e8:	00002c40 	andeq	r2, r0, r0, asr #24
    e4ec:	00612603 	rsbeq	r2, r1, r3, lsl #12
    e4f0:	09050000 	stmdbeq	r5, {}	; <UNPREDICTABLE>
    e4f4:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    e4f8:	00810345 	addeq	r0, r1, r5, asr #6
    e4fc:	39800000 	stmibcc	r0, {}	; <UNPREDICTABLE>
    e500:	00200000 	eoreq	r0, r0, r0
    e504:	9c010000 	stcls	0, cr0, [r1], {-0}
    e508:	000000dd 	ldrdeq	r0, [r0], -sp
    e50c:	002bfa06 	eoreq	pc, fp, r6, lsl #20
    e510:	81400100 	mrshi	r0, (UNDEF: 80)
    e514:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    e518:	06000038 			; <UNDEFINED> instruction: 0x06000038
    e51c:	00002c49 	andeq	r2, r0, r9, asr #24
    e520:	00814101 	addeq	r4, r1, r1, lsl #2
    e524:	383c0000 	ldmdacc	ip!, {}	; <UNPREDICTABLE>
    e528:	2c070000 	stccs	0, cr0, [r7], {-0}
    e52c:	0100002c 	tsteq	r0, ip, lsr #32
    e530:	00008142 	andeq	r8, r0, r2, asr #2
    e534:	00520100 	subseq	r0, r2, r0, lsl #2
    e538:	002c5b05 	eoreq	r5, ip, r5, lsl #22
    e53c:	03530400 	cmpeq	r3, #0, 8
    e540:	0000008c 	andeq	r0, r0, ip, lsl #1
    e544:	000039a0 	andeq	r3, r0, r0, lsr #19
    e548:	00000018 	andeq	r0, r0, r8, lsl r0
    e54c:	012f9c01 			; <UNDEFINED> instruction: 0x012f9c01
    e550:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    e554:	01165901 	tsteq	r6, r1, lsl #18
    e558:	ee090000 	cdp	0, 0, cr0, cr9, cr0, {0}
    e55c:	0100002b 	tsteq	r0, fp, lsr #32
    e560:	00008c5a 	andeq	r8, r0, sl, asr ip
    e564:	2c870900 			; <UNDEFINED> instruction: 0x2c870900
    e568:	5b010000 	blpl	4e570 <__ccfg+0x2e5c8>
    e56c:	0000012f 	andeq	r0, r0, pc, lsr #2
    e570:	2c7c0a00 			; <UNDEFINED> instruction: 0x2c7c0a00
    e574:	5c010000 	stcpl	0, cr0, [r1], {-0}
    e578:	000000f7 	strdeq	r0, [r0], -r7
    e57c:	002c2c07 	eoreq	r2, ip, r7, lsl #24
    e580:	815d0100 	cmphi	sp, r0, lsl #2
    e584:	01000000 	mrseq	r0, (UNDEF: 0)
    e588:	810b0051 	qaddhi	r0, r1, fp
    e58c:	3f000000 	svccc	0x00000000
    e590:	0c000001 	stceq	0, cr0, [r0], {1}
    e594:	0000013f 	andeq	r0, r0, pc, lsr r1
    e598:	04020001 	streq	r0, [r2], #-1
    e59c:	002cb307 	eoreq	fp, ip, r7, lsl #6
    e5a0:	01360000 	teqeq	r6, r0
    e5a4:	00040000 	andeq	r0, r4, r0
    e5a8:	000032e0 	andeq	r3, r0, r0, ror #5
    e5ac:	2a3f0104 	bcs	fce9c4 <__ccfg+0xfaea1c>
    e5b0:	f1010000 	setend	le
    e5b4:	0600002c 	streq	r0, [r0], -ip, lsr #32
    e5b8:	2000002b 	andcs	r0, r0, fp, lsr #32
    e5bc:	00000011 	andeq	r0, r0, r1, lsl r0
    e5c0:	65000000 	strvs	r0, [r0, #-0]
    e5c4:	02000078 	andeq	r0, r0, #120	; 0x78
    e5c8:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    e5cc:	01020000 	mrseq	r0, (UNDEF: 2)
    e5d0:	000c5b08 	andeq	r5, ip, r8, lsl #22
    e5d4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e5d8:	00000a6b 	andeq	r0, r0, fp, ror #20
    e5dc:	66070202 	strvs	r0, [r7], -r2, lsl #4
    e5e0:	0200000d 	andeq	r0, r0, #13
    e5e4:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
    e5e8:	b2030000 	andlt	r0, r3, #0
    e5ec:	02000029 	andeq	r0, r0, #41	; 0x29
    e5f0:	00005341 	andeq	r5, r0, r1, asr #6
    e5f4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e5f8:	00000426 	andeq	r0, r0, r6, lsr #8
    e5fc:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
    e600:	02000007 	andeq	r0, r0, #7
    e604:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
    e608:	04040000 	streq	r0, [r4], #-0
    e60c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e610:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e614:	0000042b 	andeq	r0, r0, fp, lsr #8
    e618:	0029b403 	eoreq	fp, r9, r3, lsl #8
    e61c:	48200300 	stmdami	r0!, {r8, r9}
    e620:	05000000 	streq	r0, [r0, #-0]
    e624:	000029ef 	andeq	r2, r0, pc, ror #19
    e628:	00766a04 	rsbseq	r6, r6, r4, lsl #20
    e62c:	39b80000 	ldmibcc	r8!, {}	; <UNPREDICTABLE>
    e630:	00080000 	andeq	r0, r8, r0
    e634:	9c010000 	stcls	0, cr0, [r1], {-0}
    e638:	000000a6 	andeq	r0, r0, r6, lsr #1
    e63c:	002cdf06 	eoreq	sp, ip, r6, lsl #30
    e640:	76770100 	ldrbtvc	r0, [r7], -r0, lsl #2
    e644:	00000000 	andeq	r0, r0, r0
    e648:	002d0c05 	eoreq	r0, sp, r5, lsl #24
    e64c:	76780400 	ldrbtvc	r0, [r8], -r0, lsl #8
    e650:	00000000 	andeq	r0, r0, r0
    e654:	06000000 	streq	r0, [r0], -r0
    e658:	01000000 	mrseq	r0, (UNDEF: 0)
    e65c:	0000cb9c 	muleq	r0, ip, fp
    e660:	2cdf0600 	ldclcs	6, cr0, [pc], {0}
    e664:	c2010000 	andgt	r0, r1, #0
    e668:	00000076 	andeq	r0, r0, r6, ror r0
    e66c:	29fe0500 	ldmibcs	lr!, {r8, sl}^
    e670:	84040000 	strhi	r0, [r4], #-0
    e674:	00000076 	andeq	r0, r0, r6, ror r0
    e678:	000039c0 	andeq	r3, r0, r0, asr #19
    e67c:	00000008 	andeq	r0, r0, r8
    e680:	00f19c01 	rscseq	r9, r1, r1, lsl #24
    e684:	df070000 	svcle	0x00070000
    e688:	0100002c 	tsteq	r0, ip, lsr #32
    e68c:	0076010f 	rsbseq	r0, r6, pc, lsl #2
    e690:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e694:	00002cbc 			; <UNDEFINED> instruction: 0x00002cbc
    e698:	76015b04 	strvc	r5, [r1], -r4, lsl #22
    e69c:	00000000 	andeq	r0, r0, r0
    e6a0:	06000000 	streq	r0, [r0], -r0
    e6a4:	01000000 	mrseq	r0, (UNDEF: 0)
    e6a8:	0001189c 	muleq	r1, ip, r8
    e6ac:	2cdf0700 	ldclcs	7, cr0, [pc], {0}
    e6b0:	5a010000 	bpl	4e6b8 <__ccfg+0x2e710>
    e6b4:	00007601 	andeq	r7, r0, r1, lsl #12
    e6b8:	d0090000 	andle	r0, r9, r0
    e6bc:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    e6c0:	0000016c 	andeq	r0, r0, ip, ror #2
    e6c4:	00080000 	andeq	r0, r8, r0
    e6c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    e6cc:	002ce70a 	eoreq	lr, ip, sl, lsl #14
    e6d0:	019e0100 	orrseq	r0, lr, r0, lsl #2
    e6d4:	00000076 	andeq	r0, r0, r6, ror r0
    e6d8:	00005001 	andeq	r5, r0, r1
    e6dc:	000008bf 			; <UNDEFINED> instruction: 0x000008bf
    e6e0:	33900004 	orrscc	r0, r0, #4
    e6e4:	01040000 	mrseq	r0, (UNDEF: 4)
    e6e8:	00002a3f 	andeq	r2, r0, pc, lsr sl
    e6ec:	002e4401 	eoreq	r4, lr, r1, lsl #8
    e6f0:	002b0600 	eoreq	r0, fp, r0, lsl #12
    e6f4:	00116800 	andseq	r6, r1, r0, lsl #16
    e6f8:	00000000 	andeq	r0, r0, r0
    e6fc:	007a0500 	rsbseq	r0, sl, r0, lsl #10
    e700:	06010200 	streq	r0, [r1], -r0, lsl #4
    e704:	00000c5d 	andeq	r0, r0, sp, asr ip
    e708:	002a1a03 	eoreq	r1, sl, r3, lsl #20
    e70c:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
    e710:	02000000 	andeq	r0, r0, #0
    e714:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    e718:	eb030000 	bl	ce720 <__ccfg+0xae778>
    e71c:	03000031 	movweq	r0, #49	; 0x31
    e720:	00004929 	andeq	r4, r0, r9, lsr #18
    e724:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    e728:	00000a6b 	andeq	r0, r0, fp, ror #20
    e72c:	002e1003 	eoreq	r1, lr, r3
    e730:	5b2b0300 	blpl	acf338 <__ccfg+0xaaf390>
    e734:	02000000 	andeq	r0, r0, #0
    e738:	0d660702 	stcleq	7, cr0, [r6, #-8]!
    e73c:	9f030000 	svcls	0x00030000
    e740:	0300002b 	movweq	r0, #43	; 0x2b
    e744:	00006d3f 	andeq	r6, r0, pc, lsr sp
    e748:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    e74c:	000007fd 	strdeq	r0, [r0], -sp
    e750:	0029b203 	eoreq	fp, r9, r3, lsl #4
    e754:	7f410300 	svcvc	0x00410300
    e758:	02000000 	andeq	r0, r0, #0
    e75c:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
    e760:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e764:	0007f805 	andeq	pc, r7, r5, lsl #16
    e768:	07080200 	streq	r0, [r8, -r0, lsl #4]
    e76c:	00000421 	andeq	r0, r0, r1, lsr #8
    e770:	69050404 	stmdbvs	r5, {r2, sl}
    e774:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    e778:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
    e77c:	1c030000 	stcne	0, cr0, [r3], {-0}
    e780:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    e784:	00002c14 	andeq	r2, r0, r4, lsl ip
    e788:	31ed0300 	mvncc	r0, r0, lsl #6
    e78c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    e790:	0000003e 	andeq	r0, r0, lr, lsr r0
    e794:	002e1203 	eoreq	r1, lr, r3, lsl #4
    e798:	501a0400 	andspl	r0, sl, r0, lsl #8
    e79c:	03000000 	movweq	r0, #0
    e7a0:	00002ba1 	andeq	r2, r0, r1, lsr #23
    e7a4:	00621f04 	rsbeq	r1, r2, r4, lsl #30
    e7a8:	b4030000 	strlt	r0, [r3], #-0
    e7ac:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    e7b0:	00007420 	andeq	r7, r0, r0, lsr #8
    e7b4:	29de0300 	ldmibcs	lr, {r8, r9}^
    e7b8:	33050000 	movwcc	r0, #20480	; 0x5000
    e7bc:	000000e4 	andeq	r0, r0, r4, ror #1
    e7c0:	00ea0405 	rsceq	r0, sl, r5, lsl #8
    e7c4:	05060000 	streq	r0, [r6, #-0]
    e7c8:	0000f104 	andeq	pc, r0, r4, lsl #2
    e7cc:	00fc0700 	rscseq	r0, ip, r0, lsl #14
    e7d0:	a2080000 	andge	r0, r8, #0
    e7d4:	00000000 	andeq	r0, r0, r0
    e7d8:	00311403 	eorseq	r1, r1, r3, lsl #8
    e7dc:	07420600 	strbeq	r0, [r2, -r0, lsl #12]
    e7e0:	05000001 	streq	r0, [r0, #-1]
    e7e4:	00010d04 	andeq	r0, r1, r4, lsl #26
    e7e8:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    e7ec:	01260000 			; <UNDEFINED> instruction: 0x01260000
    e7f0:	26080000 	strcs	r0, [r8], -r0
    e7f4:	08000001 	stmdaeq	r0, {r0}
    e7f8:	000000ce 	andeq	r0, r0, lr, asr #1
    e7fc:	0000ce08 	andeq	ip, r0, r8, lsl #28
    e800:	04050000 	streq	r0, [r5], #-0
    e804:	000000a2 	andeq	r0, r0, r2, lsr #1
    e808:	00327c03 	eorseq	r7, r2, r3, lsl #24
    e80c:	37460600 	strbcc	r0, [r6, -r0, lsl #12]
    e810:	05000001 	streq	r0, [r0, #-1]
    e814:	00013d04 	andeq	r3, r1, r4, lsl #26
    e818:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
    e81c:	c5030000 	strgt	r0, [r3, #-0]
    e820:	06000032 			; <UNDEFINED> instruction: 0x06000032
    e824:	00013748 	andeq	r3, r1, r8, asr #14
    e828:	2fac0300 	svccs	0x00ac0300
    e82c:	4a060000 	bmi	18e834 <__ccfg+0x16e88c>
    e830:	00000158 	andeq	r0, r0, r8, asr r1
    e834:	015e0405 	cmpeq	lr, r5, lsl #8
    e838:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    e83c:	6d000000 	stcvs	0, cr0, [r0, #-0]
    e840:	08000001 	stmdaeq	r0, {r0}
    e844:	000000ce 	andeq	r0, r0, lr, asr #1
    e848:	2ebb0300 	cdpcs	3, 11, cr0, cr11, cr0, {0}
    e84c:	4c060000 	stcmi	0, cr0, [r6], {-0}
    e850:	00000137 	andeq	r0, r0, r7, lsr r1
    e854:	002e1b03 	eoreq	r1, lr, r3, lsl #22
    e858:	074e0600 	strbeq	r0, [lr, -r0, lsl #12]
    e85c:	03000001 	movweq	r0, #1
    e860:	00002eab 	andeq	r2, r0, fp, lsr #29
    e864:	00e45106 	rsceq	r5, r4, r6, lsl #2
    e868:	35030000 	strcc	r0, [r3, #-0]
    e86c:	0600002d 	streq	r0, [r0], -sp, lsr #32
    e870:	00019953 	andeq	r9, r1, r3, asr r9
    e874:	9f040500 	svcls	0x00040500
    e878:	09000001 	stmdbeq	r0, {r0}
    e87c:	000000ce 	andeq	r0, r0, lr, asr #1
    e880:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    e884:	0001b808 	andeq	fp, r1, r8, lsl #16
    e888:	00b80800 	adcseq	r0, r8, r0, lsl #16
    e88c:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    e890:	00000000 	andeq	r0, r0, r0
    e894:	00b80405 	adcseq	r0, r8, r5, lsl #8
    e898:	2a030000 	bcs	ce8a0 <__ccfg+0xae8f8>
    e89c:	06000031 			; <UNDEFINED> instruction: 0x06000031
    e8a0:	0001c957 	andeq	ip, r1, r7, asr r9
    e8a4:	cf040500 	svcgt	0x00040500
    e8a8:	09000001 	stmdbeq	r0, {r0}
    e8ac:	000000ce 	andeq	r0, r0, lr, asr #1
    e8b0:	000001e3 	andeq	r0, r0, r3, ror #3
    e8b4:	0001e308 	andeq	lr, r1, r8, lsl #6
    e8b8:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    e8bc:	05000000 	streq	r0, [r0, #-0]
    e8c0:	0000ce04 	andeq	ip, r0, r4, lsl #28
    e8c4:	2f1e0300 	svccs	0x001e0300
    e8c8:	5a060000 	bpl	18e8d0 <__ccfg+0x16e928>
    e8cc:	000001c9 	andeq	r0, r0, r9, asr #3
    e8d0:	002fd803 	eoreq	sp, pc, r3, lsl #16
    e8d4:	c95d0600 	ldmdbgt	sp, {r9, sl}^
    e8d8:	03000001 	movweq	r0, #1
    e8dc:	00002d47 	andeq	r2, r0, r7, asr #26
    e8e0:	01c96006 	biceq	r6, r9, r6
    e8e4:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    e8e8:	06000031 			; <UNDEFINED> instruction: 0x06000031
    e8ec:	0000e463 	andeq	lr, r0, r3, ror #8
    e8f0:	2d850300 	stccs	3, cr0, [r5]
    e8f4:	65060000 	strvs	r0, [r6, #-0]
    e8f8:	00000220 	andeq	r0, r0, r0, lsr #4
    e8fc:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
    e900:	31070000 	mrscc	r0, (UNDEF: 7)
    e904:	08000002 	stmdaeq	r0, {r1}
    e908:	000000ce 	andeq	r0, r0, lr, asr #1
    e90c:	32d60300 	sbcscc	r0, r6, #0, 6
    e910:	67060000 	strvs	r0, [r6, -r0]
    e914:	00000220 	andeq	r0, r0, r0, lsr #4
    e918:	00301a03 	eorseq	r1, r0, r3, lsl #20
    e91c:	eb690600 	bl	1a50124 <__ccfg+0x1a3017c>
    e920:	03000000 	movweq	r0, #0
    e924:	000032b5 			; <UNDEFINED> instruction: 0x000032b5
    e928:	00eb6b06 	rsceq	r6, fp, r6, lsl #22
    e92c:	e7030000 	str	r0, [r3, -r0]
    e930:	0600002f 	streq	r0, [r0], -pc, lsr #32
    e934:	0000eb6d 	andeq	lr, r0, sp, ror #22
    e938:	2ff90300 	svccs	0x00f90300
    e93c:	6f060000 	svcvs	0x00060000
    e940:	000000eb 	andeq	r0, r0, fp, ror #1
    e944:	7a064c0b 	bvc	1a1978 <__ccfg+0x1819d0>
    e948:	00000355 	andeq	r0, r0, r5, asr r3
    e94c:	002fbd0c 	eoreq	fp, pc, ip, lsl #26
    e950:	fc7c0600 	ldc2l	6, cr0, [ip], #-0
    e954:	00000000 	andeq	r0, r0, r0
    e958:	0032a80c 	eorseq	sl, r2, ip, lsl #16
    e95c:	2c7d0600 	ldclcs	6, cr0, [sp], #-0
    e960:	04000001 	streq	r0, [r0], #-1
    e964:	002fce0c 	eoreq	ip, pc, ip, lsl #28
    e968:	427e0600 	rsbsmi	r0, lr, #0, 12
    e96c:	08000001 	stmdaeq	r0, {r0}
    e970:	0031c70c 	eorseq	ip, r1, ip, lsl #14
    e974:	4d7f0600 	ldclmi	6, cr0, [pc, #-0]	; e97c <__exidx_end+0x8d3c>
    e978:	0c000001 	stceq	0, cr0, [r0], {1}
    e97c:	0031d90c 	eorseq	sp, r1, ip, lsl #18
    e980:	6d800600 	stcvs	6, cr0, [r0]
    e984:	10000001 	andne	r0, r0, r1
    e988:	002ecc0c 	eoreq	ip, lr, ip, lsl #24
    e98c:	78810600 	stmvc	r1, {r9, sl}
    e990:	14000001 	strne	r0, [r0], #-1
    e994:	002e880c 	eoreq	r8, lr, ip, lsl #16
    e998:	83820600 	orrhi	r0, r2, #0, 12
    e99c:	18000001 	stmdane	r0, {r0}
    e9a0:	002fc30c 	eoreq	ip, pc, ip, lsl #6
    e9a4:	8e830600 	cdphi	6, 8, cr0, cr3, cr0, {0}
    e9a8:	1c000001 	stcne	0, cr0, [r0], {1}
    e9ac:	0031520c 	eorseq	r5, r1, ip, lsl #4
    e9b0:	be840600 	cdplt	6, 8, cr0, cr4, cr0, {0}
    e9b4:	20000001 	andcs	r0, r0, r1
    e9b8:	002f4a0c 	eoreq	r4, pc, ip, lsl #20
    e9bc:	e9850600 	stmib	r5, {r9, sl}
    e9c0:	24000001 	strcs	r0, [r0], #-1
    e9c4:	002fa20c 	eoreq	sl, pc, ip, lsl #4
    e9c8:	f4860600 	vst3.16	{d0[0],d1[0],d2[0]}, [r6], r0
    e9cc:	28000001 	stmdacs	r0, {r0}
    e9d0:	0032070c 	eorseq	r0, r2, ip, lsl #14
    e9d4:	ff870600 			; <UNDEFINED> instruction: 0xff870600
    e9d8:	2c000001 	stccs	0, cr0, [r0], {1}
    e9dc:	002ee70c 	eoreq	lr, lr, ip, lsl #14
    e9e0:	15880600 	strne	r0, [r8, #1536]	; 0x600
    e9e4:	30000002 	andcc	r0, r0, r2
    e9e8:	0031f50c 	eorseq	pc, r1, ip, lsl #10
    e9ec:	31890600 	orrcc	r0, r9, r0, lsl #12
    e9f0:	34000002 	strcc	r0, [r0], #-2
    e9f4:	002dc60c 	eoreq	ip, sp, ip, lsl #12
    e9f8:	0a8a0600 	beq	fe290200 <_estack+0xde28b200>
    e9fc:	38000002 	stmdacc	r0, {r1}
    ea00:	0030090c 	eorseq	r0, r0, ip, lsl #18
    ea04:	3c8b0600 	stccc	6, cr0, [fp], {0}
    ea08:	3c000002 	stccc	0, cr0, [r0], {2}
    ea0c:	0031a80c 	eorseq	sl, r1, ip, lsl #16
    ea10:	478c0600 	strmi	r0, [ip, r0, lsl #12]
    ea14:	40000002 	andmi	r0, r0, r2
    ea18:	002f2c0c 	eoreq	r2, pc, ip, lsl #24
    ea1c:	528d0600 	addpl	r0, sp, #0, 12
    ea20:	44000002 	strmi	r0, [r0], #-2
    ea24:	002d760c 	eoreq	r7, sp, ip, lsl #12
    ea28:	5d8e0600 	stcpl	6, cr0, [lr]
    ea2c:	48000002 	stmdami	r0, {r1}
    ea30:	30d80300 	sbcscc	r0, r8, r0, lsl #6
    ea34:	8f060000 	svchi	0x00060000
    ea38:	00000268 	andeq	r0, r0, r8, ror #4
    ea3c:	5401140b 	strpl	r1, [r1], #-1035	; 0xfffffbf5
    ea40:	000003a5 	andeq	r0, r0, r5, lsr #7
    ea44:	002e2c0c 	eoreq	r2, lr, ip, lsl #24
    ea48:	ce550100 	rdfgts	f0, f5, f0
    ea4c:	00000000 	andeq	r0, r0, r0
    ea50:	00309e0c 	eorseq	r9, r0, ip, lsl #28
    ea54:	ce560100 	rdfgts	f0, f6, f0
    ea58:	04000000 	streq	r0, [r0], #-0
    ea5c:	002d960c 	eoreq	r9, sp, ip, lsl #12
    ea60:	ce570100 	rdfgts	f0, f7, f0
    ea64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    ea68:	002e5f0c 	eoreq	r5, lr, ip, lsl #30
    ea6c:	ce580100 	rdfgte	f0, f0, f0
    ea70:	0c000000 	stceq	0, cr0, [r0], {-0}
    ea74:	002dd90c 	eoreq	sp, sp, ip, lsl #18
    ea78:	c3590100 	cmpgt	r9, #0, 2
    ea7c:	10000000 	andne	r0, r0, r0
    ea80:	30c90300 	sbccc	r0, r9, r0, lsl #6
    ea84:	5a010000 	bpl	4ea8c <__ccfg+0x2eae4>
    ea88:	00000360 	andeq	r0, r0, r0, ror #6
    ea8c:	002d1d0d 	eoreq	r1, sp, sp, lsl #26
    ea90:	01f90200 	mvnseq	r0, r0, lsl #4
    ea94:	000003d3 	ldrdeq	r0, [r0], -r3
    ea98:	0030f70e 	eorseq	pc, r0, lr, lsl #14
    ea9c:	ce650100 	powgts	f0, f5, f0
    eaa0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    eaa4:	00002d6e 	andeq	r2, r0, lr, ror #26
    eaa8:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    eaac:	0f000000 	svceq	0x00000000
    eab0:	00002d56 	andeq	r2, r0, r6, asr sp
    eab4:	ce011002 	cdpgt	0, 0, cr1, cr1, cr2, {0}
    eab8:	01000000 	mrseq	r0, (UNDEF: 0)
    eabc:	000003fb 	strdeq	r0, [r0], -fp
    eac0:	0030f70e 	eorseq	pc, r0, lr, lsl #14
    eac4:	cea00100 	fdvgts	f0, f0, f0
    eac8:	10000000 	andne	r0, r0, r0
    eacc:	000031b7 			; <UNDEFINED> instruction: 0x000031b7
    ead0:	00cea201 	sbceq	sl, lr, r1, lsl #4
    ead4:	11000000 	mrsne	r0, (UNDEF: 0)
    ead8:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    eadc:	000039c8 	andeq	r3, r0, r8, asr #19
    eae0:	0000005c 	andeq	r0, r0, ip, asr r0
    eae4:	04b69c01 	ldrteq	r9, [r6], #3073	; 0xc01
    eae8:	bc120000 	ldclt	0, cr0, [r2], {-0}
    eaec:	4f000003 	svcmi	0x00000003
    eaf0:	12000038 	andne	r0, r0, #56	; 0x38
    eaf4:	000003c7 	andeq	r0, r0, r7, asr #7
    eaf8:	0000387b 	andeq	r3, r0, fp, ror r8
    eafc:	003a0213 	eorseq	r0, sl, r3, lsl r2
    eb00:	00001400 	andeq	r1, r0, r0, lsl #8
    eb04:	00046100 	andeq	r6, r4, r0, lsl #2
    eb08:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    eb0c:	38a70000 	stmiacc	r7!, {}	; <UNPREDICTABLE>
    eb10:	c7120000 	ldrgt	r0, [r2, -r0]
    eb14:	ba000003 	blt	eb28 <__exidx_end+0x8ee8>
    eb18:	14000038 	strne	r0, [r0], #-56	; 0xffffffc8
    eb1c:	00003a16 	andeq	r3, r0, r6, lsl sl
    eb20:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    eb24:	32015301 	andcc	r5, r1, #67108864	; 0x4000000
    eb28:	01520115 	cmpeq	r2, r5, lsl r1
    eb2c:	5101153c 	tstpl	r1, ip, lsr r5
    eb30:	01153001 	tsteq	r5, r1
    eb34:	000c0550 	andeq	r0, ip, r0, asr r5
    eb38:	00400ca0 	subeq	r0, r0, r0, lsr #25
    eb3c:	39e61600 	stmibcc	r6!, {r9, sl, ip}^
    eb40:	76020000 	strvc	r0, [r2], -r0
    eb44:	00048d00 	andeq	r8, r4, r0, lsl #26
    eb48:	53011500 	movwpl	r1, #5376	; 0x1500
    eb4c:	01153001 	tsteq	r5, r1
    eb50:	15310152 	ldrne	r0, [r1, #-338]!	; 0xfffffeae
    eb54:	30015101 	andcc	r5, r1, r1, lsl #2
    eb58:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    eb5c:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    eb60:	7d021540 	cfstr32vc	mvfx1, [r2, #-256]	; 0xffffff00
    eb64:	00740200 	rsbseq	r0, r4, r0, lsl #4
    eb68:	39fe1400 	ldmibcc	lr!, {sl, ip}^
    eb6c:	76020000 	strvc	r0, [r2], -r0
    eb70:	53011500 	movwpl	r1, #5376	; 0x1500
    eb74:	01153101 	tsteq	r5, r1, lsl #2
    eb78:	15320152 	ldrne	r0, [r2, #-338]!	; 0xfffffeae
    eb7c:	30015101 	andcc	r5, r1, r1, lsl #2
    eb80:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    eb84:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    eb88:	7d021540 	cfstr32vc	mvfx1, [r2, #-256]	; 0xffffff00
    eb8c:	00740200 	rsbseq	r0, r4, r0, lsl #4
    eb90:	d3110000 	tstle	r1, #0
    eb94:	24000003 	strcs	r0, [r0], #-3
    eb98:	2c00003a 	stccs	0, cr0, [r0], {58}	; 0x3a
    eb9c:	01000000 	mrseq	r0, (UNDEF: 0)
    eba0:	00050d9c 	muleq	r5, ip, sp
    eba4:	03e41200 	mvneq	r1, #0, 4
    eba8:	38db0000 	ldmcc	fp, {}^	; <UNPREDICTABLE>
    ebac:	ef170000 	svc	0x00170000
    ebb0:	01000003 	tsteq	r0, r3
    ebb4:	11501850 	cmpne	r0, r0, asr r8
    ebb8:	04f40000 	ldrbteq	r0, [r4], #0
    ebbc:	e4190000 	ldr	r0, [r9], #-0
    ebc0:	04000003 	streq	r0, [r0], #-3
    ebc4:	0011501a 	andseq	r5, r1, sl, lsl r0
    ebc8:	03ef1b00 	mvneq	r1, #0, 22
    ebcc:	00000000 	andeq	r0, r0, r0
    ebd0:	003a4414 	eorseq	r4, sl, r4, lsl r4
    ebd4:	00740200 	rsbseq	r0, r4, r0, lsl #4
    ebd8:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    ebdc:	01153408 	tsteq	r5, r8, lsl #8
    ebe0:	000c0550 	andeq	r0, ip, r0, asr r5
    ebe4:	00400ca0 	subeq	r0, r0, r0, lsr #25
    ebe8:	328d1c00 	addcc	r1, sp, #0, 24
    ebec:	84020000 	strhi	r0, [r2], #-0
    ebf0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ebf4:	00000000 	andeq	r0, r0, r0
    ebf8:	00009000 	andeq	r9, r0, r0
    ebfc:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
    ec00:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    ec04:	000030e3 	andeq	r3, r0, r3, ror #1
    ec08:	00cec201 	sbceq	ip, lr, r1, lsl #4
    ec0c:	38fc0000 	ldmcc	ip!, {}^	; <UNPREDICTABLE>
    ec10:	561e0000 	ldrpl	r0, [lr], -r0
    ec14:	01000030 	tsteq	r0, r0, lsr r0
    ec18:	0000cec4 	andeq	ip, r0, r4, asr #29
    ec1c:	00392800 	eorseq	r2, r9, r0, lsl #16
    ec20:	306f1e00 	rsbcc	r1, pc, r0, lsl #28
    ec24:	c5010000 	strgt	r0, [r1, #-0]
    ec28:	000000c3 	andeq	r0, r0, r3, asr #1
    ec2c:	0000393b 	andeq	r3, r0, fp, lsr r9
    ec30:	002de51e 	eoreq	lr, sp, lr, lsl r5
    ec34:	cec60100 	polgts	f0, f6, f0
    ec38:	62000000 	andvs	r0, r0, #0
    ec3c:	1f000039 	svcne	0x00000039
    ec40:	00000000 	andeq	r0, r0, r0
    ec44:	0000089e 	muleq	r0, lr, r8
    ec48:	0000001f 	andeq	r0, r0, pc, lsl r0
    ec4c:	0008aa00 	andeq	sl, r8, r0, lsl #20
    ec50:	94200000 	strtls	r0, [r0], #-0
    ec54:	0200002e 	andeq	r0, r0, #46	; 0x2e
    ec58:	3a500191 	bcc	140f2a4 <__ccfg+0x13ef2fc>
    ec5c:	00180000 	andseq	r0, r8, r0
    ec60:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec64:	000005ae 	andeq	r0, r0, lr, lsr #11
    ec68:	003a5a21 	eorseq	r5, sl, r1, lsr #20
    ec6c:	0003b000 	andeq	fp, r3, r0
    ec70:	0005a400 	andeq	sl, r5, r0, lsl #8
    ec74:	51011500 	tstpl	r1, r0, lsl #10
    ec78:	01153101 	tsteq	r5, r1, lsl #2
    ec7c:	00330150 	eorseq	r0, r3, r0, asr r1
    ec80:	003a5e1f 	eorseq	r5, sl, pc, lsl lr
    ec84:	00089e00 	andeq	r9, r8, r0, lsl #28
    ec88:	ad220000 	stcge	0, cr0, [r2, #-0]
    ec8c:	02000030 	andeq	r0, r0, #48	; 0x30
    ec90:	05bb0122 	ldreq	r0, [fp, #290]!	; 0x122
    ec94:	02030000 	andeq	r0, r3, #0
    ec98:	0ca70201 	sfmeq	f0, 4, [r7], #4
    ec9c:	02230000 	eoreq	r0, r3, #0
    eca0:	02000031 	andeq	r0, r0, #49	; 0x31
    eca4:	1c030140 	stfnes	f0, [r3], {64}	; 0x40
    eca8:	00002da4 	andeq	r2, r0, r4, lsr #27
    ecac:	bb01a102 	bllt	770bc <__ccfg+0x57114>
    ecb0:	68000005 	stmdavs	r0, {r0, r2}
    ecb4:	6000003a 	andvs	r0, r0, sl, lsr r0
    ecb8:	01000000 	mrseq	r0, (UNDEF: 0)
    ecbc:	0006779c 	muleq	r6, ip, r7
    ecc0:	308e2400 	addcc	r2, lr, r0, lsl #8
    ecc4:	02010000 	andeq	r0, r1, #0
    ecc8:	0000ce01 	andeq	ip, r0, r1, lsl #28
    eccc:	0039b600 	eorseq	fp, r9, r0, lsl #12
    ecd0:	315b2400 	cmpcc	fp, r0, lsl #8
    ecd4:	03010000 	movweq	r0, #4096	; 0x1000
    ecd8:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ecdc:	0039c900 	eorseq	ip, r9, r0, lsl #18
    ece0:	05ae2500 	streq	r2, [lr, #1280]!	; 0x500
    ece4:	3a740000 	bcc	1d0ecec <__ccfg+0x1ceed44>
    ece8:	00100000 	andseq	r0, r0, r0
    ecec:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    ecf0:	00063c01 	andeq	r3, r6, r1, lsl #24
    ecf4:	3a841400 	bcc	fe113cfc <_estack+0xde10ecfc>
    ecf8:	74020000 	strvc	r0, [r2], #-0
    ecfc:	53011500 	movwpl	r1, #5376	; 0x1500
    ed00:	01153001 	tsteq	r5, r1
    ed04:	15310152 	ldrne	r0, [r1, #-338]!	; 0xfffffeae
    ed08:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    ed0c:	50011534 	andpl	r1, r1, r4, lsr r5
    ed10:	a0000c05 	andge	r0, r0, r5, lsl #24
    ed14:	0000400c 	andeq	r4, r0, ip
    ed18:	0005c225 	andeq	ip, r5, r5, lsr #4
    ed1c:	003a8600 	eorseq	r8, sl, r0, lsl #12
    ed20:	00000800 	andeq	r0, r0, r0, lsl #16
    ed24:	010a0100 	mrseq	r0, (UNDEF: 26)
    ed28:	0000065a 	andeq	r0, r0, sl, asr r6
    ed2c:	003a8e1f 	eorseq	r8, sl, pc, lsl lr
    ed30:	0008b500 	andeq	fp, r8, r0, lsl #10
    ed34:	70210000 	eorvc	r0, r1, r0
    ed38:	d300003a 	movwle	r0, #58	; 0x3a
    ed3c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    ed40:	15000006 	strne	r0, [r0, #-6]
    ed44:	31015001 	tstcc	r1, r1
    ed48:	3a921f00 	bcc	fe496950 <_estack+0xde491950>
    ed4c:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    ed50:	20000000 	andcs	r0, r0, r0
    ed54:	00002ef9 	strdeq	r2, [r0], -r9
    ed58:	c801ae02 	stmdagt	r1, {r1, r9, sl, fp, sp, pc}
    ed5c:	3400003a 	strcc	r0, [r0], #-58	; 0xffffffc6
    ed60:	01000000 	mrseq	r0, (UNDEF: 0)
    ed64:	0006e99c 	muleq	r6, ip, r9
    ed68:	05c22500 	strbeq	r2, [r2, #1280]	; 0x500
    ed6c:	3ada0000 	bcc	ff68ed74 <_estack+0xdf689d74>
    ed70:	00080000 	andeq	r0, r8, r0
    ed74:	2f010000 	svccs	0x00010000
    ed78:	0006ab01 	andeq	sl, r6, r1, lsl #22
    ed7c:	3ae21f00 	bcc	ff896984 <_estack+0xdf891984>
    ed80:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    ed84:	21000000 	mrscs	r0, (UNDEF: 0)
    ed88:	00003ad2 	ldrdeq	r3, [r0], -r2
    ed8c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    ed90:	000006c3 	andeq	r0, r0, r3, asr #13
    ed94:	01510115 	cmpeq	r1, r5, lsl r1
    ed98:	50011530 	andpl	r1, r1, r0, lsr r5
    ed9c:	21003301 	tstcs	r0, r1, lsl #6
    eda0:	00003ad8 	ldrdeq	r3, [r0], -r8
    eda4:	000003d3 	ldrdeq	r0, [r0], -r3
    eda8:	000006d6 	ldrdeq	r0, [r0], -r6
    edac:	01500115 	cmpeq	r0, r5, lsl r1
    edb0:	e61f0031 			; <UNDEFINED> instruction: 0xe61f0031
    edb4:	9e00003a 	mcrls	0, 0, r0, cr0, cr10, {1}
    edb8:	1f000008 	svcne	0x00000008
    edbc:	00003aee 	andeq	r3, r0, lr, ror #21
    edc0:	000008aa 	andeq	r0, r0, sl, lsr #17
    edc4:	2f531c00 	svccs	0x00531c00
    edc8:	f2020000 	vhadd.s8	d0, d2, d0
    edcc:	0000c301 	andeq	ip, r0, r1, lsl #6
    edd0:	00000000 	andeq	r0, r0, r0
    edd4:	00003800 	andeq	r3, r0, r0, lsl #16
    edd8:	9a9c0100 	bls	fe70f1e0 <_estack+0xde70a1e0>
    eddc:	26000007 	strcs	r0, [r0], -r7
    ede0:	00003121 	andeq	r3, r0, r1, lsr #2
    ede4:	c3013c01 	movwgt	r3, #7169	; 0x1c01
    ede8:	dc000000 	stcle	0, cr0, [r0], {-0}
    edec:	27000039 	smladxcs	r0, r9, r0, r0
    edf0:	00003084 	andeq	r3, r0, r4, lsl #1
    edf4:	ce013f01 	cdpgt	15, 0, cr3, cr1, cr1, {0}
    edf8:	01000000 	mrseq	r0, (UNDEF: 0)
    edfc:	32e72751 	rsccc	r2, r7, #21233664	; 0x1440000
    ee00:	41010000 	mrsmi	r0, (UNDEF: 1)
    ee04:	0000c301 	andeq	ip, r0, r1, lsl #6
    ee08:	00710500 	rsbseq	r0, r1, r0, lsl #10
    ee0c:	279f2640 	ldrcs	r2, [pc, r0, asr #12]
    ee10:	00002df8 	strdeq	r2, [r0], -r8
    ee14:	c3014301 	movwgt	r4, #4865	; 0x1301
    ee18:	07000000 	streq	r0, [r0, -r0]
    ee1c:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    ee20:	279f2648 	ldrcs	r2, [pc, r8, asr #12]
    ee24:	00002e00 	andeq	r2, r0, r0, lsl #28
    ee28:	c3014501 	movwgt	r4, #5377	; 0x1501
    ee2c:	07000000 	streq	r0, [r0, -r0]
    ee30:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    ee34:	249f2648 	ldrcs	r2, [pc], #1608	; ee3c <__exidx_end+0x91fc>
    ee38:	00002e08 	andeq	r2, r0, r8, lsl #28
    ee3c:	c3014701 	movwgt	r4, #5889	; 0x1701
    ee40:	0a000000 	beq	ee48 <__exidx_end+0x9208>
    ee44:	2400003a 	strcs	r0, [r0], #-58	; 0xffffffc6
    ee48:	00002e71 	andeq	r2, r0, r1, ror lr
    ee4c:	c3015601 	movwgt	r5, #5633	; 0x1601
    ee50:	23000000 	movwcs	r0, #0
    ee54:	2400003a 	strcs	r0, [r0], #-58	; 0xffffffc6
    ee58:	00003029 	andeq	r3, r0, r9, lsr #32
    ee5c:	c3015701 	movwgt	r5, #5889	; 0x1701
    ee60:	46000000 	strmi	r0, [r0], -r0
    ee64:	2800003a 	stmdacs	r0, {r1, r3, r4, r5}
    ee68:	58010064 	stmdapl	r1, {r2, r5, r6}
    ee6c:	0000c301 	andeq	ip, r0, r1, lsl #6
    ee70:	003a6f00 	eorseq	r6, sl, r0, lsl #30
    ee74:	6c1c0000 	ldcvs	0, cr0, [ip], {-0}
    ee78:	02000031 	andeq	r0, r0, #49	; 0x31
    ee7c:	00ad020e 	adceq	r0, sp, lr, lsl #4
    ee80:	00000000 	andeq	r0, r0, r0
    ee84:	000c0000 	andeq	r0, ip, r0
    ee88:	9c010000 	stcls	0, cr0, [r1], {-0}
    ee8c:	000007d5 	ldrdeq	r0, [r0], -r5
    ee90:	00304226 	eorseq	r4, r0, r6, lsr #4
    ee94:	01630100 	cmneq	r3, r0, lsl #2
    ee98:	000000c3 	andeq	r0, r0, r3, asr #1
    ee9c:	00003ae9 	andeq	r3, r0, r9, ror #21
    eea0:	00321b24 	eorseq	r1, r2, r4, lsr #22
    eea4:	01850100 	orreq	r0, r5, r0, lsl #2
    eea8:	000000c3 	andeq	r0, r0, r3, asr #1
    eeac:	00003b0a 	andeq	r3, r0, sl, lsl #22
    eeb0:	2f7d1c00 	svccs	0x007d1c00
    eeb4:	c2020000 	andgt	r0, r2, #0
    eeb8:	0000ce01 	andeq	ip, r0, r1, lsl #28
    eebc:	00000000 	andeq	r0, r0, r0
    eec0:	00003400 	andeq	r3, r0, r0, lsl #8
    eec4:	429c0100 	addsmi	r0, ip, #0, 2
    eec8:	24000008 	strcs	r0, [r0], #-8
    eecc:	0000326e 	andeq	r3, r0, lr, ror #4
    eed0:	ce019201 	cdpgt	2, 0, cr9, cr1, cr1, {0}
    eed4:	4a000000 	bmi	eedc <__exidx_end+0x929c>
    eed8:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    eedc:	00002015 	andeq	r2, r0, r5, lsl r0
    eee0:	ce019301 	cdpgt	3, 0, cr9, cr1, cr1, {0}
    eee4:	6c000000 	stcvs	0, cr0, [r0], {-0}
    eee8:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    eeec:	00002f40 	andeq	r2, r0, r0, asr #30
    eef0:	ce019401 	cdpgt	4, 0, cr9, cr1, cr1, {0}
    eef4:	7f000000 	svcvc	0x00000000
    eef8:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    eefc:	00002ede 	ldrdeq	r2, [r0], -lr
    ef00:	ce019501 	cfsh32gt	mvfx9, mvfx1, #1
    ef04:	a2000000 	andge	r0, r0, #0
    ef08:	1f00003b 	svcne	0x0000003b
    ef0c:	00000000 	andeq	r0, r0, r0
    ef10:	0000089e 	muleq	r0, lr, r8
    ef14:	0000001f 	andeq	r0, r0, pc, lsl r0
    ef18:	00089e00 	andeq	r9, r8, r0, lsl #28
    ef1c:	3a1c0000 	bcc	70ef24 <__ccfg+0x6eef7c>
    ef20:	02000032 	andeq	r0, r0, #50	; 0x32
    ef24:	00ce01d3 	ldrdeq	r0, [lr], #19
    ef28:	00000000 	andeq	r0, r0, r0
    ef2c:	001c0000 	andseq	r0, ip, r0
    ef30:	9c010000 	stcls	0, cr0, [r1], {-0}
    ef34:	0000088d 	andeq	r0, r0, sp, lsl #17
    ef38:	0030be24 	eorseq	fp, r0, r4, lsr #28
    ef3c:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    ef40:	000000ce 	andeq	r0, r0, lr, asr #1
    ef44:	00003bbe 			; <UNDEFINED> instruction: 0x00003bbe
    ef48:	00322c24 	eorseq	r2, r2, r4, lsr #24
    ef4c:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    ef50:	000000ce 	andeq	r0, r0, lr, asr #1
    ef54:	00003bd1 	ldrdeq	r3, [r0], -r1
    ef58:	002e7b24 	eoreq	r7, lr, r4, lsr #22
    ef5c:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
    ef60:	000000ce 	andeq	r0, r0, lr, asr #1
    ef64:	00003bec 	andeq	r3, r0, ip, ror #23
    ef68:	30352900 	eorscc	r2, r5, r0, lsl #18
    ef6c:	5c010000 	stcpl	0, cr0, [r1], {-0}
    ef70:	000003a5 	andeq	r0, r0, r5, lsr #7
    ef74:	062c0305 	strteq	r0, [ip], -r5, lsl #6
    ef78:	092a2000 	stmdbeq	sl!, {sp}
    ef7c:	0700002c 	streq	r0, [r0, -ip, lsr #32]
    ef80:	00ce0345 	sbceq	r0, lr, r5, asr #6
    ef84:	702b0000 	eorvc	r0, fp, r0
    ef88:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    ef8c:	0000c3aa 	andeq	ip, r0, sl, lsr #7
    ef90:	2a0d2c00 	bcs	359f98 <__ccfg+0x339ff0>
    ef94:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    ef98:	0000d908 	andeq	sp, r0, r8, lsl #18
    ef9c:	b4000000 	strlt	r0, [r0], #-0
    efa0:	0400000a 	streq	r0, [r0], #-10
    efa4:	0035ed00 	eorseq	lr, r5, r0, lsl #26
    efa8:	3f010400 	svccc	0x00010400
    efac:	0100002a 	tsteq	r0, sl, lsr #32
    efb0:	0000340b 	andeq	r3, r0, fp, lsl #8
    efb4:	00002b06 	andeq	r2, r0, r6, lsl #22
    efb8:	000011c0 	andeq	r1, r0, r0, asr #3
    efbc:	00000000 	andeq	r0, r0, r0
    efc0:	00007cdf 	ldrdeq	r7, [r0], -pc	; <UNPREDICTABLE>
    efc4:	5d060102 	stfpls	f0, [r6, #-8]
    efc8:	0300000c 	movweq	r0, #12
    efcc:	00002a1a 	andeq	r2, r0, sl, lsl sl
    efd0:	00371d03 	eorseq	r1, r7, r3, lsl #26
    efd4:	01020000 	mrseq	r0, (UNDEF: 2)
    efd8:	000c5b08 	andeq	r5, ip, r8, lsl #22
    efdc:	31eb0300 	mvncc	r0, r0, lsl #6
    efe0:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    efe4:	00000049 	andeq	r0, r0, r9, asr #32
    efe8:	6b050202 	blvs	14f7f8 <__ccfg+0x12f850>
    efec:	0300000a 	movweq	r0, #10
    eff0:	00002e10 	andeq	r2, r0, r0, lsl lr
    eff4:	005b2b03 	subseq	r2, fp, r3, lsl #22
    eff8:	02020000 	andeq	r0, r2, #0
    effc:	000d6607 	andeq	r6, sp, r7, lsl #12
    f000:	2b9f0300 	blcs	fe7cfc08 <_estack+0xde7cac08>
    f004:	3f030000 	svccc	0x00030000
    f008:	0000006d 	andeq	r0, r0, sp, rrx
    f00c:	fd050402 	stc2	4, cr0, [r5, #-8]
    f010:	03000007 	movweq	r0, #7
    f014:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    f018:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    f01c:	04020000 	streq	r0, [r2], #-0
    f020:	00042607 	andeq	r2, r4, r7, lsl #12
    f024:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    f028:	000007f8 	strdeq	r0, [r0], -r8
    f02c:	21070802 	tstcs	r7, r2, lsl #16
    f030:	04000004 	streq	r0, [r0], #-4
    f034:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    f038:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    f03c:	00042b07 	andeq	r2, r4, r7, lsl #22
    f040:	2a1c0300 	bcs	70fc48 <__ccfg+0x6efca0>
    f044:	14040000 	strne	r0, [r4], #-0
    f048:	0000002c 	andeq	r0, r0, ip, lsr #32
    f04c:	0031ed03 	eorseq	lr, r1, r3, lsl #26
    f050:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    f054:	03000000 	movweq	r0, #0
    f058:	00002e12 	andeq	r2, r0, r2, lsl lr
    f05c:	00501a04 	subseq	r1, r0, r4, lsl #20
    f060:	a1030000 	mrsge	r0, (UNDEF: 3)
    f064:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    f068:	0000621f 	andeq	r6, r0, pc, lsl r2
    f06c:	29b40300 	ldmibcs	r4!, {r8, r9}
    f070:	20040000 	andcs	r0, r4, r0
    f074:	00000074 	andeq	r0, r0, r4, ror r0
    f078:	00331403 	eorseq	r1, r3, r3, lsl #8
    f07c:	9bd40500 	blls	ff510484 <_estack+0xdf50b484>
    f080:	02000000 	andeq	r0, r0, #0
    f084:	2cb30704 	ldccs	7, cr0, [r3], #16
    f088:	04050000 	streq	r0, [r5], #-0
    f08c:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
    f090:	0300000c 	movweq	r0, #12
    f094:	000024e1 	andeq	r2, r0, r1, ror #9
    f098:	00ce3b06 	sbceq	r3, lr, r6, lsl #22
    f09c:	04060000 	streq	r0, [r6], #-0
    f0a0:	000000a2 	andeq	r0, r0, r2, lsr #1
    f0a4:	0022a803 	eoreq	sl, r2, r3, lsl #16
    f0a8:	103c0700 	eorsne	r0, ip, r0, lsl #14
    f0ac:	07000001 	streq	r0, [r0, -r1]
    f0b0:	00002547 	andeq	r2, r0, r7, asr #10
    f0b4:	656f0710 	strbvs	r0, [pc, #-1808]!	; e9ac <__exidx_end+0x8d6c>
    f0b8:	08000001 	stmdaeq	r0, {r0}
    f0bc:	00001f13 	andeq	r1, r0, r3, lsl pc
    f0c0:	00b87007 	adcseq	r7, r8, r7
    f0c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f0c8:	00000778 	andeq	r0, r0, r8, ror r7
    f0cc:	00b87107 	adcseq	r7, r8, r7, lsl #2
    f0d0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    f0d4:	00002286 	andeq	r2, r0, r6, lsl #5
    f0d8:	026d7407 	rsbeq	r7, sp, #117440512	; 0x7000000
    f0dc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    f0e0:	00002015 	andeq	r2, r0, r5, lsl r0
    f0e4:	00f47507 	rscseq	r7, r4, r7, lsl #10
    f0e8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    f0ec:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
    f0f0:	02017d07 	andeq	r7, r1, #448	; 0x1c0
    f0f4:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    f0f8:	00002200 	andeq	r2, r0, r0, lsl #4
    f0fc:	02468107 	subeq	r8, r6, #-1073741823	; 0xc0000001
    f100:	000d0000 	andeq	r0, sp, r0
    f104:	00343c03 	eorseq	r3, r4, r3, lsl #24
    f108:	703e0700 	eorsvc	r0, lr, r0, lsl #14
    f10c:	07000001 	streq	r0, [r0, -r1]
    f110:	00003426 	andeq	r3, r0, r6, lsr #8
    f114:	01a50718 			; <UNDEFINED> instruction: 0x01a50718
    f118:	08000002 	stmdaeq	r0, {r1}
    f11c:	00001f13 	andeq	r1, r0, r3, lsl pc
    f120:	00b8a607 	adcseq	sl, r8, r7, lsl #12
    f124:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f128:	00000778 	andeq	r0, r0, r8, ror r7
    f12c:	00b8a707 	adcseq	sl, r8, r7, lsl #14
    f130:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    f134:	00002286 	andeq	r2, r0, r6, lsl #5
    f138:	026daa07 	rsbeq	sl, sp, #28672	; 0x7000
    f13c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    f140:	00002015 	andeq	r2, r0, r5, lsl r0
    f144:	00f4ab07 	rscseq	sl, r4, r7, lsl #22
    f148:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    f14c:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
    f150:	0273b307 	rsbseq	fp, r3, #469762048	; 0x1c000000
    f154:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    f158:	00002200 	andeq	r2, r0, r0, lsl #4
    f15c:	02b8b707 	adcseq	fp, r8, #1835008	; 0x1c0000
    f160:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    f164:	00000036 	andeq	r0, r0, r6, lsr r0
    f168:	00a2b807 	adceq	fp, r2, r7, lsl #16
    f16c:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    f170:	000023cc 	andeq	r2, r0, ip, asr #7
    f174:	00a2bf07 	adceq	fp, r2, r7, lsl #30
    f178:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    f17c:	0000147d 	andeq	r1, r0, sp, ror r4
    f180:	02dfd407 	sbcseq	sp, pc, #117440512	; 0x7000000
    f184:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    f188:	00002096 	muleq	r0, r6, r0
    f18c:	00b8d507 	adcseq	sp, r8, r7, lsl #10
    f190:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    f194:	000024d4 	ldrdeq	r2, [r0], -r4
    f198:	0324d607 			; <UNDEFINED> instruction: 0x0324d607
    f19c:	00140000 	andseq	r0, r4, r0
    f1a0:	76070109 	strvc	r0, [r7], -r9, lsl #2
    f1a4:	00000246 	andeq	r0, r0, r6, asr #4
    f1a8:	0027690a 	eoreq	r6, r7, sl, lsl #18
    f1ac:	a2770700 	rsbsge	r0, r7, #0, 14
    f1b0:	01000000 	mrseq	r0, (UNDEF: 0)
    f1b4:	0a000404 	beq	101cc <__exidx_end+0xa58c>
    f1b8:	00002107 	andeq	r2, r0, r7, lsl #2
    f1bc:	00a27807 	adceq	r7, r2, r7, lsl #16
    f1c0:	01010000 	mrseq	r0, (UNDEF: 1)
    f1c4:	c70a0003 	strgt	r0, [sl, -r3]
    f1c8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f1cc:	0000a27a 	andeq	sl, r0, sl, ror r2
    f1d0:	01020100 	mrseq	r0, (UNDEF: 18)
    f1d4:	1f820a00 	svcne	0x00820a00
    f1d8:	7b070000 	blvc	1cf1e0 <__ccfg+0x1af238>
    f1dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    f1e0:	00000101 	andeq	r0, r0, r1, lsl #2
    f1e4:	07010900 	streq	r0, [r1, -r0, lsl #18]
    f1e8:	00026d7e 	andeq	r6, r2, lr, ror sp
    f1ec:	25e40a00 	strbcs	r0, [r4, #2560]!	; 0xa00
    f1f0:	7f070000 	svcvc	0x00070000
    f1f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    f1f8:	00040401 	andeq	r0, r4, r1, lsl #8
    f1fc:	0027380a 	eoreq	r3, r7, sl, lsl #16
    f200:	a2800700 	addge	r0, r0, #0, 14
    f204:	01000000 	mrseq	r0, (UNDEF: 0)
    f208:	00000004 	andeq	r0, r0, r4
    f20c:	01050406 	tsteq	r5, r6, lsl #8
    f210:	01090000 	mrseq	r0, (UNDEF: 9)
    f214:	02b8ac07 	adcseq	sl, r8, #1792	; 0x700
    f218:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    f21c:	07000027 	streq	r0, [r0, -r7, lsr #32]
    f220:	0000a2ad 	andeq	sl, r0, sp, lsr #5
    f224:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f228:	21070a00 	tstcs	r7, r0, lsl #20
    f22c:	ae070000 	cdpge	0, 0, cr0, cr7, cr0, {0}
    f230:	000000a2 	andeq	r0, r0, r2, lsr #1
    f234:	00030101 	andeq	r0, r3, r1, lsl #2
    f238:	0021c70a 	eoreq	ip, r1, sl, lsl #14
    f23c:	a2b00700 	adcsge	r0, r0, #0, 14
    f240:	01000000 	mrseq	r0, (UNDEF: 0)
    f244:	0a000102 	beq	f654 <__exidx_end+0x9a14>
    f248:	00001f82 	andeq	r1, r0, r2, lsl #31
    f24c:	00a2b107 	adceq	fp, r2, r7, lsl #2
    f250:	01010000 	mrseq	r0, (UNDEF: 1)
    f254:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    f258:	dfb40701 	svcle	0x00b40701
    f25c:	0a000002 	beq	f26c <__exidx_end+0x962c>
    f260:	000025e4 	andeq	r2, r0, r4, ror #11
    f264:	00a2b507 	adceq	fp, r2, r7, lsl #10
    f268:	04010000 	streq	r0, [r1], #-0
    f26c:	380a0004 	stmdacc	sl, {r2}
    f270:	07000027 	streq	r0, [r0, -r7, lsr #32]
    f274:	0000a2b6 			; <UNDEFINED> instruction: 0x0000a2b6
    f278:	00040100 	andeq	r0, r4, r0, lsl #2
    f27c:	02090000 	andeq	r0, r9, #0
    f280:	0324c207 			; <UNDEFINED> instruction: 0x0324c207
    f284:	ba0a0000 	blt	28f28c <__ccfg+0x26f2e4>
    f288:	07000021 	streq	r0, [r0, -r1, lsr #32]
    f28c:	0000b8c3 	andeq	fp, r0, r3, asr #17
    f290:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    f294:	21590a00 	cmpcs	r9, r0, lsl #20
    f298:	c9070000 	stmdbgt	r7, {}	; <UNPREDICTABLE>
    f29c:	000000b8 	strheq	r0, [r0], -r8
    f2a0:	000c0102 	andeq	r0, ip, r2, lsl #2
    f2a4:	0020f90a 	eoreq	pc, r0, sl, lsl #18
    f2a8:	b8cb0700 	stmialt	fp, {r8, r9, sl}^
    f2ac:	02000000 	andeq	r0, r0, #0
    f2b0:	0a000606 	beq	10ad0 <__exidx_end+0xae90>
    f2b4:	000023f8 	strdeq	r2, [r0], -r8
    f2b8:	00b8d207 	adcseq	sp, r8, r7, lsl #4
    f2bc:	01020000 	mrseq	r0, (UNDEF: 2)
    f2c0:	06000005 	streq	r0, [r0], -r5
    f2c4:	0000ce04 	andeq	ip, r0, r4, lsl #28
    f2c8:	33490300 	movtcc	r0, #37632	; 0x9300
    f2cc:	42080000 	andmi	r0, r8, #0
    f2d0:	00000335 	andeq	r0, r0, r5, lsr r3
    f2d4:	0033d90b 	eorseq	sp, r3, fp, lsl #18
    f2d8:	c1082000 	mrsgt	r2, (UNDEF: 8)
    f2dc:	0003f901 	andeq	pc, r3, r1, lsl #18
    f2e0:	1f130c00 	svcne	0x00130c00
    f2e4:	c2080000 	andgt	r0, r8, #0
    f2e8:	0000b801 	andeq	fp, r0, r1, lsl #16
    f2ec:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    f2f0:	08000007 	stmdaeq	r0, {r0, r1, r2}
    f2f4:	00b801c3 	adcseq	r0, r8, r3, asr #3
    f2f8:	0c020000 	stceq	0, cr0, [r2], {-0}
    f2fc:	00002286 	andeq	r2, r0, r6, lsl #5
    f300:	6d01c608 	stcvs	6, cr12, [r1, #-32]	; 0xffffffe0
    f304:	04000002 	streq	r0, [r0], #-2
    f308:	0020150c 	eoreq	r1, r0, ip, lsl #10
    f30c:	01c70800 	biceq	r0, r7, r0, lsl #16
    f310:	000000f4 	strdeq	r0, [r0], -r4
    f314:	22b60c08 	adcscs	r0, r6, #8, 24	; 0x800
    f318:	cf080000 	svcgt	0x00080000
    f31c:	0004ef01 	andeq	lr, r4, r1, lsl #30
    f320:	000c0c00 	andeq	r0, ip, r0, lsl #24
    f324:	08000022 	stmdaeq	r0, {r1, r5}
    f328:	053901d3 	ldreq	r0, [r9, #-467]!	; 0xfffffe2d
    f32c:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    f330:	00001f08 	andeq	r1, r0, r8, lsl #30
    f334:	6301d908 	movwvs	sp, #6408	; 0x1908
    f338:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    f33c:	00226f0c 	eoreq	r6, r2, ip, lsl #30
    f340:	01de0800 	bicseq	r0, lr, r0, lsl #16
    f344:	0000058d 	andeq	r0, r0, sp, lsl #11
    f348:	209e0c10 	addscs	r0, lr, r0, lsl ip
    f34c:	df080000 	svcle	0x00080000
    f350:	0000a201 	andeq	sl, r0, r1, lsl #4
    f354:	320c1400 	andcc	r1, ip, #0, 8
    f358:	08000023 	stmdaeq	r0, {r0, r1, r5}
    f35c:	05b701e7 	ldreq	r0, [r7, #487]!	; 0x1e7
    f360:	0c150000 	ldceq	0, cr0, [r5], {-0}
    f364:	0000200a 	andeq	r2, r0, sl
    f368:	e101fb08 	tst	r1, r8, lsl #22	; <UNPREDICTABLE>
    f36c:	16000005 	strne	r0, [r0], -r5
    f370:	00147d0c 	andseq	r7, r4, ip, lsl #26
    f374:	020e0800 	andeq	r0, lr, #0, 16
    f378:	0000063b 	andeq	r0, r0, fp, lsr r6
    f37c:	20960c18 	addscs	r0, r6, r8, lsl ip
    f380:	0f080000 	svceq	0x00080000
    f384:	0000b802 	andeq	fp, r0, r2, lsl #16
    f388:	d40c1a00 	strle	r1, [ip], #-2560	; 0xfffff600
    f38c:	08000024 	stmdaeq	r0, {r2, r5}
    f390:	03240210 			; <UNDEFINED> instruction: 0x03240210
    f394:	001c0000 	andseq	r0, ip, r0
    f398:	00247403 	eoreq	r7, r4, r3, lsl #8
    f39c:	04430800 	strbeq	r0, [r3], #-2048	; 0xfffff800
    f3a0:	0b000004 	bleq	f3b8 <__exidx_end+0x9778>
    f3a4:	00002455 	andeq	r2, r0, r5, asr r4
    f3a8:	021a0828 	andseq	r0, sl, #40, 16	; 0x280000
    f3ac:	000004ef 	andeq	r0, r0, pc, ror #9
    f3b0:	001f130c 	andseq	r1, pc, ip, lsl #6
    f3b4:	021b0800 	andseq	r0, fp, #0, 16
    f3b8:	000000b8 	strheq	r0, [r0], -r8
    f3bc:	07780c00 	ldrbeq	r0, [r8, -r0, lsl #24]!
    f3c0:	1d080000 	stcne	0, cr0, [r8, #-0]
    f3c4:	0000b802 	andeq	fp, r0, r2, lsl #16
    f3c8:	860c0200 	strhi	r0, [ip], -r0, lsl #4
    f3cc:	08000022 	stmdaeq	r0, {r1, r5}
    f3d0:	026d0220 	rsbeq	r0, sp, #32, 4
    f3d4:	0c040000 	stceq	0, cr0, [r4], {-0}
    f3d8:	00002015 	andeq	r2, r0, r5, lsl r0
    f3dc:	f4022108 	vst4.8	{d2,d4,d6,d8}, [r2], r8
    f3e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f3e4:	0022b60c 	eoreq	fp, r2, ip, lsl #12
    f3e8:	02290800 	eoreq	r0, r9, #0, 16
    f3ec:	00000685 	andeq	r0, r0, r5, lsl #13
    f3f0:	22000c0c 	andcs	r0, r0, #12, 24	; 0xc00
    f3f4:	2d080000 	stccs	0, cr0, [r8, #-0]
    f3f8:	0006cf02 	andeq	ip, r6, r2, lsl #30
    f3fc:	080c0d00 	stmdaeq	ip, {r8, sl, fp}
    f400:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f404:	06f90233 			; <UNDEFINED> instruction: 0x06f90233
    f408:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    f40c:	0000226f 	andeq	r2, r0, pc, ror #4
    f410:	23023808 	movwcs	r3, #10248	; 0x2808
    f414:	10000007 	andne	r0, r0, r7
    f418:	00209e0c 	eoreq	r9, r0, ip, lsl #28
    f41c:	02390800 	eorseq	r0, r9, #0, 16
    f420:	000000a2 	andeq	r0, r0, r2, lsr #1
    f424:	23320c14 	teqcs	r2, #20, 24	; 0x1400
    f428:	41080000 	mrsmi	r0, (UNDEF: 8)
    f42c:	00074d02 	andeq	r4, r7, r2, lsl #26
    f430:	0a0c1500 	beq	314838 <__ccfg+0x2f4890>
    f434:	08000020 	stmdaeq	r0, {r5}
    f438:	07770255 			; <UNDEFINED> instruction: 0x07770255
    f43c:	0c160000 	ldceq	0, cr0, [r6], {-0}
    f440:	0000147d 	andeq	r1, r0, sp, ror r4
    f444:	d1026808 	tstle	r2, r8, lsl #16
    f448:	18000007 	stmdane	r0, {r0, r1, r2}
    f44c:	0020960c 	eoreq	r9, r0, ip, lsl #12
    f450:	02690800 	rsbeq	r0, r9, #0, 16
    f454:	000000b8 	strheq	r0, [r0], -r8
    f458:	24d40c1a 	ldrbcs	r0, [r4], #3098	; 0xc1a
    f45c:	6a080000 	bvs	20f464 <__ccfg+0x1ef4bc>
    f460:	00032402 	andeq	r2, r3, r2, lsl #8
    f464:	450c1c00 	strmi	r1, [ip, #-3072]	; 0xfffff400
    f468:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    f46c:	00b8026c 	adcseq	r0, r8, ip, ror #4
    f470:	0c200000 	stceq	0, cr0, [r0], #-0
    f474:	0000228e 	andeq	r2, r0, lr, lsl #5
    f478:	ad027008 	stcge	0, cr7, [r2, #-32]	; 0xffffffe0
    f47c:	22000000 	andcs	r0, r0, #0
    f480:	0023cc0c 	eoreq	ip, r3, ip, lsl #24
    f484:	02730800 	rsbseq	r0, r3, #0, 16
    f488:	000000a2 	andeq	r0, r0, r2, lsr #1
    f48c:	010d0024 	tsteq	sp, r4, lsr #32
    f490:	3901c808 	stmdbcc	r1, {r3, fp, lr, pc}
    f494:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    f498:	00002769 	andeq	r2, r0, r9, ror #14
    f49c:	a201c908 	andge	ip, r1, #8, 18	; 0x20000
    f4a0:	01000000 	mrseq	r0, (UNDEF: 0)
    f4a4:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    f4a8:	00002107 	andeq	r2, r0, r7, lsl #2
    f4ac:	a201ca08 	andge	ip, r1, #8, 20	; 0x8000
    f4b0:	01000000 	mrseq	r0, (UNDEF: 0)
    f4b4:	0e000301 	cdpeq	3, 0, cr0, cr0, cr1, {0}
    f4b8:	000021c7 	andeq	r2, r0, r7, asr #3
    f4bc:	a201cc08 	andge	ip, r1, #8, 24	; 0x800
    f4c0:	01000000 	mrseq	r0, (UNDEF: 0)
    f4c4:	0e000102 	adfeqs	f0, f0, f2
    f4c8:	00001f82 	andeq	r1, r0, r2, lsl #31
    f4cc:	a201cd08 	andge	ip, r1, #8, 26	; 0x200
    f4d0:	01000000 	mrseq	r0, (UNDEF: 0)
    f4d4:	00000001 	andeq	r0, r0, r1
    f4d8:	d008010d 	andle	r0, r8, sp, lsl #2
    f4dc:	00056301 	andeq	r6, r5, r1, lsl #6
    f4e0:	25e40e00 	strbcs	r0, [r4, #3584]!	; 0xe00
    f4e4:	d1080000 	mrsle	r0, (UNDEF: 8)
    f4e8:	0000a201 	andeq	sl, r0, r1, lsl #4
    f4ec:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f4f0:	27380e00 	ldrcs	r0, [r8, -r0, lsl #28]!
    f4f4:	d2080000 	andle	r0, r8, #0
    f4f8:	0000a201 	andeq	sl, r0, r1, lsl #4
    f4fc:	00040100 	andeq	r0, r4, r0, lsl #2
    f500:	020d0000 	andeq	r0, sp, #0
    f504:	8d01d408 	cfstrshi	mvf13, [r1, #-32]	; 0xffffffe0
    f508:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    f50c:	0000221f 	andeq	r2, r0, pc, lsl r2
    f510:	b801d508 	stmdalt	r1, {r3, r8, sl, ip, lr, pc}
    f514:	02000000 	andeq	r0, r0, #0
    f518:	0e000d03 	cdpeq	13, 0, cr0, cr0, cr3, {0}
    f51c:	0000271b 	andeq	r2, r0, fp, lsl r7
    f520:	b801d808 	stmdalt	r1, {r3, fp, ip, lr, pc}
    f524:	02000000 	andeq	r0, r0, #0
    f528:	0000000d 	andeq	r0, r0, sp
    f52c:	da08040d 	ble	210568 <__ccfg+0x1f05c0>
    f530:	0005b701 	andeq	fp, r5, r1, lsl #14
    f534:	23b40e00 			; <UNDEFINED> instruction: 0x23b40e00
    f538:	db080000 	blle	20f540 <__ccfg+0x1ef598>
    f53c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f540:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    f544:	24c40e00 	strbcs	r0, [r4], #3584	; 0xe00
    f548:	dd080000 	stcle	0, cr0, [r8, #-0]
    f54c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    f550:	03150400 	tsteq	r5, #0, 8
    f554:	010d0000 	mrseq	r0, (UNDEF: 13)
    f558:	e101e008 	tst	r1, r8
    f55c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    f560:	00002610 	andeq	r2, r0, r0, lsl r6
    f564:	a201e108 	andge	lr, r1, #8, 2
    f568:	01000000 	mrseq	r0, (UNDEF: 0)
    f56c:	0e000206 	cdpeq	2, 0, cr0, cr0, cr6, {0}
    f570:	00001fda 	ldrdeq	r1, [r0], -sl
    f574:	a201e308 	andge	lr, r1, #8, 6	; 0x20000000
    f578:	01000000 	mrseq	r0, (UNDEF: 0)
    f57c:	00000002 	andeq	r0, r0, r2
    f580:	e808020d 	stmda	r8, {r0, r2, r3, r9}
    f584:	00063b01 	andeq	r3, r6, r1, lsl #22
    f588:	23bd0e00 			; <UNDEFINED> instruction: 0x23bd0e00
    f58c:	e9080000 	stmdb	r8, {}	; <UNPREDICTABLE>
    f590:	0000b801 	andeq	fp, r0, r1, lsl #16
    f594:	0a060200 	beq	18fd9c <__ccfg+0x16fdf4>
    f598:	22590e00 	subscs	r0, r9, #0, 28
    f59c:	ea080000 	b	20f5a4 <__ccfg+0x1ef5fc>
    f5a0:	0000b801 	andeq	fp, r0, r1, lsl #16
    f5a4:	09010200 	stmdbeq	r1, {r9}
    f5a8:	24250e00 	strtcs	r0, [r5], #-3584	; 0xfffff200
    f5ac:	ec080000 	stc	0, cr0, [r8], {-0}
    f5b0:	0000b801 	andeq	fp, r0, r1, lsl #16
    f5b4:	08010200 	stmdaeq	r1, {r9}
    f5b8:	1fc20e00 	svcne	0x00c20e00
    f5bc:	ee080000 	cdp	0, 0, cr0, cr8, cr0, {0}
    f5c0:	0000b801 	andeq	fp, r0, r1, lsl #16
    f5c4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    f5c8:	1f650e00 	svcne	0x00650e00
    f5cc:	f3080000 	vhadd.u8	d0, d8, d0
    f5d0:	0000b801 	andeq	fp, r0, r1, lsl #16
    f5d4:	00030200 	andeq	r0, r3, r0, lsl #4
    f5d8:	020d0000 	andeq	r0, sp, #0
    f5dc:	8501fc08 	strhi	pc, [r1, #-3080]	; 0xfffff3f8
    f5e0:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    f5e4:	000021ba 			; <UNDEFINED> instruction: 0x000021ba
    f5e8:	b801fd08 	stmdalt	r1, {r3, r8, sl, fp, ip, sp, lr, pc}
    f5ec:	02000000 	andeq	r0, r0, #0
    f5f0:	0e000d03 	cdpeq	13, 0, cr0, cr0, cr3, {0}
    f5f4:	00002159 	andeq	r2, r0, r9, asr r1
    f5f8:	b8020308 	stmdalt	r2, {r3, r8, r9}
    f5fc:	02000000 	andeq	r0, r0, #0
    f600:	0e000c01 	cdpeq	12, 0, cr0, cr0, cr1, {0}
    f604:	000020f9 	strdeq	r2, [r0], -r9
    f608:	b8020508 	stmdalt	r2, {r3, r8, sl}
    f60c:	02000000 	andeq	r0, r0, #0
    f610:	0e000606 	cfmadd32eq	mvax0, mvfx0, mvfx0, mvfx6
    f614:	000023f8 	strdeq	r2, [r0], -r8
    f618:	b8020c08 	stmdalt	r2, {r3, sl, fp}
    f61c:	02000000 	andeq	r0, r0, #0
    f620:	00000501 	andeq	r0, r0, r1, lsl #10
    f624:	2208010d 	andcs	r0, r8, #1073741827	; 0x40000003
    f628:	0006cf02 	andeq	ip, r6, r2, lsl #30
    f62c:	27690e00 	strbcs	r0, [r9, -r0, lsl #28]!
    f630:	23080000 	movwcs	r0, #32768	; 0x8000
    f634:	0000a202 	andeq	sl, r0, r2, lsl #4
    f638:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    f63c:	21070e00 	tstcs	r7, r0, lsl #28
    f640:	24080000 	strcs	r0, [r8], #-0
    f644:	0000a202 	andeq	sl, r0, r2, lsl #4
    f648:	03010100 	movweq	r0, #4352	; 0x1100
    f64c:	21c70e00 	biccs	r0, r7, r0, lsl #28
    f650:	26080000 	strcs	r0, [r8], -r0
    f654:	0000a202 	andeq	sl, r0, r2, lsl #4
    f658:	01020100 	mrseq	r0, (UNDEF: 18)
    f65c:	1f820e00 	svcne	0x00820e00
    f660:	27080000 	strcs	r0, [r8, -r0]
    f664:	0000a202 	andeq	sl, r0, r2, lsl #4
    f668:	00010100 	andeq	r0, r1, r0, lsl #2
    f66c:	010d0000 	mrseq	r0, (UNDEF: 13)
    f670:	f9022a08 			; <UNDEFINED> instruction: 0xf9022a08
    f674:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    f678:	000025e4 	andeq	r2, r0, r4, ror #11
    f67c:	a2022b08 	andge	r2, r2, #8, 22	; 0x2000
    f680:	01000000 	mrseq	r0, (UNDEF: 0)
    f684:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    f688:	00002738 	andeq	r2, r0, r8, lsr r7
    f68c:	a2022c08 	andge	r2, r2, #8, 24	; 0x800
    f690:	01000000 	mrseq	r0, (UNDEF: 0)
    f694:	00000004 	andeq	r0, r0, r4
    f698:	2e08020d 	cdpcs	2, 0, cr0, cr8, cr13, {0}
    f69c:	00072302 	andeq	r2, r7, r2, lsl #6
    f6a0:	221f0e00 	andscs	r0, pc, #0, 28
    f6a4:	2f080000 	svccs	0x00080000
    f6a8:	0000b802 	andeq	fp, r0, r2, lsl #16
    f6ac:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    f6b0:	271b0e00 	ldrcs	r0, [fp, -r0, lsl #28]
    f6b4:	32080000 	andcc	r0, r8, #0
    f6b8:	0000b802 	andeq	fp, r0, r2, lsl #16
    f6bc:	000d0200 	andeq	r0, sp, r0, lsl #4
    f6c0:	040d0000 	streq	r0, [sp], #-0
    f6c4:	4d023408 	cfstrsmi	mvf3, [r2, #-32]	; 0xffffffe0
    f6c8:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    f6cc:	000023b4 			; <UNDEFINED> instruction: 0x000023b4
    f6d0:	ce023508 	cfsh32gt	mvfx3, mvfx2, #8
    f6d4:	04000000 	streq	r0, [r0], #-0
    f6d8:	0e001c04 	cdpeq	12, 0, cr1, cr0, cr4, {0}
    f6dc:	000024c4 	andeq	r2, r0, r4, asr #9
    f6e0:	ce023708 	cdpgt	7, 0, cr3, cr2, cr8, {0}
    f6e4:	04000000 	streq	r0, [r0], #-0
    f6e8:	00000315 	andeq	r0, r0, r5, lsl r3
    f6ec:	3a08010d 	bcc	20fb28 <__ccfg+0x1efb80>
    f6f0:	00077702 	andeq	r7, r7, r2, lsl #14
    f6f4:	26100e00 	ldrcs	r0, [r0], -r0, lsl #28
    f6f8:	3b080000 	blcc	20f700 <__ccfg+0x1ef758>
    f6fc:	0000a202 	andeq	sl, r0, r2, lsl #4
    f700:	02060100 	andeq	r0, r6, #0, 2
    f704:	1fda0e00 	svcne	0x00da0e00
    f708:	3d080000 	stccc	0, cr0, [r8, #-0]
    f70c:	0000a202 	andeq	sl, r0, r2, lsl #4
    f710:	00020100 	andeq	r0, r2, r0, lsl #2
    f714:	020d0000 	andeq	r0, sp, #0
    f718:	d1024208 	tstle	r2, r8, lsl #4
    f71c:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    f720:	000023bd 			; <UNDEFINED> instruction: 0x000023bd
    f724:	b8024308 	stmdalt	r2, {r3, r8, r9, lr}
    f728:	02000000 	andeq	r0, r0, #0
    f72c:	0e000a06 	vmlaeq.f32	s0, s0, s12
    f730:	00002259 	andeq	r2, r0, r9, asr r2
    f734:	b8024408 	stmdalt	r2, {r3, sl, lr}
    f738:	02000000 	andeq	r0, r0, #0
    f73c:	0e000901 	vmlaeq.f16	s0, s0, s2	; <UNPREDICTABLE>
    f740:	00002425 	andeq	r2, r0, r5, lsr #8
    f744:	b8024608 	stmdalt	r2, {r3, r9, sl, lr}
    f748:	02000000 	andeq	r0, r0, #0
    f74c:	0e000801 	cdpeq	8, 0, cr0, cr0, cr1, {0}
    f750:	00001fc2 	andeq	r1, r0, r2, asr #31
    f754:	b8024808 	stmdalt	r2, {r3, fp, lr}
    f758:	02000000 	andeq	r0, r0, #0
    f75c:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    f760:	00001f65 	andeq	r1, r0, r5, ror #30
    f764:	b8024d08 	stmdalt	r2, {r3, r8, sl, fp, lr}
    f768:	02000000 	andeq	r0, r0, #0
    f76c:	00000003 	andeq	r0, r0, r3
    f770:	5608020d 	strpl	r0, [r8], -sp, lsl #4
    f774:	00081b02 	andeq	r1, r8, r2, lsl #22
    f778:	21ba0e00 			; <UNDEFINED> instruction: 0x21ba0e00
    f77c:	57080000 	strpl	r0, [r8, -r0]
    f780:	0000b802 	andeq	fp, r0, r2, lsl #16
    f784:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    f788:	21590e00 	cmpcs	r9, r0, lsl #28
    f78c:	5d080000 	stcpl	0, cr0, [r8, #-0]
    f790:	0000b802 	andeq	fp, r0, r2, lsl #16
    f794:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    f798:	20f90e00 	rscscs	r0, r9, r0, lsl #28
    f79c:	5f080000 	svcpl	0x00080000
    f7a0:	0000b802 	andeq	fp, r0, r2, lsl #16
    f7a4:	06060200 	streq	r0, [r6], -r0, lsl #4
    f7a8:	23f80e00 	mvnscs	r0, #0, 28
    f7ac:	66080000 	strvs	r0, [r8], -r0
    f7b0:	0000b802 	andeq	fp, r0, r2, lsl #16
    f7b4:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    f7b8:	10090000 	andne	r0, r9, r0
    f7bc:	08544802 	ldmdaeq	r4, {r1, fp, lr}^
    f7c0:	7f080000 	svcvc	0x00080000
    f7c4:	02000021 	andeq	r0, r0, #33	; 0x21
    f7c8:	0000ce49 	andeq	ip, r0, r9, asr #28
    f7cc:	e0080000 	and	r0, r8, r0
    f7d0:	02000020 	andeq	r0, r0, #32
    f7d4:	0000ce4a 	andeq	ip, r0, sl, asr #28
    f7d8:	2b080400 	blcs	2107e0 <__ccfg+0x1f0838>
    f7dc:	02000025 	andeq	r0, r0, #37	; 0x25
    f7e0:	0000ce4b 	andeq	ip, r0, fp, asr #28
    f7e4:	7e080800 	cdpvc	8, 0, cr0, cr8, cr0, {0}
    f7e8:	02000026 	andeq	r0, r0, #38	; 0x26
    f7ec:	0000ce4c 	andeq	ip, r0, ip, asr #28
    f7f0:	03000c00 	movweq	r0, #3072	; 0xc00
    f7f4:	00001f8b 	andeq	r1, r0, fp, lsl #31
    f7f8:	081b4d02 	ldmdaeq	fp, {r1, r8, sl, fp, lr}
    f7fc:	8d0f0000 	stchi	0, cr0, [pc, #-0]	; f804 <__exidx_end+0x9bc4>
    f800:	02000034 	andeq	r0, r0, #52	; 0x34
    f804:	1003013e 	andne	r0, r3, lr, lsr r1
    f808:	000032ef 	andeq	r3, r0, pc, ror #5
    f80c:	ce011402 	cdpgt	4, 0, cr1, cr1, cr2, {0}
    f810:	00000000 	andeq	r0, r0, r0
    f814:	14000000 	strne	r0, [r0], #-0
    f818:	01000000 	mrseq	r0, (UNDEF: 0)
    f81c:	0008909c 	muleq	r8, ip, r0
    f820:	33a71100 			; <UNDEFINED> instruction: 0x33a71100
    f824:	6a010000 	bvs	4f82c <__ccfg+0x2f884>
    f828:	000000ce 	andeq	r0, r0, lr, asr #1
    f82c:	10005001 	andne	r5, r0, r1
    f830:	00003475 	andeq	r3, r0, r5, ror r4
    f834:	ce014c02 	cdpgt	12, 0, cr4, cr1, cr2, {0}
    f838:	fc000000 	stc2	0, cr0, [r0], {-0}
    f83c:	2800003a 	stmdacs	r0, {r1, r3, r4, r5}
    f840:	01000000 	mrseq	r0, (UNDEF: 0)
    f844:	0008d89c 	muleq	r8, ip, r8
    f848:	4f701200 	svcmi	0x00701200
    f84c:	7a010070 	bvc	4fa14 <__ccfg+0x2fa6c>
    f850:	000000ce 	andeq	r0, r0, lr, asr #1
    f854:	00003c08 	andeq	r3, r0, r8, lsl #24
    f858:	00085f13 	andeq	r5, r8, r3, lsl pc
    f85c:	003b0400 	eorseq	r0, fp, r0, lsl #8
    f860:	00000400 	andeq	r0, r0, r0, lsl #8
    f864:	137e0100 	cmnne	lr, #0, 2
    f868:	0000085f 	andeq	r0, r0, pc, asr r8
    f86c:	00003b10 	andeq	r3, r0, r0, lsl fp
    f870:	00000006 	andeq	r0, r0, r6
    f874:	14008301 	strne	r8, [r0], #-769	; 0xfffffcff
    f878:	00003377 	andeq	r3, r0, r7, ror r3
    f87c:	24015402 	strcs	r5, [r1], #-1026	; 0xfffffbfe
    f880:	4c00003b 	stcmi	0, cr0, [r0], {59}	; 0x3b
    f884:	01000000 	mrseq	r0, (UNDEF: 0)
    f888:	34a4159c 	strtcc	r1, [r4], #1436	; 0x59c
    f88c:	5c020000 	stcpl	0, cr0, [r2], {-0}
    f890:	003b7001 	eorseq	r7, fp, r1
    f894:	00015000 	andeq	r5, r1, r0
    f898:	2a9c0100 	bcs	fe70fca0 <_estack+0xde70aca0>
    f89c:	16000009 	strne	r0, [r0], -r9
    f8a0:	0000339e 	muleq	r0, lr, r3
    f8a4:	026da401 	rsbeq	sl, sp, #16777216	; 0x1000000
    f8a8:	50010000 	andpl	r0, r1, r0
    f8ac:	0033f416 	eorseq	pc, r3, r6, lsl r4	; <UNPREDICTABLE>
    f8b0:	2aa40100 	bcs	fe90fcb8 <_estack+0xde90acb8>
    f8b4:	01000009 	tsteq	r0, r9
    f8b8:	349c1751 	ldrcc	r1, [ip], #1873	; 0x751
    f8bc:	a6010000 	strge	r0, [r1], -r0
    f8c0:	00000094 	muleq	r0, r4, r0
    f8c4:	00003c29 	andeq	r3, r0, r9, lsr #24
    f8c8:	54040600 	strpl	r0, [r4], #-1536	; 0xfffffa00
    f8cc:	15000008 	strne	r0, [r0, #-8]
    f8d0:	00003466 	andeq	r3, r0, r6, ror #8
    f8d4:	c0016c02 	andgt	r6, r1, r2, lsl #24
    f8d8:	1800003c 	stmdane	r0, {r2, r3, r4, r5}
    f8dc:	01000001 	tsteq	r0, r1
    f8e0:	0009ac9c 	muleq	r9, ip, ip
    f8e4:	339e1800 	orrscc	r1, lr, #0, 16
    f8e8:	f3010000 	vhadd.u8	d0, d1, d0
    f8ec:	0000026d 	andeq	r0, r0, sp, ror #4
    f8f0:	00003c47 	andeq	r3, r0, r7, asr #24
    f8f4:	00349c17 	eorseq	r9, r4, r7, lsl ip
    f8f8:	c3f50100 	mvnsgt	r0, #0, 2
    f8fc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    f900:	1700003c 	smladxne	r0, ip, r0, r0
    f904:	0000345a 	andeq	r3, r0, sl, asr r4
    f908:	00cef601 	sbceq	pc, lr, r1, lsl #12
    f90c:	3cb70000 	ldccc	0, cr0, [r7]
    f910:	0a170000 	beq	5cf918 <__ccfg+0x5af970>
    f914:	01000033 	tsteq	r0, r3, lsr r0
    f918:	000324f7 	strdeq	r2, [r3], -r7
    f91c:	003d0100 	eorseq	r0, sp, r0, lsl #2
    f920:	331b1900 	tstcc	fp, #0, 18
    f924:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    f928:	000000c3 	andeq	r0, r0, r3, asr #1
    f92c:	0033fc17 	eorseq	pc, r3, r7, lsl ip	; <UNPREDICTABLE>
    f930:	cef90100 	cdpgt	1, 15, cr0, cr9, cr0, {0}
    f934:	44000000 	strmi	r0, [r0], #-0
    f938:	1700003d 	smladxne	r0, sp, r0, r0
    f93c:	0000338f 	andeq	r3, r0, pc, lsl #7
    f940:	00cefa01 	sbceq	pc, lr, r1, lsl #20
    f944:	3d9c0000 	ldccc	0, cr0, [ip]
    f948:	15000000 	strne	r0, [r0, #-0]
    f94c:	00003364 	andeq	r3, r0, r4, ror #6
    f950:	d8016402 	stmdale	r1, {r1, sl, sp, lr}
    f954:	2000003d 	andcs	r0, r0, sp, lsr r0
    f958:	01000000 	mrseq	r0, (UNDEF: 0)
    f95c:	0009d39c 	muleq	r9, ip, r3
    f960:	33f41a00 	mvnscc	r1, #0, 20
    f964:	77010000 	strvc	r0, [r1, -r0]
    f968:	00092a01 	andeq	r2, r9, r1, lsl #20
    f96c:	003dd200 	eorseq	sp, sp, r0, lsl #4
    f970:	c2150000 	andsgt	r0, r5, #0
    f974:	02000033 	andeq	r0, r0, #51	; 0x33
    f978:	00000174 	andeq	r0, r0, r4, ror r1
    f97c:	00600000 	rsbeq	r0, r0, r0
    f980:	9c010000 	stcls	0, cr0, [r1], {-0}
    f984:	00000a37 	andeq	r0, r0, r7, lsr sl
    f988:	00265c1b 	eoreq	r5, r6, fp, lsl ip
    f98c:	01840100 	orreq	r0, r4, r0, lsl #2
    f990:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    f994:	21000338 	tstcs	r0, r8, lsr r3
    f998:	00211a1b 	eoreq	r1, r1, fp, lsl sl
    f99c:	01850100 	orreq	r0, r5, r0, lsl #2
    f9a0:	00000324 	andeq	r0, r0, r4, lsr #6
    f9a4:	210003bc 			; <UNDEFINED> instruction: 0x210003bc
    f9a8:	0100691c 	tsteq	r0, ip, lsl r9
    f9ac:	00940189 	addseq	r0, r4, r9, lsl #3
    f9b0:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    f9b4:	001d0000 	andseq	r0, sp, r0
    f9b8:	9c000000 	stcls	0, cr0, [r0], {-0}
    f9bc:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    f9c0:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    f9c4:	51011e84 	smlabbpl	r1, r4, lr, r1
    f9c8:	1eff0802 	cdpne	8, 15, cr0, cr15, cr2, {0}
    f9cc:	0c055001 	stceq	0, cr5, [r5], {1}
    f9d0:	21000338 	tstcs	r0, r8, lsr r3
    f9d4:	2a150000 	bcs	54f9dc <__ccfg+0x52fa34>
    f9d8:	02000033 	andeq	r0, r0, #51	; 0x33
    f9dc:	3df8017c 	ldfcce	f0, [r8, #496]!	; 0x1f0
    f9e0:	001c0000 	andseq	r0, ip, r0
    f9e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    f9e8:	00000a5c 	andeq	r0, r0, ip, asr sl
    f9ec:	0034521f 	eorseq	r5, r4, pc, lsl r2
    f9f0:	01960100 	orrseq	r0, r6, r0, lsl #2
    f9f4:	00000a5c 	andeq	r0, r0, ip, asr sl
    f9f8:	02005001 	andeq	r5, r0, #1
    f9fc:	0ca70201 	sfmeq	f0, 4, [r7], #4
    fa00:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
    fa04:	73000000 	movwvc	r0, #0
    fa08:	2100000a 	tstcs	r0, sl
    fa0c:	000000e4 	andeq	r0, r0, r4, ror #1
    fa10:	af22000b 	svcge	0x0022000b
    fa14:	01000033 	tsteq	r0, r3, lsr r0
    fa18:	000a9752 	andeq	r9, sl, r2, asr r7
    fa1c:	3bc31800 	blcc	ff0d5a24 <_estack+0xdf0d0a24>
    fa20:	3a5d3a3d 	bcc	175e31c <__ccfg+0x173e374>
    fa24:	0aa13a71 	beq	fe85e3f0 <_estack+0xde8593f0>
    fa28:	3b0f3a8f 	blcc	3de46c <__ccfg+0x3be4c4>
    fa2c:	5e4909b3 			; <UNDEFINED> instruction: 0x5e4909b3
    fa30:	3b2f0a85 	blcc	bd244c <__ccfg+0xbb24a4>
    fa34:	63233b85 			; <UNDEFINED> instruction: 0x63233b85
    fa38:	2400000a 	strcs	r0, [r0], #-10
    fa3c:	000016a2 	andeq	r1, r0, r2, lsr #13
    fa40:	00eb1909 	rsceq	r1, fp, r9, lsl #18
    fa44:	eb250000 	bl	94fa4c <__ccfg+0x92faa4>
    fa48:	25000000 	strcs	r0, [r0, #-0]
    fa4c:	00000094 	muleq	r0, r4, r0
    fa50:	0000d925 	andeq	sp, r0, r5, lsr #18
    fa54:	07000000 	streq	r0, [r0, -r0]
    fa58:	04000002 	streq	r0, [r0], #-2
    fa5c:	00380d00 	eorseq	r0, r8, r0, lsl #26
    fa60:	3f010400 	svccc	0x00010400
    fa64:	0100002a 	tsteq	r0, sl, lsr #32
    fa68:	00003574 	andeq	r3, r0, r4, ror r5
    fa6c:	00002b06 	andeq	r2, r0, r6, lsl #22
    fa70:	00001208 	andeq	r1, r0, r8, lsl #4
    fa74:	00000000 	andeq	r0, r0, r0
    fa78:	0000808a 	andeq	r8, r0, sl, lsl #1
    fa7c:	5d060102 	stfpls	f0, [r6, #-8]
    fa80:	0200000c 	andeq	r0, r0, #12
    fa84:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
    fa88:	02020000 	andeq	r0, r2, #0
    fa8c:	000a6b05 	andeq	r6, sl, r5, lsl #22
    fa90:	07020200 	streq	r0, [r2, -r0, lsl #4]
    fa94:	00000d66 	andeq	r0, r0, r6, ror #26
    fa98:	fd050402 	stc2	4, cr0, [r5, #-8]
    fa9c:	03000007 	movweq	r0, #7
    faa0:	000029b2 			; <UNDEFINED> instruction: 0x000029b2
    faa4:	00534103 	subseq	r4, r3, r3, lsl #2
    faa8:	04020000 	streq	r0, [r2], #-0
    faac:	00042607 	andeq	r2, r4, r7, lsl #12
    fab0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    fab4:	000007f8 	strdeq	r0, [r0], -r8
    fab8:	21070802 	tstcs	r7, r2, lsl #16
    fabc:	04000004 	streq	r0, [r0], #-4
    fac0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    fac4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    fac8:	00042b07 	andeq	r2, r4, r7, lsl #22
    facc:	29b40300 	ldmibcs	r4!, {r8, r9}
    fad0:	20040000 	andcs	r0, r4, r0
    fad4:	00000048 	andeq	r0, r0, r8, asr #32
    fad8:	0035d105 	eorseq	sp, r5, r5, lsl #2
    fadc:	03300200 	teqeq	r0, #0, 4
    fae0:	363c0603 	ldrtcc	r0, [ip], -r3, lsl #12
    fae4:	fd010000 	stc2	0, cr0, [r1, #-0]
    fae8:	35e40501 	strbcc	r0, [r4, #1281]!	; 0x501
    faec:	82010000 	andhi	r0, r1, #0
    faf0:	bf070101 	svclt	0x00070101
    faf4:	01000034 	tsteq	r0, r4, lsr r0
    faf8:	3e14010d 	mufccs	f0, f4, #5.0
    fafc:	00d40000 	sbcseq	r0, r4, r0
    fb00:	9c010000 	stcls	0, cr0, [r1], {-0}
    fb04:	0000016d 	andeq	r0, r0, sp, ror #2
    fb08:	0035bf08 	eorseq	fp, r5, r8, lsl #30
    fb0c:	010d0100 	mrseq	r0, (UNDEF: 29)
    fb10:	00000076 	andeq	r0, r0, r6, ror r0
    fb14:	00003ea4 	andeq	r3, r0, r4, lsr #29
    fb18:	00362b09 	eorseq	r2, r6, r9, lsl #22
    fb1c:	010f0100 	mrseq	r0, (UNDEF: 31)
    fb20:	00000076 	andeq	r0, r0, r6, ror r0
    fb24:	00003ed0 	ldrdeq	r3, [r0], -r0
    fb28:	0034b809 	eorseq	fp, r4, r9, lsl #16
    fb2c:	01100100 	tsteq	r0, r0, lsl #2
    fb30:	00000076 	andeq	r0, r0, r6, ror r0
    fb34:	00003ee3 	andeq	r3, r0, r3, ror #29
    fb38:	0000810a 	andeq	r8, r0, sl, lsl #2
    fb3c:	003e4600 	eorseq	r4, lr, r0, lsl #12
    fb40:	00000600 	andeq	r0, r0, r0, lsl #12
    fb44:	01360100 	teqeq	r6, r0, lsl #2
    fb48:	003e6c0b 	eorseq	r6, lr, fp, lsl #24
    fb4c:	00002a00 	andeq	r2, r0, r0, lsl #20
    fb50:	00011f00 	andeq	r1, r1, r0, lsl #30
    fb54:	36b10900 	ldrtcc	r0, [r1], r0, lsl #18
    fb58:	53010000 	movwpl	r0, #4096	; 0x1000
    fb5c:	00007601 	andeq	r7, r0, r1, lsl #12
    fb60:	003efc00 	eorseq	pc, lr, r0, lsl #24
    fb64:	360d0900 	strcc	r0, [sp], -r0, lsl #18
    fb68:	54010000 	strpl	r0, [r1], #-0
    fb6c:	00007601 	andeq	r7, r0, r1, lsl #12
    fb70:	003f0f00 	eorseq	r0, pc, r0, lsl #30
    fb74:	560c0000 	strpl	r0, [ip], -r0
    fb78:	c300003e 	movwgt	r0, #62	; 0x3e
    fb7c:	33000001 	movwcc	r0, #1
    fb80:	0d000001 	stceq	0, cr0, [r0, #-4]
    fb84:	74025001 	strvc	r5, [r2], #-1
    fb88:	5e0c0000 	cdppl	0, 0, cr0, cr12, cr0, {0}
    fb8c:	d400003e 	strle	r0, [r0], #-62	; 0xffffffc2
    fb90:	4d000001 	stcmi	0, cr0, [r0, #-4]
    fb94:	0d000001 	stceq	0, cr0, [r0, #-4]
    fb98:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    fb9c:	50010d00 	andpl	r0, r1, r0, lsl #26
    fba0:	00007502 	andeq	r7, r0, r2, lsl #10
    fba4:	003e9c0c 	eorseq	r9, lr, ip, lsl #24
    fba8:	0001ea00 	andeq	lr, r1, r0, lsl #20
    fbac:	00016100 	andeq	r6, r1, r0, lsl #2
    fbb0:	50010d00 	andpl	r0, r1, r0, lsl #26
    fbb4:	00007402 	andeq	r7, r0, r2, lsl #8
    fbb8:	003ea60e 	eorseq	sl, lr, lr, lsl #12
    fbbc:	50010d00 	andpl	r0, r1, r0, lsl #26
    fbc0:	00003201 	andeq	r3, r0, r1, lsl #4
    fbc4:	0035f70f 	eorseq	pc, r5, pc, lsl #14
    fbc8:	e85f0700 	ldmda	pc, {r8, r9, sl}^	; <UNPREDICTABLE>
    fbcc:	a400003e 	strge	r0, [r0], #-62	; 0xffffffc2
    fbd0:	01000000 	mrseq	r0, (UNDEF: 0)
    fbd4:	0001c39c 	muleq	r1, ip, r3
    fbd8:	35bf1000 	ldrcc	r1, [pc, #0]!	; fbe0 <__exidx_end+0x9fa0>
    fbdc:	72010000 	andvc	r0, r1, #0
    fbe0:	00000076 	andeq	r0, r0, r6, ror r0
    fbe4:	00003f3a 	andeq	r3, r0, sl, lsr pc
    fbe8:	00361810 	eorseq	r1, r6, r0, lsl r8
    fbec:	76730100 	ldrbtvc	r0, [r3], -r0, lsl #2
    fbf0:	4d000000 	stcmi	0, cr0, [r0, #-0]
    fbf4:	1100003f 	tstne	r0, pc, lsr r0
    fbf8:	00003ef8 	strdeq	r3, [r0], -r8
    fbfc:	000001fb 	strdeq	r0, [r0], -fp
    fc00:	003f0c11 	eorseq	r0, pc, r1, lsl ip	; <UNPREDICTABLE>
    fc04:	00020300 	andeq	r0, r2, r0, lsl #6
    fc08:	3f1c1200 	svccc	0x001c1200
    fc0c:	009b0000 	addseq	r0, fp, r0
    fc10:	010d0000 	mrseq	r0, (UNDEF: 13)
    fc14:	00740250 	rsbseq	r0, r4, r0, asr r2
    fc18:	e4130000 	ldr	r0, [r3], #-0
    fc1c:	05000034 	streq	r0, [r0, #-52]	; 0xffffffcc
    fc20:	0001d46c 	andeq	sp, r1, ip, ror #8
    fc24:	00761400 	rsbseq	r1, r6, r0, lsl #8
    fc28:	13000000 	movwne	r0, #0
    fc2c:	00003514 	andeq	r3, r0, r4, lsl r5
    fc30:	01ea7305 	mvneq	r7, r5, lsl #6
    fc34:	76140000 	ldrvc	r0, [r4], -r0
    fc38:	14000000 	strne	r0, [r0], #-0
    fc3c:	00000076 	andeq	r0, r0, r6, ror r0
    fc40:	35441300 	strbcc	r1, [r4, #-768]	; 0xfffffd00
    fc44:	7a050000 	bvc	14fc4c <__ccfg+0x12fca4>
    fc48:	000001fb 	strdeq	r0, [r0], -fp
    fc4c:	00007614 	andeq	r7, r0, r4, lsl r6
    fc50:	74150000 	ldrvc	r0, [r5], #-0
    fc54:	06000036 			; <UNDEFINED> instruction: 0x06000036
    fc58:	91160243 	tstls	r6, r3, asr #4
    fc5c:	05000035 	streq	r0, [r0, #-53]	; 0xffffffcb
    fc60:	0b1700fd 	bleq	5d005c <__ccfg+0x5b00b4>
    fc64:	00040000 	andeq	r0, r4, r0
    fc68:	0000394f 	andeq	r3, r0, pc, asr #18
    fc6c:	2a3f0104 	bcs	fd0084 <__ccfg+0xfb00dc>
    fc70:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    fc74:	06000038 			; <UNDEFINED> instruction: 0x06000038
    fc78:	5000002b 	andpl	r0, r0, fp, lsr #32
    fc7c:	00000012 	andeq	r0, r0, r2, lsl r0
    fc80:	77000000 	strvc	r0, [r0, -r0]
    fc84:	02000082 	andeq	r0, r0, #130	; 0x82
    fc88:	0c5d0601 	mrrceq	6, 0, r0, sp, cr1
    fc8c:	01020000 	mrseq	r0, (UNDEF: 2)
    fc90:	000c5b08 	andeq	r5, ip, r8, lsl #22
    fc94:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    fc98:	00000a6b 	andeq	r0, r0, fp, ror #20
    fc9c:	66070202 	strvs	r0, [r7], -r2, lsl #4
    fca0:	0300000d 	movweq	r0, #13
    fca4:	00002b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    fca8:	004c3f04 	subeq	r3, ip, r4, lsl #30
    fcac:	04020000 	streq	r0, [r2], #-0
    fcb0:	0007fd05 	andeq	pc, r7, r5, lsl #26
    fcb4:	29b20300 	ldmibcs	r2!, {r8, r9}
    fcb8:	41040000 	mrsmi	r0, (UNDEF: 4)
    fcbc:	0000005e 	andeq	r0, r0, lr, asr r0
    fcc0:	26070402 	strcs	r0, [r7], -r2, lsl #8
    fcc4:	02000004 	andeq	r0, r0, #4
    fcc8:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
    fccc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    fcd0:	00042107 	andeq	r2, r4, r7, lsl #2
    fcd4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    fcd8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    fcdc:	2b070402 	blcs	1d0cec <__ccfg+0x1b0d44>
    fce0:	03000004 	movweq	r0, #4
    fce4:	00002ba1 	andeq	r2, r0, r1, lsr #23
    fce8:	00411f05 	subeq	r1, r1, r5, lsl #30
    fcec:	b4030000 	strlt	r0, [r3], #-0
    fcf0:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    fcf4:	00005320 	andeq	r5, r0, r0, lsr #6
    fcf8:	39870500 	stmibcc	r7, {r8, sl}
    fcfc:	e9020000 	stmdb	r2, {}	; <UNPREDICTABLE>
    fd00:	00000081 	andeq	r0, r0, r1, lsl #1
    fd04:	0000be03 	andeq	fp, r0, r3, lsl #28
    fd08:	36d70600 	ldrbcc	r0, [r7], r0, lsl #12
    fd0c:	e9020000 	stmdb	r2, {}	; <UNPREDICTABLE>
    fd10:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd14:	0039e007 	eorseq	lr, r9, r7
    fd18:	81ef0200 	mvnhi	r0, r0, lsl #4
    fd1c:	00000000 	andeq	r0, r0, r0
    fd20:	00370c08 	eorseq	r0, r7, r8, lsl #24
    fd24:	8cab0200 	sfmhi	f0, 4, [fp]
    fd28:	01000000 	mrseq	r0, (UNDEF: 0)
    fd2c:	000000e7 	andeq	r0, r0, r7, ror #1
    fd30:	0035bf09 	eorseq	fp, r5, r9, lsl #30
    fd34:	03290100 			; <UNDEFINED> instruction: 0x03290100
    fd38:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd3c:	003a690a 	eorseq	r6, sl, sl, lsl #18
    fd40:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    fd44:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd48:	39bf0800 	ldmibcc	pc!, {fp}	; <UNPREDICTABLE>
    fd4c:	81020000 	mrshi	r0, (UNDEF: 2)
    fd50:	0000008c 	andeq	r0, r0, ip, lsl #1
    fd54:	00011001 	andeq	r1, r1, r1
    fd58:	35bf0900 	ldrcc	r0, [pc, #2304]!	; 10660 <__exidx_end+0xaa20>
    fd5c:	3c010000 	stccc	0, cr0, [r1], {-0}
    fd60:	00008c03 	andeq	r8, r0, r3, lsl #24
    fd64:	3a300a00 	bcc	c1256c <__ccfg+0xbf25c4>
    fd68:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    fd6c:	00008c03 	andeq	r8, r0, r3, lsl #24
    fd70:	6d080000 	stcvs	0, cr0, [r8, #-0]
    fd74:	02000038 	andeq	r0, r0, #56	; 0x38
    fd78:	00008c88 	andeq	r8, r0, r8, lsl #25
    fd7c:	01390100 	teqeq	r9, r0, lsl #2
    fd80:	bf090000 	svclt	0x00090000
    fd84:	01000035 	tsteq	r0, r5, lsr r0
    fd88:	008c034f 	addeq	r0, ip, pc, asr #6
    fd8c:	a40a0000 	strge	r0, [sl], #-0
    fd90:	01000039 	tsteq	r0, r9, lsr r0
    fd94:	008c0351 	addeq	r0, ip, r1, asr r3
    fd98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fd9c:	000037d1 	ldrdeq	r3, [r0], -r1
    fda0:	008cc802 	addeq	ip, ip, r2, lsl #16
    fda4:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    fda8:	09000001 	stmdbeq	r0, {r0}
    fdac:	000035bf 			; <UNDEFINED> instruction: 0x000035bf
    fdb0:	8c036201 	sfmhi	f6, 4, [r3], {1}
    fdb4:	0a000000 	beq	fdbc <__exidx_end+0xa17c>
    fdb8:	00003761 	andeq	r3, r0, r1, ror #14
    fdbc:	8c036401 	cfstrshi	mvf6, [r3], {1}
    fdc0:	0a000000 	beq	fdc8 <__exidx_end+0xa188>
    fdc4:	000038a2 	andeq	r3, r0, r2, lsr #17
    fdc8:	8c036501 	cfstr32hi	mvfx6, [r3], {1}
    fdcc:	00000000 	andeq	r0, r0, r0
    fdd0:	0038d408 	eorseq	sp, r8, r8, lsl #8
    fdd4:	8cb20200 	lfmhi	f0, 4, [r2]
    fdd8:	01000000 	mrseq	r0, (UNDEF: 0)
    fddc:	000001a3 	andeq	r0, r0, r3, lsr #3
    fde0:	0035bf09 	eorseq	fp, r5, r9, lsl #30
    fde4:	03940100 	orrseq	r0, r4, #0, 2
    fde8:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdec:	0037f00a 	eorseq	pc, r7, sl
    fdf0:	03960100 	orrseq	r0, r6, #0, 2
    fdf4:	0000008c 	andeq	r0, r0, ip, lsl #1
    fdf8:	0038a20a 	eorseq	sl, r8, sl, lsl #4
    fdfc:	03970100 	orrseq	r0, r7, #0, 2
    fe00:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe04:	379f0800 	ldrcc	r0, [pc, r0, lsl #16]
    fe08:	b9020000 	stmdblt	r2, {}	; <UNPREDICTABLE>
    fe0c:	0000008c 	andeq	r0, r0, ip, lsl #1
    fe10:	0001cc01 	andeq	ip, r1, r1, lsl #24
    fe14:	35bf0900 	ldrcc	r0, [pc, #2304]!	; 1071c <__exidx_end+0xaadc>
    fe18:	b4010000 	strlt	r0, [r1], #-0
    fe1c:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe20:	38ac0a00 	stmiacc	ip!, {r9, fp}
    fe24:	b6010000 	strlt	r0, [r1], -r0
    fe28:	00008c03 	andeq	r8, r0, r3, lsl #24
    fe2c:	4a080000 	bmi	20fe34 <__ccfg+0x1efe8c>
    fe30:	02000039 	andeq	r0, r0, #57	; 0x39
    fe34:	00008cdf 	ldrdeq	r8, [r0], -pc	; <UNPREDICTABLE>
    fe38:	01f50100 	mvnseq	r0, r0, lsl #2
    fe3c:	bf090000 	svclt	0x00090000
    fe40:	01000035 	tsteq	r0, r5, lsr r0
    fe44:	008c03c8 	addeq	r0, ip, r8, asr #7
    fe48:	890a0000 	stmdbhi	sl, {}	; <UNPREDICTABLE>
    fe4c:	0100003a 	tsteq	r0, sl, lsr r0
    fe50:	008c03ca 	addeq	r0, ip, sl, asr #7
    fe54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fe58:	00003a0a 	andeq	r3, r0, sl, lsl #20
    fe5c:	008cd702 	addeq	sp, ip, r2, lsl #14
    fe60:	12010000 	andne	r0, r1, #0
    fe64:	0a000002 	beq	fe74 <__exidx_end+0xa234>
    fe68:	00003b3c 	andeq	r3, r0, ip, lsr fp
    fe6c:	8c028301 	stchi	3, cr8, [r2], {1}
    fe70:	00000000 	andeq	r0, r0, r0
    fe74:	0012d20b 	andseq	sp, r2, fp, lsl #4
    fe78:	03c40300 	biceq	r0, r4, #0, 6
    fe7c:	003b190c 	eorseq	r1, fp, ip, lsl #18
    fe80:	010f0200 	mrseq	r0, (UNDEF: 47)
    fe84:	00003f8c 	andeq	r3, r0, ip, lsl #31
    fe88:	0000007c 	andeq	r0, r0, ip, ror r0
    fe8c:	02c49c01 	sbceq	r9, r4, #256	; 0x100
    fe90:	2b0d0000 	blcs	34fe98 <__ccfg+0x32fef0>
    fe94:	01000036 	tsteq	r0, r6, lsr r0
    fe98:	00008c7f 	andeq	r8, r0, pc, ror ip
    fe9c:	003f6000 	eorseq	r6, pc, r0
    fea0:	3b310700 	blcc	c51aa8 <__ccfg+0xc31b00>
    fea4:	81010000 	mrshi	r0, (UNDEF: 1)
    fea8:	0000008c 	andeq	r0, r0, ip, lsl #1
    feac:	0038c90e 	eorseq	ip, r8, lr, lsl #18
    feb0:	81820100 	orrhi	r0, r2, r0, lsl #2
    feb4:	01000000 	mrseq	r0, (UNDEF: 0)
    feb8:	373c0f52 			; <UNDEFINED> instruction: 0x373c0f52
    febc:	83010000 	movwhi	r0, #4096	; 0x1000
    fec0:	00000081 	andeq	r0, r0, r1, lsl #1
    fec4:	00003f81 	andeq	r3, r0, r1, lsl #31
    fec8:	00380a0f 	eorseq	r0, r8, pc, lsl #20
    fecc:	81840100 	orrhi	r0, r4, r0, lsl #2
    fed0:	94000000 	strls	r0, [r0], #-0
    fed4:	1000003f 	andne	r0, r0, pc, lsr r0
    fed8:	00000097 	muleq	r0, r7, r0
    fedc:	00003f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    fee0:	00001220 	andeq	r1, r0, r0, lsr #4
    fee4:	029b9701 	addseq	r9, fp, #262144	; 0x40000
    fee8:	a7110000 	ldrge	r0, [r1, -r0]
    feec:	12000000 	andne	r0, r0, #0
    fef0:	00001220 	andeq	r1, r0, r0, lsr #4
    fef4:	0000b213 	andeq	fp, r0, r3, lsl r2
    fef8:	00520100 	subseq	r0, r2, r0, lsl #2
    fefc:	00971400 	addseq	r1, r7, r0, lsl #8
    ff00:	3fa40000 	svccc	0x00a40000
    ff04:	00060000 	andeq	r0, r6, r0
    ff08:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    ff0c:	0000a711 	andeq	sl, r0, r1, lsl r7
    ff10:	3fa41500 	svccc	0x00a41500
    ff14:	00060000 	andeq	r0, r6, r0
    ff18:	b2160000 	andslt	r0, r6, #0
    ff1c:	c2000000 	andgt	r0, r0, #0
    ff20:	0000003f 	andeq	r0, r0, pc, lsr r0
    ff24:	e4170000 	ldr	r0, [r7], #-0
    ff28:	02000034 	andeq	r0, r0, #52	; 0x34
    ff2c:	0040086c 	subeq	r0, r0, ip, ror #16
    ff30:	0000ac00 	andeq	sl, r0, r0, lsl #24
    ff34:	439c0100 	orrsmi	r0, ip, #0, 2
    ff38:	0d000003 	stceq	0, cr0, [r0, #-12]
    ff3c:	0000362b 	andeq	r3, r0, fp, lsr #12
    ff40:	008cbf01 	addeq	fp, ip, r1, lsl #30
    ff44:	3fd50000 	svccc	0x00d50000
    ff48:	4b0f0000 	blmi	3cff50 <__ccfg+0x3affa8>
    ff4c:	0100003a 	tsteq	r0, sl, lsr r0
    ff50:	000081c1 	andeq	r8, r0, r1, asr #3
    ff54:	00400900 	subeq	r0, r0, r0, lsl #18
    ff58:	3b610f00 	blcc	1853b60 <__ccfg+0x1833bb8>
    ff5c:	c2010000 	andgt	r0, r1, #0
    ff60:	00000081 	andeq	r0, r0, r1, lsl #1
    ff64:	00004032 	andeq	r4, r0, r2, lsr r0
    ff68:	00009718 	andeq	r9, r0, r8, lsl r7
    ff6c:	00403e00 	subeq	r3, r0, r0, lsl #28
    ff70:	00000600 	andeq	r0, r0, r0, lsl #12
    ff74:	32ee0100 	rsccc	r0, lr, #0, 2
    ff78:	11000003 	tstne	r0, r3
    ff7c:	000000a7 	andeq	r0, r0, r7, lsr #1
    ff80:	00403e15 	subeq	r3, r0, r5, lsl lr
    ff84:	00000600 	andeq	r0, r0, r0, lsl #12
    ff88:	00b21600 	adcseq	r1, r2, r0, lsl #12
    ff8c:	40590000 	subsmi	r0, r9, r0
    ff90:	00000000 	andeq	r0, r0, r0
    ff94:	00402c19 	subeq	r2, r0, r9, lsl ip
    ff98:	00021a00 	andeq	r1, r2, r0, lsl #20
    ff9c:	50011a00 	andpl	r1, r1, r0, lsl #20
    ffa0:	00007402 	andeq	r7, r0, r2, lsl #8
    ffa4:	36e71b00 	strbtcc	r1, [r7], r0, lsl #22
    ffa8:	a4020000 	strge	r0, [r2], #-0
    ffac:	0000008c 	andeq	r0, r0, ip, lsl #1
    ffb0:	000040b4 	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
    ffb4:	0000005c 	andeq	r0, r0, ip, asr r0
    ffb8:	03bd9c01 			; <UNDEFINED> instruction: 0x03bd9c01
    ffbc:	2b1c0000 	blcs	70ffc4 <__ccfg+0x6f001c>
    ffc0:	01000036 	tsteq	r0, r6, lsr r0
    ffc4:	008c021f 	addeq	r0, ip, pc, lsl r2
    ffc8:	406c0000 	rsbmi	r0, ip, r0
    ffcc:	fb1d0000 	blx	74ffd6 <__ccfg+0x73002e>
    ffd0:	01000039 	tsteq	r0, r9, lsr r0
    ffd4:	008c0221 	addeq	r0, ip, r1, lsr #4
    ffd8:	408d0000 	addmi	r0, sp, r0
    ffdc:	fd1d0000 	ldc2	0, cr0, [sp, #-0]
    ffe0:	0100003a 	tsteq	r0, sl, lsr r0
    ffe4:	008c0222 	addeq	r0, ip, r2, lsr #4
    ffe8:	40a00000 	adcmi	r0, r0, r0
    ffec:	0b1d0000 	bleq	74fff4 <__ccfg+0x73004c>
    fff0:	0100003b 	tsteq	r0, fp, lsr r0
    fff4:	008c0223 	addeq	r0, ip, r3, lsr #4
    fff8:	40ee0000 	rscmi	r0, lr, r0
    fffc:	4a1d0000 	bmi	750004 <__ccfg+0x73005c>
   10000:	0100003b 	tsteq	r0, fp, lsr r0
   10004:	00810224 	addeq	r0, r1, r4, lsr #4
   10008:	41560000 	cmpmi	r6, r0
   1000c:	3c1d0000 	ldccc	0, cr0, [sp], {-0}
   10010:	0100003b 	tsteq	r0, fp, lsr r0
   10014:	008c0225 	addeq	r0, ip, r5, lsr #4
   10018:	41750000 	cmnmi	r5, r0
   1001c:	1b000000 	blne	10024 <__exidx_end+0xa3e4>
   10020:	0000391f 	andeq	r3, r0, pc, lsl r9
   10024:	008cc102 	addeq	ip, ip, r2, lsl #2
   10028:	41100000 	tstmi	r0, r0
   1002c:	00180000 	andseq	r0, r8, r0
   10030:	9c010000 	stcls	0, cr0, [r1], {-0}
   10034:	000003e7 	andeq	r0, r0, r7, ror #7
   10038:	003b3c1d 	eorseq	r3, fp, sp, lsl ip
   1003c:	02670100 	rsbeq	r0, r7, #0, 2
   10040:	0000008c 	andeq	r0, r0, ip, lsl #1
   10044:	0000419a 	muleq	r0, sl, r1
   10048:	01f51e00 	mvnseq	r1, r0, lsl #28
   1004c:	00000000 	andeq	r0, r0, r0
   10050:	00100000 	andseq	r0, r0, r0
   10054:	9c010000 	stcls	0, cr0, [r1], {-0}
   10058:	00000404 	andeq	r0, r0, r4, lsl #8
   1005c:	00020516 	andeq	r0, r2, r6, lsl r5
   10060:	0041c100 	subeq	ip, r1, r0, lsl #2
   10064:	4d1b0000 	ldcmi	0, cr0, [fp, #-0]
   10068:	02000038 	andeq	r0, r0, #56	; 0x38
   1006c:	00008c9d 	muleq	r0, sp, ip
   10070:	00412800 	subeq	r2, r1, r0, lsl #16
   10074:	00001000 	andeq	r1, r0, r0
   10078:	3e9c0100 	fmlcce	f0, f4, f0
   1007c:	1d000004 	stcne	0, cr0, [r0, #-16]
   10080:	00003b3c 	andeq	r3, r0, ip, lsr fp
   10084:	8c029701 	stchi	7, cr9, [r2], {1}
   10088:	da000000 	ble	10090 <__exidx_end+0xa450>
   1008c:	1d000041 	stcne	0, cr0, [r0, #-260]	; 0xfffffefc
   10090:	000039fb 	strdeq	r3, [r0], -fp
   10094:	8c029801 	stchi	8, cr9, [r2], {1}
   10098:	fb000000 	blx	100a2 <__exidx_end+0xa462>
   1009c:	00000041 	andeq	r0, r0, r1, asr #32
   100a0:	00382d1b 	eorseq	r2, r8, fp, lsl sp
   100a4:	8c960200 	lfmhi	f0, 4, [r6], {0}
   100a8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   100ac:	14000041 	strne	r0, [r0], #-65	; 0xffffffbf
   100b0:	01000000 	mrseq	r0, (UNDEF: 0)
   100b4:	0004789c 	muleq	r4, ip, r8
   100b8:	3b3c1d00 	blcc	f174c0 <__ccfg+0xef7518>
   100bc:	ba010000 	blt	500c4 <__ccfg+0x3011c>
   100c0:	00008c02 	andeq	r8, r0, r2, lsl #24
   100c4:	00420e00 	subeq	r0, r2, r0, lsl #28
   100c8:	39fb1d00 	ldmibcc	fp!, {r8, sl, fp, ip}^
   100cc:	bb010000 	bllt	500d4 <__ccfg+0x3012c>
   100d0:	00008c02 	andeq	r8, r0, r2, lsl #24
   100d4:	00422f00 	subeq	r2, r2, r0, lsl #30
   100d8:	dc1b0000 	ldcle	0, cr0, [fp], {-0}
   100dc:	0200003a 	andeq	r0, r0, #58	; 0x3a
   100e0:	00008c8f 	andeq	r8, r0, pc, lsl #25
   100e4:	00414c00 	subeq	r4, r1, r0, lsl #24
   100e8:	00006400 	andeq	r6, r0, r0, lsl #8
   100ec:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
   100f0:	1c000004 	stcne	0, cr0, [r0], {4}
   100f4:	000035bf 			; <UNDEFINED> instruction: 0x000035bf
   100f8:	8c02db01 			; <UNDEFINED> instruction: 0x8c02db01
   100fc:	42000000 	andmi	r0, r0, #0
   10100:	1d000042 	stcne	0, cr0, [r0, #-264]	; 0xfffffef8
   10104:	00003b3c 	andeq	r3, r0, ip, lsr fp
   10108:	8c02dd01 	stchi	13, cr13, [r2], {1}
   1010c:	63000000 	movwvs	r0, #0
   10110:	1d000042 	stcne	0, cr0, [r0, #-264]	; 0xfffffef8
   10114:	000039fb 	strdeq	r3, [r0], -fp
   10118:	8c02de01 	stchi	14, cr13, [r2], {1}
   1011c:	97000000 	strls	r0, [r0, -r0]
   10120:	1d000042 	stcne	0, cr0, [r0, #-264]	; 0xfffffef8
   10124:	00003755 	andeq	r3, r0, r5, asr r7
   10128:	8c02df01 	stchi	15, cr13, [r2], {1}
   1012c:	aa000000 	bge	10134 <__exidx_end+0xa4f4>
   10130:	1d000042 	stcne	0, cr0, [r0, #-264]	; 0xfffffef8
   10134:	00003ab4 			; <UNDEFINED> instruction: 0x00003ab4
   10138:	8c02e001 	stchi	0, cr14, [r2], {1}
   1013c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
   10140:	0a000042 	beq	10250 <__exidx_end+0xa610>
   10144:	000039f1 	strdeq	r3, [r0], -r1
   10148:	8c02e101 	stfhid	f6, [r2], {1}
   1014c:	1d000000 	stcne	0, cr0, [r0, #-0]
   10150:	000037c5 	andeq	r3, r0, r5, asr #15
   10154:	8102e201 	tsthi	r2, r1, lsl #4
   10158:	06000000 	streq	r0, [r0], -r0
   1015c:	00000043 	andeq	r0, r0, r3, asr #32
   10160:	0000be1e 	andeq	fp, r0, lr, lsl lr
   10164:	0041b000 	subeq	fp, r1, r0
   10168:	00001400 	andeq	r1, r0, r0, lsl #8
   1016c:	4a9c0100 	bmi	fe710574 <_estack+0xde70b574>
   10170:	1f000005 	svcne	0x00000005
   10174:	000000ce 	andeq	r0, r0, lr, asr #1
   10178:	00004381 	andeq	r4, r0, r1, lsl #7
   1017c:	0000da16 	andeq	sp, r0, r6, lsl sl
   10180:	0043a200 	subeq	sl, r3, r0, lsl #4
   10184:	41b21500 			; <UNDEFINED> instruction: 0x41b21500
   10188:	000a0000 	andeq	r0, sl, r0
   1018c:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
   10190:	c1000000 	mrsgt	r0, (UNDEF: 0)
   10194:	15000043 	strne	r0, [r0, #-67]	; 0xffffffbd
   10198:	000041b2 			; <UNDEFINED> instruction: 0x000041b2
   1019c:	0000000a 	andeq	r0, r0, sl
   101a0:	0000da16 	andeq	sp, r0, r6, lsl sl
   101a4:	0043e200 	subeq	lr, r3, r0, lsl #4
   101a8:	00000000 	andeq	r0, r0, r0
   101ac:	0000e71e 	andeq	lr, r0, lr, lsl r7
   101b0:	0041c400 	subeq	ip, r1, r0, lsl #8
   101b4:	00001400 	andeq	r1, r0, r0, lsl #8
   101b8:	969c0100 	ldrls	r0, [ip], r0, lsl #2
   101bc:	1f000005 	svcne	0x00000005
   101c0:	000000f7 	strdeq	r0, [r0], -r7
   101c4:	000043f5 	strdeq	r4, [r0], -r5
   101c8:	00010316 	andeq	r0, r1, r6, lsl r3
   101cc:	00441600 	subeq	r1, r4, r0, lsl #12
   101d0:	41c61500 	bicmi	r1, r6, r0, lsl #10
   101d4:	000a0000 	andeq	r0, sl, r0
   101d8:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
   101dc:	35000000 	strcc	r0, [r0, #-0]
   101e0:	15000044 	strne	r0, [r0, #-68]	; 0xffffffbc
   101e4:	000041c6 	andeq	r4, r0, r6, asr #3
   101e8:	0000000a 	andeq	r0, r0, sl
   101ec:	00010316 	andeq	r0, r1, r6, lsl r3
   101f0:	00445600 	subeq	r5, r4, r0, lsl #12
   101f4:	00000000 	andeq	r0, r0, r0
   101f8:	0001101e 	andeq	r1, r1, lr, lsl r0
   101fc:	0041d800 	subeq	sp, r1, r0, lsl #16
   10200:	00001400 	andeq	r1, r0, r0, lsl #8
   10204:	e29c0100 	adds	r0, ip, #0, 2
   10208:	1f000005 	svcne	0x00000005
   1020c:	00000120 	andeq	r0, r0, r0, lsr #2
   10210:	00004469 	andeq	r4, r0, r9, ror #8
   10214:	00012c16 	andeq	r2, r1, r6, lsl ip
   10218:	00448a00 	subeq	r8, r4, r0, lsl #20
   1021c:	41da1500 	bicsmi	r1, sl, r0, lsl #10
   10220:	000a0000 	andeq	r0, sl, r0
   10224:	201f0000 	andscs	r0, pc, r0
   10228:	a9000001 	stmdbge	r0, {r0}
   1022c:	15000044 	strne	r0, [r0, #-68]	; 0xffffffbc
   10230:	000041da 	ldrdeq	r4, [r0], -sl
   10234:	0000000a 	andeq	r0, r0, sl
   10238:	00012c16 	andeq	r2, r1, r6, lsl ip
   1023c:	0044ca00 	subeq	ip, r4, r0, lsl #20
   10240:	00000000 	andeq	r0, r0, r0
   10244:	0001391e 	andeq	r3, r1, lr, lsl r9
   10248:	0041ec00 	subeq	lr, r1, r0, lsl #24
   1024c:	00002800 	andeq	r2, r0, r0, lsl #16
   10250:	3c9c0100 	ldfccs	f0, [ip], {0}
   10254:	1f000006 	svcne	0x00000006
   10258:	00000149 	andeq	r0, r0, r9, asr #2
   1025c:	000044dd 	ldrdeq	r4, [r0], -sp
   10260:	00015516 	andeq	r5, r1, r6, lsl r5
   10264:	0044fe00 	subeq	pc, r4, r0, lsl #28
   10268:	01612000 	cmneq	r1, r0
   1026c:	ee150000 	cdp	0, 1, cr0, cr5, cr0, {0}
   10270:	1c000041 	stcne	0, cr0, [r0], {65}	; 0x41
   10274:	1f000000 	svcne	0x00000000
   10278:	00000149 	andeq	r0, r0, r9, asr #2
   1027c:	0000451d 	andeq	r4, r0, sp, lsl r5
   10280:	0041ee15 	subeq	lr, r1, r5, lsl lr
   10284:	00001c00 	andeq	r1, r0, r0, lsl #24
   10288:	01551600 	cmpeq	r5, r0, lsl #12
   1028c:	453e0000 	ldrmi	r0, [lr, #-0]!
   10290:	61160000 	tstvs	r6, r0
   10294:	6b000001 	blvs	102a0 <__exidx_end+0xa660>
   10298:	00000045 	andeq	r0, r0, r5, asr #32
   1029c:	7a1b0000 	bvc	6d02a4 <__ccfg+0x6b02fc>
   102a0:	02000037 	andeq	r0, r0, #55	; 0x37
   102a4:	00008ccf 	andeq	r8, r0, pc, asr #25
   102a8:	00421400 	subeq	r1, r2, r0, lsl #8
   102ac:	00001000 	andeq	r1, r0, r0
   102b0:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
   102b4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
   102b8:	00003814 	andeq	r3, r0, r4, lsl r8
   102bc:	8c038401 	cfstrshi	mvf8, [r3], {1}
   102c0:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
   102c4:	00000045 	andeq	r0, r0, r5, asr #32
   102c8:	00016e1e 	andeq	r6, r1, lr, lsl lr
   102cc:	00422400 	subeq	r2, r2, r0, lsl #8
   102d0:	00002c00 	andeq	r2, r0, r0, lsl #24
   102d4:	c09c0100 	addsgt	r0, ip, r0, lsl #2
   102d8:	1f000006 	svcne	0x00000006
   102dc:	0000017e 	andeq	r0, r0, lr, ror r1
   102e0:	00004599 	muleq	r0, r9, r5
   102e4:	00018a16 	andeq	r8, r1, r6, lsl sl
   102e8:	0045ba00 	subeq	fp, r5, r0, lsl #20
   102ec:	01962000 	orrseq	r2, r6, r0
   102f0:	26150000 	ldrcs	r0, [r5], -r0
   102f4:	1e000042 	cdpne	0, 0, cr0, cr0, cr2, {2}
   102f8:	1f000000 	svcne	0x00000000
   102fc:	0000017e 	andeq	r0, r0, lr, ror r1
   10300:	000045dd 	ldrdeq	r4, [r0], -sp
   10304:	00422615 	subeq	r2, r2, r5, lsl r6
   10308:	00001e00 	andeq	r1, r0, r0, lsl #28
   1030c:	018a1600 	orreq	r1, sl, r0, lsl #12
   10310:	45fe0000 	ldrbmi	r0, [lr, #0]!
   10314:	96160000 	ldrls	r0, [r6], -r0
   10318:	2b000001 	blcs	10324 <__exidx_end+0xa6e4>
   1031c:	00000046 	andeq	r0, r0, r6, asr #32
   10320:	a31e0000 	tstge	lr, #0
   10324:	50000001 	andpl	r0, r0, r1
   10328:	14000042 	strne	r0, [r0], #-66	; 0xffffffbe
   1032c:	01000000 	mrseq	r0, (UNDEF: 0)
   10330:	00070c9c 	muleq	r7, ip, ip
   10334:	01b31f00 			; <UNDEFINED> instruction: 0x01b31f00
   10338:	463e0000 	ldrtmi	r0, [lr], -r0
   1033c:	bf160000 	svclt	0x00160000
   10340:	5f000001 	svcpl	0x00000001
   10344:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
   10348:	00004252 	andeq	r4, r0, r2, asr r2
   1034c:	0000000a 	andeq	r0, r0, sl
   10350:	0001b31f 	andeq	fp, r1, pc, lsl r3
   10354:	00467e00 	subeq	r7, r6, r0, lsl #28
   10358:	42521500 	subsmi	r1, r2, #0, 10
   1035c:	000a0000 	andeq	r0, sl, r0
   10360:	bf160000 	svclt	0x00160000
   10364:	9f000001 	svcls	0x00000001
   10368:	00000046 	andeq	r0, r0, r6, asr #32
   1036c:	cc1e0000 	ldcgt	0, cr0, [lr], {-0}
   10370:	64000001 	strvs	r0, [r0], #-1
   10374:	14000042 	strne	r0, [r0], #-66	; 0xffffffbe
   10378:	01000000 	mrseq	r0, (UNDEF: 0)
   1037c:	0007589c 	muleq	r7, ip, r8
   10380:	01dc1f00 	bicseq	r1, ip, r0, lsl #30
   10384:	46b20000 	ldrtmi	r0, [r2], r0
   10388:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
   1038c:	d3000001 	movwle	r0, #1
   10390:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
   10394:	00004266 	andeq	r4, r0, r6, ror #4
   10398:	0000000a 	andeq	r0, r0, sl
   1039c:	0001dc1f 	andeq	sp, r1, pc, lsl ip
   103a0:	0046f200 	subeq	pc, r6, r0, lsl #4
   103a4:	42661500 	rsbmi	r1, r6, #0, 10
   103a8:	000a0000 	andeq	r0, sl, r0
   103ac:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
   103b0:	13000001 	movwne	r0, #1
   103b4:	00000047 	andeq	r0, r0, r7, asr #32
   103b8:	14170000 	ldrne	r0, [r7], #-0
   103bc:	02000035 	andeq	r0, r0, #53	; 0x35
   103c0:	00427873 	subeq	r7, r2, r3, ror r8
   103c4:	00011000 	andeq	r1, r1, r0
   103c8:	639c0100 	orrsvs	r0, ip, #0, 2
   103cc:	1c000009 	stcne	0, cr0, [r0], {9}
   103d0:	000035bf 			; <UNDEFINED> instruction: 0x000035bf
   103d4:	8c012701 	stchi	7, cr2, [r1], {1}
   103d8:	26000000 	strcs	r0, [r0], -r0
   103dc:	1c000047 	stcne	0, cr0, [r0], {71}	; 0x47
   103e0:	0000362b 	andeq	r3, r0, fp, lsr #12
   103e4:	8c012701 	stchi	7, cr2, [r1], {1}
   103e8:	52000000 	andpl	r0, r0, #0
   103ec:	1d000047 	stcne	0, cr0, [r0, #-284]	; 0xfffffee4
   103f0:	0000397e 	andeq	r3, r0, lr, ror r9
   103f4:	8c012901 			; <UNDEFINED> instruction: 0x8c012901
   103f8:	73000000 	movwvc	r0, #0
   103fc:	21000047 	tstcs	r0, r7, asr #32
   10400:	000001f5 	strdeq	r0, [r0], -r5
   10404:	000042a8 	andeq	r4, r0, r8, lsr #5
   10408:	00001238 	andeq	r1, r0, r8, lsr r2
   1040c:	c1014001 	tstgt	r1, r1
   10410:	12000007 	andne	r0, r0, #7
   10414:	00001238 	andeq	r1, r0, r8, lsr r2
   10418:	00020516 	andeq	r0, r2, r6, lsl r5
   1041c:	00484100 	subeq	r4, r8, r0, lsl #2
   10420:	22000000 	andcs	r0, r0, #0
   10424:	00004282 	andeq	r4, r0, r2, lsl #5
   10428:	00000343 	andeq	r0, r0, r3, asr #6
   1042c:	000007d6 	ldrdeq	r0, [r0], -r6
   10430:	0350011a 	cmpeq	r0, #-2147483642	; 0x80000006
   10434:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
   10438:	00428e22 	subeq	r8, r2, r2, lsr #28
   1043c:	000ad600 	andeq	sp, sl, r0, lsl #12
   10440:	0007ef00 	andeq	lr, r7, r0, lsl #30
   10444:	51011a00 	tstpl	r1, r0, lsl #20
   10448:	011a4801 	tsteq	sl, r1, lsl #16
   1044c:	00740250 	rsbseq	r0, r4, r0, asr r2
   10450:	42922300 	addsmi	r2, r2, #0, 6
   10454:	03bd0000 			; <UNDEFINED> instruction: 0x03bd0000
   10458:	a8240000 	stmdage	r4!, {}	; <UNPREDICTABLE>
   1045c:	02000042 	andeq	r0, r0, #66	; 0x42
   10460:	081d0076 	ldmdaeq	sp, {r1, r2, r4, r5, r6}
   10464:	011a0000 	tsteq	sl, r0
   10468:	1a300153 	bne	c109bc <__ccfg+0xbf0a14>
   1046c:	0a035201 	beq	e4c78 <__ccfg+0xc4cd0>
   10470:	011a03ff 			; <UNDEFINED> instruction: 0x011a03ff
   10474:	2c080251 	sfmcs	f0, 4, [r8], {81}	; 0x51
   10478:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   1047c:	22000074 	andcs	r0, r0, #116	; 0x74
   10480:	000042b8 			; <UNDEFINED> instruction: 0x000042b8
   10484:	00000ad6 	ldrdeq	r0, [r0], -r6
   10488:	00000836 	andeq	r0, r0, r6, lsr r8
   1048c:	0151011a 	cmpeq	r1, sl, lsl r1
   10490:	50011a4c 	andpl	r1, r1, ip, asr #20
   10494:	00007402 	andeq	r7, r0, r2, lsl #8
   10498:	0042bc23 	subeq	fp, r2, r3, lsr #24
   1049c:	00040400 	andeq	r0, r4, r0, lsl #8
   104a0:	42c62200 	sbcmi	r2, r6, #0, 4
   104a4:	0ad60000 	beq	ff5904ac <_estack+0xdf58b4ac>
   104a8:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
   104ac:	011a0000 	tsteq	sl, r0
   104b0:	1a440151 	bne	11109fc <__ccfg+0x10f0a54>
   104b4:	74025001 	strvc	r5, [r2], #-1
   104b8:	ca230000 	bgt	8d04c0 <__ccfg+0x8b0518>
   104bc:	3e000042 	cdpcc	0, 0, cr0, cr0, cr2, {2}
   104c0:	22000004 	andcs	r0, r0, #4
   104c4:	000042d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   104c8:	00000ad6 	ldrdeq	r0, [r0], -r6
   104cc:	0000087a 	andeq	r0, r0, sl, ror r8
   104d0:	0151011a 	cmpeq	r1, sl, lsl r1
   104d4:	50011a40 	andpl	r1, r1, r0, asr #20
   104d8:	00007402 	andeq	r7, r0, r2, lsl #8
   104dc:	0042da22 	subeq	sp, r2, r2, lsr #20
   104e0:	00047800 	andeq	r7, r4, r0, lsl #16
   104e4:	00088e00 	andeq	r8, r8, r0, lsl #28
   104e8:	50011a00 	andpl	r1, r1, r0, lsl #20
   104ec:	00007502 	andeq	r7, r0, r2, lsl #10
   104f0:	0042e422 	subeq	lr, r2, r2, lsr #8
   104f4:	000ad600 	andeq	sp, sl, r0, lsl #12
   104f8:	0008a700 	andeq	sl, r8, r0, lsl #14
   104fc:	51011a00 	tstpl	r1, r0, lsl #20
   10500:	011a3c01 	tsteq	sl, r1, lsl #24
   10504:	00740250 	rsbseq	r0, r4, r0, asr r2
   10508:	42ea2200 	rscmi	r2, sl, #0, 4
   1050c:	00e70000 	rsceq	r0, r7, r0
   10510:	08bb0000 	ldmeq	fp!, {}	; <UNPREDICTABLE>
   10514:	011a0000 	tsteq	sl, r0
   10518:	00750250 	rsbseq	r0, r5, r0, asr r2
   1051c:	42fc2200 	rscsmi	r2, ip, #0, 4
   10520:	01100000 	tsteq	r0, r0
   10524:	08cf0000 	stmiaeq	pc, {}^	; <UNPREDICTABLE>
   10528:	011a0000 	tsteq	sl, r0
   1052c:	00750250 	rsbseq	r0, r5, r0, asr r2
   10530:	430a2200 	movwmi	r2, #41472	; 0xa200
   10534:	01390000 	teqeq	r9, r0
   10538:	08e30000 	stmiaeq	r3!, {}^	; <UNPREDICTABLE>
   1053c:	011a0000 	tsteq	sl, r0
   10540:	00750250 	rsbseq	r0, r5, r0, asr r2
   10544:	43142200 	tstmi	r4, #0, 4
   10548:	0ad60000 	beq	ff590550 <_estack+0xdf58b550>
   1054c:	08fd0000 	ldmeq	sp!, {}^	; <UNPREDICTABLE>
   10550:	011a0000 	tsteq	sl, r0
   10554:	28080251 	stmdacs	r8, {r0, r4, r6, r9}
   10558:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   1055c:	22000074 	andcs	r0, r0, #116	; 0x74
   10560:	0000431a 	andeq	r4, r0, sl, lsl r3
   10564:	000000be 	strheq	r0, [r0], -lr
   10568:	00000911 	andeq	r0, r0, r1, lsl r9
   1056c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10570:	22000075 	andcs	r0, r0, #117	; 0x75
   10574:	0000432c 	andeq	r4, r0, ip, lsr #6
   10578:	000001a3 	andeq	r0, r0, r3, lsr #3
   1057c:	00000925 	andeq	r0, r0, r5, lsr #18
   10580:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10584:	22000075 	andcs	r0, r0, #117	; 0x75
   10588:	0000433e 	andeq	r4, r0, lr, lsr r3
   1058c:	000001cc 	andeq	r0, r0, ip, asr #3
   10590:	00000939 	andeq	r0, r0, r9, lsr r9
   10594:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   10598:	22000075 	andcs	r0, r0, #117	; 0x75
   1059c:	00004352 	andeq	r4, r0, r2, asr r3
   105a0:	0000016e 	andeq	r0, r0, lr, ror #2
   105a4:	0000094d 	andeq	r0, r0, sp, asr #18
   105a8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
   105ac:	19000075 	stmdbne	r0, {r0, r2, r4, r5, r6}
   105b0:	0000435c 	andeq	r4, r0, ip, asr r3
   105b4:	00000ad6 	ldrdeq	r0, [r0], -r6
   105b8:	0151011a 	cmpeq	r1, sl, lsl r1
   105bc:	50011a38 	andpl	r1, r1, r8, lsr sl
   105c0:	00007402 	andeq	r7, r0, r2, lsl #8
   105c4:	35911700 	ldrcc	r1, [r1, #1792]	; 0x700
   105c8:	fd020000 	stc2	0, cr0, [r2, #-0]
   105cc:	00004388 	andeq	r4, r0, r8, lsl #7
   105d0:	00000064 	andeq	r0, r0, r4, rrx
   105d4:	09899c01 	stmibeq	r9, {r0, sl, fp, ip, pc}
   105d8:	481d0000 	ldmdami	sp, {}	; <UNPREDICTABLE>
   105dc:	01000037 	tsteq	r0, r7, lsr r0
   105e0:	008c03eb 	addeq	r0, ip, fp, ror #7
   105e4:	485a0000 	ldmdami	sl, {}^	; <UNPREDICTABLE>
   105e8:	0c000000 	stceq	0, cr0, [r0], {-0}
   105ec:	00003abe 			; <UNDEFINED> instruction: 0x00003abe
   105f0:	ec010602 	stc	6, cr0, [r1], {2}
   105f4:	28000043 	stmdacs	r0, {r0, r1, r6}
   105f8:	01000000 	mrseq	r0, (UNDEF: 0)
   105fc:	0009b09c 	muleq	r9, ip, r0
   10600:	39151c00 	ldmdbcc	r5, {sl, fp, ip}
   10604:	13010000 	movwne	r0, #4096	; 0x1000
   10608:	00008c04 	andeq	r8, r0, r4, lsl #24
   1060c:	00487500 	subeq	r7, r8, r0, lsl #10
   10610:	44170000 	ldrmi	r0, [r7], #-0
   10614:	02000035 	andeq	r0, r0, #53	; 0x35
   10618:	0044147a 	subeq	r1, r4, sl, ror r4
   1061c:	00015000 	andeq	r5, r1, r0
   10620:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
   10624:	1c00000a 	stcne	0, cr0, [r0], {10}
   10628:	0000362b 	andeq	r3, r0, fp, lsr #12
   1062c:	8c019b01 			; <UNDEFINED> instruction: 0x8c019b01
   10630:	96000000 	strls	r0, [r0], -r0
   10634:	1d000048 	stcne	0, cr0, [r0, #-288]	; 0xfffffee0
   10638:	00003a5c 	andeq	r3, r0, ip, asr sl
   1063c:	8c019d01 	stchi	13, cr9, [r1], {1}
   10640:	f1000000 	cps	#0
   10644:	1d000048 	stcne	0, cr0, [r0, #-288]	; 0xfffffee0
   10648:	0000397e 	andeq	r3, r0, lr, ror r9
   1064c:	8c019e01 	stchi	14, cr9, [r1], {1}
   10650:	04000000 	streq	r0, [r0], #-0
   10654:	1d000049 	stcne	0, cr0, [r0, #-292]	; 0xfffffedc
   10658:	000036c8 	andeq	r3, r0, r8, asr #13
   1065c:	8c019f01 	stchi	15, cr9, [r1], {1}
   10660:	17000000 	strne	r0, [r0, -r0]
   10664:	1d000049 	stcne	0, cr0, [r0, #-292]	; 0xfffffedc
   10668:	000036bb 			; <UNDEFINED> instruction: 0x000036bb
   1066c:	8c01a001 	stchi	0, cr10, [r1], {1}
   10670:	35000000 	strcc	r0, [r0, #-0]
   10674:	25000049 	strcs	r0, [r0, #-73]	; 0xffffffb7
   10678:	00000212 	andeq	r0, r0, r2, lsl r2
   1067c:	00004526 	andeq	r4, r0, r6, lsr #10
   10680:	0000003e 	andeq	r0, r0, lr, lsr r0
   10684:	23021601 	movwcs	r1, #9729	; 0x2601
   10688:	0000449e 	muleq	r0, lr, r4
   1068c:	0000063c 	andeq	r0, r0, ip, lsr r6
   10690:	0044c022 	subeq	ip, r4, r2, lsr #32
   10694:	000af200 	andeq	pc, sl, r0, lsl #4
   10698:	000a4600 	andeq	r4, sl, r0, lsl #12
   1069c:	51011a00 	tstpl	r1, r0, lsl #20
   106a0:	011a3101 	tsteq	sl, r1, lsl #2
   106a4:	00340150 	eorseq	r0, r4, r0, asr r1
   106a8:	0044c622 	subeq	ip, r4, r2, lsr #12
   106ac:	00098900 	andeq	r8, r9, r0, lsl #18
   106b0:	000a5d00 	andeq	r5, sl, r0, lsl #26
   106b4:	50011a00 	andpl	r1, r1, r0, lsl #20
   106b8:	37bd0c05 	ldrcc	r0, [sp, r5, lsl #24]!
   106bc:	23000086 	movwcs	r0, #134	; 0x86
   106c0:	000044cc 	andeq	r4, r0, ip, asr #9
   106c4:	00000b08 	andeq	r0, r0, r8, lsl #22
   106c8:	0044d622 	subeq	sp, r4, r2, lsr #12
   106cc:	000af200 	andeq	pc, sl, r0, lsl #4
   106d0:	000a7f00 	andeq	r7, sl, r0, lsl #30
   106d4:	51011a00 	tstpl	r1, r0, lsl #20
   106d8:	1a007402 	bne	2d6e8 <__ccfg+0xd740>
   106dc:	34015001 	strcc	r5, [r1], #-1
   106e0:	44dc2200 	ldrbmi	r2, [ip], #512	; 0x200
   106e4:	0b080000 	bleq	2106ec <__ccfg+0x1f0744>
   106e8:	0a920000 	beq	fe4906f0 <_estack+0xde48b6f0>
   106ec:	011a0000 	tsteq	sl, r0
   106f0:	00340150 	eorseq	r0, r4, r0, asr r1
   106f4:	0044ec22 	subeq	lr, r4, r2, lsr #24
   106f8:	00098900 	andeq	r8, r9, r0, lsl #18
   106fc:	000aac00 	andeq	sl, sl, r0, lsl #24
   10700:	50011a00 	andpl	r1, r1, r0, lsl #20
   10704:	0c007408 	cfstrseq	mvf7, [r0], {8}
   10708:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1070c:	fc26001a 	stc2	0, cr0, [r6], #-104	; 0xffffff98
   10710:	cc000044 	stcgt	0, cr0, [r0], {68}	; 0x44
   10714:	1a00000a 	bne	10744 <__exidx_end+0xab04>
   10718:	0c055201 	sfmeq	f5, 4, [r5], {1}
   1071c:	60006000 	andvs	r6, r0, r0
   10720:	0151011a 	cmpeq	r1, sl, lsl r1
   10724:	50011a37 	andpl	r1, r1, r7, lsr sl
   10728:	48007404 	stmdami	r0, {r2, sl, ip, sp, lr}
   1072c:	12230025 	eorne	r0, r3, #37	; 0x25
   10730:	f2000045 	vhadd.s8	q0, q0, <illegal reg q2.5>
   10734:	0000000a 	andeq	r0, r0, sl
   10738:	00388e27 	eorseq	r8, r8, r7, lsr #28
   1073c:	01ca0600 	biceq	r0, sl, r0, lsl #12
   10740:	00000af2 	strdeq	r0, [r0], -r2
   10744:	00008c28 	andeq	r8, r0, r8, lsr #24
   10748:	008c2800 	addeq	r2, ip, r0, lsl #16
   1074c:	8c280000 	stchi	0, cr0, [r8], #-0
   10750:	00000000 	andeq	r0, r0, r0
   10754:	002d1d29 	eoreq	r1, sp, r9, lsr #26
   10758:	08f90700 	ldmeq	r9!, {r8, r9, sl}^
   1075c:	2800000b 	stmdacs	r0, {r0, r1, r3}
   10760:	0000008c 	andeq	r0, r0, ip, lsl #1
   10764:	00008c28 	andeq	r8, r0, r8, lsr #24
   10768:	562a0000 	strtpl	r0, [sl], -r0
   1076c:	0700002d 	streq	r0, [r0, -sp, lsr #32]
   10770:	008c0110 	addeq	r0, ip, r0, lsl r1
   10774:	8c280000 	stchi	0, cr0, [r8], #-0
   10778:	00000000 	andeq	r0, r0, r0
   1077c:	00092300 	andeq	r2, r9, r0, lsl #6
   10780:	b0000400 	andlt	r0, r0, r0, lsl #8
   10784:	0400003b 	streq	r0, [r0], #-59	; 0xffffffc5
   10788:	002a3f01 	eoreq	r3, sl, r1, lsl #30
   1078c:	3c050100 	stfccs	f0, [r5], {-0}
   10790:	2b060000 	blcs	190798 <__ccfg+0x1707f0>
   10794:	13280000 			; <UNDEFINED> instruction: 0x13280000
   10798:	00000000 	andeq	r0, r0, r0
   1079c:	86d20000 	ldrbhi	r0, [r2], r0
   107a0:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
   107a4:	0600002b 	streq	r0, [r0], -fp, lsr #32
   107a8:	0000301b 	andeq	r3, r0, fp, lsl r0
   107ac:	06010300 	streq	r0, [r1], -r0, lsl #6
   107b0:	00000c5d 	andeq	r0, r0, sp, asr ip
   107b4:	002a1a02 	eoreq	r1, sl, r2, lsl #20
   107b8:	421d0600 	andsmi	r0, sp, #0, 12
   107bc:	03000000 	movweq	r0, #0
   107c0:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
   107c4:	02030000 	andeq	r0, r3, #0
   107c8:	000a6b05 	andeq	r6, sl, r5, lsl #22
   107cc:	2e100200 	cdpcs	2, 1, cr0, cr0, cr0, {0}
   107d0:	2b060000 	blcs	1907d8 <__ccfg+0x170830>
   107d4:	0000005b 	andeq	r0, r0, fp, asr r0
   107d8:	66070203 	strvs	r0, [r7], -r3, lsl #4
   107dc:	0200000d 	andeq	r0, r0, #13
   107e0:	00002b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
   107e4:	006d3f06 	rsbeq	r3, sp, r6, lsl #30
   107e8:	04030000 	streq	r0, [r3], #-0
   107ec:	0007fd05 	andeq	pc, r7, r5, lsl #26
   107f0:	29b20200 	ldmibcs	r2!, {r9}
   107f4:	41060000 	mrsmi	r0, (UNDEF: 6)
   107f8:	0000007f 	andeq	r0, r0, pc, ror r0
   107fc:	26070403 	strcs	r0, [r7], -r3, lsl #8
   10800:	03000004 	movweq	r0, #4
   10804:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
   10808:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   1080c:	00042107 	andeq	r2, r4, r7, lsl #2
   10810:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   10814:	00746e69 	rsbseq	r6, r4, r9, ror #28
   10818:	2b070403 	blcs	1d182c <__ccfg+0x1b1884>
   1081c:	02000004 	andeq	r0, r0, #4
   10820:	00002bab 	andeq	r2, r0, fp, lsr #23
   10824:	00251307 	eoreq	r1, r5, r7, lsl #6
   10828:	1c020000 	stcne	0, cr0, [r2], {-0}
   1082c:	0700002a 	streq	r0, [r0, -sl, lsr #32]
   10830:	00003714 	andeq	r3, r0, r4, lsl r7
   10834:	2e120200 	cdpcs	2, 1, cr0, cr2, cr0, {0}
   10838:	1a070000 	bne	1d0840 <__ccfg+0x1b0898>
   1083c:	00000050 	andeq	r0, r0, r0, asr r0
   10840:	002ba102 	eoreq	sl, fp, r2, lsl #2
   10844:	621f0700 	andsvs	r0, pc, #0, 14
   10848:	02000000 	andeq	r0, r0, #0
   1084c:	000029b4 			; <UNDEFINED> instruction: 0x000029b4
   10850:	00742007 	rsbseq	r2, r4, r7
   10854:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   10858:	08000029 	stmdaeq	r0, {r0, r3, r5}
   1085c:	0000e433 	andeq	lr, r0, r3, lsr r4
   10860:	ea040500 	b	111c68 <__ccfg+0xf1cc0>
   10864:	06000000 	streq	r0, [r0], -r0
   10868:	00f10405 	rscseq	r0, r1, r5, lsl #8
   1086c:	fc070000 	stc2	0, cr0, [r7], {-0}
   10870:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10874:	000000ad 	andeq	r0, r0, sp, lsr #1
   10878:	31140200 	tstcc	r4, r0, lsl #4
   1087c:	42090000 	andmi	r0, r9, #0
   10880:	00000107 	andeq	r0, r0, r7, lsl #2
   10884:	010d0405 	tsteq	sp, r5, lsl #8
   10888:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
   1088c:	26000000 	strcs	r0, [r0], -r0
   10890:	08000001 	stmdaeq	r0, {r0}
   10894:	00000126 	andeq	r0, r0, r6, lsr #2
   10898:	0000ce08 	andeq	ip, r0, r8, lsl #28
   1089c:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   108a0:	05000000 	streq	r0, [r0, #-0]
   108a4:	0000ad04 	andeq	sl, r0, r4, lsl #26
   108a8:	327c0200 	rsbscc	r0, ip, #0, 4
   108ac:	46090000 	strmi	r0, [r9], -r0
   108b0:	00000137 	andeq	r0, r0, r7, lsr r1
   108b4:	013d0405 	teqeq	sp, r5, lsl #8
   108b8:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
   108bc:	02000000 	andeq	r0, r0, #0
   108c0:	000032c5 	andeq	r3, r0, r5, asr #5
   108c4:	01374809 	teqeq	r7, r9, lsl #16
   108c8:	ac020000 	stcge	0, cr0, [r2], {-0}
   108cc:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   108d0:	0001584a 	andeq	r5, r1, sl, asr #16
   108d4:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
   108d8:	09000001 	stmdbeq	r0, {r0}
   108dc:	000000ce 	andeq	r0, r0, lr, asr #1
   108e0:	0000016d 	andeq	r0, r0, sp, ror #2
   108e4:	0000ce08 	andeq	ip, r0, r8, lsl #28
   108e8:	bb020000 	bllt	908f0 <__ccfg+0x70948>
   108ec:	0900002e 	stmdbeq	r0, {r1, r2, r3, r5}
   108f0:	0001374c 	andeq	r3, r1, ip, asr #14
   108f4:	2e1b0200 	cdpcs	2, 1, cr0, cr11, cr0, {0}
   108f8:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
   108fc:	00000107 	andeq	r0, r0, r7, lsl #2
   10900:	002eab02 	eoreq	sl, lr, r2, lsl #22
   10904:	e4510900 	ldrb	r0, [r1], #-2304	; 0xfffff700
   10908:	02000000 	andeq	r0, r0, #0
   1090c:	00002d35 	andeq	r2, r0, r5, lsr sp
   10910:	01995309 	orrseq	r5, r9, r9, lsl #6
   10914:	04050000 	streq	r0, [r5], #-0
   10918:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
   1091c:	0000ce09 	andeq	ip, r0, r9, lsl #28
   10920:	0001b800 	andeq	fp, r1, r0, lsl #16
   10924:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
   10928:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   1092c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10930:	000000b8 	strheq	r0, [r0], -r8
   10934:	b8040500 	stmdalt	r4, {r8, sl}
   10938:	02000000 	andeq	r0, r0, #0
   1093c:	0000312a 	andeq	r3, r0, sl, lsr #2
   10940:	01c95709 	biceq	r5, r9, r9, lsl #14
   10944:	04050000 	streq	r0, [r5], #-0
   10948:	000001cf 	andeq	r0, r0, pc, asr #3
   1094c:	0000ce09 	andeq	ip, r0, r9, lsl #28
   10950:	0001e300 	andeq	lr, r1, r0, lsl #6
   10954:	01e30800 	mvneq	r0, r0, lsl #16
   10958:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   1095c:	00000000 	andeq	r0, r0, r0
   10960:	00ce0405 	sbceq	r0, lr, r5, lsl #8
   10964:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
   10968:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   1096c:	0001c95a 	andeq	ip, r1, sl, asr r9
   10970:	2fd80200 	svccs	0x00d80200
   10974:	5d090000 	stcpl	0, cr0, [r9, #-0]
   10978:	000001c9 	andeq	r0, r0, r9, asr #3
   1097c:	002d4702 	eoreq	r4, sp, r2, lsl #14
   10980:	c9600900 	stmdbgt	r0!, {r8, fp}^
   10984:	02000001 	andeq	r0, r0, #1
   10988:	00003138 	andeq	r3, r0, r8, lsr r1
   1098c:	00e46309 	rsceq	r6, r4, r9, lsl #6
   10990:	85020000 	strhi	r0, [r2, #-0]
   10994:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
   10998:	00022065 	andeq	r2, r2, r5, rrx
   1099c:	26040500 	strcs	r0, [r4], -r0, lsl #10
   109a0:	07000002 	streq	r0, [r0, -r2]
   109a4:	00000231 	andeq	r0, r0, r1, lsr r2
   109a8:	0000ce08 	andeq	ip, r0, r8, lsl #28
   109ac:	d6020000 	strle	r0, [r2], -r0
   109b0:	09000032 	stmdbeq	r0, {r1, r4, r5}
   109b4:	00022067 	andeq	r2, r2, r7, rrx
   109b8:	301a0200 	andscc	r0, sl, r0, lsl #4
   109bc:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
   109c0:	000000eb 	andeq	r0, r0, fp, ror #1
   109c4:	0032b502 	eorseq	fp, r2, r2, lsl #10
   109c8:	eb6b0900 	bl	1ad2dd0 <__ccfg+0x1ab2e28>
   109cc:	02000000 	andeq	r0, r0, #0
   109d0:	00002fe7 	andeq	r2, r0, r7, ror #31
   109d4:	00eb6d09 	rsceq	r6, fp, r9, lsl #26
   109d8:	f9020000 			; <UNDEFINED> instruction: 0xf9020000
   109dc:	0900002f 	stmdbeq	r0, {r0, r1, r2, r3, r5}
   109e0:	0000eb6f 	andeq	lr, r0, pc, ror #22
   109e4:	094c0b00 	stmdbeq	ip, {r8, r9, fp}^
   109e8:	0003557a 	andeq	r5, r3, sl, ror r5
   109ec:	2fbd0c00 	svccs	0x00bd0c00
   109f0:	7c090000 	stcvc	0, cr0, [r9], {-0}
   109f4:	000000fc 	strdeq	r0, [r0], -ip
   109f8:	32a80c00 	adccc	r0, r8, #0, 24
   109fc:	7d090000 	stcvc	0, cr0, [r9, #-0]
   10a00:	0000012c 	andeq	r0, r0, ip, lsr #2
   10a04:	2fce0c04 	svccs	0x00ce0c04
   10a08:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
   10a0c:	00000142 	andeq	r0, r0, r2, asr #2
   10a10:	31c70c08 	biccc	r0, r7, r8, lsl #24
   10a14:	7f090000 	svcvc	0x00090000
   10a18:	0000014d 	andeq	r0, r0, sp, asr #2
   10a1c:	31d90c0c 	bicscc	r0, r9, ip, lsl #24
   10a20:	80090000 	andhi	r0, r9, r0
   10a24:	0000016d 	andeq	r0, r0, sp, ror #2
   10a28:	2ecc0c10 	mcrcs	12, 6, r0, cr12, cr0, {0}
   10a2c:	81090000 	mrshi	r0, (UNDEF: 9)
   10a30:	00000178 	andeq	r0, r0, r8, ror r1
   10a34:	2e880c14 	mcrcs	12, 4, r0, cr8, cr4, {0}
   10a38:	82090000 	andhi	r0, r9, #0
   10a3c:	00000183 	andeq	r0, r0, r3, lsl #3
   10a40:	2fc30c18 	svccs	0x00c30c18
   10a44:	83090000 	movwhi	r0, #36864	; 0x9000
   10a48:	0000018e 	andeq	r0, r0, lr, lsl #3
   10a4c:	31520c1c 	cmpcc	r2, ip, lsl ip
   10a50:	84090000 	strhi	r0, [r9], #-0
   10a54:	000001be 			; <UNDEFINED> instruction: 0x000001be
   10a58:	2f4a0c20 	svccs	0x004a0c20
   10a5c:	85090000 	strhi	r0, [r9, #-0]
   10a60:	000001e9 	andeq	r0, r0, r9, ror #3
   10a64:	2fa20c24 	svccs	0x00a20c24
   10a68:	86090000 	strhi	r0, [r9], -r0
   10a6c:	000001f4 	strdeq	r0, [r0], -r4
   10a70:	32070c28 	andcc	r0, r7, #40, 24	; 0x2800
   10a74:	87090000 	strhi	r0, [r9, -r0]
   10a78:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   10a7c:	2ee70c2c 	cdpcs	12, 14, cr0, cr7, cr12, {1}
   10a80:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
   10a84:	00000215 	andeq	r0, r0, r5, lsl r2
   10a88:	31f50c30 	mvnscc	r0, r0, lsr ip
   10a8c:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
   10a90:	00000231 	andeq	r0, r0, r1, lsr r2
   10a94:	2dc60c34 	stclcs	12, cr0, [r6, #208]	; 0xd0
   10a98:	8a090000 	bhi	250aa0 <__ccfg+0x230af8>
   10a9c:	0000020a 	andeq	r0, r0, sl, lsl #4
   10aa0:	30090c38 	andcc	r0, r9, r8, lsr ip
   10aa4:	8b090000 	blhi	250aac <__ccfg+0x230b04>
   10aa8:	0000023c 	andeq	r0, r0, ip, lsr r2
   10aac:	31a80c3c 			; <UNDEFINED> instruction: 0x31a80c3c
   10ab0:	8c090000 	stchi	0, cr0, [r9], {-0}
   10ab4:	00000247 	andeq	r0, r0, r7, asr #4
   10ab8:	2f2c0c40 	svccs	0x002c0c40
   10abc:	8d090000 	stchi	0, cr0, [r9, #-0]
   10ac0:	00000252 	andeq	r0, r0, r2, asr r2
   10ac4:	2d760c44 	ldclcs	12, cr0, [r6, #-272]!	; 0xfffffef0
   10ac8:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
   10acc:	0000025d 	andeq	r0, r0, sp, asr r2
   10ad0:	d8020048 	stmdale	r2, {r3, r6}
   10ad4:	09000030 	stmdbeq	r0, {r4, r5}
   10ad8:	0002688f 	andeq	r6, r2, pc, lsl #17
   10adc:	01080b00 	tsteq	r8, r0, lsl #22
   10ae0:	0003994e 	andeq	r9, r3, lr, asr #18
   10ae4:	3d340c00 	ldccc	12, cr0, [r4, #-0]
   10ae8:	4f010000 	svcmi	0x00010000
   10aec:	000000ce 	andeq	r0, r0, lr, asr #1
   10af0:	3d650c00 	stclcc	12, cr0, [r5, #-0]
   10af4:	50010000 	andpl	r0, r1, r0
   10af8:	000000b8 	strheq	r0, [r0], -r8
   10afc:	3c9f0c04 	ldccc	12, cr0, [pc], {4}
   10b00:	51010000 	mrspl	r0, (UNDEF: 1)
   10b04:	000000ad 	andeq	r0, r0, sp, lsr #1
   10b08:	3c520c06 	mrrccc	12, 0, r0, r2, cr6
   10b0c:	52010000 	andpl	r0, r1, #0
   10b10:	000000a2 	andeq	r0, r0, r2, lsr #1
   10b14:	91020007 	tstls	r2, r7
   10b18:	0100003d 	tsteq	r0, sp, lsr r0
   10b1c:	00036053 	andeq	r6, r3, r3, asr r0
   10b20:	0fbe0d00 	svceq	0x00be0d00
   10b24:	dc020000 	stcle	0, cr0, [r2], {-0}
   10b28:	03be0301 			; <UNDEFINED> instruction: 0x03be0301
   10b2c:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
   10b30:	0200000f 	andeq	r0, r0, #15
   10b34:	00ce01dc 	ldrdeq	r0, [lr], #28
   10b38:	0f000000 	svceq	0x00000000
   10b3c:	00000fd3 	ldrdeq	r0, [r0], -r3
   10b40:	ce022c02 	cdpgt	12, 0, cr2, cr2, cr2, {0}
   10b44:	03000000 	movweq	r0, #0
   10b48:	0010d710 	andseq	sp, r0, r0, lsl r7
   10b4c:	022a0400 	eoreq	r0, sl, #0, 8
   10b50:	39871103 	stmibcc	r7, {r0, r1, r8, ip}
   10b54:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
   10b58:	000000c3 	andeq	r0, r0, r3, asr #1
   10b5c:	0003fb03 	andeq	pc, r3, r3, lsl #22
   10b60:	36d71200 	ldrbcc	r1, [r7], r0, lsl #4
   10b64:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
   10b68:	000000ce 	andeq	r0, r0, lr, asr #1
   10b6c:	0039e013 	eorseq	lr, r9, r3, lsl r0
   10b70:	c3ef0500 	mvngt	r0, #0, 10
   10b74:	00000000 	andeq	r0, r0, r0
   10b78:	003c670d 	eorseq	r6, ip, sp, lsl #14
   10b7c:	025c0400 	subseq	r0, ip, #0, 8
   10b80:	00041503 	andeq	r1, r4, r3, lsl #10
   10b84:	3c410e00 	mcrrcc	14, 0, r0, r1, cr0
   10b88:	5c040000 	stcpl	0, cr0, [r4], {-0}
   10b8c:	0000ce02 	andeq	ip, r0, r2, lsl #28
   10b90:	02100000 	andseq	r0, r0, #0
   10b94:	03000031 	movweq	r0, #49	; 0x31
   10b98:	0f030140 	svceq	0x00030140
   10b9c:	00003ceb 	andeq	r3, r0, fp, ror #25
   10ba0:	2b023e04 	blcs	a03b8 <__ccfg+0x80410>
   10ba4:	03000004 	movweq	r0, #4
   10ba8:	a7020103 	strge	r0, [r2, -r3, lsl #2]
   10bac:	1400000c 	strne	r0, [r0], #-12
   10bb0:	00003d3b 	andeq	r3, r0, fp, lsr sp
   10bb4:	00009e0a 	andeq	r9, r0, sl, lsl #28
   10bb8:	00f40000 	rscseq	r0, r4, r0
   10bbc:	9c010000 	stcls	0, cr0, [r1], {-0}
   10bc0:	000005cd 	andeq	r0, r0, sp, asr #11
   10bc4:	003c9715 	eorseq	r9, ip, r5, lsl r7
   10bc8:	ce7b0100 	rpwgte	f0, f3, f0
   10bcc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   10bd0:	16000049 	strne	r0, [r0], -r9, asr #32
   10bd4:	00003c59 	andeq	r3, r0, r9, asr ip
   10bd8:	00ce7c01 	sbceq	r7, lr, r1, lsl #24
   10bdc:	07ff0000 	ldrbeq	r0, [pc, r0]!
   10be0:	0003a417 	andeq	sl, r3, r7, lsl r4
   10be4:	00000000 	andeq	r0, r0, r0
   10be8:	0012f800 	andseq	pc, r2, r0, lsl #16
   10bec:	7d810100 	stfvcs	f0, [r1]
   10bf0:	18000004 	stmdane	r0, {r2}
   10bf4:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
   10bf8:	be190001 	cdplt	0, 1, cr0, cr9, cr1, {0}
   10bfc:	00000003 	andeq	r0, r0, r3
   10c00:	04000000 	streq	r0, [r0], #-0
   10c04:	01000000 	mrseq	r0, (UNDEF: 0)
   10c08:	04151a82 	ldreq	r1, [r5], #-2690	; 0xfffff57e
   10c0c:	00000000 	andeq	r0, r0, r0
   10c10:	00080000 	andeq	r0, r8, r0
   10c14:	a1010000 	mrsge	r0, (UNDEF: 1)
   10c18:	000004a9 	andeq	r0, r0, r9, lsr #9
   10c1c:	0000001b 	andeq	r0, r0, fp, lsl r0
   10c20:	0008de00 	andeq	sp, r8, r0, lsl #28
   10c24:	cb190000 	blgt	650c2c <__ccfg+0x630c84>
   10c28:	00000003 	andeq	r0, r0, r3
   10c2c:	06000000 	streq	r0, [r0], -r0
   10c30:	01000000 	mrseq	r0, (UNDEF: 0)
   10c34:	041e19b1 	ldreq	r1, [lr], #-2481	; 0xfffff64f
   10c38:	00000000 	andeq	r0, r0, r0
   10c3c:	00040000 	andeq	r0, r4, r0
   10c40:	b2010000 	andlt	r0, r1, #0
   10c44:	0003fb1a 	andeq	pc, r3, sl, lsl fp	; <UNPREDICTABLE>
   10c48:	00000000 	andeq	r0, r0, r0
   10c4c:	00000a00 	andeq	r0, r0, r0, lsl #20
   10c50:	e1b80100 			; <UNDEFINED> instruction: 0xe1b80100
   10c54:	18000004 	stmdane	r0, {r2}
   10c58:	00000408 	andeq	r0, r0, r8, lsl #8
   10c5c:	cb190011 	blgt	650ca8 <__ccfg+0x630d00>
   10c60:	00000003 	andeq	r0, r0, r3
   10c64:	04000000 	streq	r0, [r0], #-0
   10c68:	01000000 	mrseq	r0, (UNDEF: 0)
   10c6c:	041e19b9 	ldreq	r1, [lr], #-2489	; 0xfffff647
   10c70:	00000000 	andeq	r0, r0, r0
   10c74:	00020000 	andeq	r0, r2, r0
   10c78:	ba010000 	blt	50c80 <__ccfg+0x30cd8>
   10c7c:	0003cb19 	andeq	ip, r3, r9, lsl fp
   10c80:	00000000 	andeq	r0, r0, r0
   10c84:	00000600 	andeq	r0, r0, r0, lsl #12
   10c88:	19cf0100 	stmibne	pc, {r8}^	; <UNPREDICTABLE>
   10c8c:	0000041e 	andeq	r0, r0, lr, lsl r4
   10c90:	00000000 	andeq	r0, r0, r0
   10c94:	00000002 	andeq	r0, r0, r2
   10c98:	001cd001 	andseq	sp, ip, r1
   10c9c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
   10ca0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10ca4:	0a035001 	beq	e4cb0 <__ccfg+0xc4d08>
   10ca8:	1c0007ff 	stcne	7, cr0, [r0], {255}	; 0xff
   10cac:	00000000 	andeq	r0, r0, r0
   10cb0:	0000053f 	andeq	r0, r0, pc, lsr r5
   10cb4:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
   10cb8:	0007ff0a 	andeq	pc, r7, sl, lsl #30
   10cbc:	0000001e 	andeq	r0, r0, lr, lsl r0
   10cc0:	0008ef00 	andeq	lr, r8, r0, lsl #30
   10cc4:	00055700 	andeq	r5, r5, r0, lsl #14
   10cc8:	51011d00 	tstpl	r1, r0, lsl #26
   10ccc:	011d3101 	tsteq	sp, r1, lsl #2
   10cd0:	00330150 	eorseq	r0, r3, r0, asr r1
   10cd4:	0000001e 	andeq	r0, r0, lr, lsl r0
   10cd8:	0008ef00 	andeq	lr, r8, r0, lsl #30
   10cdc:	00056f00 	andeq	r6, r5, r0, lsl #30
   10ce0:	51011d00 	tstpl	r1, r0, lsl #26
   10ce4:	011d3301 	tsteq	sp, r1, lsl #6
   10ce8:	00340150 	eorseq	r0, r4, r0, asr r1
   10cec:	0000001e 	andeq	r0, r0, lr, lsl r0
   10cf0:	00090500 	andeq	r0, r9, r0, lsl #10
   10cf4:	00058200 	andeq	r8, r5, r0, lsl #4
   10cf8:	50011d00 	andpl	r1, r1, r0, lsl #26
   10cfc:	1c003101 	stfnes	f3, [r0], {1}
   10d00:	00000000 	andeq	r0, r0, r0
   10d04:	00000591 	muleq	r0, r1, r5
   10d08:	0150011d 	cmpeq	r0, sp, lsl r1
   10d0c:	001c0037 	andseq	r0, ip, r7, lsr r0
   10d10:	a0000000 	andge	r0, r0, r0
   10d14:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
   10d18:	37015001 	strcc	r5, [r1, -r1]
   10d1c:	00001c00 	andeq	r1, r0, r0, lsl #24
   10d20:	05b00000 	ldreq	r0, [r0, #0]!
   10d24:	011d0000 	tsteq	sp, r0
   10d28:	00760250 	rsbseq	r0, r6, r0, asr r2
   10d2c:	00001c00 	andeq	r1, r0, r0, lsl #24
   10d30:	05c00000 	strbeq	r0, [r0]
   10d34:	011d0000 	tsteq	sp, r0
   10d38:	00760250 	rsbseq	r0, r6, r0, asr r2
   10d3c:	00001f00 	andeq	r1, r0, r0, lsl #30
   10d40:	011d0000 	tsteq	sp, r0
   10d44:	00760250 	rsbseq	r0, r6, r0, asr r2
   10d48:	dd200000 	stcle	0, cr0, [r0, #-0]
   10d4c:	0a00003b 	beq	10e40 <__exidx_end+0xb200>
   10d50:	45640101 	strbmi	r0, [r4, #-257]!	; 0xfffffeff
   10d54:	02200000 	eoreq	r0, r0, #0
   10d58:	9c010000 	stcls	0, cr0, [r1], {-0}
   10d5c:	000007c8 	andeq	r0, r0, r8, asr #15
   10d60:	003cdd21 	eorseq	sp, ip, r1, lsr #26
   10d64:	ceda0100 	cdpgt	1, 13, cr0, cr10, cr0, {0}
   10d68:	73000000 	movwvc	r0, #0
   10d6c:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
   10d70:	00003b81 	andeq	r3, r0, r1, lsl #23
   10d74:	00c3dc01 	sbceq	sp, r3, r1, lsl #24
   10d78:	499f0000 	ldmibmi	pc, {}	; <UNPREDICTABLE>
   10d7c:	f7150000 			; <UNDEFINED> instruction: 0xf7150000
   10d80:	0100003c 	tsteq	r0, ip, lsr r0
   10d84:	0000c3dd 	ldrdeq	ip, [r0], -sp
   10d88:	0049bd00 	subeq	fp, r9, r0, lsl #26
   10d8c:	3cbd1500 	cfldr32cc	mvfx1, [sp]
   10d90:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
   10d94:	000000c3 	andeq	r0, r0, r3, asr #1
   10d98:	00004a17 	andeq	r4, r0, r7, lsl sl
   10d9c:	003d8315 	eorseq	r8, sp, r5, lsl r3
   10da0:	c3df0100 	bicsgt	r0, pc, #0, 2
   10da4:	35000000 	strcc	r0, [r0, #-0]
   10da8:	1500004a 	strne	r0, [r0, #-74]	; 0xffffffb6
   10dac:	00003b73 	andeq	r3, r0, r3, ror fp
   10db0:	00c3e001 	sbceq	lr, r3, r1
   10db4:	4a530000 	bmi	14d0dbc <__ccfg+0x14b0e14>
   10db8:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
   10dbc:	0100003b 	tsteq	r0, fp, lsr r0
   10dc0:	0000c3e1 	andeq	ip, r0, r1, ror #7
   10dc4:	15530100 	ldrbne	r0, [r3, #-256]	; 0xffffff00
   10dc8:	0000362b 	andeq	r3, r0, fp, lsr #12
   10dcc:	00cee201 	sbceq	lr, lr, r1, lsl #4
   10dd0:	4a660000 	bmi	1990dd8 <__ccfg+0x1970e30>
   10dd4:	1b150000 	blne	550ddc <__ccfg+0x530e34>
   10dd8:	0100003d 	tsteq	r0, sp, lsr r0
   10ddc:	0000cee3 	andeq	ip, r0, r3, ror #29
   10de0:	004a7900 	subeq	r7, sl, r0, lsl #18
   10de4:	3b9d1500 	blcc	fe7561ec <_estack+0xde7511ec>
   10de8:	e4010000 	str	r0, [r1], #-0
   10dec:	000000ce 	andeq	r0, r0, lr, asr #1
   10df0:	00004a98 	muleq	r0, r8, sl
   10df4:	00696423 	rsbeq	r6, r9, r3, lsr #8
   10df8:	00cee501 	sbceq	lr, lr, r1, lsl #10
   10dfc:	4aab0000 	bmi	fead0e04 <_estack+0xdeacbe04>
   10e00:	64230000 	strtvs	r0, [r3], #-0
   10e04:	01006969 	tsteq	r0, r9, ror #18
   10e08:	0000cee6 	andeq	ip, r0, r6, ror #29
   10e0c:	004ae100 	subeq	lr, sl, r0, lsl #2
   10e10:	69742300 	ldmdbvs	r4!, {r8, r9, sp}^
   10e14:	cee70100 	cdpgt	1, 14, cr0, cr7, cr0, {0}
   10e18:	17000000 	strne	r0, [r0, -r0]
   10e1c:	2300004b 	movwcs	r0, #75	; 0x4b
   10e20:	01006463 	tsteq	r0, r3, ror #8
   10e24:	0000cee8 	andeq	ip, r0, r8, ror #29
   10e28:	004b8700 	subeq	r8, fp, r0, lsl #14
   10e2c:	6c632300 	stclvs	3, cr2, [r3], #-0
   10e30:	cee90100 	cdpgt	1, 14, cr0, cr9, cr0, {0}
   10e34:	9a000000 	bls	10e3c <__exidx_end+0xb1fc>
   10e38:	1500004b 	strne	r0, [r0, #-75]	; 0xffffffb5
   10e3c:	00003bae 	andeq	r3, r0, lr, lsr #23
   10e40:	00ceea01 	sbceq	lr, lr, r1, lsl #20
   10e44:	4bad0000 	blmi	feb50e4c <_estack+0xdeb4be4c>
   10e48:	6b240000 	blvs	910e50 <__ccfg+0x8f0ea8>
   10e4c:	ceeb0100 	cdpgt	1, 14, cr0, cr11, cr0, {0}
   10e50:	13000000 	movwne	r0, #0
   10e54:	00003c8f 	andeq	r3, r0, pc, lsl #25
   10e58:	00ceec01 	sbceq	lr, lr, r1, lsl #24
   10e5c:	7d150000 	ldcvc	0, cr0, [r5, #-0]
   10e60:	0100003c 	tsteq	r0, ip, lsr r0
   10e64:	0000ceed 	andeq	ip, r0, sp, ror #29
   10e68:	004bcb00 	subeq	ip, fp, r0, lsl #22
   10e6c:	3c4d1500 	cfstr64cc	mvdx1, [sp], {-0}
   10e70:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
   10e74:	000000ce 	andeq	r0, r0, lr, asr #1
   10e78:	00004bf4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   10e7c:	003c7815 	eorseq	r7, ip, r5, lsl r8
   10e80:	ceef0100 	cdpgt	1, 14, cr0, cr15, cr0, {0}
   10e84:	13000000 	movwne	r0, #0
   10e88:	1500004c 	strne	r0, [r0, #-76]	; 0xffffffb4
   10e8c:	00003d58 	andeq	r3, r0, r8, asr sp
   10e90:	07c8f001 	strbeq	pc, [r8, r1]	; <UNPREDICTABLE>
   10e94:	4c570000 	mrami	r0, r7, acc0
   10e98:	92250000 	eorls	r0, r5, #0
   10e9c:	12000045 	andne	r0, r0, #69	; 0x45
   10ea0:	3b000000 	blcc	10ea8 <__exidx_end+0xb268>
   10ea4:	26000007 	strcs	r0, [r0], -r7
   10ea8:	00003d03 	andeq	r3, r0, r3, lsl #26
   10eac:	c3010a01 	movwgt	r0, #6657	; 0x1a01
   10eb0:	6f000000 	svcvs	0x00000000
   10eb4:	0000004c 	andeq	r0, r0, ip, asr #32
   10eb8:	0003d427 	andeq	sp, r3, r7, lsr #8
   10ebc:	0045b800 	subeq	fp, r5, r0, lsl #16
   10ec0:	00000600 	andeq	r0, r0, r0, lsl #12
   10ec4:	01110100 	tsteq	r1, r0, lsl #2
   10ec8:	00000768 	andeq	r0, r0, r8, ror #14
   10ecc:	0003e428 	andeq	lr, r3, r8, lsr #8
   10ed0:	45b82900 	ldrmi	r2, [r8, #2304]!	; 0x900
   10ed4:	00060000 	andeq	r0, r6, r0
   10ed8:	ef2a0000 	svc	0x002a0000
   10edc:	82000003 	andhi	r0, r0, #3
   10ee0:	0000004c 	andeq	r0, r0, ip, asr #32
   10ee4:	03d42700 	bicseq	r2, r4, #0, 14
   10ee8:	45d00000 	ldrbmi	r0, [r0]
   10eec:	00060000 	andeq	r0, r6, r0
   10ef0:	1b010000 	blne	50ef8 <__ccfg+0x30f50>
   10ef4:	00079501 	andeq	r9, r7, r1, lsl #10
   10ef8:	03e42800 	mvneq	r2, #0, 16
   10efc:	d0290000 	eorle	r0, r9, r0
   10f00:	06000045 	streq	r0, [r0], -r5, asr #32
   10f04:	2a000000 	bcs	10f0c <__exidx_end+0xb2cc>
   10f08:	000003ef 	andeq	r0, r0, pc, ror #7
   10f0c:	00004c95 	muleq	r0, r5, ip
   10f10:	d42b0000 	strtle	r0, [fp], #-0
   10f14:	da000003 	ble	10f28 <__exidx_end+0xb2e8>
   10f18:	10000045 	andne	r0, r0, r5, asr #32
   10f1c:	01000013 	tsteq	r0, r3, lsl r0
   10f20:	07be011f 			; <UNDEFINED> instruction: 0x07be011f
   10f24:	e4280000 	strt	r0, [r8], #-0
   10f28:	2c000003 	stccs	0, cr0, [r0], {3}
   10f2c:	00001310 	andeq	r1, r0, r0, lsl r3
   10f30:	0003ef2a 	andeq	lr, r3, sl, lsr #30
   10f34:	004ca800 	subeq	sl, ip, r0, lsl #16
   10f38:	1b000000 	blne	10f40 <__exidx_end+0xb300>
   10f3c:	00004584 	andeq	r4, r0, r4, lsl #11
   10f40:	0000091b 	andeq	r0, r0, fp, lsl r9
   10f44:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
   10f48:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
   10f4c:	000000ce 	andeq	r0, r0, lr, asr #1
   10f50:	003bb320 	eorseq	fp, fp, r0, lsr #6
   10f54:	01170a00 	tsteq	r7, r0, lsl #20
   10f58:	00004784 	andeq	r4, r0, r4, lsl #15
   10f5c:	00000060 	andeq	r0, r0, r0, rrx
   10f60:	08339c01 	ldmdaeq	r3!, {r0, sl, fp, ip, pc}
   10f64:	81260000 			; <UNDEFINED> instruction: 0x81260000
   10f68:	0100003b 	tsteq	r0, fp, lsr r0
   10f6c:	00c301b8 	strheq	r0, [r3], #24
   10f70:	4cbb0000 	ldcmi	0, cr0, [fp]
   10f74:	a7260000 	strge	r0, [r6, -r0]!
   10f78:	0100003c 	tsteq	r0, ip, lsr r0
   10f7c:	00ce01b9 	strheq	r0, [lr], #25
   10f80:	4ce60000 	stclmi	0, cr0, [r6]
   10f84:	40260000 	eormi	r0, r6, r0
   10f88:	0100002f 	tsteq	r0, pc, lsr #32
   10f8c:	00ce01ba 	strheq	r0, [lr], #26
   10f90:	4cf90000 	ldclmi	0, cr0, [r9]
   10f94:	7d260000 	stcvc	0, cr0, [r6, #-0]
   10f98:	0100003c 	tsteq	r0, ip, lsr r0
   10f9c:	00ce01bb 	strheq	r0, [lr], #27
   10fa0:	4d200000 	stcmi	0, cr0, [r0, #-0]
   10fa4:	921b0000 	andsls	r0, fp, #0
   10fa8:	1b000047 	blne	110cc <__exidx_end+0xb48c>
   10fac:	00000009 	andeq	r0, r0, r9
   10fb0:	003da420 	eorseq	sl, sp, r0, lsr #8
   10fb4:	01290a00 			; <UNDEFINED> instruction: 0x01290a00
   10fb8:	00000000 	andeq	r0, r0, r0
   10fbc:	00000078 	andeq	r0, r0, r8, ror r0
   10fc0:	088a9c01 	stmeq	sl, {r0, sl, fp, ip, pc}
   10fc4:	d0260000 	eorle	r0, r6, r0
   10fc8:	0100003c 	tsteq	r0, ip, lsr r0
   10fcc:	00ce01e7 	sbceq	r0, lr, r7, ror #3
   10fd0:	4d490000 	stclmi	0, cr0, [r9, #-0]
   10fd4:	76260000 	strtvc	r0, [r6], -r0
   10fd8:	0100003d 	tsteq	r0, sp, lsr r0
   10fdc:	00ce01e8 	sbceq	r0, lr, r8, ror #3
   10fe0:	4d5c0000 	ldclmi	0, cr0, [ip, #-0]
   10fe4:	2b260000 	blcs	990fec <__ccfg+0x971044>
   10fe8:	01000036 	tsteq	r0, r6, lsr r0
   10fec:	00ce01e9 	sbceq	r0, lr, r9, ror #3
   10ff0:	4d6f0000 	stclmi	0, cr0, [pc, #-0]	; 10ff8 <__exidx_end+0xb3b8>
   10ff4:	24260000 	strtcs	r0, [r6], #-0
   10ff8:	0100003d 	tsteq	r0, sp, lsr r0
   10ffc:	00ce01ea 	sbceq	r0, lr, sl, ror #3
   11000:	4d820000 	stcmi	0, cr0, [r2]
   11004:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
   11008:	00003c25 	andeq	r3, r0, r5, lsr #24
   1100c:	ce01420a 	cdpgt	2, 0, cr4, cr1, cr10, {0}
   11010:	e4000000 	str	r0, [r0], #-0
   11014:	18000047 	stmdane	r0, {r0, r1, r2, r6}
   11018:	01000000 	mrseq	r0, (UNDEF: 0)
   1101c:	3dd1229c 	lfmcc	f2, 2, [r1, #624]	; 0x270
   11020:	55010000 	strpl	r0, [r1, #-0]
   11024:	00000399 	muleq	r0, r9, r3
   11028:	06400305 	strbeq	r0, [r0], -r5, lsl #6
   1102c:	ce2f2000 	cdpgt	0, 2, cr2, cr15, cr0, {0}
   11030:	c1000000 	mrsgt	r0, (UNDEF: 0)
   11034:	30000008 	andcc	r0, r0, r8
   11038:	000008c1 	andeq	r0, r0, r1, asr #17
   1103c:	0403000c 	streq	r0, [r3], #-12
   11040:	002cb307 	eoreq	fp, ip, r7, lsl #6
   11044:	3d0b2200 	sfmcc	f2, 4, [fp, #-0]
   11048:	61010000 	mrsvs	r0, (UNDEF: 1)
   1104c:	000008d9 	ldrdeq	r0, [r0], -r9
   11050:	00000305 	andeq	r0, r0, r5, lsl #6
   11054:	b12d0000 			; <UNDEFINED> instruction: 0xb12d0000
   11058:	31000008 	tstcc	r0, r8
   1105c:	00002a0d 	andeq	r2, r0, sp, lsl #20
   11060:	08ef9909 	stmiaeq	pc!, {r0, r3, r8, fp, ip, pc}^	; <UNPREDICTABLE>
   11064:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
   11068:	00000000 	andeq	r0, r0, r0
   1106c:	002d1d31 	eoreq	r1, sp, r1, lsr sp
   11070:	05f90300 	ldrbeq	r0, [r9, #768]!	; 0x300
   11074:	08000009 	stmdaeq	r0, {r0, r3}
   11078:	000000ce 	andeq	r0, r0, lr, asr #1
   1107c:	0000ce08 	andeq	ip, r0, r8, lsl #28
   11080:	56320000 	ldrtpl	r0, [r2], -r0
   11084:	0300002d 	movweq	r0, #45	; 0x2d
   11088:	00ce0110 	sbceq	r0, lr, r0, lsl r1
   1108c:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
   11090:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   11094:	00000000 	andeq	r0, r0, r0
   11098:	002b7033 	eoreq	r7, fp, r3, lsr r0
   1109c:	c3aa0b00 			; <UNDEFINED> instruction: 0xc3aa0b00
   110a0:	00000000 	andeq	r0, r0, r0
   110a4:	000003cc 	andeq	r0, r0, ip, asr #7
   110a8:	3e6a0004 	cdpcc	0, 6, cr0, cr10, cr4, {0}
   110ac:	01040000 	mrseq	r0, (UNDEF: 4)
   110b0:	00002a3f 	andeq	r2, r0, pc, lsr sl
   110b4:	0040b801 	subeq	fp, r0, r1, lsl #16
   110b8:	002b0600 	eoreq	r0, fp, r0, lsl #12
   110bc:	00138800 	andseq	r8, r3, r0, lsl #16
   110c0:	00000000 	andeq	r0, r0, r0
   110c4:	008a3b00 	addeq	r3, sl, r0, lsl #22
   110c8:	06010200 	streq	r0, [r1], -r0, lsl #4
   110cc:	00000c5d 	andeq	r0, r0, sp, asr ip
   110d0:	5b080102 	blpl	2114e0 <__ccfg+0x1f1538>
   110d4:	0200000c 	andeq	r0, r0, #12
   110d8:	0a6b0502 	beq	1ad24e8 <__ccfg+0x1ab2540>
   110dc:	02020000 	andeq	r0, r2, #0
   110e0:	000d6607 	andeq	r6, sp, r7, lsl #12
   110e4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   110e8:	000007fd 	strdeq	r0, [r0], -sp
   110ec:	0029b203 	eoreq	fp, r9, r3, lsl #4
   110f0:	53410300 	movtpl	r0, #4864	; 0x1300
   110f4:	02000000 	andeq	r0, r0, #0
   110f8:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
   110fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   11100:	0007f805 	andeq	pc, r7, r5, lsl #16
   11104:	07080200 	streq	r0, [r8, -r0, lsl #4]
   11108:	00000421 	andeq	r0, r0, r1, lsr #8
   1110c:	69050404 	stmdbvs	r5, {r2, sl}
   11110:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   11114:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
   11118:	b4030000 	strlt	r0, [r3], #-0
   1111c:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
   11120:	00004820 	andeq	r4, r0, r0, lsr #16
   11124:	02010500 	andeq	r0, r1, #0, 10
   11128:	0000a263 	andeq	sl, r0, r3, ror #4
   1112c:	3ff20600 	svccc	0x00f20600
   11130:	06000000 	streq	r0, [r0], -r0
   11134:	00004032 	andeq	r4, r0, r2, lsr r0
   11138:	3fa20602 	svccc	0x00a20602
   1113c:	06040000 	streq	r0, [r4], -r0
   11140:	00003de2 	andeq	r3, r0, r2, ror #27
   11144:	8e030008 	cdphi	0, 0, cr0, cr3, cr8, {0}
   11148:	0200003f 	andeq	r0, r0, #63	; 0x3f
   1114c:	00008168 	andeq	r8, r0, r8, ror #2
   11150:	02010500 	andeq	r0, r1, #0, 10
   11154:	0000daa5 	andeq	sp, r0, r5, lsr #21
   11158:	40a80600 	adcmi	r0, r8, r0, lsl #12
   1115c:	067f0000 	ldrbteq	r0, [pc], -r0
   11160:	00003dfa 	strdeq	r3, [r0], -sl
   11164:	41590600 	cmpmi	r9, r0, lsl #12
   11168:	06010000 	streq	r0, [r1], -r0
   1116c:	00003fe6 	andeq	r3, r0, r6, ror #31
   11170:	414b0602 	cmpmi	fp, r2, lsl #12
   11174:	06030000 	streq	r0, [r3], -r0
   11178:	00003edf 	ldrdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   1117c:	65030004 	strvs	r0, [r3, #-4]
   11180:	02000041 	andeq	r0, r0, #65	; 0x41
   11184:	0000adac 	andeq	sl, r0, ip, lsr #27
   11188:	02010700 	andeq	r0, r1, #0, 14
   1118c:	0125013d 			; <UNDEFINED> instruction: 0x0125013d
   11190:	bc060000 	stclt	0, cr0, [r6], {-0}
   11194:	7f00003f 	svcvc	0x0000003f
   11198:	003eaa06 	eorseq	sl, lr, r6, lsl #20
   1119c:	06060000 	streq	r0, [r6], -r0
   111a0:	0100003f 	tsteq	r0, pc, lsr r0
   111a4:	003f4206 	eorseq	r4, pc, r6, lsl #4
   111a8:	8d060200 	sfmhi	f0, 4, [r6, #-0]
   111ac:	03000040 	movweq	r0, #64	; 0x40
   111b0:	003e0606 	eorseq	r0, lr, r6, lsl #12
   111b4:	ce060400 	cfcpysgt	mvf0, mvf6
   111b8:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   111bc:	00406706 	subeq	r6, r0, r6, lsl #14
   111c0:	7a060600 	bvc	1929c8 <__ccfg+0x172a20>
   111c4:	07000040 	streq	r0, [r0, -r0, asr #32]
   111c8:	3e920800 	cdpcc	8, 9, cr0, cr2, cr0, {0}
   111cc:	47020000 	strmi	r0, [r2, -r0]
   111d0:	0000e501 	andeq	lr, r0, r1, lsl #10
   111d4:	02010700 	andeq	r0, r1, #0, 14
   111d8:	015f0159 	cmpeq	pc, r9, asr r1	; <UNPREDICTABLE>
   111dc:	33060000 	movwcc	r0, #24576	; 0x6000
   111e0:	7f00003f 	svcvc	0x0000003f
   111e4:	003f5c06 	eorseq	r5, pc, r6, lsl #24
   111e8:	d8060000 	stmdale	r6, {}	; <UNPREDICTABLE>
   111ec:	0100003f 	tsteq	r0, pc, lsr r0
   111f0:	003e1f06 	eorseq	r1, lr, r6, lsl #30
   111f4:	42060200 	andmi	r0, r6, #0, 4
   111f8:	03000040 	movweq	r0, #64	; 0x40
   111fc:	003ef506 	eorseq	pc, lr, r6, lsl #10
   11200:	08000400 	stmdaeq	r0, {sl}
   11204:	00003ebb 			; <UNDEFINED> instruction: 0x00003ebb
   11208:	31016002 	tstcc	r1, r2
   1120c:	07000001 	streq	r0, [r0, -r1]
   11210:	01b80201 			; <UNDEFINED> instruction: 0x01b80201
   11214:	00000199 	muleq	r0, r9, r1
   11218:	003f7206 	eorseq	r7, pc, r6, lsl #4
   1121c:	9e067f00 	cdpls	15, 0, cr7, cr6, cr0, {0}
   11220:	0a000040 	beq	11328 <__exidx_end+0xb6e8>
   11224:	00400306 	subeq	r0, r0, r6, lsl #6
   11228:	28061400 	stmdacs	r6, {sl, ip}
   1122c:	15000040 	strne	r0, [r0, #-64]	; 0xffffffc0
   11230:	003fce06 	eorseq	ip, pc, r6, lsl #28
   11234:	54061600 	strpl	r1, [r6], #-1536	; 0xfffffa00
   11238:	17000040 	strne	r0, [r0, -r0, asr #32]
   1123c:	3e9d0800 	cdpcc	8, 9, cr0, cr13, cr0, {0}
   11240:	bf020000 	svclt	0x00020000
   11244:	00016b01 	andeq	r6, r1, r1, lsl #22
   11248:	40e40900 	rscmi	r0, r4, r0, lsl #18
   1124c:	07020000 	streq	r0, [r2, -r0]
   11250:	00007601 	andeq	r7, r0, r1, lsl #12
   11254:	310a0300 	mrscc	r0, (UNDEF: 58)
   11258:	0200003e 	andeq	r0, r0, #62	; 0x3e
   1125c:	015f016a 	cmpeq	pc, sl, ror #2
   11260:	da010000 	ble	51268 <__ccfg+0x312c0>
   11264:	0b000001 	bleq	11270 <__exidx_end+0xb630>
   11268:	00003f6a 	andeq	r3, r0, sl, ror #30
   1126c:	015f6801 	cmpeq	pc, r1, lsl #16
   11270:	170b0000 	strne	r0, [fp, -r0]
   11274:	0100003e 	tsteq	r0, lr, lsr r0
   11278:	00007669 	andeq	r7, r0, r9, ror #12
   1127c:	92090000 	andls	r0, r9, #0
   11280:	02000041 	andeq	r0, r0, #65	; 0x41
   11284:	00760132 	rsbseq	r0, r6, r2, lsr r1
   11288:	0c030000 	stceq	0, cr0, [r3], {-0}
   1128c:	00004124 	andeq	r4, r0, r4, lsr #2
   11290:	00a27202 	adceq	r7, r2, r2, lsl #4
   11294:	00000000 	andeq	r0, r0, r0
   11298:	00100000 	andseq	r0, r0, r0
   1129c:	9c010000 	stcls	0, cr0, [r1], {-0}
   112a0:	003e4e0d 	eorseq	r4, lr, sp, lsl #28
   112a4:	dab60200 	ble	fed91aac <_estack+0xded8caac>
   112a8:	00000000 	andeq	r0, r0, r0
   112ac:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   112b0:	01000000 	mrseq	r0, (UNDEF: 0)
   112b4:	0002259c 	muleq	r2, ip, r5
   112b8:	3e890e00 	cdpcc	14, 8, cr0, cr9, cr0, {0}
   112bc:	52010000 	andpl	r0, r1, #0
   112c0:	000000da 	ldrdeq	r0, [r0], -sl
   112c4:	00004d95 	muleq	r0, r5, sp
   112c8:	01b20f00 			; <UNDEFINED> instruction: 0x01b20f00
   112cc:	47fc0000 	ldrbmi	r0, [ip, r0]!
   112d0:	004c0000 	subeq	r0, ip, r0
   112d4:	9c010000 	stcls	0, cr0, [r1], {-0}
   112d8:	0000026e 	andeq	r0, r0, lr, ror #4
   112dc:	0001c310 	andeq	ip, r1, r0, lsl r3
   112e0:	004dbd00 	subeq	fp, sp, r0, lsl #26
   112e4:	01ce1000 	biceq	r1, lr, r0
   112e8:	4ddd0000 	ldclmi	0, cr0, [sp]
   112ec:	0c110000 	ldceq	0, cr0, [r1], {-0}
   112f0:	0e000048 	cdpeq	0, 0, cr0, cr0, cr8, {2}
   112f4:	12000000 	andne	r0, r0, #0
   112f8:	000001c3 	andeq	r0, r0, r3, asr #3
   112fc:	0001ce12 	andeq	ip, r1, r2, lsl lr
   11300:	01a51300 			; <UNDEFINED> instruction: 0x01a51300
   11304:	480c0000 	stmdami	ip, {}	; <UNPREDICTABLE>
   11308:	00040000 	andeq	r0, r4, r0
   1130c:	70010000 	andvc	r0, r1, r0
   11310:	0d140000 	ldceq	0, cr0, [r4, #-0]
   11314:	02000040 	andeq	r0, r0, #64	; 0x40
   11318:	01250151 			; <UNDEFINED> instruction: 0x01250151
   1131c:	00000000 	andeq	r0, r0, r0
   11320:	00300000 	eorseq	r0, r0, r0
   11324:	9c010000 	stcls	0, cr0, [r1], {-0}
   11328:	000002ca 	andeq	r0, r0, sl, asr #5
   1132c:	00405e0e 	subeq	r5, r0, lr, lsl #28
   11330:	25850100 	strcs	r0, [r5, #256]	; 0x100
   11334:	11000001 	tstne	r0, r1
   11338:	0b00004e 	bleq	11478 <__exidx_end+0xb838>
   1133c:	000040d8 	ldrdeq	r4, [r0], -r8
   11340:	00768601 	rsbseq	r8, r6, r1, lsl #12
   11344:	800e0000 	andhi	r0, lr, r0
   11348:	0100003f 	tsteq	r0, pc, lsr r0
   1134c:	00007687 	andeq	r7, r0, r7, lsl #13
   11350:	004e3100 	subeq	r3, lr, r0, lsl #2
   11354:	01da1300 	bicseq	r1, sl, r0, lsl #6
   11358:	00000000 	andeq	r0, r0, r0
   1135c:	00040000 	andeq	r0, r4, r0
   11360:	86010000 	strhi	r0, [r1], -r0
   11364:	00000015 	andeq	r0, r0, r5, lsl r0
   11368:	0001b200 	andeq	fp, r1, r0, lsl #4
   1136c:	02160000 	andseq	r0, r6, #0
   11370:	02000041 	andeq	r0, r0, #65	; 0x41
   11374:	00760119 	rsbseq	r0, r6, r9, lsl r1
   11378:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
   1137c:	17000002 	strne	r0, [r0, -r2]
   11380:	00003eec 	andeq	r3, r0, ip, ror #29
   11384:	76011b02 	strvc	r1, [r1], -r2, lsl #22
   11388:	00000000 	andeq	r0, r0, r0
   1138c:	003e6c14 	eorseq	r6, lr, r4, lsl ip
   11390:	01c90200 	biceq	r0, r9, r0, lsl #4
   11394:	00000199 	muleq	r0, r9, r1
   11398:	00004848 	andeq	r4, r0, r8, asr #16
   1139c:	0000006c 	andeq	r0, r0, ip, rrx
   113a0:	03659c01 	cmneq	r5, #256	; 0x100
   113a4:	c80e0000 	stmdagt	lr, {}	; <UNPREDICTABLE>
   113a8:	0100003e 	tsteq	r0, lr, lsr r0
   113ac:	000199a8 	andeq	r9, r1, r8, lsr #19
   113b0:	004e4400 	subeq	r4, lr, r0, lsl #8
   113b4:	3f530b00 	svccc	0x00530b00
   113b8:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
   113bc:	00000076 	andeq	r0, r0, r6, ror r0
   113c0:	00411918 	subeq	r1, r1, r8, lsl r9
   113c4:	76aa0100 	strtvc	r0, [sl], r0, lsl #2
   113c8:	01000000 	mrseq	r0, (UNDEF: 0)
   113cc:	01a51954 			; <UNDEFINED> instruction: 0x01a51954
   113d0:	484a0000 	stmdami	sl, {}^	; <UNPREDICTABLE>
   113d4:	13580000 	cmpne	r8, #0
   113d8:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
   113dc:	0002ca1a 	andeq	ip, r2, sl, lsl sl
   113e0:	00484e00 	subeq	r4, r8, r0, lsl #28
   113e4:	00137000 	andseq	r7, r3, r0
   113e8:	5baa0100 	blpl	fea917f0 <_estack+0xdea8c7f0>
   113ec:	1b000003 	blne	11400 <__exidx_end+0xb7c0>
   113f0:	00001370 	andeq	r1, r0, r0, ror r3
   113f4:	0002db10 	andeq	sp, r2, r0, lsl fp
   113f8:	004ea100 	subeq	sl, lr, r0, lsl #2
   113fc:	15000000 	strne	r0, [r0, #-0]
   11400:	00004862 	andeq	r4, r0, r2, ror #16
   11404:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   11408:	3f170900 	svccc	0x00170900
   1140c:	83020000 	movwhi	r0, #8192	; 0x2000
   11410:	00037201 	andeq	r7, r3, r1, lsl #4
   11414:	01020300 	mrseq	r0, LR_svc
   11418:	000ca702 	andeq	sl, ip, r2, lsl #14
   1141c:	41730900 	cmnmi	r3, r0, lsl #18
   11420:	f0020000 			; <UNDEFINED> instruction: 0xf0020000
   11424:	00037201 	andeq	r7, r3, r1, lsl #4
   11428:	741c0300 	ldrvc	r0, [ip], #-768	; 0xfffffd00
   1142c:	02000036 	andeq	r0, r0, #54	; 0x36
   11430:	48b40243 	ldmmi	r4!, {r0, r1, r6, r9}
   11434:	00160000 	andseq	r0, r6, r0
   11438:	9c010000 	stcls	0, cr0, [r1], {-0}
   1143c:	0003651d 	andeq	r6, r3, sp, lsl r5
   11440:	0048b600 	subeq	fp, r8, r0, lsl #12
   11444:	00000400 	andeq	r0, r0, r0, lsl #8
   11448:	b5e20100 	strblt	r0, [r2, #256]!	; 0x100
   1144c:	15000003 	strne	r0, [r0, #-3]
   11450:	000048ba 			; <UNDEFINED> instruction: 0x000048ba
   11454:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   11458:	03791e00 	cmneq	r9, #0, 28
   1145c:	48be0000 	ldmmi	lr!, {}	; <UNPREDICTABLE>
   11460:	00040000 	andeq	r0, r4, r0
   11464:	e3010000 	movw	r0, #4096	; 0x1000
   11468:	0048c215 	subeq	ip, r8, r5, lsl r2
   1146c:	0002e800 	andeq	lr, r2, r0, lsl #16
   11470:	00000000 	andeq	r0, r0, r0
   11474:	000005a7 	andeq	r0, r0, r7, lsr #11
   11478:	40380004 	eorsmi	r0, r8, r4
   1147c:	01040000 	mrseq	r0, (UNDEF: 4)
   11480:	00002a3f 	andeq	r2, r0, pc, lsr sl
   11484:	00426a01 	subeq	r6, r2, r1, lsl #20
   11488:	002b0600 	eoreq	r0, fp, r0, lsl #12
   1148c:	0013c000 	andseq	ip, r3, r0
   11490:	00000000 	andeq	r0, r0, r0
   11494:	008c6a00 	addeq	r6, ip, r0, lsl #20
   11498:	06010200 	streq	r0, [r1], -r0, lsl #4
   1149c:	00000c5d 	andeq	r0, r0, sp, asr ip
   114a0:	002a1a03 	eoreq	r1, sl, r3, lsl #20
   114a4:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
   114a8:	02000000 	andeq	r0, r0, #0
   114ac:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
   114b0:	02020000 	andeq	r0, r2, #0
   114b4:	000a6b05 	andeq	r6, sl, r5, lsl #22
   114b8:	2e100300 	cdpcs	3, 1, cr0, cr0, cr0, {0}
   114bc:	2b030000 	blcs	d14c4 <__ccfg+0xb151c>
   114c0:	00000050 	andeq	r0, r0, r0, asr r0
   114c4:	66070202 	strvs	r0, [r7], -r2, lsl #4
   114c8:	0200000d 	andeq	r0, r0, #13
   114cc:	07fd0504 	ldrbeq	r0, [sp, r4, lsl #10]!
   114d0:	b2030000 	andlt	r0, r3, #0
   114d4:	03000029 	movweq	r0, #41	; 0x29
   114d8:	00006941 	andeq	r6, r0, r1, asr #18
   114dc:	07040200 	streq	r0, [r4, -r0, lsl #4]
   114e0:	00000426 	andeq	r0, r0, r6, lsr #8
   114e4:	f8050802 			; <UNDEFINED> instruction: 0xf8050802
   114e8:	02000007 	andeq	r0, r0, #7
   114ec:	04210708 	strteq	r0, [r1], #-1800	; 0xfffff8f8
   114f0:	04040000 	streq	r0, [r4], #-0
   114f4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   114f8:	07040200 	streq	r0, [r4, -r0, lsl #4]
   114fc:	0000042b 	andeq	r0, r0, fp, lsr #8
   11500:	002a1c03 	eoreq	r1, sl, r3, lsl #24
   11504:	2c140400 	cfldrscs	mvf0, [r4], {-0}
   11508:	03000000 	movweq	r0, #0
   1150c:	00002e12 	andeq	r2, r0, r2, lsl lr
   11510:	00451a04 	subeq	r1, r5, r4, lsl #20
   11514:	b4030000 	strlt	r0, [r3], #-0
   11518:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
   1151c:	00005e20 	andeq	r5, r0, r0, lsr #28
   11520:	41e30500 	mvnmi	r0, r0, lsl #10
   11524:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
   11528:	0000e603 	andeq	lr, r0, r3, lsl #12
   1152c:	41c50600 	bicmi	r0, r5, r0, lsl #12
   11530:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
   11534:	000000a2 	andeq	r0, r0, r2, lsr #1
   11538:	00423606 	subeq	r3, r2, r6, lsl #12
   1153c:	a2890100 	addge	r0, r9, #0, 2
   11540:	06000000 	streq	r0, [r0], -r0
   11544:	00004291 	muleq	r0, r1, r2
   11548:	00a28901 	adceq	r8, r2, r1, lsl #18
   1154c:	bd070000 	stclt	0, cr0, [r7, #-0]
   11550:	01000029 	tsteq	r0, r9, lsr #32
   11554:	0000e68c 	andeq	lr, r0, ip, lsl #13
   11558:	01020000 	mrseq	r0, (UNDEF: 2)
   1155c:	000ca702 	andeq	sl, ip, r2, lsl #14
   11560:	42440800 	submi	r0, r4, #0, 16
   11564:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
   11568:	000000a2 	andeq	r0, r0, r2, lsr #1
   1156c:	00012a03 	andeq	r2, r1, r3, lsl #20
   11570:	41c50600 	bicmi	r0, r5, r0, lsl #12
   11574:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
   11578:	000000a2 	andeq	r0, r0, r2, lsr #1
   1157c:	00429106 	subeq	r9, r2, r6, lsl #2
   11580:	a2a90100 	adcge	r0, r9, #0, 2
   11584:	07000000 	streq	r0, [r0, -r0]
   11588:	000041de 	ldrdeq	r4, [r0], -lr
   1158c:	00a2ab01 	adceq	sl, r2, r1, lsl #22
   11590:	bd070000 	stclt	0, cr0, [r7, #-0]
   11594:	01000029 	tsteq	r0, r9, lsr #32
   11598:	0000e6ad 	andeq	lr, r0, sp, lsr #13
   1159c:	ad090000 	stcge	0, cr0, [r9, #-0]
   115a0:	cc000000 	stcgt	0, cr0, [r0], {-0}
   115a4:	28000048 	stmdacs	r0, {r3, r6}
   115a8:	01000000 	mrseq	r0, (UNDEF: 0)
   115ac:	0001719c 	muleq	r1, ip, r1
   115b0:	00b90a00 	adcseq	r0, r9, r0, lsl #20
   115b4:	4eb40000 	cdpmi	0, 11, cr0, cr4, cr0, {0}
   115b8:	c40a0000 	strgt	r0, [sl], #-0
   115bc:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
   115c0:	0b00004e 	bleq	11700 <__exidx_end+0xbac0>
   115c4:	000000da 	ldrdeq	r0, [r0], -sl
   115c8:	00004f3e 	andeq	r4, r0, lr, lsr pc
   115cc:	0000cf0c 	andeq	ip, r0, ip, lsl #30
   115d0:	d60d0400 	strle	r0, [sp], -r0, lsl #8
   115d4:	94000048 	strls	r0, [r0], #-72	; 0xffffffb8
   115d8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
   115dc:	000048ee 	andeq	r4, r0, lr, ror #17
   115e0:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   115e4:	388e0f00 	stmcc	lr, {r8, r9, sl, fp}
   115e8:	ca010000 	bgt	515f0 <__ccfg+0x31648>
   115ec:	0048f401 	subeq	pc, r8, r1, lsl #8
   115f0:	00000800 	andeq	r0, r0, r0, lsl #16
   115f4:	d19c0100 	orrsle	r0, ip, r0, lsl #2
   115f8:	10000001 	andne	r0, r0, r1
   115fc:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
   11600:	00a24202 	adceq	r4, r2, r2, lsl #4
   11604:	4f640000 	svcmi	0x00640000
   11608:	a5100000 	ldrge	r0, [r0, #-0]
   1160c:	02000041 	andeq	r0, r0, #65	; 0x41
   11610:	0000a242 	andeq	sl, r0, r2, asr #4
   11614:	004f8500 	subeq	r8, pc, r0, lsl #10
   11618:	423c1000 	eorsmi	r1, ip, #0
   1161c:	43020000 	movwmi	r0, #8192	; 0x2000
   11620:	000000a2 	andeq	r0, r0, r2, lsr #1
   11624:	00004fa6 	andeq	r4, r0, r6, lsr #31
   11628:	0048fc11 	subeq	pc, r8, r1, lsl ip	; <UNPREDICTABLE>
   1162c:	00012a00 	andeq	r2, r1, r0, lsl #20
   11630:	51011200 	mrspl	r1, R9_usr
   11634:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
   11638:	07500112 	smmlaeq	r0, r2, r1, r0
   1163c:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
   11640:	00225101 	eoreq	r5, r2, r1, lsl #2
   11644:	42560f00 	subsmi	r0, r6, #0, 30
   11648:	df010000 	svcle	0x00010000
   1164c:	00000001 	andeq	r0, r0, r1
   11650:	00002200 	andeq	r2, r0, r0, lsl #4
   11654:	ea9c0100 	b	fe711a5c <_estack+0xde70ca5c>
   11658:	10000002 	andne	r0, r0, r2
   1165c:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
   11660:	00a25702 	adceq	r5, r2, r2, lsl #14
   11664:	4fc70000 	svcmi	0x00c70000
   11668:	a5100000 	ldrge	r0, [r0, #-0]
   1166c:	02000041 	andeq	r0, r0, #65	; 0x41
   11670:	0000a257 	andeq	sl, r0, r7, asr r2
   11674:	004fe800 	subeq	lr, pc, r0, lsl #16
   11678:	22431000 	subcs	r1, r3, #0
   1167c:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
   11680:	000000a2 	andeq	r0, r0, r2, lsr #1
   11684:	00005009 	andeq	r5, r0, r9
   11688:	0041ff10 	subeq	pc, r1, r0, lsl pc	; <UNPREDICTABLE>
   1168c:	a2580200 	subsge	r0, r8, #0, 4
   11690:	54000000 	strpl	r0, [r0], #-0
   11694:	13000050 	movwne	r0, #80	; 0x50
   11698:	00004285 	andeq	r4, r0, r5, lsl #5
   1169c:	00a25a02 	adceq	r5, r2, r2, lsl #20
   116a0:	50750000 	rsbspl	r0, r5, r0
   116a4:	0a130000 	beq	4d16ac <__ccfg+0x4b1704>
   116a8:	02000042 	andeq	r0, r0, #66	; 0x42
   116ac:	0000a25b 	andeq	sl, r0, fp, asr r2
   116b0:	00510900 	subseq	r0, r1, r0, lsl #18
   116b4:	00001100 	andeq	r1, r0, r0, lsl #2
   116b8:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
   116bc:	01120000 	tsteq	r2, r0
   116c0:	01f34551 	mvnseq	r4, r1, asr r5
   116c4:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
   116c8:	01f35201 	mvnseq	r5, r1, lsl #4
   116cc:	30254052 	eorcc	r4, r5, r2, asr r0
   116d0:	0001282e 	andeq	r2, r1, lr, lsr #16
   116d4:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
   116d8:	5201f330 	andpl	pc, r1, #48, 6	; 0xc0000000
   116dc:	01f32540 	mvnseq	r2, r0, asr #10
   116e0:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
   116e4:	2e302540 	cfneg32cs	mvfx2, mvfx0
   116e8:	16000128 	strne	r0, [r0], -r8, lsr #2
   116ec:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
   116f0:	01f32540 	mvnseq	r2, r0, asr #10
   116f4:	282e3053 	stmdacs	lr!, {r0, r1, r4, r6, ip, sp}
   116f8:	13160001 	tstne	r6, #1
   116fc:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
   11700:	00012829 	andeq	r2, r1, r9, lsr #16
   11704:	12211316 	eorne	r1, r1, #1476395008	; 0x58000000
   11708:	f3515001 	vhadd.u16	d21, d1, d1
   1170c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   11710:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   11714:	f3048023 	vhadd.u8	d8, d4, d19
   11718:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   1171c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   11720:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   11724:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
   11728:	13160001 	tstne	r6, #1
   1172c:	f3048423 	vshl.u8	d8, d19, d4
   11730:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   11734:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   11738:	f3048023 	vhadd.u8	d8, d4, d19
   1173c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   11740:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   11744:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   11748:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
   1174c:	13160001 	tstne	r6, #1
   11750:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   11754:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
   11758:	13160001 	tstne	r6, #1
   1175c:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 11764 <__exidx_end+0xbb24>
   11760:	01000042 	tsteq	r0, r2, asr #32
   11764:	000001f6 	strdeq	r0, [r0], -r6
   11768:	002e0000 	eoreq	r0, lr, r0
   1176c:	9c010000 	stcls	0, cr0, [r1], {-0}
   11770:	0000041f 	andeq	r0, r0, pc, lsl r4
   11774:	0011ba10 	andseq	fp, r1, r0, lsl sl
   11778:	a2830200 	addge	r0, r3, #0, 4
   1177c:	55000000 	strpl	r0, [r0, #-0]
   11780:	10000051 	andne	r0, r0, r1, asr r0
   11784:	000041a5 	andeq	r4, r0, r5, lsr #3
   11788:	00a28302 	adceq	r8, r2, r2, lsl #6
   1178c:	51760000 	cmnpl	r6, r0
   11790:	43100000 	tstmi	r0, #0
   11794:	02000022 	andeq	r0, r0, #34	; 0x22
   11798:	0000a284 	andeq	sl, r0, r4, lsl #5
   1179c:	00519700 	subseq	r9, r1, r0, lsl #14
   117a0:	42131000 	andsmi	r1, r3, #0
   117a4:	84020000 	strhi	r0, [r2], #-0
   117a8:	000000a2 	andeq	r0, r0, r2, lsr #1
   117ac:	000051e8 	andeq	r5, r0, r8, ror #3
   117b0:	00420a10 	subeq	r0, r2, r0, lsl sl
   117b4:	97850200 	strls	r0, [r5, r0, lsl #4]
   117b8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
   117bc:	13000052 	movwne	r0, #82	; 0x52
   117c0:	00004285 	andeq	r4, r0, r5, lsl #5
   117c4:	00a28702 	adceq	r8, r2, r2, lsl #14
   117c8:	52590000 	subspl	r0, r9, #0
   117cc:	ff130000 			; <UNDEFINED> instruction: 0xff130000
   117d0:	02000041 	andeq	r0, r0, #65	; 0x41
   117d4:	0000a288 	andeq	sl, r0, r8, lsl #5
   117d8:	0052ff00 	subseq	pc, r2, r0, lsl #30
   117dc:	00001100 	andeq	r1, r0, r0, lsl #2
   117e0:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
   117e4:	01120000 	tsteq	r2, r0
   117e8:	01f34051 	mvnseq	r4, r1, asr r0
   117ec:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
   117f0:	01f35201 	mvnseq	r5, r1, lsl #4
   117f4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   117f8:	000f0c22 	andeq	r0, pc, r2, lsr #24
   117fc:	282b8000 	stmdacs	fp!, {pc}
   11800:	13160001 	tstne	r6, #1
   11804:	007d2440 	rsbseq	r2, sp, r0, asr #8
   11808:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
   1180c:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
   11810:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
   11814:	01f35301 	mvnseq	r5, r1, lsl #6
   11818:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   1181c:	000f0c22 	andeq	r0, pc, r2, lsr #24
   11820:	282b8000 	stmdacs	fp!, {pc}
   11824:	13160001 	tstne	r6, #1
   11828:	01122124 	tsteq	r2, r4, lsr #2
   1182c:	01f36350 	mvnseq	r6, r0, asr r3
   11830:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   11834:	23225001 			; <UNDEFINED> instruction: 0x23225001
   11838:	01f30480 	mvnseq	r0, r0, lsl #9
   1183c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   11840:	f3225001 	vhadd.u32	d5, d2, d1
   11844:	4b405301 	blmi	1026450 <__ccfg+0x10064a8>
   11848:	0f0c2224 	svceq	0x000c2224
   1184c:	2c800000 	stccs	0, cr0, [r0], {0}
   11850:	16000128 	strne	r0, [r0], -r8, lsr #2
   11854:	04842313 	streq	r2, [r4], #787	; 0x313
   11858:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   1185c:	5001f324 	andpl	pc, r1, r4, lsr #6
   11860:	04802322 	streq	r2, [r0], #802	; 0x322
   11864:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   11868:	5001f324 	andpl	pc, r1, r4, lsr #6
   1186c:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
   11870:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   11874:	00000f0c 	andeq	r0, r0, ip, lsl #30
   11878:	01282c80 	smlawbeq	r8, r0, ip, r2
   1187c:	f3131600 	vmax.u16	d1, d3, d0
   11880:	4b405301 	blmi	102648c <__ccfg+0x10064e4>
   11884:	0f0c2224 	svceq	0x000c2224
   11888:	2b800000 	blcs	fe011890 <_estack+0xde00c890>
   1188c:	16000128 	strne	r0, [r0], -r8, lsr #2
   11890:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
   11894:	000041cb 	andeq	r4, r0, fp, asr #3
   11898:	97020801 	strls	r0, [r2, -r1, lsl #16]
   1189c:	00000000 	andeq	r0, r0, r0
   118a0:	34000000 	strcc	r0, [r0], #-0
   118a4:	01000000 	mrseq	r0, (UNDEF: 0)
   118a8:	0004d29c 	muleq	r4, ip, r2
   118ac:	11ba1000 			; <UNDEFINED> instruction: 0x11ba1000
   118b0:	af020000 	svcge	0x00020000
   118b4:	000000a2 	andeq	r0, r0, r2, lsr #1
   118b8:	0000535f 	andeq	r5, r0, pc, asr r3
   118bc:	0041a510 	subeq	sl, r1, r0, lsl r5
   118c0:	a2af0200 	adcge	r0, pc, #0, 4
   118c4:	80000000 	andhi	r0, r0, r0
   118c8:	10000053 	andne	r0, r0, r3, asr r0
   118cc:	00002243 	andeq	r2, r0, r3, asr #4
   118d0:	00a2af02 	adceq	sl, r2, r2, lsl #30
   118d4:	53a10000 			; <UNDEFINED> instruction: 0x53a10000
   118d8:	85130000 	ldrhi	r0, [r3, #-0]
   118dc:	02000042 	andeq	r0, r0, #66	; 0x42
   118e0:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
   118e4:	0053de00 	subseq	sp, r3, r0, lsl #28
   118e8:	41f61300 	mvnsmi	r1, r0, lsl #6
   118ec:	b2020000 	andlt	r0, r2, #0
   118f0:	00000097 	muleq	r0, r7, r0
   118f4:	00005418 	andeq	r5, r0, r8, lsl r4
   118f8:	0000ed15 	andeq	lr, r0, r5, lsl sp
   118fc:	00000000 	andeq	r0, r0, r0
   11900:	00001a00 	andeq	r1, r0, r0, lsl #20
   11904:	0cca0200 	sfmeq	f0, 2, [sl], {0}
   11908:	00000108 	andeq	r0, r0, r8, lsl #2
   1190c:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
   11910:	54300000 	ldrtpl	r0, [r0], #-0
   11914:	00160000 	andseq	r0, r6, r0
   11918:	1a000000 	bne	11920 <__exidx_end+0xbce0>
   1191c:	0b000000 	bleq	11924 <__exidx_end+0xbce4>
   11920:	00000113 	andeq	r0, r0, r3, lsl r1
   11924:	0000546a 	andeq	r5, r0, sl, ror #8
   11928:	00011e0b 	andeq	r1, r1, fp, lsl #28
   1192c:	00548300 	subseq	r8, r4, r0, lsl #6
   11930:	00000d00 	andeq	r0, r0, r0, lsl #26
   11934:	05940000 	ldreq	r0, [r4]
   11938:	000d0000 	andeq	r0, sp, r0
   1193c:	9f000000 	svcls	0x00000000
   11940:	00000005 	andeq	r0, r0, r5
   11944:	ad140000 	ldcge	0, cr0, [r4, #-0]
   11948:	01000041 	tsteq	r0, r1, asr #32
   1194c:	0097021d 	addseq	r0, r7, sp, lsl r2
   11950:	00000000 	andeq	r0, r0, r0
   11954:	00400000 	subeq	r0, r0, r0
   11958:	9c010000 	stcls	0, cr0, [r1], {-0}
   1195c:	00000594 	muleq	r0, r4, r5
   11960:	0011ba10 	andseq	fp, r1, r0, lsl sl
   11964:	a2dd0200 	sbcsge	r0, sp, #0, 4
   11968:	9a000000 	bls	11970 <__exidx_end+0xbd30>
   1196c:	10000054 	andne	r0, r0, r4, asr r0
   11970:	000041a5 	andeq	r4, r0, r5, lsr #3
   11974:	00a2dd02 	adceq	sp, r2, r2, lsl #26
   11978:	54bb0000 	ldrtpl	r0, [fp], #0
   1197c:	43100000 	tstmi	r0, #0
   11980:	02000022 	andeq	r0, r0, #34	; 0x22
   11984:	0000a2de 	ldrdeq	sl, [r0], -lr
   11988:	0054dc00 	subseq	sp, r4, r0, lsl #24
   1198c:	42131000 	andsmi	r1, r3, #0
   11990:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   11994:	000000a2 	andeq	r0, r0, r2, lsr #1
   11998:	0000551f 	andeq	r5, r0, pc, lsl r5
   1199c:	00428513 	subeq	r8, r2, r3, lsl r5
   119a0:	a2e00200 	rscge	r0, r0, #0, 4
   119a4:	62000000 	andvs	r0, r0, #0
   119a8:	13000055 	movwne	r0, #85	; 0x55
   119ac:	000041f6 	strdeq	r4, [r0], -r6
   119b0:	0097e102 	addseq	lr, r7, r2, lsl #2
   119b4:	55bd0000 	ldrpl	r0, [sp, #0]!
   119b8:	ed150000 	ldc	0, cr0, [r5, #-0]
   119bc:	00000000 	andeq	r0, r0, r0
   119c0:	1a000000 	bne	119c8 <__exidx_end+0xbd88>
   119c4:	02000000 	andeq	r0, r0, #0
   119c8:	01080cfa 	strdeq	r0, [r8, -sl]
   119cc:	0a020000 	beq	919d4 <__ccfg+0x71a2c>
   119d0:	000000fd 	strdeq	r0, [r0], -sp
   119d4:	000055e0 	andeq	r5, r0, r0, ror #11
   119d8:	00000016 	andeq	r0, r0, r6, lsl r0
   119dc:	00001a00 	andeq	r1, r0, r0, lsl #20
   119e0:	01130b00 	tsteq	r3, r0, lsl #22
   119e4:	56200000 	strtpl	r0, [r0], -r0
   119e8:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
   119ec:	39000001 	stmdbcc	r0, {r0}
   119f0:	0d000056 	stceq	0, cr0, [r0, #-344]	; 0xfffffea8
   119f4:	00000000 	andeq	r0, r0, r0
   119f8:	00000594 	muleq	r0, r4, r5
   119fc:	0000000d 	andeq	r0, r0, sp
   11a00:	00059f00 	andeq	r9, r5, r0, lsl #30
   11a04:	00000000 	andeq	r0, r0, r0
   11a08:	0029ef17 	eoreq	lr, r9, r7, lsl pc
   11a0c:	a26a0500 	rsbge	r0, sl, #0, 10
   11a10:	17000000 	strne	r0, [r0, -r0]
   11a14:	000029fe 	strdeq	r2, [r0], -lr
   11a18:	00a28405 	adceq	r8, r2, r5, lsl #8
   11a1c:	31000000 	mrscc	r0, (UNDEF: 0)
   11a20:	0400000f 	streq	r0, [r0], #-15
   11a24:	00418c00 	subeq	r8, r1, r0, lsl #24
   11a28:	59010400 	stmdbpl	r1, {sl}
   11a2c:	0c000045 	stceq	0, cr0, [r0], {69}	; 0x45
   11a30:	00004472 	andeq	r4, r0, r2, ror r4
   11a34:	000045f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   11a38:	000048fc 	strdeq	r4, [r0], -ip
   11a3c:	000000aa 	andeq	r0, r0, sl, lsr #1
   11a40:	00008e8c 	andeq	r8, r0, ip, lsl #29
   11a44:	69050402 	stmdbvs	r5, {r1, sl}
   11a48:	0300746e 	movweq	r7, #1134	; 0x46e
   11a4c:	00003314 	andeq	r3, r0, r4, lsl r3
   11a50:	3817d802 	ldmdacc	r7, {r1, fp, ip, lr, pc}
   11a54:	04000000 	streq	r0, [r0], #-0
   11a58:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
   11a5c:	06050000 	streq	r0, [r5], -r0
   11a60:	02000044 	andeq	r0, r0, #68	; 0x44
   11a64:	38180148 	ldmdacc	r8, {r3, r6, r8}
   11a68:	04000000 	streq	r0, [r0], #-0
   11a6c:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
   11a70:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   11a74:	00442a04 	subeq	r2, r4, r4, lsl #20
   11a78:	0bd50500 	bleq	ff552e80 <_estack+0xdf54de80>
   11a7c:	65020000 	strvs	r0, [r2, #-0]
   11a80:	00381701 	eorseq	r1, r8, r1, lsl #14
   11a84:	01040000 	mrseq	r0, (UNDEF: 4)
   11a88:	000c5d06 	andeq	r5, ip, r6, lsl #26
   11a8c:	08010400 	stmdaeq	r1, {sl}
   11a90:	00000c5b 	andeq	r0, r0, fp, asr ip
   11a94:	6b050204 	blvs	1522ac <__ccfg+0x132304>
   11a98:	0400000a 	streq	r0, [r0], #-10
   11a9c:	0d660702 	stcleq	7, cr0, [r6, #-8]!
   11aa0:	04040000 	streq	r0, [r4], #-0
   11aa4:	0007fd05 	andeq	pc, r7, r5, lsl #26
   11aa8:	00830600 	addeq	r0, r3, r0, lsl #12
   11aac:	04040000 	streq	r0, [r4], #-0
   11ab0:	00042607 	andeq	r2, r4, r7, lsl #12
   11ab4:	07080400 	streq	r0, [r8, -r0, lsl #8]
   11ab8:	00000421 	andeq	r0, r0, r1, lsr #8
   11abc:	000e4903 	andeq	r4, lr, r3, lsl #18
   11ac0:	0e2e0300 	cdpeq	3, 2, cr0, cr14, cr0, {0}
   11ac4:	00000083 	andeq	r0, r0, r3, lsl #1
   11ac8:	0002ff03 	andeq	pc, r2, r3, lsl #30
   11acc:	0e740300 	cdpeq	3, 7, cr0, cr4, cr0, {0}
   11ad0:	00000083 	andeq	r0, r0, r3, lsl #1
   11ad4:	a5030407 	strge	r0, [r3, #-1031]	; 0xfffffbf9
   11ad8:	0000d703 	andeq	sp, r0, r3, lsl #14
   11adc:	076c0800 	strbeq	r0, [ip, -r0, lsl #16]!
   11ae0:	a7030000 	strge	r0, [r3, -r0]
   11ae4:	00005a0c 	andeq	r5, r0, ip, lsl #20
   11ae8:	0ab40800 	beq	fed13af0 <_estack+0xded0eaf0>
   11aec:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
   11af0:	0000d713 	andeq	sp, r0, r3, lsl r7
   11af4:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
   11af8:	e7000000 	str	r0, [r0, -r0]
   11afc:	0a000000 	beq	11b04 <__exidx_end+0xbec4>
   11b00:	00000038 	andeq	r0, r0, r8, lsr r0
   11b04:	080b0003 	stmdaeq	fp, {r0, r1}
   11b08:	0b09a203 	bleq	27a31c <__ccfg+0x25a374>
   11b0c:	0c000001 	stceq	0, cr0, [r0], {1}
   11b10:	0000038e 	andeq	r0, r0, lr, lsl #7
   11b14:	2507a403 	strcs	sl, [r7, #-1027]	; 0xfffffbfd
   11b18:	00000000 	andeq	r0, r0, r0
   11b1c:	0006010c 	andeq	r0, r6, ip, lsl #2
   11b20:	05a90300 	streq	r0, [r9, #768]!	; 0x300
   11b24:	000000b5 	strheq	r0, [r0], -r5
   11b28:	b5030004 	strlt	r0, [r3, #-4]
   11b2c:	03000008 	movweq	r0, #8
   11b30:	00e703aa 	rsceq	r0, r7, sl, lsr #7
   11b34:	040d0000 	streq	r0, [sp], #-0
   11b38:	0001170e 	andeq	r1, r1, lr, lsl #14
   11b3c:	08420300 	stmdaeq	r2, {r8, r9}^
   11b40:	16040000 	strne	r0, [r4], -r0
   11b44:	00008f19 	andeq	r8, r0, r9, lsl pc
   11b48:	02530300 	subseq	r0, r3, #0, 6
   11b4c:	0c050000 	stceq	0, cr0, [r5], {-0}
   11b50:	0000250d 	andeq	r2, r0, sp, lsl #10
   11b54:	072a0300 	streq	r0, [sl, -r0, lsl #6]!
   11b58:	23040000 	movwcs	r0, #16384	; 0x4000
   11b5c:	00012a1b 	andeq	r2, r1, fp, lsl sl
   11b60:	03320f00 	teqeq	r2, #0, 30
   11b64:	04180000 	ldreq	r0, [r8], #-0
   11b68:	019c0834 	orrseq	r0, ip, r4, lsr r8
   11b6c:	c40c0000 	strgt	r0, [ip], #-0
   11b70:	0400000e 	streq	r0, [r0], #-14
   11b74:	019c1336 	orrseq	r1, ip, r6, lsr r3
   11b78:	10000000 	andne	r0, r0, r0
   11b7c:	04006b5f 	streq	r6, [r0], #-2911	; 0xfffff4a1
   11b80:	00250737 	eoreq	r0, r5, r7, lsr r7
   11b84:	0c040000 	stceq	0, cr0, [r4], {-0}
   11b88:	00000b62 	andeq	r0, r0, r2, ror #22
   11b8c:	250b3704 	strcs	r3, [fp, #-1796]	; 0xfffff8fc
   11b90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11b94:	0043f50c 	subeq	pc, r3, ip, lsl #10
   11b98:	14370400 	ldrtne	r0, [r7], #-1024	; 0xfffffc00
   11b9c:	00000025 	andeq	r0, r0, r5, lsr #32
   11ba0:	04550c0c 	ldrbeq	r0, [r5], #-3084	; 0xfffff3f4
   11ba4:	37040000 	strcc	r0, [r4, -r0]
   11ba8:	0000251b 	andeq	r2, r0, fp, lsl r5
   11bac:	5f101000 	svcpl	0x00101000
   11bb0:	38040078 	stmdacc	r4, {r3, r4, r5, r6}
   11bb4:	0001a20b 	andeq	sl, r1, fp, lsl #4
   11bb8:	11001400 	tstne	r0, r0, lsl #8
   11bbc:	00014204 	andeq	r4, r1, r4, lsl #4
   11bc0:	011e0900 	tsteq	lr, r0, lsl #18
   11bc4:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
   11bc8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11bcc:	00000000 	andeq	r0, r0, r0
   11bd0:	0b7d0f00 	bleq	1f557d8 <__ccfg+0x1f35830>
   11bd4:	04240000 	strteq	r0, [r4], #-0
   11bd8:	0235083c 	eorseq	r0, r5, #60, 16	; 0x3c0000
   11bdc:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
   11be0:	04000005 	streq	r0, [r0], #-5
   11be4:	0025093e 	eoreq	r0, r5, lr, lsr r9
   11be8:	0c000000 	stceq	0, cr0, [r0], {-0}
   11bec:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
   11bf0:	25093f04 	strcs	r3, [r9, #-3844]	; 0xfffff0fc
   11bf4:	04000000 	streq	r0, [r0], #-0
   11bf8:	0003580c 	andeq	r5, r3, ip, lsl #16
   11bfc:	09400400 	stmdbeq	r0, {sl}^
   11c00:	00000025 	andeq	r0, r0, r5, lsr #32
   11c04:	06740c08 	ldrbteq	r0, [r4], -r8, lsl #24
   11c08:	41040000 	mrsmi	r0, (UNDEF: 4)
   11c0c:	00002509 	andeq	r2, r0, r9, lsl #10
   11c10:	540c0c00 	strpl	r0, [ip], #-3072	; 0xfffff400
   11c14:	04000009 	streq	r0, [r0], #-9
   11c18:	00250942 	eoreq	r0, r5, r2, asr #18
   11c1c:	0c100000 	ldceq	0, cr0, [r0], {-0}
   11c20:	00000ace 	andeq	r0, r0, lr, asr #21
   11c24:	25094304 	strcs	r4, [r9, #-772]	; 0xfffffcfc
   11c28:	14000000 	strne	r0, [r0], #-0
   11c2c:	0003460c 	andeq	r4, r3, ip, lsl #12
   11c30:	09440400 	stmdbeq	r4, {sl}^
   11c34:	00000025 	andeq	r0, r0, r5, lsr #32
   11c38:	05750c18 	ldrbeq	r0, [r5, #-3096]!	; 0xfffff3e8
   11c3c:	45040000 	strmi	r0, [r4, #-0]
   11c40:	00002509 	andeq	r2, r0, r9, lsl #10
   11c44:	f00c1c00 			; <UNDEFINED> instruction: 0xf00c1c00
   11c48:	04000008 	streq	r0, [r0], #-8
   11c4c:	00250946 	eoreq	r0, r5, r6, asr #18
   11c50:	00200000 	eoreq	r0, r0, r0
   11c54:	00003b12 	andeq	r3, r0, r2, lsl fp
   11c58:	04010800 	streq	r0, [r1], #-2048	; 0xfffff800
   11c5c:	027a084f 	rsbseq	r0, sl, #5177344	; 0x4f0000
   11c60:	2d0c0000 	stccs	0, cr0, [ip, #-0]
   11c64:	0400000d 	streq	r0, [r0], #-13
   11c68:	027a0a50 	rsbseq	r0, sl, #80, 20	; 0x50000
   11c6c:	0c000000 	stceq	0, cr0, [r0], {-0}
   11c70:	00000c17 	andeq	r0, r0, r7, lsl ip
   11c74:	7a095104 	bvc	26608c <__ccfg+0x2460e4>
   11c78:	80000002 	andhi	r0, r0, r2
   11c7c:	000dc613 	andeq	ip, sp, r3, lsl r6
   11c80:	0a530400 	beq	14d2c88 <__ccfg+0x14b2ce0>
   11c84:	0000011e 	andeq	r0, r0, lr, lsl r1
   11c88:	b7130100 	ldrlt	r0, [r3, -r0, lsl #2]
   11c8c:	0400000e 	streq	r0, [r0], #-14
   11c90:	011e0a56 	tsteq	lr, r6, asr sl
   11c94:	01040000 	mrseq	r0, (UNDEF: 4)
   11c98:	01170900 	tsteq	r7, r0, lsl #18
   11c9c:	028a0000 	addeq	r0, sl, #0
   11ca0:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11ca4:	1f000000 	svcne	0x00000000
   11ca8:	0a161200 	beq	5964b0 <__ccfg+0x576508>
   11cac:	01900000 	orrseq	r0, r0, r0
   11cb0:	cd086204 	sfmgt	f6, 4, [r8, #-16]
   11cb4:	0c000002 	stceq	0, cr0, [r0], {2}
   11cb8:	00000ec4 	andeq	r0, r0, r4, asr #29
   11cbc:	cd126304 	ldcgt	3, cr6, [r2, #-16]
   11cc0:	00000002 	andeq	r0, r0, r2
   11cc4:	0005840c 	andeq	r8, r5, ip, lsl #8
   11cc8:	06640400 	strbteq	r0, [r4], -r0, lsl #8
   11ccc:	00000025 	andeq	r0, r0, r5, lsr #32
   11cd0:	03070c04 	movweq	r0, #31748	; 0x7c04
   11cd4:	66040000 	strvs	r0, [r4], -r0
   11cd8:	0002d309 	andeq	sp, r2, r9, lsl #6
   11cdc:	3b0c0800 	blcc	313ce4 <__ccfg+0x2f3d3c>
   11ce0:	04000000 	streq	r0, [r0], #-0
   11ce4:	02351e67 	eorseq	r1, r5, #1648	; 0x670
   11ce8:	00880000 	addeq	r0, r8, r0
   11cec:	028a0411 	addeq	r0, sl, #285212672	; 0x11000000
   11cf0:	e3090000 	movw	r0, #36864	; 0x9000
   11cf4:	e3000002 	movw	r0, #2
   11cf8:	0a000002 	beq	11d08 <__exidx_end+0xc0c8>
   11cfc:	00000038 	andeq	r0, r0, r8, lsr r0
   11d00:	0411001f 	ldreq	r0, [r1], #-31	; 0xffffffe1
   11d04:	000002e9 	andeq	r0, r0, r9, ror #5
   11d08:	0cc50f14 	stcleq	15, cr0, [r5], {20}
   11d0c:	04080000 	streq	r0, [r8], #-0
   11d10:	0312087a 	tsteq	r2, #7995392	; 0x7a0000
   11d14:	d70c0000 	strle	r0, [ip, -r0]
   11d18:	0400000c 	streq	r0, [r0], #-12
   11d1c:	0312117b 	tsteq	r2, #-1073741794	; 0xc000001e
   11d20:	0c000000 	stceq	0, cr0, [r0], {-0}
   11d24:	00001da0 	andeq	r1, r0, r0, lsr #27
   11d28:	25067c04 	strcs	r7, [r6, #-3076]	; 0xfffff3fc
   11d2c:	04000000 	streq	r0, [r0], #-0
   11d30:	6e041100 	adfvss	f1, f4, f0
   11d34:	0f000000 	svceq	0x00000000
   11d38:	0000044d 	andeq	r0, r0, sp, asr #8
   11d3c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
   11d40:	0000045b 	andeq	r0, r0, fp, asr r4
   11d44:	00705f10 	rsbseq	r5, r0, r0, lsl pc
   11d48:	1212bb04 	andsne	fp, r2, #4, 22	; 0x1000
   11d4c:	00000003 	andeq	r0, r0, r3
   11d50:	00725f10 	rsbseq	r5, r2, r0, lsl pc
   11d54:	2507bc04 	strcs	fp, [r7, #-3076]	; 0xfffff3fc
   11d58:	04000000 	streq	r0, [r0], #-0
   11d5c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
   11d60:	2507bd04 	strcs	fp, [r7, #-3332]	; 0xfffff2fc
   11d64:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11d68:	0001c40c 	andeq	ip, r1, ip, lsl #8
   11d6c:	09be0400 	ldmibeq	lr!, {sl}
   11d70:	00000075 	andeq	r0, r0, r5, ror r0
   11d74:	08590c0c 	ldmdaeq	r9, {r2, r3, sl, fp}^
   11d78:	bf040000 	svclt	0x00040000
   11d7c:	00007509 	andeq	r7, r0, r9, lsl #10
   11d80:	5f100e00 	svcpl	0x00100e00
   11d84:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
   11d88:	02ea11c0 	rsceq	r1, sl, #192, 2	; 0x30
   11d8c:	0c100000 	ldceq	0, cr0, [r0], {-0}
   11d90:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   11d94:	2507c104 	strcs	ip, [r7, #-260]	; 0xfffffefc
   11d98:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11d9c:	00030c0c 	andeq	r0, r3, ip, lsl #24
   11da0:	0ac80400 	beq	ff212da8 <_estack+0xdf20dda8>
   11da4:	00000117 	andeq	r0, r0, r7, lsl r1
   11da8:	1d2f0c1c 	stcne	12, cr0, [pc, #-112]!	; 11d40 <__exidx_end+0xc100>
   11dac:	ca040000 	bgt	111db4 <__ccfg+0xf1e0c>
   11db0:	0005df1d 	andeq	sp, r5, sp, lsl pc
   11db4:	f60c2000 			; <UNDEFINED> instruction: 0xf60c2000
   11db8:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
   11dbc:	06091dcc 	streq	r1, [r9], -ip, asr #27
   11dc0:	0c240000 	stceq	0, cr0, [r4], #-0
   11dc4:	00000ee4 	andeq	r0, r0, r4, ror #29
   11dc8:	2d0dcf04 	stccs	15, cr12, [sp, #-16]
   11dcc:	28000006 	stmdacs	r0, {r1, r2}
   11dd0:	001ce40c 	andseq	lr, ip, ip, lsl #8
   11dd4:	09d00400 	ldmibeq	r0, {sl}^
   11dd8:	00000647 	andeq	r0, r0, r7, asr #12
   11ddc:	755f102c 	ldrbvc	r1, [pc, #-44]	; 11db8 <__exidx_end+0xc178>
   11de0:	d3040062 	movwle	r0, #16482	; 0x4062
   11de4:	0002ea11 	andeq	lr, r2, r1, lsl sl
   11de8:	5f103000 	svcpl	0x00103000
   11dec:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
   11df0:	031212d4 	tsteq	r2, #212, 4	; 0x4000000d
   11df4:	10380000 	eorsne	r0, r8, r0
   11df8:	0072755f 	rsbseq	r7, r2, pc, asr r5
   11dfc:	2507d504 	strcs	sp, [r7, #-1284]	; 0xfffffafc
   11e00:	3c000000 	stccc	0, cr0, [r0], {-0}
   11e04:	000f1b0c 	andeq	r1, pc, ip, lsl #22
   11e08:	11d80400 	bicsne	r0, r8, r0, lsl #8
   11e0c:	0000064d 	andeq	r0, r0, sp, asr #12
   11e10:	0e640c40 	cdpeq	12, 6, cr0, cr4, cr0, {2}
   11e14:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
   11e18:	00065d11 	andeq	r5, r6, r1, lsl sp
   11e1c:	5f104300 	svcpl	0x00104300
   11e20:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
   11e24:	02ea11dc 	rsceq	r1, sl, #220, 2	; 0x37
   11e28:	0c440000 	mareq	acc0, r0, r4
   11e2c:	00000b74 	andeq	r0, r0, r4, ror fp
   11e30:	2507df04 	strcs	sp, [r7, #-3844]	; 0xfffff0fc
   11e34:	4c000000 	stcmi	0, cr0, [r0], {-0}
   11e38:	00047c0c 	andeq	r7, r4, ip, lsl #24
   11e3c:	0ae00400 	beq	ff812e44 <_estack+0xdf80de44>
   11e40:	0000009d 	muleq	r0, sp, r0
   11e44:	47530c50 			; <UNDEFINED> instruction: 0x47530c50
   11e48:	e3040000 	movw	r0, #16384	; 0x4000
   11e4c:	00047912 	andeq	r7, r4, r2, lsl r9
   11e50:	9a0c5400 	bls	326e58 <__ccfg+0x306eb0>
   11e54:	0400000b 	streq	r0, [r0], #-11
   11e58:	01360ce7 	teqeq	r6, r7, ror #25
   11e5c:	0c580000 	mraeq	r0, r8, acc0
   11e60:	00000a1e 	andeq	r0, r0, lr, lsl sl
   11e64:	0b0ee904 	bleq	3cc27c <__ccfg+0x3ac2d4>
   11e68:	5c000001 	stcpl	0, cr0, [r0], {1}
   11e6c:	000e970c 	andeq	r9, lr, ip, lsl #14
   11e70:	09ea0400 	stmibeq	sl!, {sl}^
   11e74:	00000025 	andeq	r0, r0, r5, lsr #32
   11e78:	25150064 	ldrcs	r0, [r5, #-100]	; 0xffffff9c
   11e7c:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
   11e80:	16000004 	strne	r0, [r0], -r4
   11e84:	00000479 	andeq	r0, r0, r9, ror r4
   11e88:	00011716 	andeq	r1, r1, r6, lsl r7
   11e8c:	05cd1600 	strbeq	r1, [sp, #1536]	; 0x600
   11e90:	25160000 	ldrcs	r0, [r6, #-0]
   11e94:	00000000 	andeq	r0, r0, r0
   11e98:	04840411 	streq	r0, [r4], #1041	; 0x411
   11e9c:	79060000 	stmdbvc	r6, {}	; <UNPREDICTABLE>
   11ea0:	17000004 	strne	r0, [r0, -r4]
   11ea4:	00000d5f 	andeq	r0, r0, pc, asr sp
   11ea8:	65040428 	strvs	r0, [r4, #-1064]	; 0xfffffbd8
   11eac:	05cd0802 	strbeq	r0, [sp, #2050]	; 0x802
   11eb0:	04180000 	ldreq	r0, [r8], #-0
   11eb4:	04000009 	streq	r0, [r0], #-9
   11eb8:	25070267 	strcs	r0, [r7, #-615]	; 0xfffffd99
   11ebc:	00000000 	andeq	r0, r0, r0
   11ec0:	0007e218 	andeq	lr, r7, r8, lsl r2
   11ec4:	026c0400 	rsbeq	r0, ip, #0, 8
   11ec8:	0006b90b 	andeq	fp, r6, fp, lsl #18
   11ecc:	f7180400 			; <UNDEFINED> instruction: 0xf7180400
   11ed0:	04000002 	streq	r0, [r0], #-2
   11ed4:	b914026c 	ldmdblt	r4, {r2, r3, r5, r6, r9}
   11ed8:	08000006 	stmdaeq	r0, {r1, r2}
   11edc:	000f0a18 	andeq	r0, pc, r8, lsl sl	; <UNPREDICTABLE>
   11ee0:	026c0400 	rsbeq	r0, ip, #0, 8
   11ee4:	0006b91e 	andeq	fp, r6, lr, lsl r9
   11ee8:	7f180c00 	svcvc	0x00180c00
   11eec:	04000005 	streq	r0, [r0], #-5
   11ef0:	2508026e 	strcs	r0, [r8, #-622]	; 0xfffffd92
   11ef4:	10000000 	andne	r0, r0, r0
   11ef8:	0004d418 	andeq	sp, r4, r8, lsl r4
   11efc:	026f0400 	rsbeq	r0, pc, #0, 8
   11f00:	0008b908 	andeq	fp, r8, r8, lsl #18
   11f04:	77181400 	ldrvc	r1, [r8, -r0, lsl #8]
   11f08:	0400000e 	streq	r0, [r0], #-14
   11f0c:	25070272 	strcs	r0, [r7, #-626]	; 0xfffffd8e
   11f10:	30000000 	andcc	r0, r0, r0
   11f14:	0042a118 	subeq	sl, r2, r8, lsl r1
   11f18:	02730400 	rsbseq	r0, r3, #0, 8
   11f1c:	00095016 	andeq	r5, r9, r6, lsl r0
   11f20:	8a183400 	bhi	61ef28 <__ccfg+0x5fef80>
   11f24:	04000007 	streq	r0, [r0], #-7
   11f28:	25070275 	strcs	r0, [r7, #-629]	; 0xfffffd8b
   11f2c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   11f30:	00088418 	andeq	r8, r8, r8, lsl r4
   11f34:	02770400 	rsbseq	r0, r7, #0, 8
   11f38:	0009610a 	andeq	r6, r9, sl, lsl #2
   11f3c:	50183c00 	andspl	r3, r8, r0, lsl #24
   11f40:	04000003 	streq	r0, [r0], #-3
   11f44:	9c13027a 	lfmls	f0, 4, [r3], {122}	; 0x7a
   11f48:	40000001 	andmi	r0, r0, r1
   11f4c:	00040b18 	andeq	r0, r4, r8, lsl fp
   11f50:	027b0400 	rsbseq	r0, fp, #0, 8
   11f54:	00002507 	andeq	r2, r0, r7, lsl #10
   11f58:	09184400 	ldmdbeq	r8, {sl, lr}
   11f5c:	04000006 	streq	r0, [r0], #-6
   11f60:	9c13027c 	lfmls	f0, 4, [r3], {124}	; 0x7c
   11f64:	48000001 	stmdami	r0, {r0}
   11f68:	00081f18 	andeq	r1, r8, r8, lsl pc
   11f6c:	027d0400 	rsbseq	r0, sp, #0, 8
   11f70:	00096714 	andeq	r6, r9, r4, lsl r7
   11f74:	5a184c00 	bpl	624f7c <__ccfg+0x604fd4>
   11f78:	0400000b 	streq	r0, [r0], #-11
   11f7c:	25070280 	strcs	r0, [r7, #-640]	; 0xfffffd80
   11f80:	50000000 	andpl	r0, r0, r0
   11f84:	000c5318 	andeq	r5, ip, r8, lsl r3
   11f88:	02810400 	addeq	r0, r1, #0, 8
   11f8c:	0005cd09 	andeq	ip, r5, r9, lsl #26
   11f90:	6d185400 	cfldrsvs	mvf5, [r8, #-0]
   11f94:	0400000c 	streq	r0, [r0], #-12
   11f98:	940702a4 	strls	r0, [r7], #-676	; 0xfffffd5c
   11f9c:	58000008 	stmdapl	r0, {r3}
   11fa0:	000a1619 	andeq	r1, sl, r9, lsl r6
   11fa4:	02a80400 	adceq	r0, r8, #0, 8
   11fa8:	0002cd13 	andeq	ip, r2, r3, lsl sp
   11fac:	19014800 	stmdbne	r1, {fp, lr}
   11fb0:	000006ae 	andeq	r0, r0, lr, lsr #13
   11fb4:	1202a904 	andne	sl, r2, #4, 18	; 0x10000
   11fb8:	0000028a 	andeq	r0, r0, sl, lsl #5
   11fbc:	9519014c 	ldrls	r0, [r9, #-332]	; 0xfffffeb4
   11fc0:	04000006 	streq	r0, [r0], #-6
   11fc4:	780c02ad 	stmdavc	ip, {r0, r2, r3, r5, r7, r9}
   11fc8:	dc000009 	stcle	0, cr0, [r0], {9}
   11fcc:	0ce31902 			; <UNDEFINED> instruction: 0x0ce31902
   11fd0:	b2040000 	andlt	r0, r4, #0
   11fd4:	067a1002 	ldrbteq	r1, [sl], -r2
   11fd8:	02e00000 	rsceq	r0, r0, #0
   11fdc:	000aa619 	andeq	sl, sl, r9, lsl r6
   11fe0:	02b40400 	adcseq	r0, r4, #0, 8
   11fe4:	0009840a 	andeq	r8, r9, sl, lsl #8
   11fe8:	0002ec00 	andeq	lr, r2, r0, lsl #24
   11fec:	05d30411 	ldrbeq	r0, [r3, #1041]	; 0x411
   11ff0:	01040000 	mrseq	r0, (UNDEF: 4)
   11ff4:	000c6408 	andeq	r6, ip, r8, lsl #8
   11ff8:	05d30600 	ldrbeq	r0, [r3, #1536]	; 0x600
   11ffc:	04110000 	ldreq	r0, [r1], #-0
   12000:	0000045b 	andeq	r0, r0, fp, asr r4
   12004:	00002515 	andeq	r2, r0, r5, lsl r5
   12008:	00060300 	andeq	r0, r6, r0, lsl #6
   1200c:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   12010:	17160000 	ldrne	r0, [r6, -r0]
   12014:	16000001 	strne	r0, [r0], -r1
   12018:	00000603 	andeq	r0, r0, r3, lsl #12
   1201c:	00002516 	andeq	r2, r0, r6, lsl r5
   12020:	04110000 	ldreq	r0, [r1], #-0
   12024:	000005da 	ldrdeq	r0, [r0], -sl
   12028:	05e50411 	strbeq	r0, [r5, #1041]!	; 0x411
   1202c:	a9150000 	ldmdbge	r5, {}	; <UNPREDICTABLE>
   12030:	2d000000 	stccs	0, cr0, [r0, #-0]
   12034:	16000006 	strne	r0, [r0], -r6
   12038:	00000479 	andeq	r0, r0, r9, ror r4
   1203c:	00011716 	andeq	r1, r1, r6, lsl r7
   12040:	00a91600 	adceq	r1, r9, r0, lsl #12
   12044:	25160000 	ldrcs	r0, [r6, #-0]
   12048:	00000000 	andeq	r0, r0, r0
   1204c:	060f0411 			; <UNDEFINED> instruction: 0x060f0411
   12050:	25150000 	ldrcs	r0, [r5, #-0]
   12054:	47000000 	strmi	r0, [r0, -r0]
   12058:	16000006 	strne	r0, [r0], -r6
   1205c:	00000479 	andeq	r0, r0, r9, ror r4
   12060:	00011716 	andeq	r1, r1, r6, lsl r7
   12064:	04110000 	ldreq	r0, [r1], #-0
   12068:	00000633 	andeq	r0, r0, r3, lsr r6
   1206c:	00006e09 	andeq	r6, r0, r9, lsl #28
   12070:	00065d00 	andeq	r5, r6, r0, lsl #26
   12074:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12078:	00020000 	andeq	r0, r2, r0
   1207c:	00006e09 	andeq	r6, r0, r9, lsl #28
   12080:	00066d00 	andeq	r6, r6, r0, lsl #26
   12084:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12088:	00000000 	andeq	r0, r0, r0
   1208c:	00046e05 	andeq	r6, r4, r5, lsl #28
   12090:	01240400 			; <UNDEFINED> instruction: 0x01240400
   12094:	0003181a 	andeq	r1, r3, sl, lsl r8
   12098:	0cdd1a00 	vldmiaeq	sp, {s3-s2}
   1209c:	040c0000 	streq	r0, [ip], #-0
   120a0:	b3080128 	movwlt	r0, #33064	; 0x8128
   120a4:	18000006 	stmdane	r0, {r1, r2}
   120a8:	00000ec4 	andeq	r0, r0, r4, asr #29
   120ac:	11012a04 	tstne	r1, r4, lsl #20
   120b0:	000006b3 			; <UNDEFINED> instruction: 0x000006b3
   120b4:	0bce1800 	bleq	ff3980bc <_estack+0xdf3930bc>
   120b8:	2b040000 	blcs	1120c0 <__ccfg+0xf2118>
   120bc:	00250701 	eoreq	r0, r5, r1, lsl #14
   120c0:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
   120c4:	00000772 	andeq	r0, r0, r2, ror r7
   120c8:	0b012c04 	bleq	5d0e0 <__ccfg+0x3d138>
   120cc:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   120d0:	04110008 	ldreq	r0, [r1], #-8
   120d4:	0000067a 	andeq	r0, r0, sl, ror r6
   120d8:	066d0411 			; <UNDEFINED> instruction: 0x066d0411
   120dc:	da1a0000 	ble	6920e4 <__ccfg+0x67213c>
   120e0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   120e4:	08014404 	stmdaeq	r1, {r2, sl, lr}
   120e8:	000006f8 	strdeq	r0, [r0], -r8
   120ec:	00164b18 	andseq	r4, r6, r8, lsl fp
   120f0:	01450400 	cmpeq	r5, r0, lsl #8
   120f4:	0006f812 	andeq	pc, r6, r2, lsl r8	; <UNPREDICTABLE>
   120f8:	31180000 	tstcc	r8, r0
   120fc:	04000008 	streq	r0, [r0], #-8
   12100:	f8120146 			; <UNDEFINED> instruction: 0xf8120146
   12104:	06000006 	streq	r0, [r0], -r6
   12108:	0014fd18 	andseq	pc, r4, r8, lsl sp	; <UNPREDICTABLE>
   1210c:	01470400 	cmpeq	r7, r0, lsl #8
   12110:	00007c12 	andeq	r7, r0, r2, lsl ip
   12114:	09000c00 	stmdbeq	r0, {sl, fp}
   12118:	0000007c 	andeq	r0, r0, ip, ror r0
   1211c:	00000708 	andeq	r0, r0, r8, lsl #14
   12120:	0000380a 	andeq	r3, r0, sl, lsl #16
   12124:	1b000200 	blne	1292c <__exidx_end+0xccec>
   12128:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
   1212c:	00081d07 	andeq	r1, r8, r7, lsl #26
   12130:	0e6a1800 	cdpeq	8, 6, cr1, cr10, cr0, {0}
   12134:	87040000 	strhi	r0, [r4, -r0]
   12138:	00381802 	eorseq	r1, r8, r2, lsl #16
   1213c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   12140:	00000ceb 	andeq	r0, r0, fp, ror #25
   12144:	12028804 	andne	r8, r2, #4, 16	; 0x40000
   12148:	000005cd 	andeq	r0, r0, sp, asr #11
   1214c:	04381804 	ldrteq	r1, [r8], #-2052	; 0xfffff7fc
   12150:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
   12154:	081d1002 	ldmdaeq	sp, {r1, ip}
   12158:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
   1215c:	00000b43 	andeq	r0, r0, r3, asr #22
   12160:	17028a04 	strne	r8, [r2, -r4, lsl #20]
   12164:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   12168:	07e91824 	strbeq	r1, [r9, r4, lsr #16]!
   1216c:	8b040000 	blhi	112174 <__ccfg+0xf21cc>
   12170:	00250f02 	eoreq	r0, r5, r2, lsl #30
   12174:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
   12178:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
   1217c:	2c028c04 	stccs	12, cr8, [r2], {4}
   12180:	00000096 	muleq	r0, r6, r0
   12184:	007f1850 	rsbseq	r1, pc, r0, asr r8	; <UNPREDICTABLE>
   12188:	8d040000 	stchi	0, cr0, [r4, #-0]
   1218c:	06bf1a02 	ldrteq	r1, [pc], r2, lsl #20
   12190:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   12194:	00000639 	andeq	r0, r0, r9, lsr r6
   12198:	16028e04 	strne	r8, [r2], -r4, lsl #28
   1219c:	0000010b 	andeq	r0, r0, fp, lsl #2
   121a0:	0cf81868 	ldcleq	8, cr1, [r8], #416	; 0x1a0
   121a4:	8f040000 	svchi	0x00040000
   121a8:	010b1602 	tsteq	fp, r2, lsl #12
   121ac:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
   121b0:	00000071 	andeq	r0, r0, r1, ror r0
   121b4:	16029004 	strne	r9, [r2], -r4
   121b8:	0000010b 	andeq	r0, r0, fp, lsl #2
   121bc:	0b6a1878 	bleq	1a983a4 <__ccfg+0x1a783fc>
   121c0:	91040000 	mrsls	r0, (UNDEF: 4)
   121c4:	082d1002 	stmdaeq	sp!, {r1, ip}
   121c8:	18800000 	stmne	r0, {}	; <UNPREDICTABLE>
   121cc:	00000415 	andeq	r0, r0, r5, lsl r4
   121d0:	10029204 	andne	r9, r2, r4, lsl #4
   121d4:	0000083d 	andeq	r0, r0, sp, lsr r8
   121d8:	0c8d1888 	stceq	8, cr1, [sp], {136}	; 0x88
   121dc:	93040000 	movwls	r0, #16384	; 0x4000
   121e0:	00250f02 	eoreq	r0, r5, r2, lsl #30
   121e4:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
   121e8:	000002ac 	andeq	r0, r0, ip, lsr #5
   121ec:	16029404 	strne	r9, [r2], -r4, lsl #8
   121f0:	0000010b 	andeq	r0, r0, fp, lsl #2
   121f4:	069f18a4 	ldreq	r1, [pc], r4, lsr #17
   121f8:	95040000 	strls	r0, [r4, #-0]
   121fc:	010b1602 	tsteq	fp, r2, lsl #12
   12200:	18ac0000 	stmiane	ip!, {}	; <UNPREDICTABLE>
   12204:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
   12208:	16029604 	strne	r9, [r2], -r4, lsl #12
   1220c:	0000010b 	andeq	r0, r0, fp, lsl #2
   12210:	084a18b4 	stmdaeq	sl, {r2, r4, r5, r7, fp, ip}^
   12214:	97040000 	strls	r0, [r4, -r0]
   12218:	010b1602 	tsteq	fp, r2, lsl #12
   1221c:	18bc0000 	ldmne	ip!, {}	; <UNPREDICTABLE>
   12220:	00000628 	andeq	r0, r0, r8, lsr #12
   12224:	16029804 	strne	r9, [r2], -r4, lsl #16
   12228:	0000010b 	andeq	r0, r0, fp, lsl #2
   1222c:	090218c4 	stmdbeq	r2, {r2, r6, r7, fp, ip}
   12230:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
   12234:	00250802 	eoreq	r0, r5, r2, lsl #16
   12238:	00cc0000 	sbceq	r0, ip, r0
   1223c:	0005d309 	andeq	sp, r5, r9, lsl #6
   12240:	00082d00 	andeq	r2, r8, r0, lsl #26
   12244:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12248:	00190000 	andseq	r0, r9, r0
   1224c:	0005d309 	andeq	sp, r5, r9, lsl #6
   12250:	00083d00 	andeq	r3, r8, r0, lsl #26
   12254:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12258:	00070000 	andeq	r0, r7, r0
   1225c:	0005d309 	andeq	sp, r5, r9, lsl #6
   12260:	00084d00 	andeq	r4, r8, r0, lsl #26
   12264:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12268:	00170000 	andseq	r0, r7, r0
   1226c:	9e04f01b 	mcrls	0, 0, pc, cr4, cr11, {0}	; <UNPREDICTABLE>
   12270:	08740702 	ldmdaeq	r4!, {r1, r8, r9, sl}^
   12274:	c0180000 	andsgt	r0, r8, r0
   12278:	04000003 	streq	r0, [r0], #-3
   1227c:	741b02a1 	ldrvc	r0, [fp], #-673	; 0xfffffd5f
   12280:	00000008 	andeq	r0, r0, r8
   12284:	000f1218 	andeq	r1, pc, r8, lsl r2	; <UNPREDICTABLE>
   12288:	02a20400 	adceq	r0, r2, #0, 8
   1228c:	00088418 	andeq	r8, r8, r8, lsl r4
   12290:	09007800 	stmdbeq	r0, {fp, ip, sp, lr}
   12294:	00000312 	andeq	r0, r0, r2, lsl r3
   12298:	00000884 	andeq	r0, r0, r4, lsl #17
   1229c:	0000380a 	andeq	r3, r0, sl, lsl #16
   122a0:	09001d00 	stmdbeq	r0, {r8, sl, fp, ip}
   122a4:	00000038 	andeq	r0, r0, r8, lsr r0
   122a8:	00000894 	muleq	r0, r4, r8
   122ac:	0000380a 	andeq	r3, r0, sl, lsl #16
   122b0:	1c001d00 	stcne	13, cr1, [r0], {-0}
   122b4:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
   122b8:	0008b903 	andeq	fp, r8, r3, lsl #18
   122bc:	0d5f1d00 	ldcleq	13, cr1, [pc, #-0]	; 122c4 <__exidx_end+0xc684>
   122c0:	9a040000 	bls	1122c8 <__ccfg+0xf2320>
   122c4:	07080b02 	streq	r0, [r8, -r2, lsl #22]
   122c8:	521d0000 	andspl	r0, sp, #0
   122cc:	0400000b 	streq	r0, [r0], #-11
   122d0:	4d0b02a3 	sfmmi	f0, 4, [fp, #-652]	; 0xfffffd74
   122d4:	00000008 	andeq	r0, r0, r8
   122d8:	0005d309 	andeq	sp, r5, r9, lsl #6
   122dc:	0008c900 	andeq	ip, r8, r0, lsl #18
   122e0:	00380a00 	eorseq	r0, r8, r0, lsl #20
   122e4:	00180000 	andseq	r0, r8, r0
   122e8:	000eca12 	andeq	ip, lr, r2, lsl sl
   122ec:	06016c00 	streq	r6, [r1], -r0, lsl #24
   122f0:	095008b2 	ldmdbeq	r0, {r1, r4, r5, r7, fp}^
   122f4:	320c0000 	andcc	r0, ip, #0
   122f8:	06000045 	streq	r0, [r0], -r5, asr #32
   122fc:	0df80bb4 			; <UNDEFINED> instruction: 0x0df80bb4
   12300:	0c000000 	stceq	0, cr0, [r0], {-0}
   12304:	000044e7 	andeq	r4, r0, r7, ror #9
   12308:	320bb506 	andcc	fp, fp, #25165824	; 0x1800000
   1230c:	e000000e 	and	r0, r0, lr
   12310:	00437d0c 	subeq	r7, r3, ip, lsl #26
   12314:	0bb70600 	bleq	fedd3b1c <_estack+0xdedceb1c>
   12318:	00000e61 	andeq	r0, r0, r1, ror #28
   1231c:	42ed0ce4 	rscmi	r0, sp, #228, 24	; 0xe400
   12320:	b9060000 	stmdblt	r6, {}	; <UNPREDICTABLE>
   12324:	0000250a 	andeq	r2, r0, sl, lsl #10
   12328:	b90ce800 	stmdblt	ip, {fp, sp, lr, pc}
   1232c:	06000042 	streq	r0, [r0], -r2, asr #32
   12330:	05cd0bba 	strbeq	r0, [sp, #3002]	; 0xbba
   12334:	0cec0000 	stcleq	0, cr0, [ip]
   12338:	000042e7 	andeq	r4, r0, r7, ror #5
   1233c:	d212bb06 	andsle	fp, r2, #6144	; 0x1800
   12340:	f0000009 			; <UNDEFINED> instruction: 0xf0000009
   12344:	0043fb13 	subeq	pc, r3, r3, lsl fp	; <UNPREDICTABLE>
   12348:	0bbd0600 	bleq	fef53b50 <_estack+0xdef4eb50>
   1234c:	00000e67 	andeq	r0, r0, r7, ror #28
   12350:	1c130128 	ldfnes	f0, [r3], {40}	; 0x28
   12354:	06000044 	streq	r0, [r0], -r4, asr #32
   12358:	0e770bbe 	vmoveq.s8	r0, d23[5]
   1235c:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
   12360:	00436d13 	subeq	r6, r3, r3, lsl sp
   12364:	0bbf0600 	bleq	fefd3b6c <_estack+0xdefceb6c>
   12368:	00000e77 	andeq	r0, r0, r7, ror lr
   1236c:	1100014a 	tstne	r0, sl, asr #2
   12370:	0008c904 	andeq	ip, r8, r4, lsl #18
   12374:	09611e00 	stmdbeq	r1!, {r9, sl, fp, ip}^
   12378:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   1237c:	00000004 	andeq	r0, r0, r4
   12380:	09560411 	ldmdbeq	r6, {r0, r4, sl}^
   12384:	04110000 	ldreq	r0, [r1], #-0
   12388:	0000019c 	muleq	r0, ip, r1
   1238c:	0009781e 	andeq	r7, r9, lr, lsl r8
   12390:	00251600 	eoreq	r1, r5, r0, lsl #12
   12394:	11000000 	mrsne	r0, (UNDEF: 0)
   12398:	00097e04 	andeq	r7, r9, r4, lsl #28
   1239c:	6d041100 	stfvss	f1, [r4, #-0]
   123a0:	09000009 	stmdbeq	r0, {r0, r3}
   123a4:	0000066d 	andeq	r0, r0, sp, ror #12
   123a8:	00000994 	muleq	r0, r4, r9
   123ac:	0000380a 	andeq	r3, r0, sl, lsl #16
   123b0:	1f000200 	svcne	0x00000200
   123b4:	00000ac2 	andeq	r0, r0, r2, asr #21
   123b8:	17033304 	strne	r3, [r3, -r4, lsl #6]
   123bc:	00000479 	andeq	r0, r0, r9, ror r4
   123c0:	000abb1f 	andeq	fp, sl, pc, lsl fp
   123c4:	03340400 	teqeq	r4, #0, 8
   123c8:	00047f1d 	andeq	r7, r4, sp, lsl pc
   123cc:	b9041100 	stmdblt	r4, {r8, ip}
   123d0:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
   123d4:	000009ae 	andeq	r0, r0, lr, lsr #19
   123d8:	44432120 	strbmi	r2, [r3], #-288	; 0xfffffee0
   123dc:	67070000 	strvs	r0, [r7, -r0]
   123e0:	0005cd0e 	andeq	ip, r5, lr, lsl #26
   123e4:	08b60300 	ldmeq	r6!, {r8, r9}
   123e8:	56080000 	strpl	r0, [r8], -r0
   123ec:	00010b14 	andeq	r0, r1, r4, lsl fp
   123f0:	42e70f00 	rscmi	r0, r7, #0, 30
   123f4:	09380000 	ldmdbeq	r8!, {}	; <UNPREDICTABLE>
   123f8:	0b18082a 	bleq	6144a8 <__ccfg+0x5f4500>
   123fc:	d00c0000 	andle	r0, ip, r0
   12400:	09000043 	stmdbeq	r0, {r0, r1, r6}
   12404:	05cd092c 	strbeq	r0, [sp, #2348]	; 0x92c
   12408:	0c000000 	stceq	0, cr0, [r0], {-0}
   1240c:	000044f2 	strdeq	r4, [r0], -r2
   12410:	cd092d09 	stcgt	13, cr2, [r9, #-36]	; 0xffffffdc
   12414:	04000005 	streq	r0, [r0], #-5
   12418:	0043ab0c 	subeq	sl, r3, ip, lsl #22
   1241c:	092e0900 	stmdbeq	lr!, {r8, fp}
   12420:	000005cd 	andeq	r0, r0, sp, asr #11
   12424:	43120c08 	tstmi	r2, #8, 24	; 0x800
   12428:	2f090000 	svccs	0x00090000
   1242c:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12430:	a90c0c00 	stmdbge	ip, {sl, fp}
   12434:	09000042 	stmdbeq	r0, {r1, r6}
   12438:	05cd0930 	strbeq	r0, [sp, #2352]	; 0x930
   1243c:	0c100000 	ldceq	0, cr0, [r0], {-0}
   12440:	000043cc 	andeq	r4, r0, ip, asr #7
   12444:	cd093109 	stfgts	f3, [r9, #-36]	; 0xffffffdc
   12448:	14000005 	strne	r0, [r0], #-5
   1244c:	0044ee0c 	subeq	lr, r4, ip, lsl #28
   12450:	09320900 	ldmdbeq	r2!, {r8, fp}
   12454:	000005cd 	andeq	r0, r0, sp, asr #11
   12458:	43a70c18 			; <UNDEFINED> instruction: 0x43a70c18
   1245c:	33090000 	movwcc	r0, #36864	; 0x9000
   12460:	0005cd09 	andeq	ip, r5, r9, lsl #26
   12464:	0e0c1c00 	cdpeq	12, 0, cr1, cr12, cr0, {0}
   12468:	09000044 	stmdbeq	r0, {r2, r6}
   1246c:	05cd0934 	strbeq	r0, [sp, #2356]	; 0x934
   12470:	0c200000 	stceq	0, cr0, [r0], #-0
   12474:	000043ed 	andeq	r4, r0, sp, ror #7
   12478:	cd093509 	cfstr32gt	mvfx3, [r9, #-36]	; 0xffffffdc
   1247c:	24000005 	strcs	r0, [r0], #-5
   12480:	0046520c 	subeq	r5, r6, ip, lsl #4
   12484:	08360900 	ldmdaeq	r6!, {r8, fp}
   12488:	000005d3 	ldrdeq	r0, [r0], -r3
   1248c:	46560c28 	ldrbmi	r0, [r6], -r8, lsr #24
   12490:	37090000 	strcc	r0, [r9, -r0]
   12494:	0005d308 	andeq	sp, r5, r8, lsl #6
   12498:	be0c2900 	vmlalt.f16	s4, s24, s0	; <UNPREDICTABLE>
   1249c:	09000043 	stmdbeq	r0, {r0, r1, r6}
   124a0:	05d30838 	ldrbeq	r0, [r3, #2104]	; 0x838
   124a4:	0c2a0000 	stceq	0, cr0, [sl], #-0
   124a8:	00004451 	andeq	r4, r0, r1, asr r4
   124ac:	d3083909 	movwle	r3, #35081	; 0x8909
   124b0:	2b000005 	blcs	124cc <__exidx_end+0xc88c>
   124b4:	0044640c 	subeq	r6, r4, ip, lsl #8
   124b8:	083a0900 	ldmdaeq	sl!, {r8, fp}
   124bc:	000005d3 	ldrdeq	r0, [r0], -r3
   124c0:	42d80c2c 	sbcsmi	r0, r8, #44, 24	; 0x2c00
   124c4:	3b090000 	blcc	2524cc <__ccfg+0x232524>
   124c8:	0005d308 	andeq	sp, r5, r8, lsl #6
   124cc:	9b0c2d00 	blls	31d8d4 <__ccfg+0x2fd92c>
   124d0:	09000043 	stmdbeq	r0, {r0, r1, r6}
   124d4:	05d3083c 	ldrbeq	r0, [r3, #2108]	; 0x83c
   124d8:	0c2e0000 	stceq	0, cr0, [lr], #-0
   124dc:	00004541 	andeq	r4, r0, r1, asr #10
   124e0:	d3083d09 	movwle	r3, #36105	; 0x8d09
   124e4:	2f000005 	svccs	0x00000005
   124e8:	0044600c 	subeq	r6, r4, ip
   124ec:	083e0900 	ldmdaeq	lr!, {r8, fp}
   124f0:	000005d3 	ldrdeq	r0, [r0], -r3
   124f4:	42d40c30 	sbcsmi	r0, r4, #48, 24	; 0x3000
   124f8:	3f090000 	svccc	0x00090000
   124fc:	0005d308 	andeq	sp, r5, r8, lsl #6
   12500:	3d0c3100 	stfccs	f3, [ip, #-0]
   12504:	09000045 	stmdbeq	r0, {r0, r2, r6}
   12508:	05d30840 	ldrbeq	r0, [r3, #2112]	; 0x840
   1250c:	0c320000 	ldceq	0, cr0, [r2], #-0
   12510:	000043ba 			; <UNDEFINED> instruction: 0x000043ba
   12514:	d3084109 	movwle	r4, #33033	; 0x8109
   12518:	33000005 	movwcc	r0, #5
   1251c:	00444d0c 	subeq	r4, r4, ip, lsl #26
   12520:	08420900 	stmdaeq	r2, {r8, fp}^
   12524:	000005d3 	ldrdeq	r0, [r0], -r3
   12528:	43970c34 	orrsmi	r0, r7, #52, 24	; 0x3400
   1252c:	43090000 	movwmi	r0, #36864	; 0x9000
   12530:	0005d308 	andeq	sp, r5, r8, lsl #6
   12534:	0f003500 	svceq	0x00003500
   12538:	000044d2 	ldrdeq	r4, [r0], -r2
   1253c:	08390608 	ldmdaeq	r9!, {r3, r9, sl}
   12540:	00000b40 	andeq	r0, r0, r0, asr #22
   12544:	0043750c 	subeq	r7, r3, ip, lsl #10
   12548:	0f3b0600 	svceq	0x003b0600
   1254c:	00000603 	andeq	r0, r0, r3, lsl #12
   12550:	43fb0c00 	mvnsmi	r0, #0, 24
   12554:	3c060000 	stccc	0, cr0, [r6], {-0}
   12558:	0006030f 	andeq	r0, r6, pc, lsl #6
   1255c:	06000400 	streq	r0, [r0], -r0, lsl #8
   12560:	00000b18 	andeq	r0, r0, r8, lsl fp
   12564:	00433721 	subeq	r3, r3, r1, lsr #14
   12568:	20420600 	subcs	r0, r2, r0, lsl #12
   1256c:	00000b40 	andeq	r0, r0, r0, asr #22
   12570:	00435f0f 	subeq	r5, r3, pc, lsl #30
   12574:	44063c00 	strmi	r3, [r6], #-3072	; 0xfffff400
   12578:	000c2208 	andeq	r2, ip, r8, lsl #4
   1257c:	43120c00 	tstmi	r2, #0, 24
   12580:	46060000 	strmi	r0, [r6], -r0
   12584:	0006030f 	andeq	r0, r6, pc, lsl #6
   12588:	a90c0000 	stmdbge	ip, {}	; <UNPREDICTABLE>
   1258c:	06000042 	streq	r0, [r0], -r2, asr #32
   12590:	06030f47 	streq	r0, [r3], -r7, asr #30
   12594:	0c040000 	stceq	0, cr0, [r4], {-0}
   12598:	000043cc 	andeq	r4, r0, ip, asr #7
   1259c:	030f4806 	movweq	r4, #63494	; 0xf806
   125a0:	08000006 	stmdaeq	r0, {r1, r2}
   125a4:	0044ee0c 	subeq	lr, r4, ip, lsl #28
   125a8:	0f490600 	svceq	0x00490600
   125ac:	00000603 	andeq	r0, r0, r3, lsl #12
   125b0:	43a70c0c 			; <UNDEFINED> instruction: 0x43a70c0c
   125b4:	4a060000 	bmi	1925bc <__ccfg+0x172614>
   125b8:	0006030f 	andeq	r0, r6, pc, lsl #6
   125bc:	0e0c1000 	cdpeq	0, 0, cr1, cr12, cr0, {0}
   125c0:	06000044 	streq	r0, [r0], -r4, asr #32
   125c4:	06030f4b 	streq	r0, [r3], -fp, asr #30
   125c8:	0c140000 	ldceq	0, cr0, [r4], {-0}
   125cc:	000043ed 	andeq	r4, r0, sp, ror #7
   125d0:	030f4c06 	movweq	r4, #64518	; 0xfc06
   125d4:	18000006 	stmdane	r0, {r1, r2}
   125d8:	0046520c 	subeq	r5, r6, ip, lsl #4
   125dc:	0f4d0600 	svceq	0x004d0600
   125e0:	00000603 	andeq	r0, r0, r3, lsl #12
   125e4:	46560c1c 			; <UNDEFINED> instruction: 0x46560c1c
   125e8:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
   125ec:	0006030f 	andeq	r0, r6, pc, lsl #6
   125f0:	be0c2000 	cdplt	0, 0, cr2, cr12, cr0, {0}
   125f4:	06000043 	streq	r0, [r0], -r3, asr #32
   125f8:	06030f4f 	streq	r0, [r3], -pc, asr #30
   125fc:	0c240000 	stceq	0, cr0, [r4], #-0
   12600:	00004451 	andeq	r4, r0, r1, asr r4
   12604:	030f5006 	movweq	r5, #61446	; 0xf006
   12608:	28000006 	stmdacs	r0, {r1, r2}
   1260c:	0044640c 	subeq	r6, r4, ip, lsl #8
   12610:	0f510600 	svceq	0x00510600
   12614:	00000603 	andeq	r0, r0, r3, lsl #12
   12618:	42d80c2c 	sbcsmi	r0, r8, #44, 24	; 0x2c00
   1261c:	52060000 	andpl	r0, r6, #0
   12620:	0006030f 	andeq	r0, r6, pc, lsl #6
   12624:	9b0c3000 	blls	31e62c <__ccfg+0x2fe684>
   12628:	06000043 	streq	r0, [r0], -r3, asr #32
   1262c:	06030f53 			; <UNDEFINED> instruction: 0x06030f53
   12630:	0c340000 	ldceq	0, cr0, [r4], #-0
   12634:	00004541 	andeq	r4, r0, r1, asr #10
   12638:	030f5406 	movweq	r5, #62470	; 0xf406
   1263c:	38000006 	stmdacc	r0, {r1, r2}
   12640:	0b510600 	bleq	1453e48 <__ccfg+0x1433ea0>
   12644:	1f210000 	svcne	0x00210000
   12648:	06000045 	streq	r0, [r0], -r5, asr #32
   1264c:	0c222365 	stceq	3, cr2, [r2], #-404	; 0xfffffe6c
   12650:	f60f0000 			; <UNDEFINED> instruction: 0xf60f0000
   12654:	0c000042 	stceq	0, cr0, [r0], {66}	; 0x42
   12658:	68086706 	stmdavs	r8, {r1, r2, r8, r9, sl, sp, lr}
   1265c:	0c00000c 	stceq	0, cr0, [r0], {12}
   12660:	000043d0 	ldrdeq	r4, [r0], -r0
   12664:	030f6906 	movweq	r6, #63750	; 0xf906
   12668:	00000006 	andeq	r0, r0, r6
   1266c:	0044f20c 	subeq	pc, r4, ip, lsl #4
   12670:	0f6a0600 	svceq	0x006a0600
   12674:	00000603 	andeq	r0, r0, r3, lsl #12
   12678:	43ab0c04 			; <UNDEFINED> instruction: 0x43ab0c04
   1267c:	6b060000 	blvs	192684 <__ccfg+0x1726dc>
   12680:	0006030f 	andeq	r0, r6, pc, lsl #6
   12684:	06000800 	streq	r0, [r0], -r0, lsl #16
   12688:	00000c33 	andeq	r0, r0, r3, lsr ip
   1268c:	00429721 	subeq	r9, r2, r1, lsr #14
   12690:	22720600 	rsbscs	r0, r2, #0, 12
   12694:	00000c68 	andeq	r0, r0, r8, ror #24
   12698:	0043220f 	subeq	r2, r3, pc, lsl #4
   1269c:	7406fc00 	strvc	pc, [r6], #-3072	; 0xfffff400
   126a0:	000d6408 	andeq	r6, sp, r8, lsl #8
   126a4:	6f6d1000 	svcvs	0x006d1000
   126a8:	7606006e 	strvc	r0, [r6], -lr, rrx
   126ac:	000d690f 	andeq	r6, sp, pc, lsl #18
   126b0:	6b0c0000 	blvs	3126b8 <__ccfg+0x2f2710>
   126b4:	06000046 	streq	r0, [r0], -r6, asr #32
   126b8:	0d690f77 	stcleq	15, cr0, [r9, #-476]!	; 0xfffffe24
   126bc:	0c300000 	ldceq	0, cr0, [r0], #-0
   126c0:	0000034b 	andeq	r0, r0, fp, asr #6
   126c4:	790f7806 	stmdbvc	pc, {r1, r2, fp, ip, sp, lr}	; <UNPREDICTABLE>
   126c8:	6000000d 	andvs	r0, r0, sp
   126cc:	0045170c 	subeq	r1, r5, ip, lsl #14
   126d0:	0f790600 	svceq	0x00790600
   126d4:	00000d79 	andeq	r0, r0, r9, ror sp
   126d8:	43b40c7c 			; <UNDEFINED> instruction: 0x43b40c7c
   126dc:	7a060000 	bvc	1926e4 <__ccfg+0x17273c>
   126e0:	0006030f 	andeq	r0, r6, pc, lsl #6
   126e4:	3d0c9800 	stccc	8, cr9, [ip, #-0]
   126e8:	06000044 	streq	r0, [r0], -r4, asr #32
   126ec:	06030f7b 			; <UNDEFINED> instruction: 0x06030f7b
   126f0:	0c9c0000 	ldceq	0, cr0, [ip], {0}
   126f4:	000043de 	ldrdeq	r4, [r0], -lr
   126f8:	030f7c06 	movweq	r7, #64518	; 0xfc06
   126fc:	a0000006 	andge	r0, r0, r6
   12700:	0043470c 	subeq	r4, r3, ip, lsl #14
   12704:	0f7d0600 	svceq	0x007d0600
   12708:	00000d89 	andeq	r0, r0, r9, lsl #27
   1270c:	43e40ca4 	mvnmi	r0, #164, 24	; 0xa400
   12710:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
   12714:	0006030f 	andeq	r0, r6, pc, lsl #6
   12718:	670cac00 	strvs	sl, [ip, -r0, lsl #24]
   1271c:	06000046 	streq	r0, [r0], -r6, asr #32
   12720:	0d690f7f 	stcleq	15, cr0, [r9, #-508]!	; 0xfffffe04
   12724:	0cb00000 	ldceq	0, cr0, [r0]
   12728:	000044b0 			; <UNDEFINED> instruction: 0x000044b0
   1272c:	030f8006 	movweq	r8, #61446	; 0xf006
   12730:	e0000006 	and	r0, r0, r6
   12734:	0045000c 	subeq	r0, r5, ip
   12738:	0f810600 	svceq	0x00810600
   1273c:	00000603 	andeq	r0, r0, r3, lsl #12
   12740:	726510e4 	rsbvc	r1, r5, #228	; 0xe4
   12744:	82060061 	andhi	r0, r6, #97	; 0x61
   12748:	0006030f 	andeq	r0, r6, pc, lsl #6
   1274c:	c80ce800 	stmdagt	ip, {fp, sp, lr, pc}
   12750:	06000044 	streq	r0, [r0], -r4, asr #32
   12754:	06030f83 	streq	r0, [r3], -r3, lsl #31
   12758:	0cec0000 	stcleq	0, cr0, [ip]
   1275c:	0000434d 	andeq	r4, r0, sp, asr #6
   12760:	030f8406 	movweq	r8, #62470	; 0xf406
   12764:	f0000006 			; <UNDEFINED> instruction: 0xf0000006
   12768:	0044dd0c 	subeq	sp, r4, ip, lsl #26
   1276c:	0f850600 	svceq	0x00850600
   12770:	00000603 	andeq	r0, r0, r3, lsl #12
   12774:	432c0cf4 			; <UNDEFINED> instruction: 0x432c0cf4
   12778:	86060000 	strhi	r0, [r6], -r0
   1277c:	0006030f 	andeq	r0, r6, pc, lsl #6
   12780:	0600f800 	streq	pc, [r0], -r0, lsl #16
   12784:	00000c79 	andeq	r0, r0, r9, ror ip
   12788:	00060309 	andeq	r0, r6, r9, lsl #6
   1278c:	000d7900 	andeq	r7, sp, r0, lsl #18
   12790:	00380a00 	eorseq	r0, r8, r0, lsl #20
   12794:	000b0000 	andeq	r0, fp, r0
   12798:	00060309 	andeq	r0, r6, r9, lsl #6
   1279c:	000d8900 	andeq	r8, sp, r0, lsl #18
   127a0:	00380a00 	eorseq	r0, r8, r0, lsl #20
   127a4:	00060000 	andeq	r0, r6, r0
   127a8:	00060309 	andeq	r0, r6, r9, lsl #6
   127ac:	000d9900 	andeq	r9, sp, r0, lsl #18
   127b0:	00380a00 	eorseq	r0, r8, r0, lsl #20
   127b4:	00010000 	andeq	r0, r1, r0
   127b8:	00430321 	subeq	r0, r3, r1, lsr #6
   127bc:	1f9a0600 	svcne	0x009a0600
   127c0:	00000d64 	andeq	r0, r0, r4, ror #26
   127c4:	0045090f 	subeq	r0, r5, pc, lsl #18
   127c8:	9c061000 	stcls	0, cr1, [r6], {-0}
   127cc:	000de708 	andeq	lr, sp, r8, lsl #14
   127d0:	44c00c00 	strbmi	r0, [r0], #3072	; 0xc00
   127d4:	9e060000 	cdpls	0, 0, cr0, cr6, cr0, {0}
   127d8:	0006030f 	andeq	r0, r6, pc, lsl #6
   127dc:	360c0000 	strcc	r0, [ip], -r0
   127e0:	06000044 	streq	r0, [r0], -r4, asr #32
   127e4:	06030f9f 			; <UNDEFINED> instruction: 0x06030f9f
   127e8:	0c040000 	stceq	0, cr0, [r4], {-0}
   127ec:	000044b9 			; <UNDEFINED> instruction: 0x000044b9
   127f0:	030fa006 	movweq	sl, #61446	; 0xf006
   127f4:	08000006 	stmdaeq	r0, {r1, r2}
   127f8:	0043590c 	subeq	r5, r3, ip, lsl #18
   127fc:	0fa10600 	svceq	0x00a10600
   12800:	00000603 	andeq	r0, r0, r3, lsl #12
   12804:	a506000c 	strge	r0, [r6, #-12]
   12808:	2100000d 	tstcs	r0, sp
   1280c:	00004384 	andeq	r4, r0, r4, lsl #7
   12810:	e723aa06 	str	sl, [r3, -r6, lsl #20]!
   12814:	0900000d 	stmdbeq	r0, {r0, r2, r3}
   12818:	000005d3 	ldrdeq	r0, [r0], -r3
   1281c:	00000e0e 	andeq	r0, r0, lr, lsl #28
   12820:	0000380a 	andeq	r3, r0, sl, lsl #16
   12824:	380a0600 	stmdacc	sl, {r9, sl}
   12828:	1f000000 	svcne	0x00000000
   1282c:	00251500 	eoreq	r1, r5, r0, lsl #10
   12830:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
   12834:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   12838:	16000004 	strne	r0, [r0], -r4
   1283c:	000005cd 	andeq	r0, r0, sp, asr #11
   12840:	00003f16 	andeq	r3, r0, r6, lsl pc
   12844:	0e2c1600 	cfmadda32eq	mvax0, mvax1, mvfx12, mvfx0
   12848:	11000000 	mrsne	r0, (UNDEF: 0)
   1284c:	0009c604 	andeq	ip, r9, r4, lsl #12
   12850:	0e041100 	adfeqs	f1, f4, f0
   12854:	1500000e 	strne	r0, [r0, #-14]
   12858:	00000025 	andeq	r0, r0, r5, lsr #32
   1285c:	00000e5b 	andeq	r0, r0, fp, asr lr
   12860:	00047916 	andeq	r7, r4, r6, lsl r9
   12864:	0e5b1600 	cdpeq	6, 5, cr1, cr11, cr0, {0}
   12868:	03160000 	tsteq	r6, #0
   1286c:	16000006 	strne	r0, [r0], -r6
   12870:	0000002c 	andeq	r0, r0, ip, lsr #32
   12874:	000e2c16 	andeq	r2, lr, r6, lsl ip
   12878:	04110000 	ldreq	r0, [r1], #-0
   1287c:	0000003f 	andeq	r0, r0, pc, lsr r0
   12880:	0e380411 	mrceq	4, 1, r0, cr8, cr1, {0}
   12884:	d3090000 	movwle	r0, #36864	; 0x9000
   12888:	77000005 	strvc	r0, [r0, -r5]
   1288c:	0a00000e 	beq	128cc <__exidx_end+0xcc8c>
   12890:	00000038 	andeq	r0, r0, r8, lsr r0
   12894:	d3090001 	movwle	r0, #36865	; 0x9001
   12898:	87000005 	strhi	r0, [r0, -r5]
   1289c:	0a00000e 	beq	128dc <__exidx_end+0xcc9c>
   128a0:	00000038 	andeq	r0, r0, r8, lsr r0
   128a4:	6422001f 	strtvs	r0, [r2], #-31	; 0xffffffe1
   128a8:	0a000016 	beq	12908 <__exidx_end+0xccc8>
   128ac:	0117091f 	tsteq	r7, pc, lsl r9
   128b0:	48fc0000 	ldmmi	ip!, {}^	; <UNPREDICTABLE>
   128b4:	00aa0000 	adceq	r0, sl, r0
   128b8:	9c010000 	stcls	0, cr0, [r1], {-0}
   128bc:	00000f28 	andeq	r0, r0, r8, lsr #30
   128c0:	0042c323 	subeq	ip, r2, r3, lsr #6
   128c4:	1a310100 	bne	c52ccc <__ccfg+0xc32d24>
   128c8:	00000119 	andeq	r0, r0, r9, lsl r1
   128cc:	62245001 	eorvs	r5, r4, #1
   128d0:	01000046 	tsteq	r0, r6, asr #32
   128d4:	09b41932 	ldmibeq	r4!, {r1, r4, r5, r8, fp, ip}
   128d8:	565c0000 	ldrbpl	r0, [ip], -r0
   128dc:	56500000 	ldrbpl	r0, [r0], -r0
   128e0:	4d240000 	stcmi	0, cr0, [r4, #-0]
   128e4:	01000046 	tsteq	r0, r6, asr #32
   128e8:	002c0933 	eoreq	r0, ip, r3, lsr r9
   128ec:	56d70000 	ldrbpl	r0, [r7], r0
   128f0:	56af0000 	strtpl	r0, [pc], r0
   128f4:	64250000 	strtvs	r0, [r5], #-0
   128f8:	01007473 	tsteq	r0, r3, ror r4
   128fc:	05cd0942 	strbeq	r0, [sp, #2370]	; 0x942
   12900:	58160000 	ldmdapl	r6, {}	; <UNPREDICTABLE>
   12904:	58060000 	stmdapl	r6, {}	; <UNPREDICTABLE>
   12908:	73250000 			; <UNDEFINED> instruction: 0x73250000
   1290c:	01006372 	tsteq	r0, r2, ror r3
   12910:	06030f43 	streq	r0, [r3], -r3, asr #30
   12914:	58990000 	ldmpl	r9, {}	; <UNPREDICTABLE>
   12918:	58890000 	stmpl	r9, {}	; <UNPREDICTABLE>
   1291c:	c8260000 	stmdagt	r6!, {}	; <UNPREDICTABLE>
   12920:	01000042 	tsteq	r0, r2, asr #32
   12924:	0f280944 	svceq	0x00280944
   12928:	592a0000 	stmdbpl	sl!, {}	; <UNPREDICTABLE>
   1292c:	59120000 	ldmdbpl	r2, {}	; <UNPREDICTABLE>
   12930:	4d260000 	stcmi	0, cr0, [r6, #-0]
   12934:	01000045 	tsteq	r0, r5, asr #32
   12938:	0f2e0f45 	svceq	0x002e0f45
   1293c:	5a210000 	bpl	852944 <__ccfg+0x83299c>
   12940:	5a090000 	bpl	252948 <__ccfg+0x2329a0>
   12944:	11000000 	mrsne	r0, (UNDEF: 0)
   12948:	00008304 	andeq	r8, r0, r4, lsl #6
   1294c:	8a041100 	bhi	116d54 <__ccfg+0xf6dac>
   12950:	00000000 	andeq	r0, r0, r0
   12954:	00000976 	andeq	r0, r0, r6, ror r9
   12958:	43af0004 			; <UNDEFINED> instruction: 0x43af0004
   1295c:	01040000 	mrseq	r0, (UNDEF: 4)
   12960:	00004559 	andeq	r4, r0, r9, asr r5
   12964:	0046710c 	subeq	r7, r6, ip, lsl #2
   12968:	0046a600 	subeq	sl, r6, r0, lsl #12
   1296c:	0049a800 	subeq	sl, r9, r0, lsl #16
   12970:	00004c00 	andeq	r4, r0, r0, lsl #24
   12974:	0090d300 	addseq	sp, r0, r0, lsl #6
   12978:	07040200 	streq	r0, [r4, -r0, lsl #4]
   1297c:	0000042b 	andeq	r0, r0, fp, lsr #8
   12980:	69050403 	stmdbvs	r5, {r0, r1, sl}
   12984:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   12988:	07f80508 	ldrbeq	r0, [r8, r8, lsl #10]!
   1298c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   12990:	00442a04 	subeq	r2, r4, r4, lsl #20
   12994:	0bd50400 	bleq	ff55399c <_estack+0xdf54e99c>
   12998:	65020000 	strvs	r0, [r2, #-0]
   1299c:	00251701 	eoreq	r1, r5, r1, lsl #14
   129a0:	01020000 	mrseq	r0, (UNDEF: 2)
   129a4:	000c5d06 	andeq	r5, ip, r6, lsl #26
   129a8:	08010200 	stmdaeq	r1, {r9}
   129ac:	00000c5b 	andeq	r0, r0, fp, asr ip
   129b0:	6b050202 	blvs	1531c0 <__ccfg+0x133218>
   129b4:	0200000a 	andeq	r0, r0, #10
   129b8:	0d660702 	stcleq	7, cr0, [r6, #-8]!
   129bc:	04020000 	streq	r0, [r2], #-0
   129c0:	0007fd05 	andeq	pc, r7, r5, lsl #26
   129c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
   129c8:	00000426 	andeq	r0, r0, r6, lsr #8
   129cc:	21070802 	tstcs	r7, r2, lsl #16
   129d0:	05000004 	streq	r0, [r0, #-4]
   129d4:	00000e49 	andeq	r0, r0, r9, asr #28
   129d8:	6a0e2e03 	bvs	39e1ec <__ccfg+0x37e244>
   129dc:	05000000 	streq	r0, [r0, #-0]
   129e0:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   129e4:	6a0e7403 	bvs	3af9f8 <__ccfg+0x38fa50>
   129e8:	06000000 	streq	r0, [r0], -r0
   129ec:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   129f0:	000000b9 	strheq	r0, [r0], -r9
   129f4:	00076c07 	andeq	r6, r7, r7, lsl #24
   129f8:	0ca70300 	stceq	3, cr0, [r7]
   129fc:	00000041 	andeq	r0, r0, r1, asr #32
   12a00:	000ab407 	andeq	fp, sl, r7, lsl #8
   12a04:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   12a08:	000000b9 	strheq	r0, [r0], -r9
   12a0c:	00550800 	subseq	r0, r5, r0, lsl #16
   12a10:	00c90000 	sbceq	r0, r9, r0
   12a14:	25090000 	strcs	r0, [r9, #-0]
   12a18:	03000000 	movweq	r0, #0
   12a1c:	03080a00 	movweq	r0, #35328	; 0x8a00
   12a20:	00ed09a2 	rsceq	r0, sp, r2, lsr #19
   12a24:	8e0b0000 	cdphi	0, 0, cr0, cr11, cr0, {0}
   12a28:	03000003 	movweq	r0, #3
   12a2c:	002c07a4 	eoreq	r0, ip, r4, lsr #15
   12a30:	0b000000 	bleq	12a38 <__exidx_end+0xcdf8>
   12a34:	00000601 	andeq	r0, r0, r1, lsl #12
   12a38:	9705a903 	strls	sl, [r5, -r3, lsl #18]
   12a3c:	04000000 	streq	r0, [r0], #-0
   12a40:	08b50500 	ldmeq	r5!, {r8, sl}
   12a44:	aa030000 	bge	d2a4c <__ccfg+0xb2aa4>
   12a48:	0000c903 	andeq	ip, r0, r3, lsl #18
   12a4c:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
   12a50:	00000842 	andeq	r0, r0, r2, asr #16
   12a54:	71191604 	tstvc	r9, r4, lsl #12
   12a58:	05000000 	streq	r0, [r0, #-0]
   12a5c:	00000253 	andeq	r0, r0, r3, asr r2
   12a60:	2c0d0c05 	stccs	12, cr0, [sp], {5}
   12a64:	05000000 	streq	r0, [r0, #-0]
   12a68:	0000072a 	andeq	r0, r0, sl, lsr #14
   12a6c:	071b2304 	ldreq	r2, [fp, -r4, lsl #6]
   12a70:	0d000001 	stceq	0, cr0, [r0, #-4]
   12a74:	00000332 	andeq	r0, r0, r2, lsr r3
   12a78:	08340418 	ldmdaeq	r4!, {r3, r4, sl}
   12a7c:	00000179 	andeq	r0, r0, r9, ror r1
   12a80:	000ec40b 	andeq	ip, lr, fp, lsl #8
   12a84:	13360400 	teqne	r6, #0, 8
   12a88:	00000179 	andeq	r0, r0, r9, ror r1
   12a8c:	6b5f0e00 	blvs	17d6294 <__ccfg+0x17b62ec>
   12a90:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
   12a94:	0000002c 	andeq	r0, r0, ip, lsr #32
   12a98:	0b620b04 	bleq	18956b0 <__ccfg+0x1875708>
   12a9c:	37040000 	strcc	r0, [r4, -r0]
   12aa0:	00002c0b 	andeq	r2, r0, fp, lsl #24
   12aa4:	f50b0800 			; <UNDEFINED> instruction: 0xf50b0800
   12aa8:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   12aac:	002c1437 	eoreq	r1, ip, r7, lsr r4
   12ab0:	0b0c0000 	bleq	312ab8 <__ccfg+0x2f2b10>
   12ab4:	00000455 	andeq	r0, r0, r5, asr r4
   12ab8:	2c1b3704 	ldccs	7, cr3, [fp], {4}
   12abc:	10000000 	andne	r0, r0, r0
   12ac0:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
   12ac4:	7f0b3804 	svcvc	0x000b3804
   12ac8:	14000001 	strne	r0, [r0], #-1
   12acc:	1f040f00 	svcne	0x00040f00
   12ad0:	08000001 	stmdaeq	r0, {r0}
   12ad4:	000000fb 	strdeq	r0, [r0], -fp
   12ad8:	0000018f 	andeq	r0, r0, pc, lsl #3
   12adc:	00002509 	andeq	r2, r0, r9, lsl #10
   12ae0:	0d000000 	stceq	0, cr0, [r0, #-0]
   12ae4:	00000b7d 	andeq	r0, r0, sp, ror fp
   12ae8:	083c0424 	ldmdaeq	ip!, {r2, r5, sl}
   12aec:	00000212 	andeq	r0, r0, r2, lsl r2
   12af0:	00056c0b 	andeq	r6, r5, fp, lsl #24
   12af4:	093e0400 	ldmdbeq	lr!, {sl}
   12af8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12afc:	03b70b00 			; <UNDEFINED> instruction: 0x03b70b00
   12b00:	3f040000 	svccc	0x00040000
   12b04:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b08:	580b0400 	stmdapl	fp, {sl}
   12b0c:	04000003 	streq	r0, [r0], #-3
   12b10:	002c0940 	eoreq	r0, ip, r0, asr #18
   12b14:	0b080000 	bleq	212b1c <__ccfg+0x1f2b74>
   12b18:	00000674 	andeq	r0, r0, r4, ror r6
   12b1c:	2c094104 	stfcss	f4, [r9], {4}
   12b20:	0c000000 	stceq	0, cr0, [r0], {-0}
   12b24:	0009540b 	andeq	r5, r9, fp, lsl #8
   12b28:	09420400 	stmdbeq	r2, {sl}^
   12b2c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b30:	0ace0b10 	beq	ff395778 <_estack+0xdf390778>
   12b34:	43040000 	movwmi	r0, #16384	; 0x4000
   12b38:	00002c09 	andeq	r2, r0, r9, lsl #24
   12b3c:	460b1400 	strmi	r1, [fp], -r0, lsl #8
   12b40:	04000003 	streq	r0, [r0], #-3
   12b44:	002c0944 	eoreq	r0, ip, r4, asr #18
   12b48:	0b180000 	bleq	612b50 <__ccfg+0x5f2ba8>
   12b4c:	00000575 	andeq	r0, r0, r5, ror r5
   12b50:	2c094504 	cfstr32cs	mvfx4, [r9], {4}
   12b54:	1c000000 	stcne	0, cr0, [r0], {-0}
   12b58:	0008f00b 	andeq	pc, r8, fp
   12b5c:	09460400 	stmdbeq	r6, {sl}^
   12b60:	0000002c 	andeq	r0, r0, ip, lsr #32
   12b64:	3b100020 	blcc	412bec <__ccfg+0x3f2c44>
   12b68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12b6c:	084f0401 	stmdaeq	pc, {r0, sl}^	; <UNPREDICTABLE>
   12b70:	00000257 	andeq	r0, r0, r7, asr r2
   12b74:	000d2d0b 	andeq	r2, sp, fp, lsl #26
   12b78:	0a500400 	beq	1413b80 <__ccfg+0x13f3bd8>
   12b7c:	00000257 	andeq	r0, r0, r7, asr r2
   12b80:	0c170b00 			; <UNDEFINED> instruction: 0x0c170b00
   12b84:	51040000 	mrspl	r0, (UNDEF: 4)
   12b88:	00025709 	andeq	r5, r2, r9, lsl #14
   12b8c:	c6118000 	ldrgt	r8, [r1], -r0
   12b90:	0400000d 	streq	r0, [r0], #-13
   12b94:	00fb0a53 	rscseq	r0, fp, r3, asr sl
   12b98:	01000000 	mrseq	r0, (UNDEF: 0)
   12b9c:	000eb711 	andeq	fp, lr, r1, lsl r7
   12ba0:	0a560400 	beq	1593ba8 <__ccfg+0x1573c00>
   12ba4:	000000fb 	strdeq	r0, [r0], -fp
   12ba8:	08000104 	stmdaeq	r0, {r2, r8}
   12bac:	000000f9 	strdeq	r0, [r0], -r9
   12bb0:	00000267 	andeq	r0, r0, r7, ror #4
   12bb4:	00002509 	andeq	r2, r0, r9, lsl #10
   12bb8:	10001f00 	andne	r1, r0, r0, lsl #30
   12bbc:	00000a16 	andeq	r0, r0, r6, lsl sl
   12bc0:	62040190 	andvs	r0, r4, #144, 2	; 0x24
   12bc4:	0002aa08 	andeq	sl, r2, r8, lsl #20
   12bc8:	0ec40b00 	vdiveq.f64	d16, d4, d0
   12bcc:	63040000 	movwvs	r0, #16384	; 0x4000
   12bd0:	0002aa12 	andeq	sl, r2, r2, lsl sl
   12bd4:	840b0000 	strhi	r0, [fp], #-0
   12bd8:	04000005 	streq	r0, [r0], #-5
   12bdc:	002c0664 	eoreq	r0, ip, r4, ror #12
   12be0:	0b040000 	bleq	112be8 <__ccfg+0xf2c40>
   12be4:	00000307 	andeq	r0, r0, r7, lsl #6
   12be8:	b0096604 	andlt	r6, r9, r4, lsl #12
   12bec:	08000002 	stmdaeq	r0, {r1}
   12bf0:	00003b0b 	andeq	r3, r0, fp, lsl #22
   12bf4:	1e670400 	cdpne	4, 6, cr0, cr7, cr0, {0}
   12bf8:	00000212 	andeq	r0, r0, r2, lsl r2
   12bfc:	040f0088 	streq	r0, [pc], #-136	; 12c04 <__exidx_end+0xcfc4>
   12c00:	00000267 	andeq	r0, r0, r7, ror #4
   12c04:	0002c008 	andeq	ip, r2, r8
   12c08:	0002c000 	andeq	ip, r2, r0
   12c0c:	00250900 	eoreq	r0, r5, r0, lsl #18
   12c10:	001f0000 	andseq	r0, pc, r0
   12c14:	02c6040f 	sbceq	r0, r6, #251658240	; 0xf000000
   12c18:	0d120000 	ldceq	0, cr0, [r2, #-0]
   12c1c:	00000cc5 	andeq	r0, r0, r5, asr #25
   12c20:	087a0408 	ldmdaeq	sl!, {r3, sl}^
   12c24:	000002ef 	andeq	r0, r0, pc, ror #5
   12c28:	000cd70b 	andeq	sp, ip, fp, lsl #14
   12c2c:	117b0400 	cmnne	fp, r0, lsl #8
   12c30:	000002ef 	andeq	r0, r0, pc, ror #5
   12c34:	1da00b00 			; <UNDEFINED> instruction: 0x1da00b00
   12c38:	7c040000 	stcvc	0, cr0, [r4], {-0}
   12c3c:	00002c06 	andeq	r2, r0, r6, lsl #24
   12c40:	0f000400 	svceq	0x00000400
   12c44:	00005504 	andeq	r5, r0, r4, lsl #10
   12c48:	044d0d00 	strbeq	r0, [sp], #-3328	; 0xfffff300
   12c4c:	04680000 	strbteq	r0, [r8], #-0
   12c50:	043808ba 	ldrteq	r0, [r8], #-2234	; 0xfffff746
   12c54:	5f0e0000 	svcpl	0x000e0000
   12c58:	bb040070 	bllt	112e20 <__ccfg+0xf2e78>
   12c5c:	0002ef12 	andeq	lr, r2, r2, lsl pc
   12c60:	5f0e0000 	svcpl	0x000e0000
   12c64:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
   12c68:	00002c07 	andeq	r2, r0, r7, lsl #24
   12c6c:	5f0e0400 	svcpl	0x000e0400
   12c70:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
   12c74:	00002c07 	andeq	r2, r0, r7, lsl #24
   12c78:	c40b0800 	strgt	r0, [fp], #-2048	; 0xfffff800
   12c7c:	04000001 	streq	r0, [r0], #-1
   12c80:	005c09be 	ldrheq	r0, [ip], #-158	; 0xffffff62
   12c84:	0b0c0000 	bleq	312c8c <__ccfg+0x2f2ce4>
   12c88:	00000859 	andeq	r0, r0, r9, asr r8
   12c8c:	5c09bf04 	stcpl	15, cr11, [r9], {4}
   12c90:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   12c94:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
   12c98:	11c00400 	bicne	r0, r0, r0, lsl #8
   12c9c:	000002c7 	andeq	r0, r0, r7, asr #5
   12ca0:	01bb0b10 			; <UNDEFINED> instruction: 0x01bb0b10
   12ca4:	c1040000 	mrsgt	r0, (UNDEF: 4)
   12ca8:	00002c07 	andeq	r2, r0, r7, lsl #24
   12cac:	0c0b1800 	stceq	8, cr1, [fp], {-0}
   12cb0:	04000003 	streq	r0, [r0], #-3
   12cb4:	00f90ac8 	rscseq	r0, r9, r8, asr #21
   12cb8:	0b1c0000 	bleq	712cc0 <__ccfg+0x6f2d18>
   12cbc:	00001d2f 	andeq	r1, r0, pc, lsr #26
   12cc0:	bc1dca04 			; <UNDEFINED> instruction: 0xbc1dca04
   12cc4:	20000005 	andcs	r0, r0, r5
   12cc8:	001cf60b 	andseq	pc, ip, fp, lsl #12
   12ccc:	1dcc0400 	cfstrdne	mvd0, [ip]
   12cd0:	000005e6 	andeq	r0, r0, r6, ror #11
   12cd4:	0ee40b24 	vfmaeq.f64	d16, d4, d20
   12cd8:	cf040000 	svcgt	0x00040000
   12cdc:	00060a0d 	andeq	r0, r6, sp, lsl #20
   12ce0:	e40b2800 	str	r2, [fp], #-2048	; 0xfffff800
   12ce4:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
   12ce8:	062409d0 			; <UNDEFINED> instruction: 0x062409d0
   12cec:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
   12cf0:	0062755f 	rsbeq	r7, r2, pc, asr r5
   12cf4:	c711d304 	ldrgt	sp, [r1, -r4, lsl #6]
   12cf8:	30000002 	andcc	r0, r0, r2
   12cfc:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
   12d00:	12d40400 	sbcsne	r0, r4, #0, 8
   12d04:	000002ef 	andeq	r0, r0, pc, ror #5
   12d08:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; 11ed8 <__exidx_end+0xc298>
   12d0c:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
   12d10:	00002c07 	andeq	r2, r0, r7, lsl #24
   12d14:	1b0b3c00 	blne	2e1d1c <__ccfg+0x2c1d74>
   12d18:	0400000f 	streq	r0, [r0], #-15
   12d1c:	062a11d8 			; <UNDEFINED> instruction: 0x062a11d8
   12d20:	0b400000 	bleq	1012d28 <__ccfg+0xff2d80>
   12d24:	00000e64 	andeq	r0, r0, r4, ror #28
   12d28:	3a11d904 	bcc	489140 <__ccfg+0x469198>
   12d2c:	43000006 	movwmi	r0, #6
   12d30:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
   12d34:	11dc0400 	bicsne	r0, ip, r0, lsl #8
   12d38:	000002c7 	andeq	r0, r0, r7, asr #5
   12d3c:	0b740b44 	bleq	1d15a54 <__ccfg+0x1cf5aac>
   12d40:	df040000 	svcle	0x00040000
   12d44:	00002c07 	andeq	r2, r0, r7, lsl #24
   12d48:	7c0b4c00 	stcvc	12, cr4, [fp], {-0}
   12d4c:	04000004 	streq	r0, [r0], #-4
   12d50:	007f0ae0 	rsbseq	r0, pc, r0, ror #21
   12d54:	0b500000 	bleq	1412d5c <__ccfg+0x13f2db4>
   12d58:	00004753 	andeq	r4, r0, r3, asr r7
   12d5c:	5612e304 	ldrpl	lr, [r2], -r4, lsl #6
   12d60:	54000004 	strpl	r0, [r0], #-4
   12d64:	000b9a0b 	andeq	r9, fp, fp, lsl #20
   12d68:	0ce70400 	cfstrdeq	mvd0, [r7]
   12d6c:	00000113 	andeq	r0, r0, r3, lsl r1
   12d70:	0a1e0b58 	beq	795ad8 <__ccfg+0x775b30>
   12d74:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
   12d78:	0000ed0e 	andeq	lr, r0, lr, lsl #26
   12d7c:	970b5c00 	strls	r5, [fp, -r0, lsl #24]
   12d80:	0400000e 	streq	r0, [r0], #-14
   12d84:	002c09ea 	eoreq	r0, ip, sl, ror #19
   12d88:	00640000 	rsbeq	r0, r4, r0
   12d8c:	00002c13 	andeq	r2, r0, r3, lsl ip
   12d90:	00045600 	andeq	r5, r4, r0, lsl #12
   12d94:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   12d98:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   12d9c:	14000000 	strne	r0, [r0], #-0
   12da0:	000005aa 	andeq	r0, r0, sl, lsr #11
   12da4:	00002c14 	andeq	r2, r0, r4, lsl ip
   12da8:	040f0000 	streq	r0, [pc], #-0	; 12db0 <__exidx_end+0xd170>
   12dac:	00000461 	andeq	r0, r0, r1, ror #8
   12db0:	00045615 	andeq	r5, r4, r5, lsl r6
   12db4:	0d5f1600 	ldcleq	6, cr1, [pc, #-0]	; 12dbc <__exidx_end+0xd17c>
   12db8:	04280000 	strteq	r0, [r8], #-0
   12dbc:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
   12dc0:	000005aa 	andeq	r0, r0, sl, lsr #11
   12dc4:	00090417 	andeq	r0, r9, r7, lsl r4
   12dc8:	02670400 	rsbeq	r0, r7, #0, 8
   12dcc:	00002c07 	andeq	r2, r0, r7, lsl #24
   12dd0:	e2170000 	ands	r0, r7, #0
   12dd4:	04000007 	streq	r0, [r0], #-7
   12dd8:	960b026c 	strls	r0, [fp], -ip, ror #4
   12ddc:	04000006 	streq	r0, [r0], #-6
   12de0:	0002f717 	andeq	pc, r2, r7, lsl r7	; <UNPREDICTABLE>
   12de4:	026c0400 	rsbeq	r0, ip, #0, 8
   12de8:	00069614 	andeq	r9, r6, r4, lsl r6
   12dec:	0a170800 	beq	5d4df4 <__ccfg+0x5b4e4c>
   12df0:	0400000f 	streq	r0, [r0], #-15
   12df4:	961e026c 	ldrls	r0, [lr], -ip, ror #4
   12df8:	0c000006 	stceq	0, cr0, [r0], {6}
   12dfc:	00057f17 	andeq	r7, r5, r7, lsl pc
   12e00:	026e0400 	rsbeq	r0, lr, #0, 8
   12e04:	00002c08 	andeq	r2, r0, r8, lsl #24
   12e08:	d4171000 	ldrle	r1, [r7], #-0
   12e0c:	04000004 	streq	r0, [r0], #-4
   12e10:	9608026f 	strls	r0, [r8], -pc, ror #4
   12e14:	14000008 	strne	r0, [r0], #-8
   12e18:	000e7717 	andeq	r7, lr, r7, lsl r7
   12e1c:	02720400 	rsbseq	r0, r2, #0, 8
   12e20:	00002c07 	andeq	r2, r0, r7, lsl #24
   12e24:	a1173000 	tstge	r7, r0
   12e28:	04000042 	streq	r0, [r0], #-66	; 0xffffffbe
   12e2c:	ab160273 	blge	593800 <__ccfg+0x573858>
   12e30:	34000008 	strcc	r0, [r0], #-8
   12e34:	00078a17 	andeq	r8, r7, r7, lsl sl
   12e38:	02750400 	rsbseq	r0, r5, #0, 8
   12e3c:	00002c07 	andeq	r2, r0, r7, lsl #24
   12e40:	84173800 	ldrhi	r3, [r7], #-2048	; 0xfffff800
   12e44:	04000008 	streq	r0, [r0], #-8
   12e48:	bc0a0277 	sfmlt	f0, 4, [sl], {119}	; 0x77
   12e4c:	3c000008 	stccc	0, cr0, [r0], {8}
   12e50:	00035017 	andeq	r5, r3, r7, lsl r0
   12e54:	027a0400 	rsbseq	r0, sl, #0, 8
   12e58:	00017913 	andeq	r7, r1, r3, lsl r9
   12e5c:	0b174000 	bleq	5e2e64 <__ccfg+0x5c2ebc>
   12e60:	04000004 	streq	r0, [r0], #-4
   12e64:	2c07027b 	sfmcs	f0, 4, [r7], {123}	; 0x7b
   12e68:	44000000 	strmi	r0, [r0], #-0
   12e6c:	00060917 	andeq	r0, r6, r7, lsl r9
   12e70:	027c0400 	rsbseq	r0, ip, #0, 8
   12e74:	00017913 	andeq	r7, r1, r3, lsl r9
   12e78:	1f174800 	svcne	0x00174800
   12e7c:	04000008 	streq	r0, [r0], #-8
   12e80:	c214027d 	andsgt	r0, r4, #-805306361	; 0xd0000007
   12e84:	4c000008 	stcmi	0, cr0, [r0], {8}
   12e88:	000b5a17 	andeq	r5, fp, r7, lsl sl
   12e8c:	02800400 	addeq	r0, r0, #0, 8
   12e90:	00002c07 	andeq	r2, r0, r7, lsl #24
   12e94:	53175000 	tstpl	r7, #0
   12e98:	0400000c 	streq	r0, [r0], #-12
   12e9c:	aa090281 	bge	2538a8 <__ccfg+0x233900>
   12ea0:	54000005 	strpl	r0, [r0], #-5
   12ea4:	000c6d17 	andeq	r6, ip, r7, lsl sp
   12ea8:	02a40400 	adceq	r0, r4, #0, 8
   12eac:	00087107 	andeq	r7, r8, r7, lsl #2
   12eb0:	16185800 	ldrne	r5, [r8], -r0, lsl #16
   12eb4:	0400000a 	streq	r0, [r0], #-10
   12eb8:	aa1302a8 	bge	4d3960 <__ccfg+0x4b39b8>
   12ebc:	48000002 	stmdami	r0, {r1}
   12ec0:	06ae1801 	strteq	r1, [lr], r1, lsl #16
   12ec4:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   12ec8:	02671202 	rsbeq	r1, r7, #536870912	; 0x20000000
   12ecc:	014c0000 	mrseq	r0, (UNDEF: 76)
   12ed0:	00069518 	andeq	r9, r6, r8, lsl r5
   12ed4:	02ad0400 	adceq	r0, sp, #0, 8
   12ed8:	0008d30c 	andeq	sp, r8, ip, lsl #6
   12edc:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
   12ee0:	00000ce3 	andeq	r0, r0, r3, ror #25
   12ee4:	1002b204 	andne	fp, r2, r4, lsl #4
   12ee8:	00000657 	andeq	r0, r0, r7, asr r6
   12eec:	a61802e0 	ldrge	r0, [r8], -r0, ror #5
   12ef0:	0400000a 	streq	r0, [r0], #-10
   12ef4:	df0a02b4 	svcle	0x000a02b4
   12ef8:	ec000008 	stc	0, cr0, [r0], {8}
   12efc:	040f0002 	streq	r0, [pc], #-2	; 12f04 <__exidx_end+0xd2c4>
   12f00:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   12f04:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
   12f08:	1500000c 	strne	r0, [r0, #-12]
   12f0c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   12f10:	0438040f 	ldrteq	r0, [r8], #-1039	; 0xfffffbf1
   12f14:	2c130000 	ldccs	0, cr0, [r3], {-0}
   12f18:	e0000000 	and	r0, r0, r0
   12f1c:	14000005 	strne	r0, [r0], #-5
   12f20:	00000456 	andeq	r0, r0, r6, asr r4
   12f24:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   12f28:	05e01400 	strbeq	r1, [r0, #1024]!	; 0x400
   12f2c:	2c140000 	ldccs	0, cr0, [r4], {-0}
   12f30:	00000000 	andeq	r0, r0, r0
   12f34:	05b7040f 	ldreq	r0, [r7, #1039]!	; 0x40f
   12f38:	040f0000 	streq	r0, [pc], #-0	; 12f40 <__exidx_end+0xd300>
   12f3c:	000005c2 	andeq	r0, r0, r2, asr #11
   12f40:	00008b13 	andeq	r8, r0, r3, lsl fp
   12f44:	00060a00 	andeq	r0, r6, r0, lsl #20
   12f48:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   12f4c:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   12f50:	14000000 	strne	r0, [r0], #-0
   12f54:	0000008b 	andeq	r0, r0, fp, lsl #1
   12f58:	00002c14 	andeq	r2, r0, r4, lsl ip
   12f5c:	040f0000 	streq	r0, [pc], #-0	; 12f64 <__exidx_end+0xd324>
   12f60:	000005ec 	andeq	r0, r0, ip, ror #11
   12f64:	00002c13 	andeq	r2, r0, r3, lsl ip
   12f68:	00062400 	andeq	r2, r6, r0, lsl #8
   12f6c:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   12f70:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   12f74:	00000000 	andeq	r0, r0, r0
   12f78:	0610040f 	ldreq	r0, [r0], -pc, lsl #8
   12f7c:	55080000 	strpl	r0, [r8, #-0]
   12f80:	3a000000 	bcc	12f88 <__exidx_end+0xd348>
   12f84:	09000006 	stmdbeq	r0, {r1, r2}
   12f88:	00000025 	andeq	r0, r0, r5, lsr #32
   12f8c:	55080002 	strpl	r0, [r8, #-2]
   12f90:	4a000000 	bmi	12f98 <__exidx_end+0xd358>
   12f94:	09000006 	stmdbeq	r0, {r1, r2}
   12f98:	00000025 	andeq	r0, r0, r5, lsr #32
   12f9c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   12fa0:	04000004 	streq	r0, [r0], #-4
   12fa4:	f51a0124 			; <UNDEFINED> instruction: 0xf51a0124
   12fa8:	19000002 	stmdbne	r0, {r1}
   12fac:	00000cdd 	ldrdeq	r0, [r0], -sp
   12fb0:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
   12fb4:	00069008 	andeq	r9, r6, r8
   12fb8:	0ec41700 	cdpeq	7, 12, cr1, cr4, cr0, {0}
   12fbc:	2a040000 	bcs	112fc4 <__ccfg+0xf301c>
   12fc0:	06901101 	ldreq	r1, [r0], r1, lsl #2
   12fc4:	17000000 	strne	r0, [r0, -r0]
   12fc8:	00000bce 	andeq	r0, r0, lr, asr #23
   12fcc:	07012b04 	streq	r2, [r1, -r4, lsl #22]
   12fd0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12fd4:	07721704 	ldrbeq	r1, [r2, -r4, lsl #14]!
   12fd8:	2c040000 	stccs	0, cr0, [r4], {-0}
   12fdc:	06960b01 	ldreq	r0, [r6], r1, lsl #22
   12fe0:	00080000 	andeq	r0, r8, r0
   12fe4:	0657040f 	ldrbeq	r0, [r7], -pc, lsl #8
   12fe8:	040f0000 	streq	r0, [pc], #-0	; 12ff0 <__exidx_end+0xd3b0>
   12fec:	0000064a 	andeq	r0, r0, sl, asr #12
   12ff0:	0003da19 	andeq	sp, r3, r9, lsl sl
   12ff4:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
   12ff8:	06d50801 	ldrbeq	r0, [r5], r1, lsl #16
   12ffc:	4b170000 	blmi	5d3004 <__ccfg+0x5b305c>
   13000:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
   13004:	d5120145 	ldrle	r0, [r2, #-325]	; 0xfffffebb
   13008:	00000006 	andeq	r0, r0, r6
   1300c:	00083117 	andeq	r3, r8, r7, lsl r1
   13010:	01460400 	cmpeq	r6, r0, lsl #8
   13014:	0006d512 	andeq	sp, r6, r2, lsl r5
   13018:	fd170600 	ldc2	6, cr0, [r7, #-0]
   1301c:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
   13020:	63120147 	tstvs	r2, #-1073741807	; 0xc0000011
   13024:	0c000000 	stceq	0, cr0, [r0], {-0}
   13028:	00630800 	rsbeq	r0, r3, r0, lsl #16
   1302c:	06e50000 	strbteq	r0, [r5], r0
   13030:	25090000 	strcs	r0, [r9, #-0]
   13034:	02000000 	andeq	r0, r0, #0
   13038:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
   1303c:	fa070285 	blx	1d3a58 <__ccfg+0x1b3ab0>
   13040:	17000007 	strne	r0, [r0, -r7]
   13044:	00000e6a 	andeq	r0, r0, sl, ror #28
   13048:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
   1304c:	00000025 	andeq	r0, r0, r5, lsr #32
   13050:	0ceb1700 	stcleq	7, cr1, [fp]
   13054:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
   13058:	05aa1202 	streq	r1, [sl, #514]!	; 0x202
   1305c:	17040000 	strne	r0, [r4, -r0]
   13060:	00000438 	andeq	r0, r0, r8, lsr r4
   13064:	10028904 	andne	r8, r2, r4, lsl #18
   13068:	000007fa 	strdeq	r0, [r0], -sl
   1306c:	0b431708 	bleq	10d8c94 <__ccfg+0x10b8cec>
   13070:	8a040000 	bhi	113078 <__ccfg+0xf30d0>
   13074:	018f1702 	orreq	r1, pc, r2, lsl #14
   13078:	17240000 	strne	r0, [r4, -r0]!
   1307c:	000007e9 	andeq	r0, r0, r9, ror #15
   13080:	0f028b04 	svceq	0x00028b04
   13084:	0000002c 	andeq	r0, r0, ip, lsr #32
   13088:	0ebf1748 	cdpeq	7, 11, cr1, cr15, cr8, {2}
   1308c:	8c040000 	stchi	0, cr0, [r4], {-0}
   13090:	00782c02 	rsbseq	r2, r8, r2, lsl #24
   13094:	17500000 	ldrbne	r0, [r0, -r0]
   13098:	0000007f 	andeq	r0, r0, pc, ror r0
   1309c:	1a028d04 	bne	b64b4 <__ccfg+0x9650c>
   130a0:	0000069c 	muleq	r0, ip, r6
   130a4:	06391758 			; <UNDEFINED> instruction: 0x06391758
   130a8:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
   130ac:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   130b0:	17680000 	strbne	r0, [r8, -r0]!
   130b4:	00000cf8 	strdeq	r0, [r0], -r8
   130b8:	16028f04 	strne	r8, [r2], -r4, lsl #30
   130bc:	000000ed 	andeq	r0, r0, sp, ror #1
   130c0:	00711770 	rsbseq	r1, r1, r0, ror r7
   130c4:	90040000 	andls	r0, r4, r0
   130c8:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   130cc:	17780000 	ldrbne	r0, [r8, -r0]!
   130d0:	00000b6a 	andeq	r0, r0, sl, ror #22
   130d4:	10029104 	andne	r9, r2, r4, lsl #2
   130d8:	0000080a 	andeq	r0, r0, sl, lsl #16
   130dc:	04151780 	ldreq	r1, [r5], #-1920	; 0xfffff880
   130e0:	92040000 	andls	r0, r4, #0
   130e4:	081a1002 	ldmdaeq	sl, {r1, ip}
   130e8:	17880000 	strne	r0, [r8, r0]
   130ec:	00000c8d 	andeq	r0, r0, sp, lsl #25
   130f0:	0f029304 	svceq	0x00029304
   130f4:	0000002c 	andeq	r0, r0, ip, lsr #32
   130f8:	02ac17a0 	adceq	r1, ip, #160, 14	; 0x2800000
   130fc:	94040000 	strls	r0, [r4], #-0
   13100:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   13104:	17a40000 	strne	r0, [r4, r0]!
   13108:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
   1310c:	16029504 	strne	r9, [r2], -r4, lsl #10
   13110:	000000ed 	andeq	r0, r0, sp, ror #1
   13114:	05bb17ac 	ldreq	r1, [fp, #1964]!	; 0x7ac
   13118:	96040000 	strls	r0, [r4], -r0
   1311c:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   13120:	17b40000 	ldrne	r0, [r4, r0]!
   13124:	0000084a 	andeq	r0, r0, sl, asr #16
   13128:	16029704 	strne	r9, [r2], -r4, lsl #14
   1312c:	000000ed 	andeq	r0, r0, sp, ror #1
   13130:	062817bc 			; <UNDEFINED> instruction: 0x062817bc
   13134:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
   13138:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   1313c:	17c40000 	strbne	r0, [r4, r0]
   13140:	00000902 	andeq	r0, r0, r2, lsl #18
   13144:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
   13148:	0000002c 	andeq	r0, r0, ip, lsr #32
   1314c:	b00800cc 	andlt	r0, r8, ip, asr #1
   13150:	0a000005 	beq	1316c <__exidx_end+0xd52c>
   13154:	09000008 	stmdbeq	r0, {r3}
   13158:	00000025 	andeq	r0, r0, r5, lsr #32
   1315c:	b0080019 	andlt	r0, r8, r9, lsl r0
   13160:	1a000005 	bne	1317c <__exidx_end+0xd53c>
   13164:	09000008 	stmdbeq	r0, {r3}
   13168:	00000025 	andeq	r0, r0, r5, lsr #32
   1316c:	b0080007 	andlt	r0, r8, r7
   13170:	2a000005 	bcs	1318c <__exidx_end+0xd54c>
   13174:	09000008 	stmdbeq	r0, {r3}
   13178:	00000025 	andeq	r0, r0, r5, lsr #32
   1317c:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
   13180:	07029e04 	streq	r9, [r2, -r4, lsl #28]
   13184:	00000851 	andeq	r0, r0, r1, asr r8
   13188:	0003c017 	andeq	ip, r3, r7, lsl r0
   1318c:	02a10400 	adceq	r0, r1, #0, 8
   13190:	0008511b 	andeq	r5, r8, fp, lsl r1
   13194:	12170000 	andsne	r0, r7, #0
   13198:	0400000f 	streq	r0, [r0], #-15
   1319c:	611802a2 	tstvs	r8, r2, lsr #5
   131a0:	78000008 	stmdavc	r0, {r3}
   131a4:	02ef0800 	rsceq	r0, pc, #0, 16
   131a8:	08610000 	stmdaeq	r1!, {}^	; <UNPREDICTABLE>
   131ac:	25090000 	strcs	r0, [r9, #-0]
   131b0:	1d000000 	stcne	0, cr0, [r0, #-0]
   131b4:	00250800 	eoreq	r0, r5, r0, lsl #16
   131b8:	08710000 	ldmdaeq	r1!, {}^	; <UNPREDICTABLE>
   131bc:	25090000 	strcs	r0, [r9, #-0]
   131c0:	1d000000 	stcne	0, cr0, [r0, #-0]
   131c4:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
   131c8:	96030283 	strls	r0, [r3], -r3, lsl #5
   131cc:	1c000008 	stcne	0, cr0, [r0], {8}
   131d0:	00000d5f 	andeq	r0, r0, pc, asr sp
   131d4:	0b029a04 	bleq	b99ec <__ccfg+0x99a44>
   131d8:	000006e5 	andeq	r0, r0, r5, ror #13
   131dc:	000b521c 	andeq	r5, fp, ip, lsl r2
   131e0:	02a30400 	adceq	r0, r3, #0, 8
   131e4:	00082a0b 	andeq	r2, r8, fp, lsl #20
   131e8:	b0080000 	andlt	r0, r8, r0
   131ec:	a6000005 	strge	r0, [r0], -r5
   131f0:	09000008 	stmdbeq	r0, {r3}
   131f4:	00000025 	andeq	r0, r0, r5, lsr #32
   131f8:	ca1d0018 	bgt	753260 <__ccfg+0x7332b8>
   131fc:	0f00000e 	svceq	0x0000000e
   13200:	0008a604 	andeq	sl, r8, r4, lsl #12
   13204:	08bc1e00 	ldmeq	ip!, {r9, sl, fp, ip}
   13208:	56140000 	ldrpl	r0, [r4], -r0
   1320c:	00000004 	andeq	r0, r0, r4
   13210:	08b1040f 	ldmeq	r1!, {r0, r1, r2, r3, sl}
   13214:	040f0000 	streq	r0, [pc], #-0	; 1321c <__exidx_end+0xd5dc>
   13218:	00000179 	andeq	r0, r0, r9, ror r1
   1321c:	0008d31e 	andeq	sp, r8, lr, lsl r3
   13220:	002c1400 	eoreq	r1, ip, r0, lsl #8
   13224:	0f000000 	svceq	0x00000000
   13228:	0008d904 	andeq	sp, r8, r4, lsl #18
   1322c:	c8040f00 	stmdagt	r4, {r8, r9, sl, fp}
   13230:	08000008 	stmdaeq	r0, {r3}
   13234:	0000064a 	andeq	r0, r0, sl, asr #12
   13238:	000008ef 	andeq	r0, r0, pc, ror #17
   1323c:	00002509 	andeq	r2, r0, r9, lsl #10
   13240:	1f000200 	svcne	0x00000200
   13244:	00000ac2 	andeq	r0, r0, r2, asr #21
   13248:	17033304 	strne	r3, [r3, -r4, lsl #6]
   1324c:	00000456 	andeq	r0, r0, r6, asr r4
   13250:	000abb1f 	andeq	fp, sl, pc, lsl fp
   13254:	03340400 	teqeq	r4, #0, 8
   13258:	00045c1d 	andeq	r5, r4, sp, lsl ip
   1325c:	44432000 	strbmi	r2, [r3], #-0
   13260:	67060000 	strvs	r0, [r6, -r0]
   13264:	0005aa0e 	andeq	sl, r5, lr, lsl #20
   13268:	0e722100 	rpweqs	f2, f2, f0
   1326c:	90060000 	andls	r0, r6, r0
   13270:	00002c05 	andeq	r2, r0, r5, lsl #24
   13274:	0049bc00 	subeq	fp, r9, r0, lsl #24
   13278:	00003800 	andeq	r3, r0, r0, lsl #16
   1327c:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
   13280:	22000009 	andcs	r0, r0, #9
   13284:	00004747 	andeq	r4, r0, r7, asr #14
   13288:	56124901 	ldrpl	r4, [r2], -r1, lsl #18
   1328c:	d7000004 	strle	r0, [r0, -r4]
   13290:	d100005a 	qaddle	r0, sl, r0
   13294:	0000005a 	andeq	r0, r0, sl, asr r0
   13298:	0046a023 	subeq	sl, r6, r3, lsr #32
   1329c:	069f0600 	ldreq	r0, [pc], r0, lsl #12
   132a0:	000049a8 	andeq	r4, r0, r8, lsr #19
   132a4:	00000014 	andeq	r0, r0, r4, lsl r0
   132a8:	4c249c01 	stcmi	12, cr9, [r4], #-4
   132ac:	01000016 	tsteq	r0, r6, lsl r0
   132b0:	0025153e 	eoreq	r1, r5, lr, lsr r5
   132b4:	50010000 	andpl	r0, r1, r0
   132b8:	00474722 	subeq	r4, r7, r2, lsr #14
   132bc:	12400100 	subne	r0, r0, #0, 2
   132c0:	00000456 	andeq	r0, r0, r6, asr r4
   132c4:	00005b08 	andeq	r5, r0, r8, lsl #22
   132c8:	00005b04 	andeq	r5, r0, r4, lsl #22
   132cc:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
   132d0:	00040000 	andeq	r0, r4, r0
   132d4:	000045c1 	andeq	r4, r0, r1, asr #11
   132d8:	45590104 	ldrbmi	r0, [r9, #-260]	; 0xfffffefc
   132dc:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
   132e0:	fa000047 	blx	13404 <__exidx_end+0xd7c4>
   132e4:	48000046 	stmdami	r0, {r1, r2, r6}
   132e8:	02000092 	andeq	r0, r0, #146	; 0x92
   132ec:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   132f0:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
   132f4:	00042b07 	andeq	r2, r4, r7, lsl #22
   132f8:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
   132fc:	000007f8 	strdeq	r0, [r0], -r8
   13300:	2a040803 	bcs	115314 <__ccfg+0xf536c>
   13304:	04000044 	streq	r0, [r0], #-68	; 0xffffffbc
   13308:	00000bd5 	ldrdeq	r0, [r0], -r5
   1330c:	17016501 	strne	r6, [r1, -r1, lsl #10]
   13310:	00000024 	andeq	r0, r0, r4, lsr #32
   13314:	5d060103 	stfpls	f0, [r6, #-12]
   13318:	0300000c 	movweq	r0, #12
   1331c:	0c5b0801 	mrrceq	8, 0, r0, fp, cr1
   13320:	02030000 	andeq	r0, r3, #0
   13324:	000a6b05 	andeq	r6, sl, r5, lsl #22
   13328:	07020300 	streq	r0, [r2, -r0, lsl #6]
   1332c:	00000d66 	andeq	r0, r0, r6, ror #26
   13330:	fd050403 	stc2	4, cr0, [r5, #-12]
   13334:	03000007 	movweq	r0, #7
   13338:	04260704 	strteq	r0, [r6], #-1796	; 0xfffff8fc
   1333c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13340:	00042107 	andeq	r2, r4, r7, lsl #2
   13344:	0e490500 	cdpeq	5, 4, cr0, cr9, cr0, {0}
   13348:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
   1334c:	0000620e 	andeq	r6, r0, lr, lsl #4
   13350:	02ff0500 	rscseq	r0, pc, #0, 10
   13354:	74020000 	strvc	r0, [r2], #-0
   13358:	0000620e 	andeq	r6, r0, lr, lsl #4
   1335c:	02040600 	andeq	r0, r4, #0, 12
   13360:	00b103a5 	adcseq	r0, r1, r5, lsr #7
   13364:	6c070000 	stcvs	0, cr0, [r7], {-0}
   13368:	02000007 	andeq	r0, r0, #7
   1336c:	00390ca7 	eorseq	r0, r9, r7, lsr #25
   13370:	b4070000 	strlt	r0, [r7], #-0
   13374:	0200000a 	andeq	r0, r0, #10
   13378:	00b113a8 	adcseq	r1, r1, r8, lsr #7
   1337c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13380:	0000004d 	andeq	r0, r0, sp, asr #32
   13384:	000000c1 	andeq	r0, r0, r1, asr #1
   13388:	00002409 	andeq	r2, r0, r9, lsl #8
   1338c:	0a000300 	beq	13f94 <__exidx_end+0xe354>
   13390:	09a20208 	stmibeq	r2!, {r3, r9}
   13394:	000000e5 	andeq	r0, r0, r5, ror #1
   13398:	00038e0b 	andeq	r8, r3, fp, lsl #28
   1339c:	07a40200 	streq	r0, [r4, r0, lsl #4]!
   133a0:	0000001d 	andeq	r0, r0, sp, lsl r0
   133a4:	06010b00 	streq	r0, [r1], -r0, lsl #22
   133a8:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
   133ac:	00008f05 	andeq	r8, r0, r5, lsl #30
   133b0:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
   133b4:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
   133b8:	c103aa02 	tstgt	r3, r2, lsl #20
   133bc:	0c000000 	stceq	0, cr0, [r0], {-0}
   133c0:	08420504 	stmdaeq	r2, {r2, r8, sl}^
   133c4:	16030000 	strne	r0, [r3], -r0
   133c8:	00006919 	andeq	r6, r0, r9, lsl r9
   133cc:	02530500 	subseq	r0, r3, #0, 10
   133d0:	0c040000 	stceq	0, cr0, [r4], {-0}
   133d4:	00001d0d 	andeq	r1, r0, sp, lsl #26
   133d8:	072a0500 	streq	r0, [sl, -r0, lsl #10]!
   133dc:	23030000 	movwcs	r0, #12288	; 0x3000
   133e0:	0000ff1b 	andeq	pc, r0, fp, lsl pc	; <UNPREDICTABLE>
   133e4:	03320d00 	teqeq	r2, #0, 26
   133e8:	03180000 	tsteq	r8, #0
   133ec:	01710834 	cmneq	r1, r4, lsr r8
   133f0:	c40b0000 	strgt	r0, [fp], #-0
   133f4:	0300000e 	movweq	r0, #14
   133f8:	01711336 	cmneq	r1, r6, lsr r3
   133fc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   13400:	03006b5f 	movweq	r6, #2911	; 0xb5f
   13404:	001d0737 	andseq	r0, sp, r7, lsr r7
   13408:	0b040000 	bleq	113410 <__ccfg+0xf3468>
   1340c:	00000b62 	andeq	r0, r0, r2, ror #22
   13410:	1d0b3703 	stcne	7, cr3, [fp, #-12]
   13414:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13418:	0043f50b 	subeq	pc, r3, fp, lsl #10
   1341c:	14370300 	ldrtne	r0, [r7], #-768	; 0xfffffd00
   13420:	0000001d 	andeq	r0, r0, sp, lsl r0
   13424:	04550b0c 	ldrbeq	r0, [r5], #-2828	; 0xfffff4f4
   13428:	37030000 	strcc	r0, [r3, -r0]
   1342c:	00001d1b 	andeq	r1, r0, fp, lsl sp
   13430:	5f0e1000 	svcpl	0x000e1000
   13434:	38030078 	stmdacc	r3, {r3, r4, r5, r6}
   13438:	0001770b 	andeq	r7, r1, fp, lsl #14
   1343c:	0f001400 	svceq	0x00001400
   13440:	00011704 	andeq	r1, r1, r4, lsl #14
   13444:	00f30800 	rscseq	r0, r3, r0, lsl #16
   13448:	01870000 	orreq	r0, r7, r0
   1344c:	24090000 	strcs	r0, [r9], #-0
   13450:	00000000 	andeq	r0, r0, r0
   13454:	0b7d0d00 	bleq	1f5685c <__ccfg+0x1f368b4>
   13458:	03240000 			; <UNDEFINED> instruction: 0x03240000
   1345c:	020a083c 	andeq	r0, sl, #60, 16	; 0x3c0000
   13460:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
   13464:	03000005 	movweq	r0, #5
   13468:	001d093e 	andseq	r0, sp, lr, lsr r9
   1346c:	0b000000 	bleq	13474 <__exidx_end+0xd834>
   13470:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
   13474:	1d093f03 	stcne	15, cr3, [r9, #-12]
   13478:	04000000 	streq	r0, [r0], #-0
   1347c:	0003580b 	andeq	r5, r3, fp, lsl #16
   13480:	09400300 	stmdbeq	r0, {r8, r9}^
   13484:	0000001d 	andeq	r0, r0, sp, lsl r0
   13488:	06740b08 	ldrbteq	r0, [r4], -r8, lsl #22
   1348c:	41030000 	mrsmi	r0, (UNDEF: 3)
   13490:	00001d09 	andeq	r1, r0, r9, lsl #26
   13494:	540b0c00 	strpl	r0, [fp], #-3072	; 0xfffff400
   13498:	03000009 	movweq	r0, #9
   1349c:	001d0942 	andseq	r0, sp, r2, asr #18
   134a0:	0b100000 	bleq	4134a8 <__ccfg+0x3f3500>
   134a4:	00000ace 	andeq	r0, r0, lr, asr #21
   134a8:	1d094303 	stcne	3, cr4, [r9, #-12]
   134ac:	14000000 	strne	r0, [r0], #-0
   134b0:	0003460b 	andeq	r4, r3, fp, lsl #12
   134b4:	09440300 	stmdbeq	r4, {r8, r9}^
   134b8:	0000001d 	andeq	r0, r0, sp, lsl r0
   134bc:	05750b18 	ldrbeq	r0, [r5, #-2840]!	; 0xfffff4e8
   134c0:	45030000 	strmi	r0, [r3, #-0]
   134c4:	00001d09 	andeq	r1, r0, r9, lsl #26
   134c8:	f00b1c00 			; <UNDEFINED> instruction: 0xf00b1c00
   134cc:	03000008 	movweq	r0, #8
   134d0:	001d0946 	andseq	r0, sp, r6, asr #18
   134d4:	00200000 	eoreq	r0, r0, r0
   134d8:	00003b10 	andeq	r3, r0, r0, lsl fp
   134dc:	03010800 	movweq	r0, #6144	; 0x1800
   134e0:	024f084f 	subeq	r0, pc, #5177344	; 0x4f0000
   134e4:	2d0b0000 	stccs	0, cr0, [fp, #-0]
   134e8:	0300000d 	movweq	r0, #13
   134ec:	024f0a50 	subeq	r0, pc, #80, 20	; 0x50000
   134f0:	0b000000 	bleq	134f8 <__exidx_end+0xd8b8>
   134f4:	00000c17 	andeq	r0, r0, r7, lsl ip
   134f8:	4f095103 	svcmi	0x00095103
   134fc:	80000002 	andhi	r0, r0, r2
   13500:	000dc611 	andeq	ip, sp, r1, lsl r6
   13504:	0a530300 	beq	14d410c <__ccfg+0x14b4164>
   13508:	000000f3 	strdeq	r0, [r0], -r3
   1350c:	b7110100 	ldrlt	r0, [r1, -r0, lsl #2]
   13510:	0300000e 	movweq	r0, #14
   13514:	00f30a56 	rscseq	r0, r3, r6, asr sl
   13518:	01040000 	mrseq	r0, (UNDEF: 4)
   1351c:	00f10800 	rscseq	r0, r1, r0, lsl #16
   13520:	025f0000 	subseq	r0, pc, #0
   13524:	24090000 	strcs	r0, [r9], #-0
   13528:	1f000000 	svcne	0x00000000
   1352c:	0a161000 	beq	597534 <__ccfg+0x57758c>
   13530:	01900000 	orrseq	r0, r0, r0
   13534:	a2086203 	andge	r6, r8, #805306368	; 0x30000000
   13538:	0b000002 	bleq	13548 <__exidx_end+0xd908>
   1353c:	00000ec4 	andeq	r0, r0, r4, asr #29
   13540:	a2126303 	andsge	r6, r2, #201326592	; 0xc000000
   13544:	00000002 	andeq	r0, r0, r2
   13548:	0005840b 	andeq	r8, r5, fp, lsl #8
   1354c:	06640300 	strbteq	r0, [r4], -r0, lsl #6
   13550:	0000001d 	andeq	r0, r0, sp, lsl r0
   13554:	03070b04 	movweq	r0, #31492	; 0x7b04
   13558:	66030000 	strvs	r0, [r3], -r0
   1355c:	0002a809 	andeq	sl, r2, r9, lsl #16
   13560:	3b0b0800 	blcc	2d5568 <__ccfg+0x2b55c0>
   13564:	03000000 	movweq	r0, #0
   13568:	020a1e67 	andeq	r1, sl, #1648	; 0x670
   1356c:	00880000 	addeq	r0, r8, r0
   13570:	025f040f 	subseq	r0, pc, #251658240	; 0xf000000
   13574:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   13578:	b8000002 	stmdalt	r0, {r1}
   1357c:	09000002 	stmdbeq	r0, {r1}
   13580:	00000024 	andeq	r0, r0, r4, lsr #32
   13584:	040f001f 	streq	r0, [pc], #-31	; 1358c <__exidx_end+0xd94c>
   13588:	000002be 			; <UNDEFINED> instruction: 0x000002be
   1358c:	0cc50d12 	stcleq	13, cr0, [r5], {18}
   13590:	03080000 	movweq	r0, #32768	; 0x8000
   13594:	02e7087a 	rsceq	r0, r7, #7995392	; 0x7a0000
   13598:	d70b0000 	strle	r0, [fp, -r0]
   1359c:	0300000c 	movweq	r0, #12
   135a0:	02e7117b 	rsceq	r1, r7, #-1073741794	; 0xc000001e
   135a4:	0b000000 	bleq	135ac <__exidx_end+0xd96c>
   135a8:	00001da0 	andeq	r1, r0, r0, lsr #27
   135ac:	1d067c03 	stcne	12, cr7, [r6, #-12]
   135b0:	04000000 	streq	r0, [r0], #-0
   135b4:	4d040f00 	stcmi	15, cr0, [r4, #-0]
   135b8:	0d000000 	stceq	0, cr0, [r0, #-0]
   135bc:	0000044d 	andeq	r0, r0, sp, asr #8
   135c0:	08ba0368 	ldmeq	sl!, {r3, r5, r6, r8, r9}
   135c4:	00000430 	andeq	r0, r0, r0, lsr r4
   135c8:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
   135cc:	e712bb03 	ldr	fp, [r2, -r3, lsl #22]
   135d0:	00000002 	andeq	r0, r0, r2
   135d4:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   135d8:	1d07bc03 	stcne	12, cr11, [r7, #-12]
   135dc:	04000000 	streq	r0, [r0], #-0
   135e0:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   135e4:	1d07bd03 	stcne	13, cr11, [r7, #-12]
   135e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   135ec:	0001c40b 	andeq	ip, r1, fp, lsl #8
   135f0:	09be0300 	ldmibeq	lr!, {r8, r9}
   135f4:	00000054 	andeq	r0, r0, r4, asr r0
   135f8:	08590b0c 	ldmdaeq	r9, {r2, r3, r8, r9, fp}^
   135fc:	bf030000 	svclt	0x00030000
   13600:	00005409 	andeq	r5, r0, r9, lsl #8
   13604:	5f0e0e00 	svcpl	0x000e0e00
   13608:	03006662 	movweq	r6, #1634	; 0x662
   1360c:	02bf11c0 	adcseq	r1, pc, #192, 2	; 0x30
   13610:	0b100000 	bleq	413618 <__ccfg+0x3f3670>
   13614:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
   13618:	1d07c103 	stfned	f4, [r7, #-12]
   1361c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13620:	00030c0b 	andeq	r0, r3, fp, lsl #24
   13624:	0ac80300 	beq	ff21422c <_estack+0xdf20f22c>
   13628:	000000f1 	strdeq	r0, [r0], -r1
   1362c:	1d2f0b1c 	vstmdbne	pc!, {d0-d13}
   13630:	ca030000 	bgt	d3638 <__ccfg+0xb3690>
   13634:	0005b41d 	andeq	fp, r5, sp, lsl r4
   13638:	f60b2000 			; <UNDEFINED> instruction: 0xf60b2000
   1363c:	0300001c 	movweq	r0, #28
   13640:	05de1dcc 	ldrbeq	r1, [lr, #3532]	; 0xdcc
   13644:	0b240000 	bleq	91364c <__ccfg+0x8f36a4>
   13648:	00000ee4 	andeq	r0, r0, r4, ror #29
   1364c:	020dcf03 	andeq	ip, sp, #3, 30
   13650:	28000006 	stmdacs	r0, {r1, r2}
   13654:	001ce40b 	andseq	lr, ip, fp, lsl #8
   13658:	09d00300 	ldmibeq	r0, {r8, r9}^
   1365c:	0000061c 	andeq	r0, r0, ip, lsl r6
   13660:	755f0e2c 	ldrbvc	r0, [pc, #-3628]	; 1283c <__exidx_end+0xcbfc>
   13664:	d3030062 	movwle	r0, #12386	; 0x3062
   13668:	0002bf11 	andeq	fp, r2, r1, lsl pc
   1366c:	5f0e3000 	svcpl	0x000e3000
   13670:	03007075 	movweq	r7, #117	; 0x75
   13674:	02e712d4 	rsceq	r1, r7, #212, 4	; 0x4000000d
   13678:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
   1367c:	0072755f 	rsbseq	r7, r2, pc, asr r5
   13680:	1d07d503 	cfstr32ne	mvfx13, [r7, #-12]
   13684:	3c000000 	stccc	0, cr0, [r0], {-0}
   13688:	000f1b0b 	andeq	r1, pc, fp, lsl #22
   1368c:	11d80300 	bicsne	r0, r8, r0, lsl #6
   13690:	00000622 	andeq	r0, r0, r2, lsr #12
   13694:	0e640b40 	vnmuleq.f64	d16, d4, d0
   13698:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
   1369c:	00063211 	andeq	r3, r6, r1, lsl r2
   136a0:	5f0e4300 	svcpl	0x000e4300
   136a4:	0300626c 	movweq	r6, #620	; 0x26c
   136a8:	02bf11dc 	adcseq	r1, pc, #220, 2	; 0x37
   136ac:	0b440000 	bleq	11136b4 <__ccfg+0x10f370c>
   136b0:	00000b74 	andeq	r0, r0, r4, ror fp
   136b4:	1d07df03 	stcne	15, cr13, [r7, #-12]
   136b8:	4c000000 	stcmi	0, cr0, [r0], {-0}
   136bc:	00047c0b 	andeq	r7, r4, fp, lsl #24
   136c0:	0ae00300 	beq	ff8142c8 <_estack+0xdf80f2c8>
   136c4:	00000077 	andeq	r0, r0, r7, ror r0
   136c8:	47530b50 			; <UNDEFINED> instruction: 0x47530b50
   136cc:	e3030000 	movw	r0, #12288	; 0x3000
   136d0:	00044e12 	andeq	r4, r4, r2, lsl lr
   136d4:	9a0b5400 	bls	2e86dc <__ccfg+0x2c8734>
   136d8:	0300000b 	movweq	r0, #11
   136dc:	010b0ce7 	smlatteq	fp, r7, ip, r0
   136e0:	0b580000 	bleq	16136e8 <__ccfg+0x15f3740>
   136e4:	00000a1e 	andeq	r0, r0, lr, lsl sl
   136e8:	e50ee903 	str	lr, [lr, #-2307]	; 0xfffff6fd
   136ec:	5c000000 	stcpl	0, cr0, [r0], {-0}
   136f0:	000e970b 	andeq	r9, lr, fp, lsl #14
   136f4:	09ea0300 	stmibeq	sl!, {r8, r9}^
   136f8:	0000001d 	andeq	r0, r0, sp, lsl r0
   136fc:	1d130064 	ldcne	0, cr0, [r3, #-400]	; 0xfffffe70
   13700:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
   13704:	14000004 	strne	r0, [r0], #-4
   13708:	0000044e 	andeq	r0, r0, lr, asr #8
   1370c:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   13710:	05a21400 	streq	r1, [r2, #1024]!	; 0x400
   13714:	1d140000 	ldcne	0, cr0, [r4, #-0]
   13718:	00000000 	andeq	r0, r0, r0
   1371c:	0459040f 	ldrbeq	r0, [r9], #-1039	; 0xfffffbf1
   13720:	4e150000 	cdpmi	0, 1, cr0, cr5, cr0, {0}
   13724:	16000004 	strne	r0, [r0], -r4
   13728:	00000d5f 	andeq	r0, r0, pc, asr sp
   1372c:	65030428 	strvs	r0, [r3, #-1064]	; 0xfffffbd8
   13730:	05a20802 	streq	r0, [r2, #2050]!	; 0x802
   13734:	04170000 	ldreq	r0, [r7], #-0
   13738:	03000009 	movweq	r0, #9
   1373c:	1d070267 	sfmne	f0, 4, [r7, #-412]	; 0xfffffe64
   13740:	00000000 	andeq	r0, r0, r0
   13744:	0007e217 	andeq	lr, r7, r7, lsl r2
   13748:	026c0300 	rsbeq	r0, ip, #0, 6
   1374c:	00068e0b 	andeq	r8, r6, fp, lsl #28
   13750:	f7170400 			; <UNDEFINED> instruction: 0xf7170400
   13754:	03000002 	movweq	r0, #2
   13758:	8e14026c 	cdphi	2, 1, cr0, cr4, cr12, {3}
   1375c:	08000006 	stmdaeq	r0, {r1, r2}
   13760:	000f0a17 	andeq	r0, pc, r7, lsl sl	; <UNPREDICTABLE>
   13764:	026c0300 	rsbeq	r0, ip, #0, 6
   13768:	00068e1e 	andeq	r8, r6, lr, lsl lr
   1376c:	7f170c00 	svcvc	0x00170c00
   13770:	03000005 	movweq	r0, #5
   13774:	1d08026e 	sfmne	f0, 4, [r8, #-440]	; 0xfffffe48
   13778:	10000000 	andne	r0, r0, r0
   1377c:	0004d417 	andeq	sp, r4, r7, lsl r4
   13780:	026f0300 	rsbeq	r0, pc, #0, 6
   13784:	00088e08 	andeq	r8, r8, r8, lsl #28
   13788:	77171400 	ldrvc	r1, [r7, -r0, lsl #8]
   1378c:	0300000e 	movweq	r0, #14
   13790:	1d070272 	sfmne	f0, 4, [r7, #-456]	; 0xfffffe38
   13794:	30000000 	andcc	r0, r0, r0
   13798:	0042a117 	subeq	sl, r2, r7, lsl r1
   1379c:	02730300 	rsbseq	r0, r3, #0, 6
   137a0:	0008a316 	andeq	sl, r8, r6, lsl r3
   137a4:	8a173400 	bhi	5e07ac <__ccfg+0x5c0804>
   137a8:	03000007 	movweq	r0, #7
   137ac:	1d070275 	sfmne	f0, 4, [r7, #-468]	; 0xfffffe2c
   137b0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   137b4:	00088417 	andeq	r8, r8, r7, lsl r4
   137b8:	02770300 	rsbseq	r0, r7, #0, 6
   137bc:	0008b40a 	andeq	fp, r8, sl, lsl #8
   137c0:	50173c00 	andspl	r3, r7, r0, lsl #24
   137c4:	03000003 	movweq	r0, #3
   137c8:	7113027a 	tstvc	r3, sl, ror r2
   137cc:	40000001 	andmi	r0, r0, r1
   137d0:	00040b17 	andeq	r0, r4, r7, lsl fp
   137d4:	027b0300 	rsbseq	r0, fp, #0, 6
   137d8:	00001d07 	andeq	r1, r0, r7, lsl #26
   137dc:	09174400 	ldmdbeq	r7, {sl, lr}
   137e0:	03000006 	movweq	r0, #6
   137e4:	7113027c 	tstvc	r3, ip, ror r2
   137e8:	48000001 	stmdami	r0, {r0}
   137ec:	00081f17 	andeq	r1, r8, r7, lsl pc
   137f0:	027d0300 	rsbseq	r0, sp, #0, 6
   137f4:	0008ba14 	andeq	fp, r8, r4, lsl sl
   137f8:	5a174c00 	bpl	5e6800 <__ccfg+0x5c6858>
   137fc:	0300000b 	movweq	r0, #11
   13800:	1d070280 	sfmne	f0, 4, [r7, #-512]	; 0xfffffe00
   13804:	50000000 	andpl	r0, r0, r0
   13808:	000c5317 	andeq	r5, ip, r7, lsl r3
   1380c:	02810300 	addeq	r0, r1, #0, 6
   13810:	0005a209 	andeq	sl, r5, r9, lsl #4
   13814:	6d175400 	cfldrsvs	mvf5, [r7, #-0]
   13818:	0300000c 	movweq	r0, #12
   1381c:	690702a4 	stmdbvs	r7, {r2, r5, r7, r9}
   13820:	58000008 	stmdapl	r0, {r3}
   13824:	000a1618 	andeq	r1, sl, r8, lsl r6
   13828:	02a80300 	adceq	r0, r8, #0, 6
   1382c:	0002a213 	andeq	sl, r2, r3, lsl r2
   13830:	18014800 	stmdane	r1, {fp, lr}
   13834:	000006ae 	andeq	r0, r0, lr, lsr #13
   13838:	1202a903 	andne	sl, r2, #49152	; 0xc000
   1383c:	0000025f 	andeq	r0, r0, pc, asr r2
   13840:	9518014c 	ldrls	r0, [r8, #-332]	; 0xfffffeb4
   13844:	03000006 	movweq	r0, #6
   13848:	cb0c02ad 	blgt	314304 <__ccfg+0x2f435c>
   1384c:	dc000008 	stcle	0, cr0, [r0], {8}
   13850:	0ce31802 	stcleq	8, cr1, [r3], #8
   13854:	b2030000 	andlt	r0, r3, #0
   13858:	064f1002 	strbeq	r1, [pc], -r2
   1385c:	02e00000 	rsceq	r0, r0, #0
   13860:	000aa618 	andeq	sl, sl, r8, lsl r6
   13864:	02b40300 	adcseq	r0, r4, #0, 6
   13868:	0008d70a 	andeq	sp, r8, sl, lsl #14
   1386c:	0002ec00 	andeq	lr, r2, r0, lsl #24
   13870:	05a8040f 	streq	r0, [r8, #1039]!	; 0x40f
   13874:	01030000 	mrseq	r0, (UNDEF: 3)
   13878:	000c6408 	andeq	r6, ip, r8, lsl #8
   1387c:	05a81500 	streq	r1, [r8, #1280]!	; 0x500
   13880:	040f0000 	streq	r0, [pc], #-0	; 13888 <__exidx_end+0xdc48>
   13884:	00000430 	andeq	r0, r0, r0, lsr r4
   13888:	00001d13 	andeq	r1, r0, r3, lsl sp
   1388c:	0005d800 	andeq	sp, r5, r0, lsl #16
   13890:	044e1400 	strbeq	r1, [lr], #-1024	; 0xfffffc00
   13894:	f1140000 			; <UNDEFINED> instruction: 0xf1140000
   13898:	14000000 	strne	r0, [r0], #-0
   1389c:	000005d8 	ldrdeq	r0, [r0], -r8
   138a0:	00001d14 	andeq	r1, r0, r4, lsl sp
   138a4:	040f0000 	streq	r0, [pc], #-0	; 138ac <__exidx_end+0xdc6c>
   138a8:	000005af 	andeq	r0, r0, pc, lsr #11
   138ac:	05ba040f 	ldreq	r0, [sl, #1039]!	; 0x40f
   138b0:	83130000 	tsthi	r3, #0
   138b4:	02000000 	andeq	r0, r0, #0
   138b8:	14000006 	strne	r0, [r0], #-6
   138bc:	0000044e 	andeq	r0, r0, lr, asr #8
   138c0:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   138c4:	00831400 	addeq	r1, r3, r0, lsl #8
   138c8:	1d140000 	ldcne	0, cr0, [r4, #-0]
   138cc:	00000000 	andeq	r0, r0, r0
   138d0:	05e4040f 	strbeq	r0, [r4, #1039]!	; 0x40f
   138d4:	1d130000 	ldcne	0, cr0, [r3, #-0]
   138d8:	1c000000 	stcne	0, cr0, [r0], {-0}
   138dc:	14000006 	strne	r0, [r0], #-6
   138e0:	0000044e 	andeq	r0, r0, lr, asr #8
   138e4:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   138e8:	040f0000 	streq	r0, [pc], #-0	; 138f0 <__exidx_end+0xdcb0>
   138ec:	00000608 	andeq	r0, r0, r8, lsl #12
   138f0:	00004d08 	andeq	r4, r0, r8, lsl #26
   138f4:	00063200 	andeq	r3, r6, r0, lsl #4
   138f8:	00240900 	eoreq	r0, r4, r0, lsl #18
   138fc:	00020000 	andeq	r0, r2, r0
   13900:	00004d08 	andeq	r4, r0, r8, lsl #26
   13904:	00064200 	andeq	r4, r6, r0, lsl #4
   13908:	00240900 	eoreq	r0, r4, r0, lsl #18
   1390c:	00000000 	andeq	r0, r0, r0
   13910:	00046e04 	andeq	r6, r4, r4, lsl #28
   13914:	01240300 			; <UNDEFINED> instruction: 0x01240300
   13918:	0002ed1a 	andeq	lr, r2, sl, lsl sp
   1391c:	0cdd1900 			; <UNDEFINED> instruction: 0x0cdd1900
   13920:	030c0000 	movweq	r0, #49152	; 0xc000
   13924:	88080128 	stmdahi	r8, {r3, r5, r8}
   13928:	17000006 	strne	r0, [r0, -r6]
   1392c:	00000ec4 	andeq	r0, r0, r4, asr #29
   13930:	11012a03 	tstne	r1, r3, lsl #20
   13934:	00000688 	andeq	r0, r0, r8, lsl #13
   13938:	0bce1700 	bleq	ff399540 <_estack+0xdf394540>
   1393c:	2b030000 	blcs	d3944 <__ccfg+0xb399c>
   13940:	001d0701 	andseq	r0, sp, r1, lsl #14
   13944:	17040000 	strne	r0, [r4, -r0]
   13948:	00000772 	andeq	r0, r0, r2, ror r7
   1394c:	0b012c03 	bleq	5e960 <__ccfg+0x3e9b8>
   13950:	0000068e 	andeq	r0, r0, lr, lsl #13
   13954:	040f0008 	streq	r0, [pc], #-8	; 1395c <__exidx_end+0xdd1c>
   13958:	0000064f 	andeq	r0, r0, pc, asr #12
   1395c:	0642040f 	strbeq	r0, [r2], -pc, lsl #8
   13960:	da190000 	ble	653968 <__ccfg+0x6339c0>
   13964:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   13968:	08014403 	stmdaeq	r1, {r0, r1, sl, lr}
   1396c:	000006cd 	andeq	r0, r0, sp, asr #13
   13970:	00164b17 	andseq	r4, r6, r7, lsl fp
   13974:	01450300 	mrseq	r0, (UNDEF: 117)
   13978:	0006cd12 	andeq	ip, r6, r2, lsl sp
   1397c:	31170000 	tstcc	r7, r0
   13980:	03000008 	movweq	r0, #8
   13984:	cd120146 	ldfgts	f0, [r2, #-280]	; 0xfffffee8
   13988:	06000006 	streq	r0, [r0], -r6
   1398c:	0014fd17 	andseq	pc, r4, r7, lsl sp	; <UNPREDICTABLE>
   13990:	01470300 	mrseq	r0, (UNDEF: 119)
   13994:	00005b12 	andeq	r5, r0, r2, lsl fp
   13998:	08000c00 	stmdaeq	r0, {sl, fp}
   1399c:	0000005b 	andeq	r0, r0, fp, asr r0
   139a0:	000006dd 	ldrdeq	r0, [r0], -sp
   139a4:	00002409 	andeq	r2, r0, r9, lsl #8
   139a8:	1a000200 	bne	141b0 <__exidx_end+0xe570>
   139ac:	028503d0 	addeq	r0, r5, #208, 6	; 0x40000003
   139b0:	0007f207 	andeq	pc, r7, r7, lsl #4
   139b4:	0e6a1700 	cdpeq	7, 6, cr1, cr10, cr0, {0}
   139b8:	87030000 	strhi	r0, [r3, -r0]
   139bc:	00241802 	eoreq	r1, r4, r2, lsl #16
   139c0:	17000000 	strne	r0, [r0, -r0]
   139c4:	00000ceb 	andeq	r0, r0, fp, ror #25
   139c8:	12028803 	andne	r8, r2, #196608	; 0x30000
   139cc:	000005a2 	andeq	r0, r0, r2, lsr #11
   139d0:	04381704 	ldrteq	r1, [r8], #-1796	; 0xfffff8fc
   139d4:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
   139d8:	07f21002 	ldrbeq	r1, [r2, r2]!
   139dc:	17080000 	strne	r0, [r8, -r0]
   139e0:	00000b43 	andeq	r0, r0, r3, asr #22
   139e4:	17028a03 	strne	r8, [r2, -r3, lsl #20]
   139e8:	00000187 	andeq	r0, r0, r7, lsl #3
   139ec:	07e91724 	strbeq	r1, [r9, r4, lsr #14]!
   139f0:	8b030000 	blhi	d39f8 <__ccfg+0xb3a50>
   139f4:	001d0f02 	andseq	r0, sp, r2, lsl #30
   139f8:	17480000 	strbne	r0, [r8, -r0]
   139fc:	00000ebf 			; <UNDEFINED> instruction: 0x00000ebf
   13a00:	2c028c03 	stccs	12, cr8, [r2], {3}
   13a04:	00000070 	andeq	r0, r0, r0, ror r0
   13a08:	007f1750 	rsbseq	r1, pc, r0, asr r7	; <UNPREDICTABLE>
   13a0c:	8d030000 	stchi	0, cr0, [r3, #-0]
   13a10:	06941a02 	ldreq	r1, [r4], r2, lsl #20
   13a14:	17580000 	ldrbne	r0, [r8, -r0]
   13a18:	00000639 	andeq	r0, r0, r9, lsr r6
   13a1c:	16028e03 	strne	r8, [r2], -r3, lsl #28
   13a20:	000000e5 	andeq	r0, r0, r5, ror #1
   13a24:	0cf81768 	ldcleq	7, cr1, [r8], #416	; 0x1a0
   13a28:	8f030000 	svchi	0x00030000
   13a2c:	00e51602 	rsceq	r1, r5, r2, lsl #12
   13a30:	17700000 	ldrbne	r0, [r0, -r0]!
   13a34:	00000071 	andeq	r0, r0, r1, ror r0
   13a38:	16029003 	strne	r9, [r2], -r3
   13a3c:	000000e5 	andeq	r0, r0, r5, ror #1
   13a40:	0b6a1778 	bleq	1a99828 <__ccfg+0x1a79880>
   13a44:	91030000 	mrsls	r0, (UNDEF: 3)
   13a48:	08021002 	stmdaeq	r2, {r1, ip}
   13a4c:	17800000 	strne	r0, [r0, r0]
   13a50:	00000415 	andeq	r0, r0, r5, lsl r4
   13a54:	10029203 	andne	r9, r2, r3, lsl #4
   13a58:	00000812 	andeq	r0, r0, r2, lsl r8
   13a5c:	0c8d1788 	stceq	7, cr1, [sp], {136}	; 0x88
   13a60:	93030000 	movwls	r0, #12288	; 0x3000
   13a64:	001d0f02 	andseq	r0, sp, r2, lsl #30
   13a68:	17a00000 	strne	r0, [r0, r0]!
   13a6c:	000002ac 	andeq	r0, r0, ip, lsr #5
   13a70:	16029403 	strne	r9, [r2], -r3, lsl #8
   13a74:	000000e5 	andeq	r0, r0, r5, ror #1
   13a78:	069f17a4 	ldreq	r1, [pc], r4, lsr #15
   13a7c:	95030000 	strls	r0, [r3, #-0]
   13a80:	00e51602 	rsceq	r1, r5, r2, lsl #12
   13a84:	17ac0000 	strne	r0, [ip, r0]!
   13a88:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
   13a8c:	16029603 	strne	r9, [r2], -r3, lsl #12
   13a90:	000000e5 	andeq	r0, r0, r5, ror #1
   13a94:	084a17b4 	stmdaeq	sl, {r2, r4, r5, r7, r8, r9, sl, ip}^
   13a98:	97030000 	strls	r0, [r3, -r0]
   13a9c:	00e51602 	rsceq	r1, r5, r2, lsl #12
   13aa0:	17bc0000 	ldrne	r0, [ip, r0]!
   13aa4:	00000628 	andeq	r0, r0, r8, lsr #12
   13aa8:	16029803 	strne	r9, [r2], -r3, lsl #16
   13aac:	000000e5 	andeq	r0, r0, r5, ror #1
   13ab0:	090217c4 	stmdbeq	r2, {r2, r6, r7, r8, r9, sl, ip}
   13ab4:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
   13ab8:	001d0802 	andseq	r0, sp, r2, lsl #16
   13abc:	00cc0000 	sbceq	r0, ip, r0
   13ac0:	0005a808 	andeq	sl, r5, r8, lsl #16
   13ac4:	00080200 	andeq	r0, r8, r0, lsl #4
   13ac8:	00240900 	eoreq	r0, r4, r0, lsl #18
   13acc:	00190000 	andseq	r0, r9, r0
   13ad0:	0005a808 	andeq	sl, r5, r8, lsl #16
   13ad4:	00081200 	andeq	r1, r8, r0, lsl #4
   13ad8:	00240900 	eoreq	r0, r4, r0, lsl #18
   13adc:	00070000 	andeq	r0, r7, r0
   13ae0:	0005a808 	andeq	sl, r5, r8, lsl #16
   13ae4:	00082200 	andeq	r2, r8, r0, lsl #4
   13ae8:	00240900 	eoreq	r0, r4, r0, lsl #18
   13aec:	00170000 	andseq	r0, r7, r0
   13af0:	9e03f01a 	mcrls	0, 0, pc, cr3, cr10, {0}	; <UNPREDICTABLE>
   13af4:	08490702 	stmdaeq	r9, {r1, r8, r9, sl}^
   13af8:	c0170000 	andsgt	r0, r7, r0
   13afc:	03000003 	movweq	r0, #3
   13b00:	491b02a1 	ldmdbmi	fp, {r0, r5, r7, r9}
   13b04:	00000008 	andeq	r0, r0, r8
   13b08:	000f1217 	andeq	r1, pc, r7, lsl r2	; <UNPREDICTABLE>
   13b0c:	02a20300 	adceq	r0, r2, #0, 6
   13b10:	00085918 	andeq	r5, r8, r8, lsl r9
   13b14:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
   13b18:	000002e7 	andeq	r0, r0, r7, ror #5
   13b1c:	00000859 	andeq	r0, r0, r9, asr r8
   13b20:	00002409 	andeq	r2, r0, r9, lsl #8
   13b24:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
   13b28:	00000024 	andeq	r0, r0, r4, lsr #32
   13b2c:	00000869 	andeq	r0, r0, r9, ror #16
   13b30:	00002409 	andeq	r2, r0, r9, lsl #8
   13b34:	1b001d00 	blne	1af3c <__exidx_end+0x152fc>
   13b38:	028303f0 	addeq	r0, r3, #240, 6	; 0xc0000003
   13b3c:	00088e03 	andeq	r8, r8, r3, lsl #28
   13b40:	0d5f1c00 	ldcleq	12, cr1, [pc, #-0]	; 13b48 <__exidx_end+0xdf08>
   13b44:	9a030000 	bls	d3b4c <__ccfg+0xb3ba4>
   13b48:	06dd0b02 	ldrbeq	r0, [sp], r2, lsl #22
   13b4c:	521c0000 	andspl	r0, ip, #0
   13b50:	0300000b 	movweq	r0, #11
   13b54:	220b02a3 	andcs	r0, fp, #805306378	; 0x3000000a
   13b58:	00000008 	andeq	r0, r0, r8
   13b5c:	0005a808 	andeq	sl, r5, r8, lsl #16
   13b60:	00089e00 	andeq	r9, r8, r0, lsl #28
   13b64:	00240900 	eoreq	r0, r4, r0, lsl #18
   13b68:	00180000 	andseq	r0, r8, r0
   13b6c:	000eca1d 	andeq	ip, lr, sp, lsl sl
   13b70:	9e040f00 	cdpls	15, 0, cr0, cr4, cr0, {0}
   13b74:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   13b78:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
   13b7c:	00044e14 	andeq	r4, r4, r4, lsl lr
   13b80:	040f0000 	streq	r0, [pc], #-0	; 13b88 <__exidx_end+0xdf48>
   13b84:	000008a9 	andeq	r0, r0, r9, lsr #17
   13b88:	0171040f 	cmneq	r1, pc, lsl #8
   13b8c:	cb1e0000 	blgt	793b94 <__ccfg+0x773bec>
   13b90:	14000008 	strne	r0, [r0], #-8
   13b94:	0000001d 	andeq	r0, r0, sp, lsl r0
   13b98:	d1040f00 	tstle	r4, r0, lsl #30
   13b9c:	0f000008 	svceq	0x00000008
   13ba0:	0008c004 	andeq	ip, r8, r4
   13ba4:	06420800 	strbeq	r0, [r2], -r0, lsl #16
   13ba8:	08e70000 	stmiaeq	r7!, {}^	; <UNPREDICTABLE>
   13bac:	24090000 	strcs	r0, [r9], #-0
   13bb0:	02000000 	andeq	r0, r0, #0
   13bb4:	0ac21f00 	beq	ff09b7bc <_estack+0xdf0967bc>
   13bb8:	33030000 	movwcc	r0, #12288	; 0x3000
   13bbc:	044e1703 	strbeq	r1, [lr], #-1795	; 0xfffff8fd
   13bc0:	bb1f0000 	bllt	7d3bc8 <__ccfg+0x7b3c20>
   13bc4:	0300000a 	movweq	r0, #10
   13bc8:	541d0334 	ldrpl	r0, [sp], #-820	; 0xfffffccc
   13bcc:	20000004 	andcs	r0, r0, r4
   13bd0:	0000474d 	andeq	r4, r0, sp, asr #14
   13bd4:	59301705 	ldmdbpl	r0!, {r0, r2, r8, r9, sl, ip}
   13bd8:	05000004 	streq	r0, [r0, #-4]
   13bdc:	00011803 	andeq	r1, r1, r3, lsl #16
   13be0:	08e72120 	stmiaeq	r7!, {r5, r8, sp}^
   13be4:	03050000 	movweq	r0, #20480	; 0x5000
   13be8:	20000110 	andcs	r0, r0, r0, lsl r1
   13bec:	0008f421 	andeq	pc, r8, r1, lsr #8
   13bf0:	00030500 	andeq	r0, r3, r0, lsl #10
   13bf4:	00000000 	andeq	r0, r0, r0
   13bf8:	00000a92 	muleq	r0, r2, sl
   13bfc:	47790004 	ldrbmi	r0, [r9, -r4]!
   13c00:	01040000 	mrseq	r0, (UNDEF: 4)
   13c04:	00004aaa 	andeq	r4, r0, sl, lsr #21
   13c08:	0049040c 	subeq	r0, r9, ip, lsl #8
   13c0c:	00522700 	subseq	r2, r2, r0, lsl #14
   13c10:	0049f400 	subeq	pc, r9, r0, lsl #8
   13c14:	00005400 	andeq	r5, r0, r0, lsl #8
   13c18:	00932800 	addseq	r2, r3, r0, lsl #16
   13c1c:	07080200 	streq	r0, [r8, -r0, lsl #4]
   13c20:	00000421 	andeq	r0, r0, r1, lsr #8
   13c24:	69050403 	stmdbvs	r5, {r0, r1, sl}
   13c28:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   13c2c:	042b0704 	strteq	r0, [fp], #-1796	; 0xfffff8fc
   13c30:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   13c34:	0007f805 	andeq	pc, r7, r5, lsl #16
   13c38:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   13c3c:	0000442a 	andeq	r4, r0, sl, lsr #8
   13c40:	004b9504 	subeq	r9, fp, r4, lsl #10
   13c44:	162a0200 	strtne	r0, [sl], -r0, lsl #4
   13c48:	00000033 	andeq	r0, r0, r3, lsr r0
   13c4c:	004f4204 	subeq	r4, pc, r4, lsl #4
   13c50:	152f0200 	strne	r0, [pc, #-512]!	; 13a58 <__exidx_end+0xde18>
   13c54:	00000060 	andeq	r0, r0, r0, rrx
   13c58:	00660405 	rsbeq	r0, r6, r5, lsl #8
   13c5c:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
   13c60:	75000000 	strvc	r0, [r0, #-0]
   13c64:	07000000 	streq	r0, [r0, -r0]
   13c68:	00000075 	andeq	r0, r0, r5, ror r0
   13c6c:	7b040500 	blvc	115074 <__ccfg+0xf50cc>
   13c70:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13c74:	0056a404 	subseq	sl, r6, r4, lsl #8
   13c78:	0f360200 	svceq	0x00360200
   13c7c:	00000088 	andeq	r0, r0, r8, lsl #1
   13c80:	008e0405 	addeq	r0, lr, r5, lsl #8
   13c84:	2c060000 	stccs	0, cr0, [r6], {-0}
   13c88:	a2000000 	andge	r0, r0, #0
   13c8c:	07000000 	streq	r0, [r0, -r0]
   13c90:	00000075 	andeq	r0, r0, r5, ror r0
   13c94:	00007507 	andeq	r7, r0, r7, lsl #10
   13c98:	01020000 	mrseq	r0, (UNDEF: 2)
   13c9c:	000c5b08 	andeq	r5, ip, r8, lsl #22
   13ca0:	515c0900 	cmppl	ip, r0, lsl #18
   13ca4:	bb020000 	bllt	93cac <__ccfg+0x73d04>
   13ca8:	00005412 	andeq	r5, r0, r2, lsl r4
   13cac:	56d70900 	ldrbpl	r0, [r7], r0, lsl #18
   13cb0:	be020000 	cdplt	0, 0, cr0, cr2, cr0, {0}
   13cb4:	00007c10 	andeq	r7, r0, r0, lsl ip
   13cb8:	06010200 	streq	r0, [r1], -r0, lsl #4
   13cbc:	00000c5d 	andeq	r0, r0, sp, asr ip
   13cc0:	004e620a 	subeq	r6, lr, sl, lsl #4
   13cc4:	a2010700 	andge	r0, r1, #0, 14
   13cc8:	03000000 	movweq	r0, #0
   13ccc:	01f50617 	mvnseq	r0, r7, lsl r6
   13cd0:	380b0000 	stmdacc	fp, {}	; <UNPREDICTABLE>
   13cd4:	00000049 	andeq	r0, r0, r9, asr #32
   13cd8:	004d610b 	subeq	r6, sp, fp, lsl #2
   13cdc:	890b0100 	stmdbhi	fp, {r8}
   13ce0:	02000052 	andeq	r0, r0, #82	; 0x52
   13ce4:	0055ea0b 	subseq	lr, r5, fp, lsl #20
   13ce8:	cb0b0300 	blgt	2d48f0 <__ccfg+0x2b4948>
   13cec:	04000051 	streq	r0, [r0], #-81	; 0xffffffaf
   13cf0:	0055070b 	subseq	r0, r5, fp, lsl #14
   13cf4:	6b0b0500 	blvs	2d50fc <__ccfg+0x2b5154>
   13cf8:	06000054 			; <UNDEFINED> instruction: 0x06000054
   13cfc:	0049590b 	subeq	r5, r9, fp, lsl #18
   13d00:	1c0b0700 	stcne	7, cr0, [fp], {-0}
   13d04:	08000055 	stmdaeq	r0, {r0, r2, r4, r6}
   13d08:	00552a0b 	subseq	r2, r5, fp, lsl #20
   13d0c:	dd0b0900 	vstrle.16	s0, [fp, #-0]	; <UNPREDICTABLE>
   13d10:	0a000055 	beq	13e6c <__exidx_end+0xe22c>
   13d14:	0051220b 	subseq	r2, r1, fp, lsl #4
   13d18:	d60b0b00 	strle	r0, [fp], -r0, lsl #22
   13d1c:	0c00004b 	stceq	0, cr0, [r0], {75}	; 0x4b
   13d20:	004bea0b 	subeq	lr, fp, fp, lsl #20
   13d24:	a60b0d00 	strge	r0, [fp], -r0, lsl #26
   13d28:	0e00004e 	cdpeq	0, 0, cr0, cr0, cr14, {2}
   13d2c:	004ebc0b 	subeq	fp, lr, fp, lsl #24
   13d30:	9b0b0f00 	blls	2d7938 <__ccfg+0x2b7990>
   13d34:	1000004d 	andne	r0, r0, sp, asr #32
   13d38:	0051af0b 	subseq	sl, r1, fp, lsl #30
   13d3c:	250b1100 	strcs	r1, [fp, #-256]	; 0xffffff00
   13d40:	1200004e 	andne	r0, r0, #78	; 0x4e
   13d44:	0058a20b 	subseq	sl, r8, fp, lsl #4
   13d48:	c20b1300 	andgt	r1, fp, #0, 6
   13d4c:	14000049 	strne	r0, [r0], #-73	; 0xffffffb7
   13d50:	004e490b 	subeq	r4, lr, fp, lsl #18
   13d54:	d70b1500 	strle	r1, [fp, -r0, lsl #10]
   13d58:	16000048 	strne	r0, [r0], -r8, asr #32
   13d5c:	00560d0b 	subseq	r0, r6, fp, lsl #26
   13d60:	300b1700 	andcc	r1, fp, r0, lsl #14
   13d64:	18000057 	stmdane	r0, {r0, r1, r2, r4, r6}
   13d68:	004e6e0b 	subeq	r6, lr, fp, lsl #28
   13d6c:	fb0b1900 	blx	2da176 <__ccfg+0x2ba1ce>
   13d70:	1a000052 	bne	13ec0 <__exidx_end+0xe280>
   13d74:	00561b0b 	subseq	r1, r6, fp, lsl #22
   13d78:	f80b1b00 			; <UNDEFINED> instruction: 0xf80b1b00
   13d7c:	1c000047 	stcne	0, cr0, [r0], {71}	; 0x47
   13d80:	0056290b 	subseq	r2, r6, fp, lsl #18
   13d84:	370b1d00 	strcc	r1, [fp, -r0, lsl #26]
   13d88:	1e000056 	mcrne	0, 0, r0, cr0, cr6, {2}
   13d8c:	0047a60b 	subeq	sl, r7, fp, lsl #12
   13d90:	610b1f00 	tstvs	fp, r0, lsl #30
   13d94:	20000056 	andcs	r0, r0, r6, asr r0
   13d98:	0053ac0b 	subseq	sl, r3, fp, lsl #24
   13d9c:	810b2100 	mrshi	r2, (UNDEF: 27)
   13da0:	22000051 	andcs	r0, r0, #81	; 0x51
   13da4:	0056000b 	subseq	r0, r6, fp
   13da8:	a30b2300 	movwge	r2, #45824	; 0xb300
   13dac:	24000050 	strcs	r0, [r0], #-80	; 0xffffffb0
   13db0:	004fa50b 	subeq	sl, pc, fp, lsl #10
   13db4:	a10b2500 	tstge	fp, r0, lsl #10
   13db8:	2600004c 	strcs	r0, [r0], -ip, asr #32
   13dbc:	004fc30b 	subeq	ip, pc, fp, lsl #6
   13dc0:	3d0b2700 	stccc	7, cr2, [fp, #-0]
   13dc4:	2800004d 	stmdacs	r0, {r0, r2, r3, r6}
   13dc8:	004fd30b 	subeq	sp, pc, fp, lsl #6
   13dcc:	e30b2900 	movw	r2, #47360	; 0xb900
   13dd0:	2a00004f 	bcs	13f14 <__exidx_end+0xe2d4>
   13dd4:	0051080b 	subseq	r0, r1, fp, lsl #16
   13dd8:	4c0b2b00 			; <UNDEFINED> instruction: 0x4c0b2b00
   13ddc:	2c00004f 	stccs	0, cr0, [r0], {79}	; 0x4f
   13de0:	0053b90b 	subseq	fp, r3, fp, lsl #18
   13de4:	e20b2d00 	and	r2, fp, #0, 26
   13de8:	2e00004c 	cdpcs	0, 0, cr0, cr0, cr12, {2}
   13dec:	4ede0a00 	vfnmsmi.f32	s1, s28, s0
   13df0:	01070000 	mrseq	r0, (UNDEF: 7)
   13df4:	000000a2 	andeq	r0, r0, r2, lsr #1
   13df8:	d6061704 	strle	r1, [r6], -r4, lsl #14
   13dfc:	0b000003 	bleq	13e10 <__exidx_end+0xe1d0>
   13e00:	00004c0c 	andeq	r4, r0, ip, lsl #24
   13e04:	483f0b00 	ldmdami	pc!, {r8, r9, fp}	; <UNPREDICTABLE>
   13e08:	0b010000 	bleq	53e10 <__ccfg+0x33e68>
   13e0c:	0000583c 	andeq	r5, r0, ip, lsr r8
   13e10:	56ac0b02 	strtpl	r0, [ip], r2, lsl #22
   13e14:	0b030000 	bleq	d3e1c <__ccfg+0xb3e74>
   13e18:	00004c2c 	andeq	r4, r0, ip, lsr #24
   13e1c:	49240b04 	stmdbmi	r4!, {r2, r8, r9, fp}
   13e20:	0b050000 	bleq	153e28 <__ccfg+0x133e80>
   13e24:	00004cbe 			; <UNDEFINED> instruction: 0x00004cbe
   13e28:	4c1c0b06 			; <UNDEFINED> instruction: 0x4c1c0b06
   13e2c:	0b070000 	bleq	1d3e34 <__ccfg+0x1b3e8c>
   13e30:	00005558 	andeq	r5, r0, r8, asr r5
   13e34:	568c0b08 	strpl	r0, [ip], r8, lsl #22
   13e38:	0b090000 	bleq	253e40 <__ccfg+0x233e98>
   13e3c:	0000548f 	andeq	r5, r0, pc, lsl #9
   13e40:	49770b0a 	ldmdbmi	r7!, {r1, r3, r8, r9, fp}^
   13e44:	0b0b0000 	bleq	2d3e4c <__ccfg+0x2b3ea4>
   13e48:	00004c5f 	andeq	r4, r0, pc, asr ip
   13e4c:	48c00b0c 	stmiami	r0, {r2, r3, r8, r9, fp}^
   13e50:	0b0d0000 	bleq	353e58 <__ccfg+0x333eb0>
   13e54:	00005871 	andeq	r5, r0, r1, ror r8
   13e58:	50f50b0e 	rscspl	r0, r5, lr, lsl #22
   13e5c:	0b0f0000 	bleq	3d3e64 <__ccfg+0x3b3ebc>
   13e60:	00004df0 	strdeq	r4, [r0], -r0
   13e64:	51320b10 	teqpl	r2, r0, lsl fp
   13e68:	0b110000 	bleq	453e70 <__ccfg+0x433ec8>
   13e6c:	00005772 	andeq	r5, r0, r2, ror r7
   13e70:	4a420b12 	bmi	1096ac0 <__ccfg+0x1076b18>
   13e74:	0b130000 	bleq	4d3e7c <__ccfg+0x4b3ed4>
   13e78:	00004e03 	andeq	r4, r0, r3, lsl #28
   13e7c:	50660b14 	rsbpl	r0, r6, r4, lsl fp
   13e80:	0b150000 	bleq	553e88 <__ccfg+0x533ee0>
   13e84:	00004bf7 	strdeq	r4, [r0], -r7
   13e88:	50b20b16 	adcspl	r0, r2, r6, lsl fp
   13e8c:	0b170000 	bleq	5d3e94 <__ccfg+0x5b3eec>
   13e90:	00004ec8 	andeq	r4, r0, r8, asr #29
   13e94:	49420b18 	stmdbmi	r2, {r3, r4, r8, r9, fp}^
   13e98:	0b190000 	bleq	653ea0 <__ccfg+0x633ef8>
   13e9c:	00005719 	andeq	r5, r0, r9, lsl r7
   13ea0:	50320b1a 	eorspl	r0, r2, sl, lsl fp
   13ea4:	0b1b0000 	bleq	6d3eac <__ccfg+0x6b3f04>
   13ea8:	00004dbc 			; <UNDEFINED> instruction: 0x00004dbc
   13eac:	47e10b1c 			; <UNDEFINED> instruction: 0x47e10b1c
   13eb0:	0b1d0000 	bleq	753eb8 <__ccfg+0x733f10>
   13eb4:	00004f7d 	andeq	r4, r0, sp, ror pc
   13eb8:	4f690b1e 	svcmi	0x00690b1e
   13ebc:	0b1f0000 	bleq	7d3ec4 <__ccfg+0x7b3f1c>
   13ec0:	0000544c 	andeq	r5, r0, ip, asr #8
   13ec4:	54d70b20 	ldrbpl	r0, [r7], #2848	; 0xb20
   13ec8:	0b210000 	bleq	853ed0 <__ccfg+0x833f28>
   13ecc:	000056f8 	strdeq	r5, [r0], -r8
   13ed0:	4cef0b22 	vstmiami	pc!, {d16-<overflow reg d32>}
   13ed4:	0b230000 	bleq	8d3edc <__ccfg+0x8b3f34>
   13ed8:	000052ab 	andeq	r5, r0, fp, lsr #5
   13edc:	54a40b24 	strtpl	r0, [r4], #2852	; 0xb24
   13ee0:	0b250000 	bleq	953ee8 <__ccfg+0x933f40>
   13ee4:	000053c8 	andeq	r5, r0, r8, asr #7
   13ee8:	53dc0b26 	bicspl	r0, ip, #38912	; 0x9800
   13eec:	0b270000 	bleq	9d3ef4 <__ccfg+0x9b3f4c>
   13ef0:	000053f0 	strdeq	r5, [r0], -r0
   13ef4:	4b800b28 	blmi	fe016b9c <_estack+0xde011b9c>
   13ef8:	0b290000 	bleq	a53f00 <__ccfg+0xa33f58>
   13efc:	00004a2d 	andeq	r4, r0, sp, lsr #20
   13f00:	4a550b2a 	bmi	1556bb0 <__ccfg+0x1536c08>
   13f04:	0b2b0000 	bleq	ad3f0c <__ccfg+0xab3f64>
   13f08:	000057b1 			; <UNDEFINED> instruction: 0x000057b1
   13f0c:	4a870b2c 	bmi	fe1d6bc4 <_estack+0xde1d1bc4>
   13f10:	0b2d0000 	bleq	b53f18 <__ccfg+0xb33f70>
   13f14:	000055a1 	andeq	r5, r0, r1, lsr #11
   13f18:	55b50b2e 	ldrpl	r0, [r5, #2862]!	; 0xb2e
   13f1c:	0b2f0000 	bleq	bd3f24 <__ccfg+0xbb3f7c>
   13f20:	000055c9 	andeq	r5, r0, r9, asr #11
   13f24:	4c710b30 			; <UNDEFINED> instruction: 0x4c710b30
   13f28:	0b310000 	bleq	c53f30 <__ccfg+0xc33f88>
   13f2c:	00004c4b 	andeq	r4, r0, fp, asr #24
   13f30:	4f910b32 	svcmi	0x00910b32
   13f34:	0b330000 	bleq	cd3f3c <__ccfg+0xcb3f94>
   13f38:	00005145 	andeq	r5, r0, r5, asr #2
   13f3c:	57c50b34 			; <UNDEFINED> instruction: 0x57c50b34
   13f40:	0b350000 	bleq	d53f48 <__ccfg+0xd33fa0>
   13f44:	00004789 	andeq	r4, r0, r9, lsl #15
   13f48:	4d710b36 	vldmdbmi	r1!, {d16-<overflow reg d42>}
   13f4c:	0b370000 	bleq	dd3f54 <__ccfg+0xdb3fac>
   13f50:	00004d86 	andeq	r4, r0, r6, lsl #27
   13f54:	4ff30b38 	svcmi	0x00f30b38
   13f58:	0b390000 	bleq	e53f60 <__ccfg+0xe33fb8>
   13f5c:	0000501d 	andeq	r5, r0, sp, lsl r0
   13f60:	57ee0b3a 			; <UNDEFINED> instruction: 0x57ee0b3a
   13f64:	0b3b0000 	bleq	ed3f6c <__ccfg+0xeb3fc4>
   13f68:	00005296 	muleq	r0, r6, r2
   13f6c:	4d140b3c 	vldrmi	d0, [r4, #-240]	; 0xffffff10
   13f70:	0b3d0000 	bleq	f53f78 <__ccfg+0xf33fd0>
   13f74:	00004851 	andeq	r4, r0, r1, asr r8
   13f78:	48060b3e 	stmdami	r6, {r1, r2, r3, r4, r5, r8, r9, fp}
   13f7c:	0b3f0000 	bleq	fd3f84 <__ccfg+0xfb3fdc>
   13f80:	00005191 	muleq	r0, r1, r1
   13f84:	53170b40 	tstpl	r7, #64, 22	; 0x10000
   13f88:	0b410000 	bleq	1053f90 <__ccfg+0x1033fe8>
   13f8c:	0000542e 	andeq	r5, r0, lr, lsr #8
   13f90:	50080b42 	andpl	r0, r8, r2, asr #22
   13f94:	0b430000 	bleq	10d3f9c <__ccfg+0x10b3ff4>
   13f98:	00005827 	andeq	r5, r0, r7, lsr #16
   13f9c:	52c10b44 	sbcpl	r0, r1, #68, 22	; 0x11000
   13fa0:	0b450000 	bleq	1153fa8 <__ccfg+0x1134000>
   13fa4:	00004a71 	andeq	r4, r0, r1, ror sl
   13fa8:	4dd20b46 	vldrmi	d16, [r2, #280]	; 0x118
   13fac:	0b470000 	bleq	11d3fb4 <__ccfg+0x11b400c>
   13fb0:	00004f16 	andeq	r4, r0, r6, lsl pc
   13fb4:	47c50b48 	strbmi	r0, [r5, r8, asr #22]
   13fb8:	0b490000 	bleq	1253fc0 <__ccfg+0x1234018>
   13fbc:	000048e7 	andeq	r4, r0, r7, ror #17
   13fc0:	4d280b4a 	vstmdbmi	r8!, {d0-<overflow reg d36>}
   13fc4:	0b4b0000 	bleq	12d3fcc <__ccfg+0x12b4024>
   13fc8:	00005044 	andeq	r5, r0, r4, asr #32
   13fcc:	0202004c 	andeq	r0, r2, #76	; 0x4c
   13fd0:	000d6607 	andeq	r6, sp, r7, lsl #12
   13fd4:	03f30c00 	mvnseq	r0, #0, 24
   13fd8:	03e80000 	mvneq	r0, #0
   13fdc:	000d0000 	andeq	r0, sp, r0
   13fe0:	0003dd0e 	andeq	sp, r3, lr, lsl #26
   13fe4:	ff040500 			; <UNDEFINED> instruction: 0xff040500
   13fe8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   13fec:	000003ed 	andeq	r0, r0, sp, ror #7
   13ff0:	64080102 	strvs	r0, [r8], #-258	; 0xfffffefe
   13ff4:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
   13ff8:	000003f8 	strdeq	r0, [r0], -r8
   13ffc:	0049b30f 	subeq	fp, r9, pc, lsl #6
   14000:	014c0500 	cmpeq	ip, r0, lsl #10
   14004:	0003e81a 	andeq	lr, r3, sl, lsl r8
   14008:	4dac0f00 	stcmi	15, cr0, [ip]
   1400c:	82050000 	andhi	r0, r5, #0
   14010:	03e81a01 	mvneq	r1, #4096	; 0x1000
   14014:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
   14018:	29000003 	stmdbcs	r0, {r0, r1}
   1401c:	0d000004 	stceq	0, cr0, [r0, #-16]
   14020:	4fb50900 	svcmi	0x00b50900
   14024:	2d060000 	stccs	0, cr0, [r6, #-0]
   14028:	00041e0d 	andeq	r1, r4, sp, lsl #28
   1402c:	56710900 	ldrbtpl	r0, [r1], -r0, lsl #18
   14030:	38060000 	stmdacc	r6, {}	; <UNPREDICTABLE>
   14034:	0001f51c 	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   14038:	4c850a00 	vstmiami	r5, {s0-s-1}
   1403c:	01070000 	mrseq	r0, (UNDEF: 7)
   14040:	000000a2 	andeq	r0, r0, r2, lsr #1
   14044:	b40e3a06 	strlt	r3, [lr], #-2566	; 0xfffff5fa
   14048:	0b000004 	bleq	14060 <__exidx_end+0xe420>
   1404c:	000047da 	ldrdeq	r4, [r0], -sl
   14050:	4eb50b00 	vmovmi.f64	d0, #80	; 0x3e800000  0.250
   14054:	0b010000 	bleq	5405c <__ccfg+0x340b4>
   14058:	00005784 	andeq	r5, r0, r4, lsl #15
   1405c:	57470b02 	strbpl	r0, [r7, -r2, lsl #22]
   14060:	0b030000 	bleq	d4068 <__ccfg+0xb40c0>
   14064:	000051ee 	andeq	r5, r0, lr, ror #3
   14068:	55150b04 	ldrpl	r0, [r5, #-2820]	; 0xfffff4fc
   1406c:	0b050000 	bleq	154074 <__ccfg+0x1340cc>
   14070:	000049fe 	strdeq	r4, [r0], -lr
   14074:	49d80b06 	ldmibmi	r8, {r1, r2, r8, r9, fp}^
   14078:	0b070000 	bleq	1d4080 <__ccfg+0x1b40d8>
   1407c:	00004be3 	andeq	r4, r0, r3, ror #23
   14080:	50c80b08 	sbcpl	r0, r8, r8, lsl #22
   14084:	0b090000 	bleq	25408c <__ccfg+0x2340e4>
   14088:	00004a05 	andeq	r4, r0, r5, lsl #20
   1408c:	50cf0b0a 	sbcpl	r0, pc, sl, lsl #22
   14090:	0b0b0000 	bleq	2d4098 <__ccfg+0x2b40f0>
   14094:	00004a6a 	andeq	r4, r0, sl, ror #20
   14098:	49ef0b0c 	stmibmi	pc!, {r2, r3, r8, r9, fp}^	; <UNPREDICTABLE>
   1409c:	0b0d0000 	bleq	3540a4 <__ccfg+0x3340fc>
   140a0:	0000556c 	andeq	r5, r0, ip, ror #10
   140a4:	53350b0e 	teqpl	r5, #14336	; 0x3800
   140a8:	000f0000 	andeq	r0, pc, r0
   140ac:	00546404 	subseq	r6, r4, r4, lsl #8
   140b0:	013f0600 	teqeq	pc, r0, lsl #12
   140b4:	00000441 	andeq	r0, r0, r1, asr #8
   140b8:	0054f809 	subseq	pc, r4, r9, lsl #16
   140bc:	0f410600 	svceq	0x00410600
   140c0:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
   140c4:	00558009 	subseq	r8, r5, r9
   140c8:	0c4a0600 	mcrreq	6, 0, r0, sl, cr0
   140cc:	0000002c 	andeq	r0, r0, ip, lsr #32
   140d0:	00499709 	subeq	r9, r9, r9, lsl #14
   140d4:	0c4b0600 	mcrreq	6, 0, r0, fp, cr0
   140d8:	0000002c 	andeq	r0, r0, ip, lsr #32
   140dc:	00564510 	subseq	r4, r6, r0, lsl r5
   140e0:	55910900 	ldrpl	r0, [r1, #2304]	; 0x900
   140e4:	4c060000 	stcmi	0, cr0, [r6], {-0}
   140e8:	0004f514 	andeq	pc, r4, r4, lsl r5	; <UNPREDICTABLE>
   140ec:	e4040500 	str	r0, [r4], #-1280	; 0xfffffb00
   140f0:	11000004 	tstne	r0, r4
   140f4:	004e7f09 	subeq	r7, lr, r9, lsl #30
   140f8:	0f4e0600 	svceq	0x004e0600
   140fc:	00000508 	andeq	r0, r0, r8, lsl #10
   14100:	04fb0405 	ldrbteq	r0, [fp], #1029	; 0x405
   14104:	7a120000 	bvc	49410c <__ccfg+0x474164>
   14108:	09000054 	stmdbeq	r0, {r2, r4, r6}
   1410c:	000051db 	ldrdeq	r5, [r0], -fp
   14110:	1f0d5206 	svcne	0x000d5206
   14114:	05000005 	streq	r0, [r0, #-5]
   14118:	00050e04 	andeq	r0, r5, r4, lsl #28
   1411c:	4bc91300 	blmi	ff258d24 <_estack+0xdf253d24>
   14120:	06340000 	ldrteq	r0, [r4], -r0
   14124:	50150167 	andspl	r0, r5, r7, ror #2
   14128:	14000005 	strne	r0, [r0], #-5
   1412c:	00004fbe 			; <UNDEFINED> instruction: 0x00004fbe
   14130:	0f016906 	svceq	0x00016906
   14134:	000003ed 	andeq	r0, r0, sp, ror #7
   14138:	4bad1400 	blmi	feb59140 <_estack+0xdeb54140>
   1413c:	6a060000 	bvs	194144 <__ccfg+0x17419c>
   14140:	05551401 	ldrbeq	r1, [r5, #-1025]	; 0xfffffbff
   14144:	00040000 	andeq	r0, r4, r0
   14148:	0005250e 	andeq	r2, r5, lr, lsl #10
   1414c:	00c80c00 	sbceq	r0, r8, r0, lsl #24
   14150:	05650000 	strbeq	r0, [r5, #-0]!
   14154:	33150000 	tstcc	r5, #0
   14158:	2d000000 	stccs	0, cr0, [r0, #-0]
   1415c:	05500c00 	ldrbeq	r0, [r0, #-3072]	; 0xfffff400
   14160:	05700000 	ldrbeq	r0, [r0, #-0]!
   14164:	000d0000 	andeq	r0, sp, r0
   14168:	0005650e 	andeq	r6, r5, lr, lsl #10
   1416c:	4eed0f00 	cdpmi	15, 14, cr0, cr13, cr0, {0}
   14170:	6b060000 	blvs	194178 <__ccfg+0x1741d0>
   14174:	05700301 	ldrbeq	r0, [r0, #-769]!	; 0xfffffcff
   14178:	150f0000 	strne	r0, [pc, #-0]	; 14180 <__exidx_end+0xe540>
   1417c:	06000051 			; <UNDEFINED> instruction: 0x06000051
   14180:	2c0c016e 	stfcss	f0, [ip], {110}	; 0x6e
   14184:	16000000 	strne	r0, [r0], -r0
   14188:	000054b8 			; <UNDEFINED> instruction: 0x000054b8
   1418c:	00a20107 	adceq	r0, r2, r7, lsl #2
   14190:	81060000 	mrshi	r0, (UNDEF: 6)
   14194:	06390601 	ldrteq	r0, [r9], -r1, lsl #12
   14198:	780b0000 	stmdavc	fp, {}	; <UNPREDICTABLE>
   1419c:	00000048 	andeq	r0, r0, r8, asr #32
   141a0:	0048840b 	subeq	r8, r8, fp, lsl #8
   141a4:	900b0200 	andls	r0, fp, r0, lsl #4
   141a8:	03000048 	movweq	r0, #72	; 0x48
   141ac:	004cb10b 	subeq	fp, ip, fp, lsl #2
   141b0:	9c0b0300 	stcls	3, cr0, [fp], {-0}
   141b4:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
   141b8:	004e180b 	subeq	r1, lr, fp, lsl #16
   141bc:	fe0b0400 	cdp2	4, 0, cr0, cr11, cr0, {0}
   141c0:	0500004e 	streq	r0, [r0, #-78]	; 0xffffffb2
   141c4:	004e540b 	subeq	r5, lr, fp, lsl #8
   141c8:	880b0500 	stmdahi	fp, {r8, sl}
   141cc:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
   141d0:	0048a80b 	subeq	sl, r8, fp, lsl #16
   141d4:	7c0b0600 	stcvc	6, cr0, [fp], {-0}
   141d8:	06000050 			; <UNDEFINED> instruction: 0x06000050
   141dc:	004b9f0b 	subeq	r9, fp, fp, lsl #30
   141e0:	890b0600 	stmdbhi	fp, {r9, sl}
   141e4:	06000050 			; <UNDEFINED> instruction: 0x06000050
   141e8:	0055380b 	subseq	r3, r5, fp, lsl #16
   141ec:	960b0600 	strls	r0, [fp], -r0, lsl #12
   141f0:	06000050 			; <UNDEFINED> instruction: 0x06000050
   141f4:	0050d60b 	subseq	sp, r0, fp, lsl #12
   141f8:	b40b0600 	strlt	r0, [fp], #-1536	; 0xfffffa00
   141fc:	07000048 	streq	r0, [r0, -r8, asr #32]
   14200:	0051be0b 	subseq	fp, r1, fp, lsl #28
   14204:	0b0b0700 	bleq	2d5e0c <__ccfg+0x2b5e64>
   14208:	07000052 	smlsdeq	r0, r2, r0, r0
   1420c:	0055730b 	subseq	r7, r5, fp, lsl #6
   14210:	9c0b0700 	stcls	7, cr0, [fp], {-0}
   14214:	0700004a 	streq	r0, [r0, -sl, asr #32]
   14218:	0052ee0b 	subseq	lr, r2, fp, lsl #28
   1421c:	2d0b0800 	stccs	8, cr0, [fp, #-0]
   14220:	08000048 	stmdaeq	r0, {r3, r6}
   14224:	0055460b 	subseq	r4, r5, fp, lsl #12
   14228:	0a0b0800 	beq	2d6230 <__ccfg+0x2b6288>
   1422c:	08000053 	stmdaeq	r0, {r0, r1, r4, r6}
   14230:	579e0f00 	ldrpl	r0, [lr, r0, lsl #30]
   14234:	9f060000 	svcls	0x00060000
   14238:	058f1f01 	streq	r1, [pc, #3841]	; 15141 <__exidx_end+0xf501>
   1423c:	3c0f0000 	stccc	0, cr0, [pc], {-0}
   14240:	06000053 			; <UNDEFINED> instruction: 0x06000053
   14244:	2c0c01a2 	stfcss	f0, [ip], {162}	; 0xa2
   14248:	0f000000 	svceq	0x00000000
   1424c:	00004f0b 	andeq	r4, r0, fp, lsl #30
   14250:	0c01a506 	cfstr32eq	mvfx10, [r1], {6}
   14254:	0000002c 	andeq	r0, r0, ip, lsr #32
   14258:	0058830f 	subseq	r8, r8, pc, lsl #6
   1425c:	01a80600 			; <UNDEFINED> instruction: 0x01a80600
   14260:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14264:	49a70f00 	stmibmi	r7!, {r8, r9, sl, fp}
   14268:	ab060000 	blge	194270 <__ccfg+0x1742c8>
   1426c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14270:	460f0000 	strmi	r0, [pc], -r0
   14274:	06000053 			; <UNDEFINED> instruction: 0x06000053
   14278:	2c0c01ae 	stfcss	f0, [ip], {174}	; 0xae
   1427c:	0f000000 	svceq	0x00000000
   14280:	000051f5 	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   14284:	0c01b106 	stfeqd	f3, [r1], {6}
   14288:	0000002c 	andeq	r0, r0, ip, lsr #32
   1428c:	0052000f 	subseq	r0, r2, pc
   14290:	01b40600 			; <UNDEFINED> instruction: 0x01b40600
   14294:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14298:	53500f00 	cmppl	r0, #0, 30
   1429c:	b7060000 	strlt	r0, [r6, -r0]
   142a0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142a4:	580f0000 	stmdapl	pc, {}	; <UNPREDICTABLE>
   142a8:	06000050 			; <UNDEFINED> instruction: 0x06000050
   142ac:	2c0c01ba 	stfcss	f0, [ip], {186}	; 0xba
   142b0:	0f000000 	svceq	0x00000000
   142b4:	000057e2 	andeq	r5, r0, r2, ror #15
   142b8:	0c01bd06 	stceq	13, cr11, [r1], {6}
   142bc:	0000002c 	andeq	r0, r0, ip, lsr #32
   142c0:	00535a0f 	subseq	r5, r3, pc, lsl #20
   142c4:	01c00600 	biceq	r0, r0, r0, lsl #12
   142c8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   142cc:	58ba0f00 	ldmpl	sl!, {r8, r9, sl, fp}
   142d0:	c3060000 	movwgt	r0, #24576	; 0x6000
   142d4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   142d8:	4e0f0000 	cdpmi	0, 0, cr0, cr15, cr0, {0}
   142dc:	06000057 			; <UNDEFINED> instruction: 0x06000057
   142e0:	2c0c01c6 	stfcss	f0, [ip], {198}	; 0xc6
   142e4:	0f000000 	svceq	0x00000000
   142e8:	0000575a 	andeq	r5, r0, sl, asr r7
   142ec:	0c01c906 			; <UNDEFINED> instruction: 0x0c01c906
   142f0:	0000002c 	andeq	r0, r0, ip, lsr #32
   142f4:	0057660f 	subseq	r6, r7, pc, lsl #12
   142f8:	01cc0600 	biceq	r0, ip, r0, lsl #12
   142fc:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14300:	578b0f00 	strpl	r0, [fp, r0, lsl #30]
   14304:	d0060000 	andle	r0, r6, r0
   14308:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1430c:	ad0f0000 	stcge	0, cr0, [pc, #-0]	; 14314 <__exidx_end+0xe6d4>
   14310:	06000058 			; <UNDEFINED> instruction: 0x06000058
   14314:	2c0c01d3 	stfcss	f0, [ip], {211}	; 0xd3
   14318:	0f000000 	svceq	0x00000000
   1431c:	00004a0c 	andeq	r4, r0, ip, lsl #20
   14320:	0c01d606 	stceq	6, cr13, [r1], {6}
   14324:	0000002c 	andeq	r0, r0, ip, lsr #32
   14328:	0047b50f 	subeq	fp, r7, pc, lsl #10
   1432c:	01d90600 	bicseq	r0, r9, r0, lsl #12
   14330:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14334:	4cd10f00 	ldclmi	15, cr0, [r1], {0}
   14338:	dc060000 	stcle	0, cr0, [r6], {-0}
   1433c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14340:	df0f0000 	svcle	0x000f0000
   14344:	06000049 	streq	r0, [r0], -r9, asr #32
   14348:	2c0c01df 	stfcss	f0, [ip], {223}	; 0xdf
   1434c:	0f000000 	svceq	0x00000000
   14350:	0000536b 	andeq	r5, r0, fp, ror #6
   14354:	0c01e206 	sfmeq	f6, 1, [r1], {6}
   14358:	0000002c 	andeq	r0, r0, ip, lsr #32
   1435c:	004f340f 	subeq	r3, pc, pc, lsl #8
   14360:	01e50600 	mvneq	r0, r0, lsl #12
   14364:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14368:	516e0f00 	cmnpl	lr, r0, lsl #30
   1436c:	e8060000 	stmda	r6, {}	; <UNPREDICTABLE>
   14370:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   14374:	7a0f0000 	bvc	3d437c <__ccfg+0x3b43d4>
   14378:	06000056 			; <UNDEFINED> instruction: 0x06000056
   1437c:	2c0c01ef 	stfcss	f0, [ip], {239}	; 0xef
   14380:	0f000000 	svceq	0x00000000
   14384:	00005851 	andeq	r5, r0, r1, asr r8
   14388:	0c01f206 	sfmeq	f7, 1, [r1], {6}
   1438c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14390:	0058610f 	subseq	r6, r8, pc, lsl #2
   14394:	01f50600 	mvnseq	r0, r0, lsl #12
   14398:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1439c:	4bb60f00 	blmi	fed97fa4 <_estack+0xded92fa4>
   143a0:	f8060000 			; <UNDEFINED> instruction: 0xf8060000
   143a4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   143a8:	c20f0000 	andgt	r0, pc, #0
   143ac:	06000056 			; <UNDEFINED> instruction: 0x06000056
   143b0:	2c0c01fb 	stfcss	f0, [ip], {251}	; 0xfb
   143b4:	0f000000 	svceq	0x00000000
   143b8:	000052d6 	ldrdeq	r5, [r0], -r6
   143bc:	0c01fe06 	stceq	14, cr15, [r1], {6}
   143c0:	0000002c 	andeq	r0, r0, ip, lsr #32
   143c4:	004d4a0f 	subeq	r4, sp, pc, lsl #20
   143c8:	02020600 	andeq	r0, r2, #0, 12
   143cc:	00002c0c 	andeq	r2, r0, ip, lsl #24
   143d0:	54ca0f00 	strbpl	r0, [sl], #3840	; 0xf00
   143d4:	0a060000 	beq	1943dc <__ccfg+0x174434>
   143d8:	002c0c02 	eoreq	r0, ip, r2, lsl #24
   143dc:	3d0f0000 	stccc	0, cr0, [pc, #-0]	; 143e4 <__exidx_end+0xe7a4>
   143e0:	0600004c 	streq	r0, [r0], -ip, asr #32
   143e4:	2c0c020d 	sfmcs	f0, 4, [ip], {13}
   143e8:	0c000000 	stceq	0, cr0, [r0], {-0}
   143ec:	0000002c 	andeq	r0, r0, ip, lsr #32
   143f0:	000007fe 	strdeq	r0, [r0], -lr
   143f4:	340f000d 	strcc	r0, [pc], #-13	; 143fc <__exidx_end+0xe7bc>
   143f8:	0600004e 	streq	r0, [r0], -lr, asr #32
   143fc:	f30c03fb 	vcge.u8	q0, q14, <illegal reg q13.5>
   14400:	0c000007 	stceq	0, cr0, [r0], {7}
   14404:	000004f5 	strdeq	r0, [r0], -r5
   14408:	0000081b 	andeq	r0, r0, fp, lsl r8
   1440c:	00003315 	andeq	r3, r0, r5, lsl r3
   14410:	0f000d00 	svceq	0x00000d00
   14414:	00005397 	muleq	r0, r7, r3
   14418:	14058406 	strne	r8, [r5], #-1030	; 0xfffffbfa
   1441c:	0000080b 	andeq	r0, r0, fp, lsl #16
   14420:	004ef616 	subeq	pc, lr, r6, lsl r6	; <UNPREDICTABLE>
   14424:	a2010700 	andge	r0, r1, #0, 14
   14428:	06000000 	streq	r0, [r0], -r0
   1442c:	6606058b 	strvs	r0, [r6], -fp, lsl #11
   14430:	0b000008 	bleq	14458 <__exidx_end+0xe818>
   14434:	00004c93 	muleq	r0, r3, ip
   14438:	50e30b00 	rscpl	r0, r3, r0, lsl #22
   1443c:	0b010000 	bleq	54444 <__ccfg+0x3449c>
   14440:	00004863 	andeq	r4, r0, r3, ror #16
   14444:	58130b02 	ldmdapl	r3, {r1, r8, r9, fp}
   14448:	0b030000 	bleq	d4450 <__ccfg+0xb44a8>
   1444c:	00005411 	andeq	r5, r0, r1, lsl r4
   14450:	54040b04 	strpl	r0, [r4], #-2820	; 0xfffff4fc
   14454:	0b050000 	bleq	15445c <__ccfg+0x1344b4>
   14458:	00004967 	andeq	r4, r0, r7, ror #18
   1445c:	030f0006 	movweq	r0, #61446	; 0xf006
   14460:	06000058 			; <UNDEFINED> instruction: 0x06000058
   14464:	28150598 	ldmdacs	r5, {r3, r4, r7, r8, sl}
   14468:	0f000008 	svceq	0x00000008
   1446c:	000056e7 	andeq	r5, r0, r7, ror #13
   14470:	11079906 	tstne	r7, r6, lsl #18
   14474:	00000033 	andeq	r0, r0, r3, lsr r0
   14478:	0053840f 	subseq	r8, r3, pc, lsl #8
   1447c:	07ae0600 	streq	r0, [lr, r0, lsl #12]!
   14480:	00002c0c 	andeq	r2, r0, ip, lsl #24
   14484:	56590400 	ldrbpl	r0, [r9], -r0, lsl #8
   14488:	7b070000 	blvc	1d4490 <__ccfg+0x1b44e8>
   1448c:	0000a216 	andeq	sl, r0, r6, lsl r2
   14490:	088d0e00 	stmeq	sp, {r9, sl, fp}
   14494:	02020000 	andeq	r0, r2, #0
   14498:	000a6b05 	andeq	r6, sl, r5, lsl #22
   1449c:	48fd0400 	ldmmi	sp!, {sl}^
   144a0:	80070000 	andhi	r0, r7, r0
   144a4:	00002c0f 	andeq	r2, r0, pc, lsl #24
   144a8:	48fc0400 	ldmmi	ip!, {sl}^
   144ac:	81070000 	mrshi	r0, (UNDEF: 7)
   144b0:	00003316 	andeq	r3, r0, r6, lsl r3
   144b4:	53640400 	cmnpl	r4, #0, 8
   144b8:	84070000 	strhi	r0, [r7], #-0
   144bc:	00003a0f 	andeq	r3, r0, pc, lsl #20
   144c0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
   144c4:	00004a27 	andeq	r4, r0, r7, lsr #20
   144c8:	1f030802 	svcne	0x00030802
   144cc:	0200004a 	andeq	r0, r0, #74	; 0x4a
   144d0:	442f0408 	strtmi	r0, [pc], #-1032	; 144d8 <__exidx_end+0xe898>
   144d4:	10020000 	andne	r0, r2, r0
   144d8:	00541f03 	subseq	r1, r4, r3, lsl #30
   144dc:	537b1300 	cmnpl	fp, #0, 6
   144e0:	07080000 	streq	r0, [r8, -r0]
   144e4:	100a01ed 	andne	r0, sl, sp, ror #3
   144e8:	17000009 	strne	r0, [r0, -r9]
   144ec:	00776f6c 	rsbseq	r6, r7, ip, ror #30
   144f0:	1a01ed07 	bne	8f914 <__ccfg+0x6f96c>
   144f4:	000008a5 	andeq	r0, r0, r5, lsr #17
   144f8:	48d21400 	ldmmi	r2, {sl, ip}^
   144fc:	ed070000 	stc	0, cr0, [r7, #-0]
   14500:	08a51f01 	stmiaeq	r5!, {r0, r8, r9, sl, fp, ip}
   14504:	00040000 	andeq	r0, r4, r0
   14508:	f4070818 	vst2.8	{d0-d1}, [r7 :64], r8
   1450c:	09320901 	ldmdbeq	r2!, {r0, r8, fp}
   14510:	73190000 	tstvc	r9, #0
   14514:	01f60700 	mvnseq	r0, r0, lsl #14
   14518:	0008e513 	andeq	lr, r8, r3, lsl r5
   1451c:	6c6c1900 			; <UNDEFINED> instruction: 0x6c6c1900
   14520:	01f70700 	mvnseq	r0, r0, lsl #14
   14524:	0008bd0a 	andeq	fp, r8, sl, lsl #26
   14528:	f61a0000 			; <UNDEFINED> instruction: 0xf61a0000
   1452c:	07000049 	streq	r0, [r0, -r9, asr #32]
   14530:	100301f8 	strdne	r0, [r3], -r8
   14534:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
   14538:	00000932 	andeq	r0, r0, r2, lsr r9
   1453c:	0008990c 	andeq	r9, r8, ip, lsl #18
   14540:	00095400 	andeq	r5, r9, r0, lsl #8
   14544:	00331500 	eorseq	r1, r3, r0, lsl #10
   14548:	00ff0000 	rscseq	r0, pc, r0
   1454c:	0009440e 	andeq	r4, r9, lr, lsl #8
   14550:	52180f00 	andspl	r0, r8, #0, 30
   14554:	fc070000 	stc2	0, cr0, [r7], {-0}
   14558:	09541601 	ldmdbeq	r4, {r0, r9, sl, ip}^
   1455c:	ce0f0000 	cdpgt	0, 0, cr0, cr15, cr0, {0}
   14560:	07000049 	streq	r0, [r0, -r9, asr #32]
   14564:	54160202 	ldrpl	r0, [r6], #-514	; 0xfffffdfe
   14568:	1b000009 	blne	14594 <__exidx_end+0xe954>
   1456c:	00004824 	andeq	r4, r0, r4, lsr #16
   14570:	01022401 	tsteq	r2, r1, lsl #8
   14574:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   14578:	000049f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1457c:	00000054 	andeq	r0, r0, r4, asr r0
   14580:	751c9c01 	ldrvc	r9, [ip, #-3073]	; 0xfffff3ff
   14584:	02240100 	eoreq	r0, r4, #0, 2
   14588:	0008bd12 	andeq	fp, r8, r2, lsl sp
   1458c:	005b2b00 	subseq	r2, fp, r0, lsl #22
   14590:	005b2700 	subseq	r2, fp, r0, lsl #14
   14594:	00761c00 	rsbseq	r1, r6, r0, lsl #24
   14598:	1c022401 	cfstrsne	mvf2, [r2], {1}
   1459c:	000008bd 			; <UNDEFINED> instruction: 0x000008bd
   145a0:	00005b57 	andeq	r5, r0, r7, asr fp
   145a4:	00005b53 	andeq	r5, r0, r3, asr fp
   145a8:	0075751d 	rsbseq	r7, r5, sp, lsl r5
   145ac:	11022601 	tstne	r2, r1, lsl #12
   145b0:	0000093f 	andeq	r0, r0, pc, lsr r9
   145b4:	0076761d 	rsbseq	r7, r6, sp, lsl r6
   145b8:	11022701 	tstne	r2, r1, lsl #14
   145bc:	0000093f 	andeq	r0, r0, pc, lsr r9
   145c0:	0100771d 	tsteq	r0, sp, lsl r7
   145c4:	320b0228 	andcc	r0, fp, #40, 4	; 0x80000002
   145c8:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
   145cc:	000013f8 	strdeq	r1, [r0], -r8
   145d0:	775f5f1d 	smmlavc	pc, sp, pc, r5	; <UNPREDICTABLE>
   145d4:	02280100 	eoreq	r0, r8, #0, 2
   145d8:	00093216 	andeq	r3, r9, r6, lsl r2
   145dc:	13f81e00 	mvnsne	r1, #0, 28
   145e0:	8e1f0000 	cdphi	0, 1, cr0, cr15, cr0, {0}
   145e4:	01000058 	qaddeq	r0, r8, r0
   145e8:	b1160228 	tstlt	r6, r8, lsr #4
   145ec:	81000008 	tsthi	r0, r8
   145f0:	7f00005b 	svcvc	0x0000005b
   145f4:	1f00005b 	svcne	0x0000005b
   145f8:	00005893 	muleq	r0, r3, r8
   145fc:	16022801 	strne	r2, [r2], -r1, lsl #16
   14600:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   14604:	00005b9a 	muleq	r0, sl, fp
   14608:	00005b94 	muleq	r0, r4, fp
   1460c:	0058981f 	subseq	r9, r8, pc, lsl r8
   14610:	02280100 	eoreq	r0, r8, #0, 2
   14614:	0008b116 	andeq	fp, r8, r6, lsl r1
   14618:	005bcc00 	subseq	ip, fp, r0, lsl #24
   1461c:	005bc800 	subseq	ip, fp, r0, lsl #16
   14620:	589d1f00 	ldmpl	sp, {r8, r9, sl, fp, ip}
   14624:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   14628:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   1462c:	5bf70000 	blpl	ffdd4634 <_estack+0xdfdcf634>
   14630:	5bf50000 	blpl	ffd54638 <_estack+0xdfd4f638>
   14634:	bd1f0000 	ldclt	0, cr0, [pc, #-0]	; 1463c <__exidx_end+0xe9fc>
   14638:	01000056 	qaddeq	r0, r6, r0
   1463c:	b1160228 	tstlt	r6, r8, lsr #4
   14640:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
   14644:	0a00005c 	beq	147bc <__exidx_end+0xeb7c>
   14648:	1f00005c 	svcne	0x0000005c
   1464c:	000057ac 	andeq	r5, r0, ip, lsr #15
   14650:	16022801 	strne	r2, [r2], -r1, lsl #16
   14654:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   14658:	00005c36 	andeq	r5, r0, r6, lsr ip
   1465c:	00005c32 	andeq	r5, r0, r2, lsr ip
   14660:	00569f1f 	subseq	r9, r6, pc, lsl pc
   14664:	02280100 	eoreq	r0, r8, #0, 2
   14668:	0008b116 	andeq	fp, r8, r6, lsl r1
   1466c:	005c5e00 	subseq	r5, ip, r0, lsl #28
   14670:	005c5a00 	subseq	r5, ip, r0, lsl #20
   14674:	57991f00 	ldrpl	r1, [r9, r0, lsl #30]
   14678:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   1467c:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   14680:	5c840000 	stcpl	0, cr0, [r4], {0}
   14684:	5c800000 	stcpl	0, cr0, [r0], {0}
   14688:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
    return node->data_base.item_array[index];
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
};
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	0008030b 	andeq	r0, r8, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__ccfg+0xe63898>
      30:	0b39053b 	bleq	e41524 <__ccfg+0xe2157c>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			nq++;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!button_still_pressed (__button_list [pbutton]))
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
	if (baction == NULL)
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
	(*baction) (pbutton);
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
endthread
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
endthread
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm sender(struct ResponseMessage *message) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	0b000f11 	bleq	3d28 <NOROM_RFCRTrim+0x68>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
		packet[1] = message->gid;
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     104:	14000005 	strne	r0, [r0], #-5
		*p = message->tpe;p++;
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
		*p = message->request_number;p++;
     10c:	15150000 	ldrne	r0, [r5, #-0]
		*p = message->sender_id;p++;
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
		*p = message->receiver_id;p++;
     114:	00130113 	andseq	r0, r3, r3, lsl r1
		switch(message->tpe) {
     118:	00051600 	andeq	r1, r5, r0, lsl #12
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
		tcv_endp(packet);
     124:	18000013 	stmdane	r0, {r0, r1, r4}
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
}
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
		finish;
     134:	00001301 	andeq	r1, r0, r1, lsl #6
     138:	03000d19 	movweq	r0, #3353	; 0xd19
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
				strncpy(p, message->record, sizeof(message->record));
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				*p = message->padding;p++;
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
				strncpy(p, message->record, sizeof(message->record));
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
				strncpy(p, message->record, sizeof(message->record));
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     158:	131b0000 	tstne	fp, #0
				strncpy(p, message->record, sizeof(message->record));
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
				break;
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
				*p = message->record_index;p++;
     164:	010b3905 	tsteq	fp, r5, lsl #18
				*p = message->padding;
     168:	1c000013 	stcne	0, cr0, [r0], {19}
				break;
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		node->nnodes[i] = 0;
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	00001349 	andeq	r1, r0, r9, asr #6
bool init_node(struct Node* node){
     198:	0300131f 	movweq	r1, #799	; 0x31f
    node->id  = 0;                  // default id value 0
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
    node->index = 0;                // default entry count 0
     1a0:	01152000 	tsteq	r5, r0
    node->data_base.item_count = 0; // default no items in array
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
	reset_array(node);
     1a8:	34210000 	strtcc	r0, [r1], #-0
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
};
     1b4:	3f13490b 	svccc	0x0013490b
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
uint8_t generate_request_num(void){
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
    return (uint8_t) (rand() % 255);
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
}
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
            node->nnodes[i] = 0; // set to null byte
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
};
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0e030104 	adfeqs	f0, f3, f4
        node->data_base.item_count -= 1;
     1f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
};
     1fc:	0b3b0b3a 	bleq	ec2eec <__ccfg+0xea2f44>
bool delete_all(struct Node *node){
     200:	13010b39 	movwne	r0, #6969	; 0x1b39
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	28270000 	stmdacs	r7!, {}	; <UNPREDICTABLE>
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	1c0e0300 	stcne	3, cr0, [lr], {-0}
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	2800000b 	stmdacs	r0, {r0, r1, r3}
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
            node->data_base.item_array[i].timestamp = 0;
     214:	0b3b0b3a 	bleq	ec2f04 <__ccfg+0xea2f5c>
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	13490b39 	movtne	r0, #39737	; 0x9b39
    node->data_base.item_count = 0;
     21c:	0a020c3f 	beq	83320 <__ccfg+0x63378>
}
     220:	34290000 	strtcc	r0, [r9], #-0
        return true;
     224:	3a080300 	bcc	200e2c <__ccfg+0x1e0e84>
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	3f13490b 	svccc	0x0013490b
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	000a020c 	andeq	r0, sl, ip, lsl #4
     234:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     238:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	response_message->tpe = RESPONSE;
     240:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	response_message->status = status;
     244:	01120111 	tsteq	r2, r1, lsl r1
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	13010a40 	movwne	r0, #6720	; 0x1a40
	response_message->gid = gid;
     24c:	052b0000 	streq	r0, [fp, #-0]!
	response_message->sender_id = sender_id;
     250:	3a0e0300 	bcc	380e58 <__ccfg+0x360eb0>
	response_message->status = status;
     254:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (!padding){
     258:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		response_message->padding = padding;
     25c:	2c000006 	stccs	0, cr0, [r0], {6}
	if (rec != NULL){
     260:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     264:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		strncpy(response_message->record, rec, 20);
     268:	01110b39 	tsteq	r1, r9, lsr fp
     26c:	0b2d0000 	bleq	b40274 <__ccfg+0xb202cc>
     270:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
};
     274:	00130101 	andseq	r0, r3, r1, lsl #2
fsm receiver(struct Node* node_db) {
     278:	00342e00 	eorseq	r2, r4, r0, lsl #28
     27c:	0b3a0e03 	bleq	e83a90 <__ccfg+0xe63ae8>
     280:	0b39053b 	bleq	e41774 <__ccfg+0xe217cc>
     284:	0a021349 	beq	84fb0 <__ccfg+0x65008>
     288:	1d2f0000 	stcne	0, cr0, [pc, #-0]	; 290 <receiver+0x18>
     28c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     290:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     294:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	3000000b 	andcc	r0, r0, fp
     29c:	13310005 	teqne	r1, #5
     2a0:	00000602 	andeq	r0, r0, r2, lsl #12
     2a4:	55010b31 	strpl	r0, [r1, #-2865]	; 0xfffff4cf
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	00130106 	andseq	r0, r3, r6, lsl #2
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	00343200 	eorseq	r3, r4, r0, lsl #4
     2b0:	0b3a0803 	bleq	e822c4 <__ccfg+0xe6231c>
     2b4:	0b39053b 	bleq	e417a8 <__ccfg+0xe21800>
		switch (response_message_5->tpe){
     2b8:	06021349 	streq	r1, [r2], -r9, asr #6
     2bc:	1d330000 	ldcne	0, cr0, [r3, #-0]
     2c0:	11133101 	tstne	r3, r1, lsl #2
     2c4:	58011201 	stmdapl	r1, {r0, r9, ip}
     2c8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     2cc:	3400000b 	strcc	r0, [r0], #-11
     2d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	13490b39 	movtne	r0, #39737	; 0x9b39
				if (discovery_request_message->gid == node_db->gid){
     2dc:	00000602 	andeq	r0, r0, r2, lsl #12
     2e0:	11010b35 	tstne	r1, r5, lsr fp
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	00011201 	andeq	r1, r1, r1, lsl #4
     2e8:	012e3600 			; <UNDEFINED> instruction: 0x012e3600
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	0b3b0b3a 	bleq	ec2fe0 <__ccfg+0xea3038>
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					response_message_0->sender_id = node_db->id;
     2f8:	01120111 	tsteq	r2, r1, lsl r1
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	13010a40 	movwne	r0, #6720	; 0x1a40
					DEBUG_PRINT("\r\nSending to sender");
     300:	05370000 	ldreq	r0, [r7, #-0]!
					call sender(response_message_0, done_case);
     304:	3a0e0300 	bcc	380f0c <__ccfg+0x360f64>
     308:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     30c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     310:	38000006 	stmdacc	r0, {r1, r2}
     314:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	0b3b0b3a 	bleq	ec3008 <__ccfg+0xea3060>
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	13490b39 	movtne	r0, #39737	; 0x9b39
     320:	00000602 	andeq	r0, r0, r2, lsl #12
     324:	03000a39 	movweq	r0, #2617	; 0xa39
     328:	3b0b3a0e 	blcc	2ceb68 <__ccfg+0x2aebc0>
     32c:	110b390b 	tstne	fp, fp, lsl #18
     330:	3a000001 	bcc	33c <receiver+0xc4>
     334:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     338:	343b0000 	ldrtcc	r0, [fp], #-0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	3a0e0300 	bcc	380f44 <__ccfg+0x360f9c>
					node_db->index+=1;
     340:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		tcv_endp(incoming_packet);
     348:	3c00000a 	stccc	0, cr0, [r0], {10}
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		proceed receiving;
     350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		ser_out(response_1_create, "\r\nData Saved");
     354:	13490b39 	movtne	r0, #39737	; 0x9b39
     358:	1d3d0000 	ldcne	0, cr0, [sp, #-0]
		proceed receiving;
     35c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     360:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     368:	0013010b 	andseq	r0, r3, fp, lsl #2
		proceed receiving;
     36c:	00053e00 	andeq	r3, r5, r0, lsl #28
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	00001331 	andeq	r1, r0, r1, lsr r3
     374:	3100343f 	tstcc	r0, pc, lsr r4
     378:	40000013 	andmi	r0, r0, r3, lsl r0
     37c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     380:	0b3b0b3a 	bleq	ec3070 <__ccfg+0xea30c8>
		proceed receiving;
     384:	13490b39 	movtne	r0, #39737	; 0x9b39
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	00000b1c 	andeq	r0, r0, ip, lsl fp
     38c:	03003441 	movweq	r3, #1089	; 0x441
     390:	3b0b3a08 	blcc	2cebb8 <__ccfg+0x2aec10>
     394:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		proceed receiving;
     398:	00060213 	andeq	r0, r6, r3, lsl r2
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
     3a0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     3a4:	0b3b0b3a 	bleq	ec3094 <__ccfg+0xea30ec>
     3a8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		proceed receiving;
     3ac:	01111349 	tsteq	r1, r9, asr #6
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	0a400112 	beq	1000800 <__ccfg+0xfe0858>
     3b4:	00001301 	andeq	r1, r0, r1, lsl #6
     3b8:	03000543 	movweq	r0, #1347	; 0x543
     3bc:	3b0b3a08 	blcc	2cebe4 <__ccfg+0x2aec3c>
		proceed receiving;
     3c0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	00060213 	andeq	r0, r6, r3, lsl r2
     3c8:	00054400 	andeq	r4, r5, r0, lsl #8
		proceed receiving;
     3cc:	0b3a0e03 	bleq	e83be0 <__ccfg+0xe63c38>
}
     3d0:	0b390b3b 	bleq	e430c4 <__ccfg+0xe2311c>
     3d4:	0a021349 	beq	85100 <__ccfg+0x65158>
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	05450000 	strbeq	r0, [r5, #-0]
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	3a080300 	bcc	200fe4 <__ccfg+0x1e103c>
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     3e8:	4600000a 	strmi	r0, [r0], -sl
     3ec:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 33c <receiver+0xc4>
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	0b3a0e03 	bleq	e83c04 <__ccfg+0xe63c5c>
					break;
     3f4:	0b390b3b 	bleq	e430e8 <__ccfg+0xe23140>
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	13490c27 	movtne	r0, #39975	; 0x9c27
     3fc:	13010b20 	movwne	r0, #6944	; 0x1b20
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	05470000 	strbeq	r0, [r7, #-0]
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	3a0e0300 	bcc	38100c <__ccfg+0x361064>
     408:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	0013490b 	andseq	r4, r3, fp, lsl #18
     410:	00344800 	eorseq	r4, r4, r0, lsl #16
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	0b3a0803 	bleq	e82428 <__ccfg+0xe62480>
     418:	0b390b3b 	bleq	e4310c <__ccfg+0xe23164>
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	00001349 	andeq	r1, r0, r9, asr #6
     420:	00010b49 	andeq	r0, r1, r9, asr #22
     424:	002e4a00 	eoreq	r4, lr, r0, lsl #20
     428:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     42c:	0b3b0b3a 	bleq	ec311c <__ccfg+0xea3174>
     430:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	01111349 	tsteq	r1, r9, asr #6
					call sender(response_message_2, done_case);
     438:	0a400112 	beq	1000888 <__ccfg+0xfe08e0>
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	054b0000 	strbeq	r0, [fp, #-0]
     440:	3a080300 	bcc	201048 <__ccfg+0x1e10a0>
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     448:	0013490b 	andseq	r4, r3, fp, lsl #18
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	002e4c00 	eoreq	r4, lr, r0, lsl #24
				DEBUG_PRINT("\r\nDelete rec");/*
     450:	0b3a0e03 	bleq	e83c64 <__ccfg+0xe63cbc>
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	0b39053b 	bleq	e41948 <__ccfg+0xe219a0>
     458:	13490c27 	movtne	r0, #39975	; 0x9c27
     45c:	00000b20 	andeq	r0, r0, r0, lsr #22
     460:	31012e4d 	tstcc	r1, sp, asr #28
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     468:	010a4001 	tsteq	sl, r1
     46c:	4e000013 	mcrmi	0, 0, r0, cr0, cr3, {0}
     470:	13310005 	teqne	r1, #5
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	00000a02 	andeq	r0, r0, r2, lsl #20
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	31012e4f 	tstcc	r1, pc, asr #28
     47c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	000a4001 	andeq	r4, sl, r1
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	11010000 	mrsne	r0, (UNDEF: 1)
     488:	130e2501 	movwne	r2, #58625	; 0xe501
     48c:	1b0e030b 	blne	3810c0 <__ccfg+0x361118>
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	1106550e 	tstne	r6, lr, lsl #10
						status = (uint8_t) SUCCESS;
     494:	00061001 	andeq	r1, r6, r1
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	00240200 	eoreq	r0, r4, r0, lsl #4
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	0b3e0b0b 	bleq	f830d0 <__ccfg+0xf63128>
     4a0:	00000e03 	andeq	r0, r0, r3, lsl #28
     4a4:	03001603 	movweq	r1, #1539	; 0x603
     4a8:	3b0b3a0e 	blcc	2cece8 <__ccfg+0x2aed40>
     4ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     4b4:	0b0b0024 	bleq	2c054c <__ccfg+0x2a05a4>
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4bc:	26050000 	strcs	r0, [r5], -r0
     4c0:	00134900 	andseq	r4, r3, r0, lsl #18
     4c4:	00350600 	eorseq	r0, r5, r0, lsl #12
     4c8:	00001349 	andeq	r1, r0, r9, asr #6
     4cc:	0b000f07 	bleq	40f0 <NOROM_SetupGetTrimForAnabypassValue1+0x3c>
     4d0:	0013490b 	andseq	r4, r3, fp, lsl #18
     4d4:	01130800 	tsteq	r3, r0, lsl #16
     4d8:	0b3a0b0b 	bleq	e8310c <__ccfg+0xe63164>
     4dc:	0b390b3b 	bleq	e431d0 <__ccfg+0xe23228>
     4e0:	00001301 	andeq	r1, r0, r1, lsl #6
     4e4:	03000d09 	movweq	r0, #3337	; 0xd09
     4e8:	3b0b3a0e 	blcc	2ced28 <__ccfg+0x2aed80>
     4ec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4f0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     4f4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     4f8:	0a00000b 	beq	52c <receiver+0x2b4>
     4fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     500:	0b3b0b3a 	bleq	ec31f0 <__ccfg+0xea3248>
     504:	13490b39 	movtne	r0, #39737	; 0x9b39
     508:	00000b38 	andeq	r0, r0, r8, lsr fp
     50c:	0300340b 	movweq	r3, #1035	; 0x40b
     510:	3b0b3a0e 	blcc	2ced50 <__ccfg+0x2aeda8>
     514:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     518:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     51c:	0c00000c 	stceq	0, cr0, [r0], {12}
     520:	13490101 	movtne	r0, #37121	; 0x9101
     524:	00001301 	andeq	r1, r0, r1, lsl #6
     528:	0000210d 	andeq	r2, r0, sp, lsl #2
     52c:	00160e00 	andseq	r0, r6, r0, lsl #28
     530:	0b3a0e03 	bleq	e83d44 <__ccfg+0xe63d9c>
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	0b39053b 	bleq	e41a28 <__ccfg+0xe21a80>
     538:	00001349 	andeq	r1, r0, r9, asr #6
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
				DEBUG_PRINT("\r\nretrieve rec");
     540:	0013010c 	andseq	r0, r3, ip, lsl #2
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00051000 	andeq	r1, r5, r0
     548:	00001349 	andeq	r1, r0, r9, asr #6
     54c:	03003411 	movweq	r3, #1041	; 0x411
     550:	3b0b3a0e 	blcc	2ced90 <__ccfg+0x2aede8>
     554:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     558:	3c0c3f13 	stccc	15, cr3, [ip], {19}
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	1200000c 	andne	r0, r0, #12
     560:	0b0b0113 	bleq	2c09b4 <__ccfg+0x2a0a0c>
     564:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    return node->data_base.item_array[index];
     568:	13010b39 	movwne	r0, #6969	; 0x1b39
     56c:	0d130000 	ldceq	0, cr0, [r3, #-0]
     570:	3a0e0300 	bcc	381178 <__ccfg+0x3611d0>
     574:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    return node->data_base.item_array[index];
     57c:	1400000b 	strne	r0, [r0], #-11
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     584:	0b3a0b0b 	bleq	e831b8 <__ccfg+0xe63210>
     588:	0b39053b 	bleq	e41a7c <__ccfg+0xe21ad4>
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	00001301 	andeq	r1, r0, r1, lsl #6
     590:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
     594:	000b2f13 	andeq	r2, fp, r3, lsl pc
     598:	00341600 	eorseq	r1, r4, r0, lsl #12
     59c:	0b3a0e03 	bleq	e83db0 <__ccfg+0xe63e08>
     5a0:	0b390b3b 	bleq	e43294 <__ccfg+0xe232ec>
     5a4:	00001349 	andeq	r1, r0, r9, asr #6
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	03003417 	movweq	r3, #1047	; 0x417
     5ac:	3b0b3a0e 	blcc	2cedec <__ccfg+0x2aee44>
				DEBUG_PRINT("\r\nResponse");
     5b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     5b8:	1800000a 	stmdane	r0, {r1, r3}
     5bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     5c4:	13490b39 	movtne	r0, #39737	; 0x9b39
     5c8:	00000a02 	andeq	r0, r0, r2, lsl #20
				if(!response_flag){
     5cc:	47003419 	smladmi	r0, r9, r4, r3
					response_flag=1;
     5d0:	3b0b3a13 	blcc	2cee24 <__ccfg+0x2aee7c>
					trigger(&response_flag);
     5d4:	020b3905 	andeq	r3, fp, #81920	; 0x14000
				switch(response_message_5->status){
     5d8:	1a00000a 	bne	608 <receiver+0x390>
     5dc:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 52c <receiver+0x2b4>
     5e0:	0b3a0e03 	bleq	e83df4 <__ccfg+0xe63e4c>
     5e4:	0b39053b 	bleq	e41ad8 <__ccfg+0xe21b30>
     5e8:	13490c27 	movtne	r0, #39975	; 0x9c27
						if (response_checker[0] == response_message_5->request_number){
     5ec:	01120111 	tsteq	r2, r1, lsl r1
     5f0:	13010a40 	movwne	r0, #6720	; 0x1a40
     5f4:	0b1b0000 	bleq	6c05fc <__ccfg+0x6a0654>
							switch(response_checker[1]){
     5f8:	01065501 	tsteq	r6, r1, lsl #10
     5fc:	1c000013 	stcne	0, cr0, [r0], {19}
     600:	08030034 	stmdaeq	r3, {r2, r4, r5}
     604:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
									proceed response_1_create;
     608:	13490b39 	movtne	r0, #39737	; 0x9b39
						proceed response_2;
     60c:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
									proceed response_1_delete;
     610:	11133100 	tstne	r3, r0, lsl #2
									proceed response_1_retrieve;
     614:	58011201 	stmdapl	r1, {r0, r9, ip}
						proceed response_2;
     618:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
						proceed response_3;
     61c:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
						proceed response_4;
     620:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 570 <receiver+0x2f8>
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	0b3a0e03 	bleq	e83e38 <__ccfg+0xe63e90>
     628:	0b39053b 	bleq	e41b1c <__ccfg+0xe21b74>
				break;
     62c:	01120111 	tsteq	r2, r1, lsl r1
}
     630:	13010a40 	movwne	r0, #6720	; 0x1a40
     634:	0a1f0000 	beq	7c063c <__ccfg+0x7a0694>
     638:	3a0e0300 	bcc	381240 <__ccfg+0x361298>
     63c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     640:	2000000b 	andcs	r0, r0, fp
     644:	1331011d 	teqne	r1, #1073741831	; 0x40000007
fsm root {
     648:	06550152 			; <UNDEFINED> instruction: 0x06550152
     64c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     650:	13010b57 	movwne	r0, #6999	; 0x1b57
     654:	05210000 	streq	r0, [r1, #-0]!
     658:	00133100 	andseq	r3, r3, r0, lsl #2
     65c:	011d2200 	tsteq	sp, r0, lsl #4
     660:	01521331 	cmpeq	r2, r1, lsr r3
     664:	0b580655 	bleq	1601fc0 <__ccfg+0x15e2018>
     668:	0b570b59 	bleq	15c33d4 <__ccfg+0x15a342c>
     66c:	00001301 	andeq	r1, r0, r1, lsl #6
     670:	55010b23 	strpl	r0, [r1, #-2851]	; 0xfffff4dd
     674:	24000006 	strcs	r0, [r0], #-6
     678:	1331000a 	teqne	r1, #10
     67c:	00000111 	andeq	r0, r0, r1, lsl r1
     680:	31001d25 	tstcc	r0, r5, lsr #26
     684:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     688:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     68c:	000b5705 	andeq	r5, fp, r5, lsl #14
     690:	011d2600 	tsteq	sp, r0, lsl #12
     694:	01111331 	tsteq	r1, r1, lsr r3
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	0b580112 	bleq	1600ae8 <__ccfg+0x15e0b40>
     69c:	0b570559 	bleq	15c1c08 <__ccfg+0x15a1c60>
     6a0:	00001301 	andeq	r1, r0, r1, lsl #6
		init_node(node_db);
     6a4:	31011d27 	tstcc	r1, r7, lsr #26
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6ac:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
		tcv_plug (0, &plug_null);
     6b0:	000b5705 	andeq	r5, fp, r5, lsl #14
     6b4:	001d2800 	andseq	r2, sp, r0, lsl #16
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	01111331 	tsteq	r1, r1, lsr r3
     6bc:	0b580112 	bleq	1600b0c <__ccfg+0x15e0b64>
     6c0:	0b570b59 	bleq	15c342c <__ccfg+0x15a3484>
     6c4:	34290000 	strtcc	r0, [r9], #-0
     6c8:	3a080300 	bcc	2012d0 <__ccfg+0x1e1328>
			diag("Cannot open tcv interface");
     6cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			halt();
     6d4:	2a000006 	bcs	6f4 <root+0xac>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	0e03012e 	adfeqsp	f0, f3, #0.5
     6dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		runfsm receiver(node_db);
     6e0:	0b200b39 	bleq	8033cc <__ccfg+0x7e3424>
     6e4:	00001301 	andeq	r1, r0, r1, lsl #6
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	03000a2b 	movweq	r0, #2603	; 0xa2b
     6ec:	3b0b3a0e 	blcc	2cef2c <__ccfg+0x2aef84>
     6f0:	000b3905 	andeq	r3, fp, r5, lsl #18
     6f4:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     6f8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     6fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		ser_inf(get_choice, "%c", &CHOICE);
     700:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     704:	01120111 	tsteq	r2, r1, lsl r1
     708:	13010a40 	movwne	r0, #6720	; 0x1a40
		switch(CHOICE) {
     70c:	052d0000 	streq	r0, [sp, #-0]!
     710:	3a0e0300 	bcc	381318 <__ccfg+0x361370>
     714:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     718:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     71c:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
     720:	0111010b 	tsteq	r1, fp, lsl #2
     724:	13010112 	movwne	r0, #4370	; 0x1112
     728:	342f0000 	strtcc	r0, [pc], #-0	; 730 <root+0xe8>
     72c:	00133100 	andseq	r3, r3, r0, lsl #2
     730:	010b3000 	mrseq	r3, (UNDEF: 11)
     734:	06551331 			; <UNDEFINED> instruction: 0x06551331
     738:	34310000 	ldrtcc	r0, [r1], #-0
				proceed menu;
     73c:	02133100 	andseq	r3, r3, #0, 2
     740:	32000006 	andcc	r0, r0, #6
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     748:	06550152 			; <UNDEFINED> instruction: 0x06550152
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	0b590b58 	bleq	16434b4 <__ccfg+0x162350c>
     750:	00000b57 	andeq	r0, r0, r7, asr fp
     754:	31011d33 	tstcc	r1, r3, lsr sp
		DEBUG_PRINT("setting node group ID");
     758:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     75c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    node->gid = gid; 
     760:	000b5705 	andeq	r5, fp, r5, lsl #14
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     764:	00053400 	andeq	r3, r5, r0, lsl #8
    node->gid = gid; 
     768:	0b3a0803 	bleq	e8277c <__ccfg+0xe627d4>
		proceed menu;
     76c:	0b39053b 	bleq	e41c60 <__ccfg+0xe21cb8>
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     770:	0a021349 	beq	8549c <__ccfg+0x654f4>
     774:	05350000 	ldreq	r0, [r5, #-0]!
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	02133100 	andseq	r3, r3, #0, 2
     77c:	36000006 	strcc	r0, [r0], -r6
     780:	08030034 	stmdaeq	r3, {r2, r4, r5}
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     784:	0b3b0b3a 	bleq	ec3474 <__ccfg+0xea34cc>
     788:	13490b39 	movtne	r0, #39737	; 0x9b39
		if((node_db->id < 1) || (node_db->id > 25)){
     78c:	00000602 	andeq	r0, r0, r2, lsl #12
     790:	11010b37 	tstne	r1, r7, lsr fp
     794:	00011201 	andeq	r1, r1, r1, lsl #4
			strncpy(reason, "Out of Range", 50);
     798:	002e3800 	eoreq	r3, lr, r0, lsl #16
     79c:	0b3a0e03 	bleq	e83fb0 <__ccfg+0xe64008>
			proceed invalid_node_id;
     7a0:	0b39053b 	bleq	e41c94 <__ccfg+0xe21cec>
     7a4:	00000b20 	andeq	r0, r0, r0, lsr #22
				strncpy(reason, "ID is already in use", 50);
     7a8:	03012e39 	movweq	r2, #7737	; 0x1e39
		for(int i = 0; i < node_db->index; i++){
     7ac:	3b0b3a0e 	blcc	2cefec <__ccfg+0x2af044>
     7b0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     7b4:	1201110c 	andne	r1, r1, #12, 2
		proceed menu;
     7b8:	010a4001 	tsteq	sl, r1
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7bc:	3a000013 	bcc	810 <root+0x1c8>
     7c0:	0e03012e 	adfeqsp	f0, f3, #0.5
     7c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7c8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		proceed get_new_node_id;
     7cc:	01111349 	tsteq	r1, r9, asr #6
     7d0:	0a400112 	beq	1000c20 <__ccfg+0xfe0c78>
		if (!clear_node_neighbour_array(node_db)){
     7d4:	00001301 	andeq	r1, r0, r1, lsl #6
     7d8:	0300053b 	movweq	r0, #1339	; 0x53b
			strncpy(reason, "Error Clearing Node Array", 50);
     7dc:	3b0b3a08 	blcc	2cf004 <__ccfg+0x2af05c>
     7e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     7e4:	00060213 	andeq	r0, r6, r3, lsl r2
			proceed error;
     7e8:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7ec:	0b3a0e03 	bleq	e84000 <__ccfg+0xe64058>
     7f0:	0b39053b 	bleq	e41ce4 <__ccfg+0xe21d3c>
		request_packet->gid = node_db->gid;
     7f4:	01120111 	tsteq	r2, r1, lsl r1
     7f8:	13010a40 	movwne	r0, #6720	; 0x1a40
		request_packet->tpe = DISCOVERY_REQUEST;
     7fc:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
		request_packet->request_number = generate_request_num();
     800:	030c3f01 	movweq	r3, #52993	; 0xcf01
     804:	3b0b3a0e 	blcc	2cf044 <__ccfg+0x2af09c>
		call sender(request_packet, wait_discovery);
     808:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     80c:	2013490c 	andscs	r4, r3, ip, lsl #18
		request_packet->receiver_id=0;
     810:	0013010b 	andseq	r0, r3, fp, lsl #2
		call sender(request_packet, wait_discovery);
     814:	00053e00 	andeq	r3, r5, r0, lsl #28
     818:	0b3a0803 	bleq	e8282c <__ccfg+0xe62884>
     81c:	0b39053b 	bleq	e41d10 <__ccfg+0xe21d68>
			release;
     820:	00001349 	andeq	r1, r0, r9, asr #6
				proceed get_new_node_id;
     824:	03000a3f 	movweq	r0, #2623	; 0xa3f
				proceed clear_neighbour_array;
     828:	3b0b3a08 	blcc	2cf050 <__ccfg+0x2af0a8>
				proceed create_proto_start;
     82c:	000b3905 	andeq	r3, fp, r5, lsl #18
				proceed start_delete_proto;
     830:	00344000 	eorseq	r4, r4, r0
				proceed start_retrieve_proto;
     834:	0b3a0e03 	bleq	e84048 <__ccfg+0xe640a0>
				proceed display_db;
     838:	0b39053b 	bleq	e41d2c <__ccfg+0xe21d84>
				proceed del_local;
     83c:	06021349 	streq	r1, [r2], -r9, asr #6
			if(node_db->id == node_db->nnodes[i]){
     840:	0a410000 	beq	1040848 <__ccfg+0x10208a0>
     844:	3a080300 	bcc	20144c <__ccfg+0x1e14a4>
     848:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				strncpy(reason, "ID is already in use", 50);
     84c:	0001110b 	andeq	r1, r1, fp, lsl #2
     850:	011d4200 	tsteq	sp, r0, lsl #4
				proceed invalid_node_id;
     854:	01111331 	tsteq	r1, r1, lsr r3
     858:	0b580112 	bleq	1600ca8 <__ccfg+0x15e0d00>
		for(int i = 0; i < node_db->index; i++){
     85c:	0b570b59 	bleq	15c35c8 <__ccfg+0x15a3620>
		if (discovery_wait_flag == 0){
     860:	00001301 	andeq	r1, r0, r1, lsl #6
			discovery_wait_flag=1;
     864:	31011d43 	tstcc	r1, r3, asr #26
     868:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			delay(3000, find_proto_start);
     86c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     870:	000b570b 	andeq	r5, fp, fp, lsl #14
		if (discovery_wait_flag == 1){
     874:	012e4400 			; <UNDEFINED> instruction: 0x012e4400
			discovery_wait_flag=0;
     878:	0b3a0e03 	bleq	e8408c <__ccfg+0xe640e4>
     87c:	0b39053b 	bleq	e41d70 <__ccfg+0xe21dc8>
			delay(3000, display_neighbour_nodes);
     880:	13490c27 	movtne	r0, #39975	; 0x9c27
     884:	13010b20 	movwne	r0, #6944	; 0x1b20
     888:	2e450000 	cdpcs	0, 4, cr0, cr5, cr0, {0}
     88c:	3a0e0300 	bcc	381494 <__ccfg+0x3614ec>
     890:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     894:	2013490b 	andscs	r4, r3, fp, lsl #18
     898:	4600000b 	strmi	r0, [r0], -fp
     89c:	0e03012e 	adfeqsp	f0, f3, #0.5
     8a0:	0b3b0b3a 	bleq	ec3590 <__ccfg+0xea35e8>
     8a4:	0b200b39 	bleq	803590 <__ccfg+0x7e35e8>
     8a8:	00001301 	andeq	r1, r0, r1, lsl #6
     8ac:	03003447 	movweq	r3, #1095	; 0x447
     8b0:	3b0b3a08 	blcc	2cf0d8 <__ccfg+0x2af130>
     8b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     8b8:	48000013 	stmdami	r0, {r0, r1, r4}
     8bc:	0000010b 	andeq	r0, r0, fp, lsl #2
     8c0:	3f012e49 	svccc	0x00012e49
     8c4:	3a0e030c 	bcc	3814fc <__ccfg+0x361554>
     8c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if(node_db->index == 0){
     8cc:	110c270b 	tstne	ip, fp, lsl #14
     8d0:	40011201 	andmi	r1, r1, r1, lsl #4
     8d4:	0013010a 	andseq	r0, r3, sl, lsl #2
			proceed menu;
     8d8:	00054a00 	andeq	r4, r5, r0, lsl #20
fsm root {
     8dc:	0b3a0803 	bleq	e828f0 <__ccfg+0xe62948>
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e0:	0b390b3b 	bleq	e435d4 <__ccfg+0xe2362c>
		for (int i=0; i<node_db->index; i++) {
     8e4:	06021349 	streq	r1, [r2], -r9, asr #6
     8e8:	344b0000 	strbcc	r0, [fp], #-0
     8ec:	3a0e0300 	bcc	3814f4 <__ccfg+0x36154c>
		proceed menu;
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     8f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8f8:	4c00000a 	stcmi	0, cr0, [r0], {10}
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     8fc:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     900:	0b3b0b3a 	bleq	ec35f0 <__ccfg+0xea3648>
     904:	01110b39 	tsteq	r1, r9, lsr fp
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     908:	1d4d0000 	stclne	0, cr0, [sp, #-0]
     90c:	52133100 	andspl	r3, r3, #0, 2
			strncpy(reason, "Error: improper ID", 50);
     910:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     914:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     918:	4e00000b 	cdpmi	0, 0, cr0, cr0, cr11, {0}
			proceed error;
     91c:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 86c <root+0x224>
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     920:	0b3a0e03 	bleq	e84134 <__ccfg+0xe6418c>
     924:	0b390b3b 	bleq	e43618 <__ccfg+0xe23670>
		ser_in(get_record_to_create, user_provided_record, 20);
     928:	01110c27 	tsteq	r1, r7, lsr #24
     92c:	0a400112 	beq	1000d7c <__ccfg+0xfe0dd4>
     930:	054f0000 	strbeq	r0, [pc, #-0]	; 938 <root+0x2f0>
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     934:	3a080300 	bcc	20153c <__ccfg+0x1e1594>
		create_message->gid = node_db->gid;
     938:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     93c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     940:	5000000a 	andpl	r0, r0, sl
		create_message->tpe = CREATE_RECORD;
     944:	0e03012e 	adfeqsp	f0, f3, #0.5
		create_message->request_number = generate_request_num();
     948:	0b3b0b3a 	bleq	ec3638 <__ccfg+0xea3690>
		create_message->sender_id = node_db->id;
     94c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     950:	13010b20 	movwne	r0, #6944	; 0x1b20
     954:	05510000 	ldrbeq	r0, [r1, #-0]
		strncpy(create_message->record, user_provided_record, 20);
     958:	3a080300 	bcc	201560 <__ccfg+0x1e15b8>
		create_message->receiver_id = user_provided_receiver_id;
     95c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		strncpy(create_message->record, user_provided_record, 20);
     960:	0013490b 	andseq	r4, r3, fp, lsl #18
		response_checker[0] = create_message->request_number;
     964:	012e5200 			; <UNDEFINED> instruction: 0x012e5200
		call sender(create_message, wait);
     968:	0b3a0e03 	bleq	e8417c <__ccfg+0xe641d4>
		response_checker[1] = create_message->tpe;
     96c:	0b39053b 	bleq	e41e60 <__ccfg+0xe21eb8>
     970:	0b200c27 	bleq	803a14 <__ccfg+0x7e3a6c>
		call sender(create_message, wait);
     974:	00001301 	andeq	r1, r0, r1, lsl #6
     978:	03000553 	movweq	r0, #1363	; 0x553
     97c:	3b0b3a0e 	blcc	2cf1bc <__ccfg+0x2af214>
     980:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     984:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
     988:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     98c:	0b3b0b3a 	bleq	ec367c <__ccfg+0xea36d4>
     990:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     994:	00000b20 	andeq	r0, r0, r0, lsr #22
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     998:	03012e55 	movweq	r2, #7765	; 0x1e55
     99c:	3b0b3a0e 	blcc	2cf1dc <__ccfg+0x2af234>
			strncpy(reason, "Error: improper node ID", 50);
     9a0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     9a4:	2013490c 	andscs	r4, r3, ip, lsl #18
			proceed error;
     9a8:	0013010b 	andseq	r0, r3, fp, lsl #2
     9ac:	002e5600 	eoreq	r5, lr, r0, lsl #12
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9b0:	0b3a0e03 	bleq	e841c4 <__ccfg+0xe6421c>
     9b4:	0b39053b 	bleq	e41ea8 <__ccfg+0xe21f00>
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9b8:	0b200c27 	bleq	803a5c <__ccfg+0x7e3ab4>
     9bc:	2e570000 	cdpcs	0, 5, cr0, cr7, cr0, {0}
     9c0:	3a0e0300 	bcc	3815c8 <__ccfg+0x361620>
		if (us_pr_in < 0 || us_pr_in > 40){
     9c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			strncpy(reason, "Error: invalid index", 50);
     9c8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     9cc:	000b2013 	andeq	r2, fp, r3, lsl r0
     9d0:	002e5800 	eoreq	r5, lr, r0, lsl #16
			proceed error;
     9d4:	0b3a0e03 	bleq	e841e8 <__ccfg+0xe64240>
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9d8:	0b39053b 	bleq	e41ecc <__ccfg+0xe21f24>
     9dc:	13490c27 	movtne	r0, #39975	; 0x9c27
     9e0:	00000b20 	andeq	r0, r0, r0, lsr #22
		delete_record->gid = node_db->gid;
     9e4:	31012e59 	tstcc	r1, r9, asr lr
		delete_record->tpe = DELETE_RECORD;
     9e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		delete_record->request_number = generate_request_num();
     9ec:	000a4001 	andeq	r4, sl, r1
     9f0:	11010000 	mrsne	r0, (UNDEF: 1)
		call sender(delete_record, wait);
     9f4:	130e2501 	movwne	r2, #58625	; 0xe501
		delete_record->sender_id = node_db->id;
     9f8:	1b0e030b 	blne	38162c <__ccfg+0x361684>
		delete_record->receiver_id = user_provided_receiver_id;
     9fc:	1106550e 	tstne	r6, lr, lsl #10
		delete_record->record_index = us_pr_in;
     a00:	00061001 	andeq	r1, r6, r1
     a04:	00240200 	eoreq	r0, r4, r0, lsl #4
		response_checker[0] = delete_record->request_number;
     a08:	0b3e0b0b 	bleq	f8363c <__ccfg+0xf63694>
		call sender(delete_record, wait);
     a0c:	00000e03 	andeq	r0, r0, r3, lsl #28
     a10:	03001603 	movweq	r1, #1539	; 0x603
     a14:	3b0b3a0e 	blcc	2cf254 <__ccfg+0x2af2ac>
     a18:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     a1c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a20:	0b0b0024 	bleq	2c0ab8 <__ccfg+0x2a0b10>
     a24:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a28:	13050000 	movwne	r0, #20480	; 0x5000
     a2c:	0b0e0301 	bleq	381638 <__ccfg+0x361690>
     a30:	3b0b3a0b 	blcc	2cf264 <__ccfg+0x2af2bc>
		if (get_id < 1 || get_id > 25){
     a34:	0013010b 	andseq	r0, r3, fp, lsl #2
     a38:	000d0600 	andeq	r0, sp, r0, lsl #12
			strncpy(reason, "Error: improper node ID", 50);
     a3c:	13490e03 	movtne	r0, #40451	; 0x9e03
     a40:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
     a44:	0f070000 	svceq	0x00070000
			proceed error;
     a48:	000b0b00 	andeq	r0, fp, r0, lsl #22
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a4c:	00260800 	eoreq	r0, r6, r0, lsl #16
     a50:	00001349 	andeq	r1, r0, r9, asr #6
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a54:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
     a58:	0a000013 	beq	aac <root+0x464>
     a5c:	0b0b000f 	bleq	2c0aa0 <__ccfg+0x2a0af8>
		if (beg_for_index < 0 || beg_for_index > 40){
     a60:	00001349 	andeq	r1, r0, r9, asr #6
     a64:	0b01130b 	bleq	45698 <__ccfg+0x256f0>
			strncpy(reason, "Error: invalid index", 50);
     a68:	3b0b3a0b 	blcc	2cf29c <__ccfg+0x2af2f4>
     a6c:	010b390b 	tsteq	fp, fp, lsl #18
			proceed error;
     a70:	0c000013 	stceq	0, cr0, [r0], {19}
     a74:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     a78:	0b3b0b3a 	bleq	ec3768 <__ccfg+0xea37c0>
     a7c:	13490b39 	movtne	r0, #39737	; 0x9b39
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a80:	0b0d0b0b 	bleq	3436b4 <__ccfg+0x32370c>
     a84:	0b380b0c 	bleq	e036bc <__ccfg+0xde3714>
     a88:	0d0d0000 	stceq	0, cr0, [sp, #-0]
		retrieve_record->gid = node_db->gid;
     a8c:	3a0e0300 	bcc	381694 <__ccfg+0x3616ec>
		retrieve_record->tpe = RETRIEVE_RECORD;
     a90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		retrieve_record->request_number = generate_request_num();
     a94:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     a98:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
		retrieve_record->receiver_id = get_id;
     a9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aa0:	0b3b0b3a 	bleq	ec3790 <__ccfg+0xea37e8>
		retrieve_record->record_index = beg_for_index;
     aa4:	13490b39 	movtne	r0, #39737	; 0x9b39
     aa8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aac:	010f0000 	mrseq	r0, CPSR
		response_checker[0] = retrieve_record->request_number;
     ab0:	01134901 	tsteq	r3, r1, lsl #18
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     ab4:	10000013 	andne	r0, r0, r3, lsl r0
		response_checker[1] = retrieve_record->tpe;
     ab8:	00000021 	andeq	r0, r0, r1, lsr #32
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     abc:	03001611 	movweq	r1, #1553	; 0x611
     ac0:	3b0b3a0e 	blcc	2cf300 <__ccfg+0x2af358>
		call sender(retrieve_record, wait);
     ac4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ac8:	12000013 	andne	r0, r0, #19
     acc:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     ad0:	00001301 	andeq	r1, r0, r1, lsl #6
     ad4:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad8:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     adc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if(node_db->data_base.item_count != 0){
     ae0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ae4:	13490b39 	movtne	r0, #39737	; 0x9b39
     ae8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		ser_out(loop_through_data, "\r\n");
     aec:	13150000 	tstne	r5, #0
     af0:	3a0b0b01 	bcc	2c36fc <__ccfg+0x2a3754>
		proceed menu;
     af4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		delete_all(node_db);
     af8:	0013010b 	andseq	r0, r3, fp, lsl #2
     afc:	000d1600 	andeq	r1, sp, r0, lsl #12
		proceed menu;
     b00:	0b3a0e03 	bleq	e84314 <__ccfg+0xe6436c>
     b04:	0b39053b 	bleq	e41ff8 <__ccfg+0xe22050>
		delay(3000, timeout);
     b08:	0b381349 	bleq	e05834 <__ccfg+0xde588c>
     b0c:	13170000 	tstne	r7, #0
		when(&response_flag, menu);
     b10:	0b0e0301 	bleq	38171c <__ccfg+0x361774>
     b14:	3b0b3a0b 	blcc	2cf348 <__ccfg+0x2af3a0>
		release;
     b18:	010b3905 	tsteq	fp, r5, lsl #18
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b1c:	18000013 	stmdane	r0, {r0, r1, r4}
     b20:	13490021 	movtne	r0, #36897	; 0x9021
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b24:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b28:	27011519 	smladcs	r1, r9, r5, r1
     b2c:	0113490c 	tsteq	r3, ip, lsl #18
     b30:	1a000013 	bne	b84 <root+0x53c>
		for (int i=0; i<node_db->index; i++) {
     b34:	13470034 	movtne	r0, #28724	; 0x7034
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b38:	0b3b0b3a 	bleq	ec3828 <__ccfg+0xea3880>
     b3c:	0a020b39 	beq	83828 <__ccfg+0x63880>
     b40:	341b0000 	ldrcc	r0, [fp], #-0
     b44:	3a0e0300 	bcc	38174c <__ccfg+0x3617a4>
     b48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b4c:	3f13490b 	svccc	0x0013490b
     b50:	000a020c 	andeq	r0, sl, ip, lsl #4
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b54:	00341c00 	eorseq	r1, r4, r0, lsl #24
     b58:	0b3a0e03 	bleq	e8436c <__ccfg+0xe643c4>
     b5c:	0b390b3b 	bleq	e43850 <__ccfg+0xe238a8>
     b60:	0a021349 	beq	8588c <__ccfg+0x658e4>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b64:	341d0000 	ldrcc	r0, [sp], #-0
     b68:	3a0e0300 	bcc	381770 <__ccfg+0x3617c8>
		ser_out(timeout, "\r\nFailed to reach the destination");
     b6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b70:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		proceed menu;
     b74:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b78:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; ac8 <root+0x480>
     b7c:	0b3a0e03 	bleq	e84390 <__ccfg+0xe643e8>
     b80:	0b39053b 	bleq	e42074 <__ccfg+0xe220cc>
		proceed menu;
     b84:	13490c27 	movtne	r0, #39975	; 0x9c27
}
     b88:	01120111 	tsteq	r2, r1, lsl r1
     b8c:	00000a40 	andeq	r0, r0, r0, asr #20
     b90:	3f012e1f 	svccc	0x00012e1f
     b94:	3a0e030c 	bcc	3817cc <__ccfg+0x361824>
     b98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b9c:	110c270b 	tstne	ip, fp, lsl #14
     ba0:	40011201 	andmi	r1, r1, r1, lsl #4
     ba4:	0013010a 	andseq	r0, r3, sl, lsl #2
     ba8:	00052000 	andeq	r2, r5, r0
     bac:	0b3a0e03 	bleq	e843c0 <__ccfg+0xe64418>
     bb0:	0b39053b 	bleq	e420a4 <__ccfg+0xe220fc>
     bb4:	06021349 	streq	r1, [r2], -r9, asr #6
     bb8:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
     bbc:	22000000 	andcs	r0, r0, #0
     bc0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     bc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bc8:	13490b39 	movtne	r0, #39737	; 0x9b39
     bcc:	00000602 	andeq	r0, r0, r2, lsl #12
     bd0:	03003423 	movweq	r3, #1059	; 0x423
     bd4:	3b0b3a08 	blcc	2cf3fc <__ccfg+0x2af454>
     bd8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     bdc:	000a0213 	andeq	r0, sl, r3, lsl r2
     be0:	00342400 	eorseq	r2, r4, r0, lsl #8
     be4:	0b3a0803 	bleq	e82bf8 <__ccfg+0xe62c50>
     be8:	0b39053b 	bleq	e420dc <__ccfg+0xe22134>
     bec:	00001349 	andeq	r1, r0, r9, asr #6
     bf0:	03000a25 	movweq	r0, #2597	; 0xa25
     bf4:	3b0b3a0e 	blcc	2cf434 <__ccfg+0x2af48c>
     bf8:	110b3905 	tstne	fp, r5, lsl #18
static void devinit_uart (int devnum) {
     bfc:	26000001 	strcs	r0, [r0], -r1
	adddevfunc (ioreq_uart_a, devnum);
     c00:	0111010b 	tsteq	r1, fp, lsl #2
     c04:	13010112 	movwne	r0, #4370	; 0x1112
void udelay (volatile word n) {
     c08:	0b270000 	bleq	9c0c10 <__ccfg+0x9a0c68>
     c0c:	01065501 	tsteq	r6, r1, lsl #10
	while (n) {
     c10:	28000013 	stmdacs	r0, {r0, r1, r4}
     c14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
     c18:	06550152 			; <UNDEFINED> instruction: 0x06550152
	while (n--);
     c1c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     c20:	00000b57 	andeq	r0, r0, r7, asr fp
     c24:	31000529 	tstcc	r0, r9, lsr #10
		n--;
     c28:	2a000013 	bcs	c7c <__pi_ondomain+0x1c>
     c2c:	0e03012e 	adfeqsp	f0, f3, #0.5
     c30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void mdelay (volatile word n) {
     c34:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     c38:	01120111 	tsteq	r2, r1, lsl r1
	while (n) {
     c3c:	13010a40 	movwne	r0, #6720	; 0x1a40
     c40:	052b0000 	streq	r0, [fp, #-0]!
}
     c44:	3a080300 	bcc	20184c <__ccfg+0x1e18a4>
		udelay (999);
     c48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		n--;
     c50:	2c000006 	stccs	0, cr0, [r0], {6}
     c54:	0c3f012e 	ldfeqs	f0, [pc], #-184	; ba4 <root+0x55c>
     c58:	0b3a0e03 	bleq	e8446c <__ccfg+0xe644c4>
     c5c:	0b39053b 	bleq	e42150 <__ccfg+0xe221a8>
void __pi_ondomain (lword d) {
     c60:	13490c27 	movtne	r0, #39975	; 0x9c27
     c64:	01120111 	tsteq	r2, r1, lsl r1
		if (__pi_systat.effpdm > 1)
     c68:	13010a40 	movwne	r0, #6720	; 0x1a40
     c6c:	342d0000 	strtcc	r0, [sp], #-0
			__pi_systat.effpdm = 1;
     c70:	3a0e0300 	bcc	381878 <__ccfg+0x3618d0>
	PRCMPowerDomainOn (d);
     c74:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c7c:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c80:	0c3f012e 	ldfeqs	f0, [pc], #-184	; bd0 <root+0x588>
     c84:	0b3a0e03 	bleq	e84498 <__ccfg+0xe644f0>
     c88:	0b39053b 	bleq	e4217c <__ccfg+0xe221d4>
	__pi_systat.ondmns |= d;
     c8c:	0b200c27 	bleq	803d30 <__ccfg+0x7e3d88>
     c90:	00001301 	andeq	r1, r0, r1, lsl #6
}
     c94:	0300052f 	movweq	r0, #1327	; 0x52f
     c98:	3b0b3a08 	blcc	2cf4c0 <__ccfg+0x2af518>
void __pi_offdomain (lword d) {
     c9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ca0:	30000013 	andcc	r0, r0, r3, lsl r0
	PRCMPowerDomainOff (d);
     ca4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; bf4 <root+0x5ac>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ca8:	0b3a0e03 	bleq	e844bc <__ccfg+0xe64514>
     cac:	0b39053b 	bleq	e421a0 <__ccfg+0xe221f8>
     cb0:	01120111 	tsteq	r2, r1, lsl r1
	if (d & PRCM_DOMAIN_RFCORE) {
     cb4:	13010a40 	movwne	r0, #6720	; 0x1a40
     cb8:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cbc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     cc0:	3b0b3a08 	blcc	2cf4e8 <__ccfg+0x2af540>
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cc4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     cc8:	1113490c 	tstne	r3, ip, lsl #18
	__pi_systat.ondmns &= ~d;
     ccc:	40011201 	andmi	r1, r1, r1, lsl #4
     cd0:	0013010a 	andseq	r0, r3, sl, lsl #2
}
     cd4:	00053200 	andeq	r3, r5, r0, lsl #4
     cd8:	0b3a0803 	bleq	e82cec <__ccfg+0xe62d44>
void __pi_syserror (word ec, const char *m) {
     cdc:	0b39053b 	bleq	e421d0 <__ccfg+0xe22228>
	diag ("SYSERR: %x, %s", ec, m);
     ce0:	0a021349 	beq	85a0c <__ccfg+0x65a64>
     ce4:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
  __ASM volatile ("cpsid i" : : : "memory");
     ce8:	030c3f00 	movweq	r3, #52992	; 0xcf00
     cec:	3b0b3a0e 	blcc	2cf52c <__ccfg+0x2af584>
     cf0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     cf4:	1201110c 	andne	r1, r1, #12, 2
		all_leds_blink;
     cf8:	000a4001 	andeq	r4, sl, r1
     cfc:	00053400 	andeq	r3, r5, r0, lsl #8
     d00:	0b3a0e03 	bleq	e84514 <__ccfg+0xe6456c>
     d04:	0b39053b 	bleq	e421f8 <__ccfg+0xe22250>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d08:	0a021349 	beq	85a34 <__ccfg+0x65a8c>
     d0c:	05350000 	ldreq	r0, [r5, #-0]!
     d10:	3a0e0300 	bcc	381918 <__ccfg+0x361970>
     d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d18:	0013490b 	andseq	r4, r3, fp, lsl #18
     d1c:	010b3600 	tsteq	fp, r0, lsl #12
	while (1) {
     d20:	00000655 	andeq	r0, r0, r5, asr r6
     d24:	3f012e37 	svccc	0x00012e37
     d28:	3a0e030c 	bcc	381960 <__ccfg+0x3619b8>
     d2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void tci_run_delay_timer () {
     d30:	200c270b 	andcs	r2, ip, fp, lsl #14
	setdel = __pi_mintk - __pi_old;
     d34:	0013010b 	andseq	r0, r3, fp, lsl #2
     d38:	00053800 	andeq	r3, r5, r0, lsl #16
     d3c:	0b3a0803 	bleq	e82d50 <__ccfg+0xe62da8>
     d40:	0b390b3b 	bleq	e43a34 <__ccfg+0xe23a8c>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	00001349 	andeq	r1, r0, r9, asr #6
     d48:	03000539 	movweq	r0, #1337	; 0x539
     d4c:	3b0b3a0e 	blcc	2cf58c <__ccfg+0x2af5e4>
     d50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d54:	3a000013 	bcc	da8 <AONRTCIntHandler+0x10>
	sti_tim;
     d58:	08030034 	stmdaeq	r3, {r2, r4, r5}
}
     d5c:	0b3b0b3a 	bleq	ec3a4c <__ccfg+0xea3aa4>
     d60:	13490b39 	movtne	r0, #39737	; 0x9b39
     d64:	0a3b0000 	beq	ec0d6c <__ccfg+0xea0dc4>
     d68:	3a080300 	bcc	201970 <__ccfg+0x1e19c8>
     d6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	cli_aux;
     d70:	3c00000b 	stccc	0, cr0, [r0], {11}
     d74:	0c3f012e 	ldfeqs	f0, [pc], #-184	; cc4 <__pi_offdomain+0x28>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d78:	0b3a0e03 	bleq	e8458c <__ccfg+0xe645e4>
     d7c:	0b390b3b 	bleq	e43a70 <__ccfg+0xe23ac8>
     d80:	01110c27 	tsteq	r1, r7, lsr #24
     d84:	0a400112 	beq	10011d4 <__ccfg+0xfe122c>
	sti_aux;
     d88:	00001301 	andeq	r1, r0, r1, lsl #6
}
     d8c:	0300053d 	movweq	r0, #1341	; 0x53d
     d90:	3b0b3a08 	blcc	2cf5b8 <__ccfg+0x2af610>
     d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
void AONRTCIntHandler () {
     d98:	00060213 	andeq	r0, r6, r3, lsl r2
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d9c:	00343e00 	eorseq	r3, r4, r0, lsl #28
     da0:	0b3a0803 	bleq	e82db4 <__ccfg+0xe62e0c>
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     da4:	0b390b3b 	bleq	e43a98 <__ccfg+0xe23af0>
		if (__pi_utims [0] == 0)
     da8:	06021349 	streq	r1, [r2], -r9, asr #6
     dac:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
		if (*(__pi_utims [0])) {
     db0:	030c3f00 	movweq	r3, #52992	; 0xcf00
     db4:	3b0b3a0e 	blcc	2cf5f4 <__ccfg+0x2af64c>
			(*(__pi_utims [0]))--;
     db8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		if (__pi_utims [1] == 0)
     dbc:	1201110c 	andne	r1, r1, #12, 2
		if (*(__pi_utims [1])) {
     dc0:	000a4001 	andeq	r4, sl, r1
			aux_timer_inactive = 0;
     dc4:	012e4000 			; <UNDEFINED> instruction: 0x012e4000
			(*(__pi_utims [1]))--;
     dc8:	0b3a0e03 	bleq	e845dc <__ccfg+0xe64634>
		if (__pi_utims [2] == 0)
     dcc:	0b390b3b 	bleq	e43ac0 <__ccfg+0xe23b18>
		if (*(__pi_utims [2])) {
     dd0:	13490c27 	movtne	r0, #39975	; 0x9c27
			(*(__pi_utims [2]))--;
     dd4:	13010b20 	movwne	r0, #6944	; 0x1b20
		if (__pi_utims [3] != 0) {
     dd8:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
			if (*(__pi_utims [3])) {
     ddc:	3a0e0301 	bcc	3819e8 <__ccfg+0x361a40>
				aux_timer_inactive = 0;
     de0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				(*(__pi_utims [3]))--;
     de4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	if (__pi_systat.ledsts) {
     de8:	010b2013 	tsteq	fp, r3, lsl r0
     dec:	42000013 	andmi	r0, r0, #19
		if (__pi_systat.ledblc++ == 0) {
     df0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     df4:	01120111 	tsteq	r2, r1, lsl r1
			if (__pi_systat.ledblk) {
     df8:	13010a40 	movwne	r0, #6720	; 0x1a40
     dfc:	05430000 	strbeq	r0, [r3, #-0]
     e00:	02133100 	andseq	r3, r3, #0, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e04:	44000006 	strmi	r0, [r0], #-6
     e08:	13310034 	teqne	r1, #52	; 0x34
				if (__pi_systat.ledsts & 0x2)
     e0c:	00000602 	andeq	r0, r0, r2, lsl #12
     e10:	31011d45 	tstcc	r1, r5, asr #26
     e14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				if (__pi_systat.ledsts & 0x4)
     e18:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
				__pi_systat.ledblk = 0;
     e1c:	000b570b 	andeq	r5, fp, fp, lsl #14
     e20:	00344600 	eorseq	r4, r4, r0, lsl #12
			if (__pi_systat.fstblk)
     e24:	00001331 	andeq	r1, r0, r1, lsr r3
     e28:	31011d47 	tstcc	r1, r7, asr #26
				__pi_systat.ledblc = 200;
     e2c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	if (events & AON_RTC_EVFLAGS_CH0) {
     e30:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		cli_tim;
     e34:	000b570b 	andeq	r5, fp, fp, lsl #14
		__pi_new += setdel;
     e38:	000a4800 	andeq	r4, sl, r0, lsl #16
     e3c:	01111331 	tsteq	r1, r1, lsr r3
		setdel = 0;
     e40:	1d490000 	stclne	0, cr0, [r9, #-0]
		RISE_N_SHINE;
     e44:	11133101 	tstne	r3, r1, lsl #2
		__pi_new += setdel;
     e48:	58011201 	stmdapl	r1, {r0, r9, ip}
		RISE_N_SHINE;
     e4c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     e50:	4a00000b 	bmi	e84 <AONRTCIntHandler+0xec>
		aux_timer_inactive = 1;
     e54:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     e58:	01120111 	tsteq	r2, r1, lsl r1
				if (__pi_systat.ledsts & 0x1)
     e5c:	00000a40 	andeq	r0, r0, r0, asr #20
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e60:	01110100 	tsteq	r1, r0, lsl #2
     e64:	0b130e25 	bleq	4c4700 <__ccfg+0x4a4758>
				if (__pi_systat.ledsts & 0x2)
     e68:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e6c:	01110655 	tsteq	r1, r5, asr r6
     e70:	00000610 	andeq	r0, r0, r0, lsl r6
				if (__pi_systat.ledsts & 0x8)
     e74:	0b002402 	bleq	9e84 <__exidx_end+0x4244>
				__pi_systat.ledblk = 1;
     e78:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e7c:	0300000e 	movweq	r0, #14
		if (aux_timer_inactive) {
     e80:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			cli_aux;
     e84:	0b3b0b3a 	bleq	ec3b74 <__ccfg+0xea3bcc>
     e88:	13490b39 	movtne	r0, #39737	; 0x9b39
     e8c:	24040000 	strcs	r0, [r4], #-0
     e90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     e94:	0008030b 	andeq	r0, r8, fp, lsl #6
     e98:	01130500 	tsteq	r3, r0, lsl #10
     e9c:	0b0b0e03 	bleq	2c46b0 <__ccfg+0x2a4708>
     ea0:	0b3b0b3a 	bleq	ec3b90 <__ccfg+0xea3be8>
     ea4:	00001301 	andeq	r1, r0, r1, lsl #6
     ea8:	03000d06 	movweq	r0, #3334	; 0xd06
word tci_update_delay_ticks (Boolean force) {
     eac:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
	cli_tim;
     eb0:	000c340b 	andeq	r3, ip, fp, lsl #8
     eb4:	000f0700 	andeq	r0, pc, r0, lsl #14
	if (setdel) {
     eb8:	00000b0b 	andeq	r0, r0, fp, lsl #22
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ebc:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ec0:	09000013 	stmdbeq	r0, {r0, r1, r4}
     ec4:	13490035 	movtne	r0, #36917	; 0x9035
     ec8:	0f0a0000 	svceq	0x000a0000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ecc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
				AON_RTC_O_CH0CMP)) - gettav ());
     ed0:	0b000013 	bleq	f24 <__pi_uart_setrate+0x28>
	return NO;
     ed4:	0b0b0113 	bleq	2c1328 <__ccfg+0x2a1380>
			setdel = 0;
     ed8:	0b3b0b3a 	bleq	ec3bc8 <__ccfg+0xea3c20>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     edc:	13010b39 	movwne	r0, #6969	; 0x1b39
     ee0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
}
     ee4:	3a0e0300 	bcc	381aec <__ccfg+0x361b44>
		sti_tim;
     ee8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		return YES;
     eec:	0b13490b 	bleq	4d3320 <__ccfg+0x4b3378>
     ef0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     ef4:	000b380b 	andeq	r3, fp, fp, lsl #16
     ef8:	000d0d00 	andeq	r0, sp, r0, lsl #26
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     efc:	0b3a0e03 	bleq	e84710 <__ccfg+0xe64768>
	UARTDisable (UART0_BASE);
     f00:	0b390b3b 	bleq	e43bf4 <__ccfg+0xe23c4c>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f04:	0b381349 	bleq	e05c30 <__ccfg+0xde5c88>
	UARTDisable (UART0_BASE);
     f08:	340e0000 	strcc	r0, [lr], #-0
	UARTConfigSetExpClk (UART0_BASE,
     f0c:	3a0e0300 	bcc	381b14 <__ccfg+0x361b6c>
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f14:	3f13490b 	svccc	0x0013490b
     f18:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	01010f00 	tsteq	r1, r0, lsl #30
     f20:	13011349 	movwne	r1, #4937	; 0x1349
     f24:	21100000 	tstcs	r0, r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f28:	11000000 	mrsne	r0, (UNDEF: 0)
     f2c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	urates [0] = rate;
     f34:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     f38:	15120000 	ldrne	r0, [r2, #-0]
     f3c:	010c2701 	tsteq	ip, r1, lsl #14
     f40:	13000013 	movwne	r0, #19
     f44:	13490005 	movtne	r0, #36869	; 0x9005
     f48:	34140000 	ldrcc	r0, [r4], #-0
     f4c:	3a0e0300 	bcc	381b54 <__ccfg+0x361bac>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f50:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f54:	3f13490b 	svccc	0x0013490b
     f58:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f5c:	01151500 	tsteq	r5, r0, lsl #10
     f60:	13490c27 	movtne	r0, #39975	; 0x9c27
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f64:	00001301 	andeq	r1, r0, r1, lsl #6
     f68:	03011316 	movweq	r1, #4886	; 0x1316
	__pi_uart_setrate (urates [0], __pi_uart);
     f6c:	3a0b0b0e 	bcc	2c3bac <__ccfg+0x2a3c04>
     f70:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f74:	0013010b 	andseq	r0, r3, fp, lsl #2
     f78:	01171700 	tsteq	r7, r0, lsl #14
     f7c:	0b3a0b0b 	bleq	e83bb0 <__ccfg+0xe63c08>
     f80:	0b390b3b 	bleq	e43c74 <__ccfg+0xe23ccc>
     f84:	00001301 	andeq	r1, r0, r1, lsl #6
	switch (operation) {
     f88:	03000d18 	movweq	r0, #3352	; 0xd18
static int ioreq_uart_a (int operation, char *buf, int len) {
     f8c:	3b0b3a0e 	blcc	2cf7cc <__ccfg+0x2af824>
     f90:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     f94:	19000013 	stmdbne	r0, {r0, r1, r4}
     f98:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     f9c:	0b3b0b3a 	bleq	ec3c8c <__ccfg+0xea3ce4>
				*buf++ = uart_a_read;
     fa0:	13490b39 	movtne	r0, #39737	; 0x9b39
     fa4:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
			while (len && uart_a_char_available) {
     fa8:	3a080300 	bcc	201bb0 <__ccfg+0x1e1c08>
     fac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fb0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			if (len != operation) {
     fb4:	1b00000b 	blne	fe8 <ioreq_uart_a+0x60>
}
     fb8:	0b0b0113 	bleq	2c140c <__ccfg+0x2a1464>
     fbc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			uart_a_disable_int;
     fc0:	13010b39 	movwne	r0, #6969	; 0x1b39
			if (uart_a_char_available) {
     fc4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
				*buf++ = uart_a_read;
     fc8:	3a0e0300 	bcc	381bd0 <__ccfg+0x361c28>
			uart_a_disable_int;
     fcc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fd0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			if (uart_a_char_available) {
     fd4:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
     fd8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
				uart_a_enable_int;
     fdc:	0b3a0b0b 	bleq	e83c10 <__ccfg+0xe63c68>
     fe0:	0b39053b 	bleq	e424d4 <__ccfg+0xe2252c>
				goto Redo_rx;
     fe4:	00001301 	andeq	r1, r0, r1, lsl #6
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fe8:	4900211e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sp}
     fec:	000b2f13 	andeq	r2, fp, r3, lsl pc
			return -2;
     ff0:	00341f00 	eorseq	r1, r4, r0, lsl #30
     ff4:	0b3a0e03 	bleq	e84808 <__ccfg+0xe64860>
				uart_a_write (*buf);
     ff8:	0b390b3b 	bleq	e43cec <__ccfg+0xe23d44>
     ffc:	0a021349 	beq	85d28 <__ccfg+0x65d80>
			while (len && uart_a_room_in_tx) {
    1000:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1004:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1008:	3b0b3a0e 	blcc	2cf848 <__ccfg+0x2af8a0>
			if (len != operation) {
    100c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			uart_a_disable_int;
    1010:	1201110c 	andne	r1, r1, #12, 2
    1014:	000a4001 	andeq	r4, sl, r1
			if (uart_a_room_in_tx) {
    1018:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    101c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				uart_a_enable_int;
    1020:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1024:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				*buf++ = uart_a_read;
    1028:	01111349 	tsteq	r1, r9, asr #6
			if (uart_a_room_in_tx) {
    102c:	0a400112 	beq	100147c <__ccfg+0xfe14d4>
				uart_a_write (*buf);
    1030:	00001301 	andeq	r1, r0, r1, lsl #6
    1034:	03000522 	movweq	r0, #1314	; 0x522
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1038:	3b0b3a08 	blcc	2cf860 <__ccfg+0x2af8b8>
    103c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			uart_a_enable_int;
    1040:	00060213 	andeq	r0, r6, r3, lsl r2
    1044:	011d2300 	tsteq	sp, r0, lsl #6
    1048:	01521331 	cmpeq	r2, r1, lsr r3
			return 0;
    104c:	0b580655 	bleq	16029a8 <__ccfg+0x15e2a00>
			if (len == UART_CNTRL_SETRATE) {
    1050:	0b570559 	bleq	15c25bc <__ccfg+0x15a2614>
				if (__pi_uart_setrate (*((word*)buf),
    1054:	05240000 	streq	r0, [r4, #-0]!
    1058:	02133100 	andseq	r3, r3, #0, 2
    105c:	25000006 	strcs	r0, [r0, #-6]
				syserror (EREQPAR, "uar");
    1060:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
			syserror (ENOOPER, "uai");
    1064:	34260000 	strtcc	r0, [r6], #-0
			if (len == UART_CNTRL_GETRATE) {
    1068:	02133100 	andseq	r3, r3, #0, 2
				return 1;
    106c:	27000006 	strcs	r0, [r0, -r6]
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1070:	0c3f012e 	ldfeqs	f0, [pc], #-184	; fc0 <ioreq_uart_a+0x38>
			syserror (ENOOPER, "uai");
    1074:	0b3a0e03 	bleq	e84888 <__ccfg+0xe648e0>
    1078:	0b39053b 	bleq	e4256c <__ccfg+0xe225c4>
    107c:	01110c27 	tsteq	r1, r7, lsr #24
    1080:	0a400112 	beq	10014d0 <__ccfg+0xfe1528>
    1084:	00001301 	andeq	r1, r0, r1, lsl #6
    1088:	03003428 	movweq	r3, #1064	; 0x428
    108c:	3b0b3a08 	blcc	2cf8b4 <__ccfg+0x2af90c>
    1090:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1094:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1098:	00342900 	eorseq	r2, r4, r0, lsl #18
void UART0IntHandler () {
    109c:	0b3a0803 	bleq	e830b0 <__ccfg+0xe63108>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10a0:	0b39053b 	bleq	e42594 <__ccfg+0xe225ec>
    10a4:	00001349 	andeq	r1, r0, r9, asr #6
    10a8:	0300342a 	movweq	r3, #1066	; 0x42a
    10ac:	3b0b3a08 	blcc	2cf8d4 <__ccfg+0x2af92c>
    10b0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10b4:	000a0213 	andeq	r0, sl, r3, lsl r2
    10b8:	00052b00 	andeq	r2, r5, r0, lsl #22
		RISE_N_SHINE;
    10bc:	0b3a0e03 	bleq	e848d0 <__ccfg+0xe64928>
    10c0:	0b39053b 	bleq	e425b4 <__ccfg+0xe2260c>
		i_trigger (devevent (UART_A, READ));
    10c4:	06021349 	streq	r1, [r2], -r9, asr #6
    10c8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    10cc:	030c3f01 	movweq	r3, #52993	; 0xcf01
    10d0:	3b0b3a0e 	blcc	2cf910 <__ccfg+0x2af968>
    10d4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    10d8:	2013490c 	andscs	r4, r3, ip, lsl #18
    10dc:	0013010b 	andseq	r0, r3, fp, lsl #2
    10e0:	00052d00 	andeq	r2, r5, r0, lsl #26
    10e4:	0b3a0e03 	bleq	e848f8 <__ccfg+0xe64950>
    10e8:	0b39053b 	bleq	e425dc <__ccfg+0xe22634>
    10ec:	00001349 	andeq	r1, r0, r9, asr #6
    10f0:	0300052e 	movweq	r0, #1326	; 0x52e
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10f4:	3b0b3a08 	blcc	2cf91c <__ccfg+0x2af974>
    10f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    10fc:	2f000013 	svccs	0x00000013
		i_trigger (devevent (UART_A, WRITE));
    1100:	0111010b 	tsteq	r1, fp, lsl #2
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1104:	00000112 	andeq	r0, r0, r2, lsl r1
    1108:	03003430 	movweq	r3, #1072	; 0x430
		RISE_N_SHINE;
    110c:	3b0b3a0e 	blcc	2cf94c <__ccfg+0x2af9a4>
    1110:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1114:	000a0213 	andeq	r0, sl, r3, lsl r2
		i_trigger (devevent (UART_A, WRITE));
    1118:	000a3100 	andeq	r3, sl, r0, lsl #2
    111c:	0b3a0e03 	bleq	e84930 <__ccfg+0xe64988>
    1120:	0b39053b 	bleq	e42614 <__ccfg+0xe2266c>
    1124:	00000111 	andeq	r0, r0, r1, lsl r1
    1128:	31011d32 	tstcc	r1, r2, lsr sp
    112c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1130:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1134:	000b5705 	andeq	r5, fp, r5, lsl #14
    1138:	00053300 	andeq	r3, r5, r0, lsl #6
    113c:	00001331 	andeq	r1, r0, r1, lsr r3
    1140:	03000534 	movweq	r0, #1332	; 0x534
}
    1144:	3b0b3a08 	blcc	2cf96c <__ccfg+0x2af9c4>
    1148:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    114c:	000a0213 	andeq	r0, sl, r3, lsl r2
    1150:	00183500 	andseq	r3, r8, r0, lsl #10
    1154:	34360000 	ldrtcc	r0, [r6], #-0
void __buttons_setirq (int val) {
    1158:	3a0e0300 	bcc	381d60 <__ccfg+0x361db8>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    115c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1160:	0013490b 	andseq	r4, r3, fp, lsl #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1164:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
    1168:	0b3a0803 	bleq	e8317c <__ccfg+0xe631d4>
    116c:	0b39053b 	bleq	e42660 <__ccfg+0xe226b8>
		bn = BUTTON_GPIO (__button_list [i]);
    1170:	13490c27 	movtne	r0, #39975	; 0x9c27
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	01120111 	tsteq	r2, r1, lsl r1
    1178:	13010a40 	movwne	r0, #6720	; 0x1a40
    117c:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    1180:	3a080301 	bcc	201d8c <__ccfg+0x1e1de4>
    1184:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1188:	110c270b 	tstne	ip, fp, lsl #14
}
    118c:	40011201 	andmi	r1, r1, r1, lsl #4
    1190:	0013010a 	andseq	r0, r3, sl, lsl #2
    1194:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
    1198:	0b3a0e03 	bleq	e849ac <__ccfg+0xe64a04>
void __pinlist_setirq (int val) {
    119c:	0b390b3b 	bleq	e43e90 <__ccfg+0xe23ee8>
	for (i = 0; i < N_PINLIST; i++) {
    11a0:	0b200c27 	bleq	804244 <__ccfg+0x7e429c>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11a4:	00001301 	andeq	r1, r0, r1, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a8:	0300053a 	movweq	r0, #1338	; 0x53a
	for (i = 0; i < N_PINLIST; i++) {
    11ac:	3b0b3a08 	blcc	2cf9d4 <__ccfg+0x2afa2c>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    11b4:	3b000013 	blcc	1208 <GPIOIntHandler+0x30>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11b8:	0e03012e 	adfeqsp	f0, f3, #0.5
    11bc:	0b3b0b3a 	bleq	ec3eac <__ccfg+0xea3f04>
    11c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	for (i = 0; i < N_PINLIST; i++) {
    11c4:	0b201349 	bleq	805ef0 <__ccfg+0x7e5f48>
}
    11c8:	00001301 	andeq	r1, r0, r1, lsl #6
    11cc:	0300343c 	movweq	r3, #1084	; 0x43c
    11d0:	3b0b3a08 	blcc	2cf9f8 <__ccfg+0x2afa50>
    11d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
void GPIOIntHandler () {
    11d8:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
if (buttons_int) {
    11dc:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
    11e0:	0b3b0b3a 	bleq	ec3ed0 <__ccfg+0xea3f28>
	buttons_disable ();
    11e4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    11e8:	13010b20 	movwne	r0, #6944	; 0x1b20
	i_trigger ((aword)&__button_list);
    11ec:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    11f0:	11133101 	tstne	r3, r1, lsl #2
    11f4:	40011201 	andmi	r1, r1, r1, lsl #4
    11f8:	0013010a 	andseq	r0, r3, sl, lsl #2
    11fc:	00053f00 	andeq	r3, r5, r0, lsl #30
    1200:	0a021331 	beq	85ecc <__ccfg+0x65f24>
    1204:	1d400000 	stclne	0, cr0, [r0, #-0]
    1208:	11133101 	tstne	r3, r1, lsl #2
    120c:	58011201 	stmdapl	r1, {r0, r9, ip}
    1210:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1214:	4100000b 	tstmi	r0, fp
	RISE_N_SHINE;
    1218:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    121c:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1220:	0b590b58 	bleq	1643f88 <__ccfg+0x1623fe0>
if (pin_sensor_int) {
    1224:	00000b57 	andeq	r0, r0, r7, asr fp
    1228:	31012e42 	tstcc	r1, r2, asr #28
	i_trigger ((aword)(&__input_pins));
    122c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1230:	000a4001 	andeq	r4, sl, r1
    1234:	00344300 	eorseq	r4, r4, r0, lsl #6
    1238:	00001331 	andeq	r1, r0, r1, lsr r3
    123c:	01110100 	tsteq	r1, r0, lsl #2
    1240:	0b130e25 	bleq	4c4adc <__ccfg+0x4a4b34>
    1244:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1248:	01110655 	tsteq	r1, r5, asr r6
    124c:	00000610 	andeq	r0, r0, r0, lsl r6
    1250:	0b002402 	bleq	a260 <__exidx_end+0x4620>
    1254:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	__pinsen_disable_and_clear;
    1258:	0300000e 	movweq	r0, #14
	RISE_N_SHINE;
    125c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1260:	0b3b0b3a 	bleq	ec3f50 <__ccfg+0xea3fa8>
    1264:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1268:	24040000 	strcs	r0, [r4], #-0
    126c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1270:	0008030b 	andeq	r0, r8, fp, lsl #6
    1274:	000f0500 	andeq	r0, pc, r0, lsl #10
    1278:	13490b0b 	movtne	r0, #39691	; 0x9b0b
void system_init () {
    127c:	26060000 	strcs	r0, [r6], -r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1280:	00134900 	andseq	r4, r3, r0, lsl #18
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1284:	00150700 	andseq	r0, r5, r0, lsl #14
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1288:	00000c27 	andeq	r0, r0, r7, lsr #24
    128c:	03003408 	movweq	r3, #1032	; 0x408
    1290:	3b0b3a0e 	blcc	2cfad0 <__ccfg+0x2afb28>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1294:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1298:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    129c:	0900000c 	stmdbeq	r0, {r2, r3}
    12a0:	13490101 	movtne	r0, #37121	; 0x9101
    12a4:	00001301 	andeq	r1, r0, r1, lsl #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12a8:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12ac:	000b2f13 	andeq	r2, fp, r3, lsl pc
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12b0:	00340b00 	eorseq	r0, r4, r0, lsl #22
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12b4:	0b3a0e03 	bleq	e84ac8 <__ccfg+0xe64b20>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12b8:	0b390b3b 	bleq	e43fac <__ccfg+0xe24004>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12bc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 11a0 <__pinlist_setirq+0x4>
		pin = (port_confs [i] >> 19) & 0x1f;
    12c0:	00000a02 	andeq	r0, r0, r2, lsl #20
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	03002e0c 	movweq	r2, #3596	; 0xe0c
		pin = (port_confs [i] >> 19) & 0x1f;
    12c8:	3b0b3a0e 	blcc	2cfb08 <__ccfg+0x2afb60>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12cc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    12d0:	1201110c 	andne	r1, r1, #12, 2
    12d4:	000a4001 	andeq	r4, sl, r1
    12d8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
		if (port_confs [i] & 0x80)
    12dc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12e0:	0b3b0b3a 	bleq	ec3fd0 <__ccfg+0xea4028>
    12e4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		if (port_confs [i] & 0x40)
    12e8:	01120111 	tsteq	r2, r1, lsl r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ec:	00000a40 	andeq	r0, r0, r0, asr #20
    12f0:	0300340e 	movweq	r3, #1038	; 0x40e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f4:	3b0b3a0e 	blcc	2cfb34 <__ccfg+0x2afb8c>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12fc:	00060213 	andeq	r0, r6, r3, lsl r2
	all_leds_blink;
    1300:	11010000 	mrsne	r0, (UNDEF: 1)
    1304:	130e2501 	movwne	r2, #58625	; 0xe501
    1308:	1b0e030b 	blne	381f3c <__ccfg+0x361f94>
    130c:	0006100e 	andeq	r1, r6, lr
    1310:	00240200 	eoreq	r0, r4, r0, lsl #4
    1314:	0b3e0b0b 	bleq	f83f48 <__ccfg+0xf63fa0>
    1318:	00000e03 	andeq	r0, r0, r3, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    131c:	03001603 	movweq	r1, #1539	; 0x603
    1320:	3b0b3a0e 	blcc	2cfb60 <__ccfg+0x2afbb8>
    1324:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1328:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    132c:	0b0b0024 	bleq	2c13c4 <__ccfg+0x2a141c>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1330:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1334:	13050000 	movwne	r0, #20480	; 0x5000
    1338:	3a0b0b01 	bcc	2c3f44 <__ccfg+0x2a3f9c>
	IntEnable (INT_AON_RTC_COMB);
    133c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1340:	0013010b 	andseq	r0, r3, fp, lsl #2
    1344:	000d0600 	andeq	r0, sp, r0, lsl #12
	__pi_malloc_init ();
    1348:	0b3a0e03 	bleq	e84b5c <__ccfg+0xe64bb4>
	IntEnable (INT_AON_GPIO_EDGE);
    134c:	0b390b3b 	bleq	e44040 <__ccfg+0xe24098>
    1350:	0b381349 	bleq	e0607c <__ccfg+0xde60d4>
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1354:	26070000 	strcs	r0, [r7], -r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1358:	00134900 	andseq	r4, r3, r0, lsl #18
    135c:	00340800 	eorseq	r0, r4, r0, lsl #16
    1360:	0b3a0e03 	bleq	e84b74 <__ccfg+0xe64bcc>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1364:	0b390b3b 	bleq	e44058 <__ccfg+0xe240b0>
    1368:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 124c <GPIOIntHandler+0x74>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    136c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1370:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    1374:	0a000013 	beq	13c8 <system_init+0x14c>
	urates [0] = UART_RATE / 100;
    1378:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    137c:	0b3b0b3a 	bleq	ec406c <__ccfg+0xea40c4>
	reinit_uart ();
    1380:	13490b39 	movtne	r0, #39737	; 0x9b39
	EXTRA_INITIALIZERS;
    1384:	0b0d0b0b 	bleq	343fb8 <__ccfg+0x324010>
    1388:	0b380b0c 	bleq	e03fc0 <__ccfg+0xde4018>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    138c:	0f0b0000 	svceq	0x000b0000
    1390:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1394:	0c000013 	stceq	0, cr0, [r0], {19}
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1398:	13490101 	movtne	r0, #37121	; 0x9101
    139c:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	0000210d 	andeq	r2, r0, sp, lsl #2
    13a4:	00160e00 	andseq	r0, r6, r0, lsl #28
			devinit [i] . init (devinit [i] . param);
    13a8:	0b3a0e03 	bleq	e84bbc <__ccfg+0xe64c14>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13ac:	0b39053b 	bleq	e428a0 <__ccfg+0xe228f8>
    13b0:	00001349 	andeq	r1, r0, r9, asr #6
    13b4:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
	IntEnable (INT_UART0_COMB);
    13b8:	0013010c 	andseq	r0, r3, ip, lsl #2
    13bc:	00051000 	andeq	r1, r5, r0
}
    13c0:	00001349 	andeq	r1, r0, r9, asr #6
	tci_run_auxiliary_timer ();
    13c4:	03003411 	movweq	r3, #1041	; 0x411
		diag ("");
    13c8:	3b0b3a0e 	blcc	2cfc08 <__ccfg+0x2afc60>
    13cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    13d0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13d4:	1200000c 	andne	r0, r0, #12
		diag ("Leftover RAM: %d bytes",
    13d8:	0b0b0113 	bleq	2c182c <__ccfg+0x2a1884>
    13dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    13e0:	13010b39 	movwne	r0, #6969	; 0x1b39
    13e4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    13e8:	3a0e0300 	bcc	381ff0 <__ccfg+0x362048>
    13ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    13f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    13f4:	1400000b 	strne	r0, [r0], #-11
    13f8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    13fc:	0b3a0b0b 	bleq	e84030 <__ccfg+0xe64088>
    1400:	0b39053b 	bleq	e428f4 <__ccfg+0xe2294c>
    1404:	00001301 	andeq	r1, r0, r1, lsl #6
    1408:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    140c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1410:	00341600 	eorseq	r1, r4, r0, lsl #12
    1414:	0b3a1347 	bleq	e86138 <__ccfg+0xe66190>
    1418:	0b39053b 	bleq	e4290c <__ccfg+0xe22964>
    141c:	00000a02 	andeq	r0, r0, r2, lsl #20
    1420:	01110100 	tsteq	r1, r0, lsl #2
    1424:	0b130e25 	bleq	4c4cc0 <__ccfg+0x4a4d18>
    1428:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    142c:	01110655 	tsteq	r1, r5, asr r6
    1430:	00000610 	andeq	r0, r0, r0, lsl r6
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1434:	0b002402 	bleq	a444 <__exidx_end+0x4804>
    1438:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    143c:	0300000e 	movweq	r0, #14
    1440:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1444:	0b3b0b3a 	bleq	ec4134 <__ccfg+0xea418c>
    1448:	13490b39 	movtne	r0, #39737	; 0x9b39
    144c:	24040000 	strcs	r0, [r4], #-0
    1450:	3e0b0b00 	vmlacc.f64	d0, d11, d0
}
    1454:	0008030b 	andeq	r0, r8, fp, lsl #6
__attribute__ ((noreturn)) void __pi_release () {
    1458:	00260500 	eoreq	r0, r6, r0, lsl #10
    145c:	00001349 	andeq	r1, r0, r9, asr #6
    1460:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1464:	07000013 	smladeq	r0, r3, r0, r0
	check_stack_overflow;
    1468:	0b0b000f 	bleq	2c14ac <__ccfg+0x2a1504>
    146c:	00001349 	andeq	r1, r0, r9, asr #6
    1470:	0b011308 	bleq	46098 <__ccfg+0x260f0>
	update_n_wake (MAX_WORD, NO);
    1474:	3b0b3a0b 	blcc	2cfca8 <__ccfg+0x2afd00>
    1478:	010b390b 	tsteq	fp, fp, lsl #18
    147c:	09000013 	stmdbeq	r0, {r0, r1, r4}
	for_all_tasks (__pi_curr) {
    1480:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1484:	0b3b0b3a 	bleq	ec4174 <__ccfg+0xea41cc>
    1488:	13490b39 	movtne	r0, #39737	; 0x9b39
  __ASM volatile ("cpsid i" : : : "memory");
    148c:	0b0d0b0b 	bleq	3440c0 <__ccfg+0x324118>
	__SLEEP;
    1490:	0b380b0c 	bleq	e040c8 <__ccfg+0xde4120>
    1494:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    1498:	3a0e0300 	bcc	3820a0 <__ccfg+0x3620f8>
    149c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	system_event_count ++;
    14a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    14a4:	0b00000b 	bleq	14d8 <__pi_release+0x80>
	switch (__pi_systat.effpdm) {
    14a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14ac:	0b3b0b3a 	bleq	ec419c <__ccfg+0xea41f4>
    14b0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14b4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			__WFI ();
    14b8:	010c0000 	mrseq	r0, (UNDEF: 12)
    14bc:	01134901 	tsteq	r3, r1, lsl #18
    14c0:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	check_stack_overflow;
    14c4:	00000021 	andeq	r0, r0, r1, lsr #32
    14c8:	0300160e 	movweq	r1, #1550	; 0x60e
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    14cc:	3b0b3a0e 	blcc	2cfd0c <__ccfg+0x2afd64>
    14d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			(__pi_curr->code) (tstate (__pi_curr));
    14d4:	0f000013 	svceq	0x00000013
			goto Redo;
    14d8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	for_all_tasks (__pi_curr) {
    14dc:	00001301 	andeq	r1, r0, r1, lsl #6
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14e0:	49000510 	stmdbmi	r0, {r4, r8, sl}
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14e4:	11000013 	tstne	r0, r3, lsl r0
    14e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14f0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14f4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14f8:	13120000 	tstne	r2, #0
    14fc:	3a0b0b01 	bcc	2c4108 <__ccfg+0x2a4160>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1500:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1504:	0013010b 	andseq	r0, r3, fp, lsl #2
			__WFI ();
    1508:	000d1300 	andeq	r1, sp, r0, lsl #6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    150c:	0b3a0e03 	bleq	e84d20 <__ccfg+0xe64d78>
    1510:	0b39053b 	bleq	e42a04 <__ccfg+0xe22a5c>
}
    1514:	0b381349 	bleq	e06240 <__ccfg+0xde6298>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1518:	13140000 	tstne	r4, #0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    151c:	0b0e0301 	bleq	382128 <__ccfg+0x362180>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1520:	3b0b3a0b 	blcc	2cfd54 <__ccfg+0x2afdac>
    1524:	010b3905 	tsteq	fp, r5, lsl #18
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1528:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    152c:	13490021 	movtne	r0, #36897	; 0x9021
    1530:	00000b2f 	andeq	r0, r0, pc, lsr #22
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1534:	47003416 	smladmi	r0, r6, r4, r3
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1538:	3b0b3a13 	blcc	2cfd8c <__ccfg+0x2afde4>
    153c:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
    1540:	1700000a 	strne	r0, [r0, -sl]
    1544:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1494 <__pi_release+0x3c>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1548:	0b3a0e03 	bleq	e84d5c <__ccfg+0xe64db4>
    154c:	0b390b3b 	bleq	e44240 <__ccfg+0xe24298>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1550:	01110c27 	tsteq	r1, r7, lsr #24
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1554:	0a400112 	beq	10019a4 <__ccfg+0xfe19fc>
    1558:	00001301 	andeq	r1, r0, r1, lsl #6
    155c:	03000518 	movweq	r0, #1304	; 0x518
    1560:	3b0b3a08 	blcc	2cfd88 <__ccfg+0x2afde0>
    1564:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			SysCtrlSetRechargeBeforePowerDown
    1568:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    156c:	00051900 	andeq	r1, r5, r0, lsl #18
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1570:	0b3a0e03 	bleq	e84d84 <__ccfg+0xe64ddc>
    1574:	0b390b3b 	bleq	e44268 <__ccfg+0xe242c0>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1578:	06021349 	streq	r1, [r2], -r9, asr #6
    157c:	341a0000 	ldrcc	r0, [sl], #-0
    1580:	3a080300 	bcc	202188 <__ccfg+0x1e21e0>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1584:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1588:	0013490b 	andseq	r4, r3, fp, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    158c:	00341b00 	eorseq	r1, r4, r0, lsl #22
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1590:	0b3a0803 	bleq	e835a4 <__ccfg+0xe635fc>
    1594:	0b390b3b 	bleq	e44288 <__ccfg+0xe242e0>
    1598:	06021349 	streq	r1, [r2], -r9, asr #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    159c:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
			while (!(AONWUCPowerStatusGet () &
    15a0:	11133100 	tstne	r3, r0, lsl #2
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15a4:	58011201 	stmdapl	r1, {r0, r9, ip}
    15a8:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    15ac:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    15b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
    15b8:	0b590b58 	bleq	1644320 <__ccfg+0x1624378>
    15bc:	00000b57 	andeq	r0, r0, r7, asr fp
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15c0:	3100051e 	tstcc	r0, lr, lsl r5
    15c4:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    15c8:	002e1f00 	eoreq	r1, lr, r0, lsl #30
    15cc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			SysCtrlAdjustRechargeAfterPowerDown ();
    15d0:	0b3b0b3a 	bleq	ec42c0 <__ccfg+0xea4318>
			reinit_uart ();
    15d4:	01110b39 	tsteq	r1, r9, lsr fp
    15d8:	0a400112 	beq	1001a28 <__ccfg+0xfe1a80>
    15dc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
}
    15e0:	3a0e0300 	bcc	3821e8 <__ccfg+0x362240>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15e8:	200c270b 	andcs	r2, ip, fp, lsl #14
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15ec:	2100000b 	tstcs	r0, fp
    15f0:	0e03012e 	adfeqsp	f0, f3, #0.5
    15f4:	0b3b0b3a 	bleq	ec42e4 <__ccfg+0xea433c>
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15f8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    15fc:	0b201349 	bleq	806328 <__ccfg+0x7e6380>
    1600:	05220000 	streq	r0, [r2, #-0]!
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1604:	3a0e0300 	bcc	38220c <__ccfg+0x362264>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1608:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    160c:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1610:	11010000 	mrsne	r0, (UNDEF: 1)
    1614:	130e2501 	movwne	r2, #58625	; 0xe501
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1618:	1b0e030b 	blne	38224c <__ccfg+0x3622a4>
    161c:	1106550e 	tstne	r6, lr, lsl #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1620:	00061001 	andeq	r1, r6, r1
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1624:	00240200 	eoreq	r0, r4, r0, lsl #4
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1628:	0b3e0b0b 	bleq	f8425c <__ccfg+0xf642b4>
    162c:	00000e03 	andeq	r0, r0, r3, lsl #28
			PRCMPowerDomainOff (
    1630:	03001603 	movweq	r1, #1539	; 0x603
    1634:	3b0b3a0e 	blcc	2cfe74 <__ccfg+0x2afecc>
	__SLEEP;
    1638:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    163c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  __ASM volatile ("cpsie i" : : : "memory");
    1640:	0b0b0024 	bleq	2c16d8 <__ccfg+0x2a1730>
	goto Redo;
    1644:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1648:	26050000 	strcs	r0, [r5], -r0
    164c:	00134900 	andseq	r4, r3, r0, lsl #18
    1650:	00350600 	eorseq	r0, r5, r0, lsl #12
    1654:	00001349 	andeq	r1, r0, r9, asr #6
    1658:	0b011307 	bleq	4627c <__ccfg+0x262d4>
    165c:	3b0b3a0b 	blcc	2cfe90 <__ccfg+0x2afee8>
    1660:	010b390b 	tsteq	fp, fp, lsl #18
    1664:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1668:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    166c:	0b3b0b3a 	bleq	ec435c <__ccfg+0xea43b4>
    1670:	13490b39 	movtne	r0, #39737	; 0x9b39
    1674:	0b0d0b0b 	bleq	3442a8 <__ccfg+0x324300>
    1678:	0b380b0c 	bleq	e042b0 <__ccfg+0xde4308>
    167c:	0d090000 	stceq	0, cr0, [r9, #-0]
    1680:	3a0e0300 	bcc	382288 <__ccfg+0x3622e0>
    1684:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1688:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    168c:	0a00000b 	beq	16c0 <halt+0x10>
    1690:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1694:	0b3b0b3a 	bleq	ec4384 <__ccfg+0xea43dc>
    1698:	13490b39 	movtne	r0, #39737	; 0x9b39
    169c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    16a0:	0f0b0000 	svceq	0x000b0000
    16a4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    16a8:	0c000013 	stceq	0, cr0, [r0], {19}
    16ac:	13490101 	movtne	r0, #37121	; 0x9101
	cli_tim;
    16b0:	00001301 	andeq	r1, r0, r1, lsl #6
    16b4:	0000210d 	andeq	r2, r0, sp, lsl #2
    16b8:	00160e00 	andseq	r0, r6, r0, lsl #28
	diag ("PicOS halted");
    16bc:	0b3a0e03 	bleq	e84ed0 <__ccfg+0xe64f28>
	mdelay (500);
    16c0:	0b39053b 	bleq	e42bb4 <__ccfg+0xe22c0c>
    16c4:	00001349 	andeq	r1, r0, r9, asr #6
	setpowermode (2);
    16c8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
	__PCB = NULL;
    16cc:	0013010c 	andseq	r0, r3, ip, lsl #2
	release;
    16d0:	00051000 	andeq	r1, r5, r0
    16d4:	00001349 	andeq	r1, r0, r9, asr #6
    16d8:	03003411 	movweq	r3, #1041	; 0x411
    16dc:	3b0b3a0e 	blcc	2cff1c <__ccfg+0x2aff74>
int main (void) {
    16e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16e4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    16e8:	1200000c 	andne	r0, r0, #12
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16ec:	0b0b0113 	bleq	2c1b40 <__ccfg+0x2a1b98>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	system_init ();
    16f4:	13010b39 	movwne	r0, #6969	; 0x1b39
	tcv_init ();
    16f8:	0d130000 	ldceq	0, cr0, [r3, #-0]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16fc:	3a0e0300 	bcc	382304 <__ccfg+0x36235c>
    1700:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1704:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1708:	1400000b 	strne	r0, [r0], #-11
    170c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1710:	0b3a0b0b 	bleq	e84344 <__ccfg+0xe6439c>
    1714:	0b39053b 	bleq	e42c08 <__ccfg+0xe22c60>
	delay (16, 0);
    1718:	00001301 	andeq	r1, r0, r1, lsl #6
    171c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1720:	000b2f13 	andeq	r2, fp, r3, lsl pc
	__pi_release ();
    1724:	00341600 	eorseq	r1, r4, r0, lsl #12
    1728:	0b3a0e03 	bleq	e84f3c <__ccfg+0xe64f94>
    172c:	0b390b3b 	bleq	e44420 <__ccfg+0xe24478>
    1730:	0a021349 	beq	8645c <__ccfg+0x664b4>
    1734:	34170000 	ldrcc	r0, [r7], #-0
    1738:	3a134700 	bcc	4d3340 <__ccfg+0x4b3398>
    173c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
static void killev (__pi_pcb_t *pid) {
    1740:	000a020b 	andeq	r0, sl, fp, lsl #4
	wfun = (aword)(pid->code);
    1744:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
	for_all_tasks (i) {
    1748:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		for (j = 0; j < nevents (i); j++) {
    174c:	0b3b0b3a 	bleq	ec443c <__ccfg+0xea4494>
    1750:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1754:	01120111 	tsteq	r2, r1, lsl r1
			    || i->Events [j] . Event == wfun
    1758:	13010a40 	movwne	r0, #6720	; 0x1a40
		for (j = 0; j < nevents (i); j++) {
    175c:	05190000 	ldreq	r0, [r9, #-0]
			if (i->Events [j] . Event == (aword)pid
    1760:	3a080300 	bcc	202368 <__ccfg+0x1e23c0>
    1764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1768:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				wakeupev (i, j);
    176c:	1a000006 	bne	178c <qfree+0x10>
    1770:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	for_all_tasks (i) {
    1774:	0b3b0b3a 	bleq	ec4464 <__ccfg+0xea44bc>
}
    1778:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    177c:	00000602 	andeq	r0, r0, r2, lsl #12
static void qfree (aword *ch) {
    1780:	03000a1b 	movweq	r0, #2587	; 0xa1b
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	3b0b3a0e 	blcc	2cffc4 <__ccfg+0x2b001c>
	cc = (aword*)(mpools + MA_NP);
    1788:	110b390b 	tstne	fp, fp, lsl #18
	m_setnextp (ch, chunk);
    178c:	1c000001 	stcne	0, cr0, [r0], {1}
	m_setnextp (cc, ch);
    1790:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
    1794:	06550152 			; <UNDEFINED> instruction: 0x06550152
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1798:	0b590b58 	bleq	1644500 <__ccfg+0x1624558>
    179c:	13010b57 	movwne	r0, #6999	; 0x1b57
    17a0:	051d0000 	ldreq	r0, [sp, #-0]
			m_setnextp (cc, m_nextp (chunk));
    17a4:	00133100 	andseq	r3, r3, r0, lsl #2
			m_size (chunk) += m_hdrlen + m_size (ch);
    17a8:	011d1e00 	tsteq	sp, r0, lsl #28
    17ac:	01521331 	cmpeq	r2, r1, lsr r3
    17b0:	0b580655 	bleq	160310c <__ccfg+0x15e3164>
    17b4:	0b570b59 	bleq	15c4520 <__ccfg+0x15a4578>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17bc:	3a0e0301 	bcc	3823c8 <__ccfg+0x362420>
    17c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17c4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			m_setnextp (cc, m_nextp (chunk));
    17c8:	000b2013 	andeq	r2, fp, r3, lsl r0
			m_size (ch) += m_hdrlen + m_size (chunk);
    17cc:	00052000 	andeq	r2, r5, r0
    17d0:	0b3a0e03 	bleq	e84fe4 <__ccfg+0xe6503c>
    17d4:	0b390b3b 	bleq	e444c8 <__ccfg+0xe24520>
    17d8:	00001349 	andeq	r1, r0, r9, asr #6
    17dc:	01110100 	tsteq	r1, r0, lsl #2
    17e0:	0b130e25 	bleq	4c507c <__ccfg+0x4a50d4>
			if (m_size (chunk) >= m_size (ch))
    17e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    17e8:	01110655 	tsteq	r1, r5, asr r6
    17ec:	00000610 	andeq	r0, r0, r0, lsl r6
		chunk = m_nextp (chunk))
    17f0:	0b002402 	bleq	a800 <__exidx_end+0x4bc0>
    17f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    17f8:	0300000e 	movweq	r0, #14
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	diag_wait (a);
    1800:	0b3b0b3a 	bleq	ec44f0 <__ccfg+0xea4548>
	diag_wchar (c, a);
    1804:	13490b39 	movtne	r0, #39737	; 0x9b39
    1808:	24040000 	strcs	r0, [r4], #-0
}
    180c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1810:	0008030b 	andeq	r0, r8, fp, lsl #6
	syserror (ESTATE, "state");
    1814:	00260500 	eoreq	r0, r6, r0, lsl #10
    1818:	00001349 	andeq	r1, r0, r9, asr #6
    181c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1820:	07000013 	smladeq	r0, r3, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    1824:	0b0b0113 	bleq	2c1c78 <__ccfg+0x2a1cd0>
void utimer_add (address ut) {
    1828:	0b3b0b3a 	bleq	ec4518 <__ccfg+0xea4570>
    182c:	13010b39 	movwne	r0, #6969	; 0x1b39
		if (__pi_utims [i] == NULL)
    1830:	0d080000 	stceq	0, cr0, [r8, #-0]
	for (i = 0; i < MAX_UTIMERS; i++)
    1834:	3a0e0300 	bcc	38243c <__ccfg+0x362494>
    1838:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (ERESOURCE, "ut a");
    183c:	0b13490b 	bleq	4d3c70 <__ccfg+0x4b3cc8>
	__pi_utims [i] = ut;
    1840:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
}
    1844:	000b380b 	andeq	r3, fp, fp, lsl #16
    1848:	000d0900 	andeq	r0, sp, r0, lsl #18
    184c:	0b3a0e03 	bleq	e85060 <__ccfg+0xe650b8>
	*t = v;
    1850:	0b390b3b 	bleq	e44544 <__ccfg+0xe2459c>
	TCI_RUN_AUXILIARY_TIMER;
    1854:	0b381349 	bleq	e06580 <__ccfg+0xde65d8>
void update_n_wake (word min, Boolean force) {
    1858:	340a0000 	strcc	r0, [sl], #-0
	if (TCI_UPDATE_DELAY_TICKS (force))
    185c:	3a0e0300 	bcc	382464 <__ccfg+0x3624bc>
    1860:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1864:	3f13490b 	svccc	0x0013490b
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1868:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    186c:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1870:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1874:	010c0000 	mrseq	r0, (UNDEF: 12)
    1878:	01134901 	tsteq	r3, r1, lsl #18
    187c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1880:	00000021 	andeq	r0, r0, r1, lsr #32
    1884:	0300160e 	movweq	r1, #1550	; 0x60e
    1888:	3b0b3a0e 	blcc	2d00c8 <__ccfg+0x2b0120>
    188c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1890:	0f000013 	svceq	0x00000013
    1894:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1898:	00001301 	andeq	r1, r0, r1, lsl #6
		for_all_tasks (i) {
    189c:	49000510 	stmdbmi	r0, {r4, r8, sl}
	__pi_mintk = znew + min;
    18a0:	11000013 	tstne	r0, r3, lsl r0
    18a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			if (!twaiting (i))
    18a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18ac:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18b0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    18b4:	13120000 	tstne	r2, #0
    18b8:	3a0b0b01 	bcc	2c44c4 <__ccfg+0x2a451c>
    18bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18c0:	0013010b 	andseq	r0, r3, fp, lsl #2
    18c4:	000d1300 	andeq	r1, sp, r0, lsl #6
    18c8:	0b3a0e03 	bleq	e850dc <__ccfg+0xe65134>
    18cc:	0b39053b 	bleq	e42dc0 <__ccfg+0xe22e18>
    18d0:	0b381349 	bleq	e065fc <__ccfg+0xde6654>
    18d4:	13140000 	tstne	r4, #0
    18d8:	0b0e0301 	bleq	3824e4 <__ccfg+0x36253c>
    18dc:	3b0b3a0b 	blcc	2d0110 <__ccfg+0x2b0168>
				wakeuptm (i);
    18e0:	010b3905 	tsteq	fp, r5, lsl #18
    18e4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
		for_all_tasks (i) {
    18e8:	13490021 	movtne	r0, #36897	; 0x9021
				d = i->Timer - znew;
    18ec:	00000b2f 	andeq	r0, r0, pc, lsr #22
    18f0:	03003416 	movweq	r3, #1046	; 0x416
    18f4:	3b0b3a0e 	blcc	2d0134 <__ccfg+0x2b018c>
		if ((word)(__pi_mintk - znew) < min) 
    18f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    18fc:	000a0213 	andeq	r0, sl, r3, lsl r2
    1900:	002e1700 	eoreq	r1, lr, r0, lsl #14
	__pi_old = znew;
    1904:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
}
    1908:	0b3b0b3a 	bleq	ec45f8 <__ccfg+0xea4650>
	TCI_RUN_DELAY_TIMER;
    190c:	01110b39 	tsteq	r1, r9, lsr fp
}
    1910:	0a400112 	beq	1001d60 <__ccfg+0xfe1db8>
    1914:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    1918:	030c3f01 	movweq	r3, #52993	; 0xcf01
    191c:	3b0b3a0e 	blcc	2d015c <__ccfg+0x2b01b4>
    1920:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
void proceed (word state) {
    1924:	1113490c 	tstne	r3, ip, lsl #18
	prcdstate (__pi_curr, state);
    1928:	40011201 	andmi	r1, r1, r1, lsl #4
    192c:	0013010a 	andseq	r0, r3, sl, lsl #2
	release;
    1930:	00051900 	andeq	r1, r5, r0, lsl #18
    1934:	0b3a0803 	bleq	e83948 <__ccfg+0xe639a0>
void __pi_wait (aword event, word state) {
    1938:	0b390b3b 	bleq	e4462c <__ccfg+0xe24684>
	sint j = nevents (__pi_curr);
    193c:	06021349 	streq	r1, [r2], -r9, asr #6
	if (j >= MAX_EVENTS_PER_TASK)
    1940:	051a0000 	ldreq	r0, [sl, #-0]
    1944:	3a080300 	bcc	20254c <__ccfg+0x1e25a4>
    1948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (ENEVENTS, "sw");
    194c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1950:	1b00000a 	blne	1980 <__pi_trigger+0x14>
	setestate (__pi_curr->Events [j], state, event);
    1954:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 18a4 <update_n_wake+0x4c>
	incwait (__pi_curr);
    1958:	0b3a0e03 	bleq	e8516c <__ccfg+0xe651c4>
	setestate (__pi_curr->Events [j], state, event);
    195c:	0b39053b 	bleq	e42e50 <__ccfg+0xe22ea8>
}
    1960:	13490c27 	movtne	r0, #39975	; 0x9c27
    1964:	01120111 	tsteq	r2, r1, lsl r1
    1968:	13010a40 	movwne	r0, #6720	; 0x1a40
void __pi_trigger (aword event) {
    196c:	051c0000 	ldreq	r0, [ip, #-0]
	for_all_tasks (i) {
    1970:	3a080300 	bcc	202578 <__ccfg+0x1e25d0>
		for (j = 0; j < nevents (i); j++) {
    1974:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1978:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    197c:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    1980:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 18d0 <update_n_wake+0x78>
			if (i->Events [j] . Event == event) {
    1984:	0b3a0e03 	bleq	e85198 <__ccfg+0xe651f0>
    1988:	0b39053b 	bleq	e42e7c <__ccfg+0xe22ed4>
    198c:	01120111 	tsteq	r2, r1, lsl r1
				wakeupev (i, j);
    1990:	00000a40 	andeq	r0, r0, r0, asr #20
    1994:	0300341e 	movweq	r3, #1054	; 0x41e
	for_all_tasks (i) {
    1998:	3b0b3a08 	blcc	2d01c0 <__ccfg+0x2b0218>
}
    199c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
aword __pi_join (aword pid, word st) {
    19a0:	00060213 	andeq	r0, r6, r3, lsl r2
	for_all_tasks (i) {
    19a4:	000a1f00 	andeq	r1, sl, r0, lsl #30
    19a8:	0b3a0e03 	bleq	e851bc <__ccfg+0xe65214>
	return 0;
    19ac:	0b39053b 	bleq	e42ea0 <__ccfg+0xe22ef8>
		if ((aword)i == pid) {
    19b0:	00000111 	andeq	r0, r0, r1, lsl r1
			__pi_wait (pid, st);
    19b4:	31011d20 	tstcc	r1, r0, lsr #26
}
    19b8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	for_all_tasks (i) {
    19bc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    19c0:	010b5705 	tsteq	fp, r5, lsl #14
void delay (word d, word state) {
    19c4:	21000013 	tstcs	r0, r3, lsl r0
	settstate (__pi_curr, state);
    19c8:	13310005 	teqne	r1, #5
    19cc:	1d220000 	stcne	0, cr0, [r2, #-0]
    19d0:	11133101 	tstne	r3, r1, lsl #2
    19d4:	58011201 	stmdapl	r1, {r0, r9, ip}
	update_n_wake (d, YES);
    19d8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    19dc:	2300000b 	movwcs	r0, #11
	__pi_curr->Timer = __pi_old + d;
    19e0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    19e4:	0b3b0b3a 	bleq	ec46d4 <__ccfg+0xea472c>
	inctimer (__pi_curr);
    19e8:	13490b39 	movtne	r0, #39737	; 0x9b39
    19ec:	00000602 	andeq	r0, r0, r2, lsl #12
    19f0:	03000a24 	movweq	r0, #2596	; 0xa24
}
    19f4:	3b0b3a0e 	blcc	2d0234 <__ccfg+0x2b028c>
    19f8:	110b390b 	tstne	fp, fp, lsl #18
	if (fun == NULL)
    19fc:	25000001 	strcs	r0, [r0, #-1]
		return (int) __pi_curr;
    1a00:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1a04:	06550152 			; <UNDEFINED> instruction: 0x06550152
	for_all_tasks (i)
    1a08:	0b590b58 	bleq	1644770 <__ccfg+0x16247c8>
}
    1a0c:	00000b57 	andeq	r0, r0, r7, asr fp
		if (i->code == fun)
    1a10:	31000526 	tstcc	r0, r6, lsr #10
	for_all_tasks (i)
    1a14:	00060213 	andeq	r0, r6, r3, lsl r2
    1a18:	011d2700 	tsteq	sp, r0, lsl #14
    1a1c:	01521331 	cmpeq	r2, r1, lsr r3
int __pi_strlen (const char *s) {
    1a20:	0b580655 	bleq	160337c <__ccfg+0x15e33d4>
	for (i = 0; *(s+i) != '\0'; i++);
    1a24:	0b570b59 	bleq	15c4790 <__ccfg+0x15a47e8>
}
    1a28:	00001301 	andeq	r1, r0, r1, lsl #6
	for (i = 0; *(s+i) != '\0'; i++);
    1a2c:	31011d28 	tstcc	r1, r8, lsr #26
	while ((Boolean)(*d++ = *s++));
    1a30:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a34:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1a38:	000b570b 	andeq	r5, fp, fp, lsl #14
}
    1a3c:	002e2900 	eoreq	r2, lr, r0, lsl #18
	while (n-- && (*s != '\0'))
    1a40:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1a44:	0b3b0b3a 	bleq	ec4734 <__ccfg+0xea478c>
	*d = '\0';
    1a48:	13490b39 	movtne	r0, #39737	; 0x9b39
	while (n-- && (*s != '\0'))
    1a4c:	01120111 	tsteq	r2, r1, lsl r1
    1a50:	00000a40 	andeq	r0, r0, r0, asr #20
		*d++ = *s++;
    1a54:	03012e2a 	movweq	r2, #7722	; 0x1e2a
    1a58:	3b0b3a0e 	blcc	2d0298 <__ccfg+0x2b02f0>
	while (n--)
    1a5c:	110b390b 	tstne	fp, fp, lsl #18
    1a60:	40011201 	andmi	r1, r1, r1, lsl #4
		*dest++ = *src++;
    1a64:	0013010a 	andseq	r0, r3, sl, lsl #2
    1a68:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    1a6c:	0b3a0e03 	bleq	e85280 <__ccfg+0xe652d8>
	while (n--)
    1a70:	0b390b3b 	bleq	e44764 <__ccfg+0xe247bc>
}
    1a74:	00000b20 	andeq	r0, r0, r0, lsr #22
		*dest++ = c;
    1a78:	03012e2c 	movweq	r2, #7724	; 0x1e2c
void adddevfunc (devreqfun_t rf, int loc) {
    1a7c:	3b0b3a0e 	blcc	2d02bc <__ccfg+0x2b0314>
		syserror (EREQPAR, "addv");
    1a80:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		syserror (ERESOURCE, "addv");
    1a84:	1201110c 	andne	r1, r1, #12, 2
	if (ioreq [loc] != NULL)
    1a88:	010a4001 	tsteq	sl, r1
    1a8c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
		syserror (ERESOURCE, "addv");
    1a90:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	ioreq [loc] = rf;
    1a94:	342e0000 	strtcc	r0, [lr], #-0
}
    1a98:	02133100 	andseq	r3, r3, #0, 2
    1a9c:	2f000006 	svccs	0x00000006
sint io (word retry, word dev, word operation, char *buf, word len) {
    1aa0:	0e03012e 	adfeqsp	f0, f3, #0.5
    1aa4:	0b3b0b3a 	bleq	ec4794 <__ccfg+0xea47ec>
    1aa8:	13490b39 	movtne	r0, #39737	; 0x9b39
    1aac:	13010b20 	movwne	r0, #6944	; 0x1b20
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ab0:	34300000 	ldrtcc	r0, [r0], #-0
    1ab4:	3a080300 	bcc	2026bc <__ccfg+0x1e2714>
    1ab8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (ENODEVICE, "io");
    1abc:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ac0:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
	if (len == 0)
    1ac4:	0b3a0e03 	bleq	e852d8 <__ccfg+0xe65330>
	ret = (ioreq [dev]) (operation, buf, len);
    1ac8:	0b390b3b 	bleq	e447bc <__ccfg+0xe24814>
    1acc:	0b200c27 	bleq	804b70 <__ccfg+0x7e4bc8>
	if (ret >= 0)
    1ad0:	00001301 	andeq	r1, r0, r1, lsl #6
	if (ret == -1) {
    1ad4:	03000532 	movweq	r0, #1330	; 0x532
    1ad8:	3b0b3a08 	blcc	2d0300 <__ccfg+0x2b0358>
		if (retry == WNONE)
    1adc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		iowait (dev, operation, retry);
    1ae0:	33000013 	movwcc	r0, #19
    1ae4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1ae8:	01120111 	tsteq	r2, r1, lsl r1
			release;
    1aec:	0b590b58 	bleq	1644854 <__ccfg+0x16248ac>
	if (ret == -2) {
    1af0:	13010b57 	movwne	r0, #6999	; 0x1b57
		if (retry != WNONE) {
    1af4:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
    1af8:	3a0e0301 	bcc	382704 <__ccfg+0x36275c>
			iowait (dev, operation, retry);
    1afc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b00:	1113490b 	tstne	r3, fp, lsl #18
			(ioreq [dev]) (NONE, buf, len);
    1b04:	40011201 	andmi	r1, r1, r1, lsl #4
    1b08:	0013010a 	andseq	r0, r3, sl, lsl #2
    1b0c:	00343500 	eorseq	r3, r4, r0, lsl #10
		(ioreq [dev]) (NONE, buf, len);
    1b10:	0b3a0803 	bleq	e83b24 <__ccfg+0xe63b7c>
    1b14:	0b390b3b 	bleq	e44808 <__ccfg+0xe24860>
    1b18:	06021349 	streq	r1, [r2], -r9, asr #6
}
    1b1c:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
	if (retry != WNONE) {
    1b20:	3a0e0301 	bcc	38272c <__ccfg+0x362784>
		delay (-ret - 2, retry);
    1b24:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b28:	200c270b 	andcs	r2, ip, fp, lsl #14
    1b2c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b30:	00053700 	andeq	r3, r5, r0, lsl #14
		release;
    1b34:	0b3a0e03 	bleq	e85348 <__ccfg+0xe653a0>
    1b38:	0b39053b 	bleq	e4302c <__ccfg+0xe23084>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b3c:	00001349 	andeq	r1, r0, r9, asr #6
    1b40:	03012e38 	movweq	r2, #7736	; 0x1e38
    1b44:	3b0b3a0e 	blcc	2d0384 <__ccfg+0x2b03dc>
    1b48:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1b4c:	2013490c 	andscs	r4, r3, ip, lsl #18
		syserror (ERESOURCE, "mal1");
    1b50:	0013010b 	andseq	r0, r3, fp, lsl #2
    1b54:	00053900 	andeq	r3, r5, r0, lsl #18
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b58:	0b3a0e03 	bleq	e8536c <__ccfg+0xe653c4>
    1b5c:	0b390b3b 	bleq	e44850 <__ccfg+0xe248a8>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b60:	00001349 	andeq	r1, r0, r9, asr #6
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b64:	31012e3a 	tstcc	r1, sl, lsr lr
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b6c:	000a4001 	andeq	r4, sl, r1
    1b70:	001d3b00 	andseq	r3, sp, r0, lsl #22
}
    1b74:	01111331 	tsteq	r1, r1, lsr r3
    1b78:	0b580112 	bleq	1601fc8 <__ccfg+0x15e2020>
    1b7c:	0b570b59 	bleq	15c48e8 <__ccfg+0x15a4940>
    1b80:	01000000 	mrseq	r0, (UNDEF: 0)
    1b84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1b88:	0e030b13 	vmoveq.32	d3[0], r0
void __pi_free (aword *ch) {
    1b8c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b90:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1b94:	24020000 	strcs	r0, [r2], #-0
		syserror (EMALLOC, "malg");
    1b98:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1b9c:	000e030b 	andeq	r0, lr, fp, lsl #6
	mcfree [MA_NP] += m_size (ch);
    1ba0:	00160300 	andseq	r0, r6, r0, lsl #6
		m_size (ch) ^= MALLOC_UMASK;
    1ba4:	0b3a0e03 	bleq	e853b8 <__ccfg+0xe65410>
    1ba8:	0b390b3b 	bleq	e4489c <__ccfg+0xe248f4>
	mcfree [MA_NP] += m_size (ch);
    1bac:	00001349 	andeq	r1, r0, r9, asr #6
	QFREE;
    1bb0:	0b002404 	bleq	abc8 <__exidx_end+0x4f88>
	if (mevent [MA_NP] . nwait) {
    1bb4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1bb8:	05000008 	streq	r0, [r0, #-8]
		trigger ((aword)(&(mevent [MA_NP])));
    1bbc:	13490026 	movtne	r0, #36902	; 0x9026
		mevent [MA_NP] . nwait --;
    1bc0:	35060000 	strcc	r0, [r6, #-0]
}
    1bc4:	00134900 	andseq	r4, r3, r0, lsl #18
    1bc8:	000f0700 	andeq	r0, pc, r0, lsl #14
    1bcc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1bd0:	13080000 	movwne	r0, #32768	; 0x8000
void kill (aword pid) {
    1bd4:	3a0b0b01 	bcc	2c47e0 <__ccfg+0x2a4838>
		pid = (aword) __pi_curr;
    1bd8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	j = NULL;
    1bdc:	0013010b 	andseq	r0, r3, fp, lsl #2
	for_all_tasks (i) {
    1be0:	000d0900 	andeq	r0, sp, r0, lsl #18
	syserror (EREQPAR, "kpi");
    1be4:	0b3a0e03 	bleq	e853f8 <__ccfg+0xe65450>
    1be8:	0b390b3b 	bleq	e448dc <__ccfg+0xe24934>
		if ((aword)i == pid) {
    1bec:	0b0b1349 	bleq	2c6918 <__ccfg+0x2a6970>
    1bf0:	0b0c0b0d 	bleq	30482c <__ccfg+0x2e4884>
				__PCB = i->Next;
    1bf4:	00000b38 	andeq	r0, r0, r8, lsr fp
			killev (i);
    1bf8:	03000d0a 	movweq	r0, #3338	; 0xd0a
			ufree (i);
    1bfc:	3b0b3a0e 	blcc	2d043c <__ccfg+0x2b0494>
			if (i == __pi_curr)
    1c00:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c04:	000b3813 	andeq	r3, fp, r3, lsl r8
				release;
    1c08:	00340b00 	eorseq	r0, r4, r0, lsl #22
				j->Next = i->Next;
    1c0c:	0b3a0e03 	bleq	e85420 <__ccfg+0xe65478>
    1c10:	0b390b3b 	bleq	e44904 <__ccfg+0xe2495c>
    1c14:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1af8 <io+0x58>
}
    1c18:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1c1c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1c20:	00130113 	andseq	r0, r3, r3, lsl r1
	if (size < 8)
    1c24:	00210d00 	eoreq	r0, r1, r0, lsl #26
		_size = 2;
    1c28:	160e0000 	strne	r0, [lr], -r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c2c:	3a0e0300 	bcc	382834 <__ccfg+0x36288c>
		_size = (((aword)size) + 3) >> 2;
    1c30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c34:	0013490b 	andseq	r4, r3, fp, lsl #18
		_size = (((aword)size) + 3) >> 2;
    1c38:	01150f00 	tsteq	r5, r0, lsl #30
		if (mevent [MA_NP] . nfail != 255)
    1c3c:	13010c27 	movwne	r0, #7207	; 0x1c27
    1c40:	05100000 	ldreq	r0, [r0, #-0]
			mevent [MA_NP] . nfail ++;
    1c44:	00134900 	andseq	r4, r3, r0, lsl #18
		mnfree [MA_NP] = 0;
    1c48:	00341100 	eorseq	r1, r4, r0, lsl #2
    1c4c:	0b3a0e03 	bleq	e85460 <__ccfg+0xe654b8>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c50:	0b39053b 	bleq	e43144 <__ccfg+0xe2319c>
    1c54:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1b38 <io+0x98>
			syserror (EMALLOC, "malc");
    1c58:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1c5c:	0b011312 	bleq	468ac <__ccfg+0x26904>
		if (m_size (chunk) >= _size)
    1c60:	3b0b3a0b 	blcc	2d0494 <__ccfg+0x2b04ec>
    1c64:	010b3905 	tsteq	fp, r5, lsl #18
		chunk = m_nextp (chunk)) {
    1c68:	13000013 	movwne	r0, #19
		m_setnextp (cc, m_nextp (chunk));
    1c6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c74:	13490b39 	movtne	r0, #39737	; 0x9b39
			m_size (chunk) = _size;
    1c78:	00000b38 	andeq	r0, r0, r8, lsr fp
			cc = chunk + _size + m_hdrlen;
    1c7c:	03011314 	movweq	r1, #4884	; 0x1314
    1c80:	3a0b0b0e 	bcc	2c48c0 <__ccfg+0x2a4918>
			m_size (cc) = waste - m_hdrlen;
    1c84:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			QFREE;
    1c88:	0013010b 	andseq	r0, r3, fp, lsl #2
		mevent [MA_NP] . nfail = 0;
    1c8c:	00211500 	eoreq	r1, r1, r0, lsl #10
		mcfree [MA_NP] -= m_size (chunk);
    1c90:	0b2f1349 	bleq	bc69bc <__ccfg+0xba6a14>
    1c94:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1c98:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1c9c:	3b0b3a0e 	blcc	2d04dc <__ccfg+0x2b0534>
		m_size (chunk) |= MALLOC_UMASK;
    1ca0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ca4:	1113490c 	tstne	r3, ip, lsl #18
		m_size (chunk) |= MALLOC_UMASK;
    1ca8:	40011201 	andmi	r1, r1, r1, lsl #4
			mnfree [MA_NP] = mcfree [MA_NP];
    1cac:	0013010a 	andseq	r0, r3, sl, lsl #2
}
    1cb0:	00051700 	andeq	r1, r5, r0, lsl #14
    1cb4:	0b3a0803 	bleq	e83cc8 <__ccfg+0xe63d20>
    1cb8:	0b390b3b 	bleq	e449ac <__ccfg+0xe24a04>
    1cbc:	06021349 	streq	r1, [r2], -r9, asr #6
    1cc0:	34180000 	ldrcc	r0, [r8], #-0
    1cc4:	3a0e0300 	bcc	3828cc <__ccfg+0x362924>
    1cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
aword __pi_fork (fsmcode func, aword data) {
    1ccc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1cd0:	19000006 	stmdbne	r0, {r1, r2}
    1cd4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1cd8:	0b3b0b3a 	bleq	ec49c8 <__ccfg+0xea4a20>
		if ((j = __PCB) == NULL)
    1cdc:	13490b39 	movtne	r0, #39737	; 0x9b39
	i->Next = NULL;
    1ce0:	00000602 	andeq	r0, r0, r2, lsl #12
	i->data = data;
    1ce4:	01110100 	tsteq	r1, r0, lsl #2
		if ((j = __PCB) == NULL)
    1ce8:	0b130e25 	bleq	4c5584 <__ccfg+0x4a55dc>
}
    1cec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			for (; j->Next != NULL; j = j->Next);
    1cf0:	01110655 	tsteq	r1, r5, asr r6
    1cf4:	00000610 	andeq	r0, r0, r0, lsl r6
	return (aword) i;
    1cf8:	0b002402 	bleq	ad08 <__exidx_end+0x50c8>
    1cfc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	if (mevent [MA_NP] . nwait != 255)
    1d00:	0300000e 	movweq	r0, #14
    1d04:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1d08:	0b3b0b3a 	bleq	ec49f8 <__ccfg+0xea4a50>
		mevent [MA_NP] . nwait ++;
    1d0c:	13490b39 	movtne	r0, #39737	; 0x9b39
	wait ((aword)(&(mevent [MA_NP])), state);
    1d10:	24040000 	strcs	r0, [r4], #-0
    1d14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
void diag (const char *mess, ...) {
    1d18:	0008030b 	andeq	r0, r8, fp, lsl #6
    1d1c:	00260500 	eoreq	r0, r6, r0, lsl #10
    1d20:	00001349 	andeq	r1, r0, r9, asr #6
	diag_disable_int (a, is);
    1d24:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1d28:	07000013 	smladeq	r0, r3, r0, r0
    1d2c:	0b0b0113 	bleq	2c2180 <__ccfg+0x2a21d8>
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	0b3b0b3a 	bleq	ec4a20 <__ccfg+0xea4a78>
	diag_disable_int (a, is);
    1d34:	13010b39 	movwne	r0, #6969	; 0x1b39
	while (*mess != '\0') {
    1d38:	0d080000 	stceq	0, cr0, [r8, #-0]
	dgout ('\r');
    1d3c:	3a0e0300 	bcc	382944 <__ccfg+0x36299c>
	dgout ('\n');
    1d40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d44:	0b13490b 	bleq	4d4178 <__ccfg+0x4b41d0>
    1d48:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	diag_wait (a);
    1d4c:	000b380b 	andeq	r3, fp, fp, lsl #16
	diag_enable_int (a, is);
    1d50:	000d0900 	andeq	r0, sp, r0, lsl #18
    1d54:	0b3a0e03 	bleq	e85568 <__ccfg+0xe655c0>
}
    1d58:	0b390b3b 	bleq	e44a4c <__ccfg+0xe24aa4>
    1d5c:	0b381349 	bleq	e06a88 <__ccfg+0xde6ae0>
    1d60:	340a0000 	strcc	r0, [sl], #-0
		if (*mess == '%') {
    1d64:	3a0e0300 	bcc	38296c <__ccfg+0x3629c4>
    1d68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (*mess == 'l') {
    1d6c:	3f13490b 	svccc	0x0013490b
    1d70:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				mess++;
    1d74:	000f0b00 	andeq	r0, pc, r0, lsl #22
				val = va_arg (ap, lword);
    1d78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
				bc = 32;
    1d7c:	010c0000 	mrseq	r0, (UNDEF: 12)
				bc = 16;
    1d80:	01134901 	tsteq	r3, r1, lsl #18
			switch (*mess) {
    1d84:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1d88:	00000021 	andeq	r0, r0, r1, lsr #32
    1d8c:	0300160e 	movweq	r1, #1550	; 0x60e
				dgout ('%');
    1d90:	3b0b3a0e 	blcc	2d05d0 <__ccfg+0x2b0628>
    1d94:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				dgout (*mess);
    1d98:	0f000013 	svceq	0x00000013
    1d9c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			switch (*mess) {
    1da0:	00001301 	andeq	r1, r0, r1, lsl #6
					v = __pi_hex_enc_table [
    1da4:	49000510 	stmdbmi	r0, {r4, r8, sl}
					i += 4;
    1da8:	11000013 	tstne	r0, r3, lsl r0
					(val >> (bc - i)) & 0xf];
    1dac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1db0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					dgout (v);
    1db4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1db8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
				while (i < bc) {
    1dbc:	13120000 	tstne	r2, #0
			mess++;
    1dc0:	3a0b0b01 	bcc	2c49cc <__ccfg+0x2a4a24>
					d /= 10;
    1dc4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				if ((val >> (bc - 1)) & 1) {
    1dc8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1dcc:	000d1300 	andeq	r1, sp, r0, lsl #6
					dgout ('-');
    1dd0:	0b3a0e03 	bleq	e855e4 <__ccfg+0xe6563c>
    1dd4:	0b39053b 	bleq	e432c8 <__ccfg+0xe23320>
						val |= 0xffff0000;
    1dd8:	0b381349 	bleq	e06b04 <__ccfg+0xde6b5c>
    1ddc:	13140000 	tstne	r4, #0
    1de0:	0b0e0301 	bleq	3829ec <__ccfg+0x362a44>
				d = (bc == 16) ? 10000 : 1000000000;
    1de4:	3b0b3a0b 	blcc	2d0618 <__ccfg+0x2b0670>
    1de8:	010b3905 	tsteq	fp, r5, lsl #18
    1dec:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
					v = (word) (val / d);
    1df0:	13490021 	movtne	r0, #36897	; 0x9021
					if (v || d == 1) break;
    1df4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1df8:	3f012e16 	svccc	0x00012e16
					d /= 10;
    1dfc:	3a0e030c 	bcc	382a34 <__ccfg+0x362a8c>
				d = (bc == 16) ? 10000 : 1000000000;
    1e00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					dgout (v + '0');
    1e04:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1e08:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1e0c:	000a4001 	andeq	r4, sl, r1
					d /= 10;
    1e10:	00051700 	andeq	r1, r5, r0, lsl #14
					val = val - (v * d);
    1e14:	0b3a0803 	bleq	e83e28 <__ccfg+0xe63e80>
					if (d == 0) break;
    1e18:	0b390b3b 	bleq	e44b0c <__ccfg+0xe24b64>
					v = (word) (val / d);
    1e1c:	06021349 	streq	r1, [r2], -r9, asr #6
    1e20:	34180000 	ldrcc	r0, [r8], #-0
				if (bc == 16)
    1e24:	3a0e0300 	bcc	382a2c <__ccfg+0x362a84>
				d = (bc == 16) ? 10000 : 1000000000;
    1e28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					val &= 0xffff;
    1e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					dgout (*s);
    1e30:	00000006 	andeq	r0, r0, r6
					s++;
    1e34:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				while (*s != '\0') {
    1e38:	030b130e 	movweq	r1, #45838	; 0xb30e
    1e3c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			dgout (*mess++);
    1e40:	10011106 	andne	r1, r1, r6, lsl #2
    1e44:	02000006 	andeq	r0, r0, #6
    1e48:	0b0b0024 	bleq	2c1ee0 <__ccfg+0x2a1f38>
    1e4c:	0e030b3e 	vmoveq.16	d3[0], r0
    1e50:	16030000 	strne	r0, [r3], -r0
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e54:	3a0e0300 	bcc	382a5c <__ccfg+0x362ab4>
    1e58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e5c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1e60:	00240400 	eoreq	r0, r4, r0, lsl #8
	^ entropy
    1e64:	0b3e0b0b 	bleq	f84a98 <__ccfg+0xf64af0>
}
    1e68:	00000803 	andeq	r0, r0, r3, lsl #16
    1e6c:	03011305 	movweq	r1, #4869	; 0x1305
    1e70:	3a0b0b0e 	bcc	2c4ab0 <__ccfg+0x2a4b08>
    1e74:	010b3b0b 	tsteq	fp, fp, lsl #22
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e78:	06000013 			; <UNDEFINED> instruction: 0x06000013
	word cs = size + hblenb;
    1e7c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e80:	0b381349 	bleq	e06bac <__ccfg+0xde6c04>
    1e84:	00000c34 	andeq	r0, r0, r4, lsr ip
	p -> length = size;
    1e88:	0b000f07 	bleq	5aac <patchImageGenfsk+0x13c>
}
    1e8c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
	if (p->attributes.b.queued) {
    1e90:	13490026 	movtne	r0, #36902	; 0x9026
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e94:	35090000 	strcc	r0, [r9, #-0]
    1e98:	00134900 	andseq	r4, r3, r0, lsl #18
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e9c:	01130a00 	tsteq	r3, r0, lsl #20
		p->attributes.b.queued = 0;
    1ea0:	0b3a0b0b 	bleq	e84ad4 <__ccfg+0xe64b2c>
    1ea4:	0b390b3b 	bleq	e44b98 <__ccfg+0xe24bf0>
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ea8:	00001301 	andeq	r1, r0, r1, lsl #6
	deq (p);	// Remove from queue
    1eac:	03000d0b 	movweq	r0, #3339	; 0xd0b
}
    1eb0:	3b0b3a0e 	blcc	2d06f0 <__ccfg+0x2b0748>
	tfree ((address)p);
    1eb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1eb8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1ebc:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1ec0:	0c00000b 	stceq	0, cr0, [r0], {11}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ec4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1ec8:	0b3b0b3a 	bleq	ec4bb8 <__ccfg+0xea4c10>
	if (q_empty (q))
    1ecc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ed0:	00000b38 	andeq	r0, r0, r8, lsr fp
		trigger (q);
    1ed4:	0300340d 	movweq	r3, #1037	; 0x40d
	if (p->attributes.b.urgent) {
    1ed8:	3b0b3a0e 	blcc	2d0718 <__ccfg+0x2b0770>
		p->u.bqueue.next = q->next;
    1edc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		p->u.bqueue.prev = q;
    1ee0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		q->next->prev = (qitem_t*) p;
    1ee4:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
	p->attributes.b.queued = 1;
    1ee8:	0b0b000f 	bleq	2c1f2c <__ccfg+0x2a1f84>
    1eec:	00001349 	andeq	r1, r0, r9, asr #6
}
    1ef0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
		p->u.bqueue.prev = q->prev;
    1ef4:	00130113 	andseq	r0, r3, r3, lsl r1
		q->prev->next = (qitem_t*) p;
    1ef8:	00211000 	eoreq	r1, r1, r0
		q->prev = (qitem_t*) p;
    1efc:	16110000 	ldrne	r0, [r1], -r0
    1f00:	3a0e0300 	bcc	382b08 <__ccfg+0x362b60>
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f04:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	deq (p);	// Soft dequeue, timer and hook left intact
    1f08:	0013490b 	andseq	r4, r3, fp, lsl #18
	switch (dv) {
    1f0c:	01151200 	tsteq	r5, r0, lsl #4
    1f10:	13010c27 	movwne	r0, #7207	; 0x1c27
    1f14:	05130000 	ldreq	r0, [r3, #-0]
    1f18:	00134900 	andseq	r4, r3, r0, lsl #18
			p->attributes.b.urgent = 1;
    1f1c:	00341400 	eorseq	r1, r4, r0, lsl #8
    1f20:	0b3a0e03 	bleq	e85734 <__ccfg+0xe6578c>
			verify_ses (p, "dispose ses");
    1f24:	0b39053b 	bleq	e43418 <__ccfg+0xe23470>
    1f28:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1e0c <diag+0xf4>
    1f2c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1f30:	0b011315 	bleq	46b8c <__ccfg+0x26be4>
    1f34:	3b0b3a0b 	blcc	2d0768 <__ccfg+0x2b07c0>
			verify_phy (p, "dispose phy");
    1f38:	010b3905 	tsteq	fp, r5, lsl #18
    1f3c:	16000013 			; <UNDEFINED> instruction: 0x16000013
}
    1f40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			enq (oqueues [p->attributes.b.phys], p);
    1f44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			p->attributes.b.urgent = 1;
    1f48:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f4c:	00000b38 	andeq	r0, r0, r8, lsr fp
			verify_phy (p, "dispose phy");
    1f50:	03011317 	movweq	r1, #4887	; 0x1317
    1f54:	3a0b0b0e 	bcc	2c4b94 <__ccfg+0x2a4bec>
    1f58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f5c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f60:	00211800 	eoreq	r1, r1, r0, lsl #16
    1f64:	0b2f1349 	bleq	bc6c90 <__ccfg+0xba6ce8>
			enq (oqueues [p->attributes.b.phys], p);
    1f68:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1f6c:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
    1f70:	3b0b3a0e 	blcc	2d07b0 <__ccfg+0x2b0808>
			rlp (p);
    1f74:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
}
    1f78:	1113490c 	tstne	r3, ip, lsl #18
    1f7c:	40011201 	andmi	r1, r1, r1, lsl #4
    1f80:	0013010a 	andseq	r0, r3, sl, lsl #2
    1f84:	00051a00 	andeq	r1, r5, r0, lsl #20
    1f88:	0b3a0803 	bleq	e83f9c <__ccfg+0xe63ff4>
    1f8c:	0b390b3b 	bleq	e44c80 <__ccfg+0xe24cd8>
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f90:	06021349 	streq	r1, [r2], -r9, asr #6
	if (b->attributes.b.outgoing) {
    1f94:	051b0000 	ldreq	r0, [fp, #-0]
	b = header (p);
    1f98:	3a080300 	bcc	202ba0 <__ccfg+0x1e2bf8>
	if (b->attributes.b.outgoing) {
    1f9c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		verify_ses (b, "tcv02");
    1fa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fa4:	1c00000a 	stcne	0, cr0, [r0], {10}
    1fa8:	00000018 	andeq	r0, r0, r8, lsl r0
    1fac:	0300341d 	movweq	r3, #1053	; 0x41d
    1fb0:	3b0b3a0e 	blcc	2d07f0 <__ccfg+0x2b0848>
		verify_plg (b, tcv_out, "tcv03");
    1fb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1fb8:	00060213 	andeq	r0, r6, r3, lsl r2
    1fbc:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1fc0:	0b3a0803 	bleq	e83fd4 <__ccfg+0xe6402c>
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
    1fc8:	06021349 	streq	r1, [r2], -r9, asr #6
    1fcc:	341f0000 	ldrcc	r0, [pc], #-0	; 1fd4 <tcv_endp+0x44>
    1fd0:	3a080300 	bcc	202bd8 <__ccfg+0x1e2c30>
    1fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fd8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    1fdc:	0000000a 	andeq	r0, r0, sl
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fe0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
		rlp (b);
    1fe4:	030b130e 	movweq	r1, #45838	; 0xb30e
}
    1fe8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
		rlp (b);
    1fec:	10011106 	andne	r1, r1, r6, lsl #2
    1ff0:	02000006 	andeq	r0, r0, #6
    1ff4:	0b0b0024 	bleq	2c208c <__ccfg+0x2a20e4>
    1ff8:	0e030b3e 	vmoveq.16	d3[0], r0
    1ffc:	16030000 	strne	r0, [r3], -r0
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2000:	3a0e0300 	bcc	382c08 <__ccfg+0x362c60>
    2004:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2008:	0013490b 	andseq	r4, r3, fp, lsl #18
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    200c:	00240400 	eoreq	r0, r4, r0, lsl #8
	va_start (ap, plid);
    2010:	0b3e0b0b 	bleq	f84c44 <__ccfg+0xf64c9c>
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2014:	00000803 	andeq	r0, r0, r3, lsl #16
    2018:	03011305 	movweq	r1, #4869	; 0x1305
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    201c:	3a0b0b0e 	bcc	2c4c5c <__ccfg+0x2a4cb4>
    2020:	010b3b0b 	tsteq	fp, fp, lsl #22
    2024:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2028:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			syserror (ENODEVICE, "tcv04");
    202c:	0b381349 	bleq	e06d58 <__ccfg+0xde6db0>
		syserror (EMALLOC, "tcv05");
    2030:	00000c34 	andeq	r0, r0, r4, lsr ip
	attp.b.outgoing = 1;
    2034:	0b000f07 	bleq	5c58 <__exidx_end+0x18>
    2038:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    203c:	13490026 	movtne	r0, #36902	; 0x9026
    2040:	35090000 	strcc	r0, [r9, #-0]
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2044:	00134900 	andseq	r4, r3, r0, lsl #18
		if (descriptors [fd] == NULL)
    2048:	01130a00 	tsteq	r3, r0, lsl #20
    204c:	0b3a0b0b 	bleq	e84c80 <__ccfg+0xe64cd8>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2050:	0b390b3b 	bleq	e44d44 <__ccfg+0xe24d9c>
		return ERROR;
    2054:	00001301 	andeq	r1, r0, r1, lsl #6
}
    2058:	03000d0b 	movweq	r0, #3339	; 0xd0b
    205c:	3b0b3a0e 	blcc	2d089c <__ccfg+0x2b08f4>
    2060:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	s->attpattern.b.session = fd;
    2064:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2068:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	descriptors [fd] = s;
    206c:	0c00000b 	stceq	0, cr0, [r0], {11}
	q_init (&(s->rqueue));
    2070:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2074:	0b3b0b3a 	bleq	ec4d64 <__ccfg+0xea4dbc>
    2078:	13490b39 	movtne	r0, #39737	; 0x9b39
    207c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2080:	0300340d 	movweq	r3, #1037	; 0x40d
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2084:	3b0b3a0e 	blcc	2d08c4 <__ccfg+0x2b091c>
    2088:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    208c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	descriptors [fd] = s;
    2090:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2094:	0b0b000f 	bleq	2c20d8 <__ccfg+0x2a2130>
    2098:	00001349 	andeq	r1, r0, r9, asr #6
	if (s == NULL)
    209c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
		syserror (EMALLOC, "tcv05");
    20a0:	00130113 	andseq	r0, r3, r3, lsl r1
    20a4:	00211000 	eoreq	r1, r1, r0
    20a8:	16110000 	ldrne	r0, [r1], -r0
    20ac:	3a0e0300 	bcc	382cb4 <__ccfg+0x362d0c>
    20b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    20b8:	01151200 	tsteq	r5, r0, lsl #4
    20bc:	13010c27 	movwne	r0, #7207	; 0x1c27
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20c0:	05130000 	ldreq	r0, [r3, #-0]
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20c4:	00134900 	andseq	r4, r3, r0, lsl #18
    20c8:	00341400 	eorseq	r1, r4, r0, lsl #8
    20cc:	0b3a0e03 	bleq	e858e0 <__ccfg+0xe65938>
	plugins [ord] = pl;
    20d0:	0b39053b 	bleq	e435c4 <__ccfg+0xe2361c>
	return 0;
    20d4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1fb8 <tcv_endp+0x28>
		return ERROR;
    20d8:	00000c3c 	andeq	r0, r0, ip, lsr ip
}
    20dc:	0b011315 	bleq	46d38 <__ccfg+0x26d90>
    20e0:	3b0b3a0b 	blcc	2d0914 <__ccfg+0x2b096c>
	verify_fds (fd, "tcv10");
    20e4:	010b3905 	tsteq	fp, r5, lsl #18
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20e8:	16000013 			; <UNDEFINED> instruction: 0x16000013
	verify_fds (fd, "tcv10");
    20ec:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    20f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20f4:	13490b39 	movtne	r0, #39737	; 0x9b39
	verify_plg (b, tcv_frm, "tcv11");
    20f8:	00000b38 	andeq	r0, r0, r8, lsr fp
	b = q_first (rq);
    20fc:	03011317 	movweq	r1, #4887	; 0x1317
	if (q_end (b, rq)) {
    2100:	3a0b0b0e 	bcc	2c4d40 <__ccfg+0x2a4d98>
		if (state != WNONE) {
    2104:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2108:	0013010b 	andseq	r0, r3, fp, lsl #2
			when (rq, state);
    210c:	00211800 	eoreq	r1, r1, r0, lsl #16
			release;
    2110:	0b2f1349 	bleq	bc6e3c <__ccfg+0xba6e94>
	deq (b);	// Dequeue the packet ...
    2114:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2118:	030c3f01 	movweq	r3, #52993	; 0xcf01
	p = ((address)(b + 1));
    211c:	3b0b3a0e 	blcc	2d095c <__ccfg+0x2b09b4>
	verify_plg (b, tcv_frm, "tcv11");
    2120:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2124:	1113490c 	tstne	r3, ip, lsl #18
    2128:	40011201 	andmi	r1, r1, r1, lsl #4
    212c:	0013010a 	andseq	r0, r3, sl, lsl #2
    2130:	00051a00 	andeq	r1, r5, r0, lsl #20
    2134:	0b3a0803 	bleq	e84148 <__ccfg+0xe641a0>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2138:	0b390b3b 	bleq	e44e2c <__ccfg+0xe24e84>
    213c:	06021349 	streq	r1, [r2], -r9, asr #6
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2140:	051b0000 	ldreq	r0, [fp, #-0]
    2144:	3a080300 	bcc	202d4c <__ccfg+0x1e2da4>
	b->u.pointers.tail =
    2148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    214c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		return NULL;
    2150:	1c00000a 	stcne	0, cr0, [r0], {10}
    2154:	00000018 	andeq	r0, r0, r8, lsl r0
    2158:	0300341d 	movweq	r3, #1053	; 0x41d
    215c:	3b0b3a0e 	blcc	2d099c <__ccfg+0x2b09f4>
    2160:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	verify_fds (fd, "tcv16");
    2164:	00060213 	andeq	r0, r6, r3, lsl r2
								Boolean urg) {
    2168:	00341e00 	eorseq	r1, r4, r0, lsl #28
    216c:	0b3a0803 	bleq	e84180 <__ccfg+0xe641d8>
	verify_fds (fd, "tcv16");
    2170:	0b390b3b 	bleq	e44e64 <__ccfg+0xe24ebc>
    2174:	0a021349 	beq	86ea0 <__ccfg+0x66ef8>
    2178:	01000000 	mrseq	r0, (UNDEF: 0)
	verify_pld (s, tcv_frm, "tcv17");
    217c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2180:	0e030b13 	vmoveq.32	d3[0], r0
    2184:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    2188:	06100111 			; <UNDEFINED> instruction: 0x06100111
    218c:	16020000 	strne	r0, [r2], -r0
    2190:	3a0e0300 	bcc	382d98 <__ccfg+0x362df0>
    2194:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2198:	0013490b 	andseq	r4, r3, fp, lsl #18
	ptrs.head = (word) fd;
    219c:	00240300 	eoreq	r0, r4, r0, lsl #6
	ptrs.tail = (word) urg;
    21a0:	0b3e0b0b 	bleq	f84dd4 <__ccfg+0xf64e2c>
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21a4:	00000e03 	andeq	r0, r0, r3, lsl #28
    21a8:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
		if (state != WNONE) {
    21ac:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    21b0:	13490035 	movtne	r0, #36917	; 0x9035
}
    21b4:	24060000 	strcs	r0, [r6], #-0
			when (eid, state);
    21b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    21bc:	0008030b 	andeq	r0, r8, fp, lsl #6
			release;
    21c0:	00160700 	andseq	r0, r6, r0, lsl #14
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21c4:	0b3a0e03 	bleq	e859d8 <__ccfg+0xe65a30>
    21c8:	0b39053b 	bleq	e436bc <__ccfg+0xe23714>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    21cc:	00001349 	andeq	r1, r0, r9, asr #6
    21d0:	0b011708 	bleq	47df8 <__ccfg+0x27e50>
    21d4:	3b0b3a0b 	blcc	2d0a08 <__ccfg+0x2b0a60>
    21d8:	010b390b 	tsteq	fp, fp, lsl #18
    21dc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    21e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if (state != WNONE) {
    21e4:	0b3b0b3a 	bleq	ec4ed4 <__ccfg+0xea4f2c>
    21e8:	13490b39 	movtne	r0, #39737	; 0x9b39
			tmwait (state);
    21ec:	010a0000 	mrseq	r0, (UNDEF: 10)
    21f0:	01134901 	tsteq	r3, r1, lsl #18
	b->attributes = s->attpattern;
    21f4:	0b000013 	bleq	2248 <tcvp_control+0x28>
		b->attributes.b.urgent = 1;
    21f8:	13490021 	movtne	r0, #36897	; 0x9021
    21fc:	00000b2f 	andeq	r0, r0, pc, lsr #22
	b->u.pointers.head = ptrs.head;
    2200:	0b01130c 	bleq	46e38 <__ccfg+0x26e90>
	b->u.pointers.tail = length;
    2204:	3b0b3a0b 	blcc	2d0a38 <__ccfg+0x2b0a90>
	return (address) (b + 1);
    2208:	010b390b 	tsteq	fp, fp, lsl #18
    220c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2210:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2214:	0b3b0b3a 	bleq	ec4f04 <__ccfg+0xea4f5c>
    2218:	13490b39 	movtne	r0, #39737	; 0x9b39
    221c:	00000b38 	andeq	r0, r0, r8, lsr fp
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2220:	0b000f0e 	bleq	5e60 <__exidx_end+0x220>
    2224:	0f00000b 	svceq	0x0000000b
    2228:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	verify_fph (phy, "tcv23");
    222c:	0b3a0b0b 	bleq	e84e60 <__ccfg+0xe64eb8>
    2230:	0b390b3b 	bleq	e44f24 <__ccfg+0xe24f7c>
    2234:	00001301 	andeq	r1, r0, r1, lsl #6
    2238:	03000d10 	movweq	r0, #3344	; 0xd10
}
    223c:	3b0b3a08 	blcc	2d0a64 <__ccfg+0x2b0abc>
	return (physical [phy]) (opt, arg);
    2240:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2244:	000b3813 	andeq	r3, fp, r3, lsl r8
    2248:	000f1100 	andeq	r1, pc, r0, lsl #2
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    224c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	if (opt < 0) {
    2250:	13120000 	tstne	r2, #0
		if (fd < 0)
    2254:	0b0e0301 	bleq	382e60 <__ccfg+0x362eb8>
		if (opt == PHYSOPT_PLUGINFO) {
    2258:	3b0b3a05 	blcc	2d0a74 <__ccfg+0x2b0acc>
			if (fd >= TCV_MAX_PLUGS)
    225c:	010b390b 	tsteq	fp, fp, lsl #18
			if ((p = plugins [fd]) == NULL)
    2260:	13000013 	movwne	r0, #19
    2264:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    2268:	0b3b0b3a 	bleq	ec4f58 <__ccfg+0xea4fb0>
		if (fd >= TCV_MAX_PHYS)
    226c:	13490b39 	movtne	r0, #39737	; 0x9b39
		return physinfo [fd];
    2270:	00000538 	andeq	r0, r0, r8, lsr r5
    2274:	27001514 	smladcs	r0, r4, r5, r1
	verify_fds (fd, "tcv22");
    2278:	1500000c 	strne	r0, [r0, #-12]
    227c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2280:	13011349 	movwne	r1, #4937	; 0x1349
    2284:	05160000 	ldreq	r0, [r6, #-0]
    2288:	00134900 	andseq	r4, r3, r0, lsl #18
}
    228c:	01131700 	tsteq	r3, r0, lsl #14
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2290:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2294:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			return 0;
    2298:	13010b39 	movwne	r0, #6969	; 0x1b39
    229c:	0d180000 	ldceq	0, cr0, [r8, #-0]
    22a0:	3a0e0300 	bcc	382ea8 <__ccfg+0x362f00>
    22a4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22a8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22ac:	1900000b 	stmdbne	r0, {r0, r1, r3}
    22b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (dsp != TCV_DSP_PASS) {
    22b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (ses == NONE)
    22b8:	13490b39 	movtne	r0, #39737	; 0x9b39
			syserror (EREQPAR, "tcv26");
    22bc:	00000538 	andeq	r0, r0, r8, lsr r5
		verify_fds (ses, "tcv27");
    22c0:	0301131a 	movweq	r1, #4890	; 0x131a
    22c4:	3a0b0b0e 	bcc	2c4f04 <__ccfg+0x2a4f5c>
    22c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    22cc:	0013010b 	andseq	r0, r3, fp, lsl #2
    22d0:	01131b00 	tsteq	r3, r0, lsl #22
		if ((p = apb (size)) != NULL) {
    22d4:	0b3a0b0b 	bleq	e84f08 <__ccfg+0xe64f60>
    22d8:	0b39053b 	bleq	e437cc <__ccfg+0xe23824>
		return NULL;
    22dc:	00001301 	andeq	r1, r0, r1, lsl #6
			p->attributes = descriptors [ses] -> attpattern;
    22e0:	0b01171c 	bleq	47f58 <__ccfg+0x27fb0>
			dispose (p, dsp);
    22e4:	3b0b3a0b 	blcc	2d0b18 <__ccfg+0x2b0b70>
			p->attributes = descriptors [ses] -> attpattern;
    22e8:	010b3905 	tsteq	fp, r5, lsl #18
			p->attributes.b.outgoing = 0;
    22ec:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
			dispose (p, dsp);
    22f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			return (address)(p + 1);
    22f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22f8:	13490b39 	movtne	r0, #39737	; 0x9b39
	if ((p = apb (size)) != NULL)
    22fc:	131e0000 	tstne	lr, #0
    2300:	3c0e0300 	stccc	3, cr0, [lr], {-0}
		return (address)(p + 1);
    2304:	1f00000c 	svcne	0x0000000c
    2308:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    230c:	00001301 	andeq	r1, r0, r1, lsl #6
    2310:	03003420 	movweq	r3, #1056	; 0x420
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2314:	3b0b3a0e 	blcc	2d0b54 <__ccfg+0x2b0bac>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2318:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    231c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2320:	2100000c 	tstcs	r0, ip
		syserror (EREQPAR, "tcv28");
    2324:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		syserror (EMALLOC, "tcv29");
    2328:	0b3b0b3a 	bleq	ec5018 <__ccfg+0xea5070>
	physical [phy] = ps;
    232c:	13490b39 	movtne	r0, #39737	; 0x9b39
	physinfo [phy] = info;
    2330:	0b0d0b0b 	bleq	344f64 <__ccfg+0x324fbc>
    2334:	0b380b0c 	bleq	e04f6c <__ccfg+0xde4fc4>
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2338:	0d220000 	stceq	0, cr0, [r2, #-0]
    233c:	3a0e0300 	bcc	382f44 <__ccfg+0x362f9c>
    2340:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (EMALLOC, "tcv29");
    2344:	0b13490b 	bleq	4d4778 <__ccfg+0x4b47d0>
    2348:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	q_init (q);
    234c:	000b380b 	andeq	r3, fp, fp, lsl #16
}
    2350:	00342300 	eorseq	r2, r4, r0, lsl #6
    2354:	0b3a0e03 	bleq	e85b68 <__ccfg+0xe65bc0>
    2358:	0b390b3b 	bleq	e4504c <__ccfg+0xe250a4>
    235c:	0a021349 	beq	87088 <__ccfg+0x670e0>
    2360:	21240000 			; <UNDEFINED> instruction: 0x21240000
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2364:	2f134900 	svccs	0x00134900
	verify_fph (phy, "tcv30");
    2368:	25000005 	strcs	r0, [r0, #-5]
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    236c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2370:	0b3b0b3a 	bleq	ec5060 <__ccfg+0xea50b8>
	verify_fph (phy, "tcv30");
    2374:	13490b39 	movtne	r0, #39737	; 0x9b39
    2378:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    237c:	21260000 			; <UNDEFINED> instruction: 0x21260000
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2380:	27000000 	strcs	r0, [r0, -r0]
    2384:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    238c:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (plugins [plg] == NULL)
    2390:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
    2394:	030c3f01 	movweq	r3, #52993	; 0xcf01
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2398:	3b0b3a0e 	blcc	2d0bd8 <__ccfg+0x2b0c30>
}
    239c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    23a0:	1201110c 	andne	r1, r1, #12, 2
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23a4:	010a4001 	tsteq	sl, r1
    23a8:	29000013 	stmdbcs	r0, {r0, r1, r4}
    23ac:	08030005 	stmdaeq	r3, {r0, r2}
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    23b8:	00000602 	andeq	r0, r0, r2, lsl #12
    23bc:	31011d2a 	tstcc	r1, sl, lsr #26
    23c0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23c4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	len -= (ap.head + ap.tail);
    23c8:	010b5705 	tsteq	fp, r5, lsl #14
    23cc:	2b000013 	blcs	2420 <tcvphy_get+0x20>
    23d0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23d4:	342c0000 	strtcc	r0, [ip], #-0
    23d8:	00133100 	andseq	r3, r3, r0, lsl #2
    23dc:	00342d00 	eorseq	r2, r4, r0, lsl #26
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23e0:	06021331 			; <UNDEFINED> instruction: 0x06021331
    23e4:	1d2e0000 	stcne	0, cr0, [lr, #-0]
    23e8:	52133100 	andspl	r3, r3, #0, 2
	return 1;
    23ec:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    23f0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    23f4:	2f00000b 	svccs	0x0000000b
    23f8:	0e03012e 	adfeqsp	f0, f3, #0.5
    23fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	verify_fph (phy, "tcv32");
    2400:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2404:	01111349 	tsteq	r1, r9, asr #6
    2408:	0a400112 	beq	1002858 <__ccfg+0xfe28b0>
    240c:	00001301 	andeq	r1, r0, r1, lsl #6
    2410:	03003430 	movweq	r3, #1072	; 0x430
    2414:	3b0b3a08 	blcc	2d0c3c <__ccfg+0x2b0c94>
	oq = oqueues [phy];
    2418:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	b = q_first (oq);
    241c:	00060213 	andeq	r0, r6, r3, lsl r2
	if (q_end (b, oq)) {
    2420:	000a3100 	andeq	r3, sl, r0, lsl #2
	*len = b->length;
    2424:	0b3a0e03 	bleq	e85c38 <__ccfg+0xe65c90>
	deq (b);	// Dequeue the packet ...
    2428:	0b39053b 	bleq	e4391c <__ccfg+0xe23974>
}
    242c:	00000111 	andeq	r0, r0, r1, lsl r1
		return NULL;
    2430:	11010b32 	tstne	r1, r2, lsr fp
    2434:	00011201 	andeq	r1, r1, r1, lsl #4
    2438:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
    243c:	0b3a0e03 	bleq	e85c50 <__ccfg+0xe65ca8>
	verify_fph (phy, "tcv33");
    2440:	0b39053b 	bleq	e43934 <__ccfg+0xe2398c>
    2444:	13010b20 	movwne	r0, #6944	; 0x1b20
    2448:	34340000 	ldrtcc	r0, [r4], #-0
    244c:	3a080300 	bcc	203054 <__ccfg+0x1e30ac>
    2450:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2454:	0013490b 	andseq	r4, r3, fp, lsl #18
	oq = oqueues [phy];
    2458:	00053500 	andeq	r3, r5, r0, lsl #10
	b = q_first (oq);
    245c:	0b3a0e03 	bleq	e85c70 <__ccfg+0xe65cc8>
		return NULL;
    2460:	0b39053b 	bleq	e43954 <__ccfg+0xe239ac>
	return (address)(b + 1);
    2464:	06021349 	streq	r1, [r2], -r9, asr #6
}
    2468:	1d360000 	ldcne	0, cr0, [r6, #-0]
    246c:	11133100 	tstne	r3, r0, lsl #2
    2470:	58011201 	stmdapl	r1, {r0, r9, ip}
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2474:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	verify_plg (b, tcv_xmt, "tcv34");
    2478:	3700000b 	strcc	r0, [r0, -fp]
	hblock_t *b = header (pkt);
    247c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	verify_plg (b, tcv_xmt, "tcv34");
    2480:	00001301 	andeq	r1, r0, r1, lsl #6
    2484:	31011d38 	tstcc	r1, r8, lsr sp
    2488:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    248c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    2490:	010b5705 	tsteq	fp, r5, lsl #14
    2494:	39000013 	stmdbcc	r0, {r0, r1, r4}
    2498:	13310005 	teqne	r1, #5
	dispose (b, plugins [b->attributes.b.plugin] ->
    249c:	1d3a0000 	ldcne	0, cr0, [sl, #-0]
}
    24a0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	dispose (b, plugins [b->attributes.b.plugin] ->
    24a4:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    24a8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    24ac:	3b00000b 	blcc	24e0 <zero_loop+0x10>
}
    24b0:	0e03012e 	adfeqsp	f0, f3, #0.5
    while(1)
    24b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
{
    24b8:	01110b39 	tsteq	r1, r9, lsr fp
    SetupTrimDevice();
    24bc:	0a400112 	beq	100290c <__ccfg+0xfe2964>
    pui32Src = &_etext;
    24c0:	00001301 	andeq	r1, r0, r1, lsl #6
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24c4:	03002e3c 	movweq	r2, #3644	; 0xe3c
    __asm("    ldr     r0, =_bss\n"
    24c8:	3b0b3a0e 	blcc	2d0d08 <__ccfg+0x2b0d60>
    24cc:	200b3905 	andcs	r3, fp, r5, lsl #18
    24d0:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
    24d4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    24d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
   main();
    24dc:	01110b39 	tsteq	r1, r9, lsr fp
    FaultISR();
    24e0:	0a400112 	beq	1002930 <__ccfg+0xfe2988>
        *pui32Dest++ = *pui32Src++;
    24e4:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    24e8:	3a0e0300 	bcc	3830f0 <__ccfg+0x363148>
    24ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24f0:	000b200b 	andeq	r2, fp, fp
    24f4:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
    24f8:	0b3a0e03 	bleq	e85d0c <__ccfg+0xe65d64>
    24fc:	0b390b3b 	bleq	e451f0 <__ccfg+0xe25248>
    2500:	0b200c27 	bleq	8055a4 <__ccfg+0x7e55fc>
static byte get_byte () {
    2504:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2508:	03000540 	movweq	r0, #1344	; 0x540
    250c:	3b0b3a08 	blcc	2d0d34 <__ccfg+0x2b0d8c>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2510:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2514:	41000013 	tstmi	r0, r3, lsl r0
		if (ee_inp)
    2518:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			b |= 1;
    251c:	0b3b0b3a 	bleq	ec520c <__ccfg+0xea5264>
    2520:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2524:	34420000 	strbcc	r0, [r2], #-0
	for (b = 0, i = 0; i < 8; i++) {
    2528:	3a080300 	bcc	203130 <__ccfg+0x1e3188>
}
    252c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2530:	0013490b 	andseq	r4, r3, fp, lsl #18
    2534:	012e4300 			; <UNDEFINED> instruction: 0x012e4300
static void put_byte (byte b) {
    2538:	0b3a0e03 	bleq	e85d4c <__ccfg+0xe65da4>
    253c:	0b39053b 	bleq	e43a30 <__ccfg+0xe23a88>
    2540:	0b200c27 	bleq	8055e4 <__ccfg+0x7e563c>
    2544:	00001301 	andeq	r1, r0, r1, lsl #6
		if (b & 0x80)
    2548:	03000544 	movweq	r0, #1348	; 0x544
    254c:	3b0b3a0e 	blcc	2d0d8c <__ccfg+0x2b0de4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2550:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	for (i = 0; i < 8; i++) {
    2554:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
		b <<= 1;
    2558:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	for (i = 0; i < 8; i++) {
    255c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    2560:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2564:	00000b20 	andeq	r0, r0, r0, lsr #22
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2568:	03002e46 	movweq	r2, #3654	; 0xe46
    256c:	3b0b3a0e 	blcc	2d0dac <__ccfg+0x2b0e04>
	put_byte (cmd);
    2570:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2574:	000b200c 	andeq	r2, fp, ip
}
    2578:	012e4700 			; <UNDEFINED> instruction: 0x012e4700
    257c:	01111331 	tsteq	r1, r1, lsr r3
static void wwait (word st, word del) {
    2580:	0a400112 	beq	10029d0 <__ccfg+0xfe2a28>
    2584:	00001301 	andeq	r1, r0, r1, lsl #6
    2588:	31000548 	tstcc	r0, r8, asr #10
	while (dopen && (rdsr () & 1)) {
    258c:	00060213 	andeq	r0, r6, r3, lsl r2
    2590:	011d4900 	tsteq	sp, r0, lsl #18
    2594:	01111331 	tsteq	r1, r1, lsr r3
    2598:	0b580112 	bleq	16029e8 <__ccfg+0x15e2a40>
	put_byte (CMD_RDSR);
    259c:	0b570b59 	bleq	15c5308 <__ccfg+0x15a5360>
	r = get_byte ();
    25a0:	1d4a0000 	stclne	0, cr0, [sl, #-0]
    25a4:	11133101 	tstne	r3, r1, lsl #2
	while (dopen && (rdsr () & 1)) {
    25a8:	58011201 	stmdapl	r1, {r0, r9, ip}
}
    25ac:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		if (st == WNONE)
    25b0:	4b00000b 	blmi	25e4 <ready+0x10>
    25b4:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
			mdelay (1);
    25b8:	01120111 	tsteq	r2, r1, lsl r1
    25bc:	00000a40 	andeq	r0, r0, r0, asr #20
			delay (del, st);
    25c0:	3100344c 	tstcc	r0, ip, asr #8
    25c4:	00061c13 	andeq	r1, r6, r3, lsl ip
			release;
    25c8:	11010000 	mrsne	r0, (UNDEF: 1)
    25cc:	130e2501 	movwne	r2, #58625	; 0xe501
    25d0:	1b0e030b 	blne	383204 <__ccfg+0x36325c>
static void ready () {
    25d4:	1106550e 	tstne	r6, lr, lsl #10
	if (dopen) {
    25d8:	00061001 	andeq	r1, r6, r1
		wwait (WNONE, 1);
    25dc:	00240200 	eoreq	r0, r4, r0, lsl #4
    25e0:	0b3e0b0b 	bleq	f85214 <__ccfg+0xf6526c>
    25e4:	00000e03 	andeq	r0, r0, r3, lsl #28
	dstat = 0;
    25e8:	03001603 	movweq	r1, #1539	; 0x603
}
    25ec:	3b0b3a0e 	blcc	2d0e2c <__ccfg+0x2b0e84>
    25f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    25f4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	udelay (1);
    25f8:	0b0b0024 	bleq	2c2690 <__ccfg+0x2a26e8>
    25fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
	udelay (1);
    2600:	13050000 	movwne	r0, #20480	; 0x5000
		dopen = DOPEN_TEMP;
    2604:	0b0e0301 	bleq	383210 <__ccfg+0x363268>
    2608:	3b0b3a0b 	blcc	2d0e3c <__ccfg+0x2b0e94>
    260c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2610:	000d0600 	andeq	r0, sp, r0, lsl #12
static void cclose () {
    2614:	13490e03 	movtne	r0, #40451	; 0x9e03
	if (dopen == DOPEN_TEMP) {
    2618:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    261c:	0f070000 	svceq	0x00070000
		wwait (WNONE, 1);
    2620:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2624:	00260800 	eoreq	r0, r6, r0, lsl #16
	cmd_0 (CMD_DP);
    2628:	00001349 	andeq	r1, r0, r9, asr #6
    262c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
		dopen = 0;
    2630:	0a000013 	beq	2684 <ser_out+0x24>
}
    2634:	0b0b000f 	bleq	2c2678 <__ccfg+0x2a26d0>
word ee_open () {
    2638:	00001349 	andeq	r1, r0, r9, asr #6
	ready ();
    263c:	0b01130b 	bleq	47270 <__ccfg+0x272c8>
	dopen = DOPEN_PERM;
    2640:	3b0b3a0b 	blcc	2d0e74 <__ccfg+0x2b0ecc>
    2644:	010b390b 	tsteq	fp, fp, lsl #18
}
    2648:	0c000013 	stceq	0, cr0, [r0], {19}
	if (dopen) {
    264c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2650:	0b3b0b3a 	bleq	ec5340 <__ccfg+0xea5398>
		dopen = DOPEN_TEMP;
    2654:	13490b39 	movtne	r0, #39737	; 0x9b39
		cclose ();
    2658:	0b0d0b0b 	bleq	34528c <__ccfg+0x3252e4>
}
    265c:	0b380b0c 	bleq	e05294 <__ccfg+0xde52ec>
int ser_out (word st, const char *m) {
    2660:	0d0d0000 	stceq	0, cr0, [sp, #-0]
	if ((prcs = running (__outserial)) != 0) {
    2664:	3a0e0300 	bcc	38326c <__ccfg+0x3632c4>
    2668:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    266c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		join (prcs, st);
    2670:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
		release;
    2674:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	if (*m)
    2678:	0b3b0b3a 	bleq	ec5368 <__ccfg+0xea53c0>
		prcs = strlen (m) +1;
    267c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2680:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2684:	010f0000 	mrseq	r0, CPSR
    2688:	01134901 	tsteq	r3, r1, lsl #18
    268c:	10000013 	andne	r0, r0, r3, lsl r0
		umwait (st);
    2690:	00000021 	andeq	r0, r0, r1, lsr #32
    2694:	03001611 	movweq	r1, #1553	; 0x611
		prcs =  m [1] + 3;
    2698:	3b0b3a0e 	blcc	2d0ed8 <__ccfg+0x2b0f30>
	if (*m)
    269c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		strcpy (buf, m);
    26a0:	12000013 	andne	r0, r0, #19
    26a4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	if (runstrand (__outserial, buf) == 0) {
    26a8:	00001301 	andeq	r1, r0, r1, lsl #6
    26ac:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
		ufree (buf);
    26b0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    26b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		memcpy (buf, m, prcs);
    26b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    26c0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
}
    26c4:	15150000 	ldrne	r0, [r5, #-0]
    26c8:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
int ser_in (word st, char *buf, int len) {
    26cc:	00130113 	andseq	r0, r3, r3, lsl r1
    26d0:	01131600 	tsteq	r3, r0, lsl #12
	if (len == 0)
    26d4:	0b3a0b0b 	bleq	e85308 <__ccfg+0xe65360>
	if (__inpline == NULL) {
    26d8:	0b39053b 	bleq	e43bcc <__ccfg+0xe23c24>
		if ((prcs = running (__inserial)) == 0) {
    26dc:	00001301 	andeq	r1, r0, r1, lsl #6
    26e0:	03000d17 	movweq	r0, #3351	; 0xd17
			prcs = runthread (__inserial);
    26e4:	3b0b3a0e 	blcc	2d0f24 <__ccfg+0x2b0f7c>
    26e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (prcs == 0) {
    26ec:	000b3813 	andeq	r3, fp, r3, lsl r8
				npwait (st);
    26f0:	01131800 	tsteq	r3, r0, lsl #16
		release;
    26f4:	0b0b0e03 	bleq	2c5f08 <__ccfg+0x2a5f60>
		join (prcs, st);
    26f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26fc:	13010b39 	movwne	r0, #6969	; 0x1b39
	if (*__inpline == NULL) // bin cmd
    2700:	21190000 	tstcs	r9, r0
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2704:	2f134900 	svccs	0x00134900
	if (prcs >= len)
    2708:	1a00000b 	bne	273c <ser_in+0x70>
		prcs = len-1;
    270c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	memcpy (buf, __inpline, prcs);
    2710:	0b3b0b3a 	bleq	ec5400 <__ccfg+0xea5458>
    2714:	13490b39 	movtne	r0, #39737	; 0x9b39
    2718:	0a020c3f 	beq	8581c <__ccfg+0x65874>
	ufree (__inpline);
    271c:	341b0000 	ldrcc	r0, [fp], #-0
	__inpline = NULL;
    2720:	3a0e0300 	bcc	383328 <__ccfg+0x363380>
	if (*buf) // if it's NULL, it's a bin cmd
    2724:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		buf [prcs] = '\0';
    2728:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    272c:	1c00000a 	stcne	0, cr0, [r0], {10}
		prcs = strlen (__inpline);
    2730:	0e03012e 	adfeqsp	f0, f3, #0.5
    2734:	0b3b0b3a 	bleq	ec5424 <__ccfg+0xea547c>
		return 0;
    2738:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    273c:	01111349 	tsteq	r1, r9, asr #6
    2740:	0a400112 	beq	1002b90 <__ccfg+0xfe2be8>
int ser_outf (word st, const char *m, ...) {
    2744:	00001301 	andeq	r1, r0, r1, lsl #6
    2748:	0300051d 	movweq	r0, #1309	; 0x51d
	if ((prcs = running (__outserial)) != 0) {
    274c:	3b0b3a08 	blcc	2d0f74 <__ccfg+0x2b0fcc>
    2750:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		join (prcs, st);
    2754:	00060213 	andeq	r0, r6, r3, lsl r2
    2758:	00051e00 	andeq	r1, r5, r0, lsl #28
		release;
    275c:	0b3a0e03 	bleq	e85f70 <__ccfg+0xe65fc8>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2760:	0b390b3b 	bleq	e45454 <__ccfg+0xe254ac>
    2764:	0a021349 	beq	87490 <__ccfg+0x674e8>
    2768:	051f0000 	ldreq	r0, [pc, #-0]	; 2770 <ser_outf+0x2c>
		umwait (st);
    276c:	3a080300 	bcc	203374 <__ccfg+0x1e33cc>
    2770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (runstrand (__outserial, buf) == 0) {
    2774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2778:	2000000a 	andcs	r0, r0, sl
    277c:	0e03012e 	adfeqsp	f0, f3, #0.5
		ufree (buf);
    2780:	0b3b0b3a 	bleq	ec5470 <__ccfg+0xea54c8>
		npwait (st);
    2784:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
    2788:	0b201349 	bleq	8074b4 <__ccfg+0x7e750c>
    278c:	00001301 	andeq	r1, r0, r1, lsl #6
    2790:	03000521 	movweq	r0, #1313	; 0x521
    2794:	3b0b3a08 	blcc	2d0fbc <__ccfg+0x2b1014>
int ser_inf (word st, const char *fmt, ...) {
    2798:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    279c:	22000013 	andcs	r0, r0, #19
	if (fmt == NULL)
    27a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	if (__inpline == NULL) {
    27a4:	0b3b0b3a 	bleq	ec5494 <__ccfg+0xea54ec>
		if ((prcs = running (__inserial)) == 0) {
    27a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    27ac:	34230000 	strtcc	r0, [r3], #-0
			prcs = runthread (__inserial);
    27b0:	3a080300 	bcc	2033b8 <__ccfg+0x1e3410>
    27b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (prcs == 0) {
    27b8:	0013490b 	andseq	r4, r3, fp, lsl #18
				npwait (st);
    27bc:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
		release;
    27c0:	01111331 	tsteq	r1, r1, lsr r3
		join (prcs, st);
    27c4:	0a400112 	beq	1002c14 <__ccfg+0xfe2c6c>
    27c8:	05250000 	streq	r0, [r5, #-0]!
	va_start (ap, fmt);
    27cc:	02133100 	andseq	r3, r3, #0, 2
	prcs = vscan (__inpline, fmt, ap);
    27d0:	26000006 	strcs	r0, [r0], -r6
    27d4:	13310034 	teqne	r1, #52	; 0x34
	ufree (__inpline);
    27d8:	1d270000 	stcne	0, cr0, [r7, #-0]
	__inpline = NULL;
    27dc:	11133101 	tstne	r3, r1, lsl #2
}
    27e0:	58011201 	stmdapl	r1, {r0, r9, ip}
    27e4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    27e8:	2800000b 	stmdacs	r0, {r0, r1, r3}
		return 0;
    27ec:	13310005 	teqne	r1, #5
    27f0:	00000a02 	andeq	r0, r0, r2, lsl #20
    27f4:	31000529 	tstcc	r0, r9, lsr #10
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27f8:	00000013 	andeq	r0, r0, r3, lsl r0
    27fc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2800:	030b130e 	movweq	r1, #45838	; 0xb30e
	RF_cmdFs.frequency = 
    2804:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
}
    2808:	10011106 	andne	r1, r1, r6, lsl #2
    280c:	02000006 	andeq	r0, r0, #6
    2810:	0b0b0024 	bleq	2c28a8 <__ccfg+0x2a2900>
    2814:	0e030b3e 	vmoveq.16	d3[0], r0
static int option (int opt, address val) {
    2818:	16030000 	strne	r0, [r3], -r0
    281c:	3a0e0300 	bcc	383424 <__ccfg+0x36347c>
    2820:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2824:	0013490b 	andseq	r4, r3, fp, lsl #18
    2828:	00240400 	eoreq	r0, r4, r0, lsl #8
    282c:	0b3e0b0b 	bleq	f85460 <__ccfg+0xf654b8>
    2830:	00000803 	andeq	r0, r0, r3, lsl #16
    2834:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2838:	06000013 			; <UNDEFINED> instruction: 0x06000013
    283c:	13490035 	movtne	r0, #36917	; 0x9035
    2840:	13070000 	movwne	r0, #28672	; 0x7000
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2844:	3a0b0b01 	bcc	2c5450 <__ccfg+0x2a54a8>
    2848:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			goto RVal;
    284c:	0013010b 	andseq	r0, r3, fp, lsl #2
			_BIS (dstate, DSTATE_RXON);
    2850:	000d0800 	andeq	r0, sp, r0, lsl #16
    2854:	0b3a0e03 	bleq	e86068 <__ccfg+0xe660c0>
	int ret = 0;
    2858:	0b390b3b 	bleq	e4554c <__ccfg+0xe255a4>
			p_trigger (drvprcs, qevent);
    285c:	0b0b1349 	bleq	2c7588 <__ccfg+0x2a75e0>
    2860:	0b0c0b0d 	bleq	30549c <__ccfg+0x2e54f4>
    2864:	00000b38 	andeq	r0, r0, r8, lsr fp
    2868:	03000d09 	movweq	r0, #3337	; 0xd09
    286c:	3b0b3a0e 	blcc	2d10ac <__ccfg+0x2b1104>
    2870:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2874:	000b3813 	andeq	r3, fp, r3, lsl r8
    2878:	00340a00 	eorseq	r0, r4, r0, lsl #20
    287c:	0b3a0e03 	bleq	e86090 <__ccfg+0xe660e8>
    2880:	0b390b3b 	bleq	e45574 <__ccfg+0xe255cc>
}
    2884:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2768 <ser_outf+0x24>
			_BIC (dstate, DSTATE_RXON);
    2888:	00000c3c 	andeq	r0, r0, ip, lsr ip
    288c:	0b000f0b 	bleq	64c0 <__exidx_end+0x880>
			statid = (val == NULL) ? 0 : *val;
    2890:	0013490b 	andseq	r4, r3, fp, lsl #18
    2894:	01010c00 	tsteq	r1, r0, lsl #24
	int ret = 0;
    2898:	13011349 	movwne	r1, #4937	; 0x1349
			ret = (int) statid;
    289c:	210d0000 	mrscs	r0, (UNDEF: 13)
	if (val != NULL)
    28a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
		*val = ret;
    28a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			ret = rbuffl + 2;
    28a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    28ac:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (val != NULL) {
    28b0:	150f0000 	strne	r0, [pc, #-0]	; 28b8 <option+0xa0>
				memcpy (val, &rxstat,
    28b4:	010c2701 	tsteq	ip, r1, lsl #14
    28b8:	10000013 	andne	r0, r0, r3, lsl r0
				memset (&rxstat, 0, 
    28bc:	13490005 	movtne	r0, #36869	; 0x9005
    28c0:	34110000 	ldrcc	r0, [r1], #-0
			if (val == NULL)
    28c4:	3a0e0300 	bcc	3834cc <__ccfg+0x363524>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    28c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    28cc:	3f13490b 	svccc	0x0013490b
				utimer_set (bckf_timer, *val);
    28d0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    28d4:	01131200 	tsteq	r3, r0, lsl #4
    28d8:	0b3a0b0b 	bleq	e8550c <__ccfg+0xe65564>
			for (ret = 0; ret < 8; ret++)
    28dc:	0b39053b 	bleq	e43dd0 <__ccfg+0xe23e28>
				if (RF_cmdPropRadioDivSetup.txPower
    28e0:	00001301 	andeq	r1, r0, r1, lsl #6
					== patable [ret])
    28e4:	03000d13 	movweq	r0, #3347	; 0xd13
				if (RF_cmdPropRadioDivSetup.txPower
    28e8:	3b0b3a0e 	blcc	2d1128 <__ccfg+0x2b1180>
			for (ret = 0; ret < 8; ret++)
    28ec:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    28f0:	000b3813 	andeq	r3, fp, r3, lsl r8
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28f4:	01131400 	tsteq	r3, r0, lsl #8
    28f8:	0b0b0e03 	bleq	2c610c <__ccfg+0x2a6164>
    28fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2900:	13010b39 	movwne	r0, #6969	; 0x1b39
    2904:	21150000 	tstcs	r5, r0
			_BIS (dstate, DSTATE_IRST);
    2908:	2f134900 	svccs	0x00134900
    290c:	1600000b 	strne	r0, [r0], -fp
    2910:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2860 <option+0x48>
			ret = (int) channel;
    2914:	0b3a0e03 	bleq	e86128 <__ccfg+0xe66180>
			goto RVal;
    2918:	0b390b3b 	bleq	e4560c <__ccfg+0xe25664>
				(*val > 7) ? 7 : *val;
    291c:	01110c27 	tsteq	r1, r7, lsr #24
    2920:	0a400112 	beq	1002d70 <__ccfg+0xfe2dc8>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2924:	00001301 	andeq	r1, r0, r1, lsl #6
    2928:	03000517 	movweq	r0, #1303	; 0x517
			plugch ();
    292c:	3b0b3a0e 	blcc	2d116c <__ccfg+0x2b11c4>
			_BIS (dstate, DSTATE_IRST);
    2930:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2934:	00060213 	andeq	r0, r6, r3, lsl r2
			ret = (int) vrate;
    2938:	00341800 	eorseq	r1, r4, r0, lsl #16
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
    2940:	0b390b3b 	bleq	e45634 <__ccfg+0xe2568c>
    2944:	06021349 	streq	r1, [r2], -r9, asr #6
    2948:	0a190000 	beq	642950 <__ccfg+0x6229a8>
    294c:	3a0e0300 	bcc	383554 <__ccfg+0x3635ac>
    2950:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2954:	1a00000b 	bne	2988 <option+0x170>
    2958:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    295c:	341b0000 	ldrcc	r0, [fp], #-0
    2960:	3a080300 	bcc	203568 <__ccfg+0x1e35c0>
    2964:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2968:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			syserror (EREQPAR, "cc13 op");
    296c:	0000000a 	andeq	r0, r0, sl
    2970:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2974:	030b130e 	movweq	r1, #45838	; 0xb30e
    2978:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    297c:	10011106 	andne	r1, r1, r6, lsl #2
    2980:	02000006 	andeq	r0, r0, #6
    2984:	0b0b0024 	bleq	2c2a1c <__ccfg+0x2a2a74>
    2988:	0e030b3e 	vmoveq.16	d3[0], r0
    298c:	16030000 	strne	r0, [r3], -r0
    2990:	3a0e0300 	bcc	383598 <__ccfg+0x3635f0>
    2994:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2998:	0013490b 	andseq	r4, r3, fp, lsl #18
    299c:	00240400 	eoreq	r0, r4, r0, lsl #8
    29a0:	0b3e0b0b 	bleq	f855d4 <__ccfg+0xf6562c>
    29a4:	00000803 	andeq	r0, r0, r3, lsl #16
static void issue_cmd (lword cmd) {
    29a8:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    29ac:	06000013 			; <UNDEFINED> instruction: 0x06000013
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29b0:	13490035 	movtne	r0, #36917	; 0x9035
    29b4:	0f070000 	svceq	0x00070000
    29b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		if (res != 0x86)
    29bc:	08000013 	stmdaeq	r0, {r0, r1, r4}
			syserror (EHARDWARE, "hang ic0");
    29c0:	0b0b0113 	bleq	2c2e14 <__ccfg+0x2a2e6c>
    29c4:	0b3b0b3a 	bleq	ec56b4 <__ccfg+0xea570c>
		if (cnt-- == 0) {
    29c8:	13010b39 	movwne	r0, #6969	; 0x1b39
			diag ("HUP %lx %lx", cmd, res);
    29cc:	0d090000 	stceq	0, cr0, [r9, #-0]
    29d0:	3a0e0300 	bcc	3835d8 <__ccfg+0x363630>
			syserror (EHARDWARE, "hang ic0");
    29d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		udelay (1);
    29d8:	0b13490b 	bleq	4d4e0c <__ccfg+0x4b4e64>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29dc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
}
    29e0:	000b380b 	andeq	r3, fp, fp, lsl #16
    29e4:	000d0a00 	andeq	r0, sp, r0, lsl #20
    29e8:	0b3a0e03 	bleq	e861fc <__ccfg+0xe66254>
    29ec:	0b390b3b 	bleq	e456e0 <__ccfg+0xe25738>
static void rx_de () {
    29f0:	0b381349 	bleq	e0771c <__ccfg+0xde7774>
	if ((dstate & DSTATE_RXAC) == 0)
    29f4:	340b0000 	strcc	r0, [fp], #-0
    29f8:	3a0e0300 	bcc	383600 <__ccfg+0x363658>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	_BIC (dstate, DSTATE_RXAC);
    2a00:	3f13490b 	svccc	0x0013490b
    2a04:	000c3c0c 	andeq	r3, ip, ip, lsl #24
}
    2a08:	01010c00 	tsteq	r1, r0, lsl #24
    2a0c:	13011349 	movwne	r1, #4937	; 0x1349
    2a10:	210d0000 	mrscs	r0, (UNDEF: 13)
static void rf_off () {
    2a14:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
	if ((dstate & DSTATE_RFON) == 0)
    2a18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2a1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	IntDisable (INT_RFC_CPE_0);
    2a20:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a24:	150f0000 	strne	r0, [pc, #-0]	; 2a2c <rf_off+0x18>
    2a28:	010c2701 	tsteq	ip, r1, lsl #14
	RFCAdi3VcoLdoVoltageMode (false);
    2a2c:	10000013 	andne	r0, r0, r3, lsl r0
	RFCSynthPowerDown ();
    2a30:	13490005 	movtne	r0, #36869	; 0x9005
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a34:	34110000 	ldrcc	r0, [r1], #-0
    2a38:	3a0e0300 	bcc	383640 <__ccfg+0x363698>
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a3c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a40:	3f13490b 	svccc	0x0013490b
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a44:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a48:	01131200 	tsteq	r3, r0, lsl #4
    2a4c:	0b3a0b0b 	bleq	e85680 <__ccfg+0xe656d8>
    2a50:	0b39053b 	bleq	e43f44 <__ccfg+0xe23f9c>
	_BIC (dstate, DSTATE_RFON);
    2a54:	00001301 	andeq	r1, r0, r1, lsl #6
    2a58:	03000d13 	movweq	r0, #3347	; 0xd13
}
    2a5c:	3b0b3a0e 	blcc	2d129c <__ccfg+0x2b12f4>
    2a60:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2a64:	000b3813 	andeq	r3, fp, r3, lsl r8
    2a68:	01131400 	tsteq	r3, r0, lsl #8
    2a6c:	0b0b0e03 	bleq	2c6280 <__ccfg+0x2a62d8>
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a74:	13010b39 	movwne	r0, #6969	; 0x1b39
    2a78:	21150000 	tstcs	r5, r0
		if (cmd->status == tstat)
    2a7c:	2f134900 	svccs	0x00134900
		if (timeout-- == 0) {
    2a80:	1600000b 	strne	r0, [r0], -fp
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2a88:	0b3b0b3a 	bleq	ec5778 <__ccfg+0xea57d0>
    2a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
			syserror (EHARDWARE, "rt2");
    2a90:	0a020c3f 	beq	85b94 <__ccfg+0x65bec>
    2a94:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
		udelay (1);
    2a98:	030c3f01 	movweq	r3, #52993	; 0xcf01
		if (cmd->status == tstat)
    2a9c:	3b0b3a0e 	blcc	2d12dc <__ccfg+0x2b1334>
}
    2aa0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2aa4:	1201110c 	andne	r1, r1, #12, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2aa8:	000a4001 	andeq	r4, sl, r1
    2aac:	00051800 	andeq	r1, r5, r0, lsl #16
static void rf_on () {
    2ab0:	0b3a0e03 	bleq	e862c4 <__ccfg+0xe6631c>
    2ab4:	0b390b3b 	bleq	e457a8 <__ccfg+0xe25800>
	OSCHF_TurnOnXosc();
    2ab8:	06021349 	streq	r1, [r2], -r9, asr #6
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2abc:	34190000 	ldrcc	r0, [r9], #-0
    2ac0:	3a0e0300 	bcc	3836c8 <__ccfg+0x363720>
    2ac4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ac8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2acc:	1a000006 	bne	2aec <rf_on.part.0+0x44>
    2ad0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2ad4:	341b0000 	ldrcc	r0, [fp], #-0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2ad8:	3a080300 	bcc	2036e0 <__ccfg+0x1e3738>
	issue_cmd (
    2adc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ae0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ae4:	0000000a 	andeq	r0, r0, sl
    2ae8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2aec:	030b130e 	movweq	r1, #45838	; 0xb30e
   pPatchTab[80] = 0;
    2af0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   } while (--nIterations);
    2af4:	10011106 	andne	r1, r1, r6, lsl #2
   pPatchTab[53] = 2;
    2af8:	02000006 	andeq	r0, r0, #6
    2afc:	0b0b0024 	bleq	2c2b94 <__ccfg+0x2a2bec>
   pPatchTab[55] = 3;
    2b00:	0e030b3e 	vmoveq.16	d3[0], r0
   pPatchTab[110] = 4;
    2b04:	16030000 	strne	r0, [r3], -r0
   pPatchTab[107] = 5;
    2b08:	3a0e0300 	bcc	383710 <__ccfg+0x363768>
   pPatchTab[65] = 6;
    2b0c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b10:	0013490b 	andseq	r4, r3, fp, lsl #18
   pPatchTab[57] = 1;
    2b14:	00240400 	eoreq	r0, r4, r0, lsl #8
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b18:	0b3e0b0b 	bleq	f8574c <__ccfg+0xf657a4>
   const uint32_t *pS = patchGenfskRfe;
    2b1c:	00000803 	andeq	r0, r0, r3, lsl #16
      t2 = *pS++;
    2b20:	03011305 	movweq	r1, #4869	; 0x1305
      t4 = *pS++;
    2b24:	3a0b0b0e 	bcc	2c5764 <__ccfg+0x2a57bc>
      t6 = *pS++;
    2b28:	010b3b0b 	tsteq	fp, fp, lsl #22
      t8 = *pS++;
    2b2c:	06000013 			; <UNDEFINED> instruction: 0x06000013
      *pD++ = t1;
    2b30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
      *pD++ = t2;
    2b34:	0b381349 	bleq	e07860 <__ccfg+0xde78b8>
      *pD++ = t3;
    2b38:	00000c34 	andeq	r0, r0, r4, lsr ip
      *pD++ = t5;
    2b3c:	0b000f07 	bleq	6760 <__exidx_end+0xb20>
      *pD++ = t7;
    2b40:	0800000b 	stmdaeq	r0, {r0, r1, r3}
   } while (--nIterations);
    2b44:	13490026 	movtne	r0, #36902	; 0x9026
    2b48:	35090000 	strcc	r0, [r9, #-0]
      *pD++ = t8;
    2b4c:	00134900 	andseq	r4, r3, r0, lsl #18
   } while (--nIterations);
    2b50:	000f0a00 	andeq	r0, pc, r0, lsl #20
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b54:	13490b0b 	movtne	r0, #39691	; 0x9b0b
   *pD++ = t2;
    2b58:	130b0000 	movwne	r0, #45056	; 0xb000
   *pD++ = t3;
    2b5c:	3a0b0b01 	bcc	2c5768 <__ccfg+0x2a57c0>
   *pD++ = t4;
    2b60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   *pD++ = t5;
    2b64:	0013010b 	andseq	r0, r3, fp, lsl #2
    2b68:	000d0c00 	andeq	r0, sp, r0, lsl #24
	RFCAdi3VcoLdoVoltageMode (true);
    2b6c:	0b3a0e03 	bleq	e86380 <__ccfg+0xe663d8>
    2b70:	0b390b3b 	bleq	e45864 <__ccfg+0xe258bc>
       	RFCRfTrimSet (&rfTrim);
    2b74:	0b0b1349 	bleq	2c78a0 <__ccfg+0x2a78f8>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b78:	0b0c0b0d 	bleq	3057b4 <__ccfg+0x2e580c>
    2b7c:	00000b38 	andeq	r0, r0, r8, lsr fp
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b80:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2b84:	3b0b3a0e 	blcc	2d13c4 <__ccfg+0x2b141c>
	issue_cmd ((lword)&cmd_srt);
    2b88:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2b8c:	000b3813 	andeq	r3, fp, r3, lsl r8
	issue_cmd ((lword)&RF_cmdFs);
    2b90:	00340e00 	eorseq	r0, r4, r0, lsl #28
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b94:	0b3a0e03 	bleq	e863a8 <__ccfg+0xe66400>
    2b98:	0b390b3b 	bleq	e4588c <__ccfg+0xe258e4>
    2b9c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2a80 <wait_cmd.constprop.0+0x10>
	IntEnable (INT_RFC_CPE_0);
    2ba0:	00000c3c 	andeq	r0, r0, ip, lsr ip
	_BIC (dstate, DSTATE_IRST);
    2ba4:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    2ba8:	00130113 	andseq	r0, r3, r3, lsl r1
    2bac:	00211000 	eoreq	r1, r1, r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2bb0:	16110000 	ldrne	r0, [r1], -r0
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bb4:	3a0e0300 	bcc	3837bc <__ccfg+0x363814>
	IntEnable (INT_RFC_CPE_0);
    2bb8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2bbc:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    2bc0:	01151200 	tsteq	r5, r0, lsl #4
	IntEnable (INT_RFC_CPE_0);
    2bc4:	13010c27 	movwne	r0, #7207	; 0x1c27
    2bc8:	05130000 	ldreq	r0, [r3, #-0]
    2bcc:	00134900 	andseq	r4, r3, r0, lsl #18
    2bd0:	00341400 	eorseq	r1, r4, r0, lsl #8
    2bd4:	0b3a0e03 	bleq	e863e8 <__ccfg+0xe66440>
    2bd8:	0b39053b 	bleq	e440cc <__ccfg+0xe24124>
    2bdc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2ac0 <rf_on.part.0+0x18>
    2be0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2be4:	0b011315 	bleq	47840 <__ccfg+0x27898>
    2be8:	3b0b3a0b 	blcc	2d141c <__ccfg+0x2b1474>
    2bec:	010b3905 	tsteq	fp, r5, lsl #18
    2bf0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2bf4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2bf8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2bfc:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c00:	00000b38 	andeq	r0, r0, r8, lsr fp
    2c04:	03011317 	movweq	r1, #4887	; 0x1317
    2c08:	3a0b0b0e 	bcc	2c5848 <__ccfg+0x2a58a0>
    2c0c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c10:	0013010b 	andseq	r0, r3, fp, lsl #2
    2c14:	00211800 	eoreq	r1, r1, r0, lsl #16
    2c18:	0b2f1349 	bleq	bc7944 <__ccfg+0xba799c>
    2c1c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2c20:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2c24:	3b0b3a0e 	blcc	2d1464 <__ccfg+0x2b14bc>
static void rx_int_enable () {
    2c28:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c2c:	1113490c 	tstne	r3, ip, lsl #18
    2c30:	40011201 	andmi	r1, r1, r1, lsl #4
    2c34:	0013010a 	andseq	r0, r3, sl, lsl #2
    2c38:	00051a00 	andeq	r1, r5, r0, lsl #20
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c3c:	0b3a0803 	bleq	e84c50 <__ccfg+0xe64ca8>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c40:	0b390b3b 	bleq	e45934 <__ccfg+0xe2598c>
    2c44:	06021349 	streq	r1, [r2], -r9, asr #6
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c48:	341b0000 	ldrcc	r0, [fp], #-0
    2c4c:	3a080300 	bcc	203854 <__ccfg+0x1e38ac>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c58:	1c000006 	stcne	0, cr0, [r0], {6}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c5c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c60:	0b3b0b3a 	bleq	ec5950 <__ccfg+0xea59a8>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c64:	01110b39 	tsteq	r1, r9, lsr fp
		if (db->status == DATA_ENTRY_FINISHED) {
    2c68:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c6c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2c70:	3b0b3a0e 	blcc	2d14b0 <__ccfg+0x2b1508>
			nr++;
    2c74:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c78:	1113490c 	tstne	r3, ip, lsl #18
    2c7c:	40011201 	andmi	r1, r1, r1, lsl #4
    2c80:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    2c84:	08030034 	stmdaeq	r3, {r2, r4, r5}
				__dp [pl + 1] = __dp [pl] - 128;
    2c88:	0b3b0b3a 	bleq	ec5978 <__ccfg+0xea59d0>
				pl = __dp [1] + 2;
    2c8c:	13490b39 	movtne	r0, #39737	; 0x9b39
				__dp [pl + 1] = __dp [pl] - 128;
    2c90:	00000a02 	andeq	r0, r0, r2, lsl #20
    2c94:	03012e1f 	movweq	r2, #7711	; 0x1e1f
				__dp [pl] = 0;
    2c98:	3b0b3a0e 	blcc	2d14d8 <__ccfg+0x2b1530>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c9c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2ca0:	1201110c 	andne	r1, r1, #12, 2
    2ca4:	480a4001 	stmdami	sl, {r0, lr}
			db->status = DATA_ENTRY_PENDING;
    2ca8:	0013010a 	andseq	r0, r3, sl, lsl #2
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2cac:	00052000 	andeq	r2, r5, r0
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2cb0:	0b3a0803 	bleq	e84cc4 <__ccfg+0xe64d1c>
				diag ("BAD RX");
    2cb4:	0b390b3b 	bleq	e459a8 <__ccfg+0xe25a00>
    2cb8:	0a021349 	beq	879e4 <__ccfg+0x67a3c>
	if (nr) {
    2cbc:	0a210000 	beq	842cc4 <__ccfg+0x822d1c>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc0:	3a080300 	bcc	2038c8 <__ccfg+0x1e3920>
}
    2cc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc8:	0001110b 	andeq	r1, r1, fp, lsl #2
    2ccc:	010b2200 	mrseq	r2, R11_fiq
    2cd0:	13010655 	movwne	r0, #5717	; 0x1655
}
    2cd4:	34230000 	strtcc	r0, [r3], #-0
    2cd8:	3a080300 	bcc	2038e0 <__ccfg+0x1e3938>
    2cdc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ce0:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ce4:	010b2400 	tsteq	fp, r0, lsl #8
    2ce8:	01120111 	tsteq	r2, r1, lsl r1
    2cec:	00001301 	andeq	r1, r0, r1, lsl #6
    2cf0:	11010b25 	tstne	r1, r5, lsr #22
    2cf4:	00011201 	andeq	r1, r1, r1, lsl #4
thread (cc1350_driver)
    2cf8:	11010000 	mrsne	r0, (UNDEF: 1)
    2cfc:	130e2501 	movwne	r2, #58625	; 0xe501
    2d00:	1b0e030b 	blne	383934 <__ccfg+0x36398c>
    2d04:	1106550e 	tstne	r6, lr, lsl #10
    2d08:	00061001 	andeq	r1, r6, r1
		if (dstate & DSTATE_IRST) {
    2d0c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2d10:	0b3e0b0b 	bleq	f85944 <__ccfg+0xf6599c>
    2d14:	00000e03 	andeq	r0, r0, r3, lsl #28
			rf_off ();
    2d18:	03001603 	movweq	r1, #1539	; 0x603
			_BIC (dstate,
    2d1c:	3b0b3a0e 	blcc	2d155c <__ccfg+0x2b15b4>
    2d20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (dstate & DSTATE_RXAC) {
    2d24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2d28:	0b0b0024 	bleq	2c2dc0 <__ccfg+0x2a2e18>
			if ((dstate & DSTATE_RXON) == 0)
    2d2c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
				rx_de ();
    2d30:	13050000 	movwne	r0, #20480	; 0x5000
		if (paylen == 0) {
    2d34:	0b0e0301 	bleq	383940 <__ccfg+0x363998>
    2d38:	3b0b3a0b 	blcc	2d156c <__ccfg+0x2b15c4>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d3c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d40:	000d0600 	andeq	r0, sp, r0, lsl #12
    2d44:	13490e03 	movtne	r0, #40451	; 0x9e03
    2d48:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d4c:	0f070000 	svceq	0x00070000
    2d50:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2d54:	00260800 	eoreq	r0, r6, r0, lsl #16
    2d58:	00001349 	andeq	r1, r0, r9, asr #6
    2d5c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2d60:	0a000013 	beq	2db4 <cc1350_driver+0xbc>
    2d64:	0b0b000f 	bleq	2c2da8 <__ccfg+0x2a2e00>
    2d68:	00001349 	andeq	r1, r0, r9, asr #6
		} else if (dstate & DSTATE_RXON) {
    2d6c:	0b01130b 	bleq	479a0 <__ccfg+0x279f8>
	if (dstate & DSTATE_RFON)
    2d70:	3b0b3a0b 	blcc	2d15a4 <__ccfg+0x2b15fc>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d74:	010b390b 	tsteq	fp, fp, lsl #18
		re->status = DATA_ENTRY_PENDING;
    2d78:	0c000013 	stceq	0, cr0, [r0], {19}
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d7c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	issue_cmd ((lword)&RF_cmdPropRx);
    2d80:	0b3b0b3a 	bleq	ec5a70 <__ccfg+0xea5ac8>
	_BIS (dstate, DSTATE_RXAC);
    2d84:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d88:	0b0d0b0b 	bleq	3459bc <__ccfg+0x325a14>
    2d8c:	0b380b0c 	bleq	e059c4 <__ccfg+0xde5a1c>
    2d90:	0d0d0000 	stceq	0, cr0, [sp, #-0]
	if (dstate & DSTATE_RXAC)
    2d94:	3a0e0300 	bcc	38399c <__ccfg+0x3639f4>
    2d98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (statid != 0xffff)
    2d9c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2da0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2da4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				RF_cmdPropTx.pktLen = (byte) paylen;
    2da8:	0b3b0b3a 	bleq	ec5a98 <__ccfg+0xea5af0>
		if (paylen == 0) {
    2dac:	13490b39 	movtne	r0, #39737	; 0x9b39
			wait (qevent, DR_LOOP);
    2db0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2db4:	010f0000 	mrseq	r0, CPSR
			if (dstate & DSTATE_RXAC) {
    2db8:	01134901 	tsteq	r3, r1, lsl #18
    2dbc:	10000013 	andne	r0, r0, r3, lsl r0
				rx_int_enable ();
    2dc0:	00000021 	andeq	r0, r0, r1, lsr #32
			release;
    2dc4:	03001611 	movweq	r1, #1553	; 0x611
			} else if (dstate & DSTATE_RFON) {
    2dc8:	3b0b3a0e 	blcc	2d1608 <__ccfg+0x2b1660>
				delay (offdelay, DR_GOOF);
    2dcc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2dd0:	12000013 	andne	r0, r0, #19
    2dd4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		if (bckf_timer) {
    2dd8:	00001301 	andeq	r1, r0, r1, lsl #6
			wait (qevent, DR_LOOP);
    2ddc:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2de0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2de4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			delay (bckf_timer, DR_LOOP);
    2de8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2dec:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (dstate & DSTATE_RXAC)
    2df0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2df4:	13150000 	tstne	r5, #0
	if (dstate & DSTATE_RFON)
    2df8:	3a0b0b01 	bcc	2c5a04 <__ccfg+0x2a5a5c>
    2dfc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		rx_de ();
    2e00:	0013010b 	andseq	r0, r3, fp, lsl #2
		RF_cmdPropTx . status = 0;
    2e04:	000d1600 	andeq	r1, sp, r0, lsl #12
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e08:	0b3a0e03 	bleq	e8661c <__ccfg+0xe66674>
    2e0c:	0b39053b 	bleq	e44300 <__ccfg+0xe24358>
    2e10:	0b381349 	bleq	e07b3c <__ccfg+0xde7b94>
		issue_cmd ((lword)&cmd_cs);
    2e14:	13170000 	tstne	r7, #0
		if (dstate & DSTATE_IRST)
    2e18:	0b0e0301 	bleq	383a24 <__ccfg+0x363a7c>
    2e1c:	3b0b3a0b 	blcc	2d1650 <__ccfg+0x2b16a8>
    2e20:	010b3905 	tsteq	fp, r5, lsl #18
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e24:	18000013 	stmdane	r0, {r0, r1, r4}
    2e28:	13490021 	movtne	r0, #36897	; 0x9021
			delay (1, DR_XMIT);
    2e2c:	00000b2f 	andeq	r0, r0, pc, lsr #22
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e30:	3f012e19 	svccc	0x00012e19
    2e34:	3a0e030c 	bcc	383a6c <__ccfg+0x363ac4>
    2e38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e3c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2e40:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				RF_cmdPropTx . status = 0;
    2e44:	010a4001 	tsteq	sl, r1
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e48:	1a000013 	bne	2e9c <cc1350_driver+0x1a4>
				issue_cmd ((lword)&RF_cmdPropTx);
    2e4c:	08030005 	stmdaeq	r3, {r0, r2}
				proceed (DR_XMIT);
    2e50:	0b3b0b3a 	bleq	ec5b40 <__ccfg+0xea5b98>
    2e54:	13490b39 	movtne	r0, #39737	; 0x9b39
			txtries++;
    2e58:	00000602 	andeq	r0, r0, r2, lsl #12
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e5c:	0300341b 	movweq	r3, #1051	; 0x41b
    2e60:	3b0b3a08 	blcc	2d1688 <__ccfg+0x2b16e0>
    2e64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e68:	00060213 	andeq	r0, r6, r3, lsl r2
		goto DR_LOOP__;
    2e6c:	000a1c00 	andeq	r1, sl, r0, lsl #24
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e70:	0b3a0e03 	bleq	e86684 <__ccfg+0xe666dc>
		paylen = 0;
    2e74:	0b390b3b 	bleq	e45b68 <__ccfg+0xe25bc0>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e78:	0b1d0000 	bleq	742e80 <__ccfg+0x722ed8>
		txtries = 0;
    2e7c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e80:	00130101 	andseq	r0, r3, r1, lsl #2
    2e84:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2e88:	0b3a0803 	bleq	e84e9c <__ccfg+0xe64ef4>
    2e8c:	0b390b3b 	bleq	e45b80 <__ccfg+0xe25bd8>
    2e90:	0a021349 	beq	87bbc <__ccfg+0x67c14>
		    tcvphy_top (physid) == NULL)
    2e94:	0b1f0000 	bleq	7c2e9c <__ccfg+0x7a2ef4>
    2e98:	01065501 	tsteq	r6, r1, lsl #10
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e9c:	20000013 	andcs	r0, r0, r3, lsl r0
    2ea0:	08030034 	stmdaeq	r3, {r2, r4, r5}
			rf_off ();
    2ea4:	0b3b0b3a 	bleq	ec5b94 <__ccfg+0xea5bec>
endthread
    2ea8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2eac:	0b210000 	bleq	842eb4 <__ccfg+0x822f0c>
    2eb0:	00065501 	andeq	r5, r6, r1, lsl #10
    2eb4:	11010000 	mrsne	r0, (UNDEF: 1)
    2eb8:	130e2501 	movwne	r2, #58625	; 0xe501
    2ebc:	1b0e030b 	blne	383af0 <__ccfg+0x363b48>
    2ec0:	0006100e 	andeq	r1, r6, lr
    2ec4:	00240200 	eoreq	r0, r4, r0, lsl #4
    2ec8:	0b3e0b0b 	bleq	f85afc <__ccfg+0xf65b54>
    2ecc:	00000e03 	andeq	r0, r0, r3, lsl #28
    2ed0:	03001603 	movweq	r1, #1539	; 0x603
    2ed4:	3b0b3a0e 	blcc	2d1714 <__ccfg+0x2b176c>
    2ed8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2edc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2ee0:	13490026 	movtne	r0, #36902	; 0x9026
    2ee4:	24050000 	strcs	r0, [r5], #-0
void RFCCPE0IntHandler (void) {
    2ee8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eec:	0008030b 	andeq	r0, r8, fp, lsl #6
		_BIS (dstate, DSTATE_IRST);
    2ef0:	00160600 	andseq	r0, r6, r0, lsl #12
    2ef4:	0b3a0e03 	bleq	e86708 <__ccfg+0xe66760>
    2ef8:	0b39053b 	bleq	e443ec <__ccfg+0xe24444>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2efc:	00001349 	andeq	r1, r0, r9, asr #6
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f00:	0b011707 	bleq	48b24 <__ccfg+0x28b7c>
    2f04:	3b0b3a0b 	blcc	2d1738 <__ccfg+0x2b1790>
	p_trigger (drvprcs, qevent);
    2f08:	010b390b 	tsteq	fp, fp, lsl #18
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f0c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2f10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f14:	0b3b0b3a 	bleq	ec5c04 <__ccfg+0xea5c5c>
    2f18:	13490b39 	movtne	r0, #39737	; 0x9b39
    2f1c:	01090000 	mrseq	r0, (UNDEF: 9)
    2f20:	01134901 	tsteq	r3, r1, lsl #18
    2f24:	0a000013 	beq	2f78 <phys_cc1350+0x20>
    2f28:	13490021 	movtne	r0, #36897	; 0x9021
    2f2c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2f30:	0b01130b 	bleq	47b64 <__ccfg+0x27bbc>
	RISE_N_SHINE;
    2f34:	3b0b3a0b 	blcc	2d1768 <__ccfg+0x2b17c0>
    2f38:	010b390b 	tsteq	fp, fp, lsl #18
    2f3c:	0c000013 	stceq	0, cr0, [r0], {19}
}
    2f40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2f44:	0b3b0b3a 	bleq	ec5c34 <__ccfg+0xea5c8c>
    2f48:	13490b39 	movtne	r0, #39737	; 0x9b39
    2f4c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2f50:	0b000f0d 	bleq	6b8c <__exidx_end+0xf4c>
    2f54:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
void phys_cc1350 (int phy, int mbs) {
    2f58:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	if (rbuffl != 0)
    2f5c:	0b3a0b0b 	bleq	e85b90 <__ccfg+0xe65be8>
    2f60:	0b390b3b 	bleq	e45c54 <__ccfg+0xe25cac>
		syserror (ETOOMANY, "cc13");
    2f64:	00001301 	andeq	r1, r0, r1, lsl #6
		syserror (EREQPAR, "cc13 mb");
    2f68:	03000d0f 	movweq	r0, #3343	; 0xd0f
	if (mbs == 0)
    2f6c:	3b0b3a08 	blcc	2d1794 <__ccfg+0x2b17ec>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		syserror (EREQPAR, "cc13 mb");
    2f74:	000b3813 	andeq	r3, fp, r3, lsl r8
    2f78:	000f1000 	andeq	r1, pc, r0
	i = 0;
    2f7c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	rbuffl = (byte) mbs;
    2f80:	13110000 	tstne	r1, #0
		db->config.type = 0;	// General (data in structure)
    2f84:	0b0e0301 	bleq	383b90 <__ccfg+0x363be8>
	rbuffl = (byte) mbs;
    2f88:	3b0b3a05 	blcc	2d17a4 <__ccfg+0x2b17fc>
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f8c:	010b390b 	tsteq	fp, fp, lsl #18
    2f90:	12000013 	andne	r0, r0, #19
		if (db == NULL)
    2f94:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			syserror (EMALLOC, "cc13");
    2f98:	0b3b0b3a 	bleq	ec5c88 <__ccfg+0xea5ce0>
    2f9c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2fa0:	00000538 	andeq	r0, r0, r8, lsr r5
		db->status = DATA_ENTRY_PENDING;
    2fa4:	27001513 	smladcs	r0, r3, r5, r1
		if (i)
    2fa8:	1400000c 	strne	r0, [r0], #-12
			da->pNextEntry = (byte*) db;
    2fac:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		db->length = rbuffl + 2;
    2fb0:	13011349 	movwne	r1, #4937	; 0x1349
    2fb4:	05150000 	ldreq	r0, [r5, #-0]
		db->config.type = 0;	// General (data in structure)
    2fb8:	00134900 	andseq	r4, r3, r0, lsl #18
		db->length = rbuffl + 2;
    2fbc:	01131600 	tsteq	r3, r0, lsl #12
	db->pNextEntry = (byte*) re;
    2fc0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2fc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fc8:	13010b39 	movwne	r0, #6969	; 0x1b39
	if (rbuffs == NULL)
    2fcc:	0d170000 	ldceq	0, cr0, [r7, #-0]
	rbuffs->pCurrEntry = (byte*) re;
    2fd0:	3a0e0300 	bcc	383bd8 <__ccfg+0x363c30>
	rbuffs->pLastEntry = NULL;
    2fd4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fd8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fdc:	1800000b 	stmdane	r0, {r0, r1, r3}
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fe0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2fe4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
	rbuffl -= 2;
    2fec:	00000538 	andeq	r0, r0, r8, lsr r5
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ff0:	03011319 	movweq	r1, #4889	; 0x1319
	rbuffl -= 2;
    2ff4:	3a0b0b0e 	bcc	2c5c34 <__ccfg+0x2a5c8c>
	physid = phy;
    2ff8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ffc:	0013010b 	andseq	r0, r3, fp, lsl #2
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3000:	01131a00 	tsteq	r3, r0, lsl #20
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3004:	0b3a0b0b 	bleq	e85c38 <__ccfg+0xe65c90>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3008:	0b39053b 	bleq	e444fc <__ccfg+0xe24554>
    300c:	00001301 	andeq	r1, r0, r1, lsl #6
	utimer_add (&bckf_timer);
    3010:	0b01171b 	bleq	48c84 <__ccfg+0x28cdc>
	drvprcs = runthread (cc1350_driver);
    3014:	3b0b3a0b 	blcc	2d1848 <__ccfg+0x2b18a0>
    3018:	010b3905 	tsteq	fp, r5, lsl #18
    301c:	1c000013 	stcne	0, cr0, [r0], {19}
	if (drvprcs == 0)
    3020:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		syserror (ERESOURCE, "cc13");
    3024:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3028:	13490b39 	movtne	r0, #39737	; 0x9b39
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    302c:	131d0000 	tstne	sp, #0
    3030:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    3034:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3038:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    303c:	00001301 	andeq	r1, r0, r1, lsl #6
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3040:	0300341f 	movweq	r3, #1055	; 0x41f
    3044:	3b0b3a0e 	blcc	2d1884 <__ccfg+0x2b18dc>
    3048:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    304c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    3050:	2000000c 	andcs	r0, r0, ip
    3054:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3058:	0b3b0b3a 	bleq	ec5d48 <__ccfg+0xea5da0>
    305c:	13490b39 	movtne	r0, #39737	; 0x9b39
    3060:	0b0d0b0b 	bleq	345c94 <__ccfg+0x325cec>
	plugch ();
    3064:	0b380b0c 	bleq	e05c9c <__ccfg+0xde5cf4>
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3068:	0d210000 	stceq	0, cr0, [r1, #-0]
    306c:	3a0e0300 	bcc	383c74 <__ccfg+0x363ccc>
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3070:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3074:	0b13490b 	bleq	4d54a8 <__ccfg+0x4b5500>
    3078:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    307c:	000b380b 	andeq	r3, fp, fp, lsl #16
}
    3080:	00342200 	eorseq	r2, r4, r0, lsl #4
    3084:	0b3a0e03 	bleq	e86898 <__ccfg+0xe668f0>
    3088:	0b390b3b 	bleq	e45d7c <__ccfg+0xe25dd4>
    308c:	031c1349 	tsteq	ip, #603979777	; 0x24000001
    3090:	21230000 			; <UNDEFINED> instruction: 0x21230000
    3094:	2f134900 	svccs	0x00134900
    3098:	24000005 	strcs	r0, [r0], #-5
    309c:	13490035 	movtne	r0, #36917	; 0x9035
    30a0:	34250000 	strtcc	r0, [r5], #-0
    30a4:	3a0e0300 	bcc	383cac <__ccfg+0x363d04>
    30a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30ac:	3f13490b 	svccc	0x0013490b
    30b0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    30b4:	00212600 	eoreq	r2, r1, r0, lsl #12
    30b8:	34270000 	strtcc	r0, [r7], #-0
    30bc:	3a0e0300 	bcc	383cc4 <__ccfg+0x363d1c>
    30c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    30c8:	2800000a 	stmdacs	r0, {r1, r3}
    30cc:	13470034 	movtne	r0, #28724	; 0x7034
    30d0:	0b3b0b3a 	bleq	ec5dc0 <__ccfg+0xea5e18>
    30d4:	0a020b39 	beq	85dc0 <__ccfg+0x65e18>
    30d8:	01000000 	mrseq	r0, (UNDEF: 0)
    30dc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    30e0:	0e030b13 	vmoveq.32	d3[0], r0
    30e4:	17550e1b 	smmlane	r5, fp, lr, r0
    30e8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    30ec:	24020000 	strcs	r0, [r2], #-0
    30f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    30f4:	000e030b 	andeq	r0, lr, fp, lsl #6
    30f8:	00160300 	andseq	r0, r6, r0, lsl #6
    30fc:	0b3a0e03 	bleq	e86910 <__ccfg+0xe66968>
    3100:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3104:	24040000 	strcs	r0, [r4], #-0
    3108:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    310c:	0008030b 	andeq	r0, r8, fp, lsl #6
    3110:	000f0500 	andeq	r0, pc, r0, lsl #10
    3114:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    3118:	15060000 	strne	r0, [r6, #-0]
    311c:	00192700 	andseq	r2, r9, r0, lsl #14
    3120:	01150700 	tsteq	r5, r0, lsl #14
    3124:	13011927 	movwne	r1, #6439	; 0x1927
    3128:	05080000 	streq	r0, [r8, #-0]
    312c:	00134900 	andseq	r4, r3, r0, lsl #18
    3130:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    3134:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3138:	0b3b0b3a 	bleq	ec5e28 <__ccfg+0xea5e80>
    313c:	01111927 	tsteq	r1, r7, lsr #18
    3140:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3144:	01194296 			; <UNDEFINED> instruction: 0x01194296
    3148:	0a000013 	beq	319c <__outserial+0x30>
    314c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3150:	0b3b0b3a 	bleq	ec5e40 <__ccfg+0xea5e98>
    3154:	17021349 	strne	r1, [r2, -r9, asr #6]
    3158:	340b0000 	strcc	r0, [fp], #-0
    315c:	3a0e0300 	bcc	383d64 <__ccfg+0x363dbc>
    3160:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3164:	00170213 	andseq	r0, r7, r3, lsl r2
    3168:	82890c00 	addhi	r0, r9, #0, 24
strand (__outserial, const char*)
    316c:	01110001 	tsteq	r1, r1
    3170:	00001331 	andeq	r1, r0, r1, lsr r3
    3174:	0182890d 	orreq	r8, r2, sp, lsl #18
    3178:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
endstrand
    317c:	13311942 	teqne	r1, #1081344	; 0x108000
    3180:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
	ptr = data;
    3184:	03193f01 	tsteq	r9, #1, 30
    3188:	3b0b3a0e 	blcc	2d19c8 <__ccfg+0x2b1a20>
	if (*ptr)
    318c:	1119270b 	tstne	r9, fp, lsl #14
		len = strlen (ptr);
    3190:	40061201 	andmi	r1, r6, r1, lsl #4
    3194:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3198:	00001301 	andeq	r1, r0, r1, lsl #6
    319c:	0182890f 	orreq	r8, r2, pc, lsl #18
    31a0:	01011101 	tsteq	r1, r1, lsl #2
    31a4:	10000013 	andne	r0, r0, r3, lsl r0
    31a8:	0001828a 	andeq	r8, r1, sl, lsl #5
	len -= quant;
    31ac:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    31b0:	11000018 	tstne	r0, r8, lsl r0
    31b4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
	if (len == 0) {
    31b8:	0b3a0e03 	bleq	e869cc <__ccfg+0xe66a24>
		ufree (data);
    31bc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
		finish;
    31c0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    31c4:	01000000 	mrseq	r0, (UNDEF: 0)
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    31c8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    31cc:	0e030b13 	vmoveq.32	d3[0], r0
    31d0:	17550e1b 	smmlane	r5, fp, lr, r0
    31d4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    31d8:	16020000 	strne	r0, [r2], -r0
strand (__inserial, address)
    31dc:	3a0e0300 	bcc	383de4 <__ccfg+0x363e3c>
    31e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31e4:	03000013 	movweq	r0, #19
    31e8:	0b0b0024 	bleq	2c3280 <__ccfg+0x2a32d8>
    31ec:	0e030b3e 	vmoveq.16	d3[0], r0
	if (__inpline != NULL)
    31f0:	24040000 	strcs	r0, [r4], #-0
    31f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		finish;
    31f8:	0008030b 	andeq	r0, r8, fp, lsl #6
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31fc:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3200:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3204:	0b3b0b3a 	bleq	ec5ef4 <__ccfg+0xea5f4c>
    3208:	13491927 	movtne	r1, #39207	; 0x9927
		umwait (IM_INIT);
    320c:	06120111 			; <UNDEFINED> instruction: 0x06120111
		release;
    3210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
	savedata (data);
    3214:	06000019 			; <UNDEFINED> instruction: 0x06000019
	len = MAX_LINE_LENGTH;
    3218:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	io (IM_READ, __cport, READ, ptr, 1);
    321c:	0b3b0b3a 	bleq	ec5f0c <__ccfg+0xea5f64>
    3220:	17021349 	strne	r1, [r2, -r9, asr #6]
    3224:	34070000 	strcc	r0, [r7], #-0
    3228:	3a0e0300 	bcc	383e30 <__ccfg+0x363e88>
	if (ptr == (char*) data) { // new line
    322c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3230:	00180213 	andseq	r0, r8, r3, lsl r2
		if (*ptr == '\0') { // bin cmd
    3234:	11010000 	mrsne	r0, (UNDEF: 1)
			proceed (IM_BIN);
    3238:	130e2501 	movwne	r2, #58625	; 0xe501
    323c:	1b0e030b 	blne	383e70 <__ccfg+0x363ec8>
		if (*ptr < 0x20)
    3240:	1117550e 	tstne	r7, lr, lsl #10
    3244:	00171001 	andseq	r1, r7, r1
			proceed (IM_READ);
    3248:	00240200 	eoreq	r0, r4, r0, lsl #4
    324c:	0b3e0b0b 	bleq	f85e80 <__ccfg+0xf65ed8>
	if (*ptr == '\n' || *ptr == '\r') {
    3250:	00000e03 	andeq	r0, r0, r3, lsl #28
    3254:	03001603 	movweq	r1, #1539	; 0x603
    3258:	3b0b3a0e 	blcc	2d1a98 <__ccfg+0x2b1af0>
		*ptr = '\0';
    325c:	0013490b 	andseq	r4, r3, fp, lsl #18
		__inpline = (char*)data;
    3260:	00240400 	eoreq	r0, r4, r0, lsl #8
		finish;
    3264:	0b3e0b0b 	bleq	f85e98 <__ccfg+0xf65ef0>
	if (len) {
    3268:	00000803 	andeq	r0, r0, r3, lsl #16
		ptr++;
    326c:	3f012e05 	svccc	0x00012e05
    3270:	3a0e0319 	bcc	383edc <__ccfg+0x363f34>
		len--;
    3274:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
	proceed (IM_READ);
    3278:	11134919 	tstne	r3, r9, lsl r9
	io (IM_BIN, __cport, READ, ptr, 1);
    327c:	40061201 	andmi	r1, r6, r1, lsl #4
    3280:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3284:	00001301 	andeq	r1, r0, r1, lsl #6
    3288:	03003406 	movweq	r3, #1030	; 0x406
    328c:	3b0b3a0e 	blcc	2d1acc <__ccfg+0x2b1b24>
	len -= 2;
    3290:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (len > *ptr + 1) // 1 for 0x04
    3294:	07000017 	smladeq	r0, r7, r0, r0
    3298:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		len = *ptr + 1;
    329c:	0b3b0b3a 	bleq	ec5f8c <__ccfg+0xea5fe4>
    32a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
	ptr++;
    32a4:	17080000 	strne	r0, [r8, -r0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32a8:	3a0b0b01 	bcc	2c5eb4 <__ccfg+0x2a5f0c>
    32ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    32b0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    32b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    32b8:	0b3b0b3a 	bleq	ec5fa8 <__ccfg+0xea6000>
    32bc:	00001349 	andeq	r1, r0, r9, asr #6
	len -= quant;
    32c0:	0300340a 	movweq	r3, #1034	; 0x40a
		__inpline = (char*)data;
    32c4:	3b0b3a0e 	blcc	2d1b04 <__ccfg+0x2b1b5c>
		finish;
    32c8:	0013490b 	andseq	r4, r3, fp, lsl #18
	ptr += quant;
    32cc:	01010b00 	tsteq	r1, r0, lsl #22
    32d0:	13011349 	movwne	r1, #4937	; 0x1349
endstrand
    32d4:	210c0000 	mrscs	r0, (UNDEF: 12)
    32d8:	2f134900 	svccs	0x00134900
	proceed (IM_BINL);
    32dc:	0000000b 	andeq	r0, r0, fp
endstrand
    32e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    32e4:	030b130e 	movweq	r1, #45838	; 0xb30e
    32e8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    32ec:	10011117 	andne	r1, r1, r7, lsl r1
    32f0:	02000017 	andeq	r0, r0, #23
    32f4:	0b0b0024 	bleq	2c338c <__ccfg+0x2a33e4>
		if (res && (d < n))
    32f8:	0e030b3e 	vmoveq.16	d3[0], r0
    32fc:	16030000 	strne	r0, [r3], -r0
    3300:	3a0e0300 	bcc	383f08 <__ccfg+0x363f60>
    3304:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			res [d] = (char) c;
    3308:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		d++;
    330c:	0b0b0024 	bleq	2c33a4 <__ccfg+0x2a33fc>
    3310:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3314:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3318:	03193f01 	tsteq	r9, #1, 30
    331c:	3b0b3a0e 	blcc	2d1b5c <__ccfg+0x2b1bb4>
    3320:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
				enci (10000);
    3324:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3328:	97184006 	ldrls	r4, [r8, -r6]
    332c:	13011942 	movwne	r1, #6466	; 0x1942
	d = 0;
    3330:	34060000 	strcc	r0, [r6], #-0
		c = *fm++;
    3334:	3a0e0300 	bcc	383f3c <__ccfg+0x363f94>
		if (c == '\\') {
    3338:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if ((c = *fm++) == '\0') {
    333c:	07000013 	smladeq	r0, r3, r0, r0
    3340:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
				outc ('\\');
    3344:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if ((c = *fm++) == '\0') {
    3348:	00001349 	andeq	r1, r0, r9, asr #6
				outc ('\\');
    334c:	3f012e08 	svccc	0x00012e08
    3350:	3a0e0319 	bcc	383fbc <__ccfg+0x364014>
			outc (c);
    3354:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3358:	11134919 	tstne	r3, r9, lsl r9
			if (c == '\0')
    335c:	40061201 	andmi	r1, r6, r1, lsl #4
    3360:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
			outc (c);
    3364:	00001301 	andeq	r1, r0, r1, lsl #6
				outc (val);
    3368:	3f012e09 	svccc	0x00012e09
				val = (word) va_arg (ap, aword);
    336c:	3a0e0319 	bcc	383fd8 <__ccfg+0x364030>
		if (c == '%') {
    3370:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3374:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
			c = *fm++;
    3378:	97184006 	ldrls	r4, [r8, -r6]
			switch (c) {
    337c:	00001942 	andeq	r1, r0, r2, asr #18
    3380:	0300050a 	movweq	r0, #1290	; 0x50a
    3384:	3b0b3a0e 	blcc	2d1bc4 <__ccfg+0x2b1c1c>
    3388:	02134905 	andseq	r4, r3, #81920	; 0x14000
    338c:	00000018 	andeq	r0, r0, r8, lsl r0
    3390:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3394:	030b130e 	movweq	r1, #45838	; 0xb30e
    3398:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				outc ('%');
    339c:	10011117 	andne	r1, r1, r7, lsl r1
    33a0:	02000017 	andeq	r0, r0, #23
				outc (c);
    33a4:	0b0b0024 	bleq	2c343c <__ccfg+0x2a3494>
    33a8:	0e030b3e 	vmoveq.16	d3[0], r0
    33ac:	16030000 	strne	r0, [r3], -r0
				if (c == '\0')
    33b0:	3a0e0300 	bcc	383fb8 <__ccfg+0x364010>
				return d;
    33b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    33b8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    33bc:	0b0b0024 	bleq	2c3454 <__ccfg+0x2a34ac>
			switch (c) {
    33c0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    33c4:	0f050000 	svceq	0x00050000
    33c8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
				for (i = 12; ; i -= 4) {
    33cc:	06000013 			; <UNDEFINED> instruction: 0x06000013
				val = (word) va_arg (ap, aword);
    33d0:	19270015 	stmdbne	r7!, {r0, r2, r4}
						[ (val >> i) & 0xf ]);
    33d4:	15070000 	strne	r0, [r7, #-0]
    33d8:	01192701 	tsteq	r9, r1, lsl #14
    33dc:	08000013 	stmdaeq	r0, {r0, r1, r4}
					outc (__pi_hex_enc_table
    33e0:	13490005 	movtne	r0, #36869	; 0x9005
    33e4:	15090000 	strne	r0, [r9, #-0]
					if (i == 0)
    33e8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    33ec:	00130113 	andseq	r0, r3, r3, lsl r1
				for (i = 12; ; i -= 4) {
    33f0:	00150a00 	andseq	r0, r5, r0, lsl #20
				val = (word) va_arg (ap, aword);
    33f4:	13491927 	movtne	r1, #39207	; 0x9927
				if (c == 'd' && (val & 0x8000) != 0) {
    33f8:	130b0000 	movwne	r0, #45056	; 0xb000
				val = (word) va_arg (ap, aword);
    33fc:	3a0b0b01 	bcc	2c6008 <__ccfg+0x2a6060>
				if (c == 'd' && (val & 0x8000) != 0) {
    3400:	010b3b0b 	tsteq	fp, fp, lsl #22
    3404:	0c000013 	stceq	0, cr0, [r0], {19}
					outc ('-');
    3408:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    340c:	0b3b0b3a 	bleq	ec60fc <__ccfg+0xea6154>
					val = (~val) + 1;
    3410:	0b381349 	bleq	e0813c <__ccfg+0xde8194>
    3414:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
				for (i = 12; ; i -= 4) {
    3418:	03193f01 	tsteq	r9, #1, 30
				enci (10000);
    341c:	3b0b3a0e 	blcc	2d1c5c <__ccfg+0x2b1cb4>
    3420:	2019270b 	andscs	r2, r9, fp, lsl #14
    3424:	0013010b 	andseq	r0, r3, fp, lsl #2
    3428:	00050e00 	andeq	r0, r5, r0, lsl #28
    342c:	0b3a0e03 	bleq	e86c40 <__ccfg+0xe66c98>
    3430:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3434:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3438:	03193f01 	tsteq	r9, #1, 30
    343c:	3b0b3a0e 	blcc	2d1c7c <__ccfg+0x2b1cd4>
    3440:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3444:	010b2013 	tsteq	fp, r3, lsl r0
    3448:	10000013 	andne	r0, r0, r3, lsl r0
    344c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3450:	0b3b0b3a 	bleq	ec6140 <__ccfg+0xea6198>
    3454:	00001349 	andeq	r1, r0, r9, asr #6
    3458:	31012e11 	tstcc	r1, r1, lsl lr
    345c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3460:	97184006 	ldrls	r4, [r8, -r6]
				if (c == 'd' || c == 'u') {
    3464:	13011942 	movwne	r1, #6466	; 0x1942
    3468:	05120000 	ldreq	r0, [r2, #-0]
					if (c == 'd' &&
    346c:	02133100 	andseq	r3, r3, #0, 2
					val = va_arg (ap, lword);
    3470:	13000017 	movwne	r0, #23
					fm++;
    3474:	0111010b 	tsteq	r1, fp, lsl #2
					if (c == 'd' &&
    3478:	13010612 	movwne	r0, #5650	; 0x1612
    347c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
						outc ('-');
    3480:	11010182 	smlabbne	r1, r2, r1, r0
    3484:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
						val = (~val) + 1;
    3488:	8a150000 	bhi	543490 <__ccfg+0x5234e8>
				enci (10000);
    348c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
					enci (1000000000UL);
    3490:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3494:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3498:	11010182 	smlabbne	r1, r2, r1, r0
    349c:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    34a0:	00001301 	andeq	r1, r0, r1, lsl #6
    34a4:	31003417 	tstcc	r0, r7, lsl r4
    34a8:	00180213 	andseq	r0, r8, r3, lsl r2
    34ac:	010b1800 	tsteq	fp, r0, lsl #16
    34b0:	13011755 	movwne	r1, #5973	; 0x1755
    34b4:	05190000 	ldreq	r0, [r9, #-0]
    34b8:	1c133100 	ldfnes	f3, [r3], {-0}
    34bc:	1a00000b 	bne	34f0 <__pi_vfparse+0x1d8>
    34c0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    34c4:	341b0000 	ldrcc	r0, [fp], #-0
    34c8:	00133100 	andseq	r3, r3, r0, lsl #2
    34cc:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    34d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
				} else if (c == 'x') {
    34d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					for (i = 28; ; i -= 4) {
    34d8:	13491927 	movtne	r1, #39207	; 0x9927
					val = va_arg (ap, lword);
    34dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
							[ (val >> i) & 0xf ]);
    34e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    34e4:	00130119 	andseq	r0, r3, r9, lsl r1
						outc (__pi_hex_enc_table
    34e8:	00051d00 	andeq	r1, r5, r0, lsl #26
    34ec:	0b3a0e03 	bleq	e86d00 <__ccfg+0xe66d58>
    34f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
						if (i == 0)
    34f4:	00001702 	andeq	r1, r0, r2, lsl #14
    34f8:	0300341e 	movweq	r3, #1054	; 0x41e
					for (i = 28; ; i -= 4) {
    34fc:	3b0b3a0e 	blcc	2d1d3c <__ccfg+0x2b1d94>
					outc ('%');
    3500:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3504:	1f000017 	svcne	0x00000017
    3508:	00018289 	andeq	r8, r1, r9, lsl #5
					outc ('l');
    350c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3510:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
				val = (word) va_arg (ap, aword);
    3514:	03193f01 	tsteq	r9, #1, 30
				outc (val);
    3518:	3b0b3a0e 	blcc	2d1d58 <__ccfg+0x2b1db0>
    351c:	11192705 	tstne	r9, r5, lsl #14
				while (*st != '\0') {
    3520:	40061201 	andmi	r1, r6, r1, lsl #4
    3524:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3528:	00001301 	andeq	r1, r0, r1, lsl #6
    352c:	01828921 	orreq	r8, r2, r1, lsr #18
					outc (*st);
    3530:	31011101 	tstcc	r1, r1, lsl #2
    3534:	00130113 	andseq	r0, r3, r3, lsl r1
					st++;
    3538:	002e2200 	eoreq	r2, lr, r0, lsl #4
		c = *fm++;
    353c:	0b3a0e03 	bleq	e86d50 <__ccfg+0xe66da8>
    3540:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3544:	0b201349 	bleq	808270 <__ccfg+0x7e82c8>
char *vform (char *res, const char *fm, va_list aq) {
    3548:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    354c:	3a0e0300 	bcc	384154 <__ccfg+0x3641ac>
	if (res != NULL) {
    3550:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3554:	000b2019 	andeq	r2, fp, r9, lsl r0
    3558:	00342400 	eorseq	r2, r4, r0, lsl #8
    355c:	0b3a0e03 	bleq	e86d70 <__ccfg+0xe66dc8>
}
    3560:	1349053b 	movtne	r0, #38203	; 0x953b
    3564:	00001702 	andeq	r1, r0, r2, lsl #14
	fml = strlen (fm) + 17;
    3568:	31011d25 	tstcc	r1, r5, lsr #26
    356c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3570:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	if ((res = (char*) umalloc (fml)) == NULL)
    3574:	00130105 	andseq	r0, r3, r5, lsl #2
    3578:	00052600 	andeq	r2, r5, r0, lsl #12
    357c:	0b3a0e03 	bleq	e86d90 <__ccfg+0xe66de8>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3580:	1349053b 	movtne	r0, #38203	; 0x953b
    3584:	00001702 	andeq	r1, r0, r2, lsl #14
    3588:	03003427 	movweq	r3, #1063	; 0x427
    358c:	3b0b3a0e 	blcc	2d1dcc <__ccfg+0x2b1e24>
		ufree (res);
    3590:	02134905 	andseq	r4, r3, #81920	; 0x14000
		goto Again;
    3594:	28000018 	stmdacs	r0, {r3, r4}
	if (buf == NULL || fmt == NULL)
    3598:	08030034 	stmdaeq	r3, {r2, r4, r5}
int vscan (const char *buf, const char *fmt, va_list ap) {
    359c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (buf == NULL || fmt == NULL)
    35a0:	17021349 	strne	r1, [r2, -r9, asr #6]
    35a4:	34290000 	strtcc	r0, [r9], #-0
    35a8:	3a0e0300 	bcc	3841b0 <__ccfg+0x364208>
		    	    case 'u': scanu (lword); break;
    35ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (isspace (*buf)) buf++;
    35b0:	00180213 	andseq	r0, r8, r3, lsl r2
    35b4:	002e2a00 	eoreq	r2, lr, r0, lsl #20
	while (*fmt != '\0') {
    35b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
		if (*fmt++ != '%')
    35bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		switch (*fmt++) {
    35c0:	13491927 	movtne	r1, #39207	; 0x9927
    35c4:	0000193c 	andeq	r1, r0, ip, lsr r9
    35c8:	3f002e2b 	svccc	0x00002e2b
    35cc:	3a0e0319 	bcc	384238 <__ccfg+0x364290>
    35d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    35d4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    35d8:	2c000019 	stccs	0, cr0, [r0], {25}
}
    35dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
		switch (*fmt++) {
    35e0:	0b3a0e03 	bleq	e86df4 <__ccfg+0xe66e4c>
    35e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    35e8:	0000193c 	andeq	r1, r0, ip, lsr r9
    35ec:	01110100 	tsteq	r1, r0, lsl #2
			while (isspace (*buf)) buf++;
    35f0:	0b130e25 	bleq	4c6e8c <__ccfg+0x4a6ee4>
    35f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    35f8:	01111755 	tsteq	r1, r5, asr r7
    35fc:	00001710 	andeq	r1, r0, r0, lsl r7
    3600:	0b002402 	bleq	c610 <__exidx_end+0x69d0>
    3604:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			if (*buf == '\0')
    3608:	0300000e 	movweq	r0, #14
			if (*buf != ',') {
    360c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
			sap = va_arg (ap, char*);
    3610:	0b3b0b3a 	bleq	ec6300 <__ccfg+0xea6358>
			nc++;
    3614:	00001349 	andeq	r1, r0, r9, asr #6
			if (*buf != ',') {
    3618:	0b002404 	bleq	c630 <__exidx_end+0x69f0>
				while (!isspace (*buf) && *buf != ',' &&
    361c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3620:	05000008 	streq	r0, [r0, #-8]
    3624:	0b0b000f 	bleq	2c3668 <__ccfg+0x2a36c0>
    3628:	0f060000 	svceq	0x00060000
    362c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3630:	07000013 	smladeq	r0, r3, r0, r0
    3634:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			while (isspace (*buf)) buf++;
    3638:	0b3a0b0b 	bleq	e8626c <__ccfg+0xe662c4>
    363c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3640:	0d080000 	stceq	0, cr0, [r8, #-0]
    3644:	3a0e0300 	bcc	38424c <__ccfg+0x3642a4>
    3648:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (*buf == ',') buf++;
    364c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3650:	01130900 	tsteq	r3, r0, lsl #18
			*sap = '\0';
    3654:	0b3a0b0b 	bleq	e86288 <__ccfg+0xe662e0>
			break;
    3658:	13010b3b 	movwne	r0, #6971	; 0x1b3b
		    case 'd': scani (word); break;
    365c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    3660:	3a0e0300 	bcc	384268 <__ccfg+0x3642c0>
    3664:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3668:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    366c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3670:	0b00000b 	bleq	36a4 <vscan+0x10c>
    3674:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3678:	0b3a0b0b 	bleq	e862ac <__ccfg+0xe66304>
    367c:	1301053b 	movwne	r0, #5435	; 0x153b
    3680:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3684:	3a0e0300 	bcc	38428c <__ccfg+0x3642e4>
    3688:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    368c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3690:	01130d00 	tsteq	r3, r0, lsl #26
    3694:	0b3a0b0b 	bleq	e862c8 <__ccfg+0xe66320>
    3698:	1301053b 	movwne	r0, #5435	; 0x153b
    369c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    36a0:	3a0e0300 	bcc	3842a8 <__ccfg+0x364300>
    36a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    36a8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    36ac:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    36b0:	0f00000b 	svceq	0x0000000b
    36b4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    36b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    36bc:	0b201927 	bleq	809b60 <__ccfg+0x7e9bb8>
    36c0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    36c4:	03193f01 	tsteq	r9, #1, 30
    36c8:	3b0b3a0e 	blcc	2d1f08 <__ccfg+0x2b1f60>
		    case 'u': scanu (word); break;
    36cc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    36d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    36d4:	97184006 	ldrls	r4, [r8, -r6]
    36d8:	13011942 	movwne	r1, #6466	; 0x1942
    36dc:	34110000 	ldrcc	r0, [r1], #-0
    36e0:	3a0e0300 	bcc	3842e8 <__ccfg+0x364340>
    36e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    36e8:	00180213 	andseq	r0, r8, r3, lsl r2
    36ec:	00051200 	andeq	r1, r5, r0, lsl #4
    36f0:	0b3a0803 	bleq	e85704 <__ccfg+0xe6575c>
    36f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36f8:	00001702 	andeq	r1, r0, r2, lsl #14
    36fc:	31001d13 	tstcc	r0, r3, lsl sp
    3700:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3704:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3708:	1400000b 	strne	r0, [r0], #-11
    370c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3710:	0b3a0e03 	bleq	e86f24 <__ccfg+0xe66f7c>
		    case 'x': scanx (word); break;
    3714:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3718:	06120111 			; <UNDEFINED> instruction: 0x06120111
    371c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3720:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    3724:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3728:	0b3a0e03 	bleq	e86f3c <__ccfg+0xe66f94>
    372c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3730:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3734:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3738:	00130119 	andseq	r0, r3, r9, lsl r1
    373c:	00051600 	andeq	r1, r5, r0, lsl #12
    3740:	0b3a0e03 	bleq	e86f54 <__ccfg+0xe66fac>
    3744:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3748:	00001802 	andeq	r1, r0, r2, lsl #16
    374c:	03003417 	movweq	r3, #1047	; 0x417
    3750:	3b0b3a0e 	blcc	2d1f90 <__ccfg+0x2b1fe8>
    3754:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3758:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    375c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3760:	0b3b0b3a 	bleq	ec6450 <__ccfg+0xea64a8>
    3764:	17021349 	strne	r1, [r2, -r9, asr #6]
    3768:	34190000 	ldrcc	r0, [r9], #-0
    376c:	3a0e0300 	bcc	384374 <__ccfg+0x3643cc>
    3770:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3774:	1a000013 	bne	37c8 <vscan+0x230>
    3778:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    377c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3780:	17021349 	strne	r1, [r2, -r9, asr #6]
    3784:	341b0000 	ldrcc	r0, [fp], #-0
    3788:	3a0e0300 	bcc	384390 <__ccfg+0x3643e8>
			switch (*fmt++) {
    378c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3790:	00061c13 	andeq	r1, r6, r3, lsl ip
    3794:	00341c00 	eorseq	r1, r4, r0, lsl #24
    3798:	0b3a0803 	bleq	e857ac <__ccfg+0xe65804>
    379c:	1349053b 	movtne	r0, #38203	; 0x953b
    37a0:	00001702 	andeq	r1, r0, r2, lsl #14
		    	    case 'd': scani (lword); break;
    37a4:	0182891d 	orreq	r8, r2, sp, lsl r9
    37a8:	31011101 	tstcc	r1, r1, lsl #2
    37ac:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    37b0:	0001828a 	andeq	r8, r1, sl, lsl #5
    37b4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    37b8:	1f000018 	svcne	0x00000018
    37bc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    37c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37c4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    37c8:	01200000 			; <UNDEFINED> instruction: 0x01200000
    37cc:	01134901 	tsteq	r3, r1, lsl #18
    37d0:	21000013 	tstcs	r0, r3, lsl r0
    37d4:	13490021 	movtne	r0, #36897	; 0x9021
    37d8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    37dc:	03003422 	movweq	r3, #1058	; 0x422
    37e0:	3b0b3a0e 	blcc	2d2020 <__ccfg+0x2b2078>
    37e4:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    37e8:	2300000a 	movwcs	r0, #10
    37ec:	13490026 	movtne	r0, #36902	; 0x9026
    37f0:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    37f4:	03193f01 	tsteq	r9, #1, 30
    37f8:	3b0b3a0e 	blcc	2d2038 <__ccfg+0x2b2090>
    37fc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
		    	    case 'x': scanx (lword); break;
    3800:	00193c13 	andseq	r3, r9, r3, lsl ip
    3804:	00052500 	andeq	r2, r5, r0, lsl #10
    3808:	00001349 	andeq	r1, r0, r9, asr #6
    380c:	01110100 	tsteq	r1, r0, lsl #2
    3810:	0b130e25 	bleq	4c70ac <__ccfg+0x4a7104>
    3814:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3818:	01111755 	tsteq	r1, r5, asr r7
    381c:	00001710 	andeq	r1, r0, r0, lsl r7
    3820:	0b002402 	bleq	c830 <__exidx_end+0x6bf0>
    3824:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3828:	0300000e 	movweq	r0, #14
    382c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3830:	0b3b0b3a 	bleq	ec6520 <__ccfg+0xea6578>
    3834:	00001349 	andeq	r1, r0, r9, asr #6
    3838:	0b002404 	bleq	c850 <__exidx_end+0x6c10>
    383c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3840:	05000008 	streq	r0, [r0, #-8]
    3844:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3848:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    384c:	0b201927 	bleq	809cf0 <__ccfg+0x7e9d48>
    3850:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    3854:	3a0e0300 	bcc	38445c <__ccfg+0x3644b4>
    3858:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    385c:	000b2019 	andeq	r2, fp, r9, lsl r0
    3860:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    3864:	0b3a0e03 	bleq	e87078 <__ccfg+0xe670d0>
    3868:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    386c:	06120111 			; <UNDEFINED> instruction: 0x06120111
		    	    case 'd': scani (lword); break;
    3870:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3874:	00130119 	andseq	r0, r3, r9, lsl r1
    3878:	00050800 	andeq	r0, r5, r0, lsl #16
    387c:	0b3a0e03 	bleq	e87090 <__ccfg+0xe670e8>
    3880:	1349053b 	movtne	r0, #38203	; 0x953b
    3884:	00001702 	andeq	r1, r0, r2, lsl #14
    3888:	03003409 	movweq	r3, #1033	; 0x409
		    	    case 'u': scanu (lword); break;
    388c:	3b0b3a0e 	blcc	2d20cc <__ccfg+0x2b2124>
    3890:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3894:	0a000017 	beq	38f8 <vscan+0x360>
    3898:	1331001d 	teqne	r1, #29
    389c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    38a0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    38a4:	0b0b0000 	bleq	2c38ac <__ccfg+0x2a3904>
    38a8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    38ac:	00130106 	andseq	r0, r3, r6, lsl #2
    38b0:	82890c00 	addhi	r0, r9, #0, 24
    38b4:	01110101 	tsteq	r1, r1, lsl #2
    38b8:	13011331 	movwne	r1, #4913	; 0x1331
    38bc:	8a0d0000 	bhi	3438c4 <__ccfg+0x32391c>
    38c0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    38c4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    38c8:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    38cc:	11010182 	smlabbne	r1, r2, r1, r0
    38d0:	0f000001 	svceq	0x00000001
		    	    case 'x': scanx (lword); break;
    38d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    38d8:	0b3a0e03 	bleq	e870ec <__ccfg+0xe67144>
			if ((c = *buf++) == '\0')
    38dc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    38e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
			sap = va_arg (ap, char*);
    38e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
			nc++;
    38e8:	00130119 	andseq	r0, r3, r9, lsl r1
			break;
    38ec:	00341000 	eorseq	r1, r4, r0
			while (isspace (*buf)) buf++;
    38f0:	0b3a0e03 	bleq	e87104 <__ccfg+0xe6715c>
    38f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    38f8:	00001702 	andeq	r1, r0, r2, lsl #14
						*sap++ = *buf++;
    38fc:	01828911 	orreq	r8, r2, r1, lsl r9
    3900:	31011100 	mrscc	r1, (UNDEF: 17)
			while (isspace (*buf)) buf++;
    3904:	12000013 	andne	r0, r0, #19
    3908:	01018289 	smlabbeq	r1, r9, r2, r8
    390c:	13310111 	teqne	r1, #1073741828	; 0x40000004
		return 0;
    3910:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    3914:	03193f01 	tsteq	r9, #1, 30
		    case 'x': scanx (word); break;
    3918:	3b0b3a0e 	blcc	2d2158 <__ccfg+0x2b21b0>
    391c:	3c19270b 	ldccc	7, cr2, [r9], {11}
		    	    case 'x': scanx (lword); break;
    3920:	00130119 	andseq	r0, r3, r9, lsl r1
    3924:	00051400 	andeq	r1, r5, r0, lsl #8
    3928:	00001349 	andeq	r1, r0, r9, asr #6
    392c:	3f002e15 	svccc	0x00002e15
    3930:	3a0e0319 	bcc	38459c <__ccfg+0x3645f4>
    3934:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3938:	00193c19 	andseq	r3, r9, r9, lsl ip
    393c:	002e1600 	eoreq	r1, lr, r0, lsl #12
    3940:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3944:	0b3b0b3a 	bleq	ec6634 <__ccfg+0xea668c>
    3948:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    394c:	01000000 	mrseq	r0, (UNDEF: 0)
    3950:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3954:	0e030b13 	vmoveq.32	d3[0], r0
    3958:	17550e1b 	smmlane	r5, fp, lr, r0
    395c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3960:	24020000 	strcs	r0, [r2], #-0
    3964:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3968:	000e030b 	andeq	r0, lr, fp, lsl #6
    396c:	00160300 	andseq	r0, r6, r0, lsl #6
    3970:	0b3a0e03 	bleq	e87184 <__ccfg+0xe671dc>
    3974:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3978:	24040000 	strcs	r0, [r4], #-0
    397c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3980:	0008030b 	andeq	r0, r8, fp, lsl #6
    3984:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3988:	0b3a0e03 	bleq	e8719c <__ccfg+0xe671f4>
    398c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3990:	0b201349 	bleq	8086bc <__ccfg+0x7e8714>
    3994:	00001301 	andeq	r1, r0, r1, lsl #6
    3998:	03000506 	movweq	r0, #1286	; 0x506
    399c:	3b0b3a0e 	blcc	2d21dc <__ccfg+0x2b2234>
    39a0:	0013490b 	andseq	r4, r3, fp, lsl #18
    39a4:	00340700 	eorseq	r0, r4, r0, lsl #14
    39a8:	0b3a0e03 	bleq	e871bc <__ccfg+0xe67214>
    39ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    39b0:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    39b4:	03193f01 	tsteq	r9, #1, 30
    39b8:	3b0b3a0e 	blcc	2d21f8 <__ccfg+0x2b2250>
    39bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    39c0:	010b2013 	tsteq	fp, r3, lsl r0
    39c4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    39c8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    39cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    39d0:	00001349 	andeq	r1, r0, r9, asr #6
    39d4:	0300340a 	movweq	r3, #1034	; 0x40a
    39d8:	3b0b3a0e 	blcc	2d2218 <__ccfg+0x2b2270>
    39dc:	00134905 	andseq	r4, r3, r5, lsl #18
    39e0:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    39e4:	0b3a0e03 	bleq	e871f8 <__ccfg+0xe67250>
    39e8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    39ec:	00000b20 	andeq	r0, r0, r0, lsr #22
    39f0:	3f012e0c 	svccc	0x00012e0c
    39f4:	3a0e0319 	bcc	384660 <__ccfg+0x3646b8>
    39f8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    39fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3a00:	97184006 	ldrls	r4, [r8, -r6]
    3a04:	13011942 	movwne	r1, #6466	; 0x1942
    3a08:	050d0000 	streq	r0, [sp, #-0]
    3a0c:	3a0e0300 	bcc	384614 <__ccfg+0x36466c>
    3a10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3a14:	00170213 	andseq	r0, r7, r3, lsl r2
    3a18:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3a1c:	0b3a0e03 	bleq	e87230 <__ccfg+0xe67288>
    3a20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3a24:	00001802 	andeq	r1, r0, r2, lsl #16
    3a28:	0300340f 	movweq	r3, #1039	; 0x40f
    3a2c:	3b0b3a0e 	blcc	2d226c <__ccfg+0x2b22c4>
    3a30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3a34:	10000017 	andne	r0, r0, r7, lsl r0
    3a38:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a3c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3a40:	0b590b58 	bleq	16467a8 <__ccfg+0x1626800>
    3a44:	00001301 	andeq	r1, r0, r1, lsl #6
    3a48:	31000511 	tstcc	r0, r1, lsl r5
    3a4c:	12000013 	andne	r0, r0, #19
    3a50:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3a54:	34130000 	ldrcc	r0, [r3], #-0
    3a58:	02133100 	andseq	r3, r3, #0, 2
    3a5c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    3a60:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3a64:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3a68:	0b590b58 	bleq	16467d0 <__ccfg+0x1626828>
    3a6c:	0b150000 	bleq	543a74 <__ccfg+0x523acc>
    3a70:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3a74:	16000006 	strne	r0, [r0], -r6
    3a78:	13310034 	teqne	r1, #52	; 0x34
    3a7c:	00001702 	andeq	r1, r0, r2, lsl #14
    3a80:	3f012e17 	svccc	0x00012e17
    3a84:	3a0e0319 	bcc	3846f0 <__ccfg+0x364748>
    3a88:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3a8c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3a90:	97184006 	ldrls	r4, [r8, -r6]
    3a94:	13011942 	movwne	r1, #6466	; 0x1942
    3a98:	1d180000 	ldcne	0, cr0, [r8, #-0]
    3a9c:	11133101 	tstne	r3, r1, lsl #2
    3aa0:	58061201 	stmdapl	r6, {r0, r9, ip}
    3aa4:	010b590b 	tsteq	fp, fp, lsl #18
    3aa8:	19000013 	stmdbne	r0, {r0, r1, r4}
    3aac:	01018289 	smlabbeq	r1, r9, r2, r8
    3ab0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3ab4:	8a1a0000 	bhi	683abc <__ccfg+0x663b14>
    3ab8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3abc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3ac0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    3ac4:	03193f01 	tsteq	r9, #1, 30
    3ac8:	3b0b3a0e 	blcc	2d2308 <__ccfg+0x2b2360>
    3acc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3ad0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3ad4:	97184006 	ldrls	r4, [r8, -r6]
    3ad8:	13011942 	movwne	r1, #6466	; 0x1942
    3adc:	051c0000 	ldreq	r0, [ip, #-0]
    3ae0:	3a0e0300 	bcc	3846e8 <__ccfg+0x364740>
    3ae4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ae8:	00170213 	andseq	r0, r7, r3, lsl r2
    3aec:	00341d00 	eorseq	r1, r4, r0, lsl #26
    3af0:	0b3a0e03 	bleq	e87304 <__ccfg+0xe6735c>
    3af4:	1349053b 	movtne	r0, #38203	; 0x953b
    3af8:	00001702 	andeq	r1, r0, r2, lsl #14
    3afc:	31012e1e 	tstcc	r1, lr, lsl lr
    3b00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3b04:	97184006 	ldrls	r4, [r8, -r6]
    3b08:	13011942 	movwne	r1, #6466	; 0x1942
    3b0c:	051f0000 	ldreq	r0, [pc, #-0]	; 3b14 <NOROM_RFCDoorbellSendTo+0x18>
    3b10:	02133100 	andseq	r3, r3, #0, 2
    3b14:	20000017 	andcs	r0, r0, r7, lsl r0
    3b18:	13310034 	teqne	r1, #52	; 0x34
    3b1c:	1d210000 	stcne	0, cr0, [r1, #-0]
    3b20:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3b24:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3b28:	0105590b 	tsteq	r5, fp, lsl #18
    3b2c:	22000013 	andcs	r0, r0, #19
    3b30:	01018289 	smlabbeq	r1, r9, r2, r8
    3b34:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3b38:	00001301 	andeq	r1, r0, r1, lsl #6
    3b3c:	01828923 	orreq	r8, r2, r3, lsr #18
    3b40:	31011100 	mrscc	r1, (UNDEF: 17)
    3b44:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3b48:	01018289 	smlabbeq	r1, r9, r2, r8
    3b4c:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3b50:	00130118 	andseq	r0, r3, r8, lsl r1
    3b54:	001d2500 	andseq	r2, sp, r0, lsl #10
    3b58:	01111331 	tsteq	r1, r1, lsr r3
    3b5c:	0b580612 	bleq	16053ac <__ccfg+0x15e5404>
    3b60:	00000559 	andeq	r0, r0, r9, asr r5
    3b64:	01828926 	orreq	r8, r2, r6, lsr #18
    3b68:	01011101 	tsteq	r1, r1, lsl #2
    3b6c:	27000013 	smladcs	r0, r3, r0, r0
    3b70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3b74:	0b3a0e03 	bleq	e87388 <__ccfg+0xe673e0>
    3b78:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3b7c:	1301193c 	movwne	r1, #6460	; 0x193c
    3b80:	05280000 	streq	r0, [r8, #-0]!
    3b84:	00134900 	andseq	r4, r3, r0, lsl #18
    3b88:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    3b8c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3b90:	0b3b0b3a 	bleq	ec6880 <__ccfg+0xea68d8>
    3b94:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3b98:	00001301 	andeq	r1, r0, r1, lsl #6
    3b9c:	3f012e2a 	svccc	0x00012e2a
    3ba0:	3a0e0319 	bcc	38480c <__ccfg+0x364864>
    3ba4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3ba8:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3bac:	00000019 	andeq	r0, r0, r9, lsl r0
    3bb0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3bb4:	030b130e 	movweq	r1, #45838	; 0xb30e
    3bb8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3bbc:	10011117 	andne	r1, r1, r7, lsl r1
    3bc0:	02000017 	andeq	r0, r0, #23
    3bc4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3bc8:	0b3b0b3a 	bleq	ec68b8 <__ccfg+0xea6910>
    3bcc:	00001349 	andeq	r1, r0, r9, asr #6
    3bd0:	0b002403 	bleq	cbe4 <__exidx_end+0x6fa4>
    3bd4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3bd8:	0400000e 	streq	r0, [r0], #-14
    3bdc:	0b0b0024 	bleq	2c3c74 <__ccfg+0x2a3ccc>
    3be0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3be4:	0f050000 	svceq	0x00050000
    3be8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3bec:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3bf0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3bf4:	15070000 	strne	r0, [r7, #-0]
    3bf8:	01192701 	tsteq	r9, r1, lsl #14
    3bfc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3c00:	13490005 	movtne	r0, #36869	; 0x9005
    3c04:	15090000 	strne	r0, [r9, #-0]
    3c08:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3c0c:	00130113 	andseq	r0, r3, r3, lsl r1
    3c10:	00150a00 	andseq	r0, r5, r0, lsl #20
    3c14:	13491927 	movtne	r1, #39207	; 0x9927
    3c18:	130b0000 	movwne	r0, #45056	; 0xb000
    3c1c:	3a0b0b01 	bcc	2c6828 <__ccfg+0x2a6880>
    3c20:	010b3b0b 	tsteq	fp, fp, lsl #22
    3c24:	0c000013 	stceq	0, cr0, [r0], {19}
    3c28:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3c2c:	0b3b0b3a 	bleq	ec691c <__ccfg+0xea6974>
    3c30:	0b381349 	bleq	e0895c <__ccfg+0xde89b4>
    3c34:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3c38:	3a0e0301 	bcc	384844 <__ccfg+0x36489c>
    3c3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3c40:	010b2019 	tsteq	fp, r9, lsl r0
    3c44:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3c48:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3c4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c50:	00001349 	andeq	r1, r0, r9, asr #6
    3c54:	03002e0f 	movweq	r2, #3599	; 0xe0f
    3c58:	3b0b3a0e 	blcc	2d2498 <__ccfg+0x2b24f0>
    3c5c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3c60:	000b2013 	andeq	r2, fp, r3, lsl r0
    3c64:	002e1000 	eoreq	r1, lr, r0
    3c68:	0b3a0e03 	bleq	e8747c <__ccfg+0xe674d4>
    3c6c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3c70:	00000b20 	andeq	r0, r0, r0, lsr #22
    3c74:	03012e11 	movweq	r2, #7697	; 0x1e11
    3c78:	3b0b3a0e 	blcc	2d24b8 <__ccfg+0x2b2510>
    3c7c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3c80:	010b2013 	tsteq	fp, r3, lsl r0
    3c84:	12000013 	andne	r0, r0, #19
    3c88:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3c8c:	0b3b0b3a 	bleq	ec697c <__ccfg+0xea69d4>
    3c90:	00001349 	andeq	r1, r0, r9, asr #6
    3c94:	03003413 	movweq	r3, #1043	; 0x413
    3c98:	3b0b3a0e 	blcc	2d24d8 <__ccfg+0x2b2530>
    3c9c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3ca0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    3ca4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3ca8:	0b3b0b3a 	bleq	ec6998 <__ccfg+0xea69f0>
    3cac:	01111927 	tsteq	r1, r7, lsr #18
    3cb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3cb4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3cb8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3cbc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3cc0:	0b3b0b3a 	bleq	ec69b0 <__ccfg+0xea6a08>
    3cc4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3cc8:	34160000 	ldrcc	r0, [r6], #-0
    3ccc:	3a0e0300 	bcc	3848d4 <__ccfg+0x36492c>
    3cd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cd4:	00051c13 	andeq	r1, r5, r3, lsl ip
    3cd8:	011d1700 	tsteq	sp, r0, lsl #14
    3cdc:	01521331 	cmpeq	r2, r1, lsr r3
    3ce0:	0b581755 	bleq	1609a3c <__ccfg+0x15e9a94>
    3ce4:	13010b59 	movwne	r0, #7001	; 0x1b59
    3ce8:	05180000 	ldreq	r0, [r8, #-0]
    3cec:	1c133100 	ldfnes	f3, [r3], {-0}
    3cf0:	1900000b 	stmdbne	r0, {r0, r1, r3}
    3cf4:	1331001d 	teqne	r1, #29
    3cf8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3cfc:	0b590b58 	bleq	1646a64 <__ccfg+0x1626abc>
    3d00:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3d04:	11133101 	tstne	r3, r1, lsl #2
    3d08:	58061201 	stmdapl	r6, {r0, r9, ip}
    3d0c:	010b590b 	tsteq	fp, fp, lsl #18
    3d10:	1b000013 	blne	3d64 <NOROM_RFCRTrim+0xa4>
    3d14:	00018289 	andeq	r8, r1, r9, lsl #5
    3d18:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3d1c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    3d20:	11010182 	smlabbne	r1, r2, r1, r0
    3d24:	00130101 	andseq	r0, r3, r1, lsl #2
    3d28:	828a1d00 	addhi	r1, sl, #0, 26
    3d2c:	18020001 	stmdane	r2, {r0}
    3d30:	00184291 	mulseq	r8, r1, r2
    3d34:	82891e00 	addhi	r1, r9, #0, 28
    3d38:	01110101 	tsteq	r1, r1, lsl #2
    3d3c:	13011331 	movwne	r1, #4913	; 0x1331
    3d40:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    3d44:	11010182 	smlabbne	r1, r2, r1, r0
    3d48:	20000001 	andcs	r0, r0, r1
    3d4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3d50:	0b3a0e03 	bleq	e87564 <__ccfg+0xe675bc>
    3d54:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3d58:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d5c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3d60:	00130119 	andseq	r0, r3, r9, lsl r1
    3d64:	00052100 	andeq	r2, r5, r0, lsl #2
    3d68:	0b3a0e03 	bleq	e8757c <__ccfg+0xe675d4>
    3d6c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d70:	00001702 	andeq	r1, r0, r2, lsl #14
    3d74:	03003422 	movweq	r3, #1058	; 0x422
    3d78:	3b0b3a0e 	blcc	2d25b8 <__ccfg+0x2b2610>
    3d7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3d80:	23000018 	movwcs	r0, #24
    3d84:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3d88:	0b3b0b3a 	bleq	ec6a78 <__ccfg+0xea6ad0>
    3d8c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3d90:	34240000 	strtcc	r0, [r4], #-0
    3d94:	3a080300 	bcc	20499c <__ccfg+0x1e49f4>
    3d98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3d9c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    3da0:	0111010b 	tsteq	r1, fp, lsl #2
    3da4:	13010612 	movwne	r0, #5650	; 0x1612
    3da8:	34260000 	strtcc	r0, [r6], #-0
    3dac:	3a0e0300 	bcc	3849b4 <__ccfg+0x364a0c>
    3db0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3db4:	00170213 	andseq	r0, r7, r3, lsl r2
    3db8:	011d2700 	tsteq	sp, r0, lsl #14
    3dbc:	01111331 	tsteq	r1, r1, lsr r3
    3dc0:	0b580612 	bleq	1605610 <__ccfg+0x15e5668>
    3dc4:	13010559 	movwne	r0, #5465	; 0x1559
    3dc8:	05280000 	streq	r0, [r8, #-0]!
    3dcc:	00133100 	andseq	r3, r3, r0, lsl #2
    3dd0:	010b2900 	tsteq	fp, r0, lsl #18
    3dd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3dd8:	342a0000 	strtcc	r0, [sl], #-0
    3ddc:	02133100 	andseq	r3, r3, #0, 2
    3de0:	2b000017 	blcs	3e44 <TrimAfterColdResetWakeupFromShutDown+0x30>
    3de4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3de8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3dec:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3df0:	00001301 	andeq	r1, r0, r1, lsl #6
    3df4:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    3df8:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    3dfc:	13490026 	movtne	r0, #36902	; 0x9026
    3e00:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    3e04:	03193f00 	tsteq	r9, #0, 30
    3e08:	3b0b3a0e 	blcc	2d2648 <__ccfg+0x2b26a0>
    3e0c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3e10:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e14:	97184006 	ldrls	r4, [r8, -r6]
    3e18:	00001942 	andeq	r1, r0, r2, asr #18
    3e1c:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    3e20:	00130113 	andseq	r0, r3, r3, lsl r1
    3e24:	00213000 	eoreq	r3, r1, r0
    3e28:	0b2f1349 	bleq	bc8b54 <__ccfg+0xba8bac>
    3e2c:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    3e30:	03193f01 	tsteq	r9, #1, 30
    3e34:	3b0b3a0e 	blcc	2d2674 <__ccfg+0x2b26cc>
    3e38:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3e3c:	00130119 	andseq	r0, r3, r9, lsl r1
    3e40:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    3e44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3e48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3e4c:	13491927 	movtne	r1, #39207	; 0x9927
    3e50:	1301193c 	movwne	r1, #6460	; 0x193c
    3e54:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    3e58:	03193f00 	tsteq	r9, #0, 30
    3e5c:	3b0b3a0e 	blcc	2d269c <__ccfg+0x2b26f4>
    3e60:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3e64:	00193c13 	andseq	r3, r9, r3, lsl ip
    3e68:	11010000 	mrsne	r0, (UNDEF: 1)
    3e6c:	130e2501 	movwne	r2, #58625	; 0xe501
    3e70:	1b0e030b 	blne	384aa4 <__ccfg+0x364afc>
    3e74:	1117550e 	tstne	r7, lr, lsl #10
    3e78:	00171001 	andseq	r1, r7, r1
    3e7c:	00240200 	eoreq	r0, r4, r0, lsl #4
    3e80:	0b3e0b0b 	bleq	f86ab4 <__ccfg+0xf66b0c>
    3e84:	00000e03 	andeq	r0, r0, r3, lsl #28
    3e88:	03001603 	movweq	r1, #1539	; 0x603
    3e8c:	3b0b3a0e 	blcc	2d26cc <__ccfg+0x2b2724>
    3e90:	0013490b 	andseq	r4, r3, fp, lsl #18
    3e94:	00240400 	eoreq	r0, r4, r0, lsl #8
    3e98:	0b3e0b0b 	bleq	f86acc <__ccfg+0xf66b24>
    3e9c:	00000803 	andeq	r0, r0, r3, lsl #16
    3ea0:	0b010405 	bleq	44ebc <__ccfg+0x24f14>
    3ea4:	3b0b3a0b 	blcc	2d26d8 <__ccfg+0x2b2730>
    3ea8:	0013010b 	andseq	r0, r3, fp, lsl #2
    3eac:	00280600 	eoreq	r0, r8, r0, lsl #12
    3eb0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    3eb4:	04070000 	streq	r0, [r7], #-0
    3eb8:	3a0b0b01 	bcc	2c6ac4 <__ccfg+0x2a6b1c>
    3ebc:	01053b0b 	tsteq	r5, fp, lsl #22
    3ec0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3ec4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3ec8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3ecc:	00001349 	andeq	r1, r0, r9, asr #6
    3ed0:	03002e09 	movweq	r2, #3593	; 0xe09
    3ed4:	3b0b3a0e 	blcc	2d2714 <__ccfg+0x2b276c>
    3ed8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3edc:	000b2013 	andeq	r2, fp, r3, lsl r0
    3ee0:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    3ee4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3ee8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3eec:	13491927 	movtne	r1, #39207	; 0x9927
    3ef0:	13010b20 	movwne	r0, #6944	; 0x1b20
    3ef4:	340b0000 	strcc	r0, [fp], #-0
    3ef8:	3a0e0300 	bcc	384b00 <__ccfg+0x364b58>
    3efc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3f00:	0c000013 	stceq	0, cr0, [r0], {19}
    3f04:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3f08:	0b3a0e03 	bleq	e8771c <__ccfg+0xe67774>
    3f0c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3f10:	01111349 	tsteq	r1, r9, asr #6
    3f14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3f18:	00194297 	mulseq	r9, r7, r2
    3f1c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3f20:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3f24:	0b3b0b3a 	bleq	ec6c14 <__ccfg+0xea6c6c>
    3f28:	13491927 	movtne	r1, #39207	; 0x9927
    3f2c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3f30:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3f34:	00130119 	andseq	r0, r3, r9, lsl r1
    3f38:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3f3c:	0b3a0e03 	bleq	e87750 <__ccfg+0xe677a8>
    3f40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f44:	00001702 	andeq	r1, r0, r2, lsl #14
    3f48:	31012e0f 	tstcc	r1, pc, lsl #28
    3f4c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f50:	97184006 	ldrls	r4, [r8, -r6]
    3f54:	13011942 	movwne	r1, #6466	; 0x1942
    3f58:	34100000 	ldrcc	r0, [r0], #-0
    3f5c:	02133100 	andseq	r3, r3, #0, 2
    3f60:	11000017 	tstne	r0, r7, lsl r0
    3f64:	0111010b 	tsteq	r1, fp, lsl #2
    3f68:	00000612 	andeq	r0, r0, r2, lsl r6
    3f6c:	31003412 	tstcc	r0, r2, lsl r4
    3f70:	13000013 	movwne	r0, #19
    3f74:	1331001d 	teqne	r1, #29
    3f78:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3f7c:	0b590b58 	bleq	1646ce4 <__ccfg+0x1626d3c>
    3f80:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3f84:	03193f01 	tsteq	r9, #1, 30
    3f88:	3b0b3a0e 	blcc	2d27c8 <__ccfg+0x2b2820>
    3f8c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3f90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f94:	97184006 	ldrls	r4, [r8, -r6]
    3f98:	13011942 	movwne	r1, #6466	; 0x1942
    3f9c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    3fa0:	11000182 	smlabbne	r0, r2, r1, r0
    3fa4:	00133101 	andseq	r3, r3, r1, lsl #2
    3fa8:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    3fac:	0b3a0e03 	bleq	e877c0 <__ccfg+0xe67818>
    3fb0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3fb4:	0b201349 	bleq	808ce0 <__ccfg+0x7e8d38>
    3fb8:	00001301 	andeq	r1, r0, r1, lsl #6
    3fbc:	03003417 	movweq	r3, #1047	; 0x417
    3fc0:	3b0b3a0e 	blcc	2d2800 <__ccfg+0x2b2858>
    3fc4:	00134905 	andseq	r4, r3, r5, lsl #18
    3fc8:	00341800 	eorseq	r1, r4, r0, lsl #16
    3fcc:	0b3a0e03 	bleq	e877e0 <__ccfg+0xe67838>
    3fd0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3fd4:	00001802 	andeq	r1, r0, r2, lsl #16
    3fd8:	31001d19 	tstcc	r0, r9, lsl sp
    3fdc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3fe0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3fe4:	1a00000b 	bne	4018 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x10>
    3fe8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3fec:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3ff0:	0b590b58 	bleq	1646d58 <__ccfg+0x1626db0>
    3ff4:	00001301 	andeq	r1, r0, r1, lsl #6
    3ff8:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    3ffc:	1c000017 	stcne	0, cr0, [r0], {23}
    4000:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4004:	0b3a0e03 	bleq	e87818 <__ccfg+0xe67870>
    4008:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    400c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4010:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    4014:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    4018:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    401c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4020:	0b590b58 	bleq	1646d88 <__ccfg+0x1626de0>
    4024:	00001301 	andeq	r1, r0, r1, lsl #6
    4028:	31011d1e 	tstcc	r1, lr, lsl sp
    402c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4030:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    4034:	0000000b 	andeq	r0, r0, fp
    4038:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    403c:	030b130e 	movweq	r1, #45838	; 0xb30e
    4040:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    4044:	10011117 	andne	r1, r1, r7, lsl r1
    4048:	02000017 	andeq	r0, r0, #23
    404c:	0b0b0024 	bleq	2c40e4 <__ccfg+0x2a413c>
    4050:	0e030b3e 	vmoveq.16	d3[0], r0
    4054:	16030000 	strne	r0, [r3], -r0
    4058:	3a0e0300 	bcc	384c60 <__ccfg+0x364cb8>
    405c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4060:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    4064:	0b0b0024 	bleq	2c40fc <__ccfg+0x2a4154>
    4068:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    406c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    4070:	3a0e0301 	bcc	384c7c <__ccfg+0x364cd4>
    4074:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    4078:	010b2019 	tsteq	fp, r9, lsl r0
    407c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4080:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    4084:	0b3b0b3a 	bleq	ec6d74 <__ccfg+0xea6dcc>
    4088:	00001349 	andeq	r1, r0, r9, asr #6
    408c:	03003407 	movweq	r3, #1031	; 0x407
    4090:	3b0b3a0e 	blcc	2d28d0 <__ccfg+0x2b2928>
    4094:	0013490b 	andseq	r4, r3, fp, lsl #18
    4098:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    409c:	0b3a0e03 	bleq	e878b0 <__ccfg+0xe67908>
    40a0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    40a4:	0b201349 	bleq	808dd0 <__ccfg+0x7e8e28>
    40a8:	00001301 	andeq	r1, r0, r1, lsl #6
    40ac:	31012e09 	tstcc	r1, r9, lsl #28
    40b0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    40b4:	97184006 	ldrls	r4, [r8, -r6]
    40b8:	13011942 	movwne	r1, #6466	; 0x1942
    40bc:	050a0000 	streq	r0, [sl, #-0]
    40c0:	02133100 	andseq	r3, r3, #0, 2
    40c4:	0b000017 	bleq	4128 <NOROM_SetupGetTrimForAmpcompTh2>
    40c8:	13310034 	teqne	r1, #52	; 0x34
    40cc:	00001702 	andeq	r1, r0, r2, lsl #14
    40d0:	3100050c 	tstcc	r0, ip, lsl #10
    40d4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    40d8:	82890d00 	addhi	r0, r9, #0, 26
    40dc:	01110001 	tsteq	r1, r1
    40e0:	00001331 	andeq	r1, r0, r1, lsr r3
    40e4:	0182890e 	orreq	r8, r2, lr, lsl #18
    40e8:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    40ec:	13311942 	teqne	r1, #1081344	; 0x108000
    40f0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    40f4:	03193f01 	tsteq	r9, #1, 30
    40f8:	3b0b3a0e 	blcc	2d2938 <__ccfg+0x2b2990>
    40fc:	11192705 	tstne	r9, r5, lsl #14
    4100:	40061201 	andmi	r1, r6, r1, lsl #4
    4104:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    4108:	00001301 	andeq	r1, r0, r1, lsl #6
    410c:	03000510 	movweq	r0, #1296	; 0x510
    4110:	3b0b3a0e 	blcc	2d2950 <__ccfg+0x2b29a8>
    4114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4118:	11000017 	tstne	r0, r7, lsl r0
    411c:	01018289 	smlabbeq	r1, r9, r2, r8
    4120:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    4124:	00133119 	andseq	r3, r3, r9, lsl r1
    4128:	828a1200 	addhi	r1, sl, #0, 4
    412c:	18020001 	stmdane	r2, {r0}
    4130:	00184291 	mulseq	r8, r1, r2
    4134:	00341300 	eorseq	r1, r4, r0, lsl #6
    4138:	0b3a0e03 	bleq	e8794c <__ccfg+0xe679a4>
    413c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    4140:	00001702 	andeq	r1, r0, r2, lsl #14
    4144:	3f012e14 	svccc	0x00012e14
    4148:	3a0e0319 	bcc	384db4 <__ccfg+0x364e0c>
    414c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    4150:	11134919 	tstne	r3, r9, lsl r9
    4154:	40061201 	andmi	r1, r6, r1, lsl #4
    4158:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    415c:	00001301 	andeq	r1, r0, r1, lsl #6
    4160:	31011d15 	tstcc	r1, r5, lsl sp
    4164:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4168:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    416c:	1600000b 	strne	r0, [r0], -fp
    4170:	0111010b 	tsteq	r1, fp, lsl #2
    4174:	00000612 	andeq	r0, r0, r2, lsl r6
    4178:	3f002e17 	svccc	0x00002e17
    417c:	3a0e0319 	bcc	384de8 <__ccfg+0x364e40>
    4180:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    4184:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    4188:	00000019 	andeq	r0, r0, r9, lsl r0
    418c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4190:	030b130e 	movweq	r1, #45838	; 0xb30e
    4194:	110e1b0e 	tstne	lr, lr, lsl #22
    4198:	10061201 	andne	r1, r6, r1, lsl #4
    419c:	02000017 	andeq	r0, r0, #23
    41a0:	0b0b0024 	bleq	2c4238 <__ccfg+0x2a4290>
    41a4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    41a8:	16030000 	strne	r0, [r3], -r0
    41ac:	3a0e0300 	bcc	384db4 <__ccfg+0x364e0c>
    41b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41b4:	0013490b 	andseq	r4, r3, fp, lsl #18
    41b8:	00240400 	eoreq	r0, r4, r0, lsl #8
    41bc:	0b3e0b0b 	bleq	f86df0 <__ccfg+0xf66e48>
    41c0:	00000e03 	andeq	r0, r0, r3, lsl #28
    41c4:	03001605 	movweq	r1, #1541	; 0x605
    41c8:	3b0b3a0e 	blcc	2d2a08 <__ccfg+0x2b2a60>
    41cc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    41d0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    41d4:	13490026 	movtne	r0, #36902	; 0x9026
    41d8:	17070000 	strne	r0, [r7, -r0]
    41dc:	3a0b0b01 	bcc	2c6de8 <__ccfg+0x2a6e40>
    41e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41e4:	0013010b 	andseq	r0, r3, fp, lsl #2
    41e8:	000d0800 	andeq	r0, sp, r0, lsl #16
    41ec:	0b3a0e03 	bleq	e87a00 <__ccfg+0xe67a58>
    41f0:	0b390b3b 	bleq	e46ee4 <__ccfg+0xe26f3c>
    41f4:	00001349 	andeq	r1, r0, r9, asr #6
    41f8:	49010109 	stmdbmi	r1, {r0, r3, r8}
    41fc:	00130113 	andseq	r0, r3, r3, lsl r1
    4200:	00210a00 	eoreq	r0, r1, r0, lsl #20
    4204:	0b2f1349 	bleq	bc8f30 <__ccfg+0xba8f88>
    4208:	130b0000 	movwne	r0, #45056	; 0xb000
    420c:	3a0b0b01 	bcc	2c6e18 <__ccfg+0x2a6e70>
    4210:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4214:	0013010b 	andseq	r0, r3, fp, lsl #2
    4218:	000d0c00 	andeq	r0, sp, r0, lsl #24
    421c:	0b3a0e03 	bleq	e87a30 <__ccfg+0xe67a88>
    4220:	0b390b3b 	bleq	e46f14 <__ccfg+0xe26f6c>
    4224:	0b381349 	bleq	e08f50 <__ccfg+0xde8fa8>
    4228:	0f0d0000 	svceq	0x000d0000
    422c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4230:	00370e00 	eorseq	r0, r7, r0, lsl #28
    4234:	00001349 	andeq	r1, r0, r9, asr #6
    4238:	0301130f 	movweq	r1, #4879	; 0x130f
    423c:	3a0b0b0e 	bcc	2c6e7c <__ccfg+0x2a6ed4>
    4240:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4244:	0013010b 	andseq	r0, r3, fp, lsl #2
    4248:	000d1000 	andeq	r1, sp, r0
    424c:	0b3a0803 	bleq	e86260 <__ccfg+0xe662b8>
    4250:	0b390b3b 	bleq	e46f44 <__ccfg+0xe26f9c>
    4254:	0b381349 	bleq	e08f80 <__ccfg+0xde8fd8>
    4258:	0f110000 	svceq	0x00110000
    425c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4260:	12000013 	andne	r0, r0, #19
    4264:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4268:	0b3a050b 	bleq	e8569c <__ccfg+0xe656f4>
    426c:	0b390b3b 	bleq	e46f60 <__ccfg+0xe26fb8>
    4270:	00001301 	andeq	r1, r0, r1, lsl #6
    4274:	03000d13 	movweq	r0, #3347	; 0xd13
    4278:	3b0b3a0e 	blcc	2d2ab8 <__ccfg+0x2b2b10>
    427c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4280:	00053813 	andeq	r3, r5, r3, lsl r8
    4284:	00151400 	andseq	r1, r5, r0, lsl #8
    4288:	00001927 	andeq	r1, r0, r7, lsr #18
    428c:	27011515 	smladcs	r1, r5, r5, r1
    4290:	01134919 	tsteq	r3, r9, lsl r9
    4294:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4298:	13490005 	movtne	r0, #36869	; 0x9005
    429c:	13170000 	tstne	r7, #0
    42a0:	0b0e0301 	bleq	384eac <__ccfg+0x364f04>
    42a4:	3b0b3a05 	blcc	2d2ac0 <__ccfg+0x2b2b18>
    42a8:	010b3905 	tsteq	fp, r5, lsl #18
    42ac:	18000013 	stmdane	r0, {r0, r1, r4}
    42b0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    42b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    42bc:	00000b38 	andeq	r0, r0, r8, lsr fp
    42c0:	03000d19 	movweq	r0, #3353	; 0xd19
    42c4:	3b0b3a0e 	blcc	2d2b04 <__ccfg+0x2b2b5c>
    42c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42cc:	00053813 	andeq	r3, r5, r3, lsl r8
    42d0:	01131a00 	tsteq	r3, r0, lsl #20
    42d4:	0b0b0e03 	bleq	2c7ae8 <__ccfg+0x2a7b40>
    42d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42dc:	13010b39 	movwne	r0, #6969	; 0x1b39
    42e0:	131b0000 	tstne	fp, #0
    42e4:	3a0b0b01 	bcc	2c6ef0 <__ccfg+0x2a6f48>
    42e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    42ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    42f0:	01171c00 	tsteq	r7, r0, lsl #24
    42f4:	0b3a0b0b 	bleq	e86f28 <__ccfg+0xe66f80>
    42f8:	0b39053b 	bleq	e457ec <__ccfg+0xe25844>
    42fc:	00001301 	andeq	r1, r0, r1, lsl #6
    4300:	03000d1d 	movweq	r0, #3357	; 0xd1d
    4304:	3b0b3a0e 	blcc	2d2b44 <__ccfg+0x2b2b9c>
    4308:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    430c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4310:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4314:	00001301 	andeq	r1, r0, r1, lsl #6
    4318:	0300341f 	movweq	r3, #1055	; 0x41f
    431c:	3b0b3a0e 	blcc	2d2b5c <__ccfg+0x2b2bb4>
    4320:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4324:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4328:	20000019 	andcs	r0, r0, r9, lsl r0
    432c:	00000026 	andeq	r0, r0, r6, lsr #32
    4330:	03003421 	movweq	r3, #1057	; 0x421
    4334:	3b0b3a0e 	blcc	2d2b74 <__ccfg+0x2b2bcc>
    4338:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    433c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4340:	22000019 	andcs	r0, r0, #25
    4344:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4348:	0b3a0e03 	bleq	e87b5c <__ccfg+0xe67bb4>
    434c:	0b390b3b 	bleq	e47040 <__ccfg+0xe27098>
    4350:	13491927 	movtne	r1, #39207	; 0x9927
    4354:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    435c:	00130119 	andseq	r0, r3, r9, lsl r1
    4360:	00052300 	andeq	r2, r5, r0, lsl #6
    4364:	0b3a0e03 	bleq	e87b78 <__ccfg+0xe67bd0>
    4368:	0b390b3b 	bleq	e4705c <__ccfg+0xe270b4>
    436c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    4370:	05240000 	streq	r0, [r4, #-0]!
    4374:	3a0e0300 	bcc	384f7c <__ccfg+0x364fd4>
    4378:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    437c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4380:	1742b717 	smlaldne	fp, r2, r7, r7
    4384:	34250000 	strtcc	r0, [r5], #-0
    4388:	3a080300 	bcc	204f90 <__ccfg+0x1e4fe8>
    438c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4390:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4394:	1742b717 	smlaldne	fp, r2, r7, r7
    4398:	34260000 	strtcc	r0, [r6], #-0
    439c:	3a0e0300 	bcc	384fa4 <__ccfg+0x364ffc>
    43a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    43a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    43a8:	1742b717 	smlaldne	fp, r2, r7, r7
    43ac:	01000000 	mrseq	r0, (UNDEF: 0)
    43b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    43b4:	0e030b13 	vmoveq.32	d3[0], r0
    43b8:	01110e1b 	tsteq	r1, fp, lsl lr
    43bc:	17100612 			; <UNDEFINED> instruction: 0x17100612
    43c0:	24020000 	strcs	r0, [r2], #-0
    43c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    43c8:	000e030b 	andeq	r0, lr, fp, lsl #6
    43cc:	00240300 	eoreq	r0, r4, r0, lsl #6
    43d0:	0b3e0b0b 	bleq	f87004 <__ccfg+0xf6705c>
    43d4:	00000803 	andeq	r0, r0, r3, lsl #16
    43d8:	03001604 	movweq	r1, #1540	; 0x604
    43dc:	3b0b3a0e 	blcc	2d2c1c <__ccfg+0x2b2c74>
    43e0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    43e4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    43e8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    43ec:	0b3b0b3a 	bleq	ec70dc <__ccfg+0xea7134>
    43f0:	13490b39 	movtne	r0, #39737	; 0x9b39
    43f4:	17060000 	strne	r0, [r6, -r0]
    43f8:	3a0b0b01 	bcc	2c7004 <__ccfg+0x2a705c>
    43fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4400:	0013010b 	andseq	r0, r3, fp, lsl #2
    4404:	000d0700 	andeq	r0, sp, r0, lsl #14
    4408:	0b3a0e03 	bleq	e87c1c <__ccfg+0xe67c74>
    440c:	0b390b3b 	bleq	e47100 <__ccfg+0xe27158>
    4410:	00001349 	andeq	r1, r0, r9, asr #6
    4414:	49010108 	stmdbmi	r1, {r3, r8}
    4418:	00130113 	andseq	r0, r3, r3, lsl r1
    441c:	00210900 	eoreq	r0, r1, r0, lsl #18
    4420:	0b2f1349 	bleq	bc914c <__ccfg+0xba91a4>
    4424:	130a0000 	movwne	r0, #40960	; 0xa000
    4428:	3a0b0b01 	bcc	2c7034 <__ccfg+0x2a708c>
    442c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4430:	0013010b 	andseq	r0, r3, fp, lsl #2
    4434:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4438:	0b3a0e03 	bleq	e87c4c <__ccfg+0xe67ca4>
    443c:	0b390b3b 	bleq	e47130 <__ccfg+0xe27188>
    4440:	0b381349 	bleq	e0916c <__ccfg+0xde91c4>
    4444:	0f0c0000 	svceq	0x000c0000
    4448:	000b0b00 	andeq	r0, fp, r0, lsl #22
    444c:	01130d00 	tsteq	r3, r0, lsl #26
    4450:	0b0b0e03 	bleq	2c7c64 <__ccfg+0x2a7cbc>
    4454:	0b3b0b3a 	bleq	ec7144 <__ccfg+0xea719c>
    4458:	13010b39 	movwne	r0, #6969	; 0x1b39
    445c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4460:	3a080300 	bcc	205068 <__ccfg+0x1e50c0>
    4464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4468:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    446c:	0f00000b 	svceq	0x0000000b
    4470:	0b0b000f 	bleq	2c44b4 <__ccfg+0x2a450c>
    4474:	00001349 	andeq	r1, r0, r9, asr #6
    4478:	03011310 	movweq	r1, #4880	; 0x1310
    447c:	3a050b0e 	bcc	1470bc <__ccfg+0x127114>
    4480:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4484:	0013010b 	andseq	r0, r3, fp, lsl #2
    4488:	000d1100 	andeq	r1, sp, r0, lsl #2
    448c:	0b3a0e03 	bleq	e87ca0 <__ccfg+0xe67cf8>
    4490:	0b390b3b 	bleq	e47184 <__ccfg+0xe271dc>
    4494:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4498:	15120000 	ldrne	r0, [r2, #-0]
    449c:	00192700 	andseq	r2, r9, r0, lsl #14
    44a0:	01151300 	tsteq	r5, r0, lsl #6
    44a4:	13491927 	movtne	r1, #39207	; 0x9927
    44a8:	00001301 	andeq	r1, r0, r1, lsl #6
    44ac:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    44b0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    44b4:	13490026 	movtne	r0, #36902	; 0x9026
    44b8:	13160000 	tstne	r6, #0
    44bc:	0b0e0301 	bleq	3850c8 <__ccfg+0x365120>
    44c0:	3b0b3a05 	blcc	2d2cdc <__ccfg+0x2b2d34>
    44c4:	010b3905 	tsteq	fp, r5, lsl #18
    44c8:	17000013 	smladne	r0, r3, r0, r0
    44cc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    44d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    44d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    44dc:	03000d18 	movweq	r0, #3352	; 0xd18
    44e0:	3b0b3a0e 	blcc	2d2d20 <__ccfg+0x2b2d78>
    44e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    44e8:	00053813 	andeq	r3, r5, r3, lsl r8
    44ec:	01131900 	tsteq	r3, r0, lsl #18
    44f0:	0b0b0e03 	bleq	2c7d04 <__ccfg+0x2a7d5c>
    44f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    44f8:	13010b39 	movwne	r0, #6969	; 0x1b39
    44fc:	131a0000 	tstne	sl, #0
    4500:	3a0b0b01 	bcc	2c710c <__ccfg+0x2a7164>
    4504:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4508:	0013010b 	andseq	r0, r3, fp, lsl #2
    450c:	01171b00 	tsteq	r7, r0, lsl #22
    4510:	0b3a0b0b 	bleq	e87144 <__ccfg+0xe6719c>
    4514:	0b39053b 	bleq	e45a08 <__ccfg+0xe25a60>
    4518:	00001301 	andeq	r1, r0, r1, lsl #6
    451c:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4520:	3b0b3a0e 	blcc	2d2d60 <__ccfg+0x2b2db8>
    4524:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4528:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    452c:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4530:	0000193c 	andeq	r1, r0, ip, lsr r9
    4534:	2701151e 	smladcs	r1, lr, r5, r1
    4538:	00130119 	andseq	r0, r3, r9, lsl r1
    453c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4540:	0b3a0e03 	bleq	e87d54 <__ccfg+0xe67dac>
    4544:	0b39053b 	bleq	e45a38 <__ccfg+0xe25a90>
    4548:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    454c:	0000193c 	andeq	r1, r0, ip, lsr r9
    4550:	03003420 	movweq	r3, #1056	; 0x420
    4554:	3b0b3a0e 	blcc	2d2d94 <__ccfg+0x2b2dec>
    4558:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    455c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4560:	21000019 	tstcs	r0, r9, lsl r0
    4564:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4568:	0b3a0e03 	bleq	e87d7c <__ccfg+0xe67dd4>
    456c:	0b390b3b 	bleq	e47260 <__ccfg+0xe272b8>
    4570:	13491927 	movtne	r1, #39207	; 0x9927
    4574:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4578:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    457c:	00130119 	andseq	r0, r3, r9, lsl r1
    4580:	00342200 	eorseq	r2, r4, r0, lsl #4
    4584:	0b3a0e03 	bleq	e87d98 <__ccfg+0xe67df0>
    4588:	0b390b3b 	bleq	e4727c <__ccfg+0xe272d4>
    458c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4590:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4594:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    4598:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    459c:	0b3b0b3a 	bleq	ec728c <__ccfg+0xea72e4>
    45a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    45a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    45a8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    45ac:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    45b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    45b4:	0b3b0b3a 	bleq	ec72a4 <__ccfg+0xea72fc>
    45b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    45bc:	00001802 	andeq	r1, r0, r2, lsl #16
    45c0:	01110100 	tsteq	r1, r0, lsl #2
    45c4:	0b130e25 	bleq	4c7e60 <__ccfg+0x4a7eb8>
    45c8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    45cc:	00001710 	andeq	r1, r0, r0, lsl r7
    45d0:	0b002402 	bleq	d5e0 <__exidx_end+0x79a0>
    45d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    45d8:	03000008 	movweq	r0, #8
    45dc:	0b0b0024 	bleq	2c4674 <__ccfg+0x2a46cc>
    45e0:	0e030b3e 	vmoveq.16	d3[0], r0
    45e4:	16040000 	strne	r0, [r4], -r0
    45e8:	3a0e0300 	bcc	3851f0 <__ccfg+0x365248>
    45ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    45f0:	0013490b 	andseq	r4, r3, fp, lsl #18
    45f4:	00160500 	andseq	r0, r6, r0, lsl #10
    45f8:	0b3a0e03 	bleq	e87e0c <__ccfg+0xe67e64>
    45fc:	0b390b3b 	bleq	e472f0 <__ccfg+0xe27348>
    4600:	00001349 	andeq	r1, r0, r9, asr #6
    4604:	0b011706 	bleq	4a224 <__ccfg+0x2a27c>
    4608:	3b0b3a0b 	blcc	2d2e3c <__ccfg+0x2b2e94>
    460c:	010b390b 	tsteq	fp, fp, lsl #18
    4610:	07000013 	smladeq	r0, r3, r0, r0
    4614:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4618:	0b3b0b3a 	bleq	ec7308 <__ccfg+0xea7360>
    461c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4620:	01080000 	mrseq	r0, (UNDEF: 8)
    4624:	01134901 	tsteq	r3, r1, lsl #18
    4628:	09000013 	stmdbeq	r0, {r0, r1, r4}
    462c:	13490021 	movtne	r0, #36897	; 0x9021
    4630:	00000b2f 	andeq	r0, r0, pc, lsr #22
    4634:	0b01130a 	bleq	49264 <__ccfg+0x292bc>
    4638:	3b0b3a0b 	blcc	2d2e6c <__ccfg+0x2b2ec4>
    463c:	010b390b 	tsteq	fp, fp, lsl #18
    4640:	0b000013 	bleq	4694 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    4644:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4648:	0b3b0b3a 	bleq	ec7338 <__ccfg+0xea7390>
    464c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4650:	00000b38 	andeq	r0, r0, r8, lsr fp
    4654:	0b000f0c 	bleq	828c <__exidx_end+0x264c>
    4658:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    465c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4660:	0b3a0b0b 	bleq	e87294 <__ccfg+0xe672ec>
    4664:	0b390b3b 	bleq	e47358 <__ccfg+0xe273b0>
    4668:	00001301 	andeq	r1, r0, r1, lsl #6
    466c:	03000d0e 	movweq	r0, #3342	; 0xd0e
    4670:	3b0b3a08 	blcc	2d2e98 <__ccfg+0x2b2ef0>
    4674:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4678:	000b3813 	andeq	r3, fp, r3, lsl r8
    467c:	000f0f00 	andeq	r0, pc, r0, lsl #30
    4680:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4684:	13100000 	tstne	r0, #0
    4688:	0b0e0301 	bleq	385294 <__ccfg+0x3652ec>
    468c:	3b0b3a05 	blcc	2d2ea8 <__ccfg+0x2b2f00>
    4690:	010b390b 	tsteq	fp, fp, lsl #18
    4694:	11000013 	tstne	r0, r3, lsl r0
    4698:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    469c:	0b3b0b3a 	bleq	ec738c <__ccfg+0xea73e4>
    46a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    46a4:	00000538 	andeq	r0, r0, r8, lsr r5
    46a8:	27001512 	smladcs	r0, r2, r5, r1
    46ac:	13000019 	movwne	r0, #25
    46b0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    46b4:	13011349 	movwne	r1, #4937	; 0x1349
    46b8:	05140000 	ldreq	r0, [r4, #-0]
    46bc:	00134900 	andseq	r4, r3, r0, lsl #18
    46c0:	00261500 	eoreq	r1, r6, r0, lsl #10
    46c4:	00001349 	andeq	r1, r0, r9, asr #6
    46c8:	03011316 	movweq	r1, #4886	; 0x1316
    46cc:	3a050b0e 	bcc	14730c <__ccfg+0x127364>
    46d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    46d8:	000d1700 	andeq	r1, sp, r0, lsl #14
    46dc:	0b3a0e03 	bleq	e87ef0 <__ccfg+0xe67f48>
    46e0:	0b39053b 	bleq	e45bd4 <__ccfg+0xe25c2c>
    46e4:	0b381349 	bleq	e09410 <__ccfg+0xde9468>
    46e8:	0d180000 	ldceq	0, cr0, [r8, #-0]
    46ec:	3a0e0300 	bcc	3852f4 <__ccfg+0x36534c>
    46f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    46f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    46f8:	19000005 	stmdbne	r0, {r0, r2}
    46fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4700:	0b3a0b0b 	bleq	e87334 <__ccfg+0xe6738c>
    4704:	0b39053b 	bleq	e45bf8 <__ccfg+0xe25c50>
    4708:	00001301 	andeq	r1, r0, r1, lsl #6
    470c:	0b01131a 	bleq	4937c <__ccfg+0x293d4>
    4710:	3b0b3a0b 	blcc	2d2f44 <__ccfg+0x2b2f9c>
    4714:	010b3905 	tsteq	fp, r5, lsl #18
    4718:	1b000013 	blne	476c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>
    471c:	0b0b0117 	bleq	2c4b80 <__ccfg+0x2a4bd8>
    4720:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4724:	13010b39 	movwne	r0, #6969	; 0x1b39
    4728:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    472c:	3a0e0300 	bcc	385334 <__ccfg+0x36538c>
    4730:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4734:	0013490b 	andseq	r4, r3, fp, lsl #18
    4738:	00131d00 	andseq	r1, r3, r0, lsl #26
    473c:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4740:	151e0000 	ldrne	r0, [lr, #-0]
    4744:	01192701 	tsteq	r9, r1, lsl #14
    4748:	1f000013 	svcne	0x00000013
    474c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4750:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4754:	13490b39 	movtne	r0, #39737	; 0x9b39
    4758:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    475c:	34200000 	strtcc	r0, [r0], #-0
    4760:	3a0e0300 	bcc	385368 <__ccfg+0x3653c0>
    4764:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4768:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    476c:	21000018 	tstcs	r0, r8, lsl r0
    4770:	13470034 	movtne	r0, #28724	; 0x7034
    4774:	00001802 	andeq	r1, r0, r2, lsl #16
    4778:	01110100 	tsteq	r1, r0, lsl #2
    477c:	0b130e25 	bleq	4c8018 <__ccfg+0x4a8070>
    4780:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    4784:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4788:	00001710 	andeq	r1, r0, r0, lsl r7
    478c:	0b002402 	bleq	d79c <__exidx_end+0x7b5c>
    4790:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4794:	0300000e 	movweq	r0, #14
    4798:	0b0b0024 	bleq	2c4830 <__ccfg+0x2a4888>
    479c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    47a0:	16040000 	strne	r0, [r4], -r0
    47a4:	3a0e0300 	bcc	3853ac <__ccfg+0x365404>
    47a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    47b0:	000f0500 	andeq	r0, pc, r0, lsl #10
    47b4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    47b8:	15060000 	strne	r0, [r6, #-0]
    47bc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    47c0:	00130113 	andseq	r0, r3, r3, lsl r1
    47c4:	00050700 	andeq	r0, r5, r0, lsl #14
    47c8:	00001349 	andeq	r1, r0, r9, asr #6
    47cc:	00002608 	andeq	r2, r0, r8, lsl #12
    47d0:	00340900 	eorseq	r0, r4, r0, lsl #18
    47d4:	0b3a0e03 	bleq	e87fe8 <__ccfg+0xe68040>
    47d8:	0b390b3b 	bleq	e474cc <__ccfg+0xe27524>
    47dc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    47e0:	0000193c 	andeq	r1, r0, ip, lsr r9
    47e4:	0301040a 	movweq	r0, #5130	; 0x140a
    47e8:	0b0b3e0e 	bleq	2d4028 <__ccfg+0x2b4080>
    47ec:	3a13490b 	bcc	4d6c20 <__ccfg+0x4b6c78>
    47f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    47f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    47f8:	00280b00 	eoreq	r0, r8, r0, lsl #22
    47fc:	0b1c0e03 	bleq	708010 <__ccfg+0x6e8068>
    4800:	010c0000 	mrseq	r0, (UNDEF: 12)
    4804:	01134901 	tsteq	r3, r1, lsl #18
    4808:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    480c:	00000021 	andeq	r0, r0, r1, lsr #32
    4810:	4900260e 	stmdbmi	r0, {r1, r2, r3, r9, sl, sp}
    4814:	0f000013 	svceq	0x00000013
    4818:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    481c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4820:	13490b39 	movtne	r0, #39737	; 0x9b39
    4824:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    4828:	13100000 	tstne	r0, #0
    482c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4830:	11000019 	tstne	r0, r9, lsl r0
    4834:	19270015 	stmdbne	r7!, {r0, r2, r4}
    4838:	17120000 	ldrne	r0, [r2, -r0]
    483c:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    4840:	13000019 	movwne	r0, #25
    4844:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4848:	0b3a0b0b 	bleq	e8747c <__ccfg+0xe674d4>
    484c:	0b39053b 	bleq	e45d40 <__ccfg+0xe25d98>
    4850:	00001301 	andeq	r1, r0, r1, lsl #6
    4854:	03000d14 	movweq	r0, #3348	; 0xd14
    4858:	3b0b3a0e 	blcc	2d3098 <__ccfg+0x2b30f0>
    485c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4860:	000b3813 	andeq	r3, fp, r3, lsl r8
    4864:	00211500 	eoreq	r1, r1, r0, lsl #10
    4868:	0b2f1349 	bleq	bc9594 <__ccfg+0xba95ec>
    486c:	04160000 	ldreq	r0, [r6], #-0
    4870:	3e0e0301 	cdpcc	3, 0, cr0, cr14, cr1, {0}
    4874:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
    4878:	3b0b3a13 	blcc	2d30cc <__ccfg+0x2b3124>
    487c:	010b3905 	tsteq	fp, r5, lsl #18
    4880:	17000013 	smladne	r0, r3, r0, r0
    4884:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4888:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    488c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4890:	00000b38 	andeq	r0, r0, r8, lsr fp
    4894:	0b011718 	bleq	4a4fc <__ccfg+0x2a554>
    4898:	3b0b3a0b 	blcc	2d30cc <__ccfg+0x2b3124>
    489c:	010b3905 	tsteq	fp, r5, lsl #18
    48a0:	19000013 	stmdbne	r0, {r0, r1, r4}
    48a4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    48a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48ac:	13490b39 	movtne	r0, #39737	; 0x9b39
    48b0:	161a0000 	ldrne	r0, [sl], -r0
    48b4:	3a0e0300 	bcc	3854bc <__ccfg+0x365514>
    48b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    48bc:	0013490b 	andseq	r4, r3, fp, lsl #18
    48c0:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    48c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    48c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    48cc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    48d0:	01111349 	tsteq	r1, r9, asr #6
    48d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    48d8:	00194297 	mulseq	r9, r7, r2
    48dc:	00051c00 	andeq	r1, r5, r0, lsl #24
    48e0:	0b3a0803 	bleq	e868f4 <__ccfg+0xe6694c>
    48e4:	0b39053b 	bleq	e45dd8 <__ccfg+0xe25e30>
    48e8:	17021349 	strne	r1, [r2, -r9, asr #6]
    48ec:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    48f0:	00341d00 	eorseq	r1, r4, r0, lsl #26
    48f4:	0b3a0803 	bleq	e86908 <__ccfg+0xe66960>
    48f8:	0b39053b 	bleq	e45dec <__ccfg+0xe25e44>
    48fc:	00001349 	andeq	r1, r0, r9, asr #6
    4900:	55010b1e 	strpl	r0, [r1, #-2846]	; 0xfffff4e2
    4904:	1f000017 	svcne	0x00000017
    4908:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    490c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4910:	13490b39 	movtne	r0, #39737	; 0x9b39
    4914:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4918:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000648 	andeq	r0, r0, r8, asr #12
       4:	0000069c 	muleq	r0, ip, r6
       8:	6a500001 	bvs	1400014 <__ccfg+0x13e006c>
       c:	6c00000b 	stcvs	0, cr0, [r0], {11}
    return node->data_base.item_array[index];
      10:	0100000b 	tsteq	r0, fp
      14:	0b8c5000 	bleq	fe31401c <_estack+0xde30f01c>
      18:	0b8f0000 	bleq	fe3c0020 <_estack+0xde3bb020>
};
      1c:	00010000 	andeq	r0, r1, r0
      20:	00000050 	andeq	r0, r0, r0, asr r0
      24:	00000000 	andeq	r0, r0, r0
      28:	00076600 	andeq	r6, r7, r0, lsl #12
      2c:	00076a00 	andeq	r6, r7, r0, lsl #20
      30:	91000200 	mrsls	r0, R8_usr
      34:	00000066 	andeq	r0, r0, r6, rrx
      38:	00000000 	andeq	r0, r0, r0
      3c:	00076600 	andeq	r6, r7, r0, lsl #12
			i = k;
      40:	00076a00 	andeq	r6, r7, r0, lsl #20
				j->Next = k;
      44:	53000100 	movwpl	r0, #256	; 0x100
	...
}
      50:	000007ac 	andeq	r0, r0, ip, lsr #15
      54:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
		release;
      58:	3e540001 	cdpcc	0, 5, cr0, cr4, cr1, {0}
      5c:	5e000008 	cdppl	0, 0, cr0, cr0, cr8, {0}
			nq++;
      60:	01000008 	tsteq	r0, r8
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	00005400 	andeq	r5, r0, r0, lsl #8
      68:	00000000 	andeq	r0, r0, r0
      6c:	078a0000 	streq	r0, [sl, r0]
      70:	078c0000 	streq	r0, [ip, r0]
      74:	00010000 	andeq	r0, r1, r0
      78:	00000051 	andeq	r0, r0, r1, asr r0
      7c:	00000000 	andeq	r0, r0, r0
      80:	00078a00 	andeq	r8, r7, r0, lsl #20
      84:	00078c00 	andeq	r8, r7, r0, lsl #24
      88:	52000100 	andpl	r0, r0, #0, 2
	...
	if (!button_still_pressed (__button_list [pbutton]))
      94:	000007f8 	strdeq	r0, [r0], -r8
      98:	00000803 	andeq	r0, r0, r3, lsl #16
	if (baction == NULL)
      9c:	03500001 	cmpeq	r0, #1
      a0:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
	(*baction) (pbutton);
      a4:	01000008 	tsteq	r0, r8
endthread
      a8:	00005400 	andeq	r5, r0, r0, lsl #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000000 	andeq	r0, r0, r0
      b0:	08e20000 	stmiaeq	r2!, {}^	; <UNPREDICTABLE>
endthread
      b4:	08f40000 	ldmeq	r4!, {}^	; <UNPREDICTABLE>
      b8:	00010000 	andeq	r0, r1, r0
      bc:	000b1a54 	andeq	r1, fp, r4, asr sl
      c0:	000b3800 	andeq	r3, fp, r0, lsl #16
      c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
fsm sender(struct ResponseMessage *message) {
      d0:	0000093c 	andeq	r0, r0, ip, lsr r9
}
      d4:	00000949 	andeq	r0, r0, r9, asr #18
      d8:	49500001 	ldmdbmi	r0, {r0}^
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	82000009 	andhi	r0, r0, #9
      e0:	01000009 	tsteq	r0, r9
      e4:	00005400 	andeq	r5, r0, r0, lsl #8
      e8:	00000000 	andeq	r0, r0, r0
      ec:	09e20000 	stmibeq	r2!, {}^	; <UNPREDICTABLE>
		packet[1] = message->gid;
      f0:	09ef0000 	stmibeq	pc!, {}^	; <UNPREDICTABLE>
      f4:	00010000 	andeq	r0, r1, r0
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	0009ef50 	andeq	lr, r9, r0, asr pc
      fc:	000a2000 	andeq	r2, sl, r0
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		*p = message->request_number;p++;
     10c:	00000a8a 	andeq	r0, r0, sl, lsl #21
		*p = message->sender_id;p++;
     110:	00000a97 	muleq	r0, r7, sl
		*p = message->receiver_id;p++;
     114:	97500001 	ldrbls	r0, [r0, -r1]
		switch(message->tpe) {
     118:	d600000a 	strle	r0, [r0], -sl
     11c:	0100000a 	tsteq	r0, sl
     120:	00005400 	andeq	r5, r0, r0, lsl #8
		tcv_endp(packet);
     124:	00000000 	andeq	r0, r0, r0
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	0b380000 	bleq	e00130 <__ccfg+0xde0188>
     12c:	0b620000 	bleq	1880134 <__ccfg+0x186018c>
}
     130:	00010000 	andeq	r0, r1, r0
		finish;
     134:	00000054 	andeq	r0, r0, r4, asr r0
     138:	00000000 	andeq	r0, r0, r0
     13c:	00027800 	andeq	r7, r2, r0, lsl #16
				strncpy(p, message->record, sizeof(message->record));
     140:	00029c00 	andeq	r9, r2, r0, lsl #24
				*p = message->padding;p++;
     144:	50000100 	andpl	r0, r0, r0, lsl #2
				strncpy(p, message->record, sizeof(message->record));
     148:	0000062e 	andeq	r0, r0, lr, lsr #12
     14c:	00000631 	andeq	r0, r0, r1, lsr r6
     150:	00500001 	subseq	r0, r0, r1
				strncpy(p, message->record, sizeof(message->record));
     154:	00000000 	andeq	r0, r0, r0
     158:	84000000 	strhi	r0, [r0], #-0
				strncpy(p, message->record, sizeof(message->record));
     15c:	06000002 	streq	r0, [r0], -r2
				break;
     160:	01000003 	tsteq	r0, r3
				*p = message->record_index;p++;
     164:	03185400 	tsteq	r8, #0, 8
				*p = message->padding;
     168:	03460000 	movteq	r0, #24576	; 0x6000
				break;
     16c:	00010000 	andeq	r0, r1, r0
     170:	0003d654 	andeq	sp, r3, r4, asr r6
     174:	00042000 	andeq	r2, r4, r0
     178:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     17c:	0000043c 	andeq	r0, r0, ip, lsr r4
     180:	000004a2 	andeq	r0, r0, r2, lsr #9
		node->nnodes[i] = 0;
     184:	b6540001 	ldrblt	r0, [r4], -r1
     188:	94000004 	strls	r0, [r0], #-4
     18c:	01000005 	tsteq	r0, r5
     190:	05a85400 	streq	r5, [r8, #1024]!	; 0x400
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	06480000 	strbeq	r0, [r8], -r0
bool init_node(struct Node* node){
     198:	00010000 	andeq	r0, r1, r0
    node->id  = 0;                  // default id value 0
     19c:	00000054 	andeq	r0, r0, r4, asr r0
    node->index = 0;                // default entry count 0
     1a0:	00000000 	andeq	r0, r0, r0
    node->data_base.item_count = 0; // default no items in array
     1a4:	0002e000 	andeq	lr, r2, r0
	reset_array(node);
     1a8:	0002e600 	andeq	lr, r2, r0, lsl #12
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	50000100 	andpl	r0, r0, r0, lsl #2
     1b0:	000002e6 	andeq	r0, r0, r6, ror #5
};
     1b4:	00000306 	andeq	r0, r0, r6, lsl #6
     1b8:	00560001 	subseq	r0, r6, r1
uint8_t generate_request_num(void){
     1bc:	00000000 	andeq	r0, r0, r0
    return (uint8_t) (rand() % 255);
     1c0:	32000000 	andcc	r0, r0, #0
     1c4:	34000004 	strcc	r0, [r0], #-4
     1c8:	01000004 	tsteq	r0, r4
}
     1cc:	04345000 	ldrteq	r5, [r4], #-0
            node->nnodes[i] = 0; // set to null byte
     1d0:	043c0000 	ldrteq	r0, [ip], #-0
     1d4:	00010000 	andeq	r0, r1, r0
     1d8:	00000054 	andeq	r0, r0, r4, asr r0
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00000000 	andeq	r0, r0, r0
};
     1e0:	00041400 	andeq	r1, r4, r0, lsl #8
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	00043c00 	andeq	r3, r4, r0, lsl #24
     1e8:	56000100 	strpl	r0, [r0], -r0, lsl #2
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	00000496 	muleq	r0, r6, r4
     1f0:	000004ae 	andeq	r0, r0, lr, lsr #9
     1f4:	00560001 	subseq	r0, r6, r1
        node->data_base.item_count -= 1;
     1f8:	00000000 	andeq	r0, r0, r0
};
     1fc:	04000000 	streq	r0, [r0], #-0
bool delete_all(struct Node *node){
     200:	0c000004 	stceq	0, cr0, [r0], {4}
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	02000004 	andeq	r0, r0, #4
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00067500 	andeq	r7, r6, r0, lsl #10
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00000000 	andeq	r0, r0, r0
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	04000000 	streq	r0, [r0], #-0
            node->data_base.item_array[i].timestamp = 0;
     214:	0c000004 	stceq	0, cr0, [r0], {4}
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	01000004 	tsteq	r0, r4
    node->data_base.item_count = 0;
     21c:	00005400 	andeq	r5, r0, r0, lsl #8
}
     220:	00000000 	andeq	r0, r0, r0
        return true;
     224:	05660000 	strbeq	r0, [r6, #-0]!
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	056c0000 	strbeq	r0, [ip, #-0]!
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00010000 	andeq	r0, r1, r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	00056c55 	andeq	r6, r5, r5, asr ip
     234:	00058000 	andeq	r8, r5, r0
     238:	78000200 	stmdavc	r0, {r9}
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00000008 	andeq	r0, r0, r8
	response_message->tpe = RESPONSE;
     240:	00000000 	andeq	r0, r0, r0
	response_message->status = status;
     244:	00056600 	andeq	r6, r5, r0, lsl #12
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	00058000 	andeq	r8, r5, r0
	response_message->gid = gid;
     24c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (!padding){
     258:	000000c8 	andeq	r0, r0, r8, asr #1
		response_message->padding = padding;
     25c:	000000d9 	ldrdeq	r0, [r0], -r9
	if (rec != NULL){
     260:	da500001 	ble	140026c <__ccfg+0x13e02c4>
     264:	eb000000 	bl	26c <assemble_response_message+0x46>
		strncpy(response_message->record, rec, 20);
     268:	01000000 	mrseq	r0, (UNDEF: 0)
     26c:	00005000 	andeq	r5, r0, r0
     270:	00000000 	andeq	r0, r0, r0
};
     274:	00dc0000 	sbcseq	r0, ip, r0
fsm receiver(struct Node* node_db) {
     278:	00e00000 	rsceq	r0, r0, r0
     27c:	00050000 	andeq	r0, r5, r0
     280:	23060073 	movwcs	r0, #24691	; 0x6073
     284:	00000008 	andeq	r0, r0, r8
     288:	00000000 	andeq	r0, r0, r0
     28c:	00015000 	andeq	r5, r1, r0
     290:	00015200 	andeq	r5, r1, r0, lsl #4
     294:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		incoming_packet = tcv_rnp(receiving, sfd);
     2a0:	00000226 	andeq	r0, r0, r6, lsr #4
     2a4:	0000022e 	andeq	r0, r0, lr, lsr #4
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	00500001 	subseq	r0, r0, r1
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	00000000 	andeq	r0, r0, r0
     2b0:	26000000 	strcs	r0, [r0], -r0
     2b4:	3f000002 	svccc	0x00000002
		switch (response_message_5->tpe){
     2b8:	01000002 	tsteq	r0, r2
     2bc:	00005100 	andeq	r5, r0, r0, lsl #2
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	02260000 	eoreq	r0, r6, #0
     2c8:	023f0000 	eorseq	r0, pc, #0
     2cc:	00010000 	andeq	r0, r1, r0
     2d0:	00000052 	andeq	r0, r0, r2, asr r0
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	00000000 	andeq	r0, r0, r0
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	00022600 	andeq	r2, r2, r0, lsl #12
				if (discovery_request_message->gid == node_db->gid){
     2dc:	00023f00 	andeq	r3, r2, r0, lsl #30
     2e0:	53000100 	movwpl	r0, #256	; 0x100
	...
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	0000024a 	andeq	r0, r0, sl, asr #4
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	0000026e 	andeq	r0, r0, lr, ror #4
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
					response_message_0->sender_id = node_db->id;
     2f8:	78000002 	stmdavc	r0, {r1}
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	01000002 	tsteq	r0, r2
					DEBUG_PRINT("\r\nSending to sender");
     300:	00005400 	andeq	r5, r0, r0, lsl #8
					call sender(response_message_0, done_case);
     304:	00000000 	andeq	r0, r0, r0
     308:	02000000 	andeq	r0, r0, #0
     30c:	02200000 	eoreq	r0, r0, #0
     310:	00010000 	andeq	r0, r1, r0
     314:	00022250 	andeq	r2, r2, r0, asr r2
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	00022400 	andeq	r2, r2, r0, lsl #8
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     328:	0000020e 	andeq	r0, r0, lr, lsl #4
     32c:	00000210 	andeq	r0, r0, r0, lsl r2
     330:	18530001 	ldmdane	r3, {r0}^
     334:	20000002 	andcs	r0, r0, r2
     338:	01000002 	tsteq	r0, r2
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	00005300 	andeq	r5, r0, r0, lsl #6
					node_db->index+=1;
     340:	00000000 	andeq	r0, r0, r0
     344:	01e40000 	mvneq	r0, r0
		tcv_endp(incoming_packet);
     348:	01fe0000 	mvnseq	r0, r0
     34c:	00010000 	andeq	r0, r1, r0
		proceed receiving;
     350:	00000050 	andeq	r0, r0, r0, asr r0
		ser_out(response_1_create, "\r\nData Saved");
     354:	00000000 	andeq	r0, r0, r0
     358:	0001e400 	andeq	lr, r1, r0, lsl #8
		proceed receiving;
     35c:	0001f000 	andeq	pc, r1, r0
     360:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		proceed receiving;
     36c:	000001ce 	andeq	r0, r0, lr, asr #3
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	000001d8 	ldrdeq	r0, [r0], -r8
     374:	00500001 	subseq	r0, r0, r1
     378:	00000000 	andeq	r0, r0, r0
     37c:	84000000 	strhi	r0, [r0], #-0
     380:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
		proceed receiving;
     384:	01000001 	tsteq	r0, r1
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	00005000 	andeq	r5, r0, r0
	...
		proceed receiving;
     398:	00010000 	andeq	r0, r1, r0
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	00000050 	andeq	r0, r0, r0, asr r0
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	00019800 	andeq	r9, r1, r0, lsl #16
     3a8:	0001ab00 	andeq	sl, r1, r0, lsl #22
		proceed receiving;
     3ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		proceed receiving;
     3c0:	00500001 	subseq	r0, r0, r1
	...
}
     3d0:	01000000 	mrseq	r0, (UNDEF: 0)
     3d4:	00005000 	andeq	r5, r0, r0
	...
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e4:	00010000 	andeq	r0, r1, r0
     3e8:	00000050 	andeq	r0, r0, r0, asr r0
	...
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	00520001 	subseq	r0, r2, r1
	...
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	01000000 	mrseq	r0, (UNDEF: 0)
     420:	00005000 	andeq	r5, r0, r0
     424:	00000000 	andeq	r0, r0, r0
     428:	14340000 	ldrtne	r0, [r4], #-0
     42c:	14340000 	ldrtne	r0, [r4], #-0
     430:	00010000 	andeq	r0, r1, r0
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	00000050 	andeq	r0, r0, r0, asr r0
					call sender(response_message_2, done_case);
     438:	00000000 	andeq	r0, r0, r0
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	0012c000 	andseq	ip, r2, r0
     440:	0012c600 	andseq	ip, r2, r0, lsl #12
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	56000100 	strpl	r0, [r0], -r0, lsl #2
     448:	000012f6 	strdeq	r1, [r0], -r6
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	000012fa 	strdeq	r1, [r0], -sl
				DEBUG_PRINT("\r\nDelete rec");/*
     450:	00560001 	subseq	r0, r6, r1
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	00000000 	andeq	r0, r0, r0
     458:	aa000000 	bge	460 <receiver+0x1e8>
     45c:	ae000011 	mcrge	0, 0, r0, cr0, cr1, {0}
     460:	01000011 	tsteq	r0, r1, lsl r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	11c45200 	bicne	r5, r4, r0, lsl #4
     468:	11d80000 	bicsne	r0, r8, r0
     46c:	00010000 	andeq	r0, r1, r0
     470:	00000052 	andeq	r0, r0, r2, asr r0
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	00000000 	andeq	r0, r0, r0
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	0011b200 	andseq	fp, r1, r0, lsl #4
     47c:	0011b800 	andseq	fp, r1, r0, lsl #16
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	53000100 	movwpl	r0, #256	; 0x100
	...
					if (delete_record(node_db, delete_record_message->record_index)){
     48c:	00001168 	andeq	r1, r0, r8, ror #2
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	00001172 	andeq	r1, r0, r2, ror r1
						status = (uint8_t) SUCCESS;
     494:	00530001 	subseq	r0, r3, r1
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	00000000 	andeq	r0, r0, r0
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     4a0:	6e000011 	mcrvs	0, 0, r0, cr0, cr1, {0}
     4a4:	01000011 	tsteq	r0, r1, lsl r0
     4a8:	00005300 	andeq	r5, r0, r0, lsl #6
     4ac:	00000000 	andeq	r0, r0, r0
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	11fe0000 	mvnsne	r0, r0
     4b4:	12080000 	andne	r0, r8, #0
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	00010000 	andeq	r0, r1, r0
     4bc:	00000053 	andeq	r0, r0, r3, asr r0
     4c0:	00000000 	andeq	r0, r0, r0
     4c4:	0011f000 	andseq	pc, r1, r0
     4c8:	00121a00 	andseq	r1, r2, r0, lsl #20
     4cc:	52000100 	andpl	r0, r0, #0, 2
	...
     4d8:	0000123e 	andeq	r1, r0, lr, lsr r2
     4dc:	00001248 	andeq	r1, r0, r8, asr #4
     4e0:	00530001 	subseq	r0, r3, r1
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	30000000 	andcc	r0, r0, r0
     4ec:	66000012 			; <UNDEFINED> instruction: 0x66000012
     4f0:	01000012 	tsteq	r0, r2, lsl r0
     4f4:	00005000 	andeq	r5, r0, r0
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	10d60000 	sbcsne	r0, r6, r0
     500:	10e00000 	rscne	r0, r0, r0
     504:	00010000 	andeq	r0, r1, r0
     508:	00000053 	andeq	r0, r0, r3, asr r0
     50c:	00000000 	andeq	r0, r0, r0
     510:	0010c800 	andseq	ip, r0, r0, lsl #16
     514:	0010f200 	andseq	pc, r0, r0, lsl #4
     518:	52000100 	andpl	r0, r0, #0, 2
	...
     524:	00001128 	andeq	r1, r0, r8, lsr #2
     528:	00001132 	andeq	r1, r0, r2, lsr r1
     52c:	00530001 	subseq	r0, r3, r1
     530:	00000000 	andeq	r0, r0, r0
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	1a000000 	bne	53c <receiver+0x2c4>
     538:	42000011 	andmi	r0, r0, #17
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	01000011 	tsteq	r0, r1, lsl r0
				DEBUG_PRINT("\r\nretrieve rec");
     540:	00005200 	andeq	r5, r0, r0, lsl #4
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00000000 	andeq	r0, r0, r0
     548:	0bfc0000 	bleq	fff00550 <_estack+0xdfefb550>
     54c:	0c000000 	stceq	0, cr0, [r0], {-0}
     550:	00010000 	andeq	r0, r1, r0
     554:	000c0050 	andeq	r0, ip, r0, asr r0
     558:	000c0300 	andeq	r0, ip, r0, lsl #6
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    return node->data_base.item_array[index];
     568:	00000f88 	andeq	r0, r0, r8, lsl #31
     56c:	00000f8a 	andeq	r0, r0, sl, lsl #31
     570:	00500001 	subseq	r0, r0, r1
     574:	00000000 	andeq	r0, r0, r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    return node->data_base.item_array[index];
     57c:	9e00000f 	cdpls	0, 0, cr0, cr0, cr15, {0}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	0100000f 	tsteq	r0, pc
     584:	0f9e5100 	svceq	0x009e5100
     588:	0fa20000 	svceq	0x00a20000
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	00010000 	andeq	r0, r1, r0
     590:	000fa855 	andeq	sl, pc, r5, asr r8	; <UNPREDICTABLE>
     594:	000fbe00 	andeq	fp, pc, r0, lsl #28
     598:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     59c:	00000fbe 			; <UNDEFINED> instruction: 0x00000fbe
     5a0:	00000fcc 	andeq	r0, r0, ip, asr #31
     5a4:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	fa00000f 	blx	5ec <receiver+0x374>
     5ac:	0100000f 	tsteq	r0, pc
				DEBUG_PRINT("\r\nResponse");
     5b0:	10005500 	andne	r5, r0, r0, lsl #10
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	10280000 	eorne	r0, r8, r0
     5b8:	00010000 	andeq	r0, r1, r0
     5bc:	00102855 	andseq	r2, r0, r5, asr r8
     5c0:	00103600 	andseq	r3, r0, r0, lsl #12
     5c4:	51000100 	mrspl	r0, (UNDEF: 16)
     5c8:	00001036 	andeq	r1, r0, r6, lsr r0
				if(!response_flag){
     5cc:	00001040 	andeq	r1, r0, r0, asr #32
					response_flag=1;
     5d0:	40550001 	subsmi	r0, r5, r1
					trigger(&response_flag);
     5d4:	4b000010 	blmi	61c <receiver+0x3a4>
				switch(response_message_5->status){
     5d8:	01000010 	tsteq	r0, r0, lsl r0
     5dc:	104b5100 	subne	r5, fp, r0, lsl #2
     5e0:	104e0000 	subne	r0, lr, r0
     5e4:	00010000 	andeq	r0, r1, r0
     5e8:	00104e55 	andseq	r4, r0, r5, asr lr
						if (response_checker[0] == response_message_5->request_number){
     5ec:	00105400 	andseq	r5, r0, r0, lsl #8
     5f0:	51000100 	mrspl	r0, (UNDEF: 16)
     5f4:	00001054 	andeq	r1, r0, r4, asr r0
							switch(response_checker[1]){
     5f8:	00001066 	andeq	r1, r0, r6, rrx
     5fc:	66550001 	ldrbvs	r0, [r5], -r1
     600:	78000010 	stmdavc	r0, {r4}
     604:	01000010 	tsteq	r0, r0, lsl r0
									proceed response_1_create;
     608:	10785100 	rsbsne	r5, r8, r0, lsl #2
						proceed response_2;
     60c:	10980000 	addsne	r0, r8, r0
									proceed response_1_delete;
     610:	00010000 	andeq	r0, r1, r0
									proceed response_1_retrieve;
     614:	00000055 	andeq	r0, r0, r5, asr r0
						proceed response_2;
     618:	00000000 	andeq	r0, r0, r0
						proceed response_3;
     61c:	000f8800 	andeq	r8, pc, r0, lsl #16
						proceed response_4;
     620:	000f9e00 	andeq	r9, pc, r0, lsl #28
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	52000100 	andpl	r0, r0, #0, 2
     628:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
				break;
     62c:	00000fa4 	andeq	r0, r0, r4, lsr #31
}
     630:	a8560001 	ldmdage	r6, {r0}^
     634:	b800000f 	stmdalt	r0, {r0, r1, r2, r3}
     638:	0100000f 	tsteq	r0, pc
     63c:	0fbe5600 	svceq	0x00be5600
     640:	0fcc0000 	svceq	0x00cc0000
     644:	00010000 	andeq	r0, r1, r0
fsm root {
     648:	000fcc52 	andeq	ip, pc, r2, asr ip	; <UNPREDICTABLE>
     64c:	000ffc00 	andeq	pc, pc, r0, lsl #24
     650:	56000100 	strpl	r0, [r0], -r0, lsl #2
     654:	00001000 	andeq	r1, r0, r0
     658:	00001028 	andeq	r1, r0, r8, lsr #32
     65c:	28560001 	ldmdacs	r6, {r0}^
     660:	36000010 			; <UNDEFINED> instruction: 0x36000010
     664:	01000010 	tsteq	r0, r0, lsl r0
     668:	10365200 	eorsne	r5, r6, r0, lsl #4
     66c:	10400000 	subne	r0, r0, r0
     670:	00010000 	andeq	r0, r1, r0
     674:	00104056 	andseq	r4, r0, r6, asr r0
     678:	00104b00 	andseq	r4, r0, r0, lsl #22
     67c:	52000100 	andpl	r0, r0, #0, 2
     680:	0000104e 	andeq	r1, r0, lr, asr #32
     684:	00001059 	andeq	r1, r0, r9, asr r0
     688:	59520001 	ldmdbpl	r2, {r0}^
     68c:	66000010 			; <UNDEFINED> instruction: 0x66000010
     690:	01000010 	tsteq	r0, r0, lsl r0
     694:	10665400 	rsbne	r5, r6, r0, lsl #8
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	10980000 	addsne	r0, r8, r0
     69c:	00010000 	andeq	r0, r1, r0
     6a0:	00000052 	andeq	r0, r0, r2, asr r0
		init_node(node_db);
     6a4:	00000000 	andeq	r0, r0, r0
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	000efc00 	andeq	pc, lr, r0, lsl #24
     6ac:	000f0a00 	andeq	r0, pc, r0, lsl #20
		tcv_plug (0, &plug_null);
     6b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		sfd = tcv_open (WNONE, 0, 0);
     6bc:	00000efc 	strdeq	r0, [r0], -ip
     6c0:	00000f0b 	andeq	r0, r0, fp, lsl #30
     6c4:	00510001 	subseq	r0, r1, r1
     6c8:	00000000 	andeq	r0, r0, r0
			diag("Cannot open tcv interface");
     6cc:	ac000000 	stcge	0, cr0, [r0], {-0}
     6d0:	c300000e 	movwgt	r0, #14
			halt();
     6d4:	0100000e 	tsteq	r0, lr
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	0ee65000 	cdpeq	0, 14, cr5, cr6, cr0, {0}
     6dc:	0efc0000 	cdpeq	0, 15, cr0, cr12, cr0, {0}
		runfsm receiver(node_db);
     6e0:	00010000 	andeq	r0, r1, r0
     6e4:	00000050 	andeq	r0, r0, r0, asr r0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	00000000 	andeq	r0, r0, r0
     6ec:	000da200 	andeq	sl, sp, r0, lsl #4
     6f0:	000db200 	andeq	fp, sp, r0, lsl #4
     6f4:	52000100 	andpl	r0, r0, #0, 2
     6f8:	00000db2 			; <UNDEFINED> instruction: 0x00000db2
     6fc:	00000dba 			; <UNDEFINED> instruction: 0x00000dba
		ser_inf(get_choice, "%c", &CHOICE);
     700:	040c0005 	streq	r0, [ip], #-5
     704:	54400920 	strbpl	r0, [r0], #-2336	; 0xfffff6e0
     708:	5800000e 	stmdapl	r0, {r1, r2, r3}
		switch(CHOICE) {
     70c:	0500000e 	streq	r0, [r0, #-14]
     710:	20040c00 	andcs	r0, r4, r0, lsl #24
     714:	0e584009 	cdpeq	0, 5, cr4, cr8, cr9, {0}
     718:	0e5a0000 	cdpeq	0, 5, cr0, cr10, cr0, {0}
     71c:	00010000 	andeq	r0, r1, r0
     720:	000e5a52 	andeq	r5, lr, r2, asr sl
     724:	000e5c00 	andeq	r5, lr, r0, lsl #24
     728:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     72c:	40092004 	andmi	r2, r9, r4
	...
     738:	00000dbc 			; <UNDEFINED> instruction: 0x00000dbc
				proceed menu;
     73c:	00000dc6 	andeq	r0, r0, r6, asr #27
     740:	ca520001 	bgt	148074c <__ccfg+0x14607a4>
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	d400000d 	strle	r0, [r0], #-13
     748:	0100000d 	tsteq	r0, sp
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	0dd85200 	lfmeq	f5, 2, [r8]
     750:	0de20000 	stcleq	0, cr0, [r2]
     754:	00010000 	andeq	r0, r1, r0
		DEBUG_PRINT("setting node group ID");
     758:	000de652 	andeq	lr, sp, r2, asr r6
     75c:	000df200 	andeq	pc, sp, r0, lsl #4
    node->gid = gid; 
     760:	52000100 	andpl	r0, r0, #0, 2
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     764:	00000e7e 	andeq	r0, r0, lr, ror lr
    node->gid = gid; 
     768:	00000e82 	andeq	r0, r0, r2, lsl #29
		proceed menu;
     76c:	00520001 	subseq	r0, r2, r1
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     770:	00000000 	andeq	r0, r0, r0
     774:	42000000 	andmi	r0, r0, #0
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	5400000d 	strpl	r0, [r0], #-13
     77c:	0100000d 	tsteq	r0, sp
     780:	00005400 	andeq	r5, r0, r0, lsl #8
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     784:	00000000 	andeq	r0, r0, r0
     788:	0cdc0000 	ldcleq	0, cr0, [ip], {0}
		if((node_db->id < 1) || (node_db->id > 25)){
     78c:	0ce40000 	stcleq	0, cr0, [r4]
     790:	00010000 	andeq	r0, r1, r0
     794:	00000050 	andeq	r0, r0, r0, asr r0
			strncpy(reason, "Out of Range", 50);
     798:	00000000 	andeq	r0, r0, r0
     79c:	000cdc00 	andeq	sp, ip, r0, lsl #24
			proceed invalid_node_id;
     7a0:	000ce200 	andeq	lr, ip, r0, lsl #4
     7a4:	51000100 	mrspl	r0, (UNDEF: 16)
				strncpy(reason, "ID is already in use", 50);
     7a8:	00000ce2 	andeq	r0, r0, r2, ror #25
		for(int i = 0; i < node_db->index; i++){
     7ac:	00000ce7 	andeq	r0, r0, r7, ror #25
     7b0:	00520001 	subseq	r0, r2, r1
	...
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7c0:	01000000 	mrseq	r0, (UNDEF: 0)
     7c4:	00005000 	andeq	r5, r0, r0
	...
		if (!clear_node_neighbour_array(node_db)){
     7d4:	00010000 	andeq	r0, r1, r0
     7d8:	00000051 	andeq	r0, r0, r1, asr r0
			strncpy(reason, "Error Clearing Node Array", 50);
     7dc:	00000000 	andeq	r0, r0, r0
     7e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		request_packet->gid = node_db->gid;
     7f4:	00520001 	subseq	r0, r2, r1
     7f8:	00000000 	andeq	r0, r0, r0
		request_packet->tpe = DISCOVERY_REQUEST;
     7fc:	01000000 	mrseq	r0, (UNDEF: 0)
		request_packet->request_number = generate_request_num();
     800:	00005400 	andeq	r5, r0, r0, lsl #8
     804:	00000000 	andeq	r0, r0, r0
		call sender(request_packet, wait_discovery);
     808:	0c9c0000 	ldceq	0, cr0, [ip], {0}
     80c:	0ca70000 	stceq	0, cr0, [r7]
		request_packet->receiver_id=0;
     810:	00010000 	andeq	r0, r1, r0
		call sender(request_packet, wait_discovery);
     814:	000ca750 	andeq	sl, ip, r0, asr r7
     818:	000cd000 	andeq	sp, ip, r0
     81c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				proceed clear_neighbour_array;
     828:	00000c60 	andeq	r0, r0, r0, ror #24
				proceed create_proto_start;
     82c:	00000c78 	andeq	r0, r0, r8, ror ip
				proceed start_delete_proto;
     830:	78500001 	ldmdavc	r0, {r0}^
				proceed start_retrieve_proto;
     834:	9000000c 	andls	r0, r0, ip
				proceed display_db;
     838:	0100000c 	tsteq	r0, ip
				proceed del_local;
     83c:	00005400 	andeq	r5, r0, r0, lsl #8
			if(node_db->id == node_db->nnodes[i]){
     840:	00000000 	andeq	r0, r0, r0
     844:	0c340000 	ldceq	0, cr0, [r4], #-0
     848:	0c3a0000 	ldceq	0, cr0, [sl], #-0
				strncpy(reason, "ID is already in use", 50);
     84c:	00010000 	andeq	r0, r1, r0
     850:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if (discovery_wait_flag == 0){
     860:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			delay(3000, find_proto_start);
     86c:	00001d18 	andeq	r1, r0, r8, lsl sp
     870:	00001d36 	andeq	r1, r0, r6, lsr sp
		if (discovery_wait_flag == 1){
     874:	70910002 	addsvc	r0, r1, r2
			discovery_wait_flag=0;
     878:	00001d36 	andeq	r1, r0, r6, lsr sp
     87c:	00001d5e 	andeq	r1, r0, lr, asr sp
			delay(3000, display_neighbour_nodes);
     880:	62540001 	subsvs	r0, r4, #1
     884:	6a00001d 	bvs	900 <root+0x2b8>
     888:	0100001d 	tsteq	r0, sp, lsl r0
     88c:	1d785400 	cfldrdne	mvd5, [r8, #-0]
     890:	1dc20000 	stclne	0, cr0, [r2]
     894:	00010000 	andeq	r0, r1, r0
     898:	001dc656 	andseq	ip, sp, r6, asr r6
     89c:	001e3e00 	andseq	r3, lr, r0, lsl #28
     8a0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     8ac:	00001d82 	andeq	r1, r0, r2, lsl #27
     8b0:	00001dc0 	andeq	r1, r0, r0, asr #27
     8b4:	c6510001 	ldrbgt	r0, [r1], -r1
     8b8:	d800001d 	stmdale	r0, {r0, r2, r3, r4}
     8bc:	0100001d 	tsteq	r0, sp, lsl r0
     8c0:	1de45100 	stfnee	f5, [r4]
     8c4:	1dee0000 	stclne	0, cr0, [lr]
     8c8:	00010000 	andeq	r0, r1, r0
		if(node_db->index == 0){
     8cc:	001e0051 	andseq	r0, lr, r1, asr r0
     8d0:	001e0400 	andseq	r0, lr, r0, lsl #8
     8d4:	51000100 	mrspl	r0, (UNDEF: 16)
			proceed menu;
     8d8:	00001e24 	andeq	r1, r0, r4, lsr #28
fsm root {
     8dc:	00001e28 	andeq	r1, r0, r8, lsr #28
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e0:	00510001 	subseq	r0, r1, r1
		for (int i=0; i<node_db->index; i++) {
     8e4:	00000000 	andeq	r0, r0, r0
     8e8:	82000000 	andhi	r0, r0, #0
     8ec:	c000001d 	andgt	r0, r0, sp, lsl r0
		proceed menu;
     8f0:	0100001d 	tsteq	r0, sp, lsl r0
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     8f4:	1dc65500 	cfstr64ne	mvdx5, [r6]
     8f8:	1dee0000 	stclne	0, cr0, [lr]
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     8fc:	00010000 	andeq	r0, r1, r0
     900:	001e0055 	andseq	r0, lr, r5, asr r0
     904:	001e0400 	andseq	r0, lr, r0, lsl #8
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     908:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     90c:	00001e24 	andeq	r1, r0, r4, lsr #28
			strncpy(reason, "Error: improper ID", 50);
     910:	00001e3e 	andeq	r1, r0, lr, lsr lr
     914:	00550001 	subseq	r0, r5, r1
     918:	00000000 	andeq	r0, r0, r0
			proceed error;
     91c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     920:	0000001d 	andeq	r0, r0, sp, lsl r0
     924:	0100001e 	tsteq	r0, lr, lsl r0
		ser_in(get_record_to_create, user_provided_record, 20);
     928:	1e045500 	cfsh32ne	mvfx5, mvfx4, #0
     92c:	1e1e0000 	cdpne	0, 1, cr0, cr14, cr0, {0}
     930:	00010000 	andeq	r0, r1, r0
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     934:	001e2255 	andseq	r2, lr, r5, asr r2
		create_message->gid = node_db->gid;
     938:	001e2400 	andseq	r2, lr, r0, lsl #8
     93c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		create_message->request_number = generate_request_num();
     948:	00001da8 	andeq	r1, r0, r8, lsr #27
		create_message->sender_id = node_db->id;
     94c:	00001dc0 	andeq	r1, r0, r0, asr #27
     950:	00540001 	subseq	r0, r4, r1
     954:	00000000 	andeq	r0, r0, r0
		strncpy(create_message->record, user_provided_record, 20);
     958:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
		create_message->receiver_id = user_provided_receiver_id;
     95c:	0000001d 	andeq	r0, r0, sp, lsl r0
		strncpy(create_message->record, user_provided_record, 20);
     960:	0100001e 	tsteq	r0, lr, lsl r0
		response_checker[0] = create_message->request_number;
     964:	1e045400 	cfcpysne	mvf5, mvf4
		call sender(create_message, wait);
     968:	1e180000 	cdpne	0, 1, cr0, cr8, cr0, {0}
		response_checker[1] = create_message->tpe;
     96c:	00010000 	andeq	r0, r1, r0
     970:	001e1854 	andseq	r1, lr, r4, asr r8
		call sender(create_message, wait);
     974:	001e2400 	andseq	r2, lr, r0, lsl #8
     978:	53000100 	movwpl	r0, #256	; 0x100
	...
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     984:	00001e30 	andeq	r1, r0, r0, lsr lr
     988:	00001e3e 	andeq	r1, r0, lr, lsr lr
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     98c:	00510001 	subseq	r0, r1, r1
     990:	00000000 	andeq	r0, r0, r0
     994:	fc000000 	stc2	0, cr0, [r0], {-0}
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     998:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
     99c:	01000018 	tsteq	r0, r8, lsl r0
			strncpy(reason, "Error: improper node ID", 50);
     9a0:	00005000 	andeq	r5, r0, r0
	...
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9b0:	00010000 	andeq	r0, r1, r0
     9b4:	00000050 	andeq	r0, r0, r0, asr r0
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9b8:	00000000 	andeq	r0, r0, r0
     9bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			strncpy(reason, "Error: invalid index", 50);
     9d0:	00510001 	subseq	r0, r1, r1
			proceed error;
     9d4:	00000000 	andeq	r0, r0, r0
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9d8:	01000000 	mrseq	r0, (UNDEF: 0)
     9dc:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		delete_record->request_number = generate_request_num();
     9ec:	00010000 	andeq	r0, r1, r0
     9f0:	00000052 	andeq	r0, r0, r2, asr r0
		call sender(delete_record, wait);
     9f4:	00000000 	andeq	r0, r0, r0
		delete_record->sender_id = node_db->id;
     9f8:	52000100 	andpl	r0, r0, #0, 2
	...
		call sender(delete_record, wait);
     a0c:	00530001 	subseq	r0, r3, r1
     a10:	00000000 	andeq	r0, r0, r0
     a14:	01000000 	mrseq	r0, (UNDEF: 0)
     a18:	00005300 	andeq	r5, r0, r0, lsl #6
     a1c:	00000000 	andeq	r0, r0, r0
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a20:	00010000 	andeq	r0, r1, r0
     a24:	00000053 	andeq	r0, r0, r3, asr r0
	...
		if (get_id < 1 || get_id > 25){
     a34:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			strncpy(reason, "Error: improper node ID", 50);
     a40:	00001d00 	andeq	r1, r0, r0, lsl #26
     a44:	00001d08 	andeq	r1, r0, r8, lsl #26
			proceed error;
     a48:	00500001 	subseq	r0, r0, r1
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	24000000 	strcs	r0, [r0], #-0
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a54:	2a00001c 	bcs	acc <root+0x484>
     a58:	0100001c 	tsteq	r0, ip, lsl r0
     a5c:	00005000 	andeq	r5, r0, r0
		if (beg_for_index < 0 || beg_for_index > 40){
     a60:	00000000 	andeq	r0, r0, r0
     a64:	1c3a0000 	ldcne	0, cr0, [sl], #-0
			strncpy(reason, "Error: invalid index", 50);
     a68:	1c660000 	stclne	0, cr0, [r6], #-0
     a6c:	00010000 	andeq	r0, r1, r0
			proceed error;
     a70:	001c6654 	andseq	r6, ip, r4, asr r6
     a74:	001c6c00 	andseq	r6, ip, r0, lsl #24
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     a78:	52000100 	andpl	r0, r0, #0, 2
     a7c:	00001c6c 	andeq	r1, r0, ip, ror #24
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a80:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
     a84:	b4540001 	ldrblt	r0, [r4], #-1
     a88:	cc00001c 	stcgt	0, cr0, [r0], {28}
		retrieve_record->gid = node_db->gid;
     a8c:	0100001c 	tsteq	r0, ip, lsl r0
		retrieve_record->tpe = RETRIEVE_RECORD;
     a90:	00005000 	andeq	r5, r0, r0
		retrieve_record->request_number = generate_request_num();
     a94:	00000000 	andeq	r0, r0, r0
     a98:	1c660000 	stclne	0, cr0, [r6], #-0
		retrieve_record->receiver_id = get_id;
     a9c:	1c6a0000 	stclne	0, cr0, [sl], #-0
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aa0:	00010000 	andeq	r0, r1, r0
		retrieve_record->record_index = beg_for_index;
     aa4:	001c6a54 	andseq	r6, ip, r4, asr sl
     aa8:	001c6c00 	andseq	r6, ip, r0, lsl #24
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aac:	53000100 	movwpl	r0, #256	; 0x100
		response_checker[0] = retrieve_record->request_number;
     ab0:	00001c82 	andeq	r1, r0, r2, lsl #25
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     ab4:	00001c8b 	andeq	r1, r0, fp, lsl #25
		response_checker[1] = retrieve_record->tpe;
     ab8:	00500001 	subseq	r0, r0, r1
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     abc:	00000000 	andeq	r0, r0, r0
     ac0:	74000000 	strvc	r0, [r0], #-0
		call sender(retrieve_record, wait);
     ac4:	8400001c 	strhi	r0, [r0], #-28	; 0xffffffe4
     ac8:	0100001c 	tsteq	r0, ip, lsl r0
     acc:	00005300 	andeq	r5, r0, r0, lsl #6
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	1c3a0000 	ldcne	0, cr0, [sl], #-0
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad8:	1c580000 	mrane	r0, r8, acc0
     adc:	00010000 	andeq	r0, r1, r0
		if(node_db->data_base.item_count != 0){
     ae0:	001c5e50 	andseq	r5, ip, r0, asr lr
     ae4:	001c7e00 	andseq	r7, ip, r0, lsl #28
     ae8:	50000100 	andpl	r0, r0, r0, lsl #2
		ser_out(loop_through_data, "\r\n");
     aec:	00001c7e 	andeq	r1, r0, lr, ror ip
     af0:	00001c88 	andeq	r1, r0, r8, lsl #25
		proceed menu;
     af4:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
		proceed menu;
     b00:	0000177c 	andeq	r1, r0, ip, ror r7
     b04:	000017aa 	andeq	r1, r0, sl, lsr #15
		delay(3000, timeout);
     b08:	b8500001 	ldmdalt	r0, {r0}^
     b0c:	fc000017 	stc2	0, cr0, [r0], {23}
		when(&response_flag, menu);
     b10:	01000017 	tsteq	r0, r7, lsl r0
     b14:	00005000 	andeq	r5, r0, r0
		release;
     b18:	00000000 	andeq	r0, r0, r0
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b1c:	17840000 	strne	r0, [r4, r0]
     b20:	17900000 	ldrne	r0, [r0, r0]
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b24:	00010000 	andeq	r0, r1, r0
     b28:	00179053 	andseq	r9, r7, r3, asr r0
     b2c:	00179200 	andseq	r9, r7, r0, lsl #4
     b30:	70000200 	andvc	r0, r0, r0, lsl #4
		for (int i=0; i<node_db->index; i++) {
     b34:	00179600 	andseq	r9, r7, r0, lsl #12
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b38:	0017ee00 	andseq	lr, r7, r0, lsl #28
     b3c:	53000100 	movwpl	r0, #256	; 0x100
     b40:	000017ee 	andeq	r1, r0, lr, ror #15
     b44:	000017f2 	strdeq	r1, [r0], -r2
     b48:	00730002 	rsbseq	r0, r3, r2
     b4c:	000017f2 	strdeq	r1, [r0], -r2
     b50:	000017fc 	strdeq	r1, [r0], -ip
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b54:	00530001 	subseq	r0, r3, r1
     b58:	00000000 	andeq	r0, r0, r0
     b5c:	84000000 	strhi	r0, [r0], #-0
     b60:	86000017 			; <UNDEFINED> instruction: 0x86000017
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b64:	01000017 	tsteq	r0, r7, lsl r0
     b68:	17965200 	ldrne	r5, [r6, r0, lsl #4]
		ser_out(timeout, "\r\nFailed to reach the destination");
     b6c:	17d60000 	ldrbne	r0, [r6, r0]
     b70:	00010000 	andeq	r0, r1, r0
		proceed menu;
     b74:	0017ee52 	andseq	lr, r7, r2, asr lr
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b78:	0017f200 	andseq	pc, r7, r0, lsl #4
     b7c:	53000100 	movwpl	r0, #256	; 0x100
     b80:	000017f2 	strdeq	r1, [r0], -r2
		proceed menu;
     b84:	000017fc 	strdeq	r1, [r0], -ip
}
     b88:	00520001 	subseq	r0, r2, r1
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	4c000000 	stcmi	0, cr0, [r0], {-0}
     b94:	5400001b 	strpl	r0, [r0], #-27	; 0xffffffe5
     b98:	0100001b 	tsteq	r0, fp, lsl r0
     b9c:	1b585100 	blne	1614fa4 <__ccfg+0x15f4ffc>
     ba0:	1b5a0000 	blne	1680ba8 <__ccfg+0x1660c00>
     ba4:	00010000 	andeq	r0, r1, r0
     ba8:	00000051 	andeq	r0, r0, r1, asr r0
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	001aa000 	andseq	sl, sl, r0
     bb4:	001abc00 	andseq	fp, sl, r0, lsl #24
     bb8:	50000100 	andpl	r0, r0, r0, lsl #2
     bbc:	00001ac2 	andeq	r1, r0, r2, asr #21
     bc0:	00001ace 	andeq	r1, r0, lr, asr #21
     bc4:	00500001 	subseq	r0, r0, r1
     bc8:	00000000 	andeq	r0, r0, r0
     bcc:	a0000000 	andge	r0, r0, r0
     bd0:	be00001a 	mcrlt	0, 0, r0, cr0, cr10, {0}
     bd4:	0100001a 	tsteq	r0, sl, lsl r0
     bd8:	1ac25100 	bne	ff094fe0 <_estack+0xdf08ffe0>
     bdc:	1acc0000 	bne	ff300be4 <_estack+0xdf2fbbe4>
     be0:	00010000 	andeq	r0, r1, r0
     be4:	00000051 	andeq	r0, r0, r1, asr r0
     be8:	00000000 	andeq	r0, r0, r0
     bec:	001aa000 	andseq	sl, sl, r0
     bf0:	001ac100 	andseq	ip, sl, r0, lsl #2
     bf4:	52000100 	andpl	r0, r0, #0, 2
     bf8:	00001ac2 	andeq	r1, r0, r2, asr #21
static void devinit_uart (int devnum) {
     bfc:	00001aca 	andeq	r1, r0, sl, asr #21
	adddevfunc (ioreq_uart_a, devnum);
     c00:	00520001 	subseq	r0, r2, r1
     c04:	00000000 	andeq	r0, r0, r0
void udelay (volatile word n) {
     c08:	a0000000 	andge	r0, r0, r0
     c0c:	b800001a 	stmdalt	r0, {r1, r3, r4}
	while (n) {
     c10:	0100001a 	tsteq	r0, sl, lsl r0
     c14:	1ab85300 	bne	fee1581c <_estack+0xdee1081c>
}
     c18:	1b3c0000 	blne	f00c20 <__ccfg+0xee0c78>
	while (n--);
     c1c:	00010000 	andeq	r0, r1, r0
     c20:	00000055 	andeq	r0, r0, r5, asr r0
     c24:	00000000 	andeq	r0, r0, r0
		n--;
     c28:	001aa000 	andseq	sl, sl, r0
     c2c:	001b2000 	andseq	r2, fp, r0
     c30:	91000200 	mrsls	r0, R8_usr
void mdelay (volatile word n) {
     c34:	001b2000 	andseq	r2, fp, r0
     c38:	001b3c00 	andseq	r3, fp, r0, lsl #24
	while (n) {
     c3c:	91000200 	mrsls	r0, R8_usr
	...
		udelay (999);
     c48:	001ad000 	andseq	sp, sl, r0
     c4c:	001ae600 	andseq	lr, sl, r0, lsl #12
		n--;
     c50:	50000100 	andpl	r0, r0, r0, lsl #2
     c54:	00001aee 	andeq	r1, r0, lr, ror #21
     c58:	00001b00 	andeq	r1, r0, r0, lsl #22
     c5c:	10500001 	subsne	r0, r0, r1
void __pi_ondomain (lword d) {
     c60:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
     c64:	0100001b 	tsteq	r0, fp, lsl r0
		if (__pi_systat.effpdm > 1)
     c68:	1b205000 	blne	814c70 <__ccfg+0x7f4cc8>
     c6c:	1b280000 	blne	a00c74 <__ccfg+0x9e0ccc>
			__pi_systat.effpdm = 1;
     c70:	00010000 	andeq	r0, r1, r0
	PRCMPowerDomainOn (d);
     c74:	00000050 	andeq	r0, r0, r0, asr r0
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	001a7c00 	andseq	r7, sl, r0, lsl #24
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c80:	001a8200 	andseq	r8, sl, r0, lsl #4
     c84:	50000100 	andpl	r0, r0, r0, lsl #2
     c88:	00001a88 	andeq	r1, r0, r8, lsl #21
	__pi_systat.ondmns |= d;
     c8c:	00001a90 	muleq	r0, r0, sl
     c90:	94500001 	ldrbls	r0, [r0], #-1
}
     c94:	a000001a 	andge	r0, r0, sl, lsl r0
     c98:	0100001a 	tsteq	r0, sl, lsl r0
void __pi_offdomain (lword d) {
     c9c:	00005000 	andeq	r5, r0, r0
     ca0:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOff (d);
     ca4:	1a7c0000 	bne	1f00cac <__ccfg+0x1ee0d04>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ca8:	1a840000 	bne	fe100cb0 <_estack+0xde0fbcb0>
     cac:	00010000 	andeq	r0, r1, r0
     cb0:	001a8851 	andseq	r8, sl, r1, asr r8
	if (d & PRCM_DOMAIN_RFCORE) {
     cb4:	001a9200 	andseq	r9, sl, r0, lsl #4
     cb8:	51000100 	mrspl	r0, (UNDEF: 16)
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cbc:	00001a94 	muleq	r0, r4, sl
     cc0:	00001aa0 	andeq	r1, r0, r0, lsr #21
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cc4:	00510001 	subseq	r0, r1, r1
     cc8:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns &= ~d;
     ccc:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     cd0:	7600001a 			; <UNDEFINED> instruction: 0x7600001a
}
     cd4:	0100001a 	tsteq	r0, sl, lsl r0
     cd8:	1a7a5000 	bne	1e94ce0 <__ccfg+0x1e74d38>
void __pi_syserror (word ec, const char *m) {
     cdc:	1a7c0000 	bne	1f00ce4 <__ccfg+0x1ee0d3c>
	diag ("SYSERR: %x, %s", ec, m);
     ce0:	00010000 	andeq	r0, r1, r0
     ce4:	00000050 	andeq	r0, r0, r0, asr r0
  __ASM volatile ("cpsid i" : : : "memory");
     ce8:	00000000 	andeq	r0, r0, r0
     cec:	001a6e00 	andseq	r6, sl, r0, lsl #28
     cf0:	001a7000 	andseq	r7, sl, r0
     cf4:	52000100 	andpl	r0, r0, #0, 2
	...
		all_leds_blink;
     d00:	00001a5a 	andeq	r1, r0, sl, asr sl
     d04:	00001a5c 	andeq	r1, r0, ip, asr sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d08:	00500001 	subseq	r0, r0, r1
     d0c:	00000000 	andeq	r0, r0, r0
     d10:	5a000000 	bpl	d18 <__pi_syserror+0x3c>
     d14:	6400001a 	strvs	r0, [r0], #-26	; 0xffffffe6
     d18:	0100001a 	tsteq	r0, sl, lsl r0
     d1c:	1a685100 	bne	1a15124 <__ccfg+0x19f517c>
	while (1) {
     d20:	1a6e0000 	bne	1b80d28 <__ccfg+0x1b60d80>
     d24:	00010000 	andeq	r0, r1, r0
     d28:	00000051 	andeq	r0, r0, r1, asr r0
     d2c:	00000000 	andeq	r0, r0, r0
void tci_run_delay_timer () {
     d30:	001a5a00 	andseq	r5, sl, r0, lsl #20
	setdel = __pi_mintk - __pi_old;
     d34:	001a5e00 	andseq	r5, sl, r0, lsl #28
     d38:	52000100 	andpl	r0, r0, #0, 2
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d4c:	00500001 	subseq	r0, r0, r1
	...
}
     d5c:	01000000 	mrseq	r0, (UNDEF: 0)
     d60:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	cli_aux;
     d70:	00010000 	andeq	r0, r1, r0
     d74:	00000050 	andeq	r0, r0, r0, asr r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d78:	00000000 	andeq	r0, r0, r0
     d7c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     d90:	00510001 	subseq	r0, r1, r1
     d94:	00000000 	andeq	r0, r0, r0
void AONRTCIntHandler () {
     d98:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d9c:	5400001a 	strpl	r0, [r0], #-26	; 0xffffffe6
     da0:	0100001a 	tsteq	r0, sl, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     da4:	1a585000 	bne	1614dac <__ccfg+0x15f4e04>
		if (__pi_utims [0] == 0)
     da8:	1a5a0000 	bne	1680db0 <__ccfg+0x1660e08>
     dac:	00010000 	andeq	r0, r1, r0
		if (*(__pi_utims [0])) {
     db0:	00000050 	andeq	r0, r0, r0, asr r0
     db4:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [0]))--;
     db8:	001a3e00 	andseq	r3, sl, r0, lsl #28
		if (__pi_utims [1] == 0)
     dbc:	001a4000 	andseq	r4, sl, r0
		if (*(__pi_utims [1])) {
     dc0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (__pi_utims [2] == 0)
     dcc:	00001a3e 	andeq	r1, r0, lr, lsr sl
		if (*(__pi_utims [2])) {
     dd0:	00001a42 	andeq	r1, r0, r2, asr #20
			(*(__pi_utims [2]))--;
     dd4:	00520001 	subseq	r0, r2, r1
		if (__pi_utims [3] != 0) {
     dd8:	00000000 	andeq	r0, r0, r0
			if (*(__pi_utims [3])) {
     ddc:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
				aux_timer_inactive = 0;
     de0:	3000001a 	andcc	r0, r0, sl, lsl r0
				(*(__pi_utims [3]))--;
     de4:	0100001a 	tsteq	r0, sl, lsl r0
	if (__pi_systat.ledsts) {
     de8:	00005000 	andeq	r5, r0, r0
     dec:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.ledblc++ == 0) {
     df0:	1a2e0000 	bne	b80df8 <__ccfg+0xb60e50>
     df4:	1a300000 	bne	c00dfc <__ccfg+0xbe0e54>
			if (__pi_systat.ledblk) {
     df8:	00010000 	andeq	r0, r1, r0
     dfc:	001a3451 	andseq	r3, sl, r1, asr r4
     e00:	001a3e00 	andseq	r3, sl, r0, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e04:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     e10:	00001a20 	andeq	r1, r0, r0, lsr #20
     e14:	00001a24 	andeq	r1, r0, r4, lsr #20
				if (__pi_systat.ledsts & 0x4)
     e18:	24500001 	ldrbcs	r0, [r0], #-1
				__pi_systat.ledblk = 0;
     e1c:	2e00001a 	mcrcs	0, 0, r0, cr0, cr10, {0}
     e20:	0100001a 	tsteq	r0, sl, lsl r0
			if (__pi_systat.fstblk)
     e24:	00005300 	andeq	r5, r0, r0, lsl #6
     e28:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblc = 200;
     e2c:	1a240000 	bne	900e34 <__ccfg+0x8e0e8c>
	if (events & AON_RTC_EVFLAGS_CH0) {
     e30:	1a2e0000 	bne	b80e38 <__ccfg+0xb60e90>
		cli_tim;
     e34:	00010000 	andeq	r0, r1, r0
		__pi_new += setdel;
     e38:	00000050 	andeq	r0, r0, r0, asr r0
	...
     e48:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		aux_timer_inactive = 1;
     e54:	00510001 	subseq	r0, r1, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e64:	01000000 	mrseq	r0, (UNDEF: 0)
				if (__pi_systat.ledsts & 0x2)
     e68:	00005200 	andeq	r5, r0, r0, lsl #4
     e6c:	00000000 	andeq	r0, r0, r0
     e70:	00010000 	andeq	r0, r1, r0
				if (__pi_systat.ledsts & 0x8)
     e74:	00000052 	andeq	r0, r0, r2, asr r0
	...
			cli_aux;
     e84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     e90:	000019fc 	strdeq	r1, [r0], -ip
     e94:	00001a04 	andeq	r1, r0, r4, lsl #20
     e98:	06500001 	ldrbeq	r0, [r0], -r1
     e9c:	0a00001a 	beq	f0c <__pi_uart_setrate+0x10>
     ea0:	0100001a 	tsteq	r0, sl, lsl r0
     ea4:	1a0a5000 	bne	294eac <__ccfg+0x274f04>
     ea8:	1a200000 	bne	800eb0 <__ccfg+0x7e0f08>
word tci_update_delay_ticks (Boolean force) {
     eac:	00010000 	andeq	r0, r1, r0
	cli_tim;
     eb0:	00000053 	andeq	r0, r0, r3, asr r0
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ec0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ecc:	00500001 	subseq	r0, r0, r1
	...
     edc:	01000000 	mrseq	r0, (UNDEF: 0)
     ee0:	00005000 	andeq	r5, r0, r0
}
     ee4:	00000000 	andeq	r0, r0, r0
		sti_tim;
     ee8:	00010000 	andeq	r0, r1, r0
		return YES;
     eec:	00000050 	andeq	r0, r0, r0, asr r0
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     efc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	UARTDisable (UART0_BASE);
     f08:	00570001 	subseq	r0, r7, r1
	...
	UARTConfigSetExpClk (UART0_BASE,
     f18:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f2c:	00010000 	andeq	r0, r1, r0
     f30:	00000050 	andeq	r0, r0, r0, asr r0
	urates [0] = rate;
     f34:	00000000 	andeq	r0, r0, r0
}
     f38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f44:	00580001 	subseq	r0, r8, r1
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f50:	00005000 	andeq	r5, r0, r0
	...
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f60:	00010000 	andeq	r0, r1, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f64:	00000054 	andeq	r0, r0, r4, asr r0
     f68:	00000000 	andeq	r0, r0, r0
	__pi_uart_setrate (urates [0], __pi_uart);
     f6c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     f80:	00580001 	subseq	r0, r8, r1
     f84:	00000000 	andeq	r0, r0, r0
	switch (operation) {
     f88:	01000000 	mrseq	r0, (UNDEF: 0)
static int ioreq_uart_a (int operation, char *buf, int len) {
     f8c:	00005800 	andeq	r5, r0, r0, lsl #16
     f90:	00000000 	andeq	r0, r0, r0
     f94:	1bd40000 	blne	ff500f9c <_estack+0xdf4fbf9c>
     f98:	1bdc0000 	blne	ff700fa0 <_estack+0xdf6fbfa0>
     f9c:	00010000 	andeq	r0, r1, r0
				*buf++ = uart_a_read;
     fa0:	001bdc50 	andseq	sp, fp, r0, asr ip
     fa4:	001be600 	andseq	lr, fp, r0, lsl #12
			while (len && uart_a_char_available) {
     fa8:	50000100 	andpl	r0, r0, r0, lsl #2
     fac:	00001bec 	andeq	r1, r0, ip, ror #23
     fb0:	00001bf8 	strdeq	r1, [r0], -r8
			if (len != operation) {
     fb4:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
}
     fb8:	1600001c 			; <UNDEFINED> instruction: 0x1600001c
     fbc:	0100001c 	tsteq	r0, ip, lsl r0
			uart_a_disable_int;
     fc0:	00005000 	andeq	r5, r0, r0
			if (uart_a_char_available) {
     fc4:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     fc8:	1be20000 	blne	ff880fd0 <_estack+0xdf87bfd0>
			uart_a_disable_int;
     fcc:	1c140000 	ldcne	0, cr0, [r4], {-0}
     fd0:	00010000 	andeq	r0, r1, r0
			if (uart_a_char_available) {
     fd4:	001c1454 	andseq	r1, ip, r4, asr r4
     fd8:	001c1600 	andseq	r1, ip, r0, lsl #12
				uart_a_enable_int;
     fdc:	52000100 	andpl	r0, r0, #0, 2
     fe0:	00001c16 	andeq	r1, r0, r6, lsl ip
				goto Redo_rx;
     fe4:	00001c18 	andeq	r1, r0, r8, lsl ip
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fe8:	00540001 	subseq	r0, r4, r1
     fec:	00000000 	andeq	r0, r0, r0
			return -2;
     ff0:	46000000 	strmi	r0, [r0], -r0
     ff4:	78000017 	stmdavc	r0, {r0, r1, r2, r4}
				uart_a_write (*buf);
     ff8:	01000017 	tsteq	r0, r7, lsl r0
     ffc:	00005600 	andeq	r5, r0, r0, lsl #12
			while (len && uart_a_room_in_tx) {
    1000:	00000000 	andeq	r0, r0, r0
    1004:	175c0000 	ldrbne	r0, [ip, -r0]
    1008:	17660000 	strbne	r0, [r6, -r0]!
			if (len != operation) {
    100c:	00010000 	andeq	r0, r1, r0
			uart_a_disable_int;
    1010:	00000053 	andeq	r0, r0, r3, asr r0
	...
				uart_a_enable_int;
    1020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (uart_a_room_in_tx) {
    102c:	00540001 	subseq	r0, r4, r1
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    103c:	01000000 	mrseq	r0, (UNDEF: 0)
			uart_a_enable_int;
    1040:	00005000 	andeq	r5, r0, r0
    1044:	00000000 	andeq	r0, r0, r0
    1048:	00010000 	andeq	r0, r1, r0
			return 0;
    104c:	00000050 	andeq	r0, r0, r0, asr r0
			if (len == UART_CNTRL_SETRATE) {
    1050:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
    1054:	0019c400 	andseq	ip, r9, r0, lsl #8
    1058:	0019dd00 	andseq	sp, r9, r0, lsl #26
    105c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (len == UART_CNTRL_GETRATE) {
    1068:	000019c4 	andeq	r1, r0, r4, asr #19
				return 1;
    106c:	000019da 	ldrdeq	r1, [r0], -sl
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1070:	00510001 	subseq	r0, r1, r1
			syserror (ENOOPER, "uai");
    1074:	00000000 	andeq	r0, r0, r0
    1078:	a0000000 	andge	r0, r0, r0
    107c:	b4000019 	strlt	r0, [r0], #-25	; 0xffffffe7
    1080:	01000019 	tsteq	r0, r9, lsl r0
    1084:	19b45000 	ldmibne	r4!, {ip, lr}
    1088:	19b80000 	ldmibne	r8!, {}	; <UNPREDICTABLE>
    108c:	00010000 	andeq	r0, r1, r0
    1090:	0019bc54 	andseq	fp, r9, r4, asr ip
    1094:	0019c400 	andseq	ip, r9, r0, lsl #8
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1098:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10a4:	000019a0 	andeq	r1, r0, r0, lsr #19
    10a8:	000019b7 			; <UNDEFINED> instruction: 0x000019b7
    10ac:	bc510001 	mrrclt	0, 0, r0, r1, cr1
    10b0:	c4000019 	strgt	r0, [r0], #-25	; 0xffffffe7
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10b4:	01000019 	tsteq	r0, r9, lsl r0
    10b8:	00005100 	andeq	r5, r0, r0, lsl #2
		RISE_N_SHINE;
    10bc:	00000000 	andeq	r0, r0, r0
    10c0:	19a80000 	stmibne	r8!, {}	; <UNPREDICTABLE>
		i_trigger (devevent (UART_A, READ));
    10c4:	19b70000 	ldmibne	r7!, {}	; <UNPREDICTABLE>
    10c8:	00010000 	andeq	r0, r1, r0
    10cc:	0019bc53 	andseq	fp, r9, r3, asr ip
    10d0:	0019c400 	andseq	ip, r9, r0, lsl #8
    10d4:	53000100 	movwpl	r0, #256	; 0x100
	...
    10e8:	00500001 	subseq	r0, r0, r1
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10f8:	01000000 	mrseq	r0, (UNDEF: 0)
    10fc:	00005100 	andeq	r5, r0, r0, lsl #2
		i_trigger (devevent (UART_A, WRITE));
    1100:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1104:	00010000 	andeq	r0, r1, r0
    1108:	00000055 	andeq	r0, r0, r5, asr r0
	...
		i_trigger (devevent (UART_A, WRITE));
    1118:	52000100 	andpl	r0, r0, #0, 2
	...
    1124:	00520001 	subseq	r0, r2, r1
    1128:	00000000 	andeq	r0, r0, r0
    112c:	80000000 	andhi	r0, r0, r0
    1130:	8a000019 	bhi	119c <__pinlist_setirq>
    1134:	01000019 	tsteq	r0, r9, lsl r0
    1138:	00005300 	andeq	r5, r0, r0, lsl #6
    113c:	00000000 	andeq	r0, r0, r0
    1140:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
}
    1144:	192a0000 	stmdbne	sl!, {}	; <UNPREDICTABLE>
    1148:	00010000 	andeq	r0, r1, r0
    114c:	00000050 	andeq	r0, r0, r0, asr r0
    1150:	00000000 	andeq	r0, r0, r0
    1154:	001ccc00 	andseq	ip, ip, r0, lsl #24
void __buttons_setirq (int val) {
    1158:	001cd200 	andseq	sp, ip, r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    115c:	50000100 	andpl	r0, r0, r0, lsl #2
    1160:	00001cd2 	ldrdeq	r1, [r0], -r2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1164:	00001d00 	andeq	r1, r0, r0, lsl #26
    1168:	00550001 	subseq	r0, r5, r1
    116c:	00000000 	andeq	r0, r0, r0
		bn = BUTTON_GPIO (__button_list [i]);
    1170:	cc000000 	stcgt	0, cr0, [r0], {-0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	d700001c 	smladle	r0, ip, r0, r0
    1178:	0100001c 	tsteq	r0, ip, lsl r0
    117c:	1cd75100 	ldfnee	f5, [r7], {0}
    1180:	1d000000 	stcne	0, cr0, [r0, #-0]
    1184:	00010000 	andeq	r0, r1, r0
    1188:	00000054 	andeq	r0, r0, r4, asr r0
}
    118c:	00000000 	andeq	r0, r0, r0
    1190:	001ce800 	andseq	lr, ip, r0, lsl #16
    1194:	001cec00 	andseq	lr, ip, r0, lsl #24
    1198:	53000100 	movwpl	r0, #256	; 0x100
void __pinlist_setirq (int val) {
    119c:	00001cee 	andeq	r1, r0, lr, ror #25
	for (i = 0; i < N_PINLIST; i++) {
    11a0:	00001cf2 	strdeq	r1, [r0], -r2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11a4:	f2530001 	vhadd.s16	d16, d3, d1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a8:	0000001c 	andeq	r0, r0, ip, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
    11ac:	0100001d 	tsteq	r0, sp, lsl r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11b0:	00005200 	andeq	r5, r0, r0, lsl #4
    11b4:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11b8:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    11bc:	18550000 	ldmdane	r5, {}^	; <UNPREDICTABLE>
    11c0:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < N_PINLIST; i++) {
    11c4:	00000050 	andeq	r0, r0, r0, asr r0
}
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	00185000 	andseq	r5, r8, r0
    11d0:	00185500 	andseq	r5, r8, r0, lsl #10
    11d4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	buttons_disable ();
    11e8:	00500001 	subseq	r0, r0, r1
	i_trigger ((aword)&__button_list);
    11ec:	00000000 	andeq	r0, r0, r0
    11f0:	01000000 	mrseq	r0, (UNDEF: 0)
    11f4:	00005000 	andeq	r5, r0, r0
	...
    1204:	00010000 	andeq	r0, r1, r0
    1208:	00000053 	andeq	r0, r0, r3, asr r0
    120c:	00000000 	andeq	r0, r0, r0
    1210:	53000100 	movwpl	r0, #256	; 0x100
	...
	RISE_N_SHINE;
    121c:	00001824 	andeq	r1, r0, r4, lsr #16
    1220:	0000182c 	andeq	r1, r0, ip, lsr #16
if (pin_sensor_int) {
    1224:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1228:	3f000018 	svccc	0x00000018
	i_trigger ((aword)(&__input_pins));
    122c:	01000018 	tsteq	r0, r8, lsl r0
    1230:	18405300 	stmdane	r0, {r8, r9, ip, lr}^
    1234:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    1238:	00010000 	andeq	r0, r1, r0
    123c:	00000053 	andeq	r0, r0, r3, asr r0
    1240:	00000000 	andeq	r0, r0, r0
    1244:	00182e00 	andseq	r2, r8, r0, lsl #28
    1248:	00183f00 	andseq	r3, r8, r0, lsl #30
    124c:	50000100 	andpl	r0, r0, r0, lsl #2
    1250:	00001840 	andeq	r1, r0, r0, asr #16
    1254:	00001850 	andeq	r1, r0, r0, asr r8
	__pinsen_disable_and_clear;
    1258:	00500001 	subseq	r0, r0, r1
	...
}
    1268:	01000000 	mrseq	r0, (UNDEF: 0)
    126c:	00005000 	andeq	r5, r0, r0
    1270:	00000000 	andeq	r0, r0, r0
    1274:	00010000 	andeq	r0, r1, r0
    1278:	00000053 	andeq	r0, r0, r3, asr r0
void system_init () {
    127c:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1280:	53000100 	movwpl	r0, #256	; 0x100
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1294:	00500001 	subseq	r0, r0, r1
    1298:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    129c:	01000000 	mrseq	r0, (UNDEF: 0)
    12a0:	00005000 	andeq	r5, r0, r0
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12b0:	00010000 	andeq	r0, r1, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12b4:	00000053 	andeq	r0, r0, r3, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12b8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12bc:	00185800 	andseq	r5, r8, r0, lsl #16
		pin = (port_confs [i] >> 19) & 0x1f;
    12c0:	00185e00 	andseq	r5, r8, r0, lsl #28
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12d0:	00001858 	andeq	r1, r0, r8, asr r8
    12d4:	00001861 	andeq	r1, r0, r1, ror #16
    12d8:	00510001 	subseq	r0, r1, r1
		if (port_confs [i] & 0x80)
    12dc:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12e0:	66000000 	strvs	r0, [r0], -r0
    12e4:	a4000018 	strge	r0, [r0], #-24	; 0xffffffe8
		if (port_confs [i] & 0x40)
    12e8:	01000018 	tsteq	r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ec:	18a85400 	stmiane	r8!, {sl, ip, lr}
    12f0:	18f60000 	ldmne	r6!, {}^	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f4:	00010000 	andeq	r0, r1, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12f8:	0018f854 	andseq	pc, r8, r4, asr r8	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12fc:	00190200 	andseq	r0, r9, r0, lsl #4
	all_leds_blink;
    1300:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    130c:	0000189e 	muleq	r0, lr, r8
    1310:	000018a0 	andeq	r1, r0, r0, lsr #17
    1314:	a8500001 	ldmdage	r0, {r0}^
    1318:	f8000018 			; <UNDEFINED> instruction: 0xf8000018
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    131c:	01000018 	tsteq	r0, r8, lsl r0
    1320:	00005000 	andeq	r5, r0, r0
    1324:	00000000 	andeq	r0, r0, r0
    1328:	19380000 	ldmdbne	r8!, {}	; <UNPREDICTABLE>
    132c:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1330:	00010000 	andeq	r0, r1, r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1334:	00195250 	andseq	r5, r9, r0, asr r2
    1338:	00196c00 	andseq	r6, r9, r0, lsl #24
	IntEnable (INT_AON_RTC_COMB);
    133c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_malloc_init ();
    1348:	00001938 	andeq	r1, r0, r8, lsr r9
	IntEnable (INT_AON_GPIO_EDGE);
    134c:	0000194e 	andeq	r1, r0, lr, asr #18
    1350:	52510001 	subspl	r0, r1, #1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1354:	58000019 	stmdapl	r0, {r0, r3, r4}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1358:	01000019 	tsteq	r0, r9, lsl r0
    135c:	00005100 	andeq	r5, r0, r0, lsl #2
    1360:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1364:	194a0000 	stmdbne	sl, {}^	; <UNPREDICTABLE>
    1368:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    136c:	00010000 	andeq	r0, r1, r0
    1370:	00000050 	andeq	r0, r0, r0, asr r0
    1374:	00000000 	andeq	r0, r0, r0
	urates [0] = UART_RATE / 100;
    1378:	00194a00 	andseq	r4, r9, r0, lsl #20
    137c:	00194e00 	andseq	r4, r9, r0, lsl #28
	reinit_uart ();
    1380:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    138c:	00001b8c 	andeq	r1, r0, ip, lsl #23
    1390:	00001b9a 	muleq	r0, sl, fp
    1394:	a0500001 	subsge	r0, r0, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1398:	b300001b 	movwlt	r0, #27
    139c:	0100001b 	tsteq	r0, fp, lsl r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	00005000 	andeq	r5, r0, r0
    13a4:	00000000 	andeq	r0, r0, r0
			devinit [i] . init (devinit [i] . param);
    13a8:	1b980000 	blne	fe6013b0 <_estack+0xde5fc3b0>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13ac:	1b9a0000 	blne	fe6813b4 <_estack+0xde67c3b4>
    13b0:	00010000 	andeq	r0, r1, r0
    13b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
	tci_run_auxiliary_timer ();
    13c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    13d0:	00500001 	subseq	r0, r0, r1
	...
		diag ("Leftover RAM: %d bytes",
    13e0:	01000000 	mrseq	r0, (UNDEF: 0)
    13e4:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    13f4:	00010000 	andeq	r0, r1, r0
    13f8:	00000054 	andeq	r0, r0, r4, asr r0
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1414:	00500001 	subseq	r0, r0, r1
    1418:	00000000 	andeq	r0, r0, r0
    141c:	01000000 	mrseq	r0, (UNDEF: 0)
    1420:	00005000 	andeq	r5, r0, r0
    1424:	00000000 	andeq	r0, r0, r0
    1428:	00020000 	andeq	r0, r2, r0
    142c:	00000075 	andeq	r0, r0, r5, ror r0
    1430:	00000000 	andeq	r0, r0, r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1434:	24740000 	ldrbtcs	r0, [r4], #-0
    1438:	24940000 	ldrcs	r0, [r4], #0
    143c:	00010000 	andeq	r0, r1, r0
    1440:	00249a50 	eoreq	r9, r4, r0, asr sl
    1444:	00249b00 	eoreq	r9, r4, r0, lsl #22
    1448:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1454:	0000247e 	andeq	r2, r0, lr, ror r4
__attribute__ ((noreturn)) void __pi_release () {
    1458:	000024a4 	andeq	r2, r0, r4, lsr #9
    145c:	a4540001 	ldrbge	r0, [r4], #-1
    1460:	a7000024 	strge	r0, [r0, -r4, lsr #32]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1464:	01000024 	tsteq	r0, r4, lsr #32
	check_stack_overflow;
    1468:	00005000 	andeq	r5, r0, r0
    146c:	00000000 	andeq	r0, r0, r0
    1470:	24400000 	strbcs	r0, [r0], #-0
	update_n_wake (MAX_WORD, NO);
    1474:	24500000 	ldrbcs	r0, [r0], #-0
    1478:	00010000 	andeq	r0, r1, r0
    147c:	00245650 	eoreq	r5, r4, r0, asr r6
	for_all_tasks (__pi_curr) {
    1480:	00245e00 	eoreq	r5, r4, r0, lsl #28
    1484:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__SLEEP;
    1490:	0000245c 	andeq	r2, r0, ip, asr r4
    1494:	00002468 	andeq	r2, r0, r8, ror #8
    1498:	00530001 	subseq	r0, r3, r1
    149c:	00000000 	andeq	r0, r0, r0
	system_event_count ++;
    14a0:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    14a4:	64000024 	strvs	r0, [r0], #-36	; 0xffffffdc
	switch (__pi_systat.effpdm) {
    14a8:	01000024 	tsteq	r0, r4, lsr #32
    14ac:	24645000 	strbtcs	r5, [r4], #-0
    14b0:	24680000 	strbtcs	r0, [r8], #-0
    14b4:	00020000 	andeq	r0, r2, r0
			__WFI ();
    14b8:	00000073 	andeq	r0, r0, r3, ror r0
    14bc:	00000000 	andeq	r0, r0, r0
    14c0:	24000000 	strcs	r0, [r0], #-0
	check_stack_overflow;
    14c4:	24100000 	ldrcs	r0, [r0], #-0
    14c8:	00010000 	andeq	r0, r1, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    14cc:	00241650 	eoreq	r1, r4, r0, asr r6
    14d0:	00241e00 	eoreq	r1, r4, r0, lsl #28
			(__pi_curr->code) (tstate (__pi_curr));
    14d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14e0:	00002400 	andeq	r2, r0, r0, lsl #8
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14e4:	00002412 	andeq	r2, r0, r2, lsl r4
    14e8:	16510001 	ldrbne	r0, [r1], -r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14ec:	40000024 	andmi	r0, r0, r4, lsr #32
    14f0:	01000024 	tsteq	r0, r4, lsr #32
    14f4:	00005100 	andeq	r5, r0, r0, lsl #2
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14f8:	00000000 	andeq	r0, r0, r0
    14fc:	241c0000 	ldrcs	r0, [ip], #-0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1500:	24240000 	strtcs	r0, [r4], #-0
    1504:	00010000 	andeq	r0, r1, r0
			__WFI ();
    1508:	00242e53 	eoreq	r2, r4, r3, asr lr
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    150c:	00244000 	eoreq	r4, r4, r0
    1510:	53000100 	movwpl	r0, #256	; 0x100
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    151c:	0000241e 	andeq	r2, r0, lr, lsl r4
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1520:	0000242c 	andeq	r2, r0, ip, lsr #8
    1524:	2e500001 	cdpcs	0, 5, cr0, cr0, cr1, {0}
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1528:	30000024 	andcc	r0, r0, r4, lsr #32
    152c:	01000024 	tsteq	r0, r4, lsr #32
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1530:	24305000 	ldrtcs	r5, [r0], #-0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1534:	24400000 	strbcs	r0, [r0], #-0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1538:	00020000 	andeq	r0, r2, r0
    153c:	00000073 	andeq	r0, r0, r3, ror r0
    1540:	00000000 	andeq	r0, r0, r0
    1544:	23640000 	cmncs	r4, #0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1548:	237e0000 	cmncs	lr, #0
    154c:	00010000 	andeq	r0, r1, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1550:	00237e50 	eoreq	r7, r3, r0, asr lr
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1554:	00238400 	eoreq	r8, r3, r0, lsl #8
    1558:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    155c:	00002384 	andeq	r2, r0, r4, lsl #7
    1560:	0000238e 	andeq	r2, r0, lr, lsl #7
    1564:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
			SysCtrlSetRechargeBeforePowerDown
    1568:	00000023 	andeq	r0, r0, r3, lsr #32
    156c:	01000024 	tsteq	r0, r4, lsr #32
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1570:	00005500 	andeq	r5, r0, r0, lsl #10
    1574:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1578:	23640000 	cmncs	r4, #0
    157c:	237e0000 	cmncs	lr, #0
    1580:	00010000 	andeq	r0, r1, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1584:	00237e51 	eoreq	r7, r3, r1, asr lr
    1588:	00238400 	eoreq	r8, r3, r0, lsl #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    158c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1590:	00002384 	andeq	r2, r0, r4, lsl #7
    1594:	0000238e 	andeq	r2, r0, lr, lsl #7
    1598:	8e510001 	cdphi	0, 5, cr0, cr1, cr1, {0}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    159c:	00000023 	andeq	r0, r0, r3, lsr #32
			while (!(AONWUCPowerStatusGet () &
    15a0:	01000024 	tsteq	r0, r4, lsr #32
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15a4:	00005700 	andeq	r5, r0, r0, lsl #14
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	23640000 	cmncs	r4, #0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15b0:	237e0000 	cmncs	lr, #0
    15b4:	00010000 	andeq	r0, r1, r0
    15b8:	00237e52 	eoreq	r7, r3, r2, asr lr
    15bc:	00238400 	eoreq	r8, r3, r0, lsl #8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15c0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    15c4:	00002384 	andeq	r2, r0, r4, lsl #7
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    15c8:	0000238e 	andeq	r2, r0, lr, lsl #7
    15cc:	8e520001 	cdphi	0, 5, cr0, cr2, cr1, {0}
			SysCtrlAdjustRechargeAfterPowerDown ();
    15d0:	00000023 	andeq	r0, r0, r3, lsr #32
			reinit_uart ();
    15d4:	01000024 	tsteq	r0, r4, lsr #32
    15d8:	00005400 	andeq	r5, r0, r0, lsl #8
    15dc:	00000000 	andeq	r0, r0, r0
}
    15e0:	23be0000 			; <UNDEFINED> instruction: 0x23be0000
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15e4:	23d60000 	bicscs	r0, r6, #0
    15e8:	00010000 	andeq	r0, r1, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15ec:	0023d650 	eoreq	sp, r3, r0, asr r6
    15f0:	0023db00 	eoreq	sp, r3, r0, lsl #22
    15f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    1600:	000023dc 	ldrdeq	r2, [r0], -ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1604:	000023eb 	andeq	r2, r0, fp, ror #7
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1608:	00500001 	subseq	r0, r0, r1
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    160c:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1610:	14000000 	strne	r0, [r0], #-0
    1614:	22000023 	andcs	r0, r0, #35	; 0x23
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1618:	01000023 	tsteq	r0, r3, lsr #32
    161c:	23225000 			; <UNDEFINED> instruction: 0x23225000
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1620:	23500000 	cmpcs	r0, #0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1624:	00010000 	andeq	r0, r1, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1628:	00000054 	andeq	r0, r0, r4, asr r0
    162c:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (
    1630:	00231400 	eoreq	r1, r3, r0, lsl #8
    1634:	00232800 	eoreq	r2, r3, r0, lsl #16
	__SLEEP;
    1638:	51000100 	mrspl	r0, (UNDEF: 16)
    163c:	0000232c 	andeq	r2, r0, ip, lsr #6
  __ASM volatile ("cpsie i" : : : "memory");
    1640:	0000233b 	andeq	r2, r0, fp, lsr r3
	goto Redo;
    1644:	00510001 	subseq	r0, r1, r1
    1648:	00000000 	andeq	r0, r0, r0
    164c:	14000000 	strne	r0, [r0], #-0
    1650:	28000023 	stmdacs	r0, {r0, r1, r5}
    1654:	01000023 	tsteq	r0, r3, lsr #32
    1658:	232c5200 			; <UNDEFINED> instruction: 0x232c5200
    165c:	233b0000 	teqcs	fp, #0
    1660:	00010000 	andeq	r0, r1, r0
    1664:	00000052 	andeq	r0, r0, r2, asr r0
    1668:	00000000 	andeq	r0, r0, r0
    166c:	00233c00 	eoreq	r3, r3, r0, lsl #24
    1670:	00234600 	eoreq	r4, r3, r0, lsl #12
    1674:	50000100 	andpl	r0, r0, r0, lsl #2
    1678:	00002346 	andeq	r2, r0, r6, asr #6
    167c:	0000234a 	andeq	r2, r0, sl, asr #6
    1680:	00740007 	rsbseq	r0, r4, r7
    1684:	00722432 	rsbseq	r2, r2, r2, lsr r4
    1688:	00234a22 	eoreq	r4, r3, r2, lsr #20
    168c:	00236400 	eoreq	r6, r3, r0, lsl #8
    1690:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    16a4:	00500001 	subseq	r0, r0, r1
	...
	cli_tim;
    16b4:	01000000 	mrseq	r0, (UNDEF: 0)
    16b8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	setpowermode (2);
    16c8:	00010000 	andeq	r0, r1, r0
	__PCB = NULL;
    16cc:	00000050 	andeq	r0, r0, r0, asr r0
	release;
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16e8:	00510001 	subseq	r0, r1, r1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16ec:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16f0:	01000000 	mrseq	r0, (UNDEF: 0)
	system_init ();
    16f4:	00005600 	andeq	r5, r0, r0, lsl #12
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1704:	00010000 	andeq	r0, r1, r0
    1708:	00000050 	andeq	r0, r0, r0, asr r0
    170c:	00000000 	andeq	r0, r0, r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1710:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	__pi_release ();
    1724:	00500001 	subseq	r0, r0, r1
    1728:	00000000 	andeq	r0, r0, r0
    172c:	01000000 	mrseq	r0, (UNDEF: 0)
    1730:	00005000 	andeq	r5, r0, r0
	...
static void killev (__pi_pcb_t *pid) {
    1740:	00010000 	andeq	r0, r1, r0
	wfun = (aword)(pid->code);
    1744:	00000051 	andeq	r0, r0, r1, asr r0
	for_all_tasks (i) {
    1748:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
    174c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (i->Events [j] . Event == (aword)pid
    1760:	00500001 	subseq	r0, r0, r1
    1764:	00000000 	andeq	r0, r0, r0
    1768:	01000000 	mrseq	r0, (UNDEF: 0)
				wakeupev (i, j);
    176c:	00005000 	andeq	r5, r0, r0
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    177c:	00010000 	andeq	r0, r1, r0
static void qfree (aword *ch) {
    1780:	00000051 	andeq	r0, r0, r1, asr r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	00000000 	andeq	r0, r0, r0
	cc = (aword*)(mpools + MA_NP);
    1788:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    1794:	0000224c 	andeq	r2, r0, ip, asr #4
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1798:	00002264 	andeq	r2, r0, r4, ror #4
    179c:	6a500001 	bvs	14017a8 <__ccfg+0x13e1800>
    17a0:	74000022 	strvc	r0, [r0], #-34	; 0xffffffde
			m_setnextp (cc, m_nextp (chunk));
    17a4:	01000022 	tsteq	r0, r2, lsr #32
			m_size (chunk) += m_hdrlen + m_size (ch);
    17a8:	22765000 	rsbscs	r5, r6, #0
    17ac:	22840000 	addcs	r0, r4, #0
    17b0:	00010000 	andeq	r0, r1, r0
    17b4:	00228a50 	eoreq	r8, r2, r0, asr sl
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b8:	00228c00 	eoreq	r8, r2, r0, lsl #24
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17bc:	50000100 	andpl	r0, r0, r0, lsl #2
    17c0:	00002296 	muleq	r0, r6, r2
    17c4:	00002298 	muleq	r0, r8, r2
			m_setnextp (cc, m_nextp (chunk));
    17c8:	00500001 	subseq	r0, r0, r1
			m_size (ch) += m_hdrlen + m_size (chunk);
    17cc:	00000000 	andeq	r0, r0, r0
    17d0:	4c000000 	stcmi	0, cr0, [r0], {-0}
    17d4:	86000022 	strhi	r0, [r0], -r2, lsr #32
    17d8:	01000022 	tsteq	r0, r2, lsr #32
    17dc:	228a5100 	addcs	r5, sl, #0, 2
    17e0:	22950000 	addscs	r0, r5, #0
			if (m_size (chunk) >= m_size (ch))
    17e4:	00010000 	andeq	r0, r1, r0
    17e8:	00229651 	eoreq	r9, r2, r1, asr r6
    17ec:	0022ac00 	eoreq	sl, r2, r0, lsl #24
		chunk = m_nextp (chunk))
    17f0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17fc:	0000224c 	andeq	r2, r0, ip, asr #4
	diag_wait (a);
    1800:	00002289 	andeq	r2, r0, r9, lsl #5
	diag_wchar (c, a);
    1804:	8a520001 	bhi	1481810 <__ccfg+0x1461868>
    1808:	95000022 	strls	r0, [r0, #-34]	; 0xffffffde
}
    180c:	01000022 	tsteq	r0, r2, lsr #32
    1810:	22965200 	addscs	r5, r6, #0, 4
	syserror (ESTATE, "state");
    1814:	22ac0000 	adccs	r0, ip, #0
    1818:	00010000 	andeq	r0, r1, r0
    181c:	00000052 	andeq	r0, r0, r2, asr r0
    1820:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    1824:	00226400 	eoreq	r6, r2, r0, lsl #8
void utimer_add (address ut) {
    1828:	00226800 	eoreq	r6, r2, r0, lsl #16
    182c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_utims [i] = ut;
    1840:	00500001 	subseq	r0, r0, r1
}
    1844:	00000000 	andeq	r0, r0, r0
    1848:	01000000 	mrseq	r0, (UNDEF: 0)
    184c:	00005000 	andeq	r5, r0, r0
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
    185c:	00010000 	andeq	r0, r1, r0
    1860:	00000050 	andeq	r0, r0, r0, asr r0
    1864:	00000000 	andeq	r0, r0, r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1868:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    187c:	00510001 	subseq	r0, r1, r1
	...
    188c:	01000000 	mrseq	r0, (UNDEF: 0)
    1890:	00005200 	andeq	r5, r0, r0, lsl #4
    1894:	00000000 	andeq	r0, r0, r0
    1898:	00010000 	andeq	r0, r1, r0
		for_all_tasks (i) {
    189c:	00000055 	andeq	r0, r0, r5, asr r0
	...
			if (!twaiting (i))
    18ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18b8:	00540001 	subseq	r0, r4, r1
	...
    18c8:	01000000 	mrseq	r0, (UNDEF: 0)
    18cc:	00005100 	andeq	r5, r0, r0, lsl #2
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	00010000 	andeq	r0, r1, r0
    18d8:	00000050 	andeq	r0, r0, r0, asr r0
	...
		for_all_tasks (i) {
    18e8:	52000100 	andpl	r0, r0, #0, 2
	...
				d = i->Timer - znew;
    18f4:	00550001 	subseq	r0, r5, r1
		if ((word)(__pi_mintk - znew) < min) 
    18f8:	00000000 	andeq	r0, r0, r0
    18fc:	64000000 	strvs	r0, [r0], #-0
    1900:	7a000021 	bvc	198c <__pi_trigger+0x20>
	__pi_old = znew;
    1904:	01000021 	tsteq	r0, r1, lsr #32
}
    1908:	21805000 	orrcs	r5, r0, r0
	TCI_RUN_DELAY_TIMER;
    190c:	21a00000 	movcs	r0, r0
}
    1910:	00010000 	andeq	r0, r1, r0
    1914:	00000050 	andeq	r0, r0, r0, asr r0
    1918:	00000000 	andeq	r0, r0, r0
    191c:	00216400 	eoreq	r6, r1, r0, lsl #8
    1920:	00217a00 	eoreq	r7, r1, r0, lsl #20
void proceed (word state) {
    1924:	51000100 	mrspl	r0, (UNDEF: 16)
	prcdstate (__pi_curr, state);
    1928:	00002180 	andeq	r2, r0, r0, lsl #3
    192c:	00002198 	muleq	r0, r8, r1
	release;
    1930:	9a510001 	bls	144193c <__ccfg+0x1421994>
    1934:	a6000021 	strge	r0, [r0], -r1, lsr #32
void __pi_wait (aword event, word state) {
    1938:	01000021 	tsteq	r0, r1, lsr #32
	sint j = nevents (__pi_curr);
    193c:	00005100 	andeq	r5, r0, r0, lsl #2
	if (j >= MAX_EVENTS_PER_TASK)
    1940:	00000000 	andeq	r0, r0, r0
    1944:	21640000 	cmncs	r4, r0
    1948:	217a0000 	cmncs	sl, r0
		syserror (ENEVENTS, "sw");
    194c:	00010000 	andeq	r0, r1, r0
    1950:	00217a52 	eoreq	r7, r1, r2, asr sl
	setestate (__pi_curr->Events [j], state, event);
    1954:	00218000 	eoreq	r8, r1, r0
	incwait (__pi_curr);
    1958:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	setestate (__pi_curr->Events [j], state, event);
    195c:	00002180 	andeq	r2, r0, r0, lsl #3
}
    1960:	0000218c 	andeq	r2, r0, ip, lsl #3
    1964:	8c520001 	mrrchi	0, 0, r0, r2, cr1
    1968:	b2000021 	andlt	r0, r0, #33	; 0x21
void __pi_trigger (aword event) {
    196c:	01000021 	tsteq	r0, r1, lsr #32
	for_all_tasks (i) {
    1970:	21b85400 			; <UNDEFINED> instruction: 0x21b85400
		for (j = 0; j < nevents (i); j++) {
    1974:	21be0000 			; <UNDEFINED> instruction: 0x21be0000
    1978:	00010000 	andeq	r0, r1, r0
    197c:	0021c254 	eoreq	ip, r1, r4, asr r2
    1980:	0021d600 	eoreq	sp, r1, r0, lsl #12
			if (i->Events [j] . Event == event) {
    1984:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				wakeupev (i, j);
    1990:	00002164 	andeq	r2, r0, r4, ror #2
    1994:	00002172 	andeq	r2, r0, r2, ror r1
	for_all_tasks (i) {
    1998:	00530001 	subseq	r0, r3, r1
}
    199c:	00000000 	andeq	r0, r0, r0
aword __pi_join (aword pid, word st) {
    19a0:	e0000000 	and	r0, r0, r0
	for_all_tasks (i) {
    19a4:	ec000021 	stc	0, cr0, [r0], {33}	; 0x21
    19a8:	01000021 	tsteq	r0, r1, lsr #32
	return 0;
    19ac:	21f25000 	mvnscs	r5, r0
		if ((aword)i == pid) {
    19b0:	220a0000 	andcs	r0, sl, #0
			__pi_wait (pid, st);
    19b4:	00010000 	andeq	r0, r1, r0
}
    19b8:	00000050 	andeq	r0, r0, r0, asr r0
	for_all_tasks (i) {
    19bc:	00000000 	andeq	r0, r0, r0
    19c0:	0021a800 	eoreq	sl, r1, r0, lsl #16
void delay (word d, word state) {
    19c4:	0021b200 	eoreq	fp, r1, r0, lsl #4
	settstate (__pi_curr, state);
    19c8:	50000100 	andpl	r0, r0, r0, lsl #2
    19cc:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
    19d0:	000021bd 			; <UNDEFINED> instruction: 0x000021bd
    19d4:	c2500001 	subsgt	r0, r0, #1
	update_n_wake (d, YES);
    19d8:	d0000021 	andle	r0, r0, r1, lsr #32
    19dc:	01000021 	tsteq	r0, r1, lsr #32
	__pi_curr->Timer = __pi_old + d;
    19e0:	00005000 	andeq	r5, r0, r0
	...
	inctimer (__pi_curr);
    19f0:	00010000 	andeq	r0, r1, r0
}
    19f4:	00000050 	andeq	r0, r0, r0, asr r0
    19f8:	00000000 	andeq	r0, r0, r0
	if (fun == NULL)
    19fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (i)
    1a08:	00500001 	subseq	r0, r0, r1
}
    1a0c:	00000000 	andeq	r0, r0, r0
		if (i->code == fun)
    1a10:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i)
    1a14:	00005000 	andeq	r5, r0, r0
	...
	for (i = 0; *(s+i) != '\0'; i++);
    1a24:	00010000 	andeq	r0, r1, r0
}
    1a28:	00000051 	andeq	r0, r0, r1, asr r0
	for (i = 0; *(s+i) != '\0'; i++);
    1a2c:	00000000 	andeq	r0, r0, r0
	while ((Boolean)(*d++ = *s++));
    1a30:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    1a3c:	00510001 	subseq	r0, r1, r1
	while (n-- && (*s != '\0'))
    1a40:	00000000 	andeq	r0, r0, r0
    1a44:	01000000 	mrseq	r0, (UNDEF: 0)
	*d = '\0';
    1a48:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		*d++ = *s++;
    1a58:	00010000 	andeq	r0, r1, r0
	while (n--)
    1a5c:	00000054 	andeq	r0, r0, r4, asr r0
    1a60:	00000000 	andeq	r0, r0, r0
		*dest++ = *src++;
    1a64:	70000a00 	andvc	r0, r0, r0, lsl #20
    1a68:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1a6c:	20000584 	andcs	r0, r0, r4, lsl #11
	while (n--)
    1a70:	00000022 	andeq	r0, r0, r2, lsr #32
}
    1a74:	00000000 	andeq	r0, r0, r0
		*dest++ = c;
    1a78:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		syserror (ERESOURCE, "addv");
    1a84:	0070000a 	rsbseq	r0, r0, sl
	if (ioreq [loc] != NULL)
    1a88:	84032432 	strhi	r2, [r3], #-1074	; 0xfffffbce
    1a8c:	22200005 	eorcs	r0, r0, #5
	...
}
    1a98:	00540001 	subseq	r0, r4, r1
    1a9c:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1aa0:	0a000000 	beq	1aa8 <io+0x8>
    1aa4:	32007000 	andcc	r7, r0, #0
    1aa8:	05840324 	streq	r0, [r4, #804]	; 0x324
    1aac:	00222000 	eoreq	r2, r2, r0
	...
		syserror (ENODEVICE, "io");
    1abc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ac0:	00005500 	andeq	r5, r0, r0, lsl #10
	if (len == 0)
    1ac4:	00000000 	andeq	r0, r0, r0
	ret = (ioreq [dev]) (operation, buf, len);
    1ac8:	00010000 	andeq	r0, r1, r0
    1acc:	00000055 	andeq	r0, r0, r5, asr r0
	...
		if (retry == WNONE)
    1adc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		iowait (dev, operation, retry);
    1ae8:	00540001 	subseq	r0, r4, r1
	...
		if (retry != WNONE) {
    1af8:	01000000 	mrseq	r0, (UNDEF: 0)
			iowait (dev, operation, retry);
    1afc:	00005000 	andeq	r5, r0, r0
    1b00:	00000000 	andeq	r0, r0, r0
			(ioreq [dev]) (NONE, buf, len);
    1b04:	00010000 	andeq	r0, r1, r0
    1b08:	00000050 	andeq	r0, r0, r0, asr r0
    1b0c:	00000000 	andeq	r0, r0, r0
		(ioreq [dev]) (NONE, buf, len);
    1b10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		delay (-ret - 2, retry);
    1b24:	00550001 	subseq	r0, r5, r1
	...
		release;
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
    1b38:	00005000 	andeq	r5, r0, r0
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b48:	00010000 	andeq	r0, r1, r0
    1b4c:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (ERESOURCE, "mal1");
    1b50:	00000000 	andeq	r0, r0, r0
    1b54:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b60:	00500001 	subseq	r0, r0, r1
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b64:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b68:	01000000 	mrseq	r0, (UNDEF: 0)
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b6c:	00005000 	andeq	r5, r0, r0
	...
}
    1b7c:	00010000 	andeq	r0, r1, r0
    1b80:	00000051 	andeq	r0, r0, r1, asr r0
    1b84:	00000000 	andeq	r0, r0, r0
    1b88:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b94:	00510001 	subseq	r0, r1, r1
	...
		m_size (ch) ^= MALLOC_UMASK;
    1ba4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ba8:	00005300 	andeq	r5, r0, r0, lsl #6
	mcfree [MA_NP] += m_size (ch);
    1bac:	00000000 	andeq	r0, r0, r0
	QFREE;
    1bb0:	000a0000 	andeq	r0, sl, r0
	if (mevent [MA_NP] . nwait) {
    1bb4:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1bb8:	00058403 	andeq	r8, r5, r3, lsl #8
		trigger ((aword)(&(mevent [MA_NP])));
    1bbc:	00002220 	andeq	r2, r0, r0, lsr #4
		mevent [MA_NP] . nwait --;
    1bc0:	00000000 	andeq	r0, r0, r0
}
    1bc4:	00010000 	andeq	r0, r1, r0
    1bc8:	00000053 	andeq	r0, r0, r3, asr r0
    1bcc:	00000000 	andeq	r0, r0, r0
    1bd0:	70000a00 	andvc	r0, r0, r0, lsl #20
void kill (aword pid) {
    1bd4:	03243200 			; <UNDEFINED> instruction: 0x03243200
		pid = (aword) __pi_curr;
    1bd8:	20000584 	andcs	r0, r0, r4, lsl #11
	j = NULL;
    1bdc:	00000022 	andeq	r0, r0, r2, lsr #32
	for_all_tasks (i) {
    1be0:	00000000 	andeq	r0, r0, r0
	syserror (EREQPAR, "kpi");
    1be4:	53000100 	movwpl	r0, #256	; 0x100
	...
		if ((aword)i == pid) {
    1bf0:	0070000a 	rsbseq	r0, r0, sl
				__PCB = i->Next;
    1bf4:	84032432 	strhi	r2, [r3], #-1074	; 0xfffffbce
			killev (i);
    1bf8:	22200005 	eorcs	r0, r0, #5
	...
				j->Next = i->Next;
    1c0c:	00500001 	subseq	r0, r0, r1
    1c10:	00000000 	andeq	r0, r0, r0
    1c14:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1c18:	00005000 	andeq	r5, r0, r0
	...
		_size = 2;
    1c28:	00010000 	andeq	r0, r1, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c2c:	00000053 	andeq	r0, r0, r3, asr r0
		_size = (((aword)size) + 3) >> 2;
    1c30:	00000000 	andeq	r0, r0, r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c34:	53000100 	movwpl	r0, #256	; 0x100
	...
		if (mevent [MA_NP] . nfail != 255)
    1c40:	00530001 	subseq	r0, r3, r1
	...
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c50:	01000000 	mrseq	r0, (UNDEF: 0)
    1c54:	00005200 	andeq	r5, r0, r0, lsl #4
			syserror (EMALLOC, "malc");
    1c58:	00000000 	andeq	r0, r0, r0
    1c5c:	00010000 	andeq	r0, r1, r0
		if (m_size (chunk) >= _size)
    1c60:	00000052 	andeq	r0, r0, r2, asr r0
    1c64:	00000000 	andeq	r0, r0, r0
		chunk = m_nextp (chunk)) {
    1c68:	52000100 	andpl	r0, r0, #0, 2
	...
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c74:	00520001 	subseq	r0, r2, r1
			m_size (chunk) = _size;
    1c78:	00000000 	andeq	r0, r0, r0
			cc = chunk + _size + m_hdrlen;
    1c7c:	e4000000 	str	r0, [r0], #-0
    1c80:	f2000020 	vhadd.s8	d0, d0, d16
			m_size (cc) = waste - m_hdrlen;
    1c84:	01000020 	tsteq	r0, r0, lsr #32
			QFREE;
    1c88:	00005000 	andeq	r5, r0, r0
		mevent [MA_NP] . nfail = 0;
    1c8c:	00000000 	andeq	r0, r0, r0
		mcfree [MA_NP] -= m_size (chunk);
    1c90:	20e40000 	rsccs	r0, r4, r0
    1c94:	20f60000 	rscscs	r0, r6, r0
    1c98:	00010000 	andeq	r0, r1, r0
    1c9c:	0020fc51 	eoreq	pc, r0, r1, asr ip	; <UNPREDICTABLE>
		m_size (chunk) |= MALLOC_UMASK;
    1ca0:	00210c00 	eoreq	r0, r1, r0, lsl #24
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ca4:	51000100 	mrspl	r0, (UNDEF: 16)
		m_size (chunk) |= MALLOC_UMASK;
    1ca8:	00002114 	andeq	r2, r0, r4, lsl r1
			mnfree [MA_NP] = mcfree [MA_NP];
    1cac:	00002136 	andeq	r2, r0, r6, lsr r1
}
    1cb0:	38510001 	ldmdacc	r1, {r0}^
    1cb4:	3a000021 	bcc	1d40 <diag+0x28>
    1cb8:	01000021 	tsteq	r0, r1, lsr #32
    1cbc:	214e5100 	mrscs	r5, (UNDEF: 94)
    1cc0:	21640000 	cmncs	r4, r0
    1cc4:	00010000 	andeq	r0, r1, r0
    1cc8:	00000051 	andeq	r0, r0, r1, asr r0
aword __pi_fork (fsmcode func, aword data) {
    1ccc:	00000000 	andeq	r0, r0, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1cd0:	00212000 	eoreq	r2, r1, r0
    1cd4:	00214a00 	eoreq	r4, r1, r0, lsl #20
    1cd8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	i->data = data;
    1ce4:	000020fe 	strdeq	r2, [r0], -lr
		if ((j = __PCB) == NULL)
    1ce8:	00002128 	andeq	r2, r0, r8, lsr #2
}
    1cec:	28540001 	ldmdacs	r4, {r0}^
			for (; j->Next != NULL; j = j->Next);
    1cf0:	3c000021 	stccc	0, cr0, [r0], {33}	; 0x21
    1cf4:	01000021 	tsteq	r0, r1, lsr #32
	return (aword) i;
    1cf8:	213c5000 	teqcs	ip, r0
    1cfc:	21640000 	cmncs	r4, r0
	if (mevent [MA_NP] . nwait != 255)
    1d00:	00010000 	andeq	r0, r1, r0
    1d04:	00000054 	andeq	r0, r0, r4, asr r0
    1d08:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait ++;
    1d0c:	0020fc00 	eoreq	pc, r0, r0, lsl #24
	wait ((aword)(&(mevent [MA_NP])), state);
    1d10:	00210f00 	eoreq	r0, r1, r0, lsl #30
    1d14:	50000100 	andpl	r0, r0, r0, lsl #2
void diag (const char *mess, ...) {
    1d18:	00002114 	andeq	r2, r0, r4, lsl r1
    1d1c:	00002116 	andeq	r2, r0, r6, lsl r1
    1d20:	16500001 	ldrbne	r0, [r0], -r1
	diag_disable_int (a, is);
    1d24:	19000021 	stmdbne	r0, {r0, r5}
    1d28:	07000021 	streq	r0, [r0, -r1, lsr #32]
    1d2c:	32007100 	andcc	r7, r0, #0, 2
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
	diag_disable_int (a, is);
    1d34:	0000214e 	andeq	r2, r0, lr, asr #2
	while (*mess != '\0') {
    1d38:	00002164 	andeq	r2, r0, r4, ror #2
	dgout ('\r');
    1d3c:	00500001 	subseq	r0, r0, r1
	dgout ('\n');
    1d40:	00000000 	andeq	r0, r0, r0
    1d44:	c0000000 	andgt	r0, r0, r0
    1d48:	d6000020 	strle	r0, [r0], -r0, lsr #32
	diag_wait (a);
    1d4c:	01000020 	tsteq	r0, r0, lsr #32
	diag_enable_int (a, is);
    1d50:	20d85000 	sbcscs	r5, r8, r0
    1d54:	20dc0000 	sbcscs	r0, ip, r0
}
    1d58:	00010000 	andeq	r0, r1, r0
    1d5c:	00000050 	andeq	r0, r0, r0, asr r0
	...
			if (*mess == 'l') {
    1d6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				val = va_arg (ap, lword);
    1d78:	00500001 	subseq	r0, r0, r1
	...
			switch (*mess) {
    1d88:	01000000 	mrseq	r0, (UNDEF: 0)
    1d8c:	00005100 	andeq	r5, r0, r0, lsl #2
				dgout ('%');
    1d90:	00000000 	andeq	r0, r0, r0
    1d94:	00010000 	andeq	r0, r1, r0
				dgout (*mess);
    1d98:	00000055 	andeq	r0, r0, r5, asr r0
    1d9c:	00000000 	andeq	r0, r0, r0
			switch (*mess) {
    1da0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					(val >> (bc - i)) & 0xf];
    1dac:	00550001 	subseq	r0, r5, r1
    1db0:	00000000 	andeq	r0, r0, r0
					dgout (v);
    1db4:	01000000 	mrseq	r0, (UNDEF: 0)
    1db8:	00005100 	andeq	r5, r0, r0, lsl #2
				while (i < bc) {
    1dbc:	00000000 	andeq	r0, r0, r0
			mess++;
    1dc0:	00010000 	andeq	r0, r1, r0
					d /= 10;
    1dc4:	00000055 	andeq	r0, r0, r5, asr r0
	...
					dgout ('-');
    1dd4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1de8:	00500001 	subseq	r0, r0, r1
	...
					if (v || d == 1) break;
    1df4:	2e000020 	cdpcs	0, 0, cr0, cr0, cr0, {1}
    1df8:	01000020 	tsteq	r0, r0, lsr #32
					d /= 10;
    1dfc:	20345000 	eorscs	r5, r4, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1e00:	20540000 	subscs	r0, r4, r0
					dgout (v + '0');
    1e04:	00010000 	andeq	r0, r1, r0
    1e08:	00209450 	eoreq	r9, r0, r0, asr r4
    1e0c:	00209600 	eoreq	r9, r0, r0, lsl #12
					d /= 10;
    1e10:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					v = (word) (val / d);
    1e1c:	00002000 	andeq	r2, r0, r0
    1e20:	00002030 	andeq	r2, r0, r0, lsr r0
				if (bc == 16)
    1e24:	30510001 	subscc	r0, r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1e28:	34000020 	strcc	r0, [r0], #-32	; 0xffffffe0
					val &= 0xffff;
    1e2c:	01000020 	tsteq	r0, r0, lsr #32
					dgout (*s);
    1e30:	20345700 	eorscs	r5, r4, r0, lsl #14
					s++;
    1e34:	20540000 	subscs	r0, r4, r0
				while (*s != '\0') {
    1e38:	00010000 	andeq	r0, r1, r0
    1e3c:	00205451 	eoreq	r5, r0, r1, asr r4
			dgout (*mess++);
    1e40:	00206000 	eoreq	r6, r0, r0
    1e44:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    1e48:	00002064 	andeq	r2, r0, r4, rrx
    1e4c:	00002094 	muleq	r0, r4, r0
    1e50:	94570001 	ldrbls	r0, [r7], #-1
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e54:	99000020 	stmdbls	r0, {r5}
    1e58:	01000020 	tsteq	r0, r0, lsr #32
    1e5c:	20995100 	addscs	r5, r9, r0, lsl #2
    1e60:	20c00000 	sbccs	r0, r0, r0
	^ entropy
    1e64:	00010000 	andeq	r0, r1, r0
}
    1e68:	00000057 	andeq	r0, r0, r7, asr r0
    1e6c:	00000000 	andeq	r0, r0, r0
    1e70:	00200000 	eoreq	r0, r0, r0
    1e74:	00203000 	eoreq	r3, r0, r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e78:	91000200 	mrsls	r0, R8_usr
	word cs = size + hblenb;
    1e7c:	00203478 	eoreq	r3, r0, r8, ror r4
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e80:	00205400 	eoreq	r5, r0, r0, lsl #8
    1e84:	91000200 	mrsls	r0, R8_usr
	p -> length = size;
    1e88:	00206478 	eoreq	r6, r0, r8, ror r4
}
    1e8c:	00207000 	eoreq	r7, r0, r0
	if (p->attributes.b.queued) {
    1e90:	91000200 	mrsls	r0, R8_usr
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e94:	00209478 	eoreq	r9, r0, r8, ror r4
    1e98:	0020c000 	eoreq	ip, r0, r0
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e9c:	91000200 	mrsls	r0, R8_usr
		p->attributes.b.queued = 0;
    1ea0:	00000078 	andeq	r0, r0, r8, ror r0
    1ea4:	00000000 	andeq	r0, r0, r0
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ea8:	00204800 	eoreq	r4, r0, r0, lsl #16
	deq (p);	// Remove from queue
    1eac:	00205800 	eoreq	r5, r0, r0, lsl #16
}
    1eb0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	tfree ((address)p);
    1eb4:	00002064 	andeq	r2, r0, r4, rrx
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1eb8:	000020c0 	andeq	r2, r0, r0, asr #1
    1ebc:	00560001 	subseq	r0, r6, r1
    1ec0:	00000000 	andeq	r0, r0, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ec4:	64000000 	strvs	r0, [r0], #-0
    1ec8:	7e000020 	cdpvc	0, 0, cr0, cr0, cr0, {1}
	if (q_empty (q))
    1ecc:	01000020 	tsteq	r0, r0, lsr #32
    1ed0:	207e5000 	rsbscs	r5, lr, r0
		trigger (q);
    1ed4:	20820000 	addcs	r0, r2, r0
	if (p->attributes.b.urgent) {
    1ed8:	00010000 	andeq	r0, r1, r0
		p->u.bqueue.next = q->next;
    1edc:	00208254 	eoreq	r8, r0, r4, asr r2
		p->u.bqueue.prev = q;
    1ee0:	00208600 	eoreq	r8, r0, r0, lsl #12
		q->next->prev = (qitem_t*) p;
    1ee4:	50000100 	andpl	r0, r0, r0, lsl #2
	p->attributes.b.queued = 1;
    1ee8:	00002086 	andeq	r2, r0, r6, lsl #1
    1eec:	00002094 	muleq	r0, r4, r0
}
    1ef0:	9a540001 	bls	1501efc <__ccfg+0x14e1f54>
		p->u.bqueue.prev = q->prev;
    1ef4:	a2000020 	andge	r0, r0, #32
		q->prev->next = (qitem_t*) p;
    1ef8:	01000020 	tsteq	r0, r0, lsr #32
		q->prev = (qitem_t*) p;
    1efc:	20a25000 	adccs	r5, r2, r0
    1f00:	20c00000 	sbccs	r0, r0, r0
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f04:	00010000 	andeq	r0, r1, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    1f08:	00000054 	andeq	r0, r0, r4, asr r0
	switch (dv) {
    1f0c:	00000000 	andeq	r0, r0, r0
    1f10:	001f9000 	andseq	r9, pc, r0
    1f14:	001fb600 	andseq	fp, pc, r0, lsl #12
    1f18:	50000100 	andpl	r0, r0, r0, lsl #2
			p->attributes.b.urgent = 1;
    1f1c:	00001fba 			; <UNDEFINED> instruction: 0x00001fba
    1f20:	00001fd7 	ldrdeq	r1, [r0], -r7
			verify_ses (p, "dispose ses");
    1f24:	e4500001 	ldrb	r0, [r0], #-1
    1f28:	e600001f 			; <UNDEFINED> instruction: 0xe600001f
    1f2c:	0100001f 	tsteq	r0, pc, lsl r0
    1f30:	00005000 	andeq	r5, r0, r0
    1f34:	00000000 	andeq	r0, r0, r0
			verify_phy (p, "dispose phy");
    1f38:	1f9a0000 	svcne	0x009a0000
    1f3c:	1fe00000 	svcne	0x00e00000
}
    1f40:	00010000 	andeq	r0, r1, r0
			enq (oqueues [p->attributes.b.phys], p);
    1f44:	001fe054 	andseq	lr, pc, r4, asr r0	; <UNPREDICTABLE>
			p->attributes.b.urgent = 1;
    1f48:	001fe300 	andseq	lr, pc, r0, lsl #6
    1f4c:	50000100 	andpl	r0, r0, r0, lsl #2
			verify_phy (p, "dispose phy");
    1f50:	00001fe4 	andeq	r1, r0, r4, ror #31
    1f54:	00001fea 	andeq	r1, r0, sl, ror #31
    1f58:	ea540001 	b	1501f64 <__ccfg+0x14e1fbc>
    1f5c:	ed00001f 	stc	0, cr0, [r0, #-124]	; 0xffffff84
    1f60:	0100001f 	tsteq	r0, pc, lsl r0
    1f64:	00005000 	andeq	r5, r0, r0
			enq (oqueues [p->attributes.b.phys], p);
    1f68:	00000000 	andeq	r0, r0, r0
    1f6c:	1e780000 	cdpne	0, 7, cr0, cr8, cr0, {0}
}
    1f70:	1e7e0000 	cdpne	0, 7, cr0, cr14, cr0, {0}
			rlp (p);
    1f74:	00010000 	andeq	r0, r1, r0
}
    1f78:	00000050 	andeq	r0, r0, r0, asr r0
    1f7c:	00000000 	andeq	r0, r0, r0
    1f80:	001ea800 	andseq	sl, lr, r0, lsl #16
    1f84:	001eb500 	andseq	fp, lr, r0, lsl #10
    1f88:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (b->attributes.b.outgoing) {
    1f94:	00001e94 	muleq	r0, r4, lr
	b = header (p);
    1f98:	00001ea6 	andeq	r1, r0, r6, lsr #29
	if (b->attributes.b.outgoing) {
    1f9c:	00500001 	subseq	r0, r0, r1
		verify_ses (b, "tcv02");
    1fa0:	00000000 	andeq	r0, r0, r0
    1fa4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1fa8:	c600001e 			; <UNDEFINED> instruction: 0xc600001e
    1fac:	0100001e 	tsteq	r0, lr, lsl r0
    1fb0:	1ec65000 	cdpne	0, 12, cr5, cr6, cr0, {0}
		verify_plg (b, tcv_out, "tcv03");
    1fb4:	1ecc0000 	cdpne	0, 12, cr0, cr12, cr0, {0}
    1fb8:	00010000 	andeq	r0, r1, r0
    1fbc:	001ecc55 	andseq	ip, lr, r5, asr ip
    1fc0:	001ed500 	andseq	sp, lr, r0, lsl #10
    1fc4:	50000100 	andpl	r0, r0, r0, lsl #2
    1fc8:	00001ed5 	ldrdeq	r1, [r0], -r5
    1fcc:	00001f04 	andeq	r1, r0, r4, lsl #30
    1fd0:	00550001 	subseq	r0, r5, r1
    1fd4:	00000000 	andeq	r0, r0, r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fd8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
}
    1fdc:	c800001e 	stmdagt	r0, {r1, r2, r3, r4}
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fe0:	0100001e 	tsteq	r0, lr, lsl r0
		rlp (b);
    1fe4:	1ec85100 	polnee	f5, f0, f0
}
    1fe8:	1ecc0000 	cdpne	0, 12, cr0, cr12, cr0, {0}
		rlp (b);
    1fec:	00010000 	andeq	r0, r1, r0
    1ff0:	001ecc54 	andseq	ip, lr, r4, asr ip
    1ff4:	001ed500 	andseq	sp, lr, r0, lsl #10
    1ff8:	51000100 	mrspl	r0, (UNDEF: 16)
    1ffc:	00001ed5 	ldrdeq	r1, [r0], -r5
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2000:	00001f04 	andeq	r1, r0, r4, lsl #30
    2004:	00540001 	subseq	r0, r4, r1
    2008:	00000000 	andeq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    200c:	c4000000 	strgt	r0, [r0], #-0
	va_start (ap, plid);
    2010:	c600001e 			; <UNDEFINED> instruction: 0xc600001e
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2014:	0100001e 	tsteq	r0, lr, lsl r0
    2018:	1ec65000 	cdpne	0, 12, cr5, cr6, cr0, {0}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    201c:	1ecc0000 	cdpne	0, 12, cr0, cr12, cr0, {0}
    2020:	00010000 	andeq	r0, r1, r0
    2024:	00000055 	andeq	r0, r0, r5, asr r0
    2028:	00000000 	andeq	r0, r0, r0
			syserror (ENODEVICE, "tcv04");
    202c:	001ec400 	andseq	ip, lr, r0, lsl #8
		syserror (EMALLOC, "tcv05");
    2030:	001ec800 	andseq	ip, lr, r0, lsl #16
	attp.b.outgoing = 1;
    2034:	51000100 	mrspl	r0, (UNDEF: 16)
    2038:	00001ec8 	andeq	r1, r0, r8, asr #29
    203c:	00001ecc 	andeq	r1, r0, ip, asr #29
    2040:	00540001 	subseq	r0, r4, r1
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2044:	00000000 	andeq	r0, r0, r0
		if (descriptors [fd] == NULL)
    2048:	04000000 	streq	r0, [r0], #-0
    204c:	3400001f 	strcc	r0, [r0], #-31	; 0xffffffe1
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2050:	0100001f 	tsteq	r0, pc, lsl r0
		return ERROR;
    2054:	1f345000 	svcne	0x00345000
}
    2058:	1f400000 	svcne	0x00400000
    205c:	00010000 	andeq	r0, r1, r0
    2060:	001f4054 	andseq	r4, pc, r4, asr r0	; <UNPREDICTABLE>
	s->attpattern.b.session = fd;
    2064:	001f4700 	andseq	r4, pc, r0, lsl #14
    2068:	51000100 	mrspl	r0, (UNDEF: 16)
	descriptors [fd] = s;
    206c:	00001f48 	andeq	r1, r0, r8, asr #30
	q_init (&(s->rqueue));
    2070:	00001f6e 	andeq	r1, r0, lr, ror #30
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2074:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    2078:	7000001f 	andvc	r0, r0, pc, lsl r0
    207c:	0100001f 	tsteq	r0, pc, lsl r0
    2080:	1f705400 	svcne	0x00705400
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2084:	1f770000 	svcne	0x00770000
    2088:	00010000 	andeq	r0, r1, r0
    208c:	001f7850 	andseq	r7, pc, r0, asr r8	; <UNPREDICTABLE>
	descriptors [fd] = s;
    2090:	001f9000 	andseq	r9, pc, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2094:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		syserror (EMALLOC, "tcv05");
    20a0:	00001f04 	andeq	r1, r0, r4, lsl #30
    20a4:	00001f0e 	andeq	r1, r0, lr, lsl #30
    20a8:	00510001 	subseq	r0, r1, r1
    20ac:	00000000 	andeq	r0, r0, r0
    20b0:	50000000 	andpl	r0, r0, r0
    20b4:	6e00001f 	mcrvs	0, 0, r0, cr0, cr15, {0}
    20b8:	0100001f 	tsteq	r0, pc, lsl r0
    20bc:	1f6e5000 	svcne	0x006e5000
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20c0:	1f700000 	svcne	0x00700000
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20c4:	00010000 	andeq	r0, r1, r0
    20c8:	00000054 	andeq	r0, r0, r4, asr r0
    20cc:	00000000 	andeq	r0, r0, r0
	plugins [ord] = pl;
    20d0:	00222000 	eoreq	r2, r2, r0
	return 0;
    20d4:	00222600 	eoreq	r2, r2, r0, lsl #12
		return ERROR;
    20d8:	50000100 	andpl	r0, r0, r0, lsl #2
}
    20dc:	00002226 	andeq	r2, r0, r6, lsr #4
    20e0:	00002232 	andeq	r2, r0, r2, lsr r2
	verify_fds (fd, "tcv10");
    20e4:	00530001 	subseq	r0, r3, r1
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20e8:	00000000 	andeq	r0, r0, r0
	verify_fds (fd, "tcv10");
    20ec:	20000000 	andcs	r0, r0, r0
    20f0:	2a000022 	bcs	2180 <tcv_wnps+0x1c>
    20f4:	01000022 	tsteq	r0, r2, lsr #32
	verify_plg (b, tcv_frm, "tcv11");
    20f8:	222a5100 	eorcs	r5, sl, #0, 2
	b = q_first (rq);
    20fc:	22360000 	eorscs	r0, r6, #0
	if (q_end (b, rq)) {
    2100:	00010000 	andeq	r0, r1, r0
		if (state != WNONE) {
    2104:	00223c50 	eoreq	r3, r2, r0, asr ip
    2108:	00224100 	eoreq	r4, r2, r0, lsl #2
			when (rq, state);
    210c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	deq (b);	// Dequeue the packet ...
    2118:	00002220 	andeq	r2, r0, r0, lsr #4
	p = ((address)(b + 1));
    211c:	0000222e 	andeq	r2, r0, lr, lsr #4
	verify_plg (b, tcv_frm, "tcv11");
    2120:	2e520001 	cdpcs	0, 5, cr0, cr2, cr1, {0}
    2124:	38000022 	stmdacc	r0, {r1, r5}
    2128:	01000022 	tsteq	r0, r2, lsr #32
    212c:	223c5100 	eorscs	r5, ip, #0, 2
    2130:	22410000 	subcs	r0, r1, #0
    2134:	00010000 	andeq	r0, r1, r0
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2138:	00000051 	andeq	r0, r0, r1, asr r0
    213c:	00000000 	andeq	r0, r0, r0
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2140:	00223400 	eoreq	r3, r2, r0, lsl #8
    2144:	00223600 	eoreq	r3, r2, r0, lsl #12
	b->u.pointers.tail =
    2148:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		return NULL;
    2154:	00002234 	andeq	r2, r0, r4, lsr r2
    2158:	00002238 	andeq	r2, r0, r8, lsr r2
    215c:	00510001 	subseq	r0, r1, r1
    2160:	00000000 	andeq	r0, r0, r0
	verify_fds (fd, "tcv16");
    2164:	ac000000 	stcge	0, cr0, [r0], {-0}
								Boolean urg) {
    2168:	b0000022 	andlt	r0, r0, r2, lsr #32
    216c:	01000022 	tsteq	r0, r2, lsr #32
	verify_fds (fd, "tcv16");
    2170:	00005000 	andeq	r5, r0, r0
    2174:	00000000 	andeq	r0, r0, r0
    2178:	22ac0000 	adccs	r0, ip, #0
	verify_pld (s, tcv_frm, "tcv17");
    217c:	22be0000 	adcscs	r0, lr, #0
    2180:	00010000 	andeq	r0, r1, r0
    2184:	0022be51 	eoreq	fp, r2, r1, asr lr
    2188:	0022c200 	eoreq	ip, r2, r0, lsl #4
    218c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2190:	000022c2 	andeq	r2, r0, r2, asr #5
    2194:	000022d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2198:	d2510001 	subsle	r0, r1, #1
	ptrs.head = (word) fd;
    219c:	d4000022 	strle	r0, [r0], #-34	; 0xffffffde
	ptrs.tail = (word) urg;
    21a0:	01000022 	tsteq	r0, r2, lsr #32
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21a4:	22d45600 	sbcscs	r5, r4, #0, 12
    21a8:	22d70000 	sbcscs	r0, r7, #0
		if (state != WNONE) {
    21ac:	00010000 	andeq	r0, r1, r0
    21b0:	0022d751 	eoreq	sp, r2, r1, asr r7
}
    21b4:	0022fa00 	eoreq	pc, r2, r0, lsl #20
			when (eid, state);
    21b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    21bc:	000022fa 	strdeq	r2, [r0], -sl
			release;
    21c0:	000022fd 	strdeq	r2, [r0], -sp
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21c4:	fd510001 	ldc2l	0, cr0, [r1, #-4]
    21c8:	14000022 	strne	r0, [r0], #-34	; 0xffffffde
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    21cc:	01000023 	tsteq	r0, r3, lsr #32
    21d0:	00005600 	andeq	r5, r0, r0, lsl #12
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	22ac0000 	adccs	r0, ip, #0
    21dc:	22c10000 	sbccs	r0, r1, #0
    21e0:	00010000 	andeq	r0, r1, r0
		if (state != WNONE) {
    21e4:	0022c152 	eoreq	ip, r2, r2, asr r1
    21e8:	0022c200 	eoreq	ip, r2, r0, lsl #4
			tmwait (state);
    21ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    21f0:	000022c2 	andeq	r2, r0, r2, asr #5
	b->attributes = s->attpattern;
    21f4:	000022d7 	ldrdeq	r2, [r0], -r7
		b->attributes.b.urgent = 1;
    21f8:	d7520001 	ldrble	r0, [r2, -r1]
    21fc:	fa000022 	blx	228c <tcv_control+0x40>
	b->u.pointers.head = ptrs.head;
    2200:	01000022 	tsteq	r0, r2, lsr #32
	b->u.pointers.tail = length;
    2204:	22fa5500 	rscscs	r5, sl, #0, 10
	return (address) (b + 1);
    2208:	22fd0000 	rscscs	r0, sp, #0
    220c:	00010000 	andeq	r0, r1, r0
    2210:	0022fd52 	eoreq	pc, r2, r2, asr sp	; <UNPREDICTABLE>
    2214:	00231400 	eoreq	r1, r3, r0, lsl #8
    2218:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2224:	000022d8 	ldrdeq	r2, [r0], -r8
    2228:	000022de 	ldrdeq	r2, [r0], -lr
	verify_fph (phy, "tcv23");
    222c:	e0500001 	subs	r0, r0, r1
    2230:	f3000022 	vhadd.u8	d0, d0, d18
    2234:	01000022 	tsteq	r0, r2, lsr #32
    2238:	22f35000 	rscscs	r5, r3, #0
}
    223c:	22fa0000 	rscscs	r0, sl, #0
	return (physical [phy]) (opt, arg);
    2240:	00010000 	andeq	r0, r1, r0
    2244:	0022fe54 	eoreq	pc, r2, r4, asr lr	; <UNPREDICTABLE>
    2248:	00230400 	eoreq	r0, r3, r0, lsl #8
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    224c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (opt == PHYSOPT_PLUGINFO) {
    2258:	000022ba 			; <UNDEFINED> instruction: 0x000022ba
			if (fd >= TCV_MAX_PLUGS)
    225c:	000022be 			; <UNDEFINED> instruction: 0x000022be
			if ((p = plugins [fd]) == NULL)
    2260:	00510001 	subseq	r0, r1, r1
    2264:	00000000 	andeq	r0, r0, r0
}
    2268:	c4000000 	strgt	r0, [r0], #-0
		if (fd >= TCV_MAX_PHYS)
    226c:	dd000024 	stcle	0, cr0, [r0, #-144]	; 0xffffff70
		return physinfo [fd];
    2270:	01000024 	tsteq	r0, r4, lsr #32
    2274:	24e85200 	strbtcs	r5, [r8], #512	; 0x200
	verify_fds (fd, "tcv22");
    2278:	24fc0000 	ldrbtcs	r0, [ip], #0
    227c:	00010000 	andeq	r0, r1, r0
    2280:	00000052 	andeq	r0, r0, r2, asr r0
    2284:	00000000 	andeq	r0, r0, r0
    2288:	0024c400 	eoreq	ip, r4, r0, lsl #8
}
    228c:	0024dd00 	eoreq	sp, r4, r0, lsl #26
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2290:	53000100 	movwpl	r0, #256	; 0x100
    2294:	000024ec 	andeq	r2, r0, ip, ror #9
			return 0;
    2298:	000024fc 	strdeq	r2, [r0], -ip
    229c:	00530001 	subseq	r0, r3, r1
	...
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22ac:	01000000 	mrseq	r0, (UNDEF: 0)
    22b0:	00005000 	andeq	r5, r0, r0
	if (dsp != TCV_DSP_PASS) {
    22b4:	00000000 	andeq	r0, r0, r0
		if (ses == NONE)
    22b8:	00010000 	andeq	r0, r1, r0
			syserror (EREQPAR, "tcv26");
    22bc:	00000050 	andeq	r0, r0, r0, asr r0
	...
		verify_fds (ses, "tcv27");
    22cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if ((p = apb (size)) != NULL) {
    22d8:	00510001 	subseq	r0, r1, r1
	...
			p->attributes = descriptors [ses] -> attpattern;
    22e8:	01000000 	mrseq	r0, (UNDEF: 0)
			p->attributes.b.outgoing = 0;
    22ec:	00005200 	andeq	r5, r0, r0, lsl #4
			dispose (p, dsp);
    22f0:	00000000 	andeq	r0, r0, r0
			return (address)(p + 1);
    22f4:	00010000 	andeq	r0, r1, r0
    22f8:	00000052 	andeq	r0, r0, r2, asr r0
	...
		return (address)(p + 1);
    2308:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    231c:	00500001 	subseq	r0, r0, r1
	...
	physical [phy] = ps;
    232c:	01000000 	mrseq	r0, (UNDEF: 0)
	physinfo [phy] = info;
    2330:	00005000 	andeq	r5, r0, r0
    2334:	00000000 	andeq	r0, r0, r0
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2338:	00050000 	andeq	r0, r5, r0
    233c:	00000003 	andeq	r0, r0, r3
	...
		syserror (EMALLOC, "tcv29");
    2348:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    2354:	00030005 	andeq	r0, r3, r5
	...
	verify_fph (phy, "tcv30");
    2368:	01000000 	mrseq	r0, (UNDEF: 0)
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    236c:	00005000 	andeq	r5, r0, r0
    2370:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv30");
    2374:	00010000 	andeq	r0, r1, r0
    2378:	00000050 	andeq	r0, r0, r0, asr r0
    237c:	00000000 	andeq	r0, r0, r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2380:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    238c:	00500001 	subseq	r0, r0, r1
	...
}
    239c:	01000000 	mrseq	r0, (UNDEF: 0)
    23a0:	00005000 	andeq	r5, r0, r0
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23b0:	00010000 	andeq	r0, r1, r0
    23b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23d8:	00510001 	subseq	r0, r1, r1
    23dc:	00000000 	andeq	r0, r0, r0
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23e0:	01000000 	mrseq	r0, (UNDEF: 0)
    23e4:	00005600 	andeq	r5, r0, r0, lsl #12
	...
	return 1;
    23f4:	00010000 	andeq	r0, r1, r0
    23f8:	00000052 	andeq	r0, r0, r2, asr r0
	...
	verify_fph (phy, "tcv32");
    2408:	53000100 	movwpl	r0, #256	; 0x100
	...
	b = q_first (oq);
    241c:	00540001 	subseq	r0, r4, r1
	if (q_end (b, oq)) {
    2420:	00000000 	andeq	r0, r0, r0
	*len = b->length;
    2424:	01000000 	mrseq	r0, (UNDEF: 0)
	deq (b);	// Dequeue the packet ...
    2428:	00005400 	andeq	r5, r0, r0, lsl #8
}
    242c:	00000000 	andeq	r0, r0, r0
		return NULL;
    2430:	00010000 	andeq	r0, r1, r0
    2434:	00000054 	andeq	r0, r0, r4, asr r0
	...
	verify_fph (phy, "tcv33");
    2444:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2450:	00500001 	subseq	r0, r0, r1
	...
		return NULL;
    2460:	01000000 	mrseq	r0, (UNDEF: 0)
	return (address)(b + 1);
    2464:	00005100 	andeq	r5, r0, r0, lsl #2
}
    2468:	00000000 	andeq	r0, r0, r0
    246c:	00010000 	andeq	r0, r1, r0
    2470:	00000056 	andeq	r0, r0, r6, asr r0
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2474:	00000000 	andeq	r0, r0, r0
	verify_plg (b, tcv_xmt, "tcv34");
    2478:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    248c:	00520001 	subseq	r0, r2, r1
    2490:	00000000 	andeq	r0, r0, r0
    2494:	01000000 	mrseq	r0, (UNDEF: 0)
    2498:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	dispose (b, plugins [b->attributes.b.plugin] ->
    24a8:	00010000 	andeq	r0, r1, r0
    24ac:	00000054 	andeq	r0, r0, r4, asr r0
	...
    SetupTrimDevice();
    24bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    __asm("    ldr     r0, =_bss\n"
    24d0:	00500001 	subseq	r0, r0, r1
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	01000000 	mrseq	r0, (UNDEF: 0)
   main();
    24dc:	00005500 	andeq	r5, r0, r0, lsl #10
    FaultISR();
    24e0:	00000000 	andeq	r0, r0, r0
        *pui32Dest++ = *pui32Src++;
    24e4:	00010000 	andeq	r0, r1, r0
    24e8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    24f8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
static byte get_byte () {
    2504:	00560001 	subseq	r0, r6, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2508:	00000000 	andeq	r0, r0, r0
    250c:	01000000 	mrseq	r0, (UNDEF: 0)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2510:	00005600 	andeq	r5, r0, r0, lsl #12
    2514:	00000000 	andeq	r0, r0, r0
		if (ee_inp)
    2518:	00010000 	andeq	r0, r1, r0
			b |= 1;
    251c:	00000051 	andeq	r0, r0, r1, asr r0
	...
}
    252c:	52000100 	andpl	r0, r0, #0, 2
	...
static void put_byte (byte b) {
    2538:	00520001 	subseq	r0, r2, r1
    253c:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2540:	80000000 	andhi	r0, r0, r0
    2544:	90000025 	andls	r0, r0, r5, lsr #32
		if (b & 0x80)
    2548:	01000025 	tsteq	r0, r5, lsr #32
    254c:	00005000 	andeq	r5, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2550:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < 8; i++) {
    2554:	25800000 	strcs	r0, [r0]
		b <<= 1;
    2558:	25900000 	ldrcs	r0, [r0]
	for (i = 0; i < 8; i++) {
    255c:	00010000 	andeq	r0, r1, r0
}
    2560:	00000051 	andeq	r0, r0, r1, asr r0
    2564:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2568:	0025a200 	eoreq	sl, r5, r0, lsl #4
    256c:	0025a600 	eoreq	sl, r5, r0, lsl #12
	put_byte (cmd);
    2570:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    257c:	00002568 	andeq	r2, r0, r8, ror #10
static void wwait (word st, word del) {
    2580:	00002573 	andeq	r2, r0, r3, ror r5
    2584:	00500001 	subseq	r0, r0, r1
    2588:	00000000 	andeq	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    258c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2590:	54000025 	strpl	r0, [r0], #-37	; 0xffffffdb
    2594:	01000025 	tsteq	r0, r5, lsr #32
    2598:	255c5000 	ldrbcs	r5, [ip, #-0]
	put_byte (CMD_RDSR);
    259c:	25680000 	strbcs	r0, [r8, #-0]!
	r = get_byte ();
    25a0:	00010000 	andeq	r0, r1, r0
    25a4:	00000050 	andeq	r0, r0, r0, asr r0
	while (dopen && (rdsr () & 1)) {
    25a8:	00000000 	andeq	r0, r0, r0
}
    25ac:	00251400 	eoreq	r1, r5, r0, lsl #8
		if (st == WNONE)
    25b0:	00251800 	eoreq	r1, r5, r0, lsl #16
    25b4:	50000100 	andpl	r0, r0, r0, lsl #2
			mdelay (1);
    25b8:	0000251c 	andeq	r2, r0, ip, lsl r5
    25bc:	00002538 	andeq	r2, r0, r8, lsr r5
			delay (del, st);
    25c0:	00500001 	subseq	r0, r0, r1
    25c4:	00000000 	andeq	r0, r0, r0
			release;
    25c8:	60000000 	andvs	r0, r0, r0
    25cc:	66000026 	strvs	r0, [r0], -r6, lsr #32
    25d0:	01000026 	tsteq	r0, r6, lsr #32
static void ready () {
    25d4:	00005000 	andeq	r5, r0, r0
	if (dopen) {
    25d8:	00000000 	andeq	r0, r0, r0
		wwait (WNONE, 1);
    25dc:	26600000 	strbtcs	r0, [r0], -r0
    25e0:	266b0000 	strbtcs	r0, [fp], -r0
    25e4:	00010000 	andeq	r0, r1, r0
	dstat = 0;
    25e8:	00266b51 	eoreq	r6, r6, r1, asr fp
}
    25ec:	0026c600 	eoreq	ip, r6, r0, lsl #12
    25f0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    25fc:	0000266c 	andeq	r2, r0, ip, ror #12
	udelay (1);
    2600:	00002673 	andeq	r2, r0, r3, ror r6
		dopen = DOPEN_TEMP;
    2604:	78500001 	ldmdavc	r0, {r0}^
    2608:	7e000026 	cdpvc	0, 0, cr0, cr0, cr6, {1}
    260c:	01000026 	tsteq	r0, r6, lsr #32
    2610:	26845000 	strcs	r5, [r4], r0
static void cclose () {
    2614:	26960000 	ldrcs	r0, [r6], r0
	if (dopen == DOPEN_TEMP) {
    2618:	00010000 	andeq	r0, r1, r0
    261c:	00269655 	eoreq	r9, r6, r5, asr r6
		wwait (WNONE, 1);
    2620:	00269a00 	eoreq	r9, r6, r0, lsl #20
    2624:	50000100 	andpl	r0, r0, r0, lsl #2
	cmd_0 (CMD_DP);
    2628:	0000269a 	muleq	r0, sl, r6
    262c:	000026c6 	andeq	r2, r0, r6, asr #13
		dopen = 0;
    2630:	00550001 	subseq	r0, r5, r1
}
    2634:	00000000 	andeq	r0, r0, r0
word ee_open () {
    2638:	8a000000 	bhi	2640 <ee_open+0x8>
	ready ();
    263c:	8e000026 	cdphi	0, 0, cr0, cr0, cr6, {1}
	dopen = DOPEN_PERM;
    2640:	01000026 	tsteq	r0, r6, lsr #32
    2644:	268e5000 	strcs	r5, [lr], r0
}
    2648:	26960000 	ldrcs	r0, [r6], r0
	if (dopen) {
    264c:	00010000 	andeq	r0, r1, r0
    2650:	00269c57 	eoreq	r9, r6, r7, asr ip
		dopen = DOPEN_TEMP;
    2654:	0026a500 	eoreq	sl, r6, r0, lsl #10
		cclose ();
    2658:	50000100 	andpl	r0, r0, r0, lsl #2
}
    265c:	000026a5 	andeq	r2, r0, r5, lsr #13
int ser_out (word st, const char *m) {
    2660:	000026b8 			; <UNDEFINED> instruction: 0x000026b8
	if ((prcs = running (__outserial)) != 0) {
    2664:	b8570001 	ldmdalt	r7, {r0}^
    2668:	bf000026 	svclt	0x00000026
    266c:	01000026 	tsteq	r0, r6, lsr #32
		join (prcs, st);
    2670:	26bf5000 	ldrtcs	r5, [pc], r0
		release;
    2674:	26c60000 	strbcs	r0, [r6], r0
	if (*m)
    2678:	00010000 	andeq	r0, r1, r0
		prcs = strlen (m) +1;
    267c:	00000057 	andeq	r0, r0, r7, asr r0
    2680:	00000000 	andeq	r0, r0, r0
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2684:	0026cc00 	eoreq	ip, r6, r0, lsl #24
    2688:	0026da00 	eoreq	sp, r6, r0, lsl #20
    268c:	50000100 	andpl	r0, r0, r0, lsl #2
		umwait (st);
    2690:	00002736 	andeq	r2, r0, r6, lsr r7
    2694:	00002744 	andeq	r2, r0, r4, asr #14
		prcs =  m [1] + 3;
    2698:	00500001 	subseq	r0, r0, r1
	if (*m)
    269c:	00000000 	andeq	r0, r0, r0
		strcpy (buf, m);
    26a0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    26a4:	e1000026 	tst	r0, r6, lsr #32
	if (runstrand (__outserial, buf) == 0) {
    26a8:	01000026 	tsteq	r0, r6, lsr #32
    26ac:	26e15100 	strbtcs	r5, [r1], r0, lsl #2
		ufree (buf);
    26b0:	27000000 	strcs	r0, [r0, -r0]
    26b4:	00010000 	andeq	r0, r1, r0
		memcpy (buf, m, prcs);
    26b8:	00270057 	eoreq	r0, r7, r7, asr r0
    26bc:	00270800 	eoreq	r0, r7, r0, lsl #16
    26c0:	51000100 	mrspl	r0, (UNDEF: 16)
}
    26c4:	00002708 	andeq	r2, r0, r8, lsl #14
    26c8:	0000272e 	andeq	r2, r0, lr, lsr #14
int ser_in (word st, char *buf, int len) {
    26cc:	2e570001 	cdpcs	0, 5, cr0, cr7, cr1, {0}
    26d0:	31000027 	tstcc	r0, r7, lsr #32
	if (len == 0)
    26d4:	01000027 	tsteq	r0, r7, lsr #32
	if (__inpline == NULL) {
    26d8:	27315100 	ldrcs	r5, [r1, -r0, lsl #2]!
		if ((prcs = running (__inserial)) == 0) {
    26dc:	27360000 	ldrcs	r0, [r6, -r0]!
    26e0:	00010000 	andeq	r0, r1, r0
			prcs = runthread (__inserial);
    26e4:	00273657 	eoreq	r3, r7, r7, asr r6
    26e8:	00274400 	eoreq	r4, r7, r0, lsl #8
			if (prcs == 0) {
    26ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		join (prcs, st);
    26f8:	000026cc 	andeq	r2, r0, ip, asr #13
    26fc:	000026e1 	andeq	r2, r0, r1, ror #13
	if (*__inpline == NULL) // bin cmd
    2700:	e1520001 	cmp	r2, r1
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2704:	00000026 	andeq	r0, r0, r6, lsr #32
	if (prcs >= len)
    2708:	01000027 	tsteq	r0, r7, lsr #32
		prcs = len-1;
    270c:	27005500 	strcs	r5, [r0, -r0, lsl #10]
	memcpy (buf, __inpline, prcs);
    2710:	27080000 	strcs	r0, [r8, -r0]
    2714:	00010000 	andeq	r0, r1, r0
    2718:	00270852 	eoreq	r0, r7, r2, asr r8
	ufree (__inpline);
    271c:	00272e00 	eoreq	r2, r7, r0, lsl #28
	__inpline = NULL;
    2720:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	if (*buf) // if it's NULL, it's a bin cmd
    2724:	0000272e 	andeq	r2, r0, lr, lsr #14
		buf [prcs] = '\0';
    2728:	00002731 	andeq	r2, r0, r1, lsr r7
}
    272c:	31520001 	cmpcc	r2, r1
		prcs = strlen (__inpline);
    2730:	36000027 	strcc	r0, [r0], -r7, lsr #32
    2734:	01000027 	tsteq	r0, r7, lsr #32
		return 0;
    2738:	27365500 	ldrcs	r5, [r6, -r0, lsl #10]!
    273c:	27440000 	strbcs	r0, [r4, -r0]
    2740:	00010000 	andeq	r0, r1, r0
int ser_outf (word st, const char *m, ...) {
    2744:	00000052 	andeq	r0, r0, r2, asr r0
    2748:	00000000 	andeq	r0, r0, r0
	if ((prcs = running (__outserial)) != 0) {
    274c:	0026e200 	eoreq	lr, r6, r0, lsl #4
    2750:	0026e800 	eoreq	lr, r6, r0, lsl #16
		join (prcs, st);
    2754:	50000100 	andpl	r0, r0, r0, lsl #2
    2758:	000026e8 	andeq	r2, r0, r8, ror #13
		release;
    275c:	000026eb 	andeq	r2, r0, fp, ror #13
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2760:	ec510001 	mrrc	0, 0, r0, r1, cr1
    2764:	f0000026 			; <UNDEFINED> instruction: 0xf0000026
    2768:	01000026 	tsteq	r0, r6, lsr #32
		umwait (st);
    276c:	26f85000 	ldrbtcs	r5, [r8], r0
    2770:	26fd0000 	ldrbtcs	r0, [sp], r0
	if (runstrand (__outserial, buf) == 0) {
    2774:	00010000 	andeq	r0, r1, r0
    2778:	00270850 	eoreq	r0, r7, r0, asr r8
    277c:	00272a00 	eoreq	r2, r7, r0, lsl #20
		ufree (buf);
    2780:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		npwait (st);
    2784:	00002734 	andeq	r2, r0, r4, lsr r7
}
    2788:	00002736 	andeq	r2, r0, r6, lsr r7
    278c:	00500001 	subseq	r0, r0, r1
    2790:	00000000 	andeq	r0, r0, r0
    2794:	44000000 	strmi	r0, [r0], #-0
int ser_inf (word st, const char *fmt, ...) {
    2798:	4c000027 	stcmi	0, cr0, [r0], {39}	; 0x27
    279c:	01000027 	tsteq	r0, r7, lsr #32
	if (fmt == NULL)
    27a0:	00005000 	andeq	r5, r0, r0
	if (__inpline == NULL) {
    27a4:	00000000 	andeq	r0, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    27a8:	27500000 	ldrbcs	r0, [r0, -r0]
    27ac:	27590000 	ldrbcs	r0, [r9, -r0]
			prcs = runthread (__inserial);
    27b0:	00010000 	andeq	r0, r1, r0
    27b4:	00275950 	eoreq	r5, r7, r0, asr r9
			if (prcs == 0) {
    27b8:	00275e00 	eoreq	r5, r7, r0, lsl #28
				npwait (st);
    27bc:	56000100 	strpl	r0, [r0], -r0, lsl #2
		release;
    27c0:	0000275e 	andeq	r2, r0, lr, asr r7
		join (prcs, st);
    27c4:	00002767 	andeq	r2, r0, r7, ror #14
    27c8:	67500001 	ldrbvs	r0, [r0, -r1]
	va_start (ap, fmt);
    27cc:	8e000027 	cdphi	0, 0, cr0, cr0, cr7, {1}
	prcs = vscan (__inpline, fmt, ap);
    27d0:	01000027 	tsteq	r0, r7, lsr #32
    27d4:	278e5600 	strcs	r5, [lr, r0, lsl #12]
	ufree (__inpline);
    27d8:	27980000 	ldrcs	r0, [r8, r0]
	__inpline = NULL;
    27dc:	00010000 	andeq	r0, r1, r0
}
    27e0:	00000050 	andeq	r0, r0, r0, asr r0
    27e4:	00000000 	andeq	r0, r0, r0
    27e8:	00276800 	eoreq	r6, r7, r0, lsl #16
		return 0;
    27ec:	00276c00 	eoreq	r6, r7, r0, lsl #24
    27f0:	50000100 	andpl	r0, r0, r0, lsl #2
    27f4:	0000276c 	andeq	r2, r0, ip, ror #14
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27f8:	00002774 	andeq	r2, r0, r4, ror r7
    27fc:	74550001 	ldrbvc	r0, [r5], #-1
    2800:	78000027 	stmdavc	r0, {r0, r1, r2, r5}
	RF_cmdFs.frequency = 
    2804:	01000027 	tsteq	r0, r7, lsr #32
}
    2808:	27785000 	ldrbcs	r5, [r8, -r0]!
    280c:	278e0000 	strcs	r0, [lr, r0]
    2810:	00010000 	andeq	r0, r1, r0
    2814:	00000055 	andeq	r0, r0, r5, asr r0
static int option (int opt, address val) {
    2818:	00000000 	andeq	r0, r0, r0
    281c:	00279800 	eoreq	r9, r7, r0, lsl #16
    2820:	0027a600 	eoreq	sl, r7, r0, lsl #12
    2824:	50000100 	andpl	r0, r0, r0, lsl #2
    2828:	000027ec 	andeq	r2, r0, ip, ror #15
    282c:	000027f8 	strdeq	r2, [r0], -r8
    2830:	00500001 	subseq	r0, r0, r1
    2834:	00000000 	andeq	r0, r0, r0
    2838:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    283c:	b4000027 	strlt	r0, [r0], #-39	; 0xffffffd9
    2840:	01000027 	tsteq	r0, r7, lsr #32
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2844:	27b45000 	ldrcs	r5, [r4, r0]!
    2848:	27b70000 	ldrcs	r0, [r7, r0]!
			goto RVal;
    284c:	00010000 	andeq	r0, r1, r0
			_BIS (dstate, DSTATE_RXON);
    2850:	0027b851 	eoreq	fp, r7, r1, asr r8
    2854:	0027bc00 	eoreq	fp, r7, r0, lsl #24
	int ret = 0;
    2858:	50000100 	andpl	r0, r0, r0, lsl #2
			p_trigger (drvprcs, qevent);
    285c:	000027c4 	andeq	r2, r0, r4, asr #15
    2860:	000027c9 	andeq	r2, r0, r9, asr #15
    2864:	d6500001 	ldrble	r0, [r0], -r1
    2868:	d8000027 	stmdale	r0, {r0, r1, r2, r5}
    286c:	01000027 	tsteq	r0, r7, lsr #32
    2870:	27d85000 	ldrbcs	r5, [r8, r0]
    2874:	27e00000 	strbcs	r0, [r0, r0]!
    2878:	00010000 	andeq	r0, r1, r0
    287c:	00000054 	andeq	r0, r0, r4, asr r0
    2880:	00000000 	andeq	r0, r0, r0
}
    2884:	002f5800 	eoreq	r5, pc, r0, lsl #16
			_BIC (dstate, DSTATE_RXON);
    2888:	002f6600 	eoreq	r6, pc, r0, lsl #12
    288c:	50000100 	andpl	r0, r0, r0, lsl #2
			statid = (val == NULL) ? 0 : *val;
    2890:	00002f66 	andeq	r2, r0, r6, ror #30
    2894:	00002f6c 	andeq	r2, r0, ip, ror #30
	int ret = 0;
    2898:	6c560001 	mrrcvs	0, 0, r0, r6, cr1
			ret = (int) statid;
    289c:	7600002f 	strvc	r0, [r0], -pc, lsr #32
	if (val != NULL)
    28a0:	0100002f 	tsteq	r0, pc, lsr #32
		*val = ret;
    28a4:	2f765000 	svccs	0x00765000
			ret = rbuffl + 2;
    28a8:	2f7a0000 	svccs	0x007a0000
    28ac:	00010000 	andeq	r0, r1, r0
			if (val != NULL) {
    28b0:	002f7a56 	eoreq	r7, pc, r6, asr sl	; <UNPREDICTABLE>
				memcpy (val, &rxstat,
    28b4:	002f8a00 	eoreq	r8, pc, r0, lsl #20
    28b8:	50000100 	andpl	r0, r0, r0, lsl #2
				memset (&rxstat, 0, 
    28bc:	00002f8a 	andeq	r2, r0, sl, lsl #31
    28c0:	00003082 	andeq	r3, r0, r2, lsl #1
			if (val == NULL)
    28c4:	00560001 	subseq	r0, r6, r1
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    28c8:	00000000 	andeq	r0, r0, r0
    28cc:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
				utimer_set (bckf_timer, *val);
    28d0:	6800002f 	stmdavs	r0, {r0, r1, r2, r3, r5}
    28d4:	0100002f 	tsteq	r0, pc, lsr #32
    28d8:	2f6c5100 	svccs	0x006c5100
			for (ret = 0; ret < 8; ret++)
    28dc:	2f780000 	svccs	0x00780000
				if (RF_cmdPropRadioDivSetup.txPower
    28e0:	00010000 	andeq	r0, r1, r0
					== patable [ret])
    28e4:	002f7a51 	eoreq	r7, pc, r1, asr sl	; <UNPREDICTABLE>
				if (RF_cmdPropRadioDivSetup.txPower
    28e8:	002f8a00 	eoreq	r8, pc, r0, lsl #20
			for (ret = 0; ret < 8; ret++)
    28ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28f8:	00002fc0 	andeq	r2, r0, r0, asr #31
    28fc:	00002fd4 	ldrdeq	r2, [r0], -r4
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2900:	d4550001 	ldrble	r0, [r5], #-1
    2904:	da00002f 	ble	29c8 <issue_cmd+0x20>
			_BIS (dstate, DSTATE_IRST);
    2908:	0200002f 	andeq	r0, r0, #47	; 0x2f
    290c:	00007000 	andeq	r7, r0, r0
    2910:	00000000 	andeq	r0, r0, r0
			ret = (int) channel;
    2914:	8a000000 	bhi	291c <option+0x104>
			goto RVal;
    2918:	9300002f 	movwls	r0, #47	; 0x2f
				(*val > 7) ? 7 : *val;
    291c:	0100002f 	tsteq	r0, pc, lsr #32
    2920:	2f935300 	svccs	0x00935300
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2924:	2ff60000 	svccs	0x00f60000
    2928:	00010000 	andeq	r0, r1, r0
			plugch ();
    292c:	0030285b 	eorseq	r2, r0, fp, asr r8
			_BIS (dstate, DSTATE_IRST);
    2930:	00302c00 	eorseq	r2, r0, r0, lsl #24
    2934:	5b000100 	blpl	2d3c <cc1350_driver+0x44>
	...
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2940:	00002f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    2944:	00002f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    2948:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
    294c:	c400002f 	strgt	r0, [r0], #-47	; 0xffffffd1
    2950:	0100002f 	tsteq	r0, pc, lsr #32
    2954:	2fc45000 	svccs	0x00c45000
    2958:	2fc70000 	svccs	0x00c70000
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    295c:	00010000 	andeq	r0, r1, r0
    2960:	00302853 	eorseq	r2, r0, r3, asr r8
    2964:	00302c00 	eorseq	r2, r0, r0, lsl #24
    2968:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			syserror (EREQPAR, "cc13 op");
    2974:	00002818 	andeq	r2, r0, r8, lsl r8
    2978:	00002846 	andeq	r2, r0, r6, asr #16
    297c:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
    2980:	58000028 	stmdapl	r0, {r3, r5}
    2984:	01000028 	tsteq	r0, r8, lsr #32
    2988:	28865000 	stmcs	r6, {ip, lr}
    298c:	28980000 	ldmcs	r8, {}	; <UNPREDICTABLE>
    2990:	00010000 	andeq	r0, r1, r0
    2994:	00289c50 	eoreq	r9, r8, r0, asr ip
    2998:	0028a000 	eoreq	sl, r8, r0
    299c:	50000100 	andpl	r0, r0, r0, lsl #2
    29a0:	000028a8 	andeq	r2, r0, r8, lsr #17
    29a4:	000028ac 	andeq	r2, r0, ip, lsr #17
static void issue_cmd (lword cmd) {
    29a8:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    29ac:	b4000028 	strlt	r0, [r0], #-40	; 0xffffffd8
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29b0:	01000028 	tsteq	r0, r8, lsr #32
    29b4:	28bc5000 	ldmcs	ip!, {ip, lr}
    29b8:	28be0000 	ldmcs	lr!, {}	; <UNPREDICTABLE>
		if (res != 0x86)
    29bc:	00010000 	andeq	r0, r1, r0
			syserror (EHARDWARE, "hang ic0");
    29c0:	0028c450 	eoreq	ip, r8, r0, asr r4
    29c4:	0028c900 	eoreq	ip, r8, r0, lsl #18
		if (cnt-- == 0) {
    29c8:	50000100 	andpl	r0, r0, r0, lsl #2
			diag ("HUP %lx %lx", cmd, res);
    29cc:	000028d8 	ldrdeq	r2, [r0], -r8
    29d0:	000028de 	ldrdeq	r2, [r0], -lr
			syserror (EHARDWARE, "hang ic0");
    29d4:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
		udelay (1);
    29d8:	f8000028 			; <UNDEFINED> instruction: 0xf8000028
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29dc:	01000028 	tsteq	r0, r8, lsr #32
}
    29e0:	29145000 	ldmdbcs	r4, {ip, lr}
    29e4:	29180000 	ldmdbcs	r8, {}	; <UNPREDICTABLE>
    29e8:	00010000 	andeq	r0, r1, r0
    29ec:	00291a50 	eoreq	r1, r9, r0, asr sl
static void rx_de () {
    29f0:	00296c00 	eoreq	r6, r9, r0, lsl #24
	if ((dstate & DSTATE_RXAC) == 0)
    29f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	_BIC (dstate, DSTATE_RXAC);
    2a00:	00002818 	andeq	r2, r0, r8, lsl r8
    2a04:	00002858 	andeq	r2, r0, r8, asr r8
}
    2a08:	86510001 	ldrbhi	r0, [r1], -r1
    2a0c:	98000028 	stmdals	r0, {r3, r5}
    2a10:	01000028 	tsteq	r0, r8, lsr #32
static void rf_off () {
    2a14:	289c5100 	ldmcs	ip, {r8, ip, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2a18:	28a00000 	stmiacs	r0!, {}	; <UNPREDICTABLE>
    2a1c:	00010000 	andeq	r0, r1, r0
	IntDisable (INT_RFC_CPE_0);
    2a20:	0028a051 	eoreq	sl, r8, r1, asr r0
    2a24:	0028a800 	eoreq	sl, r8, r0, lsl #16
    2a28:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	RFCAdi3VcoLdoVoltageMode (false);
    2a2c:	000028a8 	andeq	r2, r0, r8, lsr #17
	RFCSynthPowerDown ();
    2a30:	000028b6 			; <UNDEFINED> instruction: 0x000028b6
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a34:	b6510001 	ldrblt	r0, [r1], -r1
    2a38:	bc000028 	stclt	0, cr0, [r0], {40}	; 0x28
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a3c:	01000028 	tsteq	r0, r8, lsr #32
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a40:	28bc5400 	ldmcs	ip!, {sl, ip, lr}
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a44:	28c10000 	stmiacs	r1, {}^	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a48:	00010000 	andeq	r0, r1, r0
    2a4c:	0028c151 	eoreq	ip, r8, r1, asr r1
    2a50:	0028c400 	eoreq	ip, r8, r0, lsl #8
	_BIC (dstate, DSTATE_RFON);
    2a54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2a58:	000028c4 	andeq	r2, r0, r4, asr #17
}
    2a5c:	000028c9 	andeq	r2, r0, r9, asr #17
    2a60:	c9510001 	ldmdbgt	r1, {r0}^
    2a64:	d8000028 	stmdale	r0, {r3, r5}
    2a68:	01000028 	tsteq	r0, r8, lsr #32
    2a6c:	28d85400 	ldmcs	r8, {sl, ip, lr}^
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a70:	28da0000 	ldmcs	sl, {}^	; <UNPREDICTABLE>
    2a74:	00010000 	andeq	r0, r1, r0
    2a78:	0028da51 	eoreq	sp, r8, r1, asr sl
		if (cmd->status == tstat)
    2a7c:	0028dc00 	eoreq	sp, r8, r0, lsl #24
		if (timeout-- == 0) {
    2a80:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a84:	000028dc 	ldrdeq	r2, [r0], -ip
    2a88:	000028e4 	andeq	r2, r0, r4, ror #17
    2a8c:	e4510001 	ldrb	r0, [r1], #-1
			syserror (EHARDWARE, "rt2");
    2a90:	f4000028 	vst4.8	{d0-d3}, [r0 :128], r8
    2a94:	01000028 	tsteq	r0, r8, lsr #32
		udelay (1);
    2a98:	28f45400 	ldmcs	r4!, {sl, ip, lr}^
		if (cmd->status == tstat)
    2a9c:	296e0000 	stmdbcs	lr!, {}^	; <UNPREDICTABLE>
}
    2aa0:	00010000 	andeq	r0, r1, r0
    2aa4:	00296e51 	eoreq	r6, r9, r1, asr lr
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2aa8:	0029a800 	eoreq	sl, r9, r0, lsl #16
    2aac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	OSCHF_TurnOnXosc();
    2ab8:	0000284c 	andeq	r2, r0, ip, asr #16
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2abc:	0000284e 	andeq	r2, r0, lr, asr #16
    2ac0:	5a500001 	bpl	1402acc <__ccfg+0x13e2b24>
    2ac4:	84000028 	strhi	r0, [r0], #-40	; 0xffffffd8
    2ac8:	01000028 	tsteq	r0, r8, lsr #32
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2acc:	28a05000 	stmiacs	r0!, {ip, lr}
    2ad0:	28a80000 	stmiacs	r8!, {}	; <UNPREDICTABLE>
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2ad4:	00010000 	andeq	r0, r1, r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2ad8:	0028e450 	eoreq	lr, r8, r0, asr r4
	issue_cmd (
    2adc:	0028f400 	eoreq	pc, r8, r0, lsl #8
    2ae0:	50000100 	andpl	r0, r0, r0, lsl #2
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ae4:	000028fe 	strdeq	r2, [r0], -lr
    2ae8:	00002914 	andeq	r2, r0, r4, lsl r9
    2aec:	18500001 	ldmdane	r0, {r0}^
   pPatchTab[80] = 0;
    2af0:	1a000029 	bne	2b9c <rf_on.part.0+0xf4>
   } while (--nIterations);
    2af4:	01000029 	tsteq	r0, r9, lsr #32
   pPatchTab[53] = 2;
    2af8:	00005000 	andeq	r5, r0, r0
    2afc:	00000000 	andeq	r0, r0, r0
   pPatchTab[55] = 3;
    2b00:	286e0000 	stmdacs	lr!, {}^	; <UNPREDICTABLE>
   pPatchTab[110] = 4;
    2b04:	28780000 	ldmdacs	r8!, {}^	; <UNPREDICTABLE>
   pPatchTab[107] = 5;
    2b08:	00010000 	andeq	r0, r1, r0
   pPatchTab[65] = 6;
    2b0c:	00000053 	andeq	r0, r0, r3, asr r0
    2b10:	00000000 	andeq	r0, r0, r0
   pPatchTab[57] = 1;
    2b14:	002cf800 	eoreq	pc, ip, r0, lsl #16
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b18:	002d0c00 	eoreq	r0, sp, r0, lsl #24
   const uint32_t *pS = patchGenfskRfe;
    2b1c:	50000100 	andpl	r0, r0, r0, lsl #2
      t2 = *pS++;
    2b20:	00002e80 	andeq	r2, r0, r0, lsl #29
      t4 = *pS++;
    2b24:	00002e98 	muleq	r0, r8, lr
      t6 = *pS++;
    2b28:	a8500001 	ldmdage	r0, {r0}^
      t8 = *pS++;
    2b2c:	af00002e 	svcge	0x0000002e
      *pD++ = t1;
    2b30:	0100002e 	tsteq	r0, lr, lsr #32
      *pD++ = t2;
    2b34:	00005000 	andeq	r5, r0, r0
      *pD++ = t3;
    2b38:	00000000 	andeq	r0, r0, r0
      *pD++ = t5;
    2b3c:	2d780000 	ldclcs	0, cr0, [r8, #-0]
      *pD++ = t7;
    2b40:	2d800000 	stccs	0, cr0, [r0]
   } while (--nIterations);
    2b44:	00010000 	andeq	r0, r1, r0
    2b48:	002d8052 	eoreq	r8, sp, r2, asr r0
      *pD++ = t8;
    2b4c:	002d8300 	eoreq	r8, sp, r0, lsl #6
   } while (--nIterations);
    2b50:	72000200 	andvc	r0, r0, #0, 4
	...
   *pD++ = t3;
    2b5c:	002f1e00 	eoreq	r1, pc, r0, lsl #28
   *pD++ = t4;
    2b60:	002f2800 	eoreq	r2, pc, r0, lsl #16
   *pD++ = t5;
    2b64:	53000100 	movwpl	r0, #256	; 0x100
	...
	RFCAdi3VcoLdoVoltageMode (true);
    2b70:	00002c66 	andeq	r2, r0, r6, ror #24
       	RFCRfTrimSet (&rfTrim);
    2b74:	00002caa 	andeq	r2, r0, sl, lsr #25
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b78:	aa540001 	bge	1502b84 <__ccfg+0x14e2bdc>
    2b7c:	b200002c 	andlt	r0, r0, #44	; 0x2c
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b80:	0200002c 	andeq	r0, r0, #44	; 0x2c
    2b84:	b2007400 	andlt	r7, r0, #0, 8
	issue_cmd ((lword)&cmd_srt);
    2b88:	bc00002c 	stclt	0, cr0, [r0], {44}	; 0x2c
    2b8c:	0100002c 	tsteq	r0, ip, lsr #32
	issue_cmd ((lword)&RF_cmdFs);
    2b90:	2cbc5400 	cfldrscs	mvf5, [ip]
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b94:	2cc10000 	stclcs	0, cr0, [r1], {0}
    2b98:	00020000 	andeq	r0, r2, r0
    2b9c:	2cd20074 	ldclcs	0, cr0, [r2], {116}	; 0x74
	IntEnable (INT_RFC_CPE_0);
    2ba0:	2cd60000 	ldclcs	0, cr0, [r6], {0}
	_BIC (dstate, DSTATE_IRST);
    2ba4:	00020000 	andeq	r0, r2, r0
    2ba8:	00000074 	andeq	r0, r0, r4, ror r0
    2bac:	00000000 	andeq	r0, r0, r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2bb0:	2c8e0000 	stccs	0, cr0, [lr], {0}
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bb4:	2ca50000 	stccs	0, cr0, [r5]
	IntEnable (INT_RFC_CPE_0);
    2bb8:	00010000 	andeq	r0, r1, r0
    2bbc:	00000052 	andeq	r0, r0, r2, asr r0
}
    2bc0:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_RFC_CPE_0);
    2bc4:	002c6600 	eoreq	r6, ip, r0, lsl #12
    2bc8:	002cc600 	eoreq	ip, ip, r0, lsl #12
    2bcc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2bd0:	00002cd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2bd4:	00002cd6 	ldrdeq	r2, [r0], -r6
    2bd8:	00550001 	subseq	r0, r5, r1
    2bdc:	00000000 	andeq	r0, r0, r0
    2be0:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2be4:	ae000029 	cdpge	0, 0, cr0, cr0, cr9, {1}
    2be8:	01000029 	tsteq	r0, r9, lsr #32
    2bec:	29ae5000 	stmibcs	lr!, {ip, lr}
    2bf0:	29e00000 	stmibcs	r0!, {}^	; <UNPREDICTABLE>
    2bf4:	00010000 	andeq	r0, r1, r0
    2bf8:	00000054 	andeq	r0, r0, r4, asr r0
    2bfc:	00000000 	andeq	r0, r0, r0
    2c00:	0029b600 	eoreq	fp, r9, r0, lsl #12
    2c04:	0029c000 	eoreq	ip, r9, r0
    2c08:	52000100 	andpl	r0, r0, #0, 2
    2c0c:	000029c6 	andeq	r2, r0, r6, asr #19
    2c10:	000029d1 	ldrdeq	r2, [r0], -r1
    2c14:	d6520001 	ldrble	r0, [r2], -r1
    2c18:	db000029 	blle	2cc4 <rx_int_enable+0x9c>
    2c1c:	01000029 	tsteq	r0, r9, lsr #32
    2c20:	29de5200 	ldmibcs	lr, {r9, ip, lr}^
    2c24:	29f00000 	ldmibcs	r0!, {}^	; <UNPREDICTABLE>
static void rx_int_enable () {
    2c28:	00010000 	andeq	r0, r1, r0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c2c:	00000052 	andeq	r0, r0, r2, asr r0
    2c30:	00000000 	andeq	r0, r0, r0
    2c34:	0029be00 	eoreq	fp, r9, r0, lsl #28
    2c38:	0029c000 	eoreq	ip, r9, r0
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c3c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c48:	00002a70 	andeq	r2, r0, r0, ror sl
    2c4c:	00002a7a 	andeq	r2, r0, sl, ror sl
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c50:	7a500001 	bvc	1402c5c <__ccfg+0x13e2cb4>
    2c54:	a000002a 	andge	r0, r0, sl, lsr #32
    2c58:	0100002a 	tsteq	r0, sl, lsr #32
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c5c:	00005400 	andeq	r5, r0, r0, lsl #8
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c60:	00000000 	andeq	r0, r0, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c64:	2a700000 	bcs	1c02c6c <__ccfg+0x1be2cc4>
		if (db->status == DATA_ENTRY_FINISHED) {
    2c68:	2a7a0000 	bcs	1e82c70 <__ccfg+0x1e62cc8>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c6c:	00010000 	andeq	r0, r1, r0
    2c70:	002a7a51 	eoreq	r7, sl, r1, asr sl
			nr++;
    2c74:	002aa000 	eoreq	sl, sl, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c78:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2c84:	00002b4a 	andeq	r2, r0, sl, asr #22
				__dp [pl + 1] = __dp [pl] - 128;
    2c88:	00002b52 	andeq	r2, r0, r2, asr fp
				pl = __dp [1] + 2;
    2c8c:	00520001 	subseq	r0, r2, r1
				__dp [pl + 1] = __dp [pl] - 128;
    2c90:	00000000 	andeq	r0, r0, r0
    2c94:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
				__dp [pl] = 0;
    2c98:	4a00002b 	bmi	2d4c <cc1350_driver+0x54>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c9c:	0100002b 	tsteq	r0, fp, lsr #32
    2ca0:	2b4e5300 	blcs	13978a8 <__ccfg+0x1377900>
    2ca4:	2b520000 	blcs	1482cac <__ccfg+0x1462d04>
			db->status = DATA_ENTRY_PENDING;
    2ca8:	00010000 	andeq	r0, r1, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2cac:	00000053 	andeq	r0, r0, r3, asr r0
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2cb0:	00000000 	andeq	r0, r0, r0
				diag ("BAD RX");
    2cb4:	002b2400 	eoreq	r2, fp, r0, lsl #8
    2cb8:	002b5200 	eoreq	r5, fp, r0, lsl #4
	if (nr) {
    2cbc:	5e000100 	adfpls	f0, f0, f0
	...
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc8:	00002b28 	andeq	r2, r0, r8, lsr #22
    2ccc:	00002b52 	andeq	r2, r0, r2, asr fp
    2cd0:	00570001 	subseq	r0, r7, r1
}
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	2c000000 	stccs	0, cr0, [r0], {-0}
    2cdc:	6800002b 	stmdavs	r0, {r0, r1, r3, r5}
    2ce0:	0100002b 	tsteq	r0, fp, lsr #32
    2ce4:	00005500 	andeq	r5, r0, r0, lsl #10
    2ce8:	00000000 	andeq	r0, r0, r0
    2cec:	2b2c0000 	blcs	b02cf4 <__ccfg+0xae2d4c>
    2cf0:	2b440000 	blcs	1102cf8 <__ccfg+0x10e2d50>
    2cf4:	00010000 	andeq	r0, r1, r0
thread (cc1350_driver)
    2cf8:	002b4450 	eoreq	r4, fp, r0, asr r4
    2cfc:	002b4e00 	eoreq	r4, fp, r0, lsl #28
    2d00:	73000200 	movwvc	r0, #512	; 0x200
    2d04:	002b4e18 	eoreq	r4, fp, r8, lsl lr
    2d08:	002b5000 	eoreq	r5, fp, r0
		if (dstate & DSTATE_IRST) {
    2d0c:	70000200 	andvc	r0, r0, r0, lsl #4
    2d10:	00000018 	andeq	r0, r0, r8, lsl r0
    2d14:	00000000 	andeq	r0, r0, r0
			rf_off ();
    2d18:	002b4a00 	eoreq	r4, fp, r0, lsl #20
			_BIC (dstate,
    2d1c:	002b6800 	eoreq	r6, fp, r0, lsl #16
    2d20:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			if ((dstate & DSTATE_RXON) == 0)
    2d2c:	00003120 	andeq	r3, r0, r0, lsr #2
				rx_de ();
    2d30:	00003122 	andeq	r3, r0, r2, lsr #2
		if (paylen == 0) {
    2d34:	00500001 	subseq	r0, r0, r1
    2d38:	00000000 	andeq	r0, r0, r0
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d3c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2d40:	1e000031 	mcrne	0, 0, r0, cr0, cr1, {1}
    2d44:	01000031 	tsteq	r0, r1, lsr r0
    2d48:	00005000 	andeq	r5, r0, r0
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d4c:	00000000 	andeq	r0, r0, r0
    2d50:	31140000 	tstcc	r4, r0
    2d54:	31160000 	tstcc	r6, r0
    2d58:	00010000 	andeq	r0, r1, r0
    2d5c:	00000050 	andeq	r0, r0, r0, asr r0
    2d60:	00000000 	andeq	r0, r0, r0
    2d64:	0030f000 	eorseq	pc, r0, r0
    2d68:	0030fa00 	eorseq	pc, r0, r0, lsl #20
		} else if (dstate & DSTATE_RXON) {
    2d6c:	50000100 	andpl	r0, r0, r0, lsl #2
	if (dstate & DSTATE_RFON)
    2d70:	000030fc 	strdeq	r3, [r0], -ip
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d74:	0000310a 	andeq	r3, r0, sl, lsl #2
		re->status = DATA_ENTRY_PENDING;
    2d78:	00500001 	subseq	r0, r0, r1
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d7c:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&RF_cmdPropRx);
    2d80:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
	_BIS (dstate, DSTATE_RXAC);
    2d84:	f2000030 	vqadd.s8	d0, d0, d16
    2d88:	01000030 	tsteq	r0, r0, lsr r0
    2d8c:	00005100 	andeq	r5, r0, r0, lsl #2
    2d90:	00000000 	andeq	r0, r0, r0
	if (dstate & DSTATE_RXAC)
    2d94:	30f00000 	rscscc	r0, r0, r0
    2d98:	30f40000 	rscscc	r0, r4, r0
				if (statid != 0xffff)
    2d9c:	00010000 	andeq	r0, r1, r0
    2da0:	00000052 	andeq	r0, r0, r2, asr r0
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2da4:	00000000 	andeq	r0, r0, r0
				RF_cmdPropTx.pktLen = (byte) paylen;
    2da8:	0030f000 	eorseq	pc, r0, r0
		if (paylen == 0) {
    2dac:	00310800 	eorseq	r0, r1, r0, lsl #16
			wait (qevent, DR_LOOP);
    2db0:	53000100 	movwpl	r0, #256	; 0x100
	...
			if (dstate & DSTATE_RXAC) {
    2dbc:	000030cc 	andeq	r3, r0, ip, asr #1
				rx_int_enable ();
    2dc0:	000030d8 	ldrdeq	r3, [r0], -r8
			release;
    2dc4:	d8500001 	ldmdale	r0, {r0}^
			} else if (dstate & DSTATE_RFON) {
    2dc8:	f0000030 			; <UNDEFINED> instruction: 0xf0000030
				delay (offdelay, DR_GOOF);
    2dcc:	01000030 	tsteq	r0, r0, lsr r0
    2dd0:	00005300 	andeq	r5, r0, r0, lsl #6
    2dd4:	00000000 	andeq	r0, r0, r0
		if (bckf_timer) {
    2dd8:	31240000 			; <UNDEFINED> instruction: 0x31240000
			wait (qevent, DR_LOOP);
    2ddc:	31320000 	teqcc	r2, r0
    2de0:	00010000 	andeq	r0, r1, r0
    2de4:	00313250 	eorseq	r3, r1, r0, asr r2
			delay (bckf_timer, DR_LOOP);
    2de8:	00316c00 	eorseq	r6, r1, r0, lsl #24
    2dec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (dstate & DSTATE_RFON)
    2df8:	00003124 	andeq	r3, r0, r4, lsr #2
    2dfc:	00003135 	andeq	r3, r0, r5, lsr r1
		rx_de ();
    2e00:	35510001 	ldrbcc	r0, [r1, #-1]
		RF_cmdPropTx . status = 0;
    2e04:	6c000031 	stcvs	0, cr0, [r0], {49}	; 0x31
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e08:	01000031 	tsteq	r0, r1, lsr r0
    2e0c:	00005600 	andeq	r5, r0, r0, lsl #12
    2e10:	00000000 	andeq	r0, r0, r0
		issue_cmd ((lword)&cmd_cs);
    2e14:	31240000 			; <UNDEFINED> instruction: 0x31240000
		if (dstate & DSTATE_IRST)
    2e18:	31350000 	teqcc	r5, r0
    2e1c:	00010000 	andeq	r0, r1, r0
    2e20:	00314452 	eorseq	r4, r1, r2, asr r4
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e24:	00314a00 	eorseq	r4, r1, r0, lsl #20
    2e28:	52000100 	andpl	r0, r0, #0, 2
	...
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e34:	0000316c 	andeq	r3, r0, ip, ror #2
    2e38:	00003183 	andeq	r3, r0, r3, lsl #3
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e3c:	84500001 	ldrbhi	r0, [r0], #-1
    2e40:	90000031 	andls	r0, r0, r1, lsr r0
				RF_cmdPropTx . status = 0;
    2e44:	01000031 	tsteq	r0, r1, lsr r0
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e48:	31c85000 	biccc	r5, r8, r0
				issue_cmd ((lword)&RF_cmdPropTx);
    2e4c:	31dc0000 	bicscc	r0, ip, r0
				proceed (DR_XMIT);
    2e50:	00010000 	andeq	r0, r1, r0
    2e54:	00000050 	andeq	r0, r0, r0, asr r0
			txtries++;
    2e58:	00000000 	andeq	r0, r0, r0
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e5c:	00317400 	eorseq	r7, r1, r0, lsl #8
    2e60:	00318000 	eorseq	r8, r1, r0
    2e64:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e68:	00003180 	andeq	r3, r0, r0, lsl #3
		goto DR_LOOP__;
    2e6c:	00003183 	andeq	r3, r0, r3, lsl #3
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e70:	08730002 	ldmdaeq	r3!, {r1}^
		paylen = 0;
    2e74:	00003184 	andeq	r3, r0, r4, lsl #3
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e78:	000031dc 	ldrdeq	r3, [r0], -ip
		txtries = 0;
    2e7c:	00550001 	subseq	r0, r5, r1
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e80:	00000000 	andeq	r0, r0, r0
    2e84:	aa000000 	bge	2e8c <cc1350_driver+0x194>
    2e88:	bc000031 	stclt	0, cr0, [r0], {49}	; 0x31
    2e8c:	01000031 	tsteq	r0, r1, lsr r0
    2e90:	00005000 	andeq	r5, r0, r0
		    tcvphy_top (physid) == NULL)
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	31dc0000 	bicscc	r0, ip, r0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e9c:	31f80000 	mvnscc	r0, r0
    2ea0:	00010000 	andeq	r0, r1, r0
			rf_off ();
    2ea4:	0032de50 	eorseq	sp, r2, r0, asr lr
endthread
    2ea8:	0032e700 	eorseq	lr, r2, r0, lsl #14
    2eac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2eb8:	000031e4 	andeq	r3, r0, r4, ror #3
    2ebc:	00003206 	andeq	r3, r0, r6, lsl #4
    2ec0:	06540001 	ldrbeq	r0, [r4], -r1
    2ec4:	0d000032 	stceq	0, cr0, [r0, #-200]	; 0xffffff38
    2ec8:	01000032 	tsteq	r0, r2, lsr r0
    2ecc:	320d5000 	andcc	r5, sp, #0
    2ed0:	32120000 	andscc	r0, r2, #0
    2ed4:	00010000 	andeq	r0, r1, r0
    2ed8:	00321254 	eorseq	r1, r2, r4, asr r2
    2edc:	00321c00 	eorseq	r1, r2, r0, lsl #24
    2ee0:	50000100 	andpl	r0, r0, r0, lsl #2
    2ee4:	0000321c 	andeq	r3, r0, ip, lsl r2
void RFCCPE0IntHandler (void) {
    2ee8:	000032da 	ldrdeq	r3, [r0], -sl
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eec:	de540001 	cdple	0, 5, cr0, cr4, cr1, {0}
		_BIS (dstate, DSTATE_IRST);
    2ef0:	e4000032 	str	r0, [r0], #-50	; 0xffffffce
    2ef4:	01000032 	tsteq	r0, r2, lsr r0
    2ef8:	32e45400 	rsccc	r5, r4, #0, 8
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2efc:	32e70000 	rsccc	r0, r7, #0
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f00:	00020000 	andeq	r0, r2, r0
    2f04:	00000872 	andeq	r0, r0, r2, ror r8
	p_trigger (drvprcs, qevent);
    2f08:	00000000 	andeq	r0, r0, r0
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f0c:	32be0000 	adcscc	r0, lr, #0
    2f10:	32c00000 	sbccc	r0, r0, #0
    2f14:	00010000 	andeq	r0, r1, r0
    2f18:	0032c050 	eorseq	ip, r2, r0, asr r0
    2f1c:	0032da00 	eorseq	sp, r2, r0, lsl #20
    2f20:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2f2c:	00003548 	andeq	r3, r0, r8, asr #10
    2f30:	0000355f 	andeq	r3, r0, pc, asr r5
	RISE_N_SHINE;
    2f34:	5f500001 	svcpl	0x00500001
    2f38:	66000035 			; <UNDEFINED> instruction: 0x66000035
    2f3c:	01000035 	tsteq	r0, r5, lsr r0
}
    2f40:	35665400 	strbcc	r5, [r6, #-1024]!	; 0xfffffc00
    2f44:	35680000 	strbcc	r0, [r8, #-0]!
    2f48:	00010000 	andeq	r0, r1, r0
    2f4c:	00356850 	eorseq	r6, r5, r0, asr r8
    2f50:	00357800 	eorseq	r7, r5, r0, lsl #16
    2f54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
void phys_cc1350 (int phy, int mbs) {
    2f58:	00003578 	andeq	r3, r0, r8, ror r5
	if (rbuffl != 0)
    2f5c:	00003587 	andeq	r3, r0, r7, lsl #11
    2f60:	87500001 	ldrbhi	r0, [r0, -r1]
		syserror (ETOOMANY, "cc13");
    2f64:	98000035 	stmdals	r0, {r0, r2, r4, r5}
		syserror (EREQPAR, "cc13 mb");
    2f68:	01000035 	tsteq	r0, r5, lsr r0
	if (mbs == 0)
    2f6c:	00005400 	andeq	r5, r0, r0, lsl #8
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f70:	00000000 	andeq	r0, r0, r0
		syserror (EREQPAR, "cc13 mb");
    2f74:	35480000 	strbcc	r0, [r8, #-0]
    2f78:	355c0000 	ldrbcc	r0, [ip, #-0]
	i = 0;
    2f7c:	00010000 	andeq	r0, r1, r0
	rbuffl = (byte) mbs;
    2f80:	00355c51 	eorseq	r5, r5, r1, asr ip
		db->config.type = 0;	// General (data in structure)
    2f84:	00355f00 	eorseq	r5, r5, r0, lsl #30
	rbuffl = (byte) mbs;
    2f88:	52000100 	andpl	r0, r0, #0, 2
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f8c:	0000355f 	andeq	r3, r0, pc, asr r5
    2f90:	00003566 	andeq	r3, r0, r6, ror #10
		if (db == NULL)
    2f94:	66560001 	ldrbvs	r0, [r6], -r1
			syserror (EMALLOC, "cc13");
    2f98:	6b000035 	blvs	3074 <phys_cc1350+0x11c>
    2f9c:	01000035 	tsteq	r0, r5, lsr r0
    2fa0:	356b5100 	strbcc	r5, [fp, #-256]!	; 0xffffff00
		db->status = DATA_ENTRY_PENDING;
    2fa4:	35980000 	ldrcc	r0, [r8]
		if (i)
    2fa8:	00010000 	andeq	r0, r1, r0
			da->pNextEntry = (byte*) db;
    2fac:	00000056 	andeq	r0, r0, r6, asr r0
		db->length = rbuffl + 2;
    2fb0:	00000000 	andeq	r0, r0, r0
    2fb4:	00354800 	eorseq	r4, r5, r0, lsl #16
		db->config.type = 0;	// General (data in structure)
    2fb8:	00355000 	eorseq	r5, r5, r0
		db->length = rbuffl + 2;
    2fbc:	52000100 	andpl	r0, r0, #0, 2
	db->pNextEntry = (byte*) re;
    2fc0:	00003554 	andeq	r3, r0, r4, asr r5
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2fc4:	00003558 	andeq	r3, r0, r8, asr r5
    2fc8:	60520001 	subsvs	r0, r2, r1
	if (rbuffs == NULL)
    2fcc:	66000035 			; <UNDEFINED> instruction: 0x66000035
	rbuffs->pCurrEntry = (byte*) re;
    2fd0:	01000035 	tsteq	r0, r5, lsr r0
	rbuffs->pLastEntry = NULL;
    2fd4:	35725700 	ldrbcc	r5, [r2, #-1792]!	; 0xfffff900
    2fd8:	35980000 	ldrcc	r0, [r8]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fdc:	00010000 	andeq	r0, r1, r0
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fe0:	00000057 	andeq	r0, r0, r7, asr r0
    2fe4:	00000000 	andeq	r0, r0, r0
    2fe8:	00357200 	eorseq	r7, r5, r0, lsl #4
	rbuffl -= 2;
    2fec:	00359400 	eorseq	r9, r5, r0, lsl #8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ff0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	rbuffl -= 2;
    2ff4:	00003594 	muleq	r0, r4, r5
	physid = phy;
    2ff8:	00003598 	muleq	r0, r8, r5
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ffc:	00580001 	subseq	r0, r8, r1
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3000:	00000000 	andeq	r0, r0, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3004:	8c000000 	stchi	0, cr0, [r0], {-0}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3008:	90000035 	andls	r0, r0, r5, lsr r0
    300c:	01000035 	tsteq	r0, r5, lsr r0
	utimer_add (&bckf_timer);
    3010:	00005000 	andeq	r5, r0, r0
	drvprcs = runthread (cc1350_driver);
    3014:	00000000 	andeq	r0, r0, r0
    3018:	33180000 	tstcc	r8, #0
    301c:	33320000 	teqcc	r2, #0
	if (drvprcs == 0)
    3020:	00010000 	andeq	r0, r1, r0
		syserror (ERESOURCE, "cc13");
    3024:	00000050 	andeq	r0, r0, r0, asr r0
    3028:	00000000 	andeq	r0, r0, r0
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    302c:	00331800 	eorseq	r1, r3, r0, lsl #16
    3030:	00333200 	eorseq	r3, r3, r0, lsl #4
    3034:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3040:	00003318 	andeq	r3, r0, r8, lsl r3
    3044:	00003332 	andeq	r3, r0, r2, lsr r3
    3048:	42520001 	subsmi	r0, r2, #1
    304c:	6e000033 	mcrvs	0, 0, r0, cr0, cr3, {1}
    3050:	01000033 	tsteq	r0, r3, lsr r0
    3054:	337c5500 	cmncc	ip, #0, 10
    3058:	353a0000 	ldrcc	r0, [sl, #-0]!
    305c:	00010000 	andeq	r0, r1, r0
    3060:	00000055 	andeq	r0, r0, r5, asr r0
	plugch ();
    3064:	00000000 	andeq	r0, r0, r0
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3068:	00331800 	eorseq	r1, r3, r0, lsl #16
    306c:	00331c00 	eorseq	r1, r3, r0, lsl #24
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3070:	53000100 	movwpl	r0, #256	; 0x100
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3074:	0000331e 	andeq	r3, r0, lr, lsl r3
    3078:	00003320 	andeq	r3, r0, r0, lsr #6
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    307c:	93530003 	cmpls	r3, #3
}
    3080:	00332004 	eorseq	r2, r3, r4
    3084:	00336a00 	eorseq	r6, r3, r0, lsl #20
    3088:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    308c:	336a0493 	cmncc	sl, #-1828716544	; 0x93000000
    3090:	33be0000 			; <UNDEFINED> instruction: 0x33be0000
    3094:	00030000 	andeq	r0, r3, r0
    3098:	be049354 	mcrlt	3, 0, r9, cr4, cr4, {2}
    309c:	ca000033 	bgt	3170 <__outserial+0x4>
    30a0:	03000033 	movweq	r0, #51	; 0x33
    30a4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    30a8:	000033d2 	ldrdeq	r3, [r0], -r2
    30ac:	000033f4 	strdeq	r3, [r0], -r4
    30b0:	93540003 	cmpls	r4, #3
    30b4:	0033f804 	eorseq	pc, r3, r4, lsl #16
    30b8:	00347200 	eorseq	r7, r4, r0, lsl #4
    30bc:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    30c0:	34780493 	ldrbtcc	r0, [r8], #-1171	; 0xfffffb6d
    30c4:	348c0000 	strcc	r0, [ip], #0
    30c8:	00030000 	andeq	r0, r3, r0
    30cc:	d2049354 	andle	r9, r4, #84, 6	; 0x50000001
    30d0:	de000034 	mcrle	0, 0, r0, cr0, cr4, {1}
    30d4:	03000034 	movweq	r0, #52	; 0x34
    30d8:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    30dc:	00003500 	andeq	r3, r0, r0, lsl #10
    30e0:	00003512 	andeq	r3, r0, r2, lsl r5
    30e4:	93540003 	cmpls	r4, #3
    30e8:	00351604 	eorseq	r1, r5, r4, lsl #12
    30ec:	00351e00 	eorseq	r1, r5, r0, lsl #28
    30f0:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    30f4:	35220493 	strcc	r0, [r2, #-1171]!	; 0xfffffb6d
    30f8:	35480000 	strbcc	r0, [r8, #-0]
    30fc:	00030000 	andeq	r0, r3, r0
    3100:	00049354 	andeq	r9, r4, r4, asr r3
    3104:	00000000 	andeq	r0, r0, r0
    3108:	36000000 	strcc	r0, [r0], -r0
    310c:	40000033 	andmi	r0, r0, r3, lsr r0
    3110:	01000033 	tsteq	r0, r3, lsr r0
    3114:	33405900 	movtcc	r5, #2304	; 0x900
    3118:	33420000 	movtcc	r0, #8192	; 0x2000
    311c:	00020000 	andeq	r0, r2, r0
    3120:	33420072 	movtcc	r0, #8306	; 0x2072
    3124:	33660000 	cmncc	r6, #0
    3128:	00010000 	andeq	r0, r1, r0
    312c:	00336e59 	eorseq	r6, r3, r9, asr lr
    3130:	00337c00 	eorseq	r7, r3, r0, lsl #24
    3134:	59000100 	stmdbpl	r0, {r8}
    3138:	0000337c 	andeq	r3, r0, ip, ror r3
    313c:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
    3140:	be580001 	cdplt	0, 5, cr0, cr8, cr1, {0}
    3144:	ce000033 	mcrgt	0, 0, r0, cr0, cr3, {1}
    3148:	01000033 	tsteq	r0, r3, lsr r0
    314c:	33ce5800 	biccc	r5, lr, #0, 16
    3150:	33d60000 	bicscc	r0, r6, #0
    3154:	00020000 	andeq	r0, r2, r0
    3158:	33f40172 	mvnscc	r0, #-2147483620	; 0x8000001c
    315c:	341e0000 	ldrcc	r0, [lr], #-0
    3160:	00010000 	andeq	r0, r1, r0
    3164:	00342258 	eorseq	r2, r4, r8, asr r2
    3168:	00342600 	eorseq	r2, r4, r0, lsl #12
strand (__outserial, const char*)
    316c:	50000100 	andpl	r0, r0, r0, lsl #2
    3170:	00003430 	andeq	r3, r0, r0, lsr r4
    3174:	0000343a 	andeq	r3, r0, sl, lsr r4
    3178:	5a500001 	bpl	1403184 <__ccfg+0x13e31dc>
endstrand
    317c:	5c000034 	stcpl	0, cr0, [r0], {52}	; 0x34
    3180:	01000034 	tsteq	r0, r4, lsr r0
	ptr = data;
    3184:	34625000 	strbtcc	r5, [r2], #-0
    3188:	34640000 	strbtcc	r0, [r4], #-0
	if (*ptr)
    318c:	00010000 	andeq	r0, r1, r0
		len = strlen (ptr);
    3190:	00346458 	eorseq	r6, r4, r8, asr r4
    3194:	00348700 	eorseq	r8, r4, r0, lsl #14
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3198:	53000100 	movwpl	r0, #256	; 0x100
    319c:	00003496 	muleq	r0, r6, r4
    31a0:	0000349a 	muleq	r0, sl, r4
    31a4:	a4590001 	ldrbge	r0, [r9], #-1
    31a8:	c4000034 	strgt	r0, [r0], #-52	; 0xffffffcc
	len -= quant;
    31ac:	01000034 	tsteq	r0, r4, lsr r0
    31b0:	34ca5900 	strbcc	r5, [sl], #2304	; 0x900
    31b4:	34cc0000 	strbcc	r0, [ip], #0
	if (len == 0) {
    31b8:	00010000 	andeq	r0, r1, r0
		ufree (data);
    31bc:	0034d259 	eorseq	sp, r4, r9, asr r2
		finish;
    31c0:	0034e000 	eorseq	lr, r4, r0
    31c4:	53000100 	movwpl	r0, #256	; 0x100
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    31c8:	00003500 	andeq	r3, r0, r0, lsl #10
    31cc:	00003509 	andeq	r3, r0, r9, lsl #10
    31d0:	12530001 	subsne	r0, r3, #1
    31d4:	26000035 			; <UNDEFINED> instruction: 0x26000035
    31d8:	01000035 	tsteq	r0, r5, lsr r0
strand (__inserial, address)
    31dc:	353a5800 	ldrcc	r5, [sl, #-2048]!	; 0xfffff800
    31e0:	35480000 	strbcc	r0, [r8, #-0]
    31e4:	00010000 	andeq	r0, r1, r0
    31e8:	00000059 	andeq	r0, r0, r9, asr r0
    31ec:	00000000 	andeq	r0, r0, r0
	if (__inpline != NULL)
    31f0:	0033d600 	eorseq	sp, r3, r0, lsl #12
    31f4:	0033f400 	eorseq	pc, r3, r0, lsl #8
		finish;
    31f8:	58000100 	stmdapl	r0, {r8}
	...
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    3204:	00003400 	andeq	r3, r0, r0, lsl #8
    3208:	00003414 	andeq	r3, r0, r4, lsl r4
		umwait (IM_INIT);
    320c:	18590001 	ldmdane	r9, {r0}^
		release;
    3210:	46000034 			; <UNDEFINED> instruction: 0x46000034
	savedata (data);
    3214:	01000034 	tsteq	r0, r4, lsr r0
	len = MAX_LINE_LENGTH;
    3218:	344e5900 	strbcc	r5, [lr], #-2304	; 0xfffff700
	io (IM_READ, __cport, READ, ptr, 1);
    321c:	34620000 	strbtcc	r0, [r2], #-0
    3220:	00010000 	andeq	r0, r1, r0
    3224:	00000059 	andeq	r0, r0, r9, asr r0
    3228:	00000000 	andeq	r0, r0, r0
	if (ptr == (char*) data) { // new line
    322c:	00341e00 	eorseq	r1, r4, r0, lsl #28
    3230:	00345000 	eorseq	r5, r4, r0
		if (*ptr == '\0') { // bin cmd
    3234:	58000100 	stmdapl	r0, {r8}
			proceed (IM_BIN);
    3238:	00003450 	andeq	r3, r0, r0, asr r4
    323c:	0000345c 	andeq	r3, r0, ip, asr r4
		if (*ptr < 0x20)
    3240:	5c530001 	mrrcpl	0, 0, r0, r3, cr1
    3244:	62000034 	andvs	r0, r0, #52	; 0x34
			proceed (IM_READ);
    3248:	01000034 	tsteq	r0, r4, lsr r0
    324c:	00005800 	andeq	r5, r0, r0, lsl #16
	if (*ptr == '\n' || *ptr == '\r') {
    3250:	00000000 	andeq	r0, r0, r0
    3254:	348c0000 	strcc	r0, [ip], #0
    3258:	34d20000 	ldrbcc	r0, [r2], #0
		*ptr = '\0';
    325c:	00010000 	andeq	r0, r1, r0
		__inpline = (char*)data;
    3260:	0000005a 	andeq	r0, r0, sl, asr r0
		finish;
    3264:	00000000 	andeq	r0, r0, r0
	if (len) {
    3268:	00349200 	eorseq	r9, r4, r0, lsl #4
		ptr++;
    326c:	0034bc00 	eorseq	fp, r4, r0, lsl #24
    3270:	58000100 	stmdapl	r0, {r8}
		len--;
    3274:	000034bc 			; <UNDEFINED> instruction: 0x000034bc
	proceed (IM_READ);
    3278:	000034cc 	andeq	r3, r0, ip, asr #9
	io (IM_BIN, __cport, READ, ptr, 1);
    327c:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
    3280:	d2000034 	andle	r0, r0, #52	; 0x34
    3284:	01000034 	tsteq	r0, r4, lsr r0
    3288:	00005800 	andeq	r5, r0, r0, lsl #16
    328c:	00000000 	andeq	r0, r0, r0
	len -= 2;
    3290:	34e00000 	strbtcc	r0, [r0], #0
	if (len > *ptr + 1) // 1 for 0x04
    3294:	35000000 	strcc	r0, [r0, #-0]
    3298:	00010000 	andeq	r0, r1, r0
		len = *ptr + 1;
    329c:	00000058 	andeq	r0, r0, r8, asr r0
    32a0:	00000000 	andeq	r0, r0, r0
	ptr++;
    32a4:	00351200 	eorseq	r1, r5, r0, lsl #4
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32a8:	00351600 	eorseq	r1, r5, r0, lsl #12
    32ac:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    32b0:	00351600 	eorseq	r1, r5, r0, lsl #12
    32b4:	00351e00 	eorseq	r1, r5, r0, lsl #28
    32b8:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    32bc:	0000007c 	andeq	r0, r0, ip, ror r0
	len -= quant;
    32c0:	00000000 	andeq	r0, r0, r0
		__inpline = (char*)data;
    32c4:	00352a00 	eorseq	r2, r5, r0, lsl #20
		finish;
    32c8:	00353800 	eorseq	r3, r5, r0, lsl #16
	ptr += quant;
    32cc:	58000100 	stmdapl	r0, {r8}
	...
endstrand
    32d8:	00003598 	muleq	r0, r8, r5
	proceed (IM_BINL);
    32dc:	000035b4 			; <UNDEFINED> instruction: 0x000035b4
endstrand
    32e0:	f2500001 	vhadd.s16	d16, d0, d1
    32e4:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    32e8:	01000036 	tsteq	r0, r6, lsr r0
    32ec:	36045300 	strcc	r5, [r4], -r0, lsl #6
    32f0:	36180000 	ldrcc	r0, [r8], -r0
    32f4:	00010000 	andeq	r0, r1, r0
		if (res && (d < n))
    32f8:	00361a56 	eorseq	r1, r6, r6, asr sl
    32fc:	00363600 	eorseq	r3, r6, r0, lsl #12
    3300:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3304:	00003648 	andeq	r3, r0, r8, asr #12
			res [d] = (char) c;
    3308:	00003654 	andeq	r3, r0, r4, asr r6
		d++;
    330c:	54560001 	ldrbpl	r0, [r6], #-1
    3310:	5a000036 	bpl	33f0 <__pi_vfparse+0xd8>
    3314:	01000036 	tsteq	r0, r6, lsr r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3318:	36605300 	strbtcc	r5, [r0], -r0, lsl #6
    331c:	36640000 	strbtcc	r0, [r4], -r0
    3320:	00010000 	andeq	r0, r1, r0
				enci (10000);
    3324:	00366453 	eorseq	r6, r6, r3, asr r4
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3328:	00367400 	eorseq	r7, r6, r0, lsl #8
    332c:	5e000100 	adfpls	f0, f0, f0
	d = 0;
    3330:	00003674 	andeq	r3, r0, r4, ror r6
		c = *fm++;
    3334:	0000368a 	andeq	r3, r0, sl, lsl #13
		if (c == '\\') {
    3338:	8a530001 	bhi	14c3344 <__ccfg+0x14a339c>
			if ((c = *fm++) == '\0') {
    333c:	92000036 	andls	r0, r0, #54	; 0x36
    3340:	01000036 	tsteq	r0, r6, lsr r0
				outc ('\\');
    3344:	36985e00 	ldrcc	r5, [r8], r0, lsl #28
			if ((c = *fm++) == '\0') {
    3348:	36b40000 	ldrtcc	r0, [r4], r0
				outc ('\\');
    334c:	00010000 	andeq	r0, r1, r0
    3350:	0036b453 	eorseq	fp, r6, r3, asr r4
			outc (c);
    3354:	0036ba00 	eorseq	fp, r6, r0, lsl #20
    3358:	5e000100 	adfpls	f0, f0, f0
			if (c == '\0')
    335c:	000036ba 			; <UNDEFINED> instruction: 0x000036ba
    3360:	000036bc 			; <UNDEFINED> instruction: 0x000036bc
			outc (c);
    3364:	c8530001 	ldmdagt	r3, {r0}^
				outc (val);
    3368:	ca000036 	bgt	3448 <__pi_vfparse+0x130>
				val = (word) va_arg (ap, aword);
    336c:	01000036 	tsteq	r0, r6, lsr r0
		if (c == '%') {
    3370:	36ca5e00 	strbcc	r5, [sl], r0, lsl #28
    3374:	36de0000 	ldrbcc	r0, [lr], r0
			c = *fm++;
    3378:	00010000 	andeq	r0, r1, r0
			switch (c) {
    337c:	0036de53 	eorseq	sp, r6, r3, asr lr
    3380:	0036ee00 	eorseq	lr, r6, r0, lsl #28
    3384:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3388:	000036ee 	andeq	r3, r0, lr, ror #13
    338c:	00003702 	andeq	r3, r0, r2, lsl #14
    3390:	10530001 	subsne	r0, r3, r1
    3394:	12000037 	andne	r0, r0, #55	; 0x37
    3398:	01000037 	tsteq	r0, r7, lsr r0
				outc ('%');
    339c:	37125600 	ldrcc	r5, [r2, -r0, lsl #12]
    33a0:	372a0000 	strcc	r0, [sl, -r0]!
				outc (c);
    33a4:	00010000 	andeq	r0, r1, r0
    33a8:	00372a53 	eorseq	r2, r7, r3, asr sl
    33ac:	00374400 	eorseq	r4, r7, r0, lsl #8
				if (c == '\0')
    33b0:	56000100 	strpl	r0, [r0], -r0, lsl #2
				return d;
    33b4:	0000374a 	andeq	r3, r0, sl, asr #14
}
    33b8:	0000376c 	andeq	r3, r0, ip, ror #14
    33bc:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
			switch (c) {
    33c0:	7e000037 	mcrvc	0, 0, r0, cr0, cr7, {1}
    33c4:	01000037 	tsteq	r0, r7, lsr r0
    33c8:	37a45600 	strcc	r5, [r4, r0, lsl #12]!
				for (i = 12; ; i -= 4) {
    33cc:	37a80000 	strcc	r0, [r8, r0]!
				val = (word) va_arg (ap, aword);
    33d0:	00010000 	andeq	r0, r1, r0
						[ (val >> i) & 0xf ]);
    33d4:	0037a853 	eorseq	sl, r7, r3, asr r8
    33d8:	0037b800 	eorseq	fp, r7, r0, lsl #16
    33dc:	58000100 	stmdapl	r0, {r8}
					outc (__pi_hex_enc_table
    33e0:	000037b8 			; <UNDEFINED> instruction: 0x000037b8
    33e4:	000037c8 	andeq	r3, r0, r8, asr #15
					if (i == 0)
    33e8:	c8530001 	ldmdagt	r3, {r0}^
    33ec:	d2000037 	andle	r0, r0, #55	; 0x37
				for (i = 12; ; i -= 4) {
    33f0:	01000037 	tsteq	r0, r7, lsr r0
				val = (word) va_arg (ap, aword);
    33f4:	37d85800 	ldrbcc	r5, [r8, r0, lsl #16]
				if (c == 'd' && (val & 0x8000) != 0) {
    33f8:	37fa0000 	ldrbcc	r0, [sl, r0]!
				val = (word) va_arg (ap, aword);
    33fc:	00010000 	andeq	r0, r1, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    3400:	00380053 	eorseq	r0, r8, r3, asr r0
    3404:	00381000 	eorseq	r1, r8, r0
					outc ('-');
    3408:	53000100 	movwpl	r0, #256	; 0x100
    340c:	00003810 	andeq	r3, r0, r0, lsl r8
					val = (~val) + 1;
    3410:	0000382a 	andeq	r3, r0, sl, lsr #16
    3414:	30560001 	subscc	r0, r6, r1
				for (i = 12; ; i -= 4) {
    3418:	50000038 	andpl	r0, r0, r8, lsr r0
				enci (10000);
    341c:	01000038 	tsteq	r0, r8, lsr r0
    3420:	38505300 	ldmdacc	r0, {r8, r9, ip, lr}^
    3424:	38620000 	stmdacc	r2!, {}^	; <UNPREDICTABLE>
    3428:	00010000 	andeq	r0, r1, r0
    342c:	00387656 	eorseq	r7, r8, r6, asr r6
    3430:	00387a00 	eorseq	r7, r8, r0, lsl #20
    3434:	58000100 	stmdapl	r0, {r8}
    3438:	0000387a 	andeq	r3, r0, sl, ror r8
    343c:	0000387e 	andeq	r3, r0, lr, ror r8
    3440:	88530001 	ldmdahi	r3, {r0}^
    3444:	8a000038 	bhi	352c <__pi_vfparse+0x214>
    3448:	01000038 	tsteq	r0, r8, lsr r0
    344c:	388a5800 	stmcc	sl, {fp, ip, lr}
    3450:	38a00000 	stmiacc	r0!, {}	; <UNPREDICTABLE>
    3454:	00010000 	andeq	r0, r1, r0
    3458:	0038a053 	eorseq	sl, r8, r3, asr r0
    345c:	0038b000 	eorseq	fp, r8, r0
    3460:	56000100 	strpl	r0, [r0], -r0, lsl #2
				if (c == 'd' || c == 'u') {
    3464:	000038b0 			; <UNDEFINED> instruction: 0x000038b0
    3468:	000038c6 	andeq	r3, r0, r6, asr #17
					if (c == 'd' &&
    346c:	d0530001 	subsle	r0, r3, r1
					val = va_arg (ap, lword);
    3470:	d2000038 	andle	r0, r0, #56	; 0x38
					fm++;
    3474:	01000038 	tsteq	r0, r8, lsr r0
					if (c == 'd' &&
    3478:	38d25600 	ldmcc	r2, {r9, sl, ip, lr}^
    347c:	38da0000 	ldmcc	sl, {}^	; <UNPREDICTABLE>
						outc ('-');
    3480:	00010000 	andeq	r0, r1, r0
    3484:	0038de53 	eorseq	sp, r8, r3, asr lr
						val = (~val) + 1;
    3488:	0038ee00 	eorseq	lr, r8, r0, lsl #28
				enci (10000);
    348c:	53000100 	movwpl	r0, #256	; 0x100
					enci (1000000000UL);
    3490:	000038ee 	andeq	r3, r0, lr, ror #17
    3494:	000038fc 	strdeq	r3, [r0], -ip
    3498:	fc560001 	mrrc2	0, 0, r0, r6, cr1
    349c:	02000038 	andeq	r0, r0, #56	; 0x38
    34a0:	01000039 	tsteq	r0, r9, lsr r0
    34a4:	39025800 	stmdbcc	r2, {fp, ip, lr}
    34a8:	390e0000 	stmdbcc	lr, {}	; <UNPREDICTABLE>
    34ac:	00010000 	andeq	r0, r1, r0
    34b0:	00390e56 	eorseq	r0, r9, r6, asr lr
    34b4:	00391600 	eorseq	r1, r9, r0, lsl #12
    34b8:	50000100 	andpl	r0, r0, r0, lsl #2
    34bc:	00003916 	andeq	r3, r0, r6, lsl r9
    34c0:	00003928 	andeq	r3, r0, r8, lsr #18
    34c4:	00530001 	subseq	r0, r3, r1
    34c8:	00000000 	andeq	r0, r0, r0
    34cc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    34d0:	b6000035 			; <UNDEFINED> instruction: 0xb6000035
				} else if (c == 'x') {
    34d4:	01000035 	tsteq	r0, r5, lsr r0
					for (i = 28; ; i -= 4) {
    34d8:	35b65100 	ldrcc	r5, [r6, #256]!	; 0x100
					val = va_arg (ap, lword);
    34dc:	35bc0000 	ldrcc	r0, [ip, #0]!
							[ (val >> i) & 0xf ]);
    34e0:	00010000 	andeq	r0, r1, r0
    34e4:	0035bc56 	eorseq	fp, r5, r6, asr ip
						outc (__pi_hex_enc_table
    34e8:	0035da00 	eorseq	sp, r5, r0, lsl #20
    34ec:	51000100 	mrspl	r0, (UNDEF: 16)
    34f0:	000035e0 	andeq	r3, r0, r0, ror #11
						if (i == 0)
    34f4:	00003928 	andeq	r3, r0, r8, lsr #18
    34f8:	00510001 	subseq	r0, r1, r1
					for (i = 28; ; i -= 4) {
    34fc:	00000000 	andeq	r0, r0, r0
					outc ('%');
    3500:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    3504:	98000035 	stmdals	r0, {r0, r2, r4, r5}
    3508:	01000035 	tsteq	r0, r5, lsr r0
					outc ('l');
    350c:	35985200 	ldrcc	r5, [r8, #512]	; 0x200
    3510:	35b40000 	ldrcc	r0, [r4, #0]!
				val = (word) va_arg (ap, aword);
    3514:	00030000 	andeq	r0, r3, r0
				outc (val);
    3518:	5a049352 	bpl	128268 <__ccfg+0x1082c0>
    351c:	8e000036 	mcrhi	0, 0, r0, cr0, cr6, {1}
				while (*st != '\0') {
    3520:	01000036 	tsteq	r0, r6, lsr r0
    3524:	36b45200 	ldrtcc	r5, [r4], r0, lsl #4
    3528:	36ba0000 	ldrtcc	r0, [sl], r0
    352c:	00010000 	andeq	r0, r1, r0
					outc (*st);
    3530:	0036ca52 	eorseq	ip, r6, r2, asr sl
    3534:	0036e400 	eorseq	lr, r6, r0, lsl #8
					st++;
    3538:	52000100 	andpl	r0, r0, #0, 2
		c = *fm++;
    353c:	00003712 	andeq	r3, r0, r2, lsl r7
    3540:	0000373a 	andeq	r3, r0, sl, lsr r7
    3544:	8c520001 	mrrchi	0, 0, r0, r2, cr1
char *vform (char *res, const char *fm, va_list aq) {
    3548:	cc000037 	stcgt	0, cr0, [r0], {55}	; 0x37
    354c:	01000037 	tsteq	r0, r7, lsr r0
	if (res != NULL) {
    3550:	37fa5200 	ldrbcc	r5, [sl, r0, lsl #4]!
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3554:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    3558:	00010000 	andeq	r0, r1, r0
    355c:	00387052 	eorseq	r7, r8, r2, asr r0
}
    3560:	00387a00 	eorseq	r7, r8, r0, lsl #20
    3564:	52000100 	andpl	r0, r0, #0, 2
	fml = strlen (fm) + 17;
    3568:	0000388a 	andeq	r3, r0, sl, lsl #17
    356c:	000038a6 	andeq	r3, r0, r6, lsr #17
    3570:	d2520001 	subsle	r0, r2, #1
	if ((res = (char*) umalloc (fml)) == NULL)
    3574:	e8000038 	stmda	r0, {r3, r4, r5}
    3578:	01000038 	tsteq	r0, r8, lsr r0
    357c:	38ee5200 	stmiacc	lr!, {r9, ip, lr}^
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3580:	38fc0000 	ldmcc	ip!, {}^	; <UNPREDICTABLE>
    3584:	00010000 	andeq	r0, r1, r0
    3588:	00390e52 	eorseq	r0, r9, r2, asr lr
    358c:	00391600 	eorseq	r1, r9, r0, lsl #12
		ufree (res);
    3590:	52000100 	andpl	r0, r0, #0, 2
	...
int vscan (const char *buf, const char *fmt, va_list ap) {
    359c:	00003616 	andeq	r3, r0, r6, lsl r6
	if (buf == NULL || fmt == NULL)
    35a0:	00003618 	andeq	r3, r0, r8, lsl r6
    35a4:	90540001 	subsls	r0, r4, r1
    35a8:	b4000036 	strlt	r0, [r0], #-54	; 0xffffffca
		    	    case 'u': scanu (lword); break;
    35ac:	01000036 	tsteq	r0, r6, lsr r0
			while (isspace (*buf)) buf++;
    35b0:	36ba5400 	ldrtcc	r5, [sl], r0, lsl #8
    35b4:	36ca0000 	strbcc	r0, [sl], r0
	while (*fmt != '\0') {
    35b8:	00010000 	andeq	r0, r1, r0
		if (*fmt++ != '%')
    35bc:	0036e654 	eorseq	lr, r6, r4, asr r6
		switch (*fmt++) {
    35c0:	00371200 	eorseq	r1, r7, r0, lsl #4
    35c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    35c8:	0000373c 	andeq	r3, r0, ip, lsr r7
    35cc:	0000378c 	andeq	r3, r0, ip, lsl #15
    35d0:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    35d4:	fa000037 	blx	36b8 <vscan+0x120>
    35d8:	01000037 	tsteq	r0, r7, lsr r0
}
    35dc:	38225400 	stmdacc	r2!, {sl, ip, lr}
		switch (*fmt++) {
    35e0:	38700000 	ldmdacc	r0!, {}^	; <UNPREDICTABLE>
    35e4:	00010000 	andeq	r0, r1, r0
    35e8:	00387a54 	eorseq	r7, r8, r4, asr sl
    35ec:	00388a00 	eorseq	r8, r8, r0, lsl #20
			while (isspace (*buf)) buf++;
    35f0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    35f4:	000038a8 	andeq	r3, r0, r8, lsr #17
    35f8:	000038d2 	ldrdeq	r3, [r0], -r2
    35fc:	ea540001 	b	1503608 <__ccfg+0x14e3660>
    3600:	ee000038 	mcr	0, 0, r0, cr0, cr8, {1}
    3604:	01000038 	tsteq	r0, r8, lsr r0
			if (*buf == '\0')
    3608:	39165400 	ldmdbcc	r6, {sl, ip, lr}
			if (*buf != ',') {
    360c:	39280000 	stmdbcc	r8!, {}	; <UNPREDICTABLE>
			sap = va_arg (ap, char*);
    3610:	00010000 	andeq	r0, r1, r0
			nc++;
    3614:	00000054 	andeq	r0, r0, r4, asr r0
			if (*buf != ',') {
    3618:	00000000 	andeq	r0, r0, r0
				while (!isspace (*buf) && *buf != ',' &&
    361c:	00368a00 	eorseq	r8, r6, r0, lsl #20
    3620:	0036b400 	eorseq	fp, r6, r0, lsl #8
    3624:	58000100 	stmdapl	r0, {r8}
    3628:	000036ba 			; <UNDEFINED> instruction: 0x000036ba
    362c:	000036ca 	andeq	r3, r0, sl, asr #13
    3630:	00580001 	subseq	r0, r8, r1
    3634:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    3638:	6c000000 	stcvs	0, cr0, [r0], {-0}
    363c:	7e000037 	mcrvc	0, 0, r0, cr0, cr7, {1}
    3640:	01000037 	tsteq	r0, r7, lsr r0
    3644:	377e5900 	ldrbcc	r5, [lr, -r0, lsl #18]!
    3648:	37860000 	strcc	r0, [r6, r0]
			if (*buf == ',') buf++;
    364c:	00010000 	andeq	r0, r1, r0
    3650:	00000050 	andeq	r0, r0, r0, asr r0
			*sap = '\0';
    3654:	00000000 	andeq	r0, r0, r0
			break;
    3658:	0037c800 	eorseq	ip, r7, r0, lsl #16
		    case 'd': scani (word); break;
    365c:	0037f200 	eorseq	pc, r7, r0, lsl #4
    3660:	50000100 	andpl	r0, r0, r0, lsl #2
    3664:	0000387a 	andeq	r3, r0, sl, ror r8
    3668:	0000388a 	andeq	r3, r0, sl, lsl #17
    366c:	00500001 	subseq	r0, r0, r1
    3670:	00000000 	andeq	r0, r0, r0
    3674:	50000000 	andpl	r0, r0, r0
    3678:	62000038 	andvs	r0, r0, #56	; 0x38
    367c:	01000038 	tsteq	r0, r8, lsr r0
    3680:	38625900 	stmdacc	r2!, {r8, fp, ip, lr}^
    3684:	386a0000 	stmdacc	sl!, {}^	; <UNPREDICTABLE>
    3688:	00010000 	andeq	r0, r1, r0
    368c:	00000050 	andeq	r0, r0, r0, asr r0
    3690:	00000000 	andeq	r0, r0, r0
    3694:	0038de00 	eorseq	sp, r8, r0, lsl #28
    3698:	0038ee00 	eorseq	lr, r8, r0, lsl #28
    369c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    36a8:	0000361a 	andeq	r3, r0, sl, lsl r6
    36ac:	00003636 	andeq	r3, r0, r6, lsr r6
    36b0:	005e0001 	subseq	r0, lr, r1
    36b4:	02000039 	andeq	r0, r0, #57	; 0x39
    36b8:	01000039 	tsteq	r0, r9, lsr r0
    36bc:	00005e00 	andeq	r5, r0, r0, lsl #28
    36c0:	00000000 	andeq	r0, r0, r0
    36c4:	39280000 	stmdbcc	r8!, {}	; <UNPREDICTABLE>
    36c8:	392f0000 	stmdbcc	pc!, {}	; <UNPREDICTABLE>
		    case 'u': scanu (word); break;
    36cc:	00010000 	andeq	r0, r1, r0
    36d0:	00392f50 	eorseq	r2, r9, r0, asr pc
    36d4:	00394600 	eorseq	r4, r9, r0, lsl #12
    36d8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    36dc:	00003946 	andeq	r3, r0, r6, asr #18
    36e0:	0000394a 	andeq	r3, r0, sl, asr #18
    36e4:	01f30004 	mvnseq	r0, r4
    36e8:	394a9f50 	stmdbcc	sl, {r4, r6, r8, r9, sl, fp, ip, pc}^
    36ec:	394c0000 	stmdbcc	ip, {}^	; <UNPREDICTABLE>
    36f0:	00010000 	andeq	r0, r1, r0
    36f4:	00394c56 	eorseq	r4, r9, r6, asr ip
    36f8:	00395000 	eorseq	r5, r9, r0
    36fc:	f3000400 	vshl.u8	d0, d0, d0
    3700:	009f5001 	addseq	r5, pc, r1
    3704:	00000000 	andeq	r0, r0, r0
    3708:	32000000 	andcc	r0, r0, #0
    370c:	3b000039 	blcc	37f8 <vscan+0x260>
    3710:	05000039 	streq	r0, [r0, #-57]	; 0xffffffc7
		    case 'x': scanx (word); break;
    3714:	30007000 	andcc	r7, r0, r0
    3718:	393b9f29 	ldmdbcc	fp!, {r0, r3, r5, r8, r9, sl, fp, ip, pc}
    371c:	39460000 	stmdbcc	r6, {}^	; <UNPREDICTABLE>
    3720:	00050000 	andeq	r0, r5, r0
    3724:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    3728:	00394a9f 	mlaseq	r9, pc, sl, r4	; <UNPREDICTABLE>
    372c:	00394c00 	eorseq	r4, r9, r0, lsl #24
    3730:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    3734:	9f293000 	svcls	0x00293000
	...
    3748:	00500001 	subseq	r0, r0, r1
    374c:	00000000 	andeq	r0, r0, r0
    3750:	01000000 	mrseq	r0, (UNDEF: 0)
    3754:	00005600 	andeq	r5, r0, r0, lsl #12
    3758:	00000000 	andeq	r0, r0, r0
    375c:	00040000 	andeq	r0, r4, r0
    3760:	9f5001f3 	svcls	0x005001f3
	...
    376c:	00560001 	subseq	r0, r6, r1
    3770:	00000000 	andeq	r0, r0, r0
    3774:	04000000 	streq	r0, [r0], #-0
    3778:	5001f300 	andpl	pc, r1, r0, lsl #6
    377c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
			switch (*fmt++) {
    378c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3798:	01f30004 	mvnseq	r0, r4
    379c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
		    	    case 'd': scani (lword); break;
    37ac:	00050000 	andeq	r0, r5, r0
    37b0:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    37b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37b8:	00000000 	andeq	r0, r0, r0
    37bc:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    37c0:	9f293000 	svcls	0x00293000
	...
    37cc:	00750005 	rsbseq	r0, r5, r5
    37d0:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	54000000 	strpl	r0, [r0], #-0
    37dc:	66000039 			; <UNDEFINED> instruction: 0x66000039
    37e0:	07000039 	smladxeq	r0, r9, r0, r0
    37e4:	3f007000 	svccc	0x00007000
    37e8:	9f263f24 	svcls	0x00263f24
	...
    37f4:	0000395c 	andeq	r3, r0, ip, asr r9
    37f8:	00003964 	andeq	r3, r0, r4, ror #18
    37fc:	8072000d 	rsbshi	r0, r2, sp
		    	    case 'x': scanx (lword); break;
    3800:	4800717a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    3804:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3808:	649f2634 	ldrvs	r2, [pc], #1588	; 3810 <vscan+0x278>
    380c:	80000039 	andhi	r0, r0, r9, lsr r0
    3810:	0c000039 	stceq	0, cr0, [r0], {57}	; 0x39
    3814:	48007100 	stmdami	r0, {r8, ip, sp, lr}
    3818:	72264824 	eorvc	r4, r6, #36, 16	; 0x240000
    381c:	26341e00 	ldrtcs	r1, [r4], -r0, lsl #28
    3820:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3824:	00000000 	andeq	r0, r0, r0
    3828:	00398600 	eorseq	r8, r9, r0, lsl #12
    382c:	00399000 	eorseq	r9, r9, r0
    3830:	53000100 	movwpl	r0, #256	; 0x100
	...
    383c:	00003988 	andeq	r3, r0, r8, lsl #19
    3840:	00003994 	muleq	r0, r4, r9
    3844:	00500001 	subseq	r0, r0, r1
    3848:	00000000 	andeq	r0, r0, r0
    384c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3850:	e0000039 	and	r0, r0, r9, lsr r0
    3854:	01000039 	tsteq	r0, r9, lsr r0
    3858:	39e05000 	stmibcc	r0!, {ip, lr}^
    385c:	3a1a0000 	bcc	683864 <__ccfg+0x6638bc>
    3860:	00010000 	andeq	r0, r1, r0
    3864:	003a1a55 	eorseq	r1, sl, r5, asr sl
    3868:	003a2400 	eorseq	r2, sl, r0, lsl #8
    386c:	f3000400 	vshl.u8	d0, d0, d0
		    	    case 'd': scani (lword); break;
    3870:	009f5001 	addseq	r5, pc, r1
    3874:	00000000 	andeq	r0, r0, r0
    3878:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    387c:	ce000039 	mcrgt	0, 0, r0, cr0, cr9, {1}
    3880:	01000039 	tsteq	r0, r9, lsr r0
    3884:	39ce5100 	stmibcc	lr, {r8, ip, lr}^
    3888:	3a060000 	bcc	183890 <__ccfg+0x1638e8>
		    	    case 'u': scanu (lword); break;
    388c:	00010000 	andeq	r0, r1, r0
    3890:	003a0654 	eorseq	r0, sl, r4, asr r6
    3894:	003a2400 	eorseq	r2, sl, r0, lsl #8
    3898:	f3000400 	vshl.u8	d0, d0, d0
    389c:	009f5101 	addseq	r5, pc, r1, lsl #2
    38a0:	00000000 	andeq	r0, r0, r0
    38a4:	02000000 	andeq	r0, r0, #0
    38a8:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
    38ac:	0100003a 	tsteq	r0, sl, lsr r0
    38b0:	00005500 	andeq	r5, r0, r0, lsl #10
    38b4:	00000000 	andeq	r0, r0, r0
    38b8:	3a020000 	bcc	838c0 <__ccfg+0x63918>
    38bc:	3a060000 	bcc	1838c4 <__ccfg+0x16391c>
    38c0:	00010000 	andeq	r0, r1, r0
    38c4:	003a0654 	eorseq	r0, sl, r4, asr r6
    38c8:	003a1600 	eorseq	r1, sl, r0, lsl #12
    38cc:	f3000400 	vshl.u8	d0, d0, d0
    38d0:	009f5101 	addseq	r5, pc, r1, lsl #2
		    	    case 'x': scanx (lword); break;
    38d4:	00000000 	andeq	r0, r0, r0
    38d8:	24000000 	strcs	r0, [r0], #-0
			if ((c = *buf++) == '\0')
    38dc:	4200003a 	andmi	r0, r0, #58	; 0x3a
    38e0:	0100003a 	tsteq	r0, sl, lsr r0
			sap = va_arg (ap, char*);
    38e4:	3a425000 	bcc	10978ec <__ccfg+0x1077944>
			nc++;
    38e8:	3a500000 	bcc	14038f0 <__ccfg+0x13e3948>
			break;
    38ec:	00040000 	andeq	r0, r4, r0
			while (isspace (*buf)) buf++;
    38f0:	9f5001f3 	svcls	0x005001f3
	...
			while (isspace (*buf)) buf++;
    3904:	00500001 	subseq	r0, r0, r1
    3908:	00000000 	andeq	r0, r0, r0
    390c:	01000000 	mrseq	r0, (UNDEF: 0)
		return 0;
    3910:	00005600 	andeq	r5, r0, r0, lsl #12
    3914:	00000000 	andeq	r0, r0, r0
		    case 'x': scanx (word); break;
    3918:	00040000 	andeq	r0, r4, r0
    391c:	9f5001f3 	svcls	0x005001f3
	...
    3930:	00550001 	subseq	r0, r5, r1
	...
    3940:	07000000 	streq	r0, [r0, -r0]
    3944:	73007000 	movwvc	r7, #0
    3948:	9f191c00 	svcls	0x00191c00
	...
    3954:	00700004 	rsbseq	r0, r0, r4
    3958:	00009f19 	andeq	r9, r0, r9, lsl pc
	...
    3968:	00040000 	andeq	r0, r4, r0
    396c:	9f07d00a 	svcls	0x0007d00a
	...
    3978:	00500001 	subseq	r0, r0, r1
    397c:	00000000 	andeq	r0, r0, r0
    3980:	05000000 	streq	r0, [r0, #-0]
    3984:	40007200 	andmi	r7, r0, r0, lsl #4
    3988:	00009f25 	andeq	r9, r0, r5, lsr #30
    398c:	00000000 	andeq	r0, r0, r0
    3990:	00010000 	andeq	r0, r1, r0
    3994:	00000050 	andeq	r0, r0, r0, asr r0
    3998:	00000000 	andeq	r0, r0, r0
    399c:	0a000400 	beq	49a4 <memcpy+0xa8>
    39a0:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    39a4:	00000000 	andeq	r0, r0, r0
    39a8:	01000000 	mrseq	r0, (UNDEF: 0)
    39ac:	00005000 	andeq	r5, r0, r0
    39b0:	00000000 	andeq	r0, r0, r0
    39b4:	3aa20000 	bcc	fe8839bc <_estack+0xde87e9bc>
    39b8:	3aae0000 	bcc	feb839c0 <_estack+0xdeb7e9c0>
    39bc:	00010000 	andeq	r0, r1, r0
    39c0:	00000050 	andeq	r0, r0, r0, asr r0
    39c4:	00000000 	andeq	r0, r0, r0
    39c8:	003aa200 	eorseq	sl, sl, r0, lsl #4
    39cc:	003aae00 	eorseq	sl, sl, r0, lsl #28
    39d0:	53000100 	movwpl	r0, #256	; 0x100
	...
    39e4:	00500001 	subseq	r0, r0, r1
    39e8:	00000000 	andeq	r0, r0, r0
    39ec:	03000000 	movweq	r0, #0
    39f0:	9f1b7000 	svcls	0x001b7000
	...
    39fc:	01f30004 	mvnseq	r0, r4
    3a00:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3a10:	00070000 	andeq	r0, r7, r0
    3a14:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    3a18:	009f2648 	addseq	r2, pc, r8, asr #12
	...
    3a28:	01000000 	mrseq	r0, (UNDEF: 0)
    3a2c:	00005000 	andeq	r5, r0, r0
    3a30:	00000000 	andeq	r0, r0, r0
    3a34:	00060000 	andeq	r0, r6, r0
    3a38:	4b5001f3 	blmi	140420c <__ccfg+0x13e4264>
    3a3c:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    3a4c:	00010000 	andeq	r0, r1, r0
    3a50:	00000055 	andeq	r0, r0, r5, asr r0
    3a54:	00000000 	andeq	r0, r0, r0
    3a58:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    3a5c:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3a60:	4b5001f3 	blmi	1404234 <__ccfg+0x13e428c>
    3a64:	009f1e1c 	addseq	r1, pc, ip, lsl lr	; <UNPREDICTABLE>
	...
    3a74:	2c000000 	stccs	0, cr0, [r0], {-0}
    3a78:	40007100 	andmi	r7, r0, r0, lsl #2
    3a7c:	40007126 	andmi	r7, r0, r6, lsr #2
    3a80:	70264824 	eorvc	r4, r6, r4, lsr #16
    3a84:	26331e00 	ldrtcs	r1, [r3], -r0, lsl #28
    3a88:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    3a8c:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    3a90:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    3a94:	48007422 	stmdami	r0, {r1, r5, sl, ip, sp, lr}
    3a98:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    3a9c:	00701e00 	rsbseq	r1, r0, r0, lsl #28
    3aa0:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    3aa4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3aa8:	00000000 	andeq	r0, r0, r0
    3aac:	71003200 	mrsvc	r3, R8_usr
    3ab0:	f3264000 	vhadd.u32	d4, d6, d0
    3ab4:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3ab8:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    3abc:	331e2648 	tstcc	lr, #72, 12	; 0x4800000
    3ac0:	00712226 	rsbseq	r2, r1, r6, lsr #4
    3ac4:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3ac8:	3a1e0075 	bcc	783ca4 <__ccfg+0x763cfc>
    3acc:	01f32226 	mvnseq	r2, r6, lsr #4
    3ad0:	741c4b50 	ldrvc	r4, [ip], #-2896	; 0xfffff4b0
    3ad4:	48244800 	stmdami	r4!, {fp, lr}
    3ad8:	00751e26 	rsbseq	r1, r5, r6, lsr #28
    3adc:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    3ae0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3af0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3afc:	01f30004 	mvnseq	r0, r4
    3b00:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3b10:	000b0000 	andeq	r0, fp, r0
    3b14:	00700070 	rsbseq	r0, r0, r0, ror r0
    3b18:	7026461e 	eorvc	r4, r6, lr, lsl r6
    3b1c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3b20:	00000000 	andeq	r0, r0, r0
    3b24:	01000000 	mrseq	r0, (UNDEF: 0)
    3b28:	00005000 	andeq	r5, r0, r0
    3b2c:	00000000 	andeq	r0, r0, r0
    3b30:	000e0000 	andeq	r0, lr, r0
    3b34:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    3b38:	461e5001 	ldrmi	r5, [lr], -r1
    3b3c:	5001f326 	andpl	pc, r1, r6, lsr #6
    3b40:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    3b50:	00010000 	andeq	r0, r1, r0
    3b54:	00000055 	andeq	r0, r0, r5, asr r0
    3b58:	00000000 	andeq	r0, r0, r0
    3b5c:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
    3b60:	40091038 	andmi	r1, r9, r8, lsr r0
	...
    3b74:	00560001 	subseq	r0, r6, r1
	...
    3b84:	06000000 	streq	r0, [r0], -r0
    3b88:	76007000 	strvc	r7, [r0], -r0
    3b8c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3b90:	00000000 	andeq	r0, r0, r0
    3b94:	01000000 	mrseq	r0, (UNDEF: 0)
    3b98:	00005000 	andeq	r5, r0, r0
	...
    3ba8:	000a0000 	andeq	r0, sl, r0
    3bac:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    3bb0:	461a2444 	ldrmi	r2, [sl], -r4, asr #8
    3bb4:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    3bc4:	00010000 	andeq	r0, r1, r0
    3bc8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    3bd8:	73000900 	movwvc	r0, #2304	; 0x900
    3bdc:	fc000a00 	stc2	10, cr0, [r0], {-0}	; <UNPREDICTABLE>
    3be0:	9f253a1a 	svcls	0x00253a1a
	...
    3bf4:	0073000a 	rsbseq	r0, r3, sl
    3bf8:	2440fc08 	strbcs	pc, [r0], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    3bfc:	9f25421a 	svcls	0x0025421a
	...
    3c08:	00003afc 	strdeq	r3, [r0], -ip
    3c0c:	00003b1a 	andeq	r3, r0, sl, lsl fp
    3c10:	1a500001 	bne	1403c1c <__ccfg+0x13e3c74>
    3c14:	2400003b 	strcs	r0, [r0], #-59	; 0xffffffc5
    3c18:	0400003b 	streq	r0, [r0], #-59	; 0xffffffc5
    3c1c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3c20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c24:	00000000 	andeq	r0, r0, r0
    3c28:	003b8600 	eorseq	r8, fp, r0, lsl #12
    3c2c:	003b8800 	eorseq	r8, fp, r0, lsl #16
    3c30:	53000100 	movwpl	r0, #256	; 0x100
    3c34:	00003b8a 	andeq	r3, r0, sl, lsl #23
    3c38:	00003b8c 	andeq	r3, r0, ip, lsl #23
    3c3c:	00530001 	subseq	r0, r3, r1
    3c40:	00000000 	andeq	r0, r0, r0
    3c44:	c0000000 	andgt	r0, r0, r0
    3c48:	f600003c 			; <UNDEFINED> instruction: 0xf600003c
    3c4c:	0100003c 	tsteq	r0, ip, lsr r0
    3c50:	3cf65000 	ldclcc	0, cr5, [r6]
    3c54:	3dd80000 	ldclcc	0, cr0, [r8]
    3c58:	00040000 	andeq	r0, r4, r0
    3c5c:	9f5001f3 	svcls	0x005001f3
	...
    3c68:	00003cde 	ldrdeq	r3, [r0], -lr
    3c6c:	00003ce2 	andeq	r3, r0, r2, ror #25
    3c70:	e2510001 	subs	r0, r1, #1
    3c74:	e800003c 	stmda	r0, {r2, r3, r4, r5}
    3c78:	0200003c 	andeq	r0, r0, #60	; 0x3c
    3c7c:	ec9f3200 	lfm	f3, 4, [pc], {0}
    3c80:	7600003c 			; <UNDEFINED> instruction: 0x7600003c
    3c84:	0100003d 	tsteq	r0, sp, lsr r0
    3c88:	3d765100 	ldfcce	f5, [r6, #-0]
    3c8c:	3d7a0000 	ldclcc	0, cr0, [sl, #-0]
    3c90:	00030000 	andeq	r0, r3, r0
    3c94:	9c9f0571 	cfldr32ls	mvfx0, [pc], {113}	; 0x71
    3c98:	b200003d 	andlt	r0, r0, #61	; 0x3d
    3c9c:	0100003d 	tsteq	r0, sp, lsr r0
    3ca0:	3db25100 	ldfccs	f5, [r2]
    3ca4:	3db40000 	ldccc	0, cr0, [r4]
    3ca8:	00030000 	andeq	r0, r3, r0
    3cac:	009f0571 	addseq	r0, pc, r1, ror r5	; <UNPREDICTABLE>
    3cb0:	00000000 	andeq	r0, r0, r0
    3cb4:	42000000 	andmi	r0, r0, #0
    3cb8:	4800003d 	stmdami	r0, {r0, r2, r3, r4, r5}
    3cbc:	0100003d 	tsteq	r0, sp, lsr r0
    3cc0:	3d505300 	ldclcc	3, cr5, [r0, #-0]
    3cc4:	3d520000 	ldclcc	0, cr0, [r2, #-0]
    3cc8:	00010000 	andeq	r0, r1, r0
    3ccc:	003d6653 	eorseq	r6, sp, r3, asr r6
    3cd0:	003d6800 	eorseq	r6, sp, r0, lsl #16
    3cd4:	53000100 	movwpl	r0, #256	; 0x100
    3cd8:	00003d70 	andeq	r3, r0, r0, ror sp
    3cdc:	00003d7c 	andeq	r3, r0, ip, ror sp
    3ce0:	9c530001 	mrrcls	0, 0, r0, r3, cr1
    3ce4:	a800003d 	stmdage	r0, {r0, r2, r3, r4, r5}
    3ce8:	0100003d 	tsteq	r0, sp, lsr r0
    3cec:	3dac5300 	stccc	3, cr5, [ip]
    3cf0:	3db40000 	ldccc	0, cr0, [r4]
    3cf4:	00010000 	andeq	r0, r1, r0
    3cf8:	00000053 	andeq	r0, r0, r3, asr r0
    3cfc:	00000000 	andeq	r0, r0, r0
    3d00:	003ce000 	eorseq	lr, ip, r0
    3d04:	003ce200 	eorseq	lr, ip, r0, lsl #4
    3d08:	53000100 	movwpl	r0, #256	; 0x100
    3d0c:	00003ce4 	andeq	r3, r0, r4, ror #25
    3d10:	00003ce8 	andeq	r3, r0, r8, ror #25
    3d14:	ee530001 	cdp	0, 5, cr0, cr3, cr1, {0}
    3d18:	f600003c 			; <UNDEFINED> instruction: 0xf600003c
    3d1c:	0100003c 	tsteq	r0, ip, lsr r0
    3d20:	3cf65300 	ldclcc	3, cr5, [r6]
    3d24:	3d0c0000 	stccc	0, cr0, [ip, #-0]
    3d28:	00030000 	andeq	r0, r3, r0
    3d2c:	109f6c74 	addsne	r6, pc, r4, ror ip	; <UNPREDICTABLE>
    3d30:	1600003d 			; <UNDEFINED> instruction: 0x1600003d
    3d34:	0300003d 	movweq	r0, #61	; 0x3d
    3d38:	9f6c7400 	svcls	0x006c7400
	...
    3d44:	00003d06 	andeq	r3, r0, r6, lsl #26
    3d48:	00003d8a 	andeq	r3, r0, sl, lsl #27
    3d4c:	8a520001 	bhi	1483d58 <__ccfg+0x1463db0>
    3d50:	9000003d 	andls	r0, r0, sp, lsr r0
    3d54:	0200003d 	andeq	r0, r0, #61	; 0x3d
    3d58:	90007000 	andls	r7, r0, r0
    3d5c:	9400003d 	strls	r0, [r0], #-61	; 0xffffffc3
    3d60:	0100003d 	tsteq	r0, sp, lsr r0
    3d64:	3d945200 	lfmcc	f5, 4, [r4]
    3d68:	3d9a0000 	ldccc	0, cr0, [sl]
    3d6c:	00020000 	andeq	r0, r2, r0
    3d70:	3d9c0070 	ldccc	0, cr0, [ip, #448]	; 0x1c0
    3d74:	3da40000 	stccc	0, cr0, [r4]
    3d78:	00010000 	andeq	r0, r1, r0
    3d7c:	003da452 	eorseq	sl, sp, r2, asr r4
    3d80:	003daa00 	eorseq	sl, sp, r0, lsl #20
    3d84:	70000200 	andvc	r0, r0, r0, lsl #4
    3d88:	003dac00 	eorseq	sl, sp, r0, lsl #24
    3d8c:	003db400 	eorseq	fp, sp, r0, lsl #8
    3d90:	52000100 	andpl	r0, r0, #0, 2
	...
    3d9c:	00003cc0 	andeq	r3, r0, r0, asr #25
    3da0:	00003d0c 	andeq	r3, r0, ip, lsl #26
    3da4:	9f300002 	svcls	0x00300002
    3da8:	00003d0c 	andeq	r3, r0, ip, lsl #26
    3dac:	00003d10 	andeq	r3, r0, r0, lsl sp
    3db0:	10540001 	subsne	r0, r4, r1
    3db4:	1600003d 			; <UNDEFINED> instruction: 0x1600003d
    3db8:	0200003d 	andeq	r0, r0, #61	; 0x3d
    3dbc:	169f3000 	ldrne	r3, [pc], r0
    3dc0:	b400003d 	strlt	r0, [r0], #-61	; 0xffffffc3
    3dc4:	0100003d 	tsteq	r0, sp, lsr r0
    3dc8:	00005400 	andeq	r5, r0, r0, lsl #8
    3dcc:	00000000 	andeq	r0, r0, r0
    3dd0:	3dd80000 	ldclcc	0, cr0, [r8]
    3dd4:	3de20000 	stclcc	0, cr0, [r2]
    3dd8:	00010000 	andeq	r0, r1, r0
    3ddc:	003de250 	eorseq	lr, sp, r0, asr r2
    3de0:	003df400 	eorseq	pc, sp, r0, lsl #8
    3de4:	75000300 	strvc	r0, [r0, #-768]	; 0xfffffd00
    3de8:	3df49f70 	ldclcc	15, cr9, [r4, #448]!	; 0x1c0
    3dec:	3df80000 	ldclcc	0, cr0, [r8]
    3df0:	00040000 	andeq	r0, r4, r0
    3df4:	9f5001f3 	svcls	0x005001f3
	...
    3e08:	9f300002 	svcls	0x00300002
	...
    3e14:	9f310002 	svcls	0x00310002
	...
    3e20:	9f320002 	svcls	0x00320002
	...
    3e2c:	9f330002 	svcls	0x00330002
	...
    3e38:	9f340002 	svcls	0x00340002
	...
    3e44:	9f350002 	svcls	0x00350002
	...
    3e50:	9f360002 	svcls	0x00360002
	...
    3e5c:	9f370002 	svcls	0x00370002
	...
    3e68:	9f380002 	svcls	0x00380002
	...
    3e74:	9f390002 	svcls	0x00390002
	...
    3e80:	9f3a0002 	svcls	0x003a0002
	...
    3e8c:	9f3b0002 	svcls	0x003b0002
	...
    3e98:	9f3c0002 	svcls	0x003c0002
	...
    3ea4:	00003e14 	andeq	r3, r0, r4, lsl lr
    3ea8:	00003e52 	andeq	r3, r0, r2, asr lr
    3eac:	52500001 	subspl	r0, r0, #1
    3eb0:	b400003e 	strlt	r0, [r0], #-62	; 0xffffffc2
    3eb4:	0100003e 	tsteq	r0, lr, lsr r0
    3eb8:	3eb45500 	cdpcc	5, 11, cr5, cr4, cr0, {0}
    3ebc:	3ee80000 	cdpcc	0, 14, cr0, cr8, cr0, {0}
    3ec0:	00040000 	andeq	r0, r4, r0
    3ec4:	9f5001f3 	svcls	0x005001f3
	...
    3ed0:	00003e50 	andeq	r3, r0, r0, asr lr
    3ed4:	00003eb4 			; <UNDEFINED> instruction: 0x00003eb4
    3ed8:	00540001 	subseq	r0, r4, r1
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	66000000 	strvs	r0, [r0], -r0
    3ee4:	6800003e 	stmdavs	r0, {r1, r2, r3, r4, r5}
    3ee8:	0700003e 	smladxeq	r0, lr, r0, r0
    3eec:	0a007300 	beq	20af4 <__ccfg+0xb4c>
    3ef0:	9f1affff 	svcls	0x001affff
	...
    3efc:	00003e76 	andeq	r3, r0, r6, ror lr
    3f00:	00003e90 	muleq	r0, r0, lr
    3f04:	00530001 	subseq	r0, r3, r1
    3f08:	00000000 	andeq	r0, r0, r0
    3f0c:	7a000000 	bvc	3f14 <NOROM_SetupTrimDevice+0x2c>
    3f10:	8600003e 			; <UNDEFINED> instruction: 0x8600003e
    3f14:	0100003e 	tsteq	r0, lr, lsr r0
    3f18:	3e865200 	cdpcc	2, 8, cr5, cr6, cr0, {0}
    3f1c:	3e8a0000 	cdpcc	0, 8, cr0, cr10, cr0, {0}
    3f20:	00030000 	andeq	r0, r3, r0
    3f24:	8a9f0671 	bhi	fe7c58f0 <_estack+0xde7c08f0>
    3f28:	9200003e 	andls	r0, r0, #62	; 0x3e
    3f2c:	0100003e 	tsteq	r0, lr, lsr r0
    3f30:	00005200 	andeq	r5, r0, r0, lsl #4
    3f34:	00000000 	andeq	r0, r0, r0
    3f38:	3eee0000 	cdpcc	0, 14, cr0, cr14, cr0, {0}
    3f3c:	3f680000 	svccc	0x00680000
    3f40:	00010000 	andeq	r0, r1, r0
    3f44:	00000054 	andeq	r0, r0, r4, asr r0
    3f48:	00000000 	andeq	r0, r0, r0
    3f4c:	003f5400 	eorseq	r5, pc, r0, lsl #8
    3f50:	003f5e00 	eorseq	r5, pc, r0, lsl #28
    3f54:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f60:	00003f8c 	andeq	r3, r0, ip, lsl #31
    3f64:	00003fb2 			; <UNDEFINED> instruction: 0x00003fb2
    3f68:	b2500001 	subslt	r0, r0, #1
    3f6c:	0800003f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5}
    3f70:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    3f74:	5001f300 	andpl	pc, r1, r0, lsl #6
    3f78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	003fb400 	eorseq	fp, pc, r0, lsl #8
    3f84:	003fe800 	eorseq	lr, pc, r0, lsl #16
    3f88:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f94:	00003fb8 			; <UNDEFINED> instruction: 0x00003fb8
    3f98:	00003fc6 	andeq	r3, r0, r6, asr #31
    3f9c:	c6510001 	ldrbgt	r0, [r1], -r1
    3fa0:	c800003f 	stmdagt	r0, {r0, r1, r2, r3, r4, r5}
    3fa4:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
    3fa8:	73007200 	movwvc	r7, #512	; 0x200
    3fac:	c89f1c00 	ldmgt	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    3fb0:	ce00003f 	mcrgt	0, 0, r0, cr0, cr15, {1}
    3fb4:	0100003f 	tsteq	r0, pc, lsr r0
    3fb8:	00005100 	andeq	r5, r0, r0, lsl #2
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	3fa40000 	svccc	0x00a40000
    3fc4:	3fb60000 	svccc	0x00b60000
    3fc8:	00010000 	andeq	r0, r1, r0
    3fcc:	00000053 	andeq	r0, r0, r3, asr r0
    3fd0:	00000000 	andeq	r0, r0, r0
    3fd4:	00400800 	subeq	r0, r0, r0, lsl #16
    3fd8:	00402b00 	subeq	r2, r0, r0, lsl #22
    3fdc:	50000100 	andpl	r0, r0, r0, lsl #2
    3fe0:	0000402b 	andeq	r4, r0, fp, lsr #32
    3fe4:	00004036 	andeq	r4, r0, r6, lsr r0
    3fe8:	36540001 	ldrbcc	r0, [r4], -r1
    3fec:	3e000040 	cdpcc	0, 0, cr0, cr0, cr0, {2}
    3ff0:	01000040 	tsteq	r0, r0, asr #32
    3ff4:	403e5000 	eorsmi	r5, lr, r0
    3ff8:	408a0000 	addmi	r0, sl, r0
    3ffc:	00010000 	andeq	r0, r1, r0
    4000:	00000054 	andeq	r0, r0, r4, asr r0
    4004:	00000000 	andeq	r0, r0, r0
    4008:	00404400 	subeq	r4, r0, r0, lsl #8
    400c:	00404800 	subeq	r4, r0, r0, lsl #16
    4010:	53000100 	movwpl	r0, #256	; 0x100
    4014:	0000404a 	andeq	r4, r0, sl, asr #32
    4018:	00004058 	andeq	r4, r0, r8, asr r0
    401c:	5a530001 	bpl	14c4028 <__ccfg+0x14a4080>
    4020:	62000040 	andvs	r0, r0, #64	; 0x40
    4024:	01000040 	tsteq	r0, r0, asr #32
    4028:	00005300 	andeq	r5, r0, r0, lsl #6
    402c:	00000000 	andeq	r0, r0, r0
    4030:	40440000 	submi	r0, r4, r0
    4034:	40780000 	rsbsmi	r0, r8, r0
    4038:	00050000 	andeq	r0, r5, r0
    403c:	264c0074 			; <UNDEFINED> instruction: 0x264c0074
    4040:	0040789f 	umaaleq	r7, r0, pc, r8	; <UNPREDICTABLE>
    4044:	0040b400 	subeq	fp, r0, r0, lsl #8
    4048:	f3000600 	vmax.u8	d0, d0, d0
    404c:	264c5001 	strbcs	r5, [ip], -r1
    4050:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4054:	00000000 	andeq	r0, r0, r0
    4058:	00403e00 	subeq	r3, r0, r0, lsl #28
    405c:	00404800 	subeq	r4, r0, r0, lsl #16
    4060:	53000100 	movwpl	r0, #256	; 0x100
	...
    406c:	000040b4 	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
    4070:	000040c8 	andeq	r4, r0, r8, asr #1
    4074:	c8500001 	ldmdagt	r0, {r0}^
    4078:	10000040 	andne	r0, r0, r0, asr #32
    407c:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
    4080:	5001f300 	andpl	pc, r1, r0, lsl #6
    4084:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4088:	00000000 	andeq	r0, r0, r0
    408c:	0040ba00 	subeq	fp, r0, r0, lsl #20
    4090:	0040c200 	subeq	ip, r0, r0, lsl #4
    4094:	53000100 	movwpl	r0, #256	; 0x100
	...
    40a0:	000040be 	strheq	r4, [r0], -lr
    40a4:	000040d0 	ldrdeq	r4, [r0], -r0
    40a8:	d0520001 	subsle	r0, r2, r1
    40ac:	d2000040 	andle	r0, r0, #64	; 0x40
    40b0:	05000040 	streq	r0, [r0, #-64]	; 0xffffffc0
    40b4:	31007200 	mrscc	r7, R8_usr
    40b8:	40d29f25 	sbcsmi	r9, r2, r5, lsr #30
    40bc:	40d80000 	sbcsmi	r0, r8, r0
    40c0:	00010000 	andeq	r0, r1, r0
    40c4:	0040dc52 	subeq	sp, r0, r2, asr ip
    40c8:	0040ee00 	subeq	lr, r0, r0, lsl #28
    40cc:	52000100 	andpl	r0, r0, #0, 2
    40d0:	000040f2 	strdeq	r4, [r0], -r2
    40d4:	000040fc 	strdeq	r4, [r0], -ip
    40d8:	fe520001 	cdp2	0, 5, cr0, cr2, cr1, {0}
    40dc:	10000040 	andne	r0, r0, r0, asr #32
    40e0:	01000041 	tsteq	r0, r1, asr #32
    40e4:	00005200 	andeq	r5, r0, r0, lsl #4
    40e8:	00000000 	andeq	r0, r0, r0
    40ec:	40c20000 	sbcmi	r0, r2, r0
    40f0:	40cc0000 	sbcmi	r0, ip, r0
    40f4:	00010000 	andeq	r0, r1, r0
    40f8:	0040cc53 	subeq	ip, r0, r3, asr ip
    40fc:	0040ce00 	subeq	ip, r0, r0, lsl #28
    4100:	73000500 	movwvc	r0, #1280	; 0x500
    4104:	9f253100 	svcls	0x00253100
    4108:	000040ce 	andeq	r4, r0, lr, asr #1
    410c:	000040d0 	ldrdeq	r4, [r0], -r0
    4110:	d0530001 	subsle	r0, r3, r1
    4114:	dc000040 	stcle	0, cr0, [r0], {64}	; 0x40
    4118:	04000040 	streq	r0, [r0], #-64	; 0xffffffc0
    411c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4120:	0040dc9f 	umaaleq	sp, r0, pc, ip	; <UNPREDICTABLE>
    4124:	0040e200 	subeq	lr, r0, r0, lsl #4
    4128:	53000100 	movwpl	r0, #256	; 0x100
    412c:	000040e6 	andeq	r4, r0, r6, ror #1
    4130:	000040ec 	andeq	r4, r0, ip, ror #1
    4134:	ec530001 	mrrc	0, 0, r0, r3, cr1
    4138:	fe000040 	cdp2	0, 0, cr0, cr0, cr0, {2}
    413c:	02000040 	andeq	r0, r0, #64	; 0x40
    4140:	fe9f3100 	cdp2	1, 9, cr3, cr15, cr0, {0}
    4144:	10000040 	andne	r0, r0, r0, asr #32
    4148:	01000041 	tsteq	r0, r1, asr #32
    414c:	00005300 	andeq	r5, r0, r0, lsl #6
    4150:	00000000 	andeq	r0, r0, r0
    4154:	40c20000 	sbcmi	r0, r2, r0
    4158:	40c80000 	sbcmi	r0, r8, r0
    415c:	00020000 	andeq	r0, r2, r0
    4160:	40c89f30 	sbcmi	r9, r8, r0, lsr pc
    4164:	41040000 	mrsmi	r0, (UNDEF: 4)
    4168:	00010000 	andeq	r0, r1, r0
    416c:	00000050 	andeq	r0, r0, r0, asr r0
    4170:	00000000 	andeq	r0, r0, r0
    4174:	00410400 	subeq	r0, r1, r0, lsl #8
    4178:	00410800 	subeq	r0, r1, r0, lsl #16
    417c:	72000800 	andvc	r0, r0, #0, 16
    4180:	73244000 			; <UNDEFINED> instruction: 0x73244000
    4184:	089f2100 	ldmeq	pc, {r8, sp}	; <UNPREDICTABLE>
    4188:	10000041 	andne	r0, r0, r1, asr #32
    418c:	01000041 	tsteq	r0, r1, asr #32
    4190:	00005000 	andeq	r5, r0, r0
    4194:	00000000 	andeq	r0, r0, r0
    4198:	411a0000 	tstmi	sl, r0
    419c:	411e0000 	tstmi	lr, r0
    41a0:	000a0000 	andeq	r0, sl, r0
    41a4:	1a330070 	bne	cc436c <__ccfg+0xca43c4>
    41a8:	00732438 	rsbseq	r2, r3, r8, lsr r4
    41ac:	41229f21 			; <UNDEFINED> instruction: 0x41229f21
    41b0:	41280000 			; <UNDEFINED> instruction: 0x41280000
    41b4:	00010000 	andeq	r0, r1, r0
    41b8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    41c8:	70000700 	andvc	r0, r0, r0, lsl #14
    41cc:	3fff0a00 	svccc	0x00ff0a00
    41d0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    41d4:	00000000 	andeq	r0, r0, r0
    41d8:	412c0000 			; <UNDEFINED> instruction: 0x412c0000
    41dc:	41300000 	teqmi	r0, r0
    41e0:	000f0000 	andeq	r0, pc, r0
    41e4:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    41e8:	1100701a 	tstne	r0, sl, lsl r0
    41ec:	67f3f880 	ldrbvs	pc, [r3, r0, lsl #17]!	; <UNPREDICTABLE>
    41f0:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    41f4:	00000000 	andeq	r0, r0, r0
    41f8:	2c000000 	stccs	0, cr0, [r0], {-0}
    41fc:	30000041 	andcc	r0, r0, r1, asr #32
    4200:	01000041 	tsteq	r0, r1, asr #32
    4204:	00005000 	andeq	r5, r0, r0
    4208:	00000000 	andeq	r0, r0, r0
    420c:	413c0000 	teqmi	ip, r0
    4210:	41400000 	mrsmi	r0, (UNDEF: 64)
    4214:	000f0000 	andeq	r0, pc, r0
    4218:	3f080070 	svccc	0x00080070
    421c:	0c00701a 	stceq	0, cr7, [r0], {26}
    4220:	00fcffc0 	rscseq	pc, ip, r0, asr #31
    4224:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    4228:	00000000 	andeq	r0, r0, r0
    422c:	3c000000 	stccc	0, cr0, [r0], {-0}
    4230:	40000041 	andmi	r0, r0, r1, asr #32
    4234:	01000041 	tsteq	r0, r1, asr #32
    4238:	00005000 	andeq	r5, r0, r0
    423c:	00000000 	andeq	r0, r0, r0
    4240:	414c0000 	mrsmi	r0, (UNDEF: 76)
    4244:	41a20000 			; <UNDEFINED> instruction: 0x41a20000
    4248:	00010000 	andeq	r0, r1, r0
    424c:	0041a250 	subeq	sl, r1, r0, asr r2
    4250:	0041b000 	subeq	fp, r1, r0
    4254:	f3000400 	vshl.u8	d0, d0, d0
    4258:	009f5001 	addseq	r5, pc, r1
    425c:	00000000 	andeq	r0, r0, r0
    4260:	8c000000 	stchi	0, cr0, [r0], {-0}
    4264:	94000041 	strls	r0, [r0], #-65	; 0xffffffbf
    4268:	17000041 	strne	r0, [r0, -r1, asr #32]
    426c:	0a007400 	beq	21274 <__ccfg+0x12cc>
    4270:	741aff00 	ldrvc	pc, [sl], #-3840	; 0xfffff100
    4274:	1af00800 	bne	ffc0627c <_estack+0xdfc0127c>
    4278:	44007221 	strmi	r7, [r0], #-545	; 0xfffffddf
    427c:	00732124 	rsbseq	r2, r3, r4, lsr #2
    4280:	9f212440 	svcls	0x00212440
    4284:	00004198 	muleq	r0, r8, r1
    4288:	000041b0 			; <UNDEFINED> instruction: 0x000041b0
    428c:	00530001 	subseq	r0, r3, r1
    4290:	00000000 	andeq	r0, r0, r0
    4294:	54000000 	strpl	r0, [r0], #-0
    4298:	9e000041 	cdpls	0, 0, cr0, cr0, cr1, {2}
    429c:	01000041 	tsteq	r0, r1, asr #32
    42a0:	00005400 	andeq	r5, r0, r0, lsl #8
    42a4:	00000000 	andeq	r0, r0, r0
    42a8:	415a0000 	cmpmi	sl, r0
    42ac:	416e0000 	cmnmi	lr, r0
    42b0:	00010000 	andeq	r0, r1, r0
    42b4:	00416e52 	subeq	r6, r1, r2, asr lr
    42b8:	00417a00 	subeq	r7, r1, r0, lsl #20
    42bc:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    42c0:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    42c4:	00418c9f 	umaaleq	r8, r1, pc, ip	; <UNPREDICTABLE>
    42c8:	00419400 	subeq	r9, r1, r0, lsl #8
    42cc:	52000100 	andpl	r0, r0, #0, 2
	...
    42d8:	00004162 	andeq	r4, r0, r2, ror #2
    42dc:	00004180 	andeq	r4, r0, r0, lsl #3
    42e0:	80530001 	subshi	r0, r3, r1
    42e4:	8c000041 	stchi	0, cr0, [r0], {65}	; 0x41
    42e8:	06000041 	streq	r0, [r0], -r1, asr #32
    42ec:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    42f0:	8c9f24f0 	cfldrshi	mvf2, [pc], {240}	; 0xf0
    42f4:	98000041 	stmdals	r0, {r0, r6}
    42f8:	01000041 	tsteq	r0, r1, asr #32
    42fc:	00005300 	andeq	r5, r0, r0, lsl #6
    4300:	00000000 	andeq	r0, r0, r0
    4304:	416c0000 	cmnmi	ip, r0
    4308:	416e0000 	cmnmi	lr, r0
    430c:	00060000 	andeq	r0, r6, r0
    4310:	00720076 	rsbseq	r0, r2, r6, ror r0
    4314:	416e9f22 	cmnmi	lr, r2, lsr #30
    4318:	41760000 	cmnmi	r6, r0
    431c:	00010000 	andeq	r0, r1, r0
    4320:	00417652 	subeq	r7, r1, r2, asr r6
    4324:	00417800 	subeq	r7, r1, r0, lsl #16
    4328:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    432c:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    4330:	9f220076 	svcls	0x00220076
    4334:	00004178 	andeq	r4, r0, r8, ror r1
    4338:	0000417a 	andeq	r4, r0, sl, ror r1
    433c:	7e550001 	cdpvc	0, 5, cr0, cr5, cr1, {0}
    4340:	80000041 	andhi	r0, r0, r1, asr #32
    4344:	06000041 	streq	r0, [r0], -r1, asr #32
    4348:	73007100 	movwvc	r7, #256	; 0x100
    434c:	809f2200 	addshi	r2, pc, r0, lsl #4
    4350:	88000041 	stmdahi	r0, {r0, r6}
    4354:	01000041 	tsteq	r0, r1, asr #32
    4358:	41885300 	orrmi	r5, r8, r0, lsl #6
    435c:	418a0000 	orrmi	r0, sl, r0
    4360:	00090000 	andeq	r0, r9, r0
    4364:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    4368:	22007124 	andcs	r7, r0, #36, 2
    436c:	00418a9f 	umaaleq	r8, r1, pc, sl	; <UNPREDICTABLE>
    4370:	00418c00 	subeq	r8, r1, r0, lsl #24
    4374:	30000200 	andcc	r0, r0, r0, lsl #4
    4378:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    437c:	00000000 	andeq	r0, r0, r0
    4380:	0041b000 	subeq	fp, r1, r0
    4384:	0041b800 	subeq	fp, r1, r0, lsl #16
    4388:	50000100 	andpl	r0, r0, r0, lsl #2
    438c:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    4390:	000041c4 	andeq	r4, r0, r4, asr #3
    4394:	01f30004 	mvnseq	r0, r4
    4398:	00009f50 	andeq	r9, r0, r0, asr pc
    439c:	00000000 	andeq	r0, r0, r0
    43a0:	41b00000 	movsmi	r0, r0
    43a4:	41be0000 			; <UNDEFINED> instruction: 0x41be0000
    43a8:	00020000 	andeq	r0, r2, r0
    43ac:	41be9f30 			; <UNDEFINED> instruction: 0x41be9f30
    43b0:	41c40000 	bicmi	r0, r4, r0
    43b4:	00010000 	andeq	r0, r1, r0
    43b8:	00000050 	andeq	r0, r0, r0, asr r0
    43bc:	00000000 	andeq	r0, r0, r0
    43c0:	0041b200 	subeq	fp, r1, r0, lsl #4
    43c4:	0041b800 	subeq	fp, r1, r0, lsl #16
    43c8:	50000100 	andpl	r0, r0, r0, lsl #2
    43cc:	000041b8 			; <UNDEFINED> instruction: 0x000041b8
    43d0:	000041c4 	andeq	r4, r0, r4, asr #3
    43d4:	01f30004 	mvnseq	r0, r4
    43d8:	00009f50 	andeq	r9, r0, r0, asr pc
    43dc:	00000000 	andeq	r0, r0, r0
    43e0:	41bc0000 			; <UNDEFINED> instruction: 0x41bc0000
    43e4:	41be0000 			; <UNDEFINED> instruction: 0x41be0000
    43e8:	00010000 	andeq	r0, r1, r0
    43ec:	00000050 	andeq	r0, r0, r0, asr r0
    43f0:	00000000 	andeq	r0, r0, r0
    43f4:	0041c400 	subeq	ip, r1, r0, lsl #8
    43f8:	0041cc00 	subeq	ip, r1, r0, lsl #24
    43fc:	50000100 	andpl	r0, r0, r0, lsl #2
    4400:	000041cc 	andeq	r4, r0, ip, asr #3
    4404:	000041d8 	ldrdeq	r4, [r0], -r8
    4408:	01f30004 	mvnseq	r0, r4
    440c:	00009f50 	andeq	r9, r0, r0, asr pc
    4410:	00000000 	andeq	r0, r0, r0
    4414:	41c40000 	bicmi	r0, r4, r0
    4418:	41d20000 	bicsmi	r0, r2, r0
    441c:	00020000 	andeq	r0, r2, r0
    4420:	41d29f31 	bicsmi	r9, r2, r1, lsr pc
    4424:	41d80000 	bicsmi	r0, r8, r0
    4428:	00010000 	andeq	r0, r1, r0
    442c:	00000050 	andeq	r0, r0, r0, asr r0
    4430:	00000000 	andeq	r0, r0, r0
    4434:	0041c600 	subeq	ip, r1, r0, lsl #12
    4438:	0041cc00 	subeq	ip, r1, r0, lsl #24
    443c:	50000100 	andpl	r0, r0, r0, lsl #2
    4440:	000041cc 	andeq	r4, r0, ip, asr #3
    4444:	000041d8 	ldrdeq	r4, [r0], -r8
    4448:	01f30004 	mvnseq	r0, r4
    444c:	00009f50 	andeq	r9, r0, r0, asr pc
    4450:	00000000 	andeq	r0, r0, r0
    4454:	41d00000 	bicsmi	r0, r0, r0
    4458:	41d20000 	bicsmi	r0, r2, r0
    445c:	00010000 	andeq	r0, r1, r0
    4460:	00000050 	andeq	r0, r0, r0, asr r0
    4464:	00000000 	andeq	r0, r0, r0
    4468:	0041d800 	subeq	sp, r1, r0, lsl #16
    446c:	0041e000 	subeq	lr, r1, r0
    4470:	50000100 	andpl	r0, r0, r0, lsl #2
    4474:	000041e0 	andeq	r4, r0, r0, ror #3
    4478:	000041ec 	andeq	r4, r0, ip, ror #3
    447c:	01f30004 	mvnseq	r0, r4
    4480:	00009f50 	andeq	r9, r0, r0, asr pc
    4484:	00000000 	andeq	r0, r0, r0
    4488:	41d80000 	bicsmi	r0, r8, r0
    448c:	41e60000 	mvnmi	r0, r0
    4490:	00020000 	andeq	r0, r2, r0
    4494:	41e69f31 	mvnmi	r9, r1, lsr pc
    4498:	41ec0000 	mvnmi	r0, r0
    449c:	00010000 	andeq	r0, r1, r0
    44a0:	00000050 	andeq	r0, r0, r0, asr r0
    44a4:	00000000 	andeq	r0, r0, r0
    44a8:	0041da00 	subeq	sp, r1, r0, lsl #20
    44ac:	0041e000 	subeq	lr, r1, r0
    44b0:	50000100 	andpl	r0, r0, r0, lsl #2
    44b4:	000041e0 	andeq	r4, r0, r0, ror #3
    44b8:	000041ec 	andeq	r4, r0, ip, ror #3
    44bc:	01f30004 	mvnseq	r0, r4
    44c0:	00009f50 	andeq	r9, r0, r0, asr pc
    44c4:	00000000 	andeq	r0, r0, r0
    44c8:	41e40000 	mvnmi	r0, r0
    44cc:	41e60000 	mvnmi	r0, r0
    44d0:	00010000 	andeq	r0, r1, r0
    44d4:	00000050 	andeq	r0, r0, r0, asr r0
    44d8:	00000000 	andeq	r0, r0, r0
    44dc:	0041ec00 	subeq	lr, r1, r0, lsl #24
    44e0:	0041f800 	subeq	pc, r1, r0, lsl #16
    44e4:	50000100 	andpl	r0, r0, r0, lsl #2
    44e8:	000041f8 	strdeq	r4, [r0], -r8
    44ec:	00004214 	andeq	r4, r0, r4, lsl r2
    44f0:	01f30004 	mvnseq	r0, r4
    44f4:	00009f50 	andeq	r9, r0, r0, asr pc
    44f8:	00000000 	andeq	r0, r0, r0
    44fc:	41ec0000 	mvnmi	r0, r0
    4500:	420e0000 	andmi	r0, lr, #0
    4504:	00020000 	andeq	r0, r2, r0
    4508:	420e9f30 	andmi	r9, lr, #48, 30	; 0xc0
    450c:	42140000 	andsmi	r0, r4, #0
    4510:	00010000 	andeq	r0, r1, r0
    4514:	00000050 	andeq	r0, r0, r0, asr r0
    4518:	00000000 	andeq	r0, r0, r0
    451c:	0041ee00 	subeq	lr, r1, r0, lsl #28
    4520:	0041f800 	subeq	pc, r1, r0, lsl #16
    4524:	50000100 	andpl	r0, r0, r0, lsl #2
    4528:	000041f8 	strdeq	r4, [r0], -r8
    452c:	00004214 	andeq	r4, r0, r4, lsl r2
    4530:	01f30004 	mvnseq	r0, r4
    4534:	00009f50 	andeq	r9, r0, r0, asr pc
    4538:	00000000 	andeq	r0, r0, r0
    453c:	42000000 	andmi	r0, r0, #0
    4540:	42080000 	andmi	r0, r8, #0
    4544:	00100000 	andseq	r0, r0, r0
    4548:	464c0073 			; <UNDEFINED> instruction: 0x464c0073
    454c:	25481a24 	strbcs	r1, [r8, #-2596]	; 0xfffff5dc
    4550:	00722432 	rsbseq	r2, r2, r2, lsr r4
    4554:	9f212438 	svcls	0x00212438
    4558:	0000420a 	andeq	r4, r0, sl, lsl #4
    455c:	0000420e 	andeq	r4, r0, lr, lsl #4
    4560:	00500001 	subseq	r0, r0, r1
    4564:	00000000 	andeq	r0, r0, r0
    4568:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    456c:	08000041 	stmdaeq	r0, {r0, r6}
    4570:	01000042 	tsteq	r0, r2, asr #32
    4574:	00005300 	andeq	r5, r0, r0, lsl #6
    4578:	00000000 	andeq	r0, r0, r0
    457c:	42180000 	andsmi	r0, r8, #0
    4580:	421c0000 	andsmi	r0, ip, #0
    4584:	00090000 	andeq	r0, r9, r0
    4588:	40480070 	submi	r0, r8, r0, ror r0
    458c:	25431a24 	strbcs	r1, [r3, #-2596]	; 0xfffff5dc
    4590:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4594:	00000000 	andeq	r0, r0, r0
    4598:	00422400 	subeq	r2, r2, r0, lsl #8
    459c:	00423000 	subeq	r3, r2, r0
    45a0:	50000100 	andpl	r0, r0, r0, lsl #2
    45a4:	00004230 	andeq	r4, r0, r0, lsr r2
    45a8:	00004250 	andeq	r4, r0, r0, asr r2
    45ac:	01f30004 	mvnseq	r0, r4
    45b0:	00009f50 	andeq	r9, r0, r0, asr pc
    45b4:	00000000 	andeq	r0, r0, r0
    45b8:	42240000 	eormi	r0, r4, #0
    45bc:	42460000 	submi	r0, r6, #0
    45c0:	00060000 	andeq	r0, r6, r0
    45c4:	3f80000c 	svccc	0x0080000c
    45c8:	42469f40 	submi	r9, r6, #64, 30	; 0x100
    45cc:	42500000 	subsmi	r0, r0, #0
    45d0:	00010000 	andeq	r0, r1, r0
    45d4:	00000050 	andeq	r0, r0, r0, asr r0
    45d8:	00000000 	andeq	r0, r0, r0
    45dc:	00422600 	subeq	r2, r2, r0, lsl #12
    45e0:	00423000 	subeq	r3, r2, r0
    45e4:	50000100 	andpl	r0, r0, r0, lsl #2
    45e8:	00004230 	andeq	r4, r0, r0, lsr r2
    45ec:	00004250 	andeq	r4, r0, r0, asr r2
    45f0:	01f30004 	mvnseq	r0, r4
    45f4:	00009f50 	andeq	r9, r0, r0, asr pc
    45f8:	00000000 	andeq	r0, r0, r0
    45fc:	42340000 	eorsmi	r0, r4, #0
    4600:	423a0000 	eorsmi	r0, sl, #0
    4604:	00100000 	andseq	r0, r0, r0
    4608:	f00a0073 			; <UNDEFINED> instruction: 0xf00a0073
    460c:	25341a03 	ldrcs	r1, [r4, #-2563]!	; 0xfffff5fd
    4610:	00722440 	rsbseq	r2, r2, r0, asr #8
    4614:	9f212446 	svcls	0x00212446
    4618:	00004244 	andeq	r4, r0, r4, asr #4
    461c:	00004246 	andeq	r4, r0, r6, asr #4
    4620:	00500001 	subseq	r0, r0, r1
    4624:	00000000 	andeq	r0, r0, r0
    4628:	2c000000 	stccs	0, cr0, [r0], {-0}
    462c:	3a000042 	bcc	473c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d8>
    4630:	01000042 	tsteq	r0, r2, asr #32
    4634:	00005300 	andeq	r5, r0, r0, lsl #6
    4638:	00000000 	andeq	r0, r0, r0
    463c:	42500000 	subsmi	r0, r0, #0
    4640:	42580000 	subsmi	r0, r8, #0
    4644:	00010000 	andeq	r0, r1, r0
    4648:	00425850 	subeq	r5, r2, r0, asr r8
    464c:	00426400 	subeq	r6, r2, r0, lsl #8
    4650:	f3000400 	vshl.u8	d0, d0, d0
    4654:	009f5001 	addseq	r5, pc, r1
    4658:	00000000 	andeq	r0, r0, r0
    465c:	50000000 	andpl	r0, r0, r0
    4660:	5e000042 	cdppl	0, 0, cr0, cr0, cr2, {2}
    4664:	02000042 	andeq	r0, r0, #66	; 0x42
    4668:	5e9f3000 	cdppl	0, 9, cr3, cr15, cr0, {0}
    466c:	64000042 	strvs	r0, [r0], #-66	; 0xffffffbe
    4670:	01000042 	tsteq	r0, r2, asr #32
    4674:	00005000 	andeq	r5, r0, r0
    4678:	00000000 	andeq	r0, r0, r0
    467c:	42520000 	subsmi	r0, r2, #0
    4680:	42580000 	subsmi	r0, r8, #0
    4684:	00010000 	andeq	r0, r1, r0
    4688:	00425850 	subeq	r5, r2, r0, asr r8
    468c:	00426400 	subeq	r6, r2, r0, lsl #8
    4690:	f3000400 	vshl.u8	d0, d0, d0
    4694:	009f5001 	addseq	r5, pc, r1
    4698:	00000000 	andeq	r0, r0, r0
    469c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    46a0:	5e000042 	cdppl	0, 0, cr0, cr0, cr2, {2}
    46a4:	01000042 	tsteq	r0, r2, asr #32
    46a8:	00005000 	andeq	r5, r0, r0
    46ac:	00000000 	andeq	r0, r0, r0
    46b0:	42640000 	rsbmi	r0, r4, #0
    46b4:	426c0000 	rsbmi	r0, ip, #0
    46b8:	00010000 	andeq	r0, r1, r0
    46bc:	00426c50 	subeq	r6, r2, r0, asr ip
    46c0:	00427800 	subeq	r7, r2, r0, lsl #16
    46c4:	f3000400 	vshl.u8	d0, d0, d0
    46c8:	009f5001 	addseq	r5, pc, r1
    46cc:	00000000 	andeq	r0, r0, r0
    46d0:	64000000 	strvs	r0, [r0], #-0
    46d4:	72000042 	andvc	r0, r0, #66	; 0x42
    46d8:	02000042 	andeq	r0, r0, #66	; 0x42
    46dc:	729f3000 	addsvc	r3, pc, #0
    46e0:	78000042 	stmdavc	r0, {r1, r6}
    46e4:	01000042 	tsteq	r0, r2, asr #32
    46e8:	00005000 	andeq	r5, r0, r0
    46ec:	00000000 	andeq	r0, r0, r0
    46f0:	42660000 	rsbmi	r0, r6, #0
    46f4:	426c0000 	rsbmi	r0, ip, #0
    46f8:	00010000 	andeq	r0, r1, r0
    46fc:	00426c50 	subeq	r6, r2, r0, asr ip
    4700:	00427800 	subeq	r7, r2, r0, lsl #16
    4704:	f3000400 	vshl.u8	d0, d0, d0
    4708:	009f5001 	addseq	r5, pc, r1
    470c:	00000000 	andeq	r0, r0, r0
    4710:	70000000 	andvc	r0, r0, r0
    4714:	72000042 	andvc	r0, r0, #66	; 0x42
    4718:	01000042 	tsteq	r0, r2, asr #32
    471c:	00005000 	andeq	r5, r0, r0
    4720:	00000000 	andeq	r0, r0, r0
    4724:	42780000 	rsbsmi	r0, r8, #0
    4728:	427e0000 	rsbsmi	r0, lr, #0
    472c:	00010000 	andeq	r0, r1, r0
    4730:	00427e50 	subeq	r7, r2, r0, asr lr
    4734:	00436800 	subeq	r6, r3, r0, lsl #16
    4738:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    473c:	00004368 	andeq	r4, r0, r8, ror #6
    4740:	00004388 	andeq	r4, r0, r8, lsl #7
    4744:	01f30004 	mvnseq	r0, r4
    4748:	00009f50 	andeq	r9, r0, r0, asr pc
    474c:	00000000 	andeq	r0, r0, r0
    4750:	42780000 	rsbsmi	r0, r8, #0
    4754:	42810000 	addmi	r0, r1, #0
    4758:	00010000 	andeq	r0, r1, r0
    475c:	00428151 	subeq	r8, r2, r1, asr r1
    4760:	00438800 	subeq	r8, r3, r0, lsl #16
    4764:	f3000400 	vshl.u8	d0, d0, d0
    4768:	009f5101 	addseq	r5, pc, r1, lsl #2
    476c:	00000000 	andeq	r0, r0, r0
    4770:	86000000 	strhi	r0, [r0], -r0
    4774:	8a000042 	bhi	4884 <NOROM_ChipInfo_GetHwRevision+0x3c>
    4778:	01000042 	tsteq	r0, r2, asr #32
    477c:	428a5000 	addmi	r5, sl, #0
    4780:	428d0000 	addmi	r0, sp, #0
    4784:	00010000 	andeq	r0, r1, r0
    4788:	00429252 	subeq	r9, r2, r2, asr r2
    478c:	00429600 	subeq	r9, r2, r0, lsl #12
    4790:	50000100 	andpl	r0, r0, r0, lsl #2
    4794:	000042c0 	andeq	r4, r0, r0, asr #5
    4798:	000042c2 	andeq	r4, r0, r2, asr #5
    479c:	c2500001 	subsgt	r0, r0, #1
    47a0:	c5000042 	strgt	r0, [r0, #-66]	; 0xffffffbe
    47a4:	01000042 	tsteq	r0, r2, asr #32
    47a8:	42ce5200 	sbcmi	r5, lr, #0, 4
    47ac:	42d00000 	sbcsmi	r0, r0, #0
    47b0:	00010000 	andeq	r0, r1, r0
    47b4:	0042d050 	subeq	sp, r2, r0, asr r0
    47b8:	0042d300 	subeq	sp, r2, r0, lsl #6
    47bc:	52000100 	andpl	r0, r0, #0, 2
    47c0:	000042de 	ldrdeq	r4, [r0], -lr
    47c4:	000042e0 	andeq	r4, r0, r0, ror #5
    47c8:	e0500001 	subs	r0, r0, r1
    47cc:	e3000042 	movw	r0, #66	; 0x42
    47d0:	01000042 	tsteq	r0, r2, asr #32
    47d4:	42ea5200 	rscmi	r5, sl, #0, 4
    47d8:	42ec0000 	rscmi	r0, ip, #0
    47dc:	00010000 	andeq	r0, r1, r0
    47e0:	0042fc50 	subeq	pc, r2, r0, asr ip	; <UNPREDICTABLE>
    47e4:	00430000 	subeq	r0, r3, r0
    47e8:	50000100 	andpl	r0, r0, r0, lsl #2
    47ec:	0000430e 	andeq	r4, r0, lr, lsl #6
    47f0:	00004310 	andeq	r4, r0, r0, lsl r3
    47f4:	10500001 	subsne	r0, r0, r1
    47f8:	13000043 	movwne	r0, #67	; 0x43
    47fc:	01000043 	tsteq	r0, r3, asr #32
    4800:	431a5200 	tstmi	sl, #0, 4
    4804:	431c0000 	tstmi	ip, #0
    4808:	00010000 	andeq	r0, r1, r0
    480c:	00432c50 	subeq	r2, r3, r0, asr ip
    4810:	00432e00 	subeq	r2, r3, r0, lsl #28
    4814:	50000100 	andpl	r0, r0, r0, lsl #2
    4818:	0000433e 	andeq	r4, r0, lr, lsr r3
    481c:	00004342 	andeq	r4, r0, r2, asr #6
    4820:	56500001 	ldrbpl	r0, [r0], -r1
    4824:	58000043 	stmdapl	r0, {r0, r1, r6}
    4828:	01000043 	tsteq	r0, r3, asr #32
    482c:	43585000 	cmpmi	r8, #0
    4830:	435b0000 	cmpmi	fp, #0
    4834:	00010000 	andeq	r0, r1, r0
    4838:	00000052 	andeq	r0, r0, r2, asr r0
    483c:	00000000 	andeq	r0, r0, r0
    4840:	0042ae00 	subeq	sl, r2, r0, lsl #28
    4844:	0042b400 	subeq	fp, r2, r0, lsl #8
    4848:	72000700 	andvc	r0, r0, #0, 14
    484c:	3fff0a00 	svccc	0x00ff0a00
    4850:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4854:	00000000 	andeq	r0, r0, r0
    4858:	43a20000 			; <UNDEFINED> instruction: 0x43a20000
    485c:	43ac0000 			; <UNDEFINED> instruction: 0x43ac0000
    4860:	00090000 	andeq	r0, r9, r0
    4864:	040c0073 	streq	r0, [ip], #-115	; 0xffffff8d
    4868:	21200000 			; <UNDEFINED> instruction: 0x21200000
    486c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4870:	00000000 	andeq	r0, r0, r0
    4874:	0043ec00 	subeq	lr, r3, r0, lsl #24
    4878:	0043f400 	subeq	pc, r3, r0, lsl #8
    487c:	50000100 	andpl	r0, r0, r0, lsl #2
    4880:	000043f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4884:	00004414 	andeq	r4, r0, r4, lsl r4
    4888:	01f30004 	mvnseq	r0, r4
    488c:	00009f50 	andeq	r9, r0, r0, asr pc
    4890:	00000000 	andeq	r0, r0, r0
    4894:	44140000 	ldrmi	r0, [r4], #-0
    4898:	443c0000 	ldrtmi	r0, [ip], #-0
    489c:	00010000 	andeq	r0, r1, r0
    48a0:	00443c50 	subeq	r3, r4, r0, asr ip
    48a4:	00447c00 	subeq	r7, r4, r0, lsl #24
    48a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    48ac:	0000447c 	andeq	r4, r0, ip, ror r4
    48b0:	00004484 	andeq	r4, r0, r4, lsl #9
    48b4:	84500001 	ldrbhi	r0, [r0], #-1
    48b8:	ce000044 	cdpgt	0, 0, cr0, cr0, cr4, {2}
    48bc:	01000044 	tsteq	r0, r4, asr #32
    48c0:	44ce5400 	strbmi	r5, [lr], #1024	; 0x400
    48c4:	450a0000 	strmi	r0, [sl, #-0]
    48c8:	00040000 	andeq	r0, r4, r0
    48cc:	9f5001f3 	svcls	0x005001f3
    48d0:	0000450a 	andeq	r4, r0, sl, lsl #10
    48d4:	0000450e 	andeq	r4, r0, lr, lsl #10
    48d8:	0e540001 	cdpeq	0, 5, cr0, cr4, cr1, {0}
    48dc:	64000045 	strvs	r0, [r0], #-69	; 0xffffffbb
    48e0:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
    48e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    48e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48ec:	00000000 	andeq	r0, r0, r0
    48f0:	00442a00 	subeq	r2, r4, r0, lsl #20
    48f4:	00446c00 	subeq	r6, r4, r0, lsl #24
    48f8:	53000100 	movwpl	r0, #256	; 0x100
	...
    4904:	0000449e 	muleq	r0, lr, r4
    4908:	000044a4 	andeq	r4, r0, r4, lsr #9
    490c:	00500001 	subseq	r0, r0, r1
    4910:	00000000 	andeq	r0, r0, r0
    4914:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    4918:	d0000044 	andle	r0, r0, r4, asr #32
    491c:	01000044 	tsteq	r0, r4, asr #32
    4920:	44d05000 	ldrbmi	r5, [r0], #0
    4924:	44e40000 	strbtmi	r0, [r4], #0
    4928:	00010000 	andeq	r0, r1, r0
    492c:	00000054 	andeq	r0, r0, r4, asr r0
    4930:	00000000 	andeq	r0, r0, r0
    4934:	0044e400 	subeq	lr, r4, r0, lsl #8
    4938:	00450400 	subeq	r0, r5, r0, lsl #8
    493c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4950:	00550001 	subseq	r0, r5, r1
    4954:	00000000 	andeq	r0, r0, r0
    4958:	03000000 	movweq	r0, #0
    495c:	9f7f7500 	svcls	0x007f7500
	...
    4968:	00550001 	subseq	r0, r5, r1
    496c:	00000000 	andeq	r0, r0, r0
    4970:	64000000 	strvs	r0, [r0], #-0
    4974:	83000045 	movwhi	r0, #69	; 0x45
    4978:	01000045 	tsteq	r0, r5, asr #32
    497c:	45835000 	strmi	r5, [r3]
    4980:	46440000 	strbmi	r0, [r4], -r0
    4984:	00010000 	andeq	r0, r1, r0
    4988:	00464457 	subeq	r4, r6, r7, asr r4
    498c:	00478400 	subeq	r8, r7, r0, lsl #8
    4990:	f3000400 	vshl.u8	d0, d0, d0
    4994:	009f5001 	addseq	r5, pc, r1
    4998:	00000000 	andeq	r0, r0, r0
    499c:	84000000 	strhi	r0, [r0], #-0
    49a0:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
    49a4:	01000047 	tsteq	r0, r7, asr #32
    49a8:	47065000 	strmi	r5, [r6, -r0]
    49ac:	47400000 	strbmi	r0, [r0, -r0]
    49b0:	00010000 	andeq	r0, r1, r0
    49b4:	00000050 	andeq	r0, r0, r0, asr r0
    49b8:	00000000 	andeq	r0, r0, r0
    49bc:	00462c00 	subeq	r2, r6, r0, lsl #24
    49c0:	00463000 	subeq	r3, r6, r0
    49c4:	70000300 	andvc	r0, r0, r0, lsl #6
    49c8:	46309f71 	shsub16mi	r9, r0, r1
    49cc:	46360000 	ldrtmi	r0, [r6], -r0
    49d0:	00010000 	andeq	r0, r1, r0
    49d4:	00463651 	subeq	r3, r6, r1, asr r6
    49d8:	00465600 	subeq	r5, r6, r0, lsl #12
    49dc:	91000200 	mrsls	r0, R8_usr
    49e0:	00465654 	subeq	r5, r6, r4, asr r6
    49e4:	00466200 	subeq	r6, r6, r0, lsl #4
    49e8:	51000100 	mrspl	r0, (UNDEF: 16)
    49ec:	00004662 	andeq	r4, r0, r2, ror #12
    49f0:	00004664 	andeq	r4, r0, r4, ror #12
    49f4:	54910002 	ldrpl	r0, [r1], #2
    49f8:	00004664 	andeq	r4, r0, r4, ror #12
    49fc:	00004666 	andeq	r4, r0, r6, ror #12
    4a00:	66510001 	ldrbvs	r0, [r1], -r1
    4a04:	0c000046 	stceq	0, cr0, [r0], {70}	; 0x46
    4a08:	02000047 	andeq	r0, r0, #71	; 0x47
    4a0c:	00549100 	subseq	r9, r4, r0, lsl #2
    4a10:	00000000 	andeq	r0, r0, r0
    4a14:	90000000 	andls	r0, r0, r0
    4a18:	ea000045 	b	4b34 <__aeabi_lmul+0x140>
    4a1c:	01000045 	tsteq	r0, r5, asr #32
    4a20:	45f25100 	ldrbmi	r5, [r2, #256]!	; 0x100
    4a24:	45f40000 	ldrbmi	r0, [r4, #0]!
    4a28:	00010000 	andeq	r0, r1, r0
    4a2c:	00000051 	andeq	r0, r0, r1, asr r0
    4a30:	00000000 	andeq	r0, r0, r0
    4a34:	0045e200 	subeq	lr, r5, r0, lsl #4
    4a38:	0045f000 	subeq	pc, r5, r0
    4a3c:	52000100 	andpl	r0, r0, #0, 2
    4a40:	000045f2 	strdeq	r4, [r0], -r2
    4a44:	000046d4 	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4a48:	00520001 	subseq	r0, r2, r1
    4a4c:	00000000 	andeq	r0, r0, r0
    4a50:	e2000000 	and	r0, r0, #0
    4a54:	ca000045 	bgt	4b70 <__aeabi_lmul+0x17c>
    4a58:	01000046 	tsteq	r0, r6, asr #32
    4a5c:	00005300 	andeq	r5, r0, r0, lsl #6
    4a60:	00000000 	andeq	r0, r0, r0
    4a64:	45880000 	strmi	r0, [r8]
    4a68:	46de0000 	ldrbmi	r0, [lr], r0
    4a6c:	00010000 	andeq	r0, r1, r0
    4a70:	00000055 	andeq	r0, r0, r5, asr r0
    4a74:	00000000 	andeq	r0, r0, r0
    4a78:	00458400 	subeq	r8, r5, r0, lsl #8
    4a7c:	00460c00 	subeq	r0, r6, r0, lsl #24
    4a80:	30000200 	andcc	r0, r0, r0, lsl #4
    4a84:	00460c9f 	umaaleq	r0, r6, pc, ip	; <UNPREDICTABLE>
    4a88:	00474000 	subeq	r4, r7, r0
    4a8c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4a98:	00004604 	andeq	r4, r0, r4, lsl #12
    4a9c:	0000460e 	andeq	r4, r0, lr, lsl #12
    4aa0:	00510001 	subseq	r0, r1, r1
    4aa4:	00000000 	andeq	r0, r0, r0
    4aa8:	2c000000 	stccs	0, cr0, [r0], {-0}
    4aac:	7c000046 	stcvc	0, cr0, [r0], {70}	; 0x46
    4ab0:	02000046 	andeq	r0, r0, #70	; 0x46
    4ab4:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    4ab8:	9c000046 	stcls	0, cr0, [r0], {70}	; 0x46
    4abc:	01000046 	tsteq	r0, r6, asr #32
    4ac0:	469c5100 	ldrmi	r5, [ip], r0, lsl #2
    4ac4:	46a20000 	strtmi	r0, [r2], r0
    4ac8:	00020000 	andeq	r0, r2, r0
    4acc:	46a29f30 	ssat16mi	r9, #3, r0
    4ad0:	46dc0000 	ldrbmi	r0, [ip], r0
    4ad4:	00010000 	andeq	r0, r1, r0
    4ad8:	00000051 	andeq	r0, r0, r1, asr r0
    4adc:	00000000 	andeq	r0, r0, r0
    4ae0:	00465800 	subeq	r5, r6, r0, lsl #16
    4ae4:	00465c00 	subeq	r5, r6, r0, lsl #24
    4ae8:	5e000100 	adfpls	f0, f0, f0
    4aec:	00004664 	andeq	r4, r0, r4, ror #12
    4af0:	00004666 	andeq	r4, r0, r6, ror #12
    4af4:	665e0001 	ldrbvs	r0, [lr], -r1
    4af8:	6c000046 	stcvs	0, cr0, [r0], {70}	; 0x46
    4afc:	01000046 	tsteq	r0, r6, asr #32
    4b00:	466c5100 	strbtmi	r5, [ip], -r0, lsl #2
    4b04:	46740000 	ldrbtmi	r0, [r4], -r0
    4b08:	00030000 	andeq	r0, r3, r0
    4b0c:	009f7f71 	addseq	r7, pc, r1, ror pc	; <UNPREDICTABLE>
    4b10:	00000000 	andeq	r0, r0, r0
    4b14:	2c000000 	stccs	0, cr0, [r0], {-0}
    4b18:	56000046 	strpl	r0, [r0], -r6, asr #32
    4b1c:	02000046 	andeq	r0, r0, #70	; 0x46
    4b20:	569f3000 	ldrpl	r3, [pc], r0
    4b24:	60000046 	andvs	r0, r0, r6, asr #32
    4b28:	01000046 	tsteq	r0, r6, asr #32
    4b2c:	46605e00 	strbtmi	r5, [r0], -r0, lsl #28
    4b30:	46620000 	strbtmi	r0, [r2], -r0
    4b34:	00050000 	andeq	r0, r5, r0
    4b38:	26380071 			; <UNDEFINED> instruction: 0x26380071
    4b3c:	0046629f 	umaaleq	r6, r6, pc, r2	; <UNPREDICTABLE>
    4b40:	00466400 	subeq	r6, r6, r0, lsl #8
    4b44:	91000600 	tstls	r0, r0, lsl #12
    4b48:	26380654 			; <UNDEFINED> instruction: 0x26380654
    4b4c:	0046649f 	umaaleq	r6, r6, pc, r4	; <UNPREDICTABLE>
    4b50:	00466600 	subeq	r6, r6, r0, lsl #12
    4b54:	5e000100 	adfpls	f0, f0, f0
    4b58:	00004666 	andeq	r4, r0, r6, ror #12
    4b5c:	0000469c 	muleq	r0, ip, r6
    4b60:	54910006 	ldrpl	r0, [r1], #6
    4b64:	9f263806 	svcls	0x00263806
    4b68:	0000469c 	muleq	r0, ip, r6
    4b6c:	000046a2 	andeq	r4, r0, r2, lsr #13
    4b70:	9f300002 	svcls	0x00300002
    4b74:	000046a2 	andeq	r4, r0, r2, lsr #13
    4b78:	0000470c 	andeq	r4, r0, ip, lsl #14
    4b7c:	005e0001 	subseq	r0, lr, r1
    4b80:	00000000 	andeq	r0, r0, r0
    4b84:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    4b88:	9c000046 	stcls	0, cr0, [r0], {70}	; 0x46
    4b8c:	01000046 	tsteq	r0, r6, asr #32
    4b90:	00005c00 	andeq	r5, r0, r0, lsl #24
    4b94:	00000000 	andeq	r0, r0, r0
    4b98:	46a60000 	strtmi	r0, [r6], r0
    4b9c:	470c0000 	strmi	r0, [ip, -r0]
    4ba0:	00010000 	andeq	r0, r1, r0
    4ba4:	0000005a 	andeq	r0, r0, sl, asr r0
    4ba8:	00000000 	andeq	r0, r0, r0
    4bac:	0046aa00 	subeq	sl, r6, r0, lsl #20
    4bb0:	0046e600 	subeq	lr, r6, r0, lsl #12
    4bb4:	5c000100 	stfpls	f0, [r0], {-0}
    4bb8:	000046e6 	andeq	r4, r0, r6, ror #13
    4bbc:	000046ea 	andeq	r4, r0, sl, ror #13
    4bc0:	00510001 	subseq	r0, r1, r1
    4bc4:	00000000 	andeq	r0, r0, r0
    4bc8:	ea000000 	b	4bd0 <__aeabi_lmul+0x1dc>
    4bcc:	f4000046 	vst4.16	{d0-d3}, [r0], r6
    4bd0:	17000046 	strne	r0, [r0, -r6, asr #32]
    4bd4:	12007100 	andne	r7, r0, #0, 2
    4bd8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4bdc:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    4be0:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4be4:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4be8:	9f131600 	svcls	0x00131600
	...
    4bf4:	00004714 	andeq	r4, r0, r4, lsl r7
    4bf8:	00004720 	andeq	r4, r0, r0, lsr #14
    4bfc:	9f300002 	svcls	0x00300002
    4c00:	00004720 	andeq	r4, r0, r0, lsr #14
    4c04:	00004740 	andeq	r4, r0, r0, asr #14
    4c08:	00510001 	subseq	r0, r1, r1
    4c0c:	00000000 	andeq	r0, r0, r0
    4c10:	16000000 	strne	r0, [r0], -r0
    4c14:	18000047 	stmdane	r0, {r0, r1, r2, r6}
    4c18:	01000047 	tsteq	r0, r7, asr #32
    4c1c:	47185300 	ldrmi	r5, [r8, -r0, lsl #6]
    4c20:	47200000 	strmi	r0, [r0, -r0]!
    4c24:	00020000 	andeq	r0, r2, r0
    4c28:	47209f4f 	strmi	r9, [r0, -pc, asr #30]!
    4c2c:	47300000 	ldrmi	r0, [r0, -r0]!
    4c30:	00010000 	andeq	r0, r1, r0
    4c34:	00473053 	subeq	r3, r7, r3, asr r0
    4c38:	00473400 	subeq	r3, r7, r0, lsl #8
    4c3c:	73000500 	movwvc	r0, #1280	; 0x500
    4c40:	9f253400 	svcls	0x00253400
    4c44:	00004734 	andeq	r4, r0, r4, lsr r7
    4c48:	00004738 	andeq	r4, r0, r8, lsr r7
    4c4c:	00530001 	subseq	r0, r3, r1
    4c50:	00000000 	andeq	r0, r0, r0
    4c54:	2c000000 	stccs	0, cr0, [r0], {-0}
    4c58:	0c000046 	stceq	0, cr0, [r0], {70}	; 0x46
    4c5c:	06000047 	streq	r0, [r0], -r7, asr #32
    4c60:	139c0c00 	orrsne	r0, ip, #0, 24
    4c64:	009f5000 	addseq	r5, pc, r0
    4c68:	00000000 	andeq	r0, r0, r0
    4c6c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    4c70:	a4000045 	strge	r0, [r0], #-69	; 0xffffffbb
    4c74:	01000045 	tsteq	r0, r5, asr #32
    4c78:	00005300 	andeq	r5, r0, r0, lsl #6
    4c7c:	00000000 	andeq	r0, r0, r0
    4c80:	45b80000 	ldrmi	r0, [r8, #0]!
    4c84:	45c40000 	strbmi	r0, [r4]
    4c88:	00010000 	andeq	r0, r1, r0
    4c8c:	00000052 	andeq	r0, r0, r2, asr r0
    4c90:	00000000 	andeq	r0, r0, r0
    4c94:	0045ce00 	subeq	ip, r5, r0, lsl #28
    4c98:	0045da00 	subeq	sp, r5, r0, lsl #20
    4c9c:	52000100 	andpl	r0, r0, #0, 2
	...
    4ca8:	000045da 	ldrdeq	r4, [r0], -sl
    4cac:	000046ca 	andeq	r4, r0, sl, asr #13
    4cb0:	00530001 	subseq	r0, r3, r1
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	92000000 	andls	r0, r0, #0
    4cbc:	9c000047 	stcls	0, cr0, [r0], {71}	; 0x47
    4cc0:	01000047 	tsteq	r0, r7, asr #32
    4cc4:	479c5000 	ldrmi	r5, [ip, r0]
    4cc8:	47a60000 	strmi	r0, [r6, r0]!
    4ccc:	000e0000 	andeq	r0, lr, r0
    4cd0:	09120070 	ldmdbeq	r2, {r4, r5, r6}
    4cd4:	2b141680 	blcs	50a6dc <__ccfg+0x4ea734>
    4cd8:	16000128 	strne	r0, [r0], -r8, lsr #2
    4cdc:	00009f13 	andeq	r9, r0, r3, lsl pc
    4ce0:	00000000 	andeq	r0, r0, r0
    4ce4:	478c0000 	strmi	r0, [ip, r0]
    4ce8:	47b80000 	ldrmi	r0, [r8, r0]!
    4cec:	00010000 	andeq	r0, r1, r0
    4cf0:	00000054 	andeq	r0, r0, r4, asr r0
    4cf4:	00000000 	andeq	r0, r0, r0
    4cf8:	0047bc00 	subeq	fp, r7, r0, lsl #24
    4cfc:	0047c200 	subeq	ip, r7, r0, lsl #4
    4d00:	73001500 	movwvc	r1, #1280	; 0x500
    4d04:	4b401200 	blmi	100950c <__ccfg+0xfe9564>
    4d08:	164f2224 	strbne	r2, [pc], -r4, lsr #4
    4d0c:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4d10:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4d14:	9f131600 	svcls	0x00131600
	...
    4d20:	000047c8 	andeq	r4, r0, r8, asr #15
    4d24:	000047d2 	ldrdeq	r4, [r0], -r2
    4d28:	00740017 	rsbseq	r0, r4, r7, lsl r0
    4d2c:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    4d30:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    4d34:	4b401416 	blmi	1009d94 <__ccfg+0xfe9dec>
    4d38:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    4d3c:	13160001 	tstne	r6, #1
    4d40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d50:	52000100 	andpl	r0, r0, #0, 2
	...
    4d64:	00500001 	subseq	r0, r0, r1
	...
    4d74:	01000000 	mrseq	r0, (UNDEF: 0)
    4d78:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    4d88:	00010000 	andeq	r0, r1, r0
    4d8c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4d9c:	70001600 	andvc	r1, r0, r0, lsl #12
    4da0:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    4da4:	244b4000 	strbcs	r4, [fp], #-0
    4da8:	00050c22 	andeq	r0, r5, r2, lsr #24
    4dac:	282d8000 	stmdacs	sp!, {pc}
    4db0:	13160001 	tstne	r6, #1
    4db4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4db8:	00000000 	andeq	r0, r0, r0
    4dbc:	0047fc00 	subeq	pc, r7, r0, lsl #24
    4dc0:	00483e00 	subeq	r3, r8, r0, lsl #28
    4dc4:	09000300 	stmdbeq	r0, {r8, r9}
    4dc8:	483e9fff 	ldmdami	lr!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4dcc:	48480000 	stmdami	r8, {}^	; <UNPREDICTABLE>
    4dd0:	00010000 	andeq	r0, r1, r0
    4dd4:	00000050 	andeq	r0, r0, r0, asr r0
    4dd8:	00000000 	andeq	r0, r0, r0
    4ddc:	00480800 	subeq	r0, r8, r0, lsl #16
    4de0:	00481600 	subeq	r1, r8, r0, lsl #12
    4de4:	50000100 	andpl	r0, r0, r0, lsl #2
    4de8:	0000481a 	andeq	r4, r0, sl, lsl r8
    4dec:	00004836 	andeq	r4, r0, r6, lsr r8
    4df0:	38500001 	ldmdacc	r0, {r0}^
    4df4:	3a000048 	bcc	4f1c <__aeabi_lmul+0x528>
    4df8:	01000048 	tsteq	r0, r8, asr #32
    4dfc:	483c5000 	ldmdami	ip!, {ip, lr}
    4e00:	483e0000 	ldmdami	lr!, {}	; <UNPREDICTABLE>
    4e04:	00010000 	andeq	r0, r1, r0
    4e08:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4e18:	09000300 	stmdbeq	r0, {r8, r9}
    4e1c:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    4e20:	00000000 	andeq	r0, r0, r0
    4e24:	00010000 	andeq	r0, r1, r0
    4e28:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4e38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4e44:	00004848 	andeq	r4, r0, r8, asr #16
    4e48:	00004882 	andeq	r4, r0, r2, lsl #17
    4e4c:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4e50:	0048829f 	umaaleq	r8, r8, pc, r2	; <UNPREDICTABLE>
    4e54:	00488600 	subeq	r8, r8, r0, lsl #12
    4e58:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    4e5c:	0048869f 	umaaleq	r8, r8, pc, r6	; <UNPREDICTABLE>
    4e60:	00488a00 	subeq	r8, r8, r0, lsl #20
    4e64:	45000200 	strmi	r0, [r0, #-512]	; 0xfffffe00
    4e68:	00488a9f 	umaaleq	r8, r8, pc, sl	; <UNPREDICTABLE>
    4e6c:	0048a800 	subeq	sl, r8, r0, lsl #16
    4e70:	09000300 	stmdbeq	r0, {r8, r9}
    4e74:	48a89fff 	stmiami	r8!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4e78:	48aa0000 	stmiami	sl!, {}	; <UNPREDICTABLE>
    4e7c:	00010000 	andeq	r0, r1, r0
    4e80:	0048aa50 	subeq	sl, r8, r0, asr sl
    4e84:	0048ac00 	subeq	sl, r8, r0, lsl #24
    4e88:	09000300 	stmdbeq	r0, {r8, r9}
    4e8c:	48ac9fff 	stmiami	ip!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4e90:	48b40000 	ldmmi	r4!, {}	; <UNPREDICTABLE>
    4e94:	00010000 	andeq	r0, r1, r0
    4e98:	00000050 	andeq	r0, r0, r0, asr r0
    4e9c:	00000000 	andeq	r0, r0, r0
    4ea0:	00485800 	subeq	r5, r8, r0, lsl #16
    4ea4:	0048b000 	subeq	fp, r8, r0
    4ea8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4eb4:	000048cc 	andeq	r4, r0, ip, asr #17
    4eb8:	000048d5 	ldrdeq	r4, [r0], -r5
    4ebc:	d5500001 	ldrble	r0, [r0, #-1]
    4ec0:	ea000048 	b	4fe8 <__aeabi_lmul+0x5f4>
    4ec4:	01000048 	tsteq	r0, r8, asr #32
    4ec8:	48ea5400 	stmiami	sl!, {sl, ip, lr}^
    4ecc:	48ee0000 	stmiami	lr!, {}^	; <UNPREDICTABLE>
    4ed0:	00040000 	andeq	r0, r4, r0
    4ed4:	9f5001f3 	svcls	0x005001f3
    4ed8:	000048ee 	andeq	r4, r0, lr, ror #17
    4edc:	000048f0 	strdeq	r4, [r0], -r0
    4ee0:	f0540001 			; <UNDEFINED> instruction: 0xf0540001
    4ee4:	f4000048 	vst4.16	{d0-d3}, [r0], r8
    4ee8:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4eec:	5001f300 	andpl	pc, r1, r0, lsl #6
    4ef0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ef4:	00000000 	andeq	r0, r0, r0
    4ef8:	0048cc00 	subeq	ip, r8, r0, lsl #24
    4efc:	0048d500 	subeq	sp, r8, r0, lsl #10
    4f00:	51000100 	mrspl	r0, (UNDEF: 16)
    4f04:	000048d5 	ldrdeq	r4, [r0], -r5
    4f08:	000048ea 	andeq	r4, r0, sl, ror #17
    4f0c:	ea550001 	b	1544f18 <__ccfg+0x1524f70>
    4f10:	ee000048 	cdp	0, 0, cr0, cr0, cr8, {2}
    4f14:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4f18:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4f1c:	0048ee9f 	umaaleq	lr, r8, pc, lr	; <UNPREDICTABLE>
    4f20:	0048f000 	subeq	pc, r8, r0
    4f24:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    4f28:	000048f0 	strdeq	r4, [r0], -r0
    4f2c:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4f30:	01f30004 	mvnseq	r0, r4
    4f34:	00009f51 	andeq	r9, r0, r1, asr pc
    4f38:	00000000 	andeq	r0, r0, r0
    4f3c:	48d60000 	ldmmi	r6, {}^	; <UNPREDICTABLE>
    4f40:	48ed0000 	stmiami	sp!, {}^	; <UNPREDICTABLE>
    4f44:	00050000 	andeq	r0, r5, r0
    4f48:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4f4c:	0048ee9f 	umaaleq	lr, r8, pc, lr	; <UNPREDICTABLE>
    4f50:	0048f400 	subeq	pc, r8, r0, lsl #8
    4f54:	70000500 	andvc	r0, r0, r0, lsl #10
    4f58:	9f293000 	svcls	0x00293000
	...
    4f64:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    4f68:	000048f6 	strdeq	r4, [r0], -r6
    4f6c:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    4f70:	fc000048 	stc2	0, cr0, [r0], {72}	; 0x48
    4f74:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
    4f78:	5001f300 	andpl	pc, r1, r0, lsl #6
    4f7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f80:	00000000 	andeq	r0, r0, r0
    4f84:	0048f400 	subeq	pc, r8, r0, lsl #8
    4f88:	0048f800 	subeq	pc, r8, r0, lsl #16
    4f8c:	51000100 	mrspl	r0, (UNDEF: 16)
    4f90:	000048f8 	strdeq	r4, [r0], -r8
    4f94:	000048fc 	strdeq	r4, [r0], -ip
    4f98:	01f30004 	mvnseq	r0, r4
    4f9c:	00009f51 	andeq	r9, r0, r1, asr pc
    4fa0:	00000000 	andeq	r0, r0, r0
    4fa4:	48f40000 	ldmmi	r4!, {}^	; <UNPREDICTABLE>
    4fa8:	48fb0000 	ldmmi	fp!, {}^	; <UNPREDICTABLE>
    4fac:	00010000 	andeq	r0, r1, r0
    4fb0:	0048fb52 	subeq	pc, r8, r2, asr fp	; <UNPREDICTABLE>
    4fb4:	0048fc00 	subeq	pc, r8, r0, lsl #24
    4fb8:	f3000400 	vshl.u8	d0, d0, d0
    4fbc:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    4fcc:	01000000 	mrseq	r0, (UNDEF: 0)
    4fd0:	00005000 	andeq	r5, r0, r0
    4fd4:	00000000 	andeq	r0, r0, r0
    4fd8:	00040000 	andeq	r0, r4, r0
    4fdc:	9f5001f3 	svcls	0x005001f3
	...
    4ff0:	00510001 	subseq	r0, r1, r1
    4ff4:	00000000 	andeq	r0, r0, r0
    4ff8:	04000000 	streq	r0, [r0], #-0
    4ffc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5000:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5010:	52000100 	andpl	r0, r0, #0, 2
	...
    501c:	01f30004 	mvnseq	r0, r4
    5020:	00009f52 	andeq	r9, r0, r2, asr pc
    5024:	00000000 	andeq	r0, r0, r0
    5028:	00010000 	andeq	r0, r1, r0
    502c:	00000052 	andeq	r0, r0, r2, asr r0
    5030:	00000000 	andeq	r0, r0, r0
    5034:	f3001500 	vrshl.u8	d1, d0, d0
    5038:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    503c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    5040:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5044:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    5048:	9f131600 	svcls	0x00131600
	...
    505c:	00530001 	subseq	r0, r3, r1
    5060:	00000000 	andeq	r0, r0, r0
    5064:	04000000 	streq	r0, [r0], #-0
    5068:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    506c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    507c:	70000400 	andvc	r0, r0, r0, lsl #8
    5080:	009f0480 	addseq	r0, pc, r0, lsl #9
    5084:	00000000 	andeq	r0, r0, r0
    5088:	0d000000 	stceq	0, cr0, [r0, #-0]
    508c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5090:	01f32431 	mvnseq	r2, r1, lsr r4
    5094:	80232250 	eorhi	r2, r3, r0, asr r2
    5098:	00009f04 	andeq	r9, r0, r4, lsl #30
    509c:	00000000 	andeq	r0, r0, r0
    50a0:	00010000 	andeq	r0, r1, r0
    50a4:	00000050 	andeq	r0, r0, r0, asr r0
    50a8:	00000000 	andeq	r0, r0, r0
    50ac:	f3005200 	vhsub.u8	d5, d0, d0
    50b0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    50b4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    50b8:	f3048023 	vhadd.u8	d8, d4, d19
    50bc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    50c0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    50c4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    50c8:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    50cc:	13160001 	tstne	r6, #1
    50d0:	f3048423 	vshl.u8	d8, d19, d4
    50d4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    50d8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    50dc:	f3048023 	vhadd.u8	d8, d4, d19
    50e0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    50e4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    50e8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    50ec:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    50f0:	13160001 	tstne	r6, #1
    50f4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    50f8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    50fc:	13160001 	tstne	r6, #1
    5100:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5110:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    511c:	f330002f 	vhadd.u<illegal width 64>	d0, d0, d31
    5120:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5124:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    5128:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    512c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    5130:	f3131600 	vmax.u16	d1, d3, d0
    5134:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5138:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    513c:	0001282e 	andeq	r2, r1, lr, lsr #16
    5140:	01f31316 	mvnseq	r1, r6, lsl r3
    5144:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    5148:	13160001 	tstne	r6, #1
    514c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    515c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    5168:	01f30004 	mvnseq	r0, r4
    516c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    517c:	00010000 	andeq	r0, r1, r0
    5180:	00000051 	andeq	r0, r0, r1, asr r0
    5184:	00000000 	andeq	r0, r0, r0
    5188:	f3000400 	vshl.u8	d0, d0, d0
    518c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    519c:	01000000 	mrseq	r0, (UNDEF: 0)
    51a0:	00005200 	andeq	r5, r0, r0, lsl #4
    51a4:	00000000 	andeq	r0, r0, r0
    51a8:	00040000 	andeq	r0, r4, r0
    51ac:	9f5201f3 	svcls	0x005201f3
	...
    51b8:	00520001 	subseq	r0, r2, r1
    51bc:	00000000 	andeq	r0, r0, r0
    51c0:	1b000000 	blne	51c8 <__pi_hex_enc_table+0x37>
    51c4:	5201f300 	andpl	pc, r1, #0, 6
    51c8:	01f32540 	mvnseq	r2, r0, asr #10
    51cc:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    51d0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    51d4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    51d8:	01282b80 	smlawbeq	r8, r0, fp, r2
    51dc:	9f131600 	svcls	0x00131600
	...
    51f0:	00530001 	subseq	r0, r3, r1
    51f4:	00000000 	andeq	r0, r0, r0
    51f8:	04000000 	streq	r0, [r0], #-0
    51fc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    5200:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5204:	00000000 	andeq	r0, r0, r0
    5208:	53000100 	movwpl	r0, #256	; 0x100
	...
    5214:	01f3001b 	mvnseq	r0, fp, lsl r0
    5218:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    521c:	01f35301 	mvnseq	r5, r1, lsl #6
    5220:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    5224:	000f0c22 	andeq	r0, pc, r2, lsr #24
    5228:	282b8000 	stmdacs	fp!, {pc}
    522c:	13160001 	tstne	r6, #1
    5230:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5240:	91000200 	mrsls	r0, R8_usr
	...
    524c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    5260:	70000400 	andvc	r0, r0, r0, lsl #8
    5264:	009f0480 	addseq	r0, pc, r0, lsl #9
    5268:	00000000 	andeq	r0, r0, r0
    526c:	0d000000 	stceq	0, cr0, [r0, #-0]
    5270:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5274:	01f32431 	mvnseq	r2, r1, lsr r4
    5278:	80232250 	eorhi	r2, r3, r0, asr r2
    527c:	00009f04 	andeq	r9, r0, r4, lsl #30
    5280:	00000000 	andeq	r0, r0, r0
    5284:	00010000 	andeq	r0, r1, r0
    5288:	00000050 	andeq	r0, r0, r0, asr r0
    528c:	00000000 	andeq	r0, r0, r0
    5290:	f3006400 	vshl.u8	d6, d0, d0
    5294:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    5298:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    529c:	f3048023 	vhadd.u8	d8, d4, d19
    52a0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    52a4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    52a8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    52ac:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    52b0:	8000000f 	andhi	r0, r0, pc
    52b4:	0001282c 	andeq	r2, r1, ip, lsr #16
    52b8:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    52bc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    52c0:	01f32431 	mvnseq	r2, r1, lsr r4
    52c4:	80232250 	eorhi	r2, r3, r0, asr r2
    52c8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    52cc:	01f32431 	mvnseq	r2, r1, lsr r4
    52d0:	01f32250 	mvnseq	r2, r0, asr r2
    52d4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    52d8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    52dc:	282c8000 	stmdacs	ip!, {pc}
    52e0:	13160001 	tstne	r6, #1
    52e4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    52e8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    52ec:	8000000f 	andhi	r0, r0, pc
    52f0:	0001282b 	andeq	r2, r1, fp, lsr #16
    52f4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5304:	0a000000 	beq	530c <patchGenfskRfe+0x50>
    5308:	0a007400 	beq	22310 <__ccfg+0x2368>
    530c:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    5310:	009f2400 	addseq	r2, pc, r0, lsl #8
    5314:	00000000 	andeq	r0, r0, r0
    5318:	0c000000 	stceq	0, cr0, [r0], {-0}
    531c:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    5320:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    5324:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    5328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    532c:	00000000 	andeq	r0, r0, r0
    5330:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    5334:	0a029400 	beq	aa33c <__ccfg+0x8a394>
    5338:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    533c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    5340:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    5344:	4b405301 	blmi	1019f50 <__ccfg+0xff9fa8>
    5348:	0f0c2224 	svceq	0x000c2224
    534c:	2b800000 	blcs	fe005354 <_estack+0xde000354>
    5350:	16000128 	strne	r0, [r0], -r8, lsr #2
    5354:	009f2413 	addseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
	...
    5364:	01000000 	mrseq	r0, (UNDEF: 0)
    5368:	00005000 	andeq	r5, r0, r0
    536c:	00000000 	andeq	r0, r0, r0
    5370:	00040000 	andeq	r0, r4, r0
    5374:	9f5001f3 	svcls	0x005001f3
	...
    5388:	00510001 	subseq	r0, r1, r1
    538c:	00000000 	andeq	r0, r0, r0
    5390:	04000000 	streq	r0, [r0], #-0
    5394:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5398:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    53a8:	52000100 	andpl	r0, r0, #0, 2
	...
    53b4:	00540001 	subseq	r0, r4, r1
    53b8:	00000000 	andeq	r0, r0, r0
    53bc:	15000000 	strne	r0, [r0, #-0]
    53c0:	5201f300 	andpl	pc, r1, #0, 6
    53c4:	01f32540 	mvnseq	r2, r0, asr #10
    53c8:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    53cc:	2e302540 	cfneg32cs	mvfx2, mvfx0
    53d0:	16000128 	strne	r0, [r0], -r8, lsr #2
    53d4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    53e4:	00010000 	andeq	r0, r1, r0
    53e8:	00000055 	andeq	r0, r0, r5, asr r0
    53ec:	00000000 	andeq	r0, r0, r0
    53f0:	f3001d00 	vpadd.f32	d1, d0, d0
    53f4:	01f35001 	mvnseq	r5, r1
    53f8:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    53fc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5400:	f3225101 	vrhadd.u32	d5, d2, d1
    5404:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5408:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    540c:	9f131600 	svcls	0x00131600
	...
    5420:	00750006 	rsbseq	r0, r5, r6
    5424:	9f1a0074 	svcls	0x001a0074
	...
    5438:	00550001 	subseq	r0, r5, r1
    543c:	00000000 	andeq	r0, r0, r0
    5440:	1d000000 	stcne	0, cr0, [r0, #-0]
    5444:	5001f300 	andpl	pc, r1, r0, lsl #6
    5448:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    544c:	01f30223 	mvnseq	r0, r3, lsr #4
    5450:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5454:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    5458:	2e302540 	cfneg32cs	mvfx2, mvfx0
    545c:	16000128 	strne	r0, [r0], -r8, lsr #2
    5460:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5470:	00070000 	andeq	r0, r7, r0
    5474:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    5478:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    5488:	05000000 	streq	r0, [r0, #-0]
    548c:	30007000 	andcc	r7, r0, r0
    5490:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    54a0:	00010000 	andeq	r0, r1, r0
    54a4:	00000050 	andeq	r0, r0, r0, asr r0
    54a8:	00000000 	andeq	r0, r0, r0
    54ac:	f3000400 	vshl.u8	d0, d0, d0
    54b0:	009f5001 	addseq	r5, pc, r1
	...
    54c0:	01000000 	mrseq	r0, (UNDEF: 0)
    54c4:	00005100 	andeq	r5, r0, r0, lsl #2
    54c8:	00000000 	andeq	r0, r0, r0
    54cc:	00040000 	andeq	r0, r4, r0
    54d0:	9f5101f3 	svcls	0x005101f3
	...
    54e4:	00520001 	subseq	r0, r2, r1
    54e8:	00000000 	andeq	r0, r0, r0
    54ec:	01000000 	mrseq	r0, (UNDEF: 0)
    54f0:	00005400 	andeq	r5, r0, r0, lsl #8
    54f4:	00000000 	andeq	r0, r0, r0
    54f8:	001b0000 	andseq	r0, fp, r0
    54fc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    5500:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    5504:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5508:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    550c:	8000000f 	andhi	r0, r0, pc
    5510:	0001282b 	andeq	r2, r1, fp, lsr #16
    5514:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5524:	01000000 	mrseq	r0, (UNDEF: 0)
    5528:	00005300 	andeq	r5, r0, r0, lsl #6
    552c:	00000000 	andeq	r0, r0, r0
    5530:	00010000 	andeq	r0, r1, r0
    5534:	00000055 	andeq	r0, r0, r5, asr r0
    5538:	00000000 	andeq	r0, r0, r0
    553c:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    5540:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    5544:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    5548:	4b405301 	blmi	101a154 <__ccfg+0xffa1ac>
    554c:	0f0c2224 	svceq	0x000c2224
    5550:	2b800000 	blcs	fe005558 <_estack+0xde000558>
    5554:	16000128 	strne	r0, [r0], -r8, lsr #2
    5558:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5568:	00010000 	andeq	r0, r1, r0
    556c:	00000056 	andeq	r0, r0, r6, asr r0
    5570:	00000000 	andeq	r0, r0, r0
    5574:	70000600 	andvc	r0, r0, r0, lsl #12
    5578:	22007100 	andcs	r7, r0, #0, 2
    557c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5580:	00000000 	andeq	r0, r0, r0
    5584:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5590:	01f30023 	mvnseq	r0, r3, lsr #32
    5594:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5598:	f3022322 	vcgt.u8	d2, d2, d18
    559c:	01f35001 	mvnseq	r5, r1
    55a0:	01f32251 	mvnseq	r2, r1, asr r2
    55a4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    55a8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    55ac:	282b8000 	stmdacs	fp!, {pc}
    55b0:	13160001 	tstne	r6, #1
    55b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    55c4:	76000600 	strvc	r0, [r0], -r0, lsl #12
    55c8:	1a007400 	bne	225d0 <__ccfg+0x2628>
    55cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    55d0:	00000000 	andeq	r0, r0, r0
    55d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    55e8:	00560001 	subseq	r0, r6, r1
    55ec:	00000000 	andeq	r0, r0, r0
    55f0:	23000000 	movwcs	r0, #0
    55f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    55f8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    55fc:	01f30223 	mvnseq	r0, r3, lsr #4
    5600:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5604:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5608:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    560c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5610:	01282b80 	smlawbeq	r8, r0, fp, r2
    5614:	9f131600 	svcls	0x00131600
	...
    5628:	00760007 	rsbseq	r0, r6, r7
    562c:	1affff0a 	bne	525c <__button_list+0x1a>
    5630:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5640:	70000500 	andvc	r0, r0, r0, lsl #10
    5644:	9f293000 	svcls	0x00293000
	...
    5660:	00000052 	andeq	r0, r0, r2, asr r0
    5664:	52510001 	subspl	r0, r1, #1
    5668:	96000000 	strls	r0, [r0], -r0
    566c:	04000000 	streq	r0, [r0], #-0
    5670:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5674:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5678:	00009800 	andeq	r9, r0, r0, lsl #16
    567c:	51000100 	mrspl	r0, (UNDEF: 16)
    5680:	00000098 	muleq	r0, r8, r0
    5684:	000000a0 	andeq	r0, r0, r0, lsr #1
    5688:	01f30004 	mvnseq	r0, r4
    568c:	00a09f51 	adceq	r9, r0, r1, asr pc
    5690:	00a60000 	adceq	r0, r6, r0
    5694:	00010000 	andeq	r0, r1, r0
    5698:	0000a651 	andeq	sl, r0, r1, asr r6
    569c:	0000aa00 	andeq	sl, r0, r0, lsl #20
    56a0:	f3000400 	vshl.u8	d0, d0, d0
    56a4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    56b0:	02020000 	andeq	r0, r2, #0
    56b4:	00000000 	andeq	r0, r0, r0
    56b8:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    56d8:	2a000000 	bcs	56e0 <patchGenfskRfe+0x424>
    56dc:	01000000 	mrseq	r0, (UNDEF: 0)
    56e0:	002a5200 	eoreq	r5, sl, r0, lsl #4
    56e4:	00400000 	subeq	r0, r0, r0
    56e8:	00090000 	andeq	r0, r9, r0
    56ec:	00720071 	rsbseq	r0, r2, r1, ror r0
    56f0:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    56f4:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    56f8:	00004200 	andeq	r4, r0, r0, lsl #4
    56fc:	71000b00 	tstvc	r0, r0, lsl #22
    5700:	22007200 	andcs	r7, r0, #0, 4
    5704:	401c0074 	andsmi	r0, ip, r4, ror r0
    5708:	00429f1c 	subeq	r9, r2, ip, lsl pc
    570c:	004c0000 	subeq	r0, ip, r0
    5710:	00090000 	andeq	r0, r9, r0
    5714:	00720071 	rsbseq	r0, r2, r1, ror r0
    5718:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    571c:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5720:	00005a00 	andeq	r5, r0, r0, lsl #20
    5724:	53000100 	movwpl	r0, #256	; 0x100
    5728:	0000005a 	andeq	r0, r0, sl, asr r0
    572c:	0000005e 	andeq	r0, r0, lr, asr r0
    5730:	00730006 	rsbseq	r0, r3, r6
    5734:	9f1c0076 	svcls	0x001c0076
    5738:	0000005e 	andeq	r0, r0, lr, asr r0
    573c:	00000060 	andeq	r0, r0, r0, rrx
    5740:	00730008 	rsbseq	r0, r3, r8
    5744:	341c0076 	ldrcc	r0, [ip], #-118	; 0xffffff8a
    5748:	00609f1c 	rsbeq	r9, r0, ip, lsl pc
    574c:	006a0000 	rsbeq	r0, sl, r0
    5750:	00060000 	andeq	r0, r6, r0
    5754:	00760073 	rsbseq	r0, r6, r3, ror r0
    5758:	006a9f1c 	rsbeq	r9, sl, ip, lsl pc
    575c:	00720000 	rsbseq	r0, r2, r0
    5760:	00080000 	andeq	r0, r8, r0
    5764:	1a3f0072 	bne	fc5934 <__ccfg+0xfa598c>
    5768:	9f1c0076 	svcls	0x001c0076
    576c:	00000072 	andeq	r0, r0, r2, ror r0
    5770:	00000076 	andeq	r0, r0, r6, ror r0
    5774:	01f30009 	mvnseq	r0, r9
    5778:	761a3f52 	ssaxvc	r3, sl, r2
    577c:	769f1c00 	ldrvc	r1, [pc], r0, lsl #24
    5780:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5784:	01000000 	mrseq	r0, (UNDEF: 0)
    5788:	00785200 	rsbseq	r5, r8, r0, lsl #4
    578c:	00800000 	addeq	r0, r0, r0
    5790:	00010000 	andeq	r0, r1, r0
    5794:	00008056 	andeq	r8, r0, r6, asr r0
    5798:	00008200 	andeq	r8, r0, r0, lsl #4
    579c:	73000700 	movwvc	r0, #1792	; 0x700
    57a0:	00762000 	rsbseq	r2, r6, r0
    57a4:	00829f22 	addeq	r9, r2, r2, lsr #30
    57a8:	00880000 	addeq	r0, r8, r0
    57ac:	00060000 	andeq	r0, r6, r0
    57b0:	00730076 	rsbseq	r0, r3, r6, ror r0
    57b4:	00889f1c 	addeq	r9, r8, ip, lsl pc
    57b8:	008c0000 	addeq	r0, ip, r0
    57bc:	00070000 	andeq	r0, r7, r0
    57c0:	76200073 			; <UNDEFINED> instruction: 0x76200073
    57c4:	969f2200 	ldrls	r2, [pc], r0, lsl #4
    57c8:	9a000000 	bls	57d0 <patchGenfskRfe+0x514>
    57cc:	01000000 	mrseq	r0, (UNDEF: 0)
    57d0:	009a5200 	addseq	r5, sl, r0, lsl #4
    57d4:	00a00000 	adceq	r0, r0, r0
    57d8:	00010000 	andeq	r0, r1, r0
    57dc:	0000a056 	andeq	sl, r0, r6, asr r0
    57e0:	0000a200 	andeq	sl, r0, r0, lsl #4
    57e4:	52000100 	andpl	r0, r0, #0, 2
    57e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    57ec:	000000a6 	andeq	r0, r0, r6, lsr #1
    57f0:	a6560001 	ldrbge	r0, [r6], -r1
    57f4:	aa000000 	bge	57fc <patchGenfskRfe+0x540>
    57f8:	01000000 	mrseq	r0, (UNDEF: 0)
    57fc:	00005300 	andeq	r5, r0, r0, lsl #6
    5800:	00000000 	andeq	r0, r0, r0
    5804:	00020000 	andeq	r0, r2, r0
    5808:	00000000 	andeq	r0, r0, r0
    580c:	00010100 	andeq	r0, r1, r0, lsl #2
	...
    5818:	00760000 	rsbseq	r0, r6, r0
    581c:	00010000 	andeq	r0, r1, r0
    5820:	00007650 	andeq	r7, r0, r0, asr r6
    5824:	00008000 	andeq	r8, r0, r0
    5828:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    582c:	00000080 	andeq	r0, r0, r0, lsl #1
    5830:	00000082 	andeq	r0, r0, r2, lsl #1
    5834:	00750008 	rsbseq	r0, r5, r8
    5838:	23220073 			; <UNDEFINED> instruction: 0x23220073
    583c:	00829f01 	addeq	r9, r2, r1, lsl #30
    5840:	00820000 	addeq	r0, r2, r0
    5844:	00060000 	andeq	r0, r6, r0
    5848:	00730075 	rsbseq	r0, r3, r5, ror r0
    584c:	00829f22 	addeq	r9, r2, r2, lsr #30
    5850:	008c0000 	addeq	r0, ip, r0
    5854:	00080000 	andeq	r0, r8, r0
    5858:	00730075 	rsbseq	r0, r3, r5, ror r0
    585c:	9f012322 	svcls	0x00012322
    5860:	00000096 	muleq	r0, r6, r0
    5864:	00000098 	muleq	r0, r8, r0
    5868:	98500001 	ldmdals	r0, {r0}^
    586c:	a0000000 	andge	r0, r0, r0
    5870:	01000000 	mrseq	r0, (UNDEF: 0)
    5874:	00a05500 	adceq	r5, r0, r0, lsl #10
    5878:	00aa0000 	adceq	r0, sl, r0
    587c:	00010000 	andeq	r0, r1, r0
    5880:	00000050 	andeq	r0, r0, r0, asr r0
    5884:	00000000 	andeq	r0, r0, r0
    5888:	00000300 	andeq	r0, r0, r0, lsl #6
    588c:	00000000 	andeq	r0, r0, r0
    5890:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    589c:	00005200 	andeq	r5, r0, r0, lsl #4
    58a0:	51000100 	mrspl	r0, (UNDEF: 16)
    58a4:	00000052 	andeq	r0, r0, r2, asr r0
    58a8:	00000076 	andeq	r0, r0, r6, ror r0
    58ac:	01f30004 	mvnseq	r0, r4
    58b0:	00769f51 	rsbseq	r9, r6, r1, asr pc
    58b4:	00800000 	addeq	r0, r0, r0
    58b8:	00010000 	andeq	r0, r1, r0
    58bc:	00008051 	andeq	r8, r0, r1, asr r0
    58c0:	00008200 	andeq	r8, r0, r0, lsl #4
    58c4:	71000800 	tstvc	r0, r0, lsl #16
    58c8:	22007300 	andcs	r7, r0, #0, 6
    58cc:	829f0123 	addshi	r0, pc, #-1073741816	; 0xc0000008
    58d0:	82000000 	andhi	r0, r0, #0
    58d4:	06000000 	streq	r0, [r0], -r0
    58d8:	73007100 	movwvc	r7, #256	; 0x100
    58dc:	829f2200 	addshi	r2, pc, #0, 4
    58e0:	8c000000 	stchi	0, cr0, [r0], {-0}
    58e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    58e8:	73007100 	movwvc	r7, #256	; 0x100
    58ec:	01232200 			; <UNDEFINED> instruction: 0x01232200
    58f0:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    58f4:	0000a600 	andeq	sl, r0, r0, lsl #12
    58f8:	51000100 	mrspl	r0, (UNDEF: 16)
    58fc:	000000a6 	andeq	r0, r0, r6, lsr #1
    5900:	000000aa 	andeq	r0, r0, sl, lsr #1
    5904:	01f30004 	mvnseq	r0, r4
    5908:	00009f51 	andeq	r9, r0, r1, asr pc
    590c:	00000000 	andeq	r0, r0, r0
    5910:	01000000 	mrseq	r0, (UNDEF: 0)
    5914:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
    5918:	00010102 	andeq	r0, r1, r2, lsl #2
    591c:	00000000 	andeq	r0, r0, r0
    5920:	00010100 	andeq	r0, r1, r0, lsl #2
    5924:	00000000 	andeq	r0, r0, r0
    5928:	002a0000 	eoreq	r0, sl, r0
    592c:	002c0000 	eoreq	r0, ip, r0
    5930:	00090000 	andeq	r0, r9, r0
    5934:	00710070 	rsbseq	r0, r1, r0, ror r0
    5938:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    593c:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    5940:	00003a00 	andeq	r3, r0, r0, lsl #20
    5944:	70000b00 	andvc	r0, r0, r0, lsl #22
    5948:	1c007100 	stfnes	f7, [r0], {-0}
    594c:	23220074 			; <UNDEFINED> instruction: 0x23220074
    5950:	003a9f04 	eorseq	r9, sl, r4, lsl #30
    5954:	003a0000 	eorseq	r0, sl, r0
    5958:	000b0000 	andeq	r0, fp, r0
    595c:	00710070 	rsbseq	r0, r1, r0, ror r0
    5960:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5964:	3a9f0823 	bcc	fe7c79f8 <_estack+0xde7c29f8>
    5968:	40000000 	andmi	r0, r0, r0
    596c:	0b000000 	bleq	5974 <patchImageGenfsk+0x4>
    5970:	71007000 	mrsvc	r7, (UNDEF: 0)
    5974:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5978:	9f0c2322 	svcls	0x000c2322
    597c:	00000040 	andeq	r0, r0, r0, asr #32
    5980:	00000042 	andeq	r0, r0, r2, asr #32
    5984:	0070000b 	rsbseq	r0, r0, fp
    5988:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    598c:	10232200 	eorne	r2, r3, r0, lsl #4
    5990:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5994:	00004c00 	andeq	r4, r0, r0, lsl #24
    5998:	70000900 	andvc	r0, r0, r0, lsl #18
    599c:	1c007100 	stfnes	f7, [r0], {-0}
    59a0:	9f220074 	svcls	0x00220074
    59a4:	00000056 	andeq	r0, r0, r6, asr r0
    59a8:	0000005a 	andeq	r0, r0, sl, asr r0
    59ac:	5a550001 	bpl	15459b8 <__ccfg+0x1525a10>
    59b0:	5a000000 	bpl	59b8 <patchImageGenfsk+0x48>
    59b4:	06000000 	streq	r0, [r0], -r0
    59b8:	76007500 	strvc	r7, [r0], -r0, lsl #10
    59bc:	5a9f2200 	bpl	fe7ce1c4 <_estack+0xde7c91c4>
    59c0:	60000000 	andvs	r0, r0, r0
    59c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    59c8:	76007500 	strvc	r7, [r0], -r0, lsl #10
    59cc:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    59d0:	0000609f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    59d4:	00007400 	andeq	r7, r0, r0, lsl #8
    59d8:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    59dc:	22007600 	andcs	r7, r0, #0, 12
    59e0:	0000749f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    59e4:	00007800 	andeq	r7, r0, r0, lsl #16
    59e8:	7c000b00 			; <UNDEFINED> instruction: 0x7c000b00
    59ec:	70243401 	eorvc	r3, r4, r1, lsl #8
    59f0:	00762200 	rsbseq	r2, r6, r0, lsl #4
    59f4:	00a69f22 	adceq	r9, r6, r2, lsr #30
    59f8:	00aa0000 	adceq	r0, sl, r0
    59fc:	00010000 	andeq	r0, r1, r0
    5a00:	00000055 	andeq	r0, r0, r5, asr r0
    5a04:	00000000 	andeq	r0, r0, r0
    5a08:	01010000 	mrseq	r0, (UNDEF: 1)
    5a0c:	02020101 	andeq	r0, r2, #1073741824	; 0x40000000
    5a10:	00000101 	andeq	r0, r0, r1, lsl #2
    5a14:	00000000 	andeq	r0, r0, r0
    5a18:	00000101 	andeq	r0, r0, r1, lsl #2
    5a1c:	00000000 	andeq	r0, r0, r0
    5a20:	00002a00 	andeq	r2, r0, r0, lsl #20
    5a24:	00002c00 	andeq	r2, r0, r0, lsl #24
    5a28:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    5a2c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5a30:	0000003a 	andeq	r0, r0, sl, lsr r0
    5a34:	04740003 	ldrbteq	r0, [r4], #-3
    5a38:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5a3c:	00003a00 	andeq	r3, r0, r0, lsl #20
    5a40:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    5a44:	003a9f08 	eorseq	r9, sl, r8, lsl #30
    5a48:	00400000 	subeq	r0, r0, r0
    5a4c:	00030000 	andeq	r0, r3, r0
    5a50:	409f0c74 	addsmi	r0, pc, r4, ror ip	; <UNPREDICTABLE>
    5a54:	42000000 	andmi	r0, r0, #0
    5a58:	03000000 	movweq	r0, #0
    5a5c:	9f107400 	svcls	0x00107400
    5a60:	00000042 	andeq	r0, r0, r2, asr #32
    5a64:	0000004c 	andeq	r0, r0, ip, asr #32
    5a68:	54540001 	ldrbpl	r0, [r4], #-1
    5a6c:	5a000000 	bpl	5a74 <patchImageGenfsk+0x104>
    5a70:	01000000 	mrseq	r0, (UNDEF: 0)
    5a74:	005a5100 	subseq	r5, sl, r0, lsl #2
    5a78:	005a0000 	subseq	r0, sl, r0
    5a7c:	00060000 	andeq	r0, r6, r0
    5a80:	00760071 	rsbseq	r0, r6, r1, ror r0
    5a84:	005a9f22 	subseq	r9, sl, r2, lsr #30
    5a88:	00600000 	rsbeq	r0, r0, r0
    5a8c:	00080000 	andeq	r0, r8, r0
    5a90:	00760071 	rsbseq	r0, r6, r1, ror r0
    5a94:	9f042322 	svcls	0x00042322
    5a98:	00000060 	andeq	r0, r0, r0, rrx
    5a9c:	00000076 	andeq	r0, r0, r6, ror r0
    5aa0:	00710006 	rsbseq	r0, r1, r6
    5aa4:	9f220076 	svcls	0x00220076
    5aa8:	00000076 	andeq	r0, r0, r6, ror r0
    5aac:	00000078 	andeq	r0, r0, r8, ror r0
    5ab0:	017c000c 	cmneq	ip, ip
    5ab4:	01f32434 	mvnseq	r2, r4, lsr r4
    5ab8:	00762251 	rsbseq	r2, r6, r1, asr r2
    5abc:	00a69f22 	adceq	r9, r6, r2, lsr #30
    5ac0:	00aa0000 	adceq	r0, sl, r0
    5ac4:	00010000 	andeq	r0, r1, r0
    5ac8:	00000051 	andeq	r0, r0, r1, asr r0
	...
    5ad4:	1a010000 	bne	45adc <__ccfg+0x25b34>
    5ad8:	1c000000 	stcne	0, cr0, [r0], {-0}
    5adc:	01000000 	mrseq	r0, (UNDEF: 0)
    5ae0:	001c5400 	andseq	r5, ip, r0, lsl #8
    5ae4:	00240000 	eoreq	r0, r4, r0
    5ae8:	00020000 	andeq	r0, r2, r0
    5aec:	00270073 	eoreq	r0, r7, r3, ror r0
    5af0:	00380000 	eorseq	r0, r8, r0
    5af4:	00040000 	andeq	r0, r4, r0
    5af8:	9f7ed874 	svcls	0x007ed874
	...
    5b08:	00000004 	andeq	r0, r0, r4
    5b0c:	00000006 	andeq	r0, r0, r6
    5b10:	00730002 	rsbseq	r0, r3, r2
    5b14:	00000006 	andeq	r0, r0, r6
    5b18:	00000008 	andeq	r0, r0, r8
    5b1c:	00530001 	subseq	r0, r3, r1
	...
    5b2c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    5b30:	06000000 	streq	r0, [r0], -r0
    5b34:	04935000 	ldreq	r5, [r3], #0
    5b38:	0e049351 	mcreq	3, 0, r9, cr4, cr1, {2}
    5b3c:	54000000 	strpl	r0, [r0], #-0
    5b40:	06000000 	streq	r0, [r0], -r0
    5b44:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    5b48:	009f2500 	addseq	r2, pc, r0, lsl #10
	...
    5b58:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5b5c:	06000000 	streq	r0, [r0], -r0
    5b60:	04935200 	ldreq	r5, [r3], #512	; 0x200
    5b64:	3e049353 	mcrcc	3, 0, r9, cr4, cr3, {2}
    5b68:	54000000 	strpl	r0, [r0], #-0
    5b6c:	06000000 	streq	r0, [r0], -r0
    5b70:	f503f300 			; <UNDEFINED> instruction: 0xf503f300
    5b74:	009f2502 	addseq	r2, pc, r2, lsl #10
	...
    5b80:	00001a02 	andeq	r1, r0, r2, lsl #20
    5b84:	00004a00 	andeq	r4, r0, r0, lsl #20
    5b88:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5b94:	00000001 	andeq	r0, r0, r1
    5b98:	001a0000 	andseq	r0, sl, r0
    5b9c:	001e0000 	andseq	r0, lr, r0
    5ba0:	00060000 	andeq	r0, r6, r0
    5ba4:	00740070 	rsbseq	r0, r4, r0, ror r0
    5ba8:	001e9f1e 	andseq	r9, lr, lr, lsl pc
    5bac:	00220000 	eoreq	r0, r2, r0
    5bb0:	00010000 	andeq	r0, r1, r0
    5bb4:	00002650 	andeq	r2, r0, r0, asr r6
    5bb8:	00004400 	andeq	r4, r0, r0, lsl #8
    5bbc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    5bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
    5bd0:	00000036 	andeq	r0, r0, r6, lsr r0
    5bd4:	36550001 	ldrbcc	r0, [r5], -r1
    5bd8:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5bdc:	0c000000 	stceq	0, cr0, [r0], {-0}
    5be0:	40007200 	andmi	r7, r0, r0, lsl #4
    5be4:	7c254024 	stcvc	0, cr4, [r5], #-144	; 0xffffff70
    5be8:	1e254000 	cdpne	0, 2, cr4, cr5, cr0, {0}
    5bec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5bf0:	00000000 	andeq	r0, r0, r0
    5bf4:	20000000 	andcs	r0, r0, r0
    5bf8:	3c000000 	stccc	0, cr0, [r0], {-0}
    5bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    5c00:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    5c0c:	00120000 	andseq	r0, r2, r0
    5c10:	001e0000 	andseq	r0, lr, r0
    5c14:	00010000 	andeq	r0, r1, r0
    5c18:	00001e50 	andeq	r1, r0, r0, asr lr
    5c1c:	00005400 	andeq	r5, r0, r0, lsl #8
    5c20:	7c000700 	stcvc	7, cr0, [r0], {-0}
    5c24:	40244000 	eormi	r4, r4, r0
    5c28:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5c34:	00160000 	andseq	r0, r6, r0
    5c38:	001c0000 	andseq	r0, ip, r0
    5c3c:	00010000 	andeq	r0, r1, r0
    5c40:	00001c55 	andeq	r1, r0, r5, asr ip
    5c44:	00003e00 	andeq	r3, r0, r0, lsl #28
    5c48:	72000700 	andvc	r0, r0, #0, 14
    5c4c:	40244000 	eormi	r4, r4, r0
    5c50:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5c5c:	00140000 	andseq	r0, r4, r0
    5c60:	00200000 	eoreq	r0, r0, r0
    5c64:	00010000 	andeq	r0, r1, r0
    5c68:	00002051 	andeq	r2, r0, r1, asr r0
    5c6c:	00005400 	andeq	r5, r0, r0, lsl #8
    5c70:	7c000500 	cfstr32vc	mvfx0, [r0], {-0}
    5c74:	9f254000 	svcls	0x00254000
	...
    5c80:	00000001 	andeq	r0, r0, r1
    5c84:	00000016 	andeq	r0, r0, r6, lsl r0
    5c88:	00000024 	andeq	r0, r0, r4, lsr #32
    5c8c:	24540001 	ldrbcs	r0, [r4], #-1
    5c90:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    5c94:	05000000 	streq	r0, [r0, #-0]
    5c98:	40007200 	andmi	r7, r0, r0, lsl #4
    5c9c:	00009f25 	andeq	r9, r0, r5, lsr #30
    5ca0:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000008c 	andeq	r0, r0, ip, lsl #1
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
    return node->data_base.item_array[index];
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	000000bc 	strheq	r0, [r0], -ip
  18:	00000000 	andeq	r0, r0, r0
};
  1c:	00000006 	andeq	r0, r0, r6
  20:	00000000 	andeq	r0, r0, r0
  24:	00000006 	andeq	r0, r0, r6
  28:	00000000 	andeq	r0, r0, r0
  2c:	00000008 	andeq	r0, r0, r8
  30:	00000184 	andeq	r0, r0, r4, lsl #3
  34:	00000014 	andeq	r0, r0, r4, lsl r0
  38:	00000198 	muleq	r0, r8, r1
  3c:	00000024 	andeq	r0, r0, r4, lsr #32
			i = k;
  40:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
				j->Next = k;
  44:	00000012 	andeq	r0, r0, r2, lsl r0
  48:	00000000 	andeq	r0, r0, r0
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	000001ce 	andeq	r0, r0, lr, asr #3
  54:	00000016 	andeq	r0, r0, r6, lsl r0
		release;
  58:	000001e4 	andeq	r0, r0, r4, ror #3
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
			nq++;
  60:	00000000 	andeq	r0, r0, r0
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	0000001e 	andeq	r0, r0, lr, lsl r0
  68:	00000200 	andeq	r0, r0, r0, lsl #4
  6c:	00000026 	andeq	r0, r0, r6, lsr #32
  70:	00000226 	andeq	r0, r0, r6, lsr #4
  74:	00000052 	andeq	r0, r0, r2, asr r0
  78:	00000278 	andeq	r0, r0, r8, ror r2
  7c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  80:	00000648 	andeq	r0, r0, r8, asr #12
  84:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
	...
	if (!button_still_pressed (__button_list [pbutton]))
  90:	000000e4 	andeq	r0, r0, r4, ror #1
  94:	1c3f0002 	ldcne	0, cr0, [pc], #-8	; 94 <g_pfnVectors+0x94>
  98:	00040000 	andeq	r0, r4, r0
	if (baction == NULL)
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00000bfc 	strdeq	r0, [r0], -ip
	(*baction) (pbutton);
  a4:	0000000c 	andeq	r0, r0, ip
endthread
  a8:	00000c08 	andeq	r0, r0, r8, lsl #24
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	0000002c 	andeq	r0, r0, ip, lsr #32
  b0:	00000c34 	andeq	r0, r0, r4, lsr ip
endthread
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	00000c60 	andeq	r0, r0, r0, ror #24
  bc:	0000003c 	andeq	r0, r0, ip, lsr r0
  c0:	00000c9c 	muleq	r0, ip, ip
  c4:	00000040 	andeq	r0, r0, r0, asr #32
fsm sender(struct ResponseMessage *message) {
  c8:	00000000 	andeq	r0, r0, r0
  cc:	00000020 	andeq	r0, r0, r0, lsr #32
  d0:	00000cdc 	ldrdeq	r0, [r0], -ip
}
  d4:	00000054 	andeq	r0, r0, r4, asr r0
  d8:	00000d30 	andeq	r0, r0, r0, lsr sp
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	00000040 	andeq	r0, r0, r0, asr #32
  e0:	00000d70 	andeq	r0, r0, r0, ror sp
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	00000d98 	muleq	r0, r8, sp
  ec:	00000114 	andeq	r0, r0, r4, lsl r1
		packet[1] = message->gid;
  f0:	00000eac 	andeq	r0, r0, ip, lsr #29
  f4:	00000050 	andeq	r0, r0, r0, asr r0
		DEBUG_PRINT("SENDING PROCEDURE");
  f8:	00000efc 	strdeq	r0, [r0], -ip
  fc:	00000054 	andeq	r0, r0, r4, asr r0
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
 100:	00000f50 	andeq	r0, r0, r0, asr pc
 104:	00000038 	andeq	r0, r0, r8, lsr r0
		*p = message->tpe;p++;
 108:	00000f88 	andeq	r0, r0, r8, lsl #31
		*p = message->request_number;p++;
 10c:	00000110 	andeq	r0, r0, r0, lsl r1
		*p = message->sender_id;p++;
 110:	00000000 	andeq	r0, r0, r0
		*p = message->receiver_id;p++;
 114:	0000000c 	andeq	r0, r0, ip
		switch(message->tpe) {
 118:	00001098 	muleq	r0, r8, r0
 11c:	000000c0 	andeq	r0, r0, r0, asr #1
 120:	00001158 	andeq	r1, r0, r8, asr r1
		tcv_endp(packet);
 124:	00000044 	andeq	r0, r0, r4, asr #32
		ser_out(CONFIRM_message, "Message sent\r\n");
 128:	0000119c 	muleq	r0, ip, r1
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
}
 130:	000011d8 	ldrdeq	r1, [r0], -r8
		finish;
 134:	000000a4 	andeq	r0, r0, r4, lsr #1
 138:	0000127c 	andeq	r1, r0, ip, ror r2
 13c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
				strncpy(p, message->record, sizeof(message->record));
 140:	00001434 	andeq	r1, r0, r4, lsr r4
				*p = message->padding;p++;
 144:	00000024 	andeq	r0, r0, r4, lsr #32
				strncpy(p, message->record, sizeof(message->record));
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000028 	andeq	r0, r0, r8, lsr #32
 150:	00001458 	andeq	r1, r0, r8, asr r4
				strncpy(p, message->record, sizeof(message->record));
 154:	00000258 	andeq	r0, r0, r8, asr r2
 158:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
				strncpy(p, message->record, sizeof(message->record));
 15c:	00000030 	andeq	r0, r0, r0, lsr r0
				break;
 160:	00000000 	andeq	r0, r0, r0
				*p = message->record_index;p++;
 164:	0000005c 	andeq	r0, r0, ip, asr r0
				*p = message->padding;
 168:	000016e0 	andeq	r1, r0, r0, ror #13
				break;
 16c:	00000060 	andeq	r0, r0, r0, rrx
	...
 178:	00000154 	andeq	r0, r0, r4, asr r1
 17c:	30cf0002 	sbccc	r0, pc, r2
 180:	00040000 	andeq	r0, r4, r0
		node->nnodes[i] = 0;
 184:	00000000 	andeq	r0, r0, r0
 188:	00001740 	andeq	r1, r0, r0, asr #14
 18c:	0000003c 	andeq	r0, r0, ip, lsr r0
 190:	0000177c 	andeq	r1, r0, ip, ror r7
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
 194:	00000080 	andeq	r0, r0, r0, lsl #1
bool init_node(struct Node* node){
 198:	000017fc 	strdeq	r1, [r0], -ip
    node->id  = 0;                  // default id value 0
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
    node->index = 0;                // default entry count 0
 1a0:	00000000 	andeq	r0, r0, r0
    node->data_base.item_count = 0; // default no items in array
 1a4:	00000024 	andeq	r0, r0, r4, lsr #32
	reset_array(node);
 1a8:	00001814 	andeq	r1, r0, r4, lsl r8
    DEBUG_PRINT("Error initializing node...\n");
 1ac:	00000010 	andeq	r0, r0, r0, lsl r0
 1b0:	00001824 	andeq	r1, r0, r4, lsr #16
};
 1b4:	0000002c 	andeq	r0, r0, ip, lsr #32
 1b8:	00000000 	andeq	r0, r0, r0
uint8_t generate_request_num(void){
 1bc:	0000004c 	andeq	r0, r0, ip, asr #32
    return (uint8_t) (rand() % 255);
 1c0:	00001850 	andeq	r1, r0, r0, asr r8
 1c4:	00000006 	andeq	r0, r0, r6
 1c8:	00001858 	andeq	r1, r0, r8, asr r8
}
 1cc:	000000cc 	andeq	r0, r0, ip, asr #1
            node->nnodes[i] = 0; // set to null byte
 1d0:	00001924 	andeq	r1, r0, r4, lsr #18
 1d4:	00000014 	andeq	r0, r0, r4, lsl r0
 1d8:	00001938 	andeq	r1, r0, r8, lsr r9
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
 1dc:	00000034 	andeq	r0, r0, r4, lsr r0
};
 1e0:	0000196c 	andeq	r1, r0, ip, ror #18
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
 1e4:	00000034 	andeq	r0, r0, r4, lsr r0
 1e8:	00000000 	andeq	r0, r0, r0
        node->data_base.item_array[index].data_entry[0] = '\0';
 1ec:	0000002c 	andeq	r0, r0, ip, lsr #32
 1f0:	000019a0 	andeq	r1, r0, r0, lsr #19
 1f4:	00000024 	andeq	r0, r0, r4, lsr #32
        node->data_base.item_count -= 1;
 1f8:	000019c4 	andeq	r1, r0, r4, asr #19
};
 1fc:	00000038 	andeq	r0, r0, r8, lsr r0
bool delete_all(struct Node *node){
 200:	00000000 	andeq	r0, r0, r0
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
 204:	00000014 	andeq	r0, r0, r4, lsl r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 208:	00000000 	andeq	r0, r0, r0
            node->data_base.item_array[i].data_entry[0] = '\0';
 20c:	00000040 	andeq	r0, r0, r0, asr #32
        for(int i = 0; i <= node->data_base.item_count; i++){
 210:	00000000 	andeq	r0, r0, r0
            node->data_base.item_array[i].timestamp = 0;
 214:	00000018 	andeq	r0, r0, r8, lsl r0
        for(int i = 0; i <= node->data_base.item_count; i++){
 218:	000019fc 	strdeq	r1, [r0], -ip
    node->data_base.item_count = 0;
 21c:	00000024 	andeq	r0, r0, r4, lsr #32
}
 220:	00000000 	andeq	r0, r0, r0
        return true;
 224:	00000020 	andeq	r0, r0, r0, lsr #32
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
 228:	00001a20 	andeq	r1, r0, r0, lsr #20
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 22c:	0000000e 	andeq	r0, r0, lr
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
 230:	00001a2e 	andeq	r1, r0, lr, lsr #20
 234:	00000010 	andeq	r0, r0, r0, lsl r0
 238:	00001a3e 	andeq	r1, r0, lr, lsr sl
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
	response_message->tpe = RESPONSE;
 240:	00000000 	andeq	r0, r0, r0
	response_message->status = status;
 244:	00000010 	andeq	r0, r0, r0, lsl r0
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 248:	00000000 	andeq	r0, r0, r0
	response_message->gid = gid;
 24c:	00000006 	andeq	r0, r0, r6
	response_message->sender_id = sender_id;
 250:	00001a5a 	andeq	r1, r0, sl, asr sl
	response_message->status = status;
 254:	00000014 	andeq	r0, r0, r4, lsl r0
	if (!padding){
 258:	00001a6e 	andeq	r1, r0, lr, ror #20
		response_message->padding = padding;
 25c:	0000000e 	andeq	r0, r0, lr
	if (rec != NULL){
 260:	00001a7c 	andeq	r1, r0, ip, ror sl
 264:	00000024 	andeq	r0, r0, r4, lsr #32
		strncpy(response_message->record, rec, 20);
 268:	00001aa0 	andeq	r1, r0, r0, lsr #21
 26c:	0000009c 	muleq	r0, ip, r0
 270:	00001b3c 	andeq	r1, r0, ip, lsr fp
};
 274:	00000050 	andeq	r0, r0, r0, asr r0
fsm receiver(struct Node* node_db) {
 278:	00001b8c 	andeq	r1, r0, ip, lsl #23
 27c:	00000048 	andeq	r0, r0, r8, asr #32
 280:	00001bd4 	ldrdeq	r1, [r0], -r4
 284:	00000050 	andeq	r0, r0, r0, asr r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	00000058 	andeq	r0, r0, r8, asr r0
 290:	00001c24 	andeq	r1, r0, r4, lsr #24
 294:	000000a8 	andeq	r0, r0, r8, lsr #1
		incoming_packet = tcv_rnp(receiving, sfd);
 298:	00001ccc 	andeq	r1, r0, ip, asr #25
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
 2a0:	00001d00 	andeq	r1, r0, r0, lsl #26
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
 2a8:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
 2ac:	00000030 	andeq	r0, r0, r0, lsr r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000038 	andeq	r0, r0, r8, lsr r0
		switch (response_message_5->tpe){
 2b8:	00001d18 	andeq	r1, r0, r8, lsl sp
 2bc:	0000013c 	andeq	r0, r0, ip, lsr r1
 2c0:	00001e54 	andeq	r1, r0, r4, asr lr
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 2d0:	00000104 	andeq	r0, r0, r4, lsl #2
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 2d4:	42f20002 	rscsmi	r0, r2, #2
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
 2d8:	00040000 	andeq	r0, r4, r0
				if (discovery_request_message->gid == node_db->gid){
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	00001e78 	andeq	r1, r0, r8, ror lr
					DEBUG_PRINT("\r\nSending to sender");
 2e4:	00000016 	andeq	r0, r0, r6, lsl r0
 2e8:	00001e8e 	andeq	r1, r0, lr, lsl #29
					DEBUG_PRINT("\r\nSending to sender");
 2ec:	0000001a 	andeq	r0, r0, sl, lsl r0
					response_message_0->tpe = DISCOVERY_RESPONSE;
 2f0:	00001ea8 	andeq	r1, r0, r8, lsr #29
					response_message_0->request_number = discovery_request_message->request_number;
 2f4:	0000000e 	andeq	r0, r0, lr
					response_message_0->sender_id = node_db->id;
 2f8:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
					response_message_0->receiver_id = discovery_request_message->sender_id;
 2fc:	0000004c 	andeq	r0, r0, ip, asr #32
					DEBUG_PRINT("\r\nSending to sender");
 300:	00001f04 	andeq	r1, r0, r4, lsl #30
					call sender(response_message_0, done_case);
 304:	0000008c 	andeq	r0, r0, ip, lsl #1
 308:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
 30c:	00000070 	andeq	r0, r0, r0, ror r0
 310:	00002000 	andeq	r2, r0, r0
 314:	000000c0 	andeq	r0, r0, r0, asr #1
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
 318:	00000000 	andeq	r0, r0, r0
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
 31c:	0000006c 	andeq	r0, r0, ip, rrx
 320:	000020c0 	andeq	r2, r0, r0, asr #1
 324:	00000024 	andeq	r0, r0, r4, lsr #32
 328:	000020e4 	andeq	r2, r0, r4, ror #1
 32c:	00000080 	andeq	r0, r0, r0, lsl #1
 330:	00000000 	andeq	r0, r0, r0
 334:	00000070 	andeq	r0, r0, r0, ror r0
 338:	00000000 	andeq	r0, r0, r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
 33c:	00000078 	andeq	r0, r0, r8, ror r0
					node_db->index+=1;
 340:	00002164 	andeq	r2, r0, r4, ror #2
 344:	000000bc 	strheq	r0, [r0], -ip
		tcv_endp(incoming_packet);
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000003a 	andeq	r0, r0, sl, lsr r0
		proceed receiving;
 350:	00000000 	andeq	r0, r0, r0
		ser_out(response_1_create, "\r\nData Saved");
 354:	00000038 	andeq	r0, r0, r8, lsr r0
 358:	00000000 	andeq	r0, r0, r0
		proceed receiving;
 35c:	0000000a 	andeq	r0, r0, sl
 360:	00002220 	andeq	r2, r0, r0, lsr #4
		ser_out(response_1_delete, "\r\nRecord Deleted");
 364:	0000002c 	andeq	r0, r0, ip, lsr #32
 368:	0000224c 	andeq	r2, r0, ip, asr #4
		proceed receiving;
 36c:	00000060 	andeq	r0, r0, r0, rrx
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
 370:	00000000 	andeq	r0, r0, r0
 374:	00000040 	andeq	r0, r0, r0, asr #32
 378:	00000000 	andeq	r0, r0, r0
 37c:	0000002c 	andeq	r0, r0, ip, lsr #32
 380:	00000000 	andeq	r0, r0, r0
		proceed receiving;
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
 388:	00000000 	andeq	r0, r0, r0
 38c:	00000006 	andeq	r0, r0, r6
 390:	000022ac 	andeq	r2, r0, ip, lsr #5
 394:	00000068 	andeq	r0, r0, r8, rrx
		proceed receiving;
 398:	00002314 	andeq	r2, r0, r4, lsl r3
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
 39c:	00000050 	andeq	r0, r0, r0, asr r0
 3a0:	00002364 	andeq	r2, r0, r4, ror #6
 3a4:	0000009c 	muleq	r0, ip, r0
 3a8:	00002400 	andeq	r2, r0, r0, lsl #8
		proceed receiving;
 3ac:	00000040 	andeq	r0, r0, r0, asr #32
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
 3b0:	00002440 	andeq	r2, r0, r0, asr #8
 3b4:	00000034 	andeq	r0, r0, r4, lsr r0
 3b8:	00002474 	andeq	r2, r0, r4, ror r4
 3bc:	0000003c 	andeq	r0, r0, ip, lsr r0
		proceed receiving;
 3c0:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
 3c4:	0000003c 	andeq	r0, r0, ip, lsr r0
 3c8:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
		proceed receiving;
 3cc:	00000002 	andeq	r0, r0, r2
	...
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 3d8:	00000034 	andeq	r0, r0, r4, lsr r0
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
 3dc:	56290002 	strtpl	r0, [r9], -r2
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
 3e0:	00040000 	andeq	r0, r4, r0
 3e4:	00000000 	andeq	r0, r0, r0
 3e8:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
 3ec:	00000002 	andeq	r0, r0, r2
					DEBUG_PRINT("\r\nDelete rec first if");
 3f0:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
					break;
 3f4:	00000002 	andeq	r0, r0, r2
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
 3f8:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
 3fc:	00000002 	andeq	r0, r0, r2
					DEBUG_PRINT("\r\nCreate rec second if");
 400:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
    if (node->data_base.item_count == NUMB_OF_ENT){
 404:	00000044 	andeq	r0, r0, r4, asr #32
	...
						DEBUG_PRINT("\r\nCreate rec third if");
 410:	00000014 	andeq	r0, r0, r4, lsl r0
					DEBUG_PRINT("\r\nCreate rec out if");
 414:	57a10002 	strpl	r0, [r1, r2]!
 418:	00040000 	andeq	r0, r4, r0
	...
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
 428:	00000024 	andeq	r0, r0, r4, lsr #32
 42c:	5cdc0002 	ldclpl	0, cr0, [ip], {2}
 430:	00040000 	andeq	r0, r4, r0
	...
						DEBUG_PRINT("\r\nCreate rec third else");
 43c:	00000002 	andeq	r0, r0, r2
 440:	00000000 	andeq	r0, r0, r0
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 444:	00000058 	andeq	r0, r0, r8, asr r0
	...
				DEBUG_PRINT("\r\nDelete rec");/*
 450:	00000024 	andeq	r0, r0, r4, lsr #32
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
 454:	61e00002 	mvnvs	r0, r2
 458:	00040000 	andeq	r0, r4, r0
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 464:	000000cc 	andeq	r0, r0, ip, asr #1
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
 478:	0000008c 	andeq	r0, r0, ip, lsl #1
 47c:	66da0002 	ldrbvs	r0, [sl], r2
					DEBUG_PRINT("\r\nDelete rec second if");
 480:	00040000 	andeq	r0, r4, r0
					if (delete_record(node_db, delete_record_message->record_index)){
 484:	00000000 	andeq	r0, r0, r0
 488:	00002504 	andeq	r2, r0, r4, lsl #10
 48c:	00000034 	andeq	r0, r0, r4, lsr r0
						DEBUG_PRINT("\r\nDelete rec third if");
 490:	00002538 	andeq	r2, r0, r8, lsr r5
						status = (uint8_t) SUCCESS;
 494:	00000030 	andeq	r0, r0, r0, lsr r0
					DEBUG_PRINT("\r\nDelete assemble le response");
 498:	00002568 	andeq	r2, r0, r8, ror #10
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
 49c:	00000018 	andeq	r0, r0, r8, lsl r0
 4a0:	00002580 	andeq	r2, r0, r0, lsl #11
 4a4:	00000054 	andeq	r0, r0, r4, asr r0
 4a8:	000025d4 	ldrdeq	r2, [r0], -r4
 4ac:	00000040 	andeq	r0, r0, r0, asr #32
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
 4b0:	00002614 	andeq	r2, r0, r4, lsl r6
 4b4:	00000024 	andeq	r0, r0, r4, lsr #32
						DEBUG_PRINT("\r\nDelete rec fourth if");
 4b8:	00002638 	andeq	r2, r0, r8, lsr r6
 4bc:	00000014 	andeq	r0, r0, r4, lsl r0
 4c0:	0000264c 	andeq	r2, r0, ip, asr #12
 4c4:	00000014 	andeq	r0, r0, r4, lsl r0
 4c8:	00000000 	andeq	r0, r0, r0
 4cc:	00000064 	andeq	r0, r0, r4, rrx
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	00000128 	andeq	r0, r0, r8, lsr #2
 4d8:	00000000 	andeq	r0, r0, r0
 4dc:	000000ec 	andeq	r0, r0, ip, ror #1
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000002 	andeq	r0, r0, r2
 4e8:	00000000 	andeq	r0, r0, r0
 4ec:	00000004 	andeq	r0, r0, r4
 4f0:	00000000 	andeq	r0, r0, r0
 4f4:	00000014 	andeq	r0, r0, r4, lsl r0
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	71850002 	orrvc	r0, r5, r2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	00002660 	andeq	r2, r0, r0, ror #12
 51c:	0000006c 	andeq	r0, r0, ip, rrx
	...
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	75a70002 	strvc	r0, [r7, #2]!
 530:	00040000 	andeq	r0, r4, r0
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 534:	00000000 	andeq	r0, r0, r0
 538:	000026cc 	andeq	r2, r0, ip, asr #13
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
 53c:	00000078 	andeq	r0, r0, r8, ror r0
	...
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
 54c:	79bd0002 	ldmibvc	sp!, {r1}
 550:	00040000 	andeq	r0, r4, r0
 554:	00000000 	andeq	r0, r0, r0
 558:	00002744 	andeq	r2, r0, r4, asr #14
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
 55c:	00000054 	andeq	r0, r0, r4, asr r0
	...
    return node->data_base.item_array[index];
 568:	0000001c 	andeq	r0, r0, ip, lsl r0
 56c:	7e0d0002 	cdpvc	0, 0, cr0, cr13, cr2, {0}
 570:	00040000 	andeq	r0, r4, r0
 574:	00000000 	andeq	r0, r0, r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 578:	00002798 	muleq	r0, r8, r7
    return node->data_base.item_array[index];
 57c:	00000060 	andeq	r0, r0, r0, rrx
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
 588:	0000006c 	andeq	r0, r0, ip, rrx
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
 58c:	825d0002 	subshi	r0, sp, #2
 590:	00040000 	andeq	r0, r4, r0
 594:	00000000 	andeq	r0, r0, r0
 598:	000027f8 	strdeq	r2, [r0], -r8
 59c:	00000020 	andeq	r0, r0, r0, lsr #32
 5a0:	00002818 	andeq	r2, r0, r8, lsl r8
 5a4:	00000190 	muleq	r0, r0, r1
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
 5a8:	000029a8 	andeq	r2, r0, r8, lsr #19
 5ac:	00000048 	andeq	r0, r0, r8, asr #32
				DEBUG_PRINT("\r\nResponse");
 5b0:	000029f0 	strdeq	r2, [r0], -r0
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
 5b4:	00000024 	andeq	r0, r0, r4, lsr #32
 5b8:	00002a14 	andeq	r2, r0, r4, lsl sl
 5bc:	0000005c 	andeq	r0, r0, ip, asr r0
 5c0:	00002a70 	andeq	r2, r0, r0, ror sl
 5c4:	00000038 	andeq	r0, r0, r8, lsr r0
 5c8:	00002aa8 	andeq	r2, r0, r8, lsr #21
				if(!response_flag){
 5cc:	00000180 	andeq	r0, r0, r0, lsl #3
					response_flag=1;
 5d0:	00002c28 	andeq	r2, r0, r8, lsr #24
					trigger(&response_flag);
 5d4:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				switch(response_message_5->status){
 5d8:	00002cf8 	strdeq	r2, [r0], -r8
 5dc:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 5e0:	00002ee8 	andeq	r2, r0, r8, ror #29
 5e4:	00000070 	andeq	r0, r0, r0, ror r0
 5e8:	00002f58 	andeq	r2, r0, r8, asr pc
						if (response_checker[0] == response_message_5->request_number){
 5ec:	00000174 	andeq	r0, r0, r4, ror r1
	...
							switch(response_checker[1]){
 5f8:	00000044 	andeq	r0, r0, r4, asr #32
 5fc:	a6d50002 	ldrbge	r0, [r5], r2
 600:	00040000 	andeq	r0, r4, r0
 604:	00000000 	andeq	r0, r0, r0
									proceed response_1_create;
 608:	000030cc 	andeq	r3, r0, ip, asr #1
						proceed response_2;
 60c:	00000024 	andeq	r0, r0, r4, lsr #32
									proceed response_1_delete;
 610:	000030f0 	strdeq	r3, [r0], -r0
									proceed response_1_retrieve;
 614:	00000024 	andeq	r0, r0, r4, lsr #32
						proceed response_2;
 618:	00003114 	andeq	r3, r0, r4, lsl r1
						proceed response_3;
 61c:	00000008 	andeq	r0, r0, r8
						proceed response_4;
 620:	0000311c 	andeq	r3, r0, ip, lsl r1
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
 624:	00000004 	andeq	r0, r0, r4
 628:	00003120 	andeq	r3, r0, r0, lsr #2
				break;
 62c:	00000004 	andeq	r0, r0, r4
}
 630:	00003124 	andeq	r3, r0, r4, lsr #2
 634:	00000048 	andeq	r0, r0, r8, asr #32
	...
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	ae0a0002 	cdpge	0, 0, cr0, cr10, cr2, {0}
fsm root {
 648:	00040000 	andeq	r0, r4, r0
 64c:	00000000 	andeq	r0, r0, r0
 650:	0000316c 	andeq	r3, r0, ip, ror #2
 654:	00000070 	andeq	r0, r0, r0, ror r0
	...
 660:	0000001c 	andeq	r0, r0, ip, lsl r0
 664:	b23b0002 	eorslt	r0, fp, #2
 668:	00040000 	andeq	r0, r4, r0
 66c:	00000000 	andeq	r0, r0, r0
 670:	000031dc 	ldrdeq	r3, [r0], -ip
 674:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 680:	0000002c 	andeq	r0, r0, ip, lsr #32
 684:	b67f0002 	ldrbtlt	r0, [pc], -r2
 688:	00040000 	andeq	r0, r4, r0
 68c:	00000000 	andeq	r0, r0, r0
 690:	000032f8 	strdeq	r3, [r0], -r8
 694:	00000020 	andeq	r0, r0, r0, lsr #32
		node_db = (struct Node *)umalloc(sizeof(struct Node));
 698:	00003318 	andeq	r3, r0, r8, lsl r3
 69c:	00000230 	andeq	r0, r0, r0, lsr r2
 6a0:	00003548 	andeq	r3, r0, r8, asr #10
		init_node(node_db);
 6a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		tcv_plug (0, &plug_null);
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b4:	bc730002 	ldcllt	0, cr0, [r3], #-8
		sfd = tcv_open (WNONE, 0, 0);
 6b8:	00040000 	andeq	r0, r4, r0
 6bc:	00000000 	andeq	r0, r0, r0
 6c0:	00003598 	muleq	r0, r8, r5
 6c4:	00000390 	muleq	r0, r0, r3
	...
			diag("Cannot open tcv interface");
 6d0:	00000014 	andeq	r0, r0, r4, lsl r0
			halt();
 6d4:	c2060002 	andgt	r0, r6, #2
		tcv_control(sfd, PHYSOPT_ON, NULL);
 6d8:	00040000 	andeq	r0, r4, r0
	...
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
 6e8:	00000024 	andeq	r0, r0, r4, lsr #32
 6ec:	e1f40002 	mvns	r0, r2
 6f0:	00040000 	andeq	r0, r4, r0
 6f4:	00000000 	andeq	r0, r0, r0
 6f8:	00003928 	andeq	r3, r0, r8, lsr #18
 6fc:	00000028 	andeq	r0, r0, r8, lsr #32
		ser_inf(get_choice, "%c", &CHOICE);
 700:	00000000 	andeq	r0, r0, r0
 704:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
		switch(CHOICE) {
 710:	0000001c 	andeq	r0, r0, ip, lsl r0
 714:	e3820002 	orr	r0, r2, #2
 718:	00040000 	andeq	r0, r4, r0
 71c:	00000000 	andeq	r0, r0, r0
 720:	00003950 	andeq	r3, r0, r0, asr r9
 724:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 730:	00000024 	andeq	r0, r0, r4, lsr #32
 734:	e45b0002 	ldrb	r0, [fp], #-2
 738:	00040000 	andeq	r0, r4, r0
				proceed menu;
 73c:	00000000 	andeq	r0, r0, r0
 740:	00003980 	andeq	r3, r0, r0, lsl #19
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
 744:	00000020 	andeq	r0, r0, r0, lsr #32
 748:	000039a0 	andeq	r3, r0, r0, lsr #19
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		DEBUG_PRINT("setting node group ID");
 758:	0000003c 	andeq	r0, r0, ip, lsr r0
 75c:	e5a20002 	str	r0, [r2, #2]!
    node->gid = gid; 
 760:	00040000 	andeq	r0, r4, r0
		if (!set_node_gid(node_db, NEW_NODE_GID)){
 764:	00000000 	andeq	r0, r0, r0
    node->gid = gid; 
 768:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
		proceed menu;
 76c:	00000008 	andeq	r0, r0, r8
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
 770:	00000000 	andeq	r0, r0, r0
 774:	00000006 	andeq	r0, r0, r6
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
 778:	000039c0 	andeq	r3, r0, r0, asr #19
 77c:	00000008 	andeq	r0, r0, r8
 780:	00000000 	andeq	r0, r0, r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
 784:	00000006 	andeq	r0, r0, r6
 788:	00000000 	andeq	r0, r0, r0
		if((node_db->id < 1) || (node_db->id > 25)){
 78c:	00000008 	andeq	r0, r0, r8
	...
			strncpy(reason, "Out of Range", 50);
 798:	00000064 	andeq	r0, r0, r4, rrx
 79c:	e6dc0002 	ldrb	r0, [ip], r2
			proceed invalid_node_id;
 7a0:	00040000 	andeq	r0, r4, r0
 7a4:	00000000 	andeq	r0, r0, r0
				strncpy(reason, "ID is already in use", 50);
 7a8:	000039c8 	andeq	r3, r0, r8, asr #19
		for(int i = 0; i < node_db->index; i++){
 7ac:	0000005c 	andeq	r0, r0, ip, asr r0
 7b0:	00003a24 	andeq	r3, r0, r4, lsr #20
 7b4:	0000002c 	andeq	r0, r0, ip, lsr #32
		proceed menu;
 7b8:	00000000 	andeq	r0, r0, r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
 7bc:	00000090 	muleq	r0, r0, r0
 7c0:	00003a50 	andeq	r3, r0, r0, asr sl
 7c4:	00000018 	andeq	r0, r0, r8, lsl r0
 7c8:	00003a68 	andeq	r3, r0, r8, ror #20
		proceed get_new_node_id;
 7cc:	00000060 	andeq	r0, r0, r0, rrx
 7d0:	00003ac8 	andeq	r3, r0, r8, asr #21
		if (!clear_node_neighbour_array(node_db)){
 7d4:	00000034 	andeq	r0, r0, r4, lsr r0
 7d8:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error Clearing Node Array", 50);
 7dc:	00000038 	andeq	r0, r0, r8, lsr r0
 7e0:	00000000 	andeq	r0, r0, r0
 7e4:	0000000c 	andeq	r0, r0, ip
			proceed error;
 7e8:	00000000 	andeq	r0, r0, r0
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
 7ec:	00000034 	andeq	r0, r0, r4, lsr r0
 7f0:	00000000 	andeq	r0, r0, r0
		request_packet->gid = node_db->gid;
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		request_packet->request_number = generate_request_num();
 800:	00000054 	andeq	r0, r0, r4, asr r0
 804:	ef9f0002 	svc	0x009f0002
		call sender(request_packet, wait_discovery);
 808:	00040000 	andeq	r0, r4, r0
	...
 814:	00000014 	andeq	r0, r0, r4, lsl r0
 818:	00003afc 	strdeq	r3, [r0], -ip
 81c:	00000028 	andeq	r0, r0, r8, lsr #32
			release;
 820:	00003b24 	andeq	r3, r0, r4, lsr #22
				proceed get_new_node_id;
 824:	0000004c 	andeq	r0, r0, ip, asr #32
				proceed clear_neighbour_array;
 828:	00003b70 	andeq	r3, r0, r0, ror fp
				proceed create_proto_start;
 82c:	00000150 	andeq	r0, r0, r0, asr r1
				proceed start_delete_proto;
 830:	00003cc0 	andeq	r3, r0, r0, asr #25
				proceed start_retrieve_proto;
 834:	00000118 	andeq	r0, r0, r8, lsl r1
				proceed display_db;
 838:	00003dd8 	ldrdeq	r3, [r0], -r8
				proceed del_local;
 83c:	00000020 	andeq	r0, r0, r0, lsr #32
			if(node_db->id == node_db->nnodes[i]){
 840:	00000000 	andeq	r0, r0, r0
 844:	00000060 	andeq	r0, r0, r0, rrx
 848:	00003df8 	strdeq	r3, [r0], -r8
				strncpy(reason, "ID is already in use", 50);
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
				proceed invalid_node_id;
 858:	00000024 	andeq	r0, r0, r4, lsr #32
		for(int i = 0; i < node_db->index; i++){
 85c:	fa570002 	blx	15c086c <__ccfg+0x15a08c4>
		if (discovery_wait_flag == 0){
 860:	00040000 	andeq	r0, r4, r0
			discovery_wait_flag=1;
 864:	00000000 	andeq	r0, r0, r0
 868:	00003e14 	andeq	r3, r0, r4, lsl lr
			delay(3000, find_proto_start);
 86c:	000000d4 	ldrdeq	r0, [r0], -r4
 870:	00003ee8 	andeq	r3, r0, r8, ror #29
		if (discovery_wait_flag == 1){
 874:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			delay(3000, display_neighbour_nodes);
 880:	000000b4 	strheq	r0, [r0], -r4
 884:	fc620002 	stc2l	0, cr0, [r2], #-8
 888:	00040000 	andeq	r0, r4, r0
 88c:	00000000 	andeq	r0, r0, r0
 890:	00003f8c 	andeq	r3, r0, ip, lsl #31
 894:	0000007c 	andeq	r0, r0, ip, ror r0
 898:	00004008 	andeq	r4, r0, r8
 89c:	000000ac 	andeq	r0, r0, ip, lsr #1
 8a0:	000040b4 	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
 8a4:	0000005c 	andeq	r0, r0, ip, asr r0
 8a8:	00004110 	andeq	r4, r0, r0, lsl r1
 8ac:	00000018 	andeq	r0, r0, r8, lsl r0
 8b0:	00000000 	andeq	r0, r0, r0
 8b4:	00000010 	andeq	r0, r0, r0, lsl r0
 8b8:	00004128 	andeq	r4, r0, r8, lsr #2
 8bc:	00000010 	andeq	r0, r0, r0, lsl r0
 8c0:	00004138 	andeq	r4, r0, r8, lsr r1
 8c4:	00000014 	andeq	r0, r0, r4, lsl r0
 8c8:	0000414c 	andeq	r4, r0, ip, asr #2
		if(node_db->index == 0){
 8cc:	00000064 	andeq	r0, r0, r4, rrx
 8d0:	000041b0 			; <UNDEFINED> instruction: 0x000041b0
 8d4:	00000014 	andeq	r0, r0, r4, lsl r0
			proceed menu;
 8d8:	000041c4 	andeq	r4, r0, r4, asr #3
fsm root {
 8dc:	00000014 	andeq	r0, r0, r4, lsl r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
 8e0:	000041d8 	ldrdeq	r4, [r0], -r8
		for (int i=0; i<node_db->index; i++) {
 8e4:	00000014 	andeq	r0, r0, r4, lsl r0
 8e8:	000041ec 	andeq	r4, r0, ip, ror #3
 8ec:	00000028 	andeq	r0, r0, r8, lsr #32
		proceed menu;
 8f0:	00004214 	andeq	r4, r0, r4, lsl r2
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
 8f4:	00000010 	andeq	r0, r0, r0, lsl r0
 8f8:	00004224 	andeq	r4, r0, r4, lsr #4
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
 8fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 900:	00004250 	andeq	r4, r0, r0, asr r2
 904:	00000014 	andeq	r0, r0, r4, lsl r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 908:	00004264 	andeq	r4, r0, r4, ror #4
 90c:	00000014 	andeq	r0, r0, r4, lsl r0
			strncpy(reason, "Error: improper ID", 50);
 910:	00004278 	andeq	r4, r0, r8, ror r2
 914:	00000110 	andeq	r0, r0, r0, lsl r1
 918:	00004388 	andeq	r4, r0, r8, lsl #7
			proceed error;
 91c:	00000064 	andeq	r0, r0, r4, rrx
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
 920:	000043ec 	andeq	r4, r0, ip, ror #7
 924:	00000028 	andeq	r0, r0, r8, lsr #32
		ser_in(get_record_to_create, user_provided_record, 20);
 928:	00004414 	andeq	r4, r0, r4, lsl r4
 92c:	00000150 	andeq	r0, r0, r0, asr r1
	...
		create_message->gid = node_db->gid;
 938:	0000003c 	andeq	r0, r0, ip, lsr r0
 93c:	077d0002 	ldrbeq	r0, [sp, -r2]!
 940:	00040001 	andeq	r0, r4, r1
	...
		create_message->sender_id = node_db->id;
 94c:	000000f4 	strdeq	r0, [r0], -r4
 950:	00004564 	andeq	r4, r0, r4, ror #10
 954:	00000220 	andeq	r0, r0, r0, lsr #4
		strncpy(create_message->record, user_provided_record, 20);
 958:	00004784 	andeq	r4, r0, r4, lsl #15
		create_message->receiver_id = user_provided_receiver_id;
 95c:	00000060 	andeq	r0, r0, r0, rrx
		strncpy(create_message->record, user_provided_record, 20);
 960:	00000000 	andeq	r0, r0, r0
		response_checker[0] = create_message->request_number;
 964:	00000078 	andeq	r0, r0, r8, ror r0
		call sender(create_message, wait);
 968:	000047e4 	andeq	r4, r0, r4, ror #15
		response_checker[1] = create_message->tpe;
 96c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		call sender(create_message, wait);
 978:	00000044 	andeq	r0, r0, r4, asr #32
 97c:	10a40002 	adcne	r0, r4, r2
 980:	00040001 	andeq	r0, r4, r1
	...
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
 98c:	00000010 	andeq	r0, r0, r0, lsl r0
 990:	00000000 	andeq	r0, r0, r0
 994:	00000018 	andeq	r0, r0, r8, lsl r0
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
 998:	000047fc 	strdeq	r4, [r0], -ip
 99c:	0000004c 	andeq	r0, r0, ip, asr #32
			strncpy(reason, "Error: improper node ID", 50);
 9a0:	00000000 	andeq	r0, r0, r0
 9a4:	00000030 	andeq	r0, r0, r0, lsr r0
			proceed error;
 9a8:	00004848 	andeq	r4, r0, r8, asr #16
 9ac:	0000006c 	andeq	r0, r0, ip, rrx
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
 9b0:	000048b4 			; <UNDEFINED> instruction: 0x000048b4
 9b4:	00000016 	andeq	r0, r0, r6, lsl r0
	...
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
 9c0:	00000044 	andeq	r0, r0, r4, asr #32
		if (us_pr_in < 0 || us_pr_in > 40){
 9c4:	14740002 	ldrbtne	r0, [r4], #-2
			strncpy(reason, "Error: invalid index", 50);
 9c8:	00040001 	andeq	r0, r4, r1
 9cc:	00000000 	andeq	r0, r0, r0
 9d0:	000048cc 	andeq	r4, r0, ip, asr #17
			proceed error;
 9d4:	00000028 	andeq	r0, r0, r8, lsr #32
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
 9d8:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 9dc:	00000008 	andeq	r0, r0, r8
 9e0:	00000000 	andeq	r0, r0, r0
		delete_record->gid = node_db->gid;
 9e4:	00000022 	andeq	r0, r0, r2, lsr #32
		delete_record->tpe = DELETE_RECORD;
 9e8:	00000000 	andeq	r0, r0, r0
		delete_record->request_number = generate_request_num();
 9ec:	0000002e 	andeq	r0, r0, lr, lsr #32
 9f0:	00000000 	andeq	r0, r0, r0
		call sender(delete_record, wait);
 9f4:	00000034 	andeq	r0, r0, r4, lsr r0
		delete_record->sender_id = node_db->id;
 9f8:	00000000 	andeq	r0, r0, r0
		delete_record->receiver_id = user_provided_receiver_id;
 9fc:	00000040 	andeq	r0, r0, r0, asr #32
	...
		response_checker[0] = delete_record->request_number;
 a08:	0000001c 	andeq	r0, r0, ip, lsl r0
		call sender(delete_record, wait);
 a0c:	1a1f0002 	bne	7c0a1c <__ccfg+0x7a0a74>
 a10:	00040001 	andeq	r0, r4, r1
 a14:	00000000 	andeq	r0, r0, r0
 a18:	000048fc 	strdeq	r4, [r0], -ip
 a1c:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
		ser_inf(get_id_for_retrieve, "%d", &get_id);
 a28:	0000001c 	andeq	r0, r0, ip, lsl r0
 a2c:	29540002 	ldmdbcs	r4, {r1}^
 a30:	00040001 	andeq	r0, r4, r1
		if (get_id < 1 || get_id > 25){
 a34:	00000000 	andeq	r0, r0, r0
 a38:	000049a8 	andeq	r4, r0, r8, lsr #19
			strncpy(reason, "Error: improper node ID", 50);
 a3c:	0000004c 	andeq	r0, r0, ip, asr #32
	...
			proceed error;
 a48:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
 a4c:	32ce0002 	sbccc	r0, lr, #2
 a50:	00040001 	andeq	r0, r4, r1
	...
		if (beg_for_index < 0 || beg_for_index > 40){
 a60:	0000001c 	andeq	r0, r0, ip, lsl r0
 a64:	3bf80002 	blcc	ffe00a74 <_estack+0xdfdfba74>
			strncpy(reason, "Error: invalid index", 50);
 a68:	00040001 	andeq	r0, r4, r1
 a6c:	00000000 	andeq	r0, r0, r0
			proceed error;
 a70:	000049f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
 a74:	00000054 	andeq	r0, r0, r4, asr r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d2 	ldrdeq	r0, [r0], -r2
       4:	000000d2 	ldrdeq	r0, [r0], -r2
       8:	000000d6 	ldrdeq	r0, [r0], -r6
       c:	000000da 	ldrdeq	r0, [r0], -sl
    return node->data_base.item_array[index];
      10:	000000dc 	ldrdeq	r0, [r0], -ip
      14:	000000de 	ldrdeq	r0, [r0], -lr
      18:	000000e0 	andeq	r0, r0, r0, ror #1
};
      1c:	000000e2 	andeq	r0, r0, r2, ror #1
      20:	000000e4 	andeq	r0, r0, r4, ror #1
      24:	00000130 	andeq	r0, r0, r0, lsr r1
      28:	00000134 	andeq	r0, r0, r4, lsr r1
      2c:	00000184 	andeq	r0, r0, r4, lsl #3
	...
      38:	000000dc 	ldrdeq	r0, [r0], -ip
      3c:	000000de 	ldrdeq	r0, [r0], -lr
			i = k;
      40:	000000e0 	andeq	r0, r0, r0, ror #1
				j->Next = k;
      44:	000000e2 	andeq	r0, r0, r2, ror #1
      48:	000000e4 	andeq	r0, r0, r4, ror #1
}
      4c:	00000128 	andeq	r0, r0, r8, lsr #2
      50:	0000013a 	andeq	r0, r0, sl, lsr r1
      54:	00000184 	andeq	r0, r0, r4, lsl #3
	...
			nq++;
      60:	00000298 	muleq	r0, r8, r2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      68:	000003d6 	ldrdeq	r0, [r0], -r6
      6c:	00000632 	andeq	r0, r0, r2, lsr r6
	...
      78:	000002d2 	ldrdeq	r0, [r0], -r2
      7c:	00000346 	andeq	r0, r0, r6, asr #6
      80:	000003d6 	ldrdeq	r0, [r0], -r6
      84:	0000062e 	andeq	r0, r0, lr, lsr #12
	...
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00000404 	andeq	r0, r0, r4, lsl #8
      94:	0000040c 	andeq	r0, r0, ip, lsl #8
      98:	0000043c 	andeq	r0, r0, ip, lsr r4
	if (baction == NULL)
      9c:	0000043c 	andeq	r0, r0, ip, lsr r4
	...
endthread
      a8:	00000566 	andeq	r0, r0, r6, ror #10
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000578 	andeq	r0, r0, r8, ror r5
      b0:	0000057c 	andeq	r0, r0, ip, ror r5
endthread
      b4:	00000580 	andeq	r0, r0, r0, lsl #11
	...
      c0:	00000760 	andeq	r0, r0, r0, ror #14
      c4:	00000764 	andeq	r0, r0, r4, ror #14
fsm sender(struct ResponseMessage *message) {
      c8:	00000766 	andeq	r0, r0, r6, ror #14
      cc:	00000766 	andeq	r0, r0, r6, ror #14
      d0:	00000768 	andeq	r0, r0, r8, ror #14
}
      d4:	0000076a 	andeq	r0, r0, sl, ror #14
	...
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      e0:	00000776 	andeq	r0, r0, r6, ror r7
      e4:	000007a6 	andeq	r0, r0, r6, lsr #15
      e8:	000007a8 	andeq	r0, r0, r8, lsr #15
      ec:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
		packet[1] = message->gid;
      f0:	0000083e 	andeq	r0, r0, lr, lsr r8
      f4:	0000085e 	andeq	r0, r0, lr, asr r8
	...
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	000007a8 	andeq	r0, r0, r8, lsr #15
     104:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
		*p = message->tpe;p++;
     108:	0000083e 	andeq	r0, r0, lr, lsr r8
		*p = message->request_number;p++;
     10c:	0000085e 	andeq	r0, r0, lr, asr r8
	...
		switch(message->tpe) {
     118:	000007ec 	andeq	r0, r0, ip, ror #15
     11c:	0000081e 	andeq	r0, r0, lr, lsl r8
     120:	0000085e 	andeq	r0, r0, lr, asr r8
		tcv_endp(packet);
     124:	0000085e 	andeq	r0, r0, lr, asr r8
	...
}
     130:	000008de 	ldrdeq	r0, [r0], -lr
		finish;
     134:	000008ee 	andeq	r0, r0, lr, ror #17
     138:	00000b1a 	andeq	r0, r0, sl, lsl fp
     13c:	00000b38 	andeq	r0, r0, r8, lsr fp
	...
				strncpy(p, message->record, sizeof(message->record));
     148:	000000c8 	andeq	r0, r0, r8, asr #1
     14c:	00000184 	andeq	r0, r0, r4, lsl #3
     150:	00000001 	andeq	r0, r0, r1
				strncpy(p, message->record, sizeof(message->record));
     154:	00000001 	andeq	r0, r0, r1
     158:	00000001 	andeq	r0, r0, r1
				strncpy(p, message->record, sizeof(message->record));
     15c:	00000001 	andeq	r0, r0, r1
				break;
     160:	00000001 	andeq	r0, r0, r1
				*p = message->record_index;p++;
     164:	00000001 	andeq	r0, r0, r1
				*p = message->padding;
     168:	00000184 	andeq	r0, r0, r4, lsl #3
				break;
     16c:	00000198 	muleq	r0, r8, r1
     170:	00000198 	muleq	r0, r8, r1
     174:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     178:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
     17c:	000001ce 	andeq	r0, r0, lr, asr #3
     180:	00000001 	andeq	r0, r0, r1
		node->nnodes[i] = 0;
     184:	00000001 	andeq	r0, r0, r1
     188:	000001ce 	andeq	r0, r0, lr, asr #3
     18c:	000001e4 	andeq	r0, r0, r4, ror #3
     190:	000001e4 	andeq	r0, r0, r4, ror #3
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	00000200 	andeq	r0, r0, r0, lsl #4
bool init_node(struct Node* node){
     198:	00000001 	andeq	r0, r0, r1
    node->id  = 0;                  // default id value 0
     19c:	00000001 	andeq	r0, r0, r1
    node->index = 0;                // default entry count 0
     1a0:	00000200 	andeq	r0, r0, r0, lsl #4
    node->data_base.item_count = 0; // default no items in array
     1a4:	00000226 	andeq	r0, r0, r6, lsr #4
	reset_array(node);
     1a8:	00000226 	andeq	r0, r0, r6, lsr #4
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	00000278 	andeq	r0, r0, r8, ror r2
     1b0:	00000278 	andeq	r0, r0, r8, ror r2
};
     1b4:	00000648 	andeq	r0, r0, r8, asr #12
     1b8:	00000648 	andeq	r0, r0, r8, asr #12
uint8_t generate_request_num(void){
     1bc:	00000bfc 	strdeq	r0, [r0], -ip
	...
    return (uint8_t) (rand() % 255);
     1c8:	00000cea 	andeq	r0, r0, sl, ror #25
}
     1cc:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
            node->nnodes[i] = 0; // set to null byte
     1d0:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1d4:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1d8:	00000cf4 	strdeq	r0, [r0], -r4
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00000cf6 	strdeq	r0, [r0], -r6
	...
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e8:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	00000cf2 	strdeq	r0, [r0], -r2
     1f0:	00000cf6 	strdeq	r0, [r0], -r6
     1f4:	00000cf8 	strdeq	r0, [r0], -r8
	...
bool delete_all(struct Node *node){
     200:	00000d08 	andeq	r0, r0, r8, lsl #26
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	00000d0a 	andeq	r0, r0, sl, lsl #26
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00000d0c 	andeq	r0, r0, ip, lsl #26
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00000d0e 	andeq	r0, r0, lr, lsl #26
	...
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	00000d42 	andeq	r0, r0, r2, asr #26
    node->data_base.item_count = 0;
     21c:	00000d46 	andeq	r0, r0, r6, asr #26
}
     220:	00000d48 	andeq	r0, r0, r8, asr #26
        return true;
     224:	00000d4a 	andeq	r0, r0, sl, asr #26
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00000d4c 	andeq	r0, r0, ip, asr #26
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00000d54 	andeq	r0, r0, r4, asr sp
	...
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     238:	00000d78 	andeq	r0, r0, r8, ror sp
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00000d7e 	andeq	r0, r0, lr, ror sp
	response_message->tpe = RESPONSE;
     240:	00000d80 	andeq	r0, r0, r0, lsl #27
	response_message->status = status;
     244:	00000d86 	andeq	r0, r0, r6, lsl #27
	...
	response_message->sender_id = sender_id;
     250:	00000da8 	andeq	r0, r0, r8, lsr #27
	response_message->status = status;
     254:	00000e2e 	andeq	r0, r0, lr, lsr #28
	if (!padding){
     258:	00000e54 	andeq	r0, r0, r4, asr lr
		response_message->padding = padding;
     25c:	00000eac 	andeq	r0, r0, ip, lsr #29
	...
		strncpy(response_message->record, rec, 20);
     268:	00000f1c 	andeq	r0, r0, ip, lsl pc
     26c:	00000f1e 	andeq	r0, r0, lr, lsl pc
     270:	00000f20 	andeq	r0, r0, r0, lsr #30
};
     274:	00000f34 	andeq	r0, r0, r4, lsr pc
	...
fsm receiver(struct Node* node_db) {
     280:	00000f50 	andeq	r0, r0, r0, asr pc
     284:	00000f52 	andeq	r0, r0, r2, asr pc
     288:	00000f54 	andeq	r0, r0, r4, asr pc
     28c:	00000f5c 	andeq	r0, r0, ip, asr pc
	...
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	00001098 	muleq	r0, r8, r0
     29c:	0000109c 	muleq	r0, ip, r0
     2a0:	0000109e 	muleq	r0, lr, r0
     2a4:	000010a0 	andeq	r1, r0, r0, lsr #1
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	000010a2 	andeq	r1, r0, r2, lsr #1
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	000010a4 	andeq	r1, r0, r4, lsr #1
	...
		switch (response_message_5->tpe){
     2b8:	00001100 	andeq	r1, r0, r0, lsl #2
     2bc:	00001104 	andeq	r1, r0, r4, lsl #2
     2c0:	00001116 	andeq	r1, r0, r6, lsl r1
     2c4:	00001142 	andeq	r1, r0, r2, asr #2
	...
     2d0:	00001158 	andeq	r1, r0, r8, asr r1
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	00001158 	andeq	r1, r0, r8, asr r1
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	0000115a 	andeq	r1, r0, sl, asr r1
				if (discovery_request_message->gid == node_db->gid){
     2dc:	0000115c 	andeq	r1, r0, ip, asr r1
	...
					DEBUG_PRINT("\r\nSending to sender");
     2e8:	0000115c 	andeq	r1, r0, ip, asr r1
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	0000115e 	andeq	r1, r0, lr, asr r1
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	00001160 	andeq	r1, r0, r0, ror #2
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	00001162 	andeq	r1, r0, r2, ror #2
					response_message_0->sender_id = node_db->id;
     2f8:	00001168 	andeq	r1, r0, r8, ror #2
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	0000116e 	andeq	r1, r0, lr, ror #2
					DEBUG_PRINT("\r\nSending to sender");
     300:	00001178 	andeq	r1, r0, r8, ror r1
					call sender(response_message_0, done_case);
     304:	0000117a 	andeq	r1, r0, sl, ror r1
     308:	00001186 	andeq	r1, r0, r6, lsl #3
     30c:	00001188 	andeq	r1, r0, r8, lsl #3
	...
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	0000119c 	muleq	r0, ip, r1
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	0000119c 	muleq	r0, ip, r1
     320:	0000119e 	muleq	r0, lr, r1
     324:	000011a0 	andeq	r1, r0, r0, lsr #3
	...
     330:	000011a2 	andeq	r1, r0, r2, lsr #3
     334:	000011a4 	andeq	r1, r0, r4, lsr #3
     338:	000011a6 	andeq	r1, r0, r6, lsr #3
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	000011a8 	andeq	r1, r0, r8, lsr #3
					node_db->index+=1;
     340:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
     344:	000011b6 			; <UNDEFINED> instruction: 0x000011b6
		tcv_endp(incoming_packet);
     348:	000011c0 	andeq	r1, r0, r0, asr #3
     34c:	000011c2 	andeq	r1, r0, r2, asr #3
	...
		ser_out(response_1_create, "\r\nData Saved");
     358:	000012a6 	andeq	r1, r0, r6, lsr #5
		proceed receiving;
     35c:	000012a8 	andeq	r1, r0, r8, lsr #5
     360:	000012aa 	andeq	r1, r0, sl, lsr #5
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	000012ae 	andeq	r1, r0, lr, lsr #5
     368:	000012be 			; <UNDEFINED> instruction: 0x000012be
		proceed receiving;
     36c:	000012c0 	andeq	r1, r0, r0, asr #5
	...
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     378:	000012a8 	andeq	r1, r0, r8, lsr #5
     37c:	000012aa 	andeq	r1, r0, sl, lsr #5
     380:	000012ae 	andeq	r1, r0, lr, lsr #5
		proceed receiving;
     384:	000012be 			; <UNDEFINED> instruction: 0x000012be
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	000012c0 	andeq	r1, r0, r0, asr #5
     38c:	000012fa 	strdeq	r1, [r0], -sl
	...
		proceed receiving;
     398:	000012b2 			; <UNDEFINED> instruction: 0x000012b2
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
     3a0:	000012de 	ldrdeq	r1, [r0], -lr
     3a4:	000012e6 	andeq	r1, r0, r6, ror #5
	...
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
     3b4:	000012ba 			; <UNDEFINED> instruction: 0x000012ba
     3b8:	000012f2 	strdeq	r1, [r0], -r2
     3bc:	000012f6 	strdeq	r1, [r0], -r6
	...
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c8:	000012ba 			; <UNDEFINED> instruction: 0x000012ba
		proceed receiving;
     3cc:	000012be 			; <UNDEFINED> instruction: 0x000012be
}
     3d0:	000012ec 	andeq	r1, r0, ip, ror #5
     3d4:	000012f2 	strdeq	r1, [r0], -r2
	...
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	000012fa 	strdeq	r1, [r0], -sl
     3e4:	000012fc 	strdeq	r1, [r0], -ip
     3e8:	000012fe 	strdeq	r1, [r0], -lr
     3ec:	00001300 	andeq	r1, r0, r0, lsl #6
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	00001302 	andeq	r1, r0, r2, lsl #6
					break;
     3f4:	00001304 	andeq	r1, r0, r4, lsl #6
	...
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	000012fc 	strdeq	r1, [r0], -ip
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	000012fe 	strdeq	r1, [r0], -lr
     408:	00001304 	andeq	r1, r0, r4, lsl #6
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	00001306 	andeq	r1, r0, r6, lsl #6
	...
					DEBUG_PRINT("\r\nCreate rec out if");
     418:	00001316 	andeq	r1, r0, r6, lsl r3
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	00001318 	andeq	r1, r0, r8, lsl r3
     420:	0000131a 	andeq	r1, r0, sl, lsl r3
     424:	0000131c 	andeq	r1, r0, ip, lsl r3
	...
     430:	0000132e 	andeq	r1, r0, lr, lsr #6
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	00001330 	andeq	r1, r0, r0, lsr r3
					call sender(response_message_2, done_case);
     438:	00001332 	andeq	r1, r0, r2, lsr r3
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	00001334 	andeq	r1, r0, r4, lsr r3
	...
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     448:	00001376 	andeq	r1, r0, r6, ror r3
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	00001376 	andeq	r1, r0, r6, ror r3
				DEBUG_PRINT("\r\nDelete rec");/*
     450:	0000137a 	andeq	r1, r0, sl, ror r3
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	0000137c 	andeq	r1, r0, ip, ror r3
	...
     460:	000013ac 	andeq	r1, r0, ip, lsr #7
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	000013ae 	andeq	r1, r0, lr, lsr #7
     468:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
     46c:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
	...
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	00001458 	andeq	r1, r0, r8, asr r4
     47c:	00001458 	andeq	r1, r0, r8, asr r4
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	0000145e 	andeq	r1, r0, lr, asr r4
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	00001460 	andeq	r1, r0, r0, ror #8
     488:	00001462 	andeq	r1, r0, r2, ror #8
     48c:	00001466 	andeq	r1, r0, r6, ror #8
	...
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	00001472 	andeq	r1, r0, r2, ror r4
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	00001474 	andeq	r1, r0, r4, ror r4
     4a0:	0000148a 	andeq	r1, r0, sl, lsl #9
     4a4:	0000148c 	andeq	r1, r0, ip, lsl #9
     4a8:	0000149e 	muleq	r0, lr, r4
     4ac:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	000014de 	ldrdeq	r1, [r0], -lr
     4b4:	00001638 	andeq	r1, r0, r8, lsr r6
	...
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4c0:	00001472 	andeq	r1, r0, r2, ror r4
     4c4:	00001474 	andeq	r1, r0, r4, ror r4
     4c8:	00001512 	andeq	r1, r0, r2, lsl r5
     4cc:	00001516 	andeq	r1, r0, r6, lsl r5
	...
     4d8:	00001516 	andeq	r1, r0, r6, lsl r5
     4dc:	00001516 	andeq	r1, r0, r6, lsl r5
     4e0:	0000151a 	andeq	r1, r0, sl, lsl r5
     4e4:	0000151e 	andeq	r1, r0, lr, lsl r5
     4e8:	00001522 	andeq	r1, r0, r2, lsr #10
     4ec:	00001524 	andeq	r1, r0, r4, lsr #10
	...
     4f8:	00001516 	andeq	r1, r0, r6, lsl r5
     4fc:	0000151a 	andeq	r1, r0, sl, lsl r5
     500:	00001530 	andeq	r1, r0, r0, lsr r5
     504:	00001532 	andeq	r1, r0, r2, lsr r5
     508:	00001536 	andeq	r1, r0, r6, lsr r5
     50c:	0000153a 	andeq	r1, r0, sl, lsr r5
	...
     518:	0000151e 	andeq	r1, r0, lr, lsl r5
     51c:	00001522 	andeq	r1, r0, r2, lsr #10
     520:	00001524 	andeq	r1, r0, r4, lsr #10
     524:	00001526 	andeq	r1, r0, r6, lsr #10
     528:	0000152a 	andeq	r1, r0, sl, lsr #10
     52c:	0000152e 	andeq	r1, r0, lr, lsr #10
	...
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     538:	00001532 	andeq	r1, r0, r2, lsr r5
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	00001536 	andeq	r1, r0, r6, lsr r5
				DEBUG_PRINT("\r\nretrieve rec");
     540:	00001550 	andeq	r1, r0, r0, asr r5
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00001554 	andeq	r1, r0, r4, asr r5
     548:	00001556 	andeq	r1, r0, r6, asr r5
     54c:	0000155e 	andeq	r1, r0, lr, asr r5
	...
     558:	00001548 	andeq	r1, r0, r8, asr #10
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	0000154a 	andeq	r1, r0, sl, asr #10
     560:	0000154c 	andeq	r1, r0, ip, asr #10
     564:	00001550 	andeq	r1, r0, r0, asr r5
	...
    return node->data_base.item_array[index];
     570:	0000158c 	andeq	r1, r0, ip, lsl #11
     574:	00001590 	muleq	r0, r0, r5
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	00001592 	muleq	r0, r2, r5
    return node->data_base.item_array[index];
     57c:	0000159a 	muleq	r0, sl, r5
	...
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     588:	00001590 	muleq	r0, r0, r5
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	00001592 	muleq	r0, r2, r5
     590:	0000159e 	muleq	r0, lr, r5
     594:	000015a0 	andeq	r1, r0, r0, lsr #11
	...
     5a0:	000015be 			; <UNDEFINED> instruction: 0x000015be
     5a4:	000015c0 	andeq	r1, r0, r0, asr #11
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	000015c2 	andeq	r1, r0, r2, asr #11
     5ac:	000015c4 	andeq	r1, r0, r4, asr #11
	...
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b8:	000015c0 	andeq	r1, r0, r0, asr #11
     5bc:	000015c2 	andeq	r1, r0, r2, asr #11
     5c0:	000015c4 	andeq	r1, r0, r4, asr #11
     5c4:	000015c8 	andeq	r1, r0, r8, asr #11
	...
					response_flag=1;
     5d0:	0000161e 	andeq	r1, r0, lr, lsl r6
					trigger(&response_flag);
     5d4:	00001620 	andeq	r1, r0, r0, lsr #12
				switch(response_message_5->status){
     5d8:	00001620 	andeq	r1, r0, r0, lsr #12
     5dc:	00001622 	andeq	r1, r0, r2, lsr #12
	...
     5e8:	00001626 	andeq	r1, r0, r6, lsr #12
						if (response_checker[0] == response_message_5->request_number){
     5ec:	0000162a 	andeq	r1, r0, sl, lsr #12
     5f0:	0000162c 	andeq	r1, r0, ip, lsr #12
     5f4:	0000162e 	andeq	r1, r0, lr, lsr #12
	...
							switch(response_checker[1]){
     600:	00000001 	andeq	r0, r0, r1
     604:	00000001 	andeq	r0, r0, r1
									proceed response_1_create;
     608:	00000001 	andeq	r0, r0, r1
						proceed response_2;
     60c:	00000001 	andeq	r0, r0, r1
	...
     618:	000016e0 	andeq	r1, r0, r0, ror #13
						proceed response_3;
     61c:	000016e0 	andeq	r1, r0, r0, ror #13
						proceed response_4;
     620:	000016e4 	andeq	r1, r0, r4, ror #13
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	000016f0 	strdeq	r1, [r0], -r0
	...
}
     630:	00000bfc 	strdeq	r0, [r0], -ip
     634:	00000c08 	andeq	r0, r0, r8, lsl #24
     638:	00000c08 	andeq	r0, r0, r8, lsl #24
     63c:	00000c34 	andeq	r0, r0, r4, lsr ip
     640:	00000c34 	andeq	r0, r0, r4, lsr ip
     644:	00000c5e 	andeq	r0, r0, lr, asr ip
fsm root {
     648:	00000c60 	andeq	r0, r0, r0, ror #24
     64c:	00000c9c 	muleq	r0, ip, ip
     650:	00000c9c 	muleq	r0, ip, ip
     654:	00000cdc 	ldrdeq	r0, [r0], -ip
     658:	00000001 	andeq	r0, r0, r1
     65c:	00000001 	andeq	r0, r0, r1
     660:	00000cdc 	ldrdeq	r0, [r0], -ip
     664:	00000d30 	andeq	r0, r0, r0, lsr sp
     668:	00000d30 	andeq	r0, r0, r0, lsr sp
     66c:	00000d70 	andeq	r0, r0, r0, ror sp
     670:	00000d70 	andeq	r0, r0, r0, ror sp
     674:	00000d98 	muleq	r0, r8, sp
     678:	00000d98 	muleq	r0, r8, sp
     67c:	00000eac 	andeq	r0, r0, ip, lsr #29
     680:	00000eac 	andeq	r0, r0, ip, lsr #29
     684:	00000efc 	strdeq	r0, [r0], -ip
     688:	00000efc 	strdeq	r0, [r0], -ip
     68c:	00000f50 	andeq	r0, r0, r0, asr pc
     690:	00000f50 	andeq	r0, r0, r0, asr pc
     694:	00000f88 	andeq	r0, r0, r8, lsl #31
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	00000f88 	andeq	r0, r0, r8, lsl #31
     69c:	00001098 	muleq	r0, r8, r0
     6a0:	00000001 	andeq	r0, r0, r1
		init_node(node_db);
     6a4:	00000001 	andeq	r0, r0, r1
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	00001098 	muleq	r0, r8, r0
     6ac:	00001158 	andeq	r1, r0, r8, asr r1
		tcv_plug (0, &plug_null);
     6b0:	00001158 	andeq	r1, r0, r8, asr r1
     6b4:	0000119c 	muleq	r0, ip, r1
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	0000119c 	muleq	r0, ip, r1
     6bc:	000011d8 	ldrdeq	r1, [r0], -r8
     6c0:	000011d8 	ldrdeq	r1, [r0], -r8
     6c4:	0000127c 	andeq	r1, r0, ip, ror r2
     6c8:	0000127c 	andeq	r1, r0, ip, ror r2
			diag("Cannot open tcv interface");
     6cc:	00001434 	andeq	r1, r0, r4, lsr r4
     6d0:	00001434 	andeq	r1, r0, r4, lsr r4
			halt();
     6d4:	00001458 	andeq	r1, r0, r8, asr r4
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	00000001 	andeq	r0, r0, r1
     6dc:	00000001 	andeq	r0, r0, r1
		runfsm receiver(node_db);
     6e0:	00001458 	andeq	r1, r0, r8, asr r4
     6e4:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
     6ec:	000016e0 	andeq	r1, r0, r0, ror #13
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
     6f8:	000016e0 	andeq	r1, r0, r0, ror #13
     6fc:	00001740 	andeq	r1, r0, r0, asr #14
	...
		ser_inf(get_choice, "%c", &CHOICE);
     708:	000017fc 	strdeq	r1, [r0], -ip
		switch(CHOICE) {
     70c:	000017fe 	strdeq	r1, [r0], -lr
     710:	000017fe 	strdeq	r1, [r0], -lr
     714:	00001800 	andeq	r1, r0, r0, lsl #16
	...
     720:	00001866 	andeq	r1, r0, r6, ror #16
     724:	00001908 	andeq	r1, r0, r8, lsl #18
     728:	0000190c 	andeq	r1, r0, ip, lsl #18
     72c:	00001910 	andeq	r1, r0, r0, lsl r9
	...
     738:	00001cdc 	ldrdeq	r1, [r0], -ip
				proceed menu;
     73c:	00001cde 	ldrdeq	r1, [r0], -lr
     740:	00001ce2 	andeq	r1, r0, r2, ror #25
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	00001ce4 	andeq	r1, r0, r4, ror #25
     748:	00001ce8 	andeq	r1, r0, r8, ror #25
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	00001cec 	andeq	r1, r0, ip, ror #25
     750:	00001cee 	andeq	r1, r0, lr, ror #25
     754:	00001cf8 	strdeq	r1, [r0], -r8
	...
    node->gid = gid; 
     760:	00001d2a 	andeq	r1, r0, sl, lsr #26
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     764:	00001d2c 	andeq	r1, r0, ip, lsr #26
    node->gid = gid; 
     768:	00001d2e 	andeq	r1, r0, lr, lsr #26
		proceed menu;
     76c:	00001d32 	andeq	r1, r0, r2, lsr sp
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     770:	00001dc2 	andeq	r1, r0, r2, asr #27
     774:	00001e24 	andeq	r1, r0, r4, lsr #28
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	00001e28 	andeq	r1, r0, r8, lsr #28
     77c:	00001e2c 	andeq	r1, r0, ip, lsr #28
     780:	00001e2e 	andeq	r1, r0, lr, lsr #28
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     784:	00001e30 	andeq	r1, r0, r0, lsr lr
	...
		if((node_db->id < 1) || (node_db->id > 25)){
     790:	00001d46 	andeq	r1, r0, r6, asr #26
     794:	00001d48 	andeq	r1, r0, r8, asr #26
			strncpy(reason, "Out of Range", 50);
     798:	00001d48 	andeq	r1, r0, r8, asr #26
     79c:	00001d4a 	andeq	r1, r0, sl, asr #26
	...
				strncpy(reason, "ID is already in use", 50);
     7a8:	00001740 	andeq	r1, r0, r0, asr #14
		for(int i = 0; i < node_db->index; i++){
     7ac:	0000177c 	andeq	r1, r0, ip, ror r7
     7b0:	0000177c 	andeq	r1, r0, ip, ror r7
     7b4:	000017fc 	strdeq	r1, [r0], -ip
		proceed menu;
     7b8:	000017fc 	strdeq	r1, [r0], -ip
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7bc:	00001814 	andeq	r1, r0, r4, lsl r8
     7c0:	00000001 	andeq	r0, r0, r1
     7c4:	00000001 	andeq	r0, r0, r1
     7c8:	00001814 	andeq	r1, r0, r4, lsl r8
		proceed get_new_node_id;
     7cc:	00001824 	andeq	r1, r0, r4, lsr #16
     7d0:	00001824 	andeq	r1, r0, r4, lsr #16
		if (!clear_node_neighbour_array(node_db)){
     7d4:	00001850 	andeq	r1, r0, r0, asr r8
     7d8:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error Clearing Node Array", 50);
     7dc:	00000001 	andeq	r0, r0, r1
     7e0:	00001850 	andeq	r1, r0, r0, asr r8
     7e4:	00001856 	andeq	r1, r0, r6, asr r8
			proceed error;
     7e8:	00001858 	andeq	r1, r0, r8, asr r8
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7ec:	00001924 	andeq	r1, r0, r4, lsr #18
     7f0:	00001924 	andeq	r1, r0, r4, lsr #18
		request_packet->gid = node_db->gid;
     7f4:	00001938 	andeq	r1, r0, r8, lsr r9
     7f8:	00001938 	andeq	r1, r0, r8, lsr r9
		request_packet->tpe = DISCOVERY_REQUEST;
     7fc:	0000196c 	andeq	r1, r0, ip, ror #18
		request_packet->request_number = generate_request_num();
     800:	0000196c 	andeq	r1, r0, ip, ror #18
     804:	000019a0 	andeq	r1, r0, r0, lsr #19
		call sender(request_packet, wait_discovery);
     808:	00000001 	andeq	r0, r0, r1
     80c:	00000001 	andeq	r0, r0, r1
		request_packet->receiver_id=0;
     810:	000019a0 	andeq	r1, r0, r0, lsr #19
		call sender(request_packet, wait_discovery);
     814:	000019c4 	andeq	r1, r0, r4, asr #19
     818:	000019c4 	andeq	r1, r0, r4, asr #19
     81c:	000019fc 	strdeq	r1, [r0], -ip
			release;
     820:	00000001 	andeq	r0, r0, r1
				proceed get_new_node_id;
     824:	00000001 	andeq	r0, r0, r1
				proceed clear_neighbour_array;
     828:	00000001 	andeq	r0, r0, r1
				proceed create_proto_start;
     82c:	00000001 	andeq	r0, r0, r1
				proceed start_delete_proto;
     830:	00000001 	andeq	r0, r0, r1
				proceed start_retrieve_proto;
     834:	00000001 	andeq	r0, r0, r1
				proceed display_db;
     838:	000019fc 	strdeq	r1, [r0], -ip
				proceed del_local;
     83c:	00001a20 	andeq	r1, r0, r0, lsr #20
			if(node_db->id == node_db->nnodes[i]){
     840:	00000001 	andeq	r0, r0, r1
     844:	00000001 	andeq	r0, r0, r1
     848:	00001a20 	andeq	r1, r0, r0, lsr #20
				strncpy(reason, "ID is already in use", 50);
     84c:	00001a2e 	andeq	r1, r0, lr, lsr #20
     850:	00001a2e 	andeq	r1, r0, lr, lsr #20
				proceed invalid_node_id;
     854:	00001a3e 	andeq	r1, r0, lr, lsr sl
     858:	00001a3e 	andeq	r1, r0, lr, lsr sl
		for(int i = 0; i < node_db->index; i++){
     85c:	00001a5a 	andeq	r1, r0, sl, asr sl
		if (discovery_wait_flag == 0){
     860:	00000001 	andeq	r0, r0, r1
			discovery_wait_flag=1;
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
			delay(3000, find_proto_start);
     86c:	00000001 	andeq	r0, r0, r1
     870:	00001a5a 	andeq	r1, r0, sl, asr sl
		if (discovery_wait_flag == 1){
     874:	00001a6e 	andeq	r1, r0, lr, ror #20
			discovery_wait_flag=0;
     878:	00001a6e 	andeq	r1, r0, lr, ror #20
     87c:	00001a7c 	andeq	r1, r0, ip, ror sl
			delay(3000, display_neighbour_nodes);
     880:	00001a7c 	andeq	r1, r0, ip, ror sl
     884:	00001aa0 	andeq	r1, r0, r0, lsr #21
     888:	00001aa0 	andeq	r1, r0, r0, lsr #21
     88c:	00001b3c 	andeq	r1, r0, ip, lsr fp
     890:	00001b3c 	andeq	r1, r0, ip, lsr fp
     894:	00001b8c 	andeq	r1, r0, ip, lsl #23
     898:	00001b8c 	andeq	r1, r0, ip, lsl #23
     89c:	00001bd4 	ldrdeq	r1, [r0], -r4
     8a0:	00001bd4 	ldrdeq	r1, [r0], -r4
     8a4:	00001c24 	andeq	r1, r0, r4, lsr #24
     8a8:	00000001 	andeq	r0, r0, r1
     8ac:	00000001 	andeq	r0, r0, r1
     8b0:	00001c24 	andeq	r1, r0, r4, lsr #24
     8b4:	00001ccc 	andeq	r1, r0, ip, asr #25
     8b8:	00001ccc 	andeq	r1, r0, ip, asr #25
     8bc:	00001d00 	andeq	r1, r0, r0, lsl #26
     8c0:	00001d00 	andeq	r1, r0, r0, lsl #26
     8c4:	00001d18 	andeq	r1, r0, r8, lsl sp
     8c8:	00000001 	andeq	r0, r0, r1
		if(node_db->index == 0){
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
			proceed menu;
     8d8:	00001d18 	andeq	r1, r0, r8, lsl sp
fsm root {
     8dc:	00001e54 	andeq	r1, r0, r4, asr lr
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e0:	00001e54 	andeq	r1, r0, r4, asr lr
		for (int i=0; i<node_db->index; i++) {
     8e4:	00001e78 	andeq	r1, r0, r8, ror lr
	...
		proceed menu;
     8f0:	00001f38 	andeq	r1, r0, r8, lsr pc
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     8f4:	00001f3e 	andeq	r1, r0, lr, lsr pc
     8f8:	00001f44 	andeq	r1, r0, r4, asr #30
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     8fc:	00001f48 	andeq	r1, r0, r8, asr #30
     900:	00001f50 	andeq	r1, r0, r0, asr pc
     904:	00001f70 	andeq	r1, r0, r0, ror pc
	...
			strncpy(reason, "Error: improper ID", 50);
     910:	00000001 	andeq	r0, r0, r1
     914:	00000001 	andeq	r0, r0, r1
     918:	00000001 	andeq	r0, r0, r1
			proceed error;
     91c:	00000001 	andeq	r0, r0, r1
	...
		ser_in(get_record_to_create, user_provided_record, 20);
     928:	00001e78 	andeq	r1, r0, r8, ror lr
     92c:	00001e8e 	andeq	r1, r0, lr, lsl #29
     930:	00001e8e 	andeq	r1, r0, lr, lsl #29
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     934:	00001ea8 	andeq	r1, r0, r8, lsr #29
		create_message->gid = node_db->gid;
     938:	00001ea8 	andeq	r1, r0, r8, lsr #29
     93c:	00001eb6 			; <UNDEFINED> instruction: 0x00001eb6
     940:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
		create_message->tpe = CREATE_RECORD;
     944:	00001f04 	andeq	r1, r0, r4, lsl #30
		create_message->request_number = generate_request_num();
     948:	00001f04 	andeq	r1, r0, r4, lsl #30
		create_message->sender_id = node_db->id;
     94c:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     950:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     954:	00002000 	andeq	r2, r0, r0
		strncpy(create_message->record, user_provided_record, 20);
     958:	00002000 	andeq	r2, r0, r0
		create_message->receiver_id = user_provided_receiver_id;
     95c:	000020c0 	andeq	r2, r0, r0, asr #1
		strncpy(create_message->record, user_provided_record, 20);
     960:	00000001 	andeq	r0, r0, r1
		response_checker[0] = create_message->request_number;
     964:	00000001 	andeq	r0, r0, r1
		call sender(create_message, wait);
     968:	000020c0 	andeq	r2, r0, r0, asr #1
		response_checker[1] = create_message->tpe;
     96c:	000020e4 	andeq	r2, r0, r4, ror #1
     970:	000020e4 	andeq	r2, r0, r4, ror #1
		call sender(create_message, wait);
     974:	00002164 	andeq	r2, r0, r4, ror #2
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
     980:	00000001 	andeq	r0, r0, r1
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     984:	00000001 	andeq	r0, r0, r1
     988:	00002164 	andeq	r2, r0, r4, ror #2
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     98c:	00002220 	andeq	r2, r0, r0, lsr #4
     990:	00000001 	andeq	r0, r0, r1
     994:	00000001 	andeq	r0, r0, r1
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: improper node ID", 50);
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
			proceed error;
     9a8:	00002220 	andeq	r2, r0, r0, lsr #4
     9ac:	0000224c 	andeq	r2, r0, ip, asr #4
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9b0:	0000224c 	andeq	r2, r0, ip, asr #4
     9b4:	000022ac 	andeq	r2, r0, ip, lsr #5
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
     9c0:	00000001 	andeq	r0, r0, r1
		if (us_pr_in < 0 || us_pr_in > 40){
     9c4:	00000001 	andeq	r0, r0, r1
			strncpy(reason, "Error: invalid index", 50);
     9c8:	00000001 	andeq	r0, r0, r1
     9cc:	00000001 	andeq	r0, r0, r1
     9d0:	00000001 	andeq	r0, r0, r1
			proceed error;
     9d4:	00000001 	andeq	r0, r0, r1
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9d8:	000022ac 	andeq	r2, r0, ip, lsr #5
     9dc:	00002314 	andeq	r2, r0, r4, lsl r3
     9e0:	00002314 	andeq	r2, r0, r4, lsl r3
		delete_record->gid = node_db->gid;
     9e4:	00002364 	andeq	r2, r0, r4, ror #6
		delete_record->tpe = DELETE_RECORD;
     9e8:	00002364 	andeq	r2, r0, r4, ror #6
		delete_record->request_number = generate_request_num();
     9ec:	00002400 	andeq	r2, r0, r0, lsl #8
     9f0:	00002400 	andeq	r2, r0, r0, lsl #8
		call sender(delete_record, wait);
     9f4:	00002440 	andeq	r2, r0, r0, asr #8
		delete_record->sender_id = node_db->id;
     9f8:	00002440 	andeq	r2, r0, r0, asr #8
		delete_record->receiver_id = user_provided_receiver_id;
     9fc:	00002474 	andeq	r2, r0, r4, ror r4
		delete_record->record_index = us_pr_in;
     a00:	00002474 	andeq	r2, r0, r4, ror r4
     a04:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
		response_checker[0] = delete_record->request_number;
     a08:	00000001 	andeq	r0, r0, r1
		call sender(delete_record, wait);
     a0c:	00000001 	andeq	r0, r0, r1
     a10:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
     a14:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
	...
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a20:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
     a24:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a28:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
     a2c:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
     a30:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
		if (get_id < 1 || get_id > 25){
     a34:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
     a38:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
			strncpy(reason, "Error: improper node ID", 50);
     a3c:	000024fc 	strdeq	r2, [r0], -ip
	...
			proceed error;
     a48:	00000001 	andeq	r0, r0, r1
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a4c:	00000001 	andeq	r0, r0, r1
     a50:	00000001 	andeq	r0, r0, r1
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a54:	00000001 	andeq	r0, r0, r1
     a58:	00000001 	andeq	r0, r0, r1
     a5c:	00000001 	andeq	r0, r0, r1
		if (beg_for_index < 0 || beg_for_index > 40){
     a60:	00000001 	andeq	r0, r0, r1
     a64:	00000001 	andeq	r0, r0, r1
	...
			proceed error;
     a70:	00000001 	andeq	r0, r0, r1
     a74:	00000001 	andeq	r0, r0, r1
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     a78:	00000001 	andeq	r0, r0, r1
     a7c:	00000001 	andeq	r0, r0, r1
	...
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a88:	00000001 	andeq	r0, r0, r1
		retrieve_record->gid = node_db->gid;
     a8c:	00000001 	andeq	r0, r0, r1
		retrieve_record->tpe = RETRIEVE_RECORD;
     a90:	00000001 	andeq	r0, r0, r1
		retrieve_record->request_number = generate_request_num();
     a94:	00000001 	andeq	r0, r0, r1
     a98:	00000001 	andeq	r0, r0, r1
		retrieve_record->receiver_id = get_id;
     a9c:	00000001 	andeq	r0, r0, r1
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aa0:	00000001 	andeq	r0, r0, r1
		retrieve_record->record_index = beg_for_index;
     aa4:	00000001 	andeq	r0, r0, r1
	...
		response_checker[0] = retrieve_record->request_number;
     ab0:	00000001 	andeq	r0, r0, r1
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     ab4:	00000001 	andeq	r0, r0, r1
		response_checker[1] = retrieve_record->tpe;
     ab8:	00000001 	andeq	r0, r0, r1
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     abc:	00000001 	andeq	r0, r0, r1
	...
		call sender(retrieve_record, wait);
     ac8:	00000001 	andeq	r0, r0, r1
     acc:	00000001 	andeq	r0, r0, r1
     ad0:	00000001 	andeq	r0, r0, r1
     ad4:	00000001 	andeq	r0, r0, r1
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad8:	00000001 	andeq	r0, r0, r1
     adc:	00000001 	andeq	r0, r0, r1
	...
		if(node_db->data_base.item_count != 0){
     ae8:	00000001 	andeq	r0, r0, r1
		ser_out(loop_through_data, "\r\n");
     aec:	00000001 	andeq	r0, r0, r1
     af0:	00000001 	andeq	r0, r0, r1
		proceed menu;
     af4:	00000001 	andeq	r0, r0, r1
	...
		proceed menu;
     b00:	00002508 	andeq	r2, r0, r8, lsl #10
     b04:	0000250c 	andeq	r2, r0, ip, lsl #10
		delay(3000, timeout);
     b08:	00002512 	andeq	r2, r0, r2, lsl r5
     b0c:	00002514 	andeq	r2, r0, r4, lsl r5
		when(&response_flag, menu);
     b10:	00002522 	andeq	r2, r0, r2, lsr #10
     b14:	00002522 	andeq	r2, r0, r2, lsr #10
		release;
     b18:	00002524 	andeq	r2, r0, r4, lsr #10
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b1c:	00002526 	andeq	r2, r0, r6, lsr #10
	...
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b28:	0000250e 	andeq	r2, r0, lr, lsl #10
     b2c:	00002510 	andeq	r2, r0, r0, lsl r5
     b30:	00002526 	andeq	r2, r0, r6, lsr #10
		for (int i=0; i<node_db->index; i++) {
     b34:	00002528 	andeq	r2, r0, r8, lsr #10
	...
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b40:	00002510 	andeq	r2, r0, r0, lsl r5
     b44:	00002512 	andeq	r2, r0, r2, lsl r5
     b48:	00002514 	andeq	r2, r0, r4, lsl r5
     b4c:	00002516 	andeq	r2, r0, r6, lsl r5
     b50:	0000251c 	andeq	r2, r0, ip, lsl r5
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b54:	0000251c 	andeq	r2, r0, ip, lsl r5
	...
     b60:	00002540 	andeq	r2, r0, r0, asr #10
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b64:	00002548 	andeq	r2, r0, r8, asr #10
     b68:	00002552 	andeq	r2, r0, r2, asr r5
		ser_out(timeout, "\r\nFailed to reach the destination");
     b6c:	00002552 	andeq	r2, r0, r2, asr r5
     b70:	00002556 	andeq	r2, r0, r6, asr r5
		proceed menu;
     b74:	00002558 	andeq	r2, r0, r8, asr r5
	...
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b80:	00002558 	andeq	r2, r0, r8, asr r5
		proceed menu;
     b84:	00002558 	andeq	r2, r0, r8, asr r5
}
     b88:	0000255a 	andeq	r2, r0, sl, asr r5
     b8c:	0000255c 	andeq	r2, r0, ip, asr r5
	...
     b98:	00002568 	andeq	r2, r0, r8, ror #10
     b9c:	0000256a 	andeq	r2, r0, sl, ror #10
     ba0:	0000256c 	andeq	r2, r0, ip, ror #10
     ba4:	00002570 	andeq	r2, r0, r0, ror r5
	...
     bb0:	00002588 	andeq	r2, r0, r8, lsl #11
     bb4:	0000258a 	andeq	r2, r0, sl, lsl #11
     bb8:	0000258e 	andeq	r2, r0, lr, lsl #11
     bbc:	00002590 	muleq	r0, r0, r5
     bc0:	00002596 	muleq	r0, r6, r5
     bc4:	000025a6 	andeq	r2, r0, r6, lsr #11
	...
     bd0:	00002588 	andeq	r2, r0, r8, lsl #11
     bd4:	0000258a 	andeq	r2, r0, sl, lsl #11
     bd8:	0000258e 	andeq	r2, r0, lr, lsl #11
     bdc:	00002590 	muleq	r0, r0, r5
     be0:	00002596 	muleq	r0, r6, r5
     be4:	00002596 	muleq	r0, r6, r5
     be8:	00002598 	muleq	r0, r8, r5
     bec:	0000259a 	muleq	r0, sl, r5
	...
     bf8:	000025ee 	andeq	r2, r0, lr, ror #11
static void devinit_uart (int devnum) {
     bfc:	000025f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	adddevfunc (ioreq_uart_a, devnum);
     c00:	000025f4 	strdeq	r2, [r0], -r4
     c04:	000025f6 	strdeq	r2, [r0], -r6
	...
	while (n) {
     c10:	000025fa 	strdeq	r2, [r0], -sl
     c14:	000025fa 	strdeq	r2, [r0], -sl
}
     c18:	000025fc 	strdeq	r2, [r0], -ip
	while (n--);
     c1c:	000025fe 	strdeq	r2, [r0], -lr
	...
		n--;
     c28:	00000001 	andeq	r0, r0, r1
     c2c:	00000001 	andeq	r0, r0, r1
     c30:	00000001 	andeq	r0, r0, r1
void mdelay (volatile word n) {
     c34:	00000001 	andeq	r0, r0, r1
	...
	while (n) {
     c40:	00000001 	andeq	r0, r0, r1
}
     c44:	00000001 	andeq	r0, r0, r1
		udelay (999);
     c48:	00000001 	andeq	r0, r0, r1
     c4c:	00000001 	andeq	r0, r0, r1
	...
		n--;
     c58:	00000001 	andeq	r0, r0, r1
     c5c:	00000001 	andeq	r0, r0, r1
void __pi_ondomain (lword d) {
     c60:	00000001 	andeq	r0, r0, r1
     c64:	00000001 	andeq	r0, r0, r1
	...
			__pi_systat.effpdm = 1;
     c70:	00000001 	andeq	r0, r0, r1
	PRCMPowerDomainOn (d);
     c74:	00000001 	andeq	r0, r0, r1
     c78:	00000001 	andeq	r0, r0, r1
     c7c:	00000001 	andeq	r0, r0, r1
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c88:	00002504 	andeq	r2, r0, r4, lsl #10
	__pi_systat.ondmns |= d;
     c8c:	00002538 	andeq	r2, r0, r8, lsr r5
     c90:	00002538 	andeq	r2, r0, r8, lsr r5
}
     c94:	00002568 	andeq	r2, r0, r8, ror #10
     c98:	00002568 	andeq	r2, r0, r8, ror #10
void __pi_offdomain (lword d) {
     c9c:	00002580 	andeq	r2, r0, r0, lsl #11
     ca0:	00002580 	andeq	r2, r0, r0, lsl #11
	PRCMPowerDomainOff (d);
     ca4:	000025d4 	ldrdeq	r2, [r0], -r4
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ca8:	000025d4 	ldrdeq	r2, [r0], -r4
     cac:	00002614 	andeq	r2, r0, r4, lsl r6
     cb0:	00002614 	andeq	r2, r0, r4, lsl r6
	if (d & PRCM_DOMAIN_RFCORE) {
     cb4:	00002638 	andeq	r2, r0, r8, lsr r6
     cb8:	00002638 	andeq	r2, r0, r8, lsr r6
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cbc:	0000264c 	andeq	r2, r0, ip, asr #12
     cc0:	0000264c 	andeq	r2, r0, ip, asr #12
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cc4:	00002660 	andeq	r2, r0, r0, ror #12
     cc8:	00000001 	andeq	r0, r0, r1
	__pi_systat.ondmns &= ~d;
     ccc:	00000001 	andeq	r0, r0, r1
     cd0:	00000001 	andeq	r0, r0, r1
}
     cd4:	00000001 	andeq	r0, r0, r1
     cd8:	00000001 	andeq	r0, r0, r1
void __pi_syserror (word ec, const char *m) {
     cdc:	00000001 	andeq	r0, r0, r1
	diag ("SYSERR: %x, %s", ec, m);
     ce0:	00000001 	andeq	r0, r0, r1
     ce4:	00000001 	andeq	r0, r0, r1
  __ASM volatile ("cpsid i" : : : "memory");
     ce8:	00000001 	andeq	r0, r0, r1
     cec:	00000001 	andeq	r0, r0, r1
     cf0:	00000001 	andeq	r0, r0, r1
     cf4:	00000001 	andeq	r0, r0, r1
		all_leds_blink;
     cf8:	00000001 	andeq	r0, r0, r1
     cfc:	00000001 	andeq	r0, r0, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d08:	00002660 	andeq	r2, r0, r0, ror #12
     d0c:	000026cc 	andeq	r2, r0, ip, asr #13
	...
     d18:	000026cc 	andeq	r2, r0, ip, asr #13
     d1c:	00002744 	andeq	r2, r0, r4, asr #14
	...
	while (1) {
     d28:	00002744 	andeq	r2, r0, r4, asr #14
     d2c:	00002798 	muleq	r0, r8, r7
	...
	setdel = __pi_mintk - __pi_old;
     d38:	00002798 	muleq	r0, r8, r7
     d3c:	000027f8 	strdeq	r2, [r0], -r8
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d48:	00002a1e 	andeq	r2, r0, lr, lsl sl
     d4c:	00002a20 	andeq	r2, r0, r0, lsr #20
     d50:	00002a34 	andeq	r2, r0, r4, lsr sl
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d54:	00002a36 	andeq	r2, r0, r6, lsr sl
	sti_tim;
     d58:	00002a38 	andeq	r2, r0, r8, lsr sl
}
     d5c:	00002a3a 	andeq	r2, r0, sl, lsr sl
	...
     d68:	00002aa8 	andeq	r2, r0, r8, lsr #21
     d6c:	00002aae 	andeq	r2, r0, lr, lsr #21
	cli_aux;
     d70:	00002ab2 			; <UNDEFINED> instruction: 0x00002ab2
     d74:	00002ab4 			; <UNDEFINED> instruction: 0x00002ab4
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d80:	00002ad6 	ldrdeq	r2, [r0], -r6
     d84:	00002adc 	ldrdeq	r2, [r0], -ip
	sti_aux;
     d88:	00002ade 	ldrdeq	r2, [r0], -lr
}
     d8c:	00002ae0 	andeq	r2, r0, r0, ror #21
	...
void AONRTCIntHandler () {
     d98:	00002ae4 	andeq	r2, r0, r4, ror #21
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d9c:	00002af0 	strdeq	r2, [r0], -r0
     da0:	00002af0 	strdeq	r2, [r0], -r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     da4:	00002af4 	strdeq	r2, [r0], -r4
		if (__pi_utims [0] == 0)
     da8:	00002af6 	strdeq	r2, [r0], -r6
     dac:	00002b1a 	andeq	r2, r0, sl, lsl fp
	...
			(*(__pi_utims [0]))--;
     db8:	00002af4 	strdeq	r2, [r0], -r4
		if (__pi_utims [1] == 0)
     dbc:	00002af6 	strdeq	r2, [r0], -r6
		if (*(__pi_utims [1])) {
     dc0:	00002b1a 	andeq	r2, r0, sl, lsl fp
			aux_timer_inactive = 0;
     dc4:	00002b54 	andeq	r2, r0, r4, asr fp
			(*(__pi_utims [1]))--;
     dc8:	00002b56 	andeq	r2, r0, r6, asr fp
		if (__pi_utims [2] == 0)
     dcc:	00002b68 	andeq	r2, r0, r8, ror #22
	...
		if (__pi_utims [3] != 0) {
     dd8:	00002c28 	andeq	r2, r0, r8, lsr #24
			if (*(__pi_utims [3])) {
     ddc:	00002c28 	andeq	r2, r0, r8, lsr #24
				aux_timer_inactive = 0;
     de0:	00002c2c 	andeq	r2, r0, ip, lsr #24
				(*(__pi_utims [3]))--;
     de4:	00002c46 	andeq	r2, r0, r6, asr #24
	if (__pi_systat.ledsts) {
     de8:	00002c48 	andeq	r2, r0, r8, asr #24
     dec:	00002c4a 	andeq	r2, r0, sl, asr #24
		if (__pi_systat.ledblc++ == 0) {
     df0:	00002c4c 	andeq	r2, r0, ip, asr #24
     df4:	00002c4e 	andeq	r2, r0, lr, asr #24
			if (__pi_systat.ledblk) {
     df8:	00002c52 	andeq	r2, r0, r2, asr ip
     dfc:	00002c5c 	andeq	r2, r0, ip, asr ip
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e08:	00002d6e 	andeq	r2, r0, lr, ror #26
				if (__pi_systat.ledsts & 0x2)
     e0c:	00002d72 	andeq	r2, r0, r2, ror sp
     e10:	00002d8e 	andeq	r2, r0, lr, lsl #27
     e14:	00002d92 	muleq	r0, r2, sp
	...
				__pi_systat.ledblk = 0;
     e20:	00002d72 	andeq	r2, r0, r2, ror sp
			if (__pi_systat.fstblk)
     e24:	00002d8e 	andeq	r2, r0, lr, lsl #27
     e28:	00002d92 	muleq	r0, r2, sp
				__pi_systat.ledblc = 200;
     e2c:	00002d9a 	muleq	r0, sl, sp
	...
		__pi_new += setdel;
     e38:	00002f06 	andeq	r2, r0, r6, lsl #30
     e3c:	00002f08 	andeq	r2, r0, r8, lsl #30
		setdel = 0;
     e40:	00002f0a 	andeq	r2, r0, sl, lsl #30
		RISE_N_SHINE;
     e44:	00002f0e 	andeq	r2, r0, lr, lsl #30
	...
     e50:	00002f08 	andeq	r2, r0, r8, lsl #30
		aux_timer_inactive = 1;
     e54:	00002f0a 	andeq	r2, r0, sl, lsl #30
     e58:	00002f0e 	andeq	r2, r0, lr, lsl #30
				if (__pi_systat.ledsts & 0x1)
     e5c:	00002f34 	andeq	r2, r0, r4, lsr pc
	...
				if (__pi_systat.ledsts & 0x2)
     e68:	00002f7c 	andeq	r2, r0, ip, ror pc
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e6c:	00002f7e 	andeq	r2, r0, lr, ror pc
     e70:	00002f82 	andeq	r2, r0, r2, lsl #31
				if (__pi_systat.ledsts & 0x8)
     e74:	00002f88 	andeq	r2, r0, r8, lsl #31
				__pi_systat.ledblk = 1;
     e78:	00002f8a 	andeq	r2, r0, sl, lsl #31
     e7c:	00002fd6 	ldrdeq	r2, [r0], -r6
		if (aux_timer_inactive) {
     e80:	00002fd8 	ldrdeq	r2, [r0], -r8
			cli_aux;
     e84:	00002fdc 	ldrdeq	r2, [r0], -ip
     e88:	00002fde 	ldrdeq	r2, [r0], -lr
     e8c:	00002fee 	andeq	r2, r0, lr, ror #31
     e90:	00002ff2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     e94:	00002ff6 	strdeq	r2, [r0], -r6
     e98:	00003028 	andeq	r3, r0, r8, lsr #32
     e9c:	0000302c 	andeq	r3, r0, ip, lsr #32
	...
     ea8:	00003032 	andeq	r3, r0, r2, lsr r0
word tci_update_delay_ticks (Boolean force) {
     eac:	00003034 	andeq	r3, r0, r4, lsr r0
	cli_tim;
     eb0:	00003036 	andeq	r3, r0, r6, lsr r0
     eb4:	00003064 	andeq	r3, r0, r4, rrx
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ec0:	000027f8 	strdeq	r2, [r0], -r8
     ec4:	00002818 	andeq	r2, r0, r8, lsl r8
     ec8:	00002818 	andeq	r2, r0, r8, lsl r8
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ecc:	000029a8 	andeq	r2, r0, r8, lsr #19
				AON_RTC_O_CH0CMP)) - gettav ());
     ed0:	000029a8 	andeq	r2, r0, r8, lsr #19
	return NO;
     ed4:	000029f0 	strdeq	r2, [r0], -r0
			setdel = 0;
     ed8:	000029f0 	strdeq	r2, [r0], -r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     edc:	00002a14 	andeq	r2, r0, r4, lsl sl
     ee0:	00002a14 	andeq	r2, r0, r4, lsl sl
}
     ee4:	00002a70 	andeq	r2, r0, r0, ror sl
		sti_tim;
     ee8:	00002a70 	andeq	r2, r0, r0, ror sl
		return YES;
     eec:	00002aa8 	andeq	r2, r0, r8, lsr #21
     ef0:	00002aa8 	andeq	r2, r0, r8, lsr #21
     ef4:	00002c28 	andeq	r2, r0, r8, lsr #24
     ef8:	00002c28 	andeq	r2, r0, r8, lsr #24
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     efc:	00002cf8 	strdeq	r2, [r0], -r8
	UARTDisable (UART0_BASE);
     f00:	00002cf8 	strdeq	r2, [r0], -r8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f04:	00002ee8 	andeq	r2, r0, r8, ror #29
	UARTDisable (UART0_BASE);
     f08:	00002ee8 	andeq	r2, r0, r8, ror #29
	UARTConfigSetExpClk (UART0_BASE,
     f0c:	00002f58 	andeq	r2, r0, r8, asr pc
     f10:	00002f58 	andeq	r2, r0, r8, asr pc
     f14:	000030cc 	andeq	r3, r0, ip, asr #1
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f20:	000030cc 	andeq	r3, r0, ip, asr #1
     f24:	000030f0 	strdeq	r3, [r0], -r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f28:	000030f0 	strdeq	r3, [r0], -r0
     f2c:	00003114 	andeq	r3, r0, r4, lsl r1
     f30:	00003114 	andeq	r3, r0, r4, lsl r1
	urates [0] = rate;
     f34:	0000311c 	andeq	r3, r0, ip, lsl r1
}
     f38:	0000311c 	andeq	r3, r0, ip, lsl r1
     f3c:	00003120 	andeq	r3, r0, r0, lsr #2
     f40:	00003120 	andeq	r3, r0, r0, lsr #2
     f44:	00003124 	andeq	r3, r0, r4, lsr #2
     f48:	00003124 	andeq	r3, r0, r4, lsr #2
     f4c:	0000316c 	andeq	r3, r0, ip, ror #2
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f58:	0000317a 	andeq	r3, r0, sl, ror r1
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f5c:	0000317a 	andeq	r3, r0, sl, ror r1
     f60:	00003180 	andeq	r3, r0, r0, lsl #3
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f64:	000031dc 	ldrdeq	r3, [r0], -ip
	...
	__pi_uart_setrate (urates [0], __pi_uart);
     f70:	0000316c 	andeq	r3, r0, ip, ror #2
     f74:	000031dc 	ldrdeq	r3, [r0], -ip
	...
     f80:	000031f0 	strdeq	r3, [r0], -r0
     f84:	000032d4 	ldrdeq	r3, [r0], -r4
	switch (operation) {
     f88:	000032da 	ldrdeq	r3, [r0], -sl
static int ioreq_uart_a (int operation, char *buf, int len) {
     f8c:	000032de 	ldrdeq	r3, [r0], -lr
     f90:	000032e4 	andeq	r3, r0, r4, ror #5
     f94:	000032f8 	strdeq	r3, [r0], -r8
	...
				*buf++ = uart_a_read;
     fa0:	000031dc 	ldrdeq	r3, [r0], -ip
     fa4:	000032f8 	strdeq	r3, [r0], -r8
	...
			while (len && uart_a_char_available) {
     fb0:	00003324 	andeq	r3, r0, r4, lsr #6
			if (len != operation) {
     fb4:	00003326 	andeq	r3, r0, r6, lsr #6
}
     fb8:	000033f4 	strdeq	r3, [r0], -r4
     fbc:	00003418 	andeq	r3, r0, r8, lsl r4
			uart_a_disable_int;
     fc0:	0000341a 	andeq	r3, r0, sl, lsl r4
			if (uart_a_char_available) {
     fc4:	00003462 	andeq	r3, r0, r2, ror #8
				*buf++ = uart_a_read;
     fc8:	0000348c 	andeq	r3, r0, ip, lsl #9
			uart_a_disable_int;
     fcc:	0000348e 	andeq	r3, r0, lr, lsl #9
	...
			if (uart_a_char_available) {
     fd8:	00003326 	andeq	r3, r0, r6, lsr #6
				uart_a_enable_int;
     fdc:	00003328 	andeq	r3, r0, r8, lsr #6
     fe0:	000033ca 	andeq	r3, r0, sl, asr #7
				goto Redo_rx;
     fe4:	000033f4 	strdeq	r3, [r0], -r4
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fe8:	00003418 	andeq	r3, r0, r8, lsl r4
     fec:	0000341a 	andeq	r3, r0, sl, lsl r4
	...
				uart_a_write (*buf);
     ff8:	00003366 	andeq	r3, r0, r6, ror #6
     ffc:	0000336e 	andeq	r3, r0, lr, ror #6
			while (len && uart_a_room_in_tx) {
    1000:	00003512 	andeq	r3, r0, r2, lsl r5
    1004:	0000351e 	andeq	r3, r0, lr, lsl r5
	...
			uart_a_disable_int;
    1010:	0000346c 	andeq	r3, r0, ip, ror #8
    1014:	0000348c 	andeq	r3, r0, ip, lsl #9
			if (uart_a_room_in_tx) {
    1018:	0000348e 	andeq	r3, r0, lr, lsl #9
    101c:	000034d2 	ldrdeq	r3, [r0], -r2
	...
				*buf++ = uart_a_read;
    1028:	000032f8 	strdeq	r3, [r0], -r8
			if (uart_a_room_in_tx) {
    102c:	00003318 	andeq	r3, r0, r8, lsl r3
				uart_a_write (*buf);
    1030:	00003318 	andeq	r3, r0, r8, lsl r3
    1034:	00003548 	andeq	r3, r0, r8, asr #10
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1038:	00003548 	andeq	r3, r0, r8, asr #10
    103c:	00003598 	muleq	r0, r8, r5
	...
			uart_a_enable_int;
    1048:	000035ac 	andeq	r3, r0, ip, lsr #11
			return 0;
    104c:	000035b0 			; <UNDEFINED> instruction: 0x000035b0
			if (len == UART_CNTRL_SETRATE) {
    1050:	0000388a 	andeq	r3, r0, sl, lsl #17
				if (__pi_uart_setrate (*((word*)buf),
    1054:	000038d2 	ldrdeq	r3, [r0], -r2
	...
				syserror (EREQPAR, "uar");
    1060:	000035b0 			; <UNDEFINED> instruction: 0x000035b0
			syserror (ENOOPER, "uai");
    1064:	000035b6 			; <UNDEFINED> instruction: 0x000035b6
			if (len == UART_CNTRL_GETRATE) {
    1068:	000035ee 	andeq	r3, r0, lr, ror #11
				return 1;
    106c:	0000365a 	andeq	r3, r0, sl, asr r6
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1070:	000038ee 	andeq	r3, r0, lr, ror #17
			syserror (ENOOPER, "uai");
    1074:	0000390e 	andeq	r3, r0, lr, lsl #18
	...
    1080:	00003712 	andeq	r3, r0, r2, lsl r7
    1084:	0000378c 	andeq	r3, r0, ip, lsl #15
    1088:	00003916 	andeq	r3, r0, r6, lsl r9
    108c:	0000391e 	andeq	r3, r0, lr, lsl r9
	...
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1098:	000037a4 	andeq	r3, r0, r4, lsr #15
void UART0IntHandler () {
    109c:	000037fa 	strdeq	r3, [r0], -sl
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10a0:	00003870 	andeq	r3, r0, r0, ror r8
    10a4:	0000388a 	andeq	r3, r0, sl, lsl #17
	...
    10b0:	00003800 	andeq	r3, r0, r0, lsl #16
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10b4:	00003870 	andeq	r3, r0, r0, ror r8
    10b8:	000038d2 	ldrdeq	r3, [r0], -r2
		RISE_N_SHINE;
    10bc:	000038da 	ldrdeq	r3, [r0], -sl
    10c0:	0000391e 	andeq	r3, r0, lr, lsl r9
		i_trigger (devevent (UART_A, READ));
    10c4:	00003928 	andeq	r3, r0, r8, lsr #18
	...
    10d0:	00003598 	muleq	r0, r8, r5
    10d4:	00003928 	andeq	r3, r0, r8, lsr #18
	...
    10e0:	00003928 	andeq	r3, r0, r8, lsr #18
    10e4:	00003950 	andeq	r3, r0, r0, asr r9
    10e8:	00000001 	andeq	r0, r0, r1
    10ec:	00000001 	andeq	r0, r0, r1
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10f8:	00003950 	andeq	r3, r0, r0, asr r9
    10fc:	00003980 	andeq	r3, r0, r0, lsl #19
	...
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1108:	00003980 	andeq	r3, r0, r0, lsl #19
		RISE_N_SHINE;
    110c:	000039a0 	andeq	r3, r0, r0, lsr #19
    1110:	000039a0 	andeq	r3, r0, r0, lsr #19
    1114:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
	...
		i_trigger (devevent (UART_A, WRITE));
    1120:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
    1124:	000039c0 	andeq	r3, r0, r0, asr #19
    1128:	00000001 	andeq	r0, r0, r1
    112c:	00000001 	andeq	r0, r0, r1
    1130:	000039c0 	andeq	r3, r0, r0, asr #19
    1134:	000039c8 	andeq	r3, r0, r8, asr #19
    1138:	00000001 	andeq	r0, r0, r1
    113c:	00000001 	andeq	r0, r0, r1
    1140:	00000001 	andeq	r0, r0, r1
}
    1144:	00000001 	andeq	r0, r0, r1
	...
    1150:	00003a2a 	andeq	r3, r0, sl, lsr #20
    1154:	00003a3a 	andeq	r3, r0, sl, lsr sl
void __buttons_setirq (int val) {
    1158:	00003a40 	andeq	r3, r0, r0, asr #20
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    115c:	00003a42 	andeq	r3, r0, r2, asr #20
	...
    1168:	000039c8 	andeq	r3, r0, r8, asr #19
    116c:	00003a24 	andeq	r3, r0, r4, lsr #20
		bn = BUTTON_GPIO (__button_list [i]);
    1170:	00003a24 	andeq	r3, r0, r4, lsr #20
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	00003a50 	andeq	r3, r0, r0, asr sl
    1178:	00000001 	andeq	r0, r0, r1
    117c:	00000001 	andeq	r0, r0, r1
    1180:	00003a50 	andeq	r3, r0, r0, asr sl
    1184:	00003a68 	andeq	r3, r0, r8, ror #20
    1188:	00003a68 	andeq	r3, r0, r8, ror #20
}
    118c:	00003ac8 	andeq	r3, r0, r8, asr #21
    1190:	00003ac8 	andeq	r3, r0, r8, asr #21
    1194:	00003afc 	strdeq	r3, [r0], -ip
    1198:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
    119c:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
    11a0:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11a4:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a8:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
    11ac:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11b0:	00000001 	andeq	r0, r0, r1
    11b4:	00000001 	andeq	r0, r0, r1
	...
    11c0:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
    11c4:	00000001 	andeq	r0, r0, r1
}
    11c8:	00003afc 	strdeq	r3, [r0], -ip
    11cc:	00003b24 	andeq	r3, r0, r4, lsr #22
    11d0:	00003b24 	andeq	r3, r0, r4, lsr #22
    11d4:	00003b70 	andeq	r3, r0, r0, ror fp
void GPIOIntHandler () {
    11d8:	00003b70 	andeq	r3, r0, r0, ror fp
if (buttons_int) {
    11dc:	00003cc0 	andeq	r3, r0, r0, asr #25
    11e0:	00003cc0 	andeq	r3, r0, r0, asr #25
	buttons_disable ();
    11e4:	00003dd8 	ldrdeq	r3, [r0], -r8
    11e8:	00003dd8 	ldrdeq	r3, [r0], -r8
	i_trigger ((aword)&__button_list);
    11ec:	00003df8 	strdeq	r3, [r0], -r8
    11f0:	00000001 	andeq	r0, r0, r1
    11f4:	00000001 	andeq	r0, r0, r1
    11f8:	00003df8 	strdeq	r3, [r0], -r8
    11fc:	00003e14 	andeq	r3, r0, r4, lsl lr
	...
    1208:	00003e14 	andeq	r3, r0, r4, lsl lr
    120c:	00003ee8 	andeq	r3, r0, r8, ror #29
    1210:	00003ee8 	andeq	r3, r0, r8, ror #29
    1214:	00003f8c 	andeq	r3, r0, ip, lsl #31
	...
	RISE_N_SHINE;
    1220:	00003f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
if (pin_sensor_int) {
    1224:	00003f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    1228:	00003fa0 	andeq	r3, r0, r0, lsr #31
	i_trigger ((aword)(&__input_pins));
    122c:	00003fa4 	andeq	r3, r0, r4, lsr #31
	...
    1238:	000042a8 	andeq	r4, r0, r8, lsr #5
    123c:	000042aa 	andeq	r4, r0, sl, lsr #5
    1240:	000042ac 	andeq	r4, r0, ip, lsr #5
    1244:	000042ae 	andeq	r4, r0, lr, lsr #5
	...
    1250:	00003f8c 	andeq	r3, r0, ip, lsl #31
    1254:	00004008 	andeq	r4, r0, r8
	__pinsen_disable_and_clear;
    1258:	00004008 	andeq	r4, r0, r8
	RISE_N_SHINE;
    125c:	000040b4 	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
    1260:	000040b4 	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
    1264:	00004110 	andeq	r4, r0, r0, lsl r1
}
    1268:	00004110 	andeq	r4, r0, r0, lsl r1
    126c:	00004128 	andeq	r4, r0, r8, lsr #2
    1270:	00000001 	andeq	r0, r0, r1
    1274:	00000001 	andeq	r0, r0, r1
    1278:	00004128 	andeq	r4, r0, r8, lsr #2
void system_init () {
    127c:	00004138 	andeq	r4, r0, r8, lsr r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1280:	00004138 	andeq	r4, r0, r8, lsr r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1284:	0000414c 	andeq	r4, r0, ip, asr #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1288:	0000414c 	andeq	r4, r0, ip, asr #2
    128c:	000041b0 			; <UNDEFINED> instruction: 0x000041b0
    1290:	000041b0 			; <UNDEFINED> instruction: 0x000041b0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1294:	000041c4 	andeq	r4, r0, r4, asr #3
    1298:	000041c4 	andeq	r4, r0, r4, asr #3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    129c:	000041d8 	ldrdeq	r4, [r0], -r8
    12a0:	000041d8 	ldrdeq	r4, [r0], -r8
    12a4:	000041ec 	andeq	r4, r0, ip, ror #3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12a8:	000041ec 	andeq	r4, r0, ip, ror #3
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12ac:	00004214 	andeq	r4, r0, r4, lsl r2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12b0:	00004214 	andeq	r4, r0, r4, lsl r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12b4:	00004224 	andeq	r4, r0, r4, lsr #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12b8:	00004224 	andeq	r4, r0, r4, lsr #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12bc:	00004250 	andeq	r4, r0, r0, asr r2
		pin = (port_confs [i] >> 19) & 0x1f;
    12c0:	00004250 	andeq	r4, r0, r0, asr r2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	00004264 	andeq	r4, r0, r4, ror #4
		pin = (port_confs [i] >> 19) & 0x1f;
    12c8:	00004264 	andeq	r4, r0, r4, ror #4
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12cc:	00004278 	andeq	r4, r0, r8, ror r2
    12d0:	00004278 	andeq	r4, r0, r8, ror r2
    12d4:	00004388 	andeq	r4, r0, r8, lsl #7
    12d8:	00004388 	andeq	r4, r0, r8, lsl #7
		if (port_confs [i] & 0x80)
    12dc:	000043ec 	andeq	r4, r0, ip, ror #7
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12e0:	000043ec 	andeq	r4, r0, ip, ror #7
    12e4:	00004414 	andeq	r4, r0, r4, lsl r4
		if (port_confs [i] & 0x40)
    12e8:	00004414 	andeq	r4, r0, r4, lsl r4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ec:	00004564 	andeq	r4, r0, r4, ror #10
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12f8:	00000001 	andeq	r0, r0, r1
    12fc:	00000001 	andeq	r0, r0, r1
	all_leds_blink;
    1300:	00000001 	andeq	r0, r0, r1
    1304:	00000001 	andeq	r0, r0, r1
	...
    1310:	000045da 	ldrdeq	r4, [r0], -sl
    1314:	000045dc 	ldrdeq	r4, [r0], -ip
    1318:	000045de 	ldrdeq	r4, [r0], -lr
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    131c:	000045e2 	andeq	r4, r0, r2, ror #11
	...
    1328:	00000001 	andeq	r0, r0, r1
    132c:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1330:	00004564 	andeq	r4, r0, r4, ror #10
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1334:	00004784 	andeq	r4, r0, r4, lsl #15
    1338:	00004784 	andeq	r4, r0, r4, lsl #15
	IntEnable (INT_AON_RTC_COMB);
    133c:	000047e4 	andeq	r4, r0, r4, ror #15
    1340:	00000001 	andeq	r0, r0, r1
    1344:	00000001 	andeq	r0, r0, r1
	__pi_malloc_init ();
    1348:	000047e4 	andeq	r4, r0, r4, ror #15
	IntEnable (INT_AON_GPIO_EDGE);
    134c:	000047fc 	strdeq	r4, [r0], -ip
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1358:	0000484a 	andeq	r4, r0, sl, asr #16
    135c:	0000484e 	andeq	r4, r0, lr, asr #16
    1360:	00004854 	andeq	r4, r0, r4, asr r8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1364:	00004856 	andeq	r4, r0, r6, asr r8
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    1370:	0000484e 	andeq	r4, r0, lr, asr #16
    1374:	00004854 	andeq	r4, r0, r4, asr r8
	urates [0] = UART_RATE / 100;
    1378:	00004856 	andeq	r4, r0, r6, asr r8
    137c:	0000485e 	andeq	r4, r0, lr, asr r8
	...
	EXTRA_INITIALIZERS;
    1388:	00000001 	andeq	r0, r0, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    138c:	00000001 	andeq	r0, r0, r1
    1390:	00000001 	andeq	r0, r0, r1
    1394:	00000001 	andeq	r0, r0, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1398:	000047fc 	strdeq	r4, [r0], -ip
    139c:	00004848 	andeq	r4, r0, r8, asr #16
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	00000001 	andeq	r0, r0, r1
    13a4:	00000001 	andeq	r0, r0, r1
			devinit [i] . init (devinit [i] . param);
    13a8:	00004848 	andeq	r4, r0, r8, asr #16
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13ac:	000048b4 			; <UNDEFINED> instruction: 0x000048b4
    13b0:	000048b4 			; <UNDEFINED> instruction: 0x000048b4
    13b4:	000048ca 	andeq	r4, r0, sl, asr #17
	...
}
    13c0:	000048cc 	andeq	r4, r0, ip, asr #17
	tci_run_auxiliary_timer ();
    13c4:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
		diag ("");
    13c8:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    13cc:	000048fc 	strdeq	r4, [r0], -ip
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    13d0:	00000001 	andeq	r0, r0, r1
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13d4:	00000001 	andeq	r0, r0, r1
		diag ("Leftover RAM: %d bytes",
    13d8:	00000001 	andeq	r0, r0, r1
    13dc:	00000001 	andeq	r0, r0, r1
    13e0:	00000001 	andeq	r0, r0, r1
    13e4:	00000001 	andeq	r0, r0, r1
    13e8:	00000001 	andeq	r0, r0, r1
    13ec:	00000001 	andeq	r0, r0, r1
	...
    1400:	00000004 	andeq	r0, r0, r4
    1404:	00000006 	andeq	r0, r0, r6
    1408:	0000000a 	andeq	r0, r0, sl
    140c:	00000026 	andeq	r0, r0, r6, lsr #32
    1410:	00000028 	andeq	r0, r0, r8, lsr #32
    1414:	00000038 	andeq	r0, r0, r8, lsr r0
    1418:	0000003e 	andeq	r0, r0, lr, lsr r0
    141c:	00000040 	andeq	r0, r0, r0, asr #32
    1420:	00000042 	andeq	r0, r0, r2, asr #32
    1424:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000d71 	andeq	r0, r0, r1, ror sp
       4:	02760003 	rsbseq	r0, r6, #3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
    return node->data_base.item_array[index];
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
};
      1c:	2f727375 	svccs	0x00727375
      20:	2f62696c 	svccs	0x0062696c
      24:	2f636367 	svccs	0x00636367
      28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
      30:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      34:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      38:	2f312e32 	svccs	0x00312e32
      3c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
			i = k;
      40:	00656475 	rsbeq	r6, r5, r5, ror r4
				j->Next = k;
      44:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      48:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      4c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      54:	2f62696c 	svccs	0x0062696c
		release;
      58:	00737973 	rsbseq	r7, r3, r3, ror r9
      5c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffa8 <_estack+0xdfffafa8>
			nq++;
      60:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
      68:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      6c:	6f746b73 	svcvs	0x00746b73
      70:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      74:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      78:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      7c:	2f534f43 	svccs	0x00534f43
      80:	4f636950 	svcmi	0x00636950
      84:	43432f53 	movtmi	r2, #16211	; 0x3f53
      88:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      8c:	6f682f00 	svcvs	0x00682f00
	if (!button_still_pressed (__button_list [pbutton]))
      90:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      94:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
      98:	442f6e65 	strtmi	r6, [pc], #-3685	; a0 <g_pfnVectors+0xa0>
	if (baction == NULL)
      9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
      a0:	4f2f706f 	svcmi	0x002f706f
	(*baction) (pbutton);
      a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
endthread
      a8:	502f5445 	eorpl	r5, pc, r5, asr #8
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	534f4349 	movtpl	r4, #62281	; 0xf349
      b0:	6369502f 	cmnvs	r9, #47	; 0x2f
endthread
      b4:	2f00534f 	svccs	0x0000534f
      b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      bc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
      c0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
      c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
fsm sender(struct ResponseMessage *message) {
      c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
      d4:	4349502f 	movtmi	r5, #36911	; 0x902f
      d8:	502f534f 	eorpl	r5, pc, pc, asr #6
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	534f6369 	movtpl	r6, #62313	; 0xf369
      e0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
      e4:	562f7362 	strtpl	r7, [pc], -r2, ror #6
      e8:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
      ec:	6f682f00 	svcvs	0x00682f00
		packet[1] = message->gid;
      f0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
      f4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	442f6e65 	strtmi	r6, [pc], #-3685	; 100 <_Min_Stack_Size>
      fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	4f2f706f 	svcmi	0x002f706f
     104:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		*p = message->tpe;p++;
     108:	502f5445 	eorpl	r5, pc, r5, asr #8
		*p = message->request_number;p++;
     10c:	534f4349 	movtpl	r4, #62281	; 0xf349
		*p = message->sender_id;p++;
     110:	6369502f 	cmnvs	r9, #47	; 0x2f
		*p = message->receiver_id;p++;
     114:	6b2f534f 	blvs	bd4e58 <__ccfg+0xbb4eb0>
		switch(message->tpe) {
     118:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     11c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     120:	2f656d6f 	svccs	0x00656d6f
		tcv_endp(packet);
     124:	70657473 	rsbvc	r7, r5, r3, ror r4
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2f6e6568 	svccs	0x006e6568
     12c:	6b736544 	blvs	1cd9644 <__ccfg+0x1cb969c>
}
     130:	2f706f74 	svccs	0x00706f74
		finish;
     134:	4f534c4f 	svcmi	0x00534c4f
     138:	2f54454e 	svccs	0x0054454e
     13c:	4f434950 	svcmi	0x00434950
				strncpy(p, message->record, sizeof(message->record));
     140:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				*p = message->padding;p++;
     144:	2f534f63 	svccs	0x00534f63
				strncpy(p, message->record, sizeof(message->record));
     148:	62694c56 	rsbvs	r4, r9, #22016	; 0x5600
     14c:	6c502f73 	mrrcvs	15, 7, r2, r0, cr3
     150:	754e6775 	strbvc	r6, [lr, #-1909]	; 0xfffff88b
				strncpy(p, message->record, sizeof(message->record));
     154:	2e006c6c 	cdpcs	12, 0, cr6, cr0, cr12, {3}
     158:	6f682f00 	svcvs	0x00682f00
				strncpy(p, message->record, sizeof(message->record));
     15c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
				break;
     160:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
				*p = message->record_index;p++;
     164:	442f6e65 	strtmi	r6, [pc], #-3685	; 16c <_Min_Stack_Size+0x6c>
				*p = message->padding;
     168:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				break;
     16c:	4f2f706f 	svcmi	0x002f706f
     170:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     174:	502f5445 	eorpl	r5, pc, r5, asr #8
     178:	534f4349 	movtpl	r4, #62281	; 0xf349
     17c:	6369502f 	cmnvs	r9, #47	; 0x2f
     180:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		node->nnodes[i] = 0;
     184:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     188:	43432f58 	movtmi	r2, #16216	; 0x3f58
     18c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     190:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
bool init_node(struct Node* node){
     198:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    node->id  = 0;                  // default id value 0
     19c:	00006269 	andeq	r6, r0, r9, ror #4
    node->index = 0;                // default entry count 0
     1a0:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
    node->data_base.item_count = 0; // default no items in array
     1a4:	00006363 	andeq	r6, r0, r3, ror #6
	reset_array(node);
     1a8:	74730000 	ldrbtvc	r0, [r3], #-0
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     1b0:	0100682e 	tsteq	r0, lr, lsr #16
};
     1b4:	745f0000 	ldrbvc	r0, [pc], #-0	; 1bc <generate_request_num>
     1b8:	73657079 	cmnvc	r5, #121	; 0x79
uint8_t generate_request_num(void){
     1bc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    return (uint8_t) (rand() % 255);
     1c0:	65720000 	ldrbvs	r0, [r2, #-0]!
     1c4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
     1c8:	00020068 	andeq	r0, r2, r8, rrx
}
     1cc:	636f6c00 	cmnvs	pc, #0, 24
            node->nnodes[i] = 0; // set to null byte
     1d0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     1d4:	73000002 	movwvc	r0, #2
     1d8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
};
     1e0:	73000001 	movwvc	r0, #1
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
     1e8:	00682e67 	rsbeq	r2, r8, r7, ror #28
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	61000001 	tstvs	r0, r1
     1f0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
     1f4:	00030068 	andeq	r0, r3, r8, rrx
        node->data_base.item_count -= 1;
     1f8:	63616d00 	cmnvs	r1, #0, 26
};
     1fc:	00682e68 	rsbeq	r2, r8, r8, ror #28
bool delete_all(struct Node *node){
     200:	70000003 	andvc	r0, r0, r3
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	5f736e69 	svcpl	0x00736e69
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00030068 	andeq	r0, r3, r8, rrx
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
            node->data_base.item_array[i].timestamp = 0;
     214:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    node->data_base.item_count = 0;
     21c:	0300682e 	movweq	r6, #2094	; 0x82e
}
     220:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
        return true;
     224:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00040068 	andeq	r0, r4, r8, rrx
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     234:	00682e73 	rsbeq	r2, r8, r3, ror lr
     238:	6b000005 	blvs	254 <assemble_response_message+0x2e>
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
	response_message->tpe = RESPONSE;
     240:	00682e6c 	rsbeq	r2, r8, ip, ror #28
	response_message->status = status;
     244:	70000006 	andvc	r0, r0, r6
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	5f67756c 	svcpl	0x0067756c
	response_message->gid = gid;
     24c:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
	response_message->sender_id = sender_id;
     250:	0700682e 	streq	r6, [r0, -lr, lsr #16]
	response_message->status = status;
     254:	65680000 	strbvs	r0, [r8, #-0]!
	if (!padding){
     258:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
		response_message->padding = padding;
     25c:	7070682e 	rsbsvc	r6, r0, lr, lsr #16
	if (rec != NULL){
     260:	00000800 	andeq	r0, r0, r0, lsl #16
     264:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
		strncpy(response_message->record, rec, 20);
     268:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     26c:	00003e6e 	andeq	r3, r0, lr, ror #28
     270:	6f610000 	svcvs	0x00610000
};
     274:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
fsm receiver(struct Node* node_db) {
     278:	00682e63 	rsbeq	r2, r8, r3, ror #28
     27c:	00000009 	andeq	r0, r0, r9
     280:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
     284:	0000c802 	andeq	ip, r0, r2, lsl #16
     288:	01bb0300 			; <UNDEFINED> instruction: 0x01bb0300
     28c:	011e0501 	tsteq	lr, r1, lsl #10
     290:	05016e05 	streq	r6, [r1, #-3589]	; 0xfffff1fb
     294:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	1305206e 	movwne	r2, #20590	; 0x506e
     29c:	4a3a0306 	bmi	e80ebc <__ccfg+0xe60f14>
     2a0:	01060105 	tsteq	r6, r5, lsl #2
     2a4:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	2e460365 	cdpcs	3, 4, cr0, cr6, cr5, {3}
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
     2b0:	207a0365 	rsbscs	r0, sl, r5, ror #6
     2b4:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
		switch (response_message_5->tpe){
     2b8:	207a0337 	rsbscs	r0, sl, r7, lsr r3
     2bc:	21060205 	tstcs	r6, r5, lsl #4
     2c0:	15030514 	strne	r0, [r3, #-1300]	; 0xfffffaec
     2c4:	01060c05 	tsteq	r6, r5, lsl #24
     2c8:	05590d05 	ldrbeq	r0, [r9, #-3333]	; 0xfffff2fb
     2cc:	0a052116 	beq	14872c <__ccfg+0x128784>
     2d0:	220d051e 	andcs	r0, sp, #125829120	; 0x7800000
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	051e0a05 	ldreq	r0, [lr, #-2565]	; 0xfffff5fb
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	13210603 			; <UNDEFINED> instruction: 0x13210603
				if (discovery_request_message->gid == node_db->gid){
     2dc:	4d3d1413 	cfldrsmi	mvf1, [sp, #-76]!	; 0xffffffb4
     2e0:	01060f05 	tsteq	r6, r5, lsl #30
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     2e8:	05200615 	streq	r0, [r0, #-1557]!	; 0xfffff9eb
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	0f051303 	svceq	0x00051303
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	06050106 	streq	r0, [r5], -r6, lsl #2
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	06200520 	strteq	r0, [r0], -r0, lsr #10
					response_message_0->sender_id = node_db->id;
     2f8:	13030520 	movwne	r0, #13600	; 0x3520
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	01060f05 	tsteq	r6, r5, lsl #30
					DEBUG_PRINT("\r\nSending to sender");
     300:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
					call sender(response_message_0, done_case);
     304:	0520061b 	streq	r0, [r0, #-1563]!	; 0xfffff9e5
     308:	0f051303 	svceq	0x00051303
     30c:	06050106 	streq	r0, [r5], -r6, lsl #2
     310:	061d0520 	ldreq	r0, [sp], -r0, lsr #10
     314:	14030520 	strne	r0, [r3], #-1312	; 0xfffffae0
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	01061105 	tsteq	r6, r5, lsl #2
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	03060305 	movweq	r0, #25349	; 0x6305
     320:	4c40661f 	mcrrmi	6, 1, r6, r0, cr15
     324:	13060105 	movwne	r0, #24837	; 0x6105
     328:	052d0305 	streq	r0, [sp, #-773]!	; 0xfffffcfb
     32c:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
     330:	06110558 			; <UNDEFINED> instruction: 0x06110558
     334:	23050501 	movwcs	r0, #21761	; 0x5501
     338:	051d0805 	ldreq	r0, [sp, #-2053]	; 0xfffff7fb
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
					node_db->index+=1;
     340:	11051305 	tstne	r5, r5, lsl #6
     344:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		tcv_endp(incoming_packet);
     348:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
     34c:	20061b05 	andcs	r1, r6, r5, lsl #22
		proceed receiving;
     350:	03140505 	tsteq	r4, #20971520	; 0x1400000
		ser_out(response_1_create, "\r\nData Saved");
     354:	03063c6f 	movweq	r3, #27759	; 0x6c6f
     358:	2f065811 	svccs	0x00065811
		proceed receiving;
     35c:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
     360:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	20052008 	andcs	r2, r5, r8
     368:	05052006 	streq	r2, [r5, #-6]
		proceed receiving;
     36c:	06110513 			; <UNDEFINED> instruction: 0x06110513
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	20080501 	andcs	r0, r8, r1, lsl #10
     374:	21060505 	tstcs	r6, r5, lsl #10
     378:	01000d02 	tsteq	r0, r2, lsl #26
     37c:	002f0501 	eoreq	r0, pc, r1, lsl #10
     380:	00000205 	andeq	r0, r0, r5, lsl #4
		proceed receiving;
     384:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	13050501 	movwne	r0, #21761	; 0x5501
     38c:	01060e05 	tsteq	r6, r5, lsl #28
     390:	21060505 	tstcs	r6, r5, lsl #10
     394:	13060105 	movwne	r0, #24837	; 0x6105
		proceed receiving;
     398:	01000202 	tsteq	r0, r2, lsl #4
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	00320501 	eorseq	r0, r2, r1, lsl #10
     3a0:	00000205 	andeq	r0, r0, r5, lsl #4
     3a4:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     3a8:	13050501 	movwne	r0, #21761	; 0x5501
		proceed receiving;
     3ac:	01060f05 	tsteq	r6, r5, lsl #30
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	21060505 	tstcs	r6, r5, lsl #10
     3b4:	13060105 	movwne	r0, #24837	; 0x6105
     3b8:	01000202 	tsteq	r0, r2, lsl #4
     3bc:	003e0501 	eorseq	r0, lr, r1, lsl #10
		proceed receiving;
     3c0:	00000205 	andeq	r0, r0, r5, lsl #4
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	34030000 	strcc	r0, [r3], #-0
     3c8:	13050501 	movwne	r0, #21761	; 0x5501
		proceed receiving;
     3cc:	01061105 	tsteq	r6, r5, lsl #2
}
     3d0:	2f060505 	svccs	0x00060505
     3d4:	13060105 	movwne	r0, #24837	; 0x6105
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	01000202 	tsteq	r0, r2, lsl #4
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	00250501 	eoreq	r0, r5, r1, lsl #10
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	01840205 	orreq	r0, r4, r5, lsl #4
     3e4:	3b030000 	blcc	c03ec <__ccfg+0xa0444>
     3e8:	13020501 	movwne	r0, #9473	; 0x2501
     3ec:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	13050110 	movwne	r0, #20752	; 0x5110
					break;
     3f4:	03051306 	movweq	r1, #21254	; 0x5306
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	13055806 	movwne	r5, #22534	; 0x5806
     3fc:	16050106 	strne	r0, [r5], -r6, lsl #2
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	10052d06 	andne	r2, r5, r6, lsl #26
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	06020501 	streq	r0, [r2], -r1, lsl #10
     408:	31010501 	tstcc	r1, r1, lsl #10
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	01000102 	tsteq	r0, r2, lsl #2
     410:	00210501 	eoreq	r0, r1, r1, lsl #10
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	01980205 	orrseq	r0, r8, r5, lsl #4
     418:	16030000 	strne	r0, [r3], -r0
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	13050501 	movwne	r0, #21761	; 0x5501
     420:	11062105 	tstne	r6, r5, lsl #2
     424:	05210e05 	streq	r0, [r1, #-3589]!	; 0xfffff1fb
     428:	052f0605 	streq	r0, [pc, #-1541]!	; fffffe2b <_estack+0xdfffae2b>
     42c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     430:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
					call sender(response_message_2, done_case);
     438:	132f0605 			; <UNDEFINED> instruction: 0x132f0605
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	01062005 	tsteq	r6, r5
     440:	30060205 	andcc	r0, r6, r5, lsl #4
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	15330505 	ldrne	r0, [r3, #-1285]!	; 0xfffffafb
     448:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	00050213 	andeq	r0, r5, r3, lsl r2
				DEBUG_PRINT("\r\nDelete rec");/*
     450:	23050101 	movwcs	r0, #20737	; 0x5101
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
     458:	03000001 	movweq	r0, #1
     45c:	050100c2 	streq	r0, [r1, #-194]	; 0xffffff3e
     460:	23051305 	movwcs	r1, #21253	; 0x5305
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	17051106 	strne	r1, [r5, -r6, lsl #2]
     468:	2e1e0521 	cfmul64cs	mvdx0, mvdx14, mvdx1
     46c:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
     470:	01010002 	tsteq	r1, r2
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	00000002 	andeq	r0, r0, r2
     47c:	00c70300 	sbceq	r0, r7, r0, lsl #6
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	06080515 			; <UNDEFINED> instruction: 0x06080515
     488:	03010501 	movweq	r0, #5377	; 0x1501
     48c:	04022e17 	streq	r2, [r2], #-3607	; 0xfffff1e9
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
						status = (uint8_t) SUCCESS;
     494:	02050032 	andeq	r0, r5, #50	; 0x32
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	000001ce 	andeq	r0, r0, lr, asr #3
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	0100e703 	tsteq	r0, r3, lsl #14
     4a0:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
     4a4:	0e051509 	cfsh32eq	mvfx1, mvfx5, #9
     4a8:	01190501 	tsteq	r9, r1, lsl #10
     4ac:	13061d05 	movwne	r1, #27909	; 0x6d05
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	58060d05 	stmdapl	r6, {r0, r2, r8, sl, fp}
     4b4:	01061d05 	tsteq	r6, r5, lsl #26
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	2d062105 	stfcss	f2, [r6, #-20]	; 0xffffffec
     4bc:	05011905 	streq	r1, [r1, #-2309]	; 0xfffff6fb
     4c0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     4c4:	0530060a 	ldreq	r0, [r0, #-1546]!	; 0xfffff9f6
     4c8:	01051309 	tsteq	r5, r9, lsl #6
     4cc:	02021706 	andeq	r1, r2, #1572864	; 0x180000
     4d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     4d4:	02050034 	andeq	r0, r5, #52	; 0x34
     4d8:	000001e4 	andeq	r0, r0, r4, ror #3
     4dc:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
     4e0:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     4e4:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
     4e8:	09052e08 	stmdbeq	r5, {r3, r9, sl, fp, sp}
     4ec:	39052406 	stmdbcc	r5, {r1, r2, sl, sp}
     4f0:	24050106 	strcs	r0, [r5], #-262	; 0xfffffefa
     4f4:	1e39054c 	cdpne	5, 3, cr0, cr9, cr12, {2}
     4f8:	21060905 	tstcs	r6, r5, lsl #18
     4fc:	01063505 	tsteq	r6, r5, lsl #10
     500:	21060905 	tstcs	r6, r5, lsl #18
     504:	01062405 	tsteq	r6, r5, lsl #8
     508:	2f060605 	svccs	0x00060605
     50c:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     510:	01051306 	tsteq	r5, r6, lsl #6
     514:	02021506 	andeq	r1, r2, #25165824	; 0x1800000
     518:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     51c:	02050040 	andeq	r0, r5, #64	; 0x40
     520:	00000000 	andeq	r0, r0, r0
     524:	01018b03 	tsteq	r1, r3, lsl #22
     528:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
     52c:	050f0640 	streq	r0, [pc, #-1600]	; fffffef4 <_estack+0xdfffaef4>
     530:	40052326 	andmi	r2, r5, r6, lsr #6
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	2326052b 			; <UNDEFINED> instruction: 0x2326052b
     538:	02920105 	addseq	r0, r2, #1073741825	; 0x40000001
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	01010002 	tsteq	r1, r2
				DEBUG_PRINT("\r\nretrieve rec");
     540:	05002205 	streq	r2, [r0, #-517]	; 0xfffffdfb
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00020002 	andeq	r0, r2, r2
     548:	01930300 	orrseq	r0, r3, r0, lsl #6
     54c:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
     550:	0f062205 	svceq	0x00062205
     554:	05231805 	streq	r1, [r3, #-2053]!	; 0xfffff7fb
     558:	11052e08 	tstne	r5, r8, lsl #28
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	2f390523 	svccs	0x00390523
     560:	20060d05 	andcs	r0, r6, r5, lsl #26
     564:	11063a05 	tstne	r6, r5, lsl #20
    return node->data_base.item_array[index];
     568:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
     56c:	0d052139 	stfeqs	f2, [r5, #-228]	; 0xffffff1c
     570:	35052106 	strcc	r2, [r5, #-262]	; 0xfffffefa
     574:	39050106 	stmdbcc	r5, {r1, r2, r8}
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	18052c06 	stmdane	r5, {r1, r2, sl, fp, sp}
    return node->data_base.item_array[index];
     57c:	06090501 	streq	r0, [r9], -r1, lsl #10
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	06060501 	streq	r0, [r6], -r1, lsl #10
     584:	13050524 	movwne	r0, #21796	; 0x5524
     588:	01062005 	tsteq	r6, r5
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	30060505 	andcc	r0, r6, r5, lsl #10
     590:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
     594:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     598:	0f052301 	svceq	0x00052301
     59c:	02207303 	eoreq	r7, r0, #201326592	; 0xc000000
     5a0:	01010002 	tsteq	r1, r2
     5a4:	0001af05 	andeq	sl, r1, r5, lsl #30
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	02260205 	eoreq	r0, r6, #1342177280	; 0x50000000
     5ac:	a6030000 	strge	r0, [r3], -r0
				DEBUG_PRINT("\r\nResponse");
     5b0:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	01af0513 			; <UNDEFINED> instruction: 0x01af0513
     5b8:	052e1106 	streq	r1, [lr, #-262]!	; 0xfffffefa
     5bc:	af052150 	svcge	0x00052150
     5c0:	50051f01 	andpl	r1, r5, r1, lsl #30
     5c4:	31180575 	tstcc	r8, r5, ror r5
     5c8:	05321b05 	ldreq	r1, [r2, #-2821]!	; 0xfffff4fb
				if(!response_flag){
     5cc:	2e790350 	mrccs	3, 3, r0, cr9, cr0, {2}
					response_flag=1;
     5d0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
					trigger(&response_flag);
     5d4:	01061805 	tsteq	r6, r5, lsl #16
				switch(response_message_5->status){
     5d8:	2f060205 	svccs	0x00060205
     5dc:	06230513 			; <UNDEFINED> instruction: 0x06230513
     5e0:	06020501 	streq	r0, [r2], -r1, lsl #10
     5e4:	061e0521 	ldreq	r0, [lr], -r1, lsr #10
     5e8:	06020501 	streq	r0, [r2], -r1, lsl #10
						if (response_checker[0] == response_message_5->request_number){
     5ec:	06200521 	strteq	r0, [r0], -r1, lsr #10
     5f0:	06020501 	streq	r0, [r2], -r1, lsl #10
     5f4:	061b0521 	ldreq	r0, [fp], -r1, lsr #10
							switch(response_checker[1]){
     5f8:	06020501 	streq	r0, [r2], -r1, lsl #10
     5fc:	06050521 	streq	r0, [r5], -r1, lsr #10
     600:	06030501 	streq	r0, [r3], -r1, lsl #10
     604:	061d053d 			; <UNDEFINED> instruction: 0x061d053d
									proceed response_1_create;
     608:	06030501 	streq	r0, [r3], -r1, lsl #10
						proceed response_2;
     60c:	1302052f 	movwne	r0, #9519	; 0x252f
									proceed response_1_delete;
     610:	01060505 	tsteq	r6, r5, lsl #10
									proceed response_1_retrieve;
     614:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
						proceed response_2;
     618:	14020567 	strne	r0, [r2], #-1383	; 0xfffffa99
						proceed response_3;
     61c:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
						proceed response_4;
     620:	01000302 	tsteq	r0, r2, lsl #6
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	001e0501 	andseq	r0, lr, r1, lsl #10
     628:	02780205 	rsbseq	r0, r8, #1342177280	; 0x50000000
				break;
     62c:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
}
     630:	20050101 	andcs	r0, r5, r1, lsl #2
     634:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
     638:	2e510501 	cdpcs	5, 5, cr0, cr1, cr1, {0}
     63c:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
     640:	5a052051 	bpl	14878c <__ccfg+0x1287e4>
     644:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
fsm root {
     648:	0513149f 	ldreq	r1, [r3, #-1183]	; 0xfffffb61
     64c:	15051603 	strne	r1, [r5, #-1539]	; 0xfffff9fd
     650:	13050106 	movwne	r0, #20742	; 0x5106
     654:	06030558 			; <UNDEFINED> instruction: 0x06030558
     658:	06420532 			; <UNDEFINED> instruction: 0x06420532
     65c:	20160501 	andscs	r0, r6, r1, lsl #10
     660:	05204205 	streq	r4, [r0, #-517]!	; 0xfffffdfb
     664:	42052103 	andmi	r2, r5, #-1073741824	; 0xc0000000
     668:	2103051f 	tstcs	r3, pc, lsl r5
     66c:	051f1605 	ldreq	r1, [pc, #-1541]	; 6f <g_pfnVectors+0x6f>
     670:	34210603 	strtcc	r0, [r1], #-1539	; 0xfffff9fd
     674:	01061d05 	tsteq	r6, r5, lsl #26
     678:	03061c05 	movweq	r1, #27653	; 0x6c05
     67c:	0505c80e 	streq	ip, [r5, #-2062]	; 0xfffff7f2
     680:	06550514 			; <UNDEFINED> instruction: 0x06550514
     684:	3e720501 	cdpcc	5, 7, cr0, cr2, cr1, {0}
     688:	0c030805 	stceq	8, cr0, [r3], {5}
     68c:	03550520 	cmpeq	r5, #32, 10	; 0x8000000
     690:	05052e72 	streq	r2, [r5, #-3698]	; 0xfffff18e
     694:	0c032206 	sfmeq	f2, 4, [r3], {6}
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	06080501 	streq	r0, [r8], -r1, lsl #10
     69c:	06060501 	streq	r0, [r6], -r1, lsl #10
     6a0:	39053d2f 	stmdbcc	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
		init_node(node_db);
     6a4:	06050106 	streq	r0, [r5], -r6, lsl #2
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	031e0527 	tsteq	lr, #163577856	; 0x9c00000
     6ac:	06052079 			; <UNDEFINED> instruction: 0x06052079
		tcv_plug (0, &plug_null);
     6b0:	1e052106 	adfnes	f2, f5, f6
     6b4:	06050106 	streq	r0, [r5], -r6, lsl #2
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	44052f06 	strmi	r2, [r5], #-3846	; 0xfffff0fa
     6bc:	29050106 	stmdbcs	r5, {r1, r2, r8}
     6c0:	06060520 	streq	r0, [r6], -r0, lsr #10
     6c4:	062d0521 	strteq	r0, [sp], -r1, lsr #10
     6c8:	20240501 	eorcs	r0, r4, r1, lsl #10
			diag("Cannot open tcv interface");
     6cc:	21060605 	tstcs	r6, r5, lsl #12
     6d0:	01064105 	tsteq	r6, r5, lsl #2
			halt();
     6d4:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	2f230606 	svccs	0x00230606
     6dc:	05010b05 	streq	r0, [r1, #-2821]	; 0xfffff4fb
		runfsm receiver(node_db);
     6e0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     6e4:	5905740e 	stmdbpl	r5, {r1, r2, r3, sl, ip, sp, lr}
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	1d052006 	stcne	0, cr2, [r5, #-24]	; 0xffffffe8
     6ec:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
     6f0:	6d051405 	cfstrsvs	mvf1, [r5, #-20]	; 0xffffffec
     6f4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     6f8:	200a0306 	andcs	r0, sl, r6, lsl #6
     6fc:	01062505 	tsteq	r6, r5, lsl #10
		ser_inf(get_choice, "%c", &CHOICE);
     700:	05666405 	strbeq	r6, [r6, #-1029]!	; 0xfffffbfb
     704:	25052075 	strcs	r2, [r5, #-117]	; 0xffffff8b
     708:	05053c3c 	streq	r3, [r5, #-3132]	; 0xfffff3c4
		switch(CHOICE) {
     70c:	08053e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip, sp}
     710:	06050106 	streq	r0, [r5], -r6, lsl #2
     714:	14053d06 	strne	r3, [r5], #-3334	; 0xfffff2fa
     718:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     71c:	01af0306 			; <UNDEFINED> instruction: 0x01af0306
     720:	1403053c 	strne	r0, [r3], #-1340	; 0xfffffac4
     724:	3e4b404b 	cdpcc	0, 4, cr4, cr11, cr11, {2}
     728:	56053e4b 	strpl	r3, [r5], -fp, asr #28
     72c:	03050106 	movweq	r0, #20742	; 0x5106
     730:	20560520 	subscs	r0, r6, r0, lsr #10
     734:	06200305 	strteq	r0, [r0], -r5, lsl #6
     738:	56054067 	strpl	r4, [r5], -r7, rrx
				proceed menu;
     73c:	03050106 	movweq	r0, #20742	; 0x5106
     740:	20560520 	subscs	r0, r6, r0, lsr #10
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	06200305 	strteq	r0, [r0], -r5, lsl #6
     748:	57053e4b 	strpl	r3, [r5, -fp, asr #28]
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	03050106 	movweq	r0, #20742	; 0x5106
     750:	20570520 	subscs	r0, r7, r0, lsr #10
     754:	06200305 	strteq	r0, [r0], -r5, lsl #6
		DEBUG_PRINT("setting node group ID");
     758:	56053e4b 	strpl	r3, [r5], -fp, asr #28
     75c:	03050106 	movweq	r0, #20742	; 0x5106
    node->gid = gid; 
     760:	20560520 	subscs	r0, r6, r0, lsr #10
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     764:	06200305 	strteq	r0, [r0], -r5, lsl #6
    node->gid = gid; 
     768:	053f404b 	ldreq	r4, [pc, #-75]!	; 725 <root+0xdd>
		proceed menu;
     76c:	18053e01 	stmdane	r5, {r0, r9, sl, fp, ip, sp}
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     770:	3c7eb703 	ldclcc	7, cr11, [lr], #-12
     774:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	05010655 	streq	r0, [r1, #-1621]	; 0xfffff9ab
     77c:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
     780:	05010666 	streq	r0, [r1, #-1638]	; 0xfffff99a
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     784:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     788:	0c031305 	stceq	3, cr1, [r3], {5}
		if((node_db->id < 1) || (node_db->id > 25)){
     78c:	06080501 	streq	r0, [r8], -r1, lsl #10
     790:	4a3b0501 	bmi	ec1b9c <__ccfg+0xea1bf4>
     794:	4b060605 	blmi	181fb0 <__ccfg+0x162008>
			strncpy(reason, "Out of Range", 50);
     798:	20280306 	eorcs	r0, r8, r6, lsl #6
     79c:	59032f06 	stmdbpl	r3, {r1, r2, r8, r9, sl, fp, sp}
			proceed invalid_node_id;
     7a0:	15050520 	strne	r0, [r5, #-1312]	; 0xfffffae0
     7a4:	1406054b 	strne	r0, [r6], #-1355	; 0xfffffab5
				strncpy(reason, "ID is already in use", 50);
     7a8:	0305053d 	movweq	r0, #21821	; 0x553d
		for(int i = 0; i < node_db->index; i++){
     7ac:	15017dd9 	strne	r7, [r1, #-3545]	; 0xfffff227
     7b0:	01060805 	tsteq	r6, r5, lsl #16
     7b4:	03060705 	movweq	r0, #26373	; 0x6705
		proceed menu;
     7b8:	3d4a02a5 	sfmcc	f0, 2, [sl, #-660]	; 0xfffffd6c
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7bc:	01060e05 	tsteq	r6, r5, lsl #28
     7c0:	24060705 	strcs	r0, [r6], #-1797	; 0xfffff8fb
     7c4:	3d130605 	ldccc	6, cr0, [r3, #-20]	; 0xffffffec
     7c8:	01061b05 	tsteq	r6, r5, lsl #22
		proceed get_new_node_id;
     7cc:	bb060605 	bllt	181fe8 <__ccfg+0x162040>
     7d0:	010b053d 	tsteq	fp, sp, lsr r5
		if (!clear_node_neighbour_array(node_db)){
     7d4:	01060f05 	tsteq	r6, r5, lsl #30
     7d8:	03060905 	movweq	r0, #26885	; 0x6905
			strncpy(reason, "Error Clearing Node Array", 50);
     7dc:	052e7dd3 	streq	r7, [lr, #-3539]!	; 0xfffff22d
     7e0:	02a70307 	adceq	r0, r7, #469762048	; 0x1c000000
     7e4:	18053d01 	stmdane	r5, {r0, r8, sl, fp, ip, sp}
			proceed error;
     7e8:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7ec:	55051305 	strpl	r1, [r5, #-773]	; 0xfffffcfb
     7f0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		request_packet->gid = node_db->gid;
     7f4:	14063d06 	strne	r3, [r6], #-3334	; 0xfffff2fa
     7f8:	051e6605 	ldreq	r6, [lr, #-1541]	; 0xfffff9fb
		request_packet->tpe = DISCOVERY_REQUEST;
     7fc:	03220605 			; <UNDEFINED> instruction: 0x03220605
		request_packet->request_number = generate_request_num();
     800:	05832e09 	streq	r2, [r3, #3593]	; 0xe09
     804:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		call sender(request_packet, wait_discovery);
     808:	06054a34 			; <UNDEFINED> instruction: 0x06054a34
     80c:	05304b06 	ldreq	r4, [r0, #-2822]!	; 0xfffff4fa
		request_packet->receiver_id=0;
     810:	08051505 	stmdaeq	r5, {r0, r2, r8, sl, ip}
		call sender(request_packet, wait_discovery);
     814:	06050106 	streq	r0, [r5], -r6, lsl #2
     818:	053e4b06 	ldreq	r4, [lr, #-2822]!	; 0xfffff4fa
     81c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
			release;
     820:	07054a09 	streq	r4, [r5, -r9, lsl #20]
				proceed get_new_node_id;
     824:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
				proceed clear_neighbour_array;
     828:	053b060e 	ldreq	r0, [fp, #-1550]!	; 0xfffff9f2
				proceed create_proto_start;
     82c:	05250607 	streq	r0, [r5, #-1543]!	; 0xfffff9f9
				proceed start_delete_proto;
     830:	053d1406 	ldreq	r1, [sp, #-1030]!	; 0xfffffbfa
				proceed start_retrieve_proto;
     834:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
				proceed display_db;
     838:	901d031c 	andsls	r0, sp, ip, lsl r3
				proceed del_local;
     83c:	03060705 	movweq	r0, #26373	; 0x6705
			if(node_db->id == node_db->nnodes[i]){
     840:	05134a5e 	ldreq	r4, [r3, #-2654]	; 0xfffff5a2
     844:	020c031a 	andeq	r0, ip, #1744830464	; 0x68000000
     848:	0505013f 	streq	r0, [r5, #-319]	; 0xfffffec1
				strncpy(reason, "ID is already in use", 50);
     84c:	06550513 			; <UNDEFINED> instruction: 0x06550513
     850:	06050501 	streq	r0, [r5], -r1, lsl #10
				proceed invalid_node_id;
     854:	0515063d 	ldreq	r0, [r5, #-1597]	; 0xfffff9c3
     858:	05051d6c 	streq	r1, [r5, #-3436]	; 0xfffff294
		for(int i = 0; i < node_db->index; i++){
     85c:	31142f06 	tstcc	r4, r6, lsl #30
		if (discovery_wait_flag == 0){
     860:	01060805 	tsteq	r6, r5, lsl #16
			discovery_wait_flag=1;
     864:	05663405 	strbeq	r3, [r6, #-1029]!	; 0xfffffbfb
     868:	05680606 	strbeq	r0, [r8, #-1542]!	; 0xfffff9fa
			delay(3000, find_proto_start);
     86c:	4d051505 	cfstr32mi	mvfx1, [r5, #-20]	; 0xffffffec
     870:	08050106 	stmdaeq	r5, {r1, r2, r8}
		if (discovery_wait_flag == 1){
     874:	0606052e 	streq	r0, [r6], -lr, lsr #10
			discovery_wait_flag=0;
     878:	0305053d 	movweq	r0, #21821	; 0x553d
     87c:	05017dd7 	streq	r7, [r1, #-3543]	; 0xfffff229
			delay(3000, display_neighbour_nodes);
     880:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
     884:	02a90319 	adceq	r0, r9, #1677721600	; 0x64000000
     888:	03260590 			; <UNDEFINED> instruction: 0x03260590
     88c:	052e7dd7 	streq	r7, [lr, #-3543]!	; 0xfffff229
     890:	02a90319 	adceq	r0, r9, #1677721600	; 0x64000000
     894:	0606052e 	streq	r0, [r6], -lr, lsr #10
     898:	17070567 	strne	r0, [r7, -r7, ror #10]
     89c:	061c0513 			; <UNDEFINED> instruction: 0x061c0513
     8a0:	06130501 	ldreq	r0, [r3], -r1, lsl #10
     8a4:	130505de 	movwne	r0, #21982	; 0x55de
     8a8:	01064305 	tsteq	r6, r5, lsl #6
     8ac:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
     8b0:	18051e43 	stmdane	r5, {r0, r1, r6, r9, sl, fp, ip}
     8b4:	06050520 	streq	r0, [r5], -r0, lsr #10
     8b8:	1b053022 	blne	14c948 <__ccfg+0x12c9a0>
     8bc:	08050106 	stmdaeq	r5, {r1, r2, r8}
     8c0:	58310520 	ldmdapl	r1!, {r5, r8, sl}
     8c4:	5a060605 	bpl	1820e0 <__ccfg+0x162138>
     8c8:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
		if(node_db->index == 0){
     8cc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     8d0:	06052007 	streq	r2, [r5], -r7
     8d4:	13052f06 	movwne	r2, #24326	; 0x5f06
			proceed menu;
     8d8:	06050106 	streq	r0, [r5], -r6, lsl #2
fsm root {
     8dc:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e0:	061e0531 			; <UNDEFINED> instruction: 0x061e0531
		for (int i=0; i<node_db->index; i++) {
     8e4:	06070501 	streq	r0, [r7], -r1, lsl #10
     8e8:	061b05a3 	ldreq	r0, [fp], -r3, lsr #11
     8ec:	20340501 	eorscs	r0, r4, r1, lsl #10
		proceed menu;
     8f0:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     8f4:	054b0608 	strbeq	r0, [fp, #-1544]	; 0xfffff9f8
     8f8:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     8fc:	0584060a 	streq	r0, [r4, #1546]	; 0x60a
     900:	0e030607 	cfmadd32eq	mvax0, mvfx0, mvfx3, mvfx7
     904:	052f0620 	streq	r0, [pc, #-1568]!	; 2ec <receiver+0x74>
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     908:	2074030a 	rsbscs	r0, r4, sl, lsl #6
     90c:	36070531 			; <UNDEFINED> instruction: 0x36070531
			strncpy(reason, "Error: improper ID", 50);
     910:	05053131 	streq	r3, [r5, #-305]	; 0xfffffecf
     914:	4b2e0b03 	blmi	b83528 <__ccfg+0xb63580>
     918:	24031305 	strcs	r1, [r3], #-773	; 0xfffffcfb
			proceed error;
     91c:	06010520 	streq	r0, [r1], -r0, lsr #10
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     920:	000b022e 	andeq	r0, fp, lr, lsr #4
     924:	1a050101 	bne	140d30 <__ccfg+0x120d88>
		ser_in(get_record_to_create, user_provided_record, 20);
     928:	48020500 	stmdami	r2, {r8, sl}
     92c:	03000006 	movweq	r0, #6
     930:	050104a2 	streq	r0, [r1, #-1186]	; 0xfffffb5e
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     934:	1a05011c 	bne	140dac <__ccfg+0x120e04>
		create_message->gid = node_db->gid;
     938:	03050106 	movweq	r0, #20742	; 0x5106
     93c:	020c0306 	andeq	r0, ip, #402653184	; 0x18000000
     940:	26050128 	strcs	r0, [r5], -r8, lsr #2
		create_message->tpe = CREATE_RECORD;
     944:	0b050106 	bleq	140d64 <__ccfg+0x120dbc>
		create_message->request_number = generate_request_num();
     948:	0603054a 	streq	r0, [r3], -sl, asr #10
		create_message->sender_id = node_db->id;
     94c:	0e033031 	mcreq	0, 0, r3, cr3, cr1, {1}
     950:	4a11034a 	bmi	441680 <__ccfg+0x4216d8>
     954:	01060905 	tsteq	r6, r5, lsl #18
		strncpy(create_message->record, user_provided_record, 20);
     958:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
		create_message->receiver_id = user_provided_receiver_id;
     95c:	07052206 	streq	r2, [r5, -r6, lsl #4]
		strncpy(create_message->record, user_provided_record, 20);
     960:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
		response_checker[0] = create_message->request_number;
     964:	06060522 	streq	r0, [r6], -r2, lsr #10
		call sender(create_message, wait);
     968:	06040501 	streq	r0, [r4], -r1, lsl #10
		response_checker[1] = create_message->tpe;
     96c:	052f3d21 	streq	r3, [pc, #-3361]!	; fffffc53 <_estack+0xdfffac53>
     970:	4d4c1a03 	vstrmi	s3, [ip, #-12]
		call sender(create_message, wait);
     974:	06029e05 	streq	r9, [r2], -r5, lsl #28
     978:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
     97c:	0567a106 	strbeq	sl, [r7, #-262]!	; 0xfffffefa
     980:	08230305 	stmdaeq	r3!, {r0, r2, r8, r9}
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     984:	2e600366 	cdpcs	3, 6, cr0, cr0, cr6, {3}
     988:	20200306 	eorcs	r0, r0, r6, lsl #6
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     98c:	03052f06 	movweq	r2, #24326	; 0x5f06
     990:	68134e16 	ldmdavs	r3, {r1, r2, r4, r9, sl, fp, lr}
     994:	0608053e 			; <UNDEFINED> instruction: 0x0608053e
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     998:	030f0501 	movweq	r0, #62721	; 0xf501
     99c:	05207b96 	streq	r7, [r0, #-2966]!	; 0xfffff46a
			strncpy(reason, "Error: improper node ID", 50);
     9a0:	04ea0308 	strbteq	r0, [sl], #776	; 0x308
     9a4:	0605052e 	streq	r0, [r5], -lr, lsr #10
			proceed error;
     9a8:	207b9603 	rsbscs	r9, fp, r3, lsl #12
     9ac:	03060305 	movweq	r0, #25349	; 0x6305
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9b0:	050104f0 	streq	r0, [r1, #-1264]	; 0xfffffb10
     9b4:	7b90030f 	blvc	fe4015f8 <_estack+0xde3fc5f8>
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9b8:	06050520 	streq	r0, [r5], -r0, lsr #10
     9bc:	03040521 	movweq	r0, #17697	; 0x4521
     9c0:	050104ed 	streq	r0, [r1, #-1261]	; 0xfffffb13
		if (us_pr_in < 0 || us_pr_in > 40){
     9c4:	4d311403 	cfldrsmi	mvf1, [r1, #-12]!
			strncpy(reason, "Error: invalid index", 50);
     9c8:	06080513 			; <UNDEFINED> instruction: 0x06080513
     9cc:	1d030515 	cfstr32ne	mvfx0, [r3, #-84]	; 0xffffffac
     9d0:	08056906 	stmdaeq	r5, {r1, r2, r8, fp, sp, lr}
			proceed error;
     9d4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9d8:	7b810306 	blvc	fe0415f8 <_estack+0xde03c5f8>
     9dc:	060e053c 			; <UNDEFINED> instruction: 0x060e053c
     9e0:	06050501 	streq	r0, [r5], -r1, lsl #10
		delete_record->gid = node_db->gid;
     9e4:	03040521 	movweq	r0, #17697	; 0x4521
		delete_record->tpe = DELETE_RECORD;
     9e8:	05010581 	streq	r0, [r1, #-1409]	; 0xfffffa7f
		delete_record->request_number = generate_request_num();
     9ec:	0e051503 	cfsh32eq	mvfx1, mvfx5, #3
     9f0:	18050106 	stmdane	r5, {r1, r2, r8}
		call sender(delete_record, wait);
     9f4:	20050520 	andcs	r0, r5, r0, lsr #10
		delete_record->sender_id = node_db->id;
     9f8:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
		delete_record->receiver_id = user_provided_receiver_id;
     9fc:	061a0559 			; <UNDEFINED> instruction: 0x061a0559
		delete_record->record_index = us_pr_in;
     a00:	3c7ef103 	ldfccp	f7, [lr], #-12
     a04:	95030505 	strls	r0, [r3, #-1285]	; 0xfffffafb
		response_checker[0] = delete_record->request_number;
     a08:	12052001 	andne	r2, r5, #1
		call sender(delete_record, wait);
     a0c:	1d052c06 	stcne	12, cr2, [r5, #-24]	; 0xffffffe8
     a10:	03050106 	movweq	r0, #20742	; 0x5106
     a14:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
     a18:	14030533 	strne	r0, [r3], #-1331	; 0xfffffacd
     a1c:	06560541 	ldrbeq	r0, [r6], -r1, asr #10
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a20:	20030501 	andcs	r0, r3, r1, lsl #10
     a24:	05205605 	streq	r5, [r0, #-1541]!	; 0xfffff9fb
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a28:	59062003 	stmdbpl	r6, {r0, r1, sp}
     a2c:	053c0e03 	ldreq	r0, [ip, #-3587]!	; 0xfffff1fd
     a30:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		if (get_id < 1 || get_id > 25){
     a34:	04054a06 	streq	r4, [r5], #-2566	; 0xfffff5fa
     a38:	3d592106 	ldfcce	f2, [r9, #-24]	; 0xffffffe8
			strncpy(reason, "Error: improper node ID", 50);
     a3c:	13160305 	tstne	r6, #335544320	; 0x14000000
     a40:	01063705 	tsteq	r6, r5, lsl #14
     a44:	053f1705 	ldreq	r1, [pc, #-1797]!	; 347 <receiver+0xcf>
			proceed error;
     a48:	37051f20 	strcc	r1, [r5, -r0, lsr #30]
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a4c:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     a50:	06200522 	strteq	r0, [r0], -r2, lsr #10
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a54:	2f170501 	svccs	0x00170501
     a58:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
     a5c:	24051321 	strcs	r1, [r5], #-801	; 0xfffffcdf
		if (beg_for_index < 0 || beg_for_index > 40){
     a60:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
     a64:	0603052e 	streq	r0, [r3], -lr, lsr #10
			strncpy(reason, "Error: invalid index", 50);
     a68:	06260521 	strteq	r0, [r6], -r1, lsr #10
     a6c:	230c0501 	movwcs	r0, #50433	; 0xc501
			proceed error;
     a70:	051d2605 	ldreq	r2, [sp, #-1541]	; 0xfffff9fb
     a74:	1d05230c 	stcne	3, cr2, [r5, #-48]	; 0xffffffd0
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     a78:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
     a7c:	061e0521 	ldreq	r0, [lr], -r1, lsr #10
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a80:	06030501 	streq	r0, [r3], -r1, lsl #10
     a84:	01080522 	tsteq	r8, r2, lsr #10
     a88:	01060c05 	tsteq	r6, r5, lsl #24
		retrieve_record->gid = node_db->gid;
     a8c:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
		retrieve_record->tpe = RETRIEVE_RECORD;
     a90:	05260604 	streq	r0, [r6, #-1540]!	; 0xfffff9fc
		retrieve_record->request_number = generate_request_num();
     a94:	7f890305 	svcvc	0x00890305
     a98:	3332322e 	teqcc	r2, #-536870910	; 0xe0000002
		retrieve_record->receiver_id = get_id;
     a9c:	05323232 	ldreq	r3, [r2, #-562]!	; 0xfffffdce
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aa0:	2e2e0304 	cdpcs	3, 2, cr0, cr14, cr4, {0}
		retrieve_record->record_index = beg_for_index;
     aa4:	01062505 	tsteq	r6, r5, lsl #10
     aa8:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aac:	59590605 	ldmdbpl	r9, {r0, r2, r9, sl}^
		response_checker[0] = retrieve_record->request_number;
     ab0:	0e26053d 	mcreq	5, 1, r0, cr6, cr13, {1}
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     ab4:	01062705 	tsteq	r6, r5, lsl #14
		response_checker[1] = retrieve_record->tpe;
     ab8:	03067005 	movweq	r7, #24581	; 0x6005
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     abc:	03052e2b 	movweq	r2, #24107	; 0x5e2b
     ac0:	061b0515 			; <UNDEFINED> instruction: 0x061b0515
		call sender(retrieve_record, wait);
     ac4:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
     ac8:	21060405 	tstcs	r6, r5, lsl #8
     acc:	01061705 	tsteq	r6, r5, lsl #14
     ad0:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
     ad4:	04051f17 	streq	r1, [r5], #-3863	; 0xfffff0e9
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad8:	03052106 	movweq	r2, #20742	; 0x5106
     adc:	0606055b 			; <UNDEFINED> instruction: 0x0606055b
		if(node_db->data_base.item_count != 0){
     ae0:	06040501 	streq	r0, [r4], -r1, lsl #10
     ae4:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     ae8:	21040501 	tstcs	r4, r1, lsl #10
		ser_out(loop_through_data, "\r\n");
     aec:	051f1705 	ldreq	r1, [pc, #-1797]	; 3ef <receiver+0x177>
     af0:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
		proceed menu;
     af4:	17270203 	strne	r0, [r7, -r3, lsl #4]!
		delete_all(node_db);
     af8:	01060d05 	tsteq	r6, r5, lsl #26
     afc:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
		proceed menu;
     b00:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
     b04:	b203061a 	andlt	r0, r3, #27262976	; 0x1a00000
		delay(3000, timeout);
     b08:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
     b0c:	2001d203 	andcs	sp, r1, r3, lsl #4
		when(&response_flag, menu);
     b10:	05220405 	streq	r0, [r2, #-1029]!	; 0xfffffbfb
     b14:	051c0611 	ldreq	r0, [ip, #-1553]	; 0xfffff9ef
		release;
     b18:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b1c:	42063c03 	andmi	r3, r6, #768	; 0x300
     b20:	4d3c0d03 	ldcmi	13, cr0, [ip, #-12]!
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b24:	06270568 	strteq	r0, [r7], -r8, ror #10
     b28:	20060501 	andcs	r0, r6, r1, lsl #10
     b2c:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
     b30:	03053d59 	movweq	r3, #23897	; 0x5d59
		for (int i=0; i<node_db->index; i++) {
     b34:	135c4d15 	cmpne	ip, #1344	; 0x540
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b38:	01063705 	tsteq	r6, r5, lsl #14
     b3c:	053d2005 	ldreq	r2, [sp, #-5]!
     b40:	03051f37 	movweq	r1, #24375	; 0x5f37
     b44:	20052106 	andcs	r2, r5, r6, lsl #2
     b48:	17050106 	strne	r0, [r5, -r6, lsl #2]
     b4c:	0603052e 	streq	r0, [r3], -lr, lsr #10
     b50:	06170521 	ldreq	r0, [r7], -r1, lsr #10
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b54:	06030501 	streq	r0, [r3], -r1, lsl #10
     b58:	0624052f 	strteq	r0, [r4], -pc, lsr #10
     b5c:	2e220501 	cfsh64cs	mvdx0, mvdx2, #1
     b60:	21060305 	tstcs	r6, r5, lsl #6
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b64:	01062605 	tsteq	r6, r5, lsl #12
     b68:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
		ser_out(timeout, "\r\nFailed to reach the destination");
     b6c:	03051e26 	movweq	r1, #24102	; 0x5e26
     b70:	1e1d0522 	cfmul64ne	mvdx0, mvdx13, mvdx2
		proceed menu;
     b74:	21060305 	tstcs	r6, r5, lsl #6
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b78:	01061f05 	tsteq	r6, r5, lsl #30
     b7c:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
     b80:	03052d1f 	movweq	r2, #23839	; 0x5d1f
		proceed menu;
     b84:	05312f06 	ldreq	r2, [r1, #-3846]!	; 0xfffff0fa
}
     b88:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
     b8c:	0c052017 	stceq	0, cr2, [r5], {23}
     b90:	1d270523 	cfstr32ne	mvfx0, [r7, #-140]!	; 0xffffff74
     b94:	21060305 	tstcs	r6, r5, lsl #6
     b98:	01062705 	tsteq	r6, r5, lsl #14
     b9c:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
     ba0:	03051e27 	movweq	r1, #24103	; 0x5e27
     ba4:	08052206 	stmdaeq	r5, {r1, r2, r9, sp}
     ba8:	060c0501 	streq	r0, [ip], -r1, lsl #10
     bac:	580b0501 	stmdapl	fp, {r0, r8, sl}
     bb0:	3c066605 	stccc	6, cr6, [r6], {5}
     bb4:	0c030305 	stceq	3, cr0, [r3], {5}
     bb8:	05684d01 	strbeq	r4, [r8, #-3329]!	; 0xfffff2ff
     bbc:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
     bc0:	04052006 	streq	r2, [r5], #-6
     bc4:	3d593d06 	ldclcc	13, cr3, [r9, #-24]	; 0xffffffe8
     bc8:	4d150305 	ldcmi	3, cr0, [r5, #-20]	; 0xffffffec
     bcc:	06060568 	streq	r0, [r6], -r8, ror #10
     bd0:	06040501 	streq	r0, [r4], -r1, lsl #10
     bd4:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
     bd8:	05131603 	ldreq	r1, [r3, #-1539]	; 0xfffff9fd
     bdc:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
     be0:	37053d1f 	smladcc	r5, pc, sp, r3	; <UNPREDICTABLE>
     be4:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
     be8:	061f0521 	ldreq	r0, [pc], -r1, lsr #10
     bec:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
     bf0:	21060305 	tstcs	r6, r5, lsl #6
     bf4:	01061605 	tsteq	r6, r5, lsl #12
     bf8:	2f060305 	svccs	0x00060305
static void devinit_uart (int devnum) {
     bfc:	01062305 	tsteq	r6, r5, lsl #6
	adddevfunc (ioreq_uart_a, devnum);
     c00:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
     c04:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
void udelay (volatile word n) {
     c08:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
     c0c:	2009030c 	andcs	r0, r9, ip, lsl #6
	while (n) {
     c10:	77032505 	strvc	r2, [r3, -r5, lsl #10]
     c14:	201c0520 	andscs	r0, ip, r0, lsr #10
}
     c18:	21060305 	tstcs	r6, r5, lsl #6
	while (n--);
     c1c:	01061e05 	tsteq	r6, r5, lsl #28
     c20:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
     c24:	01061f05 	tsteq	r6, r5, lsl #30
		n--;
     c28:	40060305 	andmi	r0, r6, r5, lsl #6
     c2c:	01061705 	tsteq	r6, r5, lsl #14
     c30:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
void mdelay (volatile word n) {
     c34:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
     c38:	05010626 	streq	r0, [r1, #-1574]	; 0xfffff9da
	while (n) {
     c3c:	2605220c 	strcs	r2, [r5], -ip, lsl #4
     c40:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
}
     c44:	01080522 	tsteq	r8, r2, lsr #10
		udelay (999);
     c48:	01060c05 	tsteq	r6, r5, lsl #24
     c4c:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
		n--;
     c50:	053c0665 	ldreq	r0, [ip, #-1637]!	; 0xfffff99b
     c54:	010c0303 	tsteq	ip, r3, lsl #6
     c58:	1205684d 	andne	r6, r5, #5046272	; 0x4d0000
     c5c:	06050106 	streq	r0, [r5], -r6, lsl #2
void __pi_ondomain (lword d) {
     c60:	06040520 	streq	r0, [r4], -r0, lsr #10
     c64:	053d593d 	ldreq	r5, [sp, #-2365]!	; 0xfffff6c3
		if (__pi_systat.effpdm > 1)
     c68:	684d1503 	stmdavs	sp, {r0, r1, r8, sl, ip}^
     c6c:	01060605 	tsteq	r6, r5, lsl #12
			__pi_systat.effpdm = 1;
     c70:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
	PRCMPowerDomainOn (d);
     c74:	03053d59 	movweq	r3, #23897	; 0x5d59
     c78:	05135a16 	ldreq	r5, [r3, #-2582]	; 0xfffff5ea
     c7c:	05010639 	streq	r0, [r1, #-1593]	; 0xfffff9c7
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c80:	39053d21 	stmdbcc	r5, {r0, r5, r8, sl, fp, ip, sp}
     c84:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
     c88:	06210521 	strteq	r0, [r1], -r1, lsr #10
	__pi_systat.ondmns |= d;
     c8c:	2e180501 	cfmul32cs	mvfx0, mvfx8, mvfx1
     c90:	21060305 	tstcs	r6, r5, lsl #6
}
     c94:	01061805 	tsteq	r6, r5, lsl #16
     c98:	2f060305 	svccs	0x00060305
void __pi_offdomain (lword d) {
     c9c:	01062505 	tsteq	r6, r5, lsl #10
     ca0:	052e2305 	streq	r2, [lr, #-773]!	; 0xfffffcfb
	PRCMPowerDomainOff (d);
     ca4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ca8:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
     cac:	27052120 	strcs	r2, [r5, -r0, lsr #2]
     cb0:	2403051f 	strcs	r0, [r3], #-1311	; 0xfffffae1
	if (d & PRCM_DOMAIN_RFCORE) {
     cb4:	051c1e05 	ldreq	r1, [ip, #-3589]	; 0xfffff1fb
     cb8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cbc:	05130621 	ldreq	r0, [r3, #-1569]	; 0xfffff9df
     cc0:	03051f20 	movweq	r1, #24352	; 0x5f20
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cc4:	21052106 	tstcs	r5, r6, lsl #2
     cc8:	03050106 	movweq	r0, #20742	; 0x5106
	__pi_systat.ondmns &= ~d;
     ccc:	05303006 	ldreq	r3, [r0, #-6]!
     cd0:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
}
     cd4:	03052028 	movweq	r2, #20520	; 0x5028
     cd8:	1e280522 	cfsh64ne	mvdx0, mvdx8, #18
void __pi_syserror (word ec, const char *m) {
     cdc:	21060305 	tstcs	r6, r5, lsl #6
	diag ("SYSERR: %x, %s", ec, m);
     ce0:	01062805 	tsteq	r6, r5, lsl #16
     ce4:	2f060305 	svccs	0x00060305
     ce8:	0108053e 	tsteq	r8, lr, lsr r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     cec:	01060c05 	tsteq	r6, r5, lsl #24
     cf0:	05740b05 	ldrbeq	r0, [r4, #-2821]!	; 0xfffff4fb
     cf4:	053c0667 	ldreq	r0, [ip, #-1639]!	; 0xfffff999
		all_leds_blink;
     cf8:	054d1503 	strbeq	r1, [sp, #-1283]	; 0xfffffafd
     cfc:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
     d00:	03052e05 	movweq	r2, #24069	; 0x5e05
     d04:	3f4b4f06 	svccc	0x004b4f06
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d08:	4b593f4b 	blmi	1650a3c <__ccfg+0x1630a94>
     d0c:	d5030405 	strle	r0, [r3, #-1029]	; 0xfffffbfb
     d10:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
     d14:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     d18:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
     d1c:	063d054c 	ldrteq	r0, [sp], -ip, asr #10
	while (1) {
     d20:	20040501 	andcs	r0, r4, r1, lsl #10
     d24:	05203d05 	streq	r3, [r0, #-3333]!	; 0xfffff2fb
     d28:	23052004 	movwcs	r2, #20484	; 0x5004
     d2c:	24055406 	strcs	r5, [r5], #-1030	; 0xfffffbfa
void tci_run_delay_timer () {
     d30:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	setdel = __pi_mintk - __pi_old;
     d34:	019f0306 	orrseq	r0, pc, r6, lsl #6
     d38:	01b5052e 			; <UNDEFINED> instruction: 0x01b5052e
     d3c:	05053c06 	streq	r3, [r5, #-3078]	; 0xfffff3fa
     d40:	0637052e 	ldrteq	r0, [r7], -lr, lsr #10
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	0638058f 	ldrteq	r0, [r8], -pc, lsl #11
     d48:	06130501 	ldreq	r0, [r3], -r1, lsl #10
     d4c:	061f0520 	ldreq	r0, [pc], -r0, lsr #10
     d50:	202a0501 	eorcs	r0, sl, r1, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d54:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
	sti_tim;
     d58:	05053c0c 	streq	r3, [r5, #-3084]	; 0xfffff3f4
}
     d5c:	06030521 	streq	r0, [r3], -r1, lsr #10
     d60:	4b3c1003 	blmi	f04d74 <__ccfg+0xee4dcc>
     d64:	01055940 	tsteq	r5, r0, asr #18
     d68:	2e13053d 	mrccs	5, 0, r0, cr3, cr13, {1}
     d6c:	2e060105 	adfcss	f0, f6, f5
	cli_aux;
     d70:	01003602 	tsteq	r0, r2, lsl #12
     d74:	00156201 	andseq	r6, r5, r1, lsl #4
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d78:	a1000300 	mrsge	r0, LR_irq
     d7c:	02000002 	andeq	r0, r0, #2
     d80:	0d0efb01 	vstreq	d15, [lr, #-4]
     d84:	01010100 	mrseq	r0, (UNDEF: 17)
	sti_aux;
     d88:	00000001 	andeq	r0, r0, r1
}
     d8c:	01000001 	tsteq	r0, r1
     d90:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; cdc <__pi_syserror>
     d94:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
void AONRTCIntHandler () {
     d98:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d9c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     da0:	6f746b73 	svcvs	0x00746b73
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     da4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		if (__pi_utims [0] == 0)
     da8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     dac:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if (*(__pi_utims [0])) {
     db0:	2f534f43 	svccs	0x00534f43
     db4:	4f636950 	svcmi	0x00636950
			(*(__pi_utims [0]))--;
     db8:	43432f53 	movtmi	r2, #16211	; 0x3f53
		if (__pi_utims [1] == 0)
     dbc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
		if (*(__pi_utims [1])) {
     dc0:	6f682f00 	svcvs	0x00682f00
			aux_timer_inactive = 0;
     dc4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
			(*(__pi_utims [1]))--;
     dc8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
		if (__pi_utims [2] == 0)
     dcc:	442f6e65 	strtmi	r6, [pc], #-3685	; dd4 <AONRTCIntHandler+0x3c>
		if (*(__pi_utims [2])) {
     dd0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
			(*(__pi_utims [2]))--;
     dd4:	4f2f706f 	svcmi	0x002f706f
		if (__pi_utims [3] != 0) {
     dd8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			if (*(__pi_utims [3])) {
     ddc:	502f5445 	eorpl	r5, pc, r5, asr #8
				aux_timer_inactive = 0;
     de0:	534f4349 	movtpl	r4, #62281	; 0xf349
				(*(__pi_utims [3]))--;
     de4:	6369502f 	cmnvs	r9, #47	; 0x2f
	if (__pi_systat.ledsts) {
     de8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     dec:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		if (__pi_systat.ledblc++ == 0) {
     df0:	43432f58 	movtmi	r2, #16216	; 0x3f58
     df4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
			if (__pi_systat.ledblk) {
     df8:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
     dfc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     e00:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e04:	2f006269 	svccs	0x00006269
     e08:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
				if (__pi_systat.ledsts & 0x2)
     e0c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
     e10:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
     e14:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				if (__pi_systat.ledsts & 0x4)
     e18:	706f746b 	rsbvc	r7, pc, fp, ror #8
				__pi_systat.ledblk = 0;
     e1c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     e20:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			if (__pi_systat.fstblk)
     e24:	4349502f 	movtmi	r5, #36911	; 0x902f
     e28:	502f534f 	eorpl	r5, pc, pc, asr #6
				__pi_systat.ledblc = 200;
     e2c:	534f6369 	movtpl	r6, #62313	; 0xf369
	if (events & AON_RTC_EVFLAGS_CH0) {
     e30:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		cli_tim;
     e34:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
		__pi_new += setdel;
     e38:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
     e3c:	2f656d6f 	svccs	0x00656d6f
		setdel = 0;
     e40:	70657473 	rsbvc	r7, r5, r3, ror r4
		RISE_N_SHINE;
     e44:	2f6e6568 	svccs	0x006e6568
		__pi_new += setdel;
     e48:	6b736544 	blvs	1cda360 <__ccfg+0x1cba3b8>
		RISE_N_SHINE;
     e4c:	2f706f74 	svccs	0x00706f74
     e50:	4f534c4f 	svcmi	0x00534c4f
		aux_timer_inactive = 1;
     e54:	2f54454e 	svccs	0x0054454e
     e58:	4f434950 	svcmi	0x00434950
				if (__pi_systat.ledsts & 0x1)
     e5c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e60:	2f534f63 	svccs	0x00534f63
     e64:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
				if (__pi_systat.ledsts & 0x2)
     e68:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
     e6c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
     e70:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
				if (__pi_systat.ledsts & 0x8)
     e74:	2f656d6f 	svccs	0x00656d6f
				__pi_systat.ledblk = 1;
     e78:	70657473 	rsbvc	r7, r5, r3, ror r4
     e7c:	2f6e6568 	svccs	0x006e6568
		if (aux_timer_inactive) {
     e80:	6b736544 	blvs	1cda398 <__ccfg+0x1cba3f0>
			cli_aux;
     e84:	2f706f74 	svccs	0x00706f74
     e88:	4f534c4f 	svcmi	0x00534c4f
     e8c:	2f54454e 	svccs	0x0054454e
     e90:	4f434950 	svcmi	0x00434950
     e94:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     e98:	2f534f63 	svccs	0x00534f63
     e9c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     ea0:	2f006c65 	svccs	0x00006c65
     ea4:	2f727375 	svccs	0x00727375
     ea8:	2f62696c 	svccs	0x0062696c
word tci_update_delay_ticks (Boolean force) {
     eac:	2f636367 	svccs	0x00636367
	cli_tim;
     eb0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     eb4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
	if (setdel) {
     eb8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ebc:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ec0:	2f312e32 	svccs	0x00312e32
     ec4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     ec8:	00656475 	rsbeq	r6, r5, r5, ror r4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ecc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; e18 <AONRTCIntHandler+0x80>
				AON_RTC_O_CH0CMP)) - gettav ());
     ed0:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	return NO;
     ed4:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
			setdel = 0;
     ed8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     edc:	6f746b73 	svcvs	0x00746b73
     ee0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
}
     ee4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		sti_tim;
     ee8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		return YES;
     eec:	2f534f43 	svccs	0x00534f43
     ef0:	4f636950 	svcmi	0x00636950
     ef4:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
     ef8:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     efc:	00010063 	andeq	r0, r1, r3, rrx
	UARTDisable (UART0_BASE);
     f00:	73797300 	cmnvc	r9, #0, 6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f04:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
	UARTDisable (UART0_BASE);
     f08:	00682e6c 	rsbeq	r2, r8, ip, ror #28
	UARTConfigSetExpClk (UART0_BASE,
     f0c:	63000002 	movwvs	r0, #2
     f10:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
     f14:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
     f18:	0100682e 	tsteq	r0, lr, lsr #16
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	70670000 	rsbvc	r0, r7, r0
     f20:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     f24:	00000200 	andeq	r0, r0, r0, lsl #4
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f28:	5f717269 	svcpl	0x00717269
     f2c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     f30:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
	urates [0] = rate;
     f34:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
}
     f38:	00000300 	andeq	r0, r0, r0, lsl #6
     f3c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     f40:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f44:	72690000 	rsbvc	r0, r9, #0
     f48:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
     f4c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f50:	00682e73 	rsbeq	r2, r8, r3, ror lr
     f54:	69000003 	stmdbvs	r0, {r0, r1}
     f58:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f5c:	735f6e69 	cmpvc	pc, #1680	; 0x690
     f60:	6f736e65 	svcvs	0x00736e65
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f64:	00682e72 	rsbeq	r2, r8, r2, ror lr
     f68:	70000004 	andvc	r0, r0, r4
	__pi_uart_setrate (urates [0], __pi_uart);
     f6c:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
     f70:	00020068 	andeq	r0, r2, r8, rrx
     f74:	6e6f6100 	powvse	f6, f7, f0
     f78:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
     f7c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     f80:	77700000 	ldrbvc	r0, [r0, -r0]!
     f84:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
	switch (operation) {
     f88:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
static int ioreq_uart_a (int operation, char *buf, int len) {
     f8c:	00000200 	andeq	r0, r0, r0, lsl #4
     f90:	5f6e6f61 	svcpl	0x006e6f61
     f94:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
     f98:	00020068 	andeq	r0, r2, r8, rrx
     f9c:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
				*buf++ = uart_a_read;
     fa0:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     fa4:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
			while (len && uart_a_char_available) {
     fa8:	00000500 	andeq	r0, r0, r0, lsl #10
     fac:	5f6e6f61 	svcpl	0x006e6f61
     fb0:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
			if (len != operation) {
     fb4:	00020068 	andeq	r0, r2, r8, rrx
}
     fb8:	6e6f6100 	powvse	f6, f7, f0
     fbc:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
			uart_a_disable_int;
     fc0:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
			if (uart_a_char_available) {
     fc4:	00020068 	andeq	r0, r2, r8, rrx
				*buf++ = uart_a_read;
     fc8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
			uart_a_disable_int;
     fcc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     fd0:	00060068 	andeq	r0, r6, r8, rrx
			if (uart_a_char_available) {
     fd4:	63726100 	cmnvs	r2, #0, 2
     fd8:	00682e68 	rsbeq	r2, r8, r8, ror #28
				uart_a_enable_int;
     fdc:	6d000001 	stcvs	0, cr0, [r0, #-4]
     fe0:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
				goto Redo_rx;
     fe4:	00010068 	andeq	r0, r1, r8, rrx
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fe8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     fec:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			return -2;
     ff0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     ff4:	62000001 	andvs	r0, r0, #1
				uart_a_write (*buf);
     ff8:	6f747475 	svcvs	0x00747475
     ffc:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
			while (len && uart_a_room_in_tx) {
    1000:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    1004:	00000100 	andeq	r0, r0, r0, lsl #2
    1008:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
			if (len != operation) {
    100c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			uart_a_disable_int;
    1010:	6b000007 	blvs	1034 <ioreq_uart_a+0xac>
    1014:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
			if (uart_a_room_in_tx) {
    1018:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    101c:	00000005 	andeq	r0, r0, r5
				uart_a_enable_int;
    1020:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    1024:	000bfc02 	andeq	pc, fp, r2, lsl #24
				*buf++ = uart_a_read;
    1028:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
			if (uart_a_room_in_tx) {
    102c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
				uart_a_write (*buf);
    1030:	10062705 	andne	r2, r6, r5, lsl #14
    1034:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1038:	01010005 	tsteq	r1, r5
    103c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
			uart_a_enable_int;
    1040:	000c0802 	andeq	r0, ip, r2, lsl #16
    1044:	01180300 	tsteq	r8, r0, lsl #6
    1048:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
			return 0;
    104c:	09050108 	stmdbeq	r5, {r3, r8}
			if (len == UART_CNTRL_SETRATE) {
    1050:	08050106 	stmdaeq	r5, {r1, r2, r8}
				if (__pi_uart_setrate (*((word*)buf),
    1054:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
    1058:	2b060305 	blcs	181c74 <__ccfg+0x161ccc>
    105c:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
				syserror (EREQPAR, "uar");
    1060:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
			syserror (ENOOPER, "uai");
    1064:	060a0501 	streq	r0, [sl], -r1, lsl #10
			if (len == UART_CNTRL_GETRATE) {
    1068:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
				return 1;
    106c:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1070:	01060405 	tsteq	r6, r5, lsl #8
			syserror (ENOOPER, "uai");
    1074:	01000702 	tsteq	r0, r2, lsl #14
    1078:	001f0501 	andseq	r0, pc, r1, lsl #10
    107c:	0c340205 	lfmeq	f0, 4, [r4], #-20	; 0xffffffec
    1080:	1f030000 	svcne	0x00030000
    1084:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
    1088:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    108c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1090:	01053c08 	tsteq	r5, r8, lsl #24
    1094:	06030524 	streq	r0, [r3], -r4, lsr #10
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1098:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
void UART0IntHandler () {
    109c:	07020106 	streq	r0, [r2, -r6, lsl #2]
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    10a4:	0205001e 	andeq	r0, r5, #30
    10a8:	00000c60 	andeq	r0, r0, r0, ror #24
    10ac:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
    10b0:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10b4:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
    10b8:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
		RISE_N_SHINE;
    10bc:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    10c0:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
		i_trigger (devevent (UART_A, READ));
    10c4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    10c8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    10cc:	17052106 	strne	r2, [r5, -r6, lsl #2]
    10d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    10d4:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
    10d8:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
    10dc:	06090501 	streq	r0, [r9], -r1, lsl #10
    10e0:	4a080501 	bmi	2024ec <__ccfg+0x1e2544>
    10e4:	30060205 	andcc	r0, r6, r5, lsl #4
    10e8:	01061505 	tsteq	r6, r5, lsl #10
    10ec:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    10f0:	01010005 	tsteq	r1, r5
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10f4:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    10f8:	000c9c02 	andeq	r9, ip, r2, lsl #24
    10fc:	013a0300 	teqeq	sl, r0, lsl #6
		i_trigger (devevent (UART_A, WRITE));
    1100:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1104:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
    1108:	1f052502 	svcne	0x00052502
		RISE_N_SHINE;
    110c:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
    1110:	3c053d06 	stccc	13, cr3, [r5], {6}
    1114:	01080501 	tsteq	r8, r1, lsl #10
		i_trigger (devevent (UART_A, WRITE));
    1118:	01060905 	tsteq	r6, r5, lsl #18
    111c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    1120:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    1124:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1128:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
    112c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1130:	06052027 	streq	r2, [r5], -r7, lsr #32
    1134:	06040520 	streq	r0, [r4], -r0, lsr #10
    1138:	06240521 	strteq	r0, [r4], -r1, lsr #10
    113c:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    1140:	23060205 	movwcs	r0, #25093	; 0x6205
}
    1144:	01061505 	tsteq	r6, r5, lsl #10
    1148:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    114c:	01010005 	tsteq	r1, r5
    1150:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
    1154:	00000002 	andeq	r0, r0, r2
void __buttons_setirq (int val) {
    1158:	00ce0300 	sbceq	r0, lr, r0, lsl #6
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    115c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1160:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1164:	06220205 	strteq	r0, [r2], -r5, lsl #4
    1168:	03053633 	movweq	r3, #22067	; 0x5633
    116c:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
		bn = BUTTON_GPIO (__button_list [i]);
    1170:	01f00304 	mvnseq	r0, r4, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	5c053001 	stcpl	0, cr3, [r5], {1}
    1178:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    117c:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
    1180:	0502100a 	streq	r1, [r2, #-10]
    1184:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1188:	0205002d 	andeq	r0, r5, #45	; 0x2d
}
    118c:	00000cdc 	ldrdeq	r0, [r0], -ip
    1190:	01019703 	tsteq	r1, r3, lsl #14
    1194:	01140205 	tsteq	r4, r5, lsl #4
    1198:	2d051701 	stccs	7, cr1, [r5, #-4]
void __pinlist_setirq (int val) {
    119c:	01790306 	cmneq	r9, r6, lsl #6
	for (i = 0; i < N_PINLIST; i++) {
    11a0:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11a4:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a8:	03030503 	movweq	r0, #13571	; 0x3503
	for (i = 0; i < N_PINLIST; i++) {
    11ac:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11b0:	062d0504 	strteq	r0, [sp], -r4, lsl #10
    11b4:	2001cb03 	andcs	ip, r1, r3, lsl #22
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11b8:	02050104 	andeq	r0, r5, #4, 2
    11bc:	7f8f0306 	svcvc	0x008f0306
    11c0:	1303053c 	movwne	r0, #13628	; 0x353c
	for (i = 0; i < N_PINLIST; i++) {
    11c4:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
}
    11c8:	eb032905 	bl	cb5e4 <__ccfg+0xab63c>
    11cc:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    11d0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    11d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
void GPIOIntHandler () {
    11d8:	7f900303 	svcvc	0x00900303
if (buttons_int) {
    11dc:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
    11e0:	00f0032d 	rscseq	r0, r0, sp, lsr #6
	buttons_disable ();
    11e4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    11e8:	90030603 	andls	r0, r3, r3, lsl #12
	i_trigger ((aword)&__button_list);
    11ec:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
    11f0:	eb032905 	bl	cb60c <__ccfg+0xab664>
    11f4:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    11f8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    11fc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1200:	90030603 	andls	r0, r3, r3, lsl #12
    1204:	0101207f 	tsteq	r1, pc, ror r0
    1208:	01010101 	tsteq	r1, r1, lsl #2
    120c:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    1210:	29050404 	stmdbcs	r5, {r2, sl}
    1214:	0101a103 	tsteq	r1, r3, lsl #2
	RISE_N_SHINE;
    1218:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    121c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1220:	03030501 	movweq	r0, #13569	; 0x3501
if (pin_sensor_int) {
    1224:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
    1228:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	i_trigger ((aword)(&__input_pins));
    122c:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
    1230:	06030501 	streq	r0, [r3], -r1, lsl #10
    1234:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    1238:	29050404 	stmdbcs	r5, {r2, sl}
    123c:	0101a103 	tsteq	r1, r3, lsl #2
    1240:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1244:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1248:	06030501 	streq	r0, [r3], -r1, lsl #10
    124c:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    1250:	01010101 	tsteq	r1, r1, lsl #2
    1254:	01580101 	cmpeq	r8, r1, lsl #2
	__pinsen_disable_and_clear;
    1258:	1108052e 	tstne	r8, lr, lsr #10
	RISE_N_SHINE;
    125c:	01000902 	tsteq	r0, r2, lsl #18
    1260:	001d0501 	andseq	r0, sp, r1, lsl #10
    1264:	0d300205 	lfmeq	f0, 4, [r0, #-20]!	; 0xffffffec
}
    1268:	9d030000 	stcls	0, cr0, [r3, #-0]
    126c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1270:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
    1274:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
    1278:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
void system_init () {
    127c:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1280:	0602052e 	streq	r0, [r2], -lr, lsr #10
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1284:	01760323 	cmneq	r6, r3, lsr #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1288:	01061105 	tsteq	r6, r5, lsl #2
    128c:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
    1290:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1294:	2a052073 	bcs	149468 <__ccfg+0x1294c0>
    1298:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    129c:	2076032f 	rsbscs	r0, r6, pc, lsr #6
    12a0:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
    12a4:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12a8:	23060205 	movwcs	r0, #25093	; 0x6205
    12ac:	2f060105 	svccs	0x00060105
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12b0:	01000b02 	tsteq	r0, r2, lsl #22
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12b4:	00210501 	eoreq	r0, r1, r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12b8:	0d700205 	lfmeq	f0, 2, [r0, #-20]!	; 0xffffffec
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12bc:	aa030000 	bge	c12c4 <__ccfg+0xa131c>
		pin = (port_confs [i] >> 19) & 0x1f;
    12c0:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	06210517 			; <UNDEFINED> instruction: 0x06210517
		pin = (port_confs [i] >> 19) & 0x1f;
    12c8:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12cc:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
    12d0:	03140205 	tsteq	r4, #1342177280	; 0x50000000
    12d4:	11050169 	tstne	r5, r9, ror #2
    12d8:	2f050106 	svccs	0x00050106
		if (port_confs [i] & 0x80)
    12dc:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12e0:	2f052017 	svccs	0x00052017
    12e4:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
		if (port_confs [i] & 0x40)
    12e8:	2a052e36 	bcs	14cbc8 <__ccfg+0x12cc20>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ec:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
    12f0:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f4:	01052e09 	tsteq	r5, r9, lsl #28
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12f8:	06021306 	streq	r1, [r2], -r6, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	all_leds_blink;
    1300:	0205001a 	andeq	r0, r5, #26
    1304:	00000d98 	muleq	r0, r8, sp
    1308:	0102b703 	tsteq	r2, r3, lsl #14
    130c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1310:	0e061a05 	vmlaeq.f32	s2, s12, s10
    1314:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
    1318:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    131c:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
    1320:	2b051406 	blcs	146340 <__ccfg+0x126398>
    1324:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    1328:	06050522 	streq	r0, [r5], -r2, lsr #10
    132c:	06030501 	streq	r0, [r3], -r1, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1330:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1334:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1338:	03052e06 	movweq	r2, #24070	; 0x5e06
	IntEnable (INT_AON_RTC_COMB);
    133c:	07053006 	streq	r3, [r5, -r6]
    1340:	06050106 	streq	r0, [r5], -r6, lsl #2
    1344:	06040520 	streq	r0, [r4], -r0, lsr #10
	__pi_malloc_init ();
    1348:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
	IntEnable (INT_AON_GPIO_EDGE);
    134c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1350:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1354:	06030501 	streq	r0, [r3], -r1, lsl #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1358:	06120522 	ldreq	r0, [r2], -r2, lsr #10
    135c:	20060501 	andcs	r0, r6, r1, lsl #10
    1360:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1364:	01060705 	tsteq	r6, r5, lsl #14
    1368:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    136c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1370:	1f130617 	svcne	0x00130617
    1374:	2f060405 	svccs	0x00060405
	urates [0] = UART_RATE / 100;
    1378:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    137c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	reinit_uart ();
    1380:	03052006 	movweq	r2, #20486	; 0x5006
	EXTRA_INITIALIZERS;
    1384:	07052206 	streq	r2, [r5, -r6, lsl #4]
    1388:	06050106 	streq	r0, [r5], -r6, lsl #2
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    138c:	06040520 	streq	r0, [r4], -r0, lsr #10
    1390:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    1394:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1398:	03052f06 	movweq	r2, #24326	; 0x5f06
    139c:	06120514 			; <UNDEFINED> instruction: 0x06120514
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	20060501 	andcs	r0, r6, r1, lsl #10
    13a4:	21060405 	tstcs	r6, r5, lsl #8
			devinit [i] . init (devinit [i] . param);
    13a8:	01060805 	tsteq	r6, r5, lsl #16
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13ac:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    13b0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    13b4:	1f130618 	svcne	0x00130618
	IntEnable (INT_UART0_COMB);
    13b8:	2f060505 	svccs	0x00060505
    13bc:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
}
    13c0:	017da303 	cmneq	sp, r3, lsl #6
	tci_run_auxiliary_timer ();
    13c4:	01061105 	tsteq	r6, r5, lsl #2
		diag ("");
    13c8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    13cc:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    13d0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13d4:	06052019 			; <UNDEFINED> instruction: 0x06052019
		diag ("Leftover RAM: %d bytes",
    13d8:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    13dc:	06130521 	ldreq	r0, [r3], -r1, lsr #10
    13e0:	20070501 	andcs	r0, r7, r1, lsl #10
    13e4:	052f1405 	streq	r1, [pc, #-1029]!	; fe7 <ioreq_uart_a+0x5f>
    13e8:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
    13ec:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    13f0:	06050106 	streq	r0, [r5], -r6, lsl #2
    13f4:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    13f8:	96032905 	strls	r2, [r3], -r5, lsl #18
    13fc:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    1400:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1404:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    1408:	e6030605 	str	r0, [r3], -r5, lsl #12
    140c:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
    1410:	08050106 	stmdaeq	r5, {r1, r2, r8}
    1414:	06060520 	streq	r0, [r6], -r0, lsr #10
    1418:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    141c:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
    1420:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1424:	01062d05 	tsteq	r6, r5, lsl #26
    1428:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
    142c:	7de80306 	stclvc	3, cr0, [r8, #24]!
    1430:	0614054a 	ldreq	r0, [r4], -sl, asr #10
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1434:	06060501 	streq	r0, [r6], -r1, lsl #10
    1438:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    143c:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
    1440:	06050106 	streq	r0, [r5], -r6, lsl #2
    1444:	01012106 	tsteq	r1, r6, lsl #2
    1448:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    144c:	03010618 	movweq	r0, #5656	; 0x1618
    1450:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
}
    1454:	13052206 	movwne	r2, #20998	; 0x5206
__attribute__ ((noreturn)) void __pi_release () {
    1458:	07050106 	streq	r0, [r5, -r6, lsl #2]
    145c:	06050520 	streq	r0, [r5], -r0, lsr #10
    1460:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1464:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	check_stack_overflow;
    1468:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
    146c:	02052e02 	andeq	r2, r5, #2, 28
    1470:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
	update_n_wake (MAX_WORD, NO);
    1474:	06030501 	streq	r0, [r3], -r1, lsl #10
    1478:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
    147c:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
	for_all_tasks (__pi_curr) {
    1480:	0c052206 	sfmeq	f2, 4, [r5], {6}
    1484:	0a050106 	beq	1418a4 <__ccfg+0x1218fc>
    1488:	1f0c052f 	svcne	0x000c052f
  __ASM volatile ("cpsid i" : : : "memory");
    148c:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
	__SLEEP;
    1490:	03051e0c 	movweq	r1, #24076	; 0x5e0c
    1494:	01132f06 	tsteq	r3, r6, lsl #30
    1498:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
    149c:	13060105 	movwne	r0, #24837	; 0x6105
	system_event_count ++;
    14a0:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
    14a4:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
	switch (__pi_systat.effpdm) {
    14a8:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
    14ac:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
    14b0:	06050106 	streq	r0, [r5], -r6, lsl #2
    14b4:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
			__WFI ();
    14b8:	c2032905 	andgt	r2, r3, #81920	; 0x14000
    14bc:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    14c0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	check_stack_overflow;
    14c4:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    14c8:	ba030605 	blt	c2ce4 <__ccfg+0xa2d3c>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    14cc:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
    14d0:	08050106 	stmdaeq	r5, {r1, r2, r8}
			(__pi_curr->code) (tstate (__pi_curr));
    14d4:	06060520 	streq	r0, [r6], -r0, lsr #10
			goto Redo;
    14d8:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
	for_all_tasks (__pi_curr) {
    14dc:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14e0:	17050501 	strne	r0, [r5, -r1, lsl #10]
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14e4:	01062d05 	tsteq	r6, r5, lsl #26
    14e8:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14ec:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
    14f0:	0614054a 	ldreq	r0, [r4], -sl, asr #10
    14f4:	06060501 	streq	r0, [r6], -r1, lsl #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14f8:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    14fc:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1500:	06050106 	streq	r0, [r5], -r6, lsl #2
    1504:	01012106 	tsteq	r1, r6, lsl #2
			__WFI ();
    1508:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    150c:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
    1510:	06030501 	streq	r0, [r3], -r1, lsl #10
}
    1514:	4a02ce03 	bmi	b4d28 <__ccfg+0x94d80>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1518:	01060605 	tsteq	r6, r5, lsl #12
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    151c:	30060405 	andcc	r0, r6, r5, lsl #8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1520:	01001502 	tsteq	r0, r2, lsl #10
    1524:	002d0501 	eoreq	r0, sp, r1, lsl #10
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1528:	0eac0205 	cdpeq	2, 10, cr0, cr12, cr5, {0}
    152c:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    1530:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1534:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1538:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    153c:	052f0605 	streq	r0, [pc, #-1541]!	; f3f <__pi_uart_setrate+0x43>
    1540:	21061f02 	tstcs	r6, r2, lsl #30
    1544:	01060605 	tsteq	r6, r5, lsl #12
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1548:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    154c:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1550:	06060520 	streq	r0, [r6], -r0, lsr #10
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1554:	06040501 	streq	r0, [r4], -r1, lsl #10
    1558:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    155c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1560:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
    1564:	01061005 	tsteq	r6, r5
			SysCtrlSetRechargeBeforePowerDown
    1568:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    156c:	0187031a 	orreq	r0, r7, sl, lsl r3
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1570:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
    1574:	1f170520 	svcne	0x00170520
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1578:	0a030905 	beq	c3994 <__ccfg+0xa39ec>
    157c:	030d0520 	movweq	r0, #54560	; 0xd520
    1580:	0b052076 	bleq	149760 <__ccfg+0x1297b8>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1584:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
    1588:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    158c:	06010513 			; <UNDEFINED> instruction: 0x06010513
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1590:	06030519 			; <UNDEFINED> instruction: 0x06030519
    1594:	0a052f29 	beq	14d240 <__ccfg+0x12d298>
    1598:	09020106 	stmdbeq	r2, {r1, r2, r8}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    159c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			while (!(AONWUCPowerStatusGet () &
    15a0:	02050033 	andeq	r0, r5, #51	; 0x33
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15a4:	00000efc 	strdeq	r0, [r0], -ip
    15a8:	0105d303 	tsteq	r5, r3, lsl #6
    15ac:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15b0:	03063305 	movweq	r3, #25349	; 0x6305
    15b4:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
    15b8:	03330527 	teqeq	r3, #163577856	; 0x9c00000
    15bc:	02053c79 	andeq	r3, r5, #30976	; 0x7900
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15c0:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
    15c4:	03050502 	movweq	r0, #21762	; 0x5502
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    15c8:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
    15cc:	06020501 	streq	r0, [r2], -r1, lsl #10
			SysCtrlAdjustRechargeAfterPowerDown ();
    15d0:	0104ab03 	tsteq	r4, r3, lsl #22
			reinit_uart ();
    15d4:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
    15d8:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    15dc:	017dd903 	cmneq	sp, r3, lsl #18
}
    15e0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15e4:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    15e8:	03010501 	movweq	r0, #5377	; 0x1501
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15ec:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
    15f0:	03230506 			; <UNDEFINED> instruction: 0x03230506
    15f4:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15f8:	054f0605 	strbeq	r0, [pc, #-1541]	; ffb <ioreq_uart_a+0x73>
    15fc:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
    1600:	06020501 	streq	r0, [r2], -r1, lsl #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1604:	66029e03 	strvs	r9, [r2], -r3, lsl #28
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1608:	01060d05 	tsteq	r6, r5, lsl #26
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    160c:	2f060205 	svccs	0x00060205
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1610:	13060105 	movwne	r0, #24837	; 0x6105
    1614:	01000c02 	tsteq	r0, r2, lsl #24
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1618:	001c0501 	andseq	r0, ip, r1, lsl #10
    161c:	0f500205 	svceq	0x00500205
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1620:	ef030000 	svc	0x00030000
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1624:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1628:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
    162c:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
			PRCMPowerDomainOff (
    1630:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1634:	01062305 	tsteq	r6, r5, lsl #6
	__SLEEP;
    1638:	02050104 	andeq	r0, r5, #4, 2
    163c:	20028803 	andcs	r8, r2, r3, lsl #16
  __ASM volatile ("cpsie i" : : : "memory");
    1640:	23050604 	movwcs	r0, #22020	; 0x5604
	goto Redo;
    1644:	207df803 	rsbscs	pc, sp, r3, lsl #16
    1648:	02050104 	andeq	r0, r5, #4, 2
    164c:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
    1650:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
    1654:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
    1658:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
    165c:	17050517 	smladne	r5, r7, r5, r0
    1660:	01062305 	tsteq	r6, r5, lsl #6
    1664:	02050104 	andeq	r0, r5, #4, 2
    1668:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
    166c:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
    1670:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
    1674:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
    1678:	01062405 	tsteq	r6, r5, lsl #8
    167c:	02050104 	andeq	r0, r5, #4, 2
    1680:	7db20306 	ldcvc	3, cr0, [r2, #24]!
    1684:	000e0258 	andeq	r0, lr, r8, asr r2
    1688:	3d050101 	stfccs	f0, [r5, #-4]
    168c:	88020500 	stmdahi	r2, {r8, sl}
    1690:	0300000f 	movweq	r0, #15
    1694:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
    1698:	3d051402 	cfstrscc	mvf1, [r5, #-8]
    169c:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
    16a0:	0b030605 	bleq	c2ebc <__ccfg+0xa2f14>
    16a4:	060e0582 	streq	r0, [lr], -r2, lsl #11
    16a8:	2f080501 	svccs	0x00080501
    16ac:	051f0e05 	ldreq	r0, [pc, #-3589]	; 8af <root+0x267>
	cli_tim;
    16b0:	052f0605 	streq	r0, [pc, #-1541]!	; 10b3 <UART0IntHandler+0x1b>
    16b4:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
    16b8:	0f052006 	svceq	0x00052006
	diag ("PicOS halted");
    16bc:	0604052e 	streq	r0, [r4], -lr, lsr #10
	mdelay (500);
    16c0:	06070534 			; <UNDEFINED> instruction: 0x06070534
    16c4:	06050501 	streq	r0, [r5], -r1, lsl #10
	setpowermode (2);
    16c8:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
	__PCB = NULL;
    16cc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
	release;
    16d0:	20340301 	eorscs	r0, r4, r1, lsl #6
    16d4:	a0030905 	andge	r0, r3, r5, lsl #18
    16d8:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
    16dc:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
int main (void) {
    16e0:	0e052108 	adfeqs	f2, f5, #0.0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16e4:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
    16e8:	0b030604 	bleq	c2f00 <__ccfg+0xa2f58>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16ec:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16f0:	07050106 	streq	r0, [r5, -r6, lsl #2]
	system_init ();
    16f4:	0605052e 	streq	r0, [r5], -lr, lsr #10
	tcv_init ();
    16f8:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16fc:	060b0524 	streq	r0, [fp], -r4, lsr #10
    1700:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1704:	21062d04 	tstcs	r6, r4, lsl #26
    1708:	01060b05 	tsteq	r6, r5, lsl #22
    170c:	03060505 	movweq	r0, #25861	; 0x6505
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1710:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
    1714:	05053006 	streq	r3, [r5, #-6]
	delay (16, 0);
    1718:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
    171c:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
    1720:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
	__pi_release ();
    1724:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
    1728:	07053506 	streq	r3, [r5, -r6, lsl #10]
    172c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1730:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
    1734:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    1738:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
    173c:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
static void killev (__pi_pcb_t *pid) {
    1740:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
	wfun = (aword)(pid->code);
    1744:	03040520 	movweq	r0, #17696	; 0x4520
	for_all_tasks (i) {
    1748:	08052030 	stmdaeq	r5, {r4, r5, sp}
		for (j = 0; j < nevents (i); j++) {
    174c:	03050521 	movweq	r0, #21793	; 0x5521
    1750:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
    1754:	3c110306 	ldccc	3, cr0, [r1], {6}
			    || i->Events [j] . Event == wfun
    1758:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
		for (j = 0; j < nevents (i); j++) {
    175c:	1f04053d 	svcne	0x0004053d
			if (i->Events [j] . Event == (aword)pid
    1760:	0b052f06 	bleq	14d380 <__ccfg+0x12d3d8>
    1764:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1768:	07052506 	streq	r2, [r5, -r6, lsl #10]
				wakeupev (i, j);
    176c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1770:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
	for_all_tasks (i) {
    1774:	08050106 	stmdaeq	r5, {r1, r2, r8}
}
    1778:	0605054a 	streq	r0, [r5], -sl, asr #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    177c:	06040531 			; <UNDEFINED> instruction: 0x06040531
static void qfree (aword *ch) {
    1780:	062e1603 	strteq	r1, [lr], -r3, lsl #12
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
	cc = (aword*)(mpools + MA_NP);
    1788:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	m_setnextp (ch, chunk);
    178c:	052f0605 	streq	r0, [pc, #-1541]!	; 118f <__buttons_setirq+0x37>
	m_setnextp (cc, ch);
    1790:	7f880302 	svcvc	0x00880302
}
    1794:	06100501 	ldreq	r0, [r0], -r1, lsl #10
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1798:	030c0501 	movweq	r0, #50433	; 0xc501
    179c:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
    17a0:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
			m_setnextp (cc, m_nextp (chunk));
    17a4:	0c052f06 	stceq	15, cr2, [r5], {6}
			m_size (chunk) += m_hdrlen + m_size (ch);
    17a8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    17ac:	20110306 	andscs	r0, r1, r6, lsl #6
    17b0:	01001202 	tsteq	r0, r2, lsl #4
    17b4:	002b0501 	eoreq	r0, fp, r1, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b8:	00000205 	andeq	r0, r0, r5, lsl #4
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17bc:	ea030000 	b	c17c4 <__ccfg+0xa181c>
    17c0:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    17c4:	06010514 			; <UNDEFINED> instruction: 0x06010514
			m_setnextp (cc, m_nextp (chunk));
    17c8:	00060213 	andeq	r0, r6, r3, lsl r2
			m_size (ch) += m_hdrlen + m_size (chunk);
    17cc:	19050101 	stmdbne	r5, {r0, r8}
    17d0:	98020500 	stmdals	r2, {r8, sl}
    17d4:	03000010 	movweq	r0, #16
    17d8:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
    17dc:	06041402 	streq	r1, [r4], -r2, lsl #8
    17e0:	12032405 	andne	r2, r3, #83886080	; 0x5000000
			if (m_size (chunk) >= m_size (ch))
    17e4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    17e8:	01062205 	tsteq	r6, r5, lsl #4
    17ec:	19050104 	stmdbne	r5, {r2, r8}
		chunk = m_nextp (chunk))
    17f0:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
    17f4:	03220506 			; <UNDEFINED> instruction: 0x03220506
    17f8:	01042019 	tsteq	r4, r9, lsl r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17fc:	6b030605 	blvs	c3018 <__ccfg+0xa3070>
	diag_wait (a);
    1800:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
	diag_wchar (c, a);
    1804:	20150322 	andscs	r0, r5, r2, lsr #6
    1808:	02050104 	andeq	r0, r5, #4, 2
}
    180c:	206b0306 	rsbcs	r0, fp, r6, lsl #6
    1810:	01060605 	tsteq	r6, r5, lsl #12
	syserror (ESTATE, "state");
    1814:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    1818:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
    181c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1820:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
	for (i = 0; i < MAX_UTIMERS; i++)
    1824:	01010113 	tsteq	r1, r3, lsl r1
void utimer_add (address ut) {
    1828:	0620062e 	strteq	r0, [r0], -lr, lsr #12
    182c:	4a662e66 	bmi	198d1cc <__ccfg+0x196d224>
		if (__pi_utims [i] == NULL)
    1830:	02052e01 	andeq	r2, r5, #1, 28
	for (i = 0; i < MAX_UTIMERS; i++)
    1834:	06060515 			; <UNDEFINED> instruction: 0x06060515
    1838:	20050501 	andcs	r0, r5, r1, lsl #10
		syserror (ERESOURCE, "ut a");
    183c:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
	__pi_utims [i] = ut;
    1840:	03052e18 	movweq	r2, #24088	; 0x5e18
}
    1844:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
    1848:	014b062c 	cmpeq	fp, ip, lsr #12
    184c:	01011358 	tsteq	r1, r8, asr r3
	*t = v;
    1850:	20062e01 	andcs	r2, r6, r1, lsl #28
	TCI_RUN_AUXILIARY_TIMER;
    1854:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
void update_n_wake (word min, Boolean force) {
    1858:	0105014a 	tsteq	r5, sl, asr #2
	if (TCI_UPDATE_DELAY_TICKS (force))
    185c:	0b023206 	bleq	8e07c <__ccfg+0x6e0d4>
    1860:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1864:	02050021 	andeq	r0, r5, #33	; 0x21
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1868:	00001158 	andeq	r1, r0, r8, asr r1
    186c:	0107d903 	tsteq	r7, r3, lsl #18
    1870:	13140205 	tstne	r4, #1342177280	; 0x50000000
    1874:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1878:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
    187c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1880:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
    1884:	03040106 	movweq	r0, #16646	; 0x4106
    1888:	83030305 	movwhi	r0, #13061	; 0x3305
    188c:	01042079 	tsteq	r4, r9, ror r0
    1890:	03060205 	movweq	r0, #25093	; 0x6205
    1894:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
    1898:	0305010e 	movweq	r0, #20750	; 0x510e
		for_all_tasks (i) {
    189c:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
	__pi_mintk = znew + min;
    18a0:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
    18a4:	0104017d 	tsteq	r4, sp, ror r1
			if (!twaiting (i))
    18a8:	d3030805 	movwle	r0, #14341	; 0x3805
    18ac:	04042002 	streq	r2, [r4], #-2
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18b0:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
    18b4:	0104207d 	tsteq	r4, sp, ror r0
    18b8:	d3030805 	movwle	r0, #14341	; 0x3805
    18bc:	03052002 	movweq	r2, #20482	; 0x5002
    18c0:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    18c4:	21060305 	tstcs	r6, r5, lsl #6
    18c8:	29050404 	stmdbcs	r5, {r2, sl}
    18cc:	017da703 	cmneq	sp, r3, lsl #14
    18d0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    18d4:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
    18d8:	01042e2d 	tsteq	r4, sp, lsr #28
    18dc:	03060305 	movweq	r0, #25349	; 0x6305
				wakeuptm (i);
    18e0:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    18e4:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
		for_all_tasks (i) {
    18e8:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
				d = i->Timer - znew;
    18ec:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
    18f0:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
    18f4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		if ((word)(__pi_mintk - znew) < min) 
    18f8:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
    18fc:	58410520 	stmdapl	r1, {r5, r8, sl}^
    1900:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
	__pi_old = znew;
    1904:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
}
    1908:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
	TCI_RUN_DELAY_TIMER;
    190c:	03290504 			; <UNDEFINED> instruction: 0x03290504
}
    1910:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
    1914:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1918:	01040106 	tsteq	r4, r6, lsl #2
    191c:	03060305 	movweq	r0, #25349	; 0x6305
    1920:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
void proceed (word state) {
    1924:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
	prcdstate (__pi_curr, state);
    1928:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
    192c:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
	release;
    1930:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
    1934:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
void __pi_wait (aword event, word state) {
    1938:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	sint j = nevents (__pi_curr);
    193c:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
	if (j >= MAX_EVENTS_PER_TASK)
    1940:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    1944:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1948:	02050021 	andeq	r0, r5, #33	; 0x21
		syserror (ENEVENTS, "sw");
    194c:	0000119c 	muleq	r0, ip, r1
    1950:	0107ec03 	tsteq	r7, r3, lsl #24
	setestate (__pi_curr->Events [j], state, event);
    1954:	13140205 	tstne	r4, #1342177280	; 0x50000000
	incwait (__pi_curr);
    1958:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
	setestate (__pi_curr->Events [j], state, event);
    195c:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
}
    1960:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1964:	90030621 	andls	r0, r3, r1, lsr #12
    1968:	03040107 	movweq	r0, #16647	; 0x4107
void __pi_trigger (aword event) {
    196c:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
	for_all_tasks (i) {
    1970:	01042078 	tsteq	r4, r8, ror r0
		for (j = 0; j < nevents (i); j++) {
    1974:	03060205 	movweq	r0, #25093	; 0x6205
    1978:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
    197c:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
    1980:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
			if (i->Events [j] . Event == event) {
    1984:	9b033305 	blls	ce5a0 <__ccfg+0xae5f8>
    1988:	0104207d 	tsteq	r4, sp, ror r0
    198c:	e6030805 	str	r0, [r3], -r5, lsl #16
				wakeupev (i, j);
    1990:	04042002 	streq	r2, [r4], #-2
    1994:	9a032d05 	bls	ccdb0 <__ccfg+0xace08>
	for_all_tasks (i) {
    1998:	0104207d 	tsteq	r4, sp, ror r0
}
    199c:	e8030305 	stmda	r3, {r0, r2, r8, r9}
aword __pi_join (aword pid, word st) {
    19a0:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
	for_all_tasks (i) {
    19a4:	01060805 	tsteq	r6, r5, lsl #16
    19a8:	051f1e05 	ldreq	r1, [pc, #-3589]	; bab <root+0x563>
	return 0;
    19ac:	03052106 	movweq	r2, #20742	; 0x5106
		if ((aword)i == pid) {
    19b0:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
			__pi_wait (pid, st);
    19b4:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
}
    19b8:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
	for_all_tasks (i) {
    19bc:	06330517 			; <UNDEFINED> instruction: 0x06330517
    19c0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
void delay (word d, word state) {
    19c4:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
	settstate (__pi_curr, state);
    19c8:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
    19cc:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    19d0:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
    19d4:	03050104 	movweq	r0, #20740	; 0x5104
	update_n_wake (d, YES);
    19d8:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
    19dc:	06410520 	strbeq	r0, [r1], -r0, lsr #10
	__pi_curr->Timer = __pi_old + d;
    19e0:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
    19e4:	010e051d 	tsteq	lr, sp, lsl r5
	inctimer (__pi_curr);
    19e8:	01060205 	tsteq	r6, r5, lsl #4
    19ec:	03042606 	movweq	r2, #17926	; 0x4606
    19f0:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
}
    19f4:	01040178 	tsteq	r4, r8, ror r1
    19f8:	03060105 	movweq	r0, #24837	; 0x6105
	if (fun == NULL)
    19fc:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
		return (int) __pi_curr;
    1a00:	01010008 	tsteq	r1, r8
    1a04:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
	for_all_tasks (i)
    1a08:	0011d802 	andseq	sp, r1, r2, lsl #16
}
    1a0c:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
		if (i->code == fun)
    1a10:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
	for_all_tasks (i)
    1a14:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
    1a18:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1a1c:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
int __pi_strlen (const char *s) {
    1a20:	07040107 	streq	r0, [r4, -r7, lsl #2]
	for (i = 0; *(s+i) != '\0'; i++);
    1a24:	bb030505 	bllt	c2e40 <__ccfg+0xa2e98>
}
    1a28:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
	for (i = 0; *(s+i) != '\0'; i++);
    1a2c:	0602052e 	streq	r0, [r2], -lr, lsr #10
	while ((Boolean)(*d++ = *s++));
    1a30:	01013d3d 	tsteq	r1, sp, lsr sp
    1a34:	20063c01 	andcs	r3, r6, r1, lsl #24
    1a38:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
}
    1a3c:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
	while (n-- && (*s != '\0'))
    1a40:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
    1a44:	050f0105 	streq	r0, [pc, #-261]	; 1947 <__pi_wait+0xf>
	*d = '\0';
    1a48:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
	while (n-- && (*s != '\0'))
    1a4c:	02052004 	andeq	r2, r5, #4
    1a50:	01013d06 	tsteq	r1, r6, lsl #26
		*d++ = *s++;
    1a54:	20063c01 	andcs	r3, r6, r1, lsl #24
    1a58:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
	while (n--)
    1a5c:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
    1a60:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
		*dest++ = *src++;
    1a64:	06010501 	streq	r0, [r1], -r1, lsl #10
    1a68:	0107d003 	tsteq	r7, r3
    1a6c:	01000b02 	tsteq	r0, r2, lsl #22
	while (n--)
    1a70:	00150501 	andseq	r0, r5, r1, lsl #10
}
    1a74:	127c0205 	rsbsne	r0, ip, #1342177280	; 0x50000000
		*dest++ = c;
    1a78:	80030000 	andhi	r0, r3, r0
void adddevfunc (devreqfun_t rf, int loc) {
    1a7c:	02050108 	andeq	r0, r5, #8, 2
		syserror (EREQPAR, "addv");
    1a80:	06150514 			; <UNDEFINED> instruction: 0x06150514
		syserror (ERESOURCE, "addv");
    1a84:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
	if (ioreq [loc] != NULL)
    1a88:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
    1a8c:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
		syserror (ERESOURCE, "addv");
    1a90:	a7030505 	strge	r0, [r3, -r5, lsl #10]
	ioreq [loc] = rf;
    1a94:	3105017c 	tstcc	r5, ip, ror r1
}
    1a98:	01040106 	tsteq	r4, r6, lsl #2
    1a9c:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
sint io (word retry, word dev, word operation, char *buf, word len) {
    1aa0:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
    1aa4:	bb033105 	bllt	cdec0 <__ccfg+0xadf18>
    1aa8:	01042002 	tsteq	r4, r2
    1aac:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ab0:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
    1ab4:	9b030505 	blls	c2ed0 <__ccfg+0xa2f28>
    1ab8:	2d052e02 	stccs	14, cr2, [r5, #-8]
		syserror (ENODEVICE, "io");
    1abc:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
    1ac0:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
	if (len == 0)
    1ac4:	03310509 	teqeq	r1, #37748736	; 0x2400000
	ret = (ioreq [dev]) (operation, buf, len);
    1ac8:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
    1acc:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (ret >= 0)
    1ad0:	2003dc03 	andcs	sp, r3, r3, lsl #24
	if (ret == -1) {
    1ad4:	0179e703 	cmneq	r9, r3, lsl #14
    1ad8:	01070514 	tsteq	r7, r4, lsl r5
		if (retry == WNONE)
    1adc:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
		iowait (dev, operation, retry);
    1ae0:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
    1ae4:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
    1ae8:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
			release;
    1aec:	2f060305 	svccs	0x00060305
	if (ret == -2) {
    1af0:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
		if (retry != WNONE) {
    1af4:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
    1af8:	052f0603 	streq	r0, [pc, #-1539]!	; 14fd <__pi_release+0xa5>
			iowait (dev, operation, retry);
    1afc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1b00:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
			(ioreq [dev]) (NONE, buf, len);
    1b04:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1b08:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
    1b0c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
		(ioreq [dev]) (NONE, buf, len);
    1b10:	06380517 			; <UNDEFINED> instruction: 0x06380517
    1b14:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    1b18:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
}
    1b1c:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
	if (retry != WNONE) {
    1b20:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
		delay (-ret - 2, retry);
    1b24:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    1b28:	27032905 	strcs	r2, [r3, -r5, lsl #18]
    1b2c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1b30:	01062d05 	tsteq	r6, r5, lsl #26
		release;
    1b34:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1b38:	3c560306 	mrrccc	3, 0, r0, r6, cr6
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b3c:	29050404 	stmdbcs	r5, {r2, sl}
    1b40:	0100db03 	tsteq	r0, r3, lsl #22
    1b44:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1b48:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1b4c:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
		syserror (ERESOURCE, "mal1");
    1b50:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
    1b54:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b58:	06010602 	streq	r0, [r1], -r2, lsl #12
    1b5c:	2e069a03 	vmlacs.f32	s18, s12, s6
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b60:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b64:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b68:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b6c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1b70:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1b74:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
    1b78:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
    1b7c:	7a9a032d 	bvc	fe682838 <_estack+0xde67d838>
    1b80:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1b84:	e6030602 	str	r0, [r3], -r2, lsl #12
    1b88:	04042005 	streq	r2, [r4], #-5
void __pi_free (aword *ch) {
    1b8c:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b90:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    1b94:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		syserror (EMALLOC, "malg");
    1b98:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1b9c:	e6030602 	str	r0, [r3], -r2, lsl #12
	mcfree [MA_NP] += m_size (ch);
    1ba0:	01012005 	tsteq	r1, r5
		m_size (ch) ^= MALLOC_UMASK;
    1ba4:	01010101 	tsteq	r1, r1, lsl #2
    1ba8:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
	mcfree [MA_NP] += m_size (ch);
    1bac:	29050404 	stmdbcs	r5, {r2, sl}
	QFREE;
    1bb0:	017acb03 	cmneq	sl, r3, lsl #22
	if (mevent [MA_NP] . nwait) {
    1bb4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1bb8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		trigger ((aword)(&(mevent [MA_NP])));
    1bbc:	03020501 	movweq	r0, #9473	; 0x2501
		mevent [MA_NP] . nwait --;
    1bc0:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
}
    1bc4:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1bc8:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
    1bcc:	06020501 	streq	r0, [r2], -r1, lsl #10
    1bd0:	2005b003 	andcs	fp, r5, r3
void kill (aword pid) {
    1bd4:	29050404 	stmdbcs	r5, {r2, sl}
		pid = (aword) __pi_curr;
    1bd8:	017acb03 	cmneq	sl, r3, lsl #22
	j = NULL;
    1bdc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	for_all_tasks (i) {
    1be0:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	syserror (EREQPAR, "kpi");
    1be4:	06020501 	streq	r0, [r2], -r1, lsl #10
    1be8:	2005b003 	andcs	fp, r5, r3
		if ((aword)i == pid) {
    1bec:	01010101 	tsteq	r1, r1, lsl #2
    1bf0:	23050101 	movwcs	r0, #20737	; 0x5101
				__PCB = i->Next;
    1bf4:	01100306 	tsteq	r0, r6, lsl #6
			killev (i);
    1bf8:	70030205 	andvc	r0, r3, r5, lsl #4
			ufree (i);
    1bfc:	01580620 	cmpeq	r8, r0, lsr #12
			if (i == __pi_curr)
    1c00:	010d032e 	tsteq	sp, lr, lsr #6
    1c04:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
				release;
    1c08:	017ecd03 	cmneq	lr, r3, lsl #26
				j->Next = i->Next;
    1c0c:	01062f05 	tsteq	r6, r5, lsl #30
    1c10:	27050104 	strcs	r0, [r5, -r4, lsl #2]
    1c14:	2001ba03 	andcs	fp, r1, r3, lsl #20
}
    1c18:	2f050a04 	svccs	0x00050a04
    1c1c:	207ec603 	rsbscs	ip, lr, r3, lsl #12
    1c20:	02050104 	andeq	r0, r5, #4, 2
	if (size < 8)
    1c24:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
		_size = 2;
    1c28:	06230520 	strteq	r0, [r3], -r0, lsr #10
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c2c:	03020513 	movweq	r0, #9491	; 0x2513
		_size = (((aword)size) + 3) >> 2;
    1c30:	2305200c 	movwcs	r2, #20492	; 0x500c
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c34:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
		_size = (((aword)size) + 3) >> 2;
    1c38:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
		if (mevent [MA_NP] . nfail != 255)
    1c3c:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    1c40:	27052802 	strcs	r2, [r5, -r2, lsl #16]
			mevent [MA_NP] . nfail ++;
    1c44:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
		mnfree [MA_NP] = 0;
    1c48:	3f280602 	svccc	0x00280602
    1c4c:	4a0a0331 	bmi	282918 <__ccfg+0x262970>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c50:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
    1c54:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
			syserror (EMALLOC, "malc");
    1c58:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    1c5c:	017eae03 	cmneq	lr, r3, lsl #28
		if (m_size (chunk) >= _size)
    1c60:	0d050104 	stfeqs	f0, [r5, #-16]
    1c64:	01d40306 	bicseq	r0, r4, r6, lsl #6
		chunk = m_nextp (chunk)) {
    1c68:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
		m_setnextp (cc, m_nextp (chunk));
    1c6c:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c70:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1c74:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
			m_size (chunk) = _size;
    1c78:	0d052001 	stceq	0, cr2, [r5, #-4]
			cc = chunk + _size + m_hdrlen;
    1c7c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1c80:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
			m_size (cc) = waste - m_hdrlen;
    1c84:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
			QFREE;
    1c88:	0605152e 	streq	r1, [r5], -lr, lsr #10
		mevent [MA_NP] . nfail = 0;
    1c8c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		mcfree [MA_NP] -= m_size (chunk);
    1c90:	0603052e 	streq	r0, [r3], -lr, lsr #10
    1c94:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
    1c98:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
    1c9c:	030c0401 	movweq	r0, #50177	; 0xc401
		m_size (chunk) |= MALLOC_UMASK;
    1ca0:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ca4:	0b040106 	bleq	1020c4 <__ccfg+0xe211c>
		m_size (chunk) |= MALLOC_UMASK;
    1ca8:	03060505 	movweq	r0, #25861	; 0x6505
			mnfree [MA_NP] = mcfree [MA_NP];
    1cac:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
}
    1cb0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1cb4:	01044b06 	tsteq	r4, r6, lsl #22
    1cb8:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
    1cbc:	03054a06 	movweq	r4, #23046	; 0x5a06
    1cc0:	13040513 	movwne	r0, #17683	; 0x4513
    1cc4:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
    1cc8:	cb031902 	blgt	c80d8 <__ccfg+0xa8130>
aword __pi_fork (fsmcode func, aword data) {
    1ccc:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1cd0:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
    1cd4:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
    1cd8:	06230517 			; <UNDEFINED> instruction: 0x06230517
		if ((j = __PCB) == NULL)
    1cdc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	i->Next = NULL;
    1ce0:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
	i->data = data;
    1ce4:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
		if ((j = __PCB) == NULL)
    1ce8:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
}
    1cec:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			for (; j->Next != NULL; j = j->Next);
    1cf0:	dd030602 	stcle	6, cr0, [r3, #-8]
    1cf4:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
	return (aword) i;
    1cf8:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    1cfc:	03052d02 	movweq	r2, #23810	; 0x5d02
	if (mevent [MA_NP] . nwait != 255)
    1d00:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
    1d04:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
    1d08:	03051306 	movweq	r1, #21254	; 0x5306
		mevent [MA_NP] . nwait ++;
    1d0c:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
	wait ((aword)(&(mevent [MA_NP])), state);
    1d10:	1f050101 	svcne	0x00050101
    1d14:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
void diag (const char *mess, ...) {
    1d18:	03000014 	movweq	r0, #20
    1d1c:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
    1d20:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
	diag_disable_int (a, is);
    1d24:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    1d28:	2c056615 	stccs	6, cr6, [r5], {21}
    1d2c:	20150520 	andscs	r0, r5, r0, lsr #10
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
	diag_disable_int (a, is);
    1d34:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
	while (*mess != '\0') {
    1d38:	03022301 	movweq	r2, #8961	; 0x2301
	dgout ('\r');
    1d3c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	dgout ('\n');
    1d40:	0205001c 	andeq	r0, r5, #28
    1d44:	00000000 	andeq	r0, r0, r0
    1d48:	010adb03 	tsteq	sl, r3, lsl #22
	diag_wait (a);
    1d4c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
	diag_enable_int (a, is);
    1d50:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1d54:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
}
    1d58:	07052506 	streq	r2, [r5, -r6, lsl #10]
    1d5c:	58060520 	stmdapl	r6, {r5, r8, sl}
    1d60:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
		if (*mess == '%') {
    1d64:	01060605 	tsteq	r6, r5, lsl #12
    1d68:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
			if (*mess == 'l') {
    1d6c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1d70:	06200602 	strteq	r0, [r0], -r2, lsl #12
				mess++;
    1d74:	0601054d 	streq	r0, [r1], -sp, asr #10
				val = va_arg (ap, lword);
    1d78:	00040213 	andeq	r0, r4, r3, lsl r2
				bc = 32;
    1d7c:	31050101 	tstcc	r5, r1, lsl #2
				bc = 16;
    1d80:	58020500 	stmdapl	r2, {r8, sl}
			switch (*mess) {
    1d84:	03000014 	movweq	r0, #20
    1d88:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
    1d8c:	03041402 	movweq	r1, #17410	; 0x4402
				dgout ('%');
    1d90:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
    1d94:	01040177 	tsteq	r4, r7, ror r1
				dgout (*mess);
    1d98:	03063105 	movweq	r3, #24837	; 0x6105
    1d9c:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
			switch (*mess) {
    1da0:	03030503 	movweq	r0, #13571	; 0x3503
					v = __pi_hex_enc_table [
    1da4:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
					i += 4;
    1da8:	03310501 	teqeq	r1, #4194304	; 0x400000
					(val >> (bc - i)) & 0xf];
    1dac:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
    1db0:	03030503 	movweq	r0, #13571	; 0x3503
					dgout (v);
    1db4:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
    1db8:	06020501 	streq	r0, [r2], -r1, lsl #10
				while (i < bc) {
    1dbc:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
			mess++;
    1dc0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
					d /= 10;
    1dc4:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
				if ((val >> (bc - 1)) & 1) {
    1dc8:	01046676 	tsteq	r4, r6, ror r6
    1dcc:	03060205 	movweq	r0, #25093	; 0x6205
					dgout ('-');
    1dd0:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
    1dd4:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
						val |= 0xffff0000;
    1dd8:	19010101 	stmdbne	r1, {r0, r8}
    1ddc:	01044a5b 	tsteq	r4, fp, asr sl
    1de0:	03061a05 	movweq	r1, #27141	; 0x6a05
				d = (bc == 16) ? 10000 : 1000000000;
    1de4:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
    1de8:	0602050d 	streq	r0, [r2], -sp, lsl #10
    1dec:	2076f903 	rsbscs	pc, r6, r3, lsl #18
					v = (word) (val / d);
    1df0:	01010101 	tsteq	r1, r1, lsl #2
					if (v || d == 1) break;
    1df4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    1df8:	01360303 	teqeq	r6, r3, lsl #6
					d /= 10;
    1dfc:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
				d = (bc == 16) ? 10000 : 1000000000;
    1e00:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
					dgout (v + '0');
    1e04:	eb030104 	bl	c221c <__ccfg+0xa2274>
    1e08:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
    1e0c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
					d /= 10;
    1e10:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
					val = val - (v * d);
    1e14:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
					if (d == 0) break;
    1e18:	20150520 	andscs	r0, r5, r0, lsr #10
					v = (word) (val / d);
    1e1c:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
    1e20:	216a0604 	cmncs	sl, r4, lsl #12
				if (bc == 16)
    1e24:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
				d = (bc == 16) ? 10000 : 1000000000;
    1e28:	01778e03 	cmneq	r7, r3, lsl #28
					val &= 0xffff;
    1e2c:	03050304 	movweq	r0, #21252	; 0x5304
					dgout (*s);
    1e30:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
					s++;
    1e34:	0302050d 	movweq	r0, #9485	; 0x250d
				while (*s != '\0') {
    1e38:	20202055 	eorcs	r2, r0, r5, asr r0
    1e3c:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
			dgout (*mess++);
    1e40:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
    1e44:	a6030305 	strge	r0, [r3], -r5, lsl #6
    1e48:	10054a75 	andne	r4, r5, r5, ror sl
    1e4c:	06050106 	streq	r0, [r5], -r6, lsl #2
    1e50:	20230520 	eorcs	r0, r3, r0, lsr #10
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e54:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    1e58:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    1e5c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    1e60:	052f0604 	streq	r0, [pc, #-1540]!	; 1864 <update_n_wake+0xc>
	^ entropy
    1e64:	01041c02 	tsteq	r4, r2, lsl #24
}
    1e68:	8f030405 	svchi	0x00030405
    1e6c:	2a052e09 	bcs	14d698 <__ccfg+0x12d6f0>
    1e70:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1e74:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e78:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
	word cs = size + hblenb;
    1e7c:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e80:	017fb203 	cmneq	pc, r3, lsl #4
    1e84:	01062905 	tsteq	r6, r5, lsl #18
	p -> length = size;
    1e88:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
}
    1e8c:	00d10306 	sbcseq	r0, r1, r6, lsl #6
	if (p->attributes.b.queued) {
    1e90:	02044d66 	andeq	r4, r4, #6528	; 0x1980
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e94:	9f030505 	svcls	0x00030505
    1e98:	01040178 	tsteq	r4, r8, ror r1
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e9c:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
		p->attributes.b.queued = 0;
    1ea0:	1a052007 	bne	149ec4 <__ccfg+0x129f1c>
    1ea4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ea8:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
	deq (p);	// Remove from queue
    1eac:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
}
    1eb0:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
	tfree ((address)p);
    1eb4:	03050502 	movweq	r0, #21762	; 0x5502
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1eb8:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
    1ebc:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
    1ec0:	06040501 	streq	r0, [r4], -r1, lsl #10
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ec4:	2007f103 	andcs	pc, r7, r3, lsl #2
    1ec8:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
	if (q_empty (q))
    1ecc:	0178a003 	cmneq	r8, r3
    1ed0:	31050904 	tstcc	r5, r4, lsl #18
		trigger (q);
    1ed4:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
	if (p->attributes.b.urgent) {
    1ed8:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
		p->u.bqueue.next = q->next;
    1edc:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
		p->u.bqueue.prev = q;
    1ee0:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
		q->next->prev = (qitem_t*) p;
    1ee4:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
	p->attributes.b.queued = 1;
    1ee8:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    1eec:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
}
    1ef0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
		p->u.bqueue.prev = q->prev;
    1ef4:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
		q->prev->next = (qitem_t*) p;
    1ef8:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
		q->prev = (qitem_t*) p;
    1efc:	a0033105 	andge	r3, r3, r5, lsl #2
    1f00:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f04:	06520515 			; <UNDEFINED> instruction: 0x06520515
	deq (p);	// Soft dequeue, timer and hook left intact
    1f08:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	switch (dv) {
    1f0c:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
    1f10:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    1f14:	7a9b0352 	bvc	fe6c2c64 <_estack+0xde6bdc64>
    1f18:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
			p->attributes.b.urgent = 1;
    1f1c:	e0030604 	and	r0, r3, r4, lsl #12
    1f20:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
			verify_ses (p, "dispose ses");
    1f24:	86030505 	strhi	r0, [r3], -r5, lsl #10
    1f28:	01040178 	tsteq	r4, r8, ror r1
    1f2c:	fc030405 	stc2	4, cr0, [r3], {5}
    1f30:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
    1f34:	ea030505 	b	c3350 <__ccfg+0xa33a8>
			verify_phy (p, "dispose phy");
    1f38:	3105017a 	tstcc	r5, sl, ror r1
    1f3c:	29050106 	stmdbcs	r5, {r1, r2, r8}
}
    1f40:	2004b603 	andcs	fp, r4, r3, lsl #12
			enq (oqueues [p->attributes.b.phys], p);
    1f44:	ca033105 	bgt	ce360 <__ccfg+0xae3b8>
			p->attributes.b.urgent = 1;
    1f48:	01042e7b 	tsteq	r4, fp, ror lr
    1f4c:	03060405 	movweq	r0, #25605	; 0x6405
			verify_phy (p, "dispose phy");
    1f50:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
    1f54:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
    1f58:	6a062004 	bvs	189f70 <__ccfg+0x169fc8>
    1f5c:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    1f60:	01799f03 	cmneq	r9, r3, lsl #30
    1f64:	01063f05 	tsteq	r6, r5, lsl #30
			enq (oqueues [p->attributes.b.phys], p);
    1f68:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1f6c:	2006ed03 	andcs	lr, r6, r3, lsl #26
}
    1f70:	3f050904 	svccc	0x00050904
			rlp (p);
    1f74:	20799303 	rsbscs	r9, r9, r3, lsl #6
}
    1f78:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1f7c:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
    1f80:	0309042e 	movweq	r0, #37934	; 0x942e
    1f84:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
    1f88:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    1f8c:	03040501 	movweq	r0, #17665	; 0x4501
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f90:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
	if (b->attributes.b.outgoing) {
    1f94:	03290509 			; <UNDEFINED> instruction: 0x03290509
	b = header (p);
    1f98:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
	if (b->attributes.b.outgoing) {
    1f9c:	06040501 	streq	r0, [r4], -r1, lsl #10
		verify_ses (b, "tcv02");
    1fa0:	4a00f303 	bmi	3ebb4 <__ccfg+0x1ec0c>
    1fa4:	0204404d 	andeq	r4, r4, #77	; 0x4d
    1fa8:	ea030505 	b	c33c4 <__ccfg+0xa341c>
    1fac:	01040177 	tsteq	r4, r7, ror r1
    1fb0:	99030405 	stmdbls	r3, {r0, r2, sl}
		verify_plg (b, tcv_out, "tcv03");
    1fb4:	1a052008 	bne	149fdc <__ccfg+0x12a034>
    1fb8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1fbc:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
    1fc0:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1fc4:	1a052304 	bne	14abdc <__ccfg+0x12ac34>
    1fc8:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    1fcc:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
    1fd0:	017eee03 	cmneq	lr, r3, lsl #28
    1fd4:	01062905 	tsteq	r6, r5, lsl #18
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fd8:	0d050e04 	stceq	14, cr0, [r5, #-16]
}
    1fdc:	2e7bdb03 	vaddcs.f64	d29, d11, d3
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fe0:	29050904 	stmdbcs	r5, {r2, r8, fp}
		rlp (b);
    1fe4:	2004a503 	andcs	sl, r4, r3, lsl #10
}
    1fe8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		rlp (b);
    1fec:	01970306 	orrseq	r0, r7, r6, lsl #6
    1ff0:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
    1ff4:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
    1ff8:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
    1ffc:	01065205 	tsteq	r6, r5, lsl #4
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2000:	1a050104 	bne	142418 <__ccfg+0x122470>
    2004:	068c0306 	streq	r0, [ip], r6, lsl #6
    2008:	110a052e 	tstne	sl, lr, lsr #10
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    200c:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
	va_start (ap, plid);
    2010:	017ac303 	cmneq	sl, r3, lsl #6
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2014:	01060d05 	tsteq	r6, r5, lsl #26
    2018:	0a050104 	beq	142430 <__ccfg+0x122488>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    201c:	2005bd03 	andcs	fp, r5, r3, lsl #26
    2020:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    2024:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2028:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
			syserror (ENODEVICE, "tcv04");
    202c:	110a0521 	tstne	sl, r1, lsr #10
		syserror (EMALLOC, "tcv05");
    2030:	01060b05 	tsteq	r6, r5, lsl #22
	attp.b.outgoing = 1;
    2034:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
    2038:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
    203c:	03050509 	movweq	r0, #21769	; 0x5509
    2040:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2044:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
		if (descriptors [fd] == NULL)
    2048:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
    204c:	03310520 	teqeq	r1, #32, 10	; 0x8000000
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2050:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
		return ERROR;
    2054:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    2058:	2005cb03 	andcs	ip, r5, r3, lsl #22
    205c:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    2060:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
	s->attpattern.b.session = fd;
    2064:	01063f05 	tsteq	r6, r5, lsl #30
    2068:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	descriptors [fd] = s;
    206c:	07920306 	ldreq	r0, [r2, r6, lsl #6]
	q_init (&(s->rqueue));
    2070:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2074:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
    2078:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    207c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    2080:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2084:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
    2088:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    208c:	01040177 	tsteq	r4, r7, ror r1
	descriptors [fd] = s;
    2090:	ba030405 	blt	c30ac <__ccfg+0xa3104>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2094:	09032008 	stmdbeq	r3, {r3, sp}
    2098:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
	if (s == NULL)
    209c:	017db003 	cmneq	sp, r3
		syserror (EMALLOC, "tcv05");
    20a0:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    20a4:	017ed403 	cmneq	lr, r3, lsl #8
    20a8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    20ac:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    20b0:	03010501 	movweq	r0, #5377	; 0x1501
    20b4:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
    20b8:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
    20bc:	055b2002 	ldrbeq	r2, [fp, #-2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20c0:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20c4:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
    20c8:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    20cc:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
	plugins [ord] = pl;
    20d0:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
	return 0;
    20d4:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
		return ERROR;
    20d8:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
}
    20dc:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    20e0:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
	verify_fds (fd, "tcv10");
    20e4:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20e8:	03050502 	movweq	r0, #21762	; 0x5502
	verify_fds (fd, "tcv10");
    20ec:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
    20f0:	03040501 	movweq	r0, #17665	; 0x4501
    20f4:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
	verify_plg (b, tcv_frm, "tcv11");
    20f8:	0305050e 	movweq	r0, #21774	; 0x550e
	b = q_first (rq);
    20fc:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
	if (q_end (b, rq)) {
    2100:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
		if (state != WNONE) {
    2104:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    2108:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
			when (rq, state);
    210c:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
			release;
    2110:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
	deq (b);	// Dequeue the packet ...
    2114:	06040501 	streq	r0, [r4], -r1, lsl #10
    2118:	3c05f703 	stccc	7, cr15, [r5], {3}
	p = ((address)(b + 1));
    211c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
	verify_plg (b, tcv_frm, "tcv11");
    2120:	01778503 	cmneq	r7, r3, lsl #10
    2124:	0d050e04 	stceq	14, cr0, [r5, #-16]
    2128:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
    212c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    2130:	96030639 			; <UNDEFINED> instruction: 0x96030639
    2134:	0a052006 	beq	14a154 <__ccfg+0x12a1ac>
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2138:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    213c:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2140:	060d0501 	streq	r0, [sp], -r1, lsl #10
    2144:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	b->u.pointers.tail =
    2148:	0696030a 	ldreq	r0, [r6], sl, lsl #6
}
    214c:	06040520 	streq	r0, [r4], -r0, lsr #10
		return NULL;
    2150:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
    2154:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
    2158:	06410501 	strbeq	r0, [r1], -r1, lsl #10
    215c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    2160:	08970304 	ldmeq	r7, {r2, r8, r9}
	verify_fds (fd, "tcv16");
    2164:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
								Boolean urg) {
    2168:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
    216c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	verify_fds (fd, "tcv16");
    2170:	97030604 	strls	r0, [r3, -r4, lsl #12]
    2174:	04522008 	ldrbeq	r2, [r2], #-8
    2178:	0302050d 	movweq	r0, #9485	; 0x250d
	verify_pld (s, tcv_frm, "tcv17");
    217c:	4a2075d1 	bmi	81f8c8 <__ccfg+0x7ff920>
    2180:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
    2184:	03030503 	movweq	r0, #13571	; 0x3503
    2188:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
    218c:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    2190:	37021620 	strcc	r1, [r2, -r0, lsr #12]
    2194:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2198:	02050012 	andeq	r0, r5, #18
	ptrs.head = (word) fd;
    219c:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
	ptrs.tail = (word) urg;
    21a0:	0100e103 	tsteq	r0, r3, lsl #2
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21a4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    21a8:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
		if (state != WNONE) {
    21ac:	1f212202 	svcne	0x00212202
    21b0:	4b2f2106 	blmi	bca5d0 <__ccfg+0xbaa628>
}
    21b4:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
			when (eid, state);
    21b8:	06020501 	streq	r0, [r2], -r1, lsl #10
    21bc:	0008022f 	andeq	r0, r8, pc, lsr #4
			release;
    21c0:	3a050101 	bcc	1425cc <__ccfg+0x122624>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21c4:	00020500 	andeq	r0, r2, r0, lsl #10
    21c8:	03000000 	movweq	r0, #0
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    21cc:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
    21d0:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    21d4:	200e063a 	andcs	r0, lr, sl, lsr r6
    21d8:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    21dc:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
    21e0:	06030524 	streq	r0, [r3], -r4, lsr #10
		if (state != WNONE) {
    21e4:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
    21e8:	06040501 	streq	r0, [r4], -r1, lsl #10
			tmwait (state);
    21ec:	06120530 			; <UNDEFINED> instruction: 0x06120530
    21f0:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
	b->attributes = s->attpattern;
    21f4:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
		b->attributes.b.urgent = 1;
    21f8:	01060905 	tsteq	r6, r5, lsl #18
    21fc:	2f050f04 	svccs	0x00050f04
	b->u.pointers.head = ptrs.head;
    2200:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
	b->u.pointers.tail = length;
    2204:	03090501 	movweq	r0, #38145	; 0x9501
	return (address) (b + 1);
    2208:	0305206b 	movweq	r2, #20587	; 0x506b
    220c:	0f042106 	svceq	0x00042106
    2210:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
    2214:	062f0501 	strteq	r0, [pc], -r1, lsl #10
    2218:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    221c:	207a0301 	rsbscs	r0, sl, r1, lsl #6
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2220:	03060405 	movweq	r0, #25605	; 0x6405
    2224:	0f04206f 	svceq	0x0004206f
    2228:	c3030505 	movwgt	r0, #13573	; 0x3505
	verify_fph (phy, "tcv23");
    222c:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
    2230:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    2234:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
    2238:	060b0501 	streq	r0, [fp], -r1, lsl #10
}
    223c:	017fb603 	cmneq	pc, r3, lsl #12
	return (physical [phy]) (opt, arg);
    2240:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
    2244:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
    2248:	062f050e 	strteq	r0, [pc], -lr, lsl #10
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    224c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (opt < 0) {
    2250:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
		if (fd < 0)
    2254:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
		if (opt == PHYSOPT_PLUGINFO) {
    2258:	06053f04 	streq	r3, [r5], -r4, lsl #30
			if (fd >= TCV_MAX_PLUGS)
    225c:	0604052b 	streq	r0, [r4], -fp, lsr #10
			if ((p = plugins [fd]) == NULL)
    2260:	03052f23 	movweq	r2, #24355	; 0x5f23
    2264:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
}
    2268:	03051f09 	movweq	r1, #24329	; 0x5f09
		if (fd >= TCV_MAX_PHYS)
    226c:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
		return physinfo [fd];
    2270:	01010009 	tsteq	r1, r9
    2274:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
	verify_fds (fd, "tcv22");
    2278:	0016e002 	andseq	lr, r6, r2
    227c:	0af10300 	beq	ffc42e84 <_estack+0xdfc3de84>
    2280:	16030501 	strne	r0, [r3], -r1, lsl #10
    2284:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    2288:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
}
    228c:	26250520 	strtcs	r0, [r5], -r0, lsr #10
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2290:	051f0305 	ldreq	r0, [pc, #-773]	; 1f93 <tcv_endp+0x3>
    2294:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
			return 0;
    2298:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    229c:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
    22a0:	0305010f 	movweq	r0, #20751	; 0x510f
    22a4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    22a8:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22ac:	06207903 	strteq	r7, [r0], -r3, lsl #18
    22b0:	5b5b3231 	blpl	16ceb7c <__ccfg+0x16aebd4>
	if (dsp != TCV_DSP_PASS) {
    22b4:	01061c05 	tsteq	r6, r5, lsl #24
		if (ses == NONE)
    22b8:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
			syserror (EREQPAR, "tcv26");
    22bc:	0c052302 	stceq	3, cr2, [r5], {2}
		verify_fds (ses, "tcv27");
    22c0:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    22c4:	03043e23 	movweq	r3, #20003	; 0x4e23
    22c8:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
    22cc:	01040175 	tsteq	r4, r5, ror r1
    22d0:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
		if ((p = apb (size)) != NULL) {
    22d4:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
    22d8:	e4010100 	str	r0, [r1], #-256	; 0xffffff00
		return NULL;
    22dc:	0300000e 	movweq	r0, #14
			p->attributes = descriptors [ses] -> attpattern;
    22e0:	00019400 	andeq	r9, r1, r0, lsl #8
			dispose (p, dsp);
    22e4:	fb010200 	blx	42aee <__ccfg+0x22b46>
			p->attributes = descriptors [ses] -> attpattern;
    22e8:	01000d0e 	tsteq	r0, lr, lsl #26
			p->attributes.b.outgoing = 0;
    22ec:	00010101 	andeq	r0, r1, r1, lsl #2
			dispose (p, dsp);
    22f0:	00010000 	andeq	r0, r1, r0
			return (address)(p + 1);
    22f4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    22f8:	2f656d6f 	svccs	0x00656d6f
	if ((p = apb (size)) != NULL)
    22fc:	70657473 	rsbvc	r7, r5, r3, ror r4
    2300:	2f6e6568 	svccs	0x006e6568
		return (address)(p + 1);
    2304:	6b736544 	blvs	1cdb81c <__ccfg+0x1cbb874>
    2308:	2f706f74 	svccs	0x00706f74
    230c:	4f534c4f 	svcmi	0x00534c4f
    2310:	2f54454e 	svccs	0x0054454e
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2314:	4f434950 	svcmi	0x00434950
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2318:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    231c:	2f534f63 	svccs	0x00534f63
    2320:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
		syserror (EREQPAR, "tcv28");
    2324:	2f006c65 	svccs	0x00006c65
		syserror (EMALLOC, "tcv29");
    2328:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	physical [phy] = ps;
    232c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
	physinfo [phy] = info;
    2330:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    2334:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2338:	706f746b 	rsbvc	r7, pc, fp, ror #8
    233c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2340:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		syserror (EMALLOC, "tcv29");
    2344:	4349502f 	movtmi	r5, #36911	; 0x902f
    2348:	502f534f 	eorpl	r5, pc, pc, asr #6
	q_init (q);
    234c:	534f6369 	movtpl	r6, #62313	; 0xf369
}
    2350:	3143432f 	cmpcc	r3, pc, lsr #6
    2354:	2f585833 	svccs	0x00585833
    2358:	33314343 	teqcc	r1, #201326593	; 0xc000001
    235c:	41575858 	cmpmi	r7, r8, asr r8
    2360:	642f4552 	strtvs	r4, [pc], #-1362	; 2368 <tcvphy_rcv+0x4>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2364:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
	verify_fph (phy, "tcv30");
    2368:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    236c:	73752f00 	cmnvc	r5, #0, 30
    2370:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
	verify_fph (phy, "tcv30");
    2374:	63672f62 	cmnvs	r7, #392	; 0x188
    2378:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    237c:	6f6e2d6d 	svcvs	0x006e2d6d
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2380:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    2384:	2f696261 	svccs	0x00696261
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2388:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    238c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
		if (plugins [plg] == NULL)
    2390:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2394:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2398:	2f656d6f 	svccs	0x00656d6f
}
    239c:	70657473 	rsbvc	r7, r5, r3, ror r4
    23a0:	2f6e6568 	svccs	0x006e6568
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23a4:	6b736544 	blvs	1cdb8bc <__ccfg+0x1cbb914>
    23a8:	2f706f74 	svccs	0x00706f74
    23ac:	4f534c4f 	svcmi	0x00534c4f
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23b0:	2f54454e 	svccs	0x0054454e
    23b4:	4f434950 	svcmi	0x00434950
    23b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    23bc:	2f534f63 	svccs	0x00534f63
    23c0:	33314343 	teqcc	r1, #201326593	; 0xc000001
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23c4:	2f005858 	svccs	0x00005858
	len -= (ap.head + ap.tail);
    23c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    23cc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    23d0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23d4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    23d8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    23dc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23e0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    23e4:	4349502f 	movtmi	r5, #36911	; 0x902f
    23e8:	502f534f 	eorpl	r5, pc, pc, asr #6
	return 1;
    23ec:	534f6369 	movtpl	r6, #62313	; 0xf369
    23f0:	656b0000 	strbvs	r0, [fp, #-0]!
    23f4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    23f8:	0100632e 	tsteq	r0, lr, lsr #6
    23fc:	61750000 	cmnvs	r5, r0
	verify_fph (phy, "tcv32");
    2400:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
    2404:	00000200 	andeq	r0, r0, r0, lsl #4
    2408:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    240c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2410:	00000300 	andeq	r0, r0, r0, lsl #6
    2414:	61647473 	smcvs	18243	; 0x4743
	oq = oqueues [phy];
    2418:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
	b = q_first (oq);
    241c:	00000300 	andeq	r0, r0, r0, lsl #6
	if (q_end (b, oq)) {
    2420:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
	*len = b->length;
    2424:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
	deq (b);	// Dequeue the packet ...
    2428:	616d0000 	cmnvs	sp, r0
}
    242c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
		return NULL;
    2430:	00000400 	andeq	r0, r0, r0, lsl #8
    2434:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    2438:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    243c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
	verify_fph (phy, "tcv33");
    2440:	75620000 	strbvc	r0, [r2, #-0]!
    2444:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    2448:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    244c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2450:	73000004 	movwvc	r0, #4
    2454:	6f697379 	svcvs	0x00697379
	oq = oqueues [phy];
    2458:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
	b = q_first (oq);
    245c:	656b0000 	strbvs	r0, [fp, #-0]!
		return NULL;
    2460:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
	return (address)(b + 1);
    2464:	0100682e 	tsteq	r0, lr, lsr #16
}
    2468:	623c0000 	eorsvs	r0, ip, #0
    246c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    2470:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2474:	00000000 	andeq	r0, r0, r0
	verify_plg (b, tcv_xmt, "tcv34");
    2478:	00260500 	eoreq	r0, r6, r0, lsl #10
	hblock_t *b = header (pkt);
    247c:	17400205 	strbne	r0, [r0, -r5, lsl #4]
	verify_plg (b, tcv_xmt, "tcv34");
    2480:	c3030000 	movwgt	r0, #12288	; 0x3000
    2484:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2488:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
    248c:	03062605 	movweq	r2, #26117	; 0x6605
    2490:	02050178 	andeq	r0, r5, #120, 2
    2494:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2498:	02051f07 	andeq	r1, r5, #7, 30
	dispose (b, plugins [b->attributes.b.plugin] ->
    249c:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
}
    24a0:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
	dispose (b, plugins [b->attributes.b.plugin] ->
    24a4:	13053c0a 	movwne	r3, #23562	; 0x5c0a
    24a8:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
    24ac:	2c060f05 	stccs	15, cr0, [r6], {5}
}
    24b0:	01060305 	tsteq	r6, r5, lsl #6
    while(1)
    24b4:	2f060405 	svccs	0x00060405
{
    24b8:	01061605 	tsteq	r6, r5, lsl #12
    SetupTrimDevice();
    24bc:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    pui32Src = &_etext;
    24c0:	4b310605 	blmi	c43cdc <__ccfg+0xc23d34>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24c4:	7a030205 	bvc	c2ce0 <__ccfg+0xa2d38>
    __asm("    ldr     r0, =_bss\n"
    24c8:	06010501 	streq	r0, [r1], -r1, lsl #10
    24cc:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    24d0:	01010003 	tsteq	r1, r3
    24d4:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    24d8:	00177c02 	andseq	r7, r7, r2, lsl #24
   main();
    24dc:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    FaultISR();
    24e0:	03020501 	movweq	r0, #9473	; 0x2501
        *pui32Dest++ = *pui32Src++;
    24e4:	1314010d 	tstne	r4, #1073741827	; 0x40000003
    24e8:	01060d05 	tsteq	r6, r5, lsl #26
    24ec:	70031f05 	andvc	r1, r3, r5, lsl #30
    24f0:	030d0520 	movweq	r0, #54560	; 0xd520
    24f4:	1f052e10 	svcne	0x00052e10
    24f8:	02052006 	andeq	r2, r5, #6
    24fc:	03060106 	movweq	r0, #24838	; 0x6106
    2500:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
static byte get_byte () {
    2504:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2508:	1f051f05 	svcne	0x00051f05
    250c:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2510:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
    2514:	060f0521 	streq	r0, [pc], -r1, lsr #10
		if (ee_inp)
    2518:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
			b |= 1;
    251c:	0f052306 	svceq	0x00052306
    2520:	01050106 	tsteq	r5, r6, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2524:	06030524 	streq	r0, [r3], -r4, lsr #10
	for (b = 0, i = 0; i < 8; i++) {
    2528:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
}
    252c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    2530:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
    2534:	05213006 	streq	r3, [r1, #-6]!
static void put_byte (byte b) {
    2538:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    253c:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
    2540:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
    2544:	0a050106 	beq	142964 <__ccfg+0x1229bc>
		if (b & 0x80)
    2548:	1f053406 	svcne	0x00053406
    254c:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2550:	06040558 			; <UNDEFINED> instruction: 0x06040558
	for (i = 0; i < 8; i++) {
    2554:	10052f22 	andne	r2, r5, r2, lsr #30
		b <<= 1;
    2558:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	for (i = 0; i < 8; i++) {
    255c:	ac0b0306 	stcge	3, cr0, [fp], {6}
}
    2560:	01060705 	tsteq	r6, r5, lsl #14
    2564:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2568:	13060905 	movwne	r0, #26885	; 0x6905
    256c:	01000702 	tsteq	r0, r2, lsl #14
	put_byte (cmd);
    2570:	001c0501 	andseq	r0, ip, r1, lsl #10
    2574:	17fc0205 	ldrbne	r0, [ip, r5, lsl #4]!
}
    2578:	c6030000 	strgt	r0, [r3], -r0
    257c:	02050108 	andeq	r0, r5, #8, 2
static void wwait (word st, word del) {
    2580:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    2584:	df03060d 	svcle	0x0003060d
    2588:	0104017c 	tsteq	r4, ip, ror r1
	while (dopen && (rdsr () & 1)) {
    258c:	03060f05 	movweq	r0, #28421	; 0x6f05
    2590:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    2594:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
    2598:	da032405 	ble	cb5b4 <__ccfg+0xab60c>
	put_byte (CMD_RDSR);
    259c:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
	r = get_byte ();
    25a0:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    25a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	while (dopen && (rdsr () & 1)) {
    25a8:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
}
    25ac:	052f0620 	streq	r0, [pc, #-1568]!	; 1f94 <tcv_endp+0x4>
		if (st == WNONE)
    25b0:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    25b4:	01010005 	tsteq	r1, r5
			mdelay (1);
    25b8:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    25bc:	00000002 	andeq	r0, r0, r2
			delay (del, st);
    25c0:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    25c4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			release;
    25c8:	06270514 			; <UNDEFINED> instruction: 0x06270514
    25cc:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    25d0:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
static void ready () {
    25d4:	20062402 	andcs	r2, r6, r2, lsl #8
	if (dopen) {
    25d8:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
		wwait (WNONE, 1);
    25dc:	01060605 	tsteq	r6, r5, lsl #12
    25e0:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    25e4:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
	dstat = 0;
    25e8:	01000502 	tsteq	r0, r2, lsl #10
}
    25ec:	001b0501 	andseq	r0, fp, r1, lsl #10
    25f0:	18140205 	ldmdane	r4, {r0, r2, r9}
    25f4:	fa030000 	blx	c25fc <__ccfg+0xa2654>
	udelay (1);
    25f8:	02050100 	andeq	r0, r5, #0, 2
    25fc:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
	udelay (1);
    2600:	2102051f 	tstcs	r2, pc, lsl r5
		dopen = DOPEN_TEMP;
    2604:	01000602 	tsteq	r0, r2, lsl #12
    2608:	001e0501 	andseq	r0, lr, r1, lsl #10
    260c:	18240205 	stmdane	r4!, {r0, r2, r9}
    2610:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
static void cclose () {
    2614:	02050100 	andeq	r0, r5, #0, 2
	if (dopen == DOPEN_TEMP) {
    2618:	0e051416 	cfmvdlreq	mvd5, r1
    261c:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
		wwait (WNONE, 1);
    2620:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    2624:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
	cmd_0 (CMD_DP);
    2628:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    262c:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
		dopen = 0;
    2630:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
}
    2634:	1f052e06 	svcne	0x00052e06
word ee_open () {
    2638:	20051f06 	andcs	r1, r5, r6, lsl #30
	ready ();
    263c:	0e050106 	adfeqs	f0, f5, f6
	dopen = DOPEN_PERM;
    2640:	02052006 	andeq	r2, r5, #6
    2644:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
}
    2648:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
	if (dopen) {
    264c:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
    2650:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
		dopen = DOPEN_TEMP;
    2654:	06022f01 	streq	r2, [r2], -r1, lsl #30
		cclose ();
    2658:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
}
    265c:	02050021 	andeq	r0, r5, #33	; 0x21
int ser_out (word st, const char *m) {
    2660:	00000000 	andeq	r0, r0, r0
	if ((prcs = running (__outserial)) != 0) {
    2664:	01018e03 	tsteq	r1, r3, lsl #28
    2668:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    266c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
		join (prcs, st);
    2670:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
		release;
    2674:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
	if (*m)
    2678:	27060305 	strcs	r0, [r6, -r5, lsl #6]
		prcs = strlen (m) +1;
    267c:	01061205 	tsteq	r6, r5, lsl #4
    2680:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2684:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2688:	06054b03 	streq	r4, [r5], -r3, lsl #22
    268c:	1f050106 	svcne	0x00050106
		umwait (st);
    2690:	20052b06 	andcs	r2, r5, r6, lsl #22
    2694:	0e050106 	adfeqs	f0, f5, f6
		prcs =  m [1] + 3;
    2698:	02052006 	andeq	r2, r5, #6
	if (*m)
    269c:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
		strcpy (buf, m);
    26a0:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    26a4:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
	if (runstrand (__outserial, buf) == 0) {
    26a8:	2f030501 	svccs	0x00030501
    26ac:	01061f05 	tsteq	r6, r5, lsl #30
		ufree (buf);
    26b0:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    26b4:	03052012 	movweq	r2, #20498	; 0x5012
		memcpy (buf, m, prcs);
    26b8:	06052f06 	streq	r2, [r5], -r6, lsl #30
    26bc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    26c0:	0b053206 	bleq	14eee0 <__ccfg+0x12ef38>
}
    26c4:	0601052e 	streq	r0, [r1], -lr, lsr #10
    26c8:	00070213 	andeq	r0, r7, r3, lsl r2
int ser_in (word st, char *buf, int len) {
    26cc:	2a050101 	bcs	142ad8 <__ccfg+0x122b30>
    26d0:	50020500 	andpl	r0, r2, r0, lsl #10
	if (len == 0)
    26d4:	03000018 	movweq	r0, #24
	if (__inpline == NULL) {
    26d8:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
		if ((prcs = running (__inserial)) == 0) {
    26dc:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    26e0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			prcs = runthread (__inserial);
    26e4:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
    26e8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			if (prcs == 0) {
    26ec:	0205002e 	andeq	r0, r5, #46	; 0x2e
				npwait (st);
    26f0:	00001858 	andeq	r1, r0, r8, asr r8
		release;
    26f4:	0101ae03 	tsteq	r1, r3, lsl #28
		join (prcs, st);
    26f8:	02052006 	andeq	r2, r5, #6
    26fc:	200e0306 	andcs	r0, lr, r6, lsl #6
	if (*__inpline == NULL) // bin cmd
    2700:	01100313 	tsteq	r0, r3, lsl r3
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2704:	01060605 	tsteq	r6, r5, lsl #12
	if (prcs >= len)
    2708:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
		prcs = len-1;
    270c:	09030602 	stmdbeq	r3, {r1, r9, sl}
	memcpy (buf, __inpline, prcs);
    2710:	0606052e 	streq	r0, [r6], -lr, lsr #10
    2714:	58050501 	stmdapl	r5, {r0, r8, sl}
    2718:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
	ufree (__inpline);
    271c:	27080603 	strcs	r0, [r8, -r3, lsl #12]
	__inpline = NULL;
    2720:	0302052e 	movweq	r0, #9518	; 0x252e
	if (*buf) // if it's NULL, it's a bin cmd
    2724:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
		buf [prcs] = '\0';
    2728:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
}
    272c:	0604052e 	streq	r0, [r4], -lr, lsr #10
		prcs = strlen (__inpline);
    2730:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
    2734:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
		return 0;
    2738:	04052007 	streq	r2, [r5], #-7
    273c:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
    2740:	07050106 	streq	r0, [r5, -r6, lsl #2]
int ser_outf (word st, const char *m, ...) {
    2744:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    2748:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
	if ((prcs = running (__outserial)) != 0) {
    274c:	0303053e 	movweq	r0, #13630	; 0x353e
    2750:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
		join (prcs, st);
    2754:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    2758:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
		release;
    275c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2760:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    2764:	17030603 	strne	r0, [r3, -r3, lsl #12]
    2768:	06070566 	streq	r0, [r7], -r6, ror #10
		umwait (st);
    276c:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2770:	03060205 	movweq	r0, #25093	; 0x6205
	if (runstrand (__outserial, buf) == 0) {
    2774:	0b053c16 	bleq	1517d4 <__ccfg+0x13182c>
    2778:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    277c:	01054006 	tsteq	r5, r6
		ufree (buf);
    2780:	010d0306 	tsteq	sp, r6, lsl #6
		npwait (st);
    2784:	73030205 	movwvc	r0, #12805	; 0x3205
}
    2788:	0301052e 	movweq	r0, #5422	; 0x152e
    278c:	0a022e0d 	beq	8dfc8 <__ccfg+0x6e020>
    2790:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2794:	0205001b 	andeq	r0, r5, #27
int ser_inf (word st, const char *fmt, ...) {
    2798:	00001924 	andeq	r1, r0, r4, lsr #18
    279c:	0102d203 	tsteq	r2, r3, lsl #4
	if (fmt == NULL)
    27a0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
	if (__inpline == NULL) {
    27a4:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
		if ((prcs = running (__inserial)) == 0) {
    27a8:	4b062202 	blmi	18afb8 <__ccfg+0x16b010>
    27ac:	01000502 	tsteq	r0, r2, lsl #10
			prcs = runthread (__inserial);
    27b0:	002a0501 	eoreq	r0, sl, r1, lsl #10
    27b4:	19380205 	ldmdbne	r8!, {r0, r2, r9}
			if (prcs == 0) {
    27b8:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
				npwait (st);
    27bc:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
		release;
    27c0:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
		join (prcs, st);
    27c4:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    27c8:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
	va_start (ap, fmt);
    27cc:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
	prcs = vscan (__inpline, fmt, ap);
    27d0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    27d4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	ufree (__inpline);
    27d8:	06014c02 	streq	r4, [r1], -r2, lsl #24
	__inpline = NULL;
    27dc:	20061f3d 	andcs	r1, r6, sp, lsr pc
}
    27e0:	01051320 	tsteq	r5, r0, lsr #6
    27e4:	06022106 	streq	r2, [r2], -r6, lsl #2
    27e8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		return 0;
    27ec:	02050021 	andeq	r0, r5, #33	; 0x21
    27f0:	0000196c 	andeq	r1, r0, ip, ror #18
    27f4:	0102e503 	tsteq	r2, r3, lsl #10
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27f8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    27fc:	06210514 			; <UNDEFINED> instruction: 0x06210514
    2800:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
	RF_cmdFs.frequency = 
    2804:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
}
    2808:	21061305 	tstcs	r6, r5, lsl #6
    280c:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
    2810:	0f052013 	svceq	0x00052013
    2814:	03054a06 	movweq	r4, #23046	; 0x5a06
static int option (int opt, address val) {
    2818:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    281c:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    2820:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2824:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
    2828:	01050d02 	tsteq	r5, r2, lsl #26
    282c:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2830:	01000302 	tsteq	r0, r2, lsl #6
    2834:	002d0501 	eoreq	r0, sp, r1, lsl #10
    2838:	00000205 	andeq	r0, r0, r5, lsl #4
    283c:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    2840:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2844:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
    2848:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
			goto RVal;
    284c:	02052001 	andeq	r2, r5, #1
			_BIS (dstate, DSTATE_RXON);
    2850:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    2854:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	int ret = 0;
    2858:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
			p_trigger (drvprcs, qevent);
    285c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2860:	01053c02 	tsteq	r5, r2, lsl #24
    2864:	06030533 			; <UNDEFINED> instruction: 0x06030533
    2868:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    286c:	1f200501 	svcne	0x00200501
    2870:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2874:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2878:	0102641f 	tsteq	r2, pc, lsl r4
    287c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2880:	02050026 	andeq	r0, r5, #38	; 0x26
}
    2884:	000019a0 	andeq	r1, r0, r0, lsr #19
			_BIC (dstate, DSTATE_RXON);
    2888:	01038703 	tsteq	r3, r3, lsl #14
    288c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
			statid = (val == NULL) ? 0 : *val;
    2890:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    2894:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
	int ret = 0;
    2898:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
			ret = (int) statid;
    289c:	03052806 	movweq	r2, #22534	; 0x5806
	if (val != NULL)
    28a0:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
		*val = ret;
    28a4:	01060605 	tsteq	r6, r5, lsl #12
			ret = rbuffl + 2;
    28a8:	30060405 	andcc	r0, r6, r5, lsl #8
    28ac:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
			if (val != NULL) {
    28b0:	06020517 			; <UNDEFINED> instruction: 0x06020517
				memcpy (val, &rxstat,
    28b4:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
    28b8:	01010004 	tsteq	r1, r4
				memset (&rxstat, 0, 
    28bc:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    28c0:	0019c402 	andseq	ip, r9, r2, lsl #8
			if (val == NULL)
    28c4:	03990300 	orrseq	r0, r9, #0, 6
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    28c8:	16020501 	strne	r0, [r2], -r1, lsl #10
    28cc:	0e062105 	adfeqs	f2, f6, f5
				utimer_set (bckf_timer, *val);
    28d0:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    28d4:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
    28d8:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
			for (ret = 0; ret < 8; ret++)
    28dc:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
				if (RF_cmdPropRadioDivSetup.txPower
    28e0:	20130520 	andscs	r0, r3, r0, lsr #10
					== patable [ret])
    28e4:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
				if (RF_cmdPropRadioDivSetup.txPower
    28e8:	59060105 	stmdbpl	r6, {r0, r2, r8}
			for (ret = 0; ret < 8; ret++)
    28ec:	01000502 	tsteq	r0, r2, lsl #10
    28f0:	00140501 	andseq	r0, r4, r1, lsl #10
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28f4:	00000205 	andeq	r0, r0, r5, lsl #4
    28f8:	a7030000 	strge	r0, [r3, -r0]
    28fc:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2900:	06010516 			; <UNDEFINED> instruction: 0x06010516
    2904:	00040267 	andeq	r0, r4, r7, ror #4
			_BIS (dstate, DSTATE_IRST);
    2908:	18050101 	stmdane	r5, {r0, r8}
    290c:	00020500 	andeq	r0, r2, r0, lsl #10
    2910:	03000000 	movweq	r0, #0
			ret = (int) channel;
    2914:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
			goto RVal;
    2918:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
				(*val > 7) ? 7 : *val;
    291c:	200e0618 	andcs	r0, lr, r8, lsl r6
    2920:	06240205 	strteq	r0, [r4], -r5, lsl #4
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2924:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    2928:	06030501 	streq	r0, [r3], -r1, lsl #10
			plugch ();
    292c:	06050521 	streq	r0, [r5], -r1, lsr #10
			_BIS (dstate, DSTATE_IRST);
    2930:	06020501 	streq	r0, [r2], -r1, lsl #10
    2934:	06120535 			; <UNDEFINED> instruction: 0x06120535
			ret = (int) vrate;
    2938:	59010501 	stmdbpl	r1, {r0, r8, sl}
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    293c:	03060305 	movweq	r0, #25349	; 0x6305
    2940:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
    2944:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2948:	0b052e17 	bleq	14e1ac <__ccfg+0x12e204>
    294c:	0008023d 	andeq	r0, r8, sp, lsr r2
    2950:	1d050101 	stfnes	f0, [r5, #-4]
    2954:	00020500 	andeq	r0, r2, r0, lsl #10
    2958:	03000000 	movweq	r0, #0
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    295c:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
    2960:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2964:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
    2968:	03052405 	movweq	r2, #21509	; 0x5405
			syserror (EREQPAR, "cc13 op");
    296c:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2970:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2974:	01053206 	tsteq	r5, r6, lsl #4
    2978:	03051306 	movweq	r1, #21254	; 0x5306
    297c:	06022b06 	streq	r2, [r2], -r6, lsl #22
    2980:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2984:	0205001d 	andeq	r0, r5, #29
    2988:	000019fc 	strdeq	r1, [r0], -ip
    298c:	01049e03 	tsteq	r4, r3, lsl #28
    2990:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2994:	01060505 	tsteq	r6, r5, lsl #10
    2998:	2f060305 	svccs	0x00060305
    299c:	01060a05 	tsteq	r6, r5, lsl #20
    29a0:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    29a4:	0601052e 	streq	r0, [r1], -lr, lsr #10
static void issue_cmd (lword cmd) {
    29a8:	06030525 	streq	r0, [r3], -r5, lsr #10
    29ac:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29b0:	06020501 	streq	r0, [r2], -r1, lsl #10
    29b4:	0006023b 	andeq	r0, r6, fp, lsr r2
    29b8:	1d050101 	stfnes	f0, [r5, #-4]
		if (res != 0x86)
    29bc:	00020500 	andeq	r0, r2, r0, lsl #10
			syserror (EHARDWARE, "hang ic0");
    29c0:	03000000 	movweq	r0, #0
    29c4:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
		if (cnt-- == 0) {
    29c8:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
			diag ("HUP %lx %lx", cmd, res);
    29cc:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    29d0:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
			syserror (EHARDWARE, "hang ic0");
    29d4:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
		udelay (1);
    29d8:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29dc:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
}
    29e0:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
    29e4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    29e8:	06051f02 	streq	r1, [r5], -r2, lsl #30
    29ec:	06040521 	streq	r0, [r4], -r1, lsr #10
static void rx_de () {
    29f0:	06050521 	streq	r0, [r5], -r1, lsr #10
	if ((dstate & DSTATE_RXAC) == 0)
    29f4:	06020501 	streq	r0, [r2], -r1, lsl #10
    29f8:	0004023a 	andeq	r0, r4, sl, lsr r2
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29fc:	21050101 	tstcs	r5, r1, lsl #2
	_BIC (dstate, DSTATE_RXAC);
    2a00:	20020500 	andcs	r0, r2, r0, lsl #10
    2a04:	0300001a 	movweq	r0, #26
}
    2a08:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
    2a0c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2a10:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
static void rf_off () {
    2a14:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
	if ((dstate & DSTATE_RFON) == 0)
    2a18:	02052006 	andeq	r2, r5, #6
    2a1c:	01050106 	tsteq	r5, r6, lsl #2
	IntDisable (INT_RFC_CPE_0);
    2a20:	06220531 			; <UNDEFINED> instruction: 0x06220531
    2a24:	011e051d 	tsteq	lr, sp, lsl r5
    2a28:	01061f05 	tsteq	r6, r5, lsl #30
	RFCAdi3VcoLdoVoltageMode (false);
    2a2c:	01000202 	tsteq	r0, r2, lsl #4
	RFCSynthPowerDown ();
    2a30:	002b0501 	eoreq	r0, fp, r1, lsl #10
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a34:	1a2e0205 	bne	b83250 <__ccfg+0xb632a8>
    2a38:	c1030000 	mrsgt	r0, (UNDEF: 3)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a3c:	02050104 	andeq	r0, r5, #4, 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a40:	20200514 	eorcs	r0, r0, r4, lsl r5
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a44:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a48:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2a4c:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
    2a50:	2f01052e 	svccs	0x0001052e
	_BIC (dstate, DSTATE_RFON);
    2a54:	01000102 	tsteq	r0, r2, lsl #2
    2a58:	00330501 	eorseq	r0, r3, r1, lsl #10
}
    2a5c:	1a3e0205 	bne	f83278 <__ccfg+0xf632d0>
    2a60:	c6030000 	strgt	r0, [r3], -r0
    2a64:	02050104 	andeq	r0, r5, #4, 2
    2a68:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2a6c:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a70:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2a74:	11052f01 	tstne	r5, r1, lsl #30
    2a78:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
		if (cmd->status == tstat)
    2a7c:	2f060305 	svccs	0x00060305
		if (timeout-- == 0) {
    2a80:	01060805 	tsteq	r6, r5, lsl #16
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a84:	01000302 	tsteq	r0, r2, lsl #6
    2a88:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2a8c:	00000205 	andeq	r0, r0, r5, lsl #4
			syserror (EHARDWARE, "rt2");
    2a90:	cd030000 	stcgt	0, cr0, [r3, #-0]
    2a94:	02050104 	andeq	r0, r5, #4, 2
		udelay (1);
    2a98:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
		if (cmd->status == tstat)
    2a9c:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
}
    2aa0:	01010002 	tsteq	r1, r2
    2aa4:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2aa8:	00000002 	andeq	r0, r0, r2
    2aac:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
static void rf_on () {
    2ab0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2ab4:	01000302 	tsteq	r0, r2, lsl #6
	OSCHF_TurnOnXosc();
    2ab8:	00370501 	eorseq	r0, r7, r1, lsl #10
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2abc:	1a5a0205 	bne	16832d8 <__ccfg+0x1663330>
    2ac0:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2ac4:	02050104 	andeq	r0, r5, #4, 2
    2ac8:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2acc:	30060105 	andcc	r0, r6, r5, lsl #2
    2ad0:	1f060305 	svcne	0x00060305
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2ad4:	01060d05 	tsteq	r6, r5, lsl #26
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2ad8:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
	issue_cmd (
    2adc:	01010003 	tsteq	r1, r3
    2ae0:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ae4:	001a6e02 	andseq	r6, sl, r2, lsl #28
    2ae8:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
    2aec:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   pPatchTab[80] = 0;
    2af0:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
   } while (--nIterations);
    2af4:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
   pPatchTab[53] = 2;
    2af8:	051f0603 	ldreq	r0, [pc, #-1539]	; 24fd <zero_loop+0x2d>
    2afc:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
   pPatchTab[55] = 3;
    2b00:	01010003 	tsteq	r1, r3
   pPatchTab[110] = 4;
    2b04:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
   pPatchTab[107] = 5;
    2b08:	001a7c02 	andseq	r7, sl, r2, lsl #24
   pPatchTab[65] = 6;
    2b0c:	04e80300 	strbteq	r0, [r8], #768	; 0x300
    2b10:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   pPatchTab[57] = 1;
    2b14:	10062b05 	andne	r2, r6, r5, lsl #22
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b18:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
   const uint32_t *pS = patchGenfskRfe;
    2b1c:	06210603 	strteq	r0, [r1], -r3, lsl #12
      t2 = *pS++;
    2b20:	06020531 			; <UNDEFINED> instruction: 0x06020531
      t4 = *pS++;
    2b24:	060c052d 	streq	r0, [ip], -sp, lsr #10
      t6 = *pS++;
    2b28:	20050501 	andcs	r0, r5, r1, lsl #10
      t8 = *pS++;
    2b2c:	2f060305 	svccs	0x00060305
      *pD++ = t1;
    2b30:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
      *pD++ = t2;
    2b34:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
      *pD++ = t3;
    2b38:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
      *pD++ = t5;
    2b3c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
      *pD++ = t7;
    2b40:	02050045 	andeq	r0, r5, #69	; 0x45
   } while (--nIterations);
    2b44:	00001aa0 	andeq	r1, r0, r0, lsr #21
    2b48:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
      *pD++ = t8;
    2b4c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
   } while (--nIterations);
    2b50:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b54:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
   *pD++ = t2;
    2b58:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
   *pD++ = t3;
    2b5c:	03054a19 	movweq	r4, #23065	; 0x5a19
   *pD++ = t4;
    2b60:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
   *pD++ = t5;
    2b64:	0605054c 	streq	r0, [r5], -ip, asr #10
    2b68:	06020501 	streq	r0, [r2], -r1, lsl #10
	RFCAdi3VcoLdoVoltageMode (true);
    2b6c:	060f0540 	streq	r0, [pc], -r0, asr #10
    2b70:	06020501 	streq	r0, [r2], -r1, lsl #10
       	RFCRfTrimSet (&rfTrim);
    2b74:	0605054c 	streq	r0, [r5], -ip, asr #10
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b78:	06020501 	streq	r0, [r2], -r1, lsl #10
    2b7c:	06050531 			; <UNDEFINED> instruction: 0x06050531
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b80:	06030501 	streq	r0, [r3], -r1, lsl #10
    2b84:	0606054f 	streq	r0, [r6], -pc, asr #10
	issue_cmd ((lword)&cmd_srt);
    2b88:	06030501 	streq	r0, [r3], -r1, lsl #10
    2b8c:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
	issue_cmd ((lword)&RF_cmdFs);
    2b90:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b94:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    2b98:	01060505 	tsteq	r6, r5, lsl #10
    2b9c:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
	IntEnable (INT_RFC_CPE_0);
    2ba0:	01060605 	tsteq	r6, r5, lsl #12
	_BIC (dstate, DSTATE_IRST);
    2ba4:	4b060405 	blmi	183bc0 <__ccfg+0x163c18>
    2ba8:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2bac:	06030501 	streq	r0, [r3], -r1, lsl #10
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2bb0:	060a0569 	streq	r0, [sl], -r9, ror #10
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bb4:	06030501 	streq	r0, [r3], -r1, lsl #10
	IntEnable (INT_RFC_CPE_0);
    2bb8:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    2bbc:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
}
    2bc0:	20290301 	eorcs	r0, r9, r1, lsl #6
	IntEnable (INT_RFC_CPE_0);
    2bc4:	03060205 	movweq	r0, #25093	; 0x6205
    2bc8:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    2bcc:	03050106 	movweq	r0, #20742	; 0x5106
    2bd0:	02752f06 	rsbseq	r2, r5, #6, 30
    2bd4:	01010005 	tsteq	r1, r5
    2bd8:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    2bdc:	001b3c02 	andseq	r3, fp, r2, lsl #24
    2be0:	05ef0300 	strbeq	r0, [pc, #768]!	; 2ee8 <RFCCPE0IntHandler>
    2be4:	17020501 	strne	r0, [r2, -r1, lsl #10]
    2be8:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
    2bec:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    2bf0:	2068031a 	rsbcs	r0, r8, sl, lsl r3
    2bf4:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    2bf8:	580c0520 	stmdapl	ip, {r5, r8, sl}
    2bfc:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2c00:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c04:	0d055202 	sfmeq	f5, 4, [r5, #-8]
    2c08:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c0c:	17053e06 	strne	r3, [r5, -r6, lsl #28]
    2c10:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    2c14:	2016052b 	andscs	r0, r6, fp, lsr #10
    2c18:	21060205 	tstcs	r6, r5, lsl #4
    2c1c:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
    2c20:	31060205 	tstcc	r6, r5, lsl #4
    2c24:	01061a05 	tsteq	r6, r5, lsl #20
static void rx_int_enable () {
    2c28:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c2c:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    2c30:	01000d02 	tsteq	r0, r2, lsl #26
    2c34:	001c0501 	andseq	r0, ip, r1, lsl #10
    2c38:	1b8c0205 	blne	fe303454 <_estack+0xde2fe454>
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c3c:	fb030000 	blx	c2c46 <__ccfg+0xa2c9e>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c40:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c44:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c48:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
    2c4c:	03050501 	movweq	r0, #21761	; 0x5501
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c50:	0205200c 	andeq	r2, r5, #12
    2c54:	07052506 	streq	r2, [r5, -r6, lsl #10]
    2c58:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c5c:	0603052e 	streq	r0, [r3], -lr, lsr #10
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c60:	11054c2f 	tstne	r5, pc, lsr #24
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c64:	0f051606 	svceq	0x00051606
		if (db->status == DATA_ENTRY_FINISHED) {
    2c68:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c6c:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    2c70:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
			nr++;
    2c74:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c78:	30300602 	eorscc	r0, r0, r2, lsl #12
    2c7c:	01061505 	tsteq	r6, r5, lsl #10
    2c80:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2c84:	2f2f0603 	svccs	0x002f0603
				__dp [pl + 1] = __dp [pl] - 128;
    2c88:	01061a05 	tsteq	r6, r5, lsl #20
				pl = __dp [1] + 2;
    2c8c:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
				__dp [pl + 1] = __dp [pl] - 128;
    2c90:	01010008 	tsteq	r1, r8
    2c94:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
				__dp [pl] = 0;
    2c98:	001bd402 	andseq	sp, fp, r2, lsl #8
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c9c:	03d80300 	bicseq	r0, r8, #0, 6
    2ca0:	16020501 	strne	r0, [r2], -r1, lsl #10
    2ca4:	06170514 			; <UNDEFINED> instruction: 0x06170514
			db->status = DATA_ENTRY_PENDING;
    2ca8:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2cac:	03052605 	movweq	r2, #22021	; 0x5605
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2cb0:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
				diag ("BAD RX");
    2cb4:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2cb8:	06020520 	streq	r0, [r2], -r0, lsr #10
	if (nr) {
    2cbc:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc0:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
}
    2cc4:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc8:	0305200f 	movweq	r2, #20495	; 0x500f
    2ccc:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
    2cd0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
}
    2cd4:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    2cd8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2cdc:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2ce0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2ce4:	3d230604 	stccc	6, cr0, [r3, #-16]!
    2ce8:	060a052f 	streq	r0, [sl], -pc, lsr #10
    2cec:	20070501 	andcs	r0, r7, r1, lsl #10
    2cf0:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    2cf4:	060d052a 	streq	r0, [sp], -sl, lsr #10
thread (cc1350_driver)
    2cf8:	03010501 	movweq	r0, #5377	; 0x1501
    2cfc:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    2d00:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2d04:	0205001c 	andeq	r0, r5, #28
    2d08:	00000000 	andeq	r0, r0, r0
		if (dstate & DSTATE_IRST) {
    2d0c:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    2d10:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2d14:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
			rf_off ();
    2d18:	7703061c 	smladvc	r3, ip, r6, r0
			_BIC (dstate,
    2d1c:	36040501 	strcc	r0, [r4], -r1, lsl #10
    2d20:	051f0605 	ldreq	r0, [pc, #-1541]	; 2723 <ser_in+0x57>
		if (dstate & DSTATE_RXAC) {
    2d24:	1c052209 	sfmne	f2, 4, [r5], {9}
    2d28:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
			if ((dstate & DSTATE_RXON) == 0)
    2d2c:	2010030a 	andscs	r0, r0, sl, lsl #6
				rx_de ();
    2d30:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
		if (paylen == 0) {
    2d34:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2d38:	06020520 	streq	r0, [r2], -r0, lsr #10
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d3c:	11030601 	tstne	r3, r1, lsl #12
    2d40:	06050520 	streq	r0, [r5], -r0, lsr #10
    2d44:	06030501 	streq	r0, [r3], -r1, lsl #10
    2d48:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d4c:	01060605 	tsteq	r6, r5, lsl #12
    2d50:	59060405 	stmdbpl	r6, {r0, r2, sl}
    2d54:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2d58:	06050501 	streq	r0, [r5], -r1, lsl #10
    2d5c:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2d60:	06040501 	streq	r0, [r4], -r1, lsl #10
    2d64:	06070531 			; <UNDEFINED> instruction: 0x06070531
    2d68:	2f090501 	svccs	0x00090501
		} else if (dstate & DSTATE_RXON) {
    2d6c:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
	if (dstate & DSTATE_RFON)
    2d70:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d74:	060d0545 	streq	r0, [sp], -r5, asr #10
		re->status = DATA_ENTRY_PENDING;
    2d78:	03010501 	movweq	r0, #5377	; 0x1501
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d7c:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
	issue_cmd ((lword)&RF_cmdPropRx);
    2d80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	_BIS (dstate, DSTATE_RXAC);
    2d84:	02050020 	andeq	r0, r5, #32
    2d88:	00001c24 	andeq	r1, r0, r4, lsr #24
    2d8c:	0107a203 	tsteq	r7, r3, lsl #4
    2d90:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
	if (dstate & DSTATE_RXAC)
    2d94:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2d98:	06030501 	streq	r0, [r3], -r1, lsl #10
				if (statid != 0xffff)
    2d9c:	06090525 	streq	r0, [r9], -r5, lsr #10
    2da0:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2da4:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
				RF_cmdPropTx.pktLen = (byte) paylen;
    2da8:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
		if (paylen == 0) {
    2dac:	2070031a 	rsbscs	r0, r0, sl, lsl r3
			wait (qevent, DR_LOOP);
    2db0:	10030d05 	andne	r0, r3, r5, lsl #26
    2db4:	2306052e 	movwcs	r0, #25902	; 0x652e
			if (dstate & DSTATE_RXAC) {
    2db8:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    2dbc:	06020520 	streq	r0, [r2], -r0, lsr #10
				rx_int_enable ();
    2dc0:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
			release;
    2dc4:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
			} else if (dstate & DSTATE_RFON) {
    2dc8:	06010602 	streq	r0, [r1], -r2, lsl #12
				delay (offdelay, DR_GOOF);
    2dcc:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2dd0:	01190303 	tsteq	r9, r3, lsl #6
    2dd4:	01061605 	tsteq	r6, r5, lsl #12
		if (bckf_timer) {
    2dd8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
			wait (qevent, DR_LOOP);
    2ddc:	052f0604 	streq	r0, [pc, #-1540]!	; 27e0 <ser_inf+0x48>
    2de0:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2de4:	0d030603 	stceq	6, cr0, [r3, #-12]
			delay (bckf_timer, DR_LOOP);
    2de8:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    2dec:	06020501 	streq	r0, [r2], -r1, lsl #10
			if (dstate & DSTATE_RXAC)
    2df0:	06090540 	streq	r0, [r9], -r0, asr #10
    2df4:	06030501 	streq	r0, [r3], -r1, lsl #10
	if (dstate & DSTATE_RFON)
    2df8:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
    2dfc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
		rx_de ();
    2e00:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
		RF_cmdPropTx . status = 0;
    2e04:	06054c03 	streq	r4, [r5], -r3, lsl #24
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e08:	2e050106 	adfcss	f0, f5, f6
    2e0c:	4a7a0306 	bmi	1e83a2c <__ccfg+0x1e63a84>
    2e10:	13060905 	movwne	r0, #26885	; 0x6905
		issue_cmd ((lword)&cmd_cs);
    2e14:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
		if (dstate & DSTATE_IRST)
    2e18:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
    2e1c:	01060e05 	tsteq	r6, r5, lsl #28
    2e20:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e24:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    2e28:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
			delay (1, DR_XMIT);
    2e2c:	052f0604 	streq	r0, [pc, #-1540]!	; 2830 <option+0x18>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e30:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    2e34:	04052007 	streq	r2, [r5], #-7
    2e38:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e3c:	10050106 	andne	r0, r5, r6, lsl #2
    2e40:	06040520 	streq	r0, [r4], -r0, lsr #10
				RF_cmdPropTx . status = 0;
    2e44:	2e090530 	cfmv64hrcs	mvdx9, r0
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e48:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
				issue_cmd ((lword)&RF_cmdPropTx);
    2e4c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
				proceed (DR_XMIT);
    2e50:	1a053012 	bne	14eea0 <__ccfg+0x12eef8>
    2e54:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
			txtries++;
    2e58:	06150522 	ldreq	r0, [r5], -r2, lsr #10
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e5c:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    2e60:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2e64:	01060e05 	tsteq	r6, r5, lsl #28
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e68:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
		goto DR_LOOP__;
    2e6c:	12052906 	andne	r2, r5, #98304	; 0x18000
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e70:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
		paylen = 0;
    2e74:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e78:	01061305 	tsteq	r6, r5, lsl #6
		txtries = 0;
    2e7c:	31060305 	tstcc	r6, r5, lsl #6
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e80:	03060105 	movweq	r0, #24837	; 0x6105
    2e84:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
    2e88:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2e8c:	0205002c 	andeq	r0, r5, #44	; 0x2c
    2e90:	00001ccc 	andeq	r1, r0, ip, asr #25
		    tcvphy_top (physid) == NULL)
    2e94:	0102ab03 	tsteq	r2, r3, lsl #22
    2e98:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e9c:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
    2ea0:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
			rf_off ();
    2ea4:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
endthread
    2ea8:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
    2eac:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    2eb0:	060a0523 	streq	r0, [sl], -r3, lsr #10
    2eb4:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    2eb8:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    2ebc:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
    2ec0:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    2ec4:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    2ec8:	13140305 	tstne	r4, #335544320	; 0x14000000
    2ecc:	01060605 	tsteq	r6, r5, lsl #12
    2ed0:	21060405 	tstcs	r6, r5, lsl #8
    2ed4:	01060a05 	tsteq	r6, r5, lsl #20
    2ed8:	0f030105 	svceq	0x00030105
    2edc:	060b0520 	streq	r0, [fp], -r0, lsr #10
    2ee0:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    2ee4:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
void RFCCPE0IntHandler (void) {
    2ee8:	2f062004 	svccs	0x00062004
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eec:	01060c05 	tsteq	r6, r5, lsl #24
		_BIS (dstate, DSTATE_IRST);
    2ef0:	03060205 	movweq	r0, #25093	; 0x6205
    2ef4:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    2ef8:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2efc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f00:	02050020 	andeq	r0, r5, #32
    2f04:	00001d00 	andeq	r1, r0, r0, lsl #26
	p_trigger (drvprcs, qevent);
    2f08:	01088103 	tsteq	r8, r3, lsl #2
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f0c:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2f10:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    2f14:	03200501 			; <UNDEFINED> instruction: 0x03200501
    2f18:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
    2f1c:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2f20:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
    2f24:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
    2f28:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    2f2c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2f30:	0004023e 	andeq	r0, r4, lr, lsr r2
	RISE_N_SHINE;
    2f34:	21050101 	tstcs	r5, r1, lsl #2
    2f38:	00020500 	andeq	r0, r2, r0, lsl #10
    2f3c:	03000000 	movweq	r0, #0
}
    2f40:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
    2f44:	01090302 	tsteq	r9, r2, lsl #6
    2f48:	03062105 	movweq	r2, #24837	; 0x6105
    2f4c:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
    2f50:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    2f54:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
void phys_cc1350 (int phy, int mbs) {
    2f58:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	if (rbuffl != 0)
    2f5c:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    2f60:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
		syserror (ETOOMANY, "cc13");
    2f64:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
		syserror (EREQPAR, "cc13 mb");
    2f68:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
	if (mbs == 0)
    2f6c:	09051402 	stmdbeq	r5, {r1, sl, ip}
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f70:	01050106 	tsteq	r5, r6, lsl #2
		syserror (EREQPAR, "cc13 mb");
    2f74:	0006025a 	andeq	r0, r6, sl, asr r2
    2f78:	20050101 	andcs	r0, r5, r1, lsl #2
	i = 0;
    2f7c:	00020500 	andeq	r0, r2, r0, lsl #10
	rbuffl = (byte) mbs;
    2f80:	03000000 	movweq	r0, #0
		db->config.type = 0;	// General (data in structure)
    2f84:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
	rbuffl = (byte) mbs;
    2f88:	01090302 	tsteq	r9, r2, lsl #6
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f8c:	20051413 	andcs	r1, r5, r3, lsl r4
    2f90:	01740306 	cmneq	r4, r6, lsl #6
		if (db == NULL)
    2f94:	0c031d05 	stceq	13, cr1, [r3], {5}
			syserror (EMALLOC, "cc13");
    2f98:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
    2f9c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2fa0:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
		db->status = DATA_ENTRY_PENDING;
    2fa4:	06010602 	streq	r0, [r1], -r2, lsl #12
		if (i)
    2fa8:	06050524 	streq	r0, [r5], -r4, lsr #10
			da->pNextEntry = (byte*) db;
    2fac:	0603052e 	streq	r0, [r3], -lr, lsr #10
		db->length = rbuffl + 2;
    2fb0:	06070521 	streq	r0, [r7], -r1, lsr #10
    2fb4:	06020501 	streq	r0, [r2], -r1, lsl #10
		db->config.type = 0;	// General (data in structure)
    2fb8:	0609054c 	streq	r0, [r9], -ip, asr #10
		db->length = rbuffl + 2;
    2fbc:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
	db->pNextEntry = (byte*) re;
    2fc0:	03060305 	movweq	r0, #25349	; 0x6305
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2fc4:	23052e79 	movwcs	r2, #24185	; 0x5e79
    2fc8:	06052d06 	streq	r2, [r5], -r6, lsl #26
	if (rbuffs == NULL)
    2fcc:	0e054a06 	vmlaeq.f32	s8, s10, s12
	rbuffs->pCurrEntry = (byte*) re;
    2fd0:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
	rbuffs->pLastEntry = NULL;
    2fd4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fd8:	02050023 	andeq	r0, r5, #35	; 0x23
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fdc:	00001d18 	andeq	r1, r0, r8, lsl sp
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fe0:	01098103 	tsteq	r9, r3, lsl #2
    2fe4:	13410205 	movtne	r0, #4613	; 0x1205
    2fe8:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
	rbuffl -= 2;
    2fec:	03062305 	movweq	r2, #25349	; 0x6305
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ff0:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
	rbuffl -= 2;
    2ff4:	1f3c0c03 	svcne	0x003c0c03
	physid = phy;
    2ff8:	01012106 	tsteq	r1, r6, lsl #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ffc:	03060805 	movweq	r0, #26629	; 0x6805
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3000:	02052028 	andeq	r2, r5, #40	; 0x28
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3004:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3008:	2023031c 	eorcs	r0, r3, ip, lsl r3
    300c:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
	utimer_add (&bckf_timer);
    3010:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
	drvprcs = runthread (cc1350_driver);
    3014:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    3018:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    301c:	02052008 	andeq	r2, r5, #8
	if (drvprcs == 0)
    3020:	00c70306 	sbceq	r0, r7, r6, lsl #6
		syserror (ERESOURCE, "cc13");
    3024:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
    3028:	060d0502 	streq	r0, [sp], -r2, lsl #10
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    302c:	017bcf03 	cmneq	fp, r3, lsl #30
    3030:	0f050104 	svceq	0x00050104
    3034:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3038:	01020520 	tsteq	r2, r0, lsr #10
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    303c:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3040:	017bca03 	cmneq	fp, r3, lsl #20
    3044:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3048:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    304c:	03020501 	movweq	r0, #9473	; 0x2501
    3050:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    3054:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    3058:	13060105 	movwne	r0, #24837	; 0x6105
    305c:	03060305 	movweq	r0, #25349	; 0x6305
    3060:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
	plugch ();
    3064:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3068:	134b0604 	movtne	r0, #46596	; 0xb604
    306c:	20060705 	andcs	r0, r6, r5, lsl #14
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3070:	4b060505 	blmi	18448c <__ccfg+0x1644e4>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3074:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    3078:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    307c:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
}
    3080:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    3084:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    3088:	0f060805 	svceq	0x00060805
    308c:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    3090:	31030505 	tstcc	r3, r5, lsl #10
    3094:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
    3098:	4a4e0306 	bmi	1383cb8 <__ccfg+0x1363d10>
    309c:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    30a0:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    30a4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    30a8:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
    30ac:	11060b05 	tstne	r6, r5, lsl #22
    30b0:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    30b4:	0b052f06 	bleq	14ecd4 <__ccfg+0x12ed2c>
    30b8:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
    30bc:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    30c0:	03010608 	movweq	r0, #5640	; 0x1608
    30c4:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    30c8:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    30cc:	06150513 			; <UNDEFINED> instruction: 0x06150513
    30d0:	200e0501 	andcs	r0, lr, r1, lsl #10
    30d4:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    30d8:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 30c8 <phys_cc1350+0x170>
    30dc:	01060905 	tsteq	r6, r5, lsl #18
    30e0:	21060705 	tstcs	r6, r5, lsl #14
    30e4:	01060b05 	tsteq	r6, r5, lsl #22
    30e8:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
    30ec:	01060a05 	tsteq	r6, r5, lsl #20
    30f0:	23060505 	movwcs	r0, #25861	; 0x6505
    30f4:	01061c05 	tsteq	r6, r5, lsl #24
    30f8:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    30fc:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    3100:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3104:	06052e08 	streq	r2, [r5], -r8, lsl #28
    3108:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    310c:	0c050106 	stfeqs	f0, [r5], {6}
    3110:	06060520 	streq	r0, [r6], -r0, lsr #10
    3114:	0608052f 	streq	r0, [r8], -pc, lsr #10
    3118:	060b0501 	streq	r0, [fp], -r1, lsl #10
    311c:	0608052a 	streq	r0, [r8], -sl, lsr #10
    3120:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
    3124:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
    3128:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    312c:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    3130:	051f0805 	ldreq	r0, [pc, #-2053]	; 2933 <option+0x11b>
    3134:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    3138:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    313c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3140:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    3144:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3148:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
    314c:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
    3150:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    3154:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    3158:	06080520 	streq	r0, [r8], -r0, lsr #10
    315c:	06060501 	streq	r0, [r6], -r1, lsl #10
    3160:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    3164:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    3168:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
strand (__outserial, const char*)
    316c:	03060505 	movweq	r0, #25861	; 0x6505
    3170:	0605206e 	streq	r2, [r5], -lr, rrx
    3174:	2f201703 	svccs	0x00201703
    3178:	01060705 	tsteq	r6, r5, lsl #14
endstrand
    317c:	1e060b05 	vmlane.f64	d0, d6, d5
    3180:	01060c05 	tsteq	r6, r5, lsl #24
	ptr = data;
    3184:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    3188:	0c030604 	stceq	6, cr0, [r3], {4}
	if (*ptr)
    318c:	000b023c 	andeq	r0, fp, ip, lsr r2
		len = strlen (ptr);
    3190:	0f050101 	svceq	0x00050101
    3194:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3198:	0300001e 	movweq	r0, #30
    319c:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
    31a0:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
    31a4:	18050106 	stmdane	r5, {r1, r2, r8}
    31a8:	2025052e 	eorcs	r0, r5, lr, lsr #10
	len -= quant;
    31ac:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
    31b0:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    31b4:	0602052e 	streq	r0, [r2], -lr, lsr #10
	if (len == 0) {
    31b8:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
		ufree (data);
    31bc:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
		finish;
    31c0:	bb010100 	bllt	435c8 <__ccfg+0x23620>
    31c4:	0300000c 	movweq	r0, #12
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    31c8:	0001a500 	andeq	sl, r1, r0, lsl #10
    31cc:	fb010200 	blx	439d6 <__ccfg+0x23a2e>
    31d0:	01000d0e 	tsteq	r0, lr, lsl #26
    31d4:	00010101 	andeq	r0, r1, r1, lsl #2
    31d8:	00010000 	andeq	r0, r1, r0
strand (__inserial, address)
    31dc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    31e0:	2f656d6f 	svccs	0x00656d6f
    31e4:	70657473 	rsbvc	r7, r5, r3, ror r4
    31e8:	2f6e6568 	svccs	0x006e6568
    31ec:	6b736544 	blvs	1cdc704 <__ccfg+0x1cbc75c>
	if (__inpline != NULL)
    31f0:	2f706f74 	svccs	0x00706f74
    31f4:	4f534c4f 	svcmi	0x00534c4f
		finish;
    31f8:	2f54454e 	svccs	0x0054454e
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31fc:	4f434950 	svcmi	0x00434950
    3200:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3204:	2f534f63 	svccs	0x00534f63
    3208:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		umwait (IM_INIT);
    320c:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
		release;
    3210:	00497465 	subeq	r7, r9, r5, ror #8
	savedata (data);
    3214:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
	len = MAX_LINE_LENGTH;
    3218:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
	io (IM_READ, __cport, READ, ptr, 1);
    321c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3220:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3224:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3228:	61652d65 	cmnvs	r5, r5, ror #26
	if (ptr == (char*) data) { // new line
    322c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3230:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
		if (*ptr == '\0') { // bin cmd
    3234:	636e692f 	cmnvs	lr, #770048	; 0xbc000
			proceed (IM_BIN);
    3238:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    323c:	6f682f00 	svcvs	0x00682f00
		if (*ptr < 0x20)
    3240:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3244:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
			proceed (IM_READ);
    3248:	442f6e65 	strtmi	r6, [pc], #-3685	; 3250 <__inserial+0x74>
    324c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	if (*ptr == '\n' || *ptr == '\r') {
    3250:	4f2f706f 	svcmi	0x002f706f
    3254:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3258:	502f5445 	eorpl	r5, pc, r5, asr #8
		*ptr = '\0';
    325c:	534f4349 	movtpl	r4, #62281	; 0xf349
		__inpline = (char*)data;
    3260:	6369502f 	cmnvs	r9, #47	; 0x2f
		finish;
    3264:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	if (len) {
    3268:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		ptr++;
    326c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3270:	2f656d6f 	svccs	0x00656d6f
		len--;
    3274:	70657473 	rsbvc	r7, r5, r3, ror r4
	proceed (IM_READ);
    3278:	2f6e6568 	svccs	0x006e6568
	io (IM_BIN, __cport, READ, ptr, 1);
    327c:	6b736544 	blvs	1cdc794 <__ccfg+0x1cbc7ec>
    3280:	2f706f74 	svccs	0x00706f74
    3284:	4f534c4f 	svcmi	0x00534c4f
    3288:	2f54454e 	svccs	0x0054454e
    328c:	4f434950 	svcmi	0x00434950
	len -= 2;
    3290:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	if (len > *ptr + 1) // 1 for 0x04
    3294:	00534f63 	subseq	r4, r3, r3, ror #30
    3298:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 31e4 <__inserial+0x8>
		len = *ptr + 1;
    329c:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    32a0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
	ptr++;
    32a4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32a8:	6f746b73 	svcvs	0x00746b73
    32ac:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    32b0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    32b4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    32b8:	2f534f43 	svccs	0x00534f43
    32bc:	4f636950 	svcmi	0x00636950
	len -= quant;
    32c0:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
		__inpline = (char*)data;
    32c4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
		finish;
    32c8:	63740000 	cmnvs	r4, #0
	ptr += quant;
    32cc:	00632e76 	rsbeq	r2, r3, r6, ror lr
    32d0:	73000001 	movwvc	r0, #1
endstrand
    32d4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    32d8:	00682e74 	rsbeq	r2, r8, r4, ror lr
	proceed (IM_BINL);
    32dc:	73000002 	movwvc	r0, #2
endstrand
    32e0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    32e4:	00682e67 	rsbeq	r2, r8, r7, ror #28
    32e8:	61000002 	tstvs	r0, r2
    32ec:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    32f0:	00030068 	andeq	r0, r3, r8, rrx
    32f4:	63616d00 	cmnvs	r1, #0, 26
		if (res && (d < n))
    32f8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    32fc:	70000003 	andvc	r0, r0, r3
    3300:	5f736e69 	svcpl	0x00736e69
    3304:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
			res [d] = (char) c;
    3308:	00030068 	andeq	r0, r3, r8, rrx
		d++;
    330c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3310:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3314:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3318:	0300682e 	movweq	r6, #2094	; 0x82e
    331c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3320:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
				enci (10000);
    3324:	00040068 	andeq	r0, r4, r8, rrx
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3328:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    332c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
	d = 0;
    3330:	00682e73 	rsbeq	r2, r8, r3, ror lr
		c = *fm++;
    3334:	6b000001 	blvs	3340 <__pi_vfparse+0x28>
		if (c == '\\') {
    3338:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
			if ((c = *fm++) == '\0') {
    333c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3340:	74000005 	strvc	r0, [r0], #-5
				outc ('\\');
    3344:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
			if ((c = *fm++) == '\0') {
    3348:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
				outc ('\\');
    334c:	00000100 	andeq	r0, r0, r0, lsl #2
    3350:	5f766374 	svcpl	0x00766374
			outc (c);
    3354:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    3358:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
			if (c == '\0')
    335c:	00682e61 	rsbeq	r2, r8, r1, ror #28
    3360:	3c000001 	stccc	0, cr0, [r0], {1}
			outc (c);
    3364:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
				outc (val);
    3368:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
				val = (word) va_arg (ap, aword);
    336c:	0000003e 	andeq	r0, r0, lr, lsr r0
		if (c == '%') {
    3370:	31050000 	mrscc	r0, (UNDEF: 5)
    3374:	78020500 	stmdavc	r2, {r8, sl}
			c = *fm++;
    3378:	0300001e 	movweq	r0, #30
			switch (c) {
    337c:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
    3380:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    3384:	03063105 	movweq	r3, #24837	; 0x6105
    3388:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
    338c:	16052607 	strne	r2, [r5], -r7, lsl #12
    3390:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
    3394:	26060205 	strcs	r0, [r6], -r5, lsl #4
    3398:	13061a05 	movwne	r1, #27141	; 0x6a05
				outc ('%');
    339c:	051f0e05 	ldreq	r0, [pc, #-3589]	; 259f <wwait+0x1f>
    33a0:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
				outc (c);
    33a4:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    33a8:	0c030602 	stceq	6, cr0, [r3], {2}
    33ac:	06010520 	streq	r0, [r1], -r0, lsr #10
				if (c == '\0')
    33b0:	00010216 	andeq	r0, r1, r6, lsl r2
				return d;
    33b4:	2e050101 	adfcss	f0, f5, f1
}
    33b8:	8e020500 	cfsh32hi	mvfx0, mvfx2, #0
    33bc:	0300001e 	movweq	r0, #30
			switch (c) {
    33c0:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    33c4:	06051602 	streq	r1, [r5], -r2, lsl #12
    33c8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
				for (i = 12; ; i -= 4) {
    33cc:	06030520 	streq	r0, [r3], -r0, lsr #10
				val = (word) va_arg (ap, aword);
    33d0:	0629052f 	strteq	r0, [r9], -pc, lsr #10
						[ (val >> i) & 0xf ]);
    33d4:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
    33d8:	21060305 	tstcs	r6, r5, lsl #6
    33dc:	01062905 	tsteq	r6, r5, lsl #18
					outc (__pi_hex_enc_table
    33e0:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    33e4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
					if (i == 0)
    33e8:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    33ec:	01024c01 	tsteq	r2, r1, lsl #24
				for (i = 12; ; i -= 4) {
    33f0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				val = (word) va_arg (ap, aword);
    33f4:	0205002e 	andeq	r0, r5, #46	; 0x2e
				if (c == 'd' && (val & 0x8000) != 0) {
    33f8:	00001ea8 	andeq	r1, r0, r8, lsr #29
				val = (word) va_arg (ap, aword);
    33fc:	01028303 	tsteq	r2, r3, lsl #6
				if (c == 'd' && (val & 0x8000) != 0) {
    3400:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3404:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
					outc ('-');
    3408:	2f062402 	svccs	0x00062402
    340c:	01130101 	tsteq	r3, r1, lsl #2
					val = (~val) + 1;
    3410:	01051401 	tsteq	r5, r1, lsl #8
    3414:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
				for (i = 12; ; i -= 4) {
    3418:	0002022d 	andeq	r0, r2, sp, lsr #4
				enci (10000);
    341c:	3a050101 	bcc	143828 <__ccfg+0x123880>
    3420:	b8020500 	stmdalt	r2, {r8, sl}
    3424:	0300001e 	movweq	r0, #30
    3428:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    342c:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    3430:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
    3434:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    3438:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    343c:	20062402 	andcs	r2, r6, r2, lsl #8
    3440:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
    3444:	03050106 	movweq	r0, #20742	; 0x5106
    3448:	02053d06 	andeq	r3, r5, #384	; 0x180
    344c:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3450:	20050501 	andcs	r0, r5, r1, lsl #10
    3454:	30060305 	andcc	r0, r6, r5, lsl #6
    3458:	01061705 	tsteq	r6, r5, lsl #14
    345c:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    3460:	052f0603 	streq	r0, [pc, #-1539]!	; 2e65 <cc1350_driver+0x16d>
				if (c == 'd' || c == 'u') {
    3464:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    3468:	03052011 	movweq	r2, #20497	; 0x5011
					if (c == 'd' &&
    346c:	0b052106 	bleq	14b88c <__ccfg+0x12b8e4>
					val = va_arg (ap, lword);
    3470:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
					fm++;
    3474:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
					if (c == 'd' &&
    3478:	01050106 	tsteq	r5, r6, lsl #2
    347c:	0603054b 	streq	r0, [r3], -fp, asr #10
						outc ('-');
    3480:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3484:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
						val = (~val) + 1;
    3488:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
				enci (10000);
    348c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
					enci (1000000000UL);
    3490:	03052014 	movweq	r2, #20500	; 0x5014
    3494:	11052106 	tstne	r5, r6, lsl #2
    3498:	03050106 	movweq	r0, #20742	; 0x5106
    349c:	0b052106 	bleq	14b8bc <__ccfg+0x12b914>
    34a0:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
    34a4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34a8:	0205003a 	andeq	r0, r5, #58	; 0x3a
    34ac:	00001f04 	andeq	r1, r0, r4, lsl #30
    34b0:	0101df03 	tsteq	r1, r3, lsl #30
    34b4:	02052006 	andeq	r2, r5, #6
    34b8:	20090306 	andcs	r0, r9, r6, lsl #6
    34bc:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
    34c0:	01061b05 	tsteq	r6, r5, lsl #22
    34c4:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    34c8:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    34cc:	0627064a 	strteq	r0, [r7], -sl, asr #12
    34d0:	133c7903 	teqne	ip, #49152	; 0xc000
				} else if (c == 'x') {
    34d4:	03060105 	movweq	r0, #24837	; 0x6105
					for (i = 28; ; i -= 4) {
    34d8:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
					val = va_arg (ap, lword);
    34dc:	062e7503 	strteq	r7, [lr], -r3, lsl #10
							[ (val >> i) & 0xf ]);
    34e0:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
    34e4:	06040501 	streq	r0, [r4], -r1, lsl #10
						outc (__pi_hex_enc_table
    34e8:	2e90014c 	fmlcssm	f0, f0, #4.0
    34ec:	01055b13 	tsteq	r5, r3, lsl fp
    34f0:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
						if (i == 0)
    34f4:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    34f8:	0c023601 	stceq	6, cr3, [r2], {1}
					for (i = 28; ; i -= 4) {
    34fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
					outc ('%');
    3500:	02050031 	andeq	r0, r5, #49	; 0x31
    3504:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    3508:	0102ba03 	tsteq	r2, r3, lsl #20
					outc ('l');
    350c:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
    3510:	03063105 	movweq	r3, #24837	; 0x6105
				val = (word) va_arg (ap, aword);
    3514:	06050178 			; <UNDEFINED> instruction: 0x06050178
				outc (val);
    3518:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    351c:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
				while (*st != '\0') {
    3520:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    3524:	03050106 	movweq	r0, #20742	; 0x5106
    3528:	06012f06 	streq	r2, [r1], -r6, lsl #30
    352c:	064a0666 	strbeq	r0, [sl], -r6, ror #12
					outc (*st);
    3530:	133b0621 	teqne	fp, #34603008	; 0x2100000
    3534:	4a660601 	bmi	1984d40 <__ccfg+0x1964d98>
					st++;
    3538:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
		c = *fm++;
    353c:	03060105 	movweq	r0, #24837	; 0x6105
    3540:	03053c09 	movweq	r3, #23561	; 0x5c09
    3544:	062e7703 	strteq	r7, [lr], -r3, lsl #14
char *vform (char *res, const char *fm, va_list aq) {
    3548:	06010536 			; <UNDEFINED> instruction: 0x06010536
    354c:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
	if (res != NULL) {
    3550:	01000b02 	tsteq	r0, r2, lsl #22
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3554:	004a0501 	subeq	r0, sl, r1, lsl #10
    3558:	20000205 	andcs	r0, r0, r5, lsl #4
    355c:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
}
    3560:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    3564:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
	fml = strlen (fm) + 17;
    3568:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
    356c:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
    3570:	0b030505 	bleq	c498c <__ccfg+0xa49e4>
	if ((res = (char*) umalloc (fml)) == NULL)
    3574:	034a053c 	movteq	r0, #42300	; 0xa53c
    3578:	02052075 	andeq	r2, r5, #117	; 0x75
    357c:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3580:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3584:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
    3588:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    358c:	053c3005 	ldreq	r3, [ip, #-5]!
		ufree (res);
    3590:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
		goto Again;
    3594:	03054b06 	movweq	r4, #23302	; 0x5b06
	if (buf == NULL || fmt == NULL)
    3598:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
int vscan (const char *buf, const char *fmt, va_list ap) {
    359c:	03060205 	movweq	r0, #25093	; 0x6205
	if (buf == NULL || fmt == NULL)
    35a0:	13132e6e 	tstne	r3, #1760	; 0x6e0
    35a4:	06120517 			; <UNDEFINED> instruction: 0x06120517
    35a8:	06020501 	streq	r0, [r2], -r1, lsl #10
		    	    case 'u': scanu (lword); break;
    35ac:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
			while (isspace (*buf)) buf++;
    35b0:	20060a05 	andcs	r0, r6, r5, lsl #20
    35b4:	2f060305 	svccs	0x00060305
	while (*fmt != '\0') {
    35b8:	01061305 	tsteq	r6, r5, lsl #6
		if (*fmt++ != '%')
    35bc:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
		switch (*fmt++) {
    35c0:	051f0622 	ldreq	r0, [pc, #-1570]	; 2fa6 <phys_cc1350+0x4e>
    35c4:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    35c8:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    35cc:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    35d0:	0105330a 	tsteq	r5, sl, lsl #6
    35d4:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
    35d8:	73030602 	movwvc	r0, #13826	; 0x3602
}
    35dc:	061a0566 	ldreq	r0, [sl], -r6, ror #10
		switch (*fmt++) {
    35e0:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    35e4:	2f060205 	svccs	0x00060205
    35e8:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
    35ec:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
			while (isspace (*buf)) buf++;
    35f0:	0114132f 	tsteq	r4, pc, lsr #6
    35f4:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
    35f8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    35fc:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    3600:	13053206 	movwne	r3, #20998	; 0x5206
    3604:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			if (*buf == '\0')
    3608:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
			if (*buf != ',') {
    360c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			sap = va_arg (ap, char*);
    3610:	206d0306 	rsbcs	r0, sp, r6, lsl #6
			nc++;
    3614:	06130515 			; <UNDEFINED> instruction: 0x06130515
			if (*buf != ',') {
    3618:	06020501 	streq	r0, [r2], -r1, lsl #10
				while (!isspace (*buf) && *buf != ',' &&
    361c:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    3620:	06030501 	streq	r0, [r3], -r1, lsl #10
    3624:	0010023d 	andseq	r0, r0, sp, lsr r2
    3628:	3a050101 	bcc	143a34 <__ccfg+0x123a8c>
    362c:	00020500 	andeq	r0, r2, r0, lsl #10
    3630:	03000000 	movweq	r0, #0
    3634:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
			while (isspace (*buf)) buf++;
    3638:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    363c:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    3640:	0205201b 	andeq	r2, r5, #27
    3644:	4a062025 	bmi	18b6e0 <__ccfg+0x16b738>
    3648:	03062706 	movweq	r2, #26374	; 0x6706
			if (*buf == ',') buf++;
    364c:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    3650:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
			*sap = '\0';
    3654:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
			break;
    3658:	06060514 			; <UNDEFINED> instruction: 0x06060514
		    case 'd': scani (word); break;
    365c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3660:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    3664:	13410603 	movtne	r0, #5635	; 0x1603
    3668:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    366c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    3670:	02052008 	andeq	r2, r5, #8
    3674:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    3678:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    367c:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3680:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3684:	0101000b 	tsteq	r1, fp
    3688:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    368c:	0020c002 	eoreq	ip, r0, r2
    3690:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    3694:	16020501 	strne	r0, [r2], -r1, lsl #10
    3698:	01060505 	tsteq	r6, r5, lsl #10
    369c:	052f0f05 	streq	r0, [pc, #-3845]!	; 279f <ser_inf+0x7>
    36a0:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    36a4:	06020521 	streq	r0, [r2], -r1, lsr #10
    36a8:	06100531 			; <UNDEFINED> instruction: 0x06100531
    36ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    36b0:	0609052f 	streq	r0, [r9], -pc, lsr #10
    36b4:	2b0a0501 	blcs	284ac0 <__ccfg+0x264b18>
    36b8:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    36bc:	01010004 	tsteq	r1, r4
    36c0:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    36c4:	0020e402 	eoreq	lr, r0, r2, lsl #8
    36c8:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
		    case 'u': scanu (word); break;
    36cc:	19020501 	stmdbne	r2, {r0, r8, sl}
    36d0:	01141313 	tsteq	r4, r3, lsl r3
    36d4:	03063c05 	movweq	r3, #27653	; 0x6c05
    36d8:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    36dc:	200b0302 	andcs	r0, fp, r2, lsl #6
    36e0:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    36e4:	06201303 	strteq	r1, [r0], -r3, lsl #6
    36e8:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    36ec:	06040513 			; <UNDEFINED> instruction: 0x06040513
    36f0:	06020501 	streq	r0, [r2], -r1, lsl #10
    36f4:	06050521 	streq	r0, [r5], -r1, lsr #10
    36f8:	06030501 	streq	r0, [r3], -r1, lsl #10
    36fc:	06060530 			; <UNDEFINED> instruction: 0x06060530
    3700:	06040501 	streq	r0, [r4], -r1, lsl #10
    3704:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    3708:	01013d33 	tsteq	r1, r3, lsr sp
    370c:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    3710:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
		    case 'x': scanx (word); break;
    3714:	06013006 	streq	r3, [r1], -r6
    3718:	2e064a4a 	vmlscs.f32	s8, s12, s20
    371c:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    3720:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    3724:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    3728:	01052306 	tsteq	r5, r6, lsl #6
    372c:	0a051306 	beq	14834c <__ccfg+0x1283a4>
    3730:	022e7003 	eoreq	r7, lr, #3
    3734:	0101000b 	tsteq	r1, fp
    3738:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    373c:	00000002 	andeq	r0, r0, r2
    3740:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    3744:	16020501 	strne	r0, [r2], -r1, lsl #10
    3748:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    374c:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    3750:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    3754:	20090302 	andcs	r0, r9, r2, lsl #6
    3758:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    375c:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    3760:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3764:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    3768:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    376c:	20050501 	andcs	r0, r5, r1, lsl #10
    3770:	2f060305 	svccs	0x00060305
    3774:	13190205 	tstne	r9, #1342177280	; 0x50000000
    3778:	01061b05 	tsteq	r6, r5, lsl #22
    377c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3780:	0a030603 	beq	c4f94 <__ccfg+0xa4fec>
    3784:	06050520 	streq	r0, [r5], -r0, lsr #10
    3788:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
			switch (*fmt++) {
    378c:	200b030a 	andcs	r0, fp, sl, lsl #6
    3790:	20061a05 	andcs	r1, r6, r5, lsl #20
    3794:	01060305 	tsteq	r6, r5, lsl #6
    3798:	2f060405 	svccs	0x00060405
    379c:	11062c05 	tstne	r6, r5, lsl #24
    37a0:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
		    	    case 'd': scani (lword); break;
    37a4:	051f062a 	ldreq	r0, [pc, #-1578]	; 3182 <__outserial+0x16>
    37a8:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    37ac:	01062105 	tsteq	r6, r5, lsl #2
    37b0:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    37b4:	052f0603 	streq	r0, [pc, #-1539]!	; 31b9 <__outserial+0x4d>
    37b8:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    37bc:	20052006 	andcs	r2, r5, r6
    37c0:	20060520 	andcs	r0, r6, r0, lsr #10
    37c4:	33060205 	movwcc	r0, #25093	; 0x6205
    37c8:	06050513 			; <UNDEFINED> instruction: 0x06050513
    37cc:	06030501 	streq	r0, [r3], -r1, lsl #10
    37d0:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
    37d4:	0a050f06 	beq	1473f4 <__ccfg+0x12744c>
    37d8:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    37dc:	06030520 	streq	r0, [r3], -r0, lsr #10
    37e0:	03010501 	movweq	r0, #5377	; 0x1501
    37e4:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    37e8:	20740306 	rsbscs	r0, r4, r6, lsl #6
    37ec:	01060805 	tsteq	r6, r5, lsl #16
    37f0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    37f4:	052f0605 	streq	r0, [pc, #-1541]!	; 31f7 <__inserial+0x1b>
    37f8:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    37fc:	2a052207 	bcs	14c020 <__ccfg+0x12c078>
		    	    case 'x': scanx (lword); break;
    3800:	0a021e06 	beq	8b020 <__ccfg+0x6b078>
    3804:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3808:	02050038 	andeq	r0, r5, #56	; 0x38
    380c:	00000000 	andeq	r0, r0, r0
    3810:	0105a303 	tsteq	r5, r3, lsl #6
    3814:	13160205 	tstne	r6, #1342177280	; 0x50000000
    3818:	01141313 	tsteq	r4, r3, lsl r3
    381c:	03063805 	movweq	r3, #26629	; 0x6805
    3820:	02052077 	andeq	r2, r5, #119	; 0x77
    3824:	20200903 	eorcs	r0, r0, r3, lsl #18
    3828:	03054a06 	movweq	r4, #23046	; 0x5a06
    382c:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    3830:	03060205 	movweq	r0, #25093	; 0x6205
    3834:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    3838:	01061a05 	tsteq	r6, r5, lsl #20
    383c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3840:	052f0603 	streq	r0, [pc, #-1539]!	; 3245 <__inserial+0x69>
    3844:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    3848:	1b050106 	blne	143c68 <__ccfg+0x123cc0>
    384c:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    3850:	0305206b 	movweq	r2, #20587	; 0x506b
    3854:	7cb30306 	ldcvc	3, cr0, [r3], #24
    3858:	06050520 	streq	r0, [r5], -r0, lsr #10
    385c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3860:	06060521 	streq	r0, [r6], -r1, lsr #10
    3864:	06030501 	streq	r0, [r3], -r1, lsl #10
    3868:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    386c:	01061305 	tsteq	r6, r5, lsl #6
		    	    case 'd': scani (lword); break;
    3870:	20060f05 	andcs	r0, r6, r5, lsl #30
    3874:	13060505 	movwne	r0, #25861	; 0x6505
    3878:	03060905 	movweq	r0, #26885	; 0x6905
    387c:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    3880:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    3884:	0305200c 	movweq	r2, #20492	; 0x500c
    3888:	20052f06 	andcs	r2, r5, r6, lsl #30
		    	    case 'u': scanu (lword); break;
    388c:	06050106 	streq	r0, [r5], -r6, lsl #2
    3890:	20200520 	eorcs	r0, r0, r0, lsr #10
    3894:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3898:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    389c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    38a0:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
    38a4:	0a030601 	beq	c50b0 <__ccfg+0xa5108>
    38a8:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    38ac:	06090521 	streq	r0, [r9], -r1, lsr #10
    38b0:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    38b4:	06020520 	streq	r0, [r2], -r0, lsr #10
    38b8:	03010501 	movweq	r0, #5377	; 0x1501
    38bc:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    38c0:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    38c4:	01061e05 	tsteq	r6, r5, lsl #28
    38c8:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    38cc:	2f300604 	svccs	0x00300604
    38d0:	01060605 	tsteq	r6, r5, lsl #12
		    	    case 'x': scanx (lword); break;
    38d4:	21060405 	tstcs	r6, r5, lsl #8
    38d8:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
			if ((c = *buf++) == '\0')
    38dc:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
    38e0:	0101000a 	tsteq	r1, sl
			sap = va_arg (ap, char*);
    38e4:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
			nc++;
    38e8:	00216402 	eoreq	r6, r1, r2, lsl #8
			break;
    38ec:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
			while (isspace (*buf)) buf++;
    38f0:	13020501 	movwne	r0, #9473	; 0x2501
    38f4:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    38f8:	06160501 	ldreq	r0, [r6], -r1, lsl #10
						*sap++ = *buf++;
    38fc:	20207a03 	eorcs	r7, r0, r3, lsl #20
    3900:	20420205 	subcs	r0, r2, r5, lsl #4
			while (isspace (*buf)) buf++;
    3904:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    3908:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
    390c:	4a580601 	bmi	1605118 <__ccfg+0x15e5170>
		return 0;
    3910:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
    3914:	01060e05 	tsteq	r6, r5, lsl #28
		    case 'x': scanx (word); break;
    3918:	2f060205 	svccs	0x00060205
    391c:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
		    	    case 'x': scanx (lword); break;
    3920:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    3924:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    3928:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    392c:	03052e05 	movweq	r2, #24069	; 0x5e05
    3930:	06052206 	streq	r2, [r5], -r6, lsl #4
    3934:	0a050106 	beq	143d54 <__ccfg+0x123dac>
    3938:	0301054e 	movweq	r0, #5454	; 0x154e
    393c:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
    3940:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    3944:	0117033d 	tsteq	r7, sp, lsr r3
    3948:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    394c:	2e3c012e 	rsfcsep	f0, f4, #0.5
    3950:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    3954:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3958:	0b054a17 	bleq	1561bc <__ccfg+0x136214>
    395c:	58050520 	stmdapl	r5, {r5, r8, sl}
    3960:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    3964:	01060605 	tsteq	r6, r5, lsl #12
    3968:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    396c:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    3970:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    3974:	052f0602 	streq	r0, [pc, #-1538]!	; 337a <__pi_vfparse+0x62>
    3978:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    397c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3980:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3984:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    3988:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    398c:	051f2f15 	ldreq	r2, [pc, #-3861]	; 2a7f <wait_cmd.constprop.0+0xf>
    3990:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    3994:	01060905 	tsteq	r6, r5, lsl #18
    3998:	01000c02 	tsteq	r0, r2, lsl #24
    399c:	00440501 	subeq	r0, r4, r1, lsl #10
    39a0:	00000205 	andeq	r0, r0, r5, lsl #4
    39a4:	87030000 	strhi	r0, [r3, -r0]
    39a8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    39ac:	06440516 			; <UNDEFINED> instruction: 0x06440516
    39b0:	0205200e 	andeq	r2, r5, #14
    39b4:	1a052606 	bne	14d1d4 <__ccfg+0x12d22c>
    39b8:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    39bc:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    39c0:	09030602 	stmdbeq	r3, {r1, r9, sl}
    39c4:	0605054a 	streq	r0, [r5], -sl, asr #10
    39c8:	06030501 	streq	r0, [r3], -r1, lsl #10
    39cc:	1605672f 	strne	r6, [r5], -pc, lsr #14
    39d0:	03050106 	movweq	r0, #20742	; 0x5106
    39d4:	16056706 	strne	r6, [r5], -r6, lsl #14
    39d8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    39dc:	01055b06 	tsteq	r5, r6, lsl #22
    39e0:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    39e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    39e8:	0205004b 	andeq	r0, r5, #75	; 0x4b
    39ec:	00000000 	andeq	r0, r0, r0
    39f0:	01069903 	tsteq	r6, r3, lsl #18
    39f4:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    39f8:	03064b05 	movweq	r4, #27397	; 0x6b05
    39fc:	1a05017a 	bne	143fec <__ccfg+0x124044>
    3a00:	034b0526 	movteq	r0, #46374	; 0xb526
    3a04:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    3a08:	4a090306 	bmi	244628 <__ccfg+0x224680>
    3a0c:	01060505 	tsteq	r6, r5, lsl #10
    3a10:	2f060305 	svccs	0x00060305
    3a14:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3a18:	06030501 	streq	r0, [r3], -r1, lsl #10
    3a1c:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3a20:	06020501 	streq	r0, [r2], -r1, lsl #10
    3a24:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    3a28:	00020213 	andeq	r0, r2, r3, lsl r2
    3a2c:	31050101 	tstcc	r5, r1, lsl #2
    3a30:	00020500 	andeq	r0, r2, r0, lsl #10
    3a34:	03000000 	movweq	r0, #0
    3a38:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    3a3c:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    3a40:	03050106 	movweq	r0, #20742	; 0x5106
    3a44:	01052106 	tsteq	r5, r6, lsl #2
    3a48:	01023d06 	tsteq	r2, r6, lsl #26
    3a4c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3a50:	02050048 	andeq	r0, r5, #72	; 0x48
    3a54:	00002220 	andeq	r2, r0, r0, lsr #4
    3a58:	0106d103 	tsteq	r6, r3, lsl #2
    3a5c:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3a60:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    3a64:	01240602 			; <UNDEFINED> instruction: 0x01240602
    3a68:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    3a6c:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    3a70:	4a4a0620 	bmi	12852f8 <__ccfg+0x1265350>
    3a74:	06010513 			; <UNDEFINED> instruction: 0x06010513
    3a78:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    3a7c:	01000602 	tsteq	r0, r2, lsl #12
    3a80:	00460501 	subeq	r0, r6, r1, lsl #10
    3a84:	224c0205 	subcs	r0, ip, #1342177280	; 0x50000000
    3a88:	b2030000 	andlt	r0, r3, #0
    3a8c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3a90:	06460517 			; <UNDEFINED> instruction: 0x06460517
    3a94:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    3a98:	2f060305 	svccs	0x00060305
    3a9c:	01060605 	tsteq	r6, r5, lsl #12
    3aa0:	30060305 	andcc	r0, r6, r5, lsl #6
    3aa4:	01060605 	tsteq	r6, r5, lsl #12
    3aa8:	2f060405 	svccs	0x00060405
    3aac:	06070513 			; <UNDEFINED> instruction: 0x06070513
    3ab0:	06040501 	streq	r0, [r4], -r1, lsl #10
    3ab4:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    3ab8:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    3abc:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    3ac0:	01060c05 	tsteq	r6, r5, lsl #24
    3ac4:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3ac8:	06030520 	streq	r0, [r3], -r0, lsr #10
    3acc:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3ad0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3ad4:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3ad8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3adc:	014c0602 	cmpeq	ip, r2, lsl #12
    3ae0:	4a062e06 	bmi	18f300 <__ccfg+0x16f358>
    3ae4:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    3ae8:	01050106 	tsteq	r5, r6, lsl #2
    3aec:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    3af0:	71030b05 	tstvc	r3, r5, lsl #22
    3af4:	000b023c 	andeq	r0, fp, ip, lsr r2
    3af8:	3d050101 	stfccs	f0, [r5, #-4]
    3afc:	00020500 	andeq	r0, r2, r0, lsl #10
    3b00:	03000000 	movweq	r0, #0
    3b04:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    3b08:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3b0c:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    3b10:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3b14:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3b18:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    3b1c:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    3b20:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    3b24:	43052e22 	movwmi	r2, #24098	; 0x5e22
    3b28:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    3b2c:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    3b30:	01010005 	tsteq	r1, r5
    3b34:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    3b38:	00000002 	andeq	r0, r0, r2
    3b3c:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    3b40:	16020501 	strne	r0, [r2], -r1, lsl #10
    3b44:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    3b48:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3b4c:	4a4a0620 	bmi	12853d4 <__ccfg+0x126542c>
    3b50:	06220513 			; <UNDEFINED> instruction: 0x06220513
    3b54:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    3b58:	01000502 	tsteq	r0, r2, lsl #10
    3b5c:	00400501 	subeq	r0, r0, r1, lsl #10
    3b60:	00000205 	andeq	r0, r0, r5, lsl #4
    3b64:	ea030000 	b	c3b6c <__ccfg+0xa3bc4>
    3b68:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3b6c:	40051416 	andmi	r1, r5, r6, lsl r4
    3b70:	017a0306 	cmneq	sl, r6, lsl #6
    3b74:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    3b78:	7a034005 	bvc	d3b94 <__ccfg+0xb3bec>
    3b7c:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3b80:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3b84:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    3b88:	01061105 	tsteq	r6, r5, lsl #2
    3b8c:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3b90:	02051d11 	andeq	r1, r5, #1088	; 0x440
    3b94:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    3b98:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3b9c:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3ba0:	01060905 	tsteq	r6, r5, lsl #18
    3ba4:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3ba8:	01010002 	tsteq	r1, r2
    3bac:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3bb0:	00000002 	andeq	r0, r0, r2
    3bb4:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    3bb8:	16020501 	strne	r0, [r2], -r1, lsl #10
    3bbc:	01000302 	tsteq	r0, r2, lsl #6
    3bc0:	00450501 	subeq	r0, r5, r1, lsl #10
    3bc4:	22ac0205 	adccs	r0, ip, #1342177280	; 0x50000000
    3bc8:	85030000 	strhi	r0, [r3, #-0]
    3bcc:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    3bd0:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    3bd4:	017a0306 	cmneq	sl, r6, lsl #6
    3bd8:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    3bdc:	31060305 	tstcc	r6, r5, lsl #6
    3be0:	01060605 	tsteq	r6, r5, lsl #12
    3be4:	2f060405 	svccs	0x00060405
    3be8:	2f060305 	svccs	0x00060305
    3bec:	06012e06 	streq	r2, [r1], -r6, lsl #28
    3bf0:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    3bf4:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    3bf8:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3bfc:	0a052e06 	beq	14f41c <__ccfg+0x12f474>
    3c00:	27010535 	smladxcs	r1, r5, r5, r0
    3c04:	03060405 	movweq	r0, #25605	; 0x6405
    3c08:	20052073 	andcs	r2, r5, r3, ror r0
    3c0c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3c10:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    3c14:	30060405 	andcc	r0, r6, r5, lsl #8
    3c18:	01061d05 	tsteq	r6, r5, lsl #26
    3c1c:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    3c20:	060b052f 	streq	r0, [fp], -pc, lsr #10
    3c24:	06020501 	streq	r0, [r2], -r1, lsl #10
    3c28:	060b0541 	streq	r0, [fp], -r1, asr #10
    3c2c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3c30:	2f060305 	svccs	0x00060305
    3c34:	01060a05 	tsteq	r6, r5, lsl #20
    3c38:	01000902 	tsteq	r0, r2, lsl #18
    3c3c:	00480501 	subeq	r0, r8, r1, lsl #10
    3c40:	23140205 	tstcs	r4, #1342177280	; 0x50000000
    3c44:	86030000 	strhi	r0, [r3], -r0
    3c48:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3c4c:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    3c50:	48050106 	stmdami	r5, {r1, r2, r8}
    3c54:	20207803 	eorcs	r7, r0, r3, lsl #16
    3c58:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    3c5c:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    3c60:	06030520 	streq	r0, [r3], -r0, lsr #10
    3c64:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    3c68:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3c6c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3c70:	052f0602 	streq	r0, [pc, #-1538]!	; 3676 <vscan+0xde>
    3c74:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3c78:	11052221 	tstne	r5, r1, lsr #4
    3c7c:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3c80:	06210530 			; <UNDEFINED> instruction: 0x06210530
    3c84:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    3c88:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3c8c:	01060505 	tsteq	r6, r5, lsl #10
    3c90:	21060305 	tstcs	r6, r5, lsl #6
    3c94:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    3c98:	13060105 	movwne	r0, #24837	; 0x6105
    3c9c:	01000b02 	tsteq	r0, r2, lsl #22
    3ca0:	00440501 	subeq	r0, r4, r1, lsl #10
    3ca4:	23640205 	cmncs	r4, #1342177280	; 0x50000000
    3ca8:	a0030000 	andge	r0, r3, r0
    3cac:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3cb0:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    3cb4:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    3cb8:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    3cbc:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    3cc0:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    3cc4:	03020520 	movweq	r0, #9504	; 0x2520
    3cc8:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    3ccc:	0603054a 	streq	r0, [r3], -sl, asr #10
    3cd0:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3cd4:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    3cd8:	0f054706 	svceq	0x00054706
    3cdc:	06050106 	streq	r0, [r5], -r6, lsl #2
    3ce0:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    3ce4:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    3ce8:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    3cec:	0a050106 	beq	14410c <__ccfg+0x124164>
    3cf0:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    3cf4:	200d0301 	andcs	r0, sp, r1, lsl #6
    3cf8:	03060305 	movweq	r0, #25349	; 0x6305
    3cfc:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    3d00:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    3d04:	06050106 	streq	r0, [r5], -r6, lsl #2
    3d08:	06020574 			; <UNDEFINED> instruction: 0x06020574
    3d0c:	06050542 	streq	r0, [r5], -r2, asr #10
    3d10:	06020501 	streq	r0, [r2], -r1, lsl #10
    3d14:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    3d18:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    3d1c:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    3d20:	02052006 	andeq	r2, r5, #6
    3d24:	0b052306 	bleq	14c944 <__ccfg+0x12c99c>
    3d28:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3d2c:	0602054a 	streq	r0, [r2], -sl, asr #10
    3d30:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    3d34:	0a020106 	beq	84154 <__ccfg+0x641ac>
    3d38:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3d3c:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3d40:	00002400 	andeq	r2, r0, r0, lsl #8
    3d44:	0109d103 	tsteq	r9, r3, lsl #2
    3d48:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3d4c:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    3d50:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3d54:	20280205 	eorcs	r0, r8, r5, lsl #4
    3d58:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    3d5c:	01060505 	tsteq	r6, r5, lsl #10
    3d60:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3d64:	01060405 	tsteq	r6, r5, lsl #8
    3d68:	21060205 	tstcs	r6, r5, lsl #4
    3d6c:	01060505 	tsteq	r6, r5, lsl #10
    3d70:	33060205 	movwcc	r0, #25093	; 0x6205
    3d74:	01060a05 	tsteq	r6, r5, lsl #20
    3d78:	2f060205 	svccs	0x00060205
    3d7c:	1301012f 	movwne	r0, #4399	; 0x112f
    3d80:	01060905 	tsteq	r6, r5, lsl #18
    3d84:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    3d88:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3d8c:	01000902 	tsteq	r0, r2, lsl #18
    3d90:	00340501 	eorseq	r0, r4, r1, lsl #10
    3d94:	24400205 	strbcs	r0, [r0], #-517	; 0xfffffdfb
    3d98:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3d9c:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3da0:	01141316 	tsteq	r4, r6, lsl r3
    3da4:	03063405 	movweq	r3, #25605	; 0x6405
    3da8:	02052079 	andeq	r2, r5, #121	; 0x79
    3dac:	4a062027 	bmi	18be50 <__ccfg+0x16bea8>
    3db0:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    3db4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3db8:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    3dbc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3dc0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    3dc4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3dc8:	0a052306 	beq	14c9e8 <__ccfg+0x12ca40>
    3dcc:	09051006 	stmdbeq	r5, {r1, r2, ip}
    3dd0:	21010530 	tstcs	r1, r0, lsr r5
    3dd4:	01000702 	tsteq	r0, r2, lsl #14
    3dd8:	00350501 	eorseq	r0, r5, r1, lsl #10
    3ddc:	24740205 	ldrbtcs	r0, [r4], #-517	; 0xfffffdfb
    3de0:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    3de4:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3de8:	06350516 			; <UNDEFINED> instruction: 0x06350516
    3dec:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    3df0:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    3df4:	01300602 	teqeq	r0, r2, lsl #12
    3df8:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    3dfc:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    3e00:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    3e04:	06022c02 	streq	r2, [r2], -r2, lsl #24
    3e08:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3e0c:	02050032 	andeq	r0, r5, #50	; 0x32
    3e10:	00000000 	andeq	r0, r0, r0
    3e14:	010a8403 	tsteq	sl, r3, lsl #8
    3e18:	01160205 	tsteq	r6, r5, lsl #4
    3e1c:	1c063205 	sfmne	f3, 4, [r6], {5}
    3e20:	20240205 	eorcs	r0, r4, r5, lsl #4
    3e24:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3e28:	03060a05 	movweq	r0, #27141	; 0x6a05
    3e2c:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    3e30:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    3e34:	06020520 	streq	r0, [r2], -r0, lsr #10
    3e38:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    3e3c:	03051413 	movweq	r1, #21523	; 0x5413
    3e40:	06050513 			; <UNDEFINED> instruction: 0x06050513
    3e44:	06030501 	streq	r0, [r3], -r1, lsl #10
    3e48:	06060521 	streq	r0, [r6], -r1, lsr #10
    3e4c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3e50:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3e54:	01061305 	tsteq	r6, r5, lsl #6
    3e58:	20060f05 	andcs	r0, r6, r5, lsl #30
    3e5c:	13060505 	movwne	r0, #25861	; 0x6505
    3e60:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    3e64:	08022008 	stmdaeq	r2, {r3, sp}
    3e68:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3e6c:	02050028 	andeq	r0, r5, #40	; 0x28
    3e70:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    3e74:	010a8c03 	tsteq	sl, r3, lsl #24
    3e78:	1a030105 	bne	c4294 <__ccfg+0xa42ec>
    3e7c:	00010201 	andeq	r0, r1, r1, lsl #4
    3e80:	01240101 			; <UNDEFINED> instruction: 0x01240101
    3e84:	00030000 	andeq	r0, r3, r0
    3e88:	0000008a 	andeq	r0, r0, sl, lsl #1
    3e8c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3e90:	0101000d 	tsteq	r1, sp
    3e94:	00000101 	andeq	r0, r0, r1, lsl #2
    3e98:	00000100 	andeq	r0, r0, r0, lsl #2
    3e9c:	6f682f01 	svcvs	0x00682f01
    3ea0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    3ea4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    3ea8:	442f6e65 	strtmi	r6, [pc], #-3685	; 3eb0 <TrimAfterColdResetWakeupFromShutDown+0x9c>
    3eac:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3eb0:	4f2f706f 	svcmi	0x002f706f
    3eb4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3eb8:	502f5445 	eorpl	r5, pc, r5, asr #8
    3ebc:	534f4349 	movtpl	r4, #62281	; 0xf349
    3ec0:	6369502f 	cmnvs	r9, #47	; 0x2f
    3ec4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3ec8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3ecc:	752f0058 	strvc	r0, [pc, #-88]!	; 3e7c <TrimAfterColdResetWakeupFromShutDown+0x68>
    3ed0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3d0c <NOROM_RFCRTrim+0x4c>
    3ed4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3ed8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3edc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3ee0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3ee4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3ee8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3eec:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3ef0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3ef4:	00006564 	andeq	r6, r0, r4, ror #10
    3ef8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    3efc:	5f707574 	svcpl	0x00707574
    3f00:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    3f04:	00010063 	andeq	r0, r1, r3, rrx
    3f08:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3f0c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3f10:	00020068 	andeq	r0, r2, r8, rrx
    3f14:	01050000 	mrseq	r0, (UNDEF: 5)
    3f18:	b2020500 	andlt	r0, r2, #0, 10
    3f1c:	03000024 	movweq	r0, #36	; 0x24
    3f20:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    3f24:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3f28:	0102100a 	tsteq	r2, sl
    3f2c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3f30:	02050001 	andeq	r0, r5, #1
    3f34:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
    3f38:	01029603 	tsteq	r2, r3, lsl #12
    3f3c:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3f40:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3f44:	01010001 	tsteq	r1, r1
    3f48:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3f4c:	0024b602 	eoreq	fp, r4, r2, lsl #12
    3f50:	02a80300 	adceq	r0, r8, #0, 6
    3f54:	16050501 	strne	r0, [r5], -r1, lsl #10
    3f58:	100a0514 	andne	r0, sl, r4, lsl r5
    3f5c:	01000102 	tsteq	r0, r2, lsl #2
    3f60:	00010501 	andeq	r0, r1, r1, lsl #10
    3f64:	24b80205 	ldrtcs	r0, [r8], #517	; 0x205
    3f68:	d2030000 	andle	r0, r3, #0
    3f6c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3f70:	01051713 	tsteq	r5, r3, lsl r7
    3f74:	017a0306 	cmneq	sl, r6, lsl #6
    3f78:	06260505 	strteq	r0, [r6], -r5, lsl #10
    3f7c:	0e051333 	mcreq	3, 0, r1, cr5, cr3, {1}
    3f80:	05051f06 	streq	r1, [r5, #-3846]	; 0xfffff0fa
    3f84:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    3f88:	06050520 	streq	r0, [r5], -r0, lsr #10
    3f8c:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    3f90:	900d0304 	andls	r0, sp, r4, lsl #6
    3f94:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    3f98:	052f0601 	streq	r0, [pc, #-1537]!	; 399f <NOROM_AONRTCCurrentCompareValueGet+0x1f>
    3f9c:	67030609 	strvs	r0, [r3, -r9, lsl #12]
    3fa0:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    3fa4:	00100201 	andseq	r0, r0, r1, lsl #4
    3fa8:	01890101 	orreq	r0, r9, r1, lsl #2
    3fac:	00030000 	andeq	r0, r3, r0
    3fb0:	00000183 	andeq	r0, r0, r3, lsl #3
    3fb4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3fb8:	0101000d 	tsteq	r1, sp
    3fbc:	00000101 	andeq	r0, r0, r1, lsl #2
    3fc0:	00000100 	andeq	r0, r0, r0, lsl #2
    3fc4:	73752f01 	cmnvc	r5, #1, 30
    3fc8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3fcc:	63672f62 	cmnvs	r7, #392	; 0x188
    3fd0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3fd4:	6f6e2d6d 	svcvs	0x006e2d6d
    3fd8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3fdc:	2f696261 	svccs	0x00696261
    3fe0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3fe4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3fe8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3fec:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3ff0:	2f656d6f 	svccs	0x00656d6f
    3ff4:	70657473 	rsbvc	r7, r5, r3, ror r4
    3ff8:	2f6e6568 	svccs	0x006e6568
    3ffc:	6b736544 	blvs	1cdd514 <__ccfg+0x1cbd56c>
    4000:	2f706f74 	svccs	0x00706f74
    4004:	4f534c4f 	svcmi	0x00534c4f
    4008:	2f54454e 	svccs	0x0054454e
    400c:	4f434950 	svcmi	0x00434950
    4010:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4014:	2f534f63 	svccs	0x00534f63
    4018:	33314343 	teqcc	r1, #201326593	; 0xc000001
    401c:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    4020:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4024:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    4028:	6e692f45 	cdpvs	15, 6, cr2, cr9, cr5, {2}
    402c:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    4030:	2f656d6f 	svccs	0x00656d6f
    4034:	70657473 	rsbvc	r7, r5, r3, ror r4
    4038:	2f6e6568 	svccs	0x006e6568
    403c:	6b736544 	blvs	1cdd554 <__ccfg+0x1cbd5ac>
    4040:	2f706f74 	svccs	0x00706f74
    4044:	4f534c4f 	svcmi	0x00534c4f
    4048:	2f54454e 	svccs	0x0054454e
    404c:	4f434950 	svcmi	0x00434950
    4050:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4054:	2f534f63 	svccs	0x00534f63
    4058:	33314343 	teqcc	r1, #201326593	; 0xc000001
    405c:	2f005858 	svccs	0x00005858
    4060:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4064:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4068:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    406c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4070:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4074:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4078:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    407c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4080:	502f534f 	eorpl	r5, pc, pc, asr #6
    4084:	534f6369 	movtpl	r6, #62313	; 0xf369
    4088:	6f682f00 	svcvs	0x00682f00
    408c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4090:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4094:	442f6e65 	strtmi	r6, [pc], #-3685	; 409c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>
    4098:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    409c:	4f2f706f 	svcmi	0x002f706f
    40a0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    40a4:	502f5445 	eorpl	r5, pc, r5, asr #8
    40a8:	534f4349 	movtpl	r4, #62281	; 0xf349
    40ac:	6369502f 	cmnvs	r9, #47	; 0x2f
    40b0:	6b2f534f 	blvs	bd8df4 <__ccfg+0xbb8e4c>
    40b4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    40b8:	7300006c 	movwvc	r0, #108	; 0x6c
    40bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    40c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    40c4:	68000001 	stmdavs	r0, {r0}
    40c8:	63635f77 	cmnvs	r3, #476	; 0x1dc
    40cc:	735f6766 	cmpvc	pc, #26738688	; 0x1980000
    40d0:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
    40d4:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    40d8:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    40dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    40e0:	72610000 	rsbvc	r0, r1, #0
    40e4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    40e8:	00000300 	andeq	r0, r0, r0, lsl #6
    40ec:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    40f0:	0300682e 	movweq	r6, #2094	; 0x82e
    40f4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    40f8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    40fc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4100:	00000300 	andeq	r0, r0, r0, lsl #6
    4104:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4108:	5f736e6f 	svcpl	0x00736e6f
    410c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4110:	00030068 	andeq	r0, r3, r8, rrx
    4114:	73797300 	cmnvc	r9, #0, 6
    4118:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    411c:	00000400 	andeq	r0, r0, r0, lsl #8
    4120:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4124:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4128:	00000500 	andeq	r0, r0, r0, lsl #10
    412c:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    4130:	0300632e 	movweq	r6, #814	; 0x32e
    4134:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    4138:	03000002 	movweq	r0, #2
    413c:	0001c500 	andeq	ip, r1, r0, lsl #10
    4140:	fb010200 	blx	4494a <__ccfg+0x249a2>
    4144:	01000d0e 	tsteq	r0, lr, lsl #26
    4148:	00010101 	andeq	r0, r1, r1, lsl #2
    414c:	00010000 	andeq	r0, r1, r0
    4150:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4154:	2f656d6f 	svccs	0x00656d6f
    4158:	70657473 	rsbvc	r7, r5, r3, ror r4
    415c:	2f6e6568 	svccs	0x006e6568
    4160:	6b736544 	blvs	1cdd678 <__ccfg+0x1cbd6d0>
    4164:	2f706f74 	svccs	0x00706f74
    4168:	4f534c4f 	svcmi	0x00534c4f
    416c:	2f54454e 	svccs	0x0054454e
    4170:	4f434950 	svcmi	0x00434950
    4174:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4178:	2f534f63 	svccs	0x00534f63
    417c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4180:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4184:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    4188:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    418c:	2f656d6f 	svccs	0x00656d6f
    4190:	70657473 	rsbvc	r7, r5, r3, ror r4
    4194:	2f6e6568 	svccs	0x006e6568
    4198:	6b736544 	blvs	1cdd6b0 <__ccfg+0x1cbd708>
    419c:	2f706f74 	svccs	0x00706f74
    41a0:	4f534c4f 	svcmi	0x00534c4f
    41a4:	2f54454e 	svccs	0x0054454e
    41a8:	4f434950 	svcmi	0x00434950
    41ac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    41b0:	2f534f63 	svccs	0x00534f63
    41b4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    41b8:	2f005858 	svccs	0x00005858
    41bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    41c0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    41c4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    41c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    41cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    41d0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    41d4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    41d8:	4349502f 	movtmi	r5, #36911	; 0x902f
    41dc:	502f534f 	eorpl	r5, pc, pc, asr #6
    41e0:	534f6369 	movtpl	r6, #62313	; 0xf369
    41e4:	3143432f 	cmpcc	r3, pc, lsr #6
    41e8:	2f585833 	svccs	0x00585833
    41ec:	33314343 	teqcc	r1, #201326593	; 0xc000001
    41f0:	41575858 	cmpmi	r7, r8, asr r8
    41f4:	642f4552 	strtvs	r4, [pc], #-1362	; 41fc <NOROM_SetupGetTrimForXoscHfCtl+0x10>
    41f8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    41fc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4200:	73752f00 	cmnvc	r5, #0, 30
    4204:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4208:	63672f62 	cmnvs	r7, #392	; 0x188
    420c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4210:	6f6e2d6d 	svcvs	0x006e2d6d
    4214:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4218:	2f696261 	svccs	0x00696261
    421c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4220:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4224:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4228:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    422c:	2f656d6f 	svccs	0x00656d6f
    4230:	70657473 	rsbvc	r7, r5, r3, ror r4
    4234:	2f6e6568 	svccs	0x006e6568
    4238:	6b736544 	blvs	1cdd750 <__ccfg+0x1cbd7a8>
    423c:	2f706f74 	svccs	0x00706f74
    4240:	4f534c4f 	svcmi	0x00534c4f
    4244:	2f54454e 	svccs	0x0054454e
    4248:	4f434950 	svcmi	0x00434950
    424c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4250:	00534f63 	subseq	r4, r3, r3, ror #30
    4254:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 41a0 <NOROM_SetupGetTrimForAmpcompCtrl+0x54>
    4258:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    425c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4260:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4264:	6f746b73 	svcvs	0x00746b73
    4268:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    426c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4270:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4274:	2f534f43 	svccs	0x00534f43
    4278:	4f636950 	svcmi	0x00636950
    427c:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    4280:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    4284:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4288:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    428c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    4290:	0100632e 	tsteq	r0, lr, lsr #6
    4294:	6d630000 	stclvs	0, cr0, [r3, #-0]
    4298:	5f736973 	svcpl	0x00736973
    429c:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    42a0:	00020068 	andeq	r0, r2, r8, rrx
    42a4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    42a8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    42ac:	73000003 	movwvc	r0, #3
    42b0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    42b4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    42b8:	61000004 	tstvs	r0, r4
    42bc:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    42c0:	00020068 	andeq	r0, r2, r8, rrx
    42c4:	63616d00 	cmnvs	r1, #0, 26
    42c8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    42cc:	70000002 	andvc	r0, r0, r2
    42d0:	5f736e69 	svcpl	0x00736e69
    42d4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    42d8:	00020068 	andeq	r0, r2, r8, rrx
    42dc:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    42e0:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    42e4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    42e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    42ec:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    42f0:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    42f4:	00050068 	andeq	r0, r5, r8, rrx
    42f8:	72656b00 	rsbvc	r6, r5, #0, 22
    42fc:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    4300:	00060068 	andeq	r0, r6, r8, rrx
    4304:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    4308:	00020500 	andeq	r0, r2, r0, lsl #10
    430c:	03000000 	movweq	r0, #0
    4310:	1b05010e 	blne	144750 <__ccfg+0x1247a8>
    4314:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    4318:	02010601 	andeq	r0, r1, #1048576	; 0x100000
    431c:	01010001 	tsteq	r1, r1
    4320:	05003f05 	streq	r3, [r0, #-3845]	; 0xfffff0fb
    4324:	00000002 	andeq	r0, r0, r2
    4328:	01100300 	tsteq	r0, r0, lsl #6
    432c:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4330:	3f051413 	svccc	0x00051413
    4334:	017a0306 	cmneq	sl, r6, lsl #6
    4338:	26050520 	strcs	r0, [r5], -r0, lsr #10
    433c:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    4340:	01060605 	tsteq	r6, r5, lsl #12
    4344:	4d060305 	stcmi	3, cr0, [r6, #-20]	; 0xffffffec
    4348:	c1030204 	tstgt	r3, r4, lsl #4
    434c:	01040100 	mrseq	r0, (UNDEF: 20)
    4350:	3d204003 	stccc	0, cr4, [r0, #-12]!
    4354:	0302044b 	movweq	r0, #9291	; 0x244b
    4358:	01040133 	tsteq	r4, r3, lsr r1
    435c:	05204e03 	streq	r4, [r0, #-3587]!	; 0xfffff1fd
    4360:	07053102 	streq	r3, [r5, -r2, lsl #2]
    4364:	03040106 	movweq	r0, #16646	; 0x4106
    4368:	8b030f05 	blhi	c7f84 <__ccfg+0xa7fdc>
    436c:	01042e01 	tsteq	r4, r1, lsl #28
    4370:	f5030705 			; <UNDEFINED> instruction: 0xf5030705
    4374:	0205207e 	andeq	r2, r5, #126	; 0x7e
    4378:	0b052106 	bleq	14c798 <__ccfg+0x12c7f0>
    437c:	13030513 	movwne	r0, #13587	; 0x3513
    4380:	29050304 	stmdbcs	r5, {r2, r8, r9}
    4384:	01018303 	tsteq	r1, r3, lsl #6
    4388:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    438c:	060b0501 	streq	r0, [fp], -r1, lsl #10
    4390:	017ef803 	cmneq	lr, r3, lsl #16	; <UNPREDICTABLE>
    4394:	0f050304 	svceq	0x00050304
    4398:	20018803 	andcs	r8, r1, r3, lsl #16
    439c:	0b050104 	bleq	1447b4 <__ccfg+0x12480c>
    43a0:	207ef803 	rsbscs	pc, lr, r3, lsl #16
    43a4:	33050304 	movwcc	r0, #21252	; 0x5304
    43a8:	2e018803 	cdpcs	8, 0, cr8, cr1, cr3, {0}
    43ac:	04204205 	strteq	r4, [r0], #-517	; 0xfffffdfb
    43b0:	030b0501 	movweq	r0, #46337	; 0xb501
    43b4:	052e7ef8 	streq	r7, [lr, #-3832]!	; 0xfffff108
    43b8:	1f052e08 	svcne	0x00052e08
    43bc:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    43c0:	051e0205 	ldreq	r0, [lr, #-517]	; 0xfffffdfb
    43c4:	3a052208 	bcc	14cbec <__ccfg+0x12cc44>
    43c8:	0b051f06 	bleq	14bfe8 <__ccfg+0x12c040>
    43cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    43d0:	23010511 	movwcs	r0, #5393	; 0x1511
    43d4:	01000602 	tsteq	r0, r2, lsl #12
    43d8:	00034101 	andeq	r4, r3, r1, lsl #2
    43dc:	ae000300 	cdpge	3, 0, cr0, cr0, cr0, {0}
    43e0:	02000001 	andeq	r0, r0, #1
    43e4:	0d0efb01 	vstreq	d15, [lr, #-4]
    43e8:	01010100 	mrseq	r0, (UNDEF: 17)
    43ec:	00000001 	andeq	r0, r0, r1
    43f0:	01000001 	tsteq	r0, r1
    43f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4340 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc8>
    43f8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    43fc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    4400:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4404:	6f746b73 	svcvs	0x00746b73
    4408:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    440c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4410:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4414:	2f534f43 	svccs	0x00534f43
    4418:	4f636950 	svcmi	0x00636950
    441c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4420:	2f736269 	svccs	0x00736269
    4424:	2f004f49 	svccs	0x00004f49
    4428:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    442c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4430:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4434:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4438:	706f746b 	rsbvc	r7, pc, fp, ror #8
    443c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4440:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4444:	4349502f 	movtmi	r5, #36911	; 0x902f
    4448:	502f534f 	eorpl	r5, pc, pc, asr #6
    444c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4450:	3143432f 	cmpcc	r3, pc, lsr #6
    4454:	2f585833 	svccs	0x00585833
    4458:	33314343 	teqcc	r1, #201326593	; 0xc000001
    445c:	41575858 	cmpmi	r7, r8, asr r8
    4460:	642f4552 	strtvs	r4, [pc], #-1362	; 4468 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x54>
    4464:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4468:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    446c:	73752f00 	cmnvc	r5, #0, 30
    4470:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4474:	63672f62 	cmnvs	r7, #392	; 0x188
    4478:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    447c:	6f6e2d6d 	svcvs	0x006e2d6d
    4480:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4484:	2f696261 	svccs	0x00696261
    4488:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    448c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4490:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4494:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4498:	2f656d6f 	svccs	0x00656d6f
    449c:	70657473 	rsbvc	r7, r5, r3, ror r4
    44a0:	2f6e6568 	svccs	0x006e6568
    44a4:	6b736544 	blvs	1cdd9bc <__ccfg+0x1cbda14>
    44a8:	2f706f74 	svccs	0x00706f74
    44ac:	4f534c4f 	svcmi	0x00534c4f
    44b0:	2f54454e 	svccs	0x0054454e
    44b4:	4f434950 	svcmi	0x00434950
    44b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    44bc:	2f534f63 	svccs	0x00534f63
    44c0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    44c4:	2f005858 	svccs	0x00005858
    44c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    44cc:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    44d0:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    44d4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    44d8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    44dc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    44e0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    44e4:	4349502f 	movtmi	r5, #36911	; 0x902f
    44e8:	502f534f 	eorpl	r5, pc, pc, asr #6
    44ec:	534f6369 	movtpl	r6, #62313	; 0xf369
    44f0:	6f682f00 	svcvs	0x00682f00
    44f4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    44f8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    44fc:	442f6e65 	strtmi	r6, [pc], #-3685	; 4504 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    4500:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4504:	4f2f706f 	svcmi	0x002f706f
    4508:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    450c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4510:	534f4349 	movtpl	r4, #62281	; 0xf349
    4514:	6369502f 	cmnvs	r9, #47	; 0x2f
    4518:	6b2f534f 	blvs	bd925c <__ccfg+0xbb92b4>
    451c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4520:	6200006c 	andvs	r0, r0, #108	; 0x6c
    4524:	6f747475 	svcvs	0x00747475
    4528:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    452c:	00000100 	andeq	r0, r0, r0, lsl #2
    4530:	6f697067 	svcvs	0x00697067
    4534:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4538:	74730000 	ldrbtvc	r0, [r3], #-0
    453c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4540:	0300682e 	movweq	r6, #2094	; 0x82e
    4544:	72610000 	rsbvc	r0, r1, #0
    4548:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    454c:	00000400 	andeq	r0, r0, r0, lsl #8
    4550:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4554:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4558:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    455c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4560:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4564:	00000400 	andeq	r0, r0, r0, lsl #8
    4568:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    456c:	5f736e6f 	svcpl	0x00736e6f
    4570:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4574:	00040068 	andeq	r0, r4, r8, rrx
    4578:	73797300 	cmnvc	r9, #0, 6
    457c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4580:	00000500 	andeq	r0, r0, r0, lsl #10
    4584:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4588:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    458c:	00000600 	andeq	r0, r0, r0, lsl #12
    4590:	00010500 	andeq	r0, r1, r0, lsl #10
    4594:	00000205 	andeq	r0, r0, r5, lsl #4
    4598:	1b030000 	blne	c45a0 <__ccfg+0xa45f8>
    459c:	2e060101 	adfcss	f0, f6, f1
    45a0:	6a060205 	bvs	184dbc <__ccfg+0x164e14>
    45a4:	01060e05 	tsteq	r6, r5, lsl #28
    45a8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    45ac:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    45b0:	0f054002 	svceq	0x00054002
    45b4:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    45b8:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
    45bc:	07050104 	streq	r0, [r5, -r4, lsl #2]
    45c0:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    45c4:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    45c8:	05200614 	streq	r0, [r0, #-1556]!	; 0xfffff9ec
    45cc:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    45d0:	03062002 	movweq	r2, #24578	; 0x6002
    45d4:	3d4b2e11 	stclcc	14, cr2, [fp, #-68]	; 0xffffffbc
    45d8:	71030305 	tstvc	r3, r5, lsl #6
    45dc:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    45e0:	00fe0329 	rscseq	r0, lr, r9, lsr #6
    45e4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    45e8:	07050104 	streq	r0, [r5, -r4, lsl #2]
    45ec:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    45f0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    45f4:	0183030f 	orreq	r0, r3, pc, lsl #6
    45f8:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    45fc:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    4600:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4604:	01830333 	orreq	r0, r3, r3, lsr r3
    4608:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    460c:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    4610:	06040520 	streq	r0, [r4], -r0, lsr #10
    4614:	06050530 			; <UNDEFINED> instruction: 0x06050530
    4618:	06040501 	streq	r0, [r4], -r1, lsl #10
    461c:	06030540 	streq	r0, [r3], -r0, asr #10
    4620:	062e1203 	strteq	r1, [lr], -r3, lsl #4
    4624:	0306052f 	movweq	r0, #25903	; 0x652f
    4628:	0d052064 	stceq	0, cr2, [r5, #-400]	; 0xfffffe70
    462c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4630:	3c160306 	ldccc	3, cr0, [r6], {6}
    4634:	01060705 	tsteq	r6, r5, lsl #14
    4638:	29050204 	stmdbcs	r5, {r2, r9}
    463c:	00eb0306 	rsceq	r0, fp, r6, lsl #6
    4640:	17050558 	smlsdne	r5, r8, r5, r0
    4644:	01060f05 	tsteq	r6, r5, lsl #30
    4648:	07050104 	streq	r0, [r5, -r4, lsl #2]
    464c:	207f9003 	rsbscs	r9, pc, r3
    4650:	0f050204 	svceq	0x00050204
    4654:	2000f003 	andcs	pc, r0, r3
    4658:	04203305 	strteq	r3, [r0], #-773	; 0xfffffcfb
    465c:	03050501 	movweq	r0, #21761	; 0x5501
    4660:	05207f90 	streq	r7, [r0, #-3984]!	; 0xfffff070
    4664:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    4668:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    466c:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
    4670:	07055102 	streq	r5, [r5, -r2, lsl #2]
    4674:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    4678:	03062905 	movweq	r2, #26885	; 0x6905
    467c:	053c00df 	ldreq	r0, [ip, #-223]!	; 0xffffff21
    4680:	0f051705 	svceq	0x00051705
    4684:	01040106 	tsteq	r4, r6, lsl #2
    4688:	9c030705 	stcls	7, cr0, [r3], {5}
    468c:	0204207f 	andeq	r2, r4, #127	; 0x7f
    4690:	e4030f05 	str	r0, [r3], #-3845	; 0xfffff0fb
    4694:	01042e00 	tsteq	r4, r0, lsl #28
    4698:	9c030705 	stcls	7, cr0, [r3], {5}
    469c:	0204207f 	andeq	r2, r4, #127	; 0x7f
    46a0:	e4033305 	str	r3, [r3], #-773	; 0xfffffcfb
    46a4:	01042000 	mrseq	r2, (UNDEF: 4)
    46a8:	9c030505 	cfstr32ls	mvfx0, [r3], {5}
    46ac:	0205207f 	andeq	r2, r5, #127	; 0x7f
    46b0:	0e053106 	adfeqs	f3, f5, f6
    46b4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    46b8:	0602052e 	streq	r0, [r2], -lr, lsr #10
    46bc:	06030531 			; <UNDEFINED> instruction: 0x06030531
    46c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    46c4:	06010522 	streq	r0, [r1], -r2, lsr #10
    46c8:	2c020522 	cfstr32cs	mvfx0, [r2], {34}	; 0x22
    46cc:	4c060105 	stfmis	f0, [r6], {5}
    46d0:	01000c02 	tsteq	r0, r2, lsl #24
    46d4:	00290501 	eoreq	r0, r9, r1, lsl #10
    46d8:	00000205 	andeq	r0, r0, r5, lsl #4
    46dc:	d7030000 	strle	r0, [r3, -r0]
    46e0:	02050100 	andeq	r0, r5, #0, 2
    46e4:	060f0516 			; <UNDEFINED> instruction: 0x060f0516
    46e8:	1c290501 	cfstr32ne	mvfx0, [r9], #-4
    46ec:	05240f05 	streq	r0, [r4, #-3845]!	; 0xfffff0fb
    46f0:	03052005 	movweq	r2, #20485	; 0x5005
    46f4:	01052106 	tsteq	r5, r6, lsl #2
    46f8:	03051a06 	movweq	r1, #23046	; 0x5a06
    46fc:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    4700:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    4704:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4708:	03053c05 	movweq	r3, #23557	; 0x5c05
    470c:	052f2f06 	streq	r2, [pc, #-3846]!	; 380e <vscan+0x276>
    4710:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    4714:	01052c03 	tsteq	r5, r3, lsl #24
    4718:	0006023e 	andeq	r0, r6, lr, lsr r2
    471c:	09360101 	ldmdbeq	r6!, {r0, r8}
    4720:	00030000 	andeq	r0, r3, r0
    4724:	000001d1 	ldrdeq	r0, [r0], -r1
    4728:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    472c:	0101000d 	tsteq	r1, sp
    4730:	00000101 	andeq	r0, r0, r1, lsl #2
    4734:	00000100 	andeq	r0, r0, r0, lsl #2
    4738:	6f682f01 	svcvs	0x00682f01
    473c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4740:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    4744:	442f6e65 	strtmi	r6, [pc], #-3685	; 474c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>
    4748:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    474c:	4f2f706f 	svcmi	0x002f706f
    4750:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4754:	502f5445 	eorpl	r5, pc, r5, asr #8
    4758:	534f4349 	movtpl	r4, #62281	; 0xf349
    475c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4760:	502f534f 	eorpl	r5, pc, pc, asr #6
    4764:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4768:	6f74532f 	svcvs	0x0074532f
    476c:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4770:	6f682f00 	svcvs	0x00682f00
    4774:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4778:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    477c:	442f6e65 	strtmi	r6, [pc], #-3685	; 4784 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
    4780:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4784:	4f2f706f 	svcmi	0x002f706f
    4788:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    478c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4790:	534f4349 	movtpl	r4, #62281	; 0xf349
    4794:	6369502f 	cmnvs	r9, #47	; 0x2f
    4798:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    479c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    47a0:	43432f58 	movtmi	r2, #16216	; 0x3f58
    47a4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    47a8:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    47ac:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    47b0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    47b4:	2f006269 	svccs	0x00006269
    47b8:	2f727375 	svccs	0x00727375
    47bc:	2f62696c 	svccs	0x0062696c
    47c0:	2f636367 	svccs	0x00636367
    47c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    47c8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    47cc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    47d0:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    47d4:	2f312e32 	svccs	0x00312e32
    47d8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    47dc:	00656475 	rsbeq	r6, r5, r5, ror r4
    47e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 472c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    47e4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    47e8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    47ec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    47f0:	6f746b73 	svcvs	0x00746b73
    47f4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    47f8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    47fc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4800:	2f534f43 	svccs	0x00534f43
    4804:	4f636950 	svcmi	0x00636950
    4808:	43432f53 	movtmi	r2, #16211	; 0x3f53
    480c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4810:	6f682f00 	svcvs	0x00682f00
    4814:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    4818:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    481c:	442f6e65 	strtmi	r6, [pc], #-3685	; 4824 <NOROM_ChipInfo_GetChipFamily+0x28>
    4820:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4824:	4f2f706f 	svcmi	0x002f706f
    4828:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    482c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4830:	534f4349 	movtpl	r4, #62281	; 0xf349
    4834:	6369502f 	cmnvs	r9, #47	; 0x2f
    4838:	2f00534f 	svccs	0x0000534f
    483c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4840:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    4844:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    4848:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    484c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4850:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4854:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4858:	4349502f 	movtmi	r5, #36911	; 0x902f
    485c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4860:	534f6369 	movtpl	r6, #62313	; 0xf369
    4864:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    4868:	006c656e 	rsbeq	r6, ip, lr, ror #10
    486c:	6f747300 	svcvs	0x00747300
    4870:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4874:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    4878:	30387235 	eorscc	r7, r8, r5, lsr r2
    487c:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    4880:	00000100 	andeq	r0, r0, r0, lsl #2
    4884:	6f697067 	svcvs	0x00697067
    4888:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    488c:	74730000 	ldrbtvc	r0, [r3], #-0
    4890:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4894:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    4898:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 46e0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x17c>
    489c:	0100682e 	tsteq	r0, lr, lsr #16
    48a0:	74730000 	ldrbtvc	r0, [r3], #-0
    48a4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    48a8:	0300682e 	movweq	r6, #2094	; 0x82e
    48ac:	72610000 	rsbvc	r0, r1, #0
    48b0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    48b4:	00000400 	andeq	r0, r0, r0, lsl #8
    48b8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    48bc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    48c0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    48c4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    48c8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    48cc:	00000400 	andeq	r0, r0, r0, lsl #8
    48d0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    48d4:	5f736e6f 	svcpl	0x00736e6f
    48d8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    48dc:	00040068 	andeq	r0, r4, r8, rrx
    48e0:	73797300 	cmnvc	r9, #0, 6
    48e4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    48e8:	00000500 	andeq	r0, r0, r0, lsl #10
    48ec:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    48f0:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    48f4:	00000600 	andeq	r0, r0, r0, lsl #12
    48f8:	00190500 	andseq	r0, r9, r0, lsl #10
    48fc:	25040205 	strcs	r0, [r4, #-517]	; 0xfffffdfb
    4900:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    4904:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4908:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    490c:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    4910:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    4914:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4918:	20028a03 	andcs	r8, r2, r3, lsl #20
    491c:	19050104 	stmdbne	r5, {r2, r8}
    4920:	2e7df103 	expcse	f7, f3
    4924:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4928:	2002c503 	andcs	ip, r2, r3, lsl #10
    492c:	d0030f05 	andle	r0, r3, r5, lsl #30
    4930:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    4934:	2000fa03 	andcs	pc, r0, r3, lsl #20
    4938:	03050104 	movweq	r0, #20740	; 0x5104
    493c:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    4940:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4944:	8f03060f 	svchi	0x0003060f
    4948:	01040101 	tsteq	r4, r1, lsl #2
    494c:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    4950:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    4954:	1f050521 	svcne	0x00050521
    4958:	21060305 	tstcs	r6, r5, lsl #6
    495c:	29050204 	stmdbcs	r5, {r2, r9}
    4960:	01018903 	tsteq	r1, r3, lsl #18
    4964:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4968:	03040501 	movweq	r0, #17665	; 0x4501
    496c:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    4970:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4974:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    4978:	03290502 			; <UNDEFINED> instruction: 0x03290502
    497c:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    4980:	01041705 	tsteq	r4, r5, lsl #14
    4984:	03060205 	movweq	r0, #25093	; 0x6205
    4988:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    498c:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4990:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4994:	06030501 	streq	r0, [r3], -r1, lsl #10
    4998:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    499c:	29050204 	stmdbcs	r5, {r2, r9}
    49a0:	0102b603 	tsteq	r2, r3, lsl #12
    49a4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    49a8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    49ac:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    49b0:	207dc003 	rsbscs	ip, sp, r3
    49b4:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    49b8:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    49bc:	20090301 	andcs	r0, r9, r1, lsl #6
    49c0:	01000702 	tsteq	r0, r2, lsl #14
    49c4:	001f0501 	andseq	r0, pc, r1, lsl #10
    49c8:	25380205 	ldrcs	r0, [r8, #-517]!	; 0xfffffdfb
    49cc:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    49d0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    49d4:	010e0514 	tsteq	lr, r4, lsl r5
    49d8:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    49dc:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    49e0:	01ff032d 	mvnseq	r0, sp, lsr #6
    49e4:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    49e8:	86030603 	strhi	r0, [r3], -r3, lsl #12
    49ec:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    49f0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    49f4:	02042f06 	andeq	r2, r4, #6, 30
    49f8:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    49fc:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4a00:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4a04:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4a08:	89030604 	stmdbhi	r3, {r2, r9, sl}
    4a0c:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    4a10:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    4a14:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    4a18:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4a1c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4a20:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    4a24:	0204207d 	andeq	r2, r4, #125	; 0x7d
    4a28:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    4a2c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    4a30:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4a34:	017e8c03 	cmneq	lr, r3, lsl #24
    4a38:	79030205 	stmdbvc	r3, {r0, r2, r9}
    4a3c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4a40:	01fb032d 	mvnseq	r0, sp, lsr #6
    4a44:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4a48:	8b030603 	blhi	c625c <__ccfg+0xa62b4>
    4a4c:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4a50:	a6032905 	strge	r2, [r3], -r5, lsl #18
    4a54:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    4a58:	06010417 			; <UNDEFINED> instruction: 0x06010417
    4a5c:	017dd603 	cmneq	sp, r3, lsl #12
    4a60:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4a64:	2002aa03 	andcs	sl, r2, r3, lsl #20
    4a68:	03050104 	movweq	r0, #20740	; 0x5104
    4a6c:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    4a70:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    4a74:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    4a78:	06020501 	streq	r0, [r2], -r1, lsl #10
    4a7c:	03010501 	movweq	r0, #5377	; 0x1501
    4a80:	05022009 	streq	r2, [r2, #-9]
    4a84:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4a88:	0205001e 	andeq	r0, r5, #30
    4a8c:	00002568 	andeq	r2, r0, r8, ror #10
    4a90:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    4a94:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    4a98:	cf032905 	svcgt	0x00032905
    4a9c:	3d050103 	stfccs	f0, [r5, #-12]
    4aa0:	17050514 	smladne	r5, r4, r5, r0
    4aa4:	01063805 	tsteq	r6, r5, lsl #16
    4aa8:	1e050104 	adfnes	f0, f5, f4
    4aac:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    4ab0:	38050204 	stmdacc	r5, {r2, r9}
    4ab4:	2003d803 	andcs	sp, r3, r3, lsl #16
    4ab8:	02050104 	andeq	r0, r5, #4, 2
    4abc:	7cab0306 	stcvc	3, cr0, [fp], #24
    4ac0:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    4ac4:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    4ac8:	3d050103 	stfccs	f0, [r5, #-12]
    4acc:	17050514 	smladne	r5, r4, r5, r0
    4ad0:	01063805 	tsteq	r6, r5, lsl #16
    4ad4:	01050104 	tsteq	r5, r4, lsl #2
    4ad8:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    4adc:	01000402 	tsteq	r0, r2, lsl #8
    4ae0:	00270501 	eoreq	r0, r7, r1, lsl #10
    4ae4:	25800205 	strcs	r0, [r0, #517]	; 0x205
    4ae8:	d7030000 	strle	r0, [r3, -r0]
    4aec:	02050100 	andeq	r0, r5, #0, 2
    4af0:	06270516 			; <UNDEFINED> instruction: 0x06270516
    4af4:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    4af8:	ba033805 	blt	d2b14 <__ccfg+0xb2b6c>
    4afc:	01042e03 	tsteq	r4, r3, lsl #28
    4b00:	ca030905 	bgt	c6f1c <__ccfg+0xa6f74>
    4b04:	0204207c 	andeq	r2, r4, #124	; 0x7c
    4b08:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    4b0c:	01042e03 	tsteq	r4, r3, lsl #28
    4b10:	03060805 	movweq	r0, #26629	; 0x6805
    4b14:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    4b18:	3c730302 	ldclcc	3, cr0, [r3], #-8
    4b1c:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4b20:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    4b24:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4b28:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4b2c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4b30:	017cc003 	cmneq	ip, r3
    4b34:	38050204 	stmdacc	r5, {r2, r9}
    4b38:	2003c003 	andcs	ip, r3, r3
    4b3c:	02050104 	andeq	r0, r5, #4, 2
    4b40:	7cc00306 	stclvc	3, cr0, [r0], {6}
    4b44:	06052f20 	streq	r2, [r5], -r0, lsr #30
    4b48:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4b4c:	02042f06 	andeq	r2, r4, #6, 30
    4b50:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    4b54:	3d050103 	stfccs	f0, [r5, #-12]
    4b58:	17050514 	smladne	r5, r4, r5, r0
    4b5c:	01063805 	tsteq	r6, r5, lsl #16
    4b60:	02050104 	andeq	r0, r5, #4, 2
    4b64:	7cc30306 	stclvc	3, cr0, [r3], {6}
    4b68:	060f052e 	streq	r0, [pc], -lr, lsr #10
    4b6c:	36010519 			; <UNDEFINED> instruction: 0x36010519
    4b70:	03060305 	movweq	r0, #25349	; 0x6305
    4b74:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    4b78:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4b7c:	4b4c4b06 	blmi	131779c <__ccfg+0x12f77f4>
    4b80:	01000702 	tsteq	r0, r2, lsl #14
    4b84:	00160501 	andseq	r0, r6, r1, lsl #10
    4b88:	25d40205 	ldrbcs	r0, [r4, #517]	; 0x205
    4b8c:	81030000 	mrshi	r0, (UNDEF: 3)
    4b90:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4b94:	06160516 			; <UNDEFINED> instruction: 0x06160516
    4b98:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    4b9c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4ba0:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4ba4:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    4ba8:	01050106 	tsteq	r5, r6, lsl #2
    4bac:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4bb0:	0302051b 	movweq	r0, #9499	; 0x251b
    4bb4:	01010166 	tsteq	r1, r6, ror #2
    4bb8:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4bbc:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    4bc0:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4bc4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4bc8:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4bcc:	03020501 	movweq	r0, #9473	; 0x2501
    4bd0:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    4bd4:	03380502 	teqeq	r8, #8388608	; 0x800000
    4bd8:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    4bdc:	06020501 	streq	r0, [r2], -r1, lsl #10
    4be0:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    4be4:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4be8:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    4bec:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4bf0:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4bf4:	06020501 	streq	r0, [r2], -r1, lsl #10
    4bf8:	017ce303 	cmneq	ip, r3, lsl #6
    4bfc:	38050204 	stmdacc	r5, {r2, r9}
    4c00:	20039d03 	andcs	r9, r3, r3, lsl #26
    4c04:	02050104 	andeq	r0, r5, #4, 2
    4c08:	7ce30306 	stclvc	3, cr0, [r3], #24
    4c0c:	03030520 	movweq	r0, #13600	; 0x3520
    4c10:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    4c14:	09020106 	stmdbeq	r2, {r1, r2, r8}
    4c18:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4c1c:	02050017 	andeq	r0, r5, #23
    4c20:	00002614 	andeq	r2, r0, r4, lsl r6
    4c24:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    4c28:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4c2c:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    4c30:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    4c34:	06030520 	streq	r0, [r3], -r0, lsr #10
    4c38:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    4c3c:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    4c40:	3c130303 	ldccc	3, cr0, [r3], {3}
    4c44:	01060905 	tsteq	r6, r5, lsl #18
    4c48:	2f060305 	svccs	0x00060305
    4c4c:	01050101 	tsteq	r5, r1, lsl #2
    4c50:	03021406 	movweq	r1, #9222	; 0x2406
    4c54:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4c58:	02050011 	andeq	r0, r5, #17
    4c5c:	00002638 	andeq	r2, r0, r8, lsr r6
    4c60:	01019203 	tsteq	r1, r3, lsl #4
    4c64:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    4c68:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    4c6c:	2f062402 	svccs	0x00062402
    4c70:	01060805 	tsteq	r6, r5, lsl #16
    4c74:	0e030105 	adfeqs	f0, f3, f5
    4c78:	0308052e 	movweq	r0, #34094	; 0x852e
    4c7c:	02052072 	andeq	r2, r5, #114	; 0x72
    4c80:	200d0306 	andcs	r0, sp, r6, lsl #6
    4c84:	13060105 	movwne	r0, #24837	; 0x6105
    4c88:	01000302 	tsteq	r0, r2, lsl #6
    4c8c:	00120501 	andseq	r0, r2, r1, lsl #10
    4c90:	264c0205 	strbcs	r0, [ip], -r5, lsl #4
    4c94:	a7030000 	strge	r0, [r3, -r0]
    4c98:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4c9c:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4ca0:	20050501 	andcs	r0, r5, r1, lsl #10
    4ca4:	2f060305 	svccs	0x00060305
    4ca8:	01060905 	tsteq	r6, r5, lsl #18
    4cac:	2f060305 	svccs	0x00060305
    4cb0:	30060105 	andcc	r0, r6, r5, lsl #2
    4cb4:	01000302 	tsteq	r0, r2, lsl #6
    4cb8:	002b0501 	eoreq	r0, fp, r1, lsl #10
    4cbc:	00000205 	andeq	r0, r0, r5, lsl #4
    4cc0:	af030000 	svcge	0x00030000
    4cc4:	20060101 	andcs	r0, r6, r1, lsl #2
    4cc8:	30060205 	andcc	r0, r6, r5, lsl #4
    4ccc:	01060505 	tsteq	r6, r5, lsl #10
    4cd0:	31060205 	tstcc	r6, r5, lsl #4
    4cd4:	01060505 	tsteq	r6, r5, lsl #10
    4cd8:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    4cdc:	02052012 	andeq	r2, r5, #18
    4ce0:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    4ce4:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4ce8:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    4cec:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4cf0:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4cf4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4cf8:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    4cfc:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4d00:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    4d04:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4d08:	aa030602 	bge	c6518 <__ccfg+0xa6570>
    4d0c:	4b2f207d 	blmi	bccf08 <__ccfg+0xbacf60>
    4d10:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    4d14:	31020520 	tstcc	r2, r0, lsr #10
    4d18:	29050204 	stmdbcs	r5, {r2, r9}
    4d1c:	0102c703 	tsteq	r2, r3, lsl #14
    4d20:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4d24:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4d28:	01040106 	tsteq	r4, r6, lsl #2
    4d2c:	03060205 	movweq	r0, #25093	; 0x6205
    4d30:	302e7db4 	strhtcc	r7, [lr], -r4
    4d34:	13060105 	movwne	r0, #24837	; 0x6105
    4d38:	03060305 	movweq	r0, #25349	; 0x6305
    4d3c:	0a052e79 	beq	150728 <__ccfg+0x130780>
    4d40:	08050106 	stmdaeq	r5, {r1, r2, r8}
    4d44:	030a052e 	movweq	r0, #42286	; 0xa52e
    4d48:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    4d4c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4d50:	02050031 	andeq	r0, r5, #49	; 0x31
    4d54:	00000000 	andeq	r0, r0, r0
    4d58:	0101ca03 	tsteq	r1, r3, lsl #20
    4d5c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4d60:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    4d64:	3105220c 	tstcc	r5, ip, lsl #4
    4d68:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    4d6c:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4d70:	03053005 	movweq	r3, #20485	; 0x5005
    4d74:	06053206 	streq	r3, [r5], -r6, lsl #4
    4d78:	17050106 	strne	r0, [r5, -r6, lsl #2]
    4d7c:	20060520 	andcs	r0, r6, r0, lsr #10
    4d80:	30060305 	andcc	r0, r6, r5, lsl #6
    4d84:	01060605 	tsteq	r6, r5, lsl #12
    4d88:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    4d8c:	30320603 	eorscc	r0, r2, r3, lsl #12
    4d90:	0a030405 	beq	c5dac <__ccfg+0xa5e04>
    4d94:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    4d98:	20090501 	andcs	r0, r9, r1, lsl #10
    4d9c:	05201005 	streq	r1, [r0, #-5]!
    4da0:	04052009 	streq	r2, [r5], #-9
    4da4:	11052206 	tstne	r5, r6, lsl #4
    4da8:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4dac:	201f0520 	andscs	r0, pc, r0, lsr #10
    4db0:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4db4:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    4db8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4dbc:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    4dc0:	0b053106 	bleq	1511e0 <__ccfg+0x131238>
    4dc4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4dc8:	052f2f06 	streq	r2, [pc, #-3846]!	; 3eca <TrimAfterColdResetWakeupFromShutDown+0xb6>
    4dcc:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4dd0:	20310301 	eorscs	r0, r1, r1, lsl #6
    4dd4:	03060405 	movweq	r0, #25605	; 0x6405
    4dd8:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    4ddc:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4de0:	20250520 	eorcs	r0, r5, r0, lsr #10
    4de4:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    4de8:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    4dec:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4df0:	0b052804 	bleq	14ee08 <__ccfg+0x12ee60>
    4df4:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    4df8:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    4dfc:	03063805 	movweq	r3, #26629	; 0x6805
    4e00:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    4e04:	03040501 	movweq	r0, #17665	; 0x4501
    4e08:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    4e0c:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    4e10:	0204207e 	andeq	r2, r4, #126	; 0x7e
    4e14:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    4e18:	3d050103 	stfccs	f0, [r5, #-12]
    4e1c:	17050514 	smladne	r5, r4, r5, r0
    4e20:	01063805 	tsteq	r6, r5, lsl #16
    4e24:	02050104 	andeq	r0, r5, #4, 2
    4e28:	7cb20306 	ldcvc	3, cr0, [r2], #24
    4e2c:	4b4b2f20 	blmi	12d0ab4 <__ccfg+0x12b0b0c>
    4e30:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    4e34:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    4e38:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4e3c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4e40:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4e44:	06020501 	streq	r0, [r2], -r1, lsl #10
    4e48:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    4e4c:	03060b05 	movweq	r0, #27397	; 0x6b05
    4e50:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    4e54:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    4e58:	01061305 	tsteq	r6, r5, lsl #6
    4e5c:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4e60:	2205202a 	andcs	r2, r5, #42	; 0x2a
    4e64:	06050520 	streq	r0, [r5], -r0, lsr #10
    4e68:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    4e6c:	06050501 	streq	r0, [r5], -r1, lsl #10
    4e70:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4e74:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    4e78:	03060405 	movweq	r0, #25605	; 0x6405
    4e7c:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4e80:	03010609 	movweq	r0, #5641	; 0x1609
    4e84:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    4e88:	6b032106 	blvs	cd2a8 <__ccfg+0xad300>
    4e8c:	0b035920 	bleq	db314 <__ccfg+0xbb36c>
    4e90:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4e94:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4e98:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    4e9c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4ea0:	ba030603 	blt	c66b4 <__ccfg+0xa670c>
    4ea4:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    4ea8:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4eac:	0100083b 	tsteq	r0, fp, lsr r8
    4eb0:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4eb4:	00000205 	andeq	r0, r0, r5, lsl #4
    4eb8:	a0030000 	andge	r0, r3, r0
    4ebc:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4ec0:	3b051414 	blcc	149f18 <__ccfg+0x129f70>
    4ec4:	0c050e06 	stceq	14, cr0, [r5], {6}
    4ec8:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    4ecc:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    4ed0:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4ed4:	06030532 			; <UNDEFINED> instruction: 0x06030532
    4ed8:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4edc:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    4ee0:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    4ee4:	053f0603 	ldreq	r0, [pc, #-1539]!	; 48e9 <AuxAdiDdiSafeWrite.constprop.1+0x1d>
    4ee8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4eec:	052f0603 	streq	r0, [pc, #-1539]!	; 48f1 <AuxAdiDdiSafeWrite.constprop.1+0x25>
    4ef0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4ef4:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    4ef8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4efc:	2f300603 	svccs	0x00300603
    4f00:	01060905 	tsteq	r6, r5, lsl #18
    4f04:	30060305 	andcc	r0, r6, r5, lsl #6
    4f08:	01060c05 	tsteq	r6, r5, lsl #24
    4f0c:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4f10:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4f14:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4f18:	2f210604 	svccs	0x00210604
    4f1c:	03060105 	movweq	r0, #24837	; 0x6105
    4f20:	03050122 	movweq	r0, #20770	; 0x5122
    4f24:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    4f28:	01061105 	tsteq	r6, r5, lsl #2
    4f2c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4f30:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    4f34:	304a0624 	subcc	r0, sl, r4, lsr #12
    4f38:	29050204 	stmdbcs	r5, {r2, r9}
    4f3c:	0101c803 	tsteq	r1, r3, lsl #16
    4f40:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4f44:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4f48:	01040106 	tsteq	r4, r6, lsl #2
    4f4c:	b3030305 	movwlt	r0, #13061	; 0x3305
    4f50:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    4f54:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    4f58:	01042001 	tsteq	r4, r1
    4f5c:	03060305 	movweq	r0, #25349	; 0x6305
    4f60:	2f2e7eb3 	svccs	0x002e7eb3
    4f64:	01061905 	tsteq	r6, r5, lsl #18
    4f68:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    4f6c:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4f70:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    4f74:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    4f78:	2308052e 	movwcs	r0, #34094	; 0x852e
    4f7c:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4f80:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    4f84:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4f88:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    4f8c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4f90:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4f94:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4f98:	c1030602 	tstgt	r3, r2, lsl #12
    4f9c:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    4fa0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4fa4:	054b4006 	strbeq	r4, [fp, #-6]
    4fa8:	20730304 	rsbscs	r0, r3, r4, lsl #6
    4fac:	01061305 	tsteq	r6, r5, lsl #6
    4fb0:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    4fb4:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    4fb8:	06040501 	streq	r0, [r4], -r1, lsl #10
    4fbc:	06080559 			; <UNDEFINED> instruction: 0x06080559
    4fc0:	030b0501 	movweq	r0, #46337	; 0xb501
    4fc4:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    4fc8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4fcc:	02050012 	andeq	r0, r5, #18
    4fd0:	00000000 	andeq	r0, r0, r0
    4fd4:	0102da03 	tsteq	r2, r3, lsl #20
    4fd8:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    4fdc:	01010001 	tsteq	r1, r1
    4fe0:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    4fe4:	00000002 	andeq	r0, r0, r2
    4fe8:	02df0300 	sbcseq	r0, pc, #0, 6
    4fec:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    4ff0:	13060105 	movwne	r0, #24837	; 0x6105
    4ff4:	01000202 	tsteq	r0, r2, lsl #4
    4ff8:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    4ffc:	02050029 	andeq	r0, r5, #41	; 0x29
    5000:	00000000 	andeq	r0, r0, r0
    5004:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    5008:	01060505 	tsteq	r6, r5, lsl #10
    500c:	21060305 	tstcs	r6, r5, lsl #6
    5010:	01060705 	tsteq	r6, r5, lsl #14
    5014:	30060205 	andcc	r0, r6, r5, lsl #4
    5018:	01060505 	tsteq	r6, r5, lsl #10
    501c:	21060305 	tstcs	r6, r5, lsl #6
    5020:	01060805 	tsteq	r6, r5, lsl #16
    5024:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    5028:	13060105 	movwne	r0, #24837	; 0x6105
    502c:	01000302 	tsteq	r0, r2, lsl #6
    5030:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    5034:	02050017 	andeq	r0, r5, #23
    5038:	00000000 	andeq	r0, r0, r0
    503c:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    5040:	17051402 	strne	r1, [r5, -r2, lsl #8]
    5044:	02051006 	andeq	r1, r5, #6
    5048:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    504c:	13060105 	movwne	r0, #24837	; 0x6105
    5050:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    5054:	01010002 	tsteq	r1, r2
    5058:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    505c:	01250003 			; <UNDEFINED> instruction: 0x01250003
    5060:	01020000 	mrseq	r0, (UNDEF: 2)
    5064:	000d0efb 	strdeq	r0, [sp], -fp
    5068:	01010101 	tsteq	r1, r1, lsl #2
    506c:	01000000 	mrseq	r0, (UNDEF: 0)
    5070:	2f010000 	svccs	0x00010000
    5074:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5078:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    507c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5080:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5084:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5088:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    508c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5090:	4349502f 	movtmi	r5, #36911	; 0x902f
    5094:	502f534f 	eorpl	r5, pc, pc, asr #6
    5098:	534f6369 	movtpl	r6, #62313	; 0xf369
    509c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    50a0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    50a4:	61697265 	cmnvs	r9, r5, ror #4
    50a8:	752f006c 	strvc	r0, [pc, #-108]!	; 5044 <__aeabi_lmul+0x650>
    50ac:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4ee8 <__aeabi_lmul+0x4f4>
    50b0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    50b4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    50b8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    50bc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    50c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    50c4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    50c8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    50cc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    50d0:	2f006564 	svccs	0x00006564
    50d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    50d8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    50dc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    50e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    50e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    50e8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    50ec:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    50f0:	4349502f 	movtmi	r5, #36911	; 0x902f
    50f4:	502f534f 	eorpl	r5, pc, pc, asr #6
    50f8:	534f6369 	movtpl	r6, #62313	; 0xf369
    50fc:	3143432f 	cmpcc	r3, pc, lsr #6
    5100:	00585833 	subseq	r5, r8, r3, lsr r8
    5104:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5050 <__aeabi_lmul+0x65c>
    5108:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    510c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5110:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5114:	6f746b73 	svcvs	0x00746b73
    5118:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    511c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5120:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5124:	2f534f43 	svccs	0x00534f43
    5128:	4f636950 	svcmi	0x00636950
    512c:	73000053 	movwvc	r0, #83	; 0x53
    5130:	6f5f7265 	svcvs	0x005f7265
    5134:	632e7475 			; <UNDEFINED> instruction: 0x632e7475
    5138:	00000100 	andeq	r0, r0, r0, lsl #2
    513c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5140:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5144:	00000200 	andeq	r0, r0, r0, lsl #4
    5148:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    514c:	0300682e 	movweq	r6, #2094	; 0x82e
    5150:	616d0000 	cmnvs	sp, r0
    5154:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5158:	00000300 	andeq	r0, r0, r0, lsl #6
    515c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    5160:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5164:	0300682e 	movweq	r6, #2094	; 0x82e
    5168:	75620000 	strbvc	r0, [r2, #-0]!
    516c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    5170:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5174:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5178:	73000003 	movwvc	r0, #3
    517c:	6f697379 	svcvs	0x00697379
    5180:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5184:	05000000 	streq	r0, [r0, #-0]
    5188:	02050026 	andeq	r0, r5, #38	; 0x26
    518c:	00002660 	andeq	r2, r0, r0, ror #12
    5190:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    5194:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    5198:	0d062605 	stceq	6, cr2, [r6, #-20]	; 0xffffffec
    519c:	250e0520 	strcs	r0, [lr, #-1312]	; 0xfffffae0
    51a0:	051b2605 	ldreq	r2, [fp, #-1541]	; 0xfffff9fb
    51a4:	0505250e 	streq	r2, [r5, #-1294]	; 0xfffffaf2
    51a8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    51ac:	0d033d22 	stceq	13, cr3, [r3, #-136]	; 0xffffff78
    51b0:	03020501 	movweq	r0, #9473	; 0x2501
    51b4:	05052e76 	streq	r2, [r5, #-3702]	; 0xfffff18a
    51b8:	03050106 	movweq	r0, #20742	; 0x5106
    51bc:	0a052f06 	beq	150ddc <__ccfg+0x130e34>
    51c0:	08050106 	stmdaeq	r5, {r1, r2, r8}
    51c4:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    51c8:	06150524 	ldreq	r0, [r5], -r4, lsr #10
    51cc:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    51d0:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    51d4:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
    51d8:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    51dc:	02052008 	andeq	r2, r5, #8
    51e0:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    51e4:	01060505 	tsteq	r6, r5, lsl #10
    51e8:	2f060305 	svccs	0x00060305
    51ec:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    51f0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    51f4:	03054a05 	movweq	r4, #23045	; 0x5a05
    51f8:	033e2206 	teqeq	lr, #1610612736	; 0x60000000
    51fc:	0205207a 	andeq	r2, r5, #122	; 0x7a
    5200:	05580a03 	ldrbeq	r0, [r8, #-2563]	; 0xfffff5fd
    5204:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5208:	01010005 	tsteq	r1, r5
    520c:	000001c4 	andeq	r0, r0, r4, asr #3
    5210:	01240003 			; <UNDEFINED> instruction: 0x01240003
    5214:	01020000 	mrseq	r0, (UNDEF: 2)
    5218:	000d0efb 	strdeq	r0, [sp], -fp
    521c:	01010101 	tsteq	r1, r1, lsl #2
    5220:	01000000 	mrseq	r0, (UNDEF: 0)
    5224:	2f010000 	svccs	0x00010000
    5228:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    522c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5230:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5234:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5238:	706f746b 	rsbvc	r7, pc, fp, ror #8
    523c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5240:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5244:	4349502f 	movtmi	r5, #36911	; 0x902f
    5248:	502f534f 	eorpl	r5, pc, pc, asr #6
    524c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5250:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5254:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5258:	61697265 	cmnvs	r9, r5, ror #4
    525c:	752f006c 	strvc	r0, [pc, #-108]!	; 51f8 <__pi_hex_enc_table+0x67>
    5260:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 509c <__aeabi_lmul+0x6a8>
    5264:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5268:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    526c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5270:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5274:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5278:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    527c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5280:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5284:	2f006564 	svccs	0x00006564
    5288:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    528c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5290:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5294:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5298:	706f746b 	rsbvc	r7, pc, fp, ror #8
    529c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    52a0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    52a4:	4349502f 	movtmi	r5, #36911	; 0x902f
    52a8:	502f534f 	eorpl	r5, pc, pc, asr #6
    52ac:	534f6369 	movtpl	r6, #62313	; 0xf369
    52b0:	3143432f 	cmpcc	r3, pc, lsr #6
    52b4:	00585833 	subseq	r5, r8, r3, lsr r8
    52b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5204 <__pi_hex_enc_table+0x73>
    52bc:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    52c0:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    52c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    52c8:	6f746b73 	svcvs	0x00746b73
    52cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    52d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    52d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    52d8:	2f534f43 	svccs	0x00534f43
    52dc:	4f636950 	svcmi	0x00636950
    52e0:	73000053 	movwvc	r0, #83	; 0x53
    52e4:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    52e8:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    52ec:	73000001 	movwvc	r0, #1
    52f0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    52f4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    52f8:	61000002 	tstvs	r0, r2
    52fc:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5300:	00030068 	andeq	r0, r3, r8, rrx
    5304:	63616d00 	cmnvs	r1, #0, 26
    5308:	00682e68 	rsbeq	r2, r8, r8, ror #28
    530c:	70000003 	andvc	r0, r0, r3
    5310:	5f736e69 	svcpl	0x00736e69
    5314:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5318:	00030068 	andeq	r0, r3, r8, rrx
    531c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5320:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5324:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5328:	0300682e 	movweq	r6, #2094	; 0x82e
    532c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5330:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5334:	00040068 	andeq	r0, r4, r8, rrx
    5338:	2a050000 	bcs	145340 <__ccfg+0x125398>
    533c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    5340:	03000026 	movweq	r0, #38	; 0x26
    5344:	0205010c 	andeq	r0, r5, #12, 2
    5348:	2a051416 	bcs	14a3a8 <__ccfg+0x12a400>
    534c:	017a0306 	cmneq	sl, r6, lsl #6
    5350:	34050520 	strcc	r0, [r5], #-1312	; 0xfffffae0
    5354:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    5358:	01061005 	tsteq	r6, r5
    535c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5360:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5364:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    5368:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    536c:	0b052106 	bleq	14d78c <__ccfg+0x12d7e4>
    5370:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5374:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    5378:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    537c:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    5380:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    5384:	05054f02 	streq	r4, [r5, #-3842]	; 0xfffff0fe
    5388:	03050106 	movweq	r0, #20742	; 0x5106
    538c:	13052f06 	movwne	r2, #24326	; 0x5f06
    5390:	08050106 	stmdaeq	r5, {r1, r2, r8}
    5394:	06020520 	streq	r0, [r2], -r0, lsr #10
    5398:	06050524 	streq	r0, [r5], -r4, lsr #10
    539c:	06030501 	streq	r0, [r3], -r1, lsl #10
    53a0:	06080521 	streq	r0, [r8], -r1, lsr #10
    53a4:	06020501 	streq	r0, [r2], -r1, lsl #10
    53a8:	053d593e 	ldreq	r5, [sp, #-2366]!	; 0xfffff6c2
    53ac:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    53b0:	052f0602 	streq	r0, [pc, #-1538]!	; 4db6 <__aeabi_lmul+0x3c2>
    53b4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    53b8:	052f0603 	streq	r0, [pc, #-1539]!	; 4dbd <__aeabi_lmul+0x3c9>
    53bc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    53c0:	03052201 	movweq	r2, #20993	; 0x5201
    53c4:	2e750306 	cdpcs	3, 7, cr0, cr5, cr6, {0}
    53c8:	01060a05 	tsteq	r6, r5, lsl #20
    53cc:	024a6e03 	subeq	r6, sl, #3, 28	; 0x30
    53d0:	01010007 	tsteq	r1, r7
    53d4:	000001a1 	andeq	r0, r0, r1, lsr #3
    53d8:	01400003 	cmpeq	r0, r3
    53dc:	01020000 	mrseq	r0, (UNDEF: 2)
    53e0:	000d0efb 	strdeq	r0, [sp], -fp
    53e4:	01010101 	tsteq	r1, r1, lsl #2
    53e8:	01000000 	mrseq	r0, (UNDEF: 0)
    53ec:	2f010000 	svccs	0x00010000
    53f0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    53f4:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    53f8:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    53fc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5400:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5404:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5408:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    540c:	4349502f 	movtmi	r5, #36911	; 0x902f
    5410:	502f534f 	eorpl	r5, pc, pc, asr #6
    5414:	534f6369 	movtpl	r6, #62313	; 0xf369
    5418:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    541c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5420:	61697265 	cmnvs	r9, r5, ror #4
    5424:	752f006c 	strvc	r0, [pc, #-108]!	; 53c0 <patchGenfskRfe+0x104>
    5428:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5264 <__button_list+0x22>
    542c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5430:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5434:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5438:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    543c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5440:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5444:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5448:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    544c:	2f006564 	svccs	0x00006564
    5450:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5454:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5458:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    545c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5460:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5464:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5468:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    546c:	4349502f 	movtmi	r5, #36911	; 0x902f
    5470:	502f534f 	eorpl	r5, pc, pc, asr #6
    5474:	534f6369 	movtpl	r6, #62313	; 0xf369
    5478:	3143432f 	cmpcc	r3, pc, lsr #6
    547c:	00585833 	subseq	r5, r8, r3, lsr r8
    5480:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 53cc <patchGenfskRfe+0x110>
    5484:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    5488:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    548c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5490:	6f746b73 	svcvs	0x00746b73
    5494:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5498:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    549c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    54a0:	2f534f43 	svccs	0x00534f43
    54a4:	4f636950 	svcmi	0x00636950
    54a8:	73000053 	movwvc	r0, #83	; 0x53
    54ac:	6f5f7265 	svcvs	0x005f7265
    54b0:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
    54b4:	00010063 	andeq	r0, r1, r3, rrx
    54b8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    54bc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    54c0:	00020068 	andeq	r0, r2, r8, rrx
    54c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    54c8:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    54cc:	00020068 	andeq	r0, r2, r8, rrx
    54d0:	63726100 	cmnvs	r2, #0, 2
    54d4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    54d8:	6d000003 	stcvs	0, cr0, [r0, #-12]
    54dc:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    54e0:	00030068 	andeq	r0, r3, r8, rrx
    54e4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    54e8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    54ec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    54f0:	62000003 	andvs	r0, r0, #3
    54f4:	6f747475 	svcvs	0x00747475
    54f8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    54fc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5500:	00000300 	andeq	r0, r0, r0, lsl #6
    5504:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5508:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    550c:	3c000004 	stccc	0, cr0, [r0], {4}
    5510:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5514:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5518:	0000003e 	andeq	r0, r0, lr, lsr r0
    551c:	2c050000 	stccs	0, cr0, [r5], {-0}
    5520:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    5524:	03000027 	movweq	r0, #39	; 0x27
    5528:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    552c:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    5530:	03062c05 	movweq	r2, #27653	; 0x6c05
    5534:	052e017a 	streq	r0, [lr, #-378]!	; 0xfffffe86
    5538:	0505260e 	streq	r2, [r5, #-1550]	; 0xfffff9f2
    553c:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    5540:	0a033d30 	beq	d4a08 <__ccfg+0xb4a60>
    5544:	03020501 	movweq	r0, #9473	; 0x2501
    5548:	0d052e79 	stceq	14, cr2, [r5, #-484]	; 0xfffffe1c
    554c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    5550:	0522061e 	streq	r0, [r2, #-1566]!	; 0xfffff9e2
    5554:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5558:	03052e05 	movweq	r2, #24069	; 0x5e05
    555c:	02053206 	andeq	r3, r5, #1610612736	; 0x60000000
    5560:	0606054e 	streq	r0, [r6], -lr, asr #10
    5564:	4a050501 	bmi	146970 <__ccfg+0x1269c8>
    5568:	21060305 	tstcs	r6, r5, lsl #6
    556c:	2402053d 	strcs	r0, [r2], #-1341	; 0xfffffac3
    5570:	13060105 	movwne	r0, #24837	; 0x6105
    5574:	01000902 	tsteq	r0, r2, lsl #18
    5578:	0001b201 	andeq	fp, r1, r1, lsl #4
    557c:	3f000300 	svccc	0x00000300
    5580:	02000001 	andeq	r0, r0, #1
    5584:	0d0efb01 	vstreq	d15, [lr, #-4]
    5588:	01010100 	mrseq	r0, (UNDEF: 17)
    558c:	00000001 	andeq	r0, r0, r1
    5590:	01000001 	tsteq	r0, r1
    5594:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 54e0 <patchGenfskRfe+0x224>
    5598:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    559c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    55a0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    55a4:	6f746b73 	svcvs	0x00746b73
    55a8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    55ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    55b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    55b4:	2f534f43 	svccs	0x00534f43
    55b8:	4f636950 	svcmi	0x00636950
    55bc:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    55c0:	2f736269 	svccs	0x00736269
    55c4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    55c8:	2f006c61 	svccs	0x00006c61
    55cc:	2f727375 	svccs	0x00727375
    55d0:	2f62696c 	svccs	0x0062696c
    55d4:	2f636367 	svccs	0x00636367
    55d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    55dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    55e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    55e4:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    55e8:	2f312e32 	svccs	0x00312e32
    55ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    55f0:	00656475 	rsbeq	r6, r5, r5, ror r4
    55f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5540 <patchGenfskRfe+0x284>
    55f8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    55fc:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    5600:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5604:	6f746b73 	svcvs	0x00746b73
    5608:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    560c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5610:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5614:	2f534f43 	svccs	0x00534f43
    5618:	4f636950 	svcmi	0x00636950
    561c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5620:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5624:	6f682f00 	svcvs	0x00682f00
    5628:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    562c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5630:	442f6e65 	strtmi	r6, [pc], #-3685	; 5638 <patchGenfskRfe+0x37c>
    5634:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5638:	4f2f706f 	svcmi	0x002f706f
    563c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5640:	502f5445 	eorpl	r5, pc, r5, asr #8
    5644:	534f4349 	movtpl	r4, #62281	; 0xf349
    5648:	6369502f 	cmnvs	r9, #47	; 0x2f
    564c:	0000534f 	andeq	r5, r0, pc, asr #6
    5650:	5f726573 	svcpl	0x00726573
    5654:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    5658:	00010063 	andeq	r0, r1, r3, rrx
    565c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5660:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5664:	00020068 	andeq	r0, r2, r8, rrx
    5668:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    566c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5670:	00020068 	andeq	r0, r2, r8, rrx
    5674:	63726100 	cmnvs	r2, #0, 2
    5678:	00682e68 	rsbeq	r2, r8, r8, ror #28
    567c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5680:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5684:	00030068 	andeq	r0, r3, r8, rrx
    5688:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    568c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5690:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5694:	62000003 	andvs	r0, r0, #3
    5698:	6f747475 	svcvs	0x00747475
    569c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    56a0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    56a4:	00000300 	andeq	r0, r0, r0, lsl #6
    56a8:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    56ac:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    56b0:	3c000004 	stccc	0, cr0, [r0], {4}
    56b4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    56b8:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    56bc:	0000003e 	andeq	r0, r0, lr, lsr r0
    56c0:	2d050000 	stccs	0, cr0, [r5, #-0]
    56c4:	98020500 	stmdals	r2, {r8, sl}
    56c8:	03000027 	movweq	r0, #39	; 0x27
    56cc:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    56d0:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    56d4:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    56d8:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    56dc:	06020536 			; <UNDEFINED> instruction: 0x06020536
    56e0:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    56e4:	20050501 	andcs	r0, r5, r1, lsl #10
    56e8:	2f060305 	svccs	0x00060305
    56ec:	01060f05 	tsteq	r6, r5, lsl #30
    56f0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    56f4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    56f8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    56fc:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    5700:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5704:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    5708:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    570c:	304f0205 	subcc	r0, pc, r5, lsl #4
    5710:	01060905 	tsteq	r6, r5, lsl #18
    5714:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    5718:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    571c:	06020501 	streq	r0, [r2], -r1, lsl #10
    5720:	06010530 			; <UNDEFINED> instruction: 0x06010530
    5724:	030a0513 	movweq	r0, #42259	; 0xa513
    5728:	06026669 	streq	r6, [r2], -r9, ror #12
    572c:	ae010100 	adfges	f0, f1, f0
    5730:	0300000c 	movweq	r0, #12
    5734:	00029e00 	andeq	r9, r2, r0, lsl #28
    5738:	fb010200 	blx	45f42 <__ccfg+0x25f9a>
    573c:	01000d0e 	tsteq	r0, lr, lsl #26
    5740:	00010101 	andeq	r0, r1, r1, lsl #2
    5744:	00010000 	andeq	r0, r1, r0
    5748:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    574c:	2f656d6f 	svccs	0x00656d6f
    5750:	70657473 	rsbvc	r7, r5, r3, ror r4
    5754:	2f6e6568 	svccs	0x006e6568
    5758:	6b736544 	blvs	1cdec70 <__ccfg+0x1cbecc8>
    575c:	2f706f74 	svccs	0x00706f74
    5760:	4f534c4f 	svcmi	0x00534c4f
    5764:	2f54454e 	svccs	0x0054454e
    5768:	4f434950 	svcmi	0x00434950
    576c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5770:	2f534f63 	svccs	0x00534f63
    5774:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5778:	2f005858 	svccs	0x00005858
    577c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5780:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    5784:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5788:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    578c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5790:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5794:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5798:	4349502f 	movtmi	r5, #36911	; 0x902f
    579c:	502f534f 	eorpl	r5, pc, pc, asr #6
    57a0:	534f6369 	movtpl	r6, #62313	; 0xf369
    57a4:	3143432f 	cmpcc	r3, pc, lsr #6
    57a8:	2f585833 	svccs	0x00585833
    57ac:	33314343 	teqcc	r1, #201326593	; 0xc000001
    57b0:	41575858 	cmpmi	r7, r8, asr r8
    57b4:	642f4552 	strtvs	r4, [pc], #-1362	; 57bc <patchGenfskRfe+0x500>
    57b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    57bc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    57c0:	6f682f00 	svcvs	0x00682f00
    57c4:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    57c8:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    57cc:	442f6e65 	strtmi	r6, [pc], #-3685	; 57d4 <patchGenfskRfe+0x518>
    57d0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    57d4:	4f2f706f 	svcmi	0x002f706f
    57d8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    57dc:	502f5445 	eorpl	r5, pc, r5, asr #8
    57e0:	534f4349 	movtpl	r4, #62281	; 0xf349
    57e4:	6369502f 	cmnvs	r9, #47	; 0x2f
    57e8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    57ec:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    57f0:	43432f58 	movtmi	r2, #16216	; 0x3f58
    57f4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    57f8:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    57fc:	5f66722f 	svcpl	0x0066722f
    5800:	63746170 	cmnvs	r4, #112, 2
    5804:	00736568 	rsbseq	r6, r3, r8, ror #10
    5808:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    580c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5810:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5814:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5818:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    581c:	61652d65 	cmnvs	r5, r5, ror #26
    5820:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5824:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    5828:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    582c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5830:	73752f00 	cmnvc	r5, #0, 30
    5834:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    5838:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    583c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    5840:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    5844:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    5848:	6f682f00 	svcvs	0x00682f00
    584c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    5850:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    5854:	442f6e65 	strtmi	r6, [pc], #-3685	; 585c <patchGenfskRfe+0x5a0>
    5858:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    585c:	4f2f706f 	svcmi	0x002f706f
    5860:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5864:	502f5445 	eorpl	r5, pc, r5, asr #8
    5868:	534f4349 	movtpl	r4, #62281	; 0xf349
    586c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5870:	2f00534f 	svccs	0x0000534f
    5874:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5878:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    587c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    5880:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5884:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5888:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    588c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5890:	4349502f 	movtmi	r5, #36911	; 0x902f
    5894:	502f534f 	eorpl	r5, pc, pc, asr #6
    5898:	534f6369 	movtpl	r6, #62313	; 0xf369
    589c:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    58a0:	006c656e 	rsbeq	r6, ip, lr, ror #10
    58a4:	70667200 	rsbvc	r7, r6, r0, lsl #4
    58a8:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
    58ac:	00010063 	andeq	r0, r1, r3, rrx
    58b0:	63667200 	cmnvs	r6, #0, 4
    58b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    58b8:	70670000 	rsbvc	r0, r7, r0
    58bc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    58c0:	00000200 	andeq	r0, r0, r0, lsl #4
    58c4:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    58c8:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    58cc:	6570635f 	ldrbvs	r6, [r0, #-863]!	; 0xfffffca1
    58d0:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    58d4:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    58d8:	00030068 	andeq	r0, r3, r8, rrx
    58dc:	5f667200 	svcpl	0x00667200
    58e0:	63746170 	cmnvs	r4, #112, 2
    58e4:	66725f68 	ldrbtvs	r5, [r2], -r8, ror #30
    58e8:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    58ec:	6b73666e 	blvs	1cdf2ac <__ccfg+0x1cbf304>
    58f0:	0300682e 	movweq	r6, #2094	; 0x82e
    58f4:	74730000 	ldrbtvc	r0, [r3], #-0
    58f8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    58fc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5900:	74730000 	ldrbtvc	r0, [r3], #-0
    5904:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    5908:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    590c:	745f0000 	ldrbvc	r0, [pc], #-0	; 5914 <patchGenfskRfe+0x658>
    5910:	73657079 	cmnvc	r5, #121	; 0x79
    5914:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    5918:	65720000 	ldrbvs	r0, [r2, #-0]!
    591c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    5920:	00050068 	andeq	r0, r5, r8, rrx
    5924:	636f6c00 	cmnvs	pc, #0, 24
    5928:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    592c:	72000005 	andvc	r0, r0, #5
    5930:	616d5f66 	cmnvs	sp, r6, ror #30
    5934:	6f626c69 	svcvs	0x00626c69
    5938:	00682e78 	rsbeq	r2, r8, r8, ror lr
    593c:	72000002 	andvc	r0, r0, #2
    5940:	6f635f66 	svcvs	0x00635f66
    5944:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    5948:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    594c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5950:	66720000 	ldrbtvs	r0, [r2], -r0
    5954:	6f72705f 	svcvs	0x0072705f
    5958:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    595c:	00682e64 	rsbeq	r2, r8, r4, ror #28
    5960:	72000002 	andvc	r0, r0, #2
    5964:	61645f66 	cmnvs	r4, r6, ror #30
    5968:	655f6174 	ldrbvs	r6, [pc, #-372]	; 57fc <patchGenfskRfe+0x540>
    596c:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    5970:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5974:	72610000 	rsbvc	r0, r1, #0
    5978:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    597c:	00000100 	andeq	r0, r0, r0, lsl #2
    5980:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5984:	0100682e 	tsteq	r0, lr, lsr #16
    5988:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    598c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5990:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5994:	00000100 	andeq	r0, r0, r0, lsl #2
    5998:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    599c:	5f736e6f 	svcpl	0x00736e6f
    59a0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    59a4:	00010068 	andeq	r0, r1, r8, rrx
    59a8:	73797300 	cmnvc	r9, #0, 6
    59ac:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    59b0:	00000600 	andeq	r0, r0, r0, lsl #12
    59b4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    59b8:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    59bc:	00000700 	andeq	r0, r0, r0, lsl #14
    59c0:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    59c4:	5f667274 	svcpl	0x00667274
    59c8:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    59cc:	73676e69 	cmnvc	r7, #1680	; 0x690
    59d0:	0100682e 	tsteq	r0, lr, lsr #16
    59d4:	05000000 	streq	r0, [r0, #-0]
    59d8:	02050017 	andeq	r0, r5, #23
    59dc:	000027f8 	strdeq	r2, [r0], -r8
    59e0:	01039f03 	tsteq	r3, r3, lsl #30
    59e4:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    59e8:	05140638 	ldreq	r0, [r4, #-1592]	; 0xfffff9c8
    59ec:	38052026 	stmdacc	r5, {r1, r2, r5, sp}
    59f0:	3c260520 	cfstr32cc	mvfx0, [r6], #-128	; 0xffffff80
    59f4:	051e1505 	ldreq	r1, [lr, #-1285]	; 0xfffffafb
    59f8:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    59fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5a00:	0205002a 	andeq	r0, r5, #42	; 0x2a
    5a04:	00002818 	andeq	r2, r0, r8, lsl r8
    5a08:	0106c903 	tsteq	r6, r3, lsl #18
    5a0c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    5a10:	0e062a05 	vmlaeq.f32	s4, s12, s10
    5a14:	06040520 	streq	r0, [r4], -r0, lsr #10
    5a18:	17054408 	strne	r4, [r5, -r8, lsl #8]
    5a1c:	0c050106 	stfeqs	f0, [r5], {6}
    5a20:	03080520 	movweq	r0, #34080	; 0x8520
    5a24:	04053c20 	streq	r3, [r5], #-3104	; 0xfffff3e0
    5a28:	64032106 	strvs	r2, [r3], #-262	; 0xfffffefa
    5a2c:	06060520 	streq	r0, [r6], -r0, lsr #10
    5a30:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    5a34:	0d030604 	stceq	6, cr0, [r3, #-16]
    5a38:	9e010120 	adflssp	f0, f1, f0
    5a3c:	054a582e 	strbeq	r5, [sl, #-2094]	; 0xfffff7d2
    5a40:	fa030601 	blx	c724c <__ccfg+0xa72a4>
    5a44:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
    5a48:	7f900306 	svcvc	0x00900306
    5a4c:	0b055d20 	bleq	15ced4 <__ccfg+0x13cf2c>
    5a50:	20200106 	eorcs	r0, r0, r6, lsl #2
    5a54:	2f060405 	svccs	0x00060405
    5a58:	03060605 	movweq	r0, #26117	; 0x6605
    5a5c:	04050163 	streq	r0, [r5], #-355	; 0xfffffe9d
    5a60:	2e210306 	cdpcs	3, 2, cr0, cr1, cr6, {0}
    5a64:	01060a05 	tsteq	r6, r5, lsl #20
    5a68:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    5a6c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5a70:	00e20302 	rsceq	r0, r2, r2, lsl #6
    5a74:	06050501 	streq	r0, [r5], -r1, lsl #10
    5a78:	06030501 	streq	r0, [r3], -r1, lsl #10
    5a7c:	0f02052f 	svceq	0x0002052f
    5a80:	15060805 	strne	r0, [r6, #-2053]	; 0xfffff7fb
    5a84:	051d0905 	ldreq	r0, [sp, #-2309]	; 0xfffff6fb
    5a88:	a4030604 	strge	r0, [r3], #-1540	; 0xfffff9fc
    5a8c:	1105207f 	tstne	r5, pc, ror r0
    5a90:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5a94:	05054106 	streq	r4, [r5, #-262]	; 0xfffffefa
    5a98:	07051306 	streq	r1, [r5, -r6, lsl #6]
    5a9c:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    5aa0:	04055b21 	streq	r5, [r5], #-2849	; 0xfffff4df
    5aa4:	06070552 			; <UNDEFINED> instruction: 0x06070552
    5aa8:	06050501 	streq	r0, [r5], -r1, lsl #10
    5aac:	06010122 	streq	r0, [r1], -r2, lsr #2
    5ab0:	054a065a 	strbeq	r0, [sl, #-1626]	; 0xfffff9a6
    5ab4:	0535060d 	ldreq	r0, [r5, #-1549]!	; 0xfffff9f3
    5ab8:	05052120 	streq	r2, [r5, #-288]	; 0xfffffee0
    5abc:	11053c06 	tstne	r5, r6, lsl #24
    5ac0:	08051306 	stmdaeq	r5, {r1, r2, r8, r9, ip}
    5ac4:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    5ac8:	061e052d 	ldreq	r0, [lr], -sp, lsr #10
    5acc:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    5ad0:	06040520 	streq	r0, [r4], -r0, lsr #10
    5ad4:	10030601 	andne	r0, r3, r1, lsl #12
    5ad8:	062e053c 			; <UNDEFINED> instruction: 0x062e053c
    5adc:	21140501 	tstcs	r4, r1, lsl #10
    5ae0:	051f2e05 	ldreq	r2, [pc, #-3589]	; 4ce3 <__aeabi_lmul+0x2ef>
    5ae4:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5ae8:	0501062e 	streq	r0, [r1, #-1582]	; 0xfffff9d2
    5aec:	04052024 	streq	r2, [r5], #-36	; 0xffffffdc
    5af0:	24594b06 	ldrbcs	r4, [r9], #-2822	; 0xfffff4fa
    5af4:	01060a05 	tsteq	r6, r5, lsl #20
    5af8:	0e030805 	cdpeq	8, 0, cr0, cr3, cr5, {0}
    5afc:	06040520 	streq	r0, [r4], -r0, lsr #10
    5b00:	20750322 	rsbscs	r0, r5, r2, lsr #6
    5b04:	01060c05 	tsteq	r6, r5, lsl #24
    5b08:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    5b0c:	0520490c 	streq	r4, [r0, #-2316]!	; 0xfffff6f4
    5b10:	03300604 	teqeq	r0, #4, 12	; 0x400000
    5b14:	032f0111 			; <UNDEFINED> instruction: 0x032f0111
    5b18:	0a055875 	beq	15bcf4 <__ccfg+0x13bd4c>
    5b1c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5b20:	0a053606 	beq	153340 <__ccfg+0x133398>
    5b24:	06050106 	streq	r0, [r5], -r6, lsl #2
    5b28:	1f0a0521 	svcne	0x000a0521
    5b2c:	3c20202e 	stccc	0, cr2, [r0], #-184	; 0xffffff48
    5b30:	03060405 	movweq	r0, #25605	; 0x6405
    5b34:	0d056609 	stceq	6, cr6, [r5, #-36]	; 0xffffffdc
    5b38:	20200106 	eorcs	r0, r0, r6, lsl #2
    5b3c:	30060405 	andcc	r0, r6, r5, lsl #8
    5b40:	1e060d05 	cdpne	13, 0, cr0, cr6, cr5, {0}
    5b44:	42060405 	andmi	r0, r6, #83886080	; 0x5000000
    5b48:	01001f02 	tsteq	r0, r2, lsl #30
    5b4c:	00230501 	eoreq	r0, r3, r1, lsl #10
    5b50:	29a80205 	stmibcs	r8!, {r0, r2, r9}
    5b54:	c4030000 	strgt	r0, [r3], #-0
    5b58:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    5b5c:	23051517 	movwcs	r1, #21783	; 0x5517
    5b60:	01780306 	cmneq	r8, r6, lsl #6
    5b64:	06020520 	streq	r0, [r2], -r0, lsr #10
    5b68:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    5b6c:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    5b70:	0c050106 	stfeqs	f0, [r5], {6}
    5b74:	2006053c 	andcs	r0, r6, ip, lsr r5
    5b78:	31060305 	tstcc	r6, r5, lsl #6
    5b7c:	01060605 	tsteq	r6, r5, lsl #12
    5b80:	30060405 	andcc	r0, r6, r5, lsl #8
    5b84:	03052606 	movweq	r2, #22022	; 0x5606
    5b88:	06053a06 	streq	r3, [r5], -r6, lsl #20
    5b8c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5b90:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
    5b94:	08053103 	stmdaeq	r5, {r0, r1, r8, ip, sp}
    5b98:	053c7103 	ldreq	r7, [ip, #-259]!	; 0xfffffefd
    5b9c:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5ba0:	20100301 	andscs	r0, r0, r1, lsl #6
    5ba4:	01000902 	tsteq	r0, r2, lsl #18
    5ba8:	00160501 	andseq	r0, r6, r1, lsl #10
    5bac:	29f00205 	ldmibcs	r0!, {r0, r2, r9}^
    5bb0:	94030000 	strls	r0, [r3], #-0
    5bb4:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    5bb8:	06160516 			; <UNDEFINED> instruction: 0x06160516
    5bbc:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    5bc0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5bc4:	3d3f0602 	ldccc	6, cr0, [pc, #-8]!	; 5bc4 <patchImageGenfsk+0x254>
    5bc8:	4b060105 	blmi	185fe4 <__ccfg+0x16603c>
    5bcc:	01000602 	tsteq	r0, r2, lsl #12
    5bd0:	00170501 	andseq	r0, r7, r1, lsl #10
    5bd4:	2a140205 	bcs	5063f0 <__ccfg+0x4e6448>
    5bd8:	e0030000 	and	r0, r3, r0
    5bdc:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    5be0:	06170516 			; <UNDEFINED> instruction: 0x06170516
    5be4:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    5be8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5bec:	043f0602 	ldrteq	r0, [pc], #-1538	; 5bf4 <patchImageGenfsk+0x284>
    5bf0:	06350502 	ldrteq	r0, [r5], -r2, lsl #10
    5bf4:	017eb903 	cmneq	lr, r3, lsl #18
    5bf8:	02050104 	andeq	r0, r5, #4, 2
    5bfc:	2001c703 	andcs	ip, r1, r3, lsl #14
    5c00:	303f5a06 	eorscc	r5, pc, r6, lsl #20
    5c04:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    5c08:	017eb203 	cmneq	lr, r3, lsl #4
    5c0c:	01063505 	tsteq	r6, r5, lsl #10
    5c10:	02050104 	andeq	r0, r5, #4, 2
    5c14:	2001d003 	andcs	sp, r1, r3
    5c18:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5c1c:	207eb003 	rsbscs	fp, lr, r3
    5c20:	02050104 	andeq	r0, r5, #4, 2
    5c24:	01d00306 	bicseq	r0, r0, r6, lsl #6
    5c28:	48053120 	stmdami	r5, {r5, r8, ip, sp}
    5c2c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5c30:	01313106 	teqeq	r1, r6, lsl #2
    5c34:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5c38:	05015f03 	streq	r5, [r1, #-3843]	; 0xfffff0fd
    5c3c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    5c40:	01040106 	tsteq	r4, r6, lsl #2
    5c44:	03060205 	movweq	r0, #25093	; 0x6205
    5c48:	03044a1c 	movweq	r4, #18972	; 0x4a1c
    5c4c:	5f032905 	svcpl	0x00032905
    5c50:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5c54:	01062d05 	tsteq	r6, r5, lsl #26
    5c58:	02050104 	andeq	r0, r5, #4, 2
    5c5c:	2e1c0306 	cdpcs	3, 1, cr0, cr12, cr6, {0}
    5c60:	01014b14 	tsteq	r1, r4, lsl fp
    5c64:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    5c68:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5c6c:	0101000b 	tsteq	r1, fp
    5c70:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    5c74:	002a7002 	eoreq	r7, sl, r2
    5c78:	01e10300 	mvneq	r0, r0, lsl #6
    5c7c:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    5c80:	054f0602 	strbeq	r0, [pc, #-1538]	; 5686 <patchGenfskRfe+0x3ca>
    5c84:	0a051303 	beq	14a898 <__ccfg+0x12a8f0>
    5c88:	06050106 	streq	r0, [r5], -r6, lsl #2
    5c8c:	06030520 	streq	r0, [r3], -r0, lsr #10
    5c90:	06060531 			; <UNDEFINED> instruction: 0x06060531
    5c94:	06040501 	streq	r0, [r4], -r1, lsl #10
    5c98:	03055b30 	movweq	r5, #23344	; 0x5b30
    5c9c:	0308054c 	movweq	r0, #34124	; 0x854c
    5ca0:	06053c75 			; <UNDEFINED> instruction: 0x06053c75
    5ca4:	01051306 	tsteq	r5, r6, lsl #6
    5ca8:	02200c03 	eoreq	r0, r0, #768	; 0x300
    5cac:	01010005 	tsteq	r1, r5
    5cb0:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    5cb4:	002aa802 	eoreq	sl, sl, r2, lsl #16
    5cb8:	01fe0300 	mvnseq	r0, r0, lsl #6
    5cbc:	03020501 	movweq	r0, #9473	; 0x2501
    5cc0:	04010109 	streq	r0, [r1], #-265	; 0xfffffef7
    5cc4:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5cc8:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    5ccc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5cd0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5cd4:	3c57030d 	mrrccc	3, 0, r0, r7, cr13
    5cd8:	2d050304 	stccs	3, cr0, [r5, #-16]
    5cdc:	042e2903 	strteq	r2, [lr], #-2307	; 0xfffff6fd
    5ce0:	06020501 	streq	r0, [r2], -r1, lsl #10
    5ce4:	04206003 	strteq	r6, [r0], #-3
    5ce8:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5cec:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    5cf0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5cf4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5cf8:	60030602 	andvs	r0, r3, r2, lsl #12
    5cfc:	052f192e 	streq	r1, [pc, #-2350]!	; 53d6 <patchGenfskRfe+0x11a>
    5d00:	1c050107 	stfnes	f0, [r5], {7}
    5d04:	061e053c 			; <UNDEFINED> instruction: 0x061e053c
    5d08:	2e020501 	cfsh32cs	mvfx0, mvfx2, #1
    5d0c:	48053106 	stmdami	r5, {r1, r2, r8, ip, sp}
    5d10:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5d14:	1c480532 	cfstr64ne	mvdx0, [r8], {50}	; 0x32
    5d18:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    5d1c:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    5d20:	7ee40305 	cdpvc	3, 14, cr0, cr4, cr5, {0}
    5d24:	06350501 	ldrteq	r0, [r5], -r1, lsl #10
    5d28:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5d2c:	019f0302 	orrseq	r0, pc, r2, lsl #6
    5d30:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    5d34:	7ee10335 	mcrvc	3, 7, r0, cr1, cr5, {1}
    5d38:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5d3c:	9f030602 	svcls	0x00030602
    5d40:	04322001 	ldrteq	r2, [r2], #-1
    5d44:	03040504 	movweq	r0, #17668	; 0x4504
    5d48:	73030110 	movwvc	r0, #12560	; 0x3110
    5d4c:	03010501 	movweq	r0, #5377	; 0x1501
    5d50:	0405016b 	streq	r0, [r5], #-363	; 0xfffffe95
    5d54:	03011603 	movweq	r1, #5635	; 0x1603
    5d58:	03150161 	tsteq	r5, #1073741848	; 0x40000018
    5d5c:	6d03661d 	stcvs	6, cr6, [r3, #-116]	; 0xffffff8c
    5d60:	05151301 	ldreq	r1, [r5, #-769]	; 0xfffffcff
    5d64:	04010612 	streq	r0, [r1], #-1554	; 0xfffff9ee
    5d68:	03040505 	movweq	r0, #17669	; 0x4505
    5d6c:	042e01f1 	strteq	r0, [lr], #-497	; 0xfffffe0f
    5d70:	03120504 	tsteq	r2, #4, 10	; 0x1000000
    5d74:	05207e8f 	streq	r7, [r0, #-3727]!	; 0xfffff171
    5d78:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5d7c:	3d130612 	ldccc	6, cr0, [r3, #-72]	; 0xffffffb8
    5d80:	2f3d1305 	svccs	0x003d1305
    5d84:	052f1205 	streq	r1, [pc, #-517]!	; 5b87 <patchImageGenfsk+0x217>
    5d88:	12053e11 	andne	r3, r5, #272	; 0x110
    5d8c:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    5d90:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    5d94:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    5d98:	01061105 	tsteq	r6, r5, lsl #2
    5d9c:	1c050504 	cfstr32ne	mvfx0, [r5], {4}
    5da0:	2001d403 	andcs	sp, r1, r3, lsl #8
    5da4:	051f1405 	ldreq	r1, [pc, #-1029]	; 59a7 <patchImageGenfsk+0x37>
    5da8:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    5dac:	0a051307 	beq	14a9d0 <__ccfg+0x12aa28>
    5db0:	051b1806 	ldreq	r1, [fp, #-2054]	; 0xfffff7fa
    5db4:	052f0607 	streq	r0, [pc, #-1543]!	; 57b5 <patchGenfskRfe+0x4f9>
    5db8:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    5dbc:	052f0607 	streq	r0, [pc, #-1543]!	; 57bd <patchGenfskRfe+0x501>
    5dc0:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    5dc4:	132f0607 			; <UNDEFINED> instruction: 0x132f0607
    5dc8:	01060a05 	tsteq	r6, r5, lsl #20
    5dcc:	2f210d05 	svccs	0x00210d05
    5dd0:	21212f2f 			; <UNDEFINED> instruction: 0x21212f2f
    5dd4:	30040521 	andcc	r0, r4, r1, lsr #10
    5dd8:	03060705 	movweq	r0, #26373	; 0x6705
    5ddc:	13133c78 	tstne	r3, #120, 24	; 0x7800
    5de0:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5de4:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    5de8:	060c052e 	streq	r0, [ip], -lr, lsr #10
    5dec:	06040521 	streq	r0, [r4], -r1, lsr #10
    5df0:	13220601 			; <UNDEFINED> instruction: 0x13220601
    5df4:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5df8:	01060a05 	tsteq	r6, r5, lsl #20
    5dfc:	09050104 	stmdbeq	r5, {r2, r8}
    5e00:	207e9503 	rsbscs	r9, lr, r3, lsl #10
    5e04:	0a050504 	beq	14721c <__ccfg+0x127274>
    5e08:	2001eb03 	andcs	lr, r1, r3, lsl #22
    5e0c:	21060405 	tstcs	r6, r5, lsl #8
    5e10:	01060a05 	tsteq	r6, r5, lsl #20
    5e14:	2f060405 	svccs	0x00060405
    5e18:	01060a05 	tsteq	r6, r5, lsl #20
    5e1c:	2f060405 	svccs	0x00060405
    5e20:	01060a05 	tsteq	r6, r5, lsl #20
    5e24:	2f060405 	svccs	0x00060405
    5e28:	01060a05 	tsteq	r6, r5, lsl #20
    5e2c:	09050104 	stmdbeq	r5, {r2, r8}
    5e30:	7e910306 	cdpvc	3, 9, cr0, cr1, cr6, {0}
    5e34:	3602052e 	strcc	r0, [r2], -lr, lsr #10
    5e38:	053f0905 	ldreq	r0, [pc, #-2309]!	; 553b <patchGenfskRfe+0x27f>
    5e3c:	3c120302 	ldccc	3, cr0, [r2], {2}
    5e40:	3d435c3e 	stclcc	12, cr5, [r3, #-248]	; 0xffffff08
    5e44:	2506135a 	strcs	r1, [r6, #-858]	; 0xfffffca6
    5e48:	0569061b 	strbeq	r0, [r9, #-1563]!	; 0xfffff9e5
    5e4c:	05010630 	streq	r0, [r1, #-1584]	; 0xfffff9d0
    5e50:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5e54:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    5e58:	052f0602 	streq	r0, [pc, #-1538]!	; 585e <patchGenfskRfe+0x5a2>
    5e5c:	051f062d 	ldreq	r0, [pc, #-1581]	; 5837 <patchGenfskRfe+0x57b>
    5e60:	01052102 	tsteq	r5, r2, lsl #2
    5e64:	03020528 	movweq	r0, #9512	; 0x2528
    5e68:	33022e78 	movwcc	r2, #11896	; 0x2e78
    5e6c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5e70:	0205001e 	andeq	r0, r5, #30
    5e74:	00002c28 	andeq	r2, r0, r8, lsr #24
    5e78:	0103b403 	tsteq	r3, r3, lsl #8
    5e7c:	13140205 	tstne	r4, #1342177280	; 0x50000000
    5e80:	04010903 	streq	r0, [r1], #-2307	; 0xfffff6fd
    5e84:	03030502 	movweq	r0, #13570	; 0x3502
    5e88:	04017dee 	streq	r7, [r1], #-3566	; 0xfffff212
    5e8c:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    5e90:	01028603 	tsteq	r2, r3, lsl #12
    5e94:	30050204 	andcc	r0, r5, r4, lsl #4
    5e98:	2e7dfa03 	vaddcs.f32	s31, s26, s6
    5e9c:	057b3205 	ldrbeq	r3, [fp, #-517]!	; 0xfffffdfb
    5ea0:	05290603 	streq	r0, [r9, #-1539]!	; 0xfffff9fd
    5ea4:	32051705 	andcc	r1, r5, #1310720	; 0x140000
    5ea8:	09050106 	stmdbeq	r5, {r1, r2, r8}
    5eac:	0a052106 	beq	14e2cc <__ccfg+0x12e324>
    5eb0:	03050106 	movweq	r0, #20742	; 0x5106
    5eb4:	04330620 	ldrteq	r0, [r3], #-1568	; 0xfffff9e0
    5eb8:	060a0501 	streq	r0, [sl], -r1, lsl #10
    5ebc:	01028b03 	tsteq	r2, r3, lsl #22
    5ec0:	30050204 	andcc	r0, r5, r4, lsl #4
    5ec4:	207df503 	rsbscs	pc, sp, r3, lsl #10
    5ec8:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    5ecc:	20029e03 	andcs	r9, r2, r3, lsl #28
    5ed0:	30050204 	andcc	r0, r5, r4, lsl #4
    5ed4:	207de203 	rsbscs	lr, sp, r3, lsl #4
    5ed8:	2d050104 	stfcss	f0, [r5, #-16]
    5edc:	20029103 	andcs	r9, r2, r3, lsl #2
    5ee0:	30050204 	andcc	r0, r5, r4, lsl #4
    5ee4:	2e7def03 	cdpcs	15, 7, cr14, cr13, cr3, {0}
    5ee8:	02050104 	andeq	r0, r5, #4, 2
    5eec:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    5ef0:	06270558 			; <UNDEFINED> instruction: 0x06270558
    5ef4:	03050501 	movweq	r0, #21761	; 0x5501
    5ef8:	0a05200f 	beq	14df3c <__ccfg+0x12df94>
    5efc:	052e7103 	streq	r7, [lr, #-259]!	; 0xfffffefd
    5f00:	052f0606 	streq	r0, [pc, #-1542]!	; 5902 <patchGenfskRfe+0x646>
    5f04:	06051303 	streq	r1, [r5], -r3, lsl #6
    5f08:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5f0c:	01013d06 	tsteq	r1, r6, lsl #26
    5f10:	06190513 			; <UNDEFINED> instruction: 0x06190513
    5f14:	200d0514 	andcs	r0, sp, r4, lsl r5
    5f18:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    5f1c:	06052007 	streq	r2, [r5], -r7
    5f20:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    5f24:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5f28:	20210501 	eorcs	r0, r1, r1, lsl #10
    5f2c:	054a3705 	strbeq	r3, [sl, #-1797]	; 0xfffff8fb
    5f30:	053f0605 	ldreq	r0, [pc, #-1541]!	; 5933 <patchGenfskRfe+0x677>
    5f34:	05160615 	ldreq	r0, [r6, #-1557]	; 0xfffff9eb
    5f38:	05052a08 	streq	r2, [r5, #-2568]	; 0xfffff5f8
    5f3c:	1f052406 	svcne	0x00052406
    5f40:	13050106 	movwne	r0, #20742	; 0x5106
    5f44:	201f0520 	andscs	r0, pc, r0, lsr #10
    5f48:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    5f4c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    5f50:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    5f54:	052f0605 	streq	r0, [pc, #-1541]!	; 5957 <patchGenfskRfe+0x69b>
    5f58:	0f056e04 	svceq	0x00056e04
    5f5c:	13050106 	movwne	r0, #20742	; 0x5106
    5f60:	2e6a0306 	cdpcs	3, 6, cr0, cr10, cr6, {0}
    5f64:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5f68:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    5f6c:	05052f1b 	streq	r2, [r5, #-3867]	; 0xfffff0e5
    5f70:	3c120306 	ldccc	3, cr0, [r2], {6}
    5f74:	0a030205 	beq	c6790 <__ccfg+0xa67e8>
    5f78:	0605054a 	streq	r0, [r5], -sl, asr #10
    5f7c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5f80:	14010121 	strne	r0, [r1], #-289	; 0xfffffedf
    5f84:	01050101 	tsteq	r5, r1, lsl #2
    5f88:	03053106 	movweq	r3, #20742	; 0x5106
    5f8c:	6901052b 	stmdbvs	r1, {r0, r1, r3, r5, r8, sl}
    5f90:	01001302 	tsteq	r0, r2, lsl #6
    5f94:	00010501 	andeq	r0, r1, r1, lsl #10
    5f98:	2cf80205 	lfmcs	f0, 2, [r8], #20
    5f9c:	8c030000 	stchi	0, cr0, [r3], {-0}
    5fa0:	06010104 	streq	r0, [r1], -r4, lsl #2
    5fa4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5fa8:	05820a03 	streq	r0, [r2, #2563]	; 0xa03
    5fac:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5fb0:	04052006 	streq	r2, [r5], #-6
    5fb4:	05304c06 	ldreq	r4, [r0, #-3078]!	; 0xfffff3fa
    5fb8:	0e054f03 	cdpeq	15, 0, cr4, cr5, cr3, {0}
    5fbc:	06050106 	streq	r0, [r5], -r6, lsl #2
    5fc0:	06040520 	streq	r0, [r4], -r0, lsr #10
    5fc4:	0607054b 	streq	r0, [r7], -fp, asr #10
    5fc8:	06050501 	streq	r0, [r5], -r1, lsl #10
    5fcc:	36030521 	strcc	r0, [r3], -r1, lsr #10
    5fd0:	01060e05 	tsteq	r6, r5, lsl #28
    5fd4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    5fd8:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    5fdc:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    5fe0:	0705581b 	smladeq	r5, fp, r8, r5
    5fe4:	06050520 	streq	r0, [r5], -r0, lsr #10
    5fe8:	05130633 	ldreq	r0, [r3, #-1587]	; 0xfffff9cd
    5fec:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    5ff0:	1f0c0521 	svcne	0x000c0521
    5ff4:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    5ff8:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    5ffc:	06012106 	streq	r2, [r1], -r6, lsl #2
    6000:	2e062e20 	cdpcs	14, 0, cr2, cr6, cr0, {1}
    6004:	72030a05 	andvc	r0, r3, #20480	; 0x5000
    6008:	060d054a 	streq	r0, [sp], -sl, asr #10
    600c:	06040501 	streq	r0, [r4], -r1, lsl #10
    6010:	03020530 	movweq	r0, #9520	; 0x2530
    6014:	05017dde 	streq	r7, [r1, #-3550]	; 0xfffff222
    6018:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    601c:	88030602 	stmdahi	r3, {r1, r9, sl}
    6020:	27052e01 	strcs	r2, [r5, -r1, lsl #28]
    6024:	0a050106 	beq	146444 <__ccfg+0x12649c>
    6028:	06060520 	streq	r0, [r6], -r0, lsr #10
    602c:	1303052f 	movwne	r0, #13615	; 0x352f
    6030:	01060e05 	tsteq	r6, r5, lsl #28
    6034:	2d061305 	stccs	3, cr1, [r6, #-20]	; 0xffffffec
    6038:	01061b05 	tsteq	r6, r5, lsl #22
    603c:	20060605 	andcs	r0, r6, r5, lsl #12
    6040:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    6044:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    6048:	051f0613 	ldreq	r0, [pc, #-1555]	; 5a3d <patchImageGenfsk+0xcd>
    604c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6050:	47033016 	smladmi	r3, r6, r0, r3
    6054:	05010174 	streq	r0, [r1, #-372]	; 0xfffffe8c
    6058:	01cd0304 	biceq	r0, sp, r4, lsl #6
    605c:	03020501 	movweq	r0, #9473	; 0x2501
    6060:	13017ede 	movwne	r7, #7902	; 0x1ede
    6064:	06050514 			; <UNDEFINED> instruction: 0x06050514
    6068:	aa030601 	bge	c7874 <__ccfg+0xa78cc>
    606c:	01154a01 	tsteq	r5, r1, lsl #20
    6070:	08051401 	stmdaeq	r5, {r0, sl, ip}
    6074:	10050106 	andne	r0, r5, r6, lsl #2
    6078:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    607c:	22060605 	andcs	r0, r6, #5242880	; 0x500000
    6080:	01062905 	tsteq	r6, r5, lsl #18
    6084:	31060505 	tstcc	r6, r5, lsl #10
    6088:	01061b05 	tsteq	r6, r5, lsl #22
    608c:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    6090:	01060605 	tsteq	r6, r5, lsl #12
    6094:	30060405 	andcc	r0, r6, r5, lsl #8
    6098:	060f054b 	streq	r0, [pc], -fp, asr #10
    609c:	20070501 	andcs	r0, r7, r1, lsl #10
    60a0:	30060505 	andcc	r0, r6, r5, lsl #10
    60a4:	05350405 	ldreq	r0, [r5, #-1029]!	; 0xfffffbfb
    60a8:	0e052a0b 	vmlaeq.f32	s4, s10, s22
    60ac:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    60b0:	03053006 	movweq	r3, #20486	; 0x5006
    60b4:	0607056b 	streq	r0, [r7], -fp, ror #10
    60b8:	20060501 	andcs	r0, r6, r1, lsl #10
    60bc:	33060405 	movwcc	r0, #25605	; 0x6405
    60c0:	07054b59 	smlsdeq	r5, r9, fp, r4
    60c4:	03050106 	movweq	r0, #20742	; 0x5106
    60c8:	4a100306 	bmi	406ce8 <__ccfg+0x3e6d40>
    60cc:	9e030205 	cdpls	2, 0, cr0, cr3, cr5, {0}
    60d0:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    60d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    60d8:	00d60306 	sbcseq	r0, r6, r6, lsl #6
    60dc:	05010158 	streq	r0, [r1, #-344]	; 0xfffffea8
    60e0:	028d0303 	addeq	r0, sp, #201326592	; 0xc000000
    60e4:	2e1e0301 	cdpcs	3, 1, cr0, cr14, cr1, {0}
    60e8:	01061905 	tsteq	r6, r5, lsl #18
    60ec:	05213105 	streq	r3, [r1, #-261]!	; 0xfffffefb
    60f0:	03052d19 	movweq	r2, #23833	; 0x5d19
    60f4:	31052106 	tstcc	r5, r6, lsl #2
    60f8:	03050106 	movweq	r0, #20742	; 0x5106
    60fc:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    6100:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    6104:	06070532 			; <UNDEFINED> instruction: 0x06070532
    6108:	20060501 	andcs	r0, r6, r1, lsl #10
    610c:	5b060305 	blpl	186d28 <__ccfg+0x166d80>
    6110:	01060805 	tsteq	r6, r5, lsl #16
    6114:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    6118:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    611c:	13054103 	movwne	r4, #20739	; 0x5103
    6120:	06050106 	streq	r0, [r5], -r6, lsl #2
    6124:	0604052e 	streq	r0, [r4], -lr, lsr #10
    6128:	0607054b 	streq	r0, [r7], -fp, asr #10
    612c:	06050501 	streq	r0, [r5], -r1, lsl #10
    6130:	061b0541 	ldreq	r0, [fp], -r1, asr #10
    6134:	06050501 	streq	r0, [r5], -r1, lsl #10
    6138:	0633052f 	ldrteq	r0, [r3], -pc, lsr #10
    613c:	06050501 	streq	r0, [r5], -r1, lsl #10
    6140:	04052f3e 	streq	r2, [r5], #-3902	; 0xfffff0c2
    6144:	060b053f 			; <UNDEFINED> instruction: 0x060b053f
    6148:	06040501 	streq	r0, [r4], -r1, lsl #10
    614c:	013c0903 	teqeq	ip, r3, lsl #18
    6150:	06030501 	streq	r0, [r3], -r1, lsl #10
    6154:	5800c303 	stmdapl	r0, {r0, r1, r8, r9, lr, pc}
    6158:	6d034206 	sfmvs	f4, 4, [r3, #-24]	; 0xffffffe8
    615c:	0a053d20 	beq	1555e4 <__ccfg+0x13563c>
    6160:	03050106 	movweq	r0, #20742	; 0x5106
    6164:	052e0c03 	streq	r0, [lr, #-3075]!	; 0xfffff3fd
    6168:	2074030a 	rsbscs	r0, r4, sl, lsl #6
    616c:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    6170:	01060b05 	tsteq	r6, r5, lsl #22
    6174:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    6178:	03150101 	tsteq	r5, #1073741824	; 0x40000000
    617c:	0705200b 	streq	r2, [r5, -fp]
    6180:	06050106 	streq	r0, [r5], -r6, lsl #2
    6184:	581f052e 	ldmdapl	pc, {r1, r2, r3, r5, r8, sl}	; <UNPREDICTABLE>
    6188:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
    618c:	0405493e 	streq	r4, [r5], #-2366	; 0xfffff6c2
    6190:	01053e06 	tsteq	r5, r6, lsl #28
    6194:	2002013f 	andcs	r0, r2, pc, lsr r1
    6198:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    619c:	0205001f 	andeq	r0, r5, #31
    61a0:	00002ee8 	andeq	r2, r0, r8, ror #29
    61a4:	0103eb03 	tsteq	r3, r3, lsl #22
    61a8:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    61ac:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
    61b0:	05052506 	streq	r2, [r5, #-1286]	; 0xfffffafa
    61b4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    61b8:	05020423 	streq	r0, [r2, #-1059]	; 0xfffffbdd
    61bc:	b0030630 	andlt	r0, r3, r0, lsr r6
    61c0:	0305667e 	movweq	r6, #22142	; 0x567e
    61c4:	05051b06 	streq	r1, [r5, #-2822]	; 0xfffff4fa
    61c8:	06300517 			; <UNDEFINED> instruction: 0x06300517
    61cc:	060a0501 	streq	r0, [sl], -r1, lsl #10
    61d0:	060b0521 	streq	r0, [fp], -r1, lsr #10
    61d4:	20030501 	andcs	r0, r3, r1, lsl #10
    61d8:	02050104 	andeq	r0, r5, #4, 2
    61dc:	01d60306 	bicseq	r0, r6, r6, lsl #6
    61e0:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    61e4:	7e810303 	cdpvc	3, 8, cr0, cr1, cr3, {0}
    61e8:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    61ec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    61f0:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    61f4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    61f8:	7dfe0332 	ldclvc	3, cr0, [lr, #200]!	; 0xc8
    61fc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    6200:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    6204:	2e82062e 	cdpcs	6, 8, cr0, cr2, cr14, {1}
    6208:	14014a58 	strne	r4, [r1], #-2648	; 0xfffff5a8
    620c:	01055801 	tsteq	r5, r1, lsl #16
    6210:	0d021306 	stceq	3, cr1, [r2, #-24]	; 0xffffffe8
    6214:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6218:	02050025 	andeq	r0, r5, #37	; 0x25
    621c:	00002f58 	andeq	r2, r0, r8, asr pc
    6220:	0107d603 	tsteq	r7, r3, lsl #12
    6224:	09030205 	stmdbeq	r3, {r0, r2, r9}
    6228:	06250501 	strteq	r0, [r5], -r1, lsl #10
    622c:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    6230:	2e09030d 	cdpcs	3, 0, cr0, cr9, cr13, {0}
    6234:	77032505 	strvc	r2, [r3, -r5, lsl #10]
    6238:	03050520 	movweq	r0, #21792	; 0x5520
    623c:	03052009 	movweq	r2, #20489	; 0x5009
    6240:	36063006 	strcc	r3, [r6], -r6
    6244:	03060205 	movweq	r0, #25093	; 0x6205
    6248:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    624c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6250:	0e052406 	cdpeq	4, 0, cr2, cr5, cr6, {0}
    6254:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6258:	06030520 	streq	r0, [r3], -r0, lsr #10
    625c:	06070530 			; <UNDEFINED> instruction: 0x06070530
    6260:	06020537 			; <UNDEFINED> instruction: 0x06020537
    6264:	06040528 	streq	r0, [r4], -r8, lsr #10
    6268:	017ea103 	cmneq	lr, r3, lsl #2
    626c:	df030905 	svcle	0x00030905
    6270:	0e052001 	cdpeq	0, 0, cr2, cr5, cr1, {0}
    6274:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
    6278:	05281305 	streq	r1, [r8, #-773]!	; 0xfffffcfb
    627c:	01cc030b 	biceq	r0, ip, fp, lsl #6
    6280:	0602052e 	streq	r0, [r2], -lr, lsr #10
    6284:	7e9b0323 	cdpvc	3, 9, cr0, cr11, cr3, {1}
    6288:	13141301 	tstne	r4, #67108864	; 0x4000000
    628c:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    6290:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
    6294:	055d0603 	ldrbeq	r0, [sp, #-1539]	; 0xfffff9fd
    6298:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    629c:	052f0604 	streq	r0, [pc, #-1540]!	; 5ca0 <__exidx_end+0x60>
    62a0:	0e055a03 	vmlaeq.f32	s10, s10, s6
    62a4:	03050106 	movweq	r0, #20742	; 0x5106
    62a8:	06053006 	streq	r3, [r5], -r6
    62ac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    62b0:	13053006 	movwne	r3, #20486	; 0x5006
    62b4:	03050106 	movweq	r0, #20742	; 0x5106
    62b8:	13133206 	tstne	r3, #1610612736	; 0x60000000
    62bc:	14060605 	strne	r0, [r6], #-1541	; 0xfffff9fb
    62c0:	051f1705 	ldreq	r1, [pc, #-1797]	; 5bc3 <patchImageGenfsk+0x253>
    62c4:	17052106 	strne	r2, [r5, -r6, lsl #2]
    62c8:	2b13051f 	blcs	4c774c <__ccfg+0x4a77a4>
    62cc:	31060305 	tstcc	r6, r5, lsl #6
    62d0:	01060e05 	tsteq	r6, r5, lsl #28
    62d4:	21060305 	tstcs	r6, r5, lsl #6
    62d8:	01060605 	tsteq	r6, r5, lsl #12
    62dc:	26060205 	strcs	r0, [r6], -r5, lsl #4
    62e0:	01061105 	tsteq	r6, r5, lsl #2
    62e4:	23060205 	movwcs	r0, #25093	; 0x6205
    62e8:	01061a05 	tsteq	r6, r5, lsl #20
    62ec:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
    62f0:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    62f4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    62f8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    62fc:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6300:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    6304:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6308:	0b052002 	bleq	14e318 <__ccfg+0x12e370>
    630c:	2001c003 	andcs	ip, r1, r3
    6310:	c0031505 	andgt	r1, r3, r5, lsl #10
    6314:	0205207e 	andeq	r2, r5, #126	; 0x7e
    6318:	19052306 	stmdbne	r5, {r1, r2, r8, r9, sp}
    631c:	0b050106 	bleq	14673c <__ccfg+0x126794>
    6320:	2001bd03 	andcs	fp, r1, r3, lsl #26
    6324:	c3031905 	movwgt	r1, #14597	; 0x3905
    6328:	0205207e 	andeq	r2, r5, #126	; 0x7e
    632c:	15132306 	ldrne	r2, [r3, #-774]	; 0xfffffcfa
    6330:	25051613 	strcs	r1, [r5, #-1555]	; 0xfffff9ed
    6334:	01770306 	cmneq	r7, r6, lsl #6
    6338:	03060205 	movweq	r0, #25093	; 0x6205
    633c:	0905660c 	stmdbeq	r5, {r2, r3, r9, sl, sp, lr}
    6340:	0b050106 	bleq	146760 <__ccfg+0x1267b8>
    6344:	2001ae03 	andcs	sl, r1, r3, lsl #28
    6348:	d2030905 	andle	r0, r3, #81920	; 0x14000
    634c:	02052e7e 	andeq	r2, r5, #2016	; 0x7e0
    6350:	01ab0306 			; <UNDEFINED> instruction: 0x01ab0306
    6354:	0609052e 	streq	r0, [r9], -lr, lsr #10
    6358:	06020501 	streq	r0, [r2], -r1, lsl #10
    635c:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    6360:	2e090501 	cfsh32cs	mvfx0, mvfx9, #1
    6364:	05270205 	streq	r0, [r7, #-517]!	; 0xfffffdfb
    6368:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    636c:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    6370:	01130101 	tsteq	r3, r1, lsl #2
    6374:	01011301 	tsteq	r1, r1, lsl #6
    6378:	053f4f15 	ldreq	r4, [pc, #-3861]!	; 546b <patchGenfskRfe+0x1af>
    637c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6380:	02054a0a 	andeq	r4, r5, #40960	; 0xa000
    6384:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    6388:	03050106 	movweq	r0, #20742	; 0x5106
    638c:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    6390:	06220560 	strteq	r0, [r2], -r0, ror #10
    6394:	03440501 	movteq	r0, #17665	; 0x4501
    6398:	053c7ba0 	ldreq	r7, [ip, #-2976]!	; 0xfffff460
    639c:	04e00322 	strbteq	r0, [r0], #802	; 0x322
    63a0:	06020520 	streq	r0, [r2], -r0, lsr #10
    63a4:	7b9b0324 	blvc	fe6c703c <_estack+0xde6c203c>
    63a8:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    63ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    63b0:	0644053d 			; <UNDEFINED> instruction: 0x0644053d
    63b4:	2d2e0501 	cfstr32cs	mvfx0, [lr, #-4]!
    63b8:	03060205 	movweq	r0, #25093	; 0x6205
    63bc:	200804e7 	andcs	r0, r8, r7, ror #9
    63c0:	06280532 			; <UNDEFINED> instruction: 0x06280532
    63c4:	23020501 	movwcs	r0, #9473	; 0x2501
    63c8:	051d2805 	ldreq	r2, [sp, #-2053]	; 0xfffff7fb
    63cc:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    63d0:	02052f09 	andeq	r2, r5, #9, 30	; 0x24
    63d4:	0630054e 	ldrteq	r0, [r0], -lr, asr #10
    63d8:	2f010501 	svccs	0x00010501
    63dc:	01002702 	tsteq	r0, r2, lsl #14
    63e0:	0002ab01 	andeq	sl, r2, r1, lsl #22
    63e4:	4f000300 	svcmi	0x00000300
    63e8:	02000001 	andeq	r0, r0, #1
    63ec:	0d0efb01 	vstreq	d15, [lr, #-4]
    63f0:	01010100 	mrseq	r0, (UNDEF: 17)
    63f4:	00000001 	andeq	r0, r0, r1
    63f8:	01000001 	tsteq	r0, r1
    63fc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6400:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6404:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6408:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    640c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6410:	61652d65 	cmnvs	r5, r5, ror #26
    6414:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6418:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    641c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6420:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6424:	6f682f00 	svcvs	0x00682f00
    6428:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    642c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6430:	442f6e65 	strtmi	r6, [pc], #-3685	; 6438 <__exidx_end+0x7f8>
    6434:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6438:	4f2f706f 	svcmi	0x002f706f
    643c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6440:	502f5445 	eorpl	r5, pc, r5, asr #8
    6444:	534f4349 	movtpl	r4, #62281	; 0xf349
    6448:	6369502f 	cmnvs	r9, #47	; 0x2f
    644c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6450:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6454:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6458:	2f656d6f 	svccs	0x00656d6f
    645c:	70657473 	rsbvc	r7, r5, r3, ror r4
    6460:	2f6e6568 	svccs	0x006e6568
    6464:	6b736544 	blvs	1cdf97c <__ccfg+0x1cbf9d4>
    6468:	2f706f74 	svccs	0x00706f74
    646c:	4f534c4f 	svcmi	0x00534c4f
    6470:	2f54454e 	svccs	0x0054454e
    6474:	4f434950 	svcmi	0x00434950
    6478:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    647c:	00534f63 	subseq	r4, r3, r3, ror #30
    6480:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 63cc <__exidx_end+0x78c>
    6484:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6488:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    648c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6490:	6f746b73 	svcvs	0x00746b73
    6494:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6498:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    649c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    64a0:	2f534f43 	svccs	0x00534f43
    64a4:	4f636950 	svcmi	0x00636950
    64a8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    64ac:	2f736269 	svccs	0x00736269
    64b0:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    64b4:	70000049 	andvc	r0, r0, r9, asr #32
    64b8:	5f67756c 	svcpl	0x0067756c
    64bc:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    64c0:	0063632e 	rsbeq	r6, r3, lr, lsr #6
    64c4:	73000000 	movwvc	r0, #0
    64c8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    64cc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    64d0:	73000001 	movwvc	r0, #1
    64d4:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    64d8:	00682e67 	rsbeq	r2, r8, r7, ror #28
    64dc:	61000001 	tstvs	r0, r1
    64e0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    64e4:	00020068 	andeq	r0, r2, r8, rrx
    64e8:	63616d00 	cmnvs	r1, #0, 26
    64ec:	00682e68 	rsbeq	r2, r8, r8, ror #28
    64f0:	70000002 	andvc	r0, r0, r2
    64f4:	5f736e69 	svcpl	0x00736e69
    64f8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    64fc:	00020068 	andeq	r0, r2, r8, rrx
    6500:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6504:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6508:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    650c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6510:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6514:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6518:	00030068 	andeq	r0, r3, r8, rrx
    651c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    6520:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6524:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6528:	3c000004 	stccc	0, cr0, [r0], {4}
    652c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6530:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    6534:	0000003e 	andeq	r0, r0, lr, lsr r0
    6538:	2b050000 	blcs	146540 <__ccfg+0x126598>
    653c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    6540:	03000030 	movweq	r0, #48	; 0x30
    6544:	02050136 	andeq	r0, r5, #-2147483635	; 0x8000000d
    6548:	062b0516 			; <UNDEFINED> instruction: 0x062b0516
    654c:	2410050e 	ldrcs	r0, [r0], #-1294	; 0xfffffaf2
    6550:	051c2b05 	ldreq	r2, [ip, #-2821]	; 0xfffff4fb
    6554:	05052410 	streq	r2, [r5, #-1040]	; 0xfffffbf0
    6558:	2015053c 	andscs	r0, r5, ip, lsr r5
    655c:	3f060205 	svccc	0x00060205
    6560:	01061205 	tsteq	r6, r5, lsl #4
    6564:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    6568:	01060905 	tsteq	r6, r5, lsl #18
    656c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    6570:	01010004 	tsteq	r1, r4
    6574:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    6578:	0030f002 	eorseq	pc, r0, r2
    657c:	00c20300 	sbceq	r0, r2, r0, lsl #6
    6580:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    6584:	01061005 	tsteq	r6, r5
    6588:	051e1f05 	ldreq	r1, [lr, #-3845]	; 0xfffff0fb
    658c:	05052210 	streq	r2, [r5, #-528]	; 0xfffffdf0
    6590:	210a0520 	tstcs	sl, r0, lsr #10
    6594:	052d2a05 	streq	r2, [sp, #-2565]!	; 0xfffff5fb
    6598:	15052e1e 	strne	r2, [r5, #-3614]	; 0xfffff1e2
    659c:	06020520 	streq	r0, [r2], -r0, lsr #10
    65a0:	061e0531 			; <UNDEFINED> instruction: 0x061e0531
    65a4:	22090501 	andcs	r0, r9, #4194304	; 0x400000
    65a8:	051e1e05 	ldreq	r1, [lr, #-3589]	; 0xfffff1fb
    65ac:	0205200f 	andeq	r2, r5, #15
    65b0:	01052206 	tsteq	r5, r6, lsl #4
    65b4:	03021306 	movweq	r1, #8966	; 0x2306
    65b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    65bc:	02050037 	andeq	r0, r5, #55	; 0x37
    65c0:	00003114 	andeq	r3, r0, r4, lsl r1
    65c4:	0100cc03 	tsteq	r0, r3, lsl #24
    65c8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    65cc:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    65d0:	01052e16 	tsteq	r5, r6, lsl lr
    65d4:	00010221 	andeq	r0, r1, r1, lsr #4
    65d8:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    65dc:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
    65e0:	03000031 	movweq	r0, #49	; 0x31
    65e4:	050100d1 	streq	r0, [r1, #-209]	; 0xffffff2f
    65e8:	01051402 	tsteq	r5, r2, lsl #8
    65ec:	02021406 	andeq	r1, r2, #100663296	; 0x6000000
    65f0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    65f4:	02050025 	andeq	r0, r5, #37	; 0x25
    65f8:	00003120 	andeq	r3, r0, r0, lsr #2
    65fc:	0100d703 	tsteq	r0, r3, lsl #14
    6600:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    6604:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    6608:	01010002 	tsteq	r1, r2
    660c:	05003905 	streq	r3, [r0, #-2309]	; 0xfffff6fb
    6610:	00312402 	eorseq	r2, r1, r2, lsl #8
    6614:	01200300 			; <UNDEFINED> instruction: 0x01200300
    6618:	26061005 	strcs	r1, [r6], -r5
    661c:	7a033905 	bvc	d4a38 <__ccfg+0xb4a90>
    6620:	06020520 	streq	r0, [r2], -r0, lsr #10
    6624:	05051424 	streq	r1, [r5, #-1060]	; 0xfffffbdc
    6628:	39050106 	stmdbcc	r5, {r1, r2, r8}
    662c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    6630:	03052605 	movweq	r2, #22021	; 0x5605
    6634:	20052106 	andcs	r2, r5, r6, lsl #2
    6638:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    663c:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    6640:	06060521 	streq	r0, [r6], -r1, lsr #10
    6644:	060f0501 	streq	r0, [pc], -r1, lsl #10
    6648:	13040522 	movwne	r0, #17698	; 0x4522
    664c:	01061205 	tsteq	r6, r5, lsl #4
    6650:	49061605 	stmdbmi	r6, {r0, r2, r9, sl, ip}
    6654:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    6658:	12051304 	andne	r1, r5, #4, 6	; 0x10000000
    665c:	16050106 	strne	r0, [r5], -r6, lsl #2
    6660:	0f051f06 	svceq	0x00051f06
    6664:	17020501 	strne	r0, [r2, -r1, lsl #10]
    6668:	01061005 	tsteq	r6, r5
    666c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    6670:	053f0602 	ldreq	r0, [pc, #-1538]!	; 6076 <__exidx_end+0x436>
    6674:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    6678:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    667c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    6680:	01051d0a 	tsteq	r5, sl, lsl #26
    6684:	06040532 			; <UNDEFINED> instruction: 0x06040532
    6688:	02207503 	eoreq	r7, r0, #12582912	; 0xc00000
    668c:	01010009 	tsteq	r1, r9
    6690:	000001a4 	andeq	r0, r0, r4, lsr #3
    6694:	01290003 			; <UNDEFINED> instruction: 0x01290003
    6698:	01020000 	mrseq	r0, (UNDEF: 2)
    669c:	000d0efb 	strdeq	r0, [sp], -fp
    66a0:	01010101 	tsteq	r1, r1, lsl #2
    66a4:	01000000 	mrseq	r0, (UNDEF: 0)
    66a8:	2f010000 	svccs	0x00010000
    66ac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    66b0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    66b4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    66b8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    66bc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    66c0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    66c4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    66c8:	4349502f 	movtmi	r5, #36911	; 0x902f
    66cc:	502f534f 	eorpl	r5, pc, pc, asr #6
    66d0:	534f6369 	movtpl	r6, #62313	; 0xf369
    66d4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    66d8:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    66dc:	61697265 	cmnvs	r9, r5, ror #4
    66e0:	752f006c 	strvc	r0, [pc, #-108]!	; 667c <__exidx_end+0xa3c>
    66e4:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6520 <__exidx_end+0x8e0>
    66e8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    66ec:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    66f0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    66f4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    66f8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    66fc:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    6700:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    6704:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6708:	2f006564 	svccs	0x00006564
    670c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6710:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    6714:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6718:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    671c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6720:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6724:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6728:	4349502f 	movtmi	r5, #36911	; 0x902f
    672c:	502f534f 	eorpl	r5, pc, pc, asr #6
    6730:	534f6369 	movtpl	r6, #62313	; 0xf369
    6734:	3143432f 	cmpcc	r3, pc, lsr #6
    6738:	00585833 	subseq	r5, r8, r3, lsr r8
    673c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6688 <__exidx_end+0xa48>
    6740:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    6744:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    6748:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    674c:	6f746b73 	svcvs	0x00746b73
    6750:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6754:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6758:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    675c:	2f534f43 	svccs	0x00534f43
    6760:	4f636950 	svcmi	0x00636950
    6764:	5f000053 	svcpl	0x00000053
    6768:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    676c:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    6770:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    6774:	00000100 	andeq	r0, r0, r0, lsl #2
    6778:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    677c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6780:	00000200 	andeq	r0, r0, r0, lsl #4
    6784:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6788:	0300682e 	movweq	r6, #2094	; 0x82e
    678c:	616d0000 	cmnvs	sp, r0
    6790:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6794:	00000300 	andeq	r0, r0, r0, lsl #6
    6798:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    679c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    67a0:	0300682e 	movweq	r6, #2094	; 0x82e
    67a4:	75620000 	strbvc	r0, [r2, #-0]!
    67a8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    67ac:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    67b0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    67b4:	73000003 	movwvc	r0, #3
    67b8:	6f697379 	svcvs	0x00697379
    67bc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    67c0:	05000000 	streq	r0, [r0, #-0]
    67c4:	02050001 	andeq	r0, r5, #1
    67c8:	0000316c 	andeq	r3, r0, ip, ror #2
    67cc:	01011c03 	tsteq	r1, r3, lsl #24
    67d0:	3c062006 	stccc	0, cr2, [r6], {6}
    67d4:	013c2603 	teqeq	ip, r3, lsl #12
    67d8:	5f030205 	svcpl	0x00030205
    67dc:	15131358 	ldrne	r1, [r3, #-856]	; 0xfffffca8
    67e0:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    67e4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    67e8:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    67ec:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    67f0:	052f0603 	streq	r0, [pc, #-1539]!	; 61f5 <__exidx_end+0x5b5>
    67f4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    67f8:	0a053c07 	beq	15581c <__ccfg+0x135874>
    67fc:	06020528 	streq	r0, [r2], -r8, lsr #10
    6800:	060a052e 	streq	r0, [sl], -lr, lsr #10
    6804:	06020501 	streq	r0, [r2], -r1, lsl #10
    6808:	06060583 	streq	r0, [r6], -r3, lsl #11
    680c:	211f2101 	tstcs	pc, r1, lsl #2
    6810:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    6814:	06060521 	streq	r0, [r6], -r1, lsr #10
    6818:	06020501 	streq	r0, [r2], -r1, lsl #10
    681c:	06050521 	streq	r0, [r5], -r1, lsr #10
    6820:	06030501 	streq	r0, [r3], -r1, lsl #10
    6824:	74033d30 	strvc	r3, [r3], #-3376	; 0xfffff2d0
    6828:	060d054a 	streq	r0, [sp], -sl, asr #10
    682c:	20110501 	andscs	r0, r1, r1, lsl #10
    6830:	02200705 	eoreq	r0, r0, #1310720	; 0x140000
    6834:	01010008 	tsteq	r1, r8
    6838:	0000024e 	andeq	r0, r0, lr, asr #4
    683c:	01280003 			; <UNDEFINED> instruction: 0x01280003
    6840:	01020000 	mrseq	r0, (UNDEF: 2)
    6844:	000d0efb 	strdeq	r0, [sp], -fp
    6848:	01010101 	tsteq	r1, r1, lsl #2
    684c:	01000000 	mrseq	r0, (UNDEF: 0)
    6850:	2f010000 	svccs	0x00010000
    6854:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6858:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    685c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    6860:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6864:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6868:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    686c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6870:	4349502f 	movtmi	r5, #36911	; 0x902f
    6874:	502f534f 	eorpl	r5, pc, pc, asr #6
    6878:	534f6369 	movtpl	r6, #62313	; 0xf369
    687c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    6880:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    6884:	61697265 	cmnvs	r9, r5, ror #4
    6888:	752f006c 	strvc	r0, [pc, #-108]!	; 6824 <__exidx_end+0xbe4>
    688c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 66c8 <__exidx_end+0xa88>
    6890:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    6894:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    6898:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    689c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    68a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    68a4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    68a8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    68ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    68b0:	2f006564 	svccs	0x00006564
    68b4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    68b8:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    68bc:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    68c0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    68c4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    68c8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    68cc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    68d0:	4349502f 	movtmi	r5, #36911	; 0x902f
    68d4:	502f534f 	eorpl	r5, pc, pc, asr #6
    68d8:	534f6369 	movtpl	r6, #62313	; 0xf369
    68dc:	3143432f 	cmpcc	r3, pc, lsr #6
    68e0:	00585833 	subseq	r5, r8, r3, lsr r8
    68e4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6830 <__exidx_end+0xbf0>
    68e8:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    68ec:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    68f0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    68f4:	6f746b73 	svcvs	0x00746b73
    68f8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    68fc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6900:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6904:	2f534f43 	svccs	0x00534f43
    6908:	4f636950 	svcmi	0x00636950
    690c:	5f000053 	svcpl	0x00000053
    6910:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    6914:	61697265 	cmnvs	r9, r5, ror #4
    6918:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    691c:	73000001 	movwvc	r0, #1
    6920:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6924:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6928:	61000002 	tstvs	r0, r2
    692c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6930:	00030068 	andeq	r0, r3, r8, rrx
    6934:	63616d00 	cmnvs	r1, #0, 26
    6938:	00682e68 	rsbeq	r2, r8, r8, ror #28
    693c:	70000003 	andvc	r0, r0, r3
    6940:	5f736e69 	svcpl	0x00736e69
    6944:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6948:	00030068 	andeq	r0, r3, r8, rrx
    694c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6950:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6954:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6958:	0300682e 	movweq	r6, #2094	; 0x82e
    695c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6960:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6964:	00040068 	andeq	r0, r4, r8, rrx
    6968:	01050000 	mrseq	r0, (UNDEF: 5)
    696c:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    6970:	03000031 	movweq	r0, #49	; 0x31
    6974:	06010122 	streq	r0, [r1], -r2, lsr #2
    6978:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    697c:	13136b02 	tstne	r3, #2048	; 0x800
    6980:	06100516 			; <UNDEFINED> instruction: 0x06100516
    6984:	20050501 	andcs	r0, r5, r1, lsl #10
    6988:	30060305 	andcc	r0, r6, r5, lsl #6
    698c:	053f0205 	ldreq	r0, [pc, #-517]!	; 678f <__exidx_end+0xb4f>
    6990:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    6994:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    6998:	200b0520 	andcs	r0, fp, r0, lsr #10
    699c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    69a0:	2f240603 	svccs	0x00240603
    69a4:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    69a8:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    69ac:	2f061f02 	svccs	0x00061f02
    69b0:	01060605 	tsteq	r6, r5, lsl #12
    69b4:	30060205 	andcc	r0, r6, r5, lsl #4
    69b8:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    69bc:	01060505 	tsteq	r6, r5, lsl #10
    69c0:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    69c4:	01060605 	tsteq	r6, r5, lsl #12
    69c8:	2f060405 	svccs	0x00060405
    69cc:	01060705 	tsteq	r6, r5, lsl #14
    69d0:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    69d4:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    69d8:	03052106 	movweq	r2, #20742	; 0x5106
    69dc:	06070531 			; <UNDEFINED> instruction: 0x06070531
    69e0:	20060501 	andcs	r0, r6, r1, lsl #10
    69e4:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    69e8:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    69ec:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    69f0:	13052e05 	movwne	r2, #24069	; 0x5e05
    69f4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    69f8:	0608052f 	streq	r0, [r8], -pc, lsr #10
    69fc:	06030501 	streq	r0, [r3], -r1, lsl #10
    6a00:	060d052f 	streq	r0, [sp], -pc, lsr #10
    6a04:	06030501 	streq	r0, [r3], -r1, lsl #10
    6a08:	3102052f 	tstcc	r2, pc, lsr #10
    6a0c:	01060605 	tsteq	r6, r5, lsl #12
    6a10:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    6a14:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6a18:	21010606 	tstcs	r1, r6, lsl #12
    6a1c:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    6a20:	0606052f 	streq	r0, [r6], -pc, lsr #10
    6a24:	06020501 	streq	r0, [r2], -r1, lsl #10
    6a28:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    6a2c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6a30:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    6a34:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6a38:	07053c11 	smladeq	r5, r1, ip, r3
    6a3c:	06020521 	streq	r0, [r2], -r1, lsr #10
    6a40:	0605054b 	streq	r0, [r5], -fp, asr #10
    6a44:	06020501 	streq	r0, [r2], -r1, lsl #10
    6a48:	060a0524 	streq	r0, [sl], -r4, lsr #10
    6a4c:	9f060501 	svcls	0x00060501
    6a50:	051f0a05 	ldreq	r0, [pc, #-2565]	; 6053 <__exidx_end+0x413>
    6a54:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    6a58:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6a5c:	052f0602 	streq	r0, [pc, #-1538]!	; 6462 <__exidx_end+0x822>
    6a60:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6a64:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    6a68:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    6a6c:	052f0603 	streq	r0, [pc, #-1539]!	; 6471 <__exidx_end+0x831>
    6a70:	06053002 	streq	r3, [r5], -r2
    6a74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    6a78:	01053d06 	tsteq	r5, r6, lsl #26
    6a7c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    6a80:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    6a84:	000d0230 	andeq	r0, sp, r0, lsr r2
    6a88:	03c00101 	biceq	r0, r0, #1073741824	; 0x40000000
    6a8c:	00030000 	andeq	r0, r3, r0
    6a90:	0000013d 	andeq	r0, r0, sp, lsr r1
    6a94:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6a98:	0101000d 	tsteq	r1, sp
    6a9c:	00000101 	andeq	r0, r0, r1, lsl #2
    6aa0:	00000100 	andeq	r0, r0, r0, lsl #2
    6aa4:	6f682f01 	svcvs	0x00682f01
    6aa8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6aac:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6ab0:	442f6e65 	strtmi	r6, [pc], #-3685	; 6ab8 <__exidx_end+0xe78>
    6ab4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6ab8:	4f2f706f 	svcmi	0x002f706f
    6abc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6ac0:	502f5445 	eorpl	r5, pc, r5, asr #8
    6ac4:	534f4349 	movtpl	r4, #62281	; 0xf349
    6ac8:	6369502f 	cmnvs	r9, #47	; 0x2f
    6acc:	502f534f 	eorpl	r5, pc, pc, asr #6
    6ad0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6ad4:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6ad8:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6adc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6ae0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6ae4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6ae8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6aec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6af0:	61652d65 	cmnvs	r5, r5, ror #26
    6af4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6af8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6afc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6b00:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6b04:	6f682f00 	svcvs	0x00682f00
    6b08:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6b0c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6b10:	442f6e65 	strtmi	r6, [pc], #-3685	; 6b18 <__exidx_end+0xed8>
    6b14:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6b18:	4f2f706f 	svcmi	0x002f706f
    6b1c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6b20:	502f5445 	eorpl	r5, pc, r5, asr #8
    6b24:	534f4349 	movtpl	r4, #62281	; 0xf349
    6b28:	6369502f 	cmnvs	r9, #47	; 0x2f
    6b2c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6b30:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6b34:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6b38:	2f656d6f 	svccs	0x00656d6f
    6b3c:	70657473 	rsbvc	r7, r5, r3, ror r4
    6b40:	2f6e6568 	svccs	0x006e6568
    6b44:	6b736544 	blvs	1ce005c <__ccfg+0x1cc00b4>
    6b48:	2f706f74 	svccs	0x00706f74
    6b4c:	4f534c4f 	svcmi	0x00534c4f
    6b50:	2f54454e 	svccs	0x0054454e
    6b54:	4f434950 	svcmi	0x00434950
    6b58:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6b5c:	00534f63 	subseq	r4, r3, r3, ror #30
    6b60:	6f667600 	svcvs	0x00667600
    6b64:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
    6b68:	00000100 	andeq	r0, r0, r0, lsl #2
    6b6c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6b70:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6b74:	00000200 	andeq	r0, r0, r0, lsl #4
    6b78:	61647473 	smcvs	18243	; 0x4743
    6b7c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6b80:	00000200 	andeq	r0, r0, r0, lsl #4
    6b84:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6b88:	0300682e 	movweq	r6, #2094	; 0x82e
    6b8c:	616d0000 	cmnvs	sp, r0
    6b90:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6b94:	00000300 	andeq	r0, r0, r0, lsl #6
    6b98:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6b9c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6ba0:	0300682e 	movweq	r6, #2094	; 0x82e
    6ba4:	75620000 	strbvc	r0, [r2, #-0]!
    6ba8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6bac:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6bb0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6bb4:	73000003 	movwvc	r0, #3
    6bb8:	6f697379 	svcvs	0x00697379
    6bbc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6bc0:	623c0000 	eorsvs	r0, ip, #0
    6bc4:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6bc8:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6bcc:	00000000 	andeq	r0, r0, r0
    6bd0:	00150500 	andseq	r0, r5, r0, lsl #10
    6bd4:	32f80205 	rscscc	r0, r8, #1342177280	; 0x50000000
    6bd8:	0c030000 	stceq	0, cr0, [r3], {-0}
    6bdc:	13030501 	movwne	r0, #13569	; 0x3501
    6be0:	01060605 	tsteq	r6, r5, lsl #12
    6be4:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    6be8:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6bec:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    6bf0:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6bf4:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    6bf8:	01025902 	tsteq	r2, r2, lsl #18
    6bfc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6c00:	02050043 	andeq	r0, r5, #67	; 0x43
    6c04:	00003318 	andeq	r3, r0, r8, lsl r3
    6c08:	052e0619 	streq	r0, [lr, #-1561]!	; 0xfffff9e7
    6c0c:	04052006 	streq	r2, [r5], #-6
    6c10:	052e1d03 	streq	r1, [lr, #-3331]!	; 0xfffff2fd
    6c14:	20280305 	eorcs	r0, r8, r5, lsl #6
    6c18:	71030705 	tstvc	r3, r5, lsl #14
    6c1c:	03060520 	movweq	r0, #25888	; 0x6520
    6c20:	0205204a 	andeq	r2, r5, #74	; 0x4a
    6c24:	14133e06 	ldrne	r3, [r3], #-3590	; 0xfffff1fa
    6c28:	05180305 	ldreq	r0, [r8, #-773]	; 0xfffffcfb
    6c2c:	01120302 	tsteq	r2, r2, lsl #6
    6c30:	01060405 	tsteq	r6, r5, lsl #8
    6c34:	30060205 	andcc	r0, r6, r5, lsl #4
    6c38:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    6c3c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6c40:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    6c44:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6c48:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    6c4c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    6c50:	05052e10 	streq	r2, [r5, #-3600]	; 0xfffff1f0
    6c54:	2d070521 	cfstr32cs	mvfx0, [r7, #-132]	; 0xffffff7c
    6c58:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    6c5c:	0304053d 	movweq	r0, #17725	; 0x453d
    6c60:	590100da 	stmdbpl	r1, {r1, r3, r4, r6, r7}
    6c64:	01060705 	tsteq	r6, r5, lsl #14
    6c68:	03060405 	movweq	r0, #25605	; 0x6405
    6c6c:	054a7fa7 	strbeq	r7, [sl, #-4007]	; 0xfffff059
    6c70:	c2030605 	andgt	r0, r3, #5242880	; 0x500000
    6c74:	2f062000 	svccs	0x00062000
    6c78:	10061205 	andne	r1, r6, r5, lsl #4
    6c7c:	03060305 	movweq	r0, #25349	; 0x6305
    6c80:	06052e43 	streq	r2, [r5], -r3, asr #28
    6c84:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6c88:	06054c06 	streq	r4, [r5], -r6, lsl #24
    6c8c:	0b050106 	bleq	1470ac <__ccfg+0x127104>
    6c90:	0604052e 	streq	r0, [r4], -lr, lsr #10
    6c94:	03050521 	movweq	r0, #21793	; 0x5521
    6c98:	59e400c9 	stmibpl	r4!, {r0, r3, r6, r7}^
    6c9c:	06080559 			; <UNDEFINED> instruction: 0x06080559
    6ca0:	06050501 	streq	r0, [r5], -r1, lsl #10
    6ca4:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    6ca8:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6cac:	04053101 	streq	r3, [r5], #-257	; 0xfffffeff
    6cb0:	3c7fa903 			; <UNDEFINED> instruction: 0x3c7fa903
    6cb4:	68060505 	stmdavs	r6, {r0, r2, r8, sl}
    6cb8:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    6cbc:	0c051305 	stceq	3, cr1, [r5], {5}
    6cc0:	12051306 	andne	r1, r5, #402653184	; 0x18000000
    6cc4:	0605052d 	streq	r0, [r5], -sp, lsr #10
    6cc8:	060e052f 	streq	r0, [lr], -pc, lsr #10
    6ccc:	06060514 			; <UNDEFINED> instruction: 0x06060514
    6cd0:	060e052d 	streq	r0, [lr], -sp, lsr #10
    6cd4:	2e140513 	mrccs	5, 0, r0, cr4, cr3, {0}
    6cd8:	062d0605 	strteq	r0, [sp], -r5, lsl #12
    6cdc:	0609055a 			; <UNDEFINED> instruction: 0x0609055a
    6ce0:	06140501 	ldreq	r0, [r4], -r1, lsl #10
    6ce4:	06160539 			; <UNDEFINED> instruction: 0x06160539
    6ce8:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    6cec:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6cf0:	06050513 			; <UNDEFINED> instruction: 0x06050513
    6cf4:	13200903 			; <UNDEFINED> instruction: 0x13200903
    6cf8:	01061205 	tsteq	r6, r5, lsl #4
    6cfc:	052f0805 	streq	r0, [pc, #-2053]!	; 64ff <__exidx_end+0x8bf>
    6d00:	05052d09 	streq	r2, [r5, #-3337]	; 0xfffff2f7
    6d04:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    6d08:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6d0c:	06060520 	streq	r0, [r6], -r0, lsr #10
    6d10:	0a055930 	beq	15d1d8 <__ccfg+0x13d230>
    6d14:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6d18:	0c054c06 	stceq	12, cr4, [r5], {6}
    6d1c:	016f0306 	cmneq	pc, r6, lsl #6
    6d20:	11030505 	tstne	r3, r5, lsl #10
    6d24:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    6d28:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    6d2c:	8274014a 	rsbshi	r0, r4, #-2147483630	; 0x80000012
    6d30:	204a2020 	subcs	r2, sl, r0, lsr #32
    6d34:	0705252e 	streq	r2, [r5, -lr, lsr #10]
    6d38:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6d3c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    6d40:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    6d44:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6d48:	09051330 	stmdbeq	r5, {r4, r5, r8, r9, ip}
    6d4c:	0a051406 	beq	14bd6c <__ccfg+0x12bdc4>
    6d50:	2d08051f 	cfstr32cs	mvfx0, [r8, #-124]	; 0xffffff84
    6d54:	2f060605 	svccs	0x00060605
    6d58:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6d5c:	20130501 	andscs	r0, r3, r1, lsl #10
    6d60:	3f060705 	svccc	0x00060705
    6d64:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    6d68:	06060501 	streq	r0, [r6], -r1, lsl #10
    6d6c:	06050530 			; <UNDEFINED> instruction: 0x06050530
    6d70:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    6d74:	20110306 	andscs	r0, r1, r6, lsl #6
    6d78:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    6d7c:	4a063c06 	bmi	195d9c <__ccfg+0x175df4>
    6d80:	01666601 	cmneq	r6, r1, lsl #12
    6d84:	2e20582e 	cdpcs	8, 2, cr5, cr0, cr14, {1}
    6d88:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
    6d8c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    6d90:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    6d94:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    6d98:	2d0a0514 	cfstr32cs	mvfx0, [sl, #-80]	; 0xffffffb0
    6d9c:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    6da0:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    6da4:	0f051407 	svceq	0x00051407
    6da8:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    6dac:	2d07052e 	cfstr32cs	mvfx0, [r7, #-184]	; 0xffffff48
    6db0:	0a055a06 	beq	15d5d0 <__ccfg+0x13d628>
    6db4:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    6db8:	17054706 	strne	r4, [r5, -r6, lsl #14]
    6dbc:	13050106 	movwne	r0, #20742	; 0x5106
    6dc0:	07052e06 	streq	r2, [r5, -r6, lsl #28]
    6dc4:	06051306 	streq	r1, [r5], -r6, lsl #6
    6dc8:	05592606 	ldrbeq	r2, [r9, #-1542]	; 0xfffff9fa
    6dcc:	13134f05 	tstne	r3, #5, 30
    6dd0:	11060905 	tstne	r6, r5, lsl #18
    6dd4:	062f0505 	strteq	r0, [pc], -r5, lsl #10
    6dd8:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    6ddc:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
    6de0:	0b050106 	bleq	147200 <__ccfg+0x127258>
    6de4:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6de8:	0a054b3d 	beq	159ae4 <__ccfg+0x139b3c>
    6dec:	7fad0306 	svcvc	0x00ad0306
    6df0:	00070220 	andeq	r0, r7, r0, lsr #4
    6df4:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    6df8:	48020500 	stmdami	r2, {r8, sl}
    6dfc:	03000035 	movweq	r0, #53	; 0x35
    6e00:	05010190 	streq	r0, [r1, #-400]	; 0xfffffe70
    6e04:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    6e08:	2e0e0635 	mcrcs	6, 0, r0, cr14, cr5, {1}
    6e0c:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
    6e10:	67300603 	ldrvs	r0, [r0, -r3, lsl #12]!
    6e14:	03060105 	movweq	r0, #24837	; 0x6105
    6e18:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    6e1c:	3c720306 	ldclcc	3, cr0, [r2], #-24	; 0xffffffe8
    6e20:	01060805 	tsteq	r6, r5, lsl #16
    6e24:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    6e28:	053f0602 	ldreq	r0, [pc, #-1538]!	; 682e <__exidx_end+0xbee>
    6e2c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    6e30:	02053c05 	andeq	r3, r5, #1280	; 0x500
    6e34:	0b054006 	bleq	156e54 <__ccfg+0x136eac>
    6e38:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6e3c:	200b0558 	andcs	r0, fp, r8, asr r5
    6e40:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    6e44:	3d220603 	stccc	6, cr0, [r2, #-12]!
    6e48:	00020213 	andeq	r0, r2, r3, lsl r2
    6e4c:	02c90101 	sbceq	r0, r9, #1073741824	; 0x40000000
    6e50:	00030000 	andeq	r0, r3, r0
    6e54:	0000013d 	andeq	r0, r0, sp, lsr r1
    6e58:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6e5c:	0101000d 	tsteq	r1, sp
    6e60:	00000101 	andeq	r0, r0, r1, lsl #2
    6e64:	00000100 	andeq	r0, r0, r0, lsl #2
    6e68:	6f682f01 	svcvs	0x00682f01
    6e6c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6e70:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6e74:	442f6e65 	strtmi	r6, [pc], #-3685	; 6e7c <__exidx_end+0x123c>
    6e78:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6e7c:	4f2f706f 	svcmi	0x002f706f
    6e80:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6e84:	502f5445 	eorpl	r5, pc, r5, asr #8
    6e88:	534f4349 	movtpl	r4, #62281	; 0xf349
    6e8c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6e90:	502f534f 	eorpl	r5, pc, pc, asr #6
    6e94:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6e98:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    6e9c:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6ea0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6ea4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6ea8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6eac:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6eb0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6eb4:	61652d65 	cmnvs	r5, r5, ror #26
    6eb8:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6ebc:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6ec0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6ec4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6ec8:	6f682f00 	svcvs	0x00682f00
    6ecc:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    6ed0:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    6ed4:	442f6e65 	strtmi	r6, [pc], #-3685	; 6edc <__exidx_end+0x129c>
    6ed8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6edc:	4f2f706f 	svcmi	0x002f706f
    6ee0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6ee4:	502f5445 	eorpl	r5, pc, r5, asr #8
    6ee8:	534f4349 	movtpl	r4, #62281	; 0xf349
    6eec:	6369502f 	cmnvs	r9, #47	; 0x2f
    6ef0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    6ef4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6ef8:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    6efc:	2f656d6f 	svccs	0x00656d6f
    6f00:	70657473 	rsbvc	r7, r5, r3, ror r4
    6f04:	2f6e6568 	svccs	0x006e6568
    6f08:	6b736544 	blvs	1ce0420 <__ccfg+0x1cc0478>
    6f0c:	2f706f74 	svccs	0x00706f74
    6f10:	4f534c4f 	svcmi	0x00534c4f
    6f14:	2f54454e 	svccs	0x0054454e
    6f18:	4f434950 	svcmi	0x00434950
    6f1c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6f20:	00534f63 	subseq	r4, r3, r3, ror #30
    6f24:	63737600 	cmnvs	r3, #0, 12
    6f28:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    6f2c:	00000100 	andeq	r0, r0, r0, lsl #2
    6f30:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6f34:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6f38:	00000200 	andeq	r0, r0, r0, lsl #4
    6f3c:	61647473 	smcvs	18243	; 0x4743
    6f40:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6f44:	00000200 	andeq	r0, r0, r0, lsl #4
    6f48:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6f4c:	0300682e 	movweq	r6, #2094	; 0x82e
    6f50:	616d0000 	cmnvs	sp, r0
    6f54:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6f58:	00000300 	andeq	r0, r0, r0, lsl #6
    6f5c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    6f60:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6f64:	0300682e 	movweq	r6, #2094	; 0x82e
    6f68:	75620000 	strbvc	r0, [r2, #-0]!
    6f6c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    6f70:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6f74:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6f78:	73000003 	movwvc	r0, #3
    6f7c:	6f697379 	svcvs	0x00697379
    6f80:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6f84:	623c0000 	eorsvs	r0, ip, #0
    6f88:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6f8c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    6f90:	00000000 	andeq	r0, r0, r0
    6f94:	003a0500 	eorseq	r0, sl, r0, lsl #10
    6f98:	35980205 	ldrcc	r0, [r8, #517]	; 0x205
    6f9c:	05190000 	ldreq	r0, [r9, #-0]
    6fa0:	3a031402 	bcc	cbfb0 <__ccfg+0xac008>
    6fa4:	06050501 	streq	r0, [r5], -r1, lsl #10
    6fa8:	033a0501 	teqeq	sl, #4194304	; 0x400000
    6fac:	05052044 	streq	r2, [r5, #-68]	; 0xffffffbc
    6fb0:	052e3c03 	streq	r3, [lr, #-3075]!	; 0xfffff3fd
    6fb4:	05053c12 	streq	r3, [r5, #-3090]	; 0xfffff3ee
    6fb8:	03160540 	tsteq	r6, #64, 10	; 0x10000000
    6fbc:	0b05200e 	bleq	14effc <__ccfg+0x12f054>
    6fc0:	052e1103 	streq	r1, [lr, #-259]!	; 0xfffffefd
    6fc4:	62030608 	andvs	r0, r3, #8, 12	; 0x800000
    6fc8:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    6fcc:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    6fd0:	21060305 	tstcs	r6, r5, lsl #6
    6fd4:	01060605 	tsteq	r6, r5, lsl #12
    6fd8:	30060305 	andcc	r0, r6, r5, lsl #6
    6fdc:	01060b05 	tsteq	r6, r5, lsl #22
    6fe0:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    6fe4:	01052003 	tsteq	r5, r3
    6fe8:	05ac2e03 	streq	r2, [ip, #3587]!	; 0xe03
    6fec:	3c520303 	mrrccc	3, 0, r0, r2, cr3
    6ff0:	1b030b05 	blne	c9c0c <__ccfg+0xa9c64>
    6ff4:	060a0574 			; <UNDEFINED> instruction: 0x060a0574
    6ff8:	060b052e 	streq	r0, [fp], -lr, lsr #10
    6ffc:	06040501 	streq	r0, [r4], -r1, lsl #10
    7000:	060705ad 	streq	r0, [r7], -sp, lsr #11
    7004:	06040501 	streq	r0, [r4], -r1, lsl #10
    7008:	06070530 			; <UNDEFINED> instruction: 0x06070530
    700c:	1e080515 	mcrne	5, 0, r0, cr8, cr5, {0}
    7010:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    7014:	142f0604 	strtne	r0, [pc], #-1540	; 701c <__exidx_end+0x13dc>
    7018:	01060705 	tsteq	r6, r5, lsl #14
    701c:	2f060b05 	svccs	0x00060b05
    7020:	01060d05 	tsteq	r6, r5, lsl #26
    7024:	05660c05 	strbeq	r0, [r6, #-3077]!	; 0xfffff3fb
    7028:	2b052e1c 	blcs	1528a0 <__ccfg+0x1328f8>
    702c:	4e0b052e 	cfsh32mi	mvfx0, mvfx11, #30
    7030:	3c060a05 			; <UNDEFINED> instruction: 0x3c060a05
    7034:	01060b05 	tsteq	r6, r5, lsl #22
    7038:	83060405 	movwhi	r0, #25605	; 0x6405
    703c:	01061805 	tsteq	r6, r5, lsl #16
    7040:	4b060405 	blmi	18805c <__ccfg+0x1680b4>
    7044:	01060905 	tsteq	r6, r5, lsl #18
    7048:	2f060405 	svccs	0x00060405
    704c:	59031105 	stmdbpl	r3, {r0, r2, r8, ip}
    7050:	66063c20 	strvs	r3, [r6], -r0, lsr #24
    7054:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    7058:	66063c06 	strvs	r3, [r6], -r6, lsl #24
    705c:	0620013c 			; <UNDEFINED> instruction: 0x0620013c
    7060:	743c0601 	ldrtvc	r0, [ip], #-1537	; 0xfffff9ff
    7064:	064a063c 			; <UNDEFINED> instruction: 0x064a063c
    7068:	2e21743c 	mcrcs	4, 1, r7, cr1, cr12, {1}
    706c:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    7070:	2e060106 	adfcss	f0, f6, f6
    7074:	4a219082 	bmi	86b284 <__ccfg+0x84b2dc>
    7078:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    707c:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    7080:	3c062e06 	stccc	14, cr2, [r6], {6}
    7084:	06668206 	strbteq	r8, [r6], -r6, lsl #4
    7088:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    708c:	05770405 	ldrbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    7090:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    7094:	16052010 			; <UNDEFINED> instruction: 0x16052010
    7098:	6606ae06 	strvs	sl, [r6], -r6, lsl #28
    709c:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    70a0:	3c063c06 	stccc	12, cr3, [r6], {6}
    70a4:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    70a8:	823c0601 	eorshi	r0, ip, #1048576	; 0x100000
    70ac:	9006923c 	andls	r9, r6, ip, lsr r2
    70b0:	013c5806 	teqeq	ip, r6, lsl #16
    70b4:	2e06012e 	adfcssp	f0, f6, #0.5
    70b8:	74063c06 	strvc	r3, [r6], #-3078	; 0xfffff3fa
    70bc:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    70c0:	06723c3c 			; <UNDEFINED> instruction: 0x06723c3c
    70c4:	742e063c 	strtvc	r0, [lr], #-1596	; 0xfffff9c4
    70c8:	3c903c21 	ldccc	12, cr3, [r0], {33}	; 0x21
    70cc:	01062e01 	tsteq	r6, r1, lsl #28
    70d0:	74902e06 	ldrvc	r2, [r0], #3590	; 0xe06
    70d4:	4f040521 	svcmi	0x00040521
    70d8:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    70dc:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
    70e0:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    70e4:	13060805 	movwne	r0, #26629	; 0x6805
    70e8:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    70ec:	13210604 			; <UNDEFINED> instruction: 0x13210604
    70f0:	01060905 	tsteq	r6, r5, lsl #18
    70f4:	21060405 	tstcs	r6, r5, lsl #8
    70f8:	24060b05 	strcs	r0, [r6], #-2821	; 0xfffff4fb
    70fc:	03060705 	movweq	r0, #26373	; 0x6705
    7100:	0e057409 	cdpeq	4, 0, cr7, cr5, cr9, {0}
    7104:	0b050106 	bleq	147524 <__ccfg+0x12757c>
    7108:	030a053e 	movweq	r0, #42302	; 0xa53e
    710c:	11056654 	tstne	r5, r4, asr r6
    7110:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    7114:	05025116 	streq	r5, [r2, #-278]	; 0xfffffeea
    7118:	8e010100 	adfhis	f0, f1, f0
    711c:	03000002 	movweq	r0, #2
    7120:	00028800 	andeq	r8, r2, r0, lsl #16
    7124:	fb010200 	blx	4792e <__ccfg+0x27986>
    7128:	01000d0e 	tsteq	r0, lr, lsl #26
    712c:	00010101 	andeq	r0, r1, r1, lsl #2
    7130:	00010000 	andeq	r0, r1, r0
    7134:	752f0100 	strvc	r0, [pc, #-256]!	; 703c <__exidx_end+0x13fc>
    7138:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6f74 <__exidx_end+0x1334>
    713c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    7140:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    7144:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7148:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    714c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7150:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    7154:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    7158:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    715c:	2f006564 	svccs	0x00006564
    7160:	2f727375 	svccs	0x00727375
    7164:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7168:	2f656475 	svccs	0x00656475
    716c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    7170:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    7174:	2f007379 	svccs	0x00007379
    7178:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    717c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    7180:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    7184:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    7188:	706f746b 	rsbvc	r7, pc, fp, ror #8
    718c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    7190:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    7194:	4349502f 	movtmi	r5, #36911	; 0x902f
    7198:	502f534f 	eorpl	r5, pc, pc, asr #6
    719c:	534f6369 	movtpl	r6, #62313	; 0xf369
    71a0:	3143432f 	cmpcc	r3, pc, lsr #6
    71a4:	2f585833 	svccs	0x00585833
    71a8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    71ac:	41575858 	cmpmi	r7, r8, asr r8
    71b0:	642f4552 	strtvs	r4, [pc], #-1362	; 71b8 <__exidx_end+0x1578>
    71b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    71b8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    71bc:	6f682f00 	svcvs	0x00682f00
    71c0:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    71c4:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    71c8:	442f6e65 	strtmi	r6, [pc], #-3685	; 71d0 <__exidx_end+0x1590>
    71cc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    71d0:	4f2f706f 	svcmi	0x002f706f
    71d4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    71d8:	502f5445 	eorpl	r5, pc, r5, asr #8
    71dc:	534f4349 	movtpl	r4, #62281	; 0xf349
    71e0:	6369502f 	cmnvs	r9, #47	; 0x2f
    71e4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    71e8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    71ec:	43432f58 	movtmi	r2, #16216	; 0x3f58
    71f0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    71f4:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    71f8:	5f66722f 	svcpl	0x0066722f
    71fc:	63746170 	cmnvs	r4, #112, 2
    7200:	00736568 	rsbseq	r6, r3, r8, ror #10
    7204:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 7150 <__exidx_end+0x1510>
    7208:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
    720c:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    7210:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    7214:	6f746b73 	svcvs	0x00746b73
    7218:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    721c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    7220:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    7224:	2f534f43 	svccs	0x00534f43
    7228:	4f636950 	svcmi	0x00636950
    722c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    7230:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    7234:	6f682f00 	svcvs	0x00682f00
    7238:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    723c:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    7240:	442f6e65 	strtmi	r6, [pc], #-3685	; 7248 <__exidx_end+0x1608>
    7244:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    7248:	4f2f706f 	svcmi	0x002f706f
    724c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    7250:	502f5445 	eorpl	r5, pc, r5, asr #8
    7254:	534f4349 	movtpl	r4, #62281	; 0xf349
    7258:	6369502f 	cmnvs	r9, #47	; 0x2f
    725c:	2f00534f 	svccs	0x0000534f
    7260:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    7264:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    7268:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    726c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    7270:	706f746b 	rsbvc	r7, pc, fp, ror #8
    7274:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    7278:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    727c:	4349502f 	movtmi	r5, #36911	; 0x902f
    7280:	502f534f 	eorpl	r5, pc, pc, asr #6
    7284:	534f6369 	movtpl	r6, #62313	; 0xf369
    7288:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    728c:	006c656e 	rsbeq	r6, ip, lr, ror #10
    7290:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7294:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7298:	00010068 	andeq	r0, r1, r8, rrx
    729c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    72a0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    72a4:	00010068 	andeq	r0, r1, r8, rrx
    72a8:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    72ac:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    72b0:	00020068 	andeq	r0, r2, r8, rrx
    72b4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    72b8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    72bc:	00000200 	andeq	r0, r0, r0, lsl #4
    72c0:	6b636f6c 	blvs	18e3078 <__ccfg+0x18c30d0>
    72c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    72c8:	66720000 	ldrbtvs	r0, [r2], -r0
    72cc:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    72d0:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    72d4:	0300682e 	movweq	r6, #2094	; 0x82e
    72d8:	66720000 	ldrbtvs	r0, [r2], -r0
    72dc:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 7168 <__exidx_end+0x1528>
    72e0:	5f6e6f6d 	svcpl	0x006e6f6d
    72e4:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    72e8:	00030068 	andeq	r0, r3, r8, rrx
    72ec:	5f667200 	svcpl	0x00667200
    72f0:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    72f4:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    72f8:	0300682e 	movweq	r6, #2094	; 0x82e
    72fc:	66720000 	ldrbtvs	r0, [r2], -r0
    7300:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    7304:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    7308:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
    730c:	73666e65 	cmnvc	r6, #1616	; 0x650
    7310:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    7314:	72000004 	andvc	r0, r0, #4
    7318:	61705f66 	cmnvs	r0, r6, ror #30
    731c:	5f686374 	svcpl	0x00686374
    7320:	5f656672 	svcpl	0x00656672
    7324:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    7328:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    732c:	00000400 	andeq	r0, r0, r0, lsl #8
    7330:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    7334:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    7338:	616d0000 	cmnvs	sp, r0
    733c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    7340:	00000500 	andeq	r0, r0, r0, lsl #10
    7344:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    7348:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    734c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    7350:	75620000 	strbvc	r0, [r2, #-0]!
    7354:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    7358:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    735c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7360:	73000005 	movwvc	r0, #5
    7364:	6f697379 	svcvs	0x00697379
    7368:	0600682e 	streq	r6, [r0], -lr, lsr #16
    736c:	656b0000 	strbvs	r0, [fp, #-0]!
    7370:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    7374:	0700682e 	streq	r6, [r0, -lr, lsr #16]
    7378:	6d730000 	ldclvs	0, cr0, [r3, #-0]
    737c:	72747261 	rsbsvc	r7, r4, #268435462	; 0x10000006
    7380:	65735f66 	ldrbvs	r5, [r3, #-3942]!	; 0xfffff09a
    7384:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    7388:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
    738c:	00000500 	andeq	r0, r0, r0, lsl #10
    7390:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    7394:	5f667274 	svcpl	0x00667274
    7398:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    739c:	73676e69 	cmnvc	r7, #1680	; 0x690
    73a0:	5f706c5f 	svcpl	0x00706c5f
    73a4:	632e7268 			; <UNDEFINED> instruction: 0x632e7268
    73a8:	00000500 	andeq	r0, r0, r0, lsl #10
    73ac:	00019c00 	andeq	r9, r1, r0, lsl #24
    73b0:	5f000200 	svcpl	0x00000200
    73b4:	02000001 	andeq	r0, r0, #1
    73b8:	0d0efb01 	vstreq	d15, [lr, #-4]
    73bc:	01010100 	mrseq	r0, (UNDEF: 17)
    73c0:	00000001 	andeq	r0, r0, r1
    73c4:	01000001 	tsteq	r0, r1
    73c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    73cc:	2f2e2e2f 	svccs	0x002e2e2f
    73d0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 73d8 <__exidx_end+0x1798>
    73d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    73d8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    73dc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    73e0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    73e4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    73e8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    73ec:	31303030 	teqcc	r0, r0, lsr r0
    73f0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    73f4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    73f8:	61746562 	cmnvs	r4, r2, ror #10
    73fc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7400:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7404:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 723c <__exidx_end+0x15fc>
    7408:	6f635c73 	svcvs	0x00635c73
    740c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7410:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7414:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7418:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    741c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7420:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7424:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7428:	3130322d 	teqcc	r0, sp, lsr #4
    742c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7430:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7434:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7438:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    743c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7440:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7444:	616d5c65 	cmnvs	sp, r5, ror #24
    7448:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    744c:	3a630065 	bcc	18c75e8 <__ccfg+0x18a7640>
    7450:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7454:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7458:	302e322e 	eorcc	r3, lr, lr, lsr #4
    745c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7460:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7464:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7468:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    746c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7470:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7474:	6f6f745c 	svcvs	0x006f745c
    7478:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    747c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7480:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7484:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7488:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    748c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7490:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7494:	5f342d69 	svcpl	0x00342d69
    7498:	30322d39 	eorscc	r2, r2, r9, lsr sp
    749c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    74a0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    74a4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    74a8:	61652d65 	cmnvs	r5, r5, ror #26
    74ac:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    74b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    74b4:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    74b8:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    74bc:	2f2e2e2f 	svccs	0x002e2e2f
    74c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    74c4:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    74c8:	61000063 	tstvs	r0, r3, rrx
    74cc:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    74d0:	00000100 	andeq	r0, r0, r0, lsl #2
    74d4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    74d8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    74dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    74e0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    74e4:	00000200 	andeq	r0, r0, r0, lsl #4
    74e8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    74ec:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    74f0:	00030068 	andeq	r0, r3, r8, rrx
    74f4:	5f776800 	svcpl	0x00776800
    74f8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    74fc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7500:	72000004 	andvc	r0, r0, #4
    7504:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7508:	00000100 	andeq	r0, r0, r0, lsl #2
    750c:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    7510:	00010068 	andeq	r0, r1, r8, rrx
    7514:	05000000 	streq	r0, [r0, #-0]
    7518:	00392802 	eorseq	r2, r9, r2, lsl #16
    751c:	01350300 	teqeq	r5, r0, lsl #6
    7520:	02002120 	andeq	r2, r0, #32, 2
    7524:	4b3d0104 	blmi	f4793c <__ccfg+0xf27994>
    7528:	2c232f21 	stccs	15, cr2, [r3], #-132	; 0xffffff7c
    752c:	01000502 	tsteq	r0, r2, lsl #10
    7530:	02050001 	andeq	r0, r5, #1
    7534:	00000000 	andeq	r0, r0, r0
    7538:	0100c003 	tsteq	r0, r3
    753c:	02002f20 	andeq	r2, r0, #32, 30	; 0x80
    7540:	4b3d0104 	blmi	f47958 <__ccfg+0xf279b0>
    7544:	2c232f2f 	stccs	15, cr2, [r3], #-188	; 0xffffff44
    7548:	01000502 	tsteq	r0, r2, lsl #10
    754c:	00016701 	andeq	r6, r1, r1, lsl #14
    7550:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    7554:	02000001 	andeq	r0, r0, #1
    7558:	0d0efb01 	vstreq	d15, [lr, #-4]
    755c:	01010100 	mrseq	r0, (UNDEF: 17)
    7560:	00000001 	andeq	r0, r0, r1
    7564:	01000001 	tsteq	r0, r1
    7568:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    756c:	2f2e2e2f 	svccs	0x002e2e2f
    7570:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7578 <__exidx_end+0x1938>
    7574:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7578:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    757c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7580:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7584:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7588:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    758c:	31303030 	teqcc	r0, r0, lsr r0
    7590:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7594:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7598:	61746562 	cmnvs	r4, r2, ror #10
    759c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    75a0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    75a4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 73dc <__exidx_end+0x179c>
    75a8:	6f635c73 	svcvs	0x00635c73
    75ac:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    75b0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    75b4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    75b8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    75bc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    75c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    75c4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    75c8:	3130322d 	teqcc	r0, sp, lsr #4
    75cc:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    75d0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    75d4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    75d8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    75dc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    75e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    75e4:	616d5c65 	cmnvs	sp, r5, ror #24
    75e8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    75ec:	3a630065 	bcc	18c7788 <__ccfg+0x18a77e0>
    75f0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    75f4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    75f8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    75fc:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7600:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7604:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7608:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    760c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7610:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7614:	6f6f745c 	svcvs	0x006f745c
    7618:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    761c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7620:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7624:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7628:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    762c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7630:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7634:	5f342d69 	svcpl	0x00342d69
    7638:	30322d39 	eorscc	r2, r2, r9, lsr sp
    763c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7640:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7644:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7648:	61652d65 	cmnvs	r5, r5, ror #26
    764c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7650:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7654:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7658:	00007379 	andeq	r7, r0, r9, ror r3
    765c:	5f6e6f61 	svcpl	0x006e6f61
    7660:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    7664:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    7668:	00000100 	andeq	r0, r0, r0, lsl #2
    766c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7670:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7674:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7678:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    767c:	00000200 	andeq	r0, r0, r0, lsl #4
    7680:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7684:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7688:	00030068 	andeq	r0, r3, r8, rrx
    768c:	6e6f6100 	powvse	f6, f7, f0
    7690:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    7694:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    7698:	00010068 	andeq	r0, r1, r8, rrx
    769c:	05000000 	streq	r0, [r0, #-0]
    76a0:	00395002 	eorseq	r5, r9, r2
    76a4:	013c0300 	teqeq	ip, r0, lsl #6
    76a8:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    76ac:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    76b0:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    76b4:	01010009 	tsteq	r1, r9
    76b8:	000001a9 	andeq	r0, r0, r9, lsr #3
    76bc:	01410002 	cmpeq	r1, r2
    76c0:	01020000 	mrseq	r0, (UNDEF: 2)
    76c4:	000d0efb 	strdeq	r0, [sp], -fp
    76c8:	01010101 	tsteq	r1, r1, lsl #2
    76cc:	01000000 	mrseq	r0, (UNDEF: 0)
    76d0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    76d4:	2f2e2e2f 	svccs	0x002e2e2f
    76d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    76dc:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    76e0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    76e4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    76e8:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    76ec:	63635c69 	cmnvs	r3, #26880	; 0x6900
    76f0:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    76f4:	302e302e 	eorcc	r3, lr, lr, lsr #32
    76f8:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    76fc:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7700:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7704:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7708:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    770c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7710:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7714:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 75ac <__exidx_end+0x196c>
    7718:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    771c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7720:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7724:	6f6e2d6d 	svcvs	0x006e2d6d
    7728:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    772c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7730:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7734:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7738:	615c3371 	cmpvs	ip, r1, ror r3
    773c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7740:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7744:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7748:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    774c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7750:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7754:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7758:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    775c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7760:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7764:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7768:	31303030 	teqcc	r0, r0, lsr r0
    776c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7770:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7774:	61746562 	cmnvs	r4, r2, ror #10
    7778:	63635c32 	cmnvs	r3, #12800	; 0x3200
    777c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7780:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 75b8 <__exidx_end+0x1978>
    7784:	6f635c73 	svcvs	0x00635c73
    7788:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    778c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7790:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7794:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7798:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    779c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    77a0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    77a4:	3130322d 	teqcc	r0, sp, lsr #4
    77a8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    77ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    77b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    77b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    77b8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    77bc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    77c0:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    77c4:	61000073 	tstvs	r0, r3, ror r0
    77c8:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    77cc:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    77d0:	00000100 	andeq	r0, r0, r0, lsl #2
    77d4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    77d8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    77dc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    77e0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    77e4:	00000200 	andeq	r0, r0, r0, lsl #4
    77e8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    77ec:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    77f0:	00030068 	andeq	r0, r3, r8, rrx
    77f4:	6e6f6100 	powvse	f6, f7, f0
    77f8:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    77fc:	0100682e 	tsteq	r0, lr, lsr #16
    7800:	00000000 	andeq	r0, r0, r0
    7804:	39800205 	stmibcc	r0, {r0, r2, r9}
    7808:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    780c:	04020001 	streq	r0, [r2], #-1
    7810:	010a0301 	tsteq	sl, r1, lsl #6
    7814:	01040200 	mrseq	r0, R12_usr
    7818:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    781c:	02001f01 	andeq	r1, r0, #1, 30
    7820:	00210104 	eoreq	r0, r1, r4, lsl #2
    7824:	21010402 	tstcs	r1, r2, lsl #8
    7828:	01040200 	mrseq	r0, R12_usr
    782c:	02213021 	eoreq	r3, r1, #33	; 0x21
    7830:	01010008 	tsteq	r1, r8
    7834:	a0020500 	andge	r0, r2, r0, lsl #10
    7838:	03000039 	movweq	r0, #57	; 0x39
    783c:	000100d7 	ldrdeq	r0, [r1], -r7
    7840:	03010402 	movweq	r0, #5122	; 0x1402
    7844:	0200010c 	andeq	r0, r0, #12, 2
    7848:	00210104 	eoreq	r0, r1, r4, lsl #2
    784c:	1f010402 	svcne	0x00010402
    7850:	01040200 	mrseq	r0, R12_usr
    7854:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    7858:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    785c:	31210104 			; <UNDEFINED> instruction: 0x31210104
    7860:	01000502 	tsteq	r0, r2, lsl #10
    7864:	00019c01 	andeq	r9, r1, r1, lsl #24
    7868:	39000200 	stmdbcc	r0, {r9}
    786c:	02000001 	andeq	r0, r0, #1
    7870:	0d0efb01 	vstreq	d15, [lr, #-4]
    7874:	01010100 	mrseq	r0, (UNDEF: 17)
    7878:	00000001 	andeq	r0, r0, r1
    787c:	01000001 	tsteq	r0, r1
    7880:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7884:	2f2e2e2f 	svccs	0x002e2e2f
    7888:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7890 <__exidx_end+0x1c50>
    788c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7890:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7894:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7898:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    789c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    78a0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    78a4:	31303030 	teqcc	r0, r0, lsr r0
    78a8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    78ac:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    78b0:	61746562 	cmnvs	r4, r2, ror #10
    78b4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    78b8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    78bc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 76f4 <__exidx_end+0x1ab4>
    78c0:	6f635c73 	svcvs	0x00635c73
    78c4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    78c8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    78cc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    78d0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    78d4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    78d8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    78dc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    78e0:	3130322d 	teqcc	r0, sp, lsr #4
    78e4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    78e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    78ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    78f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    78f4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    78f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    78fc:	616d5c65 	cmnvs	sp, r5, ror #24
    7900:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7904:	3a630065 	bcc	18c7aa0 <__ccfg+0x18a7af8>
    7908:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    790c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7910:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7914:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7918:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    791c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7920:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7924:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7928:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    792c:	6f6f745c 	svcvs	0x006f745c
    7930:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7934:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7938:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    793c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7940:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7944:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7948:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    794c:	5f342d69 	svcpl	0x00342d69
    7950:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7954:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7958:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    795c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7960:	61652d65 	cmnvs	r5, r5, ror #26
    7964:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7968:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    796c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7970:	00007379 	andeq	r7, r0, r9, ror r3
    7974:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    7978:	00010063 	andeq	r0, r1, r3, rrx
    797c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7980:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7984:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7988:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    798c:	00020068 	andeq	r0, r2, r8, rrx
    7990:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7994:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    7998:	0300682e 	movweq	r6, #2094	; 0x82e
    799c:	70630000 	rsbvc	r0, r3, r0
    79a0:	00682e75 	rsbeq	r2, r8, r5, ror lr
    79a4:	00000001 	andeq	r0, r0, r1
    79a8:	b8020500 	stmdalt	r2, {r8, sl}
    79ac:	03000039 	movweq	r0, #57	; 0x39
    79b0:	030100f5 	movweq	r0, #4341	; 0x10f5
    79b4:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    79b8:	00010100 	andeq	r0, r1, r0, lsl #2
    79bc:	00000205 	andeq	r0, r0, r5, lsl #4
    79c0:	c0030000 	andgt	r0, r3, r0
    79c4:	11030101 	tstne	r3, r1, lsl #2
    79c8:	00030201 	andeq	r0, r3, r1, lsl #4
    79cc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    79d0:	0039c002 	eorseq	ip, r9, r2
    79d4:	028d0300 	addeq	r0, sp, #0, 6
    79d8:	01120301 	tsteq	r2, r1, lsl #6
    79dc:	01000402 	tsteq	r0, r2, lsl #8
    79e0:	02050001 	andeq	r0, r5, #1
    79e4:	00000000 	andeq	r0, r0, r0
    79e8:	0102d803 	tsteq	r2, r3, lsl #16
    79ec:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    79f0:	01010003 	tsteq	r1, r3
    79f4:	00020500 	andeq	r0, r2, r0, lsl #10
    79f8:	03000000 	movweq	r0, #0
    79fc:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    7a00:	01000402 	tsteq	r0, r2, lsl #8
    7a04:	0002d601 	andeq	sp, r2, r1, lsl #12
    7a08:	7c000200 	sfmvc	f0, 4, [r0], {-0}
    7a0c:	02000001 	andeq	r0, r0, #1
    7a10:	0d0efb01 	vstreq	d15, [lr, #-4]
    7a14:	01010100 	mrseq	r0, (UNDEF: 17)
    7a18:	00000001 	andeq	r0, r0, r1
    7a1c:	01000001 	tsteq	r0, r1
    7a20:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7a24:	2f2e2e2f 	svccs	0x002e2e2f
    7a28:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7a30 <__exidx_end+0x1df0>
    7a2c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7a30:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7a34:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7a38:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7a3c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7a40:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7a44:	31303030 	teqcc	r0, r0, lsr r0
    7a48:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7a4c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7a50:	61746562 	cmnvs	r4, r2, ror #10
    7a54:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7a58:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7a5c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7894 <__exidx_end+0x1c54>
    7a60:	6f635c73 	svcvs	0x00635c73
    7a64:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7a68:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7a6c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7a70:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7a74:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7a78:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7a7c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7a80:	3130322d 	teqcc	r0, sp, lsr #4
    7a84:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7a88:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7a8c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7a90:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7a94:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7a98:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7a9c:	616d5c65 	cmnvs	sp, r5, ror #24
    7aa0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7aa4:	3a630065 	bcc	18c7c40 <__ccfg+0x18a7c98>
    7aa8:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7aac:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7ab0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7ab4:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7ab8:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7abc:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7ac0:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7ac4:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7ac8:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7acc:	6f6f745c 	svcvs	0x006f745c
    7ad0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7ad4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7ad8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7adc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7ae0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7ae4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7ae8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7aec:	5f342d69 	svcpl	0x00342d69
    7af0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7af4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7af8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7afc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7b00:	61652d65 	cmnvs	r5, r5, ror #26
    7b04:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7b08:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7b0c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7b10:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    7b14:	2f2e2e2f 	svccs	0x002e2e2f
    7b18:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7b1c:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    7b20:	6f000063 	svcvs	0x00000063
    7b24:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    7b28:	00000100 	andeq	r0, r0, r0, lsl #2
    7b2c:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    7b30:	00010068 	andeq	r0, r1, r8, rrx
    7b34:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    7b38:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7b3c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7b40:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7b44:	00020068 	andeq	r0, r2, r8, rrx
    7b48:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7b4c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    7b50:	0300682e 	movweq	r6, #2094	; 0x82e
    7b54:	77680000 	strbvc	r0, [r8, -r0]!
    7b58:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7b5c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7b60:	00000400 	andeq	r0, r0, r0, lsl #8
    7b64:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    7b68:	00010068 	andeq	r0, r1, r8, rrx
    7b6c:	6e6f6100 	powvse	f6, f7, f0
    7b70:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    7b74:	0100682e 	tsteq	r0, lr, lsr #16
    7b78:	6f610000 	svcvs	0x00610000
    7b7c:	61625f6e 	cmnvs	r2, lr, ror #30
    7b80:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    7b84:	0100682e 	tsteq	r0, lr, lsr #16
    7b88:	00000000 	andeq	r0, r0, r0
    7b8c:	39c80205 	stmibcc	r8, {r0, r2, r9}^
    7b90:	e5030000 	str	r0, [r3, #-0]
    7b94:	03200100 	nopeq	{0}	; <UNPREDICTABLE>
    7b98:	7103200f 	tstvc	r3, pc
    7b9c:	200f0320 	andcs	r0, pc, r0, lsr #6
    7ba0:	9e090325 	cdpls	3, 0, cr0, cr9, cr5, {1}
    7ba4:	9e090330 	mcrls	3, 0, r0, cr9, cr0, {1}
    7ba8:	0702a333 	smladxeq	r2, r3, r3, sl
    7bac:	00010100 	andeq	r0, r1, r0, lsl #2
    7bb0:	3a240205 	bcc	9083cc <__ccfg+0x8e8424>
    7bb4:	a0030000 	andge	r0, r3, r0
    7bb8:	0c030101 	stfeqs	f0, [r3], {1}
    7bbc:	0388222e 	orreq	r2, r8, #-536870910	; 0xe0000002
    7bc0:	25263c7a 	strcs	r3, [r6, #-3194]!	; 0xfffff386
    7bc4:	01000602 	tsteq	r0, r2, lsl #12
    7bc8:	02050001 	andeq	r0, r5, #1
    7bcc:	00000000 	andeq	r0, r0, r0
    7bd0:	0101c203 	tsteq	r1, r3, lsl #4
    7bd4:	34912520 	ldrcc	r2, [r1], #1312	; 0x520
    7bd8:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    7bdc:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    7be0:	01040200 	mrseq	r0, R12_usr
    7be4:	00207a03 	eoreq	r7, r0, r3, lsl #20
    7be8:	50010402 	andpl	r0, r1, r2, lsl #8
    7bec:	1f302d30 	svcne	0x00302d30
    7bf0:	1f3d4b24 	svcne	0x003d4b24
    7bf4:	326c3d34 	rsbcc	r3, ip, #52, 26	; 0xd00
    7bf8:	03666d03 	cmneq	r6, #3, 26	; 0xc0
    7bfc:	02263c10 	eoreq	r3, r6, #16, 24	; 0x1000
    7c00:	01010009 	tsteq	r1, r9
    7c04:	50020500 	andpl	r0, r2, r0, lsl #10
    7c08:	0300003a 	movweq	r0, #58	; 0x3a
    7c0c:	210101f3 	strdcs	r0, [r1, -r3]
    7c10:	0007024b 	andeq	r0, r7, fp, asr #4
    7c14:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c18:	003a6802 	eorseq	r6, sl, r2, lsl #16
    7c1c:	02800300 	addeq	r0, r0, #0, 6
    7c20:	02042401 	andeq	r2, r4, #16777216	; 0x1000000
    7c24:	04582203 	ldrbeq	r2, [r8], #-515	; 0xfffffdfd
    7c28:	82620301 	rsbhi	r0, r2, #67108864	; 0x4000000
    7c2c:	3c030204 	sfmcc	f0, 4, [r3], {4}
    7c30:	03010420 	movweq	r0, #5152	; 0x1420
    7c34:	1f3d4a4a 	svcne	0x003d4a4a
    7c38:	221f3d21 	andscs	r3, pc, #2112	; 0x840
    7c3c:	22301f30 	eorscs	r1, r0, #48, 30	; 0xc0
    7c40:	000c0223 	andeq	r0, ip, r3, lsr #4
    7c44:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c48:	003ac802 	eorseq	ip, sl, r2, lsl #16
    7c4c:	02a30300 	adceq	r0, r3, #0, 6
    7c50:	044f2501 	strbeq	r2, [pc], #-1281	; 7c58 <__exidx_end+0x2018>
    7c54:	4a170302 	bmi	5c8864 <__ccfg+0x5a88bc>
    7c58:	6d030104 	stfvss	f0, [r3, #-16]
    7c5c:	09024b4a 	stmdbeq	r2, {r1, r3, r6, r8, r9, fp, lr}
    7c60:	00010100 	andeq	r0, r1, r0, lsl #2
    7c64:	00000205 	andeq	r0, r0, r5, lsl #4
    7c68:	bc030000 	stclt	0, cr0, [r3], {-0}
    7c6c:	03220102 			; <UNDEFINED> instruction: 0x03220102
    7c70:	69032017 	stmdbvs	r3, {r0, r1, r2, r4, sp}
    7c74:	10032820 	andne	r2, r3, r0, lsr #16
    7c78:	2e6c033c 	mcrcs	3, 3, r0, cr12, cr12, {1}
    7c7c:	032e1503 			; <UNDEFINED> instruction: 0x032e1503
    7c80:	1303586d 	movwne	r5, #14445	; 0x386d
    7c84:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    7c88:	3f201103 	svccc	0x00201103
    7c8c:	01000602 	tsteq	r0, r2, lsl #12
    7c90:	02050001 	andeq	r0, r5, #1
    7c94:	00000000 	andeq	r0, r0, r0
    7c98:	0102e303 	tsteq	r2, r3, lsl #6
    7c9c:	4d012103 	stfmis	f2, [r1, #-12]
    7ca0:	01000202 	tsteq	r0, r2, lsl #4
    7ca4:	02050001 	andeq	r0, r5, #1
    7ca8:	00000000 	andeq	r0, r0, r0
    7cac:	01039003 	tsteq	r3, r3
    7cb0:	21201003 			; <UNDEFINED> instruction: 0x21201003
    7cb4:	0021211f 	eoreq	r2, r1, pc, lsl r1
    7cb8:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
    7cbc:	01040200 	mrseq	r0, R12_usr
    7cc0:	1d313d3d 	ldcne	13, cr3, [r1, #-244]!	; 0xffffff0c
    7cc4:	00070234 	andeq	r0, r7, r4, lsr r2
    7cc8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7ccc:	00000002 	andeq	r0, r0, r2
    7cd0:	03b50300 			; <UNDEFINED> instruction: 0x03b50300
    7cd4:	2c311701 	ldccs	7, cr1, [r1], #-4
    7cd8:	05023d33 	streq	r3, [r2, #-3379]	; 0xfffff2cd
    7cdc:	a7010100 	strge	r0, [r1, -r0, lsl #2]
    7ce0:	02000003 	andeq	r0, r0, #3
    7ce4:	00026500 	andeq	r6, r2, r0, lsl #10
    7ce8:	fb010200 	blx	484f2 <__ccfg+0x2854a>
    7cec:	01000d0e 	tsteq	r0, lr, lsl #26
    7cf0:	00010101 	andeq	r0, r1, r1, lsl #2
    7cf4:	00010000 	andeq	r0, r1, r0
    7cf8:	2f2e0100 	svccs	0x002e0100
    7cfc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7d00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7d04:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    7d08:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    7d0c:	63006269 	movwvs	r6, #617	; 0x269
    7d10:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7d14:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7d18:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7d1c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7d20:	5f393130 	svcpl	0x00393130
    7d24:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7d28:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7d2c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7d30:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7d34:	6f745c36 	svcvs	0x00745c36
    7d38:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7d3c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7d40:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7d44:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7d48:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7d4c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7d50:	61652d65 	cmnvs	r5, r5, ror #26
    7d54:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7d58:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7d5c:	71353130 	teqvc	r5, r0, lsr r1
    7d60:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7d64:	6f6e2d6d 	svcvs	0x006e2d6d
    7d68:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7d6c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7d70:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7d74:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7d78:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    7d7c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    7d80:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7d84:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7d88:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7d8c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7d90:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7d94:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7d98:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7d9c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7da0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7da4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7da8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7dac:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7c44 <__exidx_end+0x2004>
    7db0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7db4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7db8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7dbc:	6f6e2d6d 	svcvs	0x006e2d6d
    7dc0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7dc4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7dc8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7dcc:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7dd0:	615c3371 	cmpvs	ip, r1, ror r3
    7dd4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7dd8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7ddc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7de0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7de4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7de8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7dec:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7df0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7df4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7df8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7dfc:	31303030 	teqcc	r0, r0, lsr r0
    7e00:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7e04:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7e08:	61746562 	cmnvs	r4, r2, ror #10
    7e0c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7e10:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7e14:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7c4c <__exidx_end+0x200c>
    7e18:	6f635c73 	svcvs	0x00635c73
    7e1c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7e20:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7e24:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7e28:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7e2c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7e30:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7e34:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7e38:	3130322d 	teqcc	r0, sp, lsr #4
    7e3c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7e40:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
    7e44:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
    7e48:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7e4c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7e50:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7e54:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
    7e58:	5c332e39 	ldcpl	14, cr2, [r3], #-228	; 0xffffff1c
    7e5c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7e60:	00656475 	rsbeq	r6, r5, r5, ror r4
    7e64:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7e68:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7e6c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7e70:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7e74:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7e78:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7e7c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7e80:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7e84:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7e88:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7e8c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7e90:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7d28 <__exidx_end+0x20e8>
    7e94:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7e98:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7e9c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7ea0:	6f6e2d6d 	svcvs	0x006e2d6d
    7ea4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7ea8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7eac:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7eb0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7eb4:	615c3371 	cmpvs	ip, r1, ror r3
    7eb8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7ebc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7ec0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7ec4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7ec8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7ecc:	66720000 	ldrbtvs	r0, [r2], -r0
    7ed0:	00632e63 	rsbeq	r2, r3, r3, ror #28
    7ed4:	72000001 	andvc	r0, r0, #1
    7ed8:	682e6366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sp, lr}
    7edc:	00000100 	andeq	r0, r0, r0, lsl #2
    7ee0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7ee4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7ee8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7eec:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7ef0:	00000200 	andeq	r0, r0, r0, lsl #4
    7ef4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7ef8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7efc:	00030068 	andeq	r0, r3, r8, rrx
    7f00:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    7f04:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    7f08:	00040068 	andeq	r0, r4, r8, rrx
    7f0c:	5f667200 	svcpl	0x00667200
    7f10:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    7f14:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    7f18:	00010068 	andeq	r0, r1, r8, rrx
    7f1c:	5f667200 	svcpl	0x00667200
    7f20:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    7f24:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    7f28:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    7f2c:	00000100 	andeq	r0, r0, r0, lsl #2
    7f30:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    7f34:	5f706f72 	svcpl	0x00706f72
    7f38:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    7f3c:	00010068 	andeq	r0, r1, r8, rrx
    7f40:	72747300 	rsbsvc	r7, r4, #0, 6
    7f44:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    7f48:	00050068 	andeq	r0, r5, r8, rrx
    7f4c:	05000000 	streq	r0, [r0, #-0]
    7f50:	00000002 	andeq	r0, r0, r2
    7f54:	00e80300 	rsceq	r0, r8, r0, lsl #6
    7f58:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    7f5c:	00310104 	eorseq	r0, r1, r4, lsl #2
    7f60:	2f010402 	svccs	0x00010402
    7f64:	0003023f 	andeq	r0, r3, pc, lsr r2
    7f68:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7f6c:	003afc02 	eorseq	pc, sl, r2, lsl #24
    7f70:	00fa0300 	rscseq	r0, sl, r0, lsl #6
    7f74:	04020001 	streq	r0, [r2], #-1
    7f78:	02041301 	andeq	r1, r4, #67108864	; 0x4000000
    7f7c:	4a01c703 	bmi	79b90 <__ccfg+0x59be8>
    7f80:	bd030104 	stflts	f0, [r3, #-16]
    7f84:	02002e7e 	andeq	r2, r0, #2016	; 0x7e0
    7f88:	04220104 	strteq	r0, [r2], #-260	; 0xfffffefc
    7f8c:	01c10302 	biceq	r0, r1, r2, lsl #6
    7f90:	0301043c 	movweq	r0, #5180	; 0x143c
    7f94:	2f3c7ec2 	svccs	0x003c7ec2
    7f98:	01000502 	tsteq	r0, r2, lsl #10
    7f9c:	02050001 	andeq	r0, r5, #1
    7fa0:	00003b24 	andeq	r3, r0, r4, lsr #22
    7fa4:	01018f03 	tsteq	r1, r3, lsl #30
    7fa8:	251d2314 	ldrcs	r2, [sp, #-788]	; 0xfffffcec
    7fac:	2f3d761b 	svccs	0x003d761b
    7fb0:	222f211f 	eorcs	r2, pc, #-1073741817	; 0xc0000007
    7fb4:	2121212d 			; <UNDEFINED> instruction: 0x2121212d
    7fb8:	01000c02 	tsteq	r0, r2, lsl #24
    7fbc:	02050001 	andeq	r0, r5, #1
    7fc0:	00003b70 	andeq	r3, r0, r0, ror fp
    7fc4:	0101a403 	tsteq	r1, r3, lsl #8
    7fc8:	1c2f9615 	stcne	6, cr9, [pc], #-84	; 7f7c <__exidx_end+0x233c>
    7fcc:	21252521 			; <UNDEFINED> instruction: 0x21252521
    7fd0:	0a032f1f 	beq	d3c54 <__ccfg+0xb3cac>
    7fd4:	2f3d3d66 	svccs	0x003d3d66
    7fd8:	03587303 	cmpeq	r8, #201326592	; 0xc000000
    7fdc:	3d3d6618 	ldccc	6, cr6, [sp, #-96]!	; 0xffffffa0
    7fe0:	5868032f 	stmdapl	r8!, {r0, r1, r2, r3, r5, r8, r9}^
    7fe4:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    7fe8:	3d3d580b 	ldccc	8, cr5, [sp, #-44]!	; 0xffffffd4
    7fec:	580b032f 	stmdapl	fp, {r0, r1, r2, r3, r5, r8, r9}
    7ff0:	5c2f3d3d 	stcpl	13, cr3, [pc], #-244	; 7f04 <__exidx_end+0x22c4>
    7ff4:	5c2f3d3d 	stcpl	13, cr3, [pc], #-244	; 7f08 <__exidx_end+0x22c8>
    7ff8:	492f3e3d 	stmdbmi	pc!, {r0, r2, r3, r4, r5, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
    7ffc:	01002f02 	tsteq	r0, r2, lsl #30
    8000:	02050001 	andeq	r0, r5, #1
    8004:	00003cc0 	andeq	r3, r0, r0, asr #25
    8008:	0101f303 	tsteq	r1, r3, lsl #6	; <UNPREDICTABLE>
    800c:	03010903 	movweq	r0, #6403	; 0x1903
    8010:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    8014:	2121af20 			; <UNDEFINED> instruction: 0x2121af20
    8018:	22221f23 	eorcs	r1, r2, #35, 30	; 0x8c
    801c:	0b03262f 	bleq	d18e0 <__ccfg+0xb1938>
    8020:	5a2f2d4a 	bpl	bd3550 <__ccfg+0xbb35a8>
    8024:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    8028:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    802c:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
    8030:	6f03f214 	svcvs	0x0003f214
    8034:	4a23032e 	bmi	8c8cf4 <__ccfg+0x8a8d4c>
    8038:	4c3c6203 	lfmmi	f6, 4, [ip], #-12
    803c:	32363222 	eorscc	r3, r6, #536870914	; 0x20000002
    8040:	0350224c 	cmpeq	r0, #76, 4	; 0xc0000004
    8044:	595eac09 	ldmdbpl	lr, {r0, r3, sl, fp, sp, pc}^
    8048:	62033626 	andvs	r3, r3, #39845888	; 0x2600000
    804c:	00160266 	andseq	r0, r6, r6, ror #4
    8050:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8054:	003dd802 	eorseq	sp, sp, r2, lsl #16
    8058:	02f70300 	rscseq	r0, r7, #0, 6
    805c:	02ad2f01 	adceq	r2, sp, #1, 30
    8060:	01010003 	tsteq	r1, r3
    8064:	00020500 	andeq	r0, r2, r0, lsl #10
    8068:	03000000 	movweq	r0, #0
    806c:	24010382 	strcs	r0, [r1], #-898	; 0xfffffc7e
    8070:	002a025d 	eoreq	r0, sl, sp, asr r2
    8074:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8078:	003df802 	eorseq	pc, sp, r2, lsl #16
    807c:	03960300 	orrseq	r0, r6, #0, 6
    8080:	3e232101 	sufccs	f2, f3, f1
    8084:	00060241 	andeq	r0, r6, r1, asr #4
    8088:	01e90101 	mvneq	r0, r1, lsl #2
    808c:	00020000 	andeq	r0, r2, r0
    8090:	00000167 	andeq	r0, r0, r7, ror #2
    8094:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8098:	0101000d 	tsteq	r1, sp
    809c:	00000101 	andeq	r0, r0, r1, lsl #2
    80a0:	00000100 	andeq	r0, r0, r0, lsl #2
    80a4:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    80a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    80ac:	2f2e2e2f 	svccs	0x002e2e2f
    80b0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    80b4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    80b8:	3a630062 	bcc	18c8248 <__ccfg+0x18a82a0>
    80bc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    80c0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    80c4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    80c8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    80cc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    80d0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    80d4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    80d8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    80dc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    80e0:	6f6f745c 	svcvs	0x006f745c
    80e4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    80e8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    80ec:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    80f0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    80f4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    80f8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    80fc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8100:	5f342d69 	svcpl	0x00342d69
    8104:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8108:	33713531 	cmncc	r1, #205520896	; 0xc400000
    810c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8110:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8114:	61652d65 	cmnvs	r5, r5, ror #26
    8118:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    811c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8120:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8124:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8128:	6300656e 	movwvs	r6, #1390	; 0x56e
    812c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8130:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8134:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8138:	30302e30 	eorscc	r2, r0, r0, lsr lr
    813c:	5f393130 	svcpl	0x00393130
    8140:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8144:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8148:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    814c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8150:	6f745c36 	svcvs	0x00745c36
    8154:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8158:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    815c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8160:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8164:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8168:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    816c:	61652d65 	cmnvs	r5, r5, ror #26
    8170:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8174:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8178:	71353130 	teqvc	r5, r0, lsr r1
    817c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8180:	6f6e2d6d 	svcvs	0x006e2d6d
    8184:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8188:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    818c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8190:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8194:	00737973 	rsbseq	r7, r3, r3, ror r9
    8198:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    819c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    81a0:	00000100 	andeq	r0, r0, r0, lsl #2
    81a4:	5f6e6f61 	svcpl	0x006e6f61
    81a8:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    81ac:	00010068 	andeq	r0, r1, r8, rrx
    81b0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    81b4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    81b8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    81bc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    81c0:	00020068 	andeq	r0, r2, r8, rrx
    81c4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    81c8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    81cc:	0300682e 	movweq	r6, #2094	; 0x82e
    81d0:	65730000 	ldrbvs	r0, [r3, #-0]!
    81d4:	5f707574 	svcpl	0x00707574
    81d8:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    81dc:	00010068 	andeq	r0, r1, r8, rrx
    81e0:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    81e4:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    81e8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    81ec:	73000001 	movwvc	r0, #1
    81f0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    81f4:	0100682e 	tsteq	r0, lr, lsr #16
    81f8:	00000000 	andeq	r0, r0, r0
    81fc:	3e140205 	cdpcc	2, 1, cr0, cr4, cr5, {0}
    8200:	8d030000 	stchi	0, cr0, [r3, #-0]
    8204:	03200102 			; <UNDEFINED> instruction: 0x03200102
    8208:	0200200a 	andeq	r2, r0, #10
    820c:	4f410104 	svcmi	0x00410104
    8210:	212d4342 			; <UNDEFINED> instruction: 0x212d4342
    8214:	0302041f 	movweq	r0, #9247	; 0x241f
    8218:	04660487 	strbteq	r0, [r6], #-1159	; 0xfffffb79
    821c:	7c860301 	stcvc	3, cr0, [r6], {1}
    8220:	0342363c 	movteq	r3, #9788	; 0x263c
    8224:	3d2d4a09 	vpushcc	{s8-s16}
    8228:	2f1f2f2f 	svccs	0x001f2f2f
    822c:	3123212f 			; <UNDEFINED> instruction: 0x3123212f
    8230:	0a032548 	beq	d1758 <__ccfg+0xb17b0>
    8234:	3f5d4158 	svccc	0x005d4158
    8238:	01001e02 	tsteq	r0, r2, lsl #28
    823c:	02050001 	andeq	r0, r5, #1
    8240:	00003ee8 	andeq	r3, r0, r8, ror #29
    8244:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    8248:	33433028 	movtcc	r3, #12328	; 0x3028
    824c:	3c090341 	stccc	3, cr0, [r9], {65}	; 0x41
    8250:	2e0b0333 	mcrcs	3, 0, r0, cr11, cr3, {1}
    8254:	273c0e03 	ldrcs	r0, [ip, -r3, lsl #28]!
    8258:	03207903 			; <UNDEFINED> instruction: 0x03207903
    825c:	09032015 	stmdbeq	r3, {r0, r2, r4, sp}
    8260:	4967422e 	stmdbmi	r7!, {r1, r2, r3, r5, r9, lr}^
    8264:	59200903 	stmdbpl	r0!, {r0, r1, r8, fp}
    8268:	4b69242d 	blmi	1a51324 <__ccfg+0x1a3137c>
    826c:	01040200 	mrseq	r0, R12_usr
    8270:	13024d27 	movwne	r4, #11559	; 0x2d27
    8274:	57010100 	strpl	r0, [r1, -r0, lsl #2]
    8278:	02000004 	andeq	r0, r0, #4
    827c:	00016500 	andeq	r6, r1, r0, lsl #10
    8280:	fb010200 	blx	48a8a <__ccfg+0x28ae2>
    8284:	01000d0e 	tsteq	r0, lr, lsl #26
    8288:	00010101 	andeq	r0, r1, r1, lsl #2
    828c:	00010000 	andeq	r0, r1, r0
    8290:	2f2e0100 	svccs	0x002e0100
    8294:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8298:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    829c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    82a0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    82a4:	63006269 	movwvs	r6, #617	; 0x269
    82a8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    82ac:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    82b0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    82b4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    82b8:	5f393130 	svcpl	0x00393130
    82bc:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    82c0:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    82c4:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    82c8:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    82cc:	6f745c36 	svcvs	0x00745c36
    82d0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    82d4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    82d8:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    82dc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    82e0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    82e4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    82e8:	61652d65 	cmnvs	r5, r5, ror #26
    82ec:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    82f0:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    82f4:	71353130 	teqvc	r5, r0, lsr r1
    82f8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    82fc:	6f6e2d6d 	svcvs	0x006e2d6d
    8300:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8304:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8308:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    830c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8310:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8314:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8318:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    831c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8320:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8324:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8328:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    832c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8330:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8334:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8338:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    833c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8340:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8344:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 81dc <__exidx_end+0x259c>
    8348:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    834c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8350:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8354:	6f6e2d6d 	svcvs	0x006e2d6d
    8358:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    835c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8360:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8364:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8368:	615c3371 	cmpvs	ip, r1, ror r3
    836c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8370:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8374:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8378:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    837c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8380:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    8384:	65730000 	ldrbvs	r0, [r3, #-0]!
    8388:	5f707574 	svcpl	0x00707574
    838c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8390:	00010063 	andeq	r0, r1, r3, rrx
    8394:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    8398:	725f7075 	subsvc	r7, pc, #117	; 0x75
    839c:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    83a0:	00000100 	andeq	r0, r0, r0, lsl #2
    83a4:	5f737973 	svcpl	0x00737973
    83a8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    83ac:	0100682e 	tsteq	r0, lr, lsr #16
    83b0:	645f0000 	ldrbvs	r0, [pc], #-0	; 83b8 <__exidx_end+0x2778>
    83b4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    83b8:	745f746c 	ldrbvc	r7, [pc], #-1132	; 83c0 <__exidx_end+0x2780>
    83bc:	73657079 	cmnvc	r5, #121	; 0x79
    83c0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    83c4:	735f0000 	cmpvc	pc, #0
    83c8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    83cc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    83d0:	64000003 	strvs	r0, [r0], #-3
    83d4:	682e6964 	stmdavs	lr!, {r2, r5, r6, r8, fp, sp, lr}
    83d8:	00000100 	andeq	r0, r0, r0, lsl #2
    83dc:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    83e0:	00010068 	andeq	r0, r1, r8, rrx
    83e4:	05000000 	streq	r0, [r0, #-0]
    83e8:	003f8c02 	eorseq	r8, pc, r2, lsl #24
    83ec:	00ff0300 	rscseq	r0, pc, r0, lsl #6
    83f0:	200b0301 	andcs	r0, fp, r1, lsl #6
    83f4:	032e0e03 			; <UNDEFINED> instruction: 0x032e0e03
    83f8:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    83fc:	0302042e 	movweq	r0, #9262	; 0x242e
    8400:	042000d7 	strteq	r0, [r0], #-215	; 0xffffff29
    8404:	7fa80301 	svcvc	0x00a80301
    8408:	03020420 	movweq	r0, #9248	; 0x2420
    840c:	2d2e00d9 	stccs	0, cr0, [lr, #-868]!	; 0xfffffc9c
    8410:	03010421 	movweq	r0, #5153	; 0x1421
    8414:	302e7fac 	eorcc	r7, lr, ip, lsr #31
    8418:	652f214d 	strvs	r2, [pc, #-333]!	; 82d3 <__exidx_end+0x2693>
    841c:	1e222222 	cdpne	2, 2, cr2, cr2, cr2, {1}
    8420:	58780322 	ldmdapl	r8!, {r1, r5, r8, r9}^
    8424:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    8428:	10033c73 	andne	r3, r3, r3, ror ip
    842c:	21212120 			; <UNDEFINED> instruction: 0x21212120
    8430:	000d0221 	andeq	r0, sp, r1, lsr #4
    8434:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8438:	00400802 	subeq	r0, r0, r2, lsl #16
    843c:	01bf0300 			; <UNDEFINED> instruction: 0x01bf0300
    8440:	78031a01 	stmdavc	r3, {r0, r9, fp, ip}
    8444:	0328204a 			; <UNDEFINED> instruction: 0x0328204a
    8448:	7a03200e 	bvc	d0488 <__ccfg+0xb04e0>
    844c:	0e03422e 	cdpeq	2, 0, cr4, cr3, cr14, {1}
    8450:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
    8454:	02042d43 	andeq	r2, r4, #4288	; 0x10c0
    8458:	01042130 	tsteq	r4, r0, lsr r1
    845c:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
    8460:	0323652f 			; <UNDEFINED> instruction: 0x0323652f
    8464:	2c4d660c 	mcrrcs	6, 0, r6, sp, cr12
    8468:	522d2830 	eorpl	r2, sp, #48, 16	; 0x300000
    846c:	0015022d 	andseq	r0, r5, sp, lsr #4
    8470:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8474:	0040b402 	subeq	fp, r0, r2, lsl #8
    8478:	049f0300 	ldreq	r0, [pc], #768	; 8480 <__exidx_end+0x2840>
    847c:	010c0301 	tsteq	ip, r1, lsl #6
    8480:	03200903 			; <UNDEFINED> instruction: 0x03200903
    8484:	31212077 			; <UNDEFINED> instruction: 0x31212077
    8488:	30302733 	eorscc	r2, r0, r3, lsr r7
    848c:	1d2d2231 	sfmne	f2, 4, [sp, #-196]!	; 0xffffff3c
    8490:	3e3d3135 	mrccc	1, 1, r3, cr13, cr5, {1}
    8494:	1d3b223d 	lfmne	f2, 4, [fp, #-244]!	; 0xffffff0c
    8498:	20760327 	rsbscs	r0, r6, r7, lsr #6
    849c:	022e1203 	eoreq	r1, lr, #805306368	; 0x30000000
    84a0:	01010006 	tsteq	r1, r6
    84a4:	10020500 	andne	r0, r2, r0, lsl #10
    84a8:	03000041 	movweq	r0, #65	; 0x41
    84ac:	180104e5 	stmdane	r1, {r0, r2, r5, r6, r7, sl}
    84b0:	20790334 	rsbscs	r0, r9, r4, lsr r3
    84b4:	05023336 	streq	r3, [r2, #-822]	; 0xfffffcca
    84b8:	00010100 	andeq	r0, r1, r0, lsl #2
    84bc:	00000205 	andeq	r0, r0, r5, lsl #4
    84c0:	81030000 	mrshi	r0, (UNDEF: 3)
    84c4:	33180105 	tstcc	r8, #1073741825	; 0x40000001
    84c8:	01000602 	tsteq	r0, r2, lsl #12
    84cc:	02050001 	andeq	r0, r5, #1
    84d0:	00004128 	andeq	r4, r0, r8, lsr #2
    84d4:	01059503 	tsteq	r5, r3, lsl #10
    84d8:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    84dc:	01000602 	tsteq	r0, r2, lsl #12
    84e0:	02050001 	andeq	r0, r5, #1
    84e4:	00004138 	andeq	r4, r0, r8, lsr r1
    84e8:	0105b803 	tsteq	r5, r3, lsl #16
    84ec:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    84f0:	01000802 	tsteq	r0, r2, lsl #16
    84f4:	02050001 	andeq	r0, r5, #1
    84f8:	0000414c 	andeq	r4, r0, ip, asr #2
    84fc:	0105db03 	tsteq	r5, r3, lsl #22
    8500:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    8504:	77032009 	strvc	r2, [r3, -r9]
    8508:	20090320 	andcs	r0, r9, r0, lsr #6
    850c:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    8510:	3122322a 			; <UNDEFINED> instruction: 0x3122322a
    8514:	27473230 	smlaldxcs	r3, r7, r0, r2
    8518:	03473230 	movteq	r3, #29232	; 0x7230
    851c:	36372e17 			; <UNDEFINED> instruction: 0x36372e17
    8520:	0802273a 	stmdaeq	r2, {r1, r3, r4, r5, r8, r9, sl, sp}
    8524:	00010100 	andeq	r0, r1, r0, lsl #2
    8528:	41b00205 	lslsmi	r0, r5, #4
    852c:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    8530:	21150106 	tstcs	r5, r6, lsl #2
    8534:	20090355 	andcs	r0, r9, r5, asr r3
    8538:	01000302 	tsteq	r0, r2, lsl #6
    853c:	02050001 	andeq	r0, r5, #1
    8540:	000041c4 	andeq	r4, r0, r4, asr #3
    8544:	0106bc03 	tsteq	r6, r3, lsl #24
    8548:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    854c:	03022009 	movweq	r2, #8201	; 0x2009
    8550:	00010100 	andeq	r0, r1, r0, lsl #2
    8554:	41d80205 	bicsmi	r0, r8, r5, lsl #4
    8558:	cf030000 	svcgt	0x00030000
    855c:	21150106 	tstcs	r5, r6, lsl #2
    8560:	20090355 	andcs	r0, r9, r5, asr r3
    8564:	01000302 	tsteq	r0, r2, lsl #6
    8568:	02050001 	andeq	r0, r5, #1
    856c:	000041ec 	andeq	r4, r0, ip, ror #3
    8570:	0106e203 	tsteq	r6, r3, lsl #4
    8574:	2f432116 	svccs	0x00432116
    8578:	40207a03 	eormi	r7, r0, r3, lsl #20
    857c:	71032c35 	tstvc	r3, r5, lsr ip
    8580:	2e160320 	cdpcs	3, 1, cr0, cr6, cr0, {1}
    8584:	01000302 	tsteq	r0, r2, lsl #6
    8588:	02050001 	andeq	r0, r5, #1
    858c:	00004214 	andeq	r4, r0, r4, lsl r2
    8590:	01078203 	tsteq	r7, r3, lsl #4
    8594:	06023316 			; <UNDEFINED> instruction: 0x06023316
    8598:	00010100 	andeq	r0, r1, r0, lsl #2
    859c:	42240205 	eormi	r0, r4, #1342177280	; 0x50000000
    85a0:	94030000 	strls	r0, [r3], #-0
    85a4:	21160107 	tstcs	r6, r7, lsl #2
    85a8:	33342943 	teqcc	r4, #1097728	; 0x10c000
    85ac:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    85b0:	2e71031e 	mrccs	3, 3, r0, cr1, cr14, {0}
    85b4:	02201603 	eoreq	r1, r0, #3145728	; 0x300000
    85b8:	01010005 	tsteq	r1, r5
    85bc:	50020500 	andpl	r0, r2, r0, lsl #10
    85c0:	03000042 	movweq	r0, #66	; 0x42
    85c4:	150107b4 	strne	r0, [r1, #-1972]	; 0xfffff84c
    85c8:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    85cc:	00030220 	andeq	r0, r3, r0, lsr #4
    85d0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    85d4:	00426402 	subeq	r6, r2, r2, lsl #8
    85d8:	07c80300 	strbeq	r0, [r8, r0, lsl #6]
    85dc:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    85e0:	02200a03 	eoreq	r0, r0, #12288	; 0x3000
    85e4:	01010003 	tsteq	r1, r3
    85e8:	78020500 	stmdavc	r2, {r8, sl}
    85ec:	03000042 	movweq	r0, #66	; 0x42
    85f0:	200102a7 	andcs	r0, r1, r7, lsr #5
    85f4:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
    85f8:	2f4e211f 	svccs	0x004e211f
    85fc:	ac02d103 	stfged	f5, [r2], {3}
    8600:	207db903 	rsbscs	fp, sp, r3, lsl #18
    8604:	2002c703 	andcs	ip, r2, r3, lsl #14
    8608:	207db903 	rsbscs	fp, sp, r3, lsl #18
    860c:	211f2f5c 	tstcs	pc, ip, asr pc	; <UNPREDICTABLE>
    8610:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
    8614:	211f3d3d 	tstcs	pc, sp, lsr sp	; <UNPREDICTABLE>
    8618:	3d6e3d43 	stclcc	13, cr3, [lr, #-268]!	; 0xfffffef4
    861c:	211f3d52 	tstcs	pc, r2, asr sp	; <UNPREDICTABLE>
    8620:	3d3c0903 			; <UNDEFINED> instruction: 0x3d3c0903
    8624:	3d660a03 	vstmdbcc	r6!, {s1-s3}
    8628:	3d660b03 	fstmdbxcc	r6!, {d16}	;@ Deprecated
    862c:	211f3d7c 	tstcs	pc, ip, ror sp	; <UNPREDICTABLE>
    8630:	12024b40 	andne	r4, r2, #64, 22	; 0x10000
    8634:	00010100 	andeq	r0, r1, r0, lsl #2
    8638:	43880205 	orrmi	r0, r8, #1342177280	; 0x50000000
    863c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    8640:	02000107 	andeq	r0, r0, #-1073741823	; 0xc0000001
    8644:	0e030104 	adfeqs	f0, f3, f4
    8648:	1d235220 	sfmne	f5, 4, [r3, #-128]!	; 0xffffff80
    864c:	684d1d23 	stmdavs	sp, {r0, r1, r5, r8, sl, fp, ip}^
    8650:	207a034b 	rsbscs	r0, sl, fp, asr #6
    8654:	02004134 	andeq	r4, r0, #52, 2
    8658:	5b3d0104 	blpl	f48a70 <__ccfg+0xf28ac8>
    865c:	000b0231 	andeq	r0, fp, r1, lsr r2
    8660:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8664:	0043ec02 	subeq	lr, r3, r2, lsl #24
    8668:	08930300 	ldmeq	r3, {r8, r9}
    866c:	01090301 	tsteq	r9, r1, lsl #6
    8670:	22212d2f 	eorcs	r2, r1, #3008	; 0xbc0
    8674:	01040200 	mrseq	r0, R12_usr
    8678:	07024b3d 	smladxeq	r2, sp, fp, r4
    867c:	00010100 	andeq	r0, r1, r0, lsl #2
    8680:	44140205 	ldrmi	r0, [r4], #-517	; 0xfffffdfb
    8684:	9b030000 	blls	c868c <__ccfg+0xa86e4>
    8688:	09030103 	stmdbeq	r3, {r0, r1, r8}
    868c:	3c770301 	ldclcc	3, cr0, [r7], #-4
    8690:	20090320 	andcs	r0, r9, r0, lsr #6
    8694:	03313052 	teqeq	r1, #82	; 0x52
    8698:	2b234a0a 	blcs	8daec8 <__ccfg+0x8baf20>
    869c:	2f24484c 	svccs	0x0024484c
    86a0:	2933762d 	ldmdbcs	r3!, {r0, r2, r3, r5, r9, sl, ip, sp, lr}
    86a4:	26501c32 			; <UNDEFINED> instruction: 0x26501c32
    86a8:	4d4f3d52 	stclmi	13, cr3, [pc, #-328]	; 8568 <__exidx_end+0x2928>
    86ac:	4b845d2f 	blmi	fe11fb70 <_estack+0xde11ab70>
    86b0:	003d243d 	eorseq	r2, sp, sp, lsr r4
    86b4:	4b010402 	blmi	496c4 <__ccfg+0x2971c>
    86b8:	864b2f5b 			; <UNDEFINED> instruction: 0x864b2f5b
    86bc:	09033f4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}
    86c0:	1e221e4a 	cdpne	14, 2, cr1, cr2, cr10, {2}
    86c4:	043c0b03 	ldrteq	r0, [ip], #-2819	; 0xfffff4fd
    86c8:	7db90303 	ldcvc	3, cr0, [r9, #12]!
    86cc:	001f024a 	andseq	r0, pc, sl, asr #4
    86d0:	03650101 	cmneq	r5, #1073741824	; 0x40000000
    86d4:	00020000 	andeq	r0, r2, r0
    86d8:	000001a8 	andeq	r0, r0, r8, lsr #3
    86dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    86e0:	0101000d 	tsteq	r1, sp
    86e4:	00000101 	andeq	r0, r0, r1, lsl #2
    86e8:	00000100 	andeq	r0, r0, r0, lsl #2
    86ec:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    86f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    86f4:	2f2e2e2f 	svccs	0x002e2e2f
    86f8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    86fc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8700:	3a630062 	bcc	18c8890 <__ccfg+0x18a88e8>
    8704:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8708:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    870c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8710:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8714:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8718:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    871c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8720:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8724:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8728:	6f6f745c 	svcvs	0x006f745c
    872c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8730:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8734:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8738:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    873c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8740:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8744:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8748:	5f342d69 	svcpl	0x00342d69
    874c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8750:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8754:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8758:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    875c:	61652d65 	cmnvs	r5, r5, ror #26
    8760:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8764:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8768:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    876c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8770:	6300656e 	movwvs	r6, #1390	; 0x56e
    8774:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8778:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    877c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8780:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8784:	5f393130 	svcpl	0x00393130
    8788:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    878c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8790:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8794:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8798:	6f745c36 	svcvs	0x00745c36
    879c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    87a0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    87a4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    87a8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    87ac:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    87b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    87b4:	61652d65 	cmnvs	r5, r5, ror #26
    87b8:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    87bc:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    87c0:	71353130 	teqvc	r5, r0, lsr r1
    87c4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    87c8:	6f6e2d6d 	svcvs	0x006e2d6d
    87cc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    87d0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    87d4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    87d8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    87dc:	00737973 	rsbseq	r7, r3, r3, ror r9
    87e0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    87e4:	2f2e2e2f 	svccs	0x002e2e2f
    87e8:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    87ec:	0000636e 	andeq	r6, r0, lr, ror #6
    87f0:	5f737973 	svcpl	0x00737973
    87f4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    87f8:	0100632e 	tsteq	r0, lr, lsr #6
    87fc:	6f610000 	svcvs	0x00610000
    8800:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
    8804:	00682e63 	rsbeq	r2, r8, r3, ror #28
    8808:	6f000001 	svcvs	0x00000001
    880c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    8810:	00000100 	andeq	r0, r0, r0, lsl #2
    8814:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    8818:	0100682e 	tsteq	r0, lr, lsr #16
    881c:	65730000 	ldrbvs	r0, [r3, #-0]!
    8820:	5f707574 	svcpl	0x00707574
    8824:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8828:	00010068 	andeq	r0, r1, r8, rrx
    882c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    8830:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8834:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8838:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    883c:	00020068 	andeq	r0, r2, r8, rrx
    8840:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8844:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8848:	0300682e 	movweq	r6, #2094	; 0x82e
    884c:	77680000 	strbvc	r0, [r8, -r0]!
    8850:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8854:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8858:	00000400 	andeq	r0, r0, r0, lsl #8
    885c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    8860:	00010068 	andeq	r0, r1, r8, rrx
    8864:	73797300 	cmnvc	r9, #0, 6
    8868:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    886c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    8870:	61000001 	tstvs	r0, r1
    8874:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    8878:	6f6d7461 	svcvs	0x006d7461
    887c:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    8880:	00000001 	andeq	r0, r0, r1
    8884:	00020500 	andeq	r0, r2, r0, lsl #10
    8888:	03000000 	movweq	r0, #0
    888c:	040100f9 	streq	r0, [r1], #-249	; 0xffffff07
    8890:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    8894:	03010401 	movweq	r0, #5121	; 0x1401
    8898:	042e7d97 	strteq	r7, [lr], #-3479	; 0xfffff269
    889c:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    88a0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    88a4:	00ce0301 	sbceq	r0, lr, r1, lsl #6
    88a8:	00010420 	andeq	r0, r1, r0, lsr #8
    88ac:	03010402 	movweq	r0, #5122	; 0x1402
    88b0:	032e7cd1 			; <UNDEFINED> instruction: 0x032e7cd1
    88b4:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    88b8:	89670104 	stmdbhi	r7!, {r2, r8}^
    88bc:	4a09034b 	bmi	2495f0 <__ccfg+0x229648>
    88c0:	a5030304 	strge	r0, [r3, #-772]	; 0xfffffcfc
    88c4:	01045801 	tsteq	r4, r1, lsl #16
    88c8:	4a7ee403 	bmi	1fc18dc <__ccfg+0x1fa1934>
    88cc:	01040200 	mrseq	r0, R12_usr
    88d0:	0304045d 	movweq	r0, #17501	; 0x445d
    88d4:	00740381 	rsbseq	r0, r4, r1, lsl #7
    88d8:	03010402 	movweq	r0, #5122	; 0x1402
    88dc:	01043c14 	tsteq	r4, r4, lsl ip
    88e0:	01040200 	mrseq	r0, R12_usr
    88e4:	2e7cef03 	cdpcs	15, 7, cr14, cr12, cr3, {0}
    88e8:	b7030404 	strlt	r0, [r3, -r4, lsl #8]
    88ec:	1c322e03 	ldcne	14, cr2, [r2], #-12
    88f0:	20420324 	subcs	r0, r2, r4, lsr #6
    88f4:	01040200 	mrseq	r0, R12_usr
    88f8:	042e1403 	strteq	r1, [lr], #-1027	; 0xfffffbfd
    88fc:	04020001 	streq	r0, [r2], #-1
    8900:	7cf70301 	ldclvc	3, cr0, [r7], #4
    8904:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    8908:	83281b41 			; <UNDEFINED> instruction: 0x83281b41
    890c:	1b24384b 	blne	916a40 <__ccfg+0x8f6a98>
    8910:	e7030404 	str	r0, [r3, -r4, lsl #8]
    8914:	02002e02 	andeq	r2, r0, #2, 28
    8918:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    891c:	0001043c 	andeq	r0, r1, ip, lsr r4
    8920:	03010402 	movweq	r0, #5122	; 0x1402
    8924:	30207d8d 	eorcc	r7, r0, sp, lsl #27
    8928:	01001702 	tsteq	r0, r2, lsl #14
    892c:	02050001 	andeq	r0, r5, #1
    8930:	00004564 	andeq	r4, r0, r4, ror #10
    8934:	0101da03 	tsteq	r1, r3, lsl #20
    8938:	032e1d03 			; <UNDEFINED> instruction: 0x032e1d03
    893c:	1d032063 	stcne	0, cr2, [r3, #-396]	; 0xfffffe74
    8940:	412f5920 			; <UNDEFINED> instruction: 0x412f5920
    8944:	1c223232 	sfmne	f3, 4, [r2], #-200	; 0xffffff38
    8948:	5c942132 	ldfpls	f2, [r4], {50}	; 0x32
    894c:	05041b32 	streq	r1, [r4, #-2866]	; 0xfffff4ce
    8950:	212e5f03 			; <UNDEFINED> instruction: 0x212e5f03
    8954:	24030104 	strcs	r0, [r3], #-260	; 0xfffffefc
    8958:	1b32432e 	blne	c99618 <__ccfg+0xc79670>
    895c:	03050433 	movweq	r0, #21555	; 0x5433
    8960:	04212050 	strteq	r2, [r1], #-80	; 0xffffffb0
    8964:	2e2e0301 	cdpcs	3, 2, cr0, cr14, cr1, {0}
    8968:	51030504 	tstpl	r3, r4, lsl #10
    896c:	0301042e 	movweq	r0, #5166	; 0x142e
    8970:	05042034 	streq	r2, [r4, #-52]	; 0xffffffcc
    8974:	04204d03 	strteq	r4, [r0], #-3331	; 0xfffff2fd
    8978:	2e340301 	cdpcs	3, 3, cr0, cr4, cr1, {0}
    897c:	6923652f 	stmdbvs	r3!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}
    8980:	3e214d2f 	cdpcc	13, 2, cr4, cr1, cr15, {1}
    8984:	02003221 	andeq	r3, r0, #268435458	; 0x10000002
    8988:	58060104 	stmdapl	r6, {r2, r8}
    898c:	4a0f0306 	bmi	3c95ac <__ccfg+0x3a9604>
    8990:	2a2f3fca 	bcs	bd88c0 <__ccfg+0xbb8918>
    8994:	322b2424 	eorcc	r2, fp, #36, 8	; 0x24000000
    8998:	3d319340 	ldccc	3, cr9, [r1, #-256]!	; 0xffffff00
    899c:	213e3d3e 	teqcs	lr, lr, lsr sp
    89a0:	2d3c6303 	ldccs	3, cr6, [ip, #-12]!
    89a4:	31202603 			; <UNDEFINED> instruction: 0x31202603
    89a8:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    89ac:	0b03213e 	bleq	d0eac <__ccfg+0xb0f04>
    89b0:	7803212e 	stmdavc	r3, {r1, r2, r3, r5, r8, sp}
    89b4:	2009033c 	andcs	r0, r9, ip, lsr r3
    89b8:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    89bc:	03213c0e 			; <UNDEFINED> instruction: 0x03213c0e
    89c0:	0f032071 	svceq	0x00032071
    89c4:	231d7b3c 	tstcs	sp, #60, 22	; 0xf000
    89c8:	21226521 			; <UNDEFINED> instruction: 0x21226521
    89cc:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
    89d0:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    89d4:	3e213d4c 	cdpcc	13, 2, cr3, cr1, cr12, {2}
    89d8:	3d322c40 	ldccc	12, cr2, [r2, #-256]!	; 0xffffff00
    89dc:	01002102 	tsteq	r0, r2, lsl #2
    89e0:	02050001 	andeq	r0, r5, #1
    89e4:	00004784 	andeq	r4, r0, r4, lsl #15
    89e8:	0103b603 	tsteq	r3, r3, lsl #12
    89ec:	2f224027 	svccs	0x00224027
    89f0:	404e24a2 	submi	r2, lr, r2, lsr #9
    89f4:	02864e2a 	addeq	r4, r6, #672	; 0x2a0
    89f8:	01010009 	tsteq	r1, r9
    89fc:	00020500 	andeq	r0, r2, r0, lsl #10
    8a00:	03000000 	movweq	r0, #0
    8a04:	030103e5 	movweq	r0, #5093	; 0x13e5
    8a08:	282f200c 	stmdacs	pc!, {r2, r3, sp}	; <UNPREDICTABLE>
    8a0c:	302d5a30 	eorcc	r5, sp, r0, lsr sl
    8a10:	211f322d 	tstcs	pc, sp, lsr #4
    8a14:	2c2f2b24 			; <UNDEFINED> instruction: 0x2c2f2b24
    8a18:	302f2432 	eorcc	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    8a1c:	224b2f34 	subcs	r2, fp, #52, 30	; 0xd0
    8a20:	0c023e1e 	stceq	14, cr3, [r2], {30}
    8a24:	00010100 	andeq	r0, r1, r0, lsl #2
    8a28:	47e40205 	strbmi	r0, [r4, r5, lsl #4]!
    8a2c:	a6030000 	strge	r0, [r3], -r0
    8a30:	3f130104 	svccc	0x00130104
    8a34:	04022648 	streq	r2, [r2], #-1608	; 0xfffff9b8
    8a38:	2b010100 	blcs	48e40 <__ccfg+0x28e98>
    8a3c:	02000002 	andeq	r0, r0, #2
    8a40:	00014300 	andeq	r4, r1, r0, lsl #6
    8a44:	fb010200 	blx	4924e <__ccfg+0x292a6>
    8a48:	01000d0e 	tsteq	r0, lr, lsl #26
    8a4c:	00010101 	andeq	r0, r1, r1, lsl #2
    8a50:	00010000 	andeq	r0, r1, r0
    8a54:	2f2e0100 	svccs	0x002e0100
    8a58:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8a5c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8a60:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    8a64:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    8a68:	63006269 	movwvs	r6, #617	; 0x269
    8a6c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8a70:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8a74:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8a78:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8a7c:	5f393130 	svcpl	0x00393130
    8a80:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8a84:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8a88:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8a8c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8a90:	6f745c36 	svcvs	0x00745c36
    8a94:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8a98:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8a9c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8aa0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8aa4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8aa8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8aac:	61652d65 	cmnvs	r5, r5, ror #26
    8ab0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8ab4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8ab8:	71353130 	teqvc	r5, r0, lsr r1
    8abc:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8ac0:	6f6e2d6d 	svcvs	0x006e2d6d
    8ac4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8ac8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8acc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8ad0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8ad4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8ad8:	00656e69 	rsbeq	r6, r5, r9, ror #28
    8adc:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8ae0:	63635c69 	cmnvs	r3, #26880	; 0x6900
    8ae4:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8ae8:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8aec:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8af0:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    8af4:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8af8:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8afc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8b00:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    8b04:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8b08:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 89a0 <__exidx_end+0x2d60>
    8b0c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8b10:	63675c72 	cmnvs	r7, #29184	; 0x7200
    8b14:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8b18:	6f6e2d6d 	svcvs	0x006e2d6d
    8b1c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8b20:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    8b24:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8b28:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8b2c:	615c3371 	cmpvs	ip, r1, ror r3
    8b30:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8b34:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8b38:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8b3c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8b40:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8b44:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    8b48:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    8b4c:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    8b50:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    8b54:	00000100 	andeq	r0, r0, r0, lsl #2
    8b58:	70696863 	rsbvc	r6, r9, r3, ror #16
    8b5c:	6f666e69 	svcvs	0x00666e69
    8b60:	0100682e 	tsteq	r0, lr, lsr #16
    8b64:	645f0000 	ldrbvs	r0, [pc], #-0	; 8b6c <__exidx_end+0x2f2c>
    8b68:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8b6c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8b74 <__exidx_end+0x2f34>
    8b70:	73657079 	cmnvc	r5, #121	; 0x79
    8b74:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8b78:	735f0000 	cmpvc	pc, #0
    8b7c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    8b80:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8b84:	00000003 	andeq	r0, r0, r3
    8b88:	00020500 	andeq	r0, r2, r0, lsl #10
    8b8c:	03000000 	movweq	r0, #0
    8b90:	130100c4 	movwne	r0, #4292	; 0x10c4
    8b94:	0006022f 	andeq	r0, r6, pc, lsr #4
    8b98:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8b9c:	00000002 	andeq	r0, r0, r2
    8ba0:	00d00300 	sbcseq	r0, r0, r0, lsl #6
    8ba4:	032f1401 			; <UNDEFINED> instruction: 0x032f1401
    8ba8:	08022e0a 	stmdaeq	r2, {r1, r3, r9, sl, fp, sp}
    8bac:	00010100 	andeq	r0, r1, r0, lsl #2
    8bb0:	47fc0205 	ldrbmi	r0, [ip, r5, lsl #4]!
    8bb4:	e6030000 	str	r0, [r3], -r0
    8bb8:	2a1a0100 	bcs	688fc0 <__ccfg+0x669018>
    8bbc:	0302044e 	movweq	r0, #9294	; 0x244e
    8bc0:	042e019b 	strteq	r0, [lr], #-411	; 0xfffffe65
    8bc4:	7ee60301 	cdpvc	3, 14, cr0, cr6, cr1, {0}
    8bc8:	4b4c232e 	blmi	1311888 <__ccfg+0x12f18e0>
    8bcc:	242f724b 	strtcs	r7, [pc], #-587	; 8bd4 <__exidx_end+0x2f94>
    8bd0:	01000502 	tsteq	r0, r2, lsl #10
    8bd4:	02050001 	andeq	r0, r5, #1
    8bd8:	00000000 	andeq	r0, r0, r0
    8bdc:	01018303 	tsteq	r1, r3, lsl #6
    8be0:	b0030204 	andlt	r0, r3, r4, lsl #4
    8be4:	01042001 	tsteq	r4, r1
    8be8:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    8bec:	03233139 			; <UNDEFINED> instruction: 0x03233139
    8bf0:	0a033c78 	beq	d7dd8 <__ccfg+0xb7e30>
    8bf4:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
    8bf8:	00050225 	andeq	r0, r5, r5, lsr #4
    8bfc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8c00:	00484802 	subeq	r4, r8, r2, lsl #16
    8c04:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    8c08:	03020401 	movweq	r0, #9217	; 0x2401
    8c0c:	032000e3 			; <UNDEFINED> instruction: 0x032000e3
    8c10:	6f032e11 	svcvs	0x00032e11
    8c14:	2011033c 	andscs	r0, r1, ip, lsr r3
    8c18:	03010425 	movweq	r0, #5157	; 0x1425
    8c1c:	923c7f8c 	eorsls	r7, ip, #140, 30	; 0x230
    8c20:	21222195 			; <UNDEFINED> instruction: 0x21222195
    8c24:	39414122 	stmdbcc	r1, {r1, r5, r8, lr}^
    8c28:	272e0903 	strcs	r0, [lr, -r3, lsl #18]!
    8c2c:	212e7303 			; <UNDEFINED> instruction: 0x212e7303
    8c30:	03206403 			; <UNDEFINED> instruction: 0x03206403
    8c34:	04022030 	streq	r2, [r2], #-48	; 0xffffffd0
    8c38:	00010100 	andeq	r0, r1, r0, lsl #2
    8c3c:	48b40205 	ldmmi	r4!, {r0, r2, r9}
    8c40:	e0030000 	and	r0, r3, r0
    8c44:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8c48:	2001a403 	andcs	sl, r1, r3, lsl #8
    8c4c:	dd030104 	stfles	f0, [r3, #-16]
    8c50:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    8c54:	2e029003 	cdpcs	0, 0, cr9, cr2, cr3, {0}
    8c58:	f0030104 			; <UNDEFINED> instruction: 0xf0030104
    8c5c:	02002e7d 	andeq	r2, r0, #2000	; 0x7d0
    8c60:	09030104 	stmdbeq	r3, {r2, r8}
    8c64:	0002022e 	andeq	r0, r2, lr, lsr #4
    8c68:	021e0101 	andseq	r0, lr, #1073741824	; 0x40000000
    8c6c:	00020000 	andeq	r0, r2, r0
    8c70:	00000142 	andeq	r0, r0, r2, asr #2
    8c74:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8c78:	0101000d 	tsteq	r1, sp
    8c7c:	00000101 	andeq	r0, r0, r1, lsl #2
    8c80:	00000100 	andeq	r0, r0, r0, lsl #2
    8c84:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8c88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8c8c:	2f2e2e2f 	svccs	0x002e2e2f
    8c90:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    8c94:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8c98:	3a630062 	bcc	18c8e28 <__ccfg+0x18a8e80>
    8c9c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8ca0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    8ca4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8ca8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8cac:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8cb0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    8cb4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8cb8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8cbc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8cc0:	6f6f745c 	svcvs	0x006f745c
    8cc4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8cc8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8ccc:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8cd0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    8cd4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8cd8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8cdc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8ce0:	5f342d69 	svcpl	0x00342d69
    8ce4:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8ce8:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8cec:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8cf0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8cf4:	61652d65 	cmnvs	r5, r5, ror #26
    8cf8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8cfc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8d00:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    8d04:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8d08:	6300656e 	movwvs	r6, #1390	; 0x56e
    8d0c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8d10:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8d14:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8d18:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8d1c:	5f393130 	svcpl	0x00393130
    8d20:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    8d24:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8d28:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8d2c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8d30:	6f745c36 	svcvs	0x00745c36
    8d34:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8d38:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8d3c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8d40:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    8d44:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8d48:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8d4c:	61652d65 	cmnvs	r5, r5, ror #26
    8d50:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    8d54:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    8d58:	71353130 	teqvc	r5, r0, lsr r1
    8d5c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    8d60:	6f6e2d6d 	svcvs	0x006e2d6d
    8d64:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8d68:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    8d6c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8d70:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    8d74:	00737973 	rsbseq	r7, r3, r3, ror r9
    8d78:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    8d7c:	0100682e 	tsteq	r0, lr, lsr #16
    8d80:	64640000 	strbtvs	r0, [r4], #-0
    8d84:	00632e69 	rsbeq	r2, r3, r9, ror #28
    8d88:	5f000001 	svcpl	0x00000001
    8d8c:	61666564 	cmnvs	r6, r4, ror #10
    8d90:	5f746c75 	svcpl	0x00746c75
    8d94:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8d98:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8d9c:	5f000002 	svcpl	0x00000002
    8da0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8da4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8da8:	00000300 	andeq	r0, r0, r0, lsl #6
    8dac:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    8db0:	00010068 	andeq	r0, r1, r8, rrx
    8db4:	05000000 	streq	r0, [r0, #-0]
    8db8:	0048cc02 	subeq	ip, r8, r2, lsl #24
    8dbc:	01880300 	orreq	r0, r8, r0, lsl #6
    8dc0:	30312001 	eorscc	r2, r1, r1
    8dc4:	22221e50 	eorcs	r1, r2, #80, 28	; 0x500
    8dc8:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    8dcc:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8dd0:	02050002 	andeq	r0, r5, #2
    8dd4:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
    8dd8:	0100c303 	tsteq	r0, r3, lsl #6
    8ddc:	02010a03 	andeq	r0, r1, #12288	; 0x3000
    8de0:	01010004 	tsteq	r1, r4
    8de4:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8de8:	00000002 	andeq	r0, r0, r2
    8dec:	00d80300 	sbcseq	r0, r8, r0, lsl #6
    8df0:	010e0301 	tsteq	lr, r1, lsl #6
    8df4:	78032333 	stmdavc	r3, {r0, r1, r4, r5, r8, r9, sp}
    8df8:	4f35352e 	svcmi	0x0035352e
    8dfc:	01000402 	tsteq	r0, r2, lsl #8
    8e00:	00020401 	andeq	r0, r2, r1, lsl #8
    8e04:	00000205 	andeq	r0, r0, r5, lsl #4
    8e08:	85030000 	strhi	r0, [r3, #-0]
    8e0c:	11030101 	tstne	r3, r1, lsl #2
    8e10:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    8e14:	032e1303 			; <UNDEFINED> instruction: 0x032e1303
    8e18:	09032e79 	stmdbeq	r3, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
    8e1c:	7103342e 	tstvc	r3, lr, lsr #8
    8e20:	0c03442e 	cfstrseq	mvf4, [r3], {46}	; 0x2e
    8e24:	022d2f2e 	eoreq	r2, sp, #46, 30	; 0xb8
    8e28:	01010002 	tsteq	r1, r2
    8e2c:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    8e30:	00000002 	andeq	r0, r0, r2
    8e34:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    8e38:	20110301 	andscs	r0, r1, r1, lsl #6
    8e3c:	2e74031b 	mrccs	3, 3, r0, cr4, cr11, {0}
    8e40:	2f201303 	svccs	0x00201303
    8e44:	69030104 	stmdbvs	r3, {r2, r8}
    8e48:	234d3020 	movtcs	r3, #53280	; 0xd020
    8e4c:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    8e50:	1d030204 	sfmne	f0, 4, [r3, #-16]
    8e54:	0005022e 	andeq	r0, r5, lr, lsr #4
    8e58:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8e5c:	00020500 	andeq	r0, r2, r0, lsl #10
    8e60:	03000000 	movweq	r0, #0
    8e64:	030101de 	movweq	r0, #4574	; 0x11de
    8e68:	031b2011 	tsteq	fp, #17
    8e6c:	14032e74 	strne	r2, [r3], #-3700	; 0xfffff18c
    8e70:	04302d2e 	ldrteq	r2, [r0], #-3374	; 0xfffff2d2
    8e74:	7fb90301 	svcvc	0x00b90301
    8e78:	234d3020 	movtcs	r3, #53280	; 0xd020
    8e7c:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    8e80:	c8030204 	stmdagt	r3, {r2, r9}
    8e84:	02422e00 	subeq	r2, r2, #0, 28
    8e88:	01010005 	tsteq	r1, r5
    8e8c:	00000243 	andeq	r0, r0, r3, asr #4
    8e90:	01950003 	orrseq	r0, r5, r3
    8e94:	01020000 	mrseq	r0, (UNDEF: 2)
    8e98:	000d0efb 	strdeq	r0, [sp], -fp
    8e9c:	01010101 	tsteq	r1, r1, lsl #2
    8ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    8ea4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    8ea8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8eac:	2f2e2e2f 	svccs	0x002e2e2f
    8eb0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8eb4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8eb8:	2f2e2e2f 	svccs	0x002e2e2f
    8ebc:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    8ec0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8ec4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8ec8:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 8d48 <__exidx_end+0x3108>
    8ecc:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8ed0:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    8ed4:	2e2f6d72 	mcrcs	13, 1, r6, cr15, cr2, {3}
    8ed8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8edc:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    8ee0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    8ee4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    8ee8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8eec:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    8ef0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8ef4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8ef8:	61652d65 	cmnvs	r5, r5, ror #26
    8efc:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    8f00:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    8f04:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8f08:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8f0c:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8f10:	2f646c69 	svccs	0x00646c69
    8f14:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8f18:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8f1c:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8f20:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8f24:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8f28:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8f2c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8f30:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f34:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8f38:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8f3c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8f40:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    8f44:	2f007379 	svccs	0x00007379
    8f48:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8f4c:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8f50:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8f54:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8f58:	2f787945 	svccs	0x00787945
    8f5c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8f60:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8f64:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8f68:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8f6c:	2f62696c 	svccs	0x0062696c
    8f70:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8f74:	636f6c2f 	cmnvs	pc, #12032	; 0x2f00
    8f78:	00656c61 	rsbeq	r6, r5, r1, ror #24
    8f7c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8f80:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8f84:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8f88:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8f8c:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8f90:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8f94:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8f98:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8f9c:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8fa0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8fa4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8fa8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8fac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8fb0:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    8fb4:	70636d65 	rsbvc	r6, r3, r5, ror #26
    8fb8:	00632e79 	rsbeq	r2, r3, r9, ror lr
    8fbc:	73000001 	movwvc	r0, #1
    8fc0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    8fc4:	00682e66 	rsbeq	r2, r8, r6, ror #28
    8fc8:	5f000002 	svcpl	0x00000002
    8fcc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8fd0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8fd4:	72000003 	andvc	r0, r0, #3
    8fd8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8fdc:	0300682e 	movweq	r6, #2094	; 0x82e
    8fe0:	6f6c0000 	svcvs	0x006c0000
    8fe4:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    8fe8:	00000300 	andeq	r0, r0, r0, lsl #6
    8fec:	6c746573 	cfldr64vs	mvdx6, [r4], #-460	; 0xfffffe34
    8ff0:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    8ff4:	00682e65 	rsbeq	r2, r8, r5, ror #28
    8ff8:	73000004 	movwvc	r0, #4
    8ffc:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    9000:	00682e62 	rsbeq	r2, r8, r2, ror #28
    9004:	77000005 	strvc	r0, [r0, -r5]
    9008:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    900c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    9010:	6f6c0000 	svcvs	0x006c0000
    9014:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    9018:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    901c:	74730000 	ldrbtvc	r0, [r3], #-0
    9020:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    9024:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    9028:	05000000 	streq	r0, [r0, #-0]
    902c:	02050001 	andeq	r0, r5, #1
    9030:	000048fc 	strdeq	r4, [r0], -ip
    9034:	05013303 	streq	r3, [r1, #-771]	; 0xfffffcfd
    9038:	010e0303 	tsteq	lr, r3, lsl #6
    903c:	16131313 			; <UNDEFINED> instruction: 0x16131313
    9040:	03060105 	movweq	r0, #24837	; 0x6105
    9044:	0605016b 	streq	r0, [r5], -fp, ror #2
    9048:	053c1503 	ldreq	r1, [ip, #-1283]!	; 0xfffffafd
    904c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    9050:	18052e01 	stmdane	r5, {r0, r9, sl, fp, sp}
    9054:	01040200 	mrseq	r0, R12_usr
    9058:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    905c:	0b059e01 	bleq	170868 <__ccfg+0x1508c0>
    9060:	1a052806 	bne	153080 <__ccfg+0x1330d8>
    9064:	39301306 	ldmdbcc	r0!, {r1, r2, r8, r9, ip}
    9068:	2f060b05 	svccs	0x00060b05
    906c:	061a0513 			; <UNDEFINED> instruction: 0x061a0513
    9070:	060b0501 	streq	r0, [fp], -r1, lsl #10
    9074:	0106133d 	tsteq	r6, sp, lsr r3
    9078:	7a030d05 	bvc	cc494 <__ccfg+0xac4ec>
    907c:	4a0a0320 	bmi	289d04 <__ccfg+0x269d5c>
    9080:	20203c20 	eorcs	r3, r0, r0, lsr #24
    9084:	30060b05 	andcc	r0, r6, r5, lsl #22
    9088:	01061a05 	tsteq	r6, r5, lsl #20
    908c:	2f060b05 	svccs	0x00060b05
    9090:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    9094:	204a581d 	subcs	r5, sl, sp, lsl r8
    9098:	0b030e05 	bleq	cc8b4 <__ccfg+0xac90c>
    909c:	20090520 	andcs	r0, r9, r0, lsr #10
    90a0:	2e2e5e03 	cdpcs	14, 2, cr5, cr14, cr3, {0}
    90a4:	03060505 	movweq	r0, #25861	; 0x6505
    90a8:	0c052023 	stceq	0, cr2, [r5], {35}	; 0x23
    90ac:	09050106 	stmdbeq	r5, {r1, r2, r8}
    90b0:	3301053b 	movwcc	r0, #5435	; 0x153b
    90b4:	59030905 	stmdbpl	r3, {r0, r2, r8, fp}
    90b8:	030e0558 	movweq	r0, #58712	; 0xe558
    90bc:	09052022 	stmdbeq	r5, {r1, r5, sp}
    90c0:	3c0e0520 	cfstr32cc	mvfx0, [lr], {32}
    90c4:	5e030905 	vmlapl.f16	s0, s6, s10	; <UNPREDICTABLE>
    90c8:	030d0520 	movweq	r0, #54560	; 0xd520
    90cc:	02022e17 	andeq	r2, r2, #368	; 0x170
    90d0:	71010100 	mrsvc	r0, (UNDEF: 17)
    90d4:	03000001 	movweq	r0, #1
    90d8:	00011700 	andeq	r1, r1, r0, lsl #14
    90dc:	fb010200 	blx	498e6 <__ccfg+0x2993e>
    90e0:	01000d0e 	tsteq	r0, lr, lsl #26
    90e4:	00010101 	andeq	r0, r1, r1, lsl #2
    90e8:	00010000 	andeq	r0, r1, r0
    90ec:	2e2e0100 	sufcse	f0, f6, f0
    90f0:	2f2e2e2f 	svccs	0x002e2e2f
    90f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    90f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    90fc:	2f2e2e2f 	svccs	0x002e2e2f
    9100:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    9104:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9108:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    910c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    9110:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    9114:	752f0062 	strvc	r0, [pc, #-98]!	; 90ba <__exidx_end+0x347a>
    9118:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8f54 <__exidx_end+0x3314>
    911c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    9120:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    9124:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    9128:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    912c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    9130:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    9134:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    9138:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    913c:	2f006564 	svccs	0x00006564
    9140:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    9144:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    9148:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    914c:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    9150:	2f787945 	svccs	0x00787945
    9154:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9158:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    915c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    9160:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    9164:	2f62696c 	svccs	0x0062696c
    9168:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    916c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    9170:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    9174:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    9178:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    917c:	2f646c69 	svccs	0x00646c69
    9180:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9184:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    9188:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    918c:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    9190:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9194:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    9198:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    919c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    91a0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    91a4:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    91a8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    91ac:	00006564 	andeq	r6, r0, r4, ror #10
    91b0:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    91b4:	0100632e 	tsteq	r0, lr, lsr #6
    91b8:	74730000 	ldrbtvc	r0, [r3], #-0
    91bc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    91c0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    91c4:	745f0000 	ldrbvc	r0, [pc], #-0	; 91cc <__exidx_end+0x358c>
    91c8:	73657079 	cmnvc	r5, #121	; 0x79
    91cc:	0300682e 	movweq	r6, #2094	; 0x82e
    91d0:	65720000 	ldrbvs	r0, [r2, #-0]!
    91d4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    91d8:	00030068 	andeq	r0, r3, r8, rrx
    91dc:	636f6c00 	cmnvs	pc, #0, 24
    91e0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    91e4:	73000003 	movwvc	r0, #3
    91e8:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    91ec:	00682e62 	rsbeq	r2, r8, r2, ror #28
    91f0:	00000004 	andeq	r0, r0, r4
    91f4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    91f8:	0049a802 	subeq	sl, r9, r2, lsl #16
    91fc:	013e0300 	teqeq	lr, r0, lsl #6
    9200:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    9204:	0305141d 	movweq	r1, #21533	; 0x541d
    9208:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    920c:	20202e01 	eorcs	r2, r0, r1, lsl #28
    9210:	062f0105 	strteq	r0, [pc], -r5, lsl #2
    9214:	1303054e 	movwne	r0, #13646	; 0x354e
    9218:	01061205 	tsteq	r6, r5, lsl #4
    921c:	051f0105 	ldreq	r0, [pc, #-261]	; 911f <__exidx_end+0x34df>
    9220:	1d052112 	stfnes	f2, [r5, #-72]	; 0xffffffb8
    9224:	03052506 	movweq	r2, #21766	; 0x5506
    9228:	06060513 			; <UNDEFINED> instruction: 0x06060513
    922c:	201e0513 	andscs	r0, lr, r3, lsl r5
    9230:	2e44054a 	cdpcs	5, 4, cr0, cr4, cr10, {2}
    9234:	05491b05 	strbeq	r1, [r9, #-2821]	; 0xfffff4fb
    9238:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    923c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    9240:	02012f01 	andeq	r2, r1, #1, 30
    9244:	0101000a 	tsteq	r1, sl
    9248:	000000dc 	ldrdeq	r0, [r0], -ip
    924c:	00d60003 	sbcseq	r0, r6, r3
    9250:	01020000 	mrseq	r0, (UNDEF: 2)
    9254:	000d0efb 	strdeq	r0, [sp], -fp
    9258:	01010101 	tsteq	r1, r1, lsl #2
    925c:	01000000 	mrseq	r0, (UNDEF: 0)
    9260:	2f010000 	svccs	0x00010000
    9264:	2f727375 	svccs	0x00727375
    9268:	2f62696c 	svccs	0x0062696c
    926c:	2f636367 	svccs	0x00636367
    9270:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    9274:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    9278:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    927c:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    9280:	2f312e33 	svccs	0x00312e33
    9284:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    9288:	00656475 	rsbeq	r6, r5, r5, ror r4
    928c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    9290:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    9294:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9298:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    929c:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    92a0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    92a4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    92a8:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    92ac:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    92b0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    92b4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    92b8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    92bc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    92c0:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    92c4:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    92c8:	2f2e2e2f 	svccs	0x002e2e2f
    92cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    92d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    92d4:	2f2e2e2f 	svccs	0x002e2e2f
    92d8:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    92dc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    92e0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    92e4:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    92e8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    92ec:	74730000 	ldrbtvc	r0, [r3], #-0
    92f0:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    92f4:	0100682e 	tsteq	r0, lr, lsr #16
    92f8:	745f0000 	ldrbvc	r0, [pc], #-0	; 9300 <__exidx_end+0x36c0>
    92fc:	73657079 	cmnvc	r5, #121	; 0x79
    9300:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    9304:	65720000 	ldrbvs	r0, [r2, #-0]!
    9308:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    930c:	00020068 	andeq	r0, r2, r8, rrx
    9310:	636f6c00 	cmnvs	pc, #0, 24
    9314:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    9318:	69000002 	stmdbvs	r0, {r1}
    931c:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    9320:	00632e65 	rsbeq	r2, r3, r5, ror #28
    9324:	00000003 	andeq	r0, r0, r3
    9328:	0000019b 	muleq	r0, fp, r1
    932c:	00e20003 	rsceq	r0, r2, r3
    9330:	01020000 	mrseq	r0, (UNDEF: 2)
    9334:	000d0efb 	strdeq	r0, [sp], -fp
    9338:	01010101 	tsteq	r1, r1, lsl #2
    933c:	01000000 	mrseq	r0, (UNDEF: 0)
    9340:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    9344:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9348:	2f2e2e2f 	svccs	0x002e2e2f
    934c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9350:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    9354:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    9358:	2f2e2e00 	svccs	0x002e2e00
    935c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9360:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9364:	2f2e2e2f 	svccs	0x002e2e2f
    9368:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    936c:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    9370:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    9374:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9378:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    937c:	2f2e2e2f 	svccs	0x002e2e2f
    9380:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9384:	2f2e2f2e 	svccs	0x002e2f2e
    9388:	00636367 	rsbeq	r6, r3, r7, ror #6
    938c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9390:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9394:	2f2e2e2f 	svccs	0x002e2e2f
    9398:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 92e8 <__exidx_end+0x36a8>
    939c:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    93a0:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    93a4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    93a8:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    93ac:	2f676966 	svccs	0x00676966
    93b0:	006d7261 	rsbeq	r7, sp, r1, ror #4
    93b4:	62696c00 	rsbvs	r6, r9, #0, 24
    93b8:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    93bc:	0100632e 	tsteq	r0, lr, lsr #6
    93c0:	61680000 	cmnvs	r8, r0
    93c4:	61746873 	cmnvs	r4, r3, ror r8
    93c8:	00682e62 	rsbeq	r2, r8, r2, ror #28
    93cc:	61000002 	tstvs	r0, r2
    93d0:	692d6d72 	pushvs	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
    93d4:	682e6173 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, sp, lr}
    93d8:	00000300 	andeq	r0, r0, r0, lsl #6
    93dc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    93e0:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    93e4:	00030068 	andeq	r0, r3, r8, rrx
    93e8:	736e6900 	cmnvc	lr, #0, 18
    93ec:	6f632d6e 	svcvs	0x00632d6e
    93f0:	6174736e 	cmnvs	r4, lr, ror #6
    93f4:	2e73746e 	cdpcs	4, 7, cr7, cr3, cr14, {3}
    93f8:	00030068 	andeq	r0, r3, r8, rrx
    93fc:	6d726100 	ldfvse	f6, [r2, #-0]
    9400:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    9404:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    9408:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    940c:	00682e32 	rsbeq	r2, r8, r2, lsr lr
    9410:	00000001 	andeq	r0, r0, r1
    9414:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    9418:	0049f402 	subeq	pc, r9, r2, lsl #8
    941c:	04a40300 	strteq	r0, [r4], #768	; 0x300
    9420:	13030501 	movwne	r0, #13569	; 0x3501
    9424:	16051313 			; <UNDEFINED> instruction: 0x16051313
    9428:	01010101 	tsteq	r1, r1, lsl #2
    942c:	06010501 	streq	r0, [r1], -r1, lsl #10
    9430:	3116050f 	tstcc	r6, pc, lsl #10
    9434:	051d0105 	ldreq	r0, [sp, #-261]	; 0xfffffefb
    9438:	062e3116 			; <UNDEFINED> instruction: 0x062e3116
    943c:	0120202e 			; <UNDEFINED> instruction: 0x0120202e
    9440:	0620012e 	strteq	r0, [r0], -lr, lsr #2
    9444:	20200620 	eorcs	r0, r0, r0, lsr #12
    9448:	20062006 	andcs	r2, r6, r6
    944c:	0f060105 	svceq	0x00060105
    9450:	00231605 	eoreq	r1, r3, r5, lsl #12
    9454:	06010402 	streq	r0, [r1], -r2, lsl #8
    9458:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    945c:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    9460:	20060304 	andcs	r0, r6, r4, lsl #6
    9464:	03040200 	movweq	r0, #16896	; 0x4200
    9468:	22052006 	andcs	r2, r5, #6
    946c:	03040200 	movweq	r0, #16896	; 0x4200
    9470:	1e051406 	cdpne	4, 0, cr1, cr5, cr6, {0}
    9474:	03040200 	movweq	r0, #16896	; 0x4200
    9478:	0016052f 	andseq	r0, r6, pc, lsr #10
    947c:	1d030402 	cfstrsne	mvf0, [r3, #-8]
    9480:	02000c05 	andeq	r0, r0, #1280	; 0x500
    9484:	05220304 	streq	r0, [r2, #-772]!	; 0xfffffcfc
    9488:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    948c:	02001e03 	andeq	r1, r0, #3, 28	; 0x30
    9490:	00200304 	eoreq	r0, r0, r4, lsl #6
    9494:	06030402 	streq	r0, [r3], -r2, lsl #8
    9498:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    949c:	03050103 	movweq	r0, #20739	; 0x5103
    94a0:	03040200 	movweq	r0, #16896	; 0x4200
    94a4:	000c0514 	andeq	r0, ip, r4, lsl r5
    94a8:	06030402 	streq	r0, [r3], -r2, lsl #8
    94ac:	00030501 	andeq	r0, r3, r1, lsl #10
    94b0:	06030402 	streq	r0, [r3], -r2, lsl #8
    94b4:	00010523 	andeq	r0, r1, r3, lsr #10
    94b8:	06030402 	streq	r0, [r3], -r2, lsl #8
    94bc:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    94c0:	05020103 	streq	r0, [r2, #-259]	; 0xfffffefd
    94c4:	Address 0x00000000000094c4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	61657263 	cmnvs	r5, r3, ror #4
       4:	6d5f6574 	cfldr64vs	mvdx6, [pc, #-464]	; fffffe3c <_estack+0xdfffae3c>
       8:	61737365 	cmnvs	r3, r5, ror #6
       c:	45006567 	strmi	r6, [r0, #-1383]	; 0xfffffa99
    return node->data_base.item_array[index];
      10:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
      14:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      18:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
};
      1c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      20:	705f7375 	subsvc	r7, pc, r5, ror r3	; <UNPREDICTABLE>
      24:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
      28:	705f5f00 	subsvc	r5, pc, r0, lsl #30
      2c:	63705f69 	cmnvs	r0, #420	; 0x1a4
      30:	00735f62 	rsbseq	r5, r3, r2, ror #30
      34:	6f6d6470 	svcvs	0x006d6470
      38:	5f006564 	svcpl	0x00006564
      3c:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff1d5 <_estack+0xdfffa1d5>
			i = k;
      40:	5f746978 	svcpl	0x00746978
				j->Next = k;
      44:	73677261 	cmnvc	r7, #268435462	; 0x10000006
      48:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
}
      4c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
      50:	00796172 	rsbseq	r6, r9, r2, ror r1
      54:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		release;
      58:	5f62616c 	svcpl	0x0062616c
      5c:	5f6b7361 	svcpl	0x006b7361
			nq++;
      60:	5f726f66 	svcpl	0x00726f66
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
      64:	6f636572 	svcvs	0x00636572
      68:	695f6472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
      6c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
      70:	63775f00 	cmnvs	r7, #0, 30
      74:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
      78:	6174735f 	cmnvs	r4, pc, asr r3
      7c:	5f006574 	svcpl	0x00006574
      80:	00383472 	eorseq	r3, r8, r2, ror r4
      84:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
      88:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      8c:	735f5f00 	cmpvc	pc, #0, 30
	if (!button_still_pressed (__button_list [pbutton]))
      90:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      94:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
      98:	6f68635f 	svcvs	0x0068635f
	if (baction == NULL)
      9c:	00656369 	rsbeq	r6, r5, r9, ror #6
      a0:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
	(*baction) (pbutton);
      a4:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
endthread
      a8:	00796172 	rsbseq	r6, r9, r2, ror r1
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	20554e47 	subscs	r4, r5, r7, asr #28
      b0:	20393943 	eorscs	r3, r9, r3, asr #18
endthread
      b4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
      b8:	30322031 	eorscc	r2, r2, r1, lsr r0
      bc:	30313931 	eorscc	r3, r1, r1, lsr r9
      c0:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
      c4:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
fsm sender(struct ResponseMessage *message) {
      c8:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      cc:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
      d0:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
}
      d4:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
      d8:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
      e0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
      e4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
      e8:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
      ec:	205d3939 	subscs	r3, sp, r9, lsr r9
		packet[1] = message->gid;
      f0:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
      f4:	6f633d75 	svcvs	0x00633d75
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
      fc:	20336d2d 	eorscs	r6, r3, sp, lsr #26
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
     104:	20626d75 	rsbcs	r6, r2, r5, ror sp
		*p = message->tpe;p++;
     108:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
		*p = message->request_number;p++;
     10c:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
		*p = message->sender_id;p++;
     110:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
		*p = message->receiver_id;p++;
     114:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
		switch(message->tpe) {
     118:	616d2d20 	cmnvs	sp, r0, lsr #26
     11c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
     120:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
		tcv_endp(packet);
     124:	206d2d37 	rsbcs	r2, sp, r7, lsr sp
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     12c:	61776467 	cmnvs	r7, r7, ror #8
}
     130:	332d6672 			; <UNDEFINED> instruction: 0x332d6672
		finish;
     134:	73672d20 	cmnvc	r7, #32, 26	; 0x800
     138:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     13c:	77642d74 			; <UNDEFINED> instruction: 0x77642d74
				strncpy(p, message->record, sizeof(message->record));
     140:	20667261 	rsbcs	r7, r6, r1, ror #4
				*p = message->padding;p++;
     144:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
				strncpy(p, message->record, sizeof(message->record));
     148:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
     14c:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
     150:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
				strncpy(p, message->record, sizeof(message->record));
     154:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
     158:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
				strncpy(p, message->record, sizeof(message->record));
     15c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
				break;
     160:	736e6f69 	cmnvc	lr, #420	; 0x1a4
				*p = message->record_index;p++;
     164:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
				*p = message->padding;
     168:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
				break;
     16c:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
     170:	736e6f69 	cmnvc	lr, #420	; 0x1a4
     174:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
     178:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
     17c:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     180:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
		node->nnodes[i] = 0;
     184:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
     188:	662d2067 	strtvs	r2, [sp], -r7, rrx
     18c:	206d7361 	rsbcs	r7, sp, r1, ror #6
     190:	616d662d 	cmnvs	sp, sp, lsr #12
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	72652d78 	rsbvc	r2, r5, #120, 26	; 0x1e00
bool init_node(struct Node* node){
     198:	73726f72 	cmnvc	r2, #456	; 0x1c8
    node->id  = 0;                  // default id value 0
     19c:	0030313d 	eorseq	r3, r0, sp, lsr r1
    node->index = 0;                // default entry count 0
     1a0:	73625f5f 	cmnvc	r2, #380	; 0x17c
    node->data_base.item_count = 0; // default no items in array
     1a4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
	reset_array(node);
     1a8:	5f747261 	svcpl	0x00747261
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	6374005f 	cmnvs	r4, #95	; 0x5f
     1b0:	6d745f76 	ldclvs	15, cr5, [r4, #-472]!	; 0xfffffe28
};
     1b4:	6f720074 	svcvs	0x00720074
     1b8:	5f00746f 	svcpl	0x0000746f
uint8_t generate_request_num(void){
     1bc:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
    return (uint8_t) (rand() % 255);
     1c0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     1c4:	616c665f 	cmnvs	ip, pc, asr r6
     1c8:	68007367 	stmdavs	r0, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
}
     1cc:	00646165 	rsbeq	r6, r4, r5, ror #2
            node->nnodes[i] = 0; // set to null byte
     1d0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     1d4:	5f62616c 	svcpl	0x0062616c
     1d8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xfffff08c
};
     1e0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	6f72705f 	svcvs	0x0072705f
     1e8:	5f006f74 	svcpl	0x00006f74
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     1f0:	6e5f6261 	cdpvs	2, 5, cr6, cr15, cr1, {3}
     1f4:	675f7765 	ldrbvs	r7, [pc, -r5, ror #14]
        node->data_base.item_count -= 1;
     1f8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
};
     1fc:	0064695f 	rsbeq	r6, r4, pc, asr r9
bool delete_all(struct Node *node){
     200:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	5f62616c 	svcpl	0x0062616c
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	5f746567 	svcpl	0x00746567
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	665f6469 	ldrbvs	r6, [pc], -r9, ror #8
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	645f726f 	ldrbvs	r7, [pc], #-623	; 218 <delete_all+0x18>
            node->data_base.item_array[i].timestamp = 0;
     214:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    node->data_base.item_count = 0;
     21c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
}
     220:	6d5f6573 	cfldr64vs	mvdx6, [pc, #-460]	; 5c <g_pfnVectors+0x5c>
        return true;
     224:	61737365 	cmnvs	r3, r5, ror #6
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	305f6567 	subscc	r6, pc, r7, ror #10
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	73657200 	cmnvc	r5, #0, 4
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     234:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     238:	67617373 			; <UNDEFINED> instruction: 0x67617373
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00315f65 	eorseq	r5, r1, r5, ror #30
	response_message->tpe = RESPONSE;
     240:	70736572 	rsbsvc	r6, r3, r2, ror r5
	response_message->status = status;
     244:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
	response_message->gid = gid;
     24c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
	response_message->sender_id = sender_id;
     250:	5f00325f 	svcpl	0x0000325f
	response_message->status = status;
     254:	4b434f4c 	blmi	10d3f8c <__ccfg+0x10b3fe4>
	if (!padding){
     258:	4345525f 	movtmi	r5, #21087	; 0x525f
		response_message->padding = padding;
     25c:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
	if (rec != NULL){
     260:	545f4556 	ldrbpl	r4, [pc], #-1366	; 268 <assemble_response_message+0x42>
     264:	73657200 	cmnvc	r5, #0, 4
		strncpy(response_message->record, rec, 20);
     268:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     26c:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
     270:	67617373 			; <UNDEFINED> instruction: 0x67617373
};
     274:	00345f65 	eorseq	r5, r4, r5, ror #30
fsm receiver(struct Node* node_db) {
     278:	70736572 	rsbsvc	r6, r3, r2, ror r5
     27c:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     280:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
     284:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     288:	7500355f 	strvc	r3, [r0, #-1375]	; 0xfffffaa1
     28c:	5f726573 	svcpl	0x00726573
     290:	766f7270 			; <UNDEFINED> instruction: 0x766f7270
     294:	64656469 	strbtvs	r6, [r5], #-1129	; 0xfffffb97
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     29c:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     2a0:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     2a4:	6f6e6e00 	svcvs	0x006e6e00
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	00736564 	rsbseq	r6, r3, r4, ror #10
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
     2b0:	5f6e656c 	svcpl	0x006e656c
     2b4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		switch (response_message_5->tpe){
     2b8:	69440065 	stmdbvs	r4, {r0, r2, r5, r6}^
     2bc:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     2c0:	52797265 	rsbspl	r7, r9, #1342177286	; 0x50000006
     2c4:	6f707365 	svcvs	0x00707365
     2c8:	4d65736e 	stclmi	3, cr7, [r5, #-440]!	; 0xfffffe48
     2cc:	61737365 	cmnvs	r3, r5, ror #6
     2d0:	5f006567 	svcpl	0x00006567
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	6e5f6261 	cdpvs	2, 5, cr6, cr15, cr1, {3}
				if (discovery_request_message->gid == node_db->gid){
     2dc:	6e5f7765 	cdpvs	7, 5, cr7, cr15, cr5, {3}
     2e0:	5f65646f 	svcpl	0x0065646f
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	66006469 	strvs	r6, [r0], -r9, ror #8
     2e8:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	5f5f006b 	svcpl	0x005f006b
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	6f5f6970 	svcvs	0x005f6970
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	5f00646c 	svcpl	0x0000646c
					response_message_0->sender_id = node_db->id;
     2f8:	6f647473 	svcvs	0x00647473
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	5f007475 	svcpl	0x00007475
					DEBUG_PRINT("\r\nSending to sender");
     300:	736f7066 	cmnvc	pc, #102	; 0x66
					call sender(response_message_0, done_case);
     304:	5f00745f 	svcpl	0x0000745f
     308:	00736e66 	rsbseq	r6, r3, r6, ror #28
     30c:	6f6f635f 	svcvs	0x006f635f
     310:	0065696b 	rsbeq	r6, r5, fp, ror #18
     314:	5f766374 	svcpl	0x00766374
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	6f666e69 	svcvs	0x00666e69
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	73797300 	cmnvc	r9, #0, 6
     320:	5f746174 	svcpl	0x00746174
     324:	5f5f0074 	svcpl	0x005f0074
     328:	5f737362 	svcpl	0x00737362
     32c:	5f646e65 	svcpl	0x00646e65
     330:	425f005f 	subsmi	r0, pc, #95	; 0x5f
     334:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     338:	544f0074 	strbpl	r0, [pc], #-116	; 340 <receiver+0xc8>
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	5f524548 	svcpl	0x00524548
					node_db->index+=1;
     340:	4f525245 	svcmi	0x00525245
     344:	5f5f0052 	svcpl	0x005f0052
		tcv_endp(incoming_packet);
     348:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
     34c:	00796164 	rsbseq	r6, r9, r4, ror #2
		proceed receiving;
     350:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		ser_out(response_1_create, "\r\nData Saved");
     354:	00746c75 	rsbseq	r6, r4, r5, ror ip
     358:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
		proceed receiving;
     35c:	756f685f 	strbvc	r6, [pc, #-2143]!	; fffffb05 <_estack+0xdfffab05>
     360:	454e0072 	strbmi	r0, [lr, #-114]	; 0xffffff8e
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	4f4e5f57 	svcmi	0x004e5f57
     368:	495f4544 	ldmdbmi	pc, {r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
		proceed receiving;
     36c:	6e650044 	cdpvs	0, 6, cr0, cr5, cr4, {2}
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
     374:	5f5f0079 	svcpl	0x005f0079
     378:	616c7473 	smcvs	51011	; 0xc743
     37c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     380:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
		proceed receiving;
     384:	6f6e5f77 	svcvs	0x006e5f77
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     38c:	5f5f0064 	svcpl	0x005f0064
     390:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     394:	6f680074 	svcvs	0x00680074
		proceed receiving;
     398:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	61700064 	cmnvs	r0, r4, rrx
     3a0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
     3a4:	7a69735f 	bvc	1a5d128 <__ccfg+0x1a3d180>
     3a8:	5f5f0065 	svcpl	0x005f0065
		proceed receiving;
     3ac:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xfffff197
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	69705f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     3b4:	5f00736e 	svcpl	0x0000736e
     3b8:	5f6d745f 	svcpl	0x006d745f
     3bc:	006e696d 	rsbeq	r6, lr, sp, ror #18
		proceed receiving;
     3c0:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	72006674 	andvc	r6, r0, #116, 12	; 0x7400000
     3c8:	6f707365 	svcvs	0x00707365
		proceed receiving;
     3cc:	5f65736e 	svcpl	0x0065736e
}
     3d0:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     3d4:	5f656761 	svcpl	0x00656761
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	725f0033 	subsvc	r0, pc, #51	; 0x33
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	34646e61 	strbtcc	r6, [r4], #-3681	; 0xfffff19f
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	6e690038 	mcrvs	0, 3, r0, cr9, cr8, {1}
     3e4:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
     3e8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     3ec:	0064726f 	rsbeq	r7, r4, pc, ror #4
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
					break;
     3f4:	5f62616c 	svcpl	0x0062616c
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	61657263 	cmnvs	r5, r3, ror #4
     3fc:	705f6574 	subsvc	r6, pc, r4, ror r5	; <UNPREDICTABLE>
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	6f746f72 	svcvs	0x00746f72
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	6174735f 	cmnvs	r4, pc, asr r3
     408:	5f007472 	svcpl	0x00007472
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
     410:	6b5f746c 	blvs	17dd5c8 <__ccfg+0x17bd620>
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     418:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
     420:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     424:	6f6c2067 	svcvs	0x006c2067
     428:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     42c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     430:	2064656e 	rsbcs	r6, r4, lr, ror #10
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	00746e69 	rsbseq	r6, r4, r9, ror #28
					call sender(response_message_2, done_case);
     438:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     440:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	646f6e00 	strbtvs	r6, [pc], #-3584	; 44c <receiver+0x1d4>
     448:	62645f65 	rsbvs	r5, r4, #404	; 0x194
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	735f5f00 	cmpvc	pc, #0, 30
				DEBUG_PRINT("\r\nDelete rec");/*
     450:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
     458:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
     45c:	6e6f7361 	cdpvs	3, 6, cr7, cr15, cr1, {3}
     460:	646f4e00 	strbtvs	r4, [pc], #-3584	; 468 <receiver+0x1f0>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	42440065 	submi	r0, r4, #101	; 0x65
     468:	4c55465f 	mrrcmi	6, 5, r4, r5, cr15
     46c:	5f5f004c 	svcpl	0x005f004c
     470:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	0064695f 	rsbeq	r6, r4, pc, asr r9
     47c:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	00746573 	rsbseq	r6, r4, r3, ror r5
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     488:	6f72705f 	svcvs	0x0072705f
     48c:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
						status = (uint8_t) SUCCESS;
     494:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	735f5f00 	cmpvc	pc, #0, 30
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     4a0:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     4a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
     4a8:	0062645f 	rsbeq	r6, r2, pc, asr r4
     4ac:	5f766374 	svcpl	0x00766374
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	0065706f 	rsbeq	r7, r5, pc, rrx
     4b4:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	6f72705f 	svcvs	0x0072705f
     4bc:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
     4c0:	6e695f64 	cdpvs	15, 6, cr5, cr9, cr4, {3}
     4c4:	00786564 	rsbseq	r6, r8, r4, ror #10
     4c8:	5f746573 	svcpl	0x00746573
     4cc:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     4d0:	0064695f 	rsbeq	r6, r4, pc, asr r9
     4d4:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
     4d8:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
     4dc:	73007963 	movwvc	r7, #2403	; 0x963
     4e0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
     4e4:	64695f72 	strbtvs	r5, [r9], #-3954	; 0xfffff08e
     4e8:	735f5f00 	cmpvc	pc, #0, 30
     4ec:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     4f0:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     4f4:	76656972 			; <UNDEFINED> instruction: 0x76656972
     4f8:	72705f65 	rsbsvc	r5, r0, #404	; 0x194
     4fc:	006f746f 	rsbeq	r7, pc, pc, ror #8
     500:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     504:	5f62616c 	svcpl	0x0062616c
     508:	61656c63 	cmnvs	r5, r3, ror #24
     50c:	656e5f72 	strbvs	r5, [lr, #-3954]!	; 0xfffff08e
     510:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
     514:	5f72756f 	svcpl	0x0072756f
     518:	61727261 	cmnvs	r2, r1, ror #4
     51c:	5f5f0079 	svcpl	0x005f0079
     520:	63756e67 	cmnvs	r5, #1648	; 0x670
     524:	5f61765f 	svcpl	0x0061765f
     528:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     52c:	65746900 	ldrbvs	r6, [r4, #-2304]!	; 0xfffff700
     530:	6f635f6d 	svcvs	0x00635f6d
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	00746e75 	rsbseq	r6, r4, r5, ror lr
     538:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	5f62616c 	svcpl	0x0062616c
				DEBUG_PRINT("\r\nretrieve rec");
     540:	70736572 	rsbsvc	r6, r3, r2, ror r5
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	65736e6f 	ldrbvs	r6, [r3, #-3695]!	; 0xfffff191
     548:	645f315f 	ldrbvs	r3, [pc], #-351	; 550 <receiver+0x2d8>
     54c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     550:	5f5f0065 	svcpl	0x005f0065
     554:	616c7473 	smcvs	51011	; 0xc743
     558:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
     560:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     564:	6572635f 	ldrbvs	r6, [r2, #-863]!	; 0xfffffca1
    return node->data_base.item_array[index];
     568:	00657461 	rsbeq	r7, r5, r1, ror #8
     56c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     570:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
     574:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 57c <receiver+0x304>
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
    return node->data_base.item_array[index];
     57c:	5f007961 	svcpl	0x00007961
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	00636e69 	rsbeq	r6, r3, r9, ror #28
     584:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
     588:	6e656700 	cdpvs	7, 6, cr6, cr5, cr0, {0}
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     590:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
     594:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     598:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
     59c:	5f5f006d 	svcpl	0x005f006d
     5a0:	616c7473 	smcvs	51011	; 0xc743
     5a4:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	5f747261 	svcpl	0x00747261
     5ac:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
				DEBUG_PRINT("\r\nResponse");
     5b0:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	6f72705f 	svcvs	0x0072705f
     5b8:	5f006f74 	svcpl	0x00006f74
     5bc:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
     5c0:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
     5c4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     5c8:	00657461 	rsbeq	r7, r5, r1, ror #8
				if(!response_flag){
     5cc:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
					response_flag=1;
     5d0:	735f5f00 	cmpvc	pc, #0, 30
					trigger(&response_flag);
     5d4:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
				switch(response_message_5->status){
     5d8:	006b6f5f 	rsbeq	r6, fp, pc, asr pc
     5dc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     5e0:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
     5e4:	6c630070 	stclvs	0, cr0, [r3], #-448	; 0xfffffe40
     5e8:	5f726165 	svcpl	0x00726165
						if (response_checker[0] == response_message_5->request_number){
     5ec:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
     5f0:	69656e5f 	stmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     5f4:	6f626867 	svcvs	0x00626867
							switch(response_checker[1]){
     5f8:	615f7275 	cmpvs	pc, r5, ror r2	; <UNPREDICTABLE>
     5fc:	79617272 	stmdbvc	r1!, {r1, r4, r5, r6, r9, ip, sp, lr}^
     600:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
     604:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
									proceed response_1_create;
     608:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
						proceed response_2;
     60c:	5f5f0073 	svcpl	0x005f0073
									proceed response_1_delete;
     610:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
									proceed response_1_retrieve;
     614:	6c5f6e6f 	mrrcvs	14, 6, r6, pc, cr15	; <UNPREDICTABLE>
						proceed response_2;
     618:	00747369 	rsbseq	r7, r4, r9, ror #6
						proceed response_3;
     61c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
						proceed response_4;
     620:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	00657079 	rsbeq	r7, r5, r9, ror r0
     628:	7363775f 	cmnvc	r3, #24903680	; 0x17c0000
				break;
     62c:	6d6f7472 	cfstrdvs	mvd7, [pc, #-456]!	; 46c <receiver+0x1f4>
}
     630:	735f7362 	cmpvc	pc, #-2013265919	; 0x88000001
     634:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     638:	626d5f00 	rsbvs	r5, sp, #0, 30
     63c:	5f6e656c 	svcpl	0x006e656c
     640:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     644:	77610065 	strbvc	r0, [r1, -r5, rrx]!
fsm root {
     648:	0064726f 	rsbeq	r7, r4, pc, ror #4
     64c:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
     650:	53006e70 	movwpl	r6, #3696	; 0xe70
     654:	45434355 	strbmi	r4, [r3, #-853]	; 0xfffffcab
     658:	6c005353 	stcvs	3, cr5, [r0], {83}	; 0x53
     65c:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     660:	5f5f0063 	svcpl	0x005f0063
     664:	616c7473 	smcvs	51011	; 0xc743
     668:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     66c:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     670:	00676e69 	rsbeq	r6, r7, r9, ror #28
     674:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     678:	61646d5f 	cmnvs	r4, pc, asr sp
     67c:	5f5f0079 	svcpl	0x005f0079
     680:	616c7473 	smcvs	51011	; 0xc743
     684:	61775f62 	cmnvs	r7, r2, ror #30
     688:	645f7469 	ldrbvs	r7, [pc], #-1129	; 690 <root+0x48>
     68c:	6f637369 	svcvs	0x00637369
     690:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     694:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     69c:	5f00636e 	svcpl	0x0000636e
     6a0:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
		init_node(node_db);
     6a4:	5f63776f 	svcpl	0x0063776f
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     6ac:	615f0065 	cmpvs	pc, r5, rrx
		tcv_plug (0, &plug_null);
     6b0:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     6b4:	6c003074 	stcvs	0, cr3, [r0], {116}	; 0x74
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     6bc:	5f5f006b 	svcpl	0x005f006b
     6c0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     6c4:	61747379 	cmnvs	r4, r9, ror r3
     6c8:	5f5f0074 	svcpl	0x005f0074
			diag("Cannot open tcv interface");
     6cc:	616c7473 	smcvs	51011	; 0xc743
     6d0:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
			halt();
     6d4:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	315f6573 	cmpcc	pc, r3, ror r5	; <UNPREDICTABLE>
     6dc:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
		runfsm receiver(node_db);
     6e0:	76656972 			; <UNDEFINED> instruction: 0x76656972
     6e4:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     6ec:	635f6573 	cmpvs	pc, #482344960	; 0x1cc00000
     6f0:	6b636568 	blvs	18d9c98 <__ccfg+0x18b9cf0>
     6f4:	44007265 	strmi	r7, [r0], #-613	; 0xfffffd9b
     6f8:	6f637369 	svcvs	0x00637369
     6fc:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
		ser_inf(get_choice, "%c", &CHOICE);
     700:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
     704:	4d747365 	ldclmi	3, cr7, [r4, #-404]!	; 0xfffffe6c
     708:	61737365 	cmnvs	r3, r5, ror #6
		switch(CHOICE) {
     70c:	5f006567 	svcpl	0x00006567
     710:	5f69705f 	svcpl	0x0069705f
     714:	746e696d 	strbtvc	r6, [lr], #-2413	; 0xfffff693
     718:	5f5f006b 	svcpl	0x005f006b
     71c:	616c7473 	smcvs	51011	; 0xc743
     720:	69745f62 	ldmdbvs	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     724:	756f656d 	strbvc	r6, [pc, #-1389]!	; 1bf <generate_request_num+0x3>
     728:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
     72c:	6b636f6c 	blvs	18dc4e4 <__ccfg+0x18bc53c>
     730:	5f00745f 	svcpl	0x0000745f
     734:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     738:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
				proceed menu;
     73c:	6f707365 	svcvs	0x00707365
     740:	5f65736e 	svcpl	0x0065736e
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	5f5f0032 	svcpl	0x005f0032
     748:	616c7473 	smcvs	51011	; 0xc743
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xfffff09e
     750:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
     754:	335f6573 	cmpcc	pc, #482344960	; 0x1cc00000
		DEBUG_PRINT("setting node group ID");
     758:	735f5f00 	cmpvc	pc, #0, 30
     75c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
    node->gid = gid; 
     760:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     764:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
    node->gid = gid; 
     768:	00345f65 	eorseq	r5, r4, r5, ror #30
		proceed menu;
     76c:	63775f5f 	cmnvs	r7, #380	; 0x17c
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     770:	695f0068 	ldmdbvs	pc, {r3, r5, r6}^	; <UNPREDICTABLE>
     774:	0073626f 	rsbseq	r6, r3, pc, ror #4
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     77c:	64007375 	strvs	r7, [r0], #-885	; 0xfffffc8b
     780:	5f617461 	svcpl	0x00617461
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     784:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     788:	5f5f0079 	svcpl	0x005f0079
		if((node_db->id < 1) || (node_db->id > 25)){
     78c:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
     790:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     794:	735f5f00 	cmpvc	pc, #0, 30
			strncpy(reason, "Out of Range", 50);
     798:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     79c:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
			proceed invalid_node_id;
     7a0:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
     7a4:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 7ac <root+0x164>
				strncpy(reason, "ID is already in use", 50);
     7a8:	64695f65 	strbtvs	r5, [r9], #-3941	; 0xfffff09b
		for(int i = 0; i < node_db->index; i++){
     7ac:	735f5f00 	cmpvc	pc, #0, 30
     7b0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     7b4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
		proceed menu;
     7b8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7bc:	5f64726f 	svcpl	0x0064726f
     7c0:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
     7c4:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     7c8:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
		proceed get_new_node_id;
     7cc:	69657274 	stmdbvs	r5!, {r2, r4, r5, r6, r9, ip, sp, lr}^
     7d0:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
		if (!clear_node_neighbour_array(node_db)){
     7d4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     7d8:	656d5f64 	strbvs	r5, [sp, #-3940]!	; 0xfffff09c
			strncpy(reason, "Error Clearing Node Array", 50);
     7dc:	67617373 			; <UNDEFINED> instruction: 0x67617373
     7e0:	735f0065 	cmpvc	pc, #101	; 0x65
     7e4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
			proceed error;
     7e8:	61675f00 	cmnvs	r7, r0, lsl #30
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7ec:	5f616d6d 	svcpl	0x00616d6d
     7f0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		request_packet->gid = node_db->gid;
     7f4:	006d6167 	rsbeq	r6, sp, r7, ror #2
     7f8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
		request_packet->tpe = DISCOVERY_REQUEST;
     7fc:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
		request_packet->request_number = generate_request_num();
     800:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
     804:	5f5f0074 	svcpl	0x005f0074
		call sender(request_packet, wait_discovery);
     808:	616c7473 	smcvs	51011	; 0xc743
     80c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
		request_packet->receiver_id=0;
     810:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
		call sender(request_packet, wait_discovery);
     814:	72675f77 	rsbvc	r5, r7, #476	; 0x1dc
     818:	5f70756f 	svcpl	0x0070756f
     81c:	5f006469 	svcpl	0x00006469
			release;
     820:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
				proceed get_new_node_id;
     824:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
				proceed clear_neighbour_array;
     828:	64617000 	strbtvs	r7, [r1], #-0
				proceed create_proto_start;
     82c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
				proceed start_delete_proto;
     830:	756d5f00 	strbvc	r5, [sp, #-3840]!	; 0xfffff100
				proceed start_retrieve_proto;
     834:	4b00746c 	blmi	1d9ec <__exidx_end+0x17dac>
				proceed display_db;
     838:	2f504d54 	svccs	0x00504d54
				proceed del_local;
     83c:	2e707061 	cdpcs	0, 7, cr7, cr0, cr1, {3}
			if(node_db->id == node_db->nnodes[i]){
     840:	5f5f0063 	svcpl	0x005f0063
     844:	6e6f4c55 	mcrvs	12, 3, r4, cr15, cr5, {2}
     848:	775f0067 	ldrbvc	r0, [pc, -r7, rrx]
				strncpy(reason, "ID is already in use", 50);
     84c:	6f747263 	svcvs	0x00747263
     850:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
				proceed invalid_node_id;
     854:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
     858:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
		for(int i = 0; i < node_db->index; i++){
     85c:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
		if (discovery_wait_flag == 0){
     860:	6f707365 	svcvs	0x00707365
			discovery_wait_flag=1;
     864:	5f65736e 	svcpl	0x0065736e
     868:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
			delay(3000, find_proto_start);
     86c:	615f5f00 	cmpvs	pc, r0, lsl #30
     870:	5f5f0070 	svcpl	0x005f0070
		if (discovery_wait_flag == 1){
     874:	616c7473 	smcvs	51011	; 0xc743
			discovery_wait_flag=0;
     878:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xfffff09e
     87c:	6f6c5f6c 	svcvs	0x006c5f6c
			delay(3000, display_neighbour_nodes);
     880:	006c6163 	rsbeq	r6, ip, r3, ror #2
     884:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
     888:	756e6165 	strbvc	r6, [lr, #-357]!	; 0xfffffe9b
     88c:	5f5f0070 	svcpl	0x005f0070
     890:	616c7473 	smcvs	51011	; 0xc743
     894:	6f6c5f62 	svcvs	0x006c5f62
     898:	745f706f 	ldrbvc	r7, [pc], #-111	; 8a0 <root+0x258>
     89c:	756f7268 	strbvc	r7, [pc, #-616]!	; 63c <receiver+0x3c4>
     8a0:	645f6867 	ldrbvs	r6, [pc], #-2151	; 8a8 <root+0x260>
     8a4:	00617461 	rsbeq	r7, r1, r1, ror #8
     8a8:	454c4544 	strbmi	r4, [ip, #-1348]	; 0xfffffabc
     8ac:	455f4554 	ldrbmi	r4, [pc, #-1364]	; 360 <receiver+0xe8>
     8b0:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
     8b4:	626d5f00 	rsbvs	r5, sp, #0, 30
     8b8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     8bc:	00745f65 	rsbseq	r5, r4, r5, ror #30
     8c0:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
     8c4:	756f6268 	strbvc	r6, [pc, #-616]!	; 664 <root+0x1c>
     8c8:	68635f72 	stmdavs	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		if(node_db->index == 0){
     8cc:	006b6365 	rsbeq	r6, fp, r5, ror #6
     8d0:	5f746573 	svcpl	0x00746573
     8d4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
			proceed menu;
     8d8:	6469675f 	strbtvs	r6, [r9], #-1887	; 0xfffff8a1
fsm root {
     8dc:	73797300 	cmnvc	r9, #0, 6
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e0:	5f6d6574 	svcpl	0x006d6574
		for (int i=0; i<node_db->index; i++) {
     8e4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     8e8:	6f635f74 	svcvs	0x00635f74
     8ec:	00746e75 	rsbseq	r6, r4, r5, ror lr
		proceed menu;
     8f0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     8f4:	6473695f 	ldrbtvs	r6, [r3], #-2399	; 0xfffff6a1
     8f8:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     8fc:	64707165 	ldrbtvs	r7, [r0], #-357	; 0xfffffe9b
     900:	685f006d 	ldmdavs	pc, {r0, r2, r3, r5, r6}^	; <UNPREDICTABLE>
     904:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     908:	74006f6e 	strvc	r6, [r0], #-3950	; 0xfffff092
     90c:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
			strncpy(reason, "Error: improper ID", 50);
     910:	6f006f6c 	svcvs	0x00006f6c
     914:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
     918:	6e700073 	mrcvs	0, 3, r0, cr0, cr3, {3}
			proceed error;
     91c:	5f006d75 	svcpl	0x00006d75
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     920:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     924:	6d5f6261 	lfmvs	f6, 2, [pc, #-388]	; 7a8 <root+0x160>
		ser_in(get_record_to_create, user_provided_record, 20);
     928:	00756e65 	rsbseq	r6, r5, r5, ror #28
     92c:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     930:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     934:	65725f64 	ldrbvs	r5, [r2, #-3940]!	; 0xfffff09c
		create_message->gid = node_db->gid;
     938:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     93c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     940:	61755f69 	cmnvs	r5, r9, ror #30
		create_message->tpe = CREATE_RECORD;
     944:	41007472 	tstmi	r0, r2, ror r4
		create_message->request_number = generate_request_num();
     948:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
		create_message->sender_id = node_db->id;
     94c:	63655343 	cmnvs	r5, #201326593	; 0xc000001
     950:	00746547 	rsbseq	r6, r4, r7, asr #10
     954:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
		strncpy(create_message->record, user_provided_record, 20);
     958:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
		create_message->receiver_id = user_provided_receiver_id;
     95c:	78654e00 	stmdavc	r5!, {r9, sl, fp, lr}^
		strncpy(create_message->record, user_provided_record, 20);
     960:	63740074 	cmnvs	r4, #116	; 0x74
		response_checker[0] = create_message->request_number;
     964:	756f5f76 	strbvc	r5, [pc, #-3958]!	; fffff9f6 <_estack+0xdfffa9f6>
		call sender(create_message, wait);
     968:	5f5f0074 	svcpl	0x005f0074
		response_checker[1] = create_message->tpe;
     96c:	616c7473 	smcvs	51011	; 0xc743
     970:	69665f62 	stmdbvs	r6!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
		call sender(create_message, wait);
     974:	705f646e 	subsvc	r6, pc, lr, ror #8
     978:	6f746f72 	svcvs	0x00746f72
     97c:	6174735f 	cmnvs	r4, pc, asr r3
     980:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     984:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
     988:	5f455645 	svcpl	0x00455645
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     98c:	4f434552 	svcmi	0x00434552
     990:	64004452 	strvs	r4, [r0], #-1106	; 0xfffffbae
     994:	6f637369 	svcvs	0x00637369
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     998:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     99c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
			strncpy(reason, "Error: improper node ID", 50);
     9a0:	6c665f74 	stclvs	15, cr5, [r6], #-464	; 0xfffffe30
     9a4:	5f006761 	svcpl	0x00006761
			proceed error;
     9a8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     9ac:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9b0:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     9b4:	6f665f64 	svcvs	0x00665f64
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9b8:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
     9bc:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9c0:	44006576 	strmi	r6, [r0], #-1398	; 0xfffffa8a
		if (us_pr_in < 0 || us_pr_in > 40){
     9c4:	4f435349 	svcmi	0x00435349
			strncpy(reason, "Error: invalid index", 50);
     9c8:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
     9cc:	5345525f 	movtpl	r5, #21087	; 0x525f
     9d0:	534e4f50 	movtpl	r4, #61264	; 0xef50
			proceed error;
     9d4:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9d8:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     9dc:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
     9e0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
		delete_record->gid = node_db->gid;
     9e4:	5f5f0064 	svcpl	0x005f0064
		delete_record->tpe = DELETE_RECORD;
     9e8:	685f6970 	ldmdavs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
		delete_record->request_number = generate_request_num();
     9ec:	655f7865 	ldrbvs	r7, [pc, #-2149]	; 18f <reset_array+0xb>
     9f0:	745f636e 	ldrbvc	r6, [pc], #-878	; 9f8 <root+0x3b0>
		call sender(delete_record, wait);
     9f4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		delete_record->sender_id = node_db->id;
     9f8:	735f5f00 	cmpvc	pc, #0, 30
		delete_record->receiver_id = user_provided_receiver_id;
     9fc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		delete_record->record_index = us_pr_in;
     a00:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
     a04:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
		response_checker[0] = delete_record->request_number;
     a08:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		call sender(delete_record, wait);
     a0c:	76655f69 	strbtvc	r5, [r5], -r9, ror #30
     a10:	5f746e65 	svcpl	0x00746e65
     a14:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
     a18:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     a1c:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 854 <root+0x20c>
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a20:	61747362 	cmnvs	r4, r2, ror #6
     a24:	5f006574 	svcpl	0x00006574
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a28:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     a2c:	675f6261 	ldrbvs	r6, [pc, -r1, ror #4]
     a30:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
		if (get_id < 1 || get_id > 25){
     a34:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     a38:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
			strncpy(reason, "Error: improper node ID", 50);
     a3c:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     a40:	76656972 			; <UNDEFINED> instruction: 0x76656972
     a44:	5f5f0065 	svcpl	0x005f0065
			proceed error;
     a48:	616c7473 	smcvs	51011	; 0xc743
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a4c:	65675f62 	strbvs	r5, [r7, #-3938]!	; 0xfffff09e
     a50:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a54:	5f786564 	svcpl	0x00786564
     a58:	5f726f66 	svcpl	0x00726f66
     a5c:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
		if (beg_for_index < 0 || beg_for_index > 40){
     a60:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     a64:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
			strncpy(reason, "Error: invalid index", 50);
     a68:	7300746d 	movwvc	r7, #1133	; 0x46d
     a6c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
			proceed error;
     a70:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     a74:	735f5f00 	cmpvc	pc, #0, 30
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     a78:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     a7c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a80:	72635f74 	rsbvc	r5, r3, #116, 30	; 0x1d0
     a84:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     a88:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		retrieve_record->gid = node_db->gid;
     a8c:	5f64726f 	svcpl	0x0064726f
		retrieve_record->tpe = RETRIEVE_RECORD;
     a90:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
		retrieve_record->request_number = generate_request_num();
     a94:	00656761 	rsbeq	r6, r5, r1, ror #14
     a98:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
		retrieve_record->receiver_id = get_id;
     a9c:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aa0:	74736465 	ldrbtvc	r6, [r3], #-1125	; 0xfffffb9b
		retrieve_record->record_index = beg_for_index;
     aa4:	5f5f0073 	svcpl	0x005f0073
     aa8:	70006673 	andvc	r6, r0, r3, ror r6
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aac:	6f696e69 	svcvs	0x00696e69
		response_checker[0] = retrieve_record->request_number;
     ab0:	00745f64 	rsbseq	r5, r4, r4, ror #30
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     ab4:	63775f5f 	cmnvs	r7, #380	; 0x17c
		response_checker[1] = retrieve_record->tpe;
     ab8:	5f006268 	svcpl	0x00006268
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     abc:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
     ac0:	695f6c61 	ldmdbvs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
		call sender(retrieve_record, wait);
     ac4:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
     ac8:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
     acc:	5f5f0072 	svcpl	0x005f0072
     ad0:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     ad4:	00726165 	rsbseq	r6, r2, r5, ror #2
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad8:	65737361 	ldrbvs	r7, [r3, #-865]!	; 0xfffffc9f
     adc:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
		if(node_db->data_base.item_count != 0){
     ae0:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
     ae4:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
     ae8:	656d5f65 	strbvs	r5, [sp, #-3941]!	; 0xfffff09b
		ser_out(loop_through_data, "\r\n");
     aec:	67617373 			; <UNDEFINED> instruction: 0x67617373
     af0:	5f5f0065 	svcpl	0x005f0065
		proceed menu;
     af4:	616c7473 	smcvs	51011	; 0xc743
		delete_all(node_db);
     af8:	73615f62 	cmnvc	r1, #392	; 0x188
     afc:	6f665f6b 	svcvs	0x00665f6b
		proceed menu;
     b00:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
     b04:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
		delay(3000, timeout);
     b08:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
     b0c:	76656972 			; <UNDEFINED> instruction: 0x76656972
		when(&response_flag, menu);
     b10:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
     b14:	00786564 	rsbseq	r6, r8, r4, ror #10
		release;
     b18:	52544552 	subspl	r4, r4, #343932928	; 0x14800000
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b1c:	45564549 	ldrbmi	r4, [r6, #-1353]	; 0xfffffab7
     b20:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b24:	5f00524f 	svcpl	0x0000524f
     b28:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     b2c:	655f6261 	ldrbvs	r6, [pc, #-609]	; 8d3 <root+0x28b>
     b30:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
		for (int i=0; i<node_db->index; i++) {
     b34:	4c454400 	cfstrdmi	mvd4, [r5], {-0}
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b38:	5f455445 	svcpl	0x00455445
     b3c:	4f434552 	svcmi	0x00434552
     b40:	5f004452 	svcpl	0x00004452
     b44:	61636f6c 	cmnvs	r3, ip, ror #30
     b48:	6d69746c 	cfstrdvs	mvd7, [r9, #-432]!	; 0xfffffe50
     b4c:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
     b50:	755f0066 	ldrbvc	r0, [pc, #-102]	; af2 <root+0x4aa>
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b54:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     b58:	635f0064 	cmpvs	pc, #100	; 0x64
     b5c:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
     b60:	6d5f006e 	ldclvs	0, cr0, [pc, #-440]	; 9b0 <root+0x368>
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b64:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
     b68:	6c5f0073 	mrrcvs	0, 7, r0, pc, cr3	; <UNPREDICTABLE>
		ser_out(timeout, "\r\nFailed to reach the destination");
     b6c:	5f613436 	svcpl	0x00613436
     b70:	00667562 	rsbeq	r7, r6, r2, ror #10
		proceed menu;
     b74:	6b6c625f 	blvs	1b194f8 <__ccfg+0x1af9550>
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b78:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     b7c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; b84 <root+0x53c>
     b80:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
		proceed menu;
     b84:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
}
     b88:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     b8c:	0064726f 	rsbeq	r7, r4, pc, ror #4
     b90:	61765f5f 	cmnvs	r6, pc, asr pc
     b94:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     b98:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
     b9c:	006b636f 	rsbeq	r6, fp, pc, ror #6
     ba0:	61657243 	cmnvs	r5, r3, asr #4
     ba4:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
     ba8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     bac:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
     bb0:	00656761 	rsbeq	r6, r5, r1, ror #14
     bb4:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     bb8:	00737365 	rsbseq	r7, r3, r5, ror #6
     bbc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     bc0:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
     bc4:	63740072 	cmnvs	r4, #114	; 0x72
     bc8:	63725f76 	cmnvs	r2, #472	; 0x1d8
     bcc:	6e5f0076 	mrcvs	0, 2, r0, cr15, cr6, {3}
     bd0:	73626f69 	cmnvc	r2, #420	; 0x1a4
     bd4:	6e697700 	cdpvs	7, 6, cr7, cr9, cr0, {0}
     bd8:	00745f74 	rsbseq	r5, r4, r4, ror pc
     bdc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     be0:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
     be4:	5400745f 	strpl	r7, [r0], #-1119	; 0xfffffba1
     be8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     bec:	53494400 	movtpl	r4, #37888	; 0x9400
     bf0:	45564f43 	ldrbmi	r4, [r6, #-3907]	; 0xfffff0bd
     bf4:	525f5952 	subspl	r5, pc, #1343488	; 0x148000
     bf8:	45555145 	ldrbmi	r5, [r5, #-325]	; 0xfffffebb
static void devinit_uart (int devnum) {
     bfc:	5f005453 	svcpl	0x00005453
	adddevfunc (ioreq_uart_a, devnum);
     c00:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     c04:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
void udelay (volatile word n) {
     c08:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     c0c:	6d5f4d52 	ldclvs	13, cr4, [pc, #-328]	; acc <root+0x484>
	while (n) {
     c10:	61737365 	cmnvs	r3, r5, ror #6
     c14:	5f006567 	svcpl	0x00006567
}
     c18:	5f6f7364 	svcpl	0x006f7364
	while (n--);
     c1c:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
     c20:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     c24:	6d6f636e 	stclvs	3, cr6, [pc, #-440]!	; a74 <root+0x42c>
		n--;
     c28:	5f676e69 	svcpl	0x00676e69
     c2c:	6b636170 	blvs	18d91f4 <__ccfg+0x18b924c>
     c30:	5f007465 	svcpl	0x00007465
void mdelay (volatile word n) {
     c34:	5f69705f 	svcpl	0x0069705f
     c38:	5f007473 	svcpl	0x00007473
	while (n) {
     c3c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     c40:	695f6261 	ldmdbvs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
}
     c44:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
		udelay (999);
     c48:	7a696c61 	bvc	1a5bdd4 <__ccfg+0x1a3be2c>
     c4c:	6f6e5f65 	svcvs	0x006e5f65
		n--;
     c50:	5f006564 	svcpl	0x00006564
     c54:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
     c58:	75006675 	strvc	r6, [r0, #-1653]	; 0xfffff98b
     c5c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
void __pi_ondomain (lword d) {
     c60:	2064656e 	rsbcs	r6, r4, lr, ror #10
     c64:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
		if (__pi_systat.effpdm > 1)
     c68:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c6c:	656e5f69 	strbvs	r5, [lr, #-3945]!	; 0xfffff097
			__pi_systat.effpdm = 1;
     c70:	73660077 	cmnvc	r6, #119	; 0x77
	PRCMPowerDomainOn (d);
     c74:	646f636d 	strbtvs	r6, [pc], #-877	; c7c <__pi_ondomain+0x1c>
     c78:	454e0065 	strbmi	r0, [lr, #-101]	; 0xffffff9b
     c7c:	4f4e5f57 	svcmi	0x004e5f57
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c80:	475f4544 	ldrbmi	r4, [pc, -r4, asr #10]
     c84:	5f004449 	svcpl	0x00004449
     c88:	4243505f 	submi	r5, r3, #95	; 0x5f
	__pi_systat.ondmns |= d;
     c8c:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
     c90:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
}
     c94:	72655f65 	rsbvc	r5, r5, #404	; 0x194
     c98:	63740072 	cmnvs	r4, #114	; 0x72
void __pi_offdomain (lword d) {
     c9c:	72665f76 	rsbvc	r5, r6, #472	; 0x1d8
     ca0:	6174006d 	cmnvs	r4, sp, rrx
	PRCMPowerDomainOff (d);
     ca4:	5f006c69 	svcpl	0x00006c69
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ca8:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; ba8 <root+0x560>
     cac:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
     cb0:	6f6e5f74 	svcvs	0x006e5f74
	if (d & PRCM_DOMAIN_RFCORE) {
     cb4:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
     cb8:	665f6765 	ldrbvs	r6, [pc], -r5, ror #14
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cbc:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     cc0:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cc4:	735f5f00 	cmpvc	pc, #0, 30
     cc8:	00667562 	rsbeq	r7, r6, r2, ror #10
	__pi_systat.ondmns &= ~d;
     ccc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     cd0:	6400745f 	strvs	r7, [r0], #-1119	; 0xfffffba1
}
     cd4:	5f617461 	svcpl	0x00617461
     cd8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
void __pi_syserror (word ec, const char *m) {
     cdc:	6c675f00 	stclvs	15, cr5, [r7], #-0
	diag ("SYSERR: %x, %s", ec, m);
     ce0:	5f006575 	svcpl	0x00006575
     ce4:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
  __ASM volatile ("cpsid i" : : : "memory");
     ce8:	5f006575 	svcpl	0x00006575
     cec:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
     cf0:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
     cf4:	00747361 	rsbseq	r7, r4, r1, ror #6
		all_leds_blink;
     cf8:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
     cfc:	5f63776f 	svcpl	0x0063776f
     d00:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     d04:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d08:	766f6373 			; <UNDEFINED> instruction: 0x766f6373
     d0c:	5f797265 	svcpl	0x00797265
     d10:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
     d14:	5f747365 	svcpl	0x00747365
     d18:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     d1c:	00656761 	rsbeq	r6, r5, r1, ror #14
	while (1) {
     d20:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     d24:	5f62616c 	svcpl	0x0062616c
     d28:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     d2c:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
void tci_run_delay_timer () {
     d30:	73677261 	cmnvc	r7, #268435462	; 0x10000006
	setdel = __pi_mintk - __pi_old;
     d34:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d38:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     d3c:	5f00745f 	svcpl	0x0000745f
     d40:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	645f6261 	ldrbvs	r6, [pc], #-609	; d4c <tci_run_delay_timer+0x1c>
     d48:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
     d4c:	6e5f7961 	vnmlavs.f16	s15, s30, s3	; <UNPREDICTABLE>
     d50:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d54:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
	sti_tim;
     d58:	646f6e5f 	strbtvs	r6, [pc], #-3679	; d60 <tci_run_delay_timer+0x30>
}
     d5c:	5f007365 	svcpl	0x00007365
     d60:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
     d64:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
     d68:	2074726f 	rsbscs	r7, r4, pc, ror #4
     d6c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
	cli_aux;
     d70:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     d74:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d78:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d7c:	5f706461 	svcpl	0x00706461
     d80:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     d84:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
	sti_aux;
     d88:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
}
     d8c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     d90:	735f5f00 	cmpvc	pc, #0, 30
     d94:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
void AONRTCIntHandler () {
     d98:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d9c:	65645f74 	strbvs	r5, [r4, #-3956]!	; 0xfffff08c
     da0:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     da4:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
		if (__pi_utims [0] == 0)
     da8:	5f64726f 	svcpl	0x0064726f
     dac:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
		if (*(__pi_utims [0])) {
     db0:	00656761 	rsbeq	r6, r5, r1, ror #14
     db4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
			(*(__pi_utims [0]))--;
     db8:	5f62616c 	svcpl	0x0062616c
		if (__pi_utims [1] == 0)
     dbc:	656e6f64 	strbvs	r6, [lr, #-3940]!	; 0xfffff09c
		if (*(__pi_utims [1])) {
     dc0:	7361635f 	cmnvc	r1, #2080374785	; 0x7c000001
			aux_timer_inactive = 0;
     dc4:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
			(*(__pi_utims [1]))--;
     dc8:	7079746e 	rsbsvc	r7, r9, lr, ror #8
		if (__pi_utims [2] == 0)
     dcc:	5f007365 	svcpl	0x00007365
		if (*(__pi_utims [2])) {
     dd0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
			(*(__pi_utims [2]))--;
     dd4:	725f6261 	subsvc	r6, pc, #268435462	; 0x10000006
		if (__pi_utims [3] != 0) {
     dd8:	6f707365 	svcvs	0x00707365
			if (*(__pi_utims [3])) {
     ddc:	5f65736e 	svcpl	0x0065736e
				aux_timer_inactive = 0;
     de0:	72635f31 	rsbvc	r5, r3, #49, 30	; 0xc4
				(*(__pi_utims [3]))--;
     de4:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
	if (__pi_systat.ledsts) {
     de8:	735f5f00 	cmpvc	pc, #0, 30
     dec:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
		if (__pi_systat.ledblc++ == 0) {
     df0:	6b73615f 	blvs	1cd9374 <__ccfg+0x1cb93cc>
     df4:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
			if (__pi_systat.ledblk) {
     df8:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
     dfc:	5f64726f 	svcpl	0x0064726f
     e00:	635f6f74 	cmpvs	pc, #116, 30	; 0x1d0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e04:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     e08:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
				if (__pi_systat.ledsts & 0x2)
     e0c:	2f656d6f 	svccs	0x00656d6f
     e10:	70657473 	rsbvc	r7, r5, r3, ror r4
     e14:	2f6e6568 	svccs	0x006e6568
				if (__pi_systat.ledsts & 0x4)
     e18:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
				__pi_systat.ledblk = 0;
     e1c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
     e20:	69472f73 	stmdbvs	r7, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
			if (__pi_systat.fstblk)
     e24:	62754874 	rsbsvs	r4, r5, #116, 16	; 0x740000
     e28:	7369442f 	cmnvc	r9, #788529152	; 0x2f000000
				__pi_systat.ledblc = 200;
     e2c:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
	if (events & AON_RTC_EVFLAGS_CH0) {
     e30:	64657475 	strbtvs	r7, [r5], #-1141	; 0xfffffb8b
		cli_tim;
     e34:	7461442d 	strbtvc	r4, [r1], #-1069	; 0xfffffbd3
		__pi_new += setdel;
     e38:	74532d61 	ldrbvc	r2, [r3], #-3425	; 0xfffff29f
     e3c:	67616f72 			; <UNDEFINED> instruction: 0x67616f72
		setdel = 0;
     e40:	79532d65 	ldmdbvc	r3, {r0, r2, r5, r6, r8, sl, fp, sp}^
		RISE_N_SHINE;
     e44:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
		__pi_new += setdel;
     e48:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
		RISE_N_SHINE;
     e4c:	00745f66 	rsbseq	r5, r4, r6, ror #30
     e50:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
		aux_timer_inactive = 1;
     e54:	65526574 	ldrbvs	r6, [r2, #-1396]	; 0xfffffa8c
     e58:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
				if (__pi_systat.ledsts & 0x1)
     e5c:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e60:	00656761 	rsbeq	r6, r5, r1, ror #14
     e64:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
				if (__pi_systat.ledsts & 0x2)
     e68:	755f0066 	ldrbvc	r0, [pc, #-102]	; e0a <AONRTCIntHandler+0x72>
     e6c:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
     e70:	61725f64 	cmnvs	r2, r4, ror #30
				if (__pi_systat.ledsts & 0x8)
     e74:	5f00646e 	svcpl	0x0000646e
				__pi_systat.ledblk = 1;
     e78:	70736e75 	rsbsvc	r6, r3, r5, ror lr
     e7c:	66696365 	strbtvs	r6, [r9], -r5, ror #6
		if (aux_timer_inactive) {
     e80:	5f646569 	svcpl	0x00646569
			cli_aux;
     e84:	61636f6c 	cmnvs	r3, ip, ror #30
     e88:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     e8c:	006f666e 	rsbeq	r6, pc, lr, ror #12
     e90:	494f4843 	stmdbmi	pc, {r0, r1, r6, fp, lr}^	; <UNPREDICTABLE>
     e94:	5f004543 	svcpl	0x00004543
     e98:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     e9c:	73003273 	movwvc	r3, #627	; 0x273
     ea0:	6e5f7465 	cdpvs	4, 5, cr7, cr15, cr5, {3}
     ea4:	5f65646f 	svcpl	0x0065646f
     ea8:	655f6264 	ldrbvs	r6, [pc, #-612]	; c4c <mdelay+0x18>
word tci_update_delay_ticks (Boolean force) {
     eac:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
	cli_tim;
     eb0:	756f635f 	strbvc	r6, [pc, #-863]!	; b59 <root+0x511>
     eb4:	5f00746e 	svcpl	0x0000746e
	if (setdel) {
     eb8:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ebc:	5f006178 	svcpl	0x00006178
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ec0:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     ec4:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     ec8:	5f5f0074 	svcpl	0x005f0074
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ecc:	61636f6c 	cmnvs	r3, ip, ror #30
				AON_RTC_O_CH0CMP)) - gettav ());
     ed0:	745f656c 	ldrbvc	r6, [pc], #-1388	; ed8 <tci_update_delay_ticks+0x2c>
	return NO;
     ed4:	71657200 	cmnvc	r5, r0, lsl #4
			setdel = 0;
     ed8:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     edc:	6361705f 	cmnvs	r1, #95	; 0x5f
     ee0:	0074656b 	rsbseq	r6, r4, fp, ror #10
}
     ee4:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
		sti_tim;
     ee8:	6552006b 	ldrbvs	r0, [r2, #-107]	; 0xffffff95
		return YES;
     eec:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     ef0:	65526576 	ldrbvs	r6, [r2, #-1398]	; 0xfffffa8a
     ef4:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     ef8:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     efc:	00656761 	rsbeq	r6, r5, r1, ror #14
	UARTDisable (UART0_BASE);
     f00:	5f77656e 	svcpl	0x0077656e
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f04:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
	UARTDisable (UART0_BASE);
     f08:	735f0079 	cmpvc	pc, #121	; 0x79
	UARTConfigSetExpClk (UART0_BASE,
     f0c:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
     f10:	6e5f0072 	mrcvs	0, 2, r0, cr15, cr2, {3}
     f14:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
     f18:	5f00636f 	svcpl	0x0000636f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	66756275 			; <UNDEFINED> instruction: 0x66756275
     f20:	45524300 	ldrbmi	r4, [r2, #-768]	; 0xfffffd00
     f24:	5f455441 	svcpl	0x00455441
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f28:	4f434552 	svcmi	0x00434552
     f2c:	64004452 	strvs	r4, [r0], #-1106	; 0xfffffbae
     f30:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
	urates [0] = rate;
     f34:	6c615f65 	stclvs	15, cr5, [r1], #-404	; 0xfffffe6c
}
     f38:	6665006c 	strbtvs	r0, [r5], -ip, rrx
     f3c:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
     f40:	6e776f00 	cdpvs	15, 7, cr6, cr7, cr0, {0}
     f44:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
     f48:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
     f4c:	00746573 	rsbseq	r6, r4, r3, ror r5
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f50:	4f495047 	svcmi	0x00495047
     f54:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     f58:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f5c:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
     f60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f64:	006f6944 	rsbeq	r6, pc, r4, asr #18
     f68:	424e4f41 	submi	r4, lr, #260	; 0x104
	__pi_uart_setrate (urates [0], __pi_uart);
     f6c:	6f4d7461 	svcvs	0x004d7461
     f70:	616e456e 	cmnvs	lr, lr, ror #10
     f74:	00656c62 	rsbeq	r6, r5, r2, ror #24
     f78:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     f7c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     f80:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     f84:	666f5f69 	strbtvs	r5, [pc], -r9, ror #30
	switch (operation) {
     f88:	6d6f6466 	cfstrdvs	mvd6, [pc, #-408]!	; df8 <AONRTCIntHandler+0x60>
static int ioreq_uart_a (int operation, char *buf, int len) {
     f8c:	006e6961 	rsbeq	r6, lr, r1, ror #18
     f90:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
     f94:	75007661 	strvc	r7, [r0, #-1633]	; 0xfffff99f
     f98:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     f9c:	5f5f0073 	svcpl	0x005f0073
				*buf++ = uart_a_read;
     fa0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     fa4:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
			while (len && uart_a_char_available) {
     fa8:	77007172 	smlsdxvc	r0, r2, r1, r7
     fac:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
     fb0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
			if (len != operation) {
     fb4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
}
     fb8:	5f6e7566 	svcpl	0x006e7566
     fbc:	4f410074 	svcmi	0x00410074
			uart_a_disable_int;
     fc0:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
			if (uart_a_char_available) {
     fc4:	57787541 	ldrbpl	r7, [r8, -r1, asr #10]!
				*buf++ = uart_a_read;
     fc8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
			uart_a_disable_int;
     fcc:	65764570 	ldrbvs	r4, [r6, #-1392]!	; 0xfffffa90
     fd0:	4100746e 	tstmi	r0, lr, ror #8
			if (uart_a_char_available) {
     fd4:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     fd8:	776f5043 	strbvc	r5, [pc, -r3, asr #32]!
				uart_a_enable_int;
     fdc:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
     fe0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
				goto Redo_rx;
     fe4:	00746547 	rsbseq	r6, r4, r7, asr #10
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fe8:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     fec:	43746e49 	cmnmi	r4, #1168	; 0x490
			return -2;
     ff0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     ff4:	73797300 	cmnvc	r9, #0, 6
				uart_a_write (*buf);
     ff8:	5f6d6574 	svcpl	0x006d6574
     ffc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
			while (len && uart_a_room_in_tx) {
    1000:	4e4f4100 	dvfmie	f4, f7, f0
    1004:	53435557 	movtpl	r5, #13655	; 0x3557
    1008:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
			if (len != operation) {
    100c:	456e776f 	strbmi	r7, [lr, #-1903]!	; 0xfffff891
			uart_a_disable_int;
    1010:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1014:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
			if (uart_a_room_in_tx) {
    1018:	6c656474 	cfstrdvs	mvd6, [r5], #-464	; 0xfffffe30
    101c:	43525000 	cmpmi	r2, #0
				uart_a_enable_int;
    1020:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
    1024:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
				*buf++ = uart_a_read;
    1028:	66664f72 	uqsub16vs	r4, r6, r2
			if (uart_a_room_in_tx) {
    102c:	735f5f00 	cmpvc	pc, #0, 30
				uart_a_write (*buf);
    1030:	4d5f7465 	cfldrdmi	mvd7, [pc, #-404]	; ea4 <AONRTCIntHandler+0x10c>
    1034:	64005053 	strvs	r5, [r0], #-83	; 0xffffffad
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1038:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
    103c:	745f7469 	ldrbvc	r7, [pc], #-1129	; 1044 <ioreq_uart_a+0xbc>
			uart_a_enable_int;
    1040:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1044:	6e6f5f69 	cdpvs	15, 6, cr5, cr15, cr9, {3}
    1048:	616d6f64 	cmnvs	sp, r4, ror #30
			return 0;
    104c:	55006e69 	strpl	r6, [r0, #-3689]	; 0xfffff197
			if (len == UART_CNTRL_SETRATE) {
    1050:	48545241 	ldmdami	r4, {r0, r6, r9, ip, lr}^
				if (__pi_uart_setrate (*((word*)buf),
    1054:	6f6c4677 	svcvs	0x006c4677
    1058:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
    105c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; e94 <AONRTCIntHandler+0xfc>
				syserror (EREQPAR, "uar");
    1060:	61736944 	cmnvs	r3, r4, asr #18
			syserror (ENOOPER, "uai");
    1064:	00656c62 	rsbeq	r6, r5, r2, ror #24
			if (len == UART_CNTRL_GETRATE) {
    1068:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
				return 1;
    106c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1070:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
			syserror (ENOOPER, "uai");
    1074:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
    1078:	4f410065 	svcmi	0x00410065
    107c:	434f494e 	movtmi	r4, #63822	; 0xf94e
    1080:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1084:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
    1088:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    108c:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    1090:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
    1094:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1098:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
void UART0IntHandler () {
    109c:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10a0:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
    10a4:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
    10a8:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    10ac:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
    10b0:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10b4:	6f6c436c 	svcvs	0x006c436c
    10b8:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
		RISE_N_SHINE;
    10bc:	52500074 	subspl	r0, r0, #116	; 0x74
    10c0:	61434d43 	cmpvs	r3, r3, asr #26
		i_trigger (devevent (UART_A, READ));
    10c4:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
    10c8:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
    10cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    10d0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    10d4:	5000656c 	andpl	r6, r0, ip, ror #10
    10d8:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    10dc:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
    10e0:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    10e4:	45323369 	ldrmi	r3, [r2, #-873]!	; 0xfffffc97
    10e8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    10ec:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
    10f0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10f4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    10f8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    10fc:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
		i_trigger (devevent (UART_A, WRITE));
    1100:	73747075 	cmnvc	r4, #117	; 0x75
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1104:	52415500 	subpl	r5, r1, #0, 10
    1108:	46494654 			; <UNDEFINED> instruction: 0x46494654
		RISE_N_SHINE;
    110c:	616e454f 	cmnvs	lr, pc, asr #10
    1110:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1114:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		i_trigger (devevent (UART_A, WRITE));
    1118:	46746e49 	ldrbtmi	r6, [r4], -r9, asr #28
    111c:	7367616c 	cmnvc	r7, #108, 2
    1120:	6f696400 	svcvs	0x00696400
    1124:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1128:	5f007265 	svcpl	0x00007265
    112c:	5f69705f 	svcpl	0x0069705f
    1130:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    1134:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1138:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    113c:	776f5000 	strbvc	r5, [pc, -r0]!
    1140:	74437265 	strbvc	r7, [r3], #-613	; 0xfffffd9b
}
    1144:	4f496c72 	svcmi	0x00496c72
    1148:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    114c:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
    1150:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1154:	52500065 	subspl	r0, r0, #101	; 0x65
void __buttons_setirq (int val) {
    1158:	61434d43 	cmpvs	r3, r3, asr #26
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    115c:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
    1160:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1164:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1168:	61736944 	cmnvs	r3, r4, asr #18
    116c:	00656c62 	rsbeq	r6, r5, r2, ror #24
		bn = BUTTON_GPIO (__button_list [i]);
    1170:	70746573 	rsbsvc	r6, r4, r3, ror r5
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    1178:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    117c:	65706f00 	ldrbvs	r6, [r0, #-3840]!	; 0xfffff100
    1180:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1184:	61006e6f 	tstvs	r0, pc, ror #28
    1188:	745f7875 	ldrbvc	r7, [pc], #-2165	; 1190 <__buttons_setirq+0x38>
}
    118c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    1190:	616e695f 	cmnvs	lr, pc, asr r9
    1194:	76697463 	strbtvc	r7, [r9], -r3, ror #8
    1198:	6f700065 	svcvs	0x00700065
void __pinlist_setirq (int val) {
    119c:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
	for (i = 0; i < N_PINLIST; i++) {
    11a0:	73666e6f 	cmnvc	r6, #1776	; 0x6f0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11a4:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a8:	78745f6f 	ldmdavc	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
	for (i = 0; i < N_PINLIST; i++) {
    11ac:	33697500 	cmncc	r9, #0, 10
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11b0:	636e4932 	cmnvs	lr, #819200	; 0xc8000
    11b4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11b8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    11bc:	61423233 	cmpvs	r2, r3, lsr r2
    11c0:	5f006573 	svcpl	0x00006573
	for (i = 0; i < N_PINLIST; i++) {
    11c4:	5f6f645f 	svcpl	0x006f645f
}
    11c8:	5f696677 	svcpl	0x00696677
    11cc:	6e5f7361 	cdpvs	3, 5, cr7, cr15, cr1, {3}
    11d0:	65646565 	strbvs	r6, [r4, #-1381]!	; 0xfffffa9b
    11d4:	4f410064 	svcmi	0x00410064
void GPIOIntHandler () {
    11d8:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
if (buttons_int) {
    11dc:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
    11e0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	buttons_disable ();
    11e4:	53326843 	teqpl	r2, #4390912	; 0x430000
    11e8:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
	i_trigger ((aword)&__button_list);
    11ec:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
    11f0:	755f7469 	ldrbvc	r7, [pc, #-1129]	; d8f <tci_run_auxiliary_timer+0x1f>
    11f4:	00747261 	rsbseq	r7, r4, r1, ror #4
    11f8:	524e4f41 	subpl	r4, lr, #260	; 0x104
    11fc:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
    1200:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    1204:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1208:	72617000 	rsbvc	r7, r1, #0
    120c:	74006d61 	strvc	r6, [r0], #-3425	; 0xfffff29f
    1210:	725f6963 	subsvc	r6, pc, #1622016	; 0x18c000
    1214:	645f6e75 	ldrbvs	r6, [pc], #-3701	; 121c <GPIOIntHandler+0x44>
	RISE_N_SHINE;
    1218:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    121c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1220:	5f007265 	svcpl	0x00007265
if (pin_sensor_int) {
    1224:	5f69705f 	svcpl	0x0069705f
    1228:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
	i_trigger ((aword)(&__input_pins));
    122c:	00657361 	rsbeq	r7, r5, r1, ror #6
    1230:	6f646552 	svcvs	0x00646552
    1234:	65727000 	ldrbvs	r7, [r2, #-0]!
    1238:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    123c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
    1240:	6f660074 	svcvs	0x00660074
    1244:	00656372 	rsbeq	r6, r5, r2, ror r3
    1248:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    124c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1250:	4700656c 	strmi	r6, [r0, -ip, ror #10]
    1254:	5f4f4950 	svcpl	0x004f4950
	__pinsen_disable_and_clear;
    1258:	61656c63 	cmnvs	r5, r3, ror #24
	RISE_N_SHINE;
    125c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    1260:	6944746e 	stmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1264:	5f5f006f 	svcpl	0x005f006f
}
    1268:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    126c:	5f736e6f 	svcpl	0x00736e6f
    1270:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1274:	6d007172 	stfvss	f7, [r0, #-456]	; 0xfffffe38
    1278:	616c6564 	cmnvs	ip, r4, ror #10
void system_init () {
    127c:	5f5f0079 	svcpl	0x005f0079
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1280:	61736964 	cmnvs	r3, r4, ror #18
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1284:	5f656c62 	svcpl	0x00656c62
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1288:	00717269 	rsbseq	r7, r1, r9, ror #4
    128c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 11d8 <GPIOIntHandler>
    1290:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1294:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1298:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    129c:	6f746b73 	svcvs	0x00746b73
    12a0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    12a4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12a8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12ac:	2f534f43 	svccs	0x00534f43
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12b0:	4f636950 	svcmi	0x00636950
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12b4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12b8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12bc:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
		pin = (port_confs [i] >> 19) & 0x1f;
    12c0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	4f495047 	svcmi	0x00495047
		pin = (port_confs [i] >> 19) & 0x1f;
    12c8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12cc:	69447261 	stmdbvs	r4, {r0, r5, r6, r9, ip, sp, lr}^
    12d0:	7953006f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6}^
    12d4:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    12d8:	6e6f416c 	powvsez	f4, f7, #4.0
		if (port_confs [i] & 0x80)
    12dc:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12e0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    12e4:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
		if (port_confs [i] & 0x40)
    12e8:	666b6361 	strbtvs	r6, [fp], -r1, ror #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ec:	00656572 	rsbeq	r6, r5, r2, ror r5
    12f0:	5f696374 	svcpl	0x00696374
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f4:	5f6e7572 	svcpl	0x006e7572
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12f8:	69787561 	ldmdbvs	r8!, {r0, r5, r6, r8, sl, ip, sp, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12fc:	7261696c 	rsbvc	r6, r1, #108, 18	; 0x1b0000
	all_leds_blink;
    1300:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1304:	0072656d 	rsbseq	r6, r2, sp, ror #10
    1308:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    130c:	73696c6e 	cmnvc	r9, #28160	; 0x6e00
    1310:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    1314:	71726974 	cmnvc	r2, r4, ror r9
    1318:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    131c:	746e494f 	strbtvc	r4, [lr], #-2383	; 0xfffff6b1
    1320:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1324:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1328:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 1228 <GPIOIntHandler+0x50>
    132c:	006e6165 	rsbeq	r6, lr, r5, ror #2
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1330:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1334:	4f464946 	svcmi	0x00464946
    1338:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
	IntEnable (INT_AON_RTC_COMB);
    133c:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
    1340:	73795300 	cmnvc	r9, #0, 6
    1344:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
	__pi_malloc_init ();
    1348:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
	IntEnable (INT_AON_GPIO_EDGE);
    134c:	65526d65 	ldrbvs	r6, [r2, #-3429]	; 0xfffff29b
    1350:	00746573 	rsbseq	r6, r4, r3, ror r5
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1354:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1358:	65007661 	strvs	r7, [r0, #-1633]	; 0xfffff99f
    135c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    1360:	64750073 	ldrbtvs	r0, [r5], #-115	; 0xffffff8d
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1364:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1368:	4e4f4100 	dvfmie	f4, f7, f0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    136c:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
    1370:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1374:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
	urates [0] = UART_RATE / 100;
    1378:	5f5f0065 	svcpl	0x005f0065
    137c:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
	reinit_uart ();
    1380:	6f6d7461 	svcvs	0x006d7461
	EXTRA_INITIALIZERS;
    1384:	4f41006e 	svcmi	0x0041006e
    1388:	434f494e 	movtmi	r4, #63822	; 0xf94e
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    138c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1390:	6e45657a 	mcrvs	5, 2, r6, cr5, cr10, {3}
    1394:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1398:	4e4f4100 	dvfmie	f4, f7, f0
    139c:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	61426e6f 	cmpvs	r2, pc, ror #28
    13a4:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
			devinit [i] . init (devinit [i] . param);
    13a8:	6c6f5679 	stclvs	6, cr5, [pc], #-484	; 11cc <__pinlist_setirq+0x30>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13ac:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    13b0:	00746547 	rsbseq	r6, r4, r7, asr #10
    13b4:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
	IntEnable (INT_UART0_COMB);
    13b8:	61755f71 	cmnvs	r5, r1, ror pc
    13bc:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
}
    13c0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	tci_run_auxiliary_timer ();
    13c4:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
		diag ("");
    13c8:	00736d69 	rsbseq	r6, r3, r9, ror #26
    13cc:	746e6973 	strbtvc	r6, [lr], #-2419	; 0xfffff68d
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    13d0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13d4:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
		diag ("Leftover RAM: %d bytes",
    13d8:	6f694474 	svcvs	0x00694474
    13dc:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
    13e0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    13e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    13e8:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    13ec:	72726573 	rsbsvc	r6, r2, #482344960	; 0x1cc00000
    13f0:	6400726f 	strvs	r7, [r0], #-623	; 0xfffffd91
    13f4:	756e7665 	strbvc	r7, [lr, #-1637]!	; 0xfffff99b
    13f8:	6975006d 	ldmdbvs	r5!, {r0, r2, r3, r5, r6}^
    13fc:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    1400:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1404:	74614274 	strbtvc	r4, [r1], #-628	; 0xfffffd8c
    1408:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    140c:	52415500 	subpl	r5, r1, #0, 10
    1410:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
    1414:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1418:	5000656c 	andpl	r6, r0, ip, ror #10
    141c:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
    1420:	6c557563 	cfldr64vs	mvdx7, [r5], {99}	; 0x63
    1424:	6f436f64 	svcvs	0x00436f64
    1428:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    142c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1430:	7074756f 	rsbsvc	r7, r4, pc, ror #10
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1434:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
    1438:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    143c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1440:	61680065 	cmnvs	r8, r5, rrx
    1444:	7400746c 	strvc	r7, [r0], #-1132	; 0xfffffb94
    1448:	664f706f 	strbvs	r7, [pc], -pc, rrx
    144c:	6e69614d 	powvsem	f6, f1, #5.0
    1450:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
}
    1454:	675f006b 	ldrbvs	r0, [pc, -fp, rrx]
__attribute__ ((noreturn)) void __pi_release () {
    1458:	616c6564 	cmnvs	ip, r4, ror #10
    145c:	41550079 	cmpmi	r5, r9, ror r0
    1460:	49305452 	ldmdbmi	r0!, {r1, r4, r6, sl, ip, lr}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1464:	6148746e 	cmpvs	r8, lr, ror #8
	check_stack_overflow;
    1468:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    146c:	65440072 	strbvs	r0, [r4, #-114]	; 0xffffff8e
    1470:	6c537065 	mrrcvs	0, 6, r7, r3, cr5
	update_n_wake (MAX_WORD, NO);
    1474:	00706565 	rsbseq	r6, r0, r5, ror #10
    1478:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    147c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
	for_all_tasks (__pi_curr) {
    1480:	00676966 	rsbeq	r6, r7, r6, ror #18
    1484:	5f696374 	svcpl	0x00696374
    1488:	61647075 	smcvs	18181	; 0x4705
  __ASM volatile ("cpsid i" : : : "memory");
    148c:	645f6574 	ldrbvs	r6, [pc], #-1396	; 1494 <__pi_release+0x3c>
	__SLEEP;
    1490:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1494:	6369745f 	cmnvs	r9, #1593835520	; 0x5f000000
    1498:	4d00736b 	stcmi	3, cr7, [r0, #-428]	; 0xfffffe54
    149c:	75736165 	ldrbvc	r6, [r3, #-357]!	; 0xfffffe9b
	system_event_count ++;
    14a0:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
    14a4:	65727665 	ldrbvs	r7, [r2, #-1637]!	; 0xfffff99b
	switch (__pi_systat.effpdm) {
    14a8:	6e756671 	mrcvs	6, 3, r6, cr5, cr1, {3}
    14ac:	6b00745f 	blvs	1e630 <__exidx_end+0x189f0>
    14b0:	656c6c69 	strbvs	r6, [ip, #-3177]!	; 0xfffff397
    14b4:	5f5f0076 	svcpl	0x005f0076
			__WFI ();
    14b8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    14bc:	70637274 	rsbvc	r7, r3, r4, ror r2
    14c0:	5f5f0079 	svcpl	0x005f0079
	check_stack_overflow;
    14c4:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 13ec <system_init+0x170>	; <UNPREDICTABLE>
    14c8:	6f6c6c61 	svcvs	0x006c6c61
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    14cc:	6e750063 	cdpvs	0, 7, cr0, cr5, cr3, {3}
    14d0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
			(__pi_curr->code) (tstate (__pi_curr));
    14d4:	72667100 	rsbvc	r7, r6, #0, 2
			goto Redo;
    14d8:	69006565 	stmdbvs	r0, {r0, r2, r5, r6, r8, sl, sp, lr}
	for_all_tasks (__pi_curr) {
    14dc:	7165726f 	cmnvc	r5, pc, ror #4
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14e0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14e4:	6f665f69 	svcvs	0x00665f69
    14e8:	6b006b72 	blvs	1c2b8 <__exidx_end+0x16678>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14ec:	006c6c69 	rsbeq	r6, ip, r9, ror #24
    14f0:	6f6f706d 	svcvs	0x006f706d
    14f4:	7500736c 	strvc	r7, [r0, #-876]	; 0xfffffc94
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    14fc:	64615f72 	strbtvs	r5, [r1], #-3954	; 0xfffff08e
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1500:	41550064 	cmpmi	r5, r4, rrx
    1504:	75425452 	strbvc	r5, [r2, #-1106]	; 0xfffffbae
			__WFI ();
    1508:	5f007973 	svcpl	0x00007973
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    150c:	5f69705f 	svcpl	0x0069705f
    1510:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
}
    1514:	695f636f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1518:	0074696e 	rsbseq	r6, r4, lr, ror #18
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    151c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1520:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    1524:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1528:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    152c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    1530:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1534:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1538:	616d5f69 	cmnvs	sp, r9, ror #30
    153c:	65726678 	ldrbvs	r6, [r2, #-1656]!	; 0xfffff988
    1540:	72630065 	rsbvc	r0, r3, #101	; 0x65
    1544:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1548:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
    154c:	006b6863 	rsbeq	r6, fp, r3, ror #16
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1550:	72666e6d 	rsbvc	r6, r6, #1744	; 0x6d0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1554:	70006565 	andvc	r6, r0, r5, ror #10
    1558:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
    155c:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
    1560:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1564:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			SysCtrlSetRechargeBeforePowerDown
    1568:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    156c:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1570:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
    1574:	76656464 	strbtvc	r6, [r5], -r4, ror #8
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1578:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    157c:	64697000 	strbtvs	r7, [r9], #-0
    1580:	00726576 	rsbseq	r6, r2, r6, ror r5
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1584:	67616964 	strbvs	r6, [r1, -r4, ror #18]!
    1588:	705f5f00 	subsvc	r5, pc, r0, lsl #30
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    158c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1590:	74616372 	strbtvc	r6, [r1], #-882	; 0xfffffc8e
    1594:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
    1598:	5f746e65 	svcpl	0x00746e65
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    159c:	636d0074 	cmnvs	sp, #116	; 0x74
			while (!(AONWUCPowerStatusGet () &
    15a0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15a4:	73617700 	cmnvc	r1, #0, 14
    15a8:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
    15ac:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15b0:	73656400 	cmnvc	r5, #0, 8
    15b4:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
    15b8:	2f007373 	svccs	0x00007373
    15bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15c0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    15c4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    15c8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    15cc:	706f746b 	rsbvc	r7, pc, fp, ror #8
			SysCtrlAdjustRechargeAfterPowerDown ();
    15d0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			reinit_uart ();
    15d4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    15d8:	4349502f 	movtmi	r5, #36911	; 0x902f
    15dc:	502f534f 	eorpl	r5, pc, pc, asr #6
}
    15e0:	534f6369 	movtpl	r6, #62313	; 0xf369
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15e4:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    15e8:	2f6c656e 	svccs	0x006c656e
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15ec:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    15f0:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
    15f4:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15f8:	00746e65 	rsbseq	r6, r4, r5, ror #28
    15fc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1600:	6461625f 	strbtvs	r6, [r1], #-607	; 0xfffffda1
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1604:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1608:	5f5f0065 	svcpl	0x005f0065
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    160c:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1610:	00746961 	rsbseq	r6, r4, r1, ror #18
    1614:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1618:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    161c:	6d656d74 	stclvs	13, cr6, [r5, #-464]!	; 0xfffffe30
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1620:	6e726c00 	cdpvs	12, 7, cr6, cr2, cr0, {0}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1624:	5f5f0064 	svcpl	0x005f0064
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1628:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 1550 <__pi_release+0xf8>	; <UNPREDICTABLE>
    162c:	72666d65 	rsbvc	r6, r6, #6464	; 0x1940
			PRCMPowerDomainOff (
    1630:	63006565 	movwvs	r6, #1381	; 0x565
    1634:	6b6e7568 	blvs	1b9ebdc <__ccfg+0x1b7ec34>
	__SLEEP;
    1638:	64707500 	ldrbtvs	r7, [r0], #-1280	; 0xfffffb00
    163c:	5f657461 	svcpl	0x00657461
  __ASM volatile ("cpsie i" : : : "memory");
    1640:	61775f6e 	cmnvs	r7, lr, ror #30
	goto Redo;
    1644:	5f00656b 	svcpl	0x0000656b
    1648:	5f69705f 	svcpl	0x0069705f
    164c:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
    1650:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1654:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1658:	656c6400 	strbvs	r6, [ip, #-1024]!	; 0xfffffc00
    165c:	5f007466 	svcpl	0x00007466
    1660:	5f69705f 	svcpl	0x0069705f
    1664:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    1668:	64007970 	strvs	r7, [r0], #-2416	; 0xfffff690
    166c:	74756f67 	ldrbtvc	r6, [r5], #-3943	; 0xfffff099
    1670:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1674:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
    1678:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
    167c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    1680:	75667700 	strbvc	r7, [r6, #-1792]!	; 0xfffff900
    1684:	666e006e 	strbtvs	r0, [lr], -lr, rrx
    1688:	006c6961 	rsbeq	r6, ip, r1, ror #18
    168c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1690:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
    1694:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
    1698:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
    169c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    16a0:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
    16a4:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    16a8:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
    16ac:	6c6c616c 	stfvse	f6, [ip], #-432	; 0xfffffe50
	cli_tim;
    16b0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    16b4:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    16b8:	70636e72 	rsbvc	r6, r3, r2, ror lr
	diag ("PicOS halted");
    16bc:	5f5f0079 	svcpl	0x005f0079
	mdelay (500);
    16c0:	6a5f6970 	bvs	17dbc88 <__ccfg+0x17bbce0>
    16c4:	006e696f 	rsbeq	r6, lr, pc, ror #18
	setpowermode (2);
    16c8:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
	__PCB = NULL;
    16cc:	645f7265 	ldrbvs	r7, [pc], #-613	; 16d4 <halt+0x24>
	release;
    16d0:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    16d4:	5f5f0065 	svcpl	0x005f0065
    16d8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    16dc:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
int main (void) {
    16e0:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16e4:	715f7663 	cmpvc	pc, r3, ror #12
    16e8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16ec:	65727000 	ldrbvs	r7, [r2, #-0]!
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16f0:	5f5f0076 	svcpl	0x005f0076
	system_init ();
    16f4:	5f766374 	svcpl	0x00766374
	tcv_init ();
    16f8:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16fc:	00745f72 	rsbseq	r5, r4, r2, ror pc
    1700:	70766374 	rsbsvc	r6, r6, r4, ror r3
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1704:	745f7968 	ldrbvc	r7, [pc], #-2408	; 170c <main+0x2c>
    1708:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
    170c:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1710:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1714:	74006c6f 	strvc	r6, [r0], #-3183	; 0xfffff391
	delay (16, 0);
    1718:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
    171c:	00646165 	rsbeq	r6, r4, r5, ror #2
    1720:	70766374 	rsbsvc	r6, r6, r4, ror r3
	__pi_release ();
    1724:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1728:	65736f70 	ldrbvs	r6, [r3, #-3952]!	; 0xfffff090
    172c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1730:	5f796870 	svcpl	0x00796870
    1734:	00676572 	rsbeq	r6, r7, r2, ror r5
    1738:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    173c:	5f6e7566 	svcpl	0x006e7566
static void killev (__pi_pcb_t *pid) {
    1740:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
	wfun = (aword)(pid->code);
    1744:	2f656d6f 	svccs	0x00656d6f
	for_all_tasks (i) {
    1748:	70657473 	rsbvc	r7, r5, r3, ror r4
		for (j = 0; j < nevents (i); j++) {
    174c:	2f6e6568 	svccs	0x006e6568
    1750:	6b736544 	blvs	1cdac68 <__ccfg+0x1cbacc0>
    1754:	2f706f74 	svccs	0x00706f74
			    || i->Events [j] . Event == wfun
    1758:	4f534c4f 	svcmi	0x00534c4f
		for (j = 0; j < nevents (i); j++) {
    175c:	2f54454e 	svccs	0x0054454e
			if (i->Events [j] . Event == (aword)pid
    1760:	4f434950 	svcmi	0x00434950
    1764:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1768:	2f534f63 	svccs	0x00534f63
				wakeupev (i, j);
    176c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1770:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
	for_all_tasks (i) {
    1774:	2f497465 	svccs	0x00497465
}
    1778:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    177c:	63740063 	cmnvs	r4, #99	; 0x63
static void qfree (aword *ch) {
    1780:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
	cc = (aword*)(mpools + MA_NP);
    1788:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	m_setnextp (ch, chunk);
    178c:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
	m_setnextp (cc, ch);
    1790:	6374006e 	cmnvs	r4, #110	; 0x6e
}
    1794:	72645f76 	rsbvc	r5, r4, #472	; 0x1d8
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1798:	7000706f 	andvc	r7, r0, pc, rrx
    179c:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
    17a0:	006f666e 	rsbeq	r6, pc, lr, ror #12
			m_setnextp (cc, m_nextp (chunk));
    17a4:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
			m_size (chunk) += m_hdrlen + m_size (ch);
    17a8:	63740079 	cmnvs	r4, #121	; 0x79
    17ac:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    17b0:	6172655f 	cmnvs	r2, pc, asr r5
    17b4:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b8:	5f707663 	svcpl	0x00707663
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17bc:	61747461 	cmnvs	r4, r1, ror #8
    17c0:	6f006863 	svcvs	0x00006863
    17c4:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
			m_setnextp (cc, m_nextp (chunk));
    17c8:	5f007365 	svcpl	0x00007365
			m_size (ch) += m_hdrlen + m_size (chunk);
    17cc:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    17d0:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
    17d4:	735f6d65 	cmpvc	pc, #6464	; 0x1940
    17d8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 17e0 <qfree+0x64>
    17dc:	715f7663 	cmpvc	pc, r3, ror #12
    17e0:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
			if (m_size (chunk) >= m_size (ch))
    17e4:	5f00745f 	svcpl	0x0000745f
    17e8:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    17ec:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
		chunk = m_nextp (chunk))
    17f0:	5f6b636f 	svcpl	0x006b636f
    17f4:	74610074 	strbtvc	r0, [r1], #-116	; 0xffffff8c
    17f8:	75007074 	strvc	r7, [r0, #-116]	; 0xffffff8c
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17fc:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
	diag_wait (a);
    1800:	72450074 	subvc	r0, r5, #116	; 0x74
	diag_wchar (c, a);
    1804:	0074725f 	rsbseq	r7, r4, pc, asr r2
    1808:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
}
    180c:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0xfffff68e
    1810:	0073726f 	rsbseq	r7, r3, pc, ror #4
	syserror (ESTATE, "state");
    1814:	5f766374 	svcpl	0x00766374
    1818:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    181c:	63740065 	cmnvs	r4, #101	; 0x65
    1820:	6e655f76 	mcrvs	15, 3, r5, cr5, cr6, {3}
	for (i = 0; i < MAX_UTIMERS; i++)
    1824:	74007064 	strvc	r7, [r0], #-100	; 0xffffff9c
void utimer_add (address ut) {
    1828:	5f707663 	svcpl	0x00707663
    182c:	0077656e 	rsbseq	r6, r7, lr, ror #10
		if (__pi_utims [i] == NULL)
    1830:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0xfffffe8e
	for (i = 0; i < MAX_UTIMERS; i++)
    1834:	70006575 	andvc	r6, r0, r5, ror r5
    1838:	00737274 	rsbseq	r7, r3, r4, ror r2
		syserror (ERESOURCE, "ut a");
    183c:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
	__pi_utims [i] = ut;
    1840:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
}
    1844:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1848:	706e775f 	rsbvc	r7, lr, pc, asr r7
    184c:	63740073 	cmnvs	r4, #115	; 0x73
	*t = v;
    1850:	72775f76 	rsbsvc	r5, r7, #472	; 0x1d8
	TCI_RUN_AUXILIARY_TIMER;
    1854:	00657469 	rsbeq	r7, r5, r9, ror #8
void update_n_wake (word min, Boolean force) {
    1858:	5f766374 	svcpl	0x00766374
	if (TCI_UPDATE_DELAY_TICKS (force))
    185c:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    1860:	5f5f0065 	svcpl	0x005f0065
    1864:	5f766374 	svcpl	0x00766374
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1868:	64736573 	ldrbtvs	r6, [r3], #-1395	; 0xfffffa8d
    186c:	5f637365 	svcpl	0x00637365
    1870:	68700074 	ldmdavs	r0!, {r2, r4, r5, r6}^
    1874:	70007379 	andvc	r7, r0, r9, ror r3
    1878:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
    187c:	006c6163 	rsbeq	r6, ip, r3, ror #2
    1880:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
    1884:	74006465 	strvc	r6, [r0], #-1125	; 0xfffffb9b
    1888:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    188c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1890:	73736573 	cmnvc	r3, #482344960	; 0x1cc00000
    1894:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1898:	70766374 	rsbsvc	r6, r6, r4, ror r3
		for_all_tasks (i) {
    189c:	6f6c635f 	svcvs	0x006c635f
	__pi_mintk = znew + min;
    18a0:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
    18a4:	5f707663 	svcpl	0x00707663
			if (!twaiting (i))
    18a8:	69737361 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    18ac:	70006e67 	andvc	r6, r0, r7, ror #28
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18b0:	0064696c 	rsbeq	r6, r4, ip, ror #18
    18b4:	70766374 	rsbsvc	r6, r6, r4, ror r3
    18b8:	655f7968 	ldrbvs	r7, [pc, #-2408]	; f58 <reinit_uart+0x8>
    18bc:	6100646e 	tstvs	r0, lr, ror #8
    18c0:	61707474 	cmnvs	r0, r4, ror r4
    18c4:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
    18c8:	6374006e 	cmnvs	r4, #110	; 0x6e
    18cc:	6c705f76 	ldclvs	15, cr5, [r0], #-472	; 0xfffffe28
    18d0:	61006775 	tstvs	r0, r5, ror r7
    18d4:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
    18d8:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
    18dc:	5f5f0073 	svcpl	0x005f0073
				wakeuptm (i);
    18e0:	5f766374 	svcpl	0x00766374
    18e4:	61656871 	smcvs	22145	; 0x5681
		for_all_tasks (i) {
    18e8:	00745f64 	rsbseq	r5, r4, r4, ror #30
				d = i->Timer - znew;
    18ec:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    18f0:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
    18f4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
		if ((word)(__pi_mintk - znew) < min) 
    18f8:	69640068 	stmdbvs	r4!, {r3, r5, r6}^
    18fc:	74007073 	strvc	r7, [r0], #-115	; 0xffffff8d
    1900:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
	__pi_old = znew;
    1904:	7400706e 	strvc	r7, [r0], #-110	; 0xffffff92
}
    1908:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	TCI_RUN_DELAY_TIMER;
    190c:	63725f79 	cmnvs	r2, #484	; 0x1e4
}
    1910:	71620076 	smcvc	8198	; 0x2006
    1914:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    1918:	756c7000 	strbvc	r7, [ip, #-0]!
    191c:	736e6967 	cmnvc	lr, #1687552	; 0x19c000
    1920:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1928 <proceed+0x4>
void proceed (word state) {
    1924:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	prcdstate (__pi_curr, state);
    1928:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    192c:	00735f6b 	rsbseq	r5, r3, fp, ror #30
	release;
    1930:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
    1934:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
void __pi_wait (aword event, word state) {
    1938:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	sint j = nevents (__pi_curr);
    193c:	6f635f70 	svcvs	0x00635f70
	if (j >= MAX_EVENTS_PER_TASK)
    1940:	6f72746e 	svcvs	0x0072746e
    1944:	655f006c 	ldrbvs	r0, [pc, #-108]	; 18e0 <update_n_wake+0x88>
    1948:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
		syserror (ENEVENTS, "sw");
    194c:	7570006b 	ldrbvc	r0, [r0, #-107]!	; 0xffffff95
    1950:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
	setestate (__pi_curr->Events [j], state, event);
    1954:	46006372 			; <UNDEFINED> instruction: 0x46006372
	incwait (__pi_curr);
    1958:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
	setestate (__pi_curr->Events [j], state, event);
    195c:	48525349 	ldmdami	r2, {r0, r3, r6, r8, r9, ip, lr}^
}
    1960:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1964:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
    1968:	5253696d 	subspl	r6, r3, #1785856	; 0x1b4000
void __pi_trigger (aword event) {
    196c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
	for_all_tasks (i) {
    1970:	0072656c 	rsbseq	r6, r2, ip, ror #10
		for (j = 0; j < nevents (i); j++) {
    1974:	6574655f 	ldrbvs	r6, [r4, #-1375]!	; 0xfffffaa1
    1978:	5f007478 	svcpl	0x00007478
    197c:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
    1980:	6f682f00 	svcvs	0x00682f00
			if (i->Events [j] . Event == event) {
    1984:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    1988:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    198c:	442f6e65 	strtmi	r6, [pc], #-3685	; 1994 <__pi_trigger+0x28>
				wakeupev (i, j);
    1990:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1994:	4f2f706f 	svcmi	0x002f706f
	for_all_tasks (i) {
    1998:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
}
    199c:	502f5445 	eorpl	r5, pc, r5, asr #8
aword __pi_join (aword pid, word st) {
    19a0:	534f4349 	movtpl	r4, #62281	; 0xf349
	for_all_tasks (i) {
    19a4:	6369502f 	cmnvs	r9, #47	; 0x2f
    19a8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	return 0;
    19ac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		if ((aword)i == pid) {
    19b0:	74732f58 	ldrbtvc	r2, [r3], #-3928	; 0xfffff0a8
			__pi_wait (pid, st);
    19b4:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
}
    19b8:	63675f70 	cmnvs	r7, #112, 30	; 0x1c0
	for_all_tasks (i) {
    19bc:	00632e63 	rsbeq	r2, r3, r3, ror #28
    19c0:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
void delay (word d, word state) {
    19c4:	64655f00 	strbtvs	r5, [r5], #-3840	; 0xfffff100
	settstate (__pi_curr, state);
    19c8:	00617461 	rsbeq	r7, r1, r1, ror #8
    19cc:	44746e49 	ldrbtmi	r6, [r4], #-3657	; 0xfffff1b7
    19d0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    19d4:	6148746c 	cmpvs	r8, ip, ror #8
	update_n_wake (d, YES);
    19d8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    19dc:	5f670072 	svcpl	0x00670072
	__pi_curr->Timer = __pi_old + d;
    19e0:	566e6670 			; <UNDEFINED> instruction: 0x566e6670
    19e4:	6f746365 	svcvs	0x00746365
	inctimer (__pi_curr);
    19e8:	70007372 	andvc	r7, r0, r2, ror r3
    19ec:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    19f0:	74736544 	ldrbtvc	r6, [r3], #-1348	; 0xfffffabc
}
    19f4:	73655200 	cmnvc	r5, #0, 4
    19f8:	53497465 	movtpl	r7, #37989	; 0x9465
	if (fun == NULL)
    19fc:	43430052 	movtmi	r0, #12370	; 0x3052
		return (int) __pi_curr;
    1a00:	565f4746 	ldrbpl	r4, [pc], -r6, asr #14
    1a04:	5f544c4f 	svcpl	0x00544c4f
	for_all_tasks (i)
    1a08:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
}
    1a0c:	4300305f 	movwmi	r3, #95	; 0x5f
		if (i->code == fun)
    1a10:	5f474643 	svcpl	0x00474643
	for_all_tasks (i)
    1a14:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
    1a18:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
    1a1c:	00315f44 	eorseq	r5, r1, r4, asr #30
int __pi_strlen (const char *s) {
    1a20:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for (i = 0; *(s+i) != '\0'; i++);
    1a24:	5f4c425f 	svcpl	0x004c425f
}
    1a28:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
	for (i = 0; *(s+i) != '\0'; i++);
    1a2c:	43004749 	movwmi	r4, #1865	; 0x749
	while ((Boolean)(*d++ = *s++));
    1a30:	5f474643 	svcpl	0x00474643
    1a34:	5f435452 	svcpl	0x00435452
    1a38:	5346464f 	movtpl	r4, #26191	; 0x664f
}
    1a3c:	43005445 	movwmi	r5, #1093	; 0x445
	while (n-- && (*s != '\0'))
    1a40:	5f474643 	svcpl	0x00474643
    1a44:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
	*d = '\0';
    1a48:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
	while (n-- && (*s != '\0'))
    1a4c:	5f5f0046 	svcpl	0x005f0046
    1a50:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
		*d++ = *s++;
    1a54:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1a58:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
	while (n--)
    1a5c:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
    1a60:	445f444e 	ldrbmi	r4, [pc], #-1102	; 1a68 <__pi_memcpy+0xe>
		*dest++ = *src++;
    1a64:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
    1a68:	5347414c 	movtpl	r4, #29004	; 0x714c
    1a6c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	while (n--)
    1a70:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
}
    1a74:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; 1968 <__pi_wait+0x30>
		*dest++ = c;
    1a78:	305f4341 	subscc	r4, pc, r1, asr #6
void adddevfunc (devreqfun_t rf, int loc) {
    1a7c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		syserror (EREQPAR, "addv");
    1a80:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
		syserror (ERESOURCE, "addv");
    1a84:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; 1978 <__pi_trigger+0xc>
	if (ioreq [loc] != NULL)
    1a88:	315f4341 	cmpcc	pc, r1, asr #6
    1a8c:	6f682f00 	svcvs	0x00682f00
		syserror (ERESOURCE, "addv");
    1a90:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
	ioreq [loc] = rf;
    1a94:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
}
    1a98:	442f6e65 	strtmi	r6, [pc], #-3685	; 1aa0 <io>
    1a9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
sint io (word retry, word dev, word operation, char *buf, word len) {
    1aa0:	4f2f706f 	svcmi	0x002f706f
    1aa4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1aa8:	502f5445 	eorpl	r5, pc, r5, asr #8
    1aac:	534f4349 	movtpl	r4, #62281	; 0xf349
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1ab0:	6369502f 	cmnvs	r9, #47	; 0x2f
    1ab4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    1ab8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
		syserror (ENODEVICE, "io");
    1abc:	63632f58 	cmnvs	r3, #88, 30	; 0x160
    1ac0:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
	if (len == 0)
    1ac4:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	ret = (ioreq [dev]) (operation, buf, len);
    1ac8:	4f4d5f47 	svcmi	0x004d5f47
    1acc:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
	if (ret >= 0)
    1ad0:	5f464e4f 	svcpl	0x00464e4f
	if (ret == -1) {
    1ad4:	43430031 	movtmi	r0, #12337	; 0x3031
    1ad8:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
		if (retry == WNONE)
    1adc:	5f474643 	svcpl	0x00474643
		iowait (dev, operation, retry);
    1ae0:	5f504154 	svcpl	0x00504154
    1ae4:	5f504144 	svcpl	0x00504144
    1ae8:	43430030 	movtmi	r0, #12336	; 0x3030
			release;
    1aec:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	if (ret == -2) {
    1af0:	5f474643 	svcpl	0x00474643
		if (retry != WNONE) {
    1af4:	5f504154 	svcpl	0x00504154
    1af8:	5f504144 	svcpl	0x00504144
			iowait (dev, operation, retry);
    1afc:	63630031 	cmnvs	r3, #49	; 0x31
    1b00:	745f6766 	ldrbvc	r6, [pc], #-1894	; 1b08 <io+0x68>
			(ioreq [dev]) (NONE, buf, len);
    1b04:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1b08:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1b0c:	505f4746 	subspl	r4, pc, r6, asr #14
		(ioreq [dev]) (NONE, buf, len);
    1b10:	5f544f52 	svcpl	0x00544f52
    1b14:	5f373231 	svcpl	0x00373231
    1b18:	43003639 	movwmi	r3, #1593	; 0x639
}
    1b1c:	5f474643 	svcpl	0x00474643
	if (retry != WNONE) {
    1b20:	53415245 	movtpl	r5, #4677	; 0x1245
		delay (-ret - 2, retry);
    1b24:	4f435f45 	svcmi	0x00435f45
    1b28:	4300464e 	movwmi	r4, #1614	; 0x64e
    1b2c:	5f474643 	svcpl	0x00474643
    1b30:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		release;
    1b34:	4f52505f 	svcmi	0x0052505f
    1b38:	31335f54 	teqcc	r3, r4, asr pc
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1b3c:	4300305f 	movwmi	r3, #95	; 0x5f
    1b40:	5f474643 	svcpl	0x00474643
    1b44:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
    1b48:	41565f45 	cmpmi	r6, r5, asr #30
    1b4c:	5f44494c 	svcpl	0x0044494c
		syserror (ERESOURCE, "mal1");
    1b50:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1b54:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1b58:	52465f47 	subpl	r5, r6, #284	; 0x11c
    1b5c:	4f5f5145 	svcmi	0x005f5145
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b60:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
	m_size (mpools [0]) = mlen - m_hdrlen;
    1b64:	43430054 	movtmi	r0, #12372	; 0x3054
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1b68:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1b6c:	5f474643 	svcpl	0x00474643
    1b70:	544f5250 	strbpl	r5, [pc], #-592	; 1b78 <__pi_malloc_init+0x3c>
}
    1b74:	5f33365f 	svcpl	0x0033365f
    1b78:	43003233 	movwmi	r3, #563	; 0x233
    1b7c:	5f474643 	svcpl	0x00474643
    1b80:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1b84:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
    1b88:	4300305f 	movwmi	r3, #95	; 0x5f
void __pi_free (aword *ch) {
    1b8c:	5f474643 	svcpl	0x00474643
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1b90:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    1b94:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
		syserror (EMALLOC, "malg");
    1b98:	4300315f 	movwmi	r3, #351	; 0x15f
    1b9c:	5f474643 	svcpl	0x00474643
	mcfree [MA_NP] += m_size (ch);
    1ba0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		m_size (ch) ^= MALLOC_UMASK;
    1ba4:	4f52505f 	svcmi	0x0052505f
    1ba8:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
	mcfree [MA_NP] += m_size (ch);
    1bac:	0034365f 	eorseq	r3, r4, pc, asr r6
	QFREE;
    1bb0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	if (mevent [MA_NP] . nwait) {
    1bb4:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    1bb8:	5f464c5f 	svcpl	0x00464c5f
		trigger ((aword)(&(mevent [MA_NP])));
    1bbc:	004b4c43 	subeq	r4, fp, r3, asr #24
		mevent [MA_NP] . nwait --;
    1bc0:	47464343 	strbmi	r4, [r6, -r3, asr #6]
}
    1bc4:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1bc8:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1bcc:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
    1bd0:	534e4f49 	movtpl	r4, #61257	; 0xef49
void kill (aword pid) {
    1bd4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
		pid = (aword) __pi_curr;
    1bd8:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
	j = NULL;
    1bdc:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
	for_all_tasks (i) {
    1be0:	682f006f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
	syserror (EREQPAR, "kpi");
    1be4:	2f656d6f 	svccs	0x00656d6f
    1be8:	70657473 	rsbvc	r7, r5, r3, ror r4
		if ((aword)i == pid) {
    1bec:	2f6e6568 	svccs	0x006e6568
    1bf0:	6b736544 	blvs	1cdb108 <__ccfg+0x1cbb160>
				__PCB = i->Next;
    1bf4:	2f706f74 	svccs	0x00706f74
			killev (i);
    1bf8:	4f534c4f 	svcmi	0x00534c4f
			ufree (i);
    1bfc:	2f54454e 	svccs	0x0054454e
			if (i == __pi_curr)
    1c00:	4f434950 	svcmi	0x00434950
    1c04:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				release;
    1c08:	2f534f63 	svccs	0x00534f63
				j->Next = i->Next;
    1c0c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1c10:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1c14:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
}
    1c18:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1c1c:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    1c20:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
	if (size < 8)
    1c24:	6a00632e 	bvs	1a8e4 <__exidx_end+0x14ca4>
		_size = 2;
    1c28:	006b6e75 	rsbeq	r6, fp, r5, ror lr
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1c2c:	5f6e6970 	svcpl	0x006e6970
		_size = (((aword)size) + 3) >> 2;
    1c30:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c34:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
		_size = (((aword)size) + 3) >> 2;
    1c38:	00646165 	rsbeq	r6, r4, r5, ror #2
		if (mevent [MA_NP] . nfail != 255)
    1c3c:	5f6e6970 	svcpl	0x006e6970
    1c40:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
			mevent [MA_NP] . nfail ++;
    1c44:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		mnfree [MA_NP] = 0;
    1c48:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1c4c:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1c50:	63616200 	cmnvs	r1, #0, 4
    1c54:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			syserror (EMALLOC, "malc");
    1c58:	62654400 	rsbvs	r4, r5, #0, 8
    1c5c:	636e756f 	cmnvs	lr, #465567744	; 0x1bc00000
		if (m_size (chunk) >= _size)
    1c60:	62700065 	rsbsvs	r0, r0, #101	; 0x65
    1c64:	6f747475 	svcvs	0x00747475
		chunk = m_nextp (chunk)) {
    1c68:	5f5f006e 	svcpl	0x005f006e
		m_setnextp (cc, m_nextp (chunk));
    1c6c:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1c70:	6f747475 	svcvs	0x00747475
    1c74:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
			m_size (chunk) = _size;
    1c78:	6f747475 	svcvs	0x00747475
			cc = chunk + _size + m_hdrlen;
    1c7c:	615f736e 	cmpvs	pc, lr, ror #6
    1c80:	6f697463 	svcvs	0x00697463
			m_size (cc) = waste - m_hdrlen;
    1c84:	682f006e 	stmdavs	pc!, {r1, r2, r3, r5, r6}	; <UNPREDICTABLE>
			QFREE;
    1c88:	2f656d6f 	svccs	0x00656d6f
		mevent [MA_NP] . nfail = 0;
    1c8c:	70657473 	rsbvc	r7, r5, r3, ror r4
		mcfree [MA_NP] -= m_size (chunk);
    1c90:	2f6e6568 	svccs	0x006e6568
    1c94:	6b736544 	blvs	1cdb1ac <__ccfg+0x1cbb204>
    1c98:	2f706f74 	svccs	0x00706f74
    1c9c:	4f534c4f 	svcmi	0x00534c4f
		m_size (chunk) |= MALLOC_UMASK;
    1ca0:	2f54454e 	svccs	0x0054454e
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1ca4:	4f434950 	svcmi	0x00434950
		m_size (chunk) |= MALLOC_UMASK;
    1ca8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			mnfree [MA_NP] = mcfree [MA_NP];
    1cac:	2f534f63 	svccs	0x00534f63
}
    1cb0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1cb4:	4f492f73 	svcmi	0x00492f73
    1cb8:	7475622f 	ldrbtvc	r6, [r5], #-559	; 0xfffffdd1
    1cbc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    1cc0:	4500632e 	strmi	r6, [r0, #-814]	; 0xfffffcd2
    1cc4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    1cc8:	5f656500 	svcpl	0x00656500
aword __pi_fork (fsmcode func, aword data) {
    1ccc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1cd0:	6172655f 	cmnvs	r2, pc, asr r5
    1cd4:	75006573 	strvc	r6, [r0, #-1395]	; 0xfffffa8d
    1cd8:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
		if ((j = __PCB) == NULL)
    1cdc:	5f646d63 	svcpl	0x00646d63
	i->Next = NULL;
    1ce0:	65650030 	strbvs	r0, [r5, #-48]!	; 0xffffffd0
	i->data = data;
    1ce4:	6f6c635f 	svcvs	0x006c635f
		if ((j = __PCB) == NULL)
    1ce8:	65006573 	strvs	r6, [r0, #-1395]	; 0xfffffa8d
}
    1cec:	72655f65 	rsbvc	r5, r5, #404	; 0x194
			for (; j->Next != NULL; j = j->Next);
    1cf0:	00657361 	rsbeq	r7, r5, r1, ror #6
    1cf4:	775f6565 	ldrbvc	r6, [pc, -r5, ror #10]
	return (aword) i;
    1cf8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1cfc:	706f6400 	rsbvc	r6, pc, r0, lsl #8
	if (mevent [MA_NP] . nwait != 255)
    1d00:	65006e65 	strvs	r6, [r0, #-3685]	; 0xfffff19b
    1d04:	706f5f65 	rsbvc	r5, pc, r5, ror #30
    1d08:	57006e65 	strpl	r6, [r0, -r5, ror #28]
		mevent [MA_NP] . nwait ++;
    1d0c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
	wait ((aword)(&(mevent [MA_NP])), state);
    1d10:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
    1d14:	6500335f 	strvs	r3, [r0, #-863]	; 0xfffffca1
void diag (const char *mess, ...) {
    1d18:	61705f65 	cmnvs	r0, r5, ror #30
    1d1c:	0063696e 	rsbeq	r6, r3, lr, ror #18
    1d20:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
	diag_disable_int (a, is);
    1d24:	00636e79 	rsbeq	r6, r3, r9, ror lr
    1d28:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 1b98 <__pi_free+0xc>
    1d2c:	5f656500 	svcpl	0x00656500
				d = (bc == 16) ? 10000 : 1000000000;
    1d30:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
	diag_disable_int (a, is);
    1d34:	73647200 	cmnvc	r4, #0, 4
	while (*mess != '\0') {
    1d38:	63630072 	cmnvs	r3, #114	; 0x72
	dgout ('\r');
    1d3c:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	dgout ('\n');
    1d40:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
    1d44:	2f007461 	svccs	0x00007461
    1d48:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	diag_wait (a);
    1d4c:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
	diag_enable_int (a, is);
    1d50:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    1d54:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
}
    1d58:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1d5c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1d60:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
		if (*mess == '%') {
    1d64:	4349502f 	movtmi	r5, #36911	; 0x902f
    1d68:	502f534f 	eorpl	r5, pc, pc, asr #6
			if (*mess == 'l') {
    1d6c:	534f6369 	movtpl	r6, #62313	; 0xf369
    1d70:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
				mess++;
    1d74:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
				val = va_arg (ap, lword);
    1d78:	61726f74 	cmnvs	r2, r4, ror pc
				bc = 32;
    1d7c:	732f6567 			; <UNDEFINED> instruction: 0x732f6567
				bc = 16;
    1d80:	61726f74 	cmnvs	r2, r4, ror pc
			switch (*mess) {
    1d84:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 1bf0 <kill+0x1c>
    1d88:	72353278 	eorsvc	r3, r5, #120, 4	; 0x80000007
    1d8c:	35333038 	ldrcc	r3, [r3, #-56]!	; 0xffffffc8
				dgout ('%');
    1d90:	6300632e 	movwvs	r6, #814	; 0x32e
    1d94:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
				dgout (*mess);
    1d98:	74706300 	ldrbtvc	r6, [r0], #-768	; 0xfffffd00
    1d9c:	65650072 	strbvs	r0, [r5, #-114]!	; 0xffffff8e
			switch (*mess) {
    1da0:	7a69735f 	bvc	1a5eb24 <__ccfg+0x1a3eb7c>
					v = __pi_hex_enc_table [
    1da4:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
					i += 4;
    1da8:	00796461 	rsbseq	r6, r9, r1, ror #8
					(val >> (bc - i)) & 0xf];
    1dac:	6e6f4445 	cdpvs	4, 6, cr4, cr15, cr5, {2}
    1db0:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
					dgout (v);
    1db4:	006e776f 	rsbeq	r7, lr, pc, ror #14
    1db8:	69617777 	stmdbvs	r1!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
				while (i < bc) {
    1dbc:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
			mess++;
    1dc0:	79625f74 	stmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
					d /= 10;
    1dc4:	70006574 	andvc	r6, r0, r4, ror r5
				if ((val >> (bc - 1)) & 1) {
    1dc8:	625f7475 	subsvs	r7, pc, #1962934272	; 0x75000000
    1dcc:	00657479 	rsbeq	r7, r5, r9, ror r4
					dgout ('-');
    1dd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1d1c <diag+0x4>
    1dd4:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
						val |= 0xffff0000;
    1dd8:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    1ddc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1de0:	6f746b73 	svcvs	0x00746b73
				d = (bc == 16) ? 10000 : 1000000000;
    1de4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1de8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1dec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
					v = (word) (val / d);
    1df0:	2f534f43 	svccs	0x00534f43
					if (v || d == 1) break;
    1df4:	4f636950 	svcmi	0x00636950
    1df8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
					d /= 10;
    1dfc:	2f736269 	svccs	0x00736269
				d = (bc == 16) ? 10000 : 1000000000;
    1e00:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
					dgout (v + '0');
    1e04:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
    1e08:	6f5f7265 	svcvs	0x005f7265
    1e0c:	632e7475 			; <UNDEFINED> instruction: 0x632e7475
					d /= 10;
    1e10:	72657300 	rsbvc	r7, r5, #0, 6
					val = val - (v * d);
    1e14:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
					if (d == 0) break;
    1e18:	6f682f00 	svcvs	0x00682f00
					v = (word) (val / d);
    1e1c:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    1e20:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
				if (bc == 16)
    1e24:	442f6e65 	strtmi	r6, [pc], #-3685	; 1e2c <diag+0x114>
				d = (bc == 16) ? 10000 : 1000000000;
    1e28:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
					val &= 0xffff;
    1e2c:	4f2f706f 	svcmi	0x002f706f
					dgout (*s);
    1e30:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
					s++;
    1e34:	502f5445 	eorpl	r5, pc, r5, asr #8
				while (*s != '\0') {
    1e38:	534f4349 	movtpl	r4, #62281	; 0xf349
    1e3c:	6369502f 	cmnvs	r9, #47	; 0x2f
			dgout (*mess++);
    1e40:	502f534f 	eorpl	r5, pc, pc, asr #6
    1e44:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1e48:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    1e4c:	2f6c6169 	svccs	0x006c6169
    1e50:	5f726573 	svcpl	0x00726573
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1e54:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    1e58:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    1e5c:	696c706e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    1e60:	7300656e 	movwvc	r6, #1390	; 0x56e
	^ entropy
    1e64:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
}
    1e68:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
    1e6c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; f02 <__pi_uart_setrate+0x6>
    1e70:	2f006674 	svccs	0x00006674
    1e74:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1e78:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
	word cs = size + hblenb;
    1e7c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1e80:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1e84:	706f746b 	rsbvc	r7, pc, fp, ror #8
	p -> length = size;
    1e88:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
}
    1e8c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (p->attributes.b.queued) {
    1e90:	4349502f 	movtmi	r5, #36911	; 0x902f
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1e94:	502f534f 	eorpl	r5, pc, pc, asr #6
    1e98:	534f6369 	movtpl	r6, #62313	; 0xf369
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1e9c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		p->attributes.b.queued = 0;
    1ea0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1ea4:	61697265 	cmnvs	r9, r5, ror #4
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1ea8:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
	deq (p);	// Remove from queue
    1eac:	756f5f72 	strbvc	r5, [pc, #-3954]!	; f42 <__pi_uart_setrate+0x46>
}
    1eb0:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
	tfree ((address)p);
    1eb4:	6f682f00 	svcvs	0x00682f00
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1eb8:	732f656d 			; <UNDEFINED> instruction: 0x732f656d
    1ebc:	68706574 	ldmdavs	r0!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1ec0:	442f6e65 	strtmi	r6, [pc], #-3685	; 1ec8 <enq+0x10>
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1ec4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1ec8:	4f2f706f 	svcmi	0x002f706f
	if (q_empty (q))
    1ecc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1ed0:	502f5445 	eorpl	r5, pc, r5, asr #8
		trigger (q);
    1ed4:	534f4349 	movtpl	r4, #62281	; 0xf349
	if (p->attributes.b.urgent) {
    1ed8:	6369502f 	cmnvs	r9, #47	; 0x2f
		p->u.bqueue.next = q->next;
    1edc:	502f534f 	eorpl	r5, pc, pc, asr #6
		p->u.bqueue.prev = q;
    1ee0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
		q->next->prev = (qitem_t*) p;
    1ee4:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
	p->attributes.b.queued = 1;
    1ee8:	2f6c6169 	svccs	0x006c6169
    1eec:	5f726573 	svcpl	0x00726573
}
    1ef0:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
		p->u.bqueue.prev = q->prev;
    1ef4:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
		q->prev->next = (qitem_t*) p;
    1ef8:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
		q->prev = (qitem_t*) p;
    1efc:	73690066 	cmnvc	r9, #102	; 0x66
    1f00:	5f657573 	svcpl	0x00657573
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    1f04:	00646d63 	rsbeq	r6, r4, r3, ror #26
	deq (p);	// Soft dequeue, timer and hook left intact
    1f08:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
	switch (dv) {
    1f0c:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    1f10:	63006e6f 	movwvs	r6, #3695	; 0xe6f
    1f14:	616d6d6f 	cmnvs	sp, pc, ror #26
    1f18:	6f4e646e 	svcvs	0x004e646e
			p->attributes.b.urgent = 1;
    1f1c:	70416200 	subvc	r6, r1, r0, lsl #4
    1f20:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
			verify_ses (p, "dispose ses");
    1f24:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1f28:	72007375 	andvc	r7, r0, #-738197503	; 0xd4000001
    1f2c:	6e6f5f66 	cdpvs	15, 6, cr5, cr15, cr6, {3}
    1f30:	54667200 	strbtpl	r7, [r6], #-512	; 0xfffffe00
    1f34:	006d6972 	rsbeq	r6, sp, r2, ror r9
			verify_phy (p, "dispose phy");
    1f38:	72615662 	rsbvc	r5, r1, #102760448	; 0x6200000
    1f3c:	006e654c 	rsbeq	r6, lr, ip, asr #10
}
    1f40:	746b5070 	strbtvc	r5, [fp], #-112	; 0xffffff90
			enq (oqueues [p->attributes.b.phys], p);
    1f44:	6e656300 	cdpvs	3, 6, cr6, cr5, cr0, {0}
			p->attributes.b.urgent = 1;
    1f48:	46726574 			; <UNDEFINED> instruction: 0x46726574
    1f4c:	00716572 	rsbseq	r6, r1, r2, ror r5
			verify_phy (p, "dispose phy");
    1f50:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1f54:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    1f58:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
    1f5c:	506b7366 	rsbpl	r7, fp, r6, ror #6
    1f60:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    1f64:	69687700 	stmdbvs	r8!, {r8, r9, sl, ip, sp, lr}^
			enq (oqueues [p->attributes.b.phys], p);
    1f68:	4d6e6574 	cfstr64mi	mvdx6, [lr, #-464]!	; 0xfffffe30
    1f6c:	0065646f 	rsbeq	r6, r5, pc, ror #8
}
    1f70:	5f636672 	svcpl	0x00636672
			rlp (p);
    1f74:	5f444d43 	svcpl	0x00444d43
}
    1f78:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1f7c:	5f53435f 	svcpl	0x0053435f
    1f80:	61700073 	cmnvs	r0, r3, ror r0
    1f84:	72547473 	subsvc	r7, r4, #1929379840	; 0x73000000
    1f88:	72006769 	andvc	r6, r0, #27525120	; 0x1a40000
    1f8c:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1f90:	00745f6d 	rsbseq	r5, r4, sp, ror #30
	if (b->attributes.b.outgoing) {
    1f94:	66756272 			; <UNDEFINED> instruction: 0x66756272
	b = header (p);
    1f98:	44006c66 	strmi	r6, [r0], #-3174	; 0xfffff39a
	if (b->attributes.b.outgoing) {
    1f9c:	4f4c5f52 	svcmi	0x004c5f52
		verify_ses (b, "tcv02");
    1fa0:	5f5f504f 	svcpl	0x005f504f
    1fa4:	754f7000 	strbvc	r7, [pc, #-0]	; 1fac <tcv_endp+0x1c>
    1fa8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1fac:	65526200 	ldrbvs	r6, [r2, #-512]	; 0xfffffe00
    1fb0:	74616570 	strbtvc	r6, [r1], #-1392	; 0xfffffa90
		verify_plg (b, tcv_out, "tcv03");
    1fb4:	6e006b4f 	vmlsvs.f64	d6, d0, d15
    1fb8:	67497852 	smlsldvs	r7, r9, r2, r8
    1fbc:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
    1fc0:	65660064 	strbvs	r0, [r6, #-100]!	; 0xffffff9c
    1fc4:	646f4d63 	strbtvs	r4, [pc], #-3427	; 1fcc <tcv_endp+0x3c>
    1fc8:	526e0065 	rsbpl	r0, lr, #101	; 0x65
    1fcc:	6b6f4e78 	blvs	1bd59b4 <__ccfg+0x1bb5a0c>
    1fd0:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
    1fd4:	616c6564 	cmnvs	ip, r4, ror #10
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fd8:	72700079 	rsbsvc	r0, r0, #121	; 0x79
}
    1fdc:	4d6d6165 	stfmie	f6, [sp, #-404]!	; 0xfffffe6c
		dispose (b, plugins [b->attributes.b.plugin] ->
    1fe0:	0065646f 	rsbeq	r6, r5, pc, ror #8
		rlp (b);
    1fe4:	72754370 	rsbsvc	r4, r5, #112, 6	; 0xc0000001
}
    1fe8:	746e4572 	strbtvc	r4, [lr], #-1394	; 0xfffffa8e
		rlp (b);
    1fec:	74007972 	strvc	r7, [r0], #-2418	; 0xfffff68e
    1ff0:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    1ff4:	706d6174 	rsbvc	r6, sp, r4, ror r1
    1ff8:	71726900 	cmnvc	r2, r0, lsl #18
    1ffc:	76746e49 	ldrbtvc	r6, [r4], -r9, asr #28
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    2000:	69617700 	stmdbvs	r1!, {r8, r9, sl, ip, sp, lr}^
    2004:	6d635f74 	stclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    2008:	6f660064 	svcvs	0x00660064
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    200c:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
	va_start (ap, plid);
    2010:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    2014:	61747300 	cmnvs	r4, r0, lsl #6
    2018:	69547472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, ip, sp, lr}^
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    201c:	6200656d 	andvs	r6, r0, #457179136	; 0x1b400000
    2020:	65707041 	ldrbvs	r7, [r0, #-65]!	; 0xffffffbf
    2024:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2028:	7473656d 	ldrbtvc	r6, [r3], #-1389	; 0xfffffa93
			syserror (ENODEVICE, "tcv04");
    202c:	00706d61 	rsbseq	r6, r0, r1, ror #26
		syserror (EMALLOC, "tcv05");
    2030:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
	attp.b.outgoing = 1;
    2034:	746e4574 	strbtvc	r4, [lr], #-1396	; 0xfffffa8c
    2038:	52007972 	andpl	r7, r0, #1867776	; 0x1c8000
    203c:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    2040:	6f725064 	svcvs	0x00725064
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2044:	64615270 	strbtvs	r5, [r1], #-624	; 0xfffffd90
		if (descriptors [fd] == NULL)
    2048:	69446f69 	stmdbvs	r4, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    204c:	74655376 	strbtvc	r5, [r5], #-886	; 0xfffffc8a
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    2050:	71007075 	tstvc	r0, r5, ror r0
		return ERROR;
    2054:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
}
    2058:	6b700074 	blvs	1c02230 <__ccfg+0x1be2288>
    205c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2060:	68700066 	ldmdavs	r0!, {r1, r2, r5, r6}^
	s->attpattern.b.session = fd;
    2064:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    2068:	35333163 	ldrcc	r3, [r3, #-355]!	; 0xfffffe9d
	descriptors [fd] = s;
    206c:	63630030 	cmnvs	r3, #48	; 0x30
	q_init (&(s->rqueue));
    2070:	30353331 	eorscc	r3, r5, r1, lsr r3
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    2074:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
    2078:	00726576 	rsbseq	r6, r2, r6, ror r5
    207c:	5f636672 	svcpl	0x00636672
    2080:	5f444d43 	svcpl	0x00444d43
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    2084:	735f5346 	cmpvc	pc, #402653185	; 0x18000001
    2088:	63667200 	cmnvs	r6, #0, 4
    208c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	descriptors [fd] = s;
    2090:	5f53465f 	svcpl	0x0053465f
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    2094:	78740074 	ldmdavc	r4!, {r2, r4, r5, r6}^
    2098:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
	if (s == NULL)
    209c:	78720072 	ldmdavc	r2!, {r1, r4, r5, r6}^
		syserror (EMALLOC, "tcv05");
    20a0:	61007742 	tstvs	r0, r2, asr #14
    20a4:	796c7070 	stmdbvc	ip!, {r4, r5, r6, ip, sp, lr}^
    20a8:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
    20ac:	61506b73 	cmpvs	r0, r3, ror fp
    20b0:	00686374 	rsbeq	r6, r8, r4, ror r3
    20b4:	6e616863 	cdpvs	8, 6, cr6, cr1, cr3, {3}
    20b8:	006c656e 	rsbeq	r6, ip, lr, ror #10
    20bc:	746e7973 	strbtvc	r7, [lr], #-2419	; 0xfffff68d
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    20c0:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
	    (plugins [ord] != NULL && plugins [ord] != pl))
    20c4:	45620066 	strbmi	r0, [r2, #-102]!	; 0xffffff9a
    20c8:	7352616e 	cmpvc	r2, #-2147483621	; 0x8000001b
    20cc:	62006973 	andvs	r6, r0, #1884160	; 0x1cc000
	plugins [ord] = pl;
    20d0:	6f747541 	svcvs	0x00747541
	return 0;
    20d4:	73756c46 	cmnvc	r5, #17920	; 0x4600
		return ERROR;
    20d8:	63724368 	cmnvs	r2, #104, 6	; 0xa0000001
}
    20dc:	00727245 	rsbseq	r7, r2, r5, asr #4
    20e0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
	verify_fds (fd, "tcv10");
    20e4:	66526769 	ldrbvs	r6, [r2], -r9, ror #14
__PUBLF (PicOSNode, address, tcv_rnp) (word state, int fd) {
    20e8:	6e6f7246 	cdpvs	2, 6, cr7, cr15, cr6, {2}
	verify_fds (fd, "tcv10");
    20ec:	646e6574 	strbtvs	r6, [lr], #-1396	; 0xfffffa8c
    20f0:	78546200 	ldmdavc	r4, {r9, sp, lr}^
    20f4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
	verify_plg (b, tcv_frm, "tcv11");
    20f8:	616e6100 	cmnvs	lr, r0, lsl #2
	b = q_first (rq);
    20fc:	43676f6c 	cmnmi	r7, #108, 30	; 0x1b0
	if (q_end (b, rq)) {
    2100:	6f4d6766 	svcvs	0x004d6766
		if (state != WNONE) {
    2104:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
    2108:	43616e45 	cmnmi	r1, #1104	; 0x450
			when (rq, state);
    210c:	6e00646d 	cdpvs	4, 0, cr6, cr0, cr13, {3}
			release;
    2110:	6f436d75 	svcvs	0x00436d75
	deq (b);	// Dequeue the packet ...
    2114:	6e497272 	mcrvs	2, 2, r7, cr9, cr2, {3}
    2118:	49700076 	ldmdbmi	r0!, {r1, r2, r4, r5, r6}^
	p = ((address)(b + 1));
    211c:	61507172 	cmpvs	r0, r2, ror r1
	verify_plg (b, tcv_frm, "tcv11");
    2120:	00686374 	rsbeq	r6, r8, r4, ror r3
    2124:	74615070 	strbtvc	r5, [r1], #-112	; 0xffffff90
    2128:	65566863 	ldrbvs	r6, [r6, #-2147]	; 0xfffff79d
    212c:	46520063 	ldrbmi	r0, [r2], -r3, rrx
    2130:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    2134:	44746e49 	ldrbtmi	r6, [r4], #-3657	; 0xfffff1b7
	plugins [b->attributes.b.plugin]->tcv_frm (p, &(b->u.pointers));
    2138:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    213c:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
		b->length - b->u.pointers.head - b->u.pointers.tail;
    2140:	6b507861 	blvs	14202cc <__ccfg+0x1400324>
    2144:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
	b->u.pointers.tail =
    2148:	726f6300 	rsbvc	r6, pc, #0, 6
}
    214c:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
		return NULL;
    2150:	00676966 	rsbeq	r6, r7, r6, ror #18
    2154:	30746172 	rsbscc	r6, r4, r2, ror r1
    2158:	61696200 	cmnvs	r9, r0, lsl #4
    215c:	646f4d73 	strbtvs	r4, [pc], #-3443	; 2164 <tcv_wnps>
    2160:	46520065 	ldrbmi	r0, [r2], -r5, rrx
	verify_fds (fd, "tcv16");
    2164:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
								Boolean urg) {
    2168:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
    216c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	verify_fds (fd, "tcv16");
    2170:	6200656c 	andvs	r6, r0, #108, 10	; 0x1b000000
    2174:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    2178:	43656475 	cmnmi	r5, #1962934272	; 0x75000000
	verify_pld (s, tcv_frm, "tcv17");
    217c:	63006372 	movwvs	r6, #882	; 0x372
    2180:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2184:	41664967 	cmnmi	r6, r7, ror #18
    2188:	72006364 	andvc	r6, r0, #100, 6	; 0x90000001
    218c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2190:	505f444d 	subspl	r4, pc, sp, asr #8
    2194:	5f504f52 	svcpl	0x00504f52
    2198:	735f5852 	cmpvc	pc, #5373952	; 0x520000
	ptrs.head = (word) fd;
    219c:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
	ptrs.tail = (word) urg;
    21a0:	67697254 			; <UNDEFINED> instruction: 0x67697254
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    21a4:	00726567 	rsbseq	r6, r2, r7, ror #10
    21a8:	5f636672 	svcpl	0x00636672
		if (state != WNONE) {
    21ac:	5f444d43 	svcpl	0x00444d43
    21b0:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
}
    21b4:	5f53435f 	svcpl	0x0053435f
			when (eid, state);
    21b8:	72660074 	rsbvc	r0, r6, #116	; 0x74
    21bc:	45746e6f 	ldrbmi	r6, [r4, #-3695]!	; 0xfffff191
			release;
    21c0:	6f4d646e 	svcvs	0x004d646e
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    21c4:	74006564 	strvc	r6, [r0], #-1380	; 0xfffffa9c
    21c8:	67676972 			; <UNDEFINED> instruction: 0x67676972
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    21cc:	6f4e7265 	svcvs	0x004e7265
    21d0:	75517000 	ldrbvc	r7, [r1, #-0]
    21d4:	00657565 	rsbeq	r7, r5, r5, ror #10
    21d8:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
    21dc:	00657079 	rsbeq	r7, r5, r9, ror r0
    21e0:	5f646d63 	svcpl	0x00646d63
		if (state != WNONE) {
    21e4:	72007363 	andvc	r7, r0, #-1946157055	; 0x8c000001
    21e8:	54697373 	strbtpl	r7, [r9], #-883	; 0xfffffc8d
			tmwait (state);
    21ec:	6e007268 	cdpvs	2, 0, cr7, cr0, cr8, {3}
    21f0:	6f436d75 	svcvs	0x00436d75
	b->attributes = s->attpattern;
    21f4:	75427272 	strbvc	r7, [r2, #-626]	; 0xfffffd8e
		b->attributes.b.urgent = 1;
    21f8:	52007973 	andpl	r7, r0, #1884160	; 0x1cc000
    21fc:	006c6156 	rsbeq	r6, ip, r6, asr r1
	b->u.pointers.head = ptrs.head;
    2200:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
	b->u.pointers.tail = length;
    2204:	6f697469 	svcvs	0x00697469
	return (address) (b + 1);
    2208:	4962006e 	stmdbmi	r2!, {r1, r2, r3, r5, r6}^
    220c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    2210:	64486564 	strbvs	r6, [r8], #-1380	; 0xfffffa9c
    2214:	616c0072 	smcvs	49154	; 0xc002
    2218:	73527473 	cmpvc	r2, #1929379840	; 0x73000000
    221c:	6d006973 	vstrvs.16	s12, [r0, #-230]	; 0xffffff1a	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    2220:	7954646f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    2224:	70006570 	andvc	r6, r0, r0, ror r5
    2228:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
	verify_fph (phy, "tcv23");
    222c:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    2230:	526e0079 	rsbpl	r0, lr, #121	; 0x79
    2234:	66754278 			; <UNDEFINED> instruction: 0x66754278
    2238:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
}
    223c:	5f787200 	svcpl	0x00787200
	return (physical [phy]) (opt, arg);
    2240:	75006361 	strvc	r6, [r0, #-865]	; 0xfffffc9f
    2244:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    2248:	006b7361 	rsbeq	r7, fp, r1, ror #6
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    224c:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
	if (opt < 0) {
    2250:	69725464 	ldmdbvs	r2!, {r2, r5, r6, sl, ip, lr}^
		if (fd < 0)
    2254:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
		if (opt == PHYSOPT_PLUGINFO) {
    2258:	69426200 	stmdbvs	r2, {r9, sp, lr}^
			if (fd >= TCV_MAX_PLUGS)
    225c:	76655274 			; <UNDEFINED> instruction: 0x76655274
			if ((p = plugins [fd]) == NULL)
    2260:	61737265 	cmnvs	r3, r5, ror #4
    2264:	5f5f006c 	svcpl	0x005f006c
}
    2268:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
		if (fd >= TCV_MAX_PHYS)
    226c:	73003079 	movwvc	r3, #121	; 0x79
		return physinfo [fd];
    2270:	6f626d79 	svcvs	0x00626d79
    2274:	7461526c 	strbtvc	r5, [r1], #-620	; 0xfffffd94
	verify_fds (fd, "tcv22");
    2278:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    227c:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
    2280:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    2284:	4e700073 	mrcmi	0, 3, r0, cr0, cr3, {3}
    2288:	4f747865 	svcmi	0x00747865
}
    228c:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    2290:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    2294:	41620071 	smcmi	8193	; 0x2001
			return 0;
    2298:	466f7475 			; <UNDEFINED> instruction: 0x466f7475
    229c:	6873756c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    22a0:	6f6e6749 	svcvs	0x006e6749
    22a4:	00646572 	rsbeq	r6, r4, r2, ror r5
    22a8:	5f636672 	svcpl	0x00636672
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    22ac:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    22b0:	5f704f6f 	svcpl	0x00704f6f
	if (dsp != TCV_DSP_PASS) {
    22b4:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
		if (ses == NONE)
    22b8:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
			syserror (EREQPAR, "tcv26");
    22bc:	67676972 			; <UNDEFINED> instruction: 0x67676972
		verify_fds (ses, "tcv27");
    22c0:	70007265 	andvc	r7, r0, r5, ror #4
    22c4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    22c8:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    22cc:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
    22d0:	006b7366 	rsbeq	r7, fp, r6, ror #6
		if ((p = apb (size)) != NULL) {
    22d4:	6f5f6672 	svcvs	0x005f6672
    22d8:	2f006666 	svccs	0x00006666
		return NULL;
    22dc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			p->attributes = descriptors [ses] -> attpattern;
    22e0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
			dispose (p, dsp);
    22e4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
			p->attributes = descriptors [ses] -> attpattern;
    22e8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
			p->attributes.b.outgoing = 0;
    22ec:	706f746b 	rsbvc	r7, pc, fp, ror #8
			dispose (p, dsp);
    22f0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			return (address)(p + 1);
    22f4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    22f8:	4349502f 	movtmi	r5, #36911	; 0x902f
	if ((p = apb (size)) != NULL)
    22fc:	502f534f 	eorpl	r5, pc, pc, asr #6
    2300:	534f6369 	movtpl	r6, #62313	; 0xf369
		return (address)(p + 1);
    2304:	3143432f 	cmpcc	r3, pc, lsr #6
    2308:	2f585833 	svccs	0x00585833
    230c:	72706672 	rsbsvc	r6, r0, #119537664	; 0x7200000
    2310:	632e706f 			; <UNDEFINED> instruction: 0x632e706f
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    2314:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    2318:	726f4361 	rsbvc	r4, pc, #-2080374783	; 0x84000001
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    231c:	46620072 			; <UNDEFINED> instruction: 0x46620072
    2320:	66664f73 	uqsub16vs	r4, r6, r3
		syserror (EREQPAR, "tcv28");
    2324:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
		syserror (EMALLOC, "tcv29");
    2328:	5f465200 	svcpl	0x00465200
	physical [phy] = ps;
    232c:	46646d63 	strbtmi	r6, [r4], -r3, ror #26
	physinfo [phy] = info;
    2330:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    2334:	436d6165 	cmnmi	sp, #1073741849	; 0x40000019
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    2338:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    233c:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    2340:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
		syserror (EMALLOC, "tcv29");
    2344:	74706f00 	ldrbtvc	r6, [r0], #-3840	; 0xfffff100
    2348:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	q_init (q);
    234c:	63746170 	cmnvs	r4, #112, 2
}
    2350:	6e654768 	cdpvs	7, 6, cr4, cr5, cr8, {3}
    2354:	526b7366 	rsbpl	r7, fp, #-1744830463	; 0x98000001
    2358:	63006566 	movwvs	r6, #1382	; 0x566
    235c:	646e4573 	strbtvs	r4, [lr], #-1395	; 0xfffffa8d
    2360:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    2364:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
	verify_fph (phy, "tcv30");
    2368:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    236c:	6300745f 	movwvs	r7, #1119	; 0x45f
    2370:	5072726f 	rsbspl	r7, r2, pc, ror #4
	verify_fph (phy, "tcv30");
    2374:	6f697265 	svcvs	0x00697265
    2378:	6c700064 	ldclvs	0, cr0, [r0], #-400	; 0xfffffe70
    237c:	74726775 	ldrbtvc	r6, [r2], #-1909	; 0xfffff88b
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    2380:	43465200 	movtmi	r5, #25088	; 0x6200
    2384:	49657043 	stmdbmi	r5!, {r0, r1, r6, ip, sp, lr}^
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    2388:	6c43746e 	cfstrdvs	mvd7, [r3], {110}	; 0x6e
    238c:	00726165 	rsbseq	r6, r2, r5, ror #2
		if (plugins [plg] == NULL)
    2390:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    2394:	72006863 	andvc	r6, r0, #6488064	; 0x630000
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    2398:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
}
    239c:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    23a0:	6f656d69 	svcvs	0x00656d69
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    23a4:	65527475 	ldrbvs	r7, [r2, #-1141]	; 0xfffffb8b
    23a8:	72660073 	rsbvc	r0, r6, #115	; 0x73
    23ac:	46746361 	ldrbtmi	r6, [r4], -r1, ror #6
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    23b0:	00716572 	rsbseq	r6, r1, r2, ror r5
    23b4:	53657270 	cmnpl	r5, #112, 4
    23b8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    23bc:	77536e00 	ldrbvc	r6, [r3, -r0, lsl #28]
    23c0:	73746942 	cmnvc	r4, #1081344	; 0x108000
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    23c4:	73756200 	cmnvc	r5, #0, 4
	len -= (ap.head + ap.tail);
    23c8:	00704f79 	rsbseq	r4, r0, r9, ror pc
    23cc:	69446f6c 	stmdbvs	r4, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    23d0:	65646976 	strbvs	r6, [r4, #-2422]!	; 0xfffff68a
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    23d4:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    23d8:	64697461 	strbtvs	r7, [r9], #-1121	; 0xfffffb9f
    23dc:	5f667200 	svcpl	0x00667200
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    23e0:	63746170 	cmnvs	r4, #112, 2
    23e4:	70635f68 	rsbvc	r5, r3, r8, ror #30
    23e8:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
	return 1;
    23ec:	6b73666e 	blvs	1cdbdac <__ccfg+0x1cbbe04>
    23f0:	43787200 	cmnmi	r8, #0, 4
    23f4:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    23f8:	466f4e62 	strbtmi	r4, [pc], -r2, ror #28
    23fc:	776f5073 			; <UNDEFINED> instruction: 0x776f5073
	verify_fph (phy, "tcv32");
    2400:	70557265 	subsvc	r7, r5, r5, ror #4
    2404:	45524f00 	ldrbmi	r4, [r2, #-3840]	; 0xfffff100
    2408:	00746e76 	rsbseq	r6, r4, r6, ror lr
    240c:	4f734662 	svcmi	0x00734662
    2410:	75426666 	strbvc	r6, [r2, #-1638]	; 0xfffff99a
    2414:	76007973 			; <UNDEFINED> instruction: 0x76007973
	oq = oqueues [phy];
    2418:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	b = q_first (oq);
    241c:	74787400 	ldrbtvc	r7, [r8], #-1024	; 0xfffffc00
	if (q_end (b, oq)) {
    2420:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
	*len = b->length;
    2424:	734d6200 	movtvc	r6, #53760	; 0xd200
	deq (b);	// Dequeue the packet ...
    2428:	72694662 	rsbvc	r4, r9, #102760448	; 0x6200000
}
    242c:	72007473 	andvc	r7, r0, #1929379840	; 0x73000000
		return NULL;
    2430:	65645f78 	strbvs	r5, [r4, #-3960]!	; 0xfffff088
    2434:	5f787200 	svcpl	0x00787200
    2438:	5f746e69 	svcpl	0x00746e69
    243c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
	verify_fph (phy, "tcv33");
    2440:	6100656c 	tstvs	r0, ip, ror #10
    2444:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    2448:	00307373 	eorseq	r7, r0, r3, ror r3
    244c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    2450:	31737365 	cmncc	r3, r5, ror #6
    2454:	63667200 	cmnvs	r6, #0, 4
	oq = oqueues [phy];
    2458:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	b = q_first (oq);
    245c:	4f52505f 	svcmi	0x0052505f
		return NULL;
    2460:	41525f50 	cmpmi	r2, r0, asr pc
	return (address)(b + 1);
    2464:	5f4f4944 	svcpl	0x004f4944
}
    2468:	5f564944 	svcpl	0x00564944
    246c:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
    2470:	00735f50 	rsbseq	r5, r3, r0, asr pc
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    2474:	5f636672 	svcpl	0x00636672
	verify_plg (b, tcv_xmt, "tcv34");
    2478:	5f444d43 	svcpl	0x00444d43
	hblock_t *b = header (pkt);
    247c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
	verify_plg (b, tcv_xmt, "tcv34");
    2480:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2484:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 248c <tcvphy_end+0x18>
    2488:	535f5649 	cmppl	pc, #76546048	; 0x4900000
    248c:	50555445 	subspl	r5, r5, r5, asr #8
    2490:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
    2494:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2498:	505f444d 	subspl	r4, pc, sp, asr #8
	dispose (b, plugins [b->attributes.b.plugin] ->
    249c:	5f504f52 	svcpl	0x00504f52
}
    24a0:	745f5852 	ldrbvc	r5, [pc], #-2130	; 24a8 <tcvphy_end+0x34>
	dispose (b, plugins [b->attributes.b.plugin] ->
    24a4:	74617000 	strbtvc	r7, [r1], #-0
    24a8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    24ac:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
}
    24b0:	706f7453 	rsbvc	r7, pc, r3, asr r4	; <UNPREDICTABLE>
    while(1)
    24b4:	00646570 	rsbeq	r6, r4, r0, ror r5
{
    24b8:	526d756e 	rsbpl	r7, sp, #461373440	; 0x1b800000
    SetupTrimDevice();
    24bc:	49697373 	stmdbmi	r9!, {r0, r1, r4, r5, r6, r8, r9, ip, sp, lr}^
    pui32Src = &_etext;
    24c0:	00656c64 	rsbeq	r6, r5, r4, ror #24
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    24c4:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
    __asm("    ldr     r0, =_bss\n"
    24c8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
    24cc:	73787200 	cmnvc	r8, #0, 4
    24d0:	00746174 	rsbseq	r6, r4, r4, ror r1
    24d4:	67655270 			; <UNDEFINED> instruction: 0x67655270
    24d8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
   main();
    24dc:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    FaultISR();
    24e0:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
        *pui32Dest++ = *pui32Src++;
    24e4:	745f726d 	ldrbvc	r7, [pc], #-621	; 24ec <zero_loop+0x1c>
    24e8:	70416200 	subvc	r6, r1, r0, lsl #4
    24ec:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    24f0:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    24f4:	63667200 	cmnvs	r6, #0, 4
    24f8:	6f72705f 	svcvs	0x0072705f
    24fc:	4f785270 	svcmi	0x00785270
    2500:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
static byte get_byte () {
    2504:	00735f74 	rsbseq	r5, r3, r4, ror pc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2508:	5f636672 	svcpl	0x00636672
    250c:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    2510:	754f7852 	strbvc	r7, [pc, #-2130]	; 1cc6 <__pi_malloc+0xa2>
    2514:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
		if (ee_inp)
    2518:	5200745f 	andpl	r7, r0, #1593835520	; 0x5f000000
			b |= 1;
    251c:	6c434346 	mcrrvs	3, 4, r4, r3, cr6
    2520:	446b636f 	strbtmi	r6, [fp], #-879	; 0xfffffc91
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2524:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
	for (b = 0, i = 0; i < 8; i++) {
    2528:	6300656c 	movwvs	r6, #1388	; 0x56c
}
    252c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2530:	6e795367 	cdpvs	3, 7, cr5, cr9, cr7, {3}
    2534:	74006874 	strvc	r6, [r0], #-2164	; 0xfffff78c
static void put_byte (byte b) {
    2538:	756f6378 	strbvc	r6, [pc, #-888]!	; 21c8 <tcv_wnps+0x64>
    253c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2540:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    2544:	72007a53 	andvc	r7, r0, #339968	; 0x53000
		if (b & 0x80)
    2548:	725f6366 	subsvc	r6, pc, #-1744830463	; 0x98000001
    254c:	6f696461 	svcvs	0x00696461
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2550:	735f704f 	cmpvc	pc, #79	; 0x4f
	for (i = 0; i < 8; i++) {
    2554:	65526200 	ldrbvs	r6, [r2, #-512]	; 0xfffffe00
		b <<= 1;
    2558:	74616570 	strbtvc	r6, [r1], #-1392	; 0xfffffa90
	for (i = 0; i < 8; i++) {
    255c:	006b6f4e 	rsbeq	r6, fp, lr, asr #30
}
    2560:	746c6966 	strbtvc	r6, [ip], #-2406	; 0xfffff69a
    2564:	704f7265 	subvc	r7, pc, r5, ror #4
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    2568:	63667200 	cmnvs	r6, #0, 4
    256c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
	put_byte (cmd);
    2570:	746e4561 	strbtvc	r4, [lr], #-1377	; 0xfffffa9f
    2574:	65477972 	strbvs	r7, [r7, #-2418]	; 0xfffff68e
}
    2578:	6172656e 	cmnvs	r2, lr, ror #10
    257c:	00735f6c 	rsbseq	r5, r3, ip, ror #30
static void wwait (word st, word del) {
    2580:	5f636672 	svcpl	0x00636672
    2584:	61746164 	cmnvs	r4, r4, ror #2
    2588:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
	while (dopen && (rdsr () & 1)) {
    258c:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
    2590:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    2594:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
    2598:	61705f66 	cmnvs	r0, r6, ror #30
	put_byte (CMD_RDSR);
    259c:	5f686374 	svcpl	0x00686374
	r = get_byte ();
    25a0:	5f656672 	svcpl	0x00656672
    25a4:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
	while (dopen && (rdsr () & 1)) {
    25a8:	6e006b73 	vmovvs.16	d0[1], r6
}
    25ac:	6b4f7852 	blvs	13e06fc <__ccfg+0x13c0754>
		if (st == WNONE)
    25b0:	65525200 	ldrbvs	r5, [r2, #-512]	; 0xfffffe00
    25b4:	5f5f0074 	svcpl	0x005f0074
			mdelay (1);
    25b8:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    25bc:	5f003179 	svcpl	0x00003179
			delay (del, st);
    25c0:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
    25c4:	0032796d 	eorseq	r7, r2, sp, ror #18
			release;
    25c8:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    25cc:	33796d6d 	cmncc	r9, #6976	; 0x1b40
    25d0:	74496e00 	strbvc	r6, [r9], #-3584	; 0xfffff200
static void ready () {
    25d4:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
	if (dopen) {
    25d8:	736e6f69 	cmnvc	lr, #420	; 0x1a4
		wwait (WNONE, 1);
    25dc:	746b7000 	strbtvc	r7, [fp], #-0
    25e0:	006e654c 	rsbeq	r6, lr, ip, asr #10
    25e4:	656c7572 	strbvs	r7, [ip, #-1394]!	; 0xfffffa8e
	dstat = 0;
    25e8:	5f465200 	svcpl	0x00465200
}
    25ec:	50646d63 	rsbpl	r6, r4, r3, ror #26
    25f0:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    25f4:	46520078 			; <UNDEFINED> instruction: 0x46520078
	udelay (1);
    25f8:	45504343 	ldrbmi	r4, [r0, #-835]	; 0xfffffcbd
    25fc:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
	udelay (1);
    2600:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
		dopen = DOPEN_TEMP;
    2604:	0072656c 	rsbseq	r6, r2, ip, ror #10
    2608:	70767264 	rsbsvc	r7, r6, r4, ror #4
    260c:	00736372 	rsbseq	r6, r3, r2, ror r3
    2610:	6572506e 	ldrbvs	r5, [r2, #-110]!	; 0xffffff92
static void cclose () {
    2614:	79426d61 	stmdbvc	r2, {r0, r5, r6, r8, sl, fp, sp, lr}^
	if (dopen == DOPEN_TEMP) {
    2618:	00736574 	rsbseq	r6, r3, r4, ror r5
    261c:	666b6362 	strbtvs	r6, [fp], -r2, ror #6
		wwait (WNONE, 1);
    2620:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    2624:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
	cmd_0 (CMD_DP);
    2628:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    262c:	505f444d 	subspl	r4, pc, sp, asr #8
		dopen = 0;
    2630:	5f504f52 	svcpl	0x00504f52
}
    2634:	745f5854 	ldrbvc	r5, [pc], #-2132	; 263c <ee_open+0x4>
word ee_open () {
    2638:	63667200 	cmnvs	r6, #0, 4
	ready ();
    263c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	dopen = DOPEN_PERM;
    2640:	4f52505f 	svcmi	0x0052505f
    2644:	58545f50 	ldmdapl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
}
    2648:	6900735f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}
	if (dopen) {
    264c:	4f656c64 	svcmi	0x00656c64
    2650:	72660070 	rsbvc	r0, r6, #112	; 0x70
		dopen = DOPEN_TEMP;
    2654:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
		cclose ();
    2658:	0079636e 	rsbseq	r6, r9, lr, ror #6
}
    265c:	74615070 	strbtvc	r5, [r1], #-112	; 0xffffff90
int ser_out (word st, const char *m) {
    2660:	61546863 	cmpvs	r4, r3, ror #16
	if ((prcs = running (__outserial)) != 0) {
    2664:	73630062 	cmnvc	r3, #98	; 0x62
    2668:	6f437346 	svcvs	0x00437346
    266c:	6300666e 	movwvs	r6, #1646	; 0x66e
		join (prcs, st);
    2670:	735f646d 	cmpvc	pc, #1828716544	; 0x6d000000
		release;
    2674:	62007472 	andvs	r7, r0, #1912602624	; 0x72000000
	if (*m)
    2678:	664f7346 	strbvs	r7, [pc], -r6, asr #6
		prcs = strlen (m) +1;
    267c:	6f630066 	svcvs	0x00630066
    2680:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
	if ((buf = (char*) umalloc (prcs)) == NULL) {
    2684:	6373694d 	cmnvs	r3, #1261568	; 0x134000
    2688:	00636441 	rsbeq	r6, r3, r1, asr #8
    268c:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
		umwait (st);
    2690:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2694:	6b684362 	blvs	1a13424 <__ccfg+0x19f347c>
		prcs =  m [1] + 3;
    2698:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
	if (*m)
    269c:	00737365 	rsbseq	r7, r3, r5, ror #6
		strcpy (buf, m);
    26a0:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
    26a4:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
	if (runstrand (__outserial, buf) == 0) {
    26a8:	436b7366 	cmnmi	fp, #-1744830463	; 0x98000001
    26ac:	61506570 	cmpvs	r0, r0, ror r5
		ufree (buf);
    26b0:	00686374 	rsbeq	r6, r8, r4, ror r3
    26b4:	5f636672 	svcpl	0x00636672
		memcpy (buf, m, prcs);
    26b8:	5f444d43 	svcpl	0x00444d43
    26bc:	434e5953 	movtmi	r5, #59731	; 0xe953
    26c0:	4154535f 	cmpmi	r4, pc, asr r3
}
    26c4:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    26c8:	735f5441 	cmpvc	pc, #1090519040	; 0x41000000
int ser_in (word st, char *buf, int len) {
    26cc:	63667200 	cmnvs	r6, #0, 4
    26d0:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
	if (len == 0)
    26d4:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
	if (__inpline == NULL) {
    26d8:	54535f43 	ldrbpl	r5, [r3], #-3907	; 0xfffff0bd
		if ((prcs = running (__inserial)) == 0) {
    26dc:	5f545241 	svcpl	0x00545241
    26e0:	5f544152 	svcpl	0x00544152
			prcs = runthread (__inserial);
    26e4:	61700074 	cmnvs	r0, r4, ror r0
    26e8:	6e656c79 	mcrvs	12, 3, r6, cr5, cr9, {3}
			if (prcs == 0) {
    26ec:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
				npwait (st);
    26f0:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
		release;
    26f4:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
		join (prcs, st);
    26f8:	74737400 	ldrbtvc	r7, [r3], #-1024	; 0xfffffc00
    26fc:	62007461 	andvs	r7, r0, #1627389952	; 0x61000000
	if (*__inpline == NULL) // bin cmd
    2700:	43657355 	cmnmi	r5, #1409286145	; 0x54000001
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    2704:	65006372 	strvs	r6, [r0, #-882]	; 0xfffffc8e
	if (prcs >= len)
    2708:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
		prcs = len-1;
    270c:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
	memcpy (buf, __inpline, prcs);
    2710:	79536b73 	ldmdbvc	r3, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    2714:	74615073 	strbtvc	r5, [r1], #-115	; 0xffffff8d
    2718:	64006863 	strvs	r6, [r0], #-2147	; 0xfffff79d
	ufree (__inpline);
    271c:	61697665 	cmnvs	r9, r5, ror #12
	__inpline = NULL;
    2720:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	if (*buf) // if it's NULL, it's a bin cmd
    2724:	43736300 	cmnmi	r3, #0, 6
		buf [prcs] = '\0';
    2728:	00666e6f 	rsbeq	r6, r6, pc, ror #28
}
    272c:	61746164 	cmnvs	r4, r4, ror #2
		prcs = strlen (__inpline);
    2730:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    2734:	00745f65 	rsbseq	r5, r4, r5, ror #30
		return 0;
    2738:	696b536e 	stmdbvs	fp!, {r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    273c:	68700070 	ldmdavs	r0!, {r4, r5, r6}^
    2740:	64697379 	strbtvs	r7, [r9], #-889	; 0xfffffc87
int ser_outf (word st, const char *m, ...) {
    2744:	5f465200 	svcpl	0x00465200
    2748:	50646d63 	rsbpl	r6, r4, r3, ror #26
	if ((prcs = running (__outserial)) != 0) {
    274c:	54706f72 	ldrbtpl	r6, [r0], #-3954	; 0xfffff08e
    2750:	65720078 	ldrbvs	r0, [r2, #-120]!	; 0xffffff88
		join (prcs, st);
    2754:	65724666 	ldrbvs	r4, [r2, #-1638]!	; 0xfffff99a
    2758:	46520071 			; <UNDEFINED> instruction: 0x46520071
		release;
    275c:	6f6c4343 	svcvs	0x006c4343
	if ((buf = vform (NULL, m, ap)) == NULL) {
    2760:	6e456b63 	vmlsvs.f64	d22, d5, d19
    2764:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2768:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
		umwait (st);
    276c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    2770:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
	if (runstrand (__outserial, buf) == 0) {
    2774:	4d544b00 	vldrmi	d20, [r4, #-0]
    2778:	6c702f50 	ldclvs	15, cr2, [r0], #-320	; 0xfffffec0
    277c:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
		ufree (buf);
    2780:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
		npwait (st);
    2784:	63740063 	cmnvs	r4, #99	; 0x63
}
    2788:	756f5f76 	strbvc	r5, [pc, #-3958]!	; 181a <__pi_badstate+0x6>
    278c:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
    2790:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
    2794:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
int ser_inf (word st, const char *fmt, ...) {
    2798:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
    279c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
	if (fmt == NULL)
    27a0:	5f766374 	svcpl	0x00766374
	if (__inpline == NULL) {
    27a4:	5f65706f 	svcpl	0x0065706f
		if ((prcs = running (__inserial)) == 0) {
    27a8:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    27ac:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			prcs = runthread (__inserial);
    27b0:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
    27b4:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
			if (prcs == 0) {
    27b8:	6374006c 	cmnvs	r4, #108	; 0x6c
				npwait (st);
    27bc:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
		release;
    27c0:	756e5f6f 	strbvc	r5, [lr, #-3951]!	; 0xfffff091
		join (prcs, st);
    27c4:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
    27c8:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	va_start (ap, fmt);
    27cc:	6e5f746d 	cdpvs	4, 5, cr7, cr15, cr13, {3}
	prcs = vscan (__inpline, fmt, ap);
    27d0:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    27d4:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
	ufree (__inpline);
    27d8:	6e007364 	cdpvs	3, 0, cr7, cr0, cr4, {3}
	__inpline = NULL;
    27dc:	5f637364 	svcpl	0x00637364
}
    27e0:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    27e4:	61757100 	cmnvs	r5, r0, lsl #2
    27e8:	2f00746e 	svccs	0x0000746e
		return 0;
    27ec:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    27f0:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
    27f4:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    27f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    27fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2800:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	RF_cmdFs.frequency = 
    2804:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
    2808:	4349502f 	movtmi	r5, #36911	; 0x902f
    280c:	502f534f 	eorpl	r5, pc, pc, asr #6
    2810:	534f6369 	movtpl	r6, #62313	; 0xf369
    2814:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
static int option (int opt, address val) {
    2818:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    281c:	61697265 	cmnvs	r9, r5, ror #4
    2820:	5f5f2f6c 	svcpl	0x005f2f6c
    2824:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    2828:	61697265 	cmnvs	r9, r5, ror #4
    282c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    2830:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 18d9 <update_n_wake+0x81>
    2834:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    2838:	006c6169 	rsbeq	r6, ip, r9, ror #2
    283c:	4d4f5f5f 	stclmi	15, cr5, [pc, #-380]	; 26c8 <ser_out+0x68>
    2840:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    2844:	5f004554 	svcpl	0x00004554
    2848:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
			goto RVal;
    284c:	61697265 	cmnvs	r9, r5, ror #4
			_BIS (dstate, DSTATE_RXON);
    2850:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    2854:	2f656d6f 	svccs	0x00656d6f
	int ret = 0;
    2858:	70657473 	rsbvc	r7, r5, r3, ror r4
			p_trigger (drvprcs, qevent);
    285c:	2f6e6568 	svccs	0x006e6568
    2860:	6b736544 	blvs	1cdbd78 <__ccfg+0x1cbbdd0>
    2864:	2f706f74 	svccs	0x00706f74
    2868:	4f534c4f 	svcmi	0x00534c4f
    286c:	2f54454e 	svccs	0x0054454e
    2870:	4f434950 	svcmi	0x00434950
    2874:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2878:	2f534f63 	svccs	0x00534f63
    287c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    2880:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
}
    2884:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
			_BIC (dstate, DSTATE_RXON);
    2888:	695f5f2f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    288c:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
			statid = (val == NULL) ? 0 : *val;
    2890:	2e6c6169 	powcsez	f6, f4, #1.0
    2894:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
	int ret = 0;
    2898:	2f656d6f 	svccs	0x00656d6f
			ret = (int) statid;
    289c:	70657473 	rsbvc	r7, r5, r3, ror r4
	if (val != NULL)
    28a0:	2f6e6568 	svccs	0x006e6568
		*val = ret;
    28a4:	6b736544 	blvs	1cdbdbc <__ccfg+0x1cbbe14>
			ret = rbuffl + 2;
    28a8:	2f706f74 	svccs	0x00706f74
    28ac:	4f534c4f 	svcmi	0x00534c4f
			if (val != NULL) {
    28b0:	2f54454e 	svccs	0x0054454e
				memcpy (val, &rxstat,
    28b4:	4f434950 	svcmi	0x00434950
    28b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				memset (&rxstat, 0, 
    28bc:	2f534f63 	svccs	0x00534f63
    28c0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			if (val == NULL)
    28c4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    28c8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    28cc:	6f66762f 	svcvs	0x0066762f
				utimer_set (bckf_timer, *val);
    28d0:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
    28d4:	61674100 	cmnvs	r7, r0, lsl #2
    28d8:	6f006e69 	svcvs	0x00006e69
			for (ret = 0; ret < 8; ret++)
    28dc:	00637475 	rsbeq	r7, r3, r5, ror r4
				if (RF_cmdPropRadioDivSetup.txPower
    28e0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
					== patable [ret])
    28e4:	7066765f 	rsbvc	r7, r6, pc, asr r6
				if (RF_cmdPropRadioDivSetup.txPower
    28e8:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
			for (ret = 0; ret < 8; ret++)
    28ec:	6f667600 	svcvs	0x00667600
    28f0:	52006d72 	andpl	r6, r0, #7296	; 0x1c80
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    28f4:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    28f8:	775f645f 			; <UNDEFINED> instruction: 0x775f645f
    28fc:	0064726f 	rsbeq	r7, r4, pc, ror #4
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    2900:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 284c <option+0x34>
    2904:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
			_BIS (dstate, DSTATE_IRST);
    2908:	65687065 	strbvs	r7, [r8, #-101]!	; 0xffffff9b
    290c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2910:	6f746b73 	svcvs	0x00746b73
			ret = (int) channel;
    2914:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			goto RVal;
    2918:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				(*val > 7) ? 7 : *val;
    291c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2920:	2f534f43 	svccs	0x00534f43
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2924:	4f636950 	svcmi	0x00636950
    2928:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
			plugch ();
    292c:	2f736269 	svccs	0x00736269
			_BIS (dstate, DSTATE_IRST);
    2930:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2934:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
			ret = (int) vrate;
    2938:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    293c:	7600632e 	strvc	r6, [r0], -lr, lsr #6
    2940:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    2944:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    2948:	645f7972 	ldrbvs	r7, [pc], #-2418	; 2950 <option+0x138>
    294c:	6f776c5f 	svcvs	0x00776c5f
    2950:	2f006472 	svccs	0x00006472
    2954:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2958:	6574732f 	ldrbvs	r7, [r4, #-815]!	; 0xfffffcd1
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    295c:	6e656870 	mcrvs	8, 3, r6, cr5, cr0, {3}
    2960:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2964:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2968:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			syserror (EREQPAR, "cc13 op");
    296c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2970:	4349502f 	movtmi	r5, #36911	; 0x902f
    2974:	502f534f 	eorpl	r5, pc, pc, asr #6
    2978:	534f6369 	movtpl	r6, #62313	; 0xf369
    297c:	3143432f 	cmpcc	r3, pc, lsr #6
    2980:	2f585833 	svccs	0x00585833
    2984:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    2988:	5f667274 	svcpl	0x00667274
    298c:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    2990:	73676e69 	cmnvc	r7, #1680	; 0x690
    2994:	5f706c5f 	svcpl	0x00706c5f
    2998:	632e7268 			; <UNDEFINED> instruction: 0x632e7268
    299c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    29a0:	72747074 	rsbsvc	r7, r4, #116	; 0x74
    29a4:	7000745f 	andvc	r7, r0, pc, asr r4
static void issue_cmd (lword cmd) {
    29a8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
    29ac:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29b0:	5f5f0073 	svcpl	0x005f0073
    29b4:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    29b8:	745f3233 	ldrbvc	r3, [pc], #-563	; 29c0 <issue_cmd+0x18>
		if (res != 0x86)
    29bc:	72496200 	subvc	r6, r9, #0, 4
			syserror (EHARDWARE, "hang ic0");
    29c0:	616e4571 	smcvs	58449	; 0xe451
    29c4:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
		if (cnt-- == 0) {
    29c8:	66615300 	strbtvs	r5, [r1], -r0, lsl #6
			diag ("HUP %lx %lx", cmd, res);
    29cc:	70614865 	rsbvc	r4, r1, r5, ror #16
    29d0:	78754169 	ldmdavc	r5!, {r0, r3, r5, r6, r8, lr}^
			syserror (EHARDWARE, "hang ic0");
    29d4:	53696441 	cmnpl	r9, #1090519040	; 0x41000000
		udelay (1);
    29d8:	63656c65 	cmnvs	r5, #25856	; 0x6500
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    29dc:	50460074 	subpl	r0, r6, r4, ror r0
}
    29e0:	565f5254 			; <UNDEFINED> instruction: 0x565f5254
    29e4:	5f44494f 	svcpl	0x0044494f
    29e8:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    29ec:	4e00545f 	cfmvsrmi	mvf0, r5
static void rx_de () {
    29f0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 28bc <option+0xa4>
	if ((dstate & DSTATE_RXAC) == 0)
    29f4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    29f8:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    29fc:	4f4e0064 	svcmi	0x004e0064
	_BIC (dstate, DSTATE_RXAC);
    2a00:	5f4d4f52 	svcpl	0x004d4f52
    2a04:	63555043 	cmpvs	r5, #67	; 0x43
}
    2a08:	65697370 	strbvs	r7, [r9, #-880]!	; 0xfffffc90
    2a0c:	66615300 	strbtvs	r5, [r1], -r0, lsl #6
    2a10:	70614865 	rsbvc	r4, r1, r5, ror #16
static void rf_off () {
    2a14:	696f5669 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
	if ((dstate & DSTATE_RFON) == 0)
    2a18:	5f5f0064 	svcpl	0x005f0064
    2a1c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
	IntDisable (INT_RFC_CPE_0);
    2a20:	00745f38 	rsbseq	r5, r4, r8, lsr pc
    2a24:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a28:	2f2e2e2f 	svccs	0x002e2e2f
	RFCAdi3VcoLdoVoltageMode (false);
    2a2c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2a34 <rf_off+0x20>
	RFCSynthPowerDown ();
    2a30:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2a34:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2a38:	6964612f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sp, lr}^
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2a3c:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2a40:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2a44:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2a48:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
    2a4c:	30353130 	eorscc	r3, r5, r0, lsr r1
    2a50:	20393235 	eorscs	r3, r9, r5, lsr r2
	_BIC (dstate, DSTATE_RFON);
    2a54:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    2a58:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
}
    2a5c:	415b2029 	cmpmi	fp, r9, lsr #32
    2a60:	652f4d52 	strvs	r4, [pc, #-3410]!	; 1d16 <__pi_waitmem+0x16>
    2a64:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
    2a68:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
    2a6c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2a70:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    2a74:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    2a78:	73697665 	cmnvc	r9, #105906176	; 0x6500000
		if (cmd->status == tstat)
    2a7c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
		if (timeout-- == 0) {
    2a80:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2a84:	205d3737 	subscs	r3, sp, r7, lsr r7
    2a88:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    2a8c:	20626d75 	rsbcs	r6, r2, r5, ror sp
			syserror (EHARDWARE, "rt2");
    2a90:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
    2a94:	6f633d75 	svcvs	0x00633d75
		udelay (1);
    2a98:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
		if (cmd->status == tstat)
    2a9c:	20336d2d 	eorscs	r6, r3, sp, lsr #26
}
    2aa0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    2aa4:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2aa8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
    2aac:	20393963 	eorscs	r3, r9, r3, ror #18
static void rf_on () {
    2ab0:	6f6e662d 	svcvs	0x006e662d
    2ab4:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
	OSCHF_TurnOnXosc();
    2ab8:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    2abc:	61696c61 	cmnvs	r9, r1, ror #24
    2ac0:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    2ac4:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
    2ac8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2acc:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
    2ad0:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    2ad4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    2ad8:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
	issue_cmd (
    2adc:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
    2ae0:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    2ae4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2ae8:	61662d20 	cmnvs	r6, r0, lsr #26
    2aec:	66006d73 			; <UNDEFINED> instruction: 0x66006d73
   pPatchTab[80] = 0;
    2af0:	00727450 	rsbseq	r7, r2, r0, asr r4
   } while (--nIterations);
    2af4:	52545046 	subspl	r5, r4, #70	; 0x46
   pPatchTab[53] = 2;
    2af8:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    2afc:	49555f44 	ldmdbmi	r5, {r2, r6, r8, r9, sl, fp, ip, lr}^
   pPatchTab[55] = 3;
    2b00:	5f38544e 	svcpl	0x0038544e
   pPatchTab[110] = 4;
    2b04:	3a430054 	bcc	10c2c5c <__ccfg+0x10a2cb4>
   pPatchTab[107] = 5;
    2b08:	6e654a5c 			; <UNDEFINED> instruction: 0x6e654a5c
   pPatchTab[65] = 6;
    2b0c:	736e696b 	cmnvc	lr, #1753088	; 0x1ac000
    2b10:	626f6a5c 	rsbvs	r6, pc, #92, 20	; 0x5c000
   pPatchTab[57] = 1;
    2b14:	57465c73 	smlsldxpl	r5, r6, r3, ip
   pIrqPatch[1] = _IRQ_PATCH_0;
    2b18:	756f7247 	strbvc	r7, [pc, #-583]!	; 28d9 <option+0xc1>
   const uint32_t *pS = patchGenfskRfe;
    2b1c:	72442d70 	subvc	r2, r4, #112, 26	; 0x1c00
      t2 = *pS++;
    2b20:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      t4 = *pS++;
    2b24:	5c62694c 			; <UNDEFINED> instruction: 0x5c62694c
      t6 = *pS++;
    2b28:	6b726f77 	blvs	1c9e90c <__ccfg+0x1c7e964>
      t8 = *pS++;
    2b2c:	63617073 	cmnvs	r1, #115	; 0x73
      *pD++ = t1;
    2b30:	6f6d5c65 	svcvs	0x006d5c65
      *pD++ = t2;
    2b34:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
      *pD++ = t3;
    2b38:	756f5c73 	strbvc	r5, [pc, #-3187]!	; 1ecd <enq+0x15>
      *pD++ = t5;
    2b3c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
      *pD++ = t7;
    2b40:	3163635c 	cmncc	r3, ip, asr r3
   } while (--nIterations);
    2b44:	5f787833 	svcpl	0x00787833
    2b48:	5f616863 	svcpl	0x00616863
      *pD++ = t8;
    2b4c:	5f305f32 	svcpl	0x00305f32
   } while (--nIterations);
    2b50:	5c747865 	ldclpl	8, cr7, [r4], #-404	; 0xfffffe6c
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2b54:	76697264 	strbtvc	r7, [r9], -r4, ror #4
   *pD++ = t2;
    2b58:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
   *pD++ = t3;
    2b5c:	69625c62 	stmdbvs	r2!, {r1, r5, r6, sl, fp, ip, lr}^
   *pD++ = t4;
    2b60:	63675c6e 	cmnvs	r7, #28160	; 0x6e00
   *pD++ = t5;
    2b64:	74750063 	ldrbtvc	r0, [r5], #-99	; 0xffffff9d
    2b68:	67695338 			; <UNDEFINED> instruction: 0x67695338
	RFCAdi3VcoLdoVoltageMode (true);
    2b6c:	006c616e 	rsbeq	r6, ip, lr, ror #2
    2b70:	4f524f4e 	svcmi	0x00524f4e
       	RFCRfTrimSet (&rfTrim);
    2b74:	4f415f4d 	svcmi	0x00415f4d
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2b78:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
    2b7c:	546e6f4d 	strbtpl	r6, [lr], #-3917	; 0xfffff0b3
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2b80:	65706d65 	ldrbvs	r6, [r0, #-3429]!	; 0xfffff29b
    2b84:	75746172 	ldrbvc	r6, [r4, #-370]!	; 0xfffffe8e
	issue_cmd ((lword)&cmd_srt);
    2b88:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
    2b8c:	67654474 			; <UNDEFINED> instruction: 0x67654474
	issue_cmd ((lword)&RF_cmdFs);
    2b90:	6f760043 	svcvs	0x00760043
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2b94:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    2b98:	6f6c5365 	svcvs	0x006c5365
    2b9c:	5f006570 	svcpl	0x00006570
	IntEnable (INT_RFC_CPE_0);
    2ba0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	_BIC (dstate, DSTATE_IRST);
    2ba4:	745f3233 	ldrbvc	r3, [pc], #-563	; 2bac <rf_on.part.0+0x104>
    2ba8:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    2bac:	5f38746e 	svcpl	0x0038746e
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    2bb0:	2f2e0074 	svccs	0x002e0074
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    2bb4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	IntEnable (INT_RFC_CPE_0);
    2bb8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2bbc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
}
    2bc0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
	IntEnable (INT_RFC_CPE_0);
    2bc4:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    2bc8:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    2bcc:	6f6d7461 	svcvs	0x006d7461
    2bd0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    2bd4:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2bd8:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
    2bdc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2be0:	73006e6f 	movwvc	r6, #3695	; 0xe6f
    2be4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    2be8:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    2bec:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0xffffff90
    2bf0:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    2bf4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2bf8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    2bfc:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    2c00:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2c04:	63655374 	cmnvs	r5, #116, 6	; 0xd0000001
    2c08:	524f4e00 	subpl	r4, pc, #0, 28
    2c0c:	415f4d4f 	cmpmi	pc, pc, asr #26
    2c10:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    2c14:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
    2c18:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c1c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2c20:	56657261 	strbtpl	r7, [r5], -r1, ror #4
    2c24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
static void rx_int_enable () {
    2c28:	00746547 	rsbseq	r6, r4, r7, asr #10
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2c2c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2c30:	6f636553 	svcvs	0x00636553
    2c34:	6553646e 	ldrbvs	r6, [r3, #-1134]	; 0xfffffb92
    2c38:	61655263 	cmnvs	r5, r3, ror #4
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2c3c:	5f5f0064 	svcpl	0x005f0064
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2c40:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    2c44:	745f3436 	ldrbvc	r3, [pc], #-1078	; 2c4c <rx_int_enable+0x24>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2c48:	33697500 	cmncc	r9, #0, 10
    2c4c:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c50:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c54:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    2c58:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c5c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2b28 <rf_on.part.0+0x80>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c60:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2c64:	43435452 	movtmi	r5, #13394	; 0x3452
		if (db->status == DATA_ENTRY_FINISHED) {
    2c68:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c6c:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
    2c70:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
			nr++;
    2c74:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2c78:	00746547 	rsbseq	r6, r4, r7, asr #10
    2c7c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    2c80:	52746e65 	rsbspl	r6, r4, #1616	; 0x650
    2c84:	73006374 	movwvc	r6, #884	; 0x374
				__dp [pl + 1] = __dp [pl] - 128;
    2c88:	6e416365 	cdpvs	3, 4, cr6, cr1, cr5, {3}
				pl = __dp [1] + 2;
    2c8c:	62755364 	rsbsvs	r5, r5, #100, 6	; 0x90000001
				__dp [pl + 1] = __dp [pl] - 128;
    2c90:	00636553 	rsbeq	r6, r3, r3, asr r5
    2c94:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
				__dp [pl] = 0;
    2c98:	2f2e2e2f 	svccs	0x002e2e2f
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2c9c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2ca4 <rx_int_enable+0x7c>
    2ca0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2ca4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
			db->status = DATA_ENTRY_PENDING;
    2ca8:	6e6f612f 	powvsep	f6, f7, #10.0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2cac:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    2cb0:	7300632e 	movwvc	r6, #814	; 0x32e
				diag ("BAD RX");
    2cb4:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
    2cb8:	00657079 	rsbeq	r7, r5, r9, ror r0
	if (nr) {
    2cbc:	4f524f4e 	svcmi	0x00524f4e
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc0:	50435f4d 	subpl	r5, r3, sp, asr #30
}
    2cc4:	73616255 	cmnvc	r1, #1342177285	; 0x50000005
		gbackoff (RADIO_LBT_BACKOFF_RX);
    2cc8:	69727065 	ldmdbvs	r2!, {r0, r2, r5, r6, ip, sp, lr}^
    2ccc:	00746547 	rsbseq	r6, r4, r7, asr #10
    2cd0:	4f524f4e 	svcmi	0x00524f4e
}
    2cd4:	50435f4d 	subpl	r5, r3, sp, asr #30
    2cd8:	6c656455 	cfstrdvs	mvd6, [r5], #-340	; 0xfffffeac
    2cdc:	75007961 	strvc	r7, [r0, #-2401]	; 0xfffff69f
    2ce0:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    2ce4:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    2ce8:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    2cec:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    2cf0:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    2cf4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
thread (cc1350_driver)
    2cf8:	2f2e2e2f 	svccs	0x002e2e2f
    2cfc:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2d00:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2d04:	70632f62 	rsbvc	r2, r3, r2, ror #30
    2d08:	00632e75 	rsbeq	r2, r3, r5, ror lr
		if (dstate & DSTATE_IRST) {
    2d0c:	4f524f4e 	svcmi	0x00524f4e
    2d10:	50435f4d 	subpl	r5, r3, sp, asr #30
    2d14:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
			rf_off ();
    2d18:	6b73616d 	blvs	1cdb2d4 <__ccfg+0x1cbb32c>
			_BIC (dstate,
    2d1c:	524f4e00 	subpl	r4, pc, #0, 28
    2d20:	4f5f4d4f 	svcmi	0x005f4d4f
		if (dstate & DSTATE_RXAC) {
    2d24:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    2d28:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
			if ((dstate & DSTATE_RXON) == 0)
    2d2c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
				rx_de ();
    2d30:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
		if (paylen == 0) {
    2d34:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2d38:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2d3c:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    2d40:	32335245 	eorscc	r5, r3, #1342177284	; 0x50000004
    2d44:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2d48:	5f525450 	svcpl	0x00525450
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2d4c:	44445453 	strbmi	r5, [r4], #-1107	; 0xfffffbad
    2d50:	5f4c4156 	svcpl	0x004c4156
    2d54:	4f4e0054 	svcmi	0x004e0054
    2d58:	5f4d4f52 	svcpl	0x004d4f52
    2d5c:	4343534f 	movtmi	r5, #13135	; 0x334f
    2d60:	6b636f6c 	blvs	18deb18 <__ccfg+0x18beb70>
    2d64:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2d68:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
		} else if (dstate & DSTATE_RXON) {
    2d6c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
	if (dstate & DSTATE_RFON)
    2d70:	734f3233 	movtvc	r3, #62003	; 0xf233
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2d74:	65530063 	ldrbvs	r0, [r3, #-99]	; 0xffffff9d
		re->status = DATA_ENTRY_PENDING;
    2d78:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2d7c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
	issue_cmd ((lword)&RF_cmdPropRx);
    2d80:	66655242 	strbtvs	r5, [r5], -r2, asr #4
	_BIS (dstate, DSTATE_RXAC);
    2d84:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2d88:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2d8c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2d90:	5f344445 	svcpl	0x00344445
	if (dstate & DSTATE_RXAC)
    2d94:	69740054 	ldmdbvs	r4!, {r2, r4, r6}^
    2d98:	6f58656d 	svcvs	0x0058656d
				if (statid != 0xffff)
    2d9c:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2da0:	0056435f 	subseq	r4, r6, pc, asr r3
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2da4:	4f524f4e 	svcmi	0x00524f4e
				RF_cmdPropTx.pktLen = (byte) paylen;
    2da8:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
		if (paylen == 0) {
    2dac:	5f464843 	svcpl	0x00464843
			wait (qevent, DR_LOOP);
    2db0:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
    2db4:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
			if (dstate & DSTATE_RXAC) {
    2db8:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
    2dbc:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
				rx_int_enable ();
    2dc0:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
			release;
    2dc4:	46480063 	strbmi	r0, [r8], -r3, rrx
			} else if (dstate & DSTATE_RFON) {
    2dc8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
				delay (offdelay, DR_GOOF);
    2dcc:	61536563 	cmpvs	r3, r3, ror #10
    2dd0:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
    2dd4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
		if (bckf_timer) {
    2dd8:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
			wait (qevent, DR_LOOP);
    2ddc:	736f5870 	cmnvc	pc, #112, 16	; 0x700000
    2de0:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
    2de4:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
			delay (bckf_timer, DR_LOOP);
    2de8:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2dec:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
			if (dstate & DSTATE_RXAC)
    2df0:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2df4:	0073556e 	rsbseq	r5, r3, lr, ror #10
	if (dstate & DSTATE_RFON)
    2df8:	61726170 	cmnvs	r2, r0, ror r1
    2dfc:	0031506d 	eorseq	r5, r1, sp, rrx
		rx_de ();
    2e00:	61726170 	cmnvs	r2, r0, ror r1
		RF_cmdPropTx . status = 0;
    2e04:	0032506d 	eorseq	r5, r2, sp, rrx
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e08:	61726170 	cmnvs	r2, r0, ror r1
    2e0c:	0033506d 	eorseq	r5, r3, sp, rrx
    2e10:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		issue_cmd ((lword)&cmd_cs);
    2e14:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
		if (dstate & DSTATE_IRST)
    2e18:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    2e1c:	5f525450 	svcpl	0x00525450
    2e20:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2e24:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2e28:	00545f33 	subseq	r5, r4, r3, lsr pc
			delay (1, DR_XMIT);
    2e2c:	76657270 			; <UNDEFINED> instruction: 0x76657270
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2e30:	73756f69 	cmnvc	r5, #420	; 0x1a4
    2e34:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2e38:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2e3c:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2e40:	0073556e 	rsbseq	r5, r3, lr, ror #10
				RF_cmdPropTx . status = 0;
    2e44:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2e48:	2f2e2e2f 	svccs	0x002e2e2f
				issue_cmd ((lword)&RF_cmdPropTx);
    2e4c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2e54 <cc1350_driver+0x15c>
				proceed (DR_XMIT);
    2e50:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2e54:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
			txtries++;
    2e58:	63736f2f 	cmnvs	r3, #47, 30	; 0xbc
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2e5c:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    2e60:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2e64:	5363736f 	cmnpl	r3, #-1140850687	; 0xbc000001
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e68:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
		goto DR_LOOP__;
    2e6c:	56435f65 	strbpl	r5, [r3], -r5, ror #30
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2e70:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
		paylen = 0;
    2e74:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2e78:	6c006174 	stfvss	f6, [r0], {116}	; 0x74
		txtries = 0;
    2e7c:	6854776f 	ldmdavs	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e80:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2e84:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2e88:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2e8c:	76654474 			; <UNDEFINED> instruction: 0x76654474
    2e90:	00656369 	rsbeq	r6, r5, r9, ror #6
		    tcvphy_top (physid) == NULL)
    2e94:	4f524f4e 	svcmi	0x00524f4e
    2e98:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2e9c:	5f464843 	svcpl	0x00464843
    2ea0:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
			rf_off ();
    2ea4:	6f586e4f 	svcvs	0x00586e4f
endthread
    2ea8:	46006373 			; <UNDEFINED> instruction: 0x46006373
    2eac:	5f525450 	svcpl	0x00525450
    2eb0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2eb4:	56454454 			; <UNDEFINED> instruction: 0x56454454
    2eb8:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2ebc:	5f525450 	svcpl	0x00525450
    2ec0:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2ec4:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2ec8:	00545f32 	subseq	r5, r4, r2, lsr pc
    2ecc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2ed0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2ed4:	61636f4c 	cmnvs	r3, ip, asr #30
    2ed8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2edc:	6d610033 	stclvs	0, cr0, [r1, #-204]!	; 0xffffff34
    2ee0:	6c615670 	stclvs	6, cr5, [r1], #-448	; 0xfffffe40
    2ee4:	52006575 	andpl	r6, r0, #490733568	; 0x1d400000
void RFCCPE0IntHandler (void) {
    2ee8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2eec:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
		_BIS (dstate, DSTATE_IRST);
    2ef0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2ef4:	346e6f69 	strbtcc	r6, [lr], #-3945	; 0xfffff097
    2ef8:	524f4e00 	subpl	r4, pc, #0, 28
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    2efc:	4f5f4d4f 	svcmi	0x005f4d4f
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    2f00:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2f04:	6977535f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, lr}^
	p_trigger (drvprcs, qevent);
    2f08:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2f0c:	4f63526f 	svcmi	0x0063526f
    2f10:	75546373 	ldrbvc	r6, [r4, #-883]	; 0xfffffc8d
    2f14:	664f6e72 			; <UNDEFINED> instruction: 0x664f6e72
    2f18:	736f5866 	cmnvc	pc, #6684672	; 0x660000
    2f1c:	50460063 	subpl	r0, r6, r3, rrx
    2f20:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2dd8 <cc1350_driver+0xe0>
    2f24:	41565841 	cmpmi	r6, r1, asr #16
    2f28:	00545f4c 	subseq	r5, r4, ip, asr #30
    2f2c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2f30:	44417463 	strbmi	r7, [r1], #-1123	; 0xfffffb9d
	RISE_N_SHINE;
    2f34:	6d6f4343 	stclvs	3, cr4, [pc, #-268]!	; 2e30 <cc1350_driver+0x138>
    2f38:	6e494270 	mcrvs	2, 2, r4, cr9, cr0, {3}
    2f3c:	00747570 	rsbseq	r7, r4, r0, ror r5
}
    2f40:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    2f44:	6d695461 	cfstrdvs	mvd5, [r9, #-388]!	; 0xfffffe7c
    2f48:	614d0065 	cmpvs	sp, r5, rrx
    2f4c:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
    2f50:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    2f54:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e20 <cc1350_driver+0x128>
void phys_cc1350 (int phy, int mbs) {
    2f58:	43534f5f 	cmpmi	r3, #380	; 0x17c
	if (rbuffl != 0)
    2f5c:	4f50485f 	svcmi	0x0050485f
    2f60:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
		syserror (ETOOMANY, "cc13");
    2f64:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
		syserror (EREQPAR, "cc13 mb");
    2f68:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
	if (mbs == 0)
    2f6c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2f70:	4f79636e 	svcmi	0x0079636e
		syserror (EREQPAR, "cc13 mb");
    2f74:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2f78:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
	i = 0;
    2f7c:	524f4e00 	subpl	r4, pc, #0, 28
	rbuffl = (byte) mbs;
    2f80:	4f5f4d4f 	svcmi	0x005f4d4f
		db->config.type = 0;	// General (data in structure)
    2f84:	46484353 			; <UNDEFINED> instruction: 0x46484353
	rbuffl = (byte) mbs;
    2f88:	6265445f 	rsbvs	r4, r5, #1593835520	; 0x5f000000
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2f8c:	65476775 	strbvs	r6, [r7, #-1909]	; 0xfffff88b
    2f90:	79724374 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, lr}^
		if (db == NULL)
    2f94:	6c617473 	cfstrdvs	mvd7, [r1], #-460	; 0xfffffe34
			syserror (EMALLOC, "cc13");
    2f98:	6c706d41 	ldclvs	13, cr6, [r0], #-260	; 0xfffffefc
    2f9c:	64757469 	ldrbtvs	r7, [r5], #-1129	; 0xfffffb97
    2fa0:	654d0065 	strbvs	r0, [sp, #-101]	; 0xffffff9b
		db->status = DATA_ENTRY_PENDING;
    2fa4:	61566e61 	cmpvs	r6, r1, ror #28
		if (i)
    2fa8:	0065756c 	rsbeq	r7, r5, ip, ror #10
			da->pNextEntry = (byte*) db;
    2fac:	52545046 	subspl	r5, r4, #70	; 0x46
		db->length = rbuffl + 2;
    2fb0:	5345525f 	movtpl	r5, #21087	; 0x525f
    2fb4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
		db->config.type = 0;	// General (data in structure)
    2fb8:	545f3144 	ldrbpl	r3, [pc], #-324	; 2fc0 <phys_cc1350+0x68>
		db->length = rbuffl + 2;
    2fbc:	63724300 	cmnvs	r2, #0, 6
	db->pNextEntry = (byte*) re;
    2fc0:	46003233 			; <UNDEFINED> instruction: 0x46003233
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    2fc4:	6374656c 	cmnvs	r4, #108, 10	; 0x1b000000
    2fc8:	33726568 	cmncc	r2, #104, 10	; 0x1a000000
	if (rbuffs == NULL)
    2fcc:	65470032 	strbvs	r0, [r7, #-50]	; 0xffffffce
	rbuffs->pCurrEntry = (byte*) re;
    2fd0:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
	rbuffs->pLastEntry = NULL;
    2fd4:	00644970 	rsbeq	r4, r4, r0, ror r9
    2fd8:	52545046 	subspl	r5, r4, #70	; 0x46
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2fdc:	41454d5f 	cmpmi	r5, pc, asr sp
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    2fe0:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    2fe4:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2fe8:	5f525450 	svcpl	0x00525450
	rbuffl -= 2;
    2fec:	43434441 	movtmi	r4, #13377	; 0x3441
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ff0:	42504d4f 	subsmi	r4, r0, #5056	; 0x13c0
	rbuffl -= 2;
    2ff4:	545f4e49 	ldrbpl	r4, [pc], #-3657	; 2ffc <phys_cc1350+0xa4>
	physid = phy;
    2ff8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    2ffc:	4f435f52 	svcmi	0x00435f52
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3000:	5242504d 	subpl	r5, r2, #77	; 0x4d
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    3004:	545f4645 	ldrbpl	r4, [pc], #-1605	; 300c <phys_cc1350+0xb4>
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    3008:	6c655300 	stclvs	3, cr5, [r5], #-0
    300c:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
	utimer_add (&bckf_timer);
    3010:	41706d6f 	cmnmi	r0, pc, ror #26
	drvprcs = runthread (cc1350_driver);
    3014:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    3018:	50460074 	subpl	r0, r6, r4, ror r0
    301c:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
	if (drvprcs == 0)
    3020:	41504d4f 	cmpmi	r0, pc, asr #26
		syserror (ERESOURCE, "cc13");
    3024:	545f4e49 	ldrbpl	r4, [pc], #-3657	; 302c <phys_cc1350+0xd4>
    3028:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    302c:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    3030:	32586174 	subscc	r6, r8, #116, 2
    3034:	63736f00 	cmnvs	r3, #0, 30
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3038:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    303c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    3040:	50480073 	subpl	r0, r8, r3, ror r0
    3044:	5f43534f 	svcpl	0x0043534f
    3048:	466c6552 			; <UNDEFINED> instruction: 0x466c6552
    304c:	4f716572 	svcmi	0x00716572
    3050:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    3054:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    3058:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    305c:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    3060:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
	plugch ();
    3064:	63736f58 	cmnvs	r3, #88, 30	; 0x160
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    3068:	6e496e4f 	cdpvs	14, 4, cr6, cr9, cr15, {2}
    306c:	6400734d 	strvs	r7, [r0], #-845	; 0xfffffcb3
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    3070:	61746c65 	cmnvs	r4, r5, ror #24
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    3074:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3078:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    307c:	736f5865 	cmnvc	pc, #6619136	; 0x650000
}
    3080:	006e4f63 	rsbeq	r4, lr, r3, ror #30
    3084:	50746966 	rsbspl	r6, r4, r6, ror #18
    3088:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    308c:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    3090:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    3094:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    3098:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    309c:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
    30a0:	6f58656d 	svcvs	0x0058656d
    30a4:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    30a8:	56435f66 	strbpl	r5, [r3], -r6, ror #30
    30ac:	43534f00 	cmpmi	r3, #0, 30
    30b0:	6f536648 	svcvs	0x00536648
    30b4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    30b8:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    30bc:	6d610079 	stclvs	0, cr0, [r1, #-484]!	; 0xfffffe1c
    30c0:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2f08 <RFCCPE0IntHandler+0x20>
    30c4:	31685470 	smccc	34112	; 0x8540
    30c8:	63734f00 	cmnvs	r3, #0, 30
    30cc:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    30d0:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    30d4:	00745f73 	rsbseq	r5, r4, r3, ror pc
    30d8:	44524148 	ldrbmi	r4, [r2], #-328	; 0xfffffeb8
    30dc:	4950415f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, lr}^
    30e0:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
    30e4:	55656d69 	strbpl	r6, [r5, #-3433]!	; 0xfffff297
    30e8:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    30ec:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    30f0:	6e497075 	mcrvs	0, 2, r7, cr9, cr5, {3}
    30f4:	7500734d 	strvc	r7, [r0, #-845]	; 0xfffffcb3
    30f8:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    30fc:	6c436372 	mcrrvs	3, 7, r6, r3, cr2
    3100:	534f006b 	movtpl	r0, #61547	; 0xf06b
    3104:	53664843 	cmnpl	r6, #4390912	; 0x430000
    3108:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    310c:	69775365 	ldmdbvs	r7!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    3110:	00686374 	rsbeq	r6, r8, r4, ror r3
    3114:	52545046 	subspl	r5, r4, #70	; 0x46
    3118:	4352435f 	cmpmi	r2, #2080374785	; 0x7c000001
    311c:	545f3233 	ldrbpl	r3, [pc], #-563	; 3124 <tcv_ope_null>
    3120:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    3124:	67654470 			; <UNDEFINED> instruction: 0x67654470
    3128:	50460043 	subpl	r0, r6, r3, asr #32
    312c:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 2fe4 <phys_cc1350+0x8c>
    3130:	41564e49 	cmpmi	r6, r9, asr #28
    3134:	00545f4c 	subseq	r5, r4, ip, asr #30
    3138:	52545046 	subspl	r5, r4, #70	; 0x46
    313c:	5346485f 	movtpl	r4, #26719	; 0x685f
    3140:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    3144:	46415345 	strbmi	r5, [r1], -r5, asr #6
    3148:	49575345 	ldmdbmi	r7, {r0, r2, r6, r8, r9, ip, lr}^
    314c:	5f484354 	svcpl	0x00484354
    3150:	694d0054 	stmdbvs	sp, {r2, r4, r6}^
    3154:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    3158:	70006575 	andvc	r6, r0, r5, ror r5
    315c:	4c766572 	cfldr64mi	mvdx6, [r6], #-456	; 0xfffffe38
    3160:	696d6d69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    3164:	49353274 	ldmdbmi	r5!, {r2, r4, r5, r6, r9, ip, sp}
    3168:	0073556e 	rsbseq	r5, r3, lr, ror #10
strand (__outserial, const char*)
    316c:	4f524f4e 	svcmi	0x00524f4e
    3170:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    3174:	50485f43 	subpl	r5, r8, r3, asr #30
    3178:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
endstrand
    317c:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
    3180:	46657669 	strbtmi	r7, [r5], -r9, ror #12
	ptr = data;
    3184:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    3188:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
	if (*ptr)
    318c:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
		len = strlen (ptr);
    3190:	6f547465 	svcvs	0x00547465
    3194:	6f434652 	svcvs	0x00434652
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    3198:	6f466572 	svcvs	0x00466572
    319c:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    31a0:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    31a4:	00747265 	rsbseq	r7, r4, r5, ror #4
    31a8:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
	len -= quant;
    31ac:	6f437463 	svcvs	0x00437463
    31b0:	5241706d 	subpl	r7, r1, #109	; 0x6d
    31b4:	75006665 	strvc	r6, [r0, #-1637]	; 0xfffff99b
	if (len == 0) {
    31b8:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
		ufree (data);
    31bc:	6b636f6c 	blvs	18def74 <__ccfg+0x18befcc>
		finish;
    31c0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    31c4:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    31c8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    31cc:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    31d0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    31d4:	316e6f69 	cmncc	lr, r9, ror #30
    31d8:	73655200 	cmnvc	r5, #0, 4
strand (__inserial, address)
    31dc:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    31e0:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    31e4:	6f697461 	svcvs	0x00697461
    31e8:	5f00326e 	svcpl	0x0000326e
    31ec:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	if (__inpline != NULL)
    31f0:	745f3631 	ldrbvc	r3, [pc], #-1585	; 31f8 <__inserial+0x1c>
    31f4:	73655200 	cmnvc	r5, #0, 4
		finish;
    31f8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    31fc:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    3200:	6f697461 	svcvs	0x00697461
    3204:	5300356e 	movwpl	r3, #1390	; 0x56e
    3208:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
		umwait (IM_INIT);
    320c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
		release;
    3210:	6f697461 	svcvs	0x00697461
	savedata (data);
    3214:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
	len = MAX_LINE_LENGTH;
    3218:	72006575 	andvc	r6, r0, #490733568	; 0x1d400000
	io (IM_READ, __cport, READ, ptr, 1);
    321c:	726f4366 	rsbvc	r4, pc, #-1744830463	; 0x98000001
    3220:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    3224:	66664f71 	uqsub16vs	r4, r6, r1
    3228:	00746573 	rsbseq	r6, r4, r3, ror r5
	if (ptr == (char*) data) { // new line
    322c:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    3230:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
		if (*ptr == '\0') { // bin cmd
    3234:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 3070 <phys_cc1350+0x118>
			proceed (IM_BIN);
    3238:	4f4e0064 	svcmi	0x004e0064
    323c:	5f4d4f52 	svcpl	0x004d4f52
		if (*ptr < 0x20)
    3240:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    3244:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
			proceed (IM_READ);
    3248:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
    324c:	78457465 	stmdavc	r5, {r0, r2, r5, r6, sl, ip, sp, lr}^
	if (*ptr == '\n' || *ptr == '\r') {
    3250:	74636570 	strbtvc	r6, [r3], #-1392	; 0xfffffa90
    3254:	76416465 	strbvc	r6, [r1], -r5, ror #8
    3258:	67617265 	strbvs	r7, [r1, -r5, ror #4]!
		*ptr = '\0';
    325c:	79724365 	ldmdbvc	r2!, {r0, r2, r5, r6, r8, r9, lr}^
		__inpline = (char*)data;
    3260:	6c617473 	cfstrdvs	mvd7, [r1], #-460	; 0xfffffe34
		finish;
    3264:	6c706d41 	ldclvs	13, cr6, [r0], #-260	; 0xfffffefc
	if (len) {
    3268:	64757469 	ldrbtvs	r7, [r5], #-1129	; 0xfffffb97
		ptr++;
    326c:	736f0065 	cmnvc	pc, #101	; 0x65
    3270:	67664363 	strbvs	r4, [r6, -r3, ror #6]!
		len--;
    3274:	43676552 	cmnmi	r7, #343932928	; 0x14800000
	proceed (IM_READ);
    3278:	0079706f 	rsbseq	r7, r9, pc, rrx
	io (IM_BIN, __cport, READ, ptr, 1);
    327c:	52545046 	subspl	r5, r4, #70	; 0x46
    3280:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
    3284:	49534c46 	ldmdbmi	r3, {r1, r2, r6, sl, fp, lr}^
    3288:	545f455a 	ldrbpl	r4, [pc], #-1370	; 3290 <__inserial+0xb4>
    328c:	524f4e00 	subpl	r4, pc, #0, 28
	len -= 2;
    3290:	4f5f4d4f 	svcmi	0x005f4d4f
	if (len > *ptr + 1) // 1 for 0x04
    3294:	46484353 			; <UNDEFINED> instruction: 0x46484353
    3298:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
		len = *ptr + 1;
    329c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    32a0:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
	ptr++;
    32a4:	00656d69 	rsbeq	r6, r5, r9, ror #26
	quant = io (IM_BINL, __cport, READ, ptr, len);
    32a8:	73616c46 	cmnvc	r1, #17920	; 0x4600
    32ac:	74654768 	strbtvc	r4, [r5], #-1896	; 0xfffff898
    32b0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    32b4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    32b8:	4f435f52 	svcmi	0x00435f52
    32bc:	5241504d 	subpl	r5, r1, #77	; 0x4d
	len -= quant;
    32c0:	545f4645 	ldrbpl	r4, [pc], #-1605	; 32c8 <__inserial+0xec>
		__inpline = (char*)data;
    32c4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
		finish;
    32c8:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
	ptr += quant;
    32cc:	49484354 	stmdbmi	r8, {r2, r4, r6, r8, r9, lr}^
    32d0:	5f444950 	svcpl	0x00444950
endstrand
    32d4:	50460054 	subpl	r0, r6, r4, asr r0
    32d8:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
	proceed (IM_BINL);
    32dc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
endstrand
    32e0:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
    32e4:	7000545f 	andvc	r5, r0, pc, asr r4
    32e8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    32ec:	4e003050 	mcrmi	0, 0, r3, cr0, cr0, {2}
    32f0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 31bc <__outserial+0x50>
    32f4:	4346525f 	movtmi	r5, #25183	; 0x625f
		if (res && (d < n))
    32f8:	49657043 	stmdbmi	r5!, {r0, r1, r6, ip, sp, lr}^
    32fc:	6547746e 	strbvs	r7, [r7, #-1134]	; 0xfffffb92
    3300:	646e4174 	strbtvs	r4, [lr], #-372	; 0xfffffe8c
    3304:	61656c43 	cmnvs	r5, r3, asr #24
			res [d] = (char) c;
    3308:	4f700072 	svcmi	0x00700072
		d++;
    330c:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    3310:	00656469 	rsbeq	r6, r5, r9, ror #8
    3314:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3318:	6f00745f 	svcvs	0x0000745f
    331c:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    3320:	5f656469 	svcpl	0x00656469
				enci (10000);
    3324:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    3328:	4f4e0078 	svcmi	0x004e0078
    332c:	5f4d4f52 	svcpl	0x004d4f52
	d = 0;
    3330:	41434652 	cmpmi	r3, r2, asr r6
		c = *fm++;
    3334:	56336964 	ldrtpl	r6, [r3], -r4, ror #18
		if (c == '\\') {
    3338:	644c6f63 	strbvs	r6, [ip], #-3939	; 0xfffff09d
			if ((c = *fm++) == '\0') {
    333c:	6c6f566f 	stclvs	6, cr5, [pc], #-444	; 3188 <__outserial+0x1c>
    3340:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
				outc ('\\');
    3344:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
			if ((c = *fm++) == '\0') {
    3348:	63667200 	cmnvs	r6, #0, 4
				outc ('\\');
    334c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    3350:	4f52505f 	svcmi	0x0052505f
			outc (c);
    3354:	41525f50 	cmpmi	r2, r0, asr pc
    3358:	5f4f4944 	svcpl	0x004f4944
			if (c == '\0')
    335c:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
    3360:	00745f50 	rsbseq	r5, r4, r0, asr pc
			outc (c);
    3364:	4f524f4e 	svcmi	0x00524f4e
				outc (val);
    3368:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
				val = (word) va_arg (ap, aword);
    336c:	54665243 	strbtpl	r5, [r6], #-579	; 0xfffffdbd
		if (c == '%') {
    3370:	536d6972 	cmnpl	sp, #1867776	; 0x1c8000
    3374:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
			c = *fm++;
    3378:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3244 <__inserial+0x68>
			switch (c) {
    337c:	4346525f 	movtmi	r5, #25183	; 0x625f
    3380:	746e7953 	strbtvc	r7, [lr], #-2387	; 0xfffff6ad
    3384:	776f5068 	strbvc	r5, [pc, -r8, rrx]!
    3388:	6f447265 	svcvs	0x00447265
    338c:	6f006e77 	svcvs	0x00006e77
    3390:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    3394:	5f656469 	svcpl	0x00656469
    3398:	69727472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, sp, lr}^
				outc ('%');
    339c:	4f70006d 	svcmi	0x0070006d
    33a0:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
				outc (c);
    33a4:	75007075 	strvc	r7, [r0, #-117]	; 0xffffff8b
    33a8:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    33ac:	72006766 	andvc	r6, r0, #26738688	; 0x1980000
				if (c == '\0')
    33b0:	645f6366 	ldrbvs	r6, [pc], #-870	; 33b8 <__pi_vfparse+0xa0>
				return d;
    33b4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
}
    33b8:	7249746c 	subvc	r7, r9, #108, 8	; 0x6c000000
    33bc:	64644171 	strbtvs	r4, [r4], #-369	; 0xfffffe8f
			switch (c) {
    33c0:	4f4e0072 	svcmi	0x004e0072
    33c4:	5f4d4f52 	svcpl	0x004d4f52
    33c8:	43434652 	movtmi	r4, #13906	; 0x3652
				for (i = 12; ; i -= 4) {
    33cc:	61504550 	cmpvs	r0, r0, asr r5
				val = (word) va_arg (ap, aword);
    33d0:	52686374 	rsbpl	r6, r8, #116, 6	; 0xd0000001
						[ (val >> i) & 0xf ]);
    33d4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    33d8:	63667200 	cmnvs	r6, #0, 4
    33dc:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
					outc (__pi_hex_enc_table
    33e0:	4f52505f 	svcmi	0x0052505f
    33e4:	41525f50 	cmpmi	r2, r0, asr pc
					if (i == 0)
    33e8:	5f4f4944 	svcpl	0x004f4944
    33ec:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
				for (i = 12; ; i -= 4) {
    33f0:	00735f50 	rsbseq	r5, r3, r0, asr pc
				val = (word) va_arg (ap, aword);
    33f4:	54665270 	strbtpl	r5, [r6], #-624	; 0xfffffd90
				if (c == 'd' && (val & 0x8000) != 0) {
    33f8:	006d6972 	rsbeq	r6, sp, r2, ror r9
				val = (word) va_arg (ap, aword);
    33fc:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
				if (c == 'd' && (val & 0x8000) != 0) {
    3400:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3404:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
					outc ('-');
    3408:	2e006575 	cfrshl64cs	mvdx0, mvdx5, r6
    340c:	2f2e2e2f 	svccs	0x002e2e2f
					val = (~val) + 1;
    3410:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3414:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
				for (i = 12; ; i -= 4) {
    3418:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
				enci (10000);
    341c:	2f62696c 	svccs	0x0062696c
    3420:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    3424:	66720063 	ldrbtvs	r0, [r2], -r3, rrx
    3428:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    342c:	41525f44 	cmpmi	r2, r4, asr #30
    3430:	5f4f4944 	svcpl	0x004f4944
    3434:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
    3438:	00735f50 	rsbseq	r5, r3, r0, asr pc
    343c:	5f636672 	svcpl	0x00636672
    3440:	5f444d43 	svcpl	0x00444d43
    3444:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    3448:	45535f4f 	ldrbmi	r5, [r3, #-3919]	; 0xfffff0b1
    344c:	5f505554 	svcpl	0x00505554
    3450:	45620074 	strbmi	r0, [r2, #-116]!	; 0xffffff8c
    3454:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    3458:	63660065 	cmnvs	r6, #101	; 0x65
    345c:	5f316766 	svcpl	0x00316766
    3460:	69727472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, sp, lr}^
				if (c == 'd' || c == 'u') {
    3464:	4f4e006d 	svcmi	0x004e006d
    3468:	5f4d4f52 	svcpl	0x004d4f52
					if (c == 'd' &&
    346c:	52434652 	subpl	r4, r3, #85983232	; 0x5200000
					val = va_arg (ap, lword);
    3470:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
					fm++;
    3474:	524f4e00 	subpl	r4, pc, #0, 28
					if (c == 'd' &&
    3478:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    347c:	6f444346 	svcvs	0x00444346
						outc ('-');
    3480:	6562726f 	strbvs	r7, [r2, #-623]!	; 0xfffffd91
    3484:	65536c6c 	ldrbvs	r6, [r3, #-3180]	; 0xfffff394
						val = (~val) + 1;
    3488:	6f54646e 	svcvs	0x0054646e
				enci (10000);
    348c:	43465200 	movtmi	r5, #25088	; 0x6200
					enci (1000000000UL);
    3490:	496b6341 	stmdbmi	fp!, {r0, r6, r8, r9, sp, lr}^
    3494:	6c43746e 	cfstrdvs	mvd7, [r3], {110}	; 0x6e
    3498:	00726165 	rsbseq	r6, r2, r5, ror #2
    349c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    34a0:	00726564 	rsbseq	r6, r2, r4, ror #10
    34a4:	4f524f4e 	svcmi	0x00524f4e
    34a8:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    34ac:	54665243 	strbtpl	r5, [r6], #-579	; 0xfffffdbd
    34b0:	526d6972 	rsbpl	r6, sp, #1867776	; 0x1c8000
    34b4:	00646165 	rsbeq	r6, r4, r5, ror #2
    34b8:	7231706d 	eorsvc	r7, r1, #109	; 0x6d
    34bc:	54007665 	strpl	r7, [r0], #-1637	; 0xfffff99b
    34c0:	416d6972 	smcmi	54930	; 0xd692
    34c4:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    34c8:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    34cc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    34d0:	6b615774 	blvs	18592a8 <__ccfg+0x1839300>
				} else if (c == 'x') {
    34d4:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
					for (i = 28; ; i -= 4) {
    34d8:	536d6f72 	cmnpl	sp, #456	; 0x1c8
					val = va_arg (ap, lword);
    34dc:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
							[ (val >> i) & 0xf ]);
    34e0:	006e776f 	rsbeq	r7, lr, pc, ror #14
    34e4:	4f524f4e 	svcmi	0x00524f4e
						outc (__pi_hex_enc_table
    34e8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    34ec:	41707574 	cmnmi	r0, r4, ror r5
    34f0:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
						if (i == 0)
    34f4:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    34f8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
					for (i = 28; ; i -= 4) {
    34fc:	6b615774 	blvs	18592d4 <__ccfg+0x183932c>
					outc ('%');
    3500:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    3504:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    3508:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
					outc ('l');
    350c:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    3510:	00316766 	eorseq	r6, r1, r6, ror #14
				val = (word) va_arg (ap, aword);
    3514:	4f524f4e 	svcmi	0x00524f4e
				outc (val);
    3518:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    351c:	41707574 	cmnmi	r0, r4, ror r5
				while (*st != '\0') {
    3520:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    3524:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    3528:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    352c:	6b615774 	blvs	1859304 <__ccfg+0x183935c>
					outc (*st);
    3530:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    3534:	536d6f72 	cmnpl	sp, #456	; 0x1c8
					st++;
    3538:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
		c = *fm++;
    353c:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    3540:	00326766 	eorseq	r6, r2, r6, ror #14
    3544:	4f524f4e 	svcmi	0x00524f4e
char *vform (char *res, const char *fm, va_list aq) {
    3548:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    354c:	41707574 	cmnmi	r0, r4, ror r5
	if (res != NULL) {
    3550:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
		__pi_vfparse (res, MAX_WORD, fm, aq);
    3554:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    3558:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    355c:	6b615774 	blvs	1859334 <__ccfg+0x183938c>
}
    3560:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    3564:	536d6f72 	cmnpl	sp, #456	; 0x1c8
	fml = strlen (fm) + 17;
    3568:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    356c:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    3570:	00336766 	eorseq	r6, r3, r6, ror #14
	if ((res = (char*) umalloc (fml)) == NULL)
    3574:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3578:	2f2e2e2f 	svccs	0x002e2e2f
    357c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 3584 <vform+0x3c>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    3580:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3584:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3588:	7465732f 	strbtvc	r7, [r5], #-815	; 0xfffffcd1
    358c:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
		ufree (res);
    3590:	524f4e00 	subpl	r4, pc, #0, 28
		goto Again;
    3594:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
	if (buf == NULL || fmt == NULL)
    3598:	70757465 	rsbsvc	r7, r5, r5, ror #8
int vscan (const char *buf, const char *fmt, va_list ap) {
    359c:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
	if (buf == NULL || fmt == NULL)
    35a0:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
    35a4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    35a8:	6f636341 	svcvs	0x00636341
		    	    case 'u': scanu (lword); break;
    35ac:	6e696472 	mcrvs	4, 3, r6, cr9, cr2, {3}
			while (isspace (*buf)) buf++;
    35b0:	436f5467 	cmnmi	pc, #1728053248	; 0x67000000
    35b4:	53676663 	cmnpl	r7, #103809024	; 0x6300000
	while (*fmt != '\0') {
    35b8:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
		if (*fmt++ != '%')
    35bc:	7500676e 	strvc	r6, [r0, #-1902]	; 0xfffff892
		switch (*fmt++) {
    35c0:	46323369 	ldrtmi	r3, [r2], -r9, ror #6
    35c4:	31676663 	cmncc	r7, r3, ror #12
    35c8:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    35cc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    35d0:	4e4f4100 	dvfmie	f4, f7, f0
    35d4:	4a435557 	bmi	10d8b38 <__ccfg+0x10b8b90>
    35d8:	50676174 	rsbpl	r6, r7, r4, ror r1
}
    35dc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
		switch (*fmt++) {
    35e0:	0066664f 	rsbeq	r6, r6, pc, asr #12
    35e4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    35e8:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    35ec:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 342c <__pi_vfparse+0x114>
			while (isspace (*buf)) buf++;
    35f0:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    35f4:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    35f8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 34c4 <__pi_vfparse+0x1ac>
    35fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3600:	72547075 	subsvc	r7, r4, #117	; 0x75
    3604:	65446d69 	strbvs	r6, [r4, #-3433]	; 0xfffff297
			if (*buf == '\0')
    3608:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
			if (*buf != ',') {
    360c:	72747600 	rsbsvc	r7, r4, #0, 12
			sap = va_arg (ap, char*);
    3610:	755f6d69 	ldrbvc	r6, [pc, #-3433]	; 28af <option+0x97>
			nc++;
    3614:	00676964 	rsbeq	r6, r7, r4, ror #18
			if (*buf != ',') {
    3618:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
				while (!isspace (*buf) && *buf != ',' &&
    361c:	536e6f41 	cmnpl	lr, #260	; 0x104
    3620:	65527379 	ldrbvs	r7, [r2, #-889]	; 0xfffffc87
    3624:	63746573 	cmnvs	r4, #482344960	; 0x1cc00000
    3628:	63006c74 	movwvs	r6, #3188	; 0xc74
    362c:	5f676663 	svcpl	0x00676663
    3630:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3634:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
			while (isspace (*buf)) buf++;
    3638:	00676552 	rsbeq	r6, r7, r2, asr r5
    363c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3640:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    3644:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 3484 <__pi_vfparse+0x16c>
    3648:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
			if (*buf == ',') buf++;
    364c:	61577465 	cmpvs	r7, r5, ror #8
    3650:	7075656b 	rsbsvc	r6, r5, fp, ror #10
			*sap = '\0';
    3654:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 3544 <__pi_vfparse+0x22c>
			break;
    3658:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
		    case 'd': scani (word); break;
    365c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3660:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    3664:	72467075 	subvc	r7, r6, #117	; 0x75
    3668:	6f506d6f 	svcvs	0x00506d6f
    366c:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    3670:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3674:	4f524f4e 	svcmi	0x00524f4e
    3678:	68545f4d 	ldmdavs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    367c:	6f437369 	svcvs	0x00437369
    3680:	73496564 	movtvc	r6, #38244	; 0x9564
    3684:	6c697542 	cfstr64vs	mvdx7, [r9], #-264	; 0xfffffef8
    3688:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
    368c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3690:	77487878 	smlsldxvc	r7, r8, r8, r8
    3694:	32766552 	rsbscc	r6, r6, #343932928	; 0x14800000
    3698:	646e4130 	strbtvs	r4, [lr], #-304	; 0xfffffed0
    369c:	6574614c 	ldrbvs	r6, [r4, #-332]!	; 0xfffffeb4
    36a0:	61485f72 	hvcvs	34290	; 0x85f2
    36a4:	6649746c 	strbvs	r7, [r9], -ip, ror #8
    36a8:	6c6f6956 			; <UNDEFINED> instruction: 0x6c6f6956
    36ac:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    36b0:	72747600 	rsbsvc	r7, r4, #0, 12
    36b4:	625f6d69 	subsvs	r6, pc, #6720	; 0x1a40
    36b8:	6300646f 	movwvs	r6, #1135	; 0x46f
    36bc:	45676663 	strbmi	r6, [r7, #-1635]!	; 0xfffff99d
    36c0:	664c7478 			; <UNDEFINED> instruction: 0x664c7478
    36c4:	006b6c43 	rsbeq	r6, fp, r3, asr #24
    36c8:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
		    case 'u': scanu (word); break;
    36cc:	48746e65 	ldmdami	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    36d0:	6f6c4366 	svcvs	0x006c4366
    36d4:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
    36d8:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    36dc:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    36e0:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    36e4:	4e006c61 	cdpmi	12, 0, cr6, cr0, cr1, {3}
    36e8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 35b4 <vscan+0x1c>
    36ec:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    36f0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    36f4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    36f8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    36fc:	62616e41 	rsbvs	r6, r1, #1040	; 0x410
    3700:	73617079 	cmnvc	r1, #121	; 0x79
    3704:	6c615673 	stclvs	6, cr5, [r1], #-460	; 0xfffffe34
    3708:	00316575 	eorseq	r6, r1, r5, ror r5
    370c:	4f524f4e 	svcmi	0x00524f4e
    3710:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
		    case 'x': scanx (word); break;
    3714:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3718:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    371c:	6f466d69 	svcvs	0x00466d69
    3720:	6c624472 	cfstrdvs	mvd4, [r2], #-456	; 0xfffffe38
    3724:	6f6f4c72 	svcvs	0x006f4c72
    3728:	6c694670 	stclvs	6, cr4, [r9], #-448	; 0xfffffe40
    372c:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
    3730:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3734:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    3738:	00656761 	rsbeq	r6, r5, r1, ror #14
    373c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    3740:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    3744:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3748:	736d6976 	cmnvc	sp, #1933312	; 0x1d8000
    374c:	4d6c7443 	cfstrdmi	mvd7, [ip, #-268]!	; 0xfffffef4
    3750:	3065646f 	rsbcc	r6, r5, pc, ror #8
    3754:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    3758:	664f7361 	strbvs	r7, [pc], -r1, ror #6
    375c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    3760:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    3764:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3768:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    376c:	6863736f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3770:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    3774:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3778:	4f4e0065 	svcmi	0x004e0065
    377c:	5f4d4f52 	svcpl	0x004d4f52
    3780:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3784:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3788:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			switch (*fmt++) {
    378c:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3790:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3794:	73614666 	cmnvc	r1, #106954752	; 0x6600000
    3798:	61745374 	cmnvs	r4, r4, ror r3
    379c:	4e007472 	mcrmi	4, 0, r7, cr0, cr2, {3}
    37a0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 366c <vscan+0xd4>
		    	    case 'd': scani (lword); break;
    37a4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    37a8:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    37ac:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    37b0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    37b4:	734f6352 	movtvc	r6, #62290	; 0xf352
    37b8:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    37bc:	73616942 	cmnvc	r1, #1081344	; 0x108000
    37c0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    37c4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    37c8:	64416174 	strbvs	r6, [r1], #-372	; 0xfffffe8c
    37cc:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    37d0:	524f4e00 	subpl	r4, pc, #0, 28
    37d4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    37d8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    37dc:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    37e0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    37e4:	6f58726f 	svcvs	0x0058726f
    37e8:	66486373 			; <UNDEFINED> instruction: 0x66486373
    37ec:	006c7443 	rsbeq	r7, ip, r3, asr #8
    37f0:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    37f4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    37f8:	6152726f 	cmpvs	r2, pc, ror #4
    37fc:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
		    	    case 'x': scanx (lword); break;
    3800:	67664374 			; <UNDEFINED> instruction: 0x67664374
    3804:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3808:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
    380c:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    3810:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3814:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3818:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    381c:	61466648 	cmpvs	r6, r8, asr #12
    3820:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    3824:	56747261 	ldrbtpl	r7, [r4], -r1, ror #4
    3828:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    382c:	524f4e00 	subpl	r4, pc, #0, 28
    3830:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3834:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3838:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    383c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3840:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    3844:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 368c <vscan+0xf4>
    3848:	31685470 	smccc	34112	; 0x8540
    384c:	524f4e00 	subpl	r4, pc, #0, 28
    3850:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3854:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3858:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    385c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3860:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    3864:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 36ac <vscan+0x114>
    3868:	32685470 	rsbcc	r5, r8, #112, 8	; 0x70000000
    386c:	524f4e00 	subpl	r4, pc, #0, 28
		    	    case 'd': scani (lword); break;
    3870:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3874:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3878:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    387c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3880:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    3884:	56685363 	strbtpl	r5, [r8], -r3, ror #6
    3888:	45667562 	strbmi	r7, [r6, #-1378]!	; 0xfffffa9e
		    	    case 'u': scanu (lword); break;
    388c:	4f4e006e 	svcmi	0x004e006e
    3890:	5f4d4f52 	svcpl	0x004d4f52
    3894:	33494444 	movtcc	r4, #37956	; 0x9444
    3898:	67655232 			; <UNDEFINED> instruction: 0x67655232
    389c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    38a0:	63660065 	cmnvs	r6, #101	; 0x65
    38a4:	44316766 	ldrtmi	r6, [r1], #-1894	; 0xfffff89a
    38a8:	00617461 	rsbeq	r7, r1, r1, ror #8
    38ac:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    38b0:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    38b4:	63734f63 	cmnvs	r3, #396	; 0x18c
    38b8:	4249664c 	submi	r6, r9, #76, 12	; 0x4c00000
    38bc:	54736169 	ldrbtpl	r6, [r3], #-361	; 0xfffffe97
    38c0:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    38c4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    38c8:	72617400 	rsbvc	r7, r1, #0, 8
    38cc:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    38d0:	006d6972 	rsbeq	r6, sp, r2, ror r9
		    	    case 'x': scanx (lword); break;
    38d4:	4f524f4e 	svcmi	0x00524f4e
    38d8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
			if ((c = *buf++) == '\0')
    38dc:	47707574 			; <UNDEFINED> instruction: 0x47707574
    38e0:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
			sap = va_arg (ap, char*);
    38e4:	6f466d69 	svcvs	0x00466d69
			nc++;
    38e8:	64615272 	strbtvs	r5, [r1], #-626	; 0xfffffd8e
			break;
    38ec:	74784563 	ldrbtvc	r4, [r8], #-1379	; 0xfffffa9d
			while (isspace (*buf)) buf++;
    38f0:	00676643 	rsbeq	r6, r7, r3, asr #12
    38f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    38f8:	2f2e2e2f 	svccs	0x002e2e2f
						*sap++ = *buf++;
    38fc:	642f2e2e 	strtvs	r2, [pc], #-3630	; 3904 <vscan+0x36c>
    3900:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
			while (isspace (*buf)) buf++;
    3904:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3908:	7465732f 	strbtvc	r7, [r5], #-815	; 0xfffffcd1
    390c:	725f7075 	subsvc	r7, pc, #117	; 0x75
		return 0;
    3910:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    3914:	62757300 	rsbsvs	r7, r5, #0, 6
		    case 'x': scanx (word); break;
    3918:	49636553 	stmdbmi	r3!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    391c:	4e00636e 	cdpmi	3, 0, cr6, cr0, cr14, {3}
		    	    case 'x': scanx (lword); break;
    3920:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 37ec <vscan+0x254>
    3924:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3928:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    392c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3930:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3934:	734f6352 	movtvc	r6, #62290	; 0xf352
    3938:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    393c:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    3940:	6e757443 	cdpvs	4, 7, cr7, cr5, cr3, {2}
    3944:	69725465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, lr}^
    3948:	4f4e006d 	svcmi	0x004e006d
    394c:	5f4d4f52 	svcpl	0x004d4f52
    3950:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3954:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3958:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    395c:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3960:	4c63736f 	stclmi	3, cr7, [r3], #-444	; 0xfffffe44
    3964:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    3968:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    396c:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
    3970:	696d4364 	stmdbvs	sp!, {r2, r5, r6, r8, r9, lr}^
    3974:	72777272 	rsbsvc	r7, r7, #536870919	; 0x20000007
    3978:	69746152 	ldmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    397c:	6975006f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r6}^
    3980:	72543233 	subsvc	r3, r4, #805306371	; 0x30000003
    3984:	53006d69 	movwpl	r6, #3433	; 0xd69
    3988:	70757465 	rsbsvc	r7, r5, r5, ror #8
    398c:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    3990:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0xfffff7bb
    3994:	6456646e 	ldrbvs	r6, [r6], #-1134	; 0xfffffb92
    3998:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    399c:	61566d69 	cmpvs	r6, r9, ror #26
    39a0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    39a4:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    39a8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    39ac:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    39b0:	56685363 	strbtpl	r5, [r8], -r3, ror #6
    39b4:	45667562 	strbmi	r7, [r6, #-1378]!	; 0xfffffa9e
    39b8:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    39bc:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    39c0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 388c <vscan+0x2f4>
    39c4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    39c8:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    39cc:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    39d0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    39d4:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    39d8:	646f4d68 	strbtvs	r4, [pc], #-3432	; 39e0 <NOROM_OSCClockSourceSet+0x18>
    39dc:	006e4565 	rsbeq	r4, lr, r5, ror #10
    39e0:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    39e4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    39e8:	64645664 	strbtvs	r5, [r4], #-1636	; 0xfffff99c
    39ec:	6c615672 	stclvs	6, cr5, [r1], #-456	; 0xfffffe38
    39f0:	646f6d00 	strbtvs	r6, [pc], #-3328	; 39f8 <NOROM_OSCClockSourceSet+0x30>
    39f4:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    39f8:	75003166 	strvc	r3, [r0, #-358]	; 0xfffffe9a
    39fc:	46323369 	ldrtmi	r3, [r2], -r9, ror #6
    3a00:	31676663 	cmncc	r7, r3, ror #12
    3a04:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3a08:	4f4e0065 	svcmi	0x004e0065
    3a0c:	5f4d4f52 	svcpl	0x004d4f52
    3a10:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3a14:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3a18:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3a1c:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3a20:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3a24:	69624966 	stmdbvs	r2!, {r1, r2, r5, r6, r8, fp, lr}^
    3a28:	68747361 	ldmdavs	r4!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    3a2c:	006d7265 	rsbeq	r7, sp, r5, ror #4
    3a30:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    3a34:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3a38:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    3a3c:	4d685363 	stclmi	3, cr5, [r8, #-396]!	; 0xfffffe74
    3a40:	4565646f 	strbmi	r6, [r5, #-1135]!	; 0xfffffb91
    3a44:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    3a48:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    3a4c:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    3a50:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    3a54:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    3a58:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3a5c:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3a60:	63734f31 	cmnvs	r3, #49, 30	; 0xc4
    3a64:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    3a68:	6c626400 	cfstrdvs	mvd6, [r2], #-0
    3a6c:	6f6f4c72 	svcvs	0x006f4c72
    3a70:	6c694670 	stclvs	6, cr4, [r9], #-448	; 0xfffffe40
    3a74:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
    3a78:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3a7c:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    3a80:	56656761 	strbtpl	r6, [r5], -r1, ror #14
    3a84:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3a88:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    3a8c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3a90:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3a94:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    3a98:	616c7567 	cmnvs	ip, r7, ror #10
    3a9c:	41726f74 	cmnmi	r2, r4, ror pc
    3aa0:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    3aa4:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    3aa8:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    3aac:	61566f69 	cmpvs	r6, r9, ror #30
    3ab0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3ab4:	61696269 	cmnvs	r9, r9, ror #4
    3ab8:	696e4973 	stmdbvs	lr!, {r0, r1, r4, r5, r6, r8, fp, lr}^
    3abc:	4f4e0074 	svcmi	0x004e0074
    3ac0:	5f4d4f52 	svcpl	0x004d4f52
    3ac4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3ac8:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    3acc:	526e6f41 	rsbpl	r6, lr, #260	; 0x104
    3ad0:	75536374 	ldrbvc	r6, [r3, #-884]	; 0xfffffc8c
    3ad4:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    3ad8:	00636e49 	rsbeq	r6, r3, r9, asr #28
    3adc:	4f524f4e 	svcmi	0x00524f4e
    3ae0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3ae4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3ae8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3aec:	6f466d69 	svcvs	0x00466d69
    3af0:	706d4172 	rsbvc	r4, sp, r2, ror r1
    3af4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    3af8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3afc:	33697500 	cmncc	r9, #0, 10
    3b00:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    3b04:	52664863 	rsbpl	r4, r6, #6488064	; 0x630000
    3b08:	7500776f 	strvc	r7, [r0, #-1903]	; 0xfffff891
    3b0c:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3b10:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3b14:	6c6f4366 	stclvs	3, cr4, [pc], #-408	; 3984 <NOROM_AONRTCCurrentCompareValueGet+0x4>
    3b18:	524f4e00 	subpl	r4, pc, #0, 28
    3b1c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3b20:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3b24:	56746553 			; <UNDEFINED> instruction: 0x56746553
    3b28:	4c726464 	cfldrdmi	mvd6, [r2], #-400	; 0xfffffe70
    3b2c:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    3b30:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    3b34:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3b38:	00776152 	rsbseq	r6, r7, r2, asr r1
    3b3c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3b40:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3b44:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3b48:	33690065 	cmncc	r9, #101	; 0x65
    3b4c:	73754332 	cmnvc	r5, #-939524096	; 0xc8000000
    3b50:	656d6f74 	strbvs	r6, [sp, #-3956]!	; 0xfffff08c
    3b54:	6c654472 	cfstrdvs	mvd4, [r5], #-456	; 0xfffffe38
    3b58:	64416174 	strbvs	r6, [r1], #-372	; 0xfffffe8c
    3b5c:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    3b60:	32336900 	eorscc	r6, r3, #0, 18
    3b64:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    3b68:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3b6c:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    3b70:	76006174 			; <UNDEFINED> instruction: 0x76006174
    3b74:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    3b78:	416d6972 	smcmi	54930	; 0xd692
    3b7c:	65767463 	ldrbvs	r7, [r6, #-1123]!	; 0xfffffb9d
    3b80:	72756300 	rsbsvc	r6, r5, #0, 6
    3b84:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3b88:	66696400 	strbtvs	r6, [r9], -r0, lsl #8
    3b8c:	64645666 	strbtvs	r5, [r4], #-1638	; 0xfffff99a
    3b90:	74634172 	strbtvc	r4, [r3], #-370	; 0xfffffe8e
    3b94:	53657669 	cmnpl	r5, #110100480	; 0x6900000
    3b98:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3b9c:	63727000 	cmnvs	r2, #0
    3ba0:	6d61526d 	sfmvs	f5, 2, [r1, #-436]!	; 0xfffffe4c
    3ba4:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
    3ba8:	6f69746e 	svcvs	0x0069746e
    3bac:	6f6c006e 	svcvs	0x006c006e
    3bb0:	4e006461 	cdpmi	4, 0, cr6, cr0, cr1, {3}
    3bb4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3a80 <NOROM_OSCHF_AttemptToSwitchToXosc+0x18>
    3bb8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3bbc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3bc0:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    3bc4:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
    3bc8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3bcc:	66416567 	strbvs	r6, [r1], -r7, ror #10
    3bd0:	50726574 	rsbspl	r6, r2, r4, ror r5
    3bd4:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3bd8:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3bdc:	524f4e00 	subpl	r4, pc, #0, 28
    3be0:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3be4:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3be8:	65536c72 	ldrbvs	r6, [r3, #-3186]	; 0xfffff38e
    3bec:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    3bf0:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3bf4:	66654265 	strbtvs	r4, [r5], -r5, ror #4
    3bf8:	5065726f 	rsbpl	r7, r5, pc, ror #4
    3bfc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3c00:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3c04:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3c08:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3c0c:	2f2e2e2f 	svccs	0x002e2e2f
    3c10:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3c14:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3c18:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3c1c:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    3c20:	632e6c72 			; <UNDEFINED> instruction: 0x632e6c72
    3c24:	524f4e00 	subpl	r4, pc, #0, 28
    3c28:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3c2c:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    3c30:	65526c72 	ldrbvs	r6, [r2, #-3186]	; 0xfffff38e
    3c34:	53746573 	cmnpl	r4, #482344960	; 0x1cc00000
    3c38:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    3c3c:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    3c40:	33697500 	cmncc	r9, #0, 10
    3c44:	6d6f4432 	cfstrdvs	mvd4, [pc, #-200]!	; 3b84 <NOROM_RFCRfTrimRead+0x14>
    3c48:	736e6961 	cmnvc	lr, #1589248	; 0x184000
    3c4c:	72657000 	rsbvc	r7, r5, #0
    3c50:	64700045 	ldrbtvs	r0, [r0], #-69	; 0xffffffbb
    3c54:	706d6554 	rsbvc	r6, sp, r4, asr r5
    3c58:	33697500 	cmncc	r9, #0, 10
    3c5c:	78754132 	ldmdavc	r5!, {r1, r4, r5, r8, lr}^
    3c60:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3c64:	5000736b 	andpl	r7, r0, fp, ror #6
    3c68:	444d4352 	strbmi	r4, [sp], #-850	; 0xfffffcae
    3c6c:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3c70:	616e456e 	cmnvs	lr, lr, ror #10
    3c74:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3c78:	4d726570 	cfldr64mi	mvdx6, [r2, #-448]!	; 0xfffffe40
    3c7c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    3c80:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3c84:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3c88:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3c8c:	7600646f 	strvc	r6, [r0], -pc, ror #8
    3c90:	43726464 	cmnmi	r2, #100, 8	; 0x64000000
    3c94:	75007061 	strvc	r7, [r0, #-97]	; 0xffffff9f
    3c98:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    3c9c:	70007864 	andvc	r7, r0, r4, ror #16
    3ca0:	61745364 	cmnvs	r4, r4, ror #6
    3ca4:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
    3ca8:	65676e6f 	strbvs	r6, [r7, #-3695]!	; 0xfffff191
    3cac:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
    3cb0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3cb4:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    3cb8:	646f6972 	strbtvs	r6, [pc], #-2418	; 3cc0 <NOROM_RFCRTrim>
    3cbc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    3cc0:	64566174 	ldrbvs	r6, [r6], #-372	; 0xfffffe8c
    3cc4:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    3cc8:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    3ccc:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3cd0:	54746162 	ldrbtpl	r6, [r4], #-354	; 0xfffffe9e
    3cd4:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    3cd8:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    3cdc:	736f7800 	cmnvc	pc, #0, 16
    3ce0:	776f5063 	strbvc	r5, [pc, -r3, rrx]!
    3ce4:	6f4d7265 	svcvs	0x004d7265
    3ce8:	50006564 	andpl	r6, r0, r4, ror #10
    3cec:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
    3cf0:	4764616f 	strbmi	r6, [r4, -pc, ror #2]!
    3cf4:	73007465 	movwvc	r7, #1125	; 0x465
    3cf8:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    3cfc:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
    3d00:	7400706d 	strvc	r7, [r0], #-109	; 0xffffff93
    3d04:	6c654463 	cfstrdvs	mvd4, [r5], #-396	; 0xfffffe74
    3d08:	67006174 	smlsdxvs	r0, r4, r1, r6
    3d0c:	6975705f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    3d10:	6f4d3233 	svcvs	0x004d3233
    3d14:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    3d18:	63004743 	movwvs	r4, #1859	; 0x743
    3d1c:	74537275 	ldrbvc	r7, [r3], #-629	; 0xfffffd8b
    3d20:	00657461 	rsbeq	r7, r5, r1, ror #8
    3d24:	536e6f61 	cmnpl	lr, #388	; 0x184
    3d28:	74637379 	strbtvc	r7, [r3], #-889	; 0xfffffc87
    3d2c:	7277506c 	rsbsvc	r5, r7, #108	; 0x6c
    3d30:	006c7463 	rsbeq	r7, ip, r3, ror #8
    3d34:	69546470 	ldmdbvs	r4, {r4, r5, r6, sl, sp, lr}^
    3d38:	4e00656d 	cfsh32mi	mvfx6, mvfx0, #61
    3d3c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3c08 <NOROM_RFCRfTrimRead+0x98>
    3d40:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3d44:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3d48:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3d4c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
    3d50:	68747972 	ldmdavs	r4!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3d54:	00676e69 	rsbeq	r6, r7, r9, ror #28
    3d58:	6f6f4c70 	svcvs	0x006f4c70
    3d5c:	5470756b 	ldrbtpl	r7, [r0], #-1387	; 0xfffffa95
    3d60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3d64:	52647000 	rsbpl	r7, r4, #0
    3d68:	61686365 	cmnvs	r8, r5, ror #6
    3d6c:	50656772 	rsbpl	r6, r5, r2, ror r7
    3d70:	6f697265 	svcvs	0x00697265
    3d74:	6f610064 	svcvs	0x00610064
    3d78:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    3d7c:	426e6f6d 	rsbmi	r6, lr, #436	; 0x1b4
    3d80:	76007461 	strvc	r7, [r0], -r1, ror #8
    3d84:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    3d88:	536d6972 	cmnpl	sp, #1867776	; 0x1c8000
    3d8c:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3d90:	776f5000 	strbvc	r5, [pc, -r0]!
    3d94:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    3d98:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    3d9c:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    3da0:	00745f73 	rsbseq	r5, r4, r3, ror pc
    3da4:	4f524f4e 	svcmi	0x00524f4e
    3da8:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3dac:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    3db0:	43445f6c 	movtmi	r5, #20332	; 0x4f6c
    3db4:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    3db8:	61746c6f 	cmnvs	r4, pc, ror #24
    3dbc:	6f436567 	svcvs	0x00436567
    3dc0:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    3dc4:	616e6f69 	cmnvs	lr, r9, ror #30
    3dc8:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    3dcc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 3c04 <NOROM_RFCRfTrimRead+0x94>
    3dd0:	776f7000 	strbvc	r7, [pc, -r0]!
    3dd4:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    3dd8:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    3ddc:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    3de0:	52500073 	subspl	r0, r0, #115	; 0x73
    3de4:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3de8:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    3dec:	72505f54 	subsvc	r5, r0, #84, 30	; 0x150
    3df0:	6972706f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3df4:	72617465 	rsbvc	r7, r1, #1694498816	; 0x65000000
    3df8:	41500079 	cmpmi	r0, r9, ror r0
    3dfc:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3e00:	78345f45 	ldmdavc	r4!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    3e04:	48430034 	stmdami	r3, {r2, r4, r5}^
    3e08:	545f5049 	ldrbpl	r5, [pc], #-73	; 3e10 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>
    3e0c:	5f455059 	svcpl	0x00455059
    3e10:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3e14:	77003034 	smladxvc	r0, r4, r0, r3
    3e18:	72656661 	rsbvc	r6, r5, #101711872	; 0x6100000
    3e1c:	46006449 	strmi	r6, [r0], -r9, asr #8
    3e20:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3e24:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3e28:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3e2c:	7a694c5f 	bvc	1a56fb0 <__ccfg+0x1a37008>
    3e30:	524f4e00 	subpl	r4, pc, #0, 28
    3e34:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3e38:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3e3c:	5f6f666e 	svcpl	0x006f666e
    3e40:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    3e44:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3e48:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    3e4c:	4f4e0079 	svcmi	0x004e0079
    3e50:	5f4d4f52 	svcpl	0x004d4f52
    3e54:	70696843 	rsbvc	r6, r9, r3, asr #16
    3e58:	6f666e49 	svcvs	0x00666e49
    3e5c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3e60:	6b636150 	blvs	18dc3a8 <__ccfg+0x18bc400>
    3e64:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
    3e68:	00657079 	rsbeq	r7, r5, r9, ror r0
    3e6c:	4f524f4e 	svcmi	0x00524f4e
    3e70:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3e74:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3e78:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3e7c:	77487465 	strbvc	r7, [r8, -r5, ror #8]
    3e80:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    3e84:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3e88:	63617000 	cmnvs	r1, #0
    3e8c:	7079546b 	rsbsvc	r5, r9, fp, ror #8
    3e90:	68430065 	stmdavs	r3, {r0, r2, r5, r6}^
    3e94:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    3e98:	745f6570 	ldrbvc	r6, [pc], #-1392	; 3ea0 <TrimAfterColdResetWakeupFromShutDown+0x8c>
    3e9c:	52774800 	rsbspl	r4, r7, #0, 16
    3ea0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    3ea4:	5f6e6f69 	svcpl	0x006e6f69
    3ea8:	48430074 	stmdami	r3, {r2, r4, r5, r6}^
    3eac:	545f5049 	ldrbpl	r5, [pc], #-73	; 3eb4 <TrimAfterColdResetWakeupFromShutDown+0xa0>
    3eb0:	5f455059 	svcpl	0x00455059
    3eb4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3eb8:	43003031 	movwmi	r3, #49	; 0x31
    3ebc:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3ec0:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    3ec4:	00745f79 	rsbseq	r5, r4, r9, ror pc
    3ec8:	65527768 	ldrbvs	r7, [r2, #-1896]	; 0xfffff898
    3ecc:	48430076 	stmdami	r3, {r1, r2, r4, r5, r6}^
    3ed0:	545f5049 	ldrbpl	r5, [pc], #-73	; 3ed8 <TrimAfterColdResetWakeupFromShutDown+0xc4>
    3ed4:	5f455059 	svcpl	0x00455059
    3ed8:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3edc:	50003035 	andpl	r3, r0, r5, lsr r0
    3ee0:	414b4341 	cmpmi	fp, r1, asr #6
    3ee4:	575f4547 	ldrbpl	r4, [pc, -r7, asr #10]
    3ee8:	00505343 	subseq	r5, r0, r3, asr #6
    3eec:	6f6e696d 	svcvs	0x006e696d
    3ef0:	76655272 			; <UNDEFINED> instruction: 0x76655272
    3ef4:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3ef8:	5f594c49 	svcpl	0x00594c49
    3efc:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3f00:	525f7878 	subspl	r7, pc, #120, 16	; 0x780000
    3f04:	48430032 	stmdami	r3, {r1, r4, r5}^
    3f08:	545f5049 	ldrbpl	r5, [pc], #-73	; 3f10 <NOROM_SetupTrimDevice+0x28>
    3f0c:	5f455059 	svcpl	0x00455059
    3f10:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f14:	43003035 	movwmi	r3, #53	; 0x35
    3f18:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3f1c:	5f6f666e 	svcpl	0x006f666e
    3f20:	70696843 	rsbvc	r6, r9, r3, asr #16
    3f24:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    3f28:	7349796c 	movtvc	r7, #39276	; 0x996c
    3f2c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f30:	46007878 			; <UNDEFINED> instruction: 0x46007878
    3f34:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3f38:	6e555f59 	mrcvs	15, 2, r5, cr5, cr9, {2}
    3f3c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3f40:	4843006e 	stmdami	r3, {r1, r2, r3, r5, r6}^
    3f44:	545f5049 	ldrbpl	r5, [pc], #-73	; 3f4c <NOROM_SetupTrimDevice+0x64>
    3f48:	5f455059 	svcpl	0x00455059
    3f4c:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3f50:	66003032 			; <UNDEFINED> instruction: 0x66003032
    3f54:	31676663 	cmncc	r7, r3, ror #12
    3f58:	00766552 	rsbseq	r6, r6, r2, asr r5
    3f5c:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3f60:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    3f64:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    3f68:	68630078 	stmdavs	r3!, {r3, r4, r5, r6}^
    3f6c:	61467069 	cmpvs	r6, r9, rrx
    3f70:	5748006d 	strbpl	r0, [r8, -sp, rrx]
    3f74:	5f564552 	svcpl	0x00564552
    3f78:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3f7c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3f80:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3f84:	6f725031 	svcvs	0x00725031
    3f88:	6f636f74 	svcvs	0x00636f74
    3f8c:	7250006c 	subsvc	r0, r0, #108	; 0x6c
    3f90:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    3f94:	69426c6f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    3f98:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
    3f9c:	5f726f74 	svcpl	0x00726f74
    3fa0:	52500074 	subspl	r0, r0, #116	; 0x74
    3fa4:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3fa8:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    3fac:	45495f54 	strbmi	r5, [r9, #-3924]	; 0xfffff0ac
    3fb0:	385f4545 	ldmdacc	pc, {r0, r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    3fb4:	315f3230 	cmpcc	pc, r0, lsr r2	; <UNPREDICTABLE>
    3fb8:	00345f35 	eorseq	r5, r4, r5, lsr pc
    3fbc:	50494843 	subpl	r4, r9, r3, asr #16
    3fc0:	5059545f 	subspl	r5, r9, pc, asr r4
    3fc4:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    3fc8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3fcc:	5748006e 	strbpl	r0, [r8, -lr, rrx]
    3fd0:	5f564552 	svcpl	0x00564552
    3fd4:	00325f32 	eorseq	r5, r2, r2, lsr pc
    3fd8:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3fdc:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    3fe0:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    3fe4:	41500078 	cmpmi	r0, r8, ror r0
    3fe8:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3fec:	78375f45 	ldmdavc	r7!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    3ff0:	52500037 	subspl	r0, r0, #55	; 0x37
    3ff4:	434f544f 	movtmi	r5, #62543	; 0xf44f
    3ff8:	555f4c4f 	ldrbpl	r4, [pc, #-3151]	; 33b1 <__pi_vfparse+0x99>
    3ffc:	6f6e6b6e 	svcvs	0x006e6b6e
    4000:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    4004:	56455257 			; <UNDEFINED> instruction: 0x56455257
    4008:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
    400c:	524f4e00 	subpl	r4, pc, #0, 28
    4010:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    4014:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    4018:	5f6f666e 	svcpl	0x006f666e
    401c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    4020:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    4024:	00657079 	rsbeq	r7, r5, r9, ror r0
    4028:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    402c:	5f325f56 	svcpl	0x00325f56
    4030:	52500031 	subspl	r0, r0, #49	; 0x31
    4034:	434f544f 	movtmi	r5, #62543	; 0xf44f
    4038:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    403c:	4c425f54 	mcrrmi	15, 5, r5, r2, cr4
    4040:	41460045 	cmpmi	r6, r5, asr #32
    4044:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    4048:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    404c:	5f787836 	svcpl	0x00787836
    4050:	00616741 	rsbeq	r6, r1, r1, asr #14
    4054:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    4058:	5f325f56 	svcpl	0x00325f56
    405c:	68630033 	stmdavs	r3!, {r0, r1, r4, r5}^
    4060:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    4064:	43006570 	movwmi	r6, #1392	; 0x570
    4068:	5f504948 	svcpl	0x00504948
    406c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    4070:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    4074:	5f4d4f54 	svcpl	0x004d4f54
    4078:	48430030 	stmdami	r3, {r4, r5}^
    407c:	545f5049 	ldrbpl	r5, [pc], #-73	; 4084 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x7c>
    4080:	5f455059 	svcpl	0x00455059
    4084:	54535543 	ldrbpl	r5, [r3], #-1347	; 0xfffffabd
    4088:	315f4d4f 	cmpcc	pc, pc, asr #26
    408c:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    4090:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    4094:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    4098:	33363243 	teqcc	r6, #805306372	; 0x30000004
    409c:	57480030 	smlaldxpl	r0, r8, r0, r0
    40a0:	5f564552 	svcpl	0x00564552
    40a4:	00305f31 	eorseq	r5, r0, r1, lsr pc
    40a8:	4b434150 	blmi	10d45f0 <__ccfg+0x10b4648>
    40ac:	5f454741 	svcpl	0x00454741
    40b0:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    40b4:	006e776f 	rsbeq	r7, lr, pc, ror #14
    40b8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    40bc:	2f2e2e2f 	svccs	0x002e2e2f
    40c0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 40c8 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    40c4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    40c8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    40cc:	6968632f 	stmdbvs	r8!, {r0, r1, r2, r3, r5, r8, r9, sp, lr}^
    40d0:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    40d4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    40d8:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    40dc:	65735531 	ldrbvs	r5, [r3, #-1329]!	; 0xfffffacf
    40e0:	00644972 	rsbeq	r4, r4, r2, ror r9
    40e4:	70696843 	rsbvc	r6, r9, r3, asr #16
    40e8:	6f666e49 	svcvs	0x00666e49
    40ec:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    40f0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    40f4:	64496563 	strbvs	r6, [r9], #-1379	; 0xfffffa9d
    40f8:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    40fc:	646f4376 	strbtvs	r4, [pc], #-886	; 4104 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    4100:	68430065 	stmdavs	r3, {r0, r2, r5, r6}^
    4104:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    4108:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    410c:	694d7465 	stmdbvs	sp, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4110:	48726f6e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4114:	76655277 			; <UNDEFINED> instruction: 0x76655277
    4118:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    411c:	7748726f 	strbvc	r7, [r8, -pc, ror #4]
    4120:	00766552 	rsbseq	r6, r6, r2, asr r5
    4124:	4f524f4e 	svcmi	0x00524f4e
    4128:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    412c:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    4130:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    4134:	75537465 	ldrbvc	r7, [r3, #-1125]	; 0xfffffb9b
    4138:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    413c:	50646574 	rsbpl	r6, r4, r4, ror r5
    4140:	6f746f72 	svcvs	0x00746f72
    4144:	5f6c6f63 	svcpl	0x006c6f63
    4148:	50005642 	andpl	r5, r0, r2, asr #12
    414c:	414b4341 	cmpmi	fp, r1, asr #6
    4150:	575f4547 	ldrbpl	r4, [pc, -r7, asr #10]
    4154:	52454641 	subpl	r4, r5, #68157440	; 0x4100000
    4158:	43415000 	movtmi	r5, #4096	; 0x1000
    415c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    4160:	3578355f 	ldrbcc	r3, [r8, #-1375]!	; 0xfffffaa1
    4164:	63615000 	cmnvs	r1, #0
    4168:	6567616b 	strbvs	r6, [r7, #-363]!	; 0xfffffe95
    416c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    4170:	4300745f 	movwmi	r7, #1119	; 0x45f
    4174:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    4178:	5f6f666e 	svcpl	0x006f666e
    417c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    4180:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    4184:	73496e6f 	movtvc	r6, #40559	; 0x9e6f
    4188:	4554475f 	ldrbmi	r4, [r4, #-1887]	; 0xfffff8a1
    418c:	5f325f51 	svcpl	0x00325f51
    4190:	68430030 	stmdavs	r3, {r4, r5}^
    4194:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    4198:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    419c:	73557465 	cmpvc	r5, #1694498816	; 0x65000000
    41a0:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    41a4:	33697500 	cmncc	r9, #0, 10
    41a8:	67655232 			; <UNDEFINED> instruction: 0x67655232
    41ac:	524f4e00 	subpl	r4, pc, #0, 28
    41b0:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 41b8 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x8>
    41b4:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    41b8:	66746942 	ldrbtvs	r6, [r4], -r2, asr #18
    41bc:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    41c0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    41c4:	64416e00 	strbvs	r6, [r1], #-3584	; 0xfffff200
    41c8:	4e007264 	cdpmi	2, 0, cr7, cr0, cr4, {3}
    41cc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 4098 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>
    41d0:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    41d4:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    41d8:	61655274 	smcvs	21796	; 0x5524
    41dc:	526e0064 	rsbpl	r0, lr, #100	; 0x64
    41e0:	41007465 	tstmi	r0, r5, ror #8
    41e4:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    41e8:	69644469 	stmdbvs	r4!, {r0, r3, r5, r6, sl, lr}^
    41ec:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    41f0:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    41f4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    41f8:	61443631 	cmpvs	r4, r1, lsr r6
    41fc:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    4200:	57323369 	ldrpl	r3, [r2, -r9, ror #6]!
    4204:	74614472 	strbtvc	r4, [r1], #-1138	; 0xfffffb8e
    4208:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    420c:	61443233 	cmpvs	r4, r3, lsr r2
    4210:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    4214:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    4218:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    421c:	524f4e00 	subpl	r4, pc, #0, 28
    4220:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 4228 <NOROM_SetupGetTrimForRadcExtCfg+0x4>
    4224:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    4228:	66746942 	ldrbtvs	r6, [r4], -r2, asr #18
    422c:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    4230:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    4234:	446e0065 	strbtmi	r0, [lr], #-101	; 0xffffff9b
    4238:	00617461 	rsbeq	r7, r1, r1, ror #8
    423c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    4240:	006c6156 	rsbeq	r6, ip, r6, asr r1
    4244:	41787541 	cmnmi	r8, r1, asr #10
    4248:	64446964 	strbvs	r6, [r4], #-2404	; 0xfffff69c
    424c:	66615369 	strbtvs	r5, [r1], -r9, ror #6
    4250:	61655265 	cmnvs	r5, r5, ror #4
    4254:	4f4e0064 	svcmi	0x004e0064
    4258:	5f4d4f52 	svcpl	0x004d4f52
    425c:	31494444 	cmpcc	r9, r4, asr #8
    4260:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    4264:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    4268:	2f2e0065 	svccs	0x002e0065
    426c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4270:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4274:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4278:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    427c:	642f6269 	strtvs	r6, [pc], #-617	; 4284 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc>
    4280:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    4284:	33697500 	cmncc	r9, #0, 10
    4288:	67655232 			; <UNDEFINED> instruction: 0x67655232
    428c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    4290:	69536e00 	ldmdbvs	r3, {r9, sl, fp, sp, lr}^
    4294:	5f00657a 	svcpl	0x0000657a
    4298:	756e5f43 	strbvc	r5, [lr, #-3907]!	; 0xfffff0bd
    429c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    42a0:	6f6c5f63 	svcvs	0x006c5f63
    42a4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    42a8:	72756300 	rsbsvc	r6, r5, #0, 6
    42ac:	636e6572 	cmnvs	lr, #478150656	; 0x1c800000
    42b0:	79735f79 	ldmdbvc	r3!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    42b4:	6c6f626d 	sfmvs	f6, 2, [pc], #-436	; 4108 <NOROM_SetupGetTrimForAnabypassValue1+0x54>
    42b8:	79746300 	ldmdbvc	r4!, {r8, r9, sp, lr}^
    42bc:	705f6570 	subsvc	r6, pc, r0, ror r5	; <UNPREDICTABLE>
    42c0:	64007274 	strvs	r7, [r0], #-628	; 0xfffffd8c
    42c4:	00307473 	eorseq	r7, r0, r3, ror r4
    42c8:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    42cc:	5f64656e 	svcpl	0x0064656e
    42d0:	00747364 	rsbseq	r7, r4, r4, ror #6
    42d4:	5f746e69 	svcpl	0x00746e69
    42d8:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    42dc:	79625f70 	stmdbvc	r2!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    42e0:	6170735f 	cmnvs	r0, pc, asr r3
    42e4:	6c006563 	cfstr32vs	mvfx6, [r0], {99}	; 0x63
    42e8:	766e6f63 	strbtvc	r6, [lr], -r3, ror #30
    42ec:	6b6a6300 	blvs	1a9cef4 <__ccfg+0x1a7cf4c>
    42f0:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    42f4:	636c0067 	cmnvs	ip, #103	; 0x67
    42f8:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    42fc:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    4300:	5f00545f 	svcpl	0x0000545f
    4304:	69745f43 	ldmdbvs	r4!, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    4308:	6c5f656d 	cfldr64vs	mvdx6, [pc], {109}	; 0x6d
    430c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4310:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    4314:	75635f74 	strbvc	r5, [r3, #-3956]!	; 0xfffff08c
    4318:	735f7272 	cmpvc	pc, #536870919	; 0x20000007
    431c:	6f626d79 	svcvs	0x00626d79
    4320:	636c006c 	cmnvs	ip, #108	; 0x6c
    4324:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    4328:	00545f65 	subseq	r5, r4, r5, ror #30
    432c:	5f746c61 	svcpl	0x00746c61
    4330:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    4334:	5f007374 	svcpl	0x00007374
    4338:	74635f43 	strbtvc	r5, [r3], #-3907	; 0xfffff0bd
    433c:	5f657079 	svcpl	0x00657079
    4340:	61636f6c 	cmnvs	r3, ip, ror #30
    4344:	6100656c 	tstvs	r0, ip, ror #10
    4348:	6d705f6d 	ldclvs	15, cr5, [r0, #-436]!	; 0xfffffe4c
    434c:	61726500 	cmnvs	r2, r0, lsl #10
    4350:	745f645f 	ldrbvc	r6, [pc], #-1119	; 4358 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe0>
    4354:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    4358:	736f6e00 	cmnvc	pc, #0, 28
    435c:	6c007274 	sfmvs	f7, 4, [r0], {116}	; 0x74
    4360:	6f6d5f63 	svcvs	0x006d5f63
    4364:	6174656e 	cmnvs	r4, lr, ror #10
    4368:	545f7972 	ldrbpl	r7, [pc], #-2418	; 4370 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>
    436c:	73656d00 	cmnvc	r5, #0, 26
    4370:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    4374:	646f635f 	strbtvs	r6, [pc], #-863	; 437c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>
    4378:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    437c:	74626d00 	strbtvc	r6, [r2], #-3328	; 0xfffff300
    4380:	0063776f 	rsbeq	r7, r3, pc, ror #14
    4384:	6d5f435f 	ldclvs	3, cr4, [pc, #-380]	; 4210 <NOROM_SetupGetTrimForXoscHfCtl+0x24>
    4388:	61737365 	cmnvs	r3, r5, ror #6
    438c:	5f736567 	svcpl	0x00736567
    4390:	61636f6c 	cmnvs	r3, ip, ror #30
    4394:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    4398:	705f746e 	subsvc	r7, pc, lr, ror #8
    439c:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    43a0:	6f705f6e 	svcvs	0x00705f6e
    43a4:	6d006e73 	stcvs	14, cr6, [r0, #-460]	; 0xfffffe34
    43a8:	675f6e6f 	ldrbvs	r6, [pc, -pc, ror #28]
    43ac:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    43b0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    43b4:	6d665f58 	stclvs	15, cr5, [r6, #-352]!	; 0xfffffea0
    43b8:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
    43bc:	5f705f74 	svcpl	0x00705f74
    43c0:	705f7363 	subsvc	r7, pc, r3, ror #6
    43c4:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
    43c8:	00736564 	rsbseq	r6, r3, r4, ror #10
    43cc:	5f6e6f6d 	svcpl	0x006e6f6d
    43d0:	69636564 	stmdbvs	r3!, {r2, r5, r6, r8, sl, sp, lr}^
    43d4:	5f6c616d 	svcpl	0x006c616d
    43d8:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    43dc:	5f630074 	svcpl	0x00630074
    43e0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    43e4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    43e8:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    43ec:	67656e00 	strbvs	r6, [r5, -r0, lsl #28]!
    43f0:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    43f4:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    43f8:	6d006e67 	stcvs	14, cr6, [r0, #-412]	; 0xfffffe64
    43fc:	75635f62 	strbvc	r5, [r3, #-3938]!	; 0xfffff09e
    4400:	616d5f72 	smcvs	54770	; 0xd5f2
    4404:	63770078 	cmnvs	r7, #120	; 0x78
    4408:	5f726168 	svcpl	0x00726168
    440c:	6f700074 	svcvs	0x00700074
    4410:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4414:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
    4418:	006e6769 	rsbeq	r6, lr, r9, ror #14
    441c:	70797463 	rsbsvc	r7, r9, r3, ror #8
    4420:	6f635f65 	svcvs	0x00635f65
    4424:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
    4428:	6f6c0074 	svcvs	0x006c0074
    442c:	6420676e 	strtvs	r6, [r0], #-1902	; 0xfffff892
    4430:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    4434:	6f6e0065 	svcvs	0x006e0065
    4438:	72707865 	rsbsvc	r7, r0, #6619136	; 0x650000
    443c:	665f7800 	ldrbvs	r7, [pc], -r0, lsl #16
    4440:	7300746d 	movwvc	r7, #1133	; 0x46d
    4444:	706f6275 	rsbvc	r6, pc, r5, ror r2	; <UNPREDICTABLE>
    4448:	67726174 			; <UNDEFINED> instruction: 0x67726174
    444c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4450:	735f705f 	cmpvc	pc, #95	; 0x5f
    4454:	625f7065 	subsvs	r7, pc, #101	; 0x65
    4458:	70735f79 	rsbsvc	r5, r3, r9, ror pc
    445c:	00656361 	rsbeq	r6, r5, r1, ror #6
    4460:	5f746e69 	svcpl	0x00746e69
    4464:	73635f6e 	cmnvc	r3, #440	; 0x1b8
    4468:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    446c:	65646563 	strbvs	r6, [r4, #-1379]!	; 0xfffffa9d
    4470:	2e2e0073 	mcrcs	0, 1, r0, cr14, cr3, {3}
    4474:	2f2e2e2f 	svccs	0x002e2e2f
    4478:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    447c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4480:	2f2e2e2f 	svccs	0x002e2e2f
    4484:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4488:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    448c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4490:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4494:	616d2f63 	cmnvs	sp, r3, ror #30
    4498:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    449c:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    44a0:	656d2f6d 	strbvs	r2, [sp, #-3949]!	; 0xfffff093
    44a4:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    44a8:	7574732d 	ldrbvc	r7, [r4, #-813]!	; 0xfffffcd3
    44ac:	00632e62 	rsbeq	r2, r3, r2, ror #28
    44b0:	6f5f646d 	svcvs	0x005f646d
    44b4:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
    44b8:	73657900 	cmnvc	r5, #0, 18
    44bc:	00727473 	rsbseq	r7, r2, r3, ror r4
    44c0:	65736579 	ldrbvs	r6, [r3, #-1401]!	; 0xfffffa87
    44c4:	00727078 	rsbseq	r7, r2, r8, ror r0
    44c8:	5f617265 	svcpl	0x00617265
    44cc:	6d665f64 	stclvs	15, cr5, [r6, #-400]!	; 0xfffffe70
    44d0:	636c0074 	cmnvs	ip, #116	; 0x74
    44d4:	7974635f 	ldmdbvc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    44d8:	545f6570 	ldrbpl	r6, [pc], #-1392	; 44e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xcc>
    44dc:	61726500 	cmnvs	r2, r0, lsl #10
    44e0:	665f745f 			; <UNDEFINED> instruction: 0x665f745f
    44e4:	7700746d 	strvc	r7, [r0, -sp, ror #8]
    44e8:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 4364 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xec>
    44ec:	6f6d0062 	svcvs	0x006d0062
    44f0:	68745f6e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    44f4:	6173756f 	cmnvs	r3, pc, ror #10
    44f8:	5f73646e 	svcpl	0x0073646e
    44fc:	00706573 	rsbseq	r6, r0, r3, ror r5
    4500:	6d706d61 	ldclvs	13, cr6, [r0, #-388]!	; 0xfffffe7c
    4504:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    4508:	5f636c00 	svcpl	0x00636c00
    450c:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    4510:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    4514:	7700545f 	smlsdvc	r0, pc, r4, r5	; <UNPREDICTABLE>
    4518:	646b6565 	strbtvs	r6, [fp], #-1381	; 0xfffffa9b
    451c:	5f007961 	svcpl	0x00007961
    4520:	6f6d5f43 	svcvs	0x006d5f43
    4524:	6174656e 	cmnvs	r4, lr, ror #10
    4528:	6c5f7972 	mrrcvs	9, 7, r7, pc, cr2	; <UNPREDICTABLE>
    452c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    4530:	61630065 	cmnvs	r3, r5, rrx
    4534:	6f676574 	svcvs	0x00676574
    4538:	73656972 	cmnvc	r5, #1867776	; 0x1c8000
    453c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4540:	735f6e5f 	cmpvc	pc, #1520	; 0x5f0
    4544:	5f6e6769 	svcpl	0x006e6769
    4548:	6e736f70 	mrcvs	15, 3, r6, cr3, cr0, {3}
    454c:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    4550:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    4554:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
    4558:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    455c:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
    4560:	332e3820 			; <UNDEFINED> instruction: 0x332e3820
    4564:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
    4568:	30393130 	eorscc	r3, r9, r0, lsr r1
    456c:	20333037 	eorscs	r3, r3, r7, lsr r0
    4570:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    4574:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
    4578:	675b2029 	ldrbvs	r2, [fp, -r9, lsr #32]
    457c:	382d6363 	stmdacc	sp!, {r0, r1, r5, r6, r8, r9, sp, lr}
    4580:	6172622d 	cmnvs	r2, sp, lsr #4
    4584:	2068636e 	rsbcs	r6, r8, lr, ror #6
    4588:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    458c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    4590:	33373220 	teqcc	r7, #32, 4
    4594:	5d373230 	lfmpl	f3, 4, [r7, #-192]!	; 0xffffff40
    4598:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
    459c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    45a0:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
    45a4:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
    45a8:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
    45ac:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    45b0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    45b4:	616f6c66 	cmnvs	pc, r6, ror #24
    45b8:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    45bc:	6f733d69 	svcvs	0x00733d69
    45c0:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    45c4:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    45c8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    45cc:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    45d0:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    45d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    45d8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    45dc:	20743476 	rsbscs	r3, r4, r6, ror r4
    45e0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    45e4:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    45e8:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 4458 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x44>
    45ec:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    45f0:	006e6974 	rsbeq	r6, lr, r4, ror r9
    45f4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    45f8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    45fc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4600:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    4604:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    4608:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    460c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4610:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    4614:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    4618:	2f646c69 	svccs	0x00646c69
    461c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4620:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4624:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4628:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    462c:	2f626d75 	svccs	0x00626d75
    4630:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    4634:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4638:	2f62696c 	svccs	0x0062696c
    463c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4640:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    4644:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    4648:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    464c:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    4650:	6e690030 	mcrvs	0, 3, r0, cr9, cr0, {1}
    4654:	72665f74 	rsbvc	r5, r6, #116, 30	; 0x1d0
    4658:	645f6361 	ldrbvs	r6, [pc], #-865	; 4660 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    465c:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    4660:	72730073 	rsbsvc	r0, r3, #115	; 0x73
    4664:	61003063 	tstvs	r0, r3, rrx
    4668:	6d5f746c 	cfldrdvs	mvd7, [pc, #-432]	; 44c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xac>
    466c:	68746e6f 	ldmdavs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    4670:	2f2e2e00 	svccs	0x002e2e00
    4674:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4678:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    467c:	2f2e2e2f 	svccs	0x002e2e2f
    4680:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4684:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4688:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    468c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4690:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    4694:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    4698:	6e61722f 	cdpvs	2, 6, cr7, cr1, cr15, {1}
    469c:	00632e64 	rsbeq	r2, r3, r4, ror #28
    46a0:	6e617273 	mcrvs	2, 3, r7, cr1, cr3, {3}
    46a4:	622f0064 	eorvs	r0, pc, #100	; 0x64
    46a8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    46ac:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46b0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    46b4:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    46b8:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    46bc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46c0:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    46c4:	2f302e33 	svccs	0x00302e33
    46c8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    46cc:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    46d0:	6f6e2d6d 	svcvs	0x006e2d6d
    46d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    46d8:	2f696261 	svccs	0x00696261
    46dc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    46e0:	6f6e2f62 	svcvs	0x006e2f62
    46e4:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    46e8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46ec:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    46f0:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    46f4:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    46f8:	622f0062 	eorvs	r0, pc, #98	; 0x62
    46fc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4700:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4704:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4708:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    470c:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    4710:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4714:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    4718:	2f302e33 	svccs	0x00302e33
    471c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4720:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    4724:	6f6e2d6d 	svcvs	0x006e2d6d
    4728:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    472c:	2f696261 	svccs	0x00696261
    4730:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4734:	6f6e2f62 	svcvs	0x006e2f62
    4738:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    473c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4740:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4744:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    4748:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    474c:	706d6900 	rsbvc	r6, sp, r0, lsl #18
    4750:	5f657275 	svcpl	0x00657275
    4754:	61746164 	cmnvs	r4, r4, ror #2
    4758:	2f2e2e00 	svccs	0x002e2e00
    475c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4760:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4764:	2f2e2e2f 	svccs	0x002e2e2f
    4768:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    476c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4770:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4774:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4778:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    477c:	2f746e65 	svccs	0x00746e65
    4780:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    4784:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
    4788:	52415400 	subpl	r5, r1, #0, 8
    478c:	5f544547 	svcpl	0x00544547
    4790:	5f555043 	svcpl	0x00555043
    4794:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4798:	31617865 	cmncc	r1, r5, ror #16
    479c:	726f6337 	rsbvc	r6, pc, #-603979776	; 0xdc000000
    47a0:	61786574 	cmnvs	r8, r4, ror r5
    47a4:	73690037 	cmnvc	r9, #55	; 0x37
    47a8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    47ac:	70665f74 	rsbvc	r5, r6, r4, ror pc
    47b0:	6c62645f 	cfstrdvs	mvd6, [r2], #-380	; 0xfffffe84
    47b4:	6d726100 	ldfvse	f6, [r2, #-0]
    47b8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    47bc:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    47c0:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    47c4:	52415400 	subpl	r5, r1, #0, 8
    47c8:	5f544547 	svcpl	0x00544547
    47cc:	5f555043 	svcpl	0x00555043
    47d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    47d4:	326d7865 	rsbcc	r7, sp, #6619136	; 0x650000
    47d8:	52410033 	subpl	r0, r1, #51	; 0x33
    47dc:	51455f4d 	cmppl	r5, sp, asr #30
    47e0:	52415400 	subpl	r5, r1, #0, 8
    47e4:	5f544547 	svcpl	0x00544547
    47e8:	5f555043 	svcpl	0x00555043
    47ec:	316d7261 	cmncc	sp, r1, ror #4
    47f0:	74363531 	ldrtvc	r3, [r6], #-1329	; 0xfffffacf
    47f4:	00736632 	rsbseq	r6, r3, r2, lsr r6
    47f8:	5f617369 	svcpl	0x00617369
    47fc:	5f746962 	svcpl	0x00746962
    4800:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4804:	41540062 	cmpmi	r4, r2, rrx
    4808:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    480c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4810:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4814:	61786574 	cmnvs	r8, r4, ror r5
    4818:	6f633735 	svcvs	0x00633735
    481c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4820:	00333561 	eorseq	r3, r3, r1, ror #10
    4824:	756d5f5f 	strbvc	r5, [sp, #-3935]!	; 0xfffff0a1
    4828:	3369646c 	cmncc	r9, #108, 8	; 0x6c000000
    482c:	53414200 	movtpl	r4, #4608	; 0x1200
    4830:	52415f45 	subpl	r5, r1, #276	; 0x114
    4834:	385f4843 	ldmdacc	pc, {r0, r1, r6, fp, lr}^	; <UNPREDICTABLE>
    4838:	41425f4d 	cmpmi	r2, sp, asr #30
    483c:	54004553 	strpl	r4, [r0], #-1363	; 0xfffffaad
    4840:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4844:	50435f54 	subpl	r5, r3, r4, asr pc
    4848:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    484c:	3031386d 	eorscc	r3, r1, sp, ror #16
    4850:	52415400 	subpl	r5, r1, #0, 8
    4854:	5f544547 	svcpl	0x00544547
    4858:	5f555043 	svcpl	0x00555043
    485c:	6e656778 	mcrvs	7, 3, r6, cr5, cr8, {3}
    4860:	41003165 	tstmi	r0, r5, ror #2
    4864:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4868:	415f5343 	cmpmi	pc, r3, asr #6
    486c:	53435041 	movtpl	r5, #12353	; 0x3041
    4870:	4d57495f 	vldrmi.16	s9, [r7, #-190]	; 0xffffff42	; <UNPREDICTABLE>
    4874:	0054584d 	subseq	r5, r4, sp, asr #16
    4878:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    487c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4880:	00305f48 	eorseq	r5, r0, r8, asr #30
    4884:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4888:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    488c:	00325f48 	eorseq	r5, r2, r8, asr #30
    4890:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4894:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4898:	00335f48 	eorseq	r5, r3, r8, asr #30
    489c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    48a0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    48a4:	00345f48 	eorseq	r5, r4, r8, asr #30
    48a8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    48ac:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    48b0:	00365f48 	eorseq	r5, r6, r8, asr #30
    48b4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    48b8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    48bc:	00375f48 	eorseq	r5, r7, r8, asr #30
    48c0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    48c4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    48c8:	785f5550 	ldmdavc	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    48cc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    48d0:	69680065 	stmdbvs	r8!, {r0, r2, r5, r6}^
    48d4:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    48d8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    48dc:	705f7469 	subsvc	r7, pc, r9, ror #8
    48e0:	72646572 	rsbvc	r6, r4, #478150656	; 0x1c800000
    48e4:	54007365 	strpl	r7, [r0], #-869	; 0xfffffc9b
    48e8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    48ec:	50435f54 	subpl	r5, r3, r4, asr pc
    48f0:	6f635f55 	svcvs	0x00635f55
    48f4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    48f8:	0033336d 	eorseq	r3, r3, sp, ror #6
    48fc:	74495355 	strbvc	r5, [r9], #-853	; 0xfffffcab
    4900:	00657079 	rsbeq	r7, r5, r9, ror r0
    4904:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4908:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    490c:	2f2e2e2f 	svccs	0x002e2e2f
    4910:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4860 <NOROM_ChipInfo_GetHwRevision+0x18>
    4914:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    4918:	696c2f63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    491c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4920:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    4924:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4928:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    492c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4930:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4934:	00696d64 	rsbeq	r6, r9, r4, ror #26
    4938:	5f617369 	svcpl	0x00617369
    493c:	69626f6e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4940:	41540074 	cmpmi	r4, r4, ror r0
    4944:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4948:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    494c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4950:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4954:	73667a6a 	cmnvc	r6, #434176	; 0x6a000
    4958:	61736900 	cmnvs	r3, r0, lsl #18
    495c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4960:	7066765f 	rsbvc	r7, r6, pc, asr r6
    4964:	41003276 	tstmi	r0, r6, ror r2
    4968:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    496c:	555f5343 	ldrbpl	r5, [pc, #-835]	; 4631 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xcd>
    4970:	4f4e4b4e 	svcmi	0x004e4b4e
    4974:	54004e57 	strpl	r4, [r0], #-3671	; 0xfffff1a9
    4978:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    497c:	50435f54 	subpl	r5, r3, r4, asr pc
    4980:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4984:	0065396d 	rsbeq	r3, r5, sp, ror #18
    4988:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    498c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4990:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4994:	61004a45 	tstvs	r0, r5, asr #20
    4998:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    499c:	6d736663 	ldclvs	6, cr6, [r3, #-396]!	; 0xfffffe74
    49a0:	6174735f 	cmnvs	r4, pc, asr r3
    49a4:	61006574 	tstvs	r0, r4, ror r5
    49a8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    49ac:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    49b0:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    49b4:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    49b8:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    49bc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    49c0:	73690073 	cmnvc	r9, #115	; 0x73
    49c4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    49c8:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    49cc:	5f5f0063 	svcpl	0x005f0063
    49d0:	5f7a6c63 	svcpl	0x007a6c63
    49d4:	00626174 	rsbeq	r6, r2, r4, ror r1
    49d8:	5f4d5241 	svcpl	0x004d5241
    49dc:	61004356 	tstvs	r0, r6, asr r3
    49e0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    49e4:	5f686372 	svcpl	0x00686372
    49e8:	61637378 	smcvs	14136	; 0x3738
    49ec:	4100656c 	tstmi	r0, ip, ror #10
    49f0:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    49f4:	57440045 	strbpl	r0, [r4, -r5, asr #32]
    49f8:	6f696e75 	svcvs	0x00696e75
    49fc:	5241006e 	subpl	r0, r1, #110	; 0x6e
    4a00:	53565f4d 	cmppl	r6, #308	; 0x134
    4a04:	4d524100 	ldfmie	f4, [r2, #-0]
    4a08:	0045475f 	subeq	r4, r5, pc, asr r7
    4a0c:	5f6d7261 	svcpl	0x006d7261
    4a10:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4a14:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    4a18:	61676e6f 	cmnvs	r7, pc, ror #28
    4a1c:	63006d72 	movwvs	r6, #3442	; 0xd72
    4a20:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    4a24:	66207865 	strtvs	r7, [r0], -r5, ror #16
    4a28:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    4a2c:	52415400 	subpl	r5, r1, #0, 8
    4a30:	5f544547 	svcpl	0x00544547
    4a34:	5f555043 	svcpl	0x00555043
    4a38:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a3c:	31617865 	cmncc	r1, r5, ror #16
    4a40:	41540035 	cmpmi	r4, r5, lsr r0
    4a44:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a48:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a4c:	3761665f 			; <UNDEFINED> instruction: 0x3761665f
    4a50:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    4a54:	52415400 	subpl	r5, r1, #0, 8
    4a58:	5f544547 	svcpl	0x00544547
    4a5c:	5f555043 	svcpl	0x00555043
    4a60:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a64:	31617865 	cmncc	r1, r5, ror #16
    4a68:	52410037 	subpl	r0, r1, #55	; 0x37
    4a6c:	54475f4d 	strbpl	r5, [r7], #-3917	; 0xfffff0b3
    4a70:	52415400 	subpl	r5, r1, #0, 8
    4a74:	5f544547 	svcpl	0x00544547
    4a78:	5f555043 	svcpl	0x00555043
    4a7c:	766f656e 	strbtvc	r6, [pc], -lr, ror #10
    4a80:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
    4a84:	5400316e 	strpl	r3, [r0], #-366	; 0xfffffe92
    4a88:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a8c:	50435f54 	subpl	r5, r3, r4, asr pc
    4a90:	6f635f55 	svcvs	0x00635f55
    4a94:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a98:	00663472 	rsbeq	r3, r6, r2, ror r4
    4a9c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4aa0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4aa4:	45375f48 	ldrmi	r5, [r7, #-3912]!	; 0xfffff0b8
    4aa8:	4e47004d 	cdpmi	0, 4, cr0, cr7, cr13, {2}
    4aac:	31432055 	qdaddcc	r2, r5, r3
    4ab0:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
    4ab4:	20312e32 	eorscs	r2, r1, r2, lsr lr
    4ab8:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    4abc:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
    4ac0:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    4ac4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4ac8:	5b202965 	blpl	80f064 <__ccfg+0x7ef0bc>
    4acc:	2f4d5241 	svccs	0x004d5241
    4ad0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4ad4:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    4ad8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    4adc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    4ae0:	6f697369 	svcvs	0x00697369
    4ae4:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    4ae8:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    4aec:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    4af0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4af4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    4af8:	616f6c66 	cmnvs	pc, r6, ror #24
    4afc:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    4b00:	6f733d69 	svcvs	0x00733d69
    4b04:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    4b08:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    4b0c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4b10:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    4b14:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    4b18:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4b1c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4b20:	20743476 	rsbscs	r3, r4, r6, ror r4
    4b24:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    4b28:	672d2067 	strvs	r2, [sp, -r7, rrx]!
    4b2c:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b30:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b34:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4b38:	62662d20 	rsbvs	r2, r6, #32, 26	; 0x800
    4b3c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4b40:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	; 0xfffffe5c
    4b44:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    4b48:	2d206363 	stccs	3, cr6, [r0, #-396]!	; 0xfffffe74
    4b4c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 49bc <rand>
    4b50:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    4b54:	72702d6b 	rsbsvc	r2, r0, #6848	; 0x1ac0
    4b58:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    4b5c:	20726f74 	rsbscs	r6, r2, r4, ror pc
    4b60:	6f6e662d 	svcvs	0x006e662d
    4b64:	6c6e692d 			; <UNDEFINED> instruction: 0x6c6e692d
    4b68:	20656e69 	rsbcs	r6, r5, r9, ror #28
    4b6c:	6976662d 	ldmdbvs	r6!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    4b70:	69626973 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    4b74:	7974696c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    4b78:	6469683d 	strbtvs	r6, [r9], #-2109	; 0xfffff7c3
    4b7c:	006e6564 	rsbeq	r6, lr, r4, ror #10
    4b80:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4b84:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4b88:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4b8c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4b90:	32316178 	eorscc	r6, r1, #120, 2
    4b94:	73616800 	cmnvc	r1, #0, 16
    4b98:	6c617668 	stclvs	6, cr7, [r1], #-416	; 0xfffffe60
    4b9c:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
    4ba0:	5f455341 	svcpl	0x00455341
    4ba4:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4ba8:	5a4b365f 	bpl	12d252c <__ccfg+0x12b2584>
    4bac:	61736900 	cmnvs	r3, r0, lsl #18
    4bb0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4bb4:	72610073 	rsbvc	r0, r1, #115	; 0x73
    4bb8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4bbc:	615f6863 	cmpvs	pc, r3, ror #16
    4bc0:	685f6d72 	ldmdavs	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    4bc4:	76696477 			; <UNDEFINED> instruction: 0x76696477
    4bc8:	6d726100 	ldfvse	f6, [r2, #-0]
    4bcc:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4bd0:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    4bd4:	73690063 	cmnvc	r9, #99	; 0x63
    4bd8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4bdc:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4be0:	41003631 	tstmi	r0, r1, lsr r6
    4be4:	485f4d52 	ldmdami	pc, {r1, r4, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    4be8:	73690049 	cmnvc	r9, #73	; 0x49
    4bec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4bf0:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
    4bf4:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
    4bf8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4bfc:	50435f54 	subpl	r5, r3, r4, asr pc
    4c00:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4c04:	3331316d 	teqcc	r1, #1073741851	; 0x4000001b
    4c08:	00736a36 	rsbseq	r6, r3, r6, lsr sl
    4c0c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c10:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c14:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4c18:	00386d72 	eorseq	r6, r8, r2, ror sp
    4c1c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c20:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c24:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4c28:	00396d72 	eorseq	r6, r9, r2, ror sp
    4c2c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c30:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c34:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4c38:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    4c3c:	6d726100 	ldfvse	f6, [r2, #-0]
    4c40:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4c44:	6d635f68 	stclvs	15, cr5, [r3, #-416]!	; 0xfffffe60
    4c48:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    4c4c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c50:	50435f54 	subpl	r5, r3, r4, asr pc
    4c54:	6f635f55 	svcvs	0x00635f55
    4c58:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c5c:	5400346d 	strpl	r3, [r0], #-1133	; 0xfffffb93
    4c60:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c64:	50435f54 	subpl	r5, r3, r4, asr pc
    4c68:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4c6c:	6530316d 	ldrvs	r3, [r0, #-365]!	; 0xfffffe93
    4c70:	52415400 	subpl	r5, r1, #0, 8
    4c74:	5f544547 	svcpl	0x00544547
    4c78:	5f555043 	svcpl	0x00555043
    4c7c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c80:	376d7865 	strbcc	r7, [sp, -r5, ror #16]!
    4c84:	6d726100 	ldfvse	f6, [r2, #-0]
    4c88:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    4c8c:	6f635f64 	svcvs	0x00635f64
    4c90:	41006564 	tstmi	r0, r4, ror #10
    4c94:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4c98:	415f5343 	cmpmi	pc, r3, asr #6
    4c9c:	53435041 	movtpl	r5, #12353	; 0x3041
    4ca0:	61736900 	cmnvs	r3, r0, lsl #18
    4ca4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4ca8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4cac:	325f3876 	subscc	r3, pc, #7733248	; 0x760000
    4cb0:	53414200 	movtpl	r4, #4608	; 0x1200
    4cb4:	52415f45 	subpl	r5, r1, #276	; 0x114
    4cb8:	335f4843 	cmpcc	pc, #4390912	; 0x430000
    4cbc:	4154004d 	cmpmi	r4, sp, asr #32
    4cc0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4cc4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4cc8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4ccc:	74303137 	ldrtvc	r3, [r0], #-311	; 0xfffffec9
    4cd0:	6d726100 	ldfvse	f6, [r2, #-0]
    4cd4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4cd8:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    4cdc:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    4ce0:	73690032 	cmnvc	r9, #50	; 0x32
    4ce4:	756e5f61 	strbvc	r5, [lr, #-3937]!	; 0xfffff09f
    4ce8:	69625f6d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4cec:	54007374 	strpl	r7, [r0], #-884	; 0xfffffc8c
    4cf0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4cf4:	50435f54 	subpl	r5, r3, r4, asr pc
    4cf8:	6f635f55 	svcvs	0x00635f55
    4cfc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4d00:	6c70306d 	ldclvs	0, cr3, [r0], #-436	; 0xfffffe4c
    4d04:	6d737375 	ldclvs	3, cr7, [r3, #-468]!	; 0xfffffe2c
    4d08:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4d0c:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4d10:	00796c70 	rsbseq	r6, r9, r0, ror ip
    4d14:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d18:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d1c:	655f5550 	ldrbvs	r5, [pc, #-1360]	; 47d4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    4d20:	6f6e7978 	svcvs	0x006e7978
    4d24:	00316d73 	eorseq	r6, r1, r3, ror sp
    4d28:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d2c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d30:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4d34:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4d38:	32357278 	eorscc	r7, r5, #120, 4	; 0x80000007
    4d3c:	61736900 	cmnvs	r3, r0, lsl #18
    4d40:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4d44:	6964745f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    4d48:	72700076 	rsbsvc	r0, r0, #118	; 0x76
    4d4c:	72656665 	rsbvc	r6, r5, #105906176	; 0x6500000
    4d50:	6f656e5f 	svcvs	0x00656e5f
    4d54:	6f665f6e 	svcvs	0x00665f6e
    4d58:	34365f72 	ldrtcc	r5, [r6], #-3954	; 0xfffff08e
    4d5c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    4d60:	61736900 	cmnvs	r3, r0, lsl #18
    4d64:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4d68:	3170665f 	cmncc	r0, pc, asr r6
    4d6c:	6c6d6636 	stclvs	6, cr6, [sp], #-216	; 0xffffff28
    4d70:	52415400 	subpl	r5, r1, #0, 8
    4d74:	5f544547 	svcpl	0x00544547
    4d78:	5f555043 	svcpl	0x00555043
    4d7c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4d80:	33617865 	cmncc	r1, #6619136	; 0x650000
    4d84:	41540032 	cmpmi	r4, r2, lsr r0
    4d88:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d8c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d90:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4d94:	61786574 	cmnvs	r8, r4, ror r5
    4d98:	69003533 	stmdbvs	r0, {r0, r1, r4, r5, r8, sl, ip, sp}
    4d9c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4da0:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    4da4:	63363170 	teqvs	r6, #112, 2
    4da8:	00766e6f 	rsbseq	r6, r6, pc, ror #28
    4dac:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    4db0:	5f766365 	svcpl	0x00766365
    4db4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4db8:	0073676e 	rsbseq	r6, r3, lr, ror #14
    4dbc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4dc0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4dc4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4dc8:	31316d72 	teqcc	r1, r2, ror sp
    4dcc:	32743635 	rsbscc	r3, r4, #55574528	; 0x3500000
    4dd0:	41540073 	cmpmi	r4, r3, ror r0
    4dd4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4dd8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4ddc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4de0:	61786574 	cmnvs	r8, r4, ror r5
    4de4:	6f633537 	svcvs	0x00633537
    4de8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4dec:	00353561 	eorseq	r3, r5, r1, ror #10
    4df0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4df4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4df8:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4dfc:	36303661 	ldrtcc	r3, [r0], -r1, ror #12
    4e00:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4e04:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4e08:	50435f54 	subpl	r5, r3, r4, asr pc
    4e0c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4e10:	3632396d 	ldrtcc	r3, [r2], -sp, ror #18
    4e14:	00736a65 	rsbseq	r6, r3, r5, ror #20
    4e18:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4e1c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4e20:	54345f48 	ldrtpl	r5, [r4], #-3912	; 0xfffff0b8
    4e24:	61736900 	cmnvs	r3, r0, lsl #18
    4e28:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4e2c:	7972635f 	ldmdbvc	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    4e30:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
    4e34:	5f6d7261 	svcpl	0x006d7261
    4e38:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    4e3c:	5f6e695f 	svcpl	0x006e695f
    4e40:	75716573 	ldrbvc	r6, [r1, #-1395]!	; 0xfffffa8d
    4e44:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xfffff19b
    4e48:	61736900 	cmnvs	r3, r0, lsl #18
    4e4c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4e50:	0062735f 	rsbeq	r7, r2, pc, asr r3
    4e54:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4e58:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4e5c:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4e60:	73690045 	cmnvc	r9, #69	; 0x45
    4e64:	65665f61 	strbvs	r5, [r6, #-3937]!	; 0xfffff09f
    4e68:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    4e6c:	73690065 	cmnvc	r9, #101	; 0x65
    4e70:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4e74:	6d735f74 	ldclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    4e78:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4e7c:	61006c75 	tstvs	r0, r5, ror ip
    4e80:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    4e84:	5f676e61 	svcpl	0x00676e61
    4e88:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    4e8c:	6f5f7475 	svcvs	0x005f7475
    4e90:	63656a62 	cmnvs	r5, #401408	; 0x62000
    4e94:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
    4e98:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    4e9c:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
    4ea0:	6f6f685f 	svcvs	0x006f685f
    4ea4:	7369006b 	cmnvc	r9, #107	; 0x6b
    4ea8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4eac:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4eb0:	3233645f 	eorscc	r6, r3, #1593835520	; 0x5f000000
    4eb4:	4d524100 	ldfmie	f4, [r2, #-0]
    4eb8:	00454e5f 	subeq	r4, r5, pc, asr lr
    4ebc:	5f617369 	svcpl	0x00617369
    4ec0:	5f746962 	svcpl	0x00746962
    4ec4:	00386562 	eorseq	r6, r8, r2, ror #10
    4ec8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ecc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4ed0:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4ed4:	31316d72 	teqcc	r1, r2, ror sp
    4ed8:	7a6a3637 	bvc	1a927bc <__ccfg+0x1a72814>
    4edc:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    4ee0:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    4ee4:	5f726f73 	svcpl	0x00726f73
    4ee8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4eec:	6c6c6100 	stfvse	f6, [ip], #-0
    4ef0:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4ef4:	72610073 	rsbvc	r0, r1, #115	; 0x73
    4ef8:	63705f6d 	cmnvs	r0, #436	; 0x1b4
    4efc:	41420073 	hvcmi	8195	; 0x2003
    4f00:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4f04:	5f484352 	svcpl	0x00484352
    4f08:	61005435 	tstvs	r0, r5, lsr r4
    4f0c:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4f10:	34686372 	strbtcc	r6, [r8], #-882	; 0xfffffc8e
    4f14:	41540074 	cmpmi	r4, r4, ror r0
    4f18:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4f1c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4f20:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4f24:	61786574 	cmnvs	r8, r4, ror r5
    4f28:	6f633637 	svcvs	0x00633637
    4f2c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f30:	00353561 	eorseq	r3, r5, r1, ror #10
    4f34:	5f6d7261 	svcpl	0x006d7261
    4f38:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4f3c:	7562775f 	strbvc	r7, [r2, #-1887]!	; 0xfffff8a1
    4f40:	74680066 	strbtvc	r0, [r8], #-102	; 0xffffff9a
    4f44:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    4f48:	00687361 	rsbeq	r7, r8, r1, ror #6
    4f4c:	5f617369 	svcpl	0x00617369
    4f50:	5f746962 	svcpl	0x00746962
    4f54:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    4f58:	6f6e5f6b 	svcvs	0x006e5f6b
    4f5c:	6c6f765f 	stclvs	6, cr7, [pc], #-380	; 4de8 <__aeabi_lmul+0x3f4>
    4f60:	6c697461 	cfstrdvs	mvd7, [r9], #-388	; 0xfffffe7c
    4f64:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
    4f68:	52415400 	subpl	r5, r1, #0, 8
    4f6c:	5f544547 	svcpl	0x00544547
    4f70:	5f555043 	svcpl	0x00555043
    4f74:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f78:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4f7c:	52415400 	subpl	r5, r1, #0, 8
    4f80:	5f544547 	svcpl	0x00544547
    4f84:	5f555043 	svcpl	0x00555043
    4f88:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f8c:	316d7865 	cmncc	sp, r5, ror #16
    4f90:	52415400 	subpl	r5, r1, #0, 8
    4f94:	5f544547 	svcpl	0x00544547
    4f98:	5f555043 	svcpl	0x00555043
    4f9c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4fa0:	336d7865 	cmncc	sp, #6619136	; 0x650000
    4fa4:	61736900 	cmnvs	r3, r0, lsl #18
    4fa8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4fac:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4fb0:	315f3876 	cmpcc	pc, r6, ror r8	; <UNPREDICTABLE>
    4fb4:	6d726100 	ldfvse	f6, [r2, #-0]
    4fb8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4fbc:	616e5f68 	cmnvs	lr, r8, ror #30
    4fc0:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    4fc4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fc8:	615f7469 	cmpvs	pc, r9, ror #8
    4fcc:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fd0:	6900335f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
    4fd4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fd8:	615f7469 	cmpvs	pc, r9, ror #8
    4fdc:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4fe0:	6900345f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
    4fe4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4fe8:	615f7469 	cmpvs	pc, r9, ror #8
    4fec:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4ff0:	5400355f 	strpl	r3, [r0], #-1375	; 0xfffffaa1
    4ff4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4ff8:	50435f54 	subpl	r5, r3, r4, asr pc
    4ffc:	6f635f55 	svcvs	0x00635f55
    5000:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5004:	00333561 	eorseq	r3, r3, r1, ror #10
    5008:	47524154 			; <UNDEFINED> instruction: 0x47524154
    500c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5010:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5014:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5018:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    501c:	52415400 	subpl	r5, r1, #0, 8
    5020:	5f544547 	svcpl	0x00544547
    5024:	5f555043 	svcpl	0x00555043
    5028:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    502c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    5030:	41540037 	cmpmi	r4, r7, lsr r0
    5034:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5038:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    503c:	63706d5f 	cmnvs	r0, #6080	; 0x17c0
    5040:	0065726f 	rsbeq	r7, r5, pc, ror #4
    5044:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5048:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    504c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5050:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    5054:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    5058:	5f6d7261 	svcpl	0x006d7261
    505c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5060:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 5068 <__aeabi_lmul+0x674>
    5064:	4154006d 	cmpmi	r4, sp, rrx
    5068:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    506c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5070:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5074:	36323031 			; <UNDEFINED> instruction: 0x36323031
    5078:	00736a65 	rsbseq	r6, r3, r5, ror #20
    507c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5080:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5084:	4a365f48 	bmi	d9cdac <__ccfg+0xd7ce04>
    5088:	53414200 	movtpl	r4, #4608	; 0x1200
    508c:	52415f45 	subpl	r5, r1, #276	; 0x114
    5090:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    5094:	4142004b 	cmpmi	r2, fp, asr #32
    5098:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    509c:	5f484352 	svcpl	0x00484352
    50a0:	69004d36 	stmdbvs	r0, {r1, r2, r4, r5, r8, sl, fp, lr}
    50a4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    50a8:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    50ac:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    50b0:	41540074 	cmpmi	r4, r4, ror r0
    50b4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    50b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    50bc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    50c0:	36333131 			; <UNDEFINED> instruction: 0x36333131
    50c4:	0073666a 	rsbseq	r6, r3, sl, ror #12
    50c8:	5f4d5241 	svcpl	0x004d5241
    50cc:	4100534c 	tstmi	r0, ip, asr #6
    50d0:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    50d4:	41420054 	qdaddmi	r0, r4, r2
    50d8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    50dc:	5f484352 	svcpl	0x00484352
    50e0:	41005a36 	tstmi	r0, r6, lsr sl
    50e4:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    50e8:	415f5343 	cmpmi	pc, r3, asr #6
    50ec:	53435041 	movtpl	r5, #12353	; 0x3041
    50f0:	5046565f 	subpl	r5, r6, pc, asr r6
    50f4:	52415400 	subpl	r5, r1, #0, 8
    50f8:	5f544547 	svcpl	0x00544547
    50fc:	5f555043 	svcpl	0x00555043
    5100:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    5104:	00327478 	eorseq	r7, r2, r8, ror r4
    5108:	5f617369 	svcpl	0x00617369
    510c:	5f746962 	svcpl	0x00746962
    5110:	6e6f656e 	cdpvs	5, 6, cr6, cr15, cr14, {3}
    5114:	6d726100 	ldfvse	f6, [r2, #-0]
    5118:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    511c:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    5120:	73690072 	cmnvc	r9, #114	; 0x72
    5124:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5128:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    512c:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0xfffff993
    5130:	4154006d 	cmpmi	r4, sp, rrx
    5134:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5138:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    513c:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    5140:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    5144:	52415400 	subpl	r5, r1, #0, 8
    5148:	5f544547 	svcpl	0x00544547
    514c:	5f555043 	svcpl	0x00555043
    5150:	7672616d 	ldrbtvc	r6, [r2], -sp, ror #2
    5154:	5f6c6c65 	svcpl	0x006c6c65
    5158:	00346a70 	eorseq	r6, r4, r0, ror sl
    515c:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    5160:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    5164:	6f705f68 	svcvs	0x00705f68
    5168:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    516c:	72610072 	rsbvc	r0, r1, #114	; 0x72
    5170:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    5174:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
    5178:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    517c:	39615f78 	stmdbcc	r1!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5180:	61736900 	cmnvs	r3, r0, lsl #18
    5184:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5188:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    518c:	3274786d 	rsbscc	r7, r4, #7143424	; 0x6d0000
    5190:	52415400 	subpl	r5, r1, #0, 8
    5194:	5f544547 	svcpl	0x00544547
    5198:	5f555043 	svcpl	0x00555043
    519c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    51a0:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    51a4:	726f6332 	rsbvc	r6, pc, #-939524096	; 0xc8000000
    51a8:	61786574 	cmnvs	r8, r4, ror r5
    51ac:	69003335 	stmdbvs	r0, {r0, r2, r4, r5, r8, r9, ip, sp}
    51b0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    51b4:	745f7469 	ldrbvc	r7, [pc], #-1129	; 51bc <__pi_hex_enc_table+0x2b>
    51b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    51bc:	41420032 	cmpmi	r2, r2, lsr r0
    51c0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    51c4:	5f484352 	svcpl	0x00484352
    51c8:	69004137 	stmdbvs	r0, {r0, r1, r2, r4, r5, r8, lr}
    51cc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    51d0:	645f7469 	ldrbvs	r7, [pc], #-1129	; 51d8 <__pi_hex_enc_table+0x47>
    51d4:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
    51d8:	6100646f 	tstvs	r0, pc, ror #8
    51dc:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    51e0:	5f363170 	svcpl	0x00363170
    51e4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    51e8:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 51f0 <__pi_hex_enc_table+0x5f>
    51ec:	52410065 	subpl	r0, r1, #101	; 0x65
    51f0:	494d5f4d 	stmdbmi	sp, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    51f4:	6d726100 	ldfvse	f6, [r2, #-0]
    51f8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    51fc:	006b3668 	rsbeq	r3, fp, r8, ror #12
    5200:	5f6d7261 	svcpl	0x006d7261
    5204:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5208:	42006d36 	andmi	r6, r0, #3456	; 0xd80
    520c:	5f455341 	svcpl	0x00455341
    5210:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    5214:	0052375f 	subseq	r3, r2, pc, asr r7
    5218:	6f705f5f 	svcvs	0x00705f5f
    521c:	756f6370 	strbvc	r6, [pc, #-880]!	; 4eb4 <__aeabi_lmul+0x4c0>
    5220:	745f746e 	ldrbvc	r7, [pc], #-1134	; 5228 <__pi_hex_enc_table+0x97>
    5224:	2f006261 	svccs	0x00006261
    5228:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    522c:	63672f64 	cmnvs	r7, #100, 30	; 0x190
    5230:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5234:	6f6e2d6d 	svcvs	0x006e2d6d
    5238:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    523c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5240:	6b396c47 	blvs	e60364 <__ccfg+0xe403bc>
    5244:	672f3954 			; <UNDEFINED> instruction: 0x672f3954
    5248:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    524c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5250:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5254:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5258:	322d392d 	eorcc	r3, sp, #737280	; 0xb4000
    525c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    5260:	622f3471 	eorvs	r3, pc, #1895825408	; 0x71000000
    5264:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    5268:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    526c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5270:	61652d65 	cmnvs	r5, r5, ror #26
    5274:	742f6962 	strtvc	r6, [pc], #-2402	; 527c <__button_list+0x3a>
    5278:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    527c:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    5280:	696c2f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    5284:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    5288:	61736900 	cmnvs	r3, r0, lsl #18
    528c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5290:	736d635f 	cmnvc	sp, #2080374785	; 0x7c000001
    5294:	41540065 	cmpmi	r4, r5, rrx
    5298:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    529c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    52a0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    52a4:	61786574 	cmnvs	r8, r4, ror r5
    52a8:	54003337 	strpl	r3, [r0], #-823	; 0xfffffcc9
    52ac:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    52b0:	50435f54 	subpl	r5, r3, r4, asr pc
    52b4:	65675f55 	strbvs	r5, [r7, #-3925]!	; 0xfffff0ab
    52b8:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    52bc:	61377663 	teqvs	r7, r3, ror #12
    52c0:	52415400 	subpl	r5, r1, #0, 8
    52c4:	5f544547 	svcpl	0x00544547
    52c8:	5f555043 	svcpl	0x00555043
    52cc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    52d0:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    52d4:	72610036 	rsbvc	r0, r1, #54	; 0x36
    52d8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    52dc:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    52e0:	6f765f6f 	svcvs	0x00765f6f
    52e4:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    52e8:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
    52ec:	41420065 	cmpmi	r2, r5, rrx
    52f0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    52f4:	5f484352 	svcpl	0x00484352
    52f8:	69004138 	stmdbvs	r0, {r3, r4, r5, r8, lr}
    52fc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5300:	615f7469 	cmpvs	pc, r9, ror #8
    5304:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    5308:	41420074 	hvcmi	8196	; 0x2004
    530c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    5310:	5f484352 	svcpl	0x00484352
    5314:	54005238 	strpl	r5, [r0], #-568	; 0xfffffdc8
    5318:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    531c:	50435f54 	subpl	r5, r3, r4, asr pc
    5320:	6f635f55 	svcvs	0x00635f55
    5324:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5328:	63333761 	teqvs	r3, #25427968	; 0x1840000
    532c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5330:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    5334:	4d524100 	ldfmie	f4, [r2, #-0]
    5338:	00564e5f 	subseq	r4, r6, pc, asr lr
    533c:	5f6d7261 	svcpl	0x006d7261
    5340:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5344:	72610034 	rsbvc	r0, r1, #52	; 0x34
    5348:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    534c:	00366863 	eorseq	r6, r6, r3, ror #16
    5350:	5f6d7261 	svcpl	0x006d7261
    5354:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5358:	72610037 	rsbvc	r0, r1, #55	; 0x37
    535c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5360:	00386863 	eorseq	r6, r8, r3, ror #16
    5364:	79744944 	ldmdbvc	r4!, {r2, r6, r8, fp, lr}^
    5368:	61006570 	tstvs	r0, r0, ror r5
    536c:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 5374 <patchGenfskRfe+0xb8>
    5370:	5f656e75 	svcpl	0x00656e75
    5374:	61637378 	smcvs	14136	; 0x3738
    5378:	4400656c 	strmi	r6, [r0], #-1388	; 0xfffffa94
    537c:	72747357 	rsbsvc	r7, r4, #1543503873	; 0x5c000001
    5380:	00746375 	rsbseq	r6, r4, r5, ror r3
    5384:	696b616d 	stmdbvs	fp!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5388:	635f676e 	cmpvs	pc, #28835840	; 0x1b80000
    538c:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    5390:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    5394:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    5398:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    539c:	6c61635f 	stclvs	3, cr6, [r1], #-380	; 0xfffffe84
    53a0:	69765f6c 	ldmdbvs	r6!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    53a4:	616c5f61 	cmnvs	ip, r1, ror #30
    53a8:	006c6562 	rsbeq	r6, ip, r2, ror #10
    53ac:	5f617369 	svcpl	0x00617369
    53b0:	5f746962 	svcpl	0x00746962
    53b4:	35767066 	ldrbcc	r7, [r6, #-102]!	; 0xffffff9a
    53b8:	61736900 	cmnvs	r3, r0, lsl #18
    53bc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    53c0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    53c4:	006b3676 	rsbeq	r3, fp, r6, ror r6
    53c8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53cc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53d0:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53d4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    53d8:	00376178 	eorseq	r6, r7, r8, ror r1
    53dc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53e0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53e4:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53e8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    53ec:	00386178 	eorseq	r6, r8, r8, ror r1
    53f0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53f4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53f8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    53fc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5400:	00396178 	eorseq	r6, r9, r8, ror r1
    5404:	5f4d5241 	svcpl	0x004d5241
    5408:	5f534350 	svcpl	0x00534350
    540c:	53435041 	movtpl	r5, #12353	; 0x3041
    5410:	4d524100 	ldfmie	f4, [r2, #-0]
    5414:	5343505f 	movtpl	r5, #12383	; 0x305f
    5418:	5054415f 	subspl	r4, r4, pc, asr r1
    541c:	63005343 	movwvs	r5, #835	; 0x343
    5420:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    5424:	64207865 	strtvs	r7, [r0], #-2149	; 0xfffff79b
    5428:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    542c:	41540065 	cmpmi	r4, r5, rrx
    5430:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5434:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5438:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    543c:	61786574 	cmnvs	r8, r4, ror r5
    5440:	6f633337 	svcvs	0x00633337
    5444:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5448:	00333561 	eorseq	r3, r3, r1, ror #10
    544c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5450:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5454:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5458:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    545c:	70306d78 	eorsvc	r6, r0, r8, ror sp
    5460:	0073756c 	rsbseq	r7, r3, ip, ror #10
    5464:	5f6d7261 	svcpl	0x006d7261
    5468:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    546c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5470:	785f7469 	ldmdavc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    5474:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    5478:	645f0065 	ldrbvs	r0, [pc], #-101	; 5480 <patchGenfskRfe+0x1c4>
    547c:	5f746e6f 	svcpl	0x00746e6f
    5480:	5f657375 	svcpl	0x00657375
    5484:	65657274 	strbvs	r7, [r5, #-628]!	; 0xfffffd8c
    5488:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    548c:	54005f65 	strpl	r5, [r0], #-3941	; 0xfffff09b
    5490:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5494:	50435f54 	subpl	r5, r3, r4, asr pc
    5498:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    549c:	7430316d 	ldrtvc	r3, [r0], #-365	; 0xfffffe93
    54a0:	00696d64 	rsbeq	r6, r9, r4, ror #26
    54a4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    54a8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    54ac:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    54b0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    54b4:	00356178 	eorseq	r6, r5, r8, ror r1
    54b8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    54bc:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    54c0:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
    54c4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    54c8:	72610065 	rsbvc	r0, r1, #101	; 0x65
    54cc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    54d0:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    54d4:	54006372 	strpl	r6, [r0], #-882	; 0xfffffc8e
    54d8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    54dc:	50435f54 	subpl	r5, r3, r4, asr pc
    54e0:	6f635f55 	svcvs	0x00635f55
    54e4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    54e8:	6d73316d 	ldfvse	f3, [r3, #-436]!	; 0xfffffe4c
    54ec:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    54f0:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    54f4:	00796c70 	rsbseq	r6, r9, r0, ror ip
    54f8:	5f6d7261 	svcpl	0x006d7261
    54fc:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    5500:	5f746e65 	svcpl	0x00746e65
    5504:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    5508:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    550c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    5510:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    5514:	4d524100 	ldfmie	f4, [r2, #-0]
    5518:	004c505f 	subeq	r5, ip, pc, asr r0
    551c:	5f617369 	svcpl	0x00617369
    5520:	5f746962 	svcpl	0x00746962
    5524:	76706676 			; <UNDEFINED> instruction: 0x76706676
    5528:	73690033 	cmnvc	r9, #51	; 0x33
    552c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5530:	66765f74 	uhsub16vs	r5, r6, r4
    5534:	00347670 	eorseq	r7, r4, r0, ror r6
    5538:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    553c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5540:	54365f48 	ldrtpl	r5, [r6], #-3912	; 0xfffff0b8
    5544:	41420032 	cmpmi	r2, r2, lsr r0
    5548:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    554c:	5f484352 	svcpl	0x00484352
    5550:	4d5f4d38 	ldclmi	13, cr4, [pc, #-224]	; 5478 <patchGenfskRfe+0x1bc>
    5554:	004e4941 	subeq	r4, lr, r1, asr #18
    5558:	47524154 			; <UNDEFINED> instruction: 0x47524154
    555c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5560:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5564:	74396d72 	ldrtvc	r6, [r9], #-3442	; 0xfffff28e
    5568:	00696d64 	rsbeq	r6, r9, r4, ror #26
    556c:	5f4d5241 	svcpl	0x004d5241
    5570:	42004c41 	andmi	r4, r0, #16640	; 0x4100
    5574:	5f455341 	svcpl	0x00455341
    5578:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    557c:	004d375f 	subeq	r3, sp, pc, asr r7
    5580:	5f6d7261 	svcpl	0x006d7261
    5584:	67726174 			; <UNDEFINED> instruction: 0x67726174
    5588:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    558c:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    5590:	6d726100 	ldfvse	f6, [r2, #-0]
    5594:	7261745f 	rsbvc	r7, r1, #1593835520	; 0x5f000000
    5598:	5f746567 	svcpl	0x00746567
    559c:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    55a0:	52415400 	subpl	r5, r1, #0, 8
    55a4:	5f544547 	svcpl	0x00544547
    55a8:	5f555043 	svcpl	0x00555043
    55ac:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55b0:	35727865 	ldrbcc	r7, [r2, #-2149]!	; 0xfffff79b
    55b4:	52415400 	subpl	r5, r1, #0, 8
    55b8:	5f544547 	svcpl	0x00544547
    55bc:	5f555043 	svcpl	0x00555043
    55c0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55c4:	37727865 	ldrbcc	r7, [r2, -r5, ror #16]!
    55c8:	52415400 	subpl	r5, r1, #0, 8
    55cc:	5f544547 	svcpl	0x00544547
    55d0:	5f555043 	svcpl	0x00555043
    55d4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    55d8:	38727865 	ldmdacc	r2!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    55dc:	61736900 	cmnvs	r3, r0, lsl #18
    55e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    55e4:	61706c5f 	cmnvs	r0, pc, asr ip
    55e8:	73690065 	cmnvc	r9, #101	; 0x65
    55ec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    55f0:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    55f4:	5f6b7269 	svcpl	0x006b7269
    55f8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    55fc:	007a6b36 	rsbseq	r6, sl, r6, lsr fp
    5600:	5f617369 	svcpl	0x00617369
    5604:	5f746962 	svcpl	0x00746962
    5608:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    560c:	61736900 	cmnvs	r3, r0, lsl #18
    5610:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5614:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5618:	69003476 	stmdbvs	r0, {r1, r2, r4, r5, r6, sl, ip, sp}
    561c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5620:	615f7469 	cmpvs	pc, r9, ror #8
    5624:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    5628:	61736900 	cmnvs	r3, r0, lsl #18
    562c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5630:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5634:	69003776 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, sp}
    5638:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    563c:	615f7469 	cmpvs	pc, r9, ror #8
    5640:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    5644:	6f645f00 	svcvs	0x00645f00
    5648:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 51e2 <__pi_hex_enc_table+0x51>
    564c:	725f6573 	subsvc	r6, pc, #482344960	; 0x1cc00000
    5650:	685f7874 	ldmdavs	pc, {r2, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    5654:	5f657265 	svcpl	0x00657265
    5658:	49515500 	ldmdbmi	r1, {r8, sl, ip, lr}^
    565c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5660:	61736900 	cmnvs	r3, r0, lsl #18
    5664:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5668:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    566c:	65743576 	ldrbvs	r3, [r4, #-1398]!	; 0xfffffa8a
    5670:	6d726100 	ldfvse	f6, [r2, #-0]
    5674:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    5678:	72610065 	rsbvc	r0, r1, #101	; 0x65
    567c:	70635f6d 	rsbvc	r5, r3, sp, ror #30
    5680:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
    5684:	77726574 			; <UNDEFINED> instruction: 0x77726574
    5688:	006b726f 	rsbeq	r7, fp, pc, ror #4
    568c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5690:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5694:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5698:	32396d72 	eorscc	r6, r9, #7296	; 0x1c80
    569c:	5f007430 	svcpl	0x00007430
    56a0:	0068755f 	rsbeq	r7, r8, pc, asr r5
    56a4:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    56a8:	0071655f 	rsbseq	r6, r1, pc, asr r5
    56ac:	47524154 			; <UNDEFINED> instruction: 0x47524154
    56b0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    56b4:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    56b8:	36323561 	ldrtcc	r3, [r2], -r1, ror #10
    56bc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 47c4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x40>
    56c0:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    56c4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    56c8:	745f6863 	ldrbvc	r6, [pc], #-2147	; 56d0 <patchGenfskRfe+0x414>
    56cc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    56d0:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    56d4:	68007669 	stmdavs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    56d8:	5f626174 	svcpl	0x00626174
    56dc:	705f7165 	subsvc	r7, pc, r5, ror #2
    56e0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    56e4:	61007265 	tstvs	r0, r5, ror #4
    56e8:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    56ec:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    56f0:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    56f4:	00726574 	rsbseq	r6, r2, r4, ror r5
    56f8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    56fc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5700:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5704:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5708:	73306d78 	teqvc	r0, #120, 26	; 0x1e00
    570c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5710:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    5714:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    5718:	52415400 	subpl	r5, r1, #0, 8
    571c:	5f544547 	svcpl	0x00544547
    5720:	5f555043 	svcpl	0x00555043
    5724:	6f63706d 	svcvs	0x0063706d
    5728:	6f6e6572 	svcvs	0x006e6572
    572c:	00706676 	rsbseq	r6, r0, r6, ror r6
    5730:	5f617369 	svcpl	0x00617369
    5734:	5f746962 	svcpl	0x00746962
    5738:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    573c:	6d635f6b 	stclvs	15, cr5, [r3, #-428]!	; 0xfffffe54
    5740:	646c5f33 	strbtvs	r5, [ip], #-3891	; 0xfffff0cd
    5744:	41006472 	tstmi	r0, r2, ror r4
    5748:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    574c:	72610043 	rsbvc	r0, r1, #67	; 0x43
    5750:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5754:	5f386863 	svcpl	0x00386863
    5758:	72610032 	rsbvc	r0, r1, #50	; 0x32
    575c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5760:	5f386863 	svcpl	0x00386863
    5764:	72610033 	rsbvc	r0, r1, #51	; 0x33
    5768:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    576c:	5f386863 	svcpl	0x00386863
    5770:	41540034 	cmpmi	r4, r4, lsr r0
    5774:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5778:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    577c:	706d665f 	rsbvc	r6, sp, pc, asr r6
    5780:	00363236 	eorseq	r3, r6, r6, lsr r2
    5784:	5f4d5241 	svcpl	0x004d5241
    5788:	61005343 	tstvs	r0, r3, asr #6
    578c:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    5790:	5f363170 	svcpl	0x00363170
    5794:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xfffff197
    5798:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    579c:	72610068 	rsbvc	r0, r1, #104	; 0x68
    57a0:	61625f6d 	cmnvs	r2, sp, ror #30
    57a4:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    57a8:	00686372 	rsbeq	r6, r8, r2, ror r3
    57ac:	6c765f5f 	ldclvs	15, cr5, [r6], #-380	; 0xfffffe84
    57b0:	52415400 	subpl	r5, r1, #0, 8
    57b4:	5f544547 	svcpl	0x00544547
    57b8:	5f555043 	svcpl	0x00555043
    57bc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    57c0:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    57c4:	52415400 	subpl	r5, r1, #0, 8
    57c8:	5f544547 	svcpl	0x00544547
    57cc:	5f555043 	svcpl	0x00555043
    57d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    57d4:	31617865 	cmncc	r1, r5, ror #16
    57d8:	726f6335 	rsbvc	r6, pc, #-738197504	; 0xd4000000
    57dc:	61786574 	cmnvs	r8, r4, ror r5
    57e0:	72610037 	rsbvc	r0, r1, #55	; 0x37
    57e4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    57e8:	65376863 	ldrvs	r6, [r7, #-2147]!	; 0xfffff79d
    57ec:	4154006d 	cmpmi	r4, sp, rrx
    57f0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    57f4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    57f8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    57fc:	61786574 	cmnvs	r8, r4, ror r5
    5800:	61003237 	tstvs	r0, r7, lsr r2
    5804:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    5808:	645f7363 	ldrbvs	r7, [pc], #-867	; 5810 <patchGenfskRfe+0x554>
    580c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5810:	4100746c 	tstmi	r0, ip, ror #8
    5814:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5818:	415f5343 	cmpmi	pc, r3, asr #6
    581c:	53435041 	movtpl	r5, #12353	; 0x3041
    5820:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    5824:	54004c41 	strpl	r4, [r0], #-3137	; 0xfffff3bf
    5828:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    582c:	50435f54 	subpl	r5, r3, r4, asr pc
    5830:	6f635f55 	svcvs	0x00635f55
    5834:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5838:	00353761 	eorseq	r3, r5, r1, ror #14
    583c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5840:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5844:	735f5550 	cmpvc	pc, #80, 10	; 0x14000000
    5848:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    584c:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    5850:	6d726100 	ldfvse	f6, [r2, #-0]
    5854:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5858:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    585c:	31626d75 	smccc	9941	; 0x26d5
    5860:	6d726100 	ldfvse	f6, [r2, #-0]
    5864:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5868:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    586c:	32626d75 	rsbcc	r6, r2, #7488	; 0x1d40
    5870:	52415400 	subpl	r5, r1, #0, 8
    5874:	5f544547 	svcpl	0x00544547
    5878:	5f555043 	svcpl	0x00555043
    587c:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    5880:	61007478 	tstvs	r0, r8, ror r4
    5884:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5888:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    588c:	5f5f0074 	svcpl	0x005f0074
    5890:	5f003078 	svcpl	0x00003078
    5894:	0031785f 	eorseq	r7, r1, pc, asr r8
    5898:	32785f5f 	rsbscc	r5, r8, #380	; 0x17c
    589c:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    58a0:	73690033 	cmnvc	r9, #51	; 0x33
    58a4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    58a8:	706d5f74 	rsbvc	r5, sp, r4, ror pc
    58ac:	6d726100 	ldfvse	f6, [r2, #-0]
    58b0:	5f646c5f 	svcpl	0x00646c5f
    58b4:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    58b8:	72610064 	rsbvc	r0, r1, #100	; 0x64
    58bc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    58c0:	5f386863 	svcpl	0x00386863
    58c4:	Address 0x00000000000058c4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    return node->data_base.item_array[index];
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
};
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
			nq++;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	for (b = q_first (rq); !q_end (b, rq); b = q_next (b)) {
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	if (!button_still_pressed (__button_list [pbutton]))
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (baction == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
	(*baction) (pbutton);
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
endthread
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
endthread
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm sender(struct ResponseMessage *message) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
		packet[1] = message->gid;
  f0:	61656c65 	cmnvs	r5, r5, ror #24
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
		DEBUG_PRINT("SENDING PROCEDURE");
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
		*p = message->tpe;p++;
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
		*p = message->request_number;p++;
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
		*p = message->sender_id;p++;
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
		*p = message->receiver_id;p++;
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
    return node->data_base.item_array[index];
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
};
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    return node->data_base.item_array[index];
      10:	00000034 	andeq	r0, r0, r4, lsr r0
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
};
      1c:	000000bc 	strheq	r0, [r0], -ip
      20:	83180e41 	tsthi	r8, #1040	; 0x410
      24:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
      28:	87038604 	strhi	r8, [r3, -r4, lsl #12]
      2c:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      30:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
      34:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
      38:	6d0b4200 	sfmvs	f4, 4, [fp, #-0]
      3c:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
			i = k;
      40:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
				j->Next = k;
      44:	000b4300 	andeq	r4, fp, r0, lsl #6
      48:	0000000c 	andeq	r0, r0, ip
	...
}
      54:	00000006 	andeq	r0, r0, r6
      58:	0000000c 	andeq	r0, r0, ip
	...
      64:	00000006 	andeq	r0, r0, r6
      68:	0000000c 	andeq	r0, r0, ip
	...
      74:	00000008 	andeq	r0, r0, r8
      78:	0000000c 	andeq	r0, r0, ip
      7c:	00000000 	andeq	r0, r0, r0
      80:	00000184 	andeq	r0, r0, r4, lsl #3
      84:	00000014 	andeq	r0, r0, r4, lsl r0
      88:	00000014 	andeq	r0, r0, r4, lsl r0
      8c:	00000000 	andeq	r0, r0, r0
	if (!button_still_pressed (__button_list [pbutton]))
      90:	00000198 	muleq	r0, r8, r1
      94:	00000024 	andeq	r0, r0, r4, lsr #32
      98:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (baction == NULL)
      9c:	00018e02 	andeq	r8, r1, r2, lsl #28
      a0:	00000014 	andeq	r0, r0, r4, lsl r0
	(*baction) (pbutton);
      a4:	00000000 	andeq	r0, r0, r0
endthread
      a8:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00000012 	andeq	r0, r0, r2, lsl r0
      b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
endthread
      b4:	00018e02 	andeq	r8, r1, r2, lsl #28
      b8:	0000000c 	andeq	r0, r0, ip
	...
      c4:	0000000c 	andeq	r0, r0, ip
fsm sender(struct ResponseMessage *message) {
      c8:	0000000c 	andeq	r0, r0, ip
      cc:	00000000 	andeq	r0, r0, r0
      d0:	000001ce 	andeq	r0, r0, lr, asr #3
}
      d4:	00000016 	andeq	r0, r0, r6, lsl r0
      d8:	0000000c 	andeq	r0, r0, ip
		packet = tcv_wnp(sending, sfd, 4 + packet_size); //NOTE: PUT SIZE OF MESSAGE + 4
      dc:	00000000 	andeq	r0, r0, r0
      e0:	000001e4 	andeq	r0, r0, r4, ror #3
      e4:	0000001c 	andeq	r0, r0, ip, lsl r0
      e8:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		packet[1] = message->gid;
      f4:	0000001e 	andeq	r0, r0, lr, lsl r0
		DEBUG_PRINT("SENDING PROCEDURE");
      f8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      fc:	86038504 	strhi	r8, [r3], -r4, lsl #10
		DEBUG_PRINT("I am th message GID %d", message->receiver_id);
     100:	00018e02 	andeq	r8, r1, r2, lsl #28
     104:	00000014 	andeq	r0, r0, r4, lsl r0
		*p = message->tpe;p++;
     108:	00000000 	andeq	r0, r0, r0
		*p = message->request_number;p++;
     10c:	00000200 	andeq	r0, r0, r0, lsl #4
		*p = message->sender_id;p++;
     110:	00000026 	andeq	r0, r0, r6, lsr #32
		*p = message->receiver_id;p++;
     114:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		switch(message->tpe) {
     118:	00018e02 	andeq	r8, r1, r2, lsl #28
     11c:	00000020 	andeq	r0, r0, r0, lsr #32
     120:	00000000 	andeq	r0, r0, r0
		tcv_endp(packet);
     124:	00000226 	andeq	r0, r0, r6, lsr #4
		ser_out(CONFIRM_message, "Message sent\r\n");
     128:	00000052 	andeq	r0, r0, r2, asr r0
     12c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
}
     130:	86078508 	strhi	r8, [r7], -r8, lsl #10
		finish;
     134:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     138:	8a038904 	bhi	e2550 <__ccfg+0xc25a8>
     13c:	00018e02 	andeq	r8, r1, r2, lsl #28
				strncpy(p, message->record, sizeof(message->record));
     140:	00000028 	andeq	r0, r0, r8, lsr #32
				*p = message->padding;p++;
     144:	00000000 	andeq	r0, r0, r0
				strncpy(p, message->record, sizeof(message->record));
     148:	00000278 	andeq	r0, r0, r8, ror r2
     14c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     150:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
				strncpy(p, message->record, sizeof(message->record));
     154:	86058506 	strhi	r8, [r5], -r6, lsl #10
     158:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
				strncpy(p, message->record, sizeof(message->record));
     15c:	42018e02 	andmi	r8, r1, #2, 28
				break;
     160:	a902600e 	stmdbge	r2, {r1, r2, r3, sp, lr}
				*p = message->record_index;p++;
     164:	42180e0a 	andsmi	r0, r8, #10, 28	; 0xa0
				*p = message->padding;
     168:	0000000b 	andeq	r0, r0, fp
				break;
     16c:	00000024 	andeq	r0, r0, r4, lsr #32
     170:	00000000 	andeq	r0, r0, r0
     174:	00000648 	andeq	r0, r0, r8, asr #12
     178:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
     17c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     180:	86048505 	strhi	r8, [r4], -r5, lsl #10
		node->nnodes[i] = 0;
     184:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     188:	280e4101 	stmdacs	lr, {r0, r8, lr}
     18c:	0e029f03 	cdpeq	15, 0, cr9, cr2, cr3, {0}
     190:	00000014 	andeq	r0, r0, r4, lsl r0
	for (int i=0; i<NNODE_GROUP_SIZE; i++) {
     194:	0000000c 	andeq	r0, r0, ip
bool init_node(struct Node* node){
     198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    node->id  = 0;                  // default id value 0
     19c:	7c020001 	stcvc	0, cr0, [r2], {1}
    node->index = 0;                // default entry count 0
     1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    node->data_base.item_count = 0; // default no items in array
     1a4:	0000000c 	andeq	r0, r0, ip
	reset_array(node);
     1a8:	00000194 	muleq	r0, r4, r1
    DEBUG_PRINT("Error initializing node...\n");
     1ac:	00000bfc 	strdeq	r0, [r0], -ip
     1b0:	0000000c 	andeq	r0, r0, ip
};
     1b4:	00000018 	andeq	r0, r0, r8, lsl r0
     1b8:	00000194 	muleq	r0, r4, r1
uint8_t generate_request_num(void){
     1bc:	00000c08 	andeq	r0, r0, r8, lsl #24
    return (uint8_t) (rand() % 255);
     1c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     1c4:	47080e41 	strmi	r0, [r8, -r1, asr #28]
     1c8:	41000e0a 	tstmi	r0, sl, lsl #28
}
     1cc:	0000000b 	andeq	r0, r0, fp
            node->nnodes[i] = 0; // set to null byte
     1d0:	00000018 	andeq	r0, r0, r8, lsl r0
     1d4:	00000194 	muleq	r0, r4, r1
     1d8:	00000c34 	andeq	r0, r0, r4, lsr ip
        for (int i = 0; i < NNODE_GROUP_SIZE; i++){
     1dc:	0000002a 	andeq	r0, r0, sl, lsr #32
};
     1e0:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
    if (node->data_base.item_count == 0 || node->data_base.item_array[index].data_entry == NULL){
     1e4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     1e8:	000b4204 	andeq	r4, fp, r4, lsl #4
        node->data_base.item_array[index].data_entry[0] = '\0';
     1ec:	00000018 	andeq	r0, r0, r8, lsl r0
     1f0:	00000194 	muleq	r0, r4, r1
     1f4:	00000c60 	andeq	r0, r0, r0, ror #24
        node->data_base.item_count -= 1;
     1f8:	0000003c 	andeq	r0, r0, ip, lsr r0
};
     1fc:	83100e41 	tsthi	r0, #1040	; 0x410
bool delete_all(struct Node *node){
     200:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    if (node->data_base.item_count == 0 || node->data_base.item_array[0].data_entry == NULL){
     204:	00018e02 	andeq	r8, r1, r2, lsl #28
        for(int i = 0; i <= node->data_base.item_count; i++){
     208:	00000018 	andeq	r0, r0, r8, lsl r0
            node->data_base.item_array[i].data_entry[0] = '\0';
     20c:	00000194 	muleq	r0, r4, r1
        for(int i = 0; i <= node->data_base.item_count; i++){
     210:	00000c9c 	muleq	r0, ip, ip
            node->data_base.item_array[i].timestamp = 0;
     214:	00000040 	andeq	r0, r0, r0, asr #32
        for(int i = 0; i <= node->data_base.item_count; i++){
     218:	83100e41 	tsthi	r0, #1040	; 0x410
    node->data_base.item_count = 0;
     21c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     220:	00018e02 	andeq	r8, r1, r2, lsl #28
        return true;
     224:	00000014 	andeq	r0, r0, r4, lsl r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     228:	00000194 	muleq	r0, r4, r1
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     22c:	00000000 	andeq	r0, r0, r0
struct ResponseMessage *assemble_response_message(uint16_t gid, uint8_t request_number, uint8_t sender_id, uint8_t receiver_id, uint8_t status, uint8_t padding, char rec[20]){
     230:	00000020 	andeq	r0, r0, r0, lsr #32
     234:	83080e42 	movwhi	r0, #36418	; 0x8e42
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     23c:	00000014 	andeq	r0, r0, r4, lsl r0
	response_message->tpe = RESPONSE;
     240:	00000194 	muleq	r0, r4, r1
	response_message->status = status;
     244:	00000cdc 	ldrdeq	r0, [r0], -ip
	struct ResponseMessage *response_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     248:	00000054 	andeq	r0, r0, r4, asr r0
	response_message->gid = gid;
     24c:	87080e42 	strhi	r0, [r8, -r2, asr #28]
	response_message->sender_id = sender_id;
     250:	00018e02 	andeq	r8, r1, r2, lsl #28
	response_message->status = status;
     254:	00000014 	andeq	r0, r0, r4, lsl r0
	if (!padding){
     258:	00000194 	muleq	r0, r4, r1
		response_message->padding = padding;
     25c:	00000d30 	andeq	r0, r0, r0, lsr sp
	if (rec != NULL){
     260:	00000040 	andeq	r0, r0, r0, asr #32
     264:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		strncpy(response_message->record, rec, 20);
     268:	00018e02 	andeq	r8, r1, r2, lsl #28
     26c:	00000014 	andeq	r0, r0, r4, lsl r0
     270:	00000194 	muleq	r0, r4, r1
};
     274:	00000d70 	andeq	r0, r0, r0, ror sp
fsm receiver(struct Node* node_db) {
     278:	00000028 	andeq	r0, r0, r8, lsr #32
     27c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
     284:	00000014 	andeq	r0, r0, r4, lsl r0
     288:	00000194 	muleq	r0, r4, r1
     28c:	00000d98 	muleq	r0, r8, sp
     290:	00000114 	andeq	r0, r0, r4, lsl r1
     294:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		incoming_packet = tcv_rnp(receiving, sfd);
     298:	00018e02 	andeq	r8, r1, r2, lsl #28
     29c:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a0:	00000194 	muleq	r0, r4, r1
     2a4:	00000eac 	andeq	r0, r0, ip, lsr #29
		response_message_5 = (struct ResponseMessage *)(incoming_packet+1);
     2a8:	00000050 	andeq	r0, r0, r0, asr r0
		DEBUG_PRINT("\r\nTPE: %d", response_message_5->tpe);
     2ac:	83180e41 	tsthi	r8, #1040	; 0x410
     2b0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     2b4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		switch (response_message_5->tpe){
     2b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     2bc:	00000018 	andeq	r0, r0, r8, lsl r0
     2c0:	00000194 	muleq	r0, r4, r1
     2c4:	00000efc 	strdeq	r0, [r0], -ip
     2c8:	00000054 	andeq	r0, r0, r4, asr r0
     2cc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     2d0:	86038504 	strhi	r8, [r3], -r4, lsl #10
				struct ResponseMessage *response_message_0 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     2d4:	00018e02 	andeq	r8, r1, r2, lsl #28
				struct DiscoveryRequestMessage *discovery_request_message = (struct DiscoveryRequestMessage*)(incoming_packet+1);
     2d8:	0000000c 	andeq	r0, r0, ip
				if (discovery_request_message->gid == node_db->gid){
     2dc:	00000194 	muleq	r0, r4, r1
     2e0:	00000f50 	andeq	r0, r0, r0, asr pc
					DEBUG_PRINT("\r\nSending to sender");
     2e4:	00000038 	andeq	r0, r0, r8, lsr r0
     2e8:	00000020 	andeq	r0, r0, r0, lsr #32
					DEBUG_PRINT("\r\nSending to sender");
     2ec:	00000194 	muleq	r0, r4, r1
					response_message_0->tpe = DISCOVERY_RESPONSE;
     2f0:	00000f88 	andeq	r0, r0, r8, lsl #31
					response_message_0->request_number = discovery_request_message->request_number;
     2f4:	00000110 	andeq	r0, r0, r0, lsl r1
					response_message_0->sender_id = node_db->id;
     2f8:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
					response_message_0->receiver_id = discovery_request_message->sender_id;
     2fc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
					DEBUG_PRINT("\r\nSending to sender");
     300:	87058606 	strhi	r8, [r5, -r6, lsl #12]
					call sender(response_message_0, done_case);
     304:	89038804 	stmdbhi	r3, {r2, fp, pc}
     308:	00018e02 	andeq	r8, r1, r2, lsl #28
     30c:	0000000c 	andeq	r0, r0, ip
     310:	00000194 	muleq	r0, r4, r1
     314:	00000000 	andeq	r0, r0, r0
				struct DiscoveryResponseMessage* response_message_1 = (struct DiscoveryResponseMessage*)(incoming_packet+1);
     318:	0000000c 	andeq	r0, r0, ip
				node_db->nnodes[node_db->index] = node_db->gid == response_message_1->gid && response_message_1->sender_id < NNODE_GROUP_SIZE && response_message_1->sender_id > 0 ? response_message_1->sender_id : node_db->nnodes[node_db->index];
     31c:	00000018 	andeq	r0, r0, r8, lsl r0
     320:	00000194 	muleq	r0, r4, r1
     324:	00001098 	muleq	r0, r8, r0
     328:	000000c0 	andeq	r0, r0, r0, asr #1
     32c:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     330:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     334:	00000001 	andeq	r0, r0, r1
     338:	00000018 	andeq	r0, r0, r8, lsl r0
				if (node_db->nnodes[node_db->index] == response_message_1->sender_id){
     33c:	00000194 	muleq	r0, r4, r1
					node_db->index+=1;
     340:	00001158 	andeq	r1, r0, r8, asr r1
     344:	00000044 	andeq	r0, r0, r4, asr #32
		tcv_endp(incoming_packet);
     348:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     34c:	86038504 	strhi	r8, [r3], -r4, lsl #10
		proceed receiving;
     350:	00018e02 	andeq	r8, r1, r2, lsl #28
		ser_out(response_1_create, "\r\nData Saved");
     354:	0000001c 	andeq	r0, r0, ip, lsl r0
     358:	00000194 	muleq	r0, r4, r1
		proceed receiving;
     35c:	0000119c 	muleq	r0, ip, r1
     360:	0000003c 	andeq	r0, r0, ip, lsr r0
		ser_out(response_1_delete, "\r\nRecord Deleted");
     364:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
     368:	86048505 	strhi	r8, [r4], -r5, lsl #10
		proceed receiving;
     36c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
		ser_outf(response_1_retrieve, "\r\nRecord Received from %d: %s", response_message_5->sender_id, response_message_5->record);
     370:	00000001 	andeq	r0, r0, r1
     374:	00000018 	andeq	r0, r0, r8, lsl r0
     378:	00000194 	muleq	r0, r4, r1
     37c:	000011d8 	ldrdeq	r1, [r0], -r8
     380:	000000a4 	andeq	r0, r0, r4, lsr #1
		proceed receiving;
     384:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		ser_outf(response_2, "\r\nThe record can't be saved on node %d", response_message_5->sender_id);
     388:	86038504 	strhi	r8, [r3], -r4, lsl #10
     38c:	00018e02 	andeq	r8, r1, r2, lsl #28
     390:	00000030 	andeq	r0, r0, r0, lsr r0
     394:	00000194 	muleq	r0, r4, r1
		proceed receiving;
     398:	0000127c 	andeq	r1, r0, ip, ror r2
		ser_outf(response_3, "\r\nThe record does not exists on node %d", response_message_5->sender_id);
     39c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     3a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     3a4:	86078508 	strhi	r8, [r7], -r8, lsl #10
     3a8:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
		proceed receiving;
     3ac:	8a038904 	bhi	e27c4 <__ccfg+0xc281c>
		ser_outf(response_4, "\r\nThe record does not exist on node %d", response_message_5->sender_id);
     3b0:	02018e02 	andeq	r8, r1, #2, 28
     3b4:	cace0aa2 	bgt	ff382e44 <_estack+0xdf37de44>
     3b8:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     3bc:	000ec4c5 	andeq	ip, lr, r5, asr #9
		proceed receiving;
     3c0:	00000b42 	andeq	r0, r0, r2, asr #22
		DEBUG_PRINT("ERROR: someting went wrong when receiving the packet");
     3c4:	0000000c 	andeq	r0, r0, ip
     3c8:	00000194 	muleq	r0, r4, r1
		proceed receiving;
     3cc:	00001434 	andeq	r1, r0, r4, lsr r4
}
     3d0:	00000024 	andeq	r0, r0, r4, lsr #32
     3d4:	0000000c 	andeq	r0, r0, ip
				struct ResponseMessage *response_message_2 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     3d8:	00000194 	muleq	r0, r4, r1
				struct CreateRecordMessage* create_record_message = (struct CreateRecordMessage*)(incoming_packet+1);
     3dc:	00000000 	andeq	r0, r0, r0
				if (create_record_message->receiver_id != node_db->id || create_record_message->gid != node_db->gid){
     3e0:	00000028 	andeq	r0, r0, r8, lsr #32
     3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
     3e8:	00000194 	muleq	r0, r4, r1
     3ec:	00001458 	andeq	r1, r0, r8, asr r4
					DEBUG_PRINT("\r\nDelete rec first if");
     3f0:	00000258 	andeq	r0, r0, r8, asr r2
					break;
     3f4:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
				DEBUG_PRINT("\r\nCreate rec inbetween if: Size of rec = %d", sizeof(create_record_message->record));
     3f8:	8e028b03 	vmlahi.f64	d8, d2, d3
     3fc:	180e4101 	stmdane	lr, {r0, r8, lr}
					DEBUG_PRINT("\r\nCreate rec second if");
     400:	00070d42 	andeq	r0, r7, r2, asr #26
    if (node->data_base.item_count == NUMB_OF_ENT){
     404:	00000014 	andeq	r0, r0, r4, lsl r0
     408:	00000194 	muleq	r0, r4, r1
						DEBUG_PRINT("\r\nCreate rec third if");
     40c:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
     410:	00000030 	andeq	r0, r0, r0, lsr r0
					DEBUG_PRINT("\r\nCreate rec out if");
     414:	83080e42 	movwhi	r0, #36418	; 0x8e42
     418:	00018e02 	andeq	r8, r1, r2, lsl #28
					response_message_2 = assemble_response_message(node_db->gid, create_record_message->request_number, node_db->id, create_record_message->receiver_id, status, 0, array);
     41c:	00000018 	andeq	r0, r0, r8, lsl r0
     420:	00000194 	muleq	r0, r4, r1
     424:	00000000 	andeq	r0, r0, r0
     428:	0000005c 	andeq	r0, r0, ip, asr r0
     42c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     430:	86038504 	strhi	r8, [r3], -r4, lsl #10
					DEBUG_PRINT("\r\nCreate rec sending to sender");
     434:	00018e02 	andeq	r8, r1, r2, lsl #28
					call sender(response_message_2, done_case);
     438:	00000014 	andeq	r0, r0, r4, lsl r0
						DEBUG_PRINT("\r\nCreate rec third else");
     43c:	00000194 	muleq	r0, r4, r1
     440:	000016e0 	andeq	r1, r0, r0, ror #13
				struct ResponseMessage *response_message_3 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     444:	00000060 	andeq	r0, r0, r0, rrx
     448:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				struct DeleteRecordMessage *delete_record_message = (struct DeleteRecordMessage*)(incoming_packet+1);
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
				DEBUG_PRINT("\r\nDelete rec");/*
     450:	0000000c 	andeq	r0, r0, ip
				DEBUG_PRINT("delete record gid %d\nnode_db gid %d\n delete record receiver id %d\n, node db id %d", delete_record_message->gid, node_db->gid, delete_record_message->receiver_id, node_db->id);
     454:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     458:	7c020001 	stcvc	0, cr0, [r2], {1}
     45c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     460:	00000018 	andeq	r0, r0, r8, lsl r0
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     464:	00000450 	andeq	r0, r0, r0, asr r4
     468:	00001740 	andeq	r1, r0, r0, asr #14
     46c:	0000003c 	andeq	r0, r0, ip, lsr r0
     470:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
					DEBUG_PRINT("\r\nDelete rec first if");
     474:	86038504 	strhi	r8, [r3], -r4, lsl #10
				if (delete_record_message->record_index >=0 && delete_record_message->record_index <= 40){
     478:	00018e02 	andeq	r8, r1, r2, lsl #28
     47c:	00000018 	andeq	r0, r0, r8, lsl r0
					DEBUG_PRINT("\r\nDelete rec second if");
     480:	00000450 	andeq	r0, r0, r0, asr r4
					if (delete_record(node_db, delete_record_message->record_index)){
     484:	0000177c 	andeq	r1, r0, ip, ror r7
     488:	00000080 	andeq	r0, r0, r0, lsl #1
     48c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
						DEBUG_PRINT("\r\nDelete rec third if");
     490:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
						status = (uint8_t) SUCCESS;
     494:	00000001 	andeq	r0, r0, r1
					DEBUG_PRINT("\r\nDelete assemble le response");
     498:	0000000c 	andeq	r0, r0, ip
					response_message_3 = assemble_response_message(node_db->gid, delete_record_message->request_number, node_db->id, delete_record_message->receiver_id, status, 0, array);
     49c:	00000450 	andeq	r0, r0, r0, asr r4
     4a0:	000017fc 	strdeq	r1, [r0], -ip
     4a4:	00000018 	andeq	r0, r0, r8, lsl r0
     4a8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ac:	00000450 	andeq	r0, r0, r0, asr r4
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     4b0:	00000000 	andeq	r0, r0, r0
     4b4:	00000024 	andeq	r0, r0, r4, lsr #32
						DEBUG_PRINT("\r\nDelete rec fourth if");
     4b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4c0:	00000014 	andeq	r0, r0, r4, lsl r0
     4c4:	00000450 	andeq	r0, r0, r0, asr r4
     4c8:	00001814 	andeq	r1, r0, r4, lsl r8
     4cc:	00000010 	andeq	r0, r0, r0, lsl r0
     4d0:	83080e42 	movwhi	r0, #36418	; 0x8e42
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	00000014 	andeq	r0, r0, r4, lsl r0
     4dc:	00000450 	andeq	r0, r0, r0, asr r4
     4e0:	00001824 	andeq	r1, r0, r4, lsr #16
     4e4:	0000002c 	andeq	r0, r0, ip, lsr #32
     4e8:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     4ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     4f0:	00000014 	andeq	r0, r0, r4, lsl r0
     4f4:	00000450 	andeq	r0, r0, r0, asr r4
     4f8:	00000000 	andeq	r0, r0, r0
     4fc:	0000004c 	andeq	r0, r0, ip, asr #32
     500:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     504:	00018e02 	andeq	r8, r1, r2, lsl #28
     508:	0000000c 	andeq	r0, r0, ip
     50c:	00000450 	andeq	r0, r0, r0, asr r4
     510:	00001850 	andeq	r1, r0, r0, asr r8
     514:	00000006 	andeq	r0, r0, r6
     518:	00000028 	andeq	r0, r0, r8, lsr #32
     51c:	00000450 	andeq	r0, r0, r0, asr r4
     520:	00001858 	andeq	r1, r0, r8, asr r8
     524:	000000cc 	andeq	r0, r0, ip, asr #1
     528:	83180e41 	tsthi	r8, #1040	; 0x410
     52c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     530:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				struct ResponseMessage *response_message_4 = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     534:	02018e02 	andeq	r8, r1, #2, 28
     538:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
				struct RetrieveRecordMessage *retreive_record_message = (struct RetrieveRecordMessage*)(incoming_packet+1);
     53c:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
				DEBUG_PRINT("\r\nretrieve rec");
     540:	0b42000e 	bleq	1080580 <__ccfg+0x10605d8>
				if (delete_record_message->gid != node_db->gid || delete_record_message->receiver_id != node_db->id){
     544:	00000014 	andeq	r0, r0, r4, lsl r0
     548:	00000450 	andeq	r0, r0, r0, asr r4
     54c:	00001924 	andeq	r1, r0, r4, lsr #18
     550:	00000014 	andeq	r0, r0, r4, lsl r0
     554:	83080e41 	movwhi	r0, #36417	; 0x8e41
     558:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (retreive_record_message->record_index >=0 && retreive_record_message->record_index <= 40){
     55c:	00000014 	andeq	r0, r0, r4, lsl r0
     560:	00000450 	andeq	r0, r0, r0, asr r4
     564:	00001938 	andeq	r1, r0, r8, lsr r9
    return node->data_base.item_array[index];
     568:	00000034 	andeq	r0, r0, r4, lsr r0
     56c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     570:	00018e02 	andeq	r8, r1, r2, lsl #28
     574:	00000018 	andeq	r0, r0, r8, lsl r0
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     578:	00000450 	andeq	r0, r0, r0, asr r4
    return node->data_base.item_array[index];
     57c:	0000196c 	andeq	r1, r0, ip, ror #18
					retrieved_record = retrieve_record(node_db, retreive_record_message->record_index);
     580:	00000034 	andeq	r0, r0, r4, lsr r0
     584:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     588:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
						response_message_4 = assemble_response_message(node_db->gid, retreive_record_message->request_number, node_db->id, retreive_record_message->receiver_id, status, 0, retrieved_record.data_entry);
     58c:	00000001 	andeq	r0, r0, r1
     590:	00000018 	andeq	r0, r0, r8, lsl r0
     594:	00000450 	andeq	r0, r0, r0, asr r4
     598:	00000000 	andeq	r0, r0, r0
     59c:	0000002c 	andeq	r0, r0, ip, lsr #32
     5a0:	83100e41 	tsthi	r0, #1040	; 0x410
     5a4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				response_message_5 = (struct ResponseMessage*)(incoming_packet+1);
     5a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5ac:	00000014 	andeq	r0, r0, r4, lsl r0
				DEBUG_PRINT("\r\nResponse");
     5b0:	00000450 	andeq	r0, r0, r0, asr r4
				if (response_message_5->gid != node_db->gid || response_message_5->receiver_id != node_db->id){
     5b4:	000019a0 	andeq	r1, r0, r0, lsr #19
     5b8:	00000024 	andeq	r0, r0, r4, lsr #32
     5bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     5c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c4:	00000018 	andeq	r0, r0, r8, lsl r0
     5c8:	00000450 	andeq	r0, r0, r0, asr r4
				if(!response_flag){
     5cc:	000019c4 	andeq	r1, r0, r4, asr #19
					response_flag=1;
     5d0:	00000038 	andeq	r0, r0, r8, lsr r0
					trigger(&response_flag);
     5d4:	83100e41 	tsthi	r0, #1040	; 0x410
				switch(response_message_5->status){
     5d8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e0:	0000000c 	andeq	r0, r0, ip
     5e4:	00000450 	andeq	r0, r0, r0, asr r4
     5e8:	00000000 	andeq	r0, r0, r0
						if (response_checker[0] == response_message_5->request_number){
     5ec:	00000014 	andeq	r0, r0, r4, lsl r0
     5f0:	00000014 	andeq	r0, r0, r4, lsl r0
     5f4:	00000450 	andeq	r0, r0, r0, asr r4
							switch(response_checker[1]){
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00000040 	andeq	r0, r0, r0, asr #32
     600:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     604:	00018e02 	andeq	r8, r1, r2, lsl #28
									proceed response_1_create;
     608:	00000014 	andeq	r0, r0, r4, lsl r0
						proceed response_2;
     60c:	00000450 	andeq	r0, r0, r0, asr r4
									proceed response_1_delete;
     610:	00000000 	andeq	r0, r0, r0
									proceed response_1_retrieve;
     614:	00000018 	andeq	r0, r0, r8, lsl r0
						proceed response_2;
     618:	83080e41 	movwhi	r0, #36417	; 0x8e41
						proceed response_3;
     61c:	00018e02 	andeq	r8, r1, r2, lsl #28
						proceed response_4;
     620:	0000000c 	andeq	r0, r0, ip
				DEBUG_PRINT("ERROR: received type [%d] is not legal packet type", response_message_5->tpe);
     624:	00000450 	andeq	r0, r0, r0, asr r4
     628:	000019fc 	strdeq	r1, [r0], -ip
				break;
     62c:	00000024 	andeq	r0, r0, r4, lsr #32
}
     630:	0000000c 	andeq	r0, r0, ip
     634:	00000450 	andeq	r0, r0, r0, asr r4
     638:	00000000 	andeq	r0, r0, r0
     63c:	00000020 	andeq	r0, r0, r0, lsr #32
     640:	0000000c 	andeq	r0, r0, ip
     644:	00000450 	andeq	r0, r0, r0, asr r4
fsm root {
     648:	00001a20 	andeq	r1, r0, r0, lsr #20
     64c:	0000000e 	andeq	r0, r0, lr
     650:	0000000c 	andeq	r0, r0, ip
     654:	00000450 	andeq	r0, r0, r0, asr r4
     658:	00001a2e 	andeq	r1, r0, lr, lsr #20
     65c:	00000010 	andeq	r0, r0, r0, lsl r0
     660:	0000000c 	andeq	r0, r0, ip
     664:	00000450 	andeq	r0, r0, r0, asr r4
     668:	00001a3e 	andeq	r1, r0, lr, lsr sl
     66c:	0000001c 	andeq	r0, r0, ip, lsl r0
     670:	0000000c 	andeq	r0, r0, ip
     674:	00000450 	andeq	r0, r0, r0, asr r4
     678:	00000000 	andeq	r0, r0, r0
     67c:	00000010 	andeq	r0, r0, r0, lsl r0
     680:	0000000c 	andeq	r0, r0, ip
     684:	00000450 	andeq	r0, r0, r0, asr r4
     688:	00000000 	andeq	r0, r0, r0
     68c:	00000006 	andeq	r0, r0, r6
     690:	0000000c 	andeq	r0, r0, ip
     694:	00000450 	andeq	r0, r0, r0, asr r4
		node_db = (struct Node *)umalloc(sizeof(struct Node));
     698:	00001a5a 	andeq	r1, r0, sl, asr sl
     69c:	00000014 	andeq	r0, r0, r4, lsl r0
     6a0:	0000000c 	andeq	r0, r0, ip
		init_node(node_db);
     6a4:	00000450 	andeq	r0, r0, r0, asr r4
		phys_cc1350(0, MAX_PKT_LEN);
     6a8:	00001a6e 	andeq	r1, r0, lr, ror #20
     6ac:	0000000e 	andeq	r0, r0, lr
		tcv_plug (0, &plug_null);
     6b0:	00000014 	andeq	r0, r0, r4, lsl r0
     6b4:	00000450 	andeq	r0, r0, r0, asr r4
		sfd = tcv_open (WNONE, 0, 0);
     6b8:	00001a7c 	andeq	r1, r0, ip, ror sl
     6bc:	00000024 	andeq	r0, r0, r4, lsr #32
     6c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c8:	00000020 	andeq	r0, r0, r0, lsr #32
			diag("Cannot open tcv interface");
     6cc:	00000450 	andeq	r0, r0, r0, asr r4
     6d0:	00001aa0 	andeq	r1, r0, r0, lsr #21
			halt();
     6d4:	0000009c 	muleq	r0, ip, r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
     6d8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     6dc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		runfsm receiver(node_db);
     6e0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     6e4:	89038804 	stmdbhi	r3, {r2, fp, pc}
		ser_outf(menu, "\r\nGroup %d Device #%d (%d/%d records)\r\n(G)roup ID\r\n(N)ew device ID\r\n(F)ind neighbors\r\n(C)reate record on neighbor\r\n(D)elete record on neighbor\r\n(R)etrieve record from neighbor\r\n(S)how local records\r\nR(e)set local storage\r\n\r\nSelection: ", node_db->gid, node_db->id, node_db->index, NUMB_OF_ENT);
     6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ec:	00000014 	andeq	r0, r0, r4, lsl r0
     6f0:	00000450 	andeq	r0, r0, r0, asr r4
     6f4:	00001b3c 	andeq	r1, r0, ip, lsr fp
     6f8:	00000050 	andeq	r0, r0, r0, asr r0
     6fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
		ser_inf(get_choice, "%c", &CHOICE);
     700:	00018e02 	andeq	r8, r1, r2, lsl #28
     704:	00000014 	andeq	r0, r0, r4, lsl r0
     708:	00000450 	andeq	r0, r0, r0, asr r4
		switch(CHOICE) {
     70c:	00001b8c 	andeq	r1, r0, ip, lsl #23
     710:	00000048 	andeq	r0, r0, r8, asr #32
     714:	83080e41 	movwhi	r0, #36417	; 0x8e41
     718:	00018e02 	andeq	r8, r1, r2, lsl #28
     71c:	00000014 	andeq	r0, r0, r4, lsl r0
     720:	00000450 	andeq	r0, r0, r0, asr r4
     724:	00001bd4 	ldrdeq	r1, [r0], -r4
     728:	00000050 	andeq	r0, r0, r0, asr r0
     72c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     730:	00018e02 	andeq	r8, r1, r2, lsl #28
     734:	00000020 	andeq	r0, r0, r0, lsr #32
     738:	00000450 	andeq	r0, r0, r0, asr r4
				proceed menu;
     73c:	00000000 	andeq	r0, r0, r0
     740:	00000058 	andeq	r0, r0, r8, asr r0
		ser_out(get_new_group_id, "Please provide a new group ID#: ");
     744:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     748:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		ser_inf(new_group_id, "%u", &NEW_NODE_GID); // NOTE: is this syntax correct?
     74c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     750:	89038804 	stmdbhi	r3, {r2, fp, pc}
     754:	00018e02 	andeq	r8, r1, r2, lsl #28
		DEBUG_PRINT("setting node group ID");
     758:	00000018 	andeq	r0, r0, r8, lsl r0
     75c:	00000450 	andeq	r0, r0, r0, asr r4
    node->gid = gid; 
     760:	00001c24 	andeq	r1, r0, r4, lsr #24
		if (!set_node_gid(node_db, NEW_NODE_GID)){
     764:	000000a8 	andeq	r0, r0, r8, lsr #1
    node->gid = gid; 
     768:	83100e44 	tsthi	r0, #68, 28	; 0x440
		proceed menu;
     76c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		ser_out(get_new_node_id, "\r\nPlease provide a new node ID# (1-25 inclusive): ");
     770:	00018e02 	andeq	r8, r1, r2, lsl #28
     774:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_inf(new_node_id, "%u", &NEW_NODE_ID);
     778:	00000450 	andeq	r0, r0, r0, asr r4
     77c:	00001ccc 	andeq	r1, r0, ip, asr #25
     780:	00000034 	andeq	r0, r0, r4, lsr r0
		if (!set_node_id(node_db, NEW_NODE_ID)) {
     784:	83100e41 	tsthi	r0, #1040	; 0x410
     788:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if((node_db->id < 1) || (node_db->id > 25)){
     78c:	00018e02 	andeq	r8, r1, r2, lsl #28
     790:	0000000c 	andeq	r0, r0, ip
     794:	00000450 	andeq	r0, r0, r0, asr r4
			strncpy(reason, "Out of Range", 50);
     798:	00001d00 	andeq	r1, r0, r0, lsl #26
     79c:	00000018 	andeq	r0, r0, r8, lsl r0
			proceed invalid_node_id;
     7a0:	00000014 	andeq	r0, r0, r4, lsl r0
     7a4:	00000450 	andeq	r0, r0, r0, asr r4
				strncpy(reason, "ID is already in use", 50);
     7a8:	00000000 	andeq	r0, r0, r0
		for(int i = 0; i < node_db->index; i++){
     7ac:	00000030 	andeq	r0, r0, r0, lsr r0
     7b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7b4:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed menu;
     7b8:	00000014 	andeq	r0, r0, r4, lsl r0
		ser_outf(invalid_node_id, "\r\nID#: %u, is an invalid choice. Reason: %s.", node_db->id, reason);
     7bc:	00000450 	andeq	r0, r0, r0, asr r4
     7c0:	00000000 	andeq	r0, r0, r0
     7c4:	00000038 	andeq	r0, r0, r8, lsr r0
     7c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		proceed get_new_node_id;
     7cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     7d0:	00000040 	andeq	r0, r0, r0, asr #32
		if (!clear_node_neighbour_array(node_db)){
     7d4:	00000450 	andeq	r0, r0, r0, asr r4
     7d8:	00001d18 	andeq	r1, r0, r8, lsl sp
			strncpy(reason, "Error Clearing Node Array", 50);
     7dc:	0000013c 	andeq	r0, r0, ip, lsr r1
     7e0:	80100e41 	andshi	r0, r0, r1, asr #28
     7e4:	82038104 	andhi	r8, r3, #4, 2
			proceed error;
     7e8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
		request_packet = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     7ec:	0b84380e 	bleq	fe10e82c <_estack+0xde10982c>
     7f0:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
		request_packet->gid = node_db->gid;
     7f4:	07880887 	streq	r0, [r8, r7, lsl #17]
     7f8:	058e0689 	streq	r0, [lr, #1673]	; 0x689
		request_packet->tpe = DISCOVERY_REQUEST;
     7fc:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
		request_packet->request_number = generate_request_num();
     800:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     804:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
		call sender(request_packet, wait_discovery);
     808:	c341100e 	movtgt	r1, #4110	; 0x100e
     80c:	0ec0c1c2 	acseqdm	f4, f2
		request_packet->receiver_id=0;
     810:	000b4100 	andeq	r4, fp, r0, lsl #2
		call sender(request_packet, wait_discovery);
     814:	0000000c 	andeq	r0, r0, ip
     818:	00000450 	andeq	r0, r0, r0, asr r4
     81c:	00001e54 	andeq	r1, r0, r4, asr lr
			release;
     820:	00000024 	andeq	r0, r0, r4, lsr #32
				proceed get_new_node_id;
     824:	0000000c 	andeq	r0, r0, ip
				proceed clear_neighbour_array;
     828:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				proceed create_proto_start;
     82c:	7c020001 	stcvc	0, cr0, [r2], {1}
				proceed start_delete_proto;
     830:	000d0c0e 	andeq	r0, sp, lr, lsl #24
				proceed start_retrieve_proto;
     834:	00000014 	andeq	r0, r0, r4, lsl r0
				proceed display_db;
     838:	00000824 	andeq	r0, r0, r4, lsr #16
				proceed del_local;
     83c:	00001e78 	andeq	r1, r0, r8, ror lr
			if(node_db->id == node_db->nnodes[i]){
     840:	00000016 	andeq	r0, r0, r6, lsl r0
     844:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     848:	00018e02 	andeq	r8, r1, r2, lsl #28
				strncpy(reason, "ID is already in use", 50);
     84c:	0000000c 	andeq	r0, r0, ip
     850:	00000824 	andeq	r0, r0, r4, lsr #16
				proceed invalid_node_id;
     854:	00001e8e 	andeq	r1, r0, lr, lsl #29
     858:	0000001a 	andeq	r0, r0, sl, lsl r0
		for(int i = 0; i < node_db->index; i++){
     85c:	00000018 	andeq	r0, r0, r8, lsl r0
		if (discovery_wait_flag == 0){
     860:	00000824 	andeq	r0, r0, r4, lsr #16
			discovery_wait_flag=1;
     864:	00001ea8 	andeq	r1, r0, r8, lsr #29
     868:	0000000e 	andeq	r0, r0, lr
			delay(3000, find_proto_start);
     86c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     870:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
		if (discovery_wait_flag == 1){
     874:	000ec3ce 	andeq	ip, lr, lr, asr #7
			discovery_wait_flag=0;
     878:	00000018 	andeq	r0, r0, r8, lsl r0
     87c:	00000824 	andeq	r0, r0, r4, lsr #16
			delay(3000, display_neighbour_nodes);
     880:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
     884:	0000004c 	andeq	r0, r0, ip, asr #32
     888:	83100e41 	tsthi	r0, #1040	; 0x410
     88c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     890:	00018e02 	andeq	r8, r1, r2, lsl #28
     894:	00000020 	andeq	r0, r0, r0, lsr #32
     898:	00000824 	andeq	r0, r0, r4, lsr #16
     89c:	00001f04 	andeq	r1, r0, r4, lsl #30
     8a0:	0000008c 	andeq	r0, r0, ip, lsl #1
     8a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     8a8:	5f018e02 	svcpl	0x00018e02
     8ac:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     8b0:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     8b4:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8b8:	00000020 	andeq	r0, r0, r0, lsr #32
     8bc:	00000824 	andeq	r0, r0, r4, lsr #16
     8c0:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     8c4:	00000070 	andeq	r0, r0, r0, ror r0
     8c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if(node_db->index == 0){
     8cc:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     8d0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     8d4:	430b4200 	movwmi	r4, #45568	; 0xb200
			proceed menu;
     8d8:	000ec4ce 	andeq	ip, lr, lr, asr #9
fsm root {
     8dc:	0000003c 	andeq	r0, r0, ip, lsr r0
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     8e0:	00000824 	andeq	r0, r0, r4, lsr #16
		for (int i=0; i<node_db->index; i++) {
     8e4:	00002000 	andeq	r2, r0, r0
     8e8:	000000c0 	andeq	r0, r0, r0, asr #1
     8ec:	82080e41 	andhi	r0, r8, #1040	; 0x410
		proceed menu;
     8f0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
		ser_out(create_proto_start, "Please provide a node ID (0-25): ");
     8f4:	0a84300e 	beq	fe10c934 <_estack+0xde107934>
     8f8:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
		ser_inf(get_id_for_create, "%d", &user_provided_receiver_id);
     8fc:	06880787 	streq	r0, [r8], r7, lsl #15
     900:	048a0589 	streq	r0, [sl], #1417	; 0x589
     904:	0a6b038e 	beq	1ac1744 <__ccfg+0x1aa179c>
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     908:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     90c:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
			strncpy(reason, "Error: improper ID", 50);
     910:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     914:	c2c34108 	sbcgt	r4, r3, #8, 2
     918:	0b41000e 	bleq	1040958 <__ccfg+0x10209b0>
			proceed error;
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_out(ask_for_record_to_create, "Please provide a record (length <= 20): ");
     920:	00000824 	andeq	r0, r0, r4, lsr #16
     924:	00000000 	andeq	r0, r0, r0
		ser_in(get_record_to_create, user_provided_record, 20);
     928:	0000006c 	andeq	r0, r0, ip, rrx
     92c:	83180e42 	tsthi	r8, #1056	; 0x420
     930:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		create_message = (struct ResponseMessage*)umalloc(sizeof(struct ResponseMessage));
     934:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		create_message->gid = node_db->gid;
     938:	00018e02 	andeq	r8, r1, r2, lsl #28
     93c:	0000000c 	andeq	r0, r0, ip
     940:	00000824 	andeq	r0, r0, r4, lsr #16
		create_message->tpe = CREATE_RECORD;
     944:	000020c0 	andeq	r2, r0, r0, asr #1
		create_message->request_number = generate_request_num();
     948:	00000024 	andeq	r0, r0, r4, lsr #32
		create_message->sender_id = node_db->id;
     94c:	00000018 	andeq	r0, r0, r8, lsl r0
     950:	00000824 	andeq	r0, r0, r4, lsr #16
     954:	000020e4 	andeq	r2, r0, r4, ror #1
		strncpy(create_message->record, user_provided_record, 20);
     958:	00000080 	andeq	r0, r0, r0, lsl #1
		create_message->receiver_id = user_provided_receiver_id;
     95c:	83100e42 	tsthi	r0, #1056	; 0x420
		strncpy(create_message->record, user_provided_record, 20);
     960:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		response_checker[0] = create_message->request_number;
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
		call sender(create_message, wait);
     968:	00000014 	andeq	r0, r0, r4, lsl r0
		response_checker[1] = create_message->tpe;
     96c:	00000824 	andeq	r0, r0, r4, lsr #16
     970:	00000000 	andeq	r0, r0, r0
		call sender(create_message, wait);
     974:	00000070 	andeq	r0, r0, r0, ror r0
     978:	83080e42 	movwhi	r0, #36418	; 0x8e42
     97c:	00018e02 	andeq	r8, r1, r2, lsl #28
     980:	00000018 	andeq	r0, r0, r8, lsl r0
		ser_out(start_delete_proto, "Please provide a node ID (0-25): ");
     984:	00000824 	andeq	r0, r0, r4, lsr #16
     988:	00000000 	andeq	r0, r0, r0
		ser_inf(get_id_for_delete, "%d", &user_provided_receiver_id);
     98c:	00000078 	andeq	r0, r0, r8, ror r0
     990:	83100e42 	tsthi	r0, #1056	; 0x420
     994:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if ((user_provided_receiver_id < 1) || (user_provided_receiver_id > 25)){
     998:	00018e02 	andeq	r8, r1, r2, lsl #28
     99c:	00000020 	andeq	r0, r0, r0, lsr #32
			strncpy(reason, "Error: improper node ID", 50);
     9a0:	00000824 	andeq	r0, r0, r4, lsr #16
     9a4:	00002164 	andeq	r2, r0, r4, ror #2
			proceed error;
     9a8:	000000bc 	strheq	r0, [r0], -ip
     9ac:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
		ser_out(ask_for_record_index, "Please provide the record index (0-40): ");
     9b0:	86048505 	strhi	r8, [r4], -r5, lsl #10
     9b4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
		ser_inf(get_index_for_delete, "%d", &us_pr_in);
     9b8:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     9bc:	000b4114 	andeq	r4, fp, r4, lsl r1
     9c0:	00000018 	andeq	r0, r0, r8, lsl r0
		if (us_pr_in < 0 || us_pr_in > 40){
     9c4:	00000824 	andeq	r0, r0, r4, lsr #16
			strncpy(reason, "Error: invalid index", 50);
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	0000003a 	andeq	r0, r0, sl, lsr r0
     9d0:	83100e41 	tsthi	r0, #1040	; 0x410
			proceed error;
     9d4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		delete_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     9d8:	00018e02 	andeq	r8, r1, r2, lsl #28
     9dc:	00000018 	andeq	r0, r0, r8, lsl r0
     9e0:	00000824 	andeq	r0, r0, r4, lsr #16
		delete_record->gid = node_db->gid;
     9e4:	00000000 	andeq	r0, r0, r0
		delete_record->tpe = DELETE_RECORD;
     9e8:	00000038 	andeq	r0, r0, r8, lsr r0
		delete_record->request_number = generate_request_num();
     9ec:	83100e41 	tsthi	r0, #1040	; 0x410
     9f0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		call sender(delete_record, wait);
     9f4:	00018e02 	andeq	r8, r1, r2, lsl #28
		delete_record->sender_id = node_db->id;
     9f8:	0000000c 	andeq	r0, r0, ip
		delete_record->receiver_id = user_provided_receiver_id;
     9fc:	00000824 	andeq	r0, r0, r4, lsr #16
		delete_record->record_index = us_pr_in;
     a00:	00000000 	andeq	r0, r0, r0
     a04:	0000000a 	andeq	r0, r0, sl
		response_checker[0] = delete_record->request_number;
     a08:	00000018 	andeq	r0, r0, r8, lsl r0
		call sender(delete_record, wait);
     a0c:	00000824 	andeq	r0, r0, r4, lsr #16
     a10:	00002220 	andeq	r2, r0, r0, lsr #4
     a14:	0000002c 	andeq	r0, r0, ip, lsr #32
     a18:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     a1c:	4c018e02 	stcmi	14, cr8, [r1], {2}
		ser_out(start_retrieve_proto, "Please provide a node ID (0-25): ");
     a20:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a24:	0000001c 	andeq	r0, r0, ip, lsl r0
		ser_inf(get_id_for_retrieve, "%d", &get_id);
     a28:	00000824 	andeq	r0, r0, r4, lsr #16
     a2c:	0000224c 	andeq	r2, r0, ip, asr #4
     a30:	00000060 	andeq	r0, r0, r0, rrx
		if (get_id < 1 || get_id > 25){
     a34:	83080e41 	movwhi	r0, #36417	; 0x8e41
     a38:	61018e02 	tstvs	r1, r2, lsl #28
			strncpy(reason, "Error: improper node ID", 50);
     a3c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     a40:	000b4300 	andeq	r4, fp, r0, lsl #6
     a44:	00000014 	andeq	r0, r0, r4, lsl r0
			proceed error;
     a48:	00000824 	andeq	r0, r0, r4, lsr #16
		ser_out(ask_for_record_retrieve_index, "Please provide the record index (0-40): ");
     a4c:	00000000 	andeq	r0, r0, r0
     a50:	00000040 	andeq	r0, r0, r0, asr #32
		ser_inf(get_index_for_retrieve, "%u", &beg_for_index);
     a54:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a58:	00018e02 	andeq	r8, r1, r2, lsl #28
     a5c:	00000014 	andeq	r0, r0, r4, lsl r0
		if (beg_for_index < 0 || beg_for_index > 40){
     a60:	00000824 	andeq	r0, r0, r4, lsr #16
     a64:	00000000 	andeq	r0, r0, r0
			strncpy(reason, "Error: invalid index", 50);
     a68:	0000002c 	andeq	r0, r0, ip, lsr #32
     a6c:	83080e42 	movwhi	r0, #36418	; 0x8e42
			proceed error;
     a70:	00018e02 	andeq	r8, r1, r2, lsl #28
     a74:	0000001c 	andeq	r0, r0, ip, lsl r0
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     a78:	00000824 	andeq	r0, r0, r4, lsr #16
     a7c:	00000000 	andeq	r0, r0, r0
		retrieve_record = (struct ResponseMessage *)umalloc(sizeof(struct ResponseMessage));
     a80:	0000003c 	andeq	r0, r0, ip, lsr r0
     a84:	83180e41 	tsthi	r8, #1040	; 0x410
     a88:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		retrieve_record->gid = node_db->gid;
     a8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		retrieve_record->tpe = RETRIEVE_RECORD;
     a90:	00018e02 	andeq	r8, r1, r2, lsl #28
		retrieve_record->request_number = generate_request_num();
     a94:	0000000c 	andeq	r0, r0, ip
     a98:	00000824 	andeq	r0, r0, r4, lsr #16
		retrieve_record->receiver_id = get_id;
     a9c:	00000000 	andeq	r0, r0, r0
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aa0:	00000006 	andeq	r0, r0, r6
		retrieve_record->record_index = beg_for_index;
     aa4:	0000001c 	andeq	r0, r0, ip, lsl r0
     aa8:	00000824 	andeq	r0, r0, r4, lsr #16
		DEBUG_PRINT("\r\nret ID: %d", get_id);
     aac:	000022ac 	andeq	r2, r0, ip, lsr #5
		response_checker[0] = retrieve_record->request_number;
     ab0:	00000068 	andeq	r0, r0, r8, rrx
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     ab4:	83180e41 	tsthi	r8, #1040	; 0x410
		response_checker[1] = retrieve_record->tpe;
     ab8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		DEBUG_PRINT("\r\nret ID: %d", retrieve_record->receiver_id);
     abc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
		call sender(retrieve_record, wait);
     ac4:	00000014 	andeq	r0, r0, r4, lsl r0
     ac8:	00000824 	andeq	r0, r0, r4, lsr #16
     acc:	00002314 	andeq	r2, r0, r4, lsl r3
     ad0:	00000050 	andeq	r0, r0, r0, asr r0
     ad4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
		ser_out(display_db, "\r\nIndex\tTime Stamp\t\tOwner ID\tRecord Data");
     ad8:	00018e02 	andeq	r8, r1, r2, lsl #28
     adc:	0000002c 	andeq	r0, r0, ip, lsr #32
		if(node_db->data_base.item_count != 0){
     ae0:	00000824 	andeq	r0, r0, r4, lsr #16
     ae4:	00002364 	andeq	r2, r0, r4, ror #6
     ae8:	0000009c 	muleq	r0, ip, r0
		ser_out(loop_through_data, "\r\n");
     aec:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     af0:	86088509 	strhi	r8, [r8], -r9, lsl #10
		proceed menu;
     af4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
		delete_all(node_db);
     af8:	8a048905 	bhi	122f14 <__ccfg+0x102f6c>
     afc:	8e028b03 	vmlahi.f64	d8, d2, d3
		proceed menu;
     b00:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     b04:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
		delay(3000, timeout);
     b08:	00000b42 	andeq	r0, r0, r2, asr #22
     b0c:	00000014 	andeq	r0, r0, r4, lsl r0
		when(&response_flag, menu);
     b10:	00000824 	andeq	r0, r0, r4, lsr #16
     b14:	00002400 	andeq	r2, r0, r0, lsl #8
		release;
     b18:	00000040 	andeq	r0, r0, r0, asr #32
				ser_out(display_neighbour_nodes, "\r\nNeighbors: ");
     b1c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     b20:	00018e02 	andeq	r8, r1, r2, lsl #28
			ser_outf(display_neighbour_nodes, "%u, ", node_db->nnodes[i]);
     b24:	00000014 	andeq	r0, r0, r4, lsl r0
     b28:	00000824 	andeq	r0, r0, r4, lsr #16
     b2c:	00002440 	andeq	r2, r0, r0, asr #8
     b30:	00000034 	andeq	r0, r0, r4, lsr r0
		for (int i=0; i<node_db->index; i++) {
     b34:	83080e42 	movwhi	r0, #36418	; 0x8e42
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b38:	00018e02 	andeq	r8, r1, r2, lsl #28
     b3c:	00000018 	andeq	r0, r0, r8, lsl r0
     b40:	00000824 	andeq	r0, r0, r4, lsr #16
     b44:	00002474 	andeq	r2, r0, r4, ror r4
     b48:	0000003c 	andeq	r0, r0, ip, lsr r0
     b4c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     b50:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
			for(int i = 0; i <= node_db->data_base.item_count; i++){
     b54:	000ec4ce 	andeq	ip, lr, lr, asr #9
     b58:	00000018 	andeq	r0, r0, r8, lsl r0
     b5c:	00000824 	andeq	r0, r0, r4, lsr #16
     b60:	00000000 	andeq	r0, r0, r0
				ser_outf(loop_through_data, "\r\n%d\t%u\t\t\t%u\t%s", i, node_db->data_base.item_array[i].timestamp, node_db->data_base.item_array[i].owner_id, node_db->data_base.item_array[i].data_entry);
     b64:	0000003c 	andeq	r0, r0, ip, lsr r0
     b68:	83100e42 	tsthi	r0, #1056	; 0x420
		ser_out(timeout, "\r\nFailed to reach the destination");
     b6c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b70:	00018e02 	andeq	r8, r1, r2, lsl #28
		proceed menu;
     b74:	0000000c 	andeq	r0, r0, ip
		ser_outf(invalid_node_id, "\r\nError: %s", reason);
     b78:	00000824 	andeq	r0, r0, r4, lsr #16
     b7c:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
     b80:	00000002 	andeq	r0, r0, r2
		proceed menu;
     b84:	0000000c 	andeq	r0, r0, ip
}
     b88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b8c:	7c020001 	stcvc	0, cr0, [r2], {1}
     b90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b94:	0000000c 	andeq	r0, r0, ip
     b98:	00000b84 	andeq	r0, r0, r4, lsl #23
     b9c:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
     ba0:	00000002 	andeq	r0, r0, r2
     ba4:	0000000c 	andeq	r0, r0, ip
     ba8:	00000b84 	andeq	r0, r0, r4, lsl #23
     bac:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
     bb0:	00000002 	andeq	r0, r0, r2
     bb4:	0000000c 	andeq	r0, r0, ip
     bb8:	00000b84 	andeq	r0, r0, r4, lsl #23
     bbc:	000024b6 			; <UNDEFINED> instruction: 0x000024b6
     bc0:	00000002 	andeq	r0, r0, r2
     bc4:	00000014 	andeq	r0, r0, r4, lsl r0
     bc8:	00000b84 	andeq	r0, r0, r4, lsl #23
     bcc:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
     bd0:	00000044 	andeq	r0, r0, r4, asr #32
     bd4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bd8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bdc:	0000000c 	andeq	r0, r0, ip
     be0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     be4:	7c020001 	stcvc	0, cr0, [r2], {1}
     be8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bec:	0000000c 	andeq	r0, r0, ip
     bf0:	00000bdc 	ldrdeq	r0, [r0], -ip
     bf4:	00000000 	andeq	r0, r0, r0
     bf8:	00000002 	andeq	r0, r0, r2
static void devinit_uart (int devnum) {
     bfc:	00000018 	andeq	r0, r0, r8, lsl r0
	adddevfunc (ioreq_uart_a, devnum);
     c00:	00000bdc 	ldrdeq	r0, [r0], -ip
     c04:	00000000 	andeq	r0, r0, r0
void udelay (volatile word n) {
     c08:	00000058 	andeq	r0, r0, r8, asr r0
     c0c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	while (n) {
     c10:	86038504 	strhi	r8, [r3], -r4, lsl #10
     c14:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     c18:	0000000c 	andeq	r0, r0, ip
	while (n--);
     c1c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c20:	7c020001 	stcvc	0, cr0, [r2], {1}
     c24:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		n--;
     c28:	0000002c 	andeq	r0, r0, ip, lsr #32
     c2c:	00000c18 	andeq	r0, r0, r8, lsl ip
     c30:	00000000 	andeq	r0, r0, r0
void mdelay (volatile word n) {
     c34:	000000cc 	andeq	r0, r0, ip, asr #1
     c38:	83100e42 	tsthi	r0, #1056	; 0x420
	while (n) {
     c3c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     c40:	02018e02 	andeq	r8, r1, #2, 28
}
     c44:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
		udelay (999);
     c48:	000ec3c4 	andeq	ip, lr, r4, asr #7
     c4c:	ce420b44 	vmlsgt.f64	d16, d2, d4
		n--;
     c50:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     c54:	00000000 	andeq	r0, r0, r0
     c58:	00000024 	andeq	r0, r0, r4, lsr #32
     c5c:	00000c18 	andeq	r0, r0, r8, lsl ip
void __pi_ondomain (lword d) {
     c60:	00000000 	andeq	r0, r0, r0
     c64:	00000038 	andeq	r0, r0, r8, lsr r0
		if (__pi_systat.effpdm > 1)
     c68:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     c6c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
			__pi_systat.effpdm = 1;
     c70:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	PRCMPowerDomainOn (d);
     c74:	4a0b4300 	bmi	2d187c <__ccfg+0x2b18d4>
     c78:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     c7c:	000b4300 	andeq	r4, fp, r0, lsl #6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     c80:	0000000c 	andeq	r0, r0, ip
     c84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     c88:	7c020001 	stcvc	0, cr0, [r2], {1}
	__pi_systat.ondmns |= d;
     c8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     c90:	00000018 	andeq	r0, r0, r8, lsl r0
}
     c94:	00000c80 	andeq	r0, r0, r0, lsl #25
     c98:	00002504 	andeq	r2, r0, r4, lsl #10
void __pi_offdomain (lword d) {
     c9c:	00000034 	andeq	r0, r0, r4, lsr r0
     ca0:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
	PRCMPowerDomainOff (d);
     ca4:	86038504 	strhi	r8, [r3], -r4, lsl #10
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     ca8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cac:	00000018 	andeq	r0, r0, r8, lsl r0
     cb0:	00000c80 	andeq	r0, r0, r0, lsl #25
	if (d & PRCM_DOMAIN_RFCORE) {
     cb4:	00002538 	andeq	r2, r0, r8, lsr r5
     cb8:	00000030 	andeq	r0, r0, r0, lsr r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     cbc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     cc0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			__pi_systat.effpdm = __pi_systat.reqpdm;
     cc4:	00000001 	andeq	r0, r0, r1
     cc8:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_systat.ondmns &= ~d;
     ccc:	00000c80 	andeq	r0, r0, r0, lsl #25
     cd0:	00002568 	andeq	r2, r0, r8, ror #10
}
     cd4:	00000018 	andeq	r0, r0, r8, lsl r0
     cd8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
void __pi_syserror (word ec, const char *m) {
     cdc:	00018e02 	andeq	r8, r1, r2, lsl #28
	diag ("SYSERR: %x, %s", ec, m);
     ce0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ce4:	00000c80 	andeq	r0, r0, r0, lsl #25
  __ASM volatile ("cpsid i" : : : "memory");
     ce8:	00002580 	andeq	r2, r0, r0, lsl #11
     cec:	00000054 	andeq	r0, r0, r4, asr r0
     cf0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     cf4:	86058506 	strhi	r8, [r5], -r6, lsl #10
		all_leds_blink;
     cf8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     cfc:	00018e02 	andeq	r8, r1, r2, lsl #28
     d00:	0000001c 	andeq	r0, r0, ip, lsl r0
     d04:	00000c80 	andeq	r0, r0, r0, lsl #25
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     d08:	000025d4 	ldrdeq	r2, [r0], -r4
     d0c:	00000040 	andeq	r0, r0, r0, asr #32
     d10:	83180e41 	tsthi	r8, #1040	; 0x410
     d14:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d18:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d1c:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (1) {
     d20:	00000014 	andeq	r0, r0, r4, lsl r0
     d24:	00000c80 	andeq	r0, r0, r0, lsl #25
     d28:	00002614 	andeq	r2, r0, r4, lsl r6
     d2c:	00000024 	andeq	r0, r0, r4, lsr #32
void tci_run_delay_timer () {
     d30:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	setdel = __pi_mintk - __pi_old;
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	00000014 	andeq	r0, r0, r4, lsl r0
     d3c:	00000c80 	andeq	r0, r0, r0, lsl #25
     d40:	00002638 	andeq	r2, r0, r8, lsr r6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d44:	00000014 	andeq	r0, r0, r4, lsl r0
     d48:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d4c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d50:	0000000c 	andeq	r0, r0, ip
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     d54:	00000c80 	andeq	r0, r0, r0, lsl #25
	sti_tim;
     d58:	0000264c 	andeq	r2, r0, ip, asr #12
}
     d5c:	00000014 	andeq	r0, r0, r4, lsl r0
     d60:	0000001c 	andeq	r0, r0, ip, lsl r0
     d64:	00000c80 	andeq	r0, r0, r0, lsl #25
     d68:	00000000 	andeq	r0, r0, r0
     d6c:	00000064 	andeq	r0, r0, r4, rrx
	cli_aux;
     d70:	83180e41 	tsthi	r8, #1040	; 0x410
     d74:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     d78:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d7c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d80:	0000001c 	andeq	r0, r0, ip, lsl r0
     d84:	00000c80 	andeq	r0, r0, r0, lsl #25
	sti_aux;
     d88:	00000000 	andeq	r0, r0, r0
}
     d8c:	00000128 	andeq	r0, r0, r8, lsr #2
     d90:	83180e41 	tsthi	r8, #1040	; 0x410
     d94:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
void AONRTCIntHandler () {
     d98:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     d9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     da0:	00000024 	andeq	r0, r0, r4, lsr #32
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     da4:	00000c80 	andeq	r0, r0, r0, lsl #25
		if (__pi_utims [0] == 0)
     da8:	00000000 	andeq	r0, r0, r0
     dac:	000000ec 	andeq	r0, r0, ip, ror #1
		if (*(__pi_utims [0])) {
     db0:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     db4:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
			(*(__pi_utims [0]))--;
     db8:	87078608 	strhi	r8, [r7, -r8, lsl #12]
		if (__pi_utims [1] == 0)
     dbc:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
		if (*(__pi_utims [1])) {
     dc0:	8b038a04 	blhi	e35d8 <__ccfg+0xc3630>
			aux_timer_inactive = 0;
     dc4:	00018e02 	andeq	r8, r1, r2, lsl #28
			(*(__pi_utims [1]))--;
     dc8:	0000000c 	andeq	r0, r0, ip
		if (__pi_utims [2] == 0)
     dcc:	00000c80 	andeq	r0, r0, r0, lsl #25
		if (*(__pi_utims [2])) {
     dd0:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [2]))--;
     dd4:	00000002 	andeq	r0, r0, r2
		if (__pi_utims [3] != 0) {
     dd8:	0000000c 	andeq	r0, r0, ip
			if (*(__pi_utims [3])) {
     ddc:	00000c80 	andeq	r0, r0, r0, lsl #25
				aux_timer_inactive = 0;
     de0:	00000000 	andeq	r0, r0, r0
				(*(__pi_utims [3]))--;
     de4:	00000004 	andeq	r0, r0, r4
	if (__pi_systat.ledsts) {
     de8:	0000000c 	andeq	r0, r0, ip
     dec:	00000c80 	andeq	r0, r0, r0, lsl #25
		if (__pi_systat.ledblc++ == 0) {
     df0:	00000000 	andeq	r0, r0, r0
     df4:	00000014 	andeq	r0, r0, r4, lsl r0
			if (__pi_systat.ledblk) {
     df8:	00000018 	andeq	r0, r0, r8, lsl r0
     dfc:	00000c80 	andeq	r0, r0, r0, lsl #25
     e00:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     e04:	0000001a 	andeq	r0, r0, sl, lsl r0
     e08:	83080e41 	movwhi	r0, #36417	; 0x8e41
				if (__pi_systat.ledsts & 0x2)
     e0c:	4a018e02 	bmi	6461c <__ccfg+0x44674>
     e10:	000ec3ce 	andeq	ip, lr, lr, asr #7
     e14:	0000000c 	andeq	r0, r0, ip
				if (__pi_systat.ledsts & 0x4)
     e18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				__pi_systat.ledblk = 0;
     e1c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			if (__pi_systat.fstblk)
     e24:	0000001c 	andeq	r0, r0, ip, lsl r0
     e28:	00000e14 	andeq	r0, r0, r4, lsl lr
				__pi_systat.ledblc = 200;
     e2c:	00002660 	andeq	r2, r0, r0, ror #12
	if (events & AON_RTC_EVFLAGS_CH0) {
     e30:	0000006c 	andeq	r0, r0, ip, rrx
		cli_tim;
     e34:	83180e41 	tsthi	r8, #1040	; 0x410
		__pi_new += setdel;
     e38:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e3c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		setdel = 0;
     e40:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     e44:	0000000c 	andeq	r0, r0, ip
		__pi_new += setdel;
     e48:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		RISE_N_SHINE;
     e4c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e50:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		aux_timer_inactive = 1;
     e54:	0000001c 	andeq	r0, r0, ip, lsl r0
     e58:	00000e44 	andeq	r0, r0, r4, asr #28
				if (__pi_systat.ledsts & 0x1)
     e5c:	000026cc 	andeq	r2, r0, ip, asr #13
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     e60:	00000078 	andeq	r0, r0, r8, ror r0
     e64:	83180e41 	tsthi	r8, #1040	; 0x410
				if (__pi_systat.ledsts & 0x2)
     e68:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     e6c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     e70:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x8)
     e74:	0000000c 	andeq	r0, r0, ip
				__pi_systat.ledblk = 1;
     e78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e7c:	7c020001 	stcvc	0, cr0, [r2], {1}
		if (aux_timer_inactive) {
     e80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			cli_aux;
     e84:	00000030 	andeq	r0, r0, r0, lsr r0
     e88:	00000e74 	andeq	r0, r0, r4, ror lr
     e8c:	00002744 	andeq	r2, r0, r4, asr #14
     e90:	00000054 	andeq	r0, r0, r4, asr r0
     e94:	810c0e41 	tsthi	ip, r1, asr #28
     e98:	83028203 	movwhi	r8, #8707	; 0x2203
     e9c:	280e4101 	stmdacs	lr, {r0, r8, lr}
     ea0:	06850784 	streq	r0, [r5], r4, lsl #15
     ea4:	048e0586 	streq	r0, [lr], #1414	; 0x586
     ea8:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
word tci_update_delay_ticks (Boolean force) {
     eac:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
	cli_tim;
     eb0:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     eb4:	000ec1c2 	andeq	ip, lr, r2, asr #3
	if (setdel) {
     eb8:	0000000c 	andeq	r0, r0, ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ebc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     ec0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ec4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ec8:	00000030 	andeq	r0, r0, r0, lsr r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     ecc:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
				AON_RTC_O_CH0CMP)) - gettav ());
     ed0:	00002798 	muleq	r0, r8, r7
	return NO;
     ed4:	00000060 	andeq	r0, r0, r0, rrx
			setdel = 0;
     ed8:	810c0e41 	tsthi	ip, r1, asr #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     edc:	83028203 	movwhi	r8, #8707	; 0x2203
     ee0:	200e4101 	andcs	r4, lr, r1, lsl #2
}
     ee4:	05850684 	streq	r0, [r5, #1668]	; 0x684
		sti_tim;
     ee8:	0a64048e 	beq	1902128 <__ccfg+0x18e2180>
		return YES;
     eec:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     ef0:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     ef4:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     ef8:	0b41000e 	bleq	1040f38 <__ccfg+0x1020f90>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     efc:	0000000c 	andeq	r0, r0, ip
	UARTDisable (UART0_BASE);
     f00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     f04:	7c020001 	stcvc	0, cr0, [r2], {1}
	UARTDisable (UART0_BASE);
     f08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	UARTConfigSetExpClk (UART0_BASE,
     f0c:	0000000c 	andeq	r0, r0, ip
     f10:	00000efc 	strdeq	r0, [r0], -ip
     f14:	000027f8 	strdeq	r2, [r0], -r8
     f18:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f1c:	00000018 	andeq	r0, r0, r8, lsl r0
     f20:	00000efc 	strdeq	r0, [r0], -ip
     f24:	00002818 	andeq	r2, r0, r8, lsl r8
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     f28:	00000190 	muleq	r0, r0, r1
     f2c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f30:	86038504 	strhi	r8, [r3], -r4, lsl #10
	urates [0] = rate;
     f34:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     f38:	00000018 	andeq	r0, r0, r8, lsl r0
     f3c:	00000efc 	strdeq	r0, [r0], -ip
     f40:	000029a8 	andeq	r2, r0, r8, lsr #19
     f44:	00000048 	andeq	r0, r0, r8, asr #32
     f48:	83100e41 	tsthi	r0, #1040	; 0x410
     f4c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     f50:	00018e02 	andeq	r8, r1, r2, lsl #28
     f54:	00000014 	andeq	r0, r0, r4, lsl r0
     f58:	00000efc 	strdeq	r0, [r0], -ip
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     f5c:	000029f0 	strdeq	r2, [r0], -r0
     f60:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     f64:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     f68:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_uart_setrate (urates [0], __pi_uart);
     f6c:	00000018 	andeq	r0, r0, r8, lsl r0
     f70:	00000efc 	strdeq	r0, [r0], -ip
     f74:	00002a14 	andeq	r2, r0, r4, lsl sl
     f78:	0000005c 	andeq	r0, r0, ip, asr r0
     f7c:	83100e41 	tsthi	r0, #1040	; 0x410
     f80:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f84:	00018e02 	andeq	r8, r1, r2, lsl #28
	switch (operation) {
     f88:	00000018 	andeq	r0, r0, r8, lsl r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     f8c:	00000efc 	strdeq	r0, [r0], -ip
     f90:	00002a70 	andeq	r2, r0, r0, ror sl
     f94:	00000038 	andeq	r0, r0, r8, lsr r0
     f98:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     f9c:	86038504 	strhi	r8, [r3], -r4, lsl #10
				*buf++ = uart_a_read;
     fa0:	00018e02 	andeq	r8, r1, r2, lsl #28
     fa4:	00000028 	andeq	r0, r0, r8, lsr #32
			while (len && uart_a_char_available) {
     fa8:	00000efc 	strdeq	r0, [r0], -ip
     fac:	00002aa8 	andeq	r2, r0, r8, lsr #21
     fb0:	00000180 	andeq	r0, r0, r0, lsl #3
			if (len != operation) {
     fb4:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
}
     fb8:	86058506 	strhi	r8, [r5], -r6, lsl #10
     fbc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
			uart_a_disable_int;
     fc0:	02018e02 	andeq	r8, r1, #2, 28
			if (uart_a_char_available) {
     fc4:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
				*buf++ = uart_a_read;
     fc8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
			uart_a_disable_int;
     fcc:	00000000 	andeq	r0, r0, r0
     fd0:	00000030 	andeq	r0, r0, r0, lsr r0
			if (uart_a_char_available) {
     fd4:	00000efc 	strdeq	r0, [r0], -ip
     fd8:	00002c28 	andeq	r2, r0, r8, lsr #24
				uart_a_enable_int;
     fdc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fe0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
				goto Redo_rx;
     fe4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     fe8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     fec:	89038804 	stmdbhi	r3, {r2, fp, pc}
			return -2;
     ff0:	02018e02 	andeq	r8, r1, #2, 28
     ff4:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
				uart_a_write (*buf);
     ff8:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
     ffc:	000ec3c4 	andeq	ip, lr, r4, asr #7
			while (len && uart_a_room_in_tx) {
    1000:	00000b46 	andeq	r0, r0, r6, asr #22
    1004:	00000020 	andeq	r0, r0, r0, lsr #32
    1008:	00000efc 	strdeq	r0, [r0], -ip
			if (len != operation) {
    100c:	00002cf8 	strdeq	r2, [r0], -r8
			uart_a_disable_int;
    1010:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1014:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
			if (uart_a_room_in_tx) {
    1018:	86038504 	strhi	r8, [r3], -r4, lsl #10
    101c:	02018e02 	andeq	r8, r1, #2, 28
				uart_a_enable_int;
    1020:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
    1024:	00000ec4 	andeq	r0, r0, r4, asr #29
				*buf++ = uart_a_read;
    1028:	00000018 	andeq	r0, r0, r8, lsl r0
			if (uart_a_room_in_tx) {
    102c:	00000efc 	strdeq	r0, [r0], -ip
				uart_a_write (*buf);
    1030:	00002ee8 	andeq	r2, r0, r8, ror #29
    1034:	00000070 	andeq	r0, r0, r0, ror r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
    1038:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    103c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			uart_a_enable_int;
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000024 	andeq	r0, r0, r4, lsr #32
    1048:	00000efc 	strdeq	r0, [r0], -ip
			return 0;
    104c:	00002f58 	andeq	r2, r0, r8, asr pc
			if (len == UART_CNTRL_SETRATE) {
    1050:	00000174 	andeq	r0, r0, r4, ror r1
				if (__pi_uart_setrate (*((word*)buf),
    1054:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
    1058:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
    105c:	87078608 	strhi	r8, [r7, -r8, lsl #12]
				syserror (EREQPAR, "uar");
    1060:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
			syserror (ENOOPER, "uai");
    1064:	8b038a04 	blhi	e387c <__ccfg+0xc38d4>
			if (len == UART_CNTRL_GETRATE) {
    1068:	00018e02 	andeq	r8, r1, r2, lsl #28
				return 1;
    106c:	0000000c 	andeq	r0, r0, ip
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
    1070:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			syserror (ENOOPER, "uai");
    1074:	7c020001 	stcvc	0, cr0, [r2], {1}
    1078:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    107c:	00000014 	andeq	r0, r0, r4, lsl r0
    1080:	0000106c 	andeq	r1, r0, ip, rrx
    1084:	000030cc 	andeq	r3, r0, ip, asr #1
    1088:	00000024 	andeq	r0, r0, r4, lsr #32
    108c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1090:	00018e02 	andeq	r8, r1, r2, lsl #28
    1094:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
    1098:	0000106c 	andeq	r1, r0, ip, rrx
void UART0IntHandler () {
    109c:	000030f0 	strdeq	r3, [r0], -r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
    10a0:	00000024 	andeq	r0, r0, r4, lsr #32
    10a4:	0000000c 	andeq	r0, r0, ip
    10a8:	0000106c 	andeq	r1, r0, ip, rrx
    10ac:	00003114 	andeq	r3, r0, r4, lsl r1
    10b0:	00000008 	andeq	r0, r0, r8
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
    10b4:	0000000c 	andeq	r0, r0, ip
    10b8:	0000106c 	andeq	r1, r0, ip, rrx
		RISE_N_SHINE;
    10bc:	0000311c 	andeq	r3, r0, ip, lsl r1
    10c0:	00000004 	andeq	r0, r0, r4
		i_trigger (devevent (UART_A, READ));
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	0000106c 	andeq	r1, r0, ip, rrx
    10cc:	00003120 	andeq	r3, r0, r0, lsr #2
    10d0:	00000004 	andeq	r0, r0, r4
    10d4:	00000018 	andeq	r0, r0, r8, lsl r0
    10d8:	0000106c 	andeq	r1, r0, ip, rrx
    10dc:	00003124 	andeq	r3, r0, r4, lsr #2
    10e0:	00000048 	andeq	r0, r0, r8, asr #32
    10e4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    10e8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    10f0:	0000000c 	andeq	r0, r0, ip
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
    10f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10f8:	7c020001 	stcvc	0, cr0, [r2], {1}
    10fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		i_trigger (devevent (UART_A, WRITE));
    1100:	00000028 	andeq	r0, r0, r8, lsr #32
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
    1104:	000010f0 	strdeq	r1, [r0], -r0
    1108:	0000316c 	andeq	r3, r0, ip, ror #2
		RISE_N_SHINE;
    110c:	00000070 	andeq	r0, r0, r0, ror r0
    1110:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1114:	86048505 	strhi	r8, [r4], -r5, lsl #10
		i_trigger (devevent (UART_A, WRITE));
    1118:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    111c:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
    1120:	c7ce4214 	bfigt	r4, r4, #4, #11
    1124:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1128:	000b4200 	andeq	r4, fp, r0, lsl #4
    112c:	0000000c 	andeq	r0, r0, ip
    1130:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1134:	7c020001 	stcvc	0, cr0, [r2], {1}
    1138:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    113c:	00000028 	andeq	r0, r0, r8, lsr #32
    1140:	0000112c 	andeq	r1, r0, ip, lsr #2
}
    1144:	000031dc 	ldrdeq	r3, [r0], -ip
    1148:	0000011c 	andeq	r0, r0, ip, lsl r1
    114c:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1150:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1154:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
void __buttons_setirq (int val) {
    1158:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
    115c:	c7ce4214 	bfigt	r4, r4, #4, #11
    1160:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1164:	00000000 	andeq	r0, r0, r0
    1168:	0000000c 	andeq	r0, r0, ip
    116c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		bn = BUTTON_GPIO (__button_list [i]);
    1170:	7c020001 	stcvc	0, cr0, [r2], {1}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    1174:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1178:	0000000c 	andeq	r0, r0, ip
    117c:	00001168 	andeq	r1, r0, r8, ror #2
    1180:	000032f8 	strdeq	r3, [r0], -r8
    1184:	00000020 	andeq	r0, r0, r0, lsr #32
    1188:	00000028 	andeq	r0, r0, r8, lsr #32
}
    118c:	00001168 	andeq	r1, r0, r8, ror #2
    1190:	00003318 	andeq	r3, r0, r8, lsl r3
    1194:	00000230 	andeq	r0, r0, r0, lsr r2
    1198:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
void __pinlist_setirq (int val) {
    119c:	86078508 	strhi	r8, [r7], -r8, lsl #10
	for (i = 0; i < N_PINLIST; i++) {
    11a0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11a4:	8a038904 	bhi	e35bc <__ccfg+0xc3614>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11a8:	02018e02 	andeq	r8, r1, #2, 28
	for (i = 0; i < N_PINLIST; i++) {
    11ac:	200e0a4f 	andcs	r0, lr, pc, asr #20
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
    11b0:	00000b42 	andeq	r0, r0, r2, asr #22
    11b4:	0000001c 	andeq	r0, r0, ip, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
    11b8:	00001168 	andeq	r1, r0, r8, ror #2
    11bc:	00003548 	andeq	r3, r0, r8, asr #10
    11c0:	00000050 	andeq	r0, r0, r0, asr r0
	for (i = 0; i < N_PINLIST; i++) {
    11c4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
}
    11c8:	86058506 	strhi	r8, [r5], -r6, lsl #10
    11cc:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    11d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    11d4:	0000000c 	andeq	r0, r0, ip
void GPIOIntHandler () {
    11d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
if (buttons_int) {
    11dc:	7c020001 	stcvc	0, cr0, [r2], {1}
    11e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	buttons_disable ();
    11e4:	00000020 	andeq	r0, r0, r0, lsr #32
    11e8:	000011d4 	ldrdeq	r1, [r0], -r4
	i_trigger ((aword)&__button_list);
    11ec:	00003598 	muleq	r0, r8, r5
    11f0:	00000390 	muleq	r0, r0, r3
    11f4:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
    11f8:	86068507 	strhi	r8, [r6], -r7, lsl #10
    11fc:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    1200:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    1204:	00000001 	andeq	r0, r0, r1
    1208:	0000000c 	andeq	r0, r0, ip
    120c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1210:	7c020001 	stcvc	0, cr0, [r2], {1}
    1214:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1218:	00000024 	andeq	r0, r0, r4, lsr #32
	RISE_N_SHINE;
    121c:	00001208 	andeq	r1, r0, r8, lsl #4
    1220:	00003928 	andeq	r3, r0, r8, lsr #18
if (pin_sensor_int) {
    1224:	00000028 	andeq	r0, r0, r8, lsr #32
    1228:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	i_trigger ((aword)(&__input_pins));
    122c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1230:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    1234:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    1238:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    123c:	0000000b 	andeq	r0, r0, fp
    1240:	00000028 	andeq	r0, r0, r8, lsr #32
    1244:	00001208 	andeq	r1, r0, r8, lsl #4
    1248:	00000000 	andeq	r0, r0, r0
    124c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1250:	83180e41 	tsthi	r8, #1040	; 0x410
    1254:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	__pinsen_disable_and_clear;
    1258:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	RISE_N_SHINE;
    125c:	50018e02 	andpl	r8, r1, r2, lsl #28
    1260:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1264:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
}
    1268:	000b4200 	andeq	r4, fp, r0, lsl #4
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1274:	7c020001 	stcvc	0, cr0, [r2], {1}
    1278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    127c:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1280:	0000126c 	andeq	r1, r0, ip, ror #4
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
    1284:	00003950 	andeq	r3, r0, r0, asr r9
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
    1288:	00000030 	andeq	r0, r0, r0, lsr r0
    128c:	0000000c 	andeq	r0, r0, ip
    1290:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
    1294:	7c020001 	stcvc	0, cr0, [r2], {1}
    1298:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    129c:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
    12a0:	0000128c 	andeq	r1, r0, ip, lsl #5
    12a4:	00003980 	andeq	r3, r0, r0, lsl #19
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12a8:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    12ac:	0000000c 	andeq	r0, r0, ip
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12b0:	0000128c 	andeq	r1, r0, ip, lsl #5
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12b4:	000039a0 	andeq	r3, r0, r0, lsr #19
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12bc:	0000000c 	andeq	r0, r0, ip
		pin = (port_confs [i] >> 19) & 0x1f;
    12c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12c4:	7c020001 	stcvc	0, cr0, [r2], {1}
		pin = (port_confs [i] >> 19) & 0x1f;
    12c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12cc:	0000000c 	andeq	r0, r0, ip
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
    12d0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    12d4:	000039b8 			; <UNDEFINED> instruction: 0x000039b8
    12d8:	00000008 	andeq	r0, r0, r8
		if (port_confs [i] & 0x80)
    12dc:	0000000c 	andeq	r0, r0, ip
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    12e0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    12e4:	00000000 	andeq	r0, r0, r0
		if (port_confs [i] & 0x40)
    12e8:	00000006 	andeq	r0, r0, r6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    12f4:	000039c0 	andeq	r3, r0, r0, asr #19
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
    12f8:	00000008 	andeq	r0, r0, r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    12fc:	0000000c 	andeq	r0, r0, ip
	all_leds_blink;
    1300:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    1304:	00000000 	andeq	r0, r0, r0
    1308:	00000006 	andeq	r0, r0, r6
    130c:	0000000c 	andeq	r0, r0, ip
    1310:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    1314:	00000000 	andeq	r0, r0, r0
    1318:	00000008 	andeq	r0, r0, r8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    131c:	0000000c 	andeq	r0, r0, ip
    1320:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1324:	7c020001 	stcvc	0, cr0, [r2], {1}
    1328:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    132c:	0000001c 	andeq	r0, r0, ip, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
    1330:	0000131c 	andeq	r1, r0, ip, lsl r3
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
    1334:	000039c8 	andeq	r3, r0, r8, asr #19
    1338:	0000005c 	andeq	r0, r0, ip, asr r0
	IntEnable (INT_AON_RTC_COMB);
    133c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1340:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1344:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
	__pi_malloc_init ();
    1348:	0000100e 	andeq	r1, r0, lr
	IntEnable (INT_AON_GPIO_EDGE);
    134c:	00000014 	andeq	r0, r0, r4, lsl r0
    1350:	0000131c 	andeq	r1, r0, ip, lsl r3
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
    1354:	00003a24 	andeq	r3, r0, r4, lsr #20
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
    1358:	0000002c 	andeq	r0, r0, ip, lsr #32
    135c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1360:	00018e02 	andeq	r8, r1, r2, lsl #28
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
    1364:	00000018 	andeq	r0, r0, r8, lsl r0
    1368:	0000131c 	andeq	r1, r0, ip, lsl r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
    136c:	00000000 	andeq	r0, r0, r0
    1370:	00000090 	muleq	r0, r0, r0
    1374:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	urates [0] = UART_RATE / 100;
    1378:	86038504 	strhi	r8, [r3], -r4, lsl #10
    137c:	00018e02 	andeq	r8, r1, r2, lsl #28
	reinit_uart ();
    1380:	00000014 	andeq	r0, r0, r4, lsl r0
	EXTRA_INITIALIZERS;
    1384:	0000131c 	andeq	r1, r0, ip, lsl r3
    1388:	00003a50 	andeq	r3, r0, r0, asr sl
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
    138c:	00000018 	andeq	r0, r0, r8, lsl r0
    1390:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
    1398:	00000014 	andeq	r0, r0, r4, lsl r0
    139c:	0000131c 	andeq	r1, r0, ip, lsl r3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    13a0:	00003a68 	andeq	r3, r0, r8, ror #20
    13a4:	00000060 	andeq	r0, r0, r0, rrx
			devinit [i] . init (devinit [i] . param);
    13a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
    13b4:	0000131c 	andeq	r1, r0, ip, lsl r3
	IntEnable (INT_UART0_COMB);
    13b8:	00003ac8 	andeq	r3, r0, r8, asr #21
    13bc:	00000034 	andeq	r0, r0, r4, lsr r0
}
    13c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	tci_run_auxiliary_timer ();
    13c4:	00018e02 	andeq	r8, r1, r2, lsl #28
		diag ("");
    13c8:	00000018 	andeq	r0, r0, r8, lsl r0
    13cc:	0000131c 	andeq	r1, r0, ip, lsl r3
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
    13d0:	00000000 	andeq	r0, r0, r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
    13d4:	00000038 	andeq	r0, r0, r8, lsr r0
		diag ("Leftover RAM: %d bytes",
    13d8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    13dc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    13e0:	00000001 	andeq	r0, r0, r1
    13e4:	0000000c 	andeq	r0, r0, ip
    13e8:	0000131c 	andeq	r1, r0, ip, lsl r3
    13ec:	00000000 	andeq	r0, r0, r0
    13f0:	0000000c 	andeq	r0, r0, ip
    13f4:	00000018 	andeq	r0, r0, r8, lsl r0
    13f8:	0000131c 	andeq	r1, r0, ip, lsl r3
    13fc:	00000000 	andeq	r0, r0, r0
    1400:	00000034 	andeq	r0, r0, r4, lsr r0
    1404:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1408:	86038504 	strhi	r8, [r3], -r4, lsl #10
    140c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1410:	0000000c 	andeq	r0, r0, ip
    1414:	0000131c 	andeq	r1, r0, ip, lsl r3
    1418:	00000000 	andeq	r0, r0, r0
    141c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1420:	0000000c 	andeq	r0, r0, ip
    1424:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1428:	7c020001 	stcvc	0, cr0, [r2], {1}
    142c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1430:	0000000c 	andeq	r0, r0, ip
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
    1434:	00001420 	andeq	r1, r0, r0, lsr #8
    1438:	00000000 	andeq	r0, r0, r0
    143c:	00000014 	andeq	r0, r0, r4, lsl r0
    1440:	0000000c 	andeq	r0, r0, ip
    1444:	00001420 	andeq	r1, r0, r0, lsr #8
    1448:	00003afc 	strdeq	r3, [r0], -ip
    144c:	00000028 	andeq	r0, r0, r8, lsr #32
    1450:	0000000c 	andeq	r0, r0, ip
}
    1454:	00001420 	andeq	r1, r0, r0, lsr #8
__attribute__ ((noreturn)) void __pi_release () {
    1458:	00003b24 	andeq	r3, r0, r4, lsr #22
    145c:	0000004c 	andeq	r0, r0, ip, asr #32
    1460:	0000000c 	andeq	r0, r0, ip
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
    1464:	00001420 	andeq	r1, r0, r0, lsr #8
	check_stack_overflow;
    1468:	00003b70 	andeq	r3, r0, r0, ror fp
    146c:	00000150 	andeq	r0, r0, r0, asr r1
    1470:	00000018 	andeq	r0, r0, r8, lsl r0
	update_n_wake (MAX_WORD, NO);
    1474:	00001420 	andeq	r1, r0, r0, lsr #8
    1478:	00003cc0 	andeq	r3, r0, r0, asr #25
    147c:	00000118 	andeq	r0, r0, r8, lsl r1
	for_all_tasks (__pi_curr) {
    1480:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    1484:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1488:	00018e02 	andeq	r8, r1, r2, lsl #28
  __ASM volatile ("cpsid i" : : : "memory");
    148c:	00000018 	andeq	r0, r0, r8, lsl r0
	__SLEEP;
    1490:	00001420 	andeq	r1, r0, r0, lsr #8
    1494:	00003dd8 	ldrdeq	r3, [r0], -r8
    1498:	00000020 	andeq	r0, r0, r0, lsr #32
    149c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
	system_event_count ++;
    14a0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    14a4:	00000001 	andeq	r0, r0, r1
	switch (__pi_systat.effpdm) {
    14a8:	00000014 	andeq	r0, r0, r4, lsl r0
    14ac:	00001420 	andeq	r1, r0, r0, lsr #8
    14b0:	00000000 	andeq	r0, r0, r0
    14b4:	00000060 	andeq	r0, r0, r0, rrx
			__WFI ();
    14b8:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14bc:	00018e02 	andeq	r8, r1, r2, lsl #28
    14c0:	0000000c 	andeq	r0, r0, ip
	check_stack_overflow;
    14c4:	00001420 	andeq	r1, r0, r0, lsr #8
    14c8:	00003df8 	strdeq	r3, [r0], -r8
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
    14cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d0:	0000000c 	andeq	r0, r0, ip
			(__pi_curr->code) (tstate (__pi_curr));
    14d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			goto Redo;
    14d8:	7c020001 	stcvc	0, cr0, [r2], {1}
	for_all_tasks (__pi_curr) {
    14dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14e0:	00000018 	andeq	r0, r0, r8, lsl r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
    14e4:	000014d0 	ldrdeq	r1, [r0], -r0
    14e8:	00003e14 	andeq	r3, r0, r4, lsl lr
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    14ec:	000000d4 	ldrdeq	r0, [r0], -r4
    14f0:	83100e41 	tsthi	r0, #1040	; 0x410
    14f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
    14f8:	00018e02 	andeq	r8, r1, r2, lsl #28
    14fc:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1500:	000014d0 	ldrdeq	r1, [r0], -r0
    1504:	00003ee8 	andeq	r3, r0, r8, ror #29
			__WFI ();
    1508:	000000a4 	andeq	r0, r0, r4, lsr #1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    150c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1510:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    1514:	0000000c 	andeq	r0, r0, ip
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
    151c:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    1520:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1524:	00000018 	andeq	r0, r0, r8, lsl r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
    1528:	00001514 	andeq	r1, r0, r4, lsl r5
    152c:	00003f8c 	andeq	r3, r0, ip, lsl #31
    1530:	0000007c 	andeq	r0, r0, ip, ror r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1534:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
    1538:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    153c:	00000001 	andeq	r0, r0, r1
    1540:	00000014 	andeq	r0, r0, r4, lsl r0
    1544:	00001514 	andeq	r1, r0, r4, lsl r5
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    1548:	00004008 	andeq	r4, r0, r8
    154c:	000000ac 	andeq	r0, r0, ip, lsr #1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
    1550:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
    1554:	00018e02 	andeq	r8, r1, r2, lsl #28
    1558:	0000000c 	andeq	r0, r0, ip
    155c:	00001514 	andeq	r1, r0, r4, lsl r5
    1560:	000040b4 	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
    1564:	0000005c 	andeq	r0, r0, ip, asr r0
			SysCtrlSetRechargeBeforePowerDown
    1568:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
    156c:	00001514 	andeq	r1, r0, r4, lsl r5
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
    1570:	00004110 	andeq	r4, r0, r0, lsl r1
    1574:	00000018 	andeq	r0, r0, r8, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
    1578:	0000000c 	andeq	r0, r0, ip
    157c:	00001514 	andeq	r1, r0, r4, lsl r5
    1580:	00000000 	andeq	r0, r0, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
    1584:	00000010 	andeq	r0, r0, r0, lsl r0
    1588:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
    158c:	00001514 	andeq	r1, r0, r4, lsl r5
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1590:	00004128 	andeq	r4, r0, r8, lsr #2
    1594:	00000010 	andeq	r0, r0, r0, lsl r0
    1598:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
    159c:	00001514 	andeq	r1, r0, r4, lsl r5
			while (!(AONWUCPowerStatusGet () &
    15a0:	00004138 	andeq	r4, r0, r8, lsr r1
			PRCMPowerDomainOn (__pi_systat.ondmns);
    15a4:	00000014 	andeq	r0, r0, r4, lsl r0
    15a8:	00000018 	andeq	r0, r0, r8, lsl r0
    15ac:	00001514 	andeq	r1, r0, r4, lsl r5
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
    15b0:	0000414c 	andeq	r4, r0, ip, asr #2
    15b4:	00000064 	andeq	r0, r0, r4, rrx
    15b8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    15bc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
    15c0:	00018e02 	andeq	r8, r1, r2, lsl #28
    15c4:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
    15c8:	00001514 	andeq	r1, r0, r4, lsl r5
    15cc:	000041b0 			; <UNDEFINED> instruction: 0x000041b0
			SysCtrlAdjustRechargeAfterPowerDown ();
    15d0:	00000014 	andeq	r0, r0, r4, lsl r0
			reinit_uart ();
    15d4:	0000000c 	andeq	r0, r0, ip
    15d8:	00001514 	andeq	r1, r0, r4, lsl r5
    15dc:	000041c4 	andeq	r4, r0, r4, asr #3
}
    15e0:	00000014 	andeq	r0, r0, r4, lsl r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
    15e4:	0000000c 	andeq	r0, r0, ip
    15e8:	00001514 	andeq	r1, r0, r4, lsl r5
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
    15ec:	000041d8 	ldrdeq	r4, [r0], -r8
    15f0:	00000014 	andeq	r0, r0, r4, lsl r0
    15f4:	0000000c 	andeq	r0, r0, ip
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
    15f8:	00001514 	andeq	r1, r0, r4, lsl r5
    15fc:	000041ec 	andeq	r4, r0, ip, ror #3
    1600:	00000028 	andeq	r0, r0, r8, lsr #32
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
    1604:	0000000c 	andeq	r0, r0, ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
    1608:	00001514 	andeq	r1, r0, r4, lsl r5
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
    160c:	00004214 	andeq	r4, r0, r4, lsl r2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
    1610:	00000010 	andeq	r0, r0, r0, lsl r0
    1614:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
    1618:	00001514 	andeq	r1, r0, r4, lsl r5
    161c:	00004224 	andeq	r4, r0, r4, lsr #4
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
    1620:	0000002c 	andeq	r0, r0, ip, lsr #32
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
    1624:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
    1628:	00001514 	andeq	r1, r0, r4, lsl r5
    162c:	00004250 	andeq	r4, r0, r0, asr r2
			PRCMPowerDomainOff (
    1630:	00000014 	andeq	r0, r0, r4, lsl r0
    1634:	0000000c 	andeq	r0, r0, ip
	__SLEEP;
    1638:	00001514 	andeq	r1, r0, r4, lsl r5
    163c:	00004264 	andeq	r4, r0, r4, ror #4
  __ASM volatile ("cpsie i" : : : "memory");
    1640:	00000014 	andeq	r0, r0, r4, lsl r0
	goto Redo;
    1644:	0000001c 	andeq	r0, r0, ip, lsl r0
    1648:	00001514 	andeq	r1, r0, r4, lsl r5
    164c:	00004278 	andeq	r4, r0, r8, ror r2
    1650:	00000110 	andeq	r0, r0, r0, lsl r1
    1654:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1658:	86038504 	strhi	r8, [r3], -r4, lsl #10
    165c:	02018e02 	andeq	r8, r1, #2, 28
    1660:	00100e76 	andseq	r0, r0, r6, ror lr
    1664:	00000018 	andeq	r0, r0, r8, lsl r0
    1668:	00001514 	andeq	r1, r0, r4, lsl r5
    166c:	00004388 	andeq	r4, r0, r8, lsl #7
    1670:	00000064 	andeq	r0, r0, r4, rrx
    1674:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1678:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    167c:	00000001 	andeq	r0, r0, r1
    1680:	0000000c 	andeq	r0, r0, ip
    1684:	00001514 	andeq	r1, r0, r4, lsl r5
    1688:	000043ec 	andeq	r4, r0, ip, ror #7
    168c:	00000028 	andeq	r0, r0, r8, lsr #32
    1690:	00000014 	andeq	r0, r0, r4, lsl r0
    1694:	00001514 	andeq	r1, r0, r4, lsl r5
    1698:	00004414 	andeq	r4, r0, r4, lsl r4
    169c:	00000150 	andeq	r0, r0, r0, asr r1
    16a0:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    16a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    16a8:	0000000c 	andeq	r0, r0, ip
    16ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	cli_tim;
    16b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    16b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16b8:	0000001c 	andeq	r0, r0, ip, lsl r0
	diag ("PicOS halted");
    16bc:	000016a8 	andeq	r1, r0, r8, lsr #13
	mdelay (500);
    16c0:	00000000 	andeq	r0, r0, r0
    16c4:	000000f4 	strdeq	r0, [r0], -r4
	setpowermode (2);
    16c8:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
	__PCB = NULL;
    16cc:	86058506 	strhi	r8, [r5], -r6, lsl #10
	release;
    16d0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    16d4:	00018e02 	andeq	r8, r1, r2, lsl #28
    16d8:	00000028 	andeq	r0, r0, r8, lsr #32
    16dc:	000016a8 	andeq	r1, r0, r8, lsr #13
int main (void) {
    16e0:	00004564 	andeq	r4, r0, r4, ror #10
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
    16e4:	00000220 	andeq	r0, r0, r0, lsr #4
    16e8:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
    16ec:	86088509 	strhi	r8, [r8], -r9, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16f0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
	system_init ();
    16f4:	8a048905 	bhi	123b10 <__ccfg+0x103b68>
	tcv_init ();
    16f8:	8e028b03 	vmlahi.f64	d8, d2, d3
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
    16fc:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
    1700:	00000024 	andeq	r0, r0, r4, lsr #32
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
    1704:	00000014 	andeq	r0, r0, r4, lsl r0
    1708:	000016a8 	andeq	r1, r0, r8, lsr #13
    170c:	00004784 	andeq	r4, r0, r4, lsl #15
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
    1710:	00000060 	andeq	r0, r0, r0, rrx
    1714:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	delay (16, 0);
    1718:	00018e02 	andeq	r8, r1, r2, lsl #28
    171c:	00000014 	andeq	r0, r0, r4, lsl r0
    1720:	000016a8 	andeq	r1, r0, r8, lsr #13
	__pi_release ();
    1724:	00000000 	andeq	r0, r0, r0
    1728:	00000078 	andeq	r0, r0, r8, ror r0
    172c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1730:	00018e02 	andeq	r8, r1, r2, lsl #28
    1734:	0000000c 	andeq	r0, r0, ip
    1738:	000016a8 	andeq	r1, r0, r8, lsr #13
    173c:	000047e4 	andeq	r4, r0, r4, ror #15
static void killev (__pi_pcb_t *pid) {
    1740:	00000018 	andeq	r0, r0, r8, lsl r0
	wfun = (aword)(pid->code);
    1744:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    1748:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		for (j = 0; j < nevents (i); j++) {
    174c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1750:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1754:	0000000c 	andeq	r0, r0, ip
			    || i->Events [j] . Event == wfun
    1758:	00001744 	andeq	r1, r0, r4, asr #14
		for (j = 0; j < nevents (i); j++) {
    175c:	00000000 	andeq	r0, r0, r0
			if (i->Events [j] . Event == (aword)pid
    1760:	00000010 	andeq	r0, r0, r0, lsl r0
    1764:	0000000c 	andeq	r0, r0, ip
    1768:	00001744 	andeq	r1, r0, r4, asr #14
				wakeupev (i, j);
    176c:	00000000 	andeq	r0, r0, r0
    1770:	00000018 	andeq	r0, r0, r8, lsl r0
	for_all_tasks (i) {
    1774:	0000000c 	andeq	r0, r0, ip
}
    1778:	00001744 	andeq	r1, r0, r4, asr #14
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    177c:	000047fc 	strdeq	r4, [r0], -ip
static void qfree (aword *ch) {
    1780:	0000004c 	andeq	r0, r0, ip, asr #32
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    1784:	00000014 	andeq	r0, r0, r4, lsl r0
	cc = (aword*)(mpools + MA_NP);
    1788:	00001744 	andeq	r1, r0, r4, asr #14
	m_setnextp (ch, chunk);
    178c:	00000000 	andeq	r0, r0, r0
	m_setnextp (cc, ch);
    1790:	00000030 	andeq	r0, r0, r0, lsr r0
}
    1794:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
    1798:	00018e02 	andeq	r8, r1, r2, lsl #28
    179c:	00000018 	andeq	r0, r0, r8, lsl r0
    17a0:	00001744 	andeq	r1, r0, r4, asr #14
			m_setnextp (cc, m_nextp (chunk));
    17a4:	00004848 	andeq	r4, r0, r8, asr #16
			m_size (chunk) += m_hdrlen + m_size (ch);
    17a8:	0000006c 	andeq	r0, r0, ip, rrx
    17ac:	83100e41 	tsthi	r0, #1040	; 0x410
    17b0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    17b4:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
    17b8:	00000014 	andeq	r0, r0, r4, lsl r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
    17bc:	00001744 	andeq	r1, r0, r4, asr #14
    17c0:	000048b4 			; <UNDEFINED> instruction: 0x000048b4
    17c4:	00000016 	andeq	r0, r0, r6, lsl r0
			m_setnextp (cc, m_nextp (chunk));
    17c8:	83080e41 	movwhi	r0, #36417	; 0x8e41
			m_size (ch) += m_hdrlen + m_size (chunk);
    17cc:	00018e02 	andeq	r8, r1, r2, lsl #28
    17d0:	0000000c 	andeq	r0, r0, ip
    17d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17d8:	7c020001 	stcvc	0, cr0, [r2], {1}
    17dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17e0:	00000024 	andeq	r0, r0, r4, lsr #32
			if (m_size (chunk) >= m_size (ch))
    17e4:	000017d0 	ldrdeq	r1, [r0], -r0
    17e8:	000048cc 	andeq	r4, r0, ip, asr #17
    17ec:	00000028 	andeq	r0, r0, r8, lsr #32
		chunk = m_nextp (chunk))
    17f0:	83100e41 	tsthi	r0, #1040	; 0x410
    17f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    17f8:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    17fc:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
	diag_wait (a);
    1800:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
	diag_wchar (c, a);
    1804:	0000000b 	andeq	r0, r0, fp
    1808:	0000000c 	andeq	r0, r0, ip
}
    180c:	000017d0 	ldrdeq	r1, [r0], -r0
    1810:	000048f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
	syserror (ESTATE, "state");
    1814:	00000008 	andeq	r0, r0, r8
    1818:	0000000c 	andeq	r0, r0, ip
    181c:	000017d0 	ldrdeq	r1, [r0], -r0
    1820:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    1824:	00000022 	andeq	r0, r0, r2, lsr #32
void utimer_add (address ut) {
    1828:	00000018 	andeq	r0, r0, r8, lsl r0
    182c:	000017d0 	ldrdeq	r1, [r0], -r0
		if (__pi_utims [i] == NULL)
    1830:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    1834:	0000002e 	andeq	r0, r0, lr, lsr #32
    1838:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		syserror (ERESOURCE, "ut a");
    183c:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
	__pi_utims [i] = ut;
    1840:	000ec4ce 	andeq	ip, lr, lr, asr #9
}
    1844:	00000018 	andeq	r0, r0, r8, lsl r0
    1848:	000017d0 	ldrdeq	r1, [r0], -r0
    184c:	00000000 	andeq	r0, r0, r0
	*t = v;
    1850:	00000034 	andeq	r0, r0, r4, lsr r0
	TCI_RUN_AUXILIARY_TIMER;
    1854:	83100e41 	tsthi	r0, #1040	; 0x410
void update_n_wake (word min, Boolean force) {
    1858:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	if (TCI_UPDATE_DELAY_TICKS (force))
    185c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1860:	00000018 	andeq	r0, r0, r8, lsl r0
    1864:	000017d0 	ldrdeq	r1, [r0], -r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1868:	00000000 	andeq	r0, r0, r0
    186c:	00000040 	andeq	r0, r0, r0, asr #32
    1870:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1874:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1878:	00018e02 	andeq	r8, r1, r2, lsl #28
    187c:	0000000c 	andeq	r0, r0, ip
    1880:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1884:	7c020001 	stcvc	0, cr0, [r2], {1}
    1888:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    188c:	00000020 	andeq	r0, r0, r0, lsr #32
    1890:	0000187c 	andeq	r1, r0, ip, ror r8
    1894:	000048fc 	strdeq	r4, [r0], -ip
    1898:	000000aa 	andeq	r0, r0, sl, lsr #1
		for_all_tasks (i) {
    189c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	__pi_mintk = znew + min;
    18a0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    18a4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
			if (!twaiting (i))
    18a8:	180e4201 	stmdane	lr, {r0, r9, lr}
    18ac:	00000688 	andeq	r0, r0, r8, lsl #13
			if (twakecnd (__pi_old, znew, i->Timer)) {
    18b0:	0000000c 	andeq	r0, r0, ip
    18b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18b8:	7c020001 	stcvc	0, cr0, [r2], {1}
    18bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18c0:	0000000c 	andeq	r0, r0, ip
    18c4:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    18c8:	000049a8 	andeq	r4, r0, r8, lsr #19
    18cc:	00000014 	andeq	r0, r0, r4, lsl r0
    18d0:	00000014 	andeq	r0, r0, r4, lsl r0
    18d4:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    18d8:	000049bc 			; <UNDEFINED> instruction: 0x000049bc
    18dc:	00000038 	andeq	r0, r0, r8, lsr r0
				wakeuptm (i);
    18e0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    18e4:	00018e02 	andeq	r8, r1, r2, lsl #28
		for_all_tasks (i) {
    18e8:	0000000c 	andeq	r0, r0, ip
				d = i->Timer - znew;
    18ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    18f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		if ((word)(__pi_mintk - znew) < min) 
    18f8:	00000020 	andeq	r0, r0, r0, lsr #32
    18fc:	000018e8 	andeq	r1, r0, r8, ror #17
    1900:	000049f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
	__pi_old = znew;
    1904:	00000054 	andeq	r0, r0, r4, asr r0
}
    1908:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	TCI_RUN_DELAY_TIMER;
    190c:	86048505 	strhi	r8, [r4], -r5, lsl #10
}
    1910:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1914:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
    1918:	00000688 	andeq	r0, r0, r8, lsl #13
